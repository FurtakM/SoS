// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3401 0 0
// PrepareAmerican ;
  37: CALL 1011 0 0
// PrepareRussian ;
  41: CALL 8706 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 89605 0 9
// Action ;
  97: CALL 25319 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: PUSH
 364: LD_EXP 4
 368: NOT
 369: AND
 370: PUSH
 371: LD_EXP 19
 375: AND
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 3
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PPUSH
 387: CALL_OW 69
 391: PUSH
 392: LD_INT 0
 394: EQUAL
 395: AND
 396: IFFALSE 408
 398: GO 400
 400: DISABLE
// SetAchievement ( ACH_POWER ) ;
 401: LD_STRING ACH_POWER
 403: PPUSH
 404: CALL_OW 543
 408: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 409: LD_EXP 19
 413: PUSH
 414: LD_EXP 68
 418: NOT
 419: AND
 420: PUSH
 421: LD_EXP 69
 425: NOT
 426: AND
 427: PUSH
 428: LD_INT 22
 430: PUSH
 431: LD_INT 3
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PPUSH
 438: CALL_OW 69
 442: PUSH
 443: LD_INT 0
 445: EQUAL
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_TACT ) ;
 452: LD_STRING ACH_TACT
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 30
 501: PUSH
 502: LD_INT 32
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PPUSH
 513: CALL_OW 69
 517: AND
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 30
 531: PUSH
 532: LD_INT 33
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PPUSH
 543: CALL_OW 69
 547: AND
 548: PUSH
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 30
 561: PUSH
 562: LD_INT 5
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: AND
 578: PUSH
 579: LD_INT 22
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 30
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PPUSH
 603: CALL_OW 69
 607: AND
 608: PUSH
 609: LD_INT 22
 611: PUSH
 612: LD_INT 1
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 30
 621: PUSH
 622: LD_INT 36
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PPUSH
 633: CALL_OW 69
 637: AND
 638: PUSH
 639: LD_INT 22
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 30
 651: PUSH
 652: LD_INT 31
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PPUSH
 663: CALL_OW 69
 667: AND
 668: PUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 1
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 30
 681: PUSH
 682: LD_INT 22
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PPUSH
 693: CALL_OW 69
 697: AND
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: LD_INT 30
 711: PUSH
 712: LD_INT 20
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PPUSH
 723: CALL_OW 69
 727: AND
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 30
 741: PUSH
 742: LD_INT 19
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: AND
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 16
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: PUSH
 789: LD_INT 22
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 30
 801: PUSH
 802: LD_INT 17
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: AND
 818: PUSH
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: AND
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 30
 861: PUSH
 862: LD_INT 29
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: AND
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 30
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PPUSH
 903: CALL_OW 69
 907: AND
 908: PUSH
 909: LD_INT 22
 911: PUSH
 912: LD_INT 1
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 30
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PPUSH
 933: CALL_OW 69
 937: AND
 938: PUSH
 939: LD_INT 22
 941: PUSH
 942: LD_INT 1
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 30
 951: PUSH
 952: LD_INT 26
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PPUSH
 963: CALL_OW 69
 967: AND
 968: PUSH
 969: LD_INT 22
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 30
 981: PUSH
 982: LD_INT 28
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PPUSH
 993: CALL_OW 69
 997: AND
 998: IFFALSE 1010
1000: GO 1002
1002: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1003: LD_STRING ACH_ARCH
1005: PPUSH
1006: CALL_OW 543
1010: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1011: LD_INT 0
1013: PPUSH
1014: PPUSH
1015: PPUSH
1016: PPUSH
1017: PPUSH
1018: PPUSH
1019: PPUSH
1020: PPUSH
// uc_nation := nation_american ;
1021: LD_ADDR_OWVAR 21
1025: PUSH
1026: LD_INT 1
1028: ST_TO_ADDR
// uc_side := 4 ;
1029: LD_ADDR_OWVAR 20
1033: PUSH
1034: LD_INT 4
1036: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1037: LD_ADDR_EXP 44
1041: PUSH
1042: LD_STRING Powell
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_STRING 
1050: PPUSH
1051: CALL 55133 0 3
1055: ST_TO_ADDR
// uc_side := 1 ;
1056: LD_ADDR_OWVAR 20
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// JMMSquad := [ ] ;
1064: LD_ADDR_EXP 45
1068: PUSH
1069: EMPTY
1070: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1071: LD_ADDR_EXP 23
1075: PUSH
1076: LD_STRING JMM
1078: PPUSH
1079: LD_EXP 1
1083: NOT
1084: PPUSH
1085: LD_STRING 10_
1087: PPUSH
1088: CALL 55133 0 3
1092: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1093: LD_ADDR_EXP 32
1097: PUSH
1098: LD_STRING Gary
1100: PPUSH
1101: LD_EXP 1
1105: NOT
1106: PPUSH
1107: LD_STRING 10_
1109: PPUSH
1110: CALL 55133 0 3
1114: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1115: LD_ADDR_EXP 27
1119: PUSH
1120: LD_STRING Cyrus
1122: PPUSH
1123: LD_EXP 1
1127: NOT
1128: PPUSH
1129: LD_STRING 10_
1131: PPUSH
1132: CALL 55133 0 3
1136: ST_TO_ADDR
// if Cyrus then
1137: LD_EXP 27
1141: IFFALSE 1159
// JMMSquad := JMMSquad ^ Cyrus ;
1143: LD_ADDR_EXP 45
1147: PUSH
1148: LD_EXP 45
1152: PUSH
1153: LD_EXP 27
1157: ADD
1158: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1159: LD_ADDR_EXP 26
1163: PUSH
1164: LD_STRING Bobby
1166: PPUSH
1167: LD_EXP 1
1171: NOT
1172: PPUSH
1173: LD_STRING 10_
1175: PPUSH
1176: CALL 55133 0 3
1180: ST_TO_ADDR
// if Bobby then
1181: LD_EXP 26
1185: IFFALSE 1203
// JMMSquad := JMMSquad ^ Bobby ;
1187: LD_ADDR_EXP 45
1191: PUSH
1192: LD_EXP 45
1196: PUSH
1197: LD_EXP 26
1201: ADD
1202: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1203: LD_ADDR_EXP 28
1207: PUSH
1208: LD_STRING Lisa
1210: PPUSH
1211: LD_EXP 1
1215: NOT
1216: PPUSH
1217: LD_STRING 10_
1219: PPUSH
1220: CALL 55133 0 3
1224: ST_TO_ADDR
// if Lisa then
1225: LD_EXP 28
1229: IFFALSE 1247
// JMMSquad := JMMSquad ^ Lisa ;
1231: LD_ADDR_EXP 45
1235: PUSH
1236: LD_EXP 45
1240: PUSH
1241: LD_EXP 28
1245: ADD
1246: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1247: LD_ADDR_EXP 24
1251: PUSH
1252: LD_STRING Brown
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 10_
1263: PPUSH
1264: CALL 55133 0 3
1268: ST_TO_ADDR
// if Brown then
1269: LD_EXP 24
1273: IFFALSE 1291
// JMMSquad := JMMSquad ^ Brown ;
1275: LD_ADDR_EXP 45
1279: PUSH
1280: LD_EXP 45
1284: PUSH
1285: LD_EXP 24
1289: ADD
1290: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1291: LD_ADDR_EXP 25
1295: PUSH
1296: LD_STRING Donaldson
1298: PPUSH
1299: LD_EXP 1
1303: NOT
1304: PPUSH
1305: LD_STRING 10_
1307: PPUSH
1308: CALL 55133 0 3
1312: ST_TO_ADDR
// if Donaldson then
1313: LD_EXP 25
1317: IFFALSE 1335
// JMMSquad := JMMSquad ^ Donaldson ;
1319: LD_ADDR_EXP 45
1323: PUSH
1324: LD_EXP 45
1328: PUSH
1329: LD_EXP 25
1333: ADD
1334: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_STRING Frank
1342: PPUSH
1343: LD_EXP 1
1347: NOT
1348: PPUSH
1349: LD_STRING 10_
1351: PPUSH
1352: CALL 55133 0 3
1356: ST_TO_ADDR
// if Frank then
1357: LD_EXP 29
1361: IFFALSE 1379
// JMMSquad := JMMSquad ^ Frank ;
1363: LD_ADDR_EXP 45
1367: PUSH
1368: LD_EXP 45
1372: PUSH
1373: LD_EXP 29
1377: ADD
1378: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1379: LD_ADDR_EXP 31
1383: PUSH
1384: LD_STRING Houten
1386: PPUSH
1387: LD_EXP 1
1391: NOT
1392: PPUSH
1393: LD_STRING 10_
1395: PPUSH
1396: CALL 55133 0 3
1400: ST_TO_ADDR
// if Houten then
1401: LD_EXP 31
1405: IFFALSE 1423
// JMMSquad := JMMSquad ^ Houten ;
1407: LD_ADDR_EXP 45
1411: PUSH
1412: LD_EXP 45
1416: PUSH
1417: LD_EXP 31
1421: ADD
1422: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1423: LD_ADDR_EXP 46
1427: PUSH
1428: LD_STRING OthersIn10
1430: PPUSH
1431: CALL_OW 31
1435: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1436: LD_EXP 45
1440: PPUSH
1441: CALL 57319 0 1
1445: PUSH
1446: LD_EXP 46
1450: PPUSH
1451: CALL 57319 0 1
1455: PLUS
1456: PUSH
1457: LD_INT 9
1459: LESS
1460: IFFALSE 1547
// begin InitHC_All ( ) ;
1462: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1466: LD_ADDR_VAR 0 2
1470: PUSH
1471: DOUBLE
1472: LD_INT 9
1474: INC
1475: ST_TO_ADDR
1476: LD_EXP 45
1480: PPUSH
1481: CALL 57319 0 1
1485: PUSH
1486: LD_EXP 46
1490: PPUSH
1491: CALL 57319 0 1
1495: PLUS
1496: PUSH
1497: FOR_DOWNTO
1498: IFFALSE 1545
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1500: LD_INT 0
1502: PPUSH
1503: LD_VAR 0 2
1507: PUSH
1508: LD_INT 4
1510: MOD
1511: PUSH
1512: LD_INT 1
1514: PLUS
1515: PPUSH
1516: LD_INT 5
1518: PPUSH
1519: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1523: LD_ADDR_EXP 46
1527: PUSH
1528: LD_EXP 46
1532: PPUSH
1533: CALL_OW 44
1537: PPUSH
1538: CALL 92928 0 2
1542: ST_TO_ADDR
// end ;
1543: GO 1497
1545: POP
1546: POP
// end ; if debug then
1547: LD_EXP 1
1551: IFFALSE 1592
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1553: LD_ADDR_VAR 0 1
1557: PUSH
1558: LD_EXP 27
1562: PUSH
1563: LD_EXP 26
1567: PUSH
1568: LD_EXP 28
1572: PUSH
1573: LD_EXP 25
1577: PUSH
1578: LD_EXP 24
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: ST_TO_ADDR
1590: GO 1755
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1592: LD_ADDR_VAR 0 1
1596: PUSH
1597: LD_STRING 1
1599: PPUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 4
1608: PUSH
1609: LD_INT 4
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_OWVAR 67
1622: ARRAY
1623: PPUSH
1624: LD_INT 6
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 4
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_OWVAR 67
1646: ARRAY
1647: PPUSH
1648: LD_INT -4
1650: PUSH
1651: LD_INT -1
1653: PUSH
1654: LD_INT -5
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: PUSH
1662: LD_EXP 23
1666: ADD
1667: PUSH
1668: LD_EXP 32
1672: ADD
1673: PUSH
1674: LD_INT -2
1676: PUSH
1677: LD_INT -3
1679: PUSH
1680: LD_INT -5
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: ADD
1688: PUSH
1689: LD_EXP 45
1693: ADD
1694: PUSH
1695: LD_EXP 46
1699: ADD
1700: PUSH
1701: LD_INT -4
1703: PUSH
1704: LD_INT -2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: ADD
1711: PUSH
1712: LD_EXP 44
1716: ADD
1717: PPUSH
1718: LD_INT 1
1720: PUSH
1721: LD_INT 3
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 2
1733: PUSH
1734: LD_INT 1
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 4
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: PPUSH
1750: CALL_OW 42
1754: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1755: LD_ADDR_VAR 0 1
1759: PUSH
1760: LD_VAR 0 1
1764: PPUSH
1765: LD_EXP 23
1769: PPUSH
1770: CALL 92965 0 2
1774: ST_TO_ADDR
// if Gary then
1775: LD_EXP 32
1779: IFFALSE 1801
// result := JoinUnion ( result , Gary ) ;
1781: LD_ADDR_VAR 0 1
1785: PUSH
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_EXP 32
1795: PPUSH
1796: CALL 92965 0 2
1800: ST_TO_ADDR
// if Count ( others ) then
1801: LD_EXP 46
1805: PPUSH
1806: CALL 57319 0 1
1810: IFFALSE 1828
// others := others diff result ;
1812: LD_ADDR_EXP 46
1816: PUSH
1817: LD_EXP 46
1821: PUSH
1822: LD_VAR 0 1
1826: DIFF
1827: ST_TO_ADDR
// vehs := [ ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: EMPTY
1834: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1835: LD_INT 2
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: LD_INT 12
1846: PPUSH
1847: LD_INT 50
1849: PPUSH
1850: CALL 60057 0 5
// veh := CreateVehicle ;
1854: LD_ADDR_VAR 0 4
1858: PUSH
1859: CALL_OW 45
1863: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1864: LD_ADDR_VAR 0 5
1868: PUSH
1869: LD_VAR 0 5
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL 92928 0 2
1883: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1896: LD_ADDR_VAR 0 6
1900: PUSH
1901: LD_STRING 09_sibRes
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 30
1911: PUSH
1912: LD_INT 20
1914: MINUS
1915: ST_TO_ADDR
// if sibRes >= 100 then
1916: LD_VAR 0 6
1920: PUSH
1921: LD_INT 100
1923: GREATEREQUAL
1924: IFFALSE 1943
// SetCargo ( veh , mat_siberit , 100 ) else
1926: LD_VAR 0 4
1930: PPUSH
1931: LD_INT 3
1933: PPUSH
1934: LD_INT 100
1936: PPUSH
1937: CALL_OW 290
1941: GO 1960
// SetCargo ( veh , mat_siberit , sibRes ) ;
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_INT 3
1950: PPUSH
1951: LD_VAR 0 6
1955: PPUSH
1956: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1960: LD_INT 2
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 12
1971: PPUSH
1972: LD_INT 50
1974: PPUSH
1975: CALL 60057 0 5
// veh := CreateVehicle ;
1979: LD_ADDR_VAR 0 4
1983: PUSH
1984: CALL_OW 45
1988: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1989: LD_ADDR_VAR 0 5
1993: PUSH
1994: LD_VAR 0 5
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 92928 0 2
2008: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2009: LD_VAR 0 4
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2021: LD_VAR 0 4
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: LD_INT 100
2031: PPUSH
2032: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_INT 1
2044: DEC
2045: ST_TO_ADDR
2046: LD_VAR 0 1
2050: PPUSH
2051: CALL 57319 0 1
2055: PUSH
2056: LD_INT 2
2058: MINUS
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2167
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2063: LD_INT 2
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 3
2074: PUSH
2075: LD_INT 4
2077: PUSH
2078: LD_INT 5
2080: PUSH
2081: LD_INT 11
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 5
2101: MOD
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: ARRAY
2107: PPUSH
2108: LD_INT 45
2110: PPUSH
2111: LD_INT 55
2113: PPUSH
2114: CALL_OW 12
2118: PPUSH
2119: CALL 60057 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 4
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: LD_VAR 0 5
2142: PPUSH
2143: LD_VAR 0 4
2147: PPUSH
2148: CALL 92928 0 2
2152: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: CALL_OW 233
// end ;
2165: GO 2060
2167: POP
2168: POP
// for i in vehs do
2169: LD_ADDR_VAR 0 2
2173: PUSH
2174: LD_VAR 0 5
2178: PUSH
2179: FOR_IN
2180: IFFALSE 2235
// begin PlaceUnitArea ( i , startArea , false ) ;
2182: LD_VAR 0 2
2186: PPUSH
2187: LD_INT 3
2189: PPUSH
2190: LD_INT 0
2192: PPUSH
2193: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2197: LD_VAR 0 1
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: PPUSH
2206: LD_VAR 0 2
2210: PPUSH
2211: CALL_OW 52
// result := Delete ( result , 1 ) ;
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL_OW 3
2232: ST_TO_ADDR
// end ;
2233: GO 2179
2235: POP
2236: POP
// uc_side := 4 ;
2237: LD_ADDR_OWVAR 20
2241: PUSH
2242: LD_INT 4
2244: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2245: LD_STRING 08_SikorskiStatus
2247: PPUSH
2248: LD_EXP 1
2252: PPUSH
2253: CALL_OW 30
2257: IFFALSE 2278
// Truman := PrepareUnit ( Truman , false ,  ) ;
2259: LD_ADDR_EXP 43
2263: PUSH
2264: LD_STRING Truman
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: LD_STRING 
2272: PPUSH
2273: CALL 55133 0 3
2277: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2278: LD_ADDR_EXP 33
2282: PUSH
2283: LD_STRING Simms
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: LD_STRING 
2291: PPUSH
2292: CALL 55133 0 3
2296: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2297: LD_ADDR_EXP 34
2301: PUSH
2302: LD_STRING Denis
2304: PPUSH
2305: LD_EXP 1
2309: NOT
2310: PPUSH
2311: LD_STRING 08_
2313: PPUSH
2314: CALL 55133 0 3
2318: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2319: LD_ADDR_EXP 35
2323: PUSH
2324: LD_STRING Joan
2326: PPUSH
2327: LD_EXP 1
2331: NOT
2332: PPUSH
2333: LD_STRING 08_
2335: PPUSH
2336: CALL 55133 0 3
2340: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2341: LD_ADDR_EXP 41
2345: PUSH
2346: LD_STRING Mike
2348: PPUSH
2349: LD_EXP 1
2353: NOT
2354: PPUSH
2355: LD_STRING 08_
2357: PPUSH
2358: CALL 55133 0 3
2362: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2363: LD_STRING 08_Khatam
2365: PPUSH
2366: CALL_OW 28
2370: IFFALSE 2393
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2372: LD_ADDR_EXP 36
2376: PUSH
2377: LD_STRING Khatam
2379: PPUSH
2380: LD_INT 1
2382: PPUSH
2383: LD_STRING 08_
2385: PPUSH
2386: CALL 55133 0 3
2390: ST_TO_ADDR
2391: GO 2421
// if TestCharacters ( 03_Khatam ) then
2393: LD_STRING 03_Khatam
2395: PPUSH
2396: CALL_OW 28
2400: IFFALSE 2421
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2402: LD_ADDR_EXP 36
2406: PUSH
2407: LD_STRING Khatam
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: LD_STRING 03_
2415: PPUSH
2416: CALL 55133 0 3
2420: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2421: LD_ADDR_EXP 37
2425: PUSH
2426: LD_STRING Gladstone
2428: PPUSH
2429: LD_EXP 1
2433: NOT
2434: PPUSH
2435: LD_STRING 08_
2437: PPUSH
2438: CALL 55133 0 3
2442: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2443: LD_ADDR_EXP 39
2447: PUSH
2448: LD_STRING DeltaDoctor
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_STRING 
2459: PPUSH
2460: CALL 55133 0 3
2464: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 08_ ) ;
2465: LD_ADDR_EXP 29
2469: PUSH
2470: LD_STRING Frank
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_STRING 08_
2481: PPUSH
2482: CALL 55133 0 3
2486: ST_TO_ADDR
// if Frank then
2487: LD_EXP 29
2491: IFFALSE 2514
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2493: LD_ADDR_EXP 30
2497: PUSH
2498: LD_STRING Yamoko
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 55133 0 3
2511: ST_TO_ADDR
2512: GO 2536
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2514: LD_ADDR_EXP 30
2518: PUSH
2519: LD_STRING Kikuchi
2521: PPUSH
2522: LD_EXP 1
2526: NOT
2527: PPUSH
2528: LD_STRING 08_
2530: PPUSH
2531: CALL 55133 0 3
2535: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2536: LD_ADDR_EXP 47
2540: PUSH
2541: LD_STRING 09_others
2543: PPUSH
2544: CALL_OW 31
2548: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2549: LD_ADDR_EXP 48
2553: PUSH
2554: LD_STRING 09_apes
2556: PPUSH
2557: CALL_OW 31
2561: ST_TO_ADDR
// if Truman then
2562: LD_EXP 43
2566: IFFALSE 2583
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2568: LD_EXP 43
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// if Mike then
2583: LD_EXP 41
2587: IFFALSE 2604
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2589: LD_EXP 41
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// if Simms then
2604: LD_EXP 33
2608: IFFALSE 2625
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2610: LD_EXP 33
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
// if Denis then
2625: LD_EXP 34
2629: IFFALSE 2646
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2631: LD_EXP 34
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// if Joan then
2646: LD_EXP 35
2650: IFFALSE 2667
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2652: LD_EXP 35
2656: PPUSH
2657: LD_INT 4
2659: PPUSH
2660: LD_INT 0
2662: PPUSH
2663: CALL_OW 49
// if Khatam then
2667: LD_EXP 36
2671: IFFALSE 2688
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2673: LD_EXP 36
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// if Gladstone then
2688: LD_EXP 37
2692: IFFALSE 2709
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2694: LD_EXP 37
2698: PPUSH
2699: LD_INT 4
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// if DeltaDoctor then
2709: LD_EXP 39
2713: IFFALSE 2730
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2715: LD_EXP 39
2719: PPUSH
2720: LD_INT 4
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// if Kikuchi then
2730: LD_EXP 30
2734: IFFALSE 2751
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2736: LD_EXP 30
2740: PPUSH
2741: LD_INT 4
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2751: LD_EXP 33
2755: PUSH
2756: LD_EXP 36
2760: PUSH
2761: LD_EXP 34
2765: PUSH
2766: LD_EXP 37
2770: PUSH
2771: LD_EXP 39
2775: PUSH
2776: LD_EXP 35
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: CALL_OW 336
// amount := Count ( others09 ) ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_EXP 47
2805: PPUSH
2806: CALL 57319 0 1
2810: ST_TO_ADDR
// if amount then
2811: LD_VAR 0 8
2815: IFFALSE 2963
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2817: LD_VAR 0 8
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: LD_INT 4
2830: PUSH
2831: LD_INT 4
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_OWVAR 67
2844: ARRAY
2845: GREATER
2846: IFFALSE 2877
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2848: LD_ADDR_VAR 0 8
2852: PUSH
2853: LD_INT 6
2855: PUSH
2856: LD_INT 5
2858: PUSH
2859: LD_INT 4
2861: PUSH
2862: LD_INT 4
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: PUSH
2871: LD_OWVAR 67
2875: ARRAY
2876: ST_TO_ADDR
// for i := 1 to amount do
2877: LD_ADDR_VAR 0 2
2881: PUSH
2882: DOUBLE
2883: LD_INT 1
2885: DEC
2886: ST_TO_ADDR
2887: LD_VAR 0 8
2891: PUSH
2892: FOR_TO
2893: IFFALSE 2934
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2895: LD_EXP 47
2899: PUSH
2900: LD_INT 1
2902: ARRAY
2903: PPUSH
2904: LD_INT 4
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2914: LD_ADDR_EXP 47
2918: PUSH
2919: LD_EXP 47
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: CALL_OW 3
2931: ST_TO_ADDR
// end ;
2932: GO 2892
2934: POP
2935: POP
// if Count ( others09 ) then
2936: LD_EXP 47
2940: PPUSH
2941: CALL 57319 0 1
2945: IFFALSE 2963
// others := others union others09 ;
2947: LD_ADDR_EXP 46
2951: PUSH
2952: LD_EXP 46
2956: PUSH
2957: LD_EXP 47
2961: UNION
2962: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2963: LD_INT 22
2965: PUSH
2966: LD_INT 4
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 50
2975: PUSH
2976: EMPTY
2977: LIST
2978: PUSH
2979: LD_INT 25
2981: PUSH
2982: LD_INT 2
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: PPUSH
2994: CALL_OW 69
2998: PUSH
2999: LD_INT 0
3001: EQUAL
3002: IFFALSE 3141
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3004: LD_ADDR_VAR 0 7
3008: PUSH
3009: LD_INT 22
3011: PUSH
3012: LD_INT 4
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 50
3021: PUSH
3022: EMPTY
3023: LIST
3024: PUSH
3025: LD_INT 25
3027: PUSH
3028: LD_INT 2
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PPUSH
3040: CALL_OW 69
3044: PUSH
3045: LD_EXP 33
3049: PUSH
3050: LD_EXP 36
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_EXP 37
3064: PUSH
3065: LD_EXP 39
3069: PUSH
3070: LD_EXP 35
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: DIFF
3083: ST_TO_ADDR
// if not tmp then
3084: LD_VAR 0 7
3088: NOT
3089: IFFALSE 3125
// begin if Denis then
3091: LD_EXP 34
3095: IFFALSE 3111
// SetClass ( Denis , class_engineer ) else
3097: LD_EXP 34
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 336
3109: GO 3123
// SetClass ( DeltaDoctor , class_engineer ) ;
3111: LD_EXP 39
3115: PPUSH
3116: LD_INT 2
3118: PPUSH
3119: CALL_OW 336
// end else
3123: GO 3141
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3125: LD_VAR 0 7
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_INT 2
3136: PPUSH
3137: CALL_OW 336
// end ; for i in ape09 do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: LD_EXP 48
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3171
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3154: LD_VAR 0 2
3158: PPUSH
3159: LD_INT 4
3161: PPUSH
3162: LD_INT 0
3164: PPUSH
3165: CALL_OW 49
3169: GO 3151
3171: POP
3172: POP
// PrepareSoldier ( sex_female , 6 ) ;
3173: LD_INT 2
3175: PPUSH
3176: LD_INT 6
3178: PPUSH
3179: CALL_OW 381
// AmScout := CreateHuman ;
3183: LD_ADDR_EXP 40
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// end ;
3193: LD_VAR 0 1
3197: RET
// export function PrepareCornell ; begin
3198: LD_INT 0
3200: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3201: LD_INT 4
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: CALL_OW 343
// uc_side := 4 ;
3211: LD_ADDR_OWVAR 20
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// uc_nation := nation_american ;
3219: LD_ADDR_OWVAR 21
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3227: LD_ADDR_EXP 42
3231: PUSH
3232: LD_STRING Cornel
3234: PPUSH
3235: LD_EXP 1
3239: NOT
3240: PPUSH
3241: LD_STRING 03_
3243: PPUSH
3244: CALL 55133 0 3
3248: ST_TO_ADDR
// if not Cornell then
3249: LD_EXP 42
3253: NOT
3254: IFFALSE 3258
// exit ;
3256: GO 3396
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3258: LD_EXP 42
3262: PPUSH
3263: LD_INT 12
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3273: LD_EXP 42
3277: PPUSH
3278: LD_INT 350
3280: PPUSH
3281: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3285: LD_EXP 42
3289: PPUSH
3290: LD_INT 125
3292: PPUSH
3293: LD_INT 17
3295: PPUSH
3296: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3300: LD_EXP 42
3304: PPUSH
3305: LD_INT 112
3307: PPUSH
3308: LD_INT 19
3310: PPUSH
3311: CALL_OW 171
// if IsInUnit ( JMM ) then
3315: LD_EXP 23
3319: PPUSH
3320: CALL_OW 310
3324: IFFALSE 3367
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3326: LD_EXP 42
3330: PPUSH
3331: LD_EXP 23
3335: PPUSH
3336: CALL_OW 310
3340: PPUSH
3341: CALL_OW 250
3345: PPUSH
3346: LD_EXP 23
3350: PPUSH
3351: CALL_OW 310
3355: PPUSH
3356: CALL_OW 251
3360: PPUSH
3361: CALL_OW 171
3365: GO 3396
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3367: LD_EXP 42
3371: PPUSH
3372: LD_EXP 23
3376: PPUSH
3377: CALL_OW 250
3381: PPUSH
3382: LD_EXP 23
3386: PPUSH
3387: CALL_OW 251
3391: PPUSH
3392: CALL_OW 171
// end ; end_of_file
3396: LD_VAR 0 1
3400: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3401: LD_INT 0
3403: PPUSH
3404: PPUSH
3405: PPUSH
3406: PPUSH
3407: PPUSH
3408: PPUSH
// uc_side := 2 ;
3409: LD_ADDR_OWVAR 20
3413: PUSH
3414: LD_INT 2
3416: ST_TO_ADDR
// uc_nation := nation_arabian ;
3417: LD_ADDR_OWVAR 21
3421: PUSH
3422: LD_INT 2
3424: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3425: LD_ADDR_VAR 0 6
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: LD_INT 5
3435: PUSH
3436: LD_INT 6
3438: PUSH
3439: LD_INT 7
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: PUSH
3448: LD_OWVAR 67
3452: ARRAY
3453: ST_TO_ADDR
// arForces := [ ] ;
3454: LD_ADDR_EXP 49
3458: PUSH
3459: EMPTY
3460: ST_TO_ADDR
// arTech := [ ] ;
3461: LD_ADDR_EXP 52
3465: PUSH
3466: EMPTY
3467: ST_TO_ADDR
// arBuildings := [ ] ;
3468: LD_ADDR_EXP 53
3472: PUSH
3473: EMPTY
3474: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3475: LD_ADDR_EXP 55
3479: PUSH
3480: LD_INT 94
3482: PUSH
3483: LD_INT 19
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 92
3492: PUSH
3493: LD_INT 34
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 109
3502: PUSH
3503: LD_INT 67
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 120
3512: PUSH
3513: LD_INT 38
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 116
3522: PUSH
3523: LD_INT 30
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 102
3532: PUSH
3533: LD_INT 20
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3548: LD_ADDR_EXP 54
3552: PUSH
3553: LD_INT 73
3555: PUSH
3556: LD_INT 36
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 76
3565: PUSH
3566: LD_INT 38
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 79
3575: PUSH
3576: LD_INT 39
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: ST_TO_ADDR
// arEscapist := [ ] ;
3588: LD_ADDR_EXP 56
3592: PUSH
3593: EMPTY
3594: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3595: LD_INT 35
3597: PPUSH
3598: CALL_OW 274
3602: PPUSH
3603: LD_INT 1
3605: PPUSH
3606: LD_INT 150
3608: PPUSH
3609: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3613: LD_INT 35
3615: PPUSH
3616: CALL_OW 274
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_INT 60
3626: PPUSH
3627: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3631: LD_INT 35
3633: PPUSH
3634: CALL_OW 274
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 10
3644: PPUSH
3645: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3649: LD_INT 36
3651: PPUSH
3652: LD_INT 22
3654: PPUSH
3655: LD_INT 2
3657: PPUSH
3658: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PPUSH
3691: CALL_OW 69
3695: PUSH
3696: FOR_IN
3697: IFFALSE 3713
// SetBLevel ( i , 6 ) ;
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_INT 6
3706: PPUSH
3707: CALL_OW 241
3711: GO 3696
3713: POP
3714: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3715: LD_ADDR_EXP 50
3719: PUSH
3720: LD_STRING Dietrich
3722: PPUSH
3723: CALL_OW 25
3727: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3728: LD_EXP 50
3732: PPUSH
3733: LD_INT 35
3735: PPUSH
3736: CALL_OW 52
// InitHC_All ( ) ;
3740: CALL_OW 584
// for i := 1 to 3 do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_INT 3
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3864
// begin PrepareEngineer ( sex_male , skill ) ;
3760: LD_INT 1
3762: PPUSH
3763: LD_VAR 0 6
3767: PPUSH
3768: CALL_OW 382
// if i = 1 then
3772: LD_VAR 0 2
3776: PUSH
3777: LD_INT 1
3779: EQUAL
3780: IFFALSE 3792
// hc_name := Ahmed Abbasid else
3782: LD_ADDR_OWVAR 26
3786: PUSH
3787: LD_STRING Ahmed Abbasid
3789: ST_TO_ADDR
3790: GO 3800
// hc_name :=  ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// un := CreateHuman ;
3800: LD_ADDR_VAR 0 4
3804: PUSH
3805: CALL_OW 44
3809: ST_TO_ADDR
// if i = 1 then
3810: LD_VAR 0 2
3814: PUSH
3815: LD_INT 1
3817: EQUAL
3818: IFFALSE 3830
// Ahmed := un ;
3820: LD_ADDR_EXP 51
3824: PUSH
3825: LD_VAR 0 4
3829: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3830: LD_ADDR_EXP 49
3834: PUSH
3835: LD_EXP 49
3839: PPUSH
3840: LD_VAR 0 4
3844: PPUSH
3845: CALL 92928 0 2
3849: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_INT 35
3857: PPUSH
3858: CALL_OW 52
// end ;
3862: GO 3757
3864: POP
3865: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 2
3878: PUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_OWVAR 67
3898: ARRAY
3899: PUSH
3900: FOR_TO
3901: IFFALSE 3976
// begin PrepareScientist ( false , skill ) ;
3903: LD_INT 0
3905: PPUSH
3906: LD_VAR 0 6
3910: PPUSH
3911: CALL_OW 384
// un := CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_VAR 0 6
3937: PPUSH
3938: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3942: LD_ADDR_EXP 49
3946: PUSH
3947: LD_EXP 49
3951: PPUSH
3952: LD_VAR 0 4
3956: PPUSH
3957: CALL 92928 0 2
3961: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 36
3969: PPUSH
3970: CALL_OW 52
// end ;
3974: GO 3900
3976: POP
3977: POP
// for j in [ arBar1 , arBar2 ] do
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: LD_INT 37
3985: PUSH
3986: LD_INT 38
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4074
// for i := 1 to 4 do
3996: LD_ADDR_VAR 0 2
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_INT 4
4008: PUSH
4009: FOR_TO
4010: IFFALSE 4070
// begin PrepareSoldier ( false , skill ) ;
4012: LD_INT 0
4014: PPUSH
4015: LD_VAR 0 6
4019: PPUSH
4020: CALL_OW 381
// un := CreateHuman ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: CALL_OW 44
4033: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4034: LD_ADDR_EXP 49
4038: PUSH
4039: LD_EXP 49
4043: PPUSH
4044: LD_VAR 0 4
4048: PPUSH
4049: CALL 92928 0 2
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4054: LD_VAR 0 4
4058: PPUSH
4059: LD_VAR 0 3
4063: PPUSH
4064: CALL_OW 52
// end ;
4068: GO 4009
4070: POP
4071: POP
4072: GO 3993
4074: POP
4075: POP
// for i := 1 to 3 do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 3
4088: PUSH
4089: FOR_TO
4090: IFFALSE 4169
// begin un := arForces [ arForces - i ] ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_EXP 49
4106: PUSH
4107: LD_VAR 0 2
4111: MINUS
4112: ARRAY
4113: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4114: LD_VAR 0 4
4118: PPUSH
4119: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_INT 22
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 30
4140: PUSH
4141: LD_INT 31
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 69
4156: PUSH
4157: LD_VAR 0 2
4161: ARRAY
4162: PPUSH
4163: CALL_OW 180
// end ;
4167: GO 4089
4169: POP
4170: POP
// for i := 1 to 3 do
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_INT 3
4183: PUSH
4184: FOR_TO
4185: IFFALSE 4270
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4187: LD_ADDR_VAR 0 5
4191: PUSH
4192: LD_EXP 49
4196: PPUSH
4197: LD_INT 25
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 120
4212: PUSH
4213: LD_INT 6
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 72
4232: ST_TO_ADDR
// if not tmp then
4233: LD_VAR 0 5
4237: NOT
4238: IFFALSE 4242
// continue ;
4240: GO 4184
// un := tmp [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_VAR 0 5
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4256: LD_VAR 0 4
4260: PPUSH
4261: LD_INT 6
4263: PPUSH
4264: CALL_OW 109
// end ;
4268: GO 4184
4270: POP
4271: POP
// for i in UnitsInside ( arBar2 ) do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: LD_INT 38
4279: PPUSH
4280: CALL_OW 313
4284: PUSH
4285: FOR_IN
4286: IFFALSE 4302
// SetClass ( i , class_mortar ) ;
4288: LD_VAR 0 2
4292: PPUSH
4293: LD_INT 8
4295: PPUSH
4296: CALL_OW 336
4300: GO 4285
4302: POP
4303: POP
// end ;
4304: LD_VAR 0 1
4308: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4309: LD_EXP 7
4313: IFFALSE 4726
4315: GO 4317
4317: DISABLE
4318: LD_INT 0
4320: PPUSH
4321: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4322: LD_INT 36
4324: PPUSH
4325: LD_INT 11
4327: PPUSH
4328: CALL_OW 147
// wait ( 0 0$10 ) ;
4332: LD_INT 350
4334: PPUSH
4335: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4339: LD_ADDR_EXP 53
4343: PUSH
4344: LD_INT 27
4346: PUSH
4347: LD_INT 69
4349: PUSH
4350: LD_INT 4
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 27
4364: PUSH
4365: LD_INT 67
4367: PUSH
4368: LD_INT 6
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4384: LD_INT 35
4386: PPUSH
4387: CALL_OW 67
// until not arBuildings ;
4391: LD_EXP 53
4395: NOT
4396: IFFALSE 4384
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4398: LD_ADDR_VAR 0 2
4402: PUSH
4403: LD_EXP 49
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: ST_TO_ADDR
// if eng then
4423: LD_VAR 0 2
4427: IFFALSE 4564
// begin eng := eng [ 1 ] ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_VAR 0 2
4438: PUSH
4439: LD_INT 1
4441: ARRAY
4442: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4443: LD_VAR 0 2
4447: PPUSH
4448: LD_INT 4
4450: PPUSH
4451: CALL_OW 109
// for i in arCameras do
4455: LD_ADDR_VAR 0 1
4459: PUSH
4460: LD_EXP 55
4464: PUSH
4465: FOR_IN
4466: IFFALSE 4497
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4468: LD_VAR 0 2
4472: PPUSH
4473: LD_VAR 0 1
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_VAR 0 1
4486: PUSH
4487: LD_INT 2
4489: ARRAY
4490: PPUSH
4491: CALL_OW 217
4495: GO 4465
4497: POP
4498: POP
// repeat wait ( 0 0$1 ) ;
4499: LD_INT 35
4501: PPUSH
4502: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 314
4515: NOT
4516: PUSH
4517: LD_VAR 0 2
4521: PPUSH
4522: CALL_OW 301
4526: OR
4527: IFFALSE 4499
// if IsOk ( eng ) then
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 302
4538: IFFALSE 4564
// begin SetTag ( eng , 0 ) ;
4540: LD_VAR 0 2
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_INT 35
4559: PPUSH
4560: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4564: LD_INT 35
4566: PPUSH
4567: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4571: LD_OWVAR 1
4575: PUSH
4576: LD_INT 4200
4578: MOD
4579: PUSH
4580: LD_INT 0
4582: EQUAL
4583: PUSH
4584: LD_INT 9
4586: PPUSH
4587: CALL_OW 435
4591: PUSH
4592: LD_INT 3
4594: LESS
4595: AND
4596: IFFALSE 4619
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4598: LD_INT 1
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: CALL_OW 12
4608: PPUSH
4609: LD_INT 9
4611: PPUSH
4612: LD_INT 1
4614: PPUSH
4615: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4619: LD_INT 22
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 57
4634: PUSH
4635: EMPTY
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 63
4644: PUSH
4645: LD_INT 11
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: IFFALSE 4564
// wait ( 0 0$10 ) ;
4663: LD_INT 350
4665: PPUSH
4666: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4670: LD_ADDR_EXP 52
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 22
4680: PUSH
4681: LD_INT 54
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4689: LD_INT 35
4691: PPUSH
4692: CALL_OW 67
// until not arTech ;
4696: LD_EXP 52
4700: NOT
4701: IFFALSE 4689
// wait ( 0 0$30 ) ;
4703: LD_INT 1050
4705: PPUSH
4706: CALL_OW 67
// arabianAttack := true ;
4710: LD_ADDR_EXP 4
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// arBaseActive := false ;
4718: LD_ADDR_EXP 3
4722: PUSH
4723: LD_INT 0
4725: ST_TO_ADDR
// end ;
4726: PPOPN 2
4728: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4729: LD_EXP 3
4733: PUSH
4734: LD_EXP 54
4738: AND
4739: PUSH
4740: LD_INT 8
4742: PPUSH
4743: LD_INT 81
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 70
4757: AND
4758: IFFALSE 4869
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
4766: PPUSH
// begin enable ;
4767: ENABLE
// for i in arMines do
4768: LD_ADDR_VAR 0 1
4772: PUSH
4773: LD_EXP 54
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4867
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: LD_VAR 0 1
4790: PUSH
4791: LD_INT 1
4793: ARRAY
4794: PPUSH
4795: LD_VAR 0 1
4799: PUSH
4800: LD_INT 2
4802: ARRAY
4803: PPUSH
4804: CALL_OW 428
4808: ST_TO_ADDR
// if not e then
4809: LD_VAR 0 2
4813: NOT
4814: IFFALSE 4818
// continue ;
4816: GO 4778
// if GetSide ( e ) in [ 3 , 6 ] then
4818: LD_VAR 0 2
4822: PPUSH
4823: CALL_OW 255
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: LD_INT 6
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: IN
4838: IFFALSE 4865
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 1
4847: ARRAY
4848: PPUSH
4849: LD_VAR 0 1
4853: PUSH
4854: LD_INT 2
4856: ARRAY
4857: PPUSH
4858: LD_INT 2
4860: PPUSH
4861: CALL_OW 456
// end ;
4865: GO 4778
4867: POP
4868: POP
// end ;
4869: PPOPN 2
4871: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4872: LD_EXP 3
4876: IFFALSE 7064
4878: GO 4880
4880: DISABLE
4881: LD_INT 0
4883: PPUSH
4884: PPUSH
4885: PPUSH
4886: PPUSH
4887: PPUSH
4888: PPUSH
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
// begin enable ;
4899: ENABLE
// side := 2 ;
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: LD_INT 2
4907: ST_TO_ADDR
// if arTech then
4908: LD_EXP 52
4912: IFFALSE 5068
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_INT 22
4921: PUSH
4922: LD_VAR 0 4
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 50
4933: PUSH
4934: EMPTY
4935: LIST
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: LD_INT 30
4942: PUSH
4943: LD_INT 6
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 30
4952: PUSH
4953: LD_INT 7
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 30
4962: PUSH
4963: LD_INT 8
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: ST_TO_ADDR
// if lab then
4986: LD_VAR 0 6
4990: IFFALSE 5068
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
4992: LD_VAR 0 6
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: CALL_OW 461
5005: PUSH
5006: LD_INT 2
5008: EQUAL
5009: IFFALSE 5068
// begin for i in arTech do
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_EXP 52
5020: PUSH
5021: FOR_IN
5022: IFFALSE 5066
// if CanBeResearched ( lab [ 1 ] , i ) then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 1
5037: PPUSH
5038: CALL_OW 430
5042: IFFALSE 5064
// begin ComResearch ( lab [ 1 ] , i ) ;
5044: LD_VAR 0 6
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: LD_VAR 0 1
5057: PPUSH
5058: CALL_OW 124
// break ;
5062: GO 5066
// end ;
5064: GO 5021
5066: POP
5067: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5068: LD_ADDR_VAR 0 5
5072: PUSH
5073: LD_INT 5
5075: PPUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 24
5091: PUSH
5092: LD_INT 1000
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: CALL_OW 70
5111: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5112: LD_ADDR_VAR 0 9
5116: PUSH
5117: LD_INT 9
5119: PPUSH
5120: CALL_OW 435
5124: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5125: LD_ADDR_VAR 0 11
5129: PUSH
5130: LD_EXP 49
5134: PPUSH
5135: LD_INT 25
5137: PUSH
5138: LD_INT 4
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: LD_INT 50
5147: PUSH
5148: EMPTY
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 72
5159: ST_TO_ADDR
// if sci then
5160: LD_VAR 0 11
5164: IFFALSE 5528
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5166: LD_ADDR_VAR 0 13
5170: PUSH
5171: LD_EXP 49
5175: PPUSH
5176: LD_INT 95
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 54
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 120
5201: PUSH
5202: LD_INT 1
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 22
5226: PUSH
5227: LD_VAR 0 4
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 50
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: LD_INT 2
5244: PUSH
5245: LD_INT 30
5247: PUSH
5248: LD_INT 6
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 30
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 30
5267: PUSH
5268: LD_INT 8
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: PPUSH
5286: CALL_OW 69
5290: ST_TO_ADDR
// tag := GetTag ( i ) ;
5291: LD_ADDR_VAR 0 8
5295: PUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: CALL_OW 110
5305: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5306: LD_VAR 0 1
5310: PPUSH
5311: CALL_OW 256
5315: PUSH
5316: LD_INT 800
5318: LESS
5319: PUSH
5320: LD_VAR 0 8
5324: PUSH
5325: LD_INT 1
5327: NONEQUAL
5328: AND
5329: IFFALSE 5358
// begin ComMoveXY ( i , 72 , 15 ) ;
5331: LD_VAR 0 1
5335: PPUSH
5336: LD_INT 72
5338: PPUSH
5339: LD_INT 15
5341: PPUSH
5342: CALL_OW 111
// SetTag ( i , tHeal ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5358: LD_VAR 0 1
5362: PPUSH
5363: CALL_OW 256
5367: PUSH
5368: LD_INT 1000
5370: EQUAL
5371: PUSH
5372: LD_VAR 0 8
5376: PUSH
5377: LD_INT 1
5379: EQUAL
5380: AND
5381: IFFALSE 5395
// begin SetTag ( i , 0 ) ;
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_INT 0
5390: PPUSH
5391: CALL_OW 109
// end ; if hurtUnits then
5395: LD_VAR 0 13
5399: IFFALSE 5460
// begin for i in sci do
5401: LD_ADDR_VAR 0 1
5405: PUSH
5406: LD_VAR 0 11
5410: PUSH
5411: FOR_IN
5412: IFFALSE 5456
// if IsInUnit ( i ) then
5414: LD_VAR 0 1
5418: PPUSH
5419: CALL_OW 310
5423: IFFALSE 5436
// ComExitBuilding ( i ) else
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 122
5434: GO 5454
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5436: LD_VAR 0 1
5440: PPUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 128
5454: GO 5411
5456: POP
5457: POP
// end else
5458: GO 5528
// if lab then
5460: LD_VAR 0 6
5464: IFFALSE 5528
// begin for i in sci do
5466: LD_ADDR_VAR 0 1
5470: PUSH
5471: LD_VAR 0 11
5475: PUSH
5476: FOR_IN
5477: IFFALSE 5526
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 310
5488: NOT
5489: PUSH
5490: LD_VAR 0 1
5494: PPUSH
5495: CALL_OW 110
5499: PUSH
5500: LD_INT 1
5502: NONEQUAL
5503: AND
5504: IFFALSE 5524
// ComEnterUnit ( i , lab [ 1 ] ) ;
5506: LD_VAR 0 1
5510: PPUSH
5511: LD_VAR 0 6
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PPUSH
5520: CALL_OW 120
5524: GO 5476
5526: POP
5527: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5528: LD_ADDR_VAR 0 7
5532: PUSH
5533: LD_EXP 49
5537: PPUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 2
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 72
5552: ST_TO_ADDR
// if eng then
5553: LD_VAR 0 7
5557: IFFALSE 6226
// begin for i in eng do
5559: LD_ADDR_VAR 0 1
5563: PUSH
5564: LD_VAR 0 7
5568: PUSH
5569: FOR_IN
5570: IFFALSE 6224
// begin tag := GetTag ( i ) ;
5572: LD_ADDR_VAR 0 8
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 110
5586: ST_TO_ADDR
// if tag = tCamera then
5587: LD_VAR 0 8
5591: PUSH
5592: LD_INT 4
5594: EQUAL
5595: IFFALSE 5599
// continue ;
5597: GO 5569
// if GetLives ( i ) < 600 and tag <> tHeal then
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 256
5608: PUSH
5609: LD_INT 600
5611: LESS
5612: PUSH
5613: LD_VAR 0 8
5617: PUSH
5618: LD_INT 1
5620: NONEQUAL
5621: AND
5622: IFFALSE 5660
// begin SetTag ( i , tHeal ) ;
5624: LD_VAR 0 1
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5636: LD_VAR 0 1
5640: PPUSH
5641: LD_INT 72
5643: PPUSH
5644: LD_INT 15
5646: PPUSH
5647: CALL_OW 111
// AddComHold ( i ) ;
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5660: LD_VAR 0 8
5664: PUSH
5665: LD_INT 1
5667: EQUAL
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 256
5678: PUSH
5679: LD_INT 1000
5681: EQUAL
5682: AND
5683: IFFALSE 5697
// SetTag ( i , 0 ) ;
5685: LD_VAR 0 1
5689: PPUSH
5690: LD_INT 0
5692: PPUSH
5693: CALL_OW 109
// if not tag then
5697: LD_VAR 0 8
5701: NOT
5702: IFFALSE 5848
// begin if cr or tmp or Count ( arBuildings ) then
5704: LD_VAR 0 9
5708: PUSH
5709: LD_VAR 0 5
5713: OR
5714: PUSH
5715: LD_EXP 53
5719: PPUSH
5720: CALL 57319 0 1
5724: OR
5725: IFFALSE 5812
// begin if IsInUnit ( i ) then
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 310
5736: IFFALSE 5747
// ComExitBuilding ( i ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 122
// if tmp then
5747: LD_VAR 0 5
5751: IFFALSE 5767
// SetTag ( i , tRepair ) else
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_INT 3
5760: PPUSH
5761: CALL_OW 109
5765: GO 5810
// if cr then
5767: LD_VAR 0 9
5771: IFFALSE 5787
// SetTag ( i , tCrates ) else
5773: LD_VAR 0 1
5777: PPUSH
5778: LD_INT 2
5780: PPUSH
5781: CALL_OW 109
5785: GO 5810
// if Count ( arBuildings ) then
5787: LD_EXP 53
5791: PPUSH
5792: CALL 57319 0 1
5796: IFFALSE 5810
// SetTag ( i , tBuild ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_INT 5
5805: PPUSH
5806: CALL_OW 109
// end else
5810: GO 5848
// if not IsInUnit ( i ) then
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 310
5821: NOT
5822: IFFALSE 5848
// begin SetTag ( i , 0 ) ;
5824: LD_VAR 0 1
5828: PPUSH
5829: LD_INT 0
5831: PPUSH
5832: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_INT 35
5843: PPUSH
5844: CALL_OW 120
// end ; end ; if tag = tRepair then
5848: LD_VAR 0 8
5852: PUSH
5853: LD_INT 3
5855: EQUAL
5856: IFFALSE 5958
// begin if IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: IFFALSE 5880
// begin ComExitBuilding ( i ) ;
5869: LD_VAR 0 1
5873: PPUSH
5874: CALL_OW 122
// continue ;
5878: GO 5569
// end ; if not tmp then
5880: LD_VAR 0 5
5884: NOT
5885: IFFALSE 5901
// begin SetTag ( i , 0 ) ;
5887: LD_VAR 0 1
5891: PPUSH
5892: LD_INT 0
5894: PPUSH
5895: CALL_OW 109
// continue ;
5899: GO 5569
// end ; if not HasTask ( i ) then
5901: LD_VAR 0 1
5905: PPUSH
5906: CALL_OW 314
5910: NOT
5911: IFFALSE 5931
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_VAR 0 5
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 5
5938: PPUSH
5939: CALL_OW 308
5943: NOT
5944: IFFALSE 5958
// ComMoveToArea ( i , arBaseArea ) ;
5946: LD_VAR 0 1
5950: PPUSH
5951: LD_INT 5
5953: PPUSH
5954: CALL_OW 113
// end ; if tag = tBuild then
5958: LD_VAR 0 8
5962: PUSH
5963: LD_INT 5
5965: EQUAL
5966: IFFALSE 6077
// begin if IsInUnit ( i ) then
5968: LD_VAR 0 1
5972: PPUSH
5973: CALL_OW 310
5977: IFFALSE 5990
// begin ComExitBuilding ( i ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 122
// continue ;
5988: GO 5569
// end ; if not Count ( arBuildings ) then
5990: LD_EXP 53
5994: PPUSH
5995: CALL 57319 0 1
5999: NOT
6000: IFFALSE 6016
// begin SetTag ( i , 0 ) ;
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_INT 0
6009: PPUSH
6010: CALL_OW 109
// continue ;
6014: GO 5569
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_EXP 53
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: PUSH
6030: LD_INT 1
6032: ARRAY
6033: PPUSH
6034: LD_EXP 53
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PUSH
6043: LD_INT 2
6045: ARRAY
6046: PPUSH
6047: LD_EXP 53
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PUSH
6056: LD_INT 3
6058: ARRAY
6059: PPUSH
6060: LD_EXP 53
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PUSH
6069: LD_INT 4
6071: ARRAY
6072: PPUSH
6073: CALL_OW 145
// end ; if tag = tCrates then
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6222
// begin if IsInUnit ( i ) then
6087: LD_VAR 0 1
6091: PPUSH
6092: CALL_OW 310
6096: IFFALSE 6109
// begin ComExitBuilding ( i ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 122
// continue ;
6107: GO 5569
// end ; if not cr then
6109: LD_VAR 0 9
6113: NOT
6114: IFFALSE 6130
// begin SetTag ( i , 0 ) ;
6116: LD_VAR 0 1
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5569
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 314
6139: NOT
6140: PUSH
6141: LD_INT 81
6143: PUSH
6144: LD_VAR 0 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 92
6155: PUSH
6156: LD_VAR 0 9
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PUSH
6165: LD_VAR 0 9
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 12
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PPUSH
6187: CALL_OW 69
6191: NOT
6192: AND
6193: IFFALSE 6222
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6195: LD_VAR 0 1
6199: PPUSH
6200: LD_VAR 0 9
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: PPUSH
6209: LD_VAR 0 9
6213: PUSH
6214: LD_INT 2
6216: ARRAY
6217: PPUSH
6218: CALL_OW 117
// end ; end ;
6222: GO 5569
6224: POP
6225: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6226: LD_ADDR_VAR 0 12
6230: PUSH
6231: LD_EXP 49
6235: PPUSH
6236: LD_INT 25
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 50
6248: PUSH
6249: EMPTY
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6261: LD_ADDR_VAR 0 14
6265: PUSH
6266: LD_INT 5
6268: PPUSH
6269: LD_INT 81
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PPUSH
6281: CALL_OW 70
6285: ST_TO_ADDR
// if sol then
6286: LD_VAR 0 12
6290: IFFALSE 7064
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6292: LD_ADDR_VAR 0 5
6296: PUSH
6297: LD_VAR 0 12
6301: PPUSH
6302: LD_INT 50
6304: PUSH
6305: EMPTY
6306: LIST
6307: PUSH
6308: LD_INT 120
6310: PUSH
6311: LD_INT 6
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PPUSH
6322: CALL_OW 72
6326: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6327: LD_VAR 0 5
6331: PUSH
6332: LD_INT 81
6334: PUSH
6335: LD_VAR 0 4
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 92
6346: PUSH
6347: LD_INT 76
6349: PUSH
6350: LD_INT 38
6352: PUSH
6353: LD_INT 12
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PPUSH
6366: CALL_OW 69
6370: NOT
6371: AND
6372: IFFALSE 6542
// for i := 1 to Count ( tmp ) do
6374: LD_ADDR_VAR 0 1
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_VAR 0 5
6388: PPUSH
6389: CALL 57319 0 1
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6540
// begin un := tmp [ i ] ;
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: LD_VAR 0 5
6406: PUSH
6407: LD_VAR 0 1
6411: ARRAY
6412: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: LD_VAR 0 2
6422: PPUSH
6423: CALL_OW 310
6427: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6428: LD_VAR 0 2
6432: PPUSH
6433: CALL_OW 459
6437: NOT
6438: IFFALSE 6507
// begin ComExitBuilding ( un ) ;
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_EXP 54
6458: PUSH
6459: LD_VAR 0 1
6463: ARRAY
6464: PUSH
6465: LD_INT 1
6467: ARRAY
6468: PPUSH
6469: LD_EXP 54
6473: PUSH
6474: LD_VAR 0 1
6478: ARRAY
6479: PUSH
6480: LD_INT 2
6482: ARRAY
6483: PPUSH
6484: LD_INT 0
6486: PPUSH
6487: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6491: LD_VAR 0 2
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: CALL_OW 180
// end else
6505: GO 6538
// if not b and not HasTask ( un ) then
6507: LD_VAR 0 3
6511: NOT
6512: PUSH
6513: LD_VAR 0 2
6517: PPUSH
6518: CALL_OW 314
6522: NOT
6523: AND
6524: IFFALSE 6538
// ComEnterUnit ( un , arBar1 ) ;
6526: LD_VAR 0 2
6530: PPUSH
6531: LD_INT 37
6533: PPUSH
6534: CALL_OW 120
// end ;
6538: GO 6394
6540: POP
6541: POP
// if enemyInBase then
6542: LD_VAR 0 14
6546: IFFALSE 6691
// begin for i in sol do
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_VAR 0 12
6557: PUSH
6558: FOR_IN
6559: IFFALSE 6687
// begin tw := IsInUnit ( i ) ;
6561: LD_ADDR_VAR 0 10
6565: PUSH
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 310
6575: ST_TO_ADDR
// if tw then
6576: LD_VAR 0 10
6580: IFFALSE 6661
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6582: LD_VAR 0 10
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_VAR 0 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 30
6614: PUSH
6615: LD_INT 32
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 30
6624: PUSH
6625: LD_INT 31
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: IN
6647: NOT
6648: IFFALSE 6659
// ComExitBuilding ( i ) ;
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 122
// end else
6659: GO 6685
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6661: LD_VAR 0 1
6665: PPUSH
6666: LD_VAR 0 14
6670: PPUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 74
6680: PPUSH
6681: CALL_OW 115
// end ;
6685: GO 6558
6687: POP
6688: POP
// end else
6689: GO 7064
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6691: LD_ADDR_VAR 0 15
6695: PUSH
6696: LD_INT 5
6698: PPUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 62
6704: PUSH
6705: EMPTY
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 2
6714: PUSH
6715: LD_INT 30
6717: PUSH
6718: LD_INT 32
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 4
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 30
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 30
6747: PUSH
6748: LD_INT 31
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 70
6770: ST_TO_ADDR
// if empty then
6771: LD_VAR 0 15
6775: IFFALSE 6792
// empty := ReverseArray ( empty ) ;
6777: LD_ADDR_VAR 0 15
6781: PUSH
6782: LD_VAR 0 15
6786: PPUSH
6787: CALL 88195 0 1
6791: ST_TO_ADDR
// for i in sol do
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_VAR 0 12
6801: PUSH
6802: FOR_IN
6803: IFFALSE 7062
// begin tag := GetTag ( i ) ;
6805: LD_ADDR_VAR 0 8
6809: PUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 110
6819: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6820: LD_VAR 0 1
6824: PPUSH
6825: CALL_OW 256
6829: PUSH
6830: LD_INT 1000
6832: LESS
6833: PUSH
6834: LD_VAR 0 8
6838: PUSH
6839: LD_INT 1
6841: NONEQUAL
6842: AND
6843: IFFALSE 6883
// begin SetTag ( i , tHeal ) ;
6845: LD_VAR 0 1
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 72
6864: PPUSH
6865: LD_INT 15
6867: PPUSH
6868: CALL_OW 111
// AddComHold ( i ) ;
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 200
// continue ;
6881: GO 6802
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6883: LD_VAR 0 1
6887: PPUSH
6888: CALL_OW 256
6892: PUSH
6893: LD_INT 1000
6895: EQUAL
6896: PUSH
6897: LD_VAR 0 8
6901: PUSH
6902: LD_INT 1
6904: EQUAL
6905: AND
6906: IFFALSE 6987
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6908: LD_VAR 0 1
6912: PPUSH
6913: CALL_OW 459
6917: PUSH
6918: LD_VAR 0 12
6922: PPUSH
6923: LD_INT 50
6925: PUSH
6926: EMPTY
6927: LIST
6928: PUSH
6929: LD_INT 120
6931: PUSH
6932: LD_INT 6
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 72
6947: PPUSH
6948: CALL 57319 0 1
6952: PUSH
6953: LD_INT 3
6955: LESS
6956: OR
6957: IFFALSE 6973
// SetTag ( i , tMine ) else
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 6
6966: PPUSH
6967: CALL_OW 109
6971: GO 6985
// SetTag ( i , 0 ) ;
6973: LD_VAR 0 1
6977: PPUSH
6978: LD_INT 0
6980: PPUSH
6981: CALL_OW 109
// continue ;
6985: GO 6802
// end ; if tag = tMine then
6987: LD_VAR 0 8
6991: PUSH
6992: LD_INT 6
6994: EQUAL
6995: IFFALSE 6999
// continue ;
6997: GO 6802
// if not IsInUnit ( i ) and not tag and empty then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 310
7008: NOT
7009: PUSH
7010: LD_VAR 0 8
7014: NOT
7015: AND
7016: PUSH
7017: LD_VAR 0 15
7021: AND
7022: IFFALSE 7060
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_VAR 0 15
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7042: LD_ADDR_VAR 0 15
7046: PUSH
7047: LD_VAR 0 15
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 3
7059: ST_TO_ADDR
// end ; end ;
7060: GO 6802
7062: POP
7063: POP
// end ; end ; end ;
7064: PPOPN 16
7066: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7067: LD_EXP 56
7071: PPUSH
7072: CALL 57319 0 1
7076: IFFALSE 7221
7078: GO 7080
7080: DISABLE
7081: LD_INT 0
7083: PPUSH
// begin enable ;
7084: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_EXP 56
7094: PPUSH
7095: LD_INT 50
7097: PUSH
7098: EMPTY
7099: LIST
7100: PPUSH
7101: CALL_OW 72
7105: PUSH
7106: FOR_IN
7107: IFFALSE 7219
// begin if not HasTask ( i ) then
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 314
7118: NOT
7119: IFFALSE 7133
// AddComMoveToArea ( i , khatamArea ) ;
7121: LD_VAR 0 1
7125: PPUSH
7126: LD_INT 11
7128: PPUSH
7129: CALL_OW 173
// if IsInArea ( i , khatamArea ) then
7133: LD_VAR 0 1
7137: PPUSH
7138: LD_INT 11
7140: PPUSH
7141: CALL_OW 308
7145: IFFALSE 7217
// begin RemoveUnit ( i ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 64
// arEscapist := arEscapist diff i ;
7156: LD_ADDR_EXP 56
7160: PUSH
7161: LD_EXP 56
7165: PUSH
7166: LD_VAR 0 1
7170: DIFF
7171: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7172: LD_ADDR_EXP 21
7176: PUSH
7177: LD_EXP 21
7181: PPUSH
7182: CALL 94289 0 1
7186: ST_TO_ADDR
// if i = Dietrich then
7187: LD_VAR 0 1
7191: PUSH
7192: LD_EXP 50
7196: EQUAL
7197: IFFALSE 7217
// begin gensherEscaped := true ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7207: LD_INT 1
7209: PPUSH
7210: LD_STRING 10_GensherEscape_1
7212: PPUSH
7213: CALL_OW 39
// end ; end ; end ;
7217: GO 7106
7219: POP
7220: POP
// end ;
7221: PPOPN 1
7223: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// uc_side := 5 ;
7231: LD_ADDR_OWVAR 20
7235: PUSH
7236: LD_INT 5
7238: ST_TO_ADDR
// uc_nation := nation_arabian ;
7239: LD_ADDR_OWVAR 21
7243: PUSH
7244: LD_INT 2
7246: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 5
7254: PUSH
7255: LD_INT 6
7257: PUSH
7258: LD_INT 7
7260: PUSH
7261: LD_INT 8
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: LD_OWVAR 67
7274: ARRAY
7275: ST_TO_ADDR
// arAttackersInf := [ ] ;
7276: LD_ADDR_EXP 57
7280: PUSH
7281: EMPTY
7282: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7283: LD_ADDR_EXP 58
7287: PUSH
7288: EMPTY
7289: ST_TO_ADDR
// InitHC_All ( ) ;
7290: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_INT 3
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 5
7312: PUSH
7313: LD_INT 6
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: LD_OWVAR 67
7326: ARRAY
7327: PUSH
7328: FOR_TO
7329: IFFALSE 7431
// begin PrepareSoldier ( false , skill ) ;
7331: LD_INT 0
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: CALL_OW 381
// un := CreateHuman ;
7343: LD_ADDR_VAR 0 4
7347: PUSH
7348: CALL_OW 44
7352: ST_TO_ADDR
// if i mod 2 = 0 then
7353: LD_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: MOD
7361: PUSH
7362: LD_INT 0
7364: EQUAL
7365: IFFALSE 7379
// SetClass ( un , class_mortar ) ;
7367: LD_VAR 0 4
7371: PPUSH
7372: LD_INT 8
7374: PPUSH
7375: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7379: LD_VAR 0 4
7383: PPUSH
7384: LD_INT 19
7386: PPUSH
7387: LD_INT 0
7389: PPUSH
7390: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7394: LD_ADDR_EXP 57
7398: PUSH
7399: LD_EXP 57
7403: PPUSH
7404: LD_VAR 0 4
7408: PPUSH
7409: CALL 92928 0 2
7413: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7414: LD_VAR 0 4
7418: PPUSH
7419: LD_INT 104
7421: PPUSH
7422: LD_INT 60
7424: PPUSH
7425: CALL_OW 114
// end ;
7429: GO 7328
7431: POP
7432: POP
// for i := 1 to 3 do
7433: LD_ADDR_VAR 0 2
7437: PUSH
7438: DOUBLE
7439: LD_INT 1
7441: DEC
7442: ST_TO_ADDR
7443: LD_INT 3
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7599
// begin PrepareMechanic ( false , skill ) ;
7449: LD_INT 0
7451: PPUSH
7452: LD_VAR 0 3
7456: PPUSH
7457: CALL_OW 383
// un := CreateHuman ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: CALL_OW 44
7470: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7471: LD_INT 14
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_INT 27
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: LD_INT 2
7497: MOD
7498: PUSH
7499: LD_INT 1
7501: PLUS
7502: ARRAY
7503: PPUSH
7504: LD_INT 80
7506: PPUSH
7507: CALL 60057 0 5
// veh := CreateVehicle ;
7511: LD_ADDR_VAR 0 5
7515: PUSH
7516: CALL_OW 45
7520: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7521: LD_VAR 0 5
7525: PPUSH
7526: LD_INT 4
7528: PPUSH
7529: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7533: LD_VAR 0 5
7537: PPUSH
7538: LD_INT 18
7540: PPUSH
7541: LD_INT 0
7543: PPUSH
7544: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7548: LD_VAR 0 4
7552: PPUSH
7553: LD_VAR 0 5
7557: PPUSH
7558: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7562: LD_VAR 0 4
7566: PPUSH
7567: LD_INT 129
7569: PPUSH
7570: LD_INT 20
7572: PPUSH
7573: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7577: LD_ADDR_EXP 58
7581: PUSH
7582: LD_EXP 58
7586: PPUSH
7587: LD_VAR 0 5
7591: PPUSH
7592: CALL 92928 0 2
7596: ST_TO_ADDR
// end ;
7597: GO 7446
7599: POP
7600: POP
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: DOUBLE
7614: LD_INT 1
7616: DEC
7617: ST_TO_ADDR
7618: LD_INT 1
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_OWVAR 67
7640: ARRAY
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7774
// begin PrepareMechanic ( false , skill ) ;
7645: LD_INT 0
7647: PPUSH
7648: LD_VAR 0 3
7652: PPUSH
7653: CALL_OW 383
// un := CreateHuman ;
7657: LD_ADDR_VAR 0 4
7661: PUSH
7662: CALL_OW 44
7666: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7667: LD_INT 14
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 26
7678: PPUSH
7679: LD_INT 80
7681: PPUSH
7682: CALL 60057 0 5
// veh := CreateVehicle ;
7686: LD_ADDR_VAR 0 5
7690: PUSH
7691: CALL_OW 45
7695: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7696: LD_VAR 0 5
7700: PPUSH
7701: LD_INT 4
7703: PPUSH
7704: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 18
7715: PPUSH
7716: LD_INT 0
7718: PPUSH
7719: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7723: LD_VAR 0 4
7727: PPUSH
7728: LD_VAR 0 5
7732: PPUSH
7733: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7737: LD_VAR 0 4
7741: PPUSH
7742: LD_INT 133
7744: PPUSH
7745: LD_INT 40
7747: PPUSH
7748: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7752: LD_ADDR_EXP 58
7756: PUSH
7757: LD_EXP 58
7761: PPUSH
7762: LD_VAR 0 5
7766: PPUSH
7767: CALL 92928 0 2
7771: ST_TO_ADDR
// end ;
7772: GO 7642
7774: POP
7775: POP
// wait ( 0 0$2 ) ;
7776: LD_INT 70
7778: PPUSH
7779: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7783: LD_ADDR_VAR 0 2
7787: PUSH
7788: DOUBLE
7789: LD_INT 1
7791: DEC
7792: ST_TO_ADDR
7793: LD_INT 1
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: LD_INT 4
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: LD_OWVAR 67
7815: ARRAY
7816: PUSH
7817: FOR_TO
7818: IFFALSE 7980
// begin PrepareMechanic ( false , skill ) ;
7820: LD_INT 0
7822: PPUSH
7823: LD_VAR 0 3
7827: PPUSH
7828: CALL_OW 383
// un := CreateHuman ;
7832: LD_ADDR_VAR 0 4
7836: PUSH
7837: CALL_OW 44
7841: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7842: LD_INT 14
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: LD_INT 28
7853: PPUSH
7854: LD_INT 80
7856: PPUSH
7857: CALL 60057 0 5
// veh := CreateVehicle ;
7861: LD_ADDR_VAR 0 5
7865: PUSH
7866: CALL_OW 45
7870: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7871: LD_VAR 0 5
7875: PPUSH
7876: LD_INT 4
7878: PPUSH
7879: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7883: LD_VAR 0 5
7887: PPUSH
7888: LD_INT 18
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7898: LD_VAR 0 4
7902: PPUSH
7903: LD_VAR 0 5
7907: PPUSH
7908: CALL_OW 52
// if i mod 2 = 0 then
7912: LD_VAR 0 2
7916: PUSH
7917: LD_INT 2
7919: MOD
7920: PUSH
7921: LD_INT 0
7923: EQUAL
7924: IFFALSE 7943
// ComMoveXY ( un , 136 , 61 ) else
7926: LD_VAR 0 4
7930: PPUSH
7931: LD_INT 136
7933: PPUSH
7934: LD_INT 61
7936: PPUSH
7937: CALL_OW 111
7941: GO 7958
// ComMoveXY ( un , 137 , 41 ) ;
7943: LD_VAR 0 4
7947: PPUSH
7948: LD_INT 137
7950: PPUSH
7951: LD_INT 41
7953: PPUSH
7954: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7958: LD_ADDR_EXP 58
7962: PUSH
7963: LD_EXP 58
7967: PPUSH
7968: LD_VAR 0 5
7972: PPUSH
7973: CALL 92928 0 2
7977: ST_TO_ADDR
// end ;
7978: GO 7817
7980: POP
7981: POP
// arabianAttackSpawned := true ;
7982: LD_ADDR_EXP 12
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// end ;
7990: LD_VAR 0 1
7994: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
7995: LD_EXP 57
7999: IFFALSE 8412
8001: GO 8003
8003: DISABLE
8004: LD_INT 0
8006: PPUSH
8007: PPUSH
8008: PPUSH
// begin wait ( 0 0$10 ) ;
8009: LD_INT 350
8011: PPUSH
8012: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: LD_EXP 57
8025: PPUSH
8026: LD_INT 25
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 50
8038: PUSH
8039: EMPTY
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 72
8050: ST_TO_ADDR
// for i in tmp do
8051: LD_ADDR_VAR 0 1
8055: PUSH
8056: LD_VAR 0 2
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8187
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: LD_INT 120
8084: PUSH
8085: LD_INT 11
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 21
8101: PUSH
8102: LD_INT 2
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 21
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 69
8133: PPUSH
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 74
8143: ST_TO_ADDR
// if not nearest then
8144: LD_VAR 0 3
8148: NOT
8149: IFFALSE 8153
// break ;
8151: GO 8187
// SetTag ( nearest , tMined ) ;
8153: LD_VAR 0 3
8157: PPUSH
8158: LD_INT 11
8160: PPUSH
8161: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 0
8175: PPUSH
8176: LD_VAR 0 3
8180: PPUSH
8181: CALL_OW 132
// end ;
8185: GO 8061
8187: POP
8188: POP
// if hasBase and epsilon then
8189: LD_EXP 9
8193: PUSH
8194: LD_EXP 10
8198: AND
8199: IFFALSE 8223
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8201: LD_VAR 0 2
8205: PPUSH
8206: LD_INT 0
8208: PPUSH
8209: LD_INT 0
8211: PPUSH
8212: LD_EXP 10
8216: PPUSH
8217: CALL_OW 192
8221: GO 8238
// AddComMoveXY ( tmp , 107 , 59 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 107
8230: PPUSH
8231: LD_INT 59
8233: PPUSH
8234: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8245: LD_EXP 50
8249: PPUSH
8250: CALL_OW 301
8254: PUSH
8255: LD_EXP 13
8259: OR
8260: IFFALSE 8238
// if not gensherEscaped then
8262: LD_EXP 13
8266: NOT
8267: IFFALSE 8276
// wait ( 1 1$20 ) ;
8269: LD_INT 2800
8271: PPUSH
8272: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8276: LD_ADDR_VAR 0 2
8280: PUSH
8281: LD_EXP 57
8285: PPUSH
8286: LD_INT 50
8288: PUSH
8289: EMPTY
8290: LIST
8291: PPUSH
8292: CALL_OW 72
8296: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8297: LD_VAR 0 2
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 117
8307: PPUSH
8308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// for i in tmp do
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: LD_VAR 0 2
8328: PUSH
8329: FOR_IN
8330: IFFALSE 8403
// if IsInArea ( i , arAttackSpawn2Area ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: LD_INT 19
8339: PPUSH
8340: CALL_OW 308
8344: IFFALSE 8389
// begin tmp := tmp diff i ;
8346: LD_ADDR_VAR 0 2
8350: PUSH
8351: LD_VAR 0 2
8355: PUSH
8356: LD_VAR 0 1
8360: DIFF
8361: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8362: LD_ADDR_EXP 57
8366: PUSH
8367: LD_EXP 57
8371: PUSH
8372: LD_VAR 0 1
8376: DIFF
8377: ST_TO_ADDR
// RemoveUnit ( i ) ;
8378: LD_VAR 0 1
8382: PPUSH
8383: CALL_OW 64
// end else
8387: GO 8401
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8389: LD_VAR 0 1
8393: PPUSH
8394: LD_INT 19
8396: PPUSH
8397: CALL_OW 113
8401: GO 8329
8403: POP
8404: POP
// until not tmp ;
8405: LD_VAR 0 2
8409: NOT
8410: IFFALSE 8312
// end ;
8412: PPOPN 3
8414: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , p ;
8415: LD_EXP 58
8419: IFFALSE 8703
8421: GO 8423
8423: DISABLE
8424: LD_INT 0
8426: PPUSH
8427: PPUSH
8428: PPUSH
// begin p := 0 ;
8429: LD_ADDR_VAR 0 3
8433: PUSH
8434: LD_INT 0
8436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8437: LD_INT 35
8439: PPUSH
8440: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8444: LD_ADDR_VAR 0 2
8448: PUSH
8449: LD_EXP 58
8453: PPUSH
8454: LD_INT 50
8456: PUSH
8457: EMPTY
8458: LIST
8459: PPUSH
8460: CALL_OW 72
8464: ST_TO_ADDR
// for i in tmp do
8465: LD_ADDR_VAR 0 1
8469: PUSH
8470: LD_VAR 0 2
8474: PUSH
8475: FOR_IN
8476: IFFALSE 8513
// AgressiveMove ( i , [ [ 143 , 38 ] , [ 111 , 31 ] ] ) ;
8478: LD_VAR 0 1
8482: PPUSH
8483: LD_INT 143
8485: PUSH
8486: LD_INT 38
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 111
8495: PUSH
8496: LD_INT 31
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL 95538 0 2
8511: GO 8475
8513: POP
8514: POP
// if IsDead ( Dietrich ) then
8515: LD_EXP 50
8519: PPUSH
8520: CALL_OW 301
8524: IFFALSE 8541
// p := Inc ( p ) ;
8526: LD_ADDR_VAR 0 3
8530: PUSH
8531: LD_VAR 0 3
8535: PPUSH
8536: CALL 94289 0 1
8540: ST_TO_ADDR
// until not tmp or gensherEscaped or p > 40 ;
8541: LD_VAR 0 2
8545: NOT
8546: PUSH
8547: LD_EXP 13
8551: OR
8552: PUSH
8553: LD_VAR 0 3
8557: PUSH
8558: LD_INT 40
8560: GREATER
8561: OR
8562: IFFALSE 8437
// if not arAttackersVeh then
8564: LD_EXP 58
8568: NOT
8569: IFFALSE 8573
// exit ;
8571: GO 8703
// repeat wait ( 0 0$1 ) ;
8573: LD_INT 35
8575: PPUSH
8576: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8580: LD_ADDR_VAR 0 2
8584: PUSH
8585: LD_EXP 58
8589: PPUSH
8590: LD_INT 50
8592: PUSH
8593: EMPTY
8594: LIST
8595: PPUSH
8596: CALL_OW 72
8600: ST_TO_ADDR
// for i in tmp do
8601: LD_ADDR_VAR 0 1
8605: PUSH
8606: LD_VAR 0 2
8610: PUSH
8611: FOR_IN
8612: IFFALSE 8694
// if IsInArea ( i , arAttackSpawnArea ) then
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_INT 18
8621: PPUSH
8622: CALL_OW 308
8626: IFFALSE 8680
// begin if IsInUnit ( i ) then
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 310
8637: IFFALSE 8653
// RemoveUnit ( IsInUnit ( i ) ) ;
8639: LD_VAR 0 1
8643: PPUSH
8644: CALL_OW 310
8648: PPUSH
8649: CALL_OW 64
// RemoveUnit ( i ) ;
8653: LD_VAR 0 1
8657: PPUSH
8658: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8662: LD_ADDR_EXP 58
8666: PUSH
8667: LD_EXP 58
8671: PUSH
8672: LD_VAR 0 1
8676: DIFF
8677: ST_TO_ADDR
// end else
8678: GO 8692
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8680: LD_VAR 0 1
8684: PPUSH
8685: LD_INT 18
8687: PPUSH
8688: CALL_OW 113
8692: GO 8611
8694: POP
8695: POP
// until not tmp ;
8696: LD_VAR 0 2
8700: NOT
8701: IFFALSE 8573
// end ; end_of_file
8703: PPOPN 3
8705: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , skill , sources ; begin
8706: LD_INT 0
8708: PPUSH
8709: PPUSH
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
// uc_side := 3 ;
8714: LD_ADDR_OWVAR 20
8718: PUSH
8719: LD_INT 3
8721: ST_TO_ADDR
// uc_nation := nation_russian ;
8722: LD_ADDR_OWVAR 21
8726: PUSH
8727: LD_INT 3
8729: ST_TO_ADDR
// ruForces := [ ] ;
8730: LD_ADDR_EXP 59
8734: PUSH
8735: EMPTY
8736: ST_TO_ADDR
// ruForces2 := [ ] ;
8737: LD_ADDR_EXP 60
8741: PUSH
8742: EMPTY
8743: ST_TO_ADDR
// ruMech := [ ] ;
8744: LD_ADDR_EXP 63
8748: PUSH
8749: EMPTY
8750: ST_TO_ADDR
// ruMech2 := [ ] ;
8751: LD_ADDR_EXP 64
8755: PUSH
8756: EMPTY
8757: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8758: LD_ADDR_EXP 65
8762: PUSH
8763: LD_INT 37
8765: PUSH
8766: LD_INT 63
8768: PUSH
8769: LD_INT 52
8771: PUSH
8772: LD_INT 54
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: ST_TO_ADDR
// ruBaseArea := 0 ;
8781: LD_ADDR_EXP 66
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8789: LD_ADDR_EXP 67
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// ruBase := 0 ;
8797: LD_ADDR_EXP 68
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// ruBase2 := 0 ;
8805: LD_ADDR_EXP 69
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// ruConstructList := [ ] ;
8813: LD_ADDR_EXP 70
8817: PUSH
8818: EMPTY
8819: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8820: LD_ADDR_EXP 71
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 1
8833: PUSH
8834: LD_INT 43
8836: PUSH
8837: LD_INT 44
8839: PUSH
8840: LD_INT 45
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_INT 3
8853: PPUSH
8854: CALL_OW 12
8858: ARRAY
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 22
8868: PUSH
8869: LD_INT 3
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: LD_INT 43
8877: PUSH
8878: LD_INT 44
8880: PUSH
8881: LD_INT 45
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 1
8891: PPUSH
8892: LD_INT 3
8894: PPUSH
8895: CALL_OW 12
8899: ARRAY
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 3
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: LD_INT 43
8918: PUSH
8919: LD_INT 44
8921: PUSH
8922: LD_INT 45
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 1
8932: PPUSH
8933: LD_INT 3
8935: PPUSH
8936: CALL_OW 12
8940: ARRAY
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: ST_TO_ADDR
// ruCratesArea := 0 ;
8953: LD_ADDR_EXP 72
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// ruCratesArea2 := 0 ;
8961: LD_ADDR_EXP 73
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// ruHealPoint := [ ] ;
8969: LD_ADDR_EXP 74
8973: PUSH
8974: EMPTY
8975: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
8976: LD_ADDR_EXP 75
8980: PUSH
8981: EMPTY
8982: ST_TO_ADDR
// ruBuildings := [ ] ;
8983: LD_ADDR_EXP 76
8987: PUSH
8988: EMPTY
8989: ST_TO_ADDR
// ruBuildings2 := [ ] ;
8990: LD_ADDR_EXP 77
8994: PUSH
8995: EMPTY
8996: ST_TO_ADDR
// ruTanks := [ ] ;
8997: LD_ADDR_EXP 79
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// ruTanks2 := [ ] ;
9004: LD_ADDR_EXP 80
9008: PUSH
9009: EMPTY
9010: ST_TO_ADDR
// ruParkingArea := 0 ;
9011: LD_ADDR_EXP 82
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// ruParkingArea2 := 0 ;
9019: LD_ADDR_EXP 83
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: DOUBLE
9033: LD_INT 1
9035: DEC
9036: ST_TO_ADDR
9037: LD_INT 2
9039: PUSH
9040: LD_INT 3
9042: PUSH
9043: LD_INT 4
9045: PUSH
9046: LD_INT 4
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: PUSH
9055: LD_OWVAR 67
9059: ARRAY
9060: PUSH
9061: FOR_TO
9062: IFFALSE 9122
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9064: LD_ADDR_EXP 70
9068: PUSH
9069: LD_EXP 70
9073: PPUSH
9074: LD_INT 22
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: LD_INT 43
9085: PUSH
9086: LD_INT 44
9088: PUSH
9089: LD_INT 45
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 1
9099: PPUSH
9100: LD_INT 3
9102: PPUSH
9103: CALL_OW 12
9107: ARRAY
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL 92928 0 2
9119: ST_TO_ADDR
9120: GO 9061
9122: POP
9123: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9124: LD_ADDR_VAR 0 6
9128: PUSH
9129: LD_INT 43
9131: PUSH
9132: LD_INT 68
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 43
9141: PUSH
9142: LD_INT 79
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 99
9151: PUSH
9152: LD_INT 114
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 103
9161: PUSH
9162: LD_INT 114
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 156
9171: PUSH
9172: LD_INT 92
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: LD_INT 152
9181: PUSH
9182: LD_INT 85
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: ST_TO_ADDR
// for i in sources do
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_VAR 0 6
9206: PUSH
9207: FOR_IN
9208: IFFALSE 9237
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9210: LD_VAR 0 2
9214: PUSH
9215: LD_INT 1
9217: ARRAY
9218: PPUSH
9219: LD_VAR 0 2
9223: PUSH
9224: LD_INT 2
9226: ARRAY
9227: PPUSH
9228: LD_INT 3
9230: PPUSH
9231: CALL_OW 441
9235: GO 9207
9237: POP
9238: POP
// if Difficulty > 2 then
9239: LD_OWVAR 67
9243: PUSH
9244: LD_INT 2
9246: GREATER
9247: IFFALSE 9275
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9249: LD_INT 52
9251: PPUSH
9252: LD_INT 6
9254: PPUSH
9255: LD_INT 2
9257: PPUSH
9258: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9262: LD_INT 58
9264: PPUSH
9265: LD_INT 6
9267: PPUSH
9268: LD_INT 2
9270: PPUSH
9271: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9275: LD_ADDR_VAR 0 5
9279: PUSH
9280: LD_INT 5
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: LD_INT 7
9288: PUSH
9289: LD_INT 8
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: PUSH
9298: LD_OWVAR 67
9302: ARRAY
9303: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9304: LD_ADDR_EXP 61
9308: PUSH
9309: LD_STRING Tsaritsyn
9311: PPUSH
9312: LD_INT 0
9314: PPUSH
9315: LD_STRING 
9317: PPUSH
9318: CALL 55133 0 3
9322: ST_TO_ADDR
// for i := 1 to 4 do
9323: LD_ADDR_VAR 0 2
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_INT 4
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9555
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: DOUBLE
9345: LD_INT 1
9347: DEC
9348: ST_TO_ADDR
9349: LD_INT 5
9351: PUSH
9352: LD_INT 6
9354: PUSH
9355: LD_INT 8
9357: PUSH
9358: LD_INT 9
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: LD_OWVAR 67
9371: ARRAY
9372: PUSH
9373: LD_INT 3
9375: PUSH
9376: LD_INT 4
9378: PUSH
9379: LD_INT 5
9381: PUSH
9382: LD_INT 6
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_OWVAR 67
9395: ARRAY
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 4
9402: PUSH
9403: LD_INT 5
9405: PUSH
9406: LD_INT 6
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: LD_OWVAR 67
9419: ARRAY
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: LD_VAR 0 2
9455: ARRAY
9456: PUSH
9457: FOR_TO
9458: IFFALSE 9551
// begin PrepareHuman ( false , i , skill ) ;
9460: LD_INT 0
9462: PPUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: LD_VAR 0 5
9472: PPUSH
9473: CALL_OW 380
// un := CreateHuman ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: CALL_OW 44
9486: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9487: LD_ADDR_EXP 59
9491: PUSH
9492: LD_EXP 59
9496: PPUSH
9497: LD_VAR 0 4
9501: PPUSH
9502: CALL 92928 0 2
9506: ST_TO_ADDR
// if i = 3 then
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 3
9514: EQUAL
9515: IFFALSE 9549
// begin ruMech := Join ( ruMech , un ) ;
9517: LD_ADDR_EXP 63
9521: PUSH
9522: LD_EXP 63
9526: PPUSH
9527: LD_VAR 0 4
9531: PPUSH
9532: CALL 92928 0 2
9536: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9537: LD_VAR 0 4
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 336
// end ; end ;
9549: GO 9457
9551: POP
9552: POP
9553: GO 9336
9555: POP
9556: POP
// if Difficulty < 4 then
9557: LD_OWVAR 67
9561: PUSH
9562: LD_INT 4
9564: LESS
9565: IFFALSE 9569
// exit ;
9567: GO 9841
// PrepareSoldier ( sex_male , skill + 1 ) ;
9569: LD_INT 1
9571: PPUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 1
9579: PLUS
9580: PPUSH
9581: CALL_OW 381
// hc_importance := 100 ;
9585: LD_ADDR_OWVAR 32
9589: PUSH
9590: LD_INT 100
9592: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9593: LD_ADDR_EXP 62
9597: PUSH
9598: CALL_OW 44
9602: ST_TO_ADDR
// InitHc_All ( ) ;
9603: CALL_OW 584
// for i := 1 to 4 do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_INT 4
9619: PUSH
9620: FOR_TO
9621: IFFALSE 9839
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9623: LD_ADDR_VAR 0 3
9627: PUSH
9628: DOUBLE
9629: LD_INT 1
9631: DEC
9632: ST_TO_ADDR
9633: LD_INT 5
9635: PUSH
9636: LD_INT 6
9638: PUSH
9639: LD_INT 8
9641: PUSH
9642: LD_INT 9
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: PUSH
9651: LD_OWVAR 67
9655: ARRAY
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: LD_INT 4
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: LD_INT 6
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: PUSH
9675: LD_OWVAR 67
9679: ARRAY
9680: PUSH
9681: LD_INT 3
9683: PUSH
9684: LD_INT 4
9686: PUSH
9687: LD_INT 5
9689: PUSH
9690: LD_INT 6
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_OWVAR 67
9703: ARRAY
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 3
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 3
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_OWVAR 67
9727: ARRAY
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: LD_VAR 0 2
9739: ARRAY
9740: PUSH
9741: FOR_TO
9742: IFFALSE 9835
// begin PrepareHuman ( false , i , skill ) ;
9744: LD_INT 0
9746: PPUSH
9747: LD_VAR 0 2
9751: PPUSH
9752: LD_VAR 0 5
9756: PPUSH
9757: CALL_OW 380
// un := CreateHuman ;
9761: LD_ADDR_VAR 0 4
9765: PUSH
9766: CALL_OW 44
9770: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9771: LD_ADDR_EXP 60
9775: PUSH
9776: LD_EXP 60
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL 92928 0 2
9790: ST_TO_ADDR
// if i = 3 then
9791: LD_VAR 0 2
9795: PUSH
9796: LD_INT 3
9798: EQUAL
9799: IFFALSE 9833
// begin ruMech2 := Join ( ruMech2 , un ) ;
9801: LD_ADDR_EXP 64
9805: PUSH
9806: LD_EXP 64
9810: PPUSH
9811: LD_VAR 0 4
9815: PPUSH
9816: CALL 92928 0 2
9820: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9821: LD_VAR 0 4
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: CALL_OW 336
// end ; end ;
9833: GO 9741
9835: POP
9836: POP
9837: GO 9620
9839: POP
9840: POP
// end ;
9841: LD_VAR 0 1
9845: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9846: LD_EXP 66
9850: PPUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 50
9863: PUSH
9864: EMPTY
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 70
9875: PUSH
9876: LD_EXP 76
9880: PPUSH
9881: CALL 57319 0 1
9885: PUSH
9886: LD_INT 3
9888: LESS
9889: AND
9890: IFFALSE 10154
9892: GO 9894
9894: DISABLE
9895: LD_INT 0
9897: PPUSH
// begin enable ;
9898: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9899: LD_ADDR_EXP 70
9903: PUSH
9904: LD_EXP 70
9908: PUSH
9909: LD_INT 22
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_INT 24
9917: PUSH
9918: LD_INT 24
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_OWVAR 67
9931: ARRAY
9932: PUSH
9933: LD_INT 1
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: LD_INT 44
9941: PUSH
9942: LD_INT 45
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 1
9951: PPUSH
9952: LD_INT 2
9954: PPUSH
9955: CALL_OW 12
9959: ARRAY
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_INT 24
9975: PUSH
9976: LD_INT 24
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: LD_OWVAR 67
9989: ARRAY
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: LD_INT 3
9996: PUSH
9997: LD_INT 45
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_INT 24
10014: PUSH
10015: LD_INT 24
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: LD_OWVAR 67
10028: ARRAY
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 45
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: ADD
10050: ST_TO_ADDR
// for i := Difficulty downto 1 do
10051: LD_ADDR_VAR 0 1
10055: PUSH
10056: DOUBLE
10057: LD_OWVAR 67
10061: INC
10062: ST_TO_ADDR
10063: LD_INT 1
10065: PUSH
10066: FOR_DOWNTO
10067: IFFALSE 10152
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10069: LD_ADDR_EXP 70
10073: PUSH
10074: LD_EXP 70
10078: PPUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 22
10084: PUSH
10085: LD_INT 24
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: PUSH
10097: LD_OWVAR 67
10101: ARRAY
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: LD_INT 3
10108: PUSH
10109: LD_INT 44
10111: PUSH
10112: LD_INT 45
10114: PUSH
10115: LD_INT 45
10117: PUSH
10118: LD_INT 43
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 1
10129: PPUSH
10130: LD_INT 4
10132: PPUSH
10133: CALL_OW 12
10137: ARRAY
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL 92928 0 2
10149: ST_TO_ADDR
10150: GO 10066
10152: POP
10153: POP
// end ;
10154: PPOPN 1
10156: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10157: LD_EXP 67
10161: PPUSH
10162: LD_INT 30
10164: PUSH
10165: LD_INT 3
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 50
10174: PUSH
10175: EMPTY
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 70
10186: PUSH
10187: LD_EXP 77
10191: PPUSH
10192: CALL 57319 0 1
10196: PUSH
10197: LD_INT 3
10199: LESS
10200: AND
10201: IFFALSE 10396
10203: GO 10205
10205: DISABLE
// begin enable ;
10206: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10207: LD_ADDR_EXP 71
10211: PUSH
10212: LD_EXP 71
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_INT 22
10222: PUSH
10223: LD_INT 24
10225: PUSH
10226: LD_INT 24
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 1
10237: PPUSH
10238: LD_INT 4
10240: PPUSH
10241: CALL_OW 12
10245: ARRAY
10246: PUSH
10247: LD_INT 1
10249: PUSH
10250: LD_INT 3
10252: PUSH
10253: LD_INT 44
10255: PUSH
10256: LD_INT 45
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 1
10265: PPUSH
10266: LD_INT 2
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 24
10289: PUSH
10290: LD_INT 24
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_INT 4
10304: PPUSH
10305: CALL_OW 12
10309: ARRAY
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: LD_INT 45
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 22
10328: PUSH
10329: LD_INT 22
10331: PUSH
10332: LD_INT 24
10334: PUSH
10335: LD_INT 24
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_INT 4
10349: PPUSH
10350: CALL_OW 12
10354: ARRAY
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: LD_INT 3
10361: PUSH
10362: LD_INT 45
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 22
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: LD_INT 3
10379: PUSH
10380: LD_INT 43
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: ADD
10395: ST_TO_ADDR
// end ;
10396: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10397: LD_INT 0
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
10406: PPUSH
// case Difficulty of 1 :
10407: LD_OWVAR 67
10411: PUSH
10412: LD_INT 1
10414: DOUBLE
10415: EQUAL
10416: IFTRUE 10420
10418: GO 10439
10420: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10421: LD_ADDR_VAR 0 4
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 2
10431: PPUSH
10432: CALL_OW 12
10436: ST_TO_ADDR
10437: GO 10513
10439: LD_INT 2
10441: DOUBLE
10442: EQUAL
10443: IFTRUE 10447
10445: GO 10466
10447: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10448: LD_ADDR_VAR 0 4
10452: PUSH
10453: LD_INT 1
10455: PPUSH
10456: LD_INT 3
10458: PPUSH
10459: CALL_OW 12
10463: ST_TO_ADDR
10464: GO 10513
10466: LD_INT 3
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10493
10474: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10475: LD_ADDR_VAR 0 4
10479: PUSH
10480: LD_INT 2
10482: PPUSH
10483: LD_INT 3
10485: PPUSH
10486: CALL_OW 12
10490: ST_TO_ADDR
10491: GO 10513
10493: LD_INT 4
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10512
10501: POP
// spawn := 3 ; end ;
10502: LD_ADDR_VAR 0 4
10506: PUSH
10507: LD_INT 3
10509: ST_TO_ADDR
10510: GO 10513
10512: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10513: LD_ADDR_VAR 0 6
10517: PUSH
10518: LD_INT 24
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 23
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_VAR 0 4
10536: ARRAY
10537: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10538: LD_ADDR_VAR 0 5
10542: PUSH
10543: LD_INT 21
10545: PUSH
10546: LD_INT 22
10548: PUSH
10549: LD_INT 20
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 4
10561: ARRAY
10562: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10563: LD_ADDR_VAR 0 8
10567: PUSH
10568: LD_INT 96
10570: PUSH
10571: LD_INT 102
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 54
10580: PUSH
10581: LD_INT 85
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 146
10590: PUSH
10591: LD_INT 67
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: PUSH
10603: LD_VAR 0 4
10607: ARRAY
10608: ST_TO_ADDR
// for i in ruForces union ruCommander do
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_EXP 59
10618: PUSH
10619: LD_EXP 61
10623: UNION
10624: PUSH
10625: FOR_IN
10626: IFFALSE 10681
// begin PlaceUnitArea ( i , area , false ) ;
10628: LD_VAR 0 2
10632: PPUSH
10633: LD_VAR 0 5
10637: PPUSH
10638: LD_INT 0
10640: PPUSH
10641: CALL_OW 49
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10645: LD_VAR 0 2
10649: PPUSH
10650: LD_VAR 0 8
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 8
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10672: LD_INT 14
10674: PPUSH
10675: CALL_OW 67
// end ;
10679: GO 10625
10681: POP
10682: POP
// DRussianConvoy ;
10683: CALL 28498 0 0
// spawnedRussians := true ;
10687: LD_ADDR_EXP 19
10691: PUSH
10692: LD_INT 1
10694: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10695: LD_INT 1
10697: PPUSH
10698: LD_VAR 0 6
10702: PPUSH
10703: CALL_OW 332
// case spawn of 1 :
10707: LD_VAR 0 4
10711: PUSH
10712: LD_INT 1
10714: DOUBLE
10715: EQUAL
10716: IFTRUE 10720
10718: GO 10730
10720: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10721: LD_INT 102
10723: PPUSH
10724: CALL_OW 427
10728: GO 10767
10730: LD_INT 2
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10748
10738: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10739: LD_INT 103
10741: PPUSH
10742: CALL_OW 427
10746: GO 10767
10748: LD_INT 3
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 10766
10756: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10757: LD_INT 104
10759: PPUSH
10760: CALL_OW 427
10764: GO 10767
10766: POP
// if Difficulty < 4 then
10767: LD_OWVAR 67
10771: PUSH
10772: LD_INT 4
10774: LESS
10775: IFFALSE 10779
// exit ;
10777: GO 10856
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10779: LD_INT 1
10781: PPUSH
10782: LD_INT 22
10784: PPUSH
10785: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10789: LD_ADDR_VAR 0 2
10793: PUSH
10794: LD_EXP 60
10798: PUSH
10799: LD_EXP 62
10803: UNION
10804: PUSH
10805: FOR_IN
10806: IFFALSE 10847
// begin PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10808: LD_VAR 0 2
10812: PPUSH
10813: LD_INT 22
10815: PPUSH
10816: LD_INT 0
10818: PPUSH
10819: CALL_OW 49
// ComAgressiveMove ( i , 54 , 85 ) ;
10823: LD_VAR 0 2
10827: PPUSH
10828: LD_INT 54
10830: PPUSH
10831: LD_INT 85
10833: PPUSH
10834: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10838: LD_INT 28
10840: PPUSH
10841: CALL_OW 67
// end ;
10845: GO 10805
10847: POP
10848: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10849: LD_INT 105
10851: PPUSH
10852: CALL_OW 427
// end ;
10856: LD_VAR 0 1
10860: RET
// export function RussianBase ( group , option ) ; begin
10861: LD_INT 0
10863: PPUSH
// case option of 1 :
10864: LD_VAR 0 2
10868: PUSH
10869: LD_INT 1
10871: DOUBLE
10872: EQUAL
10873: IFTRUE 10877
10875: GO 11333
10877: POP
// begin ruBaseArea := ruBaseCenterArea ;
10878: LD_ADDR_EXP 66
10882: PUSH
10883: LD_INT 26
10885: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
10886: LD_ADDR_EXP 72
10890: PUSH
10891: LD_INT 26
10893: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
10894: LD_ADDR_EXP 76
10898: PUSH
10899: LD_INT 0
10901: PUSH
10902: LD_INT 104
10904: PUSH
10905: LD_INT 110
10907: PUSH
10908: LD_INT 5
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 4
10919: PUSH
10920: LD_INT 98
10922: PUSH
10923: LD_INT 90
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 29
10937: PUSH
10938: LD_INT 103
10940: PUSH
10941: LD_INT 114
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 30
10955: PUSH
10956: LD_INT 99
10958: PUSH
10959: LD_INT 114
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 28
10973: PUSH
10974: LD_INT 100
10976: PUSH
10977: LD_INT 112
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: LD_INT 92
10994: PUSH
10995: LD_INT 101
10997: PUSH
10998: LD_INT 0
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 26
11009: PUSH
11010: LD_INT 97
11012: PUSH
11013: LD_INT 116
11015: PUSH
11016: LD_INT 5
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 17
11027: PUSH
11028: LD_INT 96
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 18
11045: PUSH
11046: LD_INT 88
11048: PUSH
11049: LD_INT 97
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 26
11063: PUSH
11064: LD_INT 106
11066: PUSH
11067: LD_INT 92
11069: PUSH
11070: LD_INT 2
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 6
11081: PUSH
11082: LD_INT 93
11084: PUSH
11085: LD_INT 110
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 21
11099: PUSH
11100: LD_INT 89
11102: PUSH
11103: LD_INT 101
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 16
11117: PUSH
11118: LD_INT 95
11120: PUSH
11121: LD_INT 104
11123: PUSH
11124: LD_INT 4
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 24
11135: PUSH
11136: LD_INT 92
11138: PUSH
11139: LD_INT 105
11141: PUSH
11142: LD_INT 0
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 33
11153: PUSH
11154: LD_INT 88
11156: PUSH
11157: LD_INT 89
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 33
11171: PUSH
11172: LD_INT 86
11174: PUSH
11175: LD_INT 90
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 33
11189: PUSH
11190: LD_INT 85
11192: PUSH
11193: LD_INT 99
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 33
11207: PUSH
11208: LD_INT 85
11210: PUSH
11211: LD_INT 107
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 33
11225: PUSH
11226: LD_INT 105
11228: PUSH
11229: LD_INT 99
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 33
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 92
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 33
11261: PUSH
11262: LD_INT 105
11264: PUSH
11265: LD_INT 92
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11300: LD_ADDR_EXP 74
11304: PUSH
11305: LD_INT 98
11307: PUSH
11308: LD_INT 107
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11315: LD_ADDR_EXP 82
11319: PUSH
11320: LD_INT 30
11322: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11323: LD_ADDR_EXP 84
11327: PUSH
11328: LD_INT 36
11330: ST_TO_ADDR
// end ; 2 :
11331: GO 12357
11333: LD_INT 2
11335: DOUBLE
11336: EQUAL
11337: IFTRUE 11341
11339: GO 11835
11341: POP
// begin ruBaseArea := ruBaseWestArea ;
11342: LD_ADDR_EXP 66
11346: PUSH
11347: LD_INT 28
11349: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11350: LD_ADDR_EXP 72
11354: PUSH
11355: LD_INT 28
11357: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11358: LD_ADDR_EXP 76
11362: PUSH
11363: LD_INT 0
11365: PUSH
11366: LD_INT 49
11368: PUSH
11369: LD_INT 74
11371: PUSH
11372: LD_INT 3
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 4
11383: PUSH
11384: LD_INT 73
11386: PUSH
11387: LD_INT 88
11389: PUSH
11390: LD_INT 5
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 4
11401: PUSH
11402: LD_INT 56
11404: PUSH
11405: LD_INT 62
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 29
11419: PUSH
11420: LD_INT 43
11422: PUSH
11423: LD_INT 68
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 43
11440: PUSH
11441: LD_INT 79
11443: PUSH
11444: LD_INT 5
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 28
11455: PUSH
11456: LD_INT 60
11458: PUSH
11459: LD_INT 75
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: LD_INT 87
11479: PUSH
11480: LD_INT 1
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 26
11491: PUSH
11492: LD_INT 45
11494: PUSH
11495: LD_INT 67
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 17
11509: PUSH
11510: LD_INT 47
11512: PUSH
11513: LD_INT 84
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 18
11527: PUSH
11528: LD_INT 46
11530: PUSH
11531: LD_INT 87
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 26
11545: PUSH
11546: LD_INT 41
11548: PUSH
11549: LD_INT 64
11551: PUSH
11552: LD_INT 5
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 6
11563: PUSH
11564: LD_INT 42
11566: PUSH
11567: LD_INT 74
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 21
11581: PUSH
11582: LD_INT 54
11584: PUSH
11585: LD_INT 91
11587: PUSH
11588: LD_INT 5
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 50
11602: PUSH
11603: LD_INT 83
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 24
11617: PUSH
11618: LD_INT 50
11620: PUSH
11621: LD_INT 90
11623: PUSH
11624: LD_INT 0
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 33
11635: PUSH
11636: LD_INT 51
11638: PUSH
11639: LD_INT 61
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 33
11653: PUSH
11654: LD_INT 42
11656: PUSH
11657: LD_INT 60
11659: PUSH
11660: LD_INT 3
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 33
11671: PUSH
11672: LD_INT 36
11674: PUSH
11675: LD_INT 58
11677: PUSH
11678: LD_INT 3
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 33
11689: PUSH
11690: LD_INT 39
11692: PUSH
11693: LD_INT 59
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 33
11707: PUSH
11708: LD_INT 61
11710: PUSH
11711: LD_INT 64
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 33
11725: PUSH
11726: LD_INT 63
11728: PUSH
11729: LD_INT 90
11731: PUSH
11732: LD_INT 5
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 33
11743: PUSH
11744: LD_INT 64
11746: PUSH
11747: LD_INT 88
11749: PUSH
11750: LD_INT 5
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 33
11761: PUSH
11762: LD_INT 72
11764: PUSH
11765: LD_INT 82
11767: PUSH
11768: LD_INT 5
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11802: LD_ADDR_EXP 74
11806: PUSH
11807: LD_INT 45
11809: PUSH
11810: LD_INT 75
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11817: LD_ADDR_EXP 82
11821: PUSH
11822: LD_INT 31
11824: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11825: LD_ADDR_EXP 84
11829: PUSH
11830: LD_INT 37
11832: ST_TO_ADDR
// end ; 3 :
11833: GO 12357
11835: LD_INT 3
11837: DOUBLE
11838: EQUAL
11839: IFTRUE 11843
11841: GO 12356
11843: POP
// begin ruBaseArea := ruBaseEastArea ;
11844: LD_ADDR_EXP 66
11848: PUSH
11849: LD_INT 27
11851: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11852: LD_ADDR_EXP 72
11856: PUSH
11857: LD_INT 27
11859: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11860: LD_ADDR_EXP 76
11864: PUSH
11865: LD_INT 0
11867: PUSH
11868: LD_INT 152
11870: PUSH
11871: LD_INT 72
11873: PUSH
11874: LD_INT 4
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 4
11885: PUSH
11886: LD_INT 139
11888: PUSH
11889: LD_INT 69
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 4
11903: PUSH
11904: LD_INT 142
11906: PUSH
11907: LD_INT 56
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 29
11921: PUSH
11922: LD_INT 152
11924: PUSH
11925: LD_INT 85
11927: PUSH
11928: LD_INT 3
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 30
11939: PUSH
11940: LD_INT 156
11942: PUSH
11943: LD_INT 92
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 28
11957: PUSH
11958: LD_INT 157
11960: PUSH
11961: LD_INT 96
11963: PUSH
11964: LD_INT 4
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 161
11978: PUSH
11979: LD_INT 74
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 21
11993: PUSH
11994: LD_INT 157
11996: PUSH
11997: LD_INT 74
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 16
12011: PUSH
12012: LD_INT 161
12014: PUSH
12015: LD_INT 77
12017: PUSH
12018: LD_INT 0
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 24
12029: PUSH
12030: LD_INT 165
12032: PUSH
12033: LD_INT 78
12035: PUSH
12036: LD_INT 5
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 17
12047: PUSH
12048: LD_INT 164
12050: PUSH
12051: LD_INT 74
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 6
12065: PUSH
12066: LD_INT 164
12068: PUSH
12069: LD_INT 95
12071: PUSH
12072: LD_INT 5
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 18
12083: PUSH
12084: LD_INT 161
12086: PUSH
12087: LD_INT 70
12089: PUSH
12090: LD_INT 3
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 26
12101: PUSH
12102: LD_INT 155
12104: PUSH
12105: LD_INT 87
12107: PUSH
12108: LD_INT 0
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 26
12119: PUSH
12120: LD_INT 159
12122: PUSH
12123: LD_INT 95
12125: PUSH
12126: LD_INT 3
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 26
12137: PUSH
12138: LD_INT 167
12140: PUSH
12141: LD_INT 98
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 33
12155: PUSH
12156: LD_INT 152
12158: PUSH
12159: LD_INT 89
12161: PUSH
12162: LD_INT 1
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 33
12173: PUSH
12174: LD_INT 134
12176: PUSH
12177: LD_INT 61
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 33
12191: PUSH
12192: LD_INT 156
12194: PUSH
12195: LD_INT 62
12197: PUSH
12198: LD_INT 3
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 33
12209: PUSH
12210: LD_INT 171
12212: PUSH
12213: LD_INT 97
12215: PUSH
12216: LD_INT 5
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 33
12227: PUSH
12228: LD_INT 169
12230: PUSH
12231: LD_INT 103
12233: PUSH
12234: LD_INT 5
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 33
12245: PUSH
12246: LD_INT 158
12248: PUSH
12249: LD_INT 65
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 144
12266: PUSH
12267: LD_INT 53
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: LD_INT 150
12284: PUSH
12285: LD_INT 81
12287: PUSH
12288: LD_INT 1
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12323: LD_ADDR_EXP 74
12327: PUSH
12328: LD_INT 145
12330: PUSH
12331: LD_INT 71
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12338: LD_ADDR_EXP 82
12342: PUSH
12343: LD_INT 29
12345: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12346: LD_ADDR_EXP 84
12350: PUSH
12351: LD_INT 35
12353: ST_TO_ADDR
// end ; end ;
12354: GO 12357
12356: POP
// ruScriptActive := true ;
12357: LD_ADDR_EXP 14
12361: PUSH
12362: LD_INT 1
12364: ST_TO_ADDR
// end ;
12365: LD_VAR 0 3
12369: RET
// export function RussianBase2 ( group , option ) ; begin
12370: LD_INT 0
12372: PPUSH
// case option of 1 :
12373: LD_VAR 0 2
12377: PUSH
12378: LD_INT 1
12380: DOUBLE
12381: EQUAL
12382: IFTRUE 12386
12384: GO 12842
12386: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12387: LD_ADDR_EXP 67
12391: PUSH
12392: LD_INT 26
12394: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12395: LD_ADDR_EXP 73
12399: PUSH
12400: LD_INT 26
12402: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12403: LD_ADDR_EXP 77
12407: PUSH
12408: LD_INT 0
12410: PUSH
12411: LD_INT 104
12413: PUSH
12414: LD_INT 110
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 4
12428: PUSH
12429: LD_INT 98
12431: PUSH
12432: LD_INT 90
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 29
12446: PUSH
12447: LD_INT 103
12449: PUSH
12450: LD_INT 114
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 99
12467: PUSH
12468: LD_INT 114
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 28
12482: PUSH
12483: LD_INT 100
12485: PUSH
12486: LD_INT 112
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 92
12503: PUSH
12504: LD_INT 101
12506: PUSH
12507: LD_INT 0
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 26
12518: PUSH
12519: LD_INT 97
12521: PUSH
12522: LD_INT 116
12524: PUSH
12525: LD_INT 5
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 17
12536: PUSH
12537: LD_INT 96
12539: PUSH
12540: LD_INT 101
12542: PUSH
12543: LD_INT 4
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 18
12554: PUSH
12555: LD_INT 88
12557: PUSH
12558: LD_INT 97
12560: PUSH
12561: LD_INT 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 26
12572: PUSH
12573: LD_INT 106
12575: PUSH
12576: LD_INT 92
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 6
12590: PUSH
12591: LD_INT 93
12593: PUSH
12594: LD_INT 110
12596: PUSH
12597: LD_INT 0
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 89
12611: PUSH
12612: LD_INT 101
12614: PUSH
12615: LD_INT 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 16
12626: PUSH
12627: LD_INT 95
12629: PUSH
12630: LD_INT 104
12632: PUSH
12633: LD_INT 4
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 24
12644: PUSH
12645: LD_INT 92
12647: PUSH
12648: LD_INT 105
12650: PUSH
12651: LD_INT 0
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 33
12662: PUSH
12663: LD_INT 88
12665: PUSH
12666: LD_INT 89
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 33
12680: PUSH
12681: LD_INT 86
12683: PUSH
12684: LD_INT 90
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 33
12698: PUSH
12699: LD_INT 85
12701: PUSH
12702: LD_INT 99
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 33
12716: PUSH
12717: LD_INT 85
12719: PUSH
12720: LD_INT 107
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 33
12734: PUSH
12735: LD_INT 105
12737: PUSH
12738: LD_INT 99
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 33
12752: PUSH
12753: LD_INT 102
12755: PUSH
12756: LD_INT 92
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 33
12770: PUSH
12771: LD_INT 105
12773: PUSH
12774: LD_INT 92
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12809: LD_ADDR_EXP 75
12813: PUSH
12814: LD_INT 98
12816: PUSH
12817: LD_INT 107
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12824: LD_ADDR_EXP 83
12828: PUSH
12829: LD_INT 30
12831: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12832: LD_ADDR_EXP 85
12836: PUSH
12837: LD_INT 36
12839: ST_TO_ADDR
// end ; 2 :
12840: GO 13809
12842: LD_INT 2
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 13344
12850: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12851: LD_ADDR_EXP 67
12855: PUSH
12856: LD_INT 28
12858: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12859: LD_ADDR_EXP 73
12863: PUSH
12864: LD_INT 28
12866: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12867: LD_ADDR_EXP 77
12871: PUSH
12872: LD_INT 0
12874: PUSH
12875: LD_INT 49
12877: PUSH
12878: LD_INT 74
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 4
12892: PUSH
12893: LD_INT 73
12895: PUSH
12896: LD_INT 88
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 4
12910: PUSH
12911: LD_INT 56
12913: PUSH
12914: LD_INT 62
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: LD_INT 43
12931: PUSH
12932: LD_INT 68
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 43
12949: PUSH
12950: LD_INT 79
12952: PUSH
12953: LD_INT 5
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 60
12967: PUSH
12968: LD_INT 75
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 87
12988: PUSH
12989: LD_INT 1
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 26
13000: PUSH
13001: LD_INT 45
13003: PUSH
13004: LD_INT 67
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 17
13018: PUSH
13019: LD_INT 47
13021: PUSH
13022: LD_INT 84
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 46
13039: PUSH
13040: LD_INT 87
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 41
13057: PUSH
13058: LD_INT 64
13060: PUSH
13061: LD_INT 5
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 6
13072: PUSH
13073: LD_INT 42
13075: PUSH
13076: LD_INT 74
13078: PUSH
13079: LD_INT 1
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 54
13093: PUSH
13094: LD_INT 91
13096: PUSH
13097: LD_INT 5
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 16
13108: PUSH
13109: LD_INT 50
13111: PUSH
13112: LD_INT 83
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 24
13126: PUSH
13127: LD_INT 50
13129: PUSH
13130: LD_INT 90
13132: PUSH
13133: LD_INT 0
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 33
13144: PUSH
13145: LD_INT 51
13147: PUSH
13148: LD_INT 61
13150: PUSH
13151: LD_INT 3
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 33
13162: PUSH
13163: LD_INT 42
13165: PUSH
13166: LD_INT 60
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 36
13183: PUSH
13184: LD_INT 58
13186: PUSH
13187: LD_INT 3
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 33
13198: PUSH
13199: LD_INT 39
13201: PUSH
13202: LD_INT 59
13204: PUSH
13205: LD_INT 3
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 33
13216: PUSH
13217: LD_INT 61
13219: PUSH
13220: LD_INT 64
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 33
13234: PUSH
13235: LD_INT 63
13237: PUSH
13238: LD_INT 90
13240: PUSH
13241: LD_INT 5
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 33
13252: PUSH
13253: LD_INT 64
13255: PUSH
13256: LD_INT 88
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 33
13270: PUSH
13271: LD_INT 72
13273: PUSH
13274: LD_INT 82
13276: PUSH
13277: LD_INT 5
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13311: LD_ADDR_EXP 74
13315: PUSH
13316: LD_INT 45
13318: PUSH
13319: LD_INT 75
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13326: LD_ADDR_EXP 83
13330: PUSH
13331: LD_INT 31
13333: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13334: LD_ADDR_EXP 85
13338: PUSH
13339: LD_INT 37
13341: ST_TO_ADDR
// end ; 3 :
13342: GO 13809
13344: LD_INT 3
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13808
13352: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13353: LD_ADDR_EXP 67
13357: PUSH
13358: LD_INT 27
13360: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13361: LD_ADDR_EXP 73
13365: PUSH
13366: LD_INT 27
13368: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13369: LD_ADDR_EXP 77
13373: PUSH
13374: LD_INT 0
13376: PUSH
13377: LD_INT 152
13379: PUSH
13380: LD_INT 72
13382: PUSH
13383: LD_INT 4
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 4
13394: PUSH
13395: LD_INT 139
13397: PUSH
13398: LD_INT 69
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 4
13412: PUSH
13413: LD_INT 142
13415: PUSH
13416: LD_INT 56
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 29
13430: PUSH
13431: LD_INT 152
13433: PUSH
13434: LD_INT 85
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 30
13448: PUSH
13449: LD_INT 156
13451: PUSH
13452: LD_INT 92
13454: PUSH
13455: LD_INT 3
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 28
13466: PUSH
13467: LD_INT 157
13469: PUSH
13470: LD_INT 96
13472: PUSH
13473: LD_INT 4
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: LD_INT 161
13487: PUSH
13488: LD_INT 74
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 157
13505: PUSH
13506: LD_INT 74
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 16
13520: PUSH
13521: LD_INT 161
13523: PUSH
13524: LD_INT 77
13526: PUSH
13527: LD_INT 0
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 24
13538: PUSH
13539: LD_INT 165
13541: PUSH
13542: LD_INT 78
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 17
13556: PUSH
13557: LD_INT 164
13559: PUSH
13560: LD_INT 74
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 6
13574: PUSH
13575: LD_INT 164
13577: PUSH
13578: LD_INT 95
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 18
13592: PUSH
13593: LD_INT 161
13595: PUSH
13596: LD_INT 70
13598: PUSH
13599: LD_INT 3
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 26
13610: PUSH
13611: LD_INT 155
13613: PUSH
13614: LD_INT 87
13616: PUSH
13617: LD_INT 0
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 159
13631: PUSH
13632: LD_INT 95
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 26
13646: PUSH
13647: LD_INT 167
13649: PUSH
13650: LD_INT 98
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 33
13664: PUSH
13665: LD_INT 152
13667: PUSH
13668: LD_INT 89
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 33
13682: PUSH
13683: LD_INT 134
13685: PUSH
13686: LD_INT 61
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 33
13700: PUSH
13701: LD_INT 156
13703: PUSH
13704: LD_INT 62
13706: PUSH
13707: LD_INT 3
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 33
13718: PUSH
13719: LD_INT 171
13721: PUSH
13722: LD_INT 97
13724: PUSH
13725: LD_INT 5
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 33
13736: PUSH
13737: LD_INT 169
13739: PUSH
13740: LD_INT 103
13742: PUSH
13743: LD_INT 5
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13775: LD_ADDR_EXP 75
13779: PUSH
13780: LD_INT 145
13782: PUSH
13783: LD_INT 71
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13790: LD_ADDR_EXP 83
13794: PUSH
13795: LD_INT 29
13797: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13798: LD_ADDR_EXP 85
13802: PUSH
13803: LD_INT 35
13805: ST_TO_ADDR
// end ; end ;
13806: GO 13809
13808: POP
// ruScriptActive2 := true ;
13809: LD_ADDR_EXP 15
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// end ;
13817: LD_VAR 0 3
13821: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13822: LD_EXP 14
13826: PUSH
13827: LD_EXP 59
13831: PPUSH
13832: CALL 57319 0 1
13836: AND
13837: IFFALSE 16419
13839: GO 13841
13841: DISABLE
13842: LD_INT 0
13844: PPUSH
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
// begin enable ;
13860: ENABLE
// if ruTech then
13861: LD_EXP 65
13865: IFFALSE 14019
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13867: LD_ADDR_VAR 0 4
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 50
13884: PUSH
13885: EMPTY
13886: LIST
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 30
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 30
13903: PUSH
13904: LD_INT 7
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 30
13913: PUSH
13914: LD_INT 8
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: ST_TO_ADDR
// if lab then
13937: LD_VAR 0 4
13941: IFFALSE 14019
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
13943: LD_VAR 0 4
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PPUSH
13952: CALL_OW 461
13956: PUSH
13957: LD_INT 2
13959: EQUAL
13960: IFFALSE 14019
// begin for i in ruTech do
13962: LD_ADDR_VAR 0 1
13966: PUSH
13967: LD_EXP 65
13971: PUSH
13972: FOR_IN
13973: IFFALSE 14017
// if CanBeResearched ( lab [ 1 ] , i ) then
13975: LD_VAR 0 4
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 430
13993: IFFALSE 14015
// begin ComResearch ( lab [ 1 ] , i ) ;
13995: LD_VAR 0 4
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: LD_VAR 0 1
14008: PPUSH
14009: CALL_OW 124
// break ;
14013: GO 14017
// end ;
14015: GO 13972
14017: POP
14018: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
14019: LD_ADDR_VAR 0 14
14023: PUSH
14024: LD_EXP 66
14028: PPUSH
14029: LD_INT 22
14031: PUSH
14032: LD_INT 3
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 50
14051: PUSH
14052: EMPTY
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 70
14064: ST_TO_ADDR
// if fac then
14065: LD_VAR 0 14
14069: IFFALSE 14664
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14071: LD_EXP 63
14075: PPUSH
14076: LD_INT 3
14078: PUSH
14079: LD_INT 60
14081: PUSH
14082: EMPTY
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 3
14091: PUSH
14092: LD_INT 25
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 72
14114: IFFALSE 14255
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_EXP 63
14125: PPUSH
14126: LD_INT 3
14128: PUSH
14129: LD_INT 60
14131: PUSH
14132: EMPTY
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 3
14141: PUSH
14142: LD_INT 25
14144: PUSH
14145: LD_INT 3
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 72
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14253
// begin SetTag ( i , tMech ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 7
14175: PPUSH
14176: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 310
14189: PUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 310
14199: PUSH
14200: LD_VAR 0 14
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: NONEQUAL
14209: AND
14210: IFFALSE 14221
// ComExitBuilding ( i ) ;
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14221: LD_VAR 0 1
14225: PPUSH
14226: LD_VAR 0 14
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_INT 3
14246: PPUSH
14247: CALL_OW 183
// end ;
14251: GO 14165
14253: POP
14254: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14255: LD_EXP 63
14259: PPUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 120
14285: PUSH
14286: LD_INT 7
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 50
14295: PUSH
14296: EMPTY
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PPUSH
14305: CALL_OW 72
14309: IFFALSE 14396
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14311: LD_ADDR_VAR 0 1
14315: PUSH
14316: LD_EXP 63
14320: PPUSH
14321: LD_INT 25
14323: PUSH
14324: LD_INT 3
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: LD_INT 54
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 120
14346: PUSH
14347: LD_INT 7
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 50
14356: PUSH
14357: EMPTY
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 72
14370: PUSH
14371: FOR_IN
14372: IFFALSE 14394
// ComEnterUnit ( i , fac [ 1 ] ) ;
14374: LD_VAR 0 1
14378: PPUSH
14379: LD_VAR 0 14
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: PPUSH
14388: CALL_OW 120
14392: GO 14371
14394: POP
14395: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14396: LD_VAR 0 14
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: CALL_OW 461
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: IFFALSE 14664
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14415: LD_ADDR_VAR 0 15
14419: PUSH
14420: LD_EXP 66
14424: PPUSH
14425: LD_INT 2
14427: PUSH
14428: LD_INT 30
14430: PUSH
14431: LD_INT 32
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 30
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 35
14455: PUSH
14456: LD_INT 0
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 70
14471: ST_TO_ADDR
// if emptyTowers then
14472: LD_VAR 0 15
14476: IFFALSE 14526
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14478: LD_ADDR_VAR 0 16
14482: PUSH
14483: LD_VAR 0 15
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: LD_EXP 66
14496: PPUSH
14497: CALL 65564 0 2
14501: ST_TO_ADDR
// if weapon then
14502: LD_VAR 0 16
14506: IFFALSE 14526
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14508: LD_VAR 0 15
14512: PUSH
14513: LD_INT 1
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 16
14521: PPUSH
14522: CALL_OW 148
// end ; if ruConstructList then
14526: LD_EXP 70
14530: IFFALSE 14664
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14532: LD_VAR 0 14
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: LD_EXP 70
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PUSH
14550: LD_INT 1
14552: ARRAY
14553: PPUSH
14554: LD_EXP 70
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PUSH
14563: LD_INT 2
14565: ARRAY
14566: PPUSH
14567: LD_EXP 70
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PUSH
14576: LD_INT 3
14578: ARRAY
14579: PPUSH
14580: LD_EXP 70
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_INT 4
14591: ARRAY
14592: PPUSH
14593: CALL_OW 448
14597: IFFALSE 14664
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14599: LD_VAR 0 14
14603: PUSH
14604: LD_INT 1
14606: ARRAY
14607: PPUSH
14608: LD_EXP 70
14612: PUSH
14613: LD_INT 1
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PPUSH
14621: LD_EXP 70
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: PPUSH
14634: LD_EXP 70
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PUSH
14643: LD_INT 3
14645: ARRAY
14646: PPUSH
14647: LD_EXP 70
14651: PUSH
14652: LD_INT 1
14654: ARRAY
14655: PUSH
14656: LD_INT 4
14658: ARRAY
14659: PPUSH
14660: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_EXP 66
14673: PPUSH
14674: LD_INT 21
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 3
14686: PUSH
14687: LD_INT 57
14689: PUSH
14690: EMPTY
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 3
14699: PUSH
14700: LD_INT 24
14702: PUSH
14703: LD_INT 1000
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 70
14723: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14724: LD_ADDR_VAR 0 8
14728: PUSH
14729: LD_EXP 72
14733: PPUSH
14734: CALL_OW 435
14738: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14739: LD_ADDR_VAR 0 9
14743: PUSH
14744: LD_EXP 59
14748: PPUSH
14749: LD_INT 25
14751: PUSH
14752: LD_INT 4
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: EMPTY
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 72
14773: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14774: LD_ADDR_VAR 0 4
14778: PUSH
14779: LD_EXP 66
14783: PPUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 30
14789: PUSH
14790: LD_INT 6
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 30
14799: PUSH
14800: LD_INT 7
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 30
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PPUSH
14823: CALL_OW 70
14827: ST_TO_ADDR
// if sci then
14828: LD_VAR 0 9
14832: IFFALSE 14993
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14834: LD_ADDR_VAR 0 11
14838: PUSH
14839: LD_EXP 59
14843: PPUSH
14844: LD_INT 95
14846: PUSH
14847: LD_EXP 66
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 120
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 72
14874: ST_TO_ADDR
// if hurtUnits then
14875: LD_VAR 0 11
14879: IFFALSE 14940
// begin for i in sci do
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_VAR 0 9
14890: PUSH
14891: FOR_IN
14892: IFFALSE 14936
// if IsInUnit ( i ) then
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 310
14903: IFFALSE 14916
// ComExitBuilding ( i ) else
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 122
14914: GO 14934
// ComHeal ( i , hurtUnits [ 1 ] ) ;
14916: LD_VAR 0 1
14920: PPUSH
14921: LD_VAR 0 11
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: PPUSH
14930: CALL_OW 128
14934: GO 14891
14936: POP
14937: POP
// end else
14938: GO 14993
// if lab then
14940: LD_VAR 0 4
14944: IFFALSE 14993
// begin for i in sci do
14946: LD_ADDR_VAR 0 1
14950: PUSH
14951: LD_VAR 0 9
14955: PUSH
14956: FOR_IN
14957: IFFALSE 14991
// if not IsInUnit ( i ) then
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 310
14968: NOT
14969: IFFALSE 14989
// ComEnterUnit ( i , lab [ 1 ] ) ;
14971: LD_VAR 0 1
14975: PPUSH
14976: LD_VAR 0 4
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: PPUSH
14985: CALL_OW 120
14989: GO 14956
14991: POP
14992: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_EXP 59
15002: PPUSH
15003: LD_INT 25
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 72
15017: ST_TO_ADDR
// if eng then
15018: LD_VAR 0 5
15022: IFFALSE 15807
// begin for i in eng do
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: LD_VAR 0 5
15033: PUSH
15034: FOR_IN
15035: IFFALSE 15805
// begin tag := GetTag ( i ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: CALL_OW 110
15051: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 256
15061: PUSH
15062: LD_INT 800
15064: LESS
15065: PUSH
15066: LD_VAR 0 6
15070: PUSH
15071: LD_INT 1
15073: NONEQUAL
15074: AND
15075: IFFALSE 15125
// begin SetTag ( i , tHeal ) ;
15077: LD_VAR 0 1
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15089: LD_VAR 0 1
15093: PPUSH
15094: LD_EXP 74
15098: PUSH
15099: LD_INT 1
15101: ARRAY
15102: PPUSH
15103: LD_EXP 74
15107: PUSH
15108: LD_INT 2
15110: ARRAY
15111: PPUSH
15112: CALL_OW 111
// AddComHold ( i ) ;
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15125: LD_VAR 0 6
15129: PUSH
15130: LD_INT 1
15132: EQUAL
15133: PUSH
15134: LD_VAR 0 1
15138: PPUSH
15139: CALL_OW 256
15143: PUSH
15144: LD_INT 1000
15146: EQUAL
15147: AND
15148: IFFALSE 15162
// SetTag ( i , 0 ) ;
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_INT 0
15157: PPUSH
15158: CALL_OW 109
// if not tag then
15162: LD_VAR 0 6
15166: NOT
15167: IFFALSE 15339
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15169: LD_ADDR_VAR 0 3
15173: PUSH
15174: LD_EXP 66
15178: PPUSH
15179: LD_INT 57
15181: PUSH
15182: EMPTY
15183: LIST
15184: PPUSH
15185: CALL_OW 70
15189: ST_TO_ADDR
// if undone then
15190: LD_VAR 0 3
15194: IFFALSE 15216
// begin ComComplete ( i , undone [ 1 ] ) ;
15196: LD_VAR 0 1
15200: PPUSH
15201: LD_VAR 0 3
15205: PUSH
15206: LD_INT 1
15208: ARRAY
15209: PPUSH
15210: CALL 63417 0 2
// continue ;
15214: GO 15034
// end ; if cr or tmp or Count ( ruBuildings ) then
15216: LD_VAR 0 8
15220: PUSH
15221: LD_VAR 0 2
15225: OR
15226: PUSH
15227: LD_EXP 76
15231: PPUSH
15232: CALL 57319 0 1
15236: OR
15237: IFFALSE 15313
// begin if IsInUnit ( i ) then
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 310
15248: IFFALSE 15259
// ComExitBuilding ( i ) ;
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 122
// if tmp then
15259: LD_VAR 0 2
15263: IFFALSE 15279
// SetTag ( i , tRepair ) else
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 3
15272: PPUSH
15273: CALL_OW 109
15277: GO 15311
// if cr then
15279: LD_VAR 0 8
15283: IFFALSE 15299
// SetTag ( i , tCrates ) else
15285: LD_VAR 0 1
15289: PPUSH
15290: LD_INT 2
15292: PPUSH
15293: CALL_OW 109
15297: GO 15311
// SetTag ( i , tBuild ) ;
15299: LD_VAR 0 1
15303: PPUSH
15304: LD_INT 5
15306: PPUSH
15307: CALL_OW 109
// end else
15311: GO 15339
// if not IsInUnit ( i ) then
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 310
15322: NOT
15323: IFFALSE 15339
// ComEnterUnit ( i , ruBase ) ;
15325: LD_VAR 0 1
15329: PPUSH
15330: LD_EXP 68
15334: PPUSH
15335: CALL_OW 120
// end ; if tag = tRepair then
15339: LD_VAR 0 6
15343: PUSH
15344: LD_INT 3
15346: EQUAL
15347: IFFALSE 15453
// begin if IsInUnit ( i ) then
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 310
15358: IFFALSE 15371
// begin ComExitBuilding ( i ) ;
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 122
// continue ;
15369: GO 15034
// end ; if not tmp then
15371: LD_VAR 0 2
15375: NOT
15376: IFFALSE 15392
// begin SetTag ( i , 0 ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: LD_INT 0
15385: PPUSH
15386: CALL_OW 109
// continue ;
15390: GO 15034
// end ; if not HasTask ( i ) then
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 314
15401: NOT
15402: IFFALSE 15422
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15404: LD_VAR 0 1
15408: PPUSH
15409: LD_VAR 0 2
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: PPUSH
15418: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_EXP 66
15431: PPUSH
15432: CALL_OW 308
15436: NOT
15437: IFFALSE 15453
// ComMoveToArea ( i , ruBaseArea ) ;
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_EXP 66
15448: PPUSH
15449: CALL_OW 113
// end ; if tag = tBuild then
15453: LD_VAR 0 6
15457: PUSH
15458: LD_INT 5
15460: EQUAL
15461: IFFALSE 15660
// begin if IsInUnit ( i ) then
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 310
15472: IFFALSE 15485
// begin ComExitBuilding ( i ) ;
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 122
// continue ;
15483: GO 15034
// end ; if not Count ( ruBuildings ) then
15485: LD_EXP 76
15489: PPUSH
15490: CALL 57319 0 1
15494: NOT
15495: IFFALSE 15513
// begin SetTag ( i , 0 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 0
15504: PPUSH
15505: CALL_OW 109
// continue ;
15509: GO 15034
// end else
15511: GO 15552
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15513: LD_EXP 68
15517: PPUSH
15518: LD_EXP 76
15522: PUSH
15523: LD_INT 1
15525: ARRAY
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: CALL 96857 0 2
15535: NOT
15536: IFFALSE 15552
// begin SetTag ( i , 0 ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_INT 0
15545: PPUSH
15546: CALL_OW 109
// continue ;
15550: GO 15034
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15552: LD_ADDR_VAR 0 3
15556: PUSH
15557: LD_EXP 66
15561: PPUSH
15562: LD_INT 57
15564: PUSH
15565: EMPTY
15566: LIST
15567: PPUSH
15568: CALL_OW 70
15572: ST_TO_ADDR
// if undone then
15573: LD_VAR 0 3
15577: IFFALSE 15599
// begin ComComplete ( i , undone [ 1 ] ) ;
15579: LD_VAR 0 1
15583: PPUSH
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PPUSH
15593: CALL 63417 0 2
// continue ;
15597: GO 15034
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15599: LD_VAR 0 1
15603: PPUSH
15604: LD_EXP 76
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PUSH
15613: LD_INT 1
15615: ARRAY
15616: PPUSH
15617: LD_EXP 76
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PUSH
15626: LD_INT 2
15628: ARRAY
15629: PPUSH
15630: LD_EXP 76
15634: PUSH
15635: LD_INT 1
15637: ARRAY
15638: PUSH
15639: LD_INT 3
15641: ARRAY
15642: PPUSH
15643: LD_EXP 76
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PUSH
15652: LD_INT 4
15654: ARRAY
15655: PPUSH
15656: CALL_OW 145
// end ; if tag = tCrates then
15660: LD_VAR 0 6
15664: PUSH
15665: LD_INT 2
15667: EQUAL
15668: IFFALSE 15803
// begin if IsInUnit ( i ) then
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 310
15679: IFFALSE 15692
// begin ComExitBuilding ( i ) ;
15681: LD_VAR 0 1
15685: PPUSH
15686: CALL_OW 122
// continue ;
15690: GO 15034
// end ; if not cr then
15692: LD_VAR 0 8
15696: NOT
15697: IFFALSE 15713
// begin SetTag ( i , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 109
// continue ;
15711: GO 15034
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 314
15722: NOT
15723: PUSH
15724: LD_INT 81
15726: PUSH
15727: LD_INT 3
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 92
15736: PUSH
15737: LD_VAR 0 8
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PUSH
15746: LD_VAR 0 8
15750: PUSH
15751: LD_INT 2
15753: ARRAY
15754: PUSH
15755: LD_INT 12
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 69
15772: NOT
15773: AND
15774: IFFALSE 15803
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15776: LD_VAR 0 1
15780: PPUSH
15781: LD_VAR 0 8
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: LD_VAR 0 8
15794: PUSH
15795: LD_INT 2
15797: ARRAY
15798: PPUSH
15799: CALL_OW 117
// end ; end ;
15803: GO 15034
15805: POP
15806: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15807: LD_ADDR_VAR 0 10
15811: PUSH
15812: LD_EXP 59
15816: PPUSH
15817: LD_INT 2
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 9
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 50
15847: PUSH
15848: EMPTY
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 72
15859: PUSH
15860: LD_EXP 61
15864: UNION
15865: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15866: LD_ADDR_VAR 0 12
15870: PUSH
15871: LD_EXP 66
15875: PPUSH
15876: LD_INT 81
15878: PUSH
15879: LD_INT 3
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 70
15890: ST_TO_ADDR
// if sol then
15891: LD_VAR 0 10
15895: IFFALSE 16419
// begin if enemyInBase then
15897: LD_VAR 0 12
15901: IFFALSE 16044
// begin for i in sol do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 10
15912: PUSH
15913: FOR_IN
15914: IFFALSE 16040
// begin tw := IsInUnit ( i ) ;
15916: LD_ADDR_VAR 0 7
15920: PUSH
15921: LD_VAR 0 1
15925: PPUSH
15926: CALL_OW 310
15930: ST_TO_ADDR
// if tw then
15931: LD_VAR 0 7
15935: IFFALSE 16014
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15937: LD_VAR 0 7
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 101
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: LD_INT 30
15967: PUSH
15968: LD_INT 32
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 30
15977: PUSH
15978: LD_INT 31
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: IN
16000: NOT
16001: IFFALSE 16012
// ComExitBuilding ( i ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: CALL_OW 122
// end else
16012: GO 16038
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_VAR 0 12
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 74
16033: PPUSH
16034: CALL_OW 115
// end ;
16038: GO 15913
16040: POP
16041: POP
// end else
16042: GO 16419
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16044: LD_ADDR_VAR 0 13
16048: PUSH
16049: LD_EXP 66
16053: PPUSH
16054: LD_INT 3
16056: PUSH
16057: LD_INT 62
16059: PUSH
16060: EMPTY
16061: LIST
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 30
16072: PUSH
16073: LD_INT 32
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 4
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 30
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 30
16102: PUSH
16103: LD_INT 31
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 70
16125: ST_TO_ADDR
// if empty then
16126: LD_VAR 0 13
16130: IFFALSE 16147
// empty := ReverseArray ( empty ) ;
16132: LD_ADDR_VAR 0 13
16136: PUSH
16137: LD_VAR 0 13
16141: PPUSH
16142: CALL 88195 0 1
16146: ST_TO_ADDR
// for i in sol do
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_VAR 0 10
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16417
// begin tag := GetTag ( i ) ;
16160: LD_ADDR_VAR 0 6
16164: PUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: CALL_OW 110
16174: ST_TO_ADDR
// if tag = tMech then
16175: LD_VAR 0 6
16179: PUSH
16180: LD_INT 7
16182: EQUAL
16183: IFFALSE 16187
// continue ;
16185: GO 16157
// if GetLives ( i ) < 1000 and tag <> tHeal then
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 256
16196: PUSH
16197: LD_INT 1000
16199: LESS
16200: PUSH
16201: LD_VAR 0 6
16205: PUSH
16206: LD_INT 1
16208: NONEQUAL
16209: AND
16210: IFFALSE 16262
// begin SetTag ( i , tHeal ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16224: LD_VAR 0 1
16228: PPUSH
16229: LD_EXP 74
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PPUSH
16238: LD_EXP 74
16242: PUSH
16243: LD_INT 2
16245: ARRAY
16246: PPUSH
16247: CALL_OW 111
// AddComHold ( i ) ;
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 200
// continue ;
16260: GO 16157
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 256
16271: PUSH
16272: LD_INT 1000
16274: EQUAL
16275: PUSH
16276: LD_VAR 0 6
16280: PUSH
16281: LD_INT 1
16283: EQUAL
16284: AND
16285: IFFALSE 16301
// begin SetTag ( i , 0 ) ;
16287: LD_VAR 0 1
16291: PPUSH
16292: LD_INT 0
16294: PPUSH
16295: CALL_OW 109
// continue ;
16299: GO 16157
// end ; if HasTask ( i ) then
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 314
16310: IFFALSE 16314
// continue ;
16312: GO 16157
// if not IsInUnit ( i ) and not tag and empty then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 310
16323: NOT
16324: PUSH
16325: LD_VAR 0 6
16329: NOT
16330: AND
16331: PUSH
16332: LD_VAR 0 13
16336: AND
16337: IFFALSE 16415
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16339: LD_VAR 0 1
16343: PPUSH
16344: LD_VAR 0 13
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PPUSH
16353: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16357: LD_VAR 0 13
16361: PUSH
16362: LD_INT 1
16364: ARRAY
16365: PPUSH
16366: CALL_OW 266
16370: PUSH
16371: LD_INT 5
16373: EQUAL
16374: PUSH
16375: LD_INT 50
16377: PPUSH
16378: CALL_OW 13
16382: AND
16383: IFFALSE 16397
// AddComChangeProfession ( i , class_bazooker ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 9
16392: PPUSH
16393: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16397: LD_ADDR_VAR 0 13
16401: PUSH
16402: LD_VAR 0 13
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 3
16414: ST_TO_ADDR
// end ; end ;
16415: GO 16157
16417: POP
16418: POP
// end ; end ; end ;
16419: PPOPN 16
16421: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16422: LD_EXP 15
16426: PUSH
16427: LD_EXP 60
16431: PPUSH
16432: CALL 57319 0 1
16436: AND
16437: IFFALSE 19019
16439: GO 16441
16441: DISABLE
16442: LD_INT 0
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// begin enable ;
16460: ENABLE
// if ruTech then
16461: LD_EXP 65
16465: IFFALSE 16619
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16467: LD_ADDR_VAR 0 4
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 3
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 50
16484: PUSH
16485: EMPTY
16486: LIST
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 6
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 30
16503: PUSH
16504: LD_INT 7
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 30
16513: PUSH
16514: LD_INT 8
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 69
16536: ST_TO_ADDR
// if lab then
16537: LD_VAR 0 4
16541: IFFALSE 16619
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16543: LD_VAR 0 4
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: PPUSH
16552: CALL_OW 461
16556: PUSH
16557: LD_INT 2
16559: EQUAL
16560: IFFALSE 16619
// begin for i in ruTech do
16562: LD_ADDR_VAR 0 1
16566: PUSH
16567: LD_EXP 65
16571: PUSH
16572: FOR_IN
16573: IFFALSE 16617
// if CanBeResearched ( lab [ 1 ] , i ) then
16575: LD_VAR 0 4
16579: PUSH
16580: LD_INT 1
16582: ARRAY
16583: PPUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 430
16593: IFFALSE 16615
// begin ComResearch ( lab [ 1 ] , i ) ;
16595: LD_VAR 0 4
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 124
// break ;
16613: GO 16617
// end ;
16615: GO 16572
16617: POP
16618: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16619: LD_ADDR_VAR 0 14
16623: PUSH
16624: LD_EXP 67
16628: PPUSH
16629: LD_INT 22
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 30
16641: PUSH
16642: LD_INT 3
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 50
16651: PUSH
16652: EMPTY
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 70
16664: ST_TO_ADDR
// if fac then
16665: LD_VAR 0 14
16669: IFFALSE 17264
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16671: LD_EXP 64
16675: PPUSH
16676: LD_INT 3
16678: PUSH
16679: LD_INT 60
16681: PUSH
16682: EMPTY
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: LD_INT 25
16694: PUSH
16695: LD_INT 3
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PPUSH
16710: CALL_OW 72
16714: IFFALSE 16855
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16716: LD_ADDR_VAR 0 1
16720: PUSH
16721: LD_EXP 64
16725: PPUSH
16726: LD_INT 3
16728: PUSH
16729: LD_INT 60
16731: PUSH
16732: EMPTY
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: LD_INT 25
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 72
16764: PUSH
16765: FOR_IN
16766: IFFALSE 16853
// begin SetTag ( i , tMech ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_INT 7
16775: PPUSH
16776: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 310
16789: PUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 310
16799: PUSH
16800: LD_VAR 0 14
16804: PUSH
16805: LD_INT 1
16807: ARRAY
16808: NONEQUAL
16809: AND
16810: IFFALSE 16821
// ComExitBuilding ( i ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16821: LD_VAR 0 1
16825: PPUSH
16826: LD_VAR 0 14
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: LD_INT 3
16846: PPUSH
16847: CALL_OW 183
// end ;
16851: GO 16765
16853: POP
16854: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16855: LD_EXP 64
16859: PPUSH
16860: LD_INT 25
16862: PUSH
16863: LD_INT 3
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 3
16872: PUSH
16873: LD_INT 54
16875: PUSH
16876: EMPTY
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 120
16885: PUSH
16886: LD_INT 7
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 50
16895: PUSH
16896: EMPTY
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PPUSH
16905: CALL_OW 72
16909: IFFALSE 16996
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
16911: LD_ADDR_VAR 0 1
16915: PUSH
16916: LD_EXP 64
16920: PPUSH
16921: LD_INT 25
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: LD_INT 54
16936: PUSH
16937: EMPTY
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 120
16946: PUSH
16947: LD_INT 7
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 50
16956: PUSH
16957: EMPTY
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL_OW 72
16970: PUSH
16971: FOR_IN
16972: IFFALSE 16994
// ComEnterUnit ( i , fac [ 1 ] ) ;
16974: LD_VAR 0 1
16978: PPUSH
16979: LD_VAR 0 14
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: CALL_OW 120
16992: GO 16971
16994: POP
16995: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
16996: LD_VAR 0 14
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PPUSH
17005: CALL_OW 461
17009: PUSH
17010: LD_INT 2
17012: EQUAL
17013: IFFALSE 17264
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
17015: LD_ADDR_VAR 0 15
17019: PUSH
17020: LD_EXP 67
17024: PPUSH
17025: LD_INT 2
17027: PUSH
17028: LD_INT 30
17030: PUSH
17031: LD_INT 32
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 30
17040: PUSH
17041: LD_INT 33
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 35
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 70
17071: ST_TO_ADDR
// if emptyTowers then
17072: LD_VAR 0 15
17076: IFFALSE 17126
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17078: LD_ADDR_VAR 0 16
17082: PUSH
17083: LD_VAR 0 15
17087: PUSH
17088: LD_INT 1
17090: ARRAY
17091: PPUSH
17092: LD_EXP 67
17096: PPUSH
17097: CALL 65564 0 2
17101: ST_TO_ADDR
// if weapon then
17102: LD_VAR 0 16
17106: IFFALSE 17126
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17108: LD_VAR 0 15
17112: PUSH
17113: LD_INT 1
17115: ARRAY
17116: PPUSH
17117: LD_VAR 0 16
17121: PPUSH
17122: CALL_OW 148
// end ; if ruConstructList2 then
17126: LD_EXP 71
17130: IFFALSE 17264
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17132: LD_VAR 0 14
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: PPUSH
17141: LD_EXP 71
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PUSH
17150: LD_INT 1
17152: ARRAY
17153: PPUSH
17154: LD_EXP 71
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PUSH
17163: LD_INT 2
17165: ARRAY
17166: PPUSH
17167: LD_EXP 71
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PUSH
17176: LD_INT 3
17178: ARRAY
17179: PPUSH
17180: LD_EXP 71
17184: PUSH
17185: LD_INT 1
17187: ARRAY
17188: PUSH
17189: LD_INT 4
17191: ARRAY
17192: PPUSH
17193: CALL_OW 448
17197: IFFALSE 17264
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17199: LD_VAR 0 14
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: PPUSH
17208: LD_EXP 71
17212: PUSH
17213: LD_INT 1
17215: ARRAY
17216: PUSH
17217: LD_INT 1
17219: ARRAY
17220: PPUSH
17221: LD_EXP 71
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: PUSH
17230: LD_INT 2
17232: ARRAY
17233: PPUSH
17234: LD_EXP 71
17238: PUSH
17239: LD_INT 1
17241: ARRAY
17242: PUSH
17243: LD_INT 3
17245: ARRAY
17246: PPUSH
17247: LD_EXP 71
17251: PUSH
17252: LD_INT 1
17254: ARRAY
17255: PUSH
17256: LD_INT 4
17258: ARRAY
17259: PPUSH
17260: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17264: LD_ADDR_VAR 0 2
17268: PUSH
17269: LD_EXP 67
17273: PPUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 3
17286: PUSH
17287: LD_INT 57
17289: PUSH
17290: EMPTY
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 3
17299: PUSH
17300: LD_INT 24
17302: PUSH
17303: LD_INT 1000
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 70
17323: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17324: LD_ADDR_VAR 0 8
17328: PUSH
17329: LD_EXP 73
17333: PPUSH
17334: CALL_OW 435
17338: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17339: LD_ADDR_VAR 0 9
17343: PUSH
17344: LD_EXP 60
17348: PPUSH
17349: LD_INT 25
17351: PUSH
17352: LD_INT 4
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 50
17361: PUSH
17362: EMPTY
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 72
17373: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: LD_EXP 67
17383: PPUSH
17384: LD_INT 2
17386: PUSH
17387: LD_INT 30
17389: PUSH
17390: LD_INT 6
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 30
17399: PUSH
17400: LD_INT 7
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 30
17409: PUSH
17410: LD_INT 8
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 70
17427: ST_TO_ADDR
// if sci then
17428: LD_VAR 0 9
17432: IFFALSE 17593
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17434: LD_ADDR_VAR 0 11
17438: PUSH
17439: LD_EXP 60
17443: PPUSH
17444: LD_INT 95
17446: PUSH
17447: LD_EXP 67
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 120
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 72
17474: ST_TO_ADDR
// if hurtUnits then
17475: LD_VAR 0 11
17479: IFFALSE 17540
// begin for i in sci do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: LD_VAR 0 9
17490: PUSH
17491: FOR_IN
17492: IFFALSE 17536
// if IsInUnit ( i ) then
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 310
17503: IFFALSE 17516
// ComExitBuilding ( i ) else
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 122
17514: GO 17534
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17516: LD_VAR 0 1
17520: PPUSH
17521: LD_VAR 0 11
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: CALL_OW 128
17534: GO 17491
17536: POP
17537: POP
// end else
17538: GO 17593
// if lab then
17540: LD_VAR 0 4
17544: IFFALSE 17593
// begin for i in sci do
17546: LD_ADDR_VAR 0 1
17550: PUSH
17551: LD_VAR 0 9
17555: PUSH
17556: FOR_IN
17557: IFFALSE 17591
// if not IsInUnit ( i ) then
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 310
17568: NOT
17569: IFFALSE 17589
// ComEnterUnit ( i , lab [ 1 ] ) ;
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_VAR 0 4
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 120
17589: GO 17556
17591: POP
17592: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17593: LD_ADDR_VAR 0 5
17597: PUSH
17598: LD_EXP 60
17602: PPUSH
17603: LD_INT 25
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 72
17617: ST_TO_ADDR
// if eng then
17618: LD_VAR 0 5
17622: IFFALSE 18407
// begin for i in eng do
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_VAR 0 5
17633: PUSH
17634: FOR_IN
17635: IFFALSE 18405
// begin tag := GetTag ( i ) ;
17637: LD_ADDR_VAR 0 6
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 110
17651: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 256
17661: PUSH
17662: LD_INT 800
17664: LESS
17665: PUSH
17666: LD_VAR 0 6
17670: PUSH
17671: LD_INT 1
17673: NONEQUAL
17674: AND
17675: IFFALSE 17725
// begin SetTag ( i , tHeal ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17689: LD_VAR 0 1
17693: PPUSH
17694: LD_EXP 75
17698: PUSH
17699: LD_INT 1
17701: ARRAY
17702: PPUSH
17703: LD_EXP 75
17707: PUSH
17708: LD_INT 2
17710: ARRAY
17711: PPUSH
17712: CALL_OW 111
// AddComHold ( i ) ;
17716: LD_VAR 0 1
17720: PPUSH
17721: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17725: LD_VAR 0 6
17729: PUSH
17730: LD_INT 1
17732: EQUAL
17733: PUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 256
17743: PUSH
17744: LD_INT 1000
17746: EQUAL
17747: AND
17748: IFFALSE 17762
// SetTag ( i , 0 ) ;
17750: LD_VAR 0 1
17754: PPUSH
17755: LD_INT 0
17757: PPUSH
17758: CALL_OW 109
// if not tag then
17762: LD_VAR 0 6
17766: NOT
17767: IFFALSE 17939
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17769: LD_ADDR_VAR 0 3
17773: PUSH
17774: LD_EXP 67
17778: PPUSH
17779: LD_INT 57
17781: PUSH
17782: EMPTY
17783: LIST
17784: PPUSH
17785: CALL_OW 70
17789: ST_TO_ADDR
// if undone then
17790: LD_VAR 0 3
17794: IFFALSE 17816
// begin ComComplete ( i , undone [ 1 ] ) ;
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_VAR 0 3
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: CALL 63417 0 2
// continue ;
17814: GO 17634
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17816: LD_VAR 0 8
17820: PUSH
17821: LD_VAR 0 2
17825: OR
17826: PUSH
17827: LD_EXP 77
17831: PPUSH
17832: CALL 57319 0 1
17836: OR
17837: IFFALSE 17913
// begin if IsInUnit ( i ) then
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 310
17848: IFFALSE 17859
// ComExitBuilding ( i ) ;
17850: LD_VAR 0 1
17854: PPUSH
17855: CALL_OW 122
// if tmp then
17859: LD_VAR 0 2
17863: IFFALSE 17879
// SetTag ( i , tRepair ) else
17865: LD_VAR 0 1
17869: PPUSH
17870: LD_INT 3
17872: PPUSH
17873: CALL_OW 109
17877: GO 17911
// if cr then
17879: LD_VAR 0 8
17883: IFFALSE 17899
// SetTag ( i , tCrates ) else
17885: LD_VAR 0 1
17889: PPUSH
17890: LD_INT 2
17892: PPUSH
17893: CALL_OW 109
17897: GO 17911
// SetTag ( i , tBuild ) ;
17899: LD_VAR 0 1
17903: PPUSH
17904: LD_INT 5
17906: PPUSH
17907: CALL_OW 109
// end else
17911: GO 17939
// if not IsInUnit ( i ) then
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 310
17922: NOT
17923: IFFALSE 17939
// ComEnterUnit ( i , ruBase2 ) ;
17925: LD_VAR 0 1
17929: PPUSH
17930: LD_EXP 69
17934: PPUSH
17935: CALL_OW 120
// end ; if tag = tRepair then
17939: LD_VAR 0 6
17943: PUSH
17944: LD_INT 3
17946: EQUAL
17947: IFFALSE 18053
// begin if IsInUnit ( i ) then
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 310
17958: IFFALSE 17971
// begin ComExitBuilding ( i ) ;
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 122
// continue ;
17969: GO 17634
// end ; if not tmp then
17971: LD_VAR 0 2
17975: NOT
17976: IFFALSE 17992
// begin SetTag ( i , 0 ) ;
17978: LD_VAR 0 1
17982: PPUSH
17983: LD_INT 0
17985: PPUSH
17986: CALL_OW 109
// continue ;
17990: GO 17634
// end ; if not HasTask ( i ) then
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 314
18001: NOT
18002: IFFALSE 18022
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_VAR 0 2
18013: PUSH
18014: LD_INT 1
18016: ARRAY
18017: PPUSH
18018: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_EXP 67
18031: PPUSH
18032: CALL_OW 308
18036: NOT
18037: IFFALSE 18053
// ComMoveToArea ( i , ruBaseArea2 ) ;
18039: LD_VAR 0 1
18043: PPUSH
18044: LD_EXP 67
18048: PPUSH
18049: CALL_OW 113
// end ; if tag = tBuild then
18053: LD_VAR 0 6
18057: PUSH
18058: LD_INT 5
18060: EQUAL
18061: IFFALSE 18260
// begin if IsInUnit ( i ) then
18063: LD_VAR 0 1
18067: PPUSH
18068: CALL_OW 310
18072: IFFALSE 18085
// begin ComExitBuilding ( i ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: CALL_OW 122
// continue ;
18083: GO 17634
// end ; if not Count ( ruBuildings2 ) then
18085: LD_EXP 77
18089: PPUSH
18090: CALL 57319 0 1
18094: NOT
18095: IFFALSE 18113
// begin SetTag ( i , 0 ) ;
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_INT 0
18104: PPUSH
18105: CALL_OW 109
// continue ;
18109: GO 17634
// end else
18111: GO 18152
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18113: LD_EXP 69
18117: PPUSH
18118: LD_EXP 77
18122: PUSH
18123: LD_INT 1
18125: ARRAY
18126: PUSH
18127: LD_INT 1
18129: ARRAY
18130: PPUSH
18131: CALL 96857 0 2
18135: NOT
18136: IFFALSE 18152
// begin SetTag ( i , 0 ) ;
18138: LD_VAR 0 1
18142: PPUSH
18143: LD_INT 0
18145: PPUSH
18146: CALL_OW 109
// continue ;
18150: GO 17634
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18152: LD_ADDR_VAR 0 3
18156: PUSH
18157: LD_EXP 67
18161: PPUSH
18162: LD_INT 57
18164: PUSH
18165: EMPTY
18166: LIST
18167: PPUSH
18168: CALL_OW 70
18172: ST_TO_ADDR
// if undone then
18173: LD_VAR 0 3
18177: IFFALSE 18199
// begin ComComplete ( i , undone [ 1 ] ) ;
18179: LD_VAR 0 1
18183: PPUSH
18184: LD_VAR 0 3
18188: PUSH
18189: LD_INT 1
18191: ARRAY
18192: PPUSH
18193: CALL 63417 0 2
// continue ;
18197: GO 17634
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18199: LD_VAR 0 1
18203: PPUSH
18204: LD_EXP 77
18208: PUSH
18209: LD_INT 1
18211: ARRAY
18212: PUSH
18213: LD_INT 1
18215: ARRAY
18216: PPUSH
18217: LD_EXP 77
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PUSH
18226: LD_INT 2
18228: ARRAY
18229: PPUSH
18230: LD_EXP 77
18234: PUSH
18235: LD_INT 1
18237: ARRAY
18238: PUSH
18239: LD_INT 3
18241: ARRAY
18242: PPUSH
18243: LD_EXP 77
18247: PUSH
18248: LD_INT 1
18250: ARRAY
18251: PUSH
18252: LD_INT 4
18254: ARRAY
18255: PPUSH
18256: CALL_OW 145
// end ; if tag = tCrates then
18260: LD_VAR 0 6
18264: PUSH
18265: LD_INT 2
18267: EQUAL
18268: IFFALSE 18403
// begin if IsInUnit ( i ) then
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 310
18279: IFFALSE 18292
// begin ComExitBuilding ( i ) ;
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 122
// continue ;
18290: GO 17634
// end ; if not cr then
18292: LD_VAR 0 8
18296: NOT
18297: IFFALSE 18313
// begin SetTag ( i , 0 ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_INT 0
18306: PPUSH
18307: CALL_OW 109
// continue ;
18311: GO 17634
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 314
18322: NOT
18323: PUSH
18324: LD_INT 81
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 92
18336: PUSH
18337: LD_VAR 0 8
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PUSH
18346: LD_VAR 0 8
18350: PUSH
18351: LD_INT 2
18353: ARRAY
18354: PUSH
18355: LD_INT 12
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: NOT
18373: AND
18374: IFFALSE 18403
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18376: LD_VAR 0 1
18380: PPUSH
18381: LD_VAR 0 8
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PPUSH
18390: LD_VAR 0 8
18394: PUSH
18395: LD_INT 2
18397: ARRAY
18398: PPUSH
18399: CALL_OW 117
// end ; end ;
18403: GO 17634
18405: POP
18406: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18407: LD_ADDR_VAR 0 10
18411: PUSH
18412: LD_EXP 60
18416: PPUSH
18417: LD_INT 2
18419: PUSH
18420: LD_INT 25
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 25
18432: PUSH
18433: LD_INT 9
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 50
18447: PUSH
18448: EMPTY
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 72
18459: PUSH
18460: LD_EXP 62
18464: UNION
18465: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18466: LD_ADDR_VAR 0 12
18470: PUSH
18471: LD_EXP 67
18475: PPUSH
18476: LD_INT 81
18478: PUSH
18479: LD_INT 3
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 70
18490: ST_TO_ADDR
// if sol then
18491: LD_VAR 0 10
18495: IFFALSE 19019
// begin if enemyInBase then
18497: LD_VAR 0 12
18501: IFFALSE 18644
// begin for i in sol do
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_VAR 0 10
18512: PUSH
18513: FOR_IN
18514: IFFALSE 18640
// begin tw := IsInUnit ( i ) ;
18516: LD_ADDR_VAR 0 7
18520: PUSH
18521: LD_VAR 0 1
18525: PPUSH
18526: CALL_OW 310
18530: ST_TO_ADDR
// if tw then
18531: LD_VAR 0 7
18535: IFFALSE 18614
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18537: LD_VAR 0 7
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_INT 3
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 101
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 30
18567: PUSH
18568: LD_INT 32
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 30
18577: PUSH
18578: LD_INT 31
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: IN
18600: NOT
18601: IFFALSE 18612
// ComExitBuilding ( i ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 122
// end else
18612: GO 18638
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18614: LD_VAR 0 1
18618: PPUSH
18619: LD_VAR 0 12
18623: PPUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 74
18633: PPUSH
18634: CALL_OW 115
// end ;
18638: GO 18513
18640: POP
18641: POP
// end else
18642: GO 19019
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18644: LD_ADDR_VAR 0 13
18648: PUSH
18649: LD_EXP 67
18653: PPUSH
18654: LD_INT 3
18656: PUSH
18657: LD_INT 62
18659: PUSH
18660: EMPTY
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 30
18672: PUSH
18673: LD_INT 32
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 4
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 30
18692: PUSH
18693: LD_INT 5
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 30
18702: PUSH
18703: LD_INT 31
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PPUSH
18721: CALL_OW 70
18725: ST_TO_ADDR
// if empty then
18726: LD_VAR 0 13
18730: IFFALSE 18747
// empty := ReverseArray ( empty ) ;
18732: LD_ADDR_VAR 0 13
18736: PUSH
18737: LD_VAR 0 13
18741: PPUSH
18742: CALL 88195 0 1
18746: ST_TO_ADDR
// for i in sol do
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: LD_VAR 0 10
18756: PUSH
18757: FOR_IN
18758: IFFALSE 19017
// begin tag := GetTag ( i ) ;
18760: LD_ADDR_VAR 0 6
18764: PUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 110
18774: ST_TO_ADDR
// if tag = tMech then
18775: LD_VAR 0 6
18779: PUSH
18780: LD_INT 7
18782: EQUAL
18783: IFFALSE 18787
// continue ;
18785: GO 18757
// if GetLives ( i ) < 1000 and tag <> tHeal then
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 256
18796: PUSH
18797: LD_INT 1000
18799: LESS
18800: PUSH
18801: LD_VAR 0 6
18805: PUSH
18806: LD_INT 1
18808: NONEQUAL
18809: AND
18810: IFFALSE 18862
// begin SetTag ( i , tHeal ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18824: LD_VAR 0 1
18828: PPUSH
18829: LD_EXP 75
18833: PUSH
18834: LD_INT 1
18836: ARRAY
18837: PPUSH
18838: LD_EXP 75
18842: PUSH
18843: LD_INT 2
18845: ARRAY
18846: PPUSH
18847: CALL_OW 111
// AddComHold ( i ) ;
18851: LD_VAR 0 1
18855: PPUSH
18856: CALL_OW 200
// continue ;
18860: GO 18757
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
18862: LD_VAR 0 1
18866: PPUSH
18867: CALL_OW 256
18871: PUSH
18872: LD_INT 1000
18874: EQUAL
18875: PUSH
18876: LD_VAR 0 6
18880: PUSH
18881: LD_INT 1
18883: EQUAL
18884: AND
18885: IFFALSE 18901
// begin SetTag ( i , 0 ) ;
18887: LD_VAR 0 1
18891: PPUSH
18892: LD_INT 0
18894: PPUSH
18895: CALL_OW 109
// continue ;
18899: GO 18757
// end ; if HasTask ( i ) then
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 314
18910: IFFALSE 18914
// continue ;
18912: GO 18757
// if not IsInUnit ( i ) and not tag and empty then
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 310
18923: NOT
18924: PUSH
18925: LD_VAR 0 6
18929: NOT
18930: AND
18931: PUSH
18932: LD_VAR 0 13
18936: AND
18937: IFFALSE 19015
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_VAR 0 13
18948: PUSH
18949: LD_INT 1
18951: ARRAY
18952: PPUSH
18953: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
18957: LD_VAR 0 13
18961: PUSH
18962: LD_INT 1
18964: ARRAY
18965: PPUSH
18966: CALL_OW 266
18970: PUSH
18971: LD_INT 5
18973: EQUAL
18974: PUSH
18975: LD_INT 50
18977: PPUSH
18978: CALL_OW 13
18982: AND
18983: IFFALSE 18997
// AddComChangeProfession ( i , class_bazooker ) ;
18985: LD_VAR 0 1
18989: PPUSH
18990: LD_INT 9
18992: PPUSH
18993: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
18997: LD_ADDR_VAR 0 13
19001: PUSH
19002: LD_VAR 0 13
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: CALL_OW 3
19014: ST_TO_ADDR
// end ; end ;
19015: GO 18757
19017: POP
19018: POP
// end ; end ; end ;
19019: PPOPN 16
19021: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19022: LD_EXP 79
19026: PUSH
19027: LD_EXP 22
19031: AND
19032: IFFALSE 19599
19034: GO 19036
19036: DISABLE
19037: LD_INT 0
19039: PPUSH
19040: PPUSH
19041: PPUSH
// begin enable ;
19042: ENABLE
// if not ruTanks then
19043: LD_EXP 79
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19599
// for i in ruTanks do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_EXP 79
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19597
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 302
19074: NOT
19075: PUSH
19076: LD_VAR 0 1
19080: PPUSH
19081: CALL_OW 255
19085: PUSH
19086: LD_INT 3
19088: NONEQUAL
19089: OR
19090: IFFALSE 19110
// begin ruTanks := ruTanks diff i ;
19092: LD_ADDR_EXP 79
19096: PUSH
19097: LD_EXP 79
19101: PUSH
19102: LD_VAR 0 1
19106: DIFF
19107: ST_TO_ADDR
// continue ;
19108: GO 19062
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19110: LD_VAR 0 1
19114: PPUSH
19115: CALL_OW 110
19119: NOT
19120: PUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: CALL_OW 110
19130: PUSH
19131: LD_INT 0
19133: EQUAL
19134: OR
19135: IFFALSE 19308
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 262
19146: PUSH
19147: LD_INT 1
19149: EQUAL
19150: PUSH
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL_OW 261
19160: PUSH
19161: LD_INT 50
19163: LESS
19164: AND
19165: PUSH
19166: LD_EXP 68
19170: PPUSH
19171: CALL_OW 302
19175: AND
19176: IFFALSE 19263
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19178: LD_VAR 0 1
19182: PPUSH
19183: LD_EXP 68
19187: PPUSH
19188: CALL_OW 250
19192: PPUSH
19193: LD_EXP 68
19197: PPUSH
19198: CALL_OW 251
19202: PPUSH
19203: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19207: LD_INT 35
19209: PPUSH
19210: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_EXP 68
19223: PPUSH
19224: CALL_OW 250
19228: PPUSH
19229: LD_EXP 68
19233: PPUSH
19234: CALL_OW 251
19238: PPUSH
19239: CALL_OW 297
19243: PUSH
19244: LD_INT 6
19246: LESS
19247: IFFALSE 19207
// SetFuel ( i , 100 ) ;
19249: LD_VAR 0 1
19253: PPUSH
19254: LD_INT 100
19256: PPUSH
19257: CALL_OW 240
// end else
19261: GO 19308
// if not IsInArea ( i , ruParkingArea ) then
19263: LD_VAR 0 1
19267: PPUSH
19268: LD_EXP 82
19272: PPUSH
19273: CALL_OW 308
19277: NOT
19278: IFFALSE 19296
// ComMoveToArea ( i , ruParkingArea ) else
19280: LD_VAR 0 1
19284: PPUSH
19285: LD_EXP 82
19289: PPUSH
19290: CALL_OW 113
19294: GO 19308
// SetTag ( i , tParking ) ;
19296: LD_VAR 0 1
19300: PPUSH
19301: LD_INT 12
19303: PPUSH
19304: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 110
19317: PUSH
19318: LD_INT 12
19320: EQUAL
19321: IFFALSE 19451
// begin if GetLives ( i ) < 650 then
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 256
19332: PUSH
19333: LD_INT 650
19335: LESS
19336: IFFALSE 19428
// begin if not IsDrivenBy ( i ) then
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 311
19347: NOT
19348: IFFALSE 19352
// continue ;
19350: GO 19062
// mech := IsDrivenBy ( i ) ;
19352: LD_ADDR_VAR 0 2
19356: PUSH
19357: LD_VAR 0 1
19361: PPUSH
19362: CALL_OW 311
19366: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19367: LD_VAR 0 2
19371: PPUSH
19372: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19376: LD_VAR 0 2
19380: PPUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19390: LD_INT 35
19392: PPUSH
19393: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 256
19406: PUSH
19407: LD_INT 1000
19409: EQUAL
19410: IFFALSE 19390
// ComEnterUnit ( mech , i ) ;
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 120
// end else
19426: GO 19451
// if IsDrivenBy ( i ) then
19428: LD_VAR 0 1
19432: PPUSH
19433: CALL_OW 311
19437: IFFALSE 19451
// SetTag ( i , tAttack ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_INT 13
19446: PPUSH
19447: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL_OW 110
19460: PUSH
19461: LD_INT 13
19463: EQUAL
19464: IFFALSE 19595
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19466: LD_ADDR_VAR 0 3
19470: PUSH
19471: LD_EXP 66
19475: PPUSH
19476: LD_INT 81
19478: PUSH
19479: LD_INT 3
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 70
19490: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 256
19500: PUSH
19501: LD_INT 650
19503: LESS
19504: IFFALSE 19529
// begin ComStop ( i ) ;
19506: LD_VAR 0 1
19510: PPUSH
19511: CALL_OW 141
// SetTag ( i , 0 ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 0
19522: PPUSH
19523: CALL_OW 109
// continue ;
19527: GO 19062
// end ; if enemy then
19529: LD_VAR 0 3
19533: IFFALSE 19573
// begin if not HasTask ( i ) then
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 314
19544: NOT
19545: IFFALSE 19571
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19547: LD_VAR 0 1
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 74
19566: PPUSH
19567: CALL_OW 115
// end else
19571: GO 19595
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19573: LD_VAR 0 1
19577: PPUSH
19578: LD_INT 105
19580: PUSH
19581: LD_INT 35
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: EMPTY
19589: LIST
19590: PPUSH
19591: CALL 95538 0 2
// end ; end ;
19595: GO 19062
19597: POP
19598: POP
// end ;
19599: PPOPN 3
19601: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19602: LD_EXP 80
19606: PUSH
19607: LD_EXP 22
19611: AND
19612: IFFALSE 20179
19614: GO 19616
19616: DISABLE
19617: LD_INT 0
19619: PPUSH
19620: PPUSH
19621: PPUSH
// begin enable ;
19622: ENABLE
// if not ruTanks2 then
19623: LD_EXP 80
19627: NOT
19628: IFFALSE 19632
// exit ;
19630: GO 20179
// for i in ruTanks2 do
19632: LD_ADDR_VAR 0 1
19636: PUSH
19637: LD_EXP 80
19641: PUSH
19642: FOR_IN
19643: IFFALSE 20177
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19645: LD_VAR 0 1
19649: PPUSH
19650: CALL_OW 302
19654: NOT
19655: PUSH
19656: LD_VAR 0 1
19660: PPUSH
19661: CALL_OW 255
19665: PUSH
19666: LD_INT 3
19668: NONEQUAL
19669: OR
19670: IFFALSE 19690
// begin ruTanks := ruTanks diff i ;
19672: LD_ADDR_EXP 79
19676: PUSH
19677: LD_EXP 79
19681: PUSH
19682: LD_VAR 0 1
19686: DIFF
19687: ST_TO_ADDR
// continue ;
19688: GO 19642
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19690: LD_VAR 0 1
19694: PPUSH
19695: CALL_OW 110
19699: NOT
19700: PUSH
19701: LD_VAR 0 1
19705: PPUSH
19706: CALL_OW 110
19710: PUSH
19711: LD_INT 0
19713: EQUAL
19714: OR
19715: IFFALSE 19888
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 262
19726: PUSH
19727: LD_INT 1
19729: EQUAL
19730: PUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 261
19740: PUSH
19741: LD_INT 50
19743: LESS
19744: AND
19745: PUSH
19746: LD_EXP 69
19750: PPUSH
19751: CALL_OW 302
19755: AND
19756: IFFALSE 19843
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19758: LD_VAR 0 1
19762: PPUSH
19763: LD_EXP 69
19767: PPUSH
19768: CALL_OW 250
19772: PPUSH
19773: LD_EXP 69
19777: PPUSH
19778: CALL_OW 251
19782: PPUSH
19783: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19787: LD_INT 35
19789: PPUSH
19790: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19794: LD_VAR 0 1
19798: PPUSH
19799: LD_EXP 69
19803: PPUSH
19804: CALL_OW 250
19808: PPUSH
19809: LD_EXP 69
19813: PPUSH
19814: CALL_OW 251
19818: PPUSH
19819: CALL_OW 297
19823: PUSH
19824: LD_INT 6
19826: LESS
19827: IFFALSE 19787
// SetFuel ( i , 100 ) ;
19829: LD_VAR 0 1
19833: PPUSH
19834: LD_INT 100
19836: PPUSH
19837: CALL_OW 240
// end else
19841: GO 19888
// if not IsInArea ( i , ruParkingArea2 ) then
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_EXP 83
19852: PPUSH
19853: CALL_OW 308
19857: NOT
19858: IFFALSE 19876
// ComMoveToArea ( i , ruParkingArea2 ) else
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_EXP 83
19869: PPUSH
19870: CALL_OW 113
19874: GO 19888
// SetTag ( i , tParking ) ;
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_INT 12
19883: PPUSH
19884: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 110
19897: PUSH
19898: LD_INT 12
19900: EQUAL
19901: IFFALSE 20031
// begin if GetLives ( i ) < 650 then
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 256
19912: PUSH
19913: LD_INT 650
19915: LESS
19916: IFFALSE 20008
// begin if not IsDrivenBy ( i ) then
19918: LD_VAR 0 1
19922: PPUSH
19923: CALL_OW 311
19927: NOT
19928: IFFALSE 19932
// continue ;
19930: GO 19642
// mech := IsDrivenBy ( i ) ;
19932: LD_ADDR_VAR 0 2
19936: PUSH
19937: LD_VAR 0 1
19941: PPUSH
19942: CALL_OW 311
19946: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19947: LD_VAR 0 2
19951: PPUSH
19952: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19956: LD_VAR 0 2
19960: PPUSH
19961: LD_VAR 0 1
19965: PPUSH
19966: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19970: LD_INT 35
19972: PPUSH
19973: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 256
19986: PUSH
19987: LD_INT 1000
19989: EQUAL
19990: IFFALSE 19970
// ComEnterUnit ( mech , i ) ;
19992: LD_VAR 0 2
19996: PPUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 120
// end else
20006: GO 20031
// if IsDrivenBy ( i ) then
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 311
20017: IFFALSE 20031
// SetTag ( i , tAttack ) ;
20019: LD_VAR 0 1
20023: PPUSH
20024: LD_INT 13
20026: PPUSH
20027: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 110
20040: PUSH
20041: LD_INT 13
20043: EQUAL
20044: IFFALSE 20175
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_EXP 67
20055: PPUSH
20056: LD_INT 81
20058: PUSH
20059: LD_INT 3
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL_OW 70
20070: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 256
20080: PUSH
20081: LD_INT 650
20083: LESS
20084: IFFALSE 20109
// begin ComStop ( i ) ;
20086: LD_VAR 0 1
20090: PPUSH
20091: CALL_OW 141
// SetTag ( i , 0 ) ;
20095: LD_VAR 0 1
20099: PPUSH
20100: LD_INT 0
20102: PPUSH
20103: CALL_OW 109
// continue ;
20107: GO 19642
// end ; if enemy then
20109: LD_VAR 0 3
20113: IFFALSE 20153
// begin if not HasTask ( i ) then
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 314
20124: NOT
20125: IFFALSE 20151
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_VAR 0 3
20136: PPUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: CALL_OW 74
20146: PPUSH
20147: CALL_OW 115
// end else
20151: GO 20175
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20153: LD_VAR 0 1
20157: PPUSH
20158: LD_INT 105
20160: PUSH
20161: LD_INT 35
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: PPUSH
20171: CALL 95538 0 2
// end ; end ;
20175: GO 19642
20177: POP
20178: POP
// end ;
20179: PPOPN 3
20181: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20182: LD_EXP 81
20186: PPUSH
20187: CALL 57319 0 1
20191: IFFALSE 20204
20193: GO 20195
20195: DISABLE
// begin enable ;
20196: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20197: LD_INT 106
20199: PPUSH
20200: CALL_OW 427
// end ;
20204: END
// export function RussianExtraAttack ; var i , tmp ; begin
20205: LD_INT 0
20207: PPUSH
20208: PPUSH
20209: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20210: LD_ADDR_VAR 0 3
20214: PUSH
20215: LD_EXP 81
20219: PPUSH
20220: LD_INT 50
20222: PUSH
20223: EMPTY
20224: LIST
20225: PPUSH
20226: CALL_OW 72
20230: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20231: LD_ADDR_EXP 81
20235: PUSH
20236: LD_EXP 81
20240: PUSH
20241: LD_VAR 0 3
20245: DIFF
20246: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20247: LD_VAR 0 3
20251: PPUSH
20252: LD_INT 105
20254: PPUSH
20255: LD_INT 35
20257: PPUSH
20258: CALL_OW 114
// wait ( 0 0$5 ) ;
20262: LD_INT 175
20264: PPUSH
20265: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20269: LD_INT 35
20271: PPUSH
20272: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20276: LD_ADDR_VAR 0 3
20280: PUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_INT 50
20288: PUSH
20289: EMPTY
20290: LIST
20291: PPUSH
20292: CALL_OW 72
20296: ST_TO_ADDR
// for i in tmp do
20297: LD_ADDR_VAR 0 2
20301: PUSH
20302: LD_VAR 0 3
20306: PUSH
20307: FOR_IN
20308: IFFALSE 20334
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20310: LD_VAR 0 2
20314: PPUSH
20315: LD_INT 105
20317: PUSH
20318: LD_INT 35
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: PPUSH
20328: CALL 95538 0 2
20332: GO 20307
20334: POP
20335: POP
// until not tmp ;
20336: LD_VAR 0 3
20340: NOT
20341: IFFALSE 20269
// end ;
20343: LD_VAR 0 1
20347: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
20359: PPUSH
// result := [ ] ;
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: EMPTY
20366: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20367: LD_ADDR_VAR 0 7
20371: PUSH
20372: LD_INT 4
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: LD_INT 6
20380: PUSH
20381: LD_INT 7
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: PUSH
20390: LD_OWVAR 67
20394: ARRAY
20395: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20396: LD_ADDR_VAR 0 8
20400: PUSH
20401: LD_INT 19
20403: ST_TO_ADDR
// parking := ruGatPointArea ;
20404: LD_ADDR_VAR 0 9
20408: PUSH
20409: LD_INT 32
20411: ST_TO_ADDR
// dir := 5 ;
20412: LD_ADDR_VAR 0 10
20416: PUSH
20417: LD_INT 5
20419: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20420: LD_VAR 0 8
20424: PPUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_INT 6
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 70
20457: IFFALSE 20518
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20459: LD_ADDR_VAR 0 3
20463: PUSH
20464: LD_VAR 0 8
20468: PPUSH
20469: LD_INT 2
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_INT 6
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: PPUSH
20497: CALL_OW 70
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20516
// RemoveUnit ( i ) ;
20505: LD_VAR 0 3
20509: PPUSH
20510: CALL_OW 64
20514: GO 20502
20516: POP
20517: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20518: LD_VAR 0 8
20522: PPUSH
20523: LD_INT 3
20525: PUSH
20526: LD_INT 21
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 22
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 70
20558: IFFALSE 20622
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_VAR 0 8
20569: PPUSH
20570: LD_INT 3
20572: PUSH
20573: LD_INT 21
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 22
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PPUSH
20601: CALL_OW 70
20605: PUSH
20606: FOR_IN
20607: IFFALSE 20620
// KillUnit ( i ) ;
20609: LD_VAR 0 3
20613: PPUSH
20614: CALL_OW 66
20618: GO 20606
20620: POP
20621: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20622: LD_VAR 0 8
20626: PPUSH
20627: LD_INT 21
20629: PUSH
20630: LD_INT 1
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 22
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 70
20655: IFFALSE 20718
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_VAR 0 8
20666: PPUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 22
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PPUSH
20691: CALL_OW 70
20695: PUSH
20696: FOR_IN
20697: IFFALSE 20716
// ComMoveXY ( i , 92 , 92 ) ;
20699: LD_VAR 0 3
20703: PPUSH
20704: LD_INT 92
20706: PPUSH
20707: LD_INT 92
20709: PPUSH
20710: CALL_OW 111
20714: GO 20696
20716: POP
20717: POP
// repeat wait ( 0 0$1 ) ;
20718: LD_INT 35
20720: PPUSH
20721: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20725: LD_VAR 0 8
20729: PPUSH
20730: LD_INT 50
20732: PUSH
20733: EMPTY
20734: LIST
20735: PPUSH
20736: CALL_OW 70
20740: NOT
20741: IFFALSE 20718
// InitHC_All ( ) ;
20743: CALL_OW 584
// InitVc ;
20747: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20751: LD_ADDR_VAR 0 3
20755: PUSH
20756: DOUBLE
20757: LD_INT 1
20759: DEC
20760: ST_TO_ADDR
20761: LD_INT 3
20763: PUSH
20764: LD_INT 4
20766: PUSH
20767: LD_INT 4
20769: PUSH
20770: LD_INT 5
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: LD_OWVAR 67
20783: ARRAY
20784: PUSH
20785: LD_VAR 0 1
20789: PLUS
20790: PUSH
20791: FOR_TO
20792: IFFALSE 21099
// begin uc_side := 6 ;
20794: LD_ADDR_OWVAR 20
20798: PUSH
20799: LD_INT 6
20801: ST_TO_ADDR
// uc_nation := nation_russian ;
20802: LD_ADDR_OWVAR 21
20806: PUSH
20807: LD_INT 3
20809: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20810: LD_ADDR_VAR 0 11
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 3
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: LD_INT 3
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_INT 4
20838: PPUSH
20839: CALL_OW 12
20843: ARRAY
20844: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
20845: LD_INT 22
20847: PUSH
20848: LD_INT 24
20850: PUSH
20851: LD_INT 23
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 3
20866: MOD
20867: PUSH
20868: LD_INT 1
20870: PLUS
20871: ARRAY
20872: PPUSH
20873: LD_INT 3
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PPUSH
20886: LD_INT 2
20888: PPUSH
20889: CALL_OW 12
20893: ARRAY
20894: PPUSH
20895: LD_VAR 0 11
20899: PPUSH
20900: LD_INT 45
20902: PUSH
20903: LD_INT 46
20905: PUSH
20906: LD_INT 43
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 3
20921: MOD
20922: PUSH
20923: LD_INT 1
20925: PLUS
20926: ARRAY
20927: PPUSH
20928: LD_INT 100
20930: PPUSH
20931: CALL 60057 0 5
// veh := CreateVehicle ;
20935: LD_ADDR_VAR 0 6
20939: PUSH
20940: CALL_OW 45
20944: ST_TO_ADDR
// SetDir ( veh , dir ) ;
20945: LD_VAR 0 6
20949: PPUSH
20950: LD_VAR 0 10
20954: PPUSH
20955: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
20959: LD_VAR 0 6
20963: PPUSH
20964: LD_VAR 0 8
20968: PPUSH
20969: LD_INT 0
20971: PPUSH
20972: CALL_OW 49
// if control = control_manual then
20976: LD_VAR 0 11
20980: PUSH
20981: LD_INT 1
20983: EQUAL
20984: IFFALSE 21038
// begin uc_side := 6 ;
20986: LD_ADDR_OWVAR 20
20990: PUSH
20991: LD_INT 6
20993: ST_TO_ADDR
// uc_nation := nation_russian ;
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 3
21001: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21002: LD_INT 0
21004: PPUSH
21005: LD_VAR 0 7
21009: PPUSH
21010: CALL_OW 383
// un := CreateHuman ;
21014: LD_ADDR_VAR 0 5
21018: PUSH
21019: CALL_OW 44
21023: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21024: LD_VAR 0 5
21028: PPUSH
21029: LD_VAR 0 6
21033: PPUSH
21034: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21038: LD_VAR 0 6
21042: PPUSH
21043: LD_VAR 0 9
21047: PPUSH
21048: CALL_OW 113
// wait ( 0 0$3 ) ;
21052: LD_INT 105
21054: PPUSH
21055: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21059: LD_VAR 0 8
21063: PPUSH
21064: LD_INT 50
21066: PUSH
21067: EMPTY
21068: LIST
21069: PPUSH
21070: CALL_OW 70
21074: NOT
21075: IFFALSE 21038
// result := Join ( result , veh ) ;
21077: LD_ADDR_VAR 0 2
21081: PUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: LD_VAR 0 6
21091: PPUSH
21092: CALL 92928 0 2
21096: ST_TO_ADDR
// end ;
21097: GO 20791
21099: POP
21100: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: DOUBLE
21107: LD_INT 1
21109: DEC
21110: ST_TO_ADDR
21111: LD_INT 2
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: LD_INT 3
21119: PUSH
21120: LD_INT 4
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: PUSH
21129: LD_OWVAR 67
21133: ARRAY
21134: PUSH
21135: FOR_TO
21136: IFFALSE 21292
// begin uc_side := 6 ;
21138: LD_ADDR_OWVAR 20
21142: PUSH
21143: LD_INT 6
21145: ST_TO_ADDR
// uc_nation := nation_russian ;
21146: LD_ADDR_OWVAR 21
21150: PUSH
21151: LD_INT 3
21153: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21154: LD_INT 0
21156: PPUSH
21157: LD_VAR 0 7
21161: PPUSH
21162: CALL_OW 381
// un := CreateHuman ;
21166: LD_ADDR_VAR 0 5
21170: PUSH
21171: CALL_OW 44
21175: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21176: LD_INT 35
21178: PUSH
21179: LD_INT 60
21181: PUSH
21182: LD_INT 70
21184: PUSH
21185: LD_INT 80
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_OWVAR 67
21198: ARRAY
21199: PPUSH
21200: CALL_OW 13
21204: IFFALSE 21218
// SetClass ( un , class_bazooker ) ;
21206: LD_VAR 0 5
21210: PPUSH
21211: LD_INT 9
21213: PPUSH
21214: CALL_OW 336
// SetDir ( un , dir ) ;
21218: LD_VAR 0 5
21222: PPUSH
21223: LD_VAR 0 10
21227: PPUSH
21228: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21232: LD_VAR 0 5
21236: PPUSH
21237: LD_VAR 0 8
21241: PPUSH
21242: LD_INT 0
21244: PPUSH
21245: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21249: LD_VAR 0 5
21253: PPUSH
21254: LD_VAR 0 9
21258: PPUSH
21259: CALL_OW 113
// wait ( 0 0$1 ) ;
21263: LD_INT 35
21265: PPUSH
21266: CALL_OW 67
// result := Join ( result , un ) ;
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_VAR 0 2
21279: PPUSH
21280: LD_VAR 0 5
21284: PPUSH
21285: CALL 92928 0 2
21289: ST_TO_ADDR
// end ;
21290: GO 21135
21292: POP
21293: POP
// end ;
21294: LD_VAR 0 2
21298: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21299: LD_INT 0
21301: PPUSH
21302: PPUSH
21303: PPUSH
21304: PPUSH
21305: PPUSH
21306: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21307: LD_ADDR_EXP 18
21311: PUSH
21312: LD_EXP 18
21316: PPUSH
21317: CALL 94289 0 1
21321: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 99
21329: PUSH
21330: LD_INT 91
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 78
21339: PUSH
21340: LD_INT 50
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 91
21349: PUSH
21350: LD_INT 45
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21362: LD_ADDR_VAR 0 4
21366: PUSH
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL 20348 0 1
21376: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21377: LD_VAR 0 4
21381: PPUSH
21382: LD_INT 21
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PPUSH
21392: CALL_OW 72
21396: PPUSH
21397: LD_INT 108
21399: PPUSH
21400: LD_INT 60
21402: PPUSH
21403: CALL_OW 114
// DRussianNextAttack ;
21407: CALL 28478 0 0
// repeat wait ( 0 0$2 ) ;
21411: LD_INT 70
21413: PPUSH
21414: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21418: LD_ADDR_VAR 0 7
21422: PUSH
21423: LD_INT 81
21425: PUSH
21426: LD_INT 6
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PPUSH
21433: CALL_OW 69
21437: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21438: LD_ADDR_VAR 0 4
21442: PUSH
21443: LD_VAR 0 4
21447: PPUSH
21448: LD_INT 50
21450: PUSH
21451: EMPTY
21452: LIST
21453: PPUSH
21454: CALL_OW 72
21458: ST_TO_ADDR
// for i in attackers do
21459: LD_ADDR_VAR 0 6
21463: PUSH
21464: LD_VAR 0 4
21468: PUSH
21469: FOR_IN
21470: IFFALSE 21846
// begin if not IsOk ( i ) then
21472: LD_VAR 0 6
21476: PPUSH
21477: CALL_OW 302
21481: NOT
21482: IFFALSE 21502
// begin attackers := attackers diff i ;
21484: LD_ADDR_VAR 0 4
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: LD_VAR 0 6
21498: DIFF
21499: ST_TO_ADDR
// continue ;
21500: GO 21469
// end ; if GetType ( i ) = unit_vehicle then
21502: LD_VAR 0 6
21506: PPUSH
21507: CALL_OW 247
21511: PUSH
21512: LD_INT 2
21514: EQUAL
21515: IFFALSE 21533
// AgressiveMove ( i , path ) else
21517: LD_VAR 0 6
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: CALL 95538 0 2
21531: GO 21844
// begin if GetClass ( i ) = class_bazooker then
21533: LD_VAR 0 6
21537: PPUSH
21538: CALL_OW 257
21542: PUSH
21543: LD_INT 9
21545: EQUAL
21546: IFFALSE 21820
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21548: LD_VAR 0 6
21552: PPUSH
21553: LD_VAR 0 7
21557: PPUSH
21558: LD_VAR 0 6
21562: PPUSH
21563: CALL_OW 74
21567: PPUSH
21568: CALL_OW 296
21572: PUSH
21573: LD_INT 12
21575: GREATER
21576: IFFALSE 21604
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21578: LD_VAR 0 6
21582: PPUSH
21583: LD_VAR 0 7
21587: PPUSH
21588: LD_VAR 0 6
21592: PPUSH
21593: CALL_OW 74
21597: PPUSH
21598: CALL 97156 0 2
21602: GO 21818
// begin e := NearestUnitToUnit ( enemy , i ) ;
21604: LD_ADDR_VAR 0 5
21608: PUSH
21609: LD_VAR 0 7
21613: PPUSH
21614: LD_VAR 0 6
21618: PPUSH
21619: CALL_OW 74
21623: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21624: LD_INT 1
21626: PPUSH
21627: LD_INT 3
21629: PPUSH
21630: CALL_OW 12
21634: PUSH
21635: LD_INT 1
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21660
21643: POP
// ComAttackUnit ( i , e ) ; 2 :
21644: LD_VAR 0 6
21648: PPUSH
21649: LD_VAR 0 5
21653: PPUSH
21654: CALL_OW 115
21658: GO 21818
21660: LD_INT 2
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21746
21668: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21669: LD_VAR 0 6
21673: PPUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 250
21683: PPUSH
21684: LD_VAR 0 5
21688: PPUSH
21689: CALL_OW 251
21693: PPUSH
21694: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21698: LD_VAR 0 5
21702: PPUSH
21703: CALL_OW 247
21707: PUSH
21708: LD_INT 3
21710: NONEQUAL
21711: PUSH
21712: LD_EXP 17
21716: NOT
21717: AND
21718: IFFALSE 21744
// begin dialogRussianSpaceAmmo := true ;
21720: LD_ADDR_EXP 17
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21728: LD_INT 210
21730: PPUSH
21731: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21735: LD_VAR 0 5
21739: PPUSH
21740: CALL 28525 0 1
// end ; end ; 3 :
21744: GO 21818
21746: LD_INT 3
21748: DOUBLE
21749: EQUAL
21750: IFTRUE 21754
21752: GO 21817
21754: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21755: LD_VAR 0 6
21759: PPUSH
21760: LD_VAR 0 5
21764: PPUSH
21765: CALL_OW 250
21769: PPUSH
21770: LD_VAR 0 5
21774: PPUSH
21775: CALL_OW 251
21779: PPUSH
21780: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21784: LD_EXP 17
21788: NOT
21789: IFFALSE 21815
// begin dialogRussianSpaceAmmo := true ;
21791: LD_ADDR_EXP 17
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21799: LD_INT 210
21801: PPUSH
21802: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21806: LD_VAR 0 5
21810: PPUSH
21811: CALL 28525 0 1
// end ; end ; end ;
21815: GO 21818
21817: POP
// end ; end else
21818: GO 21844
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21820: LD_VAR 0 6
21824: PPUSH
21825: LD_VAR 0 7
21829: PPUSH
21830: LD_VAR 0 6
21834: PPUSH
21835: CALL_OW 74
21839: PPUSH
21840: CALL 97156 0 2
// end ; end ;
21844: GO 21469
21846: POP
21847: POP
// until not attackers ;
21848: LD_VAR 0 4
21852: NOT
21853: IFFALSE 21411
// end ;
21855: LD_VAR 0 2
21859: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
21860: LD_EXP 10
21864: PUSH
21865: LD_EXP 16
21869: AND
21870: IFFALSE 21982
21872: GO 21874
21874: DISABLE
21875: LD_INT 0
21877: PPUSH
21878: PPUSH
21879: PPUSH
// begin InitHC_All ( ) ;
21880: CALL_OW 584
// for i := 1 to 3 do
21884: LD_ADDR_VAR 0 1
21888: PUSH
21889: DOUBLE
21890: LD_INT 1
21892: DEC
21893: ST_TO_ADDR
21894: LD_INT 3
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21980
// begin uc_side := 6 ;
21900: LD_ADDR_OWVAR 20
21904: PUSH
21905: LD_INT 6
21907: ST_TO_ADDR
// uc_nation := nation_russian ;
21908: LD_ADDR_OWVAR 21
21912: PUSH
21913: LD_INT 3
21915: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
21916: LD_INT 0
21918: PPUSH
21919: LD_INT 3
21921: PPUSH
21922: CALL_OW 381
// un := CreateHuman ;
21926: LD_ADDR_VAR 0 2
21930: PUSH
21931: CALL_OW 44
21935: ST_TO_ADDR
// SetDir ( un , 2 ) ;
21936: LD_VAR 0 2
21940: PPUSH
21941: LD_INT 2
21943: PPUSH
21944: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
21948: LD_VAR 0 2
21952: PPUSH
21953: LD_INT 33
21955: PPUSH
21956: LD_INT 0
21958: PPUSH
21959: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
21963: LD_VAR 0 2
21967: PPUSH
21968: LD_INT 52
21970: PPUSH
21971: LD_INT 16
21973: PPUSH
21974: CALL_OW 114
// end ;
21978: GO 21897
21980: POP
21981: POP
// end ;
21982: PPOPN 3
21984: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
21985: LD_EXP 68
21989: PPUSH
21990: CALL_OW 302
21994: PUSH
21995: LD_EXP 78
21999: NOT
22000: AND
22001: IFFALSE 22238
22003: GO 22005
22005: DISABLE
22006: LD_INT 0
22008: PPUSH
// begin enable ;
22009: ENABLE
// uc_side := 3 ;
22010: LD_ADDR_OWVAR 20
22014: PUSH
22015: LD_INT 3
22017: ST_TO_ADDR
// uc_nation := nation_russian ;
22018: LD_ADDR_OWVAR 21
22022: PUSH
22023: LD_INT 3
22025: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22026: LD_INT 22
22028: PPUSH
22029: LD_INT 3
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 51
22037: PPUSH
22038: LD_INT 100
22040: PPUSH
22041: CALL 60057 0 5
// cargo := CreateVehicle ;
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: CALL_OW 45
22054: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_INT 5
22062: PPUSH
22063: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22067: LD_VAR 0 1
22071: PPUSH
22072: LD_INT 187
22074: PPUSH
22075: LD_INT 117
22077: PPUSH
22078: LD_INT 0
22080: PPUSH
22081: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22085: LD_VAR 0 1
22089: PPUSH
22090: LD_INT 1
22092: PPUSH
22093: LD_INT 100
22095: PPUSH
22096: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22100: LD_VAR 0 1
22104: PPUSH
22105: LD_EXP 68
22109: PPUSH
22110: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_EXP 68
22123: PPUSH
22124: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_INT 187
22135: PPUSH
22136: LD_INT 117
22138: PPUSH
22139: CALL_OW 171
// wait ( 0 0$10 ) ;
22143: LD_INT 350
22145: PPUSH
22146: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22150: LD_INT 35
22152: PPUSH
22153: CALL_OW 67
// if not HasTask ( cargo ) then
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 314
22166: NOT
22167: IFFALSE 22184
// ComMoveXY ( cargo , 187 , 117 ) ;
22169: LD_VAR 0 1
22173: PPUSH
22174: LD_INT 187
22176: PPUSH
22177: LD_INT 117
22179: PPUSH
22180: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22184: LD_VAR 0 1
22188: PPUSH
22189: CALL_OW 301
22193: PUSH
22194: LD_VAR 0 1
22198: PPUSH
22199: LD_INT 187
22201: PPUSH
22202: LD_INT 117
22204: PPUSH
22205: CALL_OW 307
22209: OR
22210: IFFALSE 22150
// if IsAt ( cargo , 187 , 117 ) then
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 187
22219: PPUSH
22220: LD_INT 117
22222: PPUSH
22223: CALL_OW 307
22227: IFFALSE 22238
// RemoveUnit ( cargo ) ;
22229: LD_VAR 0 1
22233: PPUSH
22234: CALL_OW 64
// end ; end_of_file
22238: PPOPN 1
22240: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL 49849 0 1
// if unit = Dietrich and not arabianAttack then
22250: LD_VAR 0 1
22254: PUSH
22255: LD_EXP 50
22259: EQUAL
22260: PUSH
22261: LD_EXP 4
22265: NOT
22266: AND
22267: IFFALSE 22276
// YouLost ( ArabDefeated ) ;
22269: LD_STRING ArabDefeated
22271: PPUSH
22272: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22276: LD_VAR 0 1
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 25
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 69
22309: IN
22310: PUSH
22311: LD_EXP 4
22315: NOT
22316: AND
22317: IFFALSE 22326
// YouLost ( ArabDefeated ) ;
22319: LD_STRING ArabDefeated
22321: PPUSH
22322: CALL_OW 104
// if unit in JMMSquad then
22326: LD_VAR 0 1
22330: PUSH
22331: LD_EXP 45
22335: IN
22336: IFFALSE 22354
// JMMSquad := JMMSquad diff unit ;
22338: LD_ADDR_EXP 45
22342: PUSH
22343: LD_EXP 45
22347: PUSH
22348: LD_VAR 0 1
22352: DIFF
22353: ST_TO_ADDR
// if unit = Truman then
22354: LD_VAR 0 1
22358: PUSH
22359: LD_EXP 43
22363: EQUAL
22364: IFFALSE 22373
// YouLost ( Powell ) ;
22366: LD_STRING Powell
22368: PPUSH
22369: CALL_OW 104
// if unit = JMM then
22373: LD_VAR 0 1
22377: PUSH
22378: LD_EXP 23
22382: EQUAL
22383: IFFALSE 22392
// YouLost ( JMM ) ;
22385: LD_STRING JMM
22387: PPUSH
22388: CALL_OW 104
// if unit in arEscapist then
22392: LD_VAR 0 1
22396: PUSH
22397: LD_EXP 56
22401: IN
22402: IFFALSE 22420
// arEscapist := arEscapist diff unit ;
22404: LD_ADDR_EXP 56
22408: PUSH
22409: LD_EXP 56
22413: PUSH
22414: LD_VAR 0 1
22418: DIFF
22419: ST_TO_ADDR
// if unit in arAttackersInf then
22420: LD_VAR 0 1
22424: PUSH
22425: LD_EXP 57
22429: IN
22430: IFFALSE 22448
// arAttackersInf := arAttackersInf diff unit ;
22432: LD_ADDR_EXP 57
22436: PUSH
22437: LD_EXP 57
22441: PUSH
22442: LD_VAR 0 1
22446: DIFF
22447: ST_TO_ADDR
// if unit in arAttackersVeh then
22448: LD_VAR 0 1
22452: PUSH
22453: LD_EXP 58
22457: IN
22458: IFFALSE 22476
// arAttackersVeh := arAttackersVeh diff unit ;
22460: LD_ADDR_EXP 58
22464: PUSH
22465: LD_EXP 58
22469: PUSH
22470: LD_VAR 0 1
22474: DIFF
22475: ST_TO_ADDR
// if unit = Khatam then
22476: LD_VAR 0 1
22480: PUSH
22481: LD_EXP 36
22485: EQUAL
22486: IFFALSE 22496
// khatamStatus := false ;
22488: LD_ADDR_EXP 5
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// if unit = epsilon then
22496: LD_VAR 0 1
22500: PUSH
22501: LD_EXP 10
22505: EQUAL
22506: IFFALSE 22537
// begin hasBase := false ;
22508: LD_ADDR_EXP 9
22512: PUSH
22513: LD_INT 0
22515: ST_TO_ADDR
// epsilon := 0 ;
22516: LD_ADDR_EXP 10
22520: PUSH
22521: LD_INT 0
22523: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22524: LD_INT 0
22526: PPUSH
22527: LD_INT 1
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 324
// end ; if unit = Khatam then
22537: LD_VAR 0 1
22541: PUSH
22542: LD_EXP 36
22546: EQUAL
22547: IFFALSE 22559
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22549: LD_INT 0
22551: PPUSH
22552: LD_STRING 10_KhatamStatus_1
22554: PPUSH
22555: CALL_OW 39
// if unit in ruForces then
22559: LD_VAR 0 1
22563: PUSH
22564: LD_EXP 59
22568: IN
22569: IFFALSE 22587
// ruForces := ruForces diff unit ;
22571: LD_ADDR_EXP 59
22575: PUSH
22576: LD_EXP 59
22580: PUSH
22581: LD_VAR 0 1
22585: DIFF
22586: ST_TO_ADDR
// if unit in ruForces2 then
22587: LD_VAR 0 1
22591: PUSH
22592: LD_EXP 60
22596: IN
22597: IFFALSE 22615
// ruForces2 := ruForces2 diff unit ;
22599: LD_ADDR_EXP 60
22603: PUSH
22604: LD_EXP 60
22608: PUSH
22609: LD_VAR 0 1
22613: DIFF
22614: ST_TO_ADDR
// if unit in ruTanks then
22615: LD_VAR 0 1
22619: PUSH
22620: LD_EXP 79
22624: IN
22625: IFFALSE 22643
// ruTanks := ruTanks diff unit ;
22627: LD_ADDR_EXP 79
22631: PUSH
22632: LD_EXP 79
22636: PUSH
22637: LD_VAR 0 1
22641: DIFF
22642: ST_TO_ADDR
// if unit in ruTanks2 then
22643: LD_VAR 0 1
22647: PUSH
22648: LD_EXP 80
22652: IN
22653: IFFALSE 22671
// ruTanks2 := ruTanks2 diff unit ;
22655: LD_ADDR_EXP 80
22659: PUSH
22660: LD_EXP 80
22664: PUSH
22665: LD_VAR 0 1
22669: DIFF
22670: ST_TO_ADDR
// if unit in ruExtraTanks then
22671: LD_VAR 0 1
22675: PUSH
22676: LD_EXP 81
22680: IN
22681: IFFALSE 22699
// ruExtraTanks := ruExtraTanks diff unit ;
22683: LD_ADDR_EXP 81
22687: PUSH
22688: LD_EXP 81
22692: PUSH
22693: LD_VAR 0 1
22697: DIFF
22698: ST_TO_ADDR
// if unit in ruMech then
22699: LD_VAR 0 1
22703: PUSH
22704: LD_EXP 63
22708: IN
22709: IFFALSE 22727
// ruMech := ruMech diff unit ;
22711: LD_ADDR_EXP 63
22715: PUSH
22716: LD_EXP 63
22720: PUSH
22721: LD_VAR 0 1
22725: DIFF
22726: ST_TO_ADDR
// if unit in ruMech2 then
22727: LD_VAR 0 1
22731: PUSH
22732: LD_EXP 64
22736: IN
22737: IFFALSE 22755
// ruMech2 := ruMech2 diff unit ;
22739: LD_ADDR_EXP 64
22743: PUSH
22744: LD_EXP 64
22748: PUSH
22749: LD_VAR 0 1
22753: DIFF
22754: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22755: LD_VAR 0 1
22759: PPUSH
22760: CALL_OW 266
22764: PUSH
22765: LD_INT 32
22767: PUSH
22768: LD_INT 33
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: IN
22775: PUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 255
22785: PUSH
22786: LD_INT 3
22788: EQUAL
22789: AND
22790: IFFALSE 22946
// begin if IsInArea ( unit , ruBaseArea ) then
22792: LD_VAR 0 1
22796: PPUSH
22797: LD_EXP 66
22801: PPUSH
22802: CALL_OW 308
22806: IFFALSE 22869
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22808: LD_ADDR_EXP 76
22812: PUSH
22813: LD_EXP 76
22817: PPUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL_OW 266
22827: PUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 250
22837: PUSH
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 251
22847: PUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 254
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PPUSH
22864: CALL 92928 0 2
22868: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_EXP 67
22878: PPUSH
22879: CALL_OW 308
22883: IFFALSE 22946
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22885: LD_ADDR_EXP 77
22889: PUSH
22890: LD_EXP 77
22894: PPUSH
22895: LD_VAR 0 1
22899: PPUSH
22900: CALL_OW 266
22904: PUSH
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 250
22914: PUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 251
22924: PUSH
22925: LD_VAR 0 1
22929: PPUSH
22930: CALL_OW 254
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: PPUSH
22941: CALL 92928 0 2
22945: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
22946: LD_VAR 0 1
22950: PUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 6
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 34
22963: PUSH
22964: LD_INT 51
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PPUSH
22975: CALL_OW 69
22979: IN
22980: IFFALSE 22990
// ruTransportDestroyed := true ;
22982: LD_ADDR_EXP 78
22986: PUSH
22987: LD_INT 1
22989: ST_TO_ADDR
// end ;
22990: PPOPN 1
22992: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
22993: LD_VAR 0 1
22997: PPUSH
22998: CALL_OW 110
23002: PUSH
23003: LD_INT 7
23005: EQUAL
23006: IFFALSE 23020
// SetTag ( un , 0 ) ;
23008: LD_VAR 0 1
23012: PPUSH
23013: LD_INT 0
23015: PPUSH
23016: CALL_OW 109
// end ;
23020: PPOPN 3
23022: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 22
23030: PUSH
23031: LD_INT 3
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 25
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PPUSH
23052: CALL_OW 69
23056: IN
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 266
23067: PUSH
23068: LD_INT 3
23070: EQUAL
23071: AND
23072: PUSH
23073: LD_VAR 0 2
23077: PPUSH
23078: CALL_OW 256
23082: PUSH
23083: LD_INT 1000
23085: LESS
23086: AND
23087: IFFALSE 23113
// begin SetTag ( un , 0 ) ;
23089: LD_VAR 0 2
23093: PPUSH
23094: LD_INT 0
23096: PPUSH
23097: CALL_OW 109
// SetLives ( un , 1000 ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_INT 1000
23108: PPUSH
23109: CALL_OW 234
// end ; end ;
23113: PPOPN 2
23115: END
// on UnitGoesToRed ( un ) do var i ;
23116: LD_INT 0
23118: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23119: LD_VAR 0 1
23123: PUSH
23124: LD_EXP 36
23128: EQUAL
23129: PUSH
23130: LD_EXP 36
23134: PPUSH
23135: CALL_OW 255
23139: PUSH
23140: LD_INT 8
23142: EQUAL
23143: AND
23144: IFFALSE 23155
// KillUnit ( Khatam ) ;
23146: LD_EXP 36
23150: PPUSH
23151: CALL_OW 66
// end ;
23155: PPOPN 2
23157: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23158: LD_EXP 6
23162: NOT
23163: IFFALSE 23197
// begin seenRussianTeleport := true ;
23165: LD_ADDR_EXP 6
23169: PUSH
23170: LD_INT 1
23172: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 250
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 251
23192: PPUSH
23193: CALL 26535 0 2
// end ; end ;
23197: PPOPN 1
23199: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23200: LD_INT 0
23202: PPUSH
23203: PPUSH
23204: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23205: LD_VAR 0 2
23209: PUSH
23210: LD_INT 2
23212: EQUAL
23213: PUSH
23214: LD_VAR 0 1
23218: PPUSH
23219: CALL_OW 266
23223: PUSH
23224: LD_INT 7
23226: PUSH
23227: LD_INT 6
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 5
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: IN
23242: AND
23243: IFFALSE 23362
// begin for i := 1 to rand ( 2 , 4 ) do
23245: LD_ADDR_VAR 0 4
23249: PUSH
23250: DOUBLE
23251: LD_INT 1
23253: DEC
23254: ST_TO_ADDR
23255: LD_INT 2
23257: PPUSH
23258: LD_INT 4
23260: PPUSH
23261: CALL_OW 12
23265: PUSH
23266: FOR_TO
23267: IFFALSE 23360
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23269: LD_ADDR_VAR 0 5
23273: PUSH
23274: LD_VAR 0 1
23278: PPUSH
23279: CALL_OW 250
23283: PUSH
23284: LD_INT 2
23286: NEG
23287: PPUSH
23288: LD_INT 2
23290: PPUSH
23291: CALL_OW 12
23295: MINUS
23296: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23297: LD_ADDR_VAR 0 6
23301: PUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: CALL_OW 251
23311: PUSH
23312: LD_INT 2
23314: NEG
23315: PPUSH
23316: LD_INT 2
23318: PPUSH
23319: CALL_OW 12
23323: PLUS
23324: ST_TO_ADDR
// if ValidHex ( x , y ) then
23325: LD_VAR 0 5
23329: PPUSH
23330: LD_VAR 0 6
23334: PPUSH
23335: CALL_OW 488
23339: IFFALSE 23358
// MineExplosion ( x , y , 10 ) ;
23341: LD_VAR 0 5
23345: PPUSH
23346: LD_VAR 0 6
23350: PPUSH
23351: LD_INT 10
23353: PPUSH
23354: CALL_OW 453
// end ;
23358: GO 23266
23360: POP
23361: POP
// end ; end ;
23362: PPOPN 6
23364: END
// on VehicleConstructed ( veh , fac ) do var side ;
23365: LD_INT 0
23367: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23368: LD_VAR 0 1
23372: PPUSH
23373: LD_VAR 0 2
23377: PPUSH
23378: CALL 49907 0 2
// side := GetSide ( fac ) ;
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_VAR 0 2
23391: PPUSH
23392: CALL_OW 255
23396: ST_TO_ADDR
// if side = 3 then
23397: LD_VAR 0 3
23401: PUSH
23402: LD_INT 3
23404: EQUAL
23405: IFFALSE 23589
// begin if IsInArea ( fac , ruBaseArea ) then
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_EXP 66
23416: PPUSH
23417: CALL_OW 308
23421: IFFALSE 23498
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23423: LD_ADDR_EXP 70
23427: PUSH
23428: LD_EXP 70
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 3
23440: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 263
23450: PUSH
23451: LD_INT 1
23453: EQUAL
23454: IFFALSE 23478
// ruTanks := Join ( ruTanks , veh ) else
23456: LD_ADDR_EXP 79
23460: PUSH
23461: LD_EXP 79
23465: PPUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL 92928 0 2
23475: ST_TO_ADDR
23476: GO 23498
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23478: LD_ADDR_EXP 81
23482: PUSH
23483: LD_EXP 81
23487: PPUSH
23488: LD_VAR 0 1
23492: PPUSH
23493: CALL 92928 0 2
23497: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_EXP 67
23507: PPUSH
23508: CALL_OW 308
23512: IFFALSE 23589
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23514: LD_ADDR_EXP 71
23518: PUSH
23519: LD_EXP 71
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 3
23531: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23532: LD_VAR 0 1
23536: PPUSH
23537: CALL_OW 263
23541: PUSH
23542: LD_INT 1
23544: EQUAL
23545: IFFALSE 23569
// ruTanks2 := Join ( ruTanks2 , veh ) else
23547: LD_ADDR_EXP 80
23551: PUSH
23552: LD_EXP 80
23556: PPUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL 92928 0 2
23566: ST_TO_ADDR
23567: GO 23589
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23569: LD_ADDR_EXP 81
23573: PUSH
23574: LD_EXP 81
23578: PPUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: CALL 92928 0 2
23588: ST_TO_ADDR
// end ; end ; end ;
23589: PPOPN 3
23591: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
23596: PPUSH
// begin side := GetSide ( driver ) ;
23597: LD_ADDR_VAR 0 7
23601: PUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 255
23611: ST_TO_ADDR
// if side = 5 then
23612: LD_VAR 0 7
23616: PUSH
23617: LD_INT 5
23619: EQUAL
23620: IFFALSE 23700
// begin arAttackersVeh := arAttackersVeh diff driver ;
23622: LD_ADDR_EXP 58
23626: PUSH
23627: LD_EXP 58
23631: PUSH
23632: LD_VAR 0 1
23636: DIFF
23637: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_INT 189
23645: PPUSH
23646: LD_INT 80
23648: PPUSH
23649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23653: LD_INT 35
23655: PPUSH
23656: CALL_OW 67
// if not IsOk ( driver ) then
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 302
23669: NOT
23670: IFFALSE 23674
// exit ;
23672: GO 24224
// until IsAt ( driver , 189 , 80 ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: LD_INT 189
23681: PPUSH
23682: LD_INT 80
23684: PPUSH
23685: CALL_OW 307
23689: IFFALSE 23653
// RemoveUnit ( driver ) ;
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL_OW 64
// end ; if side = 6 then
23700: LD_VAR 0 7
23704: PUSH
23705: LD_INT 6
23707: EQUAL
23708: IFFALSE 23766
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23710: LD_VAR 0 1
23714: PPUSH
23715: LD_INT 19
23717: PPUSH
23718: CALL_OW 113
// wait ( 0 0$3 ) ;
23722: LD_INT 105
23724: PPUSH
23725: CALL_OW 67
// if not IsOk ( driver ) then
23729: LD_VAR 0 1
23733: PPUSH
23734: CALL_OW 302
23738: NOT
23739: IFFALSE 23743
// exit ;
23741: GO 24224
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_INT 19
23750: PPUSH
23751: CALL_OW 308
23755: IFFALSE 23710
// RemoveUnit ( driver ) ;
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 64
// end ; if side = 3 then
23766: LD_VAR 0 7
23770: PUSH
23771: LD_INT 3
23773: EQUAL
23774: IFFALSE 24224
// begin if driver in ruMech then
23776: LD_VAR 0 1
23780: PUSH
23781: LD_EXP 63
23785: IN
23786: IFFALSE 24000
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23788: LD_VAR 0 1
23792: PPUSH
23793: LD_EXP 66
23797: PPUSH
23798: CALL_OW 113
// SetTag ( driver , tMech ) ;
23802: LD_VAR 0 1
23806: PPUSH
23807: LD_INT 7
23809: PPUSH
23810: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
23814: LD_ADDR_VAR 0 6
23818: PUSH
23819: LD_EXP 66
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 30
23836: PUSH
23837: LD_INT 3
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 50
23846: PUSH
23847: EMPTY
23848: LIST
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PPUSH
23855: CALL_OW 70
23859: ST_TO_ADDR
// if fac then
23860: LD_VAR 0 6
23864: IFFALSE 23886
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
23866: LD_VAR 0 1
23870: PPUSH
23871: LD_VAR 0 6
23875: PUSH
23876: LD_INT 1
23878: ARRAY
23879: PPUSH
23880: CALL_OW 180
// exit ;
23884: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
23886: LD_ADDR_VAR 0 5
23890: PUSH
23891: LD_EXP 66
23895: PPUSH
23896: LD_INT 22
23898: PUSH
23899: LD_INT 3
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 30
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 30
23921: PUSH
23922: LD_INT 5
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: LD_INT 62
23939: PUSH
23940: EMPTY
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 50
23949: PUSH
23950: EMPTY
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PPUSH
23959: CALL_OW 70
23963: ST_TO_ADDR
// if arm then
23964: LD_VAR 0 5
23968: IFFALSE 24000
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
23970: LD_VAR 0 1
23974: PPUSH
23975: LD_VAR 0 5
23979: PUSH
23980: LD_INT 1
23982: ARRAY
23983: PPUSH
23984: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
23988: LD_VAR 0 1
23992: PPUSH
23993: LD_INT 1
23995: PPUSH
23996: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24000: LD_VAR 0 1
24004: PUSH
24005: LD_EXP 64
24009: IN
24010: IFFALSE 24224
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_EXP 67
24021: PPUSH
24022: CALL_OW 113
// SetTag ( driver , tMech ) ;
24026: LD_VAR 0 1
24030: PPUSH
24031: LD_INT 7
24033: PPUSH
24034: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24038: LD_ADDR_VAR 0 6
24042: PUSH
24043: LD_EXP 67
24047: PPUSH
24048: LD_INT 22
24050: PUSH
24051: LD_INT 3
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 30
24060: PUSH
24061: LD_INT 3
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 50
24070: PUSH
24071: EMPTY
24072: LIST
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: PPUSH
24079: CALL_OW 70
24083: ST_TO_ADDR
// if fac then
24084: LD_VAR 0 6
24088: IFFALSE 24110
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_VAR 0 6
24099: PUSH
24100: LD_INT 1
24102: ARRAY
24103: PPUSH
24104: CALL_OW 180
// exit ;
24108: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: LD_EXP 67
24119: PPUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 3
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 30
24135: PUSH
24136: LD_INT 4
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 30
24145: PUSH
24146: LD_INT 5
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 3
24160: PUSH
24161: LD_INT 62
24163: PUSH
24164: EMPTY
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 50
24173: PUSH
24174: EMPTY
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 70
24187: ST_TO_ADDR
// if arm then
24188: LD_VAR 0 5
24192: IFFALSE 24224
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_VAR 0 5
24203: PUSH
24204: LD_INT 1
24206: ARRAY
24207: PPUSH
24208: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24212: LD_VAR 0 1
24216: PPUSH
24217: LD_INT 1
24219: PPUSH
24220: CALL_OW 183
// end ; end ; end ; end ;
24224: PPOPN 7
24226: END
// on EndTheMissionRaised ( ev ) do begin if end_the_mission_allowed then
24227: LD_OWVAR 57
24231: IFFALSE 24245
// begin end_the_mission_allowed := false ;
24233: LD_ADDR_OWVAR 57
24237: PUSH
24238: LD_INT 0
24240: ST_TO_ADDR
// FinishMission ;
24241: CALL 31983 0 0
// end ; end ;
24245: PPOPN 1
24247: END
// on BuildingComplete ( b ) do var side , type ;
24248: LD_INT 0
24250: PPUSH
24251: PPUSH
// begin side := GetSide ( b ) ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_VAR 0 1
24261: PPUSH
24262: CALL_OW 255
24266: ST_TO_ADDR
// type := GetBType ( b ) ;
24267: LD_ADDR_VAR 0 3
24271: PUSH
24272: LD_VAR 0 1
24276: PPUSH
24277: CALL_OW 266
24281: ST_TO_ADDR
// if side = 2 then
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 2
24289: EQUAL
24290: IFFALSE 24310
// arBuildings := Delete ( arBuildings , 1 ) ;
24292: LD_ADDR_EXP 53
24296: PUSH
24297: LD_EXP 53
24301: PPUSH
24302: LD_INT 1
24304: PPUSH
24305: CALL_OW 3
24309: ST_TO_ADDR
// if side = 1 then
24310: LD_VAR 0 2
24314: PUSH
24315: LD_INT 1
24317: EQUAL
24318: IFFALSE 24380
// if type = b_depot and not hasBase then
24320: LD_VAR 0 3
24324: PUSH
24325: LD_INT 0
24327: EQUAL
24328: PUSH
24329: LD_EXP 9
24333: NOT
24334: AND
24335: IFFALSE 24380
// begin hasBase := true ;
24337: LD_ADDR_EXP 9
24341: PUSH
24342: LD_INT 1
24344: ST_TO_ADDR
// epsilon := b ;
24345: LD_ADDR_EXP 10
24349: PUSH
24350: LD_VAR 0 1
24354: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24355: LD_VAR 0 1
24359: PPUSH
24360: LD_STRING epsilon
24362: PPUSH
24363: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24367: LD_INT 0
24369: PPUSH
24370: LD_INT 1
24372: PPUSH
24373: LD_INT 0
24375: PPUSH
24376: CALL_OW 324
// end ; if side = 3 then
24380: LD_VAR 0 2
24384: PUSH
24385: LD_INT 3
24387: EQUAL
24388: IFFALSE 24674
// begin if IsInArea ( b , ruBaseArea ) then
24390: LD_VAR 0 1
24394: PPUSH
24395: LD_EXP 66
24399: PPUSH
24400: CALL_OW 308
24404: IFFALSE 24424
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24406: LD_ADDR_EXP 76
24410: PUSH
24411: LD_EXP 76
24415: PPUSH
24416: LD_INT 1
24418: PPUSH
24419: CALL_OW 3
24423: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_EXP 67
24433: PPUSH
24434: CALL_OW 308
24438: IFFALSE 24458
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24440: LD_ADDR_EXP 77
24444: PUSH
24445: LD_EXP 77
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 3
24457: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24458: LD_VAR 0 3
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: IN
24477: IFFALSE 24488
// ComUpgrade ( b ) ;
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 146
// if type = b_lab then
24488: LD_VAR 0 3
24492: PUSH
24493: LD_INT 6
24495: EQUAL
24496: IFFALSE 24540
// if IsInArea ( b , ruBaseArea ) then
24498: LD_VAR 0 1
24502: PPUSH
24503: LD_EXP 66
24507: PPUSH
24508: CALL_OW 308
24512: IFFALSE 24528
// ComUpgradeLab ( b , b_lab_weapon ) else
24514: LD_VAR 0 1
24518: PPUSH
24519: LD_INT 10
24521: PPUSH
24522: CALL_OW 147
24526: GO 24540
// ComUpgradeLab ( b , b_lab_computer ) ;
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_INT 12
24535: PPUSH
24536: CALL_OW 147
// if type = b_depot then
24540: LD_VAR 0 3
24544: PUSH
24545: LD_INT 0
24547: EQUAL
24548: IFFALSE 24674
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24550: LD_VAR 0 1
24554: PPUSH
24555: CALL_OW 274
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: LD_INT 2550
24565: PPUSH
24566: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: CALL_OW 274
24579: PPUSH
24580: LD_INT 2
24582: PPUSH
24583: LD_INT 250
24585: PPUSH
24586: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 274
24599: PPUSH
24600: LD_INT 3
24602: PPUSH
24603: LD_INT 200
24605: PPUSH
24606: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24610: LD_VAR 0 1
24614: PPUSH
24615: LD_EXP 66
24619: PPUSH
24620: CALL_OW 308
24624: IFFALSE 24648
// begin ruBase := b ;
24626: LD_ADDR_EXP 68
24630: PUSH
24631: LD_VAR 0 1
24635: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24636: LD_VAR 0 1
24640: PPUSH
24641: LD_STRING chuikov
24643: PPUSH
24644: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_EXP 67
24657: PPUSH
24658: CALL_OW 308
24662: IFFALSE 24674
// begin ruBase2 := b ;
24664: LD_ADDR_EXP 69
24668: PUSH
24669: LD_VAR 0 1
24673: ST_TO_ADDR
// end ; end ; end ; end ;
24674: PPOPN 3
24676: END
// on UpgradeComplete ( b ) do var side , type ;
24677: LD_INT 0
24679: PPUSH
24680: PPUSH
// begin side := GetSide ( b ) ;
24681: LD_ADDR_VAR 0 2
24685: PUSH
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 255
24695: ST_TO_ADDR
// type := GetBType ( b ) ;
24696: LD_ADDR_VAR 0 3
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 266
24710: ST_TO_ADDR
// if side = 3 then
24711: LD_VAR 0 2
24715: PUSH
24716: LD_INT 3
24718: EQUAL
24719: IFFALSE 24773
// if type = b_lab_half then
24721: LD_VAR 0 3
24725: PUSH
24726: LD_INT 7
24728: EQUAL
24729: IFFALSE 24773
// if IsInArea ( b , ruBaseArea ) then
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_EXP 66
24740: PPUSH
24741: CALL_OW 308
24745: IFFALSE 24761
// ComUpgradeLab ( b , b_lab_spacetime ) else
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_INT 14
24754: PPUSH
24755: CALL_OW 147
24759: GO 24773
// ComUpgradeLab ( b , b_lab_siberium ) ;
24761: LD_VAR 0 1
24765: PPUSH
24766: LD_INT 11
24768: PPUSH
24769: CALL_OW 147
// end ;
24773: PPOPN 3
24775: END
// on ResearchComplete ( tech , lab ) do var side ;
24776: LD_INT 0
24778: PPUSH
// begin side := GetSide ( lab ) ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: CALL_OW 255
24793: ST_TO_ADDR
// if side = 2 then
24794: LD_VAR 0 3
24798: PUSH
24799: LD_INT 2
24801: EQUAL
24802: IFFALSE 24850
// begin arTech := Delete ( arTech , 1 ) ;
24804: LD_ADDR_EXP 52
24808: PUSH
24809: LD_EXP 52
24813: PPUSH
24814: LD_INT 1
24816: PPUSH
24817: CALL_OW 3
24821: ST_TO_ADDR
// if tech = tech_sibPow then
24822: LD_VAR 0 1
24826: PUSH
24827: LD_INT 21
24829: EQUAL
24830: IFFALSE 24836
// DArabTrait1 ;
24832: CALL 28897 0 0
// if tech = tech_sibEng then
24836: LD_VAR 0 1
24840: PUSH
24841: LD_INT 22
24843: EQUAL
24844: IFFALSE 24850
// DArabTrait2 ;
24846: CALL 29228 0 0
// end ; end ;
24850: PPOPN 3
24852: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL 49891 0 1
// end ;
24862: PPOPN 1
24864: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24865: LD_VAR 0 1
24869: PUSH
24870: LD_INT 1
24872: EQUAL
24873: PUSH
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 2
24881: EQUAL
24882: AND
24883: PUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 2
24889: PPUSH
24890: CALL_OW 81
24894: PUSH
24895: LD_INT 1
24897: EQUAL
24898: AND
24899: IFFALSE 24905
// DAttackOnAlly ;
24901: CALL 26613 0 0
// end ;
24905: PPOPN 2
24907: END
// on SailEvent ( event ) do begin case event of EArabAttack :
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 101
24915: DOUBLE
24916: EQUAL
24917: IFTRUE 24921
24919: GO 24928
24921: POP
// ArabAttack ; ERussianBaseC :
24922: CALL 7224 0 0
24926: GO 25080
24928: LD_INT 102
24930: DOUBLE
24931: EQUAL
24932: IFTRUE 24936
24934: GO 24957
24936: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
24937: LD_EXP 59
24941: PUSH
24942: LD_EXP 61
24946: UNION
24947: PPUSH
24948: LD_INT 1
24950: PPUSH
24951: CALL 10861 0 2
24955: GO 25080
24957: LD_INT 103
24959: DOUBLE
24960: EQUAL
24961: IFTRUE 24965
24963: GO 24986
24965: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
24966: LD_EXP 59
24970: PUSH
24971: LD_EXP 61
24975: UNION
24976: PPUSH
24977: LD_INT 2
24979: PPUSH
24980: CALL 10861 0 2
24984: GO 25080
24986: LD_INT 104
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25015
24994: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
24995: LD_EXP 59
24999: PUSH
25000: LD_EXP 61
25004: UNION
25005: PPUSH
25006: LD_INT 3
25008: PPUSH
25009: CALL 10861 0 2
25013: GO 25080
25015: LD_INT 105
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25044
25023: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25024: LD_EXP 60
25028: PUSH
25029: LD_EXP 62
25033: UNION
25034: PPUSH
25035: LD_INT 2
25037: PPUSH
25038: CALL 12370 0 2
25042: GO 25080
25044: LD_INT 106
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25059
25052: POP
// RussianExtraAttack ; ESendRussianAttack :
25053: CALL 20205 0 0
25057: GO 25080
25059: LD_INT 107
25061: DOUBLE
25062: EQUAL
25063: IFTRUE 25067
25065: GO 25079
25067: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25068: LD_EXP 18
25072: PPUSH
25073: CALL 21299 0 1
25077: GO 25080
25079: POP
// end ; end_of_file
25080: PPOPN 1
25082: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25083: LD_INT 0
25085: PPUSH
25086: PPUSH
25087: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25088: LD_ADDR_VAR 0 1
25092: PUSH
25093: LD_VAR 0 1
25097: PUSH
25098: LD_EXP 23
25102: PUSH
25103: LD_EXP 24
25107: PUSH
25108: LD_EXP 25
25112: PUSH
25113: LD_EXP 26
25117: PUSH
25118: LD_EXP 27
25122: PUSH
25123: LD_EXP 28
25127: PUSH
25128: LD_EXP 29
25132: PUSH
25133: LD_EXP 30
25137: PUSH
25138: LD_EXP 31
25142: PUSH
25143: LD_EXP 32
25147: PUSH
25148: LD_EXP 33
25152: PUSH
25153: LD_EXP 34
25157: PUSH
25158: LD_EXP 35
25162: PUSH
25163: LD_EXP 36
25167: PUSH
25168: LD_EXP 37
25172: PUSH
25173: LD_EXP 38
25177: PUSH
25178: LD_EXP 39
25182: PUSH
25183: LD_EXP 40
25187: PUSH
25188: LD_EXP 42
25192: PUSH
25193: LD_EXP 44
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: DIFF
25220: ST_TO_ADDR
// if not characters then
25221: LD_VAR 0 1
25225: NOT
25226: IFFALSE 25230
// exit ;
25228: GO 25314
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25230: LD_ADDR_VAR 0 6
25234: PUSH
25235: LD_VAR 0 1
25239: PUSH
25240: LD_INT 1
25242: PPUSH
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL 57319 0 1
25252: PPUSH
25253: CALL_OW 12
25257: ARRAY
25258: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25259: LD_VAR 0 6
25263: PPUSH
25264: CALL_OW 258
25268: PUSH
25269: LD_INT 1
25271: EQUAL
25272: IFFALSE 25290
// Say ( speaker , dialogMID ) else
25274: LD_VAR 0 6
25278: PPUSH
25279: LD_VAR 0 2
25283: PPUSH
25284: CALL_OW 88
25288: GO 25304
// Say ( speaker , dialogFID ) ;
25290: LD_VAR 0 6
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: CALL_OW 88
// result := speaker ;
25304: LD_ADDR_VAR 0 4
25308: PUSH
25309: LD_VAR 0 6
25313: ST_TO_ADDR
// end ; end_of_file
25314: LD_VAR 0 4
25318: RET
// export function Action ; begin
25319: LD_INT 0
25321: PPUSH
// InGameOn ;
25322: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25326: LD_INT 25
25328: PPUSH
25329: LD_INT 35
25331: PPUSH
25332: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25336: LD_INT 1
25338: PPUSH
25339: LD_INT 5
25341: PPUSH
25342: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25346: LD_INT 1
25348: PPUSH
25349: LD_INT 4
25351: PPUSH
25352: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25356: LD_INT 52
25358: PPUSH
25359: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25363: LD_EXP 33
25367: PPUSH
25368: CALL_OW 87
// wait ( 0 0$3 ) ;
25372: LD_INT 105
25374: PPUSH
25375: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25379: LD_EXP 23
25383: PPUSH
25384: CALL_OW 310
25388: PPUSH
25389: CALL_OW 85
// wait ( 0 0$1 ) ;
25393: LD_INT 35
25395: PPUSH
25396: CALL_OW 67
// if IsOk ( Gary ) then
25400: LD_EXP 32
25404: PPUSH
25405: CALL_OW 302
25409: IFFALSE 25447
// begin Say ( Gary , D2-Gary-1 ) ;
25411: LD_EXP 32
25415: PPUSH
25416: LD_STRING D2-Gary-1
25418: PPUSH
25419: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25423: LD_EXP 23
25427: PPUSH
25428: LD_STRING D2-JMM-1
25430: PPUSH
25431: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25435: LD_EXP 32
25439: PPUSH
25440: LD_STRING D2-Gary-2
25442: PPUSH
25443: CALL_OW 88
// end ; InGameOff ;
25447: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25451: LD_STRING M1
25453: PPUSH
25454: CALL_OW 337
// SaveForQuickRestart ;
25458: CALL_OW 22
// end ;
25462: LD_VAR 0 1
25466: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25467: LD_EXP 23
25471: PPUSH
25472: LD_EXP 33
25476: PPUSH
25477: CALL_OW 296
25481: PUSH
25482: LD_INT 15
25484: LESS
25485: IFFALSE 26445
25487: GO 25489
25489: DISABLE
25490: LD_INT 0
25492: PPUSH
25493: PPUSH
// begin wait ( 0 0$3 ) ;
25494: LD_INT 105
25496: PPUSH
25497: CALL_OW 67
// Video ( true ) ;
25501: LD_INT 1
25503: PPUSH
25504: CALL 92900 0 1
// ComExitVehicle ( JMM ) ;
25508: LD_EXP 23
25512: PPUSH
25513: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25517: LD_EXP 23
25521: PPUSH
25522: LD_EXP 33
25526: PPUSH
25527: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25531: LD_EXP 23
25535: PPUSH
25536: CALL_OW 87
// if Truman then
25540: LD_EXP 43
25544: IFFALSE 25681
// begin ComMoveUnit ( Truman , JMM ) ;
25546: LD_EXP 43
25550: PPUSH
25551: LD_EXP 23
25555: PPUSH
25556: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25560: LD_INT 35
25562: PPUSH
25563: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25567: LD_EXP 43
25571: PPUSH
25572: LD_EXP 23
25576: PPUSH
25577: CALL_OW 296
25581: PUSH
25582: LD_INT 6
25584: LESS
25585: IFFALSE 25560
// ComTurnUnit ( Truman , JMM ) ;
25587: LD_EXP 43
25591: PPUSH
25592: LD_EXP 23
25596: PPUSH
25597: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25601: LD_EXP 23
25605: PPUSH
25606: LD_EXP 43
25610: PPUSH
25611: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25615: LD_EXP 43
25619: PPUSH
25620: LD_STRING D2-Tru-1
25622: PPUSH
25623: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25627: LD_EXP 23
25631: PPUSH
25632: LD_STRING D2-JMM-Tru-1
25634: PPUSH
25635: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25639: LD_EXP 43
25643: PPUSH
25644: LD_STRING D2-Tru-2
25646: PPUSH
25647: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25651: LD_EXP 43
25655: PPUSH
25656: LD_INT 79
25658: PPUSH
25659: LD_INT 41
25661: PPUSH
25662: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25666: LD_EXP 43
25670: PPUSH
25671: LD_INT 17
25673: PPUSH
25674: LD_INT 31
25676: PPUSH
25677: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25681: LD_EXP 23
25685: PPUSH
25686: LD_EXP 33
25690: PPUSH
25691: CALL_OW 179
// p := 15 ;
25695: LD_ADDR_VAR 0 2
25699: PUSH
25700: LD_INT 15
25702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25703: LD_INT 35
25705: PPUSH
25706: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25710: LD_EXP 33
25714: PUSH
25715: LD_EXP 35
25719: PUSH
25720: LD_EXP 34
25724: PUSH
25725: LD_EXP 36
25729: PUSH
25730: LD_EXP 30
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: PPUSH
25742: LD_EXP 23
25746: PPUSH
25747: CALL_OW 112
// p := p - 1 ;
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_VAR 0 2
25760: PUSH
25761: LD_INT 1
25763: MINUS
25764: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25765: LD_EXP 23
25769: PPUSH
25770: LD_EXP 33
25774: PPUSH
25775: CALL_OW 296
25779: PUSH
25780: LD_INT 5
25782: LESS
25783: PUSH
25784: LD_VAR 0 2
25788: PUSH
25789: LD_INT 0
25791: LESSEQUAL
25792: OR
25793: IFFALSE 25703
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25795: LD_EXP 33
25799: PUSH
25800: LD_EXP 35
25804: PUSH
25805: LD_EXP 34
25809: PUSH
25810: LD_EXP 36
25814: PUSH
25815: LD_EXP 30
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: PPUSH
25827: LD_EXP 23
25831: PPUSH
25832: CALL_OW 119
// if not IsInUnit ( JMM ) then
25836: LD_EXP 23
25840: PPUSH
25841: CALL_OW 310
25845: NOT
25846: IFFALSE 25862
// ComTurnUnit ( JMM , Simms ) ;
25848: LD_EXP 23
25852: PPUSH
25853: LD_EXP 33
25857: PPUSH
25858: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
25862: LD_EXP 33
25866: PUSH
25867: LD_EXP 35
25871: PUSH
25872: LD_EXP 34
25876: PUSH
25877: LD_EXP 36
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: PPUSH
25888: LD_EXP 23
25892: PPUSH
25893: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
25897: LD_EXP 23
25901: PUSH
25902: LD_EXP 33
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PPUSH
25911: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
25915: LD_EXP 33
25919: PPUSH
25920: LD_STRING D2a-Sim-1
25922: PPUSH
25923: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
25927: LD_EXP 23
25931: PPUSH
25932: LD_STRING D2a-JMM-1
25934: PPUSH
25935: CALL_OW 88
// if IsOk ( Joan ) then
25939: LD_EXP 35
25943: PPUSH
25944: CALL_OW 302
25948: IFFALSE 26026
// begin if not IsInUnit ( JMM ) then
25950: LD_EXP 23
25954: PPUSH
25955: CALL_OW 310
25959: NOT
25960: IFFALSE 25976
// ComTurnUnit ( JMM , Joan ) ;
25962: LD_EXP 23
25966: PPUSH
25967: LD_EXP 35
25971: PPUSH
25972: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
25976: LD_EXP 35
25980: PPUSH
25981: LD_EXP 23
25985: PPUSH
25986: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
25990: LD_EXP 35
25994: PPUSH
25995: LD_STRING D2b-Joan-1
25997: PPUSH
25998: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26002: LD_EXP 23
26006: PPUSH
26007: LD_STRING D2b-JMM-1
26009: PPUSH
26010: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26014: LD_EXP 35
26018: PPUSH
26019: LD_STRING D2b-Joan-2
26021: PPUSH
26022: CALL_OW 88
// end ; if IsOk ( Denis ) then
26026: LD_EXP 34
26030: PPUSH
26031: CALL_OW 302
26035: IFFALSE 26089
// begin if not IsInUnit ( JMM ) then
26037: LD_EXP 23
26041: PPUSH
26042: CALL_OW 310
26046: NOT
26047: IFFALSE 26063
// ComTurnUnit ( JMM , Denis ) ;
26049: LD_EXP 23
26053: PPUSH
26054: LD_EXP 34
26058: PPUSH
26059: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26063: LD_EXP 34
26067: PPUSH
26068: LD_EXP 23
26072: PPUSH
26073: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26077: LD_EXP 34
26081: PPUSH
26082: LD_STRING D2c-Den-1
26084: PPUSH
26085: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26089: LD_EXP 30
26093: PPUSH
26094: CALL_OW 302
26098: PUSH
26099: LD_STRING 08_Kikuchi
26101: PPUSH
26102: CALL_OW 28
26106: NOT
26107: AND
26108: IFFALSE 26203
// begin repeat wait ( 0 0$1 ) ;
26110: LD_INT 35
26112: PPUSH
26113: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26117: LD_EXP 30
26121: PPUSH
26122: LD_EXP 23
26126: PPUSH
26127: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26131: LD_EXP 23
26135: PPUSH
26136: LD_EXP 30
26140: PPUSH
26141: CALL_OW 296
26145: PUSH
26146: LD_INT 5
26148: LESS
26149: IFFALSE 26110
// ComTurnUnit ( Kikuchi , JMM ) ;
26151: LD_EXP 30
26155: PPUSH
26156: LD_EXP 23
26160: PPUSH
26161: CALL_OW 119
// if not IsInUnit ( JMM ) then
26165: LD_EXP 23
26169: PPUSH
26170: CALL_OW 310
26174: NOT
26175: IFFALSE 26191
// ComTurnUnit ( JMM , Kikuchi ) ;
26177: LD_EXP 23
26181: PPUSH
26182: LD_EXP 30
26186: PPUSH
26187: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26191: LD_EXP 30
26195: PPUSH
26196: LD_STRING D3b-Yam-1
26198: PPUSH
26199: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26203: LD_EXP 36
26207: PPUSH
26208: CALL_OW 302
26212: IFFALSE 26278
// begin if not IsInUnit ( JMM ) then
26214: LD_EXP 23
26218: PPUSH
26219: CALL_OW 310
26223: NOT
26224: IFFALSE 26240
// ComTurnUnit ( JMM , Khatam ) ;
26226: LD_EXP 23
26230: PPUSH
26231: LD_EXP 36
26235: PPUSH
26236: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26240: LD_EXP 36
26244: PPUSH
26245: LD_EXP 23
26249: PPUSH
26250: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26254: LD_EXP 23
26258: PPUSH
26259: LD_STRING D2c-JMM-1
26261: PPUSH
26262: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26266: LD_EXP 36
26270: PPUSH
26271: LD_STRING D2c-Khat-1
26273: PPUSH
26274: CALL_OW 88
// end ; Video ( false ) ;
26278: LD_INT 0
26280: PPUSH
26281: CALL 92900 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26285: LD_INT 22
26287: PUSH
26288: LD_INT 4
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 69
26299: PUSH
26300: LD_EXP 43
26304: DIFF
26305: PPUSH
26306: LD_INT 1
26308: PPUSH
26309: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26313: LD_STRING M1a
26315: PPUSH
26316: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26320: LD_INT 0
26322: PPUSH
26323: LD_INT 1
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 324
// joinedToEpsilon := true ;
26333: LD_ADDR_EXP 7
26337: PUSH
26338: LD_INT 1
26340: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26341: LD_INT 1050
26343: PPUSH
26344: CALL_OW 67
// SpawnConvoy ;
26348: CALL 10397 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26352: LD_INT 25200
26354: PUSH
26355: LD_INT 2100
26357: PUSH
26358: LD_OWVAR 67
26362: MUL
26363: MINUS
26364: PPUSH
26365: CALL_OW 67
// firstAttack := true ;
26369: LD_ADDR_EXP 16
26373: PUSH
26374: LD_INT 1
26376: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26377: LD_INT 107
26379: PPUSH
26380: CALL_OW 427
// for i := 1 to Difficulty do
26384: LD_ADDR_VAR 0 1
26388: PUSH
26389: DOUBLE
26390: LD_INT 1
26392: DEC
26393: ST_TO_ADDR
26394: LD_OWVAR 67
26398: PUSH
26399: FOR_TO
26400: IFFALSE 26443
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26402: LD_INT 25200
26404: PUSH
26405: LD_INT 2100
26407: PUSH
26408: LD_OWVAR 67
26412: MUL
26413: MINUS
26414: PPUSH
26415: CALL_OW 67
// if not ruActiveAttacks then
26419: LD_EXP 22
26423: NOT
26424: IFFALSE 26434
// ruActiveAttacks := true ;
26426: LD_ADDR_EXP 22
26430: PUSH
26431: LD_INT 1
26433: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26434: LD_INT 107
26436: PPUSH
26437: CALL_OW 427
// end ;
26441: GO 26399
26443: POP
26444: POP
// end ;
26445: PPOPN 2
26447: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26448: LD_EXP 43
26452: PPUSH
26453: CALL_OW 302
26457: PUSH
26458: LD_EXP 7
26462: AND
26463: IFFALSE 26534
26465: GO 26467
26467: DISABLE
// begin enable ;
26468: ENABLE
// if not HasTask ( Truman ) then
26469: LD_EXP 43
26473: PPUSH
26474: CALL_OW 314
26478: NOT
26479: IFFALSE 26493
// ComMoveToArea ( Truman , removeArea ) ;
26481: LD_EXP 43
26485: PPUSH
26486: LD_INT 10
26488: PPUSH
26489: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26493: LD_EXP 43
26497: PPUSH
26498: LD_INT 17
26500: PPUSH
26501: LD_INT 32
26503: PPUSH
26504: CALL_OW 307
26508: PUSH
26509: LD_EXP 43
26513: PPUSH
26514: LD_INT 10
26516: PPUSH
26517: CALL_OW 308
26521: OR
26522: IFFALSE 26534
// begin RemoveUnit ( Truman ) ;
26524: LD_EXP 43
26528: PPUSH
26529: CALL_OW 64
// disable ;
26533: DISABLE
// end ; end ;
26534: END
// export function DTankTeleport ( x , y ) ; begin
26535: LD_INT 0
26537: PPUSH
// DialogueOn ;
26538: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26542: LD_VAR 0 1
26546: PPUSH
26547: LD_VAR 0 2
26551: PPUSH
26552: CALL_OW 86
// if IsOk ( Cyrus ) then
26556: LD_EXP 27
26560: PPUSH
26561: CALL_OW 302
26565: IFFALSE 26581
// Say ( Cyrus , D10-Cyrus-1 ) else
26567: LD_EXP 27
26571: PPUSH
26572: LD_STRING D10-Cyrus-1
26574: PPUSH
26575: CALL_OW 88
26579: GO 26604
// if IsOk ( JMM ) then
26581: LD_EXP 23
26585: PPUSH
26586: CALL_OW 302
26590: IFFALSE 26604
// Say ( JMM , D10-JMM-1 ) ;
26592: LD_EXP 23
26596: PPUSH
26597: LD_STRING D10-JMM-1
26599: PPUSH
26600: CALL_OW 88
// DialogueOff ;
26604: CALL_OW 7
// end ;
26608: LD_VAR 0 3
26612: RET
// export function DAttackOnAlly ; begin
26613: LD_INT 0
26615: PPUSH
// DialogueOn ;
26616: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26620: LD_INT 10
26622: PPUSH
26623: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26627: LD_EXP 44
26631: PPUSH
26632: LD_STRING D6b-Pow-1
26634: PPUSH
26635: CALL_OW 94
// YouLost ( Powell ) ;
26639: LD_STRING Powell
26641: PPUSH
26642: CALL_OW 104
// DialogueOff ;
26646: CALL_OW 7
// end ;
26650: LD_VAR 0 1
26654: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26655: LD_INT 5
26657: PPUSH
26658: LD_INT 22
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 21
26670: PUSH
26671: LD_INT 3
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 70
26686: PUSH
26687: LD_INT 5
26689: PPUSH
26690: LD_INT 22
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 21
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PPUSH
26714: CALL_OW 70
26718: OR
26719: PUSH
26720: LD_INT 1
26722: PPUSH
26723: LD_INT 2
26725: PPUSH
26726: CALL_OW 81
26730: PUSH
26731: LD_INT 1
26733: EQUAL
26734: AND
26735: IFFALSE 26970
26737: GO 26739
26739: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26740: LD_INT 5
26742: PPUSH
26743: LD_INT 22
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 21
26755: PUSH
26756: LD_INT 3
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PPUSH
26767: CALL_OW 70
26771: PUSH
26772: LD_INT 5
26774: PPUSH
26775: LD_INT 22
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 21
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PPUSH
26799: CALL_OW 70
26803: OR
26804: PUSH
26805: LD_INT 1
26807: PPUSH
26808: LD_INT 2
26810: PPUSH
26811: CALL_OW 81
26815: PUSH
26816: LD_INT 1
26818: EQUAL
26819: AND
26820: IFFALSE 26829
// Query ( QAttack ) ;
26822: LD_STRING QAttack
26824: PPUSH
26825: CALL_OW 97
// wait ( 0 0$20 ) ;
26829: LD_INT 700
26831: PPUSH
26832: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26836: LD_INT 350
26838: PPUSH
26839: CALL_OW 67
// if arabianAttack then
26843: LD_EXP 4
26847: IFFALSE 26851
// exit ;
26849: GO 26970
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26851: LD_INT 5
26853: PPUSH
26854: LD_INT 22
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 21
26866: PUSH
26867: LD_INT 3
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 70
26882: PUSH
26883: LD_INT 5
26885: PPUSH
26886: LD_INT 22
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 21
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PPUSH
26910: CALL_OW 70
26914: OR
26915: PUSH
26916: LD_INT 1
26918: PPUSH
26919: LD_INT 2
26921: PPUSH
26922: CALL_OW 81
26926: PUSH
26927: LD_INT 1
26929: EQUAL
26930: AND
26931: IFFALSE 26836
// InGameOn ;
26933: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26937: LD_INT 73
26939: PPUSH
26940: LD_INT 18
26942: PPUSH
26943: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26947: LD_EXP 44
26951: PPUSH
26952: LD_STRING D6b-Pow-1
26954: PPUSH
26955: CALL_OW 94
// YouLost ( Powell ) ;
26959: LD_STRING Powell
26961: PPUSH
26962: CALL_OW 104
// InGameOff ;
26966: CALL_OW 9
// end ;
26970: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
26971: LD_INT 12
26973: PPUSH
26974: LD_INT 1
26976: PPUSH
26977: CALL_OW 321
26981: PUSH
26982: LD_INT 2
26984: EQUAL
26985: IFFALSE 26997
26987: GO 26989
26989: DISABLE
// ChangeMissionObjectives ( M2b ) ;
26990: LD_STRING M2b
26992: PPUSH
26993: CALL_OW 337
26997: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
26998: LD_INT 32
27000: PPUSH
27001: LD_INT 1
27003: PPUSH
27004: CALL_OW 321
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: IFFALSE 27024
27014: GO 27016
27016: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27017: LD_STRING M2c
27019: PPUSH
27020: CALL_OW 337
27024: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27025: LD_EXP 4
27029: PUSH
27030: LD_EXP 12
27034: AND
27035: PUSH
27036: LD_INT 22
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 21
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PPUSH
27060: CALL_OW 69
27064: PUSH
27065: LD_INT 0
27067: EQUAL
27068: AND
27069: PUSH
27070: LD_EXP 58
27074: PPUSH
27075: LD_INT 50
27077: PUSH
27078: EMPTY
27079: LIST
27080: PPUSH
27081: CALL_OW 72
27085: PUSH
27086: LD_INT 0
27088: EQUAL
27089: AND
27090: PUSH
27091: LD_EXP 57
27095: PPUSH
27096: LD_INT 50
27098: PUSH
27099: EMPTY
27100: LIST
27101: PPUSH
27102: CALL_OW 72
27106: PUSH
27107: LD_INT 0
27109: EQUAL
27110: AND
27111: IFFALSE 27131
27113: GO 27115
27115: DISABLE
// begin arabianDefeated := true ;
27116: LD_ADDR_EXP 8
27120: PUSH
27121: LD_INT 1
27123: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27124: LD_STRING M4a
27126: PPUSH
27127: CALL_OW 337
// end ;
27131: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27132: LD_INT 54
27134: PPUSH
27135: LD_INT 1
27137: PPUSH
27138: CALL_OW 321
27142: PUSH
27143: LD_INT 2
27145: EQUAL
27146: PUSH
27147: LD_INT 55
27149: PPUSH
27150: LD_INT 1
27152: PPUSH
27153: CALL_OW 321
27157: PUSH
27158: LD_INT 2
27160: EQUAL
27161: AND
27162: PUSH
27163: LD_INT 21
27165: PPUSH
27166: LD_INT 1
27168: PPUSH
27169: CALL_OW 321
27173: PUSH
27174: LD_INT 2
27176: EQUAL
27177: AND
27178: PUSH
27179: LD_INT 22
27181: PPUSH
27182: LD_INT 1
27184: PPUSH
27185: CALL_OW 321
27189: PUSH
27190: LD_INT 2
27192: EQUAL
27193: AND
27194: IFFALSE 27206
27196: GO 27198
27198: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27199: LD_STRING M2a
27201: PPUSH
27202: CALL_OW 337
27206: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27207: LD_INT 22
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: LD_INT 57
27222: PUSH
27223: EMPTY
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 63
27232: PUSH
27233: LD_INT 11
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: PPUSH
27245: CALL_OW 69
27249: IFFALSE 28475
27251: GO 27253
27253: DISABLE
27254: LD_INT 0
27256: PPUSH
27257: PPUSH
27258: PPUSH
27259: PPUSH
27260: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_EXP 32
27270: PPUSH
27271: CALL_OW 302
27275: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_EXP 39
27285: PPUSH
27286: CALL_OW 302
27290: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27291: LD_ADDR_VAR 0 3
27295: PUSH
27296: LD_INT 22
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 50
27308: PUSH
27309: EMPTY
27310: LIST
27311: PUSH
27312: LD_INT 25
27314: PUSH
27315: LD_INT 4
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 26
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: PUSH
27343: LD_EXP 23
27347: PUSH
27348: LD_EXP 24
27352: PUSH
27353: LD_EXP 25
27357: PUSH
27358: LD_EXP 26
27362: PUSH
27363: LD_EXP 27
27367: PUSH
27368: LD_EXP 28
27372: PUSH
27373: LD_EXP 29
27377: PUSH
27378: LD_EXP 30
27382: PUSH
27383: LD_EXP 31
27387: PUSH
27388: LD_EXP 32
27392: PUSH
27393: LD_EXP 33
27397: PUSH
27398: LD_EXP 34
27402: PUSH
27403: LD_EXP 35
27407: PUSH
27408: LD_EXP 36
27412: PUSH
27413: LD_EXP 37
27417: PUSH
27418: LD_EXP 38
27422: PUSH
27423: LD_EXP 39
27427: PUSH
27428: LD_EXP 40
27432: PUSH
27433: LD_EXP 42
27437: PUSH
27438: LD_EXP 44
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: DIFF
27465: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27466: LD_ADDR_VAR 0 4
27470: PUSH
27471: LD_INT 22
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 50
27483: PUSH
27484: EMPTY
27485: LIST
27486: PUSH
27487: LD_INT 26
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 25
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 25
27512: PUSH
27513: LD_INT 2
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 25
27522: PUSH
27523: LD_INT 3
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 69
27546: PUSH
27547: LD_EXP 23
27551: PUSH
27552: LD_EXP 24
27556: PUSH
27557: LD_EXP 25
27561: PUSH
27562: LD_EXP 26
27566: PUSH
27567: LD_EXP 27
27571: PUSH
27572: LD_EXP 28
27576: PUSH
27577: LD_EXP 29
27581: PUSH
27582: LD_EXP 30
27586: PUSH
27587: LD_EXP 31
27591: PUSH
27592: LD_EXP 32
27596: PUSH
27597: LD_EXP 33
27601: PUSH
27602: LD_EXP 34
27606: PUSH
27607: LD_EXP 35
27611: PUSH
27612: LD_EXP 36
27616: PUSH
27617: LD_EXP 37
27621: PUSH
27622: LD_EXP 38
27626: PUSH
27627: LD_EXP 39
27631: PUSH
27632: LD_EXP 40
27636: PUSH
27637: LD_EXP 42
27641: PUSH
27642: LD_EXP 44
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: DIFF
27669: ST_TO_ADDR
// if tmp1 then
27670: LD_VAR 0 3
27674: IFFALSE 27690
// tmp1 := tmp1 [ 1 ] ;
27676: LD_ADDR_VAR 0 3
27680: PUSH
27681: LD_VAR 0 3
27685: PUSH
27686: LD_INT 1
27688: ARRAY
27689: ST_TO_ADDR
// if tmp2 then
27690: LD_VAR 0 4
27694: IFFALSE 27710
// tmp2 := tmp2 [ 1 ] ;
27696: LD_ADDR_VAR 0 4
27700: PUSH
27701: LD_VAR 0 4
27705: PUSH
27706: LD_INT 1
27708: ARRAY
27709: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27710: LD_VAR 0 1
27714: PUSH
27715: LD_VAR 0 4
27719: OR
27720: PUSH
27721: LD_VAR 0 2
27725: PUSH
27726: LD_VAR 0 3
27730: OR
27731: AND
27732: IFFALSE 27926
// begin DialogueOn ;
27734: CALL_OW 6
// if deltaSpeaker then
27738: LD_VAR 0 2
27742: IFFALSE 27758
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27744: LD_EXP 39
27748: PPUSH
27749: LD_STRING D3-Sci1-1
27751: PPUSH
27752: CALL_OW 88
27756: GO 27770
// Say ( tmp1 , D3-Sci1-1 ) ;
27758: LD_VAR 0 3
27762: PPUSH
27763: LD_STRING D3-Sci1-1
27765: PPUSH
27766: CALL_OW 88
// if garySpeaker then
27770: LD_VAR 0 1
27774: IFFALSE 27790
// Say ( Gary , D3-Gary-1 ) else
27776: LD_EXP 32
27780: PPUSH
27781: LD_STRING D3-Gary-1
27783: PPUSH
27784: CALL_OW 88
27788: GO 27802
// Say ( tmp2 , D3-Gary-1 ) ;
27790: LD_VAR 0 4
27794: PPUSH
27795: LD_STRING D3-Gary-1
27797: PPUSH
27798: CALL_OW 88
// if deltaSpeaker then
27802: LD_VAR 0 2
27806: IFFALSE 27822
// Say ( DeltaDoctor , D3-Sci1-2 ) else
27808: LD_EXP 39
27812: PPUSH
27813: LD_STRING D3-Sci1-2
27815: PPUSH
27816: CALL_OW 88
27820: GO 27834
// Say ( tmp1 , D3-Sci1-2 ) ;
27822: LD_VAR 0 3
27826: PPUSH
27827: LD_STRING D3-Sci1-2
27829: PPUSH
27830: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
27834: LD_EXP 23
27838: PPUSH
27839: LD_STRING D3-JMM-2
27841: PPUSH
27842: CALL_OW 88
// if deltaSpeaker then
27846: LD_VAR 0 2
27850: IFFALSE 27866
// Say ( DeltaDoctor , D3-Sci1-3 ) else
27852: LD_EXP 39
27856: PPUSH
27857: LD_STRING D3-Sci1-3
27859: PPUSH
27860: CALL_OW 88
27864: GO 27878
// Say ( tmp1 , D3-Sci1-3 ) ;
27866: LD_VAR 0 3
27870: PPUSH
27871: LD_STRING D3-Sci1-3
27873: PPUSH
27874: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
27878: LD_EXP 23
27882: PPUSH
27883: LD_STRING D3-JMM-3
27885: PPUSH
27886: CALL_OW 88
// if deltaSpeaker then
27890: LD_VAR 0 2
27894: IFFALSE 27910
// Say ( DeltaDoctor , D3-Sci1-4 ) else
27896: LD_EXP 39
27900: PPUSH
27901: LD_STRING D3-Sci1-4
27903: PPUSH
27904: CALL_OW 88
27908: GO 27922
// Say ( tmp1 , D3-Sci1-4 ) ;
27910: LD_VAR 0 3
27914: PPUSH
27915: LD_STRING D3-Sci1-4
27917: PPUSH
27918: CALL_OW 88
// DialogueOff ;
27922: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
27926: LD_INT 12
27928: PPUSH
27929: LD_INT 1
27931: PPUSH
27932: LD_INT 1
27934: PPUSH
27935: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
27939: LD_INT 40
27941: PPUSH
27942: LD_INT 1
27944: PPUSH
27945: LD_INT 1
27947: PPUSH
27948: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
27952: LD_INT 32
27954: PPUSH
27955: LD_INT 1
27957: PPUSH
27958: LD_INT 1
27960: PPUSH
27961: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
27965: LD_INT 33
27967: PPUSH
27968: LD_INT 1
27970: PPUSH
27971: LD_INT 1
27973: PPUSH
27974: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
27978: LD_INT 12
27980: PPUSH
27981: LD_INT 1
27983: PPUSH
27984: LD_INT 1
27986: PPUSH
27987: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
27991: LD_STRING M2
27993: PPUSH
27994: CALL_OW 337
// wait ( 3 3$0 ) ;
27998: LD_INT 6300
28000: PPUSH
28001: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28005: LD_INT 35
28007: PPUSH
28008: CALL_OW 67
// until not InBattle ( 1 ) ;
28012: LD_INT 1
28014: PPUSH
28015: CALL_OW 463
28019: NOT
28020: IFFALSE 28005
// if IsOk ( Simms ) and deltaSpeaker then
28022: LD_EXP 33
28026: PPUSH
28027: CALL_OW 302
28031: PUSH
28032: LD_VAR 0 2
28036: AND
28037: IFFALSE 28206
// begin DialogueOn ;
28039: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28043: LD_EXP 33
28047: PPUSH
28048: LD_STRING D3a-Sim-1
28050: PPUSH
28051: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28055: LD_EXP 39
28059: PPUSH
28060: LD_STRING D3a-Sci1-1
28062: PPUSH
28063: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28067: LD_EXP 33
28071: PPUSH
28072: LD_STRING D3a-Sim-2
28074: PPUSH
28075: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28079: LD_EXP 39
28083: PPUSH
28084: LD_STRING D3a-Sci1-2
28086: PPUSH
28087: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28091: LD_EXP 33
28095: PPUSH
28096: LD_STRING D3a-Sim-3
28098: PPUSH
28099: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28103: LD_EXP 39
28107: PPUSH
28108: LD_STRING D3a-Sci1-3
28110: PPUSH
28111: CALL_OW 88
// if IsOK ( Joan ) then
28115: LD_EXP 35
28119: PPUSH
28120: CALL_OW 302
28124: IFFALSE 28140
// Say ( Simms , D3a-Sim-4 ) else
28126: LD_EXP 33
28130: PPUSH
28131: LD_STRING D3a-Sim-4
28133: PPUSH
28134: CALL_OW 88
28138: GO 28152
// Say ( Simms , D3a-Sim-4a ) ;
28140: LD_EXP 33
28144: PPUSH
28145: LD_STRING D3a-Sim-4a
28147: PPUSH
28148: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28152: LD_EXP 39
28156: PPUSH
28157: LD_STRING D3a-Sci1-4
28159: PPUSH
28160: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28164: LD_EXP 33
28168: PPUSH
28169: LD_STRING D3a-Sim-5
28171: PPUSH
28172: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28176: LD_EXP 39
28180: PPUSH
28181: LD_STRING D3a-Sci1-5
28183: PPUSH
28184: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28188: LD_EXP 33
28192: PPUSH
28193: LD_STRING D3a-Sim-6
28195: PPUSH
28196: CALL_OW 88
// DialogueOff ;
28200: CALL_OW 7
// end else
28204: GO 28475
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28206: LD_ADDR_VAR 0 5
28210: PUSH
28211: LD_INT 22
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 26
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 25
28233: PUSH
28234: LD_INT 4
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: LIST
28245: PPUSH
28246: CALL_OW 69
28250: PUSH
28251: LD_EXP 23
28255: PUSH
28256: LD_EXP 29
28260: PUSH
28261: LD_EXP 28
28265: PUSH
28266: LD_EXP 33
28270: PUSH
28271: LD_EXP 36
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: DIFF
28283: ST_TO_ADDR
// if tmp3 then
28284: LD_VAR 0 5
28288: IFFALSE 28475
// begin DialogueOn ;
28290: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28294: LD_EXP 33
28298: PPUSH
28299: LD_STRING D3a-Sim-1
28301: PPUSH
28302: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28306: LD_VAR 0 5
28310: PUSH
28311: LD_INT 1
28313: ARRAY
28314: PPUSH
28315: LD_STRING D3a-Sci1-1
28317: PPUSH
28318: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28322: LD_EXP 33
28326: PPUSH
28327: LD_STRING D3a-Sim-2
28329: PPUSH
28330: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28334: LD_VAR 0 5
28338: PUSH
28339: LD_INT 1
28341: ARRAY
28342: PPUSH
28343: LD_STRING D3a-Sci1-2
28345: PPUSH
28346: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28350: LD_EXP 33
28354: PPUSH
28355: LD_STRING D3a-Sim-3
28357: PPUSH
28358: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28362: LD_VAR 0 5
28366: PUSH
28367: LD_INT 1
28369: ARRAY
28370: PPUSH
28371: LD_STRING D3a-Sci1-3
28373: PPUSH
28374: CALL_OW 88
// if IsOK ( Joan ) then
28378: LD_EXP 35
28382: PPUSH
28383: CALL_OW 302
28387: IFFALSE 28403
// Say ( Simms , D3a-Sim-4 ) else
28389: LD_EXP 33
28393: PPUSH
28394: LD_STRING D3a-Sim-4
28396: PPUSH
28397: CALL_OW 88
28401: GO 28415
// Say ( Simms , D3a-Sim-4a ) ;
28403: LD_EXP 33
28407: PPUSH
28408: LD_STRING D3a-Sim-4a
28410: PPUSH
28411: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28415: LD_VAR 0 5
28419: PUSH
28420: LD_INT 1
28422: ARRAY
28423: PPUSH
28424: LD_STRING D3a-Sci1-4
28426: PPUSH
28427: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28431: LD_EXP 33
28435: PPUSH
28436: LD_STRING D3a-Sim-5
28438: PPUSH
28439: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28443: LD_VAR 0 5
28447: PUSH
28448: LD_INT 1
28450: ARRAY
28451: PPUSH
28452: LD_STRING D3a-Sci1-5
28454: PPUSH
28455: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28459: LD_EXP 33
28463: PPUSH
28464: LD_STRING D3a-Sim-6
28466: PPUSH
28467: CALL_OW 88
// DialogueOff ;
28471: CALL_OW 7
// end ; end ; end ;
28475: PPOPN 5
28477: END
// export function DRussianNextAttack ; begin
28478: LD_INT 0
28480: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28481: LD_EXP 40
28485: PPUSH
28486: LD_STRING D4-FSol1-2
28488: PPUSH
28489: CALL_OW 94
// end ;
28493: LD_VAR 0 1
28497: RET
// export function DRussianConvoy ; begin
28498: LD_INT 0
28500: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28501: LD_EXP 40
28505: PPUSH
28506: LD_STRING D4-FSol1-1
28508: PPUSH
28509: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28513: LD_STRING M3
28515: PPUSH
28516: CALL_OW 337
// end ;
28520: LD_VAR 0 1
28524: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28525: LD_INT 0
28527: PPUSH
// CenterNowOnUnits ( unit ) ;
28528: LD_VAR 0 1
28532: PPUSH
28533: CALL_OW 87
// DialogueOn ;
28537: CALL_OW 6
// if IsOK ( Cyrus ) then
28541: LD_EXP 27
28545: PPUSH
28546: CALL_OW 302
28550: IFFALSE 28566
// Say ( Cyrus , D9a-Cyrus-1 ) else
28552: LD_EXP 27
28556: PPUSH
28557: LD_STRING D9a-Cyrus-1
28559: PPUSH
28560: CALL_OW 88
28564: GO 28688
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28566: LD_INT 22
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 26
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 25
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 25
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 25
28611: PUSH
28612: LD_INT 3
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 25
28621: PUSH
28622: LD_INT 4
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 25
28631: PUSH
28632: LD_INT 5
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: PUSH
28657: LD_EXP 23
28661: PUSH
28662: LD_EXP 36
28666: PUSH
28667: LD_EXP 27
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: DIFF
28677: PPUSH
28678: LD_STRING D9a-Sol1-1
28680: PPUSH
28681: LD_STRING D9a-Sol1-1
28683: PPUSH
28684: CALL 25083 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28688: LD_INT 22
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 26
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 25
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 25
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 25
28733: PUSH
28734: LD_INT 3
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 25
28743: PUSH
28744: LD_INT 4
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 25
28753: PUSH
28754: LD_INT 5
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 69
28778: PUSH
28779: LD_EXP 23
28783: PUSH
28784: LD_EXP 36
28788: PUSH
28789: LD_EXP 27
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: DIFF
28799: PPUSH
28800: LD_STRING D9b-Sol1-1
28802: PPUSH
28803: LD_STRING D9b-Sol1-1
28805: PPUSH
28806: CALL 25083 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
28810: LD_STRING 09_arInfo
28812: PPUSH
28813: LD_INT 0
28815: PPUSH
28816: CALL_OW 30
28820: IFFALSE 28834
// Say ( JMM , D9a-JMM-1 ) ;
28822: LD_EXP 23
28826: PPUSH
28827: LD_STRING D9a-JMM-1
28829: PPUSH
28830: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
28834: LD_EXP 23
28838: PPUSH
28839: LD_STRING D9c-JMM-1
28841: PPUSH
28842: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
28846: LD_INT 22
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 25
28858: PUSH
28859: LD_INT 5
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PPUSH
28870: CALL_OW 69
28874: IFFALSE 28888
// Say ( JMM , D9c-JMM-1a ) ;
28876: LD_EXP 23
28880: PPUSH
28881: LD_STRING D9c-JMM-1a
28883: PPUSH
28884: CALL_OW 88
// DialogueOff ;
28888: CALL_OW 7
// end ;
28892: LD_VAR 0 2
28896: RET
// export function DArabTrait1 ; var tmp ; begin
28897: LD_INT 0
28899: PPUSH
28900: PPUSH
// if IsOk ( DeltaDoctor ) then
28901: LD_EXP 39
28905: PPUSH
28906: CALL_OW 302
28910: IFFALSE 28924
// tmp := DeltaDoctor else
28912: LD_ADDR_VAR 0 2
28916: PUSH
28917: LD_EXP 39
28921: ST_TO_ADDR
28922: GO 29122
// if IsOk ( Denis ) then
28924: LD_EXP 34
28928: PPUSH
28929: CALL_OW 302
28933: IFFALSE 28947
// tmp := Denis else
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: LD_EXP 34
28944: ST_TO_ADDR
28945: GO 29122
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
28947: LD_ADDR_VAR 0 2
28951: PUSH
28952: LD_INT 22
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 50
28964: PUSH
28965: EMPTY
28966: LIST
28967: PUSH
28968: LD_INT 25
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 26
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 69
28998: PUSH
28999: LD_EXP 23
29003: PUSH
29004: LD_EXP 24
29008: PUSH
29009: LD_EXP 25
29013: PUSH
29014: LD_EXP 26
29018: PUSH
29019: LD_EXP 27
29023: PUSH
29024: LD_EXP 28
29028: PUSH
29029: LD_EXP 29
29033: PUSH
29034: LD_EXP 30
29038: PUSH
29039: LD_EXP 31
29043: PUSH
29044: LD_EXP 32
29048: PUSH
29049: LD_EXP 33
29053: PUSH
29054: LD_EXP 34
29058: PUSH
29059: LD_EXP 35
29063: PUSH
29064: LD_EXP 36
29068: PUSH
29069: LD_EXP 37
29073: PUSH
29074: LD_EXP 38
29078: PUSH
29079: LD_EXP 39
29083: PUSH
29084: LD_EXP 40
29088: PUSH
29089: LD_EXP 42
29093: PUSH
29094: LD_EXP 44
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: DIFF
29121: ST_TO_ADDR
// if not tmp then
29122: LD_VAR 0 2
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29223
// DialogueOn ;
29131: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29135: LD_EXP 23
29139: PPUSH
29140: LD_STRING D6-JMM-1
29142: PPUSH
29143: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29147: LD_VAR 0 2
29151: PPUSH
29152: LD_STRING D6-Sci1-1
29154: PPUSH
29155: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29159: LD_EXP 23
29163: PPUSH
29164: LD_STRING D6-JMM-2
29166: PPUSH
29167: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_STRING D6-Sci1-2
29178: PPUSH
29179: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29183: LD_EXP 23
29187: PPUSH
29188: LD_STRING D6-JMM-3
29190: PPUSH
29191: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29195: LD_VAR 0 2
29199: PPUSH
29200: LD_STRING D6-Sci1-3
29202: PPUSH
29203: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29207: LD_EXP 23
29211: PPUSH
29212: LD_STRING D6-JMM-4
29214: PPUSH
29215: CALL_OW 88
// DialogueOff ;
29219: CALL_OW 7
// end ;
29223: LD_VAR 0 1
29227: RET
// export function DArabTrait2 ; begin
29228: LD_INT 0
29230: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29231: LD_EXP 36
29235: PPUSH
29236: CALL_OW 305
29240: NOT
29241: PUSH
29242: LD_EXP 51
29246: PPUSH
29247: CALL_OW 302
29251: NOT
29252: OR
29253: PUSH
29254: LD_EXP 50
29258: PPUSH
29259: CALL_OW 302
29263: NOT
29264: OR
29265: IFFALSE 29269
// exit ;
29267: GO 29325
// DialogueOn ;
29269: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29273: LD_EXP 51
29277: PPUSH
29278: LD_STRING D5-Ar1-1
29280: PPUSH
29281: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29285: LD_EXP 50
29289: PPUSH
29290: LD_STRING D5-Diet-1
29292: PPUSH
29293: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29297: LD_EXP 51
29301: PPUSH
29302: LD_STRING D5-Ar1-2
29304: PPUSH
29305: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29309: LD_EXP 50
29313: PPUSH
29314: LD_STRING D5-Diet-2
29316: PPUSH
29317: CALL_OW 88
// DialogueOff ;
29321: CALL_OW 7
// end ;
29325: LD_VAR 0 1
29329: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29330: LD_EXP 4
29334: IFFALSE 31047
29336: GO 29338
29338: DISABLE
29339: LD_INT 0
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29349: LD_INT 2
29351: PPUSH
29352: LD_INT 3
29354: PPUSH
29355: LD_INT 1
29357: PPUSH
29358: LD_INT 1
29360: PPUSH
29361: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29365: LD_INT 2
29367: PPUSH
29368: LD_INT 6
29370: PPUSH
29371: LD_INT 1
29373: PPUSH
29374: LD_INT 1
29376: PPUSH
29377: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29381: LD_ADDR_VAR 0 5
29385: PUSH
29386: LD_INT 22
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 2
29398: PUSH
29399: LD_INT 25
29401: PUSH
29402: LD_INT 4
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 25
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 25
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PPUSH
29439: CALL_OW 69
29443: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
29444: LD_ADDR_VAR 0 4
29448: PUSH
29449: LD_INT 22
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 21
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 25
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 25
29484: PUSH
29485: LD_INT 8
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 25
29494: PUSH
29495: LD_INT 15
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: PPUSH
29513: CALL_OW 69
29517: PUSH
29518: LD_EXP 50
29522: DIFF
29523: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29524: LD_ADDR_VAR 0 6
29528: PUSH
29529: LD_INT 22
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 30
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PPUSH
29553: CALL_OW 69
29557: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29558: LD_VAR 0 5
29562: PPUSH
29563: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29567: LD_VAR 0 4
29571: PPUSH
29572: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29576: LD_INT 101
29578: PPUSH
29579: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29583: LD_EXP 40
29587: PPUSH
29588: LD_STRING D4-FSol1-3
29590: PPUSH
29591: CALL_OW 94
// for i in arCivilian do
29595: LD_ADDR_VAR 0 1
29599: PUSH
29600: LD_VAR 0 5
29604: PUSH
29605: FOR_IN
29606: IFFALSE 29685
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29608: LD_VAR 0 1
29612: PPUSH
29613: LD_VAR 0 6
29617: PUSH
29618: LD_VAR 0 1
29622: PUSH
29623: LD_INT 2
29625: MOD
29626: PUSH
29627: LD_INT 1
29629: PLUS
29630: ARRAY
29631: PPUSH
29632: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29636: LD_VAR 0 1
29640: PPUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 8
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PPUSH
29654: LD_INT 2
29656: PPUSH
29657: CALL_OW 12
29661: ARRAY
29662: PPUSH
29663: CALL_OW 183
// AddComExitBuilding ( i ) ;
29667: LD_VAR 0 1
29671: PPUSH
29672: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29676: LD_INT 18
29678: PPUSH
29679: CALL_OW 67
// end ;
29683: GO 29605
29685: POP
29686: POP
// wait ( 0 0$5 ) ;
29687: LD_INT 175
29689: PPUSH
29690: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29694: LD_INT 76
29696: PPUSH
29697: LD_INT 19
29699: PPUSH
29700: CALL_OW 84
// DialogueOn ;
29704: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29708: LD_INT 22
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 26
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 25
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 25
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 25
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 25
29763: PUSH
29764: LD_INT 4
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 25
29773: PUSH
29774: LD_INT 5
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: PPUSH
29794: CALL_OW 69
29798: PPUSH
29799: LD_STRING D8-Sol1-1
29801: PPUSH
29802: LD_STRING D8-Sol1-1
29804: PPUSH
29805: CALL 25083 0 3
// if IsOk ( DeltaDoctor ) then
29809: LD_EXP 39
29813: PPUSH
29814: CALL_OW 302
29818: IFFALSE 29834
// Say ( DeltaDoctor , D8-Sci1-1 ) else
29820: LD_EXP 39
29824: PPUSH
29825: LD_STRING D8-Sci1-1
29827: PPUSH
29828: CALL_OW 88
29832: GO 29935
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29834: LD_INT 22
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 26
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 25
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 25
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 25
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 69
29924: PPUSH
29925: LD_STRING D8-Sol1-1
29927: PPUSH
29928: LD_STRING D8-Sol1-1
29930: PPUSH
29931: CALL 25083 0 3
// Say ( JMM , D8-JMM-1 ) ;
29935: LD_EXP 23
29939: PPUSH
29940: LD_STRING D8-JMM-1
29942: PPUSH
29943: CALL_OW 88
// DialogueOff ;
29947: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
29951: LD_INT 2
29953: PPUSH
29954: LD_INT 2
29956: PPUSH
29957: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
29961: LD_INT 1
29963: PPUSH
29964: LD_INT 2
29966: PPUSH
29967: LD_INT 2
29969: PPUSH
29970: LD_INT 1
29972: PPUSH
29973: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
29977: LD_INT 3
29979: PPUSH
29980: LD_INT 2
29982: PPUSH
29983: LD_INT 1
29985: PPUSH
29986: LD_INT 1
29988: PPUSH
29989: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
29993: LD_INT 6
29995: PPUSH
29996: LD_INT 2
29998: PPUSH
29999: LD_INT 1
30001: PPUSH
30002: LD_INT 1
30004: PPUSH
30005: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30009: LD_STRING M4
30011: PPUSH
30012: CALL_OW 337
// wait ( 0 0$1 ) ;
30016: LD_INT 35
30018: PPUSH
30019: CALL_OW 67
// if IsLive ( Khatam ) then
30023: LD_EXP 36
30027: PPUSH
30028: CALL_OW 300
30032: IFFALSE 30046
// DoNotAttack ( 2 , Khatam ) ;
30034: LD_INT 2
30036: PPUSH
30037: LD_EXP 36
30041: PPUSH
30042: CALL_OW 471
// wait ( 0 0$1 ) ;
30046: LD_INT 35
30048: PPUSH
30049: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30053: LD_ADDR_VAR 0 7
30057: PUSH
30058: LD_INT 22
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 21
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PPUSH
30082: CALL_OW 69
30086: PPUSH
30087: LD_VAR 0 4
30091: PUSH
30092: LD_INT 1
30094: ARRAY
30095: PPUSH
30096: CALL_OW 74
30100: ST_TO_ADDR
// for i := 1 to 3 do
30101: LD_ADDR_VAR 0 1
30105: PUSH
30106: DOUBLE
30107: LD_INT 1
30109: DEC
30110: ST_TO_ADDR
30111: LD_INT 3
30113: PUSH
30114: FOR_TO
30115: IFFALSE 30174
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ i ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30117: LD_VAR 0 4
30121: PPUSH
30122: LD_INT 25
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PPUSH
30132: CALL_OW 72
30136: PUSH
30137: LD_VAR 0 1
30141: ARRAY
30142: PPUSH
30143: LD_VAR 0 7
30147: PPUSH
30148: CALL_OW 250
30152: PPUSH
30153: LD_VAR 0 7
30157: PPUSH
30158: CALL_OW 251
30162: PPUSH
30163: LD_VAR 0 7
30167: PPUSH
30168: CALL_OW 192
30172: GO 30114
30174: POP
30175: POP
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
30176: LD_VAR 0 4
30180: PPUSH
30181: LD_INT 84
30183: PPUSH
30184: LD_INT 22
30186: PPUSH
30187: CALL_OW 174
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30191: LD_VAR 0 4
30195: PPUSH
30196: LD_INT 95
30198: PPUSH
30199: LD_INT 12
30201: PPUSH
30202: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30206: LD_VAR 0 4
30210: PPUSH
30211: LD_INT 102
30213: PPUSH
30214: LD_INT 11
30216: PPUSH
30217: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30221: LD_VAR 0 4
30225: PPUSH
30226: LD_INT 116
30228: PPUSH
30229: LD_INT 15
30231: PPUSH
30232: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30236: LD_VAR 0 4
30240: PPUSH
30241: LD_INT 140
30243: PPUSH
30244: LD_INT 25
30246: PPUSH
30247: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
30251: LD_ADDR_VAR 0 4
30255: PUSH
30256: LD_INT 22
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 21
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 25
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 25
30291: PUSH
30292: LD_INT 8
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 25
30301: PUSH
30302: LD_INT 15
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: PPUSH
30320: CALL_OW 69
30324: PUSH
30325: LD_EXP 50
30329: DIFF
30330: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30331: LD_ADDR_VAR 0 5
30335: PUSH
30336: LD_INT 22
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 21
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 25
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 25
30381: PUSH
30382: LD_INT 4
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 25
30391: PUSH
30392: LD_INT 12
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 25
30401: PUSH
30402: LD_INT 16
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: PPUSH
30422: CALL_OW 69
30426: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30427: LD_ADDR_VAR 0 5
30431: PUSH
30432: LD_VAR 0 5
30436: PUSH
30437: LD_EXP 50
30441: ADD
30442: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 81 , 12 ) ;
30443: LD_VAR 0 5
30447: PPUSH
30448: LD_INT 81
30450: PPUSH
30451: LD_INT 12
30453: PPUSH
30454: CALL_OW 171
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30458: LD_VAR 0 5
30462: PPUSH
30463: LD_INT 88
30465: PPUSH
30466: LD_INT 8
30468: PPUSH
30469: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30473: LD_VAR 0 5
30477: PPUSH
30478: LD_INT 102
30480: PPUSH
30481: LD_INT 10
30483: PPUSH
30484: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30488: LD_VAR 0 5
30492: PPUSH
30493: LD_INT 116
30495: PPUSH
30496: LD_INT 15
30498: PPUSH
30499: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30503: LD_VAR 0 5
30507: PPUSH
30508: LD_INT 140
30510: PPUSH
30511: LD_INT 25
30513: PPUSH
30514: CALL_OW 171
// wait ( 3 ) ;
30518: LD_INT 3
30520: PPUSH
30521: CALL_OW 67
// arEscapist := arCivilian union arSoldiers ;
30525: LD_ADDR_EXP 56
30529: PUSH
30530: LD_VAR 0 5
30534: PUSH
30535: LD_VAR 0 4
30539: UNION
30540: ST_TO_ADDR
// if IsOk ( Gary ) then
30541: LD_EXP 32
30545: PPUSH
30546: CALL_OW 302
30550: IFFALSE 30564
// Say ( Gary , D8a-Gary-1 ) ;
30552: LD_EXP 32
30556: PPUSH
30557: LD_STRING D8a-Gary-1
30559: PPUSH
30560: CALL_OW 88
// wait ( 0 0$5 ) ;
30564: LD_INT 175
30566: PPUSH
30567: CALL_OW 67
// if IsOK ( Khatam ) then
30571: LD_EXP 36
30575: PPUSH
30576: CALL_OW 302
30580: IFFALSE 31047
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30582: LD_ADDR_VAR 0 2
30586: PUSH
30587: LD_INT 22
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 25
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 25
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 25
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 25
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 25
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 25
30652: PUSH
30653: LD_INT 8
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 69
30677: PUSH
30678: LD_EXP 23
30682: PUSH
30683: LD_EXP 24
30687: PUSH
30688: LD_EXP 25
30692: PUSH
30693: LD_EXP 26
30697: PUSH
30698: LD_EXP 27
30702: PUSH
30703: LD_EXP 28
30707: PUSH
30708: LD_EXP 29
30712: PUSH
30713: LD_EXP 30
30717: PUSH
30718: LD_EXP 31
30722: PUSH
30723: LD_EXP 32
30727: PUSH
30728: LD_EXP 33
30732: PUSH
30733: LD_EXP 34
30737: PUSH
30738: LD_EXP 35
30742: PUSH
30743: LD_EXP 36
30747: PUSH
30748: LD_EXP 37
30752: PUSH
30753: LD_EXP 38
30757: PUSH
30758: LD_EXP 39
30762: PUSH
30763: LD_EXP 42
30767: PUSH
30768: LD_EXP 44
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: DIFF
30794: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
30795: LD_EXP 36
30799: PPUSH
30800: LD_INT 8
30802: PPUSH
30803: CALL_OW 235
// ComExit ( Khatam ) ;
30807: LD_EXP 36
30811: PPUSH
30812: CALL 93326 0 1
// wait ( 0 0$1 ) ;
30816: LD_INT 35
30818: PPUSH
30819: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
30823: LD_EXP 36
30827: PPUSH
30828: LD_INT 11
30830: PPUSH
30831: CALL_OW 113
// escapeKhatam := true ;
30835: LD_ADDR_EXP 11
30839: PUSH
30840: LD_INT 1
30842: ST_TO_ADDR
// if not tmp then
30843: LD_VAR 0 2
30847: NOT
30848: IFFALSE 30852
// exit ;
30850: GO 31047
// wait ( 0 0$2 ) ;
30852: LD_INT 70
30854: PPUSH
30855: CALL_OW 67
// DialogueOn ;
30859: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
30863: LD_ADDR_VAR 0 8
30867: PUSH
30868: LD_VAR 0 2
30872: PPUSH
30873: LD_STRING D8b-Sol1-1
30875: PPUSH
30876: LD_STRING D8b-FSol1-1
30878: PPUSH
30879: CALL 25083 0 3
30883: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
30884: LD_EXP 36
30888: PPUSH
30889: LD_STRING D8b-Khat-1
30891: PPUSH
30892: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30896: LD_VAR 0 8
30900: PPUSH
30901: CALL_OW 258
30905: PUSH
30906: LD_INT 1
30908: EQUAL
30909: IFFALSE 30925
// Say ( speaker , D8b-Sol1-2 ) else
30911: LD_VAR 0 8
30915: PPUSH
30916: LD_STRING D8b-Sol1-2
30918: PPUSH
30919: CALL_OW 88
30923: GO 30937
// Say ( speaker , D8b-FSol1-2 ) ;
30925: LD_VAR 0 8
30929: PPUSH
30930: LD_STRING D8b-FSol1-2
30932: PPUSH
30933: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
30937: LD_EXP 36
30941: PPUSH
30942: LD_STRING D8b-Khat-2
30944: PPUSH
30945: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30949: LD_VAR 0 8
30953: PPUSH
30954: CALL_OW 258
30958: PUSH
30959: LD_INT 1
30961: EQUAL
30962: IFFALSE 30978
// Say ( speaker , D8b-Sol1-3 ) else
30964: LD_VAR 0 8
30968: PPUSH
30969: LD_STRING D8b-Sol1-3
30971: PPUSH
30972: CALL_OW 88
30976: GO 30990
// Say ( speaker , D8b-FSol1-3 ) ;
30978: LD_VAR 0 8
30982: PPUSH
30983: LD_STRING D8b-FSol1-3
30985: PPUSH
30986: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
30990: LD_EXP 36
30994: PPUSH
30995: LD_STRING D8b-Khat-3
30997: PPUSH
30998: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31002: LD_VAR 0 8
31006: PPUSH
31007: CALL_OW 258
31011: PUSH
31012: LD_INT 1
31014: EQUAL
31015: IFFALSE 31031
// Say ( speaker , D8b-Sol1-4 ) else
31017: LD_VAR 0 8
31021: PPUSH
31022: LD_STRING D8b-Sol1-4
31024: PPUSH
31025: CALL_OW 88
31029: GO 31043
// Say ( speaker , D8b-FSol1-4 ) ;
31031: LD_VAR 0 8
31035: PPUSH
31036: LD_STRING D8b-FSol1-4
31038: PPUSH
31039: CALL_OW 88
// DialogueOff ;
31043: CALL_OW 7
// end ; end ;
31047: PPOPN 8
31049: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31050: LD_EXP 11
31054: PUSH
31055: LD_EXP 36
31059: PPUSH
31060: CALL_OW 302
31064: AND
31065: IFFALSE 31140
31067: GO 31069
31069: DISABLE
// begin enable ;
31070: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31071: LD_EXP 36
31075: PPUSH
31076: CALL_OW 302
31080: PUSH
31081: LD_EXP 36
31085: PPUSH
31086: CALL_OW 314
31090: NOT
31091: AND
31092: IFFALSE 31106
// ComMoveToArea ( Khatam , khatamArea ) ;
31094: LD_EXP 36
31098: PPUSH
31099: LD_INT 11
31101: PPUSH
31102: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31106: LD_EXP 36
31110: PPUSH
31111: LD_INT 11
31113: PPUSH
31114: CALL_OW 308
31118: IFFALSE 31140
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31120: LD_INT 1
31122: PPUSH
31123: LD_STRING 10_KhatamStatus_1
31125: PPUSH
31126: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31130: LD_EXP 36
31134: PPUSH
31135: CALL_OW 64
// disable ;
31139: DISABLE
// end ; end ;
31140: END
// every 0 0$30 trigger joinedToEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31141: LD_EXP 7
31145: PUSH
31146: LD_STRING 02_mikhailStatus_1
31148: PPUSH
31149: LD_INT 0
31151: PPUSH
31152: CALL_OW 30
31156: AND
31157: PUSH
31158: LD_INT 22
31160: PUSH
31161: LD_INT 5
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 50
31170: PUSH
31171: EMPTY
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PPUSH
31178: CALL_OW 69
31182: PUSH
31183: LD_INT 0
31185: EQUAL
31186: AND
31187: PUSH
31188: LD_INT 22
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 50
31200: PUSH
31201: EMPTY
31202: LIST
31203: PUSH
31204: LD_INT 21
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: PPUSH
31219: CALL_OW 69
31223: PUSH
31224: LD_INT 0
31226: EQUAL
31227: PUSH
31228: LD_EXP 4
31232: NOT
31233: OR
31234: AND
31235: IFFALSE 31257
31237: GO 31239
31239: DISABLE
// begin wait ( 2 2$00 * Difficulty ) ;
31240: LD_INT 4200
31242: PUSH
31243: LD_OWVAR 67
31247: MUL
31248: PPUSH
31249: CALL_OW 67
// PrepareCornell ;
31253: CALL 3198 0 0
// end ;
31257: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31258: LD_INT 22
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: PPUSH
31273: LD_EXP 42
31277: PPUSH
31278: CALL_OW 74
31282: PPUSH
31283: LD_EXP 42
31287: PPUSH
31288: CALL_OW 296
31292: PUSH
31293: LD_INT 9
31295: LESS
31296: PUSH
31297: LD_EXP 42
31301: PPUSH
31302: CALL_OW 302
31306: AND
31307: IFFALSE 31751
31309: GO 31311
31311: DISABLE
// begin InGameOn ;
31312: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31316: LD_EXP 42
31320: PPUSH
31321: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31325: LD_EXP 42
31329: PPUSH
31330: LD_STRING D7-Corn-1
31332: PPUSH
31333: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31337: LD_INT 22
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 25
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 25
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 25
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 25
31382: PUSH
31383: LD_INT 4
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 25
31392: PUSH
31393: LD_INT 5
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PPUSH
31412: CALL_OW 69
31416: PPUSH
31417: LD_STRING D7-Sol1-1
31419: PPUSH
31420: LD_STRING D7-FSol1-1
31422: PPUSH
31423: CALL 25083 0 3
// CenterNowOnUnits ( Cornell ) ;
31427: LD_EXP 42
31431: PPUSH
31432: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31436: LD_EXP 42
31440: PPUSH
31441: LD_STRING D7-Corn-2
31443: PPUSH
31444: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31448: LD_EXP 23
31452: PPUSH
31453: LD_STRING D7-JMM-2
31455: PPUSH
31456: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31460: LD_EXP 42
31464: PPUSH
31465: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31469: LD_EXP 42
31473: PPUSH
31474: LD_STRING D7-Corn-3
31476: PPUSH
31477: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31481: LD_EXP 42
31485: PPUSH
31486: LD_INT 250
31488: PPUSH
31489: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31493: LD_EXP 42
31497: PPUSH
31498: LD_INT 1
31500: PPUSH
31501: CALL_OW 235
// wait ( 0 0$1 ) ;
31505: LD_INT 35
31507: PPUSH
31508: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31512: LD_EXP 23
31516: PPUSH
31517: LD_STRING D7-JMM-3
31519: PPUSH
31520: CALL_OW 88
// InGameOff ;
31524: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31528: LD_INT 35
31530: PPUSH
31531: CALL_OW 67
// if IsDead ( Cornell ) then
31535: LD_EXP 42
31539: PPUSH
31540: CALL_OW 301
31544: IFFALSE 31548
// exit ;
31546: GO 31751
// until GetLives ( Cornell ) > 350 ;
31548: LD_EXP 42
31552: PPUSH
31553: CALL_OW 256
31557: PUSH
31558: LD_INT 350
31560: GREATER
31561: IFFALSE 31528
// DialogueOn ;
31563: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31567: LD_EXP 23
31571: PPUSH
31572: LD_STRING D7a-JMM-1
31574: PPUSH
31575: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31579: LD_EXP 42
31583: PPUSH
31584: LD_STRING D7a-Corn-1
31586: PPUSH
31587: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31591: LD_EXP 23
31595: PPUSH
31596: LD_STRING D7a-JMM-2
31598: PPUSH
31599: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31603: LD_EXP 42
31607: PPUSH
31608: LD_STRING D7a-Corn-2
31610: PPUSH
31611: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31615: LD_EXP 23
31619: PPUSH
31620: LD_STRING D7a-JMM-3
31622: PPUSH
31623: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31627: LD_EXP 42
31631: PPUSH
31632: LD_STRING D7a-Corn-3
31634: PPUSH
31635: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31639: LD_EXP 23
31643: PPUSH
31644: LD_STRING D7a-JMM-4
31646: PPUSH
31647: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31651: LD_EXP 42
31655: PPUSH
31656: LD_STRING D7a-Corn-4
31658: PPUSH
31659: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31663: LD_EXP 23
31667: PPUSH
31668: LD_STRING D7a-JMM-5
31670: PPUSH
31671: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31675: LD_EXP 42
31679: PPUSH
31680: LD_STRING D7a-Corn-5
31682: PPUSH
31683: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31687: LD_EXP 23
31691: PPUSH
31692: LD_STRING D7a-JMM-6
31694: PPUSH
31695: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31699: LD_EXP 42
31703: PPUSH
31704: LD_STRING D7a-Corn-6
31706: PPUSH
31707: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31711: LD_EXP 23
31715: PPUSH
31716: LD_STRING D7a-JMM-7
31718: PPUSH
31719: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31723: LD_EXP 42
31727: PPUSH
31728: LD_STRING D7a-Corn-7
31730: PPUSH
31731: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
31735: LD_EXP 23
31739: PPUSH
31740: LD_STRING D7a-JMM-8
31742: PPUSH
31743: CALL_OW 88
// DialogueOff ;
31747: CALL_OW 7
// end ;
31751: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
31752: LD_INT 54
31754: PPUSH
31755: LD_INT 1
31757: PPUSH
31758: CALL_OW 321
31762: PUSH
31763: LD_INT 2
31765: EQUAL
31766: PUSH
31767: LD_INT 55
31769: PPUSH
31770: LD_INT 1
31772: PPUSH
31773: CALL_OW 321
31777: PUSH
31778: LD_INT 2
31780: EQUAL
31781: AND
31782: PUSH
31783: LD_INT 21
31785: PPUSH
31786: LD_INT 1
31788: PPUSH
31789: CALL_OW 321
31793: PUSH
31794: LD_INT 2
31796: EQUAL
31797: AND
31798: PUSH
31799: LD_INT 22
31801: PPUSH
31802: LD_INT 1
31804: PPUSH
31805: CALL_OW 321
31809: PUSH
31810: LD_INT 2
31812: EQUAL
31813: AND
31814: PUSH
31815: LD_INT 12
31817: PPUSH
31818: LD_INT 1
31820: PPUSH
31821: CALL_OW 321
31825: PUSH
31826: LD_INT 1
31828: EQUAL
31829: PUSH
31830: LD_INT 32
31832: PPUSH
31833: LD_INT 1
31835: PPUSH
31836: CALL_OW 321
31840: PUSH
31841: LD_INT 1
31843: EQUAL
31844: OR
31845: PUSH
31846: EMPTY
31847: LIST
31848: AND
31849: PUSH
31850: LD_EXP 8
31854: AND
31855: PUSH
31856: LD_INT 22
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 21
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PPUSH
31880: CALL_OW 69
31884: PUSH
31885: LD_INT 0
31887: EQUAL
31888: AND
31889: IFFALSE 31937
31891: GO 31893
31893: DISABLE
// begin case Query ( QEndMission ) of 1 :
31894: LD_STRING QEndMission
31896: PPUSH
31897: CALL_OW 97
31901: PUSH
31902: LD_INT 1
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31921
31910: POP
// end_the_mission_allowed = true ; 2 :
31911: LD_ADDR_OWVAR 57
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
31919: GO 31937
31921: LD_INT 2
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31936
31929: POP
// FinishMission ; end ;
31930: CALL 31983 0 0
31934: GO 31937
31936: POP
// end ;
31937: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
31938: LD_INT 0
31940: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 300
31950: PUSH
31951: LD_VAR 0 1
31955: PUSH
31956: LD_EXP 45
31960: IN
31961: OR
31962: IFFALSE 31978
// SaveCharacters ( unit , id ) ;
31964: LD_VAR 0 1
31968: PPUSH
31969: LD_VAR 0 2
31973: PPUSH
31974: CALL_OW 38
// end ;
31978: LD_VAR 0 3
31982: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
31983: LD_INT 0
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
31990: LD_INT 22
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 21
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 23
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 50
32022: PUSH
32023: EMPTY
32024: LIST
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: PPUSH
32032: CALL_OW 69
32036: PPUSH
32037: CALL 57319 0 1
32041: PUSH
32042: LD_INT 5
32044: LESS
32045: IFFALSE 32056
// begin YouLost ( Troops ) ;
32047: LD_STRING Troops
32049: PPUSH
32050: CALL_OW 104
// exit ;
32054: GO 33076
// end ; if not hasSniper then
32056: LD_EXP 20
32060: NOT
32061: IFFALSE 32070
// SetAchievement ( ACH_SNIPER ) ;
32063: LD_STRING ACH_SNIPER
32065: PPUSH
32066: CALL_OW 543
// m1 := false ;
32070: LD_ADDR_VAR 0 2
32074: PUSH
32075: LD_INT 0
32077: ST_TO_ADDR
// m2 := false ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: LD_INT 0
32085: ST_TO_ADDR
// m3 := false ;
32086: LD_ADDR_VAR 0 4
32090: PUSH
32091: LD_INT 0
32093: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32094: LD_INT 12
32096: PPUSH
32097: LD_INT 1
32099: PPUSH
32100: CALL_OW 321
32104: PUSH
32105: LD_INT 2
32107: EQUAL
32108: IFFALSE 32130
// begin AddMedal ( sights , 1 ) ;
32110: LD_STRING sights
32112: PPUSH
32113: LD_INT 1
32115: PPUSH
32116: CALL_OW 101
// m1 := true ;
32120: LD_ADDR_VAR 0 2
32124: PUSH
32125: LD_INT 1
32127: ST_TO_ADDR
// end else
32128: GO 32141
// AddMedal ( sights , - 1 ) ;
32130: LD_STRING sights
32132: PPUSH
32133: LD_INT 1
32135: NEG
32136: PPUSH
32137: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32141: LD_INT 32
32143: PPUSH
32144: LD_INT 1
32146: PPUSH
32147: CALL_OW 321
32151: PUSH
32152: LD_INT 2
32154: EQUAL
32155: IFFALSE 32177
// begin AddMedal ( computers , 1 ) ;
32157: LD_STRING computers
32159: PPUSH
32160: LD_INT 1
32162: PPUSH
32163: CALL_OW 101
// m2 := true ;
32167: LD_ADDR_VAR 0 3
32171: PUSH
32172: LD_INT 1
32174: ST_TO_ADDR
// end else
32175: GO 32188
// AddMedal ( computers , - 1 ) ;
32177: LD_STRING computers
32179: PPUSH
32180: LD_INT 1
32182: NEG
32183: PPUSH
32184: CALL_OW 101
// if arabianEscapedCounter = 0 then
32188: LD_EXP 21
32192: PUSH
32193: LD_INT 0
32195: EQUAL
32196: IFFALSE 32228
// begin AddMedal ( renegades , 2 ) ;
32198: LD_STRING renegades
32200: PPUSH
32201: LD_INT 2
32203: PPUSH
32204: CALL_OW 101
// m3 := true ;
32208: LD_ADDR_VAR 0 4
32212: PUSH
32213: LD_INT 1
32215: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32216: LD_INT 0
32218: PPUSH
32219: LD_STRING 10_ScientistsEscape_1
32221: PPUSH
32222: CALL_OW 39
// end else
32226: GO 32239
// AddMedal ( renegades , - 1 ) ;
32228: LD_STRING renegades
32230: PPUSH
32231: LD_INT 1
32233: NEG
32234: PPUSH
32235: CALL_OW 101
// SaveEpsilonBase ;
32239: CALL 33081 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32243: LD_VAR 0 2
32247: PUSH
32248: LD_VAR 0 3
32252: AND
32253: PUSH
32254: LD_VAR 0 4
32258: AND
32259: PUSH
32260: LD_OWVAR 67
32264: PUSH
32265: LD_INT 3
32267: GREATEREQUAL
32268: AND
32269: IFFALSE 32281
// SetAchievementEX ( ACH_AMER , 10 ) ;
32271: LD_STRING ACH_AMER
32273: PPUSH
32274: LD_INT 10
32276: PPUSH
32277: CALL_OW 564
// if tick <= 40 40$00 then
32281: LD_OWVAR 1
32285: PUSH
32286: LD_INT 84000
32288: LESSEQUAL
32289: IFFALSE 32305
// begin wait ( 3 ) ;
32291: LD_INT 3
32293: PPUSH
32294: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32298: LD_STRING ACH_ASPEED_10
32300: PPUSH
32301: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32305: LD_STRING Main
32307: PPUSH
32308: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32312: LD_INT 22
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 23
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 21
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 25
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 25
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 25
32367: PUSH
32368: LD_INT 3
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 25
32377: PUSH
32378: LD_INT 4
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 25
32387: PUSH
32388: LD_INT 5
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 25
32397: PUSH
32398: LD_INT 8
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: PPUSH
32420: CALL_OW 69
32424: PPUSH
32425: CALL_OW 43
// prefix := 10c_ ;
32429: LD_ADDR_VAR 0 5
32433: PUSH
32434: LD_STRING 10c_
32436: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32437: LD_EXP 23
32441: PPUSH
32442: LD_VAR 0 5
32446: PUSH
32447: LD_STRING JMM
32449: STR
32450: PPUSH
32451: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32455: LD_EXP 24
32459: PPUSH
32460: LD_VAR 0 5
32464: PUSH
32465: LD_STRING Brown
32467: STR
32468: PPUSH
32469: CALL 31938 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32473: LD_EXP 25
32477: PPUSH
32478: LD_VAR 0 5
32482: PUSH
32483: LD_STRING Donaldson
32485: STR
32486: PPUSH
32487: CALL 31938 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32491: LD_EXP 26
32495: PPUSH
32496: LD_VAR 0 5
32500: PUSH
32501: LD_STRING Bobby
32503: STR
32504: PPUSH
32505: CALL 31938 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32509: LD_EXP 27
32513: PPUSH
32514: LD_VAR 0 5
32518: PUSH
32519: LD_STRING Cyrus
32521: STR
32522: PPUSH
32523: CALL 31938 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32527: LD_EXP 28
32531: PPUSH
32532: LD_VAR 0 5
32536: PUSH
32537: LD_STRING Lisa
32539: STR
32540: PPUSH
32541: CALL 31938 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32545: LD_EXP 29
32549: PPUSH
32550: LD_VAR 0 5
32554: PUSH
32555: LD_STRING Frank
32557: STR
32558: PPUSH
32559: CALL 31938 0 2
// if Kikuchi then
32563: LD_EXP 30
32567: IFFALSE 32594
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32569: LD_STRING enableBioCharacter(BIO_YAMO)
32571: PPUSH
32572: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32576: LD_EXP 30
32580: PPUSH
32581: LD_VAR 0 5
32585: PUSH
32586: LD_STRING Kikuchi
32588: STR
32589: PPUSH
32590: CALL 31938 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32594: LD_EXP 31
32598: PPUSH
32599: LD_VAR 0 5
32603: PUSH
32604: LD_STRING Houten
32606: STR
32607: PPUSH
32608: CALL 31938 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32612: LD_EXP 32
32616: PPUSH
32617: LD_VAR 0 5
32621: PUSH
32622: LD_STRING Gary
32624: STR
32625: PPUSH
32626: CALL 31938 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32630: LD_EXP 42
32634: PPUSH
32635: LD_VAR 0 5
32639: PUSH
32640: LD_STRING Cornell
32642: STR
32643: PPUSH
32644: CALL 31938 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32648: LD_EXP 33
32652: PPUSH
32653: LD_VAR 0 5
32657: PUSH
32658: LD_STRING Simms
32660: STR
32661: PPUSH
32662: CALL 31938 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32666: LD_EXP 34
32670: PPUSH
32671: LD_VAR 0 5
32675: PUSH
32676: LD_STRING Denis
32678: STR
32679: PPUSH
32680: CALL 31938 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32684: LD_EXP 35
32688: PPUSH
32689: LD_VAR 0 5
32693: PUSH
32694: LD_STRING Joan
32696: STR
32697: PPUSH
32698: CALL 31938 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32702: LD_EXP 37
32706: PPUSH
32707: LD_VAR 0 5
32711: PUSH
32712: LD_STRING Gladstone
32714: STR
32715: PPUSH
32716: CALL 31938 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
32720: LD_EXP 39
32724: PPUSH
32725: LD_VAR 0 5
32729: PUSH
32730: LD_STRING DeltaDoctor
32732: STR
32733: PPUSH
32734: CALL 31938 0 2
// if IsLive ( Mike ) then
32738: LD_EXP 41
32742: PPUSH
32743: CALL_OW 300
32747: IFFALSE 32767
// SaveCharacters ( Mike , prefix & Mike ) ;
32749: LD_EXP 41
32753: PPUSH
32754: LD_VAR 0 5
32758: PUSH
32759: LD_STRING Mike
32761: STR
32762: PPUSH
32763: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
32767: LD_EXP 46
32771: PPUSH
32772: LD_STRING 10c_lock
32774: PPUSH
32775: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
32779: LD_INT 50
32781: PUSH
32782: EMPTY
32783: LIST
32784: PUSH
32785: LD_INT 22
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 21
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 2
32807: PUSH
32808: LD_INT 25
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 25
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 25
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 25
32840: PUSH
32841: LD_INT 4
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 25
32850: PUSH
32851: LD_INT 5
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 25
32860: PUSH
32861: LD_INT 8
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: PPUSH
32883: CALL_OW 69
32887: PUSH
32888: LD_EXP 23
32892: PUSH
32893: LD_EXP 24
32897: PUSH
32898: LD_EXP 25
32902: PUSH
32903: LD_EXP 26
32907: PUSH
32908: LD_EXP 27
32912: PUSH
32913: LD_EXP 28
32917: PUSH
32918: LD_EXP 29
32922: PUSH
32923: LD_EXP 37
32927: PUSH
32928: LD_EXP 30
32932: PUSH
32933: LD_EXP 34
32937: PUSH
32938: LD_EXP 35
32942: PUSH
32943: LD_EXP 31
32947: PUSH
32948: LD_EXP 33
32952: PUSH
32953: LD_EXP 32
32957: PUSH
32958: LD_EXP 39
32962: PUSH
32963: LD_EXP 42
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: DIFF
32986: PPUSH
32987: LD_STRING 10_other_survivors
32989: PPUSH
32990: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
32994: LD_INT 50
32996: PUSH
32997: EMPTY
32998: LIST
32999: PUSH
33000: LD_INT 22
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 21
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: LD_INT 25
33025: PUSH
33026: LD_INT 16
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 25
33035: PUSH
33036: LD_INT 12
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: PPUSH
33054: CALL_OW 69
33058: PUSH
33059: LD_EXP 41
33063: DIFF
33064: PPUSH
33065: LD_STRING 10_ape
33067: PPUSH
33068: CALL_OW 38
// YouWin ;
33072: CALL_OW 103
// end ;
33076: LD_VAR 0 1
33080: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33081: LD_INT 0
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
// epsilonBase := [ ] ;
33087: LD_ADDR_VAR 0 2
33091: PUSH
33092: EMPTY
33093: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_INT 22
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 21
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 50
33121: PUSH
33122: EMPTY
33123: LIST
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: LIST
33129: PPUSH
33130: CALL_OW 69
33134: ST_TO_ADDR
// for i in buildings do
33135: LD_ADDR_VAR 0 4
33139: PUSH
33140: LD_VAR 0 3
33144: PUSH
33145: FOR_IN
33146: IFFALSE 33598
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33148: LD_VAR 0 4
33152: PPUSH
33153: CALL_OW 266
33157: PUSH
33158: LD_INT 6
33160: PUSH
33161: LD_INT 7
33163: PUSH
33164: LD_INT 8
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: IN
33172: IFFALSE 33286
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33174: LD_ADDR_VAR 0 2
33178: PUSH
33179: LD_VAR 0 2
33183: PUSH
33184: LD_VAR 0 4
33188: PPUSH
33189: CALL_OW 266
33193: PUSH
33194: LD_VAR 0 4
33198: PPUSH
33199: CALL_OW 250
33203: PUSH
33204: LD_VAR 0 4
33208: PPUSH
33209: CALL_OW 251
33213: PUSH
33214: LD_VAR 0 4
33218: PPUSH
33219: CALL_OW 254
33223: PUSH
33224: LD_VAR 0 4
33228: PPUSH
33229: CALL_OW 267
33233: PUSH
33234: LD_VAR 0 4
33238: PPUSH
33239: CALL_OW 248
33243: PUSH
33244: LD_VAR 0 4
33248: PPUSH
33249: LD_INT 1
33251: PPUSH
33252: CALL_OW 268
33256: PUSH
33257: LD_VAR 0 4
33261: PPUSH
33262: LD_INT 2
33264: PPUSH
33265: CALL_OW 268
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: ADD
33283: ST_TO_ADDR
33284: GO 33596
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33286: LD_VAR 0 4
33290: PPUSH
33291: CALL_OW 266
33295: PUSH
33296: LD_INT 32
33298: EQUAL
33299: PUSH
33300: LD_VAR 0 4
33304: PPUSH
33305: CALL_OW 266
33309: PUSH
33310: LD_INT 33
33312: EQUAL
33313: OR
33314: IFFALSE 33411
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33316: LD_ADDR_VAR 0 2
33320: PUSH
33321: LD_VAR 0 2
33325: PUSH
33326: LD_VAR 0 4
33330: PPUSH
33331: CALL_OW 266
33335: PUSH
33336: LD_VAR 0 4
33340: PPUSH
33341: CALL_OW 250
33345: PUSH
33346: LD_VAR 0 4
33350: PPUSH
33351: CALL_OW 251
33355: PUSH
33356: LD_VAR 0 4
33360: PPUSH
33361: CALL_OW 254
33365: PUSH
33366: LD_VAR 0 4
33370: PPUSH
33371: CALL_OW 267
33375: PUSH
33376: LD_VAR 0 4
33380: PPUSH
33381: CALL_OW 248
33385: PUSH
33386: LD_VAR 0 4
33390: PPUSH
33391: CALL_OW 269
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: ADD
33408: ST_TO_ADDR
33409: GO 33596
// if GetBType ( i ) = b_factory then
33411: LD_VAR 0 4
33415: PPUSH
33416: CALL_OW 266
33420: PUSH
33421: LD_INT 3
33423: EQUAL
33424: IFFALSE 33514
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33426: LD_ADDR_VAR 0 2
33430: PUSH
33431: LD_VAR 0 2
33435: PPUSH
33436: LD_INT 1
33438: PPUSH
33439: LD_VAR 0 4
33443: PPUSH
33444: CALL_OW 266
33448: PUSH
33449: LD_VAR 0 4
33453: PPUSH
33454: CALL_OW 250
33458: PUSH
33459: LD_VAR 0 4
33463: PPUSH
33464: CALL_OW 251
33468: PUSH
33469: LD_VAR 0 4
33473: PPUSH
33474: CALL_OW 254
33478: PUSH
33479: LD_VAR 0 4
33483: PPUSH
33484: CALL_OW 267
33488: PUSH
33489: LD_VAR 0 4
33493: PPUSH
33494: CALL_OW 248
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: PPUSH
33507: CALL_OW 2
33511: ST_TO_ADDR
33512: GO 33596
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33514: LD_ADDR_VAR 0 2
33518: PUSH
33519: LD_VAR 0 2
33523: PUSH
33524: LD_VAR 0 4
33528: PPUSH
33529: CALL_OW 266
33533: PUSH
33534: LD_VAR 0 4
33538: PPUSH
33539: CALL_OW 250
33543: PUSH
33544: LD_VAR 0 4
33548: PPUSH
33549: CALL_OW 251
33553: PUSH
33554: LD_VAR 0 4
33558: PPUSH
33559: CALL_OW 254
33563: PUSH
33564: LD_VAR 0 4
33568: PPUSH
33569: CALL_OW 267
33573: PUSH
33574: LD_VAR 0 4
33578: PPUSH
33579: CALL_OW 248
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: ADD
33595: ST_TO_ADDR
// end ;
33596: GO 33145
33598: POP
33599: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33600: LD_VAR 0 2
33604: PPUSH
33605: LD_STRING 10_EpsilonBase
33607: PPUSH
33608: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33612: LD_INT 34
33614: PPUSH
33615: CALL_OW 353
33619: PPUSH
33620: LD_STRING 10_EpsilonEnv
33622: PPUSH
33623: CALL_OW 39
// end ; end_of_file
33627: LD_VAR 0 1
33631: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33632: LD_EXP 7
33636: IFFALSE 33759
33638: GO 33640
33640: DISABLE
33641: LD_INT 0
33643: PPUSH
33644: PPUSH
// begin enable ;
33645: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33646: LD_INT 35
33648: PPUSH
33649: LD_INT 385
33651: PPUSH
33652: CALL_OW 12
33656: PPUSH
33657: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33661: LD_ADDR_VAR 0 2
33665: PUSH
33666: LD_INT 13
33668: PUSH
33669: LD_INT 14
33671: PUSH
33672: LD_INT 15
33674: PUSH
33675: LD_INT 16
33677: PUSH
33678: LD_INT 17
33680: PUSH
33681: LD_INT 38
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33692: LD_ADDR_VAR 0 1
33696: PUSH
33697: LD_VAR 0 2
33701: PUSH
33702: LD_INT 1
33704: PPUSH
33705: LD_VAR 0 2
33709: PPUSH
33710: CALL 57319 0 1
33714: PPUSH
33715: CALL_OW 12
33719: ARRAY
33720: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
33721: LD_VAR 0 1
33725: PPUSH
33726: CALL_OW 435
33730: PUSH
33731: LD_INT 8
33733: LESS
33734: IFFALSE 33759
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
33736: LD_INT 1
33738: PPUSH
33739: LD_INT 5
33741: PPUSH
33742: CALL_OW 12
33746: PPUSH
33747: LD_VAR 0 1
33751: PPUSH
33752: LD_INT 1
33754: PPUSH
33755: CALL_OW 55
// end ;
33759: PPOPN 2
33761: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
33762: LD_OWVAR 1
33766: PUSH
33767: LD_INT 10500
33769: LESS
33770: PUSH
33771: LD_EXP 9
33775: AND
33776: IFFALSE 33803
33778: GO 33780
33780: DISABLE
// begin enable ;
33781: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
33782: LD_INT 1
33784: PPUSH
33785: LD_INT 5
33787: PPUSH
33788: CALL_OW 12
33792: PPUSH
33793: LD_INT 15
33795: PPUSH
33796: LD_INT 1
33798: PPUSH
33799: CALL_OW 55
// end ;
33803: END
// every 0 0$55 trigger ruBase do
33804: LD_EXP 68
33808: IFFALSE 33852
33810: GO 33812
33812: DISABLE
// begin enable ;
33813: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
33814: LD_EXP 84
33818: PPUSH
33819: CALL_OW 435
33823: PUSH
33824: LD_INT 3
33826: LESS
33827: IFFALSE 33852
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
33829: LD_INT 1
33831: PPUSH
33832: LD_INT 5
33834: PPUSH
33835: CALL_OW 12
33839: PPUSH
33840: LD_EXP 84
33844: PPUSH
33845: LD_INT 1
33847: PPUSH
33848: CALL_OW 55
// end ;
33852: END
// every 1 1$05 trigger ruBase2 do
33853: LD_EXP 69
33857: IFFALSE 33901
33859: GO 33861
33861: DISABLE
// begin enable ;
33862: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
33863: LD_EXP 85
33867: PPUSH
33868: CALL_OW 435
33872: PUSH
33873: LD_INT 3
33875: LESS
33876: IFFALSE 33901
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
33878: LD_INT 1
33880: PPUSH
33881: LD_INT 5
33883: PPUSH
33884: CALL_OW 12
33888: PPUSH
33889: LD_EXP 85
33893: PPUSH
33894: LD_INT 1
33896: PPUSH
33897: CALL_OW 55
// end ; end_of_file end_of_file
33901: END
// export globalGameSaveCounter ; every 0 0$1 do
33902: GO 33904
33904: DISABLE
// begin enable ;
33905: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
33906: LD_STRING updateTimer(
33908: PUSH
33909: LD_OWVAR 1
33913: STR
33914: PUSH
33915: LD_STRING );
33917: STR
33918: PPUSH
33919: CALL_OW 559
// end ;
33923: END
// every 0 0$1 do
33924: GO 33926
33926: DISABLE
// begin globalGameSaveCounter := 0 ;
33927: LD_ADDR_EXP 86
33931: PUSH
33932: LD_INT 0
33934: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
33935: LD_STRING setGameSaveCounter(0)
33937: PPUSH
33938: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
33942: LD_STRING initStreamRollete();
33944: PPUSH
33945: CALL_OW 559
// InitStreamMode ;
33949: CALL 35292 0 0
// DefineStreamItems ( false ) ;
33953: LD_INT 0
33955: PPUSH
33956: CALL 35756 0 1
// end ;
33960: END
// export function SOS_MapStart ( ) ; begin
33961: LD_INT 0
33963: PPUSH
// if streamModeActive then
33964: LD_EXP 87
33968: IFFALSE 33977
// DefineStreamItems ( true ) ;
33970: LD_INT 1
33972: PPUSH
33973: CALL 35756 0 1
// UpdateLuaVariables ( ) ;
33977: CALL 33994 0 0
// UpdateFactoryWaypoints ( ) ;
33981: CALL 48758 0 0
// UpdateWarehouseGatheringPoints ( ) ;
33985: CALL 49010 0 0
// end ;
33989: LD_VAR 0 1
33993: RET
// function UpdateLuaVariables ( ) ; begin
33994: LD_INT 0
33996: PPUSH
// if globalGameSaveCounter then
33997: LD_EXP 86
34001: IFFALSE 34035
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34003: LD_ADDR_EXP 86
34007: PUSH
34008: LD_EXP 86
34012: PPUSH
34013: CALL 94289 0 1
34017: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34018: LD_STRING setGameSaveCounter(
34020: PUSH
34021: LD_EXP 86
34025: STR
34026: PUSH
34027: LD_STRING )
34029: STR
34030: PPUSH
34031: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34035: LD_STRING setGameDifficulty(
34037: PUSH
34038: LD_OWVAR 67
34042: STR
34043: PUSH
34044: LD_STRING )
34046: STR
34047: PPUSH
34048: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
34052: LD_STRING displayDifficulty(
34054: PUSH
34055: LD_OWVAR 67
34059: STR
34060: PUSH
34061: LD_STRING )
34063: STR
34064: PPUSH
34065: CALL_OW 559
// end ;
34069: LD_VAR 0 1
34073: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34074: LD_INT 0
34076: PPUSH
// if p2 = stream_mode then
34077: LD_VAR 0 2
34081: PUSH
34082: LD_INT 100
34084: EQUAL
34085: IFFALSE 35088
// begin if not StreamModeActive then
34087: LD_EXP 87
34091: NOT
34092: IFFALSE 34102
// StreamModeActive := true ;
34094: LD_ADDR_EXP 87
34098: PUSH
34099: LD_INT 1
34101: ST_TO_ADDR
// if p3 = 0 then
34102: LD_VAR 0 3
34106: PUSH
34107: LD_INT 0
34109: EQUAL
34110: IFFALSE 34116
// InitStreamMode ;
34112: CALL 35292 0 0
// if p3 = 1 then
34116: LD_VAR 0 3
34120: PUSH
34121: LD_INT 1
34123: EQUAL
34124: IFFALSE 34134
// sRocket := true ;
34126: LD_ADDR_EXP 92
34130: PUSH
34131: LD_INT 1
34133: ST_TO_ADDR
// if p3 = 2 then
34134: LD_VAR 0 3
34138: PUSH
34139: LD_INT 2
34141: EQUAL
34142: IFFALSE 34152
// sSpeed := true ;
34144: LD_ADDR_EXP 91
34148: PUSH
34149: LD_INT 1
34151: ST_TO_ADDR
// if p3 = 3 then
34152: LD_VAR 0 3
34156: PUSH
34157: LD_INT 3
34159: EQUAL
34160: IFFALSE 34170
// sEngine := true ;
34162: LD_ADDR_EXP 93
34166: PUSH
34167: LD_INT 1
34169: ST_TO_ADDR
// if p3 = 4 then
34170: LD_VAR 0 3
34174: PUSH
34175: LD_INT 4
34177: EQUAL
34178: IFFALSE 34188
// sSpec := true ;
34180: LD_ADDR_EXP 90
34184: PUSH
34185: LD_INT 1
34187: ST_TO_ADDR
// if p3 = 5 then
34188: LD_VAR 0 3
34192: PUSH
34193: LD_INT 5
34195: EQUAL
34196: IFFALSE 34206
// sLevel := true ;
34198: LD_ADDR_EXP 94
34202: PUSH
34203: LD_INT 1
34205: ST_TO_ADDR
// if p3 = 6 then
34206: LD_VAR 0 3
34210: PUSH
34211: LD_INT 6
34213: EQUAL
34214: IFFALSE 34224
// sArmoury := true ;
34216: LD_ADDR_EXP 95
34220: PUSH
34221: LD_INT 1
34223: ST_TO_ADDR
// if p3 = 7 then
34224: LD_VAR 0 3
34228: PUSH
34229: LD_INT 7
34231: EQUAL
34232: IFFALSE 34242
// sRadar := true ;
34234: LD_ADDR_EXP 96
34238: PUSH
34239: LD_INT 1
34241: ST_TO_ADDR
// if p3 = 8 then
34242: LD_VAR 0 3
34246: PUSH
34247: LD_INT 8
34249: EQUAL
34250: IFFALSE 34260
// sBunker := true ;
34252: LD_ADDR_EXP 97
34256: PUSH
34257: LD_INT 1
34259: ST_TO_ADDR
// if p3 = 9 then
34260: LD_VAR 0 3
34264: PUSH
34265: LD_INT 9
34267: EQUAL
34268: IFFALSE 34278
// sHack := true ;
34270: LD_ADDR_EXP 98
34274: PUSH
34275: LD_INT 1
34277: ST_TO_ADDR
// if p3 = 10 then
34278: LD_VAR 0 3
34282: PUSH
34283: LD_INT 10
34285: EQUAL
34286: IFFALSE 34296
// sFire := true ;
34288: LD_ADDR_EXP 99
34292: PUSH
34293: LD_INT 1
34295: ST_TO_ADDR
// if p3 = 11 then
34296: LD_VAR 0 3
34300: PUSH
34301: LD_INT 11
34303: EQUAL
34304: IFFALSE 34314
// sRefresh := true ;
34306: LD_ADDR_EXP 100
34310: PUSH
34311: LD_INT 1
34313: ST_TO_ADDR
// if p3 = 12 then
34314: LD_VAR 0 3
34318: PUSH
34319: LD_INT 12
34321: EQUAL
34322: IFFALSE 34332
// sExp := true ;
34324: LD_ADDR_EXP 101
34328: PUSH
34329: LD_INT 1
34331: ST_TO_ADDR
// if p3 = 13 then
34332: LD_VAR 0 3
34336: PUSH
34337: LD_INT 13
34339: EQUAL
34340: IFFALSE 34350
// sDepot := true ;
34342: LD_ADDR_EXP 102
34346: PUSH
34347: LD_INT 1
34349: ST_TO_ADDR
// if p3 = 14 then
34350: LD_VAR 0 3
34354: PUSH
34355: LD_INT 14
34357: EQUAL
34358: IFFALSE 34368
// sFlag := true ;
34360: LD_ADDR_EXP 103
34364: PUSH
34365: LD_INT 1
34367: ST_TO_ADDR
// if p3 = 15 then
34368: LD_VAR 0 3
34372: PUSH
34373: LD_INT 15
34375: EQUAL
34376: IFFALSE 34386
// sKamikadze := true ;
34378: LD_ADDR_EXP 111
34382: PUSH
34383: LD_INT 1
34385: ST_TO_ADDR
// if p3 = 16 then
34386: LD_VAR 0 3
34390: PUSH
34391: LD_INT 16
34393: EQUAL
34394: IFFALSE 34404
// sTroll := true ;
34396: LD_ADDR_EXP 112
34400: PUSH
34401: LD_INT 1
34403: ST_TO_ADDR
// if p3 = 17 then
34404: LD_VAR 0 3
34408: PUSH
34409: LD_INT 17
34411: EQUAL
34412: IFFALSE 34422
// sSlow := true ;
34414: LD_ADDR_EXP 113
34418: PUSH
34419: LD_INT 1
34421: ST_TO_ADDR
// if p3 = 18 then
34422: LD_VAR 0 3
34426: PUSH
34427: LD_INT 18
34429: EQUAL
34430: IFFALSE 34440
// sLack := true ;
34432: LD_ADDR_EXP 114
34436: PUSH
34437: LD_INT 1
34439: ST_TO_ADDR
// if p3 = 19 then
34440: LD_VAR 0 3
34444: PUSH
34445: LD_INT 19
34447: EQUAL
34448: IFFALSE 34458
// sTank := true ;
34450: LD_ADDR_EXP 116
34454: PUSH
34455: LD_INT 1
34457: ST_TO_ADDR
// if p3 = 20 then
34458: LD_VAR 0 3
34462: PUSH
34463: LD_INT 20
34465: EQUAL
34466: IFFALSE 34476
// sRemote := true ;
34468: LD_ADDR_EXP 117
34472: PUSH
34473: LD_INT 1
34475: ST_TO_ADDR
// if p3 = 21 then
34476: LD_VAR 0 3
34480: PUSH
34481: LD_INT 21
34483: EQUAL
34484: IFFALSE 34494
// sPowell := true ;
34486: LD_ADDR_EXP 118
34490: PUSH
34491: LD_INT 1
34493: ST_TO_ADDR
// if p3 = 22 then
34494: LD_VAR 0 3
34498: PUSH
34499: LD_INT 22
34501: EQUAL
34502: IFFALSE 34512
// sTeleport := true ;
34504: LD_ADDR_EXP 121
34508: PUSH
34509: LD_INT 1
34511: ST_TO_ADDR
// if p3 = 23 then
34512: LD_VAR 0 3
34516: PUSH
34517: LD_INT 23
34519: EQUAL
34520: IFFALSE 34530
// sOilTower := true ;
34522: LD_ADDR_EXP 123
34526: PUSH
34527: LD_INT 1
34529: ST_TO_ADDR
// if p3 = 24 then
34530: LD_VAR 0 3
34534: PUSH
34535: LD_INT 24
34537: EQUAL
34538: IFFALSE 34548
// sShovel := true ;
34540: LD_ADDR_EXP 124
34544: PUSH
34545: LD_INT 1
34547: ST_TO_ADDR
// if p3 = 25 then
34548: LD_VAR 0 3
34552: PUSH
34553: LD_INT 25
34555: EQUAL
34556: IFFALSE 34566
// sSheik := true ;
34558: LD_ADDR_EXP 125
34562: PUSH
34563: LD_INT 1
34565: ST_TO_ADDR
// if p3 = 26 then
34566: LD_VAR 0 3
34570: PUSH
34571: LD_INT 26
34573: EQUAL
34574: IFFALSE 34584
// sEarthquake := true ;
34576: LD_ADDR_EXP 127
34580: PUSH
34581: LD_INT 1
34583: ST_TO_ADDR
// if p3 = 27 then
34584: LD_VAR 0 3
34588: PUSH
34589: LD_INT 27
34591: EQUAL
34592: IFFALSE 34602
// sAI := true ;
34594: LD_ADDR_EXP 128
34598: PUSH
34599: LD_INT 1
34601: ST_TO_ADDR
// if p3 = 28 then
34602: LD_VAR 0 3
34606: PUSH
34607: LD_INT 28
34609: EQUAL
34610: IFFALSE 34620
// sCargo := true ;
34612: LD_ADDR_EXP 131
34616: PUSH
34617: LD_INT 1
34619: ST_TO_ADDR
// if p3 = 29 then
34620: LD_VAR 0 3
34624: PUSH
34625: LD_INT 29
34627: EQUAL
34628: IFFALSE 34638
// sDLaser := true ;
34630: LD_ADDR_EXP 132
34634: PUSH
34635: LD_INT 1
34637: ST_TO_ADDR
// if p3 = 30 then
34638: LD_VAR 0 3
34642: PUSH
34643: LD_INT 30
34645: EQUAL
34646: IFFALSE 34656
// sExchange := true ;
34648: LD_ADDR_EXP 133
34652: PUSH
34653: LD_INT 1
34655: ST_TO_ADDR
// if p3 = 31 then
34656: LD_VAR 0 3
34660: PUSH
34661: LD_INT 31
34663: EQUAL
34664: IFFALSE 34674
// sFac := true ;
34666: LD_ADDR_EXP 134
34670: PUSH
34671: LD_INT 1
34673: ST_TO_ADDR
// if p3 = 32 then
34674: LD_VAR 0 3
34678: PUSH
34679: LD_INT 32
34681: EQUAL
34682: IFFALSE 34692
// sPower := true ;
34684: LD_ADDR_EXP 135
34688: PUSH
34689: LD_INT 1
34691: ST_TO_ADDR
// if p3 = 33 then
34692: LD_VAR 0 3
34696: PUSH
34697: LD_INT 33
34699: EQUAL
34700: IFFALSE 34710
// sRandom := true ;
34702: LD_ADDR_EXP 136
34706: PUSH
34707: LD_INT 1
34709: ST_TO_ADDR
// if p3 = 34 then
34710: LD_VAR 0 3
34714: PUSH
34715: LD_INT 34
34717: EQUAL
34718: IFFALSE 34728
// sShield := true ;
34720: LD_ADDR_EXP 137
34724: PUSH
34725: LD_INT 1
34727: ST_TO_ADDR
// if p3 = 35 then
34728: LD_VAR 0 3
34732: PUSH
34733: LD_INT 35
34735: EQUAL
34736: IFFALSE 34746
// sTime := true ;
34738: LD_ADDR_EXP 138
34742: PUSH
34743: LD_INT 1
34745: ST_TO_ADDR
// if p3 = 36 then
34746: LD_VAR 0 3
34750: PUSH
34751: LD_INT 36
34753: EQUAL
34754: IFFALSE 34764
// sTools := true ;
34756: LD_ADDR_EXP 139
34760: PUSH
34761: LD_INT 1
34763: ST_TO_ADDR
// if p3 = 101 then
34764: LD_VAR 0 3
34768: PUSH
34769: LD_INT 101
34771: EQUAL
34772: IFFALSE 34782
// sSold := true ;
34774: LD_ADDR_EXP 104
34778: PUSH
34779: LD_INT 1
34781: ST_TO_ADDR
// if p3 = 102 then
34782: LD_VAR 0 3
34786: PUSH
34787: LD_INT 102
34789: EQUAL
34790: IFFALSE 34800
// sDiff := true ;
34792: LD_ADDR_EXP 105
34796: PUSH
34797: LD_INT 1
34799: ST_TO_ADDR
// if p3 = 103 then
34800: LD_VAR 0 3
34804: PUSH
34805: LD_INT 103
34807: EQUAL
34808: IFFALSE 34818
// sFog := true ;
34810: LD_ADDR_EXP 108
34814: PUSH
34815: LD_INT 1
34817: ST_TO_ADDR
// if p3 = 104 then
34818: LD_VAR 0 3
34822: PUSH
34823: LD_INT 104
34825: EQUAL
34826: IFFALSE 34836
// sReset := true ;
34828: LD_ADDR_EXP 109
34832: PUSH
34833: LD_INT 1
34835: ST_TO_ADDR
// if p3 = 105 then
34836: LD_VAR 0 3
34840: PUSH
34841: LD_INT 105
34843: EQUAL
34844: IFFALSE 34854
// sSun := true ;
34846: LD_ADDR_EXP 110
34850: PUSH
34851: LD_INT 1
34853: ST_TO_ADDR
// if p3 = 106 then
34854: LD_VAR 0 3
34858: PUSH
34859: LD_INT 106
34861: EQUAL
34862: IFFALSE 34872
// sTiger := true ;
34864: LD_ADDR_EXP 106
34868: PUSH
34869: LD_INT 1
34871: ST_TO_ADDR
// if p3 = 107 then
34872: LD_VAR 0 3
34876: PUSH
34877: LD_INT 107
34879: EQUAL
34880: IFFALSE 34890
// sBomb := true ;
34882: LD_ADDR_EXP 107
34886: PUSH
34887: LD_INT 1
34889: ST_TO_ADDR
// if p3 = 108 then
34890: LD_VAR 0 3
34894: PUSH
34895: LD_INT 108
34897: EQUAL
34898: IFFALSE 34908
// sWound := true ;
34900: LD_ADDR_EXP 115
34904: PUSH
34905: LD_INT 1
34907: ST_TO_ADDR
// if p3 = 109 then
34908: LD_VAR 0 3
34912: PUSH
34913: LD_INT 109
34915: EQUAL
34916: IFFALSE 34926
// sBetray := true ;
34918: LD_ADDR_EXP 119
34922: PUSH
34923: LD_INT 1
34925: ST_TO_ADDR
// if p3 = 110 then
34926: LD_VAR 0 3
34930: PUSH
34931: LD_INT 110
34933: EQUAL
34934: IFFALSE 34944
// sContamin := true ;
34936: LD_ADDR_EXP 120
34940: PUSH
34941: LD_INT 1
34943: ST_TO_ADDR
// if p3 = 111 then
34944: LD_VAR 0 3
34948: PUSH
34949: LD_INT 111
34951: EQUAL
34952: IFFALSE 34962
// sOil := true ;
34954: LD_ADDR_EXP 122
34958: PUSH
34959: LD_INT 1
34961: ST_TO_ADDR
// if p3 = 112 then
34962: LD_VAR 0 3
34966: PUSH
34967: LD_INT 112
34969: EQUAL
34970: IFFALSE 34980
// sStu := true ;
34972: LD_ADDR_EXP 126
34976: PUSH
34977: LD_INT 1
34979: ST_TO_ADDR
// if p3 = 113 then
34980: LD_VAR 0 3
34984: PUSH
34985: LD_INT 113
34987: EQUAL
34988: IFFALSE 34998
// sBazooka := true ;
34990: LD_ADDR_EXP 129
34994: PUSH
34995: LD_INT 1
34997: ST_TO_ADDR
// if p3 = 114 then
34998: LD_VAR 0 3
35002: PUSH
35003: LD_INT 114
35005: EQUAL
35006: IFFALSE 35016
// sMortar := true ;
35008: LD_ADDR_EXP 130
35012: PUSH
35013: LD_INT 1
35015: ST_TO_ADDR
// if p3 = 115 then
35016: LD_VAR 0 3
35020: PUSH
35021: LD_INT 115
35023: EQUAL
35024: IFFALSE 35034
// sRanger := true ;
35026: LD_ADDR_EXP 140
35030: PUSH
35031: LD_INT 1
35033: ST_TO_ADDR
// if p3 = 116 then
35034: LD_VAR 0 3
35038: PUSH
35039: LD_INT 116
35041: EQUAL
35042: IFFALSE 35052
// sComputer := true ;
35044: LD_ADDR_EXP 141
35048: PUSH
35049: LD_INT 1
35051: ST_TO_ADDR
// if p3 = 117 then
35052: LD_VAR 0 3
35056: PUSH
35057: LD_INT 117
35059: EQUAL
35060: IFFALSE 35070
// s30 := true ;
35062: LD_ADDR_EXP 142
35066: PUSH
35067: LD_INT 1
35069: ST_TO_ADDR
// if p3 = 118 then
35070: LD_VAR 0 3
35074: PUSH
35075: LD_INT 118
35077: EQUAL
35078: IFFALSE 35088
// s60 := true ;
35080: LD_ADDR_EXP 143
35084: PUSH
35085: LD_INT 1
35087: ST_TO_ADDR
// end ; if p2 = hack_mode then
35088: LD_VAR 0 2
35092: PUSH
35093: LD_INT 101
35095: EQUAL
35096: IFFALSE 35224
// begin case p3 of 1 :
35098: LD_VAR 0 3
35102: PUSH
35103: LD_INT 1
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35111
35109: GO 35118
35111: POP
// hHackUnlimitedResources ; 2 :
35112: CALL 47371 0 0
35116: GO 35224
35118: LD_INT 2
35120: DOUBLE
35121: EQUAL
35122: IFTRUE 35126
35124: GO 35133
35126: POP
// hHackSetLevel10 ; 3 :
35127: CALL 47504 0 0
35131: GO 35224
35133: LD_INT 3
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35141
35139: GO 35148
35141: POP
// hHackSetLevel10YourUnits ; 4 :
35142: CALL 47589 0 0
35146: GO 35224
35148: LD_INT 4
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35163
35156: POP
// hHackInvincible ; 5 :
35157: CALL 48037 0 0
35161: GO 35224
35163: LD_INT 5
35165: DOUBLE
35166: EQUAL
35167: IFTRUE 35171
35169: GO 35178
35171: POP
// hHackInvisible ; 6 :
35172: CALL 48148 0 0
35176: GO 35224
35178: LD_INT 6
35180: DOUBLE
35181: EQUAL
35182: IFTRUE 35186
35184: GO 35193
35186: POP
// hHackChangeYourSide ; 7 :
35187: CALL 48205 0 0
35191: GO 35224
35193: LD_INT 7
35195: DOUBLE
35196: EQUAL
35197: IFTRUE 35201
35199: GO 35208
35201: POP
// hHackChangeUnitSide ; 8 :
35202: CALL 48247 0 0
35206: GO 35224
35208: LD_INT 8
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35223
35216: POP
// hHackFog ; end ;
35217: CALL 48348 0 0
35221: GO 35224
35223: POP
// end ; if p2 = game_save_mode then
35224: LD_VAR 0 2
35228: PUSH
35229: LD_INT 102
35231: EQUAL
35232: IFFALSE 35287
// begin if p3 = 1 then
35234: LD_VAR 0 3
35238: PUSH
35239: LD_INT 1
35241: EQUAL
35242: IFFALSE 35254
// globalGameSaveCounter := p4 ;
35244: LD_ADDR_EXP 86
35248: PUSH
35249: LD_VAR 0 4
35253: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35254: LD_VAR 0 3
35258: PUSH
35259: LD_INT 2
35261: EQUAL
35262: PUSH
35263: LD_EXP 86
35267: AND
35268: IFFALSE 35287
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35270: LD_STRING setGameSaveCounter(
35272: PUSH
35273: LD_EXP 86
35277: STR
35278: PUSH
35279: LD_STRING )
35281: STR
35282: PPUSH
35283: CALL_OW 559
// end ; end ;
35287: LD_VAR 0 7
35291: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35292: LD_INT 0
35294: PPUSH
// streamModeActive := false ;
35295: LD_ADDR_EXP 87
35299: PUSH
35300: LD_INT 0
35302: ST_TO_ADDR
// normalCounter := 36 ;
35303: LD_ADDR_EXP 88
35307: PUSH
35308: LD_INT 36
35310: ST_TO_ADDR
// hardcoreCounter := 18 ;
35311: LD_ADDR_EXP 89
35315: PUSH
35316: LD_INT 18
35318: ST_TO_ADDR
// sRocket := false ;
35319: LD_ADDR_EXP 92
35323: PUSH
35324: LD_INT 0
35326: ST_TO_ADDR
// sSpeed := false ;
35327: LD_ADDR_EXP 91
35331: PUSH
35332: LD_INT 0
35334: ST_TO_ADDR
// sEngine := false ;
35335: LD_ADDR_EXP 93
35339: PUSH
35340: LD_INT 0
35342: ST_TO_ADDR
// sSpec := false ;
35343: LD_ADDR_EXP 90
35347: PUSH
35348: LD_INT 0
35350: ST_TO_ADDR
// sLevel := false ;
35351: LD_ADDR_EXP 94
35355: PUSH
35356: LD_INT 0
35358: ST_TO_ADDR
// sArmoury := false ;
35359: LD_ADDR_EXP 95
35363: PUSH
35364: LD_INT 0
35366: ST_TO_ADDR
// sRadar := false ;
35367: LD_ADDR_EXP 96
35371: PUSH
35372: LD_INT 0
35374: ST_TO_ADDR
// sBunker := false ;
35375: LD_ADDR_EXP 97
35379: PUSH
35380: LD_INT 0
35382: ST_TO_ADDR
// sHack := false ;
35383: LD_ADDR_EXP 98
35387: PUSH
35388: LD_INT 0
35390: ST_TO_ADDR
// sFire := false ;
35391: LD_ADDR_EXP 99
35395: PUSH
35396: LD_INT 0
35398: ST_TO_ADDR
// sRefresh := false ;
35399: LD_ADDR_EXP 100
35403: PUSH
35404: LD_INT 0
35406: ST_TO_ADDR
// sExp := false ;
35407: LD_ADDR_EXP 101
35411: PUSH
35412: LD_INT 0
35414: ST_TO_ADDR
// sDepot := false ;
35415: LD_ADDR_EXP 102
35419: PUSH
35420: LD_INT 0
35422: ST_TO_ADDR
// sFlag := false ;
35423: LD_ADDR_EXP 103
35427: PUSH
35428: LD_INT 0
35430: ST_TO_ADDR
// sKamikadze := false ;
35431: LD_ADDR_EXP 111
35435: PUSH
35436: LD_INT 0
35438: ST_TO_ADDR
// sTroll := false ;
35439: LD_ADDR_EXP 112
35443: PUSH
35444: LD_INT 0
35446: ST_TO_ADDR
// sSlow := false ;
35447: LD_ADDR_EXP 113
35451: PUSH
35452: LD_INT 0
35454: ST_TO_ADDR
// sLack := false ;
35455: LD_ADDR_EXP 114
35459: PUSH
35460: LD_INT 0
35462: ST_TO_ADDR
// sTank := false ;
35463: LD_ADDR_EXP 116
35467: PUSH
35468: LD_INT 0
35470: ST_TO_ADDR
// sRemote := false ;
35471: LD_ADDR_EXP 117
35475: PUSH
35476: LD_INT 0
35478: ST_TO_ADDR
// sPowell := false ;
35479: LD_ADDR_EXP 118
35483: PUSH
35484: LD_INT 0
35486: ST_TO_ADDR
// sTeleport := false ;
35487: LD_ADDR_EXP 121
35491: PUSH
35492: LD_INT 0
35494: ST_TO_ADDR
// sOilTower := false ;
35495: LD_ADDR_EXP 123
35499: PUSH
35500: LD_INT 0
35502: ST_TO_ADDR
// sShovel := false ;
35503: LD_ADDR_EXP 124
35507: PUSH
35508: LD_INT 0
35510: ST_TO_ADDR
// sSheik := false ;
35511: LD_ADDR_EXP 125
35515: PUSH
35516: LD_INT 0
35518: ST_TO_ADDR
// sEarthquake := false ;
35519: LD_ADDR_EXP 127
35523: PUSH
35524: LD_INT 0
35526: ST_TO_ADDR
// sAI := false ;
35527: LD_ADDR_EXP 128
35531: PUSH
35532: LD_INT 0
35534: ST_TO_ADDR
// sCargo := false ;
35535: LD_ADDR_EXP 131
35539: PUSH
35540: LD_INT 0
35542: ST_TO_ADDR
// sDLaser := false ;
35543: LD_ADDR_EXP 132
35547: PUSH
35548: LD_INT 0
35550: ST_TO_ADDR
// sExchange := false ;
35551: LD_ADDR_EXP 133
35555: PUSH
35556: LD_INT 0
35558: ST_TO_ADDR
// sFac := false ;
35559: LD_ADDR_EXP 134
35563: PUSH
35564: LD_INT 0
35566: ST_TO_ADDR
// sPower := false ;
35567: LD_ADDR_EXP 135
35571: PUSH
35572: LD_INT 0
35574: ST_TO_ADDR
// sRandom := false ;
35575: LD_ADDR_EXP 136
35579: PUSH
35580: LD_INT 0
35582: ST_TO_ADDR
// sShield := false ;
35583: LD_ADDR_EXP 137
35587: PUSH
35588: LD_INT 0
35590: ST_TO_ADDR
// sTime := false ;
35591: LD_ADDR_EXP 138
35595: PUSH
35596: LD_INT 0
35598: ST_TO_ADDR
// sTools := false ;
35599: LD_ADDR_EXP 139
35603: PUSH
35604: LD_INT 0
35606: ST_TO_ADDR
// sSold := false ;
35607: LD_ADDR_EXP 104
35611: PUSH
35612: LD_INT 0
35614: ST_TO_ADDR
// sDiff := false ;
35615: LD_ADDR_EXP 105
35619: PUSH
35620: LD_INT 0
35622: ST_TO_ADDR
// sFog := false ;
35623: LD_ADDR_EXP 108
35627: PUSH
35628: LD_INT 0
35630: ST_TO_ADDR
// sReset := false ;
35631: LD_ADDR_EXP 109
35635: PUSH
35636: LD_INT 0
35638: ST_TO_ADDR
// sSun := false ;
35639: LD_ADDR_EXP 110
35643: PUSH
35644: LD_INT 0
35646: ST_TO_ADDR
// sTiger := false ;
35647: LD_ADDR_EXP 106
35651: PUSH
35652: LD_INT 0
35654: ST_TO_ADDR
// sBomb := false ;
35655: LD_ADDR_EXP 107
35659: PUSH
35660: LD_INT 0
35662: ST_TO_ADDR
// sWound := false ;
35663: LD_ADDR_EXP 115
35667: PUSH
35668: LD_INT 0
35670: ST_TO_ADDR
// sBetray := false ;
35671: LD_ADDR_EXP 119
35675: PUSH
35676: LD_INT 0
35678: ST_TO_ADDR
// sContamin := false ;
35679: LD_ADDR_EXP 120
35683: PUSH
35684: LD_INT 0
35686: ST_TO_ADDR
// sOil := false ;
35687: LD_ADDR_EXP 122
35691: PUSH
35692: LD_INT 0
35694: ST_TO_ADDR
// sStu := false ;
35695: LD_ADDR_EXP 126
35699: PUSH
35700: LD_INT 0
35702: ST_TO_ADDR
// sBazooka := false ;
35703: LD_ADDR_EXP 129
35707: PUSH
35708: LD_INT 0
35710: ST_TO_ADDR
// sMortar := false ;
35711: LD_ADDR_EXP 130
35715: PUSH
35716: LD_INT 0
35718: ST_TO_ADDR
// sRanger := false ;
35719: LD_ADDR_EXP 140
35723: PUSH
35724: LD_INT 0
35726: ST_TO_ADDR
// sComputer := false ;
35727: LD_ADDR_EXP 141
35731: PUSH
35732: LD_INT 0
35734: ST_TO_ADDR
// s30 := false ;
35735: LD_ADDR_EXP 142
35739: PUSH
35740: LD_INT 0
35742: ST_TO_ADDR
// s60 := false ;
35743: LD_ADDR_EXP 143
35747: PUSH
35748: LD_INT 0
35750: ST_TO_ADDR
// end ;
35751: LD_VAR 0 1
35755: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
35756: LD_INT 0
35758: PPUSH
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
35764: PPUSH
// result := [ ] ;
35765: LD_ADDR_VAR 0 2
35769: PUSH
35770: EMPTY
35771: ST_TO_ADDR
// if campaign_id = 1 then
35772: LD_OWVAR 69
35776: PUSH
35777: LD_INT 1
35779: EQUAL
35780: IFFALSE 38946
// begin case mission_number of 1 :
35782: LD_OWVAR 70
35786: PUSH
35787: LD_INT 1
35789: DOUBLE
35790: EQUAL
35791: IFTRUE 35795
35793: GO 35871
35795: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
35796: LD_ADDR_VAR 0 2
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: LD_INT 4
35806: PUSH
35807: LD_INT 11
35809: PUSH
35810: LD_INT 12
35812: PUSH
35813: LD_INT 15
35815: PUSH
35816: LD_INT 16
35818: PUSH
35819: LD_INT 22
35821: PUSH
35822: LD_INT 23
35824: PUSH
35825: LD_INT 26
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 101
35841: PUSH
35842: LD_INT 102
35844: PUSH
35845: LD_INT 106
35847: PUSH
35848: LD_INT 116
35850: PUSH
35851: LD_INT 117
35853: PUSH
35854: LD_INT 118
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: ST_TO_ADDR
35869: GO 38944
35871: LD_INT 2
35873: DOUBLE
35874: EQUAL
35875: IFTRUE 35879
35877: GO 35963
35879: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
35880: LD_ADDR_VAR 0 2
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: LD_INT 4
35890: PUSH
35891: LD_INT 11
35893: PUSH
35894: LD_INT 12
35896: PUSH
35897: LD_INT 15
35899: PUSH
35900: LD_INT 16
35902: PUSH
35903: LD_INT 22
35905: PUSH
35906: LD_INT 23
35908: PUSH
35909: LD_INT 26
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 101
35925: PUSH
35926: LD_INT 102
35928: PUSH
35929: LD_INT 105
35931: PUSH
35932: LD_INT 106
35934: PUSH
35935: LD_INT 108
35937: PUSH
35938: LD_INT 116
35940: PUSH
35941: LD_INT 117
35943: PUSH
35944: LD_INT 118
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: ST_TO_ADDR
35961: GO 38944
35963: LD_INT 3
35965: DOUBLE
35966: EQUAL
35967: IFTRUE 35971
35969: GO 36059
35971: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
35972: LD_ADDR_VAR 0 2
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: LD_INT 4
35982: PUSH
35983: LD_INT 5
35985: PUSH
35986: LD_INT 11
35988: PUSH
35989: LD_INT 12
35991: PUSH
35992: LD_INT 15
35994: PUSH
35995: LD_INT 16
35997: PUSH
35998: LD_INT 22
36000: PUSH
36001: LD_INT 26
36003: PUSH
36004: LD_INT 36
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 101
36021: PUSH
36022: LD_INT 102
36024: PUSH
36025: LD_INT 105
36027: PUSH
36028: LD_INT 106
36030: PUSH
36031: LD_INT 108
36033: PUSH
36034: LD_INT 116
36036: PUSH
36037: LD_INT 117
36039: PUSH
36040: LD_INT 118
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: ST_TO_ADDR
36057: GO 38944
36059: LD_INT 4
36061: DOUBLE
36062: EQUAL
36063: IFTRUE 36067
36065: GO 36163
36067: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36068: LD_ADDR_VAR 0 2
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: LD_INT 4
36078: PUSH
36079: LD_INT 5
36081: PUSH
36082: LD_INT 8
36084: PUSH
36085: LD_INT 11
36087: PUSH
36088: LD_INT 12
36090: PUSH
36091: LD_INT 15
36093: PUSH
36094: LD_INT 16
36096: PUSH
36097: LD_INT 22
36099: PUSH
36100: LD_INT 23
36102: PUSH
36103: LD_INT 26
36105: PUSH
36106: LD_INT 36
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 101
36125: PUSH
36126: LD_INT 102
36128: PUSH
36129: LD_INT 105
36131: PUSH
36132: LD_INT 106
36134: PUSH
36135: LD_INT 108
36137: PUSH
36138: LD_INT 116
36140: PUSH
36141: LD_INT 117
36143: PUSH
36144: LD_INT 118
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: ST_TO_ADDR
36161: GO 38944
36163: LD_INT 5
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36171
36169: GO 36283
36171: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36172: LD_ADDR_VAR 0 2
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: LD_INT 4
36182: PUSH
36183: LD_INT 5
36185: PUSH
36186: LD_INT 6
36188: PUSH
36189: LD_INT 8
36191: PUSH
36192: LD_INT 11
36194: PUSH
36195: LD_INT 12
36197: PUSH
36198: LD_INT 15
36200: PUSH
36201: LD_INT 16
36203: PUSH
36204: LD_INT 22
36206: PUSH
36207: LD_INT 23
36209: PUSH
36210: LD_INT 25
36212: PUSH
36213: LD_INT 26
36215: PUSH
36216: LD_INT 36
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 101
36237: PUSH
36238: LD_INT 102
36240: PUSH
36241: LD_INT 105
36243: PUSH
36244: LD_INT 106
36246: PUSH
36247: LD_INT 108
36249: PUSH
36250: LD_INT 109
36252: PUSH
36253: LD_INT 112
36255: PUSH
36256: LD_INT 116
36258: PUSH
36259: LD_INT 117
36261: PUSH
36262: LD_INT 118
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: ST_TO_ADDR
36281: GO 38944
36283: LD_INT 6
36285: DOUBLE
36286: EQUAL
36287: IFTRUE 36291
36289: GO 36423
36291: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36292: LD_ADDR_VAR 0 2
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: LD_INT 4
36302: PUSH
36303: LD_INT 5
36305: PUSH
36306: LD_INT 6
36308: PUSH
36309: LD_INT 8
36311: PUSH
36312: LD_INT 11
36314: PUSH
36315: LD_INT 12
36317: PUSH
36318: LD_INT 15
36320: PUSH
36321: LD_INT 16
36323: PUSH
36324: LD_INT 20
36326: PUSH
36327: LD_INT 21
36329: PUSH
36330: LD_INT 22
36332: PUSH
36333: LD_INT 23
36335: PUSH
36336: LD_INT 25
36338: PUSH
36339: LD_INT 26
36341: PUSH
36342: LD_INT 30
36344: PUSH
36345: LD_INT 31
36347: PUSH
36348: LD_INT 32
36350: PUSH
36351: LD_INT 36
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 101
36377: PUSH
36378: LD_INT 102
36380: PUSH
36381: LD_INT 105
36383: PUSH
36384: LD_INT 106
36386: PUSH
36387: LD_INT 108
36389: PUSH
36390: LD_INT 109
36392: PUSH
36393: LD_INT 112
36395: PUSH
36396: LD_INT 116
36398: PUSH
36399: LD_INT 117
36401: PUSH
36402: LD_INT 118
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: ST_TO_ADDR
36421: GO 38944
36423: LD_INT 7
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36431
36429: GO 36543
36431: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36432: LD_ADDR_VAR 0 2
36436: PUSH
36437: LD_INT 2
36439: PUSH
36440: LD_INT 4
36442: PUSH
36443: LD_INT 5
36445: PUSH
36446: LD_INT 7
36448: PUSH
36449: LD_INT 11
36451: PUSH
36452: LD_INT 12
36454: PUSH
36455: LD_INT 15
36457: PUSH
36458: LD_INT 16
36460: PUSH
36461: LD_INT 20
36463: PUSH
36464: LD_INT 21
36466: PUSH
36467: LD_INT 22
36469: PUSH
36470: LD_INT 23
36472: PUSH
36473: LD_INT 25
36475: PUSH
36476: LD_INT 26
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 101
36497: PUSH
36498: LD_INT 102
36500: PUSH
36501: LD_INT 103
36503: PUSH
36504: LD_INT 105
36506: PUSH
36507: LD_INT 106
36509: PUSH
36510: LD_INT 108
36512: PUSH
36513: LD_INT 112
36515: PUSH
36516: LD_INT 116
36518: PUSH
36519: LD_INT 117
36521: PUSH
36522: LD_INT 118
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: ST_TO_ADDR
36541: GO 38944
36543: LD_INT 8
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36551
36549: GO 36691
36551: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36552: LD_ADDR_VAR 0 2
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 4
36562: PUSH
36563: LD_INT 5
36565: PUSH
36566: LD_INT 6
36568: PUSH
36569: LD_INT 7
36571: PUSH
36572: LD_INT 8
36574: PUSH
36575: LD_INT 11
36577: PUSH
36578: LD_INT 12
36580: PUSH
36581: LD_INT 15
36583: PUSH
36584: LD_INT 16
36586: PUSH
36587: LD_INT 20
36589: PUSH
36590: LD_INT 21
36592: PUSH
36593: LD_INT 22
36595: PUSH
36596: LD_INT 23
36598: PUSH
36599: LD_INT 25
36601: PUSH
36602: LD_INT 26
36604: PUSH
36605: LD_INT 30
36607: PUSH
36608: LD_INT 31
36610: PUSH
36611: LD_INT 32
36613: PUSH
36614: LD_INT 36
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 101
36641: PUSH
36642: LD_INT 102
36644: PUSH
36645: LD_INT 103
36647: PUSH
36648: LD_INT 105
36650: PUSH
36651: LD_INT 106
36653: PUSH
36654: LD_INT 108
36656: PUSH
36657: LD_INT 109
36659: PUSH
36660: LD_INT 112
36662: PUSH
36663: LD_INT 116
36665: PUSH
36666: LD_INT 117
36668: PUSH
36669: LD_INT 118
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: ST_TO_ADDR
36689: GO 38944
36691: LD_INT 9
36693: DOUBLE
36694: EQUAL
36695: IFTRUE 36699
36697: GO 36847
36699: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
36700: LD_ADDR_VAR 0 2
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: LD_INT 4
36710: PUSH
36711: LD_INT 5
36713: PUSH
36714: LD_INT 6
36716: PUSH
36717: LD_INT 7
36719: PUSH
36720: LD_INT 8
36722: PUSH
36723: LD_INT 11
36725: PUSH
36726: LD_INT 12
36728: PUSH
36729: LD_INT 15
36731: PUSH
36732: LD_INT 16
36734: PUSH
36735: LD_INT 20
36737: PUSH
36738: LD_INT 21
36740: PUSH
36741: LD_INT 22
36743: PUSH
36744: LD_INT 23
36746: PUSH
36747: LD_INT 25
36749: PUSH
36750: LD_INT 26
36752: PUSH
36753: LD_INT 28
36755: PUSH
36756: LD_INT 30
36758: PUSH
36759: LD_INT 31
36761: PUSH
36762: LD_INT 32
36764: PUSH
36765: LD_INT 36
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 101
36793: PUSH
36794: LD_INT 102
36796: PUSH
36797: LD_INT 103
36799: PUSH
36800: LD_INT 105
36802: PUSH
36803: LD_INT 106
36805: PUSH
36806: LD_INT 108
36808: PUSH
36809: LD_INT 109
36811: PUSH
36812: LD_INT 112
36814: PUSH
36815: LD_INT 114
36817: PUSH
36818: LD_INT 116
36820: PUSH
36821: LD_INT 117
36823: PUSH
36824: LD_INT 118
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: ST_TO_ADDR
36845: GO 38944
36847: LD_INT 10
36849: DOUBLE
36850: EQUAL
36851: IFTRUE 36855
36853: GO 37051
36855: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
36856: LD_ADDR_VAR 0 2
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: LD_INT 4
36866: PUSH
36867: LD_INT 5
36869: PUSH
36870: LD_INT 6
36872: PUSH
36873: LD_INT 7
36875: PUSH
36876: LD_INT 8
36878: PUSH
36879: LD_INT 9
36881: PUSH
36882: LD_INT 10
36884: PUSH
36885: LD_INT 11
36887: PUSH
36888: LD_INT 12
36890: PUSH
36891: LD_INT 13
36893: PUSH
36894: LD_INT 14
36896: PUSH
36897: LD_INT 15
36899: PUSH
36900: LD_INT 16
36902: PUSH
36903: LD_INT 17
36905: PUSH
36906: LD_INT 18
36908: PUSH
36909: LD_INT 19
36911: PUSH
36912: LD_INT 20
36914: PUSH
36915: LD_INT 21
36917: PUSH
36918: LD_INT 22
36920: PUSH
36921: LD_INT 23
36923: PUSH
36924: LD_INT 24
36926: PUSH
36927: LD_INT 25
36929: PUSH
36930: LD_INT 26
36932: PUSH
36933: LD_INT 28
36935: PUSH
36936: LD_INT 30
36938: PUSH
36939: LD_INT 31
36941: PUSH
36942: LD_INT 32
36944: PUSH
36945: LD_INT 36
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 101
36981: PUSH
36982: LD_INT 102
36984: PUSH
36985: LD_INT 103
36987: PUSH
36988: LD_INT 104
36990: PUSH
36991: LD_INT 105
36993: PUSH
36994: LD_INT 106
36996: PUSH
36997: LD_INT 107
36999: PUSH
37000: LD_INT 108
37002: PUSH
37003: LD_INT 109
37005: PUSH
37006: LD_INT 110
37008: PUSH
37009: LD_INT 111
37011: PUSH
37012: LD_INT 112
37014: PUSH
37015: LD_INT 114
37017: PUSH
37018: LD_INT 116
37020: PUSH
37021: LD_INT 117
37023: PUSH
37024: LD_INT 118
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: ST_TO_ADDR
37049: GO 38944
37051: LD_INT 11
37053: DOUBLE
37054: EQUAL
37055: IFTRUE 37059
37057: GO 37263
37059: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37060: LD_ADDR_VAR 0 2
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: LD_INT 4
37073: PUSH
37074: LD_INT 5
37076: PUSH
37077: LD_INT 6
37079: PUSH
37080: LD_INT 7
37082: PUSH
37083: LD_INT 8
37085: PUSH
37086: LD_INT 9
37088: PUSH
37089: LD_INT 10
37091: PUSH
37092: LD_INT 11
37094: PUSH
37095: LD_INT 12
37097: PUSH
37098: LD_INT 13
37100: PUSH
37101: LD_INT 14
37103: PUSH
37104: LD_INT 15
37106: PUSH
37107: LD_INT 16
37109: PUSH
37110: LD_INT 17
37112: PUSH
37113: LD_INT 18
37115: PUSH
37116: LD_INT 19
37118: PUSH
37119: LD_INT 20
37121: PUSH
37122: LD_INT 21
37124: PUSH
37125: LD_INT 22
37127: PUSH
37128: LD_INT 23
37130: PUSH
37131: LD_INT 24
37133: PUSH
37134: LD_INT 25
37136: PUSH
37137: LD_INT 26
37139: PUSH
37140: LD_INT 28
37142: PUSH
37143: LD_INT 30
37145: PUSH
37146: LD_INT 31
37148: PUSH
37149: LD_INT 32
37151: PUSH
37152: LD_INT 34
37154: PUSH
37155: LD_INT 36
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 101
37193: PUSH
37194: LD_INT 102
37196: PUSH
37197: LD_INT 103
37199: PUSH
37200: LD_INT 104
37202: PUSH
37203: LD_INT 105
37205: PUSH
37206: LD_INT 106
37208: PUSH
37209: LD_INT 107
37211: PUSH
37212: LD_INT 108
37214: PUSH
37215: LD_INT 109
37217: PUSH
37218: LD_INT 110
37220: PUSH
37221: LD_INT 111
37223: PUSH
37224: LD_INT 112
37226: PUSH
37227: LD_INT 114
37229: PUSH
37230: LD_INT 116
37232: PUSH
37233: LD_INT 117
37235: PUSH
37236: LD_INT 118
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: ST_TO_ADDR
37261: GO 38944
37263: LD_INT 12
37265: DOUBLE
37266: EQUAL
37267: IFTRUE 37271
37269: GO 37491
37271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37272: LD_ADDR_VAR 0 2
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 3
37285: PUSH
37286: LD_INT 4
37288: PUSH
37289: LD_INT 5
37291: PUSH
37292: LD_INT 6
37294: PUSH
37295: LD_INT 7
37297: PUSH
37298: LD_INT 8
37300: PUSH
37301: LD_INT 9
37303: PUSH
37304: LD_INT 10
37306: PUSH
37307: LD_INT 11
37309: PUSH
37310: LD_INT 12
37312: PUSH
37313: LD_INT 13
37315: PUSH
37316: LD_INT 14
37318: PUSH
37319: LD_INT 15
37321: PUSH
37322: LD_INT 16
37324: PUSH
37325: LD_INT 17
37327: PUSH
37328: LD_INT 18
37330: PUSH
37331: LD_INT 19
37333: PUSH
37334: LD_INT 20
37336: PUSH
37337: LD_INT 21
37339: PUSH
37340: LD_INT 22
37342: PUSH
37343: LD_INT 23
37345: PUSH
37346: LD_INT 24
37348: PUSH
37349: LD_INT 25
37351: PUSH
37352: LD_INT 26
37354: PUSH
37355: LD_INT 27
37357: PUSH
37358: LD_INT 28
37360: PUSH
37361: LD_INT 30
37363: PUSH
37364: LD_INT 31
37366: PUSH
37367: LD_INT 32
37369: PUSH
37370: LD_INT 33
37372: PUSH
37373: LD_INT 34
37375: PUSH
37376: LD_INT 36
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 101
37417: PUSH
37418: LD_INT 102
37420: PUSH
37421: LD_INT 103
37423: PUSH
37424: LD_INT 104
37426: PUSH
37427: LD_INT 105
37429: PUSH
37430: LD_INT 106
37432: PUSH
37433: LD_INT 107
37435: PUSH
37436: LD_INT 108
37438: PUSH
37439: LD_INT 109
37441: PUSH
37442: LD_INT 110
37444: PUSH
37445: LD_INT 111
37447: PUSH
37448: LD_INT 112
37450: PUSH
37451: LD_INT 113
37453: PUSH
37454: LD_INT 114
37456: PUSH
37457: LD_INT 116
37459: PUSH
37460: LD_INT 117
37462: PUSH
37463: LD_INT 118
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: ST_TO_ADDR
37489: GO 38944
37491: LD_INT 13
37493: DOUBLE
37494: EQUAL
37495: IFTRUE 37499
37497: GO 37707
37499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37500: LD_ADDR_VAR 0 2
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: LD_INT 4
37516: PUSH
37517: LD_INT 5
37519: PUSH
37520: LD_INT 8
37522: PUSH
37523: LD_INT 9
37525: PUSH
37526: LD_INT 10
37528: PUSH
37529: LD_INT 11
37531: PUSH
37532: LD_INT 12
37534: PUSH
37535: LD_INT 14
37537: PUSH
37538: LD_INT 15
37540: PUSH
37541: LD_INT 16
37543: PUSH
37544: LD_INT 17
37546: PUSH
37547: LD_INT 18
37549: PUSH
37550: LD_INT 19
37552: PUSH
37553: LD_INT 20
37555: PUSH
37556: LD_INT 21
37558: PUSH
37559: LD_INT 22
37561: PUSH
37562: LD_INT 23
37564: PUSH
37565: LD_INT 24
37567: PUSH
37568: LD_INT 25
37570: PUSH
37571: LD_INT 26
37573: PUSH
37574: LD_INT 27
37576: PUSH
37577: LD_INT 28
37579: PUSH
37580: LD_INT 30
37582: PUSH
37583: LD_INT 31
37585: PUSH
37586: LD_INT 32
37588: PUSH
37589: LD_INT 33
37591: PUSH
37592: LD_INT 34
37594: PUSH
37595: LD_INT 36
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 101
37633: PUSH
37634: LD_INT 102
37636: PUSH
37637: LD_INT 103
37639: PUSH
37640: LD_INT 104
37642: PUSH
37643: LD_INT 105
37645: PUSH
37646: LD_INT 106
37648: PUSH
37649: LD_INT 107
37651: PUSH
37652: LD_INT 108
37654: PUSH
37655: LD_INT 109
37657: PUSH
37658: LD_INT 110
37660: PUSH
37661: LD_INT 111
37663: PUSH
37664: LD_INT 112
37666: PUSH
37667: LD_INT 113
37669: PUSH
37670: LD_INT 114
37672: PUSH
37673: LD_INT 116
37675: PUSH
37676: LD_INT 117
37678: PUSH
37679: LD_INT 118
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: ST_TO_ADDR
37705: GO 38944
37707: LD_INT 14
37709: DOUBLE
37710: EQUAL
37711: IFTRUE 37715
37713: GO 37939
37715: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
37716: LD_ADDR_VAR 0 2
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 3
37729: PUSH
37730: LD_INT 4
37732: PUSH
37733: LD_INT 5
37735: PUSH
37736: LD_INT 6
37738: PUSH
37739: LD_INT 7
37741: PUSH
37742: LD_INT 8
37744: PUSH
37745: LD_INT 9
37747: PUSH
37748: LD_INT 10
37750: PUSH
37751: LD_INT 11
37753: PUSH
37754: LD_INT 12
37756: PUSH
37757: LD_INT 13
37759: PUSH
37760: LD_INT 14
37762: PUSH
37763: LD_INT 15
37765: PUSH
37766: LD_INT 16
37768: PUSH
37769: LD_INT 17
37771: PUSH
37772: LD_INT 18
37774: PUSH
37775: LD_INT 19
37777: PUSH
37778: LD_INT 20
37780: PUSH
37781: LD_INT 21
37783: PUSH
37784: LD_INT 22
37786: PUSH
37787: LD_INT 23
37789: PUSH
37790: LD_INT 24
37792: PUSH
37793: LD_INT 25
37795: PUSH
37796: LD_INT 26
37798: PUSH
37799: LD_INT 27
37801: PUSH
37802: LD_INT 28
37804: PUSH
37805: LD_INT 29
37807: PUSH
37808: LD_INT 30
37810: PUSH
37811: LD_INT 31
37813: PUSH
37814: LD_INT 32
37816: PUSH
37817: LD_INT 33
37819: PUSH
37820: LD_INT 34
37822: PUSH
37823: LD_INT 36
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 101
37865: PUSH
37866: LD_INT 102
37868: PUSH
37869: LD_INT 103
37871: PUSH
37872: LD_INT 104
37874: PUSH
37875: LD_INT 105
37877: PUSH
37878: LD_INT 106
37880: PUSH
37881: LD_INT 107
37883: PUSH
37884: LD_INT 108
37886: PUSH
37887: LD_INT 109
37889: PUSH
37890: LD_INT 110
37892: PUSH
37893: LD_INT 111
37895: PUSH
37896: LD_INT 112
37898: PUSH
37899: LD_INT 113
37901: PUSH
37902: LD_INT 114
37904: PUSH
37905: LD_INT 116
37907: PUSH
37908: LD_INT 117
37910: PUSH
37911: LD_INT 118
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: ST_TO_ADDR
37937: GO 38944
37939: LD_INT 15
37941: DOUBLE
37942: EQUAL
37943: IFTRUE 37947
37945: GO 38171
37947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
37948: LD_ADDR_VAR 0 2
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: LD_INT 3
37961: PUSH
37962: LD_INT 4
37964: PUSH
37965: LD_INT 5
37967: PUSH
37968: LD_INT 6
37970: PUSH
37971: LD_INT 7
37973: PUSH
37974: LD_INT 8
37976: PUSH
37977: LD_INT 9
37979: PUSH
37980: LD_INT 10
37982: PUSH
37983: LD_INT 11
37985: PUSH
37986: LD_INT 12
37988: PUSH
37989: LD_INT 13
37991: PUSH
37992: LD_INT 14
37994: PUSH
37995: LD_INT 15
37997: PUSH
37998: LD_INT 16
38000: PUSH
38001: LD_INT 17
38003: PUSH
38004: LD_INT 18
38006: PUSH
38007: LD_INT 19
38009: PUSH
38010: LD_INT 20
38012: PUSH
38013: LD_INT 21
38015: PUSH
38016: LD_INT 22
38018: PUSH
38019: LD_INT 23
38021: PUSH
38022: LD_INT 24
38024: PUSH
38025: LD_INT 25
38027: PUSH
38028: LD_INT 26
38030: PUSH
38031: LD_INT 27
38033: PUSH
38034: LD_INT 28
38036: PUSH
38037: LD_INT 29
38039: PUSH
38040: LD_INT 30
38042: PUSH
38043: LD_INT 31
38045: PUSH
38046: LD_INT 32
38048: PUSH
38049: LD_INT 33
38051: PUSH
38052: LD_INT 34
38054: PUSH
38055: LD_INT 36
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 101
38097: PUSH
38098: LD_INT 102
38100: PUSH
38101: LD_INT 103
38103: PUSH
38104: LD_INT 104
38106: PUSH
38107: LD_INT 105
38109: PUSH
38110: LD_INT 106
38112: PUSH
38113: LD_INT 107
38115: PUSH
38116: LD_INT 108
38118: PUSH
38119: LD_INT 109
38121: PUSH
38122: LD_INT 110
38124: PUSH
38125: LD_INT 111
38127: PUSH
38128: LD_INT 112
38130: PUSH
38131: LD_INT 113
38133: PUSH
38134: LD_INT 114
38136: PUSH
38137: LD_INT 116
38139: PUSH
38140: LD_INT 117
38142: PUSH
38143: LD_INT 118
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: ST_TO_ADDR
38169: GO 38944
38171: LD_INT 16
38173: DOUBLE
38174: EQUAL
38175: IFTRUE 38179
38177: GO 38315
38179: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38180: LD_ADDR_VAR 0 2
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: LD_INT 4
38190: PUSH
38191: LD_INT 5
38193: PUSH
38194: LD_INT 7
38196: PUSH
38197: LD_INT 11
38199: PUSH
38200: LD_INT 12
38202: PUSH
38203: LD_INT 15
38205: PUSH
38206: LD_INT 16
38208: PUSH
38209: LD_INT 20
38211: PUSH
38212: LD_INT 21
38214: PUSH
38215: LD_INT 22
38217: PUSH
38218: LD_INT 23
38220: PUSH
38221: LD_INT 25
38223: PUSH
38224: LD_INT 26
38226: PUSH
38227: LD_INT 30
38229: PUSH
38230: LD_INT 31
38232: PUSH
38233: LD_INT 32
38235: PUSH
38236: LD_INT 33
38238: PUSH
38239: LD_INT 34
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 101
38265: PUSH
38266: LD_INT 102
38268: PUSH
38269: LD_INT 103
38271: PUSH
38272: LD_INT 106
38274: PUSH
38275: LD_INT 108
38277: PUSH
38278: LD_INT 112
38280: PUSH
38281: LD_INT 113
38283: PUSH
38284: LD_INT 114
38286: PUSH
38287: LD_INT 116
38289: PUSH
38290: LD_INT 117
38292: PUSH
38293: LD_INT 118
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: ST_TO_ADDR
38313: GO 38944
38315: LD_INT 17
38317: DOUBLE
38318: EQUAL
38319: IFTRUE 38323
38321: GO 38547
38323: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38324: LD_ADDR_VAR 0 2
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: LD_INT 4
38340: PUSH
38341: LD_INT 5
38343: PUSH
38344: LD_INT 6
38346: PUSH
38347: LD_INT 7
38349: PUSH
38350: LD_INT 8
38352: PUSH
38353: LD_INT 9
38355: PUSH
38356: LD_INT 10
38358: PUSH
38359: LD_INT 11
38361: PUSH
38362: LD_INT 12
38364: PUSH
38365: LD_INT 13
38367: PUSH
38368: LD_INT 14
38370: PUSH
38371: LD_INT 15
38373: PUSH
38374: LD_INT 16
38376: PUSH
38377: LD_INT 17
38379: PUSH
38380: LD_INT 18
38382: PUSH
38383: LD_INT 19
38385: PUSH
38386: LD_INT 20
38388: PUSH
38389: LD_INT 21
38391: PUSH
38392: LD_INT 22
38394: PUSH
38395: LD_INT 23
38397: PUSH
38398: LD_INT 24
38400: PUSH
38401: LD_INT 25
38403: PUSH
38404: LD_INT 26
38406: PUSH
38407: LD_INT 27
38409: PUSH
38410: LD_INT 28
38412: PUSH
38413: LD_INT 29
38415: PUSH
38416: LD_INT 30
38418: PUSH
38419: LD_INT 31
38421: PUSH
38422: LD_INT 32
38424: PUSH
38425: LD_INT 33
38427: PUSH
38428: LD_INT 34
38430: PUSH
38431: LD_INT 36
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 101
38473: PUSH
38474: LD_INT 102
38476: PUSH
38477: LD_INT 103
38479: PUSH
38480: LD_INT 104
38482: PUSH
38483: LD_INT 105
38485: PUSH
38486: LD_INT 106
38488: PUSH
38489: LD_INT 107
38491: PUSH
38492: LD_INT 108
38494: PUSH
38495: LD_INT 109
38497: PUSH
38498: LD_INT 110
38500: PUSH
38501: LD_INT 111
38503: PUSH
38504: LD_INT 112
38506: PUSH
38507: LD_INT 113
38509: PUSH
38510: LD_INT 114
38512: PUSH
38513: LD_INT 116
38515: PUSH
38516: LD_INT 117
38518: PUSH
38519: LD_INT 118
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: ST_TO_ADDR
38545: GO 38944
38547: LD_INT 18
38549: DOUBLE
38550: EQUAL
38551: IFTRUE 38555
38553: GO 38703
38555: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38556: LD_ADDR_VAR 0 2
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 4
38566: PUSH
38567: LD_INT 5
38569: PUSH
38570: LD_INT 7
38572: PUSH
38573: LD_INT 11
38575: PUSH
38576: LD_INT 12
38578: PUSH
38579: LD_INT 15
38581: PUSH
38582: LD_INT 16
38584: PUSH
38585: LD_INT 20
38587: PUSH
38588: LD_INT 21
38590: PUSH
38591: LD_INT 22
38593: PUSH
38594: LD_INT 23
38596: PUSH
38597: LD_INT 25
38599: PUSH
38600: LD_INT 26
38602: PUSH
38603: LD_INT 30
38605: PUSH
38606: LD_INT 31
38608: PUSH
38609: LD_INT 32
38611: PUSH
38612: LD_INT 33
38614: PUSH
38615: LD_INT 34
38617: PUSH
38618: LD_INT 35
38620: PUSH
38621: LD_INT 36
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 101
38649: PUSH
38650: LD_INT 102
38652: PUSH
38653: LD_INT 103
38655: PUSH
38656: LD_INT 106
38658: PUSH
38659: LD_INT 108
38661: PUSH
38662: LD_INT 112
38664: PUSH
38665: LD_INT 113
38667: PUSH
38668: LD_INT 114
38670: PUSH
38671: LD_INT 115
38673: PUSH
38674: LD_INT 116
38676: PUSH
38677: LD_INT 117
38679: PUSH
38680: LD_INT 118
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: ST_TO_ADDR
38701: GO 38944
38703: LD_INT 19
38705: DOUBLE
38706: EQUAL
38707: IFTRUE 38711
38709: GO 38943
38711: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
38712: LD_ADDR_VAR 0 2
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: LD_INT 3
38725: PUSH
38726: LD_INT 4
38728: PUSH
38729: LD_INT 5
38731: PUSH
38732: LD_INT 6
38734: PUSH
38735: LD_INT 7
38737: PUSH
38738: LD_INT 8
38740: PUSH
38741: LD_INT 9
38743: PUSH
38744: LD_INT 10
38746: PUSH
38747: LD_INT 11
38749: PUSH
38750: LD_INT 12
38752: PUSH
38753: LD_INT 13
38755: PUSH
38756: LD_INT 14
38758: PUSH
38759: LD_INT 15
38761: PUSH
38762: LD_INT 16
38764: PUSH
38765: LD_INT 17
38767: PUSH
38768: LD_INT 18
38770: PUSH
38771: LD_INT 19
38773: PUSH
38774: LD_INT 20
38776: PUSH
38777: LD_INT 21
38779: PUSH
38780: LD_INT 22
38782: PUSH
38783: LD_INT 23
38785: PUSH
38786: LD_INT 24
38788: PUSH
38789: LD_INT 25
38791: PUSH
38792: LD_INT 26
38794: PUSH
38795: LD_INT 27
38797: PUSH
38798: LD_INT 28
38800: PUSH
38801: LD_INT 29
38803: PUSH
38804: LD_INT 30
38806: PUSH
38807: LD_INT 31
38809: PUSH
38810: LD_INT 32
38812: PUSH
38813: LD_INT 33
38815: PUSH
38816: LD_INT 34
38818: PUSH
38819: LD_INT 35
38821: PUSH
38822: LD_INT 36
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 101
38865: PUSH
38866: LD_INT 102
38868: PUSH
38869: LD_INT 103
38871: PUSH
38872: LD_INT 104
38874: PUSH
38875: LD_INT 105
38877: PUSH
38878: LD_INT 106
38880: PUSH
38881: LD_INT 107
38883: PUSH
38884: LD_INT 108
38886: PUSH
38887: LD_INT 109
38889: PUSH
38890: LD_INT 110
38892: PUSH
38893: LD_INT 111
38895: PUSH
38896: LD_INT 112
38898: PUSH
38899: LD_INT 113
38901: PUSH
38902: LD_INT 114
38904: PUSH
38905: LD_INT 115
38907: PUSH
38908: LD_INT 116
38910: PUSH
38911: LD_INT 117
38913: PUSH
38914: LD_INT 118
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: ST_TO_ADDR
38941: GO 38944
38943: POP
// end else
38944: GO 39175
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
38946: LD_ADDR_VAR 0 2
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: LD_INT 3
38959: PUSH
38960: LD_INT 4
38962: PUSH
38963: LD_INT 5
38965: PUSH
38966: LD_INT 6
38968: PUSH
38969: LD_INT 7
38971: PUSH
38972: LD_INT 8
38974: PUSH
38975: LD_INT 9
38977: PUSH
38978: LD_INT 10
38980: PUSH
38981: LD_INT 11
38983: PUSH
38984: LD_INT 12
38986: PUSH
38987: LD_INT 13
38989: PUSH
38990: LD_INT 14
38992: PUSH
38993: LD_INT 15
38995: PUSH
38996: LD_INT 16
38998: PUSH
38999: LD_INT 17
39001: PUSH
39002: LD_INT 18
39004: PUSH
39005: LD_INT 19
39007: PUSH
39008: LD_INT 20
39010: PUSH
39011: LD_INT 21
39013: PUSH
39014: LD_INT 22
39016: PUSH
39017: LD_INT 23
39019: PUSH
39020: LD_INT 24
39022: PUSH
39023: LD_INT 25
39025: PUSH
39026: LD_INT 26
39028: PUSH
39029: LD_INT 27
39031: PUSH
39032: LD_INT 28
39034: PUSH
39035: LD_INT 29
39037: PUSH
39038: LD_INT 30
39040: PUSH
39041: LD_INT 31
39043: PUSH
39044: LD_INT 32
39046: PUSH
39047: LD_INT 33
39049: PUSH
39050: LD_INT 34
39052: PUSH
39053: LD_INT 35
39055: PUSH
39056: LD_INT 36
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 101
39099: PUSH
39100: LD_INT 102
39102: PUSH
39103: LD_INT 103
39105: PUSH
39106: LD_INT 104
39108: PUSH
39109: LD_INT 105
39111: PUSH
39112: LD_INT 106
39114: PUSH
39115: LD_INT 107
39117: PUSH
39118: LD_INT 108
39120: PUSH
39121: LD_INT 109
39123: PUSH
39124: LD_INT 110
39126: PUSH
39127: LD_INT 111
39129: PUSH
39130: LD_INT 112
39132: PUSH
39133: LD_INT 113
39135: PUSH
39136: LD_INT 114
39138: PUSH
39139: LD_INT 115
39141: PUSH
39142: LD_INT 116
39144: PUSH
39145: LD_INT 117
39147: PUSH
39148: LD_INT 118
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: ST_TO_ADDR
// if result then
39175: LD_VAR 0 2
39179: IFFALSE 39965
// begin normal :=  ;
39181: LD_ADDR_VAR 0 5
39185: PUSH
39186: LD_STRING 
39188: ST_TO_ADDR
// hardcore :=  ;
39189: LD_ADDR_VAR 0 6
39193: PUSH
39194: LD_STRING 
39196: ST_TO_ADDR
// active :=  ;
39197: LD_ADDR_VAR 0 7
39201: PUSH
39202: LD_STRING 
39204: ST_TO_ADDR
// for i = 1 to normalCounter do
39205: LD_ADDR_VAR 0 8
39209: PUSH
39210: DOUBLE
39211: LD_INT 1
39213: DEC
39214: ST_TO_ADDR
39215: LD_EXP 88
39219: PUSH
39220: FOR_TO
39221: IFFALSE 39322
// begin tmp := 0 ;
39223: LD_ADDR_VAR 0 3
39227: PUSH
39228: LD_STRING 0
39230: ST_TO_ADDR
// if result [ 1 ] then
39231: LD_VAR 0 2
39235: PUSH
39236: LD_INT 1
39238: ARRAY
39239: IFFALSE 39304
// if result [ 1 ] [ 1 ] = i then
39241: LD_VAR 0 2
39245: PUSH
39246: LD_INT 1
39248: ARRAY
39249: PUSH
39250: LD_INT 1
39252: ARRAY
39253: PUSH
39254: LD_VAR 0 8
39258: EQUAL
39259: IFFALSE 39304
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39261: LD_ADDR_VAR 0 2
39265: PUSH
39266: LD_VAR 0 2
39270: PPUSH
39271: LD_INT 1
39273: PPUSH
39274: LD_VAR 0 2
39278: PUSH
39279: LD_INT 1
39281: ARRAY
39282: PPUSH
39283: LD_INT 1
39285: PPUSH
39286: CALL_OW 3
39290: PPUSH
39291: CALL_OW 1
39295: ST_TO_ADDR
// tmp := 1 ;
39296: LD_ADDR_VAR 0 3
39300: PUSH
39301: LD_STRING 1
39303: ST_TO_ADDR
// end ; normal := normal & tmp ;
39304: LD_ADDR_VAR 0 5
39308: PUSH
39309: LD_VAR 0 5
39313: PUSH
39314: LD_VAR 0 3
39318: STR
39319: ST_TO_ADDR
// end ;
39320: GO 39220
39322: POP
39323: POP
// for i = 1 to hardcoreCounter do
39324: LD_ADDR_VAR 0 8
39328: PUSH
39329: DOUBLE
39330: LD_INT 1
39332: DEC
39333: ST_TO_ADDR
39334: LD_EXP 89
39338: PUSH
39339: FOR_TO
39340: IFFALSE 39445
// begin tmp := 0 ;
39342: LD_ADDR_VAR 0 3
39346: PUSH
39347: LD_STRING 0
39349: ST_TO_ADDR
// if result [ 2 ] then
39350: LD_VAR 0 2
39354: PUSH
39355: LD_INT 2
39357: ARRAY
39358: IFFALSE 39427
// if result [ 2 ] [ 1 ] = 100 + i then
39360: LD_VAR 0 2
39364: PUSH
39365: LD_INT 2
39367: ARRAY
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PUSH
39373: LD_INT 100
39375: PUSH
39376: LD_VAR 0 8
39380: PLUS
39381: EQUAL
39382: IFFALSE 39427
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39384: LD_ADDR_VAR 0 2
39388: PUSH
39389: LD_VAR 0 2
39393: PPUSH
39394: LD_INT 2
39396: PPUSH
39397: LD_VAR 0 2
39401: PUSH
39402: LD_INT 2
39404: ARRAY
39405: PPUSH
39406: LD_INT 1
39408: PPUSH
39409: CALL_OW 3
39413: PPUSH
39414: CALL_OW 1
39418: ST_TO_ADDR
// tmp := 1 ;
39419: LD_ADDR_VAR 0 3
39423: PUSH
39424: LD_STRING 1
39426: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39427: LD_ADDR_VAR 0 6
39431: PUSH
39432: LD_VAR 0 6
39436: PUSH
39437: LD_VAR 0 3
39441: STR
39442: ST_TO_ADDR
// end ;
39443: GO 39339
39445: POP
39446: POP
// if isGameLoad then
39447: LD_VAR 0 1
39451: IFFALSE 39926
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39453: LD_ADDR_VAR 0 4
39457: PUSH
39458: LD_EXP 92
39462: PUSH
39463: LD_EXP 91
39467: PUSH
39468: LD_EXP 93
39472: PUSH
39473: LD_EXP 90
39477: PUSH
39478: LD_EXP 94
39482: PUSH
39483: LD_EXP 95
39487: PUSH
39488: LD_EXP 96
39492: PUSH
39493: LD_EXP 97
39497: PUSH
39498: LD_EXP 98
39502: PUSH
39503: LD_EXP 99
39507: PUSH
39508: LD_EXP 100
39512: PUSH
39513: LD_EXP 101
39517: PUSH
39518: LD_EXP 102
39522: PUSH
39523: LD_EXP 103
39527: PUSH
39528: LD_EXP 111
39532: PUSH
39533: LD_EXP 112
39537: PUSH
39538: LD_EXP 113
39542: PUSH
39543: LD_EXP 114
39547: PUSH
39548: LD_EXP 116
39552: PUSH
39553: LD_EXP 117
39557: PUSH
39558: LD_EXP 118
39562: PUSH
39563: LD_EXP 121
39567: PUSH
39568: LD_EXP 123
39572: PUSH
39573: LD_EXP 124
39577: PUSH
39578: LD_EXP 125
39582: PUSH
39583: LD_EXP 127
39587: PUSH
39588: LD_EXP 128
39592: PUSH
39593: LD_EXP 131
39597: PUSH
39598: LD_EXP 132
39602: PUSH
39603: LD_EXP 133
39607: PUSH
39608: LD_EXP 134
39612: PUSH
39613: LD_EXP 135
39617: PUSH
39618: LD_EXP 136
39622: PUSH
39623: LD_EXP 137
39627: PUSH
39628: LD_EXP 138
39632: PUSH
39633: LD_EXP 139
39637: PUSH
39638: LD_EXP 104
39642: PUSH
39643: LD_EXP 105
39647: PUSH
39648: LD_EXP 108
39652: PUSH
39653: LD_EXP 109
39657: PUSH
39658: LD_EXP 110
39662: PUSH
39663: LD_EXP 106
39667: PUSH
39668: LD_EXP 107
39672: PUSH
39673: LD_EXP 115
39677: PUSH
39678: LD_EXP 119
39682: PUSH
39683: LD_EXP 120
39687: PUSH
39688: LD_EXP 122
39692: PUSH
39693: LD_EXP 126
39697: PUSH
39698: LD_EXP 129
39702: PUSH
39703: LD_EXP 130
39707: PUSH
39708: LD_EXP 140
39712: PUSH
39713: LD_EXP 141
39717: PUSH
39718: LD_EXP 142
39722: PUSH
39723: LD_EXP 143
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: ST_TO_ADDR
// tmp :=  ;
39784: LD_ADDR_VAR 0 3
39788: PUSH
39789: LD_STRING 
39791: ST_TO_ADDR
// for i = 1 to normalCounter do
39792: LD_ADDR_VAR 0 8
39796: PUSH
39797: DOUBLE
39798: LD_INT 1
39800: DEC
39801: ST_TO_ADDR
39802: LD_EXP 88
39806: PUSH
39807: FOR_TO
39808: IFFALSE 39844
// begin if flags [ i ] then
39810: LD_VAR 0 4
39814: PUSH
39815: LD_VAR 0 8
39819: ARRAY
39820: IFFALSE 39842
// tmp := tmp & i & ; ;
39822: LD_ADDR_VAR 0 3
39826: PUSH
39827: LD_VAR 0 3
39831: PUSH
39832: LD_VAR 0 8
39836: STR
39837: PUSH
39838: LD_STRING ;
39840: STR
39841: ST_TO_ADDR
// end ;
39842: GO 39807
39844: POP
39845: POP
// for i = 1 to hardcoreCounter do
39846: LD_ADDR_VAR 0 8
39850: PUSH
39851: DOUBLE
39852: LD_INT 1
39854: DEC
39855: ST_TO_ADDR
39856: LD_EXP 89
39860: PUSH
39861: FOR_TO
39862: IFFALSE 39908
// begin if flags [ normalCounter + i ] then
39864: LD_VAR 0 4
39868: PUSH
39869: LD_EXP 88
39873: PUSH
39874: LD_VAR 0 8
39878: PLUS
39879: ARRAY
39880: IFFALSE 39906
// tmp := tmp & ( 100 + i ) & ; ;
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_VAR 0 3
39891: PUSH
39892: LD_INT 100
39894: PUSH
39895: LD_VAR 0 8
39899: PLUS
39900: STR
39901: PUSH
39902: LD_STRING ;
39904: STR
39905: ST_TO_ADDR
// end ;
39906: GO 39861
39908: POP
39909: POP
// if tmp then
39910: LD_VAR 0 3
39914: IFFALSE 39926
// active := tmp ;
39916: LD_ADDR_VAR 0 7
39920: PUSH
39921: LD_VAR 0 3
39925: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
39926: LD_STRING getStreamItemsFromMission("
39928: PUSH
39929: LD_VAR 0 5
39933: STR
39934: PUSH
39935: LD_STRING ","
39937: STR
39938: PUSH
39939: LD_VAR 0 6
39943: STR
39944: PUSH
39945: LD_STRING ","
39947: STR
39948: PUSH
39949: LD_VAR 0 7
39953: STR
39954: PUSH
39955: LD_STRING ")
39957: STR
39958: PPUSH
39959: CALL_OW 559
// end else
39963: GO 39972
// ToLua ( getStreamItemsFromMission("","","") ) ;
39965: LD_STRING getStreamItemsFromMission("","","")
39967: PPUSH
39968: CALL_OW 559
// end ;
39972: LD_VAR 0 2
39976: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
39977: LD_EXP 87
39981: PUSH
39982: LD_EXP 92
39986: AND
39987: IFFALSE 40111
39989: GO 39991
39991: DISABLE
39992: LD_INT 0
39994: PPUSH
39995: PPUSH
// begin enable ;
39996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
39997: LD_ADDR_VAR 0 2
40001: PUSH
40002: LD_INT 22
40004: PUSH
40005: LD_OWVAR 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 34
40019: PUSH
40020: LD_INT 7
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 34
40029: PUSH
40030: LD_INT 45
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 34
40039: PUSH
40040: LD_INT 28
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 34
40049: PUSH
40050: LD_INT 47
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PPUSH
40068: CALL_OW 69
40072: ST_TO_ADDR
// if not tmp then
40073: LD_VAR 0 2
40077: NOT
40078: IFFALSE 40082
// exit ;
40080: GO 40111
// for i in tmp do
40082: LD_ADDR_VAR 0 1
40086: PUSH
40087: LD_VAR 0 2
40091: PUSH
40092: FOR_IN
40093: IFFALSE 40109
// begin SetLives ( i , 0 ) ;
40095: LD_VAR 0 1
40099: PPUSH
40100: LD_INT 0
40102: PPUSH
40103: CALL_OW 234
// end ;
40107: GO 40092
40109: POP
40110: POP
// end ;
40111: PPOPN 2
40113: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40114: LD_EXP 87
40118: PUSH
40119: LD_EXP 93
40123: AND
40124: IFFALSE 40208
40126: GO 40128
40128: DISABLE
40129: LD_INT 0
40131: PPUSH
40132: PPUSH
// begin enable ;
40133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40134: LD_ADDR_VAR 0 2
40138: PUSH
40139: LD_INT 22
40141: PUSH
40142: LD_OWVAR 2
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 32
40153: PUSH
40154: LD_INT 3
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PPUSH
40165: CALL_OW 69
40169: ST_TO_ADDR
// if not tmp then
40170: LD_VAR 0 2
40174: NOT
40175: IFFALSE 40179
// exit ;
40177: GO 40208
// for i in tmp do
40179: LD_ADDR_VAR 0 1
40183: PUSH
40184: LD_VAR 0 2
40188: PUSH
40189: FOR_IN
40190: IFFALSE 40206
// begin SetLives ( i , 0 ) ;
40192: LD_VAR 0 1
40196: PPUSH
40197: LD_INT 0
40199: PPUSH
40200: CALL_OW 234
// end ;
40204: GO 40189
40206: POP
40207: POP
// end ;
40208: PPOPN 2
40210: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40211: LD_EXP 87
40215: PUSH
40216: LD_EXP 90
40220: AND
40221: IFFALSE 40314
40223: GO 40225
40225: DISABLE
40226: LD_INT 0
40228: PPUSH
// begin enable ;
40229: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40230: LD_ADDR_VAR 0 1
40234: PUSH
40235: LD_INT 22
40237: PUSH
40238: LD_OWVAR 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 25
40252: PUSH
40253: LD_INT 5
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 25
40262: PUSH
40263: LD_INT 9
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 25
40272: PUSH
40273: LD_INT 8
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PPUSH
40290: CALL_OW 69
40294: PUSH
40295: FOR_IN
40296: IFFALSE 40312
// begin SetClass ( i , 1 ) ;
40298: LD_VAR 0 1
40302: PPUSH
40303: LD_INT 1
40305: PPUSH
40306: CALL_OW 336
// end ;
40310: GO 40295
40312: POP
40313: POP
// end ;
40314: PPOPN 1
40316: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40317: LD_EXP 87
40321: PUSH
40322: LD_EXP 91
40326: AND
40327: PUSH
40328: LD_OWVAR 65
40332: PUSH
40333: LD_INT 7
40335: LESS
40336: AND
40337: IFFALSE 40351
40339: GO 40341
40341: DISABLE
// begin enable ;
40342: ENABLE
// game_speed := 7 ;
40343: LD_ADDR_OWVAR 65
40347: PUSH
40348: LD_INT 7
40350: ST_TO_ADDR
// end ;
40351: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40352: LD_EXP 87
40356: PUSH
40357: LD_EXP 94
40361: AND
40362: IFFALSE 40564
40364: GO 40366
40366: DISABLE
40367: LD_INT 0
40369: PPUSH
40370: PPUSH
40371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40372: LD_ADDR_VAR 0 3
40376: PUSH
40377: LD_INT 81
40379: PUSH
40380: LD_OWVAR 2
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 21
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PPUSH
40403: CALL_OW 69
40407: ST_TO_ADDR
// if not tmp then
40408: LD_VAR 0 3
40412: NOT
40413: IFFALSE 40417
// exit ;
40415: GO 40564
// if tmp > 5 then
40417: LD_VAR 0 3
40421: PUSH
40422: LD_INT 5
40424: GREATER
40425: IFFALSE 40437
// k := 5 else
40427: LD_ADDR_VAR 0 2
40431: PUSH
40432: LD_INT 5
40434: ST_TO_ADDR
40435: GO 40447
// k := tmp ;
40437: LD_ADDR_VAR 0 2
40441: PUSH
40442: LD_VAR 0 3
40446: ST_TO_ADDR
// for i := 1 to k do
40447: LD_ADDR_VAR 0 1
40451: PUSH
40452: DOUBLE
40453: LD_INT 1
40455: DEC
40456: ST_TO_ADDR
40457: LD_VAR 0 2
40461: PUSH
40462: FOR_TO
40463: IFFALSE 40562
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40465: LD_VAR 0 3
40469: PUSH
40470: LD_VAR 0 1
40474: ARRAY
40475: PPUSH
40476: LD_VAR 0 1
40480: PUSH
40481: LD_INT 4
40483: MOD
40484: PUSH
40485: LD_INT 1
40487: PLUS
40488: PPUSH
40489: CALL_OW 259
40493: PUSH
40494: LD_INT 10
40496: LESS
40497: IFFALSE 40560
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40499: LD_VAR 0 3
40503: PUSH
40504: LD_VAR 0 1
40508: ARRAY
40509: PPUSH
40510: LD_VAR 0 1
40514: PUSH
40515: LD_INT 4
40517: MOD
40518: PUSH
40519: LD_INT 1
40521: PLUS
40522: PPUSH
40523: LD_VAR 0 3
40527: PUSH
40528: LD_VAR 0 1
40532: ARRAY
40533: PPUSH
40534: LD_VAR 0 1
40538: PUSH
40539: LD_INT 4
40541: MOD
40542: PUSH
40543: LD_INT 1
40545: PLUS
40546: PPUSH
40547: CALL_OW 259
40551: PUSH
40552: LD_INT 1
40554: PLUS
40555: PPUSH
40556: CALL_OW 237
40560: GO 40462
40562: POP
40563: POP
// end ;
40564: PPOPN 3
40566: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40567: LD_EXP 87
40571: PUSH
40572: LD_EXP 95
40576: AND
40577: IFFALSE 40597
40579: GO 40581
40581: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40582: LD_INT 4
40584: PPUSH
40585: LD_OWVAR 2
40589: PPUSH
40590: LD_INT 0
40592: PPUSH
40593: CALL_OW 324
40597: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40598: LD_EXP 87
40602: PUSH
40603: LD_EXP 124
40607: AND
40608: IFFALSE 40628
40610: GO 40612
40612: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40613: LD_INT 19
40615: PPUSH
40616: LD_OWVAR 2
40620: PPUSH
40621: LD_INT 0
40623: PPUSH
40624: CALL_OW 324
40628: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40629: LD_EXP 87
40633: PUSH
40634: LD_EXP 96
40638: AND
40639: IFFALSE 40741
40641: GO 40643
40643: DISABLE
40644: LD_INT 0
40646: PPUSH
40647: PPUSH
// begin enable ;
40648: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40649: LD_ADDR_VAR 0 2
40653: PUSH
40654: LD_INT 22
40656: PUSH
40657: LD_OWVAR 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 2
40668: PUSH
40669: LD_INT 34
40671: PUSH
40672: LD_INT 11
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 34
40681: PUSH
40682: LD_INT 30
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PPUSH
40698: CALL_OW 69
40702: ST_TO_ADDR
// if not tmp then
40703: LD_VAR 0 2
40707: NOT
40708: IFFALSE 40712
// exit ;
40710: GO 40741
// for i in tmp do
40712: LD_ADDR_VAR 0 1
40716: PUSH
40717: LD_VAR 0 2
40721: PUSH
40722: FOR_IN
40723: IFFALSE 40739
// begin SetLives ( i , 0 ) ;
40725: LD_VAR 0 1
40729: PPUSH
40730: LD_INT 0
40732: PPUSH
40733: CALL_OW 234
// end ;
40737: GO 40722
40739: POP
40740: POP
// end ;
40741: PPOPN 2
40743: END
// every 0 0$1 trigger StreamModeActive and sBunker do
40744: LD_EXP 87
40748: PUSH
40749: LD_EXP 97
40753: AND
40754: IFFALSE 40774
40756: GO 40758
40758: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
40759: LD_INT 32
40761: PPUSH
40762: LD_OWVAR 2
40766: PPUSH
40767: LD_INT 0
40769: PPUSH
40770: CALL_OW 324
40774: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
40775: LD_EXP 87
40779: PUSH
40780: LD_EXP 98
40784: AND
40785: IFFALSE 40966
40787: GO 40789
40789: DISABLE
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
40794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
40795: LD_ADDR_VAR 0 2
40799: PUSH
40800: LD_INT 22
40802: PUSH
40803: LD_OWVAR 2
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 33
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PPUSH
40826: CALL_OW 69
40830: ST_TO_ADDR
// if not tmp then
40831: LD_VAR 0 2
40835: NOT
40836: IFFALSE 40840
// exit ;
40838: GO 40966
// side := 0 ;
40840: LD_ADDR_VAR 0 3
40844: PUSH
40845: LD_INT 0
40847: ST_TO_ADDR
// for i := 1 to 8 do
40848: LD_ADDR_VAR 0 1
40852: PUSH
40853: DOUBLE
40854: LD_INT 1
40856: DEC
40857: ST_TO_ADDR
40858: LD_INT 8
40860: PUSH
40861: FOR_TO
40862: IFFALSE 40910
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
40864: LD_OWVAR 2
40868: PUSH
40869: LD_VAR 0 1
40873: NONEQUAL
40874: PUSH
40875: LD_OWVAR 2
40879: PPUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 81
40889: PUSH
40890: LD_INT 2
40892: EQUAL
40893: AND
40894: IFFALSE 40908
// begin side := i ;
40896: LD_ADDR_VAR 0 3
40900: PUSH
40901: LD_VAR 0 1
40905: ST_TO_ADDR
// break ;
40906: GO 40910
// end ;
40908: GO 40861
40910: POP
40911: POP
// if not side then
40912: LD_VAR 0 3
40916: NOT
40917: IFFALSE 40921
// exit ;
40919: GO 40966
// for i := 1 to tmp do
40921: LD_ADDR_VAR 0 1
40925: PUSH
40926: DOUBLE
40927: LD_INT 1
40929: DEC
40930: ST_TO_ADDR
40931: LD_VAR 0 2
40935: PUSH
40936: FOR_TO
40937: IFFALSE 40964
// if Prob ( 60 ) then
40939: LD_INT 60
40941: PPUSH
40942: CALL_OW 13
40946: IFFALSE 40962
// SetSide ( i , side ) ;
40948: LD_VAR 0 1
40952: PPUSH
40953: LD_VAR 0 3
40957: PPUSH
40958: CALL_OW 235
40962: GO 40936
40964: POP
40965: POP
// end ;
40966: PPOPN 3
40968: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
40969: LD_EXP 87
40973: PUSH
40974: LD_EXP 100
40978: AND
40979: IFFALSE 41098
40981: GO 40983
40983: DISABLE
40984: LD_INT 0
40986: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
40987: LD_ADDR_VAR 0 1
40991: PUSH
40992: LD_INT 22
40994: PUSH
40995: LD_OWVAR 2
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 21
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 3
41016: PUSH
41017: LD_INT 23
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: LIST
41035: PPUSH
41036: CALL_OW 69
41040: PUSH
41041: FOR_IN
41042: IFFALSE 41096
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41044: LD_VAR 0 1
41048: PPUSH
41049: CALL_OW 257
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 3
41062: PUSH
41063: LD_INT 4
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: IN
41072: IFFALSE 41094
// SetClass ( un , rand ( 1 , 4 ) ) ;
41074: LD_VAR 0 1
41078: PPUSH
41079: LD_INT 1
41081: PPUSH
41082: LD_INT 4
41084: PPUSH
41085: CALL_OW 12
41089: PPUSH
41090: CALL_OW 336
41094: GO 41041
41096: POP
41097: POP
// end ;
41098: PPOPN 1
41100: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41101: LD_EXP 87
41105: PUSH
41106: LD_EXP 99
41110: AND
41111: IFFALSE 41190
41113: GO 41115
41115: DISABLE
41116: LD_INT 0
41118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41119: LD_ADDR_VAR 0 1
41123: PUSH
41124: LD_INT 22
41126: PUSH
41127: LD_OWVAR 2
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 21
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PPUSH
41150: CALL_OW 69
41154: ST_TO_ADDR
// if not tmp then
41155: LD_VAR 0 1
41159: NOT
41160: IFFALSE 41164
// exit ;
41162: GO 41190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41164: LD_VAR 0 1
41168: PUSH
41169: LD_INT 1
41171: PPUSH
41172: LD_VAR 0 1
41176: PPUSH
41177: CALL_OW 12
41181: ARRAY
41182: PPUSH
41183: LD_INT 100
41185: PPUSH
41186: CALL_OW 234
// end ;
41190: PPOPN 1
41192: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41193: LD_EXP 87
41197: PUSH
41198: LD_EXP 101
41202: AND
41203: IFFALSE 41301
41205: GO 41207
41207: DISABLE
41208: LD_INT 0
41210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41211: LD_ADDR_VAR 0 1
41215: PUSH
41216: LD_INT 22
41218: PUSH
41219: LD_OWVAR 2
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 21
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PPUSH
41242: CALL_OW 69
41246: ST_TO_ADDR
// if not tmp then
41247: LD_VAR 0 1
41251: NOT
41252: IFFALSE 41256
// exit ;
41254: GO 41301
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41256: LD_VAR 0 1
41260: PUSH
41261: LD_INT 1
41263: PPUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: CALL_OW 12
41273: ARRAY
41274: PPUSH
41275: LD_INT 1
41277: PPUSH
41278: LD_INT 4
41280: PPUSH
41281: CALL_OW 12
41285: PPUSH
41286: LD_INT 3000
41288: PPUSH
41289: LD_INT 9000
41291: PPUSH
41292: CALL_OW 12
41296: PPUSH
41297: CALL_OW 492
// end ;
41301: PPOPN 1
41303: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41304: LD_EXP 87
41308: PUSH
41309: LD_EXP 102
41313: AND
41314: IFFALSE 41334
41316: GO 41318
41318: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41319: LD_INT 1
41321: PPUSH
41322: LD_OWVAR 2
41326: PPUSH
41327: LD_INT 0
41329: PPUSH
41330: CALL_OW 324
41334: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41335: LD_EXP 87
41339: PUSH
41340: LD_EXP 103
41344: AND
41345: IFFALSE 41428
41347: GO 41349
41349: DISABLE
41350: LD_INT 0
41352: PPUSH
41353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41354: LD_ADDR_VAR 0 2
41358: PUSH
41359: LD_INT 22
41361: PUSH
41362: LD_OWVAR 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 21
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PPUSH
41385: CALL_OW 69
41389: ST_TO_ADDR
// if not tmp then
41390: LD_VAR 0 2
41394: NOT
41395: IFFALSE 41399
// exit ;
41397: GO 41428
// for i in tmp do
41399: LD_ADDR_VAR 0 1
41403: PUSH
41404: LD_VAR 0 2
41408: PUSH
41409: FOR_IN
41410: IFFALSE 41426
// SetBLevel ( i , 10 ) ;
41412: LD_VAR 0 1
41416: PPUSH
41417: LD_INT 10
41419: PPUSH
41420: CALL_OW 241
41424: GO 41409
41426: POP
41427: POP
// end ;
41428: PPOPN 2
41430: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41431: LD_EXP 87
41435: PUSH
41436: LD_EXP 104
41440: AND
41441: IFFALSE 41552
41443: GO 41445
41445: DISABLE
41446: LD_INT 0
41448: PPUSH
41449: PPUSH
41450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41451: LD_ADDR_VAR 0 3
41455: PUSH
41456: LD_INT 22
41458: PUSH
41459: LD_OWVAR 2
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 25
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PPUSH
41482: CALL_OW 69
41486: ST_TO_ADDR
// if not tmp then
41487: LD_VAR 0 3
41491: NOT
41492: IFFALSE 41496
// exit ;
41494: GO 41552
// un := tmp [ rand ( 1 , tmp ) ] ;
41496: LD_ADDR_VAR 0 2
41500: PUSH
41501: LD_VAR 0 3
41505: PUSH
41506: LD_INT 1
41508: PPUSH
41509: LD_VAR 0 3
41513: PPUSH
41514: CALL_OW 12
41518: ARRAY
41519: ST_TO_ADDR
// if Crawls ( un ) then
41520: LD_VAR 0 2
41524: PPUSH
41525: CALL_OW 318
41529: IFFALSE 41540
// ComWalk ( un ) ;
41531: LD_VAR 0 2
41535: PPUSH
41536: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41540: LD_VAR 0 2
41544: PPUSH
41545: LD_INT 5
41547: PPUSH
41548: CALL_OW 336
// end ;
41552: PPOPN 3
41554: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41555: LD_EXP 87
41559: PUSH
41560: LD_EXP 105
41564: AND
41565: PUSH
41566: LD_OWVAR 67
41570: PUSH
41571: LD_INT 4
41573: LESS
41574: AND
41575: IFFALSE 41594
41577: GO 41579
41579: DISABLE
// begin Difficulty := Difficulty + 1 ;
41580: LD_ADDR_OWVAR 67
41584: PUSH
41585: LD_OWVAR 67
41589: PUSH
41590: LD_INT 1
41592: PLUS
41593: ST_TO_ADDR
// end ;
41594: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41595: LD_EXP 87
41599: PUSH
41600: LD_EXP 106
41604: AND
41605: IFFALSE 41708
41607: GO 41609
41609: DISABLE
41610: LD_INT 0
41612: PPUSH
// begin for i := 1 to 5 do
41613: LD_ADDR_VAR 0 1
41617: PUSH
41618: DOUBLE
41619: LD_INT 1
41621: DEC
41622: ST_TO_ADDR
41623: LD_INT 5
41625: PUSH
41626: FOR_TO
41627: IFFALSE 41706
// begin uc_nation := nation_nature ;
41629: LD_ADDR_OWVAR 21
41633: PUSH
41634: LD_INT 0
41636: ST_TO_ADDR
// uc_side := 0 ;
41637: LD_ADDR_OWVAR 20
41641: PUSH
41642: LD_INT 0
41644: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41645: LD_ADDR_OWVAR 29
41649: PUSH
41650: LD_INT 12
41652: PUSH
41653: LD_INT 12
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: ST_TO_ADDR
// hc_agressivity := 20 ;
41660: LD_ADDR_OWVAR 35
41664: PUSH
41665: LD_INT 20
41667: ST_TO_ADDR
// hc_class := class_tiger ;
41668: LD_ADDR_OWVAR 28
41672: PUSH
41673: LD_INT 14
41675: ST_TO_ADDR
// hc_gallery :=  ;
41676: LD_ADDR_OWVAR 33
41680: PUSH
41681: LD_STRING 
41683: ST_TO_ADDR
// hc_name :=  ;
41684: LD_ADDR_OWVAR 26
41688: PUSH
41689: LD_STRING 
41691: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
41692: CALL_OW 44
41696: PPUSH
41697: LD_INT 0
41699: PPUSH
41700: CALL_OW 51
// end ;
41704: GO 41626
41706: POP
41707: POP
// end ;
41708: PPOPN 1
41710: END
// every 0 0$1 trigger StreamModeActive and sBomb do
41711: LD_EXP 87
41715: PUSH
41716: LD_EXP 107
41720: AND
41721: IFFALSE 41730
41723: GO 41725
41725: DISABLE
// StreamSibBomb ;
41726: CALL 41731 0 0
41730: END
// export function StreamSibBomb ; var i , x , y ; begin
41731: LD_INT 0
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
// result := false ;
41737: LD_ADDR_VAR 0 1
41741: PUSH
41742: LD_INT 0
41744: ST_TO_ADDR
// for i := 1 to 16 do
41745: LD_ADDR_VAR 0 2
41749: PUSH
41750: DOUBLE
41751: LD_INT 1
41753: DEC
41754: ST_TO_ADDR
41755: LD_INT 16
41757: PUSH
41758: FOR_TO
41759: IFFALSE 41958
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41761: LD_ADDR_VAR 0 3
41765: PUSH
41766: LD_INT 10
41768: PUSH
41769: LD_INT 20
41771: PUSH
41772: LD_INT 30
41774: PUSH
41775: LD_INT 40
41777: PUSH
41778: LD_INT 50
41780: PUSH
41781: LD_INT 60
41783: PUSH
41784: LD_INT 70
41786: PUSH
41787: LD_INT 80
41789: PUSH
41790: LD_INT 90
41792: PUSH
41793: LD_INT 100
41795: PUSH
41796: LD_INT 110
41798: PUSH
41799: LD_INT 120
41801: PUSH
41802: LD_INT 130
41804: PUSH
41805: LD_INT 140
41807: PUSH
41808: LD_INT 150
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PPUSH
41831: LD_INT 15
41833: PPUSH
41834: CALL_OW 12
41838: ARRAY
41839: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41840: LD_ADDR_VAR 0 4
41844: PUSH
41845: LD_INT 10
41847: PUSH
41848: LD_INT 20
41850: PUSH
41851: LD_INT 30
41853: PUSH
41854: LD_INT 40
41856: PUSH
41857: LD_INT 50
41859: PUSH
41860: LD_INT 60
41862: PUSH
41863: LD_INT 70
41865: PUSH
41866: LD_INT 80
41868: PUSH
41869: LD_INT 90
41871: PUSH
41872: LD_INT 100
41874: PUSH
41875: LD_INT 110
41877: PUSH
41878: LD_INT 120
41880: PUSH
41881: LD_INT 130
41883: PUSH
41884: LD_INT 140
41886: PUSH
41887: LD_INT 150
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PPUSH
41910: LD_INT 15
41912: PPUSH
41913: CALL_OW 12
41917: ARRAY
41918: ST_TO_ADDR
// if ValidHex ( x , y ) then
41919: LD_VAR 0 3
41923: PPUSH
41924: LD_VAR 0 4
41928: PPUSH
41929: CALL_OW 488
41933: IFFALSE 41956
// begin result := [ x , y ] ;
41935: LD_ADDR_VAR 0 1
41939: PUSH
41940: LD_VAR 0 3
41944: PUSH
41945: LD_VAR 0 4
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: ST_TO_ADDR
// break ;
41954: GO 41958
// end ; end ;
41956: GO 41758
41958: POP
41959: POP
// if result then
41960: LD_VAR 0 1
41964: IFFALSE 42024
// begin ToLua ( playSibBomb() ) ;
41966: LD_STRING playSibBomb()
41968: PPUSH
41969: CALL_OW 559
// wait ( 0 0$14 ) ;
41973: LD_INT 490
41975: PPUSH
41976: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
41980: LD_VAR 0 1
41984: PUSH
41985: LD_INT 1
41987: ARRAY
41988: PPUSH
41989: LD_VAR 0 1
41993: PUSH
41994: LD_INT 2
41996: ARRAY
41997: PPUSH
41998: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
42002: LD_VAR 0 1
42006: PUSH
42007: LD_INT 1
42009: ARRAY
42010: PPUSH
42011: LD_VAR 0 1
42015: PUSH
42016: LD_INT 2
42018: ARRAY
42019: PPUSH
42020: CALL_OW 429
// end ; end ;
42024: LD_VAR 0 1
42028: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42029: LD_EXP 87
42033: PUSH
42034: LD_EXP 109
42038: AND
42039: IFFALSE 42051
42041: GO 42043
42043: DISABLE
// YouLost (  ) ;
42044: LD_STRING 
42046: PPUSH
42047: CALL_OW 104
42051: END
// every 0 0$1 trigger StreamModeActive and sFog do
42052: LD_EXP 87
42056: PUSH
42057: LD_EXP 108
42061: AND
42062: IFFALSE 42076
42064: GO 42066
42066: DISABLE
// FogOff ( your_side ) ;
42067: LD_OWVAR 2
42071: PPUSH
42072: CALL_OW 344
42076: END
// every 0 0$1 trigger StreamModeActive and sSun do
42077: LD_EXP 87
42081: PUSH
42082: LD_EXP 110
42086: AND
42087: IFFALSE 42115
42089: GO 42091
42091: DISABLE
// begin solar_recharge_percent := 0 ;
42092: LD_ADDR_OWVAR 79
42096: PUSH
42097: LD_INT 0
42099: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42100: LD_INT 10500
42102: PPUSH
42103: CALL_OW 67
// solar_recharge_percent := 100 ;
42107: LD_ADDR_OWVAR 79
42111: PUSH
42112: LD_INT 100
42114: ST_TO_ADDR
// end ;
42115: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42116: LD_EXP 87
42120: PUSH
42121: LD_EXP 111
42125: AND
42126: IFFALSE 42365
42128: GO 42130
42130: DISABLE
42131: LD_INT 0
42133: PPUSH
42134: PPUSH
42135: PPUSH
// begin tmp := [ ] ;
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: EMPTY
42142: ST_TO_ADDR
// for i := 1 to 6 do
42143: LD_ADDR_VAR 0 1
42147: PUSH
42148: DOUBLE
42149: LD_INT 1
42151: DEC
42152: ST_TO_ADDR
42153: LD_INT 6
42155: PUSH
42156: FOR_TO
42157: IFFALSE 42262
// begin uc_nation := nation_nature ;
42159: LD_ADDR_OWVAR 21
42163: PUSH
42164: LD_INT 0
42166: ST_TO_ADDR
// uc_side := 0 ;
42167: LD_ADDR_OWVAR 20
42171: PUSH
42172: LD_INT 0
42174: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42175: LD_ADDR_OWVAR 29
42179: PUSH
42180: LD_INT 12
42182: PUSH
42183: LD_INT 12
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: ST_TO_ADDR
// hc_agressivity := 20 ;
42190: LD_ADDR_OWVAR 35
42194: PUSH
42195: LD_INT 20
42197: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42198: LD_ADDR_OWVAR 28
42202: PUSH
42203: LD_INT 17
42205: ST_TO_ADDR
// hc_gallery :=  ;
42206: LD_ADDR_OWVAR 33
42210: PUSH
42211: LD_STRING 
42213: ST_TO_ADDR
// hc_name :=  ;
42214: LD_ADDR_OWVAR 26
42218: PUSH
42219: LD_STRING 
42221: ST_TO_ADDR
// un := CreateHuman ;
42222: LD_ADDR_VAR 0 2
42226: PUSH
42227: CALL_OW 44
42231: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42232: LD_VAR 0 2
42236: PPUSH
42237: LD_INT 1
42239: PPUSH
42240: CALL_OW 51
// tmp := tmp ^ un ;
42244: LD_ADDR_VAR 0 3
42248: PUSH
42249: LD_VAR 0 3
42253: PUSH
42254: LD_VAR 0 2
42258: ADD
42259: ST_TO_ADDR
// end ;
42260: GO 42156
42262: POP
42263: POP
// repeat wait ( 0 0$1 ) ;
42264: LD_INT 35
42266: PPUSH
42267: CALL_OW 67
// for un in tmp do
42271: LD_ADDR_VAR 0 2
42275: PUSH
42276: LD_VAR 0 3
42280: PUSH
42281: FOR_IN
42282: IFFALSE 42356
// begin if IsDead ( un ) then
42284: LD_VAR 0 2
42288: PPUSH
42289: CALL_OW 301
42293: IFFALSE 42313
// begin tmp := tmp diff un ;
42295: LD_ADDR_VAR 0 3
42299: PUSH
42300: LD_VAR 0 3
42304: PUSH
42305: LD_VAR 0 2
42309: DIFF
42310: ST_TO_ADDR
// continue ;
42311: GO 42281
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42313: LD_VAR 0 2
42317: PPUSH
42318: LD_INT 3
42320: PUSH
42321: LD_INT 22
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PPUSH
42335: CALL_OW 69
42339: PPUSH
42340: LD_VAR 0 2
42344: PPUSH
42345: CALL_OW 74
42349: PPUSH
42350: CALL_OW 115
// end ;
42354: GO 42281
42356: POP
42357: POP
// until not tmp ;
42358: LD_VAR 0 3
42362: NOT
42363: IFFALSE 42264
// end ;
42365: PPOPN 3
42367: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42368: LD_EXP 87
42372: PUSH
42373: LD_EXP 112
42377: AND
42378: IFFALSE 42432
42380: GO 42382
42382: DISABLE
// begin ToLua ( displayTroll(); ) ;
42383: LD_STRING displayTroll();
42385: PPUSH
42386: CALL_OW 559
// wait ( 3 3$00 ) ;
42390: LD_INT 6300
42392: PPUSH
42393: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42397: LD_STRING hideTroll();
42399: PPUSH
42400: CALL_OW 559
// wait ( 1 1$00 ) ;
42404: LD_INT 2100
42406: PPUSH
42407: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42411: LD_STRING displayTroll();
42413: PPUSH
42414: CALL_OW 559
// wait ( 1 1$00 ) ;
42418: LD_INT 2100
42420: PPUSH
42421: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42425: LD_STRING hideTroll();
42427: PPUSH
42428: CALL_OW 559
// end ;
42432: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42433: LD_EXP 87
42437: PUSH
42438: LD_EXP 113
42442: AND
42443: IFFALSE 42506
42445: GO 42447
42447: DISABLE
42448: LD_INT 0
42450: PPUSH
// begin p := 0 ;
42451: LD_ADDR_VAR 0 1
42455: PUSH
42456: LD_INT 0
42458: ST_TO_ADDR
// repeat game_speed := 1 ;
42459: LD_ADDR_OWVAR 65
42463: PUSH
42464: LD_INT 1
42466: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42467: LD_INT 35
42469: PPUSH
42470: CALL_OW 67
// p := p + 1 ;
42474: LD_ADDR_VAR 0 1
42478: PUSH
42479: LD_VAR 0 1
42483: PUSH
42484: LD_INT 1
42486: PLUS
42487: ST_TO_ADDR
// until p >= 60 ;
42488: LD_VAR 0 1
42492: PUSH
42493: LD_INT 60
42495: GREATEREQUAL
42496: IFFALSE 42459
// game_speed := 4 ;
42498: LD_ADDR_OWVAR 65
42502: PUSH
42503: LD_INT 4
42505: ST_TO_ADDR
// end ;
42506: PPOPN 1
42508: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42509: LD_EXP 87
42513: PUSH
42514: LD_EXP 114
42518: AND
42519: IFFALSE 42665
42521: GO 42523
42523: DISABLE
42524: LD_INT 0
42526: PPUSH
42527: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42528: LD_ADDR_VAR 0 1
42532: PUSH
42533: LD_INT 22
42535: PUSH
42536: LD_OWVAR 2
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 30
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 30
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PPUSH
42577: CALL_OW 69
42581: ST_TO_ADDR
// if not depot then
42582: LD_VAR 0 1
42586: NOT
42587: IFFALSE 42591
// exit ;
42589: GO 42665
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42591: LD_ADDR_VAR 0 2
42595: PUSH
42596: LD_VAR 0 1
42600: PUSH
42601: LD_INT 1
42603: PPUSH
42604: LD_VAR 0 1
42608: PPUSH
42609: CALL_OW 12
42613: ARRAY
42614: PPUSH
42615: CALL_OW 274
42619: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42620: LD_VAR 0 2
42624: PPUSH
42625: LD_INT 1
42627: PPUSH
42628: LD_INT 0
42630: PPUSH
42631: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42635: LD_VAR 0 2
42639: PPUSH
42640: LD_INT 2
42642: PPUSH
42643: LD_INT 0
42645: PPUSH
42646: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
42650: LD_VAR 0 2
42654: PPUSH
42655: LD_INT 3
42657: PPUSH
42658: LD_INT 0
42660: PPUSH
42661: CALL_OW 277
// end ;
42665: PPOPN 2
42667: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
42668: LD_EXP 87
42672: PUSH
42673: LD_EXP 115
42677: AND
42678: IFFALSE 42775
42680: GO 42682
42682: DISABLE
42683: LD_INT 0
42685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42686: LD_ADDR_VAR 0 1
42690: PUSH
42691: LD_INT 22
42693: PUSH
42694: LD_OWVAR 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 21
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 3
42715: PUSH
42716: LD_INT 23
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: PPUSH
42735: CALL_OW 69
42739: ST_TO_ADDR
// if not tmp then
42740: LD_VAR 0 1
42744: NOT
42745: IFFALSE 42749
// exit ;
42747: GO 42775
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
42749: LD_VAR 0 1
42753: PUSH
42754: LD_INT 1
42756: PPUSH
42757: LD_VAR 0 1
42761: PPUSH
42762: CALL_OW 12
42766: ARRAY
42767: PPUSH
42768: LD_INT 200
42770: PPUSH
42771: CALL_OW 234
// end ;
42775: PPOPN 1
42777: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
42778: LD_EXP 87
42782: PUSH
42783: LD_EXP 116
42787: AND
42788: IFFALSE 42867
42790: GO 42792
42792: DISABLE
42793: LD_INT 0
42795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
42796: LD_ADDR_VAR 0 1
42800: PUSH
42801: LD_INT 22
42803: PUSH
42804: LD_OWVAR 2
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 21
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PPUSH
42827: CALL_OW 69
42831: ST_TO_ADDR
// if not tmp then
42832: LD_VAR 0 1
42836: NOT
42837: IFFALSE 42841
// exit ;
42839: GO 42867
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
42841: LD_VAR 0 1
42845: PUSH
42846: LD_INT 1
42848: PPUSH
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL_OW 12
42858: ARRAY
42859: PPUSH
42860: LD_INT 60
42862: PPUSH
42863: CALL_OW 234
// end ;
42867: PPOPN 1
42869: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
42870: LD_EXP 87
42874: PUSH
42875: LD_EXP 117
42879: AND
42880: IFFALSE 42979
42882: GO 42884
42884: DISABLE
42885: LD_INT 0
42887: PPUSH
42888: PPUSH
// begin enable ;
42889: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
42890: LD_ADDR_VAR 0 1
42894: PUSH
42895: LD_INT 22
42897: PUSH
42898: LD_OWVAR 2
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 61
42909: PUSH
42910: EMPTY
42911: LIST
42912: PUSH
42913: LD_INT 33
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: PPUSH
42928: CALL_OW 69
42932: ST_TO_ADDR
// if not tmp then
42933: LD_VAR 0 1
42937: NOT
42938: IFFALSE 42942
// exit ;
42940: GO 42979
// for i in tmp do
42942: LD_ADDR_VAR 0 2
42946: PUSH
42947: LD_VAR 0 1
42951: PUSH
42952: FOR_IN
42953: IFFALSE 42977
// if IsControledBy ( i ) then
42955: LD_VAR 0 2
42959: PPUSH
42960: CALL_OW 312
42964: IFFALSE 42975
// ComUnlink ( i ) ;
42966: LD_VAR 0 2
42970: PPUSH
42971: CALL_OW 136
42975: GO 42952
42977: POP
42978: POP
// end ;
42979: PPOPN 2
42981: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
42982: LD_EXP 87
42986: PUSH
42987: LD_EXP 118
42991: AND
42992: IFFALSE 43132
42994: GO 42996
42996: DISABLE
42997: LD_INT 0
42999: PPUSH
43000: PPUSH
// begin ToLua ( displayPowell(); ) ;
43001: LD_STRING displayPowell();
43003: PPUSH
43004: CALL_OW 559
// uc_side := 0 ;
43008: LD_ADDR_OWVAR 20
43012: PUSH
43013: LD_INT 0
43015: ST_TO_ADDR
// uc_nation := 2 ;
43016: LD_ADDR_OWVAR 21
43020: PUSH
43021: LD_INT 2
43023: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43024: LD_ADDR_OWVAR 37
43028: PUSH
43029: LD_INT 14
43031: ST_TO_ADDR
// vc_engine := engine_siberite ;
43032: LD_ADDR_OWVAR 39
43036: PUSH
43037: LD_INT 3
43039: ST_TO_ADDR
// vc_control := control_apeman ;
43040: LD_ADDR_OWVAR 38
43044: PUSH
43045: LD_INT 5
43047: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43048: LD_ADDR_OWVAR 40
43052: PUSH
43053: LD_INT 29
43055: ST_TO_ADDR
// un := CreateVehicle ;
43056: LD_ADDR_VAR 0 2
43060: PUSH
43061: CALL_OW 45
43065: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43066: LD_VAR 0 2
43070: PPUSH
43071: LD_INT 1
43073: PPUSH
43074: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43078: LD_INT 35
43080: PPUSH
43081: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43085: LD_VAR 0 2
43089: PPUSH
43090: LD_INT 22
43092: PUSH
43093: LD_OWVAR 2
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PPUSH
43102: CALL_OW 69
43106: PPUSH
43107: LD_VAR 0 2
43111: PPUSH
43112: CALL_OW 74
43116: PPUSH
43117: CALL_OW 115
// until IsDead ( un ) ;
43121: LD_VAR 0 2
43125: PPUSH
43126: CALL_OW 301
43130: IFFALSE 43078
// end ;
43132: PPOPN 2
43134: END
// every 0 0$1 trigger StreamModeActive and sStu do
43135: LD_EXP 87
43139: PUSH
43140: LD_EXP 126
43144: AND
43145: IFFALSE 43161
43147: GO 43149
43149: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43150: LD_STRING displayStucuk();
43152: PPUSH
43153: CALL_OW 559
// ResetFog ;
43157: CALL_OW 335
// end ;
43161: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43162: LD_EXP 87
43166: PUSH
43167: LD_EXP 119
43171: AND
43172: IFFALSE 43313
43174: GO 43176
43176: DISABLE
43177: LD_INT 0
43179: PPUSH
43180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43181: LD_ADDR_VAR 0 2
43185: PUSH
43186: LD_INT 22
43188: PUSH
43189: LD_OWVAR 2
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 21
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PPUSH
43212: CALL_OW 69
43216: ST_TO_ADDR
// if not tmp then
43217: LD_VAR 0 2
43221: NOT
43222: IFFALSE 43226
// exit ;
43224: GO 43313
// un := tmp [ rand ( 1 , tmp ) ] ;
43226: LD_ADDR_VAR 0 1
43230: PUSH
43231: LD_VAR 0 2
43235: PUSH
43236: LD_INT 1
43238: PPUSH
43239: LD_VAR 0 2
43243: PPUSH
43244: CALL_OW 12
43248: ARRAY
43249: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43250: LD_VAR 0 1
43254: PPUSH
43255: LD_INT 0
43257: PPUSH
43258: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43262: LD_VAR 0 1
43266: PPUSH
43267: LD_OWVAR 3
43271: PUSH
43272: LD_VAR 0 1
43276: DIFF
43277: PPUSH
43278: LD_VAR 0 1
43282: PPUSH
43283: CALL_OW 74
43287: PPUSH
43288: CALL_OW 115
// wait ( 0 0$20 ) ;
43292: LD_INT 700
43294: PPUSH
43295: CALL_OW 67
// SetSide ( un , your_side ) ;
43299: LD_VAR 0 1
43303: PPUSH
43304: LD_OWVAR 2
43308: PPUSH
43309: CALL_OW 235
// end ;
43313: PPOPN 2
43315: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43316: LD_EXP 87
43320: PUSH
43321: LD_EXP 120
43325: AND
43326: IFFALSE 43432
43328: GO 43330
43330: DISABLE
43331: LD_INT 0
43333: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43334: LD_ADDR_VAR 0 1
43338: PUSH
43339: LD_INT 22
43341: PUSH
43342: LD_OWVAR 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: LD_INT 30
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 30
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: LIST
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PPUSH
43383: CALL_OW 69
43387: ST_TO_ADDR
// if not depot then
43388: LD_VAR 0 1
43392: NOT
43393: IFFALSE 43397
// exit ;
43395: GO 43432
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43397: LD_VAR 0 1
43401: PUSH
43402: LD_INT 1
43404: ARRAY
43405: PPUSH
43406: CALL_OW 250
43410: PPUSH
43411: LD_VAR 0 1
43415: PUSH
43416: LD_INT 1
43418: ARRAY
43419: PPUSH
43420: CALL_OW 251
43424: PPUSH
43425: LD_INT 70
43427: PPUSH
43428: CALL_OW 495
// end ;
43432: PPOPN 1
43434: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43435: LD_EXP 87
43439: PUSH
43440: LD_EXP 121
43444: AND
43445: IFFALSE 43656
43447: GO 43449
43449: DISABLE
43450: LD_INT 0
43452: PPUSH
43453: PPUSH
43454: PPUSH
43455: PPUSH
43456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43457: LD_ADDR_VAR 0 5
43461: PUSH
43462: LD_INT 22
43464: PUSH
43465: LD_OWVAR 2
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 21
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PPUSH
43488: CALL_OW 69
43492: ST_TO_ADDR
// if not tmp then
43493: LD_VAR 0 5
43497: NOT
43498: IFFALSE 43502
// exit ;
43500: GO 43656
// for i in tmp do
43502: LD_ADDR_VAR 0 1
43506: PUSH
43507: LD_VAR 0 5
43511: PUSH
43512: FOR_IN
43513: IFFALSE 43654
// begin d := rand ( 0 , 5 ) ;
43515: LD_ADDR_VAR 0 4
43519: PUSH
43520: LD_INT 0
43522: PPUSH
43523: LD_INT 5
43525: PPUSH
43526: CALL_OW 12
43530: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43531: LD_ADDR_VAR 0 2
43535: PUSH
43536: LD_VAR 0 1
43540: PPUSH
43541: CALL_OW 250
43545: PPUSH
43546: LD_VAR 0 4
43550: PPUSH
43551: LD_INT 3
43553: PPUSH
43554: LD_INT 12
43556: PPUSH
43557: CALL_OW 12
43561: PPUSH
43562: CALL_OW 272
43566: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43567: LD_ADDR_VAR 0 3
43571: PUSH
43572: LD_VAR 0 1
43576: PPUSH
43577: CALL_OW 251
43581: PPUSH
43582: LD_VAR 0 4
43586: PPUSH
43587: LD_INT 3
43589: PPUSH
43590: LD_INT 12
43592: PPUSH
43593: CALL_OW 12
43597: PPUSH
43598: CALL_OW 273
43602: ST_TO_ADDR
// if ValidHex ( x , y ) then
43603: LD_VAR 0 2
43607: PPUSH
43608: LD_VAR 0 3
43612: PPUSH
43613: CALL_OW 488
43617: IFFALSE 43652
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43619: LD_VAR 0 1
43623: PPUSH
43624: LD_VAR 0 2
43628: PPUSH
43629: LD_VAR 0 3
43633: PPUSH
43634: LD_INT 3
43636: PPUSH
43637: LD_INT 6
43639: PPUSH
43640: CALL_OW 12
43644: PPUSH
43645: LD_INT 1
43647: PPUSH
43648: CALL_OW 483
// end ;
43652: GO 43512
43654: POP
43655: POP
// end ;
43656: PPOPN 5
43658: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
43659: LD_EXP 87
43663: PUSH
43664: LD_EXP 122
43668: AND
43669: IFFALSE 43763
43671: GO 43673
43673: DISABLE
43674: LD_INT 0
43676: PPUSH
43677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
43678: LD_ADDR_VAR 0 2
43682: PUSH
43683: LD_INT 22
43685: PUSH
43686: LD_OWVAR 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 32
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 21
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: PPUSH
43720: CALL_OW 69
43724: ST_TO_ADDR
// if not tmp then
43725: LD_VAR 0 2
43729: NOT
43730: IFFALSE 43734
// exit ;
43732: GO 43763
// for i in tmp do
43734: LD_ADDR_VAR 0 1
43738: PUSH
43739: LD_VAR 0 2
43743: PUSH
43744: FOR_IN
43745: IFFALSE 43761
// SetFuel ( i , 0 ) ;
43747: LD_VAR 0 1
43751: PPUSH
43752: LD_INT 0
43754: PPUSH
43755: CALL_OW 240
43759: GO 43744
43761: POP
43762: POP
// end ;
43763: PPOPN 2
43765: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
43766: LD_EXP 87
43770: PUSH
43771: LD_EXP 123
43775: AND
43776: IFFALSE 43842
43778: GO 43780
43780: DISABLE
43781: LD_INT 0
43783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
43784: LD_ADDR_VAR 0 1
43788: PUSH
43789: LD_INT 22
43791: PUSH
43792: LD_OWVAR 2
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 30
43803: PUSH
43804: LD_INT 29
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PPUSH
43815: CALL_OW 69
43819: ST_TO_ADDR
// if not tmp then
43820: LD_VAR 0 1
43824: NOT
43825: IFFALSE 43829
// exit ;
43827: GO 43842
// DestroyUnit ( tmp [ 1 ] ) ;
43829: LD_VAR 0 1
43833: PUSH
43834: LD_INT 1
43836: ARRAY
43837: PPUSH
43838: CALL_OW 65
// end ;
43842: PPOPN 1
43844: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
43845: LD_EXP 87
43849: PUSH
43850: LD_EXP 125
43854: AND
43855: IFFALSE 43984
43857: GO 43859
43859: DISABLE
43860: LD_INT 0
43862: PPUSH
// begin uc_side := 0 ;
43863: LD_ADDR_OWVAR 20
43867: PUSH
43868: LD_INT 0
43870: ST_TO_ADDR
// uc_nation := nation_arabian ;
43871: LD_ADDR_OWVAR 21
43875: PUSH
43876: LD_INT 2
43878: ST_TO_ADDR
// hc_gallery :=  ;
43879: LD_ADDR_OWVAR 33
43883: PUSH
43884: LD_STRING 
43886: ST_TO_ADDR
// hc_name :=  ;
43887: LD_ADDR_OWVAR 26
43891: PUSH
43892: LD_STRING 
43894: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
43895: LD_INT 1
43897: PPUSH
43898: LD_INT 11
43900: PPUSH
43901: LD_INT 10
43903: PPUSH
43904: CALL_OW 380
// un := CreateHuman ;
43908: LD_ADDR_VAR 0 1
43912: PUSH
43913: CALL_OW 44
43917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43918: LD_VAR 0 1
43922: PPUSH
43923: LD_INT 1
43925: PPUSH
43926: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43930: LD_INT 35
43932: PPUSH
43933: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43937: LD_VAR 0 1
43941: PPUSH
43942: LD_INT 22
43944: PUSH
43945: LD_OWVAR 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PPUSH
43954: CALL_OW 69
43958: PPUSH
43959: LD_VAR 0 1
43963: PPUSH
43964: CALL_OW 74
43968: PPUSH
43969: CALL_OW 115
// until IsDead ( un ) ;
43973: LD_VAR 0 1
43977: PPUSH
43978: CALL_OW 301
43982: IFFALSE 43930
// end ;
43984: PPOPN 1
43986: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
43987: LD_EXP 87
43991: PUSH
43992: LD_EXP 127
43996: AND
43997: IFFALSE 44009
43999: GO 44001
44001: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
44002: LD_STRING earthquake(getX(game), 0, 32)
44004: PPUSH
44005: CALL_OW 559
44009: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
44010: LD_EXP 87
44014: PUSH
44015: LD_EXP 128
44019: AND
44020: IFFALSE 44111
44022: GO 44024
44024: DISABLE
44025: LD_INT 0
44027: PPUSH
// begin enable ;
44028: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44029: LD_ADDR_VAR 0 1
44033: PUSH
44034: LD_INT 22
44036: PUSH
44037: LD_OWVAR 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 21
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 33
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: PPUSH
44071: CALL_OW 69
44075: ST_TO_ADDR
// if not tmp then
44076: LD_VAR 0 1
44080: NOT
44081: IFFALSE 44085
// exit ;
44083: GO 44111
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44085: LD_VAR 0 1
44089: PUSH
44090: LD_INT 1
44092: PPUSH
44093: LD_VAR 0 1
44097: PPUSH
44098: CALL_OW 12
44102: ARRAY
44103: PPUSH
44104: LD_INT 1
44106: PPUSH
44107: CALL_OW 234
// end ;
44111: PPOPN 1
44113: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44114: LD_EXP 87
44118: PUSH
44119: LD_EXP 129
44123: AND
44124: IFFALSE 44265
44126: GO 44128
44128: DISABLE
44129: LD_INT 0
44131: PPUSH
44132: PPUSH
44133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44134: LD_ADDR_VAR 0 3
44138: PUSH
44139: LD_INT 22
44141: PUSH
44142: LD_OWVAR 2
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 25
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PPUSH
44165: CALL_OW 69
44169: ST_TO_ADDR
// if not tmp then
44170: LD_VAR 0 3
44174: NOT
44175: IFFALSE 44179
// exit ;
44177: GO 44265
// un := tmp [ rand ( 1 , tmp ) ] ;
44179: LD_ADDR_VAR 0 2
44183: PUSH
44184: LD_VAR 0 3
44188: PUSH
44189: LD_INT 1
44191: PPUSH
44192: LD_VAR 0 3
44196: PPUSH
44197: CALL_OW 12
44201: ARRAY
44202: ST_TO_ADDR
// if Crawls ( un ) then
44203: LD_VAR 0 2
44207: PPUSH
44208: CALL_OW 318
44212: IFFALSE 44223
// ComWalk ( un ) ;
44214: LD_VAR 0 2
44218: PPUSH
44219: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44223: LD_VAR 0 2
44227: PPUSH
44228: LD_INT 9
44230: PPUSH
44231: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44235: LD_INT 28
44237: PPUSH
44238: LD_OWVAR 2
44242: PPUSH
44243: LD_INT 2
44245: PPUSH
44246: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44250: LD_INT 29
44252: PPUSH
44253: LD_OWVAR 2
44257: PPUSH
44258: LD_INT 2
44260: PPUSH
44261: CALL_OW 322
// end ;
44265: PPOPN 3
44267: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44268: LD_EXP 87
44272: PUSH
44273: LD_EXP 130
44277: AND
44278: IFFALSE 44389
44280: GO 44282
44282: DISABLE
44283: LD_INT 0
44285: PPUSH
44286: PPUSH
44287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_INT 22
44295: PUSH
44296: LD_OWVAR 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 25
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PPUSH
44319: CALL_OW 69
44323: ST_TO_ADDR
// if not tmp then
44324: LD_VAR 0 3
44328: NOT
44329: IFFALSE 44333
// exit ;
44331: GO 44389
// un := tmp [ rand ( 1 , tmp ) ] ;
44333: LD_ADDR_VAR 0 2
44337: PUSH
44338: LD_VAR 0 3
44342: PUSH
44343: LD_INT 1
44345: PPUSH
44346: LD_VAR 0 3
44350: PPUSH
44351: CALL_OW 12
44355: ARRAY
44356: ST_TO_ADDR
// if Crawls ( un ) then
44357: LD_VAR 0 2
44361: PPUSH
44362: CALL_OW 318
44366: IFFALSE 44377
// ComWalk ( un ) ;
44368: LD_VAR 0 2
44372: PPUSH
44373: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44377: LD_VAR 0 2
44381: PPUSH
44382: LD_INT 8
44384: PPUSH
44385: CALL_OW 336
// end ;
44389: PPOPN 3
44391: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44392: LD_EXP 87
44396: PUSH
44397: LD_EXP 131
44401: AND
44402: IFFALSE 44546
44404: GO 44406
44406: DISABLE
44407: LD_INT 0
44409: PPUSH
44410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44411: LD_ADDR_VAR 0 2
44415: PUSH
44416: LD_INT 22
44418: PUSH
44419: LD_OWVAR 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 21
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 34
44443: PUSH
44444: LD_INT 12
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 34
44453: PUSH
44454: LD_INT 51
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 34
44463: PUSH
44464: LD_INT 32
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: PPUSH
44482: CALL_OW 69
44486: ST_TO_ADDR
// if not tmp then
44487: LD_VAR 0 2
44491: NOT
44492: IFFALSE 44496
// exit ;
44494: GO 44546
// for i in tmp do
44496: LD_ADDR_VAR 0 1
44500: PUSH
44501: LD_VAR 0 2
44505: PUSH
44506: FOR_IN
44507: IFFALSE 44544
// if GetCargo ( i , mat_artifact ) = 0 then
44509: LD_VAR 0 1
44513: PPUSH
44514: LD_INT 4
44516: PPUSH
44517: CALL_OW 289
44521: PUSH
44522: LD_INT 0
44524: EQUAL
44525: IFFALSE 44542
// SetCargo ( i , mat_siberit , 100 ) ;
44527: LD_VAR 0 1
44531: PPUSH
44532: LD_INT 3
44534: PPUSH
44535: LD_INT 100
44537: PPUSH
44538: CALL_OW 290
44542: GO 44506
44544: POP
44545: POP
// end ;
44546: PPOPN 2
44548: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44549: LD_EXP 87
44553: PUSH
44554: LD_EXP 132
44558: AND
44559: IFFALSE 44742
44561: GO 44563
44563: DISABLE
44564: LD_INT 0
44566: PPUSH
44567: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44568: LD_ADDR_VAR 0 2
44572: PUSH
44573: LD_INT 22
44575: PUSH
44576: LD_OWVAR 2
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PPUSH
44585: CALL_OW 69
44589: ST_TO_ADDR
// if not tmp then
44590: LD_VAR 0 2
44594: NOT
44595: IFFALSE 44599
// exit ;
44597: GO 44742
// for i := 1 to 2 do
44599: LD_ADDR_VAR 0 1
44603: PUSH
44604: DOUBLE
44605: LD_INT 1
44607: DEC
44608: ST_TO_ADDR
44609: LD_INT 2
44611: PUSH
44612: FOR_TO
44613: IFFALSE 44740
// begin uc_side := your_side ;
44615: LD_ADDR_OWVAR 20
44619: PUSH
44620: LD_OWVAR 2
44624: ST_TO_ADDR
// uc_nation := nation_american ;
44625: LD_ADDR_OWVAR 21
44629: PUSH
44630: LD_INT 1
44632: ST_TO_ADDR
// vc_chassis := us_morphling ;
44633: LD_ADDR_OWVAR 37
44637: PUSH
44638: LD_INT 5
44640: ST_TO_ADDR
// vc_engine := engine_siberite ;
44641: LD_ADDR_OWVAR 39
44645: PUSH
44646: LD_INT 3
44648: ST_TO_ADDR
// vc_control := control_computer ;
44649: LD_ADDR_OWVAR 38
44653: PUSH
44654: LD_INT 3
44656: ST_TO_ADDR
// vc_weapon := us_double_laser ;
44657: LD_ADDR_OWVAR 40
44661: PUSH
44662: LD_INT 10
44664: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
44665: LD_VAR 0 2
44669: PUSH
44670: LD_INT 1
44672: ARRAY
44673: PPUSH
44674: CALL_OW 310
44678: NOT
44679: IFFALSE 44726
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
44681: CALL_OW 45
44685: PPUSH
44686: LD_VAR 0 2
44690: PUSH
44691: LD_INT 1
44693: ARRAY
44694: PPUSH
44695: CALL_OW 250
44699: PPUSH
44700: LD_VAR 0 2
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: PPUSH
44709: CALL_OW 251
44713: PPUSH
44714: LD_INT 12
44716: PPUSH
44717: LD_INT 1
44719: PPUSH
44720: CALL_OW 50
44724: GO 44738
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
44726: CALL_OW 45
44730: PPUSH
44731: LD_INT 1
44733: PPUSH
44734: CALL_OW 51
// end ;
44738: GO 44612
44740: POP
44741: POP
// end ;
44742: PPOPN 2
44744: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
44745: LD_EXP 87
44749: PUSH
44750: LD_EXP 133
44754: AND
44755: IFFALSE 44977
44757: GO 44759
44759: DISABLE
44760: LD_INT 0
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
44768: LD_ADDR_VAR 0 6
44772: PUSH
44773: LD_INT 22
44775: PUSH
44776: LD_OWVAR 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 21
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: LD_INT 23
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: PPUSH
44817: CALL_OW 69
44821: ST_TO_ADDR
// if not tmp then
44822: LD_VAR 0 6
44826: NOT
44827: IFFALSE 44831
// exit ;
44829: GO 44977
// s1 := rand ( 1 , 4 ) ;
44831: LD_ADDR_VAR 0 2
44835: PUSH
44836: LD_INT 1
44838: PPUSH
44839: LD_INT 4
44841: PPUSH
44842: CALL_OW 12
44846: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
44847: LD_ADDR_VAR 0 4
44851: PUSH
44852: LD_VAR 0 6
44856: PUSH
44857: LD_INT 1
44859: ARRAY
44860: PPUSH
44861: LD_VAR 0 2
44865: PPUSH
44866: CALL_OW 259
44870: ST_TO_ADDR
// if s1 = 1 then
44871: LD_VAR 0 2
44875: PUSH
44876: LD_INT 1
44878: EQUAL
44879: IFFALSE 44899
// s2 := rand ( 2 , 4 ) else
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_INT 2
44888: PPUSH
44889: LD_INT 4
44891: PPUSH
44892: CALL_OW 12
44896: ST_TO_ADDR
44897: GO 44907
// s2 := 1 ;
44899: LD_ADDR_VAR 0 3
44903: PUSH
44904: LD_INT 1
44906: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
44907: LD_ADDR_VAR 0 5
44911: PUSH
44912: LD_VAR 0 6
44916: PUSH
44917: LD_INT 1
44919: ARRAY
44920: PPUSH
44921: LD_VAR 0 3
44925: PPUSH
44926: CALL_OW 259
44930: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
44931: LD_VAR 0 6
44935: PUSH
44936: LD_INT 1
44938: ARRAY
44939: PPUSH
44940: LD_VAR 0 2
44944: PPUSH
44945: LD_VAR 0 5
44949: PPUSH
44950: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
44954: LD_VAR 0 6
44958: PUSH
44959: LD_INT 1
44961: ARRAY
44962: PPUSH
44963: LD_VAR 0 3
44967: PPUSH
44968: LD_VAR 0 4
44972: PPUSH
44973: CALL_OW 237
// end ;
44977: PPOPN 6
44979: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
44980: LD_EXP 87
44984: PUSH
44985: LD_EXP 134
44989: AND
44990: IFFALSE 45069
44992: GO 44994
44994: DISABLE
44995: LD_INT 0
44997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
44998: LD_ADDR_VAR 0 1
45002: PUSH
45003: LD_INT 22
45005: PUSH
45006: LD_OWVAR 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 30
45017: PUSH
45018: LD_INT 3
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PPUSH
45029: CALL_OW 69
45033: ST_TO_ADDR
// if not tmp then
45034: LD_VAR 0 1
45038: NOT
45039: IFFALSE 45043
// exit ;
45041: GO 45069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45043: LD_VAR 0 1
45047: PUSH
45048: LD_INT 1
45050: PPUSH
45051: LD_VAR 0 1
45055: PPUSH
45056: CALL_OW 12
45060: ARRAY
45061: PPUSH
45062: LD_INT 1
45064: PPUSH
45065: CALL_OW 234
// end ;
45069: PPOPN 1
45071: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45072: LD_EXP 87
45076: PUSH
45077: LD_EXP 135
45081: AND
45082: IFFALSE 45194
45084: GO 45086
45086: DISABLE
45087: LD_INT 0
45089: PPUSH
45090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45091: LD_ADDR_VAR 0 2
45095: PUSH
45096: LD_INT 22
45098: PUSH
45099: LD_OWVAR 2
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 30
45113: PUSH
45114: LD_INT 27
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 30
45123: PUSH
45124: LD_INT 26
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 30
45133: PUSH
45134: LD_INT 28
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PPUSH
45151: CALL_OW 69
45155: ST_TO_ADDR
// if not tmp then
45156: LD_VAR 0 2
45160: NOT
45161: IFFALSE 45165
// exit ;
45163: GO 45194
// for i in tmp do
45165: LD_ADDR_VAR 0 1
45169: PUSH
45170: LD_VAR 0 2
45174: PUSH
45175: FOR_IN
45176: IFFALSE 45192
// SetLives ( i , 1 ) ;
45178: LD_VAR 0 1
45182: PPUSH
45183: LD_INT 1
45185: PPUSH
45186: CALL_OW 234
45190: GO 45175
45192: POP
45193: POP
// end ;
45194: PPOPN 2
45196: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45197: LD_EXP 87
45201: PUSH
45202: LD_EXP 136
45206: AND
45207: IFFALSE 45494
45209: GO 45211
45211: DISABLE
45212: LD_INT 0
45214: PPUSH
45215: PPUSH
45216: PPUSH
// begin i := rand ( 1 , 7 ) ;
45217: LD_ADDR_VAR 0 1
45221: PUSH
45222: LD_INT 1
45224: PPUSH
45225: LD_INT 7
45227: PPUSH
45228: CALL_OW 12
45232: ST_TO_ADDR
// case i of 1 :
45233: LD_VAR 0 1
45237: PUSH
45238: LD_INT 1
45240: DOUBLE
45241: EQUAL
45242: IFTRUE 45246
45244: GO 45256
45246: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45247: LD_STRING earthquake(getX(game), 0, 32)
45249: PPUSH
45250: CALL_OW 559
45254: GO 45494
45256: LD_INT 2
45258: DOUBLE
45259: EQUAL
45260: IFTRUE 45264
45262: GO 45278
45264: POP
// begin ToLua ( displayStucuk(); ) ;
45265: LD_STRING displayStucuk();
45267: PPUSH
45268: CALL_OW 559
// ResetFog ;
45272: CALL_OW 335
// end ; 3 :
45276: GO 45494
45278: LD_INT 3
45280: DOUBLE
45281: EQUAL
45282: IFTRUE 45286
45284: GO 45390
45286: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45287: LD_ADDR_VAR 0 2
45291: PUSH
45292: LD_INT 22
45294: PUSH
45295: LD_OWVAR 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 25
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PPUSH
45318: CALL_OW 69
45322: ST_TO_ADDR
// if not tmp then
45323: LD_VAR 0 2
45327: NOT
45328: IFFALSE 45332
// exit ;
45330: GO 45494
// un := tmp [ rand ( 1 , tmp ) ] ;
45332: LD_ADDR_VAR 0 3
45336: PUSH
45337: LD_VAR 0 2
45341: PUSH
45342: LD_INT 1
45344: PPUSH
45345: LD_VAR 0 2
45349: PPUSH
45350: CALL_OW 12
45354: ARRAY
45355: ST_TO_ADDR
// if Crawls ( un ) then
45356: LD_VAR 0 3
45360: PPUSH
45361: CALL_OW 318
45365: IFFALSE 45376
// ComWalk ( un ) ;
45367: LD_VAR 0 3
45371: PPUSH
45372: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45376: LD_VAR 0 3
45380: PPUSH
45381: LD_INT 8
45383: PPUSH
45384: CALL_OW 336
// end ; 4 :
45388: GO 45494
45390: LD_INT 4
45392: DOUBLE
45393: EQUAL
45394: IFTRUE 45398
45396: GO 45472
45398: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45399: LD_ADDR_VAR 0 2
45403: PUSH
45404: LD_INT 22
45406: PUSH
45407: LD_OWVAR 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 30
45418: PUSH
45419: LD_INT 29
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PPUSH
45430: CALL_OW 69
45434: ST_TO_ADDR
// if not tmp then
45435: LD_VAR 0 2
45439: NOT
45440: IFFALSE 45444
// exit ;
45442: GO 45494
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45444: LD_VAR 0 2
45448: PUSH
45449: LD_INT 1
45451: ARRAY
45452: PPUSH
45453: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45457: LD_VAR 0 2
45461: PUSH
45462: LD_INT 1
45464: ARRAY
45465: PPUSH
45466: CALL_OW 65
// end ; 5 .. 7 :
45470: GO 45494
45472: LD_INT 5
45474: DOUBLE
45475: GREATEREQUAL
45476: IFFALSE 45484
45478: LD_INT 7
45480: DOUBLE
45481: LESSEQUAL
45482: IFTRUE 45486
45484: GO 45493
45486: POP
// StreamSibBomb ; end ;
45487: CALL 41731 0 0
45491: GO 45494
45493: POP
// end ;
45494: PPOPN 3
45496: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45497: LD_EXP 87
45501: PUSH
45502: LD_EXP 137
45506: AND
45507: IFFALSE 45663
45509: GO 45511
45511: DISABLE
45512: LD_INT 0
45514: PPUSH
45515: PPUSH
45516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45517: LD_ADDR_VAR 0 2
45521: PUSH
45522: LD_INT 81
45524: PUSH
45525: LD_OWVAR 2
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 21
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 21
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PPUSH
45566: CALL_OW 69
45570: ST_TO_ADDR
// if not tmp then
45571: LD_VAR 0 2
45575: NOT
45576: IFFALSE 45580
// exit ;
45578: GO 45663
// p := 0 ;
45580: LD_ADDR_VAR 0 3
45584: PUSH
45585: LD_INT 0
45587: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45588: LD_INT 35
45590: PPUSH
45591: CALL_OW 67
// p := p + 1 ;
45595: LD_ADDR_VAR 0 3
45599: PUSH
45600: LD_VAR 0 3
45604: PUSH
45605: LD_INT 1
45607: PLUS
45608: ST_TO_ADDR
// for i in tmp do
45609: LD_ADDR_VAR 0 1
45613: PUSH
45614: LD_VAR 0 2
45618: PUSH
45619: FOR_IN
45620: IFFALSE 45651
// if GetLives ( i ) < 1000 then
45622: LD_VAR 0 1
45626: PPUSH
45627: CALL_OW 256
45631: PUSH
45632: LD_INT 1000
45634: LESS
45635: IFFALSE 45649
// SetLives ( i , 1000 ) ;
45637: LD_VAR 0 1
45641: PPUSH
45642: LD_INT 1000
45644: PPUSH
45645: CALL_OW 234
45649: GO 45619
45651: POP
45652: POP
// until p > 20 ;
45653: LD_VAR 0 3
45657: PUSH
45658: LD_INT 20
45660: GREATER
45661: IFFALSE 45588
// end ;
45663: PPOPN 3
45665: END
// every 0 0$1 trigger StreamModeActive and sTime do
45666: LD_EXP 87
45670: PUSH
45671: LD_EXP 138
45675: AND
45676: IFFALSE 45711
45678: GO 45680
45680: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
45681: LD_INT 28
45683: PPUSH
45684: LD_OWVAR 2
45688: PPUSH
45689: LD_INT 2
45691: PPUSH
45692: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
45696: LD_INT 30
45698: PPUSH
45699: LD_OWVAR 2
45703: PPUSH
45704: LD_INT 2
45706: PPUSH
45707: CALL_OW 322
// end ;
45711: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
45712: LD_EXP 87
45716: PUSH
45717: LD_EXP 139
45721: AND
45722: IFFALSE 45843
45724: GO 45726
45726: DISABLE
45727: LD_INT 0
45729: PPUSH
45730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45731: LD_ADDR_VAR 0 2
45735: PUSH
45736: LD_INT 22
45738: PUSH
45739: LD_OWVAR 2
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 21
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 23
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: PPUSH
45780: CALL_OW 69
45784: ST_TO_ADDR
// if not tmp then
45785: LD_VAR 0 2
45789: NOT
45790: IFFALSE 45794
// exit ;
45792: GO 45843
// for i in tmp do
45794: LD_ADDR_VAR 0 1
45798: PUSH
45799: LD_VAR 0 2
45803: PUSH
45804: FOR_IN
45805: IFFALSE 45841
// begin if Crawls ( i ) then
45807: LD_VAR 0 1
45811: PPUSH
45812: CALL_OW 318
45816: IFFALSE 45827
// ComWalk ( i ) ;
45818: LD_VAR 0 1
45822: PPUSH
45823: CALL_OW 138
// SetClass ( i , 2 ) ;
45827: LD_VAR 0 1
45831: PPUSH
45832: LD_INT 2
45834: PPUSH
45835: CALL_OW 336
// end ;
45839: GO 45804
45841: POP
45842: POP
// end ;
45843: PPOPN 2
45845: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
45846: LD_EXP 87
45850: PUSH
45851: LD_EXP 140
45855: AND
45856: IFFALSE 46144
45858: GO 45860
45860: DISABLE
45861: LD_INT 0
45863: PPUSH
45864: PPUSH
45865: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
45866: LD_OWVAR 2
45870: PPUSH
45871: LD_INT 9
45873: PPUSH
45874: LD_INT 1
45876: PPUSH
45877: LD_INT 1
45879: PPUSH
45880: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
45884: LD_INT 9
45886: PPUSH
45887: LD_OWVAR 2
45891: PPUSH
45892: CALL_OW 343
// uc_side := 9 ;
45896: LD_ADDR_OWVAR 20
45900: PUSH
45901: LD_INT 9
45903: ST_TO_ADDR
// uc_nation := 2 ;
45904: LD_ADDR_OWVAR 21
45908: PUSH
45909: LD_INT 2
45911: ST_TO_ADDR
// hc_name := Dark Warrior ;
45912: LD_ADDR_OWVAR 26
45916: PUSH
45917: LD_STRING Dark Warrior
45919: ST_TO_ADDR
// hc_gallery :=  ;
45920: LD_ADDR_OWVAR 33
45924: PUSH
45925: LD_STRING 
45927: ST_TO_ADDR
// hc_noskilllimit := true ;
45928: LD_ADDR_OWVAR 76
45932: PUSH
45933: LD_INT 1
45935: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
45936: LD_ADDR_OWVAR 31
45940: PUSH
45941: LD_INT 30
45943: PUSH
45944: LD_INT 30
45946: PUSH
45947: LD_INT 30
45949: PUSH
45950: LD_INT 30
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: ST_TO_ADDR
// un := CreateHuman ;
45959: LD_ADDR_VAR 0 3
45963: PUSH
45964: CALL_OW 44
45968: ST_TO_ADDR
// hc_noskilllimit := false ;
45969: LD_ADDR_OWVAR 76
45973: PUSH
45974: LD_INT 0
45976: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
45977: LD_VAR 0 3
45981: PPUSH
45982: LD_INT 1
45984: PPUSH
45985: CALL_OW 51
// ToLua ( playRanger() ) ;
45989: LD_STRING playRanger()
45991: PPUSH
45992: CALL_OW 559
// p := 0 ;
45996: LD_ADDR_VAR 0 2
46000: PUSH
46001: LD_INT 0
46003: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46004: LD_INT 35
46006: PPUSH
46007: CALL_OW 67
// p := p + 1 ;
46011: LD_ADDR_VAR 0 2
46015: PUSH
46016: LD_VAR 0 2
46020: PUSH
46021: LD_INT 1
46023: PLUS
46024: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46025: LD_VAR 0 3
46029: PPUSH
46030: CALL_OW 256
46034: PUSH
46035: LD_INT 1000
46037: LESS
46038: IFFALSE 46052
// SetLives ( un , 1000 ) ;
46040: LD_VAR 0 3
46044: PPUSH
46045: LD_INT 1000
46047: PPUSH
46048: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46052: LD_VAR 0 3
46056: PPUSH
46057: LD_INT 81
46059: PUSH
46060: LD_OWVAR 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 91
46071: PUSH
46072: LD_VAR 0 3
46076: PUSH
46077: LD_INT 30
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PPUSH
46089: CALL_OW 69
46093: PPUSH
46094: LD_VAR 0 3
46098: PPUSH
46099: CALL_OW 74
46103: PPUSH
46104: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46108: LD_VAR 0 2
46112: PUSH
46113: LD_INT 80
46115: GREATER
46116: PUSH
46117: LD_VAR 0 3
46121: PPUSH
46122: CALL_OW 301
46126: OR
46127: IFFALSE 46004
// if un then
46129: LD_VAR 0 3
46133: IFFALSE 46144
// RemoveUnit ( un ) ;
46135: LD_VAR 0 3
46139: PPUSH
46140: CALL_OW 64
// end ;
46144: PPOPN 3
46146: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46147: LD_EXP 141
46151: IFFALSE 46267
46153: GO 46155
46155: DISABLE
46156: LD_INT 0
46158: PPUSH
46159: PPUSH
46160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46161: LD_ADDR_VAR 0 2
46165: PUSH
46166: LD_INT 81
46168: PUSH
46169: LD_OWVAR 2
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 21
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PPUSH
46192: CALL_OW 69
46196: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46197: LD_STRING playComputer()
46199: PPUSH
46200: CALL_OW 559
// if not tmp then
46204: LD_VAR 0 2
46208: NOT
46209: IFFALSE 46213
// exit ;
46211: GO 46267
// for i in tmp do
46213: LD_ADDR_VAR 0 1
46217: PUSH
46218: LD_VAR 0 2
46222: PUSH
46223: FOR_IN
46224: IFFALSE 46265
// for j := 1 to 4 do
46226: LD_ADDR_VAR 0 3
46230: PUSH
46231: DOUBLE
46232: LD_INT 1
46234: DEC
46235: ST_TO_ADDR
46236: LD_INT 4
46238: PUSH
46239: FOR_TO
46240: IFFALSE 46261
// SetSkill ( i , j , 10 ) ;
46242: LD_VAR 0 1
46246: PPUSH
46247: LD_VAR 0 3
46251: PPUSH
46252: LD_INT 10
46254: PPUSH
46255: CALL_OW 237
46259: GO 46239
46261: POP
46262: POP
46263: GO 46223
46265: POP
46266: POP
// end ;
46267: PPOPN 3
46269: END
// every 0 0$1 trigger s30 do var i , tmp ;
46270: LD_EXP 142
46274: IFFALSE 46343
46276: GO 46278
46278: DISABLE
46279: LD_INT 0
46281: PPUSH
46282: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46283: LD_ADDR_VAR 0 2
46287: PUSH
46288: LD_INT 22
46290: PUSH
46291: LD_OWVAR 2
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PPUSH
46300: CALL_OW 69
46304: ST_TO_ADDR
// if not tmp then
46305: LD_VAR 0 2
46309: NOT
46310: IFFALSE 46314
// exit ;
46312: GO 46343
// for i in tmp do
46314: LD_ADDR_VAR 0 1
46318: PUSH
46319: LD_VAR 0 2
46323: PUSH
46324: FOR_IN
46325: IFFALSE 46341
// SetLives ( i , 300 ) ;
46327: LD_VAR 0 1
46331: PPUSH
46332: LD_INT 300
46334: PPUSH
46335: CALL_OW 234
46339: GO 46324
46341: POP
46342: POP
// end ;
46343: PPOPN 2
46345: END
// every 0 0$1 trigger s60 do var i , tmp ;
46346: LD_EXP 143
46350: IFFALSE 46419
46352: GO 46354
46354: DISABLE
46355: LD_INT 0
46357: PPUSH
46358: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46359: LD_ADDR_VAR 0 2
46363: PUSH
46364: LD_INT 22
46366: PUSH
46367: LD_OWVAR 2
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PPUSH
46376: CALL_OW 69
46380: ST_TO_ADDR
// if not tmp then
46381: LD_VAR 0 2
46385: NOT
46386: IFFALSE 46390
// exit ;
46388: GO 46419
// for i in tmp do
46390: LD_ADDR_VAR 0 1
46394: PUSH
46395: LD_VAR 0 2
46399: PUSH
46400: FOR_IN
46401: IFFALSE 46417
// SetLives ( i , 600 ) ;
46403: LD_VAR 0 1
46407: PPUSH
46408: LD_INT 600
46410: PPUSH
46411: CALL_OW 234
46415: GO 46400
46417: POP
46418: POP
// end ;
46419: PPOPN 2
46421: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46422: LD_INT 0
46424: PPUSH
// case cmd of 301 :
46425: LD_VAR 0 1
46429: PUSH
46430: LD_INT 301
46432: DOUBLE
46433: EQUAL
46434: IFTRUE 46438
46436: GO 46470
46438: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46439: LD_VAR 0 6
46443: PPUSH
46444: LD_VAR 0 7
46448: PPUSH
46449: LD_VAR 0 8
46453: PPUSH
46454: LD_VAR 0 4
46458: PPUSH
46459: LD_VAR 0 5
46463: PPUSH
46464: CALL 47679 0 5
46468: GO 46591
46470: LD_INT 302
46472: DOUBLE
46473: EQUAL
46474: IFTRUE 46478
46476: GO 46515
46478: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46479: LD_VAR 0 6
46483: PPUSH
46484: LD_VAR 0 7
46488: PPUSH
46489: LD_VAR 0 8
46493: PPUSH
46494: LD_VAR 0 9
46498: PPUSH
46499: LD_VAR 0 4
46503: PPUSH
46504: LD_VAR 0 5
46508: PPUSH
46509: CALL 47770 0 6
46513: GO 46591
46515: LD_INT 303
46517: DOUBLE
46518: EQUAL
46519: IFTRUE 46523
46521: GO 46560
46523: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46524: LD_VAR 0 6
46528: PPUSH
46529: LD_VAR 0 7
46533: PPUSH
46534: LD_VAR 0 8
46538: PPUSH
46539: LD_VAR 0 9
46543: PPUSH
46544: LD_VAR 0 4
46548: PPUSH
46549: LD_VAR 0 5
46553: PPUSH
46554: CALL 46596 0 6
46558: GO 46591
46560: LD_INT 304
46562: DOUBLE
46563: EQUAL
46564: IFTRUE 46568
46566: GO 46590
46568: POP
// hHackTeleport ( unit , x , y ) ; end ;
46569: LD_VAR 0 2
46573: PPUSH
46574: LD_VAR 0 4
46578: PPUSH
46579: LD_VAR 0 5
46583: PPUSH
46584: CALL 48363 0 3
46588: GO 46591
46590: POP
// end ;
46591: LD_VAR 0 12
46595: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
46596: LD_INT 0
46598: PPUSH
46599: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
46600: LD_VAR 0 1
46604: PUSH
46605: LD_INT 1
46607: LESS
46608: PUSH
46609: LD_VAR 0 1
46613: PUSH
46614: LD_INT 3
46616: GREATER
46617: OR
46618: PUSH
46619: LD_VAR 0 5
46623: PPUSH
46624: LD_VAR 0 6
46628: PPUSH
46629: CALL_OW 428
46633: OR
46634: IFFALSE 46638
// exit ;
46636: GO 47366
// uc_side := your_side ;
46638: LD_ADDR_OWVAR 20
46642: PUSH
46643: LD_OWVAR 2
46647: ST_TO_ADDR
// uc_nation := nation ;
46648: LD_ADDR_OWVAR 21
46652: PUSH
46653: LD_VAR 0 1
46657: ST_TO_ADDR
// bc_level = 1 ;
46658: LD_ADDR_OWVAR 43
46662: PUSH
46663: LD_INT 1
46665: ST_TO_ADDR
// case btype of 1 :
46666: LD_VAR 0 2
46670: PUSH
46671: LD_INT 1
46673: DOUBLE
46674: EQUAL
46675: IFTRUE 46679
46677: GO 46690
46679: POP
// bc_type := b_depot ; 2 :
46680: LD_ADDR_OWVAR 42
46684: PUSH
46685: LD_INT 0
46687: ST_TO_ADDR
46688: GO 47310
46690: LD_INT 2
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46709
46698: POP
// bc_type := b_warehouse ; 3 :
46699: LD_ADDR_OWVAR 42
46703: PUSH
46704: LD_INT 1
46706: ST_TO_ADDR
46707: GO 47310
46709: LD_INT 3
46711: DOUBLE
46712: EQUAL
46713: IFTRUE 46717
46715: GO 46728
46717: POP
// bc_type := b_lab ; 4 .. 9 :
46718: LD_ADDR_OWVAR 42
46722: PUSH
46723: LD_INT 6
46725: ST_TO_ADDR
46726: GO 47310
46728: LD_INT 4
46730: DOUBLE
46731: GREATEREQUAL
46732: IFFALSE 46740
46734: LD_INT 9
46736: DOUBLE
46737: LESSEQUAL
46738: IFTRUE 46742
46740: GO 46802
46742: POP
// begin bc_type := b_lab_half ;
46743: LD_ADDR_OWVAR 42
46747: PUSH
46748: LD_INT 7
46750: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
46751: LD_ADDR_OWVAR 44
46755: PUSH
46756: LD_INT 10
46758: PUSH
46759: LD_INT 11
46761: PUSH
46762: LD_INT 12
46764: PUSH
46765: LD_INT 15
46767: PUSH
46768: LD_INT 14
46770: PUSH
46771: LD_INT 13
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: PUSH
46782: LD_VAR 0 2
46786: PUSH
46787: LD_INT 3
46789: MINUS
46790: ARRAY
46791: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
46792: LD_ADDR_OWVAR 45
46796: PUSH
46797: LD_INT 9
46799: ST_TO_ADDR
// end ; 10 .. 13 :
46800: GO 47310
46802: LD_INT 10
46804: DOUBLE
46805: GREATEREQUAL
46806: IFFALSE 46814
46808: LD_INT 13
46810: DOUBLE
46811: LESSEQUAL
46812: IFTRUE 46816
46814: GO 46893
46816: POP
// begin bc_type := b_lab_full ;
46817: LD_ADDR_OWVAR 42
46821: PUSH
46822: LD_INT 8
46824: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
46825: LD_ADDR_OWVAR 44
46829: PUSH
46830: LD_INT 10
46832: PUSH
46833: LD_INT 12
46835: PUSH
46836: LD_INT 14
46838: PUSH
46839: LD_INT 13
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: PUSH
46848: LD_VAR 0 2
46852: PUSH
46853: LD_INT 9
46855: MINUS
46856: ARRAY
46857: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
46858: LD_ADDR_OWVAR 45
46862: PUSH
46863: LD_INT 11
46865: PUSH
46866: LD_INT 15
46868: PUSH
46869: LD_INT 12
46871: PUSH
46872: LD_INT 15
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: PUSH
46881: LD_VAR 0 2
46885: PUSH
46886: LD_INT 9
46888: MINUS
46889: ARRAY
46890: ST_TO_ADDR
// end ; 14 :
46891: GO 47310
46893: LD_INT 14
46895: DOUBLE
46896: EQUAL
46897: IFTRUE 46901
46899: GO 46912
46901: POP
// bc_type := b_workshop ; 15 :
46902: LD_ADDR_OWVAR 42
46906: PUSH
46907: LD_INT 2
46909: ST_TO_ADDR
46910: GO 47310
46912: LD_INT 15
46914: DOUBLE
46915: EQUAL
46916: IFTRUE 46920
46918: GO 46931
46920: POP
// bc_type := b_factory ; 16 :
46921: LD_ADDR_OWVAR 42
46925: PUSH
46926: LD_INT 3
46928: ST_TO_ADDR
46929: GO 47310
46931: LD_INT 16
46933: DOUBLE
46934: EQUAL
46935: IFTRUE 46939
46937: GO 46950
46939: POP
// bc_type := b_ext_gun ; 17 :
46940: LD_ADDR_OWVAR 42
46944: PUSH
46945: LD_INT 17
46947: ST_TO_ADDR
46948: GO 47310
46950: LD_INT 17
46952: DOUBLE
46953: EQUAL
46954: IFTRUE 46958
46956: GO 46986
46958: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
46959: LD_ADDR_OWVAR 42
46963: PUSH
46964: LD_INT 19
46966: PUSH
46967: LD_INT 23
46969: PUSH
46970: LD_INT 19
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: PUSH
46978: LD_VAR 0 1
46982: ARRAY
46983: ST_TO_ADDR
46984: GO 47310
46986: LD_INT 18
46988: DOUBLE
46989: EQUAL
46990: IFTRUE 46994
46992: GO 47005
46994: POP
// bc_type := b_ext_radar ; 19 :
46995: LD_ADDR_OWVAR 42
46999: PUSH
47000: LD_INT 20
47002: ST_TO_ADDR
47003: GO 47310
47005: LD_INT 19
47007: DOUBLE
47008: EQUAL
47009: IFTRUE 47013
47011: GO 47024
47013: POP
// bc_type := b_ext_radio ; 20 :
47014: LD_ADDR_OWVAR 42
47018: PUSH
47019: LD_INT 22
47021: ST_TO_ADDR
47022: GO 47310
47024: LD_INT 20
47026: DOUBLE
47027: EQUAL
47028: IFTRUE 47032
47030: GO 47043
47032: POP
// bc_type := b_ext_siberium ; 21 :
47033: LD_ADDR_OWVAR 42
47037: PUSH
47038: LD_INT 21
47040: ST_TO_ADDR
47041: GO 47310
47043: LD_INT 21
47045: DOUBLE
47046: EQUAL
47047: IFTRUE 47051
47049: GO 47062
47051: POP
// bc_type := b_ext_computer ; 22 :
47052: LD_ADDR_OWVAR 42
47056: PUSH
47057: LD_INT 24
47059: ST_TO_ADDR
47060: GO 47310
47062: LD_INT 22
47064: DOUBLE
47065: EQUAL
47066: IFTRUE 47070
47068: GO 47081
47070: POP
// bc_type := b_ext_track ; 23 :
47071: LD_ADDR_OWVAR 42
47075: PUSH
47076: LD_INT 16
47078: ST_TO_ADDR
47079: GO 47310
47081: LD_INT 23
47083: DOUBLE
47084: EQUAL
47085: IFTRUE 47089
47087: GO 47100
47089: POP
// bc_type := b_ext_laser ; 24 :
47090: LD_ADDR_OWVAR 42
47094: PUSH
47095: LD_INT 25
47097: ST_TO_ADDR
47098: GO 47310
47100: LD_INT 24
47102: DOUBLE
47103: EQUAL
47104: IFTRUE 47108
47106: GO 47119
47108: POP
// bc_type := b_control_tower ; 25 :
47109: LD_ADDR_OWVAR 42
47113: PUSH
47114: LD_INT 36
47116: ST_TO_ADDR
47117: GO 47310
47119: LD_INT 25
47121: DOUBLE
47122: EQUAL
47123: IFTRUE 47127
47125: GO 47138
47127: POP
// bc_type := b_breastwork ; 26 :
47128: LD_ADDR_OWVAR 42
47132: PUSH
47133: LD_INT 31
47135: ST_TO_ADDR
47136: GO 47310
47138: LD_INT 26
47140: DOUBLE
47141: EQUAL
47142: IFTRUE 47146
47144: GO 47157
47146: POP
// bc_type := b_bunker ; 27 :
47147: LD_ADDR_OWVAR 42
47151: PUSH
47152: LD_INT 32
47154: ST_TO_ADDR
47155: GO 47310
47157: LD_INT 27
47159: DOUBLE
47160: EQUAL
47161: IFTRUE 47165
47163: GO 47176
47165: POP
// bc_type := b_turret ; 28 :
47166: LD_ADDR_OWVAR 42
47170: PUSH
47171: LD_INT 33
47173: ST_TO_ADDR
47174: GO 47310
47176: LD_INT 28
47178: DOUBLE
47179: EQUAL
47180: IFTRUE 47184
47182: GO 47195
47184: POP
// bc_type := b_armoury ; 29 :
47185: LD_ADDR_OWVAR 42
47189: PUSH
47190: LD_INT 4
47192: ST_TO_ADDR
47193: GO 47310
47195: LD_INT 29
47197: DOUBLE
47198: EQUAL
47199: IFTRUE 47203
47201: GO 47214
47203: POP
// bc_type := b_barracks ; 30 :
47204: LD_ADDR_OWVAR 42
47208: PUSH
47209: LD_INT 5
47211: ST_TO_ADDR
47212: GO 47310
47214: LD_INT 30
47216: DOUBLE
47217: EQUAL
47218: IFTRUE 47222
47220: GO 47233
47222: POP
// bc_type := b_solar_power ; 31 :
47223: LD_ADDR_OWVAR 42
47227: PUSH
47228: LD_INT 27
47230: ST_TO_ADDR
47231: GO 47310
47233: LD_INT 31
47235: DOUBLE
47236: EQUAL
47237: IFTRUE 47241
47239: GO 47252
47241: POP
// bc_type := b_oil_power ; 32 :
47242: LD_ADDR_OWVAR 42
47246: PUSH
47247: LD_INT 26
47249: ST_TO_ADDR
47250: GO 47310
47252: LD_INT 32
47254: DOUBLE
47255: EQUAL
47256: IFTRUE 47260
47258: GO 47271
47260: POP
// bc_type := b_siberite_power ; 33 :
47261: LD_ADDR_OWVAR 42
47265: PUSH
47266: LD_INT 28
47268: ST_TO_ADDR
47269: GO 47310
47271: LD_INT 33
47273: DOUBLE
47274: EQUAL
47275: IFTRUE 47279
47277: GO 47290
47279: POP
// bc_type := b_oil_mine ; 34 :
47280: LD_ADDR_OWVAR 42
47284: PUSH
47285: LD_INT 29
47287: ST_TO_ADDR
47288: GO 47310
47290: LD_INT 34
47292: DOUBLE
47293: EQUAL
47294: IFTRUE 47298
47296: GO 47309
47298: POP
// bc_type := b_siberite_mine ; end ;
47299: LD_ADDR_OWVAR 42
47303: PUSH
47304: LD_INT 30
47306: ST_TO_ADDR
47307: GO 47310
47309: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47310: LD_ADDR_VAR 0 8
47314: PUSH
47315: LD_VAR 0 5
47319: PPUSH
47320: LD_VAR 0 6
47324: PPUSH
47325: LD_VAR 0 3
47329: PPUSH
47330: CALL_OW 47
47334: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47335: LD_OWVAR 42
47339: PUSH
47340: LD_INT 32
47342: PUSH
47343: LD_INT 33
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: IN
47350: IFFALSE 47366
// PlaceWeaponTurret ( b , weapon ) ;
47352: LD_VAR 0 8
47356: PPUSH
47357: LD_VAR 0 4
47361: PPUSH
47362: CALL_OW 431
// end ;
47366: LD_VAR 0 7
47370: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47371: LD_INT 0
47373: PPUSH
47374: PPUSH
47375: PPUSH
47376: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47377: LD_ADDR_VAR 0 4
47381: PUSH
47382: LD_INT 22
47384: PUSH
47385: LD_OWVAR 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 30
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 30
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PPUSH
47426: CALL_OW 69
47430: ST_TO_ADDR
// if not tmp then
47431: LD_VAR 0 4
47435: NOT
47436: IFFALSE 47440
// exit ;
47438: GO 47499
// for i in tmp do
47440: LD_ADDR_VAR 0 2
47444: PUSH
47445: LD_VAR 0 4
47449: PUSH
47450: FOR_IN
47451: IFFALSE 47497
// for j = 1 to 3 do
47453: LD_ADDR_VAR 0 3
47457: PUSH
47458: DOUBLE
47459: LD_INT 1
47461: DEC
47462: ST_TO_ADDR
47463: LD_INT 3
47465: PUSH
47466: FOR_TO
47467: IFFALSE 47493
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47469: LD_VAR 0 2
47473: PPUSH
47474: CALL_OW 274
47478: PPUSH
47479: LD_VAR 0 3
47483: PPUSH
47484: LD_INT 99999
47486: PPUSH
47487: CALL_OW 277
47491: GO 47466
47493: POP
47494: POP
47495: GO 47450
47497: POP
47498: POP
// end ;
47499: LD_VAR 0 1
47503: RET
// export function hHackSetLevel10 ; var i , j ; begin
47504: LD_INT 0
47506: PPUSH
47507: PPUSH
47508: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47509: LD_ADDR_VAR 0 2
47513: PUSH
47514: LD_INT 21
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PPUSH
47524: CALL_OW 69
47528: PUSH
47529: FOR_IN
47530: IFFALSE 47582
// if IsSelected ( i ) then
47532: LD_VAR 0 2
47536: PPUSH
47537: CALL_OW 306
47541: IFFALSE 47580
// begin for j := 1 to 4 do
47543: LD_ADDR_VAR 0 3
47547: PUSH
47548: DOUBLE
47549: LD_INT 1
47551: DEC
47552: ST_TO_ADDR
47553: LD_INT 4
47555: PUSH
47556: FOR_TO
47557: IFFALSE 47578
// SetSkill ( i , j , 10 ) ;
47559: LD_VAR 0 2
47563: PPUSH
47564: LD_VAR 0 3
47568: PPUSH
47569: LD_INT 10
47571: PPUSH
47572: CALL_OW 237
47576: GO 47556
47578: POP
47579: POP
// end ;
47580: GO 47529
47582: POP
47583: POP
// end ;
47584: LD_VAR 0 1
47588: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
47589: LD_INT 0
47591: PPUSH
47592: PPUSH
47593: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
47594: LD_ADDR_VAR 0 2
47598: PUSH
47599: LD_INT 22
47601: PUSH
47602: LD_OWVAR 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 21
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PPUSH
47625: CALL_OW 69
47629: PUSH
47630: FOR_IN
47631: IFFALSE 47672
// begin for j := 1 to 4 do
47633: LD_ADDR_VAR 0 3
47637: PUSH
47638: DOUBLE
47639: LD_INT 1
47641: DEC
47642: ST_TO_ADDR
47643: LD_INT 4
47645: PUSH
47646: FOR_TO
47647: IFFALSE 47668
// SetSkill ( i , j , 10 ) ;
47649: LD_VAR 0 2
47653: PPUSH
47654: LD_VAR 0 3
47658: PPUSH
47659: LD_INT 10
47661: PPUSH
47662: CALL_OW 237
47666: GO 47646
47668: POP
47669: POP
// end ;
47670: GO 47630
47672: POP
47673: POP
// end ;
47674: LD_VAR 0 1
47678: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
47679: LD_INT 0
47681: PPUSH
// uc_side := your_side ;
47682: LD_ADDR_OWVAR 20
47686: PUSH
47687: LD_OWVAR 2
47691: ST_TO_ADDR
// uc_nation := nation ;
47692: LD_ADDR_OWVAR 21
47696: PUSH
47697: LD_VAR 0 1
47701: ST_TO_ADDR
// InitHc ;
47702: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
47706: LD_INT 0
47708: PPUSH
47709: LD_VAR 0 2
47713: PPUSH
47714: LD_VAR 0 3
47718: PPUSH
47719: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
47723: LD_VAR 0 4
47727: PPUSH
47728: LD_VAR 0 5
47732: PPUSH
47733: CALL_OW 428
47737: PUSH
47738: LD_INT 0
47740: EQUAL
47741: IFFALSE 47765
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
47743: CALL_OW 44
47747: PPUSH
47748: LD_VAR 0 4
47752: PPUSH
47753: LD_VAR 0 5
47757: PPUSH
47758: LD_INT 1
47760: PPUSH
47761: CALL_OW 48
// end ;
47765: LD_VAR 0 6
47769: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
47770: LD_INT 0
47772: PPUSH
47773: PPUSH
// uc_side := your_side ;
47774: LD_ADDR_OWVAR 20
47778: PUSH
47779: LD_OWVAR 2
47783: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
47784: LD_VAR 0 1
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: LD_INT 4
47800: PUSH
47801: LD_INT 5
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: IN
47811: IFFALSE 47823
// uc_nation := nation_american else
47813: LD_ADDR_OWVAR 21
47817: PUSH
47818: LD_INT 1
47820: ST_TO_ADDR
47821: GO 47866
// if chassis in [ 11 , 12 , 13 , 14 ] then
47823: LD_VAR 0 1
47827: PUSH
47828: LD_INT 11
47830: PUSH
47831: LD_INT 12
47833: PUSH
47834: LD_INT 13
47836: PUSH
47837: LD_INT 14
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: IN
47846: IFFALSE 47858
// uc_nation := nation_arabian else
47848: LD_ADDR_OWVAR 21
47852: PUSH
47853: LD_INT 2
47855: ST_TO_ADDR
47856: GO 47866
// uc_nation := nation_russian ;
47858: LD_ADDR_OWVAR 21
47862: PUSH
47863: LD_INT 3
47865: ST_TO_ADDR
// vc_chassis := chassis ;
47866: LD_ADDR_OWVAR 37
47870: PUSH
47871: LD_VAR 0 1
47875: ST_TO_ADDR
// vc_engine := engine ;
47876: LD_ADDR_OWVAR 39
47880: PUSH
47881: LD_VAR 0 2
47885: ST_TO_ADDR
// vc_control := control ;
47886: LD_ADDR_OWVAR 38
47890: PUSH
47891: LD_VAR 0 3
47895: ST_TO_ADDR
// vc_weapon := weapon ;
47896: LD_ADDR_OWVAR 40
47900: PUSH
47901: LD_VAR 0 4
47905: ST_TO_ADDR
// un := CreateVehicle ;
47906: LD_ADDR_VAR 0 8
47910: PUSH
47911: CALL_OW 45
47915: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
47916: LD_VAR 0 8
47920: PPUSH
47921: LD_INT 0
47923: PPUSH
47924: LD_INT 5
47926: PPUSH
47927: CALL_OW 12
47931: PPUSH
47932: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
47936: LD_VAR 0 8
47940: PPUSH
47941: LD_VAR 0 5
47945: PPUSH
47946: LD_VAR 0 6
47950: PPUSH
47951: LD_INT 1
47953: PPUSH
47954: CALL_OW 48
// end ;
47958: LD_VAR 0 7
47962: RET
// export hInvincible ; every 1 do
47963: GO 47965
47965: DISABLE
// hInvincible := [ ] ;
47966: LD_ADDR_EXP 144
47970: PUSH
47971: EMPTY
47972: ST_TO_ADDR
47973: END
// every 10 do var i ;
47974: GO 47976
47976: DISABLE
47977: LD_INT 0
47979: PPUSH
// begin enable ;
47980: ENABLE
// if not hInvincible then
47981: LD_EXP 144
47985: NOT
47986: IFFALSE 47990
// exit ;
47988: GO 48034
// for i in hInvincible do
47990: LD_ADDR_VAR 0 1
47994: PUSH
47995: LD_EXP 144
47999: PUSH
48000: FOR_IN
48001: IFFALSE 48032
// if GetLives ( i ) < 1000 then
48003: LD_VAR 0 1
48007: PPUSH
48008: CALL_OW 256
48012: PUSH
48013: LD_INT 1000
48015: LESS
48016: IFFALSE 48030
// SetLives ( i , 1000 ) ;
48018: LD_VAR 0 1
48022: PPUSH
48023: LD_INT 1000
48025: PPUSH
48026: CALL_OW 234
48030: GO 48000
48032: POP
48033: POP
// end ;
48034: PPOPN 1
48036: END
// export function hHackInvincible ; var i ; begin
48037: LD_INT 0
48039: PPUSH
48040: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48041: LD_ADDR_VAR 0 2
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 21
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 21
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: PPUSH
48074: CALL_OW 69
48078: PUSH
48079: FOR_IN
48080: IFFALSE 48141
// if IsSelected ( i ) then
48082: LD_VAR 0 2
48086: PPUSH
48087: CALL_OW 306
48091: IFFALSE 48139
// begin if i in hInvincible then
48093: LD_VAR 0 2
48097: PUSH
48098: LD_EXP 144
48102: IN
48103: IFFALSE 48123
// hInvincible := hInvincible diff i else
48105: LD_ADDR_EXP 144
48109: PUSH
48110: LD_EXP 144
48114: PUSH
48115: LD_VAR 0 2
48119: DIFF
48120: ST_TO_ADDR
48121: GO 48139
// hInvincible := hInvincible union i ;
48123: LD_ADDR_EXP 144
48127: PUSH
48128: LD_EXP 144
48132: PUSH
48133: LD_VAR 0 2
48137: UNION
48138: ST_TO_ADDR
// end ;
48139: GO 48079
48141: POP
48142: POP
// end ;
48143: LD_VAR 0 1
48147: RET
// export function hHackInvisible ; var i , j ; begin
48148: LD_INT 0
48150: PPUSH
48151: PPUSH
48152: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48153: LD_ADDR_VAR 0 2
48157: PUSH
48158: LD_INT 21
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PPUSH
48168: CALL_OW 69
48172: PUSH
48173: FOR_IN
48174: IFFALSE 48198
// if IsSelected ( i ) then
48176: LD_VAR 0 2
48180: PPUSH
48181: CALL_OW 306
48185: IFFALSE 48196
// ComForceInvisible ( i ) ;
48187: LD_VAR 0 2
48191: PPUSH
48192: CALL_OW 496
48196: GO 48173
48198: POP
48199: POP
// end ;
48200: LD_VAR 0 1
48204: RET
// export function hHackChangeYourSide ; begin
48205: LD_INT 0
48207: PPUSH
// if your_side = 8 then
48208: LD_OWVAR 2
48212: PUSH
48213: LD_INT 8
48215: EQUAL
48216: IFFALSE 48228
// your_side := 0 else
48218: LD_ADDR_OWVAR 2
48222: PUSH
48223: LD_INT 0
48225: ST_TO_ADDR
48226: GO 48242
// your_side := your_side + 1 ;
48228: LD_ADDR_OWVAR 2
48232: PUSH
48233: LD_OWVAR 2
48237: PUSH
48238: LD_INT 1
48240: PLUS
48241: ST_TO_ADDR
// end ;
48242: LD_VAR 0 1
48246: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48247: LD_INT 0
48249: PPUSH
48250: PPUSH
48251: PPUSH
// for i in all_units do
48252: LD_ADDR_VAR 0 2
48256: PUSH
48257: LD_OWVAR 3
48261: PUSH
48262: FOR_IN
48263: IFFALSE 48341
// if IsSelected ( i ) then
48265: LD_VAR 0 2
48269: PPUSH
48270: CALL_OW 306
48274: IFFALSE 48339
// begin j := GetSide ( i ) ;
48276: LD_ADDR_VAR 0 3
48280: PUSH
48281: LD_VAR 0 2
48285: PPUSH
48286: CALL_OW 255
48290: ST_TO_ADDR
// if j = 8 then
48291: LD_VAR 0 3
48295: PUSH
48296: LD_INT 8
48298: EQUAL
48299: IFFALSE 48311
// j := 0 else
48301: LD_ADDR_VAR 0 3
48305: PUSH
48306: LD_INT 0
48308: ST_TO_ADDR
48309: GO 48325
// j := j + 1 ;
48311: LD_ADDR_VAR 0 3
48315: PUSH
48316: LD_VAR 0 3
48320: PUSH
48321: LD_INT 1
48323: PLUS
48324: ST_TO_ADDR
// SetSide ( i , j ) ;
48325: LD_VAR 0 2
48329: PPUSH
48330: LD_VAR 0 3
48334: PPUSH
48335: CALL_OW 235
// end ;
48339: GO 48262
48341: POP
48342: POP
// end ;
48343: LD_VAR 0 1
48347: RET
// export function hHackFog ; begin
48348: LD_INT 0
48350: PPUSH
// FogOff ( true ) ;
48351: LD_INT 1
48353: PPUSH
48354: CALL_OW 344
// end ;
48358: LD_VAR 0 1
48362: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48363: LD_INT 0
48365: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48366: LD_VAR 0 1
48370: PPUSH
48371: LD_VAR 0 2
48375: PPUSH
48376: LD_VAR 0 3
48380: PPUSH
48381: LD_INT 1
48383: PPUSH
48384: LD_INT 1
48386: PPUSH
48387: CALL_OW 483
// CenterOnXY ( x , y ) ;
48391: LD_VAR 0 2
48395: PPUSH
48396: LD_VAR 0 3
48400: PPUSH
48401: CALL_OW 84
// end ;
48405: LD_VAR 0 4
48409: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48410: LD_INT 0
48412: PPUSH
48413: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48414: LD_VAR 0 1
48418: NOT
48419: PUSH
48420: LD_VAR 0 2
48424: PPUSH
48425: LD_VAR 0 3
48429: PPUSH
48430: CALL_OW 488
48434: NOT
48435: OR
48436: PUSH
48437: LD_VAR 0 1
48441: PPUSH
48442: CALL_OW 266
48446: PUSH
48447: LD_INT 3
48449: NONEQUAL
48450: PUSH
48451: LD_VAR 0 1
48455: PPUSH
48456: CALL_OW 247
48460: PUSH
48461: LD_INT 1
48463: EQUAL
48464: NOT
48465: AND
48466: OR
48467: IFFALSE 48471
// exit ;
48469: GO 48753
// if GetType ( factory ) = unit_human then
48471: LD_VAR 0 1
48475: PPUSH
48476: CALL_OW 247
48480: PUSH
48481: LD_INT 1
48483: EQUAL
48484: IFFALSE 48501
// factory := IsInUnit ( factory ) ;
48486: LD_ADDR_VAR 0 1
48490: PUSH
48491: LD_VAR 0 1
48495: PPUSH
48496: CALL_OW 310
48500: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48501: LD_VAR 0 1
48505: PPUSH
48506: CALL_OW 266
48510: PUSH
48511: LD_INT 3
48513: NONEQUAL
48514: IFFALSE 48518
// exit ;
48516: GO 48753
// for i := 1 to Count ( factoryWaypoints ) do
48518: LD_ADDR_VAR 0 5
48522: PUSH
48523: DOUBLE
48524: LD_INT 1
48526: DEC
48527: ST_TO_ADDR
48528: LD_EXP 145
48532: PPUSH
48533: CALL 57319 0 1
48537: PUSH
48538: FOR_TO
48539: IFFALSE 48701
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
48541: LD_VAR 0 2
48545: PPUSH
48546: LD_VAR 0 3
48550: PPUSH
48551: CALL_OW 428
48555: PUSH
48556: LD_EXP 145
48560: PUSH
48561: LD_VAR 0 5
48565: ARRAY
48566: PUSH
48567: LD_INT 2
48569: ARRAY
48570: EQUAL
48571: IFFALSE 48603
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
48573: LD_ADDR_EXP 145
48577: PUSH
48578: LD_EXP 145
48582: PPUSH
48583: LD_VAR 0 5
48587: PPUSH
48588: CALL_OW 3
48592: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48593: CALL 48758 0 0
// exit ;
48597: POP
48598: POP
48599: GO 48753
// end else
48601: GO 48699
// if factory = factoryWaypoints [ i ] [ 2 ] then
48603: LD_VAR 0 1
48607: PUSH
48608: LD_EXP 145
48612: PUSH
48613: LD_VAR 0 5
48617: ARRAY
48618: PUSH
48619: LD_INT 2
48621: ARRAY
48622: EQUAL
48623: IFFALSE 48699
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
48625: LD_ADDR_EXP 145
48629: PUSH
48630: LD_EXP 145
48634: PPUSH
48635: LD_VAR 0 5
48639: PPUSH
48640: CALL_OW 3
48644: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
48645: LD_ADDR_EXP 145
48649: PUSH
48650: LD_EXP 145
48654: PPUSH
48655: LD_VAR 0 1
48659: PPUSH
48660: CALL_OW 255
48664: PUSH
48665: LD_VAR 0 1
48669: PUSH
48670: LD_VAR 0 2
48674: PUSH
48675: LD_VAR 0 3
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: PPUSH
48686: CALL 92928 0 2
48690: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48691: CALL 48758 0 0
// exit ;
48695: POP
48696: POP
48697: GO 48753
// end ; end ;
48699: GO 48538
48701: POP
48702: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
48703: LD_ADDR_EXP 145
48707: PUSH
48708: LD_EXP 145
48712: PPUSH
48713: LD_VAR 0 1
48717: PPUSH
48718: CALL_OW 255
48722: PUSH
48723: LD_VAR 0 1
48727: PUSH
48728: LD_VAR 0 2
48732: PUSH
48733: LD_VAR 0 3
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: PPUSH
48744: CALL 92928 0 2
48748: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48749: CALL 48758 0 0
// end ;
48753: LD_VAR 0 4
48757: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
48758: LD_INT 0
48760: PPUSH
48761: PPUSH
48762: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
48763: LD_STRING resetFactoryWaypoint();
48765: PPUSH
48766: CALL_OW 559
// if factoryWaypoints then
48770: LD_EXP 145
48774: IFFALSE 48895
// begin list := factoryWaypoints ;
48776: LD_ADDR_VAR 0 3
48780: PUSH
48781: LD_EXP 145
48785: ST_TO_ADDR
// for i := 1 to list do
48786: LD_ADDR_VAR 0 2
48790: PUSH
48791: DOUBLE
48792: LD_INT 1
48794: DEC
48795: ST_TO_ADDR
48796: LD_VAR 0 3
48800: PUSH
48801: FOR_TO
48802: IFFALSE 48893
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48804: LD_STRING setFactoryWaypointXY(
48806: PUSH
48807: LD_VAR 0 3
48811: PUSH
48812: LD_VAR 0 2
48816: ARRAY
48817: PUSH
48818: LD_INT 1
48820: ARRAY
48821: STR
48822: PUSH
48823: LD_STRING ,
48825: STR
48826: PUSH
48827: LD_VAR 0 3
48831: PUSH
48832: LD_VAR 0 2
48836: ARRAY
48837: PUSH
48838: LD_INT 2
48840: ARRAY
48841: STR
48842: PUSH
48843: LD_STRING ,
48845: STR
48846: PUSH
48847: LD_VAR 0 3
48851: PUSH
48852: LD_VAR 0 2
48856: ARRAY
48857: PUSH
48858: LD_INT 3
48860: ARRAY
48861: STR
48862: PUSH
48863: LD_STRING ,
48865: STR
48866: PUSH
48867: LD_VAR 0 3
48871: PUSH
48872: LD_VAR 0 2
48876: ARRAY
48877: PUSH
48878: LD_INT 4
48880: ARRAY
48881: STR
48882: PUSH
48883: LD_STRING )
48885: STR
48886: PPUSH
48887: CALL_OW 559
48891: GO 48801
48893: POP
48894: POP
// end ; end ;
48895: LD_VAR 0 1
48899: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
48900: LD_INT 0
48902: PPUSH
// if HexInfo ( x , y ) = warehouse then
48903: LD_VAR 0 2
48907: PPUSH
48908: LD_VAR 0 3
48912: PPUSH
48913: CALL_OW 428
48917: PUSH
48918: LD_VAR 0 1
48922: EQUAL
48923: IFFALSE 48950
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
48925: LD_ADDR_EXP 146
48929: PUSH
48930: LD_EXP 146
48934: PPUSH
48935: LD_VAR 0 1
48939: PPUSH
48940: LD_INT 0
48942: PPUSH
48943: CALL_OW 1
48947: ST_TO_ADDR
48948: GO 49001
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
48950: LD_ADDR_EXP 146
48954: PUSH
48955: LD_EXP 146
48959: PPUSH
48960: LD_VAR 0 1
48964: PPUSH
48965: LD_VAR 0 1
48969: PPUSH
48970: CALL_OW 255
48974: PUSH
48975: LD_VAR 0 1
48979: PUSH
48980: LD_VAR 0 2
48984: PUSH
48985: LD_VAR 0 3
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: PPUSH
48996: CALL_OW 1
49000: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
49001: CALL 49010 0 0
// end ;
49005: LD_VAR 0 4
49009: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
49010: LD_INT 0
49012: PPUSH
49013: PPUSH
49014: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
49015: LD_STRING resetWarehouseGatheringPoints();
49017: PPUSH
49018: CALL_OW 559
// if warehouseGatheringPoints then
49022: LD_EXP 146
49026: IFFALSE 49152
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
49028: LD_ADDR_VAR 0 3
49032: PUSH
49033: LD_EXP 146
49037: PPUSH
49038: CALL 96696 0 1
49042: ST_TO_ADDR
// for i := 1 to list do
49043: LD_ADDR_VAR 0 2
49047: PUSH
49048: DOUBLE
49049: LD_INT 1
49051: DEC
49052: ST_TO_ADDR
49053: LD_VAR 0 3
49057: PUSH
49058: FOR_TO
49059: IFFALSE 49150
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
49061: LD_STRING setWarehouseGatheringPointXY(
49063: PUSH
49064: LD_VAR 0 3
49068: PUSH
49069: LD_VAR 0 2
49073: ARRAY
49074: PUSH
49075: LD_INT 1
49077: ARRAY
49078: STR
49079: PUSH
49080: LD_STRING ,
49082: STR
49083: PUSH
49084: LD_VAR 0 3
49088: PUSH
49089: LD_VAR 0 2
49093: ARRAY
49094: PUSH
49095: LD_INT 2
49097: ARRAY
49098: STR
49099: PUSH
49100: LD_STRING ,
49102: STR
49103: PUSH
49104: LD_VAR 0 3
49108: PUSH
49109: LD_VAR 0 2
49113: ARRAY
49114: PUSH
49115: LD_INT 3
49117: ARRAY
49118: STR
49119: PUSH
49120: LD_STRING ,
49122: STR
49123: PUSH
49124: LD_VAR 0 3
49128: PUSH
49129: LD_VAR 0 2
49133: ARRAY
49134: PUSH
49135: LD_INT 4
49137: ARRAY
49138: STR
49139: PUSH
49140: LD_STRING )
49142: STR
49143: PPUSH
49144: CALL_OW 559
49148: GO 49058
49150: POP
49151: POP
// end ; end ;
49152: LD_VAR 0 1
49156: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49157: LD_EXP 146
49161: IFFALSE 49846
49163: GO 49165
49165: DISABLE
49166: LD_INT 0
49168: PPUSH
49169: PPUSH
49170: PPUSH
49171: PPUSH
49172: PPUSH
49173: PPUSH
49174: PPUSH
49175: PPUSH
49176: PPUSH
// begin enable ;
49177: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49178: LD_ADDR_VAR 0 3
49182: PUSH
49183: LD_EXP 146
49187: PPUSH
49188: CALL 96696 0 1
49192: ST_TO_ADDR
// if not list then
49193: LD_VAR 0 3
49197: NOT
49198: IFFALSE 49202
// exit ;
49200: GO 49846
// for i := 1 to list do
49202: LD_ADDR_VAR 0 1
49206: PUSH
49207: DOUBLE
49208: LD_INT 1
49210: DEC
49211: ST_TO_ADDR
49212: LD_VAR 0 3
49216: PUSH
49217: FOR_TO
49218: IFFALSE 49844
// begin depot := list [ i ] [ 2 ] ;
49220: LD_ADDR_VAR 0 8
49224: PUSH
49225: LD_VAR 0 3
49229: PUSH
49230: LD_VAR 0 1
49234: ARRAY
49235: PUSH
49236: LD_INT 2
49238: ARRAY
49239: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49240: LD_ADDR_VAR 0 5
49244: PUSH
49245: LD_VAR 0 3
49249: PUSH
49250: LD_VAR 0 1
49254: ARRAY
49255: PUSH
49256: LD_INT 1
49258: ARRAY
49259: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49260: LD_VAR 0 8
49264: PPUSH
49265: CALL_OW 301
49269: PUSH
49270: LD_VAR 0 5
49274: PUSH
49275: LD_VAR 0 8
49279: PPUSH
49280: CALL_OW 255
49284: NONEQUAL
49285: OR
49286: IFFALSE 49315
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49288: LD_ADDR_EXP 146
49292: PUSH
49293: LD_EXP 146
49297: PPUSH
49298: LD_VAR 0 8
49302: PPUSH
49303: LD_INT 0
49305: PPUSH
49306: CALL_OW 1
49310: ST_TO_ADDR
// exit ;
49311: POP
49312: POP
49313: GO 49846
// end ; x := list [ i ] [ 3 ] ;
49315: LD_ADDR_VAR 0 6
49319: PUSH
49320: LD_VAR 0 3
49324: PUSH
49325: LD_VAR 0 1
49329: ARRAY
49330: PUSH
49331: LD_INT 3
49333: ARRAY
49334: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49335: LD_ADDR_VAR 0 7
49339: PUSH
49340: LD_VAR 0 3
49344: PUSH
49345: LD_VAR 0 1
49349: ARRAY
49350: PUSH
49351: LD_INT 4
49353: ARRAY
49354: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49355: LD_ADDR_VAR 0 9
49359: PUSH
49360: LD_VAR 0 6
49364: PPUSH
49365: LD_VAR 0 7
49369: PPUSH
49370: LD_INT 16
49372: PPUSH
49373: CALL 95280 0 3
49377: ST_TO_ADDR
// if not cratesNearbyPoint then
49378: LD_VAR 0 9
49382: NOT
49383: IFFALSE 49389
// exit ;
49385: POP
49386: POP
49387: GO 49846
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49389: LD_ADDR_VAR 0 4
49393: PUSH
49394: LD_INT 22
49396: PUSH
49397: LD_VAR 0 5
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: LD_INT 60
49411: PUSH
49412: EMPTY
49413: LIST
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 91
49421: PUSH
49422: LD_VAR 0 8
49426: PUSH
49427: LD_INT 6
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 25
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 25
49450: PUSH
49451: LD_INT 16
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: LIST
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: PPUSH
49469: CALL_OW 69
49473: PUSH
49474: LD_VAR 0 8
49478: PPUSH
49479: CALL_OW 313
49483: PPUSH
49484: LD_INT 3
49486: PUSH
49487: LD_INT 60
49489: PUSH
49490: EMPTY
49491: LIST
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: LD_INT 25
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 25
49512: PUSH
49513: LD_INT 16
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PPUSH
49529: CALL_OW 72
49533: UNION
49534: ST_TO_ADDR
// if tmp then
49535: LD_VAR 0 4
49539: IFFALSE 49619
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49541: LD_ADDR_VAR 0 4
49545: PUSH
49546: LD_VAR 0 4
49550: PPUSH
49551: LD_INT 3
49553: PPUSH
49554: CALL 93243 0 2
49558: ST_TO_ADDR
// for j in tmp do
49559: LD_ADDR_VAR 0 2
49563: PUSH
49564: LD_VAR 0 4
49568: PUSH
49569: FOR_IN
49570: IFFALSE 49613
// begin if IsInUnit ( j ) then
49572: LD_VAR 0 2
49576: PPUSH
49577: CALL_OW 310
49581: IFFALSE 49592
// ComExit ( j ) ;
49583: LD_VAR 0 2
49587: PPUSH
49588: CALL 93326 0 1
// AddComCollect ( j , x , y ) ;
49592: LD_VAR 0 2
49596: PPUSH
49597: LD_VAR 0 6
49601: PPUSH
49602: LD_VAR 0 7
49606: PPUSH
49607: CALL_OW 177
// end ;
49611: GO 49569
49613: POP
49614: POP
// exit ;
49615: POP
49616: POP
49617: GO 49846
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
49619: LD_ADDR_VAR 0 4
49623: PUSH
49624: LD_INT 22
49626: PUSH
49627: LD_VAR 0 5
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 91
49638: PUSH
49639: LD_VAR 0 8
49643: PUSH
49644: LD_INT 8
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 34
49657: PUSH
49658: LD_INT 12
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 34
49667: PUSH
49668: LD_INT 51
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 34
49677: PUSH
49678: LD_INT 32
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 34
49687: PUSH
49688: LD_INT 89
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: PPUSH
49707: CALL_OW 69
49711: ST_TO_ADDR
// if tmp then
49712: LD_VAR 0 4
49716: IFFALSE 49842
// begin for j in tmp do
49718: LD_ADDR_VAR 0 2
49722: PUSH
49723: LD_VAR 0 4
49727: PUSH
49728: FOR_IN
49729: IFFALSE 49840
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
49731: LD_VAR 0 2
49735: PPUSH
49736: CALL_OW 262
49740: PUSH
49741: LD_INT 3
49743: EQUAL
49744: PUSH
49745: LD_VAR 0 2
49749: PPUSH
49750: CALL_OW 261
49754: PUSH
49755: LD_INT 20
49757: GREATER
49758: OR
49759: PUSH
49760: LD_VAR 0 2
49764: PPUSH
49765: CALL_OW 314
49769: NOT
49770: AND
49771: PUSH
49772: LD_VAR 0 2
49776: PPUSH
49777: CALL_OW 263
49781: PUSH
49782: LD_INT 1
49784: NONEQUAL
49785: PUSH
49786: LD_VAR 0 2
49790: PPUSH
49791: CALL_OW 311
49795: OR
49796: AND
49797: IFFALSE 49838
// begin ComCollect ( j , x , y ) ;
49799: LD_VAR 0 2
49803: PPUSH
49804: LD_VAR 0 6
49808: PPUSH
49809: LD_VAR 0 7
49813: PPUSH
49814: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
49818: LD_VAR 0 2
49822: PPUSH
49823: LD_VAR 0 8
49827: PPUSH
49828: CALL_OW 172
// exit ;
49832: POP
49833: POP
49834: POP
49835: POP
49836: GO 49846
// end ;
49838: GO 49728
49840: POP
49841: POP
// end ; end ;
49842: GO 49217
49844: POP
49845: POP
// end ; end_of_file
49846: PPOPN 9
49848: END
// export function SOS_UnitDestroyed ( un ) ; begin
49849: LD_INT 0
49851: PPUSH
// ComRadiation ( un ) ;
49852: LD_VAR 0 1
49856: PPUSH
49857: CALL 50838 0 1
// end ;
49861: LD_VAR 0 2
49865: RET
// export function SOS_UnitKamikazed ( un ) ; begin
49866: LD_INT 0
49868: PPUSH
// ComRadiation ( un ) ;
49869: LD_VAR 0 1
49873: PPUSH
49874: CALL 50838 0 1
// end ;
49878: LD_VAR 0 2
49882: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
49883: LD_INT 0
49885: PPUSH
// end ;
49886: LD_VAR 0 4
49890: RET
// export function SOS_Command ( cmd ) ; begin
49891: LD_INT 0
49893: PPUSH
// end ;
49894: LD_VAR 0 2
49898: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
49899: LD_INT 0
49901: PPUSH
// end ;
49902: LD_VAR 0 6
49906: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
49907: LD_INT 0
49909: PPUSH
49910: PPUSH
49911: PPUSH
49912: PPUSH
49913: PPUSH
// if not vehicle or not factory then
49914: LD_VAR 0 1
49918: NOT
49919: PUSH
49920: LD_VAR 0 2
49924: NOT
49925: OR
49926: IFFALSE 49930
// exit ;
49928: GO 50429
// if not factoryWaypoints then
49930: LD_EXP 145
49934: NOT
49935: IFFALSE 49939
// exit ;
49937: GO 50429
// for i := 1 to Count ( factoryWaypoints ) do
49939: LD_ADDR_VAR 0 4
49943: PUSH
49944: DOUBLE
49945: LD_INT 1
49947: DEC
49948: ST_TO_ADDR
49949: LD_EXP 145
49953: PPUSH
49954: CALL 57319 0 1
49958: PUSH
49959: FOR_TO
49960: IFFALSE 50427
// if factoryWaypoints [ i ] [ 2 ] = factory then
49962: LD_EXP 145
49966: PUSH
49967: LD_VAR 0 4
49971: ARRAY
49972: PUSH
49973: LD_INT 2
49975: ARRAY
49976: PUSH
49977: LD_VAR 0 2
49981: EQUAL
49982: IFFALSE 50425
// begin if GetControl ( vehicle ) = control_manual then
49984: LD_VAR 0 1
49988: PPUSH
49989: CALL_OW 263
49993: PUSH
49994: LD_INT 1
49996: EQUAL
49997: IFFALSE 50308
// begin driver := IsDrivenBy ( vehicle ) ;
49999: LD_ADDR_VAR 0 6
50003: PUSH
50004: LD_VAR 0 1
50008: PPUSH
50009: CALL_OW 311
50013: ST_TO_ADDR
// tag := GetTag ( driver ) ;
50014: LD_ADDR_VAR 0 5
50018: PUSH
50019: LD_VAR 0 6
50023: PPUSH
50024: CALL_OW 110
50028: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
50029: LD_VAR 0 5
50033: PUSH
50034: LD_INT 501
50036: EQUAL
50037: PUSH
50038: LD_VAR 0 1
50042: PPUSH
50043: CALL_OW 110
50047: PUSH
50048: LD_INT 501
50050: EQUAL
50051: OR
50052: IFFALSE 50058
// exit ;
50054: POP
50055: POP
50056: GO 50429
// if not HasTask ( driver ) then
50058: LD_VAR 0 6
50062: PPUSH
50063: CALL_OW 314
50067: NOT
50068: IFFALSE 50306
// begin SetTag ( driver , tDriver ) ;
50070: LD_VAR 0 6
50074: PPUSH
50075: LD_INT 501
50077: PPUSH
50078: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
50082: LD_VAR 0 1
50086: PPUSH
50087: LD_INT 501
50089: PPUSH
50090: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50094: LD_ADDR_VAR 0 7
50098: PUSH
50099: LD_EXP 145
50103: PUSH
50104: LD_VAR 0 4
50108: ARRAY
50109: PUSH
50110: LD_INT 3
50112: ARRAY
50113: PPUSH
50114: LD_EXP 145
50118: PUSH
50119: LD_VAR 0 4
50123: ARRAY
50124: PUSH
50125: LD_INT 4
50127: ARRAY
50128: PPUSH
50129: CALL_OW 428
50133: ST_TO_ADDR
// if hex then
50134: LD_VAR 0 7
50138: IFFALSE 50156
// ComMoveUnit ( driver , hex ) else
50140: LD_VAR 0 6
50144: PPUSH
50145: LD_VAR 0 7
50149: PPUSH
50150: CALL_OW 112
50154: GO 50195
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50156: LD_VAR 0 6
50160: PPUSH
50161: LD_EXP 145
50165: PUSH
50166: LD_VAR 0 4
50170: ARRAY
50171: PUSH
50172: LD_INT 3
50174: ARRAY
50175: PPUSH
50176: LD_EXP 145
50180: PUSH
50181: LD_VAR 0 4
50185: ARRAY
50186: PUSH
50187: LD_INT 4
50189: ARRAY
50190: PPUSH
50191: CALL_OW 111
// AddComExitVehicle ( driver ) ;
50195: LD_VAR 0 6
50199: PPUSH
50200: CALL_OW 181
// if Multiplayer then
50204: LD_OWVAR 4
50208: IFFALSE 50257
// begin repeat wait ( 10 ) ;
50210: LD_INT 10
50212: PPUSH
50213: CALL_OW 67
// until not IsInUnit ( driver ) ;
50217: LD_VAR 0 6
50221: PPUSH
50222: CALL_OW 310
50226: NOT
50227: IFFALSE 50210
// if not HasTask ( driver ) then
50229: LD_VAR 0 6
50233: PPUSH
50234: CALL_OW 314
50238: NOT
50239: IFFALSE 50255
// ComEnterUnit ( driver , factory ) ;
50241: LD_VAR 0 6
50245: PPUSH
50246: LD_VAR 0 2
50250: PPUSH
50251: CALL_OW 120
// end else
50255: GO 50271
// AddComEnterUnit ( driver , factory ) ;
50257: LD_VAR 0 6
50261: PPUSH
50262: LD_VAR 0 2
50266: PPUSH
50267: CALL_OW 180
// wait ( 0 0$1 ) ;
50271: LD_INT 35
50273: PPUSH
50274: CALL_OW 67
// SetTag ( driver , tag ) ;
50278: LD_VAR 0 6
50282: PPUSH
50283: LD_VAR 0 5
50287: PPUSH
50288: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
50292: LD_VAR 0 1
50296: PPUSH
50297: LD_INT 0
50299: PPUSH
50300: CALL_OW 109
// break ;
50304: GO 50427
// end ; end else
50306: GO 50425
// if GetControl ( vehicle ) = control_remote then
50308: LD_VAR 0 1
50312: PPUSH
50313: CALL_OW 263
50317: PUSH
50318: LD_INT 2
50320: EQUAL
50321: IFFALSE 50384
// begin wait ( 0 0$2 ) ;
50323: LD_INT 70
50325: PPUSH
50326: CALL_OW 67
// if Connect ( vehicle ) then
50330: LD_VAR 0 1
50334: PPUSH
50335: CALL 63525 0 1
50339: IFFALSE 50380
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50341: LD_VAR 0 1
50345: PPUSH
50346: LD_EXP 145
50350: PUSH
50351: LD_VAR 0 4
50355: ARRAY
50356: PUSH
50357: LD_INT 3
50359: ARRAY
50360: PPUSH
50361: LD_EXP 145
50365: PUSH
50366: LD_VAR 0 4
50370: ARRAY
50371: PUSH
50372: LD_INT 4
50374: ARRAY
50375: PPUSH
50376: CALL_OW 171
// break ;
50380: GO 50427
// end else
50382: GO 50425
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50384: LD_VAR 0 1
50388: PPUSH
50389: LD_EXP 145
50393: PUSH
50394: LD_VAR 0 4
50398: ARRAY
50399: PUSH
50400: LD_INT 3
50402: ARRAY
50403: PPUSH
50404: LD_EXP 145
50408: PUSH
50409: LD_VAR 0 4
50413: ARRAY
50414: PUSH
50415: LD_INT 4
50417: ARRAY
50418: PPUSH
50419: CALL_OW 171
// break ;
50423: GO 50427
// end ; end ;
50425: GO 49959
50427: POP
50428: POP
// end ;
50429: LD_VAR 0 3
50433: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50434: LD_INT 0
50436: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50437: LD_VAR 0 1
50441: PUSH
50442: LD_INT 250
50444: EQUAL
50445: PUSH
50446: LD_VAR 0 2
50450: PPUSH
50451: CALL_OW 264
50455: PUSH
50456: LD_INT 81
50458: EQUAL
50459: AND
50460: IFFALSE 50481
// MinerPlaceMine ( unit , x , y ) ;
50462: LD_VAR 0 2
50466: PPUSH
50467: LD_VAR 0 4
50471: PPUSH
50472: LD_VAR 0 5
50476: PPUSH
50477: CALL 53573 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50481: LD_VAR 0 1
50485: PUSH
50486: LD_INT 251
50488: EQUAL
50489: PUSH
50490: LD_VAR 0 2
50494: PPUSH
50495: CALL_OW 264
50499: PUSH
50500: LD_INT 81
50502: EQUAL
50503: AND
50504: IFFALSE 50525
// MinerDetonateMine ( unit , x , y ) ;
50506: LD_VAR 0 2
50510: PPUSH
50511: LD_VAR 0 4
50515: PPUSH
50516: LD_VAR 0 5
50520: PPUSH
50521: CALL 53848 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
50525: LD_VAR 0 1
50529: PUSH
50530: LD_INT 252
50532: EQUAL
50533: PUSH
50534: LD_VAR 0 2
50538: PPUSH
50539: CALL_OW 264
50543: PUSH
50544: LD_INT 81
50546: EQUAL
50547: AND
50548: IFFALSE 50569
// MinerCreateMinefield ( unit , x , y ) ;
50550: LD_VAR 0 2
50554: PPUSH
50555: LD_VAR 0 4
50559: PPUSH
50560: LD_VAR 0 5
50564: PPUSH
50565: CALL 54265 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
50569: LD_VAR 0 1
50573: PUSH
50574: LD_INT 253
50576: EQUAL
50577: PUSH
50578: LD_VAR 0 2
50582: PPUSH
50583: CALL_OW 257
50587: PUSH
50588: LD_INT 5
50590: EQUAL
50591: AND
50592: IFFALSE 50613
// ComBinocular ( unit , x , y ) ;
50594: LD_VAR 0 2
50598: PPUSH
50599: LD_VAR 0 4
50603: PPUSH
50604: LD_VAR 0 5
50608: PPUSH
50609: CALL 54634 0 3
// if selectedUnit then
50613: LD_VAR 0 3
50617: IFFALSE 50673
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
50619: LD_VAR 0 1
50623: PUSH
50624: LD_INT 254
50626: EQUAL
50627: PUSH
50628: LD_VAR 0 2
50632: PPUSH
50633: CALL_OW 264
50637: PUSH
50638: LD_INT 99
50640: EQUAL
50641: AND
50642: PUSH
50643: LD_VAR 0 3
50647: PPUSH
50648: CALL_OW 263
50652: PUSH
50653: LD_INT 3
50655: EQUAL
50656: AND
50657: IFFALSE 50673
// HackDestroyVehicle ( unit , selectedUnit ) ;
50659: LD_VAR 0 2
50663: PPUSH
50664: LD_VAR 0 3
50668: PPUSH
50669: CALL 52937 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
50673: LD_VAR 0 1
50677: PUSH
50678: LD_INT 255
50680: EQUAL
50681: PUSH
50682: LD_VAR 0 2
50686: PPUSH
50687: CALL_OW 264
50691: PUSH
50692: LD_INT 14
50694: PUSH
50695: LD_INT 53
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: IN
50702: AND
50703: PUSH
50704: LD_VAR 0 4
50708: PPUSH
50709: LD_VAR 0 5
50713: PPUSH
50714: CALL_OW 488
50718: AND
50719: IFFALSE 50743
// CutTreeXYR ( unit , x , y , 12 ) ;
50721: LD_VAR 0 2
50725: PPUSH
50726: LD_VAR 0 4
50730: PPUSH
50731: LD_VAR 0 5
50735: PPUSH
50736: LD_INT 12
50738: PPUSH
50739: CALL 50934 0 4
// if cmd = 256 then
50743: LD_VAR 0 1
50747: PUSH
50748: LD_INT 256
50750: EQUAL
50751: IFFALSE 50772
// SetFactoryWaypoint ( unit , x , y ) ;
50753: LD_VAR 0 2
50757: PPUSH
50758: LD_VAR 0 4
50762: PPUSH
50763: LD_VAR 0 5
50767: PPUSH
50768: CALL 48410 0 3
// if cmd = 257 then
50772: LD_VAR 0 1
50776: PUSH
50777: LD_INT 257
50779: EQUAL
50780: IFFALSE 50801
// SetWarehouseGatheringPoint ( unit , x , y ) ;
50782: LD_VAR 0 2
50786: PPUSH
50787: LD_VAR 0 4
50791: PPUSH
50792: LD_VAR 0 5
50796: PPUSH
50797: CALL 48900 0 3
// if cmd = 258 then
50801: LD_VAR 0 1
50805: PUSH
50806: LD_INT 258
50808: EQUAL
50809: IFFALSE 50833
// BurnTreeXYR ( unit , x , y , 8 ) ;
50811: LD_VAR 0 2
50815: PPUSH
50816: LD_VAR 0 4
50820: PPUSH
50821: LD_VAR 0 5
50825: PPUSH
50826: LD_INT 8
50828: PPUSH
50829: CALL 51328 0 4
// end ;
50833: LD_VAR 0 6
50837: RET
// export function ComRadiation ( un ) ; var eff ; begin
50838: LD_INT 0
50840: PPUSH
50841: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
50842: LD_VAR 0 1
50846: PPUSH
50847: CALL_OW 264
50851: PUSH
50852: LD_INT 91
50854: NONEQUAL
50855: IFFALSE 50859
// exit ;
50857: GO 50929
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
50859: LD_INT 68
50861: PPUSH
50862: LD_VAR 0 1
50866: PPUSH
50867: CALL_OW 255
50871: PPUSH
50872: CALL_OW 321
50876: PUSH
50877: LD_INT 2
50879: EQUAL
50880: IFFALSE 50892
// eff := 70 else
50882: LD_ADDR_VAR 0 3
50886: PUSH
50887: LD_INT 70
50889: ST_TO_ADDR
50890: GO 50900
// eff := 30 ;
50892: LD_ADDR_VAR 0 3
50896: PUSH
50897: LD_INT 30
50899: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
50900: LD_VAR 0 1
50904: PPUSH
50905: CALL_OW 250
50909: PPUSH
50910: LD_VAR 0 1
50914: PPUSH
50915: CALL_OW 251
50919: PPUSH
50920: LD_VAR 0 3
50924: PPUSH
50925: CALL_OW 495
// end ;
50929: LD_VAR 0 2
50933: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
50934: LD_INT 0
50936: PPUSH
50937: PPUSH
50938: PPUSH
50939: PPUSH
50940: PPUSH
50941: PPUSH
50942: PPUSH
50943: PPUSH
50944: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
50945: LD_VAR 0 1
50949: PPUSH
50950: CALL_OW 302
50954: NOT
50955: PUSH
50956: LD_VAR 0 2
50960: PPUSH
50961: LD_VAR 0 3
50965: PPUSH
50966: CALL_OW 488
50970: NOT
50971: OR
50972: PUSH
50973: LD_VAR 0 4
50977: NOT
50978: OR
50979: IFFALSE 50983
// exit ;
50981: GO 51323
// list := [ ] ;
50983: LD_ADDR_VAR 0 13
50987: PUSH
50988: EMPTY
50989: ST_TO_ADDR
// if x - r < 0 then
50990: LD_VAR 0 2
50994: PUSH
50995: LD_VAR 0 4
50999: MINUS
51000: PUSH
51001: LD_INT 0
51003: LESS
51004: IFFALSE 51016
// min_x := 0 else
51006: LD_ADDR_VAR 0 7
51010: PUSH
51011: LD_INT 0
51013: ST_TO_ADDR
51014: GO 51032
// min_x := x - r ;
51016: LD_ADDR_VAR 0 7
51020: PUSH
51021: LD_VAR 0 2
51025: PUSH
51026: LD_VAR 0 4
51030: MINUS
51031: ST_TO_ADDR
// if y - r < 0 then
51032: LD_VAR 0 3
51036: PUSH
51037: LD_VAR 0 4
51041: MINUS
51042: PUSH
51043: LD_INT 0
51045: LESS
51046: IFFALSE 51058
// min_y := 0 else
51048: LD_ADDR_VAR 0 8
51052: PUSH
51053: LD_INT 0
51055: ST_TO_ADDR
51056: GO 51074
// min_y := y - r ;
51058: LD_ADDR_VAR 0 8
51062: PUSH
51063: LD_VAR 0 3
51067: PUSH
51068: LD_VAR 0 4
51072: MINUS
51073: ST_TO_ADDR
// max_x := x + r ;
51074: LD_ADDR_VAR 0 9
51078: PUSH
51079: LD_VAR 0 2
51083: PUSH
51084: LD_VAR 0 4
51088: PLUS
51089: ST_TO_ADDR
// max_y := y + r ;
51090: LD_ADDR_VAR 0 10
51094: PUSH
51095: LD_VAR 0 3
51099: PUSH
51100: LD_VAR 0 4
51104: PLUS
51105: ST_TO_ADDR
// for _x = min_x to max_x do
51106: LD_ADDR_VAR 0 11
51110: PUSH
51111: DOUBLE
51112: LD_VAR 0 7
51116: DEC
51117: ST_TO_ADDR
51118: LD_VAR 0 9
51122: PUSH
51123: FOR_TO
51124: IFFALSE 51241
// for _y = min_y to max_y do
51126: LD_ADDR_VAR 0 12
51130: PUSH
51131: DOUBLE
51132: LD_VAR 0 8
51136: DEC
51137: ST_TO_ADDR
51138: LD_VAR 0 10
51142: PUSH
51143: FOR_TO
51144: IFFALSE 51237
// begin if not ValidHex ( _x , _y ) then
51146: LD_VAR 0 11
51150: PPUSH
51151: LD_VAR 0 12
51155: PPUSH
51156: CALL_OW 488
51160: NOT
51161: IFFALSE 51165
// continue ;
51163: GO 51143
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51165: LD_VAR 0 11
51169: PPUSH
51170: LD_VAR 0 12
51174: PPUSH
51175: CALL_OW 351
51179: PUSH
51180: LD_VAR 0 11
51184: PPUSH
51185: LD_VAR 0 12
51189: PPUSH
51190: CALL_OW 554
51194: AND
51195: IFFALSE 51235
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51197: LD_ADDR_VAR 0 13
51201: PUSH
51202: LD_VAR 0 13
51206: PPUSH
51207: LD_VAR 0 13
51211: PUSH
51212: LD_INT 1
51214: PLUS
51215: PPUSH
51216: LD_VAR 0 11
51220: PUSH
51221: LD_VAR 0 12
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PPUSH
51230: CALL_OW 2
51234: ST_TO_ADDR
// end ;
51235: GO 51143
51237: POP
51238: POP
51239: GO 51123
51241: POP
51242: POP
// if not list then
51243: LD_VAR 0 13
51247: NOT
51248: IFFALSE 51252
// exit ;
51250: GO 51323
// for i in list do
51252: LD_ADDR_VAR 0 6
51256: PUSH
51257: LD_VAR 0 13
51261: PUSH
51262: FOR_IN
51263: IFFALSE 51321
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
51265: LD_VAR 0 1
51269: PPUSH
51270: LD_STRING M
51272: PUSH
51273: LD_VAR 0 6
51277: PUSH
51278: LD_INT 1
51280: ARRAY
51281: PUSH
51282: LD_VAR 0 6
51286: PUSH
51287: LD_INT 2
51289: ARRAY
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: PUSH
51312: EMPTY
51313: LIST
51314: PPUSH
51315: CALL_OW 447
51319: GO 51262
51321: POP
51322: POP
// end ;
51323: LD_VAR 0 5
51327: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
51328: LD_INT 0
51330: PPUSH
51331: PPUSH
51332: PPUSH
51333: PPUSH
51334: PPUSH
51335: PPUSH
51336: PPUSH
51337: PPUSH
51338: PPUSH
51339: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
51340: LD_VAR 0 1
51344: PPUSH
51345: CALL_OW 302
51349: NOT
51350: PUSH
51351: LD_VAR 0 2
51355: PPUSH
51356: LD_VAR 0 3
51360: PPUSH
51361: CALL_OW 488
51365: NOT
51366: OR
51367: PUSH
51368: LD_VAR 0 4
51372: NOT
51373: OR
51374: IFFALSE 51378
// exit ;
51376: GO 51891
// list := [ ] ;
51378: LD_ADDR_VAR 0 13
51382: PUSH
51383: EMPTY
51384: ST_TO_ADDR
// if x - r < 0 then
51385: LD_VAR 0 2
51389: PUSH
51390: LD_VAR 0 4
51394: MINUS
51395: PUSH
51396: LD_INT 0
51398: LESS
51399: IFFALSE 51411
// min_x := 0 else
51401: LD_ADDR_VAR 0 7
51405: PUSH
51406: LD_INT 0
51408: ST_TO_ADDR
51409: GO 51427
// min_x := x - r ;
51411: LD_ADDR_VAR 0 7
51415: PUSH
51416: LD_VAR 0 2
51420: PUSH
51421: LD_VAR 0 4
51425: MINUS
51426: ST_TO_ADDR
// if y - r < 0 then
51427: LD_VAR 0 3
51431: PUSH
51432: LD_VAR 0 4
51436: MINUS
51437: PUSH
51438: LD_INT 0
51440: LESS
51441: IFFALSE 51453
// min_y := 0 else
51443: LD_ADDR_VAR 0 8
51447: PUSH
51448: LD_INT 0
51450: ST_TO_ADDR
51451: GO 51469
// min_y := y - r ;
51453: LD_ADDR_VAR 0 8
51457: PUSH
51458: LD_VAR 0 3
51462: PUSH
51463: LD_VAR 0 4
51467: MINUS
51468: ST_TO_ADDR
// max_x := x + r ;
51469: LD_ADDR_VAR 0 9
51473: PUSH
51474: LD_VAR 0 2
51478: PUSH
51479: LD_VAR 0 4
51483: PLUS
51484: ST_TO_ADDR
// max_y := y + r ;
51485: LD_ADDR_VAR 0 10
51489: PUSH
51490: LD_VAR 0 3
51494: PUSH
51495: LD_VAR 0 4
51499: PLUS
51500: ST_TO_ADDR
// for _x = min_x to max_x do
51501: LD_ADDR_VAR 0 11
51505: PUSH
51506: DOUBLE
51507: LD_VAR 0 7
51511: DEC
51512: ST_TO_ADDR
51513: LD_VAR 0 9
51517: PUSH
51518: FOR_TO
51519: IFFALSE 51636
// for _y = min_y to max_y do
51521: LD_ADDR_VAR 0 12
51525: PUSH
51526: DOUBLE
51527: LD_VAR 0 8
51531: DEC
51532: ST_TO_ADDR
51533: LD_VAR 0 10
51537: PUSH
51538: FOR_TO
51539: IFFALSE 51632
// begin if not ValidHex ( _x , _y ) then
51541: LD_VAR 0 11
51545: PPUSH
51546: LD_VAR 0 12
51550: PPUSH
51551: CALL_OW 488
51555: NOT
51556: IFFALSE 51560
// continue ;
51558: GO 51538
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51560: LD_VAR 0 11
51564: PPUSH
51565: LD_VAR 0 12
51569: PPUSH
51570: CALL_OW 351
51574: PUSH
51575: LD_VAR 0 11
51579: PPUSH
51580: LD_VAR 0 12
51584: PPUSH
51585: CALL_OW 554
51589: AND
51590: IFFALSE 51630
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51592: LD_ADDR_VAR 0 13
51596: PUSH
51597: LD_VAR 0 13
51601: PPUSH
51602: LD_VAR 0 13
51606: PUSH
51607: LD_INT 1
51609: PLUS
51610: PPUSH
51611: LD_VAR 0 11
51615: PUSH
51616: LD_VAR 0 12
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PPUSH
51625: CALL_OW 2
51629: ST_TO_ADDR
// end ;
51630: GO 51538
51632: POP
51633: POP
51634: GO 51518
51636: POP
51637: POP
// if not list then
51638: LD_VAR 0 13
51642: NOT
51643: IFFALSE 51647
// exit ;
51645: GO 51891
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
51647: LD_ADDR_VAR 0 13
51651: PUSH
51652: LD_VAR 0 1
51656: PPUSH
51657: LD_VAR 0 13
51661: PPUSH
51662: LD_INT 1
51664: PPUSH
51665: LD_INT 1
51667: PPUSH
51668: CALL 60667 0 4
51672: ST_TO_ADDR
// ComStop ( flame ) ;
51673: LD_VAR 0 1
51677: PPUSH
51678: CALL_OW 141
// for i in list do
51682: LD_ADDR_VAR 0 6
51686: PUSH
51687: LD_VAR 0 13
51691: PUSH
51692: FOR_IN
51693: IFFALSE 51724
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
51695: LD_VAR 0 1
51699: PPUSH
51700: LD_VAR 0 6
51704: PUSH
51705: LD_INT 1
51707: ARRAY
51708: PPUSH
51709: LD_VAR 0 6
51713: PUSH
51714: LD_INT 2
51716: ARRAY
51717: PPUSH
51718: CALL_OW 176
51722: GO 51692
51724: POP
51725: POP
// repeat wait ( 0 0$1 ) ;
51726: LD_INT 35
51728: PPUSH
51729: CALL_OW 67
// task := GetTaskList ( flame ) ;
51733: LD_ADDR_VAR 0 14
51737: PUSH
51738: LD_VAR 0 1
51742: PPUSH
51743: CALL_OW 437
51747: ST_TO_ADDR
// if not task then
51748: LD_VAR 0 14
51752: NOT
51753: IFFALSE 51757
// exit ;
51755: GO 51891
// if task [ 1 ] [ 1 ] <> | then
51757: LD_VAR 0 14
51761: PUSH
51762: LD_INT 1
51764: ARRAY
51765: PUSH
51766: LD_INT 1
51768: ARRAY
51769: PUSH
51770: LD_STRING |
51772: NONEQUAL
51773: IFFALSE 51777
// exit ;
51775: GO 51891
// _x := task [ 1 ] [ 2 ] ;
51777: LD_ADDR_VAR 0 11
51781: PUSH
51782: LD_VAR 0 14
51786: PUSH
51787: LD_INT 1
51789: ARRAY
51790: PUSH
51791: LD_INT 2
51793: ARRAY
51794: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
51795: LD_ADDR_VAR 0 12
51799: PUSH
51800: LD_VAR 0 14
51804: PUSH
51805: LD_INT 1
51807: ARRAY
51808: PUSH
51809: LD_INT 3
51811: ARRAY
51812: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
51813: LD_VAR 0 11
51817: PPUSH
51818: LD_VAR 0 12
51822: PPUSH
51823: CALL_OW 351
51827: NOT
51828: PUSH
51829: LD_VAR 0 11
51833: PPUSH
51834: LD_VAR 0 12
51838: PPUSH
51839: CALL_OW 554
51843: NOT
51844: OR
51845: IFFALSE 51879
// begin task := Delete ( task , 1 ) ;
51847: LD_ADDR_VAR 0 14
51851: PUSH
51852: LD_VAR 0 14
51856: PPUSH
51857: LD_INT 1
51859: PPUSH
51860: CALL_OW 3
51864: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
51865: LD_VAR 0 1
51869: PPUSH
51870: LD_VAR 0 14
51874: PPUSH
51875: CALL_OW 446
// end ; until not HasTask ( flame ) ;
51879: LD_VAR 0 1
51883: PPUSH
51884: CALL_OW 314
51888: NOT
51889: IFFALSE 51726
// end ;
51891: LD_VAR 0 5
51895: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
51896: LD_EXP 148
51900: NOT
51901: IFFALSE 51951
51903: GO 51905
51905: DISABLE
// begin initHack := true ;
51906: LD_ADDR_EXP 148
51910: PUSH
51911: LD_INT 1
51913: ST_TO_ADDR
// hackTanks := [ ] ;
51914: LD_ADDR_EXP 149
51918: PUSH
51919: EMPTY
51920: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
51921: LD_ADDR_EXP 150
51925: PUSH
51926: EMPTY
51927: ST_TO_ADDR
// hackLimit := 3 ;
51928: LD_ADDR_EXP 151
51932: PUSH
51933: LD_INT 3
51935: ST_TO_ADDR
// hackDist := 12 ;
51936: LD_ADDR_EXP 152
51940: PUSH
51941: LD_INT 12
51943: ST_TO_ADDR
// hackCounter := [ ] ;
51944: LD_ADDR_EXP 153
51948: PUSH
51949: EMPTY
51950: ST_TO_ADDR
// end ;
51951: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
51952: LD_EXP 148
51956: PUSH
51957: LD_INT 34
51959: PUSH
51960: LD_INT 99
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PPUSH
51967: CALL_OW 69
51971: AND
51972: IFFALSE 52225
51974: GO 51976
51976: DISABLE
51977: LD_INT 0
51979: PPUSH
51980: PPUSH
// begin enable ;
51981: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
51982: LD_ADDR_VAR 0 1
51986: PUSH
51987: LD_INT 34
51989: PUSH
51990: LD_INT 99
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PPUSH
51997: CALL_OW 69
52001: PUSH
52002: FOR_IN
52003: IFFALSE 52223
// begin if not i in hackTanks then
52005: LD_VAR 0 1
52009: PUSH
52010: LD_EXP 149
52014: IN
52015: NOT
52016: IFFALSE 52099
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
52018: LD_ADDR_EXP 149
52022: PUSH
52023: LD_EXP 149
52027: PPUSH
52028: LD_EXP 149
52032: PUSH
52033: LD_INT 1
52035: PLUS
52036: PPUSH
52037: LD_VAR 0 1
52041: PPUSH
52042: CALL_OW 1
52046: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
52047: LD_ADDR_EXP 150
52051: PUSH
52052: LD_EXP 150
52056: PPUSH
52057: LD_EXP 150
52061: PUSH
52062: LD_INT 1
52064: PLUS
52065: PPUSH
52066: EMPTY
52067: PPUSH
52068: CALL_OW 1
52072: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
52073: LD_ADDR_EXP 153
52077: PUSH
52078: LD_EXP 153
52082: PPUSH
52083: LD_EXP 153
52087: PUSH
52088: LD_INT 1
52090: PLUS
52091: PPUSH
52092: EMPTY
52093: PPUSH
52094: CALL_OW 1
52098: ST_TO_ADDR
// end ; if not IsOk ( i ) then
52099: LD_VAR 0 1
52103: PPUSH
52104: CALL_OW 302
52108: NOT
52109: IFFALSE 52122
// begin HackUnlinkAll ( i ) ;
52111: LD_VAR 0 1
52115: PPUSH
52116: CALL 52228 0 1
// continue ;
52120: GO 52002
// end ; HackCheckCapturedStatus ( i ) ;
52122: LD_VAR 0 1
52126: PPUSH
52127: CALL 52671 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
52131: LD_ADDR_VAR 0 2
52135: PUSH
52136: LD_INT 81
52138: PUSH
52139: LD_VAR 0 1
52143: PPUSH
52144: CALL_OW 255
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 33
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 91
52165: PUSH
52166: LD_VAR 0 1
52170: PUSH
52171: LD_EXP 152
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 50
52183: PUSH
52184: EMPTY
52185: LIST
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: PPUSH
52193: CALL_OW 69
52197: ST_TO_ADDR
// if not tmp then
52198: LD_VAR 0 2
52202: NOT
52203: IFFALSE 52207
// continue ;
52205: GO 52002
// HackLink ( i , tmp ) ;
52207: LD_VAR 0 1
52211: PPUSH
52212: LD_VAR 0 2
52216: PPUSH
52217: CALL 52364 0 2
// end ;
52221: GO 52002
52223: POP
52224: POP
// end ;
52225: PPOPN 2
52227: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
52228: LD_INT 0
52230: PPUSH
52231: PPUSH
52232: PPUSH
// if not hack in hackTanks then
52233: LD_VAR 0 1
52237: PUSH
52238: LD_EXP 149
52242: IN
52243: NOT
52244: IFFALSE 52248
// exit ;
52246: GO 52359
// index := GetElementIndex ( hackTanks , hack ) ;
52248: LD_ADDR_VAR 0 4
52252: PUSH
52253: LD_EXP 149
52257: PPUSH
52258: LD_VAR 0 1
52262: PPUSH
52263: CALL 59964 0 2
52267: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
52268: LD_EXP 150
52272: PUSH
52273: LD_VAR 0 4
52277: ARRAY
52278: IFFALSE 52359
// begin for i in hackTanksCaptured [ index ] do
52280: LD_ADDR_VAR 0 3
52284: PUSH
52285: LD_EXP 150
52289: PUSH
52290: LD_VAR 0 4
52294: ARRAY
52295: PUSH
52296: FOR_IN
52297: IFFALSE 52323
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
52299: LD_VAR 0 3
52303: PUSH
52304: LD_INT 1
52306: ARRAY
52307: PPUSH
52308: LD_VAR 0 3
52312: PUSH
52313: LD_INT 2
52315: ARRAY
52316: PPUSH
52317: CALL_OW 235
52321: GO 52296
52323: POP
52324: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
52325: LD_ADDR_EXP 150
52329: PUSH
52330: LD_EXP 150
52334: PPUSH
52335: LD_VAR 0 4
52339: PPUSH
52340: EMPTY
52341: PPUSH
52342: CALL_OW 1
52346: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
52347: LD_VAR 0 1
52351: PPUSH
52352: LD_INT 0
52354: PPUSH
52355: CALL_OW 505
// end ; end ;
52359: LD_VAR 0 2
52363: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
52364: LD_INT 0
52366: PPUSH
52367: PPUSH
52368: PPUSH
// if not hack in hackTanks or not vehicles then
52369: LD_VAR 0 1
52373: PUSH
52374: LD_EXP 149
52378: IN
52379: NOT
52380: PUSH
52381: LD_VAR 0 2
52385: NOT
52386: OR
52387: IFFALSE 52391
// exit ;
52389: GO 52666
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
52391: LD_ADDR_VAR 0 2
52395: PUSH
52396: LD_VAR 0 1
52400: PPUSH
52401: LD_VAR 0 2
52405: PPUSH
52406: LD_INT 1
52408: PPUSH
52409: LD_INT 1
52411: PPUSH
52412: CALL 60614 0 4
52416: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
52417: LD_ADDR_VAR 0 5
52421: PUSH
52422: LD_EXP 149
52426: PPUSH
52427: LD_VAR 0 1
52431: PPUSH
52432: CALL 59964 0 2
52436: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
52437: LD_EXP 150
52441: PUSH
52442: LD_VAR 0 5
52446: ARRAY
52447: PUSH
52448: LD_EXP 151
52452: LESS
52453: IFFALSE 52642
// begin for i := 1 to vehicles do
52455: LD_ADDR_VAR 0 4
52459: PUSH
52460: DOUBLE
52461: LD_INT 1
52463: DEC
52464: ST_TO_ADDR
52465: LD_VAR 0 2
52469: PUSH
52470: FOR_TO
52471: IFFALSE 52640
// begin if hackTanksCaptured [ index ] = hackLimit then
52473: LD_EXP 150
52477: PUSH
52478: LD_VAR 0 5
52482: ARRAY
52483: PUSH
52484: LD_EXP 151
52488: EQUAL
52489: IFFALSE 52493
// break ;
52491: GO 52640
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
52493: LD_ADDR_EXP 153
52497: PUSH
52498: LD_EXP 153
52502: PPUSH
52503: LD_VAR 0 5
52507: PPUSH
52508: LD_EXP 153
52512: PUSH
52513: LD_VAR 0 5
52517: ARRAY
52518: PUSH
52519: LD_INT 1
52521: PLUS
52522: PPUSH
52523: CALL_OW 1
52527: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
52528: LD_ADDR_EXP 150
52532: PUSH
52533: LD_EXP 150
52537: PPUSH
52538: LD_VAR 0 5
52542: PUSH
52543: LD_EXP 150
52547: PUSH
52548: LD_VAR 0 5
52552: ARRAY
52553: PUSH
52554: LD_INT 1
52556: PLUS
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PPUSH
52562: LD_VAR 0 2
52566: PUSH
52567: LD_VAR 0 4
52571: ARRAY
52572: PUSH
52573: LD_VAR 0 2
52577: PUSH
52578: LD_VAR 0 4
52582: ARRAY
52583: PPUSH
52584: CALL_OW 255
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PPUSH
52593: CALL 60179 0 3
52597: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
52598: LD_VAR 0 2
52602: PUSH
52603: LD_VAR 0 4
52607: ARRAY
52608: PPUSH
52609: LD_VAR 0 1
52613: PPUSH
52614: CALL_OW 255
52618: PPUSH
52619: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
52623: LD_VAR 0 2
52627: PUSH
52628: LD_VAR 0 4
52632: ARRAY
52633: PPUSH
52634: CALL_OW 141
// end ;
52638: GO 52470
52640: POP
52641: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52642: LD_VAR 0 1
52646: PPUSH
52647: LD_EXP 150
52651: PUSH
52652: LD_VAR 0 5
52656: ARRAY
52657: PUSH
52658: LD_INT 0
52660: PLUS
52661: PPUSH
52662: CALL_OW 505
// end ;
52666: LD_VAR 0 3
52670: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
52671: LD_INT 0
52673: PPUSH
52674: PPUSH
52675: PPUSH
52676: PPUSH
// if not hack in hackTanks then
52677: LD_VAR 0 1
52681: PUSH
52682: LD_EXP 149
52686: IN
52687: NOT
52688: IFFALSE 52692
// exit ;
52690: GO 52932
// index := GetElementIndex ( hackTanks , hack ) ;
52692: LD_ADDR_VAR 0 4
52696: PUSH
52697: LD_EXP 149
52701: PPUSH
52702: LD_VAR 0 1
52706: PPUSH
52707: CALL 59964 0 2
52711: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
52712: LD_ADDR_VAR 0 3
52716: PUSH
52717: DOUBLE
52718: LD_EXP 150
52722: PUSH
52723: LD_VAR 0 4
52727: ARRAY
52728: INC
52729: ST_TO_ADDR
52730: LD_INT 1
52732: PUSH
52733: FOR_DOWNTO
52734: IFFALSE 52906
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
52736: LD_ADDR_VAR 0 5
52740: PUSH
52741: LD_EXP 150
52745: PUSH
52746: LD_VAR 0 4
52750: ARRAY
52751: PUSH
52752: LD_VAR 0 3
52756: ARRAY
52757: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
52758: LD_VAR 0 5
52762: PUSH
52763: LD_INT 1
52765: ARRAY
52766: PPUSH
52767: CALL_OW 302
52771: NOT
52772: PUSH
52773: LD_VAR 0 5
52777: PUSH
52778: LD_INT 1
52780: ARRAY
52781: PPUSH
52782: CALL_OW 255
52786: PUSH
52787: LD_VAR 0 1
52791: PPUSH
52792: CALL_OW 255
52796: NONEQUAL
52797: OR
52798: IFFALSE 52904
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
52800: LD_VAR 0 5
52804: PUSH
52805: LD_INT 1
52807: ARRAY
52808: PPUSH
52809: CALL_OW 305
52813: PUSH
52814: LD_VAR 0 5
52818: PUSH
52819: LD_INT 1
52821: ARRAY
52822: PPUSH
52823: CALL_OW 255
52827: PUSH
52828: LD_VAR 0 1
52832: PPUSH
52833: CALL_OW 255
52837: EQUAL
52838: AND
52839: IFFALSE 52863
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
52841: LD_VAR 0 5
52845: PUSH
52846: LD_INT 1
52848: ARRAY
52849: PPUSH
52850: LD_VAR 0 5
52854: PUSH
52855: LD_INT 2
52857: ARRAY
52858: PPUSH
52859: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
52863: LD_ADDR_EXP 150
52867: PUSH
52868: LD_EXP 150
52872: PPUSH
52873: LD_VAR 0 4
52877: PPUSH
52878: LD_EXP 150
52882: PUSH
52883: LD_VAR 0 4
52887: ARRAY
52888: PPUSH
52889: LD_VAR 0 3
52893: PPUSH
52894: CALL_OW 3
52898: PPUSH
52899: CALL_OW 1
52903: ST_TO_ADDR
// end ; end ;
52904: GO 52733
52906: POP
52907: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52908: LD_VAR 0 1
52912: PPUSH
52913: LD_EXP 150
52917: PUSH
52918: LD_VAR 0 4
52922: ARRAY
52923: PUSH
52924: LD_INT 0
52926: PLUS
52927: PPUSH
52928: CALL_OW 505
// end ;
52932: LD_VAR 0 2
52936: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
52937: LD_INT 0
52939: PPUSH
52940: PPUSH
52941: PPUSH
52942: PPUSH
// if not hack in hackTanks then
52943: LD_VAR 0 1
52947: PUSH
52948: LD_EXP 149
52952: IN
52953: NOT
52954: IFFALSE 52958
// exit ;
52956: GO 53043
// index := GetElementIndex ( hackTanks , hack ) ;
52958: LD_ADDR_VAR 0 5
52962: PUSH
52963: LD_EXP 149
52967: PPUSH
52968: LD_VAR 0 1
52972: PPUSH
52973: CALL 59964 0 2
52977: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
52978: LD_ADDR_VAR 0 4
52982: PUSH
52983: DOUBLE
52984: LD_INT 1
52986: DEC
52987: ST_TO_ADDR
52988: LD_EXP 150
52992: PUSH
52993: LD_VAR 0 5
52997: ARRAY
52998: PUSH
52999: FOR_TO
53000: IFFALSE 53041
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
53002: LD_EXP 150
53006: PUSH
53007: LD_VAR 0 5
53011: ARRAY
53012: PUSH
53013: LD_VAR 0 4
53017: ARRAY
53018: PUSH
53019: LD_INT 1
53021: ARRAY
53022: PUSH
53023: LD_VAR 0 2
53027: EQUAL
53028: IFFALSE 53039
// KillUnit ( vehicle ) ;
53030: LD_VAR 0 2
53034: PPUSH
53035: CALL_OW 66
53039: GO 52999
53041: POP
53042: POP
// end ;
53043: LD_VAR 0 3
53047: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
53048: LD_EXP 154
53052: NOT
53053: IFFALSE 53088
53055: GO 53057
53057: DISABLE
// begin initMiner := true ;
53058: LD_ADDR_EXP 154
53062: PUSH
53063: LD_INT 1
53065: ST_TO_ADDR
// minersList := [ ] ;
53066: LD_ADDR_EXP 155
53070: PUSH
53071: EMPTY
53072: ST_TO_ADDR
// minerMinesList := [ ] ;
53073: LD_ADDR_EXP 156
53077: PUSH
53078: EMPTY
53079: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
53080: LD_ADDR_EXP 157
53084: PUSH
53085: LD_INT 5
53087: ST_TO_ADDR
// end ;
53088: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
53089: LD_EXP 154
53093: PUSH
53094: LD_INT 34
53096: PUSH
53097: LD_INT 81
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PPUSH
53104: CALL_OW 69
53108: AND
53109: IFFALSE 53570
53111: GO 53113
53113: DISABLE
53114: LD_INT 0
53116: PPUSH
53117: PPUSH
53118: PPUSH
53119: PPUSH
// begin enable ;
53120: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
53121: LD_ADDR_VAR 0 1
53125: PUSH
53126: LD_INT 34
53128: PUSH
53129: LD_INT 81
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PPUSH
53136: CALL_OW 69
53140: PUSH
53141: FOR_IN
53142: IFFALSE 53214
// begin if not i in minersList then
53144: LD_VAR 0 1
53148: PUSH
53149: LD_EXP 155
53153: IN
53154: NOT
53155: IFFALSE 53212
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
53157: LD_ADDR_EXP 155
53161: PUSH
53162: LD_EXP 155
53166: PPUSH
53167: LD_EXP 155
53171: PUSH
53172: LD_INT 1
53174: PLUS
53175: PPUSH
53176: LD_VAR 0 1
53180: PPUSH
53181: CALL_OW 1
53185: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53186: LD_ADDR_EXP 156
53190: PUSH
53191: LD_EXP 156
53195: PPUSH
53196: LD_EXP 156
53200: PUSH
53201: LD_INT 1
53203: PLUS
53204: PPUSH
53205: EMPTY
53206: PPUSH
53207: CALL_OW 1
53211: ST_TO_ADDR
// end end ;
53212: GO 53141
53214: POP
53215: POP
// for i := minerMinesList downto 1 do
53216: LD_ADDR_VAR 0 1
53220: PUSH
53221: DOUBLE
53222: LD_EXP 156
53226: INC
53227: ST_TO_ADDR
53228: LD_INT 1
53230: PUSH
53231: FOR_DOWNTO
53232: IFFALSE 53568
// begin if IsLive ( minersList [ i ] ) then
53234: LD_EXP 155
53238: PUSH
53239: LD_VAR 0 1
53243: ARRAY
53244: PPUSH
53245: CALL_OW 300
53249: IFFALSE 53277
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
53251: LD_EXP 155
53255: PUSH
53256: LD_VAR 0 1
53260: ARRAY
53261: PPUSH
53262: LD_EXP 156
53266: PUSH
53267: LD_VAR 0 1
53271: ARRAY
53272: PPUSH
53273: CALL_OW 505
// if not minerMinesList [ i ] then
53277: LD_EXP 156
53281: PUSH
53282: LD_VAR 0 1
53286: ARRAY
53287: NOT
53288: IFFALSE 53292
// continue ;
53290: GO 53231
// for j := minerMinesList [ i ] downto 1 do
53292: LD_ADDR_VAR 0 2
53296: PUSH
53297: DOUBLE
53298: LD_EXP 156
53302: PUSH
53303: LD_VAR 0 1
53307: ARRAY
53308: INC
53309: ST_TO_ADDR
53310: LD_INT 1
53312: PUSH
53313: FOR_DOWNTO
53314: IFFALSE 53564
// begin side := GetSide ( minersList [ i ] ) ;
53316: LD_ADDR_VAR 0 3
53320: PUSH
53321: LD_EXP 155
53325: PUSH
53326: LD_VAR 0 1
53330: ARRAY
53331: PPUSH
53332: CALL_OW 255
53336: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53337: LD_ADDR_VAR 0 4
53341: PUSH
53342: LD_EXP 156
53346: PUSH
53347: LD_VAR 0 1
53351: ARRAY
53352: PUSH
53353: LD_VAR 0 2
53357: ARRAY
53358: PUSH
53359: LD_INT 1
53361: ARRAY
53362: PPUSH
53363: LD_EXP 156
53367: PUSH
53368: LD_VAR 0 1
53372: ARRAY
53373: PUSH
53374: LD_VAR 0 2
53378: ARRAY
53379: PUSH
53380: LD_INT 2
53382: ARRAY
53383: PPUSH
53384: CALL_OW 428
53388: ST_TO_ADDR
// if not tmp then
53389: LD_VAR 0 4
53393: NOT
53394: IFFALSE 53398
// continue ;
53396: GO 53313
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
53398: LD_VAR 0 4
53402: PUSH
53403: LD_INT 81
53405: PUSH
53406: LD_VAR 0 3
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PPUSH
53415: CALL_OW 69
53419: IN
53420: PUSH
53421: LD_EXP 156
53425: PUSH
53426: LD_VAR 0 1
53430: ARRAY
53431: PUSH
53432: LD_VAR 0 2
53436: ARRAY
53437: PUSH
53438: LD_INT 1
53440: ARRAY
53441: PPUSH
53442: LD_EXP 156
53446: PUSH
53447: LD_VAR 0 1
53451: ARRAY
53452: PUSH
53453: LD_VAR 0 2
53457: ARRAY
53458: PUSH
53459: LD_INT 2
53461: ARRAY
53462: PPUSH
53463: CALL_OW 458
53467: AND
53468: IFFALSE 53562
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
53470: LD_EXP 156
53474: PUSH
53475: LD_VAR 0 1
53479: ARRAY
53480: PUSH
53481: LD_VAR 0 2
53485: ARRAY
53486: PUSH
53487: LD_INT 1
53489: ARRAY
53490: PPUSH
53491: LD_EXP 156
53495: PUSH
53496: LD_VAR 0 1
53500: ARRAY
53501: PUSH
53502: LD_VAR 0 2
53506: ARRAY
53507: PUSH
53508: LD_INT 2
53510: ARRAY
53511: PPUSH
53512: LD_VAR 0 3
53516: PPUSH
53517: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
53521: LD_ADDR_EXP 156
53525: PUSH
53526: LD_EXP 156
53530: PPUSH
53531: LD_VAR 0 1
53535: PPUSH
53536: LD_EXP 156
53540: PUSH
53541: LD_VAR 0 1
53545: ARRAY
53546: PPUSH
53547: LD_VAR 0 2
53551: PPUSH
53552: CALL_OW 3
53556: PPUSH
53557: CALL_OW 1
53561: ST_TO_ADDR
// end ; end ;
53562: GO 53313
53564: POP
53565: POP
// end ;
53566: GO 53231
53568: POP
53569: POP
// end ;
53570: PPOPN 4
53572: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
53573: LD_INT 0
53575: PPUSH
53576: PPUSH
// result := false ;
53577: LD_ADDR_VAR 0 4
53581: PUSH
53582: LD_INT 0
53584: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
53585: LD_VAR 0 1
53589: PPUSH
53590: CALL_OW 264
53594: PUSH
53595: LD_INT 81
53597: EQUAL
53598: NOT
53599: IFFALSE 53603
// exit ;
53601: GO 53843
// index := GetElementIndex ( minersList , unit ) ;
53603: LD_ADDR_VAR 0 5
53607: PUSH
53608: LD_EXP 155
53612: PPUSH
53613: LD_VAR 0 1
53617: PPUSH
53618: CALL 59964 0 2
53622: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
53623: LD_EXP 156
53627: PUSH
53628: LD_VAR 0 5
53632: ARRAY
53633: PUSH
53634: LD_EXP 157
53638: GREATEREQUAL
53639: IFFALSE 53643
// exit ;
53641: GO 53843
// ComMoveXY ( unit , x , y ) ;
53643: LD_VAR 0 1
53647: PPUSH
53648: LD_VAR 0 2
53652: PPUSH
53653: LD_VAR 0 3
53657: PPUSH
53658: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
53662: LD_INT 35
53664: PPUSH
53665: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
53669: LD_VAR 0 1
53673: PPUSH
53674: LD_VAR 0 2
53678: PPUSH
53679: LD_VAR 0 3
53683: PPUSH
53684: CALL 91725 0 3
53688: NOT
53689: PUSH
53690: LD_VAR 0 1
53694: PPUSH
53695: CALL_OW 314
53699: AND
53700: IFFALSE 53704
// exit ;
53702: GO 53843
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
53704: LD_VAR 0 2
53708: PPUSH
53709: LD_VAR 0 3
53713: PPUSH
53714: CALL_OW 428
53718: PUSH
53719: LD_VAR 0 1
53723: EQUAL
53724: PUSH
53725: LD_VAR 0 1
53729: PPUSH
53730: CALL_OW 314
53734: NOT
53735: AND
53736: IFFALSE 53662
// PlaySoundXY ( x , y , PlantMine ) ;
53738: LD_VAR 0 2
53742: PPUSH
53743: LD_VAR 0 3
53747: PPUSH
53748: LD_STRING PlantMine
53750: PPUSH
53751: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
53755: LD_VAR 0 2
53759: PPUSH
53760: LD_VAR 0 3
53764: PPUSH
53765: LD_VAR 0 1
53769: PPUSH
53770: CALL_OW 255
53774: PPUSH
53775: LD_INT 0
53777: PPUSH
53778: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
53782: LD_ADDR_EXP 156
53786: PUSH
53787: LD_EXP 156
53791: PPUSH
53792: LD_VAR 0 5
53796: PUSH
53797: LD_EXP 156
53801: PUSH
53802: LD_VAR 0 5
53806: ARRAY
53807: PUSH
53808: LD_INT 1
53810: PLUS
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PPUSH
53816: LD_VAR 0 2
53820: PUSH
53821: LD_VAR 0 3
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PPUSH
53830: CALL 60179 0 3
53834: ST_TO_ADDR
// result := true ;
53835: LD_ADDR_VAR 0 4
53839: PUSH
53840: LD_INT 1
53842: ST_TO_ADDR
// end ;
53843: LD_VAR 0 4
53847: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
53848: LD_INT 0
53850: PPUSH
53851: PPUSH
53852: PPUSH
// if not unit in minersList then
53853: LD_VAR 0 1
53857: PUSH
53858: LD_EXP 155
53862: IN
53863: NOT
53864: IFFALSE 53868
// exit ;
53866: GO 54260
// index := GetElementIndex ( minersList , unit ) ;
53868: LD_ADDR_VAR 0 6
53872: PUSH
53873: LD_EXP 155
53877: PPUSH
53878: LD_VAR 0 1
53882: PPUSH
53883: CALL 59964 0 2
53887: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
53888: LD_ADDR_VAR 0 5
53892: PUSH
53893: DOUBLE
53894: LD_EXP 156
53898: PUSH
53899: LD_VAR 0 6
53903: ARRAY
53904: INC
53905: ST_TO_ADDR
53906: LD_INT 1
53908: PUSH
53909: FOR_DOWNTO
53910: IFFALSE 54071
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
53912: LD_EXP 156
53916: PUSH
53917: LD_VAR 0 6
53921: ARRAY
53922: PUSH
53923: LD_VAR 0 5
53927: ARRAY
53928: PUSH
53929: LD_INT 1
53931: ARRAY
53932: PUSH
53933: LD_VAR 0 2
53937: EQUAL
53938: PUSH
53939: LD_EXP 156
53943: PUSH
53944: LD_VAR 0 6
53948: ARRAY
53949: PUSH
53950: LD_VAR 0 5
53954: ARRAY
53955: PUSH
53956: LD_INT 2
53958: ARRAY
53959: PUSH
53960: LD_VAR 0 3
53964: EQUAL
53965: AND
53966: IFFALSE 54069
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53968: LD_EXP 156
53972: PUSH
53973: LD_VAR 0 6
53977: ARRAY
53978: PUSH
53979: LD_VAR 0 5
53983: ARRAY
53984: PUSH
53985: LD_INT 1
53987: ARRAY
53988: PPUSH
53989: LD_EXP 156
53993: PUSH
53994: LD_VAR 0 6
53998: ARRAY
53999: PUSH
54000: LD_VAR 0 5
54004: ARRAY
54005: PUSH
54006: LD_INT 2
54008: ARRAY
54009: PPUSH
54010: LD_VAR 0 1
54014: PPUSH
54015: CALL_OW 255
54019: PPUSH
54020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54024: LD_ADDR_EXP 156
54028: PUSH
54029: LD_EXP 156
54033: PPUSH
54034: LD_VAR 0 6
54038: PPUSH
54039: LD_EXP 156
54043: PUSH
54044: LD_VAR 0 6
54048: ARRAY
54049: PPUSH
54050: LD_VAR 0 5
54054: PPUSH
54055: CALL_OW 3
54059: PPUSH
54060: CALL_OW 1
54064: ST_TO_ADDR
// exit ;
54065: POP
54066: POP
54067: GO 54260
// end ; end ;
54069: GO 53909
54071: POP
54072: POP
// for i := minerMinesList [ index ] downto 1 do
54073: LD_ADDR_VAR 0 5
54077: PUSH
54078: DOUBLE
54079: LD_EXP 156
54083: PUSH
54084: LD_VAR 0 6
54088: ARRAY
54089: INC
54090: ST_TO_ADDR
54091: LD_INT 1
54093: PUSH
54094: FOR_DOWNTO
54095: IFFALSE 54258
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
54097: LD_EXP 156
54101: PUSH
54102: LD_VAR 0 6
54106: ARRAY
54107: PUSH
54108: LD_VAR 0 5
54112: ARRAY
54113: PUSH
54114: LD_INT 1
54116: ARRAY
54117: PPUSH
54118: LD_EXP 156
54122: PUSH
54123: LD_VAR 0 6
54127: ARRAY
54128: PUSH
54129: LD_VAR 0 5
54133: ARRAY
54134: PUSH
54135: LD_INT 2
54137: ARRAY
54138: PPUSH
54139: LD_VAR 0 2
54143: PPUSH
54144: LD_VAR 0 3
54148: PPUSH
54149: CALL_OW 298
54153: PUSH
54154: LD_INT 6
54156: LESS
54157: IFFALSE 54256
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54159: LD_EXP 156
54163: PUSH
54164: LD_VAR 0 6
54168: ARRAY
54169: PUSH
54170: LD_VAR 0 5
54174: ARRAY
54175: PUSH
54176: LD_INT 1
54178: ARRAY
54179: PPUSH
54180: LD_EXP 156
54184: PUSH
54185: LD_VAR 0 6
54189: ARRAY
54190: PUSH
54191: LD_VAR 0 5
54195: ARRAY
54196: PUSH
54197: LD_INT 2
54199: ARRAY
54200: PPUSH
54201: LD_VAR 0 1
54205: PPUSH
54206: CALL_OW 255
54210: PPUSH
54211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54215: LD_ADDR_EXP 156
54219: PUSH
54220: LD_EXP 156
54224: PPUSH
54225: LD_VAR 0 6
54229: PPUSH
54230: LD_EXP 156
54234: PUSH
54235: LD_VAR 0 6
54239: ARRAY
54240: PPUSH
54241: LD_VAR 0 5
54245: PPUSH
54246: CALL_OW 3
54250: PPUSH
54251: CALL_OW 1
54255: ST_TO_ADDR
// end ; end ;
54256: GO 54094
54258: POP
54259: POP
// end ;
54260: LD_VAR 0 4
54264: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
54265: LD_INT 0
54267: PPUSH
54268: PPUSH
54269: PPUSH
54270: PPUSH
54271: PPUSH
54272: PPUSH
54273: PPUSH
54274: PPUSH
54275: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
54276: LD_VAR 0 1
54280: PPUSH
54281: CALL_OW 264
54285: PUSH
54286: LD_INT 81
54288: EQUAL
54289: NOT
54290: PUSH
54291: LD_VAR 0 1
54295: PUSH
54296: LD_EXP 155
54300: IN
54301: NOT
54302: OR
54303: IFFALSE 54307
// exit ;
54305: GO 54629
// index := GetElementIndex ( minersList , unit ) ;
54307: LD_ADDR_VAR 0 6
54311: PUSH
54312: LD_EXP 155
54316: PPUSH
54317: LD_VAR 0 1
54321: PPUSH
54322: CALL 59964 0 2
54326: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
54327: LD_ADDR_VAR 0 8
54331: PUSH
54332: LD_EXP 157
54336: PUSH
54337: LD_EXP 156
54341: PUSH
54342: LD_VAR 0 6
54346: ARRAY
54347: MINUS
54348: ST_TO_ADDR
// if not minesFreeAmount then
54349: LD_VAR 0 8
54353: NOT
54354: IFFALSE 54358
// exit ;
54356: GO 54629
// tmp := [ ] ;
54358: LD_ADDR_VAR 0 7
54362: PUSH
54363: EMPTY
54364: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
54365: LD_ADDR_VAR 0 5
54369: PUSH
54370: DOUBLE
54371: LD_INT 1
54373: DEC
54374: ST_TO_ADDR
54375: LD_VAR 0 8
54379: PUSH
54380: FOR_TO
54381: IFFALSE 54576
// begin _d := rand ( 0 , 5 ) ;
54383: LD_ADDR_VAR 0 11
54387: PUSH
54388: LD_INT 0
54390: PPUSH
54391: LD_INT 5
54393: PPUSH
54394: CALL_OW 12
54398: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
54399: LD_ADDR_VAR 0 12
54403: PUSH
54404: LD_INT 2
54406: PPUSH
54407: LD_INT 6
54409: PPUSH
54410: CALL_OW 12
54414: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
54415: LD_ADDR_VAR 0 9
54419: PUSH
54420: LD_VAR 0 2
54424: PPUSH
54425: LD_VAR 0 11
54429: PPUSH
54430: LD_VAR 0 12
54434: PPUSH
54435: CALL_OW 272
54439: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
54440: LD_ADDR_VAR 0 10
54444: PUSH
54445: LD_VAR 0 3
54449: PPUSH
54450: LD_VAR 0 11
54454: PPUSH
54455: LD_VAR 0 12
54459: PPUSH
54460: CALL_OW 273
54464: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
54465: LD_VAR 0 9
54469: PPUSH
54470: LD_VAR 0 10
54474: PPUSH
54475: CALL_OW 488
54479: PUSH
54480: LD_VAR 0 9
54484: PUSH
54485: LD_VAR 0 10
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_VAR 0 7
54498: IN
54499: NOT
54500: AND
54501: PUSH
54502: LD_VAR 0 9
54506: PPUSH
54507: LD_VAR 0 10
54511: PPUSH
54512: CALL_OW 458
54516: NOT
54517: AND
54518: IFFALSE 54560
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
54520: LD_ADDR_VAR 0 7
54524: PUSH
54525: LD_VAR 0 7
54529: PPUSH
54530: LD_VAR 0 7
54534: PUSH
54535: LD_INT 1
54537: PLUS
54538: PPUSH
54539: LD_VAR 0 9
54543: PUSH
54544: LD_VAR 0 10
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PPUSH
54553: CALL_OW 1
54557: ST_TO_ADDR
54558: GO 54574
// i := i - 1 ;
54560: LD_ADDR_VAR 0 5
54564: PUSH
54565: LD_VAR 0 5
54569: PUSH
54570: LD_INT 1
54572: MINUS
54573: ST_TO_ADDR
// end ;
54574: GO 54380
54576: POP
54577: POP
// for i in tmp do
54578: LD_ADDR_VAR 0 5
54582: PUSH
54583: LD_VAR 0 7
54587: PUSH
54588: FOR_IN
54589: IFFALSE 54627
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
54591: LD_VAR 0 1
54595: PPUSH
54596: LD_VAR 0 5
54600: PUSH
54601: LD_INT 1
54603: ARRAY
54604: PPUSH
54605: LD_VAR 0 5
54609: PUSH
54610: LD_INT 2
54612: ARRAY
54613: PPUSH
54614: CALL 53573 0 3
54618: NOT
54619: IFFALSE 54625
// exit ;
54621: POP
54622: POP
54623: GO 54629
54625: GO 54588
54627: POP
54628: POP
// end ;
54629: LD_VAR 0 4
54633: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
54634: LD_INT 0
54636: PPUSH
54637: PPUSH
54638: PPUSH
54639: PPUSH
54640: PPUSH
54641: PPUSH
54642: PPUSH
54643: PPUSH
54644: PPUSH
// if GetClass ( unit ) <> class_sniper then
54645: LD_VAR 0 1
54649: PPUSH
54650: CALL_OW 257
54654: PUSH
54655: LD_INT 5
54657: NONEQUAL
54658: IFFALSE 54662
// exit ;
54660: GO 55128
// dist := 8 ;
54662: LD_ADDR_VAR 0 5
54666: PUSH
54667: LD_INT 8
54669: ST_TO_ADDR
// viewRange := 12 ;
54670: LD_ADDR_VAR 0 8
54674: PUSH
54675: LD_INT 12
54677: ST_TO_ADDR
// side := GetSide ( unit ) ;
54678: LD_ADDR_VAR 0 6
54682: PUSH
54683: LD_VAR 0 1
54687: PPUSH
54688: CALL_OW 255
54692: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
54693: LD_INT 61
54695: PPUSH
54696: LD_VAR 0 6
54700: PPUSH
54701: CALL_OW 321
54705: PUSH
54706: LD_INT 2
54708: EQUAL
54709: IFFALSE 54719
// viewRange := 16 ;
54711: LD_ADDR_VAR 0 8
54715: PUSH
54716: LD_INT 16
54718: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
54719: LD_VAR 0 1
54723: PPUSH
54724: LD_VAR 0 2
54728: PPUSH
54729: LD_VAR 0 3
54733: PPUSH
54734: CALL_OW 297
54738: PUSH
54739: LD_VAR 0 5
54743: GREATER
54744: IFFALSE 54823
// begin ComMoveXY ( unit , x , y ) ;
54746: LD_VAR 0 1
54750: PPUSH
54751: LD_VAR 0 2
54755: PPUSH
54756: LD_VAR 0 3
54760: PPUSH
54761: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54765: LD_INT 35
54767: PPUSH
54768: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
54772: LD_VAR 0 1
54776: PPUSH
54777: LD_VAR 0 2
54781: PPUSH
54782: LD_VAR 0 3
54786: PPUSH
54787: CALL 91725 0 3
54791: NOT
54792: IFFALSE 54796
// exit ;
54794: GO 55128
// until GetDistUnitXY ( unit , x , y ) < dist ;
54796: LD_VAR 0 1
54800: PPUSH
54801: LD_VAR 0 2
54805: PPUSH
54806: LD_VAR 0 3
54810: PPUSH
54811: CALL_OW 297
54815: PUSH
54816: LD_VAR 0 5
54820: LESS
54821: IFFALSE 54765
// end ; ComTurnXY ( unit , x , y ) ;
54823: LD_VAR 0 1
54827: PPUSH
54828: LD_VAR 0 2
54832: PPUSH
54833: LD_VAR 0 3
54837: PPUSH
54838: CALL_OW 118
// repeat if Multiplayer then
54842: LD_OWVAR 4
54846: IFFALSE 54857
// wait ( 35 ) else
54848: LD_INT 35
54850: PPUSH
54851: CALL_OW 67
54855: GO 54864
// wait ( 5 ) ;
54857: LD_INT 5
54859: PPUSH
54860: CALL_OW 67
// _d := GetDir ( unit ) ;
54864: LD_ADDR_VAR 0 11
54868: PUSH
54869: LD_VAR 0 1
54873: PPUSH
54874: CALL_OW 254
54878: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
54879: LD_ADDR_VAR 0 7
54883: PUSH
54884: LD_VAR 0 1
54888: PPUSH
54889: CALL_OW 250
54893: PPUSH
54894: LD_VAR 0 1
54898: PPUSH
54899: CALL_OW 251
54903: PPUSH
54904: LD_VAR 0 2
54908: PPUSH
54909: LD_VAR 0 3
54913: PPUSH
54914: CALL 94333 0 4
54918: ST_TO_ADDR
// until dir = _d ;
54919: LD_VAR 0 7
54923: PUSH
54924: LD_VAR 0 11
54928: EQUAL
54929: IFFALSE 54842
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
54931: LD_ADDR_VAR 0 9
54935: PUSH
54936: LD_VAR 0 1
54940: PPUSH
54941: CALL_OW 250
54945: PPUSH
54946: LD_VAR 0 7
54950: PPUSH
54951: LD_VAR 0 5
54955: PPUSH
54956: CALL_OW 272
54960: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
54961: LD_ADDR_VAR 0 10
54965: PUSH
54966: LD_VAR 0 1
54970: PPUSH
54971: CALL_OW 251
54975: PPUSH
54976: LD_VAR 0 7
54980: PPUSH
54981: LD_VAR 0 5
54985: PPUSH
54986: CALL_OW 273
54990: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54991: LD_VAR 0 9
54995: PPUSH
54996: LD_VAR 0 10
55000: PPUSH
55001: CALL_OW 488
55005: NOT
55006: IFFALSE 55010
// exit ;
55008: GO 55128
// ComAnimCustom ( unit , 1 ) ;
55010: LD_VAR 0 1
55014: PPUSH
55015: LD_INT 1
55017: PPUSH
55018: CALL_OW 592
// p := 0 ;
55022: LD_ADDR_VAR 0 12
55026: PUSH
55027: LD_INT 0
55029: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
55030: LD_VAR 0 9
55034: PPUSH
55035: LD_VAR 0 10
55039: PPUSH
55040: LD_VAR 0 6
55044: PPUSH
55045: LD_VAR 0 8
55049: PPUSH
55050: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
55054: LD_INT 35
55056: PPUSH
55057: CALL_OW 67
// p := Inc ( p ) ;
55061: LD_ADDR_VAR 0 12
55065: PUSH
55066: LD_VAR 0 12
55070: PPUSH
55071: CALL 94289 0 1
55075: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
55076: LD_VAR 0 12
55080: PUSH
55081: LD_INT 3
55083: EQUAL
55084: PUSH
55085: LD_VAR 0 1
55089: PPUSH
55090: CALL_OW 302
55094: NOT
55095: OR
55096: PUSH
55097: LD_VAR 0 1
55101: PPUSH
55102: CALL_OW 301
55106: OR
55107: IFFALSE 55054
// RemoveSeeing ( _x , _y , side ) ;
55109: LD_VAR 0 9
55113: PPUSH
55114: LD_VAR 0 10
55118: PPUSH
55119: LD_VAR 0 6
55123: PPUSH
55124: CALL_OW 331
// end ; end_of_file
55128: LD_VAR 0 4
55132: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
55133: LD_INT 0
55135: PPUSH
55136: PPUSH
// if exist_mode then
55137: LD_VAR 0 2
55141: IFFALSE 55187
// begin unit := CreateCharacter ( prefix & ident ) ;
55143: LD_ADDR_VAR 0 5
55147: PUSH
55148: LD_VAR 0 3
55152: PUSH
55153: LD_VAR 0 1
55157: STR
55158: PPUSH
55159: CALL_OW 34
55163: ST_TO_ADDR
// if unit then
55164: LD_VAR 0 5
55168: IFFALSE 55185
// DeleteCharacters ( prefix & ident ) ;
55170: LD_VAR 0 3
55174: PUSH
55175: LD_VAR 0 1
55179: STR
55180: PPUSH
55181: CALL_OW 40
// end else
55185: GO 55202
// unit := NewCharacter ( ident ) ;
55187: LD_ADDR_VAR 0 5
55191: PUSH
55192: LD_VAR 0 1
55196: PPUSH
55197: CALL_OW 25
55201: ST_TO_ADDR
// result := unit ;
55202: LD_ADDR_VAR 0 4
55206: PUSH
55207: LD_VAR 0 5
55211: ST_TO_ADDR
// end ;
55212: LD_VAR 0 4
55216: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
55217: LD_INT 0
55219: PPUSH
55220: PPUSH
// if exist_mode then
55221: LD_VAR 0 2
55225: IFFALSE 55250
// unit := CreateCharacter ( prefix & ident ) else
55227: LD_ADDR_VAR 0 5
55231: PUSH
55232: LD_VAR 0 3
55236: PUSH
55237: LD_VAR 0 1
55241: STR
55242: PPUSH
55243: CALL_OW 34
55247: ST_TO_ADDR
55248: GO 55265
// unit := NewCharacter ( ident ) ;
55250: LD_ADDR_VAR 0 5
55254: PUSH
55255: LD_VAR 0 1
55259: PPUSH
55260: CALL_OW 25
55264: ST_TO_ADDR
// result := unit ;
55265: LD_ADDR_VAR 0 4
55269: PUSH
55270: LD_VAR 0 5
55274: ST_TO_ADDR
// end ;
55275: LD_VAR 0 4
55279: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
55280: LD_INT 0
55282: PPUSH
55283: PPUSH
// if not side or not nation then
55284: LD_VAR 0 1
55288: NOT
55289: PUSH
55290: LD_VAR 0 2
55294: NOT
55295: OR
55296: IFFALSE 55300
// exit ;
55298: GO 56068
// case nation of nation_american :
55300: LD_VAR 0 2
55304: PUSH
55305: LD_INT 1
55307: DOUBLE
55308: EQUAL
55309: IFTRUE 55313
55311: GO 55527
55313: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
55314: LD_ADDR_VAR 0 4
55318: PUSH
55319: LD_INT 35
55321: PUSH
55322: LD_INT 45
55324: PUSH
55325: LD_INT 46
55327: PUSH
55328: LD_INT 47
55330: PUSH
55331: LD_INT 82
55333: PUSH
55334: LD_INT 83
55336: PUSH
55337: LD_INT 84
55339: PUSH
55340: LD_INT 85
55342: PUSH
55343: LD_INT 86
55345: PUSH
55346: LD_INT 1
55348: PUSH
55349: LD_INT 2
55351: PUSH
55352: LD_INT 6
55354: PUSH
55355: LD_INT 15
55357: PUSH
55358: LD_INT 16
55360: PUSH
55361: LD_INT 7
55363: PUSH
55364: LD_INT 12
55366: PUSH
55367: LD_INT 13
55369: PUSH
55370: LD_INT 10
55372: PUSH
55373: LD_INT 14
55375: PUSH
55376: LD_INT 20
55378: PUSH
55379: LD_INT 21
55381: PUSH
55382: LD_INT 22
55384: PUSH
55385: LD_INT 25
55387: PUSH
55388: LD_INT 32
55390: PUSH
55391: LD_INT 27
55393: PUSH
55394: LD_INT 36
55396: PUSH
55397: LD_INT 69
55399: PUSH
55400: LD_INT 39
55402: PUSH
55403: LD_INT 34
55405: PUSH
55406: LD_INT 40
55408: PUSH
55409: LD_INT 48
55411: PUSH
55412: LD_INT 49
55414: PUSH
55415: LD_INT 50
55417: PUSH
55418: LD_INT 51
55420: PUSH
55421: LD_INT 52
55423: PUSH
55424: LD_INT 53
55426: PUSH
55427: LD_INT 54
55429: PUSH
55430: LD_INT 55
55432: PUSH
55433: LD_INT 56
55435: PUSH
55436: LD_INT 57
55438: PUSH
55439: LD_INT 58
55441: PUSH
55442: LD_INT 59
55444: PUSH
55445: LD_INT 60
55447: PUSH
55448: LD_INT 61
55450: PUSH
55451: LD_INT 62
55453: PUSH
55454: LD_INT 80
55456: PUSH
55457: LD_INT 82
55459: PUSH
55460: LD_INT 83
55462: PUSH
55463: LD_INT 84
55465: PUSH
55466: LD_INT 85
55468: PUSH
55469: LD_INT 86
55471: PUSH
55472: EMPTY
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: LIST
55511: LIST
55512: LIST
55513: LIST
55514: LIST
55515: LIST
55516: LIST
55517: LIST
55518: LIST
55519: LIST
55520: LIST
55521: LIST
55522: LIST
55523: LIST
55524: ST_TO_ADDR
55525: GO 55992
55527: LD_INT 2
55529: DOUBLE
55530: EQUAL
55531: IFTRUE 55535
55533: GO 55761
55535: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
55536: LD_ADDR_VAR 0 4
55540: PUSH
55541: LD_INT 35
55543: PUSH
55544: LD_INT 45
55546: PUSH
55547: LD_INT 46
55549: PUSH
55550: LD_INT 47
55552: PUSH
55553: LD_INT 82
55555: PUSH
55556: LD_INT 83
55558: PUSH
55559: LD_INT 84
55561: PUSH
55562: LD_INT 85
55564: PUSH
55565: LD_INT 87
55567: PUSH
55568: LD_INT 70
55570: PUSH
55571: LD_INT 1
55573: PUSH
55574: LD_INT 11
55576: PUSH
55577: LD_INT 3
55579: PUSH
55580: LD_INT 4
55582: PUSH
55583: LD_INT 5
55585: PUSH
55586: LD_INT 6
55588: PUSH
55589: LD_INT 15
55591: PUSH
55592: LD_INT 18
55594: PUSH
55595: LD_INT 7
55597: PUSH
55598: LD_INT 17
55600: PUSH
55601: LD_INT 8
55603: PUSH
55604: LD_INT 20
55606: PUSH
55607: LD_INT 21
55609: PUSH
55610: LD_INT 22
55612: PUSH
55613: LD_INT 72
55615: PUSH
55616: LD_INT 26
55618: PUSH
55619: LD_INT 69
55621: PUSH
55622: LD_INT 39
55624: PUSH
55625: LD_INT 40
55627: PUSH
55628: LD_INT 41
55630: PUSH
55631: LD_INT 42
55633: PUSH
55634: LD_INT 43
55636: PUSH
55637: LD_INT 48
55639: PUSH
55640: LD_INT 49
55642: PUSH
55643: LD_INT 50
55645: PUSH
55646: LD_INT 51
55648: PUSH
55649: LD_INT 52
55651: PUSH
55652: LD_INT 53
55654: PUSH
55655: LD_INT 54
55657: PUSH
55658: LD_INT 55
55660: PUSH
55661: LD_INT 56
55663: PUSH
55664: LD_INT 60
55666: PUSH
55667: LD_INT 61
55669: PUSH
55670: LD_INT 62
55672: PUSH
55673: LD_INT 66
55675: PUSH
55676: LD_INT 67
55678: PUSH
55679: LD_INT 68
55681: PUSH
55682: LD_INT 81
55684: PUSH
55685: LD_INT 82
55687: PUSH
55688: LD_INT 83
55690: PUSH
55691: LD_INT 84
55693: PUSH
55694: LD_INT 85
55696: PUSH
55697: LD_INT 87
55699: PUSH
55700: LD_INT 88
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: LIST
55707: LIST
55708: LIST
55709: LIST
55710: LIST
55711: LIST
55712: LIST
55713: LIST
55714: LIST
55715: LIST
55716: LIST
55717: LIST
55718: LIST
55719: LIST
55720: LIST
55721: LIST
55722: LIST
55723: LIST
55724: LIST
55725: LIST
55726: LIST
55727: LIST
55728: LIST
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: LIST
55744: LIST
55745: LIST
55746: LIST
55747: LIST
55748: LIST
55749: LIST
55750: LIST
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: LIST
55756: LIST
55757: LIST
55758: ST_TO_ADDR
55759: GO 55992
55761: LD_INT 3
55763: DOUBLE
55764: EQUAL
55765: IFTRUE 55769
55767: GO 55991
55769: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
55770: LD_ADDR_VAR 0 4
55774: PUSH
55775: LD_INT 46
55777: PUSH
55778: LD_INT 47
55780: PUSH
55781: LD_INT 1
55783: PUSH
55784: LD_INT 2
55786: PUSH
55787: LD_INT 82
55789: PUSH
55790: LD_INT 83
55792: PUSH
55793: LD_INT 84
55795: PUSH
55796: LD_INT 85
55798: PUSH
55799: LD_INT 86
55801: PUSH
55802: LD_INT 11
55804: PUSH
55805: LD_INT 9
55807: PUSH
55808: LD_INT 20
55810: PUSH
55811: LD_INT 19
55813: PUSH
55814: LD_INT 21
55816: PUSH
55817: LD_INT 24
55819: PUSH
55820: LD_INT 22
55822: PUSH
55823: LD_INT 25
55825: PUSH
55826: LD_INT 28
55828: PUSH
55829: LD_INT 29
55831: PUSH
55832: LD_INT 30
55834: PUSH
55835: LD_INT 31
55837: PUSH
55838: LD_INT 37
55840: PUSH
55841: LD_INT 38
55843: PUSH
55844: LD_INT 32
55846: PUSH
55847: LD_INT 27
55849: PUSH
55850: LD_INT 33
55852: PUSH
55853: LD_INT 69
55855: PUSH
55856: LD_INT 39
55858: PUSH
55859: LD_INT 34
55861: PUSH
55862: LD_INT 40
55864: PUSH
55865: LD_INT 71
55867: PUSH
55868: LD_INT 23
55870: PUSH
55871: LD_INT 44
55873: PUSH
55874: LD_INT 48
55876: PUSH
55877: LD_INT 49
55879: PUSH
55880: LD_INT 50
55882: PUSH
55883: LD_INT 51
55885: PUSH
55886: LD_INT 52
55888: PUSH
55889: LD_INT 53
55891: PUSH
55892: LD_INT 54
55894: PUSH
55895: LD_INT 55
55897: PUSH
55898: LD_INT 56
55900: PUSH
55901: LD_INT 57
55903: PUSH
55904: LD_INT 58
55906: PUSH
55907: LD_INT 59
55909: PUSH
55910: LD_INT 63
55912: PUSH
55913: LD_INT 64
55915: PUSH
55916: LD_INT 65
55918: PUSH
55919: LD_INT 82
55921: PUSH
55922: LD_INT 83
55924: PUSH
55925: LD_INT 84
55927: PUSH
55928: LD_INT 85
55930: PUSH
55931: LD_INT 86
55933: PUSH
55934: EMPTY
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: LIST
55978: LIST
55979: LIST
55980: LIST
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: LIST
55988: ST_TO_ADDR
55989: GO 55992
55991: POP
// if state > - 1 and state < 3 then
55992: LD_VAR 0 3
55996: PUSH
55997: LD_INT 1
55999: NEG
56000: GREATER
56001: PUSH
56002: LD_VAR 0 3
56006: PUSH
56007: LD_INT 3
56009: LESS
56010: AND
56011: IFFALSE 56068
// for i in result do
56013: LD_ADDR_VAR 0 5
56017: PUSH
56018: LD_VAR 0 4
56022: PUSH
56023: FOR_IN
56024: IFFALSE 56066
// if GetTech ( i , side ) <> state then
56026: LD_VAR 0 5
56030: PPUSH
56031: LD_VAR 0 1
56035: PPUSH
56036: CALL_OW 321
56040: PUSH
56041: LD_VAR 0 3
56045: NONEQUAL
56046: IFFALSE 56064
// result := result diff i ;
56048: LD_ADDR_VAR 0 4
56052: PUSH
56053: LD_VAR 0 4
56057: PUSH
56058: LD_VAR 0 5
56062: DIFF
56063: ST_TO_ADDR
56064: GO 56023
56066: POP
56067: POP
// end ;
56068: LD_VAR 0 4
56072: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
56073: LD_INT 0
56075: PPUSH
56076: PPUSH
56077: PPUSH
// result := true ;
56078: LD_ADDR_VAR 0 3
56082: PUSH
56083: LD_INT 1
56085: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
56086: LD_ADDR_VAR 0 5
56090: PUSH
56091: LD_VAR 0 2
56095: PPUSH
56096: CALL_OW 480
56100: ST_TO_ADDR
// if not tmp then
56101: LD_VAR 0 5
56105: NOT
56106: IFFALSE 56110
// exit ;
56108: GO 56159
// for i in tmp do
56110: LD_ADDR_VAR 0 4
56114: PUSH
56115: LD_VAR 0 5
56119: PUSH
56120: FOR_IN
56121: IFFALSE 56157
// if GetTech ( i , side ) <> state_researched then
56123: LD_VAR 0 4
56127: PPUSH
56128: LD_VAR 0 1
56132: PPUSH
56133: CALL_OW 321
56137: PUSH
56138: LD_INT 2
56140: NONEQUAL
56141: IFFALSE 56155
// begin result := false ;
56143: LD_ADDR_VAR 0 3
56147: PUSH
56148: LD_INT 0
56150: ST_TO_ADDR
// exit ;
56151: POP
56152: POP
56153: GO 56159
// end ;
56155: GO 56120
56157: POP
56158: POP
// end ;
56159: LD_VAR 0 3
56163: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
56164: LD_INT 0
56166: PPUSH
56167: PPUSH
56168: PPUSH
56169: PPUSH
56170: PPUSH
56171: PPUSH
56172: PPUSH
56173: PPUSH
56174: PPUSH
56175: PPUSH
56176: PPUSH
56177: PPUSH
56178: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
56179: LD_VAR 0 1
56183: NOT
56184: PUSH
56185: LD_VAR 0 1
56189: PPUSH
56190: CALL_OW 257
56194: PUSH
56195: LD_INT 9
56197: NONEQUAL
56198: OR
56199: IFFALSE 56203
// exit ;
56201: GO 56776
// side := GetSide ( unit ) ;
56203: LD_ADDR_VAR 0 9
56207: PUSH
56208: LD_VAR 0 1
56212: PPUSH
56213: CALL_OW 255
56217: ST_TO_ADDR
// tech_space := tech_spacanom ;
56218: LD_ADDR_VAR 0 12
56222: PUSH
56223: LD_INT 29
56225: ST_TO_ADDR
// tech_time := tech_taurad ;
56226: LD_ADDR_VAR 0 13
56230: PUSH
56231: LD_INT 28
56233: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
56234: LD_ADDR_VAR 0 11
56238: PUSH
56239: LD_VAR 0 1
56243: PPUSH
56244: CALL_OW 310
56248: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
56249: LD_VAR 0 11
56253: PPUSH
56254: CALL_OW 247
56258: PUSH
56259: LD_INT 2
56261: EQUAL
56262: IFFALSE 56266
// exit ;
56264: GO 56776
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56266: LD_ADDR_VAR 0 8
56270: PUSH
56271: LD_INT 81
56273: PUSH
56274: LD_VAR 0 9
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PUSH
56283: LD_INT 3
56285: PUSH
56286: LD_INT 21
56288: PUSH
56289: LD_INT 3
56291: PUSH
56292: EMPTY
56293: LIST
56294: LIST
56295: PUSH
56296: EMPTY
56297: LIST
56298: LIST
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PPUSH
56304: CALL_OW 69
56308: ST_TO_ADDR
// if not tmp then
56309: LD_VAR 0 8
56313: NOT
56314: IFFALSE 56318
// exit ;
56316: GO 56776
// if in_unit then
56318: LD_VAR 0 11
56322: IFFALSE 56346
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
56324: LD_ADDR_VAR 0 10
56328: PUSH
56329: LD_VAR 0 8
56333: PPUSH
56334: LD_VAR 0 11
56338: PPUSH
56339: CALL_OW 74
56343: ST_TO_ADDR
56344: GO 56366
// enemy := NearestUnitToUnit ( tmp , unit ) ;
56346: LD_ADDR_VAR 0 10
56350: PUSH
56351: LD_VAR 0 8
56355: PPUSH
56356: LD_VAR 0 1
56360: PPUSH
56361: CALL_OW 74
56365: ST_TO_ADDR
// if not enemy then
56366: LD_VAR 0 10
56370: NOT
56371: IFFALSE 56375
// exit ;
56373: GO 56776
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
56375: LD_VAR 0 11
56379: PUSH
56380: LD_VAR 0 11
56384: PPUSH
56385: LD_VAR 0 10
56389: PPUSH
56390: CALL_OW 296
56394: PUSH
56395: LD_INT 13
56397: GREATER
56398: AND
56399: PUSH
56400: LD_VAR 0 1
56404: PPUSH
56405: LD_VAR 0 10
56409: PPUSH
56410: CALL_OW 296
56414: PUSH
56415: LD_INT 12
56417: GREATER
56418: OR
56419: IFFALSE 56423
// exit ;
56421: GO 56776
// missile := [ 1 ] ;
56423: LD_ADDR_VAR 0 14
56427: PUSH
56428: LD_INT 1
56430: PUSH
56431: EMPTY
56432: LIST
56433: ST_TO_ADDR
// if Researched ( side , tech_space ) then
56434: LD_VAR 0 9
56438: PPUSH
56439: LD_VAR 0 12
56443: PPUSH
56444: CALL_OW 325
56448: IFFALSE 56477
// missile := Replace ( missile , missile + 1 , 2 ) ;
56450: LD_ADDR_VAR 0 14
56454: PUSH
56455: LD_VAR 0 14
56459: PPUSH
56460: LD_VAR 0 14
56464: PUSH
56465: LD_INT 1
56467: PLUS
56468: PPUSH
56469: LD_INT 2
56471: PPUSH
56472: CALL_OW 1
56476: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
56477: LD_VAR 0 9
56481: PPUSH
56482: LD_VAR 0 13
56486: PPUSH
56487: CALL_OW 325
56491: PUSH
56492: LD_VAR 0 10
56496: PPUSH
56497: CALL_OW 255
56501: PPUSH
56502: LD_VAR 0 13
56506: PPUSH
56507: CALL_OW 325
56511: NOT
56512: AND
56513: IFFALSE 56542
// missile := Replace ( missile , missile + 1 , 3 ) ;
56515: LD_ADDR_VAR 0 14
56519: PUSH
56520: LD_VAR 0 14
56524: PPUSH
56525: LD_VAR 0 14
56529: PUSH
56530: LD_INT 1
56532: PLUS
56533: PPUSH
56534: LD_INT 3
56536: PPUSH
56537: CALL_OW 1
56541: ST_TO_ADDR
// if missile < 2 then
56542: LD_VAR 0 14
56546: PUSH
56547: LD_INT 2
56549: LESS
56550: IFFALSE 56554
// exit ;
56552: GO 56776
// x := GetX ( enemy ) ;
56554: LD_ADDR_VAR 0 4
56558: PUSH
56559: LD_VAR 0 10
56563: PPUSH
56564: CALL_OW 250
56568: ST_TO_ADDR
// y := GetY ( enemy ) ;
56569: LD_ADDR_VAR 0 5
56573: PUSH
56574: LD_VAR 0 10
56578: PPUSH
56579: CALL_OW 251
56583: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
56584: LD_ADDR_VAR 0 6
56588: PUSH
56589: LD_VAR 0 4
56593: PUSH
56594: LD_INT 1
56596: NEG
56597: PPUSH
56598: LD_INT 1
56600: PPUSH
56601: CALL_OW 12
56605: PLUS
56606: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
56607: LD_ADDR_VAR 0 7
56611: PUSH
56612: LD_VAR 0 5
56616: PUSH
56617: LD_INT 1
56619: NEG
56620: PPUSH
56621: LD_INT 1
56623: PPUSH
56624: CALL_OW 12
56628: PLUS
56629: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56630: LD_VAR 0 6
56634: PPUSH
56635: LD_VAR 0 7
56639: PPUSH
56640: CALL_OW 488
56644: NOT
56645: IFFALSE 56667
// begin _x := x ;
56647: LD_ADDR_VAR 0 6
56651: PUSH
56652: LD_VAR 0 4
56656: ST_TO_ADDR
// _y := y ;
56657: LD_ADDR_VAR 0 7
56661: PUSH
56662: LD_VAR 0 5
56666: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
56667: LD_ADDR_VAR 0 3
56671: PUSH
56672: LD_INT 1
56674: PPUSH
56675: LD_VAR 0 14
56679: PPUSH
56680: CALL_OW 12
56684: ST_TO_ADDR
// case i of 1 :
56685: LD_VAR 0 3
56689: PUSH
56690: LD_INT 1
56692: DOUBLE
56693: EQUAL
56694: IFTRUE 56698
56696: GO 56715
56698: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
56699: LD_VAR 0 1
56703: PPUSH
56704: LD_VAR 0 10
56708: PPUSH
56709: CALL_OW 115
56713: GO 56776
56715: LD_INT 2
56717: DOUBLE
56718: EQUAL
56719: IFTRUE 56723
56721: GO 56745
56723: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
56724: LD_VAR 0 1
56728: PPUSH
56729: LD_VAR 0 6
56733: PPUSH
56734: LD_VAR 0 7
56738: PPUSH
56739: CALL_OW 153
56743: GO 56776
56745: LD_INT 3
56747: DOUBLE
56748: EQUAL
56749: IFTRUE 56753
56751: GO 56775
56753: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
56754: LD_VAR 0 1
56758: PPUSH
56759: LD_VAR 0 6
56763: PPUSH
56764: LD_VAR 0 7
56768: PPUSH
56769: CALL_OW 154
56773: GO 56776
56775: POP
// end ;
56776: LD_VAR 0 2
56780: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
56781: LD_INT 0
56783: PPUSH
56784: PPUSH
56785: PPUSH
56786: PPUSH
56787: PPUSH
56788: PPUSH
// if not unit or not building then
56789: LD_VAR 0 1
56793: NOT
56794: PUSH
56795: LD_VAR 0 2
56799: NOT
56800: OR
56801: IFFALSE 56805
// exit ;
56803: GO 56963
// x := GetX ( building ) ;
56805: LD_ADDR_VAR 0 5
56809: PUSH
56810: LD_VAR 0 2
56814: PPUSH
56815: CALL_OW 250
56819: ST_TO_ADDR
// y := GetY ( building ) ;
56820: LD_ADDR_VAR 0 6
56824: PUSH
56825: LD_VAR 0 2
56829: PPUSH
56830: CALL_OW 251
56834: ST_TO_ADDR
// for i = 0 to 5 do
56835: LD_ADDR_VAR 0 4
56839: PUSH
56840: DOUBLE
56841: LD_INT 0
56843: DEC
56844: ST_TO_ADDR
56845: LD_INT 5
56847: PUSH
56848: FOR_TO
56849: IFFALSE 56961
// begin _x := ShiftX ( x , i , 3 ) ;
56851: LD_ADDR_VAR 0 7
56855: PUSH
56856: LD_VAR 0 5
56860: PPUSH
56861: LD_VAR 0 4
56865: PPUSH
56866: LD_INT 3
56868: PPUSH
56869: CALL_OW 272
56873: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
56874: LD_ADDR_VAR 0 8
56878: PUSH
56879: LD_VAR 0 6
56883: PPUSH
56884: LD_VAR 0 4
56888: PPUSH
56889: LD_INT 3
56891: PPUSH
56892: CALL_OW 273
56896: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56897: LD_VAR 0 7
56901: PPUSH
56902: LD_VAR 0 8
56906: PPUSH
56907: CALL_OW 488
56911: NOT
56912: IFFALSE 56916
// continue ;
56914: GO 56848
// if HexInfo ( _x , _y ) = 0 then
56916: LD_VAR 0 7
56920: PPUSH
56921: LD_VAR 0 8
56925: PPUSH
56926: CALL_OW 428
56930: PUSH
56931: LD_INT 0
56933: EQUAL
56934: IFFALSE 56959
// begin ComMoveXY ( unit , _x , _y ) ;
56936: LD_VAR 0 1
56940: PPUSH
56941: LD_VAR 0 7
56945: PPUSH
56946: LD_VAR 0 8
56950: PPUSH
56951: CALL_OW 111
// exit ;
56955: POP
56956: POP
56957: GO 56963
// end ; end ;
56959: GO 56848
56961: POP
56962: POP
// end ;
56963: LD_VAR 0 3
56967: RET
// export function ScanBase ( side , base_area ) ; begin
56968: LD_INT 0
56970: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
56971: LD_ADDR_VAR 0 3
56975: PUSH
56976: LD_VAR 0 2
56980: PPUSH
56981: LD_INT 81
56983: PUSH
56984: LD_VAR 0 1
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: PPUSH
56993: CALL_OW 70
56997: ST_TO_ADDR
// end ;
56998: LD_VAR 0 3
57002: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
57003: LD_INT 0
57005: PPUSH
57006: PPUSH
57007: PPUSH
57008: PPUSH
// result := false ;
57009: LD_ADDR_VAR 0 2
57013: PUSH
57014: LD_INT 0
57016: ST_TO_ADDR
// side := GetSide ( unit ) ;
57017: LD_ADDR_VAR 0 3
57021: PUSH
57022: LD_VAR 0 1
57026: PPUSH
57027: CALL_OW 255
57031: ST_TO_ADDR
// nat := GetNation ( unit ) ;
57032: LD_ADDR_VAR 0 4
57036: PUSH
57037: LD_VAR 0 1
57041: PPUSH
57042: CALL_OW 248
57046: ST_TO_ADDR
// case nat of 1 :
57047: LD_VAR 0 4
57051: PUSH
57052: LD_INT 1
57054: DOUBLE
57055: EQUAL
57056: IFTRUE 57060
57058: GO 57071
57060: POP
// tech := tech_lassight ; 2 :
57061: LD_ADDR_VAR 0 5
57065: PUSH
57066: LD_INT 12
57068: ST_TO_ADDR
57069: GO 57110
57071: LD_INT 2
57073: DOUBLE
57074: EQUAL
57075: IFTRUE 57079
57077: GO 57090
57079: POP
// tech := tech_mortar ; 3 :
57080: LD_ADDR_VAR 0 5
57084: PUSH
57085: LD_INT 41
57087: ST_TO_ADDR
57088: GO 57110
57090: LD_INT 3
57092: DOUBLE
57093: EQUAL
57094: IFTRUE 57098
57096: GO 57109
57098: POP
// tech := tech_bazooka ; end ;
57099: LD_ADDR_VAR 0 5
57103: PUSH
57104: LD_INT 44
57106: ST_TO_ADDR
57107: GO 57110
57109: POP
// if Researched ( side , tech ) then
57110: LD_VAR 0 3
57114: PPUSH
57115: LD_VAR 0 5
57119: PPUSH
57120: CALL_OW 325
57124: IFFALSE 57151
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
57126: LD_ADDR_VAR 0 2
57130: PUSH
57131: LD_INT 5
57133: PUSH
57134: LD_INT 8
57136: PUSH
57137: LD_INT 9
57139: PUSH
57140: EMPTY
57141: LIST
57142: LIST
57143: LIST
57144: PUSH
57145: LD_VAR 0 4
57149: ARRAY
57150: ST_TO_ADDR
// end ;
57151: LD_VAR 0 2
57155: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
57156: LD_INT 0
57158: PPUSH
57159: PPUSH
57160: PPUSH
// if not mines then
57161: LD_VAR 0 2
57165: NOT
57166: IFFALSE 57170
// exit ;
57168: GO 57314
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
57170: LD_ADDR_VAR 0 5
57174: PUSH
57175: LD_INT 81
57177: PUSH
57178: LD_VAR 0 1
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PUSH
57187: LD_INT 3
57189: PUSH
57190: LD_INT 21
57192: PUSH
57193: LD_INT 3
57195: PUSH
57196: EMPTY
57197: LIST
57198: LIST
57199: PUSH
57200: EMPTY
57201: LIST
57202: LIST
57203: PUSH
57204: EMPTY
57205: LIST
57206: LIST
57207: PPUSH
57208: CALL_OW 69
57212: ST_TO_ADDR
// for i in mines do
57213: LD_ADDR_VAR 0 4
57217: PUSH
57218: LD_VAR 0 2
57222: PUSH
57223: FOR_IN
57224: IFFALSE 57312
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
57226: LD_VAR 0 4
57230: PUSH
57231: LD_INT 1
57233: ARRAY
57234: PPUSH
57235: LD_VAR 0 4
57239: PUSH
57240: LD_INT 2
57242: ARRAY
57243: PPUSH
57244: CALL_OW 458
57248: NOT
57249: IFFALSE 57253
// continue ;
57251: GO 57223
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
57253: LD_VAR 0 4
57257: PUSH
57258: LD_INT 1
57260: ARRAY
57261: PPUSH
57262: LD_VAR 0 4
57266: PUSH
57267: LD_INT 2
57269: ARRAY
57270: PPUSH
57271: CALL_OW 428
57275: PUSH
57276: LD_VAR 0 5
57280: IN
57281: IFFALSE 57310
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
57283: LD_VAR 0 4
57287: PUSH
57288: LD_INT 1
57290: ARRAY
57291: PPUSH
57292: LD_VAR 0 4
57296: PUSH
57297: LD_INT 2
57299: ARRAY
57300: PPUSH
57301: LD_VAR 0 1
57305: PPUSH
57306: CALL_OW 456
// end ;
57310: GO 57223
57312: POP
57313: POP
// end ;
57314: LD_VAR 0 3
57318: RET
// export function Count ( array ) ; begin
57319: LD_INT 0
57321: PPUSH
// result := array + 0 ;
57322: LD_ADDR_VAR 0 2
57326: PUSH
57327: LD_VAR 0 1
57331: PUSH
57332: LD_INT 0
57334: PLUS
57335: ST_TO_ADDR
// end ;
57336: LD_VAR 0 2
57340: RET
// export function IsEmpty ( building ) ; begin
57341: LD_INT 0
57343: PPUSH
// if not building then
57344: LD_VAR 0 1
57348: NOT
57349: IFFALSE 57353
// exit ;
57351: GO 57396
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
57353: LD_ADDR_VAR 0 2
57357: PUSH
57358: LD_VAR 0 1
57362: PUSH
57363: LD_INT 22
57365: PUSH
57366: LD_VAR 0 1
57370: PPUSH
57371: CALL_OW 255
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: PUSH
57380: LD_INT 58
57382: PUSH
57383: EMPTY
57384: LIST
57385: PUSH
57386: EMPTY
57387: LIST
57388: LIST
57389: PPUSH
57390: CALL_OW 69
57394: IN
57395: ST_TO_ADDR
// end ;
57396: LD_VAR 0 2
57400: RET
// export function IsNotFull ( building ) ; var places ; begin
57401: LD_INT 0
57403: PPUSH
57404: PPUSH
// if not building then
57405: LD_VAR 0 1
57409: NOT
57410: IFFALSE 57414
// exit ;
57412: GO 57442
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
57414: LD_ADDR_VAR 0 2
57418: PUSH
57419: LD_VAR 0 1
57423: PPUSH
57424: LD_INT 3
57426: PUSH
57427: LD_INT 62
57429: PUSH
57430: EMPTY
57431: LIST
57432: PUSH
57433: EMPTY
57434: LIST
57435: LIST
57436: PPUSH
57437: CALL_OW 72
57441: ST_TO_ADDR
// end ;
57442: LD_VAR 0 2
57446: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
57447: LD_INT 0
57449: PPUSH
57450: PPUSH
57451: PPUSH
57452: PPUSH
// tmp := [ ] ;
57453: LD_ADDR_VAR 0 3
57457: PUSH
57458: EMPTY
57459: ST_TO_ADDR
// list := [ ] ;
57460: LD_ADDR_VAR 0 5
57464: PUSH
57465: EMPTY
57466: ST_TO_ADDR
// for i = 16 to 25 do
57467: LD_ADDR_VAR 0 4
57471: PUSH
57472: DOUBLE
57473: LD_INT 16
57475: DEC
57476: ST_TO_ADDR
57477: LD_INT 25
57479: PUSH
57480: FOR_TO
57481: IFFALSE 57554
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
57483: LD_ADDR_VAR 0 3
57487: PUSH
57488: LD_VAR 0 3
57492: PUSH
57493: LD_INT 22
57495: PUSH
57496: LD_VAR 0 1
57500: PPUSH
57501: CALL_OW 255
57505: PUSH
57506: EMPTY
57507: LIST
57508: LIST
57509: PUSH
57510: LD_INT 91
57512: PUSH
57513: LD_VAR 0 1
57517: PUSH
57518: LD_INT 6
57520: PUSH
57521: EMPTY
57522: LIST
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 30
57528: PUSH
57529: LD_VAR 0 4
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: EMPTY
57539: LIST
57540: LIST
57541: LIST
57542: PUSH
57543: EMPTY
57544: LIST
57545: PPUSH
57546: CALL_OW 69
57550: ADD
57551: ST_TO_ADDR
57552: GO 57480
57554: POP
57555: POP
// for i = 1 to tmp do
57556: LD_ADDR_VAR 0 4
57560: PUSH
57561: DOUBLE
57562: LD_INT 1
57564: DEC
57565: ST_TO_ADDR
57566: LD_VAR 0 3
57570: PUSH
57571: FOR_TO
57572: IFFALSE 57660
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
57574: LD_ADDR_VAR 0 5
57578: PUSH
57579: LD_VAR 0 5
57583: PUSH
57584: LD_VAR 0 3
57588: PUSH
57589: LD_VAR 0 4
57593: ARRAY
57594: PPUSH
57595: CALL_OW 266
57599: PUSH
57600: LD_VAR 0 3
57604: PUSH
57605: LD_VAR 0 4
57609: ARRAY
57610: PPUSH
57611: CALL_OW 250
57615: PUSH
57616: LD_VAR 0 3
57620: PUSH
57621: LD_VAR 0 4
57625: ARRAY
57626: PPUSH
57627: CALL_OW 251
57631: PUSH
57632: LD_VAR 0 3
57636: PUSH
57637: LD_VAR 0 4
57641: ARRAY
57642: PPUSH
57643: CALL_OW 254
57647: PUSH
57648: EMPTY
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: PUSH
57654: EMPTY
57655: LIST
57656: ADD
57657: ST_TO_ADDR
57658: GO 57571
57660: POP
57661: POP
// result := list ;
57662: LD_ADDR_VAR 0 2
57666: PUSH
57667: LD_VAR 0 5
57671: ST_TO_ADDR
// end ;
57672: LD_VAR 0 2
57676: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
57677: LD_INT 0
57679: PPUSH
57680: PPUSH
57681: PPUSH
57682: PPUSH
57683: PPUSH
57684: PPUSH
57685: PPUSH
// if not factory then
57686: LD_VAR 0 1
57690: NOT
57691: IFFALSE 57695
// exit ;
57693: GO 58288
// if control = control_apeman then
57695: LD_VAR 0 4
57699: PUSH
57700: LD_INT 5
57702: EQUAL
57703: IFFALSE 57812
// begin tmp := UnitsInside ( factory ) ;
57705: LD_ADDR_VAR 0 8
57709: PUSH
57710: LD_VAR 0 1
57714: PPUSH
57715: CALL_OW 313
57719: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
57720: LD_VAR 0 8
57724: PPUSH
57725: LD_INT 25
57727: PUSH
57728: LD_INT 12
57730: PUSH
57731: EMPTY
57732: LIST
57733: LIST
57734: PPUSH
57735: CALL_OW 72
57739: NOT
57740: IFFALSE 57750
// control := control_manual ;
57742: LD_ADDR_VAR 0 4
57746: PUSH
57747: LD_INT 1
57749: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
57750: LD_ADDR_VAR 0 8
57754: PUSH
57755: LD_VAR 0 1
57759: PPUSH
57760: CALL 57447 0 1
57764: ST_TO_ADDR
// if tmp then
57765: LD_VAR 0 8
57769: IFFALSE 57812
// begin for i in tmp do
57771: LD_ADDR_VAR 0 7
57775: PUSH
57776: LD_VAR 0 8
57780: PUSH
57781: FOR_IN
57782: IFFALSE 57810
// if i [ 1 ] = b_ext_radio then
57784: LD_VAR 0 7
57788: PUSH
57789: LD_INT 1
57791: ARRAY
57792: PUSH
57793: LD_INT 22
57795: EQUAL
57796: IFFALSE 57808
// begin control := control_remote ;
57798: LD_ADDR_VAR 0 4
57802: PUSH
57803: LD_INT 2
57805: ST_TO_ADDR
// break ;
57806: GO 57810
// end ;
57808: GO 57781
57810: POP
57811: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57812: LD_VAR 0 1
57816: PPUSH
57817: LD_VAR 0 2
57821: PPUSH
57822: LD_VAR 0 3
57826: PPUSH
57827: LD_VAR 0 4
57831: PPUSH
57832: LD_VAR 0 5
57836: PPUSH
57837: CALL_OW 448
57841: IFFALSE 57876
// begin result := [ chassis , engine , control , weapon ] ;
57843: LD_ADDR_VAR 0 6
57847: PUSH
57848: LD_VAR 0 2
57852: PUSH
57853: LD_VAR 0 3
57857: PUSH
57858: LD_VAR 0 4
57862: PUSH
57863: LD_VAR 0 5
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: LIST
57872: LIST
57873: ST_TO_ADDR
// exit ;
57874: GO 58288
// end ; _chassis := AvailableChassisList ( factory ) ;
57876: LD_ADDR_VAR 0 9
57880: PUSH
57881: LD_VAR 0 1
57885: PPUSH
57886: CALL_OW 475
57890: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
57891: LD_ADDR_VAR 0 11
57895: PUSH
57896: LD_VAR 0 1
57900: PPUSH
57901: CALL_OW 476
57905: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
57906: LD_ADDR_VAR 0 12
57910: PUSH
57911: LD_VAR 0 1
57915: PPUSH
57916: CALL_OW 477
57920: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
57921: LD_ADDR_VAR 0 10
57925: PUSH
57926: LD_VAR 0 1
57930: PPUSH
57931: CALL_OW 478
57935: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
57936: LD_VAR 0 9
57940: NOT
57941: PUSH
57942: LD_VAR 0 11
57946: NOT
57947: OR
57948: PUSH
57949: LD_VAR 0 12
57953: NOT
57954: OR
57955: PUSH
57956: LD_VAR 0 10
57960: NOT
57961: OR
57962: IFFALSE 57997
// begin result := [ chassis , engine , control , weapon ] ;
57964: LD_ADDR_VAR 0 6
57968: PUSH
57969: LD_VAR 0 2
57973: PUSH
57974: LD_VAR 0 3
57978: PUSH
57979: LD_VAR 0 4
57983: PUSH
57984: LD_VAR 0 5
57988: PUSH
57989: EMPTY
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: ST_TO_ADDR
// exit ;
57995: GO 58288
// end ; if not chassis in _chassis then
57997: LD_VAR 0 2
58001: PUSH
58002: LD_VAR 0 9
58006: IN
58007: NOT
58008: IFFALSE 58034
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
58010: LD_ADDR_VAR 0 2
58014: PUSH
58015: LD_VAR 0 9
58019: PUSH
58020: LD_INT 1
58022: PPUSH
58023: LD_VAR 0 9
58027: PPUSH
58028: CALL_OW 12
58032: ARRAY
58033: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
58034: LD_VAR 0 2
58038: PPUSH
58039: LD_VAR 0 3
58043: PPUSH
58044: CALL 58293 0 2
58048: NOT
58049: IFFALSE 58108
// repeat engine := _engine [ 1 ] ;
58051: LD_ADDR_VAR 0 3
58055: PUSH
58056: LD_VAR 0 11
58060: PUSH
58061: LD_INT 1
58063: ARRAY
58064: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
58065: LD_ADDR_VAR 0 11
58069: PUSH
58070: LD_VAR 0 11
58074: PPUSH
58075: LD_INT 1
58077: PPUSH
58078: CALL_OW 3
58082: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
58083: LD_VAR 0 2
58087: PPUSH
58088: LD_VAR 0 3
58092: PPUSH
58093: CALL 58293 0 2
58097: PUSH
58098: LD_VAR 0 11
58102: PUSH
58103: EMPTY
58104: EQUAL
58105: OR
58106: IFFALSE 58051
// if not control in _control then
58108: LD_VAR 0 4
58112: PUSH
58113: LD_VAR 0 12
58117: IN
58118: NOT
58119: IFFALSE 58145
// control := _control [ rand ( 1 , _control ) ] ;
58121: LD_ADDR_VAR 0 4
58125: PUSH
58126: LD_VAR 0 12
58130: PUSH
58131: LD_INT 1
58133: PPUSH
58134: LD_VAR 0 12
58138: PPUSH
58139: CALL_OW 12
58143: ARRAY
58144: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
58145: LD_VAR 0 2
58149: PPUSH
58150: LD_VAR 0 5
58154: PPUSH
58155: CALL 58513 0 2
58159: NOT
58160: IFFALSE 58219
// repeat weapon := _weapon [ 1 ] ;
58162: LD_ADDR_VAR 0 5
58166: PUSH
58167: LD_VAR 0 10
58171: PUSH
58172: LD_INT 1
58174: ARRAY
58175: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
58176: LD_ADDR_VAR 0 10
58180: PUSH
58181: LD_VAR 0 10
58185: PPUSH
58186: LD_INT 1
58188: PPUSH
58189: CALL_OW 3
58193: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
58194: LD_VAR 0 2
58198: PPUSH
58199: LD_VAR 0 5
58203: PPUSH
58204: CALL 58513 0 2
58208: PUSH
58209: LD_VAR 0 10
58213: PUSH
58214: EMPTY
58215: EQUAL
58216: OR
58217: IFFALSE 58162
// result := [ ] ;
58219: LD_ADDR_VAR 0 6
58223: PUSH
58224: EMPTY
58225: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
58226: LD_VAR 0 1
58230: PPUSH
58231: LD_VAR 0 2
58235: PPUSH
58236: LD_VAR 0 3
58240: PPUSH
58241: LD_VAR 0 4
58245: PPUSH
58246: LD_VAR 0 5
58250: PPUSH
58251: CALL_OW 448
58255: IFFALSE 58288
// result := [ chassis , engine , control , weapon ] ;
58257: LD_ADDR_VAR 0 6
58261: PUSH
58262: LD_VAR 0 2
58266: PUSH
58267: LD_VAR 0 3
58271: PUSH
58272: LD_VAR 0 4
58276: PUSH
58277: LD_VAR 0 5
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: LIST
58286: LIST
58287: ST_TO_ADDR
// end ;
58288: LD_VAR 0 6
58292: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
58293: LD_INT 0
58295: PPUSH
// if not chassis or not engine then
58296: LD_VAR 0 1
58300: NOT
58301: PUSH
58302: LD_VAR 0 2
58306: NOT
58307: OR
58308: IFFALSE 58312
// exit ;
58310: GO 58508
// case engine of engine_solar :
58312: LD_VAR 0 2
58316: PUSH
58317: LD_INT 2
58319: DOUBLE
58320: EQUAL
58321: IFTRUE 58325
58323: GO 58363
58325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
58326: LD_ADDR_VAR 0 3
58330: PUSH
58331: LD_INT 11
58333: PUSH
58334: LD_INT 12
58336: PUSH
58337: LD_INT 13
58339: PUSH
58340: LD_INT 14
58342: PUSH
58343: LD_INT 1
58345: PUSH
58346: LD_INT 2
58348: PUSH
58349: LD_INT 3
58351: PUSH
58352: EMPTY
58353: LIST
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: ST_TO_ADDR
58361: GO 58492
58363: LD_INT 1
58365: DOUBLE
58366: EQUAL
58367: IFTRUE 58371
58369: GO 58433
58371: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
58372: LD_ADDR_VAR 0 3
58376: PUSH
58377: LD_INT 11
58379: PUSH
58380: LD_INT 12
58382: PUSH
58383: LD_INT 13
58385: PUSH
58386: LD_INT 14
58388: PUSH
58389: LD_INT 1
58391: PUSH
58392: LD_INT 2
58394: PUSH
58395: LD_INT 3
58397: PUSH
58398: LD_INT 4
58400: PUSH
58401: LD_INT 5
58403: PUSH
58404: LD_INT 21
58406: PUSH
58407: LD_INT 23
58409: PUSH
58410: LD_INT 22
58412: PUSH
58413: LD_INT 24
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: LIST
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: ST_TO_ADDR
58431: GO 58492
58433: LD_INT 3
58435: DOUBLE
58436: EQUAL
58437: IFTRUE 58441
58439: GO 58491
58441: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
58442: LD_ADDR_VAR 0 3
58446: PUSH
58447: LD_INT 13
58449: PUSH
58450: LD_INT 14
58452: PUSH
58453: LD_INT 2
58455: PUSH
58456: LD_INT 3
58458: PUSH
58459: LD_INT 4
58461: PUSH
58462: LD_INT 5
58464: PUSH
58465: LD_INT 21
58467: PUSH
58468: LD_INT 22
58470: PUSH
58471: LD_INT 23
58473: PUSH
58474: LD_INT 24
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: LIST
58486: LIST
58487: LIST
58488: ST_TO_ADDR
58489: GO 58492
58491: POP
// result := ( chassis in result ) ;
58492: LD_ADDR_VAR 0 3
58496: PUSH
58497: LD_VAR 0 1
58501: PUSH
58502: LD_VAR 0 3
58506: IN
58507: ST_TO_ADDR
// end ;
58508: LD_VAR 0 3
58512: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
58513: LD_INT 0
58515: PPUSH
// if not chassis or not weapon then
58516: LD_VAR 0 1
58520: NOT
58521: PUSH
58522: LD_VAR 0 2
58526: NOT
58527: OR
58528: IFFALSE 58532
// exit ;
58530: GO 59592
// case weapon of us_machine_gun :
58532: LD_VAR 0 2
58536: PUSH
58537: LD_INT 2
58539: DOUBLE
58540: EQUAL
58541: IFTRUE 58545
58543: GO 58575
58545: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
58546: LD_ADDR_VAR 0 3
58550: PUSH
58551: LD_INT 1
58553: PUSH
58554: LD_INT 2
58556: PUSH
58557: LD_INT 3
58559: PUSH
58560: LD_INT 4
58562: PUSH
58563: LD_INT 5
58565: PUSH
58566: EMPTY
58567: LIST
58568: LIST
58569: LIST
58570: LIST
58571: LIST
58572: ST_TO_ADDR
58573: GO 59576
58575: LD_INT 3
58577: DOUBLE
58578: EQUAL
58579: IFTRUE 58583
58581: GO 58613
58583: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
58584: LD_ADDR_VAR 0 3
58588: PUSH
58589: LD_INT 1
58591: PUSH
58592: LD_INT 2
58594: PUSH
58595: LD_INT 3
58597: PUSH
58598: LD_INT 4
58600: PUSH
58601: LD_INT 5
58603: PUSH
58604: EMPTY
58605: LIST
58606: LIST
58607: LIST
58608: LIST
58609: LIST
58610: ST_TO_ADDR
58611: GO 59576
58613: LD_INT 11
58615: DOUBLE
58616: EQUAL
58617: IFTRUE 58621
58619: GO 58651
58621: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
58622: LD_ADDR_VAR 0 3
58626: PUSH
58627: LD_INT 1
58629: PUSH
58630: LD_INT 2
58632: PUSH
58633: LD_INT 3
58635: PUSH
58636: LD_INT 4
58638: PUSH
58639: LD_INT 5
58641: PUSH
58642: EMPTY
58643: LIST
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: ST_TO_ADDR
58649: GO 59576
58651: LD_INT 4
58653: DOUBLE
58654: EQUAL
58655: IFTRUE 58659
58657: GO 58685
58659: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
58660: LD_ADDR_VAR 0 3
58664: PUSH
58665: LD_INT 2
58667: PUSH
58668: LD_INT 3
58670: PUSH
58671: LD_INT 4
58673: PUSH
58674: LD_INT 5
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: ST_TO_ADDR
58683: GO 59576
58685: LD_INT 5
58687: DOUBLE
58688: EQUAL
58689: IFTRUE 58693
58691: GO 58719
58693: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
58694: LD_ADDR_VAR 0 3
58698: PUSH
58699: LD_INT 2
58701: PUSH
58702: LD_INT 3
58704: PUSH
58705: LD_INT 4
58707: PUSH
58708: LD_INT 5
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
58717: GO 59576
58719: LD_INT 9
58721: DOUBLE
58722: EQUAL
58723: IFTRUE 58727
58725: GO 58753
58727: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
58728: LD_ADDR_VAR 0 3
58732: PUSH
58733: LD_INT 2
58735: PUSH
58736: LD_INT 3
58738: PUSH
58739: LD_INT 4
58741: PUSH
58742: LD_INT 5
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: ST_TO_ADDR
58751: GO 59576
58753: LD_INT 7
58755: DOUBLE
58756: EQUAL
58757: IFTRUE 58761
58759: GO 58787
58761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
58762: LD_ADDR_VAR 0 3
58766: PUSH
58767: LD_INT 2
58769: PUSH
58770: LD_INT 3
58772: PUSH
58773: LD_INT 4
58775: PUSH
58776: LD_INT 5
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: ST_TO_ADDR
58785: GO 59576
58787: LD_INT 12
58789: DOUBLE
58790: EQUAL
58791: IFTRUE 58795
58793: GO 58821
58795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
58796: LD_ADDR_VAR 0 3
58800: PUSH
58801: LD_INT 2
58803: PUSH
58804: LD_INT 3
58806: PUSH
58807: LD_INT 4
58809: PUSH
58810: LD_INT 5
58812: PUSH
58813: EMPTY
58814: LIST
58815: LIST
58816: LIST
58817: LIST
58818: ST_TO_ADDR
58819: GO 59576
58821: LD_INT 13
58823: DOUBLE
58824: EQUAL
58825: IFTRUE 58829
58827: GO 58855
58829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
58830: LD_ADDR_VAR 0 3
58834: PUSH
58835: LD_INT 2
58837: PUSH
58838: LD_INT 3
58840: PUSH
58841: LD_INT 4
58843: PUSH
58844: LD_INT 5
58846: PUSH
58847: EMPTY
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: ST_TO_ADDR
58853: GO 59576
58855: LD_INT 14
58857: DOUBLE
58858: EQUAL
58859: IFTRUE 58863
58861: GO 58881
58863: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
58864: LD_ADDR_VAR 0 3
58868: PUSH
58869: LD_INT 4
58871: PUSH
58872: LD_INT 5
58874: PUSH
58875: EMPTY
58876: LIST
58877: LIST
58878: ST_TO_ADDR
58879: GO 59576
58881: LD_INT 6
58883: DOUBLE
58884: EQUAL
58885: IFTRUE 58889
58887: GO 58907
58889: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
58890: LD_ADDR_VAR 0 3
58894: PUSH
58895: LD_INT 4
58897: PUSH
58898: LD_INT 5
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: ST_TO_ADDR
58905: GO 59576
58907: LD_INT 10
58909: DOUBLE
58910: EQUAL
58911: IFTRUE 58915
58913: GO 58933
58915: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
58916: LD_ADDR_VAR 0 3
58920: PUSH
58921: LD_INT 4
58923: PUSH
58924: LD_INT 5
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: ST_TO_ADDR
58931: GO 59576
58933: LD_INT 22
58935: DOUBLE
58936: EQUAL
58937: IFTRUE 58941
58939: GO 58967
58941: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
58942: LD_ADDR_VAR 0 3
58946: PUSH
58947: LD_INT 11
58949: PUSH
58950: LD_INT 12
58952: PUSH
58953: LD_INT 13
58955: PUSH
58956: LD_INT 14
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: LIST
58964: ST_TO_ADDR
58965: GO 59576
58967: LD_INT 23
58969: DOUBLE
58970: EQUAL
58971: IFTRUE 58975
58973: GO 59001
58975: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
58976: LD_ADDR_VAR 0 3
58980: PUSH
58981: LD_INT 11
58983: PUSH
58984: LD_INT 12
58986: PUSH
58987: LD_INT 13
58989: PUSH
58990: LD_INT 14
58992: PUSH
58993: EMPTY
58994: LIST
58995: LIST
58996: LIST
58997: LIST
58998: ST_TO_ADDR
58999: GO 59576
59001: LD_INT 24
59003: DOUBLE
59004: EQUAL
59005: IFTRUE 59009
59007: GO 59035
59009: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
59010: LD_ADDR_VAR 0 3
59014: PUSH
59015: LD_INT 11
59017: PUSH
59018: LD_INT 12
59020: PUSH
59021: LD_INT 13
59023: PUSH
59024: LD_INT 14
59026: PUSH
59027: EMPTY
59028: LIST
59029: LIST
59030: LIST
59031: LIST
59032: ST_TO_ADDR
59033: GO 59576
59035: LD_INT 30
59037: DOUBLE
59038: EQUAL
59039: IFTRUE 59043
59041: GO 59069
59043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
59044: LD_ADDR_VAR 0 3
59048: PUSH
59049: LD_INT 11
59051: PUSH
59052: LD_INT 12
59054: PUSH
59055: LD_INT 13
59057: PUSH
59058: LD_INT 14
59060: PUSH
59061: EMPTY
59062: LIST
59063: LIST
59064: LIST
59065: LIST
59066: ST_TO_ADDR
59067: GO 59576
59069: LD_INT 25
59071: DOUBLE
59072: EQUAL
59073: IFTRUE 59077
59075: GO 59095
59077: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
59078: LD_ADDR_VAR 0 3
59082: PUSH
59083: LD_INT 13
59085: PUSH
59086: LD_INT 14
59088: PUSH
59089: EMPTY
59090: LIST
59091: LIST
59092: ST_TO_ADDR
59093: GO 59576
59095: LD_INT 27
59097: DOUBLE
59098: EQUAL
59099: IFTRUE 59103
59101: GO 59121
59103: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
59104: LD_ADDR_VAR 0 3
59108: PUSH
59109: LD_INT 13
59111: PUSH
59112: LD_INT 14
59114: PUSH
59115: EMPTY
59116: LIST
59117: LIST
59118: ST_TO_ADDR
59119: GO 59576
59121: LD_INT 92
59123: DOUBLE
59124: EQUAL
59125: IFTRUE 59129
59127: GO 59155
59129: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
59130: LD_ADDR_VAR 0 3
59134: PUSH
59135: LD_INT 11
59137: PUSH
59138: LD_INT 12
59140: PUSH
59141: LD_INT 13
59143: PUSH
59144: LD_INT 14
59146: PUSH
59147: EMPTY
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: ST_TO_ADDR
59153: GO 59576
59155: LD_INT 28
59157: DOUBLE
59158: EQUAL
59159: IFTRUE 59163
59161: GO 59181
59163: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
59164: LD_ADDR_VAR 0 3
59168: PUSH
59169: LD_INT 13
59171: PUSH
59172: LD_INT 14
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: ST_TO_ADDR
59179: GO 59576
59181: LD_INT 29
59183: DOUBLE
59184: EQUAL
59185: IFTRUE 59189
59187: GO 59207
59189: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
59190: LD_ADDR_VAR 0 3
59194: PUSH
59195: LD_INT 13
59197: PUSH
59198: LD_INT 14
59200: PUSH
59201: EMPTY
59202: LIST
59203: LIST
59204: ST_TO_ADDR
59205: GO 59576
59207: LD_INT 31
59209: DOUBLE
59210: EQUAL
59211: IFTRUE 59215
59213: GO 59233
59215: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
59216: LD_ADDR_VAR 0 3
59220: PUSH
59221: LD_INT 13
59223: PUSH
59224: LD_INT 14
59226: PUSH
59227: EMPTY
59228: LIST
59229: LIST
59230: ST_TO_ADDR
59231: GO 59576
59233: LD_INT 26
59235: DOUBLE
59236: EQUAL
59237: IFTRUE 59241
59239: GO 59259
59241: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
59242: LD_ADDR_VAR 0 3
59246: PUSH
59247: LD_INT 13
59249: PUSH
59250: LD_INT 14
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: ST_TO_ADDR
59257: GO 59576
59259: LD_INT 42
59261: DOUBLE
59262: EQUAL
59263: IFTRUE 59267
59265: GO 59293
59267: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
59268: LD_ADDR_VAR 0 3
59272: PUSH
59273: LD_INT 21
59275: PUSH
59276: LD_INT 22
59278: PUSH
59279: LD_INT 23
59281: PUSH
59282: LD_INT 24
59284: PUSH
59285: EMPTY
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: ST_TO_ADDR
59291: GO 59576
59293: LD_INT 43
59295: DOUBLE
59296: EQUAL
59297: IFTRUE 59301
59299: GO 59327
59301: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
59302: LD_ADDR_VAR 0 3
59306: PUSH
59307: LD_INT 21
59309: PUSH
59310: LD_INT 22
59312: PUSH
59313: LD_INT 23
59315: PUSH
59316: LD_INT 24
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: LIST
59323: LIST
59324: ST_TO_ADDR
59325: GO 59576
59327: LD_INT 44
59329: DOUBLE
59330: EQUAL
59331: IFTRUE 59335
59333: GO 59361
59335: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
59336: LD_ADDR_VAR 0 3
59340: PUSH
59341: LD_INT 21
59343: PUSH
59344: LD_INT 22
59346: PUSH
59347: LD_INT 23
59349: PUSH
59350: LD_INT 24
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: LIST
59357: LIST
59358: ST_TO_ADDR
59359: GO 59576
59361: LD_INT 45
59363: DOUBLE
59364: EQUAL
59365: IFTRUE 59369
59367: GO 59395
59369: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
59370: LD_ADDR_VAR 0 3
59374: PUSH
59375: LD_INT 21
59377: PUSH
59378: LD_INT 22
59380: PUSH
59381: LD_INT 23
59383: PUSH
59384: LD_INT 24
59386: PUSH
59387: EMPTY
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: ST_TO_ADDR
59393: GO 59576
59395: LD_INT 49
59397: DOUBLE
59398: EQUAL
59399: IFTRUE 59403
59401: GO 59429
59403: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
59404: LD_ADDR_VAR 0 3
59408: PUSH
59409: LD_INT 21
59411: PUSH
59412: LD_INT 22
59414: PUSH
59415: LD_INT 23
59417: PUSH
59418: LD_INT 24
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: ST_TO_ADDR
59427: GO 59576
59429: LD_INT 51
59431: DOUBLE
59432: EQUAL
59433: IFTRUE 59437
59435: GO 59463
59437: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
59438: LD_ADDR_VAR 0 3
59442: PUSH
59443: LD_INT 21
59445: PUSH
59446: LD_INT 22
59448: PUSH
59449: LD_INT 23
59451: PUSH
59452: LD_INT 24
59454: PUSH
59455: EMPTY
59456: LIST
59457: LIST
59458: LIST
59459: LIST
59460: ST_TO_ADDR
59461: GO 59576
59463: LD_INT 52
59465: DOUBLE
59466: EQUAL
59467: IFTRUE 59471
59469: GO 59497
59471: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
59472: LD_ADDR_VAR 0 3
59476: PUSH
59477: LD_INT 21
59479: PUSH
59480: LD_INT 22
59482: PUSH
59483: LD_INT 23
59485: PUSH
59486: LD_INT 24
59488: PUSH
59489: EMPTY
59490: LIST
59491: LIST
59492: LIST
59493: LIST
59494: ST_TO_ADDR
59495: GO 59576
59497: LD_INT 53
59499: DOUBLE
59500: EQUAL
59501: IFTRUE 59505
59503: GO 59523
59505: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
59506: LD_ADDR_VAR 0 3
59510: PUSH
59511: LD_INT 23
59513: PUSH
59514: LD_INT 24
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: ST_TO_ADDR
59521: GO 59576
59523: LD_INT 46
59525: DOUBLE
59526: EQUAL
59527: IFTRUE 59531
59529: GO 59549
59531: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
59532: LD_ADDR_VAR 0 3
59536: PUSH
59537: LD_INT 23
59539: PUSH
59540: LD_INT 24
59542: PUSH
59543: EMPTY
59544: LIST
59545: LIST
59546: ST_TO_ADDR
59547: GO 59576
59549: LD_INT 47
59551: DOUBLE
59552: EQUAL
59553: IFTRUE 59557
59555: GO 59575
59557: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
59558: LD_ADDR_VAR 0 3
59562: PUSH
59563: LD_INT 23
59565: PUSH
59566: LD_INT 24
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: ST_TO_ADDR
59573: GO 59576
59575: POP
// result := ( chassis in result ) ;
59576: LD_ADDR_VAR 0 3
59580: PUSH
59581: LD_VAR 0 1
59585: PUSH
59586: LD_VAR 0 3
59590: IN
59591: ST_TO_ADDR
// end ;
59592: LD_VAR 0 3
59596: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
59597: LD_INT 0
59599: PPUSH
59600: PPUSH
59601: PPUSH
59602: PPUSH
59603: PPUSH
59604: PPUSH
59605: PPUSH
// result := array ;
59606: LD_ADDR_VAR 0 5
59610: PUSH
59611: LD_VAR 0 1
59615: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
59616: LD_VAR 0 1
59620: NOT
59621: PUSH
59622: LD_VAR 0 2
59626: NOT
59627: OR
59628: PUSH
59629: LD_VAR 0 3
59633: NOT
59634: OR
59635: PUSH
59636: LD_VAR 0 2
59640: PUSH
59641: LD_VAR 0 1
59645: GREATER
59646: OR
59647: PUSH
59648: LD_VAR 0 3
59652: PUSH
59653: LD_VAR 0 1
59657: GREATER
59658: OR
59659: IFFALSE 59663
// exit ;
59661: GO 59959
// if direction then
59663: LD_VAR 0 4
59667: IFFALSE 59731
// begin d := 1 ;
59669: LD_ADDR_VAR 0 9
59673: PUSH
59674: LD_INT 1
59676: ST_TO_ADDR
// if i_from > i_to then
59677: LD_VAR 0 2
59681: PUSH
59682: LD_VAR 0 3
59686: GREATER
59687: IFFALSE 59713
// length := ( array - i_from ) + i_to else
59689: LD_ADDR_VAR 0 11
59693: PUSH
59694: LD_VAR 0 1
59698: PUSH
59699: LD_VAR 0 2
59703: MINUS
59704: PUSH
59705: LD_VAR 0 3
59709: PLUS
59710: ST_TO_ADDR
59711: GO 59729
// length := i_to - i_from ;
59713: LD_ADDR_VAR 0 11
59717: PUSH
59718: LD_VAR 0 3
59722: PUSH
59723: LD_VAR 0 2
59727: MINUS
59728: ST_TO_ADDR
// end else
59729: GO 59792
// begin d := - 1 ;
59731: LD_ADDR_VAR 0 9
59735: PUSH
59736: LD_INT 1
59738: NEG
59739: ST_TO_ADDR
// if i_from > i_to then
59740: LD_VAR 0 2
59744: PUSH
59745: LD_VAR 0 3
59749: GREATER
59750: IFFALSE 59770
// length := i_from - i_to else
59752: LD_ADDR_VAR 0 11
59756: PUSH
59757: LD_VAR 0 2
59761: PUSH
59762: LD_VAR 0 3
59766: MINUS
59767: ST_TO_ADDR
59768: GO 59792
// length := ( array - i_to ) + i_from ;
59770: LD_ADDR_VAR 0 11
59774: PUSH
59775: LD_VAR 0 1
59779: PUSH
59780: LD_VAR 0 3
59784: MINUS
59785: PUSH
59786: LD_VAR 0 2
59790: PLUS
59791: ST_TO_ADDR
// end ; if not length then
59792: LD_VAR 0 11
59796: NOT
59797: IFFALSE 59801
// exit ;
59799: GO 59959
// tmp := array ;
59801: LD_ADDR_VAR 0 10
59805: PUSH
59806: LD_VAR 0 1
59810: ST_TO_ADDR
// for i = 1 to length do
59811: LD_ADDR_VAR 0 6
59815: PUSH
59816: DOUBLE
59817: LD_INT 1
59819: DEC
59820: ST_TO_ADDR
59821: LD_VAR 0 11
59825: PUSH
59826: FOR_TO
59827: IFFALSE 59947
// begin for j = 1 to array do
59829: LD_ADDR_VAR 0 7
59833: PUSH
59834: DOUBLE
59835: LD_INT 1
59837: DEC
59838: ST_TO_ADDR
59839: LD_VAR 0 1
59843: PUSH
59844: FOR_TO
59845: IFFALSE 59933
// begin k := j + d ;
59847: LD_ADDR_VAR 0 8
59851: PUSH
59852: LD_VAR 0 7
59856: PUSH
59857: LD_VAR 0 9
59861: PLUS
59862: ST_TO_ADDR
// if k > array then
59863: LD_VAR 0 8
59867: PUSH
59868: LD_VAR 0 1
59872: GREATER
59873: IFFALSE 59883
// k := 1 ;
59875: LD_ADDR_VAR 0 8
59879: PUSH
59880: LD_INT 1
59882: ST_TO_ADDR
// if not k then
59883: LD_VAR 0 8
59887: NOT
59888: IFFALSE 59900
// k := array ;
59890: LD_ADDR_VAR 0 8
59894: PUSH
59895: LD_VAR 0 1
59899: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
59900: LD_ADDR_VAR 0 10
59904: PUSH
59905: LD_VAR 0 10
59909: PPUSH
59910: LD_VAR 0 8
59914: PPUSH
59915: LD_VAR 0 1
59919: PUSH
59920: LD_VAR 0 7
59924: ARRAY
59925: PPUSH
59926: CALL_OW 1
59930: ST_TO_ADDR
// end ;
59931: GO 59844
59933: POP
59934: POP
// array := tmp ;
59935: LD_ADDR_VAR 0 1
59939: PUSH
59940: LD_VAR 0 10
59944: ST_TO_ADDR
// end ;
59945: GO 59826
59947: POP
59948: POP
// result := array ;
59949: LD_ADDR_VAR 0 5
59953: PUSH
59954: LD_VAR 0 1
59958: ST_TO_ADDR
// end ;
59959: LD_VAR 0 5
59963: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
59964: LD_INT 0
59966: PPUSH
59967: PPUSH
// result := 0 ;
59968: LD_ADDR_VAR 0 3
59972: PUSH
59973: LD_INT 0
59975: ST_TO_ADDR
// if not array or not value in array then
59976: LD_VAR 0 1
59980: NOT
59981: PUSH
59982: LD_VAR 0 2
59986: PUSH
59987: LD_VAR 0 1
59991: IN
59992: NOT
59993: OR
59994: IFFALSE 59998
// exit ;
59996: GO 60052
// for i = 1 to array do
59998: LD_ADDR_VAR 0 4
60002: PUSH
60003: DOUBLE
60004: LD_INT 1
60006: DEC
60007: ST_TO_ADDR
60008: LD_VAR 0 1
60012: PUSH
60013: FOR_TO
60014: IFFALSE 60050
// if value = array [ i ] then
60016: LD_VAR 0 2
60020: PUSH
60021: LD_VAR 0 1
60025: PUSH
60026: LD_VAR 0 4
60030: ARRAY
60031: EQUAL
60032: IFFALSE 60048
// begin result := i ;
60034: LD_ADDR_VAR 0 3
60038: PUSH
60039: LD_VAR 0 4
60043: ST_TO_ADDR
// exit ;
60044: POP
60045: POP
60046: GO 60052
// end ;
60048: GO 60013
60050: POP
60051: POP
// end ;
60052: LD_VAR 0 3
60056: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
60057: LD_INT 0
60059: PPUSH
// vc_chassis := chassis ;
60060: LD_ADDR_OWVAR 37
60064: PUSH
60065: LD_VAR 0 1
60069: ST_TO_ADDR
// vc_engine := engine ;
60070: LD_ADDR_OWVAR 39
60074: PUSH
60075: LD_VAR 0 2
60079: ST_TO_ADDR
// vc_control := control ;
60080: LD_ADDR_OWVAR 38
60084: PUSH
60085: LD_VAR 0 3
60089: ST_TO_ADDR
// vc_weapon := weapon ;
60090: LD_ADDR_OWVAR 40
60094: PUSH
60095: LD_VAR 0 4
60099: ST_TO_ADDR
// vc_fuel_battery := fuel ;
60100: LD_ADDR_OWVAR 41
60104: PUSH
60105: LD_VAR 0 5
60109: ST_TO_ADDR
// end ;
60110: LD_VAR 0 6
60114: RET
// export function WantPlant ( unit ) ; var task ; begin
60115: LD_INT 0
60117: PPUSH
60118: PPUSH
// result := false ;
60119: LD_ADDR_VAR 0 2
60123: PUSH
60124: LD_INT 0
60126: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
60127: LD_ADDR_VAR 0 3
60131: PUSH
60132: LD_VAR 0 1
60136: PPUSH
60137: CALL_OW 437
60141: ST_TO_ADDR
// if task then
60142: LD_VAR 0 3
60146: IFFALSE 60174
// if task [ 1 ] [ 1 ] = p then
60148: LD_VAR 0 3
60152: PUSH
60153: LD_INT 1
60155: ARRAY
60156: PUSH
60157: LD_INT 1
60159: ARRAY
60160: PUSH
60161: LD_STRING p
60163: EQUAL
60164: IFFALSE 60174
// result := true ;
60166: LD_ADDR_VAR 0 2
60170: PUSH
60171: LD_INT 1
60173: ST_TO_ADDR
// end ;
60174: LD_VAR 0 2
60178: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
60179: LD_INT 0
60181: PPUSH
60182: PPUSH
60183: PPUSH
60184: PPUSH
// if pos < 1 then
60185: LD_VAR 0 2
60189: PUSH
60190: LD_INT 1
60192: LESS
60193: IFFALSE 60197
// exit ;
60195: GO 60500
// if pos = 1 then
60197: LD_VAR 0 2
60201: PUSH
60202: LD_INT 1
60204: EQUAL
60205: IFFALSE 60238
// result := Replace ( arr , pos [ 1 ] , value ) else
60207: LD_ADDR_VAR 0 4
60211: PUSH
60212: LD_VAR 0 1
60216: PPUSH
60217: LD_VAR 0 2
60221: PUSH
60222: LD_INT 1
60224: ARRAY
60225: PPUSH
60226: LD_VAR 0 3
60230: PPUSH
60231: CALL_OW 1
60235: ST_TO_ADDR
60236: GO 60500
// begin tmp := arr ;
60238: LD_ADDR_VAR 0 6
60242: PUSH
60243: LD_VAR 0 1
60247: ST_TO_ADDR
// s_arr := [ tmp ] ;
60248: LD_ADDR_VAR 0 7
60252: PUSH
60253: LD_VAR 0 6
60257: PUSH
60258: EMPTY
60259: LIST
60260: ST_TO_ADDR
// for i = 1 to pos - 1 do
60261: LD_ADDR_VAR 0 5
60265: PUSH
60266: DOUBLE
60267: LD_INT 1
60269: DEC
60270: ST_TO_ADDR
60271: LD_VAR 0 2
60275: PUSH
60276: LD_INT 1
60278: MINUS
60279: PUSH
60280: FOR_TO
60281: IFFALSE 60326
// begin tmp := tmp [ pos [ i ] ] ;
60283: LD_ADDR_VAR 0 6
60287: PUSH
60288: LD_VAR 0 6
60292: PUSH
60293: LD_VAR 0 2
60297: PUSH
60298: LD_VAR 0 5
60302: ARRAY
60303: ARRAY
60304: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
60305: LD_ADDR_VAR 0 7
60309: PUSH
60310: LD_VAR 0 7
60314: PUSH
60315: LD_VAR 0 6
60319: PUSH
60320: EMPTY
60321: LIST
60322: ADD
60323: ST_TO_ADDR
// end ;
60324: GO 60280
60326: POP
60327: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
60328: LD_ADDR_VAR 0 6
60332: PUSH
60333: LD_VAR 0 6
60337: PPUSH
60338: LD_VAR 0 2
60342: PUSH
60343: LD_VAR 0 2
60347: ARRAY
60348: PPUSH
60349: LD_VAR 0 3
60353: PPUSH
60354: CALL_OW 1
60358: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
60359: LD_ADDR_VAR 0 7
60363: PUSH
60364: LD_VAR 0 7
60368: PPUSH
60369: LD_VAR 0 7
60373: PPUSH
60374: LD_VAR 0 6
60378: PPUSH
60379: CALL_OW 1
60383: ST_TO_ADDR
// for i = s_arr downto 2 do
60384: LD_ADDR_VAR 0 5
60388: PUSH
60389: DOUBLE
60390: LD_VAR 0 7
60394: INC
60395: ST_TO_ADDR
60396: LD_INT 2
60398: PUSH
60399: FOR_DOWNTO
60400: IFFALSE 60484
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
60402: LD_ADDR_VAR 0 6
60406: PUSH
60407: LD_VAR 0 7
60411: PUSH
60412: LD_VAR 0 5
60416: PUSH
60417: LD_INT 1
60419: MINUS
60420: ARRAY
60421: PPUSH
60422: LD_VAR 0 2
60426: PUSH
60427: LD_VAR 0 5
60431: PUSH
60432: LD_INT 1
60434: MINUS
60435: ARRAY
60436: PPUSH
60437: LD_VAR 0 7
60441: PUSH
60442: LD_VAR 0 5
60446: ARRAY
60447: PPUSH
60448: CALL_OW 1
60452: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
60453: LD_ADDR_VAR 0 7
60457: PUSH
60458: LD_VAR 0 7
60462: PPUSH
60463: LD_VAR 0 5
60467: PUSH
60468: LD_INT 1
60470: MINUS
60471: PPUSH
60472: LD_VAR 0 6
60476: PPUSH
60477: CALL_OW 1
60481: ST_TO_ADDR
// end ;
60482: GO 60399
60484: POP
60485: POP
// result := s_arr [ 1 ] ;
60486: LD_ADDR_VAR 0 4
60490: PUSH
60491: LD_VAR 0 7
60495: PUSH
60496: LD_INT 1
60498: ARRAY
60499: ST_TO_ADDR
// end ; end ;
60500: LD_VAR 0 4
60504: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
60505: LD_INT 0
60507: PPUSH
60508: PPUSH
// if not list then
60509: LD_VAR 0 1
60513: NOT
60514: IFFALSE 60518
// exit ;
60516: GO 60609
// i := list [ pos1 ] ;
60518: LD_ADDR_VAR 0 5
60522: PUSH
60523: LD_VAR 0 1
60527: PUSH
60528: LD_VAR 0 2
60532: ARRAY
60533: ST_TO_ADDR
// if not i then
60534: LD_VAR 0 5
60538: NOT
60539: IFFALSE 60543
// exit ;
60541: GO 60609
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
60543: LD_ADDR_VAR 0 1
60547: PUSH
60548: LD_VAR 0 1
60552: PPUSH
60553: LD_VAR 0 2
60557: PPUSH
60558: LD_VAR 0 1
60562: PUSH
60563: LD_VAR 0 3
60567: ARRAY
60568: PPUSH
60569: CALL_OW 1
60573: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
60574: LD_ADDR_VAR 0 1
60578: PUSH
60579: LD_VAR 0 1
60583: PPUSH
60584: LD_VAR 0 3
60588: PPUSH
60589: LD_VAR 0 5
60593: PPUSH
60594: CALL_OW 1
60598: ST_TO_ADDR
// result := list ;
60599: LD_ADDR_VAR 0 4
60603: PUSH
60604: LD_VAR 0 1
60608: ST_TO_ADDR
// end ;
60609: LD_VAR 0 4
60613: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
60614: LD_INT 0
60616: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
60617: LD_ADDR_VAR 0 5
60621: PUSH
60622: LD_VAR 0 1
60626: PPUSH
60627: CALL_OW 250
60631: PPUSH
60632: LD_VAR 0 1
60636: PPUSH
60637: CALL_OW 251
60641: PPUSH
60642: LD_VAR 0 2
60646: PPUSH
60647: LD_VAR 0 3
60651: PPUSH
60652: LD_VAR 0 4
60656: PPUSH
60657: CALL 61035 0 5
60661: ST_TO_ADDR
// end ;
60662: LD_VAR 0 5
60666: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
60667: LD_INT 0
60669: PPUSH
60670: PPUSH
60671: PPUSH
60672: PPUSH
// if not list or not unit then
60673: LD_VAR 0 2
60677: NOT
60678: PUSH
60679: LD_VAR 0 1
60683: NOT
60684: OR
60685: IFFALSE 60689
// exit ;
60687: GO 61030
// result := [ ] ;
60689: LD_ADDR_VAR 0 5
60693: PUSH
60694: EMPTY
60695: ST_TO_ADDR
// for i in list do
60696: LD_ADDR_VAR 0 6
60700: PUSH
60701: LD_VAR 0 2
60705: PUSH
60706: FOR_IN
60707: IFFALSE 60925
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60709: LD_ADDR_VAR 0 8
60713: PUSH
60714: LD_VAR 0 1
60718: PPUSH
60719: LD_VAR 0 6
60723: PUSH
60724: LD_INT 1
60726: ARRAY
60727: PPUSH
60728: LD_VAR 0 6
60732: PUSH
60733: LD_INT 2
60735: ARRAY
60736: PPUSH
60737: CALL_OW 297
60741: ST_TO_ADDR
// if not Count ( result ) then
60742: LD_VAR 0 5
60746: PPUSH
60747: CALL 57319 0 1
60751: NOT
60752: IFFALSE 60785
// begin result := Join ( result , [ i , tmp ] ) ;
60754: LD_ADDR_VAR 0 5
60758: PUSH
60759: LD_VAR 0 5
60763: PPUSH
60764: LD_VAR 0 6
60768: PUSH
60769: LD_VAR 0 8
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PPUSH
60778: CALL 92928 0 2
60782: ST_TO_ADDR
// continue ;
60783: GO 60706
// end ; if result [ result ] [ 2 ] <= tmp then
60785: LD_VAR 0 5
60789: PUSH
60790: LD_VAR 0 5
60794: ARRAY
60795: PUSH
60796: LD_INT 2
60798: ARRAY
60799: PUSH
60800: LD_VAR 0 8
60804: LESSEQUAL
60805: IFFALSE 60838
// result := Join ( result , [ i , tmp ] ) else
60807: LD_ADDR_VAR 0 5
60811: PUSH
60812: LD_VAR 0 5
60816: PPUSH
60817: LD_VAR 0 6
60821: PUSH
60822: LD_VAR 0 8
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PPUSH
60831: CALL 92928 0 2
60835: ST_TO_ADDR
60836: GO 60923
// begin for j := 1 to Count ( result ) do
60838: LD_ADDR_VAR 0 7
60842: PUSH
60843: DOUBLE
60844: LD_INT 1
60846: DEC
60847: ST_TO_ADDR
60848: LD_VAR 0 5
60852: PPUSH
60853: CALL 57319 0 1
60857: PUSH
60858: FOR_TO
60859: IFFALSE 60921
// begin if tmp < result [ j ] [ 2 ] then
60861: LD_VAR 0 8
60865: PUSH
60866: LD_VAR 0 5
60870: PUSH
60871: LD_VAR 0 7
60875: ARRAY
60876: PUSH
60877: LD_INT 2
60879: ARRAY
60880: LESS
60881: IFFALSE 60919
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60883: LD_ADDR_VAR 0 5
60887: PUSH
60888: LD_VAR 0 5
60892: PPUSH
60893: LD_VAR 0 7
60897: PPUSH
60898: LD_VAR 0 6
60902: PUSH
60903: LD_VAR 0 8
60907: PUSH
60908: EMPTY
60909: LIST
60910: LIST
60911: PPUSH
60912: CALL_OW 2
60916: ST_TO_ADDR
// break ;
60917: GO 60921
// end ; end ;
60919: GO 60858
60921: POP
60922: POP
// end ; end ;
60923: GO 60706
60925: POP
60926: POP
// if result and not asc then
60927: LD_VAR 0 5
60931: PUSH
60932: LD_VAR 0 3
60936: NOT
60937: AND
60938: IFFALSE 60955
// result := ReverseArray ( result ) ;
60940: LD_ADDR_VAR 0 5
60944: PUSH
60945: LD_VAR 0 5
60949: PPUSH
60950: CALL 88195 0 1
60954: ST_TO_ADDR
// tmp := [ ] ;
60955: LD_ADDR_VAR 0 8
60959: PUSH
60960: EMPTY
60961: ST_TO_ADDR
// if mode then
60962: LD_VAR 0 4
60966: IFFALSE 61030
// begin for i := 1 to result do
60968: LD_ADDR_VAR 0 6
60972: PUSH
60973: DOUBLE
60974: LD_INT 1
60976: DEC
60977: ST_TO_ADDR
60978: LD_VAR 0 5
60982: PUSH
60983: FOR_TO
60984: IFFALSE 61018
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
60986: LD_ADDR_VAR 0 8
60990: PUSH
60991: LD_VAR 0 8
60995: PPUSH
60996: LD_VAR 0 5
61000: PUSH
61001: LD_VAR 0 6
61005: ARRAY
61006: PUSH
61007: LD_INT 1
61009: ARRAY
61010: PPUSH
61011: CALL 92928 0 2
61015: ST_TO_ADDR
61016: GO 60983
61018: POP
61019: POP
// result := tmp ;
61020: LD_ADDR_VAR 0 5
61024: PUSH
61025: LD_VAR 0 8
61029: ST_TO_ADDR
// end ; end ;
61030: LD_VAR 0 5
61034: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
61035: LD_INT 0
61037: PPUSH
61038: PPUSH
61039: PPUSH
61040: PPUSH
// if not list then
61041: LD_VAR 0 3
61045: NOT
61046: IFFALSE 61050
// exit ;
61048: GO 61438
// result := [ ] ;
61050: LD_ADDR_VAR 0 6
61054: PUSH
61055: EMPTY
61056: ST_TO_ADDR
// for i in list do
61057: LD_ADDR_VAR 0 7
61061: PUSH
61062: LD_VAR 0 3
61066: PUSH
61067: FOR_IN
61068: IFFALSE 61270
// begin tmp := GetDistUnitXY ( i , x , y ) ;
61070: LD_ADDR_VAR 0 9
61074: PUSH
61075: LD_VAR 0 7
61079: PPUSH
61080: LD_VAR 0 1
61084: PPUSH
61085: LD_VAR 0 2
61089: PPUSH
61090: CALL_OW 297
61094: ST_TO_ADDR
// if not result then
61095: LD_VAR 0 6
61099: NOT
61100: IFFALSE 61126
// result := [ [ i , tmp ] ] else
61102: LD_ADDR_VAR 0 6
61106: PUSH
61107: LD_VAR 0 7
61111: PUSH
61112: LD_VAR 0 9
61116: PUSH
61117: EMPTY
61118: LIST
61119: LIST
61120: PUSH
61121: EMPTY
61122: LIST
61123: ST_TO_ADDR
61124: GO 61268
// begin if result [ result ] [ 2 ] <= tmp then
61126: LD_VAR 0 6
61130: PUSH
61131: LD_VAR 0 6
61135: ARRAY
61136: PUSH
61137: LD_INT 2
61139: ARRAY
61140: PUSH
61141: LD_VAR 0 9
61145: LESSEQUAL
61146: IFFALSE 61188
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
61148: LD_ADDR_VAR 0 6
61152: PUSH
61153: LD_VAR 0 6
61157: PPUSH
61158: LD_VAR 0 6
61162: PUSH
61163: LD_INT 1
61165: PLUS
61166: PPUSH
61167: LD_VAR 0 7
61171: PUSH
61172: LD_VAR 0 9
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: PPUSH
61181: CALL_OW 2
61185: ST_TO_ADDR
61186: GO 61268
// for j := 1 to result do
61188: LD_ADDR_VAR 0 8
61192: PUSH
61193: DOUBLE
61194: LD_INT 1
61196: DEC
61197: ST_TO_ADDR
61198: LD_VAR 0 6
61202: PUSH
61203: FOR_TO
61204: IFFALSE 61266
// begin if tmp < result [ j ] [ 2 ] then
61206: LD_VAR 0 9
61210: PUSH
61211: LD_VAR 0 6
61215: PUSH
61216: LD_VAR 0 8
61220: ARRAY
61221: PUSH
61222: LD_INT 2
61224: ARRAY
61225: LESS
61226: IFFALSE 61264
// begin result := Insert ( result , j , [ i , tmp ] ) ;
61228: LD_ADDR_VAR 0 6
61232: PUSH
61233: LD_VAR 0 6
61237: PPUSH
61238: LD_VAR 0 8
61242: PPUSH
61243: LD_VAR 0 7
61247: PUSH
61248: LD_VAR 0 9
61252: PUSH
61253: EMPTY
61254: LIST
61255: LIST
61256: PPUSH
61257: CALL_OW 2
61261: ST_TO_ADDR
// break ;
61262: GO 61266
// end ; end ;
61264: GO 61203
61266: POP
61267: POP
// end ; end ;
61268: GO 61067
61270: POP
61271: POP
// if result and not asc then
61272: LD_VAR 0 6
61276: PUSH
61277: LD_VAR 0 4
61281: NOT
61282: AND
61283: IFFALSE 61358
// begin tmp := result ;
61285: LD_ADDR_VAR 0 9
61289: PUSH
61290: LD_VAR 0 6
61294: ST_TO_ADDR
// for i = tmp downto 1 do
61295: LD_ADDR_VAR 0 7
61299: PUSH
61300: DOUBLE
61301: LD_VAR 0 9
61305: INC
61306: ST_TO_ADDR
61307: LD_INT 1
61309: PUSH
61310: FOR_DOWNTO
61311: IFFALSE 61356
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
61313: LD_ADDR_VAR 0 6
61317: PUSH
61318: LD_VAR 0 6
61322: PPUSH
61323: LD_VAR 0 9
61327: PUSH
61328: LD_VAR 0 7
61332: MINUS
61333: PUSH
61334: LD_INT 1
61336: PLUS
61337: PPUSH
61338: LD_VAR 0 9
61342: PUSH
61343: LD_VAR 0 7
61347: ARRAY
61348: PPUSH
61349: CALL_OW 1
61353: ST_TO_ADDR
61354: GO 61310
61356: POP
61357: POP
// end ; tmp := [ ] ;
61358: LD_ADDR_VAR 0 9
61362: PUSH
61363: EMPTY
61364: ST_TO_ADDR
// if mode then
61365: LD_VAR 0 5
61369: IFFALSE 61438
// begin for i = 1 to result do
61371: LD_ADDR_VAR 0 7
61375: PUSH
61376: DOUBLE
61377: LD_INT 1
61379: DEC
61380: ST_TO_ADDR
61381: LD_VAR 0 6
61385: PUSH
61386: FOR_TO
61387: IFFALSE 61426
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
61389: LD_ADDR_VAR 0 9
61393: PUSH
61394: LD_VAR 0 9
61398: PPUSH
61399: LD_VAR 0 7
61403: PPUSH
61404: LD_VAR 0 6
61408: PUSH
61409: LD_VAR 0 7
61413: ARRAY
61414: PUSH
61415: LD_INT 1
61417: ARRAY
61418: PPUSH
61419: CALL_OW 1
61423: ST_TO_ADDR
61424: GO 61386
61426: POP
61427: POP
// result := tmp ;
61428: LD_ADDR_VAR 0 6
61432: PUSH
61433: LD_VAR 0 9
61437: ST_TO_ADDR
// end ; end ;
61438: LD_VAR 0 6
61442: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
61443: LD_INT 0
61445: PPUSH
61446: PPUSH
61447: PPUSH
61448: PPUSH
61449: PPUSH
61450: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
61451: LD_ADDR_VAR 0 5
61455: PUSH
61456: LD_INT 0
61458: PUSH
61459: LD_INT 0
61461: PUSH
61462: LD_INT 0
61464: PUSH
61465: EMPTY
61466: PUSH
61467: EMPTY
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: ST_TO_ADDR
// if not x or not y then
61473: LD_VAR 0 2
61477: NOT
61478: PUSH
61479: LD_VAR 0 3
61483: NOT
61484: OR
61485: IFFALSE 61489
// exit ;
61487: GO 63139
// if not range then
61489: LD_VAR 0 4
61493: NOT
61494: IFFALSE 61504
// range := 10 ;
61496: LD_ADDR_VAR 0 4
61500: PUSH
61501: LD_INT 10
61503: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
61504: LD_ADDR_VAR 0 8
61508: PUSH
61509: LD_INT 81
61511: PUSH
61512: LD_VAR 0 1
61516: PUSH
61517: EMPTY
61518: LIST
61519: LIST
61520: PUSH
61521: LD_INT 92
61523: PUSH
61524: LD_VAR 0 2
61528: PUSH
61529: LD_VAR 0 3
61533: PUSH
61534: LD_VAR 0 4
61538: PUSH
61539: EMPTY
61540: LIST
61541: LIST
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 3
61547: PUSH
61548: LD_INT 21
61550: PUSH
61551: LD_INT 3
61553: PUSH
61554: EMPTY
61555: LIST
61556: LIST
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: EMPTY
61563: LIST
61564: LIST
61565: LIST
61566: PPUSH
61567: CALL_OW 69
61571: ST_TO_ADDR
// if not tmp then
61572: LD_VAR 0 8
61576: NOT
61577: IFFALSE 61581
// exit ;
61579: GO 63139
// for i in tmp do
61581: LD_ADDR_VAR 0 6
61585: PUSH
61586: LD_VAR 0 8
61590: PUSH
61591: FOR_IN
61592: IFFALSE 63114
// begin points := [ 0 , 0 , 0 ] ;
61594: LD_ADDR_VAR 0 9
61598: PUSH
61599: LD_INT 0
61601: PUSH
61602: LD_INT 0
61604: PUSH
61605: LD_INT 0
61607: PUSH
61608: EMPTY
61609: LIST
61610: LIST
61611: LIST
61612: ST_TO_ADDR
// bpoints := 1 ;
61613: LD_ADDR_VAR 0 10
61617: PUSH
61618: LD_INT 1
61620: ST_TO_ADDR
// case GetType ( i ) of unit_human :
61621: LD_VAR 0 6
61625: PPUSH
61626: CALL_OW 247
61630: PUSH
61631: LD_INT 1
61633: DOUBLE
61634: EQUAL
61635: IFTRUE 61639
61637: GO 62217
61639: POP
// begin if GetClass ( i ) = 1 then
61640: LD_VAR 0 6
61644: PPUSH
61645: CALL_OW 257
61649: PUSH
61650: LD_INT 1
61652: EQUAL
61653: IFFALSE 61674
// points := [ 10 , 5 , 3 ] ;
61655: LD_ADDR_VAR 0 9
61659: PUSH
61660: LD_INT 10
61662: PUSH
61663: LD_INT 5
61665: PUSH
61666: LD_INT 3
61668: PUSH
61669: EMPTY
61670: LIST
61671: LIST
61672: LIST
61673: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
61674: LD_VAR 0 6
61678: PPUSH
61679: CALL_OW 257
61683: PUSH
61684: LD_INT 2
61686: PUSH
61687: LD_INT 3
61689: PUSH
61690: LD_INT 4
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: LIST
61697: IN
61698: IFFALSE 61719
// points := [ 3 , 2 , 1 ] ;
61700: LD_ADDR_VAR 0 9
61704: PUSH
61705: LD_INT 3
61707: PUSH
61708: LD_INT 2
61710: PUSH
61711: LD_INT 1
61713: PUSH
61714: EMPTY
61715: LIST
61716: LIST
61717: LIST
61718: ST_TO_ADDR
// if GetClass ( i ) = 5 then
61719: LD_VAR 0 6
61723: PPUSH
61724: CALL_OW 257
61728: PUSH
61729: LD_INT 5
61731: EQUAL
61732: IFFALSE 61753
// points := [ 130 , 5 , 2 ] ;
61734: LD_ADDR_VAR 0 9
61738: PUSH
61739: LD_INT 130
61741: PUSH
61742: LD_INT 5
61744: PUSH
61745: LD_INT 2
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: LIST
61752: ST_TO_ADDR
// if GetClass ( i ) = 8 then
61753: LD_VAR 0 6
61757: PPUSH
61758: CALL_OW 257
61762: PUSH
61763: LD_INT 8
61765: EQUAL
61766: IFFALSE 61787
// points := [ 35 , 35 , 30 ] ;
61768: LD_ADDR_VAR 0 9
61772: PUSH
61773: LD_INT 35
61775: PUSH
61776: LD_INT 35
61778: PUSH
61779: LD_INT 30
61781: PUSH
61782: EMPTY
61783: LIST
61784: LIST
61785: LIST
61786: ST_TO_ADDR
// if GetClass ( i ) = 9 then
61787: LD_VAR 0 6
61791: PPUSH
61792: CALL_OW 257
61796: PUSH
61797: LD_INT 9
61799: EQUAL
61800: IFFALSE 61821
// points := [ 20 , 55 , 40 ] ;
61802: LD_ADDR_VAR 0 9
61806: PUSH
61807: LD_INT 20
61809: PUSH
61810: LD_INT 55
61812: PUSH
61813: LD_INT 40
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: LIST
61820: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
61821: LD_VAR 0 6
61825: PPUSH
61826: CALL_OW 257
61830: PUSH
61831: LD_INT 12
61833: PUSH
61834: LD_INT 16
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: IN
61841: IFFALSE 61862
// points := [ 5 , 3 , 2 ] ;
61843: LD_ADDR_VAR 0 9
61847: PUSH
61848: LD_INT 5
61850: PUSH
61851: LD_INT 3
61853: PUSH
61854: LD_INT 2
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: LIST
61861: ST_TO_ADDR
// if GetClass ( i ) = 17 then
61862: LD_VAR 0 6
61866: PPUSH
61867: CALL_OW 257
61871: PUSH
61872: LD_INT 17
61874: EQUAL
61875: IFFALSE 61896
// points := [ 100 , 50 , 75 ] ;
61877: LD_ADDR_VAR 0 9
61881: PUSH
61882: LD_INT 100
61884: PUSH
61885: LD_INT 50
61887: PUSH
61888: LD_INT 75
61890: PUSH
61891: EMPTY
61892: LIST
61893: LIST
61894: LIST
61895: ST_TO_ADDR
// if GetClass ( i ) = 15 then
61896: LD_VAR 0 6
61900: PPUSH
61901: CALL_OW 257
61905: PUSH
61906: LD_INT 15
61908: EQUAL
61909: IFFALSE 61930
// points := [ 10 , 5 , 3 ] ;
61911: LD_ADDR_VAR 0 9
61915: PUSH
61916: LD_INT 10
61918: PUSH
61919: LD_INT 5
61921: PUSH
61922: LD_INT 3
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: LIST
61929: ST_TO_ADDR
// if GetClass ( i ) = 14 then
61930: LD_VAR 0 6
61934: PPUSH
61935: CALL_OW 257
61939: PUSH
61940: LD_INT 14
61942: EQUAL
61943: IFFALSE 61964
// points := [ 10 , 0 , 0 ] ;
61945: LD_ADDR_VAR 0 9
61949: PUSH
61950: LD_INT 10
61952: PUSH
61953: LD_INT 0
61955: PUSH
61956: LD_INT 0
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: ST_TO_ADDR
// if GetClass ( i ) = 11 then
61964: LD_VAR 0 6
61968: PPUSH
61969: CALL_OW 257
61973: PUSH
61974: LD_INT 11
61976: EQUAL
61977: IFFALSE 61998
// points := [ 30 , 10 , 5 ] ;
61979: LD_ADDR_VAR 0 9
61983: PUSH
61984: LD_INT 30
61986: PUSH
61987: LD_INT 10
61989: PUSH
61990: LD_INT 5
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: LIST
61997: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
61998: LD_VAR 0 1
62002: PPUSH
62003: LD_INT 5
62005: PPUSH
62006: CALL_OW 321
62010: PUSH
62011: LD_INT 2
62013: EQUAL
62014: IFFALSE 62031
// bpoints := bpoints * 1.8 ;
62016: LD_ADDR_VAR 0 10
62020: PUSH
62021: LD_VAR 0 10
62025: PUSH
62026: LD_REAL  1.80000000000000E+0000
62029: MUL
62030: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
62031: LD_VAR 0 6
62035: PPUSH
62036: CALL_OW 257
62040: PUSH
62041: LD_INT 1
62043: PUSH
62044: LD_INT 2
62046: PUSH
62047: LD_INT 3
62049: PUSH
62050: LD_INT 4
62052: PUSH
62053: EMPTY
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: IN
62059: PUSH
62060: LD_VAR 0 1
62064: PPUSH
62065: LD_INT 51
62067: PPUSH
62068: CALL_OW 321
62072: PUSH
62073: LD_INT 2
62075: EQUAL
62076: AND
62077: IFFALSE 62094
// bpoints := bpoints * 1.2 ;
62079: LD_ADDR_VAR 0 10
62083: PUSH
62084: LD_VAR 0 10
62088: PUSH
62089: LD_REAL  1.20000000000000E+0000
62092: MUL
62093: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
62094: LD_VAR 0 6
62098: PPUSH
62099: CALL_OW 257
62103: PUSH
62104: LD_INT 5
62106: PUSH
62107: LD_INT 7
62109: PUSH
62110: LD_INT 9
62112: PUSH
62113: EMPTY
62114: LIST
62115: LIST
62116: LIST
62117: IN
62118: PUSH
62119: LD_VAR 0 1
62123: PPUSH
62124: LD_INT 52
62126: PPUSH
62127: CALL_OW 321
62131: PUSH
62132: LD_INT 2
62134: EQUAL
62135: AND
62136: IFFALSE 62153
// bpoints := bpoints * 1.5 ;
62138: LD_ADDR_VAR 0 10
62142: PUSH
62143: LD_VAR 0 10
62147: PUSH
62148: LD_REAL  1.50000000000000E+0000
62151: MUL
62152: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
62153: LD_VAR 0 1
62157: PPUSH
62158: LD_INT 66
62160: PPUSH
62161: CALL_OW 321
62165: PUSH
62166: LD_INT 2
62168: EQUAL
62169: IFFALSE 62186
// bpoints := bpoints * 1.1 ;
62171: LD_ADDR_VAR 0 10
62175: PUSH
62176: LD_VAR 0 10
62180: PUSH
62181: LD_REAL  1.10000000000000E+0000
62184: MUL
62185: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
62186: LD_ADDR_VAR 0 10
62190: PUSH
62191: LD_VAR 0 10
62195: PUSH
62196: LD_VAR 0 6
62200: PPUSH
62201: LD_INT 1
62203: PPUSH
62204: CALL_OW 259
62208: PUSH
62209: LD_REAL  1.15000000000000E+0000
62212: MUL
62213: MUL
62214: ST_TO_ADDR
// end ; unit_vehicle :
62215: GO 63043
62217: LD_INT 2
62219: DOUBLE
62220: EQUAL
62221: IFTRUE 62225
62223: GO 63031
62225: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
62226: LD_VAR 0 6
62230: PPUSH
62231: CALL_OW 264
62235: PUSH
62236: LD_INT 2
62238: PUSH
62239: LD_INT 42
62241: PUSH
62242: LD_INT 24
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: LIST
62249: IN
62250: IFFALSE 62271
// points := [ 25 , 5 , 3 ] ;
62252: LD_ADDR_VAR 0 9
62256: PUSH
62257: LD_INT 25
62259: PUSH
62260: LD_INT 5
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
62271: LD_VAR 0 6
62275: PPUSH
62276: CALL_OW 264
62280: PUSH
62281: LD_INT 4
62283: PUSH
62284: LD_INT 43
62286: PUSH
62287: LD_INT 25
62289: PUSH
62290: EMPTY
62291: LIST
62292: LIST
62293: LIST
62294: IN
62295: IFFALSE 62316
// points := [ 40 , 15 , 5 ] ;
62297: LD_ADDR_VAR 0 9
62301: PUSH
62302: LD_INT 40
62304: PUSH
62305: LD_INT 15
62307: PUSH
62308: LD_INT 5
62310: PUSH
62311: EMPTY
62312: LIST
62313: LIST
62314: LIST
62315: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
62316: LD_VAR 0 6
62320: PPUSH
62321: CALL_OW 264
62325: PUSH
62326: LD_INT 3
62328: PUSH
62329: LD_INT 23
62331: PUSH
62332: EMPTY
62333: LIST
62334: LIST
62335: IN
62336: IFFALSE 62357
// points := [ 7 , 25 , 8 ] ;
62338: LD_ADDR_VAR 0 9
62342: PUSH
62343: LD_INT 7
62345: PUSH
62346: LD_INT 25
62348: PUSH
62349: LD_INT 8
62351: PUSH
62352: EMPTY
62353: LIST
62354: LIST
62355: LIST
62356: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
62357: LD_VAR 0 6
62361: PPUSH
62362: CALL_OW 264
62366: PUSH
62367: LD_INT 5
62369: PUSH
62370: LD_INT 27
62372: PUSH
62373: LD_INT 44
62375: PUSH
62376: EMPTY
62377: LIST
62378: LIST
62379: LIST
62380: IN
62381: IFFALSE 62402
// points := [ 14 , 50 , 16 ] ;
62383: LD_ADDR_VAR 0 9
62387: PUSH
62388: LD_INT 14
62390: PUSH
62391: LD_INT 50
62393: PUSH
62394: LD_INT 16
62396: PUSH
62397: EMPTY
62398: LIST
62399: LIST
62400: LIST
62401: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
62402: LD_VAR 0 6
62406: PPUSH
62407: CALL_OW 264
62411: PUSH
62412: LD_INT 6
62414: PUSH
62415: LD_INT 46
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: IN
62422: IFFALSE 62443
// points := [ 32 , 120 , 70 ] ;
62424: LD_ADDR_VAR 0 9
62428: PUSH
62429: LD_INT 32
62431: PUSH
62432: LD_INT 120
62434: PUSH
62435: LD_INT 70
62437: PUSH
62438: EMPTY
62439: LIST
62440: LIST
62441: LIST
62442: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
62443: LD_VAR 0 6
62447: PPUSH
62448: CALL_OW 264
62452: PUSH
62453: LD_INT 7
62455: PUSH
62456: LD_INT 28
62458: PUSH
62459: LD_INT 45
62461: PUSH
62462: LD_INT 92
62464: PUSH
62465: EMPTY
62466: LIST
62467: LIST
62468: LIST
62469: LIST
62470: IN
62471: IFFALSE 62492
// points := [ 35 , 20 , 45 ] ;
62473: LD_ADDR_VAR 0 9
62477: PUSH
62478: LD_INT 35
62480: PUSH
62481: LD_INT 20
62483: PUSH
62484: LD_INT 45
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: LIST
62491: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
62492: LD_VAR 0 6
62496: PPUSH
62497: CALL_OW 264
62501: PUSH
62502: LD_INT 47
62504: PUSH
62505: EMPTY
62506: LIST
62507: IN
62508: IFFALSE 62529
// points := [ 67 , 45 , 75 ] ;
62510: LD_ADDR_VAR 0 9
62514: PUSH
62515: LD_INT 67
62517: PUSH
62518: LD_INT 45
62520: PUSH
62521: LD_INT 75
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
62529: LD_VAR 0 6
62533: PPUSH
62534: CALL_OW 264
62538: PUSH
62539: LD_INT 26
62541: PUSH
62542: EMPTY
62543: LIST
62544: IN
62545: IFFALSE 62566
// points := [ 120 , 30 , 80 ] ;
62547: LD_ADDR_VAR 0 9
62551: PUSH
62552: LD_INT 120
62554: PUSH
62555: LD_INT 30
62557: PUSH
62558: LD_INT 80
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: LIST
62565: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
62566: LD_VAR 0 6
62570: PPUSH
62571: CALL_OW 264
62575: PUSH
62576: LD_INT 22
62578: PUSH
62579: EMPTY
62580: LIST
62581: IN
62582: IFFALSE 62603
// points := [ 40 , 1 , 1 ] ;
62584: LD_ADDR_VAR 0 9
62588: PUSH
62589: LD_INT 40
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: LD_INT 1
62597: PUSH
62598: EMPTY
62599: LIST
62600: LIST
62601: LIST
62602: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
62603: LD_VAR 0 6
62607: PPUSH
62608: CALL_OW 264
62612: PUSH
62613: LD_INT 29
62615: PUSH
62616: EMPTY
62617: LIST
62618: IN
62619: IFFALSE 62640
// points := [ 70 , 200 , 400 ] ;
62621: LD_ADDR_VAR 0 9
62625: PUSH
62626: LD_INT 70
62628: PUSH
62629: LD_INT 200
62631: PUSH
62632: LD_INT 400
62634: PUSH
62635: EMPTY
62636: LIST
62637: LIST
62638: LIST
62639: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
62640: LD_VAR 0 6
62644: PPUSH
62645: CALL_OW 264
62649: PUSH
62650: LD_INT 14
62652: PUSH
62653: LD_INT 53
62655: PUSH
62656: EMPTY
62657: LIST
62658: LIST
62659: IN
62660: IFFALSE 62681
// points := [ 40 , 10 , 20 ] ;
62662: LD_ADDR_VAR 0 9
62666: PUSH
62667: LD_INT 40
62669: PUSH
62670: LD_INT 10
62672: PUSH
62673: LD_INT 20
62675: PUSH
62676: EMPTY
62677: LIST
62678: LIST
62679: LIST
62680: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
62681: LD_VAR 0 6
62685: PPUSH
62686: CALL_OW 264
62690: PUSH
62691: LD_INT 9
62693: PUSH
62694: EMPTY
62695: LIST
62696: IN
62697: IFFALSE 62718
// points := [ 5 , 70 , 20 ] ;
62699: LD_ADDR_VAR 0 9
62703: PUSH
62704: LD_INT 5
62706: PUSH
62707: LD_INT 70
62709: PUSH
62710: LD_INT 20
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: LIST
62717: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
62718: LD_VAR 0 6
62722: PPUSH
62723: CALL_OW 264
62727: PUSH
62728: LD_INT 10
62730: PUSH
62731: EMPTY
62732: LIST
62733: IN
62734: IFFALSE 62755
// points := [ 35 , 110 , 70 ] ;
62736: LD_ADDR_VAR 0 9
62740: PUSH
62741: LD_INT 35
62743: PUSH
62744: LD_INT 110
62746: PUSH
62747: LD_INT 70
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: LIST
62754: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
62755: LD_VAR 0 6
62759: PPUSH
62760: CALL_OW 265
62764: PUSH
62765: LD_INT 25
62767: EQUAL
62768: IFFALSE 62789
// points := [ 80 , 65 , 100 ] ;
62770: LD_ADDR_VAR 0 9
62774: PUSH
62775: LD_INT 80
62777: PUSH
62778: LD_INT 65
62780: PUSH
62781: LD_INT 100
62783: PUSH
62784: EMPTY
62785: LIST
62786: LIST
62787: LIST
62788: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
62789: LD_VAR 0 6
62793: PPUSH
62794: CALL_OW 263
62798: PUSH
62799: LD_INT 1
62801: EQUAL
62802: IFFALSE 62837
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
62804: LD_ADDR_VAR 0 10
62808: PUSH
62809: LD_VAR 0 10
62813: PUSH
62814: LD_VAR 0 6
62818: PPUSH
62819: CALL_OW 311
62823: PPUSH
62824: LD_INT 3
62826: PPUSH
62827: CALL_OW 259
62831: PUSH
62832: LD_INT 4
62834: MUL
62835: MUL
62836: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
62837: LD_VAR 0 6
62841: PPUSH
62842: CALL_OW 263
62846: PUSH
62847: LD_INT 2
62849: EQUAL
62850: IFFALSE 62901
// begin j := IsControledBy ( i ) ;
62852: LD_ADDR_VAR 0 7
62856: PUSH
62857: LD_VAR 0 6
62861: PPUSH
62862: CALL_OW 312
62866: ST_TO_ADDR
// if j then
62867: LD_VAR 0 7
62871: IFFALSE 62901
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
62873: LD_ADDR_VAR 0 10
62877: PUSH
62878: LD_VAR 0 10
62882: PUSH
62883: LD_VAR 0 7
62887: PPUSH
62888: LD_INT 3
62890: PPUSH
62891: CALL_OW 259
62895: PUSH
62896: LD_INT 3
62898: MUL
62899: MUL
62900: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
62901: LD_VAR 0 6
62905: PPUSH
62906: CALL_OW 264
62910: PUSH
62911: LD_INT 5
62913: PUSH
62914: LD_INT 6
62916: PUSH
62917: LD_INT 46
62919: PUSH
62920: LD_INT 44
62922: PUSH
62923: LD_INT 47
62925: PUSH
62926: LD_INT 45
62928: PUSH
62929: LD_INT 28
62931: PUSH
62932: LD_INT 7
62934: PUSH
62935: LD_INT 27
62937: PUSH
62938: LD_INT 29
62940: PUSH
62941: EMPTY
62942: LIST
62943: LIST
62944: LIST
62945: LIST
62946: LIST
62947: LIST
62948: LIST
62949: LIST
62950: LIST
62951: LIST
62952: IN
62953: PUSH
62954: LD_VAR 0 1
62958: PPUSH
62959: LD_INT 52
62961: PPUSH
62962: CALL_OW 321
62966: PUSH
62967: LD_INT 2
62969: EQUAL
62970: AND
62971: IFFALSE 62988
// bpoints := bpoints * 1.2 ;
62973: LD_ADDR_VAR 0 10
62977: PUSH
62978: LD_VAR 0 10
62982: PUSH
62983: LD_REAL  1.20000000000000E+0000
62986: MUL
62987: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
62988: LD_VAR 0 6
62992: PPUSH
62993: CALL_OW 264
62997: PUSH
62998: LD_INT 6
63000: PUSH
63001: LD_INT 46
63003: PUSH
63004: LD_INT 47
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: LIST
63011: IN
63012: IFFALSE 63029
// bpoints := bpoints * 1.2 ;
63014: LD_ADDR_VAR 0 10
63018: PUSH
63019: LD_VAR 0 10
63023: PUSH
63024: LD_REAL  1.20000000000000E+0000
63027: MUL
63028: ST_TO_ADDR
// end ; unit_building :
63029: GO 63043
63031: LD_INT 3
63033: DOUBLE
63034: EQUAL
63035: IFTRUE 63039
63037: GO 63042
63039: POP
// ; end ;
63040: GO 63043
63042: POP
// for j = 1 to 3 do
63043: LD_ADDR_VAR 0 7
63047: PUSH
63048: DOUBLE
63049: LD_INT 1
63051: DEC
63052: ST_TO_ADDR
63053: LD_INT 3
63055: PUSH
63056: FOR_TO
63057: IFFALSE 63110
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
63059: LD_ADDR_VAR 0 5
63063: PUSH
63064: LD_VAR 0 5
63068: PPUSH
63069: LD_VAR 0 7
63073: PPUSH
63074: LD_VAR 0 5
63078: PUSH
63079: LD_VAR 0 7
63083: ARRAY
63084: PUSH
63085: LD_VAR 0 9
63089: PUSH
63090: LD_VAR 0 7
63094: ARRAY
63095: PUSH
63096: LD_VAR 0 10
63100: MUL
63101: PLUS
63102: PPUSH
63103: CALL_OW 1
63107: ST_TO_ADDR
63108: GO 63056
63110: POP
63111: POP
// end ;
63112: GO 61591
63114: POP
63115: POP
// result := Replace ( result , 4 , tmp ) ;
63116: LD_ADDR_VAR 0 5
63120: PUSH
63121: LD_VAR 0 5
63125: PPUSH
63126: LD_INT 4
63128: PPUSH
63129: LD_VAR 0 8
63133: PPUSH
63134: CALL_OW 1
63138: ST_TO_ADDR
// end ;
63139: LD_VAR 0 5
63143: RET
// export function DangerAtRange ( unit , range ) ; begin
63144: LD_INT 0
63146: PPUSH
// if not unit then
63147: LD_VAR 0 1
63151: NOT
63152: IFFALSE 63156
// exit ;
63154: GO 63201
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
63156: LD_ADDR_VAR 0 3
63160: PUSH
63161: LD_VAR 0 1
63165: PPUSH
63166: CALL_OW 255
63170: PPUSH
63171: LD_VAR 0 1
63175: PPUSH
63176: CALL_OW 250
63180: PPUSH
63181: LD_VAR 0 1
63185: PPUSH
63186: CALL_OW 251
63190: PPUSH
63191: LD_VAR 0 2
63195: PPUSH
63196: CALL 61443 0 4
63200: ST_TO_ADDR
// end ;
63201: LD_VAR 0 3
63205: RET
// export function DangerInArea ( side , area ) ; begin
63206: LD_INT 0
63208: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
63209: LD_ADDR_VAR 0 3
63213: PUSH
63214: LD_VAR 0 2
63218: PPUSH
63219: LD_INT 81
63221: PUSH
63222: LD_VAR 0 1
63226: PUSH
63227: EMPTY
63228: LIST
63229: LIST
63230: PPUSH
63231: CALL_OW 70
63235: ST_TO_ADDR
// end ;
63236: LD_VAR 0 3
63240: RET
// export function IsExtension ( b ) ; begin
63241: LD_INT 0
63243: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
63244: LD_ADDR_VAR 0 2
63248: PUSH
63249: LD_VAR 0 1
63253: PUSH
63254: LD_INT 23
63256: PUSH
63257: LD_INT 20
63259: PUSH
63260: LD_INT 22
63262: PUSH
63263: LD_INT 17
63265: PUSH
63266: LD_INT 24
63268: PUSH
63269: LD_INT 21
63271: PUSH
63272: LD_INT 19
63274: PUSH
63275: LD_INT 16
63277: PUSH
63278: LD_INT 25
63280: PUSH
63281: LD_INT 18
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: LIST
63288: LIST
63289: LIST
63290: LIST
63291: LIST
63292: LIST
63293: LIST
63294: LIST
63295: IN
63296: ST_TO_ADDR
// end ;
63297: LD_VAR 0 2
63301: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
63302: LD_INT 0
63304: PPUSH
63305: PPUSH
63306: PPUSH
// result := [ ] ;
63307: LD_ADDR_VAR 0 4
63311: PUSH
63312: EMPTY
63313: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
63314: LD_ADDR_VAR 0 5
63318: PUSH
63319: LD_VAR 0 2
63323: PPUSH
63324: LD_INT 21
63326: PUSH
63327: LD_INT 3
63329: PUSH
63330: EMPTY
63331: LIST
63332: LIST
63333: PPUSH
63334: CALL_OW 70
63338: ST_TO_ADDR
// if not tmp then
63339: LD_VAR 0 5
63343: NOT
63344: IFFALSE 63348
// exit ;
63346: GO 63412
// if checkLink then
63348: LD_VAR 0 3
63352: IFFALSE 63402
// begin for i in tmp do
63354: LD_ADDR_VAR 0 6
63358: PUSH
63359: LD_VAR 0 5
63363: PUSH
63364: FOR_IN
63365: IFFALSE 63400
// if GetBase ( i ) <> base then
63367: LD_VAR 0 6
63371: PPUSH
63372: CALL_OW 274
63376: PUSH
63377: LD_VAR 0 1
63381: NONEQUAL
63382: IFFALSE 63398
// ComLinkToBase ( base , i ) ;
63384: LD_VAR 0 1
63388: PPUSH
63389: LD_VAR 0 6
63393: PPUSH
63394: CALL_OW 169
63398: GO 63364
63400: POP
63401: POP
// end ; result := tmp ;
63402: LD_ADDR_VAR 0 4
63406: PUSH
63407: LD_VAR 0 5
63411: ST_TO_ADDR
// end ;
63412: LD_VAR 0 4
63416: RET
// export function ComComplete ( units , b ) ; var i ; begin
63417: LD_INT 0
63419: PPUSH
63420: PPUSH
// if not units then
63421: LD_VAR 0 1
63425: NOT
63426: IFFALSE 63430
// exit ;
63428: GO 63520
// for i in units do
63430: LD_ADDR_VAR 0 4
63434: PUSH
63435: LD_VAR 0 1
63439: PUSH
63440: FOR_IN
63441: IFFALSE 63518
// if BuildingStatus ( b ) = bs_build then
63443: LD_VAR 0 2
63447: PPUSH
63448: CALL_OW 461
63452: PUSH
63453: LD_INT 1
63455: EQUAL
63456: IFFALSE 63516
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
63458: LD_VAR 0 4
63462: PPUSH
63463: LD_STRING h
63465: PUSH
63466: LD_VAR 0 2
63470: PPUSH
63471: CALL_OW 250
63475: PUSH
63476: LD_VAR 0 2
63480: PPUSH
63481: CALL_OW 251
63485: PUSH
63486: LD_VAR 0 2
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: LD_INT 0
63496: PUSH
63497: LD_INT 0
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: PUSH
63509: EMPTY
63510: LIST
63511: PPUSH
63512: CALL_OW 446
63516: GO 63440
63518: POP
63519: POP
// end ;
63520: LD_VAR 0 3
63524: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
63525: LD_INT 0
63527: PPUSH
63528: PPUSH
63529: PPUSH
63530: PPUSH
63531: PPUSH
63532: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
63533: LD_VAR 0 1
63537: NOT
63538: PUSH
63539: LD_VAR 0 1
63543: PPUSH
63544: CALL_OW 263
63548: PUSH
63549: LD_INT 2
63551: NONEQUAL
63552: OR
63553: IFFALSE 63557
// exit ;
63555: GO 63873
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
63557: LD_ADDR_VAR 0 6
63561: PUSH
63562: LD_INT 22
63564: PUSH
63565: LD_VAR 0 1
63569: PPUSH
63570: CALL_OW 255
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PUSH
63579: LD_INT 2
63581: PUSH
63582: LD_INT 30
63584: PUSH
63585: LD_INT 36
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 34
63594: PUSH
63595: LD_INT 31
63597: PUSH
63598: EMPTY
63599: LIST
63600: LIST
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: LIST
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: PPUSH
63611: CALL_OW 69
63615: ST_TO_ADDR
// if not tmp then
63616: LD_VAR 0 6
63620: NOT
63621: IFFALSE 63625
// exit ;
63623: GO 63873
// result := [ ] ;
63625: LD_ADDR_VAR 0 2
63629: PUSH
63630: EMPTY
63631: ST_TO_ADDR
// for i in tmp do
63632: LD_ADDR_VAR 0 3
63636: PUSH
63637: LD_VAR 0 6
63641: PUSH
63642: FOR_IN
63643: IFFALSE 63714
// begin t := UnitsInside ( i ) ;
63645: LD_ADDR_VAR 0 4
63649: PUSH
63650: LD_VAR 0 3
63654: PPUSH
63655: CALL_OW 313
63659: ST_TO_ADDR
// if t then
63660: LD_VAR 0 4
63664: IFFALSE 63712
// for j in t do
63666: LD_ADDR_VAR 0 7
63670: PUSH
63671: LD_VAR 0 4
63675: PUSH
63676: FOR_IN
63677: IFFALSE 63710
// result := Replace ( result , result + 1 , j ) ;
63679: LD_ADDR_VAR 0 2
63683: PUSH
63684: LD_VAR 0 2
63688: PPUSH
63689: LD_VAR 0 2
63693: PUSH
63694: LD_INT 1
63696: PLUS
63697: PPUSH
63698: LD_VAR 0 7
63702: PPUSH
63703: CALL_OW 1
63707: ST_TO_ADDR
63708: GO 63676
63710: POP
63711: POP
// end ;
63712: GO 63642
63714: POP
63715: POP
// if not result then
63716: LD_VAR 0 2
63720: NOT
63721: IFFALSE 63725
// exit ;
63723: GO 63873
// mech := result [ 1 ] ;
63725: LD_ADDR_VAR 0 5
63729: PUSH
63730: LD_VAR 0 2
63734: PUSH
63735: LD_INT 1
63737: ARRAY
63738: ST_TO_ADDR
// if result > 1 then
63739: LD_VAR 0 2
63743: PUSH
63744: LD_INT 1
63746: GREATER
63747: IFFALSE 63859
// begin for i = 2 to result do
63749: LD_ADDR_VAR 0 3
63753: PUSH
63754: DOUBLE
63755: LD_INT 2
63757: DEC
63758: ST_TO_ADDR
63759: LD_VAR 0 2
63763: PUSH
63764: FOR_TO
63765: IFFALSE 63857
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
63767: LD_ADDR_VAR 0 4
63771: PUSH
63772: LD_VAR 0 2
63776: PUSH
63777: LD_VAR 0 3
63781: ARRAY
63782: PPUSH
63783: LD_INT 3
63785: PPUSH
63786: CALL_OW 259
63790: PUSH
63791: LD_VAR 0 2
63795: PUSH
63796: LD_VAR 0 3
63800: ARRAY
63801: PPUSH
63802: CALL_OW 432
63806: MINUS
63807: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
63808: LD_VAR 0 4
63812: PUSH
63813: LD_VAR 0 5
63817: PPUSH
63818: LD_INT 3
63820: PPUSH
63821: CALL_OW 259
63825: PUSH
63826: LD_VAR 0 5
63830: PPUSH
63831: CALL_OW 432
63835: MINUS
63836: GREATEREQUAL
63837: IFFALSE 63855
// mech := result [ i ] ;
63839: LD_ADDR_VAR 0 5
63843: PUSH
63844: LD_VAR 0 2
63848: PUSH
63849: LD_VAR 0 3
63853: ARRAY
63854: ST_TO_ADDR
// end ;
63855: GO 63764
63857: POP
63858: POP
// end ; ComLinkTo ( vehicle , mech ) ;
63859: LD_VAR 0 1
63863: PPUSH
63864: LD_VAR 0 5
63868: PPUSH
63869: CALL_OW 135
// end ;
63873: LD_VAR 0 2
63877: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
63878: LD_INT 0
63880: PPUSH
63881: PPUSH
63882: PPUSH
63883: PPUSH
63884: PPUSH
63885: PPUSH
63886: PPUSH
63887: PPUSH
63888: PPUSH
63889: PPUSH
63890: PPUSH
63891: PPUSH
63892: PPUSH
// result := [ ] ;
63893: LD_ADDR_VAR 0 7
63897: PUSH
63898: EMPTY
63899: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
63900: LD_VAR 0 1
63904: PPUSH
63905: CALL_OW 266
63909: PUSH
63910: LD_INT 0
63912: PUSH
63913: LD_INT 1
63915: PUSH
63916: EMPTY
63917: LIST
63918: LIST
63919: IN
63920: NOT
63921: IFFALSE 63925
// exit ;
63923: GO 65559
// if name then
63925: LD_VAR 0 3
63929: IFFALSE 63945
// SetBName ( base_dep , name ) ;
63931: LD_VAR 0 1
63935: PPUSH
63936: LD_VAR 0 3
63940: PPUSH
63941: CALL_OW 500
// base := GetBase ( base_dep ) ;
63945: LD_ADDR_VAR 0 15
63949: PUSH
63950: LD_VAR 0 1
63954: PPUSH
63955: CALL_OW 274
63959: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
63960: LD_ADDR_VAR 0 16
63964: PUSH
63965: LD_VAR 0 1
63969: PPUSH
63970: CALL_OW 255
63974: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
63975: LD_ADDR_VAR 0 17
63979: PUSH
63980: LD_VAR 0 1
63984: PPUSH
63985: CALL_OW 248
63989: ST_TO_ADDR
// if sources then
63990: LD_VAR 0 5
63994: IFFALSE 64041
// for i = 1 to 3 do
63996: LD_ADDR_VAR 0 8
64000: PUSH
64001: DOUBLE
64002: LD_INT 1
64004: DEC
64005: ST_TO_ADDR
64006: LD_INT 3
64008: PUSH
64009: FOR_TO
64010: IFFALSE 64039
// AddResourceType ( base , i , sources [ i ] ) ;
64012: LD_VAR 0 15
64016: PPUSH
64017: LD_VAR 0 8
64021: PPUSH
64022: LD_VAR 0 5
64026: PUSH
64027: LD_VAR 0 8
64031: ARRAY
64032: PPUSH
64033: CALL_OW 276
64037: GO 64009
64039: POP
64040: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
64041: LD_ADDR_VAR 0 18
64045: PUSH
64046: LD_VAR 0 15
64050: PPUSH
64051: LD_VAR 0 2
64055: PPUSH
64056: LD_INT 1
64058: PPUSH
64059: CALL 63302 0 3
64063: ST_TO_ADDR
// InitHc ;
64064: CALL_OW 19
// InitUc ;
64068: CALL_OW 18
// uc_side := side ;
64072: LD_ADDR_OWVAR 20
64076: PUSH
64077: LD_VAR 0 16
64081: ST_TO_ADDR
// uc_nation := nation ;
64082: LD_ADDR_OWVAR 21
64086: PUSH
64087: LD_VAR 0 17
64091: ST_TO_ADDR
// if buildings then
64092: LD_VAR 0 18
64096: IFFALSE 65418
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
64098: LD_ADDR_VAR 0 19
64102: PUSH
64103: LD_VAR 0 18
64107: PPUSH
64108: LD_INT 2
64110: PUSH
64111: LD_INT 30
64113: PUSH
64114: LD_INT 29
64116: PUSH
64117: EMPTY
64118: LIST
64119: LIST
64120: PUSH
64121: LD_INT 30
64123: PUSH
64124: LD_INT 30
64126: PUSH
64127: EMPTY
64128: LIST
64129: LIST
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: LIST
64135: PPUSH
64136: CALL_OW 72
64140: ST_TO_ADDR
// if tmp then
64141: LD_VAR 0 19
64145: IFFALSE 64193
// for i in tmp do
64147: LD_ADDR_VAR 0 8
64151: PUSH
64152: LD_VAR 0 19
64156: PUSH
64157: FOR_IN
64158: IFFALSE 64191
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
64160: LD_VAR 0 8
64164: PPUSH
64165: CALL_OW 250
64169: PPUSH
64170: LD_VAR 0 8
64174: PPUSH
64175: CALL_OW 251
64179: PPUSH
64180: LD_VAR 0 16
64184: PPUSH
64185: CALL_OW 441
64189: GO 64157
64191: POP
64192: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
64193: LD_VAR 0 18
64197: PPUSH
64198: LD_INT 2
64200: PUSH
64201: LD_INT 30
64203: PUSH
64204: LD_INT 32
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 30
64213: PUSH
64214: LD_INT 33
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: EMPTY
64222: LIST
64223: LIST
64224: LIST
64225: PPUSH
64226: CALL_OW 72
64230: IFFALSE 64318
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
64232: LD_ADDR_VAR 0 8
64236: PUSH
64237: LD_VAR 0 18
64241: PPUSH
64242: LD_INT 2
64244: PUSH
64245: LD_INT 30
64247: PUSH
64248: LD_INT 32
64250: PUSH
64251: EMPTY
64252: LIST
64253: LIST
64254: PUSH
64255: LD_INT 30
64257: PUSH
64258: LD_INT 33
64260: PUSH
64261: EMPTY
64262: LIST
64263: LIST
64264: PUSH
64265: EMPTY
64266: LIST
64267: LIST
64268: LIST
64269: PPUSH
64270: CALL_OW 72
64274: PUSH
64275: FOR_IN
64276: IFFALSE 64316
// begin if not GetBWeapon ( i ) then
64278: LD_VAR 0 8
64282: PPUSH
64283: CALL_OW 269
64287: NOT
64288: IFFALSE 64314
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
64290: LD_VAR 0 8
64294: PPUSH
64295: LD_VAR 0 8
64299: PPUSH
64300: LD_VAR 0 2
64304: PPUSH
64305: CALL 65564 0 2
64309: PPUSH
64310: CALL_OW 431
// end ;
64314: GO 64275
64316: POP
64317: POP
// end ; for i = 1 to personel do
64318: LD_ADDR_VAR 0 8
64322: PUSH
64323: DOUBLE
64324: LD_INT 1
64326: DEC
64327: ST_TO_ADDR
64328: LD_VAR 0 6
64332: PUSH
64333: FOR_TO
64334: IFFALSE 65398
// begin if i > 4 then
64336: LD_VAR 0 8
64340: PUSH
64341: LD_INT 4
64343: GREATER
64344: IFFALSE 64348
// break ;
64346: GO 65398
// case i of 1 :
64348: LD_VAR 0 8
64352: PUSH
64353: LD_INT 1
64355: DOUBLE
64356: EQUAL
64357: IFTRUE 64361
64359: GO 64441
64361: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
64362: LD_ADDR_VAR 0 12
64366: PUSH
64367: LD_VAR 0 18
64371: PPUSH
64372: LD_INT 22
64374: PUSH
64375: LD_VAR 0 16
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: PUSH
64384: LD_INT 58
64386: PUSH
64387: EMPTY
64388: LIST
64389: PUSH
64390: LD_INT 2
64392: PUSH
64393: LD_INT 30
64395: PUSH
64396: LD_INT 32
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 30
64405: PUSH
64406: LD_INT 4
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 30
64415: PUSH
64416: LD_INT 5
64418: PUSH
64419: EMPTY
64420: LIST
64421: LIST
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: PUSH
64429: EMPTY
64430: LIST
64431: LIST
64432: LIST
64433: PPUSH
64434: CALL_OW 72
64438: ST_TO_ADDR
64439: GO 64663
64441: LD_INT 2
64443: DOUBLE
64444: EQUAL
64445: IFTRUE 64449
64447: GO 64511
64449: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
64450: LD_ADDR_VAR 0 12
64454: PUSH
64455: LD_VAR 0 18
64459: PPUSH
64460: LD_INT 22
64462: PUSH
64463: LD_VAR 0 16
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: LD_INT 2
64474: PUSH
64475: LD_INT 30
64477: PUSH
64478: LD_INT 0
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: PUSH
64485: LD_INT 30
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: EMPTY
64492: LIST
64493: LIST
64494: PUSH
64495: EMPTY
64496: LIST
64497: LIST
64498: LIST
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PPUSH
64504: CALL_OW 72
64508: ST_TO_ADDR
64509: GO 64663
64511: LD_INT 3
64513: DOUBLE
64514: EQUAL
64515: IFTRUE 64519
64517: GO 64581
64519: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
64520: LD_ADDR_VAR 0 12
64524: PUSH
64525: LD_VAR 0 18
64529: PPUSH
64530: LD_INT 22
64532: PUSH
64533: LD_VAR 0 16
64537: PUSH
64538: EMPTY
64539: LIST
64540: LIST
64541: PUSH
64542: LD_INT 2
64544: PUSH
64545: LD_INT 30
64547: PUSH
64548: LD_INT 2
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 30
64557: PUSH
64558: LD_INT 3
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: PUSH
64570: EMPTY
64571: LIST
64572: LIST
64573: PPUSH
64574: CALL_OW 72
64578: ST_TO_ADDR
64579: GO 64663
64581: LD_INT 4
64583: DOUBLE
64584: EQUAL
64585: IFTRUE 64589
64587: GO 64662
64589: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
64590: LD_ADDR_VAR 0 12
64594: PUSH
64595: LD_VAR 0 18
64599: PPUSH
64600: LD_INT 22
64602: PUSH
64603: LD_VAR 0 16
64607: PUSH
64608: EMPTY
64609: LIST
64610: LIST
64611: PUSH
64612: LD_INT 2
64614: PUSH
64615: LD_INT 30
64617: PUSH
64618: LD_INT 6
64620: PUSH
64621: EMPTY
64622: LIST
64623: LIST
64624: PUSH
64625: LD_INT 30
64627: PUSH
64628: LD_INT 7
64630: PUSH
64631: EMPTY
64632: LIST
64633: LIST
64634: PUSH
64635: LD_INT 30
64637: PUSH
64638: LD_INT 8
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PPUSH
64655: CALL_OW 72
64659: ST_TO_ADDR
64660: GO 64663
64662: POP
// if i = 1 then
64663: LD_VAR 0 8
64667: PUSH
64668: LD_INT 1
64670: EQUAL
64671: IFFALSE 64782
// begin tmp := [ ] ;
64673: LD_ADDR_VAR 0 19
64677: PUSH
64678: EMPTY
64679: ST_TO_ADDR
// for j in f do
64680: LD_ADDR_VAR 0 9
64684: PUSH
64685: LD_VAR 0 12
64689: PUSH
64690: FOR_IN
64691: IFFALSE 64764
// if GetBType ( j ) = b_bunker then
64693: LD_VAR 0 9
64697: PPUSH
64698: CALL_OW 266
64702: PUSH
64703: LD_INT 32
64705: EQUAL
64706: IFFALSE 64733
// tmp := Insert ( tmp , 1 , j ) else
64708: LD_ADDR_VAR 0 19
64712: PUSH
64713: LD_VAR 0 19
64717: PPUSH
64718: LD_INT 1
64720: PPUSH
64721: LD_VAR 0 9
64725: PPUSH
64726: CALL_OW 2
64730: ST_TO_ADDR
64731: GO 64762
// tmp := Insert ( tmp , tmp + 1 , j ) ;
64733: LD_ADDR_VAR 0 19
64737: PUSH
64738: LD_VAR 0 19
64742: PPUSH
64743: LD_VAR 0 19
64747: PUSH
64748: LD_INT 1
64750: PLUS
64751: PPUSH
64752: LD_VAR 0 9
64756: PPUSH
64757: CALL_OW 2
64761: ST_TO_ADDR
64762: GO 64690
64764: POP
64765: POP
// if tmp then
64766: LD_VAR 0 19
64770: IFFALSE 64782
// f := tmp ;
64772: LD_ADDR_VAR 0 12
64776: PUSH
64777: LD_VAR 0 19
64781: ST_TO_ADDR
// end ; x := personel [ i ] ;
64782: LD_ADDR_VAR 0 13
64786: PUSH
64787: LD_VAR 0 6
64791: PUSH
64792: LD_VAR 0 8
64796: ARRAY
64797: ST_TO_ADDR
// if x = - 1 then
64798: LD_VAR 0 13
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: EQUAL
64807: IFFALSE 65016
// begin for j in f do
64809: LD_ADDR_VAR 0 9
64813: PUSH
64814: LD_VAR 0 12
64818: PUSH
64819: FOR_IN
64820: IFFALSE 65012
// repeat InitHc ;
64822: CALL_OW 19
// if GetBType ( j ) = b_barracks then
64826: LD_VAR 0 9
64830: PPUSH
64831: CALL_OW 266
64835: PUSH
64836: LD_INT 5
64838: EQUAL
64839: IFFALSE 64909
// begin if UnitsInside ( j ) < 3 then
64841: LD_VAR 0 9
64845: PPUSH
64846: CALL_OW 313
64850: PUSH
64851: LD_INT 3
64853: LESS
64854: IFFALSE 64890
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64856: LD_INT 0
64858: PPUSH
64859: LD_INT 5
64861: PUSH
64862: LD_INT 8
64864: PUSH
64865: LD_INT 9
64867: PUSH
64868: EMPTY
64869: LIST
64870: LIST
64871: LIST
64872: PUSH
64873: LD_VAR 0 17
64877: ARRAY
64878: PPUSH
64879: LD_VAR 0 4
64883: PPUSH
64884: CALL_OW 380
64888: GO 64907
// PrepareHuman ( false , i , skill ) ;
64890: LD_INT 0
64892: PPUSH
64893: LD_VAR 0 8
64897: PPUSH
64898: LD_VAR 0 4
64902: PPUSH
64903: CALL_OW 380
// end else
64907: GO 64926
// PrepareHuman ( false , i , skill ) ;
64909: LD_INT 0
64911: PPUSH
64912: LD_VAR 0 8
64916: PPUSH
64917: LD_VAR 0 4
64921: PPUSH
64922: CALL_OW 380
// un := CreateHuman ;
64926: LD_ADDR_VAR 0 14
64930: PUSH
64931: CALL_OW 44
64935: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64936: LD_ADDR_VAR 0 7
64940: PUSH
64941: LD_VAR 0 7
64945: PPUSH
64946: LD_INT 1
64948: PPUSH
64949: LD_VAR 0 14
64953: PPUSH
64954: CALL_OW 2
64958: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
64959: LD_VAR 0 14
64963: PPUSH
64964: LD_VAR 0 9
64968: PPUSH
64969: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
64973: LD_VAR 0 9
64977: PPUSH
64978: CALL_OW 313
64982: PUSH
64983: LD_INT 6
64985: EQUAL
64986: PUSH
64987: LD_VAR 0 9
64991: PPUSH
64992: CALL_OW 266
64996: PUSH
64997: LD_INT 32
64999: PUSH
65000: LD_INT 31
65002: PUSH
65003: EMPTY
65004: LIST
65005: LIST
65006: IN
65007: OR
65008: IFFALSE 64822
65010: GO 64819
65012: POP
65013: POP
// end else
65014: GO 65396
// for j = 1 to x do
65016: LD_ADDR_VAR 0 9
65020: PUSH
65021: DOUBLE
65022: LD_INT 1
65024: DEC
65025: ST_TO_ADDR
65026: LD_VAR 0 13
65030: PUSH
65031: FOR_TO
65032: IFFALSE 65394
// begin InitHc ;
65034: CALL_OW 19
// if not f then
65038: LD_VAR 0 12
65042: NOT
65043: IFFALSE 65132
// begin PrepareHuman ( false , i , skill ) ;
65045: LD_INT 0
65047: PPUSH
65048: LD_VAR 0 8
65052: PPUSH
65053: LD_VAR 0 4
65057: PPUSH
65058: CALL_OW 380
// un := CreateHuman ;
65062: LD_ADDR_VAR 0 14
65066: PUSH
65067: CALL_OW 44
65071: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65072: LD_ADDR_VAR 0 7
65076: PUSH
65077: LD_VAR 0 7
65081: PPUSH
65082: LD_INT 1
65084: PPUSH
65085: LD_VAR 0 14
65089: PPUSH
65090: CALL_OW 2
65094: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
65095: LD_VAR 0 14
65099: PPUSH
65100: LD_VAR 0 1
65104: PPUSH
65105: CALL_OW 250
65109: PPUSH
65110: LD_VAR 0 1
65114: PPUSH
65115: CALL_OW 251
65119: PPUSH
65120: LD_INT 10
65122: PPUSH
65123: LD_INT 0
65125: PPUSH
65126: CALL_OW 50
// continue ;
65130: GO 65031
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
65132: LD_VAR 0 12
65136: PUSH
65137: LD_INT 1
65139: ARRAY
65140: PPUSH
65141: CALL_OW 313
65145: PUSH
65146: LD_VAR 0 12
65150: PUSH
65151: LD_INT 1
65153: ARRAY
65154: PPUSH
65155: CALL_OW 266
65159: PUSH
65160: LD_INT 32
65162: PUSH
65163: LD_INT 31
65165: PUSH
65166: EMPTY
65167: LIST
65168: LIST
65169: IN
65170: AND
65171: PUSH
65172: LD_VAR 0 12
65176: PUSH
65177: LD_INT 1
65179: ARRAY
65180: PPUSH
65181: CALL_OW 313
65185: PUSH
65186: LD_INT 6
65188: EQUAL
65189: OR
65190: IFFALSE 65210
// f := Delete ( f , 1 ) ;
65192: LD_ADDR_VAR 0 12
65196: PUSH
65197: LD_VAR 0 12
65201: PPUSH
65202: LD_INT 1
65204: PPUSH
65205: CALL_OW 3
65209: ST_TO_ADDR
// if not f then
65210: LD_VAR 0 12
65214: NOT
65215: IFFALSE 65233
// begin x := x + 2 ;
65217: LD_ADDR_VAR 0 13
65221: PUSH
65222: LD_VAR 0 13
65226: PUSH
65227: LD_INT 2
65229: PLUS
65230: ST_TO_ADDR
// continue ;
65231: GO 65031
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
65233: LD_VAR 0 12
65237: PUSH
65238: LD_INT 1
65240: ARRAY
65241: PPUSH
65242: CALL_OW 266
65246: PUSH
65247: LD_INT 5
65249: EQUAL
65250: IFFALSE 65324
// begin if UnitsInside ( f [ 1 ] ) < 3 then
65252: LD_VAR 0 12
65256: PUSH
65257: LD_INT 1
65259: ARRAY
65260: PPUSH
65261: CALL_OW 313
65265: PUSH
65266: LD_INT 3
65268: LESS
65269: IFFALSE 65305
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
65271: LD_INT 0
65273: PPUSH
65274: LD_INT 5
65276: PUSH
65277: LD_INT 8
65279: PUSH
65280: LD_INT 9
65282: PUSH
65283: EMPTY
65284: LIST
65285: LIST
65286: LIST
65287: PUSH
65288: LD_VAR 0 17
65292: ARRAY
65293: PPUSH
65294: LD_VAR 0 4
65298: PPUSH
65299: CALL_OW 380
65303: GO 65322
// PrepareHuman ( false , i , skill ) ;
65305: LD_INT 0
65307: PPUSH
65308: LD_VAR 0 8
65312: PPUSH
65313: LD_VAR 0 4
65317: PPUSH
65318: CALL_OW 380
// end else
65322: GO 65341
// PrepareHuman ( false , i , skill ) ;
65324: LD_INT 0
65326: PPUSH
65327: LD_VAR 0 8
65331: PPUSH
65332: LD_VAR 0 4
65336: PPUSH
65337: CALL_OW 380
// un := CreateHuman ;
65341: LD_ADDR_VAR 0 14
65345: PUSH
65346: CALL_OW 44
65350: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65351: LD_ADDR_VAR 0 7
65355: PUSH
65356: LD_VAR 0 7
65360: PPUSH
65361: LD_INT 1
65363: PPUSH
65364: LD_VAR 0 14
65368: PPUSH
65369: CALL_OW 2
65373: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
65374: LD_VAR 0 14
65378: PPUSH
65379: LD_VAR 0 12
65383: PUSH
65384: LD_INT 1
65386: ARRAY
65387: PPUSH
65388: CALL_OW 52
// end ;
65392: GO 65031
65394: POP
65395: POP
// end ;
65396: GO 64333
65398: POP
65399: POP
// result := result ^ buildings ;
65400: LD_ADDR_VAR 0 7
65404: PUSH
65405: LD_VAR 0 7
65409: PUSH
65410: LD_VAR 0 18
65414: ADD
65415: ST_TO_ADDR
// end else
65416: GO 65559
// begin for i = 1 to personel do
65418: LD_ADDR_VAR 0 8
65422: PUSH
65423: DOUBLE
65424: LD_INT 1
65426: DEC
65427: ST_TO_ADDR
65428: LD_VAR 0 6
65432: PUSH
65433: FOR_TO
65434: IFFALSE 65557
// begin if i > 4 then
65436: LD_VAR 0 8
65440: PUSH
65441: LD_INT 4
65443: GREATER
65444: IFFALSE 65448
// break ;
65446: GO 65557
// x := personel [ i ] ;
65448: LD_ADDR_VAR 0 13
65452: PUSH
65453: LD_VAR 0 6
65457: PUSH
65458: LD_VAR 0 8
65462: ARRAY
65463: ST_TO_ADDR
// if x = - 1 then
65464: LD_VAR 0 13
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: EQUAL
65473: IFFALSE 65477
// continue ;
65475: GO 65433
// PrepareHuman ( false , i , skill ) ;
65477: LD_INT 0
65479: PPUSH
65480: LD_VAR 0 8
65484: PPUSH
65485: LD_VAR 0 4
65489: PPUSH
65490: CALL_OW 380
// un := CreateHuman ;
65494: LD_ADDR_VAR 0 14
65498: PUSH
65499: CALL_OW 44
65503: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
65504: LD_VAR 0 14
65508: PPUSH
65509: LD_VAR 0 1
65513: PPUSH
65514: CALL_OW 250
65518: PPUSH
65519: LD_VAR 0 1
65523: PPUSH
65524: CALL_OW 251
65528: PPUSH
65529: LD_INT 10
65531: PPUSH
65532: LD_INT 0
65534: PPUSH
65535: CALL_OW 50
// result := result ^ un ;
65539: LD_ADDR_VAR 0 7
65543: PUSH
65544: LD_VAR 0 7
65548: PUSH
65549: LD_VAR 0 14
65553: ADD
65554: ST_TO_ADDR
// end ;
65555: GO 65433
65557: POP
65558: POP
// end ; end ;
65559: LD_VAR 0 7
65563: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
65564: LD_INT 0
65566: PPUSH
65567: PPUSH
65568: PPUSH
65569: PPUSH
65570: PPUSH
65571: PPUSH
65572: PPUSH
65573: PPUSH
65574: PPUSH
65575: PPUSH
65576: PPUSH
65577: PPUSH
65578: PPUSH
65579: PPUSH
65580: PPUSH
65581: PPUSH
// result := false ;
65582: LD_ADDR_VAR 0 3
65586: PUSH
65587: LD_INT 0
65589: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
65590: LD_VAR 0 1
65594: NOT
65595: PUSH
65596: LD_VAR 0 1
65600: PPUSH
65601: CALL_OW 266
65605: PUSH
65606: LD_INT 32
65608: PUSH
65609: LD_INT 33
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: IN
65616: NOT
65617: OR
65618: IFFALSE 65622
// exit ;
65620: GO 66731
// nat := GetNation ( tower ) ;
65622: LD_ADDR_VAR 0 12
65626: PUSH
65627: LD_VAR 0 1
65631: PPUSH
65632: CALL_OW 248
65636: ST_TO_ADDR
// side := GetSide ( tower ) ;
65637: LD_ADDR_VAR 0 16
65641: PUSH
65642: LD_VAR 0 1
65646: PPUSH
65647: CALL_OW 255
65651: ST_TO_ADDR
// x := GetX ( tower ) ;
65652: LD_ADDR_VAR 0 10
65656: PUSH
65657: LD_VAR 0 1
65661: PPUSH
65662: CALL_OW 250
65666: ST_TO_ADDR
// y := GetY ( tower ) ;
65667: LD_ADDR_VAR 0 11
65671: PUSH
65672: LD_VAR 0 1
65676: PPUSH
65677: CALL_OW 251
65681: ST_TO_ADDR
// if not x or not y then
65682: LD_VAR 0 10
65686: NOT
65687: PUSH
65688: LD_VAR 0 11
65692: NOT
65693: OR
65694: IFFALSE 65698
// exit ;
65696: GO 66731
// weapon := 0 ;
65698: LD_ADDR_VAR 0 18
65702: PUSH
65703: LD_INT 0
65705: ST_TO_ADDR
// fac_list := [ ] ;
65706: LD_ADDR_VAR 0 17
65710: PUSH
65711: EMPTY
65712: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
65713: LD_ADDR_VAR 0 6
65717: PUSH
65718: LD_VAR 0 1
65722: PPUSH
65723: CALL_OW 274
65727: PPUSH
65728: LD_VAR 0 2
65732: PPUSH
65733: LD_INT 0
65735: PPUSH
65736: CALL 63302 0 3
65740: PPUSH
65741: LD_INT 30
65743: PUSH
65744: LD_INT 3
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PPUSH
65751: CALL_OW 72
65755: ST_TO_ADDR
// if not factories then
65756: LD_VAR 0 6
65760: NOT
65761: IFFALSE 65765
// exit ;
65763: GO 66731
// for i in factories do
65765: LD_ADDR_VAR 0 8
65769: PUSH
65770: LD_VAR 0 6
65774: PUSH
65775: FOR_IN
65776: IFFALSE 65801
// fac_list := fac_list union AvailableWeaponList ( i ) ;
65778: LD_ADDR_VAR 0 17
65782: PUSH
65783: LD_VAR 0 17
65787: PUSH
65788: LD_VAR 0 8
65792: PPUSH
65793: CALL_OW 478
65797: UNION
65798: ST_TO_ADDR
65799: GO 65775
65801: POP
65802: POP
// if not fac_list then
65803: LD_VAR 0 17
65807: NOT
65808: IFFALSE 65812
// exit ;
65810: GO 66731
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
65812: LD_ADDR_VAR 0 5
65816: PUSH
65817: LD_INT 4
65819: PUSH
65820: LD_INT 5
65822: PUSH
65823: LD_INT 9
65825: PUSH
65826: LD_INT 10
65828: PUSH
65829: LD_INT 6
65831: PUSH
65832: LD_INT 7
65834: PUSH
65835: LD_INT 11
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: LIST
65842: LIST
65843: LIST
65844: LIST
65845: LIST
65846: PUSH
65847: LD_INT 27
65849: PUSH
65850: LD_INT 28
65852: PUSH
65853: LD_INT 26
65855: PUSH
65856: LD_INT 30
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: LIST
65863: LIST
65864: PUSH
65865: LD_INT 43
65867: PUSH
65868: LD_INT 44
65870: PUSH
65871: LD_INT 46
65873: PUSH
65874: LD_INT 45
65876: PUSH
65877: LD_INT 47
65879: PUSH
65880: LD_INT 49
65882: PUSH
65883: EMPTY
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: LIST
65895: PUSH
65896: LD_VAR 0 12
65900: ARRAY
65901: ST_TO_ADDR
// list := list isect fac_list ;
65902: LD_ADDR_VAR 0 5
65906: PUSH
65907: LD_VAR 0 5
65911: PUSH
65912: LD_VAR 0 17
65916: ISECT
65917: ST_TO_ADDR
// if not list then
65918: LD_VAR 0 5
65922: NOT
65923: IFFALSE 65927
// exit ;
65925: GO 66731
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
65927: LD_VAR 0 12
65931: PUSH
65932: LD_INT 3
65934: EQUAL
65935: PUSH
65936: LD_INT 49
65938: PUSH
65939: LD_VAR 0 5
65943: IN
65944: AND
65945: PUSH
65946: LD_INT 31
65948: PPUSH
65949: LD_VAR 0 16
65953: PPUSH
65954: CALL_OW 321
65958: PUSH
65959: LD_INT 2
65961: EQUAL
65962: AND
65963: IFFALSE 66023
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
65965: LD_INT 22
65967: PUSH
65968: LD_VAR 0 16
65972: PUSH
65973: EMPTY
65974: LIST
65975: LIST
65976: PUSH
65977: LD_INT 35
65979: PUSH
65980: LD_INT 49
65982: PUSH
65983: EMPTY
65984: LIST
65985: LIST
65986: PUSH
65987: LD_INT 91
65989: PUSH
65990: LD_VAR 0 1
65994: PUSH
65995: LD_INT 10
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: LIST
66002: PUSH
66003: EMPTY
66004: LIST
66005: LIST
66006: LIST
66007: PPUSH
66008: CALL_OW 69
66012: NOT
66013: IFFALSE 66023
// weapon := ru_time_lapser ;
66015: LD_ADDR_VAR 0 18
66019: PUSH
66020: LD_INT 49
66022: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
66023: LD_VAR 0 12
66027: PUSH
66028: LD_INT 1
66030: PUSH
66031: LD_INT 2
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: IN
66038: PUSH
66039: LD_INT 11
66041: PUSH
66042: LD_VAR 0 5
66046: IN
66047: PUSH
66048: LD_INT 30
66050: PUSH
66051: LD_VAR 0 5
66055: IN
66056: OR
66057: AND
66058: PUSH
66059: LD_INT 6
66061: PPUSH
66062: LD_VAR 0 16
66066: PPUSH
66067: CALL_OW 321
66071: PUSH
66072: LD_INT 2
66074: EQUAL
66075: AND
66076: IFFALSE 66241
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
66078: LD_INT 22
66080: PUSH
66081: LD_VAR 0 16
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 2
66092: PUSH
66093: LD_INT 35
66095: PUSH
66096: LD_INT 11
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 35
66105: PUSH
66106: LD_INT 30
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: LIST
66117: PUSH
66118: LD_INT 91
66120: PUSH
66121: LD_VAR 0 1
66125: PUSH
66126: LD_INT 18
66128: PUSH
66129: EMPTY
66130: LIST
66131: LIST
66132: LIST
66133: PUSH
66134: EMPTY
66135: LIST
66136: LIST
66137: LIST
66138: PPUSH
66139: CALL_OW 69
66143: NOT
66144: PUSH
66145: LD_INT 22
66147: PUSH
66148: LD_VAR 0 16
66152: PUSH
66153: EMPTY
66154: LIST
66155: LIST
66156: PUSH
66157: LD_INT 2
66159: PUSH
66160: LD_INT 30
66162: PUSH
66163: LD_INT 32
66165: PUSH
66166: EMPTY
66167: LIST
66168: LIST
66169: PUSH
66170: LD_INT 30
66172: PUSH
66173: LD_INT 33
66175: PUSH
66176: EMPTY
66177: LIST
66178: LIST
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: LIST
66184: PUSH
66185: LD_INT 91
66187: PUSH
66188: LD_VAR 0 1
66192: PUSH
66193: LD_INT 12
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: LIST
66205: PUSH
66206: EMPTY
66207: LIST
66208: PPUSH
66209: CALL_OW 69
66213: PUSH
66214: LD_INT 2
66216: GREATER
66217: AND
66218: IFFALSE 66241
// weapon := [ us_radar , ar_radar ] [ nat ] ;
66220: LD_ADDR_VAR 0 18
66224: PUSH
66225: LD_INT 11
66227: PUSH
66228: LD_INT 30
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_VAR 0 12
66239: ARRAY
66240: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
66241: LD_VAR 0 18
66245: NOT
66246: PUSH
66247: LD_INT 40
66249: PPUSH
66250: LD_VAR 0 16
66254: PPUSH
66255: CALL_OW 321
66259: PUSH
66260: LD_INT 2
66262: EQUAL
66263: AND
66264: PUSH
66265: LD_INT 7
66267: PUSH
66268: LD_VAR 0 5
66272: IN
66273: PUSH
66274: LD_INT 28
66276: PUSH
66277: LD_VAR 0 5
66281: IN
66282: OR
66283: PUSH
66284: LD_INT 45
66286: PUSH
66287: LD_VAR 0 5
66291: IN
66292: OR
66293: AND
66294: IFFALSE 66548
// begin hex := GetHexInfo ( x , y ) ;
66296: LD_ADDR_VAR 0 4
66300: PUSH
66301: LD_VAR 0 10
66305: PPUSH
66306: LD_VAR 0 11
66310: PPUSH
66311: CALL_OW 546
66315: ST_TO_ADDR
// if hex [ 1 ] then
66316: LD_VAR 0 4
66320: PUSH
66321: LD_INT 1
66323: ARRAY
66324: IFFALSE 66328
// exit ;
66326: GO 66731
// height := hex [ 2 ] ;
66328: LD_ADDR_VAR 0 15
66332: PUSH
66333: LD_VAR 0 4
66337: PUSH
66338: LD_INT 2
66340: ARRAY
66341: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
66342: LD_ADDR_VAR 0 14
66346: PUSH
66347: LD_INT 0
66349: PUSH
66350: LD_INT 2
66352: PUSH
66353: LD_INT 3
66355: PUSH
66356: LD_INT 5
66358: PUSH
66359: EMPTY
66360: LIST
66361: LIST
66362: LIST
66363: LIST
66364: ST_TO_ADDR
// for i in tmp do
66365: LD_ADDR_VAR 0 8
66369: PUSH
66370: LD_VAR 0 14
66374: PUSH
66375: FOR_IN
66376: IFFALSE 66546
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
66378: LD_ADDR_VAR 0 9
66382: PUSH
66383: LD_VAR 0 10
66387: PPUSH
66388: LD_VAR 0 8
66392: PPUSH
66393: LD_INT 5
66395: PPUSH
66396: CALL_OW 272
66400: PUSH
66401: LD_VAR 0 11
66405: PPUSH
66406: LD_VAR 0 8
66410: PPUSH
66411: LD_INT 5
66413: PPUSH
66414: CALL_OW 273
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
66423: LD_VAR 0 9
66427: PUSH
66428: LD_INT 1
66430: ARRAY
66431: PPUSH
66432: LD_VAR 0 9
66436: PUSH
66437: LD_INT 2
66439: ARRAY
66440: PPUSH
66441: CALL_OW 488
66445: IFFALSE 66544
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
66447: LD_ADDR_VAR 0 4
66451: PUSH
66452: LD_VAR 0 9
66456: PUSH
66457: LD_INT 1
66459: ARRAY
66460: PPUSH
66461: LD_VAR 0 9
66465: PUSH
66466: LD_INT 2
66468: ARRAY
66469: PPUSH
66470: CALL_OW 546
66474: ST_TO_ADDR
// if hex [ 1 ] then
66475: LD_VAR 0 4
66479: PUSH
66480: LD_INT 1
66482: ARRAY
66483: IFFALSE 66487
// continue ;
66485: GO 66375
// h := hex [ 2 ] ;
66487: LD_ADDR_VAR 0 13
66491: PUSH
66492: LD_VAR 0 4
66496: PUSH
66497: LD_INT 2
66499: ARRAY
66500: ST_TO_ADDR
// if h + 7 < height then
66501: LD_VAR 0 13
66505: PUSH
66506: LD_INT 7
66508: PLUS
66509: PUSH
66510: LD_VAR 0 15
66514: LESS
66515: IFFALSE 66544
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
66517: LD_ADDR_VAR 0 18
66521: PUSH
66522: LD_INT 7
66524: PUSH
66525: LD_INT 28
66527: PUSH
66528: LD_INT 45
66530: PUSH
66531: EMPTY
66532: LIST
66533: LIST
66534: LIST
66535: PUSH
66536: LD_VAR 0 12
66540: ARRAY
66541: ST_TO_ADDR
// break ;
66542: GO 66546
// end ; end ; end ;
66544: GO 66375
66546: POP
66547: POP
// end ; if not weapon then
66548: LD_VAR 0 18
66552: NOT
66553: IFFALSE 66613
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
66555: LD_ADDR_VAR 0 5
66559: PUSH
66560: LD_VAR 0 5
66564: PUSH
66565: LD_INT 11
66567: PUSH
66568: LD_INT 30
66570: PUSH
66571: LD_INT 49
66573: PUSH
66574: EMPTY
66575: LIST
66576: LIST
66577: LIST
66578: DIFF
66579: ST_TO_ADDR
// if not list then
66580: LD_VAR 0 5
66584: NOT
66585: IFFALSE 66589
// exit ;
66587: GO 66731
// weapon := list [ rand ( 1 , list ) ] ;
66589: LD_ADDR_VAR 0 18
66593: PUSH
66594: LD_VAR 0 5
66598: PUSH
66599: LD_INT 1
66601: PPUSH
66602: LD_VAR 0 5
66606: PPUSH
66607: CALL_OW 12
66611: ARRAY
66612: ST_TO_ADDR
// end ; if weapon then
66613: LD_VAR 0 18
66617: IFFALSE 66731
// begin tmp := CostOfWeapon ( weapon ) ;
66619: LD_ADDR_VAR 0 14
66623: PUSH
66624: LD_VAR 0 18
66628: PPUSH
66629: CALL_OW 451
66633: ST_TO_ADDR
// j := GetBase ( tower ) ;
66634: LD_ADDR_VAR 0 9
66638: PUSH
66639: LD_VAR 0 1
66643: PPUSH
66644: CALL_OW 274
66648: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
66649: LD_VAR 0 9
66653: PPUSH
66654: LD_INT 1
66656: PPUSH
66657: CALL_OW 275
66661: PUSH
66662: LD_VAR 0 14
66666: PUSH
66667: LD_INT 1
66669: ARRAY
66670: GREATEREQUAL
66671: PUSH
66672: LD_VAR 0 9
66676: PPUSH
66677: LD_INT 2
66679: PPUSH
66680: CALL_OW 275
66684: PUSH
66685: LD_VAR 0 14
66689: PUSH
66690: LD_INT 2
66692: ARRAY
66693: GREATEREQUAL
66694: AND
66695: PUSH
66696: LD_VAR 0 9
66700: PPUSH
66701: LD_INT 3
66703: PPUSH
66704: CALL_OW 275
66708: PUSH
66709: LD_VAR 0 14
66713: PUSH
66714: LD_INT 3
66716: ARRAY
66717: GREATEREQUAL
66718: AND
66719: IFFALSE 66731
// result := weapon ;
66721: LD_ADDR_VAR 0 3
66725: PUSH
66726: LD_VAR 0 18
66730: ST_TO_ADDR
// end ; end ;
66731: LD_VAR 0 3
66735: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
66736: LD_INT 0
66738: PPUSH
66739: PPUSH
// result := true ;
66740: LD_ADDR_VAR 0 3
66744: PUSH
66745: LD_INT 1
66747: ST_TO_ADDR
// if array1 = array2 then
66748: LD_VAR 0 1
66752: PUSH
66753: LD_VAR 0 2
66757: EQUAL
66758: IFFALSE 66818
// begin for i = 1 to array1 do
66760: LD_ADDR_VAR 0 4
66764: PUSH
66765: DOUBLE
66766: LD_INT 1
66768: DEC
66769: ST_TO_ADDR
66770: LD_VAR 0 1
66774: PUSH
66775: FOR_TO
66776: IFFALSE 66814
// if array1 [ i ] <> array2 [ i ] then
66778: LD_VAR 0 1
66782: PUSH
66783: LD_VAR 0 4
66787: ARRAY
66788: PUSH
66789: LD_VAR 0 2
66793: PUSH
66794: LD_VAR 0 4
66798: ARRAY
66799: NONEQUAL
66800: IFFALSE 66812
// begin result := false ;
66802: LD_ADDR_VAR 0 3
66806: PUSH
66807: LD_INT 0
66809: ST_TO_ADDR
// break ;
66810: GO 66814
// end ;
66812: GO 66775
66814: POP
66815: POP
// end else
66816: GO 66826
// result := false ;
66818: LD_ADDR_VAR 0 3
66822: PUSH
66823: LD_INT 0
66825: ST_TO_ADDR
// end ;
66826: LD_VAR 0 3
66830: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
66831: LD_INT 0
66833: PPUSH
66834: PPUSH
// if not array1 or not array2 then
66835: LD_VAR 0 1
66839: NOT
66840: PUSH
66841: LD_VAR 0 2
66845: NOT
66846: OR
66847: IFFALSE 66851
// exit ;
66849: GO 66915
// result := true ;
66851: LD_ADDR_VAR 0 3
66855: PUSH
66856: LD_INT 1
66858: ST_TO_ADDR
// for i = 1 to array1 do
66859: LD_ADDR_VAR 0 4
66863: PUSH
66864: DOUBLE
66865: LD_INT 1
66867: DEC
66868: ST_TO_ADDR
66869: LD_VAR 0 1
66873: PUSH
66874: FOR_TO
66875: IFFALSE 66913
// if array1 [ i ] <> array2 [ i ] then
66877: LD_VAR 0 1
66881: PUSH
66882: LD_VAR 0 4
66886: ARRAY
66887: PUSH
66888: LD_VAR 0 2
66892: PUSH
66893: LD_VAR 0 4
66897: ARRAY
66898: NONEQUAL
66899: IFFALSE 66911
// begin result := false ;
66901: LD_ADDR_VAR 0 3
66905: PUSH
66906: LD_INT 0
66908: ST_TO_ADDR
// break ;
66909: GO 66913
// end ;
66911: GO 66874
66913: POP
66914: POP
// end ;
66915: LD_VAR 0 3
66919: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
66920: LD_INT 0
66922: PPUSH
66923: PPUSH
66924: PPUSH
// pom := GetBase ( fac ) ;
66925: LD_ADDR_VAR 0 5
66929: PUSH
66930: LD_VAR 0 1
66934: PPUSH
66935: CALL_OW 274
66939: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
66940: LD_ADDR_VAR 0 4
66944: PUSH
66945: LD_VAR 0 2
66949: PUSH
66950: LD_INT 1
66952: ARRAY
66953: PPUSH
66954: LD_VAR 0 2
66958: PUSH
66959: LD_INT 2
66961: ARRAY
66962: PPUSH
66963: LD_VAR 0 2
66967: PUSH
66968: LD_INT 3
66970: ARRAY
66971: PPUSH
66972: LD_VAR 0 2
66976: PUSH
66977: LD_INT 4
66979: ARRAY
66980: PPUSH
66981: CALL_OW 449
66985: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66986: LD_ADDR_VAR 0 3
66990: PUSH
66991: LD_VAR 0 5
66995: PPUSH
66996: LD_INT 1
66998: PPUSH
66999: CALL_OW 275
67003: PUSH
67004: LD_VAR 0 4
67008: PUSH
67009: LD_INT 1
67011: ARRAY
67012: GREATEREQUAL
67013: PUSH
67014: LD_VAR 0 5
67018: PPUSH
67019: LD_INT 2
67021: PPUSH
67022: CALL_OW 275
67026: PUSH
67027: LD_VAR 0 4
67031: PUSH
67032: LD_INT 2
67034: ARRAY
67035: GREATEREQUAL
67036: AND
67037: PUSH
67038: LD_VAR 0 5
67042: PPUSH
67043: LD_INT 3
67045: PPUSH
67046: CALL_OW 275
67050: PUSH
67051: LD_VAR 0 4
67055: PUSH
67056: LD_INT 3
67058: ARRAY
67059: GREATEREQUAL
67060: AND
67061: ST_TO_ADDR
// end ;
67062: LD_VAR 0 3
67066: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
67067: LD_INT 0
67069: PPUSH
67070: PPUSH
67071: PPUSH
67072: PPUSH
// pom := GetBase ( building ) ;
67073: LD_ADDR_VAR 0 3
67077: PUSH
67078: LD_VAR 0 1
67082: PPUSH
67083: CALL_OW 274
67087: ST_TO_ADDR
// if not pom then
67088: LD_VAR 0 3
67092: NOT
67093: IFFALSE 67097
// exit ;
67095: GO 67267
// btype := GetBType ( building ) ;
67097: LD_ADDR_VAR 0 5
67101: PUSH
67102: LD_VAR 0 1
67106: PPUSH
67107: CALL_OW 266
67111: ST_TO_ADDR
// if btype = b_armoury then
67112: LD_VAR 0 5
67116: PUSH
67117: LD_INT 4
67119: EQUAL
67120: IFFALSE 67130
// btype := b_barracks ;
67122: LD_ADDR_VAR 0 5
67126: PUSH
67127: LD_INT 5
67129: ST_TO_ADDR
// if btype = b_depot then
67130: LD_VAR 0 5
67134: PUSH
67135: LD_INT 0
67137: EQUAL
67138: IFFALSE 67148
// btype := b_warehouse ;
67140: LD_ADDR_VAR 0 5
67144: PUSH
67145: LD_INT 1
67147: ST_TO_ADDR
// if btype = b_workshop then
67148: LD_VAR 0 5
67152: PUSH
67153: LD_INT 2
67155: EQUAL
67156: IFFALSE 67166
// btype := b_factory ;
67158: LD_ADDR_VAR 0 5
67162: PUSH
67163: LD_INT 3
67165: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
67166: LD_ADDR_VAR 0 4
67170: PUSH
67171: LD_VAR 0 5
67175: PPUSH
67176: LD_VAR 0 1
67180: PPUSH
67181: CALL_OW 248
67185: PPUSH
67186: CALL_OW 450
67190: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67191: LD_ADDR_VAR 0 2
67195: PUSH
67196: LD_VAR 0 3
67200: PPUSH
67201: LD_INT 1
67203: PPUSH
67204: CALL_OW 275
67208: PUSH
67209: LD_VAR 0 4
67213: PUSH
67214: LD_INT 1
67216: ARRAY
67217: GREATEREQUAL
67218: PUSH
67219: LD_VAR 0 3
67223: PPUSH
67224: LD_INT 2
67226: PPUSH
67227: CALL_OW 275
67231: PUSH
67232: LD_VAR 0 4
67236: PUSH
67237: LD_INT 2
67239: ARRAY
67240: GREATEREQUAL
67241: AND
67242: PUSH
67243: LD_VAR 0 3
67247: PPUSH
67248: LD_INT 3
67250: PPUSH
67251: CALL_OW 275
67255: PUSH
67256: LD_VAR 0 4
67260: PUSH
67261: LD_INT 3
67263: ARRAY
67264: GREATEREQUAL
67265: AND
67266: ST_TO_ADDR
// end ;
67267: LD_VAR 0 2
67271: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
67272: LD_INT 0
67274: PPUSH
67275: PPUSH
67276: PPUSH
// pom := GetBase ( building ) ;
67277: LD_ADDR_VAR 0 4
67281: PUSH
67282: LD_VAR 0 1
67286: PPUSH
67287: CALL_OW 274
67291: ST_TO_ADDR
// if not pom then
67292: LD_VAR 0 4
67296: NOT
67297: IFFALSE 67301
// exit ;
67299: GO 67402
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
67301: LD_ADDR_VAR 0 5
67305: PUSH
67306: LD_VAR 0 2
67310: PPUSH
67311: LD_VAR 0 1
67315: PPUSH
67316: CALL_OW 248
67320: PPUSH
67321: CALL_OW 450
67325: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67326: LD_ADDR_VAR 0 3
67330: PUSH
67331: LD_VAR 0 4
67335: PPUSH
67336: LD_INT 1
67338: PPUSH
67339: CALL_OW 275
67343: PUSH
67344: LD_VAR 0 5
67348: PUSH
67349: LD_INT 1
67351: ARRAY
67352: GREATEREQUAL
67353: PUSH
67354: LD_VAR 0 4
67358: PPUSH
67359: LD_INT 2
67361: PPUSH
67362: CALL_OW 275
67366: PUSH
67367: LD_VAR 0 5
67371: PUSH
67372: LD_INT 2
67374: ARRAY
67375: GREATEREQUAL
67376: AND
67377: PUSH
67378: LD_VAR 0 4
67382: PPUSH
67383: LD_INT 3
67385: PPUSH
67386: CALL_OW 275
67390: PUSH
67391: LD_VAR 0 5
67395: PUSH
67396: LD_INT 3
67398: ARRAY
67399: GREATEREQUAL
67400: AND
67401: ST_TO_ADDR
// end ;
67402: LD_VAR 0 3
67406: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
67407: LD_INT 0
67409: PPUSH
67410: PPUSH
67411: PPUSH
67412: PPUSH
67413: PPUSH
67414: PPUSH
67415: PPUSH
67416: PPUSH
67417: PPUSH
67418: PPUSH
67419: PPUSH
// result := false ;
67420: LD_ADDR_VAR 0 8
67424: PUSH
67425: LD_INT 0
67427: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
67428: LD_VAR 0 5
67432: NOT
67433: PUSH
67434: LD_VAR 0 1
67438: NOT
67439: OR
67440: PUSH
67441: LD_VAR 0 2
67445: NOT
67446: OR
67447: PUSH
67448: LD_VAR 0 3
67452: NOT
67453: OR
67454: IFFALSE 67458
// exit ;
67456: GO 68272
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
67458: LD_ADDR_VAR 0 14
67462: PUSH
67463: LD_VAR 0 1
67467: PPUSH
67468: LD_VAR 0 2
67472: PPUSH
67473: LD_VAR 0 3
67477: PPUSH
67478: LD_VAR 0 4
67482: PPUSH
67483: LD_VAR 0 5
67487: PUSH
67488: LD_INT 1
67490: ARRAY
67491: PPUSH
67492: CALL_OW 248
67496: PPUSH
67497: LD_INT 0
67499: PPUSH
67500: CALL 69525 0 6
67504: ST_TO_ADDR
// if not hexes then
67505: LD_VAR 0 14
67509: NOT
67510: IFFALSE 67514
// exit ;
67512: GO 68272
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67514: LD_ADDR_VAR 0 17
67518: PUSH
67519: LD_VAR 0 5
67523: PPUSH
67524: LD_INT 22
67526: PUSH
67527: LD_VAR 0 13
67531: PPUSH
67532: CALL_OW 255
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: LD_INT 30
67546: PUSH
67547: LD_INT 0
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 30
67556: PUSH
67557: LD_INT 1
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: EMPTY
67565: LIST
67566: LIST
67567: LIST
67568: PUSH
67569: EMPTY
67570: LIST
67571: LIST
67572: PPUSH
67573: CALL_OW 72
67577: ST_TO_ADDR
// for i = 1 to hexes do
67578: LD_ADDR_VAR 0 9
67582: PUSH
67583: DOUBLE
67584: LD_INT 1
67586: DEC
67587: ST_TO_ADDR
67588: LD_VAR 0 14
67592: PUSH
67593: FOR_TO
67594: IFFALSE 68270
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67596: LD_ADDR_VAR 0 13
67600: PUSH
67601: LD_VAR 0 14
67605: PUSH
67606: LD_VAR 0 9
67610: ARRAY
67611: PUSH
67612: LD_INT 1
67614: ARRAY
67615: PPUSH
67616: LD_VAR 0 14
67620: PUSH
67621: LD_VAR 0 9
67625: ARRAY
67626: PUSH
67627: LD_INT 2
67629: ARRAY
67630: PPUSH
67631: CALL_OW 428
67635: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
67636: LD_VAR 0 14
67640: PUSH
67641: LD_VAR 0 9
67645: ARRAY
67646: PUSH
67647: LD_INT 1
67649: ARRAY
67650: PPUSH
67651: LD_VAR 0 14
67655: PUSH
67656: LD_VAR 0 9
67660: ARRAY
67661: PUSH
67662: LD_INT 2
67664: ARRAY
67665: PPUSH
67666: CALL_OW 351
67670: PUSH
67671: LD_VAR 0 14
67675: PUSH
67676: LD_VAR 0 9
67680: ARRAY
67681: PUSH
67682: LD_INT 1
67684: ARRAY
67685: PPUSH
67686: LD_VAR 0 14
67690: PUSH
67691: LD_VAR 0 9
67695: ARRAY
67696: PUSH
67697: LD_INT 2
67699: ARRAY
67700: PPUSH
67701: CALL_OW 488
67705: NOT
67706: OR
67707: PUSH
67708: LD_VAR 0 13
67712: PPUSH
67713: CALL_OW 247
67717: PUSH
67718: LD_INT 3
67720: EQUAL
67721: OR
67722: IFFALSE 67728
// exit ;
67724: POP
67725: POP
67726: GO 68272
// if not tmp then
67728: LD_VAR 0 13
67732: NOT
67733: IFFALSE 67737
// continue ;
67735: GO 67593
// result := true ;
67737: LD_ADDR_VAR 0 8
67741: PUSH
67742: LD_INT 1
67744: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
67745: LD_VAR 0 6
67749: PUSH
67750: LD_VAR 0 13
67754: PPUSH
67755: CALL_OW 247
67759: PUSH
67760: LD_INT 2
67762: EQUAL
67763: AND
67764: PUSH
67765: LD_VAR 0 13
67769: PPUSH
67770: CALL_OW 263
67774: PUSH
67775: LD_INT 1
67777: EQUAL
67778: AND
67779: IFFALSE 67943
// begin if IsDrivenBy ( tmp ) then
67781: LD_VAR 0 13
67785: PPUSH
67786: CALL_OW 311
67790: IFFALSE 67794
// continue ;
67792: GO 67593
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
67794: LD_VAR 0 6
67798: PPUSH
67799: LD_INT 3
67801: PUSH
67802: LD_INT 60
67804: PUSH
67805: EMPTY
67806: LIST
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PUSH
67812: LD_INT 3
67814: PUSH
67815: LD_INT 55
67817: PUSH
67818: EMPTY
67819: LIST
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PPUSH
67829: CALL_OW 72
67833: IFFALSE 67941
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
67835: LD_ADDR_VAR 0 18
67839: PUSH
67840: LD_VAR 0 6
67844: PPUSH
67845: LD_INT 3
67847: PUSH
67848: LD_INT 60
67850: PUSH
67851: EMPTY
67852: LIST
67853: PUSH
67854: EMPTY
67855: LIST
67856: LIST
67857: PUSH
67858: LD_INT 3
67860: PUSH
67861: LD_INT 55
67863: PUSH
67864: EMPTY
67865: LIST
67866: PUSH
67867: EMPTY
67868: LIST
67869: LIST
67870: PUSH
67871: EMPTY
67872: LIST
67873: LIST
67874: PPUSH
67875: CALL_OW 72
67879: PUSH
67880: LD_INT 1
67882: ARRAY
67883: ST_TO_ADDR
// if IsInUnit ( driver ) then
67884: LD_VAR 0 18
67888: PPUSH
67889: CALL_OW 310
67893: IFFALSE 67904
// ComExit ( driver ) ;
67895: LD_VAR 0 18
67899: PPUSH
67900: CALL 93326 0 1
// AddComEnterUnit ( driver , tmp ) ;
67904: LD_VAR 0 18
67908: PPUSH
67909: LD_VAR 0 13
67913: PPUSH
67914: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
67918: LD_VAR 0 18
67922: PPUSH
67923: LD_VAR 0 7
67927: PPUSH
67928: CALL_OW 173
// AddComExitVehicle ( driver ) ;
67932: LD_VAR 0 18
67936: PPUSH
67937: CALL_OW 181
// end ; continue ;
67941: GO 67593
// end ; if not cleaners or not tmp in cleaners then
67943: LD_VAR 0 6
67947: NOT
67948: PUSH
67949: LD_VAR 0 13
67953: PUSH
67954: LD_VAR 0 6
67958: IN
67959: NOT
67960: OR
67961: IFFALSE 68268
// begin if dep then
67963: LD_VAR 0 17
67967: IFFALSE 68103
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
67969: LD_ADDR_VAR 0 16
67973: PUSH
67974: LD_VAR 0 17
67978: PUSH
67979: LD_INT 1
67981: ARRAY
67982: PPUSH
67983: CALL_OW 250
67987: PPUSH
67988: LD_VAR 0 17
67992: PUSH
67993: LD_INT 1
67995: ARRAY
67996: PPUSH
67997: CALL_OW 254
68001: PPUSH
68002: LD_INT 5
68004: PPUSH
68005: CALL_OW 272
68009: PUSH
68010: LD_VAR 0 17
68014: PUSH
68015: LD_INT 1
68017: ARRAY
68018: PPUSH
68019: CALL_OW 251
68023: PPUSH
68024: LD_VAR 0 17
68028: PUSH
68029: LD_INT 1
68031: ARRAY
68032: PPUSH
68033: CALL_OW 254
68037: PPUSH
68038: LD_INT 5
68040: PPUSH
68041: CALL_OW 273
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
68050: LD_VAR 0 16
68054: PUSH
68055: LD_INT 1
68057: ARRAY
68058: PPUSH
68059: LD_VAR 0 16
68063: PUSH
68064: LD_INT 2
68066: ARRAY
68067: PPUSH
68068: CALL_OW 488
68072: IFFALSE 68103
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
68074: LD_VAR 0 13
68078: PPUSH
68079: LD_VAR 0 16
68083: PUSH
68084: LD_INT 1
68086: ARRAY
68087: PPUSH
68088: LD_VAR 0 16
68092: PUSH
68093: LD_INT 2
68095: ARRAY
68096: PPUSH
68097: CALL_OW 111
// continue ;
68101: GO 67593
// end ; end ; r := GetDir ( tmp ) ;
68103: LD_ADDR_VAR 0 15
68107: PUSH
68108: LD_VAR 0 13
68112: PPUSH
68113: CALL_OW 254
68117: ST_TO_ADDR
// if r = 5 then
68118: LD_VAR 0 15
68122: PUSH
68123: LD_INT 5
68125: EQUAL
68126: IFFALSE 68136
// r := 0 ;
68128: LD_ADDR_VAR 0 15
68132: PUSH
68133: LD_INT 0
68135: ST_TO_ADDR
// for j = r to 5 do
68136: LD_ADDR_VAR 0 10
68140: PUSH
68141: DOUBLE
68142: LD_VAR 0 15
68146: DEC
68147: ST_TO_ADDR
68148: LD_INT 5
68150: PUSH
68151: FOR_TO
68152: IFFALSE 68266
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
68154: LD_ADDR_VAR 0 11
68158: PUSH
68159: LD_VAR 0 13
68163: PPUSH
68164: CALL_OW 250
68168: PPUSH
68169: LD_VAR 0 10
68173: PPUSH
68174: LD_INT 2
68176: PPUSH
68177: CALL_OW 272
68181: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
68182: LD_ADDR_VAR 0 12
68186: PUSH
68187: LD_VAR 0 13
68191: PPUSH
68192: CALL_OW 251
68196: PPUSH
68197: LD_VAR 0 10
68201: PPUSH
68202: LD_INT 2
68204: PPUSH
68205: CALL_OW 273
68209: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
68210: LD_VAR 0 11
68214: PPUSH
68215: LD_VAR 0 12
68219: PPUSH
68220: CALL_OW 488
68224: PUSH
68225: LD_VAR 0 11
68229: PPUSH
68230: LD_VAR 0 12
68234: PPUSH
68235: CALL_OW 428
68239: NOT
68240: AND
68241: IFFALSE 68264
// begin ComMoveXY ( tmp , _x , _y ) ;
68243: LD_VAR 0 13
68247: PPUSH
68248: LD_VAR 0 11
68252: PPUSH
68253: LD_VAR 0 12
68257: PPUSH
68258: CALL_OW 111
// break ;
68262: GO 68266
// end ; end ;
68264: GO 68151
68266: POP
68267: POP
// end ; end ;
68268: GO 67593
68270: POP
68271: POP
// end ;
68272: LD_VAR 0 8
68276: RET
// export function BuildingTechInvented ( side , btype ) ; begin
68277: LD_INT 0
68279: PPUSH
// result := true ;
68280: LD_ADDR_VAR 0 3
68284: PUSH
68285: LD_INT 1
68287: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
68288: LD_VAR 0 2
68292: PUSH
68293: LD_INT 24
68295: DOUBLE
68296: EQUAL
68297: IFTRUE 68307
68299: LD_INT 33
68301: DOUBLE
68302: EQUAL
68303: IFTRUE 68307
68305: GO 68332
68307: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
68308: LD_ADDR_VAR 0 3
68312: PUSH
68313: LD_INT 32
68315: PPUSH
68316: LD_VAR 0 1
68320: PPUSH
68321: CALL_OW 321
68325: PUSH
68326: LD_INT 2
68328: EQUAL
68329: ST_TO_ADDR
68330: GO 68648
68332: LD_INT 20
68334: DOUBLE
68335: EQUAL
68336: IFTRUE 68340
68338: GO 68365
68340: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
68341: LD_ADDR_VAR 0 3
68345: PUSH
68346: LD_INT 6
68348: PPUSH
68349: LD_VAR 0 1
68353: PPUSH
68354: CALL_OW 321
68358: PUSH
68359: LD_INT 2
68361: EQUAL
68362: ST_TO_ADDR
68363: GO 68648
68365: LD_INT 22
68367: DOUBLE
68368: EQUAL
68369: IFTRUE 68379
68371: LD_INT 36
68373: DOUBLE
68374: EQUAL
68375: IFTRUE 68379
68377: GO 68404
68379: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
68380: LD_ADDR_VAR 0 3
68384: PUSH
68385: LD_INT 15
68387: PPUSH
68388: LD_VAR 0 1
68392: PPUSH
68393: CALL_OW 321
68397: PUSH
68398: LD_INT 2
68400: EQUAL
68401: ST_TO_ADDR
68402: GO 68648
68404: LD_INT 30
68406: DOUBLE
68407: EQUAL
68408: IFTRUE 68412
68410: GO 68437
68412: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
68413: LD_ADDR_VAR 0 3
68417: PUSH
68418: LD_INT 20
68420: PPUSH
68421: LD_VAR 0 1
68425: PPUSH
68426: CALL_OW 321
68430: PUSH
68431: LD_INT 2
68433: EQUAL
68434: ST_TO_ADDR
68435: GO 68648
68437: LD_INT 28
68439: DOUBLE
68440: EQUAL
68441: IFTRUE 68451
68443: LD_INT 21
68445: DOUBLE
68446: EQUAL
68447: IFTRUE 68451
68449: GO 68476
68451: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
68452: LD_ADDR_VAR 0 3
68456: PUSH
68457: LD_INT 21
68459: PPUSH
68460: LD_VAR 0 1
68464: PPUSH
68465: CALL_OW 321
68469: PUSH
68470: LD_INT 2
68472: EQUAL
68473: ST_TO_ADDR
68474: GO 68648
68476: LD_INT 16
68478: DOUBLE
68479: EQUAL
68480: IFTRUE 68484
68482: GO 68509
68484: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
68485: LD_ADDR_VAR 0 3
68489: PUSH
68490: LD_INT 84
68492: PPUSH
68493: LD_VAR 0 1
68497: PPUSH
68498: CALL_OW 321
68502: PUSH
68503: LD_INT 2
68505: EQUAL
68506: ST_TO_ADDR
68507: GO 68648
68509: LD_INT 19
68511: DOUBLE
68512: EQUAL
68513: IFTRUE 68523
68515: LD_INT 23
68517: DOUBLE
68518: EQUAL
68519: IFTRUE 68523
68521: GO 68548
68523: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
68524: LD_ADDR_VAR 0 3
68528: PUSH
68529: LD_INT 83
68531: PPUSH
68532: LD_VAR 0 1
68536: PPUSH
68537: CALL_OW 321
68541: PUSH
68542: LD_INT 2
68544: EQUAL
68545: ST_TO_ADDR
68546: GO 68648
68548: LD_INT 17
68550: DOUBLE
68551: EQUAL
68552: IFTRUE 68556
68554: GO 68581
68556: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
68557: LD_ADDR_VAR 0 3
68561: PUSH
68562: LD_INT 39
68564: PPUSH
68565: LD_VAR 0 1
68569: PPUSH
68570: CALL_OW 321
68574: PUSH
68575: LD_INT 2
68577: EQUAL
68578: ST_TO_ADDR
68579: GO 68648
68581: LD_INT 18
68583: DOUBLE
68584: EQUAL
68585: IFTRUE 68589
68587: GO 68614
68589: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
68590: LD_ADDR_VAR 0 3
68594: PUSH
68595: LD_INT 40
68597: PPUSH
68598: LD_VAR 0 1
68602: PPUSH
68603: CALL_OW 321
68607: PUSH
68608: LD_INT 2
68610: EQUAL
68611: ST_TO_ADDR
68612: GO 68648
68614: LD_INT 27
68616: DOUBLE
68617: EQUAL
68618: IFTRUE 68622
68620: GO 68647
68622: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
68623: LD_ADDR_VAR 0 3
68627: PUSH
68628: LD_INT 35
68630: PPUSH
68631: LD_VAR 0 1
68635: PPUSH
68636: CALL_OW 321
68640: PUSH
68641: LD_INT 2
68643: EQUAL
68644: ST_TO_ADDR
68645: GO 68648
68647: POP
// end ;
68648: LD_VAR 0 3
68652: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
68653: LD_INT 0
68655: PPUSH
68656: PPUSH
68657: PPUSH
68658: PPUSH
68659: PPUSH
68660: PPUSH
68661: PPUSH
68662: PPUSH
68663: PPUSH
68664: PPUSH
68665: PPUSH
// result := false ;
68666: LD_ADDR_VAR 0 6
68670: PUSH
68671: LD_INT 0
68673: ST_TO_ADDR
// if btype = b_depot then
68674: LD_VAR 0 2
68678: PUSH
68679: LD_INT 0
68681: EQUAL
68682: IFFALSE 68694
// begin result := true ;
68684: LD_ADDR_VAR 0 6
68688: PUSH
68689: LD_INT 1
68691: ST_TO_ADDR
// exit ;
68692: GO 69520
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
68694: LD_VAR 0 1
68698: NOT
68699: PUSH
68700: LD_VAR 0 1
68704: PPUSH
68705: CALL_OW 266
68709: PUSH
68710: LD_INT 0
68712: PUSH
68713: LD_INT 1
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: IN
68720: NOT
68721: OR
68722: PUSH
68723: LD_VAR 0 2
68727: NOT
68728: OR
68729: PUSH
68730: LD_VAR 0 5
68734: PUSH
68735: LD_INT 0
68737: PUSH
68738: LD_INT 1
68740: PUSH
68741: LD_INT 2
68743: PUSH
68744: LD_INT 3
68746: PUSH
68747: LD_INT 4
68749: PUSH
68750: LD_INT 5
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: IN
68761: NOT
68762: OR
68763: PUSH
68764: LD_VAR 0 3
68768: PPUSH
68769: LD_VAR 0 4
68773: PPUSH
68774: CALL_OW 488
68778: NOT
68779: OR
68780: IFFALSE 68784
// exit ;
68782: GO 69520
// side := GetSide ( depot ) ;
68784: LD_ADDR_VAR 0 9
68788: PUSH
68789: LD_VAR 0 1
68793: PPUSH
68794: CALL_OW 255
68798: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
68799: LD_VAR 0 9
68803: PPUSH
68804: LD_VAR 0 2
68808: PPUSH
68809: CALL 68277 0 2
68813: NOT
68814: IFFALSE 68818
// exit ;
68816: GO 69520
// pom := GetBase ( depot ) ;
68818: LD_ADDR_VAR 0 10
68822: PUSH
68823: LD_VAR 0 1
68827: PPUSH
68828: CALL_OW 274
68832: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68833: LD_ADDR_VAR 0 11
68837: PUSH
68838: LD_VAR 0 2
68842: PPUSH
68843: LD_VAR 0 1
68847: PPUSH
68848: CALL_OW 248
68852: PPUSH
68853: CALL_OW 450
68857: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
68858: LD_VAR 0 10
68862: PPUSH
68863: LD_INT 1
68865: PPUSH
68866: CALL_OW 275
68870: PUSH
68871: LD_VAR 0 11
68875: PUSH
68876: LD_INT 1
68878: ARRAY
68879: GREATEREQUAL
68880: PUSH
68881: LD_VAR 0 10
68885: PPUSH
68886: LD_INT 2
68888: PPUSH
68889: CALL_OW 275
68893: PUSH
68894: LD_VAR 0 11
68898: PUSH
68899: LD_INT 2
68901: ARRAY
68902: GREATEREQUAL
68903: AND
68904: PUSH
68905: LD_VAR 0 10
68909: PPUSH
68910: LD_INT 3
68912: PPUSH
68913: CALL_OW 275
68917: PUSH
68918: LD_VAR 0 11
68922: PUSH
68923: LD_INT 3
68925: ARRAY
68926: GREATEREQUAL
68927: AND
68928: NOT
68929: IFFALSE 68933
// exit ;
68931: GO 69520
// if GetBType ( depot ) = b_depot then
68933: LD_VAR 0 1
68937: PPUSH
68938: CALL_OW 266
68942: PUSH
68943: LD_INT 0
68945: EQUAL
68946: IFFALSE 68958
// dist := 28 else
68948: LD_ADDR_VAR 0 14
68952: PUSH
68953: LD_INT 28
68955: ST_TO_ADDR
68956: GO 68966
// dist := 36 ;
68958: LD_ADDR_VAR 0 14
68962: PUSH
68963: LD_INT 36
68965: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
68966: LD_VAR 0 1
68970: PPUSH
68971: LD_VAR 0 3
68975: PPUSH
68976: LD_VAR 0 4
68980: PPUSH
68981: CALL_OW 297
68985: PUSH
68986: LD_VAR 0 14
68990: GREATER
68991: IFFALSE 68995
// exit ;
68993: GO 69520
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
68995: LD_ADDR_VAR 0 12
68999: PUSH
69000: LD_VAR 0 2
69004: PPUSH
69005: LD_VAR 0 3
69009: PPUSH
69010: LD_VAR 0 4
69014: PPUSH
69015: LD_VAR 0 5
69019: PPUSH
69020: LD_VAR 0 1
69024: PPUSH
69025: CALL_OW 248
69029: PPUSH
69030: LD_INT 0
69032: PPUSH
69033: CALL 69525 0 6
69037: ST_TO_ADDR
// if not hexes then
69038: LD_VAR 0 12
69042: NOT
69043: IFFALSE 69047
// exit ;
69045: GO 69520
// hex := GetHexInfo ( x , y ) ;
69047: LD_ADDR_VAR 0 15
69051: PUSH
69052: LD_VAR 0 3
69056: PPUSH
69057: LD_VAR 0 4
69061: PPUSH
69062: CALL_OW 546
69066: ST_TO_ADDR
// if hex [ 1 ] then
69067: LD_VAR 0 15
69071: PUSH
69072: LD_INT 1
69074: ARRAY
69075: IFFALSE 69079
// exit ;
69077: GO 69520
// height := hex [ 2 ] ;
69079: LD_ADDR_VAR 0 13
69083: PUSH
69084: LD_VAR 0 15
69088: PUSH
69089: LD_INT 2
69091: ARRAY
69092: ST_TO_ADDR
// for i = 1 to hexes do
69093: LD_ADDR_VAR 0 7
69097: PUSH
69098: DOUBLE
69099: LD_INT 1
69101: DEC
69102: ST_TO_ADDR
69103: LD_VAR 0 12
69107: PUSH
69108: FOR_TO
69109: IFFALSE 69439
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
69111: LD_VAR 0 12
69115: PUSH
69116: LD_VAR 0 7
69120: ARRAY
69121: PUSH
69122: LD_INT 1
69124: ARRAY
69125: PPUSH
69126: LD_VAR 0 12
69130: PUSH
69131: LD_VAR 0 7
69135: ARRAY
69136: PUSH
69137: LD_INT 2
69139: ARRAY
69140: PPUSH
69141: CALL_OW 488
69145: NOT
69146: PUSH
69147: LD_VAR 0 12
69151: PUSH
69152: LD_VAR 0 7
69156: ARRAY
69157: PUSH
69158: LD_INT 1
69160: ARRAY
69161: PPUSH
69162: LD_VAR 0 12
69166: PUSH
69167: LD_VAR 0 7
69171: ARRAY
69172: PUSH
69173: LD_INT 2
69175: ARRAY
69176: PPUSH
69177: CALL_OW 428
69181: PUSH
69182: LD_INT 0
69184: GREATER
69185: OR
69186: PUSH
69187: LD_VAR 0 12
69191: PUSH
69192: LD_VAR 0 7
69196: ARRAY
69197: PUSH
69198: LD_INT 1
69200: ARRAY
69201: PPUSH
69202: LD_VAR 0 12
69206: PUSH
69207: LD_VAR 0 7
69211: ARRAY
69212: PUSH
69213: LD_INT 2
69215: ARRAY
69216: PPUSH
69217: CALL_OW 351
69221: OR
69222: IFFALSE 69228
// exit ;
69224: POP
69225: POP
69226: GO 69520
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69228: LD_ADDR_VAR 0 8
69232: PUSH
69233: LD_VAR 0 12
69237: PUSH
69238: LD_VAR 0 7
69242: ARRAY
69243: PUSH
69244: LD_INT 1
69246: ARRAY
69247: PPUSH
69248: LD_VAR 0 12
69252: PUSH
69253: LD_VAR 0 7
69257: ARRAY
69258: PUSH
69259: LD_INT 2
69261: ARRAY
69262: PPUSH
69263: CALL_OW 546
69267: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
69268: LD_VAR 0 8
69272: PUSH
69273: LD_INT 1
69275: ARRAY
69276: PUSH
69277: LD_VAR 0 8
69281: PUSH
69282: LD_INT 2
69284: ARRAY
69285: PUSH
69286: LD_VAR 0 13
69290: PUSH
69291: LD_INT 2
69293: PLUS
69294: GREATER
69295: OR
69296: PUSH
69297: LD_VAR 0 8
69301: PUSH
69302: LD_INT 2
69304: ARRAY
69305: PUSH
69306: LD_VAR 0 13
69310: PUSH
69311: LD_INT 2
69313: MINUS
69314: LESS
69315: OR
69316: PUSH
69317: LD_VAR 0 8
69321: PUSH
69322: LD_INT 3
69324: ARRAY
69325: PUSH
69326: LD_INT 0
69328: PUSH
69329: LD_INT 8
69331: PUSH
69332: LD_INT 9
69334: PUSH
69335: LD_INT 10
69337: PUSH
69338: LD_INT 11
69340: PUSH
69341: LD_INT 12
69343: PUSH
69344: LD_INT 13
69346: PUSH
69347: LD_INT 16
69349: PUSH
69350: LD_INT 17
69352: PUSH
69353: LD_INT 18
69355: PUSH
69356: LD_INT 19
69358: PUSH
69359: LD_INT 20
69361: PUSH
69362: LD_INT 21
69364: PUSH
69365: EMPTY
69366: LIST
69367: LIST
69368: LIST
69369: LIST
69370: LIST
69371: LIST
69372: LIST
69373: LIST
69374: LIST
69375: LIST
69376: LIST
69377: LIST
69378: LIST
69379: IN
69380: NOT
69381: OR
69382: PUSH
69383: LD_VAR 0 8
69387: PUSH
69388: LD_INT 5
69390: ARRAY
69391: NOT
69392: OR
69393: PUSH
69394: LD_VAR 0 8
69398: PUSH
69399: LD_INT 6
69401: ARRAY
69402: PUSH
69403: LD_INT 1
69405: PUSH
69406: LD_INT 2
69408: PUSH
69409: LD_INT 7
69411: PUSH
69412: LD_INT 9
69414: PUSH
69415: LD_INT 10
69417: PUSH
69418: LD_INT 11
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: LIST
69425: LIST
69426: LIST
69427: LIST
69428: IN
69429: NOT
69430: OR
69431: IFFALSE 69437
// exit ;
69433: POP
69434: POP
69435: GO 69520
// end ;
69437: GO 69108
69439: POP
69440: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
69441: LD_VAR 0 9
69445: PPUSH
69446: LD_VAR 0 3
69450: PPUSH
69451: LD_VAR 0 4
69455: PPUSH
69456: LD_INT 20
69458: PPUSH
69459: CALL 61443 0 4
69463: PUSH
69464: LD_INT 4
69466: ARRAY
69467: IFFALSE 69471
// exit ;
69469: GO 69520
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
69471: LD_VAR 0 2
69475: PUSH
69476: LD_INT 29
69478: PUSH
69479: LD_INT 30
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: IN
69486: PUSH
69487: LD_VAR 0 3
69491: PPUSH
69492: LD_VAR 0 4
69496: PPUSH
69497: LD_VAR 0 9
69501: PPUSH
69502: CALL_OW 440
69506: NOT
69507: AND
69508: IFFALSE 69512
// exit ;
69510: GO 69520
// result := true ;
69512: LD_ADDR_VAR 0 6
69516: PUSH
69517: LD_INT 1
69519: ST_TO_ADDR
// end ;
69520: LD_VAR 0 6
69524: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
69525: LD_INT 0
69527: PPUSH
69528: PPUSH
69529: PPUSH
69530: PPUSH
69531: PPUSH
69532: PPUSH
69533: PPUSH
69534: PPUSH
69535: PPUSH
69536: PPUSH
69537: PPUSH
69538: PPUSH
69539: PPUSH
69540: PPUSH
69541: PPUSH
69542: PPUSH
69543: PPUSH
69544: PPUSH
69545: PPUSH
69546: PPUSH
69547: PPUSH
69548: PPUSH
69549: PPUSH
69550: PPUSH
69551: PPUSH
69552: PPUSH
69553: PPUSH
69554: PPUSH
69555: PPUSH
69556: PPUSH
69557: PPUSH
69558: PPUSH
69559: PPUSH
69560: PPUSH
69561: PPUSH
69562: PPUSH
69563: PPUSH
69564: PPUSH
69565: PPUSH
69566: PPUSH
69567: PPUSH
69568: PPUSH
69569: PPUSH
69570: PPUSH
69571: PPUSH
69572: PPUSH
69573: PPUSH
69574: PPUSH
69575: PPUSH
69576: PPUSH
69577: PPUSH
69578: PPUSH
69579: PPUSH
69580: PPUSH
69581: PPUSH
69582: PPUSH
69583: PPUSH
69584: PPUSH
// result = [ ] ;
69585: LD_ADDR_VAR 0 7
69589: PUSH
69590: EMPTY
69591: ST_TO_ADDR
// temp_list = [ ] ;
69592: LD_ADDR_VAR 0 9
69596: PUSH
69597: EMPTY
69598: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
69599: LD_VAR 0 4
69603: PUSH
69604: LD_INT 0
69606: PUSH
69607: LD_INT 1
69609: PUSH
69610: LD_INT 2
69612: PUSH
69613: LD_INT 3
69615: PUSH
69616: LD_INT 4
69618: PUSH
69619: LD_INT 5
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: LIST
69626: LIST
69627: LIST
69628: LIST
69629: IN
69630: NOT
69631: PUSH
69632: LD_VAR 0 1
69636: PUSH
69637: LD_INT 0
69639: PUSH
69640: LD_INT 1
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: IN
69647: PUSH
69648: LD_VAR 0 5
69652: PUSH
69653: LD_INT 1
69655: PUSH
69656: LD_INT 2
69658: PUSH
69659: LD_INT 3
69661: PUSH
69662: EMPTY
69663: LIST
69664: LIST
69665: LIST
69666: IN
69667: NOT
69668: AND
69669: OR
69670: IFFALSE 69674
// exit ;
69672: GO 88065
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
69674: LD_VAR 0 1
69678: PUSH
69679: LD_INT 6
69681: PUSH
69682: LD_INT 7
69684: PUSH
69685: LD_INT 8
69687: PUSH
69688: LD_INT 13
69690: PUSH
69691: LD_INT 12
69693: PUSH
69694: LD_INT 15
69696: PUSH
69697: LD_INT 11
69699: PUSH
69700: LD_INT 14
69702: PUSH
69703: LD_INT 10
69705: PUSH
69706: EMPTY
69707: LIST
69708: LIST
69709: LIST
69710: LIST
69711: LIST
69712: LIST
69713: LIST
69714: LIST
69715: LIST
69716: IN
69717: IFFALSE 69727
// btype = b_lab ;
69719: LD_ADDR_VAR 0 1
69723: PUSH
69724: LD_INT 6
69726: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
69727: LD_VAR 0 6
69731: PUSH
69732: LD_INT 0
69734: PUSH
69735: LD_INT 1
69737: PUSH
69738: LD_INT 2
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: LIST
69745: IN
69746: NOT
69747: PUSH
69748: LD_VAR 0 1
69752: PUSH
69753: LD_INT 0
69755: PUSH
69756: LD_INT 1
69758: PUSH
69759: LD_INT 2
69761: PUSH
69762: LD_INT 3
69764: PUSH
69765: LD_INT 6
69767: PUSH
69768: LD_INT 36
69770: PUSH
69771: LD_INT 4
69773: PUSH
69774: LD_INT 5
69776: PUSH
69777: LD_INT 31
69779: PUSH
69780: LD_INT 32
69782: PUSH
69783: LD_INT 33
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: LIST
69790: LIST
69791: LIST
69792: LIST
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: IN
69799: NOT
69800: PUSH
69801: LD_VAR 0 6
69805: PUSH
69806: LD_INT 1
69808: EQUAL
69809: AND
69810: OR
69811: PUSH
69812: LD_VAR 0 1
69816: PUSH
69817: LD_INT 2
69819: PUSH
69820: LD_INT 3
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: IN
69827: NOT
69828: PUSH
69829: LD_VAR 0 6
69833: PUSH
69834: LD_INT 2
69836: EQUAL
69837: AND
69838: OR
69839: IFFALSE 69849
// mode = 0 ;
69841: LD_ADDR_VAR 0 6
69845: PUSH
69846: LD_INT 0
69848: ST_TO_ADDR
// case mode of 0 :
69849: LD_VAR 0 6
69853: PUSH
69854: LD_INT 0
69856: DOUBLE
69857: EQUAL
69858: IFTRUE 69862
69860: GO 81315
69862: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69863: LD_ADDR_VAR 0 11
69867: PUSH
69868: LD_INT 0
69870: PUSH
69871: LD_INT 0
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 0
69880: PUSH
69881: LD_INT 1
69883: NEG
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 1
69891: PUSH
69892: LD_INT 0
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 1
69901: PUSH
69902: LD_INT 1
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: LD_INT 1
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 1
69921: NEG
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 1
69932: NEG
69933: PUSH
69934: LD_INT 1
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: LD_INT 1
69944: NEG
69945: PUSH
69946: LD_INT 2
69948: NEG
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 0
69956: PUSH
69957: LD_INT 2
69959: NEG
69960: PUSH
69961: EMPTY
69962: LIST
69963: LIST
69964: PUSH
69965: LD_INT 1
69967: PUSH
69968: LD_INT 1
69970: NEG
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 1
69978: PUSH
69979: LD_INT 2
69981: PUSH
69982: EMPTY
69983: LIST
69984: LIST
69985: PUSH
69986: LD_INT 0
69988: PUSH
69989: LD_INT 2
69991: PUSH
69992: EMPTY
69993: LIST
69994: LIST
69995: PUSH
69996: LD_INT 1
69998: NEG
69999: PUSH
70000: LD_INT 1
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 1
70009: PUSH
70010: LD_INT 3
70012: PUSH
70013: EMPTY
70014: LIST
70015: LIST
70016: PUSH
70017: LD_INT 0
70019: PUSH
70020: LD_INT 3
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 1
70029: NEG
70030: PUSH
70031: LD_INT 2
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70056: LD_ADDR_VAR 0 12
70060: PUSH
70061: LD_INT 0
70063: PUSH
70064: LD_INT 0
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 0
70073: PUSH
70074: LD_INT 1
70076: NEG
70077: PUSH
70078: EMPTY
70079: LIST
70080: LIST
70081: PUSH
70082: LD_INT 1
70084: PUSH
70085: LD_INT 0
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 1
70094: PUSH
70095: LD_INT 1
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 0
70104: PUSH
70105: LD_INT 1
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 1
70114: NEG
70115: PUSH
70116: LD_INT 0
70118: PUSH
70119: EMPTY
70120: LIST
70121: LIST
70122: PUSH
70123: LD_INT 1
70125: NEG
70126: PUSH
70127: LD_INT 1
70129: NEG
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 1
70137: PUSH
70138: LD_INT 1
70140: NEG
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 2
70148: PUSH
70149: LD_INT 0
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 2
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 1
70168: NEG
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 2
70179: NEG
70180: PUSH
70181: LD_INT 0
70183: PUSH
70184: EMPTY
70185: LIST
70186: LIST
70187: PUSH
70188: LD_INT 2
70190: NEG
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 2
70202: NEG
70203: PUSH
70204: LD_INT 1
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 3
70213: NEG
70214: PUSH
70215: LD_INT 0
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 3
70224: NEG
70225: PUSH
70226: LD_INT 1
70228: NEG
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70252: LD_ADDR_VAR 0 13
70256: PUSH
70257: LD_INT 0
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: LD_INT 1
70272: NEG
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 1
70280: PUSH
70281: LD_INT 0
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 1
70290: PUSH
70291: LD_INT 1
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: LD_INT 1
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 1
70310: NEG
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 1
70321: NEG
70322: PUSH
70323: LD_INT 1
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 1
70333: NEG
70334: PUSH
70335: LD_INT 2
70337: NEG
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 2
70345: PUSH
70346: LD_INT 1
70348: PUSH
70349: EMPTY
70350: LIST
70351: LIST
70352: PUSH
70353: LD_INT 2
70355: PUSH
70356: LD_INT 2
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: LD_INT 1
70365: PUSH
70366: LD_INT 2
70368: PUSH
70369: EMPTY
70370: LIST
70371: LIST
70372: PUSH
70373: LD_INT 2
70375: NEG
70376: PUSH
70377: LD_INT 1
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 2
70387: NEG
70388: PUSH
70389: LD_INT 2
70391: NEG
70392: PUSH
70393: EMPTY
70394: LIST
70395: LIST
70396: PUSH
70397: LD_INT 2
70399: NEG
70400: PUSH
70401: LD_INT 3
70403: NEG
70404: PUSH
70405: EMPTY
70406: LIST
70407: LIST
70408: PUSH
70409: LD_INT 3
70411: NEG
70412: PUSH
70413: LD_INT 2
70415: NEG
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 3
70423: NEG
70424: PUSH
70425: LD_INT 3
70427: NEG
70428: PUSH
70429: EMPTY
70430: LIST
70431: LIST
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: LIST
70439: LIST
70440: LIST
70441: LIST
70442: LIST
70443: LIST
70444: LIST
70445: LIST
70446: LIST
70447: LIST
70448: LIST
70449: LIST
70450: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70451: LD_ADDR_VAR 0 14
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: LD_INT 0
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 0
70468: PUSH
70469: LD_INT 1
70471: NEG
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 1
70479: PUSH
70480: LD_INT 0
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 1
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: LD_INT 1
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 1
70509: NEG
70510: PUSH
70511: LD_INT 0
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 1
70520: NEG
70521: PUSH
70522: LD_INT 1
70524: NEG
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 1
70532: NEG
70533: PUSH
70534: LD_INT 2
70536: NEG
70537: PUSH
70538: EMPTY
70539: LIST
70540: LIST
70541: PUSH
70542: LD_INT 0
70544: PUSH
70545: LD_INT 2
70547: NEG
70548: PUSH
70549: EMPTY
70550: LIST
70551: LIST
70552: PUSH
70553: LD_INT 1
70555: PUSH
70556: LD_INT 1
70558: NEG
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 1
70566: PUSH
70567: LD_INT 2
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 0
70576: PUSH
70577: LD_INT 2
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 1
70586: NEG
70587: PUSH
70588: LD_INT 1
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 1
70597: NEG
70598: PUSH
70599: LD_INT 3
70601: NEG
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 0
70609: PUSH
70610: LD_INT 3
70612: NEG
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 1
70620: PUSH
70621: LD_INT 2
70623: NEG
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: EMPTY
70630: LIST
70631: LIST
70632: LIST
70633: LIST
70634: LIST
70635: LIST
70636: LIST
70637: LIST
70638: LIST
70639: LIST
70640: LIST
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70647: LD_ADDR_VAR 0 15
70651: PUSH
70652: LD_INT 0
70654: PUSH
70655: LD_INT 0
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 0
70664: PUSH
70665: LD_INT 1
70667: NEG
70668: PUSH
70669: EMPTY
70670: LIST
70671: LIST
70672: PUSH
70673: LD_INT 1
70675: PUSH
70676: LD_INT 0
70678: PUSH
70679: EMPTY
70680: LIST
70681: LIST
70682: PUSH
70683: LD_INT 1
70685: PUSH
70686: LD_INT 1
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 0
70695: PUSH
70696: LD_INT 1
70698: PUSH
70699: EMPTY
70700: LIST
70701: LIST
70702: PUSH
70703: LD_INT 1
70705: NEG
70706: PUSH
70707: LD_INT 0
70709: PUSH
70710: EMPTY
70711: LIST
70712: LIST
70713: PUSH
70714: LD_INT 1
70716: NEG
70717: PUSH
70718: LD_INT 1
70720: NEG
70721: PUSH
70722: EMPTY
70723: LIST
70724: LIST
70725: PUSH
70726: LD_INT 1
70728: PUSH
70729: LD_INT 1
70731: NEG
70732: PUSH
70733: EMPTY
70734: LIST
70735: LIST
70736: PUSH
70737: LD_INT 2
70739: PUSH
70740: LD_INT 0
70742: PUSH
70743: EMPTY
70744: LIST
70745: LIST
70746: PUSH
70747: LD_INT 2
70749: PUSH
70750: LD_INT 1
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 1
70759: NEG
70760: PUSH
70761: LD_INT 1
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 2
70770: NEG
70771: PUSH
70772: LD_INT 0
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 2
70781: NEG
70782: PUSH
70783: LD_INT 1
70785: NEG
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 2
70793: PUSH
70794: LD_INT 1
70796: NEG
70797: PUSH
70798: EMPTY
70799: LIST
70800: LIST
70801: PUSH
70802: LD_INT 3
70804: PUSH
70805: LD_INT 0
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PUSH
70812: LD_INT 3
70814: PUSH
70815: LD_INT 1
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: EMPTY
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: LIST
70839: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70840: LD_ADDR_VAR 0 16
70844: PUSH
70845: LD_INT 0
70847: PUSH
70848: LD_INT 0
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 0
70857: PUSH
70858: LD_INT 1
70860: NEG
70861: PUSH
70862: EMPTY
70863: LIST
70864: LIST
70865: PUSH
70866: LD_INT 1
70868: PUSH
70869: LD_INT 0
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 1
70878: PUSH
70879: LD_INT 1
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 0
70888: PUSH
70889: LD_INT 1
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 1
70898: NEG
70899: PUSH
70900: LD_INT 0
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 1
70909: NEG
70910: PUSH
70911: LD_INT 1
70913: NEG
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: LD_INT 1
70921: NEG
70922: PUSH
70923: LD_INT 2
70925: NEG
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 2
70933: PUSH
70934: LD_INT 1
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 2
70943: PUSH
70944: LD_INT 2
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: PUSH
70951: LD_INT 1
70953: PUSH
70954: LD_INT 2
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: LD_INT 2
70963: NEG
70964: PUSH
70965: LD_INT 1
70967: NEG
70968: PUSH
70969: EMPTY
70970: LIST
70971: LIST
70972: PUSH
70973: LD_INT 2
70975: NEG
70976: PUSH
70977: LD_INT 2
70979: NEG
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 3
70987: PUSH
70988: LD_INT 2
70990: PUSH
70991: EMPTY
70992: LIST
70993: LIST
70994: PUSH
70995: LD_INT 3
70997: PUSH
70998: LD_INT 3
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 2
71007: PUSH
71008: LD_INT 3
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: EMPTY
71016: LIST
71017: LIST
71018: LIST
71019: LIST
71020: LIST
71021: LIST
71022: LIST
71023: LIST
71024: LIST
71025: LIST
71026: LIST
71027: LIST
71028: LIST
71029: LIST
71030: LIST
71031: LIST
71032: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71033: LD_ADDR_VAR 0 17
71037: PUSH
71038: LD_INT 0
71040: PUSH
71041: LD_INT 0
71043: PUSH
71044: EMPTY
71045: LIST
71046: LIST
71047: PUSH
71048: LD_INT 0
71050: PUSH
71051: LD_INT 1
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 1
71061: PUSH
71062: LD_INT 0
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 1
71071: PUSH
71072: LD_INT 1
71074: PUSH
71075: EMPTY
71076: LIST
71077: LIST
71078: PUSH
71079: LD_INT 0
71081: PUSH
71082: LD_INT 1
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 1
71091: NEG
71092: PUSH
71093: LD_INT 0
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: LD_INT 1
71102: NEG
71103: PUSH
71104: LD_INT 1
71106: NEG
71107: PUSH
71108: EMPTY
71109: LIST
71110: LIST
71111: PUSH
71112: LD_INT 1
71114: NEG
71115: PUSH
71116: LD_INT 2
71118: NEG
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 0
71126: PUSH
71127: LD_INT 2
71129: NEG
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 1
71137: PUSH
71138: LD_INT 1
71140: NEG
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 2
71148: PUSH
71149: LD_INT 0
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 2
71158: PUSH
71159: LD_INT 1
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 2
71168: PUSH
71169: LD_INT 2
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 1
71178: PUSH
71179: LD_INT 2
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 0
71188: PUSH
71189: LD_INT 2
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: PUSH
71196: LD_INT 1
71198: NEG
71199: PUSH
71200: LD_INT 1
71202: PUSH
71203: EMPTY
71204: LIST
71205: LIST
71206: PUSH
71207: LD_INT 2
71209: NEG
71210: PUSH
71211: LD_INT 0
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 2
71220: NEG
71221: PUSH
71222: LD_INT 1
71224: NEG
71225: PUSH
71226: EMPTY
71227: LIST
71228: LIST
71229: PUSH
71230: LD_INT 2
71232: NEG
71233: PUSH
71234: LD_INT 2
71236: NEG
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71263: LD_ADDR_VAR 0 18
71267: PUSH
71268: LD_INT 0
71270: PUSH
71271: LD_INT 0
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 0
71280: PUSH
71281: LD_INT 1
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 1
71291: PUSH
71292: LD_INT 0
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 1
71301: PUSH
71302: LD_INT 1
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 0
71311: PUSH
71312: LD_INT 1
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 1
71321: NEG
71322: PUSH
71323: LD_INT 0
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 1
71332: NEG
71333: PUSH
71334: LD_INT 1
71336: NEG
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 1
71344: NEG
71345: PUSH
71346: LD_INT 2
71348: NEG
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 0
71356: PUSH
71357: LD_INT 2
71359: NEG
71360: PUSH
71361: EMPTY
71362: LIST
71363: LIST
71364: PUSH
71365: LD_INT 1
71367: PUSH
71368: LD_INT 1
71370: NEG
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 2
71378: PUSH
71379: LD_INT 0
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 2
71388: PUSH
71389: LD_INT 1
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 2
71398: PUSH
71399: LD_INT 2
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 1
71408: PUSH
71409: LD_INT 2
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 0
71418: PUSH
71419: LD_INT 2
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 1
71428: NEG
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 2
71439: NEG
71440: PUSH
71441: LD_INT 0
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 2
71450: NEG
71451: PUSH
71452: LD_INT 1
71454: NEG
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 2
71462: NEG
71463: PUSH
71464: LD_INT 2
71466: NEG
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: LIST
71476: LIST
71477: LIST
71478: LIST
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71493: LD_ADDR_VAR 0 19
71497: PUSH
71498: LD_INT 0
71500: PUSH
71501: LD_INT 0
71503: PUSH
71504: EMPTY
71505: LIST
71506: LIST
71507: PUSH
71508: LD_INT 0
71510: PUSH
71511: LD_INT 1
71513: NEG
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 1
71521: PUSH
71522: LD_INT 0
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 1
71531: PUSH
71532: LD_INT 1
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 0
71541: PUSH
71542: LD_INT 1
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 1
71551: NEG
71552: PUSH
71553: LD_INT 0
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 1
71562: NEG
71563: PUSH
71564: LD_INT 1
71566: NEG
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 1
71574: NEG
71575: PUSH
71576: LD_INT 2
71578: NEG
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 0
71586: PUSH
71587: LD_INT 2
71589: NEG
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: LD_INT 1
71597: PUSH
71598: LD_INT 1
71600: NEG
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 2
71608: PUSH
71609: LD_INT 0
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 2
71618: PUSH
71619: LD_INT 1
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 2
71628: PUSH
71629: LD_INT 2
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 1
71638: PUSH
71639: LD_INT 2
71641: PUSH
71642: EMPTY
71643: LIST
71644: LIST
71645: PUSH
71646: LD_INT 0
71648: PUSH
71649: LD_INT 2
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 1
71658: NEG
71659: PUSH
71660: LD_INT 1
71662: PUSH
71663: EMPTY
71664: LIST
71665: LIST
71666: PUSH
71667: LD_INT 2
71669: NEG
71670: PUSH
71671: LD_INT 0
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 2
71680: NEG
71681: PUSH
71682: LD_INT 1
71684: NEG
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 2
71692: NEG
71693: PUSH
71694: LD_INT 2
71696: NEG
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: LIST
71706: LIST
71707: LIST
71708: LIST
71709: LIST
71710: LIST
71711: LIST
71712: LIST
71713: LIST
71714: LIST
71715: LIST
71716: LIST
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71723: LD_ADDR_VAR 0 20
71727: PUSH
71728: LD_INT 0
71730: PUSH
71731: LD_INT 0
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 0
71740: PUSH
71741: LD_INT 1
71743: NEG
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 1
71751: PUSH
71752: LD_INT 0
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 1
71761: PUSH
71762: LD_INT 1
71764: PUSH
71765: EMPTY
71766: LIST
71767: LIST
71768: PUSH
71769: LD_INT 0
71771: PUSH
71772: LD_INT 1
71774: PUSH
71775: EMPTY
71776: LIST
71777: LIST
71778: PUSH
71779: LD_INT 1
71781: NEG
71782: PUSH
71783: LD_INT 0
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: LD_INT 1
71792: NEG
71793: PUSH
71794: LD_INT 1
71796: NEG
71797: PUSH
71798: EMPTY
71799: LIST
71800: LIST
71801: PUSH
71802: LD_INT 1
71804: NEG
71805: PUSH
71806: LD_INT 2
71808: NEG
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: PUSH
71814: LD_INT 0
71816: PUSH
71817: LD_INT 2
71819: NEG
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 1
71827: PUSH
71828: LD_INT 1
71830: NEG
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 2
71838: PUSH
71839: LD_INT 0
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 2
71848: PUSH
71849: LD_INT 1
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: PUSH
71856: LD_INT 2
71858: PUSH
71859: LD_INT 2
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 1
71868: PUSH
71869: LD_INT 2
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 0
71878: PUSH
71879: LD_INT 2
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 1
71888: NEG
71889: PUSH
71890: LD_INT 1
71892: PUSH
71893: EMPTY
71894: LIST
71895: LIST
71896: PUSH
71897: LD_INT 2
71899: NEG
71900: PUSH
71901: LD_INT 0
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 2
71910: NEG
71911: PUSH
71912: LD_INT 1
71914: NEG
71915: PUSH
71916: EMPTY
71917: LIST
71918: LIST
71919: PUSH
71920: LD_INT 2
71922: NEG
71923: PUSH
71924: LD_INT 2
71926: NEG
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: LIST
71936: LIST
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71953: LD_ADDR_VAR 0 21
71957: PUSH
71958: LD_INT 0
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 0
71970: PUSH
71971: LD_INT 1
71973: NEG
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 1
71981: PUSH
71982: LD_INT 0
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 1
71991: PUSH
71992: LD_INT 1
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 0
72001: PUSH
72002: LD_INT 1
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 1
72011: NEG
72012: PUSH
72013: LD_INT 0
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 1
72022: NEG
72023: PUSH
72024: LD_INT 1
72026: NEG
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 1
72034: NEG
72035: PUSH
72036: LD_INT 2
72038: NEG
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 0
72046: PUSH
72047: LD_INT 2
72049: NEG
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 1
72057: PUSH
72058: LD_INT 1
72060: NEG
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: PUSH
72066: LD_INT 2
72068: PUSH
72069: LD_INT 0
72071: PUSH
72072: EMPTY
72073: LIST
72074: LIST
72075: PUSH
72076: LD_INT 2
72078: PUSH
72079: LD_INT 1
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 2
72088: PUSH
72089: LD_INT 2
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 1
72098: PUSH
72099: LD_INT 2
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: LD_INT 2
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 1
72118: NEG
72119: PUSH
72120: LD_INT 1
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 2
72129: NEG
72130: PUSH
72131: LD_INT 0
72133: PUSH
72134: EMPTY
72135: LIST
72136: LIST
72137: PUSH
72138: LD_INT 2
72140: NEG
72141: PUSH
72142: LD_INT 1
72144: NEG
72145: PUSH
72146: EMPTY
72147: LIST
72148: LIST
72149: PUSH
72150: LD_INT 2
72152: NEG
72153: PUSH
72154: LD_INT 2
72156: NEG
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72183: LD_ADDR_VAR 0 22
72187: PUSH
72188: LD_INT 0
72190: PUSH
72191: LD_INT 0
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 0
72200: PUSH
72201: LD_INT 1
72203: NEG
72204: PUSH
72205: EMPTY
72206: LIST
72207: LIST
72208: PUSH
72209: LD_INT 1
72211: PUSH
72212: LD_INT 0
72214: PUSH
72215: EMPTY
72216: LIST
72217: LIST
72218: PUSH
72219: LD_INT 1
72221: PUSH
72222: LD_INT 1
72224: PUSH
72225: EMPTY
72226: LIST
72227: LIST
72228: PUSH
72229: LD_INT 0
72231: PUSH
72232: LD_INT 1
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 1
72241: NEG
72242: PUSH
72243: LD_INT 0
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 1
72252: NEG
72253: PUSH
72254: LD_INT 1
72256: NEG
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 1
72264: NEG
72265: PUSH
72266: LD_INT 2
72268: NEG
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: LD_INT 0
72276: PUSH
72277: LD_INT 2
72279: NEG
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 1
72287: PUSH
72288: LD_INT 1
72290: NEG
72291: PUSH
72292: EMPTY
72293: LIST
72294: LIST
72295: PUSH
72296: LD_INT 2
72298: PUSH
72299: LD_INT 0
72301: PUSH
72302: EMPTY
72303: LIST
72304: LIST
72305: PUSH
72306: LD_INT 2
72308: PUSH
72309: LD_INT 1
72311: PUSH
72312: EMPTY
72313: LIST
72314: LIST
72315: PUSH
72316: LD_INT 2
72318: PUSH
72319: LD_INT 2
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 1
72328: PUSH
72329: LD_INT 2
72331: PUSH
72332: EMPTY
72333: LIST
72334: LIST
72335: PUSH
72336: LD_INT 0
72338: PUSH
72339: LD_INT 2
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: PUSH
72346: LD_INT 1
72348: NEG
72349: PUSH
72350: LD_INT 1
72352: PUSH
72353: EMPTY
72354: LIST
72355: LIST
72356: PUSH
72357: LD_INT 2
72359: NEG
72360: PUSH
72361: LD_INT 0
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 2
72370: NEG
72371: PUSH
72372: LD_INT 1
72374: NEG
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 2
72382: NEG
72383: PUSH
72384: LD_INT 2
72386: NEG
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: LIST
72396: LIST
72397: LIST
72398: LIST
72399: LIST
72400: LIST
72401: LIST
72402: LIST
72403: LIST
72404: LIST
72405: LIST
72406: LIST
72407: LIST
72408: LIST
72409: LIST
72410: LIST
72411: LIST
72412: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72413: LD_ADDR_VAR 0 23
72417: PUSH
72418: LD_INT 0
72420: PUSH
72421: LD_INT 0
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: PUSH
72428: LD_INT 0
72430: PUSH
72431: LD_INT 1
72433: NEG
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 1
72441: PUSH
72442: LD_INT 0
72444: PUSH
72445: EMPTY
72446: LIST
72447: LIST
72448: PUSH
72449: LD_INT 1
72451: PUSH
72452: LD_INT 1
72454: PUSH
72455: EMPTY
72456: LIST
72457: LIST
72458: PUSH
72459: LD_INT 0
72461: PUSH
72462: LD_INT 1
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: LD_INT 1
72471: NEG
72472: PUSH
72473: LD_INT 0
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 1
72482: NEG
72483: PUSH
72484: LD_INT 1
72486: NEG
72487: PUSH
72488: EMPTY
72489: LIST
72490: LIST
72491: PUSH
72492: LD_INT 1
72494: NEG
72495: PUSH
72496: LD_INT 2
72498: NEG
72499: PUSH
72500: EMPTY
72501: LIST
72502: LIST
72503: PUSH
72504: LD_INT 0
72506: PUSH
72507: LD_INT 2
72509: NEG
72510: PUSH
72511: EMPTY
72512: LIST
72513: LIST
72514: PUSH
72515: LD_INT 1
72517: PUSH
72518: LD_INT 1
72520: NEG
72521: PUSH
72522: EMPTY
72523: LIST
72524: LIST
72525: PUSH
72526: LD_INT 2
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: EMPTY
72533: LIST
72534: LIST
72535: PUSH
72536: LD_INT 2
72538: PUSH
72539: LD_INT 1
72541: PUSH
72542: EMPTY
72543: LIST
72544: LIST
72545: PUSH
72546: LD_INT 2
72548: PUSH
72549: LD_INT 2
72551: PUSH
72552: EMPTY
72553: LIST
72554: LIST
72555: PUSH
72556: LD_INT 1
72558: PUSH
72559: LD_INT 2
72561: PUSH
72562: EMPTY
72563: LIST
72564: LIST
72565: PUSH
72566: LD_INT 0
72568: PUSH
72569: LD_INT 2
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 1
72578: NEG
72579: PUSH
72580: LD_INT 1
72582: PUSH
72583: EMPTY
72584: LIST
72585: LIST
72586: PUSH
72587: LD_INT 2
72589: NEG
72590: PUSH
72591: LD_INT 0
72593: PUSH
72594: EMPTY
72595: LIST
72596: LIST
72597: PUSH
72598: LD_INT 2
72600: NEG
72601: PUSH
72602: LD_INT 1
72604: NEG
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 2
72612: NEG
72613: PUSH
72614: LD_INT 2
72616: NEG
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 2
72624: NEG
72625: PUSH
72626: LD_INT 3
72628: NEG
72629: PUSH
72630: EMPTY
72631: LIST
72632: LIST
72633: PUSH
72634: LD_INT 1
72636: NEG
72637: PUSH
72638: LD_INT 3
72640: NEG
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 1
72648: PUSH
72649: LD_INT 2
72651: NEG
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 2
72659: PUSH
72660: LD_INT 1
72662: NEG
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: LIST
72685: LIST
72686: LIST
72687: LIST
72688: LIST
72689: LIST
72690: LIST
72691: LIST
72692: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
72693: LD_ADDR_VAR 0 24
72697: PUSH
72698: LD_INT 0
72700: PUSH
72701: LD_INT 0
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 0
72710: PUSH
72711: LD_INT 1
72713: NEG
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 1
72721: PUSH
72722: LD_INT 0
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 1
72731: PUSH
72732: LD_INT 1
72734: PUSH
72735: EMPTY
72736: LIST
72737: LIST
72738: PUSH
72739: LD_INT 0
72741: PUSH
72742: LD_INT 1
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: PUSH
72749: LD_INT 1
72751: NEG
72752: PUSH
72753: LD_INT 0
72755: PUSH
72756: EMPTY
72757: LIST
72758: LIST
72759: PUSH
72760: LD_INT 1
72762: NEG
72763: PUSH
72764: LD_INT 1
72766: NEG
72767: PUSH
72768: EMPTY
72769: LIST
72770: LIST
72771: PUSH
72772: LD_INT 1
72774: NEG
72775: PUSH
72776: LD_INT 2
72778: NEG
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 0
72786: PUSH
72787: LD_INT 2
72789: NEG
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 1
72797: PUSH
72798: LD_INT 1
72800: NEG
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 2
72808: PUSH
72809: LD_INT 0
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PUSH
72816: LD_INT 2
72818: PUSH
72819: LD_INT 1
72821: PUSH
72822: EMPTY
72823: LIST
72824: LIST
72825: PUSH
72826: LD_INT 2
72828: PUSH
72829: LD_INT 2
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 1
72838: PUSH
72839: LD_INT 2
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 0
72848: PUSH
72849: LD_INT 2
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 1
72858: NEG
72859: PUSH
72860: LD_INT 1
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 2
72869: NEG
72870: PUSH
72871: LD_INT 0
72873: PUSH
72874: EMPTY
72875: LIST
72876: LIST
72877: PUSH
72878: LD_INT 2
72880: NEG
72881: PUSH
72882: LD_INT 1
72884: NEG
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 2
72892: NEG
72893: PUSH
72894: LD_INT 2
72896: NEG
72897: PUSH
72898: EMPTY
72899: LIST
72900: LIST
72901: PUSH
72902: LD_INT 1
72904: PUSH
72905: LD_INT 2
72907: NEG
72908: PUSH
72909: EMPTY
72910: LIST
72911: LIST
72912: PUSH
72913: LD_INT 2
72915: PUSH
72916: LD_INT 1
72918: NEG
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 3
72926: PUSH
72927: LD_INT 1
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 3
72936: PUSH
72937: LD_INT 2
72939: PUSH
72940: EMPTY
72941: LIST
72942: LIST
72943: PUSH
72944: EMPTY
72945: LIST
72946: LIST
72947: LIST
72948: LIST
72949: LIST
72950: LIST
72951: LIST
72952: LIST
72953: LIST
72954: LIST
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: LIST
72968: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
72969: LD_ADDR_VAR 0 25
72973: PUSH
72974: LD_INT 0
72976: PUSH
72977: LD_INT 0
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 0
72986: PUSH
72987: LD_INT 1
72989: NEG
72990: PUSH
72991: EMPTY
72992: LIST
72993: LIST
72994: PUSH
72995: LD_INT 1
72997: PUSH
72998: LD_INT 0
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: LD_INT 1
73007: PUSH
73008: LD_INT 1
73010: PUSH
73011: EMPTY
73012: LIST
73013: LIST
73014: PUSH
73015: LD_INT 0
73017: PUSH
73018: LD_INT 1
73020: PUSH
73021: EMPTY
73022: LIST
73023: LIST
73024: PUSH
73025: LD_INT 1
73027: NEG
73028: PUSH
73029: LD_INT 0
73031: PUSH
73032: EMPTY
73033: LIST
73034: LIST
73035: PUSH
73036: LD_INT 1
73038: NEG
73039: PUSH
73040: LD_INT 1
73042: NEG
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 1
73050: NEG
73051: PUSH
73052: LD_INT 2
73054: NEG
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 0
73062: PUSH
73063: LD_INT 2
73065: NEG
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 1
73073: PUSH
73074: LD_INT 1
73076: NEG
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: PUSH
73082: LD_INT 2
73084: PUSH
73085: LD_INT 0
73087: PUSH
73088: EMPTY
73089: LIST
73090: LIST
73091: PUSH
73092: LD_INT 2
73094: PUSH
73095: LD_INT 1
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 2
73104: PUSH
73105: LD_INT 2
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 1
73114: PUSH
73115: LD_INT 2
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: LD_INT 0
73124: PUSH
73125: LD_INT 2
73127: PUSH
73128: EMPTY
73129: LIST
73130: LIST
73131: PUSH
73132: LD_INT 1
73134: NEG
73135: PUSH
73136: LD_INT 1
73138: PUSH
73139: EMPTY
73140: LIST
73141: LIST
73142: PUSH
73143: LD_INT 2
73145: NEG
73146: PUSH
73147: LD_INT 0
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 2
73156: NEG
73157: PUSH
73158: LD_INT 1
73160: NEG
73161: PUSH
73162: EMPTY
73163: LIST
73164: LIST
73165: PUSH
73166: LD_INT 2
73168: NEG
73169: PUSH
73170: LD_INT 2
73172: NEG
73173: PUSH
73174: EMPTY
73175: LIST
73176: LIST
73177: PUSH
73178: LD_INT 3
73180: PUSH
73181: LD_INT 1
73183: PUSH
73184: EMPTY
73185: LIST
73186: LIST
73187: PUSH
73188: LD_INT 3
73190: PUSH
73191: LD_INT 2
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: PUSH
73198: LD_INT 2
73200: PUSH
73201: LD_INT 3
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 1
73210: PUSH
73211: LD_INT 3
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: LIST
73222: LIST
73223: LIST
73224: LIST
73225: LIST
73226: LIST
73227: LIST
73228: LIST
73229: LIST
73230: LIST
73231: LIST
73232: LIST
73233: LIST
73234: LIST
73235: LIST
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73243: LD_ADDR_VAR 0 26
73247: PUSH
73248: LD_INT 0
73250: PUSH
73251: LD_INT 0
73253: PUSH
73254: EMPTY
73255: LIST
73256: LIST
73257: PUSH
73258: LD_INT 0
73260: PUSH
73261: LD_INT 1
73263: NEG
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 1
73271: PUSH
73272: LD_INT 0
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 1
73281: PUSH
73282: LD_INT 1
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PUSH
73289: LD_INT 0
73291: PUSH
73292: LD_INT 1
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: PUSH
73299: LD_INT 1
73301: NEG
73302: PUSH
73303: LD_INT 0
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: LD_INT 1
73312: NEG
73313: PUSH
73314: LD_INT 1
73316: NEG
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: LD_INT 1
73324: NEG
73325: PUSH
73326: LD_INT 2
73328: NEG
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: PUSH
73334: LD_INT 0
73336: PUSH
73337: LD_INT 2
73339: NEG
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 1
73347: PUSH
73348: LD_INT 1
73350: NEG
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: PUSH
73356: LD_INT 2
73358: PUSH
73359: LD_INT 0
73361: PUSH
73362: EMPTY
73363: LIST
73364: LIST
73365: PUSH
73366: LD_INT 2
73368: PUSH
73369: LD_INT 1
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 2
73378: PUSH
73379: LD_INT 2
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 1
73388: PUSH
73389: LD_INT 2
73391: PUSH
73392: EMPTY
73393: LIST
73394: LIST
73395: PUSH
73396: LD_INT 0
73398: PUSH
73399: LD_INT 2
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 1
73408: NEG
73409: PUSH
73410: LD_INT 1
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 2
73419: NEG
73420: PUSH
73421: LD_INT 0
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 2
73430: NEG
73431: PUSH
73432: LD_INT 1
73434: NEG
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 2
73442: NEG
73443: PUSH
73444: LD_INT 2
73446: NEG
73447: PUSH
73448: EMPTY
73449: LIST
73450: LIST
73451: PUSH
73452: LD_INT 2
73454: PUSH
73455: LD_INT 3
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 1
73464: PUSH
73465: LD_INT 3
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: LD_INT 1
73474: NEG
73475: PUSH
73476: LD_INT 2
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 2
73485: NEG
73486: PUSH
73487: LD_INT 1
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: EMPTY
73495: LIST
73496: LIST
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: LIST
73505: LIST
73506: LIST
73507: LIST
73508: LIST
73509: LIST
73510: LIST
73511: LIST
73512: LIST
73513: LIST
73514: LIST
73515: LIST
73516: LIST
73517: LIST
73518: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73519: LD_ADDR_VAR 0 27
73523: PUSH
73524: LD_INT 0
73526: PUSH
73527: LD_INT 0
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 0
73536: PUSH
73537: LD_INT 1
73539: NEG
73540: PUSH
73541: EMPTY
73542: LIST
73543: LIST
73544: PUSH
73545: LD_INT 1
73547: PUSH
73548: LD_INT 0
73550: PUSH
73551: EMPTY
73552: LIST
73553: LIST
73554: PUSH
73555: LD_INT 1
73557: PUSH
73558: LD_INT 1
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 0
73567: PUSH
73568: LD_INT 1
73570: PUSH
73571: EMPTY
73572: LIST
73573: LIST
73574: PUSH
73575: LD_INT 1
73577: NEG
73578: PUSH
73579: LD_INT 0
73581: PUSH
73582: EMPTY
73583: LIST
73584: LIST
73585: PUSH
73586: LD_INT 1
73588: NEG
73589: PUSH
73590: LD_INT 1
73592: NEG
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 1
73600: NEG
73601: PUSH
73602: LD_INT 2
73604: NEG
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 0
73612: PUSH
73613: LD_INT 2
73615: NEG
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 1
73623: PUSH
73624: LD_INT 1
73626: NEG
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 2
73634: PUSH
73635: LD_INT 0
73637: PUSH
73638: EMPTY
73639: LIST
73640: LIST
73641: PUSH
73642: LD_INT 2
73644: PUSH
73645: LD_INT 1
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 2
73654: PUSH
73655: LD_INT 2
73657: PUSH
73658: EMPTY
73659: LIST
73660: LIST
73661: PUSH
73662: LD_INT 1
73664: PUSH
73665: LD_INT 2
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: LD_INT 0
73674: PUSH
73675: LD_INT 2
73677: PUSH
73678: EMPTY
73679: LIST
73680: LIST
73681: PUSH
73682: LD_INT 1
73684: NEG
73685: PUSH
73686: LD_INT 1
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 2
73695: NEG
73696: PUSH
73697: LD_INT 0
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 2
73706: NEG
73707: PUSH
73708: LD_INT 1
73710: NEG
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 2
73718: NEG
73719: PUSH
73720: LD_INT 2
73722: NEG
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: PUSH
73728: LD_INT 1
73730: NEG
73731: PUSH
73732: LD_INT 2
73734: PUSH
73735: EMPTY
73736: LIST
73737: LIST
73738: PUSH
73739: LD_INT 2
73741: NEG
73742: PUSH
73743: LD_INT 1
73745: PUSH
73746: EMPTY
73747: LIST
73748: LIST
73749: PUSH
73750: LD_INT 3
73752: NEG
73753: PUSH
73754: LD_INT 1
73756: NEG
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: PUSH
73762: LD_INT 3
73764: NEG
73765: PUSH
73766: LD_INT 2
73768: NEG
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73799: LD_ADDR_VAR 0 28
73803: PUSH
73804: LD_INT 0
73806: PUSH
73807: LD_INT 0
73809: PUSH
73810: EMPTY
73811: LIST
73812: LIST
73813: PUSH
73814: LD_INT 0
73816: PUSH
73817: LD_INT 1
73819: NEG
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: PUSH
73825: LD_INT 1
73827: PUSH
73828: LD_INT 0
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PUSH
73835: LD_INT 1
73837: PUSH
73838: LD_INT 1
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 0
73847: PUSH
73848: LD_INT 1
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PUSH
73855: LD_INT 1
73857: NEG
73858: PUSH
73859: LD_INT 0
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 1
73868: NEG
73869: PUSH
73870: LD_INT 1
73872: NEG
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: LD_INT 1
73880: NEG
73881: PUSH
73882: LD_INT 2
73884: NEG
73885: PUSH
73886: EMPTY
73887: LIST
73888: LIST
73889: PUSH
73890: LD_INT 0
73892: PUSH
73893: LD_INT 2
73895: NEG
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: PUSH
73901: LD_INT 1
73903: PUSH
73904: LD_INT 1
73906: NEG
73907: PUSH
73908: EMPTY
73909: LIST
73910: LIST
73911: PUSH
73912: LD_INT 2
73914: PUSH
73915: LD_INT 0
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: LD_INT 2
73924: PUSH
73925: LD_INT 1
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PUSH
73932: LD_INT 2
73934: PUSH
73935: LD_INT 2
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: PUSH
73942: LD_INT 1
73944: PUSH
73945: LD_INT 2
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: PUSH
73952: LD_INT 0
73954: PUSH
73955: LD_INT 2
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: PUSH
73962: LD_INT 1
73964: NEG
73965: PUSH
73966: LD_INT 1
73968: PUSH
73969: EMPTY
73970: LIST
73971: LIST
73972: PUSH
73973: LD_INT 2
73975: NEG
73976: PUSH
73977: LD_INT 0
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: PUSH
73984: LD_INT 2
73986: NEG
73987: PUSH
73988: LD_INT 1
73990: NEG
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 2
73998: NEG
73999: PUSH
74000: LD_INT 2
74002: NEG
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: PUSH
74008: LD_INT 2
74010: NEG
74011: PUSH
74012: LD_INT 3
74014: NEG
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 1
74022: NEG
74023: PUSH
74024: LD_INT 3
74026: NEG
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: PUSH
74032: LD_INT 3
74034: NEG
74035: PUSH
74036: LD_INT 1
74038: NEG
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: LD_INT 3
74046: NEG
74047: PUSH
74048: LD_INT 2
74050: NEG
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: LIST
74060: LIST
74061: LIST
74062: LIST
74063: LIST
74064: LIST
74065: LIST
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: LIST
74079: LIST
74080: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74081: LD_ADDR_VAR 0 29
74085: PUSH
74086: LD_INT 0
74088: PUSH
74089: LD_INT 0
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PUSH
74096: LD_INT 0
74098: PUSH
74099: LD_INT 1
74101: NEG
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 1
74109: PUSH
74110: LD_INT 0
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 1
74119: PUSH
74120: LD_INT 1
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 0
74129: PUSH
74130: LD_INT 1
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: LD_INT 1
74139: NEG
74140: PUSH
74141: LD_INT 0
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: PUSH
74148: LD_INT 1
74150: NEG
74151: PUSH
74152: LD_INT 1
74154: NEG
74155: PUSH
74156: EMPTY
74157: LIST
74158: LIST
74159: PUSH
74160: LD_INT 1
74162: NEG
74163: PUSH
74164: LD_INT 2
74166: NEG
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: PUSH
74172: LD_INT 0
74174: PUSH
74175: LD_INT 2
74177: NEG
74178: PUSH
74179: EMPTY
74180: LIST
74181: LIST
74182: PUSH
74183: LD_INT 1
74185: PUSH
74186: LD_INT 1
74188: NEG
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PUSH
74194: LD_INT 2
74196: PUSH
74197: LD_INT 0
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: LD_INT 2
74206: PUSH
74207: LD_INT 1
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: LD_INT 1
74216: PUSH
74217: LD_INT 2
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: PUSH
74224: LD_INT 0
74226: PUSH
74227: LD_INT 2
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: PUSH
74234: LD_INT 1
74236: NEG
74237: PUSH
74238: LD_INT 1
74240: PUSH
74241: EMPTY
74242: LIST
74243: LIST
74244: PUSH
74245: LD_INT 2
74247: NEG
74248: PUSH
74249: LD_INT 1
74251: NEG
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: PUSH
74257: LD_INT 2
74259: NEG
74260: PUSH
74261: LD_INT 2
74263: NEG
74264: PUSH
74265: EMPTY
74266: LIST
74267: LIST
74268: PUSH
74269: LD_INT 2
74271: NEG
74272: PUSH
74273: LD_INT 3
74275: NEG
74276: PUSH
74277: EMPTY
74278: LIST
74279: LIST
74280: PUSH
74281: LD_INT 2
74283: PUSH
74284: LD_INT 1
74286: NEG
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 3
74294: PUSH
74295: LD_INT 1
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: PUSH
74302: LD_INT 1
74304: PUSH
74305: LD_INT 3
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: PUSH
74312: LD_INT 1
74314: NEG
74315: PUSH
74316: LD_INT 2
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: PUSH
74323: LD_INT 3
74325: NEG
74326: PUSH
74327: LD_INT 2
74329: NEG
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: LIST
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: LIST
74359: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74360: LD_ADDR_VAR 0 30
74364: PUSH
74365: LD_INT 0
74367: PUSH
74368: LD_INT 0
74370: PUSH
74371: EMPTY
74372: LIST
74373: LIST
74374: PUSH
74375: LD_INT 0
74377: PUSH
74378: LD_INT 1
74380: NEG
74381: PUSH
74382: EMPTY
74383: LIST
74384: LIST
74385: PUSH
74386: LD_INT 1
74388: PUSH
74389: LD_INT 0
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: PUSH
74396: LD_INT 1
74398: PUSH
74399: LD_INT 1
74401: PUSH
74402: EMPTY
74403: LIST
74404: LIST
74405: PUSH
74406: LD_INT 0
74408: PUSH
74409: LD_INT 1
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: PUSH
74416: LD_INT 1
74418: NEG
74419: PUSH
74420: LD_INT 0
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: PUSH
74427: LD_INT 1
74429: NEG
74430: PUSH
74431: LD_INT 1
74433: NEG
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: PUSH
74439: LD_INT 1
74441: NEG
74442: PUSH
74443: LD_INT 2
74445: NEG
74446: PUSH
74447: EMPTY
74448: LIST
74449: LIST
74450: PUSH
74451: LD_INT 0
74453: PUSH
74454: LD_INT 2
74456: NEG
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: PUSH
74462: LD_INT 1
74464: PUSH
74465: LD_INT 1
74467: NEG
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: PUSH
74473: LD_INT 2
74475: PUSH
74476: LD_INT 0
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: LD_INT 2
74485: PUSH
74486: LD_INT 1
74488: PUSH
74489: EMPTY
74490: LIST
74491: LIST
74492: PUSH
74493: LD_INT 2
74495: PUSH
74496: LD_INT 2
74498: PUSH
74499: EMPTY
74500: LIST
74501: LIST
74502: PUSH
74503: LD_INT 1
74505: PUSH
74506: LD_INT 2
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: LD_INT 1
74515: NEG
74516: PUSH
74517: LD_INT 1
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PUSH
74524: LD_INT 2
74526: NEG
74527: PUSH
74528: LD_INT 0
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 2
74537: NEG
74538: PUSH
74539: LD_INT 1
74541: NEG
74542: PUSH
74543: EMPTY
74544: LIST
74545: LIST
74546: PUSH
74547: LD_INT 1
74549: NEG
74550: PUSH
74551: LD_INT 3
74553: NEG
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: PUSH
74559: LD_INT 1
74561: PUSH
74562: LD_INT 2
74564: NEG
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: PUSH
74570: LD_INT 3
74572: PUSH
74573: LD_INT 2
74575: PUSH
74576: EMPTY
74577: LIST
74578: LIST
74579: PUSH
74580: LD_INT 2
74582: PUSH
74583: LD_INT 3
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: PUSH
74590: LD_INT 2
74592: NEG
74593: PUSH
74594: LD_INT 1
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: PUSH
74601: LD_INT 3
74603: NEG
74604: PUSH
74605: LD_INT 1
74607: NEG
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: LIST
74617: LIST
74618: LIST
74619: LIST
74620: LIST
74621: LIST
74622: LIST
74623: LIST
74624: LIST
74625: LIST
74626: LIST
74627: LIST
74628: LIST
74629: LIST
74630: LIST
74631: LIST
74632: LIST
74633: LIST
74634: LIST
74635: LIST
74636: LIST
74637: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74638: LD_ADDR_VAR 0 31
74642: PUSH
74643: LD_INT 0
74645: PUSH
74646: LD_INT 0
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PUSH
74653: LD_INT 0
74655: PUSH
74656: LD_INT 1
74658: NEG
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PUSH
74664: LD_INT 1
74666: PUSH
74667: LD_INT 0
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: PUSH
74674: LD_INT 1
74676: PUSH
74677: LD_INT 1
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: PUSH
74684: LD_INT 0
74686: PUSH
74687: LD_INT 1
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 1
74696: NEG
74697: PUSH
74698: LD_INT 0
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: LD_INT 1
74707: NEG
74708: PUSH
74709: LD_INT 1
74711: NEG
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PUSH
74717: LD_INT 1
74719: NEG
74720: PUSH
74721: LD_INT 2
74723: NEG
74724: PUSH
74725: EMPTY
74726: LIST
74727: LIST
74728: PUSH
74729: LD_INT 1
74731: PUSH
74732: LD_INT 1
74734: NEG
74735: PUSH
74736: EMPTY
74737: LIST
74738: LIST
74739: PUSH
74740: LD_INT 2
74742: PUSH
74743: LD_INT 0
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 2
74752: PUSH
74753: LD_INT 1
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 2
74762: PUSH
74763: LD_INT 2
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 1
74772: PUSH
74773: LD_INT 2
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PUSH
74780: LD_INT 0
74782: PUSH
74783: LD_INT 2
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: PUSH
74790: LD_INT 1
74792: NEG
74793: PUSH
74794: LD_INT 1
74796: PUSH
74797: EMPTY
74798: LIST
74799: LIST
74800: PUSH
74801: LD_INT 2
74803: NEG
74804: PUSH
74805: LD_INT 1
74807: NEG
74808: PUSH
74809: EMPTY
74810: LIST
74811: LIST
74812: PUSH
74813: LD_INT 2
74815: NEG
74816: PUSH
74817: LD_INT 2
74819: NEG
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: PUSH
74825: LD_INT 2
74827: NEG
74828: PUSH
74829: LD_INT 3
74831: NEG
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: PUSH
74837: LD_INT 2
74839: PUSH
74840: LD_INT 1
74842: NEG
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 3
74850: PUSH
74851: LD_INT 1
74853: PUSH
74854: EMPTY
74855: LIST
74856: LIST
74857: PUSH
74858: LD_INT 1
74860: PUSH
74861: LD_INT 3
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: PUSH
74868: LD_INT 1
74870: NEG
74871: PUSH
74872: LD_INT 2
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PUSH
74879: LD_INT 3
74881: NEG
74882: PUSH
74883: LD_INT 2
74885: NEG
74886: PUSH
74887: EMPTY
74888: LIST
74889: LIST
74890: PUSH
74891: EMPTY
74892: LIST
74893: LIST
74894: LIST
74895: LIST
74896: LIST
74897: LIST
74898: LIST
74899: LIST
74900: LIST
74901: LIST
74902: LIST
74903: LIST
74904: LIST
74905: LIST
74906: LIST
74907: LIST
74908: LIST
74909: LIST
74910: LIST
74911: LIST
74912: LIST
74913: LIST
74914: LIST
74915: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74916: LD_ADDR_VAR 0 32
74920: PUSH
74921: LD_INT 0
74923: PUSH
74924: LD_INT 0
74926: PUSH
74927: EMPTY
74928: LIST
74929: LIST
74930: PUSH
74931: LD_INT 0
74933: PUSH
74934: LD_INT 1
74936: NEG
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: PUSH
74942: LD_INT 1
74944: PUSH
74945: LD_INT 0
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: PUSH
74952: LD_INT 1
74954: PUSH
74955: LD_INT 1
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PUSH
74962: LD_INT 0
74964: PUSH
74965: LD_INT 1
74967: PUSH
74968: EMPTY
74969: LIST
74970: LIST
74971: PUSH
74972: LD_INT 1
74974: NEG
74975: PUSH
74976: LD_INT 0
74978: PUSH
74979: EMPTY
74980: LIST
74981: LIST
74982: PUSH
74983: LD_INT 1
74985: NEG
74986: PUSH
74987: LD_INT 1
74989: NEG
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 1
74997: NEG
74998: PUSH
74999: LD_INT 2
75001: NEG
75002: PUSH
75003: EMPTY
75004: LIST
75005: LIST
75006: PUSH
75007: LD_INT 0
75009: PUSH
75010: LD_INT 2
75012: NEG
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 1
75020: PUSH
75021: LD_INT 1
75023: NEG
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PUSH
75029: LD_INT 2
75031: PUSH
75032: LD_INT 1
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: PUSH
75039: LD_INT 2
75041: PUSH
75042: LD_INT 2
75044: PUSH
75045: EMPTY
75046: LIST
75047: LIST
75048: PUSH
75049: LD_INT 1
75051: PUSH
75052: LD_INT 2
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: PUSH
75059: LD_INT 0
75061: PUSH
75062: LD_INT 2
75064: PUSH
75065: EMPTY
75066: LIST
75067: LIST
75068: PUSH
75069: LD_INT 1
75071: NEG
75072: PUSH
75073: LD_INT 1
75075: PUSH
75076: EMPTY
75077: LIST
75078: LIST
75079: PUSH
75080: LD_INT 2
75082: NEG
75083: PUSH
75084: LD_INT 0
75086: PUSH
75087: EMPTY
75088: LIST
75089: LIST
75090: PUSH
75091: LD_INT 2
75093: NEG
75094: PUSH
75095: LD_INT 1
75097: NEG
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: PUSH
75103: LD_INT 1
75105: NEG
75106: PUSH
75107: LD_INT 3
75109: NEG
75110: PUSH
75111: EMPTY
75112: LIST
75113: LIST
75114: PUSH
75115: LD_INT 1
75117: PUSH
75118: LD_INT 2
75120: NEG
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: PUSH
75126: LD_INT 3
75128: PUSH
75129: LD_INT 2
75131: PUSH
75132: EMPTY
75133: LIST
75134: LIST
75135: PUSH
75136: LD_INT 2
75138: PUSH
75139: LD_INT 3
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: PUSH
75146: LD_INT 2
75148: NEG
75149: PUSH
75150: LD_INT 1
75152: PUSH
75153: EMPTY
75154: LIST
75155: LIST
75156: PUSH
75157: LD_INT 3
75159: NEG
75160: PUSH
75161: LD_INT 1
75163: NEG
75164: PUSH
75165: EMPTY
75166: LIST
75167: LIST
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: LIST
75184: LIST
75185: LIST
75186: LIST
75187: LIST
75188: LIST
75189: LIST
75190: LIST
75191: LIST
75192: LIST
75193: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
75194: LD_ADDR_VAR 0 33
75198: PUSH
75199: LD_INT 0
75201: PUSH
75202: LD_INT 0
75204: PUSH
75205: EMPTY
75206: LIST
75207: LIST
75208: PUSH
75209: LD_INT 0
75211: PUSH
75212: LD_INT 1
75214: NEG
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: LD_INT 1
75222: PUSH
75223: LD_INT 0
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: LD_INT 1
75232: PUSH
75233: LD_INT 1
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: PUSH
75240: LD_INT 0
75242: PUSH
75243: LD_INT 1
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: PUSH
75250: LD_INT 1
75252: NEG
75253: PUSH
75254: LD_INT 0
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PUSH
75261: LD_INT 1
75263: NEG
75264: PUSH
75265: LD_INT 1
75267: NEG
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: LD_INT 1
75275: NEG
75276: PUSH
75277: LD_INT 2
75279: NEG
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: PUSH
75285: LD_INT 1
75287: PUSH
75288: LD_INT 1
75290: NEG
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: PUSH
75296: LD_INT 2
75298: PUSH
75299: LD_INT 0
75301: PUSH
75302: EMPTY
75303: LIST
75304: LIST
75305: PUSH
75306: LD_INT 2
75308: PUSH
75309: LD_INT 1
75311: PUSH
75312: EMPTY
75313: LIST
75314: LIST
75315: PUSH
75316: LD_INT 1
75318: PUSH
75319: LD_INT 2
75321: PUSH
75322: EMPTY
75323: LIST
75324: LIST
75325: PUSH
75326: LD_INT 0
75328: PUSH
75329: LD_INT 2
75331: PUSH
75332: EMPTY
75333: LIST
75334: LIST
75335: PUSH
75336: LD_INT 1
75338: NEG
75339: PUSH
75340: LD_INT 1
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: PUSH
75347: LD_INT 2
75349: NEG
75350: PUSH
75351: LD_INT 0
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: LD_INT 2
75360: NEG
75361: PUSH
75362: LD_INT 1
75364: NEG
75365: PUSH
75366: EMPTY
75367: LIST
75368: LIST
75369: PUSH
75370: LD_INT 2
75372: NEG
75373: PUSH
75374: LD_INT 2
75376: NEG
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: LD_INT 2
75384: NEG
75385: PUSH
75386: LD_INT 3
75388: NEG
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: PUSH
75394: LD_INT 2
75396: PUSH
75397: LD_INT 1
75399: NEG
75400: PUSH
75401: EMPTY
75402: LIST
75403: LIST
75404: PUSH
75405: LD_INT 3
75407: PUSH
75408: LD_INT 1
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: PUSH
75415: LD_INT 1
75417: PUSH
75418: LD_INT 3
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: PUSH
75425: LD_INT 1
75427: NEG
75428: PUSH
75429: LD_INT 2
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 3
75438: NEG
75439: PUSH
75440: LD_INT 2
75442: NEG
75443: PUSH
75444: EMPTY
75445: LIST
75446: LIST
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: LIST
75471: LIST
75472: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75473: LD_ADDR_VAR 0 34
75477: PUSH
75478: LD_INT 0
75480: PUSH
75481: LD_INT 0
75483: PUSH
75484: EMPTY
75485: LIST
75486: LIST
75487: PUSH
75488: LD_INT 0
75490: PUSH
75491: LD_INT 1
75493: NEG
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: PUSH
75499: LD_INT 1
75501: PUSH
75502: LD_INT 0
75504: PUSH
75505: EMPTY
75506: LIST
75507: LIST
75508: PUSH
75509: LD_INT 1
75511: PUSH
75512: LD_INT 1
75514: PUSH
75515: EMPTY
75516: LIST
75517: LIST
75518: PUSH
75519: LD_INT 0
75521: PUSH
75522: LD_INT 1
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: PUSH
75529: LD_INT 1
75531: NEG
75532: PUSH
75533: LD_INT 0
75535: PUSH
75536: EMPTY
75537: LIST
75538: LIST
75539: PUSH
75540: LD_INT 1
75542: NEG
75543: PUSH
75544: LD_INT 1
75546: NEG
75547: PUSH
75548: EMPTY
75549: LIST
75550: LIST
75551: PUSH
75552: LD_INT 1
75554: NEG
75555: PUSH
75556: LD_INT 2
75558: NEG
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PUSH
75564: LD_INT 0
75566: PUSH
75567: LD_INT 2
75569: NEG
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 1
75577: PUSH
75578: LD_INT 1
75580: NEG
75581: PUSH
75582: EMPTY
75583: LIST
75584: LIST
75585: PUSH
75586: LD_INT 2
75588: PUSH
75589: LD_INT 1
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: PUSH
75596: LD_INT 2
75598: PUSH
75599: LD_INT 2
75601: PUSH
75602: EMPTY
75603: LIST
75604: LIST
75605: PUSH
75606: LD_INT 1
75608: PUSH
75609: LD_INT 2
75611: PUSH
75612: EMPTY
75613: LIST
75614: LIST
75615: PUSH
75616: LD_INT 1
75618: NEG
75619: PUSH
75620: LD_INT 1
75622: PUSH
75623: EMPTY
75624: LIST
75625: LIST
75626: PUSH
75627: LD_INT 2
75629: NEG
75630: PUSH
75631: LD_INT 0
75633: PUSH
75634: EMPTY
75635: LIST
75636: LIST
75637: PUSH
75638: LD_INT 2
75640: NEG
75641: PUSH
75642: LD_INT 1
75644: NEG
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: LD_INT 2
75652: NEG
75653: PUSH
75654: LD_INT 2
75656: NEG
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PUSH
75662: LD_INT 1
75664: NEG
75665: PUSH
75666: LD_INT 3
75668: NEG
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: PUSH
75674: LD_INT 1
75676: PUSH
75677: LD_INT 2
75679: NEG
75680: PUSH
75681: EMPTY
75682: LIST
75683: LIST
75684: PUSH
75685: LD_INT 3
75687: PUSH
75688: LD_INT 2
75690: PUSH
75691: EMPTY
75692: LIST
75693: LIST
75694: PUSH
75695: LD_INT 2
75697: PUSH
75698: LD_INT 3
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: PUSH
75705: LD_INT 2
75707: NEG
75708: PUSH
75709: LD_INT 1
75711: PUSH
75712: EMPTY
75713: LIST
75714: LIST
75715: PUSH
75716: LD_INT 3
75718: NEG
75719: PUSH
75720: LD_INT 1
75722: NEG
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: LIST
75734: LIST
75735: LIST
75736: LIST
75737: LIST
75738: LIST
75739: LIST
75740: LIST
75741: LIST
75742: LIST
75743: LIST
75744: LIST
75745: LIST
75746: LIST
75747: LIST
75748: LIST
75749: LIST
75750: LIST
75751: LIST
75752: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75753: LD_ADDR_VAR 0 35
75757: PUSH
75758: LD_INT 0
75760: PUSH
75761: LD_INT 0
75763: PUSH
75764: EMPTY
75765: LIST
75766: LIST
75767: PUSH
75768: LD_INT 0
75770: PUSH
75771: LD_INT 1
75773: NEG
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: PUSH
75779: LD_INT 1
75781: PUSH
75782: LD_INT 0
75784: PUSH
75785: EMPTY
75786: LIST
75787: LIST
75788: PUSH
75789: LD_INT 1
75791: PUSH
75792: LD_INT 1
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: PUSH
75799: LD_INT 0
75801: PUSH
75802: LD_INT 1
75804: PUSH
75805: EMPTY
75806: LIST
75807: LIST
75808: PUSH
75809: LD_INT 1
75811: NEG
75812: PUSH
75813: LD_INT 0
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: LD_INT 1
75822: NEG
75823: PUSH
75824: LD_INT 1
75826: NEG
75827: PUSH
75828: EMPTY
75829: LIST
75830: LIST
75831: PUSH
75832: LD_INT 2
75834: PUSH
75835: LD_INT 1
75837: PUSH
75838: EMPTY
75839: LIST
75840: LIST
75841: PUSH
75842: LD_INT 2
75844: NEG
75845: PUSH
75846: LD_INT 1
75848: NEG
75849: PUSH
75850: EMPTY
75851: LIST
75852: LIST
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: LIST
75858: LIST
75859: LIST
75860: LIST
75861: LIST
75862: LIST
75863: LIST
75864: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75865: LD_ADDR_VAR 0 36
75869: PUSH
75870: LD_INT 0
75872: PUSH
75873: LD_INT 0
75875: PUSH
75876: EMPTY
75877: LIST
75878: LIST
75879: PUSH
75880: LD_INT 0
75882: PUSH
75883: LD_INT 1
75885: NEG
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PUSH
75891: LD_INT 1
75893: PUSH
75894: LD_INT 0
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: LD_INT 1
75903: PUSH
75904: LD_INT 1
75906: PUSH
75907: EMPTY
75908: LIST
75909: LIST
75910: PUSH
75911: LD_INT 0
75913: PUSH
75914: LD_INT 1
75916: PUSH
75917: EMPTY
75918: LIST
75919: LIST
75920: PUSH
75921: LD_INT 1
75923: NEG
75924: PUSH
75925: LD_INT 0
75927: PUSH
75928: EMPTY
75929: LIST
75930: LIST
75931: PUSH
75932: LD_INT 1
75934: NEG
75935: PUSH
75936: LD_INT 1
75938: NEG
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: PUSH
75944: LD_INT 1
75946: NEG
75947: PUSH
75948: LD_INT 2
75950: NEG
75951: PUSH
75952: EMPTY
75953: LIST
75954: LIST
75955: PUSH
75956: LD_INT 1
75958: PUSH
75959: LD_INT 2
75961: PUSH
75962: EMPTY
75963: LIST
75964: LIST
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75977: LD_ADDR_VAR 0 37
75981: PUSH
75982: LD_INT 0
75984: PUSH
75985: LD_INT 0
75987: PUSH
75988: EMPTY
75989: LIST
75990: LIST
75991: PUSH
75992: LD_INT 0
75994: PUSH
75995: LD_INT 1
75997: NEG
75998: PUSH
75999: EMPTY
76000: LIST
76001: LIST
76002: PUSH
76003: LD_INT 1
76005: PUSH
76006: LD_INT 0
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: PUSH
76013: LD_INT 1
76015: PUSH
76016: LD_INT 1
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: PUSH
76023: LD_INT 0
76025: PUSH
76026: LD_INT 1
76028: PUSH
76029: EMPTY
76030: LIST
76031: LIST
76032: PUSH
76033: LD_INT 1
76035: NEG
76036: PUSH
76037: LD_INT 0
76039: PUSH
76040: EMPTY
76041: LIST
76042: LIST
76043: PUSH
76044: LD_INT 1
76046: NEG
76047: PUSH
76048: LD_INT 1
76050: NEG
76051: PUSH
76052: EMPTY
76053: LIST
76054: LIST
76055: PUSH
76056: LD_INT 1
76058: PUSH
76059: LD_INT 1
76061: NEG
76062: PUSH
76063: EMPTY
76064: LIST
76065: LIST
76066: PUSH
76067: LD_INT 1
76069: NEG
76070: PUSH
76071: LD_INT 1
76073: PUSH
76074: EMPTY
76075: LIST
76076: LIST
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: LIST
76084: LIST
76085: LIST
76086: LIST
76087: LIST
76088: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
76089: LD_ADDR_VAR 0 38
76093: PUSH
76094: LD_INT 0
76096: PUSH
76097: LD_INT 0
76099: PUSH
76100: EMPTY
76101: LIST
76102: LIST
76103: PUSH
76104: LD_INT 0
76106: PUSH
76107: LD_INT 1
76109: NEG
76110: PUSH
76111: EMPTY
76112: LIST
76113: LIST
76114: PUSH
76115: LD_INT 1
76117: PUSH
76118: LD_INT 0
76120: PUSH
76121: EMPTY
76122: LIST
76123: LIST
76124: PUSH
76125: LD_INT 1
76127: PUSH
76128: LD_INT 1
76130: PUSH
76131: EMPTY
76132: LIST
76133: LIST
76134: PUSH
76135: LD_INT 0
76137: PUSH
76138: LD_INT 1
76140: PUSH
76141: EMPTY
76142: LIST
76143: LIST
76144: PUSH
76145: LD_INT 1
76147: NEG
76148: PUSH
76149: LD_INT 0
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: PUSH
76156: LD_INT 1
76158: NEG
76159: PUSH
76160: LD_INT 1
76162: NEG
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 2
76170: PUSH
76171: LD_INT 1
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: PUSH
76178: LD_INT 2
76180: NEG
76181: PUSH
76182: LD_INT 1
76184: NEG
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
76201: LD_ADDR_VAR 0 39
76205: PUSH
76206: LD_INT 0
76208: PUSH
76209: LD_INT 0
76211: PUSH
76212: EMPTY
76213: LIST
76214: LIST
76215: PUSH
76216: LD_INT 0
76218: PUSH
76219: LD_INT 1
76221: NEG
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: PUSH
76227: LD_INT 1
76229: PUSH
76230: LD_INT 0
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: PUSH
76237: LD_INT 1
76239: PUSH
76240: LD_INT 1
76242: PUSH
76243: EMPTY
76244: LIST
76245: LIST
76246: PUSH
76247: LD_INT 0
76249: PUSH
76250: LD_INT 1
76252: PUSH
76253: EMPTY
76254: LIST
76255: LIST
76256: PUSH
76257: LD_INT 1
76259: NEG
76260: PUSH
76261: LD_INT 0
76263: PUSH
76264: EMPTY
76265: LIST
76266: LIST
76267: PUSH
76268: LD_INT 1
76270: NEG
76271: PUSH
76272: LD_INT 1
76274: NEG
76275: PUSH
76276: EMPTY
76277: LIST
76278: LIST
76279: PUSH
76280: LD_INT 1
76282: NEG
76283: PUSH
76284: LD_INT 2
76286: NEG
76287: PUSH
76288: EMPTY
76289: LIST
76290: LIST
76291: PUSH
76292: LD_INT 1
76294: PUSH
76295: LD_INT 2
76297: PUSH
76298: EMPTY
76299: LIST
76300: LIST
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: LIST
76306: LIST
76307: LIST
76308: LIST
76309: LIST
76310: LIST
76311: LIST
76312: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
76313: LD_ADDR_VAR 0 40
76317: PUSH
76318: LD_INT 0
76320: PUSH
76321: LD_INT 0
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: PUSH
76328: LD_INT 0
76330: PUSH
76331: LD_INT 1
76333: NEG
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PUSH
76339: LD_INT 1
76341: PUSH
76342: LD_INT 0
76344: PUSH
76345: EMPTY
76346: LIST
76347: LIST
76348: PUSH
76349: LD_INT 1
76351: PUSH
76352: LD_INT 1
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: LD_INT 0
76361: PUSH
76362: LD_INT 1
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: LD_INT 1
76371: NEG
76372: PUSH
76373: LD_INT 0
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: PUSH
76380: LD_INT 1
76382: NEG
76383: PUSH
76384: LD_INT 1
76386: NEG
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PUSH
76392: LD_INT 1
76394: PUSH
76395: LD_INT 1
76397: NEG
76398: PUSH
76399: EMPTY
76400: LIST
76401: LIST
76402: PUSH
76403: LD_INT 1
76405: NEG
76406: PUSH
76407: LD_INT 1
76409: PUSH
76410: EMPTY
76411: LIST
76412: LIST
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76425: LD_ADDR_VAR 0 41
76429: PUSH
76430: LD_INT 0
76432: PUSH
76433: LD_INT 0
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: PUSH
76440: LD_INT 0
76442: PUSH
76443: LD_INT 1
76445: NEG
76446: PUSH
76447: EMPTY
76448: LIST
76449: LIST
76450: PUSH
76451: LD_INT 1
76453: PUSH
76454: LD_INT 0
76456: PUSH
76457: EMPTY
76458: LIST
76459: LIST
76460: PUSH
76461: LD_INT 1
76463: PUSH
76464: LD_INT 1
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: PUSH
76471: LD_INT 0
76473: PUSH
76474: LD_INT 1
76476: PUSH
76477: EMPTY
76478: LIST
76479: LIST
76480: PUSH
76481: LD_INT 1
76483: NEG
76484: PUSH
76485: LD_INT 0
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PUSH
76492: LD_INT 1
76494: NEG
76495: PUSH
76496: LD_INT 1
76498: NEG
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: LD_INT 1
76506: NEG
76507: PUSH
76508: LD_INT 2
76510: NEG
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: PUSH
76516: LD_INT 1
76518: PUSH
76519: LD_INT 1
76521: NEG
76522: PUSH
76523: EMPTY
76524: LIST
76525: LIST
76526: PUSH
76527: LD_INT 2
76529: PUSH
76530: LD_INT 0
76532: PUSH
76533: EMPTY
76534: LIST
76535: LIST
76536: PUSH
76537: LD_INT 2
76539: PUSH
76540: LD_INT 1
76542: PUSH
76543: EMPTY
76544: LIST
76545: LIST
76546: PUSH
76547: LD_INT 2
76549: PUSH
76550: LD_INT 2
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: PUSH
76557: LD_INT 1
76559: PUSH
76560: LD_INT 2
76562: PUSH
76563: EMPTY
76564: LIST
76565: LIST
76566: PUSH
76567: LD_INT 1
76569: NEG
76570: PUSH
76571: LD_INT 1
76573: PUSH
76574: EMPTY
76575: LIST
76576: LIST
76577: PUSH
76578: LD_INT 2
76580: NEG
76581: PUSH
76582: LD_INT 0
76584: PUSH
76585: EMPTY
76586: LIST
76587: LIST
76588: PUSH
76589: LD_INT 2
76591: NEG
76592: PUSH
76593: LD_INT 1
76595: NEG
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PUSH
76601: LD_INT 2
76603: NEG
76604: PUSH
76605: LD_INT 2
76607: NEG
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 2
76615: NEG
76616: PUSH
76617: LD_INT 3
76619: NEG
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 2
76627: PUSH
76628: LD_INT 1
76630: NEG
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: PUSH
76636: LD_INT 3
76638: PUSH
76639: LD_INT 0
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: LD_INT 3
76648: PUSH
76649: LD_INT 1
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: PUSH
76656: LD_INT 3
76658: PUSH
76659: LD_INT 2
76661: PUSH
76662: EMPTY
76663: LIST
76664: LIST
76665: PUSH
76666: LD_INT 3
76668: PUSH
76669: LD_INT 3
76671: PUSH
76672: EMPTY
76673: LIST
76674: LIST
76675: PUSH
76676: LD_INT 2
76678: PUSH
76679: LD_INT 3
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PUSH
76686: LD_INT 2
76688: NEG
76689: PUSH
76690: LD_INT 1
76692: PUSH
76693: EMPTY
76694: LIST
76695: LIST
76696: PUSH
76697: LD_INT 3
76699: NEG
76700: PUSH
76701: LD_INT 0
76703: PUSH
76704: EMPTY
76705: LIST
76706: LIST
76707: PUSH
76708: LD_INT 3
76710: NEG
76711: PUSH
76712: LD_INT 1
76714: NEG
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: PUSH
76720: LD_INT 3
76722: NEG
76723: PUSH
76724: LD_INT 2
76726: NEG
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: PUSH
76732: LD_INT 3
76734: NEG
76735: PUSH
76736: LD_INT 3
76738: NEG
76739: PUSH
76740: EMPTY
76741: LIST
76742: LIST
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: LIST
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: LIST
76764: LIST
76765: LIST
76766: LIST
76767: LIST
76768: LIST
76769: LIST
76770: LIST
76771: LIST
76772: LIST
76773: LIST
76774: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76775: LD_ADDR_VAR 0 42
76779: PUSH
76780: LD_INT 0
76782: PUSH
76783: LD_INT 0
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: PUSH
76790: LD_INT 0
76792: PUSH
76793: LD_INT 1
76795: NEG
76796: PUSH
76797: EMPTY
76798: LIST
76799: LIST
76800: PUSH
76801: LD_INT 1
76803: PUSH
76804: LD_INT 0
76806: PUSH
76807: EMPTY
76808: LIST
76809: LIST
76810: PUSH
76811: LD_INT 1
76813: PUSH
76814: LD_INT 1
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: PUSH
76821: LD_INT 0
76823: PUSH
76824: LD_INT 1
76826: PUSH
76827: EMPTY
76828: LIST
76829: LIST
76830: PUSH
76831: LD_INT 1
76833: NEG
76834: PUSH
76835: LD_INT 0
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 1
76844: NEG
76845: PUSH
76846: LD_INT 1
76848: NEG
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: LD_INT 1
76856: NEG
76857: PUSH
76858: LD_INT 2
76860: NEG
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: PUSH
76866: LD_INT 0
76868: PUSH
76869: LD_INT 2
76871: NEG
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: LD_INT 1
76879: PUSH
76880: LD_INT 1
76882: NEG
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 2
76890: PUSH
76891: LD_INT 1
76893: PUSH
76894: EMPTY
76895: LIST
76896: LIST
76897: PUSH
76898: LD_INT 2
76900: PUSH
76901: LD_INT 2
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: LD_INT 1
76910: PUSH
76911: LD_INT 2
76913: PUSH
76914: EMPTY
76915: LIST
76916: LIST
76917: PUSH
76918: LD_INT 0
76920: PUSH
76921: LD_INT 2
76923: PUSH
76924: EMPTY
76925: LIST
76926: LIST
76927: PUSH
76928: LD_INT 1
76930: NEG
76931: PUSH
76932: LD_INT 1
76934: PUSH
76935: EMPTY
76936: LIST
76937: LIST
76938: PUSH
76939: LD_INT 2
76941: NEG
76942: PUSH
76943: LD_INT 1
76945: NEG
76946: PUSH
76947: EMPTY
76948: LIST
76949: LIST
76950: PUSH
76951: LD_INT 2
76953: NEG
76954: PUSH
76955: LD_INT 2
76957: NEG
76958: PUSH
76959: EMPTY
76960: LIST
76961: LIST
76962: PUSH
76963: LD_INT 2
76965: NEG
76966: PUSH
76967: LD_INT 3
76969: NEG
76970: PUSH
76971: EMPTY
76972: LIST
76973: LIST
76974: PUSH
76975: LD_INT 1
76977: NEG
76978: PUSH
76979: LD_INT 3
76981: NEG
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: LD_INT 0
76989: PUSH
76990: LD_INT 3
76992: NEG
76993: PUSH
76994: EMPTY
76995: LIST
76996: LIST
76997: PUSH
76998: LD_INT 1
77000: PUSH
77001: LD_INT 2
77003: NEG
77004: PUSH
77005: EMPTY
77006: LIST
77007: LIST
77008: PUSH
77009: LD_INT 3
77011: PUSH
77012: LD_INT 2
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: PUSH
77019: LD_INT 3
77021: PUSH
77022: LD_INT 3
77024: PUSH
77025: EMPTY
77026: LIST
77027: LIST
77028: PUSH
77029: LD_INT 2
77031: PUSH
77032: LD_INT 3
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: PUSH
77039: LD_INT 1
77041: PUSH
77042: LD_INT 3
77044: PUSH
77045: EMPTY
77046: LIST
77047: LIST
77048: PUSH
77049: LD_INT 0
77051: PUSH
77052: LD_INT 3
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: PUSH
77059: LD_INT 1
77061: NEG
77062: PUSH
77063: LD_INT 2
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: PUSH
77070: LD_INT 3
77072: NEG
77073: PUSH
77074: LD_INT 2
77076: NEG
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: PUSH
77082: LD_INT 3
77084: NEG
77085: PUSH
77086: LD_INT 3
77088: NEG
77089: PUSH
77090: EMPTY
77091: LIST
77092: LIST
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: LIST
77106: LIST
77107: LIST
77108: LIST
77109: LIST
77110: LIST
77111: LIST
77112: LIST
77113: LIST
77114: LIST
77115: LIST
77116: LIST
77117: LIST
77118: LIST
77119: LIST
77120: LIST
77121: LIST
77122: LIST
77123: LIST
77124: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77125: LD_ADDR_VAR 0 43
77129: PUSH
77130: LD_INT 0
77132: PUSH
77133: LD_INT 0
77135: PUSH
77136: EMPTY
77137: LIST
77138: LIST
77139: PUSH
77140: LD_INT 0
77142: PUSH
77143: LD_INT 1
77145: NEG
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PUSH
77151: LD_INT 1
77153: PUSH
77154: LD_INT 0
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PUSH
77161: LD_INT 1
77163: PUSH
77164: LD_INT 1
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: PUSH
77171: LD_INT 0
77173: PUSH
77174: LD_INT 1
77176: PUSH
77177: EMPTY
77178: LIST
77179: LIST
77180: PUSH
77181: LD_INT 1
77183: NEG
77184: PUSH
77185: LD_INT 0
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: PUSH
77192: LD_INT 1
77194: NEG
77195: PUSH
77196: LD_INT 1
77198: NEG
77199: PUSH
77200: EMPTY
77201: LIST
77202: LIST
77203: PUSH
77204: LD_INT 1
77206: NEG
77207: PUSH
77208: LD_INT 2
77210: NEG
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PUSH
77216: LD_INT 0
77218: PUSH
77219: LD_INT 2
77221: NEG
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: PUSH
77227: LD_INT 1
77229: PUSH
77230: LD_INT 1
77232: NEG
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: PUSH
77238: LD_INT 2
77240: PUSH
77241: LD_INT 0
77243: PUSH
77244: EMPTY
77245: LIST
77246: LIST
77247: PUSH
77248: LD_INT 2
77250: PUSH
77251: LD_INT 1
77253: PUSH
77254: EMPTY
77255: LIST
77256: LIST
77257: PUSH
77258: LD_INT 1
77260: PUSH
77261: LD_INT 2
77263: PUSH
77264: EMPTY
77265: LIST
77266: LIST
77267: PUSH
77268: LD_INT 0
77270: PUSH
77271: LD_INT 2
77273: PUSH
77274: EMPTY
77275: LIST
77276: LIST
77277: PUSH
77278: LD_INT 1
77280: NEG
77281: PUSH
77282: LD_INT 1
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 2
77291: NEG
77292: PUSH
77293: LD_INT 0
77295: PUSH
77296: EMPTY
77297: LIST
77298: LIST
77299: PUSH
77300: LD_INT 2
77302: NEG
77303: PUSH
77304: LD_INT 1
77306: NEG
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: PUSH
77312: LD_INT 1
77314: NEG
77315: PUSH
77316: LD_INT 3
77318: NEG
77319: PUSH
77320: EMPTY
77321: LIST
77322: LIST
77323: PUSH
77324: LD_INT 0
77326: PUSH
77327: LD_INT 3
77329: NEG
77330: PUSH
77331: EMPTY
77332: LIST
77333: LIST
77334: PUSH
77335: LD_INT 1
77337: PUSH
77338: LD_INT 2
77340: NEG
77341: PUSH
77342: EMPTY
77343: LIST
77344: LIST
77345: PUSH
77346: LD_INT 2
77348: PUSH
77349: LD_INT 1
77351: NEG
77352: PUSH
77353: EMPTY
77354: LIST
77355: LIST
77356: PUSH
77357: LD_INT 3
77359: PUSH
77360: LD_INT 0
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 3
77369: PUSH
77370: LD_INT 1
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: PUSH
77377: LD_INT 1
77379: PUSH
77380: LD_INT 3
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: PUSH
77387: LD_INT 0
77389: PUSH
77390: LD_INT 3
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: LD_INT 1
77399: NEG
77400: PUSH
77401: LD_INT 2
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PUSH
77408: LD_INT 2
77410: NEG
77411: PUSH
77412: LD_INT 1
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PUSH
77419: LD_INT 3
77421: NEG
77422: PUSH
77423: LD_INT 0
77425: PUSH
77426: EMPTY
77427: LIST
77428: LIST
77429: PUSH
77430: LD_INT 3
77432: NEG
77433: PUSH
77434: LD_INT 1
77436: NEG
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: LIST
77446: LIST
77447: LIST
77448: LIST
77449: LIST
77450: LIST
77451: LIST
77452: LIST
77453: LIST
77454: LIST
77455: LIST
77456: LIST
77457: LIST
77458: LIST
77459: LIST
77460: LIST
77461: LIST
77462: LIST
77463: LIST
77464: LIST
77465: LIST
77466: LIST
77467: LIST
77468: LIST
77469: LIST
77470: LIST
77471: LIST
77472: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77473: LD_ADDR_VAR 0 44
77477: PUSH
77478: LD_INT 0
77480: PUSH
77481: LD_INT 0
77483: PUSH
77484: EMPTY
77485: LIST
77486: LIST
77487: PUSH
77488: LD_INT 0
77490: PUSH
77491: LD_INT 1
77493: NEG
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PUSH
77499: LD_INT 1
77501: PUSH
77502: LD_INT 0
77504: PUSH
77505: EMPTY
77506: LIST
77507: LIST
77508: PUSH
77509: LD_INT 1
77511: PUSH
77512: LD_INT 1
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: LD_INT 0
77521: PUSH
77522: LD_INT 1
77524: PUSH
77525: EMPTY
77526: LIST
77527: LIST
77528: PUSH
77529: LD_INT 1
77531: NEG
77532: PUSH
77533: LD_INT 0
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: PUSH
77540: LD_INT 1
77542: NEG
77543: PUSH
77544: LD_INT 1
77546: NEG
77547: PUSH
77548: EMPTY
77549: LIST
77550: LIST
77551: PUSH
77552: LD_INT 1
77554: NEG
77555: PUSH
77556: LD_INT 2
77558: NEG
77559: PUSH
77560: EMPTY
77561: LIST
77562: LIST
77563: PUSH
77564: LD_INT 1
77566: PUSH
77567: LD_INT 1
77569: NEG
77570: PUSH
77571: EMPTY
77572: LIST
77573: LIST
77574: PUSH
77575: LD_INT 2
77577: PUSH
77578: LD_INT 0
77580: PUSH
77581: EMPTY
77582: LIST
77583: LIST
77584: PUSH
77585: LD_INT 2
77587: PUSH
77588: LD_INT 1
77590: PUSH
77591: EMPTY
77592: LIST
77593: LIST
77594: PUSH
77595: LD_INT 2
77597: PUSH
77598: LD_INT 2
77600: PUSH
77601: EMPTY
77602: LIST
77603: LIST
77604: PUSH
77605: LD_INT 1
77607: PUSH
77608: LD_INT 2
77610: PUSH
77611: EMPTY
77612: LIST
77613: LIST
77614: PUSH
77615: LD_INT 1
77617: NEG
77618: PUSH
77619: LD_INT 1
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: PUSH
77626: LD_INT 2
77628: NEG
77629: PUSH
77630: LD_INT 0
77632: PUSH
77633: EMPTY
77634: LIST
77635: LIST
77636: PUSH
77637: LD_INT 2
77639: NEG
77640: PUSH
77641: LD_INT 1
77643: NEG
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: PUSH
77649: LD_INT 2
77651: NEG
77652: PUSH
77653: LD_INT 2
77655: NEG
77656: PUSH
77657: EMPTY
77658: LIST
77659: LIST
77660: PUSH
77661: LD_INT 2
77663: NEG
77664: PUSH
77665: LD_INT 3
77667: NEG
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PUSH
77673: LD_INT 2
77675: PUSH
77676: LD_INT 1
77678: NEG
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PUSH
77684: LD_INT 3
77686: PUSH
77687: LD_INT 0
77689: PUSH
77690: EMPTY
77691: LIST
77692: LIST
77693: PUSH
77694: LD_INT 3
77696: PUSH
77697: LD_INT 1
77699: PUSH
77700: EMPTY
77701: LIST
77702: LIST
77703: PUSH
77704: LD_INT 3
77706: PUSH
77707: LD_INT 2
77709: PUSH
77710: EMPTY
77711: LIST
77712: LIST
77713: PUSH
77714: LD_INT 3
77716: PUSH
77717: LD_INT 3
77719: PUSH
77720: EMPTY
77721: LIST
77722: LIST
77723: PUSH
77724: LD_INT 2
77726: PUSH
77727: LD_INT 3
77729: PUSH
77730: EMPTY
77731: LIST
77732: LIST
77733: PUSH
77734: LD_INT 2
77736: NEG
77737: PUSH
77738: LD_INT 1
77740: PUSH
77741: EMPTY
77742: LIST
77743: LIST
77744: PUSH
77745: LD_INT 3
77747: NEG
77748: PUSH
77749: LD_INT 0
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: PUSH
77756: LD_INT 3
77758: NEG
77759: PUSH
77760: LD_INT 1
77762: NEG
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: PUSH
77768: LD_INT 3
77770: NEG
77771: PUSH
77772: LD_INT 2
77774: NEG
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: PUSH
77780: LD_INT 3
77782: NEG
77783: PUSH
77784: LD_INT 3
77786: NEG
77787: PUSH
77788: EMPTY
77789: LIST
77790: LIST
77791: PUSH
77792: EMPTY
77793: LIST
77794: LIST
77795: LIST
77796: LIST
77797: LIST
77798: LIST
77799: LIST
77800: LIST
77801: LIST
77802: LIST
77803: LIST
77804: LIST
77805: LIST
77806: LIST
77807: LIST
77808: LIST
77809: LIST
77810: LIST
77811: LIST
77812: LIST
77813: LIST
77814: LIST
77815: LIST
77816: LIST
77817: LIST
77818: LIST
77819: LIST
77820: LIST
77821: LIST
77822: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77823: LD_ADDR_VAR 0 45
77827: PUSH
77828: LD_INT 0
77830: PUSH
77831: LD_INT 0
77833: PUSH
77834: EMPTY
77835: LIST
77836: LIST
77837: PUSH
77838: LD_INT 0
77840: PUSH
77841: LD_INT 1
77843: NEG
77844: PUSH
77845: EMPTY
77846: LIST
77847: LIST
77848: PUSH
77849: LD_INT 1
77851: PUSH
77852: LD_INT 0
77854: PUSH
77855: EMPTY
77856: LIST
77857: LIST
77858: PUSH
77859: LD_INT 1
77861: PUSH
77862: LD_INT 1
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: PUSH
77869: LD_INT 0
77871: PUSH
77872: LD_INT 1
77874: PUSH
77875: EMPTY
77876: LIST
77877: LIST
77878: PUSH
77879: LD_INT 1
77881: NEG
77882: PUSH
77883: LD_INT 0
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: PUSH
77890: LD_INT 1
77892: NEG
77893: PUSH
77894: LD_INT 1
77896: NEG
77897: PUSH
77898: EMPTY
77899: LIST
77900: LIST
77901: PUSH
77902: LD_INT 1
77904: NEG
77905: PUSH
77906: LD_INT 2
77908: NEG
77909: PUSH
77910: EMPTY
77911: LIST
77912: LIST
77913: PUSH
77914: LD_INT 0
77916: PUSH
77917: LD_INT 2
77919: NEG
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: PUSH
77925: LD_INT 1
77927: PUSH
77928: LD_INT 1
77930: NEG
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 2
77938: PUSH
77939: LD_INT 1
77941: PUSH
77942: EMPTY
77943: LIST
77944: LIST
77945: PUSH
77946: LD_INT 2
77948: PUSH
77949: LD_INT 2
77951: PUSH
77952: EMPTY
77953: LIST
77954: LIST
77955: PUSH
77956: LD_INT 1
77958: PUSH
77959: LD_INT 2
77961: PUSH
77962: EMPTY
77963: LIST
77964: LIST
77965: PUSH
77966: LD_INT 0
77968: PUSH
77969: LD_INT 2
77971: PUSH
77972: EMPTY
77973: LIST
77974: LIST
77975: PUSH
77976: LD_INT 1
77978: NEG
77979: PUSH
77980: LD_INT 1
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: PUSH
77987: LD_INT 2
77989: NEG
77990: PUSH
77991: LD_INT 1
77993: NEG
77994: PUSH
77995: EMPTY
77996: LIST
77997: LIST
77998: PUSH
77999: LD_INT 2
78001: NEG
78002: PUSH
78003: LD_INT 2
78005: NEG
78006: PUSH
78007: EMPTY
78008: LIST
78009: LIST
78010: PUSH
78011: LD_INT 2
78013: NEG
78014: PUSH
78015: LD_INT 3
78017: NEG
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: PUSH
78023: LD_INT 1
78025: NEG
78026: PUSH
78027: LD_INT 3
78029: NEG
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PUSH
78035: LD_INT 0
78037: PUSH
78038: LD_INT 3
78040: NEG
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: PUSH
78046: LD_INT 1
78048: PUSH
78049: LD_INT 2
78051: NEG
78052: PUSH
78053: EMPTY
78054: LIST
78055: LIST
78056: PUSH
78057: LD_INT 3
78059: PUSH
78060: LD_INT 2
78062: PUSH
78063: EMPTY
78064: LIST
78065: LIST
78066: PUSH
78067: LD_INT 3
78069: PUSH
78070: LD_INT 3
78072: PUSH
78073: EMPTY
78074: LIST
78075: LIST
78076: PUSH
78077: LD_INT 2
78079: PUSH
78080: LD_INT 3
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: PUSH
78087: LD_INT 1
78089: PUSH
78090: LD_INT 3
78092: PUSH
78093: EMPTY
78094: LIST
78095: LIST
78096: PUSH
78097: LD_INT 0
78099: PUSH
78100: LD_INT 3
78102: PUSH
78103: EMPTY
78104: LIST
78105: LIST
78106: PUSH
78107: LD_INT 1
78109: NEG
78110: PUSH
78111: LD_INT 2
78113: PUSH
78114: EMPTY
78115: LIST
78116: LIST
78117: PUSH
78118: LD_INT 3
78120: NEG
78121: PUSH
78122: LD_INT 2
78124: NEG
78125: PUSH
78126: EMPTY
78127: LIST
78128: LIST
78129: PUSH
78130: LD_INT 3
78132: NEG
78133: PUSH
78134: LD_INT 3
78136: NEG
78137: PUSH
78138: EMPTY
78139: LIST
78140: LIST
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: LIST
78146: LIST
78147: LIST
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: LIST
78158: LIST
78159: LIST
78160: LIST
78161: LIST
78162: LIST
78163: LIST
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: LIST
78169: LIST
78170: LIST
78171: LIST
78172: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78173: LD_ADDR_VAR 0 46
78177: PUSH
78178: LD_INT 0
78180: PUSH
78181: LD_INT 0
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: PUSH
78188: LD_INT 0
78190: PUSH
78191: LD_INT 1
78193: NEG
78194: PUSH
78195: EMPTY
78196: LIST
78197: LIST
78198: PUSH
78199: LD_INT 1
78201: PUSH
78202: LD_INT 0
78204: PUSH
78205: EMPTY
78206: LIST
78207: LIST
78208: PUSH
78209: LD_INT 1
78211: PUSH
78212: LD_INT 1
78214: PUSH
78215: EMPTY
78216: LIST
78217: LIST
78218: PUSH
78219: LD_INT 0
78221: PUSH
78222: LD_INT 1
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: PUSH
78229: LD_INT 1
78231: NEG
78232: PUSH
78233: LD_INT 0
78235: PUSH
78236: EMPTY
78237: LIST
78238: LIST
78239: PUSH
78240: LD_INT 1
78242: NEG
78243: PUSH
78244: LD_INT 1
78246: NEG
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: PUSH
78252: LD_INT 1
78254: NEG
78255: PUSH
78256: LD_INT 2
78258: NEG
78259: PUSH
78260: EMPTY
78261: LIST
78262: LIST
78263: PUSH
78264: LD_INT 0
78266: PUSH
78267: LD_INT 2
78269: NEG
78270: PUSH
78271: EMPTY
78272: LIST
78273: LIST
78274: PUSH
78275: LD_INT 1
78277: PUSH
78278: LD_INT 1
78280: NEG
78281: PUSH
78282: EMPTY
78283: LIST
78284: LIST
78285: PUSH
78286: LD_INT 2
78288: PUSH
78289: LD_INT 0
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: PUSH
78296: LD_INT 2
78298: PUSH
78299: LD_INT 1
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: PUSH
78306: LD_INT 1
78308: PUSH
78309: LD_INT 2
78311: PUSH
78312: EMPTY
78313: LIST
78314: LIST
78315: PUSH
78316: LD_INT 0
78318: PUSH
78319: LD_INT 2
78321: PUSH
78322: EMPTY
78323: LIST
78324: LIST
78325: PUSH
78326: LD_INT 1
78328: NEG
78329: PUSH
78330: LD_INT 1
78332: PUSH
78333: EMPTY
78334: LIST
78335: LIST
78336: PUSH
78337: LD_INT 2
78339: NEG
78340: PUSH
78341: LD_INT 0
78343: PUSH
78344: EMPTY
78345: LIST
78346: LIST
78347: PUSH
78348: LD_INT 2
78350: NEG
78351: PUSH
78352: LD_INT 1
78354: NEG
78355: PUSH
78356: EMPTY
78357: LIST
78358: LIST
78359: PUSH
78360: LD_INT 1
78362: NEG
78363: PUSH
78364: LD_INT 3
78366: NEG
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: PUSH
78372: LD_INT 0
78374: PUSH
78375: LD_INT 3
78377: NEG
78378: PUSH
78379: EMPTY
78380: LIST
78381: LIST
78382: PUSH
78383: LD_INT 1
78385: PUSH
78386: LD_INT 2
78388: NEG
78389: PUSH
78390: EMPTY
78391: LIST
78392: LIST
78393: PUSH
78394: LD_INT 2
78396: PUSH
78397: LD_INT 1
78399: NEG
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: PUSH
78405: LD_INT 3
78407: PUSH
78408: LD_INT 0
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: PUSH
78415: LD_INT 3
78417: PUSH
78418: LD_INT 1
78420: PUSH
78421: EMPTY
78422: LIST
78423: LIST
78424: PUSH
78425: LD_INT 1
78427: PUSH
78428: LD_INT 3
78430: PUSH
78431: EMPTY
78432: LIST
78433: LIST
78434: PUSH
78435: LD_INT 0
78437: PUSH
78438: LD_INT 3
78440: PUSH
78441: EMPTY
78442: LIST
78443: LIST
78444: PUSH
78445: LD_INT 1
78447: NEG
78448: PUSH
78449: LD_INT 2
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: PUSH
78456: LD_INT 2
78458: NEG
78459: PUSH
78460: LD_INT 1
78462: PUSH
78463: EMPTY
78464: LIST
78465: LIST
78466: PUSH
78467: LD_INT 3
78469: NEG
78470: PUSH
78471: LD_INT 0
78473: PUSH
78474: EMPTY
78475: LIST
78476: LIST
78477: PUSH
78478: LD_INT 3
78480: NEG
78481: PUSH
78482: LD_INT 1
78484: NEG
78485: PUSH
78486: EMPTY
78487: LIST
78488: LIST
78489: PUSH
78490: EMPTY
78491: LIST
78492: LIST
78493: LIST
78494: LIST
78495: LIST
78496: LIST
78497: LIST
78498: LIST
78499: LIST
78500: LIST
78501: LIST
78502: LIST
78503: LIST
78504: LIST
78505: LIST
78506: LIST
78507: LIST
78508: LIST
78509: LIST
78510: LIST
78511: LIST
78512: LIST
78513: LIST
78514: LIST
78515: LIST
78516: LIST
78517: LIST
78518: LIST
78519: LIST
78520: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78521: LD_ADDR_VAR 0 47
78525: PUSH
78526: LD_INT 0
78528: PUSH
78529: LD_INT 0
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: PUSH
78536: LD_INT 0
78538: PUSH
78539: LD_INT 1
78541: NEG
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: PUSH
78547: LD_INT 1
78549: PUSH
78550: LD_INT 0
78552: PUSH
78553: EMPTY
78554: LIST
78555: LIST
78556: PUSH
78557: LD_INT 1
78559: PUSH
78560: LD_INT 1
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: PUSH
78567: LD_INT 0
78569: PUSH
78570: LD_INT 1
78572: PUSH
78573: EMPTY
78574: LIST
78575: LIST
78576: PUSH
78577: LD_INT 1
78579: NEG
78580: PUSH
78581: LD_INT 0
78583: PUSH
78584: EMPTY
78585: LIST
78586: LIST
78587: PUSH
78588: LD_INT 1
78590: NEG
78591: PUSH
78592: LD_INT 1
78594: NEG
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: PUSH
78600: LD_INT 1
78602: NEG
78603: PUSH
78604: LD_INT 2
78606: NEG
78607: PUSH
78608: EMPTY
78609: LIST
78610: LIST
78611: PUSH
78612: LD_INT 0
78614: PUSH
78615: LD_INT 2
78617: NEG
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: PUSH
78623: LD_INT 1
78625: PUSH
78626: LD_INT 1
78628: NEG
78629: PUSH
78630: EMPTY
78631: LIST
78632: LIST
78633: PUSH
78634: LD_INT 2
78636: NEG
78637: PUSH
78638: LD_INT 1
78640: NEG
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: PUSH
78646: LD_INT 2
78648: NEG
78649: PUSH
78650: LD_INT 2
78652: NEG
78653: PUSH
78654: EMPTY
78655: LIST
78656: LIST
78657: PUSH
78658: EMPTY
78659: LIST
78660: LIST
78661: LIST
78662: LIST
78663: LIST
78664: LIST
78665: LIST
78666: LIST
78667: LIST
78668: LIST
78669: LIST
78670: LIST
78671: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78672: LD_ADDR_VAR 0 48
78676: PUSH
78677: LD_INT 0
78679: PUSH
78680: LD_INT 0
78682: PUSH
78683: EMPTY
78684: LIST
78685: LIST
78686: PUSH
78687: LD_INT 0
78689: PUSH
78690: LD_INT 1
78692: NEG
78693: PUSH
78694: EMPTY
78695: LIST
78696: LIST
78697: PUSH
78698: LD_INT 1
78700: PUSH
78701: LD_INT 0
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: PUSH
78708: LD_INT 1
78710: PUSH
78711: LD_INT 1
78713: PUSH
78714: EMPTY
78715: LIST
78716: LIST
78717: PUSH
78718: LD_INT 0
78720: PUSH
78721: LD_INT 1
78723: PUSH
78724: EMPTY
78725: LIST
78726: LIST
78727: PUSH
78728: LD_INT 1
78730: NEG
78731: PUSH
78732: LD_INT 0
78734: PUSH
78735: EMPTY
78736: LIST
78737: LIST
78738: PUSH
78739: LD_INT 1
78741: NEG
78742: PUSH
78743: LD_INT 1
78745: NEG
78746: PUSH
78747: EMPTY
78748: LIST
78749: LIST
78750: PUSH
78751: LD_INT 1
78753: NEG
78754: PUSH
78755: LD_INT 2
78757: NEG
78758: PUSH
78759: EMPTY
78760: LIST
78761: LIST
78762: PUSH
78763: LD_INT 0
78765: PUSH
78766: LD_INT 2
78768: NEG
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: PUSH
78774: LD_INT 1
78776: PUSH
78777: LD_INT 1
78779: NEG
78780: PUSH
78781: EMPTY
78782: LIST
78783: LIST
78784: PUSH
78785: LD_INT 2
78787: PUSH
78788: LD_INT 0
78790: PUSH
78791: EMPTY
78792: LIST
78793: LIST
78794: PUSH
78795: LD_INT 2
78797: PUSH
78798: LD_INT 1
78800: PUSH
78801: EMPTY
78802: LIST
78803: LIST
78804: PUSH
78805: EMPTY
78806: LIST
78807: LIST
78808: LIST
78809: LIST
78810: LIST
78811: LIST
78812: LIST
78813: LIST
78814: LIST
78815: LIST
78816: LIST
78817: LIST
78818: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78819: LD_ADDR_VAR 0 49
78823: PUSH
78824: LD_INT 0
78826: PUSH
78827: LD_INT 0
78829: PUSH
78830: EMPTY
78831: LIST
78832: LIST
78833: PUSH
78834: LD_INT 0
78836: PUSH
78837: LD_INT 1
78839: NEG
78840: PUSH
78841: EMPTY
78842: LIST
78843: LIST
78844: PUSH
78845: LD_INT 1
78847: PUSH
78848: LD_INT 0
78850: PUSH
78851: EMPTY
78852: LIST
78853: LIST
78854: PUSH
78855: LD_INT 1
78857: PUSH
78858: LD_INT 1
78860: PUSH
78861: EMPTY
78862: LIST
78863: LIST
78864: PUSH
78865: LD_INT 0
78867: PUSH
78868: LD_INT 1
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: PUSH
78875: LD_INT 1
78877: NEG
78878: PUSH
78879: LD_INT 0
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: PUSH
78886: LD_INT 1
78888: NEG
78889: PUSH
78890: LD_INT 1
78892: NEG
78893: PUSH
78894: EMPTY
78895: LIST
78896: LIST
78897: PUSH
78898: LD_INT 1
78900: PUSH
78901: LD_INT 1
78903: NEG
78904: PUSH
78905: EMPTY
78906: LIST
78907: LIST
78908: PUSH
78909: LD_INT 2
78911: PUSH
78912: LD_INT 0
78914: PUSH
78915: EMPTY
78916: LIST
78917: LIST
78918: PUSH
78919: LD_INT 2
78921: PUSH
78922: LD_INT 1
78924: PUSH
78925: EMPTY
78926: LIST
78927: LIST
78928: PUSH
78929: LD_INT 2
78931: PUSH
78932: LD_INT 2
78934: PUSH
78935: EMPTY
78936: LIST
78937: LIST
78938: PUSH
78939: LD_INT 1
78941: PUSH
78942: LD_INT 2
78944: PUSH
78945: EMPTY
78946: LIST
78947: LIST
78948: PUSH
78949: EMPTY
78950: LIST
78951: LIST
78952: LIST
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: LIST
78958: LIST
78959: LIST
78960: LIST
78961: LIST
78962: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78963: LD_ADDR_VAR 0 50
78967: PUSH
78968: LD_INT 0
78970: PUSH
78971: LD_INT 0
78973: PUSH
78974: EMPTY
78975: LIST
78976: LIST
78977: PUSH
78978: LD_INT 0
78980: PUSH
78981: LD_INT 1
78983: NEG
78984: PUSH
78985: EMPTY
78986: LIST
78987: LIST
78988: PUSH
78989: LD_INT 1
78991: PUSH
78992: LD_INT 0
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: PUSH
78999: LD_INT 1
79001: PUSH
79002: LD_INT 1
79004: PUSH
79005: EMPTY
79006: LIST
79007: LIST
79008: PUSH
79009: LD_INT 0
79011: PUSH
79012: LD_INT 1
79014: PUSH
79015: EMPTY
79016: LIST
79017: LIST
79018: PUSH
79019: LD_INT 1
79021: NEG
79022: PUSH
79023: LD_INT 0
79025: PUSH
79026: EMPTY
79027: LIST
79028: LIST
79029: PUSH
79030: LD_INT 1
79032: NEG
79033: PUSH
79034: LD_INT 1
79036: NEG
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PUSH
79042: LD_INT 2
79044: PUSH
79045: LD_INT 1
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: PUSH
79052: LD_INT 2
79054: PUSH
79055: LD_INT 2
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PUSH
79062: LD_INT 1
79064: PUSH
79065: LD_INT 2
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: PUSH
79072: LD_INT 0
79074: PUSH
79075: LD_INT 2
79077: PUSH
79078: EMPTY
79079: LIST
79080: LIST
79081: PUSH
79082: LD_INT 1
79084: NEG
79085: PUSH
79086: LD_INT 1
79088: PUSH
79089: EMPTY
79090: LIST
79091: LIST
79092: PUSH
79093: EMPTY
79094: LIST
79095: LIST
79096: LIST
79097: LIST
79098: LIST
79099: LIST
79100: LIST
79101: LIST
79102: LIST
79103: LIST
79104: LIST
79105: LIST
79106: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
79107: LD_ADDR_VAR 0 51
79111: PUSH
79112: LD_INT 0
79114: PUSH
79115: LD_INT 0
79117: PUSH
79118: EMPTY
79119: LIST
79120: LIST
79121: PUSH
79122: LD_INT 0
79124: PUSH
79125: LD_INT 1
79127: NEG
79128: PUSH
79129: EMPTY
79130: LIST
79131: LIST
79132: PUSH
79133: LD_INT 1
79135: PUSH
79136: LD_INT 0
79138: PUSH
79139: EMPTY
79140: LIST
79141: LIST
79142: PUSH
79143: LD_INT 1
79145: PUSH
79146: LD_INT 1
79148: PUSH
79149: EMPTY
79150: LIST
79151: LIST
79152: PUSH
79153: LD_INT 0
79155: PUSH
79156: LD_INT 1
79158: PUSH
79159: EMPTY
79160: LIST
79161: LIST
79162: PUSH
79163: LD_INT 1
79165: NEG
79166: PUSH
79167: LD_INT 0
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: PUSH
79174: LD_INT 1
79176: NEG
79177: PUSH
79178: LD_INT 1
79180: NEG
79181: PUSH
79182: EMPTY
79183: LIST
79184: LIST
79185: PUSH
79186: LD_INT 1
79188: PUSH
79189: LD_INT 2
79191: PUSH
79192: EMPTY
79193: LIST
79194: LIST
79195: PUSH
79196: LD_INT 0
79198: PUSH
79199: LD_INT 2
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: PUSH
79206: LD_INT 1
79208: NEG
79209: PUSH
79210: LD_INT 1
79212: PUSH
79213: EMPTY
79214: LIST
79215: LIST
79216: PUSH
79217: LD_INT 2
79219: NEG
79220: PUSH
79221: LD_INT 0
79223: PUSH
79224: EMPTY
79225: LIST
79226: LIST
79227: PUSH
79228: LD_INT 2
79230: NEG
79231: PUSH
79232: LD_INT 1
79234: NEG
79235: PUSH
79236: EMPTY
79237: LIST
79238: LIST
79239: PUSH
79240: EMPTY
79241: LIST
79242: LIST
79243: LIST
79244: LIST
79245: LIST
79246: LIST
79247: LIST
79248: LIST
79249: LIST
79250: LIST
79251: LIST
79252: LIST
79253: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79254: LD_ADDR_VAR 0 52
79258: PUSH
79259: LD_INT 0
79261: PUSH
79262: LD_INT 0
79264: PUSH
79265: EMPTY
79266: LIST
79267: LIST
79268: PUSH
79269: LD_INT 0
79271: PUSH
79272: LD_INT 1
79274: NEG
79275: PUSH
79276: EMPTY
79277: LIST
79278: LIST
79279: PUSH
79280: LD_INT 1
79282: PUSH
79283: LD_INT 0
79285: PUSH
79286: EMPTY
79287: LIST
79288: LIST
79289: PUSH
79290: LD_INT 1
79292: PUSH
79293: LD_INT 1
79295: PUSH
79296: EMPTY
79297: LIST
79298: LIST
79299: PUSH
79300: LD_INT 0
79302: PUSH
79303: LD_INT 1
79305: PUSH
79306: EMPTY
79307: LIST
79308: LIST
79309: PUSH
79310: LD_INT 1
79312: NEG
79313: PUSH
79314: LD_INT 0
79316: PUSH
79317: EMPTY
79318: LIST
79319: LIST
79320: PUSH
79321: LD_INT 1
79323: NEG
79324: PUSH
79325: LD_INT 1
79327: NEG
79328: PUSH
79329: EMPTY
79330: LIST
79331: LIST
79332: PUSH
79333: LD_INT 1
79335: NEG
79336: PUSH
79337: LD_INT 2
79339: NEG
79340: PUSH
79341: EMPTY
79342: LIST
79343: LIST
79344: PUSH
79345: LD_INT 1
79347: NEG
79348: PUSH
79349: LD_INT 1
79351: PUSH
79352: EMPTY
79353: LIST
79354: LIST
79355: PUSH
79356: LD_INT 2
79358: NEG
79359: PUSH
79360: LD_INT 0
79362: PUSH
79363: EMPTY
79364: LIST
79365: LIST
79366: PUSH
79367: LD_INT 2
79369: NEG
79370: PUSH
79371: LD_INT 1
79373: NEG
79374: PUSH
79375: EMPTY
79376: LIST
79377: LIST
79378: PUSH
79379: LD_INT 2
79381: NEG
79382: PUSH
79383: LD_INT 2
79385: NEG
79386: PUSH
79387: EMPTY
79388: LIST
79389: LIST
79390: PUSH
79391: EMPTY
79392: LIST
79393: LIST
79394: LIST
79395: LIST
79396: LIST
79397: LIST
79398: LIST
79399: LIST
79400: LIST
79401: LIST
79402: LIST
79403: LIST
79404: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79405: LD_ADDR_VAR 0 53
79409: PUSH
79410: LD_INT 0
79412: PUSH
79413: LD_INT 0
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: PUSH
79420: LD_INT 0
79422: PUSH
79423: LD_INT 1
79425: NEG
79426: PUSH
79427: EMPTY
79428: LIST
79429: LIST
79430: PUSH
79431: LD_INT 1
79433: PUSH
79434: LD_INT 0
79436: PUSH
79437: EMPTY
79438: LIST
79439: LIST
79440: PUSH
79441: LD_INT 1
79443: PUSH
79444: LD_INT 1
79446: PUSH
79447: EMPTY
79448: LIST
79449: LIST
79450: PUSH
79451: LD_INT 0
79453: PUSH
79454: LD_INT 1
79456: PUSH
79457: EMPTY
79458: LIST
79459: LIST
79460: PUSH
79461: LD_INT 1
79463: NEG
79464: PUSH
79465: LD_INT 0
79467: PUSH
79468: EMPTY
79469: LIST
79470: LIST
79471: PUSH
79472: LD_INT 1
79474: NEG
79475: PUSH
79476: LD_INT 1
79478: NEG
79479: PUSH
79480: EMPTY
79481: LIST
79482: LIST
79483: PUSH
79484: LD_INT 1
79486: NEG
79487: PUSH
79488: LD_INT 2
79490: NEG
79491: PUSH
79492: EMPTY
79493: LIST
79494: LIST
79495: PUSH
79496: LD_INT 0
79498: PUSH
79499: LD_INT 2
79501: NEG
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: PUSH
79507: LD_INT 1
79509: PUSH
79510: LD_INT 1
79512: NEG
79513: PUSH
79514: EMPTY
79515: LIST
79516: LIST
79517: PUSH
79518: LD_INT 2
79520: PUSH
79521: LD_INT 0
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: PUSH
79528: LD_INT 2
79530: PUSH
79531: LD_INT 1
79533: PUSH
79534: EMPTY
79535: LIST
79536: LIST
79537: PUSH
79538: LD_INT 2
79540: PUSH
79541: LD_INT 2
79543: PUSH
79544: EMPTY
79545: LIST
79546: LIST
79547: PUSH
79548: LD_INT 1
79550: PUSH
79551: LD_INT 2
79553: PUSH
79554: EMPTY
79555: LIST
79556: LIST
79557: PUSH
79558: LD_INT 0
79560: PUSH
79561: LD_INT 2
79563: PUSH
79564: EMPTY
79565: LIST
79566: LIST
79567: PUSH
79568: LD_INT 1
79570: NEG
79571: PUSH
79572: LD_INT 1
79574: PUSH
79575: EMPTY
79576: LIST
79577: LIST
79578: PUSH
79579: LD_INT 2
79581: NEG
79582: PUSH
79583: LD_INT 0
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: PUSH
79590: LD_INT 2
79592: NEG
79593: PUSH
79594: LD_INT 1
79596: NEG
79597: PUSH
79598: EMPTY
79599: LIST
79600: LIST
79601: PUSH
79602: LD_INT 2
79604: NEG
79605: PUSH
79606: LD_INT 2
79608: NEG
79609: PUSH
79610: EMPTY
79611: LIST
79612: LIST
79613: PUSH
79614: EMPTY
79615: LIST
79616: LIST
79617: LIST
79618: LIST
79619: LIST
79620: LIST
79621: LIST
79622: LIST
79623: LIST
79624: LIST
79625: LIST
79626: LIST
79627: LIST
79628: LIST
79629: LIST
79630: LIST
79631: LIST
79632: LIST
79633: LIST
79634: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79635: LD_ADDR_VAR 0 54
79639: PUSH
79640: LD_INT 0
79642: PUSH
79643: LD_INT 0
79645: PUSH
79646: EMPTY
79647: LIST
79648: LIST
79649: PUSH
79650: LD_INT 0
79652: PUSH
79653: LD_INT 1
79655: NEG
79656: PUSH
79657: EMPTY
79658: LIST
79659: LIST
79660: PUSH
79661: LD_INT 1
79663: PUSH
79664: LD_INT 0
79666: PUSH
79667: EMPTY
79668: LIST
79669: LIST
79670: PUSH
79671: LD_INT 1
79673: PUSH
79674: LD_INT 1
79676: PUSH
79677: EMPTY
79678: LIST
79679: LIST
79680: PUSH
79681: LD_INT 0
79683: PUSH
79684: LD_INT 1
79686: PUSH
79687: EMPTY
79688: LIST
79689: LIST
79690: PUSH
79691: LD_INT 1
79693: NEG
79694: PUSH
79695: LD_INT 0
79697: PUSH
79698: EMPTY
79699: LIST
79700: LIST
79701: PUSH
79702: LD_INT 1
79704: NEG
79705: PUSH
79706: LD_INT 1
79708: NEG
79709: PUSH
79710: EMPTY
79711: LIST
79712: LIST
79713: PUSH
79714: LD_INT 1
79716: NEG
79717: PUSH
79718: LD_INT 2
79720: NEG
79721: PUSH
79722: EMPTY
79723: LIST
79724: LIST
79725: PUSH
79726: LD_INT 0
79728: PUSH
79729: LD_INT 2
79731: NEG
79732: PUSH
79733: EMPTY
79734: LIST
79735: LIST
79736: PUSH
79737: LD_INT 1
79739: PUSH
79740: LD_INT 1
79742: NEG
79743: PUSH
79744: EMPTY
79745: LIST
79746: LIST
79747: PUSH
79748: LD_INT 2
79750: PUSH
79751: LD_INT 0
79753: PUSH
79754: EMPTY
79755: LIST
79756: LIST
79757: PUSH
79758: LD_INT 2
79760: PUSH
79761: LD_INT 1
79763: PUSH
79764: EMPTY
79765: LIST
79766: LIST
79767: PUSH
79768: LD_INT 2
79770: PUSH
79771: LD_INT 2
79773: PUSH
79774: EMPTY
79775: LIST
79776: LIST
79777: PUSH
79778: LD_INT 1
79780: PUSH
79781: LD_INT 2
79783: PUSH
79784: EMPTY
79785: LIST
79786: LIST
79787: PUSH
79788: LD_INT 0
79790: PUSH
79791: LD_INT 2
79793: PUSH
79794: EMPTY
79795: LIST
79796: LIST
79797: PUSH
79798: LD_INT 1
79800: NEG
79801: PUSH
79802: LD_INT 1
79804: PUSH
79805: EMPTY
79806: LIST
79807: LIST
79808: PUSH
79809: LD_INT 2
79811: NEG
79812: PUSH
79813: LD_INT 0
79815: PUSH
79816: EMPTY
79817: LIST
79818: LIST
79819: PUSH
79820: LD_INT 2
79822: NEG
79823: PUSH
79824: LD_INT 1
79826: NEG
79827: PUSH
79828: EMPTY
79829: LIST
79830: LIST
79831: PUSH
79832: LD_INT 2
79834: NEG
79835: PUSH
79836: LD_INT 2
79838: NEG
79839: PUSH
79840: EMPTY
79841: LIST
79842: LIST
79843: PUSH
79844: EMPTY
79845: LIST
79846: LIST
79847: LIST
79848: LIST
79849: LIST
79850: LIST
79851: LIST
79852: LIST
79853: LIST
79854: LIST
79855: LIST
79856: LIST
79857: LIST
79858: LIST
79859: LIST
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79865: LD_ADDR_VAR 0 55
79869: PUSH
79870: LD_INT 0
79872: PUSH
79873: LD_INT 0
79875: PUSH
79876: EMPTY
79877: LIST
79878: LIST
79879: PUSH
79880: LD_INT 0
79882: PUSH
79883: LD_INT 1
79885: NEG
79886: PUSH
79887: EMPTY
79888: LIST
79889: LIST
79890: PUSH
79891: LD_INT 1
79893: PUSH
79894: LD_INT 0
79896: PUSH
79897: EMPTY
79898: LIST
79899: LIST
79900: PUSH
79901: LD_INT 1
79903: PUSH
79904: LD_INT 1
79906: PUSH
79907: EMPTY
79908: LIST
79909: LIST
79910: PUSH
79911: LD_INT 0
79913: PUSH
79914: LD_INT 1
79916: PUSH
79917: EMPTY
79918: LIST
79919: LIST
79920: PUSH
79921: LD_INT 1
79923: NEG
79924: PUSH
79925: LD_INT 0
79927: PUSH
79928: EMPTY
79929: LIST
79930: LIST
79931: PUSH
79932: LD_INT 1
79934: NEG
79935: PUSH
79936: LD_INT 1
79938: NEG
79939: PUSH
79940: EMPTY
79941: LIST
79942: LIST
79943: PUSH
79944: LD_INT 1
79946: NEG
79947: PUSH
79948: LD_INT 2
79950: NEG
79951: PUSH
79952: EMPTY
79953: LIST
79954: LIST
79955: PUSH
79956: LD_INT 0
79958: PUSH
79959: LD_INT 2
79961: NEG
79962: PUSH
79963: EMPTY
79964: LIST
79965: LIST
79966: PUSH
79967: LD_INT 1
79969: PUSH
79970: LD_INT 1
79972: NEG
79973: PUSH
79974: EMPTY
79975: LIST
79976: LIST
79977: PUSH
79978: LD_INT 2
79980: PUSH
79981: LD_INT 0
79983: PUSH
79984: EMPTY
79985: LIST
79986: LIST
79987: PUSH
79988: LD_INT 2
79990: PUSH
79991: LD_INT 1
79993: PUSH
79994: EMPTY
79995: LIST
79996: LIST
79997: PUSH
79998: LD_INT 2
80000: PUSH
80001: LD_INT 2
80003: PUSH
80004: EMPTY
80005: LIST
80006: LIST
80007: PUSH
80008: LD_INT 1
80010: PUSH
80011: LD_INT 2
80013: PUSH
80014: EMPTY
80015: LIST
80016: LIST
80017: PUSH
80018: LD_INT 0
80020: PUSH
80021: LD_INT 2
80023: PUSH
80024: EMPTY
80025: LIST
80026: LIST
80027: PUSH
80028: LD_INT 1
80030: NEG
80031: PUSH
80032: LD_INT 1
80034: PUSH
80035: EMPTY
80036: LIST
80037: LIST
80038: PUSH
80039: LD_INT 2
80041: NEG
80042: PUSH
80043: LD_INT 0
80045: PUSH
80046: EMPTY
80047: LIST
80048: LIST
80049: PUSH
80050: LD_INT 2
80052: NEG
80053: PUSH
80054: LD_INT 1
80056: NEG
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: PUSH
80062: LD_INT 2
80064: NEG
80065: PUSH
80066: LD_INT 2
80068: NEG
80069: PUSH
80070: EMPTY
80071: LIST
80072: LIST
80073: PUSH
80074: EMPTY
80075: LIST
80076: LIST
80077: LIST
80078: LIST
80079: LIST
80080: LIST
80081: LIST
80082: LIST
80083: LIST
80084: LIST
80085: LIST
80086: LIST
80087: LIST
80088: LIST
80089: LIST
80090: LIST
80091: LIST
80092: LIST
80093: LIST
80094: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80095: LD_ADDR_VAR 0 56
80099: PUSH
80100: LD_INT 0
80102: PUSH
80103: LD_INT 0
80105: PUSH
80106: EMPTY
80107: LIST
80108: LIST
80109: PUSH
80110: LD_INT 0
80112: PUSH
80113: LD_INT 1
80115: NEG
80116: PUSH
80117: EMPTY
80118: LIST
80119: LIST
80120: PUSH
80121: LD_INT 1
80123: PUSH
80124: LD_INT 0
80126: PUSH
80127: EMPTY
80128: LIST
80129: LIST
80130: PUSH
80131: LD_INT 1
80133: PUSH
80134: LD_INT 1
80136: PUSH
80137: EMPTY
80138: LIST
80139: LIST
80140: PUSH
80141: LD_INT 0
80143: PUSH
80144: LD_INT 1
80146: PUSH
80147: EMPTY
80148: LIST
80149: LIST
80150: PUSH
80151: LD_INT 1
80153: NEG
80154: PUSH
80155: LD_INT 0
80157: PUSH
80158: EMPTY
80159: LIST
80160: LIST
80161: PUSH
80162: LD_INT 1
80164: NEG
80165: PUSH
80166: LD_INT 1
80168: NEG
80169: PUSH
80170: EMPTY
80171: LIST
80172: LIST
80173: PUSH
80174: LD_INT 1
80176: NEG
80177: PUSH
80178: LD_INT 2
80180: NEG
80181: PUSH
80182: EMPTY
80183: LIST
80184: LIST
80185: PUSH
80186: LD_INT 0
80188: PUSH
80189: LD_INT 2
80191: NEG
80192: PUSH
80193: EMPTY
80194: LIST
80195: LIST
80196: PUSH
80197: LD_INT 1
80199: PUSH
80200: LD_INT 1
80202: NEG
80203: PUSH
80204: EMPTY
80205: LIST
80206: LIST
80207: PUSH
80208: LD_INT 2
80210: PUSH
80211: LD_INT 0
80213: PUSH
80214: EMPTY
80215: LIST
80216: LIST
80217: PUSH
80218: LD_INT 2
80220: PUSH
80221: LD_INT 1
80223: PUSH
80224: EMPTY
80225: LIST
80226: LIST
80227: PUSH
80228: LD_INT 2
80230: PUSH
80231: LD_INT 2
80233: PUSH
80234: EMPTY
80235: LIST
80236: LIST
80237: PUSH
80238: LD_INT 1
80240: PUSH
80241: LD_INT 2
80243: PUSH
80244: EMPTY
80245: LIST
80246: LIST
80247: PUSH
80248: LD_INT 0
80250: PUSH
80251: LD_INT 2
80253: PUSH
80254: EMPTY
80255: LIST
80256: LIST
80257: PUSH
80258: LD_INT 1
80260: NEG
80261: PUSH
80262: LD_INT 1
80264: PUSH
80265: EMPTY
80266: LIST
80267: LIST
80268: PUSH
80269: LD_INT 2
80271: NEG
80272: PUSH
80273: LD_INT 0
80275: PUSH
80276: EMPTY
80277: LIST
80278: LIST
80279: PUSH
80280: LD_INT 2
80282: NEG
80283: PUSH
80284: LD_INT 1
80286: NEG
80287: PUSH
80288: EMPTY
80289: LIST
80290: LIST
80291: PUSH
80292: LD_INT 2
80294: NEG
80295: PUSH
80296: LD_INT 2
80298: NEG
80299: PUSH
80300: EMPTY
80301: LIST
80302: LIST
80303: PUSH
80304: EMPTY
80305: LIST
80306: LIST
80307: LIST
80308: LIST
80309: LIST
80310: LIST
80311: LIST
80312: LIST
80313: LIST
80314: LIST
80315: LIST
80316: LIST
80317: LIST
80318: LIST
80319: LIST
80320: LIST
80321: LIST
80322: LIST
80323: LIST
80324: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80325: LD_ADDR_VAR 0 57
80329: PUSH
80330: LD_INT 0
80332: PUSH
80333: LD_INT 0
80335: PUSH
80336: EMPTY
80337: LIST
80338: LIST
80339: PUSH
80340: LD_INT 0
80342: PUSH
80343: LD_INT 1
80345: NEG
80346: PUSH
80347: EMPTY
80348: LIST
80349: LIST
80350: PUSH
80351: LD_INT 1
80353: PUSH
80354: LD_INT 0
80356: PUSH
80357: EMPTY
80358: LIST
80359: LIST
80360: PUSH
80361: LD_INT 1
80363: PUSH
80364: LD_INT 1
80366: PUSH
80367: EMPTY
80368: LIST
80369: LIST
80370: PUSH
80371: LD_INT 0
80373: PUSH
80374: LD_INT 1
80376: PUSH
80377: EMPTY
80378: LIST
80379: LIST
80380: PUSH
80381: LD_INT 1
80383: NEG
80384: PUSH
80385: LD_INT 0
80387: PUSH
80388: EMPTY
80389: LIST
80390: LIST
80391: PUSH
80392: LD_INT 1
80394: NEG
80395: PUSH
80396: LD_INT 1
80398: NEG
80399: PUSH
80400: EMPTY
80401: LIST
80402: LIST
80403: PUSH
80404: LD_INT 1
80406: NEG
80407: PUSH
80408: LD_INT 2
80410: NEG
80411: PUSH
80412: EMPTY
80413: LIST
80414: LIST
80415: PUSH
80416: LD_INT 0
80418: PUSH
80419: LD_INT 2
80421: NEG
80422: PUSH
80423: EMPTY
80424: LIST
80425: LIST
80426: PUSH
80427: LD_INT 1
80429: PUSH
80430: LD_INT 1
80432: NEG
80433: PUSH
80434: EMPTY
80435: LIST
80436: LIST
80437: PUSH
80438: LD_INT 2
80440: PUSH
80441: LD_INT 0
80443: PUSH
80444: EMPTY
80445: LIST
80446: LIST
80447: PUSH
80448: LD_INT 2
80450: PUSH
80451: LD_INT 1
80453: PUSH
80454: EMPTY
80455: LIST
80456: LIST
80457: PUSH
80458: LD_INT 2
80460: PUSH
80461: LD_INT 2
80463: PUSH
80464: EMPTY
80465: LIST
80466: LIST
80467: PUSH
80468: LD_INT 1
80470: PUSH
80471: LD_INT 2
80473: PUSH
80474: EMPTY
80475: LIST
80476: LIST
80477: PUSH
80478: LD_INT 0
80480: PUSH
80481: LD_INT 2
80483: PUSH
80484: EMPTY
80485: LIST
80486: LIST
80487: PUSH
80488: LD_INT 1
80490: NEG
80491: PUSH
80492: LD_INT 1
80494: PUSH
80495: EMPTY
80496: LIST
80497: LIST
80498: PUSH
80499: LD_INT 2
80501: NEG
80502: PUSH
80503: LD_INT 0
80505: PUSH
80506: EMPTY
80507: LIST
80508: LIST
80509: PUSH
80510: LD_INT 2
80512: NEG
80513: PUSH
80514: LD_INT 1
80516: NEG
80517: PUSH
80518: EMPTY
80519: LIST
80520: LIST
80521: PUSH
80522: LD_INT 2
80524: NEG
80525: PUSH
80526: LD_INT 2
80528: NEG
80529: PUSH
80530: EMPTY
80531: LIST
80532: LIST
80533: PUSH
80534: EMPTY
80535: LIST
80536: LIST
80537: LIST
80538: LIST
80539: LIST
80540: LIST
80541: LIST
80542: LIST
80543: LIST
80544: LIST
80545: LIST
80546: LIST
80547: LIST
80548: LIST
80549: LIST
80550: LIST
80551: LIST
80552: LIST
80553: LIST
80554: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80555: LD_ADDR_VAR 0 58
80559: PUSH
80560: LD_INT 0
80562: PUSH
80563: LD_INT 0
80565: PUSH
80566: EMPTY
80567: LIST
80568: LIST
80569: PUSH
80570: LD_INT 0
80572: PUSH
80573: LD_INT 1
80575: NEG
80576: PUSH
80577: EMPTY
80578: LIST
80579: LIST
80580: PUSH
80581: LD_INT 1
80583: PUSH
80584: LD_INT 0
80586: PUSH
80587: EMPTY
80588: LIST
80589: LIST
80590: PUSH
80591: LD_INT 1
80593: PUSH
80594: LD_INT 1
80596: PUSH
80597: EMPTY
80598: LIST
80599: LIST
80600: PUSH
80601: LD_INT 0
80603: PUSH
80604: LD_INT 1
80606: PUSH
80607: EMPTY
80608: LIST
80609: LIST
80610: PUSH
80611: LD_INT 1
80613: NEG
80614: PUSH
80615: LD_INT 0
80617: PUSH
80618: EMPTY
80619: LIST
80620: LIST
80621: PUSH
80622: LD_INT 1
80624: NEG
80625: PUSH
80626: LD_INT 1
80628: NEG
80629: PUSH
80630: EMPTY
80631: LIST
80632: LIST
80633: PUSH
80634: LD_INT 1
80636: NEG
80637: PUSH
80638: LD_INT 2
80640: NEG
80641: PUSH
80642: EMPTY
80643: LIST
80644: LIST
80645: PUSH
80646: LD_INT 0
80648: PUSH
80649: LD_INT 2
80651: NEG
80652: PUSH
80653: EMPTY
80654: LIST
80655: LIST
80656: PUSH
80657: LD_INT 1
80659: PUSH
80660: LD_INT 1
80662: NEG
80663: PUSH
80664: EMPTY
80665: LIST
80666: LIST
80667: PUSH
80668: LD_INT 2
80670: PUSH
80671: LD_INT 0
80673: PUSH
80674: EMPTY
80675: LIST
80676: LIST
80677: PUSH
80678: LD_INT 2
80680: PUSH
80681: LD_INT 1
80683: PUSH
80684: EMPTY
80685: LIST
80686: LIST
80687: PUSH
80688: LD_INT 2
80690: PUSH
80691: LD_INT 2
80693: PUSH
80694: EMPTY
80695: LIST
80696: LIST
80697: PUSH
80698: LD_INT 1
80700: PUSH
80701: LD_INT 2
80703: PUSH
80704: EMPTY
80705: LIST
80706: LIST
80707: PUSH
80708: LD_INT 0
80710: PUSH
80711: LD_INT 2
80713: PUSH
80714: EMPTY
80715: LIST
80716: LIST
80717: PUSH
80718: LD_INT 1
80720: NEG
80721: PUSH
80722: LD_INT 1
80724: PUSH
80725: EMPTY
80726: LIST
80727: LIST
80728: PUSH
80729: LD_INT 2
80731: NEG
80732: PUSH
80733: LD_INT 0
80735: PUSH
80736: EMPTY
80737: LIST
80738: LIST
80739: PUSH
80740: LD_INT 2
80742: NEG
80743: PUSH
80744: LD_INT 1
80746: NEG
80747: PUSH
80748: EMPTY
80749: LIST
80750: LIST
80751: PUSH
80752: LD_INT 2
80754: NEG
80755: PUSH
80756: LD_INT 2
80758: NEG
80759: PUSH
80760: EMPTY
80761: LIST
80762: LIST
80763: PUSH
80764: EMPTY
80765: LIST
80766: LIST
80767: LIST
80768: LIST
80769: LIST
80770: LIST
80771: LIST
80772: LIST
80773: LIST
80774: LIST
80775: LIST
80776: LIST
80777: LIST
80778: LIST
80779: LIST
80780: LIST
80781: LIST
80782: LIST
80783: LIST
80784: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80785: LD_ADDR_VAR 0 59
80789: PUSH
80790: LD_INT 0
80792: PUSH
80793: LD_INT 0
80795: PUSH
80796: EMPTY
80797: LIST
80798: LIST
80799: PUSH
80800: LD_INT 0
80802: PUSH
80803: LD_INT 1
80805: NEG
80806: PUSH
80807: EMPTY
80808: LIST
80809: LIST
80810: PUSH
80811: LD_INT 1
80813: PUSH
80814: LD_INT 0
80816: PUSH
80817: EMPTY
80818: LIST
80819: LIST
80820: PUSH
80821: LD_INT 1
80823: PUSH
80824: LD_INT 1
80826: PUSH
80827: EMPTY
80828: LIST
80829: LIST
80830: PUSH
80831: LD_INT 0
80833: PUSH
80834: LD_INT 1
80836: PUSH
80837: EMPTY
80838: LIST
80839: LIST
80840: PUSH
80841: LD_INT 1
80843: NEG
80844: PUSH
80845: LD_INT 0
80847: PUSH
80848: EMPTY
80849: LIST
80850: LIST
80851: PUSH
80852: LD_INT 1
80854: NEG
80855: PUSH
80856: LD_INT 1
80858: NEG
80859: PUSH
80860: EMPTY
80861: LIST
80862: LIST
80863: PUSH
80864: EMPTY
80865: LIST
80866: LIST
80867: LIST
80868: LIST
80869: LIST
80870: LIST
80871: LIST
80872: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80873: LD_ADDR_VAR 0 60
80877: PUSH
80878: LD_INT 0
80880: PUSH
80881: LD_INT 0
80883: PUSH
80884: EMPTY
80885: LIST
80886: LIST
80887: PUSH
80888: LD_INT 0
80890: PUSH
80891: LD_INT 1
80893: NEG
80894: PUSH
80895: EMPTY
80896: LIST
80897: LIST
80898: PUSH
80899: LD_INT 1
80901: PUSH
80902: LD_INT 0
80904: PUSH
80905: EMPTY
80906: LIST
80907: LIST
80908: PUSH
80909: LD_INT 1
80911: PUSH
80912: LD_INT 1
80914: PUSH
80915: EMPTY
80916: LIST
80917: LIST
80918: PUSH
80919: LD_INT 0
80921: PUSH
80922: LD_INT 1
80924: PUSH
80925: EMPTY
80926: LIST
80927: LIST
80928: PUSH
80929: LD_INT 1
80931: NEG
80932: PUSH
80933: LD_INT 0
80935: PUSH
80936: EMPTY
80937: LIST
80938: LIST
80939: PUSH
80940: LD_INT 1
80942: NEG
80943: PUSH
80944: LD_INT 1
80946: NEG
80947: PUSH
80948: EMPTY
80949: LIST
80950: LIST
80951: PUSH
80952: EMPTY
80953: LIST
80954: LIST
80955: LIST
80956: LIST
80957: LIST
80958: LIST
80959: LIST
80960: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80961: LD_ADDR_VAR 0 61
80965: PUSH
80966: LD_INT 0
80968: PUSH
80969: LD_INT 0
80971: PUSH
80972: EMPTY
80973: LIST
80974: LIST
80975: PUSH
80976: LD_INT 0
80978: PUSH
80979: LD_INT 1
80981: NEG
80982: PUSH
80983: EMPTY
80984: LIST
80985: LIST
80986: PUSH
80987: LD_INT 1
80989: PUSH
80990: LD_INT 0
80992: PUSH
80993: EMPTY
80994: LIST
80995: LIST
80996: PUSH
80997: LD_INT 1
80999: PUSH
81000: LD_INT 1
81002: PUSH
81003: EMPTY
81004: LIST
81005: LIST
81006: PUSH
81007: LD_INT 0
81009: PUSH
81010: LD_INT 1
81012: PUSH
81013: EMPTY
81014: LIST
81015: LIST
81016: PUSH
81017: LD_INT 1
81019: NEG
81020: PUSH
81021: LD_INT 0
81023: PUSH
81024: EMPTY
81025: LIST
81026: LIST
81027: PUSH
81028: LD_INT 1
81030: NEG
81031: PUSH
81032: LD_INT 1
81034: NEG
81035: PUSH
81036: EMPTY
81037: LIST
81038: LIST
81039: PUSH
81040: EMPTY
81041: LIST
81042: LIST
81043: LIST
81044: LIST
81045: LIST
81046: LIST
81047: LIST
81048: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81049: LD_ADDR_VAR 0 62
81053: PUSH
81054: LD_INT 0
81056: PUSH
81057: LD_INT 0
81059: PUSH
81060: EMPTY
81061: LIST
81062: LIST
81063: PUSH
81064: LD_INT 0
81066: PUSH
81067: LD_INT 1
81069: NEG
81070: PUSH
81071: EMPTY
81072: LIST
81073: LIST
81074: PUSH
81075: LD_INT 1
81077: PUSH
81078: LD_INT 0
81080: PUSH
81081: EMPTY
81082: LIST
81083: LIST
81084: PUSH
81085: LD_INT 1
81087: PUSH
81088: LD_INT 1
81090: PUSH
81091: EMPTY
81092: LIST
81093: LIST
81094: PUSH
81095: LD_INT 0
81097: PUSH
81098: LD_INT 1
81100: PUSH
81101: EMPTY
81102: LIST
81103: LIST
81104: PUSH
81105: LD_INT 1
81107: NEG
81108: PUSH
81109: LD_INT 0
81111: PUSH
81112: EMPTY
81113: LIST
81114: LIST
81115: PUSH
81116: LD_INT 1
81118: NEG
81119: PUSH
81120: LD_INT 1
81122: NEG
81123: PUSH
81124: EMPTY
81125: LIST
81126: LIST
81127: PUSH
81128: EMPTY
81129: LIST
81130: LIST
81131: LIST
81132: LIST
81133: LIST
81134: LIST
81135: LIST
81136: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81137: LD_ADDR_VAR 0 63
81141: PUSH
81142: LD_INT 0
81144: PUSH
81145: LD_INT 0
81147: PUSH
81148: EMPTY
81149: LIST
81150: LIST
81151: PUSH
81152: LD_INT 0
81154: PUSH
81155: LD_INT 1
81157: NEG
81158: PUSH
81159: EMPTY
81160: LIST
81161: LIST
81162: PUSH
81163: LD_INT 1
81165: PUSH
81166: LD_INT 0
81168: PUSH
81169: EMPTY
81170: LIST
81171: LIST
81172: PUSH
81173: LD_INT 1
81175: PUSH
81176: LD_INT 1
81178: PUSH
81179: EMPTY
81180: LIST
81181: LIST
81182: PUSH
81183: LD_INT 0
81185: PUSH
81186: LD_INT 1
81188: PUSH
81189: EMPTY
81190: LIST
81191: LIST
81192: PUSH
81193: LD_INT 1
81195: NEG
81196: PUSH
81197: LD_INT 0
81199: PUSH
81200: EMPTY
81201: LIST
81202: LIST
81203: PUSH
81204: LD_INT 1
81206: NEG
81207: PUSH
81208: LD_INT 1
81210: NEG
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: PUSH
81216: EMPTY
81217: LIST
81218: LIST
81219: LIST
81220: LIST
81221: LIST
81222: LIST
81223: LIST
81224: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81225: LD_ADDR_VAR 0 64
81229: PUSH
81230: LD_INT 0
81232: PUSH
81233: LD_INT 0
81235: PUSH
81236: EMPTY
81237: LIST
81238: LIST
81239: PUSH
81240: LD_INT 0
81242: PUSH
81243: LD_INT 1
81245: NEG
81246: PUSH
81247: EMPTY
81248: LIST
81249: LIST
81250: PUSH
81251: LD_INT 1
81253: PUSH
81254: LD_INT 0
81256: PUSH
81257: EMPTY
81258: LIST
81259: LIST
81260: PUSH
81261: LD_INT 1
81263: PUSH
81264: LD_INT 1
81266: PUSH
81267: EMPTY
81268: LIST
81269: LIST
81270: PUSH
81271: LD_INT 0
81273: PUSH
81274: LD_INT 1
81276: PUSH
81277: EMPTY
81278: LIST
81279: LIST
81280: PUSH
81281: LD_INT 1
81283: NEG
81284: PUSH
81285: LD_INT 0
81287: PUSH
81288: EMPTY
81289: LIST
81290: LIST
81291: PUSH
81292: LD_INT 1
81294: NEG
81295: PUSH
81296: LD_INT 1
81298: NEG
81299: PUSH
81300: EMPTY
81301: LIST
81302: LIST
81303: PUSH
81304: EMPTY
81305: LIST
81306: LIST
81307: LIST
81308: LIST
81309: LIST
81310: LIST
81311: LIST
81312: ST_TO_ADDR
// end ; 1 :
81313: GO 87210
81315: LD_INT 1
81317: DOUBLE
81318: EQUAL
81319: IFTRUE 81323
81321: GO 83946
81323: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
81324: LD_ADDR_VAR 0 11
81328: PUSH
81329: LD_INT 1
81331: NEG
81332: PUSH
81333: LD_INT 3
81335: NEG
81336: PUSH
81337: EMPTY
81338: LIST
81339: LIST
81340: PUSH
81341: LD_INT 0
81343: PUSH
81344: LD_INT 3
81346: NEG
81347: PUSH
81348: EMPTY
81349: LIST
81350: LIST
81351: PUSH
81352: LD_INT 1
81354: PUSH
81355: LD_INT 2
81357: NEG
81358: PUSH
81359: EMPTY
81360: LIST
81361: LIST
81362: PUSH
81363: EMPTY
81364: LIST
81365: LIST
81366: LIST
81367: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
81368: LD_ADDR_VAR 0 12
81372: PUSH
81373: LD_INT 2
81375: PUSH
81376: LD_INT 1
81378: NEG
81379: PUSH
81380: EMPTY
81381: LIST
81382: LIST
81383: PUSH
81384: LD_INT 3
81386: PUSH
81387: LD_INT 0
81389: PUSH
81390: EMPTY
81391: LIST
81392: LIST
81393: PUSH
81394: LD_INT 3
81396: PUSH
81397: LD_INT 1
81399: PUSH
81400: EMPTY
81401: LIST
81402: LIST
81403: PUSH
81404: EMPTY
81405: LIST
81406: LIST
81407: LIST
81408: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
81409: LD_ADDR_VAR 0 13
81413: PUSH
81414: LD_INT 3
81416: PUSH
81417: LD_INT 2
81419: PUSH
81420: EMPTY
81421: LIST
81422: LIST
81423: PUSH
81424: LD_INT 3
81426: PUSH
81427: LD_INT 3
81429: PUSH
81430: EMPTY
81431: LIST
81432: LIST
81433: PUSH
81434: LD_INT 2
81436: PUSH
81437: LD_INT 3
81439: PUSH
81440: EMPTY
81441: LIST
81442: LIST
81443: PUSH
81444: EMPTY
81445: LIST
81446: LIST
81447: LIST
81448: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
81449: LD_ADDR_VAR 0 14
81453: PUSH
81454: LD_INT 1
81456: PUSH
81457: LD_INT 3
81459: PUSH
81460: EMPTY
81461: LIST
81462: LIST
81463: PUSH
81464: LD_INT 0
81466: PUSH
81467: LD_INT 3
81469: PUSH
81470: EMPTY
81471: LIST
81472: LIST
81473: PUSH
81474: LD_INT 1
81476: NEG
81477: PUSH
81478: LD_INT 2
81480: PUSH
81481: EMPTY
81482: LIST
81483: LIST
81484: PUSH
81485: EMPTY
81486: LIST
81487: LIST
81488: LIST
81489: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81490: LD_ADDR_VAR 0 15
81494: PUSH
81495: LD_INT 2
81497: NEG
81498: PUSH
81499: LD_INT 1
81501: PUSH
81502: EMPTY
81503: LIST
81504: LIST
81505: PUSH
81506: LD_INT 3
81508: NEG
81509: PUSH
81510: LD_INT 0
81512: PUSH
81513: EMPTY
81514: LIST
81515: LIST
81516: PUSH
81517: LD_INT 3
81519: NEG
81520: PUSH
81521: LD_INT 1
81523: NEG
81524: PUSH
81525: EMPTY
81526: LIST
81527: LIST
81528: PUSH
81529: EMPTY
81530: LIST
81531: LIST
81532: LIST
81533: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81534: LD_ADDR_VAR 0 16
81538: PUSH
81539: LD_INT 2
81541: NEG
81542: PUSH
81543: LD_INT 3
81545: NEG
81546: PUSH
81547: EMPTY
81548: LIST
81549: LIST
81550: PUSH
81551: LD_INT 3
81553: NEG
81554: PUSH
81555: LD_INT 2
81557: NEG
81558: PUSH
81559: EMPTY
81560: LIST
81561: LIST
81562: PUSH
81563: LD_INT 3
81565: NEG
81566: PUSH
81567: LD_INT 3
81569: NEG
81570: PUSH
81571: EMPTY
81572: LIST
81573: LIST
81574: PUSH
81575: EMPTY
81576: LIST
81577: LIST
81578: LIST
81579: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
81580: LD_ADDR_VAR 0 17
81584: PUSH
81585: LD_INT 1
81587: NEG
81588: PUSH
81589: LD_INT 3
81591: NEG
81592: PUSH
81593: EMPTY
81594: LIST
81595: LIST
81596: PUSH
81597: LD_INT 0
81599: PUSH
81600: LD_INT 3
81602: NEG
81603: PUSH
81604: EMPTY
81605: LIST
81606: LIST
81607: PUSH
81608: LD_INT 1
81610: PUSH
81611: LD_INT 2
81613: NEG
81614: PUSH
81615: EMPTY
81616: LIST
81617: LIST
81618: PUSH
81619: EMPTY
81620: LIST
81621: LIST
81622: LIST
81623: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
81624: LD_ADDR_VAR 0 18
81628: PUSH
81629: LD_INT 2
81631: PUSH
81632: LD_INT 1
81634: NEG
81635: PUSH
81636: EMPTY
81637: LIST
81638: LIST
81639: PUSH
81640: LD_INT 3
81642: PUSH
81643: LD_INT 0
81645: PUSH
81646: EMPTY
81647: LIST
81648: LIST
81649: PUSH
81650: LD_INT 3
81652: PUSH
81653: LD_INT 1
81655: PUSH
81656: EMPTY
81657: LIST
81658: LIST
81659: PUSH
81660: EMPTY
81661: LIST
81662: LIST
81663: LIST
81664: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
81665: LD_ADDR_VAR 0 19
81669: PUSH
81670: LD_INT 3
81672: PUSH
81673: LD_INT 2
81675: PUSH
81676: EMPTY
81677: LIST
81678: LIST
81679: PUSH
81680: LD_INT 3
81682: PUSH
81683: LD_INT 3
81685: PUSH
81686: EMPTY
81687: LIST
81688: LIST
81689: PUSH
81690: LD_INT 2
81692: PUSH
81693: LD_INT 3
81695: PUSH
81696: EMPTY
81697: LIST
81698: LIST
81699: PUSH
81700: EMPTY
81701: LIST
81702: LIST
81703: LIST
81704: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
81705: LD_ADDR_VAR 0 20
81709: PUSH
81710: LD_INT 1
81712: PUSH
81713: LD_INT 3
81715: PUSH
81716: EMPTY
81717: LIST
81718: LIST
81719: PUSH
81720: LD_INT 0
81722: PUSH
81723: LD_INT 3
81725: PUSH
81726: EMPTY
81727: LIST
81728: LIST
81729: PUSH
81730: LD_INT 1
81732: NEG
81733: PUSH
81734: LD_INT 2
81736: PUSH
81737: EMPTY
81738: LIST
81739: LIST
81740: PUSH
81741: EMPTY
81742: LIST
81743: LIST
81744: LIST
81745: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81746: LD_ADDR_VAR 0 21
81750: PUSH
81751: LD_INT 2
81753: NEG
81754: PUSH
81755: LD_INT 1
81757: PUSH
81758: EMPTY
81759: LIST
81760: LIST
81761: PUSH
81762: LD_INT 3
81764: NEG
81765: PUSH
81766: LD_INT 0
81768: PUSH
81769: EMPTY
81770: LIST
81771: LIST
81772: PUSH
81773: LD_INT 3
81775: NEG
81776: PUSH
81777: LD_INT 1
81779: NEG
81780: PUSH
81781: EMPTY
81782: LIST
81783: LIST
81784: PUSH
81785: EMPTY
81786: LIST
81787: LIST
81788: LIST
81789: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81790: LD_ADDR_VAR 0 22
81794: PUSH
81795: LD_INT 2
81797: NEG
81798: PUSH
81799: LD_INT 3
81801: NEG
81802: PUSH
81803: EMPTY
81804: LIST
81805: LIST
81806: PUSH
81807: LD_INT 3
81809: NEG
81810: PUSH
81811: LD_INT 2
81813: NEG
81814: PUSH
81815: EMPTY
81816: LIST
81817: LIST
81818: PUSH
81819: LD_INT 3
81821: NEG
81822: PUSH
81823: LD_INT 3
81825: NEG
81826: PUSH
81827: EMPTY
81828: LIST
81829: LIST
81830: PUSH
81831: EMPTY
81832: LIST
81833: LIST
81834: LIST
81835: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
81836: LD_ADDR_VAR 0 23
81840: PUSH
81841: LD_INT 0
81843: PUSH
81844: LD_INT 3
81846: NEG
81847: PUSH
81848: EMPTY
81849: LIST
81850: LIST
81851: PUSH
81852: LD_INT 1
81854: NEG
81855: PUSH
81856: LD_INT 4
81858: NEG
81859: PUSH
81860: EMPTY
81861: LIST
81862: LIST
81863: PUSH
81864: LD_INT 1
81866: PUSH
81867: LD_INT 3
81869: NEG
81870: PUSH
81871: EMPTY
81872: LIST
81873: LIST
81874: PUSH
81875: EMPTY
81876: LIST
81877: LIST
81878: LIST
81879: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
81880: LD_ADDR_VAR 0 24
81884: PUSH
81885: LD_INT 3
81887: PUSH
81888: LD_INT 0
81890: PUSH
81891: EMPTY
81892: LIST
81893: LIST
81894: PUSH
81895: LD_INT 3
81897: PUSH
81898: LD_INT 1
81900: NEG
81901: PUSH
81902: EMPTY
81903: LIST
81904: LIST
81905: PUSH
81906: LD_INT 4
81908: PUSH
81909: LD_INT 1
81911: PUSH
81912: EMPTY
81913: LIST
81914: LIST
81915: PUSH
81916: EMPTY
81917: LIST
81918: LIST
81919: LIST
81920: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
81921: LD_ADDR_VAR 0 25
81925: PUSH
81926: LD_INT 3
81928: PUSH
81929: LD_INT 3
81931: PUSH
81932: EMPTY
81933: LIST
81934: LIST
81935: PUSH
81936: LD_INT 4
81938: PUSH
81939: LD_INT 3
81941: PUSH
81942: EMPTY
81943: LIST
81944: LIST
81945: PUSH
81946: LD_INT 3
81948: PUSH
81949: LD_INT 4
81951: PUSH
81952: EMPTY
81953: LIST
81954: LIST
81955: PUSH
81956: EMPTY
81957: LIST
81958: LIST
81959: LIST
81960: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
81961: LD_ADDR_VAR 0 26
81965: PUSH
81966: LD_INT 0
81968: PUSH
81969: LD_INT 3
81971: PUSH
81972: EMPTY
81973: LIST
81974: LIST
81975: PUSH
81976: LD_INT 1
81978: PUSH
81979: LD_INT 4
81981: PUSH
81982: EMPTY
81983: LIST
81984: LIST
81985: PUSH
81986: LD_INT 1
81988: NEG
81989: PUSH
81990: LD_INT 3
81992: PUSH
81993: EMPTY
81994: LIST
81995: LIST
81996: PUSH
81997: EMPTY
81998: LIST
81999: LIST
82000: LIST
82001: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
82002: LD_ADDR_VAR 0 27
82006: PUSH
82007: LD_INT 3
82009: NEG
82010: PUSH
82011: LD_INT 0
82013: PUSH
82014: EMPTY
82015: LIST
82016: LIST
82017: PUSH
82018: LD_INT 3
82020: NEG
82021: PUSH
82022: LD_INT 1
82024: PUSH
82025: EMPTY
82026: LIST
82027: LIST
82028: PUSH
82029: LD_INT 4
82031: NEG
82032: PUSH
82033: LD_INT 1
82035: NEG
82036: PUSH
82037: EMPTY
82038: LIST
82039: LIST
82040: PUSH
82041: EMPTY
82042: LIST
82043: LIST
82044: LIST
82045: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
82046: LD_ADDR_VAR 0 28
82050: PUSH
82051: LD_INT 3
82053: NEG
82054: PUSH
82055: LD_INT 3
82057: NEG
82058: PUSH
82059: EMPTY
82060: LIST
82061: LIST
82062: PUSH
82063: LD_INT 3
82065: NEG
82066: PUSH
82067: LD_INT 4
82069: NEG
82070: PUSH
82071: EMPTY
82072: LIST
82073: LIST
82074: PUSH
82075: LD_INT 4
82077: NEG
82078: PUSH
82079: LD_INT 3
82081: NEG
82082: PUSH
82083: EMPTY
82084: LIST
82085: LIST
82086: PUSH
82087: EMPTY
82088: LIST
82089: LIST
82090: LIST
82091: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
82092: LD_ADDR_VAR 0 29
82096: PUSH
82097: LD_INT 1
82099: NEG
82100: PUSH
82101: LD_INT 3
82103: NEG
82104: PUSH
82105: EMPTY
82106: LIST
82107: LIST
82108: PUSH
82109: LD_INT 0
82111: PUSH
82112: LD_INT 3
82114: NEG
82115: PUSH
82116: EMPTY
82117: LIST
82118: LIST
82119: PUSH
82120: LD_INT 1
82122: PUSH
82123: LD_INT 2
82125: NEG
82126: PUSH
82127: EMPTY
82128: LIST
82129: LIST
82130: PUSH
82131: LD_INT 1
82133: NEG
82134: PUSH
82135: LD_INT 4
82137: NEG
82138: PUSH
82139: EMPTY
82140: LIST
82141: LIST
82142: PUSH
82143: LD_INT 0
82145: PUSH
82146: LD_INT 4
82148: NEG
82149: PUSH
82150: EMPTY
82151: LIST
82152: LIST
82153: PUSH
82154: LD_INT 1
82156: PUSH
82157: LD_INT 3
82159: NEG
82160: PUSH
82161: EMPTY
82162: LIST
82163: LIST
82164: PUSH
82165: LD_INT 1
82167: NEG
82168: PUSH
82169: LD_INT 5
82171: NEG
82172: PUSH
82173: EMPTY
82174: LIST
82175: LIST
82176: PUSH
82177: LD_INT 0
82179: PUSH
82180: LD_INT 5
82182: NEG
82183: PUSH
82184: EMPTY
82185: LIST
82186: LIST
82187: PUSH
82188: LD_INT 1
82190: PUSH
82191: LD_INT 4
82193: NEG
82194: PUSH
82195: EMPTY
82196: LIST
82197: LIST
82198: PUSH
82199: LD_INT 1
82201: NEG
82202: PUSH
82203: LD_INT 6
82205: NEG
82206: PUSH
82207: EMPTY
82208: LIST
82209: LIST
82210: PUSH
82211: LD_INT 0
82213: PUSH
82214: LD_INT 6
82216: NEG
82217: PUSH
82218: EMPTY
82219: LIST
82220: LIST
82221: PUSH
82222: LD_INT 1
82224: PUSH
82225: LD_INT 5
82227: NEG
82228: PUSH
82229: EMPTY
82230: LIST
82231: LIST
82232: PUSH
82233: EMPTY
82234: LIST
82235: LIST
82236: LIST
82237: LIST
82238: LIST
82239: LIST
82240: LIST
82241: LIST
82242: LIST
82243: LIST
82244: LIST
82245: LIST
82246: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
82247: LD_ADDR_VAR 0 30
82251: PUSH
82252: LD_INT 2
82254: PUSH
82255: LD_INT 1
82257: NEG
82258: PUSH
82259: EMPTY
82260: LIST
82261: LIST
82262: PUSH
82263: LD_INT 3
82265: PUSH
82266: LD_INT 0
82268: PUSH
82269: EMPTY
82270: LIST
82271: LIST
82272: PUSH
82273: LD_INT 3
82275: PUSH
82276: LD_INT 1
82278: PUSH
82279: EMPTY
82280: LIST
82281: LIST
82282: PUSH
82283: LD_INT 3
82285: PUSH
82286: LD_INT 1
82288: NEG
82289: PUSH
82290: EMPTY
82291: LIST
82292: LIST
82293: PUSH
82294: LD_INT 4
82296: PUSH
82297: LD_INT 0
82299: PUSH
82300: EMPTY
82301: LIST
82302: LIST
82303: PUSH
82304: LD_INT 4
82306: PUSH
82307: LD_INT 1
82309: PUSH
82310: EMPTY
82311: LIST
82312: LIST
82313: PUSH
82314: LD_INT 4
82316: PUSH
82317: LD_INT 1
82319: NEG
82320: PUSH
82321: EMPTY
82322: LIST
82323: LIST
82324: PUSH
82325: LD_INT 5
82327: PUSH
82328: LD_INT 0
82330: PUSH
82331: EMPTY
82332: LIST
82333: LIST
82334: PUSH
82335: LD_INT 5
82337: PUSH
82338: LD_INT 1
82340: PUSH
82341: EMPTY
82342: LIST
82343: LIST
82344: PUSH
82345: LD_INT 5
82347: PUSH
82348: LD_INT 1
82350: NEG
82351: PUSH
82352: EMPTY
82353: LIST
82354: LIST
82355: PUSH
82356: LD_INT 6
82358: PUSH
82359: LD_INT 0
82361: PUSH
82362: EMPTY
82363: LIST
82364: LIST
82365: PUSH
82366: LD_INT 6
82368: PUSH
82369: LD_INT 1
82371: PUSH
82372: EMPTY
82373: LIST
82374: LIST
82375: PUSH
82376: EMPTY
82377: LIST
82378: LIST
82379: LIST
82380: LIST
82381: LIST
82382: LIST
82383: LIST
82384: LIST
82385: LIST
82386: LIST
82387: LIST
82388: LIST
82389: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
82390: LD_ADDR_VAR 0 31
82394: PUSH
82395: LD_INT 3
82397: PUSH
82398: LD_INT 2
82400: PUSH
82401: EMPTY
82402: LIST
82403: LIST
82404: PUSH
82405: LD_INT 3
82407: PUSH
82408: LD_INT 3
82410: PUSH
82411: EMPTY
82412: LIST
82413: LIST
82414: PUSH
82415: LD_INT 2
82417: PUSH
82418: LD_INT 3
82420: PUSH
82421: EMPTY
82422: LIST
82423: LIST
82424: PUSH
82425: LD_INT 4
82427: PUSH
82428: LD_INT 3
82430: PUSH
82431: EMPTY
82432: LIST
82433: LIST
82434: PUSH
82435: LD_INT 4
82437: PUSH
82438: LD_INT 4
82440: PUSH
82441: EMPTY
82442: LIST
82443: LIST
82444: PUSH
82445: LD_INT 3
82447: PUSH
82448: LD_INT 4
82450: PUSH
82451: EMPTY
82452: LIST
82453: LIST
82454: PUSH
82455: LD_INT 5
82457: PUSH
82458: LD_INT 4
82460: PUSH
82461: EMPTY
82462: LIST
82463: LIST
82464: PUSH
82465: LD_INT 5
82467: PUSH
82468: LD_INT 5
82470: PUSH
82471: EMPTY
82472: LIST
82473: LIST
82474: PUSH
82475: LD_INT 4
82477: PUSH
82478: LD_INT 5
82480: PUSH
82481: EMPTY
82482: LIST
82483: LIST
82484: PUSH
82485: LD_INT 6
82487: PUSH
82488: LD_INT 5
82490: PUSH
82491: EMPTY
82492: LIST
82493: LIST
82494: PUSH
82495: LD_INT 6
82497: PUSH
82498: LD_INT 6
82500: PUSH
82501: EMPTY
82502: LIST
82503: LIST
82504: PUSH
82505: LD_INT 5
82507: PUSH
82508: LD_INT 6
82510: PUSH
82511: EMPTY
82512: LIST
82513: LIST
82514: PUSH
82515: EMPTY
82516: LIST
82517: LIST
82518: LIST
82519: LIST
82520: LIST
82521: LIST
82522: LIST
82523: LIST
82524: LIST
82525: LIST
82526: LIST
82527: LIST
82528: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
82529: LD_ADDR_VAR 0 32
82533: PUSH
82534: LD_INT 1
82536: PUSH
82537: LD_INT 3
82539: PUSH
82540: EMPTY
82541: LIST
82542: LIST
82543: PUSH
82544: LD_INT 0
82546: PUSH
82547: LD_INT 3
82549: PUSH
82550: EMPTY
82551: LIST
82552: LIST
82553: PUSH
82554: LD_INT 1
82556: NEG
82557: PUSH
82558: LD_INT 2
82560: PUSH
82561: EMPTY
82562: LIST
82563: LIST
82564: PUSH
82565: LD_INT 1
82567: PUSH
82568: LD_INT 4
82570: PUSH
82571: EMPTY
82572: LIST
82573: LIST
82574: PUSH
82575: LD_INT 0
82577: PUSH
82578: LD_INT 4
82580: PUSH
82581: EMPTY
82582: LIST
82583: LIST
82584: PUSH
82585: LD_INT 1
82587: NEG
82588: PUSH
82589: LD_INT 3
82591: PUSH
82592: EMPTY
82593: LIST
82594: LIST
82595: PUSH
82596: LD_INT 1
82598: PUSH
82599: LD_INT 5
82601: PUSH
82602: EMPTY
82603: LIST
82604: LIST
82605: PUSH
82606: LD_INT 0
82608: PUSH
82609: LD_INT 5
82611: PUSH
82612: EMPTY
82613: LIST
82614: LIST
82615: PUSH
82616: LD_INT 1
82618: NEG
82619: PUSH
82620: LD_INT 4
82622: PUSH
82623: EMPTY
82624: LIST
82625: LIST
82626: PUSH
82627: LD_INT 1
82629: PUSH
82630: LD_INT 6
82632: PUSH
82633: EMPTY
82634: LIST
82635: LIST
82636: PUSH
82637: LD_INT 0
82639: PUSH
82640: LD_INT 6
82642: PUSH
82643: EMPTY
82644: LIST
82645: LIST
82646: PUSH
82647: LD_INT 1
82649: NEG
82650: PUSH
82651: LD_INT 5
82653: PUSH
82654: EMPTY
82655: LIST
82656: LIST
82657: PUSH
82658: EMPTY
82659: LIST
82660: LIST
82661: LIST
82662: LIST
82663: LIST
82664: LIST
82665: LIST
82666: LIST
82667: LIST
82668: LIST
82669: LIST
82670: LIST
82671: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
82672: LD_ADDR_VAR 0 33
82676: PUSH
82677: LD_INT 2
82679: NEG
82680: PUSH
82681: LD_INT 1
82683: PUSH
82684: EMPTY
82685: LIST
82686: LIST
82687: PUSH
82688: LD_INT 3
82690: NEG
82691: PUSH
82692: LD_INT 0
82694: PUSH
82695: EMPTY
82696: LIST
82697: LIST
82698: PUSH
82699: LD_INT 3
82701: NEG
82702: PUSH
82703: LD_INT 1
82705: NEG
82706: PUSH
82707: EMPTY
82708: LIST
82709: LIST
82710: PUSH
82711: LD_INT 3
82713: NEG
82714: PUSH
82715: LD_INT 1
82717: PUSH
82718: EMPTY
82719: LIST
82720: LIST
82721: PUSH
82722: LD_INT 4
82724: NEG
82725: PUSH
82726: LD_INT 0
82728: PUSH
82729: EMPTY
82730: LIST
82731: LIST
82732: PUSH
82733: LD_INT 4
82735: NEG
82736: PUSH
82737: LD_INT 1
82739: NEG
82740: PUSH
82741: EMPTY
82742: LIST
82743: LIST
82744: PUSH
82745: LD_INT 4
82747: NEG
82748: PUSH
82749: LD_INT 1
82751: PUSH
82752: EMPTY
82753: LIST
82754: LIST
82755: PUSH
82756: LD_INT 5
82758: NEG
82759: PUSH
82760: LD_INT 0
82762: PUSH
82763: EMPTY
82764: LIST
82765: LIST
82766: PUSH
82767: LD_INT 5
82769: NEG
82770: PUSH
82771: LD_INT 1
82773: NEG
82774: PUSH
82775: EMPTY
82776: LIST
82777: LIST
82778: PUSH
82779: LD_INT 5
82781: NEG
82782: PUSH
82783: LD_INT 1
82785: PUSH
82786: EMPTY
82787: LIST
82788: LIST
82789: PUSH
82790: LD_INT 6
82792: NEG
82793: PUSH
82794: LD_INT 0
82796: PUSH
82797: EMPTY
82798: LIST
82799: LIST
82800: PUSH
82801: LD_INT 6
82803: NEG
82804: PUSH
82805: LD_INT 1
82807: NEG
82808: PUSH
82809: EMPTY
82810: LIST
82811: LIST
82812: PUSH
82813: EMPTY
82814: LIST
82815: LIST
82816: LIST
82817: LIST
82818: LIST
82819: LIST
82820: LIST
82821: LIST
82822: LIST
82823: LIST
82824: LIST
82825: LIST
82826: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
82827: LD_ADDR_VAR 0 34
82831: PUSH
82832: LD_INT 2
82834: NEG
82835: PUSH
82836: LD_INT 3
82838: NEG
82839: PUSH
82840: EMPTY
82841: LIST
82842: LIST
82843: PUSH
82844: LD_INT 3
82846: NEG
82847: PUSH
82848: LD_INT 2
82850: NEG
82851: PUSH
82852: EMPTY
82853: LIST
82854: LIST
82855: PUSH
82856: LD_INT 3
82858: NEG
82859: PUSH
82860: LD_INT 3
82862: NEG
82863: PUSH
82864: EMPTY
82865: LIST
82866: LIST
82867: PUSH
82868: LD_INT 3
82870: NEG
82871: PUSH
82872: LD_INT 4
82874: NEG
82875: PUSH
82876: EMPTY
82877: LIST
82878: LIST
82879: PUSH
82880: LD_INT 4
82882: NEG
82883: PUSH
82884: LD_INT 3
82886: NEG
82887: PUSH
82888: EMPTY
82889: LIST
82890: LIST
82891: PUSH
82892: LD_INT 4
82894: NEG
82895: PUSH
82896: LD_INT 4
82898: NEG
82899: PUSH
82900: EMPTY
82901: LIST
82902: LIST
82903: PUSH
82904: LD_INT 4
82906: NEG
82907: PUSH
82908: LD_INT 5
82910: NEG
82911: PUSH
82912: EMPTY
82913: LIST
82914: LIST
82915: PUSH
82916: LD_INT 5
82918: NEG
82919: PUSH
82920: LD_INT 4
82922: NEG
82923: PUSH
82924: EMPTY
82925: LIST
82926: LIST
82927: PUSH
82928: LD_INT 5
82930: NEG
82931: PUSH
82932: LD_INT 5
82934: NEG
82935: PUSH
82936: EMPTY
82937: LIST
82938: LIST
82939: PUSH
82940: LD_INT 5
82942: NEG
82943: PUSH
82944: LD_INT 6
82946: NEG
82947: PUSH
82948: EMPTY
82949: LIST
82950: LIST
82951: PUSH
82952: LD_INT 6
82954: NEG
82955: PUSH
82956: LD_INT 5
82958: NEG
82959: PUSH
82960: EMPTY
82961: LIST
82962: LIST
82963: PUSH
82964: LD_INT 6
82966: NEG
82967: PUSH
82968: LD_INT 6
82970: NEG
82971: PUSH
82972: EMPTY
82973: LIST
82974: LIST
82975: PUSH
82976: EMPTY
82977: LIST
82978: LIST
82979: LIST
82980: LIST
82981: LIST
82982: LIST
82983: LIST
82984: LIST
82985: LIST
82986: LIST
82987: LIST
82988: LIST
82989: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
82990: LD_ADDR_VAR 0 41
82994: PUSH
82995: LD_INT 0
82997: PUSH
82998: LD_INT 2
83000: NEG
83001: PUSH
83002: EMPTY
83003: LIST
83004: LIST
83005: PUSH
83006: LD_INT 1
83008: NEG
83009: PUSH
83010: LD_INT 3
83012: NEG
83013: PUSH
83014: EMPTY
83015: LIST
83016: LIST
83017: PUSH
83018: LD_INT 1
83020: PUSH
83021: LD_INT 2
83023: NEG
83024: PUSH
83025: EMPTY
83026: LIST
83027: LIST
83028: PUSH
83029: EMPTY
83030: LIST
83031: LIST
83032: LIST
83033: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
83034: LD_ADDR_VAR 0 42
83038: PUSH
83039: LD_INT 2
83041: PUSH
83042: LD_INT 0
83044: PUSH
83045: EMPTY
83046: LIST
83047: LIST
83048: PUSH
83049: LD_INT 2
83051: PUSH
83052: LD_INT 1
83054: NEG
83055: PUSH
83056: EMPTY
83057: LIST
83058: LIST
83059: PUSH
83060: LD_INT 3
83062: PUSH
83063: LD_INT 1
83065: PUSH
83066: EMPTY
83067: LIST
83068: LIST
83069: PUSH
83070: EMPTY
83071: LIST
83072: LIST
83073: LIST
83074: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
83075: LD_ADDR_VAR 0 43
83079: PUSH
83080: LD_INT 2
83082: PUSH
83083: LD_INT 2
83085: PUSH
83086: EMPTY
83087: LIST
83088: LIST
83089: PUSH
83090: LD_INT 3
83092: PUSH
83093: LD_INT 2
83095: PUSH
83096: EMPTY
83097: LIST
83098: LIST
83099: PUSH
83100: LD_INT 2
83102: PUSH
83103: LD_INT 3
83105: PUSH
83106: EMPTY
83107: LIST
83108: LIST
83109: PUSH
83110: EMPTY
83111: LIST
83112: LIST
83113: LIST
83114: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
83115: LD_ADDR_VAR 0 44
83119: PUSH
83120: LD_INT 0
83122: PUSH
83123: LD_INT 2
83125: PUSH
83126: EMPTY
83127: LIST
83128: LIST
83129: PUSH
83130: LD_INT 1
83132: PUSH
83133: LD_INT 3
83135: PUSH
83136: EMPTY
83137: LIST
83138: LIST
83139: PUSH
83140: LD_INT 1
83142: NEG
83143: PUSH
83144: LD_INT 2
83146: PUSH
83147: EMPTY
83148: LIST
83149: LIST
83150: PUSH
83151: EMPTY
83152: LIST
83153: LIST
83154: LIST
83155: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
83156: LD_ADDR_VAR 0 45
83160: PUSH
83161: LD_INT 2
83163: NEG
83164: PUSH
83165: LD_INT 0
83167: PUSH
83168: EMPTY
83169: LIST
83170: LIST
83171: PUSH
83172: LD_INT 2
83174: NEG
83175: PUSH
83176: LD_INT 1
83178: PUSH
83179: EMPTY
83180: LIST
83181: LIST
83182: PUSH
83183: LD_INT 3
83185: NEG
83186: PUSH
83187: LD_INT 1
83189: NEG
83190: PUSH
83191: EMPTY
83192: LIST
83193: LIST
83194: PUSH
83195: EMPTY
83196: LIST
83197: LIST
83198: LIST
83199: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
83200: LD_ADDR_VAR 0 46
83204: PUSH
83205: LD_INT 2
83207: NEG
83208: PUSH
83209: LD_INT 2
83211: NEG
83212: PUSH
83213: EMPTY
83214: LIST
83215: LIST
83216: PUSH
83217: LD_INT 2
83219: NEG
83220: PUSH
83221: LD_INT 3
83223: NEG
83224: PUSH
83225: EMPTY
83226: LIST
83227: LIST
83228: PUSH
83229: LD_INT 3
83231: NEG
83232: PUSH
83233: LD_INT 2
83235: NEG
83236: PUSH
83237: EMPTY
83238: LIST
83239: LIST
83240: PUSH
83241: EMPTY
83242: LIST
83243: LIST
83244: LIST
83245: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
83246: LD_ADDR_VAR 0 47
83250: PUSH
83251: LD_INT 2
83253: NEG
83254: PUSH
83255: LD_INT 3
83257: NEG
83258: PUSH
83259: EMPTY
83260: LIST
83261: LIST
83262: PUSH
83263: LD_INT 1
83265: NEG
83266: PUSH
83267: LD_INT 3
83269: NEG
83270: PUSH
83271: EMPTY
83272: LIST
83273: LIST
83274: PUSH
83275: EMPTY
83276: LIST
83277: LIST
83278: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
83279: LD_ADDR_VAR 0 48
83283: PUSH
83284: LD_INT 1
83286: PUSH
83287: LD_INT 2
83289: NEG
83290: PUSH
83291: EMPTY
83292: LIST
83293: LIST
83294: PUSH
83295: LD_INT 2
83297: PUSH
83298: LD_INT 1
83300: NEG
83301: PUSH
83302: EMPTY
83303: LIST
83304: LIST
83305: PUSH
83306: EMPTY
83307: LIST
83308: LIST
83309: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
83310: LD_ADDR_VAR 0 49
83314: PUSH
83315: LD_INT 3
83317: PUSH
83318: LD_INT 1
83320: PUSH
83321: EMPTY
83322: LIST
83323: LIST
83324: PUSH
83325: LD_INT 3
83327: PUSH
83328: LD_INT 2
83330: PUSH
83331: EMPTY
83332: LIST
83333: LIST
83334: PUSH
83335: EMPTY
83336: LIST
83337: LIST
83338: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
83339: LD_ADDR_VAR 0 50
83343: PUSH
83344: LD_INT 2
83346: PUSH
83347: LD_INT 3
83349: PUSH
83350: EMPTY
83351: LIST
83352: LIST
83353: PUSH
83354: LD_INT 1
83356: PUSH
83357: LD_INT 3
83359: PUSH
83360: EMPTY
83361: LIST
83362: LIST
83363: PUSH
83364: EMPTY
83365: LIST
83366: LIST
83367: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
83368: LD_ADDR_VAR 0 51
83372: PUSH
83373: LD_INT 1
83375: NEG
83376: PUSH
83377: LD_INT 2
83379: PUSH
83380: EMPTY
83381: LIST
83382: LIST
83383: PUSH
83384: LD_INT 2
83386: NEG
83387: PUSH
83388: LD_INT 1
83390: PUSH
83391: EMPTY
83392: LIST
83393: LIST
83394: PUSH
83395: EMPTY
83396: LIST
83397: LIST
83398: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
83399: LD_ADDR_VAR 0 52
83403: PUSH
83404: LD_INT 3
83406: NEG
83407: PUSH
83408: LD_INT 1
83410: NEG
83411: PUSH
83412: EMPTY
83413: LIST
83414: LIST
83415: PUSH
83416: LD_INT 3
83418: NEG
83419: PUSH
83420: LD_INT 2
83422: NEG
83423: PUSH
83424: EMPTY
83425: LIST
83426: LIST
83427: PUSH
83428: EMPTY
83429: LIST
83430: LIST
83431: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
83432: LD_ADDR_VAR 0 53
83436: PUSH
83437: LD_INT 1
83439: NEG
83440: PUSH
83441: LD_INT 3
83443: NEG
83444: PUSH
83445: EMPTY
83446: LIST
83447: LIST
83448: PUSH
83449: LD_INT 0
83451: PUSH
83452: LD_INT 3
83454: NEG
83455: PUSH
83456: EMPTY
83457: LIST
83458: LIST
83459: PUSH
83460: LD_INT 1
83462: PUSH
83463: LD_INT 2
83465: NEG
83466: PUSH
83467: EMPTY
83468: LIST
83469: LIST
83470: PUSH
83471: EMPTY
83472: LIST
83473: LIST
83474: LIST
83475: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
83476: LD_ADDR_VAR 0 54
83480: PUSH
83481: LD_INT 2
83483: PUSH
83484: LD_INT 1
83486: NEG
83487: PUSH
83488: EMPTY
83489: LIST
83490: LIST
83491: PUSH
83492: LD_INT 3
83494: PUSH
83495: LD_INT 0
83497: PUSH
83498: EMPTY
83499: LIST
83500: LIST
83501: PUSH
83502: LD_INT 3
83504: PUSH
83505: LD_INT 1
83507: PUSH
83508: EMPTY
83509: LIST
83510: LIST
83511: PUSH
83512: EMPTY
83513: LIST
83514: LIST
83515: LIST
83516: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
83517: LD_ADDR_VAR 0 55
83521: PUSH
83522: LD_INT 3
83524: PUSH
83525: LD_INT 2
83527: PUSH
83528: EMPTY
83529: LIST
83530: LIST
83531: PUSH
83532: LD_INT 3
83534: PUSH
83535: LD_INT 3
83537: PUSH
83538: EMPTY
83539: LIST
83540: LIST
83541: PUSH
83542: LD_INT 2
83544: PUSH
83545: LD_INT 3
83547: PUSH
83548: EMPTY
83549: LIST
83550: LIST
83551: PUSH
83552: EMPTY
83553: LIST
83554: LIST
83555: LIST
83556: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
83557: LD_ADDR_VAR 0 56
83561: PUSH
83562: LD_INT 1
83564: PUSH
83565: LD_INT 3
83567: PUSH
83568: EMPTY
83569: LIST
83570: LIST
83571: PUSH
83572: LD_INT 0
83574: PUSH
83575: LD_INT 3
83577: PUSH
83578: EMPTY
83579: LIST
83580: LIST
83581: PUSH
83582: LD_INT 1
83584: NEG
83585: PUSH
83586: LD_INT 2
83588: PUSH
83589: EMPTY
83590: LIST
83591: LIST
83592: PUSH
83593: EMPTY
83594: LIST
83595: LIST
83596: LIST
83597: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
83598: LD_ADDR_VAR 0 57
83602: PUSH
83603: LD_INT 2
83605: NEG
83606: PUSH
83607: LD_INT 1
83609: PUSH
83610: EMPTY
83611: LIST
83612: LIST
83613: PUSH
83614: LD_INT 3
83616: NEG
83617: PUSH
83618: LD_INT 0
83620: PUSH
83621: EMPTY
83622: LIST
83623: LIST
83624: PUSH
83625: LD_INT 3
83627: NEG
83628: PUSH
83629: LD_INT 1
83631: NEG
83632: PUSH
83633: EMPTY
83634: LIST
83635: LIST
83636: PUSH
83637: EMPTY
83638: LIST
83639: LIST
83640: LIST
83641: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83642: LD_ADDR_VAR 0 58
83646: PUSH
83647: LD_INT 2
83649: NEG
83650: PUSH
83651: LD_INT 3
83653: NEG
83654: PUSH
83655: EMPTY
83656: LIST
83657: LIST
83658: PUSH
83659: LD_INT 3
83661: NEG
83662: PUSH
83663: LD_INT 2
83665: NEG
83666: PUSH
83667: EMPTY
83668: LIST
83669: LIST
83670: PUSH
83671: LD_INT 3
83673: NEG
83674: PUSH
83675: LD_INT 3
83677: NEG
83678: PUSH
83679: EMPTY
83680: LIST
83681: LIST
83682: PUSH
83683: EMPTY
83684: LIST
83685: LIST
83686: LIST
83687: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
83688: LD_ADDR_VAR 0 59
83692: PUSH
83693: LD_INT 1
83695: NEG
83696: PUSH
83697: LD_INT 2
83699: NEG
83700: PUSH
83701: EMPTY
83702: LIST
83703: LIST
83704: PUSH
83705: LD_INT 0
83707: PUSH
83708: LD_INT 2
83710: NEG
83711: PUSH
83712: EMPTY
83713: LIST
83714: LIST
83715: PUSH
83716: LD_INT 1
83718: PUSH
83719: LD_INT 1
83721: NEG
83722: PUSH
83723: EMPTY
83724: LIST
83725: LIST
83726: PUSH
83727: EMPTY
83728: LIST
83729: LIST
83730: LIST
83731: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
83732: LD_ADDR_VAR 0 60
83736: PUSH
83737: LD_INT 1
83739: PUSH
83740: LD_INT 1
83742: NEG
83743: PUSH
83744: EMPTY
83745: LIST
83746: LIST
83747: PUSH
83748: LD_INT 2
83750: PUSH
83751: LD_INT 0
83753: PUSH
83754: EMPTY
83755: LIST
83756: LIST
83757: PUSH
83758: LD_INT 2
83760: PUSH
83761: LD_INT 1
83763: PUSH
83764: EMPTY
83765: LIST
83766: LIST
83767: PUSH
83768: EMPTY
83769: LIST
83770: LIST
83771: LIST
83772: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
83773: LD_ADDR_VAR 0 61
83777: PUSH
83778: LD_INT 2
83780: PUSH
83781: LD_INT 1
83783: PUSH
83784: EMPTY
83785: LIST
83786: LIST
83787: PUSH
83788: LD_INT 2
83790: PUSH
83791: LD_INT 2
83793: PUSH
83794: EMPTY
83795: LIST
83796: LIST
83797: PUSH
83798: LD_INT 1
83800: PUSH
83801: LD_INT 2
83803: PUSH
83804: EMPTY
83805: LIST
83806: LIST
83807: PUSH
83808: EMPTY
83809: LIST
83810: LIST
83811: LIST
83812: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
83813: LD_ADDR_VAR 0 62
83817: PUSH
83818: LD_INT 1
83820: PUSH
83821: LD_INT 2
83823: PUSH
83824: EMPTY
83825: LIST
83826: LIST
83827: PUSH
83828: LD_INT 0
83830: PUSH
83831: LD_INT 2
83833: PUSH
83834: EMPTY
83835: LIST
83836: LIST
83837: PUSH
83838: LD_INT 1
83840: NEG
83841: PUSH
83842: LD_INT 1
83844: PUSH
83845: EMPTY
83846: LIST
83847: LIST
83848: PUSH
83849: EMPTY
83850: LIST
83851: LIST
83852: LIST
83853: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
83854: LD_ADDR_VAR 0 63
83858: PUSH
83859: LD_INT 1
83861: NEG
83862: PUSH
83863: LD_INT 1
83865: PUSH
83866: EMPTY
83867: LIST
83868: LIST
83869: PUSH
83870: LD_INT 2
83872: NEG
83873: PUSH
83874: LD_INT 0
83876: PUSH
83877: EMPTY
83878: LIST
83879: LIST
83880: PUSH
83881: LD_INT 2
83883: NEG
83884: PUSH
83885: LD_INT 1
83887: NEG
83888: PUSH
83889: EMPTY
83890: LIST
83891: LIST
83892: PUSH
83893: EMPTY
83894: LIST
83895: LIST
83896: LIST
83897: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
83898: LD_ADDR_VAR 0 64
83902: PUSH
83903: LD_INT 1
83905: NEG
83906: PUSH
83907: LD_INT 2
83909: NEG
83910: PUSH
83911: EMPTY
83912: LIST
83913: LIST
83914: PUSH
83915: LD_INT 2
83917: NEG
83918: PUSH
83919: LD_INT 1
83921: NEG
83922: PUSH
83923: EMPTY
83924: LIST
83925: LIST
83926: PUSH
83927: LD_INT 2
83929: NEG
83930: PUSH
83931: LD_INT 2
83933: NEG
83934: PUSH
83935: EMPTY
83936: LIST
83937: LIST
83938: PUSH
83939: EMPTY
83940: LIST
83941: LIST
83942: LIST
83943: ST_TO_ADDR
// end ; 2 :
83944: GO 87210
83946: LD_INT 2
83948: DOUBLE
83949: EQUAL
83950: IFTRUE 83954
83952: GO 87209
83954: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
83955: LD_ADDR_VAR 0 29
83959: PUSH
83960: LD_INT 4
83962: PUSH
83963: LD_INT 0
83965: PUSH
83966: EMPTY
83967: LIST
83968: LIST
83969: PUSH
83970: LD_INT 4
83972: PUSH
83973: LD_INT 1
83975: NEG
83976: PUSH
83977: EMPTY
83978: LIST
83979: LIST
83980: PUSH
83981: LD_INT 5
83983: PUSH
83984: LD_INT 0
83986: PUSH
83987: EMPTY
83988: LIST
83989: LIST
83990: PUSH
83991: LD_INT 5
83993: PUSH
83994: LD_INT 1
83996: PUSH
83997: EMPTY
83998: LIST
83999: LIST
84000: PUSH
84001: LD_INT 4
84003: PUSH
84004: LD_INT 1
84006: PUSH
84007: EMPTY
84008: LIST
84009: LIST
84010: PUSH
84011: LD_INT 3
84013: PUSH
84014: LD_INT 0
84016: PUSH
84017: EMPTY
84018: LIST
84019: LIST
84020: PUSH
84021: LD_INT 3
84023: PUSH
84024: LD_INT 1
84026: NEG
84027: PUSH
84028: EMPTY
84029: LIST
84030: LIST
84031: PUSH
84032: LD_INT 3
84034: PUSH
84035: LD_INT 2
84037: NEG
84038: PUSH
84039: EMPTY
84040: LIST
84041: LIST
84042: PUSH
84043: LD_INT 5
84045: PUSH
84046: LD_INT 2
84048: PUSH
84049: EMPTY
84050: LIST
84051: LIST
84052: PUSH
84053: LD_INT 3
84055: PUSH
84056: LD_INT 3
84058: PUSH
84059: EMPTY
84060: LIST
84061: LIST
84062: PUSH
84063: LD_INT 3
84065: PUSH
84066: LD_INT 2
84068: PUSH
84069: EMPTY
84070: LIST
84071: LIST
84072: PUSH
84073: LD_INT 4
84075: PUSH
84076: LD_INT 3
84078: PUSH
84079: EMPTY
84080: LIST
84081: LIST
84082: PUSH
84083: LD_INT 4
84085: PUSH
84086: LD_INT 4
84088: PUSH
84089: EMPTY
84090: LIST
84091: LIST
84092: PUSH
84093: LD_INT 3
84095: PUSH
84096: LD_INT 4
84098: PUSH
84099: EMPTY
84100: LIST
84101: LIST
84102: PUSH
84103: LD_INT 2
84105: PUSH
84106: LD_INT 3
84108: PUSH
84109: EMPTY
84110: LIST
84111: LIST
84112: PUSH
84113: LD_INT 2
84115: PUSH
84116: LD_INT 2
84118: PUSH
84119: EMPTY
84120: LIST
84121: LIST
84122: PUSH
84123: LD_INT 4
84125: PUSH
84126: LD_INT 2
84128: PUSH
84129: EMPTY
84130: LIST
84131: LIST
84132: PUSH
84133: LD_INT 2
84135: PUSH
84136: LD_INT 4
84138: PUSH
84139: EMPTY
84140: LIST
84141: LIST
84142: PUSH
84143: LD_INT 0
84145: PUSH
84146: LD_INT 4
84148: PUSH
84149: EMPTY
84150: LIST
84151: LIST
84152: PUSH
84153: LD_INT 0
84155: PUSH
84156: LD_INT 3
84158: PUSH
84159: EMPTY
84160: LIST
84161: LIST
84162: PUSH
84163: LD_INT 1
84165: PUSH
84166: LD_INT 4
84168: PUSH
84169: EMPTY
84170: LIST
84171: LIST
84172: PUSH
84173: LD_INT 1
84175: PUSH
84176: LD_INT 5
84178: PUSH
84179: EMPTY
84180: LIST
84181: LIST
84182: PUSH
84183: LD_INT 0
84185: PUSH
84186: LD_INT 5
84188: PUSH
84189: EMPTY
84190: LIST
84191: LIST
84192: PUSH
84193: LD_INT 1
84195: NEG
84196: PUSH
84197: LD_INT 4
84199: PUSH
84200: EMPTY
84201: LIST
84202: LIST
84203: PUSH
84204: LD_INT 1
84206: NEG
84207: PUSH
84208: LD_INT 3
84210: PUSH
84211: EMPTY
84212: LIST
84213: LIST
84214: PUSH
84215: LD_INT 2
84217: PUSH
84218: LD_INT 5
84220: PUSH
84221: EMPTY
84222: LIST
84223: LIST
84224: PUSH
84225: LD_INT 2
84227: NEG
84228: PUSH
84229: LD_INT 3
84231: PUSH
84232: EMPTY
84233: LIST
84234: LIST
84235: PUSH
84236: LD_INT 3
84238: NEG
84239: PUSH
84240: LD_INT 0
84242: PUSH
84243: EMPTY
84244: LIST
84245: LIST
84246: PUSH
84247: LD_INT 3
84249: NEG
84250: PUSH
84251: LD_INT 1
84253: NEG
84254: PUSH
84255: EMPTY
84256: LIST
84257: LIST
84258: PUSH
84259: LD_INT 2
84261: NEG
84262: PUSH
84263: LD_INT 0
84265: PUSH
84266: EMPTY
84267: LIST
84268: LIST
84269: PUSH
84270: LD_INT 2
84272: NEG
84273: PUSH
84274: LD_INT 1
84276: PUSH
84277: EMPTY
84278: LIST
84279: LIST
84280: PUSH
84281: LD_INT 3
84283: NEG
84284: PUSH
84285: LD_INT 1
84287: PUSH
84288: EMPTY
84289: LIST
84290: LIST
84291: PUSH
84292: LD_INT 4
84294: NEG
84295: PUSH
84296: LD_INT 0
84298: PUSH
84299: EMPTY
84300: LIST
84301: LIST
84302: PUSH
84303: LD_INT 4
84305: NEG
84306: PUSH
84307: LD_INT 1
84309: NEG
84310: PUSH
84311: EMPTY
84312: LIST
84313: LIST
84314: PUSH
84315: LD_INT 4
84317: NEG
84318: PUSH
84319: LD_INT 2
84321: NEG
84322: PUSH
84323: EMPTY
84324: LIST
84325: LIST
84326: PUSH
84327: LD_INT 2
84329: NEG
84330: PUSH
84331: LD_INT 2
84333: PUSH
84334: EMPTY
84335: LIST
84336: LIST
84337: PUSH
84338: LD_INT 4
84340: NEG
84341: PUSH
84342: LD_INT 4
84344: NEG
84345: PUSH
84346: EMPTY
84347: LIST
84348: LIST
84349: PUSH
84350: LD_INT 4
84352: NEG
84353: PUSH
84354: LD_INT 5
84356: NEG
84357: PUSH
84358: EMPTY
84359: LIST
84360: LIST
84361: PUSH
84362: LD_INT 3
84364: NEG
84365: PUSH
84366: LD_INT 4
84368: NEG
84369: PUSH
84370: EMPTY
84371: LIST
84372: LIST
84373: PUSH
84374: LD_INT 3
84376: NEG
84377: PUSH
84378: LD_INT 3
84380: NEG
84381: PUSH
84382: EMPTY
84383: LIST
84384: LIST
84385: PUSH
84386: LD_INT 4
84388: NEG
84389: PUSH
84390: LD_INT 3
84392: NEG
84393: PUSH
84394: EMPTY
84395: LIST
84396: LIST
84397: PUSH
84398: LD_INT 5
84400: NEG
84401: PUSH
84402: LD_INT 4
84404: NEG
84405: PUSH
84406: EMPTY
84407: LIST
84408: LIST
84409: PUSH
84410: LD_INT 5
84412: NEG
84413: PUSH
84414: LD_INT 5
84416: NEG
84417: PUSH
84418: EMPTY
84419: LIST
84420: LIST
84421: PUSH
84422: LD_INT 3
84424: NEG
84425: PUSH
84426: LD_INT 5
84428: NEG
84429: PUSH
84430: EMPTY
84431: LIST
84432: LIST
84433: PUSH
84434: LD_INT 5
84436: NEG
84437: PUSH
84438: LD_INT 3
84440: NEG
84441: PUSH
84442: EMPTY
84443: LIST
84444: LIST
84445: PUSH
84446: EMPTY
84447: LIST
84448: LIST
84449: LIST
84450: LIST
84451: LIST
84452: LIST
84453: LIST
84454: LIST
84455: LIST
84456: LIST
84457: LIST
84458: LIST
84459: LIST
84460: LIST
84461: LIST
84462: LIST
84463: LIST
84464: LIST
84465: LIST
84466: LIST
84467: LIST
84468: LIST
84469: LIST
84470: LIST
84471: LIST
84472: LIST
84473: LIST
84474: LIST
84475: LIST
84476: LIST
84477: LIST
84478: LIST
84479: LIST
84480: LIST
84481: LIST
84482: LIST
84483: LIST
84484: LIST
84485: LIST
84486: LIST
84487: LIST
84488: LIST
84489: LIST
84490: LIST
84491: LIST
84492: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
84493: LD_ADDR_VAR 0 30
84497: PUSH
84498: LD_INT 4
84500: PUSH
84501: LD_INT 4
84503: PUSH
84504: EMPTY
84505: LIST
84506: LIST
84507: PUSH
84508: LD_INT 4
84510: PUSH
84511: LD_INT 3
84513: PUSH
84514: EMPTY
84515: LIST
84516: LIST
84517: PUSH
84518: LD_INT 5
84520: PUSH
84521: LD_INT 4
84523: PUSH
84524: EMPTY
84525: LIST
84526: LIST
84527: PUSH
84528: LD_INT 5
84530: PUSH
84531: LD_INT 5
84533: PUSH
84534: EMPTY
84535: LIST
84536: LIST
84537: PUSH
84538: LD_INT 4
84540: PUSH
84541: LD_INT 5
84543: PUSH
84544: EMPTY
84545: LIST
84546: LIST
84547: PUSH
84548: LD_INT 3
84550: PUSH
84551: LD_INT 4
84553: PUSH
84554: EMPTY
84555: LIST
84556: LIST
84557: PUSH
84558: LD_INT 3
84560: PUSH
84561: LD_INT 3
84563: PUSH
84564: EMPTY
84565: LIST
84566: LIST
84567: PUSH
84568: LD_INT 5
84570: PUSH
84571: LD_INT 3
84573: PUSH
84574: EMPTY
84575: LIST
84576: LIST
84577: PUSH
84578: LD_INT 3
84580: PUSH
84581: LD_INT 5
84583: PUSH
84584: EMPTY
84585: LIST
84586: LIST
84587: PUSH
84588: LD_INT 0
84590: PUSH
84591: LD_INT 3
84593: PUSH
84594: EMPTY
84595: LIST
84596: LIST
84597: PUSH
84598: LD_INT 0
84600: PUSH
84601: LD_INT 2
84603: PUSH
84604: EMPTY
84605: LIST
84606: LIST
84607: PUSH
84608: LD_INT 1
84610: PUSH
84611: LD_INT 3
84613: PUSH
84614: EMPTY
84615: LIST
84616: LIST
84617: PUSH
84618: LD_INT 1
84620: PUSH
84621: LD_INT 4
84623: PUSH
84624: EMPTY
84625: LIST
84626: LIST
84627: PUSH
84628: LD_INT 0
84630: PUSH
84631: LD_INT 4
84633: PUSH
84634: EMPTY
84635: LIST
84636: LIST
84637: PUSH
84638: LD_INT 1
84640: NEG
84641: PUSH
84642: LD_INT 3
84644: PUSH
84645: EMPTY
84646: LIST
84647: LIST
84648: PUSH
84649: LD_INT 1
84651: NEG
84652: PUSH
84653: LD_INT 2
84655: PUSH
84656: EMPTY
84657: LIST
84658: LIST
84659: PUSH
84660: LD_INT 2
84662: PUSH
84663: LD_INT 4
84665: PUSH
84666: EMPTY
84667: LIST
84668: LIST
84669: PUSH
84670: LD_INT 2
84672: NEG
84673: PUSH
84674: LD_INT 2
84676: PUSH
84677: EMPTY
84678: LIST
84679: LIST
84680: PUSH
84681: LD_INT 4
84683: NEG
84684: PUSH
84685: LD_INT 0
84687: PUSH
84688: EMPTY
84689: LIST
84690: LIST
84691: PUSH
84692: LD_INT 4
84694: NEG
84695: PUSH
84696: LD_INT 1
84698: NEG
84699: PUSH
84700: EMPTY
84701: LIST
84702: LIST
84703: PUSH
84704: LD_INT 3
84706: NEG
84707: PUSH
84708: LD_INT 0
84710: PUSH
84711: EMPTY
84712: LIST
84713: LIST
84714: PUSH
84715: LD_INT 3
84717: NEG
84718: PUSH
84719: LD_INT 1
84721: PUSH
84722: EMPTY
84723: LIST
84724: LIST
84725: PUSH
84726: LD_INT 4
84728: NEG
84729: PUSH
84730: LD_INT 1
84732: PUSH
84733: EMPTY
84734: LIST
84735: LIST
84736: PUSH
84737: LD_INT 5
84739: NEG
84740: PUSH
84741: LD_INT 0
84743: PUSH
84744: EMPTY
84745: LIST
84746: LIST
84747: PUSH
84748: LD_INT 5
84750: NEG
84751: PUSH
84752: LD_INT 1
84754: NEG
84755: PUSH
84756: EMPTY
84757: LIST
84758: LIST
84759: PUSH
84760: LD_INT 5
84762: NEG
84763: PUSH
84764: LD_INT 2
84766: NEG
84767: PUSH
84768: EMPTY
84769: LIST
84770: LIST
84771: PUSH
84772: LD_INT 3
84774: NEG
84775: PUSH
84776: LD_INT 2
84778: PUSH
84779: EMPTY
84780: LIST
84781: LIST
84782: PUSH
84783: LD_INT 3
84785: NEG
84786: PUSH
84787: LD_INT 3
84789: NEG
84790: PUSH
84791: EMPTY
84792: LIST
84793: LIST
84794: PUSH
84795: LD_INT 3
84797: NEG
84798: PUSH
84799: LD_INT 4
84801: NEG
84802: PUSH
84803: EMPTY
84804: LIST
84805: LIST
84806: PUSH
84807: LD_INT 2
84809: NEG
84810: PUSH
84811: LD_INT 3
84813: NEG
84814: PUSH
84815: EMPTY
84816: LIST
84817: LIST
84818: PUSH
84819: LD_INT 2
84821: NEG
84822: PUSH
84823: LD_INT 2
84825: NEG
84826: PUSH
84827: EMPTY
84828: LIST
84829: LIST
84830: PUSH
84831: LD_INT 3
84833: NEG
84834: PUSH
84835: LD_INT 2
84837: NEG
84838: PUSH
84839: EMPTY
84840: LIST
84841: LIST
84842: PUSH
84843: LD_INT 4
84845: NEG
84846: PUSH
84847: LD_INT 3
84849: NEG
84850: PUSH
84851: EMPTY
84852: LIST
84853: LIST
84854: PUSH
84855: LD_INT 4
84857: NEG
84858: PUSH
84859: LD_INT 4
84861: NEG
84862: PUSH
84863: EMPTY
84864: LIST
84865: LIST
84866: PUSH
84867: LD_INT 2
84869: NEG
84870: PUSH
84871: LD_INT 4
84873: NEG
84874: PUSH
84875: EMPTY
84876: LIST
84877: LIST
84878: PUSH
84879: LD_INT 4
84881: NEG
84882: PUSH
84883: LD_INT 2
84885: NEG
84886: PUSH
84887: EMPTY
84888: LIST
84889: LIST
84890: PUSH
84891: LD_INT 0
84893: PUSH
84894: LD_INT 4
84896: NEG
84897: PUSH
84898: EMPTY
84899: LIST
84900: LIST
84901: PUSH
84902: LD_INT 0
84904: PUSH
84905: LD_INT 5
84907: NEG
84908: PUSH
84909: EMPTY
84910: LIST
84911: LIST
84912: PUSH
84913: LD_INT 1
84915: PUSH
84916: LD_INT 4
84918: NEG
84919: PUSH
84920: EMPTY
84921: LIST
84922: LIST
84923: PUSH
84924: LD_INT 1
84926: PUSH
84927: LD_INT 3
84929: NEG
84930: PUSH
84931: EMPTY
84932: LIST
84933: LIST
84934: PUSH
84935: LD_INT 0
84937: PUSH
84938: LD_INT 3
84940: NEG
84941: PUSH
84942: EMPTY
84943: LIST
84944: LIST
84945: PUSH
84946: LD_INT 1
84948: NEG
84949: PUSH
84950: LD_INT 4
84952: NEG
84953: PUSH
84954: EMPTY
84955: LIST
84956: LIST
84957: PUSH
84958: LD_INT 1
84960: NEG
84961: PUSH
84962: LD_INT 5
84964: NEG
84965: PUSH
84966: EMPTY
84967: LIST
84968: LIST
84969: PUSH
84970: LD_INT 2
84972: PUSH
84973: LD_INT 3
84975: NEG
84976: PUSH
84977: EMPTY
84978: LIST
84979: LIST
84980: PUSH
84981: LD_INT 2
84983: NEG
84984: PUSH
84985: LD_INT 5
84987: NEG
84988: PUSH
84989: EMPTY
84990: LIST
84991: LIST
84992: PUSH
84993: EMPTY
84994: LIST
84995: LIST
84996: LIST
84997: LIST
84998: LIST
84999: LIST
85000: LIST
85001: LIST
85002: LIST
85003: LIST
85004: LIST
85005: LIST
85006: LIST
85007: LIST
85008: LIST
85009: LIST
85010: LIST
85011: LIST
85012: LIST
85013: LIST
85014: LIST
85015: LIST
85016: LIST
85017: LIST
85018: LIST
85019: LIST
85020: LIST
85021: LIST
85022: LIST
85023: LIST
85024: LIST
85025: LIST
85026: LIST
85027: LIST
85028: LIST
85029: LIST
85030: LIST
85031: LIST
85032: LIST
85033: LIST
85034: LIST
85035: LIST
85036: LIST
85037: LIST
85038: LIST
85039: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
85040: LD_ADDR_VAR 0 31
85044: PUSH
85045: LD_INT 0
85047: PUSH
85048: LD_INT 4
85050: PUSH
85051: EMPTY
85052: LIST
85053: LIST
85054: PUSH
85055: LD_INT 0
85057: PUSH
85058: LD_INT 3
85060: PUSH
85061: EMPTY
85062: LIST
85063: LIST
85064: PUSH
85065: LD_INT 1
85067: PUSH
85068: LD_INT 4
85070: PUSH
85071: EMPTY
85072: LIST
85073: LIST
85074: PUSH
85075: LD_INT 1
85077: PUSH
85078: LD_INT 5
85080: PUSH
85081: EMPTY
85082: LIST
85083: LIST
85084: PUSH
85085: LD_INT 0
85087: PUSH
85088: LD_INT 5
85090: PUSH
85091: EMPTY
85092: LIST
85093: LIST
85094: PUSH
85095: LD_INT 1
85097: NEG
85098: PUSH
85099: LD_INT 4
85101: PUSH
85102: EMPTY
85103: LIST
85104: LIST
85105: PUSH
85106: LD_INT 1
85108: NEG
85109: PUSH
85110: LD_INT 3
85112: PUSH
85113: EMPTY
85114: LIST
85115: LIST
85116: PUSH
85117: LD_INT 2
85119: PUSH
85120: LD_INT 5
85122: PUSH
85123: EMPTY
85124: LIST
85125: LIST
85126: PUSH
85127: LD_INT 2
85129: NEG
85130: PUSH
85131: LD_INT 3
85133: PUSH
85134: EMPTY
85135: LIST
85136: LIST
85137: PUSH
85138: LD_INT 3
85140: NEG
85141: PUSH
85142: LD_INT 0
85144: PUSH
85145: EMPTY
85146: LIST
85147: LIST
85148: PUSH
85149: LD_INT 3
85151: NEG
85152: PUSH
85153: LD_INT 1
85155: NEG
85156: PUSH
85157: EMPTY
85158: LIST
85159: LIST
85160: PUSH
85161: LD_INT 2
85163: NEG
85164: PUSH
85165: LD_INT 0
85167: PUSH
85168: EMPTY
85169: LIST
85170: LIST
85171: PUSH
85172: LD_INT 2
85174: NEG
85175: PUSH
85176: LD_INT 1
85178: PUSH
85179: EMPTY
85180: LIST
85181: LIST
85182: PUSH
85183: LD_INT 3
85185: NEG
85186: PUSH
85187: LD_INT 1
85189: PUSH
85190: EMPTY
85191: LIST
85192: LIST
85193: PUSH
85194: LD_INT 4
85196: NEG
85197: PUSH
85198: LD_INT 0
85200: PUSH
85201: EMPTY
85202: LIST
85203: LIST
85204: PUSH
85205: LD_INT 4
85207: NEG
85208: PUSH
85209: LD_INT 1
85211: NEG
85212: PUSH
85213: EMPTY
85214: LIST
85215: LIST
85216: PUSH
85217: LD_INT 4
85219: NEG
85220: PUSH
85221: LD_INT 2
85223: NEG
85224: PUSH
85225: EMPTY
85226: LIST
85227: LIST
85228: PUSH
85229: LD_INT 2
85231: NEG
85232: PUSH
85233: LD_INT 2
85235: PUSH
85236: EMPTY
85237: LIST
85238: LIST
85239: PUSH
85240: LD_INT 4
85242: NEG
85243: PUSH
85244: LD_INT 4
85246: NEG
85247: PUSH
85248: EMPTY
85249: LIST
85250: LIST
85251: PUSH
85252: LD_INT 4
85254: NEG
85255: PUSH
85256: LD_INT 5
85258: NEG
85259: PUSH
85260: EMPTY
85261: LIST
85262: LIST
85263: PUSH
85264: LD_INT 3
85266: NEG
85267: PUSH
85268: LD_INT 4
85270: NEG
85271: PUSH
85272: EMPTY
85273: LIST
85274: LIST
85275: PUSH
85276: LD_INT 3
85278: NEG
85279: PUSH
85280: LD_INT 3
85282: NEG
85283: PUSH
85284: EMPTY
85285: LIST
85286: LIST
85287: PUSH
85288: LD_INT 4
85290: NEG
85291: PUSH
85292: LD_INT 3
85294: NEG
85295: PUSH
85296: EMPTY
85297: LIST
85298: LIST
85299: PUSH
85300: LD_INT 5
85302: NEG
85303: PUSH
85304: LD_INT 4
85306: NEG
85307: PUSH
85308: EMPTY
85309: LIST
85310: LIST
85311: PUSH
85312: LD_INT 5
85314: NEG
85315: PUSH
85316: LD_INT 5
85318: NEG
85319: PUSH
85320: EMPTY
85321: LIST
85322: LIST
85323: PUSH
85324: LD_INT 3
85326: NEG
85327: PUSH
85328: LD_INT 5
85330: NEG
85331: PUSH
85332: EMPTY
85333: LIST
85334: LIST
85335: PUSH
85336: LD_INT 5
85338: NEG
85339: PUSH
85340: LD_INT 3
85342: NEG
85343: PUSH
85344: EMPTY
85345: LIST
85346: LIST
85347: PUSH
85348: LD_INT 0
85350: PUSH
85351: LD_INT 3
85353: NEG
85354: PUSH
85355: EMPTY
85356: LIST
85357: LIST
85358: PUSH
85359: LD_INT 0
85361: PUSH
85362: LD_INT 4
85364: NEG
85365: PUSH
85366: EMPTY
85367: LIST
85368: LIST
85369: PUSH
85370: LD_INT 1
85372: PUSH
85373: LD_INT 3
85375: NEG
85376: PUSH
85377: EMPTY
85378: LIST
85379: LIST
85380: PUSH
85381: LD_INT 1
85383: PUSH
85384: LD_INT 2
85386: NEG
85387: PUSH
85388: EMPTY
85389: LIST
85390: LIST
85391: PUSH
85392: LD_INT 0
85394: PUSH
85395: LD_INT 2
85397: NEG
85398: PUSH
85399: EMPTY
85400: LIST
85401: LIST
85402: PUSH
85403: LD_INT 1
85405: NEG
85406: PUSH
85407: LD_INT 3
85409: NEG
85410: PUSH
85411: EMPTY
85412: LIST
85413: LIST
85414: PUSH
85415: LD_INT 1
85417: NEG
85418: PUSH
85419: LD_INT 4
85421: NEG
85422: PUSH
85423: EMPTY
85424: LIST
85425: LIST
85426: PUSH
85427: LD_INT 2
85429: PUSH
85430: LD_INT 2
85432: NEG
85433: PUSH
85434: EMPTY
85435: LIST
85436: LIST
85437: PUSH
85438: LD_INT 2
85440: NEG
85441: PUSH
85442: LD_INT 4
85444: NEG
85445: PUSH
85446: EMPTY
85447: LIST
85448: LIST
85449: PUSH
85450: LD_INT 4
85452: PUSH
85453: LD_INT 0
85455: PUSH
85456: EMPTY
85457: LIST
85458: LIST
85459: PUSH
85460: LD_INT 4
85462: PUSH
85463: LD_INT 1
85465: NEG
85466: PUSH
85467: EMPTY
85468: LIST
85469: LIST
85470: PUSH
85471: LD_INT 5
85473: PUSH
85474: LD_INT 0
85476: PUSH
85477: EMPTY
85478: LIST
85479: LIST
85480: PUSH
85481: LD_INT 5
85483: PUSH
85484: LD_INT 1
85486: PUSH
85487: EMPTY
85488: LIST
85489: LIST
85490: PUSH
85491: LD_INT 4
85493: PUSH
85494: LD_INT 1
85496: PUSH
85497: EMPTY
85498: LIST
85499: LIST
85500: PUSH
85501: LD_INT 3
85503: PUSH
85504: LD_INT 0
85506: PUSH
85507: EMPTY
85508: LIST
85509: LIST
85510: PUSH
85511: LD_INT 3
85513: PUSH
85514: LD_INT 1
85516: NEG
85517: PUSH
85518: EMPTY
85519: LIST
85520: LIST
85521: PUSH
85522: LD_INT 3
85524: PUSH
85525: LD_INT 2
85527: NEG
85528: PUSH
85529: EMPTY
85530: LIST
85531: LIST
85532: PUSH
85533: LD_INT 5
85535: PUSH
85536: LD_INT 2
85538: PUSH
85539: EMPTY
85540: LIST
85541: LIST
85542: PUSH
85543: EMPTY
85544: LIST
85545: LIST
85546: LIST
85547: LIST
85548: LIST
85549: LIST
85550: LIST
85551: LIST
85552: LIST
85553: LIST
85554: LIST
85555: LIST
85556: LIST
85557: LIST
85558: LIST
85559: LIST
85560: LIST
85561: LIST
85562: LIST
85563: LIST
85564: LIST
85565: LIST
85566: LIST
85567: LIST
85568: LIST
85569: LIST
85570: LIST
85571: LIST
85572: LIST
85573: LIST
85574: LIST
85575: LIST
85576: LIST
85577: LIST
85578: LIST
85579: LIST
85580: LIST
85581: LIST
85582: LIST
85583: LIST
85584: LIST
85585: LIST
85586: LIST
85587: LIST
85588: LIST
85589: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
85590: LD_ADDR_VAR 0 32
85594: PUSH
85595: LD_INT 4
85597: NEG
85598: PUSH
85599: LD_INT 0
85601: PUSH
85602: EMPTY
85603: LIST
85604: LIST
85605: PUSH
85606: LD_INT 4
85608: NEG
85609: PUSH
85610: LD_INT 1
85612: NEG
85613: PUSH
85614: EMPTY
85615: LIST
85616: LIST
85617: PUSH
85618: LD_INT 3
85620: NEG
85621: PUSH
85622: LD_INT 0
85624: PUSH
85625: EMPTY
85626: LIST
85627: LIST
85628: PUSH
85629: LD_INT 3
85631: NEG
85632: PUSH
85633: LD_INT 1
85635: PUSH
85636: EMPTY
85637: LIST
85638: LIST
85639: PUSH
85640: LD_INT 4
85642: NEG
85643: PUSH
85644: LD_INT 1
85646: PUSH
85647: EMPTY
85648: LIST
85649: LIST
85650: PUSH
85651: LD_INT 5
85653: NEG
85654: PUSH
85655: LD_INT 0
85657: PUSH
85658: EMPTY
85659: LIST
85660: LIST
85661: PUSH
85662: LD_INT 5
85664: NEG
85665: PUSH
85666: LD_INT 1
85668: NEG
85669: PUSH
85670: EMPTY
85671: LIST
85672: LIST
85673: PUSH
85674: LD_INT 5
85676: NEG
85677: PUSH
85678: LD_INT 2
85680: NEG
85681: PUSH
85682: EMPTY
85683: LIST
85684: LIST
85685: PUSH
85686: LD_INT 3
85688: NEG
85689: PUSH
85690: LD_INT 2
85692: PUSH
85693: EMPTY
85694: LIST
85695: LIST
85696: PUSH
85697: LD_INT 3
85699: NEG
85700: PUSH
85701: LD_INT 3
85703: NEG
85704: PUSH
85705: EMPTY
85706: LIST
85707: LIST
85708: PUSH
85709: LD_INT 3
85711: NEG
85712: PUSH
85713: LD_INT 4
85715: NEG
85716: PUSH
85717: EMPTY
85718: LIST
85719: LIST
85720: PUSH
85721: LD_INT 2
85723: NEG
85724: PUSH
85725: LD_INT 3
85727: NEG
85728: PUSH
85729: EMPTY
85730: LIST
85731: LIST
85732: PUSH
85733: LD_INT 2
85735: NEG
85736: PUSH
85737: LD_INT 2
85739: NEG
85740: PUSH
85741: EMPTY
85742: LIST
85743: LIST
85744: PUSH
85745: LD_INT 3
85747: NEG
85748: PUSH
85749: LD_INT 2
85751: NEG
85752: PUSH
85753: EMPTY
85754: LIST
85755: LIST
85756: PUSH
85757: LD_INT 4
85759: NEG
85760: PUSH
85761: LD_INT 3
85763: NEG
85764: PUSH
85765: EMPTY
85766: LIST
85767: LIST
85768: PUSH
85769: LD_INT 4
85771: NEG
85772: PUSH
85773: LD_INT 4
85775: NEG
85776: PUSH
85777: EMPTY
85778: LIST
85779: LIST
85780: PUSH
85781: LD_INT 2
85783: NEG
85784: PUSH
85785: LD_INT 4
85787: NEG
85788: PUSH
85789: EMPTY
85790: LIST
85791: LIST
85792: PUSH
85793: LD_INT 4
85795: NEG
85796: PUSH
85797: LD_INT 2
85799: NEG
85800: PUSH
85801: EMPTY
85802: LIST
85803: LIST
85804: PUSH
85805: LD_INT 0
85807: PUSH
85808: LD_INT 4
85810: NEG
85811: PUSH
85812: EMPTY
85813: LIST
85814: LIST
85815: PUSH
85816: LD_INT 0
85818: PUSH
85819: LD_INT 5
85821: NEG
85822: PUSH
85823: EMPTY
85824: LIST
85825: LIST
85826: PUSH
85827: LD_INT 1
85829: PUSH
85830: LD_INT 4
85832: NEG
85833: PUSH
85834: EMPTY
85835: LIST
85836: LIST
85837: PUSH
85838: LD_INT 1
85840: PUSH
85841: LD_INT 3
85843: NEG
85844: PUSH
85845: EMPTY
85846: LIST
85847: LIST
85848: PUSH
85849: LD_INT 0
85851: PUSH
85852: LD_INT 3
85854: NEG
85855: PUSH
85856: EMPTY
85857: LIST
85858: LIST
85859: PUSH
85860: LD_INT 1
85862: NEG
85863: PUSH
85864: LD_INT 4
85866: NEG
85867: PUSH
85868: EMPTY
85869: LIST
85870: LIST
85871: PUSH
85872: LD_INT 1
85874: NEG
85875: PUSH
85876: LD_INT 5
85878: NEG
85879: PUSH
85880: EMPTY
85881: LIST
85882: LIST
85883: PUSH
85884: LD_INT 2
85886: PUSH
85887: LD_INT 3
85889: NEG
85890: PUSH
85891: EMPTY
85892: LIST
85893: LIST
85894: PUSH
85895: LD_INT 2
85897: NEG
85898: PUSH
85899: LD_INT 5
85901: NEG
85902: PUSH
85903: EMPTY
85904: LIST
85905: LIST
85906: PUSH
85907: LD_INT 3
85909: PUSH
85910: LD_INT 0
85912: PUSH
85913: EMPTY
85914: LIST
85915: LIST
85916: PUSH
85917: LD_INT 3
85919: PUSH
85920: LD_INT 1
85922: NEG
85923: PUSH
85924: EMPTY
85925: LIST
85926: LIST
85927: PUSH
85928: LD_INT 4
85930: PUSH
85931: LD_INT 0
85933: PUSH
85934: EMPTY
85935: LIST
85936: LIST
85937: PUSH
85938: LD_INT 4
85940: PUSH
85941: LD_INT 1
85943: PUSH
85944: EMPTY
85945: LIST
85946: LIST
85947: PUSH
85948: LD_INT 3
85950: PUSH
85951: LD_INT 1
85953: PUSH
85954: EMPTY
85955: LIST
85956: LIST
85957: PUSH
85958: LD_INT 2
85960: PUSH
85961: LD_INT 0
85963: PUSH
85964: EMPTY
85965: LIST
85966: LIST
85967: PUSH
85968: LD_INT 2
85970: PUSH
85971: LD_INT 1
85973: NEG
85974: PUSH
85975: EMPTY
85976: LIST
85977: LIST
85978: PUSH
85979: LD_INT 2
85981: PUSH
85982: LD_INT 2
85984: NEG
85985: PUSH
85986: EMPTY
85987: LIST
85988: LIST
85989: PUSH
85990: LD_INT 4
85992: PUSH
85993: LD_INT 2
85995: PUSH
85996: EMPTY
85997: LIST
85998: LIST
85999: PUSH
86000: LD_INT 4
86002: PUSH
86003: LD_INT 4
86005: PUSH
86006: EMPTY
86007: LIST
86008: LIST
86009: PUSH
86010: LD_INT 4
86012: PUSH
86013: LD_INT 3
86015: PUSH
86016: EMPTY
86017: LIST
86018: LIST
86019: PUSH
86020: LD_INT 5
86022: PUSH
86023: LD_INT 4
86025: PUSH
86026: EMPTY
86027: LIST
86028: LIST
86029: PUSH
86030: LD_INT 5
86032: PUSH
86033: LD_INT 5
86035: PUSH
86036: EMPTY
86037: LIST
86038: LIST
86039: PUSH
86040: LD_INT 4
86042: PUSH
86043: LD_INT 5
86045: PUSH
86046: EMPTY
86047: LIST
86048: LIST
86049: PUSH
86050: LD_INT 3
86052: PUSH
86053: LD_INT 4
86055: PUSH
86056: EMPTY
86057: LIST
86058: LIST
86059: PUSH
86060: LD_INT 3
86062: PUSH
86063: LD_INT 3
86065: PUSH
86066: EMPTY
86067: LIST
86068: LIST
86069: PUSH
86070: LD_INT 5
86072: PUSH
86073: LD_INT 3
86075: PUSH
86076: EMPTY
86077: LIST
86078: LIST
86079: PUSH
86080: LD_INT 3
86082: PUSH
86083: LD_INT 5
86085: PUSH
86086: EMPTY
86087: LIST
86088: LIST
86089: PUSH
86090: EMPTY
86091: LIST
86092: LIST
86093: LIST
86094: LIST
86095: LIST
86096: LIST
86097: LIST
86098: LIST
86099: LIST
86100: LIST
86101: LIST
86102: LIST
86103: LIST
86104: LIST
86105: LIST
86106: LIST
86107: LIST
86108: LIST
86109: LIST
86110: LIST
86111: LIST
86112: LIST
86113: LIST
86114: LIST
86115: LIST
86116: LIST
86117: LIST
86118: LIST
86119: LIST
86120: LIST
86121: LIST
86122: LIST
86123: LIST
86124: LIST
86125: LIST
86126: LIST
86127: LIST
86128: LIST
86129: LIST
86130: LIST
86131: LIST
86132: LIST
86133: LIST
86134: LIST
86135: LIST
86136: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
86137: LD_ADDR_VAR 0 33
86141: PUSH
86142: LD_INT 4
86144: NEG
86145: PUSH
86146: LD_INT 4
86148: NEG
86149: PUSH
86150: EMPTY
86151: LIST
86152: LIST
86153: PUSH
86154: LD_INT 4
86156: NEG
86157: PUSH
86158: LD_INT 5
86160: NEG
86161: PUSH
86162: EMPTY
86163: LIST
86164: LIST
86165: PUSH
86166: LD_INT 3
86168: NEG
86169: PUSH
86170: LD_INT 4
86172: NEG
86173: PUSH
86174: EMPTY
86175: LIST
86176: LIST
86177: PUSH
86178: LD_INT 3
86180: NEG
86181: PUSH
86182: LD_INT 3
86184: NEG
86185: PUSH
86186: EMPTY
86187: LIST
86188: LIST
86189: PUSH
86190: LD_INT 4
86192: NEG
86193: PUSH
86194: LD_INT 3
86196: NEG
86197: PUSH
86198: EMPTY
86199: LIST
86200: LIST
86201: PUSH
86202: LD_INT 5
86204: NEG
86205: PUSH
86206: LD_INT 4
86208: NEG
86209: PUSH
86210: EMPTY
86211: LIST
86212: LIST
86213: PUSH
86214: LD_INT 5
86216: NEG
86217: PUSH
86218: LD_INT 5
86220: NEG
86221: PUSH
86222: EMPTY
86223: LIST
86224: LIST
86225: PUSH
86226: LD_INT 3
86228: NEG
86229: PUSH
86230: LD_INT 5
86232: NEG
86233: PUSH
86234: EMPTY
86235: LIST
86236: LIST
86237: PUSH
86238: LD_INT 5
86240: NEG
86241: PUSH
86242: LD_INT 3
86244: NEG
86245: PUSH
86246: EMPTY
86247: LIST
86248: LIST
86249: PUSH
86250: LD_INT 0
86252: PUSH
86253: LD_INT 3
86255: NEG
86256: PUSH
86257: EMPTY
86258: LIST
86259: LIST
86260: PUSH
86261: LD_INT 0
86263: PUSH
86264: LD_INT 4
86266: NEG
86267: PUSH
86268: EMPTY
86269: LIST
86270: LIST
86271: PUSH
86272: LD_INT 1
86274: PUSH
86275: LD_INT 3
86277: NEG
86278: PUSH
86279: EMPTY
86280: LIST
86281: LIST
86282: PUSH
86283: LD_INT 1
86285: PUSH
86286: LD_INT 2
86288: NEG
86289: PUSH
86290: EMPTY
86291: LIST
86292: LIST
86293: PUSH
86294: LD_INT 0
86296: PUSH
86297: LD_INT 2
86299: NEG
86300: PUSH
86301: EMPTY
86302: LIST
86303: LIST
86304: PUSH
86305: LD_INT 1
86307: NEG
86308: PUSH
86309: LD_INT 3
86311: NEG
86312: PUSH
86313: EMPTY
86314: LIST
86315: LIST
86316: PUSH
86317: LD_INT 1
86319: NEG
86320: PUSH
86321: LD_INT 4
86323: NEG
86324: PUSH
86325: EMPTY
86326: LIST
86327: LIST
86328: PUSH
86329: LD_INT 2
86331: PUSH
86332: LD_INT 2
86334: NEG
86335: PUSH
86336: EMPTY
86337: LIST
86338: LIST
86339: PUSH
86340: LD_INT 2
86342: NEG
86343: PUSH
86344: LD_INT 4
86346: NEG
86347: PUSH
86348: EMPTY
86349: LIST
86350: LIST
86351: PUSH
86352: LD_INT 4
86354: PUSH
86355: LD_INT 0
86357: PUSH
86358: EMPTY
86359: LIST
86360: LIST
86361: PUSH
86362: LD_INT 4
86364: PUSH
86365: LD_INT 1
86367: NEG
86368: PUSH
86369: EMPTY
86370: LIST
86371: LIST
86372: PUSH
86373: LD_INT 5
86375: PUSH
86376: LD_INT 0
86378: PUSH
86379: EMPTY
86380: LIST
86381: LIST
86382: PUSH
86383: LD_INT 5
86385: PUSH
86386: LD_INT 1
86388: PUSH
86389: EMPTY
86390: LIST
86391: LIST
86392: PUSH
86393: LD_INT 4
86395: PUSH
86396: LD_INT 1
86398: PUSH
86399: EMPTY
86400: LIST
86401: LIST
86402: PUSH
86403: LD_INT 3
86405: PUSH
86406: LD_INT 0
86408: PUSH
86409: EMPTY
86410: LIST
86411: LIST
86412: PUSH
86413: LD_INT 3
86415: PUSH
86416: LD_INT 1
86418: NEG
86419: PUSH
86420: EMPTY
86421: LIST
86422: LIST
86423: PUSH
86424: LD_INT 3
86426: PUSH
86427: LD_INT 2
86429: NEG
86430: PUSH
86431: EMPTY
86432: LIST
86433: LIST
86434: PUSH
86435: LD_INT 5
86437: PUSH
86438: LD_INT 2
86440: PUSH
86441: EMPTY
86442: LIST
86443: LIST
86444: PUSH
86445: LD_INT 3
86447: PUSH
86448: LD_INT 3
86450: PUSH
86451: EMPTY
86452: LIST
86453: LIST
86454: PUSH
86455: LD_INT 3
86457: PUSH
86458: LD_INT 2
86460: PUSH
86461: EMPTY
86462: LIST
86463: LIST
86464: PUSH
86465: LD_INT 4
86467: PUSH
86468: LD_INT 3
86470: PUSH
86471: EMPTY
86472: LIST
86473: LIST
86474: PUSH
86475: LD_INT 4
86477: PUSH
86478: LD_INT 4
86480: PUSH
86481: EMPTY
86482: LIST
86483: LIST
86484: PUSH
86485: LD_INT 3
86487: PUSH
86488: LD_INT 4
86490: PUSH
86491: EMPTY
86492: LIST
86493: LIST
86494: PUSH
86495: LD_INT 2
86497: PUSH
86498: LD_INT 3
86500: PUSH
86501: EMPTY
86502: LIST
86503: LIST
86504: PUSH
86505: LD_INT 2
86507: PUSH
86508: LD_INT 2
86510: PUSH
86511: EMPTY
86512: LIST
86513: LIST
86514: PUSH
86515: LD_INT 4
86517: PUSH
86518: LD_INT 2
86520: PUSH
86521: EMPTY
86522: LIST
86523: LIST
86524: PUSH
86525: LD_INT 2
86527: PUSH
86528: LD_INT 4
86530: PUSH
86531: EMPTY
86532: LIST
86533: LIST
86534: PUSH
86535: LD_INT 0
86537: PUSH
86538: LD_INT 4
86540: PUSH
86541: EMPTY
86542: LIST
86543: LIST
86544: PUSH
86545: LD_INT 0
86547: PUSH
86548: LD_INT 3
86550: PUSH
86551: EMPTY
86552: LIST
86553: LIST
86554: PUSH
86555: LD_INT 1
86557: PUSH
86558: LD_INT 4
86560: PUSH
86561: EMPTY
86562: LIST
86563: LIST
86564: PUSH
86565: LD_INT 1
86567: PUSH
86568: LD_INT 5
86570: PUSH
86571: EMPTY
86572: LIST
86573: LIST
86574: PUSH
86575: LD_INT 0
86577: PUSH
86578: LD_INT 5
86580: PUSH
86581: EMPTY
86582: LIST
86583: LIST
86584: PUSH
86585: LD_INT 1
86587: NEG
86588: PUSH
86589: LD_INT 4
86591: PUSH
86592: EMPTY
86593: LIST
86594: LIST
86595: PUSH
86596: LD_INT 1
86598: NEG
86599: PUSH
86600: LD_INT 3
86602: PUSH
86603: EMPTY
86604: LIST
86605: LIST
86606: PUSH
86607: LD_INT 2
86609: PUSH
86610: LD_INT 5
86612: PUSH
86613: EMPTY
86614: LIST
86615: LIST
86616: PUSH
86617: LD_INT 2
86619: NEG
86620: PUSH
86621: LD_INT 3
86623: PUSH
86624: EMPTY
86625: LIST
86626: LIST
86627: PUSH
86628: EMPTY
86629: LIST
86630: LIST
86631: LIST
86632: LIST
86633: LIST
86634: LIST
86635: LIST
86636: LIST
86637: LIST
86638: LIST
86639: LIST
86640: LIST
86641: LIST
86642: LIST
86643: LIST
86644: LIST
86645: LIST
86646: LIST
86647: LIST
86648: LIST
86649: LIST
86650: LIST
86651: LIST
86652: LIST
86653: LIST
86654: LIST
86655: LIST
86656: LIST
86657: LIST
86658: LIST
86659: LIST
86660: LIST
86661: LIST
86662: LIST
86663: LIST
86664: LIST
86665: LIST
86666: LIST
86667: LIST
86668: LIST
86669: LIST
86670: LIST
86671: LIST
86672: LIST
86673: LIST
86674: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
86675: LD_ADDR_VAR 0 34
86679: PUSH
86680: LD_INT 0
86682: PUSH
86683: LD_INT 4
86685: NEG
86686: PUSH
86687: EMPTY
86688: LIST
86689: LIST
86690: PUSH
86691: LD_INT 0
86693: PUSH
86694: LD_INT 5
86696: NEG
86697: PUSH
86698: EMPTY
86699: LIST
86700: LIST
86701: PUSH
86702: LD_INT 1
86704: PUSH
86705: LD_INT 4
86707: NEG
86708: PUSH
86709: EMPTY
86710: LIST
86711: LIST
86712: PUSH
86713: LD_INT 1
86715: PUSH
86716: LD_INT 3
86718: NEG
86719: PUSH
86720: EMPTY
86721: LIST
86722: LIST
86723: PUSH
86724: LD_INT 0
86726: PUSH
86727: LD_INT 3
86729: NEG
86730: PUSH
86731: EMPTY
86732: LIST
86733: LIST
86734: PUSH
86735: LD_INT 1
86737: NEG
86738: PUSH
86739: LD_INT 4
86741: NEG
86742: PUSH
86743: EMPTY
86744: LIST
86745: LIST
86746: PUSH
86747: LD_INT 1
86749: NEG
86750: PUSH
86751: LD_INT 5
86753: NEG
86754: PUSH
86755: EMPTY
86756: LIST
86757: LIST
86758: PUSH
86759: LD_INT 2
86761: PUSH
86762: LD_INT 3
86764: NEG
86765: PUSH
86766: EMPTY
86767: LIST
86768: LIST
86769: PUSH
86770: LD_INT 2
86772: NEG
86773: PUSH
86774: LD_INT 5
86776: NEG
86777: PUSH
86778: EMPTY
86779: LIST
86780: LIST
86781: PUSH
86782: LD_INT 3
86784: PUSH
86785: LD_INT 0
86787: PUSH
86788: EMPTY
86789: LIST
86790: LIST
86791: PUSH
86792: LD_INT 3
86794: PUSH
86795: LD_INT 1
86797: NEG
86798: PUSH
86799: EMPTY
86800: LIST
86801: LIST
86802: PUSH
86803: LD_INT 4
86805: PUSH
86806: LD_INT 0
86808: PUSH
86809: EMPTY
86810: LIST
86811: LIST
86812: PUSH
86813: LD_INT 4
86815: PUSH
86816: LD_INT 1
86818: PUSH
86819: EMPTY
86820: LIST
86821: LIST
86822: PUSH
86823: LD_INT 3
86825: PUSH
86826: LD_INT 1
86828: PUSH
86829: EMPTY
86830: LIST
86831: LIST
86832: PUSH
86833: LD_INT 2
86835: PUSH
86836: LD_INT 0
86838: PUSH
86839: EMPTY
86840: LIST
86841: LIST
86842: PUSH
86843: LD_INT 2
86845: PUSH
86846: LD_INT 1
86848: NEG
86849: PUSH
86850: EMPTY
86851: LIST
86852: LIST
86853: PUSH
86854: LD_INT 2
86856: PUSH
86857: LD_INT 2
86859: NEG
86860: PUSH
86861: EMPTY
86862: LIST
86863: LIST
86864: PUSH
86865: LD_INT 4
86867: PUSH
86868: LD_INT 2
86870: PUSH
86871: EMPTY
86872: LIST
86873: LIST
86874: PUSH
86875: LD_INT 4
86877: PUSH
86878: LD_INT 4
86880: PUSH
86881: EMPTY
86882: LIST
86883: LIST
86884: PUSH
86885: LD_INT 4
86887: PUSH
86888: LD_INT 3
86890: PUSH
86891: EMPTY
86892: LIST
86893: LIST
86894: PUSH
86895: LD_INT 5
86897: PUSH
86898: LD_INT 4
86900: PUSH
86901: EMPTY
86902: LIST
86903: LIST
86904: PUSH
86905: LD_INT 5
86907: PUSH
86908: LD_INT 5
86910: PUSH
86911: EMPTY
86912: LIST
86913: LIST
86914: PUSH
86915: LD_INT 4
86917: PUSH
86918: LD_INT 5
86920: PUSH
86921: EMPTY
86922: LIST
86923: LIST
86924: PUSH
86925: LD_INT 3
86927: PUSH
86928: LD_INT 4
86930: PUSH
86931: EMPTY
86932: LIST
86933: LIST
86934: PUSH
86935: LD_INT 3
86937: PUSH
86938: LD_INT 3
86940: PUSH
86941: EMPTY
86942: LIST
86943: LIST
86944: PUSH
86945: LD_INT 5
86947: PUSH
86948: LD_INT 3
86950: PUSH
86951: EMPTY
86952: LIST
86953: LIST
86954: PUSH
86955: LD_INT 3
86957: PUSH
86958: LD_INT 5
86960: PUSH
86961: EMPTY
86962: LIST
86963: LIST
86964: PUSH
86965: LD_INT 0
86967: PUSH
86968: LD_INT 3
86970: PUSH
86971: EMPTY
86972: LIST
86973: LIST
86974: PUSH
86975: LD_INT 0
86977: PUSH
86978: LD_INT 2
86980: PUSH
86981: EMPTY
86982: LIST
86983: LIST
86984: PUSH
86985: LD_INT 1
86987: PUSH
86988: LD_INT 3
86990: PUSH
86991: EMPTY
86992: LIST
86993: LIST
86994: PUSH
86995: LD_INT 1
86997: PUSH
86998: LD_INT 4
87000: PUSH
87001: EMPTY
87002: LIST
87003: LIST
87004: PUSH
87005: LD_INT 0
87007: PUSH
87008: LD_INT 4
87010: PUSH
87011: EMPTY
87012: LIST
87013: LIST
87014: PUSH
87015: LD_INT 1
87017: NEG
87018: PUSH
87019: LD_INT 3
87021: PUSH
87022: EMPTY
87023: LIST
87024: LIST
87025: PUSH
87026: LD_INT 1
87028: NEG
87029: PUSH
87030: LD_INT 2
87032: PUSH
87033: EMPTY
87034: LIST
87035: LIST
87036: PUSH
87037: LD_INT 2
87039: PUSH
87040: LD_INT 4
87042: PUSH
87043: EMPTY
87044: LIST
87045: LIST
87046: PUSH
87047: LD_INT 2
87049: NEG
87050: PUSH
87051: LD_INT 2
87053: PUSH
87054: EMPTY
87055: LIST
87056: LIST
87057: PUSH
87058: LD_INT 4
87060: NEG
87061: PUSH
87062: LD_INT 0
87064: PUSH
87065: EMPTY
87066: LIST
87067: LIST
87068: PUSH
87069: LD_INT 4
87071: NEG
87072: PUSH
87073: LD_INT 1
87075: NEG
87076: PUSH
87077: EMPTY
87078: LIST
87079: LIST
87080: PUSH
87081: LD_INT 3
87083: NEG
87084: PUSH
87085: LD_INT 0
87087: PUSH
87088: EMPTY
87089: LIST
87090: LIST
87091: PUSH
87092: LD_INT 3
87094: NEG
87095: PUSH
87096: LD_INT 1
87098: PUSH
87099: EMPTY
87100: LIST
87101: LIST
87102: PUSH
87103: LD_INT 4
87105: NEG
87106: PUSH
87107: LD_INT 1
87109: PUSH
87110: EMPTY
87111: LIST
87112: LIST
87113: PUSH
87114: LD_INT 5
87116: NEG
87117: PUSH
87118: LD_INT 0
87120: PUSH
87121: EMPTY
87122: LIST
87123: LIST
87124: PUSH
87125: LD_INT 5
87127: NEG
87128: PUSH
87129: LD_INT 1
87131: NEG
87132: PUSH
87133: EMPTY
87134: LIST
87135: LIST
87136: PUSH
87137: LD_INT 5
87139: NEG
87140: PUSH
87141: LD_INT 2
87143: NEG
87144: PUSH
87145: EMPTY
87146: LIST
87147: LIST
87148: PUSH
87149: LD_INT 3
87151: NEG
87152: PUSH
87153: LD_INT 2
87155: PUSH
87156: EMPTY
87157: LIST
87158: LIST
87159: PUSH
87160: EMPTY
87161: LIST
87162: LIST
87163: LIST
87164: LIST
87165: LIST
87166: LIST
87167: LIST
87168: LIST
87169: LIST
87170: LIST
87171: LIST
87172: LIST
87173: LIST
87174: LIST
87175: LIST
87176: LIST
87177: LIST
87178: LIST
87179: LIST
87180: LIST
87181: LIST
87182: LIST
87183: LIST
87184: LIST
87185: LIST
87186: LIST
87187: LIST
87188: LIST
87189: LIST
87190: LIST
87191: LIST
87192: LIST
87193: LIST
87194: LIST
87195: LIST
87196: LIST
87197: LIST
87198: LIST
87199: LIST
87200: LIST
87201: LIST
87202: LIST
87203: LIST
87204: LIST
87205: LIST
87206: ST_TO_ADDR
// end ; end ;
87207: GO 87210
87209: POP
// case btype of b_depot , b_warehouse :
87210: LD_VAR 0 1
87214: PUSH
87215: LD_INT 0
87217: DOUBLE
87218: EQUAL
87219: IFTRUE 87229
87221: LD_INT 1
87223: DOUBLE
87224: EQUAL
87225: IFTRUE 87229
87227: GO 87430
87229: POP
// case nation of nation_american :
87230: LD_VAR 0 5
87234: PUSH
87235: LD_INT 1
87237: DOUBLE
87238: EQUAL
87239: IFTRUE 87243
87241: GO 87299
87243: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
87244: LD_ADDR_VAR 0 9
87248: PUSH
87249: LD_VAR 0 11
87253: PUSH
87254: LD_VAR 0 12
87258: PUSH
87259: LD_VAR 0 13
87263: PUSH
87264: LD_VAR 0 14
87268: PUSH
87269: LD_VAR 0 15
87273: PUSH
87274: LD_VAR 0 16
87278: PUSH
87279: EMPTY
87280: LIST
87281: LIST
87282: LIST
87283: LIST
87284: LIST
87285: LIST
87286: PUSH
87287: LD_VAR 0 4
87291: PUSH
87292: LD_INT 1
87294: PLUS
87295: ARRAY
87296: ST_TO_ADDR
87297: GO 87428
87299: LD_INT 2
87301: DOUBLE
87302: EQUAL
87303: IFTRUE 87307
87305: GO 87363
87307: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
87308: LD_ADDR_VAR 0 9
87312: PUSH
87313: LD_VAR 0 17
87317: PUSH
87318: LD_VAR 0 18
87322: PUSH
87323: LD_VAR 0 19
87327: PUSH
87328: LD_VAR 0 20
87332: PUSH
87333: LD_VAR 0 21
87337: PUSH
87338: LD_VAR 0 22
87342: PUSH
87343: EMPTY
87344: LIST
87345: LIST
87346: LIST
87347: LIST
87348: LIST
87349: LIST
87350: PUSH
87351: LD_VAR 0 4
87355: PUSH
87356: LD_INT 1
87358: PLUS
87359: ARRAY
87360: ST_TO_ADDR
87361: GO 87428
87363: LD_INT 3
87365: DOUBLE
87366: EQUAL
87367: IFTRUE 87371
87369: GO 87427
87371: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
87372: LD_ADDR_VAR 0 9
87376: PUSH
87377: LD_VAR 0 23
87381: PUSH
87382: LD_VAR 0 24
87386: PUSH
87387: LD_VAR 0 25
87391: PUSH
87392: LD_VAR 0 26
87396: PUSH
87397: LD_VAR 0 27
87401: PUSH
87402: LD_VAR 0 28
87406: PUSH
87407: EMPTY
87408: LIST
87409: LIST
87410: LIST
87411: LIST
87412: LIST
87413: LIST
87414: PUSH
87415: LD_VAR 0 4
87419: PUSH
87420: LD_INT 1
87422: PLUS
87423: ARRAY
87424: ST_TO_ADDR
87425: GO 87428
87427: POP
87428: GO 87983
87430: LD_INT 2
87432: DOUBLE
87433: EQUAL
87434: IFTRUE 87444
87436: LD_INT 3
87438: DOUBLE
87439: EQUAL
87440: IFTRUE 87444
87442: GO 87500
87444: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
87445: LD_ADDR_VAR 0 9
87449: PUSH
87450: LD_VAR 0 29
87454: PUSH
87455: LD_VAR 0 30
87459: PUSH
87460: LD_VAR 0 31
87464: PUSH
87465: LD_VAR 0 32
87469: PUSH
87470: LD_VAR 0 33
87474: PUSH
87475: LD_VAR 0 34
87479: PUSH
87480: EMPTY
87481: LIST
87482: LIST
87483: LIST
87484: LIST
87485: LIST
87486: LIST
87487: PUSH
87488: LD_VAR 0 4
87492: PUSH
87493: LD_INT 1
87495: PLUS
87496: ARRAY
87497: ST_TO_ADDR
87498: GO 87983
87500: LD_INT 16
87502: DOUBLE
87503: EQUAL
87504: IFTRUE 87562
87506: LD_INT 17
87508: DOUBLE
87509: EQUAL
87510: IFTRUE 87562
87512: LD_INT 18
87514: DOUBLE
87515: EQUAL
87516: IFTRUE 87562
87518: LD_INT 19
87520: DOUBLE
87521: EQUAL
87522: IFTRUE 87562
87524: LD_INT 22
87526: DOUBLE
87527: EQUAL
87528: IFTRUE 87562
87530: LD_INT 20
87532: DOUBLE
87533: EQUAL
87534: IFTRUE 87562
87536: LD_INT 21
87538: DOUBLE
87539: EQUAL
87540: IFTRUE 87562
87542: LD_INT 23
87544: DOUBLE
87545: EQUAL
87546: IFTRUE 87562
87548: LD_INT 24
87550: DOUBLE
87551: EQUAL
87552: IFTRUE 87562
87554: LD_INT 25
87556: DOUBLE
87557: EQUAL
87558: IFTRUE 87562
87560: GO 87618
87562: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
87563: LD_ADDR_VAR 0 9
87567: PUSH
87568: LD_VAR 0 35
87572: PUSH
87573: LD_VAR 0 36
87577: PUSH
87578: LD_VAR 0 37
87582: PUSH
87583: LD_VAR 0 38
87587: PUSH
87588: LD_VAR 0 39
87592: PUSH
87593: LD_VAR 0 40
87597: PUSH
87598: EMPTY
87599: LIST
87600: LIST
87601: LIST
87602: LIST
87603: LIST
87604: LIST
87605: PUSH
87606: LD_VAR 0 4
87610: PUSH
87611: LD_INT 1
87613: PLUS
87614: ARRAY
87615: ST_TO_ADDR
87616: GO 87983
87618: LD_INT 6
87620: DOUBLE
87621: EQUAL
87622: IFTRUE 87674
87624: LD_INT 7
87626: DOUBLE
87627: EQUAL
87628: IFTRUE 87674
87630: LD_INT 8
87632: DOUBLE
87633: EQUAL
87634: IFTRUE 87674
87636: LD_INT 13
87638: DOUBLE
87639: EQUAL
87640: IFTRUE 87674
87642: LD_INT 12
87644: DOUBLE
87645: EQUAL
87646: IFTRUE 87674
87648: LD_INT 15
87650: DOUBLE
87651: EQUAL
87652: IFTRUE 87674
87654: LD_INT 11
87656: DOUBLE
87657: EQUAL
87658: IFTRUE 87674
87660: LD_INT 14
87662: DOUBLE
87663: EQUAL
87664: IFTRUE 87674
87666: LD_INT 10
87668: DOUBLE
87669: EQUAL
87670: IFTRUE 87674
87672: GO 87730
87674: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
87675: LD_ADDR_VAR 0 9
87679: PUSH
87680: LD_VAR 0 41
87684: PUSH
87685: LD_VAR 0 42
87689: PUSH
87690: LD_VAR 0 43
87694: PUSH
87695: LD_VAR 0 44
87699: PUSH
87700: LD_VAR 0 45
87704: PUSH
87705: LD_VAR 0 46
87709: PUSH
87710: EMPTY
87711: LIST
87712: LIST
87713: LIST
87714: LIST
87715: LIST
87716: LIST
87717: PUSH
87718: LD_VAR 0 4
87722: PUSH
87723: LD_INT 1
87725: PLUS
87726: ARRAY
87727: ST_TO_ADDR
87728: GO 87983
87730: LD_INT 36
87732: DOUBLE
87733: EQUAL
87734: IFTRUE 87738
87736: GO 87794
87738: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
87739: LD_ADDR_VAR 0 9
87743: PUSH
87744: LD_VAR 0 47
87748: PUSH
87749: LD_VAR 0 48
87753: PUSH
87754: LD_VAR 0 49
87758: PUSH
87759: LD_VAR 0 50
87763: PUSH
87764: LD_VAR 0 51
87768: PUSH
87769: LD_VAR 0 52
87773: PUSH
87774: EMPTY
87775: LIST
87776: LIST
87777: LIST
87778: LIST
87779: LIST
87780: LIST
87781: PUSH
87782: LD_VAR 0 4
87786: PUSH
87787: LD_INT 1
87789: PLUS
87790: ARRAY
87791: ST_TO_ADDR
87792: GO 87983
87794: LD_INT 4
87796: DOUBLE
87797: EQUAL
87798: IFTRUE 87820
87800: LD_INT 5
87802: DOUBLE
87803: EQUAL
87804: IFTRUE 87820
87806: LD_INT 34
87808: DOUBLE
87809: EQUAL
87810: IFTRUE 87820
87812: LD_INT 37
87814: DOUBLE
87815: EQUAL
87816: IFTRUE 87820
87818: GO 87876
87820: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
87821: LD_ADDR_VAR 0 9
87825: PUSH
87826: LD_VAR 0 53
87830: PUSH
87831: LD_VAR 0 54
87835: PUSH
87836: LD_VAR 0 55
87840: PUSH
87841: LD_VAR 0 56
87845: PUSH
87846: LD_VAR 0 57
87850: PUSH
87851: LD_VAR 0 58
87855: PUSH
87856: EMPTY
87857: LIST
87858: LIST
87859: LIST
87860: LIST
87861: LIST
87862: LIST
87863: PUSH
87864: LD_VAR 0 4
87868: PUSH
87869: LD_INT 1
87871: PLUS
87872: ARRAY
87873: ST_TO_ADDR
87874: GO 87983
87876: LD_INT 31
87878: DOUBLE
87879: EQUAL
87880: IFTRUE 87926
87882: LD_INT 32
87884: DOUBLE
87885: EQUAL
87886: IFTRUE 87926
87888: LD_INT 33
87890: DOUBLE
87891: EQUAL
87892: IFTRUE 87926
87894: LD_INT 27
87896: DOUBLE
87897: EQUAL
87898: IFTRUE 87926
87900: LD_INT 26
87902: DOUBLE
87903: EQUAL
87904: IFTRUE 87926
87906: LD_INT 28
87908: DOUBLE
87909: EQUAL
87910: IFTRUE 87926
87912: LD_INT 29
87914: DOUBLE
87915: EQUAL
87916: IFTRUE 87926
87918: LD_INT 30
87920: DOUBLE
87921: EQUAL
87922: IFTRUE 87926
87924: GO 87982
87926: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
87927: LD_ADDR_VAR 0 9
87931: PUSH
87932: LD_VAR 0 59
87936: PUSH
87937: LD_VAR 0 60
87941: PUSH
87942: LD_VAR 0 61
87946: PUSH
87947: LD_VAR 0 62
87951: PUSH
87952: LD_VAR 0 63
87956: PUSH
87957: LD_VAR 0 64
87961: PUSH
87962: EMPTY
87963: LIST
87964: LIST
87965: LIST
87966: LIST
87967: LIST
87968: LIST
87969: PUSH
87970: LD_VAR 0 4
87974: PUSH
87975: LD_INT 1
87977: PLUS
87978: ARRAY
87979: ST_TO_ADDR
87980: GO 87983
87982: POP
// temp_list2 = [ ] ;
87983: LD_ADDR_VAR 0 10
87987: PUSH
87988: EMPTY
87989: ST_TO_ADDR
// for i in temp_list do
87990: LD_ADDR_VAR 0 8
87994: PUSH
87995: LD_VAR 0 9
87999: PUSH
88000: FOR_IN
88001: IFFALSE 88053
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
88003: LD_ADDR_VAR 0 10
88007: PUSH
88008: LD_VAR 0 10
88012: PUSH
88013: LD_VAR 0 8
88017: PUSH
88018: LD_INT 1
88020: ARRAY
88021: PUSH
88022: LD_VAR 0 2
88026: PLUS
88027: PUSH
88028: LD_VAR 0 8
88032: PUSH
88033: LD_INT 2
88035: ARRAY
88036: PUSH
88037: LD_VAR 0 3
88041: PLUS
88042: PUSH
88043: EMPTY
88044: LIST
88045: LIST
88046: PUSH
88047: EMPTY
88048: LIST
88049: ADD
88050: ST_TO_ADDR
88051: GO 88000
88053: POP
88054: POP
// result = temp_list2 ;
88055: LD_ADDR_VAR 0 7
88059: PUSH
88060: LD_VAR 0 10
88064: ST_TO_ADDR
// end ;
88065: LD_VAR 0 7
88069: RET
// export function EnemyInRange ( unit , dist ) ; begin
88070: LD_INT 0
88072: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
88073: LD_ADDR_VAR 0 3
88077: PUSH
88078: LD_VAR 0 1
88082: PPUSH
88083: CALL_OW 255
88087: PPUSH
88088: LD_VAR 0 1
88092: PPUSH
88093: CALL_OW 250
88097: PPUSH
88098: LD_VAR 0 1
88102: PPUSH
88103: CALL_OW 251
88107: PPUSH
88108: LD_VAR 0 2
88112: PPUSH
88113: CALL 61443 0 4
88117: PUSH
88118: LD_INT 4
88120: ARRAY
88121: ST_TO_ADDR
// end ;
88122: LD_VAR 0 3
88126: RET
// export function PlayerSeeMe ( unit ) ; begin
88127: LD_INT 0
88129: PPUSH
// result := See ( your_side , unit ) ;
88130: LD_ADDR_VAR 0 2
88134: PUSH
88135: LD_OWVAR 2
88139: PPUSH
88140: LD_VAR 0 1
88144: PPUSH
88145: CALL_OW 292
88149: ST_TO_ADDR
// end ;
88150: LD_VAR 0 2
88154: RET
// export function ReverseDir ( unit ) ; begin
88155: LD_INT 0
88157: PPUSH
// if not unit then
88158: LD_VAR 0 1
88162: NOT
88163: IFFALSE 88167
// exit ;
88165: GO 88190
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
88167: LD_ADDR_VAR 0 2
88171: PUSH
88172: LD_VAR 0 1
88176: PPUSH
88177: CALL_OW 254
88181: PUSH
88182: LD_INT 3
88184: PLUS
88185: PUSH
88186: LD_INT 6
88188: MOD
88189: ST_TO_ADDR
// end ;
88190: LD_VAR 0 2
88194: RET
// export function ReverseArray ( array ) ; var i ; begin
88195: LD_INT 0
88197: PPUSH
88198: PPUSH
// if not array then
88199: LD_VAR 0 1
88203: NOT
88204: IFFALSE 88208
// exit ;
88206: GO 88263
// result := [ ] ;
88208: LD_ADDR_VAR 0 2
88212: PUSH
88213: EMPTY
88214: ST_TO_ADDR
// for i := array downto 1 do
88215: LD_ADDR_VAR 0 3
88219: PUSH
88220: DOUBLE
88221: LD_VAR 0 1
88225: INC
88226: ST_TO_ADDR
88227: LD_INT 1
88229: PUSH
88230: FOR_DOWNTO
88231: IFFALSE 88261
// result := Join ( result , array [ i ] ) ;
88233: LD_ADDR_VAR 0 2
88237: PUSH
88238: LD_VAR 0 2
88242: PPUSH
88243: LD_VAR 0 1
88247: PUSH
88248: LD_VAR 0 3
88252: ARRAY
88253: PPUSH
88254: CALL 92928 0 2
88258: ST_TO_ADDR
88259: GO 88230
88261: POP
88262: POP
// end ;
88263: LD_VAR 0 2
88267: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
88268: LD_INT 0
88270: PPUSH
88271: PPUSH
88272: PPUSH
88273: PPUSH
88274: PPUSH
88275: PPUSH
// if not unit or not hexes then
88276: LD_VAR 0 1
88280: NOT
88281: PUSH
88282: LD_VAR 0 2
88286: NOT
88287: OR
88288: IFFALSE 88292
// exit ;
88290: GO 88415
// dist := 9999 ;
88292: LD_ADDR_VAR 0 5
88296: PUSH
88297: LD_INT 9999
88299: ST_TO_ADDR
// for i = 1 to hexes do
88300: LD_ADDR_VAR 0 4
88304: PUSH
88305: DOUBLE
88306: LD_INT 1
88308: DEC
88309: ST_TO_ADDR
88310: LD_VAR 0 2
88314: PUSH
88315: FOR_TO
88316: IFFALSE 88403
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
88318: LD_ADDR_VAR 0 6
88322: PUSH
88323: LD_VAR 0 1
88327: PPUSH
88328: LD_VAR 0 2
88332: PUSH
88333: LD_VAR 0 4
88337: ARRAY
88338: PUSH
88339: LD_INT 1
88341: ARRAY
88342: PPUSH
88343: LD_VAR 0 2
88347: PUSH
88348: LD_VAR 0 4
88352: ARRAY
88353: PUSH
88354: LD_INT 2
88356: ARRAY
88357: PPUSH
88358: CALL_OW 297
88362: ST_TO_ADDR
// if tdist < dist then
88363: LD_VAR 0 6
88367: PUSH
88368: LD_VAR 0 5
88372: LESS
88373: IFFALSE 88401
// begin hex := hexes [ i ] ;
88375: LD_ADDR_VAR 0 8
88379: PUSH
88380: LD_VAR 0 2
88384: PUSH
88385: LD_VAR 0 4
88389: ARRAY
88390: ST_TO_ADDR
// dist := tdist ;
88391: LD_ADDR_VAR 0 5
88395: PUSH
88396: LD_VAR 0 6
88400: ST_TO_ADDR
// end ; end ;
88401: GO 88315
88403: POP
88404: POP
// result := hex ;
88405: LD_ADDR_VAR 0 3
88409: PUSH
88410: LD_VAR 0 8
88414: ST_TO_ADDR
// end ;
88415: LD_VAR 0 3
88419: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
88420: LD_INT 0
88422: PPUSH
88423: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
88424: LD_VAR 0 1
88428: NOT
88429: PUSH
88430: LD_VAR 0 1
88434: PUSH
88435: LD_INT 21
88437: PUSH
88438: LD_INT 2
88440: PUSH
88441: EMPTY
88442: LIST
88443: LIST
88444: PUSH
88445: LD_INT 23
88447: PUSH
88448: LD_INT 2
88450: PUSH
88451: EMPTY
88452: LIST
88453: LIST
88454: PUSH
88455: EMPTY
88456: LIST
88457: LIST
88458: PPUSH
88459: CALL_OW 69
88463: IN
88464: NOT
88465: OR
88466: IFFALSE 88470
// exit ;
88468: GO 88517
// for i = 1 to 3 do
88470: LD_ADDR_VAR 0 3
88474: PUSH
88475: DOUBLE
88476: LD_INT 1
88478: DEC
88479: ST_TO_ADDR
88480: LD_INT 3
88482: PUSH
88483: FOR_TO
88484: IFFALSE 88515
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
88486: LD_VAR 0 1
88490: PPUSH
88491: CALL_OW 250
88495: PPUSH
88496: LD_VAR 0 1
88500: PPUSH
88501: CALL_OW 251
88505: PPUSH
88506: LD_INT 1
88508: PPUSH
88509: CALL_OW 453
88513: GO 88483
88515: POP
88516: POP
// end ;
88517: LD_VAR 0 2
88521: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
88522: LD_INT 0
88524: PPUSH
88525: PPUSH
88526: PPUSH
88527: PPUSH
88528: PPUSH
88529: PPUSH
// if not unit or not enemy_unit then
88530: LD_VAR 0 1
88534: NOT
88535: PUSH
88536: LD_VAR 0 2
88540: NOT
88541: OR
88542: IFFALSE 88546
// exit ;
88544: GO 89013
// if GetLives ( i ) < 250 then
88546: LD_VAR 0 4
88550: PPUSH
88551: CALL_OW 256
88555: PUSH
88556: LD_INT 250
88558: LESS
88559: IFFALSE 88572
// begin ComAutodestruct ( i ) ;
88561: LD_VAR 0 4
88565: PPUSH
88566: CALL 88420 0 1
// exit ;
88570: GO 89013
// end ; x := GetX ( enemy_unit ) ;
88572: LD_ADDR_VAR 0 7
88576: PUSH
88577: LD_VAR 0 2
88581: PPUSH
88582: CALL_OW 250
88586: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
88587: LD_ADDR_VAR 0 8
88591: PUSH
88592: LD_VAR 0 2
88596: PPUSH
88597: CALL_OW 251
88601: ST_TO_ADDR
// if not x or not y then
88602: LD_VAR 0 7
88606: NOT
88607: PUSH
88608: LD_VAR 0 8
88612: NOT
88613: OR
88614: IFFALSE 88618
// exit ;
88616: GO 89013
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
88618: LD_ADDR_VAR 0 6
88622: PUSH
88623: LD_VAR 0 7
88627: PPUSH
88628: LD_INT 0
88630: PPUSH
88631: LD_INT 4
88633: PPUSH
88634: CALL_OW 272
88638: PUSH
88639: LD_VAR 0 8
88643: PPUSH
88644: LD_INT 0
88646: PPUSH
88647: LD_INT 4
88649: PPUSH
88650: CALL_OW 273
88654: PUSH
88655: EMPTY
88656: LIST
88657: LIST
88658: PUSH
88659: LD_VAR 0 7
88663: PPUSH
88664: LD_INT 1
88666: PPUSH
88667: LD_INT 4
88669: PPUSH
88670: CALL_OW 272
88674: PUSH
88675: LD_VAR 0 8
88679: PPUSH
88680: LD_INT 1
88682: PPUSH
88683: LD_INT 4
88685: PPUSH
88686: CALL_OW 273
88690: PUSH
88691: EMPTY
88692: LIST
88693: LIST
88694: PUSH
88695: LD_VAR 0 7
88699: PPUSH
88700: LD_INT 2
88702: PPUSH
88703: LD_INT 4
88705: PPUSH
88706: CALL_OW 272
88710: PUSH
88711: LD_VAR 0 8
88715: PPUSH
88716: LD_INT 2
88718: PPUSH
88719: LD_INT 4
88721: PPUSH
88722: CALL_OW 273
88726: PUSH
88727: EMPTY
88728: LIST
88729: LIST
88730: PUSH
88731: LD_VAR 0 7
88735: PPUSH
88736: LD_INT 3
88738: PPUSH
88739: LD_INT 4
88741: PPUSH
88742: CALL_OW 272
88746: PUSH
88747: LD_VAR 0 8
88751: PPUSH
88752: LD_INT 3
88754: PPUSH
88755: LD_INT 4
88757: PPUSH
88758: CALL_OW 273
88762: PUSH
88763: EMPTY
88764: LIST
88765: LIST
88766: PUSH
88767: LD_VAR 0 7
88771: PPUSH
88772: LD_INT 4
88774: PPUSH
88775: LD_INT 4
88777: PPUSH
88778: CALL_OW 272
88782: PUSH
88783: LD_VAR 0 8
88787: PPUSH
88788: LD_INT 4
88790: PPUSH
88791: LD_INT 4
88793: PPUSH
88794: CALL_OW 273
88798: PUSH
88799: EMPTY
88800: LIST
88801: LIST
88802: PUSH
88803: LD_VAR 0 7
88807: PPUSH
88808: LD_INT 5
88810: PPUSH
88811: LD_INT 4
88813: PPUSH
88814: CALL_OW 272
88818: PUSH
88819: LD_VAR 0 8
88823: PPUSH
88824: LD_INT 5
88826: PPUSH
88827: LD_INT 4
88829: PPUSH
88830: CALL_OW 273
88834: PUSH
88835: EMPTY
88836: LIST
88837: LIST
88838: PUSH
88839: EMPTY
88840: LIST
88841: LIST
88842: LIST
88843: LIST
88844: LIST
88845: LIST
88846: ST_TO_ADDR
// for i = tmp downto 1 do
88847: LD_ADDR_VAR 0 4
88851: PUSH
88852: DOUBLE
88853: LD_VAR 0 6
88857: INC
88858: ST_TO_ADDR
88859: LD_INT 1
88861: PUSH
88862: FOR_DOWNTO
88863: IFFALSE 88964
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
88865: LD_VAR 0 6
88869: PUSH
88870: LD_VAR 0 4
88874: ARRAY
88875: PUSH
88876: LD_INT 1
88878: ARRAY
88879: PPUSH
88880: LD_VAR 0 6
88884: PUSH
88885: LD_VAR 0 4
88889: ARRAY
88890: PUSH
88891: LD_INT 2
88893: ARRAY
88894: PPUSH
88895: CALL_OW 488
88899: NOT
88900: PUSH
88901: LD_VAR 0 6
88905: PUSH
88906: LD_VAR 0 4
88910: ARRAY
88911: PUSH
88912: LD_INT 1
88914: ARRAY
88915: PPUSH
88916: LD_VAR 0 6
88920: PUSH
88921: LD_VAR 0 4
88925: ARRAY
88926: PUSH
88927: LD_INT 2
88929: ARRAY
88930: PPUSH
88931: CALL_OW 428
88935: PUSH
88936: LD_INT 0
88938: NONEQUAL
88939: OR
88940: IFFALSE 88962
// tmp := Delete ( tmp , i ) ;
88942: LD_ADDR_VAR 0 6
88946: PUSH
88947: LD_VAR 0 6
88951: PPUSH
88952: LD_VAR 0 4
88956: PPUSH
88957: CALL_OW 3
88961: ST_TO_ADDR
88962: GO 88862
88964: POP
88965: POP
// j := GetClosestHex ( unit , tmp ) ;
88966: LD_ADDR_VAR 0 5
88970: PUSH
88971: LD_VAR 0 1
88975: PPUSH
88976: LD_VAR 0 6
88980: PPUSH
88981: CALL 88268 0 2
88985: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
88986: LD_VAR 0 1
88990: PPUSH
88991: LD_VAR 0 5
88995: PUSH
88996: LD_INT 1
88998: ARRAY
88999: PPUSH
89000: LD_VAR 0 5
89004: PUSH
89005: LD_INT 2
89007: ARRAY
89008: PPUSH
89009: CALL_OW 111
// end ;
89013: LD_VAR 0 3
89017: RET
// export function PrepareApemanSoldier ( ) ; begin
89018: LD_INT 0
89020: PPUSH
// uc_nation := 0 ;
89021: LD_ADDR_OWVAR 21
89025: PUSH
89026: LD_INT 0
89028: ST_TO_ADDR
// hc_sex := sex_male ;
89029: LD_ADDR_OWVAR 27
89033: PUSH
89034: LD_INT 1
89036: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
89037: LD_ADDR_OWVAR 28
89041: PUSH
89042: LD_INT 15
89044: ST_TO_ADDR
// hc_gallery :=  ;
89045: LD_ADDR_OWVAR 33
89049: PUSH
89050: LD_STRING 
89052: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89053: LD_ADDR_OWVAR 31
89057: PUSH
89058: LD_INT 0
89060: PPUSH
89061: LD_INT 3
89063: PPUSH
89064: CALL_OW 12
89068: PUSH
89069: LD_INT 0
89071: PPUSH
89072: LD_INT 3
89074: PPUSH
89075: CALL_OW 12
89079: PUSH
89080: LD_INT 0
89082: PUSH
89083: LD_INT 0
89085: PUSH
89086: EMPTY
89087: LIST
89088: LIST
89089: LIST
89090: LIST
89091: ST_TO_ADDR
// end ;
89092: LD_VAR 0 1
89096: RET
// export function PrepareApemanEngineer ( ) ; begin
89097: LD_INT 0
89099: PPUSH
// uc_nation := 0 ;
89100: LD_ADDR_OWVAR 21
89104: PUSH
89105: LD_INT 0
89107: ST_TO_ADDR
// hc_sex := sex_male ;
89108: LD_ADDR_OWVAR 27
89112: PUSH
89113: LD_INT 1
89115: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
89116: LD_ADDR_OWVAR 28
89120: PUSH
89121: LD_INT 16
89123: ST_TO_ADDR
// hc_gallery :=  ;
89124: LD_ADDR_OWVAR 33
89128: PUSH
89129: LD_STRING 
89131: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89132: LD_ADDR_OWVAR 31
89136: PUSH
89137: LD_INT 0
89139: PPUSH
89140: LD_INT 3
89142: PPUSH
89143: CALL_OW 12
89147: PUSH
89148: LD_INT 0
89150: PPUSH
89151: LD_INT 3
89153: PPUSH
89154: CALL_OW 12
89158: PUSH
89159: LD_INT 0
89161: PUSH
89162: LD_INT 0
89164: PUSH
89165: EMPTY
89166: LIST
89167: LIST
89168: LIST
89169: LIST
89170: ST_TO_ADDR
// end ;
89171: LD_VAR 0 1
89175: RET
// export function PrepareApeman ( agressivity ) ; begin
89176: LD_INT 0
89178: PPUSH
// uc_side := 0 ;
89179: LD_ADDR_OWVAR 20
89183: PUSH
89184: LD_INT 0
89186: ST_TO_ADDR
// uc_nation := 0 ;
89187: LD_ADDR_OWVAR 21
89191: PUSH
89192: LD_INT 0
89194: ST_TO_ADDR
// hc_sex := sex_male ;
89195: LD_ADDR_OWVAR 27
89199: PUSH
89200: LD_INT 1
89202: ST_TO_ADDR
// hc_class := class_apeman ;
89203: LD_ADDR_OWVAR 28
89207: PUSH
89208: LD_INT 12
89210: ST_TO_ADDR
// hc_gallery :=  ;
89211: LD_ADDR_OWVAR 33
89215: PUSH
89216: LD_STRING 
89218: ST_TO_ADDR
// if agressivity = 0 then
89219: LD_VAR 0 1
89223: PUSH
89224: LD_INT 0
89226: EQUAL
89227: IFFALSE 89239
// hc_agressivity := 0 else
89229: LD_ADDR_OWVAR 35
89233: PUSH
89234: LD_INT 0
89236: ST_TO_ADDR
89237: GO 89260
// hc_agressivity := rand ( - agressivity , agressivity ) ;
89239: LD_ADDR_OWVAR 35
89243: PUSH
89244: LD_VAR 0 1
89248: NEG
89249: PPUSH
89250: LD_VAR 0 1
89254: PPUSH
89255: CALL_OW 12
89259: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89260: LD_ADDR_OWVAR 31
89264: PUSH
89265: LD_INT 0
89267: PPUSH
89268: LD_INT 3
89270: PPUSH
89271: CALL_OW 12
89275: PUSH
89276: LD_INT 0
89278: PPUSH
89279: LD_INT 3
89281: PPUSH
89282: CALL_OW 12
89286: PUSH
89287: LD_INT 0
89289: PUSH
89290: LD_INT 0
89292: PUSH
89293: EMPTY
89294: LIST
89295: LIST
89296: LIST
89297: LIST
89298: ST_TO_ADDR
// end ;
89299: LD_VAR 0 2
89303: RET
// export function PrepareTiger ( agressivity ) ; begin
89304: LD_INT 0
89306: PPUSH
// uc_side := 0 ;
89307: LD_ADDR_OWVAR 20
89311: PUSH
89312: LD_INT 0
89314: ST_TO_ADDR
// uc_nation := 0 ;
89315: LD_ADDR_OWVAR 21
89319: PUSH
89320: LD_INT 0
89322: ST_TO_ADDR
// hc_class := class_tiger ;
89323: LD_ADDR_OWVAR 28
89327: PUSH
89328: LD_INT 14
89330: ST_TO_ADDR
// hc_gallery :=  ;
89331: LD_ADDR_OWVAR 33
89335: PUSH
89336: LD_STRING 
89338: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
89339: LD_ADDR_OWVAR 35
89343: PUSH
89344: LD_VAR 0 1
89348: NEG
89349: PPUSH
89350: LD_VAR 0 1
89354: PPUSH
89355: CALL_OW 12
89359: ST_TO_ADDR
// end ;
89360: LD_VAR 0 2
89364: RET
// export function PrepareEnchidna ( ) ; begin
89365: LD_INT 0
89367: PPUSH
// uc_side := 0 ;
89368: LD_ADDR_OWVAR 20
89372: PUSH
89373: LD_INT 0
89375: ST_TO_ADDR
// uc_nation := 0 ;
89376: LD_ADDR_OWVAR 21
89380: PUSH
89381: LD_INT 0
89383: ST_TO_ADDR
// hc_class := class_baggie ;
89384: LD_ADDR_OWVAR 28
89388: PUSH
89389: LD_INT 13
89391: ST_TO_ADDR
// hc_gallery :=  ;
89392: LD_ADDR_OWVAR 33
89396: PUSH
89397: LD_STRING 
89399: ST_TO_ADDR
// end ;
89400: LD_VAR 0 1
89404: RET
// export function PrepareFrog ( ) ; begin
89405: LD_INT 0
89407: PPUSH
// uc_side := 0 ;
89408: LD_ADDR_OWVAR 20
89412: PUSH
89413: LD_INT 0
89415: ST_TO_ADDR
// uc_nation := 0 ;
89416: LD_ADDR_OWVAR 21
89420: PUSH
89421: LD_INT 0
89423: ST_TO_ADDR
// hc_class := class_frog ;
89424: LD_ADDR_OWVAR 28
89428: PUSH
89429: LD_INT 19
89431: ST_TO_ADDR
// hc_gallery :=  ;
89432: LD_ADDR_OWVAR 33
89436: PUSH
89437: LD_STRING 
89439: ST_TO_ADDR
// end ;
89440: LD_VAR 0 1
89444: RET
// export function PrepareFish ( ) ; begin
89445: LD_INT 0
89447: PPUSH
// uc_side := 0 ;
89448: LD_ADDR_OWVAR 20
89452: PUSH
89453: LD_INT 0
89455: ST_TO_ADDR
// uc_nation := 0 ;
89456: LD_ADDR_OWVAR 21
89460: PUSH
89461: LD_INT 0
89463: ST_TO_ADDR
// hc_class := class_fish ;
89464: LD_ADDR_OWVAR 28
89468: PUSH
89469: LD_INT 20
89471: ST_TO_ADDR
// hc_gallery :=  ;
89472: LD_ADDR_OWVAR 33
89476: PUSH
89477: LD_STRING 
89479: ST_TO_ADDR
// end ;
89480: LD_VAR 0 1
89484: RET
// export function PrepareBird ( ) ; begin
89485: LD_INT 0
89487: PPUSH
// uc_side := 0 ;
89488: LD_ADDR_OWVAR 20
89492: PUSH
89493: LD_INT 0
89495: ST_TO_ADDR
// uc_nation := 0 ;
89496: LD_ADDR_OWVAR 21
89500: PUSH
89501: LD_INT 0
89503: ST_TO_ADDR
// hc_class := class_phororhacos ;
89504: LD_ADDR_OWVAR 28
89508: PUSH
89509: LD_INT 18
89511: ST_TO_ADDR
// hc_gallery :=  ;
89512: LD_ADDR_OWVAR 33
89516: PUSH
89517: LD_STRING 
89519: ST_TO_ADDR
// end ;
89520: LD_VAR 0 1
89524: RET
// export function PrepareHorse ( ) ; begin
89525: LD_INT 0
89527: PPUSH
// uc_side := 0 ;
89528: LD_ADDR_OWVAR 20
89532: PUSH
89533: LD_INT 0
89535: ST_TO_ADDR
// uc_nation := 0 ;
89536: LD_ADDR_OWVAR 21
89540: PUSH
89541: LD_INT 0
89543: ST_TO_ADDR
// hc_class := class_horse ;
89544: LD_ADDR_OWVAR 28
89548: PUSH
89549: LD_INT 21
89551: ST_TO_ADDR
// hc_gallery :=  ;
89552: LD_ADDR_OWVAR 33
89556: PUSH
89557: LD_STRING 
89559: ST_TO_ADDR
// end ;
89560: LD_VAR 0 1
89564: RET
// export function PrepareMastodont ( ) ; begin
89565: LD_INT 0
89567: PPUSH
// uc_side := 0 ;
89568: LD_ADDR_OWVAR 20
89572: PUSH
89573: LD_INT 0
89575: ST_TO_ADDR
// uc_nation := 0 ;
89576: LD_ADDR_OWVAR 21
89580: PUSH
89581: LD_INT 0
89583: ST_TO_ADDR
// vc_chassis := class_mastodont ;
89584: LD_ADDR_OWVAR 37
89588: PUSH
89589: LD_INT 31
89591: ST_TO_ADDR
// vc_control := control_rider ;
89592: LD_ADDR_OWVAR 38
89596: PUSH
89597: LD_INT 4
89599: ST_TO_ADDR
// end ;
89600: LD_VAR 0 1
89604: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
89605: LD_INT 0
89607: PPUSH
89608: PPUSH
89609: PPUSH
// uc_side = 0 ;
89610: LD_ADDR_OWVAR 20
89614: PUSH
89615: LD_INT 0
89617: ST_TO_ADDR
// uc_nation = 0 ;
89618: LD_ADDR_OWVAR 21
89622: PUSH
89623: LD_INT 0
89625: ST_TO_ADDR
// InitHc_All ( ) ;
89626: CALL_OW 584
// InitVc ;
89630: CALL_OW 20
// if mastodonts then
89634: LD_VAR 0 6
89638: IFFALSE 89705
// for i = 1 to mastodonts do
89640: LD_ADDR_VAR 0 11
89644: PUSH
89645: DOUBLE
89646: LD_INT 1
89648: DEC
89649: ST_TO_ADDR
89650: LD_VAR 0 6
89654: PUSH
89655: FOR_TO
89656: IFFALSE 89703
// begin vc_chassis := 31 ;
89658: LD_ADDR_OWVAR 37
89662: PUSH
89663: LD_INT 31
89665: ST_TO_ADDR
// vc_control := control_rider ;
89666: LD_ADDR_OWVAR 38
89670: PUSH
89671: LD_INT 4
89673: ST_TO_ADDR
// animal := CreateVehicle ;
89674: LD_ADDR_VAR 0 12
89678: PUSH
89679: CALL_OW 45
89683: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89684: LD_VAR 0 12
89688: PPUSH
89689: LD_VAR 0 8
89693: PPUSH
89694: LD_INT 0
89696: PPUSH
89697: CALL 91833 0 3
// end ;
89701: GO 89655
89703: POP
89704: POP
// if horses then
89705: LD_VAR 0 5
89709: IFFALSE 89776
// for i = 1 to horses do
89711: LD_ADDR_VAR 0 11
89715: PUSH
89716: DOUBLE
89717: LD_INT 1
89719: DEC
89720: ST_TO_ADDR
89721: LD_VAR 0 5
89725: PUSH
89726: FOR_TO
89727: IFFALSE 89774
// begin hc_class := 21 ;
89729: LD_ADDR_OWVAR 28
89733: PUSH
89734: LD_INT 21
89736: ST_TO_ADDR
// hc_gallery :=  ;
89737: LD_ADDR_OWVAR 33
89741: PUSH
89742: LD_STRING 
89744: ST_TO_ADDR
// animal := CreateHuman ;
89745: LD_ADDR_VAR 0 12
89749: PUSH
89750: CALL_OW 44
89754: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89755: LD_VAR 0 12
89759: PPUSH
89760: LD_VAR 0 8
89764: PPUSH
89765: LD_INT 0
89767: PPUSH
89768: CALL 91833 0 3
// end ;
89772: GO 89726
89774: POP
89775: POP
// if birds then
89776: LD_VAR 0 1
89780: IFFALSE 89847
// for i = 1 to birds do
89782: LD_ADDR_VAR 0 11
89786: PUSH
89787: DOUBLE
89788: LD_INT 1
89790: DEC
89791: ST_TO_ADDR
89792: LD_VAR 0 1
89796: PUSH
89797: FOR_TO
89798: IFFALSE 89845
// begin hc_class := 18 ;
89800: LD_ADDR_OWVAR 28
89804: PUSH
89805: LD_INT 18
89807: ST_TO_ADDR
// hc_gallery =  ;
89808: LD_ADDR_OWVAR 33
89812: PUSH
89813: LD_STRING 
89815: ST_TO_ADDR
// animal := CreateHuman ;
89816: LD_ADDR_VAR 0 12
89820: PUSH
89821: CALL_OW 44
89825: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89826: LD_VAR 0 12
89830: PPUSH
89831: LD_VAR 0 8
89835: PPUSH
89836: LD_INT 0
89838: PPUSH
89839: CALL 91833 0 3
// end ;
89843: GO 89797
89845: POP
89846: POP
// if tigers then
89847: LD_VAR 0 2
89851: IFFALSE 89935
// for i = 1 to tigers do
89853: LD_ADDR_VAR 0 11
89857: PUSH
89858: DOUBLE
89859: LD_INT 1
89861: DEC
89862: ST_TO_ADDR
89863: LD_VAR 0 2
89867: PUSH
89868: FOR_TO
89869: IFFALSE 89933
// begin hc_class = class_tiger ;
89871: LD_ADDR_OWVAR 28
89875: PUSH
89876: LD_INT 14
89878: ST_TO_ADDR
// hc_gallery =  ;
89879: LD_ADDR_OWVAR 33
89883: PUSH
89884: LD_STRING 
89886: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
89887: LD_ADDR_OWVAR 35
89891: PUSH
89892: LD_INT 7
89894: NEG
89895: PPUSH
89896: LD_INT 7
89898: PPUSH
89899: CALL_OW 12
89903: ST_TO_ADDR
// animal := CreateHuman ;
89904: LD_ADDR_VAR 0 12
89908: PUSH
89909: CALL_OW 44
89913: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89914: LD_VAR 0 12
89918: PPUSH
89919: LD_VAR 0 8
89923: PPUSH
89924: LD_INT 0
89926: PPUSH
89927: CALL 91833 0 3
// end ;
89931: GO 89868
89933: POP
89934: POP
// if apemans then
89935: LD_VAR 0 3
89939: IFFALSE 90062
// for i = 1 to apemans do
89941: LD_ADDR_VAR 0 11
89945: PUSH
89946: DOUBLE
89947: LD_INT 1
89949: DEC
89950: ST_TO_ADDR
89951: LD_VAR 0 3
89955: PUSH
89956: FOR_TO
89957: IFFALSE 90060
// begin hc_class = class_apeman ;
89959: LD_ADDR_OWVAR 28
89963: PUSH
89964: LD_INT 12
89966: ST_TO_ADDR
// hc_gallery =  ;
89967: LD_ADDR_OWVAR 33
89971: PUSH
89972: LD_STRING 
89974: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
89975: LD_ADDR_OWVAR 35
89979: PUSH
89980: LD_INT 2
89982: NEG
89983: PPUSH
89984: LD_INT 2
89986: PPUSH
89987: CALL_OW 12
89991: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
89992: LD_ADDR_OWVAR 31
89996: PUSH
89997: LD_INT 1
89999: PPUSH
90000: LD_INT 3
90002: PPUSH
90003: CALL_OW 12
90007: PUSH
90008: LD_INT 1
90010: PPUSH
90011: LD_INT 3
90013: PPUSH
90014: CALL_OW 12
90018: PUSH
90019: LD_INT 0
90021: PUSH
90022: LD_INT 0
90024: PUSH
90025: EMPTY
90026: LIST
90027: LIST
90028: LIST
90029: LIST
90030: ST_TO_ADDR
// animal := CreateHuman ;
90031: LD_ADDR_VAR 0 12
90035: PUSH
90036: CALL_OW 44
90040: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90041: LD_VAR 0 12
90045: PPUSH
90046: LD_VAR 0 8
90050: PPUSH
90051: LD_INT 0
90053: PPUSH
90054: CALL 91833 0 3
// end ;
90058: GO 89956
90060: POP
90061: POP
// if enchidnas then
90062: LD_VAR 0 4
90066: IFFALSE 90133
// for i = 1 to enchidnas do
90068: LD_ADDR_VAR 0 11
90072: PUSH
90073: DOUBLE
90074: LD_INT 1
90076: DEC
90077: ST_TO_ADDR
90078: LD_VAR 0 4
90082: PUSH
90083: FOR_TO
90084: IFFALSE 90131
// begin hc_class = 13 ;
90086: LD_ADDR_OWVAR 28
90090: PUSH
90091: LD_INT 13
90093: ST_TO_ADDR
// hc_gallery =  ;
90094: LD_ADDR_OWVAR 33
90098: PUSH
90099: LD_STRING 
90101: ST_TO_ADDR
// animal := CreateHuman ;
90102: LD_ADDR_VAR 0 12
90106: PUSH
90107: CALL_OW 44
90111: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90112: LD_VAR 0 12
90116: PPUSH
90117: LD_VAR 0 8
90121: PPUSH
90122: LD_INT 0
90124: PPUSH
90125: CALL 91833 0 3
// end ;
90129: GO 90083
90131: POP
90132: POP
// if fishes then
90133: LD_VAR 0 7
90137: IFFALSE 90204
// for i = 1 to fishes do
90139: LD_ADDR_VAR 0 11
90143: PUSH
90144: DOUBLE
90145: LD_INT 1
90147: DEC
90148: ST_TO_ADDR
90149: LD_VAR 0 7
90153: PUSH
90154: FOR_TO
90155: IFFALSE 90202
// begin hc_class = 20 ;
90157: LD_ADDR_OWVAR 28
90161: PUSH
90162: LD_INT 20
90164: ST_TO_ADDR
// hc_gallery =  ;
90165: LD_ADDR_OWVAR 33
90169: PUSH
90170: LD_STRING 
90172: ST_TO_ADDR
// animal := CreateHuman ;
90173: LD_ADDR_VAR 0 12
90177: PUSH
90178: CALL_OW 44
90182: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
90183: LD_VAR 0 12
90187: PPUSH
90188: LD_VAR 0 9
90192: PPUSH
90193: LD_INT 0
90195: PPUSH
90196: CALL 91833 0 3
// end ;
90200: GO 90154
90202: POP
90203: POP
// end ;
90204: LD_VAR 0 10
90208: RET
// export function WantHeal ( sci , unit ) ; begin
90209: LD_INT 0
90211: PPUSH
// if GetTaskList ( sci ) > 0 then
90212: LD_VAR 0 1
90216: PPUSH
90217: CALL_OW 437
90221: PUSH
90222: LD_INT 0
90224: GREATER
90225: IFFALSE 90295
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
90227: LD_VAR 0 1
90231: PPUSH
90232: CALL_OW 437
90236: PUSH
90237: LD_INT 1
90239: ARRAY
90240: PUSH
90241: LD_INT 1
90243: ARRAY
90244: PUSH
90245: LD_STRING l
90247: EQUAL
90248: PUSH
90249: LD_VAR 0 1
90253: PPUSH
90254: CALL_OW 437
90258: PUSH
90259: LD_INT 1
90261: ARRAY
90262: PUSH
90263: LD_INT 4
90265: ARRAY
90266: PUSH
90267: LD_VAR 0 2
90271: EQUAL
90272: AND
90273: IFFALSE 90285
// result := true else
90275: LD_ADDR_VAR 0 3
90279: PUSH
90280: LD_INT 1
90282: ST_TO_ADDR
90283: GO 90293
// result := false ;
90285: LD_ADDR_VAR 0 3
90289: PUSH
90290: LD_INT 0
90292: ST_TO_ADDR
// end else
90293: GO 90303
// result := false ;
90295: LD_ADDR_VAR 0 3
90299: PUSH
90300: LD_INT 0
90302: ST_TO_ADDR
// end ;
90303: LD_VAR 0 3
90307: RET
// export function HealTarget ( sci ) ; begin
90308: LD_INT 0
90310: PPUSH
// if not sci then
90311: LD_VAR 0 1
90315: NOT
90316: IFFALSE 90320
// exit ;
90318: GO 90385
// result := 0 ;
90320: LD_ADDR_VAR 0 2
90324: PUSH
90325: LD_INT 0
90327: ST_TO_ADDR
// if GetTaskList ( sci ) then
90328: LD_VAR 0 1
90332: PPUSH
90333: CALL_OW 437
90337: IFFALSE 90385
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
90339: LD_VAR 0 1
90343: PPUSH
90344: CALL_OW 437
90348: PUSH
90349: LD_INT 1
90351: ARRAY
90352: PUSH
90353: LD_INT 1
90355: ARRAY
90356: PUSH
90357: LD_STRING l
90359: EQUAL
90360: IFFALSE 90385
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
90362: LD_ADDR_VAR 0 2
90366: PUSH
90367: LD_VAR 0 1
90371: PPUSH
90372: CALL_OW 437
90376: PUSH
90377: LD_INT 1
90379: ARRAY
90380: PUSH
90381: LD_INT 4
90383: ARRAY
90384: ST_TO_ADDR
// end ;
90385: LD_VAR 0 2
90389: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
90390: LD_INT 0
90392: PPUSH
90393: PPUSH
90394: PPUSH
90395: PPUSH
// if not base_units then
90396: LD_VAR 0 1
90400: NOT
90401: IFFALSE 90405
// exit ;
90403: GO 90492
// result := false ;
90405: LD_ADDR_VAR 0 2
90409: PUSH
90410: LD_INT 0
90412: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
90413: LD_ADDR_VAR 0 5
90417: PUSH
90418: LD_VAR 0 1
90422: PPUSH
90423: LD_INT 21
90425: PUSH
90426: LD_INT 3
90428: PUSH
90429: EMPTY
90430: LIST
90431: LIST
90432: PPUSH
90433: CALL_OW 72
90437: ST_TO_ADDR
// if not tmp then
90438: LD_VAR 0 5
90442: NOT
90443: IFFALSE 90447
// exit ;
90445: GO 90492
// for i in tmp do
90447: LD_ADDR_VAR 0 3
90451: PUSH
90452: LD_VAR 0 5
90456: PUSH
90457: FOR_IN
90458: IFFALSE 90490
// begin result := EnemyInRange ( i , 22 ) ;
90460: LD_ADDR_VAR 0 2
90464: PUSH
90465: LD_VAR 0 3
90469: PPUSH
90470: LD_INT 22
90472: PPUSH
90473: CALL 88070 0 2
90477: ST_TO_ADDR
// if result then
90478: LD_VAR 0 2
90482: IFFALSE 90488
// exit ;
90484: POP
90485: POP
90486: GO 90492
// end ;
90488: GO 90457
90490: POP
90491: POP
// end ;
90492: LD_VAR 0 2
90496: RET
// export function FilterByTag ( units , tag ) ; begin
90497: LD_INT 0
90499: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
90500: LD_ADDR_VAR 0 3
90504: PUSH
90505: LD_VAR 0 1
90509: PPUSH
90510: LD_INT 120
90512: PUSH
90513: LD_VAR 0 2
90517: PUSH
90518: EMPTY
90519: LIST
90520: LIST
90521: PPUSH
90522: CALL_OW 72
90526: ST_TO_ADDR
// end ;
90527: LD_VAR 0 3
90531: RET
// export function IsDriver ( un ) ; begin
90532: LD_INT 0
90534: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
90535: LD_ADDR_VAR 0 2
90539: PUSH
90540: LD_VAR 0 1
90544: PUSH
90545: LD_INT 55
90547: PUSH
90548: EMPTY
90549: LIST
90550: PPUSH
90551: CALL_OW 69
90555: IN
90556: ST_TO_ADDR
// end ;
90557: LD_VAR 0 2
90561: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
90562: LD_INT 0
90564: PPUSH
90565: PPUSH
// list := [ ] ;
90566: LD_ADDR_VAR 0 5
90570: PUSH
90571: EMPTY
90572: ST_TO_ADDR
// case d of 0 :
90573: LD_VAR 0 3
90577: PUSH
90578: LD_INT 0
90580: DOUBLE
90581: EQUAL
90582: IFTRUE 90586
90584: GO 90719
90586: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
90587: LD_ADDR_VAR 0 5
90591: PUSH
90592: LD_VAR 0 1
90596: PUSH
90597: LD_INT 4
90599: MINUS
90600: PUSH
90601: LD_VAR 0 2
90605: PUSH
90606: LD_INT 4
90608: MINUS
90609: PUSH
90610: LD_INT 2
90612: PUSH
90613: EMPTY
90614: LIST
90615: LIST
90616: LIST
90617: PUSH
90618: LD_VAR 0 1
90622: PUSH
90623: LD_INT 3
90625: MINUS
90626: PUSH
90627: LD_VAR 0 2
90631: PUSH
90632: LD_INT 1
90634: PUSH
90635: EMPTY
90636: LIST
90637: LIST
90638: LIST
90639: PUSH
90640: LD_VAR 0 1
90644: PUSH
90645: LD_INT 4
90647: PLUS
90648: PUSH
90649: LD_VAR 0 2
90653: PUSH
90654: LD_INT 4
90656: PUSH
90657: EMPTY
90658: LIST
90659: LIST
90660: LIST
90661: PUSH
90662: LD_VAR 0 1
90666: PUSH
90667: LD_INT 3
90669: PLUS
90670: PUSH
90671: LD_VAR 0 2
90675: PUSH
90676: LD_INT 3
90678: PLUS
90679: PUSH
90680: LD_INT 5
90682: PUSH
90683: EMPTY
90684: LIST
90685: LIST
90686: LIST
90687: PUSH
90688: LD_VAR 0 1
90692: PUSH
90693: LD_VAR 0 2
90697: PUSH
90698: LD_INT 4
90700: PLUS
90701: PUSH
90702: LD_INT 0
90704: PUSH
90705: EMPTY
90706: LIST
90707: LIST
90708: LIST
90709: PUSH
90710: EMPTY
90711: LIST
90712: LIST
90713: LIST
90714: LIST
90715: LIST
90716: ST_TO_ADDR
// end ; 1 :
90717: GO 91417
90719: LD_INT 1
90721: DOUBLE
90722: EQUAL
90723: IFTRUE 90727
90725: GO 90860
90727: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
90728: LD_ADDR_VAR 0 5
90732: PUSH
90733: LD_VAR 0 1
90737: PUSH
90738: LD_VAR 0 2
90742: PUSH
90743: LD_INT 4
90745: MINUS
90746: PUSH
90747: LD_INT 3
90749: PUSH
90750: EMPTY
90751: LIST
90752: LIST
90753: LIST
90754: PUSH
90755: LD_VAR 0 1
90759: PUSH
90760: LD_INT 3
90762: MINUS
90763: PUSH
90764: LD_VAR 0 2
90768: PUSH
90769: LD_INT 3
90771: MINUS
90772: PUSH
90773: LD_INT 2
90775: PUSH
90776: EMPTY
90777: LIST
90778: LIST
90779: LIST
90780: PUSH
90781: LD_VAR 0 1
90785: PUSH
90786: LD_INT 4
90788: MINUS
90789: PUSH
90790: LD_VAR 0 2
90794: PUSH
90795: LD_INT 1
90797: PUSH
90798: EMPTY
90799: LIST
90800: LIST
90801: LIST
90802: PUSH
90803: LD_VAR 0 1
90807: PUSH
90808: LD_VAR 0 2
90812: PUSH
90813: LD_INT 3
90815: PLUS
90816: PUSH
90817: LD_INT 0
90819: PUSH
90820: EMPTY
90821: LIST
90822: LIST
90823: LIST
90824: PUSH
90825: LD_VAR 0 1
90829: PUSH
90830: LD_INT 4
90832: PLUS
90833: PUSH
90834: LD_VAR 0 2
90838: PUSH
90839: LD_INT 4
90841: PLUS
90842: PUSH
90843: LD_INT 5
90845: PUSH
90846: EMPTY
90847: LIST
90848: LIST
90849: LIST
90850: PUSH
90851: EMPTY
90852: LIST
90853: LIST
90854: LIST
90855: LIST
90856: LIST
90857: ST_TO_ADDR
// end ; 2 :
90858: GO 91417
90860: LD_INT 2
90862: DOUBLE
90863: EQUAL
90864: IFTRUE 90868
90866: GO 90997
90868: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
90869: LD_ADDR_VAR 0 5
90873: PUSH
90874: LD_VAR 0 1
90878: PUSH
90879: LD_VAR 0 2
90883: PUSH
90884: LD_INT 3
90886: MINUS
90887: PUSH
90888: LD_INT 3
90890: PUSH
90891: EMPTY
90892: LIST
90893: LIST
90894: LIST
90895: PUSH
90896: LD_VAR 0 1
90900: PUSH
90901: LD_INT 4
90903: PLUS
90904: PUSH
90905: LD_VAR 0 2
90909: PUSH
90910: LD_INT 4
90912: PUSH
90913: EMPTY
90914: LIST
90915: LIST
90916: LIST
90917: PUSH
90918: LD_VAR 0 1
90922: PUSH
90923: LD_VAR 0 2
90927: PUSH
90928: LD_INT 4
90930: PLUS
90931: PUSH
90932: LD_INT 0
90934: PUSH
90935: EMPTY
90936: LIST
90937: LIST
90938: LIST
90939: PUSH
90940: LD_VAR 0 1
90944: PUSH
90945: LD_INT 3
90947: MINUS
90948: PUSH
90949: LD_VAR 0 2
90953: PUSH
90954: LD_INT 1
90956: PUSH
90957: EMPTY
90958: LIST
90959: LIST
90960: LIST
90961: PUSH
90962: LD_VAR 0 1
90966: PUSH
90967: LD_INT 4
90969: MINUS
90970: PUSH
90971: LD_VAR 0 2
90975: PUSH
90976: LD_INT 4
90978: MINUS
90979: PUSH
90980: LD_INT 2
90982: PUSH
90983: EMPTY
90984: LIST
90985: LIST
90986: LIST
90987: PUSH
90988: EMPTY
90989: LIST
90990: LIST
90991: LIST
90992: LIST
90993: LIST
90994: ST_TO_ADDR
// end ; 3 :
90995: GO 91417
90997: LD_INT 3
90999: DOUBLE
91000: EQUAL
91001: IFTRUE 91005
91003: GO 91138
91005: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
91006: LD_ADDR_VAR 0 5
91010: PUSH
91011: LD_VAR 0 1
91015: PUSH
91016: LD_INT 3
91018: PLUS
91019: PUSH
91020: LD_VAR 0 2
91024: PUSH
91025: LD_INT 4
91027: PUSH
91028: EMPTY
91029: LIST
91030: LIST
91031: LIST
91032: PUSH
91033: LD_VAR 0 1
91037: PUSH
91038: LD_INT 4
91040: PLUS
91041: PUSH
91042: LD_VAR 0 2
91046: PUSH
91047: LD_INT 4
91049: PLUS
91050: PUSH
91051: LD_INT 5
91053: PUSH
91054: EMPTY
91055: LIST
91056: LIST
91057: LIST
91058: PUSH
91059: LD_VAR 0 1
91063: PUSH
91064: LD_INT 4
91066: MINUS
91067: PUSH
91068: LD_VAR 0 2
91072: PUSH
91073: LD_INT 1
91075: PUSH
91076: EMPTY
91077: LIST
91078: LIST
91079: LIST
91080: PUSH
91081: LD_VAR 0 1
91085: PUSH
91086: LD_VAR 0 2
91090: PUSH
91091: LD_INT 4
91093: MINUS
91094: PUSH
91095: LD_INT 3
91097: PUSH
91098: EMPTY
91099: LIST
91100: LIST
91101: LIST
91102: PUSH
91103: LD_VAR 0 1
91107: PUSH
91108: LD_INT 3
91110: MINUS
91111: PUSH
91112: LD_VAR 0 2
91116: PUSH
91117: LD_INT 3
91119: MINUS
91120: PUSH
91121: LD_INT 2
91123: PUSH
91124: EMPTY
91125: LIST
91126: LIST
91127: LIST
91128: PUSH
91129: EMPTY
91130: LIST
91131: LIST
91132: LIST
91133: LIST
91134: LIST
91135: ST_TO_ADDR
// end ; 4 :
91136: GO 91417
91138: LD_INT 4
91140: DOUBLE
91141: EQUAL
91142: IFTRUE 91146
91144: GO 91279
91146: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
91147: LD_ADDR_VAR 0 5
91151: PUSH
91152: LD_VAR 0 1
91156: PUSH
91157: LD_VAR 0 2
91161: PUSH
91162: LD_INT 4
91164: PLUS
91165: PUSH
91166: LD_INT 0
91168: PUSH
91169: EMPTY
91170: LIST
91171: LIST
91172: LIST
91173: PUSH
91174: LD_VAR 0 1
91178: PUSH
91179: LD_INT 3
91181: PLUS
91182: PUSH
91183: LD_VAR 0 2
91187: PUSH
91188: LD_INT 3
91190: PLUS
91191: PUSH
91192: LD_INT 5
91194: PUSH
91195: EMPTY
91196: LIST
91197: LIST
91198: LIST
91199: PUSH
91200: LD_VAR 0 1
91204: PUSH
91205: LD_INT 4
91207: PLUS
91208: PUSH
91209: LD_VAR 0 2
91213: PUSH
91214: LD_INT 4
91216: PUSH
91217: EMPTY
91218: LIST
91219: LIST
91220: LIST
91221: PUSH
91222: LD_VAR 0 1
91226: PUSH
91227: LD_VAR 0 2
91231: PUSH
91232: LD_INT 3
91234: MINUS
91235: PUSH
91236: LD_INT 3
91238: PUSH
91239: EMPTY
91240: LIST
91241: LIST
91242: LIST
91243: PUSH
91244: LD_VAR 0 1
91248: PUSH
91249: LD_INT 4
91251: MINUS
91252: PUSH
91253: LD_VAR 0 2
91257: PUSH
91258: LD_INT 4
91260: MINUS
91261: PUSH
91262: LD_INT 2
91264: PUSH
91265: EMPTY
91266: LIST
91267: LIST
91268: LIST
91269: PUSH
91270: EMPTY
91271: LIST
91272: LIST
91273: LIST
91274: LIST
91275: LIST
91276: ST_TO_ADDR
// end ; 5 :
91277: GO 91417
91279: LD_INT 5
91281: DOUBLE
91282: EQUAL
91283: IFTRUE 91287
91285: GO 91416
91287: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
91288: LD_ADDR_VAR 0 5
91292: PUSH
91293: LD_VAR 0 1
91297: PUSH
91298: LD_INT 4
91300: MINUS
91301: PUSH
91302: LD_VAR 0 2
91306: PUSH
91307: LD_INT 1
91309: PUSH
91310: EMPTY
91311: LIST
91312: LIST
91313: LIST
91314: PUSH
91315: LD_VAR 0 1
91319: PUSH
91320: LD_VAR 0 2
91324: PUSH
91325: LD_INT 4
91327: MINUS
91328: PUSH
91329: LD_INT 3
91331: PUSH
91332: EMPTY
91333: LIST
91334: LIST
91335: LIST
91336: PUSH
91337: LD_VAR 0 1
91341: PUSH
91342: LD_INT 4
91344: PLUS
91345: PUSH
91346: LD_VAR 0 2
91350: PUSH
91351: LD_INT 4
91353: PLUS
91354: PUSH
91355: LD_INT 5
91357: PUSH
91358: EMPTY
91359: LIST
91360: LIST
91361: LIST
91362: PUSH
91363: LD_VAR 0 1
91367: PUSH
91368: LD_INT 3
91370: PLUS
91371: PUSH
91372: LD_VAR 0 2
91376: PUSH
91377: LD_INT 4
91379: PUSH
91380: EMPTY
91381: LIST
91382: LIST
91383: LIST
91384: PUSH
91385: LD_VAR 0 1
91389: PUSH
91390: LD_VAR 0 2
91394: PUSH
91395: LD_INT 3
91397: PLUS
91398: PUSH
91399: LD_INT 0
91401: PUSH
91402: EMPTY
91403: LIST
91404: LIST
91405: LIST
91406: PUSH
91407: EMPTY
91408: LIST
91409: LIST
91410: LIST
91411: LIST
91412: LIST
91413: ST_TO_ADDR
// end ; end ;
91414: GO 91417
91416: POP
// result := list ;
91417: LD_ADDR_VAR 0 4
91421: PUSH
91422: LD_VAR 0 5
91426: ST_TO_ADDR
// end ;
91427: LD_VAR 0 4
91431: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
91432: LD_INT 0
91434: PPUSH
91435: PPUSH
91436: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
91437: LD_VAR 0 1
91441: NOT
91442: PUSH
91443: LD_VAR 0 2
91447: PUSH
91448: LD_INT 1
91450: PUSH
91451: LD_INT 2
91453: PUSH
91454: LD_INT 3
91456: PUSH
91457: LD_INT 4
91459: PUSH
91460: EMPTY
91461: LIST
91462: LIST
91463: LIST
91464: LIST
91465: IN
91466: NOT
91467: OR
91468: IFFALSE 91472
// exit ;
91470: GO 91555
// tmp := [ ] ;
91472: LD_ADDR_VAR 0 5
91476: PUSH
91477: EMPTY
91478: ST_TO_ADDR
// for i in units do
91479: LD_ADDR_VAR 0 4
91483: PUSH
91484: LD_VAR 0 1
91488: PUSH
91489: FOR_IN
91490: IFFALSE 91524
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
91492: LD_ADDR_VAR 0 5
91496: PUSH
91497: LD_VAR 0 5
91501: PPUSH
91502: LD_VAR 0 4
91506: PPUSH
91507: LD_VAR 0 2
91511: PPUSH
91512: CALL_OW 259
91516: PPUSH
91517: CALL 92928 0 2
91521: ST_TO_ADDR
91522: GO 91489
91524: POP
91525: POP
// if not tmp then
91526: LD_VAR 0 5
91530: NOT
91531: IFFALSE 91535
// exit ;
91533: GO 91555
// result := SortListByListDesc ( units , tmp ) ;
91535: LD_ADDR_VAR 0 3
91539: PUSH
91540: LD_VAR 0 1
91544: PPUSH
91545: LD_VAR 0 5
91549: PPUSH
91550: CALL_OW 77
91554: ST_TO_ADDR
// end ;
91555: LD_VAR 0 3
91559: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
91560: LD_INT 0
91562: PPUSH
91563: PPUSH
91564: PPUSH
// result := false ;
91565: LD_ADDR_VAR 0 3
91569: PUSH
91570: LD_INT 0
91572: ST_TO_ADDR
// if not building then
91573: LD_VAR 0 2
91577: NOT
91578: IFFALSE 91582
// exit ;
91580: GO 91720
// x := GetX ( building ) ;
91582: LD_ADDR_VAR 0 4
91586: PUSH
91587: LD_VAR 0 2
91591: PPUSH
91592: CALL_OW 250
91596: ST_TO_ADDR
// y := GetY ( building ) ;
91597: LD_ADDR_VAR 0 5
91601: PUSH
91602: LD_VAR 0 2
91606: PPUSH
91607: CALL_OW 251
91611: ST_TO_ADDR
// if not x or not y then
91612: LD_VAR 0 4
91616: NOT
91617: PUSH
91618: LD_VAR 0 5
91622: NOT
91623: OR
91624: IFFALSE 91628
// exit ;
91626: GO 91720
// if GetTaskList ( unit ) then
91628: LD_VAR 0 1
91632: PPUSH
91633: CALL_OW 437
91637: IFFALSE 91720
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91639: LD_STRING e
91641: PUSH
91642: LD_VAR 0 1
91646: PPUSH
91647: CALL_OW 437
91651: PUSH
91652: LD_INT 1
91654: ARRAY
91655: PUSH
91656: LD_INT 1
91658: ARRAY
91659: EQUAL
91660: PUSH
91661: LD_VAR 0 4
91665: PUSH
91666: LD_VAR 0 1
91670: PPUSH
91671: CALL_OW 437
91675: PUSH
91676: LD_INT 1
91678: ARRAY
91679: PUSH
91680: LD_INT 2
91682: ARRAY
91683: EQUAL
91684: AND
91685: PUSH
91686: LD_VAR 0 5
91690: PUSH
91691: LD_VAR 0 1
91695: PPUSH
91696: CALL_OW 437
91700: PUSH
91701: LD_INT 1
91703: ARRAY
91704: PUSH
91705: LD_INT 3
91707: ARRAY
91708: EQUAL
91709: AND
91710: IFFALSE 91720
// result := true end ;
91712: LD_ADDR_VAR 0 3
91716: PUSH
91717: LD_INT 1
91719: ST_TO_ADDR
// end ;
91720: LD_VAR 0 3
91724: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
91725: LD_INT 0
91727: PPUSH
// result := false ;
91728: LD_ADDR_VAR 0 4
91732: PUSH
91733: LD_INT 0
91735: ST_TO_ADDR
// if GetTaskList ( unit ) then
91736: LD_VAR 0 1
91740: PPUSH
91741: CALL_OW 437
91745: IFFALSE 91828
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91747: LD_STRING M
91749: PUSH
91750: LD_VAR 0 1
91754: PPUSH
91755: CALL_OW 437
91759: PUSH
91760: LD_INT 1
91762: ARRAY
91763: PUSH
91764: LD_INT 1
91766: ARRAY
91767: EQUAL
91768: PUSH
91769: LD_VAR 0 2
91773: PUSH
91774: LD_VAR 0 1
91778: PPUSH
91779: CALL_OW 437
91783: PUSH
91784: LD_INT 1
91786: ARRAY
91787: PUSH
91788: LD_INT 2
91790: ARRAY
91791: EQUAL
91792: AND
91793: PUSH
91794: LD_VAR 0 3
91798: PUSH
91799: LD_VAR 0 1
91803: PPUSH
91804: CALL_OW 437
91808: PUSH
91809: LD_INT 1
91811: ARRAY
91812: PUSH
91813: LD_INT 3
91815: ARRAY
91816: EQUAL
91817: AND
91818: IFFALSE 91828
// result := true ;
91820: LD_ADDR_VAR 0 4
91824: PUSH
91825: LD_INT 1
91827: ST_TO_ADDR
// end ; end ;
91828: LD_VAR 0 4
91832: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
91833: LD_INT 0
91835: PPUSH
91836: PPUSH
91837: PPUSH
91838: PPUSH
// if not unit or not area then
91839: LD_VAR 0 1
91843: NOT
91844: PUSH
91845: LD_VAR 0 2
91849: NOT
91850: OR
91851: IFFALSE 91855
// exit ;
91853: GO 92031
// tmp := AreaToList ( area , i ) ;
91855: LD_ADDR_VAR 0 6
91859: PUSH
91860: LD_VAR 0 2
91864: PPUSH
91865: LD_VAR 0 5
91869: PPUSH
91870: CALL_OW 517
91874: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
91875: LD_ADDR_VAR 0 5
91879: PUSH
91880: DOUBLE
91881: LD_INT 1
91883: DEC
91884: ST_TO_ADDR
91885: LD_VAR 0 6
91889: PUSH
91890: LD_INT 1
91892: ARRAY
91893: PUSH
91894: FOR_TO
91895: IFFALSE 92029
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
91897: LD_ADDR_VAR 0 7
91901: PUSH
91902: LD_VAR 0 6
91906: PUSH
91907: LD_INT 1
91909: ARRAY
91910: PUSH
91911: LD_VAR 0 5
91915: ARRAY
91916: PUSH
91917: LD_VAR 0 6
91921: PUSH
91922: LD_INT 2
91924: ARRAY
91925: PUSH
91926: LD_VAR 0 5
91930: ARRAY
91931: PUSH
91932: EMPTY
91933: LIST
91934: LIST
91935: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
91936: LD_INT 92
91938: PUSH
91939: LD_VAR 0 7
91943: PUSH
91944: LD_INT 1
91946: ARRAY
91947: PUSH
91948: LD_VAR 0 7
91952: PUSH
91953: LD_INT 2
91955: ARRAY
91956: PUSH
91957: LD_INT 2
91959: PUSH
91960: EMPTY
91961: LIST
91962: LIST
91963: LIST
91964: LIST
91965: PPUSH
91966: CALL_OW 69
91970: PUSH
91971: LD_INT 0
91973: EQUAL
91974: IFFALSE 92027
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
91976: LD_VAR 0 1
91980: PPUSH
91981: LD_VAR 0 7
91985: PUSH
91986: LD_INT 1
91988: ARRAY
91989: PPUSH
91990: LD_VAR 0 7
91994: PUSH
91995: LD_INT 2
91997: ARRAY
91998: PPUSH
91999: LD_VAR 0 3
92003: PPUSH
92004: CALL_OW 48
// result := IsPlaced ( unit ) ;
92008: LD_ADDR_VAR 0 4
92012: PUSH
92013: LD_VAR 0 1
92017: PPUSH
92018: CALL_OW 305
92022: ST_TO_ADDR
// exit ;
92023: POP
92024: POP
92025: GO 92031
// end ; end ;
92027: GO 91894
92029: POP
92030: POP
// end ;
92031: LD_VAR 0 4
92035: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
92036: LD_INT 0
92038: PPUSH
92039: PPUSH
92040: PPUSH
// if not side or side > 8 then
92041: LD_VAR 0 1
92045: NOT
92046: PUSH
92047: LD_VAR 0 1
92051: PUSH
92052: LD_INT 8
92054: GREATER
92055: OR
92056: IFFALSE 92060
// exit ;
92058: GO 92247
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
92060: LD_ADDR_VAR 0 4
92064: PUSH
92065: LD_INT 22
92067: PUSH
92068: LD_VAR 0 1
92072: PUSH
92073: EMPTY
92074: LIST
92075: LIST
92076: PUSH
92077: LD_INT 21
92079: PUSH
92080: LD_INT 3
92082: PUSH
92083: EMPTY
92084: LIST
92085: LIST
92086: PUSH
92087: EMPTY
92088: LIST
92089: LIST
92090: PPUSH
92091: CALL_OW 69
92095: ST_TO_ADDR
// if not tmp then
92096: LD_VAR 0 4
92100: NOT
92101: IFFALSE 92105
// exit ;
92103: GO 92247
// enable_addtolog := true ;
92105: LD_ADDR_OWVAR 81
92109: PUSH
92110: LD_INT 1
92112: ST_TO_ADDR
// AddToLog ( [ ) ;
92113: LD_STRING [
92115: PPUSH
92116: CALL_OW 561
// for i in tmp do
92120: LD_ADDR_VAR 0 3
92124: PUSH
92125: LD_VAR 0 4
92129: PUSH
92130: FOR_IN
92131: IFFALSE 92238
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
92133: LD_STRING [
92135: PUSH
92136: LD_VAR 0 3
92140: PPUSH
92141: CALL_OW 266
92145: STR
92146: PUSH
92147: LD_STRING , 
92149: STR
92150: PUSH
92151: LD_VAR 0 3
92155: PPUSH
92156: CALL_OW 250
92160: STR
92161: PUSH
92162: LD_STRING , 
92164: STR
92165: PUSH
92166: LD_VAR 0 3
92170: PPUSH
92171: CALL_OW 251
92175: STR
92176: PUSH
92177: LD_STRING , 
92179: STR
92180: PUSH
92181: LD_VAR 0 3
92185: PPUSH
92186: CALL_OW 254
92190: STR
92191: PUSH
92192: LD_STRING , 
92194: STR
92195: PUSH
92196: LD_VAR 0 3
92200: PPUSH
92201: LD_INT 1
92203: PPUSH
92204: CALL_OW 268
92208: STR
92209: PUSH
92210: LD_STRING , 
92212: STR
92213: PUSH
92214: LD_VAR 0 3
92218: PPUSH
92219: LD_INT 2
92221: PPUSH
92222: CALL_OW 268
92226: STR
92227: PUSH
92228: LD_STRING ],
92230: STR
92231: PPUSH
92232: CALL_OW 561
// end ;
92236: GO 92130
92238: POP
92239: POP
// AddToLog ( ]; ) ;
92240: LD_STRING ];
92242: PPUSH
92243: CALL_OW 561
// end ;
92247: LD_VAR 0 2
92251: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
92252: LD_INT 0
92254: PPUSH
92255: PPUSH
92256: PPUSH
92257: PPUSH
92258: PPUSH
// if not area or not rate or not max then
92259: LD_VAR 0 1
92263: NOT
92264: PUSH
92265: LD_VAR 0 2
92269: NOT
92270: OR
92271: PUSH
92272: LD_VAR 0 4
92276: NOT
92277: OR
92278: IFFALSE 92282
// exit ;
92280: GO 92471
// while 1 do
92282: LD_INT 1
92284: IFFALSE 92471
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
92286: LD_ADDR_VAR 0 9
92290: PUSH
92291: LD_VAR 0 1
92295: PPUSH
92296: LD_INT 1
92298: PPUSH
92299: CALL_OW 287
92303: PUSH
92304: LD_INT 10
92306: MUL
92307: ST_TO_ADDR
// r := rate / 10 ;
92308: LD_ADDR_VAR 0 7
92312: PUSH
92313: LD_VAR 0 2
92317: PUSH
92318: LD_INT 10
92320: DIVREAL
92321: ST_TO_ADDR
// time := 1 1$00 ;
92322: LD_ADDR_VAR 0 8
92326: PUSH
92327: LD_INT 2100
92329: ST_TO_ADDR
// if amount < min then
92330: LD_VAR 0 9
92334: PUSH
92335: LD_VAR 0 3
92339: LESS
92340: IFFALSE 92358
// r := r * 2 else
92342: LD_ADDR_VAR 0 7
92346: PUSH
92347: LD_VAR 0 7
92351: PUSH
92352: LD_INT 2
92354: MUL
92355: ST_TO_ADDR
92356: GO 92384
// if amount > max then
92358: LD_VAR 0 9
92362: PUSH
92363: LD_VAR 0 4
92367: GREATER
92368: IFFALSE 92384
// r := r / 2 ;
92370: LD_ADDR_VAR 0 7
92374: PUSH
92375: LD_VAR 0 7
92379: PUSH
92380: LD_INT 2
92382: DIVREAL
92383: ST_TO_ADDR
// time := time / r ;
92384: LD_ADDR_VAR 0 8
92388: PUSH
92389: LD_VAR 0 8
92393: PUSH
92394: LD_VAR 0 7
92398: DIVREAL
92399: ST_TO_ADDR
// if time < 0 then
92400: LD_VAR 0 8
92404: PUSH
92405: LD_INT 0
92407: LESS
92408: IFFALSE 92425
// time := time * - 1 ;
92410: LD_ADDR_VAR 0 8
92414: PUSH
92415: LD_VAR 0 8
92419: PUSH
92420: LD_INT 1
92422: NEG
92423: MUL
92424: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
92425: LD_VAR 0 8
92429: PUSH
92430: LD_INT 35
92432: PPUSH
92433: LD_INT 875
92435: PPUSH
92436: CALL_OW 12
92440: PLUS
92441: PPUSH
92442: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
92446: LD_INT 1
92448: PPUSH
92449: LD_INT 5
92451: PPUSH
92452: CALL_OW 12
92456: PPUSH
92457: LD_VAR 0 1
92461: PPUSH
92462: LD_INT 1
92464: PPUSH
92465: CALL_OW 55
// end ;
92469: GO 92282
// end ;
92471: LD_VAR 0 5
92475: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
92476: LD_INT 0
92478: PPUSH
92479: PPUSH
92480: PPUSH
92481: PPUSH
92482: PPUSH
92483: PPUSH
92484: PPUSH
92485: PPUSH
// if not turrets or not factories then
92486: LD_VAR 0 1
92490: NOT
92491: PUSH
92492: LD_VAR 0 2
92496: NOT
92497: OR
92498: IFFALSE 92502
// exit ;
92500: GO 92809
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
92502: LD_ADDR_VAR 0 10
92506: PUSH
92507: LD_INT 5
92509: PUSH
92510: LD_INT 6
92512: PUSH
92513: EMPTY
92514: LIST
92515: LIST
92516: PUSH
92517: LD_INT 2
92519: PUSH
92520: LD_INT 4
92522: PUSH
92523: EMPTY
92524: LIST
92525: LIST
92526: PUSH
92527: LD_INT 3
92529: PUSH
92530: LD_INT 5
92532: PUSH
92533: EMPTY
92534: LIST
92535: LIST
92536: PUSH
92537: EMPTY
92538: LIST
92539: LIST
92540: LIST
92541: PUSH
92542: LD_INT 24
92544: PUSH
92545: LD_INT 25
92547: PUSH
92548: EMPTY
92549: LIST
92550: LIST
92551: PUSH
92552: LD_INT 23
92554: PUSH
92555: LD_INT 27
92557: PUSH
92558: EMPTY
92559: LIST
92560: LIST
92561: PUSH
92562: EMPTY
92563: LIST
92564: LIST
92565: PUSH
92566: LD_INT 42
92568: PUSH
92569: LD_INT 43
92571: PUSH
92572: EMPTY
92573: LIST
92574: LIST
92575: PUSH
92576: LD_INT 44
92578: PUSH
92579: LD_INT 46
92581: PUSH
92582: EMPTY
92583: LIST
92584: LIST
92585: PUSH
92586: LD_INT 45
92588: PUSH
92589: LD_INT 47
92591: PUSH
92592: EMPTY
92593: LIST
92594: LIST
92595: PUSH
92596: EMPTY
92597: LIST
92598: LIST
92599: LIST
92600: PUSH
92601: EMPTY
92602: LIST
92603: LIST
92604: LIST
92605: ST_TO_ADDR
// result := [ ] ;
92606: LD_ADDR_VAR 0 3
92610: PUSH
92611: EMPTY
92612: ST_TO_ADDR
// for i in turrets do
92613: LD_ADDR_VAR 0 4
92617: PUSH
92618: LD_VAR 0 1
92622: PUSH
92623: FOR_IN
92624: IFFALSE 92807
// begin nat := GetNation ( i ) ;
92626: LD_ADDR_VAR 0 7
92630: PUSH
92631: LD_VAR 0 4
92635: PPUSH
92636: CALL_OW 248
92640: ST_TO_ADDR
// weapon := 0 ;
92641: LD_ADDR_VAR 0 8
92645: PUSH
92646: LD_INT 0
92648: ST_TO_ADDR
// if not nat then
92649: LD_VAR 0 7
92653: NOT
92654: IFFALSE 92658
// continue ;
92656: GO 92623
// for j in list [ nat ] do
92658: LD_ADDR_VAR 0 5
92662: PUSH
92663: LD_VAR 0 10
92667: PUSH
92668: LD_VAR 0 7
92672: ARRAY
92673: PUSH
92674: FOR_IN
92675: IFFALSE 92716
// if GetBWeapon ( i ) = j [ 1 ] then
92677: LD_VAR 0 4
92681: PPUSH
92682: CALL_OW 269
92686: PUSH
92687: LD_VAR 0 5
92691: PUSH
92692: LD_INT 1
92694: ARRAY
92695: EQUAL
92696: IFFALSE 92714
// begin weapon := j [ 2 ] ;
92698: LD_ADDR_VAR 0 8
92702: PUSH
92703: LD_VAR 0 5
92707: PUSH
92708: LD_INT 2
92710: ARRAY
92711: ST_TO_ADDR
// break ;
92712: GO 92716
// end ;
92714: GO 92674
92716: POP
92717: POP
// if not weapon then
92718: LD_VAR 0 8
92722: NOT
92723: IFFALSE 92727
// continue ;
92725: GO 92623
// for k in factories do
92727: LD_ADDR_VAR 0 6
92731: PUSH
92732: LD_VAR 0 2
92736: PUSH
92737: FOR_IN
92738: IFFALSE 92803
// begin weapons := AvailableWeaponList ( k ) ;
92740: LD_ADDR_VAR 0 9
92744: PUSH
92745: LD_VAR 0 6
92749: PPUSH
92750: CALL_OW 478
92754: ST_TO_ADDR
// if not weapons then
92755: LD_VAR 0 9
92759: NOT
92760: IFFALSE 92764
// continue ;
92762: GO 92737
// if weapon in weapons then
92764: LD_VAR 0 8
92768: PUSH
92769: LD_VAR 0 9
92773: IN
92774: IFFALSE 92801
// begin result := [ i , weapon ] ;
92776: LD_ADDR_VAR 0 3
92780: PUSH
92781: LD_VAR 0 4
92785: PUSH
92786: LD_VAR 0 8
92790: PUSH
92791: EMPTY
92792: LIST
92793: LIST
92794: ST_TO_ADDR
// exit ;
92795: POP
92796: POP
92797: POP
92798: POP
92799: GO 92809
// end ; end ;
92801: GO 92737
92803: POP
92804: POP
// end ;
92805: GO 92623
92807: POP
92808: POP
// end ;
92809: LD_VAR 0 3
92813: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
92814: LD_INT 0
92816: PPUSH
// if not side or side > 8 then
92817: LD_VAR 0 3
92821: NOT
92822: PUSH
92823: LD_VAR 0 3
92827: PUSH
92828: LD_INT 8
92830: GREATER
92831: OR
92832: IFFALSE 92836
// exit ;
92834: GO 92895
// if not range then
92836: LD_VAR 0 4
92840: NOT
92841: IFFALSE 92852
// range := - 12 ;
92843: LD_ADDR_VAR 0 4
92847: PUSH
92848: LD_INT 12
92850: NEG
92851: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
92852: LD_VAR 0 1
92856: PPUSH
92857: LD_VAR 0 2
92861: PPUSH
92862: LD_VAR 0 3
92866: PPUSH
92867: LD_VAR 0 4
92871: PPUSH
92872: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
92876: LD_VAR 0 1
92880: PPUSH
92881: LD_VAR 0 2
92885: PPUSH
92886: LD_VAR 0 3
92890: PPUSH
92891: CALL_OW 331
// end ;
92895: LD_VAR 0 5
92899: RET
// export function Video ( mode ) ; begin
92900: LD_INT 0
92902: PPUSH
// ingame_video = mode ;
92903: LD_ADDR_OWVAR 52
92907: PUSH
92908: LD_VAR 0 1
92912: ST_TO_ADDR
// interface_hidden = mode ;
92913: LD_ADDR_OWVAR 54
92917: PUSH
92918: LD_VAR 0 1
92922: ST_TO_ADDR
// end ;
92923: LD_VAR 0 2
92927: RET
// export function Join ( array , element ) ; begin
92928: LD_INT 0
92930: PPUSH
// result := Replace ( array , array + 1 , element ) ;
92931: LD_ADDR_VAR 0 3
92935: PUSH
92936: LD_VAR 0 1
92940: PPUSH
92941: LD_VAR 0 1
92945: PUSH
92946: LD_INT 1
92948: PLUS
92949: PPUSH
92950: LD_VAR 0 2
92954: PPUSH
92955: CALL_OW 1
92959: ST_TO_ADDR
// end ;
92960: LD_VAR 0 3
92964: RET
// export function JoinUnion ( array , element ) ; begin
92965: LD_INT 0
92967: PPUSH
// result := array union element ;
92968: LD_ADDR_VAR 0 3
92972: PUSH
92973: LD_VAR 0 1
92977: PUSH
92978: LD_VAR 0 2
92982: UNION
92983: ST_TO_ADDR
// end ;
92984: LD_VAR 0 3
92988: RET
// export function GetBehemoths ( side ) ; begin
92989: LD_INT 0
92991: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
92992: LD_ADDR_VAR 0 2
92996: PUSH
92997: LD_INT 22
92999: PUSH
93000: LD_VAR 0 1
93004: PUSH
93005: EMPTY
93006: LIST
93007: LIST
93008: PUSH
93009: LD_INT 31
93011: PUSH
93012: LD_INT 25
93014: PUSH
93015: EMPTY
93016: LIST
93017: LIST
93018: PUSH
93019: EMPTY
93020: LIST
93021: LIST
93022: PPUSH
93023: CALL_OW 69
93027: ST_TO_ADDR
// end ;
93028: LD_VAR 0 2
93032: RET
// export function Shuffle ( array ) ; var i , index ; begin
93033: LD_INT 0
93035: PPUSH
93036: PPUSH
93037: PPUSH
// result := [ ] ;
93038: LD_ADDR_VAR 0 2
93042: PUSH
93043: EMPTY
93044: ST_TO_ADDR
// if not array then
93045: LD_VAR 0 1
93049: NOT
93050: IFFALSE 93054
// exit ;
93052: GO 93153
// Randomize ;
93054: CALL_OW 10
// for i = array downto 1 do
93058: LD_ADDR_VAR 0 3
93062: PUSH
93063: DOUBLE
93064: LD_VAR 0 1
93068: INC
93069: ST_TO_ADDR
93070: LD_INT 1
93072: PUSH
93073: FOR_DOWNTO
93074: IFFALSE 93151
// begin index := rand ( 1 , array ) ;
93076: LD_ADDR_VAR 0 4
93080: PUSH
93081: LD_INT 1
93083: PPUSH
93084: LD_VAR 0 1
93088: PPUSH
93089: CALL_OW 12
93093: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
93094: LD_ADDR_VAR 0 2
93098: PUSH
93099: LD_VAR 0 2
93103: PPUSH
93104: LD_VAR 0 2
93108: PUSH
93109: LD_INT 1
93111: PLUS
93112: PPUSH
93113: LD_VAR 0 1
93117: PUSH
93118: LD_VAR 0 4
93122: ARRAY
93123: PPUSH
93124: CALL_OW 2
93128: ST_TO_ADDR
// array := Delete ( array , index ) ;
93129: LD_ADDR_VAR 0 1
93133: PUSH
93134: LD_VAR 0 1
93138: PPUSH
93139: LD_VAR 0 4
93143: PPUSH
93144: CALL_OW 3
93148: ST_TO_ADDR
// end ;
93149: GO 93073
93151: POP
93152: POP
// end ;
93153: LD_VAR 0 2
93157: RET
// export function GetBaseMaterials ( base ) ; begin
93158: LD_INT 0
93160: PPUSH
// result := [ 0 , 0 , 0 ] ;
93161: LD_ADDR_VAR 0 2
93165: PUSH
93166: LD_INT 0
93168: PUSH
93169: LD_INT 0
93171: PUSH
93172: LD_INT 0
93174: PUSH
93175: EMPTY
93176: LIST
93177: LIST
93178: LIST
93179: ST_TO_ADDR
// if not base then
93180: LD_VAR 0 1
93184: NOT
93185: IFFALSE 93189
// exit ;
93187: GO 93238
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
93189: LD_ADDR_VAR 0 2
93193: PUSH
93194: LD_VAR 0 1
93198: PPUSH
93199: LD_INT 1
93201: PPUSH
93202: CALL_OW 275
93206: PUSH
93207: LD_VAR 0 1
93211: PPUSH
93212: LD_INT 2
93214: PPUSH
93215: CALL_OW 275
93219: PUSH
93220: LD_VAR 0 1
93224: PPUSH
93225: LD_INT 3
93227: PPUSH
93228: CALL_OW 275
93232: PUSH
93233: EMPTY
93234: LIST
93235: LIST
93236: LIST
93237: ST_TO_ADDR
// end ;
93238: LD_VAR 0 2
93242: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
93243: LD_INT 0
93245: PPUSH
93246: PPUSH
// result := array ;
93247: LD_ADDR_VAR 0 3
93251: PUSH
93252: LD_VAR 0 1
93256: ST_TO_ADDR
// if size >= result then
93257: LD_VAR 0 2
93261: PUSH
93262: LD_VAR 0 3
93266: GREATEREQUAL
93267: IFFALSE 93271
// exit ;
93269: GO 93321
// if size then
93271: LD_VAR 0 2
93275: IFFALSE 93321
// for i := array downto size do
93277: LD_ADDR_VAR 0 4
93281: PUSH
93282: DOUBLE
93283: LD_VAR 0 1
93287: INC
93288: ST_TO_ADDR
93289: LD_VAR 0 2
93293: PUSH
93294: FOR_DOWNTO
93295: IFFALSE 93319
// result := Delete ( result , result ) ;
93297: LD_ADDR_VAR 0 3
93301: PUSH
93302: LD_VAR 0 3
93306: PPUSH
93307: LD_VAR 0 3
93311: PPUSH
93312: CALL_OW 3
93316: ST_TO_ADDR
93317: GO 93294
93319: POP
93320: POP
// end ;
93321: LD_VAR 0 3
93325: RET
// export function ComExit ( unit ) ; var tmp ; begin
93326: LD_INT 0
93328: PPUSH
93329: PPUSH
// if not IsInUnit ( unit ) then
93330: LD_VAR 0 1
93334: PPUSH
93335: CALL_OW 310
93339: NOT
93340: IFFALSE 93344
// exit ;
93342: GO 93404
// tmp := IsInUnit ( unit ) ;
93344: LD_ADDR_VAR 0 3
93348: PUSH
93349: LD_VAR 0 1
93353: PPUSH
93354: CALL_OW 310
93358: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
93359: LD_VAR 0 3
93363: PPUSH
93364: CALL_OW 247
93368: PUSH
93369: LD_INT 2
93371: EQUAL
93372: IFFALSE 93385
// ComExitVehicle ( unit ) else
93374: LD_VAR 0 1
93378: PPUSH
93379: CALL_OW 121
93383: GO 93394
// ComExitBuilding ( unit ) ;
93385: LD_VAR 0 1
93389: PPUSH
93390: CALL_OW 122
// result := tmp ;
93394: LD_ADDR_VAR 0 2
93398: PUSH
93399: LD_VAR 0 3
93403: ST_TO_ADDR
// end ;
93404: LD_VAR 0 2
93408: RET
// export function ComExitAll ( units ) ; var i ; begin
93409: LD_INT 0
93411: PPUSH
93412: PPUSH
// if not units then
93413: LD_VAR 0 1
93417: NOT
93418: IFFALSE 93422
// exit ;
93420: GO 93448
// for i in units do
93422: LD_ADDR_VAR 0 3
93426: PUSH
93427: LD_VAR 0 1
93431: PUSH
93432: FOR_IN
93433: IFFALSE 93446
// ComExit ( i ) ;
93435: LD_VAR 0 3
93439: PPUSH
93440: CALL 93326 0 1
93444: GO 93432
93446: POP
93447: POP
// end ;
93448: LD_VAR 0 2
93452: RET
// export function ResetHc ; begin
93453: LD_INT 0
93455: PPUSH
// InitHc ;
93456: CALL_OW 19
// hc_importance := 0 ;
93460: LD_ADDR_OWVAR 32
93464: PUSH
93465: LD_INT 0
93467: ST_TO_ADDR
// end ;
93468: LD_VAR 0 1
93472: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
93473: LD_INT 0
93475: PPUSH
93476: PPUSH
93477: PPUSH
// _x := ( x1 + x2 ) div 2 ;
93478: LD_ADDR_VAR 0 6
93482: PUSH
93483: LD_VAR 0 1
93487: PUSH
93488: LD_VAR 0 3
93492: PLUS
93493: PUSH
93494: LD_INT 2
93496: DIV
93497: ST_TO_ADDR
// if _x < 0 then
93498: LD_VAR 0 6
93502: PUSH
93503: LD_INT 0
93505: LESS
93506: IFFALSE 93523
// _x := _x * - 1 ;
93508: LD_ADDR_VAR 0 6
93512: PUSH
93513: LD_VAR 0 6
93517: PUSH
93518: LD_INT 1
93520: NEG
93521: MUL
93522: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
93523: LD_ADDR_VAR 0 7
93527: PUSH
93528: LD_VAR 0 2
93532: PUSH
93533: LD_VAR 0 4
93537: PLUS
93538: PUSH
93539: LD_INT 2
93541: DIV
93542: ST_TO_ADDR
// if _y < 0 then
93543: LD_VAR 0 7
93547: PUSH
93548: LD_INT 0
93550: LESS
93551: IFFALSE 93568
// _y := _y * - 1 ;
93553: LD_ADDR_VAR 0 7
93557: PUSH
93558: LD_VAR 0 7
93562: PUSH
93563: LD_INT 1
93565: NEG
93566: MUL
93567: ST_TO_ADDR
// result := [ _x , _y ] ;
93568: LD_ADDR_VAR 0 5
93572: PUSH
93573: LD_VAR 0 6
93577: PUSH
93578: LD_VAR 0 7
93582: PUSH
93583: EMPTY
93584: LIST
93585: LIST
93586: ST_TO_ADDR
// end ;
93587: LD_VAR 0 5
93591: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
93592: LD_INT 0
93594: PPUSH
93595: PPUSH
93596: PPUSH
93597: PPUSH
// task := GetTaskList ( unit ) ;
93598: LD_ADDR_VAR 0 7
93602: PUSH
93603: LD_VAR 0 1
93607: PPUSH
93608: CALL_OW 437
93612: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
93613: LD_VAR 0 7
93617: NOT
93618: PUSH
93619: LD_VAR 0 1
93623: PPUSH
93624: LD_VAR 0 2
93628: PPUSH
93629: CALL_OW 308
93633: NOT
93634: AND
93635: IFFALSE 93639
// exit ;
93637: GO 93757
// if IsInArea ( unit , area ) then
93639: LD_VAR 0 1
93643: PPUSH
93644: LD_VAR 0 2
93648: PPUSH
93649: CALL_OW 308
93653: IFFALSE 93671
// begin ComMoveToArea ( unit , goAway ) ;
93655: LD_VAR 0 1
93659: PPUSH
93660: LD_VAR 0 3
93664: PPUSH
93665: CALL_OW 113
// exit ;
93669: GO 93757
// end ; if task [ 1 ] [ 1 ] <> M then
93671: LD_VAR 0 7
93675: PUSH
93676: LD_INT 1
93678: ARRAY
93679: PUSH
93680: LD_INT 1
93682: ARRAY
93683: PUSH
93684: LD_STRING M
93686: NONEQUAL
93687: IFFALSE 93691
// exit ;
93689: GO 93757
// x := task [ 1 ] [ 2 ] ;
93691: LD_ADDR_VAR 0 5
93695: PUSH
93696: LD_VAR 0 7
93700: PUSH
93701: LD_INT 1
93703: ARRAY
93704: PUSH
93705: LD_INT 2
93707: ARRAY
93708: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
93709: LD_ADDR_VAR 0 6
93713: PUSH
93714: LD_VAR 0 7
93718: PUSH
93719: LD_INT 1
93721: ARRAY
93722: PUSH
93723: LD_INT 3
93725: ARRAY
93726: ST_TO_ADDR
// if InArea ( x , y , area ) then
93727: LD_VAR 0 5
93731: PPUSH
93732: LD_VAR 0 6
93736: PPUSH
93737: LD_VAR 0 2
93741: PPUSH
93742: CALL_OW 309
93746: IFFALSE 93757
// ComStop ( unit ) ;
93748: LD_VAR 0 1
93752: PPUSH
93753: CALL_OW 141
// end ;
93757: LD_VAR 0 4
93761: RET
// export function Abs ( value ) ; begin
93762: LD_INT 0
93764: PPUSH
// result := value ;
93765: LD_ADDR_VAR 0 2
93769: PUSH
93770: LD_VAR 0 1
93774: ST_TO_ADDR
// if value < 0 then
93775: LD_VAR 0 1
93779: PUSH
93780: LD_INT 0
93782: LESS
93783: IFFALSE 93800
// result := value * - 1 ;
93785: LD_ADDR_VAR 0 2
93789: PUSH
93790: LD_VAR 0 1
93794: PUSH
93795: LD_INT 1
93797: NEG
93798: MUL
93799: ST_TO_ADDR
// end ;
93800: LD_VAR 0 2
93804: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
93805: LD_INT 0
93807: PPUSH
93808: PPUSH
93809: PPUSH
93810: PPUSH
93811: PPUSH
93812: PPUSH
93813: PPUSH
93814: PPUSH
// if not unit or not building then
93815: LD_VAR 0 1
93819: NOT
93820: PUSH
93821: LD_VAR 0 2
93825: NOT
93826: OR
93827: IFFALSE 93831
// exit ;
93829: GO 94057
// x := GetX ( building ) ;
93831: LD_ADDR_VAR 0 4
93835: PUSH
93836: LD_VAR 0 2
93840: PPUSH
93841: CALL_OW 250
93845: ST_TO_ADDR
// y := GetY ( building ) ;
93846: LD_ADDR_VAR 0 6
93850: PUSH
93851: LD_VAR 0 2
93855: PPUSH
93856: CALL_OW 251
93860: ST_TO_ADDR
// d := GetDir ( building ) ;
93861: LD_ADDR_VAR 0 8
93865: PUSH
93866: LD_VAR 0 2
93870: PPUSH
93871: CALL_OW 254
93875: ST_TO_ADDR
// r := 4 ;
93876: LD_ADDR_VAR 0 9
93880: PUSH
93881: LD_INT 4
93883: ST_TO_ADDR
// for i := 1 to 5 do
93884: LD_ADDR_VAR 0 10
93888: PUSH
93889: DOUBLE
93890: LD_INT 1
93892: DEC
93893: ST_TO_ADDR
93894: LD_INT 5
93896: PUSH
93897: FOR_TO
93898: IFFALSE 94055
// begin _x := ShiftX ( x , d , r + i ) ;
93900: LD_ADDR_VAR 0 5
93904: PUSH
93905: LD_VAR 0 4
93909: PPUSH
93910: LD_VAR 0 8
93914: PPUSH
93915: LD_VAR 0 9
93919: PUSH
93920: LD_VAR 0 10
93924: PLUS
93925: PPUSH
93926: CALL_OW 272
93930: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
93931: LD_ADDR_VAR 0 7
93935: PUSH
93936: LD_VAR 0 6
93940: PPUSH
93941: LD_VAR 0 8
93945: PPUSH
93946: LD_VAR 0 9
93950: PUSH
93951: LD_VAR 0 10
93955: PLUS
93956: PPUSH
93957: CALL_OW 273
93961: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
93962: LD_VAR 0 5
93966: PPUSH
93967: LD_VAR 0 7
93971: PPUSH
93972: CALL_OW 488
93976: PUSH
93977: LD_VAR 0 5
93981: PPUSH
93982: LD_VAR 0 7
93986: PPUSH
93987: CALL_OW 428
93991: PPUSH
93992: CALL_OW 247
93996: PUSH
93997: LD_INT 3
93999: PUSH
94000: LD_INT 2
94002: PUSH
94003: EMPTY
94004: LIST
94005: LIST
94006: IN
94007: NOT
94008: AND
94009: IFFALSE 94053
// begin ComMoveXY ( unit , _x , _y ) ;
94011: LD_VAR 0 1
94015: PPUSH
94016: LD_VAR 0 5
94020: PPUSH
94021: LD_VAR 0 7
94025: PPUSH
94026: CALL_OW 111
// result := [ _x , _y ] ;
94030: LD_ADDR_VAR 0 3
94034: PUSH
94035: LD_VAR 0 5
94039: PUSH
94040: LD_VAR 0 7
94044: PUSH
94045: EMPTY
94046: LIST
94047: LIST
94048: ST_TO_ADDR
// exit ;
94049: POP
94050: POP
94051: GO 94057
// end ; end ;
94053: GO 93897
94055: POP
94056: POP
// end ;
94057: LD_VAR 0 3
94061: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
94062: LD_INT 0
94064: PPUSH
94065: PPUSH
94066: PPUSH
// result := 0 ;
94067: LD_ADDR_VAR 0 3
94071: PUSH
94072: LD_INT 0
94074: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
94075: LD_VAR 0 1
94079: PUSH
94080: LD_INT 0
94082: LESS
94083: PUSH
94084: LD_VAR 0 1
94088: PUSH
94089: LD_INT 8
94091: GREATER
94092: OR
94093: PUSH
94094: LD_VAR 0 2
94098: PUSH
94099: LD_INT 0
94101: LESS
94102: OR
94103: PUSH
94104: LD_VAR 0 2
94108: PUSH
94109: LD_INT 8
94111: GREATER
94112: OR
94113: IFFALSE 94117
// exit ;
94115: GO 94192
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
94117: LD_ADDR_VAR 0 4
94121: PUSH
94122: LD_INT 22
94124: PUSH
94125: LD_VAR 0 2
94129: PUSH
94130: EMPTY
94131: LIST
94132: LIST
94133: PPUSH
94134: CALL_OW 69
94138: PUSH
94139: FOR_IN
94140: IFFALSE 94190
// begin un := UnitShoot ( i ) ;
94142: LD_ADDR_VAR 0 5
94146: PUSH
94147: LD_VAR 0 4
94151: PPUSH
94152: CALL_OW 504
94156: ST_TO_ADDR
// if GetSide ( un ) = side1 then
94157: LD_VAR 0 5
94161: PPUSH
94162: CALL_OW 255
94166: PUSH
94167: LD_VAR 0 1
94171: EQUAL
94172: IFFALSE 94188
// begin result := un ;
94174: LD_ADDR_VAR 0 3
94178: PUSH
94179: LD_VAR 0 5
94183: ST_TO_ADDR
// exit ;
94184: POP
94185: POP
94186: GO 94192
// end ; end ;
94188: GO 94139
94190: POP
94191: POP
// end ;
94192: LD_VAR 0 3
94196: RET
// export function GetCargoBay ( units ) ; begin
94197: LD_INT 0
94199: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
94200: LD_ADDR_VAR 0 2
94204: PUSH
94205: LD_VAR 0 1
94209: PPUSH
94210: LD_INT 2
94212: PUSH
94213: LD_INT 34
94215: PUSH
94216: LD_INT 12
94218: PUSH
94219: EMPTY
94220: LIST
94221: LIST
94222: PUSH
94223: LD_INT 34
94225: PUSH
94226: LD_INT 51
94228: PUSH
94229: EMPTY
94230: LIST
94231: LIST
94232: PUSH
94233: LD_INT 34
94235: PUSH
94236: LD_INT 32
94238: PUSH
94239: EMPTY
94240: LIST
94241: LIST
94242: PUSH
94243: LD_INT 34
94245: PUSH
94246: LD_INT 89
94248: PUSH
94249: EMPTY
94250: LIST
94251: LIST
94252: PUSH
94253: EMPTY
94254: LIST
94255: LIST
94256: LIST
94257: LIST
94258: LIST
94259: PPUSH
94260: CALL_OW 72
94264: ST_TO_ADDR
// end ;
94265: LD_VAR 0 2
94269: RET
// export function Negate ( value ) ; begin
94270: LD_INT 0
94272: PPUSH
// result := not value ;
94273: LD_ADDR_VAR 0 2
94277: PUSH
94278: LD_VAR 0 1
94282: NOT
94283: ST_TO_ADDR
// end ;
94284: LD_VAR 0 2
94288: RET
// export function Inc ( value ) ; begin
94289: LD_INT 0
94291: PPUSH
// result := value + 1 ;
94292: LD_ADDR_VAR 0 2
94296: PUSH
94297: LD_VAR 0 1
94301: PUSH
94302: LD_INT 1
94304: PLUS
94305: ST_TO_ADDR
// end ;
94306: LD_VAR 0 2
94310: RET
// export function Dec ( value ) ; begin
94311: LD_INT 0
94313: PPUSH
// result := value - 1 ;
94314: LD_ADDR_VAR 0 2
94318: PUSH
94319: LD_VAR 0 1
94323: PUSH
94324: LD_INT 1
94326: MINUS
94327: ST_TO_ADDR
// end ;
94328: LD_VAR 0 2
94332: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
94333: LD_INT 0
94335: PPUSH
94336: PPUSH
94337: PPUSH
94338: PPUSH
94339: PPUSH
94340: PPUSH
94341: PPUSH
94342: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
94343: LD_VAR 0 1
94347: PPUSH
94348: LD_VAR 0 2
94352: PPUSH
94353: CALL_OW 488
94357: NOT
94358: PUSH
94359: LD_VAR 0 3
94363: PPUSH
94364: LD_VAR 0 4
94368: PPUSH
94369: CALL_OW 488
94373: NOT
94374: OR
94375: IFFALSE 94388
// begin result := - 1 ;
94377: LD_ADDR_VAR 0 5
94381: PUSH
94382: LD_INT 1
94384: NEG
94385: ST_TO_ADDR
// exit ;
94386: GO 94623
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
94388: LD_ADDR_VAR 0 12
94392: PUSH
94393: LD_VAR 0 1
94397: PPUSH
94398: LD_VAR 0 2
94402: PPUSH
94403: LD_VAR 0 3
94407: PPUSH
94408: LD_VAR 0 4
94412: PPUSH
94413: CALL 93473 0 4
94417: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
94418: LD_ADDR_VAR 0 11
94422: PUSH
94423: LD_VAR 0 1
94427: PPUSH
94428: LD_VAR 0 2
94432: PPUSH
94433: LD_VAR 0 12
94437: PUSH
94438: LD_INT 1
94440: ARRAY
94441: PPUSH
94442: LD_VAR 0 12
94446: PUSH
94447: LD_INT 2
94449: ARRAY
94450: PPUSH
94451: CALL_OW 298
94455: ST_TO_ADDR
// distance := 9999 ;
94456: LD_ADDR_VAR 0 10
94460: PUSH
94461: LD_INT 9999
94463: ST_TO_ADDR
// for i := 0 to 5 do
94464: LD_ADDR_VAR 0 6
94468: PUSH
94469: DOUBLE
94470: LD_INT 0
94472: DEC
94473: ST_TO_ADDR
94474: LD_INT 5
94476: PUSH
94477: FOR_TO
94478: IFFALSE 94621
// begin _x := ShiftX ( x1 , i , centerDist ) ;
94480: LD_ADDR_VAR 0 7
94484: PUSH
94485: LD_VAR 0 1
94489: PPUSH
94490: LD_VAR 0 6
94494: PPUSH
94495: LD_VAR 0 11
94499: PPUSH
94500: CALL_OW 272
94504: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
94505: LD_ADDR_VAR 0 8
94509: PUSH
94510: LD_VAR 0 2
94514: PPUSH
94515: LD_VAR 0 6
94519: PPUSH
94520: LD_VAR 0 11
94524: PPUSH
94525: CALL_OW 273
94529: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
94530: LD_VAR 0 7
94534: PPUSH
94535: LD_VAR 0 8
94539: PPUSH
94540: CALL_OW 488
94544: NOT
94545: IFFALSE 94549
// continue ;
94547: GO 94477
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
94549: LD_ADDR_VAR 0 9
94553: PUSH
94554: LD_VAR 0 12
94558: PUSH
94559: LD_INT 1
94561: ARRAY
94562: PPUSH
94563: LD_VAR 0 12
94567: PUSH
94568: LD_INT 2
94570: ARRAY
94571: PPUSH
94572: LD_VAR 0 7
94576: PPUSH
94577: LD_VAR 0 8
94581: PPUSH
94582: CALL_OW 298
94586: ST_TO_ADDR
// if tmp < distance then
94587: LD_VAR 0 9
94591: PUSH
94592: LD_VAR 0 10
94596: LESS
94597: IFFALSE 94619
// begin result := i ;
94599: LD_ADDR_VAR 0 5
94603: PUSH
94604: LD_VAR 0 6
94608: ST_TO_ADDR
// distance := tmp ;
94609: LD_ADDR_VAR 0 10
94613: PUSH
94614: LD_VAR 0 9
94618: ST_TO_ADDR
// end ; end ;
94619: GO 94477
94621: POP
94622: POP
// end ;
94623: LD_VAR 0 5
94627: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94628: LD_INT 0
94630: PPUSH
94631: PPUSH
// if not driver or not IsInUnit ( driver ) then
94632: LD_VAR 0 1
94636: NOT
94637: PUSH
94638: LD_VAR 0 1
94642: PPUSH
94643: CALL_OW 310
94647: NOT
94648: OR
94649: IFFALSE 94653
// exit ;
94651: GO 94743
// vehicle := IsInUnit ( driver ) ;
94653: LD_ADDR_VAR 0 3
94657: PUSH
94658: LD_VAR 0 1
94662: PPUSH
94663: CALL_OW 310
94667: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94668: LD_VAR 0 1
94672: PPUSH
94673: LD_STRING \
94675: PUSH
94676: LD_INT 0
94678: PUSH
94679: LD_INT 0
94681: PUSH
94682: LD_INT 0
94684: PUSH
94685: LD_INT 0
94687: PUSH
94688: LD_INT 0
94690: PUSH
94691: LD_INT 0
94693: PUSH
94694: EMPTY
94695: LIST
94696: LIST
94697: LIST
94698: LIST
94699: LIST
94700: LIST
94701: LIST
94702: PUSH
94703: LD_STRING E
94705: PUSH
94706: LD_INT 0
94708: PUSH
94709: LD_INT 0
94711: PUSH
94712: LD_VAR 0 3
94716: PUSH
94717: LD_INT 0
94719: PUSH
94720: LD_INT 0
94722: PUSH
94723: LD_INT 0
94725: PUSH
94726: EMPTY
94727: LIST
94728: LIST
94729: LIST
94730: LIST
94731: LIST
94732: LIST
94733: LIST
94734: PUSH
94735: EMPTY
94736: LIST
94737: LIST
94738: PPUSH
94739: CALL_OW 446
// end ;
94743: LD_VAR 0 2
94747: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94748: LD_INT 0
94750: PPUSH
94751: PPUSH
// if not driver or not IsInUnit ( driver ) then
94752: LD_VAR 0 1
94756: NOT
94757: PUSH
94758: LD_VAR 0 1
94762: PPUSH
94763: CALL_OW 310
94767: NOT
94768: OR
94769: IFFALSE 94773
// exit ;
94771: GO 94863
// vehicle := IsInUnit ( driver ) ;
94773: LD_ADDR_VAR 0 3
94777: PUSH
94778: LD_VAR 0 1
94782: PPUSH
94783: CALL_OW 310
94787: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94788: LD_VAR 0 1
94792: PPUSH
94793: LD_STRING \
94795: PUSH
94796: LD_INT 0
94798: PUSH
94799: LD_INT 0
94801: PUSH
94802: LD_INT 0
94804: PUSH
94805: LD_INT 0
94807: PUSH
94808: LD_INT 0
94810: PUSH
94811: LD_INT 0
94813: PUSH
94814: EMPTY
94815: LIST
94816: LIST
94817: LIST
94818: LIST
94819: LIST
94820: LIST
94821: LIST
94822: PUSH
94823: LD_STRING E
94825: PUSH
94826: LD_INT 0
94828: PUSH
94829: LD_INT 0
94831: PUSH
94832: LD_VAR 0 3
94836: PUSH
94837: LD_INT 0
94839: PUSH
94840: LD_INT 0
94842: PUSH
94843: LD_INT 0
94845: PUSH
94846: EMPTY
94847: LIST
94848: LIST
94849: LIST
94850: LIST
94851: LIST
94852: LIST
94853: LIST
94854: PUSH
94855: EMPTY
94856: LIST
94857: LIST
94858: PPUSH
94859: CALL_OW 447
// end ;
94863: LD_VAR 0 2
94867: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
94868: LD_INT 0
94870: PPUSH
94871: PPUSH
94872: PPUSH
// tmp := [ ] ;
94873: LD_ADDR_VAR 0 5
94877: PUSH
94878: EMPTY
94879: ST_TO_ADDR
// for i in units do
94880: LD_ADDR_VAR 0 4
94884: PUSH
94885: LD_VAR 0 1
94889: PUSH
94890: FOR_IN
94891: IFFALSE 94929
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
94893: LD_ADDR_VAR 0 5
94897: PUSH
94898: LD_VAR 0 5
94902: PPUSH
94903: LD_VAR 0 5
94907: PUSH
94908: LD_INT 1
94910: PLUS
94911: PPUSH
94912: LD_VAR 0 4
94916: PPUSH
94917: CALL_OW 256
94921: PPUSH
94922: CALL_OW 2
94926: ST_TO_ADDR
94927: GO 94890
94929: POP
94930: POP
// if not tmp then
94931: LD_VAR 0 5
94935: NOT
94936: IFFALSE 94940
// exit ;
94938: GO 94988
// if asc then
94940: LD_VAR 0 2
94944: IFFALSE 94968
// result := SortListByListAsc ( units , tmp ) else
94946: LD_ADDR_VAR 0 3
94950: PUSH
94951: LD_VAR 0 1
94955: PPUSH
94956: LD_VAR 0 5
94960: PPUSH
94961: CALL_OW 76
94965: ST_TO_ADDR
94966: GO 94988
// result := SortListByListDesc ( units , tmp ) ;
94968: LD_ADDR_VAR 0 3
94972: PUSH
94973: LD_VAR 0 1
94977: PPUSH
94978: LD_VAR 0 5
94982: PPUSH
94983: CALL_OW 77
94987: ST_TO_ADDR
// end ;
94988: LD_VAR 0 3
94992: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
94993: LD_INT 0
94995: PPUSH
94996: PPUSH
// task := GetTaskList ( mech ) ;
94997: LD_ADDR_VAR 0 4
95001: PUSH
95002: LD_VAR 0 1
95006: PPUSH
95007: CALL_OW 437
95011: ST_TO_ADDR
// if not task then
95012: LD_VAR 0 4
95016: NOT
95017: IFFALSE 95021
// exit ;
95019: GO 95063
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
95021: LD_ADDR_VAR 0 3
95025: PUSH
95026: LD_VAR 0 4
95030: PUSH
95031: LD_INT 1
95033: ARRAY
95034: PUSH
95035: LD_INT 1
95037: ARRAY
95038: PUSH
95039: LD_STRING r
95041: EQUAL
95042: PUSH
95043: LD_VAR 0 4
95047: PUSH
95048: LD_INT 1
95050: ARRAY
95051: PUSH
95052: LD_INT 4
95054: ARRAY
95055: PUSH
95056: LD_VAR 0 2
95060: EQUAL
95061: AND
95062: ST_TO_ADDR
// end ;
95063: LD_VAR 0 3
95067: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
95068: LD_INT 0
95070: PPUSH
// SetDir ( unit , d ) ;
95071: LD_VAR 0 1
95075: PPUSH
95076: LD_VAR 0 4
95080: PPUSH
95081: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
95085: LD_ADDR_VAR 0 6
95089: PUSH
95090: LD_VAR 0 1
95094: PPUSH
95095: LD_VAR 0 2
95099: PPUSH
95100: LD_VAR 0 3
95104: PPUSH
95105: LD_VAR 0 5
95109: PPUSH
95110: CALL_OW 48
95114: ST_TO_ADDR
// end ;
95115: LD_VAR 0 6
95119: RET
// export function ToNaturalNumber ( number ) ; begin
95120: LD_INT 0
95122: PPUSH
// result := number div 1 ;
95123: LD_ADDR_VAR 0 2
95127: PUSH
95128: LD_VAR 0 1
95132: PUSH
95133: LD_INT 1
95135: DIV
95136: ST_TO_ADDR
// if number < 0 then
95137: LD_VAR 0 1
95141: PUSH
95142: LD_INT 0
95144: LESS
95145: IFFALSE 95155
// result := 0 ;
95147: LD_ADDR_VAR 0 2
95151: PUSH
95152: LD_INT 0
95154: ST_TO_ADDR
// end ;
95155: LD_VAR 0 2
95159: RET
// export function SortByClass ( units , class ) ; var un ; begin
95160: LD_INT 0
95162: PPUSH
95163: PPUSH
// if not units or not class then
95164: LD_VAR 0 1
95168: NOT
95169: PUSH
95170: LD_VAR 0 2
95174: NOT
95175: OR
95176: IFFALSE 95180
// exit ;
95178: GO 95275
// result := [ ] ;
95180: LD_ADDR_VAR 0 3
95184: PUSH
95185: EMPTY
95186: ST_TO_ADDR
// for un in units do
95187: LD_ADDR_VAR 0 4
95191: PUSH
95192: LD_VAR 0 1
95196: PUSH
95197: FOR_IN
95198: IFFALSE 95273
// if GetClass ( un ) = class then
95200: LD_VAR 0 4
95204: PPUSH
95205: CALL_OW 257
95209: PUSH
95210: LD_VAR 0 2
95214: EQUAL
95215: IFFALSE 95242
// result := Insert ( result , 1 , un ) else
95217: LD_ADDR_VAR 0 3
95221: PUSH
95222: LD_VAR 0 3
95226: PPUSH
95227: LD_INT 1
95229: PPUSH
95230: LD_VAR 0 4
95234: PPUSH
95235: CALL_OW 2
95239: ST_TO_ADDR
95240: GO 95271
// result := Replace ( result , result + 1 , un ) ;
95242: LD_ADDR_VAR 0 3
95246: PUSH
95247: LD_VAR 0 3
95251: PPUSH
95252: LD_VAR 0 3
95256: PUSH
95257: LD_INT 1
95259: PLUS
95260: PPUSH
95261: LD_VAR 0 4
95265: PPUSH
95266: CALL_OW 1
95270: ST_TO_ADDR
95271: GO 95197
95273: POP
95274: POP
// end ;
95275: LD_VAR 0 3
95279: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
95280: LD_INT 0
95282: PPUSH
95283: PPUSH
95284: PPUSH
95285: PPUSH
95286: PPUSH
95287: PPUSH
95288: PPUSH
// result := [ ] ;
95289: LD_ADDR_VAR 0 4
95293: PUSH
95294: EMPTY
95295: ST_TO_ADDR
// if x - r < 0 then
95296: LD_VAR 0 1
95300: PUSH
95301: LD_VAR 0 3
95305: MINUS
95306: PUSH
95307: LD_INT 0
95309: LESS
95310: IFFALSE 95322
// min_x := 0 else
95312: LD_ADDR_VAR 0 8
95316: PUSH
95317: LD_INT 0
95319: ST_TO_ADDR
95320: GO 95338
// min_x := x - r ;
95322: LD_ADDR_VAR 0 8
95326: PUSH
95327: LD_VAR 0 1
95331: PUSH
95332: LD_VAR 0 3
95336: MINUS
95337: ST_TO_ADDR
// if y - r < 0 then
95338: LD_VAR 0 2
95342: PUSH
95343: LD_VAR 0 3
95347: MINUS
95348: PUSH
95349: LD_INT 0
95351: LESS
95352: IFFALSE 95364
// min_y := 0 else
95354: LD_ADDR_VAR 0 7
95358: PUSH
95359: LD_INT 0
95361: ST_TO_ADDR
95362: GO 95380
// min_y := y - r ;
95364: LD_ADDR_VAR 0 7
95368: PUSH
95369: LD_VAR 0 2
95373: PUSH
95374: LD_VAR 0 3
95378: MINUS
95379: ST_TO_ADDR
// max_x := x + r ;
95380: LD_ADDR_VAR 0 9
95384: PUSH
95385: LD_VAR 0 1
95389: PUSH
95390: LD_VAR 0 3
95394: PLUS
95395: ST_TO_ADDR
// max_y := y + r ;
95396: LD_ADDR_VAR 0 10
95400: PUSH
95401: LD_VAR 0 2
95405: PUSH
95406: LD_VAR 0 3
95410: PLUS
95411: ST_TO_ADDR
// for _x = min_x to max_x do
95412: LD_ADDR_VAR 0 5
95416: PUSH
95417: DOUBLE
95418: LD_VAR 0 8
95422: DEC
95423: ST_TO_ADDR
95424: LD_VAR 0 9
95428: PUSH
95429: FOR_TO
95430: IFFALSE 95531
// for _y = min_y to max_y do
95432: LD_ADDR_VAR 0 6
95436: PUSH
95437: DOUBLE
95438: LD_VAR 0 7
95442: DEC
95443: ST_TO_ADDR
95444: LD_VAR 0 10
95448: PUSH
95449: FOR_TO
95450: IFFALSE 95527
// begin if not ValidHex ( _x , _y ) then
95452: LD_VAR 0 5
95456: PPUSH
95457: LD_VAR 0 6
95461: PPUSH
95462: CALL_OW 488
95466: NOT
95467: IFFALSE 95471
// continue ;
95469: GO 95449
// if GetResourceTypeXY ( _x , _y ) then
95471: LD_VAR 0 5
95475: PPUSH
95476: LD_VAR 0 6
95480: PPUSH
95481: CALL_OW 283
95485: IFFALSE 95525
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
95487: LD_ADDR_VAR 0 4
95491: PUSH
95492: LD_VAR 0 4
95496: PPUSH
95497: LD_VAR 0 4
95501: PUSH
95502: LD_INT 1
95504: PLUS
95505: PPUSH
95506: LD_VAR 0 5
95510: PUSH
95511: LD_VAR 0 6
95515: PUSH
95516: EMPTY
95517: LIST
95518: LIST
95519: PPUSH
95520: CALL_OW 1
95524: ST_TO_ADDR
// end ;
95525: GO 95449
95527: POP
95528: POP
95529: GO 95429
95531: POP
95532: POP
// end ;
95533: LD_VAR 0 4
95537: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
95538: LD_INT 0
95540: PPUSH
95541: PPUSH
95542: PPUSH
95543: PPUSH
95544: PPUSH
95545: PPUSH
95546: PPUSH
95547: PPUSH
// if not units then
95548: LD_VAR 0 1
95552: NOT
95553: IFFALSE 95557
// exit ;
95555: GO 96085
// result := UnitFilter ( units , [ f_ok ] ) ;
95557: LD_ADDR_VAR 0 3
95561: PUSH
95562: LD_VAR 0 1
95566: PPUSH
95567: LD_INT 50
95569: PUSH
95570: EMPTY
95571: LIST
95572: PPUSH
95573: CALL_OW 72
95577: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
95578: LD_ADDR_VAR 0 8
95582: PUSH
95583: LD_VAR 0 1
95587: PUSH
95588: LD_INT 1
95590: ARRAY
95591: PPUSH
95592: CALL_OW 255
95596: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
95597: LD_ADDR_VAR 0 10
95601: PUSH
95602: LD_INT 29
95604: PUSH
95605: LD_INT 91
95607: PUSH
95608: LD_INT 49
95610: PUSH
95611: EMPTY
95612: LIST
95613: LIST
95614: LIST
95615: ST_TO_ADDR
// if not result then
95616: LD_VAR 0 3
95620: NOT
95621: IFFALSE 95625
// exit ;
95623: GO 96085
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
95625: LD_ADDR_VAR 0 5
95629: PUSH
95630: LD_INT 81
95632: PUSH
95633: LD_VAR 0 8
95637: PUSH
95638: EMPTY
95639: LIST
95640: LIST
95641: PPUSH
95642: CALL_OW 69
95646: ST_TO_ADDR
// for i in result do
95647: LD_ADDR_VAR 0 4
95651: PUSH
95652: LD_VAR 0 3
95656: PUSH
95657: FOR_IN
95658: IFFALSE 96083
// begin tag := GetTag ( i ) + 1 ;
95660: LD_ADDR_VAR 0 9
95664: PUSH
95665: LD_VAR 0 4
95669: PPUSH
95670: CALL_OW 110
95674: PUSH
95675: LD_INT 1
95677: PLUS
95678: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
95679: LD_ADDR_VAR 0 7
95683: PUSH
95684: LD_VAR 0 4
95688: PPUSH
95689: CALL_OW 250
95693: PPUSH
95694: LD_VAR 0 4
95698: PPUSH
95699: CALL_OW 251
95703: PPUSH
95704: LD_INT 4
95706: PPUSH
95707: CALL 95280 0 3
95711: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
95712: LD_VAR 0 4
95716: PPUSH
95717: CALL_OW 247
95721: PUSH
95722: LD_INT 2
95724: EQUAL
95725: PUSH
95726: LD_VAR 0 7
95730: PUSH
95731: LD_INT 2
95733: GREATER
95734: AND
95735: PUSH
95736: LD_VAR 0 4
95740: PPUSH
95741: CALL_OW 264
95745: PUSH
95746: LD_VAR 0 10
95750: IN
95751: NOT
95752: AND
95753: IFFALSE 95792
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
95755: LD_VAR 0 4
95759: PPUSH
95760: LD_VAR 0 7
95764: PUSH
95765: LD_INT 1
95767: ARRAY
95768: PUSH
95769: LD_INT 1
95771: ARRAY
95772: PPUSH
95773: LD_VAR 0 7
95777: PUSH
95778: LD_INT 1
95780: ARRAY
95781: PUSH
95782: LD_INT 2
95784: ARRAY
95785: PPUSH
95786: CALL_OW 116
95790: GO 96081
// if path > tag then
95792: LD_VAR 0 2
95796: PUSH
95797: LD_VAR 0 9
95801: GREATER
95802: IFFALSE 96010
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
95804: LD_ADDR_VAR 0 6
95808: PUSH
95809: LD_VAR 0 5
95813: PPUSH
95814: LD_INT 91
95816: PUSH
95817: LD_VAR 0 4
95821: PUSH
95822: LD_INT 8
95824: PUSH
95825: EMPTY
95826: LIST
95827: LIST
95828: LIST
95829: PPUSH
95830: CALL_OW 72
95834: ST_TO_ADDR
// if nearEnemy then
95835: LD_VAR 0 6
95839: IFFALSE 95908
// begin if GetWeapon ( i ) = ru_time_lapser then
95841: LD_VAR 0 4
95845: PPUSH
95846: CALL_OW 264
95850: PUSH
95851: LD_INT 49
95853: EQUAL
95854: IFFALSE 95882
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
95856: LD_VAR 0 4
95860: PPUSH
95861: LD_VAR 0 6
95865: PPUSH
95866: LD_VAR 0 4
95870: PPUSH
95871: CALL_OW 74
95875: PPUSH
95876: CALL_OW 112
95880: GO 95906
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
95882: LD_VAR 0 4
95886: PPUSH
95887: LD_VAR 0 6
95891: PPUSH
95892: LD_VAR 0 4
95896: PPUSH
95897: CALL_OW 74
95901: PPUSH
95902: CALL 97156 0 2
// end else
95906: GO 96008
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
95908: LD_VAR 0 4
95912: PPUSH
95913: LD_VAR 0 2
95917: PUSH
95918: LD_VAR 0 9
95922: ARRAY
95923: PUSH
95924: LD_INT 1
95926: ARRAY
95927: PPUSH
95928: LD_VAR 0 2
95932: PUSH
95933: LD_VAR 0 9
95937: ARRAY
95938: PUSH
95939: LD_INT 2
95941: ARRAY
95942: PPUSH
95943: CALL_OW 297
95947: PUSH
95948: LD_INT 6
95950: GREATER
95951: IFFALSE 95994
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
95953: LD_VAR 0 4
95957: PPUSH
95958: LD_VAR 0 2
95962: PUSH
95963: LD_VAR 0 9
95967: ARRAY
95968: PUSH
95969: LD_INT 1
95971: ARRAY
95972: PPUSH
95973: LD_VAR 0 2
95977: PUSH
95978: LD_VAR 0 9
95982: ARRAY
95983: PUSH
95984: LD_INT 2
95986: ARRAY
95987: PPUSH
95988: CALL_OW 114
95992: GO 96008
// SetTag ( i , tag ) ;
95994: LD_VAR 0 4
95998: PPUSH
95999: LD_VAR 0 9
96003: PPUSH
96004: CALL_OW 109
// end else
96008: GO 96081
// if enemy then
96010: LD_VAR 0 5
96014: IFFALSE 96081
// begin if GetWeapon ( i ) = ru_time_lapser then
96016: LD_VAR 0 4
96020: PPUSH
96021: CALL_OW 264
96025: PUSH
96026: LD_INT 49
96028: EQUAL
96029: IFFALSE 96057
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
96031: LD_VAR 0 4
96035: PPUSH
96036: LD_VAR 0 5
96040: PPUSH
96041: LD_VAR 0 4
96045: PPUSH
96046: CALL_OW 74
96050: PPUSH
96051: CALL_OW 112
96055: GO 96081
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
96057: LD_VAR 0 4
96061: PPUSH
96062: LD_VAR 0 5
96066: PPUSH
96067: LD_VAR 0 4
96071: PPUSH
96072: CALL_OW 74
96076: PPUSH
96077: CALL 97156 0 2
// end ; end ;
96081: GO 95657
96083: POP
96084: POP
// end ;
96085: LD_VAR 0 3
96089: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
96090: LD_INT 0
96092: PPUSH
96093: PPUSH
96094: PPUSH
// if not unit or IsInUnit ( unit ) then
96095: LD_VAR 0 1
96099: NOT
96100: PUSH
96101: LD_VAR 0 1
96105: PPUSH
96106: CALL_OW 310
96110: OR
96111: IFFALSE 96115
// exit ;
96113: GO 96206
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
96115: LD_ADDR_VAR 0 4
96119: PUSH
96120: LD_VAR 0 1
96124: PPUSH
96125: CALL_OW 250
96129: PPUSH
96130: LD_VAR 0 2
96134: PPUSH
96135: LD_INT 1
96137: PPUSH
96138: CALL_OW 272
96142: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
96143: LD_ADDR_VAR 0 5
96147: PUSH
96148: LD_VAR 0 1
96152: PPUSH
96153: CALL_OW 251
96157: PPUSH
96158: LD_VAR 0 2
96162: PPUSH
96163: LD_INT 1
96165: PPUSH
96166: CALL_OW 273
96170: ST_TO_ADDR
// if ValidHex ( x , y ) then
96171: LD_VAR 0 4
96175: PPUSH
96176: LD_VAR 0 5
96180: PPUSH
96181: CALL_OW 488
96185: IFFALSE 96206
// ComTurnXY ( unit , x , y ) ;
96187: LD_VAR 0 1
96191: PPUSH
96192: LD_VAR 0 4
96196: PPUSH
96197: LD_VAR 0 5
96201: PPUSH
96202: CALL_OW 118
// end ;
96206: LD_VAR 0 3
96210: RET
// export function SeeUnits ( side , units ) ; var i ; begin
96211: LD_INT 0
96213: PPUSH
96214: PPUSH
// result := false ;
96215: LD_ADDR_VAR 0 3
96219: PUSH
96220: LD_INT 0
96222: ST_TO_ADDR
// if not units then
96223: LD_VAR 0 2
96227: NOT
96228: IFFALSE 96232
// exit ;
96230: GO 96277
// for i in units do
96232: LD_ADDR_VAR 0 4
96236: PUSH
96237: LD_VAR 0 2
96241: PUSH
96242: FOR_IN
96243: IFFALSE 96275
// if See ( side , i ) then
96245: LD_VAR 0 1
96249: PPUSH
96250: LD_VAR 0 4
96254: PPUSH
96255: CALL_OW 292
96259: IFFALSE 96273
// begin result := true ;
96261: LD_ADDR_VAR 0 3
96265: PUSH
96266: LD_INT 1
96268: ST_TO_ADDR
// exit ;
96269: POP
96270: POP
96271: GO 96277
// end ;
96273: GO 96242
96275: POP
96276: POP
// end ;
96277: LD_VAR 0 3
96281: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
96282: LD_INT 0
96284: PPUSH
96285: PPUSH
96286: PPUSH
96287: PPUSH
// if not unit or not points then
96288: LD_VAR 0 1
96292: NOT
96293: PUSH
96294: LD_VAR 0 2
96298: NOT
96299: OR
96300: IFFALSE 96304
// exit ;
96302: GO 96394
// dist := 99999 ;
96304: LD_ADDR_VAR 0 5
96308: PUSH
96309: LD_INT 99999
96311: ST_TO_ADDR
// for i in points do
96312: LD_ADDR_VAR 0 4
96316: PUSH
96317: LD_VAR 0 2
96321: PUSH
96322: FOR_IN
96323: IFFALSE 96392
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
96325: LD_ADDR_VAR 0 6
96329: PUSH
96330: LD_VAR 0 1
96334: PPUSH
96335: LD_VAR 0 4
96339: PUSH
96340: LD_INT 1
96342: ARRAY
96343: PPUSH
96344: LD_VAR 0 4
96348: PUSH
96349: LD_INT 2
96351: ARRAY
96352: PPUSH
96353: CALL_OW 297
96357: ST_TO_ADDR
// if tmpDist < dist then
96358: LD_VAR 0 6
96362: PUSH
96363: LD_VAR 0 5
96367: LESS
96368: IFFALSE 96390
// begin result := i ;
96370: LD_ADDR_VAR 0 3
96374: PUSH
96375: LD_VAR 0 4
96379: ST_TO_ADDR
// dist := tmpDist ;
96380: LD_ADDR_VAR 0 5
96384: PUSH
96385: LD_VAR 0 6
96389: ST_TO_ADDR
// end ; end ;
96390: GO 96322
96392: POP
96393: POP
// end ;
96394: LD_VAR 0 3
96398: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
96399: LD_INT 0
96401: PPUSH
// uc_side := side ;
96402: LD_ADDR_OWVAR 20
96406: PUSH
96407: LD_VAR 0 1
96411: ST_TO_ADDR
// uc_nation := 3 ;
96412: LD_ADDR_OWVAR 21
96416: PUSH
96417: LD_INT 3
96419: ST_TO_ADDR
// vc_chassis := 25 ;
96420: LD_ADDR_OWVAR 37
96424: PUSH
96425: LD_INT 25
96427: ST_TO_ADDR
// vc_engine := engine_siberite ;
96428: LD_ADDR_OWVAR 39
96432: PUSH
96433: LD_INT 3
96435: ST_TO_ADDR
// vc_control := control_computer ;
96436: LD_ADDR_OWVAR 38
96440: PUSH
96441: LD_INT 3
96443: ST_TO_ADDR
// vc_weapon := 59 ;
96444: LD_ADDR_OWVAR 40
96448: PUSH
96449: LD_INT 59
96451: ST_TO_ADDR
// result := CreateVehicle ;
96452: LD_ADDR_VAR 0 5
96456: PUSH
96457: CALL_OW 45
96461: ST_TO_ADDR
// SetDir ( result , d ) ;
96462: LD_VAR 0 5
96466: PPUSH
96467: LD_VAR 0 4
96471: PPUSH
96472: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
96476: LD_VAR 0 5
96480: PPUSH
96481: LD_VAR 0 2
96485: PPUSH
96486: LD_VAR 0 3
96490: PPUSH
96491: LD_INT 0
96493: PPUSH
96494: CALL_OW 48
// end ;
96498: LD_VAR 0 5
96502: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
96503: LD_INT 0
96505: PPUSH
96506: PPUSH
96507: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
96508: LD_ADDR_VAR 0 2
96512: PUSH
96513: LD_INT 0
96515: PUSH
96516: LD_INT 0
96518: PUSH
96519: LD_INT 0
96521: PUSH
96522: LD_INT 0
96524: PUSH
96525: EMPTY
96526: LIST
96527: LIST
96528: LIST
96529: LIST
96530: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
96531: LD_VAR 0 1
96535: NOT
96536: PUSH
96537: LD_VAR 0 1
96541: PPUSH
96542: CALL_OW 264
96546: PUSH
96547: LD_INT 12
96549: PUSH
96550: LD_INT 51
96552: PUSH
96553: LD_INT 32
96555: PUSH
96556: LD_INT 89
96558: PUSH
96559: EMPTY
96560: LIST
96561: LIST
96562: LIST
96563: LIST
96564: IN
96565: NOT
96566: OR
96567: IFFALSE 96571
// exit ;
96569: GO 96669
// for i := 1 to 3 do
96571: LD_ADDR_VAR 0 3
96575: PUSH
96576: DOUBLE
96577: LD_INT 1
96579: DEC
96580: ST_TO_ADDR
96581: LD_INT 3
96583: PUSH
96584: FOR_TO
96585: IFFALSE 96667
// begin tmp := GetCargo ( cargo , i ) ;
96587: LD_ADDR_VAR 0 4
96591: PUSH
96592: LD_VAR 0 1
96596: PPUSH
96597: LD_VAR 0 3
96601: PPUSH
96602: CALL_OW 289
96606: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
96607: LD_ADDR_VAR 0 2
96611: PUSH
96612: LD_VAR 0 2
96616: PPUSH
96617: LD_VAR 0 3
96621: PPUSH
96622: LD_VAR 0 4
96626: PPUSH
96627: CALL_OW 1
96631: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
96632: LD_ADDR_VAR 0 2
96636: PUSH
96637: LD_VAR 0 2
96641: PPUSH
96642: LD_INT 4
96644: PPUSH
96645: LD_VAR 0 2
96649: PUSH
96650: LD_INT 4
96652: ARRAY
96653: PUSH
96654: LD_VAR 0 4
96658: PLUS
96659: PPUSH
96660: CALL_OW 1
96664: ST_TO_ADDR
// end ;
96665: GO 96584
96667: POP
96668: POP
// end ;
96669: LD_VAR 0 2
96673: RET
// export function Length ( array ) ; begin
96674: LD_INT 0
96676: PPUSH
// result := array + 0 ;
96677: LD_ADDR_VAR 0 2
96681: PUSH
96682: LD_VAR 0 1
96686: PUSH
96687: LD_INT 0
96689: PLUS
96690: ST_TO_ADDR
// end ;
96691: LD_VAR 0 2
96695: RET
// export function PrepareArray ( array ) ; begin
96696: LD_INT 0
96698: PPUSH
// result := array diff 0 ;
96699: LD_ADDR_VAR 0 2
96703: PUSH
96704: LD_VAR 0 1
96708: PUSH
96709: LD_INT 0
96711: DIFF
96712: ST_TO_ADDR
// if not result [ 1 ] then
96713: LD_VAR 0 2
96717: PUSH
96718: LD_INT 1
96720: ARRAY
96721: NOT
96722: IFFALSE 96742
// result := Delete ( result , 1 ) ;
96724: LD_ADDR_VAR 0 2
96728: PUSH
96729: LD_VAR 0 2
96733: PPUSH
96734: LD_INT 1
96736: PPUSH
96737: CALL_OW 3
96741: ST_TO_ADDR
// end ;
96742: LD_VAR 0 2
96746: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
96747: LD_INT 0
96749: PPUSH
96750: PPUSH
96751: PPUSH
96752: PPUSH
// sibRocketRange := 25 ;
96753: LD_ADDR_VAR 0 6
96757: PUSH
96758: LD_INT 25
96760: ST_TO_ADDR
// result := false ;
96761: LD_ADDR_VAR 0 4
96765: PUSH
96766: LD_INT 0
96768: ST_TO_ADDR
// for i := 0 to 5 do
96769: LD_ADDR_VAR 0 5
96773: PUSH
96774: DOUBLE
96775: LD_INT 0
96777: DEC
96778: ST_TO_ADDR
96779: LD_INT 5
96781: PUSH
96782: FOR_TO
96783: IFFALSE 96850
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
96785: LD_VAR 0 1
96789: PPUSH
96790: LD_VAR 0 5
96794: PPUSH
96795: LD_VAR 0 6
96799: PPUSH
96800: CALL_OW 272
96804: PPUSH
96805: LD_VAR 0 2
96809: PPUSH
96810: LD_VAR 0 5
96814: PPUSH
96815: LD_VAR 0 6
96819: PPUSH
96820: CALL_OW 273
96824: PPUSH
96825: LD_VAR 0 3
96829: PPUSH
96830: CALL_OW 309
96834: IFFALSE 96848
// begin result := true ;
96836: LD_ADDR_VAR 0 4
96840: PUSH
96841: LD_INT 1
96843: ST_TO_ADDR
// exit ;
96844: POP
96845: POP
96846: GO 96852
// end ;
96848: GO 96782
96850: POP
96851: POP
// end ;
96852: LD_VAR 0 4
96856: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
96857: LD_INT 0
96859: PPUSH
96860: PPUSH
96861: PPUSH
// if btype = b_depot then
96862: LD_VAR 0 2
96866: PUSH
96867: LD_INT 0
96869: EQUAL
96870: IFFALSE 96882
// begin result := true ;
96872: LD_ADDR_VAR 0 3
96876: PUSH
96877: LD_INT 1
96879: ST_TO_ADDR
// exit ;
96880: GO 96998
// end ; pom := GetBase ( depot ) ;
96882: LD_ADDR_VAR 0 4
96886: PUSH
96887: LD_VAR 0 1
96891: PPUSH
96892: CALL_OW 274
96896: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
96897: LD_ADDR_VAR 0 5
96901: PUSH
96902: LD_VAR 0 2
96906: PPUSH
96907: LD_VAR 0 1
96911: PPUSH
96912: CALL_OW 248
96916: PPUSH
96917: CALL_OW 450
96921: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
96922: LD_ADDR_VAR 0 3
96926: PUSH
96927: LD_VAR 0 4
96931: PPUSH
96932: LD_INT 1
96934: PPUSH
96935: CALL_OW 275
96939: PUSH
96940: LD_VAR 0 5
96944: PUSH
96945: LD_INT 1
96947: ARRAY
96948: GREATEREQUAL
96949: PUSH
96950: LD_VAR 0 4
96954: PPUSH
96955: LD_INT 2
96957: PPUSH
96958: CALL_OW 275
96962: PUSH
96963: LD_VAR 0 5
96967: PUSH
96968: LD_INT 2
96970: ARRAY
96971: GREATEREQUAL
96972: AND
96973: PUSH
96974: LD_VAR 0 4
96978: PPUSH
96979: LD_INT 3
96981: PPUSH
96982: CALL_OW 275
96986: PUSH
96987: LD_VAR 0 5
96991: PUSH
96992: LD_INT 3
96994: ARRAY
96995: GREATEREQUAL
96996: AND
96997: ST_TO_ADDR
// end ;
96998: LD_VAR 0 3
97002: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
97003: LD_INT 0
97005: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
97006: LD_VAR 0 1
97010: PPUSH
97011: LD_VAR 0 2
97015: PPUSH
97016: LD_INT 0
97018: PPUSH
97019: LD_INT 0
97021: PPUSH
97022: LD_INT 1
97024: PPUSH
97025: LD_INT 0
97027: PPUSH
97028: CALL_OW 587
// end ;
97032: LD_VAR 0 3
97036: RET
// export function CenterOnNow ( unit ) ; begin
97037: LD_INT 0
97039: PPUSH
// result := IsInUnit ( unit ) ;
97040: LD_ADDR_VAR 0 2
97044: PUSH
97045: LD_VAR 0 1
97049: PPUSH
97050: CALL_OW 310
97054: ST_TO_ADDR
// if not result then
97055: LD_VAR 0 2
97059: NOT
97060: IFFALSE 97072
// result := unit ;
97062: LD_ADDR_VAR 0 2
97066: PUSH
97067: LD_VAR 0 1
97071: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
97072: LD_VAR 0 1
97076: PPUSH
97077: CALL_OW 87
// end ;
97081: LD_VAR 0 2
97085: RET
// export function ComMoveHex ( unit , hex ) ; begin
97086: LD_INT 0
97088: PPUSH
// if not hex then
97089: LD_VAR 0 2
97093: NOT
97094: IFFALSE 97098
// exit ;
97096: GO 97151
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
97098: LD_VAR 0 2
97102: PUSH
97103: LD_INT 1
97105: ARRAY
97106: PPUSH
97107: LD_VAR 0 2
97111: PUSH
97112: LD_INT 2
97114: ARRAY
97115: PPUSH
97116: CALL_OW 428
97120: IFFALSE 97124
// exit ;
97122: GO 97151
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
97124: LD_VAR 0 1
97128: PPUSH
97129: LD_VAR 0 2
97133: PUSH
97134: LD_INT 1
97136: ARRAY
97137: PPUSH
97138: LD_VAR 0 2
97142: PUSH
97143: LD_INT 2
97145: ARRAY
97146: PPUSH
97147: CALL_OW 111
// end ;
97151: LD_VAR 0 3
97155: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
97156: LD_INT 0
97158: PPUSH
97159: PPUSH
97160: PPUSH
// if not unit or not enemy then
97161: LD_VAR 0 1
97165: NOT
97166: PUSH
97167: LD_VAR 0 2
97171: NOT
97172: OR
97173: IFFALSE 97177
// exit ;
97175: GO 97301
// x := GetX ( enemy ) ;
97177: LD_ADDR_VAR 0 4
97181: PUSH
97182: LD_VAR 0 2
97186: PPUSH
97187: CALL_OW 250
97191: ST_TO_ADDR
// y := GetY ( enemy ) ;
97192: LD_ADDR_VAR 0 5
97196: PUSH
97197: LD_VAR 0 2
97201: PPUSH
97202: CALL_OW 251
97206: ST_TO_ADDR
// if ValidHex ( x , y ) then
97207: LD_VAR 0 4
97211: PPUSH
97212: LD_VAR 0 5
97216: PPUSH
97217: CALL_OW 488
97221: IFFALSE 97301
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
97223: LD_VAR 0 2
97227: PPUSH
97228: CALL_OW 247
97232: PUSH
97233: LD_INT 3
97235: PUSH
97236: LD_INT 2
97238: PUSH
97239: EMPTY
97240: LIST
97241: LIST
97242: IN
97243: PUSH
97244: LD_VAR 0 1
97248: PPUSH
97249: CALL_OW 255
97253: PPUSH
97254: LD_VAR 0 2
97258: PPUSH
97259: CALL_OW 292
97263: OR
97264: IFFALSE 97282
// ComAttackUnit ( unit , enemy ) else
97266: LD_VAR 0 1
97270: PPUSH
97271: LD_VAR 0 2
97275: PPUSH
97276: CALL_OW 115
97280: GO 97301
// ComAgressiveMove ( unit , x , y ) ;
97282: LD_VAR 0 1
97286: PPUSH
97287: LD_VAR 0 4
97291: PPUSH
97292: LD_VAR 0 5
97296: PPUSH
97297: CALL_OW 114
// end ;
97301: LD_VAR 0 3
97305: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
97306: LD_INT 0
97308: PPUSH
97309: PPUSH
97310: PPUSH
// list := AreaToList ( area , 0 ) ;
97311: LD_ADDR_VAR 0 5
97315: PUSH
97316: LD_VAR 0 1
97320: PPUSH
97321: LD_INT 0
97323: PPUSH
97324: CALL_OW 517
97328: ST_TO_ADDR
// if not list then
97329: LD_VAR 0 5
97333: NOT
97334: IFFALSE 97338
// exit ;
97336: GO 97468
// if all then
97338: LD_VAR 0 2
97342: IFFALSE 97430
// begin for i := 1 to list [ 1 ] do
97344: LD_ADDR_VAR 0 4
97348: PUSH
97349: DOUBLE
97350: LD_INT 1
97352: DEC
97353: ST_TO_ADDR
97354: LD_VAR 0 5
97358: PUSH
97359: LD_INT 1
97361: ARRAY
97362: PUSH
97363: FOR_TO
97364: IFFALSE 97426
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
97366: LD_ADDR_VAR 0 3
97370: PUSH
97371: LD_VAR 0 3
97375: PPUSH
97376: LD_VAR 0 3
97380: PUSH
97381: LD_INT 1
97383: PLUS
97384: PPUSH
97385: LD_VAR 0 5
97389: PUSH
97390: LD_INT 1
97392: ARRAY
97393: PUSH
97394: LD_VAR 0 4
97398: ARRAY
97399: PUSH
97400: LD_VAR 0 5
97404: PUSH
97405: LD_INT 2
97407: ARRAY
97408: PUSH
97409: LD_VAR 0 4
97413: ARRAY
97414: PUSH
97415: EMPTY
97416: LIST
97417: LIST
97418: PPUSH
97419: CALL_OW 1
97423: ST_TO_ADDR
97424: GO 97363
97426: POP
97427: POP
// exit ;
97428: GO 97468
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
97430: LD_ADDR_VAR 0 3
97434: PUSH
97435: LD_VAR 0 5
97439: PUSH
97440: LD_INT 1
97442: ARRAY
97443: PUSH
97444: LD_INT 1
97446: ARRAY
97447: PUSH
97448: LD_VAR 0 5
97452: PUSH
97453: LD_INT 2
97455: ARRAY
97456: PUSH
97457: LD_INT 1
97459: ARRAY
97460: PUSH
97461: EMPTY
97462: LIST
97463: LIST
97464: PUSH
97465: EMPTY
97466: LIST
97467: ST_TO_ADDR
// end ;
97468: LD_VAR 0 3
97472: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
97473: LD_INT 0
97475: PPUSH
97476: PPUSH
// list := AreaToList ( area , 0 ) ;
97477: LD_ADDR_VAR 0 4
97481: PUSH
97482: LD_VAR 0 1
97486: PPUSH
97487: LD_INT 0
97489: PPUSH
97490: CALL_OW 517
97494: ST_TO_ADDR
// if not list then
97495: LD_VAR 0 4
97499: NOT
97500: IFFALSE 97504
// exit ;
97502: GO 97545
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
97504: LD_ADDR_VAR 0 3
97508: PUSH
97509: LD_VAR 0 4
97513: PUSH
97514: LD_INT 1
97516: ARRAY
97517: PUSH
97518: LD_INT 1
97520: ARRAY
97521: PUSH
97522: LD_VAR 0 4
97526: PUSH
97527: LD_INT 2
97529: ARRAY
97530: PUSH
97531: LD_INT 1
97533: ARRAY
97534: PUSH
97535: LD_VAR 0 2
97539: PUSH
97540: EMPTY
97541: LIST
97542: LIST
97543: LIST
97544: ST_TO_ADDR
// end ;
97545: LD_VAR 0 3
97549: RET
// export function First ( array ) ; begin
97550: LD_INT 0
97552: PPUSH
// if not array then
97553: LD_VAR 0 1
97557: NOT
97558: IFFALSE 97562
// exit ;
97560: GO 97576
// result := array [ 1 ] ;
97562: LD_ADDR_VAR 0 2
97566: PUSH
97567: LD_VAR 0 1
97571: PUSH
97572: LD_INT 1
97574: ARRAY
97575: ST_TO_ADDR
// end ;
97576: LD_VAR 0 2
97580: RET
// export function Last ( array ) ; begin
97581: LD_INT 0
97583: PPUSH
// if not array then
97584: LD_VAR 0 1
97588: NOT
97589: IFFALSE 97593
// exit ;
97591: GO 97609
// result := array [ array ] ;
97593: LD_ADDR_VAR 0 2
97597: PUSH
97598: LD_VAR 0 1
97602: PUSH
97603: LD_VAR 0 1
97607: ARRAY
97608: ST_TO_ADDR
// end ;
97609: LD_VAR 0 2
97613: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
97614: LD_INT 0
97616: PPUSH
97617: PPUSH
// result := [ ] ;
97618: LD_ADDR_VAR 0 5
97622: PUSH
97623: EMPTY
97624: ST_TO_ADDR
// if not array then
97625: LD_VAR 0 1
97629: NOT
97630: IFFALSE 97634
// exit ;
97632: GO 97746
// for i := 1 to array do
97634: LD_ADDR_VAR 0 6
97638: PUSH
97639: DOUBLE
97640: LD_INT 1
97642: DEC
97643: ST_TO_ADDR
97644: LD_VAR 0 1
97648: PUSH
97649: FOR_TO
97650: IFFALSE 97744
// if array [ i ] [ index ] = value then
97652: LD_VAR 0 1
97656: PUSH
97657: LD_VAR 0 6
97661: ARRAY
97662: PUSH
97663: LD_VAR 0 2
97667: ARRAY
97668: PUSH
97669: LD_VAR 0 3
97673: EQUAL
97674: IFFALSE 97742
// begin if indexColumn then
97676: LD_VAR 0 4
97680: IFFALSE 97716
// result := Join ( result , array [ i ] [ indexColumn ] ) else
97682: LD_ADDR_VAR 0 5
97686: PUSH
97687: LD_VAR 0 5
97691: PPUSH
97692: LD_VAR 0 1
97696: PUSH
97697: LD_VAR 0 6
97701: ARRAY
97702: PUSH
97703: LD_VAR 0 4
97707: ARRAY
97708: PPUSH
97709: CALL 92928 0 2
97713: ST_TO_ADDR
97714: GO 97742
// result := Join ( result , array [ i ] ) ;
97716: LD_ADDR_VAR 0 5
97720: PUSH
97721: LD_VAR 0 5
97725: PPUSH
97726: LD_VAR 0 1
97730: PUSH
97731: LD_VAR 0 6
97735: ARRAY
97736: PPUSH
97737: CALL 92928 0 2
97741: ST_TO_ADDR
// end ;
97742: GO 97649
97744: POP
97745: POP
// end ;
97746: LD_VAR 0 5
97750: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
97751: LD_INT 0
97753: PPUSH
// if not vehicles or not parkingPoint then
97754: LD_VAR 0 1
97758: NOT
97759: PUSH
97760: LD_VAR 0 2
97764: NOT
97765: OR
97766: IFFALSE 97770
// exit ;
97768: GO 97868
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
97770: LD_ADDR_VAR 0 1
97774: PUSH
97775: LD_VAR 0 1
97779: PPUSH
97780: LD_INT 50
97782: PUSH
97783: EMPTY
97784: LIST
97785: PUSH
97786: LD_INT 3
97788: PUSH
97789: LD_INT 92
97791: PUSH
97792: LD_VAR 0 2
97796: PUSH
97797: LD_INT 1
97799: ARRAY
97800: PUSH
97801: LD_VAR 0 2
97805: PUSH
97806: LD_INT 2
97808: ARRAY
97809: PUSH
97810: LD_INT 8
97812: PUSH
97813: EMPTY
97814: LIST
97815: LIST
97816: LIST
97817: LIST
97818: PUSH
97819: EMPTY
97820: LIST
97821: LIST
97822: PUSH
97823: EMPTY
97824: LIST
97825: LIST
97826: PPUSH
97827: CALL_OW 72
97831: ST_TO_ADDR
// if not vehicles then
97832: LD_VAR 0 1
97836: NOT
97837: IFFALSE 97841
// exit ;
97839: GO 97868
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
97841: LD_VAR 0 1
97845: PPUSH
97846: LD_VAR 0 2
97850: PUSH
97851: LD_INT 1
97853: ARRAY
97854: PPUSH
97855: LD_VAR 0 2
97859: PUSH
97860: LD_INT 2
97862: ARRAY
97863: PPUSH
97864: CALL_OW 111
// end ;
97868: LD_VAR 0 3
97872: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
97873: LD_INT 0
97875: PPUSH
97876: PPUSH
97877: PPUSH
// if not side or not area then
97878: LD_VAR 0 1
97882: NOT
97883: PUSH
97884: LD_VAR 0 2
97888: NOT
97889: OR
97890: IFFALSE 97894
// exit ;
97892: GO 98013
// tmp := AreaToList ( area , 0 ) ;
97894: LD_ADDR_VAR 0 5
97898: PUSH
97899: LD_VAR 0 2
97903: PPUSH
97904: LD_INT 0
97906: PPUSH
97907: CALL_OW 517
97911: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
97912: LD_ADDR_VAR 0 4
97916: PUSH
97917: DOUBLE
97918: LD_INT 1
97920: DEC
97921: ST_TO_ADDR
97922: LD_VAR 0 5
97926: PUSH
97927: LD_INT 1
97929: ARRAY
97930: PUSH
97931: FOR_TO
97932: IFFALSE 98011
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
97934: LD_VAR 0 5
97938: PUSH
97939: LD_INT 1
97941: ARRAY
97942: PUSH
97943: LD_VAR 0 4
97947: ARRAY
97948: PPUSH
97949: LD_VAR 0 5
97953: PUSH
97954: LD_INT 2
97956: ARRAY
97957: PUSH
97958: LD_VAR 0 4
97962: ARRAY
97963: PPUSH
97964: CALL_OW 351
97968: IFFALSE 98009
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
97970: LD_VAR 0 5
97974: PUSH
97975: LD_INT 1
97977: ARRAY
97978: PUSH
97979: LD_VAR 0 4
97983: ARRAY
97984: PPUSH
97985: LD_VAR 0 5
97989: PUSH
97990: LD_INT 2
97992: ARRAY
97993: PUSH
97994: LD_VAR 0 4
97998: ARRAY
97999: PPUSH
98000: LD_VAR 0 1
98004: PPUSH
98005: CALL_OW 244
// end ;
98009: GO 97931
98011: POP
98012: POP
// end ; end_of_file
98013: LD_VAR 0 3
98017: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
98018: LD_VAR 0 1
98022: PUSH
98023: LD_INT 200
98025: DOUBLE
98026: GREATEREQUAL
98027: IFFALSE 98035
98029: LD_INT 299
98031: DOUBLE
98032: LESSEQUAL
98033: IFTRUE 98037
98035: GO 98069
98037: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
98038: LD_VAR 0 1
98042: PPUSH
98043: LD_VAR 0 2
98047: PPUSH
98048: LD_VAR 0 3
98052: PPUSH
98053: LD_VAR 0 4
98057: PPUSH
98058: LD_VAR 0 5
98062: PPUSH
98063: CALL 50434 0 5
98067: GO 98146
98069: LD_INT 300
98071: DOUBLE
98072: GREATEREQUAL
98073: IFFALSE 98081
98075: LD_INT 399
98077: DOUBLE
98078: LESSEQUAL
98079: IFTRUE 98083
98081: GO 98145
98083: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
98084: LD_VAR 0 1
98088: PPUSH
98089: LD_VAR 0 2
98093: PPUSH
98094: LD_VAR 0 3
98098: PPUSH
98099: LD_VAR 0 4
98103: PPUSH
98104: LD_VAR 0 5
98108: PPUSH
98109: LD_VAR 0 6
98113: PPUSH
98114: LD_VAR 0 7
98118: PPUSH
98119: LD_VAR 0 8
98123: PPUSH
98124: LD_VAR 0 9
98128: PPUSH
98129: LD_VAR 0 10
98133: PPUSH
98134: LD_VAR 0 11
98138: PPUSH
98139: CALL 46422 0 11
98143: GO 98146
98145: POP
// end ;
98146: PPOPN 11
98148: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
98149: LD_VAR 0 1
98153: PPUSH
98154: LD_VAR 0 2
98158: PPUSH
98159: LD_VAR 0 3
98163: PPUSH
98164: LD_VAR 0 4
98168: PPUSH
98169: LD_VAR 0 5
98173: PPUSH
98174: CALL 49899 0 5
// end ; end_of_file
98178: PPOPN 5
98180: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
98181: LD_VAR 0 1
98185: PPUSH
98186: LD_VAR 0 2
98190: PPUSH
98191: LD_VAR 0 3
98195: PPUSH
98196: LD_VAR 0 4
98200: PPUSH
98201: LD_VAR 0 5
98205: PPUSH
98206: LD_VAR 0 6
98210: PPUSH
98211: CALL 34074 0 6
// end ;
98215: PPOPN 6
98217: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
98218: LD_INT 0
98220: PPUSH
// begin if not units then
98221: LD_VAR 0 1
98225: NOT
98226: IFFALSE 98230
// exit ;
98228: GO 98230
// end ;
98230: PPOPN 7
98232: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
98233: CALL 33961 0 0
// end ;
98237: PPOPN 1
98239: END
