// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export Truman ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 29
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 21
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 30
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 39
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 40
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 41
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 42
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 43
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 51
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 48
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 47
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 49
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 50
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 62
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 52
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 66
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 67
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 64
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 54
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 53
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 57
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 60
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 61
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 63
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 58
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 59
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 65
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 55
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 56
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 68
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// Video ( true ) ;
 314: LD_INT 1
 316: PPUSH
 317: CALL 85951 0 1
// CreateNature ;
 321: CALL 27123 0 0
// PrepareDifficulty ;
 325: CALL 11747 0 0
// PrepareJMMTeam ;
 329: CALL 1363 0 0
// PrepareCathyTeam ;
 333: CALL 2599 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 337: LD_INT 24
 339: PPUSH
 340: LD_INT 1
 342: PUSH
 343: LD_OWVAR 67
 347: PLUS
 348: PPUSH
 349: CALL 21607 0 2
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 375
// PlaceMines ( MineField2 , Difficulty ) ;
 363: LD_INT 25
 365: PPUSH
 366: LD_OWVAR 67
 370: PPUSH
 371: CALL 21607 0 2
// if Difficulty > 2 then
 375: LD_OWVAR 67
 379: PUSH
 380: LD_INT 2
 382: GREATER
 383: IFFALSE 397
// PlaceMines ( MineField3 , Difficulty ) ;
 385: LD_INT 26
 387: PPUSH
 388: LD_OWVAR 67
 392: PPUSH
 393: CALL 21607 0 2
// PrepareArabianCommander ;
 397: CALL 4218 0 0
// PrepareArabian ;
 401: CALL 4270 0 0
// BuildArabianBase ;
 405: CALL 14562 0 0
// TameApemans ;
 409: CALL 20412 0 0
// end ;
 413: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 414: LD_EXP 68
 418: PUSH
 419: LD_INT 1
 421: EQUAL
 422: IFFALSE 728
 424: GO 426
 426: DISABLE
 427: LD_INT 0
 429: PPUSH
// begin enable ;
 430: ENABLE
// fogoff ( true ) ;
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 438: LD_ADDR_VAR 0 1
 442: PUSH
 443: LD_INT 22
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 21
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PPUSH
 467: CALL_OW 69
 471: PUSH
 472: FOR_IN
 473: IFFALSE 489
// SetLives ( i , 1000 ) ;
 475: LD_VAR 0 1
 479: PPUSH
 480: LD_INT 1000
 482: PPUSH
 483: CALL_OW 234
 487: GO 472
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 570: LD_ADDR_VAR 0 1
 574: PUSH
 575: LD_INT 22
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 2
 587: PUSH
 588: LD_INT 30
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 30
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PPUSH
 617: CALL_OW 69
 621: PUSH
 622: FOR_IN
 623: IFFALSE 647
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 274
 634: PPUSH
 635: LD_INT 2
 637: PPUSH
 638: LD_INT 9999
 640: PPUSH
 641: CALL_OW 277
 645: GO 622
 647: POP
 648: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 30
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PPUSH
 696: CALL_OW 69
 700: PUSH
 701: FOR_IN
 702: IFFALSE 726
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 704: LD_VAR 0 1
 708: PPUSH
 709: CALL_OW 274
 713: PPUSH
 714: LD_INT 3
 716: PPUSH
 717: LD_INT 9999
 719: PPUSH
 720: CALL_OW 277
 724: GO 701
 726: POP
 727: POP
// end ;
 728: PPOPN 1
 730: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 731: LD_INT 25
 733: PUSH
 734: LD_INT 5
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: IFFALSE 758
 747: GO 749
 749: DISABLE
// snipersTrained := true ;
 750: LD_ADDR_EXP 63
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
 758: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and spawnRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 759: LD_INT 1
 761: PPUSH
 762: LD_INT 2
 764: PPUSH
 765: CALL_OW 81
 769: PUSH
 770: LD_INT 1
 772: EQUAL
 773: PUSH
 774: LD_EXP 59
 778: AND
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PPUSH
 790: CALL_OW 69
 794: PUSH
 795: LD_INT 0
 797: EQUAL
 798: AND
 799: IFFALSE 811
 801: GO 803
 803: DISABLE
// SetAchievement ( ACH_POWER ) ;
 804: LD_STRING ACH_POWER
 806: PPUSH
 807: CALL_OW 543
 811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 812: LD_INT 22
 814: PUSH
 815: LD_INT 1
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PPUSH
 836: CALL_OW 69
 840: PUSH
 841: LD_INT 22
 843: PUSH
 844: LD_INT 1
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 30
 853: PUSH
 854: LD_INT 32
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: AND
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 33
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PPUSH
 895: CALL_OW 69
 899: AND
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 30
 913: PUSH
 914: LD_INT 5
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PPUSH
 925: CALL_OW 69
 929: AND
 930: PUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 30
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: AND
 960: PUSH
 961: LD_INT 22
 963: PUSH
 964: LD_INT 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 36
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 69
 989: AND
 990: PUSH
 991: LD_INT 22
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 31
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PPUSH
1015: CALL_OW 69
1019: AND
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 22
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 69
1049: AND
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 20
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: AND
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 30
1093: PUSH
1094: LD_INT 19
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PPUSH
1105: CALL_OW 69
1109: AND
1110: PUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 30
1123: PUSH
1124: LD_INT 16
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 69
1139: AND
1140: PUSH
1141: LD_INT 22
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 30
1153: PUSH
1154: LD_INT 17
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PPUSH
1165: CALL_OW 69
1169: AND
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 30
1183: PUSH
1184: LD_INT 21
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: AND
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 30
1213: PUSH
1214: LD_INT 29
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: AND
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PPUSH
1255: CALL_OW 69
1259: AND
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 30
1273: PUSH
1274: LD_INT 27
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: AND
1290: PUSH
1291: LD_INT 22
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 26
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: AND
1320: PUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 30
1333: PUSH
1334: LD_INT 28
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL_OW 69
1349: AND
1350: IFFALSE 1362
1352: GO 1354
1354: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1355: LD_STRING ACH_ARCH
1357: PPUSH
1358: CALL_OW 543
1362: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// count = 0 ;
1387: LD_ADDR_VAR 0 6
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_STRING JMM
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_STRING 10_
1408: PPUSH
1409: CALL 49145 0 3
1413: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1414: LD_ADDR_EXP 21
1418: PUSH
1419: LD_EXP 21
1423: PUSH
1424: LD_EXP 1
1428: ADD
1429: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1430: LD_ADDR_EXP 10
1434: PUSH
1435: LD_STRING Gary
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_STRING 10_
1443: PPUSH
1444: CALL 49145 0 3
1448: ST_TO_ADDR
// if Gary then
1449: LD_EXP 10
1453: IFFALSE 1471
// JMMSquad = JMMSquad ^ Gary ;
1455: LD_ADDR_EXP 21
1459: PUSH
1460: LD_EXP 21
1464: PUSH
1465: LD_EXP 10
1469: ADD
1470: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1471: LD_ADDR_EXP 5
1475: PUSH
1476: LD_STRING Cyrus
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_STRING 10_
1484: PPUSH
1485: CALL 49145 0 3
1489: ST_TO_ADDR
// if Cyrus then
1490: LD_EXP 5
1494: IFFALSE 1512
// JMMSquad = JMMSquad ^ Cyrus ;
1496: LD_ADDR_EXP 21
1500: PUSH
1501: LD_EXP 21
1505: PUSH
1506: LD_EXP 5
1510: ADD
1511: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_STRING Bobby
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 10_
1525: PPUSH
1526: CALL 49145 0 3
1530: ST_TO_ADDR
// if Bobby then
1531: LD_EXP 4
1535: IFFALSE 1553
// JMMSquad = JMMSquad ^ Bobby ;
1537: LD_ADDR_EXP 21
1541: PUSH
1542: LD_EXP 21
1546: PUSH
1547: LD_EXP 4
1551: ADD
1552: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1553: LD_ADDR_EXP 6
1557: PUSH
1558: LD_STRING Lisa
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_STRING 10_
1566: PPUSH
1567: CALL 49145 0 3
1571: ST_TO_ADDR
// if Lisa then
1572: LD_EXP 6
1576: IFFALSE 1594
// JMMSquad = JMMSquad ^ Lisa ;
1578: LD_ADDR_EXP 21
1582: PUSH
1583: LD_EXP 21
1587: PUSH
1588: LD_EXP 6
1592: ADD
1593: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1594: LD_ADDR_EXP 2
1598: PUSH
1599: LD_STRING Brown
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_STRING 10_
1607: PPUSH
1608: CALL 49145 0 3
1612: ST_TO_ADDR
// if Brown then
1613: LD_EXP 2
1617: IFFALSE 1635
// JMMSquad = JMMSquad ^ Brown ;
1619: LD_ADDR_EXP 21
1623: PUSH
1624: LD_EXP 21
1628: PUSH
1629: LD_EXP 2
1633: ADD
1634: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1635: LD_ADDR_EXP 3
1639: PUSH
1640: LD_STRING Donaldson
1642: PPUSH
1643: LD_INT 1
1645: PPUSH
1646: LD_STRING 10_
1648: PPUSH
1649: CALL 49145 0 3
1653: ST_TO_ADDR
// if Donaldson then
1654: LD_EXP 3
1658: IFFALSE 1676
// JMMSquad = JMMSquad ^ Donaldson ;
1660: LD_ADDR_EXP 21
1664: PUSH
1665: LD_EXP 21
1669: PUSH
1670: LD_EXP 3
1674: ADD
1675: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1676: LD_ADDR_EXP 7
1680: PUSH
1681: LD_STRING Frank
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_STRING 10_
1689: PPUSH
1690: CALL 49145 0 3
1694: ST_TO_ADDR
// if Frank then
1695: LD_EXP 7
1699: IFFALSE 1717
// JMMSquad = JMMSquad ^ Frank ;
1701: LD_ADDR_EXP 21
1705: PUSH
1706: LD_EXP 21
1710: PUSH
1711: LD_EXP 7
1715: ADD
1716: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1717: LD_ADDR_EXP 9
1721: PUSH
1722: LD_STRING Houten
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_STRING 10_
1730: PPUSH
1731: CALL 49145 0 3
1735: ST_TO_ADDR
// if Houten then
1736: LD_EXP 9
1740: IFFALSE 1758
// JMMSquad = JMMSquad ^ Houten ;
1742: LD_ADDR_EXP 21
1746: PUSH
1747: LD_EXP 21
1751: PUSH
1752: LD_EXP 9
1756: ADD
1757: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1758: LD_ADDR_EXP 22
1762: PUSH
1763: LD_STRING OthersIn10
1765: PPUSH
1766: CALL_OW 31
1770: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1771: LD_ADDR_EXP 25
1775: PUSH
1776: LD_STRING Powell
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: LD_STRING 
1784: PPUSH
1785: CALL 49145 0 3
1789: ST_TO_ADDR
// for i in JMMSquad do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_EXP 21
1799: PUSH
1800: FOR_IN
1801: IFFALSE 2081
// begin if count < 3 then
1803: LD_VAR 0 6
1807: PUSH
1808: LD_INT 3
1810: LESS
1811: IFFALSE 1928
// begin vc_engine = 1 ;
1813: LD_ADDR_OWVAR 39
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// vc_control = 1 ;
1821: LD_ADDR_OWVAR 38
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_weapon = 12 ;
1829: LD_ADDR_OWVAR 40
1833: PUSH
1834: LD_INT 12
1836: ST_TO_ADDR
// vc_chassis = 3 ;
1837: LD_ADDR_OWVAR 37
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// veh = CreateVehicle ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: CALL_OW 45
1854: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1855: LD_VAR 0 4
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1867: LD_VAR 0 4
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
// if count mod 2 = 0 then
1882: LD_VAR 0 6
1886: PUSH
1887: LD_INT 2
1889: MOD
1890: PUSH
1891: LD_INT 0
1893: EQUAL
1894: IFFALSE 1913
// AddCargo ( veh , 1 , 100 ) else
1896: LD_VAR 0 4
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 291
1911: GO 1928
// AddCargo ( veh , 3 , 100 ) end ;
1913: LD_VAR 0 4
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 100
1923: PPUSH
1924: CALL_OW 291
// if count >= 3 then
1928: LD_VAR 0 6
1932: PUSH
1933: LD_INT 3
1935: GREATEREQUAL
1936: IFFALSE 2051
// begin vc_engine = 1 ;
1938: LD_ADDR_OWVAR 39
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// vc_control = 1 ;
1946: LD_ADDR_OWVAR 38
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1954: LD_ADDR_OWVAR 40
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 4
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 12
1983: ARRAY
1984: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: MOD
2008: PUSH
2009: LD_INT 1
2011: PLUS
2012: ARRAY
2013: ST_TO_ADDR
// veh = CreateVehicle ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
// end ; count = count + 1 ;
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_VAR 0 4
2074: PPUSH
2075: CALL_OW 52
// end ;
2079: GO 1800
2081: POP
2082: POP
// for i := 1 to others10 do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 1
2091: DEC
2092: ST_TO_ADDR
2093: LD_EXP 22
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2330
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2101: LD_VAR 0 2
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 3
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_OWVAR 67
2128: ARRAY
2129: LESS
2130: IFFALSE 2283
// begin vc_engine = 1 ;
2132: LD_ADDR_OWVAR 39
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// vc_control = 1 ;
2140: LD_ADDR_OWVAR 38
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2148: LD_ADDR_OWVAR 40
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 4
2158: PUSH
2159: LD_INT 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 12
2177: ARRAY
2178: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2179: LD_ADDR_OWVAR 37
2183: PUSH
2184: LD_INT 2
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_VAR 0 2
2198: PUSH
2199: LD_INT 2
2201: MOD
2202: PUSH
2203: LD_INT 1
2205: PLUS
2206: ARRAY
2207: ST_TO_ADDR
// veh = CreateVehicle ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2218: LD_VAR 0 4
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 4
2234: PPUSH
2235: LD_INT 2
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2245: LD_ADDR_EXP 29
2249: PUSH
2250: LD_EXP 29
2254: PUSH
2255: LD_VAR 0 4
2259: ADD
2260: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2261: LD_EXP 22
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PPUSH
2272: LD_VAR 0 4
2276: PPUSH
2277: CALL_OW 52
// end else
2281: GO 2328
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2283: LD_EXP 22
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 106
2296: PPUSH
2297: LD_INT 33
2299: PPUSH
2300: LD_INT 6
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2310: LD_EXP 22
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_INT 4
2323: PPUSH
2324: CALL_OW 235
// end ; end ;
2328: GO 2098
2330: POP
2331: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2332: LD_INT 22
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 21
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: CALL_OW 336
// end ;
2368: LD_VAR 0 1
2372: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
// uc_side = 1 ;
2380: LD_ADDR_OWVAR 20
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// uc_nation = 1 ;
2388: LD_ADDR_OWVAR 21
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// for i := 1 to 10 do
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: DOUBLE
2402: LD_INT 1
2404: DEC
2405: ST_TO_ADDR
2406: LD_INT 10
2408: PUSH
2409: FOR_TO
2410: IFFALSE 2592
// begin vc_engine = 1 ;
2412: LD_ADDR_OWVAR 39
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_control = 1 ;
2420: LD_ADDR_OWVAR 38
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 12
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 4
2456: PPUSH
2457: CALL_OW 12
2461: ARRAY
2462: ST_TO_ADDR
// vc_chassis = 3 ;
2463: LD_ADDR_OWVAR 37
2467: PUSH
2468: LD_INT 3
2470: ST_TO_ADDR
// veh = CreateVehicle ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2481: LD_VAR 0 3
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2493: LD_VAR 0 3
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2508: LD_ADDR_EXP 29
2512: PUSH
2513: LD_EXP 29
2517: PUSH
2518: LD_VAR 0 3
2522: ADD
2523: ST_TO_ADDR
// if vc_weapon = 12 then
2524: LD_OWVAR 40
2528: PUSH
2529: LD_INT 12
2531: EQUAL
2532: IFFALSE 2590
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_INT 5
2541: PPUSH
2542: LD_INT 10
2544: PPUSH
2545: CALL_OW 12
2549: PUSH
2550: LD_INT 10
2552: MUL
2553: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 1
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 291
// end ; end ;
2590: GO 2409
2592: POP
2593: POP
// end ;
2594: LD_VAR 0 1
2598: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2599: LD_INT 0
2601: PPUSH
2602: PPUSH
2603: PPUSH
// uc_side = 4 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 4
2611: ST_TO_ADDR
// uc_nation = 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debugMode ) then
2620: LD_STRING 08_SikorskiStatus
2622: PPUSH
2623: LD_EXP 68
2627: PPUSH
2628: CALL_OW 30
2632: IFFALSE 2653
// Truman := PrepareUnit ( Truman , false ,  ) ;
2634: LD_ADDR_EXP 20
2638: PUSH
2639: LD_STRING Truman
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: LD_STRING 
2647: PPUSH
2648: CALL 49145 0 3
2652: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2653: LD_ADDR_EXP 11
2657: PUSH
2658: LD_STRING Simms
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: LD_STRING 
2666: PPUSH
2667: CALL 49145 0 3
2671: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2672: LD_ADDR_EXP 12
2676: PUSH
2677: LD_STRING Denis
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: LD_STRING 08_
2685: PPUSH
2686: CALL 49145 0 3
2690: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2691: LD_ADDR_EXP 13
2695: PUSH
2696: LD_STRING Joan
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: LD_STRING 08_
2704: PPUSH
2705: CALL 49145 0 3
2709: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2710: LD_STRING 08_Khatam
2712: PPUSH
2713: CALL_OW 28
2717: IFFALSE 2740
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2719: LD_ADDR_EXP 14
2723: PUSH
2724: LD_STRING Khatam
2726: PPUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_STRING 08_
2732: PPUSH
2733: CALL 49145 0 3
2737: ST_TO_ADDR
2738: GO 2768
// if TestCharacters ( 03_Khatam ) then
2740: LD_STRING 03_Khatam
2742: PPUSH
2743: CALL_OW 28
2747: IFFALSE 2768
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2749: LD_ADDR_EXP 14
2753: PUSH
2754: LD_STRING Khatam
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: LD_STRING 03_
2762: PPUSH
2763: CALL 49145 0 3
2767: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2768: LD_ADDR_EXP 15
2772: PUSH
2773: LD_STRING Gladstone
2775: PPUSH
2776: LD_INT 1
2778: PPUSH
2779: LD_STRING 08_
2781: PPUSH
2782: CALL 49145 0 3
2786: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2787: LD_ADDR_EXP 17
2791: PUSH
2792: LD_STRING DeltaDoctor
2794: PPUSH
2795: LD_INT 1
2797: PPUSH
2798: LD_STRING 
2800: PPUSH
2801: CALL 49145 0 3
2805: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2806: LD_ADDR_EXP 7
2810: PUSH
2811: LD_STRING Frank
2813: PPUSH
2814: LD_INT 1
2816: PPUSH
2817: LD_STRING 08_
2819: PPUSH
2820: CALL 49145 0 3
2824: ST_TO_ADDR
// if Frank then
2825: LD_EXP 7
2829: IFFALSE 2852
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2831: LD_ADDR_EXP 8
2835: PUSH
2836: LD_STRING Yamoko
2838: PPUSH
2839: LD_INT 0
2841: PPUSH
2842: LD_STRING 
2844: PPUSH
2845: CALL 49145 0 3
2849: ST_TO_ADDR
2850: GO 2871
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2852: LD_ADDR_EXP 8
2856: PUSH
2857: LD_STRING Kikuchi
2859: PPUSH
2860: LD_INT 1
2862: PPUSH
2863: LD_STRING 08_
2865: PPUSH
2866: CALL 49145 0 3
2870: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2871: LD_ADDR_EXP 23
2875: PUSH
2876: LD_STRING 09_others
2878: PPUSH
2879: CALL_OW 31
2883: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2884: LD_ADDR_EXP 24
2888: PUSH
2889: LD_STRING 09_apes
2891: PPUSH
2892: CALL_OW 31
2896: ST_TO_ADDR
// if Truman then
2897: LD_EXP 20
2901: IFFALSE 2918
// PlaceUnitArea ( Truman , CathyTeamSpawn , false ) ;
2903: LD_EXP 20
2907: PPUSH
2908: LD_INT 1
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 49
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2918: LD_EXP 11
2922: PPUSH
2923: LD_INT 1
2925: PPUSH
2926: LD_INT 0
2928: PPUSH
2929: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2933: LD_EXP 12
2937: PPUSH
2938: LD_INT 1
2940: PPUSH
2941: LD_INT 0
2943: PPUSH
2944: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2948: LD_EXP 13
2952: PPUSH
2953: LD_INT 1
2955: PPUSH
2956: LD_INT 0
2958: PPUSH
2959: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2963: LD_EXP 14
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 0
2973: PPUSH
2974: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2978: LD_EXP 15
2982: PPUSH
2983: LD_INT 1
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2993: LD_EXP 17
2997: PPUSH
2998: LD_INT 1
3000: PPUSH
3001: LD_INT 0
3003: PPUSH
3004: CALL_OW 49
// if Kikuchi then
3008: LD_EXP 8
3012: IFFALSE 3029
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
3014: LD_EXP 8
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 0
3024: PPUSH
3025: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3029: LD_EXP 11
3033: PUSH
3034: LD_EXP 14
3038: PUSH
3039: LD_EXP 12
3043: PUSH
3044: LD_EXP 15
3048: PUSH
3049: LD_EXP 17
3053: PUSH
3054: LD_EXP 13
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 336
// if others09 > 2 then
3074: LD_EXP 23
3078: PUSH
3079: LD_INT 2
3081: GREATER
3082: IFFALSE 3163
// begin for i := 1 to 3 do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: DOUBLE
3090: LD_INT 1
3092: DEC
3093: ST_TO_ADDR
3094: LD_INT 3
3096: PUSH
3097: FOR_TO
3098: IFFALSE 3159
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3100: LD_EXP 23
3104: PUSH
3105: LD_VAR 0 2
3109: ARRAY
3110: PPUSH
3111: LD_INT 1
3113: PPUSH
3114: LD_INT 0
3116: PPUSH
3117: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3121: LD_ADDR_EXP 23
3125: PUSH
3126: LD_EXP 23
3130: PPUSH
3131: LD_INT 1
3133: PPUSH
3134: CALL_OW 3
3138: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3139: LD_EXP 23
3143: PUSH
3144: LD_VAR 0 2
3148: ARRAY
3149: PPUSH
3150: LD_INT 2
3152: PPUSH
3153: CALL_OW 336
// end ;
3157: GO 3097
3159: POP
3160: POP
// end else
3161: GO 3223
// begin for i in others09 do
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 23
3172: PUSH
3173: FOR_IN
3174: IFFALSE 3221
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3176: LD_VAR 0 2
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: LD_INT 0
3186: PPUSH
3187: CALL_OW 49
// others09 = others09 diff i ;
3191: LD_ADDR_EXP 23
3195: PUSH
3196: LD_EXP 23
3200: PUSH
3201: LD_VAR 0 2
3205: DIFF
3206: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: CALL_OW 336
// end ;
3219: GO 3173
3221: POP
3222: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3223: LD_INT 22
3225: PUSH
3226: LD_INT 4
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: LD_INT 25
3235: PUSH
3236: LD_INT 2
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: PUSH
3252: LD_INT 0
3254: EQUAL
3255: IFFALSE 3387
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3257: LD_ADDR_VAR 0 3
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 25
3274: PUSH
3275: LD_INT 2
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: LD_EXP 11
3295: PUSH
3296: LD_EXP 14
3300: PUSH
3301: LD_EXP 12
3305: PUSH
3306: LD_EXP 15
3310: PUSH
3311: LD_EXP 17
3315: PUSH
3316: LD_EXP 13
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: DIFF
3329: ST_TO_ADDR
// if not tmp then
3330: LD_VAR 0 3
3334: NOT
3335: IFFALSE 3371
// begin if Denis then
3337: LD_EXP 12
3341: IFFALSE 3357
// SetClass ( Denis , 2 ) else
3343: LD_EXP 12
3347: PPUSH
3348: LD_INT 2
3350: PPUSH
3351: CALL_OW 336
3355: GO 3369
// SetClass ( DeltaDoctor , 2 ) ;
3357: LD_EXP 17
3361: PPUSH
3362: LD_INT 2
3364: PPUSH
3365: CALL_OW 336
// end else
3369: GO 3387
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3371: LD_VAR 0 3
3375: PUSH
3376: LD_INT 1
3378: ARRAY
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 336
// end ; end ; for i in ape09 do
3387: LD_ADDR_VAR 0 2
3391: PUSH
3392: LD_EXP 24
3396: PUSH
3397: FOR_IN
3398: IFFALSE 3417
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3400: LD_VAR 0 2
3404: PPUSH
3405: LD_INT 1
3407: PPUSH
3408: LD_INT 0
3410: PPUSH
3411: CALL_OW 49
3415: GO 3397
3417: POP
3418: POP
// uc_side = 4 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 4
3426: ST_TO_ADDR
// hc_class := 1 ;
3427: LD_ADDR_OWVAR 28
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// hc_sex := sex_female ;
3435: LD_ADDR_OWVAR 27
3439: PUSH
3440: LD_INT 2
3442: ST_TO_ADDR
// hc_gallery :=  ;
3443: LD_ADDR_OWVAR 33
3447: PUSH
3448: LD_STRING 
3450: ST_TO_ADDR
// hc_name :=  ;
3451: LD_ADDR_OWVAR 26
3455: PUSH
3456: LD_STRING 
3458: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3459: LD_ADDR_OWVAR 31
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: LD_INT 7
3469: PUSH
3470: LD_INT 1
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: ST_TO_ADDR
// AmScout = CreateHuman ;
3482: LD_ADDR_EXP 18
3486: PUSH
3487: CALL_OW 44
3491: ST_TO_ADDR
// end ;
3492: LD_VAR 0 1
3496: RET
// export function PrepareCornell ; begin
3497: LD_INT 0
3499: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 4
3505: PPUSH
3506: CALL_OW 343
// uc_side = 4 ;
3510: LD_ADDR_OWVAR 20
3514: PUSH
3515: LD_INT 4
3517: ST_TO_ADDR
// uc_nation = 1 ;
3518: LD_ADDR_OWVAR 21
3522: PUSH
3523: LD_INT 1
3525: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3526: LD_ADDR_EXP 19
3530: PUSH
3531: LD_STRING Cornel
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: LD_STRING 03_
3539: PPUSH
3540: CALL 49145 0 3
3544: ST_TO_ADDR
// if not Cornell then
3545: LD_EXP 19
3549: NOT
3550: IFFALSE 3554
// exit ;
3552: GO 3662
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3554: LD_EXP 19
3558: PPUSH
3559: LD_INT 8
3561: PPUSH
3562: LD_INT 0
3564: PPUSH
3565: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3569: LD_EXP 19
3573: PPUSH
3574: LD_INT 350
3576: PPUSH
3577: CALL_OW 234
// if IsInUnit ( JMM ) then
3581: LD_EXP 1
3585: PPUSH
3586: CALL_OW 310
3590: IFFALSE 3633
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3592: LD_EXP 19
3596: PPUSH
3597: LD_EXP 1
3601: PPUSH
3602: CALL_OW 310
3606: PPUSH
3607: CALL_OW 250
3611: PPUSH
3612: LD_EXP 1
3616: PPUSH
3617: CALL_OW 310
3621: PPUSH
3622: CALL_OW 251
3626: PPUSH
3627: CALL_OW 111
3631: GO 3662
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3633: LD_EXP 19
3637: PPUSH
3638: LD_EXP 1
3642: PPUSH
3643: CALL_OW 250
3647: PPUSH
3648: LD_EXP 1
3652: PPUSH
3653: CALL_OW 251
3657: PPUSH
3658: CALL_OW 111
// end ;
3662: LD_VAR 0 1
3666: RET
// every 0 0$1 trigger IsAt ( Truman , 17 , 31 ) do
3667: LD_EXP 20
3671: PPUSH
3672: LD_INT 17
3674: PPUSH
3675: LD_INT 31
3677: PPUSH
3678: CALL_OW 307
3682: IFFALSE 3696
3684: GO 3686
3686: DISABLE
// RemoveUnit ( Truman ) ;
3687: LD_EXP 20
3691: PPUSH
3692: CALL_OW 64
3696: END
// every 0 0$2 trigger joinEpsilon = 1 and IsOk ( Truman ) and not HasTask ( Truman ) do
3697: LD_EXP 30
3701: PUSH
3702: LD_INT 1
3704: EQUAL
3705: PUSH
3706: LD_EXP 20
3710: PPUSH
3711: CALL_OW 302
3715: AND
3716: PUSH
3717: LD_EXP 20
3721: PPUSH
3722: CALL_OW 314
3726: NOT
3727: AND
3728: IFFALSE 3749
3730: GO 3732
3732: DISABLE
// begin enable ;
3733: ENABLE
// ComMoveXY ( Truman , 17 , 31 ) ;
3734: LD_EXP 20
3738: PPUSH
3739: LD_INT 17
3741: PPUSH
3742: LD_INT 31
3744: PPUSH
3745: CALL_OW 111
// end ; end_of_file
3749: END
// export function PrepareRussians ; var i , un ; begin
3750: LD_INT 0
3752: PPUSH
3753: PPUSH
3754: PPUSH
// uc_side = 3 ;
3755: LD_ADDR_OWVAR 20
3759: PUSH
3760: LD_INT 3
3762: ST_TO_ADDR
// uc_nation = 3 ;
3763: LD_ADDR_OWVAR 21
3767: PUSH
3768: LD_INT 3
3770: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3771: LD_ADDR_EXP 26
3775: PUSH
3776: LD_STRING Tsaritsyn
3778: PPUSH
3779: LD_INT 0
3781: PPUSH
3782: LD_STRING 
3784: PPUSH
3785: CALL 49145 0 3
3789: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3790: LD_EXP 26
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: LD_INT 0
3800: PPUSH
3801: CALL_OW 49
// for i = 1 to 14 do
3805: LD_ADDR_VAR 0 2
3809: PUSH
3810: DOUBLE
3811: LD_INT 1
3813: DEC
3814: ST_TO_ADDR
3815: LD_INT 14
3817: PUSH
3818: FOR_TO
3819: IFFALSE 3905
// begin uc_side = 3 ;
3821: LD_ADDR_OWVAR 20
3825: PUSH
3826: LD_INT 3
3828: ST_TO_ADDR
// uc_nation = 3 ;
3829: LD_ADDR_OWVAR 21
3833: PUSH
3834: LD_INT 3
3836: ST_TO_ADDR
// hc_gallery =  ;
3837: LD_ADDR_OWVAR 33
3841: PUSH
3842: LD_STRING 
3844: ST_TO_ADDR
// hc_name =  ;
3845: LD_ADDR_OWVAR 26
3849: PUSH
3850: LD_STRING 
3852: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3853: LD_INT 0
3855: PPUSH
3856: LD_INT 1
3858: PPUSH
3859: LD_EXP 37
3863: PPUSH
3864: LD_EXP 38
3868: PPUSH
3869: CALL_OW 12
3873: PPUSH
3874: CALL_OW 380
// un = CreateHuman ;
3878: LD_ADDR_VAR 0 3
3882: PUSH
3883: CALL_OW 44
3887: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3888: LD_VAR 0 3
3892: PPUSH
3893: LD_INT 3
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 49
// end ;
3903: GO 3818
3905: POP
3906: POP
// for i = 1 to 6 do
3907: LD_ADDR_VAR 0 2
3911: PUSH
3912: DOUBLE
3913: LD_INT 1
3915: DEC
3916: ST_TO_ADDR
3917: LD_INT 6
3919: PUSH
3920: FOR_TO
3921: IFFALSE 4007
// begin uc_side = 3 ;
3923: LD_ADDR_OWVAR 20
3927: PUSH
3928: LD_INT 3
3930: ST_TO_ADDR
// uc_nation = 3 ;
3931: LD_ADDR_OWVAR 21
3935: PUSH
3936: LD_INT 3
3938: ST_TO_ADDR
// hc_gallery =  ;
3939: LD_ADDR_OWVAR 33
3943: PUSH
3944: LD_STRING 
3946: ST_TO_ADDR
// hc_name =  ;
3947: LD_ADDR_OWVAR 26
3951: PUSH
3952: LD_STRING 
3954: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3955: LD_INT 0
3957: PPUSH
3958: LD_INT 2
3960: PPUSH
3961: LD_EXP 37
3965: PPUSH
3966: LD_EXP 38
3970: PPUSH
3971: CALL_OW 12
3975: PPUSH
3976: CALL_OW 380
// un = CreateHuman ;
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: CALL_OW 44
3989: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3990: LD_VAR 0 3
3994: PPUSH
3995: LD_INT 3
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 49
// end ;
4005: GO 3920
4007: POP
4008: POP
// for i = 1 to 6 do
4009: LD_ADDR_VAR 0 2
4013: PUSH
4014: DOUBLE
4015: LD_INT 1
4017: DEC
4018: ST_TO_ADDR
4019: LD_INT 6
4021: PUSH
4022: FOR_TO
4023: IFFALSE 4109
// begin uc_side = 3 ;
4025: LD_ADDR_OWVAR 20
4029: PUSH
4030: LD_INT 3
4032: ST_TO_ADDR
// uc_nation = 3 ;
4033: LD_ADDR_OWVAR 21
4037: PUSH
4038: LD_INT 3
4040: ST_TO_ADDR
// hc_gallery =  ;
4041: LD_ADDR_OWVAR 33
4045: PUSH
4046: LD_STRING 
4048: ST_TO_ADDR
// hc_name =  ;
4049: LD_ADDR_OWVAR 26
4053: PUSH
4054: LD_STRING 
4056: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4057: LD_INT 0
4059: PPUSH
4060: LD_INT 3
4062: PPUSH
4063: LD_EXP 37
4067: PPUSH
4068: LD_EXP 38
4072: PPUSH
4073: CALL_OW 12
4077: PPUSH
4078: CALL_OW 380
// un = CreateHuman ;
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: CALL_OW 44
4091: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 3
4099: PPUSH
4100: LD_INT 0
4102: PPUSH
4103: CALL_OW 49
// end ;
4107: GO 4022
4109: POP
4110: POP
// for i = 1 to 4 do
4111: LD_ADDR_VAR 0 2
4115: PUSH
4116: DOUBLE
4117: LD_INT 1
4119: DEC
4120: ST_TO_ADDR
4121: LD_INT 4
4123: PUSH
4124: FOR_TO
4125: IFFALSE 4211
// begin uc_side = 3 ;
4127: LD_ADDR_OWVAR 20
4131: PUSH
4132: LD_INT 3
4134: ST_TO_ADDR
// uc_nation = 3 ;
4135: LD_ADDR_OWVAR 21
4139: PUSH
4140: LD_INT 3
4142: ST_TO_ADDR
// hc_gallery =  ;
4143: LD_ADDR_OWVAR 33
4147: PUSH
4148: LD_STRING 
4150: ST_TO_ADDR
// hc_name =  ;
4151: LD_ADDR_OWVAR 26
4155: PUSH
4156: LD_STRING 
4158: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4159: LD_INT 0
4161: PPUSH
4162: LD_INT 4
4164: PPUSH
4165: LD_EXP 37
4169: PPUSH
4170: LD_EXP 38
4174: PPUSH
4175: CALL_OW 12
4179: PPUSH
4180: CALL_OW 380
// un = CreateHuman ;
4184: LD_ADDR_VAR 0 3
4188: PUSH
4189: CALL_OW 44
4193: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4194: LD_VAR 0 3
4198: PPUSH
4199: LD_INT 3
4201: PPUSH
4202: LD_INT 0
4204: PPUSH
4205: CALL_OW 49
// end ;
4209: GO 4124
4211: POP
4212: POP
// end ; end_of_file
4213: LD_VAR 0 1
4217: RET
// export function PrepareArabianCommander ; begin
4218: LD_INT 0
4220: PPUSH
// uc_side = 2 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 2
4228: ST_TO_ADDR
// uc_nation = 2 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 2
4236: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4237: LD_ADDR_EXP 27
4241: PUSH
4242: LD_STRING Dietrich
4244: PPUSH
4245: CALL_OW 25
4249: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4250: LD_EXP 27
4254: PPUSH
4255: LD_INT 4
4257: PPUSH
4258: LD_INT 0
4260: PPUSH
4261: CALL_OW 49
// end ;
4265: LD_VAR 0 1
4269: RET
// export function PrepareArabian ; var i , un , veh ; begin
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
4275: PPUSH
// uc_side := 2 ;
4276: LD_ADDR_OWVAR 20
4280: PUSH
4281: LD_INT 2
4283: ST_TO_ADDR
// uc_nation := 2 ;
4284: LD_ADDR_OWVAR 21
4288: PUSH
4289: LD_INT 2
4291: ST_TO_ADDR
// if not Ahmed then
4292: LD_EXP 28
4296: NOT
4297: IFFALSE 4365
// begin InitHc ;
4299: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4303: LD_INT 1
4305: PPUSH
4306: LD_INT 1
4308: PPUSH
4309: LD_EXP 37
4313: PPUSH
4314: LD_EXP 38
4318: PUSH
4319: LD_INT 1
4321: PLUS
4322: PPUSH
4323: CALL_OW 12
4327: PPUSH
4328: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4332: LD_ADDR_OWVAR 26
4336: PUSH
4337: LD_STRING Ahmed Abbasid
4339: ST_TO_ADDR
// Ahmed := CreateHuman ;
4340: LD_ADDR_EXP 28
4344: PUSH
4345: CALL_OW 44
4349: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4350: LD_EXP 28
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: CALL_OW 49
// end ; for i = 1 to 4 do
4365: LD_ADDR_VAR 0 2
4369: PUSH
4370: DOUBLE
4371: LD_INT 1
4373: DEC
4374: ST_TO_ADDR
4375: LD_INT 4
4377: PUSH
4378: FOR_TO
4379: IFFALSE 4465
// begin uc_side = 2 ;
4381: LD_ADDR_OWVAR 20
4385: PUSH
4386: LD_INT 2
4388: ST_TO_ADDR
// uc_nation = 2 ;
4389: LD_ADDR_OWVAR 21
4393: PUSH
4394: LD_INT 2
4396: ST_TO_ADDR
// hc_gallery =  ;
4397: LD_ADDR_OWVAR 33
4401: PUSH
4402: LD_STRING 
4404: ST_TO_ADDR
// hc_name =  ;
4405: LD_ADDR_OWVAR 26
4409: PUSH
4410: LD_STRING 
4412: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4413: LD_INT 0
4415: PPUSH
4416: LD_INT 2
4418: PPUSH
4419: LD_EXP 37
4423: PPUSH
4424: LD_EXP 38
4428: PPUSH
4429: CALL_OW 12
4433: PPUSH
4434: CALL_OW 380
// un = CreateHuman ;
4438: LD_ADDR_VAR 0 3
4442: PUSH
4443: CALL_OW 44
4447: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4448: LD_VAR 0 3
4452: PPUSH
4453: LD_INT 4
4455: PPUSH
4456: LD_INT 0
4458: PPUSH
4459: CALL_OW 49
// end ;
4463: GO 4378
4465: POP
4466: POP
// for i = 1 to 5 do
4467: LD_ADDR_VAR 0 2
4471: PUSH
4472: DOUBLE
4473: LD_INT 1
4475: DEC
4476: ST_TO_ADDR
4477: LD_INT 5
4479: PUSH
4480: FOR_TO
4481: IFFALSE 4567
// begin uc_side = 2 ;
4483: LD_ADDR_OWVAR 20
4487: PUSH
4488: LD_INT 2
4490: ST_TO_ADDR
// uc_nation = 2 ;
4491: LD_ADDR_OWVAR 21
4495: PUSH
4496: LD_INT 2
4498: ST_TO_ADDR
// hc_gallery =  ;
4499: LD_ADDR_OWVAR 33
4503: PUSH
4504: LD_STRING 
4506: ST_TO_ADDR
// hc_name =  ;
4507: LD_ADDR_OWVAR 26
4511: PUSH
4512: LD_STRING 
4514: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4515: LD_INT 0
4517: PPUSH
4518: LD_INT 1
4520: PPUSH
4521: LD_EXP 37
4525: PPUSH
4526: LD_EXP 38
4530: PPUSH
4531: CALL_OW 12
4535: PPUSH
4536: CALL_OW 380
// un = CreateHuman ;
4540: LD_ADDR_VAR 0 3
4544: PUSH
4545: CALL_OW 44
4549: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4550: LD_VAR 0 3
4554: PPUSH
4555: LD_INT 4
4557: PPUSH
4558: LD_INT 0
4560: PPUSH
4561: CALL_OW 49
// end ;
4565: GO 4480
4567: POP
4568: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4569: LD_ADDR_VAR 0 2
4573: PUSH
4574: DOUBLE
4575: LD_INT 1
4577: DEC
4578: ST_TO_ADDR
4579: LD_INT 3
4581: PUSH
4582: LD_INT 4
4584: PUSH
4585: LD_INT 4
4587: PUSH
4588: LD_INT 4
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: LD_OWVAR 67
4601: ARRAY
4602: PUSH
4603: FOR_TO
4604: IFFALSE 4690
// begin uc_side = 2 ;
4606: LD_ADDR_OWVAR 20
4610: PUSH
4611: LD_INT 2
4613: ST_TO_ADDR
// uc_nation = 2 ;
4614: LD_ADDR_OWVAR 21
4618: PUSH
4619: LD_INT 2
4621: ST_TO_ADDR
// hc_gallery =  ;
4622: LD_ADDR_OWVAR 33
4626: PUSH
4627: LD_STRING 
4629: ST_TO_ADDR
// hc_name =  ;
4630: LD_ADDR_OWVAR 26
4634: PUSH
4635: LD_STRING 
4637: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4638: LD_INT 0
4640: PPUSH
4641: LD_INT 4
4643: PPUSH
4644: LD_EXP 37
4648: PPUSH
4649: LD_EXP 38
4653: PPUSH
4654: CALL_OW 12
4658: PPUSH
4659: CALL_OW 380
// un = CreateHuman ;
4663: LD_ADDR_VAR 0 3
4667: PUSH
4668: CALL_OW 44
4672: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4673: LD_VAR 0 3
4677: PPUSH
4678: LD_INT 4
4680: PPUSH
4681: LD_INT 0
4683: PPUSH
4684: CALL_OW 49
// end ;
4688: GO 4603
4690: POP
4691: POP
// for i = 1 to 2 do
4692: LD_ADDR_VAR 0 2
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_INT 2
4704: PUSH
4705: FOR_TO
4706: IFFALSE 4836
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_INT 2
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 21
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: LD_INT 58
4735: PUSH
4736: EMPTY
4737: LIST
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: PPUSH
4744: CALL_OW 69
4748: ST_TO_ADDR
// uc_side = 2 ;
4749: LD_ADDR_OWVAR 20
4753: PUSH
4754: LD_INT 2
4756: ST_TO_ADDR
// uc_nation = 2 ;
4757: LD_ADDR_OWVAR 21
4761: PUSH
4762: LD_INT 2
4764: ST_TO_ADDR
// hc_gallery =  ;
4765: LD_ADDR_OWVAR 33
4769: PUSH
4770: LD_STRING 
4772: ST_TO_ADDR
// hc_name =  ;
4773: LD_ADDR_OWVAR 26
4777: PUSH
4778: LD_STRING 
4780: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 3
4786: PPUSH
4787: LD_EXP 37
4791: PPUSH
4792: LD_EXP 38
4796: PPUSH
4797: CALL_OW 12
4801: PPUSH
4802: CALL_OW 380
// un = CreateHuman ;
4806: LD_ADDR_VAR 0 3
4810: PUSH
4811: CALL_OW 44
4815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_VAR 0 4
4825: PUSH
4826: LD_INT 1
4828: ARRAY
4829: PPUSH
4830: CALL_OW 52
// end ;
4834: GO 4705
4836: POP
4837: POP
// end ;
4838: LD_VAR 0 1
4842: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4843: LD_INT 0
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
// for i := 1 to 2 do
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: DOUBLE
4857: LD_INT 1
4859: DEC
4860: ST_TO_ADDR
4861: LD_INT 2
4863: PUSH
4864: FOR_TO
4865: IFFALSE 4991
// begin uc_side = 5 ;
4867: LD_ADDR_OWVAR 20
4871: PUSH
4872: LD_INT 5
4874: ST_TO_ADDR
// uc_nation = 2 ;
4875: LD_ADDR_OWVAR 21
4879: PUSH
4880: LD_INT 2
4882: ST_TO_ADDR
// vc_chassis := 31 ;
4883: LD_ADDR_OWVAR 37
4887: PUSH
4888: LD_INT 31
4890: ST_TO_ADDR
// vc_control := control_rider ;
4891: LD_ADDR_OWVAR 38
4895: PUSH
4896: LD_INT 4
4898: ST_TO_ADDR
// animal := CreateVehicle ;
4899: LD_ADDR_VAR 0 3
4903: PUSH
4904: CALL_OW 45
4908: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4909: LD_VAR 0 3
4913: PPUSH
4914: LD_INT 7
4916: PPUSH
4917: LD_INT 0
4919: PPUSH
4920: CALL_OW 49
// hc_gallery =  ;
4924: LD_ADDR_OWVAR 33
4928: PUSH
4929: LD_STRING 
4931: ST_TO_ADDR
// hc_name =  ;
4932: LD_ADDR_OWVAR 26
4936: PUSH
4937: LD_STRING 
4939: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4940: LD_INT 0
4942: PPUSH
4943: LD_INT 11
4945: PPUSH
4946: LD_EXP 37
4950: PPUSH
4951: LD_EXP 38
4955: PPUSH
4956: CALL_OW 12
4960: PPUSH
4961: CALL_OW 380
// un = CreateHuman ;
4965: LD_ADDR_VAR 0 4
4969: PUSH
4970: CALL_OW 44
4974: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4975: LD_VAR 0 4
4979: PPUSH
4980: LD_VAR 0 3
4984: PPUSH
4985: CALL_OW 52
// end ;
4989: GO 4864
4991: POP
4992: POP
// repeat wait ( 0 0$1 ) ;
4993: LD_INT 35
4995: PPUSH
4996: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
5000: LD_ADDR_VAR 0 5
5004: PUSH
5005: LD_INT 22
5007: PUSH
5008: LD_INT 1
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PPUSH
5015: CALL_OW 69
5019: PPUSH
5020: LD_VAR 0 2
5024: PPUSH
5025: CALL_OW 74
5029: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5030: LD_ADDR_VAR 0 6
5034: PUSH
5035: LD_INT 22
5037: PUSH
5038: LD_INT 1
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: PUSH
5045: LD_INT 2
5047: PUSH
5048: LD_INT 59
5050: PUSH
5051: EMPTY
5052: LIST
5053: PUSH
5054: LD_INT 21
5056: PUSH
5057: LD_INT 1
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: PUSH
5064: LD_INT 21
5066: PUSH
5067: LD_INT 2
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: EMPTY
5085: LIST
5086: PPUSH
5087: CALL_OW 69
5091: PPUSH
5092: LD_VAR 0 2
5096: PPUSH
5097: CALL_OW 74
5101: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_INT 22
5109: PUSH
5110: LD_INT 5
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 25
5119: PUSH
5120: LD_INT 11
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL_OW 69
5135: PUSH
5136: FOR_IN
5137: IFFALSE 5207
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5139: LD_VAR 0 2
5143: PPUSH
5144: LD_VAR 0 5
5148: PPUSH
5149: CALL_OW 296
5153: PUSH
5154: LD_INT 8
5156: PLUS
5157: PUSH
5158: LD_VAR 0 2
5162: PPUSH
5163: LD_VAR 0 6
5167: PPUSH
5168: CALL_OW 296
5172: LESS
5173: IFFALSE 5191
// ComAttackUnit ( i , target1 ) else
5175: LD_VAR 0 2
5179: PPUSH
5180: LD_VAR 0 5
5184: PPUSH
5185: CALL_OW 115
5189: GO 5205
// ComAttackUnit ( i , target2 ) ;
5191: LD_VAR 0 2
5195: PPUSH
5196: LD_VAR 0 6
5200: PPUSH
5201: CALL_OW 115
// end ;
5205: GO 5136
5207: POP
5208: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5209: LD_INT 22
5211: PUSH
5212: LD_INT 5
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: LD_INT 25
5221: PUSH
5222: LD_INT 11
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PPUSH
5233: CALL_OW 69
5237: PUSH
5238: LD_INT 0
5240: EQUAL
5241: PUSH
5242: LD_INT 22
5244: PUSH
5245: LD_INT 1
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PPUSH
5252: CALL_OW 69
5256: PUSH
5257: LD_INT 0
5259: EQUAL
5260: OR
5261: IFFALSE 4993
// end ; end_of_file
5263: LD_VAR 0 1
5267: RET
// every 0 0$1 do
5268: GO 5270
5270: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
5271: LD_INT 1
5273: PPUSH
5274: LD_INT 19
5276: PPUSH
5277: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5281: LD_EXP 11
5285: PPUSH
5286: CALL_OW 87
// wait ( 0 0$3 ) ;
5290: LD_INT 105
5292: PPUSH
5293: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5297: LD_EXP 1
5301: PPUSH
5302: CALL_OW 310
5306: PPUSH
5307: CALL_OW 85
// Wait ( 0 0$1 ) ;
5311: LD_INT 35
5313: PPUSH
5314: CALL_OW 67
// if IsOk ( Gary ) then
5318: LD_EXP 10
5322: PPUSH
5323: CALL_OW 302
5327: IFFALSE 5365
// begin Say ( Gary , D2-Gary-1 ) ;
5329: LD_EXP 10
5333: PPUSH
5334: LD_STRING D2-Gary-1
5336: PPUSH
5337: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5341: LD_EXP 1
5345: PPUSH
5346: LD_STRING D2-JMM-1
5348: PPUSH
5349: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5353: LD_EXP 10
5357: PPUSH
5358: LD_STRING D2-Gary-2
5360: PPUSH
5361: CALL_OW 88
// end ; Video ( false ) ;
5365: LD_INT 0
5367: PPUSH
5368: CALL 85951 0 1
// ChangeMissionObjectives ( M1 ) ;
5372: LD_STRING M1
5374: PPUSH
5375: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5379: LD_INT 38
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: LD_INT 100
5387: PPUSH
5388: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5392: LD_INT 47
5394: PPUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_INT 50
5400: PPUSH
5401: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5405: LD_INT 47
5407: PPUSH
5408: LD_INT 3
5410: PPUSH
5411: LD_INT 50
5413: PPUSH
5414: CALL_OW 291
// SaveForQuickRestart ;
5418: CALL_OW 22
// end ;
5422: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5423: LD_EXP 1
5427: PPUSH
5428: LD_EXP 11
5432: PPUSH
5433: CALL_OW 296
5437: PUSH
5438: LD_INT 15
5440: LESS
5441: IFFALSE 6269
5443: GO 5445
5445: DISABLE
5446: LD_INT 0
5448: PPUSH
// begin wait ( 0 0$3 ) ;
5449: LD_INT 105
5451: PPUSH
5452: CALL_OW 67
// Video ( true ) ;
5456: LD_INT 1
5458: PPUSH
5459: CALL 85951 0 1
// ComExitVehicle ( JMM ) ;
5463: LD_EXP 1
5467: PPUSH
5468: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5472: LD_EXP 1
5476: PPUSH
5477: CALL_OW 87
// if Truman then
5481: LD_EXP 20
5485: IFFALSE 5622
// begin ComMoveUnit ( Truman , JMM ) ;
5487: LD_EXP 20
5491: PPUSH
5492: LD_EXP 1
5496: PPUSH
5497: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5501: LD_INT 35
5503: PPUSH
5504: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
5508: LD_EXP 20
5512: PPUSH
5513: LD_EXP 1
5517: PPUSH
5518: CALL_OW 296
5522: PUSH
5523: LD_INT 6
5525: LESS
5526: IFFALSE 5501
// ComTurnUnit ( Truman , JMM ) ;
5528: LD_EXP 20
5532: PPUSH
5533: LD_EXP 1
5537: PPUSH
5538: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
5542: LD_EXP 1
5546: PPUSH
5547: LD_EXP 20
5551: PPUSH
5552: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
5556: LD_EXP 20
5560: PPUSH
5561: LD_STRING D2-Tru-1
5563: PPUSH
5564: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_STRING D2-JMM-Tru-1
5575: PPUSH
5576: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
5580: LD_EXP 20
5584: PPUSH
5585: LD_STRING D2-Tru-2
5587: PPUSH
5588: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
5592: LD_EXP 20
5596: PPUSH
5597: LD_INT 79
5599: PPUSH
5600: LD_INT 41
5602: PPUSH
5603: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
5607: LD_EXP 20
5611: PPUSH
5612: LD_INT 17
5614: PPUSH
5615: LD_INT 31
5617: PPUSH
5618: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
5622: LD_EXP 1
5626: PPUSH
5627: LD_EXP 11
5631: PPUSH
5632: CALL_OW 179
// p := 15 ;
5636: LD_ADDR_VAR 0 1
5640: PUSH
5641: LD_INT 15
5643: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5651: LD_EXP 11
5655: PUSH
5656: LD_EXP 13
5660: PUSH
5661: LD_EXP 12
5665: PUSH
5666: LD_EXP 14
5670: PUSH
5671: LD_EXP 8
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: PPUSH
5683: LD_EXP 1
5687: PPUSH
5688: CALL_OW 112
// p := p - 1 ;
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 1
5701: PUSH
5702: LD_INT 1
5704: MINUS
5705: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5706: LD_EXP 1
5710: PPUSH
5711: LD_EXP 11
5715: PPUSH
5716: CALL_OW 296
5720: PUSH
5721: LD_INT 5
5723: LESS
5724: PUSH
5725: LD_VAR 0 1
5729: PUSH
5730: LD_INT 0
5732: LESSEQUAL
5733: OR
5734: IFFALSE 5644
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5736: LD_EXP 11
5740: PUSH
5741: LD_EXP 13
5745: PUSH
5746: LD_EXP 12
5750: PUSH
5751: LD_EXP 14
5755: PUSH
5756: LD_EXP 8
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: PPUSH
5768: LD_EXP 1
5772: PPUSH
5773: CALL_OW 119
// if not IsInUnit ( JMM ) then
5777: LD_EXP 1
5781: PPUSH
5782: CALL_OW 310
5786: NOT
5787: IFFALSE 5803
// ComTurnUnit ( JMM , Simms ) ;
5789: LD_EXP 1
5793: PPUSH
5794: LD_EXP 11
5798: PPUSH
5799: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5803: LD_EXP 11
5807: PUSH
5808: LD_EXP 13
5812: PUSH
5813: LD_EXP 12
5817: PUSH
5818: LD_EXP 14
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PPUSH
5829: LD_EXP 1
5833: PPUSH
5834: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5838: LD_EXP 1
5842: PUSH
5843: LD_EXP 11
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5856: LD_EXP 11
5860: PPUSH
5861: LD_STRING D2a-Sim-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D2a-JMM-1
5875: PPUSH
5876: CALL_OW 88
// if IsOk ( Joan ) then
5880: LD_EXP 13
5884: PPUSH
5885: CALL_OW 302
5889: IFFALSE 5967
// begin if not IsInUnit ( JMM ) then
5891: LD_EXP 1
5895: PPUSH
5896: CALL_OW 310
5900: NOT
5901: IFFALSE 5917
// ComTurnUnit ( JMM , Joan ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_EXP 13
5912: PPUSH
5913: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5917: LD_EXP 13
5921: PPUSH
5922: LD_EXP 1
5926: PPUSH
5927: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5931: LD_EXP 13
5935: PPUSH
5936: LD_STRING D2b-Joan-1
5938: PPUSH
5939: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5943: LD_EXP 1
5947: PPUSH
5948: LD_STRING D2b-JMM-1
5950: PPUSH
5951: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5955: LD_EXP 13
5959: PPUSH
5960: LD_STRING D2b-Joan-2
5962: PPUSH
5963: CALL_OW 88
// end ; if IsOk ( Denis ) then
5967: LD_EXP 12
5971: PPUSH
5972: CALL_OW 302
5976: IFFALSE 6030
// begin if not IsInUnit ( JMM ) then
5978: LD_EXP 1
5982: PPUSH
5983: CALL_OW 310
5987: NOT
5988: IFFALSE 6004
// ComTurnUnit ( JMM , Denis ) ;
5990: LD_EXP 1
5994: PPUSH
5995: LD_EXP 12
5999: PPUSH
6000: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
6004: LD_EXP 12
6008: PPUSH
6009: LD_EXP 1
6013: PPUSH
6014: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
6018: LD_EXP 12
6022: PPUSH
6023: LD_STRING D2c-Den-1
6025: PPUSH
6026: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
6030: LD_EXP 8
6034: PPUSH
6035: CALL_OW 302
6039: PUSH
6040: LD_STRING 08_Kikuchi
6042: PPUSH
6043: CALL_OW 28
6047: NOT
6048: AND
6049: IFFALSE 6144
// begin repeat wait ( 0 0$1 ) ;
6051: LD_INT 35
6053: PPUSH
6054: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
6058: LD_EXP 8
6062: PPUSH
6063: LD_EXP 1
6067: PPUSH
6068: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
6072: LD_EXP 1
6076: PPUSH
6077: LD_EXP 8
6081: PPUSH
6082: CALL_OW 296
6086: PUSH
6087: LD_INT 5
6089: LESS
6090: IFFALSE 6051
// ComTurnUnit ( Kikuchi , JMM ) ;
6092: LD_EXP 8
6096: PPUSH
6097: LD_EXP 1
6101: PPUSH
6102: CALL_OW 119
// if not IsInUnit ( JMM ) then
6106: LD_EXP 1
6110: PPUSH
6111: CALL_OW 310
6115: NOT
6116: IFFALSE 6132
// ComTurnUnit ( JMM , Kikuchi ) ;
6118: LD_EXP 1
6122: PPUSH
6123: LD_EXP 8
6127: PPUSH
6128: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
6132: LD_EXP 8
6136: PPUSH
6137: LD_STRING D3b-Yam-1
6139: PPUSH
6140: CALL_OW 88
// end ; if IsOk ( Khatam ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 302
6153: IFFALSE 6219
// begin if not IsInUnit ( JMM ) then
6155: LD_EXP 1
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: IFFALSE 6181
// ComTurnUnit ( JMM , Khatam ) ;
6167: LD_EXP 1
6171: PPUSH
6172: LD_EXP 14
6176: PPUSH
6177: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
6181: LD_EXP 14
6185: PPUSH
6186: LD_EXP 1
6190: PPUSH
6191: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
6195: LD_EXP 1
6199: PPUSH
6200: LD_STRING D2c-JMM-1
6202: PPUSH
6203: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
6207: LD_EXP 14
6211: PPUSH
6212: LD_STRING D2c-Khat-1
6214: PPUSH
6215: CALL_OW 88
// end ; Video ( false ) ;
6219: LD_INT 0
6221: PPUSH
6222: CALL 85951 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
6226: LD_INT 22
6228: PUSH
6229: LD_INT 4
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 69
6240: PUSH
6241: LD_EXP 20
6245: DIFF
6246: PPUSH
6247: LD_INT 1
6249: PPUSH
6250: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
6254: LD_STRING M1a
6256: PPUSH
6257: CALL_OW 337
// joinEpsilon := 1 ;
6261: LD_ADDR_EXP 30
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// end ;
6269: PPOPN 1
6271: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6272: LD_INT 38
6274: PPUSH
6275: LD_INT 1
6277: PPUSH
6278: CALL_OW 289
6282: PUSH
6283: LD_INT 0
6285: EQUAL
6286: PUSH
6287: LD_INT 47
6289: PPUSH
6290: LD_INT 1
6292: PPUSH
6293: CALL_OW 289
6297: PUSH
6298: LD_INT 0
6300: EQUAL
6301: AND
6302: PUSH
6303: LD_INT 47
6305: PPUSH
6306: LD_INT 2
6308: PPUSH
6309: CALL_OW 289
6313: PUSH
6314: LD_INT 0
6316: EQUAL
6317: AND
6318: IFFALSE 6443
6320: GO 6322
6322: DISABLE
6323: LD_INT 0
6325: PPUSH
// begin p := 0 ;
6326: LD_ADDR_VAR 0 1
6330: PUSH
6331: LD_INT 0
6333: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6334: LD_INT 38
6336: PUSH
6337: LD_INT 47
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PPUSH
6344: LD_INT 56
6346: PPUSH
6347: LD_INT 0
6349: PPUSH
6350: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6354: LD_INT 35
6356: PPUSH
6357: CALL_OW 67
// p := p + 1 ;
6361: LD_ADDR_VAR 0 1
6365: PUSH
6366: LD_VAR 0 1
6370: PUSH
6371: LD_INT 1
6373: PLUS
6374: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6375: LD_INT 38
6377: PUSH
6378: LD_INT 47
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PPUSH
6385: LD_INT 56
6387: PPUSH
6388: LD_INT 0
6390: PPUSH
6391: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6395: LD_INT 38
6397: PPUSH
6398: LD_INT 27
6400: PPUSH
6401: CALL_OW 308
6405: IFFALSE 6414
// RemoveUnit ( cargo1 ) ;
6407: LD_INT 38
6409: PPUSH
6410: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6414: LD_INT 47
6416: PPUSH
6417: LD_INT 27
6419: PPUSH
6420: CALL_OW 308
6424: IFFALSE 6433
// RemoveUnit ( cargo2 ) ;
6426: LD_INT 47
6428: PPUSH
6429: CALL_OW 64
// until p > 30 ;
6433: LD_VAR 0 1
6437: PUSH
6438: LD_INT 30
6440: GREATER
6441: IFFALSE 6354
// end ;
6443: PPOPN 1
6445: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6446: LD_EXP 66
6450: PUSH
6451: LD_INT 1
6453: EQUAL
6454: IFFALSE 7615
6456: GO 6458
6458: DISABLE
6459: LD_INT 0
6461: PPUSH
6462: PPUSH
6463: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6464: LD_ADDR_VAR 0 1
6468: PUSH
6469: LD_INT 22
6471: PUSH
6472: LD_INT 1
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 25
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 26
6491: PUSH
6492: LD_INT 1
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: PPUSH
6504: CALL_OW 69
6508: PUSH
6509: LD_EXP 1
6513: PUSH
6514: LD_EXP 2
6518: PUSH
6519: LD_EXP 3
6523: PUSH
6524: LD_EXP 4
6528: PUSH
6529: LD_EXP 5
6533: PUSH
6534: LD_EXP 6
6538: PUSH
6539: LD_EXP 7
6543: PUSH
6544: LD_EXP 8
6548: PUSH
6549: LD_EXP 9
6553: PUSH
6554: LD_EXP 10
6558: PUSH
6559: LD_EXP 11
6563: PUSH
6564: LD_EXP 12
6568: PUSH
6569: LD_EXP 13
6573: PUSH
6574: LD_EXP 14
6578: PUSH
6579: LD_EXP 15
6583: PUSH
6584: LD_EXP 16
6588: PUSH
6589: LD_EXP 17
6593: PUSH
6594: LD_EXP 18
6598: PUSH
6599: LD_EXP 19
6603: PUSH
6604: LD_EXP 25
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: DIFF
6631: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6632: LD_ADDR_VAR 0 2
6636: PUSH
6637: LD_INT 22
6639: PUSH
6640: LD_INT 1
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 26
6649: PUSH
6650: LD_INT 1
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: LD_INT 25
6662: PUSH
6663: LD_INT 1
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 25
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 25
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: PPUSH
6701: CALL_OW 69
6705: PUSH
6706: LD_EXP 1
6710: PUSH
6711: LD_EXP 2
6715: PUSH
6716: LD_EXP 3
6720: PUSH
6721: LD_EXP 4
6725: PUSH
6726: LD_EXP 5
6730: PUSH
6731: LD_EXP 6
6735: PUSH
6736: LD_EXP 7
6740: PUSH
6741: LD_EXP 8
6745: PUSH
6746: LD_EXP 9
6750: PUSH
6751: LD_EXP 10
6755: PUSH
6756: LD_EXP 11
6760: PUSH
6761: LD_EXP 12
6765: PUSH
6766: LD_EXP 13
6770: PUSH
6771: LD_EXP 14
6775: PUSH
6776: LD_EXP 15
6780: PUSH
6781: LD_EXP 16
6785: PUSH
6786: LD_EXP 17
6790: PUSH
6791: LD_EXP 18
6795: PUSH
6796: LD_EXP 19
6800: PUSH
6801: LD_EXP 25
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: DIFF
6828: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6829: LD_EXP 10
6833: PUSH
6834: LD_VAR 0 2
6838: OR
6839: PUSH
6840: LD_EXP 17
6844: PUSH
6845: LD_VAR 0 1
6849: OR
6850: AND
6851: IFFALSE 7070
// begin DialogueOn ;
6853: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6857: LD_EXP 17
6861: PPUSH
6862: CALL_OW 302
6866: IFFALSE 6882
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6868: LD_EXP 17
6872: PPUSH
6873: LD_STRING D3-Sci1-1
6875: PPUSH
6876: CALL_OW 88
6880: GO 6894
// Say ( tmp1 , D3-Sci1-1 ) ;
6882: LD_VAR 0 1
6886: PPUSH
6887: LD_STRING D3-Sci1-1
6889: PPUSH
6890: CALL_OW 88
// if IsOk ( Gary ) then
6894: LD_EXP 10
6898: PPUSH
6899: CALL_OW 302
6903: IFFALSE 6919
// Say ( Gary , D3-Gary-1 ) else
6905: LD_EXP 10
6909: PPUSH
6910: LD_STRING D3-Gary-1
6912: PPUSH
6913: CALL_OW 88
6917: GO 6931
// Say ( tmp2 , D3-Gary-1 ) ;
6919: LD_VAR 0 2
6923: PPUSH
6924: LD_STRING D3-Gary-1
6926: PPUSH
6927: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6931: LD_EXP 17
6935: PPUSH
6936: CALL_OW 302
6940: IFFALSE 6956
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6942: LD_EXP 17
6946: PPUSH
6947: LD_STRING D3-Sci1-2
6949: PPUSH
6950: CALL_OW 88
6954: GO 6968
// Say ( tmp1 , D3-Sci1-2 ) ;
6956: LD_VAR 0 1
6960: PPUSH
6961: LD_STRING D3-Sci1-2
6963: PPUSH
6964: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6968: LD_EXP 1
6972: PPUSH
6973: LD_STRING D3-JMM-2
6975: PPUSH
6976: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6980: LD_EXP 17
6984: PPUSH
6985: CALL_OW 302
6989: IFFALSE 7005
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6991: LD_EXP 17
6995: PPUSH
6996: LD_STRING D3-Sci1-3
6998: PPUSH
6999: CALL_OW 88
7003: GO 7017
// Say ( tmp1 , D3-Sci1-3 ) ;
7005: LD_VAR 0 1
7009: PPUSH
7010: LD_STRING D3-Sci1-3
7012: PPUSH
7013: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7017: LD_EXP 1
7021: PPUSH
7022: LD_STRING D3-JMM-3
7024: PPUSH
7025: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
7029: LD_EXP 17
7033: PPUSH
7034: CALL_OW 302
7038: IFFALSE 7054
// Say ( DeltaDoctor , D3-Sci1-4 ) else
7040: LD_EXP 17
7044: PPUSH
7045: LD_STRING D3-Sci1-4
7047: PPUSH
7048: CALL_OW 88
7052: GO 7066
// Say ( tmp1 , D3-Sci1-4 ) ;
7054: LD_VAR 0 1
7058: PPUSH
7059: LD_STRING D3-Sci1-4
7061: PPUSH
7062: CALL_OW 88
// DialogueOff ;
7066: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
7070: LD_INT 12
7072: PPUSH
7073: LD_INT 1
7075: PPUSH
7076: LD_INT 1
7078: PPUSH
7079: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
7083: LD_INT 32
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 1
7091: PPUSH
7092: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
7096: LD_INT 12
7098: PPUSH
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 1
7104: PPUSH
7105: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
7109: LD_INT 33
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: LD_INT 1
7117: PPUSH
7118: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
7122: LD_STRING M2
7124: PPUSH
7125: CALL_OW 337
// wait ( 3 3$0 ) ;
7129: LD_INT 6300
7131: PPUSH
7132: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7136: LD_INT 35
7138: PPUSH
7139: CALL_OW 67
// until not InBattle ( 1 ) ;
7143: LD_INT 1
7145: PPUSH
7146: CALL_OW 463
7150: NOT
7151: IFFALSE 7136
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
7153: LD_EXP 11
7157: PPUSH
7158: CALL_OW 302
7162: PUSH
7163: LD_EXP 17
7167: PPUSH
7168: CALL_OW 302
7172: AND
7173: IFFALSE 7342
// begin DialogueOn ;
7175: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7179: LD_EXP 11
7183: PPUSH
7184: LD_STRING D3a-Sim-1
7186: PPUSH
7187: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
7191: LD_EXP 17
7195: PPUSH
7196: LD_STRING D3a-Sci1-1
7198: PPUSH
7199: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7203: LD_EXP 11
7207: PPUSH
7208: LD_STRING D3a-Sim-2
7210: PPUSH
7211: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
7215: LD_EXP 17
7219: PPUSH
7220: LD_STRING D3a-Sci1-2
7222: PPUSH
7223: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7227: LD_EXP 11
7231: PPUSH
7232: LD_STRING D3a-Sim-3
7234: PPUSH
7235: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
7239: LD_EXP 17
7243: PPUSH
7244: LD_STRING D3a-Sci1-3
7246: PPUSH
7247: CALL_OW 88
// if IsOK ( Joan ) then
7251: LD_EXP 13
7255: PPUSH
7256: CALL_OW 302
7260: IFFALSE 7276
// Say ( Simms , D3a-Sim-4 ) else
7262: LD_EXP 11
7266: PPUSH
7267: LD_STRING D3a-Sim-4
7269: PPUSH
7270: CALL_OW 88
7274: GO 7288
// Say ( Simms , D3a-Sim-4a ) ;
7276: LD_EXP 11
7280: PPUSH
7281: LD_STRING D3a-Sim-4a
7283: PPUSH
7284: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7288: LD_EXP 17
7292: PPUSH
7293: LD_STRING D3a-Sci1-4
7295: PPUSH
7296: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7300: LD_EXP 11
7304: PPUSH
7305: LD_STRING D3a-Sim-5
7307: PPUSH
7308: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7312: LD_EXP 17
7316: PPUSH
7317: LD_STRING D3a-Sci1-5
7319: PPUSH
7320: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7324: LD_EXP 11
7328: PPUSH
7329: LD_STRING D3a-Sim-6
7331: PPUSH
7332: CALL_OW 88
// DialogueOff ;
7336: CALL_OW 7
// end else
7340: GO 7615
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
7342: LD_ADDR_VAR 0 3
7346: PUSH
7347: LD_INT 22
7349: PUSH
7350: LD_INT 1
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 26
7359: PUSH
7360: LD_INT 1
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 25
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: PPUSH
7382: CALL_OW 69
7386: PUSH
7387: LD_EXP 1
7391: PUSH
7392: LD_EXP 7
7396: PUSH
7397: LD_EXP 6
7401: PUSH
7402: LD_EXP 11
7406: PUSH
7407: LD_EXP 14
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: DIFF
7419: ST_TO_ADDR
// if tmp3 > 0 then
7420: LD_VAR 0 3
7424: PUSH
7425: LD_INT 0
7427: GREATER
7428: IFFALSE 7615
// begin DialogueOn ;
7430: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7434: LD_EXP 11
7438: PPUSH
7439: LD_STRING D3a-Sim-1
7441: PPUSH
7442: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7446: LD_VAR 0 3
7450: PUSH
7451: LD_INT 1
7453: ARRAY
7454: PPUSH
7455: LD_STRING D3a-Sci1-1
7457: PPUSH
7458: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7462: LD_EXP 11
7466: PPUSH
7467: LD_STRING D3a-Sim-2
7469: PPUSH
7470: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7474: LD_VAR 0 3
7478: PUSH
7479: LD_INT 1
7481: ARRAY
7482: PPUSH
7483: LD_STRING D3a-Sci1-2
7485: PPUSH
7486: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7490: LD_EXP 11
7494: PPUSH
7495: LD_STRING D3a-Sim-3
7497: PPUSH
7498: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7502: LD_VAR 0 3
7506: PUSH
7507: LD_INT 1
7509: ARRAY
7510: PPUSH
7511: LD_STRING D3a-Sci1-3
7513: PPUSH
7514: CALL_OW 88
// if IsOK ( Joan ) then
7518: LD_EXP 13
7522: PPUSH
7523: CALL_OW 302
7527: IFFALSE 7543
// Say ( Simms , D3a-Sim-4 ) else
7529: LD_EXP 11
7533: PPUSH
7534: LD_STRING D3a-Sim-4
7536: PPUSH
7537: CALL_OW 88
7541: GO 7555
// Say ( Simms , D3a-Sim-4a ) ;
7543: LD_EXP 11
7547: PPUSH
7548: LD_STRING D3a-Sim-4a
7550: PPUSH
7551: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7555: LD_VAR 0 3
7559: PUSH
7560: LD_INT 1
7562: ARRAY
7563: PPUSH
7564: LD_STRING D3a-Sci1-4
7566: PPUSH
7567: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7571: LD_EXP 11
7575: PPUSH
7576: LD_STRING D3a-Sim-5
7578: PPUSH
7579: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 1
7590: ARRAY
7591: PPUSH
7592: LD_STRING D3a-Sci1-5
7594: PPUSH
7595: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7599: LD_EXP 11
7603: PPUSH
7604: LD_STRING D3a-Sim-6
7606: PPUSH
7607: CALL_OW 88
// DialogueOff ;
7611: CALL_OW 7
// end ; end ; end ;
7615: PPOPN 3
7617: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7618: LD_EXP 30
7622: PUSH
7623: LD_INT 1
7625: EQUAL
7626: IFFALSE 7961
7628: GO 7630
7630: DISABLE
7631: LD_INT 0
7633: PPUSH
// begin wait ( 2 2$00 ) ;
7634: LD_INT 4200
7636: PPUSH
7637: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7641: LD_EXP 18
7645: PPUSH
7646: LD_STRING D4-FSol1-1
7648: PPUSH
7649: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7653: LD_STRING M3
7655: PPUSH
7656: CALL_OW 337
// PrepareRussians ;
7660: CALL 3750 0 0
// spawnRussians := true ;
7664: LD_ADDR_EXP 59
7668: PUSH
7669: LD_INT 1
7671: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: LD_INT 1
7679: PPUSH
7680: LD_INT 100
7682: PPUSH
7683: CALL_OW 12
7687: ST_TO_ADDR
// if difficulty = 1 then
7688: LD_OWVAR 67
7692: PUSH
7693: LD_INT 1
7695: EQUAL
7696: IFFALSE 7779
// begin if rnd > 0 and rnd < 51 then
7698: LD_VAR 0 1
7702: PUSH
7703: LD_INT 0
7705: GREATER
7706: PUSH
7707: LD_VAR 0 1
7711: PUSH
7712: LD_INT 51
7714: LESS
7715: AND
7716: IFFALSE 7725
// BuildRussianBase ( 2 ) ;
7718: LD_INT 2
7720: PPUSH
7721: CALL 12067 0 1
// if rnd > 50 and rnd < 81 then
7725: LD_VAR 0 1
7729: PUSH
7730: LD_INT 50
7732: GREATER
7733: PUSH
7734: LD_VAR 0 1
7738: PUSH
7739: LD_INT 81
7741: LESS
7742: AND
7743: IFFALSE 7752
// BuildRussianBase ( 1 ) ;
7745: LD_INT 1
7747: PPUSH
7748: CALL 12067 0 1
// if rnd > 80 and rnd < 101 then
7752: LD_VAR 0 1
7756: PUSH
7757: LD_INT 80
7759: GREATER
7760: PUSH
7761: LD_VAR 0 1
7765: PUSH
7766: LD_INT 101
7768: LESS
7769: AND
7770: IFFALSE 7779
// BuildRussianBase ( 3 ) ;
7772: LD_INT 3
7774: PPUSH
7775: CALL 12067 0 1
// end ; if difficulty = 2 then
7779: LD_OWVAR 67
7783: PUSH
7784: LD_INT 2
7786: EQUAL
7787: IFFALSE 7870
// begin if rnd > 0 and rnd < 61 then
7789: LD_VAR 0 1
7793: PUSH
7794: LD_INT 0
7796: GREATER
7797: PUSH
7798: LD_VAR 0 1
7802: PUSH
7803: LD_INT 61
7805: LESS
7806: AND
7807: IFFALSE 7816
// BuildRussianBase ( 2 ) ;
7809: LD_INT 2
7811: PPUSH
7812: CALL 12067 0 1
// if rnd > 60 and rnd < 81 then
7816: LD_VAR 0 1
7820: PUSH
7821: LD_INT 60
7823: GREATER
7824: PUSH
7825: LD_VAR 0 1
7829: PUSH
7830: LD_INT 81
7832: LESS
7833: AND
7834: IFFALSE 7843
// BuildRussianBase ( 1 ) ;
7836: LD_INT 1
7838: PPUSH
7839: CALL 12067 0 1
// if rnd > 80 and rnd < 101 then
7843: LD_VAR 0 1
7847: PUSH
7848: LD_INT 80
7850: GREATER
7851: PUSH
7852: LD_VAR 0 1
7856: PUSH
7857: LD_INT 101
7859: LESS
7860: AND
7861: IFFALSE 7870
// BuildRussianBase ( 3 ) ;
7863: LD_INT 3
7865: PPUSH
7866: CALL 12067 0 1
// end ; if difficulty >= 3 then
7870: LD_OWVAR 67
7874: PUSH
7875: LD_INT 3
7877: GREATEREQUAL
7878: IFFALSE 7961
// begin if rnd > 0 and rnd < 71 then
7880: LD_VAR 0 1
7884: PUSH
7885: LD_INT 0
7887: GREATER
7888: PUSH
7889: LD_VAR 0 1
7893: PUSH
7894: LD_INT 71
7896: LESS
7897: AND
7898: IFFALSE 7907
// BuildRussianBase ( 3 ) ;
7900: LD_INT 3
7902: PPUSH
7903: CALL 12067 0 1
// if rnd > 70 and rnd < 81 then
7907: LD_VAR 0 1
7911: PUSH
7912: LD_INT 70
7914: GREATER
7915: PUSH
7916: LD_VAR 0 1
7920: PUSH
7921: LD_INT 81
7923: LESS
7924: AND
7925: IFFALSE 7934
// BuildRussianBase ( 2 ) ;
7927: LD_INT 2
7929: PPUSH
7930: CALL 12067 0 1
// if rnd > 80 and rnd < 101 then
7934: LD_VAR 0 1
7938: PUSH
7939: LD_INT 80
7941: GREATER
7942: PUSH
7943: LD_VAR 0 1
7947: PUSH
7948: LD_INT 101
7950: LESS
7951: AND
7952: IFFALSE 7961
// BuildRussianBase ( 1 ) ;
7954: LD_INT 1
7956: PPUSH
7957: CALL 12067 0 1
// end ; end ;
7961: PPOPN 1
7963: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7964: LD_INT 54
7966: PPUSH
7967: LD_INT 1
7969: PPUSH
7970: CALL_OW 321
7974: PUSH
7975: LD_INT 2
7977: EQUAL
7978: PUSH
7979: LD_INT 21
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 321
7989: PUSH
7990: LD_INT 2
7992: EQUAL
7993: OR
7994: PUSH
7995: LD_INT 22
7997: PPUSH
7998: LD_INT 1
8000: PPUSH
8001: CALL_OW 321
8005: PUSH
8006: LD_INT 2
8008: EQUAL
8009: OR
8010: IFFALSE 8312
8012: GO 8014
8014: DISABLE
8015: LD_INT 0
8017: PPUSH
8018: PPUSH
// begin if IsOk ( DeltaDoctor ) then
8019: LD_EXP 17
8023: PPUSH
8024: CALL_OW 302
8028: IFFALSE 8042
// tmp := DeltaDoctor else
8030: LD_ADDR_VAR 0 2
8034: PUSH
8035: LD_EXP 17
8039: ST_TO_ADDR
8040: GO 8052
// tmp := Denis ;
8042: LD_ADDR_VAR 0 2
8046: PUSH
8047: LD_EXP 12
8051: ST_TO_ADDR
// if tmp then
8052: LD_VAR 0 2
8056: IFFALSE 8150
// begin DialogueOn ;
8058: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
8062: LD_EXP 1
8066: PPUSH
8067: LD_STRING D6-JMM-1
8069: PPUSH
8070: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
8074: LD_VAR 0 2
8078: PPUSH
8079: LD_STRING D6-Sci1-1
8081: PPUSH
8082: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
8086: LD_EXP 1
8090: PPUSH
8091: LD_STRING D6-JMM-2
8093: PPUSH
8094: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: LD_STRING D6-Sci1-2
8105: PPUSH
8106: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
8110: LD_EXP 1
8114: PPUSH
8115: LD_STRING D6-JMM-3
8117: PPUSH
8118: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
8122: LD_VAR 0 2
8126: PPUSH
8127: LD_STRING D6-Sci1-3
8129: PPUSH
8130: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
8134: LD_EXP 1
8138: PPUSH
8139: LD_STRING D6-JMM-4
8141: PPUSH
8142: CALL_OW 88
// DialogueOff ;
8146: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
8150: LD_INT 1050
8152: PPUSH
8153: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
8157: LD_EXP 50
8161: PUSH
8162: LD_INT 0
8164: EQUAL
8165: PUSH
8166: LD_EXP 14
8170: PPUSH
8171: CALL_OW 302
8175: AND
8176: IFFALSE 8234
// begin DialogueOn ;
8178: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
8182: LD_EXP 28
8186: PPUSH
8187: LD_STRING D5-Ar1-1
8189: PPUSH
8190: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
8194: LD_EXP 27
8198: PPUSH
8199: LD_STRING D5-Diet-1
8201: PPUSH
8202: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
8206: LD_EXP 28
8210: PPUSH
8211: LD_STRING D5-Ar1-2
8213: PPUSH
8214: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
8218: LD_EXP 27
8222: PPUSH
8223: LD_STRING D5-Diet-2
8225: PPUSH
8226: CALL_OW 88
// DialogueOff ;
8230: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
8234: LD_INT 35
8236: PPUSH
8237: CALL_OW 67
// until tick > 10 10$00 ;
8241: LD_OWVAR 1
8245: PUSH
8246: LD_INT 21000
8248: GREATER
8249: IFFALSE 8234
// wait ( 1 1$30 ) ;
8251: LD_INT 3150
8253: PPUSH
8254: CALL_OW 67
// if arabianTrait = 0 then
8258: LD_EXP 50
8262: PUSH
8263: LD_INT 0
8265: EQUAL
8266: IFFALSE 8312
// begin arabianTrait = 1 ;
8268: LD_ADDR_EXP 50
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
8276: LD_INT 2
8278: PPUSH
8279: LD_INT 3
8281: PPUSH
8282: LD_INT 1
8284: PPUSH
8285: LD_INT 1
8287: PPUSH
8288: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
8292: LD_INT 2
8294: PPUSH
8295: LD_INT 6
8297: PPUSH
8298: LD_INT 1
8300: PPUSH
8301: LD_INT 1
8303: PPUSH
8304: CALL_OW 80
// PrepareArabianTrait ;
8308: CALL 8315 0 0
// end ; end ;
8312: PPOPN 2
8314: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8315: LD_INT 0
8317: PPUSH
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
8322: PPUSH
8323: PPUSH
8324: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8325: LD_ADDR_VAR 0 6
8329: PUSH
8330: LD_INT 22
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 2
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 4
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 2
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 25
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PPUSH
8383: CALL_OW 69
8387: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8388: LD_ADDR_VAR 0 5
8392: PUSH
8393: LD_INT 22
8395: PUSH
8396: LD_INT 2
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PUSH
8403: LD_INT 21
8405: PUSH
8406: LD_INT 1
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: LD_INT 25
8418: PUSH
8419: LD_INT 1
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 25
8428: PUSH
8429: LD_INT 8
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 25
8438: PUSH
8439: LD_INT 15
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: PUSH
8462: LD_EXP 27
8466: PUSH
8467: EMPTY
8468: LIST
8469: DIFF
8470: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8471: LD_ADDR_VAR 0 7
8475: PUSH
8476: LD_INT 22
8478: PUSH
8479: LD_INT 2
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: LD_INT 30
8488: PUSH
8489: LD_INT 5
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PPUSH
8500: CALL_OW 69
8504: PUSH
8505: LD_INT 1
8507: ARRAY
8508: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8509: LD_VAR 0 6
8513: PPUSH
8514: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8518: LD_VAR 0 5
8522: PPUSH
8523: CALL_OW 122
// wait ( 0 0$3 ) ;
8527: LD_INT 105
8529: PPUSH
8530: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8534: LD_VAR 0 6
8538: PPUSH
8539: LD_VAR 0 7
8543: PPUSH
8544: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8548: LD_VAR 0 6
8552: PPUSH
8553: LD_INT 1
8555: PUSH
8556: LD_INT 8
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: LD_INT 1
8565: PPUSH
8566: LD_INT 2
8568: PPUSH
8569: CALL_OW 12
8573: ARRAY
8574: PPUSH
8575: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8579: LD_VAR 0 6
8583: PPUSH
8584: CALL_OW 182
// wait ( 0 0$1 ) ;
8588: LD_INT 35
8590: PPUSH
8591: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8595: LD_INT 76
8597: PPUSH
8598: LD_INT 19
8600: PPUSH
8601: CALL_OW 84
// DialogueOn ;
8605: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8609: LD_INT 22
8611: PUSH
8612: LD_INT 1
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 26
8621: PUSH
8622: LD_INT 1
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 2
8631: PUSH
8632: LD_INT 25
8634: PUSH
8635: LD_INT 1
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 25
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 25
8654: PUSH
8655: LD_INT 3
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 25
8664: PUSH
8665: LD_INT 4
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 25
8674: PUSH
8675: LD_INT 5
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL_OW 69
8699: PPUSH
8700: LD_STRING D8-Sol1-1
8702: PPUSH
8703: LD_STRING D8-Sol1-1
8705: PPUSH
8706: CALL 11409 0 3
// if IsOK ( DeltaDoctor ) then
8710: LD_EXP 17
8714: PPUSH
8715: CALL_OW 302
8719: IFFALSE 8735
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8721: LD_EXP 17
8725: PPUSH
8726: LD_STRING D8-Sci1-1
8728: PPUSH
8729: CALL_OW 88
8733: GO 8836
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8735: LD_INT 22
8737: PUSH
8738: LD_INT 1
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 26
8747: PUSH
8748: LD_INT 1
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 2
8757: PUSH
8758: LD_INT 25
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 25
8770: PUSH
8771: LD_INT 2
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 25
8780: PUSH
8781: LD_INT 3
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 25
8790: PUSH
8791: LD_INT 4
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 25
8800: PUSH
8801: LD_INT 5
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 69
8825: PPUSH
8826: LD_STRING D8-Sol1-1
8828: PPUSH
8829: LD_STRING D8-Sol1-1
8831: PPUSH
8832: CALL 11409 0 3
// Say ( JMM , D8-JMM-1 ) ;
8836: LD_EXP 1
8840: PPUSH
8841: LD_STRING D8-JMM-1
8843: PPUSH
8844: CALL_OW 88
// DialogueOff ;
8848: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8852: LD_INT 2
8854: PPUSH
8855: LD_INT 2
8857: PPUSH
8858: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8862: LD_INT 1
8864: PPUSH
8865: LD_INT 2
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: LD_INT 1
8873: PPUSH
8874: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8878: LD_INT 3
8880: PPUSH
8881: LD_INT 2
8883: PPUSH
8884: LD_INT 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8894: LD_STRING M4
8896: PPUSH
8897: CALL_OW 337
// wait ( 0 0$1 ) ;
8901: LD_INT 35
8903: PPUSH
8904: CALL_OW 67
// if IsLive ( Khatam ) then
8908: LD_EXP 14
8912: PPUSH
8913: CALL_OW 300
8917: IFFALSE 8931
// DoNotAttack ( 2 , Khatam ) ;
8919: LD_INT 2
8921: PPUSH
8922: LD_EXP 14
8926: PPUSH
8927: CALL_OW 471
// wait ( 0 0$1 ) ;
8931: LD_INT 35
8933: PPUSH
8934: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8938: LD_ADDR_VAR 0 8
8942: PUSH
8943: LD_INT 22
8945: PUSH
8946: LD_INT 1
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 21
8955: PUSH
8956: LD_INT 3
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 69
8971: PPUSH
8972: LD_VAR 0 5
8976: PUSH
8977: LD_INT 1
8979: ARRAY
8980: PPUSH
8981: CALL_OW 74
8985: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8986: LD_VAR 0 5
8990: PPUSH
8991: LD_INT 25
8993: PUSH
8994: LD_INT 1
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PPUSH
9001: CALL_OW 72
9005: PUSH
9006: LD_INT 1
9008: ARRAY
9009: PPUSH
9010: LD_VAR 0 8
9014: PPUSH
9015: CALL_OW 250
9019: PPUSH
9020: LD_VAR 0 8
9024: PPUSH
9025: CALL_OW 251
9029: PPUSH
9030: LD_VAR 0 8
9034: PPUSH
9035: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
9039: LD_VAR 0 5
9043: PPUSH
9044: LD_INT 84
9046: PPUSH
9047: LD_INT 22
9049: PPUSH
9050: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
9054: LD_VAR 0 5
9058: PPUSH
9059: LD_INT 82
9061: PPUSH
9062: LD_INT 5
9064: PPUSH
9065: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
9069: LD_VAR 0 5
9073: PPUSH
9074: LD_INT 95
9076: PPUSH
9077: LD_INT 12
9079: PPUSH
9080: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
9084: LD_VAR 0 5
9088: PPUSH
9089: LD_INT 102
9091: PPUSH
9092: LD_INT 11
9094: PPUSH
9095: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
9099: LD_VAR 0 5
9103: PPUSH
9104: LD_INT 116
9106: PPUSH
9107: LD_INT 15
9109: PPUSH
9110: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
9114: LD_VAR 0 5
9118: PPUSH
9119: LD_INT 140
9121: PPUSH
9122: LD_INT 25
9124: PPUSH
9125: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
9129: LD_VAR 0 5
9133: PPUSH
9134: LD_INT 160
9136: PPUSH
9137: LD_INT 56
9139: PPUSH
9140: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
9144: LD_ADDR_VAR 0 5
9148: PUSH
9149: LD_INT 22
9151: PUSH
9152: LD_INT 2
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 21
9161: PUSH
9162: LD_INT 1
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 2
9171: PUSH
9172: LD_INT 25
9174: PUSH
9175: LD_INT 1
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 25
9184: PUSH
9185: LD_INT 8
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PUSH
9192: LD_INT 25
9194: PUSH
9195: LD_INT 15
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: PPUSH
9213: CALL_OW 69
9217: PUSH
9218: LD_EXP 27
9222: PUSH
9223: EMPTY
9224: LIST
9225: DIFF
9226: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
9227: LD_ADDR_VAR 0 6
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 21
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 2
9254: PUSH
9255: LD_INT 25
9257: PUSH
9258: LD_INT 2
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 25
9267: PUSH
9268: LD_INT 3
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 25
9277: PUSH
9278: LD_INT 4
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: LD_INT 25
9287: PUSH
9288: LD_INT 12
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 25
9297: PUSH
9298: LD_INT 16
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: PPUSH
9318: CALL_OW 69
9322: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9323: LD_ADDR_VAR 0 6
9327: PUSH
9328: LD_VAR 0 6
9332: PUSH
9333: LD_EXP 27
9337: ADD
9338: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9339: LD_VAR 0 5
9343: PPUSH
9344: LD_INT 189
9346: PPUSH
9347: LD_INT 79
9349: PPUSH
9350: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9354: LD_VAR 0 5
9358: PPUSH
9359: LD_INT 25
9361: PUSH
9362: LD_INT 15
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PPUSH
9369: CALL_OW 72
9373: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9375: LD_VAR 0 5
9379: PPUSH
9380: LD_INT 25
9382: PUSH
9383: LD_INT 15
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 72
9394: PUSH
9395: LD_INT 1
9397: ARRAY
9398: PPUSH
9399: LD_INT 84
9401: PPUSH
9402: LD_INT 21
9404: PPUSH
9405: CALL_OW 428
9409: PPUSH
9410: CALL_OW 120
// wait ( 0 0$4 ) ;
9414: LD_INT 140
9416: PPUSH
9417: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9421: LD_VAR 0 6
9425: PPUSH
9426: LD_INT 88
9428: PPUSH
9429: LD_INT 8
9431: PPUSH
9432: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9436: LD_VAR 0 6
9440: PPUSH
9441: LD_INT 102
9443: PPUSH
9444: LD_INT 10
9446: PPUSH
9447: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9451: LD_VAR 0 6
9455: PPUSH
9456: LD_INT 116
9458: PPUSH
9459: LD_INT 15
9461: PPUSH
9462: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9466: LD_VAR 0 6
9470: PPUSH
9471: LD_INT 140
9473: PPUSH
9474: LD_INT 25
9476: PPUSH
9477: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9481: LD_VAR 0 6
9485: PPUSH
9486: LD_INT 160
9488: PPUSH
9489: LD_INT 56
9491: PPUSH
9492: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 189
9503: PPUSH
9504: LD_INT 79
9506: PPUSH
9507: CALL_OW 171
// arabianAttackersAI = 1 ;
9511: LD_ADDR_EXP 47
9515: PUSH
9516: LD_INT 1
9518: ST_TO_ADDR
// if IsOk ( Gary ) then
9519: LD_EXP 10
9523: PPUSH
9524: CALL_OW 302
9528: IFFALSE 9542
// Say ( Gary , D8a-Gary-1 ) ;
9530: LD_EXP 10
9534: PPUSH
9535: LD_STRING D8a-Gary-1
9537: PPUSH
9538: CALL_OW 88
// wait ( 0 0$5 ) ;
9542: LD_INT 175
9544: PPUSH
9545: CALL_OW 67
// if IsOK ( Khatam ) then
9549: LD_EXP 14
9553: PPUSH
9554: CALL_OW 302
9558: IFFALSE 10094
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9560: LD_ADDR_VAR 0 3
9564: PUSH
9565: LD_INT 22
9567: PUSH
9568: LD_INT 1
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: LD_INT 25
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 25
9590: PUSH
9591: LD_INT 2
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 25
9600: PUSH
9601: LD_INT 3
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 25
9610: PUSH
9611: LD_INT 4
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 25
9620: PUSH
9621: LD_INT 5
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 25
9630: PUSH
9631: LD_INT 8
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 69
9655: PUSH
9656: LD_EXP 1
9660: PUSH
9661: LD_EXP 2
9665: PUSH
9666: LD_EXP 3
9670: PUSH
9671: LD_EXP 4
9675: PUSH
9676: LD_EXP 5
9680: PUSH
9681: LD_EXP 6
9685: PUSH
9686: LD_EXP 7
9690: PUSH
9691: LD_EXP 8
9695: PUSH
9696: LD_EXP 9
9700: PUSH
9701: LD_EXP 10
9705: PUSH
9706: LD_EXP 11
9710: PUSH
9711: LD_EXP 12
9715: PUSH
9716: LD_EXP 13
9720: PUSH
9721: LD_EXP 14
9725: PUSH
9726: LD_EXP 15
9730: PUSH
9731: LD_EXP 16
9735: PUSH
9736: LD_EXP 17
9740: PUSH
9741: LD_EXP 19
9745: PUSH
9746: LD_EXP 25
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: DIFF
9772: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9773: LD_EXP 14
9777: PPUSH
9778: LD_INT 8
9780: PPUSH
9781: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9785: LD_EXP 14
9789: PPUSH
9790: CALL_OW 122
// wait ( 0 0$1 ) ;
9794: LD_INT 35
9796: PPUSH
9797: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9801: LD_EXP 14
9805: PPUSH
9806: CALL_OW 121
// wait ( 0 0$1 ) ;
9810: LD_INT 35
9812: PPUSH
9813: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9817: LD_EXP 14
9821: PPUSH
9822: LD_INT 7
9824: PPUSH
9825: CALL_OW 113
// if not tmp then
9829: LD_VAR 0 3
9833: NOT
9834: IFFALSE 9838
// exit ;
9836: GO 10094
// DialogueOn ;
9838: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9842: LD_VAR 0 3
9846: PUSH
9847: LD_INT 1
9849: ARRAY
9850: PPUSH
9851: CALL_OW 258
9855: PUSH
9856: LD_INT 1
9858: EQUAL
9859: IFFALSE 9879
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9861: LD_VAR 0 3
9865: PUSH
9866: LD_INT 1
9868: ARRAY
9869: PPUSH
9870: LD_STRING D8b-Sol1-1
9872: PPUSH
9873: CALL_OW 88
9877: GO 9895
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9879: LD_VAR 0 3
9883: PUSH
9884: LD_INT 1
9886: ARRAY
9887: PPUSH
9888: LD_STRING D8b-FSol1-1
9890: PPUSH
9891: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9895: LD_EXP 14
9899: PPUSH
9900: LD_STRING D8b-Khat-1
9902: PPUSH
9903: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9907: LD_VAR 0 3
9911: PUSH
9912: LD_INT 1
9914: ARRAY
9915: PPUSH
9916: CALL_OW 258
9920: PUSH
9921: LD_INT 1
9923: EQUAL
9924: IFFALSE 9944
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9926: LD_VAR 0 3
9930: PUSH
9931: LD_INT 1
9933: ARRAY
9934: PPUSH
9935: LD_STRING D8b-Sol1-2
9937: PPUSH
9938: CALL_OW 88
9942: GO 9960
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9944: LD_VAR 0 3
9948: PUSH
9949: LD_INT 1
9951: ARRAY
9952: PPUSH
9953: LD_STRING D8b-FSol1-2
9955: PPUSH
9956: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9960: LD_EXP 14
9964: PPUSH
9965: LD_STRING D8b-Khat-2
9967: PPUSH
9968: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9972: LD_VAR 0 3
9976: PUSH
9977: LD_INT 1
9979: ARRAY
9980: PPUSH
9981: CALL_OW 258
9985: PUSH
9986: LD_INT 1
9988: EQUAL
9989: IFFALSE 10009
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9991: LD_VAR 0 3
9995: PUSH
9996: LD_INT 1
9998: ARRAY
9999: PPUSH
10000: LD_STRING D8b-Sol1-3
10002: PPUSH
10003: CALL_OW 88
10007: GO 10025
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
10009: LD_VAR 0 3
10013: PUSH
10014: LD_INT 1
10016: ARRAY
10017: PPUSH
10018: LD_STRING D8b-FSol1-3
10020: PPUSH
10021: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
10025: LD_EXP 14
10029: PPUSH
10030: LD_STRING D8b-Khat-3
10032: PPUSH
10033: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
10037: LD_VAR 0 3
10041: PUSH
10042: LD_INT 1
10044: ARRAY
10045: PPUSH
10046: CALL_OW 258
10050: PUSH
10051: LD_INT 1
10053: EQUAL
10054: IFFALSE 10074
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
10056: LD_VAR 0 3
10060: PUSH
10061: LD_INT 1
10063: ARRAY
10064: PPUSH
10065: LD_STRING D8b-Sol1-4
10067: PPUSH
10068: CALL_OW 88
10072: GO 10090
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: PPUSH
10083: LD_STRING D8b-FSol1-4
10085: PPUSH
10086: CALL_OW 88
// DialogueOff ;
10090: CALL_OW 7
// end ; end ;
10094: LD_VAR 0 1
10098: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
10099: LD_INT 7
10101: PPUSH
10102: LD_INT 22
10104: PUSH
10105: LD_INT 2
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PPUSH
10112: CALL_OW 70
10116: PUSH
10117: LD_INT 0
10119: GREATER
10120: PUSH
10121: LD_EXP 14
10125: PPUSH
10126: LD_INT 7
10128: PPUSH
10129: CALL_OW 308
10133: OR
10134: IFFALSE 10341
10136: GO 10138
10138: DISABLE
10139: LD_INT 0
10141: PPUSH
// begin enable ;
10142: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
10143: LD_ADDR_VAR 0 1
10147: PUSH
10148: LD_INT 7
10150: PPUSH
10151: LD_INT 22
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PPUSH
10161: CALL_OW 70
10165: PUSH
10166: FOR_IN
10167: IFFALSE 10308
// begin if GetClass ( i ) = 4 then
10169: LD_VAR 0 1
10173: PPUSH
10174: CALL_OW 257
10178: PUSH
10179: LD_INT 4
10181: EQUAL
10182: IFFALSE 10194
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
10184: LD_INT 1
10186: PPUSH
10187: LD_STRING 10_ScientistsEscape_1
10189: PPUSH
10190: CALL_OW 39
// if i = Dietrich then
10194: LD_VAR 0 1
10198: PUSH
10199: LD_EXP 27
10203: EQUAL
10204: IFFALSE 10214
// GensherStatus = 1 ;
10206: LD_ADDR_EXP 53
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
10214: LD_VAR 0 1
10218: PPUSH
10219: CALL_OW 257
10223: PUSH
10224: LD_INT 1
10226: EQUAL
10227: PUSH
10228: LD_VAR 0 1
10232: PPUSH
10233: CALL_OW 257
10237: PUSH
10238: LD_INT 2
10240: EQUAL
10241: OR
10242: PUSH
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 257
10252: PUSH
10253: LD_INT 3
10255: EQUAL
10256: OR
10257: PUSH
10258: LD_VAR 0 1
10262: PPUSH
10263: CALL_OW 257
10267: PUSH
10268: LD_INT 4
10270: EQUAL
10271: OR
10272: PUSH
10273: LD_VAR 0 1
10277: PPUSH
10278: CALL_OW 257
10282: PUSH
10283: LD_INT 8
10285: EQUAL
10286: OR
10287: IFFALSE 10297
// arabianEscape = 1 ;
10289: LD_ADDR_EXP 48
10293: PUSH
10294: LD_INT 1
10296: ST_TO_ADDR
// RemoveUnit ( i ) ;
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 64
// end ;
10306: GO 10166
10308: POP
10309: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10310: LD_EXP 14
10314: PPUSH
10315: LD_INT 7
10317: PPUSH
10318: CALL_OW 308
10322: IFFALSE 10341
// begin KhatamStatus = 1 ;
10324: LD_ADDR_EXP 54
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10332: LD_EXP 14
10336: PPUSH
10337: CALL_OW 64
// end ; end ;
10341: PPOPN 1
10343: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10344: LD_INT 22
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 21
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: CALL_OW 69
10372: PUSH
10373: LD_INT 0
10375: EQUAL
10376: PUSH
10377: LD_INT 22
10379: PUSH
10380: LD_INT 4
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 21
10389: PUSH
10390: LD_INT 1
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PPUSH
10401: CALL_OW 69
10405: PUSH
10406: LD_INT 0
10408: EQUAL
10409: AND
10410: IFFALSE 10423
10412: GO 10414
10414: DISABLE
// arabianDefeated = 1 ;
10415: LD_ADDR_EXP 49
10419: PUSH
10420: LD_INT 1
10422: ST_TO_ADDR
10423: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10424: LD_INT 54
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 321
10434: PUSH
10435: LD_INT 2
10437: EQUAL
10438: PUSH
10439: LD_INT 55
10441: PPUSH
10442: LD_INT 1
10444: PPUSH
10445: CALL_OW 321
10449: PUSH
10450: LD_INT 2
10452: EQUAL
10453: AND
10454: PUSH
10455: LD_INT 21
10457: PPUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 321
10465: PUSH
10466: LD_INT 2
10468: EQUAL
10469: AND
10470: PUSH
10471: LD_INT 22
10473: PPUSH
10474: LD_INT 1
10476: PPUSH
10477: CALL_OW 321
10481: PUSH
10482: LD_INT 2
10484: EQUAL
10485: AND
10486: PUSH
10487: LD_INT 12
10489: PPUSH
10490: LD_INT 1
10492: PPUSH
10493: CALL_OW 321
10497: PUSH
10498: LD_INT 2
10500: EQUAL
10501: AND
10502: PUSH
10503: LD_INT 32
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: CALL_OW 321
10513: PUSH
10514: LD_INT 2
10516: EQUAL
10517: AND
10518: PUSH
10519: LD_EXP 64
10523: PUSH
10524: LD_INT 0
10526: EQUAL
10527: AND
10528: PUSH
10529: LD_EXP 50
10533: PUSH
10534: LD_INT 0
10536: EQUAL
10537: AND
10538: PUSH
10539: LD_OWVAR 1
10543: PUSH
10544: LD_INT 31500
10546: GREATEREQUAL
10547: AND
10548: IFFALSE 10565
10550: GO 10552
10552: DISABLE
// begin arabianTrait = 1 ;
10553: LD_ADDR_EXP 50
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// PrepareArabianTrait ;
10561: CALL 8315 0 0
// end ;
10565: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10566: LD_EXP 30
10570: PUSH
10571: LD_STRING 02_mikhailStatus_1
10573: PPUSH
10574: LD_INT 0
10576: PPUSH
10577: CALL_OW 30
10581: PUSH
10582: LD_INT 1
10584: EQUAL
10585: AND
10586: PUSH
10587: LD_INT 22
10589: PUSH
10590: LD_INT 5
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: PUSH
10602: LD_INT 0
10604: EQUAL
10605: AND
10606: PUSH
10607: LD_INT 22
10609: PUSH
10610: LD_INT 2
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 1
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: PUSH
10636: LD_INT 0
10638: EQUAL
10639: PUSH
10640: LD_EXP 50
10644: PUSH
10645: LD_INT 0
10647: EQUAL
10648: OR
10649: AND
10650: IFFALSE 10659
10652: GO 10654
10654: DISABLE
// PrepareCornell ;
10655: CALL 3497 0 0
10659: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10660: LD_INT 22
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: PPUSH
10675: LD_EXP 19
10679: PPUSH
10680: CALL_OW 74
10684: PPUSH
10685: LD_EXP 19
10689: PPUSH
10690: CALL_OW 296
10694: PUSH
10695: LD_INT 9
10697: LESS
10698: IFFALSE 10919
10700: GO 10702
10702: DISABLE
// begin InGameOn ;
10703: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10707: LD_EXP 19
10711: PPUSH
10712: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10716: LD_EXP 19
10720: PPUSH
10721: LD_STRING D7-Corn-1
10723: PPUSH
10724: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10728: LD_INT 22
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 2
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 25
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 4
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 5
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PPUSH
10803: CALL_OW 69
10807: PPUSH
10808: LD_STRING D7-Sol1-1
10810: PPUSH
10811: LD_STRING D7-FSol1-1
10813: PPUSH
10814: CALL 11409 0 3
// CenterNowOnUnits ( Cornell ) ;
10818: LD_EXP 19
10822: PPUSH
10823: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10827: LD_EXP 19
10831: PPUSH
10832: LD_STRING D7-Corn-2
10834: PPUSH
10835: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10839: LD_EXP 1
10843: PPUSH
10844: LD_STRING D7-JMM-2
10846: PPUSH
10847: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10851: LD_EXP 19
10855: PPUSH
10856: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10860: LD_EXP 19
10864: PPUSH
10865: LD_STRING D7-Corn-3
10867: PPUSH
10868: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10872: LD_EXP 19
10876: PPUSH
10877: LD_INT 250
10879: PPUSH
10880: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10884: LD_EXP 19
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: CALL_OW 235
// wait ( 0 0$1 ) ;
10896: LD_INT 35
10898: PPUSH
10899: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10903: LD_EXP 1
10907: PPUSH
10908: LD_STRING D7-JMM-3
10910: PPUSH
10911: CALL_OW 88
// InGameOff ;
10915: CALL_OW 9
// end ;
10919: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10920: LD_EXP 19
10924: PPUSH
10925: CALL_OW 255
10929: PUSH
10930: LD_INT 1
10932: EQUAL
10933: PUSH
10934: LD_EXP 19
10938: PPUSH
10939: CALL_OW 256
10943: PUSH
10944: LD_INT 350
10946: GREATER
10947: AND
10948: IFFALSE 11141
10950: GO 10952
10952: DISABLE
// begin DialogueOn ;
10953: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10957: LD_EXP 1
10961: PPUSH
10962: LD_STRING D7a-JMM-1
10964: PPUSH
10965: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10969: LD_EXP 19
10973: PPUSH
10974: LD_STRING D7a-Corn-1
10976: PPUSH
10977: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10981: LD_EXP 1
10985: PPUSH
10986: LD_STRING D7a-JMM-2
10988: PPUSH
10989: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10993: LD_EXP 19
10997: PPUSH
10998: LD_STRING D7a-Corn-2
11000: PPUSH
11001: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
11005: LD_EXP 1
11009: PPUSH
11010: LD_STRING D7a-JMM-3
11012: PPUSH
11013: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
11017: LD_EXP 19
11021: PPUSH
11022: LD_STRING D7a-Corn-3
11024: PPUSH
11025: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
11029: LD_EXP 1
11033: PPUSH
11034: LD_STRING D7a-JMM-4
11036: PPUSH
11037: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
11041: LD_EXP 19
11045: PPUSH
11046: LD_STRING D7a-Corn-4
11048: PPUSH
11049: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
11053: LD_EXP 1
11057: PPUSH
11058: LD_STRING D7a-JMM-5
11060: PPUSH
11061: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
11065: LD_EXP 19
11069: PPUSH
11070: LD_STRING D7a-Corn-5
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
11077: LD_EXP 1
11081: PPUSH
11082: LD_STRING D7a-JMM-6
11084: PPUSH
11085: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
11089: LD_EXP 19
11093: PPUSH
11094: LD_STRING D7a-Corn-6
11096: PPUSH
11097: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
11101: LD_EXP 1
11105: PPUSH
11106: LD_STRING D7a-JMM-7
11108: PPUSH
11109: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
11113: LD_EXP 19
11117: PPUSH
11118: LD_STRING D7a-Corn-7
11120: PPUSH
11121: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
11125: LD_EXP 1
11129: PPUSH
11130: LD_STRING D7a-JMM-8
11132: PPUSH
11133: CALL_OW 88
// DialogueOff ;
11137: CALL_OW 7
// end ;
11141: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
11142: LD_EXP 62
11146: PUSH
11147: LD_EXP 1
11151: PPUSH
11152: CALL_OW 302
11156: PUSH
11157: LD_EXP 5
11161: PPUSH
11162: CALL_OW 302
11166: OR
11167: AND
11168: IFFALSE 11258
11170: GO 11172
11172: DISABLE
// begin Wait ( 0 0$2 ) ;
11173: LD_INT 70
11175: PPUSH
11176: CALL_OW 67
// DialogueOn ;
11180: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
11184: LD_EXP 62
11188: PUSH
11189: LD_INT 1
11191: ARRAY
11192: PPUSH
11193: LD_EXP 62
11197: PUSH
11198: LD_INT 2
11200: ARRAY
11201: PPUSH
11202: CALL_OW 86
// if IsOk ( Cyrus ) then
11206: LD_EXP 5
11210: PPUSH
11211: CALL_OW 302
11215: IFFALSE 11231
// Say ( Cyrus , D10-Cyrus-1 ) else
11217: LD_EXP 5
11221: PPUSH
11222: LD_STRING D10-Cyrus-1
11224: PPUSH
11225: CALL_OW 88
11229: GO 11254
// if IsOk ( JMM ) then
11231: LD_EXP 1
11235: PPUSH
11236: CALL_OW 302
11240: IFFALSE 11254
// Say ( JMM , D10-JMM-1 ) ;
11242: LD_EXP 1
11246: PPUSH
11247: LD_STRING D10-JMM-1
11249: PPUSH
11250: CALL_OW 88
// DialogueOff ;
11254: CALL_OW 7
// end ;
11258: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
11259: LD_INT 12
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: CALL_OW 321
11269: PUSH
11270: LD_INT 2
11272: EQUAL
11273: IFFALSE 11285
11275: GO 11277
11277: DISABLE
// ChangeMissionObjectives ( M2b ) ;
11278: LD_STRING M2b
11280: PPUSH
11281: CALL_OW 337
11285: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
11286: LD_INT 32
11288: PPUSH
11289: LD_INT 1
11291: PPUSH
11292: CALL_OW 321
11296: PUSH
11297: LD_INT 2
11299: EQUAL
11300: IFFALSE 11312
11302: GO 11304
11304: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11305: LD_STRING M2c
11307: PPUSH
11308: CALL_OW 337
11312: END
// every 0 0$1 trigger arabianDefeated = 1 do
11313: LD_EXP 49
11317: PUSH
11318: LD_INT 1
11320: EQUAL
11321: IFFALSE 11333
11323: GO 11325
11325: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11326: LD_STRING M4a
11328: PPUSH
11329: CALL_OW 337
11333: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11334: LD_INT 54
11336: PPUSH
11337: LD_INT 1
11339: PPUSH
11340: CALL_OW 321
11344: PUSH
11345: LD_INT 2
11347: EQUAL
11348: PUSH
11349: LD_INT 55
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: CALL_OW 321
11359: PUSH
11360: LD_INT 2
11362: EQUAL
11363: AND
11364: PUSH
11365: LD_INT 21
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: CALL_OW 321
11375: PUSH
11376: LD_INT 2
11378: EQUAL
11379: AND
11380: PUSH
11381: LD_INT 22
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL_OW 321
11391: PUSH
11392: LD_INT 2
11394: EQUAL
11395: AND
11396: IFFALSE 11408
11398: GO 11400
11400: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11401: LD_STRING M2a
11403: PPUSH
11404: CALL_OW 337
11408: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11409: LD_INT 0
11411: PPUSH
11412: PPUSH
11413: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11414: LD_ADDR_VAR 0 1
11418: PUSH
11419: LD_VAR 0 1
11423: PUSH
11424: LD_EXP 1
11428: PUSH
11429: LD_EXP 2
11433: PUSH
11434: LD_EXP 3
11438: PUSH
11439: LD_EXP 4
11443: PUSH
11444: LD_EXP 5
11448: PUSH
11449: LD_EXP 6
11453: PUSH
11454: LD_EXP 7
11458: PUSH
11459: LD_EXP 8
11463: PUSH
11464: LD_EXP 9
11468: PUSH
11469: LD_EXP 10
11473: PUSH
11474: LD_EXP 11
11478: PUSH
11479: LD_EXP 12
11483: PUSH
11484: LD_EXP 13
11488: PUSH
11489: LD_EXP 14
11493: PUSH
11494: LD_EXP 15
11498: PUSH
11499: LD_EXP 16
11503: PUSH
11504: LD_EXP 17
11508: PUSH
11509: LD_EXP 18
11513: PUSH
11514: LD_EXP 19
11518: PUSH
11519: LD_EXP 25
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: DIFF
11546: ST_TO_ADDR
// if not characters then
11547: LD_VAR 0 1
11551: NOT
11552: IFFALSE 11556
// exit ;
11554: GO 11702
// rnd = rand ( 1 , characters ) ;
11556: LD_ADDR_VAR 0 6
11560: PUSH
11561: LD_INT 1
11563: PPUSH
11564: LD_VAR 0 1
11568: PPUSH
11569: CALL_OW 12
11573: ST_TO_ADDR
// for i = 1 to characters do
11574: LD_ADDR_VAR 0 5
11578: PUSH
11579: DOUBLE
11580: LD_INT 1
11582: DEC
11583: ST_TO_ADDR
11584: LD_VAR 0 1
11588: PUSH
11589: FOR_TO
11590: IFFALSE 11700
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11592: LD_VAR 0 5
11596: PUSH
11597: LD_VAR 0 6
11601: EQUAL
11602: PUSH
11603: LD_VAR 0 1
11607: PUSH
11608: LD_VAR 0 5
11612: ARRAY
11613: PPUSH
11614: CALL_OW 258
11618: PUSH
11619: LD_INT 1
11621: EQUAL
11622: AND
11623: IFFALSE 11645
// Say ( characters [ i ] , dialogMID ) ;
11625: LD_VAR 0 1
11629: PUSH
11630: LD_VAR 0 5
11634: ARRAY
11635: PPUSH
11636: LD_VAR 0 2
11640: PPUSH
11641: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11645: LD_VAR 0 5
11649: PUSH
11650: LD_VAR 0 6
11654: EQUAL
11655: PUSH
11656: LD_VAR 0 1
11660: PUSH
11661: LD_VAR 0 5
11665: ARRAY
11666: PPUSH
11667: CALL_OW 258
11671: PUSH
11672: LD_INT 2
11674: EQUAL
11675: AND
11676: IFFALSE 11698
// Say ( characters [ i ] , dialogFID ) ;
11678: LD_VAR 0 1
11682: PUSH
11683: LD_VAR 0 5
11687: ARRAY
11688: PPUSH
11689: LD_VAR 0 3
11693: PPUSH
11694: CALL_OW 88
// end ;
11698: GO 11589
11700: POP
11701: POP
// end ;
11702: LD_VAR 0 4
11706: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11707: LD_INT 0
11709: PPUSH
11710: PPUSH
// for i in charactersList do
11711: LD_ADDR_VAR 0 4
11715: PUSH
11716: LD_VAR 0 1
11720: PUSH
11721: FOR_IN
11722: IFFALSE 11740
// SaveCharacters ( i , ident ) ;
11724: LD_VAR 0 4
11728: PPUSH
11729: LD_VAR 0 2
11733: PPUSH
11734: CALL_OW 38
11738: GO 11721
11740: POP
11741: POP
// end ;
11742: LD_VAR 0 3
11746: RET
// export function PrepareDifficulty ; begin
11747: LD_INT 0
11749: PPUSH
// if difficulty = 1 then
11750: LD_OWVAR 67
11754: PUSH
11755: LD_INT 1
11757: EQUAL
11758: IFFALSE 11802
// begin RuSolMinLevel = 3 ;
11760: LD_ADDR_EXP 37
11764: PUSH
11765: LD_INT 3
11767: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11768: LD_ADDR_EXP 38
11772: PUSH
11773: LD_INT 5
11775: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11776: LD_INT 51
11778: PPUSH
11779: LD_INT 6
11781: PPUSH
11782: LD_INT 2
11784: PPUSH
11785: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11789: LD_INT 51
11791: PPUSH
11792: LD_INT 5
11794: PPUSH
11795: LD_INT 2
11797: PPUSH
11798: CALL_OW 322
// end ; if difficulty = 2 then
11802: LD_OWVAR 67
11806: PUSH
11807: LD_INT 2
11809: EQUAL
11810: IFFALSE 11906
// begin RuSolMinLevel = 5 ;
11812: LD_ADDR_EXP 37
11816: PUSH
11817: LD_INT 5
11819: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11820: LD_ADDR_EXP 38
11824: PUSH
11825: LD_INT 7
11827: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11828: LD_INT 51
11830: PPUSH
11831: LD_INT 6
11833: PPUSH
11834: LD_INT 2
11836: PPUSH
11837: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11841: LD_INT 57
11843: PPUSH
11844: LD_INT 6
11846: PPUSH
11847: LD_INT 2
11849: PPUSH
11850: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11854: LD_INT 63
11856: PPUSH
11857: LD_INT 6
11859: PPUSH
11860: LD_INT 2
11862: PPUSH
11863: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11867: LD_INT 51
11869: PPUSH
11870: LD_INT 5
11872: PPUSH
11873: LD_INT 2
11875: PPUSH
11876: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11880: LD_INT 5
11882: PPUSH
11883: LD_INT 2
11885: PPUSH
11886: LD_INT 2
11888: PPUSH
11889: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11893: LD_INT 5
11895: PPUSH
11896: LD_INT 5
11898: PPUSH
11899: LD_INT 2
11901: PPUSH
11902: CALL_OW 322
// end ; if difficulty >= 3 then
11906: LD_OWVAR 67
11910: PUSH
11911: LD_INT 3
11913: GREATEREQUAL
11914: IFFALSE 12062
// begin RuSolMinLevel = 6 ;
11916: LD_ADDR_EXP 37
11920: PUSH
11921: LD_INT 6
11923: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11924: LD_ADDR_EXP 38
11928: PUSH
11929: LD_INT 8
11931: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11932: LD_INT 51
11934: PPUSH
11935: LD_INT 6
11937: PPUSH
11938: LD_INT 2
11940: PPUSH
11941: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11945: LD_INT 57
11947: PPUSH
11948: LD_INT 6
11950: PPUSH
11951: LD_INT 2
11953: PPUSH
11954: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11958: LD_INT 52
11960: PPUSH
11961: LD_INT 6
11963: PPUSH
11964: LD_INT 2
11966: PPUSH
11967: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11971: LD_INT 58
11973: PPUSH
11974: LD_INT 6
11976: PPUSH
11977: LD_INT 2
11979: PPUSH
11980: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11984: LD_INT 63
11986: PPUSH
11987: LD_INT 6
11989: PPUSH
11990: LD_INT 2
11992: PPUSH
11993: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11997: LD_INT 64
11999: PPUSH
12000: LD_INT 6
12002: PPUSH
12003: LD_INT 2
12005: PPUSH
12006: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
12010: LD_INT 51
12012: PPUSH
12013: LD_INT 5
12015: PPUSH
12016: LD_INT 2
12018: PPUSH
12019: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
12023: LD_INT 52
12025: PPUSH
12026: LD_INT 5
12028: PPUSH
12029: LD_INT 2
12031: PPUSH
12032: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
12036: LD_INT 66
12038: PPUSH
12039: LD_INT 2
12041: PPUSH
12042: LD_INT 2
12044: PPUSH
12045: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
12049: LD_INT 66
12051: PPUSH
12052: LD_INT 5
12054: PPUSH
12055: LD_INT 2
12057: PPUSH
12058: CALL_OW 322
// end ; end ;
12062: LD_VAR 0 1
12066: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
12067: LD_INT 0
12069: PPUSH
12070: PPUSH
12071: PPUSH
12072: PPUSH
12073: PPUSH
12074: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
12075: LD_ADDR_VAR 0 7
12079: PUSH
12080: LD_INT 43
12082: PUSH
12083: LD_INT 68
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 43
12092: PUSH
12093: LD_INT 79
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 99
12102: PUSH
12103: LD_INT 114
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 103
12112: PUSH
12113: LD_INT 114
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 156
12122: PUSH
12123: LD_INT 92
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 152
12132: PUSH
12133: LD_INT 85
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: ST_TO_ADDR
// for i in sources do
12148: LD_ADDR_VAR 0 3
12152: PUSH
12153: LD_VAR 0 7
12157: PUSH
12158: FOR_IN
12159: IFFALSE 12188
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
12161: LD_VAR 0 3
12165: PUSH
12166: LD_INT 1
12168: ARRAY
12169: PPUSH
12170: LD_VAR 0 3
12174: PUSH
12175: LD_INT 2
12177: ARRAY
12178: PPUSH
12179: LD_INT 3
12181: PPUSH
12182: CALL_OW 441
12186: GO 12158
12188: POP
12189: POP
// case position of 1 :
12190: LD_VAR 0 1
12194: PUSH
12195: LD_INT 1
12197: DOUBLE
12198: EQUAL
12199: IFTRUE 12203
12201: GO 12214
12203: POP
// area := westConv ; 2 :
12204: LD_ADDR_VAR 0 6
12208: PUSH
12209: LD_INT 20
12211: ST_TO_ADDR
12212: GO 12253
12214: LD_INT 2
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12233
12222: POP
// area := midConv ; 3 :
12223: LD_ADDR_VAR 0 6
12227: PUSH
12228: LD_INT 21
12230: ST_TO_ADDR
12231: GO 12253
12233: LD_INT 3
12235: DOUBLE
12236: EQUAL
12237: IFTRUE 12241
12239: GO 12252
12241: POP
// area := eastConv ; end ;
12242: LD_ADDR_VAR 0 6
12246: PUSH
12247: LD_INT 22
12249: ST_TO_ADDR
12250: GO 12253
12252: POP
// area := AreaToList ( area , 0 ) ;
12253: LD_ADDR_VAR 0 6
12257: PUSH
12258: LD_VAR 0 6
12262: PPUSH
12263: LD_INT 0
12265: PPUSH
12266: CALL_OW 517
12270: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
12271: LD_ADDR_VAR 0 3
12275: PUSH
12276: DOUBLE
12277: LD_INT 1
12279: DEC
12280: ST_TO_ADDR
12281: LD_VAR 0 6
12285: PUSH
12286: LD_INT 1
12288: ARRAY
12289: PUSH
12290: FOR_TO
12291: IFFALSE 12372
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
12293: LD_VAR 0 6
12297: PUSH
12298: LD_INT 1
12300: ARRAY
12301: PUSH
12302: LD_VAR 0 3
12306: ARRAY
12307: PPUSH
12308: LD_VAR 0 6
12312: PUSH
12313: LD_INT 2
12315: ARRAY
12316: PUSH
12317: LD_VAR 0 3
12321: ARRAY
12322: PPUSH
12323: LD_INT 1
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12333: LD_VAR 0 6
12337: PUSH
12338: LD_INT 1
12340: ARRAY
12341: PUSH
12342: LD_VAR 0 3
12346: ARRAY
12347: PPUSH
12348: LD_VAR 0 6
12352: PUSH
12353: LD_INT 2
12355: ARRAY
12356: PUSH
12357: LD_VAR 0 3
12361: ARRAY
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 331
// end ;
12370: GO 12290
12372: POP
12373: POP
// ruPossition = position ;
12374: LD_ADDR_EXP 42
12378: PUSH
12379: LD_VAR 0 1
12383: ST_TO_ADDR
// if position = 1 then
12384: LD_VAR 0 1
12388: PUSH
12389: LD_INT 1
12391: EQUAL
12392: IFFALSE 13140
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12394: LD_ADDR_VAR 0 4
12398: PUSH
12399: LD_INT 22
12401: PUSH
12402: LD_INT 3
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 25
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PPUSH
12423: CALL_OW 69
12427: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12428: LD_ADDR_VAR 0 5
12432: PUSH
12433: LD_INT 0
12435: PUSH
12436: LD_INT 49
12438: PUSH
12439: LD_INT 74
12441: PUSH
12442: LD_INT 3
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 4
12453: PUSH
12454: LD_INT 73
12456: PUSH
12457: LD_INT 88
12459: PUSH
12460: LD_INT 5
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 4
12471: PUSH
12472: LD_INT 56
12474: PUSH
12475: LD_INT 62
12477: PUSH
12478: LD_INT 3
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 29
12489: PUSH
12490: LD_INT 43
12492: PUSH
12493: LD_INT 68
12495: PUSH
12496: LD_INT 2
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_INT 43
12510: PUSH
12511: LD_INT 79
12513: PUSH
12514: LD_INT 5
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 28
12525: PUSH
12526: LD_INT 60
12528: PUSH
12529: LD_INT 75
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 50
12546: PUSH
12547: LD_INT 87
12549: PUSH
12550: LD_INT 1
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 28
12561: PUSH
12562: LD_INT 45
12564: PUSH
12565: LD_INT 67
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 17
12579: PUSH
12580: LD_INT 47
12582: PUSH
12583: LD_INT 84
12585: PUSH
12586: LD_INT 2
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 18
12597: PUSH
12598: LD_INT 46
12600: PUSH
12601: LD_INT 87
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 28
12615: PUSH
12616: LD_INT 41
12618: PUSH
12619: LD_INT 64
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 32
12633: PUSH
12634: LD_INT 75
12636: PUSH
12637: LD_INT 76
12639: PUSH
12640: LD_INT 5
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 32
12651: PUSH
12652: LD_INT 77
12654: PUSH
12655: LD_INT 75
12657: PUSH
12658: LD_INT 5
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 32
12669: PUSH
12670: LD_INT 69
12672: PUSH
12673: LD_INT 68
12675: PUSH
12676: LD_INT 3
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 32
12687: PUSH
12688: LD_INT 59
12690: PUSH
12691: LD_INT 96
12693: PUSH
12694: LD_INT 5
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 32
12705: PUSH
12706: LD_INT 56
12708: PUSH
12709: LD_INT 96
12711: PUSH
12712: LD_INT 0
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 32
12723: PUSH
12724: LD_INT 51
12726: PUSH
12727: LD_INT 61
12729: PUSH
12730: LD_INT 3
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 32
12741: PUSH
12742: LD_INT 42
12744: PUSH
12745: LD_INT 60
12747: PUSH
12748: LD_INT 3
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 32
12759: PUSH
12760: LD_INT 36
12762: PUSH
12763: LD_INT 58
12765: PUSH
12766: LD_INT 3
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 32
12777: PUSH
12778: LD_INT 39
12780: PUSH
12781: LD_INT 59
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 32
12795: PUSH
12796: LD_INT 61
12798: PUSH
12799: LD_INT 64
12801: PUSH
12802: LD_INT 3
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 33
12813: PUSH
12814: LD_INT 63
12816: PUSH
12817: LD_INT 90
12819: PUSH
12820: LD_INT 5
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 33
12831: PUSH
12832: LD_INT 64
12834: PUSH
12835: LD_INT 88
12837: PUSH
12838: LD_INT 5
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 33
12849: PUSH
12850: LD_INT 72
12852: PUSH
12853: LD_INT 82
12855: PUSH
12856: LD_INT 5
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 6
12867: PUSH
12868: LD_INT 42
12870: PUSH
12871: LD_INT 74
12873: PUSH
12874: LD_INT 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: LD_INT 56
12888: PUSH
12889: LD_INT 77
12891: PUSH
12892: LD_INT 2
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 21
12903: PUSH
12904: LD_INT 54
12906: PUSH
12907: LD_INT 91
12909: PUSH
12910: LD_INT 5
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 16
12921: PUSH
12922: LD_INT 50
12924: PUSH
12925: LD_INT 83
12927: PUSH
12928: LD_INT 3
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 24
12939: PUSH
12940: LD_INT 50
12942: PUSH
12943: LD_INT 90
12945: PUSH
12946: LD_INT 0
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12986: LD_ADDR_VAR 0 3
12990: PUSH
12991: LD_INT 22
12993: PUSH
12994: LD_INT 3
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 3
13003: PUSH
13004: LD_INT 25
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PPUSH
13022: CALL_OW 69
13026: PUSH
13027: FOR_IN
13028: IFFALSE 13047
// AddComAgressiveMove ( i , 53 , 82 ) ;
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_INT 53
13037: PPUSH
13038: LD_INT 82
13040: PPUSH
13041: CALL_OW 174
13045: GO 13027
13047: POP
13048: POP
// for i := 1 to buildingsTab do
13049: LD_ADDR_VAR 0 3
13053: PUSH
13054: DOUBLE
13055: LD_INT 1
13057: DEC
13058: ST_TO_ADDR
13059: LD_VAR 0 5
13063: PUSH
13064: FOR_TO
13065: IFFALSE 13138
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13067: LD_VAR 0 4
13071: PPUSH
13072: LD_VAR 0 5
13076: PUSH
13077: LD_VAR 0 3
13081: ARRAY
13082: PUSH
13083: LD_INT 1
13085: ARRAY
13086: PPUSH
13087: LD_VAR 0 5
13091: PUSH
13092: LD_VAR 0 3
13096: ARRAY
13097: PUSH
13098: LD_INT 2
13100: ARRAY
13101: PPUSH
13102: LD_VAR 0 5
13106: PUSH
13107: LD_VAR 0 3
13111: ARRAY
13112: PUSH
13113: LD_INT 3
13115: ARRAY
13116: PPUSH
13117: LD_VAR 0 5
13121: PUSH
13122: LD_VAR 0 3
13126: ARRAY
13127: PUSH
13128: LD_INT 4
13130: ARRAY
13131: PPUSH
13132: CALL_OW 205
13136: GO 13064
13138: POP
13139: POP
// end ; if position = 2 then
13140: LD_VAR 0 1
13144: PUSH
13145: LD_INT 2
13147: EQUAL
13148: IFFALSE 13763
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13150: LD_ADDR_VAR 0 4
13154: PUSH
13155: LD_INT 22
13157: PUSH
13158: LD_INT 3
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 25
13167: PUSH
13168: LD_INT 2
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PPUSH
13179: CALL_OW 69
13183: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
13184: LD_ADDR_VAR 0 5
13188: PUSH
13189: LD_INT 0
13191: PUSH
13192: LD_INT 104
13194: PUSH
13195: LD_INT 110
13197: PUSH
13198: LD_INT 5
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: LD_INT 98
13212: PUSH
13213: LD_INT 90
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 29
13227: PUSH
13228: LD_INT 103
13230: PUSH
13231: LD_INT 114
13233: PUSH
13234: LD_INT 2
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: LD_INT 30
13245: PUSH
13246: LD_INT 99
13248: PUSH
13249: LD_INT 114
13251: PUSH
13252: LD_INT 3
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 28
13263: PUSH
13264: LD_INT 100
13266: PUSH
13267: LD_INT 112
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: LD_INT 92
13284: PUSH
13285: LD_INT 101
13287: PUSH
13288: LD_INT 0
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 28
13299: PUSH
13300: LD_INT 97
13302: PUSH
13303: LD_INT 116
13305: PUSH
13306: LD_INT 5
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 17
13317: PUSH
13318: LD_INT 96
13320: PUSH
13321: LD_INT 101
13323: PUSH
13324: LD_INT 4
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 18
13335: PUSH
13336: LD_INT 88
13338: PUSH
13339: LD_INT 97
13341: PUSH
13342: LD_INT 2
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 28
13353: PUSH
13354: LD_INT 106
13356: PUSH
13357: LD_INT 92
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 32
13371: PUSH
13372: LD_INT 88
13374: PUSH
13375: LD_INT 89
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 32
13389: PUSH
13390: LD_INT 86
13392: PUSH
13393: LD_INT 90
13395: PUSH
13396: LD_INT 2
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 32
13407: PUSH
13408: LD_INT 85
13410: PUSH
13411: LD_INT 99
13413: PUSH
13414: LD_INT 2
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 32
13425: PUSH
13426: LD_INT 85
13428: PUSH
13429: LD_INT 107
13431: PUSH
13432: LD_INT 1
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 33
13443: PUSH
13444: LD_INT 105
13446: PUSH
13447: LD_INT 99
13449: PUSH
13450: LD_INT 1
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 33
13461: PUSH
13462: LD_INT 102
13464: PUSH
13465: LD_INT 92
13467: PUSH
13468: LD_INT 3
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 33
13479: PUSH
13480: LD_INT 105
13482: PUSH
13483: LD_INT 92
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 6
13497: PUSH
13498: LD_INT 92
13500: PUSH
13501: LD_INT 110
13503: PUSH
13504: LD_INT 0
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 6
13515: PUSH
13516: LD_INT 103
13518: PUSH
13519: LD_INT 103
13521: PUSH
13522: LD_INT 5
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 21
13533: PUSH
13534: LD_INT 89
13536: PUSH
13537: LD_INT 101
13539: PUSH
13540: LD_INT 1
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 16
13551: PUSH
13552: LD_INT 95
13554: PUSH
13555: LD_INT 104
13557: PUSH
13558: LD_INT 4
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 24
13569: PUSH
13570: LD_INT 92
13572: PUSH
13573: LD_INT 105
13575: PUSH
13576: LD_INT 0
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13609: LD_ADDR_VAR 0 3
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_INT 3
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 3
13626: PUSH
13627: LD_INT 25
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PPUSH
13645: CALL_OW 69
13649: PUSH
13650: FOR_IN
13651: IFFALSE 13670
// AddComAgressiveMove ( i , 96 , 99 ) ;
13653: LD_VAR 0 3
13657: PPUSH
13658: LD_INT 96
13660: PPUSH
13661: LD_INT 99
13663: PPUSH
13664: CALL_OW 174
13668: GO 13650
13670: POP
13671: POP
// for i := 1 to buildingsTab do
13672: LD_ADDR_VAR 0 3
13676: PUSH
13677: DOUBLE
13678: LD_INT 1
13680: DEC
13681: ST_TO_ADDR
13682: LD_VAR 0 5
13686: PUSH
13687: FOR_TO
13688: IFFALSE 13761
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13690: LD_VAR 0 4
13694: PPUSH
13695: LD_VAR 0 5
13699: PUSH
13700: LD_VAR 0 3
13704: ARRAY
13705: PUSH
13706: LD_INT 1
13708: ARRAY
13709: PPUSH
13710: LD_VAR 0 5
13714: PUSH
13715: LD_VAR 0 3
13719: ARRAY
13720: PUSH
13721: LD_INT 2
13723: ARRAY
13724: PPUSH
13725: LD_VAR 0 5
13729: PUSH
13730: LD_VAR 0 3
13734: ARRAY
13735: PUSH
13736: LD_INT 3
13738: ARRAY
13739: PPUSH
13740: LD_VAR 0 5
13744: PUSH
13745: LD_VAR 0 3
13749: ARRAY
13750: PUSH
13751: LD_INT 4
13753: ARRAY
13754: PPUSH
13755: CALL_OW 205
13759: GO 13687
13761: POP
13762: POP
// end ; if position = 3 then
13763: LD_VAR 0 1
13767: PUSH
13768: LD_INT 3
13770: EQUAL
13771: IFFALSE 14557
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13773: LD_ADDR_VAR 0 4
13777: PUSH
13778: LD_INT 22
13780: PUSH
13781: LD_INT 3
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 25
13790: PUSH
13791: LD_INT 2
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13807: LD_ADDR_VAR 0 5
13811: PUSH
13812: LD_INT 0
13814: PUSH
13815: LD_INT 151
13817: PUSH
13818: LD_INT 71
13820: PUSH
13821: LD_INT 4
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 4
13832: PUSH
13833: LD_INT 145
13835: PUSH
13836: LD_INT 53
13838: PUSH
13839: LD_INT 3
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 4
13850: PUSH
13851: LD_INT 172
13853: PUSH
13854: LD_INT 102
13856: PUSH
13857: LD_INT 5
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 29
13868: PUSH
13869: LD_INT 152
13871: PUSH
13872: LD_INT 85
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 30
13886: PUSH
13887: LD_INT 156
13889: PUSH
13890: LD_INT 92
13892: PUSH
13893: LD_INT 3
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 28
13904: PUSH
13905: LD_INT 151
13907: PUSH
13908: LD_INT 66
13910: PUSH
13911: LD_INT 4
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 2
13922: PUSH
13923: LD_INT 163
13925: PUSH
13926: LD_INT 95
13928: PUSH
13929: LD_INT 5
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 28
13940: PUSH
13941: LD_INT 149
13943: PUSH
13944: LD_INT 63
13946: PUSH
13947: LD_INT 4
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 17
13958: PUSH
13959: LD_INT 167
13961: PUSH
13962: LD_INT 99
13964: PUSH
13965: LD_INT 5
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 18
13976: PUSH
13977: LD_INT 163
13979: PUSH
13980: LD_INT 98
13982: PUSH
13983: LD_INT 0
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 28
13994: PUSH
13995: LD_INT 154
13997: PUSH
13998: LD_INT 70
14000: PUSH
14001: LD_INT 4
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 32
14012: PUSH
14013: LD_INT 155
14015: PUSH
14016: LD_INT 62
14018: PUSH
14019: LD_INT 4
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 32
14030: PUSH
14031: LD_INT 161
14033: PUSH
14034: LD_INT 69
14036: PUSH
14037: LD_INT 4
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 32
14048: PUSH
14049: LD_INT 168
14051: PUSH
14052: LD_INT 78
14054: PUSH
14055: LD_INT 4
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 32
14066: PUSH
14067: LD_INT 163
14069: PUSH
14070: LD_INT 80
14072: PUSH
14073: LD_INT 5
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 32
14084: PUSH
14085: LD_INT 136
14087: PUSH
14088: LD_INT 73
14090: PUSH
14091: LD_INT 0
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 32
14102: PUSH
14103: LD_INT 157
14105: PUSH
14106: LD_INT 98
14108: PUSH
14109: LD_INT 0
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 32
14120: PUSH
14121: LD_INT 150
14123: PUSH
14124: LD_INT 87
14126: PUSH
14127: LD_INT 1
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 33
14138: PUSH
14139: LD_INT 171
14141: PUSH
14142: LD_INT 97
14144: PUSH
14145: LD_INT 4
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 33
14156: PUSH
14157: LD_INT 168
14159: PUSH
14160: LD_INT 92
14162: PUSH
14163: LD_INT 4
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 33
14174: PUSH
14175: LD_INT 166
14177: PUSH
14178: LD_INT 80
14180: PUSH
14181: LD_INT 5
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 33
14192: PUSH
14193: LD_INT 141
14195: PUSH
14196: LD_INT 54
14198: PUSH
14199: LD_INT 2
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 33
14210: PUSH
14211: LD_INT 133
14213: PUSH
14214: LD_INT 57
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 33
14228: PUSH
14229: LD_INT 132
14231: PUSH
14232: LD_INT 61
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 33
14246: PUSH
14247: LD_INT 150
14249: PUSH
14250: LD_INT 82
14252: PUSH
14253: LD_INT 0
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 33
14264: PUSH
14265: LD_INT 132
14267: PUSH
14268: LD_INT 72
14270: PUSH
14271: LD_INT 0
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 6
14282: PUSH
14283: LD_INT 146
14285: PUSH
14286: LD_INT 64
14288: PUSH
14289: LD_INT 4
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 6
14300: PUSH
14301: LD_INT 159
14303: PUSH
14304: LD_INT 85
14306: PUSH
14307: LD_INT 4
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 163
14321: PUSH
14322: LD_INT 91
14324: PUSH
14325: LD_INT 3
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 16
14336: PUSH
14337: LD_INT 166
14339: PUSH
14340: LD_INT 95
14342: PUSH
14343: LD_INT 4
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 24
14354: PUSH
14355: LD_INT 159
14357: PUSH
14358: LD_INT 95
14360: PUSH
14361: LD_INT 1
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14403: LD_ADDR_VAR 0 3
14407: PUSH
14408: LD_INT 22
14410: PUSH
14411: LD_INT 3
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 3
14420: PUSH
14421: LD_INT 25
14423: PUSH
14424: LD_INT 2
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL_OW 69
14443: PUSH
14444: FOR_IN
14445: IFFALSE 14464
// AddComAgressiveMove ( i , 141 , 65 ) ;
14447: LD_VAR 0 3
14451: PPUSH
14452: LD_INT 141
14454: PPUSH
14455: LD_INT 65
14457: PPUSH
14458: CALL_OW 174
14462: GO 14444
14464: POP
14465: POP
// for i := 1 to buildingsTab do
14466: LD_ADDR_VAR 0 3
14470: PUSH
14471: DOUBLE
14472: LD_INT 1
14474: DEC
14475: ST_TO_ADDR
14476: LD_VAR 0 5
14480: PUSH
14481: FOR_TO
14482: IFFALSE 14555
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14484: LD_VAR 0 4
14488: PPUSH
14489: LD_VAR 0 5
14493: PUSH
14494: LD_VAR 0 3
14498: ARRAY
14499: PUSH
14500: LD_INT 1
14502: ARRAY
14503: PPUSH
14504: LD_VAR 0 5
14508: PUSH
14509: LD_VAR 0 3
14513: ARRAY
14514: PUSH
14515: LD_INT 2
14517: ARRAY
14518: PPUSH
14519: LD_VAR 0 5
14523: PUSH
14524: LD_VAR 0 3
14528: ARRAY
14529: PUSH
14530: LD_INT 3
14532: ARRAY
14533: PPUSH
14534: LD_VAR 0 5
14538: PUSH
14539: LD_VAR 0 3
14543: ARRAY
14544: PUSH
14545: LD_INT 4
14547: ARRAY
14548: PPUSH
14549: CALL_OW 205
14553: GO 14481
14555: POP
14556: POP
// end ; end ;
14557: LD_VAR 0 2
14561: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14562: LD_INT 0
14564: PPUSH
14565: PPUSH
14566: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14567: LD_ADDR_EXP 69
14571: PUSH
14572: LD_INT 0
14574: PUSH
14575: LD_INT 71
14577: PUSH
14578: LD_INT 15
14580: PUSH
14581: LD_INT 3
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 6
14592: PUSH
14593: LD_INT 77
14595: PUSH
14596: LD_INT 18
14598: PUSH
14599: LD_INT 3
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 4
14610: PUSH
14611: LD_INT 77
14613: PUSH
14614: LD_INT 26
14616: PUSH
14617: LD_INT 0
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 31
14628: PUSH
14629: LD_INT 72
14631: PUSH
14632: LD_INT 24
14634: PUSH
14635: LD_INT 0
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 31
14646: PUSH
14647: LD_INT 82
14649: PUSH
14650: LD_INT 28
14652: PUSH
14653: LD_INT 0
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 31
14664: PUSH
14665: LD_INT 84
14667: PUSH
14668: LD_INT 21
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 31
14682: PUSH
14683: LD_INT 66
14685: PUSH
14686: LD_INT 14
14688: PUSH
14689: LD_INT 2
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 27
14700: PUSH
14701: LD_INT 67
14703: PUSH
14704: LD_INT 18
14706: PUSH
14707: LD_INT 5
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 27
14718: PUSH
14719: LD_INT 69
14721: PUSH
14722: LD_INT 23
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14745: LD_ADDR_VAR 0 3
14749: PUSH
14750: LD_INT 22
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 25
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14779: LD_VAR 0 3
14783: PPUSH
14784: LD_EXP 69
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: LD_EXP 69
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PUSH
14806: LD_INT 2
14808: ARRAY
14809: PPUSH
14810: LD_EXP 69
14814: PUSH
14815: LD_INT 1
14817: ARRAY
14818: PUSH
14819: LD_INT 3
14821: ARRAY
14822: PPUSH
14823: LD_EXP 69
14827: PUSH
14828: LD_INT 1
14830: ARRAY
14831: PUSH
14832: LD_INT 4
14834: ARRAY
14835: PPUSH
14836: CALL_OW 205
// end ;
14840: LD_VAR 0 1
14844: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14845: LD_INT 0
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
14851: PPUSH
14852: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14853: LD_ADDR_VAR 0 7
14857: PUSH
14858: LD_INT 22
14860: PUSH
14861: LD_VAR 0 1
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 25
14872: PUSH
14873: LD_INT 9
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14889: LD_ADDR_VAR 0 8
14893: PUSH
14894: LD_INT 22
14896: PUSH
14897: LD_VAR 0 2
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 3
14908: PUSH
14909: LD_INT 21
14911: PUSH
14912: LD_INT 3
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PPUSH
14927: CALL_OW 69
14931: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14932: LD_ADDR_VAR 0 5
14936: PUSH
14937: LD_INT 1
14939: PPUSH
14940: LD_INT 3
14942: PPUSH
14943: CALL_OW 12
14947: ST_TO_ADDR
// for i = 1 to list do
14948: LD_ADDR_VAR 0 6
14952: PUSH
14953: DOUBLE
14954: LD_INT 1
14956: DEC
14957: ST_TO_ADDR
14958: LD_VAR 0 7
14962: PUSH
14963: FOR_TO
14964: IFFALSE 15954
// for ta in filter do
14966: LD_ADDR_VAR 0 4
14970: PUSH
14971: LD_VAR 0 8
14975: PUSH
14976: FOR_IN
14977: IFFALSE 15950
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14979: LD_VAR 0 7
14983: PUSH
14984: LD_VAR 0 6
14988: ARRAY
14989: PPUSH
14990: LD_VAR 0 4
14994: PPUSH
14995: CALL_OW 296
14999: PUSH
15000: LD_INT 15
15002: LESSEQUAL
15003: IFFALSE 15948
// begin case c of 1 :
15005: LD_VAR 0 5
15009: PUSH
15010: LD_INT 1
15012: DOUBLE
15013: EQUAL
15014: IFTRUE 15018
15016: GO 15450
15018: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
15019: LD_VAR 0 7
15023: PUSH
15024: LD_VAR 0 6
15028: ARRAY
15029: PPUSH
15030: LD_VAR 0 4
15034: PPUSH
15035: CALL_OW 250
15039: PPUSH
15040: LD_VAR 0 4
15044: PPUSH
15045: CALL_OW 251
15049: PPUSH
15050: CALL_OW 154
// if eventVar2 = 0 then
15054: LD_EXP 67
15058: PUSH
15059: LD_INT 0
15061: EQUAL
15062: IFFALSE 15448
// begin eventVar2 = 1 ;
15064: LD_ADDR_EXP 67
15068: PUSH
15069: LD_INT 1
15071: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15072: LD_INT 245
15074: PPUSH
15075: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15079: LD_VAR 0 4
15083: PPUSH
15084: CALL_OW 250
15088: PPUSH
15089: LD_VAR 0 4
15093: PPUSH
15094: CALL_OW 251
15098: PPUSH
15099: CALL_OW 84
// DialogueOn ;
15103: CALL_OW 6
// if IsOK ( Cyrus ) then
15107: LD_EXP 5
15111: PPUSH
15112: CALL_OW 302
15116: IFFALSE 15132
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15118: LD_EXP 5
15122: PPUSH
15123: LD_STRING D9a-Cyrus-1
15125: PPUSH
15126: CALL_OW 88
// end else
15130: GO 15254
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15132: LD_INT 22
15134: PUSH
15135: LD_INT 1
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 26
15144: PUSH
15145: LD_INT 1
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 2
15154: PUSH
15155: LD_INT 25
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 25
15167: PUSH
15168: LD_INT 2
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 25
15177: PUSH
15178: LD_INT 3
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 25
15187: PUSH
15188: LD_INT 4
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 5
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: PPUSH
15218: CALL_OW 69
15222: PUSH
15223: LD_EXP 1
15227: PUSH
15228: LD_EXP 14
15232: PUSH
15233: LD_EXP 5
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: DIFF
15243: PPUSH
15244: LD_STRING D9a-Sol1-1
15246: PPUSH
15247: LD_STRING D9a-Sol1-1
15249: PPUSH
15250: CALL 11409 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15254: LD_INT 22
15256: PUSH
15257: LD_INT 1
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 26
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 2
15276: PUSH
15277: LD_INT 25
15279: PUSH
15280: LD_INT 1
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: LD_INT 25
15289: PUSH
15290: LD_INT 2
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 25
15299: PUSH
15300: LD_INT 3
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 25
15309: PUSH
15310: LD_INT 4
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 25
15319: PUSH
15320: LD_INT 5
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 69
15344: PUSH
15345: LD_EXP 1
15349: PUSH
15350: LD_EXP 14
15354: PUSH
15355: LD_EXP 5
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: DIFF
15365: PPUSH
15366: LD_STRING D9b-Sol1-1
15368: PPUSH
15369: LD_STRING D9b-Sol1-1
15371: PPUSH
15372: CALL 11409 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15376: LD_STRING 09_arInfo
15378: PPUSH
15379: LD_INT 0
15381: PPUSH
15382: CALL_OW 30
15386: PUSH
15387: LD_INT 1
15389: EQUAL
15390: IFFALSE 15404
// Say ( JMM , D9a-JMM-1 ) ;
15392: LD_EXP 1
15396: PPUSH
15397: LD_STRING D9a-JMM-1
15399: PPUSH
15400: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15404: LD_EXP 1
15408: PPUSH
15409: LD_STRING D9c-JMM-1
15411: PPUSH
15412: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15416: LD_INT 12
15418: PPUSH
15419: LD_INT 1
15421: PPUSH
15422: CALL_OW 321
15426: PUSH
15427: LD_INT 2
15429: EQUAL
15430: IFFALSE 15444
// Say ( JMM , D9c-JMM-1a ) ;
15432: LD_EXP 1
15436: PPUSH
15437: LD_STRING D9c-JMM-1a
15439: PPUSH
15440: CALL_OW 88
// DialogueOff ;
15444: CALL_OW 7
// end ; end ; 2 :
15448: GO 15948
15450: LD_INT 2
15452: DOUBLE
15453: EQUAL
15454: IFTRUE 15458
15456: GO 15916
15458: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15459: LD_VAR 0 7
15463: PUSH
15464: LD_VAR 0 6
15468: ARRAY
15469: PPUSH
15470: LD_VAR 0 4
15474: PPUSH
15475: CALL_OW 250
15479: PUSH
15480: LD_INT 1
15482: NEG
15483: PPUSH
15484: LD_INT 1
15486: PPUSH
15487: CALL_OW 12
15491: PLUS
15492: PPUSH
15493: LD_VAR 0 4
15497: PPUSH
15498: CALL_OW 251
15502: PUSH
15503: LD_INT 1
15505: NEG
15506: PPUSH
15507: LD_INT 1
15509: PPUSH
15510: CALL_OW 12
15514: PLUS
15515: PPUSH
15516: CALL_OW 153
// if eventVar2 = 0 then
15520: LD_EXP 67
15524: PUSH
15525: LD_INT 0
15527: EQUAL
15528: IFFALSE 15914
// begin eventVar2 = 1 ;
15530: LD_ADDR_EXP 67
15534: PUSH
15535: LD_INT 1
15537: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15538: LD_INT 245
15540: PPUSH
15541: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15545: LD_VAR 0 4
15549: PPUSH
15550: CALL_OW 250
15554: PPUSH
15555: LD_VAR 0 4
15559: PPUSH
15560: CALL_OW 251
15564: PPUSH
15565: CALL_OW 84
// DialogueOn ;
15569: CALL_OW 6
// if IsOK ( Cyrus ) then
15573: LD_EXP 5
15577: PPUSH
15578: CALL_OW 302
15582: IFFALSE 15598
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15584: LD_EXP 5
15588: PPUSH
15589: LD_STRING D9a-Cyrus-1
15591: PPUSH
15592: CALL_OW 88
// end else
15596: GO 15720
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15598: LD_INT 22
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 26
15610: PUSH
15611: LD_INT 1
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 2
15620: PUSH
15621: LD_INT 25
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 25
15633: PUSH
15634: LD_INT 2
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 25
15643: PUSH
15644: LD_INT 3
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 25
15653: PUSH
15654: LD_INT 4
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 25
15663: PUSH
15664: LD_INT 5
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: PUSH
15689: LD_EXP 1
15693: PUSH
15694: LD_EXP 14
15698: PUSH
15699: LD_EXP 5
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: LIST
15708: DIFF
15709: PPUSH
15710: LD_STRING D9a-Sol1-1
15712: PPUSH
15713: LD_STRING D9a-Sol1-1
15715: PPUSH
15716: CALL 11409 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15720: LD_INT 22
15722: PUSH
15723: LD_INT 1
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 26
15732: PUSH
15733: LD_INT 1
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 2
15742: PUSH
15743: LD_INT 25
15745: PUSH
15746: LD_INT 1
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 25
15755: PUSH
15756: LD_INT 2
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 25
15765: PUSH
15766: LD_INT 3
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 25
15775: PUSH
15776: LD_INT 4
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 25
15785: PUSH
15786: LD_INT 5
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: PUSH
15811: LD_EXP 1
15815: PUSH
15816: LD_EXP 14
15820: PUSH
15821: LD_EXP 5
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: DIFF
15831: PPUSH
15832: LD_STRING D9b-Sol1-1
15834: PPUSH
15835: LD_STRING D9b-Sol1-1
15837: PPUSH
15838: CALL 11409 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15842: LD_STRING 09_arInfo
15844: PPUSH
15845: LD_INT 0
15847: PPUSH
15848: CALL_OW 30
15852: PUSH
15853: LD_INT 1
15855: EQUAL
15856: IFFALSE 15870
// Say ( JMM , D9a-JMM-1 ) ;
15858: LD_EXP 1
15862: PPUSH
15863: LD_STRING D9a-JMM-1
15865: PPUSH
15866: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15870: LD_EXP 1
15874: PPUSH
15875: LD_STRING D9c-JMM-1
15877: PPUSH
15878: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15882: LD_INT 12
15884: PPUSH
15885: LD_INT 1
15887: PPUSH
15888: CALL_OW 321
15892: PUSH
15893: LD_INT 2
15895: EQUAL
15896: IFFALSE 15910
// Say ( JMM , D9c-JMM-1a ) ;
15898: LD_EXP 1
15902: PPUSH
15903: LD_STRING D9c-JMM-1a
15905: PPUSH
15906: CALL_OW 88
// DialogueOff ;
15910: CALL_OW 7
// end ; end ; 3 :
15914: GO 15948
15916: LD_INT 3
15918: DOUBLE
15919: EQUAL
15920: IFTRUE 15924
15922: GO 15947
15924: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15925: LD_VAR 0 7
15929: PUSH
15930: LD_VAR 0 6
15934: ARRAY
15935: PPUSH
15936: LD_VAR 0 4
15940: PPUSH
15941: CALL_OW 115
15945: GO 15948
15947: POP
// end ; end ;
15948: GO 14976
15950: POP
15951: POP
15952: GO 14963
15954: POP
15955: POP
// end ;
15956: LD_VAR 0 3
15960: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
15965: PPUSH
15966: PPUSH
// for i = 1 to 72 do
15967: LD_ADDR_VAR 0 5
15971: PUSH
15972: DOUBLE
15973: LD_INT 1
15975: DEC
15976: ST_TO_ADDR
15977: LD_INT 72
15979: PUSH
15980: FOR_TO
15981: IFFALSE 16039
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15983: LD_VAR 0 5
15987: PPUSH
15988: LD_VAR 0 1
15992: PPUSH
15993: CALL_OW 321
15997: PUSH
15998: LD_INT 1
16000: EQUAL
16001: PUSH
16002: LD_VAR 0 5
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: CALL_OW 482
16016: PUSH
16017: LD_INT 1
16019: EQUAL
16020: AND
16021: IFFALSE 16037
// AddComResearch ( lab , i ) ;
16023: LD_VAR 0 2
16027: PPUSH
16028: LD_VAR 0 5
16032: PPUSH
16033: CALL_OW 184
16037: GO 15980
16039: POP
16040: POP
// end ;
16041: LD_VAR 0 4
16045: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
16046: LD_INT 0
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
16056: LD_ADDR_VAR 0 6
16060: PUSH
16061: LD_INT 22
16063: PUSH
16064: LD_VAR 0 1
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 56
16075: PUSH
16076: EMPTY
16077: LIST
16078: PUSH
16079: LD_INT 24
16081: PUSH
16082: LD_INT 700
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 3
16091: PUSH
16092: LD_INT 60
16094: PUSH
16095: EMPTY
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 2
16104: PUSH
16105: LD_INT 25
16107: PUSH
16108: LD_INT 1
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 25
16117: PUSH
16118: LD_INT 9
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: PPUSH
16137: CALL_OW 69
16141: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
16142: LD_ADDR_VAR 0 7
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_VAR 0 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 30
16161: PUSH
16162: LD_INT 32
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 58
16171: PUSH
16172: EMPTY
16173: LIST
16174: PUSH
16175: LD_INT 24
16177: PUSH
16178: LD_INT 251
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: PPUSH
16191: CALL_OW 69
16195: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
16196: LD_ADDR_VAR 0 9
16200: PUSH
16201: LD_INT 22
16203: PUSH
16204: LD_VAR 0 1
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 2
16215: PUSH
16216: LD_INT 30
16218: PUSH
16219: LD_INT 4
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 30
16228: PUSH
16229: LD_INT 5
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 24
16243: PUSH
16244: LD_INT 251
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: PPUSH
16256: CALL_OW 69
16260: ST_TO_ADDR
// if barrackList > 0 then
16261: LD_VAR 0 9
16265: PUSH
16266: LD_INT 0
16268: GREATER
16269: IFFALSE 16404
// begin if turretList = 0 then
16271: LD_VAR 0 7
16275: PUSH
16276: LD_INT 0
16278: EQUAL
16279: IFFALSE 16328
// begin for i in soldiers_list do
16281: LD_ADDR_VAR 0 4
16285: PUSH
16286: LD_VAR 0 6
16290: PUSH
16291: FOR_IN
16292: IFFALSE 16324
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
16294: LD_VAR 0 4
16298: PPUSH
16299: LD_VAR 0 9
16303: PUSH
16304: LD_INT 1
16306: PPUSH
16307: LD_VAR 0 9
16311: PPUSH
16312: CALL_OW 12
16316: ARRAY
16317: PPUSH
16318: CALL_OW 120
16322: GO 16291
16324: POP
16325: POP
// end else
16326: GO 16404
// begin for i in barrackList do
16328: LD_ADDR_VAR 0 4
16332: PUSH
16333: LD_VAR 0 9
16337: PUSH
16338: FOR_IN
16339: IFFALSE 16402
// begin insideUnits = UnitsInside ( i ) ;
16341: LD_ADDR_VAR 0 10
16345: PUSH
16346: LD_VAR 0 4
16350: PPUSH
16351: CALL_OW 313
16355: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16356: LD_VAR 0 10
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: LD_VAR 0 7
16369: PUSH
16370: LD_INT 1
16372: ARRAY
16373: PPUSH
16374: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16378: LD_VAR 0 6
16382: PUSH
16383: LD_INT 1
16385: ARRAY
16386: PPUSH
16387: LD_VAR 0 7
16391: PUSH
16392: LD_INT 1
16394: ARRAY
16395: PPUSH
16396: CALL_OW 120
// end ;
16400: GO 16338
16402: POP
16403: POP
// end ; end ; end ;
16404: LD_VAR 0 3
16408: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16409: LD_INT 0
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16417: LD_ADDR_VAR 0 6
16421: PUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL_OW 313
16431: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16432: LD_ADDR_VAR 0 7
16436: PUSH
16437: LD_INT 22
16439: PUSH
16440: LD_VAR 0 1
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 25
16451: PUSH
16452: LD_INT 2
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 24
16461: PUSH
16462: LD_INT 1000
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: LD_INT 54
16474: PUSH
16475: EMPTY
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: PPUSH
16488: CALL_OW 69
16492: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16493: LD_ADDR_VAR 0 4
16497: PUSH
16498: LD_INT 22
16500: PUSH
16501: LD_VAR 0 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 21
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 3
16522: PUSH
16523: LD_INT 24
16525: PUSH
16526: LD_INT 1000
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: PPUSH
16545: CALL_OW 69
16549: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16550: LD_VAR 0 4
16554: NOT
16555: PUSH
16556: LD_VAR 0 7
16560: NOT
16561: AND
16562: PUSH
16563: LD_EXP 43
16567: NOT
16568: AND
16569: IFFALSE 16573
// exit ;
16571: GO 16764
// if buildings_list > 0 and engineerOkInside then
16573: LD_VAR 0 4
16577: PUSH
16578: LD_INT 0
16580: GREATER
16581: PUSH
16582: LD_VAR 0 6
16586: AND
16587: IFFALSE 16641
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16589: LD_ADDR_VAR 0 5
16593: PUSH
16594: LD_INT 22
16596: PUSH
16597: LD_VAR 0 1
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 25
16608: PUSH
16609: LD_INT 2
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PPUSH
16620: CALL_OW 69
16624: PUSH
16625: FOR_IN
16626: IFFALSE 16639
// ComExitBuilding ( i ) ;
16628: LD_VAR 0 5
16632: PPUSH
16633: CALL_OW 122
16637: GO 16625
16639: POP
16640: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16641: LD_VAR 0 4
16645: PUSH
16646: LD_INT 0
16648: GREATER
16649: PUSH
16650: LD_VAR 0 7
16654: PUSH
16655: LD_INT 0
16657: GREATER
16658: AND
16659: IFFALSE 16713
// begin for i in engineerOkOutside do
16661: LD_ADDR_VAR 0 5
16665: PUSH
16666: LD_VAR 0 7
16670: PUSH
16671: FOR_IN
16672: IFFALSE 16711
// for j in buildings_list do
16674: LD_ADDR_VAR 0 8
16678: PUSH
16679: LD_VAR 0 4
16683: PUSH
16684: FOR_IN
16685: IFFALSE 16707
// ComRepairBuilding ( i , j [ 1 ] ) ;
16687: LD_VAR 0 5
16691: PPUSH
16692: LD_VAR 0 8
16696: PUSH
16697: LD_INT 1
16699: ARRAY
16700: PPUSH
16701: CALL_OW 130
16705: GO 16684
16707: POP
16708: POP
16709: GO 16671
16711: POP
16712: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16713: LD_VAR 0 4
16717: PUSH
16718: LD_INT 0
16720: EQUAL
16721: PUSH
16722: LD_VAR 0 7
16726: PUSH
16727: LD_INT 0
16729: GREATER
16730: AND
16731: IFFALSE 16764
// for i in engineerOkOutside do
16733: LD_ADDR_VAR 0 5
16737: PUSH
16738: LD_VAR 0 7
16742: PUSH
16743: FOR_IN
16744: IFFALSE 16762
// ComEnterUnit ( i , building ) ;
16746: LD_VAR 0 5
16750: PPUSH
16751: LD_VAR 0 2
16755: PPUSH
16756: CALL_OW 120
16760: GO 16743
16762: POP
16763: POP
// end ;
16764: LD_VAR 0 3
16768: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16769: LD_INT 0
16771: PPUSH
16772: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16773: LD_INT 22
16775: PUSH
16776: LD_VAR 0 1
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 25
16787: PUSH
16788: LD_INT 2
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PPUSH
16799: CALL_OW 69
16803: PUSH
16804: LD_INT 0
16806: GREATER
16807: PUSH
16808: LD_INT 22
16810: PUSH
16811: LD_VAR 0 1
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 21
16822: PUSH
16823: LD_INT 3
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 3
16832: PUSH
16833: LD_INT 24
16835: PUSH
16836: LD_INT 1000
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: LIST
16851: PPUSH
16852: CALL_OW 69
16856: PUSH
16857: LD_INT 0
16859: EQUAL
16860: AND
16861: PUSH
16862: LD_VAR 0 2
16866: PUSH
16867: LD_INT 0
16869: GREATER
16870: AND
16871: IFFALSE 16970
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16873: LD_ADDR_VAR 0 4
16877: PUSH
16878: LD_INT 22
16880: PUSH
16881: LD_VAR 0 1
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 25
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL_OW 69
16908: PUSH
16909: FOR_IN
16910: IFFALSE 16968
// begin AddComExitBuilding ( i ) ;
16912: LD_VAR 0 4
16916: PPUSH
16917: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16921: LD_VAR 0 4
16925: PPUSH
16926: LD_VAR 0 2
16930: PUSH
16931: LD_INT 1
16933: ARRAY
16934: PPUSH
16935: LD_VAR 0 2
16939: PUSH
16940: LD_INT 2
16942: ARRAY
16943: PPUSH
16944: LD_VAR 0 2
16948: PUSH
16949: LD_INT 3
16951: ARRAY
16952: PPUSH
16953: LD_VAR 0 2
16957: PUSH
16958: LD_INT 4
16960: ARRAY
16961: PPUSH
16962: CALL_OW 205
// end ;
16966: GO 16909
16968: POP
16969: POP
// end ; end ;
16970: LD_VAR 0 3
16974: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16975: LD_INT 0
16977: PPUSH
16978: PPUSH
16979: PPUSH
16980: PPUSH
16981: PPUSH
16982: PPUSH
16983: PPUSH
16984: PPUSH
16985: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16986: LD_ADDR_VAR 0 6
16990: PUSH
16991: LD_INT 22
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 25
17005: PUSH
17006: LD_INT 4
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 24
17015: PUSH
17016: LD_INT 251
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
17033: LD_ADDR_VAR 0 7
17037: PUSH
17038: LD_VAR 0 3
17042: PPUSH
17043: LD_INT 22
17045: PUSH
17046: LD_VAR 0 1
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 25
17057: PUSH
17058: LD_INT 4
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 50
17067: PUSH
17068: EMPTY
17069: LIST
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: PPUSH
17076: CALL_OW 70
17080: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
17081: LD_ADDR_VAR 0 10
17085: PUSH
17086: LD_VAR 0 3
17090: PPUSH
17091: LD_INT 22
17093: PUSH
17094: LD_VAR 0 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 21
17105: PUSH
17106: LD_INT 1
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 3
17115: PUSH
17116: LD_INT 25
17118: PUSH
17119: LD_INT 3
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: LD_INT 24
17135: PUSH
17136: LD_INT 750
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: PPUSH
17153: CALL_OW 70
17157: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17158: LD_ADDR_VAR 0 11
17162: PUSH
17163: LD_VAR 0 2
17167: PPUSH
17168: LD_INT 22
17170: PUSH
17171: LD_VAR 0 1
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 21
17182: PUSH
17183: LD_INT 1
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 3
17192: PUSH
17193: LD_INT 25
17195: PUSH
17196: LD_INT 3
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: LD_INT 24
17212: PUSH
17213: LD_INT 1000
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: PPUSH
17230: CALL_OW 70
17234: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
17235: LD_VAR 0 10
17239: NOT
17240: PUSH
17241: LD_VAR 0 7
17245: NOT
17246: AND
17247: PUSH
17248: LD_VAR 0 11
17252: NOT
17253: AND
17254: IFFALSE 17258
// exit ;
17256: GO 17518
// if damageUnits > 0 and sci_list > 0 then
17258: LD_VAR 0 10
17262: PUSH
17263: LD_INT 0
17265: GREATER
17266: PUSH
17267: LD_VAR 0 6
17271: PUSH
17272: LD_INT 0
17274: GREATER
17275: AND
17276: IFFALSE 17309
// for i in damageUnits do
17278: LD_ADDR_VAR 0 8
17282: PUSH
17283: LD_VAR 0 10
17287: PUSH
17288: FOR_IN
17289: IFFALSE 17307
// ComMoveToArea ( i , healArea ) ;
17291: LD_VAR 0 8
17295: PPUSH
17296: LD_VAR 0 2
17300: PPUSH
17301: CALL_OW 113
17305: GO 17288
17307: POP
17308: POP
// if unitsToHeal > 0 and sci_list > 0 then
17309: LD_VAR 0 11
17313: PUSH
17314: LD_INT 0
17316: GREATER
17317: PUSH
17318: LD_VAR 0 6
17322: PUSH
17323: LD_INT 0
17325: GREATER
17326: AND
17327: IFFALSE 17386
// begin for i in sci_list do
17329: LD_ADDR_VAR 0 8
17333: PUSH
17334: LD_VAR 0 6
17338: PUSH
17339: FOR_IN
17340: IFFALSE 17384
// begin ComExitBuilding ( i ) ;
17342: LD_VAR 0 8
17346: PPUSH
17347: CALL_OW 122
// for j in unitsToHeal do
17351: LD_ADDR_VAR 0 9
17355: PUSH
17356: LD_VAR 0 11
17360: PUSH
17361: FOR_IN
17362: IFFALSE 17380
// AddComHeal ( i , j ) ;
17364: LD_VAR 0 8
17368: PPUSH
17369: LD_VAR 0 9
17373: PPUSH
17374: CALL_OW 188
17378: GO 17361
17380: POP
17381: POP
// end ;
17382: GO 17339
17384: POP
17385: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17386: LD_VAR 0 10
17390: PUSH
17391: LD_INT 0
17393: EQUAL
17394: PUSH
17395: LD_VAR 0 11
17399: PUSH
17400: LD_INT 0
17402: EQUAL
17403: AND
17404: PUSH
17405: LD_VAR 0 7
17409: PUSH
17410: LD_INT 0
17412: GREATER
17413: AND
17414: IFFALSE 17518
// for i in sci_listOutside do
17416: LD_ADDR_VAR 0 8
17420: PUSH
17421: LD_VAR 0 7
17425: PUSH
17426: FOR_IN
17427: IFFALSE 17516
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17429: LD_ADDR_VAR 0 12
17433: PUSH
17434: LD_INT 22
17436: PUSH
17437: LD_VAR 0 1
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 21
17448: PUSH
17449: LD_INT 3
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 30
17458: PUSH
17459: LD_INT 8
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: PPUSH
17471: CALL_OW 69
17475: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17476: LD_ADDR_VAR 0 13
17480: PUSH
17481: LD_INT 1
17483: PPUSH
17484: LD_VAR 0 12
17488: PPUSH
17489: CALL_OW 12
17493: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17494: LD_VAR 0 8
17498: PPUSH
17499: LD_VAR 0 12
17503: PUSH
17504: LD_VAR 0 13
17508: ARRAY
17509: PPUSH
17510: CALL_OW 120
// end ;
17514: GO 17426
17516: POP
17517: POP
// end ;
17518: LD_VAR 0 5
17522: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17523: LD_INT 0
17525: PPUSH
17526: PPUSH
17527: PPUSH
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
17533: PPUSH
17534: PPUSH
17535: PPUSH
// amChassisTab = [ ] ;
17536: LD_ADDR_VAR 0 19
17540: PUSH
17541: EMPTY
17542: ST_TO_ADDR
// arChassisTab = [ ] ;
17543: LD_ADDR_VAR 0 18
17547: PUSH
17548: EMPTY
17549: ST_TO_ADDR
// ruChassisTab = [ ] ;
17550: LD_ADDR_VAR 0 17
17554: PUSH
17555: EMPTY
17556: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17557: LD_INT 35
17559: PPUSH
17560: CALL_OW 67
// if nation = 1 then
17564: LD_VAR 0 5
17568: PUSH
17569: LD_INT 1
17571: EQUAL
17572: IFFALSE 18077
// begin uc_side = side ;
17574: LD_ADDR_OWVAR 20
17578: PUSH
17579: LD_VAR 0 2
17583: ST_TO_ADDR
// uc_nation = nation ;
17584: LD_ADDR_OWVAR 21
17588: PUSH
17589: LD_VAR 0 5
17593: ST_TO_ADDR
// vc_engine = vehengine ;
17594: LD_ADDR_OWVAR 39
17598: PUSH
17599: LD_VAR 0 6
17603: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17604: LD_ADDR_OWVAR 38
17608: PUSH
17609: LD_VAR 0 7
17613: PUSH
17614: LD_INT 1
17616: PPUSH
17617: LD_VAR 0 7
17621: PPUSH
17622: CALL_OW 12
17626: ARRAY
17627: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17628: LD_ADDR_OWVAR 40
17632: PUSH
17633: LD_VAR 0 10
17637: PUSH
17638: LD_INT 1
17640: PPUSH
17641: LD_VAR 0 10
17645: PPUSH
17646: CALL_OW 12
17650: ARRAY
17651: ST_TO_ADDR
// for j = 1 to AMWeapon do
17652: LD_ADDR_VAR 0 14
17656: PUSH
17657: DOUBLE
17658: LD_INT 1
17660: DEC
17661: ST_TO_ADDR
17662: LD_VAR 0 10
17666: PUSH
17667: FOR_TO
17668: IFFALSE 17969
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17670: LD_VAR 0 10
17674: PUSH
17675: LD_VAR 0 14
17679: ARRAY
17680: PUSH
17681: LD_INT 2
17683: EQUAL
17684: PUSH
17685: LD_VAR 0 10
17689: PUSH
17690: LD_VAR 0 14
17694: ARRAY
17695: PUSH
17696: LD_INT 3
17698: EQUAL
17699: OR
17700: IFFALSE 17753
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17702: LD_ADDR_VAR 0 19
17706: PUSH
17707: LD_INT 1
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: LD_INT 3
17715: PUSH
17716: LD_INT 4
17718: PUSH
17719: LD_INT 5
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17729: LD_ADDR_OWVAR 37
17733: PUSH
17734: LD_VAR 0 19
17738: PUSH
17739: LD_INT 1
17741: PPUSH
17742: LD_VAR 0 19
17746: PPUSH
17747: CALL_OW 12
17751: ARRAY
17752: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17753: LD_VAR 0 10
17757: PUSH
17758: LD_VAR 0 14
17762: ARRAY
17763: PUSH
17764: LD_INT 4
17766: EQUAL
17767: PUSH
17768: LD_VAR 0 10
17772: PUSH
17773: LD_VAR 0 14
17777: ARRAY
17778: PUSH
17779: LD_INT 5
17781: EQUAL
17782: OR
17783: PUSH
17784: LD_VAR 0 10
17788: PUSH
17789: LD_VAR 0 14
17793: ARRAY
17794: PUSH
17795: LD_INT 9
17797: EQUAL
17798: OR
17799: PUSH
17800: LD_VAR 0 10
17804: PUSH
17805: LD_VAR 0 14
17809: ARRAY
17810: PUSH
17811: LD_INT 11
17813: EQUAL
17814: OR
17815: PUSH
17816: LD_VAR 0 10
17820: PUSH
17821: LD_VAR 0 14
17825: ARRAY
17826: PUSH
17827: LD_INT 7
17829: EQUAL
17830: OR
17831: IFFALSE 17880
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17833: LD_ADDR_VAR 0 19
17837: PUSH
17838: LD_INT 2
17840: PUSH
17841: LD_INT 3
17843: PUSH
17844: LD_INT 4
17846: PUSH
17847: LD_INT 5
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17856: LD_ADDR_OWVAR 37
17860: PUSH
17861: LD_VAR 0 19
17865: PUSH
17866: LD_INT 1
17868: PPUSH
17869: LD_VAR 0 19
17873: PPUSH
17874: CALL_OW 12
17878: ARRAY
17879: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17880: LD_VAR 0 10
17884: PUSH
17885: LD_VAR 0 14
17889: ARRAY
17890: PUSH
17891: LD_INT 8
17893: EQUAL
17894: PUSH
17895: LD_VAR 0 10
17899: PUSH
17900: LD_VAR 0 14
17904: ARRAY
17905: PUSH
17906: LD_INT 6
17908: EQUAL
17909: OR
17910: PUSH
17911: LD_VAR 0 10
17915: PUSH
17916: LD_VAR 0 14
17920: ARRAY
17921: PUSH
17922: LD_INT 10
17924: EQUAL
17925: OR
17926: IFFALSE 17967
// begin amChassisTab = [ 4 , 5 ] ;
17928: LD_ADDR_VAR 0 19
17932: PUSH
17933: LD_INT 4
17935: PUSH
17936: LD_INT 5
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17943: LD_ADDR_OWVAR 37
17947: PUSH
17948: LD_VAR 0 19
17952: PUSH
17953: LD_INT 1
17955: PPUSH
17956: LD_VAR 0 19
17960: PPUSH
17961: CALL_OW 12
17965: ARRAY
17966: ST_TO_ADDR
// end ; end ;
17967: GO 17667
17969: POP
17970: POP
// veh = CreateVehicle ;
17971: LD_ADDR_VAR 0 16
17975: PUSH
17976: CALL_OW 45
17980: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17981: LD_VAR 0 16
17985: PPUSH
17986: LD_VAR 0 1
17990: PPUSH
17991: LD_INT 0
17993: PPUSH
17994: CALL_OW 49
// if vc_control = 1 then
17998: LD_OWVAR 38
18002: PUSH
18003: LD_INT 1
18005: EQUAL
18006: IFFALSE 18063
// begin hc_gallery =  ;
18008: LD_ADDR_OWVAR 33
18012: PUSH
18013: LD_STRING 
18015: ST_TO_ADDR
// hc_name =  ;
18016: LD_ADDR_OWVAR 26
18020: PUSH
18021: LD_STRING 
18023: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18024: LD_INT 0
18026: PPUSH
18027: LD_INT 3
18029: PPUSH
18030: LD_VAR 0 4
18034: PPUSH
18035: CALL_OW 380
// un = CreateHuman ;
18039: LD_ADDR_VAR 0 15
18043: PUSH
18044: CALL_OW 44
18048: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18049: LD_VAR 0 15
18053: PPUSH
18054: LD_VAR 0 16
18058: PPUSH
18059: CALL_OW 52
// end ; i = i + 1 ;
18063: LD_ADDR_VAR 0 13
18067: PUSH
18068: LD_VAR 0 13
18072: PUSH
18073: LD_INT 1
18075: PLUS
18076: ST_TO_ADDR
// end ; if nation = 2 then
18077: LD_VAR 0 5
18081: PUSH
18082: LD_INT 2
18084: EQUAL
18085: IFFALSE 18507
// begin uc_side = side ;
18087: LD_ADDR_OWVAR 20
18091: PUSH
18092: LD_VAR 0 2
18096: ST_TO_ADDR
// uc_nation = nation ;
18097: LD_ADDR_OWVAR 21
18101: PUSH
18102: LD_VAR 0 5
18106: ST_TO_ADDR
// vc_engine = vehengine ;
18107: LD_ADDR_OWVAR 39
18111: PUSH
18112: LD_VAR 0 6
18116: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18117: LD_ADDR_OWVAR 38
18121: PUSH
18122: LD_VAR 0 7
18126: PUSH
18127: LD_INT 1
18129: PPUSH
18130: LD_VAR 0 7
18134: PPUSH
18135: CALL_OW 12
18139: ARRAY
18140: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
18141: LD_ADDR_OWVAR 40
18145: PUSH
18146: LD_VAR 0 9
18150: PUSH
18151: LD_INT 1
18153: PPUSH
18154: LD_VAR 0 9
18158: PPUSH
18159: CALL_OW 12
18163: ARRAY
18164: ST_TO_ADDR
// for j = 1 to ARWeapons do
18165: LD_ADDR_VAR 0 14
18169: PUSH
18170: DOUBLE
18171: LD_INT 1
18173: DEC
18174: ST_TO_ADDR
18175: LD_VAR 0 9
18179: PUSH
18180: FOR_TO
18181: IFFALSE 18399
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
18183: LD_VAR 0 9
18187: PUSH
18188: LD_VAR 0 14
18192: ARRAY
18193: PUSH
18194: LD_INT 24
18196: EQUAL
18197: PUSH
18198: LD_VAR 0 9
18202: PUSH
18203: LD_VAR 0 14
18207: ARRAY
18208: PUSH
18209: LD_INT 22
18211: EQUAL
18212: OR
18213: PUSH
18214: LD_VAR 0 9
18218: PUSH
18219: LD_VAR 0 14
18223: ARRAY
18224: PUSH
18225: LD_INT 23
18227: EQUAL
18228: OR
18229: PUSH
18230: LD_VAR 0 9
18234: PUSH
18235: LD_VAR 0 14
18239: ARRAY
18240: PUSH
18241: LD_INT 30
18243: EQUAL
18244: OR
18245: IFFALSE 18282
// begin arChassisTab = [ 14 ] ;
18247: LD_ADDR_VAR 0 18
18251: PUSH
18252: LD_INT 14
18254: PUSH
18255: EMPTY
18256: LIST
18257: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18258: LD_ADDR_OWVAR 37
18262: PUSH
18263: LD_VAR 0 18
18267: PUSH
18268: LD_INT 1
18270: PPUSH
18271: LD_VAR 0 18
18275: PPUSH
18276: CALL_OW 12
18280: ARRAY
18281: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
18282: LD_VAR 0 9
18286: PUSH
18287: LD_VAR 0 14
18291: ARRAY
18292: PUSH
18293: LD_INT 29
18295: EQUAL
18296: PUSH
18297: LD_VAR 0 9
18301: PUSH
18302: LD_VAR 0 14
18306: ARRAY
18307: PUSH
18308: LD_INT 28
18310: EQUAL
18311: OR
18312: PUSH
18313: LD_VAR 0 9
18317: PUSH
18318: LD_VAR 0 14
18322: ARRAY
18323: PUSH
18324: LD_INT 27
18326: EQUAL
18327: OR
18328: PUSH
18329: LD_VAR 0 9
18333: PUSH
18334: LD_VAR 0 14
18338: ARRAY
18339: PUSH
18340: LD_INT 26
18342: EQUAL
18343: OR
18344: PUSH
18345: LD_VAR 0 9
18349: PUSH
18350: LD_VAR 0 14
18354: ARRAY
18355: PUSH
18356: LD_INT 25
18358: EQUAL
18359: OR
18360: IFFALSE 18397
// begin arChassisTab = [ 14 ] ;
18362: LD_ADDR_VAR 0 18
18366: PUSH
18367: LD_INT 14
18369: PUSH
18370: EMPTY
18371: LIST
18372: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18373: LD_ADDR_OWVAR 37
18377: PUSH
18378: LD_VAR 0 18
18382: PUSH
18383: LD_INT 1
18385: PPUSH
18386: LD_VAR 0 18
18390: PPUSH
18391: CALL_OW 12
18395: ARRAY
18396: ST_TO_ADDR
// end ; end ;
18397: GO 18180
18399: POP
18400: POP
// veh = CreateVehicle ;
18401: LD_ADDR_VAR 0 16
18405: PUSH
18406: CALL_OW 45
18410: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18411: LD_VAR 0 16
18415: PPUSH
18416: LD_VAR 0 1
18420: PPUSH
18421: LD_INT 0
18423: PPUSH
18424: CALL_OW 49
// if vc_control = 1 then
18428: LD_OWVAR 38
18432: PUSH
18433: LD_INT 1
18435: EQUAL
18436: IFFALSE 18493
// begin hc_gallery =  ;
18438: LD_ADDR_OWVAR 33
18442: PUSH
18443: LD_STRING 
18445: ST_TO_ADDR
// hc_name =  ;
18446: LD_ADDR_OWVAR 26
18450: PUSH
18451: LD_STRING 
18453: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18454: LD_INT 0
18456: PPUSH
18457: LD_INT 3
18459: PPUSH
18460: LD_VAR 0 4
18464: PPUSH
18465: CALL_OW 380
// un = CreateHuman ;
18469: LD_ADDR_VAR 0 15
18473: PUSH
18474: CALL_OW 44
18478: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18479: LD_VAR 0 15
18483: PPUSH
18484: LD_VAR 0 16
18488: PPUSH
18489: CALL_OW 52
// end ; i = i + 1 ;
18493: LD_ADDR_VAR 0 13
18497: PUSH
18498: LD_VAR 0 13
18502: PUSH
18503: LD_INT 1
18505: PLUS
18506: ST_TO_ADDR
// end ; if nation = 3 then
18507: LD_VAR 0 5
18511: PUSH
18512: LD_INT 3
18514: EQUAL
18515: IFFALSE 18921
// begin uc_side = side ;
18517: LD_ADDR_OWVAR 20
18521: PUSH
18522: LD_VAR 0 2
18526: ST_TO_ADDR
// uc_nation = nation ;
18527: LD_ADDR_OWVAR 21
18531: PUSH
18532: LD_VAR 0 5
18536: ST_TO_ADDR
// vc_engine = vehengine ;
18537: LD_ADDR_OWVAR 39
18541: PUSH
18542: LD_VAR 0 6
18546: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18547: LD_ADDR_OWVAR 38
18551: PUSH
18552: LD_VAR 0 7
18556: PUSH
18557: LD_INT 1
18559: PPUSH
18560: LD_VAR 0 7
18564: PPUSH
18565: CALL_OW 12
18569: ARRAY
18570: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18571: LD_ADDR_OWVAR 40
18575: PUSH
18576: LD_VAR 0 8
18580: PUSH
18581: LD_INT 1
18583: PPUSH
18584: LD_VAR 0 8
18588: PPUSH
18589: CALL_OW 12
18593: ARRAY
18594: ST_TO_ADDR
// for j = 1 to RuWeapons do
18595: LD_ADDR_VAR 0 14
18599: PUSH
18600: DOUBLE
18601: LD_INT 1
18603: DEC
18604: ST_TO_ADDR
18605: LD_VAR 0 8
18609: PUSH
18610: FOR_TO
18611: IFFALSE 18813
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18613: LD_VAR 0 8
18617: PUSH
18618: LD_VAR 0 14
18622: ARRAY
18623: PUSH
18624: LD_INT 42
18626: EQUAL
18627: PUSH
18628: LD_VAR 0 8
18632: PUSH
18633: LD_VAR 0 14
18637: ARRAY
18638: PUSH
18639: LD_INT 43
18641: EQUAL
18642: OR
18643: PUSH
18644: LD_VAR 0 8
18648: PUSH
18649: LD_VAR 0 14
18653: ARRAY
18654: PUSH
18655: LD_INT 44
18657: EQUAL
18658: OR
18659: PUSH
18660: LD_VAR 0 8
18664: PUSH
18665: LD_VAR 0 14
18669: ARRAY
18670: PUSH
18671: LD_INT 45
18673: EQUAL
18674: OR
18675: PUSH
18676: LD_VAR 0 8
18680: PUSH
18681: LD_VAR 0 14
18685: ARRAY
18686: PUSH
18687: LD_INT 49
18689: EQUAL
18690: OR
18691: IFFALSE 18740
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18693: LD_ADDR_VAR 0 17
18697: PUSH
18698: LD_INT 21
18700: PUSH
18701: LD_INT 22
18703: PUSH
18704: LD_INT 23
18706: PUSH
18707: LD_INT 24
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18716: LD_ADDR_OWVAR 37
18720: PUSH
18721: LD_VAR 0 17
18725: PUSH
18726: LD_INT 1
18728: PPUSH
18729: LD_VAR 0 17
18733: PPUSH
18734: CALL_OW 12
18738: ARRAY
18739: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18740: LD_VAR 0 8
18744: PUSH
18745: LD_VAR 0 14
18749: ARRAY
18750: PUSH
18751: LD_INT 46
18753: EQUAL
18754: PUSH
18755: LD_VAR 0 8
18759: PUSH
18760: LD_VAR 0 14
18764: ARRAY
18765: PUSH
18766: LD_INT 47
18768: EQUAL
18769: OR
18770: IFFALSE 18811
// begin ruChassisTab = [ 23 , 24 ] ;
18772: LD_ADDR_VAR 0 17
18776: PUSH
18777: LD_INT 23
18779: PUSH
18780: LD_INT 24
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18787: LD_ADDR_OWVAR 37
18791: PUSH
18792: LD_VAR 0 17
18796: PUSH
18797: LD_INT 1
18799: PPUSH
18800: LD_VAR 0 17
18804: PPUSH
18805: CALL_OW 12
18809: ARRAY
18810: ST_TO_ADDR
// end ; end ;
18811: GO 18610
18813: POP
18814: POP
// veh = CreateVehicle ;
18815: LD_ADDR_VAR 0 16
18819: PUSH
18820: CALL_OW 45
18824: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18825: LD_VAR 0 16
18829: PPUSH
18830: LD_VAR 0 1
18834: PPUSH
18835: LD_INT 0
18837: PPUSH
18838: CALL_OW 49
// if vc_control = 1 then
18842: LD_OWVAR 38
18846: PUSH
18847: LD_INT 1
18849: EQUAL
18850: IFFALSE 18907
// begin hc_gallery =  ;
18852: LD_ADDR_OWVAR 33
18856: PUSH
18857: LD_STRING 
18859: ST_TO_ADDR
// hc_name =  ;
18860: LD_ADDR_OWVAR 26
18864: PUSH
18865: LD_STRING 
18867: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18868: LD_INT 0
18870: PPUSH
18871: LD_INT 3
18873: PPUSH
18874: LD_VAR 0 4
18878: PPUSH
18879: CALL_OW 380
// un = CreateHuman ;
18883: LD_ADDR_VAR 0 15
18887: PUSH
18888: CALL_OW 44
18892: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18893: LD_VAR 0 15
18897: PPUSH
18898: LD_VAR 0 16
18902: PPUSH
18903: CALL_OW 52
// end ; i = i + 1 ;
18907: LD_ADDR_VAR 0 13
18911: PUSH
18912: LD_VAR 0 13
18916: PUSH
18917: LD_INT 1
18919: PLUS
18920: ST_TO_ADDR
// end ; until i = vehCount ;
18921: LD_VAR 0 13
18925: PUSH
18926: LD_VAR 0 3
18930: EQUAL
18931: IFFALSE 17557
// repeat wait ( 0 0$1 ) ;
18933: LD_INT 35
18935: PPUSH
18936: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18940: LD_ADDR_VAR 0 20
18944: PUSH
18945: LD_INT 22
18947: PUSH
18948: LD_VAR 0 2
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 21
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 24
18969: PUSH
18970: LD_INT 650
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: ST_TO_ADDR
// if vehicleOK_list > 0 then
18987: LD_VAR 0 20
18991: PUSH
18992: LD_INT 0
18994: GREATER
18995: IFFALSE 19186
// begin for i in vehicleOK_list do
18997: LD_ADDR_VAR 0 13
19001: PUSH
19002: LD_VAR 0 20
19006: PUSH
19007: FOR_IN
19008: IFFALSE 19184
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19010: LD_ADDR_VAR 0 21
19014: PUSH
19015: LD_INT 22
19017: PUSH
19018: LD_VAR 0 11
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 69
19031: PPUSH
19032: LD_VAR 0 13
19036: PPUSH
19037: CALL_OW 74
19041: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19042: LD_ADDR_VAR 0 22
19046: PUSH
19047: LD_INT 22
19049: PUSH
19050: LD_VAR 0 11
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 59
19064: PUSH
19065: EMPTY
19066: LIST
19067: PUSH
19068: LD_INT 21
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 21
19080: PUSH
19081: LD_INT 2
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: EMPTY
19099: LIST
19100: PPUSH
19101: CALL_OW 69
19105: PPUSH
19106: LD_VAR 0 13
19110: PPUSH
19111: CALL_OW 74
19115: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19116: LD_VAR 0 13
19120: PPUSH
19121: LD_VAR 0 21
19125: PPUSH
19126: CALL_OW 296
19130: PUSH
19131: LD_INT 8
19133: PLUS
19134: PUSH
19135: LD_VAR 0 13
19139: PPUSH
19140: LD_VAR 0 22
19144: PPUSH
19145: CALL_OW 296
19149: LESS
19150: IFFALSE 19168
// begin ComAttackUnit ( i , target1 ) ;
19152: LD_VAR 0 13
19156: PPUSH
19157: LD_VAR 0 21
19161: PPUSH
19162: CALL_OW 115
// end else
19166: GO 19182
// begin ComAttackUnit ( i , target2 ) ;
19168: LD_VAR 0 13
19172: PPUSH
19173: LD_VAR 0 22
19177: PPUSH
19178: CALL_OW 115
// end ; end ;
19182: GO 19007
19184: POP
19185: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
19186: LD_INT 22
19188: PUSH
19189: LD_VAR 0 2
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 21
19200: PUSH
19201: LD_INT 2
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: PUSH
19217: LD_INT 0
19219: EQUAL
19220: IFFALSE 18933
// end ;
19222: LD_VAR 0 12
19226: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
19227: LD_INT 0
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
19238: PPUSH
19239: PPUSH
// for i = 1 to soldierCount do
19240: LD_ADDR_VAR 0 13
19244: PUSH
19245: DOUBLE
19246: LD_INT 1
19248: DEC
19249: ST_TO_ADDR
19250: LD_VAR 0 3
19254: PUSH
19255: FOR_TO
19256: IFFALSE 19338
// begin uc_side = side ;
19258: LD_ADDR_OWVAR 20
19262: PUSH
19263: LD_VAR 0 1
19267: ST_TO_ADDR
// uc_nation = nation ;
19268: LD_ADDR_OWVAR 21
19272: PUSH
19273: LD_VAR 0 2
19277: ST_TO_ADDR
// hc_name =  ;
19278: LD_ADDR_OWVAR 26
19282: PUSH
19283: LD_STRING 
19285: ST_TO_ADDR
// hc_gallery =  ;
19286: LD_ADDR_OWVAR 33
19290: PUSH
19291: LD_STRING 
19293: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
19294: LD_INT 0
19296: PPUSH
19297: LD_INT 1
19299: PPUSH
19300: LD_VAR 0 8
19304: PPUSH
19305: CALL_OW 380
// un = CreateHuman ;
19309: LD_ADDR_VAR 0 15
19313: PUSH
19314: CALL_OW 44
19318: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19319: LD_VAR 0 15
19323: PPUSH
19324: LD_VAR 0 9
19328: PPUSH
19329: LD_INT 0
19331: PPUSH
19332: CALL_OW 49
// end ;
19336: GO 19255
19338: POP
19339: POP
// for i = 1 to sniperCount do
19340: LD_ADDR_VAR 0 13
19344: PUSH
19345: DOUBLE
19346: LD_INT 1
19348: DEC
19349: ST_TO_ADDR
19350: LD_VAR 0 4
19354: PUSH
19355: FOR_TO
19356: IFFALSE 19438
// begin uc_side = side ;
19358: LD_ADDR_OWVAR 20
19362: PUSH
19363: LD_VAR 0 1
19367: ST_TO_ADDR
// uc_nation = nation ;
19368: LD_ADDR_OWVAR 21
19372: PUSH
19373: LD_VAR 0 2
19377: ST_TO_ADDR
// hc_name =  ;
19378: LD_ADDR_OWVAR 26
19382: PUSH
19383: LD_STRING 
19385: ST_TO_ADDR
// hc_gallery =  ;
19386: LD_ADDR_OWVAR 33
19390: PUSH
19391: LD_STRING 
19393: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19394: LD_INT 0
19396: PPUSH
19397: LD_INT 5
19399: PPUSH
19400: LD_VAR 0 8
19404: PPUSH
19405: CALL_OW 380
// un = CreateHuman ;
19409: LD_ADDR_VAR 0 15
19413: PUSH
19414: CALL_OW 44
19418: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19419: LD_VAR 0 15
19423: PPUSH
19424: LD_VAR 0 9
19428: PPUSH
19429: LD_INT 0
19431: PPUSH
19432: CALL_OW 49
// end ;
19436: GO 19355
19438: POP
19439: POP
// for i = 1 to bazookCount do
19440: LD_ADDR_VAR 0 13
19444: PUSH
19445: DOUBLE
19446: LD_INT 1
19448: DEC
19449: ST_TO_ADDR
19450: LD_VAR 0 5
19454: PUSH
19455: FOR_TO
19456: IFFALSE 19538
// begin uc_side = side ;
19458: LD_ADDR_OWVAR 20
19462: PUSH
19463: LD_VAR 0 1
19467: ST_TO_ADDR
// uc_nation = nation ;
19468: LD_ADDR_OWVAR 21
19472: PUSH
19473: LD_VAR 0 2
19477: ST_TO_ADDR
// hc_name =  ;
19478: LD_ADDR_OWVAR 26
19482: PUSH
19483: LD_STRING 
19485: ST_TO_ADDR
// hc_gallery =  ;
19486: LD_ADDR_OWVAR 33
19490: PUSH
19491: LD_STRING 
19493: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19494: LD_INT 0
19496: PPUSH
19497: LD_INT 9
19499: PPUSH
19500: LD_VAR 0 8
19504: PPUSH
19505: CALL_OW 380
// un = CreateHuman ;
19509: LD_ADDR_VAR 0 15
19513: PUSH
19514: CALL_OW 44
19518: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19519: LD_VAR 0 15
19523: PPUSH
19524: LD_VAR 0 9
19528: PPUSH
19529: LD_INT 0
19531: PPUSH
19532: CALL_OW 49
// end ;
19536: GO 19455
19538: POP
19539: POP
// for i = 1 to mortalCount do
19540: LD_ADDR_VAR 0 13
19544: PUSH
19545: DOUBLE
19546: LD_INT 1
19548: DEC
19549: ST_TO_ADDR
19550: LD_VAR 0 6
19554: PUSH
19555: FOR_TO
19556: IFFALSE 19638
// begin uc_side = side ;
19558: LD_ADDR_OWVAR 20
19562: PUSH
19563: LD_VAR 0 1
19567: ST_TO_ADDR
// uc_nation = nation ;
19568: LD_ADDR_OWVAR 21
19572: PUSH
19573: LD_VAR 0 2
19577: ST_TO_ADDR
// hc_name =  ;
19578: LD_ADDR_OWVAR 26
19582: PUSH
19583: LD_STRING 
19585: ST_TO_ADDR
// hc_gallery =  ;
19586: LD_ADDR_OWVAR 33
19590: PUSH
19591: LD_STRING 
19593: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19594: LD_INT 0
19596: PPUSH
19597: LD_INT 8
19599: PPUSH
19600: LD_VAR 0 8
19604: PPUSH
19605: CALL_OW 380
// un = CreateHuman ;
19609: LD_ADDR_VAR 0 15
19613: PUSH
19614: CALL_OW 44
19618: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19619: LD_VAR 0 15
19623: PPUSH
19624: LD_VAR 0 9
19628: PPUSH
19629: LD_INT 0
19631: PPUSH
19632: CALL_OW 49
// end ;
19636: GO 19555
19638: POP
19639: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19640: LD_ADDR_VAR 0 18
19644: PUSH
19645: LD_INT 22
19647: PUSH
19648: LD_VAR 0 1
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: LD_INT 25
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 25
19672: PUSH
19673: LD_INT 5
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 25
19682: PUSH
19683: LD_INT 8
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 25
19692: PUSH
19693: LD_INT 9
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PPUSH
19711: CALL_OW 69
19715: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19716: LD_ADDR_VAR 0 17
19720: PUSH
19721: LD_INT 22
19723: PUSH
19724: LD_VAR 0 1
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 25
19735: PUSH
19736: LD_INT 4
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL_OW 69
19751: ST_TO_ADDR
// for i in medic_list do
19752: LD_ADDR_VAR 0 13
19756: PUSH
19757: LD_VAR 0 17
19761: PUSH
19762: FOR_IN
19763: IFFALSE 19781
// ComMoveToArea ( i , healArea ) ;
19765: LD_VAR 0 13
19769: PPUSH
19770: LD_VAR 0 10
19774: PPUSH
19775: CALL_OW 113
19779: GO 19762
19781: POP
19782: POP
// repeat wait ( 0 0$1 ) ;
19783: LD_INT 35
19785: PPUSH
19786: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19790: LD_ADDR_VAR 0 16
19794: PUSH
19795: LD_INT 22
19797: PUSH
19798: LD_VAR 0 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: LD_INT 3
19812: PUSH
19813: LD_INT 24
19815: PUSH
19816: LD_INT 550
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 24
19829: PUSH
19830: LD_INT 250
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PPUSH
19846: CALL_OW 69
19850: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19851: LD_ADDR_VAR 0 18
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_VAR 0 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: LD_INT 25
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 25
19883: PUSH
19884: LD_INT 5
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 25
19893: PUSH
19894: LD_INT 8
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 25
19903: PUSH
19904: LD_INT 9
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 24
19920: PUSH
19921: LD_INT 1000
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: LIST
19932: PPUSH
19933: CALL_OW 69
19937: ST_TO_ADDR
// if medicCount > 0 then
19938: LD_VAR 0 7
19942: PUSH
19943: LD_INT 0
19945: GREATER
19946: IFFALSE 20020
// begin if damageUnit_list > 0 then
19948: LD_VAR 0 16
19952: PUSH
19953: LD_INT 0
19955: GREATER
19956: IFFALSE 20020
// begin for i in damageUnit_list do
19958: LD_ADDR_VAR 0 13
19962: PUSH
19963: LD_VAR 0 16
19967: PUSH
19968: FOR_IN
19969: IFFALSE 20018
// begin ComMoveToArea ( i , healArea ) ;
19971: LD_VAR 0 13
19975: PPUSH
19976: LD_VAR 0 10
19980: PPUSH
19981: CALL_OW 113
// for j in medic_list do
19985: LD_ADDR_VAR 0 14
19989: PUSH
19990: LD_VAR 0 17
19994: PUSH
19995: FOR_IN
19996: IFFALSE 20014
// AddComHeal ( j , i ) ;
19998: LD_VAR 0 14
20002: PPUSH
20003: LD_VAR 0 13
20007: PPUSH
20008: CALL_OW 188
20012: GO 19995
20014: POP
20015: POP
// end ;
20016: GO 19968
20018: POP
20019: POP
// end ; end ; for i in soldiersOK_list do
20020: LD_ADDR_VAR 0 13
20024: PUSH
20025: LD_VAR 0 18
20029: PUSH
20030: FOR_IN
20031: IFFALSE 20207
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20033: LD_ADDR_VAR 0 21
20037: PUSH
20038: LD_INT 22
20040: PUSH
20041: LD_VAR 0 11
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PPUSH
20050: CALL_OW 69
20054: PPUSH
20055: LD_VAR 0 13
20059: PPUSH
20060: CALL_OW 74
20064: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20065: LD_ADDR_VAR 0 22
20069: PUSH
20070: LD_INT 22
20072: PUSH
20073: LD_VAR 0 11
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 2
20084: PUSH
20085: LD_INT 59
20087: PUSH
20088: EMPTY
20089: LIST
20090: PUSH
20091: LD_INT 21
20093: PUSH
20094: LD_INT 1
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 21
20103: PUSH
20104: LD_INT 2
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: PPUSH
20124: CALL_OW 69
20128: PPUSH
20129: LD_VAR 0 13
20133: PPUSH
20134: CALL_OW 74
20138: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20139: LD_VAR 0 13
20143: PPUSH
20144: LD_VAR 0 21
20148: PPUSH
20149: CALL_OW 296
20153: PUSH
20154: LD_INT 8
20156: PLUS
20157: PUSH
20158: LD_VAR 0 13
20162: PPUSH
20163: LD_VAR 0 22
20167: PPUSH
20168: CALL_OW 296
20172: LESS
20173: IFFALSE 20191
// begin ComAttackUnit ( i , target1 ) ;
20175: LD_VAR 0 13
20179: PPUSH
20180: LD_VAR 0 21
20184: PPUSH
20185: CALL_OW 115
// end else
20189: GO 20205
// begin ComAttackUnit ( i , target2 ) ;
20191: LD_VAR 0 13
20195: PPUSH
20196: LD_VAR 0 22
20200: PPUSH
20201: CALL_OW 115
// end ; end ;
20205: GO 20030
20207: POP
20208: POP
// for i in soldiersOK_list do
20209: LD_ADDR_VAR 0 13
20213: PUSH
20214: LD_VAR 0 18
20218: PUSH
20219: FOR_IN
20220: IFFALSE 20396
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20222: LD_ADDR_VAR 0 21
20226: PUSH
20227: LD_INT 22
20229: PUSH
20230: LD_VAR 0 11
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PPUSH
20239: CALL_OW 69
20243: PPUSH
20244: LD_VAR 0 13
20248: PPUSH
20249: CALL_OW 74
20253: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20254: LD_ADDR_VAR 0 22
20258: PUSH
20259: LD_INT 22
20261: PUSH
20262: LD_VAR 0 11
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: LD_INT 59
20276: PUSH
20277: EMPTY
20278: LIST
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 21
20292: PUSH
20293: LD_INT 2
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: EMPTY
20311: LIST
20312: PPUSH
20313: CALL_OW 69
20317: PPUSH
20318: LD_VAR 0 13
20322: PPUSH
20323: CALL_OW 74
20327: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20328: LD_VAR 0 13
20332: PPUSH
20333: LD_VAR 0 21
20337: PPUSH
20338: CALL_OW 296
20342: PUSH
20343: LD_INT 8
20345: PLUS
20346: PUSH
20347: LD_VAR 0 13
20351: PPUSH
20352: LD_VAR 0 22
20356: PPUSH
20357: CALL_OW 296
20361: LESS
20362: IFFALSE 20380
// begin ComAttackUnit ( i , target1 ) ;
20364: LD_VAR 0 13
20368: PPUSH
20369: LD_VAR 0 21
20373: PPUSH
20374: CALL_OW 115
// end else
20378: GO 20394
// begin ComAttackUnit ( i , target2 ) ;
20380: LD_VAR 0 13
20384: PPUSH
20385: LD_VAR 0 22
20389: PPUSH
20390: CALL_OW 115
// end ; end ;
20394: GO 20219
20396: POP
20397: POP
// until soldiersOK_list = [ ] ;
20398: LD_VAR 0 18
20402: PUSH
20403: EMPTY
20404: EQUAL
20405: IFFALSE 19783
// end ;
20407: LD_VAR 0 12
20411: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20412: LD_INT 0
20414: PPUSH
20415: PPUSH
20416: PPUSH
20417: PPUSH
20418: PPUSH
20419: PPUSH
20420: PPUSH
// repeat wait ( 0 0$1 ) ;
20421: LD_INT 35
20423: PPUSH
20424: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20428: LD_ADDR_VAR 0 7
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 25
20445: PUSH
20446: LD_INT 4
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 3
20455: PUSH
20456: LD_INT 60
20458: PUSH
20459: EMPTY
20460: LIST
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: LIST
20470: PPUSH
20471: CALL_OW 69
20475: ST_TO_ADDR
// if not tmp then
20476: LD_VAR 0 7
20480: NOT
20481: IFFALSE 20485
// continue ;
20483: GO 20421
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: LD_INT 5
20492: PPUSH
20493: LD_INT 22
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 25
20505: PUSH
20506: LD_INT 12
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PPUSH
20517: CALL_OW 70
20521: PUSH
20522: FOR_IN
20523: IFFALSE 20556
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20525: LD_VAR 0 7
20529: PPUSH
20530: LD_VAR 0 3
20534: PPUSH
20535: CALL_OW 250
20539: PPUSH
20540: LD_VAR 0 3
20544: PPUSH
20545: CALL_OW 251
20549: PPUSH
20550: CALL_OW 131
20554: GO 20522
20556: POP
20557: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20558: LD_INT 22
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 25
20570: PUSH
20571: LD_INT 4
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PPUSH
20582: CALL_OW 69
20586: PUSH
20587: LD_INT 0
20589: EQUAL
20590: PUSH
20591: LD_INT 5
20593: PPUSH
20594: LD_INT 22
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 25
20606: PUSH
20607: LD_INT 12
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PPUSH
20618: CALL_OW 70
20622: PUSH
20623: LD_INT 2
20625: LESS
20626: OR
20627: PUSH
20628: LD_OWVAR 1
20632: PUSH
20633: LD_INT 7000
20635: GREATEREQUAL
20636: OR
20637: IFFALSE 20421
// repeat wait ( 0 0$1 ) ;
20639: LD_INT 35
20641: PPUSH
20642: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20646: LD_ADDR_VAR 0 5
20650: PUSH
20651: LD_INT 22
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 5
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PPUSH
20675: CALL_OW 69
20679: ST_TO_ADDR
// until arm ;
20680: LD_VAR 0 5
20684: IFFALSE 20639
// wait ( 0 0$25 ) ;
20686: LD_INT 875
20688: PPUSH
20689: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20693: LD_ADDR_VAR 0 6
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: PUSH
20711: LD_INT 30
20713: PUSH
20714: LD_INT 0
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 30
20723: PUSH
20724: LD_INT 1
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PPUSH
20740: CALL_OW 69
20744: ST_TO_ADDR
// j := 0 ;
20745: LD_ADDR_VAR 0 3
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20753: LD_ADDR_VAR 0 2
20757: PUSH
20758: LD_INT 22
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 25
20770: PUSH
20771: LD_INT 12
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PPUSH
20782: CALL_OW 69
20786: PUSH
20787: FOR_IN
20788: IFFALSE 20875
// begin ComMoveXY ( i , 63 , 16 ) ;
20790: LD_VAR 0 2
20794: PPUSH
20795: LD_INT 63
20797: PPUSH
20798: LD_INT 16
20800: PPUSH
20801: CALL_OW 111
// j := j + 1 ;
20805: LD_ADDR_VAR 0 3
20809: PUSH
20810: LD_VAR 0 3
20814: PUSH
20815: LD_INT 1
20817: PLUS
20818: ST_TO_ADDR
// if j < 5 then
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 5
20826: LESS
20827: IFFALSE 20845
// b := arm [ 1 ] else
20829: LD_ADDR_VAR 0 4
20833: PUSH
20834: LD_VAR 0 5
20838: PUSH
20839: LD_INT 1
20841: ARRAY
20842: ST_TO_ADDR
20843: GO 20859
// b := dep [ 1 ] ;
20845: LD_ADDR_VAR 0 4
20849: PUSH
20850: LD_VAR 0 6
20854: PUSH
20855: LD_INT 1
20857: ARRAY
20858: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20859: LD_VAR 0 2
20863: PPUSH
20864: LD_VAR 0 4
20868: PPUSH
20869: CALL_OW 180
// end ;
20873: GO 20787
20875: POP
20876: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20877: LD_ADDR_VAR 0 2
20881: PUSH
20882: LD_INT 22
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 25
20894: PUSH
20895: LD_INT 4
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PPUSH
20906: CALL_OW 69
20910: PUSH
20911: FOR_IN
20912: IFFALSE 20958
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20914: LD_VAR 0 2
20918: PPUSH
20919: LD_INT 22
20921: PUSH
20922: LD_INT 2
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 30
20931: PUSH
20932: LD_INT 8
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PPUSH
20943: CALL_OW 69
20947: PUSH
20948: LD_INT 1
20950: ARRAY
20951: PPUSH
20952: CALL_OW 120
20956: GO 20911
20958: POP
20959: POP
// end ;
20960: LD_VAR 0 1
20964: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20965: LD_INT 0
20967: PPUSH
20968: PPUSH
20969: PPUSH
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
20974: PPUSH
20975: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20976: LD_INT 22
20978: PUSH
20979: LD_VAR 0 1
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 21
20990: PUSH
20991: LD_INT 2
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PPUSH
21002: CALL_OW 69
21006: PUSH
21007: LD_VAR 0 3
21011: LESSEQUAL
21012: IFFALSE 21156
// for i = 1 to vehCount do
21014: LD_ADDR_VAR 0 10
21018: PUSH
21019: DOUBLE
21020: LD_INT 1
21022: DEC
21023: ST_TO_ADDR
21024: LD_VAR 0 3
21028: PUSH
21029: FOR_TO
21030: IFFALSE 21154
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
21032: LD_ADDR_VAR 0 12
21036: PUSH
21037: LD_VAR 0 5
21041: PUSH
21042: LD_INT 1
21044: PPUSH
21045: LD_VAR 0 5
21049: PPUSH
21050: CALL_OW 12
21054: ARRAY
21055: ST_TO_ADDR
// if randWeapon = 46 then
21056: LD_VAR 0 12
21060: PUSH
21061: LD_INT 46
21063: EQUAL
21064: IFFALSE 21109
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
21066: LD_VAR 0 2
21070: PPUSH
21071: LD_INT 24
21073: PPUSH
21074: LD_VAR 0 6
21078: PPUSH
21079: LD_VAR 0 7
21083: PUSH
21084: LD_INT 1
21086: PPUSH
21087: LD_VAR 0 7
21091: PPUSH
21092: CALL_OW 12
21096: ARRAY
21097: PPUSH
21098: LD_VAR 0 12
21102: PPUSH
21103: CALL_OW 185
21107: GO 21152
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
21109: LD_VAR 0 2
21113: PPUSH
21114: LD_VAR 0 8
21118: PPUSH
21119: LD_VAR 0 6
21123: PPUSH
21124: LD_VAR 0 7
21128: PUSH
21129: LD_INT 1
21131: PPUSH
21132: LD_VAR 0 7
21136: PPUSH
21137: CALL_OW 12
21141: ARRAY
21142: PPUSH
21143: LD_VAR 0 12
21147: PPUSH
21148: CALL_OW 185
// end ;
21152: GO 21029
21154: POP
21155: POP
// repeat wait ( 0 0$1 ) ;
21156: LD_INT 35
21158: PPUSH
21159: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
21163: LD_INT 22
21165: PUSH
21166: LD_VAR 0 1
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 21
21177: PUSH
21178: LD_INT 2
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 24
21187: PUSH
21188: LD_INT 250
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: LIST
21199: PPUSH
21200: CALL_OW 69
21204: PUSH
21205: LD_VAR 0 3
21209: GREATEREQUAL
21210: IFFALSE 21156
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
21212: LD_INT 22
21214: PUSH
21215: LD_VAR 0 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 21
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 24
21236: PUSH
21237: LD_INT 250
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: PPUSH
21249: CALL_OW 69
21253: PUSH
21254: LD_VAR 0 3
21258: GREATEREQUAL
21259: IFFALSE 21602
// begin repeat begin wait ( 0 0$1 ) ;
21261: LD_INT 35
21263: PPUSH
21264: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
21268: LD_INT 22
21270: PUSH
21271: LD_VAR 0 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 21
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 24
21292: PUSH
21293: LD_INT 651
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: LIST
21304: PPUSH
21305: CALL_OW 69
21309: PUSH
21310: LD_INT 0
21312: GREATER
21313: IFFALSE 21541
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21315: LD_ADDR_VAR 0 10
21319: PUSH
21320: LD_INT 22
21322: PUSH
21323: LD_VAR 0 1
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 21
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 24
21344: PUSH
21345: LD_INT 651
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: PPUSH
21357: CALL_OW 69
21361: PUSH
21362: FOR_IN
21363: IFFALSE 21539
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21365: LD_ADDR_VAR 0 16
21369: PUSH
21370: LD_INT 22
21372: PUSH
21373: LD_VAR 0 4
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PPUSH
21382: CALL_OW 69
21386: PPUSH
21387: LD_VAR 0 10
21391: PPUSH
21392: CALL_OW 74
21396: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21397: LD_ADDR_VAR 0 17
21401: PUSH
21402: LD_INT 22
21404: PUSH
21405: LD_VAR 0 4
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 2
21416: PUSH
21417: LD_INT 59
21419: PUSH
21420: EMPTY
21421: LIST
21422: PUSH
21423: LD_INT 21
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 21
21435: PUSH
21436: LD_INT 2
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: EMPTY
21454: LIST
21455: PPUSH
21456: CALL_OW 69
21460: PPUSH
21461: LD_VAR 0 10
21465: PPUSH
21466: CALL_OW 74
21470: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21471: LD_VAR 0 10
21475: PPUSH
21476: LD_VAR 0 16
21480: PPUSH
21481: CALL_OW 296
21485: PUSH
21486: LD_INT 8
21488: PLUS
21489: PUSH
21490: LD_VAR 0 10
21494: PPUSH
21495: LD_VAR 0 17
21499: PPUSH
21500: CALL_OW 296
21504: LESS
21505: IFFALSE 21523
// begin ComAttackUnit ( i , target1 ) ;
21507: LD_VAR 0 10
21511: PPUSH
21512: LD_VAR 0 16
21516: PPUSH
21517: CALL_OW 115
// end else
21521: GO 21537
// begin ComAttackUnit ( i , target2 ) ;
21523: LD_VAR 0 10
21527: PPUSH
21528: LD_VAR 0 17
21532: PPUSH
21533: CALL_OW 115
// end ; end ;
21537: GO 21362
21539: POP
21540: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21541: LD_INT 22
21543: PUSH
21544: LD_VAR 0 1
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 21
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PPUSH
21567: CALL_OW 69
21571: PUSH
21572: LD_INT 0
21574: EQUAL
21575: PUSH
21576: LD_INT 22
21578: PUSH
21579: LD_VAR 0 4
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: PPUSH
21591: CALL_OW 69
21595: PUSH
21596: LD_INT 0
21598: EQUAL
21599: OR
21600: IFFALSE 21261
// end ; end ;
21602: LD_VAR 0 9
21606: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21607: LD_INT 0
21609: PPUSH
21610: PPUSH
21611: PPUSH
21612: PPUSH
// r := 100 ;
21613: LD_ADDR_VAR 0 5
21617: PUSH
21618: LD_INT 100
21620: ST_TO_ADDR
// x := 0 ;
21621: LD_ADDR_VAR 0 6
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// while ( x < n ) do
21629: LD_VAR 0 6
21633: PUSH
21634: LD_VAR 0 2
21638: LESS
21639: IFFALSE 21926
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21641: LD_ADDR_VAR 0 4
21645: PUSH
21646: DOUBLE
21647: LD_INT 1
21649: DEC
21650: ST_TO_ADDR
21651: LD_VAR 0 1
21655: PPUSH
21656: LD_INT 0
21658: PPUSH
21659: CALL_OW 517
21663: PUSH
21664: LD_INT 1
21666: ARRAY
21667: PUSH
21668: FOR_TO
21669: IFFALSE 21922
// begin if r > 50 then
21671: LD_VAR 0 5
21675: PUSH
21676: LD_INT 50
21678: GREATER
21679: IFFALSE 21898
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21681: LD_VAR 0 1
21685: PPUSH
21686: LD_INT 0
21688: PPUSH
21689: CALL_OW 517
21693: PUSH
21694: LD_INT 1
21696: ARRAY
21697: PUSH
21698: LD_VAR 0 4
21702: ARRAY
21703: PPUSH
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_INT 0
21711: PPUSH
21712: CALL_OW 517
21716: PUSH
21717: LD_INT 2
21719: ARRAY
21720: PUSH
21721: LD_VAR 0 4
21725: ARRAY
21726: PPUSH
21727: CALL_OW 458
21731: NOT
21732: IFFALSE 21882
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: LD_INT 0
21741: PPUSH
21742: CALL_OW 517
21746: PUSH
21747: LD_INT 1
21749: ARRAY
21750: PUSH
21751: LD_VAR 0 4
21755: ARRAY
21756: PPUSH
21757: LD_VAR 0 1
21761: PPUSH
21762: LD_INT 0
21764: PPUSH
21765: CALL_OW 517
21769: PUSH
21770: LD_INT 2
21772: ARRAY
21773: PUSH
21774: LD_VAR 0 4
21778: ARRAY
21779: PPUSH
21780: LD_INT 5
21782: PPUSH
21783: LD_INT 0
21785: PPUSH
21786: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21790: LD_ADDR_EXP 51
21794: PUSH
21795: LD_EXP 51
21799: PPUSH
21800: LD_INT 1
21802: PPUSH
21803: LD_VAR 0 1
21807: PPUSH
21808: LD_INT 0
21810: PPUSH
21811: CALL_OW 517
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: PUSH
21820: LD_VAR 0 4
21824: ARRAY
21825: PUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: LD_INT 0
21833: PPUSH
21834: CALL_OW 517
21838: PUSH
21839: LD_INT 2
21841: ARRAY
21842: PUSH
21843: LD_VAR 0 4
21847: ARRAY
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PPUSH
21853: CALL_OW 2
21857: ST_TO_ADDR
// r := 0 ;
21858: LD_ADDR_VAR 0 5
21862: PUSH
21863: LD_INT 0
21865: ST_TO_ADDR
// x := x + 1 ;
21866: LD_ADDR_VAR 0 6
21870: PUSH
21871: LD_VAR 0 6
21875: PUSH
21876: LD_INT 1
21878: PLUS
21879: ST_TO_ADDR
// end else
21880: GO 21896
// r := r + 35 ;
21882: LD_ADDR_VAR 0 5
21886: PUSH
21887: LD_VAR 0 5
21891: PUSH
21892: LD_INT 35
21894: PLUS
21895: ST_TO_ADDR
// end else
21896: GO 21920
// r := r + rand ( 10 , 25 ) ;
21898: LD_ADDR_VAR 0 5
21902: PUSH
21903: LD_VAR 0 5
21907: PUSH
21908: LD_INT 10
21910: PPUSH
21911: LD_INT 25
21913: PPUSH
21914: CALL_OW 12
21918: PLUS
21919: ST_TO_ADDR
// end ;
21920: GO 21668
21922: POP
21923: POP
21924: GO 21629
// end ; end_of_file
21926: LD_VAR 0 3
21930: RET
// every 0 0$1 trigger russianAI = 1 do
21931: LD_EXP 40
21935: PUSH
21936: LD_INT 1
21938: EQUAL
21939: IFFALSE 22158
21941: GO 21943
21943: DISABLE
// begin enable ;
21944: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21945: LD_INT 3
21947: PPUSH
21948: LD_EXP 31
21952: PPUSH
21953: CALL 16409 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21957: LD_INT 3
21959: PPUSH
21960: LD_EXP 43
21964: PPUSH
21965: CALL 16769 0 2
// if ruPossition = 1 then
21969: LD_EXP 42
21973: PUSH
21974: LD_INT 1
21976: EQUAL
21977: IFFALSE 22032
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21979: LD_INT 3
21981: PPUSH
21982: LD_INT 13
21984: PPUSH
21985: LD_INT 10
21987: PPUSH
21988: LD_INT 22
21990: PUSH
21991: LD_INT 3
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 21
22000: PUSH
22001: LD_INT 3
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 8
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: LIST
22022: PPUSH
22023: CALL_OW 69
22027: PPUSH
22028: CALL 16975 0 4
// if ruPossition = 2 then
22032: LD_EXP 42
22036: PUSH
22037: LD_INT 2
22039: EQUAL
22040: IFFALSE 22095
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22042: LD_INT 3
22044: PPUSH
22045: LD_INT 14
22047: PPUSH
22048: LD_INT 11
22050: PPUSH
22051: LD_INT 22
22053: PUSH
22054: LD_INT 3
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 21
22063: PUSH
22064: LD_INT 3
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_INT 8
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: LIST
22085: PPUSH
22086: CALL_OW 69
22090: PPUSH
22091: CALL 16975 0 4
// if ruPossition = 3 then
22095: LD_EXP 42
22099: PUSH
22100: LD_INT 3
22102: EQUAL
22103: IFFALSE 22158
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22105: LD_INT 3
22107: PPUSH
22108: LD_INT 15
22110: PPUSH
22111: LD_INT 12
22113: PPUSH
22114: LD_INT 22
22116: PUSH
22117: LD_INT 3
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 21
22126: PUSH
22127: LD_INT 3
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 30
22136: PUSH
22137: LD_INT 8
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: PPUSH
22149: CALL_OW 69
22153: PPUSH
22154: CALL 16975 0 4
// end ;
22158: END
// every 0 0$1 do
22159: GO 22161
22161: DISABLE
// begin enable ;
22162: ENABLE
// if ruPossition = 1 then
22163: LD_EXP 42
22167: PUSH
22168: LD_INT 1
22170: EQUAL
22171: IFFALSE 22183
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
22173: LD_INT 3
22175: PPUSH
22176: LD_INT 10
22178: PPUSH
22179: CALL 16046 0 2
// if ruPossition = 2 then
22183: LD_EXP 42
22187: PUSH
22188: LD_INT 2
22190: EQUAL
22191: IFFALSE 22203
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
22193: LD_INT 3
22195: PPUSH
22196: LD_INT 11
22198: PPUSH
22199: CALL 16046 0 2
// if ruPossition = 3 then
22203: LD_EXP 42
22207: PUSH
22208: LD_INT 3
22210: EQUAL
22211: IFFALSE 22223
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
22213: LD_INT 3
22215: PPUSH
22216: LD_INT 12
22218: PPUSH
22219: CALL 16046 0 2
// IntBazooka ( 3 , 1 ) ;
22223: LD_INT 3
22225: PPUSH
22226: LD_INT 1
22228: PPUSH
22229: CALL 14845 0 2
// IntBazooka ( 6 , 1 ) ;
22233: LD_INT 6
22235: PPUSH
22236: LD_INT 1
22238: PPUSH
22239: CALL 14845 0 2
// end ;
22243: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22244: LD_EXP 40
22248: PUSH
22249: LD_INT 1
22251: EQUAL
22252: PUSH
22253: LD_EXP 36
22257: PPUSH
22258: CALL_OW 302
22262: AND
22263: PUSH
22264: LD_EXP 36
22268: PPUSH
22269: CALL_OW 255
22273: PUSH
22274: LD_INT 3
22276: EQUAL
22277: AND
22278: PUSH
22279: LD_INT 22
22281: PUSH
22282: LD_INT 3
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 21
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 33
22301: PUSH
22302: LD_INT 3
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: LIST
22313: PPUSH
22314: CALL_OW 69
22318: PUSH
22319: LD_INT 0
22321: EQUAL
22322: AND
22323: IFFALSE 22531
22325: GO 22327
22327: DISABLE
// begin enable ;
22328: ENABLE
// if Difficulty = 1 then
22329: LD_OWVAR 67
22333: PUSH
22334: LD_INT 1
22336: EQUAL
22337: IFFALSE 22399
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22339: LD_INT 3
22341: PPUSH
22342: LD_EXP 36
22346: PPUSH
22347: LD_INT 5
22349: PPUSH
22350: LD_INT 8
22352: PPUSH
22353: CALL_OW 12
22357: PPUSH
22358: LD_INT 1
22360: PPUSH
22361: LD_INT 43
22363: PUSH
22364: LD_INT 44
22366: PUSH
22367: LD_INT 45
22369: PUSH
22370: LD_INT 46
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: PPUSH
22379: LD_INT 1
22381: PPUSH
22382: LD_INT 3
22384: PUSH
22385: LD_INT 3
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PPUSH
22392: LD_INT 22
22394: PPUSH
22395: CALL 20965 0 8
// if Difficulty = 2 then
22399: LD_OWVAR 67
22403: PUSH
22404: LD_INT 2
22406: EQUAL
22407: IFFALSE 22465
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22409: LD_INT 3
22411: PPUSH
22412: LD_EXP 36
22416: PPUSH
22417: LD_INT 6
22419: PPUSH
22420: LD_INT 8
22422: PPUSH
22423: CALL_OW 12
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: LD_INT 44
22433: PUSH
22434: LD_INT 45
22436: PUSH
22437: LD_INT 46
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: PPUSH
22445: LD_INT 1
22447: PPUSH
22448: LD_INT 3
22450: PUSH
22451: LD_INT 3
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PPUSH
22458: LD_INT 22
22460: PPUSH
22461: CALL 20965 0 8
// if Difficulty >= 3 then
22465: LD_OWVAR 67
22469: PUSH
22470: LD_INT 3
22472: GREATEREQUAL
22473: IFFALSE 22531
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22475: LD_INT 3
22477: PPUSH
22478: LD_EXP 36
22482: PPUSH
22483: LD_INT 7
22485: PPUSH
22486: LD_INT 8
22488: PPUSH
22489: CALL_OW 12
22493: PPUSH
22494: LD_INT 1
22496: PPUSH
22497: LD_INT 44
22499: PUSH
22500: LD_INT 45
22502: PUSH
22503: LD_INT 46
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: PPUSH
22511: LD_INT 1
22513: PPUSH
22514: LD_INT 3
22516: PUSH
22517: LD_INT 3
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PPUSH
22524: LD_INT 22
22526: PPUSH
22527: CALL 20965 0 8
// end ;
22531: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22532: LD_EXP 51
22536: PUSH
22537: LD_EXP 50
22541: AND
22542: IFFALSE 22663
22544: GO 22546
22546: DISABLE
22547: LD_INT 0
22549: PPUSH
// begin enable ;
22550: ENABLE
// for i in arabianMines do
22551: LD_ADDR_VAR 0 1
22555: PUSH
22556: LD_EXP 51
22560: PUSH
22561: FOR_IN
22562: IFFALSE 22661
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22564: LD_INT 22
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 92
22576: PUSH
22577: LD_VAR 0 1
22581: PUSH
22582: LD_INT 1
22584: ARRAY
22585: PUSH
22586: LD_VAR 0 1
22590: PUSH
22591: LD_INT 2
22593: ARRAY
22594: PUSH
22595: LD_INT 3
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PPUSH
22608: CALL_OW 69
22612: IFFALSE 22659
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22614: LD_VAR 0 1
22618: PUSH
22619: LD_INT 1
22621: ARRAY
22622: PPUSH
22623: LD_VAR 0 1
22627: PUSH
22628: LD_INT 2
22630: ARRAY
22631: PPUSH
22632: LD_INT 5
22634: PPUSH
22635: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22639: LD_ADDR_EXP 51
22643: PUSH
22644: LD_EXP 51
22648: PPUSH
22649: LD_VAR 0 1
22653: PPUSH
22654: CALL_OW 3
22658: ST_TO_ADDR
// end ; end ;
22659: GO 22561
22661: POP
22662: POP
// end ; end_of_file
22663: PPOPN 1
22665: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22666: LD_VAR 0 1
22670: PPUSH
22671: CALL_OW 255
22675: PUSH
22676: LD_INT 4
22678: EQUAL
22679: IFFALSE 22693
// SetBName ( building , epsilon ) ;
22681: LD_VAR 0 1
22685: PPUSH
22686: LD_STRING epsilon
22688: PPUSH
22689: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22693: LD_VAR 0 1
22697: PPUSH
22698: CALL_OW 255
22702: PUSH
22703: LD_INT 1
22705: EQUAL
22706: PUSH
22707: LD_VAR 0 1
22711: PPUSH
22712: CALL_OW 266
22716: PUSH
22717: LD_INT 0
22719: EQUAL
22720: AND
22721: IFFALSE 22735
// SetBName ( building , epsilon ) ;
22723: LD_VAR 0 1
22727: PPUSH
22728: LD_STRING epsilon
22730: PPUSH
22731: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22735: LD_VAR 0 1
22739: PPUSH
22740: CALL_OW 255
22744: PUSH
22745: LD_INT 3
22747: EQUAL
22748: PUSH
22749: LD_VAR 0 1
22753: PPUSH
22754: CALL_OW 266
22758: PUSH
22759: LD_INT 0
22761: EQUAL
22762: AND
22763: IFFALSE 22777
// SetBName ( building , chuikov ) ;
22765: LD_VAR 0 1
22769: PPUSH
22770: LD_STRING chuikov
22772: PPUSH
22773: CALL_OW 500
// if GetSide ( building ) = 2 then
22777: LD_VAR 0 1
22781: PPUSH
22782: CALL_OW 255
22786: PUSH
22787: LD_INT 2
22789: EQUAL
22790: IFFALSE 22846
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22792: LD_VAR 0 1
22796: PPUSH
22797: CALL_OW 266
22801: PUSH
22802: LD_INT 6
22804: EQUAL
22805: PUSH
22806: LD_VAR 0 1
22810: PPUSH
22811: CALL_OW 266
22815: PUSH
22816: LD_INT 9
22818: EQUAL
22819: OR
22820: IFFALSE 22846
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22822: LD_VAR 0 1
22826: PPUSH
22827: LD_INT 10
22829: PPUSH
22830: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22834: LD_VAR 0 1
22838: PPUSH
22839: LD_INT 11
22841: PPUSH
22842: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22846: LD_VAR 0 1
22850: PPUSH
22851: CALL_OW 255
22855: PUSH
22856: LD_INT 3
22858: EQUAL
22859: IFFALSE 22893
// begin ruDepotConstructed := true ;
22861: LD_ADDR_EXP 58
22865: PUSH
22866: LD_INT 1
22868: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 266
22878: PUSH
22879: LD_INT 2
22881: EQUAL
22882: IFFALSE 22893
// AddComUpgrade ( building ) ;
22884: LD_VAR 0 1
22888: PPUSH
22889: CALL_OW 206
// end ; end ;
22893: PPOPN 2
22895: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22896: LD_INT 0
22898: PPUSH
22899: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22900: LD_VAR 0 1
22904: PUSH
22905: LD_INT 22
22907: PUSH
22908: LD_INT 3
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 23
22917: PUSH
22918: LD_INT 3
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 21
22927: PUSH
22928: LD_INT 2
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: PPUSH
22940: CALL_OW 69
22944: IN
22945: PUSH
22946: LD_EXP 62
22950: NOT
22951: AND
22952: IFFALSE 22983
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22954: LD_ADDR_EXP 62
22958: PUSH
22959: LD_VAR 0 1
22963: PPUSH
22964: CALL_OW 250
22968: PUSH
22969: LD_VAR 0 1
22973: PPUSH
22974: CALL_OW 251
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: ST_TO_ADDR
// end ;
22983: PPOPN 3
22985: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22986: LD_VAR 0 2
22990: PPUSH
22991: CALL_OW 255
22995: PUSH
22996: LD_INT 3
22998: EQUAL
22999: PUSH
23000: LD_EXP 36
23004: PPUSH
23005: CALL_OW 255
23009: PUSH
23010: LD_INT 3
23012: EQUAL
23013: AND
23014: PUSH
23015: LD_EXP 36
23019: PPUSH
23020: CALL_OW 302
23024: AND
23025: IFFALSE 23041
// ComEnterUnit ( human , ruFab ) ;
23027: LD_VAR 0 2
23031: PPUSH
23032: LD_EXP 36
23036: PPUSH
23037: CALL_OW 120
// end ;
23041: PPOPN 2
23043: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
23044: LD_INT 0
23046: PPUSH
23047: PPUSH
23048: PPUSH
23049: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23050: LD_VAR 0 1
23054: PPUSH
23055: CALL_OW 255
23059: PUSH
23060: LD_INT 1
23062: EQUAL
23063: PUSH
23064: LD_EXP 66
23068: PUSH
23069: LD_INT 0
23071: EQUAL
23072: AND
23073: IFFALSE 23275
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL_OW 266
23084: PUSH
23085: LD_INT 26
23087: EQUAL
23088: PUSH
23089: LD_VAR 0 1
23093: PPUSH
23094: CALL_OW 266
23098: PUSH
23099: LD_INT 27
23101: EQUAL
23102: OR
23103: PUSH
23104: LD_VAR 0 1
23108: PPUSH
23109: CALL_OW 266
23113: PUSH
23114: LD_INT 28
23116: EQUAL
23117: OR
23118: IFFALSE 23275
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
23120: LD_INT 22
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: LD_INT 30
23135: PUSH
23136: LD_INT 7
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 30
23145: PUSH
23146: LD_INT 8
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PPUSH
23162: CALL_OW 69
23166: PUSH
23167: LD_INT 0
23169: GREATER
23170: IFFALSE 23275
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23172: LD_ADDR_VAR 0 2
23176: PUSH
23177: LD_INT 22
23179: PUSH
23180: LD_INT 1
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: LD_INT 30
23192: PUSH
23193: LD_INT 7
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 30
23202: PUSH
23203: LD_INT 8
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PPUSH
23219: CALL_OW 69
23223: PUSH
23224: FOR_IN
23225: IFFALSE 23273
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23227: LD_VAR 0 2
23231: PPUSH
23232: LD_INT 1
23234: PPUSH
23235: CALL_OW 268
23239: PUSH
23240: LD_INT 11
23242: EQUAL
23243: PUSH
23244: LD_VAR 0 2
23248: PPUSH
23249: LD_INT 2
23251: PPUSH
23252: CALL_OW 268
23256: PUSH
23257: LD_INT 11
23259: EQUAL
23260: OR
23261: IFFALSE 23271
// eventVar1 = 1 ;
23263: LD_ADDR_EXP 66
23267: PUSH
23268: LD_INT 1
23270: ST_TO_ADDR
23271: GO 23224
23273: POP
23274: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
23275: LD_VAR 0 1
23279: PPUSH
23280: CALL_OW 255
23284: PUSH
23285: LD_INT 3
23287: EQUAL
23288: IFFALSE 23768
// begin if GetBType ( building ) = b_depot then
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 266
23299: PUSH
23300: LD_INT 0
23302: EQUAL
23303: IFFALSE 23375
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23305: LD_VAR 0 1
23309: PPUSH
23310: CALL_OW 274
23314: PPUSH
23315: LD_INT 1
23317: PPUSH
23318: LD_INT 5000
23320: PPUSH
23321: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23325: LD_VAR 0 1
23329: PPUSH
23330: CALL_OW 274
23334: PPUSH
23335: LD_INT 2
23337: PPUSH
23338: LD_INT 300
23340: PPUSH
23341: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL_OW 274
23354: PPUSH
23355: LD_INT 3
23357: PPUSH
23358: LD_INT 100
23360: PPUSH
23361: CALL_OW 277
// ruDepot = building ;
23365: LD_ADDR_EXP 31
23369: PUSH
23370: LD_VAR 0 1
23374: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23375: LD_VAR 0 1
23379: PPUSH
23380: CALL_OW 266
23384: PUSH
23385: LD_INT 0
23387: EQUAL
23388: PUSH
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL_OW 266
23398: PUSH
23399: LD_INT 2
23401: EQUAL
23402: OR
23403: PUSH
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 266
23413: PUSH
23414: LD_INT 4
23416: EQUAL
23417: OR
23418: IFFALSE 23429
// ComUpgrade ( building ) ;
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 146
// if GetBType ( building ) = b_lab then
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL_OW 266
23438: PUSH
23439: LD_INT 6
23441: EQUAL
23442: IFFALSE 23645
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23444: LD_INT 22
23446: PUSH
23447: LD_INT 3
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 30
23456: PUSH
23457: LD_INT 8
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PPUSH
23468: CALL_OW 69
23472: PUSH
23473: LD_INT 0
23475: EQUAL
23476: IFFALSE 23514
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23478: LD_VAR 0 1
23482: PPUSH
23483: LD_INT 10
23485: PPUSH
23486: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_INT 12
23497: PPUSH
23498: CALL_OW 207
// ruLab1 = building ;
23502: LD_ADDR_EXP 32
23506: PUSH
23507: LD_VAR 0 1
23511: ST_TO_ADDR
// end else
23512: GO 23548
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23514: LD_VAR 0 1
23518: PPUSH
23519: LD_INT 11
23521: PPUSH
23522: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23526: LD_VAR 0 1
23530: PPUSH
23531: LD_INT 14
23533: PPUSH
23534: CALL_OW 207
// ruLab2 = building ;
23538: LD_ADDR_EXP 33
23542: PUSH
23543: LD_VAR 0 1
23547: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23548: LD_INT 3
23550: PPUSH
23551: LD_VAR 0 1
23555: PPUSH
23556: LD_INT 3
23558: PPUSH
23559: CALL 15961 0 3
// if ruDestroyedBuildings > 0 then
23563: LD_EXP 43
23567: PUSH
23568: LD_INT 0
23570: GREATER
23571: IFFALSE 23645
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23573: LD_ADDR_EXP 43
23577: PUSH
23578: LD_EXP 43
23582: PPUSH
23583: LD_INT 1
23585: PPUSH
23586: CALL_OW 3
23590: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23591: LD_ADDR_EXP 43
23595: PUSH
23596: LD_EXP 43
23600: PPUSH
23601: LD_INT 1
23603: PPUSH
23604: CALL_OW 3
23608: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23609: LD_ADDR_EXP 43
23613: PUSH
23614: LD_EXP 43
23618: PPUSH
23619: LD_INT 1
23621: PPUSH
23622: CALL_OW 3
23626: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23627: LD_ADDR_EXP 43
23631: PUSH
23632: LD_EXP 43
23636: PPUSH
23637: LD_INT 1
23639: PPUSH
23640: CALL_OW 3
23644: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL_OW 266
23654: PUSH
23655: LD_INT 32
23657: EQUAL
23658: IFFALSE 23695
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23660: LD_VAR 0 1
23664: PPUSH
23665: LD_INT 44
23667: PUSH
23668: LD_INT 45
23670: PUSH
23671: LD_INT 46
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: PPUSH
23682: LD_INT 3
23684: PPUSH
23685: CALL_OW 12
23689: ARRAY
23690: PPUSH
23691: CALL_OW 208
// if GetBType ( building ) = b_turret then
23695: LD_VAR 0 1
23699: PPUSH
23700: CALL_OW 266
23704: PUSH
23705: LD_INT 33
23707: EQUAL
23708: IFFALSE 23745
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23710: LD_VAR 0 1
23714: PPUSH
23715: LD_INT 44
23717: PUSH
23718: LD_INT 45
23720: PUSH
23721: LD_INT 46
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PPUSH
23732: LD_INT 3
23734: PPUSH
23735: CALL_OW 12
23739: ARRAY
23740: PPUSH
23741: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 266
23754: PUSH
23755: LD_INT 24
23757: EQUAL
23758: IFFALSE 23768
// russianAI = 1 ;
23760: LD_ADDR_EXP 40
23764: PUSH
23765: LD_INT 1
23767: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23768: LD_VAR 0 1
23772: PPUSH
23773: CALL_OW 255
23777: PUSH
23778: LD_INT 2
23780: EQUAL
23781: IFFALSE 24660
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23783: LD_VAR 0 1
23787: PPUSH
23788: CALL_OW 266
23792: PUSH
23793: LD_EXP 69
23797: PUSH
23798: LD_INT 1
23800: ARRAY
23801: PUSH
23802: LD_INT 1
23804: ARRAY
23805: EQUAL
23806: IFFALSE 23933
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23808: LD_ADDR_EXP 69
23812: PUSH
23813: LD_EXP 69
23817: PPUSH
23818: LD_INT 1
23820: PPUSH
23821: CALL_OW 3
23825: ST_TO_ADDR
// if arBuildingsTab then
23826: LD_EXP 69
23830: IFFALSE 23933
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23832: LD_ADDR_VAR 0 3
23836: PUSH
23837: LD_INT 22
23839: PUSH
23840: LD_INT 2
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 25
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PPUSH
23861: CALL_OW 69
23865: ST_TO_ADDR
// if engineers then
23866: LD_VAR 0 3
23870: IFFALSE 23933
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23872: LD_VAR 0 3
23876: PPUSH
23877: LD_EXP 69
23881: PUSH
23882: LD_INT 1
23884: ARRAY
23885: PUSH
23886: LD_INT 1
23888: ARRAY
23889: PPUSH
23890: LD_EXP 69
23894: PUSH
23895: LD_INT 1
23897: ARRAY
23898: PUSH
23899: LD_INT 2
23901: ARRAY
23902: PPUSH
23903: LD_EXP 69
23907: PUSH
23908: LD_INT 1
23910: ARRAY
23911: PUSH
23912: LD_INT 3
23914: ARRAY
23915: PPUSH
23916: LD_EXP 69
23920: PUSH
23921: LD_INT 1
23923: ARRAY
23924: PUSH
23925: LD_INT 4
23927: ARRAY
23928: PPUSH
23929: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL_OW 266
23942: PUSH
23943: LD_INT 31
23945: EQUAL
23946: IFFALSE 24092
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23948: LD_ADDR_VAR 0 4
23952: PUSH
23953: LD_INT 22
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 2
23965: PUSH
23966: LD_INT 25
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 25
23978: PUSH
23979: LD_INT 8
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PPUSH
23995: CALL_OW 69
23999: PUSH
24000: LD_EXP 27
24004: DIFF
24005: ST_TO_ADDR
// if not sol then
24006: LD_VAR 0 4
24010: NOT
24011: IFFALSE 24015
// exit ;
24013: GO 24660
// for i in sol do
24015: LD_ADDR_VAR 0 2
24019: PUSH
24020: LD_VAR 0 4
24024: PUSH
24025: FOR_IN
24026: IFFALSE 24090
// if not GetTag ( i ) then
24028: LD_VAR 0 2
24032: PPUSH
24033: CALL_OW 110
24037: NOT
24038: IFFALSE 24088
// begin if IsInUnit ( i ) then
24040: LD_VAR 0 2
24044: PPUSH
24045: CALL_OW 310
24049: IFFALSE 24060
// ComExitBuilding ( i ) ;
24051: LD_VAR 0 2
24055: PPUSH
24056: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
24060: LD_VAR 0 2
24064: PPUSH
24065: LD_VAR 0 1
24069: PPUSH
24070: CALL_OW 180
// SetTag ( i , 11 ) ;
24074: LD_VAR 0 2
24078: PPUSH
24079: LD_INT 11
24081: PPUSH
24082: CALL_OW 109
// break ;
24086: GO 24090
// end ;
24088: GO 24025
24090: POP
24091: POP
// end ; if GetBType ( building ) = b_depot then
24092: LD_VAR 0 1
24096: PPUSH
24097: CALL_OW 266
24101: PUSH
24102: LD_INT 0
24104: EQUAL
24105: IFFALSE 24191
// begin arDepot = building ;
24107: LD_ADDR_EXP 44
24111: PUSH
24112: LD_VAR 0 1
24116: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
24117: LD_INT 38
24119: PUSH
24120: LD_INT 47
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PPUSH
24127: LD_INT 71
24129: PPUSH
24130: LD_INT 19
24132: PPUSH
24133: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 274
24146: PPUSH
24147: LD_INT 1
24149: PPUSH
24150: LD_INT 500
24152: PPUSH
24153: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
24157: LD_VAR 0 1
24161: PPUSH
24162: CALL_OW 274
24166: PPUSH
24167: LD_INT 3
24169: PPUSH
24170: LD_INT 30
24172: PPUSH
24173: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
24177: LD_EXP 27
24181: PPUSH
24182: LD_VAR 0 1
24186: PPUSH
24187: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
24191: LD_VAR 0 1
24195: PPUSH
24196: CALL_OW 266
24200: PUSH
24201: LD_INT 6
24203: EQUAL
24204: PUSH
24205: LD_VAR 0 1
24209: PPUSH
24210: CALL_OW 266
24214: PUSH
24215: LD_INT 9
24217: EQUAL
24218: OR
24219: IFFALSE 24270
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
24221: LD_VAR 0 1
24225: PPUSH
24226: LD_INT 10
24228: PPUSH
24229: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
24233: LD_VAR 0 1
24237: PPUSH
24238: LD_INT 11
24240: PPUSH
24241: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
24245: LD_INT 2
24247: PPUSH
24248: LD_VAR 0 1
24252: PPUSH
24253: LD_INT 2
24255: PPUSH
24256: CALL 15961 0 3
// arLab = building ;
24260: LD_ADDR_EXP 45
24264: PUSH
24265: LD_VAR 0 1
24269: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
24270: LD_VAR 0 1
24274: PPUSH
24275: CALL_OW 266
24279: PUSH
24280: LD_INT 2
24282: EQUAL
24283: PUSH
24284: LD_VAR 0 1
24288: PPUSH
24289: CALL_OW 266
24293: PUSH
24294: LD_INT 4
24296: EQUAL
24297: OR
24298: IFFALSE 24369
// begin ComUpgrade ( building ) ;
24300: LD_VAR 0 1
24304: PPUSH
24305: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24309: LD_VAR 0 1
24313: PPUSH
24314: CALL_OW 266
24318: PUSH
24319: LD_INT 4
24321: EQUAL
24322: IFFALSE 24369
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24324: LD_INT 22
24326: PUSH
24327: LD_INT 2
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 25
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PPUSH
24348: CALL_OW 69
24352: PUSH
24353: LD_EXP 27
24357: DIFF
24358: PPUSH
24359: LD_INT 75
24361: PPUSH
24362: LD_INT 21
24364: PPUSH
24365: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24369: LD_VAR 0 1
24373: PPUSH
24374: CALL_OW 266
24378: PUSH
24379: LD_INT 27
24381: EQUAL
24382: IFFALSE 24660
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24384: LD_INT 22
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 30
24396: PUSH
24397: LD_INT 27
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PPUSH
24408: CALL_OW 69
24412: PUSH
24413: LD_INT 2
24415: EQUAL
24416: IFFALSE 24660
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24418: LD_ADDR_VAR 0 2
24422: PUSH
24423: LD_INT 22
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 21
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 25
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: LIST
24457: PPUSH
24458: CALL_OW 69
24462: PUSH
24463: LD_INT 1
24465: ARRAY
24466: ST_TO_ADDR
// if not i then
24467: LD_VAR 0 2
24471: NOT
24472: IFFALSE 24476
// exit ;
24474: GO 24660
// AddComMoveXY ( i , 92 , 34 ) ;
24476: LD_VAR 0 2
24480: PPUSH
24481: LD_INT 92
24483: PPUSH
24484: LD_INT 34
24486: PPUSH
24487: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24491: LD_VAR 0 2
24495: PPUSH
24496: LD_INT 35
24498: PPUSH
24499: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24503: LD_VAR 0 2
24507: PPUSH
24508: LD_INT 101
24510: PPUSH
24511: LD_INT 20
24513: PPUSH
24514: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24518: LD_VAR 0 2
24522: PPUSH
24523: LD_INT 35
24525: PPUSH
24526: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24530: LD_VAR 0 2
24534: PPUSH
24535: LD_INT 115
24537: PPUSH
24538: LD_INT 30
24540: PPUSH
24541: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24545: LD_VAR 0 2
24549: PPUSH
24550: LD_INT 35
24552: PPUSH
24553: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24557: LD_VAR 0 2
24561: PPUSH
24562: LD_INT 82
24564: PPUSH
24565: LD_INT 57
24567: PPUSH
24568: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24572: LD_VAR 0 2
24576: PPUSH
24577: LD_INT 35
24579: PPUSH
24580: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24584: LD_VAR 0 2
24588: PPUSH
24589: LD_INT 36
24591: PPUSH
24592: LD_INT 28
24594: PPUSH
24595: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24599: LD_VAR 0 2
24603: PPUSH
24604: LD_INT 70
24606: PPUSH
24607: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24611: LD_INT 22
24613: PUSH
24614: LD_INT 2
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 21
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 25
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: PPUSH
24646: CALL_OW 69
24650: PPUSH
24651: LD_EXP 44
24655: PPUSH
24656: CALL_OW 180
// end ; end ; end ;
24660: PPOPN 5
24662: END
// on UpgradeComplete ( building ) do var i ;
24663: LD_INT 0
24665: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 255
24675: PUSH
24676: LD_INT 1
24678: EQUAL
24679: PUSH
24680: LD_EXP 66
24684: PUSH
24685: LD_INT 0
24687: EQUAL
24688: AND
24689: IFFALSE 24887
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24691: LD_VAR 0 1
24695: PPUSH
24696: CALL_OW 266
24700: PUSH
24701: LD_INT 7
24703: EQUAL
24704: PUSH
24705: LD_VAR 0 1
24709: PPUSH
24710: CALL_OW 266
24714: PUSH
24715: LD_INT 8
24717: EQUAL
24718: OR
24719: IFFALSE 24887
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24721: LD_INT 22
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 2
24733: PUSH
24734: LD_INT 30
24736: PUSH
24737: LD_INT 26
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 30
24746: PUSH
24747: LD_INT 27
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 30
24756: PUSH
24757: LD_INT 28
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PPUSH
24774: CALL_OW 69
24778: PUSH
24779: LD_INT 0
24781: GREATER
24782: IFFALSE 24887
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24784: LD_ADDR_VAR 0 2
24788: PUSH
24789: LD_INT 22
24791: PUSH
24792: LD_INT 1
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 2
24801: PUSH
24802: LD_INT 30
24804: PUSH
24805: LD_INT 7
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 30
24814: PUSH
24815: LD_INT 8
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PPUSH
24831: CALL_OW 69
24835: PUSH
24836: FOR_IN
24837: IFFALSE 24885
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24839: LD_VAR 0 2
24843: PPUSH
24844: LD_INT 1
24846: PPUSH
24847: CALL_OW 268
24851: PUSH
24852: LD_INT 11
24854: EQUAL
24855: PUSH
24856: LD_VAR 0 2
24860: PPUSH
24861: LD_INT 2
24863: PPUSH
24864: CALL_OW 268
24868: PUSH
24869: LD_INT 11
24871: EQUAL
24872: OR
24873: IFFALSE 24883
// eventVar1 = 1 ;
24875: LD_ADDR_EXP 66
24879: PUSH
24880: LD_INT 1
24882: ST_TO_ADDR
24883: GO 24836
24885: POP
24886: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24887: LD_VAR 0 1
24891: PPUSH
24892: CALL_OW 255
24896: PUSH
24897: LD_INT 2
24899: EQUAL
24900: IFFALSE 25005
// begin if GetBType ( building ) = b_barracks then
24902: LD_VAR 0 1
24906: PPUSH
24907: CALL_OW 266
24911: PUSH
24912: LD_INT 5
24914: EQUAL
24915: IFFALSE 25005
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24917: LD_ADDR_VAR 0 2
24921: PUSH
24922: LD_INT 22
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 25
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 3
24944: PUSH
24945: LD_INT 54
24947: PUSH
24948: EMPTY
24949: LIST
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: PPUSH
24960: CALL_OW 69
24964: PUSH
24965: LD_EXP 27
24969: PUSH
24970: EMPTY
24971: LIST
24972: DIFF
24973: PUSH
24974: FOR_IN
24975: IFFALSE 24993
// ComEnterUnit ( i , building ) ;
24977: LD_VAR 0 2
24981: PPUSH
24982: LD_VAR 0 1
24986: PPUSH
24987: CALL_OW 120
24991: GO 24974
24993: POP
24994: POP
// arArm = building ;
24995: LD_ADDR_EXP 46
24999: PUSH
25000: LD_VAR 0 1
25004: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
25005: LD_VAR 0 1
25009: PPUSH
25010: CALL_OW 255
25014: PUSH
25015: LD_INT 3
25017: EQUAL
25018: IFFALSE 25491
// begin if GetBType ( building ) = b_factory then
25020: LD_VAR 0 1
25024: PPUSH
25025: CALL_OW 266
25029: PUSH
25030: LD_INT 3
25032: EQUAL
25033: IFFALSE 25100
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
25035: LD_ADDR_VAR 0 2
25039: PUSH
25040: LD_INT 22
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 25
25052: PUSH
25053: LD_INT 3
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PPUSH
25064: CALL_OW 69
25068: PUSH
25069: FOR_IN
25070: IFFALSE 25088
// ComEnterUnit ( i , building ) ;
25072: LD_VAR 0 2
25076: PPUSH
25077: LD_VAR 0 1
25081: PPUSH
25082: CALL_OW 120
25086: GO 25069
25088: POP
25089: POP
// ruFab = building ;
25090: LD_ADDR_EXP 36
25094: PUSH
25095: LD_VAR 0 1
25099: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
25100: LD_INT 22
25102: PUSH
25103: LD_INT 3
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 21
25112: PUSH
25113: LD_INT 3
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 30
25122: PUSH
25123: LD_INT 8
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: PPUSH
25135: CALL_OW 69
25139: PUSH
25140: LD_INT 2
25142: EQUAL
25143: IFFALSE 25351
// begin for i = 1 to 2 do
25145: LD_ADDR_VAR 0 2
25149: PUSH
25150: DOUBLE
25151: LD_INT 1
25153: DEC
25154: ST_TO_ADDR
25155: LD_INT 2
25157: PUSH
25158: FOR_TO
25159: IFFALSE 25246
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
25161: LD_INT 22
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 25
25173: PUSH
25174: LD_INT 4
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PPUSH
25185: CALL_OW 69
25189: PUSH
25190: LD_VAR 0 2
25194: ARRAY
25195: PPUSH
25196: LD_INT 22
25198: PUSH
25199: LD_INT 3
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 21
25208: PUSH
25209: LD_INT 3
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 30
25218: PUSH
25219: LD_INT 8
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: PUSH
25236: LD_INT 1
25238: ARRAY
25239: PPUSH
25240: CALL_OW 120
25244: GO 25158
25246: POP
25247: POP
// for i = 3 to 4 do
25248: LD_ADDR_VAR 0 2
25252: PUSH
25253: DOUBLE
25254: LD_INT 3
25256: DEC
25257: ST_TO_ADDR
25258: LD_INT 4
25260: PUSH
25261: FOR_TO
25262: IFFALSE 25349
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
25264: LD_INT 22
25266: PUSH
25267: LD_INT 3
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 25
25276: PUSH
25277: LD_INT 4
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PPUSH
25288: CALL_OW 69
25292: PUSH
25293: LD_VAR 0 2
25297: ARRAY
25298: PPUSH
25299: LD_INT 22
25301: PUSH
25302: LD_INT 3
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 21
25311: PUSH
25312: LD_INT 3
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 30
25321: PUSH
25322: LD_INT 8
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: PPUSH
25334: CALL_OW 69
25338: PUSH
25339: LD_INT 2
25341: ARRAY
25342: PPUSH
25343: CALL_OW 120
25347: GO 25261
25349: POP
25350: POP
// end ; if GetBType ( building ) = b_barracks then
25351: LD_VAR 0 1
25355: PPUSH
25356: CALL_OW 266
25360: PUSH
25361: LD_INT 5
25363: EQUAL
25364: IFFALSE 25491
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25366: LD_ADDR_VAR 0 2
25370: PUSH
25371: LD_INT 22
25373: PUSH
25374: LD_INT 3
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 25
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 3
25393: PUSH
25394: LD_INT 54
25396: PUSH
25397: EMPTY
25398: LIST
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 69
25413: PUSH
25414: FOR_IN
25415: IFFALSE 25433
// ComEnterUnit ( i , building ) ;
25417: LD_VAR 0 2
25421: PPUSH
25422: LD_VAR 0 1
25426: PPUSH
25427: CALL_OW 120
25431: GO 25414
25433: POP
25434: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25435: LD_INT 22
25437: PUSH
25438: LD_INT 3
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 30
25447: PUSH
25448: LD_INT 5
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PPUSH
25459: CALL_OW 69
25463: PUSH
25464: LD_INT 0
25466: EQUAL
25467: IFFALSE 25481
// ruArm1 = building else
25469: LD_ADDR_EXP 34
25473: PUSH
25474: LD_VAR 0 1
25478: ST_TO_ADDR
25479: GO 25491
// ruArm2 = building ;
25481: LD_ADDR_EXP 35
25485: PUSH
25486: LD_VAR 0 1
25490: ST_TO_ADDR
// end ; end ; end ;
25491: PPOPN 2
25493: END
// on EnterBuilding ( building , human ) do var rnd ;
25494: LD_INT 0
25496: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25497: LD_VAR 0 2
25501: PPUSH
25502: CALL_OW 255
25506: PUSH
25507: LD_INT 2
25509: EQUAL
25510: PUSH
25511: LD_VAR 0 2
25515: PPUSH
25516: CALL_OW 257
25520: PUSH
25521: LD_INT 1
25523: EQUAL
25524: AND
25525: PUSH
25526: LD_VAR 0 1
25530: PUSH
25531: LD_EXP 46
25535: EQUAL
25536: AND
25537: IFFALSE 25584
// begin wait ( 0 0$1 ) ;
25539: LD_INT 35
25541: PPUSH
25542: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25546: LD_ADDR_VAR 0 3
25550: PUSH
25551: LD_INT 1
25553: PPUSH
25554: LD_INT 100
25556: PPUSH
25557: CALL_OW 12
25561: ST_TO_ADDR
// if rnd > 50 then
25562: LD_VAR 0 3
25566: PUSH
25567: LD_INT 50
25569: GREATER
25570: IFFALSE 25584
// SetClass ( human , class_mortar ) ;
25572: LD_VAR 0 2
25576: PPUSH
25577: LD_INT 8
25579: PPUSH
25580: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25584: LD_VAR 0 2
25588: PUSH
25589: LD_INT 22
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 25
25601: PUSH
25602: LD_INT 12
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PPUSH
25613: CALL_OW 69
25617: IN
25618: IFFALSE 25668
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25620: LD_VAR 0 1
25624: PPUSH
25625: CALL_OW 266
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: IN
25640: IFFALSE 25656
// SetClass ( human , class_apeman_engineer ) else
25642: LD_VAR 0 2
25646: PPUSH
25647: LD_INT 16
25649: PPUSH
25650: CALL_OW 336
25654: GO 25668
// SetClass ( human , class_apeman_soldier ) ;
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_INT 15
25663: PPUSH
25664: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25668: LD_VAR 0 2
25672: PPUSH
25673: CALL_OW 255
25677: PUSH
25678: LD_INT 3
25680: EQUAL
25681: PUSH
25682: LD_VAR 0 2
25686: PPUSH
25687: CALL_OW 257
25691: PUSH
25692: LD_INT 1
25694: EQUAL
25695: AND
25696: PUSH
25697: LD_VAR 0 1
25701: PUSH
25702: LD_EXP 34
25706: EQUAL
25707: PUSH
25708: LD_VAR 0 1
25712: PUSH
25713: LD_EXP 35
25717: EQUAL
25718: OR
25719: PUSH
25720: EMPTY
25721: LIST
25722: AND
25723: IFFALSE 25744
// begin wait ( 0 0$1 ) ;
25725: LD_INT 35
25727: PPUSH
25728: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25732: LD_VAR 0 2
25736: PPUSH
25737: LD_INT 9
25739: PPUSH
25740: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25744: LD_VAR 0 2
25748: PPUSH
25749: CALL_OW 255
25753: PUSH
25754: LD_INT 3
25756: EQUAL
25757: PUSH
25758: LD_VAR 0 2
25762: PPUSH
25763: CALL_OW 257
25767: PUSH
25768: LD_INT 9
25770: EQUAL
25771: AND
25772: PUSH
25773: LD_VAR 0 1
25777: PPUSH
25778: CALL_OW 266
25782: PUSH
25783: LD_INT 32
25785: EQUAL
25786: AND
25787: IFFALSE 25808
// begin wait ( 0 0$1 ) ;
25789: LD_INT 35
25791: PPUSH
25792: CALL_OW 67
// SetClass ( human , 1 ) ;
25796: LD_VAR 0 2
25800: PPUSH
25801: LD_INT 1
25803: PPUSH
25804: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25808: LD_VAR 0 2
25812: PPUSH
25813: CALL_OW 255
25817: PUSH
25818: LD_INT 3
25820: EQUAL
25821: PUSH
25822: LD_VAR 0 2
25826: PPUSH
25827: CALL_OW 257
25831: PUSH
25832: LD_INT 3
25834: EQUAL
25835: AND
25836: PUSH
25837: LD_VAR 0 1
25841: PUSH
25842: LD_EXP 36
25846: EQUAL
25847: AND
25848: IFFALSE 25862
// SetLives ( human , 1000 ) ;
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_INT 1000
25857: PPUSH
25858: CALL_OW 234
// end ;
25862: PPOPN 3
25864: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25865: LD_VAR 0 1
25869: PUSH
25870: LD_INT 1
25872: EQUAL
25873: PUSH
25874: LD_VAR 0 2
25878: PUSH
25879: LD_INT 2
25881: EQUAL
25882: AND
25883: PUSH
25884: LD_INT 1
25886: PPUSH
25887: LD_INT 2
25889: PPUSH
25890: CALL_OW 81
25894: PUSH
25895: LD_INT 1
25897: EQUAL
25898: AND
25899: IFFALSE 25920
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25901: LD_EXP 25
25905: PPUSH
25906: LD_STRING D6b-Pow-1
25908: PPUSH
25909: CALL_OW 94
// YouLost ( Powell ) ;
25913: LD_STRING Powell
25915: PPUSH
25916: CALL_OW 104
// end ; end ;
25920: PPOPN 2
25922: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25923: LD_INT 23
25925: PPUSH
25926: LD_INT 22
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 21
25938: PUSH
25939: LD_INT 3
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PPUSH
25950: CALL_OW 70
25954: PUSH
25955: LD_INT 23
25957: PPUSH
25958: LD_INT 22
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 21
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PPUSH
25982: CALL_OW 70
25986: OR
25987: PUSH
25988: LD_INT 1
25990: PPUSH
25991: LD_INT 2
25993: PPUSH
25994: CALL_OW 81
25998: PUSH
25999: LD_INT 1
26001: EQUAL
26002: AND
26003: IFFALSE 26136
26005: GO 26007
26007: DISABLE
// begin enable ;
26008: ENABLE
// wait ( 0 0$10 ) ;
26009: LD_INT 350
26011: PPUSH
26012: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26016: LD_INT 23
26018: PPUSH
26019: LD_INT 22
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 21
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 70
26047: PUSH
26048: LD_INT 23
26050: PPUSH
26051: LD_INT 22
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 21
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 70
26079: OR
26080: PUSH
26081: LD_INT 1
26083: PPUSH
26084: LD_INT 2
26086: PPUSH
26087: CALL_OW 81
26091: PUSH
26092: LD_INT 1
26094: EQUAL
26095: AND
26096: IFFALSE 26136
// begin disable ;
26098: DISABLE
// InGameOn ;
26099: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26103: LD_INT 73
26105: PPUSH
26106: LD_INT 18
26108: PPUSH
26109: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26113: LD_EXP 25
26117: PPUSH
26118: LD_STRING D6b-Pow-1
26120: PPUSH
26121: CALL_OW 94
// YouLost ( Powell ) ;
26125: LD_STRING Powell
26127: PPUSH
26128: CALL_OW 104
// InGameOff ;
26132: CALL_OW 9
// end ; end ;
26136: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
26137: LD_VAR 0 1
26141: PPUSH
26142: CALL 44505 0 1
// if unit = Truman then
26146: LD_VAR 0 1
26150: PUSH
26151: LD_EXP 20
26155: EQUAL
26156: IFFALSE 26165
// YouLost ( Powell ) ;
26158: LD_STRING Powell
26160: PPUSH
26161: CALL_OW 104
// if unit = JMM then
26165: LD_VAR 0 1
26169: PUSH
26170: LD_EXP 1
26174: EQUAL
26175: IFFALSE 26184
// YouLost ( JMM ) ;
26177: LD_STRING JMM
26179: PPUSH
26180: CALL_OW 104
// if unit = Khatam then
26184: LD_VAR 0 1
26188: PUSH
26189: LD_EXP 14
26193: EQUAL
26194: IFFALSE 26204
// KhatamStatus = 0 ;
26196: LD_ADDR_EXP 54
26200: PUSH
26201: LD_INT 0
26203: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
26204: LD_VAR 0 1
26208: PPUSH
26209: CALL_OW 255
26213: PUSH
26214: LD_INT 3
26216: EQUAL
26217: PUSH
26218: LD_VAR 0 1
26222: PPUSH
26223: CALL_OW 247
26227: PUSH
26228: LD_INT 3
26230: EQUAL
26231: AND
26232: IFFALSE 26924
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 266
26243: PUSH
26244: LD_INT 31
26246: EQUAL
26247: PUSH
26248: LD_VAR 0 1
26252: PPUSH
26253: CALL_OW 266
26257: PUSH
26258: LD_INT 32
26260: EQUAL
26261: OR
26262: PUSH
26263: LD_VAR 0 1
26267: PPUSH
26268: CALL_OW 266
26272: PUSH
26273: LD_INT 36
26275: EQUAL
26276: OR
26277: PUSH
26278: LD_VAR 0 1
26282: PPUSH
26283: CALL_OW 266
26287: PUSH
26288: LD_INT 0
26290: EQUAL
26291: OR
26292: PUSH
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 266
26302: PUSH
26303: LD_INT 24
26305: EQUAL
26306: OR
26307: PUSH
26308: LD_VAR 0 1
26312: PPUSH
26313: CALL_OW 266
26317: PUSH
26318: LD_INT 17
26320: EQUAL
26321: OR
26322: PUSH
26323: LD_VAR 0 1
26327: PPUSH
26328: CALL_OW 266
26332: PUSH
26333: LD_INT 25
26335: EQUAL
26336: OR
26337: PUSH
26338: LD_VAR 0 1
26342: PPUSH
26343: CALL_OW 266
26347: PUSH
26348: LD_INT 19
26350: EQUAL
26351: OR
26352: PUSH
26353: LD_VAR 0 1
26357: PPUSH
26358: CALL_OW 266
26362: PUSH
26363: LD_INT 20
26365: EQUAL
26366: OR
26367: PUSH
26368: LD_VAR 0 1
26372: PPUSH
26373: CALL_OW 266
26377: PUSH
26378: LD_INT 18
26380: EQUAL
26381: OR
26382: PUSH
26383: LD_VAR 0 1
26387: PPUSH
26388: CALL_OW 266
26392: PUSH
26393: LD_INT 21
26395: EQUAL
26396: OR
26397: PUSH
26398: LD_VAR 0 1
26402: PPUSH
26403: CALL_OW 266
26407: PUSH
26408: LD_INT 23
26410: EQUAL
26411: OR
26412: PUSH
26413: LD_VAR 0 1
26417: PPUSH
26418: CALL_OW 266
26422: PUSH
26423: LD_INT 16
26425: EQUAL
26426: OR
26427: PUSH
26428: LD_VAR 0 1
26432: PPUSH
26433: CALL_OW 266
26437: PUSH
26438: LD_INT 6
26440: EQUAL
26441: OR
26442: PUSH
26443: LD_VAR 0 1
26447: PPUSH
26448: CALL_OW 266
26452: PUSH
26453: LD_INT 29
26455: EQUAL
26456: OR
26457: PUSH
26458: LD_VAR 0 1
26462: PPUSH
26463: CALL_OW 266
26467: PUSH
26468: LD_INT 26
26470: EQUAL
26471: OR
26472: PUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: CALL_OW 266
26482: PUSH
26483: LD_INT 30
26485: EQUAL
26486: OR
26487: PUSH
26488: LD_VAR 0 1
26492: PPUSH
26493: CALL_OW 266
26497: PUSH
26498: LD_INT 28
26500: EQUAL
26501: OR
26502: PUSH
26503: LD_VAR 0 1
26507: PPUSH
26508: CALL_OW 266
26512: PUSH
26513: LD_INT 27
26515: EQUAL
26516: OR
26517: PUSH
26518: LD_VAR 0 1
26522: PPUSH
26523: CALL_OW 266
26527: PUSH
26528: LD_INT 33
26530: EQUAL
26531: OR
26532: PUSH
26533: LD_VAR 0 1
26537: PPUSH
26538: CALL_OW 266
26542: PUSH
26543: LD_INT 2
26545: EQUAL
26546: OR
26547: PUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL_OW 266
26557: PUSH
26558: LD_INT 4
26560: EQUAL
26561: OR
26562: IFFALSE 26648
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26564: LD_ADDR_EXP 43
26568: PUSH
26569: LD_EXP 43
26573: PUSH
26574: LD_VAR 0 1
26578: PPUSH
26579: CALL_OW 266
26583: ADD
26584: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26585: LD_ADDR_EXP 43
26589: PUSH
26590: LD_EXP 43
26594: PUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 250
26604: ADD
26605: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26606: LD_ADDR_EXP 43
26610: PUSH
26611: LD_EXP 43
26615: PUSH
26616: LD_VAR 0 1
26620: PPUSH
26621: CALL_OW 251
26625: ADD
26626: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26627: LD_ADDR_EXP 43
26631: PUSH
26632: LD_EXP 43
26636: PUSH
26637: LD_VAR 0 1
26641: PPUSH
26642: CALL_OW 254
26646: ADD
26647: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26648: LD_VAR 0 1
26652: PPUSH
26653: CALL_OW 266
26657: PUSH
26658: LD_INT 1
26660: EQUAL
26661: IFFALSE 26740
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26663: LD_ADDR_EXP 43
26667: PUSH
26668: LD_EXP 43
26672: PUSH
26673: LD_INT 0
26675: ADD
26676: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26677: LD_ADDR_EXP 43
26681: PUSH
26682: LD_EXP 43
26686: PUSH
26687: LD_VAR 0 1
26691: PPUSH
26692: CALL_OW 250
26696: ADD
26697: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26698: LD_ADDR_EXP 43
26702: PUSH
26703: LD_EXP 43
26707: PUSH
26708: LD_VAR 0 1
26712: PPUSH
26713: CALL_OW 251
26717: ADD
26718: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26719: LD_ADDR_EXP 43
26723: PUSH
26724: LD_EXP 43
26728: PUSH
26729: LD_VAR 0 1
26733: PPUSH
26734: CALL_OW 254
26738: ADD
26739: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26740: LD_VAR 0 1
26744: PPUSH
26745: CALL_OW 266
26749: PUSH
26750: LD_INT 3
26752: EQUAL
26753: IFFALSE 26832
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26755: LD_ADDR_EXP 43
26759: PUSH
26760: LD_EXP 43
26764: PUSH
26765: LD_INT 2
26767: ADD
26768: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26769: LD_ADDR_EXP 43
26773: PUSH
26774: LD_EXP 43
26778: PUSH
26779: LD_VAR 0 1
26783: PPUSH
26784: CALL_OW 250
26788: ADD
26789: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26790: LD_ADDR_EXP 43
26794: PUSH
26795: LD_EXP 43
26799: PUSH
26800: LD_VAR 0 1
26804: PPUSH
26805: CALL_OW 251
26809: ADD
26810: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26811: LD_ADDR_EXP 43
26815: PUSH
26816: LD_EXP 43
26820: PUSH
26821: LD_VAR 0 1
26825: PPUSH
26826: CALL_OW 254
26830: ADD
26831: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26832: LD_VAR 0 1
26836: PPUSH
26837: CALL_OW 266
26841: PUSH
26842: LD_INT 5
26844: EQUAL
26845: IFFALSE 26924
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26847: LD_ADDR_EXP 43
26851: PUSH
26852: LD_EXP 43
26856: PUSH
26857: LD_INT 4
26859: ADD
26860: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26861: LD_ADDR_EXP 43
26865: PUSH
26866: LD_EXP 43
26870: PUSH
26871: LD_VAR 0 1
26875: PPUSH
26876: CALL_OW 250
26880: ADD
26881: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26882: LD_ADDR_EXP 43
26886: PUSH
26887: LD_EXP 43
26891: PUSH
26892: LD_VAR 0 1
26896: PPUSH
26897: CALL_OW 251
26901: ADD
26902: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26903: LD_ADDR_EXP 43
26907: PUSH
26908: LD_EXP 43
26912: PUSH
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL_OW 254
26922: ADD
26923: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26924: LD_EXP 52
26928: PUSH
26929: LD_VAR 0 1
26933: PPUSH
26934: CALL_OW 257
26938: PUSH
26939: LD_INT 3
26941: EQUAL
26942: AND
26943: PUSH
26944: LD_VAR 0 1
26948: PPUSH
26949: CALL_OW 255
26953: PUSH
26954: LD_INT 3
26956: EQUAL
26957: AND
26958: PUSH
26959: LD_EXP 36
26963: PPUSH
26964: CALL_OW 302
26968: AND
26969: PUSH
26970: LD_EXP 36
26974: PPUSH
26975: CALL_OW 255
26979: PUSH
26980: LD_INT 3
26982: EQUAL
26983: AND
26984: IFFALSE 27068
// begin ruMech := ruMech - 1 ;
26986: LD_ADDR_EXP 52
26990: PUSH
26991: LD_EXP 52
26995: PUSH
26996: LD_INT 1
26998: MINUS
26999: ST_TO_ADDR
// uc_side = 3 ;
27000: LD_ADDR_OWVAR 20
27004: PUSH
27005: LD_INT 3
27007: ST_TO_ADDR
// uc_nation = 3 ;
27008: LD_ADDR_OWVAR 21
27012: PUSH
27013: LD_INT 3
27015: ST_TO_ADDR
// hc_gallery :=  ;
27016: LD_ADDR_OWVAR 33
27020: PUSH
27021: LD_STRING 
27023: ST_TO_ADDR
// hc_name :=  ;
27024: LD_ADDR_OWVAR 26
27028: PUSH
27029: LD_STRING 
27031: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
27032: LD_INT 0
27034: PPUSH
27035: LD_EXP 37
27039: PPUSH
27040: LD_EXP 38
27044: PPUSH
27045: CALL_OW 12
27049: PPUSH
27050: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
27054: CALL_OW 44
27058: PPUSH
27059: LD_EXP 36
27063: PPUSH
27064: CALL_OW 52
// end ; end ;
27068: PPOPN 1
27070: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
27071: LD_VAR 0 1
27075: PPUSH
27076: LD_VAR 0 2
27080: PPUSH
27081: CALL 44627 0 2
// end ;
27085: PPOPN 2
27087: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
27088: LD_ADDR_OWVAR 57
27092: PUSH
27093: LD_INT 0
27095: ST_TO_ADDR
// fastEnd = 1 ;
27096: LD_ADDR_EXP 64
27100: PUSH
27101: LD_INT 1
27103: ST_TO_ADDR
// FinishMission ;
27104: CALL 28272 0 0
// end ;
27108: PPOPN 1
27110: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL 44611 0 1
// end ; end_of_file
27120: PPOPN 1
27122: END
// export function CreateNature ; var i , un ; begin
27123: LD_INT 0
27125: PPUSH
27126: PPUSH
27127: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
27128: LD_ADDR_VAR 0 2
27132: PUSH
27133: DOUBLE
27134: LD_INT 1
27136: DEC
27137: ST_TO_ADDR
27138: LD_OWVAR 67
27142: PUSH
27143: LD_INT 1
27145: PPUSH
27146: LD_INT 5
27148: PPUSH
27149: CALL_OW 12
27153: PLUS
27154: PUSH
27155: FOR_TO
27156: IFFALSE 27301
// begin hc_sex = sex_male ;
27158: LD_ADDR_OWVAR 27
27162: PUSH
27163: LD_INT 1
27165: ST_TO_ADDR
// uc_side = 0 ;
27166: LD_ADDR_OWVAR 20
27170: PUSH
27171: LD_INT 0
27173: ST_TO_ADDR
// uc_nation = nation_nature ;
27174: LD_ADDR_OWVAR 21
27178: PUSH
27179: LD_INT 0
27181: ST_TO_ADDR
// hc_class = class_apeman ;
27182: LD_ADDR_OWVAR 28
27186: PUSH
27187: LD_INT 12
27189: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
27190: LD_ADDR_OWVAR 31
27194: PUSH
27195: LD_INT 2
27197: PPUSH
27198: LD_INT 7
27200: PPUSH
27201: CALL_OW 12
27205: PUSH
27206: LD_OWVAR 67
27210: PLUS
27211: PUSH
27212: LD_INT 2
27214: PPUSH
27215: LD_INT 10
27217: PPUSH
27218: CALL_OW 12
27222: PUSH
27223: LD_INT 2
27225: PPUSH
27226: LD_INT 10
27228: PPUSH
27229: CALL_OW 12
27233: PUSH
27234: LD_INT 2
27236: PPUSH
27237: LD_INT 10
27239: PPUSH
27240: CALL_OW 12
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27251: LD_ADDR_OWVAR 35
27255: PUSH
27256: LD_INT 5
27258: NEG
27259: PPUSH
27260: LD_INT 5
27262: PPUSH
27263: CALL_OW 12
27267: PUSH
27268: LD_OWVAR 67
27272: MUL
27273: ST_TO_ADDR
// un = CreateHuman ;
27274: LD_ADDR_VAR 0 3
27278: PUSH
27279: CALL_OW 44
27283: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
27284: LD_VAR 0 3
27288: PPUSH
27289: LD_INT 5
27291: PPUSH
27292: LD_INT 0
27294: PPUSH
27295: CALL_OW 49
// end ;
27299: GO 27155
27301: POP
27302: POP
// for i = 1 to Difficulty + 2 do
27303: LD_ADDR_VAR 0 2
27307: PUSH
27308: DOUBLE
27309: LD_INT 1
27311: DEC
27312: ST_TO_ADDR
27313: LD_OWVAR 67
27317: PUSH
27318: LD_INT 2
27320: PLUS
27321: PUSH
27322: FOR_TO
27323: IFFALSE 27432
// begin hc_sex = sex_male ;
27325: LD_ADDR_OWVAR 27
27329: PUSH
27330: LD_INT 1
27332: ST_TO_ADDR
// uc_side = 0 ;
27333: LD_ADDR_OWVAR 20
27337: PUSH
27338: LD_INT 0
27340: ST_TO_ADDR
// uc_nation = nation_nature ;
27341: LD_ADDR_OWVAR 21
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// hc_class = class_tiger ;
27349: LD_ADDR_OWVAR 28
27353: PUSH
27354: LD_INT 14
27356: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27357: LD_ADDR_OWVAR 31
27361: PUSH
27362: LD_EXP 38
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27382: LD_ADDR_OWVAR 35
27386: PUSH
27387: LD_INT 5
27389: NEG
27390: PPUSH
27391: LD_INT 5
27393: PPUSH
27394: CALL_OW 12
27398: PUSH
27399: LD_OWVAR 67
27403: MUL
27404: ST_TO_ADDR
// un = CreateHuman ;
27405: LD_ADDR_VAR 0 3
27409: PUSH
27410: CALL_OW 44
27414: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27415: LD_VAR 0 3
27419: PPUSH
27420: LD_INT 6
27422: PPUSH
27423: LD_INT 0
27425: PPUSH
27426: CALL_OW 49
// end ;
27430: GO 27322
27432: POP
27433: POP
// for i = 1 to rand ( 3 , 4 ) do
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: DOUBLE
27440: LD_INT 1
27442: DEC
27443: ST_TO_ADDR
27444: LD_INT 3
27446: PPUSH
27447: LD_INT 4
27449: PPUSH
27450: CALL_OW 12
27454: PUSH
27455: FOR_TO
27456: IFFALSE 27550
// begin hc_sex = sex_male ;
27458: LD_ADDR_OWVAR 27
27462: PUSH
27463: LD_INT 1
27465: ST_TO_ADDR
// uc_side = 0 ;
27466: LD_ADDR_OWVAR 20
27470: PUSH
27471: LD_INT 0
27473: ST_TO_ADDR
// uc_nation = nation_nature ;
27474: LD_ADDR_OWVAR 21
27478: PUSH
27479: LD_INT 0
27481: ST_TO_ADDR
// hc_class = 18 ;
27482: LD_ADDR_OWVAR 28
27486: PUSH
27487: LD_INT 18
27489: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27490: LD_ADDR_OWVAR 31
27494: PUSH
27495: LD_EXP 38
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: ST_TO_ADDR
// hc_agressivity = 0 ;
27515: LD_ADDR_OWVAR 35
27519: PUSH
27520: LD_INT 0
27522: ST_TO_ADDR
// un = CreateHuman ;
27523: LD_ADDR_VAR 0 3
27527: PUSH
27528: CALL_OW 44
27532: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27533: LD_VAR 0 3
27537: PPUSH
27538: LD_INT 6
27540: PPUSH
27541: LD_INT 0
27543: PPUSH
27544: CALL_OW 49
// end ;
27548: GO 27455
27550: POP
27551: POP
// end ; end_of_file
27552: LD_VAR 0 1
27556: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27557: LD_EXP 47
27561: PUSH
27562: LD_INT 1
27564: EQUAL
27565: IFFALSE 27653
27567: GO 27569
27569: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27570: LD_INT 7
27572: PPUSH
27573: LD_INT 5
27575: PPUSH
27576: LD_INT 4
27578: PUSH
27579: LD_INT 5
27581: PUSH
27582: LD_INT 6
27584: PUSH
27585: LD_INT 6
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: PUSH
27594: LD_OWVAR 67
27598: ARRAY
27599: PPUSH
27600: LD_EXP 37
27604: PPUSH
27605: LD_EXP 38
27609: PPUSH
27610: CALL_OW 12
27614: PPUSH
27615: LD_INT 2
27617: PPUSH
27618: LD_INT 1
27620: PPUSH
27621: LD_INT 1
27623: PPUSH
27624: EMPTY
27625: PPUSH
27626: LD_INT 25
27628: PUSH
27629: LD_INT 26
27631: PUSH
27632: LD_INT 27
27634: PUSH
27635: LD_INT 28
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: PPUSH
27644: EMPTY
27645: PPUSH
27646: LD_INT 1
27648: PPUSH
27649: CALL 17523 0 11
27653: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27654: LD_EXP 47
27658: PUSH
27659: LD_INT 1
27661: EQUAL
27662: IFFALSE 27754
27664: GO 27666
27666: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27667: LD_INT 5
27669: PPUSH
27670: LD_INT 2
27672: PPUSH
27673: LD_INT 5
27675: PUSH
27676: LD_INT 6
27678: PUSH
27679: LD_INT 8
27681: PUSH
27682: LD_INT 9
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: PUSH
27691: LD_OWVAR 67
27695: ARRAY
27696: PPUSH
27697: LD_INT 0
27699: PPUSH
27700: LD_INT 0
27702: PPUSH
27703: LD_INT 2
27705: PUSH
27706: LD_INT 4
27708: PUSH
27709: LD_INT 5
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: LIST
27716: PUSH
27717: LD_OWVAR 67
27721: ARRAY
27722: PPUSH
27723: LD_INT 0
27725: PPUSH
27726: LD_EXP 37
27730: PPUSH
27731: LD_EXP 38
27735: PPUSH
27736: CALL_OW 12
27740: PPUSH
27741: LD_INT 7
27743: PPUSH
27744: LD_INT 9
27746: PPUSH
27747: LD_INT 1
27749: PPUSH
27750: CALL 19227 0 11
27754: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27755: LD_EXP 47
27759: PUSH
27760: LD_INT 1
27762: EQUAL
27763: IFFALSE 27772
27765: GO 27767
27767: DISABLE
// PrepareArabianSheik ;
27768: CALL 4843 0 0
27772: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27773: LD_EXP 30
27777: PUSH
27778: LD_EXP 65
27782: PUSH
27783: LD_INT 1
27785: EQUAL
27786: AND
27787: IFFALSE 27856
27789: GO 27791
27791: DISABLE
// begin enable ;
27792: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27793: LD_INT 6
27795: PPUSH
27796: LD_INT 3
27798: PPUSH
27799: LD_EXP 61
27803: PPUSH
27804: LD_INT 0
27806: PPUSH
27807: LD_OWVAR 67
27811: PPUSH
27812: LD_INT 0
27814: PPUSH
27815: LD_EXP 61
27819: PUSH
27820: LD_INT 3
27822: DIV
27823: PUSH
27824: LD_INT 1
27826: PLUS
27827: PPUSH
27828: LD_EXP 37
27832: PPUSH
27833: LD_EXP 38
27837: PPUSH
27838: CALL_OW 12
27842: PPUSH
27843: LD_INT 17
27845: PPUSH
27846: LD_INT 18
27848: PPUSH
27849: LD_INT 1
27851: PPUSH
27852: CALL 19227 0 11
// end ;
27856: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27857: LD_EXP 30
27861: PUSH
27862: LD_EXP 65
27866: PUSH
27867: LD_INT 1
27869: EQUAL
27870: AND
27871: IFFALSE 27948
27873: GO 27875
27875: DISABLE
// begin enable ;
27876: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27877: LD_INT 17
27879: PPUSH
27880: LD_INT 6
27882: PPUSH
27883: LD_EXP 60
27887: PPUSH
27888: LD_EXP 37
27892: PPUSH
27893: LD_EXP 38
27897: PPUSH
27898: CALL_OW 12
27902: PPUSH
27903: LD_INT 3
27905: PPUSH
27906: LD_INT 1
27908: PPUSH
27909: LD_INT 3
27911: PUSH
27912: LD_INT 3
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PPUSH
27919: LD_INT 43
27921: PUSH
27922: LD_INT 44
27924: PUSH
27925: LD_INT 45
27927: PUSH
27928: LD_INT 46
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: PPUSH
27937: EMPTY
27938: PPUSH
27939: EMPTY
27940: PPUSH
27941: LD_INT 1
27943: PPUSH
27944: CALL 17523 0 11
// end ;
27948: END
// every 10 10$00 trigger joinEpsilon do
27949: LD_EXP 30
27953: IFFALSE 28007
27955: GO 27957
27957: DISABLE
// begin enable ;
27958: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27959: LD_ADDR_EXP 60
27963: PUSH
27964: LD_EXP 60
27968: PUSH
27969: LD_INT 1
27971: PPUSH
27972: LD_OWVAR 67
27976: PPUSH
27977: CALL_OW 12
27981: PLUS
27982: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27983: LD_ADDR_EXP 61
27987: PUSH
27988: LD_EXP 61
27992: PUSH
27993: LD_INT 1
27995: PPUSH
27996: LD_OWVAR 67
28000: PPUSH
28001: CALL_OW 12
28005: PLUS
28006: ST_TO_ADDR
// end ;
28007: END
// every 21 21$0 trigger attackAvalaible = 1 do
28008: LD_EXP 65
28012: PUSH
28013: LD_INT 1
28015: EQUAL
28016: IFFALSE 28029
28018: GO 28020
28020: DISABLE
// attackAvalaible = 0 ; end_of_file
28021: LD_ADDR_EXP 65
28025: PUSH
28026: LD_INT 0
28028: ST_TO_ADDR
28029: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
28030: LD_INT 54
28032: PPUSH
28033: LD_INT 1
28035: PPUSH
28036: CALL_OW 321
28040: PUSH
28041: LD_INT 2
28043: EQUAL
28044: PUSH
28045: LD_INT 55
28047: PPUSH
28048: LD_INT 1
28050: PPUSH
28051: CALL_OW 321
28055: PUSH
28056: LD_INT 2
28058: EQUAL
28059: AND
28060: PUSH
28061: LD_INT 21
28063: PPUSH
28064: LD_INT 1
28066: PPUSH
28067: CALL_OW 321
28071: PUSH
28072: LD_INT 2
28074: EQUAL
28075: AND
28076: PUSH
28077: LD_INT 22
28079: PPUSH
28080: LD_INT 1
28082: PPUSH
28083: CALL_OW 321
28087: PUSH
28088: LD_INT 2
28090: EQUAL
28091: AND
28092: PUSH
28093: LD_INT 12
28095: PPUSH
28096: LD_INT 1
28098: PPUSH
28099: CALL_OW 321
28103: PUSH
28104: LD_INT 1
28106: EQUAL
28107: PUSH
28108: LD_INT 32
28110: PPUSH
28111: LD_INT 1
28113: PPUSH
28114: CALL_OW 321
28118: PUSH
28119: LD_INT 1
28121: EQUAL
28122: OR
28123: PUSH
28124: EMPTY
28125: LIST
28126: AND
28127: PUSH
28128: LD_EXP 49
28132: PUSH
28133: LD_INT 1
28135: EQUAL
28136: AND
28137: PUSH
28138: LD_INT 22
28140: PUSH
28141: LD_INT 3
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 21
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PPUSH
28162: CALL_OW 69
28166: PUSH
28167: LD_INT 0
28169: EQUAL
28170: AND
28171: IFFALSE 28227
28173: GO 28175
28175: DISABLE
// begin case query ( QEndMission ) of 1 :
28176: LD_STRING QEndMission
28178: PPUSH
28179: CALL_OW 97
28183: PUSH
28184: LD_INT 1
28186: DOUBLE
28187: EQUAL
28188: IFTRUE 28192
28190: GO 28203
28192: POP
// begin end_the_mission_allowed = true ;
28193: LD_ADDR_OWVAR 57
28197: PUSH
28198: LD_INT 1
28200: ST_TO_ADDR
// end ; 2 :
28201: GO 28227
28203: LD_INT 2
28205: DOUBLE
28206: EQUAL
28207: IFTRUE 28211
28209: GO 28226
28211: POP
// begin fastEnd = 1 ;
28212: LD_ADDR_EXP 64
28216: PUSH
28217: LD_INT 1
28219: ST_TO_ADDR
// FinishMission ;
28220: CALL 28272 0 0
// end ; end ;
28224: GO 28227
28226: POP
// end ;
28227: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
28228: LD_EXP 59
28232: PUSH
28233: LD_EXP 58
28237: NOT
28238: AND
28239: PUSH
28240: LD_INT 22
28242: PUSH
28243: LD_INT 3
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PPUSH
28250: CALL_OW 69
28254: PUSH
28255: LD_INT 0
28257: EQUAL
28258: AND
28259: IFFALSE 28271
28261: GO 28263
28263: DISABLE
// SetAchievement ( ACH_TACT ) ;
28264: LD_STRING ACH_TACT
28266: PPUSH
28267: CALL_OW 543
28271: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
28272: LD_INT 0
28274: PPUSH
28275: PPUSH
28276: PPUSH
28277: PPUSH
// if not snipersTrained then
28278: LD_EXP 63
28282: NOT
28283: IFFALSE 28292
// SetAchievement ( ACH_SNIPER ) ;
28285: LD_STRING ACH_SNIPER
28287: PPUSH
28288: CALL_OW 543
// m1 := false ;
28292: LD_ADDR_VAR 0 2
28296: PUSH
28297: LD_INT 0
28299: ST_TO_ADDR
// m2 := false ;
28300: LD_ADDR_VAR 0 3
28304: PUSH
28305: LD_INT 0
28307: ST_TO_ADDR
// m3 := false ;
28308: LD_ADDR_VAR 0 4
28312: PUSH
28313: LD_INT 0
28315: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
28316: LD_EXP 54
28320: PPUSH
28321: LD_STRING 10_KhatamStatus_1
28323: PPUSH
28324: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
28328: LD_EXP 53
28332: PPUSH
28333: LD_STRING 10_GensherEscape_1
28335: PPUSH
28336: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
28340: LD_INT 12
28342: PPUSH
28343: LD_INT 1
28345: PPUSH
28346: CALL_OW 321
28350: PUSH
28351: LD_INT 2
28353: EQUAL
28354: IFFALSE 28376
// begin AddMedal ( sights , 1 ) ;
28356: LD_STRING sights
28358: PPUSH
28359: LD_INT 1
28361: PPUSH
28362: CALL_OW 101
// m1 := true ;
28366: LD_ADDR_VAR 0 2
28370: PUSH
28371: LD_INT 1
28373: ST_TO_ADDR
// end else
28374: GO 28387
// begin AddMedal ( sights , - 1 ) ;
28376: LD_STRING sights
28378: PPUSH
28379: LD_INT 1
28381: NEG
28382: PPUSH
28383: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28387: LD_INT 32
28389: PPUSH
28390: LD_INT 1
28392: PPUSH
28393: CALL_OW 321
28397: PUSH
28398: LD_INT 2
28400: EQUAL
28401: IFFALSE 28423
// begin AddMedal ( computers , 1 ) ;
28403: LD_STRING computers
28405: PPUSH
28406: LD_INT 1
28408: PPUSH
28409: CALL_OW 101
// m2 := true ;
28413: LD_ADDR_VAR 0 3
28417: PUSH
28418: LD_INT 1
28420: ST_TO_ADDR
// end else
28421: GO 28434
// begin AddMedal ( computers , - 1 ) ;
28423: LD_STRING computers
28425: PPUSH
28426: LD_INT 1
28428: NEG
28429: PPUSH
28430: CALL_OW 101
// end ; if arabianEscape = 0 then
28434: LD_EXP 48
28438: PUSH
28439: LD_INT 0
28441: EQUAL
28442: IFFALSE 28474
// begin AddMedal ( renegades , 2 ) ;
28444: LD_STRING renegades
28446: PPUSH
28447: LD_INT 2
28449: PPUSH
28450: CALL_OW 101
// m3 := true ;
28454: LD_ADDR_VAR 0 4
28458: PUSH
28459: LD_INT 1
28461: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28462: LD_INT 0
28464: PPUSH
28465: LD_STRING 10_ScientistsEscape_1
28467: PPUSH
28468: CALL_OW 39
// end else
28472: GO 28485
// begin AddMedal ( renegades , - 1 ) ;
28474: LD_STRING renegades
28476: PPUSH
28477: LD_INT 1
28479: NEG
28480: PPUSH
28481: CALL_OW 101
// end ; SaveEpsilonBase ;
28485: CALL 29271 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28489: LD_VAR 0 2
28493: PUSH
28494: LD_VAR 0 3
28498: AND
28499: PUSH
28500: LD_VAR 0 4
28504: AND
28505: PUSH
28506: LD_OWVAR 67
28510: PUSH
28511: LD_INT 3
28513: GREATEREQUAL
28514: AND
28515: IFFALSE 28527
// SetAchievementEX ( ACH_AMER , 10 ) ;
28517: LD_STRING ACH_AMER
28519: PPUSH
28520: LD_INT 10
28522: PPUSH
28523: CALL_OW 564
// if tick <= 40 40$00 then
28527: LD_OWVAR 1
28531: PUSH
28532: LD_INT 84000
28534: LESSEQUAL
28535: IFFALSE 28551
// begin wait ( 3 ) ;
28537: LD_INT 3
28539: PPUSH
28540: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28544: LD_STRING ACH_ASPEED_10
28546: PPUSH
28547: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28551: LD_STRING Main
28553: PPUSH
28554: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28558: LD_INT 22
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 23
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 21
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 2
28590: PUSH
28591: LD_INT 25
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 25
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 25
28613: PUSH
28614: LD_INT 3
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 25
28623: PUSH
28624: LD_INT 4
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 25
28633: PUSH
28634: LD_INT 5
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 25
28643: PUSH
28644: LD_INT 8
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: PPUSH
28666: CALL_OW 69
28670: PPUSH
28671: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28675: LD_EXP 1
28679: PPUSH
28680: LD_EXP 55
28684: PUSH
28685: LD_STRING JMM
28687: STR
28688: PPUSH
28689: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28693: LD_EXP 2
28697: PPUSH
28698: LD_EXP 55
28702: PUSH
28703: LD_STRING Brown
28705: STR
28706: PPUSH
28707: CALL 11707 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28711: LD_EXP 3
28715: PPUSH
28716: LD_EXP 55
28720: PUSH
28721: LD_STRING Donaldson
28723: STR
28724: PPUSH
28725: CALL 11707 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28729: LD_EXP 4
28733: PPUSH
28734: LD_EXP 55
28738: PUSH
28739: LD_STRING Bobby
28741: STR
28742: PPUSH
28743: CALL 11707 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28747: LD_EXP 5
28751: PPUSH
28752: LD_EXP 55
28756: PUSH
28757: LD_STRING Cyrus
28759: STR
28760: PPUSH
28761: CALL 11707 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28765: LD_EXP 6
28769: PPUSH
28770: LD_EXP 55
28774: PUSH
28775: LD_STRING Lisa
28777: STR
28778: PPUSH
28779: CALL 11707 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28783: LD_EXP 7
28787: PPUSH
28788: LD_EXP 55
28792: PUSH
28793: LD_STRING Frank
28795: STR
28796: PPUSH
28797: CALL 11707 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28801: LD_EXP 8
28805: PPUSH
28806: LD_EXP 55
28810: PUSH
28811: LD_STRING Kikuchi
28813: STR
28814: PPUSH
28815: CALL 11707 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28819: LD_EXP 9
28823: PPUSH
28824: LD_EXP 55
28828: PUSH
28829: LD_STRING Houten
28831: STR
28832: PPUSH
28833: CALL 11707 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28837: LD_EXP 10
28841: PPUSH
28842: LD_EXP 55
28846: PUSH
28847: LD_STRING Gary
28849: STR
28850: PPUSH
28851: CALL 11707 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28855: LD_EXP 19
28859: PPUSH
28860: LD_EXP 55
28864: PUSH
28865: LD_STRING Cornell
28867: STR
28868: PPUSH
28869: CALL 11707 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28873: LD_EXP 11
28877: PPUSH
28878: LD_EXP 55
28882: PUSH
28883: LD_STRING Simms
28885: STR
28886: PPUSH
28887: CALL 11707 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28891: LD_EXP 12
28895: PPUSH
28896: LD_EXP 55
28900: PUSH
28901: LD_STRING Denis
28903: STR
28904: PPUSH
28905: CALL 11707 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28909: LD_EXP 13
28913: PPUSH
28914: LD_EXP 55
28918: PUSH
28919: LD_STRING Joan
28921: STR
28922: PPUSH
28923: CALL 11707 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28927: LD_EXP 15
28931: PPUSH
28932: LD_EXP 55
28936: PUSH
28937: LD_STRING Gladstone
28939: STR
28940: PPUSH
28941: CALL 11707 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28945: LD_EXP 17
28949: PPUSH
28950: LD_EXP 55
28954: PUSH
28955: LD_STRING DeltaDoctor
28957: STR
28958: PPUSH
28959: CALL 11707 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28963: LD_EXP 23
28967: PPUSH
28968: LD_STRING 10c_lock
28970: PPUSH
28971: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28975: LD_INT 50
28977: PUSH
28978: EMPTY
28979: LIST
28980: PUSH
28981: LD_INT 22
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 21
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: LD_INT 25
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 25
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 25
29026: PUSH
29027: LD_INT 3
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 25
29036: PUSH
29037: LD_INT 4
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 25
29046: PUSH
29047: LD_INT 5
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 25
29056: PUSH
29057: LD_INT 8
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: PPUSH
29079: CALL_OW 69
29083: PUSH
29084: LD_EXP 1
29088: PUSH
29089: LD_EXP 2
29093: PUSH
29094: LD_EXP 3
29098: PUSH
29099: LD_EXP 4
29103: PUSH
29104: LD_EXP 5
29108: PUSH
29109: LD_EXP 6
29113: PUSH
29114: LD_EXP 7
29118: PUSH
29119: LD_EXP 15
29123: PUSH
29124: LD_EXP 8
29128: PUSH
29129: LD_EXP 12
29133: PUSH
29134: LD_EXP 13
29138: PUSH
29139: LD_EXP 9
29143: PUSH
29144: LD_EXP 11
29148: PUSH
29149: LD_EXP 10
29153: PUSH
29154: LD_EXP 17
29158: PUSH
29159: LD_EXP 19
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: DIFF
29182: PPUSH
29183: LD_STRING 10_other_survivors
29185: PPUSH
29186: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
29190: LD_INT 50
29192: PUSH
29193: EMPTY
29194: LIST
29195: PUSH
29196: LD_INT 22
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 21
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 25
29221: PUSH
29222: LD_INT 16
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 25
29231: PUSH
29232: LD_INT 12
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: PPUSH
29250: CALL_OW 69
29254: PPUSH
29255: LD_STRING 10_ape
29257: PPUSH
29258: CALL_OW 38
// YouWin ;
29262: CALL_OW 103
// end ;
29266: LD_VAR 0 1
29270: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
29271: LD_INT 0
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
// epsilonBase = [ ] ;
29277: LD_ADDR_VAR 0 2
29281: PUSH
29282: EMPTY
29283: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
29284: LD_ADDR_VAR 0 3
29288: PUSH
29289: LD_INT 22
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 21
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 50
29311: PUSH
29312: EMPTY
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: PPUSH
29320: CALL_OW 69
29324: ST_TO_ADDR
// for i in buildings do
29325: LD_ADDR_VAR 0 4
29329: PUSH
29330: LD_VAR 0 3
29334: PUSH
29335: FOR_IN
29336: IFFALSE 29788
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
29338: LD_VAR 0 4
29342: PPUSH
29343: CALL_OW 266
29347: PUSH
29348: LD_INT 6
29350: PUSH
29351: LD_INT 7
29353: PUSH
29354: LD_INT 8
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: IN
29362: IFFALSE 29476
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29364: LD_ADDR_VAR 0 2
29368: PUSH
29369: LD_VAR 0 2
29373: PUSH
29374: LD_VAR 0 4
29378: PPUSH
29379: CALL_OW 266
29383: PUSH
29384: LD_VAR 0 4
29388: PPUSH
29389: CALL_OW 250
29393: PUSH
29394: LD_VAR 0 4
29398: PPUSH
29399: CALL_OW 251
29403: PUSH
29404: LD_VAR 0 4
29408: PPUSH
29409: CALL_OW 254
29413: PUSH
29414: LD_VAR 0 4
29418: PPUSH
29419: CALL_OW 267
29423: PUSH
29424: LD_VAR 0 4
29428: PPUSH
29429: CALL_OW 248
29433: PUSH
29434: LD_VAR 0 4
29438: PPUSH
29439: LD_INT 1
29441: PPUSH
29442: CALL_OW 268
29446: PUSH
29447: LD_VAR 0 4
29451: PPUSH
29452: LD_INT 2
29454: PPUSH
29455: CALL_OW 268
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: PUSH
29470: EMPTY
29471: LIST
29472: ADD
29473: ST_TO_ADDR
29474: GO 29786
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29476: LD_VAR 0 4
29480: PPUSH
29481: CALL_OW 266
29485: PUSH
29486: LD_INT 32
29488: EQUAL
29489: PUSH
29490: LD_VAR 0 4
29494: PPUSH
29495: CALL_OW 266
29499: PUSH
29500: LD_INT 33
29502: EQUAL
29503: OR
29504: IFFALSE 29601
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29506: LD_ADDR_VAR 0 2
29510: PUSH
29511: LD_VAR 0 2
29515: PUSH
29516: LD_VAR 0 4
29520: PPUSH
29521: CALL_OW 266
29525: PUSH
29526: LD_VAR 0 4
29530: PPUSH
29531: CALL_OW 250
29535: PUSH
29536: LD_VAR 0 4
29540: PPUSH
29541: CALL_OW 251
29545: PUSH
29546: LD_VAR 0 4
29550: PPUSH
29551: CALL_OW 254
29555: PUSH
29556: LD_VAR 0 4
29560: PPUSH
29561: CALL_OW 267
29565: PUSH
29566: LD_VAR 0 4
29570: PPUSH
29571: CALL_OW 248
29575: PUSH
29576: LD_VAR 0 4
29580: PPUSH
29581: CALL_OW 269
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: ADD
29598: ST_TO_ADDR
29599: GO 29786
// if GetBType ( i ) = b_factory then
29601: LD_VAR 0 4
29605: PPUSH
29606: CALL_OW 266
29610: PUSH
29611: LD_INT 3
29613: EQUAL
29614: IFFALSE 29704
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29616: LD_ADDR_VAR 0 2
29620: PUSH
29621: LD_VAR 0 2
29625: PPUSH
29626: LD_INT 1
29628: PPUSH
29629: LD_VAR 0 4
29633: PPUSH
29634: CALL_OW 266
29638: PUSH
29639: LD_VAR 0 4
29643: PPUSH
29644: CALL_OW 250
29648: PUSH
29649: LD_VAR 0 4
29653: PPUSH
29654: CALL_OW 251
29658: PUSH
29659: LD_VAR 0 4
29663: PPUSH
29664: CALL_OW 254
29668: PUSH
29669: LD_VAR 0 4
29673: PPUSH
29674: CALL_OW 267
29678: PUSH
29679: LD_VAR 0 4
29683: PPUSH
29684: CALL_OW 248
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: PPUSH
29697: CALL_OW 2
29701: ST_TO_ADDR
29702: GO 29786
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29704: LD_ADDR_VAR 0 2
29708: PUSH
29709: LD_VAR 0 2
29713: PUSH
29714: LD_VAR 0 4
29718: PPUSH
29719: CALL_OW 266
29723: PUSH
29724: LD_VAR 0 4
29728: PPUSH
29729: CALL_OW 250
29733: PUSH
29734: LD_VAR 0 4
29738: PPUSH
29739: CALL_OW 251
29743: PUSH
29744: LD_VAR 0 4
29748: PPUSH
29749: CALL_OW 254
29753: PUSH
29754: LD_VAR 0 4
29758: PPUSH
29759: CALL_OW 267
29763: PUSH
29764: LD_VAR 0 4
29768: PPUSH
29769: CALL_OW 248
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: PUSH
29782: EMPTY
29783: LIST
29784: ADD
29785: ST_TO_ADDR
// end ;
29786: GO 29335
29788: POP
29789: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29790: LD_VAR 0 2
29794: PPUSH
29795: LD_STRING 10_EpsilonBase
29797: PPUSH
29798: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29802: LD_INT 19
29804: PPUSH
29805: LD_STRING 10_EpsilonEnv
29807: PPUSH
29808: CALL 29817 0 2
// end ;
29812: LD_VAR 0 1
29816: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29817: LD_INT 0
29819: PPUSH
// result := ListEnvironmentArea ( area ) ;
29820: LD_ADDR_VAR 0 3
29824: PUSH
29825: LD_VAR 0 1
29829: PPUSH
29830: CALL_OW 353
29834: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29835: LD_VAR 0 3
29839: PPUSH
29840: LD_VAR 0 2
29844: PPUSH
29845: CALL_OW 39
// end ; end_of_file
29849: LD_VAR 0 3
29853: RET
// every 0 0$01 do var timer ;
29854: GO 29856
29856: DISABLE
29857: LD_INT 0
29859: PPUSH
// begin timer := 0 0$20 ;
29860: LD_ADDR_VAR 0 1
29864: PUSH
29865: LD_INT 700
29867: ST_TO_ADDR
// repeat wait ( timer ) ;
29868: LD_VAR 0 1
29872: PPUSH
29873: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29877: LD_EXP 57
29881: PUSH
29882: LD_INT 6
29884: GREATEREQUAL
29885: PUSH
29886: LD_EXP 57
29890: PUSH
29891: LD_INT 14
29893: LESS
29894: AND
29895: IFFALSE 29911
// timer := timer + 0 0$3 ;
29897: LD_ADDR_VAR 0 1
29901: PUSH
29902: LD_VAR 0 1
29906: PUSH
29907: LD_INT 105
29909: PLUS
29910: ST_TO_ADDR
// if cratesSpawned >= 14 then
29911: LD_EXP 57
29915: PUSH
29916: LD_INT 14
29918: GREATEREQUAL
29919: IFFALSE 29935
// timer := timer + 0 0$6 ;
29921: LD_ADDR_VAR 0 1
29925: PUSH
29926: LD_VAR 0 1
29930: PUSH
29931: LD_INT 210
29933: PLUS
29934: ST_TO_ADDR
// if timer > 2 2$00 then
29935: LD_VAR 0 1
29939: PUSH
29940: LD_INT 4200
29942: GREATER
29943: IFFALSE 29953
// timer := 0 0$45 ;
29945: LD_ADDR_VAR 0 1
29949: PUSH
29950: LD_INT 1575
29952: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29953: LD_INT 1
29955: PPUSH
29956: LD_INT 5
29958: PPUSH
29959: CALL_OW 12
29963: PPUSH
29964: LD_INT 16
29966: PPUSH
29967: LD_INT 1
29969: PPUSH
29970: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29974: LD_ADDR_EXP 57
29978: PUSH
29979: LD_EXP 57
29983: PUSH
29984: LD_INT 1
29986: PLUS
29987: ST_TO_ADDR
// until false ;
29988: LD_INT 0
29990: IFFALSE 29868
// end ; end_of_file
29992: PPOPN 1
29994: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
29995: LD_INT 0
29997: PPUSH
// ar_miner := 81 ;
29998: LD_ADDR_EXP 77
30002: PUSH
30003: LD_INT 81
30005: ST_TO_ADDR
// ar_crane := 88 ;
30006: LD_ADDR_EXP 76
30010: PUSH
30011: LD_INT 88
30013: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
30014: LD_ADDR_EXP 71
30018: PUSH
30019: LD_INT 89
30021: ST_TO_ADDR
// us_hack := 99 ;
30022: LD_ADDR_EXP 72
30026: PUSH
30027: LD_INT 99
30029: ST_TO_ADDR
// us_artillery := 97 ;
30030: LD_ADDR_EXP 73
30034: PUSH
30035: LD_INT 97
30037: ST_TO_ADDR
// ar_bio_bomb := 91 ;
30038: LD_ADDR_EXP 74
30042: PUSH
30043: LD_INT 91
30045: ST_TO_ADDR
// ar_mortar := 92 ;
30046: LD_ADDR_EXP 75
30050: PUSH
30051: LD_INT 92
30053: ST_TO_ADDR
// ru_flamethrower := 93 ;
30054: LD_ADDR_EXP 78
30058: PUSH
30059: LD_INT 93
30061: ST_TO_ADDR
// ru_radar := 98 ;
30062: LD_ADDR_EXP 70
30066: PUSH
30067: LD_INT 98
30069: ST_TO_ADDR
// tech_Artillery := 80 ;
30070: LD_ADDR_EXP 79
30074: PUSH
30075: LD_INT 80
30077: ST_TO_ADDR
// tech_RadMat := 81 ;
30078: LD_ADDR_EXP 80
30082: PUSH
30083: LD_INT 81
30085: ST_TO_ADDR
// tech_BasicTools := 82 ;
30086: LD_ADDR_EXP 81
30090: PUSH
30091: LD_INT 82
30093: ST_TO_ADDR
// tech_Cargo := 83 ;
30094: LD_ADDR_EXP 82
30098: PUSH
30099: LD_INT 83
30101: ST_TO_ADDR
// tech_Track := 84 ;
30102: LD_ADDR_EXP 83
30106: PUSH
30107: LD_INT 84
30109: ST_TO_ADDR
// tech_Crane := 85 ;
30110: LD_ADDR_EXP 84
30114: PUSH
30115: LD_INT 85
30117: ST_TO_ADDR
// tech_Bulldozer := 86 ;
30118: LD_ADDR_EXP 85
30122: PUSH
30123: LD_INT 86
30125: ST_TO_ADDR
// tech_Hovercraft := 87 ;
30126: LD_ADDR_EXP 86
30130: PUSH
30131: LD_INT 87
30133: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
30134: LD_ADDR_EXP 87
30138: PUSH
30139: LD_INT 88
30141: ST_TO_ADDR
// class_mastodont := 31 ;
30142: LD_ADDR_EXP 88
30146: PUSH
30147: LD_INT 31
30149: ST_TO_ADDR
// class_horse := 21 ;
30150: LD_ADDR_EXP 89
30154: PUSH
30155: LD_INT 21
30157: ST_TO_ADDR
// end ;
30158: LD_VAR 0 1
30162: RET
// every 1 do
30163: GO 30165
30165: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
30166: CALL 29995 0 0
30170: END
// every 0 0$1 do
30171: GO 30173
30173: DISABLE
// begin enable ;
30174: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
30175: LD_STRING updateTimer(
30177: PUSH
30178: LD_OWVAR 1
30182: STR
30183: PUSH
30184: LD_STRING );
30186: STR
30187: PPUSH
30188: CALL_OW 559
// end ;
30192: END
// export function SOS_MapStart ( ) ; begin
30193: LD_INT 0
30195: PPUSH
// if streamModeActive then
30196: LD_EXP 90
30200: IFFALSE 30209
// DefineStreamItems ( true ) ;
30202: LD_INT 1
30204: PPUSH
30205: CALL 31859 0 1
// UpdateFactoryWaypoints ( ) ;
30209: CALL 45443 0 0
// end ;
30213: LD_VAR 0 1
30217: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30218: LD_INT 0
30220: PPUSH
// if p2 = 100 then
30221: LD_VAR 0 2
30225: PUSH
30226: LD_INT 100
30228: EQUAL
30229: IFFALSE 31232
// begin if not StreamModeActive then
30231: LD_EXP 90
30235: NOT
30236: IFFALSE 30246
// StreamModeActive := true ;
30238: LD_ADDR_EXP 90
30242: PUSH
30243: LD_INT 1
30245: ST_TO_ADDR
// if p3 = 0 then
30246: LD_VAR 0 3
30250: PUSH
30251: LD_INT 0
30253: EQUAL
30254: IFFALSE 30260
// InitStreamMode ;
30256: CALL 31395 0 0
// if p3 = 1 then
30260: LD_VAR 0 3
30264: PUSH
30265: LD_INT 1
30267: EQUAL
30268: IFFALSE 30278
// sRocket := true ;
30270: LD_ADDR_EXP 95
30274: PUSH
30275: LD_INT 1
30277: ST_TO_ADDR
// if p3 = 2 then
30278: LD_VAR 0 3
30282: PUSH
30283: LD_INT 2
30285: EQUAL
30286: IFFALSE 30296
// sSpeed := true ;
30288: LD_ADDR_EXP 94
30292: PUSH
30293: LD_INT 1
30295: ST_TO_ADDR
// if p3 = 3 then
30296: LD_VAR 0 3
30300: PUSH
30301: LD_INT 3
30303: EQUAL
30304: IFFALSE 30314
// sEngine := true ;
30306: LD_ADDR_EXP 96
30310: PUSH
30311: LD_INT 1
30313: ST_TO_ADDR
// if p3 = 4 then
30314: LD_VAR 0 3
30318: PUSH
30319: LD_INT 4
30321: EQUAL
30322: IFFALSE 30332
// sSpec := true ;
30324: LD_ADDR_EXP 93
30328: PUSH
30329: LD_INT 1
30331: ST_TO_ADDR
// if p3 = 5 then
30332: LD_VAR 0 3
30336: PUSH
30337: LD_INT 5
30339: EQUAL
30340: IFFALSE 30350
// sLevel := true ;
30342: LD_ADDR_EXP 97
30346: PUSH
30347: LD_INT 1
30349: ST_TO_ADDR
// if p3 = 6 then
30350: LD_VAR 0 3
30354: PUSH
30355: LD_INT 6
30357: EQUAL
30358: IFFALSE 30368
// sArmoury := true ;
30360: LD_ADDR_EXP 98
30364: PUSH
30365: LD_INT 1
30367: ST_TO_ADDR
// if p3 = 7 then
30368: LD_VAR 0 3
30372: PUSH
30373: LD_INT 7
30375: EQUAL
30376: IFFALSE 30386
// sRadar := true ;
30378: LD_ADDR_EXP 99
30382: PUSH
30383: LD_INT 1
30385: ST_TO_ADDR
// if p3 = 8 then
30386: LD_VAR 0 3
30390: PUSH
30391: LD_INT 8
30393: EQUAL
30394: IFFALSE 30404
// sBunker := true ;
30396: LD_ADDR_EXP 100
30400: PUSH
30401: LD_INT 1
30403: ST_TO_ADDR
// if p3 = 9 then
30404: LD_VAR 0 3
30408: PUSH
30409: LD_INT 9
30411: EQUAL
30412: IFFALSE 30422
// sHack := true ;
30414: LD_ADDR_EXP 101
30418: PUSH
30419: LD_INT 1
30421: ST_TO_ADDR
// if p3 = 10 then
30422: LD_VAR 0 3
30426: PUSH
30427: LD_INT 10
30429: EQUAL
30430: IFFALSE 30440
// sFire := true ;
30432: LD_ADDR_EXP 102
30436: PUSH
30437: LD_INT 1
30439: ST_TO_ADDR
// if p3 = 11 then
30440: LD_VAR 0 3
30444: PUSH
30445: LD_INT 11
30447: EQUAL
30448: IFFALSE 30458
// sRefresh := true ;
30450: LD_ADDR_EXP 103
30454: PUSH
30455: LD_INT 1
30457: ST_TO_ADDR
// if p3 = 12 then
30458: LD_VAR 0 3
30462: PUSH
30463: LD_INT 12
30465: EQUAL
30466: IFFALSE 30476
// sExp := true ;
30468: LD_ADDR_EXP 104
30472: PUSH
30473: LD_INT 1
30475: ST_TO_ADDR
// if p3 = 13 then
30476: LD_VAR 0 3
30480: PUSH
30481: LD_INT 13
30483: EQUAL
30484: IFFALSE 30494
// sDepot := true ;
30486: LD_ADDR_EXP 105
30490: PUSH
30491: LD_INT 1
30493: ST_TO_ADDR
// if p3 = 14 then
30494: LD_VAR 0 3
30498: PUSH
30499: LD_INT 14
30501: EQUAL
30502: IFFALSE 30512
// sFlag := true ;
30504: LD_ADDR_EXP 106
30508: PUSH
30509: LD_INT 1
30511: ST_TO_ADDR
// if p3 = 15 then
30512: LD_VAR 0 3
30516: PUSH
30517: LD_INT 15
30519: EQUAL
30520: IFFALSE 30530
// sKamikadze := true ;
30522: LD_ADDR_EXP 114
30526: PUSH
30527: LD_INT 1
30529: ST_TO_ADDR
// if p3 = 16 then
30530: LD_VAR 0 3
30534: PUSH
30535: LD_INT 16
30537: EQUAL
30538: IFFALSE 30548
// sTroll := true ;
30540: LD_ADDR_EXP 115
30544: PUSH
30545: LD_INT 1
30547: ST_TO_ADDR
// if p3 = 17 then
30548: LD_VAR 0 3
30552: PUSH
30553: LD_INT 17
30555: EQUAL
30556: IFFALSE 30566
// sSlow := true ;
30558: LD_ADDR_EXP 116
30562: PUSH
30563: LD_INT 1
30565: ST_TO_ADDR
// if p3 = 18 then
30566: LD_VAR 0 3
30570: PUSH
30571: LD_INT 18
30573: EQUAL
30574: IFFALSE 30584
// sLack := true ;
30576: LD_ADDR_EXP 117
30580: PUSH
30581: LD_INT 1
30583: ST_TO_ADDR
// if p3 = 19 then
30584: LD_VAR 0 3
30588: PUSH
30589: LD_INT 19
30591: EQUAL
30592: IFFALSE 30602
// sTank := true ;
30594: LD_ADDR_EXP 119
30598: PUSH
30599: LD_INT 1
30601: ST_TO_ADDR
// if p3 = 20 then
30602: LD_VAR 0 3
30606: PUSH
30607: LD_INT 20
30609: EQUAL
30610: IFFALSE 30620
// sRemote := true ;
30612: LD_ADDR_EXP 120
30616: PUSH
30617: LD_INT 1
30619: ST_TO_ADDR
// if p3 = 21 then
30620: LD_VAR 0 3
30624: PUSH
30625: LD_INT 21
30627: EQUAL
30628: IFFALSE 30638
// sPowell := true ;
30630: LD_ADDR_EXP 121
30634: PUSH
30635: LD_INT 1
30637: ST_TO_ADDR
// if p3 = 22 then
30638: LD_VAR 0 3
30642: PUSH
30643: LD_INT 22
30645: EQUAL
30646: IFFALSE 30656
// sTeleport := true ;
30648: LD_ADDR_EXP 124
30652: PUSH
30653: LD_INT 1
30655: ST_TO_ADDR
// if p3 = 23 then
30656: LD_VAR 0 3
30660: PUSH
30661: LD_INT 23
30663: EQUAL
30664: IFFALSE 30674
// sOilTower := true ;
30666: LD_ADDR_EXP 126
30670: PUSH
30671: LD_INT 1
30673: ST_TO_ADDR
// if p3 = 24 then
30674: LD_VAR 0 3
30678: PUSH
30679: LD_INT 24
30681: EQUAL
30682: IFFALSE 30692
// sShovel := true ;
30684: LD_ADDR_EXP 127
30688: PUSH
30689: LD_INT 1
30691: ST_TO_ADDR
// if p3 = 25 then
30692: LD_VAR 0 3
30696: PUSH
30697: LD_INT 25
30699: EQUAL
30700: IFFALSE 30710
// sSheik := true ;
30702: LD_ADDR_EXP 128
30706: PUSH
30707: LD_INT 1
30709: ST_TO_ADDR
// if p3 = 26 then
30710: LD_VAR 0 3
30714: PUSH
30715: LD_INT 26
30717: EQUAL
30718: IFFALSE 30728
// sEarthquake := true ;
30720: LD_ADDR_EXP 130
30724: PUSH
30725: LD_INT 1
30727: ST_TO_ADDR
// if p3 = 27 then
30728: LD_VAR 0 3
30732: PUSH
30733: LD_INT 27
30735: EQUAL
30736: IFFALSE 30746
// sAI := true ;
30738: LD_ADDR_EXP 131
30742: PUSH
30743: LD_INT 1
30745: ST_TO_ADDR
// if p3 = 28 then
30746: LD_VAR 0 3
30750: PUSH
30751: LD_INT 28
30753: EQUAL
30754: IFFALSE 30764
// sCargo := true ;
30756: LD_ADDR_EXP 134
30760: PUSH
30761: LD_INT 1
30763: ST_TO_ADDR
// if p3 = 29 then
30764: LD_VAR 0 3
30768: PUSH
30769: LD_INT 29
30771: EQUAL
30772: IFFALSE 30782
// sDLaser := true ;
30774: LD_ADDR_EXP 135
30778: PUSH
30779: LD_INT 1
30781: ST_TO_ADDR
// if p3 = 30 then
30782: LD_VAR 0 3
30786: PUSH
30787: LD_INT 30
30789: EQUAL
30790: IFFALSE 30800
// sExchange := true ;
30792: LD_ADDR_EXP 136
30796: PUSH
30797: LD_INT 1
30799: ST_TO_ADDR
// if p3 = 31 then
30800: LD_VAR 0 3
30804: PUSH
30805: LD_INT 31
30807: EQUAL
30808: IFFALSE 30818
// sFac := true ;
30810: LD_ADDR_EXP 137
30814: PUSH
30815: LD_INT 1
30817: ST_TO_ADDR
// if p3 = 32 then
30818: LD_VAR 0 3
30822: PUSH
30823: LD_INT 32
30825: EQUAL
30826: IFFALSE 30836
// sPower := true ;
30828: LD_ADDR_EXP 138
30832: PUSH
30833: LD_INT 1
30835: ST_TO_ADDR
// if p3 = 33 then
30836: LD_VAR 0 3
30840: PUSH
30841: LD_INT 33
30843: EQUAL
30844: IFFALSE 30854
// sRandom := true ;
30846: LD_ADDR_EXP 139
30850: PUSH
30851: LD_INT 1
30853: ST_TO_ADDR
// if p3 = 34 then
30854: LD_VAR 0 3
30858: PUSH
30859: LD_INT 34
30861: EQUAL
30862: IFFALSE 30872
// sShield := true ;
30864: LD_ADDR_EXP 140
30868: PUSH
30869: LD_INT 1
30871: ST_TO_ADDR
// if p3 = 35 then
30872: LD_VAR 0 3
30876: PUSH
30877: LD_INT 35
30879: EQUAL
30880: IFFALSE 30890
// sTime := true ;
30882: LD_ADDR_EXP 141
30886: PUSH
30887: LD_INT 1
30889: ST_TO_ADDR
// if p3 = 36 then
30890: LD_VAR 0 3
30894: PUSH
30895: LD_INT 36
30897: EQUAL
30898: IFFALSE 30908
// sTools := true ;
30900: LD_ADDR_EXP 142
30904: PUSH
30905: LD_INT 1
30907: ST_TO_ADDR
// if p3 = 101 then
30908: LD_VAR 0 3
30912: PUSH
30913: LD_INT 101
30915: EQUAL
30916: IFFALSE 30926
// sSold := true ;
30918: LD_ADDR_EXP 107
30922: PUSH
30923: LD_INT 1
30925: ST_TO_ADDR
// if p3 = 102 then
30926: LD_VAR 0 3
30930: PUSH
30931: LD_INT 102
30933: EQUAL
30934: IFFALSE 30944
// sDiff := true ;
30936: LD_ADDR_EXP 108
30940: PUSH
30941: LD_INT 1
30943: ST_TO_ADDR
// if p3 = 103 then
30944: LD_VAR 0 3
30948: PUSH
30949: LD_INT 103
30951: EQUAL
30952: IFFALSE 30962
// sFog := true ;
30954: LD_ADDR_EXP 111
30958: PUSH
30959: LD_INT 1
30961: ST_TO_ADDR
// if p3 = 104 then
30962: LD_VAR 0 3
30966: PUSH
30967: LD_INT 104
30969: EQUAL
30970: IFFALSE 30980
// sReset := true ;
30972: LD_ADDR_EXP 112
30976: PUSH
30977: LD_INT 1
30979: ST_TO_ADDR
// if p3 = 105 then
30980: LD_VAR 0 3
30984: PUSH
30985: LD_INT 105
30987: EQUAL
30988: IFFALSE 30998
// sSun := true ;
30990: LD_ADDR_EXP 113
30994: PUSH
30995: LD_INT 1
30997: ST_TO_ADDR
// if p3 = 106 then
30998: LD_VAR 0 3
31002: PUSH
31003: LD_INT 106
31005: EQUAL
31006: IFFALSE 31016
// sTiger := true ;
31008: LD_ADDR_EXP 109
31012: PUSH
31013: LD_INT 1
31015: ST_TO_ADDR
// if p3 = 107 then
31016: LD_VAR 0 3
31020: PUSH
31021: LD_INT 107
31023: EQUAL
31024: IFFALSE 31034
// sBomb := true ;
31026: LD_ADDR_EXP 110
31030: PUSH
31031: LD_INT 1
31033: ST_TO_ADDR
// if p3 = 108 then
31034: LD_VAR 0 3
31038: PUSH
31039: LD_INT 108
31041: EQUAL
31042: IFFALSE 31052
// sWound := true ;
31044: LD_ADDR_EXP 118
31048: PUSH
31049: LD_INT 1
31051: ST_TO_ADDR
// if p3 = 109 then
31052: LD_VAR 0 3
31056: PUSH
31057: LD_INT 109
31059: EQUAL
31060: IFFALSE 31070
// sBetray := true ;
31062: LD_ADDR_EXP 122
31066: PUSH
31067: LD_INT 1
31069: ST_TO_ADDR
// if p3 = 110 then
31070: LD_VAR 0 3
31074: PUSH
31075: LD_INT 110
31077: EQUAL
31078: IFFALSE 31088
// sContamin := true ;
31080: LD_ADDR_EXP 123
31084: PUSH
31085: LD_INT 1
31087: ST_TO_ADDR
// if p3 = 111 then
31088: LD_VAR 0 3
31092: PUSH
31093: LD_INT 111
31095: EQUAL
31096: IFFALSE 31106
// sOil := true ;
31098: LD_ADDR_EXP 125
31102: PUSH
31103: LD_INT 1
31105: ST_TO_ADDR
// if p3 = 112 then
31106: LD_VAR 0 3
31110: PUSH
31111: LD_INT 112
31113: EQUAL
31114: IFFALSE 31124
// sStu := true ;
31116: LD_ADDR_EXP 129
31120: PUSH
31121: LD_INT 1
31123: ST_TO_ADDR
// if p3 = 113 then
31124: LD_VAR 0 3
31128: PUSH
31129: LD_INT 113
31131: EQUAL
31132: IFFALSE 31142
// sBazooka := true ;
31134: LD_ADDR_EXP 132
31138: PUSH
31139: LD_INT 1
31141: ST_TO_ADDR
// if p3 = 114 then
31142: LD_VAR 0 3
31146: PUSH
31147: LD_INT 114
31149: EQUAL
31150: IFFALSE 31160
// sMortar := true ;
31152: LD_ADDR_EXP 133
31156: PUSH
31157: LD_INT 1
31159: ST_TO_ADDR
// if p3 = 115 then
31160: LD_VAR 0 3
31164: PUSH
31165: LD_INT 115
31167: EQUAL
31168: IFFALSE 31178
// sRanger := true ;
31170: LD_ADDR_EXP 143
31174: PUSH
31175: LD_INT 1
31177: ST_TO_ADDR
// if p3 = 116 then
31178: LD_VAR 0 3
31182: PUSH
31183: LD_INT 116
31185: EQUAL
31186: IFFALSE 31196
// sComputer := true ;
31188: LD_ADDR_EXP 144
31192: PUSH
31193: LD_INT 1
31195: ST_TO_ADDR
// if p3 = 117 then
31196: LD_VAR 0 3
31200: PUSH
31201: LD_INT 117
31203: EQUAL
31204: IFFALSE 31214
// s30 := true ;
31206: LD_ADDR_EXP 145
31210: PUSH
31211: LD_INT 1
31213: ST_TO_ADDR
// if p3 = 118 then
31214: LD_VAR 0 3
31218: PUSH
31219: LD_INT 118
31221: EQUAL
31222: IFFALSE 31232
// s60 := true ;
31224: LD_ADDR_EXP 146
31228: PUSH
31229: LD_INT 1
31231: ST_TO_ADDR
// end ; if p2 = 101 then
31232: LD_VAR 0 2
31236: PUSH
31237: LD_INT 101
31239: EQUAL
31240: IFFALSE 31368
// begin case p3 of 1 :
31242: LD_VAR 0 3
31246: PUSH
31247: LD_INT 1
31249: DOUBLE
31250: EQUAL
31251: IFTRUE 31255
31253: GO 31262
31255: POP
// hHackUnlimitedResources ; 2 :
31256: CALL 43466 0 0
31260: GO 31368
31262: LD_INT 2
31264: DOUBLE
31265: EQUAL
31266: IFTRUE 31270
31268: GO 31277
31270: POP
// hHackSetLevel10 ; 3 :
31271: CALL 43599 0 0
31275: GO 31368
31277: LD_INT 3
31279: DOUBLE
31280: EQUAL
31281: IFTRUE 31285
31283: GO 31292
31285: POP
// hHackSetLevel10YourUnits ; 4 :
31286: CALL 43684 0 0
31290: GO 31368
31292: LD_INT 4
31294: DOUBLE
31295: EQUAL
31296: IFTRUE 31300
31298: GO 31307
31300: POP
// hHackInvincible ; 5 :
31301: CALL 44132 0 0
31305: GO 31368
31307: LD_INT 5
31309: DOUBLE
31310: EQUAL
31311: IFTRUE 31315
31313: GO 31322
31315: POP
// hHackInvisible ; 6 :
31316: CALL 44243 0 0
31320: GO 31368
31322: LD_INT 6
31324: DOUBLE
31325: EQUAL
31326: IFTRUE 31330
31328: GO 31337
31330: POP
// hHackChangeYourSide ; 7 :
31331: CALL 44300 0 0
31335: GO 31368
31337: LD_INT 7
31339: DOUBLE
31340: EQUAL
31341: IFTRUE 31345
31343: GO 31352
31345: POP
// hHackChangeUnitSide ; 8 :
31346: CALL 44342 0 0
31350: GO 31368
31352: LD_INT 8
31354: DOUBLE
31355: EQUAL
31356: IFTRUE 31360
31358: GO 31367
31360: POP
// hHackFog ; end ;
31361: CALL 44443 0 0
31365: GO 31368
31367: POP
// end ; end ;
31368: LD_VAR 0 7
31372: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
31373: GO 31375
31375: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
31376: LD_STRING initStreamRollete();
31378: PPUSH
31379: CALL_OW 559
// InitStreamMode ;
31383: CALL 31395 0 0
// DefineStreamItems ( false ) ;
31387: LD_INT 0
31389: PPUSH
31390: CALL 31859 0 1
// end ;
31394: END
// function InitStreamMode ; begin
31395: LD_INT 0
31397: PPUSH
// streamModeActive := false ;
31398: LD_ADDR_EXP 90
31402: PUSH
31403: LD_INT 0
31405: ST_TO_ADDR
// normalCounter := 36 ;
31406: LD_ADDR_EXP 91
31410: PUSH
31411: LD_INT 36
31413: ST_TO_ADDR
// hardcoreCounter := 18 ;
31414: LD_ADDR_EXP 92
31418: PUSH
31419: LD_INT 18
31421: ST_TO_ADDR
// sRocket := false ;
31422: LD_ADDR_EXP 95
31426: PUSH
31427: LD_INT 0
31429: ST_TO_ADDR
// sSpeed := false ;
31430: LD_ADDR_EXP 94
31434: PUSH
31435: LD_INT 0
31437: ST_TO_ADDR
// sEngine := false ;
31438: LD_ADDR_EXP 96
31442: PUSH
31443: LD_INT 0
31445: ST_TO_ADDR
// sSpec := false ;
31446: LD_ADDR_EXP 93
31450: PUSH
31451: LD_INT 0
31453: ST_TO_ADDR
// sLevel := false ;
31454: LD_ADDR_EXP 97
31458: PUSH
31459: LD_INT 0
31461: ST_TO_ADDR
// sArmoury := false ;
31462: LD_ADDR_EXP 98
31466: PUSH
31467: LD_INT 0
31469: ST_TO_ADDR
// sRadar := false ;
31470: LD_ADDR_EXP 99
31474: PUSH
31475: LD_INT 0
31477: ST_TO_ADDR
// sBunker := false ;
31478: LD_ADDR_EXP 100
31482: PUSH
31483: LD_INT 0
31485: ST_TO_ADDR
// sHack := false ;
31486: LD_ADDR_EXP 101
31490: PUSH
31491: LD_INT 0
31493: ST_TO_ADDR
// sFire := false ;
31494: LD_ADDR_EXP 102
31498: PUSH
31499: LD_INT 0
31501: ST_TO_ADDR
// sRefresh := false ;
31502: LD_ADDR_EXP 103
31506: PUSH
31507: LD_INT 0
31509: ST_TO_ADDR
// sExp := false ;
31510: LD_ADDR_EXP 104
31514: PUSH
31515: LD_INT 0
31517: ST_TO_ADDR
// sDepot := false ;
31518: LD_ADDR_EXP 105
31522: PUSH
31523: LD_INT 0
31525: ST_TO_ADDR
// sFlag := false ;
31526: LD_ADDR_EXP 106
31530: PUSH
31531: LD_INT 0
31533: ST_TO_ADDR
// sKamikadze := false ;
31534: LD_ADDR_EXP 114
31538: PUSH
31539: LD_INT 0
31541: ST_TO_ADDR
// sTroll := false ;
31542: LD_ADDR_EXP 115
31546: PUSH
31547: LD_INT 0
31549: ST_TO_ADDR
// sSlow := false ;
31550: LD_ADDR_EXP 116
31554: PUSH
31555: LD_INT 0
31557: ST_TO_ADDR
// sLack := false ;
31558: LD_ADDR_EXP 117
31562: PUSH
31563: LD_INT 0
31565: ST_TO_ADDR
// sTank := false ;
31566: LD_ADDR_EXP 119
31570: PUSH
31571: LD_INT 0
31573: ST_TO_ADDR
// sRemote := false ;
31574: LD_ADDR_EXP 120
31578: PUSH
31579: LD_INT 0
31581: ST_TO_ADDR
// sPowell := false ;
31582: LD_ADDR_EXP 121
31586: PUSH
31587: LD_INT 0
31589: ST_TO_ADDR
// sTeleport := false ;
31590: LD_ADDR_EXP 124
31594: PUSH
31595: LD_INT 0
31597: ST_TO_ADDR
// sOilTower := false ;
31598: LD_ADDR_EXP 126
31602: PUSH
31603: LD_INT 0
31605: ST_TO_ADDR
// sShovel := false ;
31606: LD_ADDR_EXP 127
31610: PUSH
31611: LD_INT 0
31613: ST_TO_ADDR
// sSheik := false ;
31614: LD_ADDR_EXP 128
31618: PUSH
31619: LD_INT 0
31621: ST_TO_ADDR
// sEarthquake := false ;
31622: LD_ADDR_EXP 130
31626: PUSH
31627: LD_INT 0
31629: ST_TO_ADDR
// sAI := false ;
31630: LD_ADDR_EXP 131
31634: PUSH
31635: LD_INT 0
31637: ST_TO_ADDR
// sCargo := false ;
31638: LD_ADDR_EXP 134
31642: PUSH
31643: LD_INT 0
31645: ST_TO_ADDR
// sDLaser := false ;
31646: LD_ADDR_EXP 135
31650: PUSH
31651: LD_INT 0
31653: ST_TO_ADDR
// sExchange := false ;
31654: LD_ADDR_EXP 136
31658: PUSH
31659: LD_INT 0
31661: ST_TO_ADDR
// sFac := false ;
31662: LD_ADDR_EXP 137
31666: PUSH
31667: LD_INT 0
31669: ST_TO_ADDR
// sPower := false ;
31670: LD_ADDR_EXP 138
31674: PUSH
31675: LD_INT 0
31677: ST_TO_ADDR
// sRandom := false ;
31678: LD_ADDR_EXP 139
31682: PUSH
31683: LD_INT 0
31685: ST_TO_ADDR
// sShield := false ;
31686: LD_ADDR_EXP 140
31690: PUSH
31691: LD_INT 0
31693: ST_TO_ADDR
// sTime := false ;
31694: LD_ADDR_EXP 141
31698: PUSH
31699: LD_INT 0
31701: ST_TO_ADDR
// sTools := false ;
31702: LD_ADDR_EXP 142
31706: PUSH
31707: LD_INT 0
31709: ST_TO_ADDR
// sSold := false ;
31710: LD_ADDR_EXP 107
31714: PUSH
31715: LD_INT 0
31717: ST_TO_ADDR
// sDiff := false ;
31718: LD_ADDR_EXP 108
31722: PUSH
31723: LD_INT 0
31725: ST_TO_ADDR
// sFog := false ;
31726: LD_ADDR_EXP 111
31730: PUSH
31731: LD_INT 0
31733: ST_TO_ADDR
// sReset := false ;
31734: LD_ADDR_EXP 112
31738: PUSH
31739: LD_INT 0
31741: ST_TO_ADDR
// sSun := false ;
31742: LD_ADDR_EXP 113
31746: PUSH
31747: LD_INT 0
31749: ST_TO_ADDR
// sTiger := false ;
31750: LD_ADDR_EXP 109
31754: PUSH
31755: LD_INT 0
31757: ST_TO_ADDR
// sBomb := false ;
31758: LD_ADDR_EXP 110
31762: PUSH
31763: LD_INT 0
31765: ST_TO_ADDR
// sWound := false ;
31766: LD_ADDR_EXP 118
31770: PUSH
31771: LD_INT 0
31773: ST_TO_ADDR
// sBetray := false ;
31774: LD_ADDR_EXP 122
31778: PUSH
31779: LD_INT 0
31781: ST_TO_ADDR
// sContamin := false ;
31782: LD_ADDR_EXP 123
31786: PUSH
31787: LD_INT 0
31789: ST_TO_ADDR
// sOil := false ;
31790: LD_ADDR_EXP 125
31794: PUSH
31795: LD_INT 0
31797: ST_TO_ADDR
// sStu := false ;
31798: LD_ADDR_EXP 129
31802: PUSH
31803: LD_INT 0
31805: ST_TO_ADDR
// sBazooka := false ;
31806: LD_ADDR_EXP 132
31810: PUSH
31811: LD_INT 0
31813: ST_TO_ADDR
// sMortar := false ;
31814: LD_ADDR_EXP 133
31818: PUSH
31819: LD_INT 0
31821: ST_TO_ADDR
// sRanger := false ;
31822: LD_ADDR_EXP 143
31826: PUSH
31827: LD_INT 0
31829: ST_TO_ADDR
// sComputer := false ;
31830: LD_ADDR_EXP 144
31834: PUSH
31835: LD_INT 0
31837: ST_TO_ADDR
// s30 := false ;
31838: LD_ADDR_EXP 145
31842: PUSH
31843: LD_INT 0
31845: ST_TO_ADDR
// s60 := false ;
31846: LD_ADDR_EXP 146
31850: PUSH
31851: LD_INT 0
31853: ST_TO_ADDR
// end ;
31854: LD_VAR 0 1
31858: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
31859: LD_INT 0
31861: PPUSH
31862: PPUSH
31863: PPUSH
31864: PPUSH
31865: PPUSH
31866: PPUSH
31867: PPUSH
// result := [ ] ;
31868: LD_ADDR_VAR 0 2
31872: PUSH
31873: EMPTY
31874: ST_TO_ADDR
// if campaign_id = 1 then
31875: LD_OWVAR 69
31879: PUSH
31880: LD_INT 1
31882: EQUAL
31883: IFFALSE 35049
// begin case mission_number of 1 :
31885: LD_OWVAR 70
31889: PUSH
31890: LD_INT 1
31892: DOUBLE
31893: EQUAL
31894: IFTRUE 31898
31896: GO 31974
31898: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
31899: LD_ADDR_VAR 0 2
31903: PUSH
31904: LD_INT 2
31906: PUSH
31907: LD_INT 4
31909: PUSH
31910: LD_INT 11
31912: PUSH
31913: LD_INT 12
31915: PUSH
31916: LD_INT 15
31918: PUSH
31919: LD_INT 16
31921: PUSH
31922: LD_INT 22
31924: PUSH
31925: LD_INT 23
31927: PUSH
31928: LD_INT 26
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: LIST
31936: LIST
31937: LIST
31938: LIST
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 101
31944: PUSH
31945: LD_INT 102
31947: PUSH
31948: LD_INT 106
31950: PUSH
31951: LD_INT 116
31953: PUSH
31954: LD_INT 117
31956: PUSH
31957: LD_INT 118
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: ST_TO_ADDR
31972: GO 35047
31974: LD_INT 2
31976: DOUBLE
31977: EQUAL
31978: IFTRUE 31982
31980: GO 32066
31982: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
31983: LD_ADDR_VAR 0 2
31987: PUSH
31988: LD_INT 2
31990: PUSH
31991: LD_INT 4
31993: PUSH
31994: LD_INT 11
31996: PUSH
31997: LD_INT 12
31999: PUSH
32000: LD_INT 15
32002: PUSH
32003: LD_INT 16
32005: PUSH
32006: LD_INT 22
32008: PUSH
32009: LD_INT 23
32011: PUSH
32012: LD_INT 26
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: LIST
32019: LIST
32020: LIST
32021: LIST
32022: LIST
32023: LIST
32024: LIST
32025: PUSH
32026: LD_INT 101
32028: PUSH
32029: LD_INT 102
32031: PUSH
32032: LD_INT 105
32034: PUSH
32035: LD_INT 106
32037: PUSH
32038: LD_INT 108
32040: PUSH
32041: LD_INT 116
32043: PUSH
32044: LD_INT 117
32046: PUSH
32047: LD_INT 118
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: LIST
32054: LIST
32055: LIST
32056: LIST
32057: LIST
32058: LIST
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: ST_TO_ADDR
32064: GO 35047
32066: LD_INT 3
32068: DOUBLE
32069: EQUAL
32070: IFTRUE 32074
32072: GO 32162
32074: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
32075: LD_ADDR_VAR 0 2
32079: PUSH
32080: LD_INT 2
32082: PUSH
32083: LD_INT 4
32085: PUSH
32086: LD_INT 5
32088: PUSH
32089: LD_INT 11
32091: PUSH
32092: LD_INT 12
32094: PUSH
32095: LD_INT 15
32097: PUSH
32098: LD_INT 16
32100: PUSH
32101: LD_INT 22
32103: PUSH
32104: LD_INT 26
32106: PUSH
32107: LD_INT 36
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: PUSH
32122: LD_INT 101
32124: PUSH
32125: LD_INT 102
32127: PUSH
32128: LD_INT 105
32130: PUSH
32131: LD_INT 106
32133: PUSH
32134: LD_INT 108
32136: PUSH
32137: LD_INT 116
32139: PUSH
32140: LD_INT 117
32142: PUSH
32143: LD_INT 118
32145: PUSH
32146: EMPTY
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: ST_TO_ADDR
32160: GO 35047
32162: LD_INT 4
32164: DOUBLE
32165: EQUAL
32166: IFTRUE 32170
32168: GO 32266
32170: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
32171: LD_ADDR_VAR 0 2
32175: PUSH
32176: LD_INT 2
32178: PUSH
32179: LD_INT 4
32181: PUSH
32182: LD_INT 5
32184: PUSH
32185: LD_INT 8
32187: PUSH
32188: LD_INT 11
32190: PUSH
32191: LD_INT 12
32193: PUSH
32194: LD_INT 15
32196: PUSH
32197: LD_INT 16
32199: PUSH
32200: LD_INT 22
32202: PUSH
32203: LD_INT 23
32205: PUSH
32206: LD_INT 26
32208: PUSH
32209: LD_INT 36
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: PUSH
32226: LD_INT 101
32228: PUSH
32229: LD_INT 102
32231: PUSH
32232: LD_INT 105
32234: PUSH
32235: LD_INT 106
32237: PUSH
32238: LD_INT 108
32240: PUSH
32241: LD_INT 116
32243: PUSH
32244: LD_INT 117
32246: PUSH
32247: LD_INT 118
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: LIST
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: ST_TO_ADDR
32264: GO 35047
32266: LD_INT 5
32268: DOUBLE
32269: EQUAL
32270: IFTRUE 32274
32272: GO 32386
32274: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
32275: LD_ADDR_VAR 0 2
32279: PUSH
32280: LD_INT 2
32282: PUSH
32283: LD_INT 4
32285: PUSH
32286: LD_INT 5
32288: PUSH
32289: LD_INT 6
32291: PUSH
32292: LD_INT 8
32294: PUSH
32295: LD_INT 11
32297: PUSH
32298: LD_INT 12
32300: PUSH
32301: LD_INT 15
32303: PUSH
32304: LD_INT 16
32306: PUSH
32307: LD_INT 22
32309: PUSH
32310: LD_INT 23
32312: PUSH
32313: LD_INT 25
32315: PUSH
32316: LD_INT 26
32318: PUSH
32319: LD_INT 36
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: LIST
32328: LIST
32329: LIST
32330: LIST
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: PUSH
32338: LD_INT 101
32340: PUSH
32341: LD_INT 102
32343: PUSH
32344: LD_INT 105
32346: PUSH
32347: LD_INT 106
32349: PUSH
32350: LD_INT 108
32352: PUSH
32353: LD_INT 109
32355: PUSH
32356: LD_INT 112
32358: PUSH
32359: LD_INT 116
32361: PUSH
32362: LD_INT 117
32364: PUSH
32365: LD_INT 118
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: ST_TO_ADDR
32384: GO 35047
32386: LD_INT 6
32388: DOUBLE
32389: EQUAL
32390: IFTRUE 32394
32392: GO 32526
32394: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32395: LD_ADDR_VAR 0 2
32399: PUSH
32400: LD_INT 2
32402: PUSH
32403: LD_INT 4
32405: PUSH
32406: LD_INT 5
32408: PUSH
32409: LD_INT 6
32411: PUSH
32412: LD_INT 8
32414: PUSH
32415: LD_INT 11
32417: PUSH
32418: LD_INT 12
32420: PUSH
32421: LD_INT 15
32423: PUSH
32424: LD_INT 16
32426: PUSH
32427: LD_INT 20
32429: PUSH
32430: LD_INT 21
32432: PUSH
32433: LD_INT 22
32435: PUSH
32436: LD_INT 23
32438: PUSH
32439: LD_INT 25
32441: PUSH
32442: LD_INT 26
32444: PUSH
32445: LD_INT 30
32447: PUSH
32448: LD_INT 31
32450: PUSH
32451: LD_INT 32
32453: PUSH
32454: LD_INT 36
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: PUSH
32478: LD_INT 101
32480: PUSH
32481: LD_INT 102
32483: PUSH
32484: LD_INT 105
32486: PUSH
32487: LD_INT 106
32489: PUSH
32490: LD_INT 108
32492: PUSH
32493: LD_INT 109
32495: PUSH
32496: LD_INT 112
32498: PUSH
32499: LD_INT 116
32501: PUSH
32502: LD_INT 117
32504: PUSH
32505: LD_INT 118
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: PUSH
32520: EMPTY
32521: LIST
32522: LIST
32523: ST_TO_ADDR
32524: GO 35047
32526: LD_INT 7
32528: DOUBLE
32529: EQUAL
32530: IFTRUE 32534
32532: GO 32646
32534: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32535: LD_ADDR_VAR 0 2
32539: PUSH
32540: LD_INT 2
32542: PUSH
32543: LD_INT 4
32545: PUSH
32546: LD_INT 5
32548: PUSH
32549: LD_INT 7
32551: PUSH
32552: LD_INT 11
32554: PUSH
32555: LD_INT 12
32557: PUSH
32558: LD_INT 15
32560: PUSH
32561: LD_INT 16
32563: PUSH
32564: LD_INT 20
32566: PUSH
32567: LD_INT 21
32569: PUSH
32570: LD_INT 22
32572: PUSH
32573: LD_INT 23
32575: PUSH
32576: LD_INT 25
32578: PUSH
32579: LD_INT 26
32581: PUSH
32582: EMPTY
32583: LIST
32584: LIST
32585: LIST
32586: LIST
32587: LIST
32588: LIST
32589: LIST
32590: LIST
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 101
32600: PUSH
32601: LD_INT 102
32603: PUSH
32604: LD_INT 103
32606: PUSH
32607: LD_INT 105
32609: PUSH
32610: LD_INT 106
32612: PUSH
32613: LD_INT 108
32615: PUSH
32616: LD_INT 112
32618: PUSH
32619: LD_INT 116
32621: PUSH
32622: LD_INT 117
32624: PUSH
32625: LD_INT 118
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: ST_TO_ADDR
32644: GO 35047
32646: LD_INT 8
32648: DOUBLE
32649: EQUAL
32650: IFTRUE 32654
32652: GO 32794
32654: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32655: LD_ADDR_VAR 0 2
32659: PUSH
32660: LD_INT 2
32662: PUSH
32663: LD_INT 4
32665: PUSH
32666: LD_INT 5
32668: PUSH
32669: LD_INT 6
32671: PUSH
32672: LD_INT 7
32674: PUSH
32675: LD_INT 8
32677: PUSH
32678: LD_INT 11
32680: PUSH
32681: LD_INT 12
32683: PUSH
32684: LD_INT 15
32686: PUSH
32687: LD_INT 16
32689: PUSH
32690: LD_INT 20
32692: PUSH
32693: LD_INT 21
32695: PUSH
32696: LD_INT 22
32698: PUSH
32699: LD_INT 23
32701: PUSH
32702: LD_INT 25
32704: PUSH
32705: LD_INT 26
32707: PUSH
32708: LD_INT 30
32710: PUSH
32711: LD_INT 31
32713: PUSH
32714: LD_INT 32
32716: PUSH
32717: LD_INT 36
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: PUSH
32742: LD_INT 101
32744: PUSH
32745: LD_INT 102
32747: PUSH
32748: LD_INT 103
32750: PUSH
32751: LD_INT 105
32753: PUSH
32754: LD_INT 106
32756: PUSH
32757: LD_INT 108
32759: PUSH
32760: LD_INT 109
32762: PUSH
32763: LD_INT 112
32765: PUSH
32766: LD_INT 116
32768: PUSH
32769: LD_INT 117
32771: PUSH
32772: LD_INT 118
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: PUSH
32788: EMPTY
32789: LIST
32790: LIST
32791: ST_TO_ADDR
32792: GO 35047
32794: LD_INT 9
32796: DOUBLE
32797: EQUAL
32798: IFTRUE 32802
32800: GO 32950
32802: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32803: LD_ADDR_VAR 0 2
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: LD_INT 4
32813: PUSH
32814: LD_INT 5
32816: PUSH
32817: LD_INT 6
32819: PUSH
32820: LD_INT 7
32822: PUSH
32823: LD_INT 8
32825: PUSH
32826: LD_INT 11
32828: PUSH
32829: LD_INT 12
32831: PUSH
32832: LD_INT 15
32834: PUSH
32835: LD_INT 16
32837: PUSH
32838: LD_INT 20
32840: PUSH
32841: LD_INT 21
32843: PUSH
32844: LD_INT 22
32846: PUSH
32847: LD_INT 23
32849: PUSH
32850: LD_INT 25
32852: PUSH
32853: LD_INT 26
32855: PUSH
32856: LD_INT 28
32858: PUSH
32859: LD_INT 30
32861: PUSH
32862: LD_INT 31
32864: PUSH
32865: LD_INT 32
32867: PUSH
32868: LD_INT 36
32870: PUSH
32871: EMPTY
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: PUSH
32894: LD_INT 101
32896: PUSH
32897: LD_INT 102
32899: PUSH
32900: LD_INT 103
32902: PUSH
32903: LD_INT 105
32905: PUSH
32906: LD_INT 106
32908: PUSH
32909: LD_INT 108
32911: PUSH
32912: LD_INT 109
32914: PUSH
32915: LD_INT 112
32917: PUSH
32918: LD_INT 114
32920: PUSH
32921: LD_INT 116
32923: PUSH
32924: LD_INT 117
32926: PUSH
32927: LD_INT 118
32929: PUSH
32930: EMPTY
32931: LIST
32932: LIST
32933: LIST
32934: LIST
32935: LIST
32936: LIST
32937: LIST
32938: LIST
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: PUSH
32944: EMPTY
32945: LIST
32946: LIST
32947: ST_TO_ADDR
32948: GO 35047
32950: LD_INT 10
32952: DOUBLE
32953: EQUAL
32954: IFTRUE 32958
32956: GO 33154
32958: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
32959: LD_ADDR_VAR 0 2
32963: PUSH
32964: LD_INT 2
32966: PUSH
32967: LD_INT 4
32969: PUSH
32970: LD_INT 5
32972: PUSH
32973: LD_INT 6
32975: PUSH
32976: LD_INT 7
32978: PUSH
32979: LD_INT 8
32981: PUSH
32982: LD_INT 9
32984: PUSH
32985: LD_INT 10
32987: PUSH
32988: LD_INT 11
32990: PUSH
32991: LD_INT 12
32993: PUSH
32994: LD_INT 13
32996: PUSH
32997: LD_INT 14
32999: PUSH
33000: LD_INT 15
33002: PUSH
33003: LD_INT 16
33005: PUSH
33006: LD_INT 17
33008: PUSH
33009: LD_INT 18
33011: PUSH
33012: LD_INT 19
33014: PUSH
33015: LD_INT 20
33017: PUSH
33018: LD_INT 21
33020: PUSH
33021: LD_INT 22
33023: PUSH
33024: LD_INT 23
33026: PUSH
33027: LD_INT 24
33029: PUSH
33030: LD_INT 25
33032: PUSH
33033: LD_INT 26
33035: PUSH
33036: LD_INT 28
33038: PUSH
33039: LD_INT 30
33041: PUSH
33042: LD_INT 31
33044: PUSH
33045: LD_INT 32
33047: PUSH
33048: LD_INT 36
33050: PUSH
33051: EMPTY
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: PUSH
33082: LD_INT 101
33084: PUSH
33085: LD_INT 102
33087: PUSH
33088: LD_INT 103
33090: PUSH
33091: LD_INT 104
33093: PUSH
33094: LD_INT 105
33096: PUSH
33097: LD_INT 106
33099: PUSH
33100: LD_INT 107
33102: PUSH
33103: LD_INT 108
33105: PUSH
33106: LD_INT 109
33108: PUSH
33109: LD_INT 110
33111: PUSH
33112: LD_INT 111
33114: PUSH
33115: LD_INT 112
33117: PUSH
33118: LD_INT 114
33120: PUSH
33121: LD_INT 116
33123: PUSH
33124: LD_INT 117
33126: PUSH
33127: LD_INT 118
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: LIST
33137: LIST
33138: LIST
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: ST_TO_ADDR
33152: GO 35047
33154: LD_INT 11
33156: DOUBLE
33157: EQUAL
33158: IFTRUE 33162
33160: GO 33366
33162: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
33163: LD_ADDR_VAR 0 2
33167: PUSH
33168: LD_INT 2
33170: PUSH
33171: LD_INT 3
33173: PUSH
33174: LD_INT 4
33176: PUSH
33177: LD_INT 5
33179: PUSH
33180: LD_INT 6
33182: PUSH
33183: LD_INT 7
33185: PUSH
33186: LD_INT 8
33188: PUSH
33189: LD_INT 9
33191: PUSH
33192: LD_INT 10
33194: PUSH
33195: LD_INT 11
33197: PUSH
33198: LD_INT 12
33200: PUSH
33201: LD_INT 13
33203: PUSH
33204: LD_INT 14
33206: PUSH
33207: LD_INT 15
33209: PUSH
33210: LD_INT 16
33212: PUSH
33213: LD_INT 17
33215: PUSH
33216: LD_INT 18
33218: PUSH
33219: LD_INT 19
33221: PUSH
33222: LD_INT 20
33224: PUSH
33225: LD_INT 21
33227: PUSH
33228: LD_INT 22
33230: PUSH
33231: LD_INT 23
33233: PUSH
33234: LD_INT 24
33236: PUSH
33237: LD_INT 25
33239: PUSH
33240: LD_INT 26
33242: PUSH
33243: LD_INT 28
33245: PUSH
33246: LD_INT 30
33248: PUSH
33249: LD_INT 31
33251: PUSH
33252: LD_INT 32
33254: PUSH
33255: LD_INT 34
33257: PUSH
33258: LD_INT 36
33260: PUSH
33261: EMPTY
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: PUSH
33294: LD_INT 101
33296: PUSH
33297: LD_INT 102
33299: PUSH
33300: LD_INT 103
33302: PUSH
33303: LD_INT 104
33305: PUSH
33306: LD_INT 105
33308: PUSH
33309: LD_INT 106
33311: PUSH
33312: LD_INT 107
33314: PUSH
33315: LD_INT 108
33317: PUSH
33318: LD_INT 109
33320: PUSH
33321: LD_INT 110
33323: PUSH
33324: LD_INT 111
33326: PUSH
33327: LD_INT 112
33329: PUSH
33330: LD_INT 114
33332: PUSH
33333: LD_INT 116
33335: PUSH
33336: LD_INT 117
33338: PUSH
33339: LD_INT 118
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: PUSH
33360: EMPTY
33361: LIST
33362: LIST
33363: ST_TO_ADDR
33364: GO 35047
33366: LD_INT 12
33368: DOUBLE
33369: EQUAL
33370: IFTRUE 33374
33372: GO 33594
33374: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33375: LD_ADDR_VAR 0 2
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: LD_INT 2
33385: PUSH
33386: LD_INT 3
33388: PUSH
33389: LD_INT 4
33391: PUSH
33392: LD_INT 5
33394: PUSH
33395: LD_INT 6
33397: PUSH
33398: LD_INT 7
33400: PUSH
33401: LD_INT 8
33403: PUSH
33404: LD_INT 9
33406: PUSH
33407: LD_INT 10
33409: PUSH
33410: LD_INT 11
33412: PUSH
33413: LD_INT 12
33415: PUSH
33416: LD_INT 13
33418: PUSH
33419: LD_INT 14
33421: PUSH
33422: LD_INT 15
33424: PUSH
33425: LD_INT 16
33427: PUSH
33428: LD_INT 17
33430: PUSH
33431: LD_INT 18
33433: PUSH
33434: LD_INT 19
33436: PUSH
33437: LD_INT 20
33439: PUSH
33440: LD_INT 21
33442: PUSH
33443: LD_INT 22
33445: PUSH
33446: LD_INT 23
33448: PUSH
33449: LD_INT 24
33451: PUSH
33452: LD_INT 25
33454: PUSH
33455: LD_INT 26
33457: PUSH
33458: LD_INT 27
33460: PUSH
33461: LD_INT 28
33463: PUSH
33464: LD_INT 30
33466: PUSH
33467: LD_INT 31
33469: PUSH
33470: LD_INT 32
33472: PUSH
33473: LD_INT 33
33475: PUSH
33476: LD_INT 34
33478: PUSH
33479: LD_INT 36
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: PUSH
33518: LD_INT 101
33520: PUSH
33521: LD_INT 102
33523: PUSH
33524: LD_INT 103
33526: PUSH
33527: LD_INT 104
33529: PUSH
33530: LD_INT 105
33532: PUSH
33533: LD_INT 106
33535: PUSH
33536: LD_INT 107
33538: PUSH
33539: LD_INT 108
33541: PUSH
33542: LD_INT 109
33544: PUSH
33545: LD_INT 110
33547: PUSH
33548: LD_INT 111
33550: PUSH
33551: LD_INT 112
33553: PUSH
33554: LD_INT 113
33556: PUSH
33557: LD_INT 114
33559: PUSH
33560: LD_INT 116
33562: PUSH
33563: LD_INT 117
33565: PUSH
33566: LD_INT 118
33568: PUSH
33569: EMPTY
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: ST_TO_ADDR
33592: GO 35047
33594: LD_INT 13
33596: DOUBLE
33597: EQUAL
33598: IFTRUE 33602
33600: GO 33810
33602: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33603: LD_ADDR_VAR 0 2
33607: PUSH
33608: LD_INT 1
33610: PUSH
33611: LD_INT 2
33613: PUSH
33614: LD_INT 3
33616: PUSH
33617: LD_INT 4
33619: PUSH
33620: LD_INT 5
33622: PUSH
33623: LD_INT 8
33625: PUSH
33626: LD_INT 9
33628: PUSH
33629: LD_INT 10
33631: PUSH
33632: LD_INT 11
33634: PUSH
33635: LD_INT 12
33637: PUSH
33638: LD_INT 14
33640: PUSH
33641: LD_INT 15
33643: PUSH
33644: LD_INT 16
33646: PUSH
33647: LD_INT 17
33649: PUSH
33650: LD_INT 18
33652: PUSH
33653: LD_INT 19
33655: PUSH
33656: LD_INT 20
33658: PUSH
33659: LD_INT 21
33661: PUSH
33662: LD_INT 22
33664: PUSH
33665: LD_INT 23
33667: PUSH
33668: LD_INT 24
33670: PUSH
33671: LD_INT 25
33673: PUSH
33674: LD_INT 26
33676: PUSH
33677: LD_INT 27
33679: PUSH
33680: LD_INT 28
33682: PUSH
33683: LD_INT 30
33685: PUSH
33686: LD_INT 31
33688: PUSH
33689: LD_INT 32
33691: PUSH
33692: LD_INT 33
33694: PUSH
33695: LD_INT 34
33697: PUSH
33698: LD_INT 36
33700: PUSH
33701: EMPTY
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: PUSH
33734: LD_INT 101
33736: PUSH
33737: LD_INT 102
33739: PUSH
33740: LD_INT 103
33742: PUSH
33743: LD_INT 104
33745: PUSH
33746: LD_INT 105
33748: PUSH
33749: LD_INT 106
33751: PUSH
33752: LD_INT 107
33754: PUSH
33755: LD_INT 108
33757: PUSH
33758: LD_INT 109
33760: PUSH
33761: LD_INT 110
33763: PUSH
33764: LD_INT 111
33766: PUSH
33767: LD_INT 112
33769: PUSH
33770: LD_INT 113
33772: PUSH
33773: LD_INT 114
33775: PUSH
33776: LD_INT 116
33778: PUSH
33779: LD_INT 117
33781: PUSH
33782: LD_INT 118
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: ST_TO_ADDR
33808: GO 35047
33810: LD_INT 14
33812: DOUBLE
33813: EQUAL
33814: IFTRUE 33818
33816: GO 34042
33818: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
33819: LD_ADDR_VAR 0 2
33823: PUSH
33824: LD_INT 1
33826: PUSH
33827: LD_INT 2
33829: PUSH
33830: LD_INT 3
33832: PUSH
33833: LD_INT 4
33835: PUSH
33836: LD_INT 5
33838: PUSH
33839: LD_INT 6
33841: PUSH
33842: LD_INT 7
33844: PUSH
33845: LD_INT 8
33847: PUSH
33848: LD_INT 9
33850: PUSH
33851: LD_INT 10
33853: PUSH
33854: LD_INT 11
33856: PUSH
33857: LD_INT 12
33859: PUSH
33860: LD_INT 13
33862: PUSH
33863: LD_INT 14
33865: PUSH
33866: LD_INT 15
33868: PUSH
33869: LD_INT 16
33871: PUSH
33872: LD_INT 17
33874: PUSH
33875: LD_INT 18
33877: PUSH
33878: LD_INT 19
33880: PUSH
33881: LD_INT 20
33883: PUSH
33884: LD_INT 21
33886: PUSH
33887: LD_INT 22
33889: PUSH
33890: LD_INT 23
33892: PUSH
33893: LD_INT 24
33895: PUSH
33896: LD_INT 25
33898: PUSH
33899: LD_INT 26
33901: PUSH
33902: LD_INT 27
33904: PUSH
33905: LD_INT 28
33907: PUSH
33908: LD_INT 29
33910: PUSH
33911: LD_INT 30
33913: PUSH
33914: LD_INT 31
33916: PUSH
33917: LD_INT 32
33919: PUSH
33920: LD_INT 33
33922: PUSH
33923: LD_INT 34
33925: PUSH
33926: LD_INT 36
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: PUSH
33966: LD_INT 101
33968: PUSH
33969: LD_INT 102
33971: PUSH
33972: LD_INT 103
33974: PUSH
33975: LD_INT 104
33977: PUSH
33978: LD_INT 105
33980: PUSH
33981: LD_INT 106
33983: PUSH
33984: LD_INT 107
33986: PUSH
33987: LD_INT 108
33989: PUSH
33990: LD_INT 109
33992: PUSH
33993: LD_INT 110
33995: PUSH
33996: LD_INT 111
33998: PUSH
33999: LD_INT 112
34001: PUSH
34002: LD_INT 113
34004: PUSH
34005: LD_INT 114
34007: PUSH
34008: LD_INT 116
34010: PUSH
34011: LD_INT 117
34013: PUSH
34014: LD_INT 118
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: ST_TO_ADDR
34040: GO 35047
34042: LD_INT 15
34044: DOUBLE
34045: EQUAL
34046: IFTRUE 34050
34048: GO 34274
34050: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
34051: LD_ADDR_VAR 0 2
34055: PUSH
34056: LD_INT 1
34058: PUSH
34059: LD_INT 2
34061: PUSH
34062: LD_INT 3
34064: PUSH
34065: LD_INT 4
34067: PUSH
34068: LD_INT 5
34070: PUSH
34071: LD_INT 6
34073: PUSH
34074: LD_INT 7
34076: PUSH
34077: LD_INT 8
34079: PUSH
34080: LD_INT 9
34082: PUSH
34083: LD_INT 10
34085: PUSH
34086: LD_INT 11
34088: PUSH
34089: LD_INT 12
34091: PUSH
34092: LD_INT 13
34094: PUSH
34095: LD_INT 14
34097: PUSH
34098: LD_INT 15
34100: PUSH
34101: LD_INT 16
34103: PUSH
34104: LD_INT 17
34106: PUSH
34107: LD_INT 18
34109: PUSH
34110: LD_INT 19
34112: PUSH
34113: LD_INT 20
34115: PUSH
34116: LD_INT 21
34118: PUSH
34119: LD_INT 22
34121: PUSH
34122: LD_INT 23
34124: PUSH
34125: LD_INT 24
34127: PUSH
34128: LD_INT 25
34130: PUSH
34131: LD_INT 26
34133: PUSH
34134: LD_INT 27
34136: PUSH
34137: LD_INT 28
34139: PUSH
34140: LD_INT 29
34142: PUSH
34143: LD_INT 30
34145: PUSH
34146: LD_INT 31
34148: PUSH
34149: LD_INT 32
34151: PUSH
34152: LD_INT 33
34154: PUSH
34155: LD_INT 34
34157: PUSH
34158: LD_INT 36
34160: PUSH
34161: EMPTY
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: PUSH
34198: LD_INT 101
34200: PUSH
34201: LD_INT 102
34203: PUSH
34204: LD_INT 103
34206: PUSH
34207: LD_INT 104
34209: PUSH
34210: LD_INT 105
34212: PUSH
34213: LD_INT 106
34215: PUSH
34216: LD_INT 107
34218: PUSH
34219: LD_INT 108
34221: PUSH
34222: LD_INT 109
34224: PUSH
34225: LD_INT 110
34227: PUSH
34228: LD_INT 111
34230: PUSH
34231: LD_INT 112
34233: PUSH
34234: LD_INT 113
34236: PUSH
34237: LD_INT 114
34239: PUSH
34240: LD_INT 116
34242: PUSH
34243: LD_INT 117
34245: PUSH
34246: LD_INT 118
34248: PUSH
34249: EMPTY
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: PUSH
34268: EMPTY
34269: LIST
34270: LIST
34271: ST_TO_ADDR
34272: GO 35047
34274: LD_INT 16
34276: DOUBLE
34277: EQUAL
34278: IFTRUE 34282
34280: GO 34418
34282: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
34283: LD_ADDR_VAR 0 2
34287: PUSH
34288: LD_INT 2
34290: PUSH
34291: LD_INT 4
34293: PUSH
34294: LD_INT 5
34296: PUSH
34297: LD_INT 7
34299: PUSH
34300: LD_INT 11
34302: PUSH
34303: LD_INT 12
34305: PUSH
34306: LD_INT 15
34308: PUSH
34309: LD_INT 16
34311: PUSH
34312: LD_INT 20
34314: PUSH
34315: LD_INT 21
34317: PUSH
34318: LD_INT 22
34320: PUSH
34321: LD_INT 23
34323: PUSH
34324: LD_INT 25
34326: PUSH
34327: LD_INT 26
34329: PUSH
34330: LD_INT 30
34332: PUSH
34333: LD_INT 31
34335: PUSH
34336: LD_INT 32
34338: PUSH
34339: LD_INT 33
34341: PUSH
34342: LD_INT 34
34344: PUSH
34345: EMPTY
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: PUSH
34366: LD_INT 101
34368: PUSH
34369: LD_INT 102
34371: PUSH
34372: LD_INT 103
34374: PUSH
34375: LD_INT 106
34377: PUSH
34378: LD_INT 108
34380: PUSH
34381: LD_INT 112
34383: PUSH
34384: LD_INT 113
34386: PUSH
34387: LD_INT 114
34389: PUSH
34390: LD_INT 116
34392: PUSH
34393: LD_INT 117
34395: PUSH
34396: LD_INT 118
34398: PUSH
34399: EMPTY
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: PUSH
34412: EMPTY
34413: LIST
34414: LIST
34415: ST_TO_ADDR
34416: GO 35047
34418: LD_INT 17
34420: DOUBLE
34421: EQUAL
34422: IFTRUE 34426
34424: GO 34650
34426: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34427: LD_ADDR_VAR 0 2
34431: PUSH
34432: LD_INT 1
34434: PUSH
34435: LD_INT 2
34437: PUSH
34438: LD_INT 3
34440: PUSH
34441: LD_INT 4
34443: PUSH
34444: LD_INT 5
34446: PUSH
34447: LD_INT 6
34449: PUSH
34450: LD_INT 7
34452: PUSH
34453: LD_INT 8
34455: PUSH
34456: LD_INT 9
34458: PUSH
34459: LD_INT 10
34461: PUSH
34462: LD_INT 11
34464: PUSH
34465: LD_INT 12
34467: PUSH
34468: LD_INT 13
34470: PUSH
34471: LD_INT 14
34473: PUSH
34474: LD_INT 15
34476: PUSH
34477: LD_INT 16
34479: PUSH
34480: LD_INT 17
34482: PUSH
34483: LD_INT 18
34485: PUSH
34486: LD_INT 19
34488: PUSH
34489: LD_INT 20
34491: PUSH
34492: LD_INT 21
34494: PUSH
34495: LD_INT 22
34497: PUSH
34498: LD_INT 23
34500: PUSH
34501: LD_INT 24
34503: PUSH
34504: LD_INT 25
34506: PUSH
34507: LD_INT 26
34509: PUSH
34510: LD_INT 27
34512: PUSH
34513: LD_INT 28
34515: PUSH
34516: LD_INT 29
34518: PUSH
34519: LD_INT 30
34521: PUSH
34522: LD_INT 31
34524: PUSH
34525: LD_INT 32
34527: PUSH
34528: LD_INT 33
34530: PUSH
34531: LD_INT 34
34533: PUSH
34534: LD_INT 36
34536: PUSH
34537: EMPTY
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: PUSH
34574: LD_INT 101
34576: PUSH
34577: LD_INT 102
34579: PUSH
34580: LD_INT 103
34582: PUSH
34583: LD_INT 104
34585: PUSH
34586: LD_INT 105
34588: PUSH
34589: LD_INT 106
34591: PUSH
34592: LD_INT 107
34594: PUSH
34595: LD_INT 108
34597: PUSH
34598: LD_INT 109
34600: PUSH
34601: LD_INT 110
34603: PUSH
34604: LD_INT 111
34606: PUSH
34607: LD_INT 112
34609: PUSH
34610: LD_INT 113
34612: PUSH
34613: LD_INT 114
34615: PUSH
34616: LD_INT 116
34618: PUSH
34619: LD_INT 117
34621: PUSH
34622: LD_INT 118
34624: PUSH
34625: EMPTY
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: LIST
34632: LIST
34633: LIST
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: ST_TO_ADDR
34648: GO 35047
34650: LD_INT 18
34652: DOUBLE
34653: EQUAL
34654: IFTRUE 34658
34656: GO 34806
34658: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34659: LD_ADDR_VAR 0 2
34663: PUSH
34664: LD_INT 2
34666: PUSH
34667: LD_INT 4
34669: PUSH
34670: LD_INT 5
34672: PUSH
34673: LD_INT 7
34675: PUSH
34676: LD_INT 11
34678: PUSH
34679: LD_INT 12
34681: PUSH
34682: LD_INT 15
34684: PUSH
34685: LD_INT 16
34687: PUSH
34688: LD_INT 20
34690: PUSH
34691: LD_INT 21
34693: PUSH
34694: LD_INT 22
34696: PUSH
34697: LD_INT 23
34699: PUSH
34700: LD_INT 25
34702: PUSH
34703: LD_INT 26
34705: PUSH
34706: LD_INT 30
34708: PUSH
34709: LD_INT 31
34711: PUSH
34712: LD_INT 32
34714: PUSH
34715: LD_INT 33
34717: PUSH
34718: LD_INT 34
34720: PUSH
34721: LD_INT 35
34723: PUSH
34724: LD_INT 36
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: PUSH
34750: LD_INT 101
34752: PUSH
34753: LD_INT 102
34755: PUSH
34756: LD_INT 103
34758: PUSH
34759: LD_INT 106
34761: PUSH
34762: LD_INT 108
34764: PUSH
34765: LD_INT 112
34767: PUSH
34768: LD_INT 113
34770: PUSH
34771: LD_INT 114
34773: PUSH
34774: LD_INT 115
34776: PUSH
34777: LD_INT 116
34779: PUSH
34780: LD_INT 117
34782: PUSH
34783: LD_INT 118
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: ST_TO_ADDR
34804: GO 35047
34806: LD_INT 19
34808: DOUBLE
34809: EQUAL
34810: IFTRUE 34814
34812: GO 35046
34814: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
34815: LD_ADDR_VAR 0 2
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: LD_INT 2
34825: PUSH
34826: LD_INT 3
34828: PUSH
34829: LD_INT 4
34831: PUSH
34832: LD_INT 5
34834: PUSH
34835: LD_INT 6
34837: PUSH
34838: LD_INT 7
34840: PUSH
34841: LD_INT 8
34843: PUSH
34844: LD_INT 9
34846: PUSH
34847: LD_INT 10
34849: PUSH
34850: LD_INT 11
34852: PUSH
34853: LD_INT 12
34855: PUSH
34856: LD_INT 13
34858: PUSH
34859: LD_INT 14
34861: PUSH
34862: LD_INT 15
34864: PUSH
34865: LD_INT 16
34867: PUSH
34868: LD_INT 17
34870: PUSH
34871: LD_INT 18
34873: PUSH
34874: LD_INT 19
34876: PUSH
34877: LD_INT 20
34879: PUSH
34880: LD_INT 21
34882: PUSH
34883: LD_INT 22
34885: PUSH
34886: LD_INT 23
34888: PUSH
34889: LD_INT 24
34891: PUSH
34892: LD_INT 25
34894: PUSH
34895: LD_INT 26
34897: PUSH
34898: LD_INT 27
34900: PUSH
34901: LD_INT 28
34903: PUSH
34904: LD_INT 29
34906: PUSH
34907: LD_INT 30
34909: PUSH
34910: LD_INT 31
34912: PUSH
34913: LD_INT 32
34915: PUSH
34916: LD_INT 33
34918: PUSH
34919: LD_INT 34
34921: PUSH
34922: LD_INT 35
34924: PUSH
34925: LD_INT 36
34927: PUSH
34928: EMPTY
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: PUSH
34966: LD_INT 101
34968: PUSH
34969: LD_INT 102
34971: PUSH
34972: LD_INT 103
34974: PUSH
34975: LD_INT 104
34977: PUSH
34978: LD_INT 105
34980: PUSH
34981: LD_INT 106
34983: PUSH
34984: LD_INT 107
34986: PUSH
34987: LD_INT 108
34989: PUSH
34990: LD_INT 109
34992: PUSH
34993: LD_INT 110
34995: PUSH
34996: LD_INT 111
34998: PUSH
34999: LD_INT 112
35001: PUSH
35002: LD_INT 113
35004: PUSH
35005: LD_INT 114
35007: PUSH
35008: LD_INT 115
35010: PUSH
35011: LD_INT 116
35013: PUSH
35014: LD_INT 117
35016: PUSH
35017: LD_INT 118
35019: PUSH
35020: EMPTY
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: LIST
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: ST_TO_ADDR
35044: GO 35047
35046: POP
// end else
35047: GO 35278
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
35049: LD_ADDR_VAR 0 2
35053: PUSH
35054: LD_INT 1
35056: PUSH
35057: LD_INT 2
35059: PUSH
35060: LD_INT 3
35062: PUSH
35063: LD_INT 4
35065: PUSH
35066: LD_INT 5
35068: PUSH
35069: LD_INT 6
35071: PUSH
35072: LD_INT 7
35074: PUSH
35075: LD_INT 8
35077: PUSH
35078: LD_INT 9
35080: PUSH
35081: LD_INT 10
35083: PUSH
35084: LD_INT 11
35086: PUSH
35087: LD_INT 12
35089: PUSH
35090: LD_INT 13
35092: PUSH
35093: LD_INT 14
35095: PUSH
35096: LD_INT 15
35098: PUSH
35099: LD_INT 16
35101: PUSH
35102: LD_INT 17
35104: PUSH
35105: LD_INT 18
35107: PUSH
35108: LD_INT 19
35110: PUSH
35111: LD_INT 20
35113: PUSH
35114: LD_INT 21
35116: PUSH
35117: LD_INT 22
35119: PUSH
35120: LD_INT 23
35122: PUSH
35123: LD_INT 24
35125: PUSH
35126: LD_INT 25
35128: PUSH
35129: LD_INT 26
35131: PUSH
35132: LD_INT 27
35134: PUSH
35135: LD_INT 28
35137: PUSH
35138: LD_INT 29
35140: PUSH
35141: LD_INT 30
35143: PUSH
35144: LD_INT 31
35146: PUSH
35147: LD_INT 32
35149: PUSH
35150: LD_INT 33
35152: PUSH
35153: LD_INT 34
35155: PUSH
35156: LD_INT 35
35158: PUSH
35159: LD_INT 36
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: PUSH
35200: LD_INT 101
35202: PUSH
35203: LD_INT 102
35205: PUSH
35206: LD_INT 103
35208: PUSH
35209: LD_INT 104
35211: PUSH
35212: LD_INT 105
35214: PUSH
35215: LD_INT 106
35217: PUSH
35218: LD_INT 107
35220: PUSH
35221: LD_INT 108
35223: PUSH
35224: LD_INT 109
35226: PUSH
35227: LD_INT 110
35229: PUSH
35230: LD_INT 111
35232: PUSH
35233: LD_INT 112
35235: PUSH
35236: LD_INT 113
35238: PUSH
35239: LD_INT 114
35241: PUSH
35242: LD_INT 115
35244: PUSH
35245: LD_INT 116
35247: PUSH
35248: LD_INT 117
35250: PUSH
35251: LD_INT 118
35253: PUSH
35254: EMPTY
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: LIST
35262: LIST
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: PUSH
35274: EMPTY
35275: LIST
35276: LIST
35277: ST_TO_ADDR
// if result then
35278: LD_VAR 0 2
35282: IFFALSE 36068
// begin normal :=  ;
35284: LD_ADDR_VAR 0 5
35288: PUSH
35289: LD_STRING 
35291: ST_TO_ADDR
// hardcore :=  ;
35292: LD_ADDR_VAR 0 6
35296: PUSH
35297: LD_STRING 
35299: ST_TO_ADDR
// active :=  ;
35300: LD_ADDR_VAR 0 7
35304: PUSH
35305: LD_STRING 
35307: ST_TO_ADDR
// for i = 1 to normalCounter do
35308: LD_ADDR_VAR 0 8
35312: PUSH
35313: DOUBLE
35314: LD_INT 1
35316: DEC
35317: ST_TO_ADDR
35318: LD_EXP 91
35322: PUSH
35323: FOR_TO
35324: IFFALSE 35425
// begin tmp := 0 ;
35326: LD_ADDR_VAR 0 3
35330: PUSH
35331: LD_STRING 0
35333: ST_TO_ADDR
// if result [ 1 ] then
35334: LD_VAR 0 2
35338: PUSH
35339: LD_INT 1
35341: ARRAY
35342: IFFALSE 35407
// if result [ 1 ] [ 1 ] = i then
35344: LD_VAR 0 2
35348: PUSH
35349: LD_INT 1
35351: ARRAY
35352: PUSH
35353: LD_INT 1
35355: ARRAY
35356: PUSH
35357: LD_VAR 0 8
35361: EQUAL
35362: IFFALSE 35407
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35364: LD_ADDR_VAR 0 2
35368: PUSH
35369: LD_VAR 0 2
35373: PPUSH
35374: LD_INT 1
35376: PPUSH
35377: LD_VAR 0 2
35381: PUSH
35382: LD_INT 1
35384: ARRAY
35385: PPUSH
35386: LD_INT 1
35388: PPUSH
35389: CALL_OW 3
35393: PPUSH
35394: CALL_OW 1
35398: ST_TO_ADDR
// tmp := 1 ;
35399: LD_ADDR_VAR 0 3
35403: PUSH
35404: LD_STRING 1
35406: ST_TO_ADDR
// end ; normal := normal & tmp ;
35407: LD_ADDR_VAR 0 5
35411: PUSH
35412: LD_VAR 0 5
35416: PUSH
35417: LD_VAR 0 3
35421: STR
35422: ST_TO_ADDR
// end ;
35423: GO 35323
35425: POP
35426: POP
// for i = 1 to hardcoreCounter do
35427: LD_ADDR_VAR 0 8
35431: PUSH
35432: DOUBLE
35433: LD_INT 1
35435: DEC
35436: ST_TO_ADDR
35437: LD_EXP 92
35441: PUSH
35442: FOR_TO
35443: IFFALSE 35548
// begin tmp := 0 ;
35445: LD_ADDR_VAR 0 3
35449: PUSH
35450: LD_STRING 0
35452: ST_TO_ADDR
// if result [ 2 ] then
35453: LD_VAR 0 2
35457: PUSH
35458: LD_INT 2
35460: ARRAY
35461: IFFALSE 35530
// if result [ 2 ] [ 1 ] = 100 + i then
35463: LD_VAR 0 2
35467: PUSH
35468: LD_INT 2
35470: ARRAY
35471: PUSH
35472: LD_INT 1
35474: ARRAY
35475: PUSH
35476: LD_INT 100
35478: PUSH
35479: LD_VAR 0 8
35483: PLUS
35484: EQUAL
35485: IFFALSE 35530
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35487: LD_ADDR_VAR 0 2
35491: PUSH
35492: LD_VAR 0 2
35496: PPUSH
35497: LD_INT 2
35499: PPUSH
35500: LD_VAR 0 2
35504: PUSH
35505: LD_INT 2
35507: ARRAY
35508: PPUSH
35509: LD_INT 1
35511: PPUSH
35512: CALL_OW 3
35516: PPUSH
35517: CALL_OW 1
35521: ST_TO_ADDR
// tmp := 1 ;
35522: LD_ADDR_VAR 0 3
35526: PUSH
35527: LD_STRING 1
35529: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35530: LD_ADDR_VAR 0 6
35534: PUSH
35535: LD_VAR 0 6
35539: PUSH
35540: LD_VAR 0 3
35544: STR
35545: ST_TO_ADDR
// end ;
35546: GO 35442
35548: POP
35549: POP
// if isGameLoad then
35550: LD_VAR 0 1
35554: IFFALSE 36029
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35556: LD_ADDR_VAR 0 4
35560: PUSH
35561: LD_EXP 95
35565: PUSH
35566: LD_EXP 94
35570: PUSH
35571: LD_EXP 96
35575: PUSH
35576: LD_EXP 93
35580: PUSH
35581: LD_EXP 97
35585: PUSH
35586: LD_EXP 98
35590: PUSH
35591: LD_EXP 99
35595: PUSH
35596: LD_EXP 100
35600: PUSH
35601: LD_EXP 101
35605: PUSH
35606: LD_EXP 102
35610: PUSH
35611: LD_EXP 103
35615: PUSH
35616: LD_EXP 104
35620: PUSH
35621: LD_EXP 105
35625: PUSH
35626: LD_EXP 106
35630: PUSH
35631: LD_EXP 114
35635: PUSH
35636: LD_EXP 115
35640: PUSH
35641: LD_EXP 116
35645: PUSH
35646: LD_EXP 117
35650: PUSH
35651: LD_EXP 119
35655: PUSH
35656: LD_EXP 120
35660: PUSH
35661: LD_EXP 121
35665: PUSH
35666: LD_EXP 124
35670: PUSH
35671: LD_EXP 126
35675: PUSH
35676: LD_EXP 127
35680: PUSH
35681: LD_EXP 128
35685: PUSH
35686: LD_EXP 130
35690: PUSH
35691: LD_EXP 131
35695: PUSH
35696: LD_EXP 134
35700: PUSH
35701: LD_EXP 135
35705: PUSH
35706: LD_EXP 136
35710: PUSH
35711: LD_EXP 137
35715: PUSH
35716: LD_EXP 138
35720: PUSH
35721: LD_EXP 139
35725: PUSH
35726: LD_EXP 140
35730: PUSH
35731: LD_EXP 141
35735: PUSH
35736: LD_EXP 142
35740: PUSH
35741: LD_EXP 107
35745: PUSH
35746: LD_EXP 108
35750: PUSH
35751: LD_EXP 111
35755: PUSH
35756: LD_EXP 112
35760: PUSH
35761: LD_EXP 113
35765: PUSH
35766: LD_EXP 109
35770: PUSH
35771: LD_EXP 110
35775: PUSH
35776: LD_EXP 118
35780: PUSH
35781: LD_EXP 122
35785: PUSH
35786: LD_EXP 123
35790: PUSH
35791: LD_EXP 125
35795: PUSH
35796: LD_EXP 129
35800: PUSH
35801: LD_EXP 132
35805: PUSH
35806: LD_EXP 133
35810: PUSH
35811: LD_EXP 143
35815: PUSH
35816: LD_EXP 144
35820: PUSH
35821: LD_EXP 145
35825: PUSH
35826: LD_EXP 146
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: ST_TO_ADDR
// tmp :=  ;
35887: LD_ADDR_VAR 0 3
35891: PUSH
35892: LD_STRING 
35894: ST_TO_ADDR
// for i = 1 to normalCounter do
35895: LD_ADDR_VAR 0 8
35899: PUSH
35900: DOUBLE
35901: LD_INT 1
35903: DEC
35904: ST_TO_ADDR
35905: LD_EXP 91
35909: PUSH
35910: FOR_TO
35911: IFFALSE 35947
// begin if flags [ i ] then
35913: LD_VAR 0 4
35917: PUSH
35918: LD_VAR 0 8
35922: ARRAY
35923: IFFALSE 35945
// tmp := tmp & i & ; ;
35925: LD_ADDR_VAR 0 3
35929: PUSH
35930: LD_VAR 0 3
35934: PUSH
35935: LD_VAR 0 8
35939: STR
35940: PUSH
35941: LD_STRING ;
35943: STR
35944: ST_TO_ADDR
// end ;
35945: GO 35910
35947: POP
35948: POP
// for i = 1 to hardcoreCounter do
35949: LD_ADDR_VAR 0 8
35953: PUSH
35954: DOUBLE
35955: LD_INT 1
35957: DEC
35958: ST_TO_ADDR
35959: LD_EXP 92
35963: PUSH
35964: FOR_TO
35965: IFFALSE 36011
// begin if flags [ normalCounter + i ] then
35967: LD_VAR 0 4
35971: PUSH
35972: LD_EXP 91
35976: PUSH
35977: LD_VAR 0 8
35981: PLUS
35982: ARRAY
35983: IFFALSE 36009
// tmp := tmp & ( 100 + i ) & ; ;
35985: LD_ADDR_VAR 0 3
35989: PUSH
35990: LD_VAR 0 3
35994: PUSH
35995: LD_INT 100
35997: PUSH
35998: LD_VAR 0 8
36002: PLUS
36003: STR
36004: PUSH
36005: LD_STRING ;
36007: STR
36008: ST_TO_ADDR
// end ;
36009: GO 35964
36011: POP
36012: POP
// if tmp then
36013: LD_VAR 0 3
36017: IFFALSE 36029
// active := tmp ;
36019: LD_ADDR_VAR 0 7
36023: PUSH
36024: LD_VAR 0 3
36028: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
36029: LD_STRING getStreamItemsFromMission("
36031: PUSH
36032: LD_VAR 0 5
36036: STR
36037: PUSH
36038: LD_STRING ","
36040: STR
36041: PUSH
36042: LD_VAR 0 6
36046: STR
36047: PUSH
36048: LD_STRING ","
36050: STR
36051: PUSH
36052: LD_VAR 0 7
36056: STR
36057: PUSH
36058: LD_STRING ")
36060: STR
36061: PPUSH
36062: CALL_OW 559
// end else
36066: GO 36075
// ToLua ( getStreamItemsFromMission("","","") ) ;
36068: LD_STRING getStreamItemsFromMission("","","")
36070: PPUSH
36071: CALL_OW 559
// end ;
36075: LD_VAR 0 2
36079: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
36080: LD_EXP 90
36084: PUSH
36085: LD_EXP 95
36089: AND
36090: IFFALSE 36214
36092: GO 36094
36094: DISABLE
36095: LD_INT 0
36097: PPUSH
36098: PPUSH
// begin enable ;
36099: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
36100: LD_ADDR_VAR 0 2
36104: PUSH
36105: LD_INT 22
36107: PUSH
36108: LD_OWVAR 2
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 2
36119: PUSH
36120: LD_INT 34
36122: PUSH
36123: LD_INT 7
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 34
36132: PUSH
36133: LD_INT 45
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 34
36142: PUSH
36143: LD_INT 28
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 34
36152: PUSH
36153: LD_INT 47
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: PPUSH
36171: CALL_OW 69
36175: ST_TO_ADDR
// if not tmp then
36176: LD_VAR 0 2
36180: NOT
36181: IFFALSE 36185
// exit ;
36183: GO 36214
// for i in tmp do
36185: LD_ADDR_VAR 0 1
36189: PUSH
36190: LD_VAR 0 2
36194: PUSH
36195: FOR_IN
36196: IFFALSE 36212
// begin SetLives ( i , 0 ) ;
36198: LD_VAR 0 1
36202: PPUSH
36203: LD_INT 0
36205: PPUSH
36206: CALL_OW 234
// end ;
36210: GO 36195
36212: POP
36213: POP
// end ;
36214: PPOPN 2
36216: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
36217: LD_EXP 90
36221: PUSH
36222: LD_EXP 96
36226: AND
36227: IFFALSE 36311
36229: GO 36231
36231: DISABLE
36232: LD_INT 0
36234: PPUSH
36235: PPUSH
// begin enable ;
36236: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
36237: LD_ADDR_VAR 0 2
36241: PUSH
36242: LD_INT 22
36244: PUSH
36245: LD_OWVAR 2
36249: PUSH
36250: EMPTY
36251: LIST
36252: LIST
36253: PUSH
36254: LD_INT 32
36256: PUSH
36257: LD_INT 3
36259: PUSH
36260: EMPTY
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: PPUSH
36268: CALL_OW 69
36272: ST_TO_ADDR
// if not tmp then
36273: LD_VAR 0 2
36277: NOT
36278: IFFALSE 36282
// exit ;
36280: GO 36311
// for i in tmp do
36282: LD_ADDR_VAR 0 1
36286: PUSH
36287: LD_VAR 0 2
36291: PUSH
36292: FOR_IN
36293: IFFALSE 36309
// begin SetLives ( i , 0 ) ;
36295: LD_VAR 0 1
36299: PPUSH
36300: LD_INT 0
36302: PPUSH
36303: CALL_OW 234
// end ;
36307: GO 36292
36309: POP
36310: POP
// end ;
36311: PPOPN 2
36313: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
36314: LD_EXP 90
36318: PUSH
36319: LD_EXP 93
36323: AND
36324: IFFALSE 36417
36326: GO 36328
36328: DISABLE
36329: LD_INT 0
36331: PPUSH
// begin enable ;
36332: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
36333: LD_ADDR_VAR 0 1
36337: PUSH
36338: LD_INT 22
36340: PUSH
36341: LD_OWVAR 2
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 2
36352: PUSH
36353: LD_INT 25
36355: PUSH
36356: LD_INT 5
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 25
36365: PUSH
36366: LD_INT 9
36368: PUSH
36369: EMPTY
36370: LIST
36371: LIST
36372: PUSH
36373: LD_INT 25
36375: PUSH
36376: LD_INT 8
36378: PUSH
36379: EMPTY
36380: LIST
36381: LIST
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: PUSH
36389: EMPTY
36390: LIST
36391: LIST
36392: PPUSH
36393: CALL_OW 69
36397: PUSH
36398: FOR_IN
36399: IFFALSE 36415
// begin SetClass ( i , 1 ) ;
36401: LD_VAR 0 1
36405: PPUSH
36406: LD_INT 1
36408: PPUSH
36409: CALL_OW 336
// end ;
36413: GO 36398
36415: POP
36416: POP
// end ;
36417: PPOPN 1
36419: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36420: LD_EXP 90
36424: PUSH
36425: LD_EXP 94
36429: AND
36430: PUSH
36431: LD_OWVAR 65
36435: PUSH
36436: LD_INT 7
36438: LESS
36439: AND
36440: IFFALSE 36454
36442: GO 36444
36444: DISABLE
// begin enable ;
36445: ENABLE
// game_speed := 7 ;
36446: LD_ADDR_OWVAR 65
36450: PUSH
36451: LD_INT 7
36453: ST_TO_ADDR
// end ;
36454: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36455: LD_EXP 90
36459: PUSH
36460: LD_EXP 97
36464: AND
36465: IFFALSE 36667
36467: GO 36469
36469: DISABLE
36470: LD_INT 0
36472: PPUSH
36473: PPUSH
36474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36475: LD_ADDR_VAR 0 3
36479: PUSH
36480: LD_INT 81
36482: PUSH
36483: LD_OWVAR 2
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 21
36494: PUSH
36495: LD_INT 1
36497: PUSH
36498: EMPTY
36499: LIST
36500: LIST
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PPUSH
36506: CALL_OW 69
36510: ST_TO_ADDR
// if not tmp then
36511: LD_VAR 0 3
36515: NOT
36516: IFFALSE 36520
// exit ;
36518: GO 36667
// if tmp > 5 then
36520: LD_VAR 0 3
36524: PUSH
36525: LD_INT 5
36527: GREATER
36528: IFFALSE 36540
// k := 5 else
36530: LD_ADDR_VAR 0 2
36534: PUSH
36535: LD_INT 5
36537: ST_TO_ADDR
36538: GO 36550
// k := tmp ;
36540: LD_ADDR_VAR 0 2
36544: PUSH
36545: LD_VAR 0 3
36549: ST_TO_ADDR
// for i := 1 to k do
36550: LD_ADDR_VAR 0 1
36554: PUSH
36555: DOUBLE
36556: LD_INT 1
36558: DEC
36559: ST_TO_ADDR
36560: LD_VAR 0 2
36564: PUSH
36565: FOR_TO
36566: IFFALSE 36665
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36568: LD_VAR 0 3
36572: PUSH
36573: LD_VAR 0 1
36577: ARRAY
36578: PPUSH
36579: LD_VAR 0 1
36583: PUSH
36584: LD_INT 4
36586: MOD
36587: PUSH
36588: LD_INT 1
36590: PLUS
36591: PPUSH
36592: CALL_OW 259
36596: PUSH
36597: LD_INT 10
36599: LESS
36600: IFFALSE 36663
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36602: LD_VAR 0 3
36606: PUSH
36607: LD_VAR 0 1
36611: ARRAY
36612: PPUSH
36613: LD_VAR 0 1
36617: PUSH
36618: LD_INT 4
36620: MOD
36621: PUSH
36622: LD_INT 1
36624: PLUS
36625: PPUSH
36626: LD_VAR 0 3
36630: PUSH
36631: LD_VAR 0 1
36635: ARRAY
36636: PPUSH
36637: LD_VAR 0 1
36641: PUSH
36642: LD_INT 4
36644: MOD
36645: PUSH
36646: LD_INT 1
36648: PLUS
36649: PPUSH
36650: CALL_OW 259
36654: PUSH
36655: LD_INT 1
36657: PLUS
36658: PPUSH
36659: CALL_OW 237
36663: GO 36565
36665: POP
36666: POP
// end ;
36667: PPOPN 3
36669: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36670: LD_EXP 90
36674: PUSH
36675: LD_EXP 98
36679: AND
36680: IFFALSE 36700
36682: GO 36684
36684: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36685: LD_INT 4
36687: PPUSH
36688: LD_OWVAR 2
36692: PPUSH
36693: LD_INT 0
36695: PPUSH
36696: CALL_OW 324
36700: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36701: LD_EXP 90
36705: PUSH
36706: LD_EXP 127
36710: AND
36711: IFFALSE 36731
36713: GO 36715
36715: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36716: LD_INT 19
36718: PPUSH
36719: LD_OWVAR 2
36723: PPUSH
36724: LD_INT 0
36726: PPUSH
36727: CALL_OW 324
36731: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36732: LD_EXP 90
36736: PUSH
36737: LD_EXP 99
36741: AND
36742: IFFALSE 36844
36744: GO 36746
36746: DISABLE
36747: LD_INT 0
36749: PPUSH
36750: PPUSH
// begin enable ;
36751: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36752: LD_ADDR_VAR 0 2
36756: PUSH
36757: LD_INT 22
36759: PUSH
36760: LD_OWVAR 2
36764: PUSH
36765: EMPTY
36766: LIST
36767: LIST
36768: PUSH
36769: LD_INT 2
36771: PUSH
36772: LD_INT 34
36774: PUSH
36775: LD_INT 11
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 34
36784: PUSH
36785: LD_INT 30
36787: PUSH
36788: EMPTY
36789: LIST
36790: LIST
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: LIST
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PPUSH
36801: CALL_OW 69
36805: ST_TO_ADDR
// if not tmp then
36806: LD_VAR 0 2
36810: NOT
36811: IFFALSE 36815
// exit ;
36813: GO 36844
// for i in tmp do
36815: LD_ADDR_VAR 0 1
36819: PUSH
36820: LD_VAR 0 2
36824: PUSH
36825: FOR_IN
36826: IFFALSE 36842
// begin SetLives ( i , 0 ) ;
36828: LD_VAR 0 1
36832: PPUSH
36833: LD_INT 0
36835: PPUSH
36836: CALL_OW 234
// end ;
36840: GO 36825
36842: POP
36843: POP
// end ;
36844: PPOPN 2
36846: END
// every 0 0$1 trigger StreamModeActive and sBunker do
36847: LD_EXP 90
36851: PUSH
36852: LD_EXP 100
36856: AND
36857: IFFALSE 36877
36859: GO 36861
36861: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
36862: LD_INT 32
36864: PPUSH
36865: LD_OWVAR 2
36869: PPUSH
36870: LD_INT 0
36872: PPUSH
36873: CALL_OW 324
36877: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
36878: LD_EXP 90
36882: PUSH
36883: LD_EXP 101
36887: AND
36888: IFFALSE 37069
36890: GO 36892
36892: DISABLE
36893: LD_INT 0
36895: PPUSH
36896: PPUSH
36897: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
36898: LD_ADDR_VAR 0 2
36902: PUSH
36903: LD_INT 22
36905: PUSH
36906: LD_OWVAR 2
36910: PUSH
36911: EMPTY
36912: LIST
36913: LIST
36914: PUSH
36915: LD_INT 33
36917: PUSH
36918: LD_INT 3
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PPUSH
36929: CALL_OW 69
36933: ST_TO_ADDR
// if not tmp then
36934: LD_VAR 0 2
36938: NOT
36939: IFFALSE 36943
// exit ;
36941: GO 37069
// side := 0 ;
36943: LD_ADDR_VAR 0 3
36947: PUSH
36948: LD_INT 0
36950: ST_TO_ADDR
// for i := 1 to 8 do
36951: LD_ADDR_VAR 0 1
36955: PUSH
36956: DOUBLE
36957: LD_INT 1
36959: DEC
36960: ST_TO_ADDR
36961: LD_INT 8
36963: PUSH
36964: FOR_TO
36965: IFFALSE 37013
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
36967: LD_OWVAR 2
36971: PUSH
36972: LD_VAR 0 1
36976: NONEQUAL
36977: PUSH
36978: LD_OWVAR 2
36982: PPUSH
36983: LD_VAR 0 1
36987: PPUSH
36988: CALL_OW 81
36992: PUSH
36993: LD_INT 2
36995: EQUAL
36996: AND
36997: IFFALSE 37011
// begin side := i ;
36999: LD_ADDR_VAR 0 3
37003: PUSH
37004: LD_VAR 0 1
37008: ST_TO_ADDR
// break ;
37009: GO 37013
// end ;
37011: GO 36964
37013: POP
37014: POP
// if not side then
37015: LD_VAR 0 3
37019: NOT
37020: IFFALSE 37024
// exit ;
37022: GO 37069
// for i := 1 to tmp do
37024: LD_ADDR_VAR 0 1
37028: PUSH
37029: DOUBLE
37030: LD_INT 1
37032: DEC
37033: ST_TO_ADDR
37034: LD_VAR 0 2
37038: PUSH
37039: FOR_TO
37040: IFFALSE 37067
// if Prob ( 60 ) then
37042: LD_INT 60
37044: PPUSH
37045: CALL_OW 13
37049: IFFALSE 37065
// SetSide ( i , side ) ;
37051: LD_VAR 0 1
37055: PPUSH
37056: LD_VAR 0 3
37060: PPUSH
37061: CALL_OW 235
37065: GO 37039
37067: POP
37068: POP
// end ;
37069: PPOPN 3
37071: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
37072: LD_EXP 90
37076: PUSH
37077: LD_EXP 103
37081: AND
37082: IFFALSE 37201
37084: GO 37086
37086: DISABLE
37087: LD_INT 0
37089: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
37090: LD_ADDR_VAR 0 1
37094: PUSH
37095: LD_INT 22
37097: PUSH
37098: LD_OWVAR 2
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: PUSH
37107: LD_INT 21
37109: PUSH
37110: LD_INT 1
37112: PUSH
37113: EMPTY
37114: LIST
37115: LIST
37116: PUSH
37117: LD_INT 3
37119: PUSH
37120: LD_INT 23
37122: PUSH
37123: LD_INT 0
37125: PUSH
37126: EMPTY
37127: LIST
37128: LIST
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: PPUSH
37139: CALL_OW 69
37143: PUSH
37144: FOR_IN
37145: IFFALSE 37199
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
37147: LD_VAR 0 1
37151: PPUSH
37152: CALL_OW 257
37156: PUSH
37157: LD_INT 1
37159: PUSH
37160: LD_INT 2
37162: PUSH
37163: LD_INT 3
37165: PUSH
37166: LD_INT 4
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: IN
37175: IFFALSE 37197
// SetClass ( un , rand ( 1 , 4 ) ) ;
37177: LD_VAR 0 1
37181: PPUSH
37182: LD_INT 1
37184: PPUSH
37185: LD_INT 4
37187: PPUSH
37188: CALL_OW 12
37192: PPUSH
37193: CALL_OW 336
37197: GO 37144
37199: POP
37200: POP
// end ;
37201: PPOPN 1
37203: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
37204: LD_EXP 90
37208: PUSH
37209: LD_EXP 102
37213: AND
37214: IFFALSE 37293
37216: GO 37218
37218: DISABLE
37219: LD_INT 0
37221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37222: LD_ADDR_VAR 0 1
37226: PUSH
37227: LD_INT 22
37229: PUSH
37230: LD_OWVAR 2
37234: PUSH
37235: EMPTY
37236: LIST
37237: LIST
37238: PUSH
37239: LD_INT 21
37241: PUSH
37242: LD_INT 3
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: EMPTY
37250: LIST
37251: LIST
37252: PPUSH
37253: CALL_OW 69
37257: ST_TO_ADDR
// if not tmp then
37258: LD_VAR 0 1
37262: NOT
37263: IFFALSE 37267
// exit ;
37265: GO 37293
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
37267: LD_VAR 0 1
37271: PUSH
37272: LD_INT 1
37274: PPUSH
37275: LD_VAR 0 1
37279: PPUSH
37280: CALL_OW 12
37284: ARRAY
37285: PPUSH
37286: LD_INT 100
37288: PPUSH
37289: CALL_OW 234
// end ;
37293: PPOPN 1
37295: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
37296: LD_EXP 90
37300: PUSH
37301: LD_EXP 104
37305: AND
37306: IFFALSE 37404
37308: GO 37310
37310: DISABLE
37311: LD_INT 0
37313: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37314: LD_ADDR_VAR 0 1
37318: PUSH
37319: LD_INT 22
37321: PUSH
37322: LD_OWVAR 2
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 21
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: EMPTY
37342: LIST
37343: LIST
37344: PPUSH
37345: CALL_OW 69
37349: ST_TO_ADDR
// if not tmp then
37350: LD_VAR 0 1
37354: NOT
37355: IFFALSE 37359
// exit ;
37357: GO 37404
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37359: LD_VAR 0 1
37363: PUSH
37364: LD_INT 1
37366: PPUSH
37367: LD_VAR 0 1
37371: PPUSH
37372: CALL_OW 12
37376: ARRAY
37377: PPUSH
37378: LD_INT 1
37380: PPUSH
37381: LD_INT 4
37383: PPUSH
37384: CALL_OW 12
37388: PPUSH
37389: LD_INT 3000
37391: PPUSH
37392: LD_INT 9000
37394: PPUSH
37395: CALL_OW 12
37399: PPUSH
37400: CALL_OW 492
// end ;
37404: PPOPN 1
37406: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37407: LD_EXP 90
37411: PUSH
37412: LD_EXP 105
37416: AND
37417: IFFALSE 37437
37419: GO 37421
37421: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37422: LD_INT 1
37424: PPUSH
37425: LD_OWVAR 2
37429: PPUSH
37430: LD_INT 0
37432: PPUSH
37433: CALL_OW 324
37437: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37438: LD_EXP 90
37442: PUSH
37443: LD_EXP 106
37447: AND
37448: IFFALSE 37531
37450: GO 37452
37452: DISABLE
37453: LD_INT 0
37455: PPUSH
37456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37457: LD_ADDR_VAR 0 2
37461: PUSH
37462: LD_INT 22
37464: PUSH
37465: LD_OWVAR 2
37469: PUSH
37470: EMPTY
37471: LIST
37472: LIST
37473: PUSH
37474: LD_INT 21
37476: PUSH
37477: LD_INT 3
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: EMPTY
37485: LIST
37486: LIST
37487: PPUSH
37488: CALL_OW 69
37492: ST_TO_ADDR
// if not tmp then
37493: LD_VAR 0 2
37497: NOT
37498: IFFALSE 37502
// exit ;
37500: GO 37531
// for i in tmp do
37502: LD_ADDR_VAR 0 1
37506: PUSH
37507: LD_VAR 0 2
37511: PUSH
37512: FOR_IN
37513: IFFALSE 37529
// SetBLevel ( i , 10 ) ;
37515: LD_VAR 0 1
37519: PPUSH
37520: LD_INT 10
37522: PPUSH
37523: CALL_OW 241
37527: GO 37512
37529: POP
37530: POP
// end ;
37531: PPOPN 2
37533: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37534: LD_EXP 90
37538: PUSH
37539: LD_EXP 107
37543: AND
37544: IFFALSE 37655
37546: GO 37548
37548: DISABLE
37549: LD_INT 0
37551: PPUSH
37552: PPUSH
37553: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37554: LD_ADDR_VAR 0 3
37558: PUSH
37559: LD_INT 22
37561: PUSH
37562: LD_OWVAR 2
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 25
37573: PUSH
37574: LD_INT 1
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PPUSH
37585: CALL_OW 69
37589: ST_TO_ADDR
// if not tmp then
37590: LD_VAR 0 3
37594: NOT
37595: IFFALSE 37599
// exit ;
37597: GO 37655
// un := tmp [ rand ( 1 , tmp ) ] ;
37599: LD_ADDR_VAR 0 2
37603: PUSH
37604: LD_VAR 0 3
37608: PUSH
37609: LD_INT 1
37611: PPUSH
37612: LD_VAR 0 3
37616: PPUSH
37617: CALL_OW 12
37621: ARRAY
37622: ST_TO_ADDR
// if Crawls ( un ) then
37623: LD_VAR 0 2
37627: PPUSH
37628: CALL_OW 318
37632: IFFALSE 37643
// ComWalk ( un ) ;
37634: LD_VAR 0 2
37638: PPUSH
37639: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37643: LD_VAR 0 2
37647: PPUSH
37648: LD_INT 5
37650: PPUSH
37651: CALL_OW 336
// end ;
37655: PPOPN 3
37657: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37658: LD_EXP 90
37662: PUSH
37663: LD_EXP 108
37667: AND
37668: PUSH
37669: LD_OWVAR 67
37673: PUSH
37674: LD_INT 4
37676: LESS
37677: AND
37678: IFFALSE 37697
37680: GO 37682
37682: DISABLE
// begin Difficulty := Difficulty + 1 ;
37683: LD_ADDR_OWVAR 67
37687: PUSH
37688: LD_OWVAR 67
37692: PUSH
37693: LD_INT 1
37695: PLUS
37696: ST_TO_ADDR
// end ;
37697: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37698: LD_EXP 90
37702: PUSH
37703: LD_EXP 109
37707: AND
37708: IFFALSE 37811
37710: GO 37712
37712: DISABLE
37713: LD_INT 0
37715: PPUSH
// begin for i := 1 to 5 do
37716: LD_ADDR_VAR 0 1
37720: PUSH
37721: DOUBLE
37722: LD_INT 1
37724: DEC
37725: ST_TO_ADDR
37726: LD_INT 5
37728: PUSH
37729: FOR_TO
37730: IFFALSE 37809
// begin uc_nation := nation_nature ;
37732: LD_ADDR_OWVAR 21
37736: PUSH
37737: LD_INT 0
37739: ST_TO_ADDR
// uc_side := 0 ;
37740: LD_ADDR_OWVAR 20
37744: PUSH
37745: LD_INT 0
37747: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37748: LD_ADDR_OWVAR 29
37752: PUSH
37753: LD_INT 12
37755: PUSH
37756: LD_INT 12
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: ST_TO_ADDR
// hc_agressivity := 20 ;
37763: LD_ADDR_OWVAR 35
37767: PUSH
37768: LD_INT 20
37770: ST_TO_ADDR
// hc_class := class_tiger ;
37771: LD_ADDR_OWVAR 28
37775: PUSH
37776: LD_INT 14
37778: ST_TO_ADDR
// hc_gallery :=  ;
37779: LD_ADDR_OWVAR 33
37783: PUSH
37784: LD_STRING 
37786: ST_TO_ADDR
// hc_name :=  ;
37787: LD_ADDR_OWVAR 26
37791: PUSH
37792: LD_STRING 
37794: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37795: CALL_OW 44
37799: PPUSH
37800: LD_INT 0
37802: PPUSH
37803: CALL_OW 51
// end ;
37807: GO 37729
37809: POP
37810: POP
// end ;
37811: PPOPN 1
37813: END
// every 0 0$1 trigger StreamModeActive and sBomb do
37814: LD_EXP 90
37818: PUSH
37819: LD_EXP 110
37823: AND
37824: IFFALSE 37833
37826: GO 37828
37828: DISABLE
// StreamSibBomb ;
37829: CALL 37834 0 0
37833: END
// export function StreamSibBomb ; var i , x , y ; begin
37834: LD_INT 0
37836: PPUSH
37837: PPUSH
37838: PPUSH
37839: PPUSH
// result := false ;
37840: LD_ADDR_VAR 0 1
37844: PUSH
37845: LD_INT 0
37847: ST_TO_ADDR
// for i := 1 to 16 do
37848: LD_ADDR_VAR 0 2
37852: PUSH
37853: DOUBLE
37854: LD_INT 1
37856: DEC
37857: ST_TO_ADDR
37858: LD_INT 16
37860: PUSH
37861: FOR_TO
37862: IFFALSE 38061
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37864: LD_ADDR_VAR 0 3
37868: PUSH
37869: LD_INT 10
37871: PUSH
37872: LD_INT 20
37874: PUSH
37875: LD_INT 30
37877: PUSH
37878: LD_INT 40
37880: PUSH
37881: LD_INT 50
37883: PUSH
37884: LD_INT 60
37886: PUSH
37887: LD_INT 70
37889: PUSH
37890: LD_INT 80
37892: PUSH
37893: LD_INT 90
37895: PUSH
37896: LD_INT 100
37898: PUSH
37899: LD_INT 110
37901: PUSH
37902: LD_INT 120
37904: PUSH
37905: LD_INT 130
37907: PUSH
37908: LD_INT 140
37910: PUSH
37911: LD_INT 150
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 1
37933: PPUSH
37934: LD_INT 15
37936: PPUSH
37937: CALL_OW 12
37941: ARRAY
37942: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37943: LD_ADDR_VAR 0 4
37947: PUSH
37948: LD_INT 10
37950: PUSH
37951: LD_INT 20
37953: PUSH
37954: LD_INT 30
37956: PUSH
37957: LD_INT 40
37959: PUSH
37960: LD_INT 50
37962: PUSH
37963: LD_INT 60
37965: PUSH
37966: LD_INT 70
37968: PUSH
37969: LD_INT 80
37971: PUSH
37972: LD_INT 90
37974: PUSH
37975: LD_INT 100
37977: PUSH
37978: LD_INT 110
37980: PUSH
37981: LD_INT 120
37983: PUSH
37984: LD_INT 130
37986: PUSH
37987: LD_INT 140
37989: PUSH
37990: LD_INT 150
37992: PUSH
37993: EMPTY
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: PPUSH
38013: LD_INT 15
38015: PPUSH
38016: CALL_OW 12
38020: ARRAY
38021: ST_TO_ADDR
// if ValidHex ( x , y ) then
38022: LD_VAR 0 3
38026: PPUSH
38027: LD_VAR 0 4
38031: PPUSH
38032: CALL_OW 488
38036: IFFALSE 38059
// begin result := [ x , y ] ;
38038: LD_ADDR_VAR 0 1
38042: PUSH
38043: LD_VAR 0 3
38047: PUSH
38048: LD_VAR 0 4
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: ST_TO_ADDR
// break ;
38057: GO 38061
// end ; end ;
38059: GO 37861
38061: POP
38062: POP
// if result then
38063: LD_VAR 0 1
38067: IFFALSE 38127
// begin ToLua ( playSibBomb() ) ;
38069: LD_STRING playSibBomb()
38071: PPUSH
38072: CALL_OW 559
// wait ( 0 0$14 ) ;
38076: LD_INT 490
38078: PPUSH
38079: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
38083: LD_VAR 0 1
38087: PUSH
38088: LD_INT 1
38090: ARRAY
38091: PPUSH
38092: LD_VAR 0 1
38096: PUSH
38097: LD_INT 2
38099: ARRAY
38100: PPUSH
38101: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
38105: LD_VAR 0 1
38109: PUSH
38110: LD_INT 1
38112: ARRAY
38113: PPUSH
38114: LD_VAR 0 1
38118: PUSH
38119: LD_INT 2
38121: ARRAY
38122: PPUSH
38123: CALL_OW 429
// end ; end ;
38127: LD_VAR 0 1
38131: RET
// every 0 0$1 trigger StreamModeActive and sReset do
38132: LD_EXP 90
38136: PUSH
38137: LD_EXP 112
38141: AND
38142: IFFALSE 38154
38144: GO 38146
38146: DISABLE
// YouLost (  ) ;
38147: LD_STRING 
38149: PPUSH
38150: CALL_OW 104
38154: END
// every 0 0$1 trigger StreamModeActive and sFog do
38155: LD_EXP 90
38159: PUSH
38160: LD_EXP 111
38164: AND
38165: IFFALSE 38179
38167: GO 38169
38169: DISABLE
// FogOff ( your_side ) ;
38170: LD_OWVAR 2
38174: PPUSH
38175: CALL_OW 344
38179: END
// every 0 0$1 trigger StreamModeActive and sSun do
38180: LD_EXP 90
38184: PUSH
38185: LD_EXP 113
38189: AND
38190: IFFALSE 38218
38192: GO 38194
38194: DISABLE
// begin solar_recharge_percent := 0 ;
38195: LD_ADDR_OWVAR 79
38199: PUSH
38200: LD_INT 0
38202: ST_TO_ADDR
// wait ( 5 5$00 ) ;
38203: LD_INT 10500
38205: PPUSH
38206: CALL_OW 67
// solar_recharge_percent := 100 ;
38210: LD_ADDR_OWVAR 79
38214: PUSH
38215: LD_INT 100
38217: ST_TO_ADDR
// end ;
38218: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
38219: LD_EXP 90
38223: PUSH
38224: LD_EXP 114
38228: AND
38229: IFFALSE 38468
38231: GO 38233
38233: DISABLE
38234: LD_INT 0
38236: PPUSH
38237: PPUSH
38238: PPUSH
// begin tmp := [ ] ;
38239: LD_ADDR_VAR 0 3
38243: PUSH
38244: EMPTY
38245: ST_TO_ADDR
// for i := 1 to 6 do
38246: LD_ADDR_VAR 0 1
38250: PUSH
38251: DOUBLE
38252: LD_INT 1
38254: DEC
38255: ST_TO_ADDR
38256: LD_INT 6
38258: PUSH
38259: FOR_TO
38260: IFFALSE 38365
// begin uc_nation := nation_nature ;
38262: LD_ADDR_OWVAR 21
38266: PUSH
38267: LD_INT 0
38269: ST_TO_ADDR
// uc_side := 0 ;
38270: LD_ADDR_OWVAR 20
38274: PUSH
38275: LD_INT 0
38277: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38278: LD_ADDR_OWVAR 29
38282: PUSH
38283: LD_INT 12
38285: PUSH
38286: LD_INT 12
38288: PUSH
38289: EMPTY
38290: LIST
38291: LIST
38292: ST_TO_ADDR
// hc_agressivity := 20 ;
38293: LD_ADDR_OWVAR 35
38297: PUSH
38298: LD_INT 20
38300: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
38301: LD_ADDR_OWVAR 28
38305: PUSH
38306: LD_INT 17
38308: ST_TO_ADDR
// hc_gallery :=  ;
38309: LD_ADDR_OWVAR 33
38313: PUSH
38314: LD_STRING 
38316: ST_TO_ADDR
// hc_name :=  ;
38317: LD_ADDR_OWVAR 26
38321: PUSH
38322: LD_STRING 
38324: ST_TO_ADDR
// un := CreateHuman ;
38325: LD_ADDR_VAR 0 2
38329: PUSH
38330: CALL_OW 44
38334: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
38335: LD_VAR 0 2
38339: PPUSH
38340: LD_INT 1
38342: PPUSH
38343: CALL_OW 51
// tmp := tmp ^ un ;
38347: LD_ADDR_VAR 0 3
38351: PUSH
38352: LD_VAR 0 3
38356: PUSH
38357: LD_VAR 0 2
38361: ADD
38362: ST_TO_ADDR
// end ;
38363: GO 38259
38365: POP
38366: POP
// repeat wait ( 0 0$1 ) ;
38367: LD_INT 35
38369: PPUSH
38370: CALL_OW 67
// for un in tmp do
38374: LD_ADDR_VAR 0 2
38378: PUSH
38379: LD_VAR 0 3
38383: PUSH
38384: FOR_IN
38385: IFFALSE 38459
// begin if IsDead ( un ) then
38387: LD_VAR 0 2
38391: PPUSH
38392: CALL_OW 301
38396: IFFALSE 38416
// begin tmp := tmp diff un ;
38398: LD_ADDR_VAR 0 3
38402: PUSH
38403: LD_VAR 0 3
38407: PUSH
38408: LD_VAR 0 2
38412: DIFF
38413: ST_TO_ADDR
// continue ;
38414: GO 38384
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38416: LD_VAR 0 2
38420: PPUSH
38421: LD_INT 3
38423: PUSH
38424: LD_INT 22
38426: PUSH
38427: LD_INT 0
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PPUSH
38438: CALL_OW 69
38442: PPUSH
38443: LD_VAR 0 2
38447: PPUSH
38448: CALL_OW 74
38452: PPUSH
38453: CALL_OW 115
// end ;
38457: GO 38384
38459: POP
38460: POP
// until not tmp ;
38461: LD_VAR 0 3
38465: NOT
38466: IFFALSE 38367
// end ;
38468: PPOPN 3
38470: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38471: LD_EXP 90
38475: PUSH
38476: LD_EXP 115
38480: AND
38481: IFFALSE 38535
38483: GO 38485
38485: DISABLE
// begin ToLua ( displayTroll(); ) ;
38486: LD_STRING displayTroll();
38488: PPUSH
38489: CALL_OW 559
// wait ( 3 3$00 ) ;
38493: LD_INT 6300
38495: PPUSH
38496: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38500: LD_STRING hideTroll();
38502: PPUSH
38503: CALL_OW 559
// wait ( 1 1$00 ) ;
38507: LD_INT 2100
38509: PPUSH
38510: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38514: LD_STRING displayTroll();
38516: PPUSH
38517: CALL_OW 559
// wait ( 1 1$00 ) ;
38521: LD_INT 2100
38523: PPUSH
38524: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38528: LD_STRING hideTroll();
38530: PPUSH
38531: CALL_OW 559
// end ;
38535: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38536: LD_EXP 90
38540: PUSH
38541: LD_EXP 116
38545: AND
38546: IFFALSE 38609
38548: GO 38550
38550: DISABLE
38551: LD_INT 0
38553: PPUSH
// begin p := 0 ;
38554: LD_ADDR_VAR 0 1
38558: PUSH
38559: LD_INT 0
38561: ST_TO_ADDR
// repeat game_speed := 1 ;
38562: LD_ADDR_OWVAR 65
38566: PUSH
38567: LD_INT 1
38569: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38570: LD_INT 35
38572: PPUSH
38573: CALL_OW 67
// p := p + 1 ;
38577: LD_ADDR_VAR 0 1
38581: PUSH
38582: LD_VAR 0 1
38586: PUSH
38587: LD_INT 1
38589: PLUS
38590: ST_TO_ADDR
// until p >= 60 ;
38591: LD_VAR 0 1
38595: PUSH
38596: LD_INT 60
38598: GREATEREQUAL
38599: IFFALSE 38562
// game_speed := 4 ;
38601: LD_ADDR_OWVAR 65
38605: PUSH
38606: LD_INT 4
38608: ST_TO_ADDR
// end ;
38609: PPOPN 1
38611: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38612: LD_EXP 90
38616: PUSH
38617: LD_EXP 117
38621: AND
38622: IFFALSE 38768
38624: GO 38626
38626: DISABLE
38627: LD_INT 0
38629: PPUSH
38630: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38631: LD_ADDR_VAR 0 1
38635: PUSH
38636: LD_INT 22
38638: PUSH
38639: LD_OWVAR 2
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 2
38650: PUSH
38651: LD_INT 30
38653: PUSH
38654: LD_INT 0
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 30
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: LIST
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PPUSH
38680: CALL_OW 69
38684: ST_TO_ADDR
// if not depot then
38685: LD_VAR 0 1
38689: NOT
38690: IFFALSE 38694
// exit ;
38692: GO 38768
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38694: LD_ADDR_VAR 0 2
38698: PUSH
38699: LD_VAR 0 1
38703: PUSH
38704: LD_INT 1
38706: PPUSH
38707: LD_VAR 0 1
38711: PPUSH
38712: CALL_OW 12
38716: ARRAY
38717: PPUSH
38718: CALL_OW 274
38722: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38723: LD_VAR 0 2
38727: PPUSH
38728: LD_INT 1
38730: PPUSH
38731: LD_INT 0
38733: PPUSH
38734: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38738: LD_VAR 0 2
38742: PPUSH
38743: LD_INT 2
38745: PPUSH
38746: LD_INT 0
38748: PPUSH
38749: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38753: LD_VAR 0 2
38757: PPUSH
38758: LD_INT 3
38760: PPUSH
38761: LD_INT 0
38763: PPUSH
38764: CALL_OW 277
// end ;
38768: PPOPN 2
38770: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38771: LD_EXP 90
38775: PUSH
38776: LD_EXP 118
38780: AND
38781: IFFALSE 38878
38783: GO 38785
38785: DISABLE
38786: LD_INT 0
38788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38789: LD_ADDR_VAR 0 1
38793: PUSH
38794: LD_INT 22
38796: PUSH
38797: LD_OWVAR 2
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 21
38808: PUSH
38809: LD_INT 1
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: PUSH
38816: LD_INT 3
38818: PUSH
38819: LD_INT 23
38821: PUSH
38822: LD_INT 0
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: LIST
38837: PPUSH
38838: CALL_OW 69
38842: ST_TO_ADDR
// if not tmp then
38843: LD_VAR 0 1
38847: NOT
38848: IFFALSE 38852
// exit ;
38850: GO 38878
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
38852: LD_VAR 0 1
38856: PUSH
38857: LD_INT 1
38859: PPUSH
38860: LD_VAR 0 1
38864: PPUSH
38865: CALL_OW 12
38869: ARRAY
38870: PPUSH
38871: LD_INT 200
38873: PPUSH
38874: CALL_OW 234
// end ;
38878: PPOPN 1
38880: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
38881: LD_EXP 90
38885: PUSH
38886: LD_EXP 119
38890: AND
38891: IFFALSE 38970
38893: GO 38895
38895: DISABLE
38896: LD_INT 0
38898: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
38899: LD_ADDR_VAR 0 1
38903: PUSH
38904: LD_INT 22
38906: PUSH
38907: LD_OWVAR 2
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 21
38918: PUSH
38919: LD_INT 2
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PPUSH
38930: CALL_OW 69
38934: ST_TO_ADDR
// if not tmp then
38935: LD_VAR 0 1
38939: NOT
38940: IFFALSE 38944
// exit ;
38942: GO 38970
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
38944: LD_VAR 0 1
38948: PUSH
38949: LD_INT 1
38951: PPUSH
38952: LD_VAR 0 1
38956: PPUSH
38957: CALL_OW 12
38961: ARRAY
38962: PPUSH
38963: LD_INT 60
38965: PPUSH
38966: CALL_OW 234
// end ;
38970: PPOPN 1
38972: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
38973: LD_EXP 90
38977: PUSH
38978: LD_EXP 120
38982: AND
38983: IFFALSE 39082
38985: GO 38987
38987: DISABLE
38988: LD_INT 0
38990: PPUSH
38991: PPUSH
// begin enable ;
38992: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
38993: LD_ADDR_VAR 0 1
38997: PUSH
38998: LD_INT 22
39000: PUSH
39001: LD_OWVAR 2
39005: PUSH
39006: EMPTY
39007: LIST
39008: LIST
39009: PUSH
39010: LD_INT 61
39012: PUSH
39013: EMPTY
39014: LIST
39015: PUSH
39016: LD_INT 33
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PPUSH
39031: CALL_OW 69
39035: ST_TO_ADDR
// if not tmp then
39036: LD_VAR 0 1
39040: NOT
39041: IFFALSE 39045
// exit ;
39043: GO 39082
// for i in tmp do
39045: LD_ADDR_VAR 0 2
39049: PUSH
39050: LD_VAR 0 1
39054: PUSH
39055: FOR_IN
39056: IFFALSE 39080
// if IsControledBy ( i ) then
39058: LD_VAR 0 2
39062: PPUSH
39063: CALL_OW 312
39067: IFFALSE 39078
// ComUnlink ( i ) ;
39069: LD_VAR 0 2
39073: PPUSH
39074: CALL_OW 136
39078: GO 39055
39080: POP
39081: POP
// end ;
39082: PPOPN 2
39084: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
39085: LD_EXP 90
39089: PUSH
39090: LD_EXP 121
39094: AND
39095: IFFALSE 39235
39097: GO 39099
39099: DISABLE
39100: LD_INT 0
39102: PPUSH
39103: PPUSH
// begin ToLua ( displayPowell(); ) ;
39104: LD_STRING displayPowell();
39106: PPUSH
39107: CALL_OW 559
// uc_side := 0 ;
39111: LD_ADDR_OWVAR 20
39115: PUSH
39116: LD_INT 0
39118: ST_TO_ADDR
// uc_nation := 2 ;
39119: LD_ADDR_OWVAR 21
39123: PUSH
39124: LD_INT 2
39126: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
39127: LD_ADDR_OWVAR 37
39131: PUSH
39132: LD_INT 14
39134: ST_TO_ADDR
// vc_engine := engine_siberite ;
39135: LD_ADDR_OWVAR 39
39139: PUSH
39140: LD_INT 3
39142: ST_TO_ADDR
// vc_control := control_apeman ;
39143: LD_ADDR_OWVAR 38
39147: PUSH
39148: LD_INT 5
39150: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
39151: LD_ADDR_OWVAR 40
39155: PUSH
39156: LD_INT 29
39158: ST_TO_ADDR
// un := CreateVehicle ;
39159: LD_ADDR_VAR 0 2
39163: PUSH
39164: CALL_OW 45
39168: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39169: LD_VAR 0 2
39173: PPUSH
39174: LD_INT 1
39176: PPUSH
39177: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39181: LD_INT 35
39183: PPUSH
39184: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39188: LD_VAR 0 2
39192: PPUSH
39193: LD_INT 22
39195: PUSH
39196: LD_OWVAR 2
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PPUSH
39205: CALL_OW 69
39209: PPUSH
39210: LD_VAR 0 2
39214: PPUSH
39215: CALL_OW 74
39219: PPUSH
39220: CALL_OW 115
// until IsDead ( un ) ;
39224: LD_VAR 0 2
39228: PPUSH
39229: CALL_OW 301
39233: IFFALSE 39181
// end ;
39235: PPOPN 2
39237: END
// every 0 0$1 trigger StreamModeActive and sStu do
39238: LD_EXP 90
39242: PUSH
39243: LD_EXP 129
39247: AND
39248: IFFALSE 39264
39250: GO 39252
39252: DISABLE
// begin ToLua ( displayStucuk(); ) ;
39253: LD_STRING displayStucuk();
39255: PPUSH
39256: CALL_OW 559
// ResetFog ;
39260: CALL_OW 335
// end ;
39264: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
39265: LD_EXP 90
39269: PUSH
39270: LD_EXP 122
39274: AND
39275: IFFALSE 39416
39277: GO 39279
39279: DISABLE
39280: LD_INT 0
39282: PPUSH
39283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39284: LD_ADDR_VAR 0 2
39288: PUSH
39289: LD_INT 22
39291: PUSH
39292: LD_OWVAR 2
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 21
39303: PUSH
39304: LD_INT 1
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PPUSH
39315: CALL_OW 69
39319: ST_TO_ADDR
// if not tmp then
39320: LD_VAR 0 2
39324: NOT
39325: IFFALSE 39329
// exit ;
39327: GO 39416
// un := tmp [ rand ( 1 , tmp ) ] ;
39329: LD_ADDR_VAR 0 1
39333: PUSH
39334: LD_VAR 0 2
39338: PUSH
39339: LD_INT 1
39341: PPUSH
39342: LD_VAR 0 2
39346: PPUSH
39347: CALL_OW 12
39351: ARRAY
39352: ST_TO_ADDR
// SetSide ( un , 0 ) ;
39353: LD_VAR 0 1
39357: PPUSH
39358: LD_INT 0
39360: PPUSH
39361: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39365: LD_VAR 0 1
39369: PPUSH
39370: LD_OWVAR 3
39374: PUSH
39375: LD_VAR 0 1
39379: DIFF
39380: PPUSH
39381: LD_VAR 0 1
39385: PPUSH
39386: CALL_OW 74
39390: PPUSH
39391: CALL_OW 115
// wait ( 0 0$20 ) ;
39395: LD_INT 700
39397: PPUSH
39398: CALL_OW 67
// SetSide ( un , your_side ) ;
39402: LD_VAR 0 1
39406: PPUSH
39407: LD_OWVAR 2
39411: PPUSH
39412: CALL_OW 235
// end ;
39416: PPOPN 2
39418: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39419: LD_EXP 90
39423: PUSH
39424: LD_EXP 123
39428: AND
39429: IFFALSE 39535
39431: GO 39433
39433: DISABLE
39434: LD_INT 0
39436: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39437: LD_ADDR_VAR 0 1
39441: PUSH
39442: LD_INT 22
39444: PUSH
39445: LD_OWVAR 2
39449: PUSH
39450: EMPTY
39451: LIST
39452: LIST
39453: PUSH
39454: LD_INT 2
39456: PUSH
39457: LD_INT 30
39459: PUSH
39460: LD_INT 0
39462: PUSH
39463: EMPTY
39464: LIST
39465: LIST
39466: PUSH
39467: LD_INT 30
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: EMPTY
39474: LIST
39475: LIST
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: LIST
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PPUSH
39486: CALL_OW 69
39490: ST_TO_ADDR
// if not depot then
39491: LD_VAR 0 1
39495: NOT
39496: IFFALSE 39500
// exit ;
39498: GO 39535
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39500: LD_VAR 0 1
39504: PUSH
39505: LD_INT 1
39507: ARRAY
39508: PPUSH
39509: CALL_OW 250
39513: PPUSH
39514: LD_VAR 0 1
39518: PUSH
39519: LD_INT 1
39521: ARRAY
39522: PPUSH
39523: CALL_OW 251
39527: PPUSH
39528: LD_INT 70
39530: PPUSH
39531: CALL_OW 495
// end ;
39535: PPOPN 1
39537: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39538: LD_EXP 90
39542: PUSH
39543: LD_EXP 124
39547: AND
39548: IFFALSE 39759
39550: GO 39552
39552: DISABLE
39553: LD_INT 0
39555: PPUSH
39556: PPUSH
39557: PPUSH
39558: PPUSH
39559: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39560: LD_ADDR_VAR 0 5
39564: PUSH
39565: LD_INT 22
39567: PUSH
39568: LD_OWVAR 2
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 21
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: PPUSH
39591: CALL_OW 69
39595: ST_TO_ADDR
// if not tmp then
39596: LD_VAR 0 5
39600: NOT
39601: IFFALSE 39605
// exit ;
39603: GO 39759
// for i in tmp do
39605: LD_ADDR_VAR 0 1
39609: PUSH
39610: LD_VAR 0 5
39614: PUSH
39615: FOR_IN
39616: IFFALSE 39757
// begin d := rand ( 0 , 5 ) ;
39618: LD_ADDR_VAR 0 4
39622: PUSH
39623: LD_INT 0
39625: PPUSH
39626: LD_INT 5
39628: PPUSH
39629: CALL_OW 12
39633: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39634: LD_ADDR_VAR 0 2
39638: PUSH
39639: LD_VAR 0 1
39643: PPUSH
39644: CALL_OW 250
39648: PPUSH
39649: LD_VAR 0 4
39653: PPUSH
39654: LD_INT 3
39656: PPUSH
39657: LD_INT 12
39659: PPUSH
39660: CALL_OW 12
39664: PPUSH
39665: CALL_OW 272
39669: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39670: LD_ADDR_VAR 0 3
39674: PUSH
39675: LD_VAR 0 1
39679: PPUSH
39680: CALL_OW 251
39684: PPUSH
39685: LD_VAR 0 4
39689: PPUSH
39690: LD_INT 3
39692: PPUSH
39693: LD_INT 12
39695: PPUSH
39696: CALL_OW 12
39700: PPUSH
39701: CALL_OW 273
39705: ST_TO_ADDR
// if ValidHex ( x , y ) then
39706: LD_VAR 0 2
39710: PPUSH
39711: LD_VAR 0 3
39715: PPUSH
39716: CALL_OW 488
39720: IFFALSE 39755
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39722: LD_VAR 0 1
39726: PPUSH
39727: LD_VAR 0 2
39731: PPUSH
39732: LD_VAR 0 3
39736: PPUSH
39737: LD_INT 3
39739: PPUSH
39740: LD_INT 6
39742: PPUSH
39743: CALL_OW 12
39747: PPUSH
39748: LD_INT 1
39750: PPUSH
39751: CALL_OW 483
// end ;
39755: GO 39615
39757: POP
39758: POP
// end ;
39759: PPOPN 5
39761: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39762: LD_EXP 90
39766: PUSH
39767: LD_EXP 125
39771: AND
39772: IFFALSE 39866
39774: GO 39776
39776: DISABLE
39777: LD_INT 0
39779: PPUSH
39780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39781: LD_ADDR_VAR 0 2
39785: PUSH
39786: LD_INT 22
39788: PUSH
39789: LD_OWVAR 2
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 32
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 21
39810: PUSH
39811: LD_INT 2
39813: PUSH
39814: EMPTY
39815: LIST
39816: LIST
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: LIST
39822: PPUSH
39823: CALL_OW 69
39827: ST_TO_ADDR
// if not tmp then
39828: LD_VAR 0 2
39832: NOT
39833: IFFALSE 39837
// exit ;
39835: GO 39866
// for i in tmp do
39837: LD_ADDR_VAR 0 1
39841: PUSH
39842: LD_VAR 0 2
39846: PUSH
39847: FOR_IN
39848: IFFALSE 39864
// SetFuel ( i , 0 ) ;
39850: LD_VAR 0 1
39854: PPUSH
39855: LD_INT 0
39857: PPUSH
39858: CALL_OW 240
39862: GO 39847
39864: POP
39865: POP
// end ;
39866: PPOPN 2
39868: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
39869: LD_EXP 90
39873: PUSH
39874: LD_EXP 126
39878: AND
39879: IFFALSE 39945
39881: GO 39883
39883: DISABLE
39884: LD_INT 0
39886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39887: LD_ADDR_VAR 0 1
39891: PUSH
39892: LD_INT 22
39894: PUSH
39895: LD_OWVAR 2
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 30
39906: PUSH
39907: LD_INT 29
39909: PUSH
39910: EMPTY
39911: LIST
39912: LIST
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PPUSH
39918: CALL_OW 69
39922: ST_TO_ADDR
// if not tmp then
39923: LD_VAR 0 1
39927: NOT
39928: IFFALSE 39932
// exit ;
39930: GO 39945
// DestroyUnit ( tmp [ 1 ] ) ;
39932: LD_VAR 0 1
39936: PUSH
39937: LD_INT 1
39939: ARRAY
39940: PPUSH
39941: CALL_OW 65
// end ;
39945: PPOPN 1
39947: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
39948: LD_EXP 90
39952: PUSH
39953: LD_EXP 128
39957: AND
39958: IFFALSE 40087
39960: GO 39962
39962: DISABLE
39963: LD_INT 0
39965: PPUSH
// begin uc_side := 0 ;
39966: LD_ADDR_OWVAR 20
39970: PUSH
39971: LD_INT 0
39973: ST_TO_ADDR
// uc_nation := nation_arabian ;
39974: LD_ADDR_OWVAR 21
39978: PUSH
39979: LD_INT 2
39981: ST_TO_ADDR
// hc_gallery :=  ;
39982: LD_ADDR_OWVAR 33
39986: PUSH
39987: LD_STRING 
39989: ST_TO_ADDR
// hc_name :=  ;
39990: LD_ADDR_OWVAR 26
39994: PUSH
39995: LD_STRING 
39997: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
39998: LD_INT 1
40000: PPUSH
40001: LD_INT 11
40003: PPUSH
40004: LD_INT 10
40006: PPUSH
40007: CALL_OW 380
// un := CreateHuman ;
40011: LD_ADDR_VAR 0 1
40015: PUSH
40016: CALL_OW 44
40020: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40021: LD_VAR 0 1
40025: PPUSH
40026: LD_INT 1
40028: PPUSH
40029: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
40033: LD_INT 35
40035: PPUSH
40036: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
40040: LD_VAR 0 1
40044: PPUSH
40045: LD_INT 22
40047: PUSH
40048: LD_OWVAR 2
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PPUSH
40057: CALL_OW 69
40061: PPUSH
40062: LD_VAR 0 1
40066: PPUSH
40067: CALL_OW 74
40071: PPUSH
40072: CALL_OW 115
// until IsDead ( un ) ;
40076: LD_VAR 0 1
40080: PPUSH
40081: CALL_OW 301
40085: IFFALSE 40033
// end ;
40087: PPOPN 1
40089: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
40090: LD_EXP 90
40094: PUSH
40095: LD_EXP 130
40099: AND
40100: IFFALSE 40112
40102: GO 40104
40104: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
40105: LD_STRING earthquake(getX(game), 0, 32)
40107: PPUSH
40108: CALL_OW 559
40112: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
40113: LD_EXP 90
40117: PUSH
40118: LD_EXP 131
40122: AND
40123: IFFALSE 40214
40125: GO 40127
40127: DISABLE
40128: LD_INT 0
40130: PPUSH
// begin enable ;
40131: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
40132: LD_ADDR_VAR 0 1
40136: PUSH
40137: LD_INT 22
40139: PUSH
40140: LD_OWVAR 2
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: LD_INT 21
40151: PUSH
40152: LD_INT 2
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: LD_INT 33
40161: PUSH
40162: LD_INT 3
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: LIST
40173: PPUSH
40174: CALL_OW 69
40178: ST_TO_ADDR
// if not tmp then
40179: LD_VAR 0 1
40183: NOT
40184: IFFALSE 40188
// exit ;
40186: GO 40214
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40188: LD_VAR 0 1
40192: PUSH
40193: LD_INT 1
40195: PPUSH
40196: LD_VAR 0 1
40200: PPUSH
40201: CALL_OW 12
40205: ARRAY
40206: PPUSH
40207: LD_INT 1
40209: PPUSH
40210: CALL_OW 234
// end ;
40214: PPOPN 1
40216: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
40217: LD_EXP 90
40221: PUSH
40222: LD_EXP 132
40226: AND
40227: IFFALSE 40368
40229: GO 40231
40231: DISABLE
40232: LD_INT 0
40234: PPUSH
40235: PPUSH
40236: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40237: LD_ADDR_VAR 0 3
40241: PUSH
40242: LD_INT 22
40244: PUSH
40245: LD_OWVAR 2
40249: PUSH
40250: EMPTY
40251: LIST
40252: LIST
40253: PUSH
40254: LD_INT 25
40256: PUSH
40257: LD_INT 1
40259: PUSH
40260: EMPTY
40261: LIST
40262: LIST
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PPUSH
40268: CALL_OW 69
40272: ST_TO_ADDR
// if not tmp then
40273: LD_VAR 0 3
40277: NOT
40278: IFFALSE 40282
// exit ;
40280: GO 40368
// un := tmp [ rand ( 1 , tmp ) ] ;
40282: LD_ADDR_VAR 0 2
40286: PUSH
40287: LD_VAR 0 3
40291: PUSH
40292: LD_INT 1
40294: PPUSH
40295: LD_VAR 0 3
40299: PPUSH
40300: CALL_OW 12
40304: ARRAY
40305: ST_TO_ADDR
// if Crawls ( un ) then
40306: LD_VAR 0 2
40310: PPUSH
40311: CALL_OW 318
40315: IFFALSE 40326
// ComWalk ( un ) ;
40317: LD_VAR 0 2
40321: PPUSH
40322: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
40326: LD_VAR 0 2
40330: PPUSH
40331: LD_INT 9
40333: PPUSH
40334: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
40338: LD_INT 28
40340: PPUSH
40341: LD_OWVAR 2
40345: PPUSH
40346: LD_INT 2
40348: PPUSH
40349: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
40353: LD_INT 29
40355: PPUSH
40356: LD_OWVAR 2
40360: PPUSH
40361: LD_INT 2
40363: PPUSH
40364: CALL_OW 322
// end ;
40368: PPOPN 3
40370: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40371: LD_EXP 90
40375: PUSH
40376: LD_EXP 133
40380: AND
40381: IFFALSE 40492
40383: GO 40385
40385: DISABLE
40386: LD_INT 0
40388: PPUSH
40389: PPUSH
40390: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40391: LD_ADDR_VAR 0 3
40395: PUSH
40396: LD_INT 22
40398: PUSH
40399: LD_OWVAR 2
40403: PUSH
40404: EMPTY
40405: LIST
40406: LIST
40407: PUSH
40408: LD_INT 25
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PPUSH
40422: CALL_OW 69
40426: ST_TO_ADDR
// if not tmp then
40427: LD_VAR 0 3
40431: NOT
40432: IFFALSE 40436
// exit ;
40434: GO 40492
// un := tmp [ rand ( 1 , tmp ) ] ;
40436: LD_ADDR_VAR 0 2
40440: PUSH
40441: LD_VAR 0 3
40445: PUSH
40446: LD_INT 1
40448: PPUSH
40449: LD_VAR 0 3
40453: PPUSH
40454: CALL_OW 12
40458: ARRAY
40459: ST_TO_ADDR
// if Crawls ( un ) then
40460: LD_VAR 0 2
40464: PPUSH
40465: CALL_OW 318
40469: IFFALSE 40480
// ComWalk ( un ) ;
40471: LD_VAR 0 2
40475: PPUSH
40476: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40480: LD_VAR 0 2
40484: PPUSH
40485: LD_INT 8
40487: PPUSH
40488: CALL_OW 336
// end ;
40492: PPOPN 3
40494: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40495: LD_EXP 90
40499: PUSH
40500: LD_EXP 134
40504: AND
40505: IFFALSE 40649
40507: GO 40509
40509: DISABLE
40510: LD_INT 0
40512: PPUSH
40513: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40514: LD_ADDR_VAR 0 2
40518: PUSH
40519: LD_INT 22
40521: PUSH
40522: LD_OWVAR 2
40526: PUSH
40527: EMPTY
40528: LIST
40529: LIST
40530: PUSH
40531: LD_INT 21
40533: PUSH
40534: LD_INT 2
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: LD_INT 2
40543: PUSH
40544: LD_INT 34
40546: PUSH
40547: LD_INT 12
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 34
40556: PUSH
40557: LD_INT 51
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 34
40566: PUSH
40567: LD_INT 32
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: LIST
40578: LIST
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: LIST
40584: PPUSH
40585: CALL_OW 69
40589: ST_TO_ADDR
// if not tmp then
40590: LD_VAR 0 2
40594: NOT
40595: IFFALSE 40599
// exit ;
40597: GO 40649
// for i in tmp do
40599: LD_ADDR_VAR 0 1
40603: PUSH
40604: LD_VAR 0 2
40608: PUSH
40609: FOR_IN
40610: IFFALSE 40647
// if GetCargo ( i , mat_artifact ) = 0 then
40612: LD_VAR 0 1
40616: PPUSH
40617: LD_INT 4
40619: PPUSH
40620: CALL_OW 289
40624: PUSH
40625: LD_INT 0
40627: EQUAL
40628: IFFALSE 40645
// SetCargo ( i , mat_siberit , 100 ) ;
40630: LD_VAR 0 1
40634: PPUSH
40635: LD_INT 3
40637: PPUSH
40638: LD_INT 100
40640: PPUSH
40641: CALL_OW 290
40645: GO 40609
40647: POP
40648: POP
// end ;
40649: PPOPN 2
40651: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40652: LD_EXP 90
40656: PUSH
40657: LD_EXP 135
40661: AND
40662: IFFALSE 40845
40664: GO 40666
40666: DISABLE
40667: LD_INT 0
40669: PPUSH
40670: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40671: LD_ADDR_VAR 0 2
40675: PUSH
40676: LD_INT 22
40678: PUSH
40679: LD_OWVAR 2
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PPUSH
40688: CALL_OW 69
40692: ST_TO_ADDR
// if not tmp then
40693: LD_VAR 0 2
40697: NOT
40698: IFFALSE 40702
// exit ;
40700: GO 40845
// for i := 1 to 2 do
40702: LD_ADDR_VAR 0 1
40706: PUSH
40707: DOUBLE
40708: LD_INT 1
40710: DEC
40711: ST_TO_ADDR
40712: LD_INT 2
40714: PUSH
40715: FOR_TO
40716: IFFALSE 40843
// begin uc_side := your_side ;
40718: LD_ADDR_OWVAR 20
40722: PUSH
40723: LD_OWVAR 2
40727: ST_TO_ADDR
// uc_nation := nation_american ;
40728: LD_ADDR_OWVAR 21
40732: PUSH
40733: LD_INT 1
40735: ST_TO_ADDR
// vc_chassis := us_morphling ;
40736: LD_ADDR_OWVAR 37
40740: PUSH
40741: LD_INT 5
40743: ST_TO_ADDR
// vc_engine := engine_siberite ;
40744: LD_ADDR_OWVAR 39
40748: PUSH
40749: LD_INT 3
40751: ST_TO_ADDR
// vc_control := control_computer ;
40752: LD_ADDR_OWVAR 38
40756: PUSH
40757: LD_INT 3
40759: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40760: LD_ADDR_OWVAR 40
40764: PUSH
40765: LD_INT 10
40767: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40768: LD_VAR 0 2
40772: PUSH
40773: LD_INT 1
40775: ARRAY
40776: PPUSH
40777: CALL_OW 310
40781: NOT
40782: IFFALSE 40829
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40784: CALL_OW 45
40788: PPUSH
40789: LD_VAR 0 2
40793: PUSH
40794: LD_INT 1
40796: ARRAY
40797: PPUSH
40798: CALL_OW 250
40802: PPUSH
40803: LD_VAR 0 2
40807: PUSH
40808: LD_INT 1
40810: ARRAY
40811: PPUSH
40812: CALL_OW 251
40816: PPUSH
40817: LD_INT 12
40819: PPUSH
40820: LD_INT 1
40822: PPUSH
40823: CALL_OW 50
40827: GO 40841
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
40829: CALL_OW 45
40833: PPUSH
40834: LD_INT 1
40836: PPUSH
40837: CALL_OW 51
// end ;
40841: GO 40715
40843: POP
40844: POP
// end ;
40845: PPOPN 2
40847: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
40848: LD_EXP 90
40852: PUSH
40853: LD_EXP 136
40857: AND
40858: IFFALSE 41080
40860: GO 40862
40862: DISABLE
40863: LD_INT 0
40865: PPUSH
40866: PPUSH
40867: PPUSH
40868: PPUSH
40869: PPUSH
40870: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40871: LD_ADDR_VAR 0 6
40875: PUSH
40876: LD_INT 22
40878: PUSH
40879: LD_OWVAR 2
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 21
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 3
40900: PUSH
40901: LD_INT 23
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: LIST
40919: PPUSH
40920: CALL_OW 69
40924: ST_TO_ADDR
// if not tmp then
40925: LD_VAR 0 6
40929: NOT
40930: IFFALSE 40934
// exit ;
40932: GO 41080
// s1 := rand ( 1 , 4 ) ;
40934: LD_ADDR_VAR 0 2
40938: PUSH
40939: LD_INT 1
40941: PPUSH
40942: LD_INT 4
40944: PPUSH
40945: CALL_OW 12
40949: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
40950: LD_ADDR_VAR 0 4
40954: PUSH
40955: LD_VAR 0 6
40959: PUSH
40960: LD_INT 1
40962: ARRAY
40963: PPUSH
40964: LD_VAR 0 2
40968: PPUSH
40969: CALL_OW 259
40973: ST_TO_ADDR
// if s1 = 1 then
40974: LD_VAR 0 2
40978: PUSH
40979: LD_INT 1
40981: EQUAL
40982: IFFALSE 41002
// s2 := rand ( 2 , 4 ) else
40984: LD_ADDR_VAR 0 3
40988: PUSH
40989: LD_INT 2
40991: PPUSH
40992: LD_INT 4
40994: PPUSH
40995: CALL_OW 12
40999: ST_TO_ADDR
41000: GO 41010
// s2 := 1 ;
41002: LD_ADDR_VAR 0 3
41006: PUSH
41007: LD_INT 1
41009: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
41010: LD_ADDR_VAR 0 5
41014: PUSH
41015: LD_VAR 0 6
41019: PUSH
41020: LD_INT 1
41022: ARRAY
41023: PPUSH
41024: LD_VAR 0 3
41028: PPUSH
41029: CALL_OW 259
41033: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
41034: LD_VAR 0 6
41038: PUSH
41039: LD_INT 1
41041: ARRAY
41042: PPUSH
41043: LD_VAR 0 2
41047: PPUSH
41048: LD_VAR 0 5
41052: PPUSH
41053: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
41057: LD_VAR 0 6
41061: PUSH
41062: LD_INT 1
41064: ARRAY
41065: PPUSH
41066: LD_VAR 0 3
41070: PPUSH
41071: LD_VAR 0 4
41075: PPUSH
41076: CALL_OW 237
// end ;
41080: PPOPN 6
41082: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
41083: LD_EXP 90
41087: PUSH
41088: LD_EXP 137
41092: AND
41093: IFFALSE 41172
41095: GO 41097
41097: DISABLE
41098: LD_INT 0
41100: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
41101: LD_ADDR_VAR 0 1
41105: PUSH
41106: LD_INT 22
41108: PUSH
41109: LD_OWVAR 2
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 30
41120: PUSH
41121: LD_INT 3
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: EMPTY
41129: LIST
41130: LIST
41131: PPUSH
41132: CALL_OW 69
41136: ST_TO_ADDR
// if not tmp then
41137: LD_VAR 0 1
41141: NOT
41142: IFFALSE 41146
// exit ;
41144: GO 41172
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
41146: LD_VAR 0 1
41150: PUSH
41151: LD_INT 1
41153: PPUSH
41154: LD_VAR 0 1
41158: PPUSH
41159: CALL_OW 12
41163: ARRAY
41164: PPUSH
41165: LD_INT 1
41167: PPUSH
41168: CALL_OW 234
// end ;
41172: PPOPN 1
41174: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
41175: LD_EXP 90
41179: PUSH
41180: LD_EXP 138
41184: AND
41185: IFFALSE 41297
41187: GO 41189
41189: DISABLE
41190: LD_INT 0
41192: PPUSH
41193: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
41194: LD_ADDR_VAR 0 2
41198: PUSH
41199: LD_INT 22
41201: PUSH
41202: LD_OWVAR 2
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 2
41213: PUSH
41214: LD_INT 30
41216: PUSH
41217: LD_INT 27
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 30
41226: PUSH
41227: LD_INT 26
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 30
41236: PUSH
41237: LD_INT 28
41239: PUSH
41240: EMPTY
41241: LIST
41242: LIST
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: PUSH
41250: EMPTY
41251: LIST
41252: LIST
41253: PPUSH
41254: CALL_OW 69
41258: ST_TO_ADDR
// if not tmp then
41259: LD_VAR 0 2
41263: NOT
41264: IFFALSE 41268
// exit ;
41266: GO 41297
// for i in tmp do
41268: LD_ADDR_VAR 0 1
41272: PUSH
41273: LD_VAR 0 2
41277: PUSH
41278: FOR_IN
41279: IFFALSE 41295
// SetLives ( i , 1 ) ;
41281: LD_VAR 0 1
41285: PPUSH
41286: LD_INT 1
41288: PPUSH
41289: CALL_OW 234
41293: GO 41278
41295: POP
41296: POP
// end ;
41297: PPOPN 2
41299: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
41300: LD_EXP 90
41304: PUSH
41305: LD_EXP 139
41309: AND
41310: IFFALSE 41597
41312: GO 41314
41314: DISABLE
41315: LD_INT 0
41317: PPUSH
41318: PPUSH
41319: PPUSH
// begin i := rand ( 1 , 7 ) ;
41320: LD_ADDR_VAR 0 1
41324: PUSH
41325: LD_INT 1
41327: PPUSH
41328: LD_INT 7
41330: PPUSH
41331: CALL_OW 12
41335: ST_TO_ADDR
// case i of 1 :
41336: LD_VAR 0 1
41340: PUSH
41341: LD_INT 1
41343: DOUBLE
41344: EQUAL
41345: IFTRUE 41349
41347: GO 41359
41349: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
41350: LD_STRING earthquake(getX(game), 0, 32)
41352: PPUSH
41353: CALL_OW 559
41357: GO 41597
41359: LD_INT 2
41361: DOUBLE
41362: EQUAL
41363: IFTRUE 41367
41365: GO 41381
41367: POP
// begin ToLua ( displayStucuk(); ) ;
41368: LD_STRING displayStucuk();
41370: PPUSH
41371: CALL_OW 559
// ResetFog ;
41375: CALL_OW 335
// end ; 3 :
41379: GO 41597
41381: LD_INT 3
41383: DOUBLE
41384: EQUAL
41385: IFTRUE 41389
41387: GO 41493
41389: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41390: LD_ADDR_VAR 0 2
41394: PUSH
41395: LD_INT 22
41397: PUSH
41398: LD_OWVAR 2
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 25
41409: PUSH
41410: LD_INT 1
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PPUSH
41421: CALL_OW 69
41425: ST_TO_ADDR
// if not tmp then
41426: LD_VAR 0 2
41430: NOT
41431: IFFALSE 41435
// exit ;
41433: GO 41597
// un := tmp [ rand ( 1 , tmp ) ] ;
41435: LD_ADDR_VAR 0 3
41439: PUSH
41440: LD_VAR 0 2
41444: PUSH
41445: LD_INT 1
41447: PPUSH
41448: LD_VAR 0 2
41452: PPUSH
41453: CALL_OW 12
41457: ARRAY
41458: ST_TO_ADDR
// if Crawls ( un ) then
41459: LD_VAR 0 3
41463: PPUSH
41464: CALL_OW 318
41468: IFFALSE 41479
// ComWalk ( un ) ;
41470: LD_VAR 0 3
41474: PPUSH
41475: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41479: LD_VAR 0 3
41483: PPUSH
41484: LD_INT 8
41486: PPUSH
41487: CALL_OW 336
// end ; 4 :
41491: GO 41597
41493: LD_INT 4
41495: DOUBLE
41496: EQUAL
41497: IFTRUE 41501
41499: GO 41575
41501: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41502: LD_ADDR_VAR 0 2
41506: PUSH
41507: LD_INT 22
41509: PUSH
41510: LD_OWVAR 2
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 30
41521: PUSH
41522: LD_INT 29
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PPUSH
41533: CALL_OW 69
41537: ST_TO_ADDR
// if not tmp then
41538: LD_VAR 0 2
41542: NOT
41543: IFFALSE 41547
// exit ;
41545: GO 41597
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41547: LD_VAR 0 2
41551: PUSH
41552: LD_INT 1
41554: ARRAY
41555: PPUSH
41556: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41560: LD_VAR 0 2
41564: PUSH
41565: LD_INT 1
41567: ARRAY
41568: PPUSH
41569: CALL_OW 65
// end ; 5 .. 7 :
41573: GO 41597
41575: LD_INT 5
41577: DOUBLE
41578: GREATEREQUAL
41579: IFFALSE 41587
41581: LD_INT 7
41583: DOUBLE
41584: LESSEQUAL
41585: IFTRUE 41589
41587: GO 41596
41589: POP
// StreamSibBomb ; end ;
41590: CALL 37834 0 0
41594: GO 41597
41596: POP
// end ;
41597: PPOPN 3
41599: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41600: LD_EXP 90
41604: PUSH
41605: LD_EXP 140
41609: AND
41610: IFFALSE 41766
41612: GO 41614
41614: DISABLE
41615: LD_INT 0
41617: PPUSH
41618: PPUSH
41619: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41620: LD_ADDR_VAR 0 2
41624: PUSH
41625: LD_INT 81
41627: PUSH
41628: LD_OWVAR 2
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 2
41639: PUSH
41640: LD_INT 21
41642: PUSH
41643: LD_INT 1
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 21
41652: PUSH
41653: LD_INT 2
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: LIST
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PPUSH
41669: CALL_OW 69
41673: ST_TO_ADDR
// if not tmp then
41674: LD_VAR 0 2
41678: NOT
41679: IFFALSE 41683
// exit ;
41681: GO 41766
// p := 0 ;
41683: LD_ADDR_VAR 0 3
41687: PUSH
41688: LD_INT 0
41690: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41691: LD_INT 35
41693: PPUSH
41694: CALL_OW 67
// p := p + 1 ;
41698: LD_ADDR_VAR 0 3
41702: PUSH
41703: LD_VAR 0 3
41707: PUSH
41708: LD_INT 1
41710: PLUS
41711: ST_TO_ADDR
// for i in tmp do
41712: LD_ADDR_VAR 0 1
41716: PUSH
41717: LD_VAR 0 2
41721: PUSH
41722: FOR_IN
41723: IFFALSE 41754
// if GetLives ( i ) < 1000 then
41725: LD_VAR 0 1
41729: PPUSH
41730: CALL_OW 256
41734: PUSH
41735: LD_INT 1000
41737: LESS
41738: IFFALSE 41752
// SetLives ( i , 1000 ) ;
41740: LD_VAR 0 1
41744: PPUSH
41745: LD_INT 1000
41747: PPUSH
41748: CALL_OW 234
41752: GO 41722
41754: POP
41755: POP
// until p > 20 ;
41756: LD_VAR 0 3
41760: PUSH
41761: LD_INT 20
41763: GREATER
41764: IFFALSE 41691
// end ;
41766: PPOPN 3
41768: END
// every 0 0$1 trigger StreamModeActive and sTime do
41769: LD_EXP 90
41773: PUSH
41774: LD_EXP 141
41778: AND
41779: IFFALSE 41814
41781: GO 41783
41783: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41784: LD_INT 28
41786: PPUSH
41787: LD_OWVAR 2
41791: PPUSH
41792: LD_INT 2
41794: PPUSH
41795: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
41799: LD_INT 30
41801: PPUSH
41802: LD_OWVAR 2
41806: PPUSH
41807: LD_INT 2
41809: PPUSH
41810: CALL_OW 322
// end ;
41814: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
41815: LD_EXP 90
41819: PUSH
41820: LD_EXP 142
41824: AND
41825: IFFALSE 41946
41827: GO 41829
41829: DISABLE
41830: LD_INT 0
41832: PPUSH
41833: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41834: LD_ADDR_VAR 0 2
41838: PUSH
41839: LD_INT 22
41841: PUSH
41842: LD_OWVAR 2
41846: PUSH
41847: EMPTY
41848: LIST
41849: LIST
41850: PUSH
41851: LD_INT 21
41853: PUSH
41854: LD_INT 1
41856: PUSH
41857: EMPTY
41858: LIST
41859: LIST
41860: PUSH
41861: LD_INT 3
41863: PUSH
41864: LD_INT 23
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: LIST
41882: PPUSH
41883: CALL_OW 69
41887: ST_TO_ADDR
// if not tmp then
41888: LD_VAR 0 2
41892: NOT
41893: IFFALSE 41897
// exit ;
41895: GO 41946
// for i in tmp do
41897: LD_ADDR_VAR 0 1
41901: PUSH
41902: LD_VAR 0 2
41906: PUSH
41907: FOR_IN
41908: IFFALSE 41944
// begin if Crawls ( i ) then
41910: LD_VAR 0 1
41914: PPUSH
41915: CALL_OW 318
41919: IFFALSE 41930
// ComWalk ( i ) ;
41921: LD_VAR 0 1
41925: PPUSH
41926: CALL_OW 138
// SetClass ( i , 2 ) ;
41930: LD_VAR 0 1
41934: PPUSH
41935: LD_INT 2
41937: PPUSH
41938: CALL_OW 336
// end ;
41942: GO 41907
41944: POP
41945: POP
// end ;
41946: PPOPN 2
41948: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
41949: LD_EXP 90
41953: PUSH
41954: LD_EXP 143
41958: AND
41959: IFFALSE 42247
41961: GO 41963
41963: DISABLE
41964: LD_INT 0
41966: PPUSH
41967: PPUSH
41968: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
41969: LD_OWVAR 2
41973: PPUSH
41974: LD_INT 9
41976: PPUSH
41977: LD_INT 1
41979: PPUSH
41980: LD_INT 1
41982: PPUSH
41983: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
41987: LD_INT 9
41989: PPUSH
41990: LD_OWVAR 2
41994: PPUSH
41995: CALL_OW 343
// uc_side := 9 ;
41999: LD_ADDR_OWVAR 20
42003: PUSH
42004: LD_INT 9
42006: ST_TO_ADDR
// uc_nation := 2 ;
42007: LD_ADDR_OWVAR 21
42011: PUSH
42012: LD_INT 2
42014: ST_TO_ADDR
// hc_name := Dark Warrior ;
42015: LD_ADDR_OWVAR 26
42019: PUSH
42020: LD_STRING Dark Warrior
42022: ST_TO_ADDR
// hc_gallery :=  ;
42023: LD_ADDR_OWVAR 33
42027: PUSH
42028: LD_STRING 
42030: ST_TO_ADDR
// hc_noskilllimit := true ;
42031: LD_ADDR_OWVAR 76
42035: PUSH
42036: LD_INT 1
42038: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
42039: LD_ADDR_OWVAR 31
42043: PUSH
42044: LD_INT 30
42046: PUSH
42047: LD_INT 30
42049: PUSH
42050: LD_INT 30
42052: PUSH
42053: LD_INT 30
42055: PUSH
42056: EMPTY
42057: LIST
42058: LIST
42059: LIST
42060: LIST
42061: ST_TO_ADDR
// un := CreateHuman ;
42062: LD_ADDR_VAR 0 3
42066: PUSH
42067: CALL_OW 44
42071: ST_TO_ADDR
// hc_noskilllimit := false ;
42072: LD_ADDR_OWVAR 76
42076: PUSH
42077: LD_INT 0
42079: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
42080: LD_VAR 0 3
42084: PPUSH
42085: LD_INT 1
42087: PPUSH
42088: CALL_OW 51
// ToLua ( playRanger() ) ;
42092: LD_STRING playRanger()
42094: PPUSH
42095: CALL_OW 559
// p := 0 ;
42099: LD_ADDR_VAR 0 2
42103: PUSH
42104: LD_INT 0
42106: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42107: LD_INT 35
42109: PPUSH
42110: CALL_OW 67
// p := p + 1 ;
42114: LD_ADDR_VAR 0 2
42118: PUSH
42119: LD_VAR 0 2
42123: PUSH
42124: LD_INT 1
42126: PLUS
42127: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
42128: LD_VAR 0 3
42132: PPUSH
42133: CALL_OW 256
42137: PUSH
42138: LD_INT 1000
42140: LESS
42141: IFFALSE 42155
// SetLives ( un , 1000 ) ;
42143: LD_VAR 0 3
42147: PPUSH
42148: LD_INT 1000
42150: PPUSH
42151: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
42155: LD_VAR 0 3
42159: PPUSH
42160: LD_INT 81
42162: PUSH
42163: LD_OWVAR 2
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 91
42174: PUSH
42175: LD_VAR 0 3
42179: PUSH
42180: LD_INT 30
42182: PUSH
42183: EMPTY
42184: LIST
42185: LIST
42186: LIST
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PPUSH
42192: CALL_OW 69
42196: PPUSH
42197: LD_VAR 0 3
42201: PPUSH
42202: CALL_OW 74
42206: PPUSH
42207: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
42211: LD_VAR 0 2
42215: PUSH
42216: LD_INT 80
42218: GREATER
42219: PUSH
42220: LD_VAR 0 3
42224: PPUSH
42225: CALL_OW 301
42229: OR
42230: IFFALSE 42107
// if un then
42232: LD_VAR 0 3
42236: IFFALSE 42247
// RemoveUnit ( un ) ;
42238: LD_VAR 0 3
42242: PPUSH
42243: CALL_OW 64
// end ;
42247: PPOPN 3
42249: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
42250: LD_EXP 144
42254: IFFALSE 42370
42256: GO 42258
42258: DISABLE
42259: LD_INT 0
42261: PPUSH
42262: PPUSH
42263: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
42264: LD_ADDR_VAR 0 2
42268: PUSH
42269: LD_INT 81
42271: PUSH
42272: LD_OWVAR 2
42276: PUSH
42277: EMPTY
42278: LIST
42279: LIST
42280: PUSH
42281: LD_INT 21
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: EMPTY
42288: LIST
42289: LIST
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PPUSH
42295: CALL_OW 69
42299: ST_TO_ADDR
// ToLua ( playComputer() ) ;
42300: LD_STRING playComputer()
42302: PPUSH
42303: CALL_OW 559
// if not tmp then
42307: LD_VAR 0 2
42311: NOT
42312: IFFALSE 42316
// exit ;
42314: GO 42370
// for i in tmp do
42316: LD_ADDR_VAR 0 1
42320: PUSH
42321: LD_VAR 0 2
42325: PUSH
42326: FOR_IN
42327: IFFALSE 42368
// for j := 1 to 4 do
42329: LD_ADDR_VAR 0 3
42333: PUSH
42334: DOUBLE
42335: LD_INT 1
42337: DEC
42338: ST_TO_ADDR
42339: LD_INT 4
42341: PUSH
42342: FOR_TO
42343: IFFALSE 42364
// SetSkill ( i , j , 10 ) ;
42345: LD_VAR 0 1
42349: PPUSH
42350: LD_VAR 0 3
42354: PPUSH
42355: LD_INT 10
42357: PPUSH
42358: CALL_OW 237
42362: GO 42342
42364: POP
42365: POP
42366: GO 42326
42368: POP
42369: POP
// end ;
42370: PPOPN 3
42372: END
// every 0 0$1 trigger s30 do var i , tmp ;
42373: LD_EXP 145
42377: IFFALSE 42446
42379: GO 42381
42381: DISABLE
42382: LD_INT 0
42384: PPUSH
42385: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42386: LD_ADDR_VAR 0 2
42390: PUSH
42391: LD_INT 22
42393: PUSH
42394: LD_OWVAR 2
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PPUSH
42403: CALL_OW 69
42407: ST_TO_ADDR
// if not tmp then
42408: LD_VAR 0 2
42412: NOT
42413: IFFALSE 42417
// exit ;
42415: GO 42446
// for i in tmp do
42417: LD_ADDR_VAR 0 1
42421: PUSH
42422: LD_VAR 0 2
42426: PUSH
42427: FOR_IN
42428: IFFALSE 42444
// SetLives ( i , 300 ) ;
42430: LD_VAR 0 1
42434: PPUSH
42435: LD_INT 300
42437: PPUSH
42438: CALL_OW 234
42442: GO 42427
42444: POP
42445: POP
// end ;
42446: PPOPN 2
42448: END
// every 0 0$1 trigger s60 do var i , tmp ;
42449: LD_EXP 146
42453: IFFALSE 42522
42455: GO 42457
42457: DISABLE
42458: LD_INT 0
42460: PPUSH
42461: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42462: LD_ADDR_VAR 0 2
42466: PUSH
42467: LD_INT 22
42469: PUSH
42470: LD_OWVAR 2
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PPUSH
42479: CALL_OW 69
42483: ST_TO_ADDR
// if not tmp then
42484: LD_VAR 0 2
42488: NOT
42489: IFFALSE 42493
// exit ;
42491: GO 42522
// for i in tmp do
42493: LD_ADDR_VAR 0 1
42497: PUSH
42498: LD_VAR 0 2
42502: PUSH
42503: FOR_IN
42504: IFFALSE 42520
// SetLives ( i , 600 ) ;
42506: LD_VAR 0 1
42510: PPUSH
42511: LD_INT 600
42513: PPUSH
42514: CALL_OW 234
42518: GO 42503
42520: POP
42521: POP
// end ;
42522: PPOPN 2
42524: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42525: LD_INT 0
42527: PPUSH
// case cmd of 301 :
42528: LD_VAR 0 1
42532: PUSH
42533: LD_INT 301
42535: DOUBLE
42536: EQUAL
42537: IFTRUE 42541
42539: GO 42573
42541: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42542: LD_VAR 0 6
42546: PPUSH
42547: LD_VAR 0 7
42551: PPUSH
42552: LD_VAR 0 8
42556: PPUSH
42557: LD_VAR 0 4
42561: PPUSH
42562: LD_VAR 0 5
42566: PPUSH
42567: CALL 43774 0 5
42571: GO 42694
42573: LD_INT 302
42575: DOUBLE
42576: EQUAL
42577: IFTRUE 42581
42579: GO 42618
42581: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42582: LD_VAR 0 6
42586: PPUSH
42587: LD_VAR 0 7
42591: PPUSH
42592: LD_VAR 0 8
42596: PPUSH
42597: LD_VAR 0 9
42601: PPUSH
42602: LD_VAR 0 4
42606: PPUSH
42607: LD_VAR 0 5
42611: PPUSH
42612: CALL 43865 0 6
42616: GO 42694
42618: LD_INT 303
42620: DOUBLE
42621: EQUAL
42622: IFTRUE 42626
42624: GO 42663
42626: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42627: LD_VAR 0 6
42631: PPUSH
42632: LD_VAR 0 7
42636: PPUSH
42637: LD_VAR 0 8
42641: PPUSH
42642: LD_VAR 0 9
42646: PPUSH
42647: LD_VAR 0 4
42651: PPUSH
42652: LD_VAR 0 5
42656: PPUSH
42657: CALL 42699 0 6
42661: GO 42694
42663: LD_INT 304
42665: DOUBLE
42666: EQUAL
42667: IFTRUE 42671
42669: GO 42693
42671: POP
// hHackTeleport ( unit , x , y ) ; end ;
42672: LD_VAR 0 2
42676: PPUSH
42677: LD_VAR 0 4
42681: PPUSH
42682: LD_VAR 0 5
42686: PPUSH
42687: CALL 44458 0 3
42691: GO 42694
42693: POP
// end ;
42694: LD_VAR 0 12
42698: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42699: LD_INT 0
42701: PPUSH
42702: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42703: LD_VAR 0 1
42707: PUSH
42708: LD_INT 1
42710: LESS
42711: PUSH
42712: LD_VAR 0 1
42716: PUSH
42717: LD_INT 3
42719: GREATER
42720: OR
42721: PUSH
42722: LD_VAR 0 5
42726: PPUSH
42727: LD_VAR 0 6
42731: PPUSH
42732: CALL_OW 428
42736: OR
42737: IFFALSE 42741
// exit ;
42739: GO 43461
// uc_side := your_side ;
42741: LD_ADDR_OWVAR 20
42745: PUSH
42746: LD_OWVAR 2
42750: ST_TO_ADDR
// uc_nation := nation ;
42751: LD_ADDR_OWVAR 21
42755: PUSH
42756: LD_VAR 0 1
42760: ST_TO_ADDR
// bc_level = 1 ;
42761: LD_ADDR_OWVAR 43
42765: PUSH
42766: LD_INT 1
42768: ST_TO_ADDR
// case btype of 1 :
42769: LD_VAR 0 2
42773: PUSH
42774: LD_INT 1
42776: DOUBLE
42777: EQUAL
42778: IFTRUE 42782
42780: GO 42793
42782: POP
// bc_type := b_depot ; 2 :
42783: LD_ADDR_OWVAR 42
42787: PUSH
42788: LD_INT 0
42790: ST_TO_ADDR
42791: GO 43405
42793: LD_INT 2
42795: DOUBLE
42796: EQUAL
42797: IFTRUE 42801
42799: GO 42812
42801: POP
// bc_type := b_warehouse ; 3 :
42802: LD_ADDR_OWVAR 42
42806: PUSH
42807: LD_INT 1
42809: ST_TO_ADDR
42810: GO 43405
42812: LD_INT 3
42814: DOUBLE
42815: EQUAL
42816: IFTRUE 42820
42818: GO 42831
42820: POP
// bc_type := b_lab ; 4 .. 9 :
42821: LD_ADDR_OWVAR 42
42825: PUSH
42826: LD_INT 6
42828: ST_TO_ADDR
42829: GO 43405
42831: LD_INT 4
42833: DOUBLE
42834: GREATEREQUAL
42835: IFFALSE 42843
42837: LD_INT 9
42839: DOUBLE
42840: LESSEQUAL
42841: IFTRUE 42845
42843: GO 42897
42845: POP
// begin bc_type := b_lab_half ;
42846: LD_ADDR_OWVAR 42
42850: PUSH
42851: LD_INT 7
42853: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
42854: LD_ADDR_OWVAR 44
42858: PUSH
42859: LD_INT 10
42861: PUSH
42862: LD_INT 11
42864: PUSH
42865: LD_INT 12
42867: PUSH
42868: LD_INT 15
42870: PUSH
42871: LD_INT 14
42873: PUSH
42874: LD_INT 13
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: PUSH
42885: LD_VAR 0 2
42889: PUSH
42890: LD_INT 3
42892: MINUS
42893: ARRAY
42894: ST_TO_ADDR
// end ; 10 .. 13 :
42895: GO 43405
42897: LD_INT 10
42899: DOUBLE
42900: GREATEREQUAL
42901: IFFALSE 42909
42903: LD_INT 13
42905: DOUBLE
42906: LESSEQUAL
42907: IFTRUE 42911
42909: GO 42988
42911: POP
// begin bc_type := b_lab_full ;
42912: LD_ADDR_OWVAR 42
42916: PUSH
42917: LD_INT 8
42919: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
42920: LD_ADDR_OWVAR 44
42924: PUSH
42925: LD_INT 10
42927: PUSH
42928: LD_INT 12
42930: PUSH
42931: LD_INT 14
42933: PUSH
42934: LD_INT 13
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: PUSH
42943: LD_VAR 0 2
42947: PUSH
42948: LD_INT 9
42950: MINUS
42951: ARRAY
42952: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
42953: LD_ADDR_OWVAR 45
42957: PUSH
42958: LD_INT 11
42960: PUSH
42961: LD_INT 15
42963: PUSH
42964: LD_INT 12
42966: PUSH
42967: LD_INT 15
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: LIST
42974: LIST
42975: PUSH
42976: LD_VAR 0 2
42980: PUSH
42981: LD_INT 9
42983: MINUS
42984: ARRAY
42985: ST_TO_ADDR
// end ; 14 :
42986: GO 43405
42988: LD_INT 14
42990: DOUBLE
42991: EQUAL
42992: IFTRUE 42996
42994: GO 43007
42996: POP
// bc_type := b_workshop ; 15 :
42997: LD_ADDR_OWVAR 42
43001: PUSH
43002: LD_INT 2
43004: ST_TO_ADDR
43005: GO 43405
43007: LD_INT 15
43009: DOUBLE
43010: EQUAL
43011: IFTRUE 43015
43013: GO 43026
43015: POP
// bc_type := b_factory ; 16 :
43016: LD_ADDR_OWVAR 42
43020: PUSH
43021: LD_INT 3
43023: ST_TO_ADDR
43024: GO 43405
43026: LD_INT 16
43028: DOUBLE
43029: EQUAL
43030: IFTRUE 43034
43032: GO 43045
43034: POP
// bc_type := b_ext_gun ; 17 :
43035: LD_ADDR_OWVAR 42
43039: PUSH
43040: LD_INT 17
43042: ST_TO_ADDR
43043: GO 43405
43045: LD_INT 17
43047: DOUBLE
43048: EQUAL
43049: IFTRUE 43053
43051: GO 43081
43053: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
43054: LD_ADDR_OWVAR 42
43058: PUSH
43059: LD_INT 19
43061: PUSH
43062: LD_INT 23
43064: PUSH
43065: LD_INT 19
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: LIST
43072: PUSH
43073: LD_VAR 0 1
43077: ARRAY
43078: ST_TO_ADDR
43079: GO 43405
43081: LD_INT 18
43083: DOUBLE
43084: EQUAL
43085: IFTRUE 43089
43087: GO 43100
43089: POP
// bc_type := b_ext_radar ; 19 :
43090: LD_ADDR_OWVAR 42
43094: PUSH
43095: LD_INT 20
43097: ST_TO_ADDR
43098: GO 43405
43100: LD_INT 19
43102: DOUBLE
43103: EQUAL
43104: IFTRUE 43108
43106: GO 43119
43108: POP
// bc_type := b_ext_radio ; 20 :
43109: LD_ADDR_OWVAR 42
43113: PUSH
43114: LD_INT 22
43116: ST_TO_ADDR
43117: GO 43405
43119: LD_INT 20
43121: DOUBLE
43122: EQUAL
43123: IFTRUE 43127
43125: GO 43138
43127: POP
// bc_type := b_ext_siberium ; 21 :
43128: LD_ADDR_OWVAR 42
43132: PUSH
43133: LD_INT 21
43135: ST_TO_ADDR
43136: GO 43405
43138: LD_INT 21
43140: DOUBLE
43141: EQUAL
43142: IFTRUE 43146
43144: GO 43157
43146: POP
// bc_type := b_ext_computer ; 22 :
43147: LD_ADDR_OWVAR 42
43151: PUSH
43152: LD_INT 24
43154: ST_TO_ADDR
43155: GO 43405
43157: LD_INT 22
43159: DOUBLE
43160: EQUAL
43161: IFTRUE 43165
43163: GO 43176
43165: POP
// bc_type := b_ext_track ; 23 :
43166: LD_ADDR_OWVAR 42
43170: PUSH
43171: LD_INT 16
43173: ST_TO_ADDR
43174: GO 43405
43176: LD_INT 23
43178: DOUBLE
43179: EQUAL
43180: IFTRUE 43184
43182: GO 43195
43184: POP
// bc_type := b_ext_laser ; 24 :
43185: LD_ADDR_OWVAR 42
43189: PUSH
43190: LD_INT 25
43192: ST_TO_ADDR
43193: GO 43405
43195: LD_INT 24
43197: DOUBLE
43198: EQUAL
43199: IFTRUE 43203
43201: GO 43214
43203: POP
// bc_type := b_control_tower ; 25 :
43204: LD_ADDR_OWVAR 42
43208: PUSH
43209: LD_INT 36
43211: ST_TO_ADDR
43212: GO 43405
43214: LD_INT 25
43216: DOUBLE
43217: EQUAL
43218: IFTRUE 43222
43220: GO 43233
43222: POP
// bc_type := b_breastwork ; 26 :
43223: LD_ADDR_OWVAR 42
43227: PUSH
43228: LD_INT 31
43230: ST_TO_ADDR
43231: GO 43405
43233: LD_INT 26
43235: DOUBLE
43236: EQUAL
43237: IFTRUE 43241
43239: GO 43252
43241: POP
// bc_type := b_bunker ; 27 :
43242: LD_ADDR_OWVAR 42
43246: PUSH
43247: LD_INT 32
43249: ST_TO_ADDR
43250: GO 43405
43252: LD_INT 27
43254: DOUBLE
43255: EQUAL
43256: IFTRUE 43260
43258: GO 43271
43260: POP
// bc_type := b_turret ; 28 :
43261: LD_ADDR_OWVAR 42
43265: PUSH
43266: LD_INT 33
43268: ST_TO_ADDR
43269: GO 43405
43271: LD_INT 28
43273: DOUBLE
43274: EQUAL
43275: IFTRUE 43279
43277: GO 43290
43279: POP
// bc_type := b_armoury ; 29 :
43280: LD_ADDR_OWVAR 42
43284: PUSH
43285: LD_INT 4
43287: ST_TO_ADDR
43288: GO 43405
43290: LD_INT 29
43292: DOUBLE
43293: EQUAL
43294: IFTRUE 43298
43296: GO 43309
43298: POP
// bc_type := b_barracks ; 30 :
43299: LD_ADDR_OWVAR 42
43303: PUSH
43304: LD_INT 5
43306: ST_TO_ADDR
43307: GO 43405
43309: LD_INT 30
43311: DOUBLE
43312: EQUAL
43313: IFTRUE 43317
43315: GO 43328
43317: POP
// bc_type := b_solar_power ; 31 :
43318: LD_ADDR_OWVAR 42
43322: PUSH
43323: LD_INT 27
43325: ST_TO_ADDR
43326: GO 43405
43328: LD_INT 31
43330: DOUBLE
43331: EQUAL
43332: IFTRUE 43336
43334: GO 43347
43336: POP
// bc_type := b_oil_power ; 32 :
43337: LD_ADDR_OWVAR 42
43341: PUSH
43342: LD_INT 26
43344: ST_TO_ADDR
43345: GO 43405
43347: LD_INT 32
43349: DOUBLE
43350: EQUAL
43351: IFTRUE 43355
43353: GO 43366
43355: POP
// bc_type := b_siberite_power ; 33 :
43356: LD_ADDR_OWVAR 42
43360: PUSH
43361: LD_INT 28
43363: ST_TO_ADDR
43364: GO 43405
43366: LD_INT 33
43368: DOUBLE
43369: EQUAL
43370: IFTRUE 43374
43372: GO 43385
43374: POP
// bc_type := b_oil_mine ; 34 :
43375: LD_ADDR_OWVAR 42
43379: PUSH
43380: LD_INT 29
43382: ST_TO_ADDR
43383: GO 43405
43385: LD_INT 34
43387: DOUBLE
43388: EQUAL
43389: IFTRUE 43393
43391: GO 43404
43393: POP
// bc_type := b_siberite_mine ; end ;
43394: LD_ADDR_OWVAR 42
43398: PUSH
43399: LD_INT 30
43401: ST_TO_ADDR
43402: GO 43405
43404: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43405: LD_ADDR_VAR 0 8
43409: PUSH
43410: LD_VAR 0 5
43414: PPUSH
43415: LD_VAR 0 6
43419: PPUSH
43420: LD_VAR 0 3
43424: PPUSH
43425: CALL_OW 47
43429: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43430: LD_OWVAR 42
43434: PUSH
43435: LD_INT 32
43437: PUSH
43438: LD_INT 33
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: IN
43445: IFFALSE 43461
// PlaceWeaponTurret ( b , weapon ) ;
43447: LD_VAR 0 8
43451: PPUSH
43452: LD_VAR 0 4
43456: PPUSH
43457: CALL_OW 431
// end ;
43461: LD_VAR 0 7
43465: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43466: LD_INT 0
43468: PPUSH
43469: PPUSH
43470: PPUSH
43471: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43472: LD_ADDR_VAR 0 4
43476: PUSH
43477: LD_INT 22
43479: PUSH
43480: LD_OWVAR 2
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 2
43491: PUSH
43492: LD_INT 30
43494: PUSH
43495: LD_INT 0
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 30
43504: PUSH
43505: LD_INT 1
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: LIST
43516: PUSH
43517: EMPTY
43518: LIST
43519: LIST
43520: PPUSH
43521: CALL_OW 69
43525: ST_TO_ADDR
// if not tmp then
43526: LD_VAR 0 4
43530: NOT
43531: IFFALSE 43535
// exit ;
43533: GO 43594
// for i in tmp do
43535: LD_ADDR_VAR 0 2
43539: PUSH
43540: LD_VAR 0 4
43544: PUSH
43545: FOR_IN
43546: IFFALSE 43592
// for j = 1 to 3 do
43548: LD_ADDR_VAR 0 3
43552: PUSH
43553: DOUBLE
43554: LD_INT 1
43556: DEC
43557: ST_TO_ADDR
43558: LD_INT 3
43560: PUSH
43561: FOR_TO
43562: IFFALSE 43588
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43564: LD_VAR 0 2
43568: PPUSH
43569: CALL_OW 274
43573: PPUSH
43574: LD_VAR 0 3
43578: PPUSH
43579: LD_INT 99999
43581: PPUSH
43582: CALL_OW 277
43586: GO 43561
43588: POP
43589: POP
43590: GO 43545
43592: POP
43593: POP
// end ;
43594: LD_VAR 0 1
43598: RET
// export function hHackSetLevel10 ; var i , j ; begin
43599: LD_INT 0
43601: PPUSH
43602: PPUSH
43603: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43604: LD_ADDR_VAR 0 2
43608: PUSH
43609: LD_INT 21
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PPUSH
43619: CALL_OW 69
43623: PUSH
43624: FOR_IN
43625: IFFALSE 43677
// if IsSelected ( i ) then
43627: LD_VAR 0 2
43631: PPUSH
43632: CALL_OW 306
43636: IFFALSE 43675
// begin for j := 1 to 4 do
43638: LD_ADDR_VAR 0 3
43642: PUSH
43643: DOUBLE
43644: LD_INT 1
43646: DEC
43647: ST_TO_ADDR
43648: LD_INT 4
43650: PUSH
43651: FOR_TO
43652: IFFALSE 43673
// SetSkill ( i , j , 10 ) ;
43654: LD_VAR 0 2
43658: PPUSH
43659: LD_VAR 0 3
43663: PPUSH
43664: LD_INT 10
43666: PPUSH
43667: CALL_OW 237
43671: GO 43651
43673: POP
43674: POP
// end ;
43675: GO 43624
43677: POP
43678: POP
// end ;
43679: LD_VAR 0 1
43683: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43684: LD_INT 0
43686: PPUSH
43687: PPUSH
43688: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43689: LD_ADDR_VAR 0 2
43693: PUSH
43694: LD_INT 22
43696: PUSH
43697: LD_OWVAR 2
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 21
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PPUSH
43720: CALL_OW 69
43724: PUSH
43725: FOR_IN
43726: IFFALSE 43767
// begin for j := 1 to 4 do
43728: LD_ADDR_VAR 0 3
43732: PUSH
43733: DOUBLE
43734: LD_INT 1
43736: DEC
43737: ST_TO_ADDR
43738: LD_INT 4
43740: PUSH
43741: FOR_TO
43742: IFFALSE 43763
// SetSkill ( i , j , 10 ) ;
43744: LD_VAR 0 2
43748: PPUSH
43749: LD_VAR 0 3
43753: PPUSH
43754: LD_INT 10
43756: PPUSH
43757: CALL_OW 237
43761: GO 43741
43763: POP
43764: POP
// end ;
43765: GO 43725
43767: POP
43768: POP
// end ;
43769: LD_VAR 0 1
43773: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43774: LD_INT 0
43776: PPUSH
// uc_side := your_side ;
43777: LD_ADDR_OWVAR 20
43781: PUSH
43782: LD_OWVAR 2
43786: ST_TO_ADDR
// uc_nation := nation ;
43787: LD_ADDR_OWVAR 21
43791: PUSH
43792: LD_VAR 0 1
43796: ST_TO_ADDR
// InitHc ;
43797: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
43801: LD_INT 0
43803: PPUSH
43804: LD_VAR 0 2
43808: PPUSH
43809: LD_VAR 0 3
43813: PPUSH
43814: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
43818: LD_VAR 0 4
43822: PPUSH
43823: LD_VAR 0 5
43827: PPUSH
43828: CALL_OW 428
43832: PUSH
43833: LD_INT 0
43835: EQUAL
43836: IFFALSE 43860
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
43838: CALL_OW 44
43842: PPUSH
43843: LD_VAR 0 4
43847: PPUSH
43848: LD_VAR 0 5
43852: PPUSH
43853: LD_INT 1
43855: PPUSH
43856: CALL_OW 48
// end ;
43860: LD_VAR 0 6
43864: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
43865: LD_INT 0
43867: PPUSH
43868: PPUSH
// uc_side := your_side ;
43869: LD_ADDR_OWVAR 20
43873: PUSH
43874: LD_OWVAR 2
43878: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
43879: LD_VAR 0 1
43883: PUSH
43884: LD_INT 1
43886: PUSH
43887: LD_INT 2
43889: PUSH
43890: LD_INT 3
43892: PUSH
43893: LD_INT 4
43895: PUSH
43896: LD_INT 5
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: IN
43906: IFFALSE 43918
// uc_nation := nation_american else
43908: LD_ADDR_OWVAR 21
43912: PUSH
43913: LD_INT 1
43915: ST_TO_ADDR
43916: GO 43961
// if chassis in [ 11 , 12 , 13 , 14 ] then
43918: LD_VAR 0 1
43922: PUSH
43923: LD_INT 11
43925: PUSH
43926: LD_INT 12
43928: PUSH
43929: LD_INT 13
43931: PUSH
43932: LD_INT 14
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: IN
43941: IFFALSE 43953
// uc_nation := nation_arabian else
43943: LD_ADDR_OWVAR 21
43947: PUSH
43948: LD_INT 2
43950: ST_TO_ADDR
43951: GO 43961
// uc_nation := nation_russian ;
43953: LD_ADDR_OWVAR 21
43957: PUSH
43958: LD_INT 3
43960: ST_TO_ADDR
// vc_chassis := chassis ;
43961: LD_ADDR_OWVAR 37
43965: PUSH
43966: LD_VAR 0 1
43970: ST_TO_ADDR
// vc_engine := engine ;
43971: LD_ADDR_OWVAR 39
43975: PUSH
43976: LD_VAR 0 2
43980: ST_TO_ADDR
// vc_control := control ;
43981: LD_ADDR_OWVAR 38
43985: PUSH
43986: LD_VAR 0 3
43990: ST_TO_ADDR
// vc_weapon := weapon ;
43991: LD_ADDR_OWVAR 40
43995: PUSH
43996: LD_VAR 0 4
44000: ST_TO_ADDR
// un := CreateVehicle ;
44001: LD_ADDR_VAR 0 8
44005: PUSH
44006: CALL_OW 45
44010: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
44011: LD_VAR 0 8
44015: PPUSH
44016: LD_INT 0
44018: PPUSH
44019: LD_INT 5
44021: PPUSH
44022: CALL_OW 12
44026: PPUSH
44027: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
44031: LD_VAR 0 8
44035: PPUSH
44036: LD_VAR 0 5
44040: PPUSH
44041: LD_VAR 0 6
44045: PPUSH
44046: LD_INT 1
44048: PPUSH
44049: CALL_OW 48
// end ;
44053: LD_VAR 0 7
44057: RET
// export hInvincible ; every 1 do
44058: GO 44060
44060: DISABLE
// hInvincible := [ ] ;
44061: LD_ADDR_EXP 147
44065: PUSH
44066: EMPTY
44067: ST_TO_ADDR
44068: END
// every 10 do var i ;
44069: GO 44071
44071: DISABLE
44072: LD_INT 0
44074: PPUSH
// begin enable ;
44075: ENABLE
// if not hInvincible then
44076: LD_EXP 147
44080: NOT
44081: IFFALSE 44085
// exit ;
44083: GO 44129
// for i in hInvincible do
44085: LD_ADDR_VAR 0 1
44089: PUSH
44090: LD_EXP 147
44094: PUSH
44095: FOR_IN
44096: IFFALSE 44127
// if GetLives ( i ) < 1000 then
44098: LD_VAR 0 1
44102: PPUSH
44103: CALL_OW 256
44107: PUSH
44108: LD_INT 1000
44110: LESS
44111: IFFALSE 44125
// SetLives ( i , 1000 ) ;
44113: LD_VAR 0 1
44117: PPUSH
44118: LD_INT 1000
44120: PPUSH
44121: CALL_OW 234
44125: GO 44095
44127: POP
44128: POP
// end ;
44129: PPOPN 1
44131: END
// export function hHackInvincible ; var i ; begin
44132: LD_INT 0
44134: PPUSH
44135: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
44136: LD_ADDR_VAR 0 2
44140: PUSH
44141: LD_INT 2
44143: PUSH
44144: LD_INT 21
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 21
44156: PUSH
44157: LD_INT 2
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: LIST
44168: PPUSH
44169: CALL_OW 69
44173: PUSH
44174: FOR_IN
44175: IFFALSE 44236
// if IsSelected ( i ) then
44177: LD_VAR 0 2
44181: PPUSH
44182: CALL_OW 306
44186: IFFALSE 44234
// begin if i in hInvincible then
44188: LD_VAR 0 2
44192: PUSH
44193: LD_EXP 147
44197: IN
44198: IFFALSE 44218
// hInvincible := hInvincible diff i else
44200: LD_ADDR_EXP 147
44204: PUSH
44205: LD_EXP 147
44209: PUSH
44210: LD_VAR 0 2
44214: DIFF
44215: ST_TO_ADDR
44216: GO 44234
// hInvincible := hInvincible union i ;
44218: LD_ADDR_EXP 147
44222: PUSH
44223: LD_EXP 147
44227: PUSH
44228: LD_VAR 0 2
44232: UNION
44233: ST_TO_ADDR
// end ;
44234: GO 44174
44236: POP
44237: POP
// end ;
44238: LD_VAR 0 1
44242: RET
// export function hHackInvisible ; var i , j ; begin
44243: LD_INT 0
44245: PPUSH
44246: PPUSH
44247: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
44248: LD_ADDR_VAR 0 2
44252: PUSH
44253: LD_INT 21
44255: PUSH
44256: LD_INT 1
44258: PUSH
44259: EMPTY
44260: LIST
44261: LIST
44262: PPUSH
44263: CALL_OW 69
44267: PUSH
44268: FOR_IN
44269: IFFALSE 44293
// if IsSelected ( i ) then
44271: LD_VAR 0 2
44275: PPUSH
44276: CALL_OW 306
44280: IFFALSE 44291
// ComForceInvisible ( i ) ;
44282: LD_VAR 0 2
44286: PPUSH
44287: CALL_OW 496
44291: GO 44268
44293: POP
44294: POP
// end ;
44295: LD_VAR 0 1
44299: RET
// export function hHackChangeYourSide ; begin
44300: LD_INT 0
44302: PPUSH
// if your_side = 8 then
44303: LD_OWVAR 2
44307: PUSH
44308: LD_INT 8
44310: EQUAL
44311: IFFALSE 44323
// your_side := 0 else
44313: LD_ADDR_OWVAR 2
44317: PUSH
44318: LD_INT 0
44320: ST_TO_ADDR
44321: GO 44337
// your_side := your_side + 1 ;
44323: LD_ADDR_OWVAR 2
44327: PUSH
44328: LD_OWVAR 2
44332: PUSH
44333: LD_INT 1
44335: PLUS
44336: ST_TO_ADDR
// end ;
44337: LD_VAR 0 1
44341: RET
// export function hHackChangeUnitSide ; var i , j ; begin
44342: LD_INT 0
44344: PPUSH
44345: PPUSH
44346: PPUSH
// for i in all_units do
44347: LD_ADDR_VAR 0 2
44351: PUSH
44352: LD_OWVAR 3
44356: PUSH
44357: FOR_IN
44358: IFFALSE 44436
// if IsSelected ( i ) then
44360: LD_VAR 0 2
44364: PPUSH
44365: CALL_OW 306
44369: IFFALSE 44434
// begin j := GetSide ( i ) ;
44371: LD_ADDR_VAR 0 3
44375: PUSH
44376: LD_VAR 0 2
44380: PPUSH
44381: CALL_OW 255
44385: ST_TO_ADDR
// if j = 8 then
44386: LD_VAR 0 3
44390: PUSH
44391: LD_INT 8
44393: EQUAL
44394: IFFALSE 44406
// j := 0 else
44396: LD_ADDR_VAR 0 3
44400: PUSH
44401: LD_INT 0
44403: ST_TO_ADDR
44404: GO 44420
// j := j + 1 ;
44406: LD_ADDR_VAR 0 3
44410: PUSH
44411: LD_VAR 0 3
44415: PUSH
44416: LD_INT 1
44418: PLUS
44419: ST_TO_ADDR
// SetSide ( i , j ) ;
44420: LD_VAR 0 2
44424: PPUSH
44425: LD_VAR 0 3
44429: PPUSH
44430: CALL_OW 235
// end ;
44434: GO 44357
44436: POP
44437: POP
// end ;
44438: LD_VAR 0 1
44442: RET
// export function hHackFog ; begin
44443: LD_INT 0
44445: PPUSH
// FogOff ( true ) ;
44446: LD_INT 1
44448: PPUSH
44449: CALL_OW 344
// end ;
44453: LD_VAR 0 1
44457: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44458: LD_INT 0
44460: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44461: LD_VAR 0 1
44465: PPUSH
44466: LD_VAR 0 2
44470: PPUSH
44471: LD_VAR 0 3
44475: PPUSH
44476: LD_INT 1
44478: PPUSH
44479: LD_INT 1
44481: PPUSH
44482: CALL_OW 483
// CenterOnXY ( x , y ) ;
44486: LD_VAR 0 2
44490: PPUSH
44491: LD_VAR 0 3
44495: PPUSH
44496: CALL_OW 84
// end ; end_of_file
44500: LD_VAR 0 4
44504: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
44505: LD_INT 0
44507: PPUSH
44508: PPUSH
44509: PPUSH
44510: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
44511: LD_VAR 0 1
44515: PPUSH
44516: CALL_OW 264
44520: PUSH
44521: LD_EXP 74
44525: EQUAL
44526: IFFALSE 44598
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
44528: LD_INT 68
44530: PPUSH
44531: LD_VAR 0 1
44535: PPUSH
44536: CALL_OW 255
44540: PPUSH
44541: CALL_OW 321
44545: PUSH
44546: LD_INT 2
44548: EQUAL
44549: IFFALSE 44561
// eff := 70 else
44551: LD_ADDR_VAR 0 4
44555: PUSH
44556: LD_INT 70
44558: ST_TO_ADDR
44559: GO 44569
// eff := 30 ;
44561: LD_ADDR_VAR 0 4
44565: PUSH
44566: LD_INT 30
44568: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
44569: LD_VAR 0 1
44573: PPUSH
44574: CALL_OW 250
44578: PPUSH
44579: LD_VAR 0 1
44583: PPUSH
44584: CALL_OW 251
44588: PPUSH
44589: LD_VAR 0 4
44593: PPUSH
44594: CALL_OW 495
// end ; end ;
44598: LD_VAR 0 2
44602: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
44603: LD_INT 0
44605: PPUSH
// end ;
44606: LD_VAR 0 4
44610: RET
// export function SOS_Command ( cmd ) ; begin
44611: LD_INT 0
44613: PPUSH
// end ;
44614: LD_VAR 0 2
44618: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
44619: LD_INT 0
44621: PPUSH
// end ;
44622: LD_VAR 0 6
44626: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
44627: LD_INT 0
44629: PPUSH
44630: PPUSH
// if not vehicle or not factory then
44631: LD_VAR 0 1
44635: NOT
44636: PUSH
44637: LD_VAR 0 2
44641: NOT
44642: OR
44643: IFFALSE 44647
// exit ;
44645: GO 44878
// if factoryWaypoints >= factory then
44647: LD_EXP 148
44651: PUSH
44652: LD_VAR 0 2
44656: GREATEREQUAL
44657: IFFALSE 44878
// if factoryWaypoints [ factory ] then
44659: LD_EXP 148
44663: PUSH
44664: LD_VAR 0 2
44668: ARRAY
44669: IFFALSE 44878
// begin if GetControl ( vehicle ) = control_manual then
44671: LD_VAR 0 1
44675: PPUSH
44676: CALL_OW 263
44680: PUSH
44681: LD_INT 1
44683: EQUAL
44684: IFFALSE 44765
// begin driver := IsDrivenBy ( vehicle ) ;
44686: LD_ADDR_VAR 0 4
44690: PUSH
44691: LD_VAR 0 1
44695: PPUSH
44696: CALL_OW 311
44700: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44701: LD_VAR 0 4
44705: PPUSH
44706: LD_EXP 148
44710: PUSH
44711: LD_VAR 0 2
44715: ARRAY
44716: PUSH
44717: LD_INT 3
44719: ARRAY
44720: PPUSH
44721: LD_EXP 148
44725: PUSH
44726: LD_VAR 0 2
44730: ARRAY
44731: PUSH
44732: LD_INT 4
44734: ARRAY
44735: PPUSH
44736: CALL_OW 171
// AddComExitVehicle ( driver ) ;
44740: LD_VAR 0 4
44744: PPUSH
44745: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
44749: LD_VAR 0 4
44753: PPUSH
44754: LD_VAR 0 2
44758: PPUSH
44759: CALL_OW 180
// end else
44763: GO 44878
// if GetControl ( vehicle ) = control_remote then
44765: LD_VAR 0 1
44769: PPUSH
44770: CALL_OW 263
44774: PUSH
44775: LD_INT 2
44777: EQUAL
44778: IFFALSE 44839
// begin wait ( 0 0$2 ) ;
44780: LD_INT 70
44782: PPUSH
44783: CALL_OW 67
// if Connect ( vehicle ) then
44787: LD_VAR 0 1
44791: PPUSH
44792: CALL 57255 0 1
44796: IFFALSE 44837
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44798: LD_VAR 0 1
44802: PPUSH
44803: LD_EXP 148
44807: PUSH
44808: LD_VAR 0 2
44812: ARRAY
44813: PUSH
44814: LD_INT 3
44816: ARRAY
44817: PPUSH
44818: LD_EXP 148
44822: PUSH
44823: LD_VAR 0 2
44827: ARRAY
44828: PUSH
44829: LD_INT 4
44831: ARRAY
44832: PPUSH
44833: CALL_OW 171
// end else
44837: GO 44878
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
44839: LD_VAR 0 1
44843: PPUSH
44844: LD_EXP 148
44848: PUSH
44849: LD_VAR 0 2
44853: ARRAY
44854: PUSH
44855: LD_INT 3
44857: ARRAY
44858: PPUSH
44859: LD_EXP 148
44863: PUSH
44864: LD_VAR 0 2
44868: ARRAY
44869: PUSH
44870: LD_INT 4
44872: ARRAY
44873: PPUSH
44874: CALL_OW 171
// end ; end ;
44878: LD_VAR 0 3
44882: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
44883: LD_INT 0
44885: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
44886: LD_VAR 0 1
44890: PUSH
44891: LD_INT 250
44893: EQUAL
44894: PUSH
44895: LD_VAR 0 2
44899: PPUSH
44900: CALL_OW 264
44904: PUSH
44905: LD_EXP 77
44909: EQUAL
44910: AND
44911: IFFALSE 44932
// MinerPlaceMine ( unit , x , y ) ;
44913: LD_VAR 0 2
44917: PPUSH
44918: LD_VAR 0 4
44922: PPUSH
44923: LD_VAR 0 5
44927: PPUSH
44928: CALL 47660 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
44932: LD_VAR 0 1
44936: PUSH
44937: LD_INT 251
44939: EQUAL
44940: PUSH
44941: LD_VAR 0 2
44945: PPUSH
44946: CALL_OW 264
44950: PUSH
44951: LD_EXP 77
44955: EQUAL
44956: AND
44957: IFFALSE 44978
// MinerDetonateMine ( unit , x , y ) ;
44959: LD_VAR 0 2
44963: PPUSH
44964: LD_VAR 0 4
44968: PPUSH
44969: LD_VAR 0 5
44973: PPUSH
44974: CALL 47937 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
44978: LD_VAR 0 1
44982: PUSH
44983: LD_INT 252
44985: EQUAL
44986: PUSH
44987: LD_VAR 0 2
44991: PPUSH
44992: CALL_OW 264
44996: PUSH
44997: LD_EXP 77
45001: EQUAL
45002: AND
45003: IFFALSE 45024
// MinerCreateMinefield ( unit , x , y ) ;
45005: LD_VAR 0 2
45009: PPUSH
45010: LD_VAR 0 4
45014: PPUSH
45015: LD_VAR 0 5
45019: PPUSH
45020: CALL 48354 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
45024: LD_VAR 0 1
45028: PUSH
45029: LD_INT 253
45031: EQUAL
45032: PUSH
45033: LD_VAR 0 2
45037: PPUSH
45038: CALL_OW 257
45042: PUSH
45043: LD_INT 5
45045: EQUAL
45046: AND
45047: IFFALSE 45068
// ComBinocular ( unit , x , y ) ;
45049: LD_VAR 0 2
45053: PPUSH
45054: LD_VAR 0 4
45058: PPUSH
45059: LD_VAR 0 5
45063: PPUSH
45064: CALL 48725 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
45068: LD_VAR 0 1
45072: PUSH
45073: LD_INT 254
45075: EQUAL
45076: PUSH
45077: LD_VAR 0 2
45081: PPUSH
45082: CALL_OW 264
45086: PUSH
45087: LD_EXP 72
45091: EQUAL
45092: AND
45093: PUSH
45094: LD_VAR 0 3
45098: PPUSH
45099: CALL_OW 263
45103: PUSH
45104: LD_INT 3
45106: EQUAL
45107: AND
45108: IFFALSE 45124
// HackDestroyVehicle ( unit , selectedUnit ) ;
45110: LD_VAR 0 2
45114: PPUSH
45115: LD_VAR 0 3
45119: PPUSH
45120: CALL 47020 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
45124: LD_VAR 0 1
45128: PUSH
45129: LD_INT 255
45131: EQUAL
45132: PUSH
45133: LD_VAR 0 2
45137: PPUSH
45138: CALL_OW 264
45142: PUSH
45143: LD_INT 14
45145: PUSH
45146: LD_INT 53
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: IN
45153: AND
45154: PUSH
45155: LD_VAR 0 4
45159: PPUSH
45160: LD_VAR 0 5
45164: PPUSH
45165: CALL_OW 488
45169: AND
45170: IFFALSE 45194
// CutTreeXYR ( unit , x , y , 12 ) ;
45172: LD_VAR 0 2
45176: PPUSH
45177: LD_VAR 0 4
45181: PPUSH
45182: LD_VAR 0 5
45186: PPUSH
45187: LD_INT 12
45189: PPUSH
45190: CALL 45586 0 4
// if cmd = 256 then
45194: LD_VAR 0 1
45198: PUSH
45199: LD_INT 256
45201: EQUAL
45202: IFFALSE 45223
// SetFactoryWaypoint ( unit , x , y ) ;
45204: LD_VAR 0 2
45208: PPUSH
45209: LD_VAR 0 4
45213: PPUSH
45214: LD_VAR 0 5
45218: PPUSH
45219: CALL 45228 0 3
// end ;
45223: LD_VAR 0 6
45227: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
45228: LD_INT 0
45230: PPUSH
45231: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
45232: LD_VAR 0 1
45236: NOT
45237: PUSH
45238: LD_VAR 0 2
45242: PPUSH
45243: LD_VAR 0 3
45247: PPUSH
45248: CALL_OW 488
45252: NOT
45253: OR
45254: PUSH
45255: LD_VAR 0 1
45259: PPUSH
45260: CALL_OW 266
45264: PUSH
45265: LD_INT 3
45267: NONEQUAL
45268: PUSH
45269: LD_VAR 0 1
45273: PPUSH
45274: CALL_OW 247
45278: PUSH
45279: LD_INT 1
45281: EQUAL
45282: NOT
45283: AND
45284: OR
45285: IFFALSE 45289
// exit ;
45287: GO 45438
// if GetType ( factory ) = unit_human then
45289: LD_VAR 0 1
45293: PPUSH
45294: CALL_OW 247
45298: PUSH
45299: LD_INT 1
45301: EQUAL
45302: IFFALSE 45319
// factory := IsInUnit ( factory ) ;
45304: LD_ADDR_VAR 0 1
45308: PUSH
45309: LD_VAR 0 1
45313: PPUSH
45314: CALL_OW 310
45318: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
45319: LD_VAR 0 1
45323: PPUSH
45324: CALL_OW 266
45328: PUSH
45329: LD_INT 3
45331: NONEQUAL
45332: IFFALSE 45336
// exit ;
45334: GO 45438
// if HexInfo ( x , y ) = factory then
45336: LD_VAR 0 2
45340: PPUSH
45341: LD_VAR 0 3
45345: PPUSH
45346: CALL_OW 428
45350: PUSH
45351: LD_VAR 0 1
45355: EQUAL
45356: IFFALSE 45383
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
45358: LD_ADDR_EXP 148
45362: PUSH
45363: LD_EXP 148
45367: PPUSH
45368: LD_VAR 0 1
45372: PPUSH
45373: LD_INT 0
45375: PPUSH
45376: CALL_OW 1
45380: ST_TO_ADDR
45381: GO 45434
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
45383: LD_ADDR_EXP 148
45387: PUSH
45388: LD_EXP 148
45392: PPUSH
45393: LD_VAR 0 1
45397: PPUSH
45398: LD_VAR 0 1
45402: PPUSH
45403: CALL_OW 255
45407: PUSH
45408: LD_VAR 0 1
45412: PUSH
45413: LD_VAR 0 2
45417: PUSH
45418: LD_VAR 0 3
45422: PUSH
45423: EMPTY
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: PPUSH
45429: CALL_OW 1
45433: ST_TO_ADDR
// UpdateFactoryWaypoints ;
45434: CALL 45443 0 0
// end ;
45438: LD_VAR 0 4
45442: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
45443: LD_INT 0
45445: PPUSH
45446: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
45447: LD_STRING resetFactoryWaypoint();
45449: PPUSH
45450: CALL_OW 559
// if factoryWaypoints then
45454: LD_EXP 148
45458: IFFALSE 45581
// begin for i := 1 to factoryWaypoints do
45460: LD_ADDR_VAR 0 2
45464: PUSH
45465: DOUBLE
45466: LD_INT 1
45468: DEC
45469: ST_TO_ADDR
45470: LD_EXP 148
45474: PUSH
45475: FOR_TO
45476: IFFALSE 45579
// if factoryWaypoints [ i ] then
45478: LD_EXP 148
45482: PUSH
45483: LD_VAR 0 2
45487: ARRAY
45488: IFFALSE 45577
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
45490: LD_STRING setFactoryWaypointXY(
45492: PUSH
45493: LD_EXP 148
45497: PUSH
45498: LD_VAR 0 2
45502: ARRAY
45503: PUSH
45504: LD_INT 1
45506: ARRAY
45507: STR
45508: PUSH
45509: LD_STRING ,
45511: STR
45512: PUSH
45513: LD_EXP 148
45517: PUSH
45518: LD_VAR 0 2
45522: ARRAY
45523: PUSH
45524: LD_INT 2
45526: ARRAY
45527: STR
45528: PUSH
45529: LD_STRING ,
45531: STR
45532: PUSH
45533: LD_EXP 148
45537: PUSH
45538: LD_VAR 0 2
45542: ARRAY
45543: PUSH
45544: LD_INT 3
45546: ARRAY
45547: STR
45548: PUSH
45549: LD_STRING ,
45551: STR
45552: PUSH
45553: LD_EXP 148
45557: PUSH
45558: LD_VAR 0 2
45562: ARRAY
45563: PUSH
45564: LD_INT 4
45566: ARRAY
45567: STR
45568: PUSH
45569: LD_STRING )
45571: STR
45572: PPUSH
45573: CALL_OW 559
45577: GO 45475
45579: POP
45580: POP
// end ; end ;
45581: LD_VAR 0 1
45585: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
45586: LD_INT 0
45588: PPUSH
45589: PPUSH
45590: PPUSH
45591: PPUSH
45592: PPUSH
45593: PPUSH
45594: PPUSH
45595: PPUSH
45596: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
45597: LD_VAR 0 1
45601: NOT
45602: PUSH
45603: LD_VAR 0 2
45607: PPUSH
45608: LD_VAR 0 3
45612: PPUSH
45613: CALL_OW 488
45617: NOT
45618: OR
45619: PUSH
45620: LD_VAR 0 4
45624: NOT
45625: OR
45626: IFFALSE 45630
// exit ;
45628: GO 45970
// list := [ ] ;
45630: LD_ADDR_VAR 0 13
45634: PUSH
45635: EMPTY
45636: ST_TO_ADDR
// if x - r < 0 then
45637: LD_VAR 0 2
45641: PUSH
45642: LD_VAR 0 4
45646: MINUS
45647: PUSH
45648: LD_INT 0
45650: LESS
45651: IFFALSE 45663
// min_x := 0 else
45653: LD_ADDR_VAR 0 7
45657: PUSH
45658: LD_INT 0
45660: ST_TO_ADDR
45661: GO 45679
// min_x := x - r ;
45663: LD_ADDR_VAR 0 7
45667: PUSH
45668: LD_VAR 0 2
45672: PUSH
45673: LD_VAR 0 4
45677: MINUS
45678: ST_TO_ADDR
// if y - r < 0 then
45679: LD_VAR 0 3
45683: PUSH
45684: LD_VAR 0 4
45688: MINUS
45689: PUSH
45690: LD_INT 0
45692: LESS
45693: IFFALSE 45705
// min_y := 0 else
45695: LD_ADDR_VAR 0 8
45699: PUSH
45700: LD_INT 0
45702: ST_TO_ADDR
45703: GO 45721
// min_y := y - r ;
45705: LD_ADDR_VAR 0 8
45709: PUSH
45710: LD_VAR 0 3
45714: PUSH
45715: LD_VAR 0 4
45719: MINUS
45720: ST_TO_ADDR
// max_x := x + r ;
45721: LD_ADDR_VAR 0 9
45725: PUSH
45726: LD_VAR 0 2
45730: PUSH
45731: LD_VAR 0 4
45735: PLUS
45736: ST_TO_ADDR
// max_y := y + r ;
45737: LD_ADDR_VAR 0 10
45741: PUSH
45742: LD_VAR 0 3
45746: PUSH
45747: LD_VAR 0 4
45751: PLUS
45752: ST_TO_ADDR
// for _x = min_x to max_x do
45753: LD_ADDR_VAR 0 11
45757: PUSH
45758: DOUBLE
45759: LD_VAR 0 7
45763: DEC
45764: ST_TO_ADDR
45765: LD_VAR 0 9
45769: PUSH
45770: FOR_TO
45771: IFFALSE 45888
// for _y = min_y to max_y do
45773: LD_ADDR_VAR 0 12
45777: PUSH
45778: DOUBLE
45779: LD_VAR 0 8
45783: DEC
45784: ST_TO_ADDR
45785: LD_VAR 0 10
45789: PUSH
45790: FOR_TO
45791: IFFALSE 45884
// begin if not ValidHex ( _x , _y ) then
45793: LD_VAR 0 11
45797: PPUSH
45798: LD_VAR 0 12
45802: PPUSH
45803: CALL_OW 488
45807: NOT
45808: IFFALSE 45812
// continue ;
45810: GO 45790
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
45812: LD_VAR 0 11
45816: PPUSH
45817: LD_VAR 0 12
45821: PPUSH
45822: CALL_OW 351
45826: PUSH
45827: LD_VAR 0 11
45831: PPUSH
45832: LD_VAR 0 12
45836: PPUSH
45837: CALL_OW 554
45841: AND
45842: IFFALSE 45882
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
45844: LD_ADDR_VAR 0 13
45848: PUSH
45849: LD_VAR 0 13
45853: PPUSH
45854: LD_VAR 0 13
45858: PUSH
45859: LD_INT 1
45861: PLUS
45862: PPUSH
45863: LD_VAR 0 11
45867: PUSH
45868: LD_VAR 0 12
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PPUSH
45877: CALL_OW 2
45881: ST_TO_ADDR
// end ;
45882: GO 45790
45884: POP
45885: POP
45886: GO 45770
45888: POP
45889: POP
// if not list then
45890: LD_VAR 0 13
45894: NOT
45895: IFFALSE 45899
// exit ;
45897: GO 45970
// for i in list do
45899: LD_ADDR_VAR 0 6
45903: PUSH
45904: LD_VAR 0 13
45908: PUSH
45909: FOR_IN
45910: IFFALSE 45968
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
45912: LD_VAR 0 1
45916: PPUSH
45917: LD_STRING M
45919: PUSH
45920: LD_VAR 0 6
45924: PUSH
45925: LD_INT 1
45927: ARRAY
45928: PUSH
45929: LD_VAR 0 6
45933: PUSH
45934: LD_INT 2
45936: ARRAY
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 0
45946: PUSH
45947: LD_INT 0
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: PUSH
45959: EMPTY
45960: LIST
45961: PPUSH
45962: CALL_OW 447
45966: GO 45909
45968: POP
45969: POP
// end ;
45970: LD_VAR 0 5
45974: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
45975: LD_EXP 149
45979: NOT
45980: IFFALSE 46030
45982: GO 45984
45984: DISABLE
// begin initHack := true ;
45985: LD_ADDR_EXP 149
45989: PUSH
45990: LD_INT 1
45992: ST_TO_ADDR
// hackTanks := [ ] ;
45993: LD_ADDR_EXP 150
45997: PUSH
45998: EMPTY
45999: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
46000: LD_ADDR_EXP 151
46004: PUSH
46005: EMPTY
46006: ST_TO_ADDR
// hackLimit := 3 ;
46007: LD_ADDR_EXP 152
46011: PUSH
46012: LD_INT 3
46014: ST_TO_ADDR
// hackDist := 12 ;
46015: LD_ADDR_EXP 153
46019: PUSH
46020: LD_INT 12
46022: ST_TO_ADDR
// hackCounter := [ ] ;
46023: LD_ADDR_EXP 154
46027: PUSH
46028: EMPTY
46029: ST_TO_ADDR
// end ;
46030: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
46031: LD_EXP 149
46035: PUSH
46036: LD_INT 34
46038: PUSH
46039: LD_EXP 72
46043: PUSH
46044: EMPTY
46045: LIST
46046: LIST
46047: PPUSH
46048: CALL_OW 69
46052: AND
46053: IFFALSE 46308
46055: GO 46057
46057: DISABLE
46058: LD_INT 0
46060: PPUSH
46061: PPUSH
// begin enable ;
46062: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
46063: LD_ADDR_VAR 0 1
46067: PUSH
46068: LD_INT 34
46070: PUSH
46071: LD_EXP 72
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PPUSH
46080: CALL_OW 69
46084: PUSH
46085: FOR_IN
46086: IFFALSE 46306
// begin if not i in hackTanks then
46088: LD_VAR 0 1
46092: PUSH
46093: LD_EXP 150
46097: IN
46098: NOT
46099: IFFALSE 46182
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
46101: LD_ADDR_EXP 150
46105: PUSH
46106: LD_EXP 150
46110: PPUSH
46111: LD_EXP 150
46115: PUSH
46116: LD_INT 1
46118: PLUS
46119: PPUSH
46120: LD_VAR 0 1
46124: PPUSH
46125: CALL_OW 1
46129: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
46130: LD_ADDR_EXP 151
46134: PUSH
46135: LD_EXP 151
46139: PPUSH
46140: LD_EXP 151
46144: PUSH
46145: LD_INT 1
46147: PLUS
46148: PPUSH
46149: EMPTY
46150: PPUSH
46151: CALL_OW 1
46155: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
46156: LD_ADDR_EXP 154
46160: PUSH
46161: LD_EXP 154
46165: PPUSH
46166: LD_EXP 154
46170: PUSH
46171: LD_INT 1
46173: PLUS
46174: PPUSH
46175: EMPTY
46176: PPUSH
46177: CALL_OW 1
46181: ST_TO_ADDR
// end ; if not IsOk ( i ) then
46182: LD_VAR 0 1
46186: PPUSH
46187: CALL_OW 302
46191: NOT
46192: IFFALSE 46205
// begin HackUnlinkAll ( i ) ;
46194: LD_VAR 0 1
46198: PPUSH
46199: CALL 46311 0 1
// continue ;
46203: GO 46085
// end ; HackCheckCapturedStatus ( i ) ;
46205: LD_VAR 0 1
46209: PPUSH
46210: CALL 46754 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
46214: LD_ADDR_VAR 0 2
46218: PUSH
46219: LD_INT 81
46221: PUSH
46222: LD_VAR 0 1
46226: PPUSH
46227: CALL_OW 255
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 33
46238: PUSH
46239: LD_INT 3
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 91
46248: PUSH
46249: LD_VAR 0 1
46253: PUSH
46254: LD_EXP 153
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 50
46266: PUSH
46267: EMPTY
46268: LIST
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: LIST
46274: LIST
46275: PPUSH
46276: CALL_OW 69
46280: ST_TO_ADDR
// if not tmp then
46281: LD_VAR 0 2
46285: NOT
46286: IFFALSE 46290
// continue ;
46288: GO 46085
// HackLink ( i , tmp ) ;
46290: LD_VAR 0 1
46294: PPUSH
46295: LD_VAR 0 2
46299: PPUSH
46300: CALL 46447 0 2
// end ;
46304: GO 46085
46306: POP
46307: POP
// end ;
46308: PPOPN 2
46310: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
46311: LD_INT 0
46313: PPUSH
46314: PPUSH
46315: PPUSH
// if not hack in hackTanks then
46316: LD_VAR 0 1
46320: PUSH
46321: LD_EXP 150
46325: IN
46326: NOT
46327: IFFALSE 46331
// exit ;
46329: GO 46442
// index := GetElementIndex ( hackTanks , hack ) ;
46331: LD_ADDR_VAR 0 4
46335: PUSH
46336: LD_EXP 150
46340: PPUSH
46341: LD_VAR 0 1
46345: PPUSH
46346: CALL 54069 0 2
46350: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
46351: LD_EXP 151
46355: PUSH
46356: LD_VAR 0 4
46360: ARRAY
46361: IFFALSE 46442
// begin for i in hackTanksCaptured [ index ] do
46363: LD_ADDR_VAR 0 3
46367: PUSH
46368: LD_EXP 151
46372: PUSH
46373: LD_VAR 0 4
46377: ARRAY
46378: PUSH
46379: FOR_IN
46380: IFFALSE 46406
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
46382: LD_VAR 0 3
46386: PUSH
46387: LD_INT 1
46389: ARRAY
46390: PPUSH
46391: LD_VAR 0 3
46395: PUSH
46396: LD_INT 2
46398: ARRAY
46399: PPUSH
46400: CALL_OW 235
46404: GO 46379
46406: POP
46407: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
46408: LD_ADDR_EXP 151
46412: PUSH
46413: LD_EXP 151
46417: PPUSH
46418: LD_VAR 0 4
46422: PPUSH
46423: EMPTY
46424: PPUSH
46425: CALL_OW 1
46429: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
46430: LD_VAR 0 1
46434: PPUSH
46435: LD_INT 0
46437: PPUSH
46438: CALL_OW 505
// end ; end ;
46442: LD_VAR 0 2
46446: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
46447: LD_INT 0
46449: PPUSH
46450: PPUSH
46451: PPUSH
// if not hack in hackTanks or not vehicles then
46452: LD_VAR 0 1
46456: PUSH
46457: LD_EXP 150
46461: IN
46462: NOT
46463: PUSH
46464: LD_VAR 0 2
46468: NOT
46469: OR
46470: IFFALSE 46474
// exit ;
46472: GO 46749
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
46474: LD_ADDR_VAR 0 2
46478: PUSH
46479: LD_VAR 0 1
46483: PPUSH
46484: LD_VAR 0 2
46488: PPUSH
46489: LD_INT 1
46491: PPUSH
46492: LD_INT 1
46494: PPUSH
46495: CALL 54719 0 4
46499: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
46500: LD_ADDR_VAR 0 5
46504: PUSH
46505: LD_EXP 150
46509: PPUSH
46510: LD_VAR 0 1
46514: PPUSH
46515: CALL 54069 0 2
46519: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
46520: LD_EXP 151
46524: PUSH
46525: LD_VAR 0 5
46529: ARRAY
46530: PUSH
46531: LD_EXP 152
46535: LESS
46536: IFFALSE 46725
// begin for i := 1 to vehicles do
46538: LD_ADDR_VAR 0 4
46542: PUSH
46543: DOUBLE
46544: LD_INT 1
46546: DEC
46547: ST_TO_ADDR
46548: LD_VAR 0 2
46552: PUSH
46553: FOR_TO
46554: IFFALSE 46723
// begin if hackTanksCaptured [ index ] = hackLimit then
46556: LD_EXP 151
46560: PUSH
46561: LD_VAR 0 5
46565: ARRAY
46566: PUSH
46567: LD_EXP 152
46571: EQUAL
46572: IFFALSE 46576
// break ;
46574: GO 46723
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
46576: LD_ADDR_EXP 154
46580: PUSH
46581: LD_EXP 154
46585: PPUSH
46586: LD_VAR 0 5
46590: PPUSH
46591: LD_EXP 154
46595: PUSH
46596: LD_VAR 0 5
46600: ARRAY
46601: PUSH
46602: LD_INT 1
46604: PLUS
46605: PPUSH
46606: CALL_OW 1
46610: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
46611: LD_ADDR_EXP 151
46615: PUSH
46616: LD_EXP 151
46620: PPUSH
46621: LD_VAR 0 5
46625: PUSH
46626: LD_EXP 151
46630: PUSH
46631: LD_VAR 0 5
46635: ARRAY
46636: PUSH
46637: LD_INT 1
46639: PLUS
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PPUSH
46645: LD_VAR 0 2
46649: PUSH
46650: LD_VAR 0 4
46654: ARRAY
46655: PUSH
46656: LD_VAR 0 2
46660: PUSH
46661: LD_VAR 0 4
46665: ARRAY
46666: PPUSH
46667: CALL_OW 255
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PPUSH
46676: CALL 54284 0 3
46680: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
46681: LD_VAR 0 2
46685: PUSH
46686: LD_VAR 0 4
46690: ARRAY
46691: PPUSH
46692: LD_VAR 0 1
46696: PPUSH
46697: CALL_OW 255
46701: PPUSH
46702: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
46706: LD_VAR 0 2
46710: PUSH
46711: LD_VAR 0 4
46715: ARRAY
46716: PPUSH
46717: CALL_OW 141
// end ;
46721: GO 46553
46723: POP
46724: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46725: LD_VAR 0 1
46729: PPUSH
46730: LD_EXP 151
46734: PUSH
46735: LD_VAR 0 5
46739: ARRAY
46740: PUSH
46741: LD_INT 0
46743: PLUS
46744: PPUSH
46745: CALL_OW 505
// end ;
46749: LD_VAR 0 3
46753: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
46754: LD_INT 0
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
// if not hack in hackTanks then
46760: LD_VAR 0 1
46764: PUSH
46765: LD_EXP 150
46769: IN
46770: NOT
46771: IFFALSE 46775
// exit ;
46773: GO 47015
// index := GetElementIndex ( hackTanks , hack ) ;
46775: LD_ADDR_VAR 0 4
46779: PUSH
46780: LD_EXP 150
46784: PPUSH
46785: LD_VAR 0 1
46789: PPUSH
46790: CALL 54069 0 2
46794: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
46795: LD_ADDR_VAR 0 3
46799: PUSH
46800: DOUBLE
46801: LD_EXP 151
46805: PUSH
46806: LD_VAR 0 4
46810: ARRAY
46811: INC
46812: ST_TO_ADDR
46813: LD_INT 1
46815: PUSH
46816: FOR_DOWNTO
46817: IFFALSE 46989
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
46819: LD_ADDR_VAR 0 5
46823: PUSH
46824: LD_EXP 151
46828: PUSH
46829: LD_VAR 0 4
46833: ARRAY
46834: PUSH
46835: LD_VAR 0 3
46839: ARRAY
46840: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
46841: LD_VAR 0 5
46845: PUSH
46846: LD_INT 1
46848: ARRAY
46849: PPUSH
46850: CALL_OW 302
46854: NOT
46855: PUSH
46856: LD_VAR 0 5
46860: PUSH
46861: LD_INT 1
46863: ARRAY
46864: PPUSH
46865: CALL_OW 255
46869: PUSH
46870: LD_VAR 0 1
46874: PPUSH
46875: CALL_OW 255
46879: NONEQUAL
46880: OR
46881: IFFALSE 46987
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
46883: LD_VAR 0 5
46887: PUSH
46888: LD_INT 1
46890: ARRAY
46891: PPUSH
46892: CALL_OW 305
46896: PUSH
46897: LD_VAR 0 5
46901: PUSH
46902: LD_INT 1
46904: ARRAY
46905: PPUSH
46906: CALL_OW 255
46910: PUSH
46911: LD_VAR 0 1
46915: PPUSH
46916: CALL_OW 255
46920: EQUAL
46921: AND
46922: IFFALSE 46946
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
46924: LD_VAR 0 5
46928: PUSH
46929: LD_INT 1
46931: ARRAY
46932: PPUSH
46933: LD_VAR 0 5
46937: PUSH
46938: LD_INT 2
46940: ARRAY
46941: PPUSH
46942: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
46946: LD_ADDR_EXP 151
46950: PUSH
46951: LD_EXP 151
46955: PPUSH
46956: LD_VAR 0 4
46960: PPUSH
46961: LD_EXP 151
46965: PUSH
46966: LD_VAR 0 4
46970: ARRAY
46971: PPUSH
46972: LD_VAR 0 3
46976: PPUSH
46977: CALL_OW 3
46981: PPUSH
46982: CALL_OW 1
46986: ST_TO_ADDR
// end ; end ;
46987: GO 46816
46989: POP
46990: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
46991: LD_VAR 0 1
46995: PPUSH
46996: LD_EXP 151
47000: PUSH
47001: LD_VAR 0 4
47005: ARRAY
47006: PUSH
47007: LD_INT 0
47009: PLUS
47010: PPUSH
47011: CALL_OW 505
// end ;
47015: LD_VAR 0 2
47019: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
47020: LD_INT 0
47022: PPUSH
47023: PPUSH
47024: PPUSH
47025: PPUSH
// if not hack in hackTanks then
47026: LD_VAR 0 1
47030: PUSH
47031: LD_EXP 150
47035: IN
47036: NOT
47037: IFFALSE 47041
// exit ;
47039: GO 47126
// index := GetElementIndex ( hackTanks , hack ) ;
47041: LD_ADDR_VAR 0 5
47045: PUSH
47046: LD_EXP 150
47050: PPUSH
47051: LD_VAR 0 1
47055: PPUSH
47056: CALL 54069 0 2
47060: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
47061: LD_ADDR_VAR 0 4
47065: PUSH
47066: DOUBLE
47067: LD_INT 1
47069: DEC
47070: ST_TO_ADDR
47071: LD_EXP 151
47075: PUSH
47076: LD_VAR 0 5
47080: ARRAY
47081: PUSH
47082: FOR_TO
47083: IFFALSE 47124
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
47085: LD_EXP 151
47089: PUSH
47090: LD_VAR 0 5
47094: ARRAY
47095: PUSH
47096: LD_VAR 0 4
47100: ARRAY
47101: PUSH
47102: LD_INT 1
47104: ARRAY
47105: PUSH
47106: LD_VAR 0 2
47110: EQUAL
47111: IFFALSE 47122
// KillUnit ( vehicle ) ;
47113: LD_VAR 0 2
47117: PPUSH
47118: CALL_OW 66
47122: GO 47082
47124: POP
47125: POP
// end ;
47126: LD_VAR 0 3
47130: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
47131: LD_EXP 155
47135: NOT
47136: IFFALSE 47171
47138: GO 47140
47140: DISABLE
// begin initMiner := true ;
47141: LD_ADDR_EXP 155
47145: PUSH
47146: LD_INT 1
47148: ST_TO_ADDR
// minersList := [ ] ;
47149: LD_ADDR_EXP 156
47153: PUSH
47154: EMPTY
47155: ST_TO_ADDR
// minerMinesList := [ ] ;
47156: LD_ADDR_EXP 157
47160: PUSH
47161: EMPTY
47162: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
47163: LD_ADDR_EXP 158
47167: PUSH
47168: LD_INT 5
47170: ST_TO_ADDR
// end ;
47171: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
47172: LD_EXP 155
47176: PUSH
47177: LD_INT 34
47179: PUSH
47180: LD_EXP 77
47184: PUSH
47185: EMPTY
47186: LIST
47187: LIST
47188: PPUSH
47189: CALL_OW 69
47193: AND
47194: IFFALSE 47657
47196: GO 47198
47198: DISABLE
47199: LD_INT 0
47201: PPUSH
47202: PPUSH
47203: PPUSH
47204: PPUSH
// begin enable ;
47205: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
47206: LD_ADDR_VAR 0 1
47210: PUSH
47211: LD_INT 34
47213: PUSH
47214: LD_EXP 77
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PPUSH
47223: CALL_OW 69
47227: PUSH
47228: FOR_IN
47229: IFFALSE 47301
// begin if not i in minersList then
47231: LD_VAR 0 1
47235: PUSH
47236: LD_EXP 156
47240: IN
47241: NOT
47242: IFFALSE 47299
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
47244: LD_ADDR_EXP 156
47248: PUSH
47249: LD_EXP 156
47253: PPUSH
47254: LD_EXP 156
47258: PUSH
47259: LD_INT 1
47261: PLUS
47262: PPUSH
47263: LD_VAR 0 1
47267: PPUSH
47268: CALL_OW 1
47272: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
47273: LD_ADDR_EXP 157
47277: PUSH
47278: LD_EXP 157
47282: PPUSH
47283: LD_EXP 157
47287: PUSH
47288: LD_INT 1
47290: PLUS
47291: PPUSH
47292: EMPTY
47293: PPUSH
47294: CALL_OW 1
47298: ST_TO_ADDR
// end end ;
47299: GO 47228
47301: POP
47302: POP
// for i := minerMinesList downto 1 do
47303: LD_ADDR_VAR 0 1
47307: PUSH
47308: DOUBLE
47309: LD_EXP 157
47313: INC
47314: ST_TO_ADDR
47315: LD_INT 1
47317: PUSH
47318: FOR_DOWNTO
47319: IFFALSE 47655
// begin if IsLive ( minersList [ i ] ) then
47321: LD_EXP 156
47325: PUSH
47326: LD_VAR 0 1
47330: ARRAY
47331: PPUSH
47332: CALL_OW 300
47336: IFFALSE 47364
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
47338: LD_EXP 156
47342: PUSH
47343: LD_VAR 0 1
47347: ARRAY
47348: PPUSH
47349: LD_EXP 157
47353: PUSH
47354: LD_VAR 0 1
47358: ARRAY
47359: PPUSH
47360: CALL_OW 505
// if not minerMinesList [ i ] then
47364: LD_EXP 157
47368: PUSH
47369: LD_VAR 0 1
47373: ARRAY
47374: NOT
47375: IFFALSE 47379
// continue ;
47377: GO 47318
// for j := minerMinesList [ i ] downto 1 do
47379: LD_ADDR_VAR 0 2
47383: PUSH
47384: DOUBLE
47385: LD_EXP 157
47389: PUSH
47390: LD_VAR 0 1
47394: ARRAY
47395: INC
47396: ST_TO_ADDR
47397: LD_INT 1
47399: PUSH
47400: FOR_DOWNTO
47401: IFFALSE 47651
// begin side := GetSide ( minersList [ i ] ) ;
47403: LD_ADDR_VAR 0 3
47407: PUSH
47408: LD_EXP 156
47412: PUSH
47413: LD_VAR 0 1
47417: ARRAY
47418: PPUSH
47419: CALL_OW 255
47423: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
47424: LD_ADDR_VAR 0 4
47428: PUSH
47429: LD_EXP 157
47433: PUSH
47434: LD_VAR 0 1
47438: ARRAY
47439: PUSH
47440: LD_VAR 0 2
47444: ARRAY
47445: PUSH
47446: LD_INT 1
47448: ARRAY
47449: PPUSH
47450: LD_EXP 157
47454: PUSH
47455: LD_VAR 0 1
47459: ARRAY
47460: PUSH
47461: LD_VAR 0 2
47465: ARRAY
47466: PUSH
47467: LD_INT 2
47469: ARRAY
47470: PPUSH
47471: CALL_OW 428
47475: ST_TO_ADDR
// if not tmp then
47476: LD_VAR 0 4
47480: NOT
47481: IFFALSE 47485
// continue ;
47483: GO 47400
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
47485: LD_VAR 0 4
47489: PUSH
47490: LD_INT 81
47492: PUSH
47493: LD_VAR 0 3
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PPUSH
47502: CALL_OW 69
47506: IN
47507: PUSH
47508: LD_EXP 157
47512: PUSH
47513: LD_VAR 0 1
47517: ARRAY
47518: PUSH
47519: LD_VAR 0 2
47523: ARRAY
47524: PUSH
47525: LD_INT 1
47527: ARRAY
47528: PPUSH
47529: LD_EXP 157
47533: PUSH
47534: LD_VAR 0 1
47538: ARRAY
47539: PUSH
47540: LD_VAR 0 2
47544: ARRAY
47545: PUSH
47546: LD_INT 2
47548: ARRAY
47549: PPUSH
47550: CALL_OW 458
47554: AND
47555: IFFALSE 47649
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
47557: LD_EXP 157
47561: PUSH
47562: LD_VAR 0 1
47566: ARRAY
47567: PUSH
47568: LD_VAR 0 2
47572: ARRAY
47573: PUSH
47574: LD_INT 1
47576: ARRAY
47577: PPUSH
47578: LD_EXP 157
47582: PUSH
47583: LD_VAR 0 1
47587: ARRAY
47588: PUSH
47589: LD_VAR 0 2
47593: ARRAY
47594: PUSH
47595: LD_INT 2
47597: ARRAY
47598: PPUSH
47599: LD_VAR 0 3
47603: PPUSH
47604: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
47608: LD_ADDR_EXP 157
47612: PUSH
47613: LD_EXP 157
47617: PPUSH
47618: LD_VAR 0 1
47622: PPUSH
47623: LD_EXP 157
47627: PUSH
47628: LD_VAR 0 1
47632: ARRAY
47633: PPUSH
47634: LD_VAR 0 2
47638: PPUSH
47639: CALL_OW 3
47643: PPUSH
47644: CALL_OW 1
47648: ST_TO_ADDR
// end ; end ;
47649: GO 47400
47651: POP
47652: POP
// end ;
47653: GO 47318
47655: POP
47656: POP
// end ;
47657: PPOPN 4
47659: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
47660: LD_INT 0
47662: PPUSH
47663: PPUSH
// result := false ;
47664: LD_ADDR_VAR 0 4
47668: PUSH
47669: LD_INT 0
47671: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
47672: LD_VAR 0 1
47676: PPUSH
47677: CALL_OW 264
47681: PUSH
47682: LD_EXP 77
47686: EQUAL
47687: NOT
47688: IFFALSE 47692
// exit ;
47690: GO 47932
// index := GetElementIndex ( minersList , unit ) ;
47692: LD_ADDR_VAR 0 5
47696: PUSH
47697: LD_EXP 156
47701: PPUSH
47702: LD_VAR 0 1
47706: PPUSH
47707: CALL 54069 0 2
47711: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
47712: LD_EXP 157
47716: PUSH
47717: LD_VAR 0 5
47721: ARRAY
47722: PUSH
47723: LD_EXP 158
47727: GREATEREQUAL
47728: IFFALSE 47732
// exit ;
47730: GO 47932
// ComMoveXY ( unit , x , y ) ;
47732: LD_VAR 0 1
47736: PPUSH
47737: LD_VAR 0 2
47741: PPUSH
47742: LD_VAR 0 3
47746: PPUSH
47747: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
47751: LD_INT 35
47753: PPUSH
47754: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
47758: LD_VAR 0 1
47762: PPUSH
47763: LD_VAR 0 2
47767: PPUSH
47768: LD_VAR 0 3
47772: PPUSH
47773: CALL 84788 0 3
47777: NOT
47778: PUSH
47779: LD_VAR 0 1
47783: PPUSH
47784: CALL_OW 314
47788: AND
47789: IFFALSE 47793
// exit ;
47791: GO 47932
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
47793: LD_VAR 0 2
47797: PPUSH
47798: LD_VAR 0 3
47802: PPUSH
47803: CALL_OW 428
47807: PUSH
47808: LD_VAR 0 1
47812: EQUAL
47813: PUSH
47814: LD_VAR 0 1
47818: PPUSH
47819: CALL_OW 314
47823: NOT
47824: AND
47825: IFFALSE 47751
// PlaySoundXY ( x , y , PlantMine ) ;
47827: LD_VAR 0 2
47831: PPUSH
47832: LD_VAR 0 3
47836: PPUSH
47837: LD_STRING PlantMine
47839: PPUSH
47840: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
47844: LD_VAR 0 2
47848: PPUSH
47849: LD_VAR 0 3
47853: PPUSH
47854: LD_VAR 0 1
47858: PPUSH
47859: CALL_OW 255
47863: PPUSH
47864: LD_INT 0
47866: PPUSH
47867: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
47871: LD_ADDR_EXP 157
47875: PUSH
47876: LD_EXP 157
47880: PPUSH
47881: LD_VAR 0 5
47885: PUSH
47886: LD_EXP 157
47890: PUSH
47891: LD_VAR 0 5
47895: ARRAY
47896: PUSH
47897: LD_INT 1
47899: PLUS
47900: PUSH
47901: EMPTY
47902: LIST
47903: LIST
47904: PPUSH
47905: LD_VAR 0 2
47909: PUSH
47910: LD_VAR 0 3
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PPUSH
47919: CALL 54284 0 3
47923: ST_TO_ADDR
// result := true ;
47924: LD_ADDR_VAR 0 4
47928: PUSH
47929: LD_INT 1
47931: ST_TO_ADDR
// end ;
47932: LD_VAR 0 4
47936: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
47937: LD_INT 0
47939: PPUSH
47940: PPUSH
47941: PPUSH
// if not unit in minersList then
47942: LD_VAR 0 1
47946: PUSH
47947: LD_EXP 156
47951: IN
47952: NOT
47953: IFFALSE 47957
// exit ;
47955: GO 48349
// index := GetElementIndex ( minersList , unit ) ;
47957: LD_ADDR_VAR 0 6
47961: PUSH
47962: LD_EXP 156
47966: PPUSH
47967: LD_VAR 0 1
47971: PPUSH
47972: CALL 54069 0 2
47976: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
47977: LD_ADDR_VAR 0 5
47981: PUSH
47982: DOUBLE
47983: LD_EXP 157
47987: PUSH
47988: LD_VAR 0 6
47992: ARRAY
47993: INC
47994: ST_TO_ADDR
47995: LD_INT 1
47997: PUSH
47998: FOR_DOWNTO
47999: IFFALSE 48160
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
48001: LD_EXP 157
48005: PUSH
48006: LD_VAR 0 6
48010: ARRAY
48011: PUSH
48012: LD_VAR 0 5
48016: ARRAY
48017: PUSH
48018: LD_INT 1
48020: ARRAY
48021: PUSH
48022: LD_VAR 0 2
48026: EQUAL
48027: PUSH
48028: LD_EXP 157
48032: PUSH
48033: LD_VAR 0 6
48037: ARRAY
48038: PUSH
48039: LD_VAR 0 5
48043: ARRAY
48044: PUSH
48045: LD_INT 2
48047: ARRAY
48048: PUSH
48049: LD_VAR 0 3
48053: EQUAL
48054: AND
48055: IFFALSE 48158
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
48057: LD_EXP 157
48061: PUSH
48062: LD_VAR 0 6
48066: ARRAY
48067: PUSH
48068: LD_VAR 0 5
48072: ARRAY
48073: PUSH
48074: LD_INT 1
48076: ARRAY
48077: PPUSH
48078: LD_EXP 157
48082: PUSH
48083: LD_VAR 0 6
48087: ARRAY
48088: PUSH
48089: LD_VAR 0 5
48093: ARRAY
48094: PUSH
48095: LD_INT 2
48097: ARRAY
48098: PPUSH
48099: LD_VAR 0 1
48103: PPUSH
48104: CALL_OW 255
48108: PPUSH
48109: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
48113: LD_ADDR_EXP 157
48117: PUSH
48118: LD_EXP 157
48122: PPUSH
48123: LD_VAR 0 6
48127: PPUSH
48128: LD_EXP 157
48132: PUSH
48133: LD_VAR 0 6
48137: ARRAY
48138: PPUSH
48139: LD_VAR 0 5
48143: PPUSH
48144: CALL_OW 3
48148: PPUSH
48149: CALL_OW 1
48153: ST_TO_ADDR
// exit ;
48154: POP
48155: POP
48156: GO 48349
// end ; end ;
48158: GO 47998
48160: POP
48161: POP
// for i := minerMinesList [ index ] downto 1 do
48162: LD_ADDR_VAR 0 5
48166: PUSH
48167: DOUBLE
48168: LD_EXP 157
48172: PUSH
48173: LD_VAR 0 6
48177: ARRAY
48178: INC
48179: ST_TO_ADDR
48180: LD_INT 1
48182: PUSH
48183: FOR_DOWNTO
48184: IFFALSE 48347
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
48186: LD_EXP 157
48190: PUSH
48191: LD_VAR 0 6
48195: ARRAY
48196: PUSH
48197: LD_VAR 0 5
48201: ARRAY
48202: PUSH
48203: LD_INT 1
48205: ARRAY
48206: PPUSH
48207: LD_EXP 157
48211: PUSH
48212: LD_VAR 0 6
48216: ARRAY
48217: PUSH
48218: LD_VAR 0 5
48222: ARRAY
48223: PUSH
48224: LD_INT 2
48226: ARRAY
48227: PPUSH
48228: LD_VAR 0 2
48232: PPUSH
48233: LD_VAR 0 3
48237: PPUSH
48238: CALL_OW 298
48242: PUSH
48243: LD_INT 6
48245: LESS
48246: IFFALSE 48345
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
48248: LD_EXP 157
48252: PUSH
48253: LD_VAR 0 6
48257: ARRAY
48258: PUSH
48259: LD_VAR 0 5
48263: ARRAY
48264: PUSH
48265: LD_INT 1
48267: ARRAY
48268: PPUSH
48269: LD_EXP 157
48273: PUSH
48274: LD_VAR 0 6
48278: ARRAY
48279: PUSH
48280: LD_VAR 0 5
48284: ARRAY
48285: PUSH
48286: LD_INT 2
48288: ARRAY
48289: PPUSH
48290: LD_VAR 0 1
48294: PPUSH
48295: CALL_OW 255
48299: PPUSH
48300: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
48304: LD_ADDR_EXP 157
48308: PUSH
48309: LD_EXP 157
48313: PPUSH
48314: LD_VAR 0 6
48318: PPUSH
48319: LD_EXP 157
48323: PUSH
48324: LD_VAR 0 6
48328: ARRAY
48329: PPUSH
48330: LD_VAR 0 5
48334: PPUSH
48335: CALL_OW 3
48339: PPUSH
48340: CALL_OW 1
48344: ST_TO_ADDR
// end ; end ;
48345: GO 48183
48347: POP
48348: POP
// end ;
48349: LD_VAR 0 4
48353: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
48354: LD_INT 0
48356: PPUSH
48357: PPUSH
48358: PPUSH
48359: PPUSH
48360: PPUSH
48361: PPUSH
48362: PPUSH
48363: PPUSH
48364: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
48365: LD_VAR 0 1
48369: PPUSH
48370: CALL_OW 264
48374: PUSH
48375: LD_EXP 77
48379: EQUAL
48380: NOT
48381: PUSH
48382: LD_VAR 0 1
48386: PUSH
48387: LD_EXP 156
48391: IN
48392: NOT
48393: OR
48394: IFFALSE 48398
// exit ;
48396: GO 48720
// index := GetElementIndex ( minersList , unit ) ;
48398: LD_ADDR_VAR 0 6
48402: PUSH
48403: LD_EXP 156
48407: PPUSH
48408: LD_VAR 0 1
48412: PPUSH
48413: CALL 54069 0 2
48417: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
48418: LD_ADDR_VAR 0 8
48422: PUSH
48423: LD_EXP 158
48427: PUSH
48428: LD_EXP 157
48432: PUSH
48433: LD_VAR 0 6
48437: ARRAY
48438: MINUS
48439: ST_TO_ADDR
// if not minesFreeAmount then
48440: LD_VAR 0 8
48444: NOT
48445: IFFALSE 48449
// exit ;
48447: GO 48720
// tmp := [ ] ;
48449: LD_ADDR_VAR 0 7
48453: PUSH
48454: EMPTY
48455: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
48456: LD_ADDR_VAR 0 5
48460: PUSH
48461: DOUBLE
48462: LD_INT 1
48464: DEC
48465: ST_TO_ADDR
48466: LD_VAR 0 8
48470: PUSH
48471: FOR_TO
48472: IFFALSE 48667
// begin _d := rand ( 0 , 5 ) ;
48474: LD_ADDR_VAR 0 11
48478: PUSH
48479: LD_INT 0
48481: PPUSH
48482: LD_INT 5
48484: PPUSH
48485: CALL_OW 12
48489: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
48490: LD_ADDR_VAR 0 12
48494: PUSH
48495: LD_INT 2
48497: PPUSH
48498: LD_INT 6
48500: PPUSH
48501: CALL_OW 12
48505: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
48506: LD_ADDR_VAR 0 9
48510: PUSH
48511: LD_VAR 0 2
48515: PPUSH
48516: LD_VAR 0 11
48520: PPUSH
48521: LD_VAR 0 12
48525: PPUSH
48526: CALL_OW 272
48530: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
48531: LD_ADDR_VAR 0 10
48535: PUSH
48536: LD_VAR 0 3
48540: PPUSH
48541: LD_VAR 0 11
48545: PPUSH
48546: LD_VAR 0 12
48550: PPUSH
48551: CALL_OW 273
48555: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
48556: LD_VAR 0 9
48560: PPUSH
48561: LD_VAR 0 10
48565: PPUSH
48566: CALL_OW 488
48570: PUSH
48571: LD_VAR 0 9
48575: PUSH
48576: LD_VAR 0 10
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_VAR 0 7
48589: IN
48590: NOT
48591: AND
48592: PUSH
48593: LD_VAR 0 9
48597: PPUSH
48598: LD_VAR 0 10
48602: PPUSH
48603: CALL_OW 458
48607: NOT
48608: AND
48609: IFFALSE 48651
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
48611: LD_ADDR_VAR 0 7
48615: PUSH
48616: LD_VAR 0 7
48620: PPUSH
48621: LD_VAR 0 7
48625: PUSH
48626: LD_INT 1
48628: PLUS
48629: PPUSH
48630: LD_VAR 0 9
48634: PUSH
48635: LD_VAR 0 10
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PPUSH
48644: CALL_OW 1
48648: ST_TO_ADDR
48649: GO 48665
// i := i - 1 ;
48651: LD_ADDR_VAR 0 5
48655: PUSH
48656: LD_VAR 0 5
48660: PUSH
48661: LD_INT 1
48663: MINUS
48664: ST_TO_ADDR
// end ;
48665: GO 48471
48667: POP
48668: POP
// for i in tmp do
48669: LD_ADDR_VAR 0 5
48673: PUSH
48674: LD_VAR 0 7
48678: PUSH
48679: FOR_IN
48680: IFFALSE 48718
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
48682: LD_VAR 0 1
48686: PPUSH
48687: LD_VAR 0 5
48691: PUSH
48692: LD_INT 1
48694: ARRAY
48695: PPUSH
48696: LD_VAR 0 5
48700: PUSH
48701: LD_INT 2
48703: ARRAY
48704: PPUSH
48705: CALL 47660 0 3
48709: NOT
48710: IFFALSE 48716
// exit ;
48712: POP
48713: POP
48714: GO 48720
48716: GO 48679
48718: POP
48719: POP
// end ;
48720: LD_VAR 0 4
48724: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
48725: LD_INT 0
48727: PPUSH
48728: PPUSH
48729: PPUSH
48730: PPUSH
48731: PPUSH
48732: PPUSH
48733: PPUSH
// if not GetClass ( unit ) = class_sniper then
48734: LD_VAR 0 1
48738: PPUSH
48739: CALL_OW 257
48743: PUSH
48744: LD_INT 5
48746: EQUAL
48747: NOT
48748: IFFALSE 48752
// exit ;
48750: GO 49140
// dist := 8 ;
48752: LD_ADDR_VAR 0 5
48756: PUSH
48757: LD_INT 8
48759: ST_TO_ADDR
// viewRange := 12 ;
48760: LD_ADDR_VAR 0 7
48764: PUSH
48765: LD_INT 12
48767: ST_TO_ADDR
// side := GetSide ( unit ) ;
48768: LD_ADDR_VAR 0 6
48772: PUSH
48773: LD_VAR 0 1
48777: PPUSH
48778: CALL_OW 255
48782: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
48783: LD_INT 61
48785: PPUSH
48786: LD_VAR 0 6
48790: PPUSH
48791: CALL_OW 321
48795: PUSH
48796: LD_INT 2
48798: EQUAL
48799: IFFALSE 48809
// viewRange := 16 ;
48801: LD_ADDR_VAR 0 7
48805: PUSH
48806: LD_INT 16
48808: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
48809: LD_VAR 0 1
48813: PPUSH
48814: LD_VAR 0 2
48818: PPUSH
48819: LD_VAR 0 3
48823: PPUSH
48824: CALL_OW 297
48828: PUSH
48829: LD_VAR 0 5
48833: GREATER
48834: IFFALSE 48913
// begin ComMoveXY ( unit , x , y ) ;
48836: LD_VAR 0 1
48840: PPUSH
48841: LD_VAR 0 2
48845: PPUSH
48846: LD_VAR 0 3
48850: PPUSH
48851: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48855: LD_INT 35
48857: PPUSH
48858: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
48862: LD_VAR 0 1
48866: PPUSH
48867: LD_VAR 0 2
48871: PPUSH
48872: LD_VAR 0 3
48876: PPUSH
48877: CALL 84788 0 3
48881: NOT
48882: IFFALSE 48886
// exit ;
48884: GO 49140
// until GetDistUnitXY ( unit , x , y ) < dist ;
48886: LD_VAR 0 1
48890: PPUSH
48891: LD_VAR 0 2
48895: PPUSH
48896: LD_VAR 0 3
48900: PPUSH
48901: CALL_OW 297
48905: PUSH
48906: LD_VAR 0 5
48910: LESS
48911: IFFALSE 48855
// end ; ComTurnXY ( unit , x , y ) ;
48913: LD_VAR 0 1
48917: PPUSH
48918: LD_VAR 0 2
48922: PPUSH
48923: LD_VAR 0 3
48927: PPUSH
48928: CALL_OW 118
// wait ( 5 ) ;
48932: LD_INT 5
48934: PPUSH
48935: CALL_OW 67
// _d := GetDir ( unit ) ;
48939: LD_ADDR_VAR 0 10
48943: PUSH
48944: LD_VAR 0 1
48948: PPUSH
48949: CALL_OW 254
48953: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
48954: LD_ADDR_VAR 0 8
48958: PUSH
48959: LD_VAR 0 1
48963: PPUSH
48964: CALL_OW 250
48968: PPUSH
48969: LD_VAR 0 10
48973: PPUSH
48974: LD_VAR 0 5
48978: PPUSH
48979: CALL_OW 272
48983: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
48984: LD_ADDR_VAR 0 9
48988: PUSH
48989: LD_VAR 0 1
48993: PPUSH
48994: CALL_OW 251
48998: PPUSH
48999: LD_VAR 0 10
49003: PPUSH
49004: LD_VAR 0 5
49008: PPUSH
49009: CALL_OW 273
49013: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49014: LD_VAR 0 8
49018: PPUSH
49019: LD_VAR 0 9
49023: PPUSH
49024: CALL_OW 488
49028: NOT
49029: IFFALSE 49033
// exit ;
49031: GO 49140
// ComAnimCustom ( unit , 1 ) ;
49033: LD_VAR 0 1
49037: PPUSH
49038: LD_INT 1
49040: PPUSH
49041: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
49045: LD_VAR 0 8
49049: PPUSH
49050: LD_VAR 0 9
49054: PPUSH
49055: LD_VAR 0 6
49059: PPUSH
49060: LD_VAR 0 7
49064: PPUSH
49065: CALL_OW 330
// repeat wait ( 1 ) ;
49069: LD_INT 1
49071: PPUSH
49072: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
49076: LD_VAR 0 1
49080: PPUSH
49081: CALL_OW 316
49085: PUSH
49086: LD_VAR 0 1
49090: PPUSH
49091: CALL_OW 314
49095: OR
49096: PUSH
49097: LD_VAR 0 1
49101: PPUSH
49102: CALL_OW 302
49106: NOT
49107: OR
49108: PUSH
49109: LD_VAR 0 1
49113: PPUSH
49114: CALL_OW 301
49118: OR
49119: IFFALSE 49069
// RemoveSeeing ( _x , _y , side ) ;
49121: LD_VAR 0 8
49125: PPUSH
49126: LD_VAR 0 9
49130: PPUSH
49131: LD_VAR 0 6
49135: PPUSH
49136: CALL_OW 331
// end ; end_of_file
49140: LD_VAR 0 4
49144: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
49145: LD_INT 0
49147: PPUSH
49148: PPUSH
// if exist_mode then
49149: LD_VAR 0 2
49153: IFFALSE 49178
// unit := CreateCharacter ( prefix & ident ) else
49155: LD_ADDR_VAR 0 5
49159: PUSH
49160: LD_VAR 0 3
49164: PUSH
49165: LD_VAR 0 1
49169: STR
49170: PPUSH
49171: CALL_OW 34
49175: ST_TO_ADDR
49176: GO 49193
// unit := NewCharacter ( ident ) ;
49178: LD_ADDR_VAR 0 5
49182: PUSH
49183: LD_VAR 0 1
49187: PPUSH
49188: CALL_OW 25
49192: ST_TO_ADDR
// result := unit ;
49193: LD_ADDR_VAR 0 4
49197: PUSH
49198: LD_VAR 0 5
49202: ST_TO_ADDR
// end ;
49203: LD_VAR 0 4
49207: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
49208: LD_INT 0
49210: PPUSH
49211: PPUSH
// if not side or not nation then
49212: LD_VAR 0 1
49216: NOT
49217: PUSH
49218: LD_VAR 0 2
49222: NOT
49223: OR
49224: IFFALSE 49228
// exit ;
49226: GO 49996
// case nation of nation_american :
49228: LD_VAR 0 2
49232: PUSH
49233: LD_INT 1
49235: DOUBLE
49236: EQUAL
49237: IFTRUE 49241
49239: GO 49455
49241: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
49242: LD_ADDR_VAR 0 4
49246: PUSH
49247: LD_INT 35
49249: PUSH
49250: LD_INT 45
49252: PUSH
49253: LD_INT 46
49255: PUSH
49256: LD_INT 47
49258: PUSH
49259: LD_INT 82
49261: PUSH
49262: LD_INT 83
49264: PUSH
49265: LD_INT 84
49267: PUSH
49268: LD_INT 85
49270: PUSH
49271: LD_INT 86
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 2
49279: PUSH
49280: LD_INT 6
49282: PUSH
49283: LD_INT 15
49285: PUSH
49286: LD_INT 16
49288: PUSH
49289: LD_INT 7
49291: PUSH
49292: LD_INT 12
49294: PUSH
49295: LD_INT 13
49297: PUSH
49298: LD_INT 10
49300: PUSH
49301: LD_INT 14
49303: PUSH
49304: LD_INT 20
49306: PUSH
49307: LD_INT 21
49309: PUSH
49310: LD_INT 22
49312: PUSH
49313: LD_INT 25
49315: PUSH
49316: LD_INT 32
49318: PUSH
49319: LD_INT 27
49321: PUSH
49322: LD_INT 36
49324: PUSH
49325: LD_INT 69
49327: PUSH
49328: LD_INT 39
49330: PUSH
49331: LD_INT 34
49333: PUSH
49334: LD_INT 40
49336: PUSH
49337: LD_INT 48
49339: PUSH
49340: LD_INT 49
49342: PUSH
49343: LD_INT 50
49345: PUSH
49346: LD_INT 51
49348: PUSH
49349: LD_INT 52
49351: PUSH
49352: LD_INT 53
49354: PUSH
49355: LD_INT 54
49357: PUSH
49358: LD_INT 55
49360: PUSH
49361: LD_INT 56
49363: PUSH
49364: LD_INT 57
49366: PUSH
49367: LD_INT 58
49369: PUSH
49370: LD_INT 59
49372: PUSH
49373: LD_INT 60
49375: PUSH
49376: LD_INT 61
49378: PUSH
49379: LD_INT 62
49381: PUSH
49382: LD_INT 80
49384: PUSH
49385: LD_INT 82
49387: PUSH
49388: LD_INT 83
49390: PUSH
49391: LD_INT 84
49393: PUSH
49394: LD_INT 85
49396: PUSH
49397: LD_INT 86
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: LIST
49404: LIST
49405: LIST
49406: LIST
49407: LIST
49408: LIST
49409: LIST
49410: LIST
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: LIST
49416: LIST
49417: LIST
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: LIST
49423: LIST
49424: LIST
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: LIST
49430: LIST
49431: LIST
49432: LIST
49433: LIST
49434: LIST
49435: LIST
49436: LIST
49437: LIST
49438: LIST
49439: LIST
49440: LIST
49441: LIST
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: ST_TO_ADDR
49453: GO 49920
49455: LD_INT 2
49457: DOUBLE
49458: EQUAL
49459: IFTRUE 49463
49461: GO 49689
49463: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
49464: LD_ADDR_VAR 0 4
49468: PUSH
49469: LD_INT 35
49471: PUSH
49472: LD_INT 45
49474: PUSH
49475: LD_INT 46
49477: PUSH
49478: LD_INT 47
49480: PUSH
49481: LD_INT 82
49483: PUSH
49484: LD_INT 83
49486: PUSH
49487: LD_INT 84
49489: PUSH
49490: LD_INT 85
49492: PUSH
49493: LD_INT 87
49495: PUSH
49496: LD_INT 70
49498: PUSH
49499: LD_INT 1
49501: PUSH
49502: LD_INT 11
49504: PUSH
49505: LD_INT 3
49507: PUSH
49508: LD_INT 4
49510: PUSH
49511: LD_INT 5
49513: PUSH
49514: LD_INT 6
49516: PUSH
49517: LD_INT 15
49519: PUSH
49520: LD_INT 18
49522: PUSH
49523: LD_INT 7
49525: PUSH
49526: LD_INT 17
49528: PUSH
49529: LD_INT 8
49531: PUSH
49532: LD_INT 20
49534: PUSH
49535: LD_INT 21
49537: PUSH
49538: LD_INT 22
49540: PUSH
49541: LD_INT 72
49543: PUSH
49544: LD_INT 26
49546: PUSH
49547: LD_INT 69
49549: PUSH
49550: LD_INT 39
49552: PUSH
49553: LD_INT 40
49555: PUSH
49556: LD_INT 41
49558: PUSH
49559: LD_INT 42
49561: PUSH
49562: LD_INT 43
49564: PUSH
49565: LD_INT 48
49567: PUSH
49568: LD_INT 49
49570: PUSH
49571: LD_INT 50
49573: PUSH
49574: LD_INT 51
49576: PUSH
49577: LD_INT 52
49579: PUSH
49580: LD_INT 53
49582: PUSH
49583: LD_INT 54
49585: PUSH
49586: LD_INT 55
49588: PUSH
49589: LD_INT 56
49591: PUSH
49592: LD_INT 60
49594: PUSH
49595: LD_INT 61
49597: PUSH
49598: LD_INT 62
49600: PUSH
49601: LD_INT 66
49603: PUSH
49604: LD_INT 67
49606: PUSH
49607: LD_INT 68
49609: PUSH
49610: LD_INT 81
49612: PUSH
49613: LD_INT 82
49615: PUSH
49616: LD_INT 83
49618: PUSH
49619: LD_INT 84
49621: PUSH
49622: LD_INT 85
49624: PUSH
49625: LD_INT 87
49627: PUSH
49628: LD_INT 88
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: LIST
49638: LIST
49639: LIST
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: LIST
49650: LIST
49651: LIST
49652: LIST
49653: LIST
49654: LIST
49655: LIST
49656: LIST
49657: LIST
49658: LIST
49659: LIST
49660: LIST
49661: LIST
49662: LIST
49663: LIST
49664: LIST
49665: LIST
49666: LIST
49667: LIST
49668: LIST
49669: LIST
49670: LIST
49671: LIST
49672: LIST
49673: LIST
49674: LIST
49675: LIST
49676: LIST
49677: LIST
49678: LIST
49679: LIST
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: LIST
49685: LIST
49686: ST_TO_ADDR
49687: GO 49920
49689: LD_INT 3
49691: DOUBLE
49692: EQUAL
49693: IFTRUE 49697
49695: GO 49919
49697: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
49698: LD_ADDR_VAR 0 4
49702: PUSH
49703: LD_INT 46
49705: PUSH
49706: LD_INT 47
49708: PUSH
49709: LD_INT 1
49711: PUSH
49712: LD_INT 2
49714: PUSH
49715: LD_INT 82
49717: PUSH
49718: LD_INT 83
49720: PUSH
49721: LD_INT 84
49723: PUSH
49724: LD_INT 85
49726: PUSH
49727: LD_INT 86
49729: PUSH
49730: LD_INT 11
49732: PUSH
49733: LD_INT 9
49735: PUSH
49736: LD_INT 20
49738: PUSH
49739: LD_INT 19
49741: PUSH
49742: LD_INT 21
49744: PUSH
49745: LD_INT 24
49747: PUSH
49748: LD_INT 22
49750: PUSH
49751: LD_INT 25
49753: PUSH
49754: LD_INT 28
49756: PUSH
49757: LD_INT 29
49759: PUSH
49760: LD_INT 30
49762: PUSH
49763: LD_INT 31
49765: PUSH
49766: LD_INT 37
49768: PUSH
49769: LD_INT 38
49771: PUSH
49772: LD_INT 32
49774: PUSH
49775: LD_INT 27
49777: PUSH
49778: LD_INT 33
49780: PUSH
49781: LD_INT 69
49783: PUSH
49784: LD_INT 39
49786: PUSH
49787: LD_INT 34
49789: PUSH
49790: LD_INT 40
49792: PUSH
49793: LD_INT 71
49795: PUSH
49796: LD_INT 23
49798: PUSH
49799: LD_INT 44
49801: PUSH
49802: LD_INT 48
49804: PUSH
49805: LD_INT 49
49807: PUSH
49808: LD_INT 50
49810: PUSH
49811: LD_INT 51
49813: PUSH
49814: LD_INT 52
49816: PUSH
49817: LD_INT 53
49819: PUSH
49820: LD_INT 54
49822: PUSH
49823: LD_INT 55
49825: PUSH
49826: LD_INT 56
49828: PUSH
49829: LD_INT 57
49831: PUSH
49832: LD_INT 58
49834: PUSH
49835: LD_INT 59
49837: PUSH
49838: LD_INT 63
49840: PUSH
49841: LD_INT 64
49843: PUSH
49844: LD_INT 65
49846: PUSH
49847: LD_INT 82
49849: PUSH
49850: LD_INT 83
49852: PUSH
49853: LD_INT 84
49855: PUSH
49856: LD_INT 85
49858: PUSH
49859: LD_INT 86
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: LIST
49892: LIST
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: LIST
49902: LIST
49903: LIST
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: ST_TO_ADDR
49917: GO 49920
49919: POP
// if state > - 1 and state < 3 then
49920: LD_VAR 0 3
49924: PUSH
49925: LD_INT 1
49927: NEG
49928: GREATER
49929: PUSH
49930: LD_VAR 0 3
49934: PUSH
49935: LD_INT 3
49937: LESS
49938: AND
49939: IFFALSE 49996
// for i in result do
49941: LD_ADDR_VAR 0 5
49945: PUSH
49946: LD_VAR 0 4
49950: PUSH
49951: FOR_IN
49952: IFFALSE 49994
// if GetTech ( i , side ) <> state then
49954: LD_VAR 0 5
49958: PPUSH
49959: LD_VAR 0 1
49963: PPUSH
49964: CALL_OW 321
49968: PUSH
49969: LD_VAR 0 3
49973: NONEQUAL
49974: IFFALSE 49992
// result := result diff i ;
49976: LD_ADDR_VAR 0 4
49980: PUSH
49981: LD_VAR 0 4
49985: PUSH
49986: LD_VAR 0 5
49990: DIFF
49991: ST_TO_ADDR
49992: GO 49951
49994: POP
49995: POP
// end ;
49996: LD_VAR 0 4
50000: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
50001: LD_INT 0
50003: PPUSH
50004: PPUSH
50005: PPUSH
// result := true ;
50006: LD_ADDR_VAR 0 3
50010: PUSH
50011: LD_INT 1
50013: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
50014: LD_ADDR_VAR 0 5
50018: PUSH
50019: LD_VAR 0 2
50023: PPUSH
50024: CALL_OW 480
50028: ST_TO_ADDR
// if not tmp then
50029: LD_VAR 0 5
50033: NOT
50034: IFFALSE 50038
// exit ;
50036: GO 50087
// for i in tmp do
50038: LD_ADDR_VAR 0 4
50042: PUSH
50043: LD_VAR 0 5
50047: PUSH
50048: FOR_IN
50049: IFFALSE 50085
// if GetTech ( i , side ) <> state_researched then
50051: LD_VAR 0 4
50055: PPUSH
50056: LD_VAR 0 1
50060: PPUSH
50061: CALL_OW 321
50065: PUSH
50066: LD_INT 2
50068: NONEQUAL
50069: IFFALSE 50083
// begin result := false ;
50071: LD_ADDR_VAR 0 3
50075: PUSH
50076: LD_INT 0
50078: ST_TO_ADDR
// exit ;
50079: POP
50080: POP
50081: GO 50087
// end ;
50083: GO 50048
50085: POP
50086: POP
// end ;
50087: LD_VAR 0 3
50091: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
50092: LD_INT 0
50094: PPUSH
50095: PPUSH
50096: PPUSH
50097: PPUSH
50098: PPUSH
50099: PPUSH
50100: PPUSH
50101: PPUSH
50102: PPUSH
50103: PPUSH
50104: PPUSH
50105: PPUSH
50106: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
50107: LD_VAR 0 1
50111: NOT
50112: PUSH
50113: LD_VAR 0 1
50117: PPUSH
50118: CALL_OW 257
50122: PUSH
50123: LD_INT 9
50125: NONEQUAL
50126: OR
50127: IFFALSE 50131
// exit ;
50129: GO 50704
// side := GetSide ( unit ) ;
50131: LD_ADDR_VAR 0 9
50135: PUSH
50136: LD_VAR 0 1
50140: PPUSH
50141: CALL_OW 255
50145: ST_TO_ADDR
// tech_space := tech_spacanom ;
50146: LD_ADDR_VAR 0 12
50150: PUSH
50151: LD_INT 29
50153: ST_TO_ADDR
// tech_time := tech_taurad ;
50154: LD_ADDR_VAR 0 13
50158: PUSH
50159: LD_INT 28
50161: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
50162: LD_ADDR_VAR 0 11
50166: PUSH
50167: LD_VAR 0 1
50171: PPUSH
50172: CALL_OW 310
50176: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
50177: LD_VAR 0 11
50181: PPUSH
50182: CALL_OW 247
50186: PUSH
50187: LD_INT 2
50189: EQUAL
50190: IFFALSE 50194
// exit ;
50192: GO 50704
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50194: LD_ADDR_VAR 0 8
50198: PUSH
50199: LD_INT 81
50201: PUSH
50202: LD_VAR 0 9
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 3
50213: PUSH
50214: LD_INT 21
50216: PUSH
50217: LD_INT 3
50219: PUSH
50220: EMPTY
50221: LIST
50222: LIST
50223: PUSH
50224: EMPTY
50225: LIST
50226: LIST
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PPUSH
50232: CALL_OW 69
50236: ST_TO_ADDR
// if not tmp then
50237: LD_VAR 0 8
50241: NOT
50242: IFFALSE 50246
// exit ;
50244: GO 50704
// if in_unit then
50246: LD_VAR 0 11
50250: IFFALSE 50274
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
50252: LD_ADDR_VAR 0 10
50256: PUSH
50257: LD_VAR 0 8
50261: PPUSH
50262: LD_VAR 0 11
50266: PPUSH
50267: CALL_OW 74
50271: ST_TO_ADDR
50272: GO 50294
// enemy := NearestUnitToUnit ( tmp , unit ) ;
50274: LD_ADDR_VAR 0 10
50278: PUSH
50279: LD_VAR 0 8
50283: PPUSH
50284: LD_VAR 0 1
50288: PPUSH
50289: CALL_OW 74
50293: ST_TO_ADDR
// if not enemy then
50294: LD_VAR 0 10
50298: NOT
50299: IFFALSE 50303
// exit ;
50301: GO 50704
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
50303: LD_VAR 0 11
50307: PUSH
50308: LD_VAR 0 11
50312: PPUSH
50313: LD_VAR 0 10
50317: PPUSH
50318: CALL_OW 296
50322: PUSH
50323: LD_INT 13
50325: GREATER
50326: AND
50327: PUSH
50328: LD_VAR 0 1
50332: PPUSH
50333: LD_VAR 0 10
50337: PPUSH
50338: CALL_OW 296
50342: PUSH
50343: LD_INT 12
50345: GREATER
50346: OR
50347: IFFALSE 50351
// exit ;
50349: GO 50704
// missile := [ 1 ] ;
50351: LD_ADDR_VAR 0 14
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: ST_TO_ADDR
// if Researched ( side , tech_space ) then
50362: LD_VAR 0 9
50366: PPUSH
50367: LD_VAR 0 12
50371: PPUSH
50372: CALL_OW 325
50376: IFFALSE 50405
// missile := Replace ( missile , missile + 1 , 2 ) ;
50378: LD_ADDR_VAR 0 14
50382: PUSH
50383: LD_VAR 0 14
50387: PPUSH
50388: LD_VAR 0 14
50392: PUSH
50393: LD_INT 1
50395: PLUS
50396: PPUSH
50397: LD_INT 2
50399: PPUSH
50400: CALL_OW 1
50404: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
50405: LD_VAR 0 9
50409: PPUSH
50410: LD_VAR 0 13
50414: PPUSH
50415: CALL_OW 325
50419: PUSH
50420: LD_VAR 0 10
50424: PPUSH
50425: CALL_OW 255
50429: PPUSH
50430: LD_VAR 0 13
50434: PPUSH
50435: CALL_OW 325
50439: NOT
50440: AND
50441: IFFALSE 50470
// missile := Replace ( missile , missile + 1 , 3 ) ;
50443: LD_ADDR_VAR 0 14
50447: PUSH
50448: LD_VAR 0 14
50452: PPUSH
50453: LD_VAR 0 14
50457: PUSH
50458: LD_INT 1
50460: PLUS
50461: PPUSH
50462: LD_INT 3
50464: PPUSH
50465: CALL_OW 1
50469: ST_TO_ADDR
// if missile < 2 then
50470: LD_VAR 0 14
50474: PUSH
50475: LD_INT 2
50477: LESS
50478: IFFALSE 50482
// exit ;
50480: GO 50704
// x := GetX ( enemy ) ;
50482: LD_ADDR_VAR 0 4
50486: PUSH
50487: LD_VAR 0 10
50491: PPUSH
50492: CALL_OW 250
50496: ST_TO_ADDR
// y := GetY ( enemy ) ;
50497: LD_ADDR_VAR 0 5
50501: PUSH
50502: LD_VAR 0 10
50506: PPUSH
50507: CALL_OW 251
50511: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
50512: LD_ADDR_VAR 0 6
50516: PUSH
50517: LD_VAR 0 4
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PPUSH
50526: LD_INT 1
50528: PPUSH
50529: CALL_OW 12
50533: PLUS
50534: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
50535: LD_ADDR_VAR 0 7
50539: PUSH
50540: LD_VAR 0 5
50544: PUSH
50545: LD_INT 1
50547: NEG
50548: PPUSH
50549: LD_INT 1
50551: PPUSH
50552: CALL_OW 12
50556: PLUS
50557: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50558: LD_VAR 0 6
50562: PPUSH
50563: LD_VAR 0 7
50567: PPUSH
50568: CALL_OW 488
50572: NOT
50573: IFFALSE 50595
// begin _x := x ;
50575: LD_ADDR_VAR 0 6
50579: PUSH
50580: LD_VAR 0 4
50584: ST_TO_ADDR
// _y := y ;
50585: LD_ADDR_VAR 0 7
50589: PUSH
50590: LD_VAR 0 5
50594: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
50595: LD_ADDR_VAR 0 3
50599: PUSH
50600: LD_INT 1
50602: PPUSH
50603: LD_VAR 0 14
50607: PPUSH
50608: CALL_OW 12
50612: ST_TO_ADDR
// case i of 1 :
50613: LD_VAR 0 3
50617: PUSH
50618: LD_INT 1
50620: DOUBLE
50621: EQUAL
50622: IFTRUE 50626
50624: GO 50643
50626: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
50627: LD_VAR 0 1
50631: PPUSH
50632: LD_VAR 0 10
50636: PPUSH
50637: CALL_OW 115
50641: GO 50704
50643: LD_INT 2
50645: DOUBLE
50646: EQUAL
50647: IFTRUE 50651
50649: GO 50673
50651: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
50652: LD_VAR 0 1
50656: PPUSH
50657: LD_VAR 0 6
50661: PPUSH
50662: LD_VAR 0 7
50666: PPUSH
50667: CALL_OW 153
50671: GO 50704
50673: LD_INT 3
50675: DOUBLE
50676: EQUAL
50677: IFTRUE 50681
50679: GO 50703
50681: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
50682: LD_VAR 0 1
50686: PPUSH
50687: LD_VAR 0 6
50691: PPUSH
50692: LD_VAR 0 7
50696: PPUSH
50697: CALL_OW 154
50701: GO 50704
50703: POP
// end ;
50704: LD_VAR 0 2
50708: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
50709: LD_INT 0
50711: PPUSH
50712: PPUSH
50713: PPUSH
50714: PPUSH
50715: PPUSH
50716: PPUSH
// if not unit or not building then
50717: LD_VAR 0 1
50721: NOT
50722: PUSH
50723: LD_VAR 0 2
50727: NOT
50728: OR
50729: IFFALSE 50733
// exit ;
50731: GO 50891
// x := GetX ( building ) ;
50733: LD_ADDR_VAR 0 5
50737: PUSH
50738: LD_VAR 0 2
50742: PPUSH
50743: CALL_OW 250
50747: ST_TO_ADDR
// y := GetY ( building ) ;
50748: LD_ADDR_VAR 0 6
50752: PUSH
50753: LD_VAR 0 2
50757: PPUSH
50758: CALL_OW 251
50762: ST_TO_ADDR
// for i = 0 to 5 do
50763: LD_ADDR_VAR 0 4
50767: PUSH
50768: DOUBLE
50769: LD_INT 0
50771: DEC
50772: ST_TO_ADDR
50773: LD_INT 5
50775: PUSH
50776: FOR_TO
50777: IFFALSE 50889
// begin _x := ShiftX ( x , i , 3 ) ;
50779: LD_ADDR_VAR 0 7
50783: PUSH
50784: LD_VAR 0 5
50788: PPUSH
50789: LD_VAR 0 4
50793: PPUSH
50794: LD_INT 3
50796: PPUSH
50797: CALL_OW 272
50801: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
50802: LD_ADDR_VAR 0 8
50806: PUSH
50807: LD_VAR 0 6
50811: PPUSH
50812: LD_VAR 0 4
50816: PPUSH
50817: LD_INT 3
50819: PPUSH
50820: CALL_OW 273
50824: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50825: LD_VAR 0 7
50829: PPUSH
50830: LD_VAR 0 8
50834: PPUSH
50835: CALL_OW 488
50839: NOT
50840: IFFALSE 50844
// continue ;
50842: GO 50776
// if HexInfo ( _x , _y ) = 0 then
50844: LD_VAR 0 7
50848: PPUSH
50849: LD_VAR 0 8
50853: PPUSH
50854: CALL_OW 428
50858: PUSH
50859: LD_INT 0
50861: EQUAL
50862: IFFALSE 50887
// begin ComMoveXY ( unit , _x , _y ) ;
50864: LD_VAR 0 1
50868: PPUSH
50869: LD_VAR 0 7
50873: PPUSH
50874: LD_VAR 0 8
50878: PPUSH
50879: CALL_OW 111
// exit ;
50883: POP
50884: POP
50885: GO 50891
// end ; end ;
50887: GO 50776
50889: POP
50890: POP
// end ;
50891: LD_VAR 0 3
50895: RET
// export function ScanBase ( side , base_area ) ; begin
50896: LD_INT 0
50898: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
50899: LD_ADDR_VAR 0 3
50903: PUSH
50904: LD_VAR 0 2
50908: PPUSH
50909: LD_INT 81
50911: PUSH
50912: LD_VAR 0 1
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: PPUSH
50921: CALL_OW 70
50925: ST_TO_ADDR
// end ;
50926: LD_VAR 0 3
50930: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
50931: LD_INT 0
50933: PPUSH
50934: PPUSH
50935: PPUSH
50936: PPUSH
// result := false ;
50937: LD_ADDR_VAR 0 2
50941: PUSH
50942: LD_INT 0
50944: ST_TO_ADDR
// side := GetSide ( unit ) ;
50945: LD_ADDR_VAR 0 3
50949: PUSH
50950: LD_VAR 0 1
50954: PPUSH
50955: CALL_OW 255
50959: ST_TO_ADDR
// nat := GetNation ( unit ) ;
50960: LD_ADDR_VAR 0 4
50964: PUSH
50965: LD_VAR 0 1
50969: PPUSH
50970: CALL_OW 248
50974: ST_TO_ADDR
// case nat of 1 :
50975: LD_VAR 0 4
50979: PUSH
50980: LD_INT 1
50982: DOUBLE
50983: EQUAL
50984: IFTRUE 50988
50986: GO 50999
50988: POP
// tech := tech_lassight ; 2 :
50989: LD_ADDR_VAR 0 5
50993: PUSH
50994: LD_INT 12
50996: ST_TO_ADDR
50997: GO 51038
50999: LD_INT 2
51001: DOUBLE
51002: EQUAL
51003: IFTRUE 51007
51005: GO 51018
51007: POP
// tech := tech_mortar ; 3 :
51008: LD_ADDR_VAR 0 5
51012: PUSH
51013: LD_INT 41
51015: ST_TO_ADDR
51016: GO 51038
51018: LD_INT 3
51020: DOUBLE
51021: EQUAL
51022: IFTRUE 51026
51024: GO 51037
51026: POP
// tech := tech_bazooka ; end ;
51027: LD_ADDR_VAR 0 5
51031: PUSH
51032: LD_INT 44
51034: ST_TO_ADDR
51035: GO 51038
51037: POP
// if Researched ( side , tech ) then
51038: LD_VAR 0 3
51042: PPUSH
51043: LD_VAR 0 5
51047: PPUSH
51048: CALL_OW 325
51052: IFFALSE 51079
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
51054: LD_ADDR_VAR 0 2
51058: PUSH
51059: LD_INT 5
51061: PUSH
51062: LD_INT 8
51064: PUSH
51065: LD_INT 9
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: PUSH
51073: LD_VAR 0 4
51077: ARRAY
51078: ST_TO_ADDR
// end ;
51079: LD_VAR 0 2
51083: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
51084: LD_INT 0
51086: PPUSH
51087: PPUSH
51088: PPUSH
// if not mines then
51089: LD_VAR 0 2
51093: NOT
51094: IFFALSE 51098
// exit ;
51096: GO 51242
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51098: LD_ADDR_VAR 0 5
51102: PUSH
51103: LD_INT 81
51105: PUSH
51106: LD_VAR 0 1
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: LD_INT 21
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PPUSH
51136: CALL_OW 69
51140: ST_TO_ADDR
// for i in mines do
51141: LD_ADDR_VAR 0 4
51145: PUSH
51146: LD_VAR 0 2
51150: PUSH
51151: FOR_IN
51152: IFFALSE 51240
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
51154: LD_VAR 0 4
51158: PUSH
51159: LD_INT 1
51161: ARRAY
51162: PPUSH
51163: LD_VAR 0 4
51167: PUSH
51168: LD_INT 2
51170: ARRAY
51171: PPUSH
51172: CALL_OW 458
51176: NOT
51177: IFFALSE 51181
// continue ;
51179: GO 51151
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
51181: LD_VAR 0 4
51185: PUSH
51186: LD_INT 1
51188: ARRAY
51189: PPUSH
51190: LD_VAR 0 4
51194: PUSH
51195: LD_INT 2
51197: ARRAY
51198: PPUSH
51199: CALL_OW 428
51203: PUSH
51204: LD_VAR 0 5
51208: IN
51209: IFFALSE 51238
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
51211: LD_VAR 0 4
51215: PUSH
51216: LD_INT 1
51218: ARRAY
51219: PPUSH
51220: LD_VAR 0 4
51224: PUSH
51225: LD_INT 2
51227: ARRAY
51228: PPUSH
51229: LD_VAR 0 1
51233: PPUSH
51234: CALL_OW 456
// end ;
51238: GO 51151
51240: POP
51241: POP
// end ;
51242: LD_VAR 0 3
51246: RET
// export function Count ( array ) ; var i ; begin
51247: LD_INT 0
51249: PPUSH
51250: PPUSH
// result := 0 ;
51251: LD_ADDR_VAR 0 2
51255: PUSH
51256: LD_INT 0
51258: ST_TO_ADDR
// for i in array do
51259: LD_ADDR_VAR 0 3
51263: PUSH
51264: LD_VAR 0 1
51268: PUSH
51269: FOR_IN
51270: IFFALSE 51294
// if i then
51272: LD_VAR 0 3
51276: IFFALSE 51292
// result := result + 1 ;
51278: LD_ADDR_VAR 0 2
51282: PUSH
51283: LD_VAR 0 2
51287: PUSH
51288: LD_INT 1
51290: PLUS
51291: ST_TO_ADDR
51292: GO 51269
51294: POP
51295: POP
// end ;
51296: LD_VAR 0 2
51300: RET
// export function IsEmpty ( building ) ; begin
51301: LD_INT 0
51303: PPUSH
// if not building then
51304: LD_VAR 0 1
51308: NOT
51309: IFFALSE 51313
// exit ;
51311: GO 51356
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
51313: LD_ADDR_VAR 0 2
51317: PUSH
51318: LD_VAR 0 1
51322: PUSH
51323: LD_INT 22
51325: PUSH
51326: LD_VAR 0 1
51330: PPUSH
51331: CALL_OW 255
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 58
51342: PUSH
51343: EMPTY
51344: LIST
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PPUSH
51350: CALL_OW 69
51354: IN
51355: ST_TO_ADDR
// end ;
51356: LD_VAR 0 2
51360: RET
// export function IsNotFull ( building ) ; var places ; begin
51361: LD_INT 0
51363: PPUSH
51364: PPUSH
// if not building then
51365: LD_VAR 0 1
51369: NOT
51370: IFFALSE 51374
// exit ;
51372: GO 51545
// result := false ;
51374: LD_ADDR_VAR 0 2
51378: PUSH
51379: LD_INT 0
51381: ST_TO_ADDR
// places := 0 ;
51382: LD_ADDR_VAR 0 3
51386: PUSH
51387: LD_INT 0
51389: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
51390: LD_VAR 0 1
51394: PPUSH
51395: CALL_OW 266
51399: PUSH
51400: LD_INT 0
51402: DOUBLE
51403: EQUAL
51404: IFTRUE 51462
51406: LD_INT 1
51408: DOUBLE
51409: EQUAL
51410: IFTRUE 51462
51412: LD_INT 6
51414: DOUBLE
51415: EQUAL
51416: IFTRUE 51462
51418: LD_INT 7
51420: DOUBLE
51421: EQUAL
51422: IFTRUE 51462
51424: LD_INT 8
51426: DOUBLE
51427: EQUAL
51428: IFTRUE 51462
51430: LD_INT 4
51432: DOUBLE
51433: EQUAL
51434: IFTRUE 51462
51436: LD_INT 5
51438: DOUBLE
51439: EQUAL
51440: IFTRUE 51462
51442: LD_INT 2
51444: DOUBLE
51445: EQUAL
51446: IFTRUE 51462
51448: LD_INT 3
51450: DOUBLE
51451: EQUAL
51452: IFTRUE 51462
51454: LD_INT 35
51456: DOUBLE
51457: EQUAL
51458: IFTRUE 51462
51460: GO 51473
51462: POP
// places := 6 ; b_bunker , b_breastwork :
51463: LD_ADDR_VAR 0 3
51467: PUSH
51468: LD_INT 6
51470: ST_TO_ADDR
51471: GO 51518
51473: LD_INT 32
51475: DOUBLE
51476: EQUAL
51477: IFTRUE 51487
51479: LD_INT 31
51481: DOUBLE
51482: EQUAL
51483: IFTRUE 51487
51485: GO 51498
51487: POP
// places := 1 ; b_control_tower :
51488: LD_ADDR_VAR 0 3
51492: PUSH
51493: LD_INT 1
51495: ST_TO_ADDR
51496: GO 51518
51498: LD_INT 36
51500: DOUBLE
51501: EQUAL
51502: IFTRUE 51506
51504: GO 51517
51506: POP
// places := 3 ; end ;
51507: LD_ADDR_VAR 0 3
51511: PUSH
51512: LD_INT 3
51514: ST_TO_ADDR
51515: GO 51518
51517: POP
// if places then
51518: LD_VAR 0 3
51522: IFFALSE 51545
// result := UnitsInside ( building ) < places ;
51524: LD_ADDR_VAR 0 2
51528: PUSH
51529: LD_VAR 0 1
51533: PPUSH
51534: CALL_OW 313
51538: PUSH
51539: LD_VAR 0 3
51543: LESS
51544: ST_TO_ADDR
// end ;
51545: LD_VAR 0 2
51549: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
51550: LD_INT 0
51552: PPUSH
51553: PPUSH
51554: PPUSH
51555: PPUSH
// tmp := [ ] ;
51556: LD_ADDR_VAR 0 3
51560: PUSH
51561: EMPTY
51562: ST_TO_ADDR
// list := [ ] ;
51563: LD_ADDR_VAR 0 5
51567: PUSH
51568: EMPTY
51569: ST_TO_ADDR
// for i = 16 to 25 do
51570: LD_ADDR_VAR 0 4
51574: PUSH
51575: DOUBLE
51576: LD_INT 16
51578: DEC
51579: ST_TO_ADDR
51580: LD_INT 25
51582: PUSH
51583: FOR_TO
51584: IFFALSE 51657
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
51586: LD_ADDR_VAR 0 3
51590: PUSH
51591: LD_VAR 0 3
51595: PUSH
51596: LD_INT 22
51598: PUSH
51599: LD_VAR 0 1
51603: PPUSH
51604: CALL_OW 255
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 91
51615: PUSH
51616: LD_VAR 0 1
51620: PUSH
51621: LD_INT 6
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: LIST
51628: PUSH
51629: LD_INT 30
51631: PUSH
51632: LD_VAR 0 4
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: PPUSH
51649: CALL_OW 69
51653: ADD
51654: ST_TO_ADDR
51655: GO 51583
51657: POP
51658: POP
// for i = 1 to tmp do
51659: LD_ADDR_VAR 0 4
51663: PUSH
51664: DOUBLE
51665: LD_INT 1
51667: DEC
51668: ST_TO_ADDR
51669: LD_VAR 0 3
51673: PUSH
51674: FOR_TO
51675: IFFALSE 51763
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
51677: LD_ADDR_VAR 0 5
51681: PUSH
51682: LD_VAR 0 5
51686: PUSH
51687: LD_VAR 0 3
51691: PUSH
51692: LD_VAR 0 4
51696: ARRAY
51697: PPUSH
51698: CALL_OW 266
51702: PUSH
51703: LD_VAR 0 3
51707: PUSH
51708: LD_VAR 0 4
51712: ARRAY
51713: PPUSH
51714: CALL_OW 250
51718: PUSH
51719: LD_VAR 0 3
51723: PUSH
51724: LD_VAR 0 4
51728: ARRAY
51729: PPUSH
51730: CALL_OW 251
51734: PUSH
51735: LD_VAR 0 3
51739: PUSH
51740: LD_VAR 0 4
51744: ARRAY
51745: PPUSH
51746: CALL_OW 254
51750: PUSH
51751: EMPTY
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: PUSH
51757: EMPTY
51758: LIST
51759: ADD
51760: ST_TO_ADDR
51761: GO 51674
51763: POP
51764: POP
// result := list ;
51765: LD_ADDR_VAR 0 2
51769: PUSH
51770: LD_VAR 0 5
51774: ST_TO_ADDR
// end ;
51775: LD_VAR 0 2
51779: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
51780: LD_INT 0
51782: PPUSH
51783: PPUSH
51784: PPUSH
51785: PPUSH
51786: PPUSH
51787: PPUSH
51788: PPUSH
// if not factory then
51789: LD_VAR 0 1
51793: NOT
51794: IFFALSE 51798
// exit ;
51796: GO 52391
// if control = control_apeman then
51798: LD_VAR 0 4
51802: PUSH
51803: LD_INT 5
51805: EQUAL
51806: IFFALSE 51915
// begin tmp := UnitsInside ( factory ) ;
51808: LD_ADDR_VAR 0 8
51812: PUSH
51813: LD_VAR 0 1
51817: PPUSH
51818: CALL_OW 313
51822: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
51823: LD_VAR 0 8
51827: PPUSH
51828: LD_INT 25
51830: PUSH
51831: LD_INT 12
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PPUSH
51838: CALL_OW 72
51842: NOT
51843: IFFALSE 51853
// control := control_manual ;
51845: LD_ADDR_VAR 0 4
51849: PUSH
51850: LD_INT 1
51852: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
51853: LD_ADDR_VAR 0 8
51857: PUSH
51858: LD_VAR 0 1
51862: PPUSH
51863: CALL 51550 0 1
51867: ST_TO_ADDR
// if tmp then
51868: LD_VAR 0 8
51872: IFFALSE 51915
// begin for i in tmp do
51874: LD_ADDR_VAR 0 7
51878: PUSH
51879: LD_VAR 0 8
51883: PUSH
51884: FOR_IN
51885: IFFALSE 51913
// if i [ 1 ] = b_ext_radio then
51887: LD_VAR 0 7
51891: PUSH
51892: LD_INT 1
51894: ARRAY
51895: PUSH
51896: LD_INT 22
51898: EQUAL
51899: IFFALSE 51911
// begin control := control_remote ;
51901: LD_ADDR_VAR 0 4
51905: PUSH
51906: LD_INT 2
51908: ST_TO_ADDR
// break ;
51909: GO 51913
// end ;
51911: GO 51884
51913: POP
51914: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
51915: LD_VAR 0 1
51919: PPUSH
51920: LD_VAR 0 2
51924: PPUSH
51925: LD_VAR 0 3
51929: PPUSH
51930: LD_VAR 0 4
51934: PPUSH
51935: LD_VAR 0 5
51939: PPUSH
51940: CALL_OW 448
51944: IFFALSE 51979
// begin result := [ chassis , engine , control , weapon ] ;
51946: LD_ADDR_VAR 0 6
51950: PUSH
51951: LD_VAR 0 2
51955: PUSH
51956: LD_VAR 0 3
51960: PUSH
51961: LD_VAR 0 4
51965: PUSH
51966: LD_VAR 0 5
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: ST_TO_ADDR
// exit ;
51977: GO 52391
// end ; _chassis := AvailableChassisList ( factory ) ;
51979: LD_ADDR_VAR 0 9
51983: PUSH
51984: LD_VAR 0 1
51988: PPUSH
51989: CALL_OW 475
51993: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
51994: LD_ADDR_VAR 0 11
51998: PUSH
51999: LD_VAR 0 1
52003: PPUSH
52004: CALL_OW 476
52008: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
52009: LD_ADDR_VAR 0 12
52013: PUSH
52014: LD_VAR 0 1
52018: PPUSH
52019: CALL_OW 477
52023: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
52024: LD_ADDR_VAR 0 10
52028: PUSH
52029: LD_VAR 0 1
52033: PPUSH
52034: CALL_OW 478
52038: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
52039: LD_VAR 0 9
52043: NOT
52044: PUSH
52045: LD_VAR 0 11
52049: NOT
52050: OR
52051: PUSH
52052: LD_VAR 0 12
52056: NOT
52057: OR
52058: PUSH
52059: LD_VAR 0 10
52063: NOT
52064: OR
52065: IFFALSE 52100
// begin result := [ chassis , engine , control , weapon ] ;
52067: LD_ADDR_VAR 0 6
52071: PUSH
52072: LD_VAR 0 2
52076: PUSH
52077: LD_VAR 0 3
52081: PUSH
52082: LD_VAR 0 4
52086: PUSH
52087: LD_VAR 0 5
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: ST_TO_ADDR
// exit ;
52098: GO 52391
// end ; if not chassis in _chassis then
52100: LD_VAR 0 2
52104: PUSH
52105: LD_VAR 0 9
52109: IN
52110: NOT
52111: IFFALSE 52137
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
52113: LD_ADDR_VAR 0 2
52117: PUSH
52118: LD_VAR 0 9
52122: PUSH
52123: LD_INT 1
52125: PPUSH
52126: LD_VAR 0 9
52130: PPUSH
52131: CALL_OW 12
52135: ARRAY
52136: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
52137: LD_VAR 0 2
52141: PPUSH
52142: LD_VAR 0 3
52146: PPUSH
52147: CALL 52396 0 2
52151: NOT
52152: IFFALSE 52211
// repeat engine := _engine [ 1 ] ;
52154: LD_ADDR_VAR 0 3
52158: PUSH
52159: LD_VAR 0 11
52163: PUSH
52164: LD_INT 1
52166: ARRAY
52167: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
52168: LD_ADDR_VAR 0 11
52172: PUSH
52173: LD_VAR 0 11
52177: PPUSH
52178: LD_INT 1
52180: PPUSH
52181: CALL_OW 3
52185: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
52186: LD_VAR 0 2
52190: PPUSH
52191: LD_VAR 0 3
52195: PPUSH
52196: CALL 52396 0 2
52200: PUSH
52201: LD_VAR 0 11
52205: PUSH
52206: EMPTY
52207: EQUAL
52208: OR
52209: IFFALSE 52154
// if not control in _control then
52211: LD_VAR 0 4
52215: PUSH
52216: LD_VAR 0 12
52220: IN
52221: NOT
52222: IFFALSE 52248
// control := _control [ rand ( 1 , _control ) ] ;
52224: LD_ADDR_VAR 0 4
52228: PUSH
52229: LD_VAR 0 12
52233: PUSH
52234: LD_INT 1
52236: PPUSH
52237: LD_VAR 0 12
52241: PPUSH
52242: CALL_OW 12
52246: ARRAY
52247: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
52248: LD_VAR 0 2
52252: PPUSH
52253: LD_VAR 0 5
52257: PPUSH
52258: CALL 52616 0 2
52262: NOT
52263: IFFALSE 52322
// repeat weapon := _weapon [ 1 ] ;
52265: LD_ADDR_VAR 0 5
52269: PUSH
52270: LD_VAR 0 10
52274: PUSH
52275: LD_INT 1
52277: ARRAY
52278: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
52279: LD_ADDR_VAR 0 10
52283: PUSH
52284: LD_VAR 0 10
52288: PPUSH
52289: LD_INT 1
52291: PPUSH
52292: CALL_OW 3
52296: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
52297: LD_VAR 0 2
52301: PPUSH
52302: LD_VAR 0 5
52306: PPUSH
52307: CALL 52616 0 2
52311: PUSH
52312: LD_VAR 0 10
52316: PUSH
52317: EMPTY
52318: EQUAL
52319: OR
52320: IFFALSE 52265
// result := [ ] ;
52322: LD_ADDR_VAR 0 6
52326: PUSH
52327: EMPTY
52328: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52329: LD_VAR 0 1
52333: PPUSH
52334: LD_VAR 0 2
52338: PPUSH
52339: LD_VAR 0 3
52343: PPUSH
52344: LD_VAR 0 4
52348: PPUSH
52349: LD_VAR 0 5
52353: PPUSH
52354: CALL_OW 448
52358: IFFALSE 52391
// result := [ chassis , engine , control , weapon ] ;
52360: LD_ADDR_VAR 0 6
52364: PUSH
52365: LD_VAR 0 2
52369: PUSH
52370: LD_VAR 0 3
52374: PUSH
52375: LD_VAR 0 4
52379: PUSH
52380: LD_VAR 0 5
52384: PUSH
52385: EMPTY
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: ST_TO_ADDR
// end ;
52391: LD_VAR 0 6
52395: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
52396: LD_INT 0
52398: PPUSH
// if not chassis or not engine then
52399: LD_VAR 0 1
52403: NOT
52404: PUSH
52405: LD_VAR 0 2
52409: NOT
52410: OR
52411: IFFALSE 52415
// exit ;
52413: GO 52611
// case engine of engine_solar :
52415: LD_VAR 0 2
52419: PUSH
52420: LD_INT 2
52422: DOUBLE
52423: EQUAL
52424: IFTRUE 52428
52426: GO 52466
52428: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
52429: LD_ADDR_VAR 0 3
52433: PUSH
52434: LD_INT 11
52436: PUSH
52437: LD_INT 12
52439: PUSH
52440: LD_INT 13
52442: PUSH
52443: LD_INT 14
52445: PUSH
52446: LD_INT 1
52448: PUSH
52449: LD_INT 2
52451: PUSH
52452: LD_INT 3
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: ST_TO_ADDR
52464: GO 52595
52466: LD_INT 1
52468: DOUBLE
52469: EQUAL
52470: IFTRUE 52474
52472: GO 52536
52474: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
52475: LD_ADDR_VAR 0 3
52479: PUSH
52480: LD_INT 11
52482: PUSH
52483: LD_INT 12
52485: PUSH
52486: LD_INT 13
52488: PUSH
52489: LD_INT 14
52491: PUSH
52492: LD_INT 1
52494: PUSH
52495: LD_INT 2
52497: PUSH
52498: LD_INT 3
52500: PUSH
52501: LD_INT 4
52503: PUSH
52504: LD_INT 5
52506: PUSH
52507: LD_INT 21
52509: PUSH
52510: LD_INT 23
52512: PUSH
52513: LD_INT 22
52515: PUSH
52516: LD_INT 24
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: ST_TO_ADDR
52534: GO 52595
52536: LD_INT 3
52538: DOUBLE
52539: EQUAL
52540: IFTRUE 52544
52542: GO 52594
52544: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
52545: LD_ADDR_VAR 0 3
52549: PUSH
52550: LD_INT 13
52552: PUSH
52553: LD_INT 14
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: LD_INT 3
52561: PUSH
52562: LD_INT 4
52564: PUSH
52565: LD_INT 5
52567: PUSH
52568: LD_INT 21
52570: PUSH
52571: LD_INT 22
52573: PUSH
52574: LD_INT 23
52576: PUSH
52577: LD_INT 24
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: ST_TO_ADDR
52592: GO 52595
52594: POP
// result := ( chassis in result ) ;
52595: LD_ADDR_VAR 0 3
52599: PUSH
52600: LD_VAR 0 1
52604: PUSH
52605: LD_VAR 0 3
52609: IN
52610: ST_TO_ADDR
// end ;
52611: LD_VAR 0 3
52615: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
52616: LD_INT 0
52618: PPUSH
// if not chassis or not weapon then
52619: LD_VAR 0 1
52623: NOT
52624: PUSH
52625: LD_VAR 0 2
52629: NOT
52630: OR
52631: IFFALSE 52635
// exit ;
52633: GO 53697
// case weapon of us_machine_gun :
52635: LD_VAR 0 2
52639: PUSH
52640: LD_INT 2
52642: DOUBLE
52643: EQUAL
52644: IFTRUE 52648
52646: GO 52678
52648: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
52649: LD_ADDR_VAR 0 3
52653: PUSH
52654: LD_INT 1
52656: PUSH
52657: LD_INT 2
52659: PUSH
52660: LD_INT 3
52662: PUSH
52663: LD_INT 4
52665: PUSH
52666: LD_INT 5
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: LIST
52673: LIST
52674: LIST
52675: ST_TO_ADDR
52676: GO 53681
52678: LD_INT 3
52680: DOUBLE
52681: EQUAL
52682: IFTRUE 52686
52684: GO 52716
52686: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
52687: LD_ADDR_VAR 0 3
52691: PUSH
52692: LD_INT 1
52694: PUSH
52695: LD_INT 2
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: LD_INT 4
52703: PUSH
52704: LD_INT 5
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: ST_TO_ADDR
52714: GO 53681
52716: LD_INT 11
52718: DOUBLE
52719: EQUAL
52720: IFTRUE 52724
52722: GO 52754
52724: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
52725: LD_ADDR_VAR 0 3
52729: PUSH
52730: LD_INT 1
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: LD_INT 3
52738: PUSH
52739: LD_INT 4
52741: PUSH
52742: LD_INT 5
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: LIST
52751: ST_TO_ADDR
52752: GO 53681
52754: LD_INT 4
52756: DOUBLE
52757: EQUAL
52758: IFTRUE 52762
52760: GO 52788
52762: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
52763: LD_ADDR_VAR 0 3
52767: PUSH
52768: LD_INT 2
52770: PUSH
52771: LD_INT 3
52773: PUSH
52774: LD_INT 4
52776: PUSH
52777: LD_INT 5
52779: PUSH
52780: EMPTY
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: ST_TO_ADDR
52786: GO 53681
52788: LD_INT 5
52790: DOUBLE
52791: EQUAL
52792: IFTRUE 52796
52794: GO 52822
52796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
52797: LD_ADDR_VAR 0 3
52801: PUSH
52802: LD_INT 2
52804: PUSH
52805: LD_INT 3
52807: PUSH
52808: LD_INT 4
52810: PUSH
52811: LD_INT 5
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: LIST
52818: LIST
52819: ST_TO_ADDR
52820: GO 53681
52822: LD_INT 9
52824: DOUBLE
52825: EQUAL
52826: IFTRUE 52830
52828: GO 52856
52830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
52831: LD_ADDR_VAR 0 3
52835: PUSH
52836: LD_INT 2
52838: PUSH
52839: LD_INT 3
52841: PUSH
52842: LD_INT 4
52844: PUSH
52845: LD_INT 5
52847: PUSH
52848: EMPTY
52849: LIST
52850: LIST
52851: LIST
52852: LIST
52853: ST_TO_ADDR
52854: GO 53681
52856: LD_INT 7
52858: DOUBLE
52859: EQUAL
52860: IFTRUE 52864
52862: GO 52890
52864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
52865: LD_ADDR_VAR 0 3
52869: PUSH
52870: LD_INT 2
52872: PUSH
52873: LD_INT 3
52875: PUSH
52876: LD_INT 4
52878: PUSH
52879: LD_INT 5
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: ST_TO_ADDR
52888: GO 53681
52890: LD_INT 12
52892: DOUBLE
52893: EQUAL
52894: IFTRUE 52898
52896: GO 52924
52898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
52899: LD_ADDR_VAR 0 3
52903: PUSH
52904: LD_INT 2
52906: PUSH
52907: LD_INT 3
52909: PUSH
52910: LD_INT 4
52912: PUSH
52913: LD_INT 5
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: ST_TO_ADDR
52922: GO 53681
52924: LD_INT 13
52926: DOUBLE
52927: EQUAL
52928: IFTRUE 52932
52930: GO 52958
52932: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
52933: LD_ADDR_VAR 0 3
52937: PUSH
52938: LD_INT 2
52940: PUSH
52941: LD_INT 3
52943: PUSH
52944: LD_INT 4
52946: PUSH
52947: LD_INT 5
52949: PUSH
52950: EMPTY
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: ST_TO_ADDR
52956: GO 53681
52958: LD_INT 14
52960: DOUBLE
52961: EQUAL
52962: IFTRUE 52966
52964: GO 52984
52966: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
52967: LD_ADDR_VAR 0 3
52971: PUSH
52972: LD_INT 4
52974: PUSH
52975: LD_INT 5
52977: PUSH
52978: EMPTY
52979: LIST
52980: LIST
52981: ST_TO_ADDR
52982: GO 53681
52984: LD_INT 6
52986: DOUBLE
52987: EQUAL
52988: IFTRUE 52992
52990: GO 53010
52992: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
52993: LD_ADDR_VAR 0 3
52997: PUSH
52998: LD_INT 4
53000: PUSH
53001: LD_INT 5
53003: PUSH
53004: EMPTY
53005: LIST
53006: LIST
53007: ST_TO_ADDR
53008: GO 53681
53010: LD_INT 10
53012: DOUBLE
53013: EQUAL
53014: IFTRUE 53018
53016: GO 53036
53018: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
53019: LD_ADDR_VAR 0 3
53023: PUSH
53024: LD_INT 4
53026: PUSH
53027: LD_INT 5
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: ST_TO_ADDR
53034: GO 53681
53036: LD_INT 22
53038: DOUBLE
53039: EQUAL
53040: IFTRUE 53044
53042: GO 53070
53044: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
53045: LD_ADDR_VAR 0 3
53049: PUSH
53050: LD_INT 11
53052: PUSH
53053: LD_INT 12
53055: PUSH
53056: LD_INT 13
53058: PUSH
53059: LD_INT 14
53061: PUSH
53062: EMPTY
53063: LIST
53064: LIST
53065: LIST
53066: LIST
53067: ST_TO_ADDR
53068: GO 53681
53070: LD_INT 23
53072: DOUBLE
53073: EQUAL
53074: IFTRUE 53078
53076: GO 53104
53078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
53079: LD_ADDR_VAR 0 3
53083: PUSH
53084: LD_INT 11
53086: PUSH
53087: LD_INT 12
53089: PUSH
53090: LD_INT 13
53092: PUSH
53093: LD_INT 14
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: ST_TO_ADDR
53102: GO 53681
53104: LD_INT 24
53106: DOUBLE
53107: EQUAL
53108: IFTRUE 53112
53110: GO 53138
53112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
53113: LD_ADDR_VAR 0 3
53117: PUSH
53118: LD_INT 11
53120: PUSH
53121: LD_INT 12
53123: PUSH
53124: LD_INT 13
53126: PUSH
53127: LD_INT 14
53129: PUSH
53130: EMPTY
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: ST_TO_ADDR
53136: GO 53681
53138: LD_INT 30
53140: DOUBLE
53141: EQUAL
53142: IFTRUE 53146
53144: GO 53172
53146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
53147: LD_ADDR_VAR 0 3
53151: PUSH
53152: LD_INT 11
53154: PUSH
53155: LD_INT 12
53157: PUSH
53158: LD_INT 13
53160: PUSH
53161: LD_INT 14
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: ST_TO_ADDR
53170: GO 53681
53172: LD_INT 25
53174: DOUBLE
53175: EQUAL
53176: IFTRUE 53180
53178: GO 53198
53180: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
53181: LD_ADDR_VAR 0 3
53185: PUSH
53186: LD_INT 13
53188: PUSH
53189: LD_INT 14
53191: PUSH
53192: EMPTY
53193: LIST
53194: LIST
53195: ST_TO_ADDR
53196: GO 53681
53198: LD_INT 27
53200: DOUBLE
53201: EQUAL
53202: IFTRUE 53206
53204: GO 53224
53206: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
53207: LD_ADDR_VAR 0 3
53211: PUSH
53212: LD_INT 13
53214: PUSH
53215: LD_INT 14
53217: PUSH
53218: EMPTY
53219: LIST
53220: LIST
53221: ST_TO_ADDR
53222: GO 53681
53224: LD_EXP 75
53228: DOUBLE
53229: EQUAL
53230: IFTRUE 53234
53232: GO 53260
53234: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
53235: LD_ADDR_VAR 0 3
53239: PUSH
53240: LD_INT 11
53242: PUSH
53243: LD_INT 12
53245: PUSH
53246: LD_INT 13
53248: PUSH
53249: LD_INT 14
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: ST_TO_ADDR
53258: GO 53681
53260: LD_INT 28
53262: DOUBLE
53263: EQUAL
53264: IFTRUE 53268
53266: GO 53286
53268: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
53269: LD_ADDR_VAR 0 3
53273: PUSH
53274: LD_INT 13
53276: PUSH
53277: LD_INT 14
53279: PUSH
53280: EMPTY
53281: LIST
53282: LIST
53283: ST_TO_ADDR
53284: GO 53681
53286: LD_INT 29
53288: DOUBLE
53289: EQUAL
53290: IFTRUE 53294
53292: GO 53312
53294: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
53295: LD_ADDR_VAR 0 3
53299: PUSH
53300: LD_INT 13
53302: PUSH
53303: LD_INT 14
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: ST_TO_ADDR
53310: GO 53681
53312: LD_INT 31
53314: DOUBLE
53315: EQUAL
53316: IFTRUE 53320
53318: GO 53338
53320: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
53321: LD_ADDR_VAR 0 3
53325: PUSH
53326: LD_INT 13
53328: PUSH
53329: LD_INT 14
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: ST_TO_ADDR
53336: GO 53681
53338: LD_INT 26
53340: DOUBLE
53341: EQUAL
53342: IFTRUE 53346
53344: GO 53364
53346: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
53347: LD_ADDR_VAR 0 3
53351: PUSH
53352: LD_INT 13
53354: PUSH
53355: LD_INT 14
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: ST_TO_ADDR
53362: GO 53681
53364: LD_INT 42
53366: DOUBLE
53367: EQUAL
53368: IFTRUE 53372
53370: GO 53398
53372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
53373: LD_ADDR_VAR 0 3
53377: PUSH
53378: LD_INT 21
53380: PUSH
53381: LD_INT 22
53383: PUSH
53384: LD_INT 23
53386: PUSH
53387: LD_INT 24
53389: PUSH
53390: EMPTY
53391: LIST
53392: LIST
53393: LIST
53394: LIST
53395: ST_TO_ADDR
53396: GO 53681
53398: LD_INT 43
53400: DOUBLE
53401: EQUAL
53402: IFTRUE 53406
53404: GO 53432
53406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
53407: LD_ADDR_VAR 0 3
53411: PUSH
53412: LD_INT 21
53414: PUSH
53415: LD_INT 22
53417: PUSH
53418: LD_INT 23
53420: PUSH
53421: LD_INT 24
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: ST_TO_ADDR
53430: GO 53681
53432: LD_INT 44
53434: DOUBLE
53435: EQUAL
53436: IFTRUE 53440
53438: GO 53466
53440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
53441: LD_ADDR_VAR 0 3
53445: PUSH
53446: LD_INT 21
53448: PUSH
53449: LD_INT 22
53451: PUSH
53452: LD_INT 23
53454: PUSH
53455: LD_INT 24
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: ST_TO_ADDR
53464: GO 53681
53466: LD_INT 45
53468: DOUBLE
53469: EQUAL
53470: IFTRUE 53474
53472: GO 53500
53474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
53475: LD_ADDR_VAR 0 3
53479: PUSH
53480: LD_INT 21
53482: PUSH
53483: LD_INT 22
53485: PUSH
53486: LD_INT 23
53488: PUSH
53489: LD_INT 24
53491: PUSH
53492: EMPTY
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: ST_TO_ADDR
53498: GO 53681
53500: LD_INT 49
53502: DOUBLE
53503: EQUAL
53504: IFTRUE 53508
53506: GO 53534
53508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
53509: LD_ADDR_VAR 0 3
53513: PUSH
53514: LD_INT 21
53516: PUSH
53517: LD_INT 22
53519: PUSH
53520: LD_INT 23
53522: PUSH
53523: LD_INT 24
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: ST_TO_ADDR
53532: GO 53681
53534: LD_INT 51
53536: DOUBLE
53537: EQUAL
53538: IFTRUE 53542
53540: GO 53568
53542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
53543: LD_ADDR_VAR 0 3
53547: PUSH
53548: LD_INT 21
53550: PUSH
53551: LD_INT 22
53553: PUSH
53554: LD_INT 23
53556: PUSH
53557: LD_INT 24
53559: PUSH
53560: EMPTY
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: ST_TO_ADDR
53566: GO 53681
53568: LD_INT 52
53570: DOUBLE
53571: EQUAL
53572: IFTRUE 53576
53574: GO 53602
53576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
53577: LD_ADDR_VAR 0 3
53581: PUSH
53582: LD_INT 21
53584: PUSH
53585: LD_INT 22
53587: PUSH
53588: LD_INT 23
53590: PUSH
53591: LD_INT 24
53593: PUSH
53594: EMPTY
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: ST_TO_ADDR
53600: GO 53681
53602: LD_INT 53
53604: DOUBLE
53605: EQUAL
53606: IFTRUE 53610
53608: GO 53628
53610: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
53611: LD_ADDR_VAR 0 3
53615: PUSH
53616: LD_INT 23
53618: PUSH
53619: LD_INT 24
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: ST_TO_ADDR
53626: GO 53681
53628: LD_INT 46
53630: DOUBLE
53631: EQUAL
53632: IFTRUE 53636
53634: GO 53654
53636: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
53637: LD_ADDR_VAR 0 3
53641: PUSH
53642: LD_INT 23
53644: PUSH
53645: LD_INT 24
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: ST_TO_ADDR
53652: GO 53681
53654: LD_INT 47
53656: DOUBLE
53657: EQUAL
53658: IFTRUE 53662
53660: GO 53680
53662: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53663: LD_ADDR_VAR 0 3
53667: PUSH
53668: LD_INT 23
53670: PUSH
53671: LD_INT 24
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: ST_TO_ADDR
53678: GO 53681
53680: POP
// result := ( chassis in result ) ;
53681: LD_ADDR_VAR 0 3
53685: PUSH
53686: LD_VAR 0 1
53690: PUSH
53691: LD_VAR 0 3
53695: IN
53696: ST_TO_ADDR
// end ;
53697: LD_VAR 0 3
53701: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
53702: LD_INT 0
53704: PPUSH
53705: PPUSH
53706: PPUSH
53707: PPUSH
53708: PPUSH
53709: PPUSH
53710: PPUSH
// result := array ;
53711: LD_ADDR_VAR 0 5
53715: PUSH
53716: LD_VAR 0 1
53720: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
53721: LD_VAR 0 1
53725: NOT
53726: PUSH
53727: LD_VAR 0 2
53731: NOT
53732: OR
53733: PUSH
53734: LD_VAR 0 3
53738: NOT
53739: OR
53740: PUSH
53741: LD_VAR 0 2
53745: PUSH
53746: LD_VAR 0 1
53750: GREATER
53751: OR
53752: PUSH
53753: LD_VAR 0 3
53757: PUSH
53758: LD_VAR 0 1
53762: GREATER
53763: OR
53764: IFFALSE 53768
// exit ;
53766: GO 54064
// if direction then
53768: LD_VAR 0 4
53772: IFFALSE 53836
// begin d := 1 ;
53774: LD_ADDR_VAR 0 9
53778: PUSH
53779: LD_INT 1
53781: ST_TO_ADDR
// if i_from > i_to then
53782: LD_VAR 0 2
53786: PUSH
53787: LD_VAR 0 3
53791: GREATER
53792: IFFALSE 53818
// length := ( array - i_from ) + i_to else
53794: LD_ADDR_VAR 0 11
53798: PUSH
53799: LD_VAR 0 1
53803: PUSH
53804: LD_VAR 0 2
53808: MINUS
53809: PUSH
53810: LD_VAR 0 3
53814: PLUS
53815: ST_TO_ADDR
53816: GO 53834
// length := i_to - i_from ;
53818: LD_ADDR_VAR 0 11
53822: PUSH
53823: LD_VAR 0 3
53827: PUSH
53828: LD_VAR 0 2
53832: MINUS
53833: ST_TO_ADDR
// end else
53834: GO 53897
// begin d := - 1 ;
53836: LD_ADDR_VAR 0 9
53840: PUSH
53841: LD_INT 1
53843: NEG
53844: ST_TO_ADDR
// if i_from > i_to then
53845: LD_VAR 0 2
53849: PUSH
53850: LD_VAR 0 3
53854: GREATER
53855: IFFALSE 53875
// length := i_from - i_to else
53857: LD_ADDR_VAR 0 11
53861: PUSH
53862: LD_VAR 0 2
53866: PUSH
53867: LD_VAR 0 3
53871: MINUS
53872: ST_TO_ADDR
53873: GO 53897
// length := ( array - i_to ) + i_from ;
53875: LD_ADDR_VAR 0 11
53879: PUSH
53880: LD_VAR 0 1
53884: PUSH
53885: LD_VAR 0 3
53889: MINUS
53890: PUSH
53891: LD_VAR 0 2
53895: PLUS
53896: ST_TO_ADDR
// end ; if not length then
53897: LD_VAR 0 11
53901: NOT
53902: IFFALSE 53906
// exit ;
53904: GO 54064
// tmp := array ;
53906: LD_ADDR_VAR 0 10
53910: PUSH
53911: LD_VAR 0 1
53915: ST_TO_ADDR
// for i = 1 to length do
53916: LD_ADDR_VAR 0 6
53920: PUSH
53921: DOUBLE
53922: LD_INT 1
53924: DEC
53925: ST_TO_ADDR
53926: LD_VAR 0 11
53930: PUSH
53931: FOR_TO
53932: IFFALSE 54052
// begin for j = 1 to array do
53934: LD_ADDR_VAR 0 7
53938: PUSH
53939: DOUBLE
53940: LD_INT 1
53942: DEC
53943: ST_TO_ADDR
53944: LD_VAR 0 1
53948: PUSH
53949: FOR_TO
53950: IFFALSE 54038
// begin k := j + d ;
53952: LD_ADDR_VAR 0 8
53956: PUSH
53957: LD_VAR 0 7
53961: PUSH
53962: LD_VAR 0 9
53966: PLUS
53967: ST_TO_ADDR
// if k > array then
53968: LD_VAR 0 8
53972: PUSH
53973: LD_VAR 0 1
53977: GREATER
53978: IFFALSE 53988
// k := 1 ;
53980: LD_ADDR_VAR 0 8
53984: PUSH
53985: LD_INT 1
53987: ST_TO_ADDR
// if not k then
53988: LD_VAR 0 8
53992: NOT
53993: IFFALSE 54005
// k := array ;
53995: LD_ADDR_VAR 0 8
53999: PUSH
54000: LD_VAR 0 1
54004: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
54005: LD_ADDR_VAR 0 10
54009: PUSH
54010: LD_VAR 0 10
54014: PPUSH
54015: LD_VAR 0 8
54019: PPUSH
54020: LD_VAR 0 1
54024: PUSH
54025: LD_VAR 0 7
54029: ARRAY
54030: PPUSH
54031: CALL_OW 1
54035: ST_TO_ADDR
// end ;
54036: GO 53949
54038: POP
54039: POP
// array := tmp ;
54040: LD_ADDR_VAR 0 1
54044: PUSH
54045: LD_VAR 0 10
54049: ST_TO_ADDR
// end ;
54050: GO 53931
54052: POP
54053: POP
// result := array ;
54054: LD_ADDR_VAR 0 5
54058: PUSH
54059: LD_VAR 0 1
54063: ST_TO_ADDR
// end ;
54064: LD_VAR 0 5
54068: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
54069: LD_INT 0
54071: PPUSH
54072: PPUSH
// result := 0 ;
54073: LD_ADDR_VAR 0 3
54077: PUSH
54078: LD_INT 0
54080: ST_TO_ADDR
// if not array or not value in array then
54081: LD_VAR 0 1
54085: NOT
54086: PUSH
54087: LD_VAR 0 2
54091: PUSH
54092: LD_VAR 0 1
54096: IN
54097: NOT
54098: OR
54099: IFFALSE 54103
// exit ;
54101: GO 54157
// for i = 1 to array do
54103: LD_ADDR_VAR 0 4
54107: PUSH
54108: DOUBLE
54109: LD_INT 1
54111: DEC
54112: ST_TO_ADDR
54113: LD_VAR 0 1
54117: PUSH
54118: FOR_TO
54119: IFFALSE 54155
// if value = array [ i ] then
54121: LD_VAR 0 2
54125: PUSH
54126: LD_VAR 0 1
54130: PUSH
54131: LD_VAR 0 4
54135: ARRAY
54136: EQUAL
54137: IFFALSE 54153
// begin result := i ;
54139: LD_ADDR_VAR 0 3
54143: PUSH
54144: LD_VAR 0 4
54148: ST_TO_ADDR
// exit ;
54149: POP
54150: POP
54151: GO 54157
// end ;
54153: GO 54118
54155: POP
54156: POP
// end ;
54157: LD_VAR 0 3
54161: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
54162: LD_INT 0
54164: PPUSH
// vc_chassis := chassis ;
54165: LD_ADDR_OWVAR 37
54169: PUSH
54170: LD_VAR 0 1
54174: ST_TO_ADDR
// vc_engine := engine ;
54175: LD_ADDR_OWVAR 39
54179: PUSH
54180: LD_VAR 0 2
54184: ST_TO_ADDR
// vc_control := control ;
54185: LD_ADDR_OWVAR 38
54189: PUSH
54190: LD_VAR 0 3
54194: ST_TO_ADDR
// vc_weapon := weapon ;
54195: LD_ADDR_OWVAR 40
54199: PUSH
54200: LD_VAR 0 4
54204: ST_TO_ADDR
// vc_fuel_battery := fuel ;
54205: LD_ADDR_OWVAR 41
54209: PUSH
54210: LD_VAR 0 5
54214: ST_TO_ADDR
// end ;
54215: LD_VAR 0 6
54219: RET
// export function WantPlant ( unit ) ; var task ; begin
54220: LD_INT 0
54222: PPUSH
54223: PPUSH
// result := false ;
54224: LD_ADDR_VAR 0 2
54228: PUSH
54229: LD_INT 0
54231: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
54232: LD_ADDR_VAR 0 3
54236: PUSH
54237: LD_VAR 0 1
54241: PPUSH
54242: CALL_OW 437
54246: ST_TO_ADDR
// if task then
54247: LD_VAR 0 3
54251: IFFALSE 54279
// if task [ 1 ] [ 1 ] = p then
54253: LD_VAR 0 3
54257: PUSH
54258: LD_INT 1
54260: ARRAY
54261: PUSH
54262: LD_INT 1
54264: ARRAY
54265: PUSH
54266: LD_STRING p
54268: EQUAL
54269: IFFALSE 54279
// result := true ;
54271: LD_ADDR_VAR 0 2
54275: PUSH
54276: LD_INT 1
54278: ST_TO_ADDR
// end ;
54279: LD_VAR 0 2
54283: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
54284: LD_INT 0
54286: PPUSH
54287: PPUSH
54288: PPUSH
54289: PPUSH
// if pos < 1 then
54290: LD_VAR 0 2
54294: PUSH
54295: LD_INT 1
54297: LESS
54298: IFFALSE 54302
// exit ;
54300: GO 54605
// if pos = 1 then
54302: LD_VAR 0 2
54306: PUSH
54307: LD_INT 1
54309: EQUAL
54310: IFFALSE 54343
// result := Replace ( arr , pos [ 1 ] , value ) else
54312: LD_ADDR_VAR 0 4
54316: PUSH
54317: LD_VAR 0 1
54321: PPUSH
54322: LD_VAR 0 2
54326: PUSH
54327: LD_INT 1
54329: ARRAY
54330: PPUSH
54331: LD_VAR 0 3
54335: PPUSH
54336: CALL_OW 1
54340: ST_TO_ADDR
54341: GO 54605
// begin tmp := arr ;
54343: LD_ADDR_VAR 0 6
54347: PUSH
54348: LD_VAR 0 1
54352: ST_TO_ADDR
// s_arr := [ tmp ] ;
54353: LD_ADDR_VAR 0 7
54357: PUSH
54358: LD_VAR 0 6
54362: PUSH
54363: EMPTY
54364: LIST
54365: ST_TO_ADDR
// for i = 1 to pos - 1 do
54366: LD_ADDR_VAR 0 5
54370: PUSH
54371: DOUBLE
54372: LD_INT 1
54374: DEC
54375: ST_TO_ADDR
54376: LD_VAR 0 2
54380: PUSH
54381: LD_INT 1
54383: MINUS
54384: PUSH
54385: FOR_TO
54386: IFFALSE 54431
// begin tmp := tmp [ pos [ i ] ] ;
54388: LD_ADDR_VAR 0 6
54392: PUSH
54393: LD_VAR 0 6
54397: PUSH
54398: LD_VAR 0 2
54402: PUSH
54403: LD_VAR 0 5
54407: ARRAY
54408: ARRAY
54409: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
54410: LD_ADDR_VAR 0 7
54414: PUSH
54415: LD_VAR 0 7
54419: PUSH
54420: LD_VAR 0 6
54424: PUSH
54425: EMPTY
54426: LIST
54427: ADD
54428: ST_TO_ADDR
// end ;
54429: GO 54385
54431: POP
54432: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
54433: LD_ADDR_VAR 0 6
54437: PUSH
54438: LD_VAR 0 6
54442: PPUSH
54443: LD_VAR 0 2
54447: PUSH
54448: LD_VAR 0 2
54452: ARRAY
54453: PPUSH
54454: LD_VAR 0 3
54458: PPUSH
54459: CALL_OW 1
54463: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
54464: LD_ADDR_VAR 0 7
54468: PUSH
54469: LD_VAR 0 7
54473: PPUSH
54474: LD_VAR 0 7
54478: PPUSH
54479: LD_VAR 0 6
54483: PPUSH
54484: CALL_OW 1
54488: ST_TO_ADDR
// for i = s_arr downto 2 do
54489: LD_ADDR_VAR 0 5
54493: PUSH
54494: DOUBLE
54495: LD_VAR 0 7
54499: INC
54500: ST_TO_ADDR
54501: LD_INT 2
54503: PUSH
54504: FOR_DOWNTO
54505: IFFALSE 54589
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
54507: LD_ADDR_VAR 0 6
54511: PUSH
54512: LD_VAR 0 7
54516: PUSH
54517: LD_VAR 0 5
54521: PUSH
54522: LD_INT 1
54524: MINUS
54525: ARRAY
54526: PPUSH
54527: LD_VAR 0 2
54531: PUSH
54532: LD_VAR 0 5
54536: PUSH
54537: LD_INT 1
54539: MINUS
54540: ARRAY
54541: PPUSH
54542: LD_VAR 0 7
54546: PUSH
54547: LD_VAR 0 5
54551: ARRAY
54552: PPUSH
54553: CALL_OW 1
54557: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
54558: LD_ADDR_VAR 0 7
54562: PUSH
54563: LD_VAR 0 7
54567: PPUSH
54568: LD_VAR 0 5
54572: PUSH
54573: LD_INT 1
54575: MINUS
54576: PPUSH
54577: LD_VAR 0 6
54581: PPUSH
54582: CALL_OW 1
54586: ST_TO_ADDR
// end ;
54587: GO 54504
54589: POP
54590: POP
// result := s_arr [ 1 ] ;
54591: LD_ADDR_VAR 0 4
54595: PUSH
54596: LD_VAR 0 7
54600: PUSH
54601: LD_INT 1
54603: ARRAY
54604: ST_TO_ADDR
// end ; end ;
54605: LD_VAR 0 4
54609: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
54610: LD_INT 0
54612: PPUSH
54613: PPUSH
// if not list then
54614: LD_VAR 0 1
54618: NOT
54619: IFFALSE 54623
// exit ;
54621: GO 54714
// i := list [ pos1 ] ;
54623: LD_ADDR_VAR 0 5
54627: PUSH
54628: LD_VAR 0 1
54632: PUSH
54633: LD_VAR 0 2
54637: ARRAY
54638: ST_TO_ADDR
// if not i then
54639: LD_VAR 0 5
54643: NOT
54644: IFFALSE 54648
// exit ;
54646: GO 54714
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
54648: LD_ADDR_VAR 0 1
54652: PUSH
54653: LD_VAR 0 1
54657: PPUSH
54658: LD_VAR 0 2
54662: PPUSH
54663: LD_VAR 0 1
54667: PUSH
54668: LD_VAR 0 3
54672: ARRAY
54673: PPUSH
54674: CALL_OW 1
54678: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
54679: LD_ADDR_VAR 0 1
54683: PUSH
54684: LD_VAR 0 1
54688: PPUSH
54689: LD_VAR 0 3
54693: PPUSH
54694: LD_VAR 0 5
54698: PPUSH
54699: CALL_OW 1
54703: ST_TO_ADDR
// result := list ;
54704: LD_ADDR_VAR 0 4
54708: PUSH
54709: LD_VAR 0 1
54713: ST_TO_ADDR
// end ;
54714: LD_VAR 0 4
54718: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
54719: LD_INT 0
54721: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
54722: LD_ADDR_VAR 0 5
54726: PUSH
54727: LD_VAR 0 1
54731: PPUSH
54732: CALL_OW 250
54736: PPUSH
54737: LD_VAR 0 1
54741: PPUSH
54742: CALL_OW 251
54746: PPUSH
54747: LD_VAR 0 2
54751: PPUSH
54752: LD_VAR 0 3
54756: PPUSH
54757: LD_VAR 0 4
54761: PPUSH
54762: CALL 54772 0 5
54766: ST_TO_ADDR
// end ;
54767: LD_VAR 0 5
54771: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
54772: LD_INT 0
54774: PPUSH
54775: PPUSH
54776: PPUSH
54777: PPUSH
// if not list then
54778: LD_VAR 0 3
54782: NOT
54783: IFFALSE 54787
// exit ;
54785: GO 55175
// result := [ ] ;
54787: LD_ADDR_VAR 0 6
54791: PUSH
54792: EMPTY
54793: ST_TO_ADDR
// for i in list do
54794: LD_ADDR_VAR 0 7
54798: PUSH
54799: LD_VAR 0 3
54803: PUSH
54804: FOR_IN
54805: IFFALSE 55007
// begin tmp := GetDistUnitXY ( i , x , y ) ;
54807: LD_ADDR_VAR 0 9
54811: PUSH
54812: LD_VAR 0 7
54816: PPUSH
54817: LD_VAR 0 1
54821: PPUSH
54822: LD_VAR 0 2
54826: PPUSH
54827: CALL_OW 297
54831: ST_TO_ADDR
// if not result then
54832: LD_VAR 0 6
54836: NOT
54837: IFFALSE 54863
// result := [ [ i , tmp ] ] else
54839: LD_ADDR_VAR 0 6
54843: PUSH
54844: LD_VAR 0 7
54848: PUSH
54849: LD_VAR 0 9
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: EMPTY
54859: LIST
54860: ST_TO_ADDR
54861: GO 55005
// begin if result [ result ] [ 2 ] < tmp then
54863: LD_VAR 0 6
54867: PUSH
54868: LD_VAR 0 6
54872: ARRAY
54873: PUSH
54874: LD_INT 2
54876: ARRAY
54877: PUSH
54878: LD_VAR 0 9
54882: LESS
54883: IFFALSE 54925
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
54885: LD_ADDR_VAR 0 6
54889: PUSH
54890: LD_VAR 0 6
54894: PPUSH
54895: LD_VAR 0 6
54899: PUSH
54900: LD_INT 1
54902: PLUS
54903: PPUSH
54904: LD_VAR 0 7
54908: PUSH
54909: LD_VAR 0 9
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PPUSH
54918: CALL_OW 2
54922: ST_TO_ADDR
54923: GO 55005
// for j = 1 to result do
54925: LD_ADDR_VAR 0 8
54929: PUSH
54930: DOUBLE
54931: LD_INT 1
54933: DEC
54934: ST_TO_ADDR
54935: LD_VAR 0 6
54939: PUSH
54940: FOR_TO
54941: IFFALSE 55003
// begin if tmp < result [ j ] [ 2 ] then
54943: LD_VAR 0 9
54947: PUSH
54948: LD_VAR 0 6
54952: PUSH
54953: LD_VAR 0 8
54957: ARRAY
54958: PUSH
54959: LD_INT 2
54961: ARRAY
54962: LESS
54963: IFFALSE 55001
// begin result := Insert ( result , j , [ i , tmp ] ) ;
54965: LD_ADDR_VAR 0 6
54969: PUSH
54970: LD_VAR 0 6
54974: PPUSH
54975: LD_VAR 0 8
54979: PPUSH
54980: LD_VAR 0 7
54984: PUSH
54985: LD_VAR 0 9
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PPUSH
54994: CALL_OW 2
54998: ST_TO_ADDR
// break ;
54999: GO 55003
// end ; end ;
55001: GO 54940
55003: POP
55004: POP
// end ; end ;
55005: GO 54804
55007: POP
55008: POP
// if result and not asc then
55009: LD_VAR 0 6
55013: PUSH
55014: LD_VAR 0 4
55018: NOT
55019: AND
55020: IFFALSE 55095
// begin tmp := result ;
55022: LD_ADDR_VAR 0 9
55026: PUSH
55027: LD_VAR 0 6
55031: ST_TO_ADDR
// for i = tmp downto 1 do
55032: LD_ADDR_VAR 0 7
55036: PUSH
55037: DOUBLE
55038: LD_VAR 0 9
55042: INC
55043: ST_TO_ADDR
55044: LD_INT 1
55046: PUSH
55047: FOR_DOWNTO
55048: IFFALSE 55093
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
55050: LD_ADDR_VAR 0 6
55054: PUSH
55055: LD_VAR 0 6
55059: PPUSH
55060: LD_VAR 0 9
55064: PUSH
55065: LD_VAR 0 7
55069: MINUS
55070: PUSH
55071: LD_INT 1
55073: PLUS
55074: PPUSH
55075: LD_VAR 0 9
55079: PUSH
55080: LD_VAR 0 7
55084: ARRAY
55085: PPUSH
55086: CALL_OW 1
55090: ST_TO_ADDR
55091: GO 55047
55093: POP
55094: POP
// end ; tmp := [ ] ;
55095: LD_ADDR_VAR 0 9
55099: PUSH
55100: EMPTY
55101: ST_TO_ADDR
// if mode then
55102: LD_VAR 0 5
55106: IFFALSE 55175
// begin for i = 1 to result do
55108: LD_ADDR_VAR 0 7
55112: PUSH
55113: DOUBLE
55114: LD_INT 1
55116: DEC
55117: ST_TO_ADDR
55118: LD_VAR 0 6
55122: PUSH
55123: FOR_TO
55124: IFFALSE 55163
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
55126: LD_ADDR_VAR 0 9
55130: PUSH
55131: LD_VAR 0 9
55135: PPUSH
55136: LD_VAR 0 7
55140: PPUSH
55141: LD_VAR 0 6
55145: PUSH
55146: LD_VAR 0 7
55150: ARRAY
55151: PUSH
55152: LD_INT 1
55154: ARRAY
55155: PPUSH
55156: CALL_OW 1
55160: ST_TO_ADDR
55161: GO 55123
55163: POP
55164: POP
// result := tmp ;
55165: LD_ADDR_VAR 0 6
55169: PUSH
55170: LD_VAR 0 9
55174: ST_TO_ADDR
// end ; end ;
55175: LD_VAR 0 6
55179: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
55180: LD_INT 0
55182: PPUSH
55183: PPUSH
55184: PPUSH
55185: PPUSH
55186: PPUSH
55187: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
55188: LD_ADDR_VAR 0 5
55192: PUSH
55193: LD_INT 0
55195: PUSH
55196: LD_INT 0
55198: PUSH
55199: LD_INT 0
55201: PUSH
55202: EMPTY
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: ST_TO_ADDR
// if not x or not y then
55210: LD_VAR 0 2
55214: NOT
55215: PUSH
55216: LD_VAR 0 3
55220: NOT
55221: OR
55222: IFFALSE 55226
// exit ;
55224: GO 56878
// if not range then
55226: LD_VAR 0 4
55230: NOT
55231: IFFALSE 55241
// range := 10 ;
55233: LD_ADDR_VAR 0 4
55237: PUSH
55238: LD_INT 10
55240: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55241: LD_ADDR_VAR 0 8
55245: PUSH
55246: LD_INT 81
55248: PUSH
55249: LD_VAR 0 1
55253: PUSH
55254: EMPTY
55255: LIST
55256: LIST
55257: PUSH
55258: LD_INT 92
55260: PUSH
55261: LD_VAR 0 2
55265: PUSH
55266: LD_VAR 0 3
55270: PUSH
55271: LD_VAR 0 4
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: LIST
55280: LIST
55281: PUSH
55282: LD_INT 3
55284: PUSH
55285: LD_INT 21
55287: PUSH
55288: LD_INT 3
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: PUSH
55295: EMPTY
55296: LIST
55297: LIST
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: LIST
55303: PPUSH
55304: CALL_OW 69
55308: ST_TO_ADDR
// if not tmp then
55309: LD_VAR 0 8
55313: NOT
55314: IFFALSE 55318
// exit ;
55316: GO 56878
// for i in tmp do
55318: LD_ADDR_VAR 0 6
55322: PUSH
55323: LD_VAR 0 8
55327: PUSH
55328: FOR_IN
55329: IFFALSE 56853
// begin points := [ 0 , 0 , 0 ] ;
55331: LD_ADDR_VAR 0 9
55335: PUSH
55336: LD_INT 0
55338: PUSH
55339: LD_INT 0
55341: PUSH
55342: LD_INT 0
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: LIST
55349: ST_TO_ADDR
// bpoints := 1 ;
55350: LD_ADDR_VAR 0 10
55354: PUSH
55355: LD_INT 1
55357: ST_TO_ADDR
// case GetType ( i ) of unit_human :
55358: LD_VAR 0 6
55362: PPUSH
55363: CALL_OW 247
55367: PUSH
55368: LD_INT 1
55370: DOUBLE
55371: EQUAL
55372: IFTRUE 55376
55374: GO 55954
55376: POP
// begin if GetClass ( i ) = 1 then
55377: LD_VAR 0 6
55381: PPUSH
55382: CALL_OW 257
55386: PUSH
55387: LD_INT 1
55389: EQUAL
55390: IFFALSE 55411
// points := [ 10 , 5 , 3 ] ;
55392: LD_ADDR_VAR 0 9
55396: PUSH
55397: LD_INT 10
55399: PUSH
55400: LD_INT 5
55402: PUSH
55403: LD_INT 3
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
55411: LD_VAR 0 6
55415: PPUSH
55416: CALL_OW 257
55420: PUSH
55421: LD_INT 2
55423: PUSH
55424: LD_INT 3
55426: PUSH
55427: LD_INT 4
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: LIST
55434: IN
55435: IFFALSE 55456
// points := [ 3 , 2 , 1 ] ;
55437: LD_ADDR_VAR 0 9
55441: PUSH
55442: LD_INT 3
55444: PUSH
55445: LD_INT 2
55447: PUSH
55448: LD_INT 1
55450: PUSH
55451: EMPTY
55452: LIST
55453: LIST
55454: LIST
55455: ST_TO_ADDR
// if GetClass ( i ) = 5 then
55456: LD_VAR 0 6
55460: PPUSH
55461: CALL_OW 257
55465: PUSH
55466: LD_INT 5
55468: EQUAL
55469: IFFALSE 55490
// points := [ 130 , 5 , 2 ] ;
55471: LD_ADDR_VAR 0 9
55475: PUSH
55476: LD_INT 130
55478: PUSH
55479: LD_INT 5
55481: PUSH
55482: LD_INT 2
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: LIST
55489: ST_TO_ADDR
// if GetClass ( i ) = 8 then
55490: LD_VAR 0 6
55494: PPUSH
55495: CALL_OW 257
55499: PUSH
55500: LD_INT 8
55502: EQUAL
55503: IFFALSE 55524
// points := [ 35 , 35 , 30 ] ;
55505: LD_ADDR_VAR 0 9
55509: PUSH
55510: LD_INT 35
55512: PUSH
55513: LD_INT 35
55515: PUSH
55516: LD_INT 30
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: LIST
55523: ST_TO_ADDR
// if GetClass ( i ) = 9 then
55524: LD_VAR 0 6
55528: PPUSH
55529: CALL_OW 257
55533: PUSH
55534: LD_INT 9
55536: EQUAL
55537: IFFALSE 55558
// points := [ 20 , 55 , 40 ] ;
55539: LD_ADDR_VAR 0 9
55543: PUSH
55544: LD_INT 20
55546: PUSH
55547: LD_INT 55
55549: PUSH
55550: LD_INT 40
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: LIST
55557: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
55558: LD_VAR 0 6
55562: PPUSH
55563: CALL_OW 257
55567: PUSH
55568: LD_INT 12
55570: PUSH
55571: LD_INT 16
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: IN
55578: IFFALSE 55599
// points := [ 5 , 3 , 2 ] ;
55580: LD_ADDR_VAR 0 9
55584: PUSH
55585: LD_INT 5
55587: PUSH
55588: LD_INT 3
55590: PUSH
55591: LD_INT 2
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: ST_TO_ADDR
// if GetClass ( i ) = 17 then
55599: LD_VAR 0 6
55603: PPUSH
55604: CALL_OW 257
55608: PUSH
55609: LD_INT 17
55611: EQUAL
55612: IFFALSE 55633
// points := [ 100 , 50 , 75 ] ;
55614: LD_ADDR_VAR 0 9
55618: PUSH
55619: LD_INT 100
55621: PUSH
55622: LD_INT 50
55624: PUSH
55625: LD_INT 75
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: LIST
55632: ST_TO_ADDR
// if GetClass ( i ) = 15 then
55633: LD_VAR 0 6
55637: PPUSH
55638: CALL_OW 257
55642: PUSH
55643: LD_INT 15
55645: EQUAL
55646: IFFALSE 55667
// points := [ 10 , 5 , 3 ] ;
55648: LD_ADDR_VAR 0 9
55652: PUSH
55653: LD_INT 10
55655: PUSH
55656: LD_INT 5
55658: PUSH
55659: LD_INT 3
55661: PUSH
55662: EMPTY
55663: LIST
55664: LIST
55665: LIST
55666: ST_TO_ADDR
// if GetClass ( i ) = 14 then
55667: LD_VAR 0 6
55671: PPUSH
55672: CALL_OW 257
55676: PUSH
55677: LD_INT 14
55679: EQUAL
55680: IFFALSE 55701
// points := [ 10 , 0 , 0 ] ;
55682: LD_ADDR_VAR 0 9
55686: PUSH
55687: LD_INT 10
55689: PUSH
55690: LD_INT 0
55692: PUSH
55693: LD_INT 0
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: LIST
55700: ST_TO_ADDR
// if GetClass ( i ) = 11 then
55701: LD_VAR 0 6
55705: PPUSH
55706: CALL_OW 257
55710: PUSH
55711: LD_INT 11
55713: EQUAL
55714: IFFALSE 55735
// points := [ 30 , 10 , 5 ] ;
55716: LD_ADDR_VAR 0 9
55720: PUSH
55721: LD_INT 30
55723: PUSH
55724: LD_INT 10
55726: PUSH
55727: LD_INT 5
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: LIST
55734: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
55735: LD_VAR 0 1
55739: PPUSH
55740: LD_INT 5
55742: PPUSH
55743: CALL_OW 321
55747: PUSH
55748: LD_INT 2
55750: EQUAL
55751: IFFALSE 55768
// bpoints := bpoints * 1.8 ;
55753: LD_ADDR_VAR 0 10
55757: PUSH
55758: LD_VAR 0 10
55762: PUSH
55763: LD_REAL  1.80000000000000E+0000
55766: MUL
55767: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
55768: LD_VAR 0 6
55772: PPUSH
55773: CALL_OW 257
55777: PUSH
55778: LD_INT 1
55780: PUSH
55781: LD_INT 2
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: LD_INT 4
55789: PUSH
55790: EMPTY
55791: LIST
55792: LIST
55793: LIST
55794: LIST
55795: IN
55796: PUSH
55797: LD_VAR 0 1
55801: PPUSH
55802: LD_INT 51
55804: PPUSH
55805: CALL_OW 321
55809: PUSH
55810: LD_INT 2
55812: EQUAL
55813: AND
55814: IFFALSE 55831
// bpoints := bpoints * 1.2 ;
55816: LD_ADDR_VAR 0 10
55820: PUSH
55821: LD_VAR 0 10
55825: PUSH
55826: LD_REAL  1.20000000000000E+0000
55829: MUL
55830: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
55831: LD_VAR 0 6
55835: PPUSH
55836: CALL_OW 257
55840: PUSH
55841: LD_INT 5
55843: PUSH
55844: LD_INT 7
55846: PUSH
55847: LD_INT 9
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: IN
55855: PUSH
55856: LD_VAR 0 1
55860: PPUSH
55861: LD_INT 52
55863: PPUSH
55864: CALL_OW 321
55868: PUSH
55869: LD_INT 2
55871: EQUAL
55872: AND
55873: IFFALSE 55890
// bpoints := bpoints * 1.5 ;
55875: LD_ADDR_VAR 0 10
55879: PUSH
55880: LD_VAR 0 10
55884: PUSH
55885: LD_REAL  1.50000000000000E+0000
55888: MUL
55889: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
55890: LD_VAR 0 1
55894: PPUSH
55895: LD_INT 66
55897: PPUSH
55898: CALL_OW 321
55902: PUSH
55903: LD_INT 2
55905: EQUAL
55906: IFFALSE 55923
// bpoints := bpoints * 1.1 ;
55908: LD_ADDR_VAR 0 10
55912: PUSH
55913: LD_VAR 0 10
55917: PUSH
55918: LD_REAL  1.10000000000000E+0000
55921: MUL
55922: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
55923: LD_ADDR_VAR 0 10
55927: PUSH
55928: LD_VAR 0 10
55932: PUSH
55933: LD_VAR 0 6
55937: PPUSH
55938: LD_INT 1
55940: PPUSH
55941: CALL_OW 259
55945: PUSH
55946: LD_REAL  1.15000000000000E+0000
55949: MUL
55950: MUL
55951: ST_TO_ADDR
// end ; unit_vehicle :
55952: GO 56782
55954: LD_INT 2
55956: DOUBLE
55957: EQUAL
55958: IFTRUE 55962
55960: GO 56770
55962: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
55963: LD_VAR 0 6
55967: PPUSH
55968: CALL_OW 264
55972: PUSH
55973: LD_INT 2
55975: PUSH
55976: LD_INT 42
55978: PUSH
55979: LD_INT 24
55981: PUSH
55982: EMPTY
55983: LIST
55984: LIST
55985: LIST
55986: IN
55987: IFFALSE 56008
// points := [ 25 , 5 , 3 ] ;
55989: LD_ADDR_VAR 0 9
55993: PUSH
55994: LD_INT 25
55996: PUSH
55997: LD_INT 5
55999: PUSH
56000: LD_INT 3
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: LIST
56007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
56008: LD_VAR 0 6
56012: PPUSH
56013: CALL_OW 264
56017: PUSH
56018: LD_INT 4
56020: PUSH
56021: LD_INT 43
56023: PUSH
56024: LD_INT 25
56026: PUSH
56027: EMPTY
56028: LIST
56029: LIST
56030: LIST
56031: IN
56032: IFFALSE 56053
// points := [ 40 , 15 , 5 ] ;
56034: LD_ADDR_VAR 0 9
56038: PUSH
56039: LD_INT 40
56041: PUSH
56042: LD_INT 15
56044: PUSH
56045: LD_INT 5
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: LIST
56052: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
56053: LD_VAR 0 6
56057: PPUSH
56058: CALL_OW 264
56062: PUSH
56063: LD_INT 3
56065: PUSH
56066: LD_INT 23
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: IN
56073: IFFALSE 56094
// points := [ 7 , 25 , 8 ] ;
56075: LD_ADDR_VAR 0 9
56079: PUSH
56080: LD_INT 7
56082: PUSH
56083: LD_INT 25
56085: PUSH
56086: LD_INT 8
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: LIST
56093: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
56094: LD_VAR 0 6
56098: PPUSH
56099: CALL_OW 264
56103: PUSH
56104: LD_INT 5
56106: PUSH
56107: LD_INT 27
56109: PUSH
56110: LD_INT 44
56112: PUSH
56113: EMPTY
56114: LIST
56115: LIST
56116: LIST
56117: IN
56118: IFFALSE 56139
// points := [ 14 , 50 , 16 ] ;
56120: LD_ADDR_VAR 0 9
56124: PUSH
56125: LD_INT 14
56127: PUSH
56128: LD_INT 50
56130: PUSH
56131: LD_INT 16
56133: PUSH
56134: EMPTY
56135: LIST
56136: LIST
56137: LIST
56138: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
56139: LD_VAR 0 6
56143: PPUSH
56144: CALL_OW 264
56148: PUSH
56149: LD_INT 6
56151: PUSH
56152: LD_INT 46
56154: PUSH
56155: EMPTY
56156: LIST
56157: LIST
56158: IN
56159: IFFALSE 56180
// points := [ 32 , 120 , 70 ] ;
56161: LD_ADDR_VAR 0 9
56165: PUSH
56166: LD_INT 32
56168: PUSH
56169: LD_INT 120
56171: PUSH
56172: LD_INT 70
56174: PUSH
56175: EMPTY
56176: LIST
56177: LIST
56178: LIST
56179: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
56180: LD_VAR 0 6
56184: PPUSH
56185: CALL_OW 264
56189: PUSH
56190: LD_INT 7
56192: PUSH
56193: LD_INT 28
56195: PUSH
56196: LD_INT 45
56198: PUSH
56199: LD_EXP 75
56203: PUSH
56204: EMPTY
56205: LIST
56206: LIST
56207: LIST
56208: LIST
56209: IN
56210: IFFALSE 56231
// points := [ 35 , 20 , 45 ] ;
56212: LD_ADDR_VAR 0 9
56216: PUSH
56217: LD_INT 35
56219: PUSH
56220: LD_INT 20
56222: PUSH
56223: LD_INT 45
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: LIST
56230: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
56231: LD_VAR 0 6
56235: PPUSH
56236: CALL_OW 264
56240: PUSH
56241: LD_INT 47
56243: PUSH
56244: EMPTY
56245: LIST
56246: IN
56247: IFFALSE 56268
// points := [ 67 , 45 , 75 ] ;
56249: LD_ADDR_VAR 0 9
56253: PUSH
56254: LD_INT 67
56256: PUSH
56257: LD_INT 45
56259: PUSH
56260: LD_INT 75
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: LIST
56267: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
56268: LD_VAR 0 6
56272: PPUSH
56273: CALL_OW 264
56277: PUSH
56278: LD_INT 26
56280: PUSH
56281: EMPTY
56282: LIST
56283: IN
56284: IFFALSE 56305
// points := [ 120 , 30 , 80 ] ;
56286: LD_ADDR_VAR 0 9
56290: PUSH
56291: LD_INT 120
56293: PUSH
56294: LD_INT 30
56296: PUSH
56297: LD_INT 80
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: LIST
56304: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
56305: LD_VAR 0 6
56309: PPUSH
56310: CALL_OW 264
56314: PUSH
56315: LD_INT 22
56317: PUSH
56318: EMPTY
56319: LIST
56320: IN
56321: IFFALSE 56342
// points := [ 40 , 1 , 1 ] ;
56323: LD_ADDR_VAR 0 9
56327: PUSH
56328: LD_INT 40
56330: PUSH
56331: LD_INT 1
56333: PUSH
56334: LD_INT 1
56336: PUSH
56337: EMPTY
56338: LIST
56339: LIST
56340: LIST
56341: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
56342: LD_VAR 0 6
56346: PPUSH
56347: CALL_OW 264
56351: PUSH
56352: LD_INT 29
56354: PUSH
56355: EMPTY
56356: LIST
56357: IN
56358: IFFALSE 56379
// points := [ 70 , 200 , 400 ] ;
56360: LD_ADDR_VAR 0 9
56364: PUSH
56365: LD_INT 70
56367: PUSH
56368: LD_INT 200
56370: PUSH
56371: LD_INT 400
56373: PUSH
56374: EMPTY
56375: LIST
56376: LIST
56377: LIST
56378: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
56379: LD_VAR 0 6
56383: PPUSH
56384: CALL_OW 264
56388: PUSH
56389: LD_INT 14
56391: PUSH
56392: LD_INT 53
56394: PUSH
56395: EMPTY
56396: LIST
56397: LIST
56398: IN
56399: IFFALSE 56420
// points := [ 40 , 10 , 20 ] ;
56401: LD_ADDR_VAR 0 9
56405: PUSH
56406: LD_INT 40
56408: PUSH
56409: LD_INT 10
56411: PUSH
56412: LD_INT 20
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: LIST
56419: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
56420: LD_VAR 0 6
56424: PPUSH
56425: CALL_OW 264
56429: PUSH
56430: LD_INT 9
56432: PUSH
56433: EMPTY
56434: LIST
56435: IN
56436: IFFALSE 56457
// points := [ 5 , 70 , 20 ] ;
56438: LD_ADDR_VAR 0 9
56442: PUSH
56443: LD_INT 5
56445: PUSH
56446: LD_INT 70
56448: PUSH
56449: LD_INT 20
56451: PUSH
56452: EMPTY
56453: LIST
56454: LIST
56455: LIST
56456: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
56457: LD_VAR 0 6
56461: PPUSH
56462: CALL_OW 264
56466: PUSH
56467: LD_INT 10
56469: PUSH
56470: EMPTY
56471: LIST
56472: IN
56473: IFFALSE 56494
// points := [ 35 , 110 , 70 ] ;
56475: LD_ADDR_VAR 0 9
56479: PUSH
56480: LD_INT 35
56482: PUSH
56483: LD_INT 110
56485: PUSH
56486: LD_INT 70
56488: PUSH
56489: EMPTY
56490: LIST
56491: LIST
56492: LIST
56493: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
56494: LD_VAR 0 6
56498: PPUSH
56499: CALL_OW 265
56503: PUSH
56504: LD_INT 25
56506: EQUAL
56507: IFFALSE 56528
// points := [ 80 , 65 , 100 ] ;
56509: LD_ADDR_VAR 0 9
56513: PUSH
56514: LD_INT 80
56516: PUSH
56517: LD_INT 65
56519: PUSH
56520: LD_INT 100
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
56528: LD_VAR 0 6
56532: PPUSH
56533: CALL_OW 263
56537: PUSH
56538: LD_INT 1
56540: EQUAL
56541: IFFALSE 56576
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
56543: LD_ADDR_VAR 0 10
56547: PUSH
56548: LD_VAR 0 10
56552: PUSH
56553: LD_VAR 0 6
56557: PPUSH
56558: CALL_OW 311
56562: PPUSH
56563: LD_INT 3
56565: PPUSH
56566: CALL_OW 259
56570: PUSH
56571: LD_INT 4
56573: MUL
56574: MUL
56575: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
56576: LD_VAR 0 6
56580: PPUSH
56581: CALL_OW 263
56585: PUSH
56586: LD_INT 2
56588: EQUAL
56589: IFFALSE 56640
// begin j := IsControledBy ( i ) ;
56591: LD_ADDR_VAR 0 7
56595: PUSH
56596: LD_VAR 0 6
56600: PPUSH
56601: CALL_OW 312
56605: ST_TO_ADDR
// if j then
56606: LD_VAR 0 7
56610: IFFALSE 56640
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
56612: LD_ADDR_VAR 0 10
56616: PUSH
56617: LD_VAR 0 10
56621: PUSH
56622: LD_VAR 0 7
56626: PPUSH
56627: LD_INT 3
56629: PPUSH
56630: CALL_OW 259
56634: PUSH
56635: LD_INT 3
56637: MUL
56638: MUL
56639: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
56640: LD_VAR 0 6
56644: PPUSH
56645: CALL_OW 264
56649: PUSH
56650: LD_INT 5
56652: PUSH
56653: LD_INT 6
56655: PUSH
56656: LD_INT 46
56658: PUSH
56659: LD_INT 44
56661: PUSH
56662: LD_INT 47
56664: PUSH
56665: LD_INT 45
56667: PUSH
56668: LD_INT 28
56670: PUSH
56671: LD_INT 7
56673: PUSH
56674: LD_INT 27
56676: PUSH
56677: LD_INT 29
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: IN
56692: PUSH
56693: LD_VAR 0 1
56697: PPUSH
56698: LD_INT 52
56700: PPUSH
56701: CALL_OW 321
56705: PUSH
56706: LD_INT 2
56708: EQUAL
56709: AND
56710: IFFALSE 56727
// bpoints := bpoints * 1.2 ;
56712: LD_ADDR_VAR 0 10
56716: PUSH
56717: LD_VAR 0 10
56721: PUSH
56722: LD_REAL  1.20000000000000E+0000
56725: MUL
56726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
56727: LD_VAR 0 6
56731: PPUSH
56732: CALL_OW 264
56736: PUSH
56737: LD_INT 6
56739: PUSH
56740: LD_INT 46
56742: PUSH
56743: LD_INT 47
56745: PUSH
56746: EMPTY
56747: LIST
56748: LIST
56749: LIST
56750: IN
56751: IFFALSE 56768
// bpoints := bpoints * 1.2 ;
56753: LD_ADDR_VAR 0 10
56757: PUSH
56758: LD_VAR 0 10
56762: PUSH
56763: LD_REAL  1.20000000000000E+0000
56766: MUL
56767: ST_TO_ADDR
// end ; unit_building :
56768: GO 56782
56770: LD_INT 3
56772: DOUBLE
56773: EQUAL
56774: IFTRUE 56778
56776: GO 56781
56778: POP
// ; end ;
56779: GO 56782
56781: POP
// for j = 1 to 3 do
56782: LD_ADDR_VAR 0 7
56786: PUSH
56787: DOUBLE
56788: LD_INT 1
56790: DEC
56791: ST_TO_ADDR
56792: LD_INT 3
56794: PUSH
56795: FOR_TO
56796: IFFALSE 56849
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
56798: LD_ADDR_VAR 0 5
56802: PUSH
56803: LD_VAR 0 5
56807: PPUSH
56808: LD_VAR 0 7
56812: PPUSH
56813: LD_VAR 0 5
56817: PUSH
56818: LD_VAR 0 7
56822: ARRAY
56823: PUSH
56824: LD_VAR 0 9
56828: PUSH
56829: LD_VAR 0 7
56833: ARRAY
56834: PUSH
56835: LD_VAR 0 10
56839: MUL
56840: PLUS
56841: PPUSH
56842: CALL_OW 1
56846: ST_TO_ADDR
56847: GO 56795
56849: POP
56850: POP
// end ;
56851: GO 55328
56853: POP
56854: POP
// result := Replace ( result , 4 , tmp ) ;
56855: LD_ADDR_VAR 0 5
56859: PUSH
56860: LD_VAR 0 5
56864: PPUSH
56865: LD_INT 4
56867: PPUSH
56868: LD_VAR 0 8
56872: PPUSH
56873: CALL_OW 1
56877: ST_TO_ADDR
// end ;
56878: LD_VAR 0 5
56882: RET
// export function DangerAtRange ( unit , range ) ; begin
56883: LD_INT 0
56885: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
56886: LD_ADDR_VAR 0 3
56890: PUSH
56891: LD_VAR 0 1
56895: PPUSH
56896: CALL_OW 255
56900: PPUSH
56901: LD_VAR 0 1
56905: PPUSH
56906: CALL_OW 250
56910: PPUSH
56911: LD_VAR 0 1
56915: PPUSH
56916: CALL_OW 251
56920: PPUSH
56921: LD_VAR 0 2
56925: PPUSH
56926: CALL 55180 0 4
56930: ST_TO_ADDR
// end ;
56931: LD_VAR 0 3
56935: RET
// export function DangerInArea ( side , area ) ; begin
56936: LD_INT 0
56938: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
56939: LD_ADDR_VAR 0 3
56943: PUSH
56944: LD_VAR 0 2
56948: PPUSH
56949: LD_INT 81
56951: PUSH
56952: LD_VAR 0 1
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: PPUSH
56961: CALL_OW 70
56965: ST_TO_ADDR
// end ;
56966: LD_VAR 0 3
56970: RET
// export function IsExtension ( b ) ; begin
56971: LD_INT 0
56973: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
56974: LD_ADDR_VAR 0 2
56978: PUSH
56979: LD_VAR 0 1
56983: PUSH
56984: LD_INT 23
56986: PUSH
56987: LD_INT 20
56989: PUSH
56990: LD_INT 22
56992: PUSH
56993: LD_INT 17
56995: PUSH
56996: LD_INT 24
56998: PUSH
56999: LD_INT 21
57001: PUSH
57002: LD_INT 19
57004: PUSH
57005: LD_INT 16
57007: PUSH
57008: LD_INT 25
57010: PUSH
57011: LD_INT 18
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: LIST
57019: LIST
57020: LIST
57021: LIST
57022: LIST
57023: LIST
57024: LIST
57025: IN
57026: ST_TO_ADDR
// end ;
57027: LD_VAR 0 2
57031: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
57032: LD_INT 0
57034: PPUSH
57035: PPUSH
57036: PPUSH
// result := [ ] ;
57037: LD_ADDR_VAR 0 4
57041: PUSH
57042: EMPTY
57043: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
57044: LD_ADDR_VAR 0 5
57048: PUSH
57049: LD_VAR 0 2
57053: PPUSH
57054: LD_INT 21
57056: PUSH
57057: LD_INT 3
57059: PUSH
57060: EMPTY
57061: LIST
57062: LIST
57063: PPUSH
57064: CALL_OW 70
57068: ST_TO_ADDR
// if not tmp then
57069: LD_VAR 0 5
57073: NOT
57074: IFFALSE 57078
// exit ;
57076: GO 57142
// if checkLink then
57078: LD_VAR 0 3
57082: IFFALSE 57132
// begin for i in tmp do
57084: LD_ADDR_VAR 0 6
57088: PUSH
57089: LD_VAR 0 5
57093: PUSH
57094: FOR_IN
57095: IFFALSE 57130
// if GetBase ( i ) <> base then
57097: LD_VAR 0 6
57101: PPUSH
57102: CALL_OW 274
57106: PUSH
57107: LD_VAR 0 1
57111: NONEQUAL
57112: IFFALSE 57128
// ComLinkToBase ( base , i ) ;
57114: LD_VAR 0 1
57118: PPUSH
57119: LD_VAR 0 6
57123: PPUSH
57124: CALL_OW 169
57128: GO 57094
57130: POP
57131: POP
// end ; result := tmp ;
57132: LD_ADDR_VAR 0 4
57136: PUSH
57137: LD_VAR 0 5
57141: ST_TO_ADDR
// end ;
57142: LD_VAR 0 4
57146: RET
// export function ComComplete ( units , b ) ; var i ; begin
57147: LD_INT 0
57149: PPUSH
57150: PPUSH
// if not units then
57151: LD_VAR 0 1
57155: NOT
57156: IFFALSE 57160
// exit ;
57158: GO 57250
// for i in units do
57160: LD_ADDR_VAR 0 4
57164: PUSH
57165: LD_VAR 0 1
57169: PUSH
57170: FOR_IN
57171: IFFALSE 57248
// if BuildingStatus ( b ) = bs_build then
57173: LD_VAR 0 2
57177: PPUSH
57178: CALL_OW 461
57182: PUSH
57183: LD_INT 1
57185: EQUAL
57186: IFFALSE 57246
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
57188: LD_VAR 0 4
57192: PPUSH
57193: LD_STRING h
57195: PUSH
57196: LD_VAR 0 2
57200: PPUSH
57201: CALL_OW 250
57205: PUSH
57206: LD_VAR 0 2
57210: PPUSH
57211: CALL_OW 251
57215: PUSH
57216: LD_VAR 0 2
57220: PUSH
57221: LD_INT 0
57223: PUSH
57224: LD_INT 0
57226: PUSH
57227: LD_INT 0
57229: PUSH
57230: EMPTY
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: PUSH
57239: EMPTY
57240: LIST
57241: PPUSH
57242: CALL_OW 446
57246: GO 57170
57248: POP
57249: POP
// end ;
57250: LD_VAR 0 3
57254: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
57255: LD_INT 0
57257: PPUSH
57258: PPUSH
57259: PPUSH
57260: PPUSH
57261: PPUSH
57262: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
57263: LD_VAR 0 1
57267: NOT
57268: PUSH
57269: LD_VAR 0 1
57273: PPUSH
57274: CALL_OW 263
57278: PUSH
57279: LD_INT 2
57281: NONEQUAL
57282: OR
57283: IFFALSE 57287
// exit ;
57285: GO 57603
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
57287: LD_ADDR_VAR 0 6
57291: PUSH
57292: LD_INT 22
57294: PUSH
57295: LD_VAR 0 1
57299: PPUSH
57300: CALL_OW 255
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: PUSH
57309: LD_INT 2
57311: PUSH
57312: LD_INT 30
57314: PUSH
57315: LD_INT 36
57317: PUSH
57318: EMPTY
57319: LIST
57320: LIST
57321: PUSH
57322: LD_INT 34
57324: PUSH
57325: LD_INT 31
57327: PUSH
57328: EMPTY
57329: LIST
57330: LIST
57331: PUSH
57332: EMPTY
57333: LIST
57334: LIST
57335: LIST
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PPUSH
57341: CALL_OW 69
57345: ST_TO_ADDR
// if not tmp then
57346: LD_VAR 0 6
57350: NOT
57351: IFFALSE 57355
// exit ;
57353: GO 57603
// result := [ ] ;
57355: LD_ADDR_VAR 0 2
57359: PUSH
57360: EMPTY
57361: ST_TO_ADDR
// for i in tmp do
57362: LD_ADDR_VAR 0 3
57366: PUSH
57367: LD_VAR 0 6
57371: PUSH
57372: FOR_IN
57373: IFFALSE 57444
// begin t := UnitsInside ( i ) ;
57375: LD_ADDR_VAR 0 4
57379: PUSH
57380: LD_VAR 0 3
57384: PPUSH
57385: CALL_OW 313
57389: ST_TO_ADDR
// if t then
57390: LD_VAR 0 4
57394: IFFALSE 57442
// for j in t do
57396: LD_ADDR_VAR 0 7
57400: PUSH
57401: LD_VAR 0 4
57405: PUSH
57406: FOR_IN
57407: IFFALSE 57440
// result := Replace ( result , result + 1 , j ) ;
57409: LD_ADDR_VAR 0 2
57413: PUSH
57414: LD_VAR 0 2
57418: PPUSH
57419: LD_VAR 0 2
57423: PUSH
57424: LD_INT 1
57426: PLUS
57427: PPUSH
57428: LD_VAR 0 7
57432: PPUSH
57433: CALL_OW 1
57437: ST_TO_ADDR
57438: GO 57406
57440: POP
57441: POP
// end ;
57442: GO 57372
57444: POP
57445: POP
// if not result then
57446: LD_VAR 0 2
57450: NOT
57451: IFFALSE 57455
// exit ;
57453: GO 57603
// mech := result [ 1 ] ;
57455: LD_ADDR_VAR 0 5
57459: PUSH
57460: LD_VAR 0 2
57464: PUSH
57465: LD_INT 1
57467: ARRAY
57468: ST_TO_ADDR
// if result > 1 then
57469: LD_VAR 0 2
57473: PUSH
57474: LD_INT 1
57476: GREATER
57477: IFFALSE 57589
// begin for i = 2 to result do
57479: LD_ADDR_VAR 0 3
57483: PUSH
57484: DOUBLE
57485: LD_INT 2
57487: DEC
57488: ST_TO_ADDR
57489: LD_VAR 0 2
57493: PUSH
57494: FOR_TO
57495: IFFALSE 57587
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
57497: LD_ADDR_VAR 0 4
57501: PUSH
57502: LD_VAR 0 2
57506: PUSH
57507: LD_VAR 0 3
57511: ARRAY
57512: PPUSH
57513: LD_INT 3
57515: PPUSH
57516: CALL_OW 259
57520: PUSH
57521: LD_VAR 0 2
57525: PUSH
57526: LD_VAR 0 3
57530: ARRAY
57531: PPUSH
57532: CALL_OW 432
57536: MINUS
57537: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
57538: LD_VAR 0 4
57542: PUSH
57543: LD_VAR 0 5
57547: PPUSH
57548: LD_INT 3
57550: PPUSH
57551: CALL_OW 259
57555: PUSH
57556: LD_VAR 0 5
57560: PPUSH
57561: CALL_OW 432
57565: MINUS
57566: GREATEREQUAL
57567: IFFALSE 57585
// mech := result [ i ] ;
57569: LD_ADDR_VAR 0 5
57573: PUSH
57574: LD_VAR 0 2
57578: PUSH
57579: LD_VAR 0 3
57583: ARRAY
57584: ST_TO_ADDR
// end ;
57585: GO 57494
57587: POP
57588: POP
// end ; ComLinkTo ( vehicle , mech ) ;
57589: LD_VAR 0 1
57593: PPUSH
57594: LD_VAR 0 5
57598: PPUSH
57599: CALL_OW 135
// end ;
57603: LD_VAR 0 2
57607: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
57608: LD_INT 0
57610: PPUSH
57611: PPUSH
57612: PPUSH
57613: PPUSH
57614: PPUSH
57615: PPUSH
57616: PPUSH
57617: PPUSH
57618: PPUSH
57619: PPUSH
57620: PPUSH
57621: PPUSH
57622: PPUSH
// result := [ ] ;
57623: LD_ADDR_VAR 0 7
57627: PUSH
57628: EMPTY
57629: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
57630: LD_VAR 0 1
57634: PPUSH
57635: CALL_OW 266
57639: PUSH
57640: LD_INT 0
57642: PUSH
57643: LD_INT 1
57645: PUSH
57646: EMPTY
57647: LIST
57648: LIST
57649: IN
57650: NOT
57651: IFFALSE 57655
// exit ;
57653: GO 59289
// if name then
57655: LD_VAR 0 3
57659: IFFALSE 57675
// SetBName ( base_dep , name ) ;
57661: LD_VAR 0 1
57665: PPUSH
57666: LD_VAR 0 3
57670: PPUSH
57671: CALL_OW 500
// base := GetBase ( base_dep ) ;
57675: LD_ADDR_VAR 0 15
57679: PUSH
57680: LD_VAR 0 1
57684: PPUSH
57685: CALL_OW 274
57689: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
57690: LD_ADDR_VAR 0 16
57694: PUSH
57695: LD_VAR 0 1
57699: PPUSH
57700: CALL_OW 255
57704: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
57705: LD_ADDR_VAR 0 17
57709: PUSH
57710: LD_VAR 0 1
57714: PPUSH
57715: CALL_OW 248
57719: ST_TO_ADDR
// if sources then
57720: LD_VAR 0 5
57724: IFFALSE 57771
// for i = 1 to 3 do
57726: LD_ADDR_VAR 0 8
57730: PUSH
57731: DOUBLE
57732: LD_INT 1
57734: DEC
57735: ST_TO_ADDR
57736: LD_INT 3
57738: PUSH
57739: FOR_TO
57740: IFFALSE 57769
// AddResourceType ( base , i , sources [ i ] ) ;
57742: LD_VAR 0 15
57746: PPUSH
57747: LD_VAR 0 8
57751: PPUSH
57752: LD_VAR 0 5
57756: PUSH
57757: LD_VAR 0 8
57761: ARRAY
57762: PPUSH
57763: CALL_OW 276
57767: GO 57739
57769: POP
57770: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
57771: LD_ADDR_VAR 0 18
57775: PUSH
57776: LD_VAR 0 15
57780: PPUSH
57781: LD_VAR 0 2
57785: PPUSH
57786: LD_INT 1
57788: PPUSH
57789: CALL 57032 0 3
57793: ST_TO_ADDR
// InitHc ;
57794: CALL_OW 19
// InitUc ;
57798: CALL_OW 18
// uc_side := side ;
57802: LD_ADDR_OWVAR 20
57806: PUSH
57807: LD_VAR 0 16
57811: ST_TO_ADDR
// uc_nation := nation ;
57812: LD_ADDR_OWVAR 21
57816: PUSH
57817: LD_VAR 0 17
57821: ST_TO_ADDR
// if buildings then
57822: LD_VAR 0 18
57826: IFFALSE 59148
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
57828: LD_ADDR_VAR 0 19
57832: PUSH
57833: LD_VAR 0 18
57837: PPUSH
57838: LD_INT 2
57840: PUSH
57841: LD_INT 30
57843: PUSH
57844: LD_INT 29
57846: PUSH
57847: EMPTY
57848: LIST
57849: LIST
57850: PUSH
57851: LD_INT 30
57853: PUSH
57854: LD_INT 30
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: PPUSH
57866: CALL_OW 72
57870: ST_TO_ADDR
// if tmp then
57871: LD_VAR 0 19
57875: IFFALSE 57923
// for i in tmp do
57877: LD_ADDR_VAR 0 8
57881: PUSH
57882: LD_VAR 0 19
57886: PUSH
57887: FOR_IN
57888: IFFALSE 57921
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
57890: LD_VAR 0 8
57894: PPUSH
57895: CALL_OW 250
57899: PPUSH
57900: LD_VAR 0 8
57904: PPUSH
57905: CALL_OW 251
57909: PPUSH
57910: LD_VAR 0 16
57914: PPUSH
57915: CALL_OW 441
57919: GO 57887
57921: POP
57922: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
57923: LD_VAR 0 18
57927: PPUSH
57928: LD_INT 2
57930: PUSH
57931: LD_INT 30
57933: PUSH
57934: LD_INT 32
57936: PUSH
57937: EMPTY
57938: LIST
57939: LIST
57940: PUSH
57941: LD_INT 30
57943: PUSH
57944: LD_INT 33
57946: PUSH
57947: EMPTY
57948: LIST
57949: LIST
57950: PUSH
57951: EMPTY
57952: LIST
57953: LIST
57954: LIST
57955: PPUSH
57956: CALL_OW 72
57960: IFFALSE 58048
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
57962: LD_ADDR_VAR 0 8
57966: PUSH
57967: LD_VAR 0 18
57971: PPUSH
57972: LD_INT 2
57974: PUSH
57975: LD_INT 30
57977: PUSH
57978: LD_INT 32
57980: PUSH
57981: EMPTY
57982: LIST
57983: LIST
57984: PUSH
57985: LD_INT 30
57987: PUSH
57988: LD_INT 33
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: LIST
57999: PPUSH
58000: CALL_OW 72
58004: PUSH
58005: FOR_IN
58006: IFFALSE 58046
// begin if not GetBWeapon ( i ) then
58008: LD_VAR 0 8
58012: PPUSH
58013: CALL_OW 269
58017: NOT
58018: IFFALSE 58044
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
58020: LD_VAR 0 8
58024: PPUSH
58025: LD_VAR 0 8
58029: PPUSH
58030: LD_VAR 0 2
58034: PPUSH
58035: CALL 59294 0 2
58039: PPUSH
58040: CALL_OW 431
// end ;
58044: GO 58005
58046: POP
58047: POP
// end ; for i = 1 to personel do
58048: LD_ADDR_VAR 0 8
58052: PUSH
58053: DOUBLE
58054: LD_INT 1
58056: DEC
58057: ST_TO_ADDR
58058: LD_VAR 0 6
58062: PUSH
58063: FOR_TO
58064: IFFALSE 59128
// begin if i > 4 then
58066: LD_VAR 0 8
58070: PUSH
58071: LD_INT 4
58073: GREATER
58074: IFFALSE 58078
// break ;
58076: GO 59128
// case i of 1 :
58078: LD_VAR 0 8
58082: PUSH
58083: LD_INT 1
58085: DOUBLE
58086: EQUAL
58087: IFTRUE 58091
58089: GO 58171
58091: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
58092: LD_ADDR_VAR 0 12
58096: PUSH
58097: LD_VAR 0 18
58101: PPUSH
58102: LD_INT 22
58104: PUSH
58105: LD_VAR 0 16
58109: PUSH
58110: EMPTY
58111: LIST
58112: LIST
58113: PUSH
58114: LD_INT 58
58116: PUSH
58117: EMPTY
58118: LIST
58119: PUSH
58120: LD_INT 2
58122: PUSH
58123: LD_INT 30
58125: PUSH
58126: LD_INT 32
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: PUSH
58133: LD_INT 30
58135: PUSH
58136: LD_INT 4
58138: PUSH
58139: EMPTY
58140: LIST
58141: LIST
58142: PUSH
58143: LD_INT 30
58145: PUSH
58146: LD_INT 5
58148: PUSH
58149: EMPTY
58150: LIST
58151: LIST
58152: PUSH
58153: EMPTY
58154: LIST
58155: LIST
58156: LIST
58157: LIST
58158: PUSH
58159: EMPTY
58160: LIST
58161: LIST
58162: LIST
58163: PPUSH
58164: CALL_OW 72
58168: ST_TO_ADDR
58169: GO 58393
58171: LD_INT 2
58173: DOUBLE
58174: EQUAL
58175: IFTRUE 58179
58177: GO 58241
58179: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
58180: LD_ADDR_VAR 0 12
58184: PUSH
58185: LD_VAR 0 18
58189: PPUSH
58190: LD_INT 22
58192: PUSH
58193: LD_VAR 0 16
58197: PUSH
58198: EMPTY
58199: LIST
58200: LIST
58201: PUSH
58202: LD_INT 2
58204: PUSH
58205: LD_INT 30
58207: PUSH
58208: LD_INT 0
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: PUSH
58215: LD_INT 30
58217: PUSH
58218: LD_INT 1
58220: PUSH
58221: EMPTY
58222: LIST
58223: LIST
58224: PUSH
58225: EMPTY
58226: LIST
58227: LIST
58228: LIST
58229: PUSH
58230: EMPTY
58231: LIST
58232: LIST
58233: PPUSH
58234: CALL_OW 72
58238: ST_TO_ADDR
58239: GO 58393
58241: LD_INT 3
58243: DOUBLE
58244: EQUAL
58245: IFTRUE 58249
58247: GO 58311
58249: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
58250: LD_ADDR_VAR 0 12
58254: PUSH
58255: LD_VAR 0 18
58259: PPUSH
58260: LD_INT 22
58262: PUSH
58263: LD_VAR 0 16
58267: PUSH
58268: EMPTY
58269: LIST
58270: LIST
58271: PUSH
58272: LD_INT 2
58274: PUSH
58275: LD_INT 30
58277: PUSH
58278: LD_INT 2
58280: PUSH
58281: EMPTY
58282: LIST
58283: LIST
58284: PUSH
58285: LD_INT 30
58287: PUSH
58288: LD_INT 3
58290: PUSH
58291: EMPTY
58292: LIST
58293: LIST
58294: PUSH
58295: EMPTY
58296: LIST
58297: LIST
58298: LIST
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PPUSH
58304: CALL_OW 72
58308: ST_TO_ADDR
58309: GO 58393
58311: LD_INT 4
58313: DOUBLE
58314: EQUAL
58315: IFTRUE 58319
58317: GO 58392
58319: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
58320: LD_ADDR_VAR 0 12
58324: PUSH
58325: LD_VAR 0 18
58329: PPUSH
58330: LD_INT 22
58332: PUSH
58333: LD_VAR 0 16
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: PUSH
58342: LD_INT 2
58344: PUSH
58345: LD_INT 30
58347: PUSH
58348: LD_INT 6
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: PUSH
58355: LD_INT 30
58357: PUSH
58358: LD_INT 7
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: PUSH
58365: LD_INT 30
58367: PUSH
58368: LD_INT 8
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: LIST
58379: LIST
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PPUSH
58385: CALL_OW 72
58389: ST_TO_ADDR
58390: GO 58393
58392: POP
// if i = 1 then
58393: LD_VAR 0 8
58397: PUSH
58398: LD_INT 1
58400: EQUAL
58401: IFFALSE 58512
// begin tmp := [ ] ;
58403: LD_ADDR_VAR 0 19
58407: PUSH
58408: EMPTY
58409: ST_TO_ADDR
// for j in f do
58410: LD_ADDR_VAR 0 9
58414: PUSH
58415: LD_VAR 0 12
58419: PUSH
58420: FOR_IN
58421: IFFALSE 58494
// if GetBType ( j ) = b_bunker then
58423: LD_VAR 0 9
58427: PPUSH
58428: CALL_OW 266
58432: PUSH
58433: LD_INT 32
58435: EQUAL
58436: IFFALSE 58463
// tmp := Insert ( tmp , 1 , j ) else
58438: LD_ADDR_VAR 0 19
58442: PUSH
58443: LD_VAR 0 19
58447: PPUSH
58448: LD_INT 1
58450: PPUSH
58451: LD_VAR 0 9
58455: PPUSH
58456: CALL_OW 2
58460: ST_TO_ADDR
58461: GO 58492
// tmp := Insert ( tmp , tmp + 1 , j ) ;
58463: LD_ADDR_VAR 0 19
58467: PUSH
58468: LD_VAR 0 19
58472: PPUSH
58473: LD_VAR 0 19
58477: PUSH
58478: LD_INT 1
58480: PLUS
58481: PPUSH
58482: LD_VAR 0 9
58486: PPUSH
58487: CALL_OW 2
58491: ST_TO_ADDR
58492: GO 58420
58494: POP
58495: POP
// if tmp then
58496: LD_VAR 0 19
58500: IFFALSE 58512
// f := tmp ;
58502: LD_ADDR_VAR 0 12
58506: PUSH
58507: LD_VAR 0 19
58511: ST_TO_ADDR
// end ; x := personel [ i ] ;
58512: LD_ADDR_VAR 0 13
58516: PUSH
58517: LD_VAR 0 6
58521: PUSH
58522: LD_VAR 0 8
58526: ARRAY
58527: ST_TO_ADDR
// if x = - 1 then
58528: LD_VAR 0 13
58532: PUSH
58533: LD_INT 1
58535: NEG
58536: EQUAL
58537: IFFALSE 58746
// begin for j in f do
58539: LD_ADDR_VAR 0 9
58543: PUSH
58544: LD_VAR 0 12
58548: PUSH
58549: FOR_IN
58550: IFFALSE 58742
// repeat InitHc ;
58552: CALL_OW 19
// if GetBType ( j ) = b_barracks then
58556: LD_VAR 0 9
58560: PPUSH
58561: CALL_OW 266
58565: PUSH
58566: LD_INT 5
58568: EQUAL
58569: IFFALSE 58639
// begin if UnitsInside ( j ) < 3 then
58571: LD_VAR 0 9
58575: PPUSH
58576: CALL_OW 313
58580: PUSH
58581: LD_INT 3
58583: LESS
58584: IFFALSE 58620
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
58586: LD_INT 0
58588: PPUSH
58589: LD_INT 5
58591: PUSH
58592: LD_INT 8
58594: PUSH
58595: LD_INT 9
58597: PUSH
58598: EMPTY
58599: LIST
58600: LIST
58601: LIST
58602: PUSH
58603: LD_VAR 0 17
58607: ARRAY
58608: PPUSH
58609: LD_VAR 0 4
58613: PPUSH
58614: CALL_OW 380
58618: GO 58637
// PrepareHuman ( false , i , skill ) ;
58620: LD_INT 0
58622: PPUSH
58623: LD_VAR 0 8
58627: PPUSH
58628: LD_VAR 0 4
58632: PPUSH
58633: CALL_OW 380
// end else
58637: GO 58656
// PrepareHuman ( false , i , skill ) ;
58639: LD_INT 0
58641: PPUSH
58642: LD_VAR 0 8
58646: PPUSH
58647: LD_VAR 0 4
58651: PPUSH
58652: CALL_OW 380
// un := CreateHuman ;
58656: LD_ADDR_VAR 0 14
58660: PUSH
58661: CALL_OW 44
58665: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58666: LD_ADDR_VAR 0 7
58670: PUSH
58671: LD_VAR 0 7
58675: PPUSH
58676: LD_INT 1
58678: PPUSH
58679: LD_VAR 0 14
58683: PPUSH
58684: CALL_OW 2
58688: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
58689: LD_VAR 0 14
58693: PPUSH
58694: LD_VAR 0 9
58698: PPUSH
58699: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
58703: LD_VAR 0 9
58707: PPUSH
58708: CALL_OW 313
58712: PUSH
58713: LD_INT 6
58715: EQUAL
58716: PUSH
58717: LD_VAR 0 9
58721: PPUSH
58722: CALL_OW 266
58726: PUSH
58727: LD_INT 32
58729: PUSH
58730: LD_INT 31
58732: PUSH
58733: EMPTY
58734: LIST
58735: LIST
58736: IN
58737: OR
58738: IFFALSE 58552
58740: GO 58549
58742: POP
58743: POP
// end else
58744: GO 59126
// for j = 1 to x do
58746: LD_ADDR_VAR 0 9
58750: PUSH
58751: DOUBLE
58752: LD_INT 1
58754: DEC
58755: ST_TO_ADDR
58756: LD_VAR 0 13
58760: PUSH
58761: FOR_TO
58762: IFFALSE 59124
// begin InitHc ;
58764: CALL_OW 19
// if not f then
58768: LD_VAR 0 12
58772: NOT
58773: IFFALSE 58862
// begin PrepareHuman ( false , i , skill ) ;
58775: LD_INT 0
58777: PPUSH
58778: LD_VAR 0 8
58782: PPUSH
58783: LD_VAR 0 4
58787: PPUSH
58788: CALL_OW 380
// un := CreateHuman ;
58792: LD_ADDR_VAR 0 14
58796: PUSH
58797: CALL_OW 44
58801: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
58802: LD_ADDR_VAR 0 7
58806: PUSH
58807: LD_VAR 0 7
58811: PPUSH
58812: LD_INT 1
58814: PPUSH
58815: LD_VAR 0 14
58819: PPUSH
58820: CALL_OW 2
58824: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
58825: LD_VAR 0 14
58829: PPUSH
58830: LD_VAR 0 1
58834: PPUSH
58835: CALL_OW 250
58839: PPUSH
58840: LD_VAR 0 1
58844: PPUSH
58845: CALL_OW 251
58849: PPUSH
58850: LD_INT 10
58852: PPUSH
58853: LD_INT 0
58855: PPUSH
58856: CALL_OW 50
// continue ;
58860: GO 58761
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
58862: LD_VAR 0 12
58866: PUSH
58867: LD_INT 1
58869: ARRAY
58870: PPUSH
58871: CALL_OW 313
58875: PUSH
58876: LD_VAR 0 12
58880: PUSH
58881: LD_INT 1
58883: ARRAY
58884: PPUSH
58885: CALL_OW 266
58889: PUSH
58890: LD_INT 32
58892: PUSH
58893: LD_INT 31
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: IN
58900: AND
58901: PUSH
58902: LD_VAR 0 12
58906: PUSH
58907: LD_INT 1
58909: ARRAY
58910: PPUSH
58911: CALL_OW 313
58915: PUSH
58916: LD_INT 6
58918: EQUAL
58919: OR
58920: IFFALSE 58940
// f := Delete ( f , 1 ) ;
58922: LD_ADDR_VAR 0 12
58926: PUSH
58927: LD_VAR 0 12
58931: PPUSH
58932: LD_INT 1
58934: PPUSH
58935: CALL_OW 3
58939: ST_TO_ADDR
// if not f then
58940: LD_VAR 0 12
58944: NOT
58945: IFFALSE 58963
// begin x := x + 2 ;
58947: LD_ADDR_VAR 0 13
58951: PUSH
58952: LD_VAR 0 13
58956: PUSH
58957: LD_INT 2
58959: PLUS
58960: ST_TO_ADDR
// continue ;
58961: GO 58761
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
58963: LD_VAR 0 12
58967: PUSH
58968: LD_INT 1
58970: ARRAY
58971: PPUSH
58972: CALL_OW 266
58976: PUSH
58977: LD_INT 5
58979: EQUAL
58980: IFFALSE 59054
// begin if UnitsInside ( f [ 1 ] ) < 3 then
58982: LD_VAR 0 12
58986: PUSH
58987: LD_INT 1
58989: ARRAY
58990: PPUSH
58991: CALL_OW 313
58995: PUSH
58996: LD_INT 3
58998: LESS
58999: IFFALSE 59035
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59001: LD_INT 0
59003: PPUSH
59004: LD_INT 5
59006: PUSH
59007: LD_INT 8
59009: PUSH
59010: LD_INT 9
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: LIST
59017: PUSH
59018: LD_VAR 0 17
59022: ARRAY
59023: PPUSH
59024: LD_VAR 0 4
59028: PPUSH
59029: CALL_OW 380
59033: GO 59052
// PrepareHuman ( false , i , skill ) ;
59035: LD_INT 0
59037: PPUSH
59038: LD_VAR 0 8
59042: PPUSH
59043: LD_VAR 0 4
59047: PPUSH
59048: CALL_OW 380
// end else
59052: GO 59071
// PrepareHuman ( false , i , skill ) ;
59054: LD_INT 0
59056: PPUSH
59057: LD_VAR 0 8
59061: PPUSH
59062: LD_VAR 0 4
59066: PPUSH
59067: CALL_OW 380
// un := CreateHuman ;
59071: LD_ADDR_VAR 0 14
59075: PUSH
59076: CALL_OW 44
59080: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59081: LD_ADDR_VAR 0 7
59085: PUSH
59086: LD_VAR 0 7
59090: PPUSH
59091: LD_INT 1
59093: PPUSH
59094: LD_VAR 0 14
59098: PPUSH
59099: CALL_OW 2
59103: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
59104: LD_VAR 0 14
59108: PPUSH
59109: LD_VAR 0 12
59113: PUSH
59114: LD_INT 1
59116: ARRAY
59117: PPUSH
59118: CALL_OW 52
// end ;
59122: GO 58761
59124: POP
59125: POP
// end ;
59126: GO 58063
59128: POP
59129: POP
// result := result ^ buildings ;
59130: LD_ADDR_VAR 0 7
59134: PUSH
59135: LD_VAR 0 7
59139: PUSH
59140: LD_VAR 0 18
59144: ADD
59145: ST_TO_ADDR
// end else
59146: GO 59289
// begin for i = 1 to personel do
59148: LD_ADDR_VAR 0 8
59152: PUSH
59153: DOUBLE
59154: LD_INT 1
59156: DEC
59157: ST_TO_ADDR
59158: LD_VAR 0 6
59162: PUSH
59163: FOR_TO
59164: IFFALSE 59287
// begin if i > 4 then
59166: LD_VAR 0 8
59170: PUSH
59171: LD_INT 4
59173: GREATER
59174: IFFALSE 59178
// break ;
59176: GO 59287
// x := personel [ i ] ;
59178: LD_ADDR_VAR 0 13
59182: PUSH
59183: LD_VAR 0 6
59187: PUSH
59188: LD_VAR 0 8
59192: ARRAY
59193: ST_TO_ADDR
// if x = - 1 then
59194: LD_VAR 0 13
59198: PUSH
59199: LD_INT 1
59201: NEG
59202: EQUAL
59203: IFFALSE 59207
// continue ;
59205: GO 59163
// PrepareHuman ( false , i , skill ) ;
59207: LD_INT 0
59209: PPUSH
59210: LD_VAR 0 8
59214: PPUSH
59215: LD_VAR 0 4
59219: PPUSH
59220: CALL_OW 380
// un := CreateHuman ;
59224: LD_ADDR_VAR 0 14
59228: PUSH
59229: CALL_OW 44
59233: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59234: LD_VAR 0 14
59238: PPUSH
59239: LD_VAR 0 1
59243: PPUSH
59244: CALL_OW 250
59248: PPUSH
59249: LD_VAR 0 1
59253: PPUSH
59254: CALL_OW 251
59258: PPUSH
59259: LD_INT 10
59261: PPUSH
59262: LD_INT 0
59264: PPUSH
59265: CALL_OW 50
// result := result ^ un ;
59269: LD_ADDR_VAR 0 7
59273: PUSH
59274: LD_VAR 0 7
59278: PUSH
59279: LD_VAR 0 14
59283: ADD
59284: ST_TO_ADDR
// end ;
59285: GO 59163
59287: POP
59288: POP
// end ; end ;
59289: LD_VAR 0 7
59293: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
59294: LD_INT 0
59296: PPUSH
59297: PPUSH
59298: PPUSH
59299: PPUSH
59300: PPUSH
59301: PPUSH
59302: PPUSH
59303: PPUSH
59304: PPUSH
59305: PPUSH
59306: PPUSH
59307: PPUSH
59308: PPUSH
59309: PPUSH
59310: PPUSH
59311: PPUSH
// result := false ;
59312: LD_ADDR_VAR 0 3
59316: PUSH
59317: LD_INT 0
59319: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
59320: LD_VAR 0 1
59324: NOT
59325: PUSH
59326: LD_VAR 0 1
59330: PPUSH
59331: CALL_OW 266
59335: PUSH
59336: LD_INT 32
59338: PUSH
59339: LD_INT 33
59341: PUSH
59342: EMPTY
59343: LIST
59344: LIST
59345: IN
59346: NOT
59347: OR
59348: IFFALSE 59352
// exit ;
59350: GO 60461
// nat := GetNation ( tower ) ;
59352: LD_ADDR_VAR 0 12
59356: PUSH
59357: LD_VAR 0 1
59361: PPUSH
59362: CALL_OW 248
59366: ST_TO_ADDR
// side := GetSide ( tower ) ;
59367: LD_ADDR_VAR 0 16
59371: PUSH
59372: LD_VAR 0 1
59376: PPUSH
59377: CALL_OW 255
59381: ST_TO_ADDR
// x := GetX ( tower ) ;
59382: LD_ADDR_VAR 0 10
59386: PUSH
59387: LD_VAR 0 1
59391: PPUSH
59392: CALL_OW 250
59396: ST_TO_ADDR
// y := GetY ( tower ) ;
59397: LD_ADDR_VAR 0 11
59401: PUSH
59402: LD_VAR 0 1
59406: PPUSH
59407: CALL_OW 251
59411: ST_TO_ADDR
// if not x or not y then
59412: LD_VAR 0 10
59416: NOT
59417: PUSH
59418: LD_VAR 0 11
59422: NOT
59423: OR
59424: IFFALSE 59428
// exit ;
59426: GO 60461
// weapon := 0 ;
59428: LD_ADDR_VAR 0 18
59432: PUSH
59433: LD_INT 0
59435: ST_TO_ADDR
// fac_list := [ ] ;
59436: LD_ADDR_VAR 0 17
59440: PUSH
59441: EMPTY
59442: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
59443: LD_ADDR_VAR 0 6
59447: PUSH
59448: LD_VAR 0 1
59452: PPUSH
59453: CALL_OW 274
59457: PPUSH
59458: LD_VAR 0 2
59462: PPUSH
59463: LD_INT 0
59465: PPUSH
59466: CALL 57032 0 3
59470: PPUSH
59471: LD_INT 30
59473: PUSH
59474: LD_INT 3
59476: PUSH
59477: EMPTY
59478: LIST
59479: LIST
59480: PPUSH
59481: CALL_OW 72
59485: ST_TO_ADDR
// if not factories then
59486: LD_VAR 0 6
59490: NOT
59491: IFFALSE 59495
// exit ;
59493: GO 60461
// for i in factories do
59495: LD_ADDR_VAR 0 8
59499: PUSH
59500: LD_VAR 0 6
59504: PUSH
59505: FOR_IN
59506: IFFALSE 59531
// fac_list := fac_list union AvailableWeaponList ( i ) ;
59508: LD_ADDR_VAR 0 17
59512: PUSH
59513: LD_VAR 0 17
59517: PUSH
59518: LD_VAR 0 8
59522: PPUSH
59523: CALL_OW 478
59527: UNION
59528: ST_TO_ADDR
59529: GO 59505
59531: POP
59532: POP
// if not fac_list then
59533: LD_VAR 0 17
59537: NOT
59538: IFFALSE 59542
// exit ;
59540: GO 60461
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
59542: LD_ADDR_VAR 0 5
59546: PUSH
59547: LD_INT 4
59549: PUSH
59550: LD_INT 5
59552: PUSH
59553: LD_INT 9
59555: PUSH
59556: LD_INT 10
59558: PUSH
59559: LD_INT 6
59561: PUSH
59562: LD_INT 7
59564: PUSH
59565: LD_INT 11
59567: PUSH
59568: EMPTY
59569: LIST
59570: LIST
59571: LIST
59572: LIST
59573: LIST
59574: LIST
59575: LIST
59576: PUSH
59577: LD_INT 27
59579: PUSH
59580: LD_INT 28
59582: PUSH
59583: LD_INT 26
59585: PUSH
59586: LD_INT 30
59588: PUSH
59589: EMPTY
59590: LIST
59591: LIST
59592: LIST
59593: LIST
59594: PUSH
59595: LD_INT 43
59597: PUSH
59598: LD_INT 44
59600: PUSH
59601: LD_INT 46
59603: PUSH
59604: LD_INT 45
59606: PUSH
59607: LD_INT 47
59609: PUSH
59610: LD_INT 49
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: LIST
59617: LIST
59618: LIST
59619: LIST
59620: PUSH
59621: EMPTY
59622: LIST
59623: LIST
59624: LIST
59625: PUSH
59626: LD_VAR 0 12
59630: ARRAY
59631: ST_TO_ADDR
// list := list isect fac_list ;
59632: LD_ADDR_VAR 0 5
59636: PUSH
59637: LD_VAR 0 5
59641: PUSH
59642: LD_VAR 0 17
59646: ISECT
59647: ST_TO_ADDR
// if not list then
59648: LD_VAR 0 5
59652: NOT
59653: IFFALSE 59657
// exit ;
59655: GO 60461
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
59657: LD_VAR 0 12
59661: PUSH
59662: LD_INT 3
59664: EQUAL
59665: PUSH
59666: LD_INT 49
59668: PUSH
59669: LD_VAR 0 5
59673: IN
59674: AND
59675: PUSH
59676: LD_INT 31
59678: PPUSH
59679: LD_VAR 0 16
59683: PPUSH
59684: CALL_OW 321
59688: PUSH
59689: LD_INT 2
59691: EQUAL
59692: AND
59693: IFFALSE 59753
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
59695: LD_INT 22
59697: PUSH
59698: LD_VAR 0 16
59702: PUSH
59703: EMPTY
59704: LIST
59705: LIST
59706: PUSH
59707: LD_INT 35
59709: PUSH
59710: LD_INT 49
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: PUSH
59717: LD_INT 91
59719: PUSH
59720: LD_VAR 0 1
59724: PUSH
59725: LD_INT 10
59727: PUSH
59728: EMPTY
59729: LIST
59730: LIST
59731: LIST
59732: PUSH
59733: EMPTY
59734: LIST
59735: LIST
59736: LIST
59737: PPUSH
59738: CALL_OW 69
59742: NOT
59743: IFFALSE 59753
// weapon := ru_time_lapser ;
59745: LD_ADDR_VAR 0 18
59749: PUSH
59750: LD_INT 49
59752: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
59753: LD_VAR 0 12
59757: PUSH
59758: LD_INT 1
59760: PUSH
59761: LD_INT 2
59763: PUSH
59764: EMPTY
59765: LIST
59766: LIST
59767: IN
59768: PUSH
59769: LD_INT 11
59771: PUSH
59772: LD_VAR 0 5
59776: IN
59777: PUSH
59778: LD_INT 30
59780: PUSH
59781: LD_VAR 0 5
59785: IN
59786: OR
59787: AND
59788: PUSH
59789: LD_INT 6
59791: PPUSH
59792: LD_VAR 0 16
59796: PPUSH
59797: CALL_OW 321
59801: PUSH
59802: LD_INT 2
59804: EQUAL
59805: AND
59806: IFFALSE 59971
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
59808: LD_INT 22
59810: PUSH
59811: LD_VAR 0 16
59815: PUSH
59816: EMPTY
59817: LIST
59818: LIST
59819: PUSH
59820: LD_INT 2
59822: PUSH
59823: LD_INT 35
59825: PUSH
59826: LD_INT 11
59828: PUSH
59829: EMPTY
59830: LIST
59831: LIST
59832: PUSH
59833: LD_INT 35
59835: PUSH
59836: LD_INT 30
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: LIST
59847: PUSH
59848: LD_INT 91
59850: PUSH
59851: LD_VAR 0 1
59855: PUSH
59856: LD_INT 18
59858: PUSH
59859: EMPTY
59860: LIST
59861: LIST
59862: LIST
59863: PUSH
59864: EMPTY
59865: LIST
59866: LIST
59867: LIST
59868: PPUSH
59869: CALL_OW 69
59873: NOT
59874: PUSH
59875: LD_INT 22
59877: PUSH
59878: LD_VAR 0 16
59882: PUSH
59883: EMPTY
59884: LIST
59885: LIST
59886: PUSH
59887: LD_INT 2
59889: PUSH
59890: LD_INT 30
59892: PUSH
59893: LD_INT 32
59895: PUSH
59896: EMPTY
59897: LIST
59898: LIST
59899: PUSH
59900: LD_INT 30
59902: PUSH
59903: LD_INT 33
59905: PUSH
59906: EMPTY
59907: LIST
59908: LIST
59909: PUSH
59910: EMPTY
59911: LIST
59912: LIST
59913: LIST
59914: PUSH
59915: LD_INT 91
59917: PUSH
59918: LD_VAR 0 1
59922: PUSH
59923: LD_INT 12
59925: PUSH
59926: EMPTY
59927: LIST
59928: LIST
59929: LIST
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: LIST
59935: PUSH
59936: EMPTY
59937: LIST
59938: PPUSH
59939: CALL_OW 69
59943: PUSH
59944: LD_INT 2
59946: GREATER
59947: AND
59948: IFFALSE 59971
// weapon := [ us_radar , ar_radar ] [ nat ] ;
59950: LD_ADDR_VAR 0 18
59954: PUSH
59955: LD_INT 11
59957: PUSH
59958: LD_INT 30
59960: PUSH
59961: EMPTY
59962: LIST
59963: LIST
59964: PUSH
59965: LD_VAR 0 12
59969: ARRAY
59970: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
59971: LD_VAR 0 18
59975: NOT
59976: PUSH
59977: LD_INT 40
59979: PPUSH
59980: LD_VAR 0 16
59984: PPUSH
59985: CALL_OW 321
59989: PUSH
59990: LD_INT 2
59992: EQUAL
59993: AND
59994: PUSH
59995: LD_INT 7
59997: PUSH
59998: LD_VAR 0 5
60002: IN
60003: PUSH
60004: LD_INT 28
60006: PUSH
60007: LD_VAR 0 5
60011: IN
60012: OR
60013: PUSH
60014: LD_INT 45
60016: PUSH
60017: LD_VAR 0 5
60021: IN
60022: OR
60023: AND
60024: IFFALSE 60278
// begin hex := GetHexInfo ( x , y ) ;
60026: LD_ADDR_VAR 0 4
60030: PUSH
60031: LD_VAR 0 10
60035: PPUSH
60036: LD_VAR 0 11
60040: PPUSH
60041: CALL_OW 546
60045: ST_TO_ADDR
// if hex [ 1 ] then
60046: LD_VAR 0 4
60050: PUSH
60051: LD_INT 1
60053: ARRAY
60054: IFFALSE 60058
// exit ;
60056: GO 60461
// height := hex [ 2 ] ;
60058: LD_ADDR_VAR 0 15
60062: PUSH
60063: LD_VAR 0 4
60067: PUSH
60068: LD_INT 2
60070: ARRAY
60071: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
60072: LD_ADDR_VAR 0 14
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: LD_INT 2
60082: PUSH
60083: LD_INT 3
60085: PUSH
60086: LD_INT 5
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: LIST
60093: LIST
60094: ST_TO_ADDR
// for i in tmp do
60095: LD_ADDR_VAR 0 8
60099: PUSH
60100: LD_VAR 0 14
60104: PUSH
60105: FOR_IN
60106: IFFALSE 60276
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
60108: LD_ADDR_VAR 0 9
60112: PUSH
60113: LD_VAR 0 10
60117: PPUSH
60118: LD_VAR 0 8
60122: PPUSH
60123: LD_INT 5
60125: PPUSH
60126: CALL_OW 272
60130: PUSH
60131: LD_VAR 0 11
60135: PPUSH
60136: LD_VAR 0 8
60140: PPUSH
60141: LD_INT 5
60143: PPUSH
60144: CALL_OW 273
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
60153: LD_VAR 0 9
60157: PUSH
60158: LD_INT 1
60160: ARRAY
60161: PPUSH
60162: LD_VAR 0 9
60166: PUSH
60167: LD_INT 2
60169: ARRAY
60170: PPUSH
60171: CALL_OW 488
60175: IFFALSE 60274
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
60177: LD_ADDR_VAR 0 4
60181: PUSH
60182: LD_VAR 0 9
60186: PUSH
60187: LD_INT 1
60189: ARRAY
60190: PPUSH
60191: LD_VAR 0 9
60195: PUSH
60196: LD_INT 2
60198: ARRAY
60199: PPUSH
60200: CALL_OW 546
60204: ST_TO_ADDR
// if hex [ 1 ] then
60205: LD_VAR 0 4
60209: PUSH
60210: LD_INT 1
60212: ARRAY
60213: IFFALSE 60217
// continue ;
60215: GO 60105
// h := hex [ 2 ] ;
60217: LD_ADDR_VAR 0 13
60221: PUSH
60222: LD_VAR 0 4
60226: PUSH
60227: LD_INT 2
60229: ARRAY
60230: ST_TO_ADDR
// if h + 7 < height then
60231: LD_VAR 0 13
60235: PUSH
60236: LD_INT 7
60238: PLUS
60239: PUSH
60240: LD_VAR 0 15
60244: LESS
60245: IFFALSE 60274
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
60247: LD_ADDR_VAR 0 18
60251: PUSH
60252: LD_INT 7
60254: PUSH
60255: LD_INT 28
60257: PUSH
60258: LD_INT 45
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: LIST
60265: PUSH
60266: LD_VAR 0 12
60270: ARRAY
60271: ST_TO_ADDR
// break ;
60272: GO 60276
// end ; end ; end ;
60274: GO 60105
60276: POP
60277: POP
// end ; if not weapon then
60278: LD_VAR 0 18
60282: NOT
60283: IFFALSE 60343
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
60285: LD_ADDR_VAR 0 5
60289: PUSH
60290: LD_VAR 0 5
60294: PUSH
60295: LD_INT 11
60297: PUSH
60298: LD_INT 30
60300: PUSH
60301: LD_INT 49
60303: PUSH
60304: EMPTY
60305: LIST
60306: LIST
60307: LIST
60308: DIFF
60309: ST_TO_ADDR
// if not list then
60310: LD_VAR 0 5
60314: NOT
60315: IFFALSE 60319
// exit ;
60317: GO 60461
// weapon := list [ rand ( 1 , list ) ] ;
60319: LD_ADDR_VAR 0 18
60323: PUSH
60324: LD_VAR 0 5
60328: PUSH
60329: LD_INT 1
60331: PPUSH
60332: LD_VAR 0 5
60336: PPUSH
60337: CALL_OW 12
60341: ARRAY
60342: ST_TO_ADDR
// end ; if weapon then
60343: LD_VAR 0 18
60347: IFFALSE 60461
// begin tmp := CostOfWeapon ( weapon ) ;
60349: LD_ADDR_VAR 0 14
60353: PUSH
60354: LD_VAR 0 18
60358: PPUSH
60359: CALL_OW 451
60363: ST_TO_ADDR
// j := GetBase ( tower ) ;
60364: LD_ADDR_VAR 0 9
60368: PUSH
60369: LD_VAR 0 1
60373: PPUSH
60374: CALL_OW 274
60378: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
60379: LD_VAR 0 9
60383: PPUSH
60384: LD_INT 1
60386: PPUSH
60387: CALL_OW 275
60391: PUSH
60392: LD_VAR 0 14
60396: PUSH
60397: LD_INT 1
60399: ARRAY
60400: GREATEREQUAL
60401: PUSH
60402: LD_VAR 0 9
60406: PPUSH
60407: LD_INT 2
60409: PPUSH
60410: CALL_OW 275
60414: PUSH
60415: LD_VAR 0 14
60419: PUSH
60420: LD_INT 2
60422: ARRAY
60423: GREATEREQUAL
60424: AND
60425: PUSH
60426: LD_VAR 0 9
60430: PPUSH
60431: LD_INT 3
60433: PPUSH
60434: CALL_OW 275
60438: PUSH
60439: LD_VAR 0 14
60443: PUSH
60444: LD_INT 3
60446: ARRAY
60447: GREATEREQUAL
60448: AND
60449: IFFALSE 60461
// result := weapon ;
60451: LD_ADDR_VAR 0 3
60455: PUSH
60456: LD_VAR 0 18
60460: ST_TO_ADDR
// end ; end ;
60461: LD_VAR 0 3
60465: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
60466: LD_INT 0
60468: PPUSH
60469: PPUSH
// result := true ;
60470: LD_ADDR_VAR 0 3
60474: PUSH
60475: LD_INT 1
60477: ST_TO_ADDR
// if array1 = array2 then
60478: LD_VAR 0 1
60482: PUSH
60483: LD_VAR 0 2
60487: EQUAL
60488: IFFALSE 60548
// begin for i = 1 to array1 do
60490: LD_ADDR_VAR 0 4
60494: PUSH
60495: DOUBLE
60496: LD_INT 1
60498: DEC
60499: ST_TO_ADDR
60500: LD_VAR 0 1
60504: PUSH
60505: FOR_TO
60506: IFFALSE 60544
// if array1 [ i ] <> array2 [ i ] then
60508: LD_VAR 0 1
60512: PUSH
60513: LD_VAR 0 4
60517: ARRAY
60518: PUSH
60519: LD_VAR 0 2
60523: PUSH
60524: LD_VAR 0 4
60528: ARRAY
60529: NONEQUAL
60530: IFFALSE 60542
// begin result := false ;
60532: LD_ADDR_VAR 0 3
60536: PUSH
60537: LD_INT 0
60539: ST_TO_ADDR
// break ;
60540: GO 60544
// end ;
60542: GO 60505
60544: POP
60545: POP
// end else
60546: GO 60556
// result := false ;
60548: LD_ADDR_VAR 0 3
60552: PUSH
60553: LD_INT 0
60555: ST_TO_ADDR
// end ;
60556: LD_VAR 0 3
60560: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
60561: LD_INT 0
60563: PPUSH
60564: PPUSH
// if not array1 or not array2 then
60565: LD_VAR 0 1
60569: NOT
60570: PUSH
60571: LD_VAR 0 2
60575: NOT
60576: OR
60577: IFFALSE 60581
// exit ;
60579: GO 60645
// result := true ;
60581: LD_ADDR_VAR 0 3
60585: PUSH
60586: LD_INT 1
60588: ST_TO_ADDR
// for i = 1 to array1 do
60589: LD_ADDR_VAR 0 4
60593: PUSH
60594: DOUBLE
60595: LD_INT 1
60597: DEC
60598: ST_TO_ADDR
60599: LD_VAR 0 1
60603: PUSH
60604: FOR_TO
60605: IFFALSE 60643
// if array1 [ i ] <> array2 [ i ] then
60607: LD_VAR 0 1
60611: PUSH
60612: LD_VAR 0 4
60616: ARRAY
60617: PUSH
60618: LD_VAR 0 2
60622: PUSH
60623: LD_VAR 0 4
60627: ARRAY
60628: NONEQUAL
60629: IFFALSE 60641
// begin result := false ;
60631: LD_ADDR_VAR 0 3
60635: PUSH
60636: LD_INT 0
60638: ST_TO_ADDR
// break ;
60639: GO 60643
// end ;
60641: GO 60604
60643: POP
60644: POP
// end ;
60645: LD_VAR 0 3
60649: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
60650: LD_INT 0
60652: PPUSH
60653: PPUSH
60654: PPUSH
// pom := GetBase ( fac ) ;
60655: LD_ADDR_VAR 0 5
60659: PUSH
60660: LD_VAR 0 1
60664: PPUSH
60665: CALL_OW 274
60669: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
60670: LD_ADDR_VAR 0 4
60674: PUSH
60675: LD_VAR 0 2
60679: PUSH
60680: LD_INT 1
60682: ARRAY
60683: PPUSH
60684: LD_VAR 0 2
60688: PUSH
60689: LD_INT 2
60691: ARRAY
60692: PPUSH
60693: LD_VAR 0 2
60697: PUSH
60698: LD_INT 3
60700: ARRAY
60701: PPUSH
60702: LD_VAR 0 2
60706: PUSH
60707: LD_INT 4
60709: ARRAY
60710: PPUSH
60711: CALL_OW 449
60715: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60716: LD_ADDR_VAR 0 3
60720: PUSH
60721: LD_VAR 0 5
60725: PPUSH
60726: LD_INT 1
60728: PPUSH
60729: CALL_OW 275
60733: PUSH
60734: LD_VAR 0 4
60738: PUSH
60739: LD_INT 1
60741: ARRAY
60742: GREATEREQUAL
60743: PUSH
60744: LD_VAR 0 5
60748: PPUSH
60749: LD_INT 2
60751: PPUSH
60752: CALL_OW 275
60756: PUSH
60757: LD_VAR 0 4
60761: PUSH
60762: LD_INT 2
60764: ARRAY
60765: GREATEREQUAL
60766: AND
60767: PUSH
60768: LD_VAR 0 5
60772: PPUSH
60773: LD_INT 3
60775: PPUSH
60776: CALL_OW 275
60780: PUSH
60781: LD_VAR 0 4
60785: PUSH
60786: LD_INT 3
60788: ARRAY
60789: GREATEREQUAL
60790: AND
60791: ST_TO_ADDR
// end ;
60792: LD_VAR 0 3
60796: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
60797: LD_INT 0
60799: PPUSH
60800: PPUSH
60801: PPUSH
60802: PPUSH
// pom := GetBase ( building ) ;
60803: LD_ADDR_VAR 0 3
60807: PUSH
60808: LD_VAR 0 1
60812: PPUSH
60813: CALL_OW 274
60817: ST_TO_ADDR
// if not pom then
60818: LD_VAR 0 3
60822: NOT
60823: IFFALSE 60827
// exit ;
60825: GO 60997
// btype := GetBType ( building ) ;
60827: LD_ADDR_VAR 0 5
60831: PUSH
60832: LD_VAR 0 1
60836: PPUSH
60837: CALL_OW 266
60841: ST_TO_ADDR
// if btype = b_armoury then
60842: LD_VAR 0 5
60846: PUSH
60847: LD_INT 4
60849: EQUAL
60850: IFFALSE 60860
// btype := b_barracks ;
60852: LD_ADDR_VAR 0 5
60856: PUSH
60857: LD_INT 5
60859: ST_TO_ADDR
// if btype = b_depot then
60860: LD_VAR 0 5
60864: PUSH
60865: LD_INT 0
60867: EQUAL
60868: IFFALSE 60878
// btype := b_warehouse ;
60870: LD_ADDR_VAR 0 5
60874: PUSH
60875: LD_INT 1
60877: ST_TO_ADDR
// if btype = b_workshop then
60878: LD_VAR 0 5
60882: PUSH
60883: LD_INT 2
60885: EQUAL
60886: IFFALSE 60896
// btype := b_factory ;
60888: LD_ADDR_VAR 0 5
60892: PUSH
60893: LD_INT 3
60895: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
60896: LD_ADDR_VAR 0 4
60900: PUSH
60901: LD_VAR 0 5
60905: PPUSH
60906: LD_VAR 0 1
60910: PPUSH
60911: CALL_OW 248
60915: PPUSH
60916: CALL_OW 450
60920: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
60921: LD_ADDR_VAR 0 2
60925: PUSH
60926: LD_VAR 0 3
60930: PPUSH
60931: LD_INT 1
60933: PPUSH
60934: CALL_OW 275
60938: PUSH
60939: LD_VAR 0 4
60943: PUSH
60944: LD_INT 1
60946: ARRAY
60947: GREATEREQUAL
60948: PUSH
60949: LD_VAR 0 3
60953: PPUSH
60954: LD_INT 2
60956: PPUSH
60957: CALL_OW 275
60961: PUSH
60962: LD_VAR 0 4
60966: PUSH
60967: LD_INT 2
60969: ARRAY
60970: GREATEREQUAL
60971: AND
60972: PUSH
60973: LD_VAR 0 3
60977: PPUSH
60978: LD_INT 3
60980: PPUSH
60981: CALL_OW 275
60985: PUSH
60986: LD_VAR 0 4
60990: PUSH
60991: LD_INT 3
60993: ARRAY
60994: GREATEREQUAL
60995: AND
60996: ST_TO_ADDR
// end ;
60997: LD_VAR 0 2
61001: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
61002: LD_INT 0
61004: PPUSH
61005: PPUSH
61006: PPUSH
// pom := GetBase ( building ) ;
61007: LD_ADDR_VAR 0 4
61011: PUSH
61012: LD_VAR 0 1
61016: PPUSH
61017: CALL_OW 274
61021: ST_TO_ADDR
// if not pom then
61022: LD_VAR 0 4
61026: NOT
61027: IFFALSE 61031
// exit ;
61029: GO 61132
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61031: LD_ADDR_VAR 0 5
61035: PUSH
61036: LD_VAR 0 2
61040: PPUSH
61041: LD_VAR 0 1
61045: PPUSH
61046: CALL_OW 248
61050: PPUSH
61051: CALL_OW 450
61055: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61056: LD_ADDR_VAR 0 3
61060: PUSH
61061: LD_VAR 0 4
61065: PPUSH
61066: LD_INT 1
61068: PPUSH
61069: CALL_OW 275
61073: PUSH
61074: LD_VAR 0 5
61078: PUSH
61079: LD_INT 1
61081: ARRAY
61082: GREATEREQUAL
61083: PUSH
61084: LD_VAR 0 4
61088: PPUSH
61089: LD_INT 2
61091: PPUSH
61092: CALL_OW 275
61096: PUSH
61097: LD_VAR 0 5
61101: PUSH
61102: LD_INT 2
61104: ARRAY
61105: GREATEREQUAL
61106: AND
61107: PUSH
61108: LD_VAR 0 4
61112: PPUSH
61113: LD_INT 3
61115: PPUSH
61116: CALL_OW 275
61120: PUSH
61121: LD_VAR 0 5
61125: PUSH
61126: LD_INT 3
61128: ARRAY
61129: GREATEREQUAL
61130: AND
61131: ST_TO_ADDR
// end ;
61132: LD_VAR 0 3
61136: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
61137: LD_INT 0
61139: PPUSH
61140: PPUSH
61141: PPUSH
61142: PPUSH
61143: PPUSH
61144: PPUSH
61145: PPUSH
61146: PPUSH
61147: PPUSH
61148: PPUSH
61149: PPUSH
// result := false ;
61150: LD_ADDR_VAR 0 8
61154: PUSH
61155: LD_INT 0
61157: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
61158: LD_VAR 0 5
61162: NOT
61163: PUSH
61164: LD_VAR 0 1
61168: NOT
61169: OR
61170: PUSH
61171: LD_VAR 0 2
61175: NOT
61176: OR
61177: PUSH
61178: LD_VAR 0 3
61182: NOT
61183: OR
61184: IFFALSE 61188
// exit ;
61186: GO 62002
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
61188: LD_ADDR_VAR 0 14
61192: PUSH
61193: LD_VAR 0 1
61197: PPUSH
61198: LD_VAR 0 2
61202: PPUSH
61203: LD_VAR 0 3
61207: PPUSH
61208: LD_VAR 0 4
61212: PPUSH
61213: LD_VAR 0 5
61217: PUSH
61218: LD_INT 1
61220: ARRAY
61221: PPUSH
61222: CALL_OW 248
61226: PPUSH
61227: LD_INT 0
61229: PPUSH
61230: CALL 63239 0 6
61234: ST_TO_ADDR
// if not hexes then
61235: LD_VAR 0 14
61239: NOT
61240: IFFALSE 61244
// exit ;
61242: GO 62002
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
61244: LD_ADDR_VAR 0 17
61248: PUSH
61249: LD_VAR 0 5
61253: PPUSH
61254: LD_INT 22
61256: PUSH
61257: LD_VAR 0 13
61261: PPUSH
61262: CALL_OW 255
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 2
61273: PUSH
61274: LD_INT 30
61276: PUSH
61277: LD_INT 0
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: PUSH
61284: LD_INT 30
61286: PUSH
61287: LD_INT 1
61289: PUSH
61290: EMPTY
61291: LIST
61292: LIST
61293: PUSH
61294: EMPTY
61295: LIST
61296: LIST
61297: LIST
61298: PUSH
61299: EMPTY
61300: LIST
61301: LIST
61302: PPUSH
61303: CALL_OW 72
61307: ST_TO_ADDR
// for i = 1 to hexes do
61308: LD_ADDR_VAR 0 9
61312: PUSH
61313: DOUBLE
61314: LD_INT 1
61316: DEC
61317: ST_TO_ADDR
61318: LD_VAR 0 14
61322: PUSH
61323: FOR_TO
61324: IFFALSE 62000
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
61326: LD_ADDR_VAR 0 13
61330: PUSH
61331: LD_VAR 0 14
61335: PUSH
61336: LD_VAR 0 9
61340: ARRAY
61341: PUSH
61342: LD_INT 1
61344: ARRAY
61345: PPUSH
61346: LD_VAR 0 14
61350: PUSH
61351: LD_VAR 0 9
61355: ARRAY
61356: PUSH
61357: LD_INT 2
61359: ARRAY
61360: PPUSH
61361: CALL_OW 428
61365: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
61366: LD_VAR 0 14
61370: PUSH
61371: LD_VAR 0 9
61375: ARRAY
61376: PUSH
61377: LD_INT 1
61379: ARRAY
61380: PPUSH
61381: LD_VAR 0 14
61385: PUSH
61386: LD_VAR 0 9
61390: ARRAY
61391: PUSH
61392: LD_INT 2
61394: ARRAY
61395: PPUSH
61396: CALL_OW 351
61400: PUSH
61401: LD_VAR 0 14
61405: PUSH
61406: LD_VAR 0 9
61410: ARRAY
61411: PUSH
61412: LD_INT 1
61414: ARRAY
61415: PPUSH
61416: LD_VAR 0 14
61420: PUSH
61421: LD_VAR 0 9
61425: ARRAY
61426: PUSH
61427: LD_INT 2
61429: ARRAY
61430: PPUSH
61431: CALL_OW 488
61435: NOT
61436: OR
61437: PUSH
61438: LD_VAR 0 13
61442: PPUSH
61443: CALL_OW 247
61447: PUSH
61448: LD_INT 3
61450: EQUAL
61451: OR
61452: IFFALSE 61458
// exit ;
61454: POP
61455: POP
61456: GO 62002
// if not tmp then
61458: LD_VAR 0 13
61462: NOT
61463: IFFALSE 61467
// continue ;
61465: GO 61323
// result := true ;
61467: LD_ADDR_VAR 0 8
61471: PUSH
61472: LD_INT 1
61474: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
61475: LD_VAR 0 6
61479: PUSH
61480: LD_VAR 0 13
61484: PPUSH
61485: CALL_OW 247
61489: PUSH
61490: LD_INT 2
61492: EQUAL
61493: AND
61494: PUSH
61495: LD_VAR 0 13
61499: PPUSH
61500: CALL_OW 263
61504: PUSH
61505: LD_INT 1
61507: EQUAL
61508: AND
61509: IFFALSE 61673
// begin if IsDrivenBy ( tmp ) then
61511: LD_VAR 0 13
61515: PPUSH
61516: CALL_OW 311
61520: IFFALSE 61524
// continue ;
61522: GO 61323
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
61524: LD_VAR 0 6
61528: PPUSH
61529: LD_INT 3
61531: PUSH
61532: LD_INT 60
61534: PUSH
61535: EMPTY
61536: LIST
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 3
61544: PUSH
61545: LD_INT 55
61547: PUSH
61548: EMPTY
61549: LIST
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: PUSH
61555: EMPTY
61556: LIST
61557: LIST
61558: PPUSH
61559: CALL_OW 72
61563: IFFALSE 61671
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
61565: LD_ADDR_VAR 0 18
61569: PUSH
61570: LD_VAR 0 6
61574: PPUSH
61575: LD_INT 3
61577: PUSH
61578: LD_INT 60
61580: PUSH
61581: EMPTY
61582: LIST
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 3
61590: PUSH
61591: LD_INT 55
61593: PUSH
61594: EMPTY
61595: LIST
61596: PUSH
61597: EMPTY
61598: LIST
61599: LIST
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: PPUSH
61605: CALL_OW 72
61609: PUSH
61610: LD_INT 1
61612: ARRAY
61613: ST_TO_ADDR
// if IsInUnit ( driver ) then
61614: LD_VAR 0 18
61618: PPUSH
61619: CALL_OW 310
61623: IFFALSE 61634
// ComExit ( driver ) ;
61625: LD_VAR 0 18
61629: PPUSH
61630: CALL 86367 0 1
// AddComEnterUnit ( driver , tmp ) ;
61634: LD_VAR 0 18
61638: PPUSH
61639: LD_VAR 0 13
61643: PPUSH
61644: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
61648: LD_VAR 0 18
61652: PPUSH
61653: LD_VAR 0 7
61657: PPUSH
61658: CALL_OW 173
// AddComExitVehicle ( driver ) ;
61662: LD_VAR 0 18
61666: PPUSH
61667: CALL_OW 181
// end ; continue ;
61671: GO 61323
// end ; if not cleaners or not tmp in cleaners then
61673: LD_VAR 0 6
61677: NOT
61678: PUSH
61679: LD_VAR 0 13
61683: PUSH
61684: LD_VAR 0 6
61688: IN
61689: NOT
61690: OR
61691: IFFALSE 61998
// begin if dep then
61693: LD_VAR 0 17
61697: IFFALSE 61833
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
61699: LD_ADDR_VAR 0 16
61703: PUSH
61704: LD_VAR 0 17
61708: PUSH
61709: LD_INT 1
61711: ARRAY
61712: PPUSH
61713: CALL_OW 250
61717: PPUSH
61718: LD_VAR 0 17
61722: PUSH
61723: LD_INT 1
61725: ARRAY
61726: PPUSH
61727: CALL_OW 254
61731: PPUSH
61732: LD_INT 5
61734: PPUSH
61735: CALL_OW 272
61739: PUSH
61740: LD_VAR 0 17
61744: PUSH
61745: LD_INT 1
61747: ARRAY
61748: PPUSH
61749: CALL_OW 251
61753: PPUSH
61754: LD_VAR 0 17
61758: PUSH
61759: LD_INT 1
61761: ARRAY
61762: PPUSH
61763: CALL_OW 254
61767: PPUSH
61768: LD_INT 5
61770: PPUSH
61771: CALL_OW 273
61775: PUSH
61776: EMPTY
61777: LIST
61778: LIST
61779: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
61780: LD_VAR 0 16
61784: PUSH
61785: LD_INT 1
61787: ARRAY
61788: PPUSH
61789: LD_VAR 0 16
61793: PUSH
61794: LD_INT 2
61796: ARRAY
61797: PPUSH
61798: CALL_OW 488
61802: IFFALSE 61833
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
61804: LD_VAR 0 13
61808: PPUSH
61809: LD_VAR 0 16
61813: PUSH
61814: LD_INT 1
61816: ARRAY
61817: PPUSH
61818: LD_VAR 0 16
61822: PUSH
61823: LD_INT 2
61825: ARRAY
61826: PPUSH
61827: CALL_OW 111
// continue ;
61831: GO 61323
// end ; end ; r := GetDir ( tmp ) ;
61833: LD_ADDR_VAR 0 15
61837: PUSH
61838: LD_VAR 0 13
61842: PPUSH
61843: CALL_OW 254
61847: ST_TO_ADDR
// if r = 5 then
61848: LD_VAR 0 15
61852: PUSH
61853: LD_INT 5
61855: EQUAL
61856: IFFALSE 61866
// r := 0 ;
61858: LD_ADDR_VAR 0 15
61862: PUSH
61863: LD_INT 0
61865: ST_TO_ADDR
// for j = r to 5 do
61866: LD_ADDR_VAR 0 10
61870: PUSH
61871: DOUBLE
61872: LD_VAR 0 15
61876: DEC
61877: ST_TO_ADDR
61878: LD_INT 5
61880: PUSH
61881: FOR_TO
61882: IFFALSE 61996
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
61884: LD_ADDR_VAR 0 11
61888: PUSH
61889: LD_VAR 0 13
61893: PPUSH
61894: CALL_OW 250
61898: PPUSH
61899: LD_VAR 0 10
61903: PPUSH
61904: LD_INT 2
61906: PPUSH
61907: CALL_OW 272
61911: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
61912: LD_ADDR_VAR 0 12
61916: PUSH
61917: LD_VAR 0 13
61921: PPUSH
61922: CALL_OW 251
61926: PPUSH
61927: LD_VAR 0 10
61931: PPUSH
61932: LD_INT 2
61934: PPUSH
61935: CALL_OW 273
61939: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
61940: LD_VAR 0 11
61944: PPUSH
61945: LD_VAR 0 12
61949: PPUSH
61950: CALL_OW 488
61954: PUSH
61955: LD_VAR 0 11
61959: PPUSH
61960: LD_VAR 0 12
61964: PPUSH
61965: CALL_OW 428
61969: NOT
61970: AND
61971: IFFALSE 61994
// begin ComMoveXY ( tmp , _x , _y ) ;
61973: LD_VAR 0 13
61977: PPUSH
61978: LD_VAR 0 11
61982: PPUSH
61983: LD_VAR 0 12
61987: PPUSH
61988: CALL_OW 111
// break ;
61992: GO 61996
// end ; end ;
61994: GO 61881
61996: POP
61997: POP
// end ; end ;
61998: GO 61323
62000: POP
62001: POP
// end ;
62002: LD_VAR 0 8
62006: RET
// export function BuildingTechInvented ( side , btype ) ; begin
62007: LD_INT 0
62009: PPUSH
// result := true ;
62010: LD_ADDR_VAR 0 3
62014: PUSH
62015: LD_INT 1
62017: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
62018: LD_VAR 0 2
62022: PUSH
62023: LD_INT 24
62025: DOUBLE
62026: EQUAL
62027: IFTRUE 62037
62029: LD_INT 33
62031: DOUBLE
62032: EQUAL
62033: IFTRUE 62037
62035: GO 62062
62037: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
62038: LD_ADDR_VAR 0 3
62042: PUSH
62043: LD_INT 32
62045: PPUSH
62046: LD_VAR 0 1
62050: PPUSH
62051: CALL_OW 321
62055: PUSH
62056: LD_INT 2
62058: EQUAL
62059: ST_TO_ADDR
62060: GO 62382
62062: LD_INT 20
62064: DOUBLE
62065: EQUAL
62066: IFTRUE 62070
62068: GO 62095
62070: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
62071: LD_ADDR_VAR 0 3
62075: PUSH
62076: LD_INT 6
62078: PPUSH
62079: LD_VAR 0 1
62083: PPUSH
62084: CALL_OW 321
62088: PUSH
62089: LD_INT 2
62091: EQUAL
62092: ST_TO_ADDR
62093: GO 62382
62095: LD_INT 22
62097: DOUBLE
62098: EQUAL
62099: IFTRUE 62109
62101: LD_INT 36
62103: DOUBLE
62104: EQUAL
62105: IFTRUE 62109
62107: GO 62134
62109: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
62110: LD_ADDR_VAR 0 3
62114: PUSH
62115: LD_INT 15
62117: PPUSH
62118: LD_VAR 0 1
62122: PPUSH
62123: CALL_OW 321
62127: PUSH
62128: LD_INT 2
62130: EQUAL
62131: ST_TO_ADDR
62132: GO 62382
62134: LD_INT 30
62136: DOUBLE
62137: EQUAL
62138: IFTRUE 62142
62140: GO 62167
62142: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
62143: LD_ADDR_VAR 0 3
62147: PUSH
62148: LD_INT 20
62150: PPUSH
62151: LD_VAR 0 1
62155: PPUSH
62156: CALL_OW 321
62160: PUSH
62161: LD_INT 2
62163: EQUAL
62164: ST_TO_ADDR
62165: GO 62382
62167: LD_INT 28
62169: DOUBLE
62170: EQUAL
62171: IFTRUE 62181
62173: LD_INT 21
62175: DOUBLE
62176: EQUAL
62177: IFTRUE 62181
62179: GO 62206
62181: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
62182: LD_ADDR_VAR 0 3
62186: PUSH
62187: LD_INT 21
62189: PPUSH
62190: LD_VAR 0 1
62194: PPUSH
62195: CALL_OW 321
62199: PUSH
62200: LD_INT 2
62202: EQUAL
62203: ST_TO_ADDR
62204: GO 62382
62206: LD_INT 16
62208: DOUBLE
62209: EQUAL
62210: IFTRUE 62214
62212: GO 62241
62214: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
62215: LD_ADDR_VAR 0 3
62219: PUSH
62220: LD_EXP 83
62224: PPUSH
62225: LD_VAR 0 1
62229: PPUSH
62230: CALL_OW 321
62234: PUSH
62235: LD_INT 2
62237: EQUAL
62238: ST_TO_ADDR
62239: GO 62382
62241: LD_INT 19
62243: DOUBLE
62244: EQUAL
62245: IFTRUE 62255
62247: LD_INT 23
62249: DOUBLE
62250: EQUAL
62251: IFTRUE 62255
62253: GO 62282
62255: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
62256: LD_ADDR_VAR 0 3
62260: PUSH
62261: LD_EXP 82
62265: PPUSH
62266: LD_VAR 0 1
62270: PPUSH
62271: CALL_OW 321
62275: PUSH
62276: LD_INT 2
62278: EQUAL
62279: ST_TO_ADDR
62280: GO 62382
62282: LD_INT 17
62284: DOUBLE
62285: EQUAL
62286: IFTRUE 62290
62288: GO 62315
62290: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
62291: LD_ADDR_VAR 0 3
62295: PUSH
62296: LD_INT 39
62298: PPUSH
62299: LD_VAR 0 1
62303: PPUSH
62304: CALL_OW 321
62308: PUSH
62309: LD_INT 2
62311: EQUAL
62312: ST_TO_ADDR
62313: GO 62382
62315: LD_INT 18
62317: DOUBLE
62318: EQUAL
62319: IFTRUE 62323
62321: GO 62348
62323: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
62324: LD_ADDR_VAR 0 3
62328: PUSH
62329: LD_INT 40
62331: PPUSH
62332: LD_VAR 0 1
62336: PPUSH
62337: CALL_OW 321
62341: PUSH
62342: LD_INT 2
62344: EQUAL
62345: ST_TO_ADDR
62346: GO 62382
62348: LD_INT 27
62350: DOUBLE
62351: EQUAL
62352: IFTRUE 62356
62354: GO 62381
62356: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
62357: LD_ADDR_VAR 0 3
62361: PUSH
62362: LD_INT 35
62364: PPUSH
62365: LD_VAR 0 1
62369: PPUSH
62370: CALL_OW 321
62374: PUSH
62375: LD_INT 2
62377: EQUAL
62378: ST_TO_ADDR
62379: GO 62382
62381: POP
// end ;
62382: LD_VAR 0 3
62386: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
62387: LD_INT 0
62389: PPUSH
62390: PPUSH
62391: PPUSH
62392: PPUSH
62393: PPUSH
62394: PPUSH
62395: PPUSH
62396: PPUSH
62397: PPUSH
62398: PPUSH
62399: PPUSH
// result := false ;
62400: LD_ADDR_VAR 0 6
62404: PUSH
62405: LD_INT 0
62407: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
62408: LD_VAR 0 1
62412: NOT
62413: PUSH
62414: LD_VAR 0 1
62418: PPUSH
62419: CALL_OW 266
62423: PUSH
62424: LD_INT 0
62426: PUSH
62427: LD_INT 1
62429: PUSH
62430: EMPTY
62431: LIST
62432: LIST
62433: IN
62434: NOT
62435: OR
62436: PUSH
62437: LD_VAR 0 2
62441: NOT
62442: OR
62443: PUSH
62444: LD_VAR 0 5
62448: PUSH
62449: LD_INT 0
62451: PUSH
62452: LD_INT 1
62454: PUSH
62455: LD_INT 2
62457: PUSH
62458: LD_INT 3
62460: PUSH
62461: LD_INT 4
62463: PUSH
62464: LD_INT 5
62466: PUSH
62467: EMPTY
62468: LIST
62469: LIST
62470: LIST
62471: LIST
62472: LIST
62473: LIST
62474: IN
62475: NOT
62476: OR
62477: PUSH
62478: LD_VAR 0 3
62482: PPUSH
62483: LD_VAR 0 4
62487: PPUSH
62488: CALL_OW 488
62492: NOT
62493: OR
62494: IFFALSE 62498
// exit ;
62496: GO 63234
// side := GetSide ( depot ) ;
62498: LD_ADDR_VAR 0 9
62502: PUSH
62503: LD_VAR 0 1
62507: PPUSH
62508: CALL_OW 255
62512: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
62513: LD_VAR 0 9
62517: PPUSH
62518: LD_VAR 0 2
62522: PPUSH
62523: CALL 62007 0 2
62527: NOT
62528: IFFALSE 62532
// exit ;
62530: GO 63234
// pom := GetBase ( depot ) ;
62532: LD_ADDR_VAR 0 10
62536: PUSH
62537: LD_VAR 0 1
62541: PPUSH
62542: CALL_OW 274
62546: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
62547: LD_ADDR_VAR 0 11
62551: PUSH
62552: LD_VAR 0 2
62556: PPUSH
62557: LD_VAR 0 1
62561: PPUSH
62562: CALL_OW 248
62566: PPUSH
62567: CALL_OW 450
62571: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
62572: LD_VAR 0 10
62576: PPUSH
62577: LD_INT 1
62579: PPUSH
62580: CALL_OW 275
62584: PUSH
62585: LD_VAR 0 11
62589: PUSH
62590: LD_INT 1
62592: ARRAY
62593: GREATEREQUAL
62594: PUSH
62595: LD_VAR 0 10
62599: PPUSH
62600: LD_INT 2
62602: PPUSH
62603: CALL_OW 275
62607: PUSH
62608: LD_VAR 0 11
62612: PUSH
62613: LD_INT 2
62615: ARRAY
62616: GREATEREQUAL
62617: AND
62618: PUSH
62619: LD_VAR 0 10
62623: PPUSH
62624: LD_INT 3
62626: PPUSH
62627: CALL_OW 275
62631: PUSH
62632: LD_VAR 0 11
62636: PUSH
62637: LD_INT 3
62639: ARRAY
62640: GREATEREQUAL
62641: AND
62642: NOT
62643: IFFALSE 62647
// exit ;
62645: GO 63234
// if GetBType ( depot ) = b_depot then
62647: LD_VAR 0 1
62651: PPUSH
62652: CALL_OW 266
62656: PUSH
62657: LD_INT 0
62659: EQUAL
62660: IFFALSE 62672
// dist := 28 else
62662: LD_ADDR_VAR 0 14
62666: PUSH
62667: LD_INT 28
62669: ST_TO_ADDR
62670: GO 62680
// dist := 36 ;
62672: LD_ADDR_VAR 0 14
62676: PUSH
62677: LD_INT 36
62679: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
62680: LD_VAR 0 1
62684: PPUSH
62685: LD_VAR 0 3
62689: PPUSH
62690: LD_VAR 0 4
62694: PPUSH
62695: CALL_OW 297
62699: PUSH
62700: LD_VAR 0 14
62704: GREATER
62705: IFFALSE 62709
// exit ;
62707: GO 63234
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
62709: LD_ADDR_VAR 0 12
62713: PUSH
62714: LD_VAR 0 2
62718: PPUSH
62719: LD_VAR 0 3
62723: PPUSH
62724: LD_VAR 0 4
62728: PPUSH
62729: LD_VAR 0 5
62733: PPUSH
62734: LD_VAR 0 1
62738: PPUSH
62739: CALL_OW 248
62743: PPUSH
62744: LD_INT 0
62746: PPUSH
62747: CALL 63239 0 6
62751: ST_TO_ADDR
// if not hexes then
62752: LD_VAR 0 12
62756: NOT
62757: IFFALSE 62761
// exit ;
62759: GO 63234
// hex := GetHexInfo ( x , y ) ;
62761: LD_ADDR_VAR 0 15
62765: PUSH
62766: LD_VAR 0 3
62770: PPUSH
62771: LD_VAR 0 4
62775: PPUSH
62776: CALL_OW 546
62780: ST_TO_ADDR
// if hex [ 1 ] then
62781: LD_VAR 0 15
62785: PUSH
62786: LD_INT 1
62788: ARRAY
62789: IFFALSE 62793
// exit ;
62791: GO 63234
// height := hex [ 2 ] ;
62793: LD_ADDR_VAR 0 13
62797: PUSH
62798: LD_VAR 0 15
62802: PUSH
62803: LD_INT 2
62805: ARRAY
62806: ST_TO_ADDR
// for i = 1 to hexes do
62807: LD_ADDR_VAR 0 7
62811: PUSH
62812: DOUBLE
62813: LD_INT 1
62815: DEC
62816: ST_TO_ADDR
62817: LD_VAR 0 12
62821: PUSH
62822: FOR_TO
62823: IFFALSE 63153
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
62825: LD_VAR 0 12
62829: PUSH
62830: LD_VAR 0 7
62834: ARRAY
62835: PUSH
62836: LD_INT 1
62838: ARRAY
62839: PPUSH
62840: LD_VAR 0 12
62844: PUSH
62845: LD_VAR 0 7
62849: ARRAY
62850: PUSH
62851: LD_INT 2
62853: ARRAY
62854: PPUSH
62855: CALL_OW 488
62859: NOT
62860: PUSH
62861: LD_VAR 0 12
62865: PUSH
62866: LD_VAR 0 7
62870: ARRAY
62871: PUSH
62872: LD_INT 1
62874: ARRAY
62875: PPUSH
62876: LD_VAR 0 12
62880: PUSH
62881: LD_VAR 0 7
62885: ARRAY
62886: PUSH
62887: LD_INT 2
62889: ARRAY
62890: PPUSH
62891: CALL_OW 428
62895: PUSH
62896: LD_INT 0
62898: GREATER
62899: OR
62900: PUSH
62901: LD_VAR 0 12
62905: PUSH
62906: LD_VAR 0 7
62910: ARRAY
62911: PUSH
62912: LD_INT 1
62914: ARRAY
62915: PPUSH
62916: LD_VAR 0 12
62920: PUSH
62921: LD_VAR 0 7
62925: ARRAY
62926: PUSH
62927: LD_INT 2
62929: ARRAY
62930: PPUSH
62931: CALL_OW 351
62935: OR
62936: IFFALSE 62942
// exit ;
62938: POP
62939: POP
62940: GO 63234
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62942: LD_ADDR_VAR 0 8
62946: PUSH
62947: LD_VAR 0 12
62951: PUSH
62952: LD_VAR 0 7
62956: ARRAY
62957: PUSH
62958: LD_INT 1
62960: ARRAY
62961: PPUSH
62962: LD_VAR 0 12
62966: PUSH
62967: LD_VAR 0 7
62971: ARRAY
62972: PUSH
62973: LD_INT 2
62975: ARRAY
62976: PPUSH
62977: CALL_OW 546
62981: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
62982: LD_VAR 0 8
62986: PUSH
62987: LD_INT 1
62989: ARRAY
62990: PUSH
62991: LD_VAR 0 8
62995: PUSH
62996: LD_INT 2
62998: ARRAY
62999: PUSH
63000: LD_VAR 0 13
63004: PUSH
63005: LD_INT 2
63007: PLUS
63008: GREATER
63009: OR
63010: PUSH
63011: LD_VAR 0 8
63015: PUSH
63016: LD_INT 2
63018: ARRAY
63019: PUSH
63020: LD_VAR 0 13
63024: PUSH
63025: LD_INT 2
63027: MINUS
63028: LESS
63029: OR
63030: PUSH
63031: LD_VAR 0 8
63035: PUSH
63036: LD_INT 3
63038: ARRAY
63039: PUSH
63040: LD_INT 0
63042: PUSH
63043: LD_INT 8
63045: PUSH
63046: LD_INT 9
63048: PUSH
63049: LD_INT 10
63051: PUSH
63052: LD_INT 11
63054: PUSH
63055: LD_INT 12
63057: PUSH
63058: LD_INT 13
63060: PUSH
63061: LD_INT 16
63063: PUSH
63064: LD_INT 17
63066: PUSH
63067: LD_INT 18
63069: PUSH
63070: LD_INT 19
63072: PUSH
63073: LD_INT 20
63075: PUSH
63076: LD_INT 21
63078: PUSH
63079: EMPTY
63080: LIST
63081: LIST
63082: LIST
63083: LIST
63084: LIST
63085: LIST
63086: LIST
63087: LIST
63088: LIST
63089: LIST
63090: LIST
63091: LIST
63092: LIST
63093: IN
63094: NOT
63095: OR
63096: PUSH
63097: LD_VAR 0 8
63101: PUSH
63102: LD_INT 5
63104: ARRAY
63105: NOT
63106: OR
63107: PUSH
63108: LD_VAR 0 8
63112: PUSH
63113: LD_INT 6
63115: ARRAY
63116: PUSH
63117: LD_INT 1
63119: PUSH
63120: LD_INT 2
63122: PUSH
63123: LD_INT 7
63125: PUSH
63126: LD_INT 9
63128: PUSH
63129: LD_INT 10
63131: PUSH
63132: LD_INT 11
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: IN
63143: NOT
63144: OR
63145: IFFALSE 63151
// exit ;
63147: POP
63148: POP
63149: GO 63234
// end ;
63151: GO 62822
63153: POP
63154: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
63155: LD_VAR 0 9
63159: PPUSH
63160: LD_VAR 0 3
63164: PPUSH
63165: LD_VAR 0 4
63169: PPUSH
63170: LD_INT 20
63172: PPUSH
63173: CALL 55180 0 4
63177: PUSH
63178: LD_INT 4
63180: ARRAY
63181: IFFALSE 63185
// exit ;
63183: GO 63234
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
63185: LD_VAR 0 2
63189: PUSH
63190: LD_INT 29
63192: PUSH
63193: LD_INT 30
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: IN
63200: PUSH
63201: LD_VAR 0 3
63205: PPUSH
63206: LD_VAR 0 4
63210: PPUSH
63211: LD_VAR 0 9
63215: PPUSH
63216: CALL_OW 440
63220: NOT
63221: AND
63222: IFFALSE 63226
// exit ;
63224: GO 63234
// result := true ;
63226: LD_ADDR_VAR 0 6
63230: PUSH
63231: LD_INT 1
63233: ST_TO_ADDR
// end ;
63234: LD_VAR 0 6
63238: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
63239: LD_INT 0
63241: PPUSH
63242: PPUSH
63243: PPUSH
63244: PPUSH
63245: PPUSH
63246: PPUSH
63247: PPUSH
63248: PPUSH
63249: PPUSH
63250: PPUSH
63251: PPUSH
63252: PPUSH
63253: PPUSH
63254: PPUSH
63255: PPUSH
63256: PPUSH
63257: PPUSH
63258: PPUSH
63259: PPUSH
63260: PPUSH
63261: PPUSH
63262: PPUSH
63263: PPUSH
63264: PPUSH
63265: PPUSH
63266: PPUSH
63267: PPUSH
63268: PPUSH
63269: PPUSH
63270: PPUSH
63271: PPUSH
63272: PPUSH
63273: PPUSH
63274: PPUSH
63275: PPUSH
63276: PPUSH
63277: PPUSH
63278: PPUSH
63279: PPUSH
63280: PPUSH
63281: PPUSH
63282: PPUSH
63283: PPUSH
63284: PPUSH
63285: PPUSH
63286: PPUSH
63287: PPUSH
63288: PPUSH
63289: PPUSH
63290: PPUSH
63291: PPUSH
63292: PPUSH
63293: PPUSH
63294: PPUSH
63295: PPUSH
63296: PPUSH
63297: PPUSH
63298: PPUSH
// result = [ ] ;
63299: LD_ADDR_VAR 0 7
63303: PUSH
63304: EMPTY
63305: ST_TO_ADDR
// temp_list = [ ] ;
63306: LD_ADDR_VAR 0 9
63310: PUSH
63311: EMPTY
63312: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
63313: LD_VAR 0 4
63317: PUSH
63318: LD_INT 0
63320: PUSH
63321: LD_INT 1
63323: PUSH
63324: LD_INT 2
63326: PUSH
63327: LD_INT 3
63329: PUSH
63330: LD_INT 4
63332: PUSH
63333: LD_INT 5
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: LIST
63340: LIST
63341: LIST
63342: LIST
63343: IN
63344: NOT
63345: PUSH
63346: LD_VAR 0 1
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: LD_INT 1
63356: PUSH
63357: EMPTY
63358: LIST
63359: LIST
63360: IN
63361: PUSH
63362: LD_VAR 0 5
63366: PUSH
63367: LD_INT 1
63369: PUSH
63370: LD_INT 2
63372: PUSH
63373: LD_INT 3
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: LIST
63380: IN
63381: NOT
63382: AND
63383: OR
63384: IFFALSE 63388
// exit ;
63386: GO 81779
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
63388: LD_VAR 0 1
63392: PUSH
63393: LD_INT 6
63395: PUSH
63396: LD_INT 7
63398: PUSH
63399: LD_INT 8
63401: PUSH
63402: LD_INT 13
63404: PUSH
63405: LD_INT 12
63407: PUSH
63408: LD_INT 15
63410: PUSH
63411: LD_INT 11
63413: PUSH
63414: LD_INT 14
63416: PUSH
63417: LD_INT 10
63419: PUSH
63420: EMPTY
63421: LIST
63422: LIST
63423: LIST
63424: LIST
63425: LIST
63426: LIST
63427: LIST
63428: LIST
63429: LIST
63430: IN
63431: IFFALSE 63441
// btype = b_lab ;
63433: LD_ADDR_VAR 0 1
63437: PUSH
63438: LD_INT 6
63440: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
63441: LD_VAR 0 6
63445: PUSH
63446: LD_INT 0
63448: PUSH
63449: LD_INT 1
63451: PUSH
63452: LD_INT 2
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: LIST
63459: IN
63460: NOT
63461: PUSH
63462: LD_VAR 0 1
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: LD_INT 1
63472: PUSH
63473: LD_INT 2
63475: PUSH
63476: LD_INT 3
63478: PUSH
63479: LD_INT 6
63481: PUSH
63482: LD_INT 36
63484: PUSH
63485: LD_INT 4
63487: PUSH
63488: LD_INT 5
63490: PUSH
63491: LD_INT 31
63493: PUSH
63494: LD_INT 32
63496: PUSH
63497: LD_INT 33
63499: PUSH
63500: EMPTY
63501: LIST
63502: LIST
63503: LIST
63504: LIST
63505: LIST
63506: LIST
63507: LIST
63508: LIST
63509: LIST
63510: LIST
63511: LIST
63512: IN
63513: NOT
63514: PUSH
63515: LD_VAR 0 6
63519: PUSH
63520: LD_INT 1
63522: EQUAL
63523: AND
63524: OR
63525: PUSH
63526: LD_VAR 0 1
63530: PUSH
63531: LD_INT 2
63533: PUSH
63534: LD_INT 3
63536: PUSH
63537: EMPTY
63538: LIST
63539: LIST
63540: IN
63541: NOT
63542: PUSH
63543: LD_VAR 0 6
63547: PUSH
63548: LD_INT 2
63550: EQUAL
63551: AND
63552: OR
63553: IFFALSE 63563
// mode = 0 ;
63555: LD_ADDR_VAR 0 6
63559: PUSH
63560: LD_INT 0
63562: ST_TO_ADDR
// case mode of 0 :
63563: LD_VAR 0 6
63567: PUSH
63568: LD_INT 0
63570: DOUBLE
63571: EQUAL
63572: IFTRUE 63576
63574: GO 75029
63576: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
63577: LD_ADDR_VAR 0 11
63581: PUSH
63582: LD_INT 0
63584: PUSH
63585: LD_INT 0
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: PUSH
63592: LD_INT 0
63594: PUSH
63595: LD_INT 1
63597: NEG
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 1
63605: PUSH
63606: LD_INT 0
63608: PUSH
63609: EMPTY
63610: LIST
63611: LIST
63612: PUSH
63613: LD_INT 1
63615: PUSH
63616: LD_INT 1
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: PUSH
63623: LD_INT 0
63625: PUSH
63626: LD_INT 1
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PUSH
63633: LD_INT 1
63635: NEG
63636: PUSH
63637: LD_INT 0
63639: PUSH
63640: EMPTY
63641: LIST
63642: LIST
63643: PUSH
63644: LD_INT 1
63646: NEG
63647: PUSH
63648: LD_INT 1
63650: NEG
63651: PUSH
63652: EMPTY
63653: LIST
63654: LIST
63655: PUSH
63656: LD_INT 1
63658: NEG
63659: PUSH
63660: LD_INT 2
63662: NEG
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 0
63670: PUSH
63671: LD_INT 2
63673: NEG
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: PUSH
63682: LD_INT 1
63684: NEG
63685: PUSH
63686: EMPTY
63687: LIST
63688: LIST
63689: PUSH
63690: LD_INT 1
63692: PUSH
63693: LD_INT 2
63695: PUSH
63696: EMPTY
63697: LIST
63698: LIST
63699: PUSH
63700: LD_INT 0
63702: PUSH
63703: LD_INT 2
63705: PUSH
63706: EMPTY
63707: LIST
63708: LIST
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: EMPTY
63718: LIST
63719: LIST
63720: PUSH
63721: LD_INT 1
63723: PUSH
63724: LD_INT 3
63726: PUSH
63727: EMPTY
63728: LIST
63729: LIST
63730: PUSH
63731: LD_INT 0
63733: PUSH
63734: LD_INT 3
63736: PUSH
63737: EMPTY
63738: LIST
63739: LIST
63740: PUSH
63741: LD_INT 1
63743: NEG
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: EMPTY
63749: LIST
63750: LIST
63751: PUSH
63752: EMPTY
63753: LIST
63754: LIST
63755: LIST
63756: LIST
63757: LIST
63758: LIST
63759: LIST
63760: LIST
63761: LIST
63762: LIST
63763: LIST
63764: LIST
63765: LIST
63766: LIST
63767: LIST
63768: LIST
63769: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
63770: LD_ADDR_VAR 0 12
63774: PUSH
63775: LD_INT 0
63777: PUSH
63778: LD_INT 0
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: LD_INT 0
63787: PUSH
63788: LD_INT 1
63790: NEG
63791: PUSH
63792: EMPTY
63793: LIST
63794: LIST
63795: PUSH
63796: LD_INT 1
63798: PUSH
63799: LD_INT 0
63801: PUSH
63802: EMPTY
63803: LIST
63804: LIST
63805: PUSH
63806: LD_INT 1
63808: PUSH
63809: LD_INT 1
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: PUSH
63816: LD_INT 0
63818: PUSH
63819: LD_INT 1
63821: PUSH
63822: EMPTY
63823: LIST
63824: LIST
63825: PUSH
63826: LD_INT 1
63828: NEG
63829: PUSH
63830: LD_INT 0
63832: PUSH
63833: EMPTY
63834: LIST
63835: LIST
63836: PUSH
63837: LD_INT 1
63839: NEG
63840: PUSH
63841: LD_INT 1
63843: NEG
63844: PUSH
63845: EMPTY
63846: LIST
63847: LIST
63848: PUSH
63849: LD_INT 1
63851: PUSH
63852: LD_INT 1
63854: NEG
63855: PUSH
63856: EMPTY
63857: LIST
63858: LIST
63859: PUSH
63860: LD_INT 2
63862: PUSH
63863: LD_INT 0
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: LD_INT 1
63875: PUSH
63876: EMPTY
63877: LIST
63878: LIST
63879: PUSH
63880: LD_INT 1
63882: NEG
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 2
63893: NEG
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 2
63904: NEG
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 2
63916: NEG
63917: PUSH
63918: LD_INT 1
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 3
63927: NEG
63928: PUSH
63929: LD_INT 0
63931: PUSH
63932: EMPTY
63933: LIST
63934: LIST
63935: PUSH
63936: LD_INT 3
63938: NEG
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: EMPTY
63949: LIST
63950: LIST
63951: LIST
63952: LIST
63953: LIST
63954: LIST
63955: LIST
63956: LIST
63957: LIST
63958: LIST
63959: LIST
63960: LIST
63961: LIST
63962: LIST
63963: LIST
63964: LIST
63965: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
63966: LD_ADDR_VAR 0 13
63970: PUSH
63971: LD_INT 0
63973: PUSH
63974: LD_INT 0
63976: PUSH
63977: EMPTY
63978: LIST
63979: LIST
63980: PUSH
63981: LD_INT 0
63983: PUSH
63984: LD_INT 1
63986: NEG
63987: PUSH
63988: EMPTY
63989: LIST
63990: LIST
63991: PUSH
63992: LD_INT 1
63994: PUSH
63995: LD_INT 0
63997: PUSH
63998: EMPTY
63999: LIST
64000: LIST
64001: PUSH
64002: LD_INT 1
64004: PUSH
64005: LD_INT 1
64007: PUSH
64008: EMPTY
64009: LIST
64010: LIST
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: EMPTY
64019: LIST
64020: LIST
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: PUSH
64026: LD_INT 0
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 1
64035: NEG
64036: PUSH
64037: LD_INT 1
64039: NEG
64040: PUSH
64041: EMPTY
64042: LIST
64043: LIST
64044: PUSH
64045: LD_INT 1
64047: NEG
64048: PUSH
64049: LD_INT 2
64051: NEG
64052: PUSH
64053: EMPTY
64054: LIST
64055: LIST
64056: PUSH
64057: LD_INT 2
64059: PUSH
64060: LD_INT 1
64062: PUSH
64063: EMPTY
64064: LIST
64065: LIST
64066: PUSH
64067: LD_INT 2
64069: PUSH
64070: LD_INT 2
64072: PUSH
64073: EMPTY
64074: LIST
64075: LIST
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: LD_INT 2
64082: PUSH
64083: EMPTY
64084: LIST
64085: LIST
64086: PUSH
64087: LD_INT 2
64089: NEG
64090: PUSH
64091: LD_INT 1
64093: NEG
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: PUSH
64099: LD_INT 2
64101: NEG
64102: PUSH
64103: LD_INT 2
64105: NEG
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: PUSH
64111: LD_INT 2
64113: NEG
64114: PUSH
64115: LD_INT 3
64117: NEG
64118: PUSH
64119: EMPTY
64120: LIST
64121: LIST
64122: PUSH
64123: LD_INT 3
64125: NEG
64126: PUSH
64127: LD_INT 2
64129: NEG
64130: PUSH
64131: EMPTY
64132: LIST
64133: LIST
64134: PUSH
64135: LD_INT 3
64137: NEG
64138: PUSH
64139: LD_INT 3
64141: NEG
64142: PUSH
64143: EMPTY
64144: LIST
64145: LIST
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: LIST
64162: LIST
64163: LIST
64164: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64165: LD_ADDR_VAR 0 14
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: LD_INT 0
64175: PUSH
64176: EMPTY
64177: LIST
64178: LIST
64179: PUSH
64180: LD_INT 0
64182: PUSH
64183: LD_INT 1
64185: NEG
64186: PUSH
64187: EMPTY
64188: LIST
64189: LIST
64190: PUSH
64191: LD_INT 1
64193: PUSH
64194: LD_INT 0
64196: PUSH
64197: EMPTY
64198: LIST
64199: LIST
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: LD_INT 1
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: PUSH
64211: LD_INT 0
64213: PUSH
64214: LD_INT 1
64216: PUSH
64217: EMPTY
64218: LIST
64219: LIST
64220: PUSH
64221: LD_INT 1
64223: NEG
64224: PUSH
64225: LD_INT 0
64227: PUSH
64228: EMPTY
64229: LIST
64230: LIST
64231: PUSH
64232: LD_INT 1
64234: NEG
64235: PUSH
64236: LD_INT 1
64238: NEG
64239: PUSH
64240: EMPTY
64241: LIST
64242: LIST
64243: PUSH
64244: LD_INT 1
64246: NEG
64247: PUSH
64248: LD_INT 2
64250: NEG
64251: PUSH
64252: EMPTY
64253: LIST
64254: LIST
64255: PUSH
64256: LD_INT 0
64258: PUSH
64259: LD_INT 2
64261: NEG
64262: PUSH
64263: EMPTY
64264: LIST
64265: LIST
64266: PUSH
64267: LD_INT 1
64269: PUSH
64270: LD_INT 1
64272: NEG
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: PUSH
64281: LD_INT 2
64283: PUSH
64284: EMPTY
64285: LIST
64286: LIST
64287: PUSH
64288: LD_INT 0
64290: PUSH
64291: LD_INT 2
64293: PUSH
64294: EMPTY
64295: LIST
64296: LIST
64297: PUSH
64298: LD_INT 1
64300: NEG
64301: PUSH
64302: LD_INT 1
64304: PUSH
64305: EMPTY
64306: LIST
64307: LIST
64308: PUSH
64309: LD_INT 1
64311: NEG
64312: PUSH
64313: LD_INT 3
64315: NEG
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 0
64323: PUSH
64324: LD_INT 3
64326: NEG
64327: PUSH
64328: EMPTY
64329: LIST
64330: LIST
64331: PUSH
64332: LD_INT 1
64334: PUSH
64335: LD_INT 2
64337: NEG
64338: PUSH
64339: EMPTY
64340: LIST
64341: LIST
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: LIST
64347: LIST
64348: LIST
64349: LIST
64350: LIST
64351: LIST
64352: LIST
64353: LIST
64354: LIST
64355: LIST
64356: LIST
64357: LIST
64358: LIST
64359: LIST
64360: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
64361: LD_ADDR_VAR 0 15
64365: PUSH
64366: LD_INT 0
64368: PUSH
64369: LD_INT 0
64371: PUSH
64372: EMPTY
64373: LIST
64374: LIST
64375: PUSH
64376: LD_INT 0
64378: PUSH
64379: LD_INT 1
64381: NEG
64382: PUSH
64383: EMPTY
64384: LIST
64385: LIST
64386: PUSH
64387: LD_INT 1
64389: PUSH
64390: LD_INT 0
64392: PUSH
64393: EMPTY
64394: LIST
64395: LIST
64396: PUSH
64397: LD_INT 1
64399: PUSH
64400: LD_INT 1
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 0
64409: PUSH
64410: LD_INT 1
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: NEG
64420: PUSH
64421: LD_INT 0
64423: PUSH
64424: EMPTY
64425: LIST
64426: LIST
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: LD_INT 1
64434: NEG
64435: PUSH
64436: EMPTY
64437: LIST
64438: LIST
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: LD_INT 1
64445: NEG
64446: PUSH
64447: EMPTY
64448: LIST
64449: LIST
64450: PUSH
64451: LD_INT 2
64453: PUSH
64454: LD_INT 0
64456: PUSH
64457: EMPTY
64458: LIST
64459: LIST
64460: PUSH
64461: LD_INT 2
64463: PUSH
64464: LD_INT 1
64466: PUSH
64467: EMPTY
64468: LIST
64469: LIST
64470: PUSH
64471: LD_INT 1
64473: NEG
64474: PUSH
64475: LD_INT 1
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 2
64484: NEG
64485: PUSH
64486: LD_INT 0
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 2
64495: NEG
64496: PUSH
64497: LD_INT 1
64499: NEG
64500: PUSH
64501: EMPTY
64502: LIST
64503: LIST
64504: PUSH
64505: LD_INT 2
64507: PUSH
64508: LD_INT 1
64510: NEG
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: PUSH
64516: LD_INT 3
64518: PUSH
64519: LD_INT 0
64521: PUSH
64522: EMPTY
64523: LIST
64524: LIST
64525: PUSH
64526: LD_INT 3
64528: PUSH
64529: LD_INT 1
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: PUSH
64536: EMPTY
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: LIST
64552: LIST
64553: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
64554: LD_ADDR_VAR 0 16
64558: PUSH
64559: LD_INT 0
64561: PUSH
64562: LD_INT 0
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: LD_INT 1
64574: NEG
64575: PUSH
64576: EMPTY
64577: LIST
64578: LIST
64579: PUSH
64580: LD_INT 1
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: EMPTY
64587: LIST
64588: LIST
64589: PUSH
64590: LD_INT 1
64592: PUSH
64593: LD_INT 1
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 0
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 1
64612: NEG
64613: PUSH
64614: LD_INT 0
64616: PUSH
64617: EMPTY
64618: LIST
64619: LIST
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: LD_INT 1
64627: NEG
64628: PUSH
64629: EMPTY
64630: LIST
64631: LIST
64632: PUSH
64633: LD_INT 1
64635: NEG
64636: PUSH
64637: LD_INT 2
64639: NEG
64640: PUSH
64641: EMPTY
64642: LIST
64643: LIST
64644: PUSH
64645: LD_INT 2
64647: PUSH
64648: LD_INT 1
64650: PUSH
64651: EMPTY
64652: LIST
64653: LIST
64654: PUSH
64655: LD_INT 2
64657: PUSH
64658: LD_INT 2
64660: PUSH
64661: EMPTY
64662: LIST
64663: LIST
64664: PUSH
64665: LD_INT 1
64667: PUSH
64668: LD_INT 2
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 2
64677: NEG
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 2
64689: NEG
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: LD_INT 3
64701: PUSH
64702: LD_INT 2
64704: PUSH
64705: EMPTY
64706: LIST
64707: LIST
64708: PUSH
64709: LD_INT 3
64711: PUSH
64712: LD_INT 3
64714: PUSH
64715: EMPTY
64716: LIST
64717: LIST
64718: PUSH
64719: LD_INT 2
64721: PUSH
64722: LD_INT 3
64724: PUSH
64725: EMPTY
64726: LIST
64727: LIST
64728: PUSH
64729: EMPTY
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: LIST
64746: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64747: LD_ADDR_VAR 0 17
64751: PUSH
64752: LD_INT 0
64754: PUSH
64755: LD_INT 0
64757: PUSH
64758: EMPTY
64759: LIST
64760: LIST
64761: PUSH
64762: LD_INT 0
64764: PUSH
64765: LD_INT 1
64767: NEG
64768: PUSH
64769: EMPTY
64770: LIST
64771: LIST
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: EMPTY
64780: LIST
64781: LIST
64782: PUSH
64783: LD_INT 1
64785: PUSH
64786: LD_INT 1
64788: PUSH
64789: EMPTY
64790: LIST
64791: LIST
64792: PUSH
64793: LD_INT 0
64795: PUSH
64796: LD_INT 1
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: LD_INT 0
64809: PUSH
64810: EMPTY
64811: LIST
64812: LIST
64813: PUSH
64814: LD_INT 1
64816: NEG
64817: PUSH
64818: LD_INT 1
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 1
64828: NEG
64829: PUSH
64830: LD_INT 2
64832: NEG
64833: PUSH
64834: EMPTY
64835: LIST
64836: LIST
64837: PUSH
64838: LD_INT 0
64840: PUSH
64841: LD_INT 2
64843: NEG
64844: PUSH
64845: EMPTY
64846: LIST
64847: LIST
64848: PUSH
64849: LD_INT 1
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: EMPTY
64857: LIST
64858: LIST
64859: PUSH
64860: LD_INT 2
64862: PUSH
64863: LD_INT 0
64865: PUSH
64866: EMPTY
64867: LIST
64868: LIST
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: LD_INT 1
64875: PUSH
64876: EMPTY
64877: LIST
64878: LIST
64879: PUSH
64880: LD_INT 2
64882: PUSH
64883: LD_INT 2
64885: PUSH
64886: EMPTY
64887: LIST
64888: LIST
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: LD_INT 2
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 0
64902: PUSH
64903: LD_INT 2
64905: PUSH
64906: EMPTY
64907: LIST
64908: LIST
64909: PUSH
64910: LD_INT 1
64912: NEG
64913: PUSH
64914: LD_INT 1
64916: PUSH
64917: EMPTY
64918: LIST
64919: LIST
64920: PUSH
64921: LD_INT 2
64923: NEG
64924: PUSH
64925: LD_INT 0
64927: PUSH
64928: EMPTY
64929: LIST
64930: LIST
64931: PUSH
64932: LD_INT 2
64934: NEG
64935: PUSH
64936: LD_INT 1
64938: NEG
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: PUSH
64944: LD_INT 2
64946: NEG
64947: PUSH
64948: LD_INT 2
64950: NEG
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: LIST
64960: LIST
64961: LIST
64962: LIST
64963: LIST
64964: LIST
64965: LIST
64966: LIST
64967: LIST
64968: LIST
64969: LIST
64970: LIST
64971: LIST
64972: LIST
64973: LIST
64974: LIST
64975: LIST
64976: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
64977: LD_ADDR_VAR 0 18
64981: PUSH
64982: LD_INT 0
64984: PUSH
64985: LD_INT 0
64987: PUSH
64988: EMPTY
64989: LIST
64990: LIST
64991: PUSH
64992: LD_INT 0
64994: PUSH
64995: LD_INT 1
64997: NEG
64998: PUSH
64999: EMPTY
65000: LIST
65001: LIST
65002: PUSH
65003: LD_INT 1
65005: PUSH
65006: LD_INT 0
65008: PUSH
65009: EMPTY
65010: LIST
65011: LIST
65012: PUSH
65013: LD_INT 1
65015: PUSH
65016: LD_INT 1
65018: PUSH
65019: EMPTY
65020: LIST
65021: LIST
65022: PUSH
65023: LD_INT 0
65025: PUSH
65026: LD_INT 1
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: PUSH
65033: LD_INT 1
65035: NEG
65036: PUSH
65037: LD_INT 0
65039: PUSH
65040: EMPTY
65041: LIST
65042: LIST
65043: PUSH
65044: LD_INT 1
65046: NEG
65047: PUSH
65048: LD_INT 1
65050: NEG
65051: PUSH
65052: EMPTY
65053: LIST
65054: LIST
65055: PUSH
65056: LD_INT 1
65058: NEG
65059: PUSH
65060: LD_INT 2
65062: NEG
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: EMPTY
65076: LIST
65077: LIST
65078: PUSH
65079: LD_INT 1
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: EMPTY
65087: LIST
65088: LIST
65089: PUSH
65090: LD_INT 2
65092: PUSH
65093: LD_INT 0
65095: PUSH
65096: EMPTY
65097: LIST
65098: LIST
65099: PUSH
65100: LD_INT 2
65102: PUSH
65103: LD_INT 1
65105: PUSH
65106: EMPTY
65107: LIST
65108: LIST
65109: PUSH
65110: LD_INT 2
65112: PUSH
65113: LD_INT 2
65115: PUSH
65116: EMPTY
65117: LIST
65118: LIST
65119: PUSH
65120: LD_INT 1
65122: PUSH
65123: LD_INT 2
65125: PUSH
65126: EMPTY
65127: LIST
65128: LIST
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 2
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 1
65142: NEG
65143: PUSH
65144: LD_INT 1
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 2
65153: NEG
65154: PUSH
65155: LD_INT 0
65157: PUSH
65158: EMPTY
65159: LIST
65160: LIST
65161: PUSH
65162: LD_INT 2
65164: NEG
65165: PUSH
65166: LD_INT 1
65168: NEG
65169: PUSH
65170: EMPTY
65171: LIST
65172: LIST
65173: PUSH
65174: LD_INT 2
65176: NEG
65177: PUSH
65178: LD_INT 2
65180: NEG
65181: PUSH
65182: EMPTY
65183: LIST
65184: LIST
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: LIST
65190: LIST
65191: LIST
65192: LIST
65193: LIST
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65207: LD_ADDR_VAR 0 19
65211: PUSH
65212: LD_INT 0
65214: PUSH
65215: LD_INT 0
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 0
65224: PUSH
65225: LD_INT 1
65227: NEG
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 1
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: EMPTY
65240: LIST
65241: LIST
65242: PUSH
65243: LD_INT 1
65245: PUSH
65246: LD_INT 1
65248: PUSH
65249: EMPTY
65250: LIST
65251: LIST
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: LD_INT 1
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 1
65265: NEG
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: EMPTY
65271: LIST
65272: LIST
65273: PUSH
65274: LD_INT 1
65276: NEG
65277: PUSH
65278: LD_INT 1
65280: NEG
65281: PUSH
65282: EMPTY
65283: LIST
65284: LIST
65285: PUSH
65286: LD_INT 1
65288: NEG
65289: PUSH
65290: LD_INT 2
65292: NEG
65293: PUSH
65294: EMPTY
65295: LIST
65296: LIST
65297: PUSH
65298: LD_INT 0
65300: PUSH
65301: LD_INT 2
65303: NEG
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: LD_INT 1
65314: NEG
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: LD_INT 2
65322: PUSH
65323: LD_INT 0
65325: PUSH
65326: EMPTY
65327: LIST
65328: LIST
65329: PUSH
65330: LD_INT 2
65332: PUSH
65333: LD_INT 1
65335: PUSH
65336: EMPTY
65337: LIST
65338: LIST
65339: PUSH
65340: LD_INT 2
65342: PUSH
65343: LD_INT 2
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PUSH
65350: LD_INT 1
65352: PUSH
65353: LD_INT 2
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 0
65362: PUSH
65363: LD_INT 2
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 1
65372: NEG
65373: PUSH
65374: LD_INT 1
65376: PUSH
65377: EMPTY
65378: LIST
65379: LIST
65380: PUSH
65381: LD_INT 2
65383: NEG
65384: PUSH
65385: LD_INT 0
65387: PUSH
65388: EMPTY
65389: LIST
65390: LIST
65391: PUSH
65392: LD_INT 2
65394: NEG
65395: PUSH
65396: LD_INT 1
65398: NEG
65399: PUSH
65400: EMPTY
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 2
65406: NEG
65407: PUSH
65408: LD_INT 2
65410: NEG
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: PUSH
65416: EMPTY
65417: LIST
65418: LIST
65419: LIST
65420: LIST
65421: LIST
65422: LIST
65423: LIST
65424: LIST
65425: LIST
65426: LIST
65427: LIST
65428: LIST
65429: LIST
65430: LIST
65431: LIST
65432: LIST
65433: LIST
65434: LIST
65435: LIST
65436: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65437: LD_ADDR_VAR 0 20
65441: PUSH
65442: LD_INT 0
65444: PUSH
65445: LD_INT 0
65447: PUSH
65448: EMPTY
65449: LIST
65450: LIST
65451: PUSH
65452: LD_INT 0
65454: PUSH
65455: LD_INT 1
65457: NEG
65458: PUSH
65459: EMPTY
65460: LIST
65461: LIST
65462: PUSH
65463: LD_INT 1
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: EMPTY
65470: LIST
65471: LIST
65472: PUSH
65473: LD_INT 1
65475: PUSH
65476: LD_INT 1
65478: PUSH
65479: EMPTY
65480: LIST
65481: LIST
65482: PUSH
65483: LD_INT 0
65485: PUSH
65486: LD_INT 1
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: PUSH
65493: LD_INT 1
65495: NEG
65496: PUSH
65497: LD_INT 0
65499: PUSH
65500: EMPTY
65501: LIST
65502: LIST
65503: PUSH
65504: LD_INT 1
65506: NEG
65507: PUSH
65508: LD_INT 1
65510: NEG
65511: PUSH
65512: EMPTY
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 1
65518: NEG
65519: PUSH
65520: LD_INT 2
65522: NEG
65523: PUSH
65524: EMPTY
65525: LIST
65526: LIST
65527: PUSH
65528: LD_INT 0
65530: PUSH
65531: LD_INT 2
65533: NEG
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: LD_INT 1
65544: NEG
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 2
65552: PUSH
65553: LD_INT 0
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 2
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 2
65572: PUSH
65573: LD_INT 2
65575: PUSH
65576: EMPTY
65577: LIST
65578: LIST
65579: PUSH
65580: LD_INT 1
65582: PUSH
65583: LD_INT 2
65585: PUSH
65586: EMPTY
65587: LIST
65588: LIST
65589: PUSH
65590: LD_INT 0
65592: PUSH
65593: LD_INT 2
65595: PUSH
65596: EMPTY
65597: LIST
65598: LIST
65599: PUSH
65600: LD_INT 1
65602: NEG
65603: PUSH
65604: LD_INT 1
65606: PUSH
65607: EMPTY
65608: LIST
65609: LIST
65610: PUSH
65611: LD_INT 2
65613: NEG
65614: PUSH
65615: LD_INT 0
65617: PUSH
65618: EMPTY
65619: LIST
65620: LIST
65621: PUSH
65622: LD_INT 2
65624: NEG
65625: PUSH
65626: LD_INT 1
65628: NEG
65629: PUSH
65630: EMPTY
65631: LIST
65632: LIST
65633: PUSH
65634: LD_INT 2
65636: NEG
65637: PUSH
65638: LD_INT 2
65640: NEG
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: LIST
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: LIST
65655: LIST
65656: LIST
65657: LIST
65658: LIST
65659: LIST
65660: LIST
65661: LIST
65662: LIST
65663: LIST
65664: LIST
65665: LIST
65666: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65667: LD_ADDR_VAR 0 21
65671: PUSH
65672: LD_INT 0
65674: PUSH
65675: LD_INT 0
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 0
65684: PUSH
65685: LD_INT 1
65687: NEG
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: PUSH
65693: LD_INT 1
65695: PUSH
65696: LD_INT 0
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 1
65705: PUSH
65706: LD_INT 1
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: PUSH
65713: LD_INT 0
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 1
65725: NEG
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: LD_INT 2
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 0
65760: PUSH
65761: LD_INT 2
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 1
65771: PUSH
65772: LD_INT 1
65774: NEG
65775: PUSH
65776: EMPTY
65777: LIST
65778: LIST
65779: PUSH
65780: LD_INT 2
65782: PUSH
65783: LD_INT 0
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: LD_INT 2
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 0
65822: PUSH
65823: LD_INT 2
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 1
65832: NEG
65833: PUSH
65834: LD_INT 1
65836: PUSH
65837: EMPTY
65838: LIST
65839: LIST
65840: PUSH
65841: LD_INT 2
65843: NEG
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 2
65854: NEG
65855: PUSH
65856: LD_INT 1
65858: NEG
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 2
65866: NEG
65867: PUSH
65868: LD_INT 2
65870: NEG
65871: PUSH
65872: EMPTY
65873: LIST
65874: LIST
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: LIST
65892: LIST
65893: LIST
65894: LIST
65895: LIST
65896: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65897: LD_ADDR_VAR 0 22
65901: PUSH
65902: LD_INT 0
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 0
65914: PUSH
65915: LD_INT 1
65917: NEG
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 1
65925: PUSH
65926: LD_INT 0
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: LD_INT 1
65935: PUSH
65936: LD_INT 1
65938: PUSH
65939: EMPTY
65940: LIST
65941: LIST
65942: PUSH
65943: LD_INT 0
65945: PUSH
65946: LD_INT 1
65948: PUSH
65949: EMPTY
65950: LIST
65951: LIST
65952: PUSH
65953: LD_INT 1
65955: NEG
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 1
65966: NEG
65967: PUSH
65968: LD_INT 1
65970: NEG
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: LD_INT 2
65982: NEG
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: PUSH
65988: LD_INT 0
65990: PUSH
65991: LD_INT 2
65993: NEG
65994: PUSH
65995: EMPTY
65996: LIST
65997: LIST
65998: PUSH
65999: LD_INT 1
66001: PUSH
66002: LD_INT 1
66004: NEG
66005: PUSH
66006: EMPTY
66007: LIST
66008: LIST
66009: PUSH
66010: LD_INT 2
66012: PUSH
66013: LD_INT 0
66015: PUSH
66016: EMPTY
66017: LIST
66018: LIST
66019: PUSH
66020: LD_INT 2
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: EMPTY
66027: LIST
66028: LIST
66029: PUSH
66030: LD_INT 2
66032: PUSH
66033: LD_INT 2
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 1
66042: PUSH
66043: LD_INT 2
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 0
66052: PUSH
66053: LD_INT 2
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 1
66062: NEG
66063: PUSH
66064: LD_INT 1
66066: PUSH
66067: EMPTY
66068: LIST
66069: LIST
66070: PUSH
66071: LD_INT 2
66073: NEG
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: NEG
66085: PUSH
66086: LD_INT 1
66088: NEG
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 2
66096: NEG
66097: PUSH
66098: LD_INT 2
66100: NEG
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: LIST
66122: LIST
66123: LIST
66124: LIST
66125: LIST
66126: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66127: LD_ADDR_VAR 0 23
66131: PUSH
66132: LD_INT 0
66134: PUSH
66135: LD_INT 0
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 0
66144: PUSH
66145: LD_INT 1
66147: NEG
66148: PUSH
66149: EMPTY
66150: LIST
66151: LIST
66152: PUSH
66153: LD_INT 1
66155: PUSH
66156: LD_INT 0
66158: PUSH
66159: EMPTY
66160: LIST
66161: LIST
66162: PUSH
66163: LD_INT 1
66165: PUSH
66166: LD_INT 1
66168: PUSH
66169: EMPTY
66170: LIST
66171: LIST
66172: PUSH
66173: LD_INT 0
66175: PUSH
66176: LD_INT 1
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 1
66196: NEG
66197: PUSH
66198: LD_INT 1
66200: NEG
66201: PUSH
66202: EMPTY
66203: LIST
66204: LIST
66205: PUSH
66206: LD_INT 1
66208: NEG
66209: PUSH
66210: LD_INT 2
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 0
66220: PUSH
66221: LD_INT 2
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 1
66231: PUSH
66232: LD_INT 1
66234: NEG
66235: PUSH
66236: EMPTY
66237: LIST
66238: LIST
66239: PUSH
66240: LD_INT 2
66242: PUSH
66243: LD_INT 0
66245: PUSH
66246: EMPTY
66247: LIST
66248: LIST
66249: PUSH
66250: LD_INT 2
66252: PUSH
66253: LD_INT 1
66255: PUSH
66256: EMPTY
66257: LIST
66258: LIST
66259: PUSH
66260: LD_INT 2
66262: PUSH
66263: LD_INT 2
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 1
66272: PUSH
66273: LD_INT 2
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 0
66282: PUSH
66283: LD_INT 2
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 1
66292: NEG
66293: PUSH
66294: LD_INT 1
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 2
66303: NEG
66304: PUSH
66305: LD_INT 0
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 2
66314: NEG
66315: PUSH
66316: LD_INT 1
66318: NEG
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 2
66326: NEG
66327: PUSH
66328: LD_INT 2
66330: NEG
66331: PUSH
66332: EMPTY
66333: LIST
66334: LIST
66335: PUSH
66336: LD_INT 2
66338: NEG
66339: PUSH
66340: LD_INT 3
66342: NEG
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 1
66350: NEG
66351: PUSH
66352: LD_INT 3
66354: NEG
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 1
66362: PUSH
66363: LD_INT 2
66365: NEG
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: LD_INT 2
66373: PUSH
66374: LD_INT 1
66376: NEG
66377: PUSH
66378: EMPTY
66379: LIST
66380: LIST
66381: PUSH
66382: EMPTY
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
66407: LD_ADDR_VAR 0 24
66411: PUSH
66412: LD_INT 0
66414: PUSH
66415: LD_INT 0
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 0
66424: PUSH
66425: LD_INT 1
66427: NEG
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 1
66435: PUSH
66436: LD_INT 0
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 1
66445: PUSH
66446: LD_INT 1
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 0
66455: PUSH
66456: LD_INT 1
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: NEG
66466: PUSH
66467: LD_INT 0
66469: PUSH
66470: EMPTY
66471: LIST
66472: LIST
66473: PUSH
66474: LD_INT 1
66476: NEG
66477: PUSH
66478: LD_INT 1
66480: NEG
66481: PUSH
66482: EMPTY
66483: LIST
66484: LIST
66485: PUSH
66486: LD_INT 1
66488: NEG
66489: PUSH
66490: LD_INT 2
66492: NEG
66493: PUSH
66494: EMPTY
66495: LIST
66496: LIST
66497: PUSH
66498: LD_INT 0
66500: PUSH
66501: LD_INT 2
66503: NEG
66504: PUSH
66505: EMPTY
66506: LIST
66507: LIST
66508: PUSH
66509: LD_INT 1
66511: PUSH
66512: LD_INT 1
66514: NEG
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 2
66532: PUSH
66533: LD_INT 1
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 2
66542: PUSH
66543: LD_INT 2
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 1
66552: PUSH
66553: LD_INT 2
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 0
66562: PUSH
66563: LD_INT 2
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 1
66572: NEG
66573: PUSH
66574: LD_INT 1
66576: PUSH
66577: EMPTY
66578: LIST
66579: LIST
66580: PUSH
66581: LD_INT 2
66583: NEG
66584: PUSH
66585: LD_INT 0
66587: PUSH
66588: EMPTY
66589: LIST
66590: LIST
66591: PUSH
66592: LD_INT 2
66594: NEG
66595: PUSH
66596: LD_INT 1
66598: NEG
66599: PUSH
66600: EMPTY
66601: LIST
66602: LIST
66603: PUSH
66604: LD_INT 2
66606: NEG
66607: PUSH
66608: LD_INT 2
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: LD_INT 2
66621: NEG
66622: PUSH
66623: EMPTY
66624: LIST
66625: LIST
66626: PUSH
66627: LD_INT 2
66629: PUSH
66630: LD_INT 1
66632: NEG
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 3
66640: PUSH
66641: LD_INT 1
66643: PUSH
66644: EMPTY
66645: LIST
66646: LIST
66647: PUSH
66648: LD_INT 3
66650: PUSH
66651: LD_INT 2
66653: PUSH
66654: EMPTY
66655: LIST
66656: LIST
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
66683: LD_ADDR_VAR 0 25
66687: PUSH
66688: LD_INT 0
66690: PUSH
66691: LD_INT 0
66693: PUSH
66694: EMPTY
66695: LIST
66696: LIST
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: LD_INT 1
66703: NEG
66704: PUSH
66705: EMPTY
66706: LIST
66707: LIST
66708: PUSH
66709: LD_INT 1
66711: PUSH
66712: LD_INT 0
66714: PUSH
66715: EMPTY
66716: LIST
66717: LIST
66718: PUSH
66719: LD_INT 1
66721: PUSH
66722: LD_INT 1
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 0
66731: PUSH
66732: LD_INT 1
66734: PUSH
66735: EMPTY
66736: LIST
66737: LIST
66738: PUSH
66739: LD_INT 1
66741: NEG
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 1
66752: NEG
66753: PUSH
66754: LD_INT 1
66756: NEG
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 1
66764: NEG
66765: PUSH
66766: LD_INT 2
66768: NEG
66769: PUSH
66770: EMPTY
66771: LIST
66772: LIST
66773: PUSH
66774: LD_INT 0
66776: PUSH
66777: LD_INT 2
66779: NEG
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 1
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: EMPTY
66793: LIST
66794: LIST
66795: PUSH
66796: LD_INT 2
66798: PUSH
66799: LD_INT 0
66801: PUSH
66802: EMPTY
66803: LIST
66804: LIST
66805: PUSH
66806: LD_INT 2
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 2
66818: PUSH
66819: LD_INT 2
66821: PUSH
66822: EMPTY
66823: LIST
66824: LIST
66825: PUSH
66826: LD_INT 1
66828: PUSH
66829: LD_INT 2
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 0
66838: PUSH
66839: LD_INT 2
66841: PUSH
66842: EMPTY
66843: LIST
66844: LIST
66845: PUSH
66846: LD_INT 1
66848: NEG
66849: PUSH
66850: LD_INT 1
66852: PUSH
66853: EMPTY
66854: LIST
66855: LIST
66856: PUSH
66857: LD_INT 2
66859: NEG
66860: PUSH
66861: LD_INT 0
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 2
66870: NEG
66871: PUSH
66872: LD_INT 1
66874: NEG
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 2
66882: NEG
66883: PUSH
66884: LD_INT 2
66886: NEG
66887: PUSH
66888: EMPTY
66889: LIST
66890: LIST
66891: PUSH
66892: LD_INT 3
66894: PUSH
66895: LD_INT 1
66897: PUSH
66898: EMPTY
66899: LIST
66900: LIST
66901: PUSH
66902: LD_INT 3
66904: PUSH
66905: LD_INT 2
66907: PUSH
66908: EMPTY
66909: LIST
66910: LIST
66911: PUSH
66912: LD_INT 2
66914: PUSH
66915: LD_INT 3
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 1
66924: PUSH
66925: LD_INT 3
66927: PUSH
66928: EMPTY
66929: LIST
66930: LIST
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: LIST
66936: LIST
66937: LIST
66938: LIST
66939: LIST
66940: LIST
66941: LIST
66942: LIST
66943: LIST
66944: LIST
66945: LIST
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: LIST
66956: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
66957: LD_ADDR_VAR 0 26
66961: PUSH
66962: LD_INT 0
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: EMPTY
66969: LIST
66970: LIST
66971: PUSH
66972: LD_INT 0
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: EMPTY
66980: LIST
66981: LIST
66982: PUSH
66983: LD_INT 1
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: EMPTY
66990: LIST
66991: LIST
66992: PUSH
66993: LD_INT 1
66995: PUSH
66996: LD_INT 1
66998: PUSH
66999: EMPTY
67000: LIST
67001: LIST
67002: PUSH
67003: LD_INT 0
67005: PUSH
67006: LD_INT 1
67008: PUSH
67009: EMPTY
67010: LIST
67011: LIST
67012: PUSH
67013: LD_INT 1
67015: NEG
67016: PUSH
67017: LD_INT 0
67019: PUSH
67020: EMPTY
67021: LIST
67022: LIST
67023: PUSH
67024: LD_INT 1
67026: NEG
67027: PUSH
67028: LD_INT 1
67030: NEG
67031: PUSH
67032: EMPTY
67033: LIST
67034: LIST
67035: PUSH
67036: LD_INT 1
67038: NEG
67039: PUSH
67040: LD_INT 2
67042: NEG
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PUSH
67048: LD_INT 0
67050: PUSH
67051: LD_INT 2
67053: NEG
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 1
67061: PUSH
67062: LD_INT 1
67064: NEG
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 2
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 2
67082: PUSH
67083: LD_INT 1
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: LD_INT 2
67092: PUSH
67093: LD_INT 2
67095: PUSH
67096: EMPTY
67097: LIST
67098: LIST
67099: PUSH
67100: LD_INT 1
67102: PUSH
67103: LD_INT 2
67105: PUSH
67106: EMPTY
67107: LIST
67108: LIST
67109: PUSH
67110: LD_INT 0
67112: PUSH
67113: LD_INT 2
67115: PUSH
67116: EMPTY
67117: LIST
67118: LIST
67119: PUSH
67120: LD_INT 1
67122: NEG
67123: PUSH
67124: LD_INT 1
67126: PUSH
67127: EMPTY
67128: LIST
67129: LIST
67130: PUSH
67131: LD_INT 2
67133: NEG
67134: PUSH
67135: LD_INT 0
67137: PUSH
67138: EMPTY
67139: LIST
67140: LIST
67141: PUSH
67142: LD_INT 2
67144: NEG
67145: PUSH
67146: LD_INT 1
67148: NEG
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 2
67156: NEG
67157: PUSH
67158: LD_INT 2
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 2
67168: PUSH
67169: LD_INT 3
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 1
67178: PUSH
67179: LD_INT 3
67181: PUSH
67182: EMPTY
67183: LIST
67184: LIST
67185: PUSH
67186: LD_INT 1
67188: NEG
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: EMPTY
67194: LIST
67195: LIST
67196: PUSH
67197: LD_INT 2
67199: NEG
67200: PUSH
67201: LD_INT 1
67203: PUSH
67204: EMPTY
67205: LIST
67206: LIST
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: LIST
67212: LIST
67213: LIST
67214: LIST
67215: LIST
67216: LIST
67217: LIST
67218: LIST
67219: LIST
67220: LIST
67221: LIST
67222: LIST
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67233: LD_ADDR_VAR 0 27
67237: PUSH
67238: LD_INT 0
67240: PUSH
67241: LD_INT 0
67243: PUSH
67244: EMPTY
67245: LIST
67246: LIST
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: LD_INT 1
67253: NEG
67254: PUSH
67255: EMPTY
67256: LIST
67257: LIST
67258: PUSH
67259: LD_INT 1
67261: PUSH
67262: LD_INT 0
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: LD_INT 1
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 0
67281: PUSH
67282: LD_INT 1
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 1
67291: NEG
67292: PUSH
67293: LD_INT 0
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 1
67302: NEG
67303: PUSH
67304: LD_INT 1
67306: NEG
67307: PUSH
67308: EMPTY
67309: LIST
67310: LIST
67311: PUSH
67312: LD_INT 1
67314: NEG
67315: PUSH
67316: LD_INT 2
67318: NEG
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: PUSH
67324: LD_INT 0
67326: PUSH
67327: LD_INT 2
67329: NEG
67330: PUSH
67331: EMPTY
67332: LIST
67333: LIST
67334: PUSH
67335: LD_INT 1
67337: PUSH
67338: LD_INT 1
67340: NEG
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: PUSH
67346: LD_INT 2
67348: PUSH
67349: LD_INT 0
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 2
67358: PUSH
67359: LD_INT 1
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 2
67368: PUSH
67369: LD_INT 2
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 1
67378: PUSH
67379: LD_INT 2
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 0
67388: PUSH
67389: LD_INT 2
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 1
67398: NEG
67399: PUSH
67400: LD_INT 1
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 2
67409: NEG
67410: PUSH
67411: LD_INT 0
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 2
67420: NEG
67421: PUSH
67422: LD_INT 1
67424: NEG
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 2
67432: NEG
67433: PUSH
67434: LD_INT 2
67436: NEG
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: PUSH
67442: LD_INT 1
67444: NEG
67445: PUSH
67446: LD_INT 2
67448: PUSH
67449: EMPTY
67450: LIST
67451: LIST
67452: PUSH
67453: LD_INT 2
67455: NEG
67456: PUSH
67457: LD_INT 1
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 3
67466: NEG
67467: PUSH
67468: LD_INT 1
67470: NEG
67471: PUSH
67472: EMPTY
67473: LIST
67474: LIST
67475: PUSH
67476: LD_INT 3
67478: NEG
67479: PUSH
67480: LD_INT 2
67482: NEG
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: LIST
67492: LIST
67493: LIST
67494: LIST
67495: LIST
67496: LIST
67497: LIST
67498: LIST
67499: LIST
67500: LIST
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: LIST
67511: LIST
67512: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
67513: LD_ADDR_VAR 0 28
67517: PUSH
67518: LD_INT 0
67520: PUSH
67521: LD_INT 0
67523: PUSH
67524: EMPTY
67525: LIST
67526: LIST
67527: PUSH
67528: LD_INT 0
67530: PUSH
67531: LD_INT 1
67533: NEG
67534: PUSH
67535: EMPTY
67536: LIST
67537: LIST
67538: PUSH
67539: LD_INT 1
67541: PUSH
67542: LD_INT 0
67544: PUSH
67545: EMPTY
67546: LIST
67547: LIST
67548: PUSH
67549: LD_INT 1
67551: PUSH
67552: LD_INT 1
67554: PUSH
67555: EMPTY
67556: LIST
67557: LIST
67558: PUSH
67559: LD_INT 0
67561: PUSH
67562: LD_INT 1
67564: PUSH
67565: EMPTY
67566: LIST
67567: LIST
67568: PUSH
67569: LD_INT 1
67571: NEG
67572: PUSH
67573: LD_INT 0
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: PUSH
67580: LD_INT 1
67582: NEG
67583: PUSH
67584: LD_INT 1
67586: NEG
67587: PUSH
67588: EMPTY
67589: LIST
67590: LIST
67591: PUSH
67592: LD_INT 1
67594: NEG
67595: PUSH
67596: LD_INT 2
67598: NEG
67599: PUSH
67600: EMPTY
67601: LIST
67602: LIST
67603: PUSH
67604: LD_INT 0
67606: PUSH
67607: LD_INT 2
67609: NEG
67610: PUSH
67611: EMPTY
67612: LIST
67613: LIST
67614: PUSH
67615: LD_INT 1
67617: PUSH
67618: LD_INT 1
67620: NEG
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 2
67628: PUSH
67629: LD_INT 0
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 2
67638: PUSH
67639: LD_INT 1
67641: PUSH
67642: EMPTY
67643: LIST
67644: LIST
67645: PUSH
67646: LD_INT 2
67648: PUSH
67649: LD_INT 2
67651: PUSH
67652: EMPTY
67653: LIST
67654: LIST
67655: PUSH
67656: LD_INT 1
67658: PUSH
67659: LD_INT 2
67661: PUSH
67662: EMPTY
67663: LIST
67664: LIST
67665: PUSH
67666: LD_INT 0
67668: PUSH
67669: LD_INT 2
67671: PUSH
67672: EMPTY
67673: LIST
67674: LIST
67675: PUSH
67676: LD_INT 1
67678: NEG
67679: PUSH
67680: LD_INT 1
67682: PUSH
67683: EMPTY
67684: LIST
67685: LIST
67686: PUSH
67687: LD_INT 2
67689: NEG
67690: PUSH
67691: LD_INT 0
67693: PUSH
67694: EMPTY
67695: LIST
67696: LIST
67697: PUSH
67698: LD_INT 2
67700: NEG
67701: PUSH
67702: LD_INT 1
67704: NEG
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 2
67712: NEG
67713: PUSH
67714: LD_INT 2
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 2
67724: NEG
67725: PUSH
67726: LD_INT 3
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 3
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 3
67748: NEG
67749: PUSH
67750: LD_INT 1
67752: NEG
67753: PUSH
67754: EMPTY
67755: LIST
67756: LIST
67757: PUSH
67758: LD_INT 3
67760: NEG
67761: PUSH
67762: LD_INT 2
67764: NEG
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: EMPTY
67771: LIST
67772: LIST
67773: LIST
67774: LIST
67775: LIST
67776: LIST
67777: LIST
67778: LIST
67779: LIST
67780: LIST
67781: LIST
67782: LIST
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: LIST
67788: LIST
67789: LIST
67790: LIST
67791: LIST
67792: LIST
67793: LIST
67794: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
67795: LD_ADDR_VAR 0 29
67799: PUSH
67800: LD_INT 0
67802: PUSH
67803: LD_INT 0
67805: PUSH
67806: EMPTY
67807: LIST
67808: LIST
67809: PUSH
67810: LD_INT 0
67812: PUSH
67813: LD_INT 1
67815: NEG
67816: PUSH
67817: EMPTY
67818: LIST
67819: LIST
67820: PUSH
67821: LD_INT 1
67823: PUSH
67824: LD_INT 0
67826: PUSH
67827: EMPTY
67828: LIST
67829: LIST
67830: PUSH
67831: LD_INT 1
67833: PUSH
67834: LD_INT 1
67836: PUSH
67837: EMPTY
67838: LIST
67839: LIST
67840: PUSH
67841: LD_INT 0
67843: PUSH
67844: LD_INT 1
67846: PUSH
67847: EMPTY
67848: LIST
67849: LIST
67850: PUSH
67851: LD_INT 1
67853: NEG
67854: PUSH
67855: LD_INT 0
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 1
67864: NEG
67865: PUSH
67866: LD_INT 1
67868: NEG
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 1
67876: NEG
67877: PUSH
67878: LD_INT 2
67880: NEG
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 0
67888: PUSH
67889: LD_INT 2
67891: NEG
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: PUSH
67897: LD_INT 1
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: PUSH
67908: LD_INT 2
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: LD_INT 1
67923: PUSH
67924: EMPTY
67925: LIST
67926: LIST
67927: PUSH
67928: LD_INT 1
67930: PUSH
67931: LD_INT 2
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 0
67940: PUSH
67941: LD_INT 2
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 1
67950: NEG
67951: PUSH
67952: LD_INT 1
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 2
67961: NEG
67962: PUSH
67963: LD_INT 1
67965: NEG
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 2
67973: NEG
67974: PUSH
67975: LD_INT 2
67977: NEG
67978: PUSH
67979: EMPTY
67980: LIST
67981: LIST
67982: PUSH
67983: LD_INT 2
67985: NEG
67986: PUSH
67987: LD_INT 3
67989: NEG
67990: PUSH
67991: EMPTY
67992: LIST
67993: LIST
67994: PUSH
67995: LD_INT 2
67997: PUSH
67998: LD_INT 1
68000: NEG
68001: PUSH
68002: EMPTY
68003: LIST
68004: LIST
68005: PUSH
68006: LD_INT 3
68008: PUSH
68009: LD_INT 1
68011: PUSH
68012: EMPTY
68013: LIST
68014: LIST
68015: PUSH
68016: LD_INT 1
68018: PUSH
68019: LD_INT 3
68021: PUSH
68022: EMPTY
68023: LIST
68024: LIST
68025: PUSH
68026: LD_INT 1
68028: NEG
68029: PUSH
68030: LD_INT 2
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 3
68039: NEG
68040: PUSH
68041: LD_INT 2
68043: NEG
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: EMPTY
68050: LIST
68051: LIST
68052: LIST
68053: LIST
68054: LIST
68055: LIST
68056: LIST
68057: LIST
68058: LIST
68059: LIST
68060: LIST
68061: LIST
68062: LIST
68063: LIST
68064: LIST
68065: LIST
68066: LIST
68067: LIST
68068: LIST
68069: LIST
68070: LIST
68071: LIST
68072: LIST
68073: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68074: LD_ADDR_VAR 0 30
68078: PUSH
68079: LD_INT 0
68081: PUSH
68082: LD_INT 0
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: PUSH
68089: LD_INT 0
68091: PUSH
68092: LD_INT 1
68094: NEG
68095: PUSH
68096: EMPTY
68097: LIST
68098: LIST
68099: PUSH
68100: LD_INT 1
68102: PUSH
68103: LD_INT 0
68105: PUSH
68106: EMPTY
68107: LIST
68108: LIST
68109: PUSH
68110: LD_INT 1
68112: PUSH
68113: LD_INT 1
68115: PUSH
68116: EMPTY
68117: LIST
68118: LIST
68119: PUSH
68120: LD_INT 0
68122: PUSH
68123: LD_INT 1
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 1
68132: NEG
68133: PUSH
68134: LD_INT 0
68136: PUSH
68137: EMPTY
68138: LIST
68139: LIST
68140: PUSH
68141: LD_INT 1
68143: NEG
68144: PUSH
68145: LD_INT 1
68147: NEG
68148: PUSH
68149: EMPTY
68150: LIST
68151: LIST
68152: PUSH
68153: LD_INT 1
68155: NEG
68156: PUSH
68157: LD_INT 2
68159: NEG
68160: PUSH
68161: EMPTY
68162: LIST
68163: LIST
68164: PUSH
68165: LD_INT 0
68167: PUSH
68168: LD_INT 2
68170: NEG
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 1
68178: PUSH
68179: LD_INT 1
68181: NEG
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 2
68189: PUSH
68190: LD_INT 0
68192: PUSH
68193: EMPTY
68194: LIST
68195: LIST
68196: PUSH
68197: LD_INT 2
68199: PUSH
68200: LD_INT 1
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 2
68209: PUSH
68210: LD_INT 2
68212: PUSH
68213: EMPTY
68214: LIST
68215: LIST
68216: PUSH
68217: LD_INT 1
68219: PUSH
68220: LD_INT 2
68222: PUSH
68223: EMPTY
68224: LIST
68225: LIST
68226: PUSH
68227: LD_INT 1
68229: NEG
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 2
68240: NEG
68241: PUSH
68242: LD_INT 0
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 2
68251: NEG
68252: PUSH
68253: LD_INT 1
68255: NEG
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 1
68263: NEG
68264: PUSH
68265: LD_INT 3
68267: NEG
68268: PUSH
68269: EMPTY
68270: LIST
68271: LIST
68272: PUSH
68273: LD_INT 1
68275: PUSH
68276: LD_INT 2
68278: NEG
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 3
68286: PUSH
68287: LD_INT 2
68289: PUSH
68290: EMPTY
68291: LIST
68292: LIST
68293: PUSH
68294: LD_INT 2
68296: PUSH
68297: LD_INT 3
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 2
68306: NEG
68307: PUSH
68308: LD_INT 1
68310: PUSH
68311: EMPTY
68312: LIST
68313: LIST
68314: PUSH
68315: LD_INT 3
68317: NEG
68318: PUSH
68319: LD_INT 1
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: LIST
68331: LIST
68332: LIST
68333: LIST
68334: LIST
68335: LIST
68336: LIST
68337: LIST
68338: LIST
68339: LIST
68340: LIST
68341: LIST
68342: LIST
68343: LIST
68344: LIST
68345: LIST
68346: LIST
68347: LIST
68348: LIST
68349: LIST
68350: LIST
68351: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68352: LD_ADDR_VAR 0 31
68356: PUSH
68357: LD_INT 0
68359: PUSH
68360: LD_INT 0
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 0
68369: PUSH
68370: LD_INT 1
68372: NEG
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 1
68380: PUSH
68381: LD_INT 0
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 1
68390: PUSH
68391: LD_INT 1
68393: PUSH
68394: EMPTY
68395: LIST
68396: LIST
68397: PUSH
68398: LD_INT 0
68400: PUSH
68401: LD_INT 1
68403: PUSH
68404: EMPTY
68405: LIST
68406: LIST
68407: PUSH
68408: LD_INT 1
68410: NEG
68411: PUSH
68412: LD_INT 0
68414: PUSH
68415: EMPTY
68416: LIST
68417: LIST
68418: PUSH
68419: LD_INT 1
68421: NEG
68422: PUSH
68423: LD_INT 1
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 1
68433: NEG
68434: PUSH
68435: LD_INT 2
68437: NEG
68438: PUSH
68439: EMPTY
68440: LIST
68441: LIST
68442: PUSH
68443: LD_INT 1
68445: PUSH
68446: LD_INT 1
68448: NEG
68449: PUSH
68450: EMPTY
68451: LIST
68452: LIST
68453: PUSH
68454: LD_INT 2
68456: PUSH
68457: LD_INT 0
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: PUSH
68464: LD_INT 2
68466: PUSH
68467: LD_INT 1
68469: PUSH
68470: EMPTY
68471: LIST
68472: LIST
68473: PUSH
68474: LD_INT 2
68476: PUSH
68477: LD_INT 2
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 1
68486: PUSH
68487: LD_INT 2
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: LD_INT 2
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 1
68506: NEG
68507: PUSH
68508: LD_INT 1
68510: PUSH
68511: EMPTY
68512: LIST
68513: LIST
68514: PUSH
68515: LD_INT 2
68517: NEG
68518: PUSH
68519: LD_INT 1
68521: NEG
68522: PUSH
68523: EMPTY
68524: LIST
68525: LIST
68526: PUSH
68527: LD_INT 2
68529: NEG
68530: PUSH
68531: LD_INT 2
68533: NEG
68534: PUSH
68535: EMPTY
68536: LIST
68537: LIST
68538: PUSH
68539: LD_INT 2
68541: NEG
68542: PUSH
68543: LD_INT 3
68545: NEG
68546: PUSH
68547: EMPTY
68548: LIST
68549: LIST
68550: PUSH
68551: LD_INT 2
68553: PUSH
68554: LD_INT 1
68556: NEG
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 3
68564: PUSH
68565: LD_INT 1
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: PUSH
68572: LD_INT 1
68574: PUSH
68575: LD_INT 3
68577: PUSH
68578: EMPTY
68579: LIST
68580: LIST
68581: PUSH
68582: LD_INT 1
68584: NEG
68585: PUSH
68586: LD_INT 2
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 3
68595: NEG
68596: PUSH
68597: LD_INT 2
68599: NEG
68600: PUSH
68601: EMPTY
68602: LIST
68603: LIST
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: LIST
68609: LIST
68610: LIST
68611: LIST
68612: LIST
68613: LIST
68614: LIST
68615: LIST
68616: LIST
68617: LIST
68618: LIST
68619: LIST
68620: LIST
68621: LIST
68622: LIST
68623: LIST
68624: LIST
68625: LIST
68626: LIST
68627: LIST
68628: LIST
68629: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68630: LD_ADDR_VAR 0 32
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 0
68647: PUSH
68648: LD_INT 1
68650: NEG
68651: PUSH
68652: EMPTY
68653: LIST
68654: LIST
68655: PUSH
68656: LD_INT 1
68658: PUSH
68659: LD_INT 0
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 1
68668: PUSH
68669: LD_INT 1
68671: PUSH
68672: EMPTY
68673: LIST
68674: LIST
68675: PUSH
68676: LD_INT 0
68678: PUSH
68679: LD_INT 1
68681: PUSH
68682: EMPTY
68683: LIST
68684: LIST
68685: PUSH
68686: LD_INT 1
68688: NEG
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: EMPTY
68694: LIST
68695: LIST
68696: PUSH
68697: LD_INT 1
68699: NEG
68700: PUSH
68701: LD_INT 1
68703: NEG
68704: PUSH
68705: EMPTY
68706: LIST
68707: LIST
68708: PUSH
68709: LD_INT 1
68711: NEG
68712: PUSH
68713: LD_INT 2
68715: NEG
68716: PUSH
68717: EMPTY
68718: LIST
68719: LIST
68720: PUSH
68721: LD_INT 0
68723: PUSH
68724: LD_INT 2
68726: NEG
68727: PUSH
68728: EMPTY
68729: LIST
68730: LIST
68731: PUSH
68732: LD_INT 1
68734: PUSH
68735: LD_INT 1
68737: NEG
68738: PUSH
68739: EMPTY
68740: LIST
68741: LIST
68742: PUSH
68743: LD_INT 2
68745: PUSH
68746: LD_INT 1
68748: PUSH
68749: EMPTY
68750: LIST
68751: LIST
68752: PUSH
68753: LD_INT 2
68755: PUSH
68756: LD_INT 2
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 1
68765: PUSH
68766: LD_INT 2
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 0
68775: PUSH
68776: LD_INT 2
68778: PUSH
68779: EMPTY
68780: LIST
68781: LIST
68782: PUSH
68783: LD_INT 1
68785: NEG
68786: PUSH
68787: LD_INT 1
68789: PUSH
68790: EMPTY
68791: LIST
68792: LIST
68793: PUSH
68794: LD_INT 2
68796: NEG
68797: PUSH
68798: LD_INT 0
68800: PUSH
68801: EMPTY
68802: LIST
68803: LIST
68804: PUSH
68805: LD_INT 2
68807: NEG
68808: PUSH
68809: LD_INT 1
68811: NEG
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 1
68819: NEG
68820: PUSH
68821: LD_INT 3
68823: NEG
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: LD_INT 1
68831: PUSH
68832: LD_INT 2
68834: NEG
68835: PUSH
68836: EMPTY
68837: LIST
68838: LIST
68839: PUSH
68840: LD_INT 3
68842: PUSH
68843: LD_INT 2
68845: PUSH
68846: EMPTY
68847: LIST
68848: LIST
68849: PUSH
68850: LD_INT 2
68852: PUSH
68853: LD_INT 3
68855: PUSH
68856: EMPTY
68857: LIST
68858: LIST
68859: PUSH
68860: LD_INT 2
68862: NEG
68863: PUSH
68864: LD_INT 1
68866: PUSH
68867: EMPTY
68868: LIST
68869: LIST
68870: PUSH
68871: LD_INT 3
68873: NEG
68874: PUSH
68875: LD_INT 1
68877: NEG
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: EMPTY
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: LIST
68895: LIST
68896: LIST
68897: LIST
68898: LIST
68899: LIST
68900: LIST
68901: LIST
68902: LIST
68903: LIST
68904: LIST
68905: LIST
68906: LIST
68907: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68908: LD_ADDR_VAR 0 33
68912: PUSH
68913: LD_INT 0
68915: PUSH
68916: LD_INT 0
68918: PUSH
68919: EMPTY
68920: LIST
68921: LIST
68922: PUSH
68923: LD_INT 0
68925: PUSH
68926: LD_INT 1
68928: NEG
68929: PUSH
68930: EMPTY
68931: LIST
68932: LIST
68933: PUSH
68934: LD_INT 1
68936: PUSH
68937: LD_INT 0
68939: PUSH
68940: EMPTY
68941: LIST
68942: LIST
68943: PUSH
68944: LD_INT 1
68946: PUSH
68947: LD_INT 1
68949: PUSH
68950: EMPTY
68951: LIST
68952: LIST
68953: PUSH
68954: LD_INT 0
68956: PUSH
68957: LD_INT 1
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: PUSH
68964: LD_INT 1
68966: NEG
68967: PUSH
68968: LD_INT 0
68970: PUSH
68971: EMPTY
68972: LIST
68973: LIST
68974: PUSH
68975: LD_INT 1
68977: NEG
68978: PUSH
68979: LD_INT 1
68981: NEG
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 1
68989: NEG
68990: PUSH
68991: LD_INT 2
68993: NEG
68994: PUSH
68995: EMPTY
68996: LIST
68997: LIST
68998: PUSH
68999: LD_INT 1
69001: PUSH
69002: LD_INT 1
69004: NEG
69005: PUSH
69006: EMPTY
69007: LIST
69008: LIST
69009: PUSH
69010: LD_INT 2
69012: PUSH
69013: LD_INT 0
69015: PUSH
69016: EMPTY
69017: LIST
69018: LIST
69019: PUSH
69020: LD_INT 2
69022: PUSH
69023: LD_INT 1
69025: PUSH
69026: EMPTY
69027: LIST
69028: LIST
69029: PUSH
69030: LD_INT 1
69032: PUSH
69033: LD_INT 2
69035: PUSH
69036: EMPTY
69037: LIST
69038: LIST
69039: PUSH
69040: LD_INT 0
69042: PUSH
69043: LD_INT 2
69045: PUSH
69046: EMPTY
69047: LIST
69048: LIST
69049: PUSH
69050: LD_INT 1
69052: NEG
69053: PUSH
69054: LD_INT 1
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 2
69063: NEG
69064: PUSH
69065: LD_INT 0
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 2
69074: NEG
69075: PUSH
69076: LD_INT 1
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 2
69086: NEG
69087: PUSH
69088: LD_INT 2
69090: NEG
69091: PUSH
69092: EMPTY
69093: LIST
69094: LIST
69095: PUSH
69096: LD_INT 2
69098: NEG
69099: PUSH
69100: LD_INT 3
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 2
69110: PUSH
69111: LD_INT 1
69113: NEG
69114: PUSH
69115: EMPTY
69116: LIST
69117: LIST
69118: PUSH
69119: LD_INT 3
69121: PUSH
69122: LD_INT 1
69124: PUSH
69125: EMPTY
69126: LIST
69127: LIST
69128: PUSH
69129: LD_INT 1
69131: PUSH
69132: LD_INT 3
69134: PUSH
69135: EMPTY
69136: LIST
69137: LIST
69138: PUSH
69139: LD_INT 1
69141: NEG
69142: PUSH
69143: LD_INT 2
69145: PUSH
69146: EMPTY
69147: LIST
69148: LIST
69149: PUSH
69150: LD_INT 3
69152: NEG
69153: PUSH
69154: LD_INT 2
69156: NEG
69157: PUSH
69158: EMPTY
69159: LIST
69160: LIST
69161: PUSH
69162: EMPTY
69163: LIST
69164: LIST
69165: LIST
69166: LIST
69167: LIST
69168: LIST
69169: LIST
69170: LIST
69171: LIST
69172: LIST
69173: LIST
69174: LIST
69175: LIST
69176: LIST
69177: LIST
69178: LIST
69179: LIST
69180: LIST
69181: LIST
69182: LIST
69183: LIST
69184: LIST
69185: LIST
69186: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69187: LD_ADDR_VAR 0 34
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: LD_INT 0
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 0
69204: PUSH
69205: LD_INT 1
69207: NEG
69208: PUSH
69209: EMPTY
69210: LIST
69211: LIST
69212: PUSH
69213: LD_INT 1
69215: PUSH
69216: LD_INT 0
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 1
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 0
69235: PUSH
69236: LD_INT 1
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 1
69245: NEG
69246: PUSH
69247: LD_INT 0
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 1
69256: NEG
69257: PUSH
69258: LD_INT 1
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 1
69268: NEG
69269: PUSH
69270: LD_INT 2
69272: NEG
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: PUSH
69278: LD_INT 0
69280: PUSH
69281: LD_INT 2
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 1
69291: PUSH
69292: LD_INT 1
69294: NEG
69295: PUSH
69296: EMPTY
69297: LIST
69298: LIST
69299: PUSH
69300: LD_INT 2
69302: PUSH
69303: LD_INT 1
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 2
69312: PUSH
69313: LD_INT 2
69315: PUSH
69316: EMPTY
69317: LIST
69318: LIST
69319: PUSH
69320: LD_INT 1
69322: PUSH
69323: LD_INT 2
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 1
69332: NEG
69333: PUSH
69334: LD_INT 1
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 2
69343: NEG
69344: PUSH
69345: LD_INT 0
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 2
69354: NEG
69355: PUSH
69356: LD_INT 1
69358: NEG
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PUSH
69364: LD_INT 2
69366: NEG
69367: PUSH
69368: LD_INT 2
69370: NEG
69371: PUSH
69372: EMPTY
69373: LIST
69374: LIST
69375: PUSH
69376: LD_INT 1
69378: NEG
69379: PUSH
69380: LD_INT 3
69382: NEG
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 1
69390: PUSH
69391: LD_INT 2
69393: NEG
69394: PUSH
69395: EMPTY
69396: LIST
69397: LIST
69398: PUSH
69399: LD_INT 3
69401: PUSH
69402: LD_INT 2
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 2
69411: PUSH
69412: LD_INT 3
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 2
69421: NEG
69422: PUSH
69423: LD_INT 1
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 3
69432: NEG
69433: PUSH
69434: LD_INT 1
69436: NEG
69437: PUSH
69438: EMPTY
69439: LIST
69440: LIST
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
69467: LD_ADDR_VAR 0 35
69471: PUSH
69472: LD_INT 0
69474: PUSH
69475: LD_INT 0
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: LD_INT 0
69484: PUSH
69485: LD_INT 1
69487: NEG
69488: PUSH
69489: EMPTY
69490: LIST
69491: LIST
69492: PUSH
69493: LD_INT 1
69495: PUSH
69496: LD_INT 0
69498: PUSH
69499: EMPTY
69500: LIST
69501: LIST
69502: PUSH
69503: LD_INT 1
69505: PUSH
69506: LD_INT 1
69508: PUSH
69509: EMPTY
69510: LIST
69511: LIST
69512: PUSH
69513: LD_INT 0
69515: PUSH
69516: LD_INT 1
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 1
69525: NEG
69526: PUSH
69527: LD_INT 0
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 1
69536: NEG
69537: PUSH
69538: LD_INT 1
69540: NEG
69541: PUSH
69542: EMPTY
69543: LIST
69544: LIST
69545: PUSH
69546: LD_INT 2
69548: PUSH
69549: LD_INT 1
69551: PUSH
69552: EMPTY
69553: LIST
69554: LIST
69555: PUSH
69556: LD_INT 2
69558: NEG
69559: PUSH
69560: LD_INT 1
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69579: LD_ADDR_VAR 0 36
69583: PUSH
69584: LD_INT 0
69586: PUSH
69587: LD_INT 0
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: LD_INT 0
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 1
69607: PUSH
69608: LD_INT 0
69610: PUSH
69611: EMPTY
69612: LIST
69613: LIST
69614: PUSH
69615: LD_INT 1
69617: PUSH
69618: LD_INT 1
69620: PUSH
69621: EMPTY
69622: LIST
69623: LIST
69624: PUSH
69625: LD_INT 0
69627: PUSH
69628: LD_INT 1
69630: PUSH
69631: EMPTY
69632: LIST
69633: LIST
69634: PUSH
69635: LD_INT 1
69637: NEG
69638: PUSH
69639: LD_INT 0
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 1
69648: NEG
69649: PUSH
69650: LD_INT 1
69652: NEG
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 1
69660: NEG
69661: PUSH
69662: LD_INT 2
69664: NEG
69665: PUSH
69666: EMPTY
69667: LIST
69668: LIST
69669: PUSH
69670: LD_INT 1
69672: PUSH
69673: LD_INT 2
69675: PUSH
69676: EMPTY
69677: LIST
69678: LIST
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: LIST
69688: LIST
69689: LIST
69690: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
69691: LD_ADDR_VAR 0 37
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: LD_INT 0
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 0
69708: PUSH
69709: LD_INT 1
69711: NEG
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 1
69719: PUSH
69720: LD_INT 0
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 1
69729: PUSH
69730: LD_INT 1
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 0
69739: PUSH
69740: LD_INT 1
69742: PUSH
69743: EMPTY
69744: LIST
69745: LIST
69746: PUSH
69747: LD_INT 1
69749: NEG
69750: PUSH
69751: LD_INT 0
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 1
69760: NEG
69761: PUSH
69762: LD_INT 1
69764: NEG
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 1
69772: PUSH
69773: LD_INT 1
69775: NEG
69776: PUSH
69777: EMPTY
69778: LIST
69779: LIST
69780: PUSH
69781: LD_INT 1
69783: NEG
69784: PUSH
69785: LD_INT 1
69787: PUSH
69788: EMPTY
69789: LIST
69790: LIST
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: LIST
69796: LIST
69797: LIST
69798: LIST
69799: LIST
69800: LIST
69801: LIST
69802: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
69803: LD_ADDR_VAR 0 38
69807: PUSH
69808: LD_INT 0
69810: PUSH
69811: LD_INT 0
69813: PUSH
69814: EMPTY
69815: LIST
69816: LIST
69817: PUSH
69818: LD_INT 0
69820: PUSH
69821: LD_INT 1
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 1
69831: PUSH
69832: LD_INT 0
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 1
69841: PUSH
69842: LD_INT 1
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 0
69851: PUSH
69852: LD_INT 1
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: PUSH
69859: LD_INT 1
69861: NEG
69862: PUSH
69863: LD_INT 0
69865: PUSH
69866: EMPTY
69867: LIST
69868: LIST
69869: PUSH
69870: LD_INT 1
69872: NEG
69873: PUSH
69874: LD_INT 1
69876: NEG
69877: PUSH
69878: EMPTY
69879: LIST
69880: LIST
69881: PUSH
69882: LD_INT 2
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 2
69894: NEG
69895: PUSH
69896: LD_INT 1
69898: NEG
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: LIST
69908: LIST
69909: LIST
69910: LIST
69911: LIST
69912: LIST
69913: LIST
69914: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
69915: LD_ADDR_VAR 0 39
69919: PUSH
69920: LD_INT 0
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 0
69932: PUSH
69933: LD_INT 1
69935: NEG
69936: PUSH
69937: EMPTY
69938: LIST
69939: LIST
69940: PUSH
69941: LD_INT 1
69943: PUSH
69944: LD_INT 0
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: LD_INT 1
69956: PUSH
69957: EMPTY
69958: LIST
69959: LIST
69960: PUSH
69961: LD_INT 0
69963: PUSH
69964: LD_INT 1
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 1
69973: NEG
69974: PUSH
69975: LD_INT 0
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 1
69984: NEG
69985: PUSH
69986: LD_INT 1
69988: NEG
69989: PUSH
69990: EMPTY
69991: LIST
69992: LIST
69993: PUSH
69994: LD_INT 1
69996: NEG
69997: PUSH
69998: LD_INT 2
70000: NEG
70001: PUSH
70002: EMPTY
70003: LIST
70004: LIST
70005: PUSH
70006: LD_INT 1
70008: PUSH
70009: LD_INT 2
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: EMPTY
70017: LIST
70018: LIST
70019: LIST
70020: LIST
70021: LIST
70022: LIST
70023: LIST
70024: LIST
70025: LIST
70026: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70027: LD_ADDR_VAR 0 40
70031: PUSH
70032: LD_INT 0
70034: PUSH
70035: LD_INT 0
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 0
70044: PUSH
70045: LD_INT 1
70047: NEG
70048: PUSH
70049: EMPTY
70050: LIST
70051: LIST
70052: PUSH
70053: LD_INT 1
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 1
70065: PUSH
70066: LD_INT 1
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 0
70075: PUSH
70076: LD_INT 1
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 1
70085: NEG
70086: PUSH
70087: LD_INT 0
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 1
70096: NEG
70097: PUSH
70098: LD_INT 1
70100: NEG
70101: PUSH
70102: EMPTY
70103: LIST
70104: LIST
70105: PUSH
70106: LD_INT 1
70108: PUSH
70109: LD_INT 1
70111: NEG
70112: PUSH
70113: EMPTY
70114: LIST
70115: LIST
70116: PUSH
70117: LD_INT 1
70119: NEG
70120: PUSH
70121: LD_INT 1
70123: PUSH
70124: EMPTY
70125: LIST
70126: LIST
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70139: LD_ADDR_VAR 0 41
70143: PUSH
70144: LD_INT 0
70146: PUSH
70147: LD_INT 0
70149: PUSH
70150: EMPTY
70151: LIST
70152: LIST
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: LD_INT 1
70159: NEG
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 1
70167: PUSH
70168: LD_INT 0
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 1
70177: PUSH
70178: LD_INT 1
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 0
70187: PUSH
70188: LD_INT 1
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 1
70197: NEG
70198: PUSH
70199: LD_INT 0
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 1
70208: NEG
70209: PUSH
70210: LD_INT 1
70212: NEG
70213: PUSH
70214: EMPTY
70215: LIST
70216: LIST
70217: PUSH
70218: LD_INT 1
70220: NEG
70221: PUSH
70222: LD_INT 2
70224: NEG
70225: PUSH
70226: EMPTY
70227: LIST
70228: LIST
70229: PUSH
70230: LD_INT 1
70232: PUSH
70233: LD_INT 1
70235: NEG
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 2
70243: PUSH
70244: LD_INT 0
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 2
70253: PUSH
70254: LD_INT 1
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 2
70263: PUSH
70264: LD_INT 2
70266: PUSH
70267: EMPTY
70268: LIST
70269: LIST
70270: PUSH
70271: LD_INT 1
70273: PUSH
70274: LD_INT 2
70276: PUSH
70277: EMPTY
70278: LIST
70279: LIST
70280: PUSH
70281: LD_INT 1
70283: NEG
70284: PUSH
70285: LD_INT 1
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 2
70294: NEG
70295: PUSH
70296: LD_INT 0
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 2
70305: NEG
70306: PUSH
70307: LD_INT 1
70309: NEG
70310: PUSH
70311: EMPTY
70312: LIST
70313: LIST
70314: PUSH
70315: LD_INT 2
70317: NEG
70318: PUSH
70319: LD_INT 2
70321: NEG
70322: PUSH
70323: EMPTY
70324: LIST
70325: LIST
70326: PUSH
70327: LD_INT 2
70329: NEG
70330: PUSH
70331: LD_INT 3
70333: NEG
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 2
70341: PUSH
70342: LD_INT 1
70344: NEG
70345: PUSH
70346: EMPTY
70347: LIST
70348: LIST
70349: PUSH
70350: LD_INT 3
70352: PUSH
70353: LD_INT 0
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 3
70362: PUSH
70363: LD_INT 1
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: LD_INT 3
70372: PUSH
70373: LD_INT 2
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 3
70382: PUSH
70383: LD_INT 3
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 2
70392: PUSH
70393: LD_INT 3
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 2
70402: NEG
70403: PUSH
70404: LD_INT 1
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 3
70413: NEG
70414: PUSH
70415: LD_INT 0
70417: PUSH
70418: EMPTY
70419: LIST
70420: LIST
70421: PUSH
70422: LD_INT 3
70424: NEG
70425: PUSH
70426: LD_INT 1
70428: NEG
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 3
70436: NEG
70437: PUSH
70438: LD_INT 2
70440: NEG
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 3
70448: NEG
70449: PUSH
70450: LD_INT 3
70452: NEG
70453: PUSH
70454: EMPTY
70455: LIST
70456: LIST
70457: PUSH
70458: EMPTY
70459: LIST
70460: LIST
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: LIST
70482: LIST
70483: LIST
70484: LIST
70485: LIST
70486: LIST
70487: LIST
70488: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70489: LD_ADDR_VAR 0 42
70493: PUSH
70494: LD_INT 0
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 0
70506: PUSH
70507: LD_INT 1
70509: NEG
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: LD_INT 1
70517: PUSH
70518: LD_INT 0
70520: PUSH
70521: EMPTY
70522: LIST
70523: LIST
70524: PUSH
70525: LD_INT 1
70527: PUSH
70528: LD_INT 1
70530: PUSH
70531: EMPTY
70532: LIST
70533: LIST
70534: PUSH
70535: LD_INT 0
70537: PUSH
70538: LD_INT 1
70540: PUSH
70541: EMPTY
70542: LIST
70543: LIST
70544: PUSH
70545: LD_INT 1
70547: NEG
70548: PUSH
70549: LD_INT 0
70551: PUSH
70552: EMPTY
70553: LIST
70554: LIST
70555: PUSH
70556: LD_INT 1
70558: NEG
70559: PUSH
70560: LD_INT 1
70562: NEG
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 1
70570: NEG
70571: PUSH
70572: LD_INT 2
70574: NEG
70575: PUSH
70576: EMPTY
70577: LIST
70578: LIST
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: LD_INT 2
70585: NEG
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: PUSH
70591: LD_INT 1
70593: PUSH
70594: LD_INT 1
70596: NEG
70597: PUSH
70598: EMPTY
70599: LIST
70600: LIST
70601: PUSH
70602: LD_INT 2
70604: PUSH
70605: LD_INT 1
70607: PUSH
70608: EMPTY
70609: LIST
70610: LIST
70611: PUSH
70612: LD_INT 2
70614: PUSH
70615: LD_INT 2
70617: PUSH
70618: EMPTY
70619: LIST
70620: LIST
70621: PUSH
70622: LD_INT 1
70624: PUSH
70625: LD_INT 2
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 0
70634: PUSH
70635: LD_INT 2
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 1
70644: NEG
70645: PUSH
70646: LD_INT 1
70648: PUSH
70649: EMPTY
70650: LIST
70651: LIST
70652: PUSH
70653: LD_INT 2
70655: NEG
70656: PUSH
70657: LD_INT 1
70659: NEG
70660: PUSH
70661: EMPTY
70662: LIST
70663: LIST
70664: PUSH
70665: LD_INT 2
70667: NEG
70668: PUSH
70669: LD_INT 2
70671: NEG
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 2
70679: NEG
70680: PUSH
70681: LD_INT 3
70683: NEG
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 1
70691: NEG
70692: PUSH
70693: LD_INT 3
70695: NEG
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 0
70703: PUSH
70704: LD_INT 3
70706: NEG
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 1
70714: PUSH
70715: LD_INT 2
70717: NEG
70718: PUSH
70719: EMPTY
70720: LIST
70721: LIST
70722: PUSH
70723: LD_INT 3
70725: PUSH
70726: LD_INT 2
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 3
70735: PUSH
70736: LD_INT 3
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 2
70745: PUSH
70746: LD_INT 3
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 1
70755: PUSH
70756: LD_INT 3
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 0
70765: PUSH
70766: LD_INT 3
70768: PUSH
70769: EMPTY
70770: LIST
70771: LIST
70772: PUSH
70773: LD_INT 1
70775: NEG
70776: PUSH
70777: LD_INT 2
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 3
70786: NEG
70787: PUSH
70788: LD_INT 2
70790: NEG
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: LD_INT 3
70798: NEG
70799: PUSH
70800: LD_INT 3
70802: NEG
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: LIST
70812: LIST
70813: LIST
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: LIST
70836: LIST
70837: LIST
70838: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
70839: LD_ADDR_VAR 0 43
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: LD_INT 0
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: LD_INT 1
70859: NEG
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 1
70867: PUSH
70868: LD_INT 0
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 1
70877: PUSH
70878: LD_INT 1
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 0
70887: PUSH
70888: LD_INT 1
70890: PUSH
70891: EMPTY
70892: LIST
70893: LIST
70894: PUSH
70895: LD_INT 1
70897: NEG
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 1
70908: NEG
70909: PUSH
70910: LD_INT 1
70912: NEG
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 1
70920: NEG
70921: PUSH
70922: LD_INT 2
70924: NEG
70925: PUSH
70926: EMPTY
70927: LIST
70928: LIST
70929: PUSH
70930: LD_INT 0
70932: PUSH
70933: LD_INT 2
70935: NEG
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: PUSH
70941: LD_INT 1
70943: PUSH
70944: LD_INT 1
70946: NEG
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: LD_INT 2
70954: PUSH
70955: LD_INT 0
70957: PUSH
70958: EMPTY
70959: LIST
70960: LIST
70961: PUSH
70962: LD_INT 2
70964: PUSH
70965: LD_INT 1
70967: PUSH
70968: EMPTY
70969: LIST
70970: LIST
70971: PUSH
70972: LD_INT 1
70974: PUSH
70975: LD_INT 2
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 0
70984: PUSH
70985: LD_INT 2
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: LD_INT 1
70994: NEG
70995: PUSH
70996: LD_INT 1
70998: PUSH
70999: EMPTY
71000: LIST
71001: LIST
71002: PUSH
71003: LD_INT 2
71005: NEG
71006: PUSH
71007: LD_INT 0
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 2
71016: NEG
71017: PUSH
71018: LD_INT 1
71020: NEG
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 1
71028: NEG
71029: PUSH
71030: LD_INT 3
71032: NEG
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: LD_INT 0
71040: PUSH
71041: LD_INT 3
71043: NEG
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 1
71051: PUSH
71052: LD_INT 2
71054: NEG
71055: PUSH
71056: EMPTY
71057: LIST
71058: LIST
71059: PUSH
71060: LD_INT 2
71062: PUSH
71063: LD_INT 1
71065: NEG
71066: PUSH
71067: EMPTY
71068: LIST
71069: LIST
71070: PUSH
71071: LD_INT 3
71073: PUSH
71074: LD_INT 0
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 3
71083: PUSH
71084: LD_INT 1
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 1
71093: PUSH
71094: LD_INT 3
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: LD_INT 3
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 1
71113: NEG
71114: PUSH
71115: LD_INT 2
71117: PUSH
71118: EMPTY
71119: LIST
71120: LIST
71121: PUSH
71122: LD_INT 2
71124: NEG
71125: PUSH
71126: LD_INT 1
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 3
71135: NEG
71136: PUSH
71137: LD_INT 0
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 3
71146: NEG
71147: PUSH
71148: LD_INT 1
71150: NEG
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: LIST
71172: LIST
71173: LIST
71174: LIST
71175: LIST
71176: LIST
71177: LIST
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71187: LD_ADDR_VAR 0 44
71191: PUSH
71192: LD_INT 0
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 0
71204: PUSH
71205: LD_INT 1
71207: NEG
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 1
71215: PUSH
71216: LD_INT 0
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 1
71225: PUSH
71226: LD_INT 1
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 0
71235: PUSH
71236: LD_INT 1
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 1
71245: NEG
71246: PUSH
71247: LD_INT 0
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 1
71256: NEG
71257: PUSH
71258: LD_INT 1
71260: NEG
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: LD_INT 1
71268: NEG
71269: PUSH
71270: LD_INT 2
71272: NEG
71273: PUSH
71274: EMPTY
71275: LIST
71276: LIST
71277: PUSH
71278: LD_INT 1
71280: PUSH
71281: LD_INT 1
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 2
71291: PUSH
71292: LD_INT 0
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 2
71301: PUSH
71302: LD_INT 1
71304: PUSH
71305: EMPTY
71306: LIST
71307: LIST
71308: PUSH
71309: LD_INT 2
71311: PUSH
71312: LD_INT 2
71314: PUSH
71315: EMPTY
71316: LIST
71317: LIST
71318: PUSH
71319: LD_INT 1
71321: PUSH
71322: LD_INT 2
71324: PUSH
71325: EMPTY
71326: LIST
71327: LIST
71328: PUSH
71329: LD_INT 1
71331: NEG
71332: PUSH
71333: LD_INT 1
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 2
71342: NEG
71343: PUSH
71344: LD_INT 0
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 2
71353: NEG
71354: PUSH
71355: LD_INT 1
71357: NEG
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 2
71365: NEG
71366: PUSH
71367: LD_INT 2
71369: NEG
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 2
71377: NEG
71378: PUSH
71379: LD_INT 3
71381: NEG
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 2
71389: PUSH
71390: LD_INT 1
71392: NEG
71393: PUSH
71394: EMPTY
71395: LIST
71396: LIST
71397: PUSH
71398: LD_INT 3
71400: PUSH
71401: LD_INT 0
71403: PUSH
71404: EMPTY
71405: LIST
71406: LIST
71407: PUSH
71408: LD_INT 3
71410: PUSH
71411: LD_INT 1
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 3
71420: PUSH
71421: LD_INT 2
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 3
71430: PUSH
71431: LD_INT 3
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 2
71440: PUSH
71441: LD_INT 3
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 2
71450: NEG
71451: PUSH
71452: LD_INT 1
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: PUSH
71459: LD_INT 3
71461: NEG
71462: PUSH
71463: LD_INT 0
71465: PUSH
71466: EMPTY
71467: LIST
71468: LIST
71469: PUSH
71470: LD_INT 3
71472: NEG
71473: PUSH
71474: LD_INT 1
71476: NEG
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: PUSH
71482: LD_INT 3
71484: NEG
71485: PUSH
71486: LD_INT 2
71488: NEG
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 3
71496: NEG
71497: PUSH
71498: LD_INT 3
71500: NEG
71501: PUSH
71502: EMPTY
71503: LIST
71504: LIST
71505: PUSH
71506: EMPTY
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: LIST
71517: LIST
71518: LIST
71519: LIST
71520: LIST
71521: LIST
71522: LIST
71523: LIST
71524: LIST
71525: LIST
71526: LIST
71527: LIST
71528: LIST
71529: LIST
71530: LIST
71531: LIST
71532: LIST
71533: LIST
71534: LIST
71535: LIST
71536: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71537: LD_ADDR_VAR 0 45
71541: PUSH
71542: LD_INT 0
71544: PUSH
71545: LD_INT 0
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 0
71554: PUSH
71555: LD_INT 1
71557: NEG
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 1
71565: PUSH
71566: LD_INT 0
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 1
71575: PUSH
71576: LD_INT 1
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 0
71585: PUSH
71586: LD_INT 1
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 1
71595: NEG
71596: PUSH
71597: LD_INT 0
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 1
71606: NEG
71607: PUSH
71608: LD_INT 1
71610: NEG
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 1
71618: NEG
71619: PUSH
71620: LD_INT 2
71622: NEG
71623: PUSH
71624: EMPTY
71625: LIST
71626: LIST
71627: PUSH
71628: LD_INT 0
71630: PUSH
71631: LD_INT 2
71633: NEG
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: LD_INT 1
71641: PUSH
71642: LD_INT 1
71644: NEG
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 2
71652: PUSH
71653: LD_INT 1
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 2
71662: PUSH
71663: LD_INT 2
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 1
71672: PUSH
71673: LD_INT 2
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 0
71682: PUSH
71683: LD_INT 2
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 1
71692: NEG
71693: PUSH
71694: LD_INT 1
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 2
71703: NEG
71704: PUSH
71705: LD_INT 1
71707: NEG
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 2
71715: NEG
71716: PUSH
71717: LD_INT 2
71719: NEG
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 2
71727: NEG
71728: PUSH
71729: LD_INT 3
71731: NEG
71732: PUSH
71733: EMPTY
71734: LIST
71735: LIST
71736: PUSH
71737: LD_INT 1
71739: NEG
71740: PUSH
71741: LD_INT 3
71743: NEG
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 0
71751: PUSH
71752: LD_INT 3
71754: NEG
71755: PUSH
71756: EMPTY
71757: LIST
71758: LIST
71759: PUSH
71760: LD_INT 1
71762: PUSH
71763: LD_INT 2
71765: NEG
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: LD_INT 3
71773: PUSH
71774: LD_INT 2
71776: PUSH
71777: EMPTY
71778: LIST
71779: LIST
71780: PUSH
71781: LD_INT 3
71783: PUSH
71784: LD_INT 3
71786: PUSH
71787: EMPTY
71788: LIST
71789: LIST
71790: PUSH
71791: LD_INT 2
71793: PUSH
71794: LD_INT 3
71796: PUSH
71797: EMPTY
71798: LIST
71799: LIST
71800: PUSH
71801: LD_INT 1
71803: PUSH
71804: LD_INT 3
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 0
71813: PUSH
71814: LD_INT 3
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 1
71823: NEG
71824: PUSH
71825: LD_INT 2
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: PUSH
71832: LD_INT 3
71834: NEG
71835: PUSH
71836: LD_INT 2
71838: NEG
71839: PUSH
71840: EMPTY
71841: LIST
71842: LIST
71843: PUSH
71844: LD_INT 3
71846: NEG
71847: PUSH
71848: LD_INT 3
71850: NEG
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: LIST
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: LIST
71868: LIST
71869: LIST
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71887: LD_ADDR_VAR 0 46
71891: PUSH
71892: LD_INT 0
71894: PUSH
71895: LD_INT 0
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 0
71904: PUSH
71905: LD_INT 1
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 1
71915: PUSH
71916: LD_INT 0
71918: PUSH
71919: EMPTY
71920: LIST
71921: LIST
71922: PUSH
71923: LD_INT 1
71925: PUSH
71926: LD_INT 1
71928: PUSH
71929: EMPTY
71930: LIST
71931: LIST
71932: PUSH
71933: LD_INT 0
71935: PUSH
71936: LD_INT 1
71938: PUSH
71939: EMPTY
71940: LIST
71941: LIST
71942: PUSH
71943: LD_INT 1
71945: NEG
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 1
71956: NEG
71957: PUSH
71958: LD_INT 1
71960: NEG
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 1
71968: NEG
71969: PUSH
71970: LD_INT 2
71972: NEG
71973: PUSH
71974: EMPTY
71975: LIST
71976: LIST
71977: PUSH
71978: LD_INT 0
71980: PUSH
71981: LD_INT 2
71983: NEG
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PUSH
71989: LD_INT 1
71991: PUSH
71992: LD_INT 1
71994: NEG
71995: PUSH
71996: EMPTY
71997: LIST
71998: LIST
71999: PUSH
72000: LD_INT 2
72002: PUSH
72003: LD_INT 0
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 2
72012: PUSH
72013: LD_INT 1
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 1
72022: PUSH
72023: LD_INT 2
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: LD_INT 2
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 1
72042: NEG
72043: PUSH
72044: LD_INT 1
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 2
72053: NEG
72054: PUSH
72055: LD_INT 0
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 2
72064: NEG
72065: PUSH
72066: LD_INT 1
72068: NEG
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 1
72076: NEG
72077: PUSH
72078: LD_INT 3
72080: NEG
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 0
72088: PUSH
72089: LD_INT 3
72091: NEG
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 1
72099: PUSH
72100: LD_INT 2
72102: NEG
72103: PUSH
72104: EMPTY
72105: LIST
72106: LIST
72107: PUSH
72108: LD_INT 2
72110: PUSH
72111: LD_INT 1
72113: NEG
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 3
72121: PUSH
72122: LD_INT 0
72124: PUSH
72125: EMPTY
72126: LIST
72127: LIST
72128: PUSH
72129: LD_INT 3
72131: PUSH
72132: LD_INT 1
72134: PUSH
72135: EMPTY
72136: LIST
72137: LIST
72138: PUSH
72139: LD_INT 1
72141: PUSH
72142: LD_INT 3
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: PUSH
72149: LD_INT 0
72151: PUSH
72152: LD_INT 3
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: PUSH
72159: LD_INT 1
72161: NEG
72162: PUSH
72163: LD_INT 2
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 2
72172: NEG
72173: PUSH
72174: LD_INT 1
72176: PUSH
72177: EMPTY
72178: LIST
72179: LIST
72180: PUSH
72181: LD_INT 3
72183: NEG
72184: PUSH
72185: LD_INT 0
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 3
72194: NEG
72195: PUSH
72196: LD_INT 1
72198: NEG
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: LIST
72208: LIST
72209: LIST
72210: LIST
72211: LIST
72212: LIST
72213: LIST
72214: LIST
72215: LIST
72216: LIST
72217: LIST
72218: LIST
72219: LIST
72220: LIST
72221: LIST
72222: LIST
72223: LIST
72224: LIST
72225: LIST
72226: LIST
72227: LIST
72228: LIST
72229: LIST
72230: LIST
72231: LIST
72232: LIST
72233: LIST
72234: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72235: LD_ADDR_VAR 0 47
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: LD_INT 0
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 0
72252: PUSH
72253: LD_INT 1
72255: NEG
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 1
72263: PUSH
72264: LD_INT 0
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PUSH
72271: LD_INT 1
72273: PUSH
72274: LD_INT 1
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 0
72283: PUSH
72284: LD_INT 1
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 1
72293: NEG
72294: PUSH
72295: LD_INT 0
72297: PUSH
72298: EMPTY
72299: LIST
72300: LIST
72301: PUSH
72302: LD_INT 1
72304: NEG
72305: PUSH
72306: LD_INT 1
72308: NEG
72309: PUSH
72310: EMPTY
72311: LIST
72312: LIST
72313: PUSH
72314: LD_INT 1
72316: NEG
72317: PUSH
72318: LD_INT 2
72320: NEG
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 0
72328: PUSH
72329: LD_INT 2
72331: NEG
72332: PUSH
72333: EMPTY
72334: LIST
72335: LIST
72336: PUSH
72337: LD_INT 1
72339: PUSH
72340: LD_INT 1
72342: NEG
72343: PUSH
72344: EMPTY
72345: LIST
72346: LIST
72347: PUSH
72348: LD_INT 2
72350: NEG
72351: PUSH
72352: LD_INT 1
72354: NEG
72355: PUSH
72356: EMPTY
72357: LIST
72358: LIST
72359: PUSH
72360: LD_INT 2
72362: NEG
72363: PUSH
72364: LD_INT 2
72366: NEG
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: LIST
72383: LIST
72384: LIST
72385: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
72386: LD_ADDR_VAR 0 48
72390: PUSH
72391: LD_INT 0
72393: PUSH
72394: LD_INT 0
72396: PUSH
72397: EMPTY
72398: LIST
72399: LIST
72400: PUSH
72401: LD_INT 0
72403: PUSH
72404: LD_INT 1
72406: NEG
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 1
72414: PUSH
72415: LD_INT 0
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 1
72424: PUSH
72425: LD_INT 1
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: PUSH
72432: LD_INT 0
72434: PUSH
72435: LD_INT 1
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 1
72444: NEG
72445: PUSH
72446: LD_INT 0
72448: PUSH
72449: EMPTY
72450: LIST
72451: LIST
72452: PUSH
72453: LD_INT 1
72455: NEG
72456: PUSH
72457: LD_INT 1
72459: NEG
72460: PUSH
72461: EMPTY
72462: LIST
72463: LIST
72464: PUSH
72465: LD_INT 1
72467: NEG
72468: PUSH
72469: LD_INT 2
72471: NEG
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 0
72479: PUSH
72480: LD_INT 2
72482: NEG
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 1
72490: PUSH
72491: LD_INT 1
72493: NEG
72494: PUSH
72495: EMPTY
72496: LIST
72497: LIST
72498: PUSH
72499: LD_INT 2
72501: PUSH
72502: LD_INT 0
72504: PUSH
72505: EMPTY
72506: LIST
72507: LIST
72508: PUSH
72509: LD_INT 2
72511: PUSH
72512: LD_INT 1
72514: PUSH
72515: EMPTY
72516: LIST
72517: LIST
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
72533: LD_ADDR_VAR 0 49
72537: PUSH
72538: LD_INT 0
72540: PUSH
72541: LD_INT 0
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 0
72550: PUSH
72551: LD_INT 1
72553: NEG
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 1
72561: PUSH
72562: LD_INT 0
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 1
72571: PUSH
72572: LD_INT 1
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 0
72581: PUSH
72582: LD_INT 1
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 1
72591: NEG
72592: PUSH
72593: LD_INT 0
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 1
72602: NEG
72603: PUSH
72604: LD_INT 1
72606: NEG
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 1
72614: PUSH
72615: LD_INT 1
72617: NEG
72618: PUSH
72619: EMPTY
72620: LIST
72621: LIST
72622: PUSH
72623: LD_INT 2
72625: PUSH
72626: LD_INT 0
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 2
72635: PUSH
72636: LD_INT 1
72638: PUSH
72639: EMPTY
72640: LIST
72641: LIST
72642: PUSH
72643: LD_INT 2
72645: PUSH
72646: LD_INT 2
72648: PUSH
72649: EMPTY
72650: LIST
72651: LIST
72652: PUSH
72653: LD_INT 1
72655: PUSH
72656: LD_INT 2
72658: PUSH
72659: EMPTY
72660: LIST
72661: LIST
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
72677: LD_ADDR_VAR 0 50
72681: PUSH
72682: LD_INT 0
72684: PUSH
72685: LD_INT 0
72687: PUSH
72688: EMPTY
72689: LIST
72690: LIST
72691: PUSH
72692: LD_INT 0
72694: PUSH
72695: LD_INT 1
72697: NEG
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 1
72705: PUSH
72706: LD_INT 0
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 1
72715: PUSH
72716: LD_INT 1
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 0
72725: PUSH
72726: LD_INT 1
72728: PUSH
72729: EMPTY
72730: LIST
72731: LIST
72732: PUSH
72733: LD_INT 1
72735: NEG
72736: PUSH
72737: LD_INT 0
72739: PUSH
72740: EMPTY
72741: LIST
72742: LIST
72743: PUSH
72744: LD_INT 1
72746: NEG
72747: PUSH
72748: LD_INT 1
72750: NEG
72751: PUSH
72752: EMPTY
72753: LIST
72754: LIST
72755: PUSH
72756: LD_INT 2
72758: PUSH
72759: LD_INT 1
72761: PUSH
72762: EMPTY
72763: LIST
72764: LIST
72765: PUSH
72766: LD_INT 2
72768: PUSH
72769: LD_INT 2
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 1
72778: PUSH
72779: LD_INT 2
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PUSH
72786: LD_INT 0
72788: PUSH
72789: LD_INT 2
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 1
72798: NEG
72799: PUSH
72800: LD_INT 1
72802: PUSH
72803: EMPTY
72804: LIST
72805: LIST
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: LIST
72811: LIST
72812: LIST
72813: LIST
72814: LIST
72815: LIST
72816: LIST
72817: LIST
72818: LIST
72819: LIST
72820: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
72821: LD_ADDR_VAR 0 51
72825: PUSH
72826: LD_INT 0
72828: PUSH
72829: LD_INT 0
72831: PUSH
72832: EMPTY
72833: LIST
72834: LIST
72835: PUSH
72836: LD_INT 0
72838: PUSH
72839: LD_INT 1
72841: NEG
72842: PUSH
72843: EMPTY
72844: LIST
72845: LIST
72846: PUSH
72847: LD_INT 1
72849: PUSH
72850: LD_INT 0
72852: PUSH
72853: EMPTY
72854: LIST
72855: LIST
72856: PUSH
72857: LD_INT 1
72859: PUSH
72860: LD_INT 1
72862: PUSH
72863: EMPTY
72864: LIST
72865: LIST
72866: PUSH
72867: LD_INT 0
72869: PUSH
72870: LD_INT 1
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 1
72879: NEG
72880: PUSH
72881: LD_INT 0
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: LD_INT 1
72890: NEG
72891: PUSH
72892: LD_INT 1
72894: NEG
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 1
72902: PUSH
72903: LD_INT 2
72905: PUSH
72906: EMPTY
72907: LIST
72908: LIST
72909: PUSH
72910: LD_INT 0
72912: PUSH
72913: LD_INT 2
72915: PUSH
72916: EMPTY
72917: LIST
72918: LIST
72919: PUSH
72920: LD_INT 1
72922: NEG
72923: PUSH
72924: LD_INT 1
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 2
72933: NEG
72934: PUSH
72935: LD_INT 0
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 2
72944: NEG
72945: PUSH
72946: LD_INT 1
72948: NEG
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: LIST
72958: LIST
72959: LIST
72960: LIST
72961: LIST
72962: LIST
72963: LIST
72964: LIST
72965: LIST
72966: LIST
72967: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72968: LD_ADDR_VAR 0 52
72972: PUSH
72973: LD_INT 0
72975: PUSH
72976: LD_INT 0
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 0
72985: PUSH
72986: LD_INT 1
72988: NEG
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 1
72996: PUSH
72997: LD_INT 0
72999: PUSH
73000: EMPTY
73001: LIST
73002: LIST
73003: PUSH
73004: LD_INT 1
73006: PUSH
73007: LD_INT 1
73009: PUSH
73010: EMPTY
73011: LIST
73012: LIST
73013: PUSH
73014: LD_INT 0
73016: PUSH
73017: LD_INT 1
73019: PUSH
73020: EMPTY
73021: LIST
73022: LIST
73023: PUSH
73024: LD_INT 1
73026: NEG
73027: PUSH
73028: LD_INT 0
73030: PUSH
73031: EMPTY
73032: LIST
73033: LIST
73034: PUSH
73035: LD_INT 1
73037: NEG
73038: PUSH
73039: LD_INT 1
73041: NEG
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PUSH
73047: LD_INT 1
73049: NEG
73050: PUSH
73051: LD_INT 2
73053: NEG
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 1
73061: NEG
73062: PUSH
73063: LD_INT 1
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 2
73072: NEG
73073: PUSH
73074: LD_INT 0
73076: PUSH
73077: EMPTY
73078: LIST
73079: LIST
73080: PUSH
73081: LD_INT 2
73083: NEG
73084: PUSH
73085: LD_INT 1
73087: NEG
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_INT 2
73095: NEG
73096: PUSH
73097: LD_INT 2
73099: NEG
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: LIST
73109: LIST
73110: LIST
73111: LIST
73112: LIST
73113: LIST
73114: LIST
73115: LIST
73116: LIST
73117: LIST
73118: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73119: LD_ADDR_VAR 0 53
73123: PUSH
73124: LD_INT 0
73126: PUSH
73127: LD_INT 0
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 0
73136: PUSH
73137: LD_INT 1
73139: NEG
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 1
73147: PUSH
73148: LD_INT 0
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 1
73157: PUSH
73158: LD_INT 1
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_INT 0
73167: PUSH
73168: LD_INT 1
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: LD_INT 1
73177: NEG
73178: PUSH
73179: LD_INT 0
73181: PUSH
73182: EMPTY
73183: LIST
73184: LIST
73185: PUSH
73186: LD_INT 1
73188: NEG
73189: PUSH
73190: LD_INT 1
73192: NEG
73193: PUSH
73194: EMPTY
73195: LIST
73196: LIST
73197: PUSH
73198: LD_INT 1
73200: NEG
73201: PUSH
73202: LD_INT 2
73204: NEG
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 0
73212: PUSH
73213: LD_INT 2
73215: NEG
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 1
73223: PUSH
73224: LD_INT 1
73226: NEG
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: LD_INT 2
73234: PUSH
73235: LD_INT 0
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 2
73244: PUSH
73245: LD_INT 1
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: LD_INT 2
73254: PUSH
73255: LD_INT 2
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 1
73264: PUSH
73265: LD_INT 2
73267: PUSH
73268: EMPTY
73269: LIST
73270: LIST
73271: PUSH
73272: LD_INT 0
73274: PUSH
73275: LD_INT 2
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 1
73284: NEG
73285: PUSH
73286: LD_INT 1
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 2
73295: NEG
73296: PUSH
73297: LD_INT 0
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 2
73306: NEG
73307: PUSH
73308: LD_INT 1
73310: NEG
73311: PUSH
73312: EMPTY
73313: LIST
73314: LIST
73315: PUSH
73316: LD_INT 2
73318: NEG
73319: PUSH
73320: LD_INT 2
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: LIST
73346: LIST
73347: LIST
73348: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73349: LD_ADDR_VAR 0 54
73353: PUSH
73354: LD_INT 0
73356: PUSH
73357: LD_INT 0
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 0
73366: PUSH
73367: LD_INT 1
73369: NEG
73370: PUSH
73371: EMPTY
73372: LIST
73373: LIST
73374: PUSH
73375: LD_INT 1
73377: PUSH
73378: LD_INT 0
73380: PUSH
73381: EMPTY
73382: LIST
73383: LIST
73384: PUSH
73385: LD_INT 1
73387: PUSH
73388: LD_INT 1
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 0
73397: PUSH
73398: LD_INT 1
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PUSH
73405: LD_INT 1
73407: NEG
73408: PUSH
73409: LD_INT 0
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 1
73418: NEG
73419: PUSH
73420: LD_INT 1
73422: NEG
73423: PUSH
73424: EMPTY
73425: LIST
73426: LIST
73427: PUSH
73428: LD_INT 1
73430: NEG
73431: PUSH
73432: LD_INT 2
73434: NEG
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 0
73442: PUSH
73443: LD_INT 2
73445: NEG
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 1
73453: PUSH
73454: LD_INT 1
73456: NEG
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 2
73464: PUSH
73465: LD_INT 0
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: LD_INT 2
73474: PUSH
73475: LD_INT 1
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 2
73484: PUSH
73485: LD_INT 2
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 1
73494: PUSH
73495: LD_INT 2
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 0
73504: PUSH
73505: LD_INT 2
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: LD_INT 1
73514: NEG
73515: PUSH
73516: LD_INT 1
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 2
73525: NEG
73526: PUSH
73527: LD_INT 0
73529: PUSH
73530: EMPTY
73531: LIST
73532: LIST
73533: PUSH
73534: LD_INT 2
73536: NEG
73537: PUSH
73538: LD_INT 1
73540: NEG
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: LD_INT 2
73548: NEG
73549: PUSH
73550: LD_INT 2
73552: NEG
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: EMPTY
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73579: LD_ADDR_VAR 0 55
73583: PUSH
73584: LD_INT 0
73586: PUSH
73587: LD_INT 0
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PUSH
73594: LD_INT 0
73596: PUSH
73597: LD_INT 1
73599: NEG
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PUSH
73605: LD_INT 1
73607: PUSH
73608: LD_INT 0
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: PUSH
73615: LD_INT 1
73617: PUSH
73618: LD_INT 1
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 0
73627: PUSH
73628: LD_INT 1
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 1
73637: NEG
73638: PUSH
73639: LD_INT 0
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PUSH
73646: LD_INT 1
73648: NEG
73649: PUSH
73650: LD_INT 1
73652: NEG
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PUSH
73658: LD_INT 1
73660: NEG
73661: PUSH
73662: LD_INT 2
73664: NEG
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PUSH
73670: LD_INT 0
73672: PUSH
73673: LD_INT 2
73675: NEG
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 1
73683: PUSH
73684: LD_INT 1
73686: NEG
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PUSH
73692: LD_INT 2
73694: PUSH
73695: LD_INT 0
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: PUSH
73702: LD_INT 2
73704: PUSH
73705: LD_INT 1
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: LD_INT 2
73714: PUSH
73715: LD_INT 2
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 1
73724: PUSH
73725: LD_INT 2
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_INT 0
73734: PUSH
73735: LD_INT 2
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PUSH
73742: LD_INT 1
73744: NEG
73745: PUSH
73746: LD_INT 1
73748: PUSH
73749: EMPTY
73750: LIST
73751: LIST
73752: PUSH
73753: LD_INT 2
73755: NEG
73756: PUSH
73757: LD_INT 0
73759: PUSH
73760: EMPTY
73761: LIST
73762: LIST
73763: PUSH
73764: LD_INT 2
73766: NEG
73767: PUSH
73768: LD_INT 1
73770: NEG
73771: PUSH
73772: EMPTY
73773: LIST
73774: LIST
73775: PUSH
73776: LD_INT 2
73778: NEG
73779: PUSH
73780: LD_INT 2
73782: NEG
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: LIST
73798: LIST
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73809: LD_ADDR_VAR 0 56
73813: PUSH
73814: LD_INT 0
73816: PUSH
73817: LD_INT 0
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: LD_INT 0
73826: PUSH
73827: LD_INT 1
73829: NEG
73830: PUSH
73831: EMPTY
73832: LIST
73833: LIST
73834: PUSH
73835: LD_INT 1
73837: PUSH
73838: LD_INT 0
73840: PUSH
73841: EMPTY
73842: LIST
73843: LIST
73844: PUSH
73845: LD_INT 1
73847: PUSH
73848: LD_INT 1
73850: PUSH
73851: EMPTY
73852: LIST
73853: LIST
73854: PUSH
73855: LD_INT 0
73857: PUSH
73858: LD_INT 1
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: PUSH
73865: LD_INT 1
73867: NEG
73868: PUSH
73869: LD_INT 0
73871: PUSH
73872: EMPTY
73873: LIST
73874: LIST
73875: PUSH
73876: LD_INT 1
73878: NEG
73879: PUSH
73880: LD_INT 1
73882: NEG
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: PUSH
73888: LD_INT 1
73890: NEG
73891: PUSH
73892: LD_INT 2
73894: NEG
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: PUSH
73900: LD_INT 0
73902: PUSH
73903: LD_INT 2
73905: NEG
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 1
73913: PUSH
73914: LD_INT 1
73916: NEG
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: LD_INT 2
73924: PUSH
73925: LD_INT 0
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PUSH
73932: LD_INT 2
73934: PUSH
73935: LD_INT 1
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: PUSH
73942: LD_INT 2
73944: PUSH
73945: LD_INT 2
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: PUSH
73952: LD_INT 1
73954: PUSH
73955: LD_INT 2
73957: PUSH
73958: EMPTY
73959: LIST
73960: LIST
73961: PUSH
73962: LD_INT 0
73964: PUSH
73965: LD_INT 2
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_INT 1
73974: NEG
73975: PUSH
73976: LD_INT 1
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: PUSH
73983: LD_INT 2
73985: NEG
73986: PUSH
73987: LD_INT 0
73989: PUSH
73990: EMPTY
73991: LIST
73992: LIST
73993: PUSH
73994: LD_INT 2
73996: NEG
73997: PUSH
73998: LD_INT 1
74000: NEG
74001: PUSH
74002: EMPTY
74003: LIST
74004: LIST
74005: PUSH
74006: LD_INT 2
74008: NEG
74009: PUSH
74010: LD_INT 2
74012: NEG
74013: PUSH
74014: EMPTY
74015: LIST
74016: LIST
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: LIST
74036: LIST
74037: LIST
74038: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74039: LD_ADDR_VAR 0 57
74043: PUSH
74044: LD_INT 0
74046: PUSH
74047: LD_INT 0
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: LD_INT 0
74056: PUSH
74057: LD_INT 1
74059: NEG
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 1
74067: PUSH
74068: LD_INT 0
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: PUSH
74075: LD_INT 1
74077: PUSH
74078: LD_INT 1
74080: PUSH
74081: EMPTY
74082: LIST
74083: LIST
74084: PUSH
74085: LD_INT 0
74087: PUSH
74088: LD_INT 1
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 1
74097: NEG
74098: PUSH
74099: LD_INT 0
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: LD_INT 1
74108: NEG
74109: PUSH
74110: LD_INT 1
74112: NEG
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: PUSH
74118: LD_INT 1
74120: NEG
74121: PUSH
74122: LD_INT 2
74124: NEG
74125: PUSH
74126: EMPTY
74127: LIST
74128: LIST
74129: PUSH
74130: LD_INT 0
74132: PUSH
74133: LD_INT 2
74135: NEG
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: PUSH
74141: LD_INT 1
74143: PUSH
74144: LD_INT 1
74146: NEG
74147: PUSH
74148: EMPTY
74149: LIST
74150: LIST
74151: PUSH
74152: LD_INT 2
74154: PUSH
74155: LD_INT 0
74157: PUSH
74158: EMPTY
74159: LIST
74160: LIST
74161: PUSH
74162: LD_INT 2
74164: PUSH
74165: LD_INT 1
74167: PUSH
74168: EMPTY
74169: LIST
74170: LIST
74171: PUSH
74172: LD_INT 2
74174: PUSH
74175: LD_INT 2
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: PUSH
74182: LD_INT 1
74184: PUSH
74185: LD_INT 2
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: LD_INT 0
74194: PUSH
74195: LD_INT 2
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 1
74204: NEG
74205: PUSH
74206: LD_INT 1
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: PUSH
74213: LD_INT 2
74215: NEG
74216: PUSH
74217: LD_INT 0
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: PUSH
74224: LD_INT 2
74226: NEG
74227: PUSH
74228: LD_INT 1
74230: NEG
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: LD_INT 2
74238: NEG
74239: PUSH
74240: LD_INT 2
74242: NEG
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74269: LD_ADDR_VAR 0 58
74273: PUSH
74274: LD_INT 0
74276: PUSH
74277: LD_INT 0
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: PUSH
74284: LD_INT 0
74286: PUSH
74287: LD_INT 1
74289: NEG
74290: PUSH
74291: EMPTY
74292: LIST
74293: LIST
74294: PUSH
74295: LD_INT 1
74297: PUSH
74298: LD_INT 0
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: PUSH
74305: LD_INT 1
74307: PUSH
74308: LD_INT 1
74310: PUSH
74311: EMPTY
74312: LIST
74313: LIST
74314: PUSH
74315: LD_INT 0
74317: PUSH
74318: LD_INT 1
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 1
74327: NEG
74328: PUSH
74329: LD_INT 0
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: PUSH
74336: LD_INT 1
74338: NEG
74339: PUSH
74340: LD_INT 1
74342: NEG
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: PUSH
74348: LD_INT 1
74350: NEG
74351: PUSH
74352: LD_INT 2
74354: NEG
74355: PUSH
74356: EMPTY
74357: LIST
74358: LIST
74359: PUSH
74360: LD_INT 0
74362: PUSH
74363: LD_INT 2
74365: NEG
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: PUSH
74371: LD_INT 1
74373: PUSH
74374: LD_INT 1
74376: NEG
74377: PUSH
74378: EMPTY
74379: LIST
74380: LIST
74381: PUSH
74382: LD_INT 2
74384: PUSH
74385: LD_INT 0
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: PUSH
74392: LD_INT 2
74394: PUSH
74395: LD_INT 1
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: PUSH
74402: LD_INT 2
74404: PUSH
74405: LD_INT 2
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: PUSH
74412: LD_INT 1
74414: PUSH
74415: LD_INT 2
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: PUSH
74422: LD_INT 0
74424: PUSH
74425: LD_INT 2
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: PUSH
74432: LD_INT 1
74434: NEG
74435: PUSH
74436: LD_INT 1
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: PUSH
74443: LD_INT 2
74445: NEG
74446: PUSH
74447: LD_INT 0
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: PUSH
74454: LD_INT 2
74456: NEG
74457: PUSH
74458: LD_INT 1
74460: NEG
74461: PUSH
74462: EMPTY
74463: LIST
74464: LIST
74465: PUSH
74466: LD_INT 2
74468: NEG
74469: PUSH
74470: LD_INT 2
74472: NEG
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74499: LD_ADDR_VAR 0 59
74503: PUSH
74504: LD_INT 0
74506: PUSH
74507: LD_INT 0
74509: PUSH
74510: EMPTY
74511: LIST
74512: LIST
74513: PUSH
74514: LD_INT 0
74516: PUSH
74517: LD_INT 1
74519: NEG
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 1
74527: PUSH
74528: LD_INT 0
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 1
74537: PUSH
74538: LD_INT 1
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 0
74547: PUSH
74548: LD_INT 1
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: PUSH
74555: LD_INT 1
74557: NEG
74558: PUSH
74559: LD_INT 0
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: PUSH
74566: LD_INT 1
74568: NEG
74569: PUSH
74570: LD_INT 1
74572: NEG
74573: PUSH
74574: EMPTY
74575: LIST
74576: LIST
74577: PUSH
74578: EMPTY
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74587: LD_ADDR_VAR 0 60
74591: PUSH
74592: LD_INT 0
74594: PUSH
74595: LD_INT 0
74597: PUSH
74598: EMPTY
74599: LIST
74600: LIST
74601: PUSH
74602: LD_INT 0
74604: PUSH
74605: LD_INT 1
74607: NEG
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: LD_INT 1
74615: PUSH
74616: LD_INT 0
74618: PUSH
74619: EMPTY
74620: LIST
74621: LIST
74622: PUSH
74623: LD_INT 1
74625: PUSH
74626: LD_INT 1
74628: PUSH
74629: EMPTY
74630: LIST
74631: LIST
74632: PUSH
74633: LD_INT 0
74635: PUSH
74636: LD_INT 1
74638: PUSH
74639: EMPTY
74640: LIST
74641: LIST
74642: PUSH
74643: LD_INT 1
74645: NEG
74646: PUSH
74647: LD_INT 0
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PUSH
74654: LD_INT 1
74656: NEG
74657: PUSH
74658: LD_INT 1
74660: NEG
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: PUSH
74666: EMPTY
74667: LIST
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74675: LD_ADDR_VAR 0 61
74679: PUSH
74680: LD_INT 0
74682: PUSH
74683: LD_INT 0
74685: PUSH
74686: EMPTY
74687: LIST
74688: LIST
74689: PUSH
74690: LD_INT 0
74692: PUSH
74693: LD_INT 1
74695: NEG
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: PUSH
74701: LD_INT 1
74703: PUSH
74704: LD_INT 0
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 1
74713: PUSH
74714: LD_INT 1
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 0
74723: PUSH
74724: LD_INT 1
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 1
74733: NEG
74734: PUSH
74735: LD_INT 0
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: PUSH
74742: LD_INT 1
74744: NEG
74745: PUSH
74746: LD_INT 1
74748: NEG
74749: PUSH
74750: EMPTY
74751: LIST
74752: LIST
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74763: LD_ADDR_VAR 0 62
74767: PUSH
74768: LD_INT 0
74770: PUSH
74771: LD_INT 0
74773: PUSH
74774: EMPTY
74775: LIST
74776: LIST
74777: PUSH
74778: LD_INT 0
74780: PUSH
74781: LD_INT 1
74783: NEG
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: LD_INT 1
74791: PUSH
74792: LD_INT 0
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: PUSH
74799: LD_INT 1
74801: PUSH
74802: LD_INT 1
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: PUSH
74809: LD_INT 0
74811: PUSH
74812: LD_INT 1
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PUSH
74819: LD_INT 1
74821: NEG
74822: PUSH
74823: LD_INT 0
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: PUSH
74830: LD_INT 1
74832: NEG
74833: PUSH
74834: LD_INT 1
74836: NEG
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74851: LD_ADDR_VAR 0 63
74855: PUSH
74856: LD_INT 0
74858: PUSH
74859: LD_INT 0
74861: PUSH
74862: EMPTY
74863: LIST
74864: LIST
74865: PUSH
74866: LD_INT 0
74868: PUSH
74869: LD_INT 1
74871: NEG
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: PUSH
74877: LD_INT 1
74879: PUSH
74880: LD_INT 0
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: PUSH
74887: LD_INT 1
74889: PUSH
74890: LD_INT 1
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: PUSH
74897: LD_INT 0
74899: PUSH
74900: LD_INT 1
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: PUSH
74907: LD_INT 1
74909: NEG
74910: PUSH
74911: LD_INT 0
74913: PUSH
74914: EMPTY
74915: LIST
74916: LIST
74917: PUSH
74918: LD_INT 1
74920: NEG
74921: PUSH
74922: LD_INT 1
74924: NEG
74925: PUSH
74926: EMPTY
74927: LIST
74928: LIST
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: LIST
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
74939: LD_ADDR_VAR 0 64
74943: PUSH
74944: LD_INT 0
74946: PUSH
74947: LD_INT 0
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PUSH
74954: LD_INT 0
74956: PUSH
74957: LD_INT 1
74959: NEG
74960: PUSH
74961: EMPTY
74962: LIST
74963: LIST
74964: PUSH
74965: LD_INT 1
74967: PUSH
74968: LD_INT 0
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 1
74977: PUSH
74978: LD_INT 1
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: LD_INT 0
74987: PUSH
74988: LD_INT 1
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 1
74997: NEG
74998: PUSH
74999: LD_INT 0
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PUSH
75006: LD_INT 1
75008: NEG
75009: PUSH
75010: LD_INT 1
75012: NEG
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: ST_TO_ADDR
// end ; 1 :
75027: GO 80924
75029: LD_INT 1
75031: DOUBLE
75032: EQUAL
75033: IFTRUE 75037
75035: GO 77660
75037: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75038: LD_ADDR_VAR 0 11
75042: PUSH
75043: LD_INT 1
75045: NEG
75046: PUSH
75047: LD_INT 3
75049: NEG
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: PUSH
75055: LD_INT 0
75057: PUSH
75058: LD_INT 3
75060: NEG
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PUSH
75066: LD_INT 1
75068: PUSH
75069: LD_INT 2
75071: NEG
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: LIST
75081: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75082: LD_ADDR_VAR 0 12
75086: PUSH
75087: LD_INT 2
75089: PUSH
75090: LD_INT 1
75092: NEG
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 3
75100: PUSH
75101: LD_INT 0
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PUSH
75108: LD_INT 3
75110: PUSH
75111: LD_INT 1
75113: PUSH
75114: EMPTY
75115: LIST
75116: LIST
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: LIST
75122: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75123: LD_ADDR_VAR 0 13
75127: PUSH
75128: LD_INT 3
75130: PUSH
75131: LD_INT 2
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: PUSH
75138: LD_INT 3
75140: PUSH
75141: LD_INT 3
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: PUSH
75148: LD_INT 2
75150: PUSH
75151: LD_INT 3
75153: PUSH
75154: EMPTY
75155: LIST
75156: LIST
75157: PUSH
75158: EMPTY
75159: LIST
75160: LIST
75161: LIST
75162: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75163: LD_ADDR_VAR 0 14
75167: PUSH
75168: LD_INT 1
75170: PUSH
75171: LD_INT 3
75173: PUSH
75174: EMPTY
75175: LIST
75176: LIST
75177: PUSH
75178: LD_INT 0
75180: PUSH
75181: LD_INT 3
75183: PUSH
75184: EMPTY
75185: LIST
75186: LIST
75187: PUSH
75188: LD_INT 1
75190: NEG
75191: PUSH
75192: LD_INT 2
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: EMPTY
75200: LIST
75201: LIST
75202: LIST
75203: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75204: LD_ADDR_VAR 0 15
75208: PUSH
75209: LD_INT 2
75211: NEG
75212: PUSH
75213: LD_INT 1
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: LD_INT 3
75222: NEG
75223: PUSH
75224: LD_INT 0
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 3
75233: NEG
75234: PUSH
75235: LD_INT 1
75237: NEG
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: EMPTY
75244: LIST
75245: LIST
75246: LIST
75247: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75248: LD_ADDR_VAR 0 16
75252: PUSH
75253: LD_INT 2
75255: NEG
75256: PUSH
75257: LD_INT 3
75259: NEG
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: PUSH
75265: LD_INT 3
75267: NEG
75268: PUSH
75269: LD_INT 2
75271: NEG
75272: PUSH
75273: EMPTY
75274: LIST
75275: LIST
75276: PUSH
75277: LD_INT 3
75279: NEG
75280: PUSH
75281: LD_INT 3
75283: NEG
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: LIST
75293: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75294: LD_ADDR_VAR 0 17
75298: PUSH
75299: LD_INT 1
75301: NEG
75302: PUSH
75303: LD_INT 3
75305: NEG
75306: PUSH
75307: EMPTY
75308: LIST
75309: LIST
75310: PUSH
75311: LD_INT 0
75313: PUSH
75314: LD_INT 3
75316: NEG
75317: PUSH
75318: EMPTY
75319: LIST
75320: LIST
75321: PUSH
75322: LD_INT 1
75324: PUSH
75325: LD_INT 2
75327: NEG
75328: PUSH
75329: EMPTY
75330: LIST
75331: LIST
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: LIST
75337: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75338: LD_ADDR_VAR 0 18
75342: PUSH
75343: LD_INT 2
75345: PUSH
75346: LD_INT 1
75348: NEG
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PUSH
75354: LD_INT 3
75356: PUSH
75357: LD_INT 0
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 3
75366: PUSH
75367: LD_INT 1
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: LIST
75378: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75379: LD_ADDR_VAR 0 19
75383: PUSH
75384: LD_INT 3
75386: PUSH
75387: LD_INT 2
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: PUSH
75394: LD_INT 3
75396: PUSH
75397: LD_INT 3
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: PUSH
75404: LD_INT 2
75406: PUSH
75407: LD_INT 3
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: EMPTY
75415: LIST
75416: LIST
75417: LIST
75418: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75419: LD_ADDR_VAR 0 20
75423: PUSH
75424: LD_INT 1
75426: PUSH
75427: LD_INT 3
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PUSH
75434: LD_INT 0
75436: PUSH
75437: LD_INT 3
75439: PUSH
75440: EMPTY
75441: LIST
75442: LIST
75443: PUSH
75444: LD_INT 1
75446: NEG
75447: PUSH
75448: LD_INT 2
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PUSH
75455: EMPTY
75456: LIST
75457: LIST
75458: LIST
75459: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75460: LD_ADDR_VAR 0 21
75464: PUSH
75465: LD_INT 2
75467: NEG
75468: PUSH
75469: LD_INT 1
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: PUSH
75476: LD_INT 3
75478: NEG
75479: PUSH
75480: LD_INT 0
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: PUSH
75487: LD_INT 3
75489: NEG
75490: PUSH
75491: LD_INT 1
75493: NEG
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: PUSH
75499: EMPTY
75500: LIST
75501: LIST
75502: LIST
75503: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75504: LD_ADDR_VAR 0 22
75508: PUSH
75509: LD_INT 2
75511: NEG
75512: PUSH
75513: LD_INT 3
75515: NEG
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: PUSH
75521: LD_INT 3
75523: NEG
75524: PUSH
75525: LD_INT 2
75527: NEG
75528: PUSH
75529: EMPTY
75530: LIST
75531: LIST
75532: PUSH
75533: LD_INT 3
75535: NEG
75536: PUSH
75537: LD_INT 3
75539: NEG
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: LIST
75549: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
75550: LD_ADDR_VAR 0 23
75554: PUSH
75555: LD_INT 0
75557: PUSH
75558: LD_INT 3
75560: NEG
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PUSH
75566: LD_INT 1
75568: NEG
75569: PUSH
75570: LD_INT 4
75572: NEG
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PUSH
75578: LD_INT 1
75580: PUSH
75581: LD_INT 3
75583: NEG
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: LIST
75593: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
75594: LD_ADDR_VAR 0 24
75598: PUSH
75599: LD_INT 3
75601: PUSH
75602: LD_INT 0
75604: PUSH
75605: EMPTY
75606: LIST
75607: LIST
75608: PUSH
75609: LD_INT 3
75611: PUSH
75612: LD_INT 1
75614: NEG
75615: PUSH
75616: EMPTY
75617: LIST
75618: LIST
75619: PUSH
75620: LD_INT 4
75622: PUSH
75623: LD_INT 1
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: PUSH
75630: EMPTY
75631: LIST
75632: LIST
75633: LIST
75634: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
75635: LD_ADDR_VAR 0 25
75639: PUSH
75640: LD_INT 3
75642: PUSH
75643: LD_INT 3
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: LD_INT 4
75652: PUSH
75653: LD_INT 3
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: PUSH
75660: LD_INT 3
75662: PUSH
75663: LD_INT 4
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: EMPTY
75671: LIST
75672: LIST
75673: LIST
75674: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
75675: LD_ADDR_VAR 0 26
75679: PUSH
75680: LD_INT 0
75682: PUSH
75683: LD_INT 3
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PUSH
75690: LD_INT 1
75692: PUSH
75693: LD_INT 4
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PUSH
75700: LD_INT 1
75702: NEG
75703: PUSH
75704: LD_INT 3
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: EMPTY
75712: LIST
75713: LIST
75714: LIST
75715: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
75716: LD_ADDR_VAR 0 27
75720: PUSH
75721: LD_INT 3
75723: NEG
75724: PUSH
75725: LD_INT 0
75727: PUSH
75728: EMPTY
75729: LIST
75730: LIST
75731: PUSH
75732: LD_INT 3
75734: NEG
75735: PUSH
75736: LD_INT 1
75738: PUSH
75739: EMPTY
75740: LIST
75741: LIST
75742: PUSH
75743: LD_INT 4
75745: NEG
75746: PUSH
75747: LD_INT 1
75749: NEG
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: LIST
75759: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
75760: LD_ADDR_VAR 0 28
75764: PUSH
75765: LD_INT 3
75767: NEG
75768: PUSH
75769: LD_INT 3
75771: NEG
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: PUSH
75777: LD_INT 3
75779: NEG
75780: PUSH
75781: LD_INT 4
75783: NEG
75784: PUSH
75785: EMPTY
75786: LIST
75787: LIST
75788: PUSH
75789: LD_INT 4
75791: NEG
75792: PUSH
75793: LD_INT 3
75795: NEG
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: PUSH
75801: EMPTY
75802: LIST
75803: LIST
75804: LIST
75805: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
75806: LD_ADDR_VAR 0 29
75810: PUSH
75811: LD_INT 1
75813: NEG
75814: PUSH
75815: LD_INT 3
75817: NEG
75818: PUSH
75819: EMPTY
75820: LIST
75821: LIST
75822: PUSH
75823: LD_INT 0
75825: PUSH
75826: LD_INT 3
75828: NEG
75829: PUSH
75830: EMPTY
75831: LIST
75832: LIST
75833: PUSH
75834: LD_INT 1
75836: PUSH
75837: LD_INT 2
75839: NEG
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 1
75847: NEG
75848: PUSH
75849: LD_INT 4
75851: NEG
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: LD_INT 0
75859: PUSH
75860: LD_INT 4
75862: NEG
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: PUSH
75868: LD_INT 1
75870: PUSH
75871: LD_INT 3
75873: NEG
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: PUSH
75879: LD_INT 1
75881: NEG
75882: PUSH
75883: LD_INT 5
75885: NEG
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PUSH
75891: LD_INT 0
75893: PUSH
75894: LD_INT 5
75896: NEG
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: PUSH
75902: LD_INT 1
75904: PUSH
75905: LD_INT 4
75907: NEG
75908: PUSH
75909: EMPTY
75910: LIST
75911: LIST
75912: PUSH
75913: LD_INT 1
75915: NEG
75916: PUSH
75917: LD_INT 6
75919: NEG
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PUSH
75925: LD_INT 0
75927: PUSH
75928: LD_INT 6
75930: NEG
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: PUSH
75936: LD_INT 1
75938: PUSH
75939: LD_INT 5
75941: NEG
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: LIST
75951: LIST
75952: LIST
75953: LIST
75954: LIST
75955: LIST
75956: LIST
75957: LIST
75958: LIST
75959: LIST
75960: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
75961: LD_ADDR_VAR 0 30
75965: PUSH
75966: LD_INT 2
75968: PUSH
75969: LD_INT 1
75971: NEG
75972: PUSH
75973: EMPTY
75974: LIST
75975: LIST
75976: PUSH
75977: LD_INT 3
75979: PUSH
75980: LD_INT 0
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: PUSH
75987: LD_INT 3
75989: PUSH
75990: LD_INT 1
75992: PUSH
75993: EMPTY
75994: LIST
75995: LIST
75996: PUSH
75997: LD_INT 3
75999: PUSH
76000: LD_INT 1
76002: NEG
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PUSH
76008: LD_INT 4
76010: PUSH
76011: LD_INT 0
76013: PUSH
76014: EMPTY
76015: LIST
76016: LIST
76017: PUSH
76018: LD_INT 4
76020: PUSH
76021: LD_INT 1
76023: PUSH
76024: EMPTY
76025: LIST
76026: LIST
76027: PUSH
76028: LD_INT 4
76030: PUSH
76031: LD_INT 1
76033: NEG
76034: PUSH
76035: EMPTY
76036: LIST
76037: LIST
76038: PUSH
76039: LD_INT 5
76041: PUSH
76042: LD_INT 0
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: PUSH
76049: LD_INT 5
76051: PUSH
76052: LD_INT 1
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: PUSH
76059: LD_INT 5
76061: PUSH
76062: LD_INT 1
76064: NEG
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: PUSH
76070: LD_INT 6
76072: PUSH
76073: LD_INT 0
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: PUSH
76080: LD_INT 6
76082: PUSH
76083: LD_INT 1
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: LIST
76094: LIST
76095: LIST
76096: LIST
76097: LIST
76098: LIST
76099: LIST
76100: LIST
76101: LIST
76102: LIST
76103: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
76104: LD_ADDR_VAR 0 31
76108: PUSH
76109: LD_INT 3
76111: PUSH
76112: LD_INT 2
76114: PUSH
76115: EMPTY
76116: LIST
76117: LIST
76118: PUSH
76119: LD_INT 3
76121: PUSH
76122: LD_INT 3
76124: PUSH
76125: EMPTY
76126: LIST
76127: LIST
76128: PUSH
76129: LD_INT 2
76131: PUSH
76132: LD_INT 3
76134: PUSH
76135: EMPTY
76136: LIST
76137: LIST
76138: PUSH
76139: LD_INT 4
76141: PUSH
76142: LD_INT 3
76144: PUSH
76145: EMPTY
76146: LIST
76147: LIST
76148: PUSH
76149: LD_INT 4
76151: PUSH
76152: LD_INT 4
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PUSH
76159: LD_INT 3
76161: PUSH
76162: LD_INT 4
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: PUSH
76169: LD_INT 5
76171: PUSH
76172: LD_INT 4
76174: PUSH
76175: EMPTY
76176: LIST
76177: LIST
76178: PUSH
76179: LD_INT 5
76181: PUSH
76182: LD_INT 5
76184: PUSH
76185: EMPTY
76186: LIST
76187: LIST
76188: PUSH
76189: LD_INT 4
76191: PUSH
76192: LD_INT 5
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: LD_INT 6
76201: PUSH
76202: LD_INT 5
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: PUSH
76209: LD_INT 6
76211: PUSH
76212: LD_INT 6
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PUSH
76219: LD_INT 5
76221: PUSH
76222: LD_INT 6
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PUSH
76229: EMPTY
76230: LIST
76231: LIST
76232: LIST
76233: LIST
76234: LIST
76235: LIST
76236: LIST
76237: LIST
76238: LIST
76239: LIST
76240: LIST
76241: LIST
76242: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
76243: LD_ADDR_VAR 0 32
76247: PUSH
76248: LD_INT 1
76250: PUSH
76251: LD_INT 3
76253: PUSH
76254: EMPTY
76255: LIST
76256: LIST
76257: PUSH
76258: LD_INT 0
76260: PUSH
76261: LD_INT 3
76263: PUSH
76264: EMPTY
76265: LIST
76266: LIST
76267: PUSH
76268: LD_INT 1
76270: NEG
76271: PUSH
76272: LD_INT 2
76274: PUSH
76275: EMPTY
76276: LIST
76277: LIST
76278: PUSH
76279: LD_INT 1
76281: PUSH
76282: LD_INT 4
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: PUSH
76289: LD_INT 0
76291: PUSH
76292: LD_INT 4
76294: PUSH
76295: EMPTY
76296: LIST
76297: LIST
76298: PUSH
76299: LD_INT 1
76301: NEG
76302: PUSH
76303: LD_INT 3
76305: PUSH
76306: EMPTY
76307: LIST
76308: LIST
76309: PUSH
76310: LD_INT 1
76312: PUSH
76313: LD_INT 5
76315: PUSH
76316: EMPTY
76317: LIST
76318: LIST
76319: PUSH
76320: LD_INT 0
76322: PUSH
76323: LD_INT 5
76325: PUSH
76326: EMPTY
76327: LIST
76328: LIST
76329: PUSH
76330: LD_INT 1
76332: NEG
76333: PUSH
76334: LD_INT 4
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: LD_INT 1
76343: PUSH
76344: LD_INT 6
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: PUSH
76351: LD_INT 0
76353: PUSH
76354: LD_INT 6
76356: PUSH
76357: EMPTY
76358: LIST
76359: LIST
76360: PUSH
76361: LD_INT 1
76363: NEG
76364: PUSH
76365: LD_INT 5
76367: PUSH
76368: EMPTY
76369: LIST
76370: LIST
76371: PUSH
76372: EMPTY
76373: LIST
76374: LIST
76375: LIST
76376: LIST
76377: LIST
76378: LIST
76379: LIST
76380: LIST
76381: LIST
76382: LIST
76383: LIST
76384: LIST
76385: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
76386: LD_ADDR_VAR 0 33
76390: PUSH
76391: LD_INT 2
76393: NEG
76394: PUSH
76395: LD_INT 1
76397: PUSH
76398: EMPTY
76399: LIST
76400: LIST
76401: PUSH
76402: LD_INT 3
76404: NEG
76405: PUSH
76406: LD_INT 0
76408: PUSH
76409: EMPTY
76410: LIST
76411: LIST
76412: PUSH
76413: LD_INT 3
76415: NEG
76416: PUSH
76417: LD_INT 1
76419: NEG
76420: PUSH
76421: EMPTY
76422: LIST
76423: LIST
76424: PUSH
76425: LD_INT 3
76427: NEG
76428: PUSH
76429: LD_INT 1
76431: PUSH
76432: EMPTY
76433: LIST
76434: LIST
76435: PUSH
76436: LD_INT 4
76438: NEG
76439: PUSH
76440: LD_INT 0
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: PUSH
76447: LD_INT 4
76449: NEG
76450: PUSH
76451: LD_INT 1
76453: NEG
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: PUSH
76459: LD_INT 4
76461: NEG
76462: PUSH
76463: LD_INT 1
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: PUSH
76470: LD_INT 5
76472: NEG
76473: PUSH
76474: LD_INT 0
76476: PUSH
76477: EMPTY
76478: LIST
76479: LIST
76480: PUSH
76481: LD_INT 5
76483: NEG
76484: PUSH
76485: LD_INT 1
76487: NEG
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: PUSH
76493: LD_INT 5
76495: NEG
76496: PUSH
76497: LD_INT 1
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: LD_INT 6
76506: NEG
76507: PUSH
76508: LD_INT 0
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: PUSH
76515: LD_INT 6
76517: NEG
76518: PUSH
76519: LD_INT 1
76521: NEG
76522: PUSH
76523: EMPTY
76524: LIST
76525: LIST
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: LIST
76535: LIST
76536: LIST
76537: LIST
76538: LIST
76539: LIST
76540: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
76541: LD_ADDR_VAR 0 34
76545: PUSH
76546: LD_INT 2
76548: NEG
76549: PUSH
76550: LD_INT 3
76552: NEG
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: PUSH
76558: LD_INT 3
76560: NEG
76561: PUSH
76562: LD_INT 2
76564: NEG
76565: PUSH
76566: EMPTY
76567: LIST
76568: LIST
76569: PUSH
76570: LD_INT 3
76572: NEG
76573: PUSH
76574: LD_INT 3
76576: NEG
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: PUSH
76582: LD_INT 3
76584: NEG
76585: PUSH
76586: LD_INT 4
76588: NEG
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: PUSH
76594: LD_INT 4
76596: NEG
76597: PUSH
76598: LD_INT 3
76600: NEG
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: PUSH
76606: LD_INT 4
76608: NEG
76609: PUSH
76610: LD_INT 4
76612: NEG
76613: PUSH
76614: EMPTY
76615: LIST
76616: LIST
76617: PUSH
76618: LD_INT 4
76620: NEG
76621: PUSH
76622: LD_INT 5
76624: NEG
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: PUSH
76630: LD_INT 5
76632: NEG
76633: PUSH
76634: LD_INT 4
76636: NEG
76637: PUSH
76638: EMPTY
76639: LIST
76640: LIST
76641: PUSH
76642: LD_INT 5
76644: NEG
76645: PUSH
76646: LD_INT 5
76648: NEG
76649: PUSH
76650: EMPTY
76651: LIST
76652: LIST
76653: PUSH
76654: LD_INT 5
76656: NEG
76657: PUSH
76658: LD_INT 6
76660: NEG
76661: PUSH
76662: EMPTY
76663: LIST
76664: LIST
76665: PUSH
76666: LD_INT 6
76668: NEG
76669: PUSH
76670: LD_INT 5
76672: NEG
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: PUSH
76678: LD_INT 6
76680: NEG
76681: PUSH
76682: LD_INT 6
76684: NEG
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: LIST
76694: LIST
76695: LIST
76696: LIST
76697: LIST
76698: LIST
76699: LIST
76700: LIST
76701: LIST
76702: LIST
76703: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
76704: LD_ADDR_VAR 0 41
76708: PUSH
76709: LD_INT 0
76711: PUSH
76712: LD_INT 2
76714: NEG
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: PUSH
76720: LD_INT 1
76722: NEG
76723: PUSH
76724: LD_INT 3
76726: NEG
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: PUSH
76732: LD_INT 1
76734: PUSH
76735: LD_INT 2
76737: NEG
76738: PUSH
76739: EMPTY
76740: LIST
76741: LIST
76742: PUSH
76743: EMPTY
76744: LIST
76745: LIST
76746: LIST
76747: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
76748: LD_ADDR_VAR 0 42
76752: PUSH
76753: LD_INT 2
76755: PUSH
76756: LD_INT 0
76758: PUSH
76759: EMPTY
76760: LIST
76761: LIST
76762: PUSH
76763: LD_INT 2
76765: PUSH
76766: LD_INT 1
76768: NEG
76769: PUSH
76770: EMPTY
76771: LIST
76772: LIST
76773: PUSH
76774: LD_INT 3
76776: PUSH
76777: LD_INT 1
76779: PUSH
76780: EMPTY
76781: LIST
76782: LIST
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: LIST
76788: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
76789: LD_ADDR_VAR 0 43
76793: PUSH
76794: LD_INT 2
76796: PUSH
76797: LD_INT 2
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: PUSH
76804: LD_INT 3
76806: PUSH
76807: LD_INT 2
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PUSH
76814: LD_INT 2
76816: PUSH
76817: LD_INT 3
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: LIST
76828: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
76829: LD_ADDR_VAR 0 44
76833: PUSH
76834: LD_INT 0
76836: PUSH
76837: LD_INT 2
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: PUSH
76844: LD_INT 1
76846: PUSH
76847: LD_INT 3
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: LD_INT 1
76856: NEG
76857: PUSH
76858: LD_INT 2
76860: PUSH
76861: EMPTY
76862: LIST
76863: LIST
76864: PUSH
76865: EMPTY
76866: LIST
76867: LIST
76868: LIST
76869: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76870: LD_ADDR_VAR 0 45
76874: PUSH
76875: LD_INT 2
76877: NEG
76878: PUSH
76879: LD_INT 0
76881: PUSH
76882: EMPTY
76883: LIST
76884: LIST
76885: PUSH
76886: LD_INT 2
76888: NEG
76889: PUSH
76890: LD_INT 1
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 3
76899: NEG
76900: PUSH
76901: LD_INT 1
76903: NEG
76904: PUSH
76905: EMPTY
76906: LIST
76907: LIST
76908: PUSH
76909: EMPTY
76910: LIST
76911: LIST
76912: LIST
76913: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
76914: LD_ADDR_VAR 0 46
76918: PUSH
76919: LD_INT 2
76921: NEG
76922: PUSH
76923: LD_INT 2
76925: NEG
76926: PUSH
76927: EMPTY
76928: LIST
76929: LIST
76930: PUSH
76931: LD_INT 2
76933: NEG
76934: PUSH
76935: LD_INT 3
76937: NEG
76938: PUSH
76939: EMPTY
76940: LIST
76941: LIST
76942: PUSH
76943: LD_INT 3
76945: NEG
76946: PUSH
76947: LD_INT 2
76949: NEG
76950: PUSH
76951: EMPTY
76952: LIST
76953: LIST
76954: PUSH
76955: EMPTY
76956: LIST
76957: LIST
76958: LIST
76959: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
76960: LD_ADDR_VAR 0 47
76964: PUSH
76965: LD_INT 2
76967: NEG
76968: PUSH
76969: LD_INT 3
76971: NEG
76972: PUSH
76973: EMPTY
76974: LIST
76975: LIST
76976: PUSH
76977: LD_INT 1
76979: NEG
76980: PUSH
76981: LD_INT 3
76983: NEG
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PUSH
76989: EMPTY
76990: LIST
76991: LIST
76992: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
76993: LD_ADDR_VAR 0 48
76997: PUSH
76998: LD_INT 1
77000: PUSH
77001: LD_INT 2
77003: NEG
77004: PUSH
77005: EMPTY
77006: LIST
77007: LIST
77008: PUSH
77009: LD_INT 2
77011: PUSH
77012: LD_INT 1
77014: NEG
77015: PUSH
77016: EMPTY
77017: LIST
77018: LIST
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
77024: LD_ADDR_VAR 0 49
77028: PUSH
77029: LD_INT 3
77031: PUSH
77032: LD_INT 1
77034: PUSH
77035: EMPTY
77036: LIST
77037: LIST
77038: PUSH
77039: LD_INT 3
77041: PUSH
77042: LD_INT 2
77044: PUSH
77045: EMPTY
77046: LIST
77047: LIST
77048: PUSH
77049: EMPTY
77050: LIST
77051: LIST
77052: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
77053: LD_ADDR_VAR 0 50
77057: PUSH
77058: LD_INT 2
77060: PUSH
77061: LD_INT 3
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: PUSH
77068: LD_INT 1
77070: PUSH
77071: LD_INT 3
77073: PUSH
77074: EMPTY
77075: LIST
77076: LIST
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
77082: LD_ADDR_VAR 0 51
77086: PUSH
77087: LD_INT 1
77089: NEG
77090: PUSH
77091: LD_INT 2
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PUSH
77098: LD_INT 2
77100: NEG
77101: PUSH
77102: LD_INT 1
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
77113: LD_ADDR_VAR 0 52
77117: PUSH
77118: LD_INT 3
77120: NEG
77121: PUSH
77122: LD_INT 1
77124: NEG
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 3
77132: NEG
77133: PUSH
77134: LD_INT 2
77136: NEG
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: PUSH
77142: EMPTY
77143: LIST
77144: LIST
77145: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
77146: LD_ADDR_VAR 0 53
77150: PUSH
77151: LD_INT 1
77153: NEG
77154: PUSH
77155: LD_INT 3
77157: NEG
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: PUSH
77163: LD_INT 0
77165: PUSH
77166: LD_INT 3
77168: NEG
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: PUSH
77174: LD_INT 1
77176: PUSH
77177: LD_INT 2
77179: NEG
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: LIST
77189: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
77190: LD_ADDR_VAR 0 54
77194: PUSH
77195: LD_INT 2
77197: PUSH
77198: LD_INT 1
77200: NEG
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 3
77208: PUSH
77209: LD_INT 0
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PUSH
77216: LD_INT 3
77218: PUSH
77219: LD_INT 1
77221: PUSH
77222: EMPTY
77223: LIST
77224: LIST
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: LIST
77230: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
77231: LD_ADDR_VAR 0 55
77235: PUSH
77236: LD_INT 3
77238: PUSH
77239: LD_INT 2
77241: PUSH
77242: EMPTY
77243: LIST
77244: LIST
77245: PUSH
77246: LD_INT 3
77248: PUSH
77249: LD_INT 3
77251: PUSH
77252: EMPTY
77253: LIST
77254: LIST
77255: PUSH
77256: LD_INT 2
77258: PUSH
77259: LD_INT 3
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: PUSH
77266: EMPTY
77267: LIST
77268: LIST
77269: LIST
77270: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
77271: LD_ADDR_VAR 0 56
77275: PUSH
77276: LD_INT 1
77278: PUSH
77279: LD_INT 3
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: PUSH
77286: LD_INT 0
77288: PUSH
77289: LD_INT 3
77291: PUSH
77292: EMPTY
77293: LIST
77294: LIST
77295: PUSH
77296: LD_INT 1
77298: NEG
77299: PUSH
77300: LD_INT 2
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: LIST
77311: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77312: LD_ADDR_VAR 0 57
77316: PUSH
77317: LD_INT 2
77319: NEG
77320: PUSH
77321: LD_INT 1
77323: PUSH
77324: EMPTY
77325: LIST
77326: LIST
77327: PUSH
77328: LD_INT 3
77330: NEG
77331: PUSH
77332: LD_INT 0
77334: PUSH
77335: EMPTY
77336: LIST
77337: LIST
77338: PUSH
77339: LD_INT 3
77341: NEG
77342: PUSH
77343: LD_INT 1
77345: NEG
77346: PUSH
77347: EMPTY
77348: LIST
77349: LIST
77350: PUSH
77351: EMPTY
77352: LIST
77353: LIST
77354: LIST
77355: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77356: LD_ADDR_VAR 0 58
77360: PUSH
77361: LD_INT 2
77363: NEG
77364: PUSH
77365: LD_INT 3
77367: NEG
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: PUSH
77373: LD_INT 3
77375: NEG
77376: PUSH
77377: LD_INT 2
77379: NEG
77380: PUSH
77381: EMPTY
77382: LIST
77383: LIST
77384: PUSH
77385: LD_INT 3
77387: NEG
77388: PUSH
77389: LD_INT 3
77391: NEG
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: LIST
77401: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
77402: LD_ADDR_VAR 0 59
77406: PUSH
77407: LD_INT 1
77409: NEG
77410: PUSH
77411: LD_INT 2
77413: NEG
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PUSH
77419: LD_INT 0
77421: PUSH
77422: LD_INT 2
77424: NEG
77425: PUSH
77426: EMPTY
77427: LIST
77428: LIST
77429: PUSH
77430: LD_INT 1
77432: PUSH
77433: LD_INT 1
77435: NEG
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: PUSH
77441: EMPTY
77442: LIST
77443: LIST
77444: LIST
77445: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
77446: LD_ADDR_VAR 0 60
77450: PUSH
77451: LD_INT 1
77453: PUSH
77454: LD_INT 1
77456: NEG
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: PUSH
77462: LD_INT 2
77464: PUSH
77465: LD_INT 0
77467: PUSH
77468: EMPTY
77469: LIST
77470: LIST
77471: PUSH
77472: LD_INT 2
77474: PUSH
77475: LD_INT 1
77477: PUSH
77478: EMPTY
77479: LIST
77480: LIST
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: LIST
77486: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
77487: LD_ADDR_VAR 0 61
77491: PUSH
77492: LD_INT 2
77494: PUSH
77495: LD_INT 1
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: PUSH
77502: LD_INT 2
77504: PUSH
77505: LD_INT 2
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PUSH
77512: LD_INT 1
77514: PUSH
77515: LD_INT 2
77517: PUSH
77518: EMPTY
77519: LIST
77520: LIST
77521: PUSH
77522: EMPTY
77523: LIST
77524: LIST
77525: LIST
77526: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
77527: LD_ADDR_VAR 0 62
77531: PUSH
77532: LD_INT 1
77534: PUSH
77535: LD_INT 2
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PUSH
77542: LD_INT 0
77544: PUSH
77545: LD_INT 2
77547: PUSH
77548: EMPTY
77549: LIST
77550: LIST
77551: PUSH
77552: LD_INT 1
77554: NEG
77555: PUSH
77556: LD_INT 1
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: EMPTY
77564: LIST
77565: LIST
77566: LIST
77567: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
77568: LD_ADDR_VAR 0 63
77572: PUSH
77573: LD_INT 1
77575: NEG
77576: PUSH
77577: LD_INT 1
77579: PUSH
77580: EMPTY
77581: LIST
77582: LIST
77583: PUSH
77584: LD_INT 2
77586: NEG
77587: PUSH
77588: LD_INT 0
77590: PUSH
77591: EMPTY
77592: LIST
77593: LIST
77594: PUSH
77595: LD_INT 2
77597: NEG
77598: PUSH
77599: LD_INT 1
77601: NEG
77602: PUSH
77603: EMPTY
77604: LIST
77605: LIST
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: LIST
77611: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77612: LD_ADDR_VAR 0 64
77616: PUSH
77617: LD_INT 1
77619: NEG
77620: PUSH
77621: LD_INT 2
77623: NEG
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: PUSH
77629: LD_INT 2
77631: NEG
77632: PUSH
77633: LD_INT 1
77635: NEG
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: PUSH
77641: LD_INT 2
77643: NEG
77644: PUSH
77645: LD_INT 2
77647: NEG
77648: PUSH
77649: EMPTY
77650: LIST
77651: LIST
77652: PUSH
77653: EMPTY
77654: LIST
77655: LIST
77656: LIST
77657: ST_TO_ADDR
// end ; 2 :
77658: GO 80924
77660: LD_INT 2
77662: DOUBLE
77663: EQUAL
77664: IFTRUE 77668
77666: GO 80923
77668: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
77669: LD_ADDR_VAR 0 29
77673: PUSH
77674: LD_INT 4
77676: PUSH
77677: LD_INT 0
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PUSH
77684: LD_INT 4
77686: PUSH
77687: LD_INT 1
77689: NEG
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: PUSH
77695: LD_INT 5
77697: PUSH
77698: LD_INT 0
77700: PUSH
77701: EMPTY
77702: LIST
77703: LIST
77704: PUSH
77705: LD_INT 5
77707: PUSH
77708: LD_INT 1
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: PUSH
77715: LD_INT 4
77717: PUSH
77718: LD_INT 1
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: PUSH
77725: LD_INT 3
77727: PUSH
77728: LD_INT 0
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: PUSH
77735: LD_INT 3
77737: PUSH
77738: LD_INT 1
77740: NEG
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: LD_INT 3
77748: PUSH
77749: LD_INT 2
77751: NEG
77752: PUSH
77753: EMPTY
77754: LIST
77755: LIST
77756: PUSH
77757: LD_INT 5
77759: PUSH
77760: LD_INT 2
77762: PUSH
77763: EMPTY
77764: LIST
77765: LIST
77766: PUSH
77767: LD_INT 3
77769: PUSH
77770: LD_INT 3
77772: PUSH
77773: EMPTY
77774: LIST
77775: LIST
77776: PUSH
77777: LD_INT 3
77779: PUSH
77780: LD_INT 2
77782: PUSH
77783: EMPTY
77784: LIST
77785: LIST
77786: PUSH
77787: LD_INT 4
77789: PUSH
77790: LD_INT 3
77792: PUSH
77793: EMPTY
77794: LIST
77795: LIST
77796: PUSH
77797: LD_INT 4
77799: PUSH
77800: LD_INT 4
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: PUSH
77807: LD_INT 3
77809: PUSH
77810: LD_INT 4
77812: PUSH
77813: EMPTY
77814: LIST
77815: LIST
77816: PUSH
77817: LD_INT 2
77819: PUSH
77820: LD_INT 3
77822: PUSH
77823: EMPTY
77824: LIST
77825: LIST
77826: PUSH
77827: LD_INT 2
77829: PUSH
77830: LD_INT 2
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PUSH
77837: LD_INT 4
77839: PUSH
77840: LD_INT 2
77842: PUSH
77843: EMPTY
77844: LIST
77845: LIST
77846: PUSH
77847: LD_INT 2
77849: PUSH
77850: LD_INT 4
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: PUSH
77857: LD_INT 0
77859: PUSH
77860: LD_INT 4
77862: PUSH
77863: EMPTY
77864: LIST
77865: LIST
77866: PUSH
77867: LD_INT 0
77869: PUSH
77870: LD_INT 3
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: PUSH
77877: LD_INT 1
77879: PUSH
77880: LD_INT 4
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: PUSH
77887: LD_INT 1
77889: PUSH
77890: LD_INT 5
77892: PUSH
77893: EMPTY
77894: LIST
77895: LIST
77896: PUSH
77897: LD_INT 0
77899: PUSH
77900: LD_INT 5
77902: PUSH
77903: EMPTY
77904: LIST
77905: LIST
77906: PUSH
77907: LD_INT 1
77909: NEG
77910: PUSH
77911: LD_INT 4
77913: PUSH
77914: EMPTY
77915: LIST
77916: LIST
77917: PUSH
77918: LD_INT 1
77920: NEG
77921: PUSH
77922: LD_INT 3
77924: PUSH
77925: EMPTY
77926: LIST
77927: LIST
77928: PUSH
77929: LD_INT 2
77931: PUSH
77932: LD_INT 5
77934: PUSH
77935: EMPTY
77936: LIST
77937: LIST
77938: PUSH
77939: LD_INT 2
77941: NEG
77942: PUSH
77943: LD_INT 3
77945: PUSH
77946: EMPTY
77947: LIST
77948: LIST
77949: PUSH
77950: LD_INT 3
77952: NEG
77953: PUSH
77954: LD_INT 0
77956: PUSH
77957: EMPTY
77958: LIST
77959: LIST
77960: PUSH
77961: LD_INT 3
77963: NEG
77964: PUSH
77965: LD_INT 1
77967: NEG
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: PUSH
77973: LD_INT 2
77975: NEG
77976: PUSH
77977: LD_INT 0
77979: PUSH
77980: EMPTY
77981: LIST
77982: LIST
77983: PUSH
77984: LD_INT 2
77986: NEG
77987: PUSH
77988: LD_INT 1
77990: PUSH
77991: EMPTY
77992: LIST
77993: LIST
77994: PUSH
77995: LD_INT 3
77997: NEG
77998: PUSH
77999: LD_INT 1
78001: PUSH
78002: EMPTY
78003: LIST
78004: LIST
78005: PUSH
78006: LD_INT 4
78008: NEG
78009: PUSH
78010: LD_INT 0
78012: PUSH
78013: EMPTY
78014: LIST
78015: LIST
78016: PUSH
78017: LD_INT 4
78019: NEG
78020: PUSH
78021: LD_INT 1
78023: NEG
78024: PUSH
78025: EMPTY
78026: LIST
78027: LIST
78028: PUSH
78029: LD_INT 4
78031: NEG
78032: PUSH
78033: LD_INT 2
78035: NEG
78036: PUSH
78037: EMPTY
78038: LIST
78039: LIST
78040: PUSH
78041: LD_INT 2
78043: NEG
78044: PUSH
78045: LD_INT 2
78047: PUSH
78048: EMPTY
78049: LIST
78050: LIST
78051: PUSH
78052: LD_INT 4
78054: NEG
78055: PUSH
78056: LD_INT 4
78058: NEG
78059: PUSH
78060: EMPTY
78061: LIST
78062: LIST
78063: PUSH
78064: LD_INT 4
78066: NEG
78067: PUSH
78068: LD_INT 5
78070: NEG
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: PUSH
78076: LD_INT 3
78078: NEG
78079: PUSH
78080: LD_INT 4
78082: NEG
78083: PUSH
78084: EMPTY
78085: LIST
78086: LIST
78087: PUSH
78088: LD_INT 3
78090: NEG
78091: PUSH
78092: LD_INT 3
78094: NEG
78095: PUSH
78096: EMPTY
78097: LIST
78098: LIST
78099: PUSH
78100: LD_INT 4
78102: NEG
78103: PUSH
78104: LD_INT 3
78106: NEG
78107: PUSH
78108: EMPTY
78109: LIST
78110: LIST
78111: PUSH
78112: LD_INT 5
78114: NEG
78115: PUSH
78116: LD_INT 4
78118: NEG
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: PUSH
78124: LD_INT 5
78126: NEG
78127: PUSH
78128: LD_INT 5
78130: NEG
78131: PUSH
78132: EMPTY
78133: LIST
78134: LIST
78135: PUSH
78136: LD_INT 3
78138: NEG
78139: PUSH
78140: LD_INT 5
78142: NEG
78143: PUSH
78144: EMPTY
78145: LIST
78146: LIST
78147: PUSH
78148: LD_INT 5
78150: NEG
78151: PUSH
78152: LD_INT 3
78154: NEG
78155: PUSH
78156: EMPTY
78157: LIST
78158: LIST
78159: PUSH
78160: EMPTY
78161: LIST
78162: LIST
78163: LIST
78164: LIST
78165: LIST
78166: LIST
78167: LIST
78168: LIST
78169: LIST
78170: LIST
78171: LIST
78172: LIST
78173: LIST
78174: LIST
78175: LIST
78176: LIST
78177: LIST
78178: LIST
78179: LIST
78180: LIST
78181: LIST
78182: LIST
78183: LIST
78184: LIST
78185: LIST
78186: LIST
78187: LIST
78188: LIST
78189: LIST
78190: LIST
78191: LIST
78192: LIST
78193: LIST
78194: LIST
78195: LIST
78196: LIST
78197: LIST
78198: LIST
78199: LIST
78200: LIST
78201: LIST
78202: LIST
78203: LIST
78204: LIST
78205: LIST
78206: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
78207: LD_ADDR_VAR 0 30
78211: PUSH
78212: LD_INT 4
78214: PUSH
78215: LD_INT 4
78217: PUSH
78218: EMPTY
78219: LIST
78220: LIST
78221: PUSH
78222: LD_INT 4
78224: PUSH
78225: LD_INT 3
78227: PUSH
78228: EMPTY
78229: LIST
78230: LIST
78231: PUSH
78232: LD_INT 5
78234: PUSH
78235: LD_INT 4
78237: PUSH
78238: EMPTY
78239: LIST
78240: LIST
78241: PUSH
78242: LD_INT 5
78244: PUSH
78245: LD_INT 5
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: PUSH
78252: LD_INT 4
78254: PUSH
78255: LD_INT 5
78257: PUSH
78258: EMPTY
78259: LIST
78260: LIST
78261: PUSH
78262: LD_INT 3
78264: PUSH
78265: LD_INT 4
78267: PUSH
78268: EMPTY
78269: LIST
78270: LIST
78271: PUSH
78272: LD_INT 3
78274: PUSH
78275: LD_INT 3
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: LD_INT 5
78284: PUSH
78285: LD_INT 3
78287: PUSH
78288: EMPTY
78289: LIST
78290: LIST
78291: PUSH
78292: LD_INT 3
78294: PUSH
78295: LD_INT 5
78297: PUSH
78298: EMPTY
78299: LIST
78300: LIST
78301: PUSH
78302: LD_INT 0
78304: PUSH
78305: LD_INT 3
78307: PUSH
78308: EMPTY
78309: LIST
78310: LIST
78311: PUSH
78312: LD_INT 0
78314: PUSH
78315: LD_INT 2
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: PUSH
78322: LD_INT 1
78324: PUSH
78325: LD_INT 3
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: PUSH
78332: LD_INT 1
78334: PUSH
78335: LD_INT 4
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: PUSH
78342: LD_INT 0
78344: PUSH
78345: LD_INT 4
78347: PUSH
78348: EMPTY
78349: LIST
78350: LIST
78351: PUSH
78352: LD_INT 1
78354: NEG
78355: PUSH
78356: LD_INT 3
78358: PUSH
78359: EMPTY
78360: LIST
78361: LIST
78362: PUSH
78363: LD_INT 1
78365: NEG
78366: PUSH
78367: LD_INT 2
78369: PUSH
78370: EMPTY
78371: LIST
78372: LIST
78373: PUSH
78374: LD_INT 2
78376: PUSH
78377: LD_INT 4
78379: PUSH
78380: EMPTY
78381: LIST
78382: LIST
78383: PUSH
78384: LD_INT 2
78386: NEG
78387: PUSH
78388: LD_INT 2
78390: PUSH
78391: EMPTY
78392: LIST
78393: LIST
78394: PUSH
78395: LD_INT 4
78397: NEG
78398: PUSH
78399: LD_INT 0
78401: PUSH
78402: EMPTY
78403: LIST
78404: LIST
78405: PUSH
78406: LD_INT 4
78408: NEG
78409: PUSH
78410: LD_INT 1
78412: NEG
78413: PUSH
78414: EMPTY
78415: LIST
78416: LIST
78417: PUSH
78418: LD_INT 3
78420: NEG
78421: PUSH
78422: LD_INT 0
78424: PUSH
78425: EMPTY
78426: LIST
78427: LIST
78428: PUSH
78429: LD_INT 3
78431: NEG
78432: PUSH
78433: LD_INT 1
78435: PUSH
78436: EMPTY
78437: LIST
78438: LIST
78439: PUSH
78440: LD_INT 4
78442: NEG
78443: PUSH
78444: LD_INT 1
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: PUSH
78451: LD_INT 5
78453: NEG
78454: PUSH
78455: LD_INT 0
78457: PUSH
78458: EMPTY
78459: LIST
78460: LIST
78461: PUSH
78462: LD_INT 5
78464: NEG
78465: PUSH
78466: LD_INT 1
78468: NEG
78469: PUSH
78470: EMPTY
78471: LIST
78472: LIST
78473: PUSH
78474: LD_INT 5
78476: NEG
78477: PUSH
78478: LD_INT 2
78480: NEG
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: PUSH
78486: LD_INT 3
78488: NEG
78489: PUSH
78490: LD_INT 2
78492: PUSH
78493: EMPTY
78494: LIST
78495: LIST
78496: PUSH
78497: LD_INT 3
78499: NEG
78500: PUSH
78501: LD_INT 3
78503: NEG
78504: PUSH
78505: EMPTY
78506: LIST
78507: LIST
78508: PUSH
78509: LD_INT 3
78511: NEG
78512: PUSH
78513: LD_INT 4
78515: NEG
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: PUSH
78521: LD_INT 2
78523: NEG
78524: PUSH
78525: LD_INT 3
78527: NEG
78528: PUSH
78529: EMPTY
78530: LIST
78531: LIST
78532: PUSH
78533: LD_INT 2
78535: NEG
78536: PUSH
78537: LD_INT 2
78539: NEG
78540: PUSH
78541: EMPTY
78542: LIST
78543: LIST
78544: PUSH
78545: LD_INT 3
78547: NEG
78548: PUSH
78549: LD_INT 2
78551: NEG
78552: PUSH
78553: EMPTY
78554: LIST
78555: LIST
78556: PUSH
78557: LD_INT 4
78559: NEG
78560: PUSH
78561: LD_INT 3
78563: NEG
78564: PUSH
78565: EMPTY
78566: LIST
78567: LIST
78568: PUSH
78569: LD_INT 4
78571: NEG
78572: PUSH
78573: LD_INT 4
78575: NEG
78576: PUSH
78577: EMPTY
78578: LIST
78579: LIST
78580: PUSH
78581: LD_INT 2
78583: NEG
78584: PUSH
78585: LD_INT 4
78587: NEG
78588: PUSH
78589: EMPTY
78590: LIST
78591: LIST
78592: PUSH
78593: LD_INT 4
78595: NEG
78596: PUSH
78597: LD_INT 2
78599: NEG
78600: PUSH
78601: EMPTY
78602: LIST
78603: LIST
78604: PUSH
78605: LD_INT 0
78607: PUSH
78608: LD_INT 4
78610: NEG
78611: PUSH
78612: EMPTY
78613: LIST
78614: LIST
78615: PUSH
78616: LD_INT 0
78618: PUSH
78619: LD_INT 5
78621: NEG
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PUSH
78627: LD_INT 1
78629: PUSH
78630: LD_INT 4
78632: NEG
78633: PUSH
78634: EMPTY
78635: LIST
78636: LIST
78637: PUSH
78638: LD_INT 1
78640: PUSH
78641: LD_INT 3
78643: NEG
78644: PUSH
78645: EMPTY
78646: LIST
78647: LIST
78648: PUSH
78649: LD_INT 0
78651: PUSH
78652: LD_INT 3
78654: NEG
78655: PUSH
78656: EMPTY
78657: LIST
78658: LIST
78659: PUSH
78660: LD_INT 1
78662: NEG
78663: PUSH
78664: LD_INT 4
78666: NEG
78667: PUSH
78668: EMPTY
78669: LIST
78670: LIST
78671: PUSH
78672: LD_INT 1
78674: NEG
78675: PUSH
78676: LD_INT 5
78678: NEG
78679: PUSH
78680: EMPTY
78681: LIST
78682: LIST
78683: PUSH
78684: LD_INT 2
78686: PUSH
78687: LD_INT 3
78689: NEG
78690: PUSH
78691: EMPTY
78692: LIST
78693: LIST
78694: PUSH
78695: LD_INT 2
78697: NEG
78698: PUSH
78699: LD_INT 5
78701: NEG
78702: PUSH
78703: EMPTY
78704: LIST
78705: LIST
78706: PUSH
78707: EMPTY
78708: LIST
78709: LIST
78710: LIST
78711: LIST
78712: LIST
78713: LIST
78714: LIST
78715: LIST
78716: LIST
78717: LIST
78718: LIST
78719: LIST
78720: LIST
78721: LIST
78722: LIST
78723: LIST
78724: LIST
78725: LIST
78726: LIST
78727: LIST
78728: LIST
78729: LIST
78730: LIST
78731: LIST
78732: LIST
78733: LIST
78734: LIST
78735: LIST
78736: LIST
78737: LIST
78738: LIST
78739: LIST
78740: LIST
78741: LIST
78742: LIST
78743: LIST
78744: LIST
78745: LIST
78746: LIST
78747: LIST
78748: LIST
78749: LIST
78750: LIST
78751: LIST
78752: LIST
78753: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
78754: LD_ADDR_VAR 0 31
78758: PUSH
78759: LD_INT 0
78761: PUSH
78762: LD_INT 4
78764: PUSH
78765: EMPTY
78766: LIST
78767: LIST
78768: PUSH
78769: LD_INT 0
78771: PUSH
78772: LD_INT 3
78774: PUSH
78775: EMPTY
78776: LIST
78777: LIST
78778: PUSH
78779: LD_INT 1
78781: PUSH
78782: LD_INT 4
78784: PUSH
78785: EMPTY
78786: LIST
78787: LIST
78788: PUSH
78789: LD_INT 1
78791: PUSH
78792: LD_INT 5
78794: PUSH
78795: EMPTY
78796: LIST
78797: LIST
78798: PUSH
78799: LD_INT 0
78801: PUSH
78802: LD_INT 5
78804: PUSH
78805: EMPTY
78806: LIST
78807: LIST
78808: PUSH
78809: LD_INT 1
78811: NEG
78812: PUSH
78813: LD_INT 4
78815: PUSH
78816: EMPTY
78817: LIST
78818: LIST
78819: PUSH
78820: LD_INT 1
78822: NEG
78823: PUSH
78824: LD_INT 3
78826: PUSH
78827: EMPTY
78828: LIST
78829: LIST
78830: PUSH
78831: LD_INT 2
78833: PUSH
78834: LD_INT 5
78836: PUSH
78837: EMPTY
78838: LIST
78839: LIST
78840: PUSH
78841: LD_INT 2
78843: NEG
78844: PUSH
78845: LD_INT 3
78847: PUSH
78848: EMPTY
78849: LIST
78850: LIST
78851: PUSH
78852: LD_INT 3
78854: NEG
78855: PUSH
78856: LD_INT 0
78858: PUSH
78859: EMPTY
78860: LIST
78861: LIST
78862: PUSH
78863: LD_INT 3
78865: NEG
78866: PUSH
78867: LD_INT 1
78869: NEG
78870: PUSH
78871: EMPTY
78872: LIST
78873: LIST
78874: PUSH
78875: LD_INT 2
78877: NEG
78878: PUSH
78879: LD_INT 0
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: PUSH
78886: LD_INT 2
78888: NEG
78889: PUSH
78890: LD_INT 1
78892: PUSH
78893: EMPTY
78894: LIST
78895: LIST
78896: PUSH
78897: LD_INT 3
78899: NEG
78900: PUSH
78901: LD_INT 1
78903: PUSH
78904: EMPTY
78905: LIST
78906: LIST
78907: PUSH
78908: LD_INT 4
78910: NEG
78911: PUSH
78912: LD_INT 0
78914: PUSH
78915: EMPTY
78916: LIST
78917: LIST
78918: PUSH
78919: LD_INT 4
78921: NEG
78922: PUSH
78923: LD_INT 1
78925: NEG
78926: PUSH
78927: EMPTY
78928: LIST
78929: LIST
78930: PUSH
78931: LD_INT 4
78933: NEG
78934: PUSH
78935: LD_INT 2
78937: NEG
78938: PUSH
78939: EMPTY
78940: LIST
78941: LIST
78942: PUSH
78943: LD_INT 2
78945: NEG
78946: PUSH
78947: LD_INT 2
78949: PUSH
78950: EMPTY
78951: LIST
78952: LIST
78953: PUSH
78954: LD_INT 4
78956: NEG
78957: PUSH
78958: LD_INT 4
78960: NEG
78961: PUSH
78962: EMPTY
78963: LIST
78964: LIST
78965: PUSH
78966: LD_INT 4
78968: NEG
78969: PUSH
78970: LD_INT 5
78972: NEG
78973: PUSH
78974: EMPTY
78975: LIST
78976: LIST
78977: PUSH
78978: LD_INT 3
78980: NEG
78981: PUSH
78982: LD_INT 4
78984: NEG
78985: PUSH
78986: EMPTY
78987: LIST
78988: LIST
78989: PUSH
78990: LD_INT 3
78992: NEG
78993: PUSH
78994: LD_INT 3
78996: NEG
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: PUSH
79002: LD_INT 4
79004: NEG
79005: PUSH
79006: LD_INT 3
79008: NEG
79009: PUSH
79010: EMPTY
79011: LIST
79012: LIST
79013: PUSH
79014: LD_INT 5
79016: NEG
79017: PUSH
79018: LD_INT 4
79020: NEG
79021: PUSH
79022: EMPTY
79023: LIST
79024: LIST
79025: PUSH
79026: LD_INT 5
79028: NEG
79029: PUSH
79030: LD_INT 5
79032: NEG
79033: PUSH
79034: EMPTY
79035: LIST
79036: LIST
79037: PUSH
79038: LD_INT 3
79040: NEG
79041: PUSH
79042: LD_INT 5
79044: NEG
79045: PUSH
79046: EMPTY
79047: LIST
79048: LIST
79049: PUSH
79050: LD_INT 5
79052: NEG
79053: PUSH
79054: LD_INT 3
79056: NEG
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PUSH
79062: LD_INT 0
79064: PUSH
79065: LD_INT 3
79067: NEG
79068: PUSH
79069: EMPTY
79070: LIST
79071: LIST
79072: PUSH
79073: LD_INT 0
79075: PUSH
79076: LD_INT 4
79078: NEG
79079: PUSH
79080: EMPTY
79081: LIST
79082: LIST
79083: PUSH
79084: LD_INT 1
79086: PUSH
79087: LD_INT 3
79089: NEG
79090: PUSH
79091: EMPTY
79092: LIST
79093: LIST
79094: PUSH
79095: LD_INT 1
79097: PUSH
79098: LD_INT 2
79100: NEG
79101: PUSH
79102: EMPTY
79103: LIST
79104: LIST
79105: PUSH
79106: LD_INT 0
79108: PUSH
79109: LD_INT 2
79111: NEG
79112: PUSH
79113: EMPTY
79114: LIST
79115: LIST
79116: PUSH
79117: LD_INT 1
79119: NEG
79120: PUSH
79121: LD_INT 3
79123: NEG
79124: PUSH
79125: EMPTY
79126: LIST
79127: LIST
79128: PUSH
79129: LD_INT 1
79131: NEG
79132: PUSH
79133: LD_INT 4
79135: NEG
79136: PUSH
79137: EMPTY
79138: LIST
79139: LIST
79140: PUSH
79141: LD_INT 2
79143: PUSH
79144: LD_INT 2
79146: NEG
79147: PUSH
79148: EMPTY
79149: LIST
79150: LIST
79151: PUSH
79152: LD_INT 2
79154: NEG
79155: PUSH
79156: LD_INT 4
79158: NEG
79159: PUSH
79160: EMPTY
79161: LIST
79162: LIST
79163: PUSH
79164: LD_INT 4
79166: PUSH
79167: LD_INT 0
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: PUSH
79174: LD_INT 4
79176: PUSH
79177: LD_INT 1
79179: NEG
79180: PUSH
79181: EMPTY
79182: LIST
79183: LIST
79184: PUSH
79185: LD_INT 5
79187: PUSH
79188: LD_INT 0
79190: PUSH
79191: EMPTY
79192: LIST
79193: LIST
79194: PUSH
79195: LD_INT 5
79197: PUSH
79198: LD_INT 1
79200: PUSH
79201: EMPTY
79202: LIST
79203: LIST
79204: PUSH
79205: LD_INT 4
79207: PUSH
79208: LD_INT 1
79210: PUSH
79211: EMPTY
79212: LIST
79213: LIST
79214: PUSH
79215: LD_INT 3
79217: PUSH
79218: LD_INT 0
79220: PUSH
79221: EMPTY
79222: LIST
79223: LIST
79224: PUSH
79225: LD_INT 3
79227: PUSH
79228: LD_INT 1
79230: NEG
79231: PUSH
79232: EMPTY
79233: LIST
79234: LIST
79235: PUSH
79236: LD_INT 3
79238: PUSH
79239: LD_INT 2
79241: NEG
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: PUSH
79247: LD_INT 5
79249: PUSH
79250: LD_INT 2
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: PUSH
79257: EMPTY
79258: LIST
79259: LIST
79260: LIST
79261: LIST
79262: LIST
79263: LIST
79264: LIST
79265: LIST
79266: LIST
79267: LIST
79268: LIST
79269: LIST
79270: LIST
79271: LIST
79272: LIST
79273: LIST
79274: LIST
79275: LIST
79276: LIST
79277: LIST
79278: LIST
79279: LIST
79280: LIST
79281: LIST
79282: LIST
79283: LIST
79284: LIST
79285: LIST
79286: LIST
79287: LIST
79288: LIST
79289: LIST
79290: LIST
79291: LIST
79292: LIST
79293: LIST
79294: LIST
79295: LIST
79296: LIST
79297: LIST
79298: LIST
79299: LIST
79300: LIST
79301: LIST
79302: LIST
79303: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
79304: LD_ADDR_VAR 0 32
79308: PUSH
79309: LD_INT 4
79311: NEG
79312: PUSH
79313: LD_INT 0
79315: PUSH
79316: EMPTY
79317: LIST
79318: LIST
79319: PUSH
79320: LD_INT 4
79322: NEG
79323: PUSH
79324: LD_INT 1
79326: NEG
79327: PUSH
79328: EMPTY
79329: LIST
79330: LIST
79331: PUSH
79332: LD_INT 3
79334: NEG
79335: PUSH
79336: LD_INT 0
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: PUSH
79343: LD_INT 3
79345: NEG
79346: PUSH
79347: LD_INT 1
79349: PUSH
79350: EMPTY
79351: LIST
79352: LIST
79353: PUSH
79354: LD_INT 4
79356: NEG
79357: PUSH
79358: LD_INT 1
79360: PUSH
79361: EMPTY
79362: LIST
79363: LIST
79364: PUSH
79365: LD_INT 5
79367: NEG
79368: PUSH
79369: LD_INT 0
79371: PUSH
79372: EMPTY
79373: LIST
79374: LIST
79375: PUSH
79376: LD_INT 5
79378: NEG
79379: PUSH
79380: LD_INT 1
79382: NEG
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: PUSH
79388: LD_INT 5
79390: NEG
79391: PUSH
79392: LD_INT 2
79394: NEG
79395: PUSH
79396: EMPTY
79397: LIST
79398: LIST
79399: PUSH
79400: LD_INT 3
79402: NEG
79403: PUSH
79404: LD_INT 2
79406: PUSH
79407: EMPTY
79408: LIST
79409: LIST
79410: PUSH
79411: LD_INT 3
79413: NEG
79414: PUSH
79415: LD_INT 3
79417: NEG
79418: PUSH
79419: EMPTY
79420: LIST
79421: LIST
79422: PUSH
79423: LD_INT 3
79425: NEG
79426: PUSH
79427: LD_INT 4
79429: NEG
79430: PUSH
79431: EMPTY
79432: LIST
79433: LIST
79434: PUSH
79435: LD_INT 2
79437: NEG
79438: PUSH
79439: LD_INT 3
79441: NEG
79442: PUSH
79443: EMPTY
79444: LIST
79445: LIST
79446: PUSH
79447: LD_INT 2
79449: NEG
79450: PUSH
79451: LD_INT 2
79453: NEG
79454: PUSH
79455: EMPTY
79456: LIST
79457: LIST
79458: PUSH
79459: LD_INT 3
79461: NEG
79462: PUSH
79463: LD_INT 2
79465: NEG
79466: PUSH
79467: EMPTY
79468: LIST
79469: LIST
79470: PUSH
79471: LD_INT 4
79473: NEG
79474: PUSH
79475: LD_INT 3
79477: NEG
79478: PUSH
79479: EMPTY
79480: LIST
79481: LIST
79482: PUSH
79483: LD_INT 4
79485: NEG
79486: PUSH
79487: LD_INT 4
79489: NEG
79490: PUSH
79491: EMPTY
79492: LIST
79493: LIST
79494: PUSH
79495: LD_INT 2
79497: NEG
79498: PUSH
79499: LD_INT 4
79501: NEG
79502: PUSH
79503: EMPTY
79504: LIST
79505: LIST
79506: PUSH
79507: LD_INT 4
79509: NEG
79510: PUSH
79511: LD_INT 2
79513: NEG
79514: PUSH
79515: EMPTY
79516: LIST
79517: LIST
79518: PUSH
79519: LD_INT 0
79521: PUSH
79522: LD_INT 4
79524: NEG
79525: PUSH
79526: EMPTY
79527: LIST
79528: LIST
79529: PUSH
79530: LD_INT 0
79532: PUSH
79533: LD_INT 5
79535: NEG
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: PUSH
79541: LD_INT 1
79543: PUSH
79544: LD_INT 4
79546: NEG
79547: PUSH
79548: EMPTY
79549: LIST
79550: LIST
79551: PUSH
79552: LD_INT 1
79554: PUSH
79555: LD_INT 3
79557: NEG
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: LD_INT 0
79565: PUSH
79566: LD_INT 3
79568: NEG
79569: PUSH
79570: EMPTY
79571: LIST
79572: LIST
79573: PUSH
79574: LD_INT 1
79576: NEG
79577: PUSH
79578: LD_INT 4
79580: NEG
79581: PUSH
79582: EMPTY
79583: LIST
79584: LIST
79585: PUSH
79586: LD_INT 1
79588: NEG
79589: PUSH
79590: LD_INT 5
79592: NEG
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: PUSH
79598: LD_INT 2
79600: PUSH
79601: LD_INT 3
79603: NEG
79604: PUSH
79605: EMPTY
79606: LIST
79607: LIST
79608: PUSH
79609: LD_INT 2
79611: NEG
79612: PUSH
79613: LD_INT 5
79615: NEG
79616: PUSH
79617: EMPTY
79618: LIST
79619: LIST
79620: PUSH
79621: LD_INT 3
79623: PUSH
79624: LD_INT 0
79626: PUSH
79627: EMPTY
79628: LIST
79629: LIST
79630: PUSH
79631: LD_INT 3
79633: PUSH
79634: LD_INT 1
79636: NEG
79637: PUSH
79638: EMPTY
79639: LIST
79640: LIST
79641: PUSH
79642: LD_INT 4
79644: PUSH
79645: LD_INT 0
79647: PUSH
79648: EMPTY
79649: LIST
79650: LIST
79651: PUSH
79652: LD_INT 4
79654: PUSH
79655: LD_INT 1
79657: PUSH
79658: EMPTY
79659: LIST
79660: LIST
79661: PUSH
79662: LD_INT 3
79664: PUSH
79665: LD_INT 1
79667: PUSH
79668: EMPTY
79669: LIST
79670: LIST
79671: PUSH
79672: LD_INT 2
79674: PUSH
79675: LD_INT 0
79677: PUSH
79678: EMPTY
79679: LIST
79680: LIST
79681: PUSH
79682: LD_INT 2
79684: PUSH
79685: LD_INT 1
79687: NEG
79688: PUSH
79689: EMPTY
79690: LIST
79691: LIST
79692: PUSH
79693: LD_INT 2
79695: PUSH
79696: LD_INT 2
79698: NEG
79699: PUSH
79700: EMPTY
79701: LIST
79702: LIST
79703: PUSH
79704: LD_INT 4
79706: PUSH
79707: LD_INT 2
79709: PUSH
79710: EMPTY
79711: LIST
79712: LIST
79713: PUSH
79714: LD_INT 4
79716: PUSH
79717: LD_INT 4
79719: PUSH
79720: EMPTY
79721: LIST
79722: LIST
79723: PUSH
79724: LD_INT 4
79726: PUSH
79727: LD_INT 3
79729: PUSH
79730: EMPTY
79731: LIST
79732: LIST
79733: PUSH
79734: LD_INT 5
79736: PUSH
79737: LD_INT 4
79739: PUSH
79740: EMPTY
79741: LIST
79742: LIST
79743: PUSH
79744: LD_INT 5
79746: PUSH
79747: LD_INT 5
79749: PUSH
79750: EMPTY
79751: LIST
79752: LIST
79753: PUSH
79754: LD_INT 4
79756: PUSH
79757: LD_INT 5
79759: PUSH
79760: EMPTY
79761: LIST
79762: LIST
79763: PUSH
79764: LD_INT 3
79766: PUSH
79767: LD_INT 4
79769: PUSH
79770: EMPTY
79771: LIST
79772: LIST
79773: PUSH
79774: LD_INT 3
79776: PUSH
79777: LD_INT 3
79779: PUSH
79780: EMPTY
79781: LIST
79782: LIST
79783: PUSH
79784: LD_INT 5
79786: PUSH
79787: LD_INT 3
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 3
79796: PUSH
79797: LD_INT 5
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: PUSH
79804: EMPTY
79805: LIST
79806: LIST
79807: LIST
79808: LIST
79809: LIST
79810: LIST
79811: LIST
79812: LIST
79813: LIST
79814: LIST
79815: LIST
79816: LIST
79817: LIST
79818: LIST
79819: LIST
79820: LIST
79821: LIST
79822: LIST
79823: LIST
79824: LIST
79825: LIST
79826: LIST
79827: LIST
79828: LIST
79829: LIST
79830: LIST
79831: LIST
79832: LIST
79833: LIST
79834: LIST
79835: LIST
79836: LIST
79837: LIST
79838: LIST
79839: LIST
79840: LIST
79841: LIST
79842: LIST
79843: LIST
79844: LIST
79845: LIST
79846: LIST
79847: LIST
79848: LIST
79849: LIST
79850: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
79851: LD_ADDR_VAR 0 33
79855: PUSH
79856: LD_INT 4
79858: NEG
79859: PUSH
79860: LD_INT 4
79862: NEG
79863: PUSH
79864: EMPTY
79865: LIST
79866: LIST
79867: PUSH
79868: LD_INT 4
79870: NEG
79871: PUSH
79872: LD_INT 5
79874: NEG
79875: PUSH
79876: EMPTY
79877: LIST
79878: LIST
79879: PUSH
79880: LD_INT 3
79882: NEG
79883: PUSH
79884: LD_INT 4
79886: NEG
79887: PUSH
79888: EMPTY
79889: LIST
79890: LIST
79891: PUSH
79892: LD_INT 3
79894: NEG
79895: PUSH
79896: LD_INT 3
79898: NEG
79899: PUSH
79900: EMPTY
79901: LIST
79902: LIST
79903: PUSH
79904: LD_INT 4
79906: NEG
79907: PUSH
79908: LD_INT 3
79910: NEG
79911: PUSH
79912: EMPTY
79913: LIST
79914: LIST
79915: PUSH
79916: LD_INT 5
79918: NEG
79919: PUSH
79920: LD_INT 4
79922: NEG
79923: PUSH
79924: EMPTY
79925: LIST
79926: LIST
79927: PUSH
79928: LD_INT 5
79930: NEG
79931: PUSH
79932: LD_INT 5
79934: NEG
79935: PUSH
79936: EMPTY
79937: LIST
79938: LIST
79939: PUSH
79940: LD_INT 3
79942: NEG
79943: PUSH
79944: LD_INT 5
79946: NEG
79947: PUSH
79948: EMPTY
79949: LIST
79950: LIST
79951: PUSH
79952: LD_INT 5
79954: NEG
79955: PUSH
79956: LD_INT 3
79958: NEG
79959: PUSH
79960: EMPTY
79961: LIST
79962: LIST
79963: PUSH
79964: LD_INT 0
79966: PUSH
79967: LD_INT 3
79969: NEG
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: PUSH
79975: LD_INT 0
79977: PUSH
79978: LD_INT 4
79980: NEG
79981: PUSH
79982: EMPTY
79983: LIST
79984: LIST
79985: PUSH
79986: LD_INT 1
79988: PUSH
79989: LD_INT 3
79991: NEG
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: LD_INT 1
79999: PUSH
80000: LD_INT 2
80002: NEG
80003: PUSH
80004: EMPTY
80005: LIST
80006: LIST
80007: PUSH
80008: LD_INT 0
80010: PUSH
80011: LD_INT 2
80013: NEG
80014: PUSH
80015: EMPTY
80016: LIST
80017: LIST
80018: PUSH
80019: LD_INT 1
80021: NEG
80022: PUSH
80023: LD_INT 3
80025: NEG
80026: PUSH
80027: EMPTY
80028: LIST
80029: LIST
80030: PUSH
80031: LD_INT 1
80033: NEG
80034: PUSH
80035: LD_INT 4
80037: NEG
80038: PUSH
80039: EMPTY
80040: LIST
80041: LIST
80042: PUSH
80043: LD_INT 2
80045: PUSH
80046: LD_INT 2
80048: NEG
80049: PUSH
80050: EMPTY
80051: LIST
80052: LIST
80053: PUSH
80054: LD_INT 2
80056: NEG
80057: PUSH
80058: LD_INT 4
80060: NEG
80061: PUSH
80062: EMPTY
80063: LIST
80064: LIST
80065: PUSH
80066: LD_INT 4
80068: PUSH
80069: LD_INT 0
80071: PUSH
80072: EMPTY
80073: LIST
80074: LIST
80075: PUSH
80076: LD_INT 4
80078: PUSH
80079: LD_INT 1
80081: NEG
80082: PUSH
80083: EMPTY
80084: LIST
80085: LIST
80086: PUSH
80087: LD_INT 5
80089: PUSH
80090: LD_INT 0
80092: PUSH
80093: EMPTY
80094: LIST
80095: LIST
80096: PUSH
80097: LD_INT 5
80099: PUSH
80100: LD_INT 1
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: PUSH
80107: LD_INT 4
80109: PUSH
80110: LD_INT 1
80112: PUSH
80113: EMPTY
80114: LIST
80115: LIST
80116: PUSH
80117: LD_INT 3
80119: PUSH
80120: LD_INT 0
80122: PUSH
80123: EMPTY
80124: LIST
80125: LIST
80126: PUSH
80127: LD_INT 3
80129: PUSH
80130: LD_INT 1
80132: NEG
80133: PUSH
80134: EMPTY
80135: LIST
80136: LIST
80137: PUSH
80138: LD_INT 3
80140: PUSH
80141: LD_INT 2
80143: NEG
80144: PUSH
80145: EMPTY
80146: LIST
80147: LIST
80148: PUSH
80149: LD_INT 5
80151: PUSH
80152: LD_INT 2
80154: PUSH
80155: EMPTY
80156: LIST
80157: LIST
80158: PUSH
80159: LD_INT 3
80161: PUSH
80162: LD_INT 3
80164: PUSH
80165: EMPTY
80166: LIST
80167: LIST
80168: PUSH
80169: LD_INT 3
80171: PUSH
80172: LD_INT 2
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: PUSH
80179: LD_INT 4
80181: PUSH
80182: LD_INT 3
80184: PUSH
80185: EMPTY
80186: LIST
80187: LIST
80188: PUSH
80189: LD_INT 4
80191: PUSH
80192: LD_INT 4
80194: PUSH
80195: EMPTY
80196: LIST
80197: LIST
80198: PUSH
80199: LD_INT 3
80201: PUSH
80202: LD_INT 4
80204: PUSH
80205: EMPTY
80206: LIST
80207: LIST
80208: PUSH
80209: LD_INT 2
80211: PUSH
80212: LD_INT 3
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: PUSH
80219: LD_INT 2
80221: PUSH
80222: LD_INT 2
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: PUSH
80229: LD_INT 4
80231: PUSH
80232: LD_INT 2
80234: PUSH
80235: EMPTY
80236: LIST
80237: LIST
80238: PUSH
80239: LD_INT 2
80241: PUSH
80242: LD_INT 4
80244: PUSH
80245: EMPTY
80246: LIST
80247: LIST
80248: PUSH
80249: LD_INT 0
80251: PUSH
80252: LD_INT 4
80254: PUSH
80255: EMPTY
80256: LIST
80257: LIST
80258: PUSH
80259: LD_INT 0
80261: PUSH
80262: LD_INT 3
80264: PUSH
80265: EMPTY
80266: LIST
80267: LIST
80268: PUSH
80269: LD_INT 1
80271: PUSH
80272: LD_INT 4
80274: PUSH
80275: EMPTY
80276: LIST
80277: LIST
80278: PUSH
80279: LD_INT 1
80281: PUSH
80282: LD_INT 5
80284: PUSH
80285: EMPTY
80286: LIST
80287: LIST
80288: PUSH
80289: LD_INT 0
80291: PUSH
80292: LD_INT 5
80294: PUSH
80295: EMPTY
80296: LIST
80297: LIST
80298: PUSH
80299: LD_INT 1
80301: NEG
80302: PUSH
80303: LD_INT 4
80305: PUSH
80306: EMPTY
80307: LIST
80308: LIST
80309: PUSH
80310: LD_INT 1
80312: NEG
80313: PUSH
80314: LD_INT 3
80316: PUSH
80317: EMPTY
80318: LIST
80319: LIST
80320: PUSH
80321: LD_INT 2
80323: PUSH
80324: LD_INT 5
80326: PUSH
80327: EMPTY
80328: LIST
80329: LIST
80330: PUSH
80331: LD_INT 2
80333: NEG
80334: PUSH
80335: LD_INT 3
80337: PUSH
80338: EMPTY
80339: LIST
80340: LIST
80341: PUSH
80342: EMPTY
80343: LIST
80344: LIST
80345: LIST
80346: LIST
80347: LIST
80348: LIST
80349: LIST
80350: LIST
80351: LIST
80352: LIST
80353: LIST
80354: LIST
80355: LIST
80356: LIST
80357: LIST
80358: LIST
80359: LIST
80360: LIST
80361: LIST
80362: LIST
80363: LIST
80364: LIST
80365: LIST
80366: LIST
80367: LIST
80368: LIST
80369: LIST
80370: LIST
80371: LIST
80372: LIST
80373: LIST
80374: LIST
80375: LIST
80376: LIST
80377: LIST
80378: LIST
80379: LIST
80380: LIST
80381: LIST
80382: LIST
80383: LIST
80384: LIST
80385: LIST
80386: LIST
80387: LIST
80388: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
80389: LD_ADDR_VAR 0 34
80393: PUSH
80394: LD_INT 0
80396: PUSH
80397: LD_INT 4
80399: NEG
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: PUSH
80405: LD_INT 0
80407: PUSH
80408: LD_INT 5
80410: NEG
80411: PUSH
80412: EMPTY
80413: LIST
80414: LIST
80415: PUSH
80416: LD_INT 1
80418: PUSH
80419: LD_INT 4
80421: NEG
80422: PUSH
80423: EMPTY
80424: LIST
80425: LIST
80426: PUSH
80427: LD_INT 1
80429: PUSH
80430: LD_INT 3
80432: NEG
80433: PUSH
80434: EMPTY
80435: LIST
80436: LIST
80437: PUSH
80438: LD_INT 0
80440: PUSH
80441: LD_INT 3
80443: NEG
80444: PUSH
80445: EMPTY
80446: LIST
80447: LIST
80448: PUSH
80449: LD_INT 1
80451: NEG
80452: PUSH
80453: LD_INT 4
80455: NEG
80456: PUSH
80457: EMPTY
80458: LIST
80459: LIST
80460: PUSH
80461: LD_INT 1
80463: NEG
80464: PUSH
80465: LD_INT 5
80467: NEG
80468: PUSH
80469: EMPTY
80470: LIST
80471: LIST
80472: PUSH
80473: LD_INT 2
80475: PUSH
80476: LD_INT 3
80478: NEG
80479: PUSH
80480: EMPTY
80481: LIST
80482: LIST
80483: PUSH
80484: LD_INT 2
80486: NEG
80487: PUSH
80488: LD_INT 5
80490: NEG
80491: PUSH
80492: EMPTY
80493: LIST
80494: LIST
80495: PUSH
80496: LD_INT 3
80498: PUSH
80499: LD_INT 0
80501: PUSH
80502: EMPTY
80503: LIST
80504: LIST
80505: PUSH
80506: LD_INT 3
80508: PUSH
80509: LD_INT 1
80511: NEG
80512: PUSH
80513: EMPTY
80514: LIST
80515: LIST
80516: PUSH
80517: LD_INT 4
80519: PUSH
80520: LD_INT 0
80522: PUSH
80523: EMPTY
80524: LIST
80525: LIST
80526: PUSH
80527: LD_INT 4
80529: PUSH
80530: LD_INT 1
80532: PUSH
80533: EMPTY
80534: LIST
80535: LIST
80536: PUSH
80537: LD_INT 3
80539: PUSH
80540: LD_INT 1
80542: PUSH
80543: EMPTY
80544: LIST
80545: LIST
80546: PUSH
80547: LD_INT 2
80549: PUSH
80550: LD_INT 0
80552: PUSH
80553: EMPTY
80554: LIST
80555: LIST
80556: PUSH
80557: LD_INT 2
80559: PUSH
80560: LD_INT 1
80562: NEG
80563: PUSH
80564: EMPTY
80565: LIST
80566: LIST
80567: PUSH
80568: LD_INT 2
80570: PUSH
80571: LD_INT 2
80573: NEG
80574: PUSH
80575: EMPTY
80576: LIST
80577: LIST
80578: PUSH
80579: LD_INT 4
80581: PUSH
80582: LD_INT 2
80584: PUSH
80585: EMPTY
80586: LIST
80587: LIST
80588: PUSH
80589: LD_INT 4
80591: PUSH
80592: LD_INT 4
80594: PUSH
80595: EMPTY
80596: LIST
80597: LIST
80598: PUSH
80599: LD_INT 4
80601: PUSH
80602: LD_INT 3
80604: PUSH
80605: EMPTY
80606: LIST
80607: LIST
80608: PUSH
80609: LD_INT 5
80611: PUSH
80612: LD_INT 4
80614: PUSH
80615: EMPTY
80616: LIST
80617: LIST
80618: PUSH
80619: LD_INT 5
80621: PUSH
80622: LD_INT 5
80624: PUSH
80625: EMPTY
80626: LIST
80627: LIST
80628: PUSH
80629: LD_INT 4
80631: PUSH
80632: LD_INT 5
80634: PUSH
80635: EMPTY
80636: LIST
80637: LIST
80638: PUSH
80639: LD_INT 3
80641: PUSH
80642: LD_INT 4
80644: PUSH
80645: EMPTY
80646: LIST
80647: LIST
80648: PUSH
80649: LD_INT 3
80651: PUSH
80652: LD_INT 3
80654: PUSH
80655: EMPTY
80656: LIST
80657: LIST
80658: PUSH
80659: LD_INT 5
80661: PUSH
80662: LD_INT 3
80664: PUSH
80665: EMPTY
80666: LIST
80667: LIST
80668: PUSH
80669: LD_INT 3
80671: PUSH
80672: LD_INT 5
80674: PUSH
80675: EMPTY
80676: LIST
80677: LIST
80678: PUSH
80679: LD_INT 0
80681: PUSH
80682: LD_INT 3
80684: PUSH
80685: EMPTY
80686: LIST
80687: LIST
80688: PUSH
80689: LD_INT 0
80691: PUSH
80692: LD_INT 2
80694: PUSH
80695: EMPTY
80696: LIST
80697: LIST
80698: PUSH
80699: LD_INT 1
80701: PUSH
80702: LD_INT 3
80704: PUSH
80705: EMPTY
80706: LIST
80707: LIST
80708: PUSH
80709: LD_INT 1
80711: PUSH
80712: LD_INT 4
80714: PUSH
80715: EMPTY
80716: LIST
80717: LIST
80718: PUSH
80719: LD_INT 0
80721: PUSH
80722: LD_INT 4
80724: PUSH
80725: EMPTY
80726: LIST
80727: LIST
80728: PUSH
80729: LD_INT 1
80731: NEG
80732: PUSH
80733: LD_INT 3
80735: PUSH
80736: EMPTY
80737: LIST
80738: LIST
80739: PUSH
80740: LD_INT 1
80742: NEG
80743: PUSH
80744: LD_INT 2
80746: PUSH
80747: EMPTY
80748: LIST
80749: LIST
80750: PUSH
80751: LD_INT 2
80753: PUSH
80754: LD_INT 4
80756: PUSH
80757: EMPTY
80758: LIST
80759: LIST
80760: PUSH
80761: LD_INT 2
80763: NEG
80764: PUSH
80765: LD_INT 2
80767: PUSH
80768: EMPTY
80769: LIST
80770: LIST
80771: PUSH
80772: LD_INT 4
80774: NEG
80775: PUSH
80776: LD_INT 0
80778: PUSH
80779: EMPTY
80780: LIST
80781: LIST
80782: PUSH
80783: LD_INT 4
80785: NEG
80786: PUSH
80787: LD_INT 1
80789: NEG
80790: PUSH
80791: EMPTY
80792: LIST
80793: LIST
80794: PUSH
80795: LD_INT 3
80797: NEG
80798: PUSH
80799: LD_INT 0
80801: PUSH
80802: EMPTY
80803: LIST
80804: LIST
80805: PUSH
80806: LD_INT 3
80808: NEG
80809: PUSH
80810: LD_INT 1
80812: PUSH
80813: EMPTY
80814: LIST
80815: LIST
80816: PUSH
80817: LD_INT 4
80819: NEG
80820: PUSH
80821: LD_INT 1
80823: PUSH
80824: EMPTY
80825: LIST
80826: LIST
80827: PUSH
80828: LD_INT 5
80830: NEG
80831: PUSH
80832: LD_INT 0
80834: PUSH
80835: EMPTY
80836: LIST
80837: LIST
80838: PUSH
80839: LD_INT 5
80841: NEG
80842: PUSH
80843: LD_INT 1
80845: NEG
80846: PUSH
80847: EMPTY
80848: LIST
80849: LIST
80850: PUSH
80851: LD_INT 5
80853: NEG
80854: PUSH
80855: LD_INT 2
80857: NEG
80858: PUSH
80859: EMPTY
80860: LIST
80861: LIST
80862: PUSH
80863: LD_INT 3
80865: NEG
80866: PUSH
80867: LD_INT 2
80869: PUSH
80870: EMPTY
80871: LIST
80872: LIST
80873: PUSH
80874: EMPTY
80875: LIST
80876: LIST
80877: LIST
80878: LIST
80879: LIST
80880: LIST
80881: LIST
80882: LIST
80883: LIST
80884: LIST
80885: LIST
80886: LIST
80887: LIST
80888: LIST
80889: LIST
80890: LIST
80891: LIST
80892: LIST
80893: LIST
80894: LIST
80895: LIST
80896: LIST
80897: LIST
80898: LIST
80899: LIST
80900: LIST
80901: LIST
80902: LIST
80903: LIST
80904: LIST
80905: LIST
80906: LIST
80907: LIST
80908: LIST
80909: LIST
80910: LIST
80911: LIST
80912: LIST
80913: LIST
80914: LIST
80915: LIST
80916: LIST
80917: LIST
80918: LIST
80919: LIST
80920: ST_TO_ADDR
// end ; end ;
80921: GO 80924
80923: POP
// case btype of b_depot , b_warehouse :
80924: LD_VAR 0 1
80928: PUSH
80929: LD_INT 0
80931: DOUBLE
80932: EQUAL
80933: IFTRUE 80943
80935: LD_INT 1
80937: DOUBLE
80938: EQUAL
80939: IFTRUE 80943
80941: GO 81144
80943: POP
// case nation of nation_american :
80944: LD_VAR 0 5
80948: PUSH
80949: LD_INT 1
80951: DOUBLE
80952: EQUAL
80953: IFTRUE 80957
80955: GO 81013
80957: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
80958: LD_ADDR_VAR 0 9
80962: PUSH
80963: LD_VAR 0 11
80967: PUSH
80968: LD_VAR 0 12
80972: PUSH
80973: LD_VAR 0 13
80977: PUSH
80978: LD_VAR 0 14
80982: PUSH
80983: LD_VAR 0 15
80987: PUSH
80988: LD_VAR 0 16
80992: PUSH
80993: EMPTY
80994: LIST
80995: LIST
80996: LIST
80997: LIST
80998: LIST
80999: LIST
81000: PUSH
81001: LD_VAR 0 4
81005: PUSH
81006: LD_INT 1
81008: PLUS
81009: ARRAY
81010: ST_TO_ADDR
81011: GO 81142
81013: LD_INT 2
81015: DOUBLE
81016: EQUAL
81017: IFTRUE 81021
81019: GO 81077
81021: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
81022: LD_ADDR_VAR 0 9
81026: PUSH
81027: LD_VAR 0 17
81031: PUSH
81032: LD_VAR 0 18
81036: PUSH
81037: LD_VAR 0 19
81041: PUSH
81042: LD_VAR 0 20
81046: PUSH
81047: LD_VAR 0 21
81051: PUSH
81052: LD_VAR 0 22
81056: PUSH
81057: EMPTY
81058: LIST
81059: LIST
81060: LIST
81061: LIST
81062: LIST
81063: LIST
81064: PUSH
81065: LD_VAR 0 4
81069: PUSH
81070: LD_INT 1
81072: PLUS
81073: ARRAY
81074: ST_TO_ADDR
81075: GO 81142
81077: LD_INT 3
81079: DOUBLE
81080: EQUAL
81081: IFTRUE 81085
81083: GO 81141
81085: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
81086: LD_ADDR_VAR 0 9
81090: PUSH
81091: LD_VAR 0 23
81095: PUSH
81096: LD_VAR 0 24
81100: PUSH
81101: LD_VAR 0 25
81105: PUSH
81106: LD_VAR 0 26
81110: PUSH
81111: LD_VAR 0 27
81115: PUSH
81116: LD_VAR 0 28
81120: PUSH
81121: EMPTY
81122: LIST
81123: LIST
81124: LIST
81125: LIST
81126: LIST
81127: LIST
81128: PUSH
81129: LD_VAR 0 4
81133: PUSH
81134: LD_INT 1
81136: PLUS
81137: ARRAY
81138: ST_TO_ADDR
81139: GO 81142
81141: POP
81142: GO 81697
81144: LD_INT 2
81146: DOUBLE
81147: EQUAL
81148: IFTRUE 81158
81150: LD_INT 3
81152: DOUBLE
81153: EQUAL
81154: IFTRUE 81158
81156: GO 81214
81158: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
81159: LD_ADDR_VAR 0 9
81163: PUSH
81164: LD_VAR 0 29
81168: PUSH
81169: LD_VAR 0 30
81173: PUSH
81174: LD_VAR 0 31
81178: PUSH
81179: LD_VAR 0 32
81183: PUSH
81184: LD_VAR 0 33
81188: PUSH
81189: LD_VAR 0 34
81193: PUSH
81194: EMPTY
81195: LIST
81196: LIST
81197: LIST
81198: LIST
81199: LIST
81200: LIST
81201: PUSH
81202: LD_VAR 0 4
81206: PUSH
81207: LD_INT 1
81209: PLUS
81210: ARRAY
81211: ST_TO_ADDR
81212: GO 81697
81214: LD_INT 16
81216: DOUBLE
81217: EQUAL
81218: IFTRUE 81276
81220: LD_INT 17
81222: DOUBLE
81223: EQUAL
81224: IFTRUE 81276
81226: LD_INT 18
81228: DOUBLE
81229: EQUAL
81230: IFTRUE 81276
81232: LD_INT 19
81234: DOUBLE
81235: EQUAL
81236: IFTRUE 81276
81238: LD_INT 22
81240: DOUBLE
81241: EQUAL
81242: IFTRUE 81276
81244: LD_INT 20
81246: DOUBLE
81247: EQUAL
81248: IFTRUE 81276
81250: LD_INT 21
81252: DOUBLE
81253: EQUAL
81254: IFTRUE 81276
81256: LD_INT 23
81258: DOUBLE
81259: EQUAL
81260: IFTRUE 81276
81262: LD_INT 24
81264: DOUBLE
81265: EQUAL
81266: IFTRUE 81276
81268: LD_INT 25
81270: DOUBLE
81271: EQUAL
81272: IFTRUE 81276
81274: GO 81332
81276: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
81277: LD_ADDR_VAR 0 9
81281: PUSH
81282: LD_VAR 0 35
81286: PUSH
81287: LD_VAR 0 36
81291: PUSH
81292: LD_VAR 0 37
81296: PUSH
81297: LD_VAR 0 38
81301: PUSH
81302: LD_VAR 0 39
81306: PUSH
81307: LD_VAR 0 40
81311: PUSH
81312: EMPTY
81313: LIST
81314: LIST
81315: LIST
81316: LIST
81317: LIST
81318: LIST
81319: PUSH
81320: LD_VAR 0 4
81324: PUSH
81325: LD_INT 1
81327: PLUS
81328: ARRAY
81329: ST_TO_ADDR
81330: GO 81697
81332: LD_INT 6
81334: DOUBLE
81335: EQUAL
81336: IFTRUE 81388
81338: LD_INT 7
81340: DOUBLE
81341: EQUAL
81342: IFTRUE 81388
81344: LD_INT 8
81346: DOUBLE
81347: EQUAL
81348: IFTRUE 81388
81350: LD_INT 13
81352: DOUBLE
81353: EQUAL
81354: IFTRUE 81388
81356: LD_INT 12
81358: DOUBLE
81359: EQUAL
81360: IFTRUE 81388
81362: LD_INT 15
81364: DOUBLE
81365: EQUAL
81366: IFTRUE 81388
81368: LD_INT 11
81370: DOUBLE
81371: EQUAL
81372: IFTRUE 81388
81374: LD_INT 14
81376: DOUBLE
81377: EQUAL
81378: IFTRUE 81388
81380: LD_INT 10
81382: DOUBLE
81383: EQUAL
81384: IFTRUE 81388
81386: GO 81444
81388: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
81389: LD_ADDR_VAR 0 9
81393: PUSH
81394: LD_VAR 0 41
81398: PUSH
81399: LD_VAR 0 42
81403: PUSH
81404: LD_VAR 0 43
81408: PUSH
81409: LD_VAR 0 44
81413: PUSH
81414: LD_VAR 0 45
81418: PUSH
81419: LD_VAR 0 46
81423: PUSH
81424: EMPTY
81425: LIST
81426: LIST
81427: LIST
81428: LIST
81429: LIST
81430: LIST
81431: PUSH
81432: LD_VAR 0 4
81436: PUSH
81437: LD_INT 1
81439: PLUS
81440: ARRAY
81441: ST_TO_ADDR
81442: GO 81697
81444: LD_INT 36
81446: DOUBLE
81447: EQUAL
81448: IFTRUE 81452
81450: GO 81508
81452: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
81453: LD_ADDR_VAR 0 9
81457: PUSH
81458: LD_VAR 0 47
81462: PUSH
81463: LD_VAR 0 48
81467: PUSH
81468: LD_VAR 0 49
81472: PUSH
81473: LD_VAR 0 50
81477: PUSH
81478: LD_VAR 0 51
81482: PUSH
81483: LD_VAR 0 52
81487: PUSH
81488: EMPTY
81489: LIST
81490: LIST
81491: LIST
81492: LIST
81493: LIST
81494: LIST
81495: PUSH
81496: LD_VAR 0 4
81500: PUSH
81501: LD_INT 1
81503: PLUS
81504: ARRAY
81505: ST_TO_ADDR
81506: GO 81697
81508: LD_INT 4
81510: DOUBLE
81511: EQUAL
81512: IFTRUE 81534
81514: LD_INT 5
81516: DOUBLE
81517: EQUAL
81518: IFTRUE 81534
81520: LD_INT 34
81522: DOUBLE
81523: EQUAL
81524: IFTRUE 81534
81526: LD_INT 37
81528: DOUBLE
81529: EQUAL
81530: IFTRUE 81534
81532: GO 81590
81534: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
81535: LD_ADDR_VAR 0 9
81539: PUSH
81540: LD_VAR 0 53
81544: PUSH
81545: LD_VAR 0 54
81549: PUSH
81550: LD_VAR 0 55
81554: PUSH
81555: LD_VAR 0 56
81559: PUSH
81560: LD_VAR 0 57
81564: PUSH
81565: LD_VAR 0 58
81569: PUSH
81570: EMPTY
81571: LIST
81572: LIST
81573: LIST
81574: LIST
81575: LIST
81576: LIST
81577: PUSH
81578: LD_VAR 0 4
81582: PUSH
81583: LD_INT 1
81585: PLUS
81586: ARRAY
81587: ST_TO_ADDR
81588: GO 81697
81590: LD_INT 31
81592: DOUBLE
81593: EQUAL
81594: IFTRUE 81640
81596: LD_INT 32
81598: DOUBLE
81599: EQUAL
81600: IFTRUE 81640
81602: LD_INT 33
81604: DOUBLE
81605: EQUAL
81606: IFTRUE 81640
81608: LD_INT 27
81610: DOUBLE
81611: EQUAL
81612: IFTRUE 81640
81614: LD_INT 26
81616: DOUBLE
81617: EQUAL
81618: IFTRUE 81640
81620: LD_INT 28
81622: DOUBLE
81623: EQUAL
81624: IFTRUE 81640
81626: LD_INT 29
81628: DOUBLE
81629: EQUAL
81630: IFTRUE 81640
81632: LD_INT 30
81634: DOUBLE
81635: EQUAL
81636: IFTRUE 81640
81638: GO 81696
81640: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
81641: LD_ADDR_VAR 0 9
81645: PUSH
81646: LD_VAR 0 59
81650: PUSH
81651: LD_VAR 0 60
81655: PUSH
81656: LD_VAR 0 61
81660: PUSH
81661: LD_VAR 0 62
81665: PUSH
81666: LD_VAR 0 63
81670: PUSH
81671: LD_VAR 0 64
81675: PUSH
81676: EMPTY
81677: LIST
81678: LIST
81679: LIST
81680: LIST
81681: LIST
81682: LIST
81683: PUSH
81684: LD_VAR 0 4
81688: PUSH
81689: LD_INT 1
81691: PLUS
81692: ARRAY
81693: ST_TO_ADDR
81694: GO 81697
81696: POP
// temp_list2 = [ ] ;
81697: LD_ADDR_VAR 0 10
81701: PUSH
81702: EMPTY
81703: ST_TO_ADDR
// for i in temp_list do
81704: LD_ADDR_VAR 0 8
81708: PUSH
81709: LD_VAR 0 9
81713: PUSH
81714: FOR_IN
81715: IFFALSE 81767
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
81717: LD_ADDR_VAR 0 10
81721: PUSH
81722: LD_VAR 0 10
81726: PUSH
81727: LD_VAR 0 8
81731: PUSH
81732: LD_INT 1
81734: ARRAY
81735: PUSH
81736: LD_VAR 0 2
81740: PLUS
81741: PUSH
81742: LD_VAR 0 8
81746: PUSH
81747: LD_INT 2
81749: ARRAY
81750: PUSH
81751: LD_VAR 0 3
81755: PLUS
81756: PUSH
81757: EMPTY
81758: LIST
81759: LIST
81760: PUSH
81761: EMPTY
81762: LIST
81763: ADD
81764: ST_TO_ADDR
81765: GO 81714
81767: POP
81768: POP
// result = temp_list2 ;
81769: LD_ADDR_VAR 0 7
81773: PUSH
81774: LD_VAR 0 10
81778: ST_TO_ADDR
// end ;
81779: LD_VAR 0 7
81783: RET
// export function EnemyInRange ( unit , dist ) ; begin
81784: LD_INT 0
81786: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
81787: LD_ADDR_VAR 0 3
81791: PUSH
81792: LD_VAR 0 1
81796: PPUSH
81797: CALL_OW 255
81801: PPUSH
81802: LD_VAR 0 1
81806: PPUSH
81807: CALL_OW 250
81811: PPUSH
81812: LD_VAR 0 1
81816: PPUSH
81817: CALL_OW 251
81821: PPUSH
81822: LD_VAR 0 2
81826: PPUSH
81827: CALL 55180 0 4
81831: PUSH
81832: LD_INT 4
81834: ARRAY
81835: ST_TO_ADDR
// end ;
81836: LD_VAR 0 3
81840: RET
// export function PlayerSeeMe ( unit ) ; begin
81841: LD_INT 0
81843: PPUSH
// result := See ( your_side , unit ) ;
81844: LD_ADDR_VAR 0 2
81848: PUSH
81849: LD_OWVAR 2
81853: PPUSH
81854: LD_VAR 0 1
81858: PPUSH
81859: CALL_OW 292
81863: ST_TO_ADDR
// end ;
81864: LD_VAR 0 2
81868: RET
// export function ReverseDir ( unit ) ; begin
81869: LD_INT 0
81871: PPUSH
// if not unit then
81872: LD_VAR 0 1
81876: NOT
81877: IFFALSE 81881
// exit ;
81879: GO 81904
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
81881: LD_ADDR_VAR 0 2
81885: PUSH
81886: LD_VAR 0 1
81890: PPUSH
81891: CALL_OW 254
81895: PUSH
81896: LD_INT 3
81898: PLUS
81899: PUSH
81900: LD_INT 6
81902: MOD
81903: ST_TO_ADDR
// end ;
81904: LD_VAR 0 2
81908: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
81909: LD_INT 0
81911: PPUSH
81912: PPUSH
81913: PPUSH
81914: PPUSH
81915: PPUSH
// if not hexes then
81916: LD_VAR 0 2
81920: NOT
81921: IFFALSE 81925
// exit ;
81923: GO 82073
// dist := 9999 ;
81925: LD_ADDR_VAR 0 5
81929: PUSH
81930: LD_INT 9999
81932: ST_TO_ADDR
// for i = 1 to hexes do
81933: LD_ADDR_VAR 0 4
81937: PUSH
81938: DOUBLE
81939: LD_INT 1
81941: DEC
81942: ST_TO_ADDR
81943: LD_VAR 0 2
81947: PUSH
81948: FOR_TO
81949: IFFALSE 82061
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
81951: LD_VAR 0 1
81955: PPUSH
81956: LD_VAR 0 2
81960: PUSH
81961: LD_VAR 0 4
81965: ARRAY
81966: PUSH
81967: LD_INT 1
81969: ARRAY
81970: PPUSH
81971: LD_VAR 0 2
81975: PUSH
81976: LD_VAR 0 4
81980: ARRAY
81981: PUSH
81982: LD_INT 2
81984: ARRAY
81985: PPUSH
81986: CALL_OW 297
81990: PUSH
81991: LD_VAR 0 5
81995: LESS
81996: IFFALSE 82059
// begin hex := hexes [ i ] ;
81998: LD_ADDR_VAR 0 7
82002: PUSH
82003: LD_VAR 0 2
82007: PUSH
82008: LD_VAR 0 4
82012: ARRAY
82013: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
82014: LD_ADDR_VAR 0 5
82018: PUSH
82019: LD_VAR 0 1
82023: PPUSH
82024: LD_VAR 0 2
82028: PUSH
82029: LD_VAR 0 4
82033: ARRAY
82034: PUSH
82035: LD_INT 1
82037: ARRAY
82038: PPUSH
82039: LD_VAR 0 2
82043: PUSH
82044: LD_VAR 0 4
82048: ARRAY
82049: PUSH
82050: LD_INT 2
82052: ARRAY
82053: PPUSH
82054: CALL_OW 297
82058: ST_TO_ADDR
// end ; end ;
82059: GO 81948
82061: POP
82062: POP
// result := hex ;
82063: LD_ADDR_VAR 0 3
82067: PUSH
82068: LD_VAR 0 7
82072: ST_TO_ADDR
// end ;
82073: LD_VAR 0 3
82077: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
82078: LD_INT 0
82080: PPUSH
82081: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
82082: LD_VAR 0 1
82086: NOT
82087: PUSH
82088: LD_VAR 0 1
82092: PUSH
82093: LD_INT 21
82095: PUSH
82096: LD_INT 2
82098: PUSH
82099: EMPTY
82100: LIST
82101: LIST
82102: PUSH
82103: LD_INT 23
82105: PUSH
82106: LD_INT 2
82108: PUSH
82109: EMPTY
82110: LIST
82111: LIST
82112: PUSH
82113: EMPTY
82114: LIST
82115: LIST
82116: PPUSH
82117: CALL_OW 69
82121: IN
82122: NOT
82123: OR
82124: IFFALSE 82128
// exit ;
82126: GO 82175
// for i = 1 to 3 do
82128: LD_ADDR_VAR 0 3
82132: PUSH
82133: DOUBLE
82134: LD_INT 1
82136: DEC
82137: ST_TO_ADDR
82138: LD_INT 3
82140: PUSH
82141: FOR_TO
82142: IFFALSE 82173
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
82144: LD_VAR 0 1
82148: PPUSH
82149: CALL_OW 250
82153: PPUSH
82154: LD_VAR 0 1
82158: PPUSH
82159: CALL_OW 251
82163: PPUSH
82164: LD_INT 1
82166: PPUSH
82167: CALL_OW 453
82171: GO 82141
82173: POP
82174: POP
// end ;
82175: LD_VAR 0 2
82179: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
82180: LD_INT 0
82182: PPUSH
82183: PPUSH
82184: PPUSH
82185: PPUSH
82186: PPUSH
82187: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
82188: LD_VAR 0 1
82192: NOT
82193: PUSH
82194: LD_VAR 0 2
82198: NOT
82199: OR
82200: PUSH
82201: LD_VAR 0 1
82205: PPUSH
82206: CALL_OW 314
82210: OR
82211: IFFALSE 82215
// exit ;
82213: GO 82656
// x := GetX ( enemy_unit ) ;
82215: LD_ADDR_VAR 0 7
82219: PUSH
82220: LD_VAR 0 2
82224: PPUSH
82225: CALL_OW 250
82229: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
82230: LD_ADDR_VAR 0 8
82234: PUSH
82235: LD_VAR 0 2
82239: PPUSH
82240: CALL_OW 251
82244: ST_TO_ADDR
// if not x or not y then
82245: LD_VAR 0 7
82249: NOT
82250: PUSH
82251: LD_VAR 0 8
82255: NOT
82256: OR
82257: IFFALSE 82261
// exit ;
82259: GO 82656
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
82261: LD_ADDR_VAR 0 6
82265: PUSH
82266: LD_VAR 0 7
82270: PPUSH
82271: LD_INT 0
82273: PPUSH
82274: LD_INT 4
82276: PPUSH
82277: CALL_OW 272
82281: PUSH
82282: LD_VAR 0 8
82286: PPUSH
82287: LD_INT 0
82289: PPUSH
82290: LD_INT 4
82292: PPUSH
82293: CALL_OW 273
82297: PUSH
82298: EMPTY
82299: LIST
82300: LIST
82301: PUSH
82302: LD_VAR 0 7
82306: PPUSH
82307: LD_INT 1
82309: PPUSH
82310: LD_INT 4
82312: PPUSH
82313: CALL_OW 272
82317: PUSH
82318: LD_VAR 0 8
82322: PPUSH
82323: LD_INT 1
82325: PPUSH
82326: LD_INT 4
82328: PPUSH
82329: CALL_OW 273
82333: PUSH
82334: EMPTY
82335: LIST
82336: LIST
82337: PUSH
82338: LD_VAR 0 7
82342: PPUSH
82343: LD_INT 2
82345: PPUSH
82346: LD_INT 4
82348: PPUSH
82349: CALL_OW 272
82353: PUSH
82354: LD_VAR 0 8
82358: PPUSH
82359: LD_INT 2
82361: PPUSH
82362: LD_INT 4
82364: PPUSH
82365: CALL_OW 273
82369: PUSH
82370: EMPTY
82371: LIST
82372: LIST
82373: PUSH
82374: LD_VAR 0 7
82378: PPUSH
82379: LD_INT 3
82381: PPUSH
82382: LD_INT 4
82384: PPUSH
82385: CALL_OW 272
82389: PUSH
82390: LD_VAR 0 8
82394: PPUSH
82395: LD_INT 3
82397: PPUSH
82398: LD_INT 4
82400: PPUSH
82401: CALL_OW 273
82405: PUSH
82406: EMPTY
82407: LIST
82408: LIST
82409: PUSH
82410: LD_VAR 0 7
82414: PPUSH
82415: LD_INT 4
82417: PPUSH
82418: LD_INT 4
82420: PPUSH
82421: CALL_OW 272
82425: PUSH
82426: LD_VAR 0 8
82430: PPUSH
82431: LD_INT 4
82433: PPUSH
82434: LD_INT 4
82436: PPUSH
82437: CALL_OW 273
82441: PUSH
82442: EMPTY
82443: LIST
82444: LIST
82445: PUSH
82446: LD_VAR 0 7
82450: PPUSH
82451: LD_INT 5
82453: PPUSH
82454: LD_INT 4
82456: PPUSH
82457: CALL_OW 272
82461: PUSH
82462: LD_VAR 0 8
82466: PPUSH
82467: LD_INT 5
82469: PPUSH
82470: LD_INT 4
82472: PPUSH
82473: CALL_OW 273
82477: PUSH
82478: EMPTY
82479: LIST
82480: LIST
82481: PUSH
82482: EMPTY
82483: LIST
82484: LIST
82485: LIST
82486: LIST
82487: LIST
82488: LIST
82489: ST_TO_ADDR
// for i = tmp downto 1 do
82490: LD_ADDR_VAR 0 4
82494: PUSH
82495: DOUBLE
82496: LD_VAR 0 6
82500: INC
82501: ST_TO_ADDR
82502: LD_INT 1
82504: PUSH
82505: FOR_DOWNTO
82506: IFFALSE 82607
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
82508: LD_VAR 0 6
82512: PUSH
82513: LD_VAR 0 4
82517: ARRAY
82518: PUSH
82519: LD_INT 1
82521: ARRAY
82522: PPUSH
82523: LD_VAR 0 6
82527: PUSH
82528: LD_VAR 0 4
82532: ARRAY
82533: PUSH
82534: LD_INT 2
82536: ARRAY
82537: PPUSH
82538: CALL_OW 488
82542: NOT
82543: PUSH
82544: LD_VAR 0 6
82548: PUSH
82549: LD_VAR 0 4
82553: ARRAY
82554: PUSH
82555: LD_INT 1
82557: ARRAY
82558: PPUSH
82559: LD_VAR 0 6
82563: PUSH
82564: LD_VAR 0 4
82568: ARRAY
82569: PUSH
82570: LD_INT 2
82572: ARRAY
82573: PPUSH
82574: CALL_OW 428
82578: PUSH
82579: LD_INT 0
82581: NONEQUAL
82582: OR
82583: IFFALSE 82605
// tmp := Delete ( tmp , i ) ;
82585: LD_ADDR_VAR 0 6
82589: PUSH
82590: LD_VAR 0 6
82594: PPUSH
82595: LD_VAR 0 4
82599: PPUSH
82600: CALL_OW 3
82604: ST_TO_ADDR
82605: GO 82505
82607: POP
82608: POP
// j := GetClosestHex ( unit , tmp ) ;
82609: LD_ADDR_VAR 0 5
82613: PUSH
82614: LD_VAR 0 1
82618: PPUSH
82619: LD_VAR 0 6
82623: PPUSH
82624: CALL 81909 0 2
82628: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
82629: LD_VAR 0 1
82633: PPUSH
82634: LD_VAR 0 5
82638: PUSH
82639: LD_INT 1
82641: ARRAY
82642: PPUSH
82643: LD_VAR 0 5
82647: PUSH
82648: LD_INT 2
82650: ARRAY
82651: PPUSH
82652: CALL_OW 111
// end ;
82656: LD_VAR 0 3
82660: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
82661: LD_INT 0
82663: PPUSH
82664: PPUSH
82665: PPUSH
// uc_side = 0 ;
82666: LD_ADDR_OWVAR 20
82670: PUSH
82671: LD_INT 0
82673: ST_TO_ADDR
// uc_nation = 0 ;
82674: LD_ADDR_OWVAR 21
82678: PUSH
82679: LD_INT 0
82681: ST_TO_ADDR
// InitHc_All ( ) ;
82682: CALL_OW 584
// InitVc ;
82686: CALL_OW 20
// if mastodonts then
82690: LD_VAR 0 6
82694: IFFALSE 82761
// for i = 1 to mastodonts do
82696: LD_ADDR_VAR 0 11
82700: PUSH
82701: DOUBLE
82702: LD_INT 1
82704: DEC
82705: ST_TO_ADDR
82706: LD_VAR 0 6
82710: PUSH
82711: FOR_TO
82712: IFFALSE 82759
// begin vc_chassis := 31 ;
82714: LD_ADDR_OWVAR 37
82718: PUSH
82719: LD_INT 31
82721: ST_TO_ADDR
// vc_control := control_rider ;
82722: LD_ADDR_OWVAR 38
82726: PUSH
82727: LD_INT 4
82729: ST_TO_ADDR
// animal := CreateVehicle ;
82730: LD_ADDR_VAR 0 12
82734: PUSH
82735: CALL_OW 45
82739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82740: LD_VAR 0 12
82744: PPUSH
82745: LD_VAR 0 8
82749: PPUSH
82750: LD_INT 0
82752: PPUSH
82753: CALL 84896 0 3
// end ;
82757: GO 82711
82759: POP
82760: POP
// if horses then
82761: LD_VAR 0 5
82765: IFFALSE 82832
// for i = 1 to horses do
82767: LD_ADDR_VAR 0 11
82771: PUSH
82772: DOUBLE
82773: LD_INT 1
82775: DEC
82776: ST_TO_ADDR
82777: LD_VAR 0 5
82781: PUSH
82782: FOR_TO
82783: IFFALSE 82830
// begin hc_class := 21 ;
82785: LD_ADDR_OWVAR 28
82789: PUSH
82790: LD_INT 21
82792: ST_TO_ADDR
// hc_gallery :=  ;
82793: LD_ADDR_OWVAR 33
82797: PUSH
82798: LD_STRING 
82800: ST_TO_ADDR
// animal := CreateHuman ;
82801: LD_ADDR_VAR 0 12
82805: PUSH
82806: CALL_OW 44
82810: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82811: LD_VAR 0 12
82815: PPUSH
82816: LD_VAR 0 8
82820: PPUSH
82821: LD_INT 0
82823: PPUSH
82824: CALL 84896 0 3
// end ;
82828: GO 82782
82830: POP
82831: POP
// if birds then
82832: LD_VAR 0 1
82836: IFFALSE 82903
// for i = 1 to birds do
82838: LD_ADDR_VAR 0 11
82842: PUSH
82843: DOUBLE
82844: LD_INT 1
82846: DEC
82847: ST_TO_ADDR
82848: LD_VAR 0 1
82852: PUSH
82853: FOR_TO
82854: IFFALSE 82901
// begin hc_class = 18 ;
82856: LD_ADDR_OWVAR 28
82860: PUSH
82861: LD_INT 18
82863: ST_TO_ADDR
// hc_gallery =  ;
82864: LD_ADDR_OWVAR 33
82868: PUSH
82869: LD_STRING 
82871: ST_TO_ADDR
// animal := CreateHuman ;
82872: LD_ADDR_VAR 0 12
82876: PUSH
82877: CALL_OW 44
82881: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82882: LD_VAR 0 12
82886: PPUSH
82887: LD_VAR 0 8
82891: PPUSH
82892: LD_INT 0
82894: PPUSH
82895: CALL 84896 0 3
// end ;
82899: GO 82853
82901: POP
82902: POP
// if tigers then
82903: LD_VAR 0 2
82907: IFFALSE 82991
// for i = 1 to tigers do
82909: LD_ADDR_VAR 0 11
82913: PUSH
82914: DOUBLE
82915: LD_INT 1
82917: DEC
82918: ST_TO_ADDR
82919: LD_VAR 0 2
82923: PUSH
82924: FOR_TO
82925: IFFALSE 82989
// begin hc_class = class_tiger ;
82927: LD_ADDR_OWVAR 28
82931: PUSH
82932: LD_INT 14
82934: ST_TO_ADDR
// hc_gallery =  ;
82935: LD_ADDR_OWVAR 33
82939: PUSH
82940: LD_STRING 
82942: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
82943: LD_ADDR_OWVAR 35
82947: PUSH
82948: LD_INT 7
82950: NEG
82951: PPUSH
82952: LD_INT 7
82954: PPUSH
82955: CALL_OW 12
82959: ST_TO_ADDR
// animal := CreateHuman ;
82960: LD_ADDR_VAR 0 12
82964: PUSH
82965: CALL_OW 44
82969: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
82970: LD_VAR 0 12
82974: PPUSH
82975: LD_VAR 0 8
82979: PPUSH
82980: LD_INT 0
82982: PPUSH
82983: CALL 84896 0 3
// end ;
82987: GO 82924
82989: POP
82990: POP
// if apemans then
82991: LD_VAR 0 3
82995: IFFALSE 83118
// for i = 1 to apemans do
82997: LD_ADDR_VAR 0 11
83001: PUSH
83002: DOUBLE
83003: LD_INT 1
83005: DEC
83006: ST_TO_ADDR
83007: LD_VAR 0 3
83011: PUSH
83012: FOR_TO
83013: IFFALSE 83116
// begin hc_class = class_apeman ;
83015: LD_ADDR_OWVAR 28
83019: PUSH
83020: LD_INT 12
83022: ST_TO_ADDR
// hc_gallery =  ;
83023: LD_ADDR_OWVAR 33
83027: PUSH
83028: LD_STRING 
83030: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
83031: LD_ADDR_OWVAR 35
83035: PUSH
83036: LD_INT 2
83038: NEG
83039: PPUSH
83040: LD_INT 2
83042: PPUSH
83043: CALL_OW 12
83047: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
83048: LD_ADDR_OWVAR 31
83052: PUSH
83053: LD_INT 1
83055: PPUSH
83056: LD_INT 3
83058: PPUSH
83059: CALL_OW 12
83063: PUSH
83064: LD_INT 1
83066: PPUSH
83067: LD_INT 3
83069: PPUSH
83070: CALL_OW 12
83074: PUSH
83075: LD_INT 0
83077: PUSH
83078: LD_INT 0
83080: PUSH
83081: EMPTY
83082: LIST
83083: LIST
83084: LIST
83085: LIST
83086: ST_TO_ADDR
// animal := CreateHuman ;
83087: LD_ADDR_VAR 0 12
83091: PUSH
83092: CALL_OW 44
83096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83097: LD_VAR 0 12
83101: PPUSH
83102: LD_VAR 0 8
83106: PPUSH
83107: LD_INT 0
83109: PPUSH
83110: CALL 84896 0 3
// end ;
83114: GO 83012
83116: POP
83117: POP
// if enchidnas then
83118: LD_VAR 0 4
83122: IFFALSE 83189
// for i = 1 to enchidnas do
83124: LD_ADDR_VAR 0 11
83128: PUSH
83129: DOUBLE
83130: LD_INT 1
83132: DEC
83133: ST_TO_ADDR
83134: LD_VAR 0 4
83138: PUSH
83139: FOR_TO
83140: IFFALSE 83187
// begin hc_class = 13 ;
83142: LD_ADDR_OWVAR 28
83146: PUSH
83147: LD_INT 13
83149: ST_TO_ADDR
// hc_gallery =  ;
83150: LD_ADDR_OWVAR 33
83154: PUSH
83155: LD_STRING 
83157: ST_TO_ADDR
// animal := CreateHuman ;
83158: LD_ADDR_VAR 0 12
83162: PUSH
83163: CALL_OW 44
83167: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
83168: LD_VAR 0 12
83172: PPUSH
83173: LD_VAR 0 8
83177: PPUSH
83178: LD_INT 0
83180: PPUSH
83181: CALL 84896 0 3
// end ;
83185: GO 83139
83187: POP
83188: POP
// if fishes then
83189: LD_VAR 0 7
83193: IFFALSE 83260
// for i = 1 to fishes do
83195: LD_ADDR_VAR 0 11
83199: PUSH
83200: DOUBLE
83201: LD_INT 1
83203: DEC
83204: ST_TO_ADDR
83205: LD_VAR 0 7
83209: PUSH
83210: FOR_TO
83211: IFFALSE 83258
// begin hc_class = 20 ;
83213: LD_ADDR_OWVAR 28
83217: PUSH
83218: LD_INT 20
83220: ST_TO_ADDR
// hc_gallery =  ;
83221: LD_ADDR_OWVAR 33
83225: PUSH
83226: LD_STRING 
83228: ST_TO_ADDR
// animal := CreateHuman ;
83229: LD_ADDR_VAR 0 12
83233: PUSH
83234: CALL_OW 44
83238: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
83239: LD_VAR 0 12
83243: PPUSH
83244: LD_VAR 0 9
83248: PPUSH
83249: LD_INT 0
83251: PPUSH
83252: CALL 84896 0 3
// end ;
83256: GO 83210
83258: POP
83259: POP
// end ;
83260: LD_VAR 0 10
83264: RET
// export function WantHeal ( sci , unit ) ; begin
83265: LD_INT 0
83267: PPUSH
// if GetTaskList ( sci ) > 0 then
83268: LD_VAR 0 1
83272: PPUSH
83273: CALL_OW 437
83277: PUSH
83278: LD_INT 0
83280: GREATER
83281: IFFALSE 83351
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
83283: LD_VAR 0 1
83287: PPUSH
83288: CALL_OW 437
83292: PUSH
83293: LD_INT 1
83295: ARRAY
83296: PUSH
83297: LD_INT 1
83299: ARRAY
83300: PUSH
83301: LD_STRING l
83303: EQUAL
83304: PUSH
83305: LD_VAR 0 1
83309: PPUSH
83310: CALL_OW 437
83314: PUSH
83315: LD_INT 1
83317: ARRAY
83318: PUSH
83319: LD_INT 4
83321: ARRAY
83322: PUSH
83323: LD_VAR 0 2
83327: EQUAL
83328: AND
83329: IFFALSE 83341
// result := true else
83331: LD_ADDR_VAR 0 3
83335: PUSH
83336: LD_INT 1
83338: ST_TO_ADDR
83339: GO 83349
// result := false ;
83341: LD_ADDR_VAR 0 3
83345: PUSH
83346: LD_INT 0
83348: ST_TO_ADDR
// end else
83349: GO 83359
// result := false ;
83351: LD_ADDR_VAR 0 3
83355: PUSH
83356: LD_INT 0
83358: ST_TO_ADDR
// end ;
83359: LD_VAR 0 3
83363: RET
// export function HealTarget ( sci ) ; begin
83364: LD_INT 0
83366: PPUSH
// if not sci then
83367: LD_VAR 0 1
83371: NOT
83372: IFFALSE 83376
// exit ;
83374: GO 83441
// result := 0 ;
83376: LD_ADDR_VAR 0 2
83380: PUSH
83381: LD_INT 0
83383: ST_TO_ADDR
// if GetTaskList ( sci ) then
83384: LD_VAR 0 1
83388: PPUSH
83389: CALL_OW 437
83393: IFFALSE 83441
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
83395: LD_VAR 0 1
83399: PPUSH
83400: CALL_OW 437
83404: PUSH
83405: LD_INT 1
83407: ARRAY
83408: PUSH
83409: LD_INT 1
83411: ARRAY
83412: PUSH
83413: LD_STRING l
83415: EQUAL
83416: IFFALSE 83441
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
83418: LD_ADDR_VAR 0 2
83422: PUSH
83423: LD_VAR 0 1
83427: PPUSH
83428: CALL_OW 437
83432: PUSH
83433: LD_INT 1
83435: ARRAY
83436: PUSH
83437: LD_INT 4
83439: ARRAY
83440: ST_TO_ADDR
// end ;
83441: LD_VAR 0 2
83445: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
83446: LD_INT 0
83448: PPUSH
83449: PPUSH
83450: PPUSH
83451: PPUSH
// if not base_units then
83452: LD_VAR 0 1
83456: NOT
83457: IFFALSE 83461
// exit ;
83459: GO 83548
// result := false ;
83461: LD_ADDR_VAR 0 2
83465: PUSH
83466: LD_INT 0
83468: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
83469: LD_ADDR_VAR 0 5
83473: PUSH
83474: LD_VAR 0 1
83478: PPUSH
83479: LD_INT 21
83481: PUSH
83482: LD_INT 3
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: PPUSH
83489: CALL_OW 72
83493: ST_TO_ADDR
// if not tmp then
83494: LD_VAR 0 5
83498: NOT
83499: IFFALSE 83503
// exit ;
83501: GO 83548
// for i in tmp do
83503: LD_ADDR_VAR 0 3
83507: PUSH
83508: LD_VAR 0 5
83512: PUSH
83513: FOR_IN
83514: IFFALSE 83546
// begin result := EnemyInRange ( i , 22 ) ;
83516: LD_ADDR_VAR 0 2
83520: PUSH
83521: LD_VAR 0 3
83525: PPUSH
83526: LD_INT 22
83528: PPUSH
83529: CALL 81784 0 2
83533: ST_TO_ADDR
// if result then
83534: LD_VAR 0 2
83538: IFFALSE 83544
// exit ;
83540: POP
83541: POP
83542: GO 83548
// end ;
83544: GO 83513
83546: POP
83547: POP
// end ;
83548: LD_VAR 0 2
83552: RET
// export function FilterByTag ( units , tag ) ; begin
83553: LD_INT 0
83555: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
83556: LD_ADDR_VAR 0 3
83560: PUSH
83561: LD_VAR 0 1
83565: PPUSH
83566: LD_INT 120
83568: PUSH
83569: LD_VAR 0 2
83573: PUSH
83574: EMPTY
83575: LIST
83576: LIST
83577: PPUSH
83578: CALL_OW 72
83582: ST_TO_ADDR
// end ;
83583: LD_VAR 0 3
83587: RET
// export function IsDriver ( un ) ; begin
83588: LD_INT 0
83590: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
83591: LD_ADDR_VAR 0 2
83595: PUSH
83596: LD_VAR 0 1
83600: PUSH
83601: LD_INT 55
83603: PUSH
83604: EMPTY
83605: LIST
83606: PPUSH
83607: CALL_OW 69
83611: IN
83612: ST_TO_ADDR
// end ;
83613: LD_VAR 0 2
83617: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
83618: LD_INT 0
83620: PPUSH
83621: PPUSH
// list := [ ] ;
83622: LD_ADDR_VAR 0 5
83626: PUSH
83627: EMPTY
83628: ST_TO_ADDR
// case d of 0 :
83629: LD_VAR 0 3
83633: PUSH
83634: LD_INT 0
83636: DOUBLE
83637: EQUAL
83638: IFTRUE 83642
83640: GO 83775
83642: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
83643: LD_ADDR_VAR 0 5
83647: PUSH
83648: LD_VAR 0 1
83652: PUSH
83653: LD_INT 4
83655: MINUS
83656: PUSH
83657: LD_VAR 0 2
83661: PUSH
83662: LD_INT 4
83664: MINUS
83665: PUSH
83666: LD_INT 2
83668: PUSH
83669: EMPTY
83670: LIST
83671: LIST
83672: LIST
83673: PUSH
83674: LD_VAR 0 1
83678: PUSH
83679: LD_INT 3
83681: MINUS
83682: PUSH
83683: LD_VAR 0 2
83687: PUSH
83688: LD_INT 1
83690: PUSH
83691: EMPTY
83692: LIST
83693: LIST
83694: LIST
83695: PUSH
83696: LD_VAR 0 1
83700: PUSH
83701: LD_INT 4
83703: PLUS
83704: PUSH
83705: LD_VAR 0 2
83709: PUSH
83710: LD_INT 4
83712: PUSH
83713: EMPTY
83714: LIST
83715: LIST
83716: LIST
83717: PUSH
83718: LD_VAR 0 1
83722: PUSH
83723: LD_INT 3
83725: PLUS
83726: PUSH
83727: LD_VAR 0 2
83731: PUSH
83732: LD_INT 3
83734: PLUS
83735: PUSH
83736: LD_INT 5
83738: PUSH
83739: EMPTY
83740: LIST
83741: LIST
83742: LIST
83743: PUSH
83744: LD_VAR 0 1
83748: PUSH
83749: LD_VAR 0 2
83753: PUSH
83754: LD_INT 4
83756: PLUS
83757: PUSH
83758: LD_INT 0
83760: PUSH
83761: EMPTY
83762: LIST
83763: LIST
83764: LIST
83765: PUSH
83766: EMPTY
83767: LIST
83768: LIST
83769: LIST
83770: LIST
83771: LIST
83772: ST_TO_ADDR
// end ; 1 :
83773: GO 84473
83775: LD_INT 1
83777: DOUBLE
83778: EQUAL
83779: IFTRUE 83783
83781: GO 83916
83783: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
83784: LD_ADDR_VAR 0 5
83788: PUSH
83789: LD_VAR 0 1
83793: PUSH
83794: LD_VAR 0 2
83798: PUSH
83799: LD_INT 4
83801: MINUS
83802: PUSH
83803: LD_INT 3
83805: PUSH
83806: EMPTY
83807: LIST
83808: LIST
83809: LIST
83810: PUSH
83811: LD_VAR 0 1
83815: PUSH
83816: LD_INT 3
83818: MINUS
83819: PUSH
83820: LD_VAR 0 2
83824: PUSH
83825: LD_INT 3
83827: MINUS
83828: PUSH
83829: LD_INT 2
83831: PUSH
83832: EMPTY
83833: LIST
83834: LIST
83835: LIST
83836: PUSH
83837: LD_VAR 0 1
83841: PUSH
83842: LD_INT 4
83844: MINUS
83845: PUSH
83846: LD_VAR 0 2
83850: PUSH
83851: LD_INT 1
83853: PUSH
83854: EMPTY
83855: LIST
83856: LIST
83857: LIST
83858: PUSH
83859: LD_VAR 0 1
83863: PUSH
83864: LD_VAR 0 2
83868: PUSH
83869: LD_INT 3
83871: PLUS
83872: PUSH
83873: LD_INT 0
83875: PUSH
83876: EMPTY
83877: LIST
83878: LIST
83879: LIST
83880: PUSH
83881: LD_VAR 0 1
83885: PUSH
83886: LD_INT 4
83888: PLUS
83889: PUSH
83890: LD_VAR 0 2
83894: PUSH
83895: LD_INT 4
83897: PLUS
83898: PUSH
83899: LD_INT 5
83901: PUSH
83902: EMPTY
83903: LIST
83904: LIST
83905: LIST
83906: PUSH
83907: EMPTY
83908: LIST
83909: LIST
83910: LIST
83911: LIST
83912: LIST
83913: ST_TO_ADDR
// end ; 2 :
83914: GO 84473
83916: LD_INT 2
83918: DOUBLE
83919: EQUAL
83920: IFTRUE 83924
83922: GO 84053
83924: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
83925: LD_ADDR_VAR 0 5
83929: PUSH
83930: LD_VAR 0 1
83934: PUSH
83935: LD_VAR 0 2
83939: PUSH
83940: LD_INT 3
83942: MINUS
83943: PUSH
83944: LD_INT 3
83946: PUSH
83947: EMPTY
83948: LIST
83949: LIST
83950: LIST
83951: PUSH
83952: LD_VAR 0 1
83956: PUSH
83957: LD_INT 4
83959: PLUS
83960: PUSH
83961: LD_VAR 0 2
83965: PUSH
83966: LD_INT 4
83968: PUSH
83969: EMPTY
83970: LIST
83971: LIST
83972: LIST
83973: PUSH
83974: LD_VAR 0 1
83978: PUSH
83979: LD_VAR 0 2
83983: PUSH
83984: LD_INT 4
83986: PLUS
83987: PUSH
83988: LD_INT 0
83990: PUSH
83991: EMPTY
83992: LIST
83993: LIST
83994: LIST
83995: PUSH
83996: LD_VAR 0 1
84000: PUSH
84001: LD_INT 3
84003: MINUS
84004: PUSH
84005: LD_VAR 0 2
84009: PUSH
84010: LD_INT 1
84012: PUSH
84013: EMPTY
84014: LIST
84015: LIST
84016: LIST
84017: PUSH
84018: LD_VAR 0 1
84022: PUSH
84023: LD_INT 4
84025: MINUS
84026: PUSH
84027: LD_VAR 0 2
84031: PUSH
84032: LD_INT 4
84034: MINUS
84035: PUSH
84036: LD_INT 2
84038: PUSH
84039: EMPTY
84040: LIST
84041: LIST
84042: LIST
84043: PUSH
84044: EMPTY
84045: LIST
84046: LIST
84047: LIST
84048: LIST
84049: LIST
84050: ST_TO_ADDR
// end ; 3 :
84051: GO 84473
84053: LD_INT 3
84055: DOUBLE
84056: EQUAL
84057: IFTRUE 84061
84059: GO 84194
84061: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
84062: LD_ADDR_VAR 0 5
84066: PUSH
84067: LD_VAR 0 1
84071: PUSH
84072: LD_INT 3
84074: PLUS
84075: PUSH
84076: LD_VAR 0 2
84080: PUSH
84081: LD_INT 4
84083: PUSH
84084: EMPTY
84085: LIST
84086: LIST
84087: LIST
84088: PUSH
84089: LD_VAR 0 1
84093: PUSH
84094: LD_INT 4
84096: PLUS
84097: PUSH
84098: LD_VAR 0 2
84102: PUSH
84103: LD_INT 4
84105: PLUS
84106: PUSH
84107: LD_INT 5
84109: PUSH
84110: EMPTY
84111: LIST
84112: LIST
84113: LIST
84114: PUSH
84115: LD_VAR 0 1
84119: PUSH
84120: LD_INT 4
84122: MINUS
84123: PUSH
84124: LD_VAR 0 2
84128: PUSH
84129: LD_INT 1
84131: PUSH
84132: EMPTY
84133: LIST
84134: LIST
84135: LIST
84136: PUSH
84137: LD_VAR 0 1
84141: PUSH
84142: LD_VAR 0 2
84146: PUSH
84147: LD_INT 4
84149: MINUS
84150: PUSH
84151: LD_INT 3
84153: PUSH
84154: EMPTY
84155: LIST
84156: LIST
84157: LIST
84158: PUSH
84159: LD_VAR 0 1
84163: PUSH
84164: LD_INT 3
84166: MINUS
84167: PUSH
84168: LD_VAR 0 2
84172: PUSH
84173: LD_INT 3
84175: MINUS
84176: PUSH
84177: LD_INT 2
84179: PUSH
84180: EMPTY
84181: LIST
84182: LIST
84183: LIST
84184: PUSH
84185: EMPTY
84186: LIST
84187: LIST
84188: LIST
84189: LIST
84190: LIST
84191: ST_TO_ADDR
// end ; 4 :
84192: GO 84473
84194: LD_INT 4
84196: DOUBLE
84197: EQUAL
84198: IFTRUE 84202
84200: GO 84335
84202: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
84203: LD_ADDR_VAR 0 5
84207: PUSH
84208: LD_VAR 0 1
84212: PUSH
84213: LD_VAR 0 2
84217: PUSH
84218: LD_INT 4
84220: PLUS
84221: PUSH
84222: LD_INT 0
84224: PUSH
84225: EMPTY
84226: LIST
84227: LIST
84228: LIST
84229: PUSH
84230: LD_VAR 0 1
84234: PUSH
84235: LD_INT 3
84237: PLUS
84238: PUSH
84239: LD_VAR 0 2
84243: PUSH
84244: LD_INT 3
84246: PLUS
84247: PUSH
84248: LD_INT 5
84250: PUSH
84251: EMPTY
84252: LIST
84253: LIST
84254: LIST
84255: PUSH
84256: LD_VAR 0 1
84260: PUSH
84261: LD_INT 4
84263: PLUS
84264: PUSH
84265: LD_VAR 0 2
84269: PUSH
84270: LD_INT 4
84272: PUSH
84273: EMPTY
84274: LIST
84275: LIST
84276: LIST
84277: PUSH
84278: LD_VAR 0 1
84282: PUSH
84283: LD_VAR 0 2
84287: PUSH
84288: LD_INT 3
84290: MINUS
84291: PUSH
84292: LD_INT 3
84294: PUSH
84295: EMPTY
84296: LIST
84297: LIST
84298: LIST
84299: PUSH
84300: LD_VAR 0 1
84304: PUSH
84305: LD_INT 4
84307: MINUS
84308: PUSH
84309: LD_VAR 0 2
84313: PUSH
84314: LD_INT 4
84316: MINUS
84317: PUSH
84318: LD_INT 2
84320: PUSH
84321: EMPTY
84322: LIST
84323: LIST
84324: LIST
84325: PUSH
84326: EMPTY
84327: LIST
84328: LIST
84329: LIST
84330: LIST
84331: LIST
84332: ST_TO_ADDR
// end ; 5 :
84333: GO 84473
84335: LD_INT 5
84337: DOUBLE
84338: EQUAL
84339: IFTRUE 84343
84341: GO 84472
84343: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
84344: LD_ADDR_VAR 0 5
84348: PUSH
84349: LD_VAR 0 1
84353: PUSH
84354: LD_INT 4
84356: MINUS
84357: PUSH
84358: LD_VAR 0 2
84362: PUSH
84363: LD_INT 1
84365: PUSH
84366: EMPTY
84367: LIST
84368: LIST
84369: LIST
84370: PUSH
84371: LD_VAR 0 1
84375: PUSH
84376: LD_VAR 0 2
84380: PUSH
84381: LD_INT 4
84383: MINUS
84384: PUSH
84385: LD_INT 3
84387: PUSH
84388: EMPTY
84389: LIST
84390: LIST
84391: LIST
84392: PUSH
84393: LD_VAR 0 1
84397: PUSH
84398: LD_INT 4
84400: PLUS
84401: PUSH
84402: LD_VAR 0 2
84406: PUSH
84407: LD_INT 4
84409: PLUS
84410: PUSH
84411: LD_INT 5
84413: PUSH
84414: EMPTY
84415: LIST
84416: LIST
84417: LIST
84418: PUSH
84419: LD_VAR 0 1
84423: PUSH
84424: LD_INT 3
84426: PLUS
84427: PUSH
84428: LD_VAR 0 2
84432: PUSH
84433: LD_INT 4
84435: PUSH
84436: EMPTY
84437: LIST
84438: LIST
84439: LIST
84440: PUSH
84441: LD_VAR 0 1
84445: PUSH
84446: LD_VAR 0 2
84450: PUSH
84451: LD_INT 3
84453: PLUS
84454: PUSH
84455: LD_INT 0
84457: PUSH
84458: EMPTY
84459: LIST
84460: LIST
84461: LIST
84462: PUSH
84463: EMPTY
84464: LIST
84465: LIST
84466: LIST
84467: LIST
84468: LIST
84469: ST_TO_ADDR
// end ; end ;
84470: GO 84473
84472: POP
// result := list ;
84473: LD_ADDR_VAR 0 4
84477: PUSH
84478: LD_VAR 0 5
84482: ST_TO_ADDR
// end ;
84483: LD_VAR 0 4
84487: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
84488: LD_INT 0
84490: PPUSH
84491: PPUSH
84492: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
84493: LD_VAR 0 1
84497: NOT
84498: PUSH
84499: LD_VAR 0 2
84503: PUSH
84504: LD_INT 1
84506: PUSH
84507: LD_INT 2
84509: PUSH
84510: LD_INT 3
84512: PUSH
84513: LD_INT 4
84515: PUSH
84516: EMPTY
84517: LIST
84518: LIST
84519: LIST
84520: LIST
84521: IN
84522: NOT
84523: OR
84524: IFFALSE 84528
// exit ;
84526: GO 84620
// tmp := [ ] ;
84528: LD_ADDR_VAR 0 5
84532: PUSH
84533: EMPTY
84534: ST_TO_ADDR
// for i in units do
84535: LD_ADDR_VAR 0 4
84539: PUSH
84540: LD_VAR 0 1
84544: PUSH
84545: FOR_IN
84546: IFFALSE 84589
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
84548: LD_ADDR_VAR 0 5
84552: PUSH
84553: LD_VAR 0 5
84557: PPUSH
84558: LD_VAR 0 5
84562: PUSH
84563: LD_INT 1
84565: PLUS
84566: PPUSH
84567: LD_VAR 0 4
84571: PPUSH
84572: LD_VAR 0 2
84576: PPUSH
84577: CALL_OW 259
84581: PPUSH
84582: CALL_OW 2
84586: ST_TO_ADDR
84587: GO 84545
84589: POP
84590: POP
// if not tmp then
84591: LD_VAR 0 5
84595: NOT
84596: IFFALSE 84600
// exit ;
84598: GO 84620
// result := SortListByListDesc ( units , tmp ) ;
84600: LD_ADDR_VAR 0 3
84604: PUSH
84605: LD_VAR 0 1
84609: PPUSH
84610: LD_VAR 0 5
84614: PPUSH
84615: CALL_OW 77
84619: ST_TO_ADDR
// end ;
84620: LD_VAR 0 3
84624: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
84625: LD_INT 0
84627: PPUSH
84628: PPUSH
84629: PPUSH
// result := false ;
84630: LD_ADDR_VAR 0 3
84634: PUSH
84635: LD_INT 0
84637: ST_TO_ADDR
// x := GetX ( building ) ;
84638: LD_ADDR_VAR 0 4
84642: PUSH
84643: LD_VAR 0 2
84647: PPUSH
84648: CALL_OW 250
84652: ST_TO_ADDR
// y := GetY ( building ) ;
84653: LD_ADDR_VAR 0 5
84657: PUSH
84658: LD_VAR 0 2
84662: PPUSH
84663: CALL_OW 251
84667: ST_TO_ADDR
// if not building or not x or not y then
84668: LD_VAR 0 2
84672: NOT
84673: PUSH
84674: LD_VAR 0 4
84678: NOT
84679: OR
84680: PUSH
84681: LD_VAR 0 5
84685: NOT
84686: OR
84687: IFFALSE 84691
// exit ;
84689: GO 84783
// if GetTaskList ( unit ) then
84691: LD_VAR 0 1
84695: PPUSH
84696: CALL_OW 437
84700: IFFALSE 84783
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
84702: LD_STRING e
84704: PUSH
84705: LD_VAR 0 1
84709: PPUSH
84710: CALL_OW 437
84714: PUSH
84715: LD_INT 1
84717: ARRAY
84718: PUSH
84719: LD_INT 1
84721: ARRAY
84722: EQUAL
84723: PUSH
84724: LD_VAR 0 4
84728: PUSH
84729: LD_VAR 0 1
84733: PPUSH
84734: CALL_OW 437
84738: PUSH
84739: LD_INT 1
84741: ARRAY
84742: PUSH
84743: LD_INT 2
84745: ARRAY
84746: EQUAL
84747: AND
84748: PUSH
84749: LD_VAR 0 5
84753: PUSH
84754: LD_VAR 0 1
84758: PPUSH
84759: CALL_OW 437
84763: PUSH
84764: LD_INT 1
84766: ARRAY
84767: PUSH
84768: LD_INT 3
84770: ARRAY
84771: EQUAL
84772: AND
84773: IFFALSE 84783
// result := true end ;
84775: LD_ADDR_VAR 0 3
84779: PUSH
84780: LD_INT 1
84782: ST_TO_ADDR
// end ;
84783: LD_VAR 0 3
84787: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
84788: LD_INT 0
84790: PPUSH
// result := false ;
84791: LD_ADDR_VAR 0 4
84795: PUSH
84796: LD_INT 0
84798: ST_TO_ADDR
// if GetTaskList ( unit ) then
84799: LD_VAR 0 1
84803: PPUSH
84804: CALL_OW 437
84808: IFFALSE 84891
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
84810: LD_STRING M
84812: PUSH
84813: LD_VAR 0 1
84817: PPUSH
84818: CALL_OW 437
84822: PUSH
84823: LD_INT 1
84825: ARRAY
84826: PUSH
84827: LD_INT 1
84829: ARRAY
84830: EQUAL
84831: PUSH
84832: LD_VAR 0 2
84836: PUSH
84837: LD_VAR 0 1
84841: PPUSH
84842: CALL_OW 437
84846: PUSH
84847: LD_INT 1
84849: ARRAY
84850: PUSH
84851: LD_INT 2
84853: ARRAY
84854: EQUAL
84855: AND
84856: PUSH
84857: LD_VAR 0 3
84861: PUSH
84862: LD_VAR 0 1
84866: PPUSH
84867: CALL_OW 437
84871: PUSH
84872: LD_INT 1
84874: ARRAY
84875: PUSH
84876: LD_INT 3
84878: ARRAY
84879: EQUAL
84880: AND
84881: IFFALSE 84891
// result := true ;
84883: LD_ADDR_VAR 0 4
84887: PUSH
84888: LD_INT 1
84890: ST_TO_ADDR
// end ; end ;
84891: LD_VAR 0 4
84895: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
84896: LD_INT 0
84898: PPUSH
84899: PPUSH
84900: PPUSH
84901: PPUSH
// if not unit or not area then
84902: LD_VAR 0 1
84906: NOT
84907: PUSH
84908: LD_VAR 0 2
84912: NOT
84913: OR
84914: IFFALSE 84918
// exit ;
84916: GO 85082
// tmp := AreaToList ( area , i ) ;
84918: LD_ADDR_VAR 0 6
84922: PUSH
84923: LD_VAR 0 2
84927: PPUSH
84928: LD_VAR 0 5
84932: PPUSH
84933: CALL_OW 517
84937: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
84938: LD_ADDR_VAR 0 5
84942: PUSH
84943: DOUBLE
84944: LD_INT 1
84946: DEC
84947: ST_TO_ADDR
84948: LD_VAR 0 6
84952: PUSH
84953: LD_INT 1
84955: ARRAY
84956: PUSH
84957: FOR_TO
84958: IFFALSE 85080
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
84960: LD_ADDR_VAR 0 7
84964: PUSH
84965: LD_VAR 0 6
84969: PUSH
84970: LD_INT 1
84972: ARRAY
84973: PUSH
84974: LD_VAR 0 5
84978: ARRAY
84979: PUSH
84980: LD_VAR 0 6
84984: PUSH
84985: LD_INT 2
84987: ARRAY
84988: PUSH
84989: LD_VAR 0 5
84993: ARRAY
84994: PUSH
84995: EMPTY
84996: LIST
84997: LIST
84998: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
84999: LD_VAR 0 7
85003: PUSH
85004: LD_INT 1
85006: ARRAY
85007: PPUSH
85008: LD_VAR 0 7
85012: PUSH
85013: LD_INT 2
85015: ARRAY
85016: PPUSH
85017: CALL_OW 428
85021: PUSH
85022: LD_INT 0
85024: EQUAL
85025: IFFALSE 85078
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
85027: LD_VAR 0 1
85031: PPUSH
85032: LD_VAR 0 7
85036: PUSH
85037: LD_INT 1
85039: ARRAY
85040: PPUSH
85041: LD_VAR 0 7
85045: PUSH
85046: LD_INT 2
85048: ARRAY
85049: PPUSH
85050: LD_VAR 0 3
85054: PPUSH
85055: CALL_OW 48
// result := IsPlaced ( unit ) ;
85059: LD_ADDR_VAR 0 4
85063: PUSH
85064: LD_VAR 0 1
85068: PPUSH
85069: CALL_OW 305
85073: ST_TO_ADDR
// exit ;
85074: POP
85075: POP
85076: GO 85082
// end ; end ;
85078: GO 84957
85080: POP
85081: POP
// end ;
85082: LD_VAR 0 4
85086: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
85087: LD_INT 0
85089: PPUSH
85090: PPUSH
85091: PPUSH
// if not side or side > 8 then
85092: LD_VAR 0 1
85096: NOT
85097: PUSH
85098: LD_VAR 0 1
85102: PUSH
85103: LD_INT 8
85105: GREATER
85106: OR
85107: IFFALSE 85111
// exit ;
85109: GO 85298
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
85111: LD_ADDR_VAR 0 4
85115: PUSH
85116: LD_INT 22
85118: PUSH
85119: LD_VAR 0 1
85123: PUSH
85124: EMPTY
85125: LIST
85126: LIST
85127: PUSH
85128: LD_INT 21
85130: PUSH
85131: LD_INT 3
85133: PUSH
85134: EMPTY
85135: LIST
85136: LIST
85137: PUSH
85138: EMPTY
85139: LIST
85140: LIST
85141: PPUSH
85142: CALL_OW 69
85146: ST_TO_ADDR
// if not tmp then
85147: LD_VAR 0 4
85151: NOT
85152: IFFALSE 85156
// exit ;
85154: GO 85298
// enable_addtolog := true ;
85156: LD_ADDR_OWVAR 81
85160: PUSH
85161: LD_INT 1
85163: ST_TO_ADDR
// AddToLog ( [ ) ;
85164: LD_STRING [
85166: PPUSH
85167: CALL_OW 561
// for i in tmp do
85171: LD_ADDR_VAR 0 3
85175: PUSH
85176: LD_VAR 0 4
85180: PUSH
85181: FOR_IN
85182: IFFALSE 85289
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
85184: LD_STRING [
85186: PUSH
85187: LD_VAR 0 3
85191: PPUSH
85192: CALL_OW 266
85196: STR
85197: PUSH
85198: LD_STRING , 
85200: STR
85201: PUSH
85202: LD_VAR 0 3
85206: PPUSH
85207: CALL_OW 250
85211: STR
85212: PUSH
85213: LD_STRING , 
85215: STR
85216: PUSH
85217: LD_VAR 0 3
85221: PPUSH
85222: CALL_OW 251
85226: STR
85227: PUSH
85228: LD_STRING , 
85230: STR
85231: PUSH
85232: LD_VAR 0 3
85236: PPUSH
85237: CALL_OW 254
85241: STR
85242: PUSH
85243: LD_STRING , 
85245: STR
85246: PUSH
85247: LD_VAR 0 3
85251: PPUSH
85252: LD_INT 1
85254: PPUSH
85255: CALL_OW 268
85259: STR
85260: PUSH
85261: LD_STRING , 
85263: STR
85264: PUSH
85265: LD_VAR 0 3
85269: PPUSH
85270: LD_INT 2
85272: PPUSH
85273: CALL_OW 268
85277: STR
85278: PUSH
85279: LD_STRING ],
85281: STR
85282: PPUSH
85283: CALL_OW 561
// end ;
85287: GO 85181
85289: POP
85290: POP
// AddToLog ( ]; ) ;
85291: LD_STRING ];
85293: PPUSH
85294: CALL_OW 561
// end ;
85298: LD_VAR 0 2
85302: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
85303: LD_INT 0
85305: PPUSH
85306: PPUSH
85307: PPUSH
85308: PPUSH
85309: PPUSH
// if not area or not rate or not max then
85310: LD_VAR 0 1
85314: NOT
85315: PUSH
85316: LD_VAR 0 2
85320: NOT
85321: OR
85322: PUSH
85323: LD_VAR 0 4
85327: NOT
85328: OR
85329: IFFALSE 85333
// exit ;
85331: GO 85522
// while 1 do
85333: LD_INT 1
85335: IFFALSE 85522
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
85337: LD_ADDR_VAR 0 9
85341: PUSH
85342: LD_VAR 0 1
85346: PPUSH
85347: LD_INT 1
85349: PPUSH
85350: CALL_OW 287
85354: PUSH
85355: LD_INT 10
85357: MUL
85358: ST_TO_ADDR
// r := rate / 10 ;
85359: LD_ADDR_VAR 0 7
85363: PUSH
85364: LD_VAR 0 2
85368: PUSH
85369: LD_INT 10
85371: DIVREAL
85372: ST_TO_ADDR
// time := 1 1$00 ;
85373: LD_ADDR_VAR 0 8
85377: PUSH
85378: LD_INT 2100
85380: ST_TO_ADDR
// if amount < min then
85381: LD_VAR 0 9
85385: PUSH
85386: LD_VAR 0 3
85390: LESS
85391: IFFALSE 85409
// r := r * 2 else
85393: LD_ADDR_VAR 0 7
85397: PUSH
85398: LD_VAR 0 7
85402: PUSH
85403: LD_INT 2
85405: MUL
85406: ST_TO_ADDR
85407: GO 85435
// if amount > max then
85409: LD_VAR 0 9
85413: PUSH
85414: LD_VAR 0 4
85418: GREATER
85419: IFFALSE 85435
// r := r / 2 ;
85421: LD_ADDR_VAR 0 7
85425: PUSH
85426: LD_VAR 0 7
85430: PUSH
85431: LD_INT 2
85433: DIVREAL
85434: ST_TO_ADDR
// time := time / r ;
85435: LD_ADDR_VAR 0 8
85439: PUSH
85440: LD_VAR 0 8
85444: PUSH
85445: LD_VAR 0 7
85449: DIVREAL
85450: ST_TO_ADDR
// if time < 0 then
85451: LD_VAR 0 8
85455: PUSH
85456: LD_INT 0
85458: LESS
85459: IFFALSE 85476
// time := time * - 1 ;
85461: LD_ADDR_VAR 0 8
85465: PUSH
85466: LD_VAR 0 8
85470: PUSH
85471: LD_INT 1
85473: NEG
85474: MUL
85475: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
85476: LD_VAR 0 8
85480: PUSH
85481: LD_INT 35
85483: PPUSH
85484: LD_INT 875
85486: PPUSH
85487: CALL_OW 12
85491: PLUS
85492: PPUSH
85493: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
85497: LD_INT 1
85499: PPUSH
85500: LD_INT 5
85502: PPUSH
85503: CALL_OW 12
85507: PPUSH
85508: LD_VAR 0 1
85512: PPUSH
85513: LD_INT 1
85515: PPUSH
85516: CALL_OW 55
// end ;
85520: GO 85333
// end ;
85522: LD_VAR 0 5
85526: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
85527: LD_INT 0
85529: PPUSH
85530: PPUSH
85531: PPUSH
85532: PPUSH
85533: PPUSH
85534: PPUSH
85535: PPUSH
85536: PPUSH
// if not turrets or not factories then
85537: LD_VAR 0 1
85541: NOT
85542: PUSH
85543: LD_VAR 0 2
85547: NOT
85548: OR
85549: IFFALSE 85553
// exit ;
85551: GO 85860
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
85553: LD_ADDR_VAR 0 10
85557: PUSH
85558: LD_INT 5
85560: PUSH
85561: LD_INT 6
85563: PUSH
85564: EMPTY
85565: LIST
85566: LIST
85567: PUSH
85568: LD_INT 2
85570: PUSH
85571: LD_INT 4
85573: PUSH
85574: EMPTY
85575: LIST
85576: LIST
85577: PUSH
85578: LD_INT 3
85580: PUSH
85581: LD_INT 5
85583: PUSH
85584: EMPTY
85585: LIST
85586: LIST
85587: PUSH
85588: EMPTY
85589: LIST
85590: LIST
85591: LIST
85592: PUSH
85593: LD_INT 24
85595: PUSH
85596: LD_INT 25
85598: PUSH
85599: EMPTY
85600: LIST
85601: LIST
85602: PUSH
85603: LD_INT 23
85605: PUSH
85606: LD_INT 27
85608: PUSH
85609: EMPTY
85610: LIST
85611: LIST
85612: PUSH
85613: EMPTY
85614: LIST
85615: LIST
85616: PUSH
85617: LD_INT 42
85619: PUSH
85620: LD_INT 43
85622: PUSH
85623: EMPTY
85624: LIST
85625: LIST
85626: PUSH
85627: LD_INT 44
85629: PUSH
85630: LD_INT 46
85632: PUSH
85633: EMPTY
85634: LIST
85635: LIST
85636: PUSH
85637: LD_INT 45
85639: PUSH
85640: LD_INT 47
85642: PUSH
85643: EMPTY
85644: LIST
85645: LIST
85646: PUSH
85647: EMPTY
85648: LIST
85649: LIST
85650: LIST
85651: PUSH
85652: EMPTY
85653: LIST
85654: LIST
85655: LIST
85656: ST_TO_ADDR
// result := [ ] ;
85657: LD_ADDR_VAR 0 3
85661: PUSH
85662: EMPTY
85663: ST_TO_ADDR
// for i in turrets do
85664: LD_ADDR_VAR 0 4
85668: PUSH
85669: LD_VAR 0 1
85673: PUSH
85674: FOR_IN
85675: IFFALSE 85858
// begin nat := GetNation ( i ) ;
85677: LD_ADDR_VAR 0 7
85681: PUSH
85682: LD_VAR 0 4
85686: PPUSH
85687: CALL_OW 248
85691: ST_TO_ADDR
// weapon := 0 ;
85692: LD_ADDR_VAR 0 8
85696: PUSH
85697: LD_INT 0
85699: ST_TO_ADDR
// if not nat then
85700: LD_VAR 0 7
85704: NOT
85705: IFFALSE 85709
// continue ;
85707: GO 85674
// for j in list [ nat ] do
85709: LD_ADDR_VAR 0 5
85713: PUSH
85714: LD_VAR 0 10
85718: PUSH
85719: LD_VAR 0 7
85723: ARRAY
85724: PUSH
85725: FOR_IN
85726: IFFALSE 85767
// if GetBWeapon ( i ) = j [ 1 ] then
85728: LD_VAR 0 4
85732: PPUSH
85733: CALL_OW 269
85737: PUSH
85738: LD_VAR 0 5
85742: PUSH
85743: LD_INT 1
85745: ARRAY
85746: EQUAL
85747: IFFALSE 85765
// begin weapon := j [ 2 ] ;
85749: LD_ADDR_VAR 0 8
85753: PUSH
85754: LD_VAR 0 5
85758: PUSH
85759: LD_INT 2
85761: ARRAY
85762: ST_TO_ADDR
// break ;
85763: GO 85767
// end ;
85765: GO 85725
85767: POP
85768: POP
// if not weapon then
85769: LD_VAR 0 8
85773: NOT
85774: IFFALSE 85778
// continue ;
85776: GO 85674
// for k in factories do
85778: LD_ADDR_VAR 0 6
85782: PUSH
85783: LD_VAR 0 2
85787: PUSH
85788: FOR_IN
85789: IFFALSE 85854
// begin weapons := AvailableWeaponList ( k ) ;
85791: LD_ADDR_VAR 0 9
85795: PUSH
85796: LD_VAR 0 6
85800: PPUSH
85801: CALL_OW 478
85805: ST_TO_ADDR
// if not weapons then
85806: LD_VAR 0 9
85810: NOT
85811: IFFALSE 85815
// continue ;
85813: GO 85788
// if weapon in weapons then
85815: LD_VAR 0 8
85819: PUSH
85820: LD_VAR 0 9
85824: IN
85825: IFFALSE 85852
// begin result := [ i , weapon ] ;
85827: LD_ADDR_VAR 0 3
85831: PUSH
85832: LD_VAR 0 4
85836: PUSH
85837: LD_VAR 0 8
85841: PUSH
85842: EMPTY
85843: LIST
85844: LIST
85845: ST_TO_ADDR
// exit ;
85846: POP
85847: POP
85848: POP
85849: POP
85850: GO 85860
// end ; end ;
85852: GO 85788
85854: POP
85855: POP
// end ;
85856: GO 85674
85858: POP
85859: POP
// end ;
85860: LD_VAR 0 3
85864: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
85865: LD_INT 0
85867: PPUSH
// if not side or side > 8 then
85868: LD_VAR 0 3
85872: NOT
85873: PUSH
85874: LD_VAR 0 3
85878: PUSH
85879: LD_INT 8
85881: GREATER
85882: OR
85883: IFFALSE 85887
// exit ;
85885: GO 85946
// if not range then
85887: LD_VAR 0 4
85891: NOT
85892: IFFALSE 85903
// range := - 12 ;
85894: LD_ADDR_VAR 0 4
85898: PUSH
85899: LD_INT 12
85901: NEG
85902: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
85903: LD_VAR 0 1
85907: PPUSH
85908: LD_VAR 0 2
85912: PPUSH
85913: LD_VAR 0 3
85917: PPUSH
85918: LD_VAR 0 4
85922: PPUSH
85923: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
85927: LD_VAR 0 1
85931: PPUSH
85932: LD_VAR 0 2
85936: PPUSH
85937: LD_VAR 0 3
85941: PPUSH
85942: CALL_OW 331
// end ;
85946: LD_VAR 0 5
85950: RET
// export function Video ( mode ) ; begin
85951: LD_INT 0
85953: PPUSH
// ingame_video = mode ;
85954: LD_ADDR_OWVAR 52
85958: PUSH
85959: LD_VAR 0 1
85963: ST_TO_ADDR
// interface_hidden = mode ;
85964: LD_ADDR_OWVAR 54
85968: PUSH
85969: LD_VAR 0 1
85973: ST_TO_ADDR
// end ;
85974: LD_VAR 0 2
85978: RET
// export function Join ( array , element ) ; begin
85979: LD_INT 0
85981: PPUSH
// result := Replace ( array , array + 1 , element ) ;
85982: LD_ADDR_VAR 0 3
85986: PUSH
85987: LD_VAR 0 1
85991: PPUSH
85992: LD_VAR 0 1
85996: PUSH
85997: LD_INT 1
85999: PLUS
86000: PPUSH
86001: LD_VAR 0 2
86005: PPUSH
86006: CALL_OW 1
86010: ST_TO_ADDR
// end ;
86011: LD_VAR 0 3
86015: RET
// export function JoinUnion ( array , element ) ; begin
86016: LD_INT 0
86018: PPUSH
// result := array union element ;
86019: LD_ADDR_VAR 0 3
86023: PUSH
86024: LD_VAR 0 1
86028: PUSH
86029: LD_VAR 0 2
86033: UNION
86034: ST_TO_ADDR
// end ;
86035: LD_VAR 0 3
86039: RET
// export function GetBehemoths ( side ) ; begin
86040: LD_INT 0
86042: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
86043: LD_ADDR_VAR 0 2
86047: PUSH
86048: LD_INT 22
86050: PUSH
86051: LD_VAR 0 1
86055: PUSH
86056: EMPTY
86057: LIST
86058: LIST
86059: PUSH
86060: LD_INT 31
86062: PUSH
86063: LD_INT 25
86065: PUSH
86066: EMPTY
86067: LIST
86068: LIST
86069: PUSH
86070: EMPTY
86071: LIST
86072: LIST
86073: PPUSH
86074: CALL_OW 69
86078: ST_TO_ADDR
// end ;
86079: LD_VAR 0 2
86083: RET
// export function Shuffle ( array ) ; var i , index ; begin
86084: LD_INT 0
86086: PPUSH
86087: PPUSH
86088: PPUSH
// result := [ ] ;
86089: LD_ADDR_VAR 0 2
86093: PUSH
86094: EMPTY
86095: ST_TO_ADDR
// if not array then
86096: LD_VAR 0 1
86100: NOT
86101: IFFALSE 86105
// exit ;
86103: GO 86204
// Randomize ;
86105: CALL_OW 10
// for i = array downto 1 do
86109: LD_ADDR_VAR 0 3
86113: PUSH
86114: DOUBLE
86115: LD_VAR 0 1
86119: INC
86120: ST_TO_ADDR
86121: LD_INT 1
86123: PUSH
86124: FOR_DOWNTO
86125: IFFALSE 86202
// begin index := rand ( 1 , array ) ;
86127: LD_ADDR_VAR 0 4
86131: PUSH
86132: LD_INT 1
86134: PPUSH
86135: LD_VAR 0 1
86139: PPUSH
86140: CALL_OW 12
86144: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
86145: LD_ADDR_VAR 0 2
86149: PUSH
86150: LD_VAR 0 2
86154: PPUSH
86155: LD_VAR 0 2
86159: PUSH
86160: LD_INT 1
86162: PLUS
86163: PPUSH
86164: LD_VAR 0 1
86168: PUSH
86169: LD_VAR 0 4
86173: ARRAY
86174: PPUSH
86175: CALL_OW 2
86179: ST_TO_ADDR
// array := Delete ( array , index ) ;
86180: LD_ADDR_VAR 0 1
86184: PUSH
86185: LD_VAR 0 1
86189: PPUSH
86190: LD_VAR 0 4
86194: PPUSH
86195: CALL_OW 3
86199: ST_TO_ADDR
// end ;
86200: GO 86124
86202: POP
86203: POP
// end ;
86204: LD_VAR 0 2
86208: RET
// export function GetBaseMaterials ( base ) ; begin
86209: LD_INT 0
86211: PPUSH
// result := [ 0 , 0 , 0 ] ;
86212: LD_ADDR_VAR 0 2
86216: PUSH
86217: LD_INT 0
86219: PUSH
86220: LD_INT 0
86222: PUSH
86223: LD_INT 0
86225: PUSH
86226: EMPTY
86227: LIST
86228: LIST
86229: LIST
86230: ST_TO_ADDR
// if not base then
86231: LD_VAR 0 1
86235: NOT
86236: IFFALSE 86240
// exit ;
86238: GO 86289
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
86240: LD_ADDR_VAR 0 2
86244: PUSH
86245: LD_VAR 0 1
86249: PPUSH
86250: LD_INT 1
86252: PPUSH
86253: CALL_OW 275
86257: PUSH
86258: LD_VAR 0 1
86262: PPUSH
86263: LD_INT 2
86265: PPUSH
86266: CALL_OW 275
86270: PUSH
86271: LD_VAR 0 1
86275: PPUSH
86276: LD_INT 3
86278: PPUSH
86279: CALL_OW 275
86283: PUSH
86284: EMPTY
86285: LIST
86286: LIST
86287: LIST
86288: ST_TO_ADDR
// end ;
86289: LD_VAR 0 2
86293: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
86294: LD_INT 0
86296: PPUSH
86297: PPUSH
// result := array ;
86298: LD_ADDR_VAR 0 3
86302: PUSH
86303: LD_VAR 0 1
86307: ST_TO_ADDR
// if size > 0 then
86308: LD_VAR 0 2
86312: PUSH
86313: LD_INT 0
86315: GREATER
86316: IFFALSE 86362
// for i := array downto size do
86318: LD_ADDR_VAR 0 4
86322: PUSH
86323: DOUBLE
86324: LD_VAR 0 1
86328: INC
86329: ST_TO_ADDR
86330: LD_VAR 0 2
86334: PUSH
86335: FOR_DOWNTO
86336: IFFALSE 86360
// result := Delete ( result , result ) ;
86338: LD_ADDR_VAR 0 3
86342: PUSH
86343: LD_VAR 0 3
86347: PPUSH
86348: LD_VAR 0 3
86352: PPUSH
86353: CALL_OW 3
86357: ST_TO_ADDR
86358: GO 86335
86360: POP
86361: POP
// end ;
86362: LD_VAR 0 3
86366: RET
// export function ComExit ( unit ) ; var tmp ; begin
86367: LD_INT 0
86369: PPUSH
86370: PPUSH
// if not IsInUnit ( unit ) then
86371: LD_VAR 0 1
86375: PPUSH
86376: CALL_OW 310
86380: NOT
86381: IFFALSE 86385
// exit ;
86383: GO 86445
// tmp := IsInUnit ( unit ) ;
86385: LD_ADDR_VAR 0 3
86389: PUSH
86390: LD_VAR 0 1
86394: PPUSH
86395: CALL_OW 310
86399: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
86400: LD_VAR 0 3
86404: PPUSH
86405: CALL_OW 247
86409: PUSH
86410: LD_INT 2
86412: EQUAL
86413: IFFALSE 86426
// ComExitVehicle ( unit ) else
86415: LD_VAR 0 1
86419: PPUSH
86420: CALL_OW 121
86424: GO 86435
// ComExitBuilding ( unit ) ;
86426: LD_VAR 0 1
86430: PPUSH
86431: CALL_OW 122
// result := tmp ;
86435: LD_ADDR_VAR 0 2
86439: PUSH
86440: LD_VAR 0 3
86444: ST_TO_ADDR
// end ;
86445: LD_VAR 0 2
86449: RET
// export function ComExitAll ( units ) ; var i ; begin
86450: LD_INT 0
86452: PPUSH
86453: PPUSH
// if not units then
86454: LD_VAR 0 1
86458: NOT
86459: IFFALSE 86463
// exit ;
86461: GO 86489
// for i in units do
86463: LD_ADDR_VAR 0 3
86467: PUSH
86468: LD_VAR 0 1
86472: PUSH
86473: FOR_IN
86474: IFFALSE 86487
// ComExit ( i ) ;
86476: LD_VAR 0 3
86480: PPUSH
86481: CALL 86367 0 1
86485: GO 86473
86487: POP
86488: POP
// end ;
86489: LD_VAR 0 2
86493: RET
// export function ResetHc ; begin
86494: LD_INT 0
86496: PPUSH
// InitHc ;
86497: CALL_OW 19
// hc_importance := 0 ;
86501: LD_ADDR_OWVAR 32
86505: PUSH
86506: LD_INT 0
86508: ST_TO_ADDR
// end ;
86509: LD_VAR 0 1
86513: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
86514: LD_INT 0
86516: PPUSH
86517: PPUSH
86518: PPUSH
// _x := ( x1 + x2 ) div 2 ;
86519: LD_ADDR_VAR 0 6
86523: PUSH
86524: LD_VAR 0 1
86528: PUSH
86529: LD_VAR 0 3
86533: PLUS
86534: PUSH
86535: LD_INT 2
86537: DIV
86538: ST_TO_ADDR
// if _x < 0 then
86539: LD_VAR 0 6
86543: PUSH
86544: LD_INT 0
86546: LESS
86547: IFFALSE 86564
// _x := _x * - 1 ;
86549: LD_ADDR_VAR 0 6
86553: PUSH
86554: LD_VAR 0 6
86558: PUSH
86559: LD_INT 1
86561: NEG
86562: MUL
86563: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
86564: LD_ADDR_VAR 0 7
86568: PUSH
86569: LD_VAR 0 2
86573: PUSH
86574: LD_VAR 0 4
86578: PLUS
86579: PUSH
86580: LD_INT 2
86582: DIV
86583: ST_TO_ADDR
// if _y < 0 then
86584: LD_VAR 0 7
86588: PUSH
86589: LD_INT 0
86591: LESS
86592: IFFALSE 86609
// _y := _y * - 1 ;
86594: LD_ADDR_VAR 0 7
86598: PUSH
86599: LD_VAR 0 7
86603: PUSH
86604: LD_INT 1
86606: NEG
86607: MUL
86608: ST_TO_ADDR
// result := [ _x , _y ] ;
86609: LD_ADDR_VAR 0 5
86613: PUSH
86614: LD_VAR 0 6
86618: PUSH
86619: LD_VAR 0 7
86623: PUSH
86624: EMPTY
86625: LIST
86626: LIST
86627: ST_TO_ADDR
// end ;
86628: LD_VAR 0 5
86632: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
86633: LD_INT 0
86635: PPUSH
86636: PPUSH
86637: PPUSH
86638: PPUSH
// task := GetTaskList ( unit ) ;
86639: LD_ADDR_VAR 0 7
86643: PUSH
86644: LD_VAR 0 1
86648: PPUSH
86649: CALL_OW 437
86653: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
86654: LD_VAR 0 7
86658: NOT
86659: PUSH
86660: LD_VAR 0 1
86664: PPUSH
86665: LD_VAR 0 2
86669: PPUSH
86670: CALL_OW 308
86674: NOT
86675: AND
86676: IFFALSE 86680
// exit ;
86678: GO 86798
// if IsInArea ( unit , area ) then
86680: LD_VAR 0 1
86684: PPUSH
86685: LD_VAR 0 2
86689: PPUSH
86690: CALL_OW 308
86694: IFFALSE 86712
// begin ComMoveToArea ( unit , goAway ) ;
86696: LD_VAR 0 1
86700: PPUSH
86701: LD_VAR 0 3
86705: PPUSH
86706: CALL_OW 113
// exit ;
86710: GO 86798
// end ; if task [ 1 ] [ 1 ] <> M then
86712: LD_VAR 0 7
86716: PUSH
86717: LD_INT 1
86719: ARRAY
86720: PUSH
86721: LD_INT 1
86723: ARRAY
86724: PUSH
86725: LD_STRING M
86727: NONEQUAL
86728: IFFALSE 86732
// exit ;
86730: GO 86798
// x := task [ 1 ] [ 2 ] ;
86732: LD_ADDR_VAR 0 5
86736: PUSH
86737: LD_VAR 0 7
86741: PUSH
86742: LD_INT 1
86744: ARRAY
86745: PUSH
86746: LD_INT 2
86748: ARRAY
86749: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
86750: LD_ADDR_VAR 0 6
86754: PUSH
86755: LD_VAR 0 7
86759: PUSH
86760: LD_INT 1
86762: ARRAY
86763: PUSH
86764: LD_INT 3
86766: ARRAY
86767: ST_TO_ADDR
// if InArea ( x , y , area ) then
86768: LD_VAR 0 5
86772: PPUSH
86773: LD_VAR 0 6
86777: PPUSH
86778: LD_VAR 0 2
86782: PPUSH
86783: CALL_OW 309
86787: IFFALSE 86798
// ComStop ( unit ) ;
86789: LD_VAR 0 1
86793: PPUSH
86794: CALL_OW 141
// end ;
86798: LD_VAR 0 4
86802: RET
// export function Abs ( value ) ; begin
86803: LD_INT 0
86805: PPUSH
// result := value ;
86806: LD_ADDR_VAR 0 2
86810: PUSH
86811: LD_VAR 0 1
86815: ST_TO_ADDR
// if value < 0 then
86816: LD_VAR 0 1
86820: PUSH
86821: LD_INT 0
86823: LESS
86824: IFFALSE 86841
// result := value * - 1 ;
86826: LD_ADDR_VAR 0 2
86830: PUSH
86831: LD_VAR 0 1
86835: PUSH
86836: LD_INT 1
86838: NEG
86839: MUL
86840: ST_TO_ADDR
// end ;
86841: LD_VAR 0 2
86845: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
86846: LD_INT 0
86848: PPUSH
86849: PPUSH
86850: PPUSH
86851: PPUSH
86852: PPUSH
86853: PPUSH
86854: PPUSH
86855: PPUSH
// if not unit or not building then
86856: LD_VAR 0 1
86860: NOT
86861: PUSH
86862: LD_VAR 0 2
86866: NOT
86867: OR
86868: IFFALSE 86872
// exit ;
86870: GO 87098
// x := GetX ( building ) ;
86872: LD_ADDR_VAR 0 4
86876: PUSH
86877: LD_VAR 0 2
86881: PPUSH
86882: CALL_OW 250
86886: ST_TO_ADDR
// y := GetY ( building ) ;
86887: LD_ADDR_VAR 0 6
86891: PUSH
86892: LD_VAR 0 2
86896: PPUSH
86897: CALL_OW 251
86901: ST_TO_ADDR
// d := GetDir ( building ) ;
86902: LD_ADDR_VAR 0 8
86906: PUSH
86907: LD_VAR 0 2
86911: PPUSH
86912: CALL_OW 254
86916: ST_TO_ADDR
// r := 4 ;
86917: LD_ADDR_VAR 0 9
86921: PUSH
86922: LD_INT 4
86924: ST_TO_ADDR
// for i := 1 to 5 do
86925: LD_ADDR_VAR 0 10
86929: PUSH
86930: DOUBLE
86931: LD_INT 1
86933: DEC
86934: ST_TO_ADDR
86935: LD_INT 5
86937: PUSH
86938: FOR_TO
86939: IFFALSE 87096
// begin _x := ShiftX ( x , d , r + i ) ;
86941: LD_ADDR_VAR 0 5
86945: PUSH
86946: LD_VAR 0 4
86950: PPUSH
86951: LD_VAR 0 8
86955: PPUSH
86956: LD_VAR 0 9
86960: PUSH
86961: LD_VAR 0 10
86965: PLUS
86966: PPUSH
86967: CALL_OW 272
86971: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
86972: LD_ADDR_VAR 0 7
86976: PUSH
86977: LD_VAR 0 6
86981: PPUSH
86982: LD_VAR 0 8
86986: PPUSH
86987: LD_VAR 0 9
86991: PUSH
86992: LD_VAR 0 10
86996: PLUS
86997: PPUSH
86998: CALL_OW 273
87002: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
87003: LD_VAR 0 5
87007: PPUSH
87008: LD_VAR 0 7
87012: PPUSH
87013: CALL_OW 488
87017: PUSH
87018: LD_VAR 0 5
87022: PPUSH
87023: LD_VAR 0 7
87027: PPUSH
87028: CALL_OW 428
87032: PPUSH
87033: CALL_OW 247
87037: PUSH
87038: LD_INT 3
87040: PUSH
87041: LD_INT 2
87043: PUSH
87044: EMPTY
87045: LIST
87046: LIST
87047: IN
87048: NOT
87049: AND
87050: IFFALSE 87094
// begin ComMoveXY ( unit , _x , _y ) ;
87052: LD_VAR 0 1
87056: PPUSH
87057: LD_VAR 0 5
87061: PPUSH
87062: LD_VAR 0 7
87066: PPUSH
87067: CALL_OW 111
// result := [ _x , _y ] ;
87071: LD_ADDR_VAR 0 3
87075: PUSH
87076: LD_VAR 0 5
87080: PUSH
87081: LD_VAR 0 7
87085: PUSH
87086: EMPTY
87087: LIST
87088: LIST
87089: ST_TO_ADDR
// exit ;
87090: POP
87091: POP
87092: GO 87098
// end ; end ;
87094: GO 86938
87096: POP
87097: POP
// end ;
87098: LD_VAR 0 3
87102: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
87103: LD_INT 0
87105: PPUSH
87106: PPUSH
87107: PPUSH
// result := 0 ;
87108: LD_ADDR_VAR 0 3
87112: PUSH
87113: LD_INT 0
87115: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
87116: LD_VAR 0 1
87120: PUSH
87121: LD_INT 0
87123: LESS
87124: PUSH
87125: LD_VAR 0 1
87129: PUSH
87130: LD_INT 8
87132: GREATER
87133: OR
87134: PUSH
87135: LD_VAR 0 2
87139: PUSH
87140: LD_INT 0
87142: LESS
87143: OR
87144: PUSH
87145: LD_VAR 0 2
87149: PUSH
87150: LD_INT 8
87152: GREATER
87153: OR
87154: IFFALSE 87158
// exit ;
87156: GO 87233
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
87158: LD_ADDR_VAR 0 4
87162: PUSH
87163: LD_INT 22
87165: PUSH
87166: LD_VAR 0 2
87170: PUSH
87171: EMPTY
87172: LIST
87173: LIST
87174: PPUSH
87175: CALL_OW 69
87179: PUSH
87180: FOR_IN
87181: IFFALSE 87231
// begin un := UnitShoot ( i ) ;
87183: LD_ADDR_VAR 0 5
87187: PUSH
87188: LD_VAR 0 4
87192: PPUSH
87193: CALL_OW 504
87197: ST_TO_ADDR
// if GetSide ( un ) = side1 then
87198: LD_VAR 0 5
87202: PPUSH
87203: CALL_OW 255
87207: PUSH
87208: LD_VAR 0 1
87212: EQUAL
87213: IFFALSE 87229
// begin result := un ;
87215: LD_ADDR_VAR 0 3
87219: PUSH
87220: LD_VAR 0 5
87224: ST_TO_ADDR
// exit ;
87225: POP
87226: POP
87227: GO 87233
// end ; end ;
87229: GO 87180
87231: POP
87232: POP
// end ;
87233: LD_VAR 0 3
87237: RET
// export function GetCargoBay ( units ) ; begin
87238: LD_INT 0
87240: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
87241: LD_ADDR_VAR 0 2
87245: PUSH
87246: LD_VAR 0 1
87250: PPUSH
87251: LD_INT 2
87253: PUSH
87254: LD_INT 34
87256: PUSH
87257: LD_INT 12
87259: PUSH
87260: EMPTY
87261: LIST
87262: LIST
87263: PUSH
87264: LD_INT 34
87266: PUSH
87267: LD_INT 51
87269: PUSH
87270: EMPTY
87271: LIST
87272: LIST
87273: PUSH
87274: LD_INT 34
87276: PUSH
87277: LD_INT 32
87279: PUSH
87280: EMPTY
87281: LIST
87282: LIST
87283: PUSH
87284: LD_INT 34
87286: PUSH
87287: LD_EXP 71
87291: PUSH
87292: EMPTY
87293: LIST
87294: LIST
87295: PUSH
87296: EMPTY
87297: LIST
87298: LIST
87299: LIST
87300: LIST
87301: LIST
87302: PPUSH
87303: CALL_OW 72
87307: ST_TO_ADDR
// end ;
87308: LD_VAR 0 2
87312: RET
// export function Negate ( value ) ; begin
87313: LD_INT 0
87315: PPUSH
// result := not value ;
87316: LD_ADDR_VAR 0 2
87320: PUSH
87321: LD_VAR 0 1
87325: NOT
87326: ST_TO_ADDR
// end ;
87327: LD_VAR 0 2
87331: RET
// export function Inc ( value ) ; begin
87332: LD_INT 0
87334: PPUSH
// result := value + 1 ;
87335: LD_ADDR_VAR 0 2
87339: PUSH
87340: LD_VAR 0 1
87344: PUSH
87345: LD_INT 1
87347: PLUS
87348: ST_TO_ADDR
// end ;
87349: LD_VAR 0 2
87353: RET
// export function Dec ( value ) ; begin
87354: LD_INT 0
87356: PPUSH
// result := value - 1 ;
87357: LD_ADDR_VAR 0 2
87361: PUSH
87362: LD_VAR 0 1
87366: PUSH
87367: LD_INT 1
87369: MINUS
87370: ST_TO_ADDR
// end ;
87371: LD_VAR 0 2
87375: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
87376: LD_INT 0
87378: PPUSH
87379: PPUSH
87380: PPUSH
87381: PPUSH
87382: PPUSH
87383: PPUSH
87384: PPUSH
87385: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
87386: LD_VAR 0 1
87390: PPUSH
87391: LD_VAR 0 2
87395: PPUSH
87396: CALL_OW 488
87400: NOT
87401: PUSH
87402: LD_VAR 0 3
87406: PPUSH
87407: LD_VAR 0 4
87411: PPUSH
87412: CALL_OW 488
87416: NOT
87417: OR
87418: IFFALSE 87431
// begin result := - 1 ;
87420: LD_ADDR_VAR 0 5
87424: PUSH
87425: LD_INT 1
87427: NEG
87428: ST_TO_ADDR
// exit ;
87429: GO 87666
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
87431: LD_ADDR_VAR 0 12
87435: PUSH
87436: LD_VAR 0 1
87440: PPUSH
87441: LD_VAR 0 2
87445: PPUSH
87446: LD_VAR 0 3
87450: PPUSH
87451: LD_VAR 0 4
87455: PPUSH
87456: CALL 86514 0 4
87460: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
87461: LD_ADDR_VAR 0 11
87465: PUSH
87466: LD_VAR 0 1
87470: PPUSH
87471: LD_VAR 0 2
87475: PPUSH
87476: LD_VAR 0 12
87480: PUSH
87481: LD_INT 1
87483: ARRAY
87484: PPUSH
87485: LD_VAR 0 12
87489: PUSH
87490: LD_INT 2
87492: ARRAY
87493: PPUSH
87494: CALL_OW 298
87498: ST_TO_ADDR
// distance := 9999 ;
87499: LD_ADDR_VAR 0 10
87503: PUSH
87504: LD_INT 9999
87506: ST_TO_ADDR
// for i := 0 to 5 do
87507: LD_ADDR_VAR 0 6
87511: PUSH
87512: DOUBLE
87513: LD_INT 0
87515: DEC
87516: ST_TO_ADDR
87517: LD_INT 5
87519: PUSH
87520: FOR_TO
87521: IFFALSE 87664
// begin _x := ShiftX ( x1 , i , centerDist ) ;
87523: LD_ADDR_VAR 0 7
87527: PUSH
87528: LD_VAR 0 1
87532: PPUSH
87533: LD_VAR 0 6
87537: PPUSH
87538: LD_VAR 0 11
87542: PPUSH
87543: CALL_OW 272
87547: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
87548: LD_ADDR_VAR 0 8
87552: PUSH
87553: LD_VAR 0 2
87557: PPUSH
87558: LD_VAR 0 6
87562: PPUSH
87563: LD_VAR 0 11
87567: PPUSH
87568: CALL_OW 273
87572: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
87573: LD_VAR 0 7
87577: PPUSH
87578: LD_VAR 0 8
87582: PPUSH
87583: CALL_OW 488
87587: NOT
87588: IFFALSE 87592
// continue ;
87590: GO 87520
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
87592: LD_ADDR_VAR 0 9
87596: PUSH
87597: LD_VAR 0 12
87601: PUSH
87602: LD_INT 1
87604: ARRAY
87605: PPUSH
87606: LD_VAR 0 12
87610: PUSH
87611: LD_INT 2
87613: ARRAY
87614: PPUSH
87615: LD_VAR 0 7
87619: PPUSH
87620: LD_VAR 0 8
87624: PPUSH
87625: CALL_OW 298
87629: ST_TO_ADDR
// if tmp < distance then
87630: LD_VAR 0 9
87634: PUSH
87635: LD_VAR 0 10
87639: LESS
87640: IFFALSE 87662
// begin result := i ;
87642: LD_ADDR_VAR 0 5
87646: PUSH
87647: LD_VAR 0 6
87651: ST_TO_ADDR
// distance := tmp ;
87652: LD_ADDR_VAR 0 10
87656: PUSH
87657: LD_VAR 0 9
87661: ST_TO_ADDR
// end ; end ;
87662: GO 87520
87664: POP
87665: POP
// end ;
87666: LD_VAR 0 5
87670: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
87671: LD_INT 0
87673: PPUSH
87674: PPUSH
// if not driver or not IsInUnit ( driver ) then
87675: LD_VAR 0 1
87679: NOT
87680: PUSH
87681: LD_VAR 0 1
87685: PPUSH
87686: CALL_OW 310
87690: NOT
87691: OR
87692: IFFALSE 87696
// exit ;
87694: GO 87786
// vehicle := IsInUnit ( driver ) ;
87696: LD_ADDR_VAR 0 3
87700: PUSH
87701: LD_VAR 0 1
87705: PPUSH
87706: CALL_OW 310
87710: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
87711: LD_VAR 0 1
87715: PPUSH
87716: LD_STRING \
87718: PUSH
87719: LD_INT 0
87721: PUSH
87722: LD_INT 0
87724: PUSH
87725: LD_INT 0
87727: PUSH
87728: LD_INT 0
87730: PUSH
87731: LD_INT 0
87733: PUSH
87734: LD_INT 0
87736: PUSH
87737: EMPTY
87738: LIST
87739: LIST
87740: LIST
87741: LIST
87742: LIST
87743: LIST
87744: LIST
87745: PUSH
87746: LD_STRING E
87748: PUSH
87749: LD_INT 0
87751: PUSH
87752: LD_INT 0
87754: PUSH
87755: LD_VAR 0 3
87759: PUSH
87760: LD_INT 0
87762: PUSH
87763: LD_INT 0
87765: PUSH
87766: LD_INT 0
87768: PUSH
87769: EMPTY
87770: LIST
87771: LIST
87772: LIST
87773: LIST
87774: LIST
87775: LIST
87776: LIST
87777: PUSH
87778: EMPTY
87779: LIST
87780: LIST
87781: PPUSH
87782: CALL_OW 446
// end ;
87786: LD_VAR 0 2
87790: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
87791: LD_INT 0
87793: PPUSH
87794: PPUSH
// if not driver or not IsInUnit ( driver ) then
87795: LD_VAR 0 1
87799: NOT
87800: PUSH
87801: LD_VAR 0 1
87805: PPUSH
87806: CALL_OW 310
87810: NOT
87811: OR
87812: IFFALSE 87816
// exit ;
87814: GO 87906
// vehicle := IsInUnit ( driver ) ;
87816: LD_ADDR_VAR 0 3
87820: PUSH
87821: LD_VAR 0 1
87825: PPUSH
87826: CALL_OW 310
87830: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
87831: LD_VAR 0 1
87835: PPUSH
87836: LD_STRING \
87838: PUSH
87839: LD_INT 0
87841: PUSH
87842: LD_INT 0
87844: PUSH
87845: LD_INT 0
87847: PUSH
87848: LD_INT 0
87850: PUSH
87851: LD_INT 0
87853: PUSH
87854: LD_INT 0
87856: PUSH
87857: EMPTY
87858: LIST
87859: LIST
87860: LIST
87861: LIST
87862: LIST
87863: LIST
87864: LIST
87865: PUSH
87866: LD_STRING E
87868: PUSH
87869: LD_INT 0
87871: PUSH
87872: LD_INT 0
87874: PUSH
87875: LD_VAR 0 3
87879: PUSH
87880: LD_INT 0
87882: PUSH
87883: LD_INT 0
87885: PUSH
87886: LD_INT 0
87888: PUSH
87889: EMPTY
87890: LIST
87891: LIST
87892: LIST
87893: LIST
87894: LIST
87895: LIST
87896: LIST
87897: PUSH
87898: EMPTY
87899: LIST
87900: LIST
87901: PPUSH
87902: CALL_OW 447
// end ;
87906: LD_VAR 0 2
87910: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
87911: LD_INT 0
87913: PPUSH
87914: PPUSH
87915: PPUSH
// tmp := [ ] ;
87916: LD_ADDR_VAR 0 5
87920: PUSH
87921: EMPTY
87922: ST_TO_ADDR
// for i in units do
87923: LD_ADDR_VAR 0 4
87927: PUSH
87928: LD_VAR 0 1
87932: PUSH
87933: FOR_IN
87934: IFFALSE 87972
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
87936: LD_ADDR_VAR 0 5
87940: PUSH
87941: LD_VAR 0 5
87945: PPUSH
87946: LD_VAR 0 5
87950: PUSH
87951: LD_INT 1
87953: PLUS
87954: PPUSH
87955: LD_VAR 0 4
87959: PPUSH
87960: CALL_OW 256
87964: PPUSH
87965: CALL_OW 2
87969: ST_TO_ADDR
87970: GO 87933
87972: POP
87973: POP
// if not tmp then
87974: LD_VAR 0 5
87978: NOT
87979: IFFALSE 87983
// exit ;
87981: GO 88031
// if asc then
87983: LD_VAR 0 2
87987: IFFALSE 88011
// result := SortListByListAsc ( units , tmp ) else
87989: LD_ADDR_VAR 0 3
87993: PUSH
87994: LD_VAR 0 1
87998: PPUSH
87999: LD_VAR 0 5
88003: PPUSH
88004: CALL_OW 76
88008: ST_TO_ADDR
88009: GO 88031
// result := SortListByListDesc ( units , tmp ) ;
88011: LD_ADDR_VAR 0 3
88015: PUSH
88016: LD_VAR 0 1
88020: PPUSH
88021: LD_VAR 0 5
88025: PPUSH
88026: CALL_OW 77
88030: ST_TO_ADDR
// end ;
88031: LD_VAR 0 3
88035: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
88036: LD_INT 0
88038: PPUSH
88039: PPUSH
// task := GetTaskList ( mech ) ;
88040: LD_ADDR_VAR 0 4
88044: PUSH
88045: LD_VAR 0 1
88049: PPUSH
88050: CALL_OW 437
88054: ST_TO_ADDR
// if not task then
88055: LD_VAR 0 4
88059: NOT
88060: IFFALSE 88064
// exit ;
88062: GO 88106
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
88064: LD_ADDR_VAR 0 3
88068: PUSH
88069: LD_VAR 0 4
88073: PUSH
88074: LD_INT 1
88076: ARRAY
88077: PUSH
88078: LD_INT 1
88080: ARRAY
88081: PUSH
88082: LD_STRING r
88084: EQUAL
88085: PUSH
88086: LD_VAR 0 4
88090: PUSH
88091: LD_INT 1
88093: ARRAY
88094: PUSH
88095: LD_INT 4
88097: ARRAY
88098: PUSH
88099: LD_VAR 0 2
88103: EQUAL
88104: AND
88105: ST_TO_ADDR
// end ;
88106: LD_VAR 0 3
88110: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
88111: LD_INT 0
88113: PPUSH
// SetDir ( unit , d ) ;
88114: LD_VAR 0 1
88118: PPUSH
88119: LD_VAR 0 4
88123: PPUSH
88124: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
88128: LD_VAR 0 1
88132: PPUSH
88133: LD_VAR 0 2
88137: PPUSH
88138: LD_VAR 0 3
88142: PPUSH
88143: LD_VAR 0 5
88147: PPUSH
88148: CALL_OW 48
// end ;
88152: LD_VAR 0 6
88156: RET
// export function ToNaturalNumber ( number ) ; begin
88157: LD_INT 0
88159: PPUSH
// result := number div 1 ;
88160: LD_ADDR_VAR 0 2
88164: PUSH
88165: LD_VAR 0 1
88169: PUSH
88170: LD_INT 1
88172: DIV
88173: ST_TO_ADDR
// if number < 0 then
88174: LD_VAR 0 1
88178: PUSH
88179: LD_INT 0
88181: LESS
88182: IFFALSE 88192
// result := 0 ;
88184: LD_ADDR_VAR 0 2
88188: PUSH
88189: LD_INT 0
88191: ST_TO_ADDR
// end ;
88192: LD_VAR 0 2
88196: RET
// export function SortByClass ( units , class ) ; var un ; begin
88197: LD_INT 0
88199: PPUSH
88200: PPUSH
// if not units or not class then
88201: LD_VAR 0 1
88205: NOT
88206: PUSH
88207: LD_VAR 0 2
88211: NOT
88212: OR
88213: IFFALSE 88217
// exit ;
88215: GO 88312
// result := [ ] ;
88217: LD_ADDR_VAR 0 3
88221: PUSH
88222: EMPTY
88223: ST_TO_ADDR
// for un in units do
88224: LD_ADDR_VAR 0 4
88228: PUSH
88229: LD_VAR 0 1
88233: PUSH
88234: FOR_IN
88235: IFFALSE 88310
// if GetClass ( un ) = class then
88237: LD_VAR 0 4
88241: PPUSH
88242: CALL_OW 257
88246: PUSH
88247: LD_VAR 0 2
88251: EQUAL
88252: IFFALSE 88279
// result := Insert ( result , 1 , un ) else
88254: LD_ADDR_VAR 0 3
88258: PUSH
88259: LD_VAR 0 3
88263: PPUSH
88264: LD_INT 1
88266: PPUSH
88267: LD_VAR 0 4
88271: PPUSH
88272: CALL_OW 2
88276: ST_TO_ADDR
88277: GO 88308
// result := Replace ( result , result + 1 , un ) ;
88279: LD_ADDR_VAR 0 3
88283: PUSH
88284: LD_VAR 0 3
88288: PPUSH
88289: LD_VAR 0 3
88293: PUSH
88294: LD_INT 1
88296: PLUS
88297: PPUSH
88298: LD_VAR 0 4
88302: PPUSH
88303: CALL_OW 1
88307: ST_TO_ADDR
88308: GO 88234
88310: POP
88311: POP
// end ;
88312: LD_VAR 0 3
88316: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
88317: LD_INT 0
88319: PPUSH
88320: PPUSH
88321: PPUSH
88322: PPUSH
88323: PPUSH
88324: PPUSH
88325: PPUSH
// result := [ ] ;
88326: LD_ADDR_VAR 0 4
88330: PUSH
88331: EMPTY
88332: ST_TO_ADDR
// if x - r < 0 then
88333: LD_VAR 0 1
88337: PUSH
88338: LD_VAR 0 3
88342: MINUS
88343: PUSH
88344: LD_INT 0
88346: LESS
88347: IFFALSE 88359
// min_x := 0 else
88349: LD_ADDR_VAR 0 8
88353: PUSH
88354: LD_INT 0
88356: ST_TO_ADDR
88357: GO 88375
// min_x := x - r ;
88359: LD_ADDR_VAR 0 8
88363: PUSH
88364: LD_VAR 0 1
88368: PUSH
88369: LD_VAR 0 3
88373: MINUS
88374: ST_TO_ADDR
// if y - r < 0 then
88375: LD_VAR 0 2
88379: PUSH
88380: LD_VAR 0 3
88384: MINUS
88385: PUSH
88386: LD_INT 0
88388: LESS
88389: IFFALSE 88401
// min_y := 0 else
88391: LD_ADDR_VAR 0 7
88395: PUSH
88396: LD_INT 0
88398: ST_TO_ADDR
88399: GO 88417
// min_y := y - r ;
88401: LD_ADDR_VAR 0 7
88405: PUSH
88406: LD_VAR 0 2
88410: PUSH
88411: LD_VAR 0 3
88415: MINUS
88416: ST_TO_ADDR
// max_x := x + r ;
88417: LD_ADDR_VAR 0 9
88421: PUSH
88422: LD_VAR 0 1
88426: PUSH
88427: LD_VAR 0 3
88431: PLUS
88432: ST_TO_ADDR
// max_y := y + r ;
88433: LD_ADDR_VAR 0 10
88437: PUSH
88438: LD_VAR 0 2
88442: PUSH
88443: LD_VAR 0 3
88447: PLUS
88448: ST_TO_ADDR
// for _x = min_x to max_x do
88449: LD_ADDR_VAR 0 5
88453: PUSH
88454: DOUBLE
88455: LD_VAR 0 8
88459: DEC
88460: ST_TO_ADDR
88461: LD_VAR 0 9
88465: PUSH
88466: FOR_TO
88467: IFFALSE 88568
// for _y = min_y to max_y do
88469: LD_ADDR_VAR 0 6
88473: PUSH
88474: DOUBLE
88475: LD_VAR 0 7
88479: DEC
88480: ST_TO_ADDR
88481: LD_VAR 0 10
88485: PUSH
88486: FOR_TO
88487: IFFALSE 88564
// begin if not ValidHex ( _x , _y ) then
88489: LD_VAR 0 5
88493: PPUSH
88494: LD_VAR 0 6
88498: PPUSH
88499: CALL_OW 488
88503: NOT
88504: IFFALSE 88508
// continue ;
88506: GO 88486
// if GetResourceTypeXY ( _x , _y ) then
88508: LD_VAR 0 5
88512: PPUSH
88513: LD_VAR 0 6
88517: PPUSH
88518: CALL_OW 283
88522: IFFALSE 88562
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
88524: LD_ADDR_VAR 0 4
88528: PUSH
88529: LD_VAR 0 4
88533: PPUSH
88534: LD_VAR 0 4
88538: PUSH
88539: LD_INT 1
88541: PLUS
88542: PPUSH
88543: LD_VAR 0 5
88547: PUSH
88548: LD_VAR 0 6
88552: PUSH
88553: EMPTY
88554: LIST
88555: LIST
88556: PPUSH
88557: CALL_OW 1
88561: ST_TO_ADDR
// end ;
88562: GO 88486
88564: POP
88565: POP
88566: GO 88466
88568: POP
88569: POP
// end ;
88570: LD_VAR 0 4
88574: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
88575: LD_INT 0
88577: PPUSH
88578: PPUSH
88579: PPUSH
88580: PPUSH
88581: PPUSH
88582: PPUSH
88583: PPUSH
88584: PPUSH
// if not units then
88585: LD_VAR 0 1
88589: NOT
88590: IFFALSE 88594
// exit ;
88592: GO 89120
// result := UnitFilter ( units , [ f_ok ] ) ;
88594: LD_ADDR_VAR 0 3
88598: PUSH
88599: LD_VAR 0 1
88603: PPUSH
88604: LD_INT 50
88606: PUSH
88607: EMPTY
88608: LIST
88609: PPUSH
88610: CALL_OW 72
88614: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
88615: LD_ADDR_VAR 0 8
88619: PUSH
88620: LD_VAR 0 1
88624: PUSH
88625: LD_INT 1
88627: ARRAY
88628: PPUSH
88629: CALL_OW 255
88633: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
88634: LD_ADDR_VAR 0 10
88638: PUSH
88639: LD_INT 29
88641: PUSH
88642: LD_EXP 74
88646: PUSH
88647: LD_INT 49
88649: PUSH
88650: EMPTY
88651: LIST
88652: LIST
88653: LIST
88654: ST_TO_ADDR
// if not result then
88655: LD_VAR 0 3
88659: NOT
88660: IFFALSE 88664
// exit ;
88662: GO 89120
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
88664: LD_ADDR_VAR 0 5
88668: PUSH
88669: LD_INT 81
88671: PUSH
88672: LD_VAR 0 8
88676: PUSH
88677: EMPTY
88678: LIST
88679: LIST
88680: PPUSH
88681: CALL_OW 69
88685: ST_TO_ADDR
// for i in result do
88686: LD_ADDR_VAR 0 4
88690: PUSH
88691: LD_VAR 0 3
88695: PUSH
88696: FOR_IN
88697: IFFALSE 89118
// begin tag := GetTag ( i ) + 1 ;
88699: LD_ADDR_VAR 0 9
88703: PUSH
88704: LD_VAR 0 4
88708: PPUSH
88709: CALL_OW 110
88713: PUSH
88714: LD_INT 1
88716: PLUS
88717: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
88718: LD_ADDR_VAR 0 7
88722: PUSH
88723: LD_VAR 0 4
88727: PPUSH
88728: CALL_OW 250
88732: PPUSH
88733: LD_VAR 0 4
88737: PPUSH
88738: CALL_OW 251
88742: PPUSH
88743: LD_INT 6
88745: PPUSH
88746: CALL 88317 0 3
88750: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
88751: LD_VAR 0 4
88755: PPUSH
88756: CALL_OW 247
88760: PUSH
88761: LD_INT 2
88763: EQUAL
88764: PUSH
88765: LD_VAR 0 7
88769: AND
88770: PUSH
88771: LD_VAR 0 4
88775: PPUSH
88776: CALL_OW 264
88780: PUSH
88781: LD_VAR 0 10
88785: IN
88786: NOT
88787: AND
88788: IFFALSE 88827
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
88790: LD_VAR 0 4
88794: PPUSH
88795: LD_VAR 0 7
88799: PUSH
88800: LD_INT 1
88802: ARRAY
88803: PUSH
88804: LD_INT 1
88806: ARRAY
88807: PPUSH
88808: LD_VAR 0 7
88812: PUSH
88813: LD_INT 1
88815: ARRAY
88816: PUSH
88817: LD_INT 2
88819: ARRAY
88820: PPUSH
88821: CALL_OW 116
88825: GO 89116
// if path > tag then
88827: LD_VAR 0 2
88831: PUSH
88832: LD_VAR 0 9
88836: GREATER
88837: IFFALSE 89045
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
88839: LD_ADDR_VAR 0 6
88843: PUSH
88844: LD_VAR 0 5
88848: PPUSH
88849: LD_INT 91
88851: PUSH
88852: LD_VAR 0 4
88856: PUSH
88857: LD_INT 8
88859: PUSH
88860: EMPTY
88861: LIST
88862: LIST
88863: LIST
88864: PPUSH
88865: CALL_OW 72
88869: ST_TO_ADDR
// if nearEnemy then
88870: LD_VAR 0 6
88874: IFFALSE 88943
// begin if GetWeapon ( i ) = ru_time_lapser then
88876: LD_VAR 0 4
88880: PPUSH
88881: CALL_OW 264
88885: PUSH
88886: LD_INT 49
88888: EQUAL
88889: IFFALSE 88917
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
88891: LD_VAR 0 4
88895: PPUSH
88896: LD_VAR 0 6
88900: PPUSH
88901: LD_VAR 0 4
88905: PPUSH
88906: CALL_OW 74
88910: PPUSH
88911: CALL_OW 112
88915: GO 88941
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
88917: LD_VAR 0 4
88921: PPUSH
88922: LD_VAR 0 6
88926: PPUSH
88927: LD_VAR 0 4
88931: PPUSH
88932: CALL_OW 74
88936: PPUSH
88937: CALL_OW 115
// end else
88941: GO 89043
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
88943: LD_VAR 0 4
88947: PPUSH
88948: LD_VAR 0 2
88952: PUSH
88953: LD_VAR 0 9
88957: ARRAY
88958: PUSH
88959: LD_INT 1
88961: ARRAY
88962: PPUSH
88963: LD_VAR 0 2
88967: PUSH
88968: LD_VAR 0 9
88972: ARRAY
88973: PUSH
88974: LD_INT 2
88976: ARRAY
88977: PPUSH
88978: CALL_OW 297
88982: PUSH
88983: LD_INT 6
88985: GREATER
88986: IFFALSE 89029
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
88988: LD_VAR 0 4
88992: PPUSH
88993: LD_VAR 0 2
88997: PUSH
88998: LD_VAR 0 9
89002: ARRAY
89003: PUSH
89004: LD_INT 1
89006: ARRAY
89007: PPUSH
89008: LD_VAR 0 2
89012: PUSH
89013: LD_VAR 0 9
89017: ARRAY
89018: PUSH
89019: LD_INT 2
89021: ARRAY
89022: PPUSH
89023: CALL_OW 114
89027: GO 89043
// SetTag ( i , tag ) ;
89029: LD_VAR 0 4
89033: PPUSH
89034: LD_VAR 0 9
89038: PPUSH
89039: CALL_OW 109
// end else
89043: GO 89116
// if enemy then
89045: LD_VAR 0 5
89049: IFFALSE 89116
// begin if GetWeapon ( i ) = ru_time_lapser then
89051: LD_VAR 0 4
89055: PPUSH
89056: CALL_OW 264
89060: PUSH
89061: LD_INT 49
89063: EQUAL
89064: IFFALSE 89092
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
89066: LD_VAR 0 4
89070: PPUSH
89071: LD_VAR 0 5
89075: PPUSH
89076: LD_VAR 0 4
89080: PPUSH
89081: CALL_OW 74
89085: PPUSH
89086: CALL_OW 112
89090: GO 89116
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
89092: LD_VAR 0 4
89096: PPUSH
89097: LD_VAR 0 5
89101: PPUSH
89102: LD_VAR 0 4
89106: PPUSH
89107: CALL_OW 74
89111: PPUSH
89112: CALL_OW 115
// end ; end ;
89116: GO 88696
89118: POP
89119: POP
// end ;
89120: LD_VAR 0 3
89124: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
89125: LD_INT 0
89127: PPUSH
89128: PPUSH
89129: PPUSH
// if not unit or IsInUnit ( unit ) then
89130: LD_VAR 0 1
89134: NOT
89135: PUSH
89136: LD_VAR 0 1
89140: PPUSH
89141: CALL_OW 310
89145: OR
89146: IFFALSE 89150
// exit ;
89148: GO 89241
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
89150: LD_ADDR_VAR 0 4
89154: PUSH
89155: LD_VAR 0 1
89159: PPUSH
89160: CALL_OW 250
89164: PPUSH
89165: LD_VAR 0 2
89169: PPUSH
89170: LD_INT 1
89172: PPUSH
89173: CALL_OW 272
89177: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
89178: LD_ADDR_VAR 0 5
89182: PUSH
89183: LD_VAR 0 1
89187: PPUSH
89188: CALL_OW 251
89192: PPUSH
89193: LD_VAR 0 2
89197: PPUSH
89198: LD_INT 1
89200: PPUSH
89201: CALL_OW 273
89205: ST_TO_ADDR
// if ValidHex ( x , y ) then
89206: LD_VAR 0 4
89210: PPUSH
89211: LD_VAR 0 5
89215: PPUSH
89216: CALL_OW 488
89220: IFFALSE 89241
// ComTurnXY ( unit , x , y ) ;
89222: LD_VAR 0 1
89226: PPUSH
89227: LD_VAR 0 4
89231: PPUSH
89232: LD_VAR 0 5
89236: PPUSH
89237: CALL_OW 118
// end ;
89241: LD_VAR 0 3
89245: RET
// export function SeeUnits ( side , units ) ; var i ; begin
89246: LD_INT 0
89248: PPUSH
89249: PPUSH
// result := false ;
89250: LD_ADDR_VAR 0 3
89254: PUSH
89255: LD_INT 0
89257: ST_TO_ADDR
// if not units then
89258: LD_VAR 0 2
89262: NOT
89263: IFFALSE 89267
// exit ;
89265: GO 89312
// for i in units do
89267: LD_ADDR_VAR 0 4
89271: PUSH
89272: LD_VAR 0 2
89276: PUSH
89277: FOR_IN
89278: IFFALSE 89310
// if See ( side , i ) then
89280: LD_VAR 0 1
89284: PPUSH
89285: LD_VAR 0 4
89289: PPUSH
89290: CALL_OW 292
89294: IFFALSE 89308
// begin result := true ;
89296: LD_ADDR_VAR 0 3
89300: PUSH
89301: LD_INT 1
89303: ST_TO_ADDR
// exit ;
89304: POP
89305: POP
89306: GO 89312
// end ;
89308: GO 89277
89310: POP
89311: POP
// end ;
89312: LD_VAR 0 3
89316: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
89317: LD_INT 0
89319: PPUSH
89320: PPUSH
89321: PPUSH
89322: PPUSH
// if not unit or not points then
89323: LD_VAR 0 1
89327: NOT
89328: PUSH
89329: LD_VAR 0 2
89333: NOT
89334: OR
89335: IFFALSE 89339
// exit ;
89337: GO 89429
// dist := 99999 ;
89339: LD_ADDR_VAR 0 5
89343: PUSH
89344: LD_INT 99999
89346: ST_TO_ADDR
// for i in points do
89347: LD_ADDR_VAR 0 4
89351: PUSH
89352: LD_VAR 0 2
89356: PUSH
89357: FOR_IN
89358: IFFALSE 89427
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
89360: LD_ADDR_VAR 0 6
89364: PUSH
89365: LD_VAR 0 1
89369: PPUSH
89370: LD_VAR 0 4
89374: PUSH
89375: LD_INT 1
89377: ARRAY
89378: PPUSH
89379: LD_VAR 0 4
89383: PUSH
89384: LD_INT 2
89386: ARRAY
89387: PPUSH
89388: CALL_OW 297
89392: ST_TO_ADDR
// if tmpDist < dist then
89393: LD_VAR 0 6
89397: PUSH
89398: LD_VAR 0 5
89402: LESS
89403: IFFALSE 89425
// begin result := i ;
89405: LD_ADDR_VAR 0 3
89409: PUSH
89410: LD_VAR 0 4
89414: ST_TO_ADDR
// dist := tmpDist ;
89415: LD_ADDR_VAR 0 5
89419: PUSH
89420: LD_VAR 0 6
89424: ST_TO_ADDR
// end ; end ;
89425: GO 89357
89427: POP
89428: POP
// end ;
89429: LD_VAR 0 3
89433: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
89434: LD_INT 0
89436: PPUSH
// uc_side := side ;
89437: LD_ADDR_OWVAR 20
89441: PUSH
89442: LD_VAR 0 1
89446: ST_TO_ADDR
// uc_nation := 3 ;
89447: LD_ADDR_OWVAR 21
89451: PUSH
89452: LD_INT 3
89454: ST_TO_ADDR
// vc_chassis := 25 ;
89455: LD_ADDR_OWVAR 37
89459: PUSH
89460: LD_INT 25
89462: ST_TO_ADDR
// vc_engine := engine_siberite ;
89463: LD_ADDR_OWVAR 39
89467: PUSH
89468: LD_INT 3
89470: ST_TO_ADDR
// vc_control := control_computer ;
89471: LD_ADDR_OWVAR 38
89475: PUSH
89476: LD_INT 3
89478: ST_TO_ADDR
// vc_weapon := 59 ;
89479: LD_ADDR_OWVAR 40
89483: PUSH
89484: LD_INT 59
89486: ST_TO_ADDR
// result := CreateVehicle ;
89487: LD_ADDR_VAR 0 5
89491: PUSH
89492: CALL_OW 45
89496: ST_TO_ADDR
// SetDir ( result , d ) ;
89497: LD_VAR 0 5
89501: PPUSH
89502: LD_VAR 0 4
89506: PPUSH
89507: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
89511: LD_VAR 0 5
89515: PPUSH
89516: LD_VAR 0 2
89520: PPUSH
89521: LD_VAR 0 3
89525: PPUSH
89526: LD_INT 0
89528: PPUSH
89529: CALL_OW 48
// end ;
89533: LD_VAR 0 5
89537: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
89538: LD_INT 0
89540: PPUSH
89541: PPUSH
89542: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
89543: LD_ADDR_VAR 0 2
89547: PUSH
89548: LD_INT 0
89550: PUSH
89551: LD_INT 0
89553: PUSH
89554: LD_INT 0
89556: PUSH
89557: LD_INT 0
89559: PUSH
89560: EMPTY
89561: LIST
89562: LIST
89563: LIST
89564: LIST
89565: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
89566: LD_VAR 0 1
89570: NOT
89571: PUSH
89572: LD_VAR 0 1
89576: PPUSH
89577: CALL_OW 264
89581: PUSH
89582: LD_INT 12
89584: PUSH
89585: LD_INT 51
89587: PUSH
89588: LD_INT 32
89590: PUSH
89591: LD_EXP 71
89595: PUSH
89596: EMPTY
89597: LIST
89598: LIST
89599: LIST
89600: LIST
89601: IN
89602: NOT
89603: OR
89604: IFFALSE 89608
// exit ;
89606: GO 89706
// for i := 1 to 3 do
89608: LD_ADDR_VAR 0 3
89612: PUSH
89613: DOUBLE
89614: LD_INT 1
89616: DEC
89617: ST_TO_ADDR
89618: LD_INT 3
89620: PUSH
89621: FOR_TO
89622: IFFALSE 89704
// begin tmp := GetCargo ( cargo , i ) ;
89624: LD_ADDR_VAR 0 4
89628: PUSH
89629: LD_VAR 0 1
89633: PPUSH
89634: LD_VAR 0 3
89638: PPUSH
89639: CALL_OW 289
89643: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
89644: LD_ADDR_VAR 0 2
89648: PUSH
89649: LD_VAR 0 2
89653: PPUSH
89654: LD_VAR 0 3
89658: PPUSH
89659: LD_VAR 0 4
89663: PPUSH
89664: CALL_OW 1
89668: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
89669: LD_ADDR_VAR 0 2
89673: PUSH
89674: LD_VAR 0 2
89678: PPUSH
89679: LD_INT 4
89681: PPUSH
89682: LD_VAR 0 2
89686: PUSH
89687: LD_INT 4
89689: ARRAY
89690: PUSH
89691: LD_VAR 0 4
89695: PLUS
89696: PPUSH
89697: CALL_OW 1
89701: ST_TO_ADDR
// end ;
89702: GO 89621
89704: POP
89705: POP
// end ;
89706: LD_VAR 0 2
89710: RET
// export function Length ( array ) ; begin
89711: LD_INT 0
89713: PPUSH
// result := array + 0 ;
89714: LD_ADDR_VAR 0 2
89718: PUSH
89719: LD_VAR 0 1
89723: PUSH
89724: LD_INT 0
89726: PLUS
89727: ST_TO_ADDR
// end ; end_of_file
89728: LD_VAR 0 2
89732: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
89733: LD_VAR 0 1
89737: PUSH
89738: LD_INT 200
89740: DOUBLE
89741: GREATEREQUAL
89742: IFFALSE 89750
89744: LD_INT 299
89746: DOUBLE
89747: LESSEQUAL
89748: IFTRUE 89752
89750: GO 89784
89752: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
89753: LD_VAR 0 1
89757: PPUSH
89758: LD_VAR 0 2
89762: PPUSH
89763: LD_VAR 0 3
89767: PPUSH
89768: LD_VAR 0 4
89772: PPUSH
89773: LD_VAR 0 5
89777: PPUSH
89778: CALL 44883 0 5
89782: GO 89861
89784: LD_INT 300
89786: DOUBLE
89787: GREATEREQUAL
89788: IFFALSE 89796
89790: LD_INT 399
89792: DOUBLE
89793: LESSEQUAL
89794: IFTRUE 89798
89796: GO 89860
89798: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
89799: LD_VAR 0 1
89803: PPUSH
89804: LD_VAR 0 2
89808: PPUSH
89809: LD_VAR 0 3
89813: PPUSH
89814: LD_VAR 0 4
89818: PPUSH
89819: LD_VAR 0 5
89823: PPUSH
89824: LD_VAR 0 6
89828: PPUSH
89829: LD_VAR 0 7
89833: PPUSH
89834: LD_VAR 0 8
89838: PPUSH
89839: LD_VAR 0 9
89843: PPUSH
89844: LD_VAR 0 10
89848: PPUSH
89849: LD_VAR 0 11
89853: PPUSH
89854: CALL 42525 0 11
89858: GO 89861
89860: POP
// end ;
89861: PPOPN 11
89863: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
89864: LD_VAR 0 1
89868: PPUSH
89869: LD_VAR 0 2
89873: PPUSH
89874: LD_VAR 0 3
89878: PPUSH
89879: LD_VAR 0 4
89883: PPUSH
89884: LD_VAR 0 5
89888: PPUSH
89889: CALL 44619 0 5
// end ; end_of_file
89893: PPOPN 5
89895: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
89896: LD_VAR 0 1
89900: PPUSH
89901: LD_VAR 0 2
89905: PPUSH
89906: LD_VAR 0 3
89910: PPUSH
89911: LD_VAR 0 4
89915: PPUSH
89916: LD_VAR 0 5
89920: PPUSH
89921: LD_VAR 0 6
89925: PPUSH
89926: CALL 30218 0 6
// end ;
89930: PPOPN 6
89932: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
89933: LD_INT 0
89935: PPUSH
// begin if not units then
89936: LD_VAR 0 1
89940: NOT
89941: IFFALSE 89945
// exit ;
89943: GO 90033
// if p1 = 1 then
89945: LD_VAR 0 2
89949: PUSH
89950: LD_INT 1
89952: EQUAL
89953: IFFALSE 90033
// begin if p2 = 1 then
89955: LD_VAR 0 3
89959: PUSH
89960: LD_INT 1
89962: EQUAL
89963: IFFALSE 89994
// begin for i in units do
89965: LD_ADDR_VAR 0 7
89969: PUSH
89970: LD_VAR 0 1
89974: PUSH
89975: FOR_IN
89976: IFFALSE 89992
// begin SetUnitAttackType ( i , 3 ) ;
89978: LD_VAR 0 7
89982: PPUSH
89983: LD_INT 3
89985: PPUSH
89986: CALL_OW 603
// end ;
89990: GO 89975
89992: POP
89993: POP
// end ; if p2 = 2 then
89994: LD_VAR 0 3
89998: PUSH
89999: LD_INT 2
90001: EQUAL
90002: IFFALSE 90033
// begin for i in units do
90004: LD_ADDR_VAR 0 7
90008: PUSH
90009: LD_VAR 0 1
90013: PUSH
90014: FOR_IN
90015: IFFALSE 90031
// begin SetUnitAttackType ( i , 1 ) ;
90017: LD_VAR 0 7
90021: PPUSH
90022: LD_INT 1
90024: PPUSH
90025: CALL_OW 603
// end ;
90029: GO 90014
90031: POP
90032: POP
// end ; end ; end ;
90033: PPOPN 7
90035: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
90036: CALL 30193 0 0
// end ;
90040: PPOPN 1
90042: END
