// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 3 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 3
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3425 0 0
// PrepareAmerican ;
  37: CALL 1057 0 0
// PrepareRussian ;
  41: CALL 8776 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 91289 0 9
// Action ;
  97: CALL 25531 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: IFFALSE 372
 365: PUSH
 366: LD_EXP 4
 370: NOT
 371: AND
 372: IFFALSE 380
 374: PUSH
 375: LD_EXP 19
 379: AND
 380: IFFALSE 402
 382: PUSH
 383: LD_INT 22
 385: PUSH
 386: LD_INT 3
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PPUSH
 393: CALL_OW 69
 397: PUSH
 398: LD_INT 0
 400: EQUAL
 401: AND
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_POWER ) ;
 407: LD_STRING ACH_POWER
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 415: LD_EXP 19
 419: IFFALSE 428
 421: PUSH
 422: LD_EXP 68
 426: NOT
 427: AND
 428: IFFALSE 437
 430: PUSH
 431: LD_EXP 69
 435: NOT
 436: AND
 437: IFFALSE 459
 439: PUSH
 440: LD_INT 22
 442: PUSH
 443: LD_INT 3
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 0
 457: EQUAL
 458: AND
 459: IFFALSE 471
 461: GO 463
 463: DISABLE
// SetAchievement ( ACH_TACT ) ;
 464: LD_STRING ACH_TACT
 466: PPUSH
 467: CALL_OW 543
 471: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 472: LD_INT 22
 474: PUSH
 475: LD_INT 1
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: LD_INT 30
 484: PUSH
 485: LD_INT 1
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PPUSH
 496: CALL_OW 69
 500: IFFALSE 532
 502: PUSH
 503: LD_INT 22
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 30
 515: PUSH
 516: LD_INT 32
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: PPUSH
 527: CALL_OW 69
 531: AND
 532: IFFALSE 564
 534: PUSH
 535: LD_INT 22
 537: PUSH
 538: LD_INT 1
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 33
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PPUSH
 559: CALL_OW 69
 563: AND
 564: IFFALSE 596
 566: PUSH
 567: LD_INT 22
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 30
 579: PUSH
 580: LD_INT 5
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PPUSH
 591: CALL_OW 69
 595: AND
 596: IFFALSE 628
 598: PUSH
 599: LD_INT 22
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 30
 611: PUSH
 612: LD_INT 3
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: PPUSH
 623: CALL_OW 69
 627: AND
 628: IFFALSE 660
 630: PUSH
 631: LD_INT 22
 633: PUSH
 634: LD_INT 1
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 30
 643: PUSH
 644: LD_INT 36
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PPUSH
 655: CALL_OW 69
 659: AND
 660: IFFALSE 692
 662: PUSH
 663: LD_INT 22
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 31
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PPUSH
 687: CALL_OW 69
 691: AND
 692: IFFALSE 724
 694: PUSH
 695: LD_INT 22
 697: PUSH
 698: LD_INT 1
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PUSH
 705: LD_INT 30
 707: PUSH
 708: LD_INT 22
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PPUSH
 719: CALL_OW 69
 723: AND
 724: IFFALSE 756
 726: PUSH
 727: LD_INT 22
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 20
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PPUSH
 751: CALL_OW 69
 755: AND
 756: IFFALSE 788
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 19
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: IFFALSE 820
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 30
 803: PUSH
 804: LD_INT 16
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PPUSH
 815: CALL_OW 69
 819: AND
 820: IFFALSE 852
 822: PUSH
 823: LD_INT 22
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 30
 835: PUSH
 836: LD_INT 17
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PPUSH
 847: CALL_OW 69
 851: AND
 852: IFFALSE 884
 854: PUSH
 855: LD_INT 22
 857: PUSH
 858: LD_INT 1
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 30
 867: PUSH
 868: LD_INT 21
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PPUSH
 879: CALL_OW 69
 883: AND
 884: IFFALSE 916
 886: PUSH
 887: LD_INT 22
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: EMPTY
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 30
 899: PUSH
 900: LD_INT 29
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PPUSH
 911: CALL_OW 69
 915: AND
 916: IFFALSE 948
 918: PUSH
 919: LD_INT 22
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 30
 931: PUSH
 932: LD_INT 30
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PPUSH
 943: CALL_OW 69
 947: AND
 948: IFFALSE 980
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 1
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 30
 963: PUSH
 964: LD_INT 27
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 69
 979: AND
 980: IFFALSE 1012
 982: PUSH
 983: LD_INT 22
 985: PUSH
 986: LD_INT 1
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 30
 995: PUSH
 996: LD_INT 26
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PPUSH
1007: CALL_OW 69
1011: AND
1012: IFFALSE 1044
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 30
1027: PUSH
1028: LD_INT 28
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: AND
1044: IFFALSE 1056
1046: GO 1048
1048: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1049: LD_STRING ACH_ARCH
1051: PPUSH
1052: CALL_OW 543
1056: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1057: LD_INT 0
1059: PPUSH
1060: PPUSH
1061: PPUSH
1062: PPUSH
1063: PPUSH
1064: PPUSH
1065: PPUSH
1066: PPUSH
// uc_nation := nation_american ;
1067: LD_ADDR_OWVAR 21
1071: PUSH
1072: LD_INT 1
1074: ST_TO_ADDR
// uc_side := 4 ;
1075: LD_ADDR_OWVAR 20
1079: PUSH
1080: LD_INT 4
1082: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1083: LD_ADDR_EXP 44
1087: PUSH
1088: LD_STRING Powell
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: LD_STRING 
1096: PPUSH
1097: CALL 56482 0 3
1101: ST_TO_ADDR
// uc_side := 1 ;
1102: LD_ADDR_OWVAR 20
1106: PUSH
1107: LD_INT 1
1109: ST_TO_ADDR
// JMMSquad := [ ] ;
1110: LD_ADDR_EXP 45
1114: PUSH
1115: EMPTY
1116: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1117: LD_ADDR_EXP 23
1121: PUSH
1122: LD_STRING JMM
1124: PPUSH
1125: LD_EXP 1
1129: NOT
1130: PPUSH
1131: LD_STRING 10_
1133: PPUSH
1134: CALL 56482 0 3
1138: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1139: LD_ADDR_EXP 32
1143: PUSH
1144: LD_STRING Gary
1146: PPUSH
1147: LD_EXP 1
1151: NOT
1152: PPUSH
1153: LD_STRING 10_
1155: PPUSH
1156: CALL 56482 0 3
1160: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1161: LD_ADDR_EXP 27
1165: PUSH
1166: LD_STRING Cyrus
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 10_
1177: PPUSH
1178: CALL 56482 0 3
1182: ST_TO_ADDR
// if Cyrus then
1183: LD_EXP 27
1187: IFFALSE 1205
// JMMSquad := JMMSquad ^ Cyrus ;
1189: LD_ADDR_EXP 45
1193: PUSH
1194: LD_EXP 45
1198: PUSH
1199: LD_EXP 27
1203: ADD
1204: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1205: LD_ADDR_EXP 26
1209: PUSH
1210: LD_STRING Bobby
1212: PPUSH
1213: LD_EXP 1
1217: NOT
1218: PPUSH
1219: LD_STRING 10_
1221: PPUSH
1222: CALL 56482 0 3
1226: ST_TO_ADDR
// if Bobby then
1227: LD_EXP 26
1231: IFFALSE 1249
// JMMSquad := JMMSquad ^ Bobby ;
1233: LD_ADDR_EXP 45
1237: PUSH
1238: LD_EXP 45
1242: PUSH
1243: LD_EXP 26
1247: ADD
1248: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1249: LD_ADDR_EXP 28
1253: PUSH
1254: LD_STRING Lisa
1256: PPUSH
1257: LD_EXP 1
1261: NOT
1262: PPUSH
1263: LD_STRING 10_
1265: PPUSH
1266: CALL 56482 0 3
1270: ST_TO_ADDR
// if Lisa then
1271: LD_EXP 28
1275: IFFALSE 1293
// JMMSquad := JMMSquad ^ Lisa ;
1277: LD_ADDR_EXP 45
1281: PUSH
1282: LD_EXP 45
1286: PUSH
1287: LD_EXP 28
1291: ADD
1292: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1293: LD_ADDR_EXP 24
1297: PUSH
1298: LD_STRING Brown
1300: PPUSH
1301: LD_EXP 1
1305: NOT
1306: PPUSH
1307: LD_STRING 10_
1309: PPUSH
1310: CALL 56482 0 3
1314: ST_TO_ADDR
// if Brown then
1315: LD_EXP 24
1319: IFFALSE 1337
// JMMSquad := JMMSquad ^ Brown ;
1321: LD_ADDR_EXP 45
1325: PUSH
1326: LD_EXP 45
1330: PUSH
1331: LD_EXP 24
1335: ADD
1336: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1337: LD_ADDR_EXP 25
1341: PUSH
1342: LD_STRING Donaldson
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_STRING 10_
1353: PPUSH
1354: CALL 56482 0 3
1358: ST_TO_ADDR
// if Donaldson then
1359: LD_EXP 25
1363: IFFALSE 1381
// JMMSquad := JMMSquad ^ Donaldson ;
1365: LD_ADDR_EXP 45
1369: PUSH
1370: LD_EXP 45
1374: PUSH
1375: LD_EXP 25
1379: ADD
1380: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1381: LD_ADDR_EXP 29
1385: PUSH
1386: LD_STRING Frank
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_STRING 10_
1397: PPUSH
1398: CALL 56482 0 3
1402: ST_TO_ADDR
// if Frank then
1403: LD_EXP 29
1407: IFFALSE 1425
// JMMSquad := JMMSquad ^ Frank ;
1409: LD_ADDR_EXP 45
1413: PUSH
1414: LD_EXP 45
1418: PUSH
1419: LD_EXP 29
1423: ADD
1424: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1425: LD_ADDR_EXP 31
1429: PUSH
1430: LD_STRING Houten
1432: PPUSH
1433: LD_EXP 1
1437: NOT
1438: PPUSH
1439: LD_STRING 10_
1441: PPUSH
1442: CALL 56482 0 3
1446: ST_TO_ADDR
// if Houten then
1447: LD_EXP 31
1451: IFFALSE 1469
// JMMSquad := JMMSquad ^ Houten ;
1453: LD_ADDR_EXP 45
1457: PUSH
1458: LD_EXP 45
1462: PUSH
1463: LD_EXP 31
1467: ADD
1468: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1469: LD_ADDR_EXP 46
1473: PUSH
1474: LD_STRING OthersIn10
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1482: LD_EXP 45
1486: PPUSH
1487: CALL 58706 0 1
1491: PUSH
1492: LD_EXP 46
1496: PPUSH
1497: CALL 58706 0 1
1501: PLUS
1502: PUSH
1503: LD_INT 9
1505: LESS
1506: IFFALSE 1593
// begin InitHC_All ( ) ;
1508: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1512: LD_ADDR_VAR 0 2
1516: PUSH
1517: DOUBLE
1518: LD_INT 9
1520: INC
1521: ST_TO_ADDR
1522: LD_EXP 45
1526: PPUSH
1527: CALL 58706 0 1
1531: PUSH
1532: LD_EXP 46
1536: PPUSH
1537: CALL 58706 0 1
1541: PLUS
1542: PUSH
1543: FOR_DOWNTO
1544: IFFALSE 1591
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1546: LD_INT 0
1548: PPUSH
1549: LD_VAR 0 2
1553: PUSH
1554: LD_INT 4
1556: MOD
1557: PUSH
1558: LD_INT 1
1560: PLUS
1561: PPUSH
1562: LD_INT 5
1564: PPUSH
1565: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1569: LD_ADDR_EXP 46
1573: PUSH
1574: LD_EXP 46
1578: PPUSH
1579: CALL_OW 44
1583: PPUSH
1584: CALL 94638 0 2
1588: ST_TO_ADDR
// end ;
1589: GO 1543
1591: POP
1592: POP
// end ; if debug then
1593: LD_EXP 1
1597: IFFALSE 1638
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1599: LD_ADDR_VAR 0 1
1603: PUSH
1604: LD_EXP 27
1608: PUSH
1609: LD_EXP 26
1613: PUSH
1614: LD_EXP 28
1618: PUSH
1619: LD_EXP 25
1623: PUSH
1624: LD_EXP 24
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: ST_TO_ADDR
1636: GO 1801
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1638: LD_ADDR_VAR 0 1
1642: PUSH
1643: LD_STRING 1
1645: PPUSH
1646: LD_INT 6
1648: PUSH
1649: LD_INT 5
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: LD_INT 4
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_OWVAR 67
1668: ARRAY
1669: PPUSH
1670: LD_INT 6
1672: PUSH
1673: LD_INT 5
1675: PUSH
1676: LD_INT 4
1678: PUSH
1679: LD_INT 4
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: PUSH
1688: LD_OWVAR 67
1692: ARRAY
1693: PPUSH
1694: LD_INT -4
1696: PUSH
1697: LD_INT -1
1699: PUSH
1700: LD_INT -5
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: LD_EXP 23
1712: ADD
1713: PUSH
1714: LD_EXP 32
1718: ADD
1719: PUSH
1720: LD_INT -2
1722: PUSH
1723: LD_INT -3
1725: PUSH
1726: LD_INT -5
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: ADD
1734: PUSH
1735: LD_EXP 45
1739: ADD
1740: PUSH
1741: LD_EXP 46
1745: ADD
1746: PUSH
1747: LD_INT -4
1749: PUSH
1750: LD_INT -2
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: ADD
1757: PUSH
1758: LD_EXP 44
1762: ADD
1763: PPUSH
1764: LD_INT 1
1766: PUSH
1767: LD_INT 3
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 2
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: PPUSH
1796: CALL_OW 42
1800: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1801: LD_ADDR_VAR 0 1
1805: PUSH
1806: LD_VAR 0 1
1810: PPUSH
1811: LD_EXP 23
1815: PPUSH
1816: CALL 94675 0 2
1820: ST_TO_ADDR
// if Gary then
1821: LD_EXP 32
1825: IFFALSE 1847
// result := JoinUnion ( result , Gary ) ;
1827: LD_ADDR_VAR 0 1
1831: PUSH
1832: LD_VAR 0 1
1836: PPUSH
1837: LD_EXP 32
1841: PPUSH
1842: CALL 94675 0 2
1846: ST_TO_ADDR
// if Count ( others ) then
1847: LD_EXP 46
1851: PPUSH
1852: CALL 58706 0 1
1856: IFFALSE 1874
// others := others diff result ;
1858: LD_ADDR_EXP 46
1862: PUSH
1863: LD_EXP 46
1867: PUSH
1868: LD_VAR 0 1
1872: DIFF
1873: ST_TO_ADDR
// vehs := [ ] ;
1874: LD_ADDR_VAR 0 5
1878: PUSH
1879: EMPTY
1880: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1881: LD_INT 2
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: LD_INT 12
1892: PPUSH
1893: LD_INT 50
1895: PPUSH
1896: CALL 61468 0 5
// veh := CreateVehicle ;
1900: LD_ADDR_VAR 0 4
1904: PUSH
1905: CALL_OW 45
1909: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1910: LD_ADDR_VAR 0 5
1914: PUSH
1915: LD_VAR 0 5
1919: PPUSH
1920: LD_VAR 0 4
1924: PPUSH
1925: CALL 94638 0 2
1929: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1930: LD_VAR 0 4
1934: PPUSH
1935: LD_INT 1
1937: PPUSH
1938: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1942: LD_ADDR_VAR 0 6
1946: PUSH
1947: LD_STRING 09_sibRes
1949: PPUSH
1950: LD_INT 100
1952: PPUSH
1953: CALL_OW 30
1957: PUSH
1958: LD_INT 20
1960: MINUS
1961: ST_TO_ADDR
// if sibRes >= 100 then
1962: LD_VAR 0 6
1966: PUSH
1967: LD_INT 100
1969: GREATEREQUAL
1970: IFFALSE 1989
// SetCargo ( veh , mat_siberit , 100 ) else
1972: LD_VAR 0 4
1976: PPUSH
1977: LD_INT 3
1979: PPUSH
1980: LD_INT 100
1982: PPUSH
1983: CALL_OW 290
1987: GO 2006
// SetCargo ( veh , mat_siberit , sibRes ) ;
1989: LD_VAR 0 4
1993: PPUSH
1994: LD_INT 3
1996: PPUSH
1997: LD_VAR 0 6
2001: PPUSH
2002: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_INT 12
2017: PPUSH
2018: LD_INT 50
2020: PPUSH
2021: CALL 61468 0 5
// veh := CreateVehicle ;
2025: LD_ADDR_VAR 0 4
2029: PUSH
2030: CALL_OW 45
2034: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2035: LD_ADDR_VAR 0 5
2039: PUSH
2040: LD_VAR 0 5
2044: PPUSH
2045: LD_VAR 0 4
2049: PPUSH
2050: CALL 94638 0 2
2054: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2055: LD_VAR 0 4
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2067: LD_VAR 0 4
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: LD_INT 100
2077: PPUSH
2078: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: DOUBLE
2088: LD_INT 1
2090: DEC
2091: ST_TO_ADDR
2092: LD_VAR 0 1
2096: PPUSH
2097: CALL 58706 0 1
2101: PUSH
2102: LD_INT 2
2104: MINUS
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2213
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 3
2120: PUSH
2121: LD_INT 4
2123: PUSH
2124: LD_INT 5
2126: PUSH
2127: LD_INT 11
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 5
2147: MOD
2148: PUSH
2149: LD_INT 1
2151: PLUS
2152: ARRAY
2153: PPUSH
2154: LD_INT 45
2156: PPUSH
2157: LD_INT 55
2159: PPUSH
2160: CALL_OW 12
2164: PPUSH
2165: CALL 61468 0 5
// veh := CreateVehicle ;
2169: LD_ADDR_VAR 0 4
2173: PUSH
2174: CALL_OW 45
2178: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2179: LD_ADDR_VAR 0 5
2183: PUSH
2184: LD_VAR 0 5
2188: PPUSH
2189: LD_VAR 0 4
2193: PPUSH
2194: CALL 94638 0 2
2198: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2199: LD_VAR 0 4
2203: PPUSH
2204: LD_INT 1
2206: PPUSH
2207: CALL_OW 233
// end ;
2211: GO 2106
2213: POP
2214: POP
// for i in vehs do
2215: LD_ADDR_VAR 0 2
2219: PUSH
2220: LD_VAR 0 5
2224: PUSH
2225: FOR_IN
2226: IFFALSE 2281
// begin PlaceUnitArea ( i , startArea , false ) ;
2228: LD_VAR 0 2
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2243: LD_VAR 0 1
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PPUSH
2252: LD_VAR 0 2
2256: PPUSH
2257: CALL_OW 52
// result := Delete ( result , 1 ) ;
2261: LD_ADDR_VAR 0 1
2265: PUSH
2266: LD_VAR 0 1
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: CALL_OW 3
2278: ST_TO_ADDR
// end ;
2279: GO 2225
2281: POP
2282: POP
// uc_side := 4 ;
2283: LD_ADDR_OWVAR 20
2287: PUSH
2288: LD_INT 4
2290: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2291: LD_STRING 08_SikorskiStatus
2293: PPUSH
2294: LD_EXP 1
2298: PPUSH
2299: CALL_OW 30
2303: IFFALSE 2324
// Truman := PrepareUnit ( Truman , false ,  ) ;
2305: LD_ADDR_EXP 43
2309: PUSH
2310: LD_STRING Truman
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: LD_STRING 
2318: PPUSH
2319: CALL 56482 0 3
2323: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2324: LD_ADDR_EXP 33
2328: PUSH
2329: LD_STRING Simms
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: LD_STRING 
2337: PPUSH
2338: CALL 56482 0 3
2342: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2343: LD_ADDR_EXP 34
2347: PUSH
2348: LD_STRING Denis
2350: PPUSH
2351: LD_EXP 1
2355: NOT
2356: PPUSH
2357: LD_STRING 08_
2359: PPUSH
2360: CALL 56482 0 3
2364: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2365: LD_ADDR_EXP 35
2369: PUSH
2370: LD_STRING Joan
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 08_
2381: PPUSH
2382: CALL 56482 0 3
2386: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2387: LD_ADDR_EXP 41
2391: PUSH
2392: LD_STRING Mike
2394: PPUSH
2395: LD_EXP 1
2399: NOT
2400: PPUSH
2401: LD_STRING 08_
2403: PPUSH
2404: CALL 56482 0 3
2408: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2409: LD_STRING 08_Khatam
2411: PPUSH
2412: CALL_OW 28
2416: IFFALSE 2439
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2418: LD_ADDR_EXP 36
2422: PUSH
2423: LD_STRING Khatam
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: LD_STRING 08_
2431: PPUSH
2432: CALL 56482 0 3
2436: ST_TO_ADDR
2437: GO 2467
// if TestCharacters ( 03_Khatam ) then
2439: LD_STRING 03_Khatam
2441: PPUSH
2442: CALL_OW 28
2446: IFFALSE 2467
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2448: LD_ADDR_EXP 36
2452: PUSH
2453: LD_STRING Khatam
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: LD_STRING 03_
2461: PPUSH
2462: CALL 56482 0 3
2466: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2467: LD_ADDR_EXP 37
2471: PUSH
2472: LD_STRING Gladstone
2474: PPUSH
2475: LD_EXP 1
2479: NOT
2480: PPUSH
2481: LD_STRING 08_
2483: PPUSH
2484: CALL 56482 0 3
2488: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2489: LD_ADDR_EXP 39
2493: PUSH
2494: LD_STRING DeltaDoctor
2496: PPUSH
2497: LD_EXP 1
2501: NOT
2502: PPUSH
2503: LD_STRING 
2505: PPUSH
2506: CALL 56482 0 3
2510: ST_TO_ADDR
// if Frank then
2511: LD_EXP 29
2515: IFFALSE 2538
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2517: LD_ADDR_EXP 30
2521: PUSH
2522: LD_STRING Yamoko
2524: PPUSH
2525: LD_INT 0
2527: PPUSH
2528: LD_STRING 
2530: PPUSH
2531: CALL 56482 0 3
2535: ST_TO_ADDR
2536: GO 2560
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2538: LD_ADDR_EXP 30
2542: PUSH
2543: LD_STRING Kikuchi
2545: PPUSH
2546: LD_EXP 1
2550: NOT
2551: PPUSH
2552: LD_STRING 08_
2554: PPUSH
2555: CALL 56482 0 3
2559: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2560: LD_ADDR_EXP 47
2564: PUSH
2565: LD_STRING 09_others
2567: PPUSH
2568: CALL_OW 31
2572: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2573: LD_ADDR_EXP 48
2577: PUSH
2578: LD_STRING 09_apes
2580: PPUSH
2581: CALL_OW 31
2585: ST_TO_ADDR
// if Truman then
2586: LD_EXP 43
2590: IFFALSE 2607
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2592: LD_EXP 43
2596: PPUSH
2597: LD_INT 4
2599: PPUSH
2600: LD_INT 0
2602: PPUSH
2603: CALL_OW 49
// if Mike then
2607: LD_EXP 41
2611: IFFALSE 2628
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2613: LD_EXP 41
2617: PPUSH
2618: LD_INT 4
2620: PPUSH
2621: LD_INT 0
2623: PPUSH
2624: CALL_OW 49
// if Simms then
2628: LD_EXP 33
2632: IFFALSE 2649
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2634: LD_EXP 33
2638: PPUSH
2639: LD_INT 4
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: CALL_OW 49
// if Denis then
2649: LD_EXP 34
2653: IFFALSE 2670
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2655: LD_EXP 34
2659: PPUSH
2660: LD_INT 4
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL_OW 49
// if Joan then
2670: LD_EXP 35
2674: IFFALSE 2691
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2676: LD_EXP 35
2680: PPUSH
2681: LD_INT 4
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// if Khatam then
2691: LD_EXP 36
2695: IFFALSE 2712
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2697: LD_EXP 36
2701: PPUSH
2702: LD_INT 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// if Gladstone then
2712: LD_EXP 37
2716: IFFALSE 2733
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2718: LD_EXP 37
2722: PPUSH
2723: LD_INT 4
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// if DeltaDoctor then
2733: LD_EXP 39
2737: IFFALSE 2754
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2739: LD_EXP 39
2743: PPUSH
2744: LD_INT 4
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// if Kikuchi then
2754: LD_EXP 30
2758: IFFALSE 2775
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2760: LD_EXP 30
2764: PPUSH
2765: LD_INT 4
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2775: LD_EXP 33
2779: PUSH
2780: LD_EXP 36
2784: PUSH
2785: LD_EXP 34
2789: PUSH
2790: LD_EXP 37
2794: PUSH
2795: LD_EXP 39
2799: PUSH
2800: LD_EXP 35
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: PPUSH
2813: LD_INT 4
2815: PPUSH
2816: CALL_OW 336
// amount := Count ( others09 ) ;
2820: LD_ADDR_VAR 0 8
2824: PUSH
2825: LD_EXP 47
2829: PPUSH
2830: CALL 58706 0 1
2834: ST_TO_ADDR
// if amount then
2835: LD_VAR 0 8
2839: IFFALSE 2987
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2841: LD_VAR 0 8
2845: PUSH
2846: LD_INT 6
2848: PUSH
2849: LD_INT 5
2851: PUSH
2852: LD_INT 4
2854: PUSH
2855: LD_INT 4
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_OWVAR 67
2868: ARRAY
2869: GREATER
2870: IFFALSE 2901
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2872: LD_ADDR_VAR 0 8
2876: PUSH
2877: LD_INT 6
2879: PUSH
2880: LD_INT 5
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: LD_INT 4
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: PUSH
2895: LD_OWVAR 67
2899: ARRAY
2900: ST_TO_ADDR
// for i := 1 to amount do
2901: LD_ADDR_VAR 0 2
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_VAR 0 8
2915: PUSH
2916: FOR_TO
2917: IFFALSE 2958
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2919: LD_EXP 47
2923: PUSH
2924: LD_INT 1
2926: ARRAY
2927: PPUSH
2928: LD_INT 4
2930: PPUSH
2931: LD_INT 0
2933: PPUSH
2934: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2938: LD_ADDR_EXP 47
2942: PUSH
2943: LD_EXP 47
2947: PPUSH
2948: LD_INT 1
2950: PPUSH
2951: CALL_OW 3
2955: ST_TO_ADDR
// end ;
2956: GO 2916
2958: POP
2959: POP
// if Count ( others09 ) then
2960: LD_EXP 47
2964: PPUSH
2965: CALL 58706 0 1
2969: IFFALSE 2987
// others := others union others09 ;
2971: LD_ADDR_EXP 46
2975: PUSH
2976: LD_EXP 46
2980: PUSH
2981: LD_EXP 47
2985: UNION
2986: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2987: LD_INT 22
2989: PUSH
2990: LD_INT 4
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 50
2999: PUSH
3000: EMPTY
3001: LIST
3002: PUSH
3003: LD_INT 25
3005: PUSH
3006: LD_INT 2
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 69
3022: PUSH
3023: LD_INT 0
3025: EQUAL
3026: IFFALSE 3165
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3028: LD_ADDR_VAR 0 7
3032: PUSH
3033: LD_INT 22
3035: PUSH
3036: LD_INT 4
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: LD_INT 50
3045: PUSH
3046: EMPTY
3047: LIST
3048: PUSH
3049: LD_INT 25
3051: PUSH
3052: LD_INT 2
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PUSH
3069: LD_EXP 33
3073: PUSH
3074: LD_EXP 36
3078: PUSH
3079: LD_EXP 34
3083: PUSH
3084: LD_EXP 37
3088: PUSH
3089: LD_EXP 39
3093: PUSH
3094: LD_EXP 35
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: DIFF
3107: ST_TO_ADDR
// if not tmp then
3108: LD_VAR 0 7
3112: NOT
3113: IFFALSE 3149
// begin if Denis then
3115: LD_EXP 34
3119: IFFALSE 3135
// SetClass ( Denis , class_engineer ) else
3121: LD_EXP 34
3125: PPUSH
3126: LD_INT 2
3128: PPUSH
3129: CALL_OW 336
3133: GO 3147
// SetClass ( DeltaDoctor , class_engineer ) ;
3135: LD_EXP 39
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: CALL_OW 336
// end else
3147: GO 3165
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3149: LD_VAR 0 7
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: LD_INT 2
3160: PPUSH
3161: CALL_OW 336
// end ; for i in ape09 do
3165: LD_ADDR_VAR 0 2
3169: PUSH
3170: LD_EXP 48
3174: PUSH
3175: FOR_IN
3176: IFFALSE 3195
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3178: LD_VAR 0 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL_OW 49
3193: GO 3175
3195: POP
3196: POP
// PrepareSoldier ( sex_female , 6 ) ;
3197: LD_INT 2
3199: PPUSH
3200: LD_INT 6
3202: PPUSH
3203: CALL_OW 381
// AmScout := CreateHuman ;
3207: LD_ADDR_EXP 40
3211: PUSH
3212: CALL_OW 44
3216: ST_TO_ADDR
// end ;
3217: LD_VAR 0 1
3221: RET
// export function PrepareCornell ; begin
3222: LD_INT 0
3224: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3225: LD_INT 4
3227: PPUSH
3228: LD_INT 4
3230: PPUSH
3231: CALL_OW 343
// uc_side := 4 ;
3235: LD_ADDR_OWVAR 20
3239: PUSH
3240: LD_INT 4
3242: ST_TO_ADDR
// uc_nation := nation_american ;
3243: LD_ADDR_OWVAR 21
3247: PUSH
3248: LD_INT 1
3250: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3251: LD_ADDR_EXP 42
3255: PUSH
3256: LD_STRING Cornel
3258: PPUSH
3259: LD_EXP 1
3263: NOT
3264: PPUSH
3265: LD_STRING 03_
3267: PPUSH
3268: CALL 56482 0 3
3272: ST_TO_ADDR
// if not Cornell then
3273: LD_EXP 42
3277: NOT
3278: IFFALSE 3282
// exit ;
3280: GO 3420
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3282: LD_EXP 42
3286: PPUSH
3287: LD_INT 12
3289: PPUSH
3290: LD_INT 0
3292: PPUSH
3293: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3297: LD_EXP 42
3301: PPUSH
3302: LD_INT 350
3304: PPUSH
3305: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3309: LD_EXP 42
3313: PPUSH
3314: LD_INT 125
3316: PPUSH
3317: LD_INT 17
3319: PPUSH
3320: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3324: LD_EXP 42
3328: PPUSH
3329: LD_INT 112
3331: PPUSH
3332: LD_INT 19
3334: PPUSH
3335: CALL_OW 171
// if IsInUnit ( JMM ) then
3339: LD_EXP 23
3343: PPUSH
3344: CALL_OW 310
3348: IFFALSE 3391
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3350: LD_EXP 42
3354: PPUSH
3355: LD_EXP 23
3359: PPUSH
3360: CALL_OW 310
3364: PPUSH
3365: CALL_OW 250
3369: PPUSH
3370: LD_EXP 23
3374: PPUSH
3375: CALL_OW 310
3379: PPUSH
3380: CALL_OW 251
3384: PPUSH
3385: CALL_OW 171
3389: GO 3420
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3391: LD_EXP 42
3395: PPUSH
3396: LD_EXP 23
3400: PPUSH
3401: CALL_OW 250
3405: PPUSH
3406: LD_EXP 23
3410: PPUSH
3411: CALL_OW 251
3415: PPUSH
3416: CALL_OW 171
// end ; end_of_file
3420: LD_VAR 0 1
3424: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3425: LD_INT 0
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// uc_side := 2 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 2
3440: ST_TO_ADDR
// uc_nation := nation_arabian ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 2
3448: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3449: LD_ADDR_VAR 0 6
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: LD_INT 5
3459: PUSH
3460: LD_INT 6
3462: PUSH
3463: LD_INT 7
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: PUSH
3472: LD_OWVAR 67
3476: ARRAY
3477: ST_TO_ADDR
// arForces := [ ] ;
3478: LD_ADDR_EXP 49
3482: PUSH
3483: EMPTY
3484: ST_TO_ADDR
// arTech := [ ] ;
3485: LD_ADDR_EXP 52
3489: PUSH
3490: EMPTY
3491: ST_TO_ADDR
// arBuildings := [ ] ;
3492: LD_ADDR_EXP 53
3496: PUSH
3497: EMPTY
3498: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3499: LD_ADDR_EXP 55
3503: PUSH
3504: LD_INT 94
3506: PUSH
3507: LD_INT 19
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 92
3516: PUSH
3517: LD_INT 34
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PUSH
3524: LD_INT 109
3526: PUSH
3527: LD_INT 67
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: PUSH
3534: LD_INT 120
3536: PUSH
3537: LD_INT 38
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 116
3546: PUSH
3547: LD_INT 30
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: LD_INT 102
3556: PUSH
3557: LD_INT 20
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3572: LD_ADDR_EXP 54
3576: PUSH
3577: LD_INT 73
3579: PUSH
3580: LD_INT 36
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 76
3589: PUSH
3590: LD_INT 38
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 79
3599: PUSH
3600: LD_INT 39
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: ST_TO_ADDR
// arEscapist := [ ] ;
3612: LD_ADDR_EXP 56
3616: PUSH
3617: EMPTY
3618: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3619: LD_INT 35
3621: PPUSH
3622: CALL_OW 274
3626: PPUSH
3627: LD_INT 1
3629: PPUSH
3630: LD_INT 150
3632: PPUSH
3633: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3637: LD_INT 35
3639: PPUSH
3640: CALL_OW 274
3644: PPUSH
3645: LD_INT 2
3647: PPUSH
3648: LD_INT 60
3650: PPUSH
3651: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3655: LD_INT 35
3657: PPUSH
3658: CALL_OW 274
3662: PPUSH
3663: LD_INT 3
3665: PPUSH
3666: LD_INT 10
3668: PPUSH
3669: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3673: LD_INT 36
3675: PPUSH
3676: LD_INT 22
3678: PPUSH
3679: LD_INT 2
3681: PPUSH
3682: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: LD_INT 22
3693: PUSH
3694: LD_INT 2
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 21
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: PUSH
3720: FOR_IN
3721: IFFALSE 3737
// SetBLevel ( i , 6 ) ;
3723: LD_VAR 0 2
3727: PPUSH
3728: LD_INT 6
3730: PPUSH
3731: CALL_OW 241
3735: GO 3720
3737: POP
3738: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3739: LD_ADDR_EXP 50
3743: PUSH
3744: LD_STRING Dietrich
3746: PPUSH
3747: CALL_OW 25
3751: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3752: LD_EXP 50
3756: PPUSH
3757: LD_INT 35
3759: PPUSH
3760: CALL_OW 52
// InitHC_All ( ) ;
3764: CALL_OW 584
// for i := 1 to 3 do
3768: LD_ADDR_VAR 0 2
3772: PUSH
3773: DOUBLE
3774: LD_INT 1
3776: DEC
3777: ST_TO_ADDR
3778: LD_INT 3
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3888
// begin PrepareEngineer ( sex_male , skill ) ;
3784: LD_INT 1
3786: PPUSH
3787: LD_VAR 0 6
3791: PPUSH
3792: CALL_OW 382
// if i = 1 then
3796: LD_VAR 0 2
3800: PUSH
3801: LD_INT 1
3803: EQUAL
3804: IFFALSE 3816
// hc_name := Ahmed Abbasid else
3806: LD_ADDR_OWVAR 26
3810: PUSH
3811: LD_STRING Ahmed Abbasid
3813: ST_TO_ADDR
3814: GO 3824
// hc_name :=  ;
3816: LD_ADDR_OWVAR 26
3820: PUSH
3821: LD_STRING 
3823: ST_TO_ADDR
// un := CreateHuman ;
3824: LD_ADDR_VAR 0 4
3828: PUSH
3829: CALL_OW 44
3833: ST_TO_ADDR
// if i = 1 then
3834: LD_VAR 0 2
3838: PUSH
3839: LD_INT 1
3841: EQUAL
3842: IFFALSE 3854
// Ahmed := un ;
3844: LD_ADDR_EXP 51
3848: PUSH
3849: LD_VAR 0 4
3853: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3854: LD_ADDR_EXP 49
3858: PUSH
3859: LD_EXP 49
3863: PPUSH
3864: LD_VAR 0 4
3868: PPUSH
3869: CALL 94638 0 2
3873: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3874: LD_VAR 0 4
3878: PPUSH
3879: LD_INT 35
3881: PPUSH
3882: CALL_OW 52
// end ;
3886: GO 3781
3888: POP
3889: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3890: LD_ADDR_VAR 0 2
3894: PUSH
3895: DOUBLE
3896: LD_INT 1
3898: DEC
3899: ST_TO_ADDR
3900: LD_INT 2
3902: PUSH
3903: LD_INT 3
3905: PUSH
3906: LD_INT 4
3908: PUSH
3909: LD_INT 5
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: LD_OWVAR 67
3922: ARRAY
3923: PUSH
3924: FOR_TO
3925: IFFALSE 4000
// begin PrepareScientist ( false , skill ) ;
3927: LD_INT 0
3929: PPUSH
3930: LD_VAR 0 6
3934: PPUSH
3935: CALL_OW 384
// un := CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3949: LD_VAR 0 4
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_VAR 0 6
3961: PPUSH
3962: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3966: LD_ADDR_EXP 49
3970: PUSH
3971: LD_EXP 49
3975: PPUSH
3976: LD_VAR 0 4
3980: PPUSH
3981: CALL 94638 0 2
3985: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3986: LD_VAR 0 4
3990: PPUSH
3991: LD_INT 36
3993: PPUSH
3994: CALL_OW 52
// end ;
3998: GO 3924
4000: POP
4001: POP
// for j in [ arBar1 , arBar2 ] do
4002: LD_ADDR_VAR 0 3
4006: PUSH
4007: LD_INT 37
4009: PUSH
4010: LD_INT 38
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: FOR_IN
4018: IFFALSE 4098
// for i := 1 to 4 do
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: DOUBLE
4026: LD_INT 1
4028: DEC
4029: ST_TO_ADDR
4030: LD_INT 4
4032: PUSH
4033: FOR_TO
4034: IFFALSE 4094
// begin PrepareSoldier ( false , skill ) ;
4036: LD_INT 0
4038: PPUSH
4039: LD_VAR 0 6
4043: PPUSH
4044: CALL_OW 381
// un := CreateHuman ;
4048: LD_ADDR_VAR 0 4
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4058: LD_ADDR_EXP 49
4062: PUSH
4063: LD_EXP 49
4067: PPUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: CALL 94638 0 2
4077: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4078: LD_VAR 0 4
4082: PPUSH
4083: LD_VAR 0 3
4087: PPUSH
4088: CALL_OW 52
// end ;
4092: GO 4033
4094: POP
4095: POP
4096: GO 4017
4098: POP
4099: POP
// for i := 1 to 3 do
4100: LD_ADDR_VAR 0 2
4104: PUSH
4105: DOUBLE
4106: LD_INT 1
4108: DEC
4109: ST_TO_ADDR
4110: LD_INT 3
4112: PUSH
4113: FOR_TO
4114: IFFALSE 4193
// begin un := arForces [ arForces - i ] ;
4116: LD_ADDR_VAR 0 4
4120: PUSH
4121: LD_EXP 49
4125: PUSH
4126: LD_EXP 49
4130: PUSH
4131: LD_VAR 0 2
4135: MINUS
4136: ARRAY
4137: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4138: LD_VAR 0 4
4142: PPUSH
4143: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4147: LD_VAR 0 4
4151: PPUSH
4152: LD_INT 22
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 30
4164: PUSH
4165: LD_INT 31
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: CALL_OW 180
// end ;
4191: GO 4113
4193: POP
4194: POP
// for i := 1 to 3 do
4195: LD_ADDR_VAR 0 2
4199: PUSH
4200: DOUBLE
4201: LD_INT 1
4203: DEC
4204: ST_TO_ADDR
4205: LD_INT 3
4207: PUSH
4208: FOR_TO
4209: IFFALSE 4294
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4211: LD_ADDR_VAR 0 5
4215: PUSH
4216: LD_EXP 49
4220: PPUSH
4221: LD_INT 25
4223: PUSH
4224: LD_INT 1
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 3
4233: PUSH
4234: LD_INT 120
4236: PUSH
4237: LD_INT 6
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 72
4256: ST_TO_ADDR
// if not tmp then
4257: LD_VAR 0 5
4261: NOT
4262: IFFALSE 4266
// continue ;
4264: GO 4208
// un := tmp [ 1 ] ;
4266: LD_ADDR_VAR 0 4
4270: PUSH
4271: LD_VAR 0 5
4275: PUSH
4276: LD_INT 1
4278: ARRAY
4279: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4280: LD_VAR 0 4
4284: PPUSH
4285: LD_INT 6
4287: PPUSH
4288: CALL_OW 109
// end ;
4292: GO 4208
4294: POP
4295: POP
// for i in UnitsInside ( arBar2 ) do
4296: LD_ADDR_VAR 0 2
4300: PUSH
4301: LD_INT 38
4303: PPUSH
4304: CALL_OW 313
4308: PUSH
4309: FOR_IN
4310: IFFALSE 4326
// SetClass ( i , class_mortar ) ;
4312: LD_VAR 0 2
4316: PPUSH
4317: LD_INT 8
4319: PPUSH
4320: CALL_OW 336
4324: GO 4309
4326: POP
4327: POP
// end ;
4328: LD_VAR 0 1
4332: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4333: LD_EXP 7
4337: IFFALSE 4754
4339: GO 4341
4341: DISABLE
4342: LD_INT 0
4344: PPUSH
4345: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4346: LD_INT 36
4348: PPUSH
4349: LD_INT 11
4351: PPUSH
4352: CALL_OW 147
// wait ( 0 0$10 ) ;
4356: LD_INT 350
4358: PPUSH
4359: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4363: LD_ADDR_EXP 53
4367: PUSH
4368: LD_INT 27
4370: PUSH
4371: LD_INT 69
4373: PUSH
4374: LD_INT 4
4376: PUSH
4377: LD_INT 2
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 27
4388: PUSH
4389: LD_INT 67
4391: PUSH
4392: LD_INT 6
4394: PUSH
4395: LD_INT 3
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4408: LD_INT 35
4410: PPUSH
4411: CALL_OW 67
// until not arBuildings ;
4415: LD_EXP 53
4419: NOT
4420: IFFALSE 4408
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4422: LD_ADDR_VAR 0 2
4426: PUSH
4427: LD_EXP 49
4431: PPUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 2
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 72
4446: ST_TO_ADDR
// if eng then
4447: LD_VAR 0 2
4451: IFFALSE 4590
// begin eng := eng [ 1 ] ;
4453: LD_ADDR_VAR 0 2
4457: PUSH
4458: LD_VAR 0 2
4462: PUSH
4463: LD_INT 1
4465: ARRAY
4466: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4467: LD_VAR 0 2
4471: PPUSH
4472: LD_INT 4
4474: PPUSH
4475: CALL_OW 109
// for i in arCameras do
4479: LD_ADDR_VAR 0 1
4483: PUSH
4484: LD_EXP 55
4488: PUSH
4489: FOR_IN
4490: IFFALSE 4521
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4492: LD_VAR 0 2
4496: PPUSH
4497: LD_VAR 0 1
4501: PUSH
4502: LD_INT 1
4504: ARRAY
4505: PPUSH
4506: LD_VAR 0 1
4510: PUSH
4511: LD_INT 2
4513: ARRAY
4514: PPUSH
4515: CALL_OW 217
4519: GO 4489
4521: POP
4522: POP
// repeat wait ( 0 0$1 ) ;
4523: LD_INT 35
4525: PPUSH
4526: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4530: LD_VAR 0 2
4534: PPUSH
4535: CALL_OW 314
4539: NOT
4540: IFTRUE 4553
4542: PUSH
4543: LD_VAR 0 2
4547: PPUSH
4548: CALL_OW 301
4552: OR
4553: IFFALSE 4523
// if IsOk ( eng ) then
4555: LD_VAR 0 2
4559: PPUSH
4560: CALL_OW 302
4564: IFFALSE 4590
// begin SetTag ( eng , 0 ) ;
4566: LD_VAR 0 2
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4578: LD_VAR 0 2
4582: PPUSH
4583: LD_INT 35
4585: PPUSH
4586: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4590: LD_INT 35
4592: PPUSH
4593: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4597: LD_OWVAR 1
4601: PUSH
4602: LD_INT 4200
4604: MOD
4605: PUSH
4606: LD_INT 0
4608: EQUAL
4609: IFFALSE 4624
4611: PUSH
4612: LD_INT 9
4614: PPUSH
4615: CALL_OW 435
4619: PUSH
4620: LD_INT 3
4622: LESS
4623: AND
4624: IFFALSE 4647
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 5
4631: PPUSH
4632: CALL_OW 12
4636: PPUSH
4637: LD_INT 9
4639: PPUSH
4640: LD_INT 1
4642: PPUSH
4643: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4647: LD_INT 22
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 57
4662: PUSH
4663: EMPTY
4664: LIST
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 63
4672: PUSH
4673: LD_INT 11
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: IFFALSE 4590
// wait ( 0 0$10 ) ;
4691: LD_INT 350
4693: PPUSH
4694: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4698: LD_ADDR_EXP 52
4702: PUSH
4703: LD_INT 21
4705: PUSH
4706: LD_INT 22
4708: PUSH
4709: LD_INT 54
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4717: LD_INT 35
4719: PPUSH
4720: CALL_OW 67
// until not arTech ;
4724: LD_EXP 52
4728: NOT
4729: IFFALSE 4717
// wait ( 0 0$30 ) ;
4731: LD_INT 1050
4733: PPUSH
4734: CALL_OW 67
// arabianAttack := true ;
4738: LD_ADDR_EXP 4
4742: PUSH
4743: LD_INT 1
4745: ST_TO_ADDR
// arBaseActive := false ;
4746: LD_ADDR_EXP 3
4750: PUSH
4751: LD_INT 0
4753: ST_TO_ADDR
// end ;
4754: PPOPN 2
4756: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4757: LD_EXP 3
4761: IFFALSE 4769
4763: PUSH
4764: LD_EXP 54
4768: AND
4769: IFFALSE 4790
4771: PUSH
4772: LD_INT 8
4774: PPUSH
4775: LD_INT 81
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PPUSH
4785: CALL_OW 70
4789: AND
4790: IFFALSE 4901
4792: GO 4794
4794: DISABLE
4795: LD_INT 0
4797: PPUSH
4798: PPUSH
// begin enable ;
4799: ENABLE
// for i in arMines do
4800: LD_ADDR_VAR 0 1
4804: PUSH
4805: LD_EXP 54
4809: PUSH
4810: FOR_IN
4811: IFFALSE 4899
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: LD_VAR 0 1
4822: PUSH
4823: LD_INT 1
4825: ARRAY
4826: PPUSH
4827: LD_VAR 0 1
4831: PUSH
4832: LD_INT 2
4834: ARRAY
4835: PPUSH
4836: CALL_OW 428
4840: ST_TO_ADDR
// if not e then
4841: LD_VAR 0 2
4845: NOT
4846: IFFALSE 4850
// continue ;
4848: GO 4810
// if GetSide ( e ) in [ 3 , 6 ] then
4850: LD_VAR 0 2
4854: PPUSH
4855: CALL_OW 255
4859: PUSH
4860: LD_INT 3
4862: PUSH
4863: LD_INT 6
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: IN
4870: IFFALSE 4897
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4872: LD_VAR 0 1
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: LD_VAR 0 1
4885: PUSH
4886: LD_INT 2
4888: ARRAY
4889: PPUSH
4890: LD_INT 2
4892: PPUSH
4893: CALL_OW 456
// end ;
4897: GO 4810
4899: POP
4900: POP
// end ;
4901: PPOPN 2
4903: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4904: LD_EXP 3
4908: IFFALSE 7126
4910: GO 4912
4912: DISABLE
4913: LD_INT 0
4915: PPUSH
4916: PPUSH
4917: PPUSH
4918: PPUSH
4919: PPUSH
4920: PPUSH
4921: PPUSH
4922: PPUSH
4923: PPUSH
4924: PPUSH
4925: PPUSH
4926: PPUSH
4927: PPUSH
4928: PPUSH
4929: PPUSH
4930: PPUSH
// begin enable ;
4931: ENABLE
// side := 2 ;
4932: LD_ADDR_VAR 0 4
4936: PUSH
4937: LD_INT 2
4939: ST_TO_ADDR
// if arTech then
4940: LD_EXP 52
4944: IFFALSE 5100
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4946: LD_ADDR_VAR 0 6
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_VAR 0 4
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PUSH
4969: LD_INT 2
4971: PUSH
4972: LD_INT 30
4974: PUSH
4975: LD_INT 6
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 30
4984: PUSH
4985: LD_INT 7
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 8
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: PPUSH
5013: CALL_OW 69
5017: ST_TO_ADDR
// if lab then
5018: LD_VAR 0 6
5022: IFFALSE 5100
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: CALL_OW 461
5037: PUSH
5038: LD_INT 2
5040: EQUAL
5041: IFFALSE 5100
// begin for i in arTech do
5043: LD_ADDR_VAR 0 1
5047: PUSH
5048: LD_EXP 52
5052: PUSH
5053: FOR_IN
5054: IFFALSE 5098
// if CanBeResearched ( lab [ 1 ] , i ) then
5056: LD_VAR 0 6
5060: PUSH
5061: LD_INT 1
5063: ARRAY
5064: PPUSH
5065: LD_VAR 0 1
5069: PPUSH
5070: CALL_OW 430
5074: IFFALSE 5096
// begin ComResearch ( lab [ 1 ] , i ) ;
5076: LD_VAR 0 6
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PPUSH
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 124
// break ;
5094: GO 5098
// end ;
5096: GO 5053
5098: POP
5099: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5100: LD_ADDR_VAR 0 5
5104: PUSH
5105: LD_INT 5
5107: PPUSH
5108: LD_INT 21
5110: PUSH
5111: LD_INT 3
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 3
5120: PUSH
5121: LD_INT 24
5123: PUSH
5124: LD_INT 1000
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PPUSH
5139: CALL_OW 70
5143: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5144: LD_ADDR_VAR 0 9
5148: PUSH
5149: LD_INT 9
5151: PPUSH
5152: CALL_OW 435
5156: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5157: LD_ADDR_VAR 0 11
5161: PUSH
5162: LD_EXP 49
5166: PPUSH
5167: LD_INT 25
5169: PUSH
5170: LD_INT 4
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 50
5179: PUSH
5180: EMPTY
5181: LIST
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PPUSH
5187: CALL_OW 72
5191: ST_TO_ADDR
// if sci then
5192: LD_VAR 0 11
5196: IFFALSE 5566
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5198: LD_ADDR_VAR 0 13
5202: PUSH
5203: LD_EXP 49
5207: PPUSH
5208: LD_INT 95
5210: PUSH
5211: LD_INT 5
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 3
5220: PUSH
5221: LD_INT 54
5223: PUSH
5224: EMPTY
5225: LIST
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 120
5233: PUSH
5234: LD_INT 1
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: PPUSH
5246: CALL_OW 72
5250: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5251: LD_ADDR_VAR 0 6
5255: PUSH
5256: LD_INT 22
5258: PUSH
5259: LD_VAR 0 4
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: PUSH
5268: LD_INT 50
5270: PUSH
5271: EMPTY
5272: LIST
5273: PUSH
5274: LD_INT 2
5276: PUSH
5277: LD_INT 30
5279: PUSH
5280: LD_INT 6
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: LD_INT 30
5289: PUSH
5290: LD_INT 7
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 30
5299: PUSH
5300: LD_INT 8
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: LIST
5317: PPUSH
5318: CALL_OW 69
5322: ST_TO_ADDR
// tag := GetTag ( i ) ;
5323: LD_ADDR_VAR 0 8
5327: PUSH
5328: LD_VAR 0 1
5332: PPUSH
5333: CALL_OW 110
5337: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5338: LD_VAR 0 1
5342: PPUSH
5343: CALL_OW 256
5347: PUSH
5348: LD_INT 800
5350: LESS
5351: IFFALSE 5363
5353: PUSH
5354: LD_VAR 0 8
5358: PUSH
5359: LD_INT 1
5361: NONEQUAL
5362: AND
5363: IFFALSE 5392
// begin ComMoveXY ( i , 72 , 15 ) ;
5365: LD_VAR 0 1
5369: PPUSH
5370: LD_INT 72
5372: PPUSH
5373: LD_INT 15
5375: PPUSH
5376: CALL_OW 111
// SetTag ( i , tHeal ) ;
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 1
5387: PPUSH
5388: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5392: LD_VAR 0 1
5396: PPUSH
5397: CALL_OW 256
5401: PUSH
5402: LD_INT 1000
5404: EQUAL
5405: IFFALSE 5417
5407: PUSH
5408: LD_VAR 0 8
5412: PUSH
5413: LD_INT 1
5415: EQUAL
5416: AND
5417: IFFALSE 5431
// begin SetTag ( i , 0 ) ;
5419: LD_VAR 0 1
5423: PPUSH
5424: LD_INT 0
5426: PPUSH
5427: CALL_OW 109
// end ; if hurtUnits then
5431: LD_VAR 0 13
5435: IFFALSE 5496
// begin for i in sci do
5437: LD_ADDR_VAR 0 1
5441: PUSH
5442: LD_VAR 0 11
5446: PUSH
5447: FOR_IN
5448: IFFALSE 5492
// if IsInUnit ( i ) then
5450: LD_VAR 0 1
5454: PPUSH
5455: CALL_OW 310
5459: IFFALSE 5472
// ComExitBuilding ( i ) else
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 122
5470: GO 5490
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5472: LD_VAR 0 1
5476: PPUSH
5477: LD_VAR 0 13
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PPUSH
5486: CALL_OW 128
5490: GO 5447
5492: POP
5493: POP
// end else
5494: GO 5566
// if lab then
5496: LD_VAR 0 6
5500: IFFALSE 5566
// begin for i in sci do
5502: LD_ADDR_VAR 0 1
5506: PUSH
5507: LD_VAR 0 11
5511: PUSH
5512: FOR_IN
5513: IFFALSE 5564
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5515: LD_VAR 0 1
5519: PPUSH
5520: CALL_OW 310
5524: NOT
5525: IFFALSE 5542
5527: PUSH
5528: LD_VAR 0 1
5532: PPUSH
5533: CALL_OW 110
5537: PUSH
5538: LD_INT 1
5540: NONEQUAL
5541: AND
5542: IFFALSE 5562
// ComEnterUnit ( i , lab [ 1 ] ) ;
5544: LD_VAR 0 1
5548: PPUSH
5549: LD_VAR 0 6
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PPUSH
5558: CALL_OW 120
5562: GO 5512
5564: POP
5565: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5566: LD_ADDR_VAR 0 7
5570: PUSH
5571: LD_EXP 49
5575: PPUSH
5576: LD_INT 25
5578: PUSH
5579: LD_INT 2
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PPUSH
5586: CALL_OW 72
5590: ST_TO_ADDR
// if eng then
5591: LD_VAR 0 7
5595: IFFALSE 6274
// begin for i in eng do
5597: LD_ADDR_VAR 0 1
5601: PUSH
5602: LD_VAR 0 7
5606: PUSH
5607: FOR_IN
5608: IFFALSE 6272
// begin tag := GetTag ( i ) ;
5610: LD_ADDR_VAR 0 8
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: CALL_OW 110
5624: ST_TO_ADDR
// if tag = tCamera then
5625: LD_VAR 0 8
5629: PUSH
5630: LD_INT 4
5632: EQUAL
5633: IFFALSE 5637
// continue ;
5635: GO 5607
// if GetLives ( i ) < 600 and tag <> tHeal then
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL_OW 256
5646: PUSH
5647: LD_INT 600
5649: LESS
5650: IFFALSE 5662
5652: PUSH
5653: LD_VAR 0 8
5657: PUSH
5658: LD_INT 1
5660: NONEQUAL
5661: AND
5662: IFFALSE 5700
// begin SetTag ( i , tHeal ) ;
5664: LD_VAR 0 1
5668: PPUSH
5669: LD_INT 1
5671: PPUSH
5672: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5676: LD_VAR 0 1
5680: PPUSH
5681: LD_INT 72
5683: PPUSH
5684: LD_INT 15
5686: PPUSH
5687: CALL_OW 111
// AddComHold ( i ) ;
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: EQUAL
5708: IFFALSE 5725
5710: PUSH
5711: LD_VAR 0 1
5715: PPUSH
5716: CALL_OW 256
5720: PUSH
5721: LD_INT 1000
5723: EQUAL
5724: AND
5725: IFFALSE 5739
// SetTag ( i , 0 ) ;
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 0
5734: PPUSH
5735: CALL_OW 109
// if not tag then
5739: LD_VAR 0 8
5743: NOT
5744: IFFALSE 5894
// begin if cr or tmp or Count ( arBuildings ) then
5746: LD_VAR 0 9
5750: IFTRUE 5758
5752: PUSH
5753: LD_VAR 0 5
5757: OR
5758: IFTRUE 5771
5760: PUSH
5761: LD_EXP 53
5765: PPUSH
5766: CALL 58706 0 1
5770: OR
5771: IFFALSE 5858
// begin if IsInUnit ( i ) then
5773: LD_VAR 0 1
5777: PPUSH
5778: CALL_OW 310
5782: IFFALSE 5793
// ComExitBuilding ( i ) ;
5784: LD_VAR 0 1
5788: PPUSH
5789: CALL_OW 122
// if tmp then
5793: LD_VAR 0 5
5797: IFFALSE 5813
// SetTag ( i , tRepair ) else
5799: LD_VAR 0 1
5803: PPUSH
5804: LD_INT 3
5806: PPUSH
5807: CALL_OW 109
5811: GO 5856
// if cr then
5813: LD_VAR 0 9
5817: IFFALSE 5833
// SetTag ( i , tCrates ) else
5819: LD_VAR 0 1
5823: PPUSH
5824: LD_INT 2
5826: PPUSH
5827: CALL_OW 109
5831: GO 5856
// if Count ( arBuildings ) then
5833: LD_EXP 53
5837: PPUSH
5838: CALL 58706 0 1
5842: IFFALSE 5856
// SetTag ( i , tBuild ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: LD_INT 5
5851: PPUSH
5852: CALL_OW 109
// end else
5856: GO 5894
// if not IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: NOT
5868: IFFALSE 5894
// begin SetTag ( i , 0 ) ;
5870: LD_VAR 0 1
5874: PPUSH
5875: LD_INT 0
5877: PPUSH
5878: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5882: LD_VAR 0 1
5886: PPUSH
5887: LD_INT 35
5889: PPUSH
5890: CALL_OW 120
// end ; end ; if tag = tRepair then
5894: LD_VAR 0 8
5898: PUSH
5899: LD_INT 3
5901: EQUAL
5902: IFFALSE 6004
// begin if IsInUnit ( i ) then
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 310
5913: IFFALSE 5926
// begin ComExitBuilding ( i ) ;
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 122
// continue ;
5924: GO 5607
// end ; if not tmp then
5926: LD_VAR 0 5
5930: NOT
5931: IFFALSE 5947
// begin SetTag ( i , 0 ) ;
5933: LD_VAR 0 1
5937: PPUSH
5938: LD_INT 0
5940: PPUSH
5941: CALL_OW 109
// continue ;
5945: GO 5607
// end ; if not HasTask ( i ) then
5947: LD_VAR 0 1
5951: PPUSH
5952: CALL_OW 314
5956: NOT
5957: IFFALSE 5977
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 5
5968: PUSH
5969: LD_INT 1
5971: ARRAY
5972: PPUSH
5973: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5977: LD_VAR 0 1
5981: PPUSH
5982: LD_INT 5
5984: PPUSH
5985: CALL_OW 308
5989: NOT
5990: IFFALSE 6004
// ComMoveToArea ( i , arBaseArea ) ;
5992: LD_VAR 0 1
5996: PPUSH
5997: LD_INT 5
5999: PPUSH
6000: CALL_OW 113
// end ; if tag = tBuild then
6004: LD_VAR 0 8
6008: PUSH
6009: LD_INT 5
6011: EQUAL
6012: IFFALSE 6123
// begin if IsInUnit ( i ) then
6014: LD_VAR 0 1
6018: PPUSH
6019: CALL_OW 310
6023: IFFALSE 6036
// begin ComExitBuilding ( i ) ;
6025: LD_VAR 0 1
6029: PPUSH
6030: CALL_OW 122
// continue ;
6034: GO 5607
// end ; if not Count ( arBuildings ) then
6036: LD_EXP 53
6040: PPUSH
6041: CALL 58706 0 1
6045: NOT
6046: IFFALSE 6062
// begin SetTag ( i , 0 ) ;
6048: LD_VAR 0 1
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 109
// continue ;
6060: GO 5607
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6062: LD_VAR 0 1
6066: PPUSH
6067: LD_EXP 53
6071: PUSH
6072: LD_INT 1
6074: ARRAY
6075: PUSH
6076: LD_INT 1
6078: ARRAY
6079: PPUSH
6080: LD_EXP 53
6084: PUSH
6085: LD_INT 1
6087: ARRAY
6088: PUSH
6089: LD_INT 2
6091: ARRAY
6092: PPUSH
6093: LD_EXP 53
6097: PUSH
6098: LD_INT 1
6100: ARRAY
6101: PUSH
6102: LD_INT 3
6104: ARRAY
6105: PPUSH
6106: LD_EXP 53
6110: PUSH
6111: LD_INT 1
6113: ARRAY
6114: PUSH
6115: LD_INT 4
6117: ARRAY
6118: PPUSH
6119: CALL_OW 145
// end ; if tag = tCrates then
6123: LD_VAR 0 8
6127: PUSH
6128: LD_INT 2
6130: EQUAL
6131: IFFALSE 6270
// begin if IsInUnit ( i ) then
6133: LD_VAR 0 1
6137: PPUSH
6138: CALL_OW 310
6142: IFFALSE 6155
// begin ComExitBuilding ( i ) ;
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 122
// continue ;
6153: GO 5607
// end ; if not cr then
6155: LD_VAR 0 9
6159: NOT
6160: IFFALSE 6176
// begin SetTag ( i , 0 ) ;
6162: LD_VAR 0 1
6166: PPUSH
6167: LD_INT 0
6169: PPUSH
6170: CALL_OW 109
// continue ;
6174: GO 5607
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6176: LD_VAR 0 1
6180: PPUSH
6181: CALL_OW 314
6185: NOT
6186: IFFALSE 6241
6188: PUSH
6189: LD_INT 81
6191: PUSH
6192: LD_VAR 0 4
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 92
6203: PUSH
6204: LD_VAR 0 9
6208: PUSH
6209: LD_INT 1
6211: ARRAY
6212: PUSH
6213: LD_VAR 0 9
6217: PUSH
6218: LD_INT 2
6220: ARRAY
6221: PUSH
6222: LD_INT 12
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PPUSH
6235: CALL_OW 69
6239: NOT
6240: AND
6241: IFFALSE 6270
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 9
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PPUSH
6257: LD_VAR 0 9
6261: PUSH
6262: LD_INT 2
6264: ARRAY
6265: PPUSH
6266: CALL_OW 117
// end ; end ;
6270: GO 5607
6272: POP
6273: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6274: LD_ADDR_VAR 0 12
6278: PUSH
6279: LD_EXP 49
6283: PPUSH
6284: LD_INT 25
6286: PUSH
6287: LD_INT 1
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: PUSH
6294: LD_INT 50
6296: PUSH
6297: EMPTY
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 72
6308: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6309: LD_ADDR_VAR 0 14
6313: PUSH
6314: LD_INT 5
6316: PPUSH
6317: LD_INT 81
6319: PUSH
6320: LD_VAR 0 4
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 70
6333: ST_TO_ADDR
// if sol then
6334: LD_VAR 0 12
6338: IFFALSE 7126
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6340: LD_ADDR_VAR 0 5
6344: PUSH
6345: LD_VAR 0 12
6349: PPUSH
6350: LD_INT 50
6352: PUSH
6353: EMPTY
6354: LIST
6355: PUSH
6356: LD_INT 120
6358: PUSH
6359: LD_INT 6
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PPUSH
6370: CALL_OW 72
6374: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6375: LD_VAR 0 5
6379: IFFALSE 6422
6381: PUSH
6382: LD_INT 81
6384: PUSH
6385: LD_VAR 0 4
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 92
6396: PUSH
6397: LD_INT 76
6399: PUSH
6400: LD_INT 38
6402: PUSH
6403: LD_INT 12
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PPUSH
6416: CALL_OW 69
6420: NOT
6421: AND
6422: IFFALSE 6594
// for i := 1 to Count ( tmp ) do
6424: LD_ADDR_VAR 0 1
6428: PUSH
6429: DOUBLE
6430: LD_INT 1
6432: DEC
6433: ST_TO_ADDR
6434: LD_VAR 0 5
6438: PPUSH
6439: CALL 58706 0 1
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6592
// begin un := tmp [ i ] ;
6447: LD_ADDR_VAR 0 2
6451: PUSH
6452: LD_VAR 0 5
6456: PUSH
6457: LD_VAR 0 1
6461: ARRAY
6462: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6463: LD_ADDR_VAR 0 3
6467: PUSH
6468: LD_VAR 0 2
6472: PPUSH
6473: CALL_OW 310
6477: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6478: LD_VAR 0 2
6482: PPUSH
6483: CALL_OW 459
6487: NOT
6488: IFFALSE 6557
// begin ComExitBuilding ( un ) ;
6490: LD_VAR 0 2
6494: PPUSH
6495: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6499: LD_VAR 0 2
6503: PPUSH
6504: LD_EXP 54
6508: PUSH
6509: LD_VAR 0 1
6513: ARRAY
6514: PUSH
6515: LD_INT 1
6517: ARRAY
6518: PPUSH
6519: LD_EXP 54
6523: PUSH
6524: LD_VAR 0 1
6528: ARRAY
6529: PUSH
6530: LD_INT 2
6532: ARRAY
6533: PPUSH
6534: LD_INT 0
6536: PPUSH
6537: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6541: LD_VAR 0 2
6545: PPUSH
6546: LD_VAR 0 3
6550: PPUSH
6551: CALL_OW 180
// end else
6555: GO 6590
// if not b and not HasTask ( un ) then
6557: LD_VAR 0 3
6561: NOT
6562: IFFALSE 6576
6564: PUSH
6565: LD_VAR 0 2
6569: PPUSH
6570: CALL_OW 314
6574: NOT
6575: AND
6576: IFFALSE 6590
// ComEnterUnit ( un , arBar1 ) ;
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_INT 37
6585: PPUSH
6586: CALL_OW 120
// end ;
6590: GO 6444
6592: POP
6593: POP
// if enemyInBase then
6594: LD_VAR 0 14
6598: IFFALSE 6743
// begin for i in sol do
6600: LD_ADDR_VAR 0 1
6604: PUSH
6605: LD_VAR 0 12
6609: PUSH
6610: FOR_IN
6611: IFFALSE 6739
// begin tw := IsInUnit ( i ) ;
6613: LD_ADDR_VAR 0 10
6617: PUSH
6618: LD_VAR 0 1
6622: PPUSH
6623: CALL_OW 310
6627: ST_TO_ADDR
// if tw then
6628: LD_VAR 0 10
6632: IFFALSE 6713
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6634: LD_VAR 0 10
6638: PUSH
6639: LD_INT 22
6641: PUSH
6642: LD_VAR 0 4
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 101
6653: PUSH
6654: LD_INT 2
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 30
6666: PUSH
6667: LD_INT 32
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 30
6676: PUSH
6677: LD_INT 31
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: PPUSH
6694: CALL_OW 69
6698: IN
6699: NOT
6700: IFFALSE 6711
// ComExitBuilding ( i ) ;
6702: LD_VAR 0 1
6706: PPUSH
6707: CALL_OW 122
// end else
6711: GO 6737
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6713: LD_VAR 0 1
6717: PPUSH
6718: LD_VAR 0 14
6722: PPUSH
6723: LD_VAR 0 1
6727: PPUSH
6728: CALL_OW 74
6732: PPUSH
6733: CALL_OW 115
// end ;
6737: GO 6610
6739: POP
6740: POP
// end else
6741: GO 7126
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6743: LD_ADDR_VAR 0 15
6747: PUSH
6748: LD_INT 5
6750: PPUSH
6751: LD_INT 3
6753: PUSH
6754: LD_INT 62
6756: PUSH
6757: EMPTY
6758: LIST
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 2
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 32
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 30
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 30
6799: PUSH
6800: LD_INT 31
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PPUSH
6818: CALL_OW 70
6822: ST_TO_ADDR
// if empty then
6823: LD_VAR 0 15
6827: IFFALSE 6844
// empty := ReverseArray ( empty ) ;
6829: LD_ADDR_VAR 0 15
6833: PUSH
6834: LD_VAR 0 15
6838: PPUSH
6839: CALL 89728 0 1
6843: ST_TO_ADDR
// for i in sol do
6844: LD_ADDR_VAR 0 1
6848: PUSH
6849: LD_VAR 0 12
6853: PUSH
6854: FOR_IN
6855: IFFALSE 7124
// begin tag := GetTag ( i ) ;
6857: LD_ADDR_VAR 0 8
6861: PUSH
6862: LD_VAR 0 1
6866: PPUSH
6867: CALL_OW 110
6871: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 256
6881: PUSH
6882: LD_INT 1000
6884: LESS
6885: IFFALSE 6897
6887: PUSH
6888: LD_VAR 0 8
6892: PUSH
6893: LD_INT 1
6895: NONEQUAL
6896: AND
6897: IFFALSE 6937
// begin SetTag ( i , tHeal ) ;
6899: LD_VAR 0 1
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6911: LD_VAR 0 1
6915: PPUSH
6916: LD_INT 72
6918: PPUSH
6919: LD_INT 15
6921: PPUSH
6922: CALL_OW 111
// AddComHold ( i ) ;
6926: LD_VAR 0 1
6930: PPUSH
6931: CALL_OW 200
// continue ;
6935: GO 6854
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6937: LD_VAR 0 1
6941: PPUSH
6942: CALL_OW 256
6946: PUSH
6947: LD_INT 1000
6949: EQUAL
6950: IFFALSE 6962
6952: PUSH
6953: LD_VAR 0 8
6957: PUSH
6958: LD_INT 1
6960: EQUAL
6961: AND
6962: IFFALSE 7045
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6964: LD_VAR 0 1
6968: PPUSH
6969: CALL_OW 459
6973: IFTRUE 7015
6975: PUSH
6976: LD_VAR 0 12
6980: PPUSH
6981: LD_INT 50
6983: PUSH
6984: EMPTY
6985: LIST
6986: PUSH
6987: LD_INT 120
6989: PUSH
6990: LD_INT 6
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 72
7005: PPUSH
7006: CALL 58706 0 1
7010: PUSH
7011: LD_INT 3
7013: LESS
7014: OR
7015: IFFALSE 7031
// SetTag ( i , tMine ) else
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_INT 6
7024: PPUSH
7025: CALL_OW 109
7029: GO 7043
// SetTag ( i , 0 ) ;
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 109
// continue ;
7043: GO 6854
// end ; if tag = tMine then
7045: LD_VAR 0 8
7049: PUSH
7050: LD_INT 6
7052: EQUAL
7053: IFFALSE 7057
// continue ;
7055: GO 6854
// if not IsInUnit ( i ) and not tag and empty then
7057: LD_VAR 0 1
7061: PPUSH
7062: CALL_OW 310
7066: NOT
7067: IFFALSE 7076
7069: PUSH
7070: LD_VAR 0 8
7074: NOT
7075: AND
7076: IFFALSE 7084
7078: PUSH
7079: LD_VAR 0 15
7083: AND
7084: IFFALSE 7122
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7086: LD_VAR 0 1
7090: PPUSH
7091: LD_VAR 0 15
7095: PUSH
7096: LD_INT 1
7098: ARRAY
7099: PPUSH
7100: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7104: LD_ADDR_VAR 0 15
7108: PUSH
7109: LD_VAR 0 15
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL_OW 3
7121: ST_TO_ADDR
// end ; end ;
7122: GO 6854
7124: POP
7125: POP
// end ; end ; end ;
7126: PPOPN 16
7128: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7129: LD_EXP 56
7133: PPUSH
7134: CALL 58706 0 1
7138: IFFALSE 7283
7140: GO 7142
7142: DISABLE
7143: LD_INT 0
7145: PPUSH
// begin enable ;
7146: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7147: LD_ADDR_VAR 0 1
7151: PUSH
7152: LD_EXP 56
7156: PPUSH
7157: LD_INT 50
7159: PUSH
7160: EMPTY
7161: LIST
7162: PPUSH
7163: CALL_OW 72
7167: PUSH
7168: FOR_IN
7169: IFFALSE 7281
// begin if not HasTask ( i ) then
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 314
7180: NOT
7181: IFFALSE 7195
// AddComMoveToArea ( i , khatamArea ) ;
7183: LD_VAR 0 1
7187: PPUSH
7188: LD_INT 11
7190: PPUSH
7191: CALL_OW 173
// if IsInArea ( i , khatamArea ) then
7195: LD_VAR 0 1
7199: PPUSH
7200: LD_INT 11
7202: PPUSH
7203: CALL_OW 308
7207: IFFALSE 7279
// begin RemoveUnit ( i ) ;
7209: LD_VAR 0 1
7213: PPUSH
7214: CALL_OW 64
// arEscapist := arEscapist diff i ;
7218: LD_ADDR_EXP 56
7222: PUSH
7223: LD_EXP 56
7227: PUSH
7228: LD_VAR 0 1
7232: DIFF
7233: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7234: LD_ADDR_EXP 21
7238: PUSH
7239: LD_EXP 21
7243: PPUSH
7244: CALL 96011 0 1
7248: ST_TO_ADDR
// if i = Dietrich then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_EXP 50
7258: EQUAL
7259: IFFALSE 7279
// begin gensherEscaped := true ;
7261: LD_ADDR_EXP 13
7265: PUSH
7266: LD_INT 1
7268: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7269: LD_INT 1
7271: PPUSH
7272: LD_STRING 10_GensherEscape_1
7274: PPUSH
7275: CALL_OW 39
// end ; end ; end ;
7279: GO 7168
7281: POP
7282: POP
// end ;
7283: PPOPN 1
7285: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7286: LD_INT 0
7288: PPUSH
7289: PPUSH
7290: PPUSH
7291: PPUSH
7292: PPUSH
// uc_side := 5 ;
7293: LD_ADDR_OWVAR 20
7297: PUSH
7298: LD_INT 5
7300: ST_TO_ADDR
// uc_nation := nation_arabian ;
7301: LD_ADDR_OWVAR 21
7305: PUSH
7306: LD_INT 2
7308: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7309: LD_ADDR_VAR 0 3
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: LD_INT 7
7322: PUSH
7323: LD_INT 8
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: PUSH
7332: LD_OWVAR 67
7336: ARRAY
7337: ST_TO_ADDR
// arAttackersInf := [ ] ;
7338: LD_ADDR_EXP 57
7342: PUSH
7343: EMPTY
7344: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7345: LD_ADDR_EXP 58
7349: PUSH
7350: EMPTY
7351: ST_TO_ADDR
// InitHC_All ( ) ;
7352: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7356: LD_ADDR_VAR 0 2
7360: PUSH
7361: DOUBLE
7362: LD_INT 1
7364: DEC
7365: ST_TO_ADDR
7366: LD_INT 3
7368: PUSH
7369: LD_INT 4
7371: PUSH
7372: LD_INT 5
7374: PUSH
7375: LD_INT 6
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: LD_OWVAR 67
7388: ARRAY
7389: PUSH
7390: FOR_TO
7391: IFFALSE 7493
// begin PrepareSoldier ( false , skill ) ;
7393: LD_INT 0
7395: PPUSH
7396: LD_VAR 0 3
7400: PPUSH
7401: CALL_OW 381
// un := CreateHuman ;
7405: LD_ADDR_VAR 0 4
7409: PUSH
7410: CALL_OW 44
7414: ST_TO_ADDR
// if i mod 2 = 0 then
7415: LD_VAR 0 2
7419: PUSH
7420: LD_INT 2
7422: MOD
7423: PUSH
7424: LD_INT 0
7426: EQUAL
7427: IFFALSE 7441
// SetClass ( un , class_mortar ) ;
7429: LD_VAR 0 4
7433: PPUSH
7434: LD_INT 8
7436: PPUSH
7437: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7441: LD_VAR 0 4
7445: PPUSH
7446: LD_INT 19
7448: PPUSH
7449: LD_INT 0
7451: PPUSH
7452: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7456: LD_ADDR_EXP 57
7460: PUSH
7461: LD_EXP 57
7465: PPUSH
7466: LD_VAR 0 4
7470: PPUSH
7471: CALL 94638 0 2
7475: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7476: LD_VAR 0 4
7480: PPUSH
7481: LD_INT 104
7483: PPUSH
7484: LD_INT 60
7486: PPUSH
7487: CALL_OW 114
// end ;
7491: GO 7390
7493: POP
7494: POP
// for i := 1 to 3 do
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: DOUBLE
7501: LD_INT 1
7503: DEC
7504: ST_TO_ADDR
7505: LD_INT 3
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7661
// begin PrepareMechanic ( false , skill ) ;
7511: LD_INT 0
7513: PPUSH
7514: LD_VAR 0 3
7518: PPUSH
7519: CALL_OW 383
// un := CreateHuman ;
7523: LD_ADDR_VAR 0 4
7527: PUSH
7528: CALL_OW 44
7532: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7533: LD_INT 14
7535: PPUSH
7536: LD_INT 1
7538: PPUSH
7539: LD_INT 1
7541: PPUSH
7542: LD_INT 27
7544: PUSH
7545: LD_INT 25
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: LD_VAR 0 2
7556: PUSH
7557: LD_INT 2
7559: MOD
7560: PUSH
7561: LD_INT 1
7563: PLUS
7564: ARRAY
7565: PPUSH
7566: LD_INT 80
7568: PPUSH
7569: CALL 61468 0 5
// veh := CreateVehicle ;
7573: LD_ADDR_VAR 0 5
7577: PUSH
7578: CALL_OW 45
7582: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7583: LD_VAR 0 5
7587: PPUSH
7588: LD_INT 4
7590: PPUSH
7591: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7595: LD_VAR 0 5
7599: PPUSH
7600: LD_INT 18
7602: PPUSH
7603: LD_INT 0
7605: PPUSH
7606: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7610: LD_VAR 0 4
7614: PPUSH
7615: LD_VAR 0 5
7619: PPUSH
7620: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7624: LD_VAR 0 4
7628: PPUSH
7629: LD_INT 129
7631: PPUSH
7632: LD_INT 20
7634: PPUSH
7635: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7639: LD_ADDR_EXP 58
7643: PUSH
7644: LD_EXP 58
7648: PPUSH
7649: LD_VAR 0 5
7653: PPUSH
7654: CALL 94638 0 2
7658: ST_TO_ADDR
// end ;
7659: GO 7508
7661: POP
7662: POP
// wait ( 0 0$2 ) ;
7663: LD_INT 70
7665: PPUSH
7666: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: DOUBLE
7676: LD_INT 1
7678: DEC
7679: ST_TO_ADDR
7680: LD_INT 1
7682: PUSH
7683: LD_INT 2
7685: PUSH
7686: LD_INT 2
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: LD_OWVAR 67
7702: ARRAY
7703: PUSH
7704: FOR_TO
7705: IFFALSE 7836
// begin PrepareMechanic ( false , skill ) ;
7707: LD_INT 0
7709: PPUSH
7710: LD_VAR 0 3
7714: PPUSH
7715: CALL_OW 383
// un := CreateHuman ;
7719: LD_ADDR_VAR 0 4
7723: PUSH
7724: CALL_OW 44
7728: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7729: LD_INT 14
7731: PPUSH
7732: LD_INT 1
7734: PPUSH
7735: LD_INT 1
7737: PPUSH
7738: LD_INT 26
7740: PPUSH
7741: LD_INT 80
7743: PPUSH
7744: CALL 61468 0 5
// veh := CreateVehicle ;
7748: LD_ADDR_VAR 0 5
7752: PUSH
7753: CALL_OW 45
7757: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7758: LD_VAR 0 5
7762: PPUSH
7763: LD_INT 4
7765: PPUSH
7766: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7770: LD_VAR 0 5
7774: PPUSH
7775: LD_INT 18
7777: PPUSH
7778: LD_INT 0
7780: PPUSH
7781: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7785: LD_VAR 0 4
7789: PPUSH
7790: LD_VAR 0 5
7794: PPUSH
7795: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7799: LD_VAR 0 4
7803: PPUSH
7804: LD_INT 133
7806: PPUSH
7807: LD_INT 40
7809: PPUSH
7810: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7814: LD_ADDR_EXP 58
7818: PUSH
7819: LD_EXP 58
7823: PPUSH
7824: LD_VAR 0 5
7828: PPUSH
7829: CALL 94638 0 2
7833: ST_TO_ADDR
// end ;
7834: GO 7704
7836: POP
7837: POP
// wait ( 0 0$2 ) ;
7838: LD_INT 70
7840: PPUSH
7841: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7845: LD_ADDR_VAR 0 2
7849: PUSH
7850: DOUBLE
7851: LD_INT 1
7853: DEC
7854: ST_TO_ADDR
7855: LD_INT 1
7857: PUSH
7858: LD_INT 2
7860: PUSH
7861: LD_INT 3
7863: PUSH
7864: LD_INT 4
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: PUSH
7873: LD_OWVAR 67
7877: ARRAY
7878: PUSH
7879: FOR_TO
7880: IFFALSE 8042
// begin PrepareMechanic ( false , skill ) ;
7882: LD_INT 0
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: CALL_OW 383
// un := CreateHuman ;
7894: LD_ADDR_VAR 0 4
7898: PUSH
7899: CALL_OW 44
7903: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7904: LD_INT 14
7906: PPUSH
7907: LD_INT 1
7909: PPUSH
7910: LD_INT 1
7912: PPUSH
7913: LD_INT 28
7915: PPUSH
7916: LD_INT 80
7918: PPUSH
7919: CALL 61468 0 5
// veh := CreateVehicle ;
7923: LD_ADDR_VAR 0 5
7927: PUSH
7928: CALL_OW 45
7932: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7933: LD_VAR 0 5
7937: PPUSH
7938: LD_INT 4
7940: PPUSH
7941: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7945: LD_VAR 0 5
7949: PPUSH
7950: LD_INT 18
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7960: LD_VAR 0 4
7964: PPUSH
7965: LD_VAR 0 5
7969: PPUSH
7970: CALL_OW 52
// if i mod 2 = 0 then
7974: LD_VAR 0 2
7978: PUSH
7979: LD_INT 2
7981: MOD
7982: PUSH
7983: LD_INT 0
7985: EQUAL
7986: IFFALSE 8005
// ComMoveXY ( un , 136 , 61 ) else
7988: LD_VAR 0 4
7992: PPUSH
7993: LD_INT 136
7995: PPUSH
7996: LD_INT 61
7998: PPUSH
7999: CALL_OW 111
8003: GO 8020
// ComMoveXY ( un , 137 , 41 ) ;
8005: LD_VAR 0 4
8009: PPUSH
8010: LD_INT 137
8012: PPUSH
8013: LD_INT 41
8015: PPUSH
8016: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
8020: LD_ADDR_EXP 58
8024: PUSH
8025: LD_EXP 58
8029: PPUSH
8030: LD_VAR 0 5
8034: PPUSH
8035: CALL 94638 0 2
8039: ST_TO_ADDR
// end ;
8040: GO 7879
8042: POP
8043: POP
// arabianAttackSpawned := true ;
8044: LD_ADDR_EXP 12
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// end ;
8052: LD_VAR 0 1
8056: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
8057: LD_EXP 57
8061: IFFALSE 8478
8063: GO 8065
8065: DISABLE
8066: LD_INT 0
8068: PPUSH
8069: PPUSH
8070: PPUSH
// begin wait ( 0 0$10 ) ;
8071: LD_INT 350
8073: PPUSH
8074: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_EXP 57
8087: PPUSH
8088: LD_INT 25
8090: PUSH
8091: LD_INT 1
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 50
8100: PUSH
8101: EMPTY
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 72
8112: ST_TO_ADDR
// for i in tmp do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8249
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8126: LD_ADDR_VAR 0 3
8130: PUSH
8131: LD_INT 22
8133: PUSH
8134: LD_INT 1
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 120
8146: PUSH
8147: LD_INT 11
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 2
8160: PUSH
8161: LD_INT 21
8163: PUSH
8164: LD_INT 2
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 21
8173: PUSH
8174: LD_INT 3
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: PPUSH
8191: CALL_OW 69
8195: PPUSH
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 74
8205: ST_TO_ADDR
// if not nearest then
8206: LD_VAR 0 3
8210: NOT
8211: IFFALSE 8215
// break ;
8213: GO 8249
// SetTag ( nearest , tMined ) ;
8215: LD_VAR 0 3
8219: PPUSH
8220: LD_INT 11
8222: PPUSH
8223: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8227: LD_VAR 0 1
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: LD_INT 0
8237: PPUSH
8238: LD_VAR 0 3
8242: PPUSH
8243: CALL_OW 132
// end ;
8247: GO 8123
8249: POP
8250: POP
// if hasBase and epsilon then
8251: LD_EXP 9
8255: IFFALSE 8263
8257: PUSH
8258: LD_EXP 10
8262: AND
8263: IFFALSE 8287
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8265: LD_VAR 0 2
8269: PPUSH
8270: LD_INT 0
8272: PPUSH
8273: LD_INT 0
8275: PPUSH
8276: LD_EXP 10
8280: PPUSH
8281: CALL_OW 192
8285: GO 8302
// AddComMoveXY ( tmp , 107 , 59 ) ;
8287: LD_VAR 0 2
8291: PPUSH
8292: LD_INT 107
8294: PPUSH
8295: LD_INT 59
8297: PPUSH
8298: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8309: LD_EXP 50
8313: PPUSH
8314: CALL_OW 301
8318: IFTRUE 8326
8320: PUSH
8321: LD_EXP 13
8325: OR
8326: IFFALSE 8302
// if not gensherEscaped then
8328: LD_EXP 13
8332: NOT
8333: IFFALSE 8342
// wait ( 1 1$20 ) ;
8335: LD_INT 2800
8337: PPUSH
8338: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8342: LD_ADDR_VAR 0 2
8346: PUSH
8347: LD_EXP 57
8351: PPUSH
8352: LD_INT 50
8354: PUSH
8355: EMPTY
8356: LIST
8357: PPUSH
8358: CALL_OW 72
8362: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8363: LD_VAR 0 2
8367: PPUSH
8368: LD_INT 143
8370: PPUSH
8371: LD_INT 117
8373: PPUSH
8374: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8378: LD_INT 35
8380: PPUSH
8381: CALL_OW 67
// for i in tmp do
8385: LD_ADDR_VAR 0 1
8389: PUSH
8390: LD_VAR 0 2
8394: PUSH
8395: FOR_IN
8396: IFFALSE 8469
// if IsInArea ( i , arAttackSpawn2Area ) then
8398: LD_VAR 0 1
8402: PPUSH
8403: LD_INT 19
8405: PPUSH
8406: CALL_OW 308
8410: IFFALSE 8455
// begin tmp := tmp diff i ;
8412: LD_ADDR_VAR 0 2
8416: PUSH
8417: LD_VAR 0 2
8421: PUSH
8422: LD_VAR 0 1
8426: DIFF
8427: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8428: LD_ADDR_EXP 57
8432: PUSH
8433: LD_EXP 57
8437: PUSH
8438: LD_VAR 0 1
8442: DIFF
8443: ST_TO_ADDR
// RemoveUnit ( i ) ;
8444: LD_VAR 0 1
8448: PPUSH
8449: CALL_OW 64
// end else
8453: GO 8467
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8455: LD_VAR 0 1
8459: PPUSH
8460: LD_INT 19
8462: PPUSH
8463: CALL_OW 113
8467: GO 8395
8469: POP
8470: POP
// until not tmp ;
8471: LD_VAR 0 2
8475: NOT
8476: IFFALSE 8378
// end ;
8478: PPOPN 3
8480: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , p ;
8481: LD_EXP 58
8485: IFFALSE 8773
8487: GO 8489
8489: DISABLE
8490: LD_INT 0
8492: PPUSH
8493: PPUSH
8494: PPUSH
// begin p := 0 ;
8495: LD_ADDR_VAR 0 3
8499: PUSH
8500: LD_INT 0
8502: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8503: LD_INT 35
8505: PPUSH
8506: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8510: LD_ADDR_VAR 0 2
8514: PUSH
8515: LD_EXP 58
8519: PPUSH
8520: LD_INT 50
8522: PUSH
8523: EMPTY
8524: LIST
8525: PPUSH
8526: CALL_OW 72
8530: ST_TO_ADDR
// for i in tmp do
8531: LD_ADDR_VAR 0 1
8535: PUSH
8536: LD_VAR 0 2
8540: PUSH
8541: FOR_IN
8542: IFFALSE 8579
// AgressiveMove ( i , [ [ 143 , 38 ] , [ 111 , 31 ] ] ) ;
8544: LD_VAR 0 1
8548: PPUSH
8549: LD_INT 143
8551: PUSH
8552: LD_INT 38
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 111
8561: PUSH
8562: LD_INT 31
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PPUSH
8573: CALL 97404 0 2
8577: GO 8541
8579: POP
8580: POP
// if IsDead ( Dietrich ) then
8581: LD_EXP 50
8585: PPUSH
8586: CALL_OW 301
8590: IFFALSE 8607
// p := Inc ( p ) ;
8592: LD_ADDR_VAR 0 3
8596: PUSH
8597: LD_VAR 0 3
8601: PPUSH
8602: CALL 96011 0 1
8606: ST_TO_ADDR
// until not tmp or gensherEscaped or p > 40 ;
8607: LD_VAR 0 2
8611: NOT
8612: IFTRUE 8620
8614: PUSH
8615: LD_EXP 13
8619: OR
8620: IFTRUE 8632
8622: PUSH
8623: LD_VAR 0 3
8627: PUSH
8628: LD_INT 40
8630: GREATER
8631: OR
8632: IFFALSE 8503
// if not arAttackersVeh then
8634: LD_EXP 58
8638: NOT
8639: IFFALSE 8643
// exit ;
8641: GO 8773
// repeat wait ( 0 0$1 ) ;
8643: LD_INT 35
8645: PPUSH
8646: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8650: LD_ADDR_VAR 0 2
8654: PUSH
8655: LD_EXP 58
8659: PPUSH
8660: LD_INT 50
8662: PUSH
8663: EMPTY
8664: LIST
8665: PPUSH
8666: CALL_OW 72
8670: ST_TO_ADDR
// for i in tmp do
8671: LD_ADDR_VAR 0 1
8675: PUSH
8676: LD_VAR 0 2
8680: PUSH
8681: FOR_IN
8682: IFFALSE 8764
// if IsInArea ( i , arAttackSpawnArea ) then
8684: LD_VAR 0 1
8688: PPUSH
8689: LD_INT 18
8691: PPUSH
8692: CALL_OW 308
8696: IFFALSE 8750
// begin if IsInUnit ( i ) then
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 310
8707: IFFALSE 8723
// RemoveUnit ( IsInUnit ( i ) ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 310
8718: PPUSH
8719: CALL_OW 64
// RemoveUnit ( i ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8732: LD_ADDR_EXP 58
8736: PUSH
8737: LD_EXP 58
8741: PUSH
8742: LD_VAR 0 1
8746: DIFF
8747: ST_TO_ADDR
// end else
8748: GO 8762
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8750: LD_VAR 0 1
8754: PPUSH
8755: LD_INT 18
8757: PPUSH
8758: CALL_OW 113
8762: GO 8681
8764: POP
8765: POP
// until not tmp ;
8766: LD_VAR 0 2
8770: NOT
8771: IFFALSE 8643
// end ; end_of_file
8773: PPOPN 3
8775: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , c , skill , sources ; begin
8776: LD_INT 0
8778: PPUSH
8779: PPUSH
8780: PPUSH
8781: PPUSH
8782: PPUSH
8783: PPUSH
8784: PPUSH
// uc_side := 3 ;
8785: LD_ADDR_OWVAR 20
8789: PUSH
8790: LD_INT 3
8792: ST_TO_ADDR
// uc_nation := nation_russian ;
8793: LD_ADDR_OWVAR 21
8797: PUSH
8798: LD_INT 3
8800: ST_TO_ADDR
// ruForces := [ ] ;
8801: LD_ADDR_EXP 59
8805: PUSH
8806: EMPTY
8807: ST_TO_ADDR
// ruForces2 := [ ] ;
8808: LD_ADDR_EXP 60
8812: PUSH
8813: EMPTY
8814: ST_TO_ADDR
// ruMech := [ ] ;
8815: LD_ADDR_EXP 63
8819: PUSH
8820: EMPTY
8821: ST_TO_ADDR
// ruMech2 := [ ] ;
8822: LD_ADDR_EXP 64
8826: PUSH
8827: EMPTY
8828: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8829: LD_ADDR_EXP 65
8833: PUSH
8834: LD_INT 37
8836: PUSH
8837: LD_INT 63
8839: PUSH
8840: LD_INT 52
8842: PUSH
8843: LD_INT 54
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: ST_TO_ADDR
// ruBaseArea := 0 ;
8852: LD_ADDR_EXP 66
8856: PUSH
8857: LD_INT 0
8859: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8860: LD_ADDR_EXP 67
8864: PUSH
8865: LD_INT 0
8867: ST_TO_ADDR
// ruBase := 0 ;
8868: LD_ADDR_EXP 68
8872: PUSH
8873: LD_INT 0
8875: ST_TO_ADDR
// ruBase2 := 0 ;
8876: LD_ADDR_EXP 69
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// ruConstructList := [ ] ;
8884: LD_ADDR_EXP 70
8888: PUSH
8889: EMPTY
8890: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8891: LD_ADDR_EXP 71
8895: PUSH
8896: LD_INT 22
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: LD_INT 43
8907: PUSH
8908: LD_INT 44
8910: PUSH
8911: LD_INT 45
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: PUSH
8919: LD_INT 1
8921: PPUSH
8922: LD_INT 3
8924: PPUSH
8925: CALL_OW 12
8929: ARRAY
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 22
8939: PUSH
8940: LD_INT 3
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: LD_INT 43
8948: PUSH
8949: LD_INT 44
8951: PUSH
8952: LD_INT 45
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_INT 3
8965: PPUSH
8966: CALL_OW 12
8970: ARRAY
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 22
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: LD_INT 1
8986: PUSH
8987: LD_INT 43
8989: PUSH
8990: LD_INT 44
8992: PUSH
8993: LD_INT 45
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: PUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_INT 3
9006: PPUSH
9007: CALL_OW 12
9011: ARRAY
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: ST_TO_ADDR
// ruCratesArea := 0 ;
9024: LD_ADDR_EXP 72
9028: PUSH
9029: LD_INT 0
9031: ST_TO_ADDR
// ruCratesArea2 := 0 ;
9032: LD_ADDR_EXP 73
9036: PUSH
9037: LD_INT 0
9039: ST_TO_ADDR
// ruHealPoint := [ ] ;
9040: LD_ADDR_EXP 74
9044: PUSH
9045: EMPTY
9046: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
9047: LD_ADDR_EXP 75
9051: PUSH
9052: EMPTY
9053: ST_TO_ADDR
// ruBuildings := [ ] ;
9054: LD_ADDR_EXP 76
9058: PUSH
9059: EMPTY
9060: ST_TO_ADDR
// ruBuildings2 := [ ] ;
9061: LD_ADDR_EXP 77
9065: PUSH
9066: EMPTY
9067: ST_TO_ADDR
// ruTanks := [ ] ;
9068: LD_ADDR_EXP 79
9072: PUSH
9073: EMPTY
9074: ST_TO_ADDR
// ruTanks2 := [ ] ;
9075: LD_ADDR_EXP 80
9079: PUSH
9080: EMPTY
9081: ST_TO_ADDR
// ruParkingArea := 0 ;
9082: LD_ADDR_EXP 82
9086: PUSH
9087: LD_INT 0
9089: ST_TO_ADDR
// ruParkingArea2 := 0 ;
9090: LD_ADDR_EXP 83
9094: PUSH
9095: LD_INT 0
9097: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
9098: LD_ADDR_VAR 0 2
9102: PUSH
9103: DOUBLE
9104: LD_INT 1
9106: DEC
9107: ST_TO_ADDR
9108: LD_INT 2
9110: PUSH
9111: LD_INT 3
9113: PUSH
9114: LD_INT 4
9116: PUSH
9117: LD_INT 4
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: LD_OWVAR 67
9130: ARRAY
9131: PUSH
9132: FOR_TO
9133: IFFALSE 9193
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9135: LD_ADDR_EXP 70
9139: PUSH
9140: LD_EXP 70
9144: PPUSH
9145: LD_INT 22
9147: PUSH
9148: LD_INT 3
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: LD_INT 43
9156: PUSH
9157: LD_INT 44
9159: PUSH
9160: LD_INT 45
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: PUSH
9168: LD_INT 1
9170: PPUSH
9171: LD_INT 3
9173: PPUSH
9174: CALL_OW 12
9178: ARRAY
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: PPUSH
9186: CALL 94638 0 2
9190: ST_TO_ADDR
9191: GO 9132
9193: POP
9194: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9195: LD_ADDR_VAR 0 7
9199: PUSH
9200: LD_INT 43
9202: PUSH
9203: LD_INT 68
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 43
9212: PUSH
9213: LD_INT 79
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 99
9222: PUSH
9223: LD_INT 114
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 103
9232: PUSH
9233: LD_INT 114
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 156
9242: PUSH
9243: LD_INT 92
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 152
9252: PUSH
9253: LD_INT 85
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: ST_TO_ADDR
// for i in sources do
9268: LD_ADDR_VAR 0 2
9272: PUSH
9273: LD_VAR 0 7
9277: PUSH
9278: FOR_IN
9279: IFFALSE 9308
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9281: LD_VAR 0 2
9285: PUSH
9286: LD_INT 1
9288: ARRAY
9289: PPUSH
9290: LD_VAR 0 2
9294: PUSH
9295: LD_INT 2
9297: ARRAY
9298: PPUSH
9299: LD_INT 3
9301: PPUSH
9302: CALL_OW 441
9306: GO 9278
9308: POP
9309: POP
// if Difficulty > 2 then
9310: LD_OWVAR 67
9314: PUSH
9315: LD_INT 2
9317: GREATER
9318: IFFALSE 9346
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9320: LD_INT 52
9322: PPUSH
9323: LD_INT 6
9325: PPUSH
9326: LD_INT 2
9328: PPUSH
9329: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9333: LD_INT 58
9335: PPUSH
9336: LD_INT 6
9338: PPUSH
9339: LD_INT 2
9341: PPUSH
9342: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9346: LD_ADDR_VAR 0 6
9350: PUSH
9351: LD_INT 5
9353: PUSH
9354: LD_INT 6
9356: PUSH
9357: LD_INT 7
9359: PUSH
9360: LD_INT 8
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: PUSH
9369: LD_OWVAR 67
9373: ARRAY
9374: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9375: LD_ADDR_EXP 61
9379: PUSH
9380: LD_STRING Tsaritsyn
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: LD_STRING 
9388: PPUSH
9389: CALL 56482 0 3
9393: ST_TO_ADDR
// c := 0 ;
9394: LD_ADDR_VAR 0 5
9398: PUSH
9399: LD_INT 0
9401: ST_TO_ADDR
// for i := 1 to 4 do
9402: LD_ADDR_VAR 0 2
9406: PUSH
9407: DOUBLE
9408: LD_INT 1
9410: DEC
9411: ST_TO_ADDR
9412: LD_INT 4
9414: PUSH
9415: FOR_TO
9416: IFFALSE 9649
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: DOUBLE
9424: LD_INT 1
9426: DEC
9427: ST_TO_ADDR
9428: LD_INT 5
9430: PUSH
9431: LD_INT 6
9433: PUSH
9434: LD_INT 8
9436: PUSH
9437: LD_INT 9
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: LD_OWVAR 67
9450: ARRAY
9451: PUSH
9452: LD_INT 3
9454: PUSH
9455: LD_INT 4
9457: PUSH
9458: LD_INT 5
9460: PUSH
9461: LD_INT 6
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: PUSH
9470: LD_OWVAR 67
9474: ARRAY
9475: PUSH
9476: LD_INT 3
9478: PUSH
9479: LD_INT 4
9481: PUSH
9482: LD_INT 5
9484: PUSH
9485: LD_INT 6
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: LD_OWVAR 67
9498: ARRAY
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: LD_INT 3
9505: PUSH
9506: LD_INT 3
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_OWVAR 67
9522: ARRAY
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: LD_VAR 0 2
9534: ARRAY
9535: PUSH
9536: FOR_TO
9537: IFFALSE 9645
// begin c := Inc ( c ) ;
9539: LD_ADDR_VAR 0 5
9543: PUSH
9544: LD_VAR 0 5
9548: PPUSH
9549: CALL 96011 0 1
9553: ST_TO_ADDR
// PrepareHuman ( false , i , skill ) ;
9554: LD_INT 0
9556: PPUSH
9557: LD_VAR 0 2
9561: PPUSH
9562: LD_VAR 0 6
9566: PPUSH
9567: CALL_OW 380
// un := CreateHuman ;
9571: LD_ADDR_VAR 0 4
9575: PUSH
9576: CALL_OW 44
9580: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9581: LD_ADDR_EXP 59
9585: PUSH
9586: LD_EXP 59
9590: PPUSH
9591: LD_VAR 0 4
9595: PPUSH
9596: CALL 94638 0 2
9600: ST_TO_ADDR
// if i = 3 then
9601: LD_VAR 0 2
9605: PUSH
9606: LD_INT 3
9608: EQUAL
9609: IFFALSE 9643
// begin ruMech := Join ( ruMech , un ) ;
9611: LD_ADDR_EXP 63
9615: PUSH
9616: LD_EXP 63
9620: PPUSH
9621: LD_VAR 0 4
9625: PPUSH
9626: CALL 94638 0 2
9630: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9631: LD_VAR 0 4
9635: PPUSH
9636: LD_INT 1
9638: PPUSH
9639: CALL_OW 336
// end ; end ;
9643: GO 9536
9645: POP
9646: POP
9647: GO 9415
9649: POP
9650: POP
// if Difficulty < 4 then
9651: LD_OWVAR 67
9655: PUSH
9656: LD_INT 4
9658: LESS
9659: IFFALSE 9663
// exit ;
9661: GO 9935
// PrepareSoldier ( sex_male , skill + 1 ) ;
9663: LD_INT 1
9665: PPUSH
9666: LD_VAR 0 6
9670: PUSH
9671: LD_INT 1
9673: PLUS
9674: PPUSH
9675: CALL_OW 381
// hc_importance := 100 ;
9679: LD_ADDR_OWVAR 32
9683: PUSH
9684: LD_INT 100
9686: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9687: LD_ADDR_EXP 62
9691: PUSH
9692: CALL_OW 44
9696: ST_TO_ADDR
// InitHc_All ( ) ;
9697: CALL_OW 584
// for i := 1 to 4 do
9701: LD_ADDR_VAR 0 2
9705: PUSH
9706: DOUBLE
9707: LD_INT 1
9709: DEC
9710: ST_TO_ADDR
9711: LD_INT 4
9713: PUSH
9714: FOR_TO
9715: IFFALSE 9933
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9717: LD_ADDR_VAR 0 3
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_INT 5
9729: PUSH
9730: LD_INT 6
9732: PUSH
9733: LD_INT 8
9735: PUSH
9736: LD_INT 9
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: LD_OWVAR 67
9749: ARRAY
9750: PUSH
9751: LD_INT 3
9753: PUSH
9754: LD_INT 4
9756: PUSH
9757: LD_INT 5
9759: PUSH
9760: LD_INT 6
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: PUSH
9769: LD_OWVAR 67
9773: ARRAY
9774: PUSH
9775: LD_INT 3
9777: PUSH
9778: LD_INT 4
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: LD_INT 6
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: PUSH
9793: LD_OWVAR 67
9797: ARRAY
9798: PUSH
9799: LD_INT 2
9801: PUSH
9802: LD_INT 3
9804: PUSH
9805: LD_INT 3
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: PUSH
9817: LD_OWVAR 67
9821: ARRAY
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: PUSH
9829: LD_VAR 0 2
9833: ARRAY
9834: PUSH
9835: FOR_TO
9836: IFFALSE 9929
// begin PrepareHuman ( false , i , skill ) ;
9838: LD_INT 0
9840: PPUSH
9841: LD_VAR 0 2
9845: PPUSH
9846: LD_VAR 0 6
9850: PPUSH
9851: CALL_OW 380
// un := CreateHuman ;
9855: LD_ADDR_VAR 0 4
9859: PUSH
9860: CALL_OW 44
9864: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9865: LD_ADDR_EXP 60
9869: PUSH
9870: LD_EXP 60
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: CALL 94638 0 2
9884: ST_TO_ADDR
// if i = 3 then
9885: LD_VAR 0 2
9889: PUSH
9890: LD_INT 3
9892: EQUAL
9893: IFFALSE 9927
// begin ruMech2 := Join ( ruMech2 , un ) ;
9895: LD_ADDR_EXP 64
9899: PUSH
9900: LD_EXP 64
9904: PPUSH
9905: LD_VAR 0 4
9909: PPUSH
9910: CALL 94638 0 2
9914: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9915: LD_VAR 0 4
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 336
// end ; end ;
9927: GO 9835
9929: POP
9930: POP
9931: GO 9714
9933: POP
9934: POP
// end ;
9935: LD_VAR 0 1
9939: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9940: LD_EXP 66
9944: PPUSH
9945: LD_INT 30
9947: PUSH
9948: LD_INT 3
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 50
9957: PUSH
9958: EMPTY
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PPUSH
9965: CALL_OW 70
9969: IFFALSE 9986
9971: PUSH
9972: LD_EXP 76
9976: PPUSH
9977: CALL 58706 0 1
9981: PUSH
9982: LD_INT 3
9984: LESS
9985: AND
9986: IFFALSE 10250
9988: GO 9990
9990: DISABLE
9991: LD_INT 0
9993: PPUSH
// begin enable ;
9994: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9995: LD_ADDR_EXP 70
9999: PUSH
10000: LD_EXP 70
10004: PUSH
10005: LD_INT 22
10007: PUSH
10008: LD_INT 22
10010: PUSH
10011: LD_INT 24
10013: PUSH
10014: LD_INT 24
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: PUSH
10023: LD_OWVAR 67
10027: ARRAY
10028: PUSH
10029: LD_INT 1
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: LD_INT 44
10037: PUSH
10038: LD_INT 45
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: LD_INT 1
10047: PPUSH
10048: LD_INT 2
10050: PPUSH
10051: CALL_OW 12
10055: ARRAY
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 22
10065: PUSH
10066: LD_INT 22
10068: PUSH
10069: LD_INT 24
10071: PUSH
10072: LD_INT 24
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: LD_OWVAR 67
10085: ARRAY
10086: PUSH
10087: LD_INT 1
10089: PUSH
10090: LD_INT 3
10092: PUSH
10093: LD_INT 45
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 22
10104: PUSH
10105: LD_INT 22
10107: PUSH
10108: LD_INT 24
10110: PUSH
10111: LD_INT 24
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PUSH
10120: LD_OWVAR 67
10124: ARRAY
10125: PUSH
10126: LD_INT 1
10128: PUSH
10129: LD_INT 3
10131: PUSH
10132: LD_INT 45
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: ADD
10146: ST_TO_ADDR
// for i := Difficulty downto 1 do
10147: LD_ADDR_VAR 0 1
10151: PUSH
10152: DOUBLE
10153: LD_OWVAR 67
10157: INC
10158: ST_TO_ADDR
10159: LD_INT 1
10161: PUSH
10162: FOR_DOWNTO
10163: IFFALSE 10248
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10165: LD_ADDR_EXP 70
10169: PUSH
10170: LD_EXP 70
10174: PPUSH
10175: LD_INT 22
10177: PUSH
10178: LD_INT 22
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 24
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: LD_OWVAR 67
10197: ARRAY
10198: PUSH
10199: LD_INT 1
10201: PUSH
10202: LD_INT 3
10204: PUSH
10205: LD_INT 44
10207: PUSH
10208: LD_INT 45
10210: PUSH
10211: LD_INT 45
10213: PUSH
10214: LD_INT 43
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 1
10225: PPUSH
10226: LD_INT 4
10228: PPUSH
10229: CALL_OW 12
10233: ARRAY
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: PPUSH
10241: CALL 94638 0 2
10245: ST_TO_ADDR
10246: GO 10162
10248: POP
10249: POP
// end ;
10250: PPOPN 1
10252: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10253: LD_EXP 67
10257: PPUSH
10258: LD_INT 30
10260: PUSH
10261: LD_INT 3
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 50
10270: PUSH
10271: EMPTY
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 70
10282: IFFALSE 10299
10284: PUSH
10285: LD_EXP 77
10289: PPUSH
10290: CALL 58706 0 1
10294: PUSH
10295: LD_INT 3
10297: LESS
10298: AND
10299: IFFALSE 10494
10301: GO 10303
10303: DISABLE
// begin enable ;
10304: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10305: LD_ADDR_EXP 71
10309: PUSH
10310: LD_EXP 71
10314: PUSH
10315: LD_INT 22
10317: PUSH
10318: LD_INT 22
10320: PUSH
10321: LD_INT 24
10323: PUSH
10324: LD_INT 24
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 1
10335: PPUSH
10336: LD_INT 4
10338: PPUSH
10339: CALL_OW 12
10343: ARRAY
10344: PUSH
10345: LD_INT 1
10347: PUSH
10348: LD_INT 3
10350: PUSH
10351: LD_INT 44
10353: PUSH
10354: LD_INT 45
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 1
10363: PPUSH
10364: LD_INT 2
10366: PPUSH
10367: CALL_OW 12
10371: ARRAY
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 22
10381: PUSH
10382: LD_INT 22
10384: PUSH
10385: LD_INT 24
10387: PUSH
10388: LD_INT 24
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 1
10399: PPUSH
10400: LD_INT 4
10402: PPUSH
10403: CALL_OW 12
10407: ARRAY
10408: PUSH
10409: LD_INT 1
10411: PUSH
10412: LD_INT 3
10414: PUSH
10415: LD_INT 45
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_INT 22
10429: PUSH
10430: LD_INT 24
10432: PUSH
10433: LD_INT 24
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 1
10444: PPUSH
10445: LD_INT 4
10447: PPUSH
10448: CALL_OW 12
10452: ARRAY
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: LD_INT 3
10459: PUSH
10460: LD_INT 45
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_INT 1
10474: PUSH
10475: LD_INT 3
10477: PUSH
10478: LD_INT 43
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: ADD
10493: ST_TO_ADDR
// end ;
10494: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10495: LD_INT 0
10497: PPUSH
10498: PPUSH
10499: PPUSH
10500: PPUSH
10501: PPUSH
10502: PPUSH
10503: PPUSH
10504: PPUSH
// case Difficulty of 1 :
10505: LD_OWVAR 67
10509: PUSH
10510: LD_INT 1
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10537
10518: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10519: LD_ADDR_VAR 0 4
10523: PUSH
10524: LD_INT 1
10526: PPUSH
10527: LD_INT 2
10529: PPUSH
10530: CALL_OW 12
10534: ST_TO_ADDR
10535: GO 10611
10537: LD_INT 2
10539: DOUBLE
10540: EQUAL
10541: IFTRUE 10545
10543: GO 10564
10545: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10546: LD_ADDR_VAR 0 4
10550: PUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_INT 3
10556: PPUSH
10557: CALL_OW 12
10561: ST_TO_ADDR
10562: GO 10611
10564: LD_INT 3
10566: DOUBLE
10567: EQUAL
10568: IFTRUE 10572
10570: GO 10591
10572: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10573: LD_ADDR_VAR 0 4
10577: PUSH
10578: LD_INT 2
10580: PPUSH
10581: LD_INT 3
10583: PPUSH
10584: CALL_OW 12
10588: ST_TO_ADDR
10589: GO 10611
10591: LD_INT 4
10593: DOUBLE
10594: EQUAL
10595: IFTRUE 10599
10597: GO 10610
10599: POP
// spawn := 3 ; end ;
10600: LD_ADDR_VAR 0 4
10604: PUSH
10605: LD_INT 3
10607: ST_TO_ADDR
10608: GO 10611
10610: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10611: LD_ADDR_VAR 0 6
10615: PUSH
10616: LD_INT 24
10618: PUSH
10619: LD_INT 25
10621: PUSH
10622: LD_INT 23
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: LIST
10629: PUSH
10630: LD_VAR 0 4
10634: ARRAY
10635: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10636: LD_ADDR_VAR 0 5
10640: PUSH
10641: LD_INT 21
10643: PUSH
10644: LD_INT 22
10646: PUSH
10647: LD_INT 20
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: LD_VAR 0 4
10659: ARRAY
10660: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10661: LD_ADDR_VAR 0 8
10665: PUSH
10666: LD_INT 96
10668: PUSH
10669: LD_INT 102
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 54
10678: PUSH
10679: LD_INT 85
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 146
10688: PUSH
10689: LD_INT 67
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: PUSH
10701: LD_VAR 0 4
10705: ARRAY
10706: ST_TO_ADDR
// for i in ruForces union ruCommander do
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_EXP 59
10716: PUSH
10717: LD_EXP 61
10721: UNION
10722: PUSH
10723: FOR_IN
10724: IFFALSE 10788
// begin repeat wait ( 0 0$1 ) ;
10726: LD_INT 35
10728: PPUSH
10729: CALL_OW 67
// until PlaceUnitArea ( i , area , false ) ;
10733: LD_VAR 0 2
10737: PPUSH
10738: LD_VAR 0 5
10742: PPUSH
10743: LD_INT 0
10745: PPUSH
10746: CALL_OW 49
10750: IFFALSE 10726
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10752: LD_VAR 0 2
10756: PPUSH
10757: LD_VAR 0 8
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: LD_VAR 0 8
10770: PUSH
10771: LD_INT 2
10773: ARRAY
10774: PPUSH
10775: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10779: LD_INT 14
10781: PPUSH
10782: CALL_OW 67
// end ;
10786: GO 10723
10788: POP
10789: POP
// DRussianConvoy ;
10790: CALL 28752 0 0
// spawnedRussians := true ;
10794: LD_ADDR_EXP 19
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10802: LD_INT 1
10804: PPUSH
10805: LD_VAR 0 6
10809: PPUSH
10810: CALL_OW 332
// case spawn of 1 :
10814: LD_VAR 0 4
10818: PUSH
10819: LD_INT 1
10821: DOUBLE
10822: EQUAL
10823: IFTRUE 10827
10825: GO 10837
10827: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10828: LD_INT 102
10830: PPUSH
10831: CALL_OW 427
10835: GO 10874
10837: LD_INT 2
10839: DOUBLE
10840: EQUAL
10841: IFTRUE 10845
10843: GO 10855
10845: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10846: LD_INT 103
10848: PPUSH
10849: CALL_OW 427
10853: GO 10874
10855: LD_INT 3
10857: DOUBLE
10858: EQUAL
10859: IFTRUE 10863
10861: GO 10873
10863: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10864: LD_INT 104
10866: PPUSH
10867: CALL_OW 427
10871: GO 10874
10873: POP
// if Difficulty < 4 then
10874: LD_OWVAR 67
10878: PUSH
10879: LD_INT 4
10881: LESS
10882: IFFALSE 10886
// exit ;
10884: GO 10972
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10886: LD_INT 1
10888: PPUSH
10889: LD_INT 22
10891: PPUSH
10892: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10896: LD_ADDR_VAR 0 2
10900: PUSH
10901: LD_EXP 60
10905: PUSH
10906: LD_EXP 62
10910: UNION
10911: PUSH
10912: FOR_IN
10913: IFFALSE 10963
// begin repeat wait ( 0 0$1 ) ;
10915: LD_INT 35
10917: PPUSH
10918: CALL_OW 67
// until PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10922: LD_VAR 0 2
10926: PPUSH
10927: LD_INT 22
10929: PPUSH
10930: LD_INT 0
10932: PPUSH
10933: CALL_OW 49
10937: IFFALSE 10915
// ComAgressiveMove ( i , 54 , 85 ) ;
10939: LD_VAR 0 2
10943: PPUSH
10944: LD_INT 54
10946: PPUSH
10947: LD_INT 85
10949: PPUSH
10950: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10954: LD_INT 28
10956: PPUSH
10957: CALL_OW 67
// end ;
10961: GO 10912
10963: POP
10964: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10965: LD_INT 105
10967: PPUSH
10968: CALL_OW 427
// end ;
10972: LD_VAR 0 1
10976: RET
// export function RussianBase ( group , option ) ; begin
10977: LD_INT 0
10979: PPUSH
// case option of 1 :
10980: LD_VAR 0 2
10984: PUSH
10985: LD_INT 1
10987: DOUBLE
10988: EQUAL
10989: IFTRUE 10993
10991: GO 11449
10993: POP
// begin ruBaseArea := ruBaseCenterArea ;
10994: LD_ADDR_EXP 66
10998: PUSH
10999: LD_INT 26
11001: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
11002: LD_ADDR_EXP 72
11006: PUSH
11007: LD_INT 26
11009: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
11010: LD_ADDR_EXP 76
11014: PUSH
11015: LD_INT 0
11017: PUSH
11018: LD_INT 104
11020: PUSH
11021: LD_INT 110
11023: PUSH
11024: LD_INT 5
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 4
11035: PUSH
11036: LD_INT 98
11038: PUSH
11039: LD_INT 90
11041: PUSH
11042: LD_INT 3
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 29
11053: PUSH
11054: LD_INT 103
11056: PUSH
11057: LD_INT 114
11059: PUSH
11060: LD_INT 2
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 30
11071: PUSH
11072: LD_INT 99
11074: PUSH
11075: LD_INT 114
11077: PUSH
11078: LD_INT 3
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 28
11089: PUSH
11090: LD_INT 100
11092: PUSH
11093: LD_INT 112
11095: PUSH
11096: LD_INT 1
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 2
11107: PUSH
11108: LD_INT 92
11110: PUSH
11111: LD_INT 101
11113: PUSH
11114: LD_INT 0
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 26
11125: PUSH
11126: LD_INT 97
11128: PUSH
11129: LD_INT 116
11131: PUSH
11132: LD_INT 5
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 17
11143: PUSH
11144: LD_INT 96
11146: PUSH
11147: LD_INT 101
11149: PUSH
11150: LD_INT 4
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 18
11161: PUSH
11162: LD_INT 88
11164: PUSH
11165: LD_INT 97
11167: PUSH
11168: LD_INT 2
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 26
11179: PUSH
11180: LD_INT 106
11182: PUSH
11183: LD_INT 92
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 6
11197: PUSH
11198: LD_INT 93
11200: PUSH
11201: LD_INT 110
11203: PUSH
11204: LD_INT 0
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 21
11215: PUSH
11216: LD_INT 89
11218: PUSH
11219: LD_INT 101
11221: PUSH
11222: LD_INT 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 16
11233: PUSH
11234: LD_INT 95
11236: PUSH
11237: LD_INT 104
11239: PUSH
11240: LD_INT 4
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 24
11251: PUSH
11252: LD_INT 92
11254: PUSH
11255: LD_INT 105
11257: PUSH
11258: LD_INT 0
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 33
11269: PUSH
11270: LD_INT 88
11272: PUSH
11273: LD_INT 89
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 33
11287: PUSH
11288: LD_INT 86
11290: PUSH
11291: LD_INT 90
11293: PUSH
11294: LD_INT 2
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 33
11305: PUSH
11306: LD_INT 85
11308: PUSH
11309: LD_INT 99
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 33
11323: PUSH
11324: LD_INT 85
11326: PUSH
11327: LD_INT 107
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 33
11341: PUSH
11342: LD_INT 105
11344: PUSH
11345: LD_INT 99
11347: PUSH
11348: LD_INT 1
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 33
11359: PUSH
11360: LD_INT 102
11362: PUSH
11363: LD_INT 92
11365: PUSH
11366: LD_INT 3
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 33
11377: PUSH
11378: LD_INT 105
11380: PUSH
11381: LD_INT 92
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11416: LD_ADDR_EXP 74
11420: PUSH
11421: LD_INT 98
11423: PUSH
11424: LD_INT 107
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11431: LD_ADDR_EXP 82
11435: PUSH
11436: LD_INT 30
11438: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11439: LD_ADDR_EXP 84
11443: PUSH
11444: LD_INT 36
11446: ST_TO_ADDR
// end ; 2 :
11447: GO 12473
11449: LD_INT 2
11451: DOUBLE
11452: EQUAL
11453: IFTRUE 11457
11455: GO 11951
11457: POP
// begin ruBaseArea := ruBaseWestArea ;
11458: LD_ADDR_EXP 66
11462: PUSH
11463: LD_INT 28
11465: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11466: LD_ADDR_EXP 72
11470: PUSH
11471: LD_INT 28
11473: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11474: LD_ADDR_EXP 76
11478: PUSH
11479: LD_INT 0
11481: PUSH
11482: LD_INT 49
11484: PUSH
11485: LD_INT 74
11487: PUSH
11488: LD_INT 3
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 4
11499: PUSH
11500: LD_INT 73
11502: PUSH
11503: LD_INT 88
11505: PUSH
11506: LD_INT 5
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 4
11517: PUSH
11518: LD_INT 56
11520: PUSH
11521: LD_INT 62
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 29
11535: PUSH
11536: LD_INT 43
11538: PUSH
11539: LD_INT 68
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 30
11553: PUSH
11554: LD_INT 43
11556: PUSH
11557: LD_INT 79
11559: PUSH
11560: LD_INT 5
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 28
11571: PUSH
11572: LD_INT 60
11574: PUSH
11575: LD_INT 75
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: LD_INT 50
11592: PUSH
11593: LD_INT 87
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 26
11607: PUSH
11608: LD_INT 45
11610: PUSH
11611: LD_INT 67
11613: PUSH
11614: LD_INT 2
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 17
11625: PUSH
11626: LD_INT 47
11628: PUSH
11629: LD_INT 84
11631: PUSH
11632: LD_INT 2
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 18
11643: PUSH
11644: LD_INT 46
11646: PUSH
11647: LD_INT 87
11649: PUSH
11650: LD_INT 1
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 26
11661: PUSH
11662: LD_INT 41
11664: PUSH
11665: LD_INT 64
11667: PUSH
11668: LD_INT 5
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 6
11679: PUSH
11680: LD_INT 42
11682: PUSH
11683: LD_INT 74
11685: PUSH
11686: LD_INT 1
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: LD_INT 21
11697: PUSH
11698: LD_INT 54
11700: PUSH
11701: LD_INT 91
11703: PUSH
11704: LD_INT 5
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 16
11715: PUSH
11716: LD_INT 50
11718: PUSH
11719: LD_INT 83
11721: PUSH
11722: LD_INT 3
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 24
11733: PUSH
11734: LD_INT 50
11736: PUSH
11737: LD_INT 90
11739: PUSH
11740: LD_INT 0
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 33
11751: PUSH
11752: LD_INT 51
11754: PUSH
11755: LD_INT 61
11757: PUSH
11758: LD_INT 3
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 33
11769: PUSH
11770: LD_INT 42
11772: PUSH
11773: LD_INT 60
11775: PUSH
11776: LD_INT 3
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 33
11787: PUSH
11788: LD_INT 36
11790: PUSH
11791: LD_INT 58
11793: PUSH
11794: LD_INT 3
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: PUSH
11803: LD_INT 33
11805: PUSH
11806: LD_INT 39
11808: PUSH
11809: LD_INT 59
11811: PUSH
11812: LD_INT 3
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 33
11823: PUSH
11824: LD_INT 61
11826: PUSH
11827: LD_INT 64
11829: PUSH
11830: LD_INT 3
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 33
11841: PUSH
11842: LD_INT 63
11844: PUSH
11845: LD_INT 90
11847: PUSH
11848: LD_INT 5
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 33
11859: PUSH
11860: LD_INT 64
11862: PUSH
11863: LD_INT 88
11865: PUSH
11866: LD_INT 5
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 33
11877: PUSH
11878: LD_INT 72
11880: PUSH
11881: LD_INT 82
11883: PUSH
11884: LD_INT 5
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11918: LD_ADDR_EXP 74
11922: PUSH
11923: LD_INT 45
11925: PUSH
11926: LD_INT 75
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11933: LD_ADDR_EXP 82
11937: PUSH
11938: LD_INT 31
11940: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11941: LD_ADDR_EXP 84
11945: PUSH
11946: LD_INT 37
11948: ST_TO_ADDR
// end ; 3 :
11949: GO 12473
11951: LD_INT 3
11953: DOUBLE
11954: EQUAL
11955: IFTRUE 11959
11957: GO 12472
11959: POP
// begin ruBaseArea := ruBaseEastArea ;
11960: LD_ADDR_EXP 66
11964: PUSH
11965: LD_INT 27
11967: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11968: LD_ADDR_EXP 72
11972: PUSH
11973: LD_INT 27
11975: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11976: LD_ADDR_EXP 76
11980: PUSH
11981: LD_INT 0
11983: PUSH
11984: LD_INT 152
11986: PUSH
11987: LD_INT 72
11989: PUSH
11990: LD_INT 4
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 4
12001: PUSH
12002: LD_INT 139
12004: PUSH
12005: LD_INT 69
12007: PUSH
12008: LD_INT 1
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 4
12019: PUSH
12020: LD_INT 142
12022: PUSH
12023: LD_INT 56
12025: PUSH
12026: LD_INT 2
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 29
12037: PUSH
12038: LD_INT 152
12040: PUSH
12041: LD_INT 85
12043: PUSH
12044: LD_INT 3
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 30
12055: PUSH
12056: LD_INT 156
12058: PUSH
12059: LD_INT 92
12061: PUSH
12062: LD_INT 3
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 28
12073: PUSH
12074: LD_INT 157
12076: PUSH
12077: LD_INT 96
12079: PUSH
12080: LD_INT 4
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 2
12091: PUSH
12092: LD_INT 161
12094: PUSH
12095: LD_INT 74
12097: PUSH
12098: LD_INT 5
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 21
12109: PUSH
12110: LD_INT 157
12112: PUSH
12113: LD_INT 74
12115: PUSH
12116: LD_INT 1
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 16
12127: PUSH
12128: LD_INT 161
12130: PUSH
12131: LD_INT 77
12133: PUSH
12134: LD_INT 0
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 24
12145: PUSH
12146: LD_INT 165
12148: PUSH
12149: LD_INT 78
12151: PUSH
12152: LD_INT 5
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 17
12163: PUSH
12164: LD_INT 164
12166: PUSH
12167: LD_INT 74
12169: PUSH
12170: LD_INT 4
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 6
12181: PUSH
12182: LD_INT 164
12184: PUSH
12185: LD_INT 95
12187: PUSH
12188: LD_INT 5
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 18
12199: PUSH
12200: LD_INT 161
12202: PUSH
12203: LD_INT 70
12205: PUSH
12206: LD_INT 3
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 26
12217: PUSH
12218: LD_INT 155
12220: PUSH
12221: LD_INT 87
12223: PUSH
12224: LD_INT 0
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 26
12235: PUSH
12236: LD_INT 159
12238: PUSH
12239: LD_INT 95
12241: PUSH
12242: LD_INT 3
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 26
12253: PUSH
12254: LD_INT 167
12256: PUSH
12257: LD_INT 98
12259: PUSH
12260: LD_INT 1
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 33
12271: PUSH
12272: LD_INT 152
12274: PUSH
12275: LD_INT 89
12277: PUSH
12278: LD_INT 1
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 33
12289: PUSH
12290: LD_INT 134
12292: PUSH
12293: LD_INT 61
12295: PUSH
12296: LD_INT 2
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 33
12307: PUSH
12308: LD_INT 156
12310: PUSH
12311: LD_INT 62
12313: PUSH
12314: LD_INT 3
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 33
12325: PUSH
12326: LD_INT 171
12328: PUSH
12329: LD_INT 97
12331: PUSH
12332: LD_INT 5
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 33
12343: PUSH
12344: LD_INT 169
12346: PUSH
12347: LD_INT 103
12349: PUSH
12350: LD_INT 5
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 33
12361: PUSH
12362: LD_INT 158
12364: PUSH
12365: LD_INT 65
12367: PUSH
12368: LD_INT 3
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 33
12379: PUSH
12380: LD_INT 144
12382: PUSH
12383: LD_INT 53
12385: PUSH
12386: LD_INT 2
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 33
12397: PUSH
12398: LD_INT 150
12400: PUSH
12401: LD_INT 81
12403: PUSH
12404: LD_INT 1
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12439: LD_ADDR_EXP 74
12443: PUSH
12444: LD_INT 145
12446: PUSH
12447: LD_INT 71
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12454: LD_ADDR_EXP 82
12458: PUSH
12459: LD_INT 29
12461: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12462: LD_ADDR_EXP 84
12466: PUSH
12467: LD_INT 35
12469: ST_TO_ADDR
// end ; end ;
12470: GO 12473
12472: POP
// ruScriptActive := true ;
12473: LD_ADDR_EXP 14
12477: PUSH
12478: LD_INT 1
12480: ST_TO_ADDR
// end ;
12481: LD_VAR 0 3
12485: RET
// export function RussianBase2 ( group , option ) ; begin
12486: LD_INT 0
12488: PPUSH
// case option of 1 :
12489: LD_VAR 0 2
12493: PUSH
12494: LD_INT 1
12496: DOUBLE
12497: EQUAL
12498: IFTRUE 12502
12500: GO 12958
12502: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12503: LD_ADDR_EXP 67
12507: PUSH
12508: LD_INT 26
12510: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12511: LD_ADDR_EXP 73
12515: PUSH
12516: LD_INT 26
12518: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12519: LD_ADDR_EXP 77
12523: PUSH
12524: LD_INT 0
12526: PUSH
12527: LD_INT 104
12529: PUSH
12530: LD_INT 110
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 4
12544: PUSH
12545: LD_INT 98
12547: PUSH
12548: LD_INT 90
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 29
12562: PUSH
12563: LD_INT 103
12565: PUSH
12566: LD_INT 114
12568: PUSH
12569: LD_INT 2
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 30
12580: PUSH
12581: LD_INT 99
12583: PUSH
12584: LD_INT 114
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 28
12598: PUSH
12599: LD_INT 100
12601: PUSH
12602: LD_INT 112
12604: PUSH
12605: LD_INT 1
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: LD_INT 92
12619: PUSH
12620: LD_INT 101
12622: PUSH
12623: LD_INT 0
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 26
12634: PUSH
12635: LD_INT 97
12637: PUSH
12638: LD_INT 116
12640: PUSH
12641: LD_INT 5
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 17
12652: PUSH
12653: LD_INT 96
12655: PUSH
12656: LD_INT 101
12658: PUSH
12659: LD_INT 4
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 18
12670: PUSH
12671: LD_INT 88
12673: PUSH
12674: LD_INT 97
12676: PUSH
12677: LD_INT 2
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: PUSH
12686: LD_INT 26
12688: PUSH
12689: LD_INT 106
12691: PUSH
12692: LD_INT 92
12694: PUSH
12695: LD_INT 2
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 6
12706: PUSH
12707: LD_INT 93
12709: PUSH
12710: LD_INT 110
12712: PUSH
12713: LD_INT 0
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 21
12724: PUSH
12725: LD_INT 89
12727: PUSH
12728: LD_INT 101
12730: PUSH
12731: LD_INT 1
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 95
12745: PUSH
12746: LD_INT 104
12748: PUSH
12749: LD_INT 4
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 24
12760: PUSH
12761: LD_INT 92
12763: PUSH
12764: LD_INT 105
12766: PUSH
12767: LD_INT 0
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 33
12778: PUSH
12779: LD_INT 88
12781: PUSH
12782: LD_INT 89
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 33
12796: PUSH
12797: LD_INT 86
12799: PUSH
12800: LD_INT 90
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 33
12814: PUSH
12815: LD_INT 85
12817: PUSH
12818: LD_INT 99
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 33
12832: PUSH
12833: LD_INT 85
12835: PUSH
12836: LD_INT 107
12838: PUSH
12839: LD_INT 1
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 33
12850: PUSH
12851: LD_INT 105
12853: PUSH
12854: LD_INT 99
12856: PUSH
12857: LD_INT 1
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 33
12868: PUSH
12869: LD_INT 102
12871: PUSH
12872: LD_INT 92
12874: PUSH
12875: LD_INT 3
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 33
12886: PUSH
12887: LD_INT 105
12889: PUSH
12890: LD_INT 92
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12925: LD_ADDR_EXP 75
12929: PUSH
12930: LD_INT 98
12932: PUSH
12933: LD_INT 107
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12940: LD_ADDR_EXP 83
12944: PUSH
12945: LD_INT 30
12947: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12948: LD_ADDR_EXP 85
12952: PUSH
12953: LD_INT 36
12955: ST_TO_ADDR
// end ; 2 :
12956: GO 13925
12958: LD_INT 2
12960: DOUBLE
12961: EQUAL
12962: IFTRUE 12966
12964: GO 13460
12966: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12967: LD_ADDR_EXP 67
12971: PUSH
12972: LD_INT 28
12974: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12975: LD_ADDR_EXP 73
12979: PUSH
12980: LD_INT 28
12982: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12983: LD_ADDR_EXP 77
12987: PUSH
12988: LD_INT 0
12990: PUSH
12991: LD_INT 49
12993: PUSH
12994: LD_INT 74
12996: PUSH
12997: LD_INT 3
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: PUSH
13006: LD_INT 4
13008: PUSH
13009: LD_INT 73
13011: PUSH
13012: LD_INT 88
13014: PUSH
13015: LD_INT 5
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 4
13026: PUSH
13027: LD_INT 56
13029: PUSH
13030: LD_INT 62
13032: PUSH
13033: LD_INT 3
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 29
13044: PUSH
13045: LD_INT 43
13047: PUSH
13048: LD_INT 68
13050: PUSH
13051: LD_INT 2
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 30
13062: PUSH
13063: LD_INT 43
13065: PUSH
13066: LD_INT 79
13068: PUSH
13069: LD_INT 5
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 28
13080: PUSH
13081: LD_INT 60
13083: PUSH
13084: LD_INT 75
13086: PUSH
13087: LD_INT 1
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 2
13098: PUSH
13099: LD_INT 50
13101: PUSH
13102: LD_INT 87
13104: PUSH
13105: LD_INT 1
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 26
13116: PUSH
13117: LD_INT 45
13119: PUSH
13120: LD_INT 67
13122: PUSH
13123: LD_INT 2
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: PUSH
13132: LD_INT 17
13134: PUSH
13135: LD_INT 47
13137: PUSH
13138: LD_INT 84
13140: PUSH
13141: LD_INT 2
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 18
13152: PUSH
13153: LD_INT 46
13155: PUSH
13156: LD_INT 87
13158: PUSH
13159: LD_INT 1
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 26
13170: PUSH
13171: LD_INT 41
13173: PUSH
13174: LD_INT 64
13176: PUSH
13177: LD_INT 5
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 6
13188: PUSH
13189: LD_INT 42
13191: PUSH
13192: LD_INT 74
13194: PUSH
13195: LD_INT 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 54
13209: PUSH
13210: LD_INT 91
13212: PUSH
13213: LD_INT 5
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 16
13224: PUSH
13225: LD_INT 50
13227: PUSH
13228: LD_INT 83
13230: PUSH
13231: LD_INT 3
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 24
13242: PUSH
13243: LD_INT 50
13245: PUSH
13246: LD_INT 90
13248: PUSH
13249: LD_INT 0
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 33
13260: PUSH
13261: LD_INT 51
13263: PUSH
13264: LD_INT 61
13266: PUSH
13267: LD_INT 3
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 33
13278: PUSH
13279: LD_INT 42
13281: PUSH
13282: LD_INT 60
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: PUSH
13294: LD_INT 33
13296: PUSH
13297: LD_INT 36
13299: PUSH
13300: LD_INT 58
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 33
13314: PUSH
13315: LD_INT 39
13317: PUSH
13318: LD_INT 59
13320: PUSH
13321: LD_INT 3
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 33
13332: PUSH
13333: LD_INT 61
13335: PUSH
13336: LD_INT 64
13338: PUSH
13339: LD_INT 3
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 33
13350: PUSH
13351: LD_INT 63
13353: PUSH
13354: LD_INT 90
13356: PUSH
13357: LD_INT 5
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 33
13368: PUSH
13369: LD_INT 64
13371: PUSH
13372: LD_INT 88
13374: PUSH
13375: LD_INT 5
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 33
13386: PUSH
13387: LD_INT 72
13389: PUSH
13390: LD_INT 82
13392: PUSH
13393: LD_INT 5
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13427: LD_ADDR_EXP 74
13431: PUSH
13432: LD_INT 45
13434: PUSH
13435: LD_INT 75
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13442: LD_ADDR_EXP 83
13446: PUSH
13447: LD_INT 31
13449: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13450: LD_ADDR_EXP 85
13454: PUSH
13455: LD_INT 37
13457: ST_TO_ADDR
// end ; 3 :
13458: GO 13925
13460: LD_INT 3
13462: DOUBLE
13463: EQUAL
13464: IFTRUE 13468
13466: GO 13924
13468: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13469: LD_ADDR_EXP 67
13473: PUSH
13474: LD_INT 27
13476: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13477: LD_ADDR_EXP 73
13481: PUSH
13482: LD_INT 27
13484: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13485: LD_ADDR_EXP 77
13489: PUSH
13490: LD_INT 0
13492: PUSH
13493: LD_INT 152
13495: PUSH
13496: LD_INT 72
13498: PUSH
13499: LD_INT 4
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 4
13510: PUSH
13511: LD_INT 139
13513: PUSH
13514: LD_INT 69
13516: PUSH
13517: LD_INT 1
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 4
13528: PUSH
13529: LD_INT 142
13531: PUSH
13532: LD_INT 56
13534: PUSH
13535: LD_INT 2
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 29
13546: PUSH
13547: LD_INT 152
13549: PUSH
13550: LD_INT 85
13552: PUSH
13553: LD_INT 3
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 30
13564: PUSH
13565: LD_INT 156
13567: PUSH
13568: LD_INT 92
13570: PUSH
13571: LD_INT 3
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 28
13582: PUSH
13583: LD_INT 157
13585: PUSH
13586: LD_INT 96
13588: PUSH
13589: LD_INT 4
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 2
13600: PUSH
13601: LD_INT 161
13603: PUSH
13604: LD_INT 74
13606: PUSH
13607: LD_INT 5
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 21
13618: PUSH
13619: LD_INT 157
13621: PUSH
13622: LD_INT 74
13624: PUSH
13625: LD_INT 1
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 16
13636: PUSH
13637: LD_INT 161
13639: PUSH
13640: LD_INT 77
13642: PUSH
13643: LD_INT 0
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 24
13654: PUSH
13655: LD_INT 165
13657: PUSH
13658: LD_INT 78
13660: PUSH
13661: LD_INT 5
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 17
13672: PUSH
13673: LD_INT 164
13675: PUSH
13676: LD_INT 74
13678: PUSH
13679: LD_INT 4
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 6
13690: PUSH
13691: LD_INT 164
13693: PUSH
13694: LD_INT 95
13696: PUSH
13697: LD_INT 5
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 18
13708: PUSH
13709: LD_INT 161
13711: PUSH
13712: LD_INT 70
13714: PUSH
13715: LD_INT 3
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 26
13726: PUSH
13727: LD_INT 155
13729: PUSH
13730: LD_INT 87
13732: PUSH
13733: LD_INT 0
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 26
13744: PUSH
13745: LD_INT 159
13747: PUSH
13748: LD_INT 95
13750: PUSH
13751: LD_INT 3
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 26
13762: PUSH
13763: LD_INT 167
13765: PUSH
13766: LD_INT 98
13768: PUSH
13769: LD_INT 1
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 33
13780: PUSH
13781: LD_INT 152
13783: PUSH
13784: LD_INT 89
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 33
13798: PUSH
13799: LD_INT 134
13801: PUSH
13802: LD_INT 61
13804: PUSH
13805: LD_INT 2
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 33
13816: PUSH
13817: LD_INT 156
13819: PUSH
13820: LD_INT 62
13822: PUSH
13823: LD_INT 3
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 33
13834: PUSH
13835: LD_INT 171
13837: PUSH
13838: LD_INT 97
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 33
13852: PUSH
13853: LD_INT 169
13855: PUSH
13856: LD_INT 103
13858: PUSH
13859: LD_INT 5
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13891: LD_ADDR_EXP 75
13895: PUSH
13896: LD_INT 145
13898: PUSH
13899: LD_INT 71
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13906: LD_ADDR_EXP 83
13910: PUSH
13911: LD_INT 29
13913: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13914: LD_ADDR_EXP 85
13918: PUSH
13919: LD_INT 35
13921: ST_TO_ADDR
// end ; end ;
13922: GO 13925
13924: POP
// ruScriptActive2 := true ;
13925: LD_ADDR_EXP 15
13929: PUSH
13930: LD_INT 1
13932: ST_TO_ADDR
// end ;
13933: LD_VAR 0 3
13937: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13938: LD_EXP 14
13942: IFFALSE 13955
13944: PUSH
13945: LD_EXP 59
13949: PPUSH
13950: CALL 58706 0 1
13954: AND
13955: IFFALSE 16559
13957: GO 13959
13959: DISABLE
13960: LD_INT 0
13962: PPUSH
13963: PPUSH
13964: PPUSH
13965: PPUSH
13966: PPUSH
13967: PPUSH
13968: PPUSH
13969: PPUSH
13970: PPUSH
13971: PPUSH
13972: PPUSH
13973: PPUSH
13974: PPUSH
13975: PPUSH
13976: PPUSH
13977: PPUSH
// begin enable ;
13978: ENABLE
// if ruTech then
13979: LD_EXP 65
13983: IFFALSE 14137
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13985: LD_ADDR_VAR 0 4
13989: PUSH
13990: LD_INT 22
13992: PUSH
13993: LD_INT 3
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 50
14002: PUSH
14003: EMPTY
14004: LIST
14005: PUSH
14006: LD_INT 2
14008: PUSH
14009: LD_INT 30
14011: PUSH
14012: LD_INT 6
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 30
14021: PUSH
14022: LD_INT 7
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 30
14031: PUSH
14032: LD_INT 8
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: PPUSH
14050: CALL_OW 69
14054: ST_TO_ADDR
// if lab then
14055: LD_VAR 0 4
14059: IFFALSE 14137
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
14061: LD_VAR 0 4
14065: PUSH
14066: LD_INT 1
14068: ARRAY
14069: PPUSH
14070: CALL_OW 461
14074: PUSH
14075: LD_INT 2
14077: EQUAL
14078: IFFALSE 14137
// begin for i in ruTech do
14080: LD_ADDR_VAR 0 1
14084: PUSH
14085: LD_EXP 65
14089: PUSH
14090: FOR_IN
14091: IFFALSE 14135
// if CanBeResearched ( lab [ 1 ] , i ) then
14093: LD_VAR 0 4
14097: PUSH
14098: LD_INT 1
14100: ARRAY
14101: PPUSH
14102: LD_VAR 0 1
14106: PPUSH
14107: CALL_OW 430
14111: IFFALSE 14133
// begin ComResearch ( lab [ 1 ] , i ) ;
14113: LD_VAR 0 4
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: PPUSH
14122: LD_VAR 0 1
14126: PPUSH
14127: CALL_OW 124
// break ;
14131: GO 14135
// end ;
14133: GO 14090
14135: POP
14136: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
14137: LD_ADDR_VAR 0 14
14141: PUSH
14142: LD_EXP 66
14146: PPUSH
14147: LD_INT 22
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 30
14159: PUSH
14160: LD_INT 3
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 50
14169: PUSH
14170: EMPTY
14171: LIST
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: PPUSH
14178: CALL_OW 70
14182: ST_TO_ADDR
// if fac then
14183: LD_VAR 0 14
14187: IFFALSE 14784
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14189: LD_EXP 63
14193: PPUSH
14194: LD_INT 3
14196: PUSH
14197: LD_INT 60
14199: PUSH
14200: EMPTY
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 3
14209: PUSH
14210: LD_INT 25
14212: PUSH
14213: LD_INT 3
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 72
14232: IFFALSE 14375
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14234: LD_ADDR_VAR 0 1
14238: PUSH
14239: LD_EXP 63
14243: PPUSH
14244: LD_INT 3
14246: PUSH
14247: LD_INT 60
14249: PUSH
14250: EMPTY
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 3
14259: PUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PPUSH
14278: CALL_OW 72
14282: PUSH
14283: FOR_IN
14284: IFFALSE 14373
// begin SetTag ( i , tMech ) ;
14286: LD_VAR 0 1
14290: PPUSH
14291: LD_INT 7
14293: PPUSH
14294: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14298: LD_VAR 0 1
14302: PPUSH
14303: CALL_OW 310
14307: IFFALSE 14330
14309: PUSH
14310: LD_VAR 0 1
14314: PPUSH
14315: CALL_OW 310
14319: PUSH
14320: LD_VAR 0 14
14324: PUSH
14325: LD_INT 1
14327: ARRAY
14328: NONEQUAL
14329: AND
14330: IFFALSE 14341
// ComExitBuilding ( i ) ;
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14341: LD_VAR 0 1
14345: PPUSH
14346: LD_VAR 0 14
14350: PUSH
14351: LD_INT 1
14353: ARRAY
14354: PPUSH
14355: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14359: LD_VAR 0 1
14363: PPUSH
14364: LD_INT 3
14366: PPUSH
14367: CALL_OW 183
// end ;
14371: GO 14283
14373: POP
14374: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14375: LD_EXP 63
14379: PPUSH
14380: LD_INT 25
14382: PUSH
14383: LD_INT 3
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 3
14392: PUSH
14393: LD_INT 54
14395: PUSH
14396: EMPTY
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 120
14405: PUSH
14406: LD_INT 7
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 50
14415: PUSH
14416: EMPTY
14417: LIST
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 72
14429: IFFALSE 14516
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14431: LD_ADDR_VAR 0 1
14435: PUSH
14436: LD_EXP 63
14440: PPUSH
14441: LD_INT 25
14443: PUSH
14444: LD_INT 3
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 3
14453: PUSH
14454: LD_INT 54
14456: PUSH
14457: EMPTY
14458: LIST
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 120
14466: PUSH
14467: LD_INT 7
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 50
14476: PUSH
14477: EMPTY
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PPUSH
14486: CALL_OW 72
14490: PUSH
14491: FOR_IN
14492: IFFALSE 14514
// ComEnterUnit ( i , fac [ 1 ] ) ;
14494: LD_VAR 0 1
14498: PPUSH
14499: LD_VAR 0 14
14503: PUSH
14504: LD_INT 1
14506: ARRAY
14507: PPUSH
14508: CALL_OW 120
14512: GO 14491
14514: POP
14515: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14516: LD_VAR 0 14
14520: PUSH
14521: LD_INT 1
14523: ARRAY
14524: PPUSH
14525: CALL_OW 461
14529: PUSH
14530: LD_INT 2
14532: EQUAL
14533: IFFALSE 14784
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14535: LD_ADDR_VAR 0 15
14539: PUSH
14540: LD_EXP 66
14544: PPUSH
14545: LD_INT 2
14547: PUSH
14548: LD_INT 30
14550: PUSH
14551: LD_INT 32
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 30
14560: PUSH
14561: LD_INT 33
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 35
14575: PUSH
14576: LD_INT 0
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PPUSH
14587: CALL_OW 70
14591: ST_TO_ADDR
// if emptyTowers then
14592: LD_VAR 0 15
14596: IFFALSE 14646
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14598: LD_ADDR_VAR 0 16
14602: PUSH
14603: LD_VAR 0 15
14607: PUSH
14608: LD_INT 1
14610: ARRAY
14611: PPUSH
14612: LD_EXP 66
14616: PPUSH
14617: CALL 66997 0 2
14621: ST_TO_ADDR
// if weapon then
14622: LD_VAR 0 16
14626: IFFALSE 14646
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14628: LD_VAR 0 15
14632: PUSH
14633: LD_INT 1
14635: ARRAY
14636: PPUSH
14637: LD_VAR 0 16
14641: PPUSH
14642: CALL_OW 148
// end ; if ruConstructList then
14646: LD_EXP 70
14650: IFFALSE 14784
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14652: LD_VAR 0 14
14656: PUSH
14657: LD_INT 1
14659: ARRAY
14660: PPUSH
14661: LD_EXP 70
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: PUSH
14670: LD_INT 1
14672: ARRAY
14673: PPUSH
14674: LD_EXP 70
14678: PUSH
14679: LD_INT 1
14681: ARRAY
14682: PUSH
14683: LD_INT 2
14685: ARRAY
14686: PPUSH
14687: LD_EXP 70
14691: PUSH
14692: LD_INT 1
14694: ARRAY
14695: PUSH
14696: LD_INT 3
14698: ARRAY
14699: PPUSH
14700: LD_EXP 70
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PUSH
14709: LD_INT 4
14711: ARRAY
14712: PPUSH
14713: CALL_OW 448
14717: IFFALSE 14784
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14719: LD_VAR 0 14
14723: PUSH
14724: LD_INT 1
14726: ARRAY
14727: PPUSH
14728: LD_EXP 70
14732: PUSH
14733: LD_INT 1
14735: ARRAY
14736: PUSH
14737: LD_INT 1
14739: ARRAY
14740: PPUSH
14741: LD_EXP 70
14745: PUSH
14746: LD_INT 1
14748: ARRAY
14749: PUSH
14750: LD_INT 2
14752: ARRAY
14753: PPUSH
14754: LD_EXP 70
14758: PUSH
14759: LD_INT 1
14761: ARRAY
14762: PUSH
14763: LD_INT 3
14765: ARRAY
14766: PPUSH
14767: LD_EXP 70
14771: PUSH
14772: LD_INT 1
14774: ARRAY
14775: PUSH
14776: LD_INT 4
14778: ARRAY
14779: PPUSH
14780: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14784: LD_ADDR_VAR 0 2
14788: PUSH
14789: LD_EXP 66
14793: PPUSH
14794: LD_INT 21
14796: PUSH
14797: LD_INT 3
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 3
14806: PUSH
14807: LD_INT 57
14809: PUSH
14810: EMPTY
14811: LIST
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: LD_INT 24
14822: PUSH
14823: LD_INT 1000
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL_OW 70
14843: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14844: LD_ADDR_VAR 0 8
14848: PUSH
14849: LD_EXP 72
14853: PPUSH
14854: CALL_OW 435
14858: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14859: LD_ADDR_VAR 0 9
14863: PUSH
14864: LD_EXP 59
14868: PPUSH
14869: LD_INT 25
14871: PUSH
14872: LD_INT 4
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 50
14881: PUSH
14882: EMPTY
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PPUSH
14889: CALL_OW 72
14893: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14894: LD_ADDR_VAR 0 4
14898: PUSH
14899: LD_EXP 66
14903: PPUSH
14904: LD_INT 2
14906: PUSH
14907: LD_INT 30
14909: PUSH
14910: LD_INT 6
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 30
14919: PUSH
14920: LD_INT 7
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 30
14929: PUSH
14930: LD_INT 8
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: PPUSH
14943: CALL_OW 70
14947: ST_TO_ADDR
// if sci then
14948: LD_VAR 0 9
14952: IFFALSE 15113
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14954: LD_ADDR_VAR 0 11
14958: PUSH
14959: LD_EXP 59
14963: PPUSH
14964: LD_INT 95
14966: PUSH
14967: LD_EXP 66
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 120
14978: PUSH
14979: LD_INT 1
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PPUSH
14990: CALL_OW 72
14994: ST_TO_ADDR
// if hurtUnits then
14995: LD_VAR 0 11
14999: IFFALSE 15060
// begin for i in sci do
15001: LD_ADDR_VAR 0 1
15005: PUSH
15006: LD_VAR 0 9
15010: PUSH
15011: FOR_IN
15012: IFFALSE 15056
// if IsInUnit ( i ) then
15014: LD_VAR 0 1
15018: PPUSH
15019: CALL_OW 310
15023: IFFALSE 15036
// ComExitBuilding ( i ) else
15025: LD_VAR 0 1
15029: PPUSH
15030: CALL_OW 122
15034: GO 15054
// ComHeal ( i , hurtUnits [ 1 ] ) ;
15036: LD_VAR 0 1
15040: PPUSH
15041: LD_VAR 0 11
15045: PUSH
15046: LD_INT 1
15048: ARRAY
15049: PPUSH
15050: CALL_OW 128
15054: GO 15011
15056: POP
15057: POP
// end else
15058: GO 15113
// if lab then
15060: LD_VAR 0 4
15064: IFFALSE 15113
// begin for i in sci do
15066: LD_ADDR_VAR 0 1
15070: PUSH
15071: LD_VAR 0 9
15075: PUSH
15076: FOR_IN
15077: IFFALSE 15111
// if not IsInUnit ( i ) then
15079: LD_VAR 0 1
15083: PPUSH
15084: CALL_OW 310
15088: NOT
15089: IFFALSE 15109
// ComEnterUnit ( i , lab [ 1 ] ) ;
15091: LD_VAR 0 1
15095: PPUSH
15096: LD_VAR 0 4
15100: PUSH
15101: LD_INT 1
15103: ARRAY
15104: PPUSH
15105: CALL_OW 120
15109: GO 15076
15111: POP
15112: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
15113: LD_ADDR_VAR 0 5
15117: PUSH
15118: LD_EXP 59
15122: PPUSH
15123: LD_INT 25
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PPUSH
15133: CALL_OW 72
15137: ST_TO_ADDR
// if eng then
15138: LD_VAR 0 5
15142: IFFALSE 15937
// begin for i in eng do
15144: LD_ADDR_VAR 0 1
15148: PUSH
15149: LD_VAR 0 5
15153: PUSH
15154: FOR_IN
15155: IFFALSE 15935
// begin tag := GetTag ( i ) ;
15157: LD_ADDR_VAR 0 6
15161: PUSH
15162: LD_VAR 0 1
15166: PPUSH
15167: CALL_OW 110
15171: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15172: LD_VAR 0 1
15176: PPUSH
15177: CALL_OW 256
15181: PUSH
15182: LD_INT 800
15184: LESS
15185: IFFALSE 15197
15187: PUSH
15188: LD_VAR 0 6
15192: PUSH
15193: LD_INT 1
15195: NONEQUAL
15196: AND
15197: IFFALSE 15247
// begin SetTag ( i , tHeal ) ;
15199: LD_VAR 0 1
15203: PPUSH
15204: LD_INT 1
15206: PPUSH
15207: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15211: LD_VAR 0 1
15215: PPUSH
15216: LD_EXP 74
15220: PUSH
15221: LD_INT 1
15223: ARRAY
15224: PPUSH
15225: LD_EXP 74
15229: PUSH
15230: LD_INT 2
15232: ARRAY
15233: PPUSH
15234: CALL_OW 111
// AddComHold ( i ) ;
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15247: LD_VAR 0 6
15251: PUSH
15252: LD_INT 1
15254: EQUAL
15255: IFFALSE 15272
15257: PUSH
15258: LD_VAR 0 1
15262: PPUSH
15263: CALL_OW 256
15267: PUSH
15268: LD_INT 1000
15270: EQUAL
15271: AND
15272: IFFALSE 15286
// SetTag ( i , 0 ) ;
15274: LD_VAR 0 1
15278: PPUSH
15279: LD_INT 0
15281: PPUSH
15282: CALL_OW 109
// if not tag then
15286: LD_VAR 0 6
15290: NOT
15291: IFFALSE 15467
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15293: LD_ADDR_VAR 0 3
15297: PUSH
15298: LD_EXP 66
15302: PPUSH
15303: LD_INT 57
15305: PUSH
15306: EMPTY
15307: LIST
15308: PPUSH
15309: CALL_OW 70
15313: ST_TO_ADDR
// if undone then
15314: LD_VAR 0 3
15318: IFFALSE 15340
// begin ComComplete ( i , undone [ 1 ] ) ;
15320: LD_VAR 0 1
15324: PPUSH
15325: LD_VAR 0 3
15329: PUSH
15330: LD_INT 1
15332: ARRAY
15333: PPUSH
15334: CALL 64842 0 2
// continue ;
15338: GO 15154
// end ; if cr or tmp or Count ( ruBuildings ) then
15340: LD_VAR 0 8
15344: IFTRUE 15352
15346: PUSH
15347: LD_VAR 0 2
15351: OR
15352: IFTRUE 15365
15354: PUSH
15355: LD_EXP 76
15359: PPUSH
15360: CALL 58706 0 1
15364: OR
15365: IFFALSE 15441
// begin if IsInUnit ( i ) then
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 310
15376: IFFALSE 15387
// ComExitBuilding ( i ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 122
// if tmp then
15387: LD_VAR 0 2
15391: IFFALSE 15407
// SetTag ( i , tRepair ) else
15393: LD_VAR 0 1
15397: PPUSH
15398: LD_INT 3
15400: PPUSH
15401: CALL_OW 109
15405: GO 15439
// if cr then
15407: LD_VAR 0 8
15411: IFFALSE 15427
// SetTag ( i , tCrates ) else
15413: LD_VAR 0 1
15417: PPUSH
15418: LD_INT 2
15420: PPUSH
15421: CALL_OW 109
15425: GO 15439
// SetTag ( i , tBuild ) ;
15427: LD_VAR 0 1
15431: PPUSH
15432: LD_INT 5
15434: PPUSH
15435: CALL_OW 109
// end else
15439: GO 15467
// if not IsInUnit ( i ) then
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 310
15450: NOT
15451: IFFALSE 15467
// ComEnterUnit ( i , ruBase ) ;
15453: LD_VAR 0 1
15457: PPUSH
15458: LD_EXP 68
15462: PPUSH
15463: CALL_OW 120
// end ; if tag = tRepair then
15467: LD_VAR 0 6
15471: PUSH
15472: LD_INT 3
15474: EQUAL
15475: IFFALSE 15581
// begin if IsInUnit ( i ) then
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 310
15486: IFFALSE 15499
// begin ComExitBuilding ( i ) ;
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 122
// continue ;
15497: GO 15154
// end ; if not tmp then
15499: LD_VAR 0 2
15503: NOT
15504: IFFALSE 15520
// begin SetTag ( i , 0 ) ;
15506: LD_VAR 0 1
15510: PPUSH
15511: LD_INT 0
15513: PPUSH
15514: CALL_OW 109
// continue ;
15518: GO 15154
// end ; if not HasTask ( i ) then
15520: LD_VAR 0 1
15524: PPUSH
15525: CALL_OW 314
15529: NOT
15530: IFFALSE 15550
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15532: LD_VAR 0 1
15536: PPUSH
15537: LD_VAR 0 2
15541: PUSH
15542: LD_INT 1
15544: ARRAY
15545: PPUSH
15546: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15550: LD_VAR 0 1
15554: PPUSH
15555: LD_EXP 66
15559: PPUSH
15560: CALL_OW 308
15564: NOT
15565: IFFALSE 15581
// ComMoveToArea ( i , ruBaseArea ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: LD_EXP 66
15576: PPUSH
15577: CALL_OW 113
// end ; if tag = tBuild then
15581: LD_VAR 0 6
15585: PUSH
15586: LD_INT 5
15588: EQUAL
15589: IFFALSE 15788
// begin if IsInUnit ( i ) then
15591: LD_VAR 0 1
15595: PPUSH
15596: CALL_OW 310
15600: IFFALSE 15613
// begin ComExitBuilding ( i ) ;
15602: LD_VAR 0 1
15606: PPUSH
15607: CALL_OW 122
// continue ;
15611: GO 15154
// end ; if not Count ( ruBuildings ) then
15613: LD_EXP 76
15617: PPUSH
15618: CALL 58706 0 1
15622: NOT
15623: IFFALSE 15641
// begin SetTag ( i , 0 ) ;
15625: LD_VAR 0 1
15629: PPUSH
15630: LD_INT 0
15632: PPUSH
15633: CALL_OW 109
// continue ;
15637: GO 15154
// end else
15639: GO 15680
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15641: LD_EXP 68
15645: PPUSH
15646: LD_EXP 76
15650: PUSH
15651: LD_INT 1
15653: ARRAY
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: CALL 98733 0 2
15663: NOT
15664: IFFALSE 15680
// begin SetTag ( i , 0 ) ;
15666: LD_VAR 0 1
15670: PPUSH
15671: LD_INT 0
15673: PPUSH
15674: CALL_OW 109
// continue ;
15678: GO 15154
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15680: LD_ADDR_VAR 0 3
15684: PUSH
15685: LD_EXP 66
15689: PPUSH
15690: LD_INT 57
15692: PUSH
15693: EMPTY
15694: LIST
15695: PPUSH
15696: CALL_OW 70
15700: ST_TO_ADDR
// if undone then
15701: LD_VAR 0 3
15705: IFFALSE 15727
// begin ComComplete ( i , undone [ 1 ] ) ;
15707: LD_VAR 0 1
15711: PPUSH
15712: LD_VAR 0 3
15716: PUSH
15717: LD_INT 1
15719: ARRAY
15720: PPUSH
15721: CALL 64842 0 2
// continue ;
15725: GO 15154
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15727: LD_VAR 0 1
15731: PPUSH
15732: LD_EXP 76
15736: PUSH
15737: LD_INT 1
15739: ARRAY
15740: PUSH
15741: LD_INT 1
15743: ARRAY
15744: PPUSH
15745: LD_EXP 76
15749: PUSH
15750: LD_INT 1
15752: ARRAY
15753: PUSH
15754: LD_INT 2
15756: ARRAY
15757: PPUSH
15758: LD_EXP 76
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: PUSH
15767: LD_INT 3
15769: ARRAY
15770: PPUSH
15771: LD_EXP 76
15775: PUSH
15776: LD_INT 1
15778: ARRAY
15779: PUSH
15780: LD_INT 4
15782: ARRAY
15783: PPUSH
15784: CALL_OW 145
// end ; if tag = tCrates then
15788: LD_VAR 0 6
15792: PUSH
15793: LD_INT 2
15795: EQUAL
15796: IFFALSE 15933
// begin if IsInUnit ( i ) then
15798: LD_VAR 0 1
15802: PPUSH
15803: CALL_OW 310
15807: IFFALSE 15820
// begin ComExitBuilding ( i ) ;
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 122
// continue ;
15818: GO 15154
// end ; if not cr then
15820: LD_VAR 0 8
15824: NOT
15825: IFFALSE 15841
// begin SetTag ( i , 0 ) ;
15827: LD_VAR 0 1
15831: PPUSH
15832: LD_INT 0
15834: PPUSH
15835: CALL_OW 109
// continue ;
15839: GO 15154
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 314
15850: NOT
15851: IFFALSE 15904
15853: PUSH
15854: LD_INT 81
15856: PUSH
15857: LD_INT 3
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 92
15866: PUSH
15867: LD_VAR 0 8
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PUSH
15876: LD_VAR 0 8
15880: PUSH
15881: LD_INT 2
15883: ARRAY
15884: PUSH
15885: LD_INT 12
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PPUSH
15898: CALL_OW 69
15902: NOT
15903: AND
15904: IFFALSE 15933
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_VAR 0 8
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_VAR 0 8
15924: PUSH
15925: LD_INT 2
15927: ARRAY
15928: PPUSH
15929: CALL_OW 117
// end ; end ;
15933: GO 15154
15935: POP
15936: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15937: LD_ADDR_VAR 0 10
15941: PUSH
15942: LD_EXP 59
15946: PPUSH
15947: LD_INT 2
15949: PUSH
15950: LD_INT 25
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 25
15962: PUSH
15963: LD_INT 9
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 50
15977: PUSH
15978: EMPTY
15979: LIST
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PPUSH
15985: CALL_OW 72
15989: PUSH
15990: LD_EXP 61
15994: UNION
15995: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15996: LD_ADDR_VAR 0 12
16000: PUSH
16001: LD_EXP 66
16005: PPUSH
16006: LD_INT 81
16008: PUSH
16009: LD_INT 3
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 70
16020: ST_TO_ADDR
// if sol then
16021: LD_VAR 0 10
16025: IFFALSE 16559
// begin if enemyInBase then
16027: LD_VAR 0 12
16031: IFFALSE 16174
// begin for i in sol do
16033: LD_ADDR_VAR 0 1
16037: PUSH
16038: LD_VAR 0 10
16042: PUSH
16043: FOR_IN
16044: IFFALSE 16170
// begin tw := IsInUnit ( i ) ;
16046: LD_ADDR_VAR 0 7
16050: PUSH
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 310
16060: ST_TO_ADDR
// if tw then
16061: LD_VAR 0 7
16065: IFFALSE 16144
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
16067: LD_VAR 0 7
16071: PUSH
16072: LD_INT 22
16074: PUSH
16075: LD_INT 3
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 101
16084: PUSH
16085: LD_INT 1
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 2
16094: PUSH
16095: LD_INT 30
16097: PUSH
16098: LD_INT 32
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 30
16107: PUSH
16108: LD_INT 31
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: LIST
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: PPUSH
16125: CALL_OW 69
16129: IN
16130: NOT
16131: IFFALSE 16142
// ComExitBuilding ( i ) ;
16133: LD_VAR 0 1
16137: PPUSH
16138: CALL_OW 122
// end else
16142: GO 16168
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
16144: LD_VAR 0 1
16148: PPUSH
16149: LD_VAR 0 12
16153: PPUSH
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 74
16163: PPUSH
16164: CALL_OW 115
// end ;
16168: GO 16043
16170: POP
16171: POP
// end else
16172: GO 16559
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16174: LD_ADDR_VAR 0 13
16178: PUSH
16179: LD_EXP 66
16183: PPUSH
16184: LD_INT 3
16186: PUSH
16187: LD_INT 62
16189: PUSH
16190: EMPTY
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 2
16199: PUSH
16200: LD_INT 30
16202: PUSH
16203: LD_INT 32
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 30
16212: PUSH
16213: LD_INT 4
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 30
16222: PUSH
16223: LD_INT 5
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 30
16232: PUSH
16233: LD_INT 31
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PPUSH
16251: CALL_OW 70
16255: ST_TO_ADDR
// if empty then
16256: LD_VAR 0 13
16260: IFFALSE 16277
// empty := ReverseArray ( empty ) ;
16262: LD_ADDR_VAR 0 13
16266: PUSH
16267: LD_VAR 0 13
16271: PPUSH
16272: CALL 89728 0 1
16276: ST_TO_ADDR
// for i in sol do
16277: LD_ADDR_VAR 0 1
16281: PUSH
16282: LD_VAR 0 10
16286: PUSH
16287: FOR_IN
16288: IFFALSE 16557
// begin tag := GetTag ( i ) ;
16290: LD_ADDR_VAR 0 6
16294: PUSH
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 110
16304: ST_TO_ADDR
// if tag = tMech then
16305: LD_VAR 0 6
16309: PUSH
16310: LD_INT 7
16312: EQUAL
16313: IFFALSE 16317
// continue ;
16315: GO 16287
// if GetLives ( i ) < 1000 and tag <> tHeal then
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 256
16326: PUSH
16327: LD_INT 1000
16329: LESS
16330: IFFALSE 16342
16332: PUSH
16333: LD_VAR 0 6
16337: PUSH
16338: LD_INT 1
16340: NONEQUAL
16341: AND
16342: IFFALSE 16394
// begin SetTag ( i , tHeal ) ;
16344: LD_VAR 0 1
16348: PPUSH
16349: LD_INT 1
16351: PPUSH
16352: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16356: LD_VAR 0 1
16360: PPUSH
16361: LD_EXP 74
16365: PUSH
16366: LD_INT 1
16368: ARRAY
16369: PPUSH
16370: LD_EXP 74
16374: PUSH
16375: LD_INT 2
16377: ARRAY
16378: PPUSH
16379: CALL_OW 111
// AddComHold ( i ) ;
16383: LD_VAR 0 1
16387: PPUSH
16388: CALL_OW 200
// continue ;
16392: GO 16287
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 256
16403: PUSH
16404: LD_INT 1000
16406: EQUAL
16407: IFFALSE 16419
16409: PUSH
16410: LD_VAR 0 6
16414: PUSH
16415: LD_INT 1
16417: EQUAL
16418: AND
16419: IFFALSE 16435
// begin SetTag ( i , 0 ) ;
16421: LD_VAR 0 1
16425: PPUSH
16426: LD_INT 0
16428: PPUSH
16429: CALL_OW 109
// continue ;
16433: GO 16287
// end ; if HasTask ( i ) then
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 314
16444: IFFALSE 16448
// continue ;
16446: GO 16287
// if not IsInUnit ( i ) and not tag and empty then
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 310
16457: NOT
16458: IFFALSE 16467
16460: PUSH
16461: LD_VAR 0 6
16465: NOT
16466: AND
16467: IFFALSE 16475
16469: PUSH
16470: LD_VAR 0 13
16474: AND
16475: IFFALSE 16555
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16477: LD_VAR 0 1
16481: PPUSH
16482: LD_VAR 0 13
16486: PUSH
16487: LD_INT 1
16489: ARRAY
16490: PPUSH
16491: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16495: LD_VAR 0 13
16499: PUSH
16500: LD_INT 1
16502: ARRAY
16503: PPUSH
16504: CALL_OW 266
16508: PUSH
16509: LD_INT 5
16511: EQUAL
16512: IFFALSE 16523
16514: PUSH
16515: LD_INT 50
16517: PPUSH
16518: CALL_OW 13
16522: AND
16523: IFFALSE 16537
// AddComChangeProfession ( i , class_bazooker ) ;
16525: LD_VAR 0 1
16529: PPUSH
16530: LD_INT 9
16532: PPUSH
16533: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16537: LD_ADDR_VAR 0 13
16541: PUSH
16542: LD_VAR 0 13
16546: PPUSH
16547: LD_INT 1
16549: PPUSH
16550: CALL_OW 3
16554: ST_TO_ADDR
// end ; end ;
16555: GO 16287
16557: POP
16558: POP
// end ; end ; end ;
16559: PPOPN 16
16561: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16562: LD_EXP 15
16566: IFFALSE 16579
16568: PUSH
16569: LD_EXP 60
16573: PPUSH
16574: CALL 58706 0 1
16578: AND
16579: IFFALSE 19183
16581: GO 16583
16583: DISABLE
16584: LD_INT 0
16586: PPUSH
16587: PPUSH
16588: PPUSH
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
16593: PPUSH
16594: PPUSH
16595: PPUSH
16596: PPUSH
16597: PPUSH
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
// begin enable ;
16602: ENABLE
// if ruTech then
16603: LD_EXP 65
16607: IFFALSE 16761
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16609: LD_ADDR_VAR 0 4
16613: PUSH
16614: LD_INT 22
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 50
16626: PUSH
16627: EMPTY
16628: LIST
16629: PUSH
16630: LD_INT 2
16632: PUSH
16633: LD_INT 30
16635: PUSH
16636: LD_INT 6
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 30
16645: PUSH
16646: LD_INT 7
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 30
16655: PUSH
16656: LD_INT 8
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: ST_TO_ADDR
// if lab then
16679: LD_VAR 0 4
16683: IFFALSE 16761
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16685: LD_VAR 0 4
16689: PUSH
16690: LD_INT 1
16692: ARRAY
16693: PPUSH
16694: CALL_OW 461
16698: PUSH
16699: LD_INT 2
16701: EQUAL
16702: IFFALSE 16761
// begin for i in ruTech do
16704: LD_ADDR_VAR 0 1
16708: PUSH
16709: LD_EXP 65
16713: PUSH
16714: FOR_IN
16715: IFFALSE 16759
// if CanBeResearched ( lab [ 1 ] , i ) then
16717: LD_VAR 0 4
16721: PUSH
16722: LD_INT 1
16724: ARRAY
16725: PPUSH
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL_OW 430
16735: IFFALSE 16757
// begin ComResearch ( lab [ 1 ] , i ) ;
16737: LD_VAR 0 4
16741: PUSH
16742: LD_INT 1
16744: ARRAY
16745: PPUSH
16746: LD_VAR 0 1
16750: PPUSH
16751: CALL_OW 124
// break ;
16755: GO 16759
// end ;
16757: GO 16714
16759: POP
16760: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16761: LD_ADDR_VAR 0 14
16765: PUSH
16766: LD_EXP 67
16770: PPUSH
16771: LD_INT 22
16773: PUSH
16774: LD_INT 3
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 30
16783: PUSH
16784: LD_INT 3
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 50
16793: PUSH
16794: EMPTY
16795: LIST
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: PPUSH
16802: CALL_OW 70
16806: ST_TO_ADDR
// if fac then
16807: LD_VAR 0 14
16811: IFFALSE 17408
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16813: LD_EXP 64
16817: PPUSH
16818: LD_INT 3
16820: PUSH
16821: LD_INT 60
16823: PUSH
16824: EMPTY
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 3
16833: PUSH
16834: LD_INT 25
16836: PUSH
16837: LD_INT 3
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PPUSH
16852: CALL_OW 72
16856: IFFALSE 16999
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16858: LD_ADDR_VAR 0 1
16862: PUSH
16863: LD_EXP 64
16867: PPUSH
16868: LD_INT 3
16870: PUSH
16871: LD_INT 60
16873: PUSH
16874: EMPTY
16875: LIST
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 3
16883: PUSH
16884: LD_INT 25
16886: PUSH
16887: LD_INT 3
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL_OW 72
16906: PUSH
16907: FOR_IN
16908: IFFALSE 16997
// begin SetTag ( i , tMech ) ;
16910: LD_VAR 0 1
16914: PPUSH
16915: LD_INT 7
16917: PPUSH
16918: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 310
16931: IFFALSE 16954
16933: PUSH
16934: LD_VAR 0 1
16938: PPUSH
16939: CALL_OW 310
16943: PUSH
16944: LD_VAR 0 14
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: NONEQUAL
16953: AND
16954: IFFALSE 16965
// ComExitBuilding ( i ) ;
16956: LD_VAR 0 1
16960: PPUSH
16961: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16965: LD_VAR 0 1
16969: PPUSH
16970: LD_VAR 0 14
16974: PUSH
16975: LD_INT 1
16977: ARRAY
16978: PPUSH
16979: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16983: LD_VAR 0 1
16987: PPUSH
16988: LD_INT 3
16990: PPUSH
16991: CALL_OW 183
// end ;
16995: GO 16907
16997: POP
16998: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16999: LD_EXP 64
17003: PPUSH
17004: LD_INT 25
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 3
17016: PUSH
17017: LD_INT 54
17019: PUSH
17020: EMPTY
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 120
17029: PUSH
17030: LD_INT 7
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 50
17039: PUSH
17040: EMPTY
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: PPUSH
17049: CALL_OW 72
17053: IFFALSE 17140
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
17055: LD_ADDR_VAR 0 1
17059: PUSH
17060: LD_EXP 64
17064: PPUSH
17065: LD_INT 25
17067: PUSH
17068: LD_INT 3
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 3
17077: PUSH
17078: LD_INT 54
17080: PUSH
17081: EMPTY
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 120
17090: PUSH
17091: LD_INT 7
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 50
17100: PUSH
17101: EMPTY
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 72
17114: PUSH
17115: FOR_IN
17116: IFFALSE 17138
// ComEnterUnit ( i , fac [ 1 ] ) ;
17118: LD_VAR 0 1
17122: PPUSH
17123: LD_VAR 0 14
17127: PUSH
17128: LD_INT 1
17130: ARRAY
17131: PPUSH
17132: CALL_OW 120
17136: GO 17115
17138: POP
17139: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
17140: LD_VAR 0 14
17144: PUSH
17145: LD_INT 1
17147: ARRAY
17148: PPUSH
17149: CALL_OW 461
17153: PUSH
17154: LD_INT 2
17156: EQUAL
17157: IFFALSE 17408
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
17159: LD_ADDR_VAR 0 15
17163: PUSH
17164: LD_EXP 67
17168: PPUSH
17169: LD_INT 2
17171: PUSH
17172: LD_INT 30
17174: PUSH
17175: LD_INT 32
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 30
17184: PUSH
17185: LD_INT 33
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 35
17199: PUSH
17200: LD_INT 0
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PPUSH
17211: CALL_OW 70
17215: ST_TO_ADDR
// if emptyTowers then
17216: LD_VAR 0 15
17220: IFFALSE 17270
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17222: LD_ADDR_VAR 0 16
17226: PUSH
17227: LD_VAR 0 15
17231: PUSH
17232: LD_INT 1
17234: ARRAY
17235: PPUSH
17236: LD_EXP 67
17240: PPUSH
17241: CALL 66997 0 2
17245: ST_TO_ADDR
// if weapon then
17246: LD_VAR 0 16
17250: IFFALSE 17270
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17252: LD_VAR 0 15
17256: PUSH
17257: LD_INT 1
17259: ARRAY
17260: PPUSH
17261: LD_VAR 0 16
17265: PPUSH
17266: CALL_OW 148
// end ; if ruConstructList2 then
17270: LD_EXP 71
17274: IFFALSE 17408
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17276: LD_VAR 0 14
17280: PUSH
17281: LD_INT 1
17283: ARRAY
17284: PPUSH
17285: LD_EXP 71
17289: PUSH
17290: LD_INT 1
17292: ARRAY
17293: PUSH
17294: LD_INT 1
17296: ARRAY
17297: PPUSH
17298: LD_EXP 71
17302: PUSH
17303: LD_INT 1
17305: ARRAY
17306: PUSH
17307: LD_INT 2
17309: ARRAY
17310: PPUSH
17311: LD_EXP 71
17315: PUSH
17316: LD_INT 1
17318: ARRAY
17319: PUSH
17320: LD_INT 3
17322: ARRAY
17323: PPUSH
17324: LD_EXP 71
17328: PUSH
17329: LD_INT 1
17331: ARRAY
17332: PUSH
17333: LD_INT 4
17335: ARRAY
17336: PPUSH
17337: CALL_OW 448
17341: IFFALSE 17408
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17343: LD_VAR 0 14
17347: PUSH
17348: LD_INT 1
17350: ARRAY
17351: PPUSH
17352: LD_EXP 71
17356: PUSH
17357: LD_INT 1
17359: ARRAY
17360: PUSH
17361: LD_INT 1
17363: ARRAY
17364: PPUSH
17365: LD_EXP 71
17369: PUSH
17370: LD_INT 1
17372: ARRAY
17373: PUSH
17374: LD_INT 2
17376: ARRAY
17377: PPUSH
17378: LD_EXP 71
17382: PUSH
17383: LD_INT 1
17385: ARRAY
17386: PUSH
17387: LD_INT 3
17389: ARRAY
17390: PPUSH
17391: LD_EXP 71
17395: PUSH
17396: LD_INT 1
17398: ARRAY
17399: PUSH
17400: LD_INT 4
17402: ARRAY
17403: PPUSH
17404: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17408: LD_ADDR_VAR 0 2
17412: PUSH
17413: LD_EXP 67
17417: PPUSH
17418: LD_INT 21
17420: PUSH
17421: LD_INT 3
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 3
17430: PUSH
17431: LD_INT 57
17433: PUSH
17434: EMPTY
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 24
17446: PUSH
17447: LD_INT 1000
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: PPUSH
17463: CALL_OW 70
17467: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17468: LD_ADDR_VAR 0 8
17472: PUSH
17473: LD_EXP 73
17477: PPUSH
17478: CALL_OW 435
17482: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17483: LD_ADDR_VAR 0 9
17487: PUSH
17488: LD_EXP 60
17492: PPUSH
17493: LD_INT 25
17495: PUSH
17496: LD_INT 4
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 50
17505: PUSH
17506: EMPTY
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 72
17517: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17518: LD_ADDR_VAR 0 4
17522: PUSH
17523: LD_EXP 67
17527: PPUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 30
17533: PUSH
17534: LD_INT 6
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 30
17543: PUSH
17544: LD_INT 7
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 30
17553: PUSH
17554: LD_INT 8
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: PPUSH
17567: CALL_OW 70
17571: ST_TO_ADDR
// if sci then
17572: LD_VAR 0 9
17576: IFFALSE 17737
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17578: LD_ADDR_VAR 0 11
17582: PUSH
17583: LD_EXP 60
17587: PPUSH
17588: LD_INT 95
17590: PUSH
17591: LD_EXP 67
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 120
17602: PUSH
17603: LD_INT 1
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PPUSH
17614: CALL_OW 72
17618: ST_TO_ADDR
// if hurtUnits then
17619: LD_VAR 0 11
17623: IFFALSE 17684
// begin for i in sci do
17625: LD_ADDR_VAR 0 1
17629: PUSH
17630: LD_VAR 0 9
17634: PUSH
17635: FOR_IN
17636: IFFALSE 17680
// if IsInUnit ( i ) then
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 310
17647: IFFALSE 17660
// ComExitBuilding ( i ) else
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 122
17658: GO 17678
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17660: LD_VAR 0 1
17664: PPUSH
17665: LD_VAR 0 11
17669: PUSH
17670: LD_INT 1
17672: ARRAY
17673: PPUSH
17674: CALL_OW 128
17678: GO 17635
17680: POP
17681: POP
// end else
17682: GO 17737
// if lab then
17684: LD_VAR 0 4
17688: IFFALSE 17737
// begin for i in sci do
17690: LD_ADDR_VAR 0 1
17694: PUSH
17695: LD_VAR 0 9
17699: PUSH
17700: FOR_IN
17701: IFFALSE 17735
// if not IsInUnit ( i ) then
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 310
17712: NOT
17713: IFFALSE 17733
// ComEnterUnit ( i , lab [ 1 ] ) ;
17715: LD_VAR 0 1
17719: PPUSH
17720: LD_VAR 0 4
17724: PUSH
17725: LD_INT 1
17727: ARRAY
17728: PPUSH
17729: CALL_OW 120
17733: GO 17700
17735: POP
17736: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17737: LD_ADDR_VAR 0 5
17741: PUSH
17742: LD_EXP 60
17746: PPUSH
17747: LD_INT 25
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PPUSH
17757: CALL_OW 72
17761: ST_TO_ADDR
// if eng then
17762: LD_VAR 0 5
17766: IFFALSE 18561
// begin for i in eng do
17768: LD_ADDR_VAR 0 1
17772: PUSH
17773: LD_VAR 0 5
17777: PUSH
17778: FOR_IN
17779: IFFALSE 18559
// begin tag := GetTag ( i ) ;
17781: LD_ADDR_VAR 0 6
17785: PUSH
17786: LD_VAR 0 1
17790: PPUSH
17791: CALL_OW 110
17795: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 256
17805: PUSH
17806: LD_INT 800
17808: LESS
17809: IFFALSE 17821
17811: PUSH
17812: LD_VAR 0 6
17816: PUSH
17817: LD_INT 1
17819: NONEQUAL
17820: AND
17821: IFFALSE 17871
// begin SetTag ( i , tHeal ) ;
17823: LD_VAR 0 1
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17835: LD_VAR 0 1
17839: PPUSH
17840: LD_EXP 75
17844: PUSH
17845: LD_INT 1
17847: ARRAY
17848: PPUSH
17849: LD_EXP 75
17853: PUSH
17854: LD_INT 2
17856: ARRAY
17857: PPUSH
17858: CALL_OW 111
// AddComHold ( i ) ;
17862: LD_VAR 0 1
17866: PPUSH
17867: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17871: LD_VAR 0 6
17875: PUSH
17876: LD_INT 1
17878: EQUAL
17879: IFFALSE 17896
17881: PUSH
17882: LD_VAR 0 1
17886: PPUSH
17887: CALL_OW 256
17891: PUSH
17892: LD_INT 1000
17894: EQUAL
17895: AND
17896: IFFALSE 17910
// SetTag ( i , 0 ) ;
17898: LD_VAR 0 1
17902: PPUSH
17903: LD_INT 0
17905: PPUSH
17906: CALL_OW 109
// if not tag then
17910: LD_VAR 0 6
17914: NOT
17915: IFFALSE 18091
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17917: LD_ADDR_VAR 0 3
17921: PUSH
17922: LD_EXP 67
17926: PPUSH
17927: LD_INT 57
17929: PUSH
17930: EMPTY
17931: LIST
17932: PPUSH
17933: CALL_OW 70
17937: ST_TO_ADDR
// if undone then
17938: LD_VAR 0 3
17942: IFFALSE 17964
// begin ComComplete ( i , undone [ 1 ] ) ;
17944: LD_VAR 0 1
17948: PPUSH
17949: LD_VAR 0 3
17953: PUSH
17954: LD_INT 1
17956: ARRAY
17957: PPUSH
17958: CALL 64842 0 2
// continue ;
17962: GO 17778
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17964: LD_VAR 0 8
17968: IFTRUE 17976
17970: PUSH
17971: LD_VAR 0 2
17975: OR
17976: IFTRUE 17989
17978: PUSH
17979: LD_EXP 77
17983: PPUSH
17984: CALL 58706 0 1
17988: OR
17989: IFFALSE 18065
// begin if IsInUnit ( i ) then
17991: LD_VAR 0 1
17995: PPUSH
17996: CALL_OW 310
18000: IFFALSE 18011
// ComExitBuilding ( i ) ;
18002: LD_VAR 0 1
18006: PPUSH
18007: CALL_OW 122
// if tmp then
18011: LD_VAR 0 2
18015: IFFALSE 18031
// SetTag ( i , tRepair ) else
18017: LD_VAR 0 1
18021: PPUSH
18022: LD_INT 3
18024: PPUSH
18025: CALL_OW 109
18029: GO 18063
// if cr then
18031: LD_VAR 0 8
18035: IFFALSE 18051
// SetTag ( i , tCrates ) else
18037: LD_VAR 0 1
18041: PPUSH
18042: LD_INT 2
18044: PPUSH
18045: CALL_OW 109
18049: GO 18063
// SetTag ( i , tBuild ) ;
18051: LD_VAR 0 1
18055: PPUSH
18056: LD_INT 5
18058: PPUSH
18059: CALL_OW 109
// end else
18063: GO 18091
// if not IsInUnit ( i ) then
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 310
18074: NOT
18075: IFFALSE 18091
// ComEnterUnit ( i , ruBase2 ) ;
18077: LD_VAR 0 1
18081: PPUSH
18082: LD_EXP 69
18086: PPUSH
18087: CALL_OW 120
// end ; if tag = tRepair then
18091: LD_VAR 0 6
18095: PUSH
18096: LD_INT 3
18098: EQUAL
18099: IFFALSE 18205
// begin if IsInUnit ( i ) then
18101: LD_VAR 0 1
18105: PPUSH
18106: CALL_OW 310
18110: IFFALSE 18123
// begin ComExitBuilding ( i ) ;
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 122
// continue ;
18121: GO 17778
// end ; if not tmp then
18123: LD_VAR 0 2
18127: NOT
18128: IFFALSE 18144
// begin SetTag ( i , 0 ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 0
18137: PPUSH
18138: CALL_OW 109
// continue ;
18142: GO 17778
// end ; if not HasTask ( i ) then
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL_OW 314
18153: NOT
18154: IFFALSE 18174
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18156: LD_VAR 0 1
18160: PPUSH
18161: LD_VAR 0 2
18165: PUSH
18166: LD_INT 1
18168: ARRAY
18169: PPUSH
18170: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18174: LD_VAR 0 1
18178: PPUSH
18179: LD_EXP 67
18183: PPUSH
18184: CALL_OW 308
18188: NOT
18189: IFFALSE 18205
// ComMoveToArea ( i , ruBaseArea2 ) ;
18191: LD_VAR 0 1
18195: PPUSH
18196: LD_EXP 67
18200: PPUSH
18201: CALL_OW 113
// end ; if tag = tBuild then
18205: LD_VAR 0 6
18209: PUSH
18210: LD_INT 5
18212: EQUAL
18213: IFFALSE 18412
// begin if IsInUnit ( i ) then
18215: LD_VAR 0 1
18219: PPUSH
18220: CALL_OW 310
18224: IFFALSE 18237
// begin ComExitBuilding ( i ) ;
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 122
// continue ;
18235: GO 17778
// end ; if not Count ( ruBuildings2 ) then
18237: LD_EXP 77
18241: PPUSH
18242: CALL 58706 0 1
18246: NOT
18247: IFFALSE 18265
// begin SetTag ( i , 0 ) ;
18249: LD_VAR 0 1
18253: PPUSH
18254: LD_INT 0
18256: PPUSH
18257: CALL_OW 109
// continue ;
18261: GO 17778
// end else
18263: GO 18304
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18265: LD_EXP 69
18269: PPUSH
18270: LD_EXP 77
18274: PUSH
18275: LD_INT 1
18277: ARRAY
18278: PUSH
18279: LD_INT 1
18281: ARRAY
18282: PPUSH
18283: CALL 98733 0 2
18287: NOT
18288: IFFALSE 18304
// begin SetTag ( i , 0 ) ;
18290: LD_VAR 0 1
18294: PPUSH
18295: LD_INT 0
18297: PPUSH
18298: CALL_OW 109
// continue ;
18302: GO 17778
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18304: LD_ADDR_VAR 0 3
18308: PUSH
18309: LD_EXP 67
18313: PPUSH
18314: LD_INT 57
18316: PUSH
18317: EMPTY
18318: LIST
18319: PPUSH
18320: CALL_OW 70
18324: ST_TO_ADDR
// if undone then
18325: LD_VAR 0 3
18329: IFFALSE 18351
// begin ComComplete ( i , undone [ 1 ] ) ;
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_VAR 0 3
18340: PUSH
18341: LD_INT 1
18343: ARRAY
18344: PPUSH
18345: CALL 64842 0 2
// continue ;
18349: GO 17778
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: LD_EXP 77
18360: PUSH
18361: LD_INT 1
18363: ARRAY
18364: PUSH
18365: LD_INT 1
18367: ARRAY
18368: PPUSH
18369: LD_EXP 77
18373: PUSH
18374: LD_INT 1
18376: ARRAY
18377: PUSH
18378: LD_INT 2
18380: ARRAY
18381: PPUSH
18382: LD_EXP 77
18386: PUSH
18387: LD_INT 1
18389: ARRAY
18390: PUSH
18391: LD_INT 3
18393: ARRAY
18394: PPUSH
18395: LD_EXP 77
18399: PUSH
18400: LD_INT 1
18402: ARRAY
18403: PUSH
18404: LD_INT 4
18406: ARRAY
18407: PPUSH
18408: CALL_OW 145
// end ; if tag = tCrates then
18412: LD_VAR 0 6
18416: PUSH
18417: LD_INT 2
18419: EQUAL
18420: IFFALSE 18557
// begin if IsInUnit ( i ) then
18422: LD_VAR 0 1
18426: PPUSH
18427: CALL_OW 310
18431: IFFALSE 18444
// begin ComExitBuilding ( i ) ;
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 122
// continue ;
18442: GO 17778
// end ; if not cr then
18444: LD_VAR 0 8
18448: NOT
18449: IFFALSE 18465
// begin SetTag ( i , 0 ) ;
18451: LD_VAR 0 1
18455: PPUSH
18456: LD_INT 0
18458: PPUSH
18459: CALL_OW 109
// continue ;
18463: GO 17778
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18465: LD_VAR 0 1
18469: PPUSH
18470: CALL_OW 314
18474: NOT
18475: IFFALSE 18528
18477: PUSH
18478: LD_INT 81
18480: PUSH
18481: LD_INT 3
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 92
18490: PUSH
18491: LD_VAR 0 8
18495: PUSH
18496: LD_INT 1
18498: ARRAY
18499: PUSH
18500: LD_VAR 0 8
18504: PUSH
18505: LD_INT 2
18507: ARRAY
18508: PUSH
18509: LD_INT 12
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PPUSH
18522: CALL_OW 69
18526: NOT
18527: AND
18528: IFFALSE 18557
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18530: LD_VAR 0 1
18534: PPUSH
18535: LD_VAR 0 8
18539: PUSH
18540: LD_INT 1
18542: ARRAY
18543: PPUSH
18544: LD_VAR 0 8
18548: PUSH
18549: LD_INT 2
18551: ARRAY
18552: PPUSH
18553: CALL_OW 117
// end ; end ;
18557: GO 17778
18559: POP
18560: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18561: LD_ADDR_VAR 0 10
18565: PUSH
18566: LD_EXP 60
18570: PPUSH
18571: LD_INT 2
18573: PUSH
18574: LD_INT 25
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 25
18586: PUSH
18587: LD_INT 9
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 50
18601: PUSH
18602: EMPTY
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PPUSH
18609: CALL_OW 72
18613: PUSH
18614: LD_EXP 62
18618: UNION
18619: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18620: LD_ADDR_VAR 0 12
18624: PUSH
18625: LD_EXP 67
18629: PPUSH
18630: LD_INT 81
18632: PUSH
18633: LD_INT 3
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PPUSH
18640: CALL_OW 70
18644: ST_TO_ADDR
// if sol then
18645: LD_VAR 0 10
18649: IFFALSE 19183
// begin if enemyInBase then
18651: LD_VAR 0 12
18655: IFFALSE 18798
// begin for i in sol do
18657: LD_ADDR_VAR 0 1
18661: PUSH
18662: LD_VAR 0 10
18666: PUSH
18667: FOR_IN
18668: IFFALSE 18794
// begin tw := IsInUnit ( i ) ;
18670: LD_ADDR_VAR 0 7
18674: PUSH
18675: LD_VAR 0 1
18679: PPUSH
18680: CALL_OW 310
18684: ST_TO_ADDR
// if tw then
18685: LD_VAR 0 7
18689: IFFALSE 18768
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18691: LD_VAR 0 7
18695: PUSH
18696: LD_INT 22
18698: PUSH
18699: LD_INT 3
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 101
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 30
18721: PUSH
18722: LD_INT 32
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 30
18731: PUSH
18732: LD_INT 31
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: PPUSH
18749: CALL_OW 69
18753: IN
18754: NOT
18755: IFFALSE 18766
// ComExitBuilding ( i ) ;
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 122
// end else
18766: GO 18792
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18768: LD_VAR 0 1
18772: PPUSH
18773: LD_VAR 0 12
18777: PPUSH
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL_OW 74
18787: PPUSH
18788: CALL_OW 115
// end ;
18792: GO 18667
18794: POP
18795: POP
// end else
18796: GO 19183
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18798: LD_ADDR_VAR 0 13
18802: PUSH
18803: LD_EXP 67
18807: PPUSH
18808: LD_INT 3
18810: PUSH
18811: LD_INT 62
18813: PUSH
18814: EMPTY
18815: LIST
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: LD_INT 30
18826: PUSH
18827: LD_INT 32
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 30
18836: PUSH
18837: LD_INT 4
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 30
18846: PUSH
18847: LD_INT 5
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 30
18856: PUSH
18857: LD_INT 31
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PPUSH
18875: CALL_OW 70
18879: ST_TO_ADDR
// if empty then
18880: LD_VAR 0 13
18884: IFFALSE 18901
// empty := ReverseArray ( empty ) ;
18886: LD_ADDR_VAR 0 13
18890: PUSH
18891: LD_VAR 0 13
18895: PPUSH
18896: CALL 89728 0 1
18900: ST_TO_ADDR
// for i in sol do
18901: LD_ADDR_VAR 0 1
18905: PUSH
18906: LD_VAR 0 10
18910: PUSH
18911: FOR_IN
18912: IFFALSE 19181
// begin tag := GetTag ( i ) ;
18914: LD_ADDR_VAR 0 6
18918: PUSH
18919: LD_VAR 0 1
18923: PPUSH
18924: CALL_OW 110
18928: ST_TO_ADDR
// if tag = tMech then
18929: LD_VAR 0 6
18933: PUSH
18934: LD_INT 7
18936: EQUAL
18937: IFFALSE 18941
// continue ;
18939: GO 18911
// if GetLives ( i ) < 1000 and tag <> tHeal then
18941: LD_VAR 0 1
18945: PPUSH
18946: CALL_OW 256
18950: PUSH
18951: LD_INT 1000
18953: LESS
18954: IFFALSE 18966
18956: PUSH
18957: LD_VAR 0 6
18961: PUSH
18962: LD_INT 1
18964: NONEQUAL
18965: AND
18966: IFFALSE 19018
// begin SetTag ( i , tHeal ) ;
18968: LD_VAR 0 1
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18980: LD_VAR 0 1
18984: PPUSH
18985: LD_EXP 75
18989: PUSH
18990: LD_INT 1
18992: ARRAY
18993: PPUSH
18994: LD_EXP 75
18998: PUSH
18999: LD_INT 2
19001: ARRAY
19002: PPUSH
19003: CALL_OW 111
// AddComHold ( i ) ;
19007: LD_VAR 0 1
19011: PPUSH
19012: CALL_OW 200
// continue ;
19016: GO 18911
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
19018: LD_VAR 0 1
19022: PPUSH
19023: CALL_OW 256
19027: PUSH
19028: LD_INT 1000
19030: EQUAL
19031: IFFALSE 19043
19033: PUSH
19034: LD_VAR 0 6
19038: PUSH
19039: LD_INT 1
19041: EQUAL
19042: AND
19043: IFFALSE 19059
// begin SetTag ( i , 0 ) ;
19045: LD_VAR 0 1
19049: PPUSH
19050: LD_INT 0
19052: PPUSH
19053: CALL_OW 109
// continue ;
19057: GO 18911
// end ; if HasTask ( i ) then
19059: LD_VAR 0 1
19063: PPUSH
19064: CALL_OW 314
19068: IFFALSE 19072
// continue ;
19070: GO 18911
// if not IsInUnit ( i ) and not tag and empty then
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 310
19081: NOT
19082: IFFALSE 19091
19084: PUSH
19085: LD_VAR 0 6
19089: NOT
19090: AND
19091: IFFALSE 19099
19093: PUSH
19094: LD_VAR 0 13
19098: AND
19099: IFFALSE 19179
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
19101: LD_VAR 0 1
19105: PPUSH
19106: LD_VAR 0 13
19110: PUSH
19111: LD_INT 1
19113: ARRAY
19114: PPUSH
19115: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
19119: LD_VAR 0 13
19123: PUSH
19124: LD_INT 1
19126: ARRAY
19127: PPUSH
19128: CALL_OW 266
19132: PUSH
19133: LD_INT 5
19135: EQUAL
19136: IFFALSE 19147
19138: PUSH
19139: LD_INT 50
19141: PPUSH
19142: CALL_OW 13
19146: AND
19147: IFFALSE 19161
// AddComChangeProfession ( i , class_bazooker ) ;
19149: LD_VAR 0 1
19153: PPUSH
19154: LD_INT 9
19156: PPUSH
19157: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
19161: LD_ADDR_VAR 0 13
19165: PUSH
19166: LD_VAR 0 13
19170: PPUSH
19171: LD_INT 1
19173: PPUSH
19174: CALL_OW 3
19178: ST_TO_ADDR
// end ; end ;
19179: GO 18911
19181: POP
19182: POP
// end ; end ; end ;
19183: PPOPN 16
19185: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19186: LD_EXP 79
19190: IFFALSE 19198
19192: PUSH
19193: LD_EXP 22
19197: AND
19198: IFFALSE 19773
19200: GO 19202
19202: DISABLE
19203: LD_INT 0
19205: PPUSH
19206: PPUSH
19207: PPUSH
// begin enable ;
19208: ENABLE
// if not ruTanks then
19209: LD_EXP 79
19213: NOT
19214: IFFALSE 19218
// exit ;
19216: GO 19773
// for i in ruTanks do
19218: LD_ADDR_VAR 0 1
19222: PUSH
19223: LD_EXP 79
19227: PUSH
19228: FOR_IN
19229: IFFALSE 19771
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19231: LD_VAR 0 1
19235: PPUSH
19236: CALL_OW 302
19240: NOT
19241: IFTRUE 19258
19243: PUSH
19244: LD_VAR 0 1
19248: PPUSH
19249: CALL_OW 255
19253: PUSH
19254: LD_INT 3
19256: NONEQUAL
19257: OR
19258: IFFALSE 19278
// begin ruTanks := ruTanks diff i ;
19260: LD_ADDR_EXP 79
19264: PUSH
19265: LD_EXP 79
19269: PUSH
19270: LD_VAR 0 1
19274: DIFF
19275: ST_TO_ADDR
// continue ;
19276: GO 19228
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19278: LD_VAR 0 1
19282: PPUSH
19283: CALL_OW 110
19287: NOT
19288: IFTRUE 19305
19290: PUSH
19291: LD_VAR 0 1
19295: PPUSH
19296: CALL_OW 110
19300: PUSH
19301: LD_INT 0
19303: EQUAL
19304: OR
19305: IFFALSE 19482
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19307: LD_VAR 0 1
19311: PPUSH
19312: CALL_OW 262
19316: PUSH
19317: LD_INT 1
19319: EQUAL
19320: IFFALSE 19337
19322: PUSH
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 261
19332: PUSH
19333: LD_INT 50
19335: LESS
19336: AND
19337: IFFALSE 19350
19339: PUSH
19340: LD_EXP 68
19344: PPUSH
19345: CALL_OW 302
19349: AND
19350: IFFALSE 19437
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19352: LD_VAR 0 1
19356: PPUSH
19357: LD_EXP 68
19361: PPUSH
19362: CALL_OW 250
19366: PPUSH
19367: LD_EXP 68
19371: PPUSH
19372: CALL_OW 251
19376: PPUSH
19377: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19381: LD_INT 35
19383: PPUSH
19384: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19388: LD_VAR 0 1
19392: PPUSH
19393: LD_EXP 68
19397: PPUSH
19398: CALL_OW 250
19402: PPUSH
19403: LD_EXP 68
19407: PPUSH
19408: CALL_OW 251
19412: PPUSH
19413: CALL_OW 297
19417: PUSH
19418: LD_INT 6
19420: LESS
19421: IFFALSE 19381
// SetFuel ( i , 100 ) ;
19423: LD_VAR 0 1
19427: PPUSH
19428: LD_INT 100
19430: PPUSH
19431: CALL_OW 240
// end else
19435: GO 19482
// if not IsInArea ( i , ruParkingArea ) then
19437: LD_VAR 0 1
19441: PPUSH
19442: LD_EXP 82
19446: PPUSH
19447: CALL_OW 308
19451: NOT
19452: IFFALSE 19470
// ComMoveToArea ( i , ruParkingArea ) else
19454: LD_VAR 0 1
19458: PPUSH
19459: LD_EXP 82
19463: PPUSH
19464: CALL_OW 113
19468: GO 19482
// SetTag ( i , tParking ) ;
19470: LD_VAR 0 1
19474: PPUSH
19475: LD_INT 12
19477: PPUSH
19478: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19482: LD_VAR 0 1
19486: PPUSH
19487: CALL_OW 110
19491: PUSH
19492: LD_INT 12
19494: EQUAL
19495: IFFALSE 19625
// begin if GetLives ( i ) < 650 then
19497: LD_VAR 0 1
19501: PPUSH
19502: CALL_OW 256
19506: PUSH
19507: LD_INT 650
19509: LESS
19510: IFFALSE 19602
// begin if not IsDrivenBy ( i ) then
19512: LD_VAR 0 1
19516: PPUSH
19517: CALL_OW 311
19521: NOT
19522: IFFALSE 19526
// continue ;
19524: GO 19228
// mech := IsDrivenBy ( i ) ;
19526: LD_ADDR_VAR 0 2
19530: PUSH
19531: LD_VAR 0 1
19535: PPUSH
19536: CALL_OW 311
19540: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19541: LD_VAR 0 2
19545: PPUSH
19546: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_VAR 0 1
19559: PPUSH
19560: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19564: LD_INT 35
19566: PPUSH
19567: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19571: LD_VAR 0 1
19575: PPUSH
19576: CALL_OW 256
19580: PUSH
19581: LD_INT 1000
19583: EQUAL
19584: IFFALSE 19564
// ComEnterUnit ( mech , i ) ;
19586: LD_VAR 0 2
19590: PPUSH
19591: LD_VAR 0 1
19595: PPUSH
19596: CALL_OW 120
// end else
19600: GO 19625
// if IsDrivenBy ( i ) then
19602: LD_VAR 0 1
19606: PPUSH
19607: CALL_OW 311
19611: IFFALSE 19625
// SetTag ( i , tAttack ) ;
19613: LD_VAR 0 1
19617: PPUSH
19618: LD_INT 13
19620: PPUSH
19621: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19625: LD_VAR 0 1
19629: PPUSH
19630: CALL_OW 110
19634: PUSH
19635: LD_INT 13
19637: EQUAL
19638: IFFALSE 19769
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19640: LD_ADDR_VAR 0 3
19644: PUSH
19645: LD_EXP 66
19649: PPUSH
19650: LD_INT 81
19652: PUSH
19653: LD_INT 3
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PPUSH
19660: CALL_OW 70
19664: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19665: LD_VAR 0 1
19669: PPUSH
19670: CALL_OW 256
19674: PUSH
19675: LD_INT 650
19677: LESS
19678: IFFALSE 19703
// begin ComStop ( i ) ;
19680: LD_VAR 0 1
19684: PPUSH
19685: CALL_OW 141
// SetTag ( i , 0 ) ;
19689: LD_VAR 0 1
19693: PPUSH
19694: LD_INT 0
19696: PPUSH
19697: CALL_OW 109
// continue ;
19701: GO 19228
// end ; if enemy then
19703: LD_VAR 0 3
19707: IFFALSE 19747
// begin if not HasTask ( i ) then
19709: LD_VAR 0 1
19713: PPUSH
19714: CALL_OW 314
19718: NOT
19719: IFFALSE 19745
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19721: LD_VAR 0 1
19725: PPUSH
19726: LD_VAR 0 3
19730: PPUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 74
19740: PPUSH
19741: CALL_OW 115
// end else
19745: GO 19769
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19747: LD_VAR 0 1
19751: PPUSH
19752: LD_INT 105
19754: PUSH
19755: LD_INT 35
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: EMPTY
19763: LIST
19764: PPUSH
19765: CALL 97404 0 2
// end ; end ;
19769: GO 19228
19771: POP
19772: POP
// end ;
19773: PPOPN 3
19775: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19776: LD_EXP 80
19780: IFFALSE 19788
19782: PUSH
19783: LD_EXP 22
19787: AND
19788: IFFALSE 20363
19790: GO 19792
19792: DISABLE
19793: LD_INT 0
19795: PPUSH
19796: PPUSH
19797: PPUSH
// begin enable ;
19798: ENABLE
// if not ruTanks2 then
19799: LD_EXP 80
19803: NOT
19804: IFFALSE 19808
// exit ;
19806: GO 20363
// for i in ruTanks2 do
19808: LD_ADDR_VAR 0 1
19812: PUSH
19813: LD_EXP 80
19817: PUSH
19818: FOR_IN
19819: IFFALSE 20361
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19821: LD_VAR 0 1
19825: PPUSH
19826: CALL_OW 302
19830: NOT
19831: IFTRUE 19848
19833: PUSH
19834: LD_VAR 0 1
19838: PPUSH
19839: CALL_OW 255
19843: PUSH
19844: LD_INT 3
19846: NONEQUAL
19847: OR
19848: IFFALSE 19868
// begin ruTanks := ruTanks diff i ;
19850: LD_ADDR_EXP 79
19854: PUSH
19855: LD_EXP 79
19859: PUSH
19860: LD_VAR 0 1
19864: DIFF
19865: ST_TO_ADDR
// continue ;
19866: GO 19818
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19868: LD_VAR 0 1
19872: PPUSH
19873: CALL_OW 110
19877: NOT
19878: IFTRUE 19895
19880: PUSH
19881: LD_VAR 0 1
19885: PPUSH
19886: CALL_OW 110
19890: PUSH
19891: LD_INT 0
19893: EQUAL
19894: OR
19895: IFFALSE 20072
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19897: LD_VAR 0 1
19901: PPUSH
19902: CALL_OW 262
19906: PUSH
19907: LD_INT 1
19909: EQUAL
19910: IFFALSE 19927
19912: PUSH
19913: LD_VAR 0 1
19917: PPUSH
19918: CALL_OW 261
19922: PUSH
19923: LD_INT 50
19925: LESS
19926: AND
19927: IFFALSE 19940
19929: PUSH
19930: LD_EXP 69
19934: PPUSH
19935: CALL_OW 302
19939: AND
19940: IFFALSE 20027
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19942: LD_VAR 0 1
19946: PPUSH
19947: LD_EXP 69
19951: PPUSH
19952: CALL_OW 250
19956: PPUSH
19957: LD_EXP 69
19961: PPUSH
19962: CALL_OW 251
19966: PPUSH
19967: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19971: LD_INT 35
19973: PPUSH
19974: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19978: LD_VAR 0 1
19982: PPUSH
19983: LD_EXP 69
19987: PPUSH
19988: CALL_OW 250
19992: PPUSH
19993: LD_EXP 69
19997: PPUSH
19998: CALL_OW 251
20002: PPUSH
20003: CALL_OW 297
20007: PUSH
20008: LD_INT 6
20010: LESS
20011: IFFALSE 19971
// SetFuel ( i , 100 ) ;
20013: LD_VAR 0 1
20017: PPUSH
20018: LD_INT 100
20020: PPUSH
20021: CALL_OW 240
// end else
20025: GO 20072
// if not IsInArea ( i , ruParkingArea2 ) then
20027: LD_VAR 0 1
20031: PPUSH
20032: LD_EXP 83
20036: PPUSH
20037: CALL_OW 308
20041: NOT
20042: IFFALSE 20060
// ComMoveToArea ( i , ruParkingArea2 ) else
20044: LD_VAR 0 1
20048: PPUSH
20049: LD_EXP 83
20053: PPUSH
20054: CALL_OW 113
20058: GO 20072
// SetTag ( i , tParking ) ;
20060: LD_VAR 0 1
20064: PPUSH
20065: LD_INT 12
20067: PPUSH
20068: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
20072: LD_VAR 0 1
20076: PPUSH
20077: CALL_OW 110
20081: PUSH
20082: LD_INT 12
20084: EQUAL
20085: IFFALSE 20215
// begin if GetLives ( i ) < 650 then
20087: LD_VAR 0 1
20091: PPUSH
20092: CALL_OW 256
20096: PUSH
20097: LD_INT 650
20099: LESS
20100: IFFALSE 20192
// begin if not IsDrivenBy ( i ) then
20102: LD_VAR 0 1
20106: PPUSH
20107: CALL_OW 311
20111: NOT
20112: IFFALSE 20116
// continue ;
20114: GO 19818
// mech := IsDrivenBy ( i ) ;
20116: LD_ADDR_VAR 0 2
20120: PUSH
20121: LD_VAR 0 1
20125: PPUSH
20126: CALL_OW 311
20130: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
20131: LD_VAR 0 2
20135: PPUSH
20136: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
20140: LD_VAR 0 2
20144: PPUSH
20145: LD_VAR 0 1
20149: PPUSH
20150: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
20154: LD_INT 35
20156: PPUSH
20157: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20161: LD_VAR 0 1
20165: PPUSH
20166: CALL_OW 256
20170: PUSH
20171: LD_INT 1000
20173: EQUAL
20174: IFFALSE 20154
// ComEnterUnit ( mech , i ) ;
20176: LD_VAR 0 2
20180: PPUSH
20181: LD_VAR 0 1
20185: PPUSH
20186: CALL_OW 120
// end else
20190: GO 20215
// if IsDrivenBy ( i ) then
20192: LD_VAR 0 1
20196: PPUSH
20197: CALL_OW 311
20201: IFFALSE 20215
// SetTag ( i , tAttack ) ;
20203: LD_VAR 0 1
20207: PPUSH
20208: LD_INT 13
20210: PPUSH
20211: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20215: LD_VAR 0 1
20219: PPUSH
20220: CALL_OW 110
20224: PUSH
20225: LD_INT 13
20227: EQUAL
20228: IFFALSE 20359
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_EXP 67
20239: PPUSH
20240: LD_INT 81
20242: PUSH
20243: LD_INT 3
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PPUSH
20250: CALL_OW 70
20254: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20255: LD_VAR 0 1
20259: PPUSH
20260: CALL_OW 256
20264: PUSH
20265: LD_INT 650
20267: LESS
20268: IFFALSE 20293
// begin ComStop ( i ) ;
20270: LD_VAR 0 1
20274: PPUSH
20275: CALL_OW 141
// SetTag ( i , 0 ) ;
20279: LD_VAR 0 1
20283: PPUSH
20284: LD_INT 0
20286: PPUSH
20287: CALL_OW 109
// continue ;
20291: GO 19818
// end ; if enemy then
20293: LD_VAR 0 3
20297: IFFALSE 20337
// begin if not HasTask ( i ) then
20299: LD_VAR 0 1
20303: PPUSH
20304: CALL_OW 314
20308: NOT
20309: IFFALSE 20335
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20311: LD_VAR 0 1
20315: PPUSH
20316: LD_VAR 0 3
20320: PPUSH
20321: LD_VAR 0 1
20325: PPUSH
20326: CALL_OW 74
20330: PPUSH
20331: CALL_OW 115
// end else
20335: GO 20359
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20337: LD_VAR 0 1
20341: PPUSH
20342: LD_INT 105
20344: PUSH
20345: LD_INT 35
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: EMPTY
20353: LIST
20354: PPUSH
20355: CALL 97404 0 2
// end ; end ;
20359: GO 19818
20361: POP
20362: POP
// end ;
20363: PPOPN 3
20365: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20366: LD_EXP 81
20370: PPUSH
20371: CALL 58706 0 1
20375: IFFALSE 20388
20377: GO 20379
20379: DISABLE
// begin enable ;
20380: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20381: LD_INT 106
20383: PPUSH
20384: CALL_OW 427
// end ;
20388: END
// export function RussianExtraAttack ; var i , tmp ; begin
20389: LD_INT 0
20391: PPUSH
20392: PPUSH
20393: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20394: LD_ADDR_VAR 0 3
20398: PUSH
20399: LD_EXP 81
20403: PPUSH
20404: LD_INT 50
20406: PUSH
20407: EMPTY
20408: LIST
20409: PPUSH
20410: CALL_OW 72
20414: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20415: LD_ADDR_EXP 81
20419: PUSH
20420: LD_EXP 81
20424: PUSH
20425: LD_VAR 0 3
20429: DIFF
20430: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20431: LD_VAR 0 3
20435: PPUSH
20436: LD_INT 105
20438: PPUSH
20439: LD_INT 35
20441: PPUSH
20442: CALL_OW 114
// wait ( 0 0$5 ) ;
20446: LD_INT 175
20448: PPUSH
20449: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20453: LD_INT 35
20455: PPUSH
20456: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20460: LD_ADDR_VAR 0 3
20464: PUSH
20465: LD_VAR 0 3
20469: PPUSH
20470: LD_INT 50
20472: PUSH
20473: EMPTY
20474: LIST
20475: PPUSH
20476: CALL_OW 72
20480: ST_TO_ADDR
// for i in tmp do
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_VAR 0 3
20490: PUSH
20491: FOR_IN
20492: IFFALSE 20518
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20494: LD_VAR 0 2
20498: PPUSH
20499: LD_INT 105
20501: PUSH
20502: LD_INT 35
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: EMPTY
20510: LIST
20511: PPUSH
20512: CALL 97404 0 2
20516: GO 20491
20518: POP
20519: POP
// until not tmp ;
20520: LD_VAR 0 3
20524: NOT
20525: IFFALSE 20453
// end ;
20527: LD_VAR 0 1
20531: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
20539: PPUSH
20540: PPUSH
20541: PPUSH
20542: PPUSH
20543: PPUSH
// result := [ ] ;
20544: LD_ADDR_VAR 0 2
20548: PUSH
20549: EMPTY
20550: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20551: LD_ADDR_VAR 0 7
20555: PUSH
20556: LD_INT 4
20558: PUSH
20559: LD_INT 5
20561: PUSH
20562: LD_INT 6
20564: PUSH
20565: LD_INT 7
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: PUSH
20574: LD_OWVAR 67
20578: ARRAY
20579: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20580: LD_ADDR_VAR 0 8
20584: PUSH
20585: LD_INT 19
20587: ST_TO_ADDR
// parking := ruGatPointArea ;
20588: LD_ADDR_VAR 0 9
20592: PUSH
20593: LD_INT 32
20595: ST_TO_ADDR
// dir := 5 ;
20596: LD_ADDR_VAR 0 10
20600: PUSH
20601: LD_INT 5
20603: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20604: LD_VAR 0 8
20608: PPUSH
20609: LD_INT 2
20611: PUSH
20612: LD_INT 22
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 22
20624: PUSH
20625: LD_INT 6
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: LIST
20636: PPUSH
20637: CALL_OW 70
20641: IFFALSE 20702
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20643: LD_ADDR_VAR 0 3
20647: PUSH
20648: LD_VAR 0 8
20652: PPUSH
20653: LD_INT 2
20655: PUSH
20656: LD_INT 22
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 22
20668: PUSH
20669: LD_INT 6
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 70
20685: PUSH
20686: FOR_IN
20687: IFFALSE 20700
// RemoveUnit ( i ) ;
20689: LD_VAR 0 3
20693: PPUSH
20694: CALL_OW 64
20698: GO 20686
20700: POP
20701: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20702: LD_VAR 0 8
20706: PPUSH
20707: LD_INT 3
20709: PUSH
20710: LD_INT 21
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 22
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PPUSH
20738: CALL_OW 70
20742: IFFALSE 20806
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20744: LD_ADDR_VAR 0 3
20748: PUSH
20749: LD_VAR 0 8
20753: PPUSH
20754: LD_INT 3
20756: PUSH
20757: LD_INT 21
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 22
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PPUSH
20785: CALL_OW 70
20789: PUSH
20790: FOR_IN
20791: IFFALSE 20804
// KillUnit ( i ) ;
20793: LD_VAR 0 3
20797: PPUSH
20798: CALL_OW 66
20802: GO 20790
20804: POP
20805: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20806: LD_VAR 0 8
20810: PPUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 22
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PPUSH
20835: CALL_OW 70
20839: IFFALSE 20902
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20841: LD_ADDR_VAR 0 3
20845: PUSH
20846: LD_VAR 0 8
20850: PPUSH
20851: LD_INT 21
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 22
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PPUSH
20875: CALL_OW 70
20879: PUSH
20880: FOR_IN
20881: IFFALSE 20900
// ComMoveXY ( i , 92 , 92 ) ;
20883: LD_VAR 0 3
20887: PPUSH
20888: LD_INT 92
20890: PPUSH
20891: LD_INT 92
20893: PPUSH
20894: CALL_OW 111
20898: GO 20880
20900: POP
20901: POP
// repeat wait ( 0 0$1 ) ;
20902: LD_INT 35
20904: PPUSH
20905: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20909: LD_VAR 0 8
20913: PPUSH
20914: LD_INT 50
20916: PUSH
20917: EMPTY
20918: LIST
20919: PPUSH
20920: CALL_OW 70
20924: NOT
20925: IFFALSE 20902
// InitHC_All ( ) ;
20927: CALL_OW 584
// InitVc ;
20931: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20935: LD_ADDR_VAR 0 3
20939: PUSH
20940: DOUBLE
20941: LD_INT 1
20943: DEC
20944: ST_TO_ADDR
20945: LD_INT 3
20947: PUSH
20948: LD_INT 4
20950: PUSH
20951: LD_INT 4
20953: PUSH
20954: LD_INT 5
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: PUSH
20963: LD_OWVAR 67
20967: ARRAY
20968: PUSH
20969: LD_VAR 0 1
20973: PLUS
20974: PUSH
20975: FOR_TO
20976: IFFALSE 21283
// begin uc_side := 6 ;
20978: LD_ADDR_OWVAR 20
20982: PUSH
20983: LD_INT 6
20985: ST_TO_ADDR
// uc_nation := nation_russian ;
20986: LD_ADDR_OWVAR 21
20990: PUSH
20991: LD_INT 3
20993: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20994: LD_ADDR_VAR 0 11
20998: PUSH
20999: LD_INT 1
21001: PUSH
21002: LD_INT 3
21004: PUSH
21005: LD_INT 3
21007: PUSH
21008: LD_INT 3
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PPUSH
21020: LD_INT 4
21022: PPUSH
21023: CALL_OW 12
21027: ARRAY
21028: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
21029: LD_INT 22
21031: PUSH
21032: LD_INT 24
21034: PUSH
21035: LD_INT 23
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: PUSH
21043: LD_VAR 0 3
21047: PUSH
21048: LD_INT 3
21050: MOD
21051: PUSH
21052: LD_INT 1
21054: PLUS
21055: ARRAY
21056: PPUSH
21057: LD_INT 3
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 1
21069: PPUSH
21070: LD_INT 2
21072: PPUSH
21073: CALL_OW 12
21077: ARRAY
21078: PPUSH
21079: LD_VAR 0 11
21083: PPUSH
21084: LD_INT 45
21086: PUSH
21087: LD_INT 46
21089: PUSH
21090: LD_INT 43
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: PUSH
21098: LD_VAR 0 3
21102: PUSH
21103: LD_INT 3
21105: MOD
21106: PUSH
21107: LD_INT 1
21109: PLUS
21110: ARRAY
21111: PPUSH
21112: LD_INT 100
21114: PPUSH
21115: CALL 61468 0 5
// veh := CreateVehicle ;
21119: LD_ADDR_VAR 0 6
21123: PUSH
21124: CALL_OW 45
21128: ST_TO_ADDR
// SetDir ( veh , dir ) ;
21129: LD_VAR 0 6
21133: PPUSH
21134: LD_VAR 0 10
21138: PPUSH
21139: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
21143: LD_VAR 0 6
21147: PPUSH
21148: LD_VAR 0 8
21152: PPUSH
21153: LD_INT 0
21155: PPUSH
21156: CALL_OW 49
// if control = control_manual then
21160: LD_VAR 0 11
21164: PUSH
21165: LD_INT 1
21167: EQUAL
21168: IFFALSE 21222
// begin uc_side := 6 ;
21170: LD_ADDR_OWVAR 20
21174: PUSH
21175: LD_INT 6
21177: ST_TO_ADDR
// uc_nation := nation_russian ;
21178: LD_ADDR_OWVAR 21
21182: PUSH
21183: LD_INT 3
21185: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21186: LD_INT 0
21188: PPUSH
21189: LD_VAR 0 7
21193: PPUSH
21194: CALL_OW 383
// un := CreateHuman ;
21198: LD_ADDR_VAR 0 5
21202: PUSH
21203: CALL_OW 44
21207: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21208: LD_VAR 0 5
21212: PPUSH
21213: LD_VAR 0 6
21217: PPUSH
21218: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21222: LD_VAR 0 6
21226: PPUSH
21227: LD_VAR 0 9
21231: PPUSH
21232: CALL_OW 113
// wait ( 0 0$3 ) ;
21236: LD_INT 105
21238: PPUSH
21239: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21243: LD_VAR 0 8
21247: PPUSH
21248: LD_INT 50
21250: PUSH
21251: EMPTY
21252: LIST
21253: PPUSH
21254: CALL_OW 70
21258: NOT
21259: IFFALSE 21222
// result := Join ( result , veh ) ;
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_VAR 0 2
21270: PPUSH
21271: LD_VAR 0 6
21275: PPUSH
21276: CALL 94638 0 2
21280: ST_TO_ADDR
// end ;
21281: GO 20975
21283: POP
21284: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21285: LD_ADDR_VAR 0 3
21289: PUSH
21290: DOUBLE
21291: LD_INT 1
21293: DEC
21294: ST_TO_ADDR
21295: LD_INT 2
21297: PUSH
21298: LD_INT 2
21300: PUSH
21301: LD_INT 3
21303: PUSH
21304: LD_INT 4
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: PUSH
21313: LD_OWVAR 67
21317: ARRAY
21318: PUSH
21319: FOR_TO
21320: IFFALSE 21476
// begin uc_side := 6 ;
21322: LD_ADDR_OWVAR 20
21326: PUSH
21327: LD_INT 6
21329: ST_TO_ADDR
// uc_nation := nation_russian ;
21330: LD_ADDR_OWVAR 21
21334: PUSH
21335: LD_INT 3
21337: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21338: LD_INT 0
21340: PPUSH
21341: LD_VAR 0 7
21345: PPUSH
21346: CALL_OW 381
// un := CreateHuman ;
21350: LD_ADDR_VAR 0 5
21354: PUSH
21355: CALL_OW 44
21359: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21360: LD_INT 35
21362: PUSH
21363: LD_INT 60
21365: PUSH
21366: LD_INT 70
21368: PUSH
21369: LD_INT 80
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: PUSH
21378: LD_OWVAR 67
21382: ARRAY
21383: PPUSH
21384: CALL_OW 13
21388: IFFALSE 21402
// SetClass ( un , class_bazooker ) ;
21390: LD_VAR 0 5
21394: PPUSH
21395: LD_INT 9
21397: PPUSH
21398: CALL_OW 336
// SetDir ( un , dir ) ;
21402: LD_VAR 0 5
21406: PPUSH
21407: LD_VAR 0 10
21411: PPUSH
21412: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21416: LD_VAR 0 5
21420: PPUSH
21421: LD_VAR 0 8
21425: PPUSH
21426: LD_INT 0
21428: PPUSH
21429: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21433: LD_VAR 0 5
21437: PPUSH
21438: LD_VAR 0 9
21442: PPUSH
21443: CALL_OW 113
// wait ( 0 0$1 ) ;
21447: LD_INT 35
21449: PPUSH
21450: CALL_OW 67
// result := Join ( result , un ) ;
21454: LD_ADDR_VAR 0 2
21458: PUSH
21459: LD_VAR 0 2
21463: PPUSH
21464: LD_VAR 0 5
21468: PPUSH
21469: CALL 94638 0 2
21473: ST_TO_ADDR
// end ;
21474: GO 21319
21476: POP
21477: POP
// end ;
21478: LD_VAR 0 2
21482: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21483: LD_INT 0
21485: PPUSH
21486: PPUSH
21487: PPUSH
21488: PPUSH
21489: PPUSH
21490: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21491: LD_ADDR_EXP 18
21495: PUSH
21496: LD_EXP 18
21500: PPUSH
21501: CALL 96011 0 1
21505: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21506: LD_ADDR_VAR 0 3
21510: PUSH
21511: LD_INT 99
21513: PUSH
21514: LD_INT 91
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 78
21523: PUSH
21524: LD_INT 50
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 91
21533: PUSH
21534: LD_INT 45
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21546: LD_ADDR_VAR 0 4
21550: PUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: CALL 20532 0 1
21560: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21561: LD_VAR 0 4
21565: PPUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PPUSH
21576: CALL_OW 72
21580: PPUSH
21581: LD_INT 108
21583: PPUSH
21584: LD_INT 60
21586: PPUSH
21587: CALL_OW 114
// DRussianNextAttack ;
21591: CALL 28732 0 0
// repeat wait ( 0 0$2 ) ;
21595: LD_INT 70
21597: PPUSH
21598: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21602: LD_ADDR_VAR 0 7
21606: PUSH
21607: LD_INT 81
21609: PUSH
21610: LD_INT 6
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PPUSH
21617: CALL_OW 69
21621: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21622: LD_ADDR_VAR 0 4
21626: PUSH
21627: LD_VAR 0 4
21631: PPUSH
21632: LD_INT 50
21634: PUSH
21635: EMPTY
21636: LIST
21637: PPUSH
21638: CALL_OW 72
21642: ST_TO_ADDR
// for i in attackers do
21643: LD_ADDR_VAR 0 6
21647: PUSH
21648: LD_VAR 0 4
21652: PUSH
21653: FOR_IN
21654: IFFALSE 22032
// begin if not IsOk ( i ) then
21656: LD_VAR 0 6
21660: PPUSH
21661: CALL_OW 302
21665: NOT
21666: IFFALSE 21686
// begin attackers := attackers diff i ;
21668: LD_ADDR_VAR 0 4
21672: PUSH
21673: LD_VAR 0 4
21677: PUSH
21678: LD_VAR 0 6
21682: DIFF
21683: ST_TO_ADDR
// continue ;
21684: GO 21653
// end ; if GetType ( i ) = unit_vehicle then
21686: LD_VAR 0 6
21690: PPUSH
21691: CALL_OW 247
21695: PUSH
21696: LD_INT 2
21698: EQUAL
21699: IFFALSE 21717
// AgressiveMove ( i , path ) else
21701: LD_VAR 0 6
21705: PPUSH
21706: LD_VAR 0 3
21710: PPUSH
21711: CALL 97404 0 2
21715: GO 22030
// begin if GetClass ( i ) = class_bazooker then
21717: LD_VAR 0 6
21721: PPUSH
21722: CALL_OW 257
21726: PUSH
21727: LD_INT 9
21729: EQUAL
21730: IFFALSE 22006
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21732: LD_VAR 0 6
21736: PPUSH
21737: LD_VAR 0 7
21741: PPUSH
21742: LD_VAR 0 6
21746: PPUSH
21747: CALL_OW 74
21751: PPUSH
21752: CALL_OW 296
21756: PUSH
21757: LD_INT 12
21759: GREATER
21760: IFFALSE 21788
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21762: LD_VAR 0 6
21766: PPUSH
21767: LD_VAR 0 7
21771: PPUSH
21772: LD_VAR 0 6
21776: PPUSH
21777: CALL_OW 74
21781: PPUSH
21782: CALL 99036 0 2
21786: GO 22004
// begin e := NearestUnitToUnit ( enemy , i ) ;
21788: LD_ADDR_VAR 0 5
21792: PUSH
21793: LD_VAR 0 7
21797: PPUSH
21798: LD_VAR 0 6
21802: PPUSH
21803: CALL_OW 74
21807: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21808: LD_INT 1
21810: PPUSH
21811: LD_INT 3
21813: PPUSH
21814: CALL_OW 12
21818: PUSH
21819: LD_INT 1
21821: DOUBLE
21822: EQUAL
21823: IFTRUE 21827
21825: GO 21844
21827: POP
// ComAttackUnit ( i , e ) ; 2 :
21828: LD_VAR 0 6
21832: PPUSH
21833: LD_VAR 0 5
21837: PPUSH
21838: CALL_OW 115
21842: GO 22004
21844: LD_INT 2
21846: DOUBLE
21847: EQUAL
21848: IFTRUE 21852
21850: GO 21932
21852: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21853: LD_VAR 0 6
21857: PPUSH
21858: LD_VAR 0 5
21862: PPUSH
21863: CALL_OW 250
21867: PPUSH
21868: LD_VAR 0 5
21872: PPUSH
21873: CALL_OW 251
21877: PPUSH
21878: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21882: LD_VAR 0 5
21886: PPUSH
21887: CALL_OW 247
21891: PUSH
21892: LD_INT 3
21894: NONEQUAL
21895: IFFALSE 21904
21897: PUSH
21898: LD_EXP 17
21902: NOT
21903: AND
21904: IFFALSE 21930
// begin dialogRussianSpaceAmmo := true ;
21906: LD_ADDR_EXP 17
21910: PUSH
21911: LD_INT 1
21913: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21914: LD_INT 210
21916: PPUSH
21917: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21921: LD_VAR 0 5
21925: PPUSH
21926: CALL 28779 0 1
// end ; end ; 3 :
21930: GO 22004
21932: LD_INT 3
21934: DOUBLE
21935: EQUAL
21936: IFTRUE 21940
21938: GO 22003
21940: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21941: LD_VAR 0 6
21945: PPUSH
21946: LD_VAR 0 5
21950: PPUSH
21951: CALL_OW 250
21955: PPUSH
21956: LD_VAR 0 5
21960: PPUSH
21961: CALL_OW 251
21965: PPUSH
21966: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21970: LD_EXP 17
21974: NOT
21975: IFFALSE 22001
// begin dialogRussianSpaceAmmo := true ;
21977: LD_ADDR_EXP 17
21981: PUSH
21982: LD_INT 1
21984: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21985: LD_INT 210
21987: PPUSH
21988: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21992: LD_VAR 0 5
21996: PPUSH
21997: CALL 28779 0 1
// end ; end ; end ;
22001: GO 22004
22003: POP
// end ; end else
22004: GO 22030
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
22006: LD_VAR 0 6
22010: PPUSH
22011: LD_VAR 0 7
22015: PPUSH
22016: LD_VAR 0 6
22020: PPUSH
22021: CALL_OW 74
22025: PPUSH
22026: CALL 99036 0 2
// end ; end ;
22030: GO 21653
22032: POP
22033: POP
// until not attackers ;
22034: LD_VAR 0 4
22038: NOT
22039: IFFALSE 21595
// end ;
22041: LD_VAR 0 2
22045: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
22046: LD_EXP 10
22050: IFFALSE 22058
22052: PUSH
22053: LD_EXP 16
22057: AND
22058: IFFALSE 22170
22060: GO 22062
22062: DISABLE
22063: LD_INT 0
22065: PPUSH
22066: PPUSH
22067: PPUSH
// begin InitHC_All ( ) ;
22068: CALL_OW 584
// for i := 1 to 3 do
22072: LD_ADDR_VAR 0 1
22076: PUSH
22077: DOUBLE
22078: LD_INT 1
22080: DEC
22081: ST_TO_ADDR
22082: LD_INT 3
22084: PUSH
22085: FOR_TO
22086: IFFALSE 22168
// begin uc_side := 6 ;
22088: LD_ADDR_OWVAR 20
22092: PUSH
22093: LD_INT 6
22095: ST_TO_ADDR
// uc_nation := nation_russian ;
22096: LD_ADDR_OWVAR 21
22100: PUSH
22101: LD_INT 3
22103: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
22104: LD_INT 0
22106: PPUSH
22107: LD_INT 3
22109: PPUSH
22110: CALL_OW 381
// un := CreateHuman ;
22114: LD_ADDR_VAR 0 2
22118: PUSH
22119: CALL_OW 44
22123: ST_TO_ADDR
// SetDir ( un , 2 ) ;
22124: LD_VAR 0 2
22128: PPUSH
22129: LD_INT 2
22131: PPUSH
22132: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
22136: LD_VAR 0 2
22140: PPUSH
22141: LD_INT 33
22143: PPUSH
22144: LD_INT 0
22146: PPUSH
22147: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
22151: LD_VAR 0 2
22155: PPUSH
22156: LD_INT 52
22158: PPUSH
22159: LD_INT 16
22161: PPUSH
22162: CALL_OW 114
// end ;
22166: GO 22085
22168: POP
22169: POP
// end ;
22170: PPOPN 3
22172: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
22173: LD_EXP 68
22177: PPUSH
22178: CALL_OW 302
22182: IFFALSE 22191
22184: PUSH
22185: LD_EXP 78
22189: NOT
22190: AND
22191: IFFALSE 22430
22193: GO 22195
22195: DISABLE
22196: LD_INT 0
22198: PPUSH
// begin enable ;
22199: ENABLE
// uc_side := 3 ;
22200: LD_ADDR_OWVAR 20
22204: PUSH
22205: LD_INT 3
22207: ST_TO_ADDR
// uc_nation := nation_russian ;
22208: LD_ADDR_OWVAR 21
22212: PUSH
22213: LD_INT 3
22215: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22216: LD_INT 22
22218: PPUSH
22219: LD_INT 3
22221: PPUSH
22222: LD_INT 3
22224: PPUSH
22225: LD_INT 51
22227: PPUSH
22228: LD_INT 100
22230: PPUSH
22231: CALL 61468 0 5
// cargo := CreateVehicle ;
22235: LD_ADDR_VAR 0 1
22239: PUSH
22240: CALL_OW 45
22244: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22245: LD_VAR 0 1
22249: PPUSH
22250: LD_INT 5
22252: PPUSH
22253: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22257: LD_VAR 0 1
22261: PPUSH
22262: LD_INT 187
22264: PPUSH
22265: LD_INT 117
22267: PPUSH
22268: LD_INT 0
22270: PPUSH
22271: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22275: LD_VAR 0 1
22279: PPUSH
22280: LD_INT 1
22282: PPUSH
22283: LD_INT 100
22285: PPUSH
22286: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22290: LD_VAR 0 1
22294: PPUSH
22295: LD_EXP 68
22299: PPUSH
22300: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22304: LD_VAR 0 1
22308: PPUSH
22309: LD_EXP 68
22313: PPUSH
22314: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22318: LD_VAR 0 1
22322: PPUSH
22323: LD_INT 187
22325: PPUSH
22326: LD_INT 117
22328: PPUSH
22329: CALL_OW 171
// wait ( 0 0$10 ) ;
22333: LD_INT 350
22335: PPUSH
22336: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22340: LD_INT 35
22342: PPUSH
22343: CALL_OW 67
// if not HasTask ( cargo ) then
22347: LD_VAR 0 1
22351: PPUSH
22352: CALL_OW 314
22356: NOT
22357: IFFALSE 22374
// ComMoveXY ( cargo , 187 , 117 ) ;
22359: LD_VAR 0 1
22363: PPUSH
22364: LD_INT 187
22366: PPUSH
22367: LD_INT 117
22369: PPUSH
22370: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22374: LD_VAR 0 1
22378: PPUSH
22379: CALL_OW 301
22383: IFTRUE 22402
22385: PUSH
22386: LD_VAR 0 1
22390: PPUSH
22391: LD_INT 187
22393: PPUSH
22394: LD_INT 117
22396: PPUSH
22397: CALL_OW 307
22401: OR
22402: IFFALSE 22340
// if IsAt ( cargo , 187 , 117 ) then
22404: LD_VAR 0 1
22408: PPUSH
22409: LD_INT 187
22411: PPUSH
22412: LD_INT 117
22414: PPUSH
22415: CALL_OW 307
22419: IFFALSE 22430
// RemoveUnit ( cargo ) ;
22421: LD_VAR 0 1
22425: PPUSH
22426: CALL_OW 64
// end ; end_of_file
22430: PPOPN 1
22432: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22433: LD_VAR 0 1
22437: PPUSH
22438: CALL 50279 0 1
// if unit = Dietrich and not arabianAttack then
22442: LD_VAR 0 1
22446: PUSH
22447: LD_EXP 50
22451: EQUAL
22452: IFFALSE 22461
22454: PUSH
22455: LD_EXP 4
22459: NOT
22460: AND
22461: IFFALSE 22470
// YouLost ( ArabDefeated ) ;
22463: LD_STRING ArabDefeated
22465: PPUSH
22466: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22470: LD_VAR 0 1
22474: PUSH
22475: LD_INT 22
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 25
22487: PUSH
22488: LD_INT 4
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PPUSH
22499: CALL_OW 69
22503: IN
22504: IFFALSE 22513
22506: PUSH
22507: LD_EXP 4
22511: NOT
22512: AND
22513: IFFALSE 22522
// YouLost ( ArabDefeated ) ;
22515: LD_STRING ArabDefeated
22517: PPUSH
22518: CALL_OW 104
// if unit in JMMSquad then
22522: LD_VAR 0 1
22526: PUSH
22527: LD_EXP 45
22531: IN
22532: IFFALSE 22550
// JMMSquad := JMMSquad diff unit ;
22534: LD_ADDR_EXP 45
22538: PUSH
22539: LD_EXP 45
22543: PUSH
22544: LD_VAR 0 1
22548: DIFF
22549: ST_TO_ADDR
// if unit = Truman then
22550: LD_VAR 0 1
22554: PUSH
22555: LD_EXP 43
22559: EQUAL
22560: IFFALSE 22569
// YouLost ( Powell ) ;
22562: LD_STRING Powell
22564: PPUSH
22565: CALL_OW 104
// if unit = JMM then
22569: LD_VAR 0 1
22573: PUSH
22574: LD_EXP 23
22578: EQUAL
22579: IFFALSE 22588
// YouLost ( JMM ) ;
22581: LD_STRING JMM
22583: PPUSH
22584: CALL_OW 104
// if unit in arEscapist then
22588: LD_VAR 0 1
22592: PUSH
22593: LD_EXP 56
22597: IN
22598: IFFALSE 22616
// arEscapist := arEscapist diff unit ;
22600: LD_ADDR_EXP 56
22604: PUSH
22605: LD_EXP 56
22609: PUSH
22610: LD_VAR 0 1
22614: DIFF
22615: ST_TO_ADDR
// if unit in arAttackersInf then
22616: LD_VAR 0 1
22620: PUSH
22621: LD_EXP 57
22625: IN
22626: IFFALSE 22644
// arAttackersInf := arAttackersInf diff unit ;
22628: LD_ADDR_EXP 57
22632: PUSH
22633: LD_EXP 57
22637: PUSH
22638: LD_VAR 0 1
22642: DIFF
22643: ST_TO_ADDR
// if unit in arAttackersVeh then
22644: LD_VAR 0 1
22648: PUSH
22649: LD_EXP 58
22653: IN
22654: IFFALSE 22672
// arAttackersVeh := arAttackersVeh diff unit ;
22656: LD_ADDR_EXP 58
22660: PUSH
22661: LD_EXP 58
22665: PUSH
22666: LD_VAR 0 1
22670: DIFF
22671: ST_TO_ADDR
// if unit = Khatam then
22672: LD_VAR 0 1
22676: PUSH
22677: LD_EXP 36
22681: EQUAL
22682: IFFALSE 22692
// khatamStatus := false ;
22684: LD_ADDR_EXP 5
22688: PUSH
22689: LD_INT 0
22691: ST_TO_ADDR
// if unit = epsilon then
22692: LD_VAR 0 1
22696: PUSH
22697: LD_EXP 10
22701: EQUAL
22702: IFFALSE 22733
// begin hasBase := false ;
22704: LD_ADDR_EXP 9
22708: PUSH
22709: LD_INT 0
22711: ST_TO_ADDR
// epsilon := 0 ;
22712: LD_ADDR_EXP 10
22716: PUSH
22717: LD_INT 0
22719: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22720: LD_INT 0
22722: PPUSH
22723: LD_INT 1
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: CALL_OW 324
// end ; if unit = Khatam then
22733: LD_VAR 0 1
22737: PUSH
22738: LD_EXP 36
22742: EQUAL
22743: IFFALSE 22755
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22745: LD_INT 0
22747: PPUSH
22748: LD_STRING 10_KhatamStatus_1
22750: PPUSH
22751: CALL_OW 39
// if unit in ruForces then
22755: LD_VAR 0 1
22759: PUSH
22760: LD_EXP 59
22764: IN
22765: IFFALSE 22783
// ruForces := ruForces diff unit ;
22767: LD_ADDR_EXP 59
22771: PUSH
22772: LD_EXP 59
22776: PUSH
22777: LD_VAR 0 1
22781: DIFF
22782: ST_TO_ADDR
// if unit in ruForces2 then
22783: LD_VAR 0 1
22787: PUSH
22788: LD_EXP 60
22792: IN
22793: IFFALSE 22811
// ruForces2 := ruForces2 diff unit ;
22795: LD_ADDR_EXP 60
22799: PUSH
22800: LD_EXP 60
22804: PUSH
22805: LD_VAR 0 1
22809: DIFF
22810: ST_TO_ADDR
// if unit in ruTanks then
22811: LD_VAR 0 1
22815: PUSH
22816: LD_EXP 79
22820: IN
22821: IFFALSE 22839
// ruTanks := ruTanks diff unit ;
22823: LD_ADDR_EXP 79
22827: PUSH
22828: LD_EXP 79
22832: PUSH
22833: LD_VAR 0 1
22837: DIFF
22838: ST_TO_ADDR
// if unit in ruTanks2 then
22839: LD_VAR 0 1
22843: PUSH
22844: LD_EXP 80
22848: IN
22849: IFFALSE 22867
// ruTanks2 := ruTanks2 diff unit ;
22851: LD_ADDR_EXP 80
22855: PUSH
22856: LD_EXP 80
22860: PUSH
22861: LD_VAR 0 1
22865: DIFF
22866: ST_TO_ADDR
// if unit in ruExtraTanks then
22867: LD_VAR 0 1
22871: PUSH
22872: LD_EXP 81
22876: IN
22877: IFFALSE 22895
// ruExtraTanks := ruExtraTanks diff unit ;
22879: LD_ADDR_EXP 81
22883: PUSH
22884: LD_EXP 81
22888: PUSH
22889: LD_VAR 0 1
22893: DIFF
22894: ST_TO_ADDR
// if unit in ruMech then
22895: LD_VAR 0 1
22899: PUSH
22900: LD_EXP 63
22904: IN
22905: IFFALSE 22923
// ruMech := ruMech diff unit ;
22907: LD_ADDR_EXP 63
22911: PUSH
22912: LD_EXP 63
22916: PUSH
22917: LD_VAR 0 1
22921: DIFF
22922: ST_TO_ADDR
// if unit in ruMech2 then
22923: LD_VAR 0 1
22927: PUSH
22928: LD_EXP 64
22932: IN
22933: IFFALSE 22951
// ruMech2 := ruMech2 diff unit ;
22935: LD_ADDR_EXP 64
22939: PUSH
22940: LD_EXP 64
22944: PUSH
22945: LD_VAR 0 1
22949: DIFF
22950: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22951: LD_VAR 0 1
22955: PPUSH
22956: CALL_OW 266
22960: PUSH
22961: LD_INT 32
22963: PUSH
22964: LD_INT 33
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: IN
22971: IFFALSE 22988
22973: PUSH
22974: LD_VAR 0 1
22978: PPUSH
22979: CALL_OW 255
22983: PUSH
22984: LD_INT 3
22986: EQUAL
22987: AND
22988: IFFALSE 23144
// begin if IsInArea ( unit , ruBaseArea ) then
22990: LD_VAR 0 1
22994: PPUSH
22995: LD_EXP 66
22999: PPUSH
23000: CALL_OW 308
23004: IFFALSE 23067
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
23006: LD_ADDR_EXP 76
23010: PUSH
23011: LD_EXP 76
23015: PPUSH
23016: LD_VAR 0 1
23020: PPUSH
23021: CALL_OW 266
23025: PUSH
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 250
23035: PUSH
23036: LD_VAR 0 1
23040: PPUSH
23041: CALL_OW 251
23045: PUSH
23046: LD_VAR 0 1
23050: PPUSH
23051: CALL_OW 254
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: PPUSH
23062: CALL 94638 0 2
23066: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
23067: LD_VAR 0 1
23071: PPUSH
23072: LD_EXP 67
23076: PPUSH
23077: CALL_OW 308
23081: IFFALSE 23144
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
23083: LD_ADDR_EXP 77
23087: PUSH
23088: LD_EXP 77
23092: PPUSH
23093: LD_VAR 0 1
23097: PPUSH
23098: CALL_OW 266
23102: PUSH
23103: LD_VAR 0 1
23107: PPUSH
23108: CALL_OW 250
23112: PUSH
23113: LD_VAR 0 1
23117: PPUSH
23118: CALL_OW 251
23122: PUSH
23123: LD_VAR 0 1
23127: PPUSH
23128: CALL_OW 254
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: PPUSH
23139: CALL 94638 0 2
23143: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
23144: LD_VAR 0 1
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_INT 6
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 34
23161: PUSH
23162: LD_INT 51
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 69
23177: IN
23178: IFFALSE 23188
// ruTransportDestroyed := true ;
23180: LD_ADDR_EXP 78
23184: PUSH
23185: LD_INT 1
23187: ST_TO_ADDR
// end ;
23188: PPOPN 1
23190: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
23191: LD_VAR 0 1
23195: PPUSH
23196: CALL_OW 110
23200: PUSH
23201: LD_INT 7
23203: EQUAL
23204: IFFALSE 23218
// SetTag ( un , 0 ) ;
23206: LD_VAR 0 1
23210: PPUSH
23211: LD_INT 0
23213: PPUSH
23214: CALL_OW 109
// end ;
23218: PPOPN 3
23220: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23221: LD_VAR 0 2
23225: PUSH
23226: LD_INT 22
23228: PUSH
23229: LD_INT 3
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 25
23238: PUSH
23239: LD_INT 3
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PPUSH
23250: CALL_OW 69
23254: IN
23255: IFFALSE 23272
23257: PUSH
23258: LD_VAR 0 1
23262: PPUSH
23263: CALL_OW 266
23267: PUSH
23268: LD_INT 3
23270: EQUAL
23271: AND
23272: IFFALSE 23289
23274: PUSH
23275: LD_VAR 0 2
23279: PPUSH
23280: CALL_OW 256
23284: PUSH
23285: LD_INT 1000
23287: LESS
23288: AND
23289: IFFALSE 23315
// begin SetTag ( un , 0 ) ;
23291: LD_VAR 0 2
23295: PPUSH
23296: LD_INT 0
23298: PPUSH
23299: CALL_OW 109
// SetLives ( un , 1000 ) ;
23303: LD_VAR 0 2
23307: PPUSH
23308: LD_INT 1000
23310: PPUSH
23311: CALL_OW 234
// end ; end ;
23315: PPOPN 2
23317: END
// on UnitGoesToRed ( un ) do var i ;
23318: LD_INT 0
23320: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23321: LD_VAR 0 1
23325: PUSH
23326: LD_EXP 36
23330: EQUAL
23331: IFFALSE 23348
23333: PUSH
23334: LD_EXP 36
23338: PPUSH
23339: CALL_OW 255
23343: PUSH
23344: LD_INT 8
23346: EQUAL
23347: AND
23348: IFFALSE 23359
// KillUnit ( Khatam ) ;
23350: LD_EXP 36
23354: PPUSH
23355: CALL_OW 66
// end ;
23359: PPOPN 2
23361: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23362: LD_EXP 6
23366: NOT
23367: IFFALSE 23401
// begin seenRussianTeleport := true ;
23369: LD_ADDR_EXP 6
23373: PUSH
23374: LD_INT 1
23376: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 250
23386: PPUSH
23387: LD_VAR 0 1
23391: PPUSH
23392: CALL_OW 251
23396: PPUSH
23397: CALL 26755 0 2
// end ; end ;
23401: PPOPN 1
23403: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23404: LD_INT 0
23406: PPUSH
23407: PPUSH
23408: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23409: LD_VAR 0 2
23413: PUSH
23414: LD_INT 2
23416: EQUAL
23417: IFFALSE 23449
23419: PUSH
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 266
23429: PUSH
23430: LD_INT 7
23432: PUSH
23433: LD_INT 6
23435: PUSH
23436: LD_INT 0
23438: PUSH
23439: LD_INT 5
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: IN
23448: AND
23449: IFFALSE 23568
// begin for i := 1 to rand ( 2 , 4 ) do
23451: LD_ADDR_VAR 0 4
23455: PUSH
23456: DOUBLE
23457: LD_INT 1
23459: DEC
23460: ST_TO_ADDR
23461: LD_INT 2
23463: PPUSH
23464: LD_INT 4
23466: PPUSH
23467: CALL_OW 12
23471: PUSH
23472: FOR_TO
23473: IFFALSE 23566
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23475: LD_ADDR_VAR 0 5
23479: PUSH
23480: LD_VAR 0 1
23484: PPUSH
23485: CALL_OW 250
23489: PUSH
23490: LD_INT 2
23492: NEG
23493: PPUSH
23494: LD_INT 2
23496: PPUSH
23497: CALL_OW 12
23501: MINUS
23502: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23503: LD_ADDR_VAR 0 6
23507: PUSH
23508: LD_VAR 0 1
23512: PPUSH
23513: CALL_OW 251
23517: PUSH
23518: LD_INT 2
23520: NEG
23521: PPUSH
23522: LD_INT 2
23524: PPUSH
23525: CALL_OW 12
23529: PLUS
23530: ST_TO_ADDR
// if ValidHex ( x , y ) then
23531: LD_VAR 0 5
23535: PPUSH
23536: LD_VAR 0 6
23540: PPUSH
23541: CALL_OW 488
23545: IFFALSE 23564
// MineExplosion ( x , y , 10 ) ;
23547: LD_VAR 0 5
23551: PPUSH
23552: LD_VAR 0 6
23556: PPUSH
23557: LD_INT 10
23559: PPUSH
23560: CALL_OW 453
// end ;
23564: GO 23472
23566: POP
23567: POP
// end ; end ;
23568: PPOPN 6
23570: END
// on VehicleConstructed ( veh , fac ) do var side ;
23571: LD_INT 0
23573: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23574: LD_VAR 0 1
23578: PPUSH
23579: LD_VAR 0 2
23583: PPUSH
23584: CALL 50337 0 2
// side := GetSide ( fac ) ;
23588: LD_ADDR_VAR 0 3
23592: PUSH
23593: LD_VAR 0 2
23597: PPUSH
23598: CALL_OW 255
23602: ST_TO_ADDR
// if side = 3 then
23603: LD_VAR 0 3
23607: PUSH
23608: LD_INT 3
23610: EQUAL
23611: IFFALSE 23795
// begin if IsInArea ( fac , ruBaseArea ) then
23613: LD_VAR 0 2
23617: PPUSH
23618: LD_EXP 66
23622: PPUSH
23623: CALL_OW 308
23627: IFFALSE 23704
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23629: LD_ADDR_EXP 70
23633: PUSH
23634: LD_EXP 70
23638: PPUSH
23639: LD_INT 1
23641: PPUSH
23642: CALL_OW 3
23646: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23647: LD_VAR 0 1
23651: PPUSH
23652: CALL_OW 263
23656: PUSH
23657: LD_INT 1
23659: EQUAL
23660: IFFALSE 23684
// ruTanks := Join ( ruTanks , veh ) else
23662: LD_ADDR_EXP 79
23666: PUSH
23667: LD_EXP 79
23671: PPUSH
23672: LD_VAR 0 1
23676: PPUSH
23677: CALL 94638 0 2
23681: ST_TO_ADDR
23682: GO 23704
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23684: LD_ADDR_EXP 81
23688: PUSH
23689: LD_EXP 81
23693: PPUSH
23694: LD_VAR 0 1
23698: PPUSH
23699: CALL 94638 0 2
23703: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23704: LD_VAR 0 2
23708: PPUSH
23709: LD_EXP 67
23713: PPUSH
23714: CALL_OW 308
23718: IFFALSE 23795
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23720: LD_ADDR_EXP 71
23724: PUSH
23725: LD_EXP 71
23729: PPUSH
23730: LD_INT 1
23732: PPUSH
23733: CALL_OW 3
23737: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23738: LD_VAR 0 1
23742: PPUSH
23743: CALL_OW 263
23747: PUSH
23748: LD_INT 1
23750: EQUAL
23751: IFFALSE 23775
// ruTanks2 := Join ( ruTanks2 , veh ) else
23753: LD_ADDR_EXP 80
23757: PUSH
23758: LD_EXP 80
23762: PPUSH
23763: LD_VAR 0 1
23767: PPUSH
23768: CALL 94638 0 2
23772: ST_TO_ADDR
23773: GO 23795
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23775: LD_ADDR_EXP 81
23779: PUSH
23780: LD_EXP 81
23784: PPUSH
23785: LD_VAR 0 1
23789: PPUSH
23790: CALL 94638 0 2
23794: ST_TO_ADDR
// end ; end ; end ;
23795: PPOPN 3
23797: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23798: LD_INT 0
23800: PPUSH
23801: PPUSH
23802: PPUSH
// begin side := GetSide ( driver ) ;
23803: LD_ADDR_VAR 0 7
23807: PUSH
23808: LD_VAR 0 1
23812: PPUSH
23813: CALL_OW 255
23817: ST_TO_ADDR
// if side = 5 then
23818: LD_VAR 0 7
23822: PUSH
23823: LD_INT 5
23825: EQUAL
23826: IFFALSE 23906
// begin arAttackersVeh := arAttackersVeh diff driver ;
23828: LD_ADDR_EXP 58
23832: PUSH
23833: LD_EXP 58
23837: PUSH
23838: LD_VAR 0 1
23842: DIFF
23843: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23844: LD_VAR 0 1
23848: PPUSH
23849: LD_INT 189
23851: PPUSH
23852: LD_INT 80
23854: PPUSH
23855: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23859: LD_INT 35
23861: PPUSH
23862: CALL_OW 67
// if not IsOk ( driver ) then
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 302
23875: NOT
23876: IFFALSE 23880
// exit ;
23878: GO 24430
// until IsAt ( driver , 189 , 80 ) ;
23880: LD_VAR 0 1
23884: PPUSH
23885: LD_INT 189
23887: PPUSH
23888: LD_INT 80
23890: PPUSH
23891: CALL_OW 307
23895: IFFALSE 23859
// RemoveUnit ( driver ) ;
23897: LD_VAR 0 1
23901: PPUSH
23902: CALL_OW 64
// end ; if side = 6 then
23906: LD_VAR 0 7
23910: PUSH
23911: LD_INT 6
23913: EQUAL
23914: IFFALSE 23972
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_INT 19
23923: PPUSH
23924: CALL_OW 113
// wait ( 0 0$3 ) ;
23928: LD_INT 105
23930: PPUSH
23931: CALL_OW 67
// if not IsOk ( driver ) then
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 302
23944: NOT
23945: IFFALSE 23949
// exit ;
23947: GO 24430
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23949: LD_VAR 0 1
23953: PPUSH
23954: LD_INT 19
23956: PPUSH
23957: CALL_OW 308
23961: IFFALSE 23916
// RemoveUnit ( driver ) ;
23963: LD_VAR 0 1
23967: PPUSH
23968: CALL_OW 64
// end ; if side = 3 then
23972: LD_VAR 0 7
23976: PUSH
23977: LD_INT 3
23979: EQUAL
23980: IFFALSE 24430
// begin if driver in ruMech then
23982: LD_VAR 0 1
23986: PUSH
23987: LD_EXP 63
23991: IN
23992: IFFALSE 24206
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23994: LD_VAR 0 1
23998: PPUSH
23999: LD_EXP 66
24003: PPUSH
24004: CALL_OW 113
// SetTag ( driver , tMech ) ;
24008: LD_VAR 0 1
24012: PPUSH
24013: LD_INT 7
24015: PPUSH
24016: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24020: LD_ADDR_VAR 0 6
24024: PUSH
24025: LD_EXP 66
24029: PPUSH
24030: LD_INT 22
24032: PUSH
24033: LD_INT 3
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 30
24042: PUSH
24043: LD_INT 3
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 50
24052: PUSH
24053: EMPTY
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: PPUSH
24061: CALL_OW 70
24065: ST_TO_ADDR
// if fac then
24066: LD_VAR 0 6
24070: IFFALSE 24092
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24072: LD_VAR 0 1
24076: PPUSH
24077: LD_VAR 0 6
24081: PUSH
24082: LD_INT 1
24084: ARRAY
24085: PPUSH
24086: CALL_OW 180
// exit ;
24090: GO 24430
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24092: LD_ADDR_VAR 0 5
24096: PUSH
24097: LD_EXP 66
24101: PPUSH
24102: LD_INT 22
24104: PUSH
24105: LD_INT 3
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 2
24114: PUSH
24115: LD_INT 30
24117: PUSH
24118: LD_INT 4
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 30
24127: PUSH
24128: LD_INT 5
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 3
24142: PUSH
24143: LD_INT 62
24145: PUSH
24146: EMPTY
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 50
24155: PUSH
24156: EMPTY
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: PPUSH
24165: CALL_OW 70
24169: ST_TO_ADDR
// if arm then
24170: LD_VAR 0 5
24174: IFFALSE 24206
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24176: LD_VAR 0 1
24180: PPUSH
24181: LD_VAR 0 5
24185: PUSH
24186: LD_INT 1
24188: ARRAY
24189: PPUSH
24190: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_INT 1
24201: PPUSH
24202: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24206: LD_VAR 0 1
24210: PUSH
24211: LD_EXP 64
24215: IN
24216: IFFALSE 24430
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24218: LD_VAR 0 1
24222: PPUSH
24223: LD_EXP 67
24227: PPUSH
24228: CALL_OW 113
// SetTag ( driver , tMech ) ;
24232: LD_VAR 0 1
24236: PPUSH
24237: LD_INT 7
24239: PPUSH
24240: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24244: LD_ADDR_VAR 0 6
24248: PUSH
24249: LD_EXP 67
24253: PPUSH
24254: LD_INT 22
24256: PUSH
24257: LD_INT 3
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 30
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 50
24276: PUSH
24277: EMPTY
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: PPUSH
24285: CALL_OW 70
24289: ST_TO_ADDR
// if fac then
24290: LD_VAR 0 6
24294: IFFALSE 24316
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24296: LD_VAR 0 1
24300: PPUSH
24301: LD_VAR 0 6
24305: PUSH
24306: LD_INT 1
24308: ARRAY
24309: PPUSH
24310: CALL_OW 180
// exit ;
24314: GO 24430
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24316: LD_ADDR_VAR 0 5
24320: PUSH
24321: LD_EXP 67
24325: PPUSH
24326: LD_INT 22
24328: PUSH
24329: LD_INT 3
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: LD_INT 30
24341: PUSH
24342: LD_INT 4
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 30
24351: PUSH
24352: LD_INT 5
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 3
24366: PUSH
24367: LD_INT 62
24369: PUSH
24370: EMPTY
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 50
24379: PUSH
24380: EMPTY
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: PPUSH
24389: CALL_OW 70
24393: ST_TO_ADDR
// if arm then
24394: LD_VAR 0 5
24398: IFFALSE 24430
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24400: LD_VAR 0 1
24404: PPUSH
24405: LD_VAR 0 5
24409: PUSH
24410: LD_INT 1
24412: ARRAY
24413: PPUSH
24414: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24418: LD_VAR 0 1
24422: PPUSH
24423: LD_INT 1
24425: PPUSH
24426: CALL_OW 183
// end ; end ; end ; end ;
24430: PPOPN 7
24432: END
// on EndTheMissionRaised ( ev ) do begin if end_the_mission_allowed then
24433: LD_OWVAR 57
24437: IFFALSE 24451
// begin end_the_mission_allowed := false ;
24439: LD_ADDR_OWVAR 57
24443: PUSH
24444: LD_INT 0
24446: ST_TO_ADDR
// FinishMission ;
24447: CALL 32271 0 0
// end ; end ;
24451: PPOPN 1
24453: END
// on BuildingComplete ( b ) do var side , type ;
24454: LD_INT 0
24456: PPUSH
24457: PPUSH
// begin side := GetSide ( b ) ;
24458: LD_ADDR_VAR 0 2
24462: PUSH
24463: LD_VAR 0 1
24467: PPUSH
24468: CALL_OW 255
24472: ST_TO_ADDR
// type := GetBType ( b ) ;
24473: LD_ADDR_VAR 0 3
24477: PUSH
24478: LD_VAR 0 1
24482: PPUSH
24483: CALL_OW 266
24487: ST_TO_ADDR
// if side = 2 then
24488: LD_VAR 0 2
24492: PUSH
24493: LD_INT 2
24495: EQUAL
24496: IFFALSE 24516
// arBuildings := Delete ( arBuildings , 1 ) ;
24498: LD_ADDR_EXP 53
24502: PUSH
24503: LD_EXP 53
24507: PPUSH
24508: LD_INT 1
24510: PPUSH
24511: CALL_OW 3
24515: ST_TO_ADDR
// if side = 1 then
24516: LD_VAR 0 2
24520: PUSH
24521: LD_INT 1
24523: EQUAL
24524: IFFALSE 24588
// if type = b_depot and not hasBase then
24526: LD_VAR 0 3
24530: PUSH
24531: LD_INT 0
24533: EQUAL
24534: IFFALSE 24543
24536: PUSH
24537: LD_EXP 9
24541: NOT
24542: AND
24543: IFFALSE 24588
// begin hasBase := true ;
24545: LD_ADDR_EXP 9
24549: PUSH
24550: LD_INT 1
24552: ST_TO_ADDR
// epsilon := b ;
24553: LD_ADDR_EXP 10
24557: PUSH
24558: LD_VAR 0 1
24562: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24563: LD_VAR 0 1
24567: PPUSH
24568: LD_STRING epsilon
24570: PPUSH
24571: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24575: LD_INT 0
24577: PPUSH
24578: LD_INT 1
24580: PPUSH
24581: LD_INT 0
24583: PPUSH
24584: CALL_OW 324
// end ; if side = 3 then
24588: LD_VAR 0 2
24592: PUSH
24593: LD_INT 3
24595: EQUAL
24596: IFFALSE 24882
// begin if IsInArea ( b , ruBaseArea ) then
24598: LD_VAR 0 1
24602: PPUSH
24603: LD_EXP 66
24607: PPUSH
24608: CALL_OW 308
24612: IFFALSE 24632
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24614: LD_ADDR_EXP 76
24618: PUSH
24619: LD_EXP 76
24623: PPUSH
24624: LD_INT 1
24626: PPUSH
24627: CALL_OW 3
24631: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24632: LD_VAR 0 1
24636: PPUSH
24637: LD_EXP 67
24641: PPUSH
24642: CALL_OW 308
24646: IFFALSE 24666
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24648: LD_ADDR_EXP 77
24652: PUSH
24653: LD_EXP 77
24657: PPUSH
24658: LD_INT 1
24660: PPUSH
24661: CALL_OW 3
24665: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24666: LD_VAR 0 3
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: LD_INT 4
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: IN
24685: IFFALSE 24696
// ComUpgrade ( b ) ;
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL_OW 146
// if type = b_lab then
24696: LD_VAR 0 3
24700: PUSH
24701: LD_INT 6
24703: EQUAL
24704: IFFALSE 24748
// if IsInArea ( b , ruBaseArea ) then
24706: LD_VAR 0 1
24710: PPUSH
24711: LD_EXP 66
24715: PPUSH
24716: CALL_OW 308
24720: IFFALSE 24736
// ComUpgradeLab ( b , b_lab_weapon ) else
24722: LD_VAR 0 1
24726: PPUSH
24727: LD_INT 10
24729: PPUSH
24730: CALL_OW 147
24734: GO 24748
// ComUpgradeLab ( b , b_lab_computer ) ;
24736: LD_VAR 0 1
24740: PPUSH
24741: LD_INT 12
24743: PPUSH
24744: CALL_OW 147
// if type = b_depot then
24748: LD_VAR 0 3
24752: PUSH
24753: LD_INT 0
24755: EQUAL
24756: IFFALSE 24882
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 274
24767: PPUSH
24768: LD_INT 1
24770: PPUSH
24771: LD_INT 2550
24773: PPUSH
24774: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 274
24787: PPUSH
24788: LD_INT 2
24790: PPUSH
24791: LD_INT 250
24793: PPUSH
24794: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL_OW 274
24807: PPUSH
24808: LD_INT 3
24810: PPUSH
24811: LD_INT 200
24813: PPUSH
24814: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24818: LD_VAR 0 1
24822: PPUSH
24823: LD_EXP 66
24827: PPUSH
24828: CALL_OW 308
24832: IFFALSE 24856
// begin ruBase := b ;
24834: LD_ADDR_EXP 68
24838: PUSH
24839: LD_VAR 0 1
24843: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24844: LD_VAR 0 1
24848: PPUSH
24849: LD_STRING chuikov
24851: PPUSH
24852: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24856: LD_VAR 0 1
24860: PPUSH
24861: LD_EXP 67
24865: PPUSH
24866: CALL_OW 308
24870: IFFALSE 24882
// begin ruBase2 := b ;
24872: LD_ADDR_EXP 69
24876: PUSH
24877: LD_VAR 0 1
24881: ST_TO_ADDR
// end ; end ; end ; end ;
24882: PPOPN 3
24884: END
// on UpgradeComplete ( b ) do var side , type ;
24885: LD_INT 0
24887: PPUSH
24888: PPUSH
// begin side := GetSide ( b ) ;
24889: LD_ADDR_VAR 0 2
24893: PUSH
24894: LD_VAR 0 1
24898: PPUSH
24899: CALL_OW 255
24903: ST_TO_ADDR
// type := GetBType ( b ) ;
24904: LD_ADDR_VAR 0 3
24908: PUSH
24909: LD_VAR 0 1
24913: PPUSH
24914: CALL_OW 266
24918: ST_TO_ADDR
// if side = 3 then
24919: LD_VAR 0 2
24923: PUSH
24924: LD_INT 3
24926: EQUAL
24927: IFFALSE 24981
// if type = b_lab_half then
24929: LD_VAR 0 3
24933: PUSH
24934: LD_INT 7
24936: EQUAL
24937: IFFALSE 24981
// if IsInArea ( b , ruBaseArea ) then
24939: LD_VAR 0 1
24943: PPUSH
24944: LD_EXP 66
24948: PPUSH
24949: CALL_OW 308
24953: IFFALSE 24969
// ComUpgradeLab ( b , b_lab_spacetime ) else
24955: LD_VAR 0 1
24959: PPUSH
24960: LD_INT 14
24962: PPUSH
24963: CALL_OW 147
24967: GO 24981
// ComUpgradeLab ( b , b_lab_siberium ) ;
24969: LD_VAR 0 1
24973: PPUSH
24974: LD_INT 11
24976: PPUSH
24977: CALL_OW 147
// end ;
24981: PPOPN 3
24983: END
// on ResearchComplete ( tech , lab ) do var side ;
24984: LD_INT 0
24986: PPUSH
// begin side := GetSide ( lab ) ;
24987: LD_ADDR_VAR 0 3
24991: PUSH
24992: LD_VAR 0 2
24996: PPUSH
24997: CALL_OW 255
25001: ST_TO_ADDR
// if side = 2 then
25002: LD_VAR 0 3
25006: PUSH
25007: LD_INT 2
25009: EQUAL
25010: IFFALSE 25058
// begin arTech := Delete ( arTech , 1 ) ;
25012: LD_ADDR_EXP 52
25016: PUSH
25017: LD_EXP 52
25021: PPUSH
25022: LD_INT 1
25024: PPUSH
25025: CALL_OW 3
25029: ST_TO_ADDR
// if tech = tech_sibPow then
25030: LD_VAR 0 1
25034: PUSH
25035: LD_INT 21
25037: EQUAL
25038: IFFALSE 25044
// DArabTrait1 ;
25040: CALL 29151 0 0
// if tech = tech_sibEng then
25044: LD_VAR 0 1
25048: PUSH
25049: LD_INT 22
25051: EQUAL
25052: IFFALSE 25058
// DArabTrait2 ;
25054: CALL 29482 0 0
// end ; end ;
25058: PPOPN 3
25060: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
25061: LD_VAR 0 1
25065: PPUSH
25066: CALL 50321 0 1
// end ;
25070: PPOPN 1
25072: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25073: LD_VAR 0 1
25077: PUSH
25078: LD_INT 1
25080: EQUAL
25081: IFFALSE 25093
25083: PUSH
25084: LD_VAR 0 2
25088: PUSH
25089: LD_INT 2
25091: EQUAL
25092: AND
25093: IFFALSE 25111
25095: PUSH
25096: LD_INT 1
25098: PPUSH
25099: LD_INT 2
25101: PPUSH
25102: CALL_OW 81
25106: PUSH
25107: LD_INT 1
25109: EQUAL
25110: AND
25111: IFFALSE 25117
// DAttackOnAlly ;
25113: CALL 26833 0 0
// end ;
25117: PPOPN 2
25119: END
// on SailEvent ( event ) do begin case event of EArabAttack :
25120: LD_VAR 0 1
25124: PUSH
25125: LD_INT 101
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25140
25133: POP
// ArabAttack ; ERussianBaseC :
25134: CALL 7286 0 0
25138: GO 25292
25140: LD_INT 102
25142: DOUBLE
25143: EQUAL
25144: IFTRUE 25148
25146: GO 25169
25148: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
25149: LD_EXP 59
25153: PUSH
25154: LD_EXP 61
25158: UNION
25159: PPUSH
25160: LD_INT 1
25162: PPUSH
25163: CALL 10977 0 2
25167: GO 25292
25169: LD_INT 103
25171: DOUBLE
25172: EQUAL
25173: IFTRUE 25177
25175: GO 25198
25177: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
25178: LD_EXP 59
25182: PUSH
25183: LD_EXP 61
25187: UNION
25188: PPUSH
25189: LD_INT 2
25191: PPUSH
25192: CALL 10977 0 2
25196: GO 25292
25198: LD_INT 104
25200: DOUBLE
25201: EQUAL
25202: IFTRUE 25206
25204: GO 25227
25206: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
25207: LD_EXP 59
25211: PUSH
25212: LD_EXP 61
25216: UNION
25217: PPUSH
25218: LD_INT 3
25220: PPUSH
25221: CALL 10977 0 2
25225: GO 25292
25227: LD_INT 105
25229: DOUBLE
25230: EQUAL
25231: IFTRUE 25235
25233: GO 25256
25235: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25236: LD_EXP 60
25240: PUSH
25241: LD_EXP 62
25245: UNION
25246: PPUSH
25247: LD_INT 2
25249: PPUSH
25250: CALL 12486 0 2
25254: GO 25292
25256: LD_INT 106
25258: DOUBLE
25259: EQUAL
25260: IFTRUE 25264
25262: GO 25271
25264: POP
// RussianExtraAttack ; ESendRussianAttack :
25265: CALL 20389 0 0
25269: GO 25292
25271: LD_INT 107
25273: DOUBLE
25274: EQUAL
25275: IFTRUE 25279
25277: GO 25291
25279: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25280: LD_EXP 18
25284: PPUSH
25285: CALL 21483 0 1
25289: GO 25292
25291: POP
// end ; end_of_file
25292: PPOPN 1
25294: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25295: LD_INT 0
25297: PPUSH
25298: PPUSH
25299: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25300: LD_ADDR_VAR 0 1
25304: PUSH
25305: LD_VAR 0 1
25309: PUSH
25310: LD_EXP 23
25314: PUSH
25315: LD_EXP 24
25319: PUSH
25320: LD_EXP 25
25324: PUSH
25325: LD_EXP 26
25329: PUSH
25330: LD_EXP 27
25334: PUSH
25335: LD_EXP 28
25339: PUSH
25340: LD_EXP 29
25344: PUSH
25345: LD_EXP 30
25349: PUSH
25350: LD_EXP 31
25354: PUSH
25355: LD_EXP 32
25359: PUSH
25360: LD_EXP 33
25364: PUSH
25365: LD_EXP 34
25369: PUSH
25370: LD_EXP 35
25374: PUSH
25375: LD_EXP 36
25379: PUSH
25380: LD_EXP 37
25384: PUSH
25385: LD_EXP 38
25389: PUSH
25390: LD_EXP 39
25394: PUSH
25395: LD_EXP 40
25399: PUSH
25400: LD_EXP 42
25404: PUSH
25405: LD_EXP 44
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: DIFF
25432: ST_TO_ADDR
// if not characters then
25433: LD_VAR 0 1
25437: NOT
25438: IFFALSE 25442
// exit ;
25440: GO 25526
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25442: LD_ADDR_VAR 0 6
25446: PUSH
25447: LD_VAR 0 1
25451: PUSH
25452: LD_INT 1
25454: PPUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL 58706 0 1
25464: PPUSH
25465: CALL_OW 12
25469: ARRAY
25470: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25471: LD_VAR 0 6
25475: PPUSH
25476: CALL_OW 258
25480: PUSH
25481: LD_INT 1
25483: EQUAL
25484: IFFALSE 25502
// Say ( speaker , dialogMID ) else
25486: LD_VAR 0 6
25490: PPUSH
25491: LD_VAR 0 2
25495: PPUSH
25496: CALL_OW 88
25500: GO 25516
// Say ( speaker , dialogFID ) ;
25502: LD_VAR 0 6
25506: PPUSH
25507: LD_VAR 0 3
25511: PPUSH
25512: CALL_OW 88
// result := speaker ;
25516: LD_ADDR_VAR 0 4
25520: PUSH
25521: LD_VAR 0 6
25525: ST_TO_ADDR
// end ; end_of_file
25526: LD_VAR 0 4
25530: RET
// export function Action ; begin
25531: LD_INT 0
25533: PPUSH
// InGameOn ;
25534: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25538: LD_INT 25
25540: PPUSH
25541: LD_INT 35
25543: PPUSH
25544: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25548: LD_INT 1
25550: PPUSH
25551: LD_INT 5
25553: PPUSH
25554: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25558: LD_INT 1
25560: PPUSH
25561: LD_INT 4
25563: PPUSH
25564: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25568: LD_INT 52
25570: PPUSH
25571: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25575: LD_EXP 33
25579: PPUSH
25580: CALL_OW 87
// wait ( 0 0$3 ) ;
25584: LD_INT 105
25586: PPUSH
25587: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25591: LD_EXP 23
25595: PPUSH
25596: CALL_OW 310
25600: PPUSH
25601: CALL_OW 85
// wait ( 0 0$1 ) ;
25605: LD_INT 35
25607: PPUSH
25608: CALL_OW 67
// if IsOk ( Gary ) then
25612: LD_EXP 32
25616: PPUSH
25617: CALL_OW 302
25621: IFFALSE 25659
// begin Say ( Gary , D2-Gary-1 ) ;
25623: LD_EXP 32
25627: PPUSH
25628: LD_STRING D2-Gary-1
25630: PPUSH
25631: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25635: LD_EXP 23
25639: PPUSH
25640: LD_STRING D2-JMM-1
25642: PPUSH
25643: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25647: LD_EXP 32
25651: PPUSH
25652: LD_STRING D2-Gary-2
25654: PPUSH
25655: CALL_OW 88
// end ; InGameOff ;
25659: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25663: LD_STRING M1
25665: PPUSH
25666: CALL_OW 337
// SaveForQuickRestart ;
25670: CALL_OW 22
// end ;
25674: LD_VAR 0 1
25678: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25679: LD_EXP 23
25683: PPUSH
25684: LD_EXP 33
25688: PPUSH
25689: CALL_OW 296
25693: PUSH
25694: LD_INT 15
25696: LESS
25697: IFFALSE 26661
25699: GO 25701
25701: DISABLE
25702: LD_INT 0
25704: PPUSH
25705: PPUSH
// begin wait ( 0 0$3 ) ;
25706: LD_INT 105
25708: PPUSH
25709: CALL_OW 67
// Video ( true ) ;
25713: LD_INT 1
25715: PPUSH
25716: CALL 94610 0 1
// ComExitVehicle ( JMM ) ;
25720: LD_EXP 23
25724: PPUSH
25725: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25729: LD_EXP 23
25733: PPUSH
25734: LD_EXP 33
25738: PPUSH
25739: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25743: LD_EXP 23
25747: PPUSH
25748: CALL_OW 87
// if Truman then
25752: LD_EXP 43
25756: IFFALSE 25893
// begin ComMoveUnit ( Truman , JMM ) ;
25758: LD_EXP 43
25762: PPUSH
25763: LD_EXP 23
25767: PPUSH
25768: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25772: LD_INT 35
25774: PPUSH
25775: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25779: LD_EXP 43
25783: PPUSH
25784: LD_EXP 23
25788: PPUSH
25789: CALL_OW 296
25793: PUSH
25794: LD_INT 6
25796: LESS
25797: IFFALSE 25772
// ComTurnUnit ( Truman , JMM ) ;
25799: LD_EXP 43
25803: PPUSH
25804: LD_EXP 23
25808: PPUSH
25809: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25813: LD_EXP 23
25817: PPUSH
25818: LD_EXP 43
25822: PPUSH
25823: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25827: LD_EXP 43
25831: PPUSH
25832: LD_STRING D2-Tru-1
25834: PPUSH
25835: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25839: LD_EXP 23
25843: PPUSH
25844: LD_STRING D2-JMM-Tru-1
25846: PPUSH
25847: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25851: LD_EXP 43
25855: PPUSH
25856: LD_STRING D2-Tru-2
25858: PPUSH
25859: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25863: LD_EXP 43
25867: PPUSH
25868: LD_INT 79
25870: PPUSH
25871: LD_INT 41
25873: PPUSH
25874: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25878: LD_EXP 43
25882: PPUSH
25883: LD_INT 17
25885: PPUSH
25886: LD_INT 31
25888: PPUSH
25889: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25893: LD_EXP 23
25897: PPUSH
25898: LD_EXP 33
25902: PPUSH
25903: CALL_OW 179
// p := 15 ;
25907: LD_ADDR_VAR 0 2
25911: PUSH
25912: LD_INT 15
25914: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25915: LD_INT 35
25917: PPUSH
25918: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25922: LD_EXP 33
25926: PUSH
25927: LD_EXP 35
25931: PUSH
25932: LD_EXP 34
25936: PUSH
25937: LD_EXP 36
25941: PUSH
25942: LD_EXP 30
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: PPUSH
25954: LD_EXP 23
25958: PPUSH
25959: CALL_OW 112
// p := p - 1 ;
25963: LD_ADDR_VAR 0 2
25967: PUSH
25968: LD_VAR 0 2
25972: PUSH
25973: LD_INT 1
25975: MINUS
25976: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25977: LD_EXP 23
25981: PPUSH
25982: LD_EXP 33
25986: PPUSH
25987: CALL_OW 296
25991: PUSH
25992: LD_INT 5
25994: LESS
25995: IFTRUE 26007
25997: PUSH
25998: LD_VAR 0 2
26002: PUSH
26003: LD_INT 0
26005: LESSEQUAL
26006: OR
26007: IFFALSE 25915
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
26009: LD_EXP 33
26013: PUSH
26014: LD_EXP 35
26018: PUSH
26019: LD_EXP 34
26023: PUSH
26024: LD_EXP 36
26028: PUSH
26029: LD_EXP 30
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: PPUSH
26041: LD_EXP 23
26045: PPUSH
26046: CALL_OW 119
// if not IsInUnit ( JMM ) then
26050: LD_EXP 23
26054: PPUSH
26055: CALL_OW 310
26059: NOT
26060: IFFALSE 26076
// ComTurnUnit ( JMM , Simms ) ;
26062: LD_EXP 23
26066: PPUSH
26067: LD_EXP 33
26071: PPUSH
26072: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
26076: LD_EXP 33
26080: PUSH
26081: LD_EXP 35
26085: PUSH
26086: LD_EXP 34
26090: PUSH
26091: LD_EXP 36
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: PPUSH
26102: LD_EXP 23
26106: PPUSH
26107: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
26111: LD_EXP 23
26115: PUSH
26116: LD_EXP 33
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PPUSH
26125: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
26129: LD_EXP 33
26133: PPUSH
26134: LD_STRING D2a-Sim-1
26136: PPUSH
26137: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
26141: LD_EXP 23
26145: PPUSH
26146: LD_STRING D2a-JMM-1
26148: PPUSH
26149: CALL_OW 88
// if IsOk ( Joan ) then
26153: LD_EXP 35
26157: PPUSH
26158: CALL_OW 302
26162: IFFALSE 26240
// begin if not IsInUnit ( JMM ) then
26164: LD_EXP 23
26168: PPUSH
26169: CALL_OW 310
26173: NOT
26174: IFFALSE 26190
// ComTurnUnit ( JMM , Joan ) ;
26176: LD_EXP 23
26180: PPUSH
26181: LD_EXP 35
26185: PPUSH
26186: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
26190: LD_EXP 35
26194: PPUSH
26195: LD_EXP 23
26199: PPUSH
26200: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
26204: LD_EXP 35
26208: PPUSH
26209: LD_STRING D2b-Joan-1
26211: PPUSH
26212: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26216: LD_EXP 23
26220: PPUSH
26221: LD_STRING D2b-JMM-1
26223: PPUSH
26224: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26228: LD_EXP 35
26232: PPUSH
26233: LD_STRING D2b-Joan-2
26235: PPUSH
26236: CALL_OW 88
// end ; if IsOk ( Denis ) then
26240: LD_EXP 34
26244: PPUSH
26245: CALL_OW 302
26249: IFFALSE 26303
// begin if not IsInUnit ( JMM ) then
26251: LD_EXP 23
26255: PPUSH
26256: CALL_OW 310
26260: NOT
26261: IFFALSE 26277
// ComTurnUnit ( JMM , Denis ) ;
26263: LD_EXP 23
26267: PPUSH
26268: LD_EXP 34
26272: PPUSH
26273: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26277: LD_EXP 34
26281: PPUSH
26282: LD_EXP 23
26286: PPUSH
26287: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26291: LD_EXP 34
26295: PPUSH
26296: LD_STRING D2c-Den-1
26298: PPUSH
26299: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26303: LD_EXP 30
26307: PPUSH
26308: CALL_OW 302
26312: IFFALSE 26324
26314: PUSH
26315: LD_STRING 08_Kikuchi
26317: PPUSH
26318: CALL_OW 28
26322: NOT
26323: AND
26324: IFFALSE 26419
// begin repeat wait ( 0 0$1 ) ;
26326: LD_INT 35
26328: PPUSH
26329: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26333: LD_EXP 30
26337: PPUSH
26338: LD_EXP 23
26342: PPUSH
26343: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26347: LD_EXP 23
26351: PPUSH
26352: LD_EXP 30
26356: PPUSH
26357: CALL_OW 296
26361: PUSH
26362: LD_INT 5
26364: LESS
26365: IFFALSE 26326
// ComTurnUnit ( Kikuchi , JMM ) ;
26367: LD_EXP 30
26371: PPUSH
26372: LD_EXP 23
26376: PPUSH
26377: CALL_OW 119
// if not IsInUnit ( JMM ) then
26381: LD_EXP 23
26385: PPUSH
26386: CALL_OW 310
26390: NOT
26391: IFFALSE 26407
// ComTurnUnit ( JMM , Kikuchi ) ;
26393: LD_EXP 23
26397: PPUSH
26398: LD_EXP 30
26402: PPUSH
26403: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26407: LD_EXP 30
26411: PPUSH
26412: LD_STRING D3b-Yam-1
26414: PPUSH
26415: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26419: LD_EXP 36
26423: PPUSH
26424: CALL_OW 302
26428: IFFALSE 26494
// begin if not IsInUnit ( JMM ) then
26430: LD_EXP 23
26434: PPUSH
26435: CALL_OW 310
26439: NOT
26440: IFFALSE 26456
// ComTurnUnit ( JMM , Khatam ) ;
26442: LD_EXP 23
26446: PPUSH
26447: LD_EXP 36
26451: PPUSH
26452: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26456: LD_EXP 36
26460: PPUSH
26461: LD_EXP 23
26465: PPUSH
26466: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26470: LD_EXP 23
26474: PPUSH
26475: LD_STRING D2c-JMM-1
26477: PPUSH
26478: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26482: LD_EXP 36
26486: PPUSH
26487: LD_STRING D2c-Khat-1
26489: PPUSH
26490: CALL_OW 88
// end ; Video ( false ) ;
26494: LD_INT 0
26496: PPUSH
26497: CALL 94610 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26501: LD_INT 22
26503: PUSH
26504: LD_INT 4
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PPUSH
26511: CALL_OW 69
26515: PUSH
26516: LD_EXP 43
26520: DIFF
26521: PPUSH
26522: LD_INT 1
26524: PPUSH
26525: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26529: LD_STRING M1a
26531: PPUSH
26532: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26536: LD_INT 0
26538: PPUSH
26539: LD_INT 1
26541: PPUSH
26542: LD_INT 1
26544: PPUSH
26545: CALL_OW 324
// joinedToEpsilon := true ;
26549: LD_ADDR_EXP 7
26553: PUSH
26554: LD_INT 1
26556: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26557: LD_INT 1050
26559: PPUSH
26560: CALL_OW 67
// SpawnConvoy ;
26564: CALL 10495 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26568: LD_INT 25200
26570: PUSH
26571: LD_INT 2100
26573: PUSH
26574: LD_OWVAR 67
26578: MUL
26579: MINUS
26580: PPUSH
26581: CALL_OW 67
// firstAttack := true ;
26585: LD_ADDR_EXP 16
26589: PUSH
26590: LD_INT 1
26592: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26593: LD_INT 107
26595: PPUSH
26596: CALL_OW 427
// for i := 1 to Difficulty do
26600: LD_ADDR_VAR 0 1
26604: PUSH
26605: DOUBLE
26606: LD_INT 1
26608: DEC
26609: ST_TO_ADDR
26610: LD_OWVAR 67
26614: PUSH
26615: FOR_TO
26616: IFFALSE 26659
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26618: LD_INT 25200
26620: PUSH
26621: LD_INT 2100
26623: PUSH
26624: LD_OWVAR 67
26628: MUL
26629: MINUS
26630: PPUSH
26631: CALL_OW 67
// if not ruActiveAttacks then
26635: LD_EXP 22
26639: NOT
26640: IFFALSE 26650
// ruActiveAttacks := true ;
26642: LD_ADDR_EXP 22
26646: PUSH
26647: LD_INT 1
26649: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26650: LD_INT 107
26652: PPUSH
26653: CALL_OW 427
// end ;
26657: GO 26615
26659: POP
26660: POP
// end ;
26661: PPOPN 2
26663: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26664: LD_EXP 43
26668: PPUSH
26669: CALL_OW 302
26673: IFFALSE 26681
26675: PUSH
26676: LD_EXP 7
26680: AND
26681: IFFALSE 26754
26683: GO 26685
26685: DISABLE
// begin enable ;
26686: ENABLE
// if not HasTask ( Truman ) then
26687: LD_EXP 43
26691: PPUSH
26692: CALL_OW 314
26696: NOT
26697: IFFALSE 26711
// ComMoveToArea ( Truman , removeArea ) ;
26699: LD_EXP 43
26703: PPUSH
26704: LD_INT 10
26706: PPUSH
26707: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26711: LD_EXP 43
26715: PPUSH
26716: LD_INT 17
26718: PPUSH
26719: LD_INT 32
26721: PPUSH
26722: CALL_OW 307
26726: IFTRUE 26742
26728: PUSH
26729: LD_EXP 43
26733: PPUSH
26734: LD_INT 10
26736: PPUSH
26737: CALL_OW 308
26741: OR
26742: IFFALSE 26754
// begin RemoveUnit ( Truman ) ;
26744: LD_EXP 43
26748: PPUSH
26749: CALL_OW 64
// disable ;
26753: DISABLE
// end ; end ;
26754: END
// export function DTankTeleport ( x , y ) ; begin
26755: LD_INT 0
26757: PPUSH
// DialogueOn ;
26758: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26762: LD_VAR 0 1
26766: PPUSH
26767: LD_VAR 0 2
26771: PPUSH
26772: CALL_OW 86
// if IsOk ( Cyrus ) then
26776: LD_EXP 27
26780: PPUSH
26781: CALL_OW 302
26785: IFFALSE 26801
// Say ( Cyrus , D10-Cyrus-1 ) else
26787: LD_EXP 27
26791: PPUSH
26792: LD_STRING D10-Cyrus-1
26794: PPUSH
26795: CALL_OW 88
26799: GO 26824
// if IsOk ( JMM ) then
26801: LD_EXP 23
26805: PPUSH
26806: CALL_OW 302
26810: IFFALSE 26824
// Say ( JMM , D10-JMM-1 ) ;
26812: LD_EXP 23
26816: PPUSH
26817: LD_STRING D10-JMM-1
26819: PPUSH
26820: CALL_OW 88
// DialogueOff ;
26824: CALL_OW 7
// end ;
26828: LD_VAR 0 3
26832: RET
// export function DAttackOnAlly ; begin
26833: LD_INT 0
26835: PPUSH
// DialogueOn ;
26836: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26840: LD_INT 10
26842: PPUSH
26843: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26847: LD_EXP 44
26851: PPUSH
26852: LD_STRING D6b-Pow-1
26854: PPUSH
26855: CALL_OW 94
// YouLost ( Powell ) ;
26859: LD_STRING Powell
26861: PPUSH
26862: CALL_OW 104
// DialogueOff ;
26866: CALL_OW 7
// end ;
26870: LD_VAR 0 1
26874: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26875: LD_INT 5
26877: PPUSH
26878: LD_INT 22
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 21
26890: PUSH
26891: LD_INT 3
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PPUSH
26902: CALL_OW 70
26906: IFTRUE 26941
26908: PUSH
26909: LD_INT 5
26911: PPUSH
26912: LD_INT 22
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 21
26924: PUSH
26925: LD_INT 2
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PPUSH
26936: CALL_OW 70
26940: OR
26941: IFFALSE 26959
26943: PUSH
26944: LD_INT 1
26946: PPUSH
26947: LD_INT 2
26949: PPUSH
26950: CALL_OW 81
26954: PUSH
26955: LD_INT 1
26957: EQUAL
26958: AND
26959: IFFALSE 27202
26961: GO 26963
26963: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26964: LD_INT 5
26966: PPUSH
26967: LD_INT 22
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 21
26979: PUSH
26980: LD_INT 3
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PPUSH
26991: CALL_OW 70
26995: IFTRUE 27030
26997: PUSH
26998: LD_INT 5
27000: PPUSH
27001: LD_INT 22
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 21
27013: PUSH
27014: LD_INT 2
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PPUSH
27025: CALL_OW 70
27029: OR
27030: IFFALSE 27048
27032: PUSH
27033: LD_INT 1
27035: PPUSH
27036: LD_INT 2
27038: PPUSH
27039: CALL_OW 81
27043: PUSH
27044: LD_INT 1
27046: EQUAL
27047: AND
27048: IFFALSE 27057
// Query ( QAttack ) ;
27050: LD_STRING QAttack
27052: PPUSH
27053: CALL_OW 97
// wait ( 0 0$20 ) ;
27057: LD_INT 700
27059: PPUSH
27060: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
27064: LD_INT 350
27066: PPUSH
27067: CALL_OW 67
// if arabianAttack then
27071: LD_EXP 4
27075: IFFALSE 27079
// exit ;
27077: GO 27202
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
27079: LD_INT 5
27081: PPUSH
27082: LD_INT 22
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 21
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PPUSH
27106: CALL_OW 70
27110: IFTRUE 27145
27112: PUSH
27113: LD_INT 5
27115: PPUSH
27116: LD_INT 22
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 21
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PPUSH
27140: CALL_OW 70
27144: OR
27145: IFFALSE 27163
27147: PUSH
27148: LD_INT 1
27150: PPUSH
27151: LD_INT 2
27153: PPUSH
27154: CALL_OW 81
27158: PUSH
27159: LD_INT 1
27161: EQUAL
27162: AND
27163: IFFALSE 27064
// InGameOn ;
27165: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
27169: LD_INT 73
27171: PPUSH
27172: LD_INT 18
27174: PPUSH
27175: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
27179: LD_EXP 44
27183: PPUSH
27184: LD_STRING D6b-Pow-1
27186: PPUSH
27187: CALL_OW 94
// YouLost ( Powell ) ;
27191: LD_STRING Powell
27193: PPUSH
27194: CALL_OW 104
// InGameOff ;
27198: CALL_OW 9
// end ;
27202: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
27203: LD_INT 12
27205: PPUSH
27206: LD_INT 1
27208: PPUSH
27209: CALL_OW 321
27213: PUSH
27214: LD_INT 2
27216: EQUAL
27217: IFFALSE 27229
27219: GO 27221
27221: DISABLE
// ChangeMissionObjectives ( M2b ) ;
27222: LD_STRING M2b
27224: PPUSH
27225: CALL_OW 337
27229: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
27230: LD_INT 32
27232: PPUSH
27233: LD_INT 1
27235: PPUSH
27236: CALL_OW 321
27240: PUSH
27241: LD_INT 2
27243: EQUAL
27244: IFFALSE 27256
27246: GO 27248
27248: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27249: LD_STRING M2c
27251: PPUSH
27252: CALL_OW 337
27256: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27257: LD_EXP 4
27261: IFFALSE 27269
27263: PUSH
27264: LD_EXP 12
27268: AND
27269: IFFALSE 27305
27271: PUSH
27272: LD_INT 22
27274: PUSH
27275: LD_INT 2
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 21
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PPUSH
27296: CALL_OW 69
27300: PUSH
27301: LD_INT 0
27303: EQUAL
27304: AND
27305: IFFALSE 27328
27307: PUSH
27308: LD_EXP 58
27312: PPUSH
27313: LD_INT 50
27315: PUSH
27316: EMPTY
27317: LIST
27318: PPUSH
27319: CALL_OW 72
27323: PUSH
27324: LD_INT 0
27326: EQUAL
27327: AND
27328: IFFALSE 27351
27330: PUSH
27331: LD_EXP 57
27335: PPUSH
27336: LD_INT 50
27338: PUSH
27339: EMPTY
27340: LIST
27341: PPUSH
27342: CALL_OW 72
27346: PUSH
27347: LD_INT 0
27349: EQUAL
27350: AND
27351: IFFALSE 27371
27353: GO 27355
27355: DISABLE
// begin arabianDefeated := true ;
27356: LD_ADDR_EXP 8
27360: PUSH
27361: LD_INT 1
27363: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27364: LD_STRING M4a
27366: PPUSH
27367: CALL_OW 337
// end ;
27371: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27372: LD_INT 54
27374: PPUSH
27375: LD_INT 1
27377: PPUSH
27378: CALL_OW 321
27382: PUSH
27383: LD_INT 2
27385: EQUAL
27386: IFFALSE 27404
27388: PUSH
27389: LD_INT 55
27391: PPUSH
27392: LD_INT 1
27394: PPUSH
27395: CALL_OW 321
27399: PUSH
27400: LD_INT 2
27402: EQUAL
27403: AND
27404: IFFALSE 27422
27406: PUSH
27407: LD_INT 21
27409: PPUSH
27410: LD_INT 1
27412: PPUSH
27413: CALL_OW 321
27417: PUSH
27418: LD_INT 2
27420: EQUAL
27421: AND
27422: IFFALSE 27440
27424: PUSH
27425: LD_INT 22
27427: PPUSH
27428: LD_INT 1
27430: PPUSH
27431: CALL_OW 321
27435: PUSH
27436: LD_INT 2
27438: EQUAL
27439: AND
27440: IFFALSE 27452
27442: GO 27444
27444: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27445: LD_STRING M2a
27447: PPUSH
27448: CALL_OW 337
27452: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27453: LD_INT 22
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: LD_INT 57
27468: PUSH
27469: EMPTY
27470: LIST
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 63
27478: PUSH
27479: LD_INT 11
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: PPUSH
27491: CALL_OW 69
27495: IFFALSE 28729
27497: GO 27499
27499: DISABLE
27500: LD_INT 0
27502: PPUSH
27503: PPUSH
27504: PPUSH
27505: PPUSH
27506: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27507: LD_ADDR_VAR 0 1
27511: PUSH
27512: LD_EXP 32
27516: PPUSH
27517: CALL_OW 302
27521: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27522: LD_ADDR_VAR 0 2
27526: PUSH
27527: LD_EXP 39
27531: PPUSH
27532: CALL_OW 302
27536: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27537: LD_ADDR_VAR 0 3
27541: PUSH
27542: LD_INT 22
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 50
27554: PUSH
27555: EMPTY
27556: LIST
27557: PUSH
27558: LD_INT 25
27560: PUSH
27561: LD_INT 4
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 26
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 69
27588: PUSH
27589: LD_EXP 23
27593: PUSH
27594: LD_EXP 24
27598: PUSH
27599: LD_EXP 25
27603: PUSH
27604: LD_EXP 26
27608: PUSH
27609: LD_EXP 27
27613: PUSH
27614: LD_EXP 28
27618: PUSH
27619: LD_EXP 29
27623: PUSH
27624: LD_EXP 30
27628: PUSH
27629: LD_EXP 31
27633: PUSH
27634: LD_EXP 32
27638: PUSH
27639: LD_EXP 33
27643: PUSH
27644: LD_EXP 34
27648: PUSH
27649: LD_EXP 35
27653: PUSH
27654: LD_EXP 36
27658: PUSH
27659: LD_EXP 37
27663: PUSH
27664: LD_EXP 38
27668: PUSH
27669: LD_EXP 39
27673: PUSH
27674: LD_EXP 40
27678: PUSH
27679: LD_EXP 42
27683: PUSH
27684: LD_EXP 44
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: DIFF
27711: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27712: LD_ADDR_VAR 0 4
27716: PUSH
27717: LD_INT 22
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 50
27729: PUSH
27730: EMPTY
27731: LIST
27732: PUSH
27733: LD_INT 26
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: LD_INT 25
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 25
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 25
27768: PUSH
27769: LD_INT 3
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: PPUSH
27788: CALL_OW 69
27792: PUSH
27793: LD_EXP 23
27797: PUSH
27798: LD_EXP 24
27802: PUSH
27803: LD_EXP 25
27807: PUSH
27808: LD_EXP 26
27812: PUSH
27813: LD_EXP 27
27817: PUSH
27818: LD_EXP 28
27822: PUSH
27823: LD_EXP 29
27827: PUSH
27828: LD_EXP 30
27832: PUSH
27833: LD_EXP 31
27837: PUSH
27838: LD_EXP 32
27842: PUSH
27843: LD_EXP 33
27847: PUSH
27848: LD_EXP 34
27852: PUSH
27853: LD_EXP 35
27857: PUSH
27858: LD_EXP 36
27862: PUSH
27863: LD_EXP 37
27867: PUSH
27868: LD_EXP 38
27872: PUSH
27873: LD_EXP 39
27877: PUSH
27878: LD_EXP 40
27882: PUSH
27883: LD_EXP 42
27887: PUSH
27888: LD_EXP 44
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: DIFF
27915: ST_TO_ADDR
// if tmp1 then
27916: LD_VAR 0 3
27920: IFFALSE 27936
// tmp1 := tmp1 [ 1 ] ;
27922: LD_ADDR_VAR 0 3
27926: PUSH
27927: LD_VAR 0 3
27931: PUSH
27932: LD_INT 1
27934: ARRAY
27935: ST_TO_ADDR
// if tmp2 then
27936: LD_VAR 0 4
27940: IFFALSE 27956
// tmp2 := tmp2 [ 1 ] ;
27942: LD_ADDR_VAR 0 4
27946: PUSH
27947: LD_VAR 0 4
27951: PUSH
27952: LD_INT 1
27954: ARRAY
27955: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27956: LD_VAR 0 1
27960: IFTRUE 27968
27962: PUSH
27963: LD_VAR 0 4
27967: OR
27968: IFFALSE 27984
27970: PUSH
27971: LD_VAR 0 2
27975: IFTRUE 27983
27977: PUSH
27978: LD_VAR 0 3
27982: OR
27983: AND
27984: IFFALSE 28178
// begin DialogueOn ;
27986: CALL_OW 6
// if deltaSpeaker then
27990: LD_VAR 0 2
27994: IFFALSE 28010
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27996: LD_EXP 39
28000: PPUSH
28001: LD_STRING D3-Sci1-1
28003: PPUSH
28004: CALL_OW 88
28008: GO 28022
// Say ( tmp1 , D3-Sci1-1 ) ;
28010: LD_VAR 0 3
28014: PPUSH
28015: LD_STRING D3-Sci1-1
28017: PPUSH
28018: CALL_OW 88
// if garySpeaker then
28022: LD_VAR 0 1
28026: IFFALSE 28042
// Say ( Gary , D3-Gary-1 ) else
28028: LD_EXP 32
28032: PPUSH
28033: LD_STRING D3-Gary-1
28035: PPUSH
28036: CALL_OW 88
28040: GO 28054
// Say ( tmp2 , D3-Gary-1 ) ;
28042: LD_VAR 0 4
28046: PPUSH
28047: LD_STRING D3-Gary-1
28049: PPUSH
28050: CALL_OW 88
// if deltaSpeaker then
28054: LD_VAR 0 2
28058: IFFALSE 28074
// Say ( DeltaDoctor , D3-Sci1-2 ) else
28060: LD_EXP 39
28064: PPUSH
28065: LD_STRING D3-Sci1-2
28067: PPUSH
28068: CALL_OW 88
28072: GO 28086
// Say ( tmp1 , D3-Sci1-2 ) ;
28074: LD_VAR 0 3
28078: PPUSH
28079: LD_STRING D3-Sci1-2
28081: PPUSH
28082: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
28086: LD_EXP 23
28090: PPUSH
28091: LD_STRING D3-JMM-2
28093: PPUSH
28094: CALL_OW 88
// if deltaSpeaker then
28098: LD_VAR 0 2
28102: IFFALSE 28118
// Say ( DeltaDoctor , D3-Sci1-3 ) else
28104: LD_EXP 39
28108: PPUSH
28109: LD_STRING D3-Sci1-3
28111: PPUSH
28112: CALL_OW 88
28116: GO 28130
// Say ( tmp1 , D3-Sci1-3 ) ;
28118: LD_VAR 0 3
28122: PPUSH
28123: LD_STRING D3-Sci1-3
28125: PPUSH
28126: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
28130: LD_EXP 23
28134: PPUSH
28135: LD_STRING D3-JMM-3
28137: PPUSH
28138: CALL_OW 88
// if deltaSpeaker then
28142: LD_VAR 0 2
28146: IFFALSE 28162
// Say ( DeltaDoctor , D3-Sci1-4 ) else
28148: LD_EXP 39
28152: PPUSH
28153: LD_STRING D3-Sci1-4
28155: PPUSH
28156: CALL_OW 88
28160: GO 28174
// Say ( tmp1 , D3-Sci1-4 ) ;
28162: LD_VAR 0 3
28166: PPUSH
28167: LD_STRING D3-Sci1-4
28169: PPUSH
28170: CALL_OW 88
// DialogueOff ;
28174: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
28178: LD_INT 12
28180: PPUSH
28181: LD_INT 1
28183: PPUSH
28184: LD_INT 1
28186: PPUSH
28187: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
28191: LD_INT 40
28193: PPUSH
28194: LD_INT 1
28196: PPUSH
28197: LD_INT 1
28199: PPUSH
28200: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
28204: LD_INT 32
28206: PPUSH
28207: LD_INT 1
28209: PPUSH
28210: LD_INT 1
28212: PPUSH
28213: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
28217: LD_INT 33
28219: PPUSH
28220: LD_INT 1
28222: PPUSH
28223: LD_INT 1
28225: PPUSH
28226: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
28230: LD_INT 12
28232: PPUSH
28233: LD_INT 1
28235: PPUSH
28236: LD_INT 1
28238: PPUSH
28239: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
28243: LD_STRING M2
28245: PPUSH
28246: CALL_OW 337
// wait ( 3 3$0 ) ;
28250: LD_INT 6300
28252: PPUSH
28253: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28257: LD_INT 35
28259: PPUSH
28260: CALL_OW 67
// until not InBattle ( 1 ) ;
28264: LD_INT 1
28266: PPUSH
28267: CALL_OW 463
28271: NOT
28272: IFFALSE 28257
// if IsOk ( Simms ) and deltaSpeaker then
28274: LD_EXP 33
28278: PPUSH
28279: CALL_OW 302
28283: IFFALSE 28291
28285: PUSH
28286: LD_VAR 0 2
28290: AND
28291: IFFALSE 28460
// begin DialogueOn ;
28293: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28297: LD_EXP 33
28301: PPUSH
28302: LD_STRING D3a-Sim-1
28304: PPUSH
28305: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28309: LD_EXP 39
28313: PPUSH
28314: LD_STRING D3a-Sci1-1
28316: PPUSH
28317: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28321: LD_EXP 33
28325: PPUSH
28326: LD_STRING D3a-Sim-2
28328: PPUSH
28329: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28333: LD_EXP 39
28337: PPUSH
28338: LD_STRING D3a-Sci1-2
28340: PPUSH
28341: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28345: LD_EXP 33
28349: PPUSH
28350: LD_STRING D3a-Sim-3
28352: PPUSH
28353: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28357: LD_EXP 39
28361: PPUSH
28362: LD_STRING D3a-Sci1-3
28364: PPUSH
28365: CALL_OW 88
// if IsOK ( Joan ) then
28369: LD_EXP 35
28373: PPUSH
28374: CALL_OW 302
28378: IFFALSE 28394
// Say ( Simms , D3a-Sim-4 ) else
28380: LD_EXP 33
28384: PPUSH
28385: LD_STRING D3a-Sim-4
28387: PPUSH
28388: CALL_OW 88
28392: GO 28406
// Say ( Simms , D3a-Sim-4a ) ;
28394: LD_EXP 33
28398: PPUSH
28399: LD_STRING D3a-Sim-4a
28401: PPUSH
28402: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28406: LD_EXP 39
28410: PPUSH
28411: LD_STRING D3a-Sci1-4
28413: PPUSH
28414: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28418: LD_EXP 33
28422: PPUSH
28423: LD_STRING D3a-Sim-5
28425: PPUSH
28426: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28430: LD_EXP 39
28434: PPUSH
28435: LD_STRING D3a-Sci1-5
28437: PPUSH
28438: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28442: LD_EXP 33
28446: PPUSH
28447: LD_STRING D3a-Sim-6
28449: PPUSH
28450: CALL_OW 88
// DialogueOff ;
28454: CALL_OW 7
// end else
28458: GO 28729
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28460: LD_ADDR_VAR 0 5
28464: PUSH
28465: LD_INT 22
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 26
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 25
28487: PUSH
28488: LD_INT 4
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: LIST
28499: PPUSH
28500: CALL_OW 69
28504: PUSH
28505: LD_EXP 23
28509: PUSH
28510: LD_EXP 29
28514: PUSH
28515: LD_EXP 28
28519: PUSH
28520: LD_EXP 33
28524: PUSH
28525: LD_EXP 36
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: DIFF
28537: ST_TO_ADDR
// if tmp3 then
28538: LD_VAR 0 5
28542: IFFALSE 28729
// begin DialogueOn ;
28544: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28548: LD_EXP 33
28552: PPUSH
28553: LD_STRING D3a-Sim-1
28555: PPUSH
28556: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28560: LD_VAR 0 5
28564: PUSH
28565: LD_INT 1
28567: ARRAY
28568: PPUSH
28569: LD_STRING D3a-Sci1-1
28571: PPUSH
28572: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28576: LD_EXP 33
28580: PPUSH
28581: LD_STRING D3a-Sim-2
28583: PPUSH
28584: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28588: LD_VAR 0 5
28592: PUSH
28593: LD_INT 1
28595: ARRAY
28596: PPUSH
28597: LD_STRING D3a-Sci1-2
28599: PPUSH
28600: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28604: LD_EXP 33
28608: PPUSH
28609: LD_STRING D3a-Sim-3
28611: PPUSH
28612: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28616: LD_VAR 0 5
28620: PUSH
28621: LD_INT 1
28623: ARRAY
28624: PPUSH
28625: LD_STRING D3a-Sci1-3
28627: PPUSH
28628: CALL_OW 88
// if IsOK ( Joan ) then
28632: LD_EXP 35
28636: PPUSH
28637: CALL_OW 302
28641: IFFALSE 28657
// Say ( Simms , D3a-Sim-4 ) else
28643: LD_EXP 33
28647: PPUSH
28648: LD_STRING D3a-Sim-4
28650: PPUSH
28651: CALL_OW 88
28655: GO 28669
// Say ( Simms , D3a-Sim-4a ) ;
28657: LD_EXP 33
28661: PPUSH
28662: LD_STRING D3a-Sim-4a
28664: PPUSH
28665: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28669: LD_VAR 0 5
28673: PUSH
28674: LD_INT 1
28676: ARRAY
28677: PPUSH
28678: LD_STRING D3a-Sci1-4
28680: PPUSH
28681: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28685: LD_EXP 33
28689: PPUSH
28690: LD_STRING D3a-Sim-5
28692: PPUSH
28693: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28697: LD_VAR 0 5
28701: PUSH
28702: LD_INT 1
28704: ARRAY
28705: PPUSH
28706: LD_STRING D3a-Sci1-5
28708: PPUSH
28709: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28713: LD_EXP 33
28717: PPUSH
28718: LD_STRING D3a-Sim-6
28720: PPUSH
28721: CALL_OW 88
// DialogueOff ;
28725: CALL_OW 7
// end ; end ; end ;
28729: PPOPN 5
28731: END
// export function DRussianNextAttack ; begin
28732: LD_INT 0
28734: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28735: LD_EXP 40
28739: PPUSH
28740: LD_STRING D4-FSol1-2
28742: PPUSH
28743: CALL_OW 94
// end ;
28747: LD_VAR 0 1
28751: RET
// export function DRussianConvoy ; begin
28752: LD_INT 0
28754: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28755: LD_EXP 40
28759: PPUSH
28760: LD_STRING D4-FSol1-1
28762: PPUSH
28763: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28767: LD_STRING M3
28769: PPUSH
28770: CALL_OW 337
// end ;
28774: LD_VAR 0 1
28778: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28779: LD_INT 0
28781: PPUSH
// CenterNowOnUnits ( unit ) ;
28782: LD_VAR 0 1
28786: PPUSH
28787: CALL_OW 87
// DialogueOn ;
28791: CALL_OW 6
// if IsOK ( Cyrus ) then
28795: LD_EXP 27
28799: PPUSH
28800: CALL_OW 302
28804: IFFALSE 28820
// Say ( Cyrus , D9a-Cyrus-1 ) else
28806: LD_EXP 27
28810: PPUSH
28811: LD_STRING D9a-Cyrus-1
28813: PPUSH
28814: CALL_OW 88
28818: GO 28942
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28820: LD_INT 22
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 26
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: LD_INT 25
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 25
28855: PUSH
28856: LD_INT 2
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 25
28865: PUSH
28866: LD_INT 3
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 25
28875: PUSH
28876: LD_INT 4
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 25
28885: PUSH
28886: LD_INT 5
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: PPUSH
28906: CALL_OW 69
28910: PUSH
28911: LD_EXP 23
28915: PUSH
28916: LD_EXP 36
28920: PUSH
28921: LD_EXP 27
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: LIST
28930: DIFF
28931: PPUSH
28932: LD_STRING D9a-Sol1-1
28934: PPUSH
28935: LD_STRING D9a-Sol1-1
28937: PPUSH
28938: CALL 25295 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28942: LD_INT 22
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 26
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: LD_INT 25
28967: PUSH
28968: LD_INT 1
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 25
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 25
28987: PUSH
28988: LD_INT 3
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 25
28997: PUSH
28998: LD_INT 4
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 25
29007: PUSH
29008: LD_INT 5
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: LIST
29027: PPUSH
29028: CALL_OW 69
29032: PUSH
29033: LD_EXP 23
29037: PUSH
29038: LD_EXP 36
29042: PUSH
29043: LD_EXP 27
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: DIFF
29053: PPUSH
29054: LD_STRING D9b-Sol1-1
29056: PPUSH
29057: LD_STRING D9b-Sol1-1
29059: PPUSH
29060: CALL 25295 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
29064: LD_STRING 09_arInfo
29066: PPUSH
29067: LD_INT 0
29069: PPUSH
29070: CALL_OW 30
29074: IFFALSE 29088
// Say ( JMM , D9a-JMM-1 ) ;
29076: LD_EXP 23
29080: PPUSH
29081: LD_STRING D9a-JMM-1
29083: PPUSH
29084: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
29088: LD_EXP 23
29092: PPUSH
29093: LD_STRING D9c-JMM-1
29095: PPUSH
29096: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
29100: LD_INT 22
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 25
29112: PUSH
29113: LD_INT 5
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PPUSH
29124: CALL_OW 69
29128: IFFALSE 29142
// Say ( JMM , D9c-JMM-1a ) ;
29130: LD_EXP 23
29134: PPUSH
29135: LD_STRING D9c-JMM-1a
29137: PPUSH
29138: CALL_OW 88
// DialogueOff ;
29142: CALL_OW 7
// end ;
29146: LD_VAR 0 2
29150: RET
// export function DArabTrait1 ; var tmp ; begin
29151: LD_INT 0
29153: PPUSH
29154: PPUSH
// if IsOk ( DeltaDoctor ) then
29155: LD_EXP 39
29159: PPUSH
29160: CALL_OW 302
29164: IFFALSE 29178
// tmp := DeltaDoctor else
29166: LD_ADDR_VAR 0 2
29170: PUSH
29171: LD_EXP 39
29175: ST_TO_ADDR
29176: GO 29376
// if IsOk ( Denis ) then
29178: LD_EXP 34
29182: PPUSH
29183: CALL_OW 302
29187: IFFALSE 29201
// tmp := Denis else
29189: LD_ADDR_VAR 0 2
29193: PUSH
29194: LD_EXP 34
29198: ST_TO_ADDR
29199: GO 29376
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
29201: LD_ADDR_VAR 0 2
29205: PUSH
29206: LD_INT 22
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 50
29218: PUSH
29219: EMPTY
29220: LIST
29221: PUSH
29222: LD_INT 25
29224: PUSH
29225: LD_INT 4
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 26
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: PPUSH
29248: CALL_OW 69
29252: PUSH
29253: LD_EXP 23
29257: PUSH
29258: LD_EXP 24
29262: PUSH
29263: LD_EXP 25
29267: PUSH
29268: LD_EXP 26
29272: PUSH
29273: LD_EXP 27
29277: PUSH
29278: LD_EXP 28
29282: PUSH
29283: LD_EXP 29
29287: PUSH
29288: LD_EXP 30
29292: PUSH
29293: LD_EXP 31
29297: PUSH
29298: LD_EXP 32
29302: PUSH
29303: LD_EXP 33
29307: PUSH
29308: LD_EXP 34
29312: PUSH
29313: LD_EXP 35
29317: PUSH
29318: LD_EXP 36
29322: PUSH
29323: LD_EXP 37
29327: PUSH
29328: LD_EXP 38
29332: PUSH
29333: LD_EXP 39
29337: PUSH
29338: LD_EXP 40
29342: PUSH
29343: LD_EXP 42
29347: PUSH
29348: LD_EXP 44
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: DIFF
29375: ST_TO_ADDR
// if not tmp then
29376: LD_VAR 0 2
29380: NOT
29381: IFFALSE 29385
// exit ;
29383: GO 29477
// DialogueOn ;
29385: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29389: LD_EXP 23
29393: PPUSH
29394: LD_STRING D6-JMM-1
29396: PPUSH
29397: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29401: LD_VAR 0 2
29405: PPUSH
29406: LD_STRING D6-Sci1-1
29408: PPUSH
29409: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29413: LD_EXP 23
29417: PPUSH
29418: LD_STRING D6-JMM-2
29420: PPUSH
29421: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29425: LD_VAR 0 2
29429: PPUSH
29430: LD_STRING D6-Sci1-2
29432: PPUSH
29433: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29437: LD_EXP 23
29441: PPUSH
29442: LD_STRING D6-JMM-3
29444: PPUSH
29445: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29449: LD_VAR 0 2
29453: PPUSH
29454: LD_STRING D6-Sci1-3
29456: PPUSH
29457: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29461: LD_EXP 23
29465: PPUSH
29466: LD_STRING D6-JMM-4
29468: PPUSH
29469: CALL_OW 88
// DialogueOff ;
29473: CALL_OW 7
// end ;
29477: LD_VAR 0 1
29481: RET
// export function DArabTrait2 ; begin
29482: LD_INT 0
29484: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29485: LD_EXP 36
29489: PPUSH
29490: CALL_OW 305
29494: NOT
29495: IFTRUE 29509
29497: PUSH
29498: LD_EXP 51
29502: PPUSH
29503: CALL_OW 302
29507: NOT
29508: OR
29509: IFTRUE 29523
29511: PUSH
29512: LD_EXP 50
29516: PPUSH
29517: CALL_OW 302
29521: NOT
29522: OR
29523: IFFALSE 29527
// exit ;
29525: GO 29583
// DialogueOn ;
29527: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29531: LD_EXP 51
29535: PPUSH
29536: LD_STRING D5-Ar1-1
29538: PPUSH
29539: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29543: LD_EXP 50
29547: PPUSH
29548: LD_STRING D5-Diet-1
29550: PPUSH
29551: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29555: LD_EXP 51
29559: PPUSH
29560: LD_STRING D5-Ar1-2
29562: PPUSH
29563: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29567: LD_EXP 50
29571: PPUSH
29572: LD_STRING D5-Diet-2
29574: PPUSH
29575: CALL_OW 88
// DialogueOff ;
29579: CALL_OW 7
// end ;
29583: LD_VAR 0 1
29587: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29588: LD_EXP 4
29592: IFFALSE 31305
29594: GO 29596
29596: DISABLE
29597: LD_INT 0
29599: PPUSH
29600: PPUSH
29601: PPUSH
29602: PPUSH
29603: PPUSH
29604: PPUSH
29605: PPUSH
29606: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29607: LD_INT 2
29609: PPUSH
29610: LD_INT 3
29612: PPUSH
29613: LD_INT 1
29615: PPUSH
29616: LD_INT 1
29618: PPUSH
29619: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29623: LD_INT 2
29625: PPUSH
29626: LD_INT 6
29628: PPUSH
29629: LD_INT 1
29631: PPUSH
29632: LD_INT 1
29634: PPUSH
29635: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29639: LD_ADDR_VAR 0 5
29643: PUSH
29644: LD_INT 22
29646: PUSH
29647: LD_INT 2
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: LD_INT 25
29659: PUSH
29660: LD_INT 4
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 25
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 25
29679: PUSH
29680: LD_INT 3
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PPUSH
29697: CALL_OW 69
29701: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
29702: LD_ADDR_VAR 0 4
29706: PUSH
29707: LD_INT 22
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 21
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: LD_INT 25
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 25
29742: PUSH
29743: LD_INT 8
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 25
29752: PUSH
29753: LD_INT 15
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: PPUSH
29771: CALL_OW 69
29775: PUSH
29776: LD_EXP 50
29780: DIFF
29781: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29782: LD_ADDR_VAR 0 6
29786: PUSH
29787: LD_INT 22
29789: PUSH
29790: LD_INT 2
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 30
29799: PUSH
29800: LD_INT 5
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PPUSH
29811: CALL_OW 69
29815: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29816: LD_VAR 0 5
29820: PPUSH
29821: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29825: LD_VAR 0 4
29829: PPUSH
29830: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29834: LD_INT 101
29836: PPUSH
29837: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29841: LD_EXP 40
29845: PPUSH
29846: LD_STRING D4-FSol1-3
29848: PPUSH
29849: CALL_OW 94
// for i in arCivilian do
29853: LD_ADDR_VAR 0 1
29857: PUSH
29858: LD_VAR 0 5
29862: PUSH
29863: FOR_IN
29864: IFFALSE 29943
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29866: LD_VAR 0 1
29870: PPUSH
29871: LD_VAR 0 6
29875: PUSH
29876: LD_VAR 0 1
29880: PUSH
29881: LD_INT 2
29883: MOD
29884: PUSH
29885: LD_INT 1
29887: PLUS
29888: ARRAY
29889: PPUSH
29890: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29894: LD_VAR 0 1
29898: PPUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 8
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: PPUSH
29912: LD_INT 2
29914: PPUSH
29915: CALL_OW 12
29919: ARRAY
29920: PPUSH
29921: CALL_OW 183
// AddComExitBuilding ( i ) ;
29925: LD_VAR 0 1
29929: PPUSH
29930: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29934: LD_INT 18
29936: PPUSH
29937: CALL_OW 67
// end ;
29941: GO 29863
29943: POP
29944: POP
// wait ( 0 0$5 ) ;
29945: LD_INT 175
29947: PPUSH
29948: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29952: LD_INT 76
29954: PPUSH
29955: LD_INT 19
29957: PPUSH
29958: CALL_OW 84
// DialogueOn ;
29962: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29966: LD_INT 22
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 26
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 2
29988: PUSH
29989: LD_INT 25
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 25
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 25
30011: PUSH
30012: LD_INT 3
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 25
30021: PUSH
30022: LD_INT 4
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 25
30031: PUSH
30032: LD_INT 5
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: LIST
30051: PPUSH
30052: CALL_OW 69
30056: PPUSH
30057: LD_STRING D8-Sol1-1
30059: PPUSH
30060: LD_STRING D8-Sol1-1
30062: PPUSH
30063: CALL 25295 0 3
// if IsOk ( DeltaDoctor ) then
30067: LD_EXP 39
30071: PPUSH
30072: CALL_OW 302
30076: IFFALSE 30092
// Say ( DeltaDoctor , D8-Sci1-1 ) else
30078: LD_EXP 39
30082: PPUSH
30083: LD_STRING D8-Sci1-1
30085: PPUSH
30086: CALL_OW 88
30090: GO 30193
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
30092: LD_INT 22
30094: PUSH
30095: LD_INT 1
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 26
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 2
30114: PUSH
30115: LD_INT 25
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 25
30127: PUSH
30128: LD_INT 2
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 25
30137: PUSH
30138: LD_INT 3
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 25
30147: PUSH
30148: LD_INT 4
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 25
30157: PUSH
30158: LD_INT 5
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: LIST
30177: PPUSH
30178: CALL_OW 69
30182: PPUSH
30183: LD_STRING D8-Sol1-1
30185: PPUSH
30186: LD_STRING D8-Sol1-1
30188: PPUSH
30189: CALL 25295 0 3
// Say ( JMM , D8-JMM-1 ) ;
30193: LD_EXP 23
30197: PPUSH
30198: LD_STRING D8-JMM-1
30200: PPUSH
30201: CALL_OW 88
// DialogueOff ;
30205: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
30209: LD_INT 2
30211: PPUSH
30212: LD_INT 2
30214: PPUSH
30215: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
30219: LD_INT 1
30221: PPUSH
30222: LD_INT 2
30224: PPUSH
30225: LD_INT 2
30227: PPUSH
30228: LD_INT 1
30230: PPUSH
30231: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
30235: LD_INT 3
30237: PPUSH
30238: LD_INT 2
30240: PPUSH
30241: LD_INT 1
30243: PPUSH
30244: LD_INT 1
30246: PPUSH
30247: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
30251: LD_INT 6
30253: PPUSH
30254: LD_INT 2
30256: PPUSH
30257: LD_INT 1
30259: PPUSH
30260: LD_INT 1
30262: PPUSH
30263: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30267: LD_STRING M4
30269: PPUSH
30270: CALL_OW 337
// wait ( 0 0$1 ) ;
30274: LD_INT 35
30276: PPUSH
30277: CALL_OW 67
// if IsLive ( Khatam ) then
30281: LD_EXP 36
30285: PPUSH
30286: CALL_OW 300
30290: IFFALSE 30304
// DoNotAttack ( 2 , Khatam ) ;
30292: LD_INT 2
30294: PPUSH
30295: LD_EXP 36
30299: PPUSH
30300: CALL_OW 471
// wait ( 0 0$1 ) ;
30304: LD_INT 35
30306: PPUSH
30307: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30311: LD_ADDR_VAR 0 7
30315: PUSH
30316: LD_INT 22
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 21
30328: PUSH
30329: LD_INT 3
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PPUSH
30340: CALL_OW 69
30344: PPUSH
30345: LD_VAR 0 4
30349: PUSH
30350: LD_INT 1
30352: ARRAY
30353: PPUSH
30354: CALL_OW 74
30358: ST_TO_ADDR
// for i := 1 to 3 do
30359: LD_ADDR_VAR 0 1
30363: PUSH
30364: DOUBLE
30365: LD_INT 1
30367: DEC
30368: ST_TO_ADDR
30369: LD_INT 3
30371: PUSH
30372: FOR_TO
30373: IFFALSE 30432
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ i ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30375: LD_VAR 0 4
30379: PPUSH
30380: LD_INT 25
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PPUSH
30390: CALL_OW 72
30394: PUSH
30395: LD_VAR 0 1
30399: ARRAY
30400: PPUSH
30401: LD_VAR 0 7
30405: PPUSH
30406: CALL_OW 250
30410: PPUSH
30411: LD_VAR 0 7
30415: PPUSH
30416: CALL_OW 251
30420: PPUSH
30421: LD_VAR 0 7
30425: PPUSH
30426: CALL_OW 192
30430: GO 30372
30432: POP
30433: POP
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
30434: LD_VAR 0 4
30438: PPUSH
30439: LD_INT 84
30441: PPUSH
30442: LD_INT 22
30444: PPUSH
30445: CALL_OW 174
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30449: LD_VAR 0 4
30453: PPUSH
30454: LD_INT 95
30456: PPUSH
30457: LD_INT 12
30459: PPUSH
30460: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30464: LD_VAR 0 4
30468: PPUSH
30469: LD_INT 102
30471: PPUSH
30472: LD_INT 11
30474: PPUSH
30475: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30479: LD_VAR 0 4
30483: PPUSH
30484: LD_INT 116
30486: PPUSH
30487: LD_INT 15
30489: PPUSH
30490: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30494: LD_VAR 0 4
30498: PPUSH
30499: LD_INT 140
30501: PPUSH
30502: LD_INT 25
30504: PPUSH
30505: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
30509: LD_ADDR_VAR 0 4
30513: PUSH
30514: LD_INT 22
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 21
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: LD_INT 25
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 25
30549: PUSH
30550: LD_INT 8
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 25
30559: PUSH
30560: LD_INT 15
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: PPUSH
30578: CALL_OW 69
30582: PUSH
30583: LD_EXP 50
30587: DIFF
30588: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30589: LD_ADDR_VAR 0 5
30593: PUSH
30594: LD_INT 22
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 21
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 2
30616: PUSH
30617: LD_INT 25
30619: PUSH
30620: LD_INT 2
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 25
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 25
30639: PUSH
30640: LD_INT 4
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 25
30649: PUSH
30650: LD_INT 12
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 25
30659: PUSH
30660: LD_INT 16
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: PPUSH
30680: CALL_OW 69
30684: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30685: LD_ADDR_VAR 0 5
30689: PUSH
30690: LD_VAR 0 5
30694: PUSH
30695: LD_EXP 50
30699: ADD
30700: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 81 , 12 ) ;
30701: LD_VAR 0 5
30705: PPUSH
30706: LD_INT 81
30708: PPUSH
30709: LD_INT 12
30711: PPUSH
30712: CALL_OW 171
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30716: LD_VAR 0 5
30720: PPUSH
30721: LD_INT 88
30723: PPUSH
30724: LD_INT 8
30726: PPUSH
30727: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30731: LD_VAR 0 5
30735: PPUSH
30736: LD_INT 102
30738: PPUSH
30739: LD_INT 10
30741: PPUSH
30742: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30746: LD_VAR 0 5
30750: PPUSH
30751: LD_INT 116
30753: PPUSH
30754: LD_INT 15
30756: PPUSH
30757: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30761: LD_VAR 0 5
30765: PPUSH
30766: LD_INT 140
30768: PPUSH
30769: LD_INT 25
30771: PPUSH
30772: CALL_OW 171
// wait ( 3 ) ;
30776: LD_INT 3
30778: PPUSH
30779: CALL_OW 67
// arEscapist := arCivilian union arSoldiers ;
30783: LD_ADDR_EXP 56
30787: PUSH
30788: LD_VAR 0 5
30792: PUSH
30793: LD_VAR 0 4
30797: UNION
30798: ST_TO_ADDR
// if IsOk ( Gary ) then
30799: LD_EXP 32
30803: PPUSH
30804: CALL_OW 302
30808: IFFALSE 30822
// Say ( Gary , D8a-Gary-1 ) ;
30810: LD_EXP 32
30814: PPUSH
30815: LD_STRING D8a-Gary-1
30817: PPUSH
30818: CALL_OW 88
// wait ( 0 0$5 ) ;
30822: LD_INT 175
30824: PPUSH
30825: CALL_OW 67
// if IsOK ( Khatam ) then
30829: LD_EXP 36
30833: PPUSH
30834: CALL_OW 302
30838: IFFALSE 31305
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30840: LD_ADDR_VAR 0 2
30844: PUSH
30845: LD_INT 22
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 25
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 25
30870: PUSH
30871: LD_INT 2
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 25
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 25
30890: PUSH
30891: LD_INT 4
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 25
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 25
30910: PUSH
30911: LD_INT 8
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PPUSH
30931: CALL_OW 69
30935: PUSH
30936: LD_EXP 23
30940: PUSH
30941: LD_EXP 24
30945: PUSH
30946: LD_EXP 25
30950: PUSH
30951: LD_EXP 26
30955: PUSH
30956: LD_EXP 27
30960: PUSH
30961: LD_EXP 28
30965: PUSH
30966: LD_EXP 29
30970: PUSH
30971: LD_EXP 30
30975: PUSH
30976: LD_EXP 31
30980: PUSH
30981: LD_EXP 32
30985: PUSH
30986: LD_EXP 33
30990: PUSH
30991: LD_EXP 34
30995: PUSH
30996: LD_EXP 35
31000: PUSH
31001: LD_EXP 36
31005: PUSH
31006: LD_EXP 37
31010: PUSH
31011: LD_EXP 38
31015: PUSH
31016: LD_EXP 39
31020: PUSH
31021: LD_EXP 42
31025: PUSH
31026: LD_EXP 44
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: DIFF
31052: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
31053: LD_EXP 36
31057: PPUSH
31058: LD_INT 8
31060: PPUSH
31061: CALL_OW 235
// ComExit ( Khatam ) ;
31065: LD_EXP 36
31069: PPUSH
31070: CALL 95036 0 1
// wait ( 0 0$1 ) ;
31074: LD_INT 35
31076: PPUSH
31077: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
31081: LD_EXP 36
31085: PPUSH
31086: LD_INT 11
31088: PPUSH
31089: CALL_OW 113
// escapeKhatam := true ;
31093: LD_ADDR_EXP 11
31097: PUSH
31098: LD_INT 1
31100: ST_TO_ADDR
// if not tmp then
31101: LD_VAR 0 2
31105: NOT
31106: IFFALSE 31110
// exit ;
31108: GO 31305
// wait ( 0 0$2 ) ;
31110: LD_INT 70
31112: PPUSH
31113: CALL_OW 67
// DialogueOn ;
31117: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
31121: LD_ADDR_VAR 0 8
31125: PUSH
31126: LD_VAR 0 2
31130: PPUSH
31131: LD_STRING D8b-Sol1-1
31133: PPUSH
31134: LD_STRING D8b-FSol1-1
31136: PPUSH
31137: CALL 25295 0 3
31141: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
31142: LD_EXP 36
31146: PPUSH
31147: LD_STRING D8b-Khat-1
31149: PPUSH
31150: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31154: LD_VAR 0 8
31158: PPUSH
31159: CALL_OW 258
31163: PUSH
31164: LD_INT 1
31166: EQUAL
31167: IFFALSE 31183
// Say ( speaker , D8b-Sol1-2 ) else
31169: LD_VAR 0 8
31173: PPUSH
31174: LD_STRING D8b-Sol1-2
31176: PPUSH
31177: CALL_OW 88
31181: GO 31195
// Say ( speaker , D8b-FSol1-2 ) ;
31183: LD_VAR 0 8
31187: PPUSH
31188: LD_STRING D8b-FSol1-2
31190: PPUSH
31191: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
31195: LD_EXP 36
31199: PPUSH
31200: LD_STRING D8b-Khat-2
31202: PPUSH
31203: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31207: LD_VAR 0 8
31211: PPUSH
31212: CALL_OW 258
31216: PUSH
31217: LD_INT 1
31219: EQUAL
31220: IFFALSE 31236
// Say ( speaker , D8b-Sol1-3 ) else
31222: LD_VAR 0 8
31226: PPUSH
31227: LD_STRING D8b-Sol1-3
31229: PPUSH
31230: CALL_OW 88
31234: GO 31248
// Say ( speaker , D8b-FSol1-3 ) ;
31236: LD_VAR 0 8
31240: PPUSH
31241: LD_STRING D8b-FSol1-3
31243: PPUSH
31244: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
31248: LD_EXP 36
31252: PPUSH
31253: LD_STRING D8b-Khat-3
31255: PPUSH
31256: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31260: LD_VAR 0 8
31264: PPUSH
31265: CALL_OW 258
31269: PUSH
31270: LD_INT 1
31272: EQUAL
31273: IFFALSE 31289
// Say ( speaker , D8b-Sol1-4 ) else
31275: LD_VAR 0 8
31279: PPUSH
31280: LD_STRING D8b-Sol1-4
31282: PPUSH
31283: CALL_OW 88
31287: GO 31301
// Say ( speaker , D8b-FSol1-4 ) ;
31289: LD_VAR 0 8
31293: PPUSH
31294: LD_STRING D8b-FSol1-4
31296: PPUSH
31297: CALL_OW 88
// DialogueOff ;
31301: CALL_OW 7
// end ; end ;
31305: PPOPN 8
31307: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31308: LD_EXP 11
31312: IFFALSE 31325
31314: PUSH
31315: LD_EXP 36
31319: PPUSH
31320: CALL_OW 302
31324: AND
31325: IFFALSE 31402
31327: GO 31329
31329: DISABLE
// begin enable ;
31330: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31331: LD_EXP 36
31335: PPUSH
31336: CALL_OW 302
31340: IFFALSE 31354
31342: PUSH
31343: LD_EXP 36
31347: PPUSH
31348: CALL_OW 314
31352: NOT
31353: AND
31354: IFFALSE 31368
// ComMoveToArea ( Khatam , khatamArea ) ;
31356: LD_EXP 36
31360: PPUSH
31361: LD_INT 11
31363: PPUSH
31364: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31368: LD_EXP 36
31372: PPUSH
31373: LD_INT 11
31375: PPUSH
31376: CALL_OW 308
31380: IFFALSE 31402
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31382: LD_INT 1
31384: PPUSH
31385: LD_STRING 10_KhatamStatus_1
31387: PPUSH
31388: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31392: LD_EXP 36
31396: PPUSH
31397: CALL_OW 64
// disable ;
31401: DISABLE
// end ; end ;
31402: END
// every 0 0$30 trigger joinedToEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31403: LD_EXP 7
31407: IFFALSE 31421
31409: PUSH
31410: LD_STRING 02_mikhailStatus_1
31412: PPUSH
31413: LD_INT 0
31415: PPUSH
31416: CALL_OW 30
31420: AND
31421: IFFALSE 31453
31423: PUSH
31424: LD_INT 22
31426: PUSH
31427: LD_INT 5
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 50
31436: PUSH
31437: EMPTY
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PPUSH
31444: CALL_OW 69
31448: PUSH
31449: LD_INT 0
31451: EQUAL
31452: AND
31453: IFFALSE 31505
31455: PUSH
31456: LD_INT 22
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 50
31468: PUSH
31469: EMPTY
31470: LIST
31471: PUSH
31472: LD_INT 21
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: PPUSH
31487: CALL_OW 69
31491: PUSH
31492: LD_INT 0
31494: EQUAL
31495: IFTRUE 31504
31497: PUSH
31498: LD_EXP 4
31502: NOT
31503: OR
31504: AND
31505: IFFALSE 31527
31507: GO 31509
31509: DISABLE
// begin wait ( 2 2$00 * Difficulty ) ;
31510: LD_INT 4200
31512: PUSH
31513: LD_OWVAR 67
31517: MUL
31518: PPUSH
31519: CALL_OW 67
// PrepareCornell ;
31523: CALL 3222 0 0
// end ;
31527: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31528: LD_INT 22
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PPUSH
31538: CALL_OW 69
31542: PPUSH
31543: LD_EXP 42
31547: PPUSH
31548: CALL_OW 74
31552: PPUSH
31553: LD_EXP 42
31557: PPUSH
31558: CALL_OW 296
31562: PUSH
31563: LD_INT 9
31565: LESS
31566: IFFALSE 31579
31568: PUSH
31569: LD_EXP 42
31573: PPUSH
31574: CALL_OW 302
31578: AND
31579: IFFALSE 32023
31581: GO 31583
31583: DISABLE
// begin InGameOn ;
31584: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31588: LD_EXP 42
31592: PPUSH
31593: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31597: LD_EXP 42
31601: PPUSH
31602: LD_STRING D7-Corn-1
31604: PPUSH
31605: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31609: LD_INT 22
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: LD_INT 25
31624: PUSH
31625: LD_INT 1
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 25
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 25
31644: PUSH
31645: LD_INT 3
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 25
31654: PUSH
31655: LD_INT 4
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 25
31664: PUSH
31665: LD_INT 5
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PPUSH
31684: CALL_OW 69
31688: PPUSH
31689: LD_STRING D7-Sol1-1
31691: PPUSH
31692: LD_STRING D7-FSol1-1
31694: PPUSH
31695: CALL 25295 0 3
// CenterNowOnUnits ( Cornell ) ;
31699: LD_EXP 42
31703: PPUSH
31704: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31708: LD_EXP 42
31712: PPUSH
31713: LD_STRING D7-Corn-2
31715: PPUSH
31716: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31720: LD_EXP 23
31724: PPUSH
31725: LD_STRING D7-JMM-2
31727: PPUSH
31728: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31732: LD_EXP 42
31736: PPUSH
31737: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31741: LD_EXP 42
31745: PPUSH
31746: LD_STRING D7-Corn-3
31748: PPUSH
31749: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31753: LD_EXP 42
31757: PPUSH
31758: LD_INT 250
31760: PPUSH
31761: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31765: LD_EXP 42
31769: PPUSH
31770: LD_INT 1
31772: PPUSH
31773: CALL_OW 235
// wait ( 0 0$1 ) ;
31777: LD_INT 35
31779: PPUSH
31780: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31784: LD_EXP 23
31788: PPUSH
31789: LD_STRING D7-JMM-3
31791: PPUSH
31792: CALL_OW 88
// InGameOff ;
31796: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31800: LD_INT 35
31802: PPUSH
31803: CALL_OW 67
// if IsDead ( Cornell ) then
31807: LD_EXP 42
31811: PPUSH
31812: CALL_OW 301
31816: IFFALSE 31820
// exit ;
31818: GO 32023
// until GetLives ( Cornell ) > 350 ;
31820: LD_EXP 42
31824: PPUSH
31825: CALL_OW 256
31829: PUSH
31830: LD_INT 350
31832: GREATER
31833: IFFALSE 31800
// DialogueOn ;
31835: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31839: LD_EXP 23
31843: PPUSH
31844: LD_STRING D7a-JMM-1
31846: PPUSH
31847: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31851: LD_EXP 42
31855: PPUSH
31856: LD_STRING D7a-Corn-1
31858: PPUSH
31859: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31863: LD_EXP 23
31867: PPUSH
31868: LD_STRING D7a-JMM-2
31870: PPUSH
31871: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31875: LD_EXP 42
31879: PPUSH
31880: LD_STRING D7a-Corn-2
31882: PPUSH
31883: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31887: LD_EXP 23
31891: PPUSH
31892: LD_STRING D7a-JMM-3
31894: PPUSH
31895: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31899: LD_EXP 42
31903: PPUSH
31904: LD_STRING D7a-Corn-3
31906: PPUSH
31907: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31911: LD_EXP 23
31915: PPUSH
31916: LD_STRING D7a-JMM-4
31918: PPUSH
31919: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31923: LD_EXP 42
31927: PPUSH
31928: LD_STRING D7a-Corn-4
31930: PPUSH
31931: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31935: LD_EXP 23
31939: PPUSH
31940: LD_STRING D7a-JMM-5
31942: PPUSH
31943: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31947: LD_EXP 42
31951: PPUSH
31952: LD_STRING D7a-Corn-5
31954: PPUSH
31955: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31959: LD_EXP 23
31963: PPUSH
31964: LD_STRING D7a-JMM-6
31966: PPUSH
31967: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31971: LD_EXP 42
31975: PPUSH
31976: LD_STRING D7a-Corn-6
31978: PPUSH
31979: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31983: LD_EXP 23
31987: PPUSH
31988: LD_STRING D7a-JMM-7
31990: PPUSH
31991: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31995: LD_EXP 42
31999: PPUSH
32000: LD_STRING D7a-Corn-7
32002: PPUSH
32003: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
32007: LD_EXP 23
32011: PPUSH
32012: LD_STRING D7a-JMM-8
32014: PPUSH
32015: CALL_OW 88
// DialogueOff ;
32019: CALL_OW 7
// end ;
32023: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
32024: LD_INT 54
32026: PPUSH
32027: LD_INT 1
32029: PPUSH
32030: CALL_OW 321
32034: PUSH
32035: LD_INT 2
32037: EQUAL
32038: IFFALSE 32056
32040: PUSH
32041: LD_INT 55
32043: PPUSH
32044: LD_INT 1
32046: PPUSH
32047: CALL_OW 321
32051: PUSH
32052: LD_INT 2
32054: EQUAL
32055: AND
32056: IFFALSE 32074
32058: PUSH
32059: LD_INT 21
32061: PPUSH
32062: LD_INT 1
32064: PPUSH
32065: CALL_OW 321
32069: PUSH
32070: LD_INT 2
32072: EQUAL
32073: AND
32074: IFFALSE 32092
32076: PUSH
32077: LD_INT 22
32079: PPUSH
32080: LD_INT 1
32082: PPUSH
32083: CALL_OW 321
32087: PUSH
32088: LD_INT 2
32090: EQUAL
32091: AND
32092: IFFALSE 32131
32094: PUSH
32095: LD_INT 12
32097: PPUSH
32098: LD_INT 1
32100: PPUSH
32101: CALL_OW 321
32105: PUSH
32106: LD_INT 1
32108: EQUAL
32109: IFTRUE 32127
32111: PUSH
32112: LD_INT 32
32114: PPUSH
32115: LD_INT 1
32117: PPUSH
32118: CALL_OW 321
32122: PUSH
32123: LD_INT 1
32125: EQUAL
32126: OR
32127: PUSH
32128: EMPTY
32129: LIST
32130: AND
32131: IFFALSE 32139
32133: PUSH
32134: LD_EXP 8
32138: AND
32139: IFFALSE 32175
32141: PUSH
32142: LD_INT 22
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 21
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PPUSH
32166: CALL_OW 69
32170: PUSH
32171: LD_INT 0
32173: EQUAL
32174: AND
32175: IFFALSE 32223
32177: GO 32179
32179: DISABLE
// begin case Query ( QEndMission ) of 1 :
32180: LD_STRING QEndMission
32182: PPUSH
32183: CALL_OW 97
32187: PUSH
32188: LD_INT 1
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32196
32194: GO 32207
32196: POP
// end_the_mission_allowed = true ; 2 :
32197: LD_ADDR_OWVAR 57
32201: PUSH
32202: LD_INT 1
32204: ST_TO_ADDR
32205: GO 32223
32207: LD_INT 2
32209: DOUBLE
32210: EQUAL
32211: IFTRUE 32215
32213: GO 32222
32215: POP
// FinishMission ; end ;
32216: CALL 32271 0 0
32220: GO 32223
32222: POP
// end ;
32223: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
32224: LD_INT 0
32226: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
32227: LD_VAR 0 1
32231: PPUSH
32232: CALL_OW 300
32236: IFTRUE 32250
32238: PUSH
32239: LD_VAR 0 1
32243: PUSH
32244: LD_EXP 45
32248: IN
32249: OR
32250: IFFALSE 32266
// SaveCharacters ( unit , id ) ;
32252: LD_VAR 0 1
32256: PPUSH
32257: LD_VAR 0 2
32261: PPUSH
32262: CALL_OW 38
// end ;
32266: LD_VAR 0 3
32270: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
32271: LD_INT 0
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
32277: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
32278: LD_INT 22
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 21
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 23
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 50
32310: PUSH
32311: EMPTY
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: PPUSH
32320: CALL_OW 69
32324: PPUSH
32325: CALL 58706 0 1
32329: PUSH
32330: LD_INT 5
32332: LESS
32333: IFFALSE 32344
// begin YouLost ( Troops ) ;
32335: LD_STRING Troops
32337: PPUSH
32338: CALL_OW 104
// exit ;
32342: GO 33370
// end ; if not hasSniper then
32344: LD_EXP 20
32348: NOT
32349: IFFALSE 32358
// SetAchievement ( ACH_SNIPER ) ;
32351: LD_STRING ACH_SNIPER
32353: PPUSH
32354: CALL_OW 543
// m1 := false ;
32358: LD_ADDR_VAR 0 2
32362: PUSH
32363: LD_INT 0
32365: ST_TO_ADDR
// m2 := false ;
32366: LD_ADDR_VAR 0 3
32370: PUSH
32371: LD_INT 0
32373: ST_TO_ADDR
// m3 := false ;
32374: LD_ADDR_VAR 0 4
32378: PUSH
32379: LD_INT 0
32381: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32382: LD_INT 12
32384: PPUSH
32385: LD_INT 1
32387: PPUSH
32388: CALL_OW 321
32392: PUSH
32393: LD_INT 2
32395: EQUAL
32396: IFFALSE 32418
// begin AddMedal ( sights , 1 ) ;
32398: LD_STRING sights
32400: PPUSH
32401: LD_INT 1
32403: PPUSH
32404: CALL_OW 101
// m1 := true ;
32408: LD_ADDR_VAR 0 2
32412: PUSH
32413: LD_INT 1
32415: ST_TO_ADDR
// end else
32416: GO 32429
// AddMedal ( sights , - 1 ) ;
32418: LD_STRING sights
32420: PPUSH
32421: LD_INT 1
32423: NEG
32424: PPUSH
32425: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32429: LD_INT 32
32431: PPUSH
32432: LD_INT 1
32434: PPUSH
32435: CALL_OW 321
32439: PUSH
32440: LD_INT 2
32442: EQUAL
32443: IFFALSE 32465
// begin AddMedal ( computers , 1 ) ;
32445: LD_STRING computers
32447: PPUSH
32448: LD_INT 1
32450: PPUSH
32451: CALL_OW 101
// m2 := true ;
32455: LD_ADDR_VAR 0 3
32459: PUSH
32460: LD_INT 1
32462: ST_TO_ADDR
// end else
32463: GO 32476
// AddMedal ( computers , - 1 ) ;
32465: LD_STRING computers
32467: PPUSH
32468: LD_INT 1
32470: NEG
32471: PPUSH
32472: CALL_OW 101
// if arabianEscapedCounter = 0 then
32476: LD_EXP 21
32480: PUSH
32481: LD_INT 0
32483: EQUAL
32484: IFFALSE 32516
// begin AddMedal ( renegades , 2 ) ;
32486: LD_STRING renegades
32488: PPUSH
32489: LD_INT 2
32491: PPUSH
32492: CALL_OW 101
// m3 := true ;
32496: LD_ADDR_VAR 0 4
32500: PUSH
32501: LD_INT 1
32503: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32504: LD_INT 0
32506: PPUSH
32507: LD_STRING 10_ScientistsEscape_1
32509: PPUSH
32510: CALL_OW 39
// end else
32514: GO 32527
// AddMedal ( renegades , - 1 ) ;
32516: LD_STRING renegades
32518: PPUSH
32519: LD_INT 1
32521: NEG
32522: PPUSH
32523: CALL_OW 101
// SaveEpsilonBase ;
32527: CALL 33375 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32531: LD_VAR 0 2
32535: IFFALSE 32543
32537: PUSH
32538: LD_VAR 0 3
32542: AND
32543: IFFALSE 32551
32545: PUSH
32546: LD_VAR 0 4
32550: AND
32551: IFFALSE 32563
32553: PUSH
32554: LD_OWVAR 67
32558: PUSH
32559: LD_INT 3
32561: GREATEREQUAL
32562: AND
32563: IFFALSE 32575
// SetAchievementEX ( ACH_AMER , 10 ) ;
32565: LD_STRING ACH_AMER
32567: PPUSH
32568: LD_INT 10
32570: PPUSH
32571: CALL_OW 564
// if tick <= 40 40$00 then
32575: LD_OWVAR 1
32579: PUSH
32580: LD_INT 84000
32582: LESSEQUAL
32583: IFFALSE 32599
// begin wait ( 3 ) ;
32585: LD_INT 3
32587: PPUSH
32588: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32592: LD_STRING ACH_ASPEED_10
32594: PPUSH
32595: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32599: LD_STRING Main
32601: PPUSH
32602: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32606: LD_INT 22
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 23
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 21
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 2
32638: PUSH
32639: LD_INT 25
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 25
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 25
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 25
32671: PUSH
32672: LD_INT 4
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 25
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 25
32691: PUSH
32692: LD_INT 8
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: PPUSH
32714: CALL_OW 69
32718: PPUSH
32719: CALL_OW 43
// prefix := 10c_ ;
32723: LD_ADDR_VAR 0 5
32727: PUSH
32728: LD_STRING 10c_
32730: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32731: LD_EXP 23
32735: PPUSH
32736: LD_VAR 0 5
32740: PUSH
32741: LD_STRING JMM
32743: STR
32744: PPUSH
32745: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32749: LD_EXP 24
32753: PPUSH
32754: LD_VAR 0 5
32758: PUSH
32759: LD_STRING Brown
32761: STR
32762: PPUSH
32763: CALL 32224 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32767: LD_EXP 25
32771: PPUSH
32772: LD_VAR 0 5
32776: PUSH
32777: LD_STRING Donaldson
32779: STR
32780: PPUSH
32781: CALL 32224 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32785: LD_EXP 26
32789: PPUSH
32790: LD_VAR 0 5
32794: PUSH
32795: LD_STRING Bobby
32797: STR
32798: PPUSH
32799: CALL 32224 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32803: LD_EXP 27
32807: PPUSH
32808: LD_VAR 0 5
32812: PUSH
32813: LD_STRING Cyrus
32815: STR
32816: PPUSH
32817: CALL 32224 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32821: LD_EXP 28
32825: PPUSH
32826: LD_VAR 0 5
32830: PUSH
32831: LD_STRING Lisa
32833: STR
32834: PPUSH
32835: CALL 32224 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32839: LD_EXP 29
32843: PPUSH
32844: LD_VAR 0 5
32848: PUSH
32849: LD_STRING Frank
32851: STR
32852: PPUSH
32853: CALL 32224 0 2
// if Kikuchi then
32857: LD_EXP 30
32861: IFFALSE 32888
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32863: LD_STRING enableBioCharacter(BIO_YAMO)
32865: PPUSH
32866: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32870: LD_EXP 30
32874: PPUSH
32875: LD_VAR 0 5
32879: PUSH
32880: LD_STRING Kikuchi
32882: STR
32883: PPUSH
32884: CALL 32224 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32888: LD_EXP 31
32892: PPUSH
32893: LD_VAR 0 5
32897: PUSH
32898: LD_STRING Houten
32900: STR
32901: PPUSH
32902: CALL 32224 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32906: LD_EXP 32
32910: PPUSH
32911: LD_VAR 0 5
32915: PUSH
32916: LD_STRING Gary
32918: STR
32919: PPUSH
32920: CALL 32224 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32924: LD_EXP 42
32928: PPUSH
32929: LD_VAR 0 5
32933: PUSH
32934: LD_STRING Cornell
32936: STR
32937: PPUSH
32938: CALL 32224 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32942: LD_EXP 33
32946: PPUSH
32947: LD_VAR 0 5
32951: PUSH
32952: LD_STRING Simms
32954: STR
32955: PPUSH
32956: CALL 32224 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32960: LD_EXP 34
32964: PPUSH
32965: LD_VAR 0 5
32969: PUSH
32970: LD_STRING Denis
32972: STR
32973: PPUSH
32974: CALL 32224 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32978: LD_EXP 35
32982: PPUSH
32983: LD_VAR 0 5
32987: PUSH
32988: LD_STRING Joan
32990: STR
32991: PPUSH
32992: CALL 32224 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32996: LD_EXP 37
33000: PPUSH
33001: LD_VAR 0 5
33005: PUSH
33006: LD_STRING Gladstone
33008: STR
33009: PPUSH
33010: CALL 32224 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
33014: LD_EXP 39
33018: PPUSH
33019: LD_VAR 0 5
33023: PUSH
33024: LD_STRING DeltaDoctor
33026: STR
33027: PPUSH
33028: CALL 32224 0 2
// if IsLive ( Mike ) then
33032: LD_EXP 41
33036: PPUSH
33037: CALL_OW 300
33041: IFFALSE 33061
// SaveCharacters ( Mike , prefix & Mike ) ;
33043: LD_EXP 41
33047: PPUSH
33048: LD_VAR 0 5
33052: PUSH
33053: LD_STRING Mike
33055: STR
33056: PPUSH
33057: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
33061: LD_EXP 46
33065: PPUSH
33066: LD_STRING 10c_lock
33068: PPUSH
33069: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
33073: LD_INT 50
33075: PUSH
33076: EMPTY
33077: LIST
33078: PUSH
33079: LD_INT 22
33081: PUSH
33082: LD_INT 1
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 21
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 25
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 25
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 25
33124: PUSH
33125: LD_INT 3
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 25
33134: PUSH
33135: LD_INT 4
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 25
33144: PUSH
33145: LD_INT 5
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 25
33154: PUSH
33155: LD_INT 8
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: PPUSH
33177: CALL_OW 69
33181: PUSH
33182: LD_EXP 23
33186: PUSH
33187: LD_EXP 24
33191: PUSH
33192: LD_EXP 25
33196: PUSH
33197: LD_EXP 26
33201: PUSH
33202: LD_EXP 27
33206: PUSH
33207: LD_EXP 28
33211: PUSH
33212: LD_EXP 29
33216: PUSH
33217: LD_EXP 37
33221: PUSH
33222: LD_EXP 30
33226: PUSH
33227: LD_EXP 34
33231: PUSH
33232: LD_EXP 35
33236: PUSH
33237: LD_EXP 31
33241: PUSH
33242: LD_EXP 33
33246: PUSH
33247: LD_EXP 32
33251: PUSH
33252: LD_EXP 39
33256: PUSH
33257: LD_EXP 42
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: DIFF
33280: PPUSH
33281: LD_STRING 10_other_survivors
33283: PPUSH
33284: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
33288: LD_INT 50
33290: PUSH
33291: EMPTY
33292: LIST
33293: PUSH
33294: LD_INT 22
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 21
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 2
33316: PUSH
33317: LD_INT 25
33319: PUSH
33320: LD_INT 16
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 25
33329: PUSH
33330: LD_INT 12
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: LIST
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: PPUSH
33348: CALL_OW 69
33352: PUSH
33353: LD_EXP 41
33357: DIFF
33358: PPUSH
33359: LD_STRING 10_ape
33361: PPUSH
33362: CALL_OW 38
// YouWin ;
33366: CALL_OW 103
// end ;
33370: LD_VAR 0 1
33374: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33375: LD_INT 0
33377: PPUSH
33378: PPUSH
33379: PPUSH
33380: PPUSH
// epsilonBase := [ ] ;
33381: LD_ADDR_VAR 0 2
33385: PUSH
33386: EMPTY
33387: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33388: LD_ADDR_VAR 0 3
33392: PUSH
33393: LD_INT 22
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 21
33405: PUSH
33406: LD_INT 3
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 50
33415: PUSH
33416: EMPTY
33417: LIST
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: PPUSH
33424: CALL_OW 69
33428: ST_TO_ADDR
// for i in buildings do
33429: LD_ADDR_VAR 0 4
33433: PUSH
33434: LD_VAR 0 3
33438: PUSH
33439: FOR_IN
33440: IFFALSE 33894
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33442: LD_VAR 0 4
33446: PPUSH
33447: CALL_OW 266
33451: PUSH
33452: LD_INT 6
33454: PUSH
33455: LD_INT 7
33457: PUSH
33458: LD_INT 8
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: IN
33466: IFFALSE 33580
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33468: LD_ADDR_VAR 0 2
33472: PUSH
33473: LD_VAR 0 2
33477: PUSH
33478: LD_VAR 0 4
33482: PPUSH
33483: CALL_OW 266
33487: PUSH
33488: LD_VAR 0 4
33492: PPUSH
33493: CALL_OW 250
33497: PUSH
33498: LD_VAR 0 4
33502: PPUSH
33503: CALL_OW 251
33507: PUSH
33508: LD_VAR 0 4
33512: PPUSH
33513: CALL_OW 254
33517: PUSH
33518: LD_VAR 0 4
33522: PPUSH
33523: CALL_OW 267
33527: PUSH
33528: LD_VAR 0 4
33532: PPUSH
33533: CALL_OW 248
33537: PUSH
33538: LD_VAR 0 4
33542: PPUSH
33543: LD_INT 1
33545: PPUSH
33546: CALL_OW 268
33550: PUSH
33551: LD_VAR 0 4
33555: PPUSH
33556: LD_INT 2
33558: PPUSH
33559: CALL_OW 268
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: PUSH
33574: EMPTY
33575: LIST
33576: ADD
33577: ST_TO_ADDR
33578: GO 33892
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33580: LD_VAR 0 4
33584: PPUSH
33585: CALL_OW 266
33589: PUSH
33590: LD_INT 32
33592: EQUAL
33593: IFTRUE 33610
33595: PUSH
33596: LD_VAR 0 4
33600: PPUSH
33601: CALL_OW 266
33605: PUSH
33606: LD_INT 33
33608: EQUAL
33609: OR
33610: IFFALSE 33707
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33612: LD_ADDR_VAR 0 2
33616: PUSH
33617: LD_VAR 0 2
33621: PUSH
33622: LD_VAR 0 4
33626: PPUSH
33627: CALL_OW 266
33631: PUSH
33632: LD_VAR 0 4
33636: PPUSH
33637: CALL_OW 250
33641: PUSH
33642: LD_VAR 0 4
33646: PPUSH
33647: CALL_OW 251
33651: PUSH
33652: LD_VAR 0 4
33656: PPUSH
33657: CALL_OW 254
33661: PUSH
33662: LD_VAR 0 4
33666: PPUSH
33667: CALL_OW 267
33671: PUSH
33672: LD_VAR 0 4
33676: PPUSH
33677: CALL_OW 248
33681: PUSH
33682: LD_VAR 0 4
33686: PPUSH
33687: CALL_OW 269
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: PUSH
33701: EMPTY
33702: LIST
33703: ADD
33704: ST_TO_ADDR
33705: GO 33892
// if GetBType ( i ) = b_factory then
33707: LD_VAR 0 4
33711: PPUSH
33712: CALL_OW 266
33716: PUSH
33717: LD_INT 3
33719: EQUAL
33720: IFFALSE 33810
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33722: LD_ADDR_VAR 0 2
33726: PUSH
33727: LD_VAR 0 2
33731: PPUSH
33732: LD_INT 1
33734: PPUSH
33735: LD_VAR 0 4
33739: PPUSH
33740: CALL_OW 266
33744: PUSH
33745: LD_VAR 0 4
33749: PPUSH
33750: CALL_OW 250
33754: PUSH
33755: LD_VAR 0 4
33759: PPUSH
33760: CALL_OW 251
33764: PUSH
33765: LD_VAR 0 4
33769: PPUSH
33770: CALL_OW 254
33774: PUSH
33775: LD_VAR 0 4
33779: PPUSH
33780: CALL_OW 267
33784: PUSH
33785: LD_VAR 0 4
33789: PPUSH
33790: CALL_OW 248
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: PPUSH
33803: CALL_OW 2
33807: ST_TO_ADDR
33808: GO 33892
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33810: LD_ADDR_VAR 0 2
33814: PUSH
33815: LD_VAR 0 2
33819: PUSH
33820: LD_VAR 0 4
33824: PPUSH
33825: CALL_OW 266
33829: PUSH
33830: LD_VAR 0 4
33834: PPUSH
33835: CALL_OW 250
33839: PUSH
33840: LD_VAR 0 4
33844: PPUSH
33845: CALL_OW 251
33849: PUSH
33850: LD_VAR 0 4
33854: PPUSH
33855: CALL_OW 254
33859: PUSH
33860: LD_VAR 0 4
33864: PPUSH
33865: CALL_OW 267
33869: PUSH
33870: LD_VAR 0 4
33874: PPUSH
33875: CALL_OW 248
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: PUSH
33888: EMPTY
33889: LIST
33890: ADD
33891: ST_TO_ADDR
// end ;
33892: GO 33439
33894: POP
33895: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33896: LD_VAR 0 2
33900: PPUSH
33901: LD_STRING 10_EpsilonBase
33903: PPUSH
33904: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33908: LD_INT 34
33910: PPUSH
33911: CALL_OW 353
33915: PPUSH
33916: LD_STRING 10_EpsilonEnv
33918: PPUSH
33919: CALL_OW 39
// end ; end_of_file
33923: LD_VAR 0 1
33927: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33928: LD_EXP 7
33932: IFFALSE 34055
33934: GO 33936
33936: DISABLE
33937: LD_INT 0
33939: PPUSH
33940: PPUSH
// begin enable ;
33941: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33942: LD_INT 35
33944: PPUSH
33945: LD_INT 385
33947: PPUSH
33948: CALL_OW 12
33952: PPUSH
33953: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33957: LD_ADDR_VAR 0 2
33961: PUSH
33962: LD_INT 13
33964: PUSH
33965: LD_INT 14
33967: PUSH
33968: LD_INT 15
33970: PUSH
33971: LD_INT 16
33973: PUSH
33974: LD_INT 17
33976: PUSH
33977: LD_INT 38
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33988: LD_ADDR_VAR 0 1
33992: PUSH
33993: LD_VAR 0 2
33997: PUSH
33998: LD_INT 1
34000: PPUSH
34001: LD_VAR 0 2
34005: PPUSH
34006: CALL 58706 0 1
34010: PPUSH
34011: CALL_OW 12
34015: ARRAY
34016: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
34017: LD_VAR 0 1
34021: PPUSH
34022: CALL_OW 435
34026: PUSH
34027: LD_INT 8
34029: LESS
34030: IFFALSE 34055
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
34032: LD_INT 1
34034: PPUSH
34035: LD_INT 5
34037: PPUSH
34038: CALL_OW 12
34042: PPUSH
34043: LD_VAR 0 1
34047: PPUSH
34048: LD_INT 1
34050: PPUSH
34051: CALL_OW 55
// end ;
34055: PPOPN 2
34057: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
34058: LD_OWVAR 1
34062: PUSH
34063: LD_INT 10500
34065: LESS
34066: IFFALSE 34074
34068: PUSH
34069: LD_EXP 9
34073: AND
34074: IFFALSE 34101
34076: GO 34078
34078: DISABLE
// begin enable ;
34079: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
34080: LD_INT 1
34082: PPUSH
34083: LD_INT 5
34085: PPUSH
34086: CALL_OW 12
34090: PPUSH
34091: LD_INT 15
34093: PPUSH
34094: LD_INT 1
34096: PPUSH
34097: CALL_OW 55
// end ;
34101: END
// every 0 0$55 trigger ruBase do
34102: LD_EXP 68
34106: IFFALSE 34150
34108: GO 34110
34110: DISABLE
// begin enable ;
34111: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
34112: LD_EXP 84
34116: PPUSH
34117: CALL_OW 435
34121: PUSH
34122: LD_INT 3
34124: LESS
34125: IFFALSE 34150
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
34127: LD_INT 1
34129: PPUSH
34130: LD_INT 5
34132: PPUSH
34133: CALL_OW 12
34137: PPUSH
34138: LD_EXP 84
34142: PPUSH
34143: LD_INT 1
34145: PPUSH
34146: CALL_OW 55
// end ;
34150: END
// every 1 1$05 trigger ruBase2 do
34151: LD_EXP 69
34155: IFFALSE 34199
34157: GO 34159
34159: DISABLE
// begin enable ;
34160: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
34161: LD_EXP 85
34165: PPUSH
34166: CALL_OW 435
34170: PUSH
34171: LD_INT 3
34173: LESS
34174: IFFALSE 34199
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
34176: LD_INT 1
34178: PPUSH
34179: LD_INT 5
34181: PPUSH
34182: CALL_OW 12
34186: PPUSH
34187: LD_EXP 85
34191: PPUSH
34192: LD_INT 1
34194: PPUSH
34195: CALL_OW 55
// end ; end_of_file end_of_file
34199: END
// export globalGameSaveCounter ; every 0 0$1 do
34200: GO 34202
34202: DISABLE
// begin enable ;
34203: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
34204: LD_STRING updateTimer(
34206: PUSH
34207: LD_OWVAR 1
34211: STR
34212: PUSH
34213: LD_STRING );
34215: STR
34216: PPUSH
34217: CALL_OW 559
// end ;
34221: END
// every 0 0$1 do
34222: GO 34224
34224: DISABLE
// begin globalGameSaveCounter := 0 ;
34225: LD_ADDR_EXP 86
34229: PUSH
34230: LD_INT 0
34232: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
34233: LD_STRING setGameSaveCounter(0)
34235: PPUSH
34236: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
34240: LD_STRING initStreamRollete();
34242: PPUSH
34243: CALL_OW 559
// InitStreamMode ;
34247: CALL 35592 0 0
// DefineStreamItems ( false ) ;
34251: LD_INT 0
34253: PPUSH
34254: CALL 36056 0 1
// end ;
34258: END
// export function SOS_MapStart ( ) ; begin
34259: LD_INT 0
34261: PPUSH
// if streamModeActive then
34262: LD_EXP 87
34266: IFFALSE 34275
// DefineStreamItems ( true ) ;
34268: LD_INT 1
34270: PPUSH
34271: CALL 36056 0 1
// UpdateLuaVariables ( ) ;
34275: CALL 34292 0 0
// UpdateFactoryWaypoints ( ) ;
34279: CALL 49178 0 0
// UpdateWarehouseGatheringPoints ( ) ;
34283: CALL 49430 0 0
// end ;
34287: LD_VAR 0 1
34291: RET
// function UpdateLuaVariables ( ) ; begin
34292: LD_INT 0
34294: PPUSH
// if globalGameSaveCounter then
34295: LD_EXP 86
34299: IFFALSE 34333
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34301: LD_ADDR_EXP 86
34305: PUSH
34306: LD_EXP 86
34310: PPUSH
34311: CALL 96011 0 1
34315: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34316: LD_STRING setGameSaveCounter(
34318: PUSH
34319: LD_EXP 86
34323: STR
34324: PUSH
34325: LD_STRING )
34327: STR
34328: PPUSH
34329: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34333: LD_STRING setGameDifficulty(
34335: PUSH
34336: LD_OWVAR 67
34340: STR
34341: PUSH
34342: LD_STRING )
34344: STR
34345: PPUSH
34346: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
34350: LD_STRING displayDifficulty(
34352: PUSH
34353: LD_OWVAR 67
34357: STR
34358: PUSH
34359: LD_STRING )
34361: STR
34362: PPUSH
34363: CALL_OW 559
// end ;
34367: LD_VAR 0 1
34371: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34372: LD_INT 0
34374: PPUSH
// if p2 = stream_mode then
34375: LD_VAR 0 2
34379: PUSH
34380: LD_INT 100
34382: EQUAL
34383: IFFALSE 35386
// begin if not StreamModeActive then
34385: LD_EXP 87
34389: NOT
34390: IFFALSE 34400
// StreamModeActive := true ;
34392: LD_ADDR_EXP 87
34396: PUSH
34397: LD_INT 1
34399: ST_TO_ADDR
// if p3 = 0 then
34400: LD_VAR 0 3
34404: PUSH
34405: LD_INT 0
34407: EQUAL
34408: IFFALSE 34414
// InitStreamMode ;
34410: CALL 35592 0 0
// if p3 = 1 then
34414: LD_VAR 0 3
34418: PUSH
34419: LD_INT 1
34421: EQUAL
34422: IFFALSE 34432
// sRocket := true ;
34424: LD_ADDR_EXP 92
34428: PUSH
34429: LD_INT 1
34431: ST_TO_ADDR
// if p3 = 2 then
34432: LD_VAR 0 3
34436: PUSH
34437: LD_INT 2
34439: EQUAL
34440: IFFALSE 34450
// sSpeed := true ;
34442: LD_ADDR_EXP 91
34446: PUSH
34447: LD_INT 1
34449: ST_TO_ADDR
// if p3 = 3 then
34450: LD_VAR 0 3
34454: PUSH
34455: LD_INT 3
34457: EQUAL
34458: IFFALSE 34468
// sEngine := true ;
34460: LD_ADDR_EXP 93
34464: PUSH
34465: LD_INT 1
34467: ST_TO_ADDR
// if p3 = 4 then
34468: LD_VAR 0 3
34472: PUSH
34473: LD_INT 4
34475: EQUAL
34476: IFFALSE 34486
// sSpec := true ;
34478: LD_ADDR_EXP 90
34482: PUSH
34483: LD_INT 1
34485: ST_TO_ADDR
// if p3 = 5 then
34486: LD_VAR 0 3
34490: PUSH
34491: LD_INT 5
34493: EQUAL
34494: IFFALSE 34504
// sLevel := true ;
34496: LD_ADDR_EXP 94
34500: PUSH
34501: LD_INT 1
34503: ST_TO_ADDR
// if p3 = 6 then
34504: LD_VAR 0 3
34508: PUSH
34509: LD_INT 6
34511: EQUAL
34512: IFFALSE 34522
// sArmoury := true ;
34514: LD_ADDR_EXP 95
34518: PUSH
34519: LD_INT 1
34521: ST_TO_ADDR
// if p3 = 7 then
34522: LD_VAR 0 3
34526: PUSH
34527: LD_INT 7
34529: EQUAL
34530: IFFALSE 34540
// sRadar := true ;
34532: LD_ADDR_EXP 96
34536: PUSH
34537: LD_INT 1
34539: ST_TO_ADDR
// if p3 = 8 then
34540: LD_VAR 0 3
34544: PUSH
34545: LD_INT 8
34547: EQUAL
34548: IFFALSE 34558
// sBunker := true ;
34550: LD_ADDR_EXP 97
34554: PUSH
34555: LD_INT 1
34557: ST_TO_ADDR
// if p3 = 9 then
34558: LD_VAR 0 3
34562: PUSH
34563: LD_INT 9
34565: EQUAL
34566: IFFALSE 34576
// sHack := true ;
34568: LD_ADDR_EXP 98
34572: PUSH
34573: LD_INT 1
34575: ST_TO_ADDR
// if p3 = 10 then
34576: LD_VAR 0 3
34580: PUSH
34581: LD_INT 10
34583: EQUAL
34584: IFFALSE 34594
// sFire := true ;
34586: LD_ADDR_EXP 99
34590: PUSH
34591: LD_INT 1
34593: ST_TO_ADDR
// if p3 = 11 then
34594: LD_VAR 0 3
34598: PUSH
34599: LD_INT 11
34601: EQUAL
34602: IFFALSE 34612
// sRefresh := true ;
34604: LD_ADDR_EXP 100
34608: PUSH
34609: LD_INT 1
34611: ST_TO_ADDR
// if p3 = 12 then
34612: LD_VAR 0 3
34616: PUSH
34617: LD_INT 12
34619: EQUAL
34620: IFFALSE 34630
// sExp := true ;
34622: LD_ADDR_EXP 101
34626: PUSH
34627: LD_INT 1
34629: ST_TO_ADDR
// if p3 = 13 then
34630: LD_VAR 0 3
34634: PUSH
34635: LD_INT 13
34637: EQUAL
34638: IFFALSE 34648
// sDepot := true ;
34640: LD_ADDR_EXP 102
34644: PUSH
34645: LD_INT 1
34647: ST_TO_ADDR
// if p3 = 14 then
34648: LD_VAR 0 3
34652: PUSH
34653: LD_INT 14
34655: EQUAL
34656: IFFALSE 34666
// sFlag := true ;
34658: LD_ADDR_EXP 103
34662: PUSH
34663: LD_INT 1
34665: ST_TO_ADDR
// if p3 = 15 then
34666: LD_VAR 0 3
34670: PUSH
34671: LD_INT 15
34673: EQUAL
34674: IFFALSE 34684
// sKamikadze := true ;
34676: LD_ADDR_EXP 111
34680: PUSH
34681: LD_INT 1
34683: ST_TO_ADDR
// if p3 = 16 then
34684: LD_VAR 0 3
34688: PUSH
34689: LD_INT 16
34691: EQUAL
34692: IFFALSE 34702
// sTroll := true ;
34694: LD_ADDR_EXP 112
34698: PUSH
34699: LD_INT 1
34701: ST_TO_ADDR
// if p3 = 17 then
34702: LD_VAR 0 3
34706: PUSH
34707: LD_INT 17
34709: EQUAL
34710: IFFALSE 34720
// sSlow := true ;
34712: LD_ADDR_EXP 113
34716: PUSH
34717: LD_INT 1
34719: ST_TO_ADDR
// if p3 = 18 then
34720: LD_VAR 0 3
34724: PUSH
34725: LD_INT 18
34727: EQUAL
34728: IFFALSE 34738
// sLack := true ;
34730: LD_ADDR_EXP 114
34734: PUSH
34735: LD_INT 1
34737: ST_TO_ADDR
// if p3 = 19 then
34738: LD_VAR 0 3
34742: PUSH
34743: LD_INT 19
34745: EQUAL
34746: IFFALSE 34756
// sTank := true ;
34748: LD_ADDR_EXP 116
34752: PUSH
34753: LD_INT 1
34755: ST_TO_ADDR
// if p3 = 20 then
34756: LD_VAR 0 3
34760: PUSH
34761: LD_INT 20
34763: EQUAL
34764: IFFALSE 34774
// sRemote := true ;
34766: LD_ADDR_EXP 117
34770: PUSH
34771: LD_INT 1
34773: ST_TO_ADDR
// if p3 = 21 then
34774: LD_VAR 0 3
34778: PUSH
34779: LD_INT 21
34781: EQUAL
34782: IFFALSE 34792
// sPowell := true ;
34784: LD_ADDR_EXP 118
34788: PUSH
34789: LD_INT 1
34791: ST_TO_ADDR
// if p3 = 22 then
34792: LD_VAR 0 3
34796: PUSH
34797: LD_INT 22
34799: EQUAL
34800: IFFALSE 34810
// sTeleport := true ;
34802: LD_ADDR_EXP 121
34806: PUSH
34807: LD_INT 1
34809: ST_TO_ADDR
// if p3 = 23 then
34810: LD_VAR 0 3
34814: PUSH
34815: LD_INT 23
34817: EQUAL
34818: IFFALSE 34828
// sOilTower := true ;
34820: LD_ADDR_EXP 123
34824: PUSH
34825: LD_INT 1
34827: ST_TO_ADDR
// if p3 = 24 then
34828: LD_VAR 0 3
34832: PUSH
34833: LD_INT 24
34835: EQUAL
34836: IFFALSE 34846
// sShovel := true ;
34838: LD_ADDR_EXP 124
34842: PUSH
34843: LD_INT 1
34845: ST_TO_ADDR
// if p3 = 25 then
34846: LD_VAR 0 3
34850: PUSH
34851: LD_INT 25
34853: EQUAL
34854: IFFALSE 34864
// sSheik := true ;
34856: LD_ADDR_EXP 125
34860: PUSH
34861: LD_INT 1
34863: ST_TO_ADDR
// if p3 = 26 then
34864: LD_VAR 0 3
34868: PUSH
34869: LD_INT 26
34871: EQUAL
34872: IFFALSE 34882
// sEarthquake := true ;
34874: LD_ADDR_EXP 127
34878: PUSH
34879: LD_INT 1
34881: ST_TO_ADDR
// if p3 = 27 then
34882: LD_VAR 0 3
34886: PUSH
34887: LD_INT 27
34889: EQUAL
34890: IFFALSE 34900
// sAI := true ;
34892: LD_ADDR_EXP 128
34896: PUSH
34897: LD_INT 1
34899: ST_TO_ADDR
// if p3 = 28 then
34900: LD_VAR 0 3
34904: PUSH
34905: LD_INT 28
34907: EQUAL
34908: IFFALSE 34918
// sCargo := true ;
34910: LD_ADDR_EXP 131
34914: PUSH
34915: LD_INT 1
34917: ST_TO_ADDR
// if p3 = 29 then
34918: LD_VAR 0 3
34922: PUSH
34923: LD_INT 29
34925: EQUAL
34926: IFFALSE 34936
// sDLaser := true ;
34928: LD_ADDR_EXP 132
34932: PUSH
34933: LD_INT 1
34935: ST_TO_ADDR
// if p3 = 30 then
34936: LD_VAR 0 3
34940: PUSH
34941: LD_INT 30
34943: EQUAL
34944: IFFALSE 34954
// sExchange := true ;
34946: LD_ADDR_EXP 133
34950: PUSH
34951: LD_INT 1
34953: ST_TO_ADDR
// if p3 = 31 then
34954: LD_VAR 0 3
34958: PUSH
34959: LD_INT 31
34961: EQUAL
34962: IFFALSE 34972
// sFac := true ;
34964: LD_ADDR_EXP 134
34968: PUSH
34969: LD_INT 1
34971: ST_TO_ADDR
// if p3 = 32 then
34972: LD_VAR 0 3
34976: PUSH
34977: LD_INT 32
34979: EQUAL
34980: IFFALSE 34990
// sPower := true ;
34982: LD_ADDR_EXP 135
34986: PUSH
34987: LD_INT 1
34989: ST_TO_ADDR
// if p3 = 33 then
34990: LD_VAR 0 3
34994: PUSH
34995: LD_INT 33
34997: EQUAL
34998: IFFALSE 35008
// sRandom := true ;
35000: LD_ADDR_EXP 136
35004: PUSH
35005: LD_INT 1
35007: ST_TO_ADDR
// if p3 = 34 then
35008: LD_VAR 0 3
35012: PUSH
35013: LD_INT 34
35015: EQUAL
35016: IFFALSE 35026
// sShield := true ;
35018: LD_ADDR_EXP 137
35022: PUSH
35023: LD_INT 1
35025: ST_TO_ADDR
// if p3 = 35 then
35026: LD_VAR 0 3
35030: PUSH
35031: LD_INT 35
35033: EQUAL
35034: IFFALSE 35044
// sTime := true ;
35036: LD_ADDR_EXP 138
35040: PUSH
35041: LD_INT 1
35043: ST_TO_ADDR
// if p3 = 36 then
35044: LD_VAR 0 3
35048: PUSH
35049: LD_INT 36
35051: EQUAL
35052: IFFALSE 35062
// sTools := true ;
35054: LD_ADDR_EXP 139
35058: PUSH
35059: LD_INT 1
35061: ST_TO_ADDR
// if p3 = 101 then
35062: LD_VAR 0 3
35066: PUSH
35067: LD_INT 101
35069: EQUAL
35070: IFFALSE 35080
// sSold := true ;
35072: LD_ADDR_EXP 104
35076: PUSH
35077: LD_INT 1
35079: ST_TO_ADDR
// if p3 = 102 then
35080: LD_VAR 0 3
35084: PUSH
35085: LD_INT 102
35087: EQUAL
35088: IFFALSE 35098
// sDiff := true ;
35090: LD_ADDR_EXP 105
35094: PUSH
35095: LD_INT 1
35097: ST_TO_ADDR
// if p3 = 103 then
35098: LD_VAR 0 3
35102: PUSH
35103: LD_INT 103
35105: EQUAL
35106: IFFALSE 35116
// sFog := true ;
35108: LD_ADDR_EXP 108
35112: PUSH
35113: LD_INT 1
35115: ST_TO_ADDR
// if p3 = 104 then
35116: LD_VAR 0 3
35120: PUSH
35121: LD_INT 104
35123: EQUAL
35124: IFFALSE 35134
// sReset := true ;
35126: LD_ADDR_EXP 109
35130: PUSH
35131: LD_INT 1
35133: ST_TO_ADDR
// if p3 = 105 then
35134: LD_VAR 0 3
35138: PUSH
35139: LD_INT 105
35141: EQUAL
35142: IFFALSE 35152
// sSun := true ;
35144: LD_ADDR_EXP 110
35148: PUSH
35149: LD_INT 1
35151: ST_TO_ADDR
// if p3 = 106 then
35152: LD_VAR 0 3
35156: PUSH
35157: LD_INT 106
35159: EQUAL
35160: IFFALSE 35170
// sTiger := true ;
35162: LD_ADDR_EXP 106
35166: PUSH
35167: LD_INT 1
35169: ST_TO_ADDR
// if p3 = 107 then
35170: LD_VAR 0 3
35174: PUSH
35175: LD_INT 107
35177: EQUAL
35178: IFFALSE 35188
// sBomb := true ;
35180: LD_ADDR_EXP 107
35184: PUSH
35185: LD_INT 1
35187: ST_TO_ADDR
// if p3 = 108 then
35188: LD_VAR 0 3
35192: PUSH
35193: LD_INT 108
35195: EQUAL
35196: IFFALSE 35206
// sWound := true ;
35198: LD_ADDR_EXP 115
35202: PUSH
35203: LD_INT 1
35205: ST_TO_ADDR
// if p3 = 109 then
35206: LD_VAR 0 3
35210: PUSH
35211: LD_INT 109
35213: EQUAL
35214: IFFALSE 35224
// sBetray := true ;
35216: LD_ADDR_EXP 119
35220: PUSH
35221: LD_INT 1
35223: ST_TO_ADDR
// if p3 = 110 then
35224: LD_VAR 0 3
35228: PUSH
35229: LD_INT 110
35231: EQUAL
35232: IFFALSE 35242
// sContamin := true ;
35234: LD_ADDR_EXP 120
35238: PUSH
35239: LD_INT 1
35241: ST_TO_ADDR
// if p3 = 111 then
35242: LD_VAR 0 3
35246: PUSH
35247: LD_INT 111
35249: EQUAL
35250: IFFALSE 35260
// sOil := true ;
35252: LD_ADDR_EXP 122
35256: PUSH
35257: LD_INT 1
35259: ST_TO_ADDR
// if p3 = 112 then
35260: LD_VAR 0 3
35264: PUSH
35265: LD_INT 112
35267: EQUAL
35268: IFFALSE 35278
// sStu := true ;
35270: LD_ADDR_EXP 126
35274: PUSH
35275: LD_INT 1
35277: ST_TO_ADDR
// if p3 = 113 then
35278: LD_VAR 0 3
35282: PUSH
35283: LD_INT 113
35285: EQUAL
35286: IFFALSE 35296
// sBazooka := true ;
35288: LD_ADDR_EXP 129
35292: PUSH
35293: LD_INT 1
35295: ST_TO_ADDR
// if p3 = 114 then
35296: LD_VAR 0 3
35300: PUSH
35301: LD_INT 114
35303: EQUAL
35304: IFFALSE 35314
// sMortar := true ;
35306: LD_ADDR_EXP 130
35310: PUSH
35311: LD_INT 1
35313: ST_TO_ADDR
// if p3 = 115 then
35314: LD_VAR 0 3
35318: PUSH
35319: LD_INT 115
35321: EQUAL
35322: IFFALSE 35332
// sRanger := true ;
35324: LD_ADDR_EXP 140
35328: PUSH
35329: LD_INT 1
35331: ST_TO_ADDR
// if p3 = 116 then
35332: LD_VAR 0 3
35336: PUSH
35337: LD_INT 116
35339: EQUAL
35340: IFFALSE 35350
// sComputer := true ;
35342: LD_ADDR_EXP 141
35346: PUSH
35347: LD_INT 1
35349: ST_TO_ADDR
// if p3 = 117 then
35350: LD_VAR 0 3
35354: PUSH
35355: LD_INT 117
35357: EQUAL
35358: IFFALSE 35368
// s30 := true ;
35360: LD_ADDR_EXP 142
35364: PUSH
35365: LD_INT 1
35367: ST_TO_ADDR
// if p3 = 118 then
35368: LD_VAR 0 3
35372: PUSH
35373: LD_INT 118
35375: EQUAL
35376: IFFALSE 35386
// s60 := true ;
35378: LD_ADDR_EXP 143
35382: PUSH
35383: LD_INT 1
35385: ST_TO_ADDR
// end ; if p2 = hack_mode then
35386: LD_VAR 0 2
35390: PUSH
35391: LD_INT 101
35393: EQUAL
35394: IFFALSE 35522
// begin case p3 of 1 :
35396: LD_VAR 0 3
35400: PUSH
35401: LD_INT 1
35403: DOUBLE
35404: EQUAL
35405: IFTRUE 35409
35407: GO 35416
35409: POP
// hHackUnlimitedResources ; 2 :
35410: CALL 47785 0 0
35414: GO 35522
35416: LD_INT 2
35418: DOUBLE
35419: EQUAL
35420: IFTRUE 35424
35422: GO 35431
35424: POP
// hHackSetLevel10 ; 3 :
35425: CALL 47918 0 0
35429: GO 35522
35431: LD_INT 3
35433: DOUBLE
35434: EQUAL
35435: IFTRUE 35439
35437: GO 35446
35439: POP
// hHackSetLevel10YourUnits ; 4 :
35440: CALL 48003 0 0
35444: GO 35522
35446: LD_INT 4
35448: DOUBLE
35449: EQUAL
35450: IFTRUE 35454
35452: GO 35461
35454: POP
// hHackInvincible ; 5 :
35455: CALL 48451 0 0
35459: GO 35522
35461: LD_INT 5
35463: DOUBLE
35464: EQUAL
35465: IFTRUE 35469
35467: GO 35476
35469: POP
// hHackInvisible ; 6 :
35470: CALL 48562 0 0
35474: GO 35522
35476: LD_INT 6
35478: DOUBLE
35479: EQUAL
35480: IFTRUE 35484
35482: GO 35491
35484: POP
// hHackChangeYourSide ; 7 :
35485: CALL 48619 0 0
35489: GO 35522
35491: LD_INT 7
35493: DOUBLE
35494: EQUAL
35495: IFTRUE 35499
35497: GO 35506
35499: POP
// hHackChangeUnitSide ; 8 :
35500: CALL 48661 0 0
35504: GO 35522
35506: LD_INT 8
35508: DOUBLE
35509: EQUAL
35510: IFTRUE 35514
35512: GO 35521
35514: POP
// hHackFog ; end ;
35515: CALL 48762 0 0
35519: GO 35522
35521: POP
// end ; if p2 = game_save_mode then
35522: LD_VAR 0 2
35526: PUSH
35527: LD_INT 102
35529: EQUAL
35530: IFFALSE 35587
// begin if p3 = 1 then
35532: LD_VAR 0 3
35536: PUSH
35537: LD_INT 1
35539: EQUAL
35540: IFFALSE 35552
// globalGameSaveCounter := p4 ;
35542: LD_ADDR_EXP 86
35546: PUSH
35547: LD_VAR 0 4
35551: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35552: LD_VAR 0 3
35556: PUSH
35557: LD_INT 2
35559: EQUAL
35560: IFFALSE 35568
35562: PUSH
35563: LD_EXP 86
35567: AND
35568: IFFALSE 35587
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35570: LD_STRING setGameSaveCounter(
35572: PUSH
35573: LD_EXP 86
35577: STR
35578: PUSH
35579: LD_STRING )
35581: STR
35582: PPUSH
35583: CALL_OW 559
// end ; end ;
35587: LD_VAR 0 7
35591: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35592: LD_INT 0
35594: PPUSH
// streamModeActive := false ;
35595: LD_ADDR_EXP 87
35599: PUSH
35600: LD_INT 0
35602: ST_TO_ADDR
// normalCounter := 36 ;
35603: LD_ADDR_EXP 88
35607: PUSH
35608: LD_INT 36
35610: ST_TO_ADDR
// hardcoreCounter := 18 ;
35611: LD_ADDR_EXP 89
35615: PUSH
35616: LD_INT 18
35618: ST_TO_ADDR
// sRocket := false ;
35619: LD_ADDR_EXP 92
35623: PUSH
35624: LD_INT 0
35626: ST_TO_ADDR
// sSpeed := false ;
35627: LD_ADDR_EXP 91
35631: PUSH
35632: LD_INT 0
35634: ST_TO_ADDR
// sEngine := false ;
35635: LD_ADDR_EXP 93
35639: PUSH
35640: LD_INT 0
35642: ST_TO_ADDR
// sSpec := false ;
35643: LD_ADDR_EXP 90
35647: PUSH
35648: LD_INT 0
35650: ST_TO_ADDR
// sLevel := false ;
35651: LD_ADDR_EXP 94
35655: PUSH
35656: LD_INT 0
35658: ST_TO_ADDR
// sArmoury := false ;
35659: LD_ADDR_EXP 95
35663: PUSH
35664: LD_INT 0
35666: ST_TO_ADDR
// sRadar := false ;
35667: LD_ADDR_EXP 96
35671: PUSH
35672: LD_INT 0
35674: ST_TO_ADDR
// sBunker := false ;
35675: LD_ADDR_EXP 97
35679: PUSH
35680: LD_INT 0
35682: ST_TO_ADDR
// sHack := false ;
35683: LD_ADDR_EXP 98
35687: PUSH
35688: LD_INT 0
35690: ST_TO_ADDR
// sFire := false ;
35691: LD_ADDR_EXP 99
35695: PUSH
35696: LD_INT 0
35698: ST_TO_ADDR
// sRefresh := false ;
35699: LD_ADDR_EXP 100
35703: PUSH
35704: LD_INT 0
35706: ST_TO_ADDR
// sExp := false ;
35707: LD_ADDR_EXP 101
35711: PUSH
35712: LD_INT 0
35714: ST_TO_ADDR
// sDepot := false ;
35715: LD_ADDR_EXP 102
35719: PUSH
35720: LD_INT 0
35722: ST_TO_ADDR
// sFlag := false ;
35723: LD_ADDR_EXP 103
35727: PUSH
35728: LD_INT 0
35730: ST_TO_ADDR
// sKamikadze := false ;
35731: LD_ADDR_EXP 111
35735: PUSH
35736: LD_INT 0
35738: ST_TO_ADDR
// sTroll := false ;
35739: LD_ADDR_EXP 112
35743: PUSH
35744: LD_INT 0
35746: ST_TO_ADDR
// sSlow := false ;
35747: LD_ADDR_EXP 113
35751: PUSH
35752: LD_INT 0
35754: ST_TO_ADDR
// sLack := false ;
35755: LD_ADDR_EXP 114
35759: PUSH
35760: LD_INT 0
35762: ST_TO_ADDR
// sTank := false ;
35763: LD_ADDR_EXP 116
35767: PUSH
35768: LD_INT 0
35770: ST_TO_ADDR
// sRemote := false ;
35771: LD_ADDR_EXP 117
35775: PUSH
35776: LD_INT 0
35778: ST_TO_ADDR
// sPowell := false ;
35779: LD_ADDR_EXP 118
35783: PUSH
35784: LD_INT 0
35786: ST_TO_ADDR
// sTeleport := false ;
35787: LD_ADDR_EXP 121
35791: PUSH
35792: LD_INT 0
35794: ST_TO_ADDR
// sOilTower := false ;
35795: LD_ADDR_EXP 123
35799: PUSH
35800: LD_INT 0
35802: ST_TO_ADDR
// sShovel := false ;
35803: LD_ADDR_EXP 124
35807: PUSH
35808: LD_INT 0
35810: ST_TO_ADDR
// sSheik := false ;
35811: LD_ADDR_EXP 125
35815: PUSH
35816: LD_INT 0
35818: ST_TO_ADDR
// sEarthquake := false ;
35819: LD_ADDR_EXP 127
35823: PUSH
35824: LD_INT 0
35826: ST_TO_ADDR
// sAI := false ;
35827: LD_ADDR_EXP 128
35831: PUSH
35832: LD_INT 0
35834: ST_TO_ADDR
// sCargo := false ;
35835: LD_ADDR_EXP 131
35839: PUSH
35840: LD_INT 0
35842: ST_TO_ADDR
// sDLaser := false ;
35843: LD_ADDR_EXP 132
35847: PUSH
35848: LD_INT 0
35850: ST_TO_ADDR
// sExchange := false ;
35851: LD_ADDR_EXP 133
35855: PUSH
35856: LD_INT 0
35858: ST_TO_ADDR
// sFac := false ;
35859: LD_ADDR_EXP 134
35863: PUSH
35864: LD_INT 0
35866: ST_TO_ADDR
// sPower := false ;
35867: LD_ADDR_EXP 135
35871: PUSH
35872: LD_INT 0
35874: ST_TO_ADDR
// sRandom := false ;
35875: LD_ADDR_EXP 136
35879: PUSH
35880: LD_INT 0
35882: ST_TO_ADDR
// sShield := false ;
35883: LD_ADDR_EXP 137
35887: PUSH
35888: LD_INT 0
35890: ST_TO_ADDR
// sTime := false ;
35891: LD_ADDR_EXP 138
35895: PUSH
35896: LD_INT 0
35898: ST_TO_ADDR
// sTools := false ;
35899: LD_ADDR_EXP 139
35903: PUSH
35904: LD_INT 0
35906: ST_TO_ADDR
// sSold := false ;
35907: LD_ADDR_EXP 104
35911: PUSH
35912: LD_INT 0
35914: ST_TO_ADDR
// sDiff := false ;
35915: LD_ADDR_EXP 105
35919: PUSH
35920: LD_INT 0
35922: ST_TO_ADDR
// sFog := false ;
35923: LD_ADDR_EXP 108
35927: PUSH
35928: LD_INT 0
35930: ST_TO_ADDR
// sReset := false ;
35931: LD_ADDR_EXP 109
35935: PUSH
35936: LD_INT 0
35938: ST_TO_ADDR
// sSun := false ;
35939: LD_ADDR_EXP 110
35943: PUSH
35944: LD_INT 0
35946: ST_TO_ADDR
// sTiger := false ;
35947: LD_ADDR_EXP 106
35951: PUSH
35952: LD_INT 0
35954: ST_TO_ADDR
// sBomb := false ;
35955: LD_ADDR_EXP 107
35959: PUSH
35960: LD_INT 0
35962: ST_TO_ADDR
// sWound := false ;
35963: LD_ADDR_EXP 115
35967: PUSH
35968: LD_INT 0
35970: ST_TO_ADDR
// sBetray := false ;
35971: LD_ADDR_EXP 119
35975: PUSH
35976: LD_INT 0
35978: ST_TO_ADDR
// sContamin := false ;
35979: LD_ADDR_EXP 120
35983: PUSH
35984: LD_INT 0
35986: ST_TO_ADDR
// sOil := false ;
35987: LD_ADDR_EXP 122
35991: PUSH
35992: LD_INT 0
35994: ST_TO_ADDR
// sStu := false ;
35995: LD_ADDR_EXP 126
35999: PUSH
36000: LD_INT 0
36002: ST_TO_ADDR
// sBazooka := false ;
36003: LD_ADDR_EXP 129
36007: PUSH
36008: LD_INT 0
36010: ST_TO_ADDR
// sMortar := false ;
36011: LD_ADDR_EXP 130
36015: PUSH
36016: LD_INT 0
36018: ST_TO_ADDR
// sRanger := false ;
36019: LD_ADDR_EXP 140
36023: PUSH
36024: LD_INT 0
36026: ST_TO_ADDR
// sComputer := false ;
36027: LD_ADDR_EXP 141
36031: PUSH
36032: LD_INT 0
36034: ST_TO_ADDR
// s30 := false ;
36035: LD_ADDR_EXP 142
36039: PUSH
36040: LD_INT 0
36042: ST_TO_ADDR
// s60 := false ;
36043: LD_ADDR_EXP 143
36047: PUSH
36048: LD_INT 0
36050: ST_TO_ADDR
// end ;
36051: LD_VAR 0 1
36055: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
36056: LD_INT 0
36058: PPUSH
36059: PPUSH
36060: PPUSH
36061: PPUSH
36062: PPUSH
36063: PPUSH
36064: PPUSH
// result := [ ] ;
36065: LD_ADDR_VAR 0 2
36069: PUSH
36070: EMPTY
36071: ST_TO_ADDR
// if campaign_id = 1 then
36072: LD_OWVAR 69
36076: PUSH
36077: LD_INT 1
36079: EQUAL
36080: IFFALSE 39246
// begin case mission_number of 1 :
36082: LD_OWVAR 70
36086: PUSH
36087: LD_INT 1
36089: DOUBLE
36090: EQUAL
36091: IFTRUE 36095
36093: GO 36171
36095: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
36096: LD_ADDR_VAR 0 2
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: LD_INT 4
36106: PUSH
36107: LD_INT 11
36109: PUSH
36110: LD_INT 12
36112: PUSH
36113: LD_INT 15
36115: PUSH
36116: LD_INT 16
36118: PUSH
36119: LD_INT 22
36121: PUSH
36122: LD_INT 23
36124: PUSH
36125: LD_INT 26
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: LIST
36132: LIST
36133: LIST
36134: LIST
36135: LIST
36136: LIST
36137: LIST
36138: PUSH
36139: LD_INT 101
36141: PUSH
36142: LD_INT 102
36144: PUSH
36145: LD_INT 106
36147: PUSH
36148: LD_INT 116
36150: PUSH
36151: LD_INT 117
36153: PUSH
36154: LD_INT 118
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: ST_TO_ADDR
36169: GO 39244
36171: LD_INT 2
36173: DOUBLE
36174: EQUAL
36175: IFTRUE 36179
36177: GO 36263
36179: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
36180: LD_ADDR_VAR 0 2
36184: PUSH
36185: LD_INT 2
36187: PUSH
36188: LD_INT 4
36190: PUSH
36191: LD_INT 11
36193: PUSH
36194: LD_INT 12
36196: PUSH
36197: LD_INT 15
36199: PUSH
36200: LD_INT 16
36202: PUSH
36203: LD_INT 22
36205: PUSH
36206: LD_INT 23
36208: PUSH
36209: LD_INT 26
36211: PUSH
36212: EMPTY
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: LIST
36222: PUSH
36223: LD_INT 101
36225: PUSH
36226: LD_INT 102
36228: PUSH
36229: LD_INT 105
36231: PUSH
36232: LD_INT 106
36234: PUSH
36235: LD_INT 108
36237: PUSH
36238: LD_INT 116
36240: PUSH
36241: LD_INT 117
36243: PUSH
36244: LD_INT 118
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: ST_TO_ADDR
36261: GO 39244
36263: LD_INT 3
36265: DOUBLE
36266: EQUAL
36267: IFTRUE 36271
36269: GO 36359
36271: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
36272: LD_ADDR_VAR 0 2
36276: PUSH
36277: LD_INT 2
36279: PUSH
36280: LD_INT 4
36282: PUSH
36283: LD_INT 5
36285: PUSH
36286: LD_INT 11
36288: PUSH
36289: LD_INT 12
36291: PUSH
36292: LD_INT 15
36294: PUSH
36295: LD_INT 16
36297: PUSH
36298: LD_INT 22
36300: PUSH
36301: LD_INT 26
36303: PUSH
36304: LD_INT 36
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: LIST
36311: LIST
36312: LIST
36313: LIST
36314: LIST
36315: LIST
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 101
36321: PUSH
36322: LD_INT 102
36324: PUSH
36325: LD_INT 105
36327: PUSH
36328: LD_INT 106
36330: PUSH
36331: LD_INT 108
36333: PUSH
36334: LD_INT 116
36336: PUSH
36337: LD_INT 117
36339: PUSH
36340: LD_INT 118
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: ST_TO_ADDR
36357: GO 39244
36359: LD_INT 4
36361: DOUBLE
36362: EQUAL
36363: IFTRUE 36367
36365: GO 36463
36367: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36368: LD_ADDR_VAR 0 2
36372: PUSH
36373: LD_INT 2
36375: PUSH
36376: LD_INT 4
36378: PUSH
36379: LD_INT 5
36381: PUSH
36382: LD_INT 8
36384: PUSH
36385: LD_INT 11
36387: PUSH
36388: LD_INT 12
36390: PUSH
36391: LD_INT 15
36393: PUSH
36394: LD_INT 16
36396: PUSH
36397: LD_INT 22
36399: PUSH
36400: LD_INT 23
36402: PUSH
36403: LD_INT 26
36405: PUSH
36406: LD_INT 36
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 101
36425: PUSH
36426: LD_INT 102
36428: PUSH
36429: LD_INT 105
36431: PUSH
36432: LD_INT 106
36434: PUSH
36435: LD_INT 108
36437: PUSH
36438: LD_INT 116
36440: PUSH
36441: LD_INT 117
36443: PUSH
36444: LD_INT 118
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: LIST
36451: LIST
36452: LIST
36453: LIST
36454: LIST
36455: LIST
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: ST_TO_ADDR
36461: GO 39244
36463: LD_INT 5
36465: DOUBLE
36466: EQUAL
36467: IFTRUE 36471
36469: GO 36583
36471: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36472: LD_ADDR_VAR 0 2
36476: PUSH
36477: LD_INT 2
36479: PUSH
36480: LD_INT 4
36482: PUSH
36483: LD_INT 5
36485: PUSH
36486: LD_INT 6
36488: PUSH
36489: LD_INT 8
36491: PUSH
36492: LD_INT 11
36494: PUSH
36495: LD_INT 12
36497: PUSH
36498: LD_INT 15
36500: PUSH
36501: LD_INT 16
36503: PUSH
36504: LD_INT 22
36506: PUSH
36507: LD_INT 23
36509: PUSH
36510: LD_INT 25
36512: PUSH
36513: LD_INT 26
36515: PUSH
36516: LD_INT 36
36518: PUSH
36519: EMPTY
36520: LIST
36521: LIST
36522: LIST
36523: LIST
36524: LIST
36525: LIST
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: PUSH
36535: LD_INT 101
36537: PUSH
36538: LD_INT 102
36540: PUSH
36541: LD_INT 105
36543: PUSH
36544: LD_INT 106
36546: PUSH
36547: LD_INT 108
36549: PUSH
36550: LD_INT 109
36552: PUSH
36553: LD_INT 112
36555: PUSH
36556: LD_INT 116
36558: PUSH
36559: LD_INT 117
36561: PUSH
36562: LD_INT 118
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: LIST
36569: LIST
36570: LIST
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: ST_TO_ADDR
36581: GO 39244
36583: LD_INT 6
36585: DOUBLE
36586: EQUAL
36587: IFTRUE 36591
36589: GO 36723
36591: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36592: LD_ADDR_VAR 0 2
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: LD_INT 4
36602: PUSH
36603: LD_INT 5
36605: PUSH
36606: LD_INT 6
36608: PUSH
36609: LD_INT 8
36611: PUSH
36612: LD_INT 11
36614: PUSH
36615: LD_INT 12
36617: PUSH
36618: LD_INT 15
36620: PUSH
36621: LD_INT 16
36623: PUSH
36624: LD_INT 20
36626: PUSH
36627: LD_INT 21
36629: PUSH
36630: LD_INT 22
36632: PUSH
36633: LD_INT 23
36635: PUSH
36636: LD_INT 25
36638: PUSH
36639: LD_INT 26
36641: PUSH
36642: LD_INT 30
36644: PUSH
36645: LD_INT 31
36647: PUSH
36648: LD_INT 32
36650: PUSH
36651: LD_INT 36
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: LIST
36658: LIST
36659: LIST
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: PUSH
36675: LD_INT 101
36677: PUSH
36678: LD_INT 102
36680: PUSH
36681: LD_INT 105
36683: PUSH
36684: LD_INT 106
36686: PUSH
36687: LD_INT 108
36689: PUSH
36690: LD_INT 109
36692: PUSH
36693: LD_INT 112
36695: PUSH
36696: LD_INT 116
36698: PUSH
36699: LD_INT 117
36701: PUSH
36702: LD_INT 118
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: ST_TO_ADDR
36721: GO 39244
36723: LD_INT 7
36725: DOUBLE
36726: EQUAL
36727: IFTRUE 36731
36729: GO 36843
36731: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36732: LD_ADDR_VAR 0 2
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: LD_INT 4
36742: PUSH
36743: LD_INT 5
36745: PUSH
36746: LD_INT 7
36748: PUSH
36749: LD_INT 11
36751: PUSH
36752: LD_INT 12
36754: PUSH
36755: LD_INT 15
36757: PUSH
36758: LD_INT 16
36760: PUSH
36761: LD_INT 20
36763: PUSH
36764: LD_INT 21
36766: PUSH
36767: LD_INT 22
36769: PUSH
36770: LD_INT 23
36772: PUSH
36773: LD_INT 25
36775: PUSH
36776: LD_INT 26
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 101
36797: PUSH
36798: LD_INT 102
36800: PUSH
36801: LD_INT 103
36803: PUSH
36804: LD_INT 105
36806: PUSH
36807: LD_INT 106
36809: PUSH
36810: LD_INT 108
36812: PUSH
36813: LD_INT 112
36815: PUSH
36816: LD_INT 116
36818: PUSH
36819: LD_INT 117
36821: PUSH
36822: LD_INT 118
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: PUSH
36837: EMPTY
36838: LIST
36839: LIST
36840: ST_TO_ADDR
36841: GO 39244
36843: LD_INT 8
36845: DOUBLE
36846: EQUAL
36847: IFTRUE 36851
36849: GO 36991
36851: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36852: LD_ADDR_VAR 0 2
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: LD_INT 4
36862: PUSH
36863: LD_INT 5
36865: PUSH
36866: LD_INT 6
36868: PUSH
36869: LD_INT 7
36871: PUSH
36872: LD_INT 8
36874: PUSH
36875: LD_INT 11
36877: PUSH
36878: LD_INT 12
36880: PUSH
36881: LD_INT 15
36883: PUSH
36884: LD_INT 16
36886: PUSH
36887: LD_INT 20
36889: PUSH
36890: LD_INT 21
36892: PUSH
36893: LD_INT 22
36895: PUSH
36896: LD_INT 23
36898: PUSH
36899: LD_INT 25
36901: PUSH
36902: LD_INT 26
36904: PUSH
36905: LD_INT 30
36907: PUSH
36908: LD_INT 31
36910: PUSH
36911: LD_INT 32
36913: PUSH
36914: LD_INT 36
36916: PUSH
36917: EMPTY
36918: LIST
36919: LIST
36920: LIST
36921: LIST
36922: LIST
36923: LIST
36924: LIST
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 101
36941: PUSH
36942: LD_INT 102
36944: PUSH
36945: LD_INT 103
36947: PUSH
36948: LD_INT 105
36950: PUSH
36951: LD_INT 106
36953: PUSH
36954: LD_INT 108
36956: PUSH
36957: LD_INT 109
36959: PUSH
36960: LD_INT 112
36962: PUSH
36963: LD_INT 116
36965: PUSH
36966: LD_INT 117
36968: PUSH
36969: LD_INT 118
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: ST_TO_ADDR
36989: GO 39244
36991: LD_INT 9
36993: DOUBLE
36994: EQUAL
36995: IFTRUE 36999
36997: GO 37147
36999: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
37000: LD_ADDR_VAR 0 2
37004: PUSH
37005: LD_INT 2
37007: PUSH
37008: LD_INT 4
37010: PUSH
37011: LD_INT 5
37013: PUSH
37014: LD_INT 6
37016: PUSH
37017: LD_INT 7
37019: PUSH
37020: LD_INT 8
37022: PUSH
37023: LD_INT 11
37025: PUSH
37026: LD_INT 12
37028: PUSH
37029: LD_INT 15
37031: PUSH
37032: LD_INT 16
37034: PUSH
37035: LD_INT 20
37037: PUSH
37038: LD_INT 21
37040: PUSH
37041: LD_INT 22
37043: PUSH
37044: LD_INT 23
37046: PUSH
37047: LD_INT 25
37049: PUSH
37050: LD_INT 26
37052: PUSH
37053: LD_INT 28
37055: PUSH
37056: LD_INT 30
37058: PUSH
37059: LD_INT 31
37061: PUSH
37062: LD_INT 32
37064: PUSH
37065: LD_INT 36
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: PUSH
37091: LD_INT 101
37093: PUSH
37094: LD_INT 102
37096: PUSH
37097: LD_INT 103
37099: PUSH
37100: LD_INT 105
37102: PUSH
37103: LD_INT 106
37105: PUSH
37106: LD_INT 108
37108: PUSH
37109: LD_INT 109
37111: PUSH
37112: LD_INT 112
37114: PUSH
37115: LD_INT 114
37117: PUSH
37118: LD_INT 116
37120: PUSH
37121: LD_INT 117
37123: PUSH
37124: LD_INT 118
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: LIST
37131: LIST
37132: LIST
37133: LIST
37134: LIST
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: ST_TO_ADDR
37145: GO 39244
37147: LD_INT 10
37149: DOUBLE
37150: EQUAL
37151: IFTRUE 37155
37153: GO 37351
37155: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
37156: LD_ADDR_VAR 0 2
37160: PUSH
37161: LD_INT 2
37163: PUSH
37164: LD_INT 4
37166: PUSH
37167: LD_INT 5
37169: PUSH
37170: LD_INT 6
37172: PUSH
37173: LD_INT 7
37175: PUSH
37176: LD_INT 8
37178: PUSH
37179: LD_INT 9
37181: PUSH
37182: LD_INT 10
37184: PUSH
37185: LD_INT 11
37187: PUSH
37188: LD_INT 12
37190: PUSH
37191: LD_INT 13
37193: PUSH
37194: LD_INT 14
37196: PUSH
37197: LD_INT 15
37199: PUSH
37200: LD_INT 16
37202: PUSH
37203: LD_INT 17
37205: PUSH
37206: LD_INT 18
37208: PUSH
37209: LD_INT 19
37211: PUSH
37212: LD_INT 20
37214: PUSH
37215: LD_INT 21
37217: PUSH
37218: LD_INT 22
37220: PUSH
37221: LD_INT 23
37223: PUSH
37224: LD_INT 24
37226: PUSH
37227: LD_INT 25
37229: PUSH
37230: LD_INT 26
37232: PUSH
37233: LD_INT 28
37235: PUSH
37236: LD_INT 30
37238: PUSH
37239: LD_INT 31
37241: PUSH
37242: LD_INT 32
37244: PUSH
37245: LD_INT 36
37247: PUSH
37248: EMPTY
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: PUSH
37279: LD_INT 101
37281: PUSH
37282: LD_INT 102
37284: PUSH
37285: LD_INT 103
37287: PUSH
37288: LD_INT 104
37290: PUSH
37291: LD_INT 105
37293: PUSH
37294: LD_INT 106
37296: PUSH
37297: LD_INT 107
37299: PUSH
37300: LD_INT 108
37302: PUSH
37303: LD_INT 109
37305: PUSH
37306: LD_INT 110
37308: PUSH
37309: LD_INT 111
37311: PUSH
37312: LD_INT 112
37314: PUSH
37315: LD_INT 114
37317: PUSH
37318: LD_INT 116
37320: PUSH
37321: LD_INT 117
37323: PUSH
37324: LD_INT 118
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: LIST
37332: LIST
37333: LIST
37334: LIST
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: ST_TO_ADDR
37349: GO 39244
37351: LD_INT 11
37353: DOUBLE
37354: EQUAL
37355: IFTRUE 37359
37357: GO 37563
37359: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37360: LD_ADDR_VAR 0 2
37364: PUSH
37365: LD_INT 2
37367: PUSH
37368: LD_INT 3
37370: PUSH
37371: LD_INT 4
37373: PUSH
37374: LD_INT 5
37376: PUSH
37377: LD_INT 6
37379: PUSH
37380: LD_INT 7
37382: PUSH
37383: LD_INT 8
37385: PUSH
37386: LD_INT 9
37388: PUSH
37389: LD_INT 10
37391: PUSH
37392: LD_INT 11
37394: PUSH
37395: LD_INT 12
37397: PUSH
37398: LD_INT 13
37400: PUSH
37401: LD_INT 14
37403: PUSH
37404: LD_INT 15
37406: PUSH
37407: LD_INT 16
37409: PUSH
37410: LD_INT 17
37412: PUSH
37413: LD_INT 18
37415: PUSH
37416: LD_INT 19
37418: PUSH
37419: LD_INT 20
37421: PUSH
37422: LD_INT 21
37424: PUSH
37425: LD_INT 22
37427: PUSH
37428: LD_INT 23
37430: PUSH
37431: LD_INT 24
37433: PUSH
37434: LD_INT 25
37436: PUSH
37437: LD_INT 26
37439: PUSH
37440: LD_INT 28
37442: PUSH
37443: LD_INT 30
37445: PUSH
37446: LD_INT 31
37448: PUSH
37449: LD_INT 32
37451: PUSH
37452: LD_INT 34
37454: PUSH
37455: LD_INT 36
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 101
37493: PUSH
37494: LD_INT 102
37496: PUSH
37497: LD_INT 103
37499: PUSH
37500: LD_INT 104
37502: PUSH
37503: LD_INT 105
37505: PUSH
37506: LD_INT 106
37508: PUSH
37509: LD_INT 107
37511: PUSH
37512: LD_INT 108
37514: PUSH
37515: LD_INT 109
37517: PUSH
37518: LD_INT 110
37520: PUSH
37521: LD_INT 111
37523: PUSH
37524: LD_INT 112
37526: PUSH
37527: LD_INT 114
37529: PUSH
37530: LD_INT 116
37532: PUSH
37533: LD_INT 117
37535: PUSH
37536: LD_INT 118
37538: PUSH
37539: EMPTY
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: ST_TO_ADDR
37561: GO 39244
37563: LD_INT 12
37565: DOUBLE
37566: EQUAL
37567: IFTRUE 37571
37569: GO 37791
37571: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37572: LD_ADDR_VAR 0 2
37576: PUSH
37577: LD_INT 1
37579: PUSH
37580: LD_INT 2
37582: PUSH
37583: LD_INT 3
37585: PUSH
37586: LD_INT 4
37588: PUSH
37589: LD_INT 5
37591: PUSH
37592: LD_INT 6
37594: PUSH
37595: LD_INT 7
37597: PUSH
37598: LD_INT 8
37600: PUSH
37601: LD_INT 9
37603: PUSH
37604: LD_INT 10
37606: PUSH
37607: LD_INT 11
37609: PUSH
37610: LD_INT 12
37612: PUSH
37613: LD_INT 13
37615: PUSH
37616: LD_INT 14
37618: PUSH
37619: LD_INT 15
37621: PUSH
37622: LD_INT 16
37624: PUSH
37625: LD_INT 17
37627: PUSH
37628: LD_INT 18
37630: PUSH
37631: LD_INT 19
37633: PUSH
37634: LD_INT 20
37636: PUSH
37637: LD_INT 21
37639: PUSH
37640: LD_INT 22
37642: PUSH
37643: LD_INT 23
37645: PUSH
37646: LD_INT 24
37648: PUSH
37649: LD_INT 25
37651: PUSH
37652: LD_INT 26
37654: PUSH
37655: LD_INT 27
37657: PUSH
37658: LD_INT 28
37660: PUSH
37661: LD_INT 30
37663: PUSH
37664: LD_INT 31
37666: PUSH
37667: LD_INT 32
37669: PUSH
37670: LD_INT 33
37672: PUSH
37673: LD_INT 34
37675: PUSH
37676: LD_INT 36
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: PUSH
37715: LD_INT 101
37717: PUSH
37718: LD_INT 102
37720: PUSH
37721: LD_INT 103
37723: PUSH
37724: LD_INT 104
37726: PUSH
37727: LD_INT 105
37729: PUSH
37730: LD_INT 106
37732: PUSH
37733: LD_INT 107
37735: PUSH
37736: LD_INT 108
37738: PUSH
37739: LD_INT 109
37741: PUSH
37742: LD_INT 110
37744: PUSH
37745: LD_INT 111
37747: PUSH
37748: LD_INT 112
37750: PUSH
37751: LD_INT 113
37753: PUSH
37754: LD_INT 114
37756: PUSH
37757: LD_INT 116
37759: PUSH
37760: LD_INT 117
37762: PUSH
37763: LD_INT 118
37765: PUSH
37766: EMPTY
37767: LIST
37768: LIST
37769: LIST
37770: LIST
37771: LIST
37772: LIST
37773: LIST
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: ST_TO_ADDR
37789: GO 39244
37791: LD_INT 13
37793: DOUBLE
37794: EQUAL
37795: IFTRUE 37799
37797: GO 38007
37799: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37800: LD_ADDR_VAR 0 2
37804: PUSH
37805: LD_INT 1
37807: PUSH
37808: LD_INT 2
37810: PUSH
37811: LD_INT 3
37813: PUSH
37814: LD_INT 4
37816: PUSH
37817: LD_INT 5
37819: PUSH
37820: LD_INT 8
37822: PUSH
37823: LD_INT 9
37825: PUSH
37826: LD_INT 10
37828: PUSH
37829: LD_INT 11
37831: PUSH
37832: LD_INT 12
37834: PUSH
37835: LD_INT 14
37837: PUSH
37838: LD_INT 15
37840: PUSH
37841: LD_INT 16
37843: PUSH
37844: LD_INT 17
37846: PUSH
37847: LD_INT 18
37849: PUSH
37850: LD_INT 19
37852: PUSH
37853: LD_INT 20
37855: PUSH
37856: LD_INT 21
37858: PUSH
37859: LD_INT 22
37861: PUSH
37862: LD_INT 23
37864: PUSH
37865: LD_INT 24
37867: PUSH
37868: LD_INT 25
37870: PUSH
37871: LD_INT 26
37873: PUSH
37874: LD_INT 27
37876: PUSH
37877: LD_INT 28
37879: PUSH
37880: LD_INT 30
37882: PUSH
37883: LD_INT 31
37885: PUSH
37886: LD_INT 32
37888: PUSH
37889: LD_INT 33
37891: PUSH
37892: LD_INT 34
37894: PUSH
37895: LD_INT 36
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: PUSH
37931: LD_INT 101
37933: PUSH
37934: LD_INT 102
37936: PUSH
37937: LD_INT 103
37939: PUSH
37940: LD_INT 104
37942: PUSH
37943: LD_INT 105
37945: PUSH
37946: LD_INT 106
37948: PUSH
37949: LD_INT 107
37951: PUSH
37952: LD_INT 108
37954: PUSH
37955: LD_INT 109
37957: PUSH
37958: LD_INT 110
37960: PUSH
37961: LD_INT 111
37963: PUSH
37964: LD_INT 112
37966: PUSH
37967: LD_INT 113
37969: PUSH
37970: LD_INT 114
37972: PUSH
37973: LD_INT 116
37975: PUSH
37976: LD_INT 117
37978: PUSH
37979: LD_INT 118
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: ST_TO_ADDR
38005: GO 39244
38007: LD_INT 14
38009: DOUBLE
38010: EQUAL
38011: IFTRUE 38015
38013: GO 38239
38015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
38016: LD_ADDR_VAR 0 2
38020: PUSH
38021: LD_INT 1
38023: PUSH
38024: LD_INT 2
38026: PUSH
38027: LD_INT 3
38029: PUSH
38030: LD_INT 4
38032: PUSH
38033: LD_INT 5
38035: PUSH
38036: LD_INT 6
38038: PUSH
38039: LD_INT 7
38041: PUSH
38042: LD_INT 8
38044: PUSH
38045: LD_INT 9
38047: PUSH
38048: LD_INT 10
38050: PUSH
38051: LD_INT 11
38053: PUSH
38054: LD_INT 12
38056: PUSH
38057: LD_INT 13
38059: PUSH
38060: LD_INT 14
38062: PUSH
38063: LD_INT 15
38065: PUSH
38066: LD_INT 16
38068: PUSH
38069: LD_INT 17
38071: PUSH
38072: LD_INT 18
38074: PUSH
38075: LD_INT 19
38077: PUSH
38078: LD_INT 20
38080: PUSH
38081: LD_INT 21
38083: PUSH
38084: LD_INT 22
38086: PUSH
38087: LD_INT 23
38089: PUSH
38090: LD_INT 24
38092: PUSH
38093: LD_INT 25
38095: PUSH
38096: LD_INT 26
38098: PUSH
38099: LD_INT 27
38101: PUSH
38102: LD_INT 28
38104: PUSH
38105: LD_INT 29
38107: PUSH
38108: LD_INT 30
38110: PUSH
38111: LD_INT 31
38113: PUSH
38114: LD_INT 32
38116: PUSH
38117: LD_INT 33
38119: PUSH
38120: LD_INT 34
38122: PUSH
38123: LD_INT 36
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 101
38165: PUSH
38166: LD_INT 102
38168: PUSH
38169: LD_INT 103
38171: PUSH
38172: LD_INT 104
38174: PUSH
38175: LD_INT 105
38177: PUSH
38178: LD_INT 106
38180: PUSH
38181: LD_INT 107
38183: PUSH
38184: LD_INT 108
38186: PUSH
38187: LD_INT 109
38189: PUSH
38190: LD_INT 110
38192: PUSH
38193: LD_INT 111
38195: PUSH
38196: LD_INT 112
38198: PUSH
38199: LD_INT 113
38201: PUSH
38202: LD_INT 114
38204: PUSH
38205: LD_INT 116
38207: PUSH
38208: LD_INT 117
38210: PUSH
38211: LD_INT 118
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: ST_TO_ADDR
38237: GO 39244
38239: LD_INT 15
38241: DOUBLE
38242: EQUAL
38243: IFTRUE 38247
38245: GO 38471
38247: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
38248: LD_ADDR_VAR 0 2
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: LD_INT 2
38258: PUSH
38259: LD_INT 3
38261: PUSH
38262: LD_INT 4
38264: PUSH
38265: LD_INT 5
38267: PUSH
38268: LD_INT 6
38270: PUSH
38271: LD_INT 7
38273: PUSH
38274: LD_INT 8
38276: PUSH
38277: LD_INT 9
38279: PUSH
38280: LD_INT 10
38282: PUSH
38283: LD_INT 11
38285: PUSH
38286: LD_INT 12
38288: PUSH
38289: LD_INT 13
38291: PUSH
38292: LD_INT 14
38294: PUSH
38295: LD_INT 15
38297: PUSH
38298: LD_INT 16
38300: PUSH
38301: LD_INT 17
38303: PUSH
38304: LD_INT 18
38306: PUSH
38307: LD_INT 19
38309: PUSH
38310: LD_INT 20
38312: PUSH
38313: LD_INT 21
38315: PUSH
38316: LD_INT 22
38318: PUSH
38319: LD_INT 23
38321: PUSH
38322: LD_INT 24
38324: PUSH
38325: LD_INT 25
38327: PUSH
38328: LD_INT 26
38330: PUSH
38331: LD_INT 27
38333: PUSH
38334: LD_INT 28
38336: PUSH
38337: LD_INT 29
38339: PUSH
38340: LD_INT 30
38342: PUSH
38343: LD_INT 31
38345: PUSH
38346: LD_INT 32
38348: PUSH
38349: LD_INT 33
38351: PUSH
38352: LD_INT 34
38354: PUSH
38355: LD_INT 36
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: PUSH
38395: LD_INT 101
38397: PUSH
38398: LD_INT 102
38400: PUSH
38401: LD_INT 103
38403: PUSH
38404: LD_INT 104
38406: PUSH
38407: LD_INT 105
38409: PUSH
38410: LD_INT 106
38412: PUSH
38413: LD_INT 107
38415: PUSH
38416: LD_INT 108
38418: PUSH
38419: LD_INT 109
38421: PUSH
38422: LD_INT 110
38424: PUSH
38425: LD_INT 111
38427: PUSH
38428: LD_INT 112
38430: PUSH
38431: LD_INT 113
38433: PUSH
38434: LD_INT 114
38436: PUSH
38437: LD_INT 116
38439: PUSH
38440: LD_INT 117
38442: PUSH
38443: LD_INT 118
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: ST_TO_ADDR
38469: GO 39244
38471: LD_INT 16
38473: DOUBLE
38474: EQUAL
38475: IFTRUE 38479
38477: GO 38615
38479: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38480: LD_ADDR_VAR 0 2
38484: PUSH
38485: LD_INT 2
38487: PUSH
38488: LD_INT 4
38490: PUSH
38491: LD_INT 5
38493: PUSH
38494: LD_INT 7
38496: PUSH
38497: LD_INT 11
38499: PUSH
38500: LD_INT 12
38502: PUSH
38503: LD_INT 15
38505: PUSH
38506: LD_INT 16
38508: PUSH
38509: LD_INT 20
38511: PUSH
38512: LD_INT 21
38514: PUSH
38515: LD_INT 22
38517: PUSH
38518: LD_INT 23
38520: PUSH
38521: LD_INT 25
38523: PUSH
38524: LD_INT 26
38526: PUSH
38527: LD_INT 30
38529: PUSH
38530: LD_INT 31
38532: PUSH
38533: LD_INT 32
38535: PUSH
38536: LD_INT 33
38538: PUSH
38539: LD_INT 34
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: LIST
38547: LIST
38548: LIST
38549: LIST
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 101
38565: PUSH
38566: LD_INT 102
38568: PUSH
38569: LD_INT 103
38571: PUSH
38572: LD_INT 106
38574: PUSH
38575: LD_INT 108
38577: PUSH
38578: LD_INT 112
38580: PUSH
38581: LD_INT 113
38583: PUSH
38584: LD_INT 114
38586: PUSH
38587: LD_INT 116
38589: PUSH
38590: LD_INT 117
38592: PUSH
38593: LD_INT 118
38595: PUSH
38596: EMPTY
38597: LIST
38598: LIST
38599: LIST
38600: LIST
38601: LIST
38602: LIST
38603: LIST
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: ST_TO_ADDR
38613: GO 39244
38615: LD_INT 17
38617: DOUBLE
38618: EQUAL
38619: IFTRUE 38623
38621: GO 38847
38623: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38624: LD_ADDR_VAR 0 2
38628: PUSH
38629: LD_INT 1
38631: PUSH
38632: LD_INT 2
38634: PUSH
38635: LD_INT 3
38637: PUSH
38638: LD_INT 4
38640: PUSH
38641: LD_INT 5
38643: PUSH
38644: LD_INT 6
38646: PUSH
38647: LD_INT 7
38649: PUSH
38650: LD_INT 8
38652: PUSH
38653: LD_INT 9
38655: PUSH
38656: LD_INT 10
38658: PUSH
38659: LD_INT 11
38661: PUSH
38662: LD_INT 12
38664: PUSH
38665: LD_INT 13
38667: PUSH
38668: LD_INT 14
38670: PUSH
38671: LD_INT 15
38673: PUSH
38674: LD_INT 16
38676: PUSH
38677: LD_INT 17
38679: PUSH
38680: LD_INT 18
38682: PUSH
38683: LD_INT 19
38685: PUSH
38686: LD_INT 20
38688: PUSH
38689: LD_INT 21
38691: PUSH
38692: LD_INT 22
38694: PUSH
38695: LD_INT 23
38697: PUSH
38698: LD_INT 24
38700: PUSH
38701: LD_INT 25
38703: PUSH
38704: LD_INT 26
38706: PUSH
38707: LD_INT 27
38709: PUSH
38710: LD_INT 28
38712: PUSH
38713: LD_INT 29
38715: PUSH
38716: LD_INT 30
38718: PUSH
38719: LD_INT 31
38721: PUSH
38722: LD_INT 32
38724: PUSH
38725: LD_INT 33
38727: PUSH
38728: LD_INT 34
38730: PUSH
38731: LD_INT 36
38733: PUSH
38734: EMPTY
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 101
38773: PUSH
38774: LD_INT 102
38776: PUSH
38777: LD_INT 103
38779: PUSH
38780: LD_INT 104
38782: PUSH
38783: LD_INT 105
38785: PUSH
38786: LD_INT 106
38788: PUSH
38789: LD_INT 107
38791: PUSH
38792: LD_INT 108
38794: PUSH
38795: LD_INT 109
38797: PUSH
38798: LD_INT 110
38800: PUSH
38801: LD_INT 111
38803: PUSH
38804: LD_INT 112
38806: PUSH
38807: LD_INT 113
38809: PUSH
38810: LD_INT 114
38812: PUSH
38813: LD_INT 116
38815: PUSH
38816: LD_INT 117
38818: PUSH
38819: LD_INT 118
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: ST_TO_ADDR
38845: GO 39244
38847: LD_INT 18
38849: DOUBLE
38850: EQUAL
38851: IFTRUE 38855
38853: GO 39003
38855: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38856: LD_ADDR_VAR 0 2
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: LD_INT 4
38866: PUSH
38867: LD_INT 5
38869: PUSH
38870: LD_INT 7
38872: PUSH
38873: LD_INT 11
38875: PUSH
38876: LD_INT 12
38878: PUSH
38879: LD_INT 15
38881: PUSH
38882: LD_INT 16
38884: PUSH
38885: LD_INT 20
38887: PUSH
38888: LD_INT 21
38890: PUSH
38891: LD_INT 22
38893: PUSH
38894: LD_INT 23
38896: PUSH
38897: LD_INT 25
38899: PUSH
38900: LD_INT 26
38902: PUSH
38903: LD_INT 30
38905: PUSH
38906: LD_INT 31
38908: PUSH
38909: LD_INT 32
38911: PUSH
38912: LD_INT 33
38914: PUSH
38915: LD_INT 34
38917: PUSH
38918: LD_INT 35
38920: PUSH
38921: LD_INT 36
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 101
38949: PUSH
38950: LD_INT 102
38952: PUSH
38953: LD_INT 103
38955: PUSH
38956: LD_INT 106
38958: PUSH
38959: LD_INT 108
38961: PUSH
38962: LD_INT 112
38964: PUSH
38965: LD_INT 113
38967: PUSH
38968: LD_INT 114
38970: PUSH
38971: LD_INT 115
38973: PUSH
38974: LD_INT 116
38976: PUSH
38977: LD_INT 117
38979: PUSH
38980: LD_INT 118
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: ST_TO_ADDR
39001: GO 39244
39003: LD_INT 19
39005: DOUBLE
39006: EQUAL
39007: IFTRUE 39011
39009: GO 39243
39011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
39012: LD_ADDR_VAR 0 2
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 2
39022: PUSH
39023: LD_INT 3
39025: PUSH
39026: LD_INT 4
39028: PUSH
39029: LD_INT 5
39031: PUSH
39032: LD_INT 6
39034: PUSH
39035: LD_INT 7
39037: PUSH
39038: LD_INT 8
39040: PUSH
39041: LD_INT 9
39043: PUSH
39044: LD_INT 10
39046: PUSH
39047: LD_INT 11
39049: PUSH
39050: LD_INT 12
39052: PUSH
39053: LD_INT 13
39055: PUSH
39056: LD_INT 14
39058: PUSH
39059: LD_INT 15
39061: PUSH
39062: LD_INT 16
39064: PUSH
39065: LD_INT 17
39067: PUSH
39068: LD_INT 18
39070: PUSH
39071: LD_INT 19
39073: PUSH
39074: LD_INT 20
39076: PUSH
39077: LD_INT 21
39079: PUSH
39080: LD_INT 22
39082: PUSH
39083: LD_INT 23
39085: PUSH
39086: LD_INT 24
39088: PUSH
39089: LD_INT 25
39091: PUSH
39092: LD_INT 26
39094: PUSH
39095: LD_INT 27
39097: PUSH
39098: LD_INT 28
39100: PUSH
39101: LD_INT 29
39103: PUSH
39104: LD_INT 30
39106: PUSH
39107: LD_INT 31
39109: PUSH
39110: LD_INT 32
39112: PUSH
39113: LD_INT 33
39115: PUSH
39116: LD_INT 34
39118: PUSH
39119: LD_INT 35
39121: PUSH
39122: LD_INT 36
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 101
39165: PUSH
39166: LD_INT 102
39168: PUSH
39169: LD_INT 103
39171: PUSH
39172: LD_INT 104
39174: PUSH
39175: LD_INT 105
39177: PUSH
39178: LD_INT 106
39180: PUSH
39181: LD_INT 107
39183: PUSH
39184: LD_INT 108
39186: PUSH
39187: LD_INT 109
39189: PUSH
39190: LD_INT 110
39192: PUSH
39193: LD_INT 111
39195: PUSH
39196: LD_INT 112
39198: PUSH
39199: LD_INT 113
39201: PUSH
39202: LD_INT 114
39204: PUSH
39205: LD_INT 115
39207: PUSH
39208: LD_INT 116
39210: PUSH
39211: LD_INT 117
39213: PUSH
39214: LD_INT 118
39216: PUSH
39217: EMPTY
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: ST_TO_ADDR
39241: GO 39244
39243: POP
// end else
39244: GO 39475
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
39246: LD_ADDR_VAR 0 2
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: LD_INT 3
39259: PUSH
39260: LD_INT 4
39262: PUSH
39263: LD_INT 5
39265: PUSH
39266: LD_INT 6
39268: PUSH
39269: LD_INT 7
39271: PUSH
39272: LD_INT 8
39274: PUSH
39275: LD_INT 9
39277: PUSH
39278: LD_INT 10
39280: PUSH
39281: LD_INT 11
39283: PUSH
39284: LD_INT 12
39286: PUSH
39287: LD_INT 13
39289: PUSH
39290: LD_INT 14
39292: PUSH
39293: LD_INT 15
39295: PUSH
39296: LD_INT 16
39298: PUSH
39299: LD_INT 17
39301: PUSH
39302: LD_INT 18
39304: PUSH
39305: LD_INT 19
39307: PUSH
39308: LD_INT 20
39310: PUSH
39311: LD_INT 21
39313: PUSH
39314: LD_INT 22
39316: PUSH
39317: LD_INT 23
39319: PUSH
39320: LD_INT 24
39322: PUSH
39323: LD_INT 25
39325: PUSH
39326: LD_INT 26
39328: PUSH
39329: LD_INT 27
39331: PUSH
39332: LD_INT 28
39334: PUSH
39335: LD_INT 29
39337: PUSH
39338: LD_INT 30
39340: PUSH
39341: LD_INT 31
39343: PUSH
39344: LD_INT 32
39346: PUSH
39347: LD_INT 33
39349: PUSH
39350: LD_INT 34
39352: PUSH
39353: LD_INT 35
39355: PUSH
39356: LD_INT 36
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: PUSH
39397: LD_INT 101
39399: PUSH
39400: LD_INT 102
39402: PUSH
39403: LD_INT 103
39405: PUSH
39406: LD_INT 104
39408: PUSH
39409: LD_INT 105
39411: PUSH
39412: LD_INT 106
39414: PUSH
39415: LD_INT 107
39417: PUSH
39418: LD_INT 108
39420: PUSH
39421: LD_INT 109
39423: PUSH
39424: LD_INT 110
39426: PUSH
39427: LD_INT 111
39429: PUSH
39430: LD_INT 112
39432: PUSH
39433: LD_INT 113
39435: PUSH
39436: LD_INT 114
39438: PUSH
39439: LD_INT 115
39441: PUSH
39442: LD_INT 116
39444: PUSH
39445: LD_INT 117
39447: PUSH
39448: LD_INT 118
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: ST_TO_ADDR
// if result then
39475: LD_VAR 0 2
39479: IFFALSE 40265
// begin normal :=  ;
39481: LD_ADDR_VAR 0 5
39485: PUSH
39486: LD_STRING 
39488: ST_TO_ADDR
// hardcore :=  ;
39489: LD_ADDR_VAR 0 6
39493: PUSH
39494: LD_STRING 
39496: ST_TO_ADDR
// active :=  ;
39497: LD_ADDR_VAR 0 7
39501: PUSH
39502: LD_STRING 
39504: ST_TO_ADDR
// for i = 1 to normalCounter do
39505: LD_ADDR_VAR 0 8
39509: PUSH
39510: DOUBLE
39511: LD_INT 1
39513: DEC
39514: ST_TO_ADDR
39515: LD_EXP 88
39519: PUSH
39520: FOR_TO
39521: IFFALSE 39622
// begin tmp := 0 ;
39523: LD_ADDR_VAR 0 3
39527: PUSH
39528: LD_STRING 0
39530: ST_TO_ADDR
// if result [ 1 ] then
39531: LD_VAR 0 2
39535: PUSH
39536: LD_INT 1
39538: ARRAY
39539: IFFALSE 39604
// if result [ 1 ] [ 1 ] = i then
39541: LD_VAR 0 2
39545: PUSH
39546: LD_INT 1
39548: ARRAY
39549: PUSH
39550: LD_INT 1
39552: ARRAY
39553: PUSH
39554: LD_VAR 0 8
39558: EQUAL
39559: IFFALSE 39604
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39561: LD_ADDR_VAR 0 2
39565: PUSH
39566: LD_VAR 0 2
39570: PPUSH
39571: LD_INT 1
39573: PPUSH
39574: LD_VAR 0 2
39578: PUSH
39579: LD_INT 1
39581: ARRAY
39582: PPUSH
39583: LD_INT 1
39585: PPUSH
39586: CALL_OW 3
39590: PPUSH
39591: CALL_OW 1
39595: ST_TO_ADDR
// tmp := 1 ;
39596: LD_ADDR_VAR 0 3
39600: PUSH
39601: LD_STRING 1
39603: ST_TO_ADDR
// end ; normal := normal & tmp ;
39604: LD_ADDR_VAR 0 5
39608: PUSH
39609: LD_VAR 0 5
39613: PUSH
39614: LD_VAR 0 3
39618: STR
39619: ST_TO_ADDR
// end ;
39620: GO 39520
39622: POP
39623: POP
// for i = 1 to hardcoreCounter do
39624: LD_ADDR_VAR 0 8
39628: PUSH
39629: DOUBLE
39630: LD_INT 1
39632: DEC
39633: ST_TO_ADDR
39634: LD_EXP 89
39638: PUSH
39639: FOR_TO
39640: IFFALSE 39745
// begin tmp := 0 ;
39642: LD_ADDR_VAR 0 3
39646: PUSH
39647: LD_STRING 0
39649: ST_TO_ADDR
// if result [ 2 ] then
39650: LD_VAR 0 2
39654: PUSH
39655: LD_INT 2
39657: ARRAY
39658: IFFALSE 39727
// if result [ 2 ] [ 1 ] = 100 + i then
39660: LD_VAR 0 2
39664: PUSH
39665: LD_INT 2
39667: ARRAY
39668: PUSH
39669: LD_INT 1
39671: ARRAY
39672: PUSH
39673: LD_INT 100
39675: PUSH
39676: LD_VAR 0 8
39680: PLUS
39681: EQUAL
39682: IFFALSE 39727
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39684: LD_ADDR_VAR 0 2
39688: PUSH
39689: LD_VAR 0 2
39693: PPUSH
39694: LD_INT 2
39696: PPUSH
39697: LD_VAR 0 2
39701: PUSH
39702: LD_INT 2
39704: ARRAY
39705: PPUSH
39706: LD_INT 1
39708: PPUSH
39709: CALL_OW 3
39713: PPUSH
39714: CALL_OW 1
39718: ST_TO_ADDR
// tmp := 1 ;
39719: LD_ADDR_VAR 0 3
39723: PUSH
39724: LD_STRING 1
39726: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39727: LD_ADDR_VAR 0 6
39731: PUSH
39732: LD_VAR 0 6
39736: PUSH
39737: LD_VAR 0 3
39741: STR
39742: ST_TO_ADDR
// end ;
39743: GO 39639
39745: POP
39746: POP
// if isGameLoad then
39747: LD_VAR 0 1
39751: IFFALSE 40226
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39753: LD_ADDR_VAR 0 4
39757: PUSH
39758: LD_EXP 92
39762: PUSH
39763: LD_EXP 91
39767: PUSH
39768: LD_EXP 93
39772: PUSH
39773: LD_EXP 90
39777: PUSH
39778: LD_EXP 94
39782: PUSH
39783: LD_EXP 95
39787: PUSH
39788: LD_EXP 96
39792: PUSH
39793: LD_EXP 97
39797: PUSH
39798: LD_EXP 98
39802: PUSH
39803: LD_EXP 99
39807: PUSH
39808: LD_EXP 100
39812: PUSH
39813: LD_EXP 101
39817: PUSH
39818: LD_EXP 102
39822: PUSH
39823: LD_EXP 103
39827: PUSH
39828: LD_EXP 111
39832: PUSH
39833: LD_EXP 112
39837: PUSH
39838: LD_EXP 113
39842: PUSH
39843: LD_EXP 114
39847: PUSH
39848: LD_EXP 116
39852: PUSH
39853: LD_EXP 117
39857: PUSH
39858: LD_EXP 118
39862: PUSH
39863: LD_EXP 121
39867: PUSH
39868: LD_EXP 123
39872: PUSH
39873: LD_EXP 124
39877: PUSH
39878: LD_EXP 125
39882: PUSH
39883: LD_EXP 127
39887: PUSH
39888: LD_EXP 128
39892: PUSH
39893: LD_EXP 131
39897: PUSH
39898: LD_EXP 132
39902: PUSH
39903: LD_EXP 133
39907: PUSH
39908: LD_EXP 134
39912: PUSH
39913: LD_EXP 135
39917: PUSH
39918: LD_EXP 136
39922: PUSH
39923: LD_EXP 137
39927: PUSH
39928: LD_EXP 138
39932: PUSH
39933: LD_EXP 139
39937: PUSH
39938: LD_EXP 104
39942: PUSH
39943: LD_EXP 105
39947: PUSH
39948: LD_EXP 108
39952: PUSH
39953: LD_EXP 109
39957: PUSH
39958: LD_EXP 110
39962: PUSH
39963: LD_EXP 106
39967: PUSH
39968: LD_EXP 107
39972: PUSH
39973: LD_EXP 115
39977: PUSH
39978: LD_EXP 119
39982: PUSH
39983: LD_EXP 120
39987: PUSH
39988: LD_EXP 122
39992: PUSH
39993: LD_EXP 126
39997: PUSH
39998: LD_EXP 129
40002: PUSH
40003: LD_EXP 130
40007: PUSH
40008: LD_EXP 140
40012: PUSH
40013: LD_EXP 141
40017: PUSH
40018: LD_EXP 142
40022: PUSH
40023: LD_EXP 143
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: ST_TO_ADDR
// tmp :=  ;
40084: LD_ADDR_VAR 0 3
40088: PUSH
40089: LD_STRING 
40091: ST_TO_ADDR
// for i = 1 to normalCounter do
40092: LD_ADDR_VAR 0 8
40096: PUSH
40097: DOUBLE
40098: LD_INT 1
40100: DEC
40101: ST_TO_ADDR
40102: LD_EXP 88
40106: PUSH
40107: FOR_TO
40108: IFFALSE 40144
// begin if flags [ i ] then
40110: LD_VAR 0 4
40114: PUSH
40115: LD_VAR 0 8
40119: ARRAY
40120: IFFALSE 40142
// tmp := tmp & i & ; ;
40122: LD_ADDR_VAR 0 3
40126: PUSH
40127: LD_VAR 0 3
40131: PUSH
40132: LD_VAR 0 8
40136: STR
40137: PUSH
40138: LD_STRING ;
40140: STR
40141: ST_TO_ADDR
// end ;
40142: GO 40107
40144: POP
40145: POP
// for i = 1 to hardcoreCounter do
40146: LD_ADDR_VAR 0 8
40150: PUSH
40151: DOUBLE
40152: LD_INT 1
40154: DEC
40155: ST_TO_ADDR
40156: LD_EXP 89
40160: PUSH
40161: FOR_TO
40162: IFFALSE 40208
// begin if flags [ normalCounter + i ] then
40164: LD_VAR 0 4
40168: PUSH
40169: LD_EXP 88
40173: PUSH
40174: LD_VAR 0 8
40178: PLUS
40179: ARRAY
40180: IFFALSE 40206
// tmp := tmp & ( 100 + i ) & ; ;
40182: LD_ADDR_VAR 0 3
40186: PUSH
40187: LD_VAR 0 3
40191: PUSH
40192: LD_INT 100
40194: PUSH
40195: LD_VAR 0 8
40199: PLUS
40200: STR
40201: PUSH
40202: LD_STRING ;
40204: STR
40205: ST_TO_ADDR
// end ;
40206: GO 40161
40208: POP
40209: POP
// if tmp then
40210: LD_VAR 0 3
40214: IFFALSE 40226
// active := tmp ;
40216: LD_ADDR_VAR 0 7
40220: PUSH
40221: LD_VAR 0 3
40225: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
40226: LD_STRING getStreamItemsFromMission("
40228: PUSH
40229: LD_VAR 0 5
40233: STR
40234: PUSH
40235: LD_STRING ","
40237: STR
40238: PUSH
40239: LD_VAR 0 6
40243: STR
40244: PUSH
40245: LD_STRING ","
40247: STR
40248: PUSH
40249: LD_VAR 0 7
40253: STR
40254: PUSH
40255: LD_STRING ")
40257: STR
40258: PPUSH
40259: CALL_OW 559
// end else
40263: GO 40272
// ToLua ( getStreamItemsFromMission("","","") ) ;
40265: LD_STRING getStreamItemsFromMission("","","")
40267: PPUSH
40268: CALL_OW 559
// end ;
40272: LD_VAR 0 2
40276: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
40277: LD_EXP 87
40281: IFFALSE 40289
40283: PUSH
40284: LD_EXP 92
40288: AND
40289: IFFALSE 40413
40291: GO 40293
40293: DISABLE
40294: LD_INT 0
40296: PPUSH
40297: PPUSH
// begin enable ;
40298: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
40299: LD_ADDR_VAR 0 2
40303: PUSH
40304: LD_INT 22
40306: PUSH
40307: LD_OWVAR 2
40311: PUSH
40312: EMPTY
40313: LIST
40314: LIST
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: LD_INT 34
40321: PUSH
40322: LD_INT 7
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 34
40331: PUSH
40332: LD_INT 45
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 34
40341: PUSH
40342: LD_INT 28
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 34
40351: PUSH
40352: LD_INT 47
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PPUSH
40370: CALL_OW 69
40374: ST_TO_ADDR
// if not tmp then
40375: LD_VAR 0 2
40379: NOT
40380: IFFALSE 40384
// exit ;
40382: GO 40413
// for i in tmp do
40384: LD_ADDR_VAR 0 1
40388: PUSH
40389: LD_VAR 0 2
40393: PUSH
40394: FOR_IN
40395: IFFALSE 40411
// begin SetLives ( i , 0 ) ;
40397: LD_VAR 0 1
40401: PPUSH
40402: LD_INT 0
40404: PPUSH
40405: CALL_OW 234
// end ;
40409: GO 40394
40411: POP
40412: POP
// end ;
40413: PPOPN 2
40415: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40416: LD_EXP 87
40420: IFFALSE 40428
40422: PUSH
40423: LD_EXP 93
40427: AND
40428: IFFALSE 40512
40430: GO 40432
40432: DISABLE
40433: LD_INT 0
40435: PPUSH
40436: PPUSH
// begin enable ;
40437: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40438: LD_ADDR_VAR 0 2
40442: PUSH
40443: LD_INT 22
40445: PUSH
40446: LD_OWVAR 2
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 32
40457: PUSH
40458: LD_INT 3
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PPUSH
40469: CALL_OW 69
40473: ST_TO_ADDR
// if not tmp then
40474: LD_VAR 0 2
40478: NOT
40479: IFFALSE 40483
// exit ;
40481: GO 40512
// for i in tmp do
40483: LD_ADDR_VAR 0 1
40487: PUSH
40488: LD_VAR 0 2
40492: PUSH
40493: FOR_IN
40494: IFFALSE 40510
// begin SetLives ( i , 0 ) ;
40496: LD_VAR 0 1
40500: PPUSH
40501: LD_INT 0
40503: PPUSH
40504: CALL_OW 234
// end ;
40508: GO 40493
40510: POP
40511: POP
// end ;
40512: PPOPN 2
40514: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40515: LD_EXP 87
40519: IFFALSE 40527
40521: PUSH
40522: LD_EXP 90
40526: AND
40527: IFFALSE 40620
40529: GO 40531
40531: DISABLE
40532: LD_INT 0
40534: PPUSH
// begin enable ;
40535: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40536: LD_ADDR_VAR 0 1
40540: PUSH
40541: LD_INT 22
40543: PUSH
40544: LD_OWVAR 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: LD_INT 25
40558: PUSH
40559: LD_INT 5
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: PUSH
40566: LD_INT 25
40568: PUSH
40569: LD_INT 9
40571: PUSH
40572: EMPTY
40573: LIST
40574: LIST
40575: PUSH
40576: LD_INT 25
40578: PUSH
40579: LD_INT 8
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: LIST
40590: LIST
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PPUSH
40596: CALL_OW 69
40600: PUSH
40601: FOR_IN
40602: IFFALSE 40618
// begin SetClass ( i , 1 ) ;
40604: LD_VAR 0 1
40608: PPUSH
40609: LD_INT 1
40611: PPUSH
40612: CALL_OW 336
// end ;
40616: GO 40601
40618: POP
40619: POP
// end ;
40620: PPOPN 1
40622: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40623: LD_EXP 87
40627: IFFALSE 40635
40629: PUSH
40630: LD_EXP 91
40634: AND
40635: IFFALSE 40647
40637: PUSH
40638: LD_OWVAR 65
40642: PUSH
40643: LD_INT 7
40645: LESS
40646: AND
40647: IFFALSE 40661
40649: GO 40651
40651: DISABLE
// begin enable ;
40652: ENABLE
// game_speed := 7 ;
40653: LD_ADDR_OWVAR 65
40657: PUSH
40658: LD_INT 7
40660: ST_TO_ADDR
// end ;
40661: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40662: LD_EXP 87
40666: IFFALSE 40674
40668: PUSH
40669: LD_EXP 94
40673: AND
40674: IFFALSE 40876
40676: GO 40678
40678: DISABLE
40679: LD_INT 0
40681: PPUSH
40682: PPUSH
40683: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40684: LD_ADDR_VAR 0 3
40688: PUSH
40689: LD_INT 81
40691: PUSH
40692: LD_OWVAR 2
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 21
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: EMPTY
40712: LIST
40713: LIST
40714: PPUSH
40715: CALL_OW 69
40719: ST_TO_ADDR
// if not tmp then
40720: LD_VAR 0 3
40724: NOT
40725: IFFALSE 40729
// exit ;
40727: GO 40876
// if tmp > 5 then
40729: LD_VAR 0 3
40733: PUSH
40734: LD_INT 5
40736: GREATER
40737: IFFALSE 40749
// k := 5 else
40739: LD_ADDR_VAR 0 2
40743: PUSH
40744: LD_INT 5
40746: ST_TO_ADDR
40747: GO 40759
// k := tmp ;
40749: LD_ADDR_VAR 0 2
40753: PUSH
40754: LD_VAR 0 3
40758: ST_TO_ADDR
// for i := 1 to k do
40759: LD_ADDR_VAR 0 1
40763: PUSH
40764: DOUBLE
40765: LD_INT 1
40767: DEC
40768: ST_TO_ADDR
40769: LD_VAR 0 2
40773: PUSH
40774: FOR_TO
40775: IFFALSE 40874
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40777: LD_VAR 0 3
40781: PUSH
40782: LD_VAR 0 1
40786: ARRAY
40787: PPUSH
40788: LD_VAR 0 1
40792: PUSH
40793: LD_INT 4
40795: MOD
40796: PUSH
40797: LD_INT 1
40799: PLUS
40800: PPUSH
40801: CALL_OW 259
40805: PUSH
40806: LD_INT 10
40808: LESS
40809: IFFALSE 40872
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40811: LD_VAR 0 3
40815: PUSH
40816: LD_VAR 0 1
40820: ARRAY
40821: PPUSH
40822: LD_VAR 0 1
40826: PUSH
40827: LD_INT 4
40829: MOD
40830: PUSH
40831: LD_INT 1
40833: PLUS
40834: PPUSH
40835: LD_VAR 0 3
40839: PUSH
40840: LD_VAR 0 1
40844: ARRAY
40845: PPUSH
40846: LD_VAR 0 1
40850: PUSH
40851: LD_INT 4
40853: MOD
40854: PUSH
40855: LD_INT 1
40857: PLUS
40858: PPUSH
40859: CALL_OW 259
40863: PUSH
40864: LD_INT 1
40866: PLUS
40867: PPUSH
40868: CALL_OW 237
40872: GO 40774
40874: POP
40875: POP
// end ;
40876: PPOPN 3
40878: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40879: LD_EXP 87
40883: IFFALSE 40891
40885: PUSH
40886: LD_EXP 95
40890: AND
40891: IFFALSE 40911
40893: GO 40895
40895: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40896: LD_INT 4
40898: PPUSH
40899: LD_OWVAR 2
40903: PPUSH
40904: LD_INT 0
40906: PPUSH
40907: CALL_OW 324
40911: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40912: LD_EXP 87
40916: IFFALSE 40924
40918: PUSH
40919: LD_EXP 124
40923: AND
40924: IFFALSE 40944
40926: GO 40928
40928: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40929: LD_INT 19
40931: PPUSH
40932: LD_OWVAR 2
40936: PPUSH
40937: LD_INT 0
40939: PPUSH
40940: CALL_OW 324
40944: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40945: LD_EXP 87
40949: IFFALSE 40957
40951: PUSH
40952: LD_EXP 96
40956: AND
40957: IFFALSE 41059
40959: GO 40961
40961: DISABLE
40962: LD_INT 0
40964: PPUSH
40965: PPUSH
// begin enable ;
40966: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40967: LD_ADDR_VAR 0 2
40971: PUSH
40972: LD_INT 22
40974: PUSH
40975: LD_OWVAR 2
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 2
40986: PUSH
40987: LD_INT 34
40989: PUSH
40990: LD_INT 11
40992: PUSH
40993: EMPTY
40994: LIST
40995: LIST
40996: PUSH
40997: LD_INT 34
40999: PUSH
41000: LD_INT 30
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: EMPTY
41008: LIST
41009: LIST
41010: LIST
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PPUSH
41016: CALL_OW 69
41020: ST_TO_ADDR
// if not tmp then
41021: LD_VAR 0 2
41025: NOT
41026: IFFALSE 41030
// exit ;
41028: GO 41059
// for i in tmp do
41030: LD_ADDR_VAR 0 1
41034: PUSH
41035: LD_VAR 0 2
41039: PUSH
41040: FOR_IN
41041: IFFALSE 41057
// begin SetLives ( i , 0 ) ;
41043: LD_VAR 0 1
41047: PPUSH
41048: LD_INT 0
41050: PPUSH
41051: CALL_OW 234
// end ;
41055: GO 41040
41057: POP
41058: POP
// end ;
41059: PPOPN 2
41061: END
// every 0 0$1 trigger StreamModeActive and sBunker do
41062: LD_EXP 87
41066: IFFALSE 41074
41068: PUSH
41069: LD_EXP 97
41073: AND
41074: IFFALSE 41094
41076: GO 41078
41078: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
41079: LD_INT 32
41081: PPUSH
41082: LD_OWVAR 2
41086: PPUSH
41087: LD_INT 0
41089: PPUSH
41090: CALL_OW 324
41094: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
41095: LD_EXP 87
41099: IFFALSE 41107
41101: PUSH
41102: LD_EXP 98
41106: AND
41107: IFFALSE 41290
41109: GO 41111
41111: DISABLE
41112: LD_INT 0
41114: PPUSH
41115: PPUSH
41116: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
41117: LD_ADDR_VAR 0 2
41121: PUSH
41122: LD_INT 22
41124: PUSH
41125: LD_OWVAR 2
41129: PUSH
41130: EMPTY
41131: LIST
41132: LIST
41133: PUSH
41134: LD_INT 33
41136: PUSH
41137: LD_INT 3
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PPUSH
41148: CALL_OW 69
41152: ST_TO_ADDR
// if not tmp then
41153: LD_VAR 0 2
41157: NOT
41158: IFFALSE 41162
// exit ;
41160: GO 41290
// side := 0 ;
41162: LD_ADDR_VAR 0 3
41166: PUSH
41167: LD_INT 0
41169: ST_TO_ADDR
// for i := 1 to 8 do
41170: LD_ADDR_VAR 0 1
41174: PUSH
41175: DOUBLE
41176: LD_INT 1
41178: DEC
41179: ST_TO_ADDR
41180: LD_INT 8
41182: PUSH
41183: FOR_TO
41184: IFFALSE 41234
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
41186: LD_OWVAR 2
41190: PUSH
41191: LD_VAR 0 1
41195: NONEQUAL
41196: IFFALSE 41218
41198: PUSH
41199: LD_OWVAR 2
41203: PPUSH
41204: LD_VAR 0 1
41208: PPUSH
41209: CALL_OW 81
41213: PUSH
41214: LD_INT 2
41216: EQUAL
41217: AND
41218: IFFALSE 41232
// begin side := i ;
41220: LD_ADDR_VAR 0 3
41224: PUSH
41225: LD_VAR 0 1
41229: ST_TO_ADDR
// break ;
41230: GO 41234
// end ;
41232: GO 41183
41234: POP
41235: POP
// if not side then
41236: LD_VAR 0 3
41240: NOT
41241: IFFALSE 41245
// exit ;
41243: GO 41290
// for i := 1 to tmp do
41245: LD_ADDR_VAR 0 1
41249: PUSH
41250: DOUBLE
41251: LD_INT 1
41253: DEC
41254: ST_TO_ADDR
41255: LD_VAR 0 2
41259: PUSH
41260: FOR_TO
41261: IFFALSE 41288
// if Prob ( 60 ) then
41263: LD_INT 60
41265: PPUSH
41266: CALL_OW 13
41270: IFFALSE 41286
// SetSide ( i , side ) ;
41272: LD_VAR 0 1
41276: PPUSH
41277: LD_VAR 0 3
41281: PPUSH
41282: CALL_OW 235
41286: GO 41260
41288: POP
41289: POP
// end ;
41290: PPOPN 3
41292: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
41293: LD_EXP 87
41297: IFFALSE 41305
41299: PUSH
41300: LD_EXP 100
41304: AND
41305: IFFALSE 41424
41307: GO 41309
41309: DISABLE
41310: LD_INT 0
41312: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
41313: LD_ADDR_VAR 0 1
41317: PUSH
41318: LD_INT 22
41320: PUSH
41321: LD_OWVAR 2
41325: PUSH
41326: EMPTY
41327: LIST
41328: LIST
41329: PUSH
41330: LD_INT 21
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 3
41342: PUSH
41343: LD_INT 23
41345: PUSH
41346: LD_INT 0
41348: PUSH
41349: EMPTY
41350: LIST
41351: LIST
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: LIST
41361: PPUSH
41362: CALL_OW 69
41366: PUSH
41367: FOR_IN
41368: IFFALSE 41422
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41370: LD_VAR 0 1
41374: PPUSH
41375: CALL_OW 257
41379: PUSH
41380: LD_INT 1
41382: PUSH
41383: LD_INT 2
41385: PUSH
41386: LD_INT 3
41388: PUSH
41389: LD_INT 4
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: IN
41398: IFFALSE 41420
// SetClass ( un , rand ( 1 , 4 ) ) ;
41400: LD_VAR 0 1
41404: PPUSH
41405: LD_INT 1
41407: PPUSH
41408: LD_INT 4
41410: PPUSH
41411: CALL_OW 12
41415: PPUSH
41416: CALL_OW 336
41420: GO 41367
41422: POP
41423: POP
// end ;
41424: PPOPN 1
41426: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41427: LD_EXP 87
41431: IFFALSE 41439
41433: PUSH
41434: LD_EXP 99
41438: AND
41439: IFFALSE 41518
41441: GO 41443
41443: DISABLE
41444: LD_INT 0
41446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41447: LD_ADDR_VAR 0 1
41451: PUSH
41452: LD_INT 22
41454: PUSH
41455: LD_OWVAR 2
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 21
41466: PUSH
41467: LD_INT 3
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PPUSH
41478: CALL_OW 69
41482: ST_TO_ADDR
// if not tmp then
41483: LD_VAR 0 1
41487: NOT
41488: IFFALSE 41492
// exit ;
41490: GO 41518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41492: LD_VAR 0 1
41496: PUSH
41497: LD_INT 1
41499: PPUSH
41500: LD_VAR 0 1
41504: PPUSH
41505: CALL_OW 12
41509: ARRAY
41510: PPUSH
41511: LD_INT 100
41513: PPUSH
41514: CALL_OW 234
// end ;
41518: PPOPN 1
41520: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41521: LD_EXP 87
41525: IFFALSE 41533
41527: PUSH
41528: LD_EXP 101
41532: AND
41533: IFFALSE 41631
41535: GO 41537
41537: DISABLE
41538: LD_INT 0
41540: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41541: LD_ADDR_VAR 0 1
41545: PUSH
41546: LD_INT 22
41548: PUSH
41549: LD_OWVAR 2
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: PUSH
41558: LD_INT 21
41560: PUSH
41561: LD_INT 1
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: EMPTY
41569: LIST
41570: LIST
41571: PPUSH
41572: CALL_OW 69
41576: ST_TO_ADDR
// if not tmp then
41577: LD_VAR 0 1
41581: NOT
41582: IFFALSE 41586
// exit ;
41584: GO 41631
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41586: LD_VAR 0 1
41590: PUSH
41591: LD_INT 1
41593: PPUSH
41594: LD_VAR 0 1
41598: PPUSH
41599: CALL_OW 12
41603: ARRAY
41604: PPUSH
41605: LD_INT 1
41607: PPUSH
41608: LD_INT 4
41610: PPUSH
41611: CALL_OW 12
41615: PPUSH
41616: LD_INT 3000
41618: PPUSH
41619: LD_INT 9000
41621: PPUSH
41622: CALL_OW 12
41626: PPUSH
41627: CALL_OW 492
// end ;
41631: PPOPN 1
41633: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41634: LD_EXP 87
41638: IFFALSE 41646
41640: PUSH
41641: LD_EXP 102
41645: AND
41646: IFFALSE 41666
41648: GO 41650
41650: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41651: LD_INT 1
41653: PPUSH
41654: LD_OWVAR 2
41658: PPUSH
41659: LD_INT 0
41661: PPUSH
41662: CALL_OW 324
41666: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41667: LD_EXP 87
41671: IFFALSE 41679
41673: PUSH
41674: LD_EXP 103
41678: AND
41679: IFFALSE 41762
41681: GO 41683
41683: DISABLE
41684: LD_INT 0
41686: PPUSH
41687: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41688: LD_ADDR_VAR 0 2
41692: PUSH
41693: LD_INT 22
41695: PUSH
41696: LD_OWVAR 2
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 21
41707: PUSH
41708: LD_INT 3
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: EMPTY
41716: LIST
41717: LIST
41718: PPUSH
41719: CALL_OW 69
41723: ST_TO_ADDR
// if not tmp then
41724: LD_VAR 0 2
41728: NOT
41729: IFFALSE 41733
// exit ;
41731: GO 41762
// for i in tmp do
41733: LD_ADDR_VAR 0 1
41737: PUSH
41738: LD_VAR 0 2
41742: PUSH
41743: FOR_IN
41744: IFFALSE 41760
// SetBLevel ( i , 10 ) ;
41746: LD_VAR 0 1
41750: PPUSH
41751: LD_INT 10
41753: PPUSH
41754: CALL_OW 241
41758: GO 41743
41760: POP
41761: POP
// end ;
41762: PPOPN 2
41764: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41765: LD_EXP 87
41769: IFFALSE 41777
41771: PUSH
41772: LD_EXP 104
41776: AND
41777: IFFALSE 41888
41779: GO 41781
41781: DISABLE
41782: LD_INT 0
41784: PPUSH
41785: PPUSH
41786: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41787: LD_ADDR_VAR 0 3
41791: PUSH
41792: LD_INT 22
41794: PUSH
41795: LD_OWVAR 2
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 25
41806: PUSH
41807: LD_INT 1
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PPUSH
41818: CALL_OW 69
41822: ST_TO_ADDR
// if not tmp then
41823: LD_VAR 0 3
41827: NOT
41828: IFFALSE 41832
// exit ;
41830: GO 41888
// un := tmp [ rand ( 1 , tmp ) ] ;
41832: LD_ADDR_VAR 0 2
41836: PUSH
41837: LD_VAR 0 3
41841: PUSH
41842: LD_INT 1
41844: PPUSH
41845: LD_VAR 0 3
41849: PPUSH
41850: CALL_OW 12
41854: ARRAY
41855: ST_TO_ADDR
// if Crawls ( un ) then
41856: LD_VAR 0 2
41860: PPUSH
41861: CALL_OW 318
41865: IFFALSE 41876
// ComWalk ( un ) ;
41867: LD_VAR 0 2
41871: PPUSH
41872: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41876: LD_VAR 0 2
41880: PPUSH
41881: LD_INT 5
41883: PPUSH
41884: CALL_OW 336
// end ;
41888: PPOPN 3
41890: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41891: LD_EXP 87
41895: IFFALSE 41903
41897: PUSH
41898: LD_EXP 105
41902: AND
41903: IFFALSE 41915
41905: PUSH
41906: LD_OWVAR 67
41910: PUSH
41911: LD_INT 4
41913: LESS
41914: AND
41915: IFFALSE 41934
41917: GO 41919
41919: DISABLE
// begin Difficulty := Difficulty + 1 ;
41920: LD_ADDR_OWVAR 67
41924: PUSH
41925: LD_OWVAR 67
41929: PUSH
41930: LD_INT 1
41932: PLUS
41933: ST_TO_ADDR
// end ;
41934: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41935: LD_EXP 87
41939: IFFALSE 41947
41941: PUSH
41942: LD_EXP 106
41946: AND
41947: IFFALSE 42050
41949: GO 41951
41951: DISABLE
41952: LD_INT 0
41954: PPUSH
// begin for i := 1 to 5 do
41955: LD_ADDR_VAR 0 1
41959: PUSH
41960: DOUBLE
41961: LD_INT 1
41963: DEC
41964: ST_TO_ADDR
41965: LD_INT 5
41967: PUSH
41968: FOR_TO
41969: IFFALSE 42048
// begin uc_nation := nation_nature ;
41971: LD_ADDR_OWVAR 21
41975: PUSH
41976: LD_INT 0
41978: ST_TO_ADDR
// uc_side := 0 ;
41979: LD_ADDR_OWVAR 20
41983: PUSH
41984: LD_INT 0
41986: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41987: LD_ADDR_OWVAR 29
41991: PUSH
41992: LD_INT 12
41994: PUSH
41995: LD_INT 12
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: ST_TO_ADDR
// hc_agressivity := 20 ;
42002: LD_ADDR_OWVAR 35
42006: PUSH
42007: LD_INT 20
42009: ST_TO_ADDR
// hc_class := class_tiger ;
42010: LD_ADDR_OWVAR 28
42014: PUSH
42015: LD_INT 14
42017: ST_TO_ADDR
// hc_gallery :=  ;
42018: LD_ADDR_OWVAR 33
42022: PUSH
42023: LD_STRING 
42025: ST_TO_ADDR
// hc_name :=  ;
42026: LD_ADDR_OWVAR 26
42030: PUSH
42031: LD_STRING 
42033: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
42034: CALL_OW 44
42038: PPUSH
42039: LD_INT 0
42041: PPUSH
42042: CALL_OW 51
// end ;
42046: GO 41968
42048: POP
42049: POP
// end ;
42050: PPOPN 1
42052: END
// every 0 0$1 trigger StreamModeActive and sBomb do
42053: LD_EXP 87
42057: IFFALSE 42065
42059: PUSH
42060: LD_EXP 107
42064: AND
42065: IFFALSE 42074
42067: GO 42069
42069: DISABLE
// StreamSibBomb ;
42070: CALL 42075 0 0
42074: END
// export function StreamSibBomb ; var i , x , y ; begin
42075: LD_INT 0
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
// result := false ;
42081: LD_ADDR_VAR 0 1
42085: PUSH
42086: LD_INT 0
42088: ST_TO_ADDR
// for i := 1 to 16 do
42089: LD_ADDR_VAR 0 2
42093: PUSH
42094: DOUBLE
42095: LD_INT 1
42097: DEC
42098: ST_TO_ADDR
42099: LD_INT 16
42101: PUSH
42102: FOR_TO
42103: IFFALSE 42302
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
42105: LD_ADDR_VAR 0 3
42109: PUSH
42110: LD_INT 10
42112: PUSH
42113: LD_INT 20
42115: PUSH
42116: LD_INT 30
42118: PUSH
42119: LD_INT 40
42121: PUSH
42122: LD_INT 50
42124: PUSH
42125: LD_INT 60
42127: PUSH
42128: LD_INT 70
42130: PUSH
42131: LD_INT 80
42133: PUSH
42134: LD_INT 90
42136: PUSH
42137: LD_INT 100
42139: PUSH
42140: LD_INT 110
42142: PUSH
42143: LD_INT 120
42145: PUSH
42146: LD_INT 130
42148: PUSH
42149: LD_INT 140
42151: PUSH
42152: LD_INT 150
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: PPUSH
42175: LD_INT 15
42177: PPUSH
42178: CALL_OW 12
42182: ARRAY
42183: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
42184: LD_ADDR_VAR 0 4
42188: PUSH
42189: LD_INT 10
42191: PUSH
42192: LD_INT 20
42194: PUSH
42195: LD_INT 30
42197: PUSH
42198: LD_INT 40
42200: PUSH
42201: LD_INT 50
42203: PUSH
42204: LD_INT 60
42206: PUSH
42207: LD_INT 70
42209: PUSH
42210: LD_INT 80
42212: PUSH
42213: LD_INT 90
42215: PUSH
42216: LD_INT 100
42218: PUSH
42219: LD_INT 110
42221: PUSH
42222: LD_INT 120
42224: PUSH
42225: LD_INT 130
42227: PUSH
42228: LD_INT 140
42230: PUSH
42231: LD_INT 150
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: LIST
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: PPUSH
42254: LD_INT 15
42256: PPUSH
42257: CALL_OW 12
42261: ARRAY
42262: ST_TO_ADDR
// if ValidHex ( x , y ) then
42263: LD_VAR 0 3
42267: PPUSH
42268: LD_VAR 0 4
42272: PPUSH
42273: CALL_OW 488
42277: IFFALSE 42300
// begin result := [ x , y ] ;
42279: LD_ADDR_VAR 0 1
42283: PUSH
42284: LD_VAR 0 3
42288: PUSH
42289: LD_VAR 0 4
42293: PUSH
42294: EMPTY
42295: LIST
42296: LIST
42297: ST_TO_ADDR
// break ;
42298: GO 42302
// end ; end ;
42300: GO 42102
42302: POP
42303: POP
// if result then
42304: LD_VAR 0 1
42308: IFFALSE 42368
// begin ToLua ( playSibBomb() ) ;
42310: LD_STRING playSibBomb()
42312: PPUSH
42313: CALL_OW 559
// wait ( 0 0$14 ) ;
42317: LD_INT 490
42319: PPUSH
42320: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
42324: LD_VAR 0 1
42328: PUSH
42329: LD_INT 1
42331: ARRAY
42332: PPUSH
42333: LD_VAR 0 1
42337: PUSH
42338: LD_INT 2
42340: ARRAY
42341: PPUSH
42342: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
42346: LD_VAR 0 1
42350: PUSH
42351: LD_INT 1
42353: ARRAY
42354: PPUSH
42355: LD_VAR 0 1
42359: PUSH
42360: LD_INT 2
42362: ARRAY
42363: PPUSH
42364: CALL_OW 429
// end ; end ;
42368: LD_VAR 0 1
42372: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42373: LD_EXP 87
42377: IFFALSE 42385
42379: PUSH
42380: LD_EXP 109
42384: AND
42385: IFFALSE 42397
42387: GO 42389
42389: DISABLE
// YouLost (  ) ;
42390: LD_STRING 
42392: PPUSH
42393: CALL_OW 104
42397: END
// every 0 0$1 trigger StreamModeActive and sFog do
42398: LD_EXP 87
42402: IFFALSE 42410
42404: PUSH
42405: LD_EXP 108
42409: AND
42410: IFFALSE 42424
42412: GO 42414
42414: DISABLE
// FogOff ( your_side ) ;
42415: LD_OWVAR 2
42419: PPUSH
42420: CALL_OW 344
42424: END
// every 0 0$1 trigger StreamModeActive and sSun do
42425: LD_EXP 87
42429: IFFALSE 42437
42431: PUSH
42432: LD_EXP 110
42436: AND
42437: IFFALSE 42465
42439: GO 42441
42441: DISABLE
// begin solar_recharge_percent := 0 ;
42442: LD_ADDR_OWVAR 79
42446: PUSH
42447: LD_INT 0
42449: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42450: LD_INT 10500
42452: PPUSH
42453: CALL_OW 67
// solar_recharge_percent := 100 ;
42457: LD_ADDR_OWVAR 79
42461: PUSH
42462: LD_INT 100
42464: ST_TO_ADDR
// end ;
42465: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42466: LD_EXP 87
42470: IFFALSE 42478
42472: PUSH
42473: LD_EXP 111
42477: AND
42478: IFFALSE 42717
42480: GO 42482
42482: DISABLE
42483: LD_INT 0
42485: PPUSH
42486: PPUSH
42487: PPUSH
// begin tmp := [ ] ;
42488: LD_ADDR_VAR 0 3
42492: PUSH
42493: EMPTY
42494: ST_TO_ADDR
// for i := 1 to 6 do
42495: LD_ADDR_VAR 0 1
42499: PUSH
42500: DOUBLE
42501: LD_INT 1
42503: DEC
42504: ST_TO_ADDR
42505: LD_INT 6
42507: PUSH
42508: FOR_TO
42509: IFFALSE 42614
// begin uc_nation := nation_nature ;
42511: LD_ADDR_OWVAR 21
42515: PUSH
42516: LD_INT 0
42518: ST_TO_ADDR
// uc_side := 0 ;
42519: LD_ADDR_OWVAR 20
42523: PUSH
42524: LD_INT 0
42526: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42527: LD_ADDR_OWVAR 29
42531: PUSH
42532: LD_INT 12
42534: PUSH
42535: LD_INT 12
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: ST_TO_ADDR
// hc_agressivity := 20 ;
42542: LD_ADDR_OWVAR 35
42546: PUSH
42547: LD_INT 20
42549: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42550: LD_ADDR_OWVAR 28
42554: PUSH
42555: LD_INT 17
42557: ST_TO_ADDR
// hc_gallery :=  ;
42558: LD_ADDR_OWVAR 33
42562: PUSH
42563: LD_STRING 
42565: ST_TO_ADDR
// hc_name :=  ;
42566: LD_ADDR_OWVAR 26
42570: PUSH
42571: LD_STRING 
42573: ST_TO_ADDR
// un := CreateHuman ;
42574: LD_ADDR_VAR 0 2
42578: PUSH
42579: CALL_OW 44
42583: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42584: LD_VAR 0 2
42588: PPUSH
42589: LD_INT 1
42591: PPUSH
42592: CALL_OW 51
// tmp := tmp ^ un ;
42596: LD_ADDR_VAR 0 3
42600: PUSH
42601: LD_VAR 0 3
42605: PUSH
42606: LD_VAR 0 2
42610: ADD
42611: ST_TO_ADDR
// end ;
42612: GO 42508
42614: POP
42615: POP
// repeat wait ( 0 0$1 ) ;
42616: LD_INT 35
42618: PPUSH
42619: CALL_OW 67
// for un in tmp do
42623: LD_ADDR_VAR 0 2
42627: PUSH
42628: LD_VAR 0 3
42632: PUSH
42633: FOR_IN
42634: IFFALSE 42708
// begin if IsDead ( un ) then
42636: LD_VAR 0 2
42640: PPUSH
42641: CALL_OW 301
42645: IFFALSE 42665
// begin tmp := tmp diff un ;
42647: LD_ADDR_VAR 0 3
42651: PUSH
42652: LD_VAR 0 3
42656: PUSH
42657: LD_VAR 0 2
42661: DIFF
42662: ST_TO_ADDR
// continue ;
42663: GO 42633
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42665: LD_VAR 0 2
42669: PPUSH
42670: LD_INT 3
42672: PUSH
42673: LD_INT 22
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PPUSH
42687: CALL_OW 69
42691: PPUSH
42692: LD_VAR 0 2
42696: PPUSH
42697: CALL_OW 74
42701: PPUSH
42702: CALL_OW 115
// end ;
42706: GO 42633
42708: POP
42709: POP
// until not tmp ;
42710: LD_VAR 0 3
42714: NOT
42715: IFFALSE 42616
// end ;
42717: PPOPN 3
42719: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42720: LD_EXP 87
42724: IFFALSE 42732
42726: PUSH
42727: LD_EXP 112
42731: AND
42732: IFFALSE 42786
42734: GO 42736
42736: DISABLE
// begin ToLua ( displayTroll(); ) ;
42737: LD_STRING displayTroll();
42739: PPUSH
42740: CALL_OW 559
// wait ( 3 3$00 ) ;
42744: LD_INT 6300
42746: PPUSH
42747: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42751: LD_STRING hideTroll();
42753: PPUSH
42754: CALL_OW 559
// wait ( 1 1$00 ) ;
42758: LD_INT 2100
42760: PPUSH
42761: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42765: LD_STRING displayTroll();
42767: PPUSH
42768: CALL_OW 559
// wait ( 1 1$00 ) ;
42772: LD_INT 2100
42774: PPUSH
42775: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42779: LD_STRING hideTroll();
42781: PPUSH
42782: CALL_OW 559
// end ;
42786: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42787: LD_EXP 87
42791: IFFALSE 42799
42793: PUSH
42794: LD_EXP 113
42798: AND
42799: IFFALSE 42862
42801: GO 42803
42803: DISABLE
42804: LD_INT 0
42806: PPUSH
// begin p := 0 ;
42807: LD_ADDR_VAR 0 1
42811: PUSH
42812: LD_INT 0
42814: ST_TO_ADDR
// repeat game_speed := 1 ;
42815: LD_ADDR_OWVAR 65
42819: PUSH
42820: LD_INT 1
42822: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42823: LD_INT 35
42825: PPUSH
42826: CALL_OW 67
// p := p + 1 ;
42830: LD_ADDR_VAR 0 1
42834: PUSH
42835: LD_VAR 0 1
42839: PUSH
42840: LD_INT 1
42842: PLUS
42843: ST_TO_ADDR
// until p >= 60 ;
42844: LD_VAR 0 1
42848: PUSH
42849: LD_INT 60
42851: GREATEREQUAL
42852: IFFALSE 42815
// game_speed := 4 ;
42854: LD_ADDR_OWVAR 65
42858: PUSH
42859: LD_INT 4
42861: ST_TO_ADDR
// end ;
42862: PPOPN 1
42864: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42865: LD_EXP 87
42869: IFFALSE 42877
42871: PUSH
42872: LD_EXP 114
42876: AND
42877: IFFALSE 43023
42879: GO 42881
42881: DISABLE
42882: LD_INT 0
42884: PPUSH
42885: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42886: LD_ADDR_VAR 0 1
42890: PUSH
42891: LD_INT 22
42893: PUSH
42894: LD_OWVAR 2
42898: PUSH
42899: EMPTY
42900: LIST
42901: LIST
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: LD_INT 30
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 30
42918: PUSH
42919: LD_INT 1
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: LIST
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PPUSH
42935: CALL_OW 69
42939: ST_TO_ADDR
// if not depot then
42940: LD_VAR 0 1
42944: NOT
42945: IFFALSE 42949
// exit ;
42947: GO 43023
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42949: LD_ADDR_VAR 0 2
42953: PUSH
42954: LD_VAR 0 1
42958: PUSH
42959: LD_INT 1
42961: PPUSH
42962: LD_VAR 0 1
42966: PPUSH
42967: CALL_OW 12
42971: ARRAY
42972: PPUSH
42973: CALL_OW 274
42977: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42978: LD_VAR 0 2
42982: PPUSH
42983: LD_INT 1
42985: PPUSH
42986: LD_INT 0
42988: PPUSH
42989: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42993: LD_VAR 0 2
42997: PPUSH
42998: LD_INT 2
43000: PPUSH
43001: LD_INT 0
43003: PPUSH
43004: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
43008: LD_VAR 0 2
43012: PPUSH
43013: LD_INT 3
43015: PPUSH
43016: LD_INT 0
43018: PPUSH
43019: CALL_OW 277
// end ;
43023: PPOPN 2
43025: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
43026: LD_EXP 87
43030: IFFALSE 43038
43032: PUSH
43033: LD_EXP 115
43037: AND
43038: IFFALSE 43135
43040: GO 43042
43042: DISABLE
43043: LD_INT 0
43045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
43046: LD_ADDR_VAR 0 1
43050: PUSH
43051: LD_INT 22
43053: PUSH
43054: LD_OWVAR 2
43058: PUSH
43059: EMPTY
43060: LIST
43061: LIST
43062: PUSH
43063: LD_INT 21
43065: PUSH
43066: LD_INT 1
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 3
43075: PUSH
43076: LD_INT 23
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: LIST
43094: PPUSH
43095: CALL_OW 69
43099: ST_TO_ADDR
// if not tmp then
43100: LD_VAR 0 1
43104: NOT
43105: IFFALSE 43109
// exit ;
43107: GO 43135
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
43109: LD_VAR 0 1
43113: PUSH
43114: LD_INT 1
43116: PPUSH
43117: LD_VAR 0 1
43121: PPUSH
43122: CALL_OW 12
43126: ARRAY
43127: PPUSH
43128: LD_INT 200
43130: PPUSH
43131: CALL_OW 234
// end ;
43135: PPOPN 1
43137: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
43138: LD_EXP 87
43142: IFFALSE 43150
43144: PUSH
43145: LD_EXP 116
43149: AND
43150: IFFALSE 43229
43152: GO 43154
43154: DISABLE
43155: LD_INT 0
43157: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
43158: LD_ADDR_VAR 0 1
43162: PUSH
43163: LD_INT 22
43165: PUSH
43166: LD_OWVAR 2
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 21
43177: PUSH
43178: LD_INT 2
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PPUSH
43189: CALL_OW 69
43193: ST_TO_ADDR
// if not tmp then
43194: LD_VAR 0 1
43198: NOT
43199: IFFALSE 43203
// exit ;
43201: GO 43229
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
43203: LD_VAR 0 1
43207: PUSH
43208: LD_INT 1
43210: PPUSH
43211: LD_VAR 0 1
43215: PPUSH
43216: CALL_OW 12
43220: ARRAY
43221: PPUSH
43222: LD_INT 60
43224: PPUSH
43225: CALL_OW 234
// end ;
43229: PPOPN 1
43231: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
43232: LD_EXP 87
43236: IFFALSE 43244
43238: PUSH
43239: LD_EXP 117
43243: AND
43244: IFFALSE 43343
43246: GO 43248
43248: DISABLE
43249: LD_INT 0
43251: PPUSH
43252: PPUSH
// begin enable ;
43253: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
43254: LD_ADDR_VAR 0 1
43258: PUSH
43259: LD_INT 22
43261: PUSH
43262: LD_OWVAR 2
43266: PUSH
43267: EMPTY
43268: LIST
43269: LIST
43270: PUSH
43271: LD_INT 61
43273: PUSH
43274: EMPTY
43275: LIST
43276: PUSH
43277: LD_INT 33
43279: PUSH
43280: LD_INT 2
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: PPUSH
43292: CALL_OW 69
43296: ST_TO_ADDR
// if not tmp then
43297: LD_VAR 0 1
43301: NOT
43302: IFFALSE 43306
// exit ;
43304: GO 43343
// for i in tmp do
43306: LD_ADDR_VAR 0 2
43310: PUSH
43311: LD_VAR 0 1
43315: PUSH
43316: FOR_IN
43317: IFFALSE 43341
// if IsControledBy ( i ) then
43319: LD_VAR 0 2
43323: PPUSH
43324: CALL_OW 312
43328: IFFALSE 43339
// ComUnlink ( i ) ;
43330: LD_VAR 0 2
43334: PPUSH
43335: CALL_OW 136
43339: GO 43316
43341: POP
43342: POP
// end ;
43343: PPOPN 2
43345: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
43346: LD_EXP 87
43350: IFFALSE 43358
43352: PUSH
43353: LD_EXP 118
43357: AND
43358: IFFALSE 43498
43360: GO 43362
43362: DISABLE
43363: LD_INT 0
43365: PPUSH
43366: PPUSH
// begin ToLua ( displayPowell(); ) ;
43367: LD_STRING displayPowell();
43369: PPUSH
43370: CALL_OW 559
// uc_side := 0 ;
43374: LD_ADDR_OWVAR 20
43378: PUSH
43379: LD_INT 0
43381: ST_TO_ADDR
// uc_nation := 2 ;
43382: LD_ADDR_OWVAR 21
43386: PUSH
43387: LD_INT 2
43389: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43390: LD_ADDR_OWVAR 37
43394: PUSH
43395: LD_INT 14
43397: ST_TO_ADDR
// vc_engine := engine_siberite ;
43398: LD_ADDR_OWVAR 39
43402: PUSH
43403: LD_INT 3
43405: ST_TO_ADDR
// vc_control := control_apeman ;
43406: LD_ADDR_OWVAR 38
43410: PUSH
43411: LD_INT 5
43413: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43414: LD_ADDR_OWVAR 40
43418: PUSH
43419: LD_INT 29
43421: ST_TO_ADDR
// un := CreateVehicle ;
43422: LD_ADDR_VAR 0 2
43426: PUSH
43427: CALL_OW 45
43431: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43432: LD_VAR 0 2
43436: PPUSH
43437: LD_INT 1
43439: PPUSH
43440: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43444: LD_INT 35
43446: PPUSH
43447: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43451: LD_VAR 0 2
43455: PPUSH
43456: LD_INT 22
43458: PUSH
43459: LD_OWVAR 2
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PPUSH
43468: CALL_OW 69
43472: PPUSH
43473: LD_VAR 0 2
43477: PPUSH
43478: CALL_OW 74
43482: PPUSH
43483: CALL_OW 115
// until IsDead ( un ) ;
43487: LD_VAR 0 2
43491: PPUSH
43492: CALL_OW 301
43496: IFFALSE 43444
// end ;
43498: PPOPN 2
43500: END
// every 0 0$1 trigger StreamModeActive and sStu do
43501: LD_EXP 87
43505: IFFALSE 43513
43507: PUSH
43508: LD_EXP 126
43512: AND
43513: IFFALSE 43529
43515: GO 43517
43517: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43518: LD_STRING displayStucuk();
43520: PPUSH
43521: CALL_OW 559
// ResetFog ;
43525: CALL_OW 335
// end ;
43529: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43530: LD_EXP 87
43534: IFFALSE 43542
43536: PUSH
43537: LD_EXP 119
43541: AND
43542: IFFALSE 43683
43544: GO 43546
43546: DISABLE
43547: LD_INT 0
43549: PPUSH
43550: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43551: LD_ADDR_VAR 0 2
43555: PUSH
43556: LD_INT 22
43558: PUSH
43559: LD_OWVAR 2
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 21
43570: PUSH
43571: LD_INT 1
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PPUSH
43582: CALL_OW 69
43586: ST_TO_ADDR
// if not tmp then
43587: LD_VAR 0 2
43591: NOT
43592: IFFALSE 43596
// exit ;
43594: GO 43683
// un := tmp [ rand ( 1 , tmp ) ] ;
43596: LD_ADDR_VAR 0 1
43600: PUSH
43601: LD_VAR 0 2
43605: PUSH
43606: LD_INT 1
43608: PPUSH
43609: LD_VAR 0 2
43613: PPUSH
43614: CALL_OW 12
43618: ARRAY
43619: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43620: LD_VAR 0 1
43624: PPUSH
43625: LD_INT 0
43627: PPUSH
43628: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43632: LD_VAR 0 1
43636: PPUSH
43637: LD_OWVAR 3
43641: PUSH
43642: LD_VAR 0 1
43646: DIFF
43647: PPUSH
43648: LD_VAR 0 1
43652: PPUSH
43653: CALL_OW 74
43657: PPUSH
43658: CALL_OW 115
// wait ( 0 0$20 ) ;
43662: LD_INT 700
43664: PPUSH
43665: CALL_OW 67
// SetSide ( un , your_side ) ;
43669: LD_VAR 0 1
43673: PPUSH
43674: LD_OWVAR 2
43678: PPUSH
43679: CALL_OW 235
// end ;
43683: PPOPN 2
43685: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43686: LD_EXP 87
43690: IFFALSE 43698
43692: PUSH
43693: LD_EXP 120
43697: AND
43698: IFFALSE 43804
43700: GO 43702
43702: DISABLE
43703: LD_INT 0
43705: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43706: LD_ADDR_VAR 0 1
43710: PUSH
43711: LD_INT 22
43713: PUSH
43714: LD_OWVAR 2
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 2
43725: PUSH
43726: LD_INT 30
43728: PUSH
43729: LD_INT 0
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 30
43738: PUSH
43739: LD_INT 1
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: PPUSH
43755: CALL_OW 69
43759: ST_TO_ADDR
// if not depot then
43760: LD_VAR 0 1
43764: NOT
43765: IFFALSE 43769
// exit ;
43767: GO 43804
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43769: LD_VAR 0 1
43773: PUSH
43774: LD_INT 1
43776: ARRAY
43777: PPUSH
43778: CALL_OW 250
43782: PPUSH
43783: LD_VAR 0 1
43787: PUSH
43788: LD_INT 1
43790: ARRAY
43791: PPUSH
43792: CALL_OW 251
43796: PPUSH
43797: LD_INT 70
43799: PPUSH
43800: CALL_OW 495
// end ;
43804: PPOPN 1
43806: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43807: LD_EXP 87
43811: IFFALSE 43819
43813: PUSH
43814: LD_EXP 121
43818: AND
43819: IFFALSE 44030
43821: GO 43823
43823: DISABLE
43824: LD_INT 0
43826: PPUSH
43827: PPUSH
43828: PPUSH
43829: PPUSH
43830: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43831: LD_ADDR_VAR 0 5
43835: PUSH
43836: LD_INT 22
43838: PUSH
43839: LD_OWVAR 2
43843: PUSH
43844: EMPTY
43845: LIST
43846: LIST
43847: PUSH
43848: LD_INT 21
43850: PUSH
43851: LD_INT 1
43853: PUSH
43854: EMPTY
43855: LIST
43856: LIST
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PPUSH
43862: CALL_OW 69
43866: ST_TO_ADDR
// if not tmp then
43867: LD_VAR 0 5
43871: NOT
43872: IFFALSE 43876
// exit ;
43874: GO 44030
// for i in tmp do
43876: LD_ADDR_VAR 0 1
43880: PUSH
43881: LD_VAR 0 5
43885: PUSH
43886: FOR_IN
43887: IFFALSE 44028
// begin d := rand ( 0 , 5 ) ;
43889: LD_ADDR_VAR 0 4
43893: PUSH
43894: LD_INT 0
43896: PPUSH
43897: LD_INT 5
43899: PPUSH
43900: CALL_OW 12
43904: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43905: LD_ADDR_VAR 0 2
43909: PUSH
43910: LD_VAR 0 1
43914: PPUSH
43915: CALL_OW 250
43919: PPUSH
43920: LD_VAR 0 4
43924: PPUSH
43925: LD_INT 3
43927: PPUSH
43928: LD_INT 12
43930: PPUSH
43931: CALL_OW 12
43935: PPUSH
43936: CALL_OW 272
43940: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43941: LD_ADDR_VAR 0 3
43945: PUSH
43946: LD_VAR 0 1
43950: PPUSH
43951: CALL_OW 251
43955: PPUSH
43956: LD_VAR 0 4
43960: PPUSH
43961: LD_INT 3
43963: PPUSH
43964: LD_INT 12
43966: PPUSH
43967: CALL_OW 12
43971: PPUSH
43972: CALL_OW 273
43976: ST_TO_ADDR
// if ValidHex ( x , y ) then
43977: LD_VAR 0 2
43981: PPUSH
43982: LD_VAR 0 3
43986: PPUSH
43987: CALL_OW 488
43991: IFFALSE 44026
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43993: LD_VAR 0 1
43997: PPUSH
43998: LD_VAR 0 2
44002: PPUSH
44003: LD_VAR 0 3
44007: PPUSH
44008: LD_INT 3
44010: PPUSH
44011: LD_INT 6
44013: PPUSH
44014: CALL_OW 12
44018: PPUSH
44019: LD_INT 1
44021: PPUSH
44022: CALL_OW 483
// end ;
44026: GO 43886
44028: POP
44029: POP
// end ;
44030: PPOPN 5
44032: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
44033: LD_EXP 87
44037: IFFALSE 44045
44039: PUSH
44040: LD_EXP 122
44044: AND
44045: IFFALSE 44139
44047: GO 44049
44049: DISABLE
44050: LD_INT 0
44052: PPUSH
44053: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
44054: LD_ADDR_VAR 0 2
44058: PUSH
44059: LD_INT 22
44061: PUSH
44062: LD_OWVAR 2
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 32
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 21
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: EMPTY
44092: LIST
44093: LIST
44094: LIST
44095: PPUSH
44096: CALL_OW 69
44100: ST_TO_ADDR
// if not tmp then
44101: LD_VAR 0 2
44105: NOT
44106: IFFALSE 44110
// exit ;
44108: GO 44139
// for i in tmp do
44110: LD_ADDR_VAR 0 1
44114: PUSH
44115: LD_VAR 0 2
44119: PUSH
44120: FOR_IN
44121: IFFALSE 44137
// SetFuel ( i , 0 ) ;
44123: LD_VAR 0 1
44127: PPUSH
44128: LD_INT 0
44130: PPUSH
44131: CALL_OW 240
44135: GO 44120
44137: POP
44138: POP
// end ;
44139: PPOPN 2
44141: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
44142: LD_EXP 87
44146: IFFALSE 44154
44148: PUSH
44149: LD_EXP 123
44153: AND
44154: IFFALSE 44220
44156: GO 44158
44158: DISABLE
44159: LD_INT 0
44161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
44162: LD_ADDR_VAR 0 1
44166: PUSH
44167: LD_INT 22
44169: PUSH
44170: LD_OWVAR 2
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 30
44181: PUSH
44182: LD_INT 29
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PPUSH
44193: CALL_OW 69
44197: ST_TO_ADDR
// if not tmp then
44198: LD_VAR 0 1
44202: NOT
44203: IFFALSE 44207
// exit ;
44205: GO 44220
// DestroyUnit ( tmp [ 1 ] ) ;
44207: LD_VAR 0 1
44211: PUSH
44212: LD_INT 1
44214: ARRAY
44215: PPUSH
44216: CALL_OW 65
// end ;
44220: PPOPN 1
44222: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
44223: LD_EXP 87
44227: IFFALSE 44235
44229: PUSH
44230: LD_EXP 125
44234: AND
44235: IFFALSE 44364
44237: GO 44239
44239: DISABLE
44240: LD_INT 0
44242: PPUSH
// begin uc_side := 0 ;
44243: LD_ADDR_OWVAR 20
44247: PUSH
44248: LD_INT 0
44250: ST_TO_ADDR
// uc_nation := nation_arabian ;
44251: LD_ADDR_OWVAR 21
44255: PUSH
44256: LD_INT 2
44258: ST_TO_ADDR
// hc_gallery :=  ;
44259: LD_ADDR_OWVAR 33
44263: PUSH
44264: LD_STRING 
44266: ST_TO_ADDR
// hc_name :=  ;
44267: LD_ADDR_OWVAR 26
44271: PUSH
44272: LD_STRING 
44274: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
44275: LD_INT 1
44277: PPUSH
44278: LD_INT 11
44280: PPUSH
44281: LD_INT 10
44283: PPUSH
44284: CALL_OW 380
// un := CreateHuman ;
44288: LD_ADDR_VAR 0 1
44292: PUSH
44293: CALL_OW 44
44297: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
44298: LD_VAR 0 1
44302: PPUSH
44303: LD_INT 1
44305: PPUSH
44306: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
44310: LD_INT 35
44312: PPUSH
44313: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
44317: LD_VAR 0 1
44321: PPUSH
44322: LD_INT 22
44324: PUSH
44325: LD_OWVAR 2
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PPUSH
44334: CALL_OW 69
44338: PPUSH
44339: LD_VAR 0 1
44343: PPUSH
44344: CALL_OW 74
44348: PPUSH
44349: CALL_OW 115
// until IsDead ( un ) ;
44353: LD_VAR 0 1
44357: PPUSH
44358: CALL_OW 301
44362: IFFALSE 44310
// end ;
44364: PPOPN 1
44366: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
44367: LD_EXP 87
44371: IFFALSE 44379
44373: PUSH
44374: LD_EXP 127
44378: AND
44379: IFFALSE 44391
44381: GO 44383
44383: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
44384: LD_STRING earthquake(getX(game), 0, 32)
44386: PPUSH
44387: CALL_OW 559
44391: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
44392: LD_EXP 87
44396: IFFALSE 44404
44398: PUSH
44399: LD_EXP 128
44403: AND
44404: IFFALSE 44495
44406: GO 44408
44408: DISABLE
44409: LD_INT 0
44411: PPUSH
// begin enable ;
44412: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44413: LD_ADDR_VAR 0 1
44417: PUSH
44418: LD_INT 22
44420: PUSH
44421: LD_OWVAR 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 21
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 33
44442: PUSH
44443: LD_INT 3
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: EMPTY
44451: LIST
44452: LIST
44453: LIST
44454: PPUSH
44455: CALL_OW 69
44459: ST_TO_ADDR
// if not tmp then
44460: LD_VAR 0 1
44464: NOT
44465: IFFALSE 44469
// exit ;
44467: GO 44495
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44469: LD_VAR 0 1
44473: PUSH
44474: LD_INT 1
44476: PPUSH
44477: LD_VAR 0 1
44481: PPUSH
44482: CALL_OW 12
44486: ARRAY
44487: PPUSH
44488: LD_INT 1
44490: PPUSH
44491: CALL_OW 234
// end ;
44495: PPOPN 1
44497: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44498: LD_EXP 87
44502: IFFALSE 44510
44504: PUSH
44505: LD_EXP 129
44509: AND
44510: IFFALSE 44651
44512: GO 44514
44514: DISABLE
44515: LD_INT 0
44517: PPUSH
44518: PPUSH
44519: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44520: LD_ADDR_VAR 0 3
44524: PUSH
44525: LD_INT 22
44527: PUSH
44528: LD_OWVAR 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 25
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: EMPTY
44548: LIST
44549: LIST
44550: PPUSH
44551: CALL_OW 69
44555: ST_TO_ADDR
// if not tmp then
44556: LD_VAR 0 3
44560: NOT
44561: IFFALSE 44565
// exit ;
44563: GO 44651
// un := tmp [ rand ( 1 , tmp ) ] ;
44565: LD_ADDR_VAR 0 2
44569: PUSH
44570: LD_VAR 0 3
44574: PUSH
44575: LD_INT 1
44577: PPUSH
44578: LD_VAR 0 3
44582: PPUSH
44583: CALL_OW 12
44587: ARRAY
44588: ST_TO_ADDR
// if Crawls ( un ) then
44589: LD_VAR 0 2
44593: PPUSH
44594: CALL_OW 318
44598: IFFALSE 44609
// ComWalk ( un ) ;
44600: LD_VAR 0 2
44604: PPUSH
44605: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44609: LD_VAR 0 2
44613: PPUSH
44614: LD_INT 9
44616: PPUSH
44617: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44621: LD_INT 28
44623: PPUSH
44624: LD_OWVAR 2
44628: PPUSH
44629: LD_INT 2
44631: PPUSH
44632: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44636: LD_INT 29
44638: PPUSH
44639: LD_OWVAR 2
44643: PPUSH
44644: LD_INT 2
44646: PPUSH
44647: CALL_OW 322
// end ;
44651: PPOPN 3
44653: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44654: LD_EXP 87
44658: IFFALSE 44666
44660: PUSH
44661: LD_EXP 130
44665: AND
44666: IFFALSE 44777
44668: GO 44670
44670: DISABLE
44671: LD_INT 0
44673: PPUSH
44674: PPUSH
44675: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44676: LD_ADDR_VAR 0 3
44680: PUSH
44681: LD_INT 22
44683: PUSH
44684: LD_OWVAR 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 25
44695: PUSH
44696: LD_INT 1
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PPUSH
44707: CALL_OW 69
44711: ST_TO_ADDR
// if not tmp then
44712: LD_VAR 0 3
44716: NOT
44717: IFFALSE 44721
// exit ;
44719: GO 44777
// un := tmp [ rand ( 1 , tmp ) ] ;
44721: LD_ADDR_VAR 0 2
44725: PUSH
44726: LD_VAR 0 3
44730: PUSH
44731: LD_INT 1
44733: PPUSH
44734: LD_VAR 0 3
44738: PPUSH
44739: CALL_OW 12
44743: ARRAY
44744: ST_TO_ADDR
// if Crawls ( un ) then
44745: LD_VAR 0 2
44749: PPUSH
44750: CALL_OW 318
44754: IFFALSE 44765
// ComWalk ( un ) ;
44756: LD_VAR 0 2
44760: PPUSH
44761: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44765: LD_VAR 0 2
44769: PPUSH
44770: LD_INT 8
44772: PPUSH
44773: CALL_OW 336
// end ;
44777: PPOPN 3
44779: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44780: LD_EXP 87
44784: IFFALSE 44792
44786: PUSH
44787: LD_EXP 131
44791: AND
44792: IFFALSE 44936
44794: GO 44796
44796: DISABLE
44797: LD_INT 0
44799: PPUSH
44800: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44801: LD_ADDR_VAR 0 2
44805: PUSH
44806: LD_INT 22
44808: PUSH
44809: LD_OWVAR 2
44813: PUSH
44814: EMPTY
44815: LIST
44816: LIST
44817: PUSH
44818: LD_INT 21
44820: PUSH
44821: LD_INT 2
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: LD_INT 34
44833: PUSH
44834: LD_INT 12
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 34
44843: PUSH
44844: LD_INT 51
44846: PUSH
44847: EMPTY
44848: LIST
44849: LIST
44850: PUSH
44851: LD_INT 34
44853: PUSH
44854: LD_INT 32
44856: PUSH
44857: EMPTY
44858: LIST
44859: LIST
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: LIST
44871: PPUSH
44872: CALL_OW 69
44876: ST_TO_ADDR
// if not tmp then
44877: LD_VAR 0 2
44881: NOT
44882: IFFALSE 44886
// exit ;
44884: GO 44936
// for i in tmp do
44886: LD_ADDR_VAR 0 1
44890: PUSH
44891: LD_VAR 0 2
44895: PUSH
44896: FOR_IN
44897: IFFALSE 44934
// if GetCargo ( i , mat_artifact ) = 0 then
44899: LD_VAR 0 1
44903: PPUSH
44904: LD_INT 4
44906: PPUSH
44907: CALL_OW 289
44911: PUSH
44912: LD_INT 0
44914: EQUAL
44915: IFFALSE 44932
// SetCargo ( i , mat_siberit , 100 ) ;
44917: LD_VAR 0 1
44921: PPUSH
44922: LD_INT 3
44924: PPUSH
44925: LD_INT 100
44927: PPUSH
44928: CALL_OW 290
44932: GO 44896
44934: POP
44935: POP
// end ;
44936: PPOPN 2
44938: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44939: LD_EXP 87
44943: IFFALSE 44951
44945: PUSH
44946: LD_EXP 132
44950: AND
44951: IFFALSE 45134
44953: GO 44955
44955: DISABLE
44956: LD_INT 0
44958: PPUSH
44959: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44960: LD_ADDR_VAR 0 2
44964: PUSH
44965: LD_INT 22
44967: PUSH
44968: LD_OWVAR 2
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PPUSH
44977: CALL_OW 69
44981: ST_TO_ADDR
// if not tmp then
44982: LD_VAR 0 2
44986: NOT
44987: IFFALSE 44991
// exit ;
44989: GO 45134
// for i := 1 to 2 do
44991: LD_ADDR_VAR 0 1
44995: PUSH
44996: DOUBLE
44997: LD_INT 1
44999: DEC
45000: ST_TO_ADDR
45001: LD_INT 2
45003: PUSH
45004: FOR_TO
45005: IFFALSE 45132
// begin uc_side := your_side ;
45007: LD_ADDR_OWVAR 20
45011: PUSH
45012: LD_OWVAR 2
45016: ST_TO_ADDR
// uc_nation := nation_american ;
45017: LD_ADDR_OWVAR 21
45021: PUSH
45022: LD_INT 1
45024: ST_TO_ADDR
// vc_chassis := us_morphling ;
45025: LD_ADDR_OWVAR 37
45029: PUSH
45030: LD_INT 5
45032: ST_TO_ADDR
// vc_engine := engine_siberite ;
45033: LD_ADDR_OWVAR 39
45037: PUSH
45038: LD_INT 3
45040: ST_TO_ADDR
// vc_control := control_computer ;
45041: LD_ADDR_OWVAR 38
45045: PUSH
45046: LD_INT 3
45048: ST_TO_ADDR
// vc_weapon := us_double_laser ;
45049: LD_ADDR_OWVAR 40
45053: PUSH
45054: LD_INT 10
45056: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
45057: LD_VAR 0 2
45061: PUSH
45062: LD_INT 1
45064: ARRAY
45065: PPUSH
45066: CALL_OW 310
45070: NOT
45071: IFFALSE 45118
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
45073: CALL_OW 45
45077: PPUSH
45078: LD_VAR 0 2
45082: PUSH
45083: LD_INT 1
45085: ARRAY
45086: PPUSH
45087: CALL_OW 250
45091: PPUSH
45092: LD_VAR 0 2
45096: PUSH
45097: LD_INT 1
45099: ARRAY
45100: PPUSH
45101: CALL_OW 251
45105: PPUSH
45106: LD_INT 12
45108: PPUSH
45109: LD_INT 1
45111: PPUSH
45112: CALL_OW 50
45116: GO 45130
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
45118: CALL_OW 45
45122: PPUSH
45123: LD_INT 1
45125: PPUSH
45126: CALL_OW 51
// end ;
45130: GO 45004
45132: POP
45133: POP
// end ;
45134: PPOPN 2
45136: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
45137: LD_EXP 87
45141: IFFALSE 45149
45143: PUSH
45144: LD_EXP 133
45148: AND
45149: IFFALSE 45371
45151: GO 45153
45153: DISABLE
45154: LD_INT 0
45156: PPUSH
45157: PPUSH
45158: PPUSH
45159: PPUSH
45160: PPUSH
45161: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45162: LD_ADDR_VAR 0 6
45166: PUSH
45167: LD_INT 22
45169: PUSH
45170: LD_OWVAR 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 21
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 3
45191: PUSH
45192: LD_INT 23
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: EMPTY
45203: LIST
45204: LIST
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: LIST
45210: PPUSH
45211: CALL_OW 69
45215: ST_TO_ADDR
// if not tmp then
45216: LD_VAR 0 6
45220: NOT
45221: IFFALSE 45225
// exit ;
45223: GO 45371
// s1 := rand ( 1 , 4 ) ;
45225: LD_ADDR_VAR 0 2
45229: PUSH
45230: LD_INT 1
45232: PPUSH
45233: LD_INT 4
45235: PPUSH
45236: CALL_OW 12
45240: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
45241: LD_ADDR_VAR 0 4
45245: PUSH
45246: LD_VAR 0 6
45250: PUSH
45251: LD_INT 1
45253: ARRAY
45254: PPUSH
45255: LD_VAR 0 2
45259: PPUSH
45260: CALL_OW 259
45264: ST_TO_ADDR
// if s1 = 1 then
45265: LD_VAR 0 2
45269: PUSH
45270: LD_INT 1
45272: EQUAL
45273: IFFALSE 45293
// s2 := rand ( 2 , 4 ) else
45275: LD_ADDR_VAR 0 3
45279: PUSH
45280: LD_INT 2
45282: PPUSH
45283: LD_INT 4
45285: PPUSH
45286: CALL_OW 12
45290: ST_TO_ADDR
45291: GO 45301
// s2 := 1 ;
45293: LD_ADDR_VAR 0 3
45297: PUSH
45298: LD_INT 1
45300: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
45301: LD_ADDR_VAR 0 5
45305: PUSH
45306: LD_VAR 0 6
45310: PUSH
45311: LD_INT 1
45313: ARRAY
45314: PPUSH
45315: LD_VAR 0 3
45319: PPUSH
45320: CALL_OW 259
45324: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
45325: LD_VAR 0 6
45329: PUSH
45330: LD_INT 1
45332: ARRAY
45333: PPUSH
45334: LD_VAR 0 2
45338: PPUSH
45339: LD_VAR 0 5
45343: PPUSH
45344: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
45348: LD_VAR 0 6
45352: PUSH
45353: LD_INT 1
45355: ARRAY
45356: PPUSH
45357: LD_VAR 0 3
45361: PPUSH
45362: LD_VAR 0 4
45366: PPUSH
45367: CALL_OW 237
// end ;
45371: PPOPN 6
45373: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
45374: LD_EXP 87
45378: IFFALSE 45386
45380: PUSH
45381: LD_EXP 134
45385: AND
45386: IFFALSE 45465
45388: GO 45390
45390: DISABLE
45391: LD_INT 0
45393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
45394: LD_ADDR_VAR 0 1
45398: PUSH
45399: LD_INT 22
45401: PUSH
45402: LD_OWVAR 2
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 30
45413: PUSH
45414: LD_INT 3
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PPUSH
45425: CALL_OW 69
45429: ST_TO_ADDR
// if not tmp then
45430: LD_VAR 0 1
45434: NOT
45435: IFFALSE 45439
// exit ;
45437: GO 45465
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45439: LD_VAR 0 1
45443: PUSH
45444: LD_INT 1
45446: PPUSH
45447: LD_VAR 0 1
45451: PPUSH
45452: CALL_OW 12
45456: ARRAY
45457: PPUSH
45458: LD_INT 1
45460: PPUSH
45461: CALL_OW 234
// end ;
45465: PPOPN 1
45467: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45468: LD_EXP 87
45472: IFFALSE 45480
45474: PUSH
45475: LD_EXP 135
45479: AND
45480: IFFALSE 45592
45482: GO 45484
45484: DISABLE
45485: LD_INT 0
45487: PPUSH
45488: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45489: LD_ADDR_VAR 0 2
45493: PUSH
45494: LD_INT 22
45496: PUSH
45497: LD_OWVAR 2
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: LD_INT 30
45511: PUSH
45512: LD_INT 27
45514: PUSH
45515: EMPTY
45516: LIST
45517: LIST
45518: PUSH
45519: LD_INT 30
45521: PUSH
45522: LD_INT 26
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 30
45531: PUSH
45532: LD_INT 28
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: EMPTY
45540: LIST
45541: LIST
45542: LIST
45543: LIST
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PPUSH
45549: CALL_OW 69
45553: ST_TO_ADDR
// if not tmp then
45554: LD_VAR 0 2
45558: NOT
45559: IFFALSE 45563
// exit ;
45561: GO 45592
// for i in tmp do
45563: LD_ADDR_VAR 0 1
45567: PUSH
45568: LD_VAR 0 2
45572: PUSH
45573: FOR_IN
45574: IFFALSE 45590
// SetLives ( i , 1 ) ;
45576: LD_VAR 0 1
45580: PPUSH
45581: LD_INT 1
45583: PPUSH
45584: CALL_OW 234
45588: GO 45573
45590: POP
45591: POP
// end ;
45592: PPOPN 2
45594: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45595: LD_EXP 87
45599: IFFALSE 45607
45601: PUSH
45602: LD_EXP 136
45606: AND
45607: IFFALSE 45894
45609: GO 45611
45611: DISABLE
45612: LD_INT 0
45614: PPUSH
45615: PPUSH
45616: PPUSH
// begin i := rand ( 1 , 7 ) ;
45617: LD_ADDR_VAR 0 1
45621: PUSH
45622: LD_INT 1
45624: PPUSH
45625: LD_INT 7
45627: PPUSH
45628: CALL_OW 12
45632: ST_TO_ADDR
// case i of 1 :
45633: LD_VAR 0 1
45637: PUSH
45638: LD_INT 1
45640: DOUBLE
45641: EQUAL
45642: IFTRUE 45646
45644: GO 45656
45646: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45647: LD_STRING earthquake(getX(game), 0, 32)
45649: PPUSH
45650: CALL_OW 559
45654: GO 45894
45656: LD_INT 2
45658: DOUBLE
45659: EQUAL
45660: IFTRUE 45664
45662: GO 45678
45664: POP
// begin ToLua ( displayStucuk(); ) ;
45665: LD_STRING displayStucuk();
45667: PPUSH
45668: CALL_OW 559
// ResetFog ;
45672: CALL_OW 335
// end ; 3 :
45676: GO 45894
45678: LD_INT 3
45680: DOUBLE
45681: EQUAL
45682: IFTRUE 45686
45684: GO 45790
45686: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45687: LD_ADDR_VAR 0 2
45691: PUSH
45692: LD_INT 22
45694: PUSH
45695: LD_OWVAR 2
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 25
45706: PUSH
45707: LD_INT 1
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PPUSH
45718: CALL_OW 69
45722: ST_TO_ADDR
// if not tmp then
45723: LD_VAR 0 2
45727: NOT
45728: IFFALSE 45732
// exit ;
45730: GO 45894
// un := tmp [ rand ( 1 , tmp ) ] ;
45732: LD_ADDR_VAR 0 3
45736: PUSH
45737: LD_VAR 0 2
45741: PUSH
45742: LD_INT 1
45744: PPUSH
45745: LD_VAR 0 2
45749: PPUSH
45750: CALL_OW 12
45754: ARRAY
45755: ST_TO_ADDR
// if Crawls ( un ) then
45756: LD_VAR 0 3
45760: PPUSH
45761: CALL_OW 318
45765: IFFALSE 45776
// ComWalk ( un ) ;
45767: LD_VAR 0 3
45771: PPUSH
45772: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45776: LD_VAR 0 3
45780: PPUSH
45781: LD_INT 8
45783: PPUSH
45784: CALL_OW 336
// end ; 4 :
45788: GO 45894
45790: LD_INT 4
45792: DOUBLE
45793: EQUAL
45794: IFTRUE 45798
45796: GO 45872
45798: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45799: LD_ADDR_VAR 0 2
45803: PUSH
45804: LD_INT 22
45806: PUSH
45807: LD_OWVAR 2
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 30
45818: PUSH
45819: LD_INT 29
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: EMPTY
45827: LIST
45828: LIST
45829: PPUSH
45830: CALL_OW 69
45834: ST_TO_ADDR
// if not tmp then
45835: LD_VAR 0 2
45839: NOT
45840: IFFALSE 45844
// exit ;
45842: GO 45894
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45844: LD_VAR 0 2
45848: PUSH
45849: LD_INT 1
45851: ARRAY
45852: PPUSH
45853: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45857: LD_VAR 0 2
45861: PUSH
45862: LD_INT 1
45864: ARRAY
45865: PPUSH
45866: CALL_OW 65
// end ; 5 .. 7 :
45870: GO 45894
45872: LD_INT 5
45874: DOUBLE
45875: GREATEREQUAL
45876: IFFALSE 45884
45878: LD_INT 7
45880: DOUBLE
45881: LESSEQUAL
45882: IFTRUE 45886
45884: GO 45893
45886: POP
// StreamSibBomb ; end ;
45887: CALL 42075 0 0
45891: GO 45894
45893: POP
// end ;
45894: PPOPN 3
45896: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45897: LD_EXP 87
45901: IFFALSE 45909
45903: PUSH
45904: LD_EXP 137
45908: AND
45909: IFFALSE 46065
45911: GO 45913
45913: DISABLE
45914: LD_INT 0
45916: PPUSH
45917: PPUSH
45918: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45919: LD_ADDR_VAR 0 2
45923: PUSH
45924: LD_INT 81
45926: PUSH
45927: LD_OWVAR 2
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 2
45938: PUSH
45939: LD_INT 21
45941: PUSH
45942: LD_INT 1
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 21
45951: PUSH
45952: LD_INT 2
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: LIST
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PPUSH
45968: CALL_OW 69
45972: ST_TO_ADDR
// if not tmp then
45973: LD_VAR 0 2
45977: NOT
45978: IFFALSE 45982
// exit ;
45980: GO 46065
// p := 0 ;
45982: LD_ADDR_VAR 0 3
45986: PUSH
45987: LD_INT 0
45989: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45990: LD_INT 35
45992: PPUSH
45993: CALL_OW 67
// p := p + 1 ;
45997: LD_ADDR_VAR 0 3
46001: PUSH
46002: LD_VAR 0 3
46006: PUSH
46007: LD_INT 1
46009: PLUS
46010: ST_TO_ADDR
// for i in tmp do
46011: LD_ADDR_VAR 0 1
46015: PUSH
46016: LD_VAR 0 2
46020: PUSH
46021: FOR_IN
46022: IFFALSE 46053
// if GetLives ( i ) < 1000 then
46024: LD_VAR 0 1
46028: PPUSH
46029: CALL_OW 256
46033: PUSH
46034: LD_INT 1000
46036: LESS
46037: IFFALSE 46051
// SetLives ( i , 1000 ) ;
46039: LD_VAR 0 1
46043: PPUSH
46044: LD_INT 1000
46046: PPUSH
46047: CALL_OW 234
46051: GO 46021
46053: POP
46054: POP
// until p > 20 ;
46055: LD_VAR 0 3
46059: PUSH
46060: LD_INT 20
46062: GREATER
46063: IFFALSE 45990
// end ;
46065: PPOPN 3
46067: END
// every 0 0$1 trigger StreamModeActive and sTime do
46068: LD_EXP 87
46072: IFFALSE 46080
46074: PUSH
46075: LD_EXP 138
46079: AND
46080: IFFALSE 46115
46082: GO 46084
46084: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
46085: LD_INT 28
46087: PPUSH
46088: LD_OWVAR 2
46092: PPUSH
46093: LD_INT 2
46095: PPUSH
46096: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
46100: LD_INT 30
46102: PPUSH
46103: LD_OWVAR 2
46107: PPUSH
46108: LD_INT 2
46110: PPUSH
46111: CALL_OW 322
// end ;
46115: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
46116: LD_EXP 87
46120: IFFALSE 46128
46122: PUSH
46123: LD_EXP 139
46127: AND
46128: IFFALSE 46249
46130: GO 46132
46132: DISABLE
46133: LD_INT 0
46135: PPUSH
46136: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
46137: LD_ADDR_VAR 0 2
46141: PUSH
46142: LD_INT 22
46144: PUSH
46145: LD_OWVAR 2
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 21
46156: PUSH
46157: LD_INT 1
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 3
46166: PUSH
46167: LD_INT 23
46169: PUSH
46170: LD_INT 0
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: LIST
46185: PPUSH
46186: CALL_OW 69
46190: ST_TO_ADDR
// if not tmp then
46191: LD_VAR 0 2
46195: NOT
46196: IFFALSE 46200
// exit ;
46198: GO 46249
// for i in tmp do
46200: LD_ADDR_VAR 0 1
46204: PUSH
46205: LD_VAR 0 2
46209: PUSH
46210: FOR_IN
46211: IFFALSE 46247
// begin if Crawls ( i ) then
46213: LD_VAR 0 1
46217: PPUSH
46218: CALL_OW 318
46222: IFFALSE 46233
// ComWalk ( i ) ;
46224: LD_VAR 0 1
46228: PPUSH
46229: CALL_OW 138
// SetClass ( i , 2 ) ;
46233: LD_VAR 0 1
46237: PPUSH
46238: LD_INT 2
46240: PPUSH
46241: CALL_OW 336
// end ;
46245: GO 46210
46247: POP
46248: POP
// end ;
46249: PPOPN 2
46251: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
46252: LD_EXP 87
46256: IFFALSE 46264
46258: PUSH
46259: LD_EXP 140
46263: AND
46264: IFFALSE 46554
46266: GO 46268
46268: DISABLE
46269: LD_INT 0
46271: PPUSH
46272: PPUSH
46273: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
46274: LD_OWVAR 2
46278: PPUSH
46279: LD_INT 9
46281: PPUSH
46282: LD_INT 1
46284: PPUSH
46285: LD_INT 1
46287: PPUSH
46288: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
46292: LD_INT 9
46294: PPUSH
46295: LD_OWVAR 2
46299: PPUSH
46300: CALL_OW 343
// uc_side := 9 ;
46304: LD_ADDR_OWVAR 20
46308: PUSH
46309: LD_INT 9
46311: ST_TO_ADDR
// uc_nation := 2 ;
46312: LD_ADDR_OWVAR 21
46316: PUSH
46317: LD_INT 2
46319: ST_TO_ADDR
// hc_name := Dark Warrior ;
46320: LD_ADDR_OWVAR 26
46324: PUSH
46325: LD_STRING Dark Warrior
46327: ST_TO_ADDR
// hc_gallery :=  ;
46328: LD_ADDR_OWVAR 33
46332: PUSH
46333: LD_STRING 
46335: ST_TO_ADDR
// hc_noskilllimit := true ;
46336: LD_ADDR_OWVAR 76
46340: PUSH
46341: LD_INT 1
46343: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
46344: LD_ADDR_OWVAR 31
46348: PUSH
46349: LD_INT 30
46351: PUSH
46352: LD_INT 30
46354: PUSH
46355: LD_INT 30
46357: PUSH
46358: LD_INT 30
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: ST_TO_ADDR
// un := CreateHuman ;
46367: LD_ADDR_VAR 0 3
46371: PUSH
46372: CALL_OW 44
46376: ST_TO_ADDR
// hc_noskilllimit := false ;
46377: LD_ADDR_OWVAR 76
46381: PUSH
46382: LD_INT 0
46384: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
46385: LD_VAR 0 3
46389: PPUSH
46390: LD_INT 1
46392: PPUSH
46393: CALL_OW 51
// ToLua ( playRanger() ) ;
46397: LD_STRING playRanger()
46399: PPUSH
46400: CALL_OW 559
// p := 0 ;
46404: LD_ADDR_VAR 0 2
46408: PUSH
46409: LD_INT 0
46411: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46412: LD_INT 35
46414: PPUSH
46415: CALL_OW 67
// p := p + 1 ;
46419: LD_ADDR_VAR 0 2
46423: PUSH
46424: LD_VAR 0 2
46428: PUSH
46429: LD_INT 1
46431: PLUS
46432: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46433: LD_VAR 0 3
46437: PPUSH
46438: CALL_OW 256
46442: PUSH
46443: LD_INT 1000
46445: LESS
46446: IFFALSE 46460
// SetLives ( un , 1000 ) ;
46448: LD_VAR 0 3
46452: PPUSH
46453: LD_INT 1000
46455: PPUSH
46456: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46460: LD_VAR 0 3
46464: PPUSH
46465: LD_INT 81
46467: PUSH
46468: LD_OWVAR 2
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 91
46479: PUSH
46480: LD_VAR 0 3
46484: PUSH
46485: LD_INT 30
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: LIST
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PPUSH
46497: CALL_OW 69
46501: PPUSH
46502: LD_VAR 0 3
46506: PPUSH
46507: CALL_OW 74
46511: PPUSH
46512: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46516: LD_VAR 0 2
46520: PUSH
46521: LD_INT 80
46523: GREATER
46524: IFTRUE 46537
46526: PUSH
46527: LD_VAR 0 3
46531: PPUSH
46532: CALL_OW 301
46536: OR
46537: IFFALSE 46412
// if un then
46539: LD_VAR 0 3
46543: IFFALSE 46554
// RemoveUnit ( un ) ;
46545: LD_VAR 0 3
46549: PPUSH
46550: CALL_OW 64
// end ;
46554: PPOPN 3
46556: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46557: LD_EXP 141
46561: IFFALSE 46677
46563: GO 46565
46565: DISABLE
46566: LD_INT 0
46568: PPUSH
46569: PPUSH
46570: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46571: LD_ADDR_VAR 0 2
46575: PUSH
46576: LD_INT 81
46578: PUSH
46579: LD_OWVAR 2
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 21
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PPUSH
46602: CALL_OW 69
46606: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46607: LD_STRING playComputer()
46609: PPUSH
46610: CALL_OW 559
// if not tmp then
46614: LD_VAR 0 2
46618: NOT
46619: IFFALSE 46623
// exit ;
46621: GO 46677
// for i in tmp do
46623: LD_ADDR_VAR 0 1
46627: PUSH
46628: LD_VAR 0 2
46632: PUSH
46633: FOR_IN
46634: IFFALSE 46675
// for j := 1 to 4 do
46636: LD_ADDR_VAR 0 3
46640: PUSH
46641: DOUBLE
46642: LD_INT 1
46644: DEC
46645: ST_TO_ADDR
46646: LD_INT 4
46648: PUSH
46649: FOR_TO
46650: IFFALSE 46671
// SetSkill ( i , j , 10 ) ;
46652: LD_VAR 0 1
46656: PPUSH
46657: LD_VAR 0 3
46661: PPUSH
46662: LD_INT 10
46664: PPUSH
46665: CALL_OW 237
46669: GO 46649
46671: POP
46672: POP
46673: GO 46633
46675: POP
46676: POP
// end ;
46677: PPOPN 3
46679: END
// every 0 0$1 trigger s30 do var i , tmp ;
46680: LD_EXP 142
46684: IFFALSE 46753
46686: GO 46688
46688: DISABLE
46689: LD_INT 0
46691: PPUSH
46692: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46693: LD_ADDR_VAR 0 2
46697: PUSH
46698: LD_INT 22
46700: PUSH
46701: LD_OWVAR 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PPUSH
46710: CALL_OW 69
46714: ST_TO_ADDR
// if not tmp then
46715: LD_VAR 0 2
46719: NOT
46720: IFFALSE 46724
// exit ;
46722: GO 46753
// for i in tmp do
46724: LD_ADDR_VAR 0 1
46728: PUSH
46729: LD_VAR 0 2
46733: PUSH
46734: FOR_IN
46735: IFFALSE 46751
// SetLives ( i , 300 ) ;
46737: LD_VAR 0 1
46741: PPUSH
46742: LD_INT 300
46744: PPUSH
46745: CALL_OW 234
46749: GO 46734
46751: POP
46752: POP
// end ;
46753: PPOPN 2
46755: END
// every 0 0$1 trigger s60 do var i , tmp ;
46756: LD_EXP 143
46760: IFFALSE 46829
46762: GO 46764
46764: DISABLE
46765: LD_INT 0
46767: PPUSH
46768: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46769: LD_ADDR_VAR 0 2
46773: PUSH
46774: LD_INT 22
46776: PUSH
46777: LD_OWVAR 2
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PPUSH
46786: CALL_OW 69
46790: ST_TO_ADDR
// if not tmp then
46791: LD_VAR 0 2
46795: NOT
46796: IFFALSE 46800
// exit ;
46798: GO 46829
// for i in tmp do
46800: LD_ADDR_VAR 0 1
46804: PUSH
46805: LD_VAR 0 2
46809: PUSH
46810: FOR_IN
46811: IFFALSE 46827
// SetLives ( i , 600 ) ;
46813: LD_VAR 0 1
46817: PPUSH
46818: LD_INT 600
46820: PPUSH
46821: CALL_OW 234
46825: GO 46810
46827: POP
46828: POP
// end ;
46829: PPOPN 2
46831: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46832: LD_INT 0
46834: PPUSH
// case cmd of 301 :
46835: LD_VAR 0 1
46839: PUSH
46840: LD_INT 301
46842: DOUBLE
46843: EQUAL
46844: IFTRUE 46848
46846: GO 46880
46848: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46849: LD_VAR 0 6
46853: PPUSH
46854: LD_VAR 0 7
46858: PPUSH
46859: LD_VAR 0 8
46863: PPUSH
46864: LD_VAR 0 4
46868: PPUSH
46869: LD_VAR 0 5
46873: PPUSH
46874: CALL 48093 0 5
46878: GO 47001
46880: LD_INT 302
46882: DOUBLE
46883: EQUAL
46884: IFTRUE 46888
46886: GO 46925
46888: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46889: LD_VAR 0 6
46893: PPUSH
46894: LD_VAR 0 7
46898: PPUSH
46899: LD_VAR 0 8
46903: PPUSH
46904: LD_VAR 0 9
46908: PPUSH
46909: LD_VAR 0 4
46913: PPUSH
46914: LD_VAR 0 5
46918: PPUSH
46919: CALL 48184 0 6
46923: GO 47001
46925: LD_INT 303
46927: DOUBLE
46928: EQUAL
46929: IFTRUE 46933
46931: GO 46970
46933: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46934: LD_VAR 0 6
46938: PPUSH
46939: LD_VAR 0 7
46943: PPUSH
46944: LD_VAR 0 8
46948: PPUSH
46949: LD_VAR 0 9
46953: PPUSH
46954: LD_VAR 0 4
46958: PPUSH
46959: LD_VAR 0 5
46963: PPUSH
46964: CALL 47006 0 6
46968: GO 47001
46970: LD_INT 304
46972: DOUBLE
46973: EQUAL
46974: IFTRUE 46978
46976: GO 47000
46978: POP
// hHackTeleport ( unit , x , y ) ; end ;
46979: LD_VAR 0 2
46983: PPUSH
46984: LD_VAR 0 4
46988: PPUSH
46989: LD_VAR 0 5
46993: PPUSH
46994: CALL 48777 0 3
46998: GO 47001
47000: POP
// end ;
47001: LD_VAR 0 12
47005: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
47006: LD_INT 0
47008: PPUSH
47009: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
47010: LD_VAR 0 1
47014: PUSH
47015: LD_INT 1
47017: LESS
47018: IFTRUE 47030
47020: PUSH
47021: LD_VAR 0 1
47025: PUSH
47026: LD_INT 3
47028: GREATER
47029: OR
47030: IFTRUE 47048
47032: PUSH
47033: LD_VAR 0 5
47037: PPUSH
47038: LD_VAR 0 6
47042: PPUSH
47043: CALL_OW 428
47047: OR
47048: IFFALSE 47052
// exit ;
47050: GO 47780
// uc_side := your_side ;
47052: LD_ADDR_OWVAR 20
47056: PUSH
47057: LD_OWVAR 2
47061: ST_TO_ADDR
// uc_nation := nation ;
47062: LD_ADDR_OWVAR 21
47066: PUSH
47067: LD_VAR 0 1
47071: ST_TO_ADDR
// bc_level = 1 ;
47072: LD_ADDR_OWVAR 43
47076: PUSH
47077: LD_INT 1
47079: ST_TO_ADDR
// case btype of 1 :
47080: LD_VAR 0 2
47084: PUSH
47085: LD_INT 1
47087: DOUBLE
47088: EQUAL
47089: IFTRUE 47093
47091: GO 47104
47093: POP
// bc_type := b_depot ; 2 :
47094: LD_ADDR_OWVAR 42
47098: PUSH
47099: LD_INT 0
47101: ST_TO_ADDR
47102: GO 47724
47104: LD_INT 2
47106: DOUBLE
47107: EQUAL
47108: IFTRUE 47112
47110: GO 47123
47112: POP
// bc_type := b_warehouse ; 3 :
47113: LD_ADDR_OWVAR 42
47117: PUSH
47118: LD_INT 1
47120: ST_TO_ADDR
47121: GO 47724
47123: LD_INT 3
47125: DOUBLE
47126: EQUAL
47127: IFTRUE 47131
47129: GO 47142
47131: POP
// bc_type := b_lab ; 4 .. 9 :
47132: LD_ADDR_OWVAR 42
47136: PUSH
47137: LD_INT 6
47139: ST_TO_ADDR
47140: GO 47724
47142: LD_INT 4
47144: DOUBLE
47145: GREATEREQUAL
47146: IFFALSE 47154
47148: LD_INT 9
47150: DOUBLE
47151: LESSEQUAL
47152: IFTRUE 47156
47154: GO 47216
47156: POP
// begin bc_type := b_lab_half ;
47157: LD_ADDR_OWVAR 42
47161: PUSH
47162: LD_INT 7
47164: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
47165: LD_ADDR_OWVAR 44
47169: PUSH
47170: LD_INT 10
47172: PUSH
47173: LD_INT 11
47175: PUSH
47176: LD_INT 12
47178: PUSH
47179: LD_INT 15
47181: PUSH
47182: LD_INT 14
47184: PUSH
47185: LD_INT 13
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: PUSH
47196: LD_VAR 0 2
47200: PUSH
47201: LD_INT 3
47203: MINUS
47204: ARRAY
47205: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
47206: LD_ADDR_OWVAR 45
47210: PUSH
47211: LD_INT 9
47213: ST_TO_ADDR
// end ; 10 .. 13 :
47214: GO 47724
47216: LD_INT 10
47218: DOUBLE
47219: GREATEREQUAL
47220: IFFALSE 47228
47222: LD_INT 13
47224: DOUBLE
47225: LESSEQUAL
47226: IFTRUE 47230
47228: GO 47307
47230: POP
// begin bc_type := b_lab_full ;
47231: LD_ADDR_OWVAR 42
47235: PUSH
47236: LD_INT 8
47238: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
47239: LD_ADDR_OWVAR 44
47243: PUSH
47244: LD_INT 10
47246: PUSH
47247: LD_INT 12
47249: PUSH
47250: LD_INT 14
47252: PUSH
47253: LD_INT 13
47255: PUSH
47256: EMPTY
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: PUSH
47262: LD_VAR 0 2
47266: PUSH
47267: LD_INT 9
47269: MINUS
47270: ARRAY
47271: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
47272: LD_ADDR_OWVAR 45
47276: PUSH
47277: LD_INT 11
47279: PUSH
47280: LD_INT 15
47282: PUSH
47283: LD_INT 12
47285: PUSH
47286: LD_INT 15
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: PUSH
47295: LD_VAR 0 2
47299: PUSH
47300: LD_INT 9
47302: MINUS
47303: ARRAY
47304: ST_TO_ADDR
// end ; 14 :
47305: GO 47724
47307: LD_INT 14
47309: DOUBLE
47310: EQUAL
47311: IFTRUE 47315
47313: GO 47326
47315: POP
// bc_type := b_workshop ; 15 :
47316: LD_ADDR_OWVAR 42
47320: PUSH
47321: LD_INT 2
47323: ST_TO_ADDR
47324: GO 47724
47326: LD_INT 15
47328: DOUBLE
47329: EQUAL
47330: IFTRUE 47334
47332: GO 47345
47334: POP
// bc_type := b_factory ; 16 :
47335: LD_ADDR_OWVAR 42
47339: PUSH
47340: LD_INT 3
47342: ST_TO_ADDR
47343: GO 47724
47345: LD_INT 16
47347: DOUBLE
47348: EQUAL
47349: IFTRUE 47353
47351: GO 47364
47353: POP
// bc_type := b_ext_gun ; 17 :
47354: LD_ADDR_OWVAR 42
47358: PUSH
47359: LD_INT 17
47361: ST_TO_ADDR
47362: GO 47724
47364: LD_INT 17
47366: DOUBLE
47367: EQUAL
47368: IFTRUE 47372
47370: GO 47400
47372: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
47373: LD_ADDR_OWVAR 42
47377: PUSH
47378: LD_INT 19
47380: PUSH
47381: LD_INT 23
47383: PUSH
47384: LD_INT 19
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: LIST
47391: PUSH
47392: LD_VAR 0 1
47396: ARRAY
47397: ST_TO_ADDR
47398: GO 47724
47400: LD_INT 18
47402: DOUBLE
47403: EQUAL
47404: IFTRUE 47408
47406: GO 47419
47408: POP
// bc_type := b_ext_radar ; 19 :
47409: LD_ADDR_OWVAR 42
47413: PUSH
47414: LD_INT 20
47416: ST_TO_ADDR
47417: GO 47724
47419: LD_INT 19
47421: DOUBLE
47422: EQUAL
47423: IFTRUE 47427
47425: GO 47438
47427: POP
// bc_type := b_ext_radio ; 20 :
47428: LD_ADDR_OWVAR 42
47432: PUSH
47433: LD_INT 22
47435: ST_TO_ADDR
47436: GO 47724
47438: LD_INT 20
47440: DOUBLE
47441: EQUAL
47442: IFTRUE 47446
47444: GO 47457
47446: POP
// bc_type := b_ext_siberium ; 21 :
47447: LD_ADDR_OWVAR 42
47451: PUSH
47452: LD_INT 21
47454: ST_TO_ADDR
47455: GO 47724
47457: LD_INT 21
47459: DOUBLE
47460: EQUAL
47461: IFTRUE 47465
47463: GO 47476
47465: POP
// bc_type := b_ext_computer ; 22 :
47466: LD_ADDR_OWVAR 42
47470: PUSH
47471: LD_INT 24
47473: ST_TO_ADDR
47474: GO 47724
47476: LD_INT 22
47478: DOUBLE
47479: EQUAL
47480: IFTRUE 47484
47482: GO 47495
47484: POP
// bc_type := b_ext_track ; 23 :
47485: LD_ADDR_OWVAR 42
47489: PUSH
47490: LD_INT 16
47492: ST_TO_ADDR
47493: GO 47724
47495: LD_INT 23
47497: DOUBLE
47498: EQUAL
47499: IFTRUE 47503
47501: GO 47514
47503: POP
// bc_type := b_ext_laser ; 24 :
47504: LD_ADDR_OWVAR 42
47508: PUSH
47509: LD_INT 25
47511: ST_TO_ADDR
47512: GO 47724
47514: LD_INT 24
47516: DOUBLE
47517: EQUAL
47518: IFTRUE 47522
47520: GO 47533
47522: POP
// bc_type := b_control_tower ; 25 :
47523: LD_ADDR_OWVAR 42
47527: PUSH
47528: LD_INT 36
47530: ST_TO_ADDR
47531: GO 47724
47533: LD_INT 25
47535: DOUBLE
47536: EQUAL
47537: IFTRUE 47541
47539: GO 47552
47541: POP
// bc_type := b_breastwork ; 26 :
47542: LD_ADDR_OWVAR 42
47546: PUSH
47547: LD_INT 31
47549: ST_TO_ADDR
47550: GO 47724
47552: LD_INT 26
47554: DOUBLE
47555: EQUAL
47556: IFTRUE 47560
47558: GO 47571
47560: POP
// bc_type := b_bunker ; 27 :
47561: LD_ADDR_OWVAR 42
47565: PUSH
47566: LD_INT 32
47568: ST_TO_ADDR
47569: GO 47724
47571: LD_INT 27
47573: DOUBLE
47574: EQUAL
47575: IFTRUE 47579
47577: GO 47590
47579: POP
// bc_type := b_turret ; 28 :
47580: LD_ADDR_OWVAR 42
47584: PUSH
47585: LD_INT 33
47587: ST_TO_ADDR
47588: GO 47724
47590: LD_INT 28
47592: DOUBLE
47593: EQUAL
47594: IFTRUE 47598
47596: GO 47609
47598: POP
// bc_type := b_armoury ; 29 :
47599: LD_ADDR_OWVAR 42
47603: PUSH
47604: LD_INT 4
47606: ST_TO_ADDR
47607: GO 47724
47609: LD_INT 29
47611: DOUBLE
47612: EQUAL
47613: IFTRUE 47617
47615: GO 47628
47617: POP
// bc_type := b_barracks ; 30 :
47618: LD_ADDR_OWVAR 42
47622: PUSH
47623: LD_INT 5
47625: ST_TO_ADDR
47626: GO 47724
47628: LD_INT 30
47630: DOUBLE
47631: EQUAL
47632: IFTRUE 47636
47634: GO 47647
47636: POP
// bc_type := b_solar_power ; 31 :
47637: LD_ADDR_OWVAR 42
47641: PUSH
47642: LD_INT 27
47644: ST_TO_ADDR
47645: GO 47724
47647: LD_INT 31
47649: DOUBLE
47650: EQUAL
47651: IFTRUE 47655
47653: GO 47666
47655: POP
// bc_type := b_oil_power ; 32 :
47656: LD_ADDR_OWVAR 42
47660: PUSH
47661: LD_INT 26
47663: ST_TO_ADDR
47664: GO 47724
47666: LD_INT 32
47668: DOUBLE
47669: EQUAL
47670: IFTRUE 47674
47672: GO 47685
47674: POP
// bc_type := b_siberite_power ; 33 :
47675: LD_ADDR_OWVAR 42
47679: PUSH
47680: LD_INT 28
47682: ST_TO_ADDR
47683: GO 47724
47685: LD_INT 33
47687: DOUBLE
47688: EQUAL
47689: IFTRUE 47693
47691: GO 47704
47693: POP
// bc_type := b_oil_mine ; 34 :
47694: LD_ADDR_OWVAR 42
47698: PUSH
47699: LD_INT 29
47701: ST_TO_ADDR
47702: GO 47724
47704: LD_INT 34
47706: DOUBLE
47707: EQUAL
47708: IFTRUE 47712
47710: GO 47723
47712: POP
// bc_type := b_siberite_mine ; end ;
47713: LD_ADDR_OWVAR 42
47717: PUSH
47718: LD_INT 30
47720: ST_TO_ADDR
47721: GO 47724
47723: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47724: LD_ADDR_VAR 0 8
47728: PUSH
47729: LD_VAR 0 5
47733: PPUSH
47734: LD_VAR 0 6
47738: PPUSH
47739: LD_VAR 0 3
47743: PPUSH
47744: CALL_OW 47
47748: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47749: LD_OWVAR 42
47753: PUSH
47754: LD_INT 32
47756: PUSH
47757: LD_INT 33
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: IN
47764: IFFALSE 47780
// PlaceWeaponTurret ( b , weapon ) ;
47766: LD_VAR 0 8
47770: PPUSH
47771: LD_VAR 0 4
47775: PPUSH
47776: CALL_OW 431
// end ;
47780: LD_VAR 0 7
47784: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47785: LD_INT 0
47787: PPUSH
47788: PPUSH
47789: PPUSH
47790: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47791: LD_ADDR_VAR 0 4
47795: PUSH
47796: LD_INT 22
47798: PUSH
47799: LD_OWVAR 2
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: PUSH
47808: LD_INT 2
47810: PUSH
47811: LD_INT 30
47813: PUSH
47814: LD_INT 0
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 30
47823: PUSH
47824: LD_INT 1
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: LIST
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PPUSH
47840: CALL_OW 69
47844: ST_TO_ADDR
// if not tmp then
47845: LD_VAR 0 4
47849: NOT
47850: IFFALSE 47854
// exit ;
47852: GO 47913
// for i in tmp do
47854: LD_ADDR_VAR 0 2
47858: PUSH
47859: LD_VAR 0 4
47863: PUSH
47864: FOR_IN
47865: IFFALSE 47911
// for j = 1 to 3 do
47867: LD_ADDR_VAR 0 3
47871: PUSH
47872: DOUBLE
47873: LD_INT 1
47875: DEC
47876: ST_TO_ADDR
47877: LD_INT 3
47879: PUSH
47880: FOR_TO
47881: IFFALSE 47907
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47883: LD_VAR 0 2
47887: PPUSH
47888: CALL_OW 274
47892: PPUSH
47893: LD_VAR 0 3
47897: PPUSH
47898: LD_INT 99999
47900: PPUSH
47901: CALL_OW 277
47905: GO 47880
47907: POP
47908: POP
47909: GO 47864
47911: POP
47912: POP
// end ;
47913: LD_VAR 0 1
47917: RET
// export function hHackSetLevel10 ; var i , j ; begin
47918: LD_INT 0
47920: PPUSH
47921: PPUSH
47922: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47923: LD_ADDR_VAR 0 2
47927: PUSH
47928: LD_INT 21
47930: PUSH
47931: LD_INT 1
47933: PUSH
47934: EMPTY
47935: LIST
47936: LIST
47937: PPUSH
47938: CALL_OW 69
47942: PUSH
47943: FOR_IN
47944: IFFALSE 47996
// if IsSelected ( i ) then
47946: LD_VAR 0 2
47950: PPUSH
47951: CALL_OW 306
47955: IFFALSE 47994
// begin for j := 1 to 4 do
47957: LD_ADDR_VAR 0 3
47961: PUSH
47962: DOUBLE
47963: LD_INT 1
47965: DEC
47966: ST_TO_ADDR
47967: LD_INT 4
47969: PUSH
47970: FOR_TO
47971: IFFALSE 47992
// SetSkill ( i , j , 10 ) ;
47973: LD_VAR 0 2
47977: PPUSH
47978: LD_VAR 0 3
47982: PPUSH
47983: LD_INT 10
47985: PPUSH
47986: CALL_OW 237
47990: GO 47970
47992: POP
47993: POP
// end ;
47994: GO 47943
47996: POP
47997: POP
// end ;
47998: LD_VAR 0 1
48002: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
48003: LD_INT 0
48005: PPUSH
48006: PPUSH
48007: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
48008: LD_ADDR_VAR 0 2
48012: PUSH
48013: LD_INT 22
48015: PUSH
48016: LD_OWVAR 2
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 21
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: EMPTY
48036: LIST
48037: LIST
48038: PPUSH
48039: CALL_OW 69
48043: PUSH
48044: FOR_IN
48045: IFFALSE 48086
// begin for j := 1 to 4 do
48047: LD_ADDR_VAR 0 3
48051: PUSH
48052: DOUBLE
48053: LD_INT 1
48055: DEC
48056: ST_TO_ADDR
48057: LD_INT 4
48059: PUSH
48060: FOR_TO
48061: IFFALSE 48082
// SetSkill ( i , j , 10 ) ;
48063: LD_VAR 0 2
48067: PPUSH
48068: LD_VAR 0 3
48072: PPUSH
48073: LD_INT 10
48075: PPUSH
48076: CALL_OW 237
48080: GO 48060
48082: POP
48083: POP
// end ;
48084: GO 48044
48086: POP
48087: POP
// end ;
48088: LD_VAR 0 1
48092: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
48093: LD_INT 0
48095: PPUSH
// uc_side := your_side ;
48096: LD_ADDR_OWVAR 20
48100: PUSH
48101: LD_OWVAR 2
48105: ST_TO_ADDR
// uc_nation := nation ;
48106: LD_ADDR_OWVAR 21
48110: PUSH
48111: LD_VAR 0 1
48115: ST_TO_ADDR
// InitHc ;
48116: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
48120: LD_INT 0
48122: PPUSH
48123: LD_VAR 0 2
48127: PPUSH
48128: LD_VAR 0 3
48132: PPUSH
48133: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
48137: LD_VAR 0 4
48141: PPUSH
48142: LD_VAR 0 5
48146: PPUSH
48147: CALL_OW 428
48151: PUSH
48152: LD_INT 0
48154: EQUAL
48155: IFFALSE 48179
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
48157: CALL_OW 44
48161: PPUSH
48162: LD_VAR 0 4
48166: PPUSH
48167: LD_VAR 0 5
48171: PPUSH
48172: LD_INT 1
48174: PPUSH
48175: CALL_OW 48
// end ;
48179: LD_VAR 0 6
48183: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
48184: LD_INT 0
48186: PPUSH
48187: PPUSH
// uc_side := your_side ;
48188: LD_ADDR_OWVAR 20
48192: PUSH
48193: LD_OWVAR 2
48197: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
48198: LD_VAR 0 1
48202: PUSH
48203: LD_INT 1
48205: PUSH
48206: LD_INT 2
48208: PUSH
48209: LD_INT 3
48211: PUSH
48212: LD_INT 4
48214: PUSH
48215: LD_INT 5
48217: PUSH
48218: EMPTY
48219: LIST
48220: LIST
48221: LIST
48222: LIST
48223: LIST
48224: IN
48225: IFFALSE 48237
// uc_nation := nation_american else
48227: LD_ADDR_OWVAR 21
48231: PUSH
48232: LD_INT 1
48234: ST_TO_ADDR
48235: GO 48280
// if chassis in [ 11 , 12 , 13 , 14 ] then
48237: LD_VAR 0 1
48241: PUSH
48242: LD_INT 11
48244: PUSH
48245: LD_INT 12
48247: PUSH
48248: LD_INT 13
48250: PUSH
48251: LD_INT 14
48253: PUSH
48254: EMPTY
48255: LIST
48256: LIST
48257: LIST
48258: LIST
48259: IN
48260: IFFALSE 48272
// uc_nation := nation_arabian else
48262: LD_ADDR_OWVAR 21
48266: PUSH
48267: LD_INT 2
48269: ST_TO_ADDR
48270: GO 48280
// uc_nation := nation_russian ;
48272: LD_ADDR_OWVAR 21
48276: PUSH
48277: LD_INT 3
48279: ST_TO_ADDR
// vc_chassis := chassis ;
48280: LD_ADDR_OWVAR 37
48284: PUSH
48285: LD_VAR 0 1
48289: ST_TO_ADDR
// vc_engine := engine ;
48290: LD_ADDR_OWVAR 39
48294: PUSH
48295: LD_VAR 0 2
48299: ST_TO_ADDR
// vc_control := control ;
48300: LD_ADDR_OWVAR 38
48304: PUSH
48305: LD_VAR 0 3
48309: ST_TO_ADDR
// vc_weapon := weapon ;
48310: LD_ADDR_OWVAR 40
48314: PUSH
48315: LD_VAR 0 4
48319: ST_TO_ADDR
// un := CreateVehicle ;
48320: LD_ADDR_VAR 0 8
48324: PUSH
48325: CALL_OW 45
48329: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
48330: LD_VAR 0 8
48334: PPUSH
48335: LD_INT 0
48337: PPUSH
48338: LD_INT 5
48340: PPUSH
48341: CALL_OW 12
48345: PPUSH
48346: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
48350: LD_VAR 0 8
48354: PPUSH
48355: LD_VAR 0 5
48359: PPUSH
48360: LD_VAR 0 6
48364: PPUSH
48365: LD_INT 1
48367: PPUSH
48368: CALL_OW 48
// end ;
48372: LD_VAR 0 7
48376: RET
// export hInvincible ; every 1 do
48377: GO 48379
48379: DISABLE
// hInvincible := [ ] ;
48380: LD_ADDR_EXP 144
48384: PUSH
48385: EMPTY
48386: ST_TO_ADDR
48387: END
// every 10 do var i ;
48388: GO 48390
48390: DISABLE
48391: LD_INT 0
48393: PPUSH
// begin enable ;
48394: ENABLE
// if not hInvincible then
48395: LD_EXP 144
48399: NOT
48400: IFFALSE 48404
// exit ;
48402: GO 48448
// for i in hInvincible do
48404: LD_ADDR_VAR 0 1
48408: PUSH
48409: LD_EXP 144
48413: PUSH
48414: FOR_IN
48415: IFFALSE 48446
// if GetLives ( i ) < 1000 then
48417: LD_VAR 0 1
48421: PPUSH
48422: CALL_OW 256
48426: PUSH
48427: LD_INT 1000
48429: LESS
48430: IFFALSE 48444
// SetLives ( i , 1000 ) ;
48432: LD_VAR 0 1
48436: PPUSH
48437: LD_INT 1000
48439: PPUSH
48440: CALL_OW 234
48444: GO 48414
48446: POP
48447: POP
// end ;
48448: PPOPN 1
48450: END
// export function hHackInvincible ; var i ; begin
48451: LD_INT 0
48453: PPUSH
48454: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48455: LD_ADDR_VAR 0 2
48459: PUSH
48460: LD_INT 2
48462: PUSH
48463: LD_INT 21
48465: PUSH
48466: LD_INT 1
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: PUSH
48473: LD_INT 21
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: LIST
48487: PPUSH
48488: CALL_OW 69
48492: PUSH
48493: FOR_IN
48494: IFFALSE 48555
// if IsSelected ( i ) then
48496: LD_VAR 0 2
48500: PPUSH
48501: CALL_OW 306
48505: IFFALSE 48553
// begin if i in hInvincible then
48507: LD_VAR 0 2
48511: PUSH
48512: LD_EXP 144
48516: IN
48517: IFFALSE 48537
// hInvincible := hInvincible diff i else
48519: LD_ADDR_EXP 144
48523: PUSH
48524: LD_EXP 144
48528: PUSH
48529: LD_VAR 0 2
48533: DIFF
48534: ST_TO_ADDR
48535: GO 48553
// hInvincible := hInvincible union i ;
48537: LD_ADDR_EXP 144
48541: PUSH
48542: LD_EXP 144
48546: PUSH
48547: LD_VAR 0 2
48551: UNION
48552: ST_TO_ADDR
// end ;
48553: GO 48493
48555: POP
48556: POP
// end ;
48557: LD_VAR 0 1
48561: RET
// export function hHackInvisible ; var i , j ; begin
48562: LD_INT 0
48564: PPUSH
48565: PPUSH
48566: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48567: LD_ADDR_VAR 0 2
48571: PUSH
48572: LD_INT 21
48574: PUSH
48575: LD_INT 1
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PPUSH
48582: CALL_OW 69
48586: PUSH
48587: FOR_IN
48588: IFFALSE 48612
// if IsSelected ( i ) then
48590: LD_VAR 0 2
48594: PPUSH
48595: CALL_OW 306
48599: IFFALSE 48610
// ComForceInvisible ( i ) ;
48601: LD_VAR 0 2
48605: PPUSH
48606: CALL_OW 496
48610: GO 48587
48612: POP
48613: POP
// end ;
48614: LD_VAR 0 1
48618: RET
// export function hHackChangeYourSide ; begin
48619: LD_INT 0
48621: PPUSH
// if your_side = 8 then
48622: LD_OWVAR 2
48626: PUSH
48627: LD_INT 8
48629: EQUAL
48630: IFFALSE 48642
// your_side := 0 else
48632: LD_ADDR_OWVAR 2
48636: PUSH
48637: LD_INT 0
48639: ST_TO_ADDR
48640: GO 48656
// your_side := your_side + 1 ;
48642: LD_ADDR_OWVAR 2
48646: PUSH
48647: LD_OWVAR 2
48651: PUSH
48652: LD_INT 1
48654: PLUS
48655: ST_TO_ADDR
// end ;
48656: LD_VAR 0 1
48660: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48661: LD_INT 0
48663: PPUSH
48664: PPUSH
48665: PPUSH
// for i in all_units do
48666: LD_ADDR_VAR 0 2
48670: PUSH
48671: LD_OWVAR 3
48675: PUSH
48676: FOR_IN
48677: IFFALSE 48755
// if IsSelected ( i ) then
48679: LD_VAR 0 2
48683: PPUSH
48684: CALL_OW 306
48688: IFFALSE 48753
// begin j := GetSide ( i ) ;
48690: LD_ADDR_VAR 0 3
48694: PUSH
48695: LD_VAR 0 2
48699: PPUSH
48700: CALL_OW 255
48704: ST_TO_ADDR
// if j = 8 then
48705: LD_VAR 0 3
48709: PUSH
48710: LD_INT 8
48712: EQUAL
48713: IFFALSE 48725
// j := 0 else
48715: LD_ADDR_VAR 0 3
48719: PUSH
48720: LD_INT 0
48722: ST_TO_ADDR
48723: GO 48739
// j := j + 1 ;
48725: LD_ADDR_VAR 0 3
48729: PUSH
48730: LD_VAR 0 3
48734: PUSH
48735: LD_INT 1
48737: PLUS
48738: ST_TO_ADDR
// SetSide ( i , j ) ;
48739: LD_VAR 0 2
48743: PPUSH
48744: LD_VAR 0 3
48748: PPUSH
48749: CALL_OW 235
// end ;
48753: GO 48676
48755: POP
48756: POP
// end ;
48757: LD_VAR 0 1
48761: RET
// export function hHackFog ; begin
48762: LD_INT 0
48764: PPUSH
// FogOff ( true ) ;
48765: LD_INT 1
48767: PPUSH
48768: CALL_OW 344
// end ;
48772: LD_VAR 0 1
48776: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48777: LD_INT 0
48779: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48780: LD_VAR 0 1
48784: PPUSH
48785: LD_VAR 0 2
48789: PPUSH
48790: LD_VAR 0 3
48794: PPUSH
48795: LD_INT 1
48797: PPUSH
48798: LD_INT 1
48800: PPUSH
48801: CALL_OW 483
// CenterOnXY ( x , y ) ;
48805: LD_VAR 0 2
48809: PPUSH
48810: LD_VAR 0 3
48814: PPUSH
48815: CALL_OW 84
// end ;
48819: LD_VAR 0 4
48823: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48824: LD_INT 0
48826: PPUSH
48827: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48828: LD_VAR 0 1
48832: NOT
48833: IFTRUE 48852
48835: PUSH
48836: LD_VAR 0 2
48840: PPUSH
48841: LD_VAR 0 3
48845: PPUSH
48846: CALL_OW 488
48850: NOT
48851: OR
48852: IFTRUE 48887
48854: PUSH
48855: LD_VAR 0 1
48859: PPUSH
48860: CALL_OW 266
48864: PUSH
48865: LD_INT 3
48867: NONEQUAL
48868: IFFALSE 48886
48870: PUSH
48871: LD_VAR 0 1
48875: PPUSH
48876: CALL_OW 247
48880: PUSH
48881: LD_INT 1
48883: EQUAL
48884: NOT
48885: AND
48886: OR
48887: IFFALSE 48891
// exit ;
48889: GO 49173
// if GetType ( factory ) = unit_human then
48891: LD_VAR 0 1
48895: PPUSH
48896: CALL_OW 247
48900: PUSH
48901: LD_INT 1
48903: EQUAL
48904: IFFALSE 48921
// factory := IsInUnit ( factory ) ;
48906: LD_ADDR_VAR 0 1
48910: PUSH
48911: LD_VAR 0 1
48915: PPUSH
48916: CALL_OW 310
48920: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48921: LD_VAR 0 1
48925: PPUSH
48926: CALL_OW 266
48930: PUSH
48931: LD_INT 3
48933: NONEQUAL
48934: IFFALSE 48938
// exit ;
48936: GO 49173
// for i := 1 to Count ( factoryWaypoints ) do
48938: LD_ADDR_VAR 0 5
48942: PUSH
48943: DOUBLE
48944: LD_INT 1
48946: DEC
48947: ST_TO_ADDR
48948: LD_EXP 145
48952: PPUSH
48953: CALL 58706 0 1
48957: PUSH
48958: FOR_TO
48959: IFFALSE 49121
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
48961: LD_VAR 0 2
48965: PPUSH
48966: LD_VAR 0 3
48970: PPUSH
48971: CALL_OW 428
48975: PUSH
48976: LD_EXP 145
48980: PUSH
48981: LD_VAR 0 5
48985: ARRAY
48986: PUSH
48987: LD_INT 2
48989: ARRAY
48990: EQUAL
48991: IFFALSE 49023
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
48993: LD_ADDR_EXP 145
48997: PUSH
48998: LD_EXP 145
49002: PPUSH
49003: LD_VAR 0 5
49007: PPUSH
49008: CALL_OW 3
49012: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49013: CALL 49178 0 0
// exit ;
49017: POP
49018: POP
49019: GO 49173
// end else
49021: GO 49119
// if factory = factoryWaypoints [ i ] [ 2 ] then
49023: LD_VAR 0 1
49027: PUSH
49028: LD_EXP 145
49032: PUSH
49033: LD_VAR 0 5
49037: ARRAY
49038: PUSH
49039: LD_INT 2
49041: ARRAY
49042: EQUAL
49043: IFFALSE 49119
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
49045: LD_ADDR_EXP 145
49049: PUSH
49050: LD_EXP 145
49054: PPUSH
49055: LD_VAR 0 5
49059: PPUSH
49060: CALL_OW 3
49064: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
49065: LD_ADDR_EXP 145
49069: PUSH
49070: LD_EXP 145
49074: PPUSH
49075: LD_VAR 0 1
49079: PPUSH
49080: CALL_OW 255
49084: PUSH
49085: LD_VAR 0 1
49089: PUSH
49090: LD_VAR 0 2
49094: PUSH
49095: LD_VAR 0 3
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: LIST
49104: LIST
49105: PPUSH
49106: CALL 94638 0 2
49110: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49111: CALL 49178 0 0
// exit ;
49115: POP
49116: POP
49117: GO 49173
// end ; end ;
49119: GO 48958
49121: POP
49122: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
49123: LD_ADDR_EXP 145
49127: PUSH
49128: LD_EXP 145
49132: PPUSH
49133: LD_VAR 0 1
49137: PPUSH
49138: CALL_OW 255
49142: PUSH
49143: LD_VAR 0 1
49147: PUSH
49148: LD_VAR 0 2
49152: PUSH
49153: LD_VAR 0 3
49157: PUSH
49158: EMPTY
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: PPUSH
49164: CALL 94638 0 2
49168: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49169: CALL 49178 0 0
// end ;
49173: LD_VAR 0 4
49177: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
49178: LD_INT 0
49180: PPUSH
49181: PPUSH
49182: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
49183: LD_STRING resetFactoryWaypoint();
49185: PPUSH
49186: CALL_OW 559
// if factoryWaypoints then
49190: LD_EXP 145
49194: IFFALSE 49315
// begin list := factoryWaypoints ;
49196: LD_ADDR_VAR 0 3
49200: PUSH
49201: LD_EXP 145
49205: ST_TO_ADDR
// for i := 1 to list do
49206: LD_ADDR_VAR 0 2
49210: PUSH
49211: DOUBLE
49212: LD_INT 1
49214: DEC
49215: ST_TO_ADDR
49216: LD_VAR 0 3
49220: PUSH
49221: FOR_TO
49222: IFFALSE 49313
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
49224: LD_STRING setFactoryWaypointXY(
49226: PUSH
49227: LD_VAR 0 3
49231: PUSH
49232: LD_VAR 0 2
49236: ARRAY
49237: PUSH
49238: LD_INT 1
49240: ARRAY
49241: STR
49242: PUSH
49243: LD_STRING ,
49245: STR
49246: PUSH
49247: LD_VAR 0 3
49251: PUSH
49252: LD_VAR 0 2
49256: ARRAY
49257: PUSH
49258: LD_INT 2
49260: ARRAY
49261: STR
49262: PUSH
49263: LD_STRING ,
49265: STR
49266: PUSH
49267: LD_VAR 0 3
49271: PUSH
49272: LD_VAR 0 2
49276: ARRAY
49277: PUSH
49278: LD_INT 3
49280: ARRAY
49281: STR
49282: PUSH
49283: LD_STRING ,
49285: STR
49286: PUSH
49287: LD_VAR 0 3
49291: PUSH
49292: LD_VAR 0 2
49296: ARRAY
49297: PUSH
49298: LD_INT 4
49300: ARRAY
49301: STR
49302: PUSH
49303: LD_STRING )
49305: STR
49306: PPUSH
49307: CALL_OW 559
49311: GO 49221
49313: POP
49314: POP
// end ; end ;
49315: LD_VAR 0 1
49319: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
49320: LD_INT 0
49322: PPUSH
// if HexInfo ( x , y ) = warehouse then
49323: LD_VAR 0 2
49327: PPUSH
49328: LD_VAR 0 3
49332: PPUSH
49333: CALL_OW 428
49337: PUSH
49338: LD_VAR 0 1
49342: EQUAL
49343: IFFALSE 49370
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
49345: LD_ADDR_EXP 147
49349: PUSH
49350: LD_EXP 147
49354: PPUSH
49355: LD_VAR 0 1
49359: PPUSH
49360: LD_INT 0
49362: PPUSH
49363: CALL_OW 1
49367: ST_TO_ADDR
49368: GO 49421
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
49370: LD_ADDR_EXP 147
49374: PUSH
49375: LD_EXP 147
49379: PPUSH
49380: LD_VAR 0 1
49384: PPUSH
49385: LD_VAR 0 1
49389: PPUSH
49390: CALL_OW 255
49394: PUSH
49395: LD_VAR 0 1
49399: PUSH
49400: LD_VAR 0 2
49404: PUSH
49405: LD_VAR 0 3
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: LIST
49414: LIST
49415: PPUSH
49416: CALL_OW 1
49420: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
49421: CALL 49430 0 0
// end ;
49425: LD_VAR 0 4
49429: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
49430: LD_INT 0
49432: PPUSH
49433: PPUSH
49434: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
49435: LD_STRING resetWarehouseGatheringPoints();
49437: PPUSH
49438: CALL_OW 559
// if warehouseGatheringPoints then
49442: LD_EXP 147
49446: IFFALSE 49572
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
49448: LD_ADDR_VAR 0 3
49452: PUSH
49453: LD_EXP 147
49457: PPUSH
49458: CALL 98572 0 1
49462: ST_TO_ADDR
// for i := 1 to list do
49463: LD_ADDR_VAR 0 2
49467: PUSH
49468: DOUBLE
49469: LD_INT 1
49471: DEC
49472: ST_TO_ADDR
49473: LD_VAR 0 3
49477: PUSH
49478: FOR_TO
49479: IFFALSE 49570
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
49481: LD_STRING setWarehouseGatheringPointXY(
49483: PUSH
49484: LD_VAR 0 3
49488: PUSH
49489: LD_VAR 0 2
49493: ARRAY
49494: PUSH
49495: LD_INT 1
49497: ARRAY
49498: STR
49499: PUSH
49500: LD_STRING ,
49502: STR
49503: PUSH
49504: LD_VAR 0 3
49508: PUSH
49509: LD_VAR 0 2
49513: ARRAY
49514: PUSH
49515: LD_INT 2
49517: ARRAY
49518: STR
49519: PUSH
49520: LD_STRING ,
49522: STR
49523: PUSH
49524: LD_VAR 0 3
49528: PUSH
49529: LD_VAR 0 2
49533: ARRAY
49534: PUSH
49535: LD_INT 3
49537: ARRAY
49538: STR
49539: PUSH
49540: LD_STRING ,
49542: STR
49543: PUSH
49544: LD_VAR 0 3
49548: PUSH
49549: LD_VAR 0 2
49553: ARRAY
49554: PUSH
49555: LD_INT 4
49557: ARRAY
49558: STR
49559: PUSH
49560: LD_STRING )
49562: STR
49563: PPUSH
49564: CALL_OW 559
49568: GO 49478
49570: POP
49571: POP
// end ; end ;
49572: LD_VAR 0 1
49576: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49577: LD_EXP 147
49581: IFFALSE 50276
49583: GO 49585
49585: DISABLE
49586: LD_INT 0
49588: PPUSH
49589: PPUSH
49590: PPUSH
49591: PPUSH
49592: PPUSH
49593: PPUSH
49594: PPUSH
49595: PPUSH
49596: PPUSH
// begin enable ;
49597: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49598: LD_ADDR_VAR 0 3
49602: PUSH
49603: LD_EXP 147
49607: PPUSH
49608: CALL 98572 0 1
49612: ST_TO_ADDR
// if not list then
49613: LD_VAR 0 3
49617: NOT
49618: IFFALSE 49622
// exit ;
49620: GO 50276
// for i := 1 to list do
49622: LD_ADDR_VAR 0 1
49626: PUSH
49627: DOUBLE
49628: LD_INT 1
49630: DEC
49631: ST_TO_ADDR
49632: LD_VAR 0 3
49636: PUSH
49637: FOR_TO
49638: IFFALSE 50274
// begin depot := list [ i ] [ 2 ] ;
49640: LD_ADDR_VAR 0 8
49644: PUSH
49645: LD_VAR 0 3
49649: PUSH
49650: LD_VAR 0 1
49654: ARRAY
49655: PUSH
49656: LD_INT 2
49658: ARRAY
49659: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49660: LD_ADDR_VAR 0 5
49664: PUSH
49665: LD_VAR 0 3
49669: PUSH
49670: LD_VAR 0 1
49674: ARRAY
49675: PUSH
49676: LD_INT 1
49678: ARRAY
49679: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49680: LD_VAR 0 8
49684: PPUSH
49685: CALL_OW 301
49689: IFTRUE 49708
49691: PUSH
49692: LD_VAR 0 5
49696: PUSH
49697: LD_VAR 0 8
49701: PPUSH
49702: CALL_OW 255
49706: NONEQUAL
49707: OR
49708: IFFALSE 49737
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49710: LD_ADDR_EXP 147
49714: PUSH
49715: LD_EXP 147
49719: PPUSH
49720: LD_VAR 0 8
49724: PPUSH
49725: LD_INT 0
49727: PPUSH
49728: CALL_OW 1
49732: ST_TO_ADDR
// exit ;
49733: POP
49734: POP
49735: GO 50276
// end ; x := list [ i ] [ 3 ] ;
49737: LD_ADDR_VAR 0 6
49741: PUSH
49742: LD_VAR 0 3
49746: PUSH
49747: LD_VAR 0 1
49751: ARRAY
49752: PUSH
49753: LD_INT 3
49755: ARRAY
49756: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49757: LD_ADDR_VAR 0 7
49761: PUSH
49762: LD_VAR 0 3
49766: PUSH
49767: LD_VAR 0 1
49771: ARRAY
49772: PUSH
49773: LD_INT 4
49775: ARRAY
49776: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49777: LD_ADDR_VAR 0 9
49781: PUSH
49782: LD_VAR 0 6
49786: PPUSH
49787: LD_VAR 0 7
49791: PPUSH
49792: LD_INT 16
49794: PPUSH
49795: CALL 97146 0 3
49799: ST_TO_ADDR
// if not cratesNearbyPoint then
49800: LD_VAR 0 9
49804: NOT
49805: IFFALSE 49811
// exit ;
49807: POP
49808: POP
49809: GO 50276
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49811: LD_ADDR_VAR 0 4
49815: PUSH
49816: LD_INT 22
49818: PUSH
49819: LD_VAR 0 5
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 3
49830: PUSH
49831: LD_INT 60
49833: PUSH
49834: EMPTY
49835: LIST
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 91
49843: PUSH
49844: LD_VAR 0 8
49848: PUSH
49849: LD_INT 6
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: LIST
49856: PUSH
49857: LD_INT 2
49859: PUSH
49860: LD_INT 25
49862: PUSH
49863: LD_INT 2
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 25
49872: PUSH
49873: LD_INT 16
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: LIST
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: PPUSH
49891: CALL_OW 69
49895: PUSH
49896: LD_VAR 0 8
49900: PPUSH
49901: CALL_OW 313
49905: PPUSH
49906: LD_INT 3
49908: PUSH
49909: LD_INT 60
49911: PUSH
49912: EMPTY
49913: LIST
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 2
49921: PUSH
49922: LD_INT 25
49924: PUSH
49925: LD_INT 2
49927: PUSH
49928: EMPTY
49929: LIST
49930: LIST
49931: PUSH
49932: LD_INT 25
49934: PUSH
49935: LD_INT 16
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: EMPTY
49943: LIST
49944: LIST
49945: LIST
49946: PUSH
49947: EMPTY
49948: LIST
49949: LIST
49950: PPUSH
49951: CALL_OW 72
49955: UNION
49956: ST_TO_ADDR
// if tmp then
49957: LD_VAR 0 4
49961: IFFALSE 50041
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49963: LD_ADDR_VAR 0 4
49967: PUSH
49968: LD_VAR 0 4
49972: PPUSH
49973: LD_INT 3
49975: PPUSH
49976: CALL 94953 0 2
49980: ST_TO_ADDR
// for j in tmp do
49981: LD_ADDR_VAR 0 2
49985: PUSH
49986: LD_VAR 0 4
49990: PUSH
49991: FOR_IN
49992: IFFALSE 50035
// begin if IsInUnit ( j ) then
49994: LD_VAR 0 2
49998: PPUSH
49999: CALL_OW 310
50003: IFFALSE 50014
// ComExit ( j ) ;
50005: LD_VAR 0 2
50009: PPUSH
50010: CALL 95036 0 1
// AddComCollect ( j , x , y ) ;
50014: LD_VAR 0 2
50018: PPUSH
50019: LD_VAR 0 6
50023: PPUSH
50024: LD_VAR 0 7
50028: PPUSH
50029: CALL_OW 177
// end ;
50033: GO 49991
50035: POP
50036: POP
// exit ;
50037: POP
50038: POP
50039: GO 50276
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
50041: LD_ADDR_VAR 0 4
50045: PUSH
50046: LD_INT 22
50048: PUSH
50049: LD_VAR 0 5
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 91
50060: PUSH
50061: LD_VAR 0 8
50065: PUSH
50066: LD_INT 8
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: PUSH
50074: LD_INT 2
50076: PUSH
50077: LD_INT 34
50079: PUSH
50080: LD_INT 12
50082: PUSH
50083: EMPTY
50084: LIST
50085: LIST
50086: PUSH
50087: LD_INT 34
50089: PUSH
50090: LD_INT 51
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 34
50099: PUSH
50100: LD_INT 32
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 34
50109: PUSH
50110: LD_INT 89
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: LIST
50128: PPUSH
50129: CALL_OW 69
50133: ST_TO_ADDR
// if tmp then
50134: LD_VAR 0 4
50138: IFFALSE 50272
// begin for j in tmp do
50140: LD_ADDR_VAR 0 2
50144: PUSH
50145: LD_VAR 0 4
50149: PUSH
50150: FOR_IN
50151: IFFALSE 50270
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
50153: LD_VAR 0 2
50157: PPUSH
50158: CALL_OW 262
50162: PUSH
50163: LD_INT 3
50165: EQUAL
50166: IFTRUE 50183
50168: PUSH
50169: LD_VAR 0 2
50173: PPUSH
50174: CALL_OW 261
50178: PUSH
50179: LD_INT 20
50181: GREATER
50182: OR
50183: IFFALSE 50197
50185: PUSH
50186: LD_VAR 0 2
50190: PPUSH
50191: CALL_OW 314
50195: NOT
50196: AND
50197: IFFALSE 50227
50199: PUSH
50200: LD_VAR 0 2
50204: PPUSH
50205: CALL_OW 263
50209: PUSH
50210: LD_INT 1
50212: NONEQUAL
50213: IFTRUE 50226
50215: PUSH
50216: LD_VAR 0 2
50220: PPUSH
50221: CALL_OW 311
50225: OR
50226: AND
50227: IFFALSE 50268
// begin ComCollect ( j , x , y ) ;
50229: LD_VAR 0 2
50233: PPUSH
50234: LD_VAR 0 6
50238: PPUSH
50239: LD_VAR 0 7
50243: PPUSH
50244: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
50248: LD_VAR 0 2
50252: PPUSH
50253: LD_VAR 0 8
50257: PPUSH
50258: CALL_OW 172
// exit ;
50262: POP
50263: POP
50264: POP
50265: POP
50266: GO 50276
// end ;
50268: GO 50150
50270: POP
50271: POP
// end ; end ;
50272: GO 49637
50274: POP
50275: POP
// end ; end_of_file
50276: PPOPN 9
50278: END
// export function SOS_UnitDestroyed ( un ) ; begin
50279: LD_INT 0
50281: PPUSH
// ComRadiation ( un ) ;
50282: LD_VAR 0 1
50286: PPUSH
50287: CALL 51368 0 1
// end ;
50291: LD_VAR 0 2
50295: RET
// export function SOS_UnitKamikazed ( un ) ; begin
50296: LD_INT 0
50298: PPUSH
// ComRadiation ( un ) ;
50299: LD_VAR 0 1
50303: PPUSH
50304: CALL 51368 0 1
// end ;
50308: LD_VAR 0 2
50312: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
50313: LD_INT 0
50315: PPUSH
// end ;
50316: LD_VAR 0 4
50320: RET
// export function SOS_Command ( cmd ) ; begin
50321: LD_INT 0
50323: PPUSH
// end ;
50324: LD_VAR 0 2
50328: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
50329: LD_INT 0
50331: PPUSH
// end ;
50332: LD_VAR 0 6
50336: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex ; begin
50337: LD_INT 0
50339: PPUSH
50340: PPUSH
50341: PPUSH
50342: PPUSH
// if not vehicle or not factory then
50343: LD_VAR 0 1
50347: NOT
50348: IFTRUE 50357
50350: PUSH
50351: LD_VAR 0 2
50355: NOT
50356: OR
50357: IFFALSE 50361
// exit ;
50359: GO 50943
// if not factoryWaypoints then
50361: LD_EXP 145
50365: NOT
50366: IFFALSE 50370
// exit ;
50368: GO 50943
// for i := 1 to Count ( factoryWaypoints ) do
50370: LD_ADDR_VAR 0 4
50374: PUSH
50375: DOUBLE
50376: LD_INT 1
50378: DEC
50379: ST_TO_ADDR
50380: LD_EXP 145
50384: PPUSH
50385: CALL 58706 0 1
50389: PUSH
50390: FOR_TO
50391: IFFALSE 50941
// if factoryWaypoints [ i ] [ 2 ] = factory then
50393: LD_EXP 145
50397: PUSH
50398: LD_VAR 0 4
50402: ARRAY
50403: PUSH
50404: LD_INT 2
50406: ARRAY
50407: PUSH
50408: LD_VAR 0 2
50412: EQUAL
50413: IFFALSE 50939
// begin if GetControl ( vehicle ) = control_manual then
50415: LD_VAR 0 1
50419: PPUSH
50420: CALL_OW 263
50424: PUSH
50425: LD_INT 1
50427: EQUAL
50428: IFFALSE 50792
// begin driver := IsDrivenBy ( vehicle ) ;
50430: LD_ADDR_VAR 0 5
50434: PUSH
50435: LD_VAR 0 1
50439: PPUSH
50440: CALL_OW 311
50444: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
50445: LD_VAR 0 5
50449: PUSH
50450: LD_EXP 146
50454: IN
50455: IFTRUE 50469
50457: PUSH
50458: LD_VAR 0 1
50462: PUSH
50463: LD_EXP 146
50467: IN
50468: OR
50469: IFFALSE 50475
// exit ;
50471: POP
50472: POP
50473: GO 50943
// if not HasTask ( driver ) then
50475: LD_VAR 0 5
50479: PPUSH
50480: CALL_OW 314
50484: NOT
50485: IFFALSE 50790
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
50487: LD_ADDR_EXP 146
50491: PUSH
50492: LD_EXP 146
50496: PPUSH
50497: LD_VAR 0 5
50501: PPUSH
50502: CALL 94638 0 2
50506: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
50507: LD_ADDR_EXP 146
50511: PUSH
50512: LD_EXP 146
50516: PPUSH
50517: LD_VAR 0 1
50521: PPUSH
50522: CALL 94638 0 2
50526: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50527: LD_ADDR_VAR 0 6
50531: PUSH
50532: LD_EXP 145
50536: PUSH
50537: LD_VAR 0 4
50541: ARRAY
50542: PUSH
50543: LD_INT 3
50545: ARRAY
50546: PPUSH
50547: LD_EXP 145
50551: PUSH
50552: LD_VAR 0 4
50556: ARRAY
50557: PUSH
50558: LD_INT 4
50560: ARRAY
50561: PPUSH
50562: CALL_OW 428
50566: ST_TO_ADDR
// if hex then
50567: LD_VAR 0 6
50571: IFFALSE 50589
// ComMoveUnit ( driver , hex ) else
50573: LD_VAR 0 5
50577: PPUSH
50578: LD_VAR 0 6
50582: PPUSH
50583: CALL_OW 112
50587: GO 50673
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
50589: LD_VAR 0 1
50593: PPUSH
50594: LD_EXP 145
50598: PUSH
50599: LD_VAR 0 4
50603: ARRAY
50604: PUSH
50605: LD_INT 3
50607: ARRAY
50608: PPUSH
50609: LD_EXP 145
50613: PUSH
50614: LD_VAR 0 4
50618: ARRAY
50619: PUSH
50620: LD_INT 4
50622: ARRAY
50623: PPUSH
50624: CALL_OW 297
50628: PUSH
50629: LD_INT 0
50631: GREATER
50632: IFFALSE 50673
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50634: LD_VAR 0 5
50638: PPUSH
50639: LD_EXP 145
50643: PUSH
50644: LD_VAR 0 4
50648: ARRAY
50649: PUSH
50650: LD_INT 3
50652: ARRAY
50653: PPUSH
50654: LD_EXP 145
50658: PUSH
50659: LD_VAR 0 4
50663: ARRAY
50664: PUSH
50665: LD_INT 4
50667: ARRAY
50668: PPUSH
50669: CALL_OW 111
// AddComExitVehicle ( driver ) ;
50673: LD_VAR 0 5
50677: PPUSH
50678: CALL_OW 181
// if Multiplayer then
50682: LD_OWVAR 4
50686: IFFALSE 50735
// begin repeat wait ( 10 ) ;
50688: LD_INT 10
50690: PPUSH
50691: CALL_OW 67
// until not IsInUnit ( driver ) ;
50695: LD_VAR 0 5
50699: PPUSH
50700: CALL_OW 310
50704: NOT
50705: IFFALSE 50688
// if not HasTask ( driver ) then
50707: LD_VAR 0 5
50711: PPUSH
50712: CALL_OW 314
50716: NOT
50717: IFFALSE 50733
// ComEnterUnit ( driver , factory ) ;
50719: LD_VAR 0 5
50723: PPUSH
50724: LD_VAR 0 2
50728: PPUSH
50729: CALL_OW 120
// end else
50733: GO 50749
// AddComEnterUnit ( driver , factory ) ;
50735: LD_VAR 0 5
50739: PPUSH
50740: LD_VAR 0 2
50744: PPUSH
50745: CALL_OW 180
// wait ( 0 0$1 ) ;
50749: LD_INT 35
50751: PPUSH
50752: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
50756: LD_ADDR_EXP 146
50760: PUSH
50761: LD_EXP 146
50765: PUSH
50766: LD_VAR 0 5
50770: DIFF
50771: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
50772: LD_ADDR_EXP 146
50776: PUSH
50777: LD_EXP 146
50781: PUSH
50782: LD_VAR 0 1
50786: DIFF
50787: ST_TO_ADDR
// break ;
50788: GO 50941
// end ; end else
50790: GO 50939
// if GetControl ( vehicle ) = control_remote then
50792: LD_VAR 0 1
50796: PPUSH
50797: CALL_OW 263
50801: PUSH
50802: LD_INT 2
50804: EQUAL
50805: IFFALSE 50891
// begin wait ( 0 0$2 ) ;
50807: LD_INT 70
50809: PPUSH
50810: CALL_OW 67
// repeat wait ( 10 ) ;
50814: LD_INT 10
50816: PPUSH
50817: CALL_OW 67
// Connect ( vehicle ) ;
50821: LD_VAR 0 1
50825: PPUSH
50826: CALL 64950 0 1
// until IsControledBy ( vehicle ) ;
50830: LD_VAR 0 1
50834: PPUSH
50835: CALL_OW 312
50839: IFFALSE 50814
// wait ( 10 ) ;
50841: LD_INT 10
50843: PPUSH
50844: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50848: LD_VAR 0 1
50852: PPUSH
50853: LD_EXP 145
50857: PUSH
50858: LD_VAR 0 4
50862: ARRAY
50863: PUSH
50864: LD_INT 3
50866: ARRAY
50867: PPUSH
50868: LD_EXP 145
50872: PUSH
50873: LD_VAR 0 4
50877: ARRAY
50878: PUSH
50879: LD_INT 4
50881: ARRAY
50882: PPUSH
50883: CALL_OW 111
// break ;
50887: GO 50941
// end else
50889: GO 50939
// begin wait ( 0 0$3 ) ;
50891: LD_INT 105
50893: PPUSH
50894: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50898: LD_VAR 0 1
50902: PPUSH
50903: LD_EXP 145
50907: PUSH
50908: LD_VAR 0 4
50912: ARRAY
50913: PUSH
50914: LD_INT 3
50916: ARRAY
50917: PPUSH
50918: LD_EXP 145
50922: PUSH
50923: LD_VAR 0 4
50927: ARRAY
50928: PUSH
50929: LD_INT 4
50931: ARRAY
50932: PPUSH
50933: CALL_OW 111
// break ;
50937: GO 50941
// end ; end ;
50939: GO 50390
50941: POP
50942: POP
// end ;
50943: LD_VAR 0 3
50947: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50948: LD_INT 0
50950: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50951: LD_VAR 0 1
50955: PUSH
50956: LD_INT 250
50958: EQUAL
50959: IFFALSE 50976
50961: PUSH
50962: LD_VAR 0 2
50966: PPUSH
50967: CALL_OW 264
50971: PUSH
50972: LD_INT 81
50974: EQUAL
50975: AND
50976: IFFALSE 50997
// MinerPlaceMine ( unit , x , y ) ;
50978: LD_VAR 0 2
50982: PPUSH
50983: LD_VAR 0 4
50987: PPUSH
50988: LD_VAR 0 5
50992: PPUSH
50993: CALL 54129 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50997: LD_VAR 0 1
51001: PUSH
51002: LD_INT 251
51004: EQUAL
51005: IFFALSE 51022
51007: PUSH
51008: LD_VAR 0 2
51012: PPUSH
51013: CALL_OW 264
51017: PUSH
51018: LD_INT 81
51020: EQUAL
51021: AND
51022: IFFALSE 51043
// MinerDetonateMine ( unit , x , y ) ;
51024: LD_VAR 0 2
51028: PPUSH
51029: LD_VAR 0 4
51033: PPUSH
51034: LD_VAR 0 5
51038: PPUSH
51039: CALL 54408 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
51043: LD_VAR 0 1
51047: PUSH
51048: LD_INT 252
51050: EQUAL
51051: IFFALSE 51068
51053: PUSH
51054: LD_VAR 0 2
51058: PPUSH
51059: CALL_OW 264
51063: PUSH
51064: LD_INT 81
51066: EQUAL
51067: AND
51068: IFFALSE 51089
// MinerCreateMinefield ( unit , x , y ) ;
51070: LD_VAR 0 2
51074: PPUSH
51075: LD_VAR 0 4
51079: PPUSH
51080: LD_VAR 0 5
51084: PPUSH
51085: CALL 54827 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
51089: LD_VAR 0 1
51093: PUSH
51094: LD_INT 253
51096: EQUAL
51097: IFFALSE 51114
51099: PUSH
51100: LD_VAR 0 2
51104: PPUSH
51105: CALL_OW 257
51109: PUSH
51110: LD_INT 5
51112: EQUAL
51113: AND
51114: IFFALSE 51135
// ComBinocular ( unit , x , y ) ;
51116: LD_VAR 0 2
51120: PPUSH
51121: LD_VAR 0 4
51125: PPUSH
51126: LD_VAR 0 5
51130: PPUSH
51131: CALL 55202 0 3
// if selectedUnit then
51135: LD_VAR 0 3
51139: IFFALSE 51199
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
51141: LD_VAR 0 1
51145: PUSH
51146: LD_INT 254
51148: EQUAL
51149: IFFALSE 51166
51151: PUSH
51152: LD_VAR 0 2
51156: PPUSH
51157: CALL_OW 264
51161: PUSH
51162: LD_INT 99
51164: EQUAL
51165: AND
51166: IFFALSE 51183
51168: PUSH
51169: LD_VAR 0 3
51173: PPUSH
51174: CALL_OW 263
51178: PUSH
51179: LD_INT 3
51181: EQUAL
51182: AND
51183: IFFALSE 51199
// HackDestroyVehicle ( unit , selectedUnit ) ;
51185: LD_VAR 0 2
51189: PPUSH
51190: LD_VAR 0 3
51194: PPUSH
51195: CALL 53489 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
51199: LD_VAR 0 1
51203: PUSH
51204: LD_INT 255
51206: EQUAL
51207: IFFALSE 51231
51209: PUSH
51210: LD_VAR 0 2
51214: PPUSH
51215: CALL_OW 264
51219: PUSH
51220: LD_INT 14
51222: PUSH
51223: LD_INT 53
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: IN
51230: AND
51231: IFFALSE 51249
51233: PUSH
51234: LD_VAR 0 4
51238: PPUSH
51239: LD_VAR 0 5
51243: PPUSH
51244: CALL_OW 488
51248: AND
51249: IFFALSE 51273
// CutTreeXYR ( unit , x , y , 12 ) ;
51251: LD_VAR 0 2
51255: PPUSH
51256: LD_VAR 0 4
51260: PPUSH
51261: LD_VAR 0 5
51265: PPUSH
51266: LD_INT 12
51268: PPUSH
51269: CALL 51464 0 4
// if cmd = 256 then
51273: LD_VAR 0 1
51277: PUSH
51278: LD_INT 256
51280: EQUAL
51281: IFFALSE 51302
// SetFactoryWaypoint ( unit , x , y ) ;
51283: LD_VAR 0 2
51287: PPUSH
51288: LD_VAR 0 4
51292: PPUSH
51293: LD_VAR 0 5
51297: PPUSH
51298: CALL 48824 0 3
// if cmd = 257 then
51302: LD_VAR 0 1
51306: PUSH
51307: LD_INT 257
51309: EQUAL
51310: IFFALSE 51331
// SetWarehouseGatheringPoint ( unit , x , y ) ;
51312: LD_VAR 0 2
51316: PPUSH
51317: LD_VAR 0 4
51321: PPUSH
51322: LD_VAR 0 5
51326: PPUSH
51327: CALL 49320 0 3
// if cmd = 258 then
51331: LD_VAR 0 1
51335: PUSH
51336: LD_INT 258
51338: EQUAL
51339: IFFALSE 51363
// BurnTreeXYR ( unit , x , y , 8 ) ;
51341: LD_VAR 0 2
51345: PPUSH
51346: LD_VAR 0 4
51350: PPUSH
51351: LD_VAR 0 5
51355: PPUSH
51356: LD_INT 8
51358: PPUSH
51359: CALL 51864 0 4
// end ;
51363: LD_VAR 0 6
51367: RET
// export function ComRadiation ( un ) ; var eff ; begin
51368: LD_INT 0
51370: PPUSH
51371: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
51372: LD_VAR 0 1
51376: PPUSH
51377: CALL_OW 264
51381: PUSH
51382: LD_INT 91
51384: NONEQUAL
51385: IFFALSE 51389
// exit ;
51387: GO 51459
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
51389: LD_INT 68
51391: PPUSH
51392: LD_VAR 0 1
51396: PPUSH
51397: CALL_OW 255
51401: PPUSH
51402: CALL_OW 321
51406: PUSH
51407: LD_INT 2
51409: EQUAL
51410: IFFALSE 51422
// eff := 50 else
51412: LD_ADDR_VAR 0 3
51416: PUSH
51417: LD_INT 50
51419: ST_TO_ADDR
51420: GO 51430
// eff := 25 ;
51422: LD_ADDR_VAR 0 3
51426: PUSH
51427: LD_INT 25
51429: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
51430: LD_VAR 0 1
51434: PPUSH
51435: CALL_OW 250
51439: PPUSH
51440: LD_VAR 0 1
51444: PPUSH
51445: CALL_OW 251
51449: PPUSH
51450: LD_VAR 0 3
51454: PPUSH
51455: CALL_OW 495
// end ;
51459: LD_VAR 0 2
51463: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
51464: LD_INT 0
51466: PPUSH
51467: PPUSH
51468: PPUSH
51469: PPUSH
51470: PPUSH
51471: PPUSH
51472: PPUSH
51473: PPUSH
51474: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
51475: LD_VAR 0 1
51479: PPUSH
51480: CALL_OW 302
51484: NOT
51485: IFTRUE 51504
51487: PUSH
51488: LD_VAR 0 2
51492: PPUSH
51493: LD_VAR 0 3
51497: PPUSH
51498: CALL_OW 488
51502: NOT
51503: OR
51504: IFTRUE 51513
51506: PUSH
51507: LD_VAR 0 4
51511: NOT
51512: OR
51513: IFFALSE 51517
// exit ;
51515: GO 51859
// list := [ ] ;
51517: LD_ADDR_VAR 0 13
51521: PUSH
51522: EMPTY
51523: ST_TO_ADDR
// if x - r < 0 then
51524: LD_VAR 0 2
51528: PUSH
51529: LD_VAR 0 4
51533: MINUS
51534: PUSH
51535: LD_INT 0
51537: LESS
51538: IFFALSE 51550
// min_x := 0 else
51540: LD_ADDR_VAR 0 7
51544: PUSH
51545: LD_INT 0
51547: ST_TO_ADDR
51548: GO 51566
// min_x := x - r ;
51550: LD_ADDR_VAR 0 7
51554: PUSH
51555: LD_VAR 0 2
51559: PUSH
51560: LD_VAR 0 4
51564: MINUS
51565: ST_TO_ADDR
// if y - r < 0 then
51566: LD_VAR 0 3
51570: PUSH
51571: LD_VAR 0 4
51575: MINUS
51576: PUSH
51577: LD_INT 0
51579: LESS
51580: IFFALSE 51592
// min_y := 0 else
51582: LD_ADDR_VAR 0 8
51586: PUSH
51587: LD_INT 0
51589: ST_TO_ADDR
51590: GO 51608
// min_y := y - r ;
51592: LD_ADDR_VAR 0 8
51596: PUSH
51597: LD_VAR 0 3
51601: PUSH
51602: LD_VAR 0 4
51606: MINUS
51607: ST_TO_ADDR
// max_x := x + r ;
51608: LD_ADDR_VAR 0 9
51612: PUSH
51613: LD_VAR 0 2
51617: PUSH
51618: LD_VAR 0 4
51622: PLUS
51623: ST_TO_ADDR
// max_y := y + r ;
51624: LD_ADDR_VAR 0 10
51628: PUSH
51629: LD_VAR 0 3
51633: PUSH
51634: LD_VAR 0 4
51638: PLUS
51639: ST_TO_ADDR
// for _x = min_x to max_x do
51640: LD_ADDR_VAR 0 11
51644: PUSH
51645: DOUBLE
51646: LD_VAR 0 7
51650: DEC
51651: ST_TO_ADDR
51652: LD_VAR 0 9
51656: PUSH
51657: FOR_TO
51658: IFFALSE 51777
// for _y = min_y to max_y do
51660: LD_ADDR_VAR 0 12
51664: PUSH
51665: DOUBLE
51666: LD_VAR 0 8
51670: DEC
51671: ST_TO_ADDR
51672: LD_VAR 0 10
51676: PUSH
51677: FOR_TO
51678: IFFALSE 51773
// begin if not ValidHex ( _x , _y ) then
51680: LD_VAR 0 11
51684: PPUSH
51685: LD_VAR 0 12
51689: PPUSH
51690: CALL_OW 488
51694: NOT
51695: IFFALSE 51699
// continue ;
51697: GO 51677
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51699: LD_VAR 0 11
51703: PPUSH
51704: LD_VAR 0 12
51708: PPUSH
51709: CALL_OW 351
51713: IFFALSE 51731
51715: PUSH
51716: LD_VAR 0 11
51720: PPUSH
51721: LD_VAR 0 12
51725: PPUSH
51726: CALL_OW 554
51730: AND
51731: IFFALSE 51771
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51733: LD_ADDR_VAR 0 13
51737: PUSH
51738: LD_VAR 0 13
51742: PPUSH
51743: LD_VAR 0 13
51747: PUSH
51748: LD_INT 1
51750: PLUS
51751: PPUSH
51752: LD_VAR 0 11
51756: PUSH
51757: LD_VAR 0 12
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PPUSH
51766: CALL_OW 2
51770: ST_TO_ADDR
// end ;
51771: GO 51677
51773: POP
51774: POP
51775: GO 51657
51777: POP
51778: POP
// if not list then
51779: LD_VAR 0 13
51783: NOT
51784: IFFALSE 51788
// exit ;
51786: GO 51859
// for i in list do
51788: LD_ADDR_VAR 0 6
51792: PUSH
51793: LD_VAR 0 13
51797: PUSH
51798: FOR_IN
51799: IFFALSE 51857
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
51801: LD_VAR 0 1
51805: PPUSH
51806: LD_STRING M
51808: PUSH
51809: LD_VAR 0 6
51813: PUSH
51814: LD_INT 1
51816: ARRAY
51817: PUSH
51818: LD_VAR 0 6
51822: PUSH
51823: LD_INT 2
51825: ARRAY
51826: PUSH
51827: LD_INT 0
51829: PUSH
51830: LD_INT 0
51832: PUSH
51833: LD_INT 0
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: PUSH
51848: EMPTY
51849: LIST
51850: PPUSH
51851: CALL_OW 447
51855: GO 51798
51857: POP
51858: POP
// end ;
51859: LD_VAR 0 5
51863: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
51864: LD_INT 0
51866: PPUSH
51867: PPUSH
51868: PPUSH
51869: PPUSH
51870: PPUSH
51871: PPUSH
51872: PPUSH
51873: PPUSH
51874: PPUSH
51875: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
51876: LD_VAR 0 1
51880: PPUSH
51881: CALL_OW 302
51885: NOT
51886: IFTRUE 51905
51888: PUSH
51889: LD_VAR 0 2
51893: PPUSH
51894: LD_VAR 0 3
51898: PPUSH
51899: CALL_OW 488
51903: NOT
51904: OR
51905: IFTRUE 51914
51907: PUSH
51908: LD_VAR 0 4
51912: NOT
51913: OR
51914: IFFALSE 51918
// exit ;
51916: GO 52435
// list := [ ] ;
51918: LD_ADDR_VAR 0 13
51922: PUSH
51923: EMPTY
51924: ST_TO_ADDR
// if x - r < 0 then
51925: LD_VAR 0 2
51929: PUSH
51930: LD_VAR 0 4
51934: MINUS
51935: PUSH
51936: LD_INT 0
51938: LESS
51939: IFFALSE 51951
// min_x := 0 else
51941: LD_ADDR_VAR 0 7
51945: PUSH
51946: LD_INT 0
51948: ST_TO_ADDR
51949: GO 51967
// min_x := x - r ;
51951: LD_ADDR_VAR 0 7
51955: PUSH
51956: LD_VAR 0 2
51960: PUSH
51961: LD_VAR 0 4
51965: MINUS
51966: ST_TO_ADDR
// if y - r < 0 then
51967: LD_VAR 0 3
51971: PUSH
51972: LD_VAR 0 4
51976: MINUS
51977: PUSH
51978: LD_INT 0
51980: LESS
51981: IFFALSE 51993
// min_y := 0 else
51983: LD_ADDR_VAR 0 8
51987: PUSH
51988: LD_INT 0
51990: ST_TO_ADDR
51991: GO 52009
// min_y := y - r ;
51993: LD_ADDR_VAR 0 8
51997: PUSH
51998: LD_VAR 0 3
52002: PUSH
52003: LD_VAR 0 4
52007: MINUS
52008: ST_TO_ADDR
// max_x := x + r ;
52009: LD_ADDR_VAR 0 9
52013: PUSH
52014: LD_VAR 0 2
52018: PUSH
52019: LD_VAR 0 4
52023: PLUS
52024: ST_TO_ADDR
// max_y := y + r ;
52025: LD_ADDR_VAR 0 10
52029: PUSH
52030: LD_VAR 0 3
52034: PUSH
52035: LD_VAR 0 4
52039: PLUS
52040: ST_TO_ADDR
// for _x = min_x to max_x do
52041: LD_ADDR_VAR 0 11
52045: PUSH
52046: DOUBLE
52047: LD_VAR 0 7
52051: DEC
52052: ST_TO_ADDR
52053: LD_VAR 0 9
52057: PUSH
52058: FOR_TO
52059: IFFALSE 52178
// for _y = min_y to max_y do
52061: LD_ADDR_VAR 0 12
52065: PUSH
52066: DOUBLE
52067: LD_VAR 0 8
52071: DEC
52072: ST_TO_ADDR
52073: LD_VAR 0 10
52077: PUSH
52078: FOR_TO
52079: IFFALSE 52174
// begin if not ValidHex ( _x , _y ) then
52081: LD_VAR 0 11
52085: PPUSH
52086: LD_VAR 0 12
52090: PPUSH
52091: CALL_OW 488
52095: NOT
52096: IFFALSE 52100
// continue ;
52098: GO 52078
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
52100: LD_VAR 0 11
52104: PPUSH
52105: LD_VAR 0 12
52109: PPUSH
52110: CALL_OW 351
52114: IFFALSE 52132
52116: PUSH
52117: LD_VAR 0 11
52121: PPUSH
52122: LD_VAR 0 12
52126: PPUSH
52127: CALL_OW 554
52131: AND
52132: IFFALSE 52172
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
52134: LD_ADDR_VAR 0 13
52138: PUSH
52139: LD_VAR 0 13
52143: PPUSH
52144: LD_VAR 0 13
52148: PUSH
52149: LD_INT 1
52151: PLUS
52152: PPUSH
52153: LD_VAR 0 11
52157: PUSH
52158: LD_VAR 0 12
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PPUSH
52167: CALL_OW 2
52171: ST_TO_ADDR
// end ;
52172: GO 52078
52174: POP
52175: POP
52176: GO 52058
52178: POP
52179: POP
// if not list then
52180: LD_VAR 0 13
52184: NOT
52185: IFFALSE 52189
// exit ;
52187: GO 52435
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
52189: LD_ADDR_VAR 0 13
52193: PUSH
52194: LD_VAR 0 1
52198: PPUSH
52199: LD_VAR 0 13
52203: PPUSH
52204: LD_INT 1
52206: PPUSH
52207: LD_INT 1
52209: PPUSH
52210: CALL 62078 0 4
52214: ST_TO_ADDR
// ComStop ( flame ) ;
52215: LD_VAR 0 1
52219: PPUSH
52220: CALL_OW 141
// for i in list do
52224: LD_ADDR_VAR 0 6
52228: PUSH
52229: LD_VAR 0 13
52233: PUSH
52234: FOR_IN
52235: IFFALSE 52266
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
52237: LD_VAR 0 1
52241: PPUSH
52242: LD_VAR 0 6
52246: PUSH
52247: LD_INT 1
52249: ARRAY
52250: PPUSH
52251: LD_VAR 0 6
52255: PUSH
52256: LD_INT 2
52258: ARRAY
52259: PPUSH
52260: CALL_OW 176
52264: GO 52234
52266: POP
52267: POP
// repeat wait ( 0 0$1 ) ;
52268: LD_INT 35
52270: PPUSH
52271: CALL_OW 67
// task := GetTaskList ( flame ) ;
52275: LD_ADDR_VAR 0 14
52279: PUSH
52280: LD_VAR 0 1
52284: PPUSH
52285: CALL_OW 437
52289: ST_TO_ADDR
// if not task then
52290: LD_VAR 0 14
52294: NOT
52295: IFFALSE 52299
// exit ;
52297: GO 52435
// if task [ 1 ] [ 1 ] <> | then
52299: LD_VAR 0 14
52303: PUSH
52304: LD_INT 1
52306: ARRAY
52307: PUSH
52308: LD_INT 1
52310: ARRAY
52311: PUSH
52312: LD_STRING |
52314: NONEQUAL
52315: IFFALSE 52319
// exit ;
52317: GO 52435
// _x := task [ 1 ] [ 2 ] ;
52319: LD_ADDR_VAR 0 11
52323: PUSH
52324: LD_VAR 0 14
52328: PUSH
52329: LD_INT 1
52331: ARRAY
52332: PUSH
52333: LD_INT 2
52335: ARRAY
52336: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
52337: LD_ADDR_VAR 0 12
52341: PUSH
52342: LD_VAR 0 14
52346: PUSH
52347: LD_INT 1
52349: ARRAY
52350: PUSH
52351: LD_INT 3
52353: ARRAY
52354: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
52355: LD_VAR 0 11
52359: PPUSH
52360: LD_VAR 0 12
52364: PPUSH
52365: CALL_OW 351
52369: NOT
52370: IFTRUE 52389
52372: PUSH
52373: LD_VAR 0 11
52377: PPUSH
52378: LD_VAR 0 12
52382: PPUSH
52383: CALL_OW 554
52387: NOT
52388: OR
52389: IFFALSE 52423
// begin task := Delete ( task , 1 ) ;
52391: LD_ADDR_VAR 0 14
52395: PUSH
52396: LD_VAR 0 14
52400: PPUSH
52401: LD_INT 1
52403: PPUSH
52404: CALL_OW 3
52408: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
52409: LD_VAR 0 1
52413: PPUSH
52414: LD_VAR 0 14
52418: PPUSH
52419: CALL_OW 446
// end ; until not HasTask ( flame ) ;
52423: LD_VAR 0 1
52427: PPUSH
52428: CALL_OW 314
52432: NOT
52433: IFFALSE 52268
// end ;
52435: LD_VAR 0 5
52439: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
52440: LD_EXP 149
52444: NOT
52445: IFFALSE 52495
52447: GO 52449
52449: DISABLE
// begin initHack := true ;
52450: LD_ADDR_EXP 149
52454: PUSH
52455: LD_INT 1
52457: ST_TO_ADDR
// hackTanks := [ ] ;
52458: LD_ADDR_EXP 150
52462: PUSH
52463: EMPTY
52464: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
52465: LD_ADDR_EXP 151
52469: PUSH
52470: EMPTY
52471: ST_TO_ADDR
// hackLimit := 3 ;
52472: LD_ADDR_EXP 152
52476: PUSH
52477: LD_INT 3
52479: ST_TO_ADDR
// hackDist := 12 ;
52480: LD_ADDR_EXP 153
52484: PUSH
52485: LD_INT 12
52487: ST_TO_ADDR
// hackCounter := [ ] ;
52488: LD_ADDR_EXP 154
52492: PUSH
52493: EMPTY
52494: ST_TO_ADDR
// end ;
52495: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
52496: LD_EXP 149
52500: IFFALSE 52518
52502: PUSH
52503: LD_INT 34
52505: PUSH
52506: LD_INT 99
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PPUSH
52513: CALL_OW 69
52517: AND
52518: IFFALSE 52771
52520: GO 52522
52522: DISABLE
52523: LD_INT 0
52525: PPUSH
52526: PPUSH
// begin enable ;
52527: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
52528: LD_ADDR_VAR 0 1
52532: PUSH
52533: LD_INT 34
52535: PUSH
52536: LD_INT 99
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PPUSH
52543: CALL_OW 69
52547: PUSH
52548: FOR_IN
52549: IFFALSE 52769
// begin if not i in hackTanks then
52551: LD_VAR 0 1
52555: PUSH
52556: LD_EXP 150
52560: IN
52561: NOT
52562: IFFALSE 52645
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
52564: LD_ADDR_EXP 150
52568: PUSH
52569: LD_EXP 150
52573: PPUSH
52574: LD_EXP 150
52578: PUSH
52579: LD_INT 1
52581: PLUS
52582: PPUSH
52583: LD_VAR 0 1
52587: PPUSH
52588: CALL_OW 1
52592: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
52593: LD_ADDR_EXP 151
52597: PUSH
52598: LD_EXP 151
52602: PPUSH
52603: LD_EXP 151
52607: PUSH
52608: LD_INT 1
52610: PLUS
52611: PPUSH
52612: EMPTY
52613: PPUSH
52614: CALL_OW 1
52618: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
52619: LD_ADDR_EXP 154
52623: PUSH
52624: LD_EXP 154
52628: PPUSH
52629: LD_EXP 154
52633: PUSH
52634: LD_INT 1
52636: PLUS
52637: PPUSH
52638: EMPTY
52639: PPUSH
52640: CALL_OW 1
52644: ST_TO_ADDR
// end ; if not IsOk ( i ) then
52645: LD_VAR 0 1
52649: PPUSH
52650: CALL_OW 302
52654: NOT
52655: IFFALSE 52668
// begin HackUnlinkAll ( i ) ;
52657: LD_VAR 0 1
52661: PPUSH
52662: CALL 52774 0 1
// continue ;
52666: GO 52548
// end ; HackCheckCapturedStatus ( i ) ;
52668: LD_VAR 0 1
52672: PPUSH
52673: CALL 53219 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
52677: LD_ADDR_VAR 0 2
52681: PUSH
52682: LD_INT 81
52684: PUSH
52685: LD_VAR 0 1
52689: PPUSH
52690: CALL_OW 255
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 33
52701: PUSH
52702: LD_INT 3
52704: PUSH
52705: EMPTY
52706: LIST
52707: LIST
52708: PUSH
52709: LD_INT 91
52711: PUSH
52712: LD_VAR 0 1
52716: PUSH
52717: LD_EXP 153
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 50
52729: PUSH
52730: EMPTY
52731: LIST
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: LIST
52737: LIST
52738: PPUSH
52739: CALL_OW 69
52743: ST_TO_ADDR
// if not tmp then
52744: LD_VAR 0 2
52748: NOT
52749: IFFALSE 52753
// continue ;
52751: GO 52548
// HackLink ( i , tmp ) ;
52753: LD_VAR 0 1
52757: PPUSH
52758: LD_VAR 0 2
52762: PPUSH
52763: CALL 52910 0 2
// end ;
52767: GO 52548
52769: POP
52770: POP
// end ;
52771: PPOPN 2
52773: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
52774: LD_INT 0
52776: PPUSH
52777: PPUSH
52778: PPUSH
// if not hack in hackTanks then
52779: LD_VAR 0 1
52783: PUSH
52784: LD_EXP 150
52788: IN
52789: NOT
52790: IFFALSE 52794
// exit ;
52792: GO 52905
// index := GetElementIndex ( hackTanks , hack ) ;
52794: LD_ADDR_VAR 0 4
52798: PUSH
52799: LD_EXP 150
52803: PPUSH
52804: LD_VAR 0 1
52808: PPUSH
52809: CALL 61373 0 2
52813: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
52814: LD_EXP 151
52818: PUSH
52819: LD_VAR 0 4
52823: ARRAY
52824: IFFALSE 52905
// begin for i in hackTanksCaptured [ index ] do
52826: LD_ADDR_VAR 0 3
52830: PUSH
52831: LD_EXP 151
52835: PUSH
52836: LD_VAR 0 4
52840: ARRAY
52841: PUSH
52842: FOR_IN
52843: IFFALSE 52869
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
52845: LD_VAR 0 3
52849: PUSH
52850: LD_INT 1
52852: ARRAY
52853: PPUSH
52854: LD_VAR 0 3
52858: PUSH
52859: LD_INT 2
52861: ARRAY
52862: PPUSH
52863: CALL_OW 235
52867: GO 52842
52869: POP
52870: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
52871: LD_ADDR_EXP 151
52875: PUSH
52876: LD_EXP 151
52880: PPUSH
52881: LD_VAR 0 4
52885: PPUSH
52886: EMPTY
52887: PPUSH
52888: CALL_OW 1
52892: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
52893: LD_VAR 0 1
52897: PPUSH
52898: LD_INT 0
52900: PPUSH
52901: CALL_OW 505
// end ; end ;
52905: LD_VAR 0 2
52909: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
52910: LD_INT 0
52912: PPUSH
52913: PPUSH
52914: PPUSH
// if not hack in hackTanks or not vehicles then
52915: LD_VAR 0 1
52919: PUSH
52920: LD_EXP 150
52924: IN
52925: NOT
52926: IFTRUE 52935
52928: PUSH
52929: LD_VAR 0 2
52933: NOT
52934: OR
52935: IFFALSE 52939
// exit ;
52937: GO 53214
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
52939: LD_ADDR_VAR 0 2
52943: PUSH
52944: LD_VAR 0 1
52948: PPUSH
52949: LD_VAR 0 2
52953: PPUSH
52954: LD_INT 1
52956: PPUSH
52957: LD_INT 1
52959: PPUSH
52960: CALL 62025 0 4
52964: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
52965: LD_ADDR_VAR 0 5
52969: PUSH
52970: LD_EXP 150
52974: PPUSH
52975: LD_VAR 0 1
52979: PPUSH
52980: CALL 61373 0 2
52984: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
52985: LD_EXP 151
52989: PUSH
52990: LD_VAR 0 5
52994: ARRAY
52995: PUSH
52996: LD_EXP 152
53000: LESS
53001: IFFALSE 53190
// begin for i := 1 to vehicles do
53003: LD_ADDR_VAR 0 4
53007: PUSH
53008: DOUBLE
53009: LD_INT 1
53011: DEC
53012: ST_TO_ADDR
53013: LD_VAR 0 2
53017: PUSH
53018: FOR_TO
53019: IFFALSE 53188
// begin if hackTanksCaptured [ index ] = hackLimit then
53021: LD_EXP 151
53025: PUSH
53026: LD_VAR 0 5
53030: ARRAY
53031: PUSH
53032: LD_EXP 152
53036: EQUAL
53037: IFFALSE 53041
// break ;
53039: GO 53188
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
53041: LD_ADDR_EXP 154
53045: PUSH
53046: LD_EXP 154
53050: PPUSH
53051: LD_VAR 0 5
53055: PPUSH
53056: LD_EXP 154
53060: PUSH
53061: LD_VAR 0 5
53065: ARRAY
53066: PUSH
53067: LD_INT 1
53069: PLUS
53070: PPUSH
53071: CALL_OW 1
53075: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
53076: LD_ADDR_EXP 151
53080: PUSH
53081: LD_EXP 151
53085: PPUSH
53086: LD_VAR 0 5
53090: PUSH
53091: LD_EXP 151
53095: PUSH
53096: LD_VAR 0 5
53100: ARRAY
53101: PUSH
53102: LD_INT 1
53104: PLUS
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PPUSH
53110: LD_VAR 0 2
53114: PUSH
53115: LD_VAR 0 4
53119: ARRAY
53120: PUSH
53121: LD_VAR 0 2
53125: PUSH
53126: LD_VAR 0 4
53130: ARRAY
53131: PPUSH
53132: CALL_OW 255
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PPUSH
53141: CALL 61590 0 3
53145: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
53146: LD_VAR 0 2
53150: PUSH
53151: LD_VAR 0 4
53155: ARRAY
53156: PPUSH
53157: LD_VAR 0 1
53161: PPUSH
53162: CALL_OW 255
53166: PPUSH
53167: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
53171: LD_VAR 0 2
53175: PUSH
53176: LD_VAR 0 4
53180: ARRAY
53181: PPUSH
53182: CALL_OW 141
// end ;
53186: GO 53018
53188: POP
53189: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53190: LD_VAR 0 1
53194: PPUSH
53195: LD_EXP 151
53199: PUSH
53200: LD_VAR 0 5
53204: ARRAY
53205: PUSH
53206: LD_INT 0
53208: PLUS
53209: PPUSH
53210: CALL_OW 505
// end ;
53214: LD_VAR 0 3
53218: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
53219: LD_INT 0
53221: PPUSH
53222: PPUSH
53223: PPUSH
53224: PPUSH
// if not hack in hackTanks then
53225: LD_VAR 0 1
53229: PUSH
53230: LD_EXP 150
53234: IN
53235: NOT
53236: IFFALSE 53240
// exit ;
53238: GO 53484
// index := GetElementIndex ( hackTanks , hack ) ;
53240: LD_ADDR_VAR 0 4
53244: PUSH
53245: LD_EXP 150
53249: PPUSH
53250: LD_VAR 0 1
53254: PPUSH
53255: CALL 61373 0 2
53259: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
53260: LD_ADDR_VAR 0 3
53264: PUSH
53265: DOUBLE
53266: LD_EXP 151
53270: PUSH
53271: LD_VAR 0 4
53275: ARRAY
53276: INC
53277: ST_TO_ADDR
53278: LD_INT 1
53280: PUSH
53281: FOR_DOWNTO
53282: IFFALSE 53458
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
53284: LD_ADDR_VAR 0 5
53288: PUSH
53289: LD_EXP 151
53293: PUSH
53294: LD_VAR 0 4
53298: ARRAY
53299: PUSH
53300: LD_VAR 0 3
53304: ARRAY
53305: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
53306: LD_VAR 0 5
53310: PUSH
53311: LD_INT 1
53313: ARRAY
53314: PPUSH
53315: CALL_OW 302
53319: NOT
53320: IFTRUE 53348
53322: PUSH
53323: LD_VAR 0 5
53327: PUSH
53328: LD_INT 1
53330: ARRAY
53331: PPUSH
53332: CALL_OW 255
53336: PUSH
53337: LD_VAR 0 1
53341: PPUSH
53342: CALL_OW 255
53346: NONEQUAL
53347: OR
53348: IFFALSE 53456
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
53350: LD_VAR 0 5
53354: PUSH
53355: LD_INT 1
53357: ARRAY
53358: PPUSH
53359: CALL_OW 305
53363: IFFALSE 53391
53365: PUSH
53366: LD_VAR 0 5
53370: PUSH
53371: LD_INT 1
53373: ARRAY
53374: PPUSH
53375: CALL_OW 255
53379: PUSH
53380: LD_VAR 0 1
53384: PPUSH
53385: CALL_OW 255
53389: EQUAL
53390: AND
53391: IFFALSE 53415
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
53393: LD_VAR 0 5
53397: PUSH
53398: LD_INT 1
53400: ARRAY
53401: PPUSH
53402: LD_VAR 0 5
53406: PUSH
53407: LD_INT 2
53409: ARRAY
53410: PPUSH
53411: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
53415: LD_ADDR_EXP 151
53419: PUSH
53420: LD_EXP 151
53424: PPUSH
53425: LD_VAR 0 4
53429: PPUSH
53430: LD_EXP 151
53434: PUSH
53435: LD_VAR 0 4
53439: ARRAY
53440: PPUSH
53441: LD_VAR 0 3
53445: PPUSH
53446: CALL_OW 3
53450: PPUSH
53451: CALL_OW 1
53455: ST_TO_ADDR
// end ; end ;
53456: GO 53281
53458: POP
53459: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53460: LD_VAR 0 1
53464: PPUSH
53465: LD_EXP 151
53469: PUSH
53470: LD_VAR 0 4
53474: ARRAY
53475: PUSH
53476: LD_INT 0
53478: PLUS
53479: PPUSH
53480: CALL_OW 505
// end ;
53484: LD_VAR 0 2
53488: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
53489: LD_INT 0
53491: PPUSH
53492: PPUSH
53493: PPUSH
53494: PPUSH
// if not hack in hackTanks then
53495: LD_VAR 0 1
53499: PUSH
53500: LD_EXP 150
53504: IN
53505: NOT
53506: IFFALSE 53510
// exit ;
53508: GO 53595
// index := GetElementIndex ( hackTanks , hack ) ;
53510: LD_ADDR_VAR 0 5
53514: PUSH
53515: LD_EXP 150
53519: PPUSH
53520: LD_VAR 0 1
53524: PPUSH
53525: CALL 61373 0 2
53529: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
53530: LD_ADDR_VAR 0 4
53534: PUSH
53535: DOUBLE
53536: LD_INT 1
53538: DEC
53539: ST_TO_ADDR
53540: LD_EXP 151
53544: PUSH
53545: LD_VAR 0 5
53549: ARRAY
53550: PUSH
53551: FOR_TO
53552: IFFALSE 53593
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
53554: LD_EXP 151
53558: PUSH
53559: LD_VAR 0 5
53563: ARRAY
53564: PUSH
53565: LD_VAR 0 4
53569: ARRAY
53570: PUSH
53571: LD_INT 1
53573: ARRAY
53574: PUSH
53575: LD_VAR 0 2
53579: EQUAL
53580: IFFALSE 53591
// KillUnit ( vehicle ) ;
53582: LD_VAR 0 2
53586: PPUSH
53587: CALL_OW 66
53591: GO 53551
53593: POP
53594: POP
// end ;
53595: LD_VAR 0 3
53599: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
53600: LD_EXP 155
53604: NOT
53605: IFFALSE 53640
53607: GO 53609
53609: DISABLE
// begin initMiner := true ;
53610: LD_ADDR_EXP 155
53614: PUSH
53615: LD_INT 1
53617: ST_TO_ADDR
// minersList := [ ] ;
53618: LD_ADDR_EXP 156
53622: PUSH
53623: EMPTY
53624: ST_TO_ADDR
// minerMinesList := [ ] ;
53625: LD_ADDR_EXP 157
53629: PUSH
53630: EMPTY
53631: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
53632: LD_ADDR_EXP 158
53636: PUSH
53637: LD_INT 5
53639: ST_TO_ADDR
// end ;
53640: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
53641: LD_EXP 155
53645: IFFALSE 53663
53647: PUSH
53648: LD_INT 34
53650: PUSH
53651: LD_INT 81
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PPUSH
53658: CALL_OW 69
53662: AND
53663: IFFALSE 54126
53665: GO 53667
53667: DISABLE
53668: LD_INT 0
53670: PPUSH
53671: PPUSH
53672: PPUSH
53673: PPUSH
// begin enable ;
53674: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
53675: LD_ADDR_VAR 0 1
53679: PUSH
53680: LD_INT 34
53682: PUSH
53683: LD_INT 81
53685: PUSH
53686: EMPTY
53687: LIST
53688: LIST
53689: PPUSH
53690: CALL_OW 69
53694: PUSH
53695: FOR_IN
53696: IFFALSE 53768
// begin if not i in minersList then
53698: LD_VAR 0 1
53702: PUSH
53703: LD_EXP 156
53707: IN
53708: NOT
53709: IFFALSE 53766
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
53711: LD_ADDR_EXP 156
53715: PUSH
53716: LD_EXP 156
53720: PPUSH
53721: LD_EXP 156
53725: PUSH
53726: LD_INT 1
53728: PLUS
53729: PPUSH
53730: LD_VAR 0 1
53734: PPUSH
53735: CALL_OW 1
53739: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53740: LD_ADDR_EXP 157
53744: PUSH
53745: LD_EXP 157
53749: PPUSH
53750: LD_EXP 157
53754: PUSH
53755: LD_INT 1
53757: PLUS
53758: PPUSH
53759: EMPTY
53760: PPUSH
53761: CALL_OW 1
53765: ST_TO_ADDR
// end end ;
53766: GO 53695
53768: POP
53769: POP
// for i := minerMinesList downto 1 do
53770: LD_ADDR_VAR 0 1
53774: PUSH
53775: DOUBLE
53776: LD_EXP 157
53780: INC
53781: ST_TO_ADDR
53782: LD_INT 1
53784: PUSH
53785: FOR_DOWNTO
53786: IFFALSE 54124
// begin if IsLive ( minersList [ i ] ) then
53788: LD_EXP 156
53792: PUSH
53793: LD_VAR 0 1
53797: ARRAY
53798: PPUSH
53799: CALL_OW 300
53803: IFFALSE 53831
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
53805: LD_EXP 156
53809: PUSH
53810: LD_VAR 0 1
53814: ARRAY
53815: PPUSH
53816: LD_EXP 157
53820: PUSH
53821: LD_VAR 0 1
53825: ARRAY
53826: PPUSH
53827: CALL_OW 505
// if not minerMinesList [ i ] then
53831: LD_EXP 157
53835: PUSH
53836: LD_VAR 0 1
53840: ARRAY
53841: NOT
53842: IFFALSE 53846
// continue ;
53844: GO 53785
// for j := minerMinesList [ i ] downto 1 do
53846: LD_ADDR_VAR 0 2
53850: PUSH
53851: DOUBLE
53852: LD_EXP 157
53856: PUSH
53857: LD_VAR 0 1
53861: ARRAY
53862: INC
53863: ST_TO_ADDR
53864: LD_INT 1
53866: PUSH
53867: FOR_DOWNTO
53868: IFFALSE 54120
// begin side := GetSide ( minersList [ i ] ) ;
53870: LD_ADDR_VAR 0 3
53874: PUSH
53875: LD_EXP 156
53879: PUSH
53880: LD_VAR 0 1
53884: ARRAY
53885: PPUSH
53886: CALL_OW 255
53890: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53891: LD_ADDR_VAR 0 4
53895: PUSH
53896: LD_EXP 157
53900: PUSH
53901: LD_VAR 0 1
53905: ARRAY
53906: PUSH
53907: LD_VAR 0 2
53911: ARRAY
53912: PUSH
53913: LD_INT 1
53915: ARRAY
53916: PPUSH
53917: LD_EXP 157
53921: PUSH
53922: LD_VAR 0 1
53926: ARRAY
53927: PUSH
53928: LD_VAR 0 2
53932: ARRAY
53933: PUSH
53934: LD_INT 2
53936: ARRAY
53937: PPUSH
53938: CALL_OW 428
53942: ST_TO_ADDR
// if not tmp then
53943: LD_VAR 0 4
53947: NOT
53948: IFFALSE 53952
// continue ;
53950: GO 53867
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
53952: LD_VAR 0 4
53956: PUSH
53957: LD_INT 81
53959: PUSH
53960: LD_VAR 0 3
53964: PUSH
53965: EMPTY
53966: LIST
53967: LIST
53968: PPUSH
53969: CALL_OW 69
53973: IN
53974: IFFALSE 54024
53976: PUSH
53977: LD_EXP 157
53981: PUSH
53982: LD_VAR 0 1
53986: ARRAY
53987: PUSH
53988: LD_VAR 0 2
53992: ARRAY
53993: PUSH
53994: LD_INT 1
53996: ARRAY
53997: PPUSH
53998: LD_EXP 157
54002: PUSH
54003: LD_VAR 0 1
54007: ARRAY
54008: PUSH
54009: LD_VAR 0 2
54013: ARRAY
54014: PUSH
54015: LD_INT 2
54017: ARRAY
54018: PPUSH
54019: CALL_OW 458
54023: AND
54024: IFFALSE 54118
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
54026: LD_EXP 157
54030: PUSH
54031: LD_VAR 0 1
54035: ARRAY
54036: PUSH
54037: LD_VAR 0 2
54041: ARRAY
54042: PUSH
54043: LD_INT 1
54045: ARRAY
54046: PPUSH
54047: LD_EXP 157
54051: PUSH
54052: LD_VAR 0 1
54056: ARRAY
54057: PUSH
54058: LD_VAR 0 2
54062: ARRAY
54063: PUSH
54064: LD_INT 2
54066: ARRAY
54067: PPUSH
54068: LD_VAR 0 3
54072: PPUSH
54073: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
54077: LD_ADDR_EXP 157
54081: PUSH
54082: LD_EXP 157
54086: PPUSH
54087: LD_VAR 0 1
54091: PPUSH
54092: LD_EXP 157
54096: PUSH
54097: LD_VAR 0 1
54101: ARRAY
54102: PPUSH
54103: LD_VAR 0 2
54107: PPUSH
54108: CALL_OW 3
54112: PPUSH
54113: CALL_OW 1
54117: ST_TO_ADDR
// end ; end ;
54118: GO 53867
54120: POP
54121: POP
// end ;
54122: GO 53785
54124: POP
54125: POP
// end ;
54126: PPOPN 4
54128: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
54129: LD_INT 0
54131: PPUSH
54132: PPUSH
// result := false ;
54133: LD_ADDR_VAR 0 4
54137: PUSH
54138: LD_INT 0
54140: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
54141: LD_VAR 0 1
54145: PPUSH
54146: CALL_OW 264
54150: PUSH
54151: LD_INT 81
54153: EQUAL
54154: NOT
54155: IFFALSE 54159
// exit ;
54157: GO 54403
// index := GetElementIndex ( minersList , unit ) ;
54159: LD_ADDR_VAR 0 5
54163: PUSH
54164: LD_EXP 156
54168: PPUSH
54169: LD_VAR 0 1
54173: PPUSH
54174: CALL 61373 0 2
54178: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
54179: LD_EXP 157
54183: PUSH
54184: LD_VAR 0 5
54188: ARRAY
54189: PUSH
54190: LD_EXP 158
54194: GREATEREQUAL
54195: IFFALSE 54199
// exit ;
54197: GO 54403
// ComMoveXY ( unit , x , y ) ;
54199: LD_VAR 0 1
54203: PPUSH
54204: LD_VAR 0 2
54208: PPUSH
54209: LD_VAR 0 3
54213: PPUSH
54214: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54218: LD_INT 35
54220: PPUSH
54221: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
54225: LD_VAR 0 1
54229: PPUSH
54230: LD_VAR 0 2
54234: PPUSH
54235: LD_VAR 0 3
54239: PPUSH
54240: CALL 93419 0 3
54244: NOT
54245: IFFALSE 54258
54247: PUSH
54248: LD_VAR 0 1
54252: PPUSH
54253: CALL_OW 314
54257: AND
54258: IFFALSE 54262
// exit ;
54260: GO 54403
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
54262: LD_VAR 0 2
54266: PPUSH
54267: LD_VAR 0 3
54271: PPUSH
54272: CALL_OW 428
54276: PUSH
54277: LD_VAR 0 1
54281: EQUAL
54282: IFFALSE 54296
54284: PUSH
54285: LD_VAR 0 1
54289: PPUSH
54290: CALL_OW 314
54294: NOT
54295: AND
54296: IFFALSE 54218
// PlaySoundXY ( x , y , PlantMine ) ;
54298: LD_VAR 0 2
54302: PPUSH
54303: LD_VAR 0 3
54307: PPUSH
54308: LD_STRING PlantMine
54310: PPUSH
54311: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
54315: LD_VAR 0 2
54319: PPUSH
54320: LD_VAR 0 3
54324: PPUSH
54325: LD_VAR 0 1
54329: PPUSH
54330: CALL_OW 255
54334: PPUSH
54335: LD_INT 0
54337: PPUSH
54338: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
54342: LD_ADDR_EXP 157
54346: PUSH
54347: LD_EXP 157
54351: PPUSH
54352: LD_VAR 0 5
54356: PUSH
54357: LD_EXP 157
54361: PUSH
54362: LD_VAR 0 5
54366: ARRAY
54367: PUSH
54368: LD_INT 1
54370: PLUS
54371: PUSH
54372: EMPTY
54373: LIST
54374: LIST
54375: PPUSH
54376: LD_VAR 0 2
54380: PUSH
54381: LD_VAR 0 3
54385: PUSH
54386: EMPTY
54387: LIST
54388: LIST
54389: PPUSH
54390: CALL 61590 0 3
54394: ST_TO_ADDR
// result := true ;
54395: LD_ADDR_VAR 0 4
54399: PUSH
54400: LD_INT 1
54402: ST_TO_ADDR
// end ;
54403: LD_VAR 0 4
54407: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
54408: LD_INT 0
54410: PPUSH
54411: PPUSH
54412: PPUSH
// if not unit in minersList then
54413: LD_VAR 0 1
54417: PUSH
54418: LD_EXP 156
54422: IN
54423: NOT
54424: IFFALSE 54428
// exit ;
54426: GO 54822
// index := GetElementIndex ( minersList , unit ) ;
54428: LD_ADDR_VAR 0 6
54432: PUSH
54433: LD_EXP 156
54437: PPUSH
54438: LD_VAR 0 1
54442: PPUSH
54443: CALL 61373 0 2
54447: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
54448: LD_ADDR_VAR 0 5
54452: PUSH
54453: DOUBLE
54454: LD_EXP 157
54458: PUSH
54459: LD_VAR 0 6
54463: ARRAY
54464: INC
54465: ST_TO_ADDR
54466: LD_INT 1
54468: PUSH
54469: FOR_DOWNTO
54470: IFFALSE 54633
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
54472: LD_EXP 157
54476: PUSH
54477: LD_VAR 0 6
54481: ARRAY
54482: PUSH
54483: LD_VAR 0 5
54487: ARRAY
54488: PUSH
54489: LD_INT 1
54491: ARRAY
54492: PUSH
54493: LD_VAR 0 2
54497: EQUAL
54498: IFFALSE 54528
54500: PUSH
54501: LD_EXP 157
54505: PUSH
54506: LD_VAR 0 6
54510: ARRAY
54511: PUSH
54512: LD_VAR 0 5
54516: ARRAY
54517: PUSH
54518: LD_INT 2
54520: ARRAY
54521: PUSH
54522: LD_VAR 0 3
54526: EQUAL
54527: AND
54528: IFFALSE 54631
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54530: LD_EXP 157
54534: PUSH
54535: LD_VAR 0 6
54539: ARRAY
54540: PUSH
54541: LD_VAR 0 5
54545: ARRAY
54546: PUSH
54547: LD_INT 1
54549: ARRAY
54550: PPUSH
54551: LD_EXP 157
54555: PUSH
54556: LD_VAR 0 6
54560: ARRAY
54561: PUSH
54562: LD_VAR 0 5
54566: ARRAY
54567: PUSH
54568: LD_INT 2
54570: ARRAY
54571: PPUSH
54572: LD_VAR 0 1
54576: PPUSH
54577: CALL_OW 255
54581: PPUSH
54582: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54586: LD_ADDR_EXP 157
54590: PUSH
54591: LD_EXP 157
54595: PPUSH
54596: LD_VAR 0 6
54600: PPUSH
54601: LD_EXP 157
54605: PUSH
54606: LD_VAR 0 6
54610: ARRAY
54611: PPUSH
54612: LD_VAR 0 5
54616: PPUSH
54617: CALL_OW 3
54621: PPUSH
54622: CALL_OW 1
54626: ST_TO_ADDR
// exit ;
54627: POP
54628: POP
54629: GO 54822
// end ; end ;
54631: GO 54469
54633: POP
54634: POP
// for i := minerMinesList [ index ] downto 1 do
54635: LD_ADDR_VAR 0 5
54639: PUSH
54640: DOUBLE
54641: LD_EXP 157
54645: PUSH
54646: LD_VAR 0 6
54650: ARRAY
54651: INC
54652: ST_TO_ADDR
54653: LD_INT 1
54655: PUSH
54656: FOR_DOWNTO
54657: IFFALSE 54820
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
54659: LD_EXP 157
54663: PUSH
54664: LD_VAR 0 6
54668: ARRAY
54669: PUSH
54670: LD_VAR 0 5
54674: ARRAY
54675: PUSH
54676: LD_INT 1
54678: ARRAY
54679: PPUSH
54680: LD_EXP 157
54684: PUSH
54685: LD_VAR 0 6
54689: ARRAY
54690: PUSH
54691: LD_VAR 0 5
54695: ARRAY
54696: PUSH
54697: LD_INT 2
54699: ARRAY
54700: PPUSH
54701: LD_VAR 0 2
54705: PPUSH
54706: LD_VAR 0 3
54710: PPUSH
54711: CALL_OW 298
54715: PUSH
54716: LD_INT 6
54718: LESS
54719: IFFALSE 54818
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54721: LD_EXP 157
54725: PUSH
54726: LD_VAR 0 6
54730: ARRAY
54731: PUSH
54732: LD_VAR 0 5
54736: ARRAY
54737: PUSH
54738: LD_INT 1
54740: ARRAY
54741: PPUSH
54742: LD_EXP 157
54746: PUSH
54747: LD_VAR 0 6
54751: ARRAY
54752: PUSH
54753: LD_VAR 0 5
54757: ARRAY
54758: PUSH
54759: LD_INT 2
54761: ARRAY
54762: PPUSH
54763: LD_VAR 0 1
54767: PPUSH
54768: CALL_OW 255
54772: PPUSH
54773: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54777: LD_ADDR_EXP 157
54781: PUSH
54782: LD_EXP 157
54786: PPUSH
54787: LD_VAR 0 6
54791: PPUSH
54792: LD_EXP 157
54796: PUSH
54797: LD_VAR 0 6
54801: ARRAY
54802: PPUSH
54803: LD_VAR 0 5
54807: PPUSH
54808: CALL_OW 3
54812: PPUSH
54813: CALL_OW 1
54817: ST_TO_ADDR
// end ; end ;
54818: GO 54656
54820: POP
54821: POP
// end ;
54822: LD_VAR 0 4
54826: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
54827: LD_INT 0
54829: PPUSH
54830: PPUSH
54831: PPUSH
54832: PPUSH
54833: PPUSH
54834: PPUSH
54835: PPUSH
54836: PPUSH
54837: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
54838: LD_VAR 0 1
54842: PPUSH
54843: CALL_OW 264
54847: PUSH
54848: LD_INT 81
54850: EQUAL
54851: NOT
54852: IFTRUE 54867
54854: PUSH
54855: LD_VAR 0 1
54859: PUSH
54860: LD_EXP 156
54864: IN
54865: NOT
54866: OR
54867: IFFALSE 54871
// exit ;
54869: GO 55197
// index := GetElementIndex ( minersList , unit ) ;
54871: LD_ADDR_VAR 0 6
54875: PUSH
54876: LD_EXP 156
54880: PPUSH
54881: LD_VAR 0 1
54885: PPUSH
54886: CALL 61373 0 2
54890: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
54891: LD_ADDR_VAR 0 8
54895: PUSH
54896: LD_EXP 158
54900: PUSH
54901: LD_EXP 157
54905: PUSH
54906: LD_VAR 0 6
54910: ARRAY
54911: MINUS
54912: ST_TO_ADDR
// if not minesFreeAmount then
54913: LD_VAR 0 8
54917: NOT
54918: IFFALSE 54922
// exit ;
54920: GO 55197
// tmp := [ ] ;
54922: LD_ADDR_VAR 0 7
54926: PUSH
54927: EMPTY
54928: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
54929: LD_ADDR_VAR 0 5
54933: PUSH
54934: DOUBLE
54935: LD_INT 1
54937: DEC
54938: ST_TO_ADDR
54939: LD_VAR 0 8
54943: PUSH
54944: FOR_TO
54945: IFFALSE 55144
// begin _d := rand ( 0 , 5 ) ;
54947: LD_ADDR_VAR 0 11
54951: PUSH
54952: LD_INT 0
54954: PPUSH
54955: LD_INT 5
54957: PPUSH
54958: CALL_OW 12
54962: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
54963: LD_ADDR_VAR 0 12
54967: PUSH
54968: LD_INT 2
54970: PPUSH
54971: LD_INT 6
54973: PPUSH
54974: CALL_OW 12
54978: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
54979: LD_ADDR_VAR 0 9
54983: PUSH
54984: LD_VAR 0 2
54988: PPUSH
54989: LD_VAR 0 11
54993: PPUSH
54994: LD_VAR 0 12
54998: PPUSH
54999: CALL_OW 272
55003: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
55004: LD_ADDR_VAR 0 10
55008: PUSH
55009: LD_VAR 0 3
55013: PPUSH
55014: LD_VAR 0 11
55018: PPUSH
55019: LD_VAR 0 12
55023: PPUSH
55024: CALL_OW 273
55028: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
55029: LD_VAR 0 9
55033: PPUSH
55034: LD_VAR 0 10
55038: PPUSH
55039: CALL_OW 488
55043: IFFALSE 55067
55045: PUSH
55046: LD_VAR 0 9
55050: PUSH
55051: LD_VAR 0 10
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_VAR 0 7
55064: IN
55065: NOT
55066: AND
55067: IFFALSE 55086
55069: PUSH
55070: LD_VAR 0 9
55074: PPUSH
55075: LD_VAR 0 10
55079: PPUSH
55080: CALL_OW 458
55084: NOT
55085: AND
55086: IFFALSE 55128
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
55088: LD_ADDR_VAR 0 7
55092: PUSH
55093: LD_VAR 0 7
55097: PPUSH
55098: LD_VAR 0 7
55102: PUSH
55103: LD_INT 1
55105: PLUS
55106: PPUSH
55107: LD_VAR 0 9
55111: PUSH
55112: LD_VAR 0 10
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PPUSH
55121: CALL_OW 1
55125: ST_TO_ADDR
55126: GO 55142
// i := i - 1 ;
55128: LD_ADDR_VAR 0 5
55132: PUSH
55133: LD_VAR 0 5
55137: PUSH
55138: LD_INT 1
55140: MINUS
55141: ST_TO_ADDR
// end ;
55142: GO 54944
55144: POP
55145: POP
// for i in tmp do
55146: LD_ADDR_VAR 0 5
55150: PUSH
55151: LD_VAR 0 7
55155: PUSH
55156: FOR_IN
55157: IFFALSE 55195
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
55159: LD_VAR 0 1
55163: PPUSH
55164: LD_VAR 0 5
55168: PUSH
55169: LD_INT 1
55171: ARRAY
55172: PPUSH
55173: LD_VAR 0 5
55177: PUSH
55178: LD_INT 2
55180: ARRAY
55181: PPUSH
55182: CALL 54129 0 3
55186: NOT
55187: IFFALSE 55193
// exit ;
55189: POP
55190: POP
55191: GO 55197
55193: GO 55156
55195: POP
55196: POP
// end ;
55197: LD_VAR 0 4
55201: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
55202: LD_INT 0
55204: PPUSH
55205: PPUSH
55206: PPUSH
55207: PPUSH
55208: PPUSH
55209: PPUSH
55210: PPUSH
55211: PPUSH
55212: PPUSH
// if GetClass ( unit ) <> class_sniper then
55213: LD_VAR 0 1
55217: PPUSH
55218: CALL_OW 257
55222: PUSH
55223: LD_INT 5
55225: NONEQUAL
55226: IFFALSE 55230
// exit ;
55228: GO 55700
// dist := 8 ;
55230: LD_ADDR_VAR 0 5
55234: PUSH
55235: LD_INT 8
55237: ST_TO_ADDR
// viewRange := 12 ;
55238: LD_ADDR_VAR 0 8
55242: PUSH
55243: LD_INT 12
55245: ST_TO_ADDR
// side := GetSide ( unit ) ;
55246: LD_ADDR_VAR 0 6
55250: PUSH
55251: LD_VAR 0 1
55255: PPUSH
55256: CALL_OW 255
55260: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
55261: LD_INT 61
55263: PPUSH
55264: LD_VAR 0 6
55268: PPUSH
55269: CALL_OW 321
55273: PUSH
55274: LD_INT 2
55276: EQUAL
55277: IFFALSE 55287
// viewRange := 16 ;
55279: LD_ADDR_VAR 0 8
55283: PUSH
55284: LD_INT 16
55286: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
55287: LD_VAR 0 1
55291: PPUSH
55292: LD_VAR 0 2
55296: PPUSH
55297: LD_VAR 0 3
55301: PPUSH
55302: CALL_OW 297
55306: PUSH
55307: LD_VAR 0 5
55311: GREATER
55312: IFFALSE 55391
// begin ComMoveXY ( unit , x , y ) ;
55314: LD_VAR 0 1
55318: PPUSH
55319: LD_VAR 0 2
55323: PPUSH
55324: LD_VAR 0 3
55328: PPUSH
55329: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55333: LD_INT 35
55335: PPUSH
55336: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
55340: LD_VAR 0 1
55344: PPUSH
55345: LD_VAR 0 2
55349: PPUSH
55350: LD_VAR 0 3
55354: PPUSH
55355: CALL 93419 0 3
55359: NOT
55360: IFFALSE 55364
// exit ;
55362: GO 55700
// until GetDistUnitXY ( unit , x , y ) < dist ;
55364: LD_VAR 0 1
55368: PPUSH
55369: LD_VAR 0 2
55373: PPUSH
55374: LD_VAR 0 3
55378: PPUSH
55379: CALL_OW 297
55383: PUSH
55384: LD_VAR 0 5
55388: LESS
55389: IFFALSE 55333
// end ; ComTurnXY ( unit , x , y ) ;
55391: LD_VAR 0 1
55395: PPUSH
55396: LD_VAR 0 2
55400: PPUSH
55401: LD_VAR 0 3
55405: PPUSH
55406: CALL_OW 118
// repeat if Multiplayer then
55410: LD_OWVAR 4
55414: IFFALSE 55425
// wait ( 35 ) else
55416: LD_INT 35
55418: PPUSH
55419: CALL_OW 67
55423: GO 55432
// wait ( 5 ) ;
55425: LD_INT 5
55427: PPUSH
55428: CALL_OW 67
// _d := GetDir ( unit ) ;
55432: LD_ADDR_VAR 0 11
55436: PUSH
55437: LD_VAR 0 1
55441: PPUSH
55442: CALL_OW 254
55446: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
55447: LD_ADDR_VAR 0 7
55451: PUSH
55452: LD_VAR 0 1
55456: PPUSH
55457: CALL_OW 250
55461: PPUSH
55462: LD_VAR 0 1
55466: PPUSH
55467: CALL_OW 251
55471: PPUSH
55472: LD_VAR 0 2
55476: PPUSH
55477: LD_VAR 0 3
55481: PPUSH
55482: CALL 96055 0 4
55486: ST_TO_ADDR
// until dir = _d ;
55487: LD_VAR 0 7
55491: PUSH
55492: LD_VAR 0 11
55496: EQUAL
55497: IFFALSE 55410
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
55499: LD_ADDR_VAR 0 9
55503: PUSH
55504: LD_VAR 0 1
55508: PPUSH
55509: CALL_OW 250
55513: PPUSH
55514: LD_VAR 0 7
55518: PPUSH
55519: LD_VAR 0 5
55523: PPUSH
55524: CALL_OW 272
55528: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
55529: LD_ADDR_VAR 0 10
55533: PUSH
55534: LD_VAR 0 1
55538: PPUSH
55539: CALL_OW 251
55543: PPUSH
55544: LD_VAR 0 7
55548: PPUSH
55549: LD_VAR 0 5
55553: PPUSH
55554: CALL_OW 273
55558: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55559: LD_VAR 0 9
55563: PPUSH
55564: LD_VAR 0 10
55568: PPUSH
55569: CALL_OW 488
55573: NOT
55574: IFFALSE 55578
// exit ;
55576: GO 55700
// ComAnimCustom ( unit , 1 ) ;
55578: LD_VAR 0 1
55582: PPUSH
55583: LD_INT 1
55585: PPUSH
55586: CALL_OW 592
// p := 0 ;
55590: LD_ADDR_VAR 0 12
55594: PUSH
55595: LD_INT 0
55597: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
55598: LD_VAR 0 9
55602: PPUSH
55603: LD_VAR 0 10
55607: PPUSH
55608: LD_VAR 0 6
55612: PPUSH
55613: LD_VAR 0 8
55617: PPUSH
55618: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
55622: LD_INT 35
55624: PPUSH
55625: CALL_OW 67
// p := Inc ( p ) ;
55629: LD_ADDR_VAR 0 12
55633: PUSH
55634: LD_VAR 0 12
55638: PPUSH
55639: CALL 96011 0 1
55643: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
55644: LD_VAR 0 12
55648: PUSH
55649: LD_INT 3
55651: EQUAL
55652: IFTRUE 55666
55654: PUSH
55655: LD_VAR 0 1
55659: PPUSH
55660: CALL_OW 302
55664: NOT
55665: OR
55666: IFTRUE 55679
55668: PUSH
55669: LD_VAR 0 1
55673: PPUSH
55674: CALL_OW 301
55678: OR
55679: IFFALSE 55622
// RemoveSeeing ( _x , _y , side ) ;
55681: LD_VAR 0 9
55685: PPUSH
55686: LD_VAR 0 10
55690: PPUSH
55691: LD_VAR 0 6
55695: PPUSH
55696: CALL_OW 331
// end ;
55700: LD_VAR 0 4
55704: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
55705: LD_INT 0
55707: PPUSH
55708: PPUSH
55709: PPUSH
55710: PPUSH
55711: PPUSH
55712: PPUSH
55713: PPUSH
55714: PPUSH
55715: PPUSH
55716: PPUSH
55717: PPUSH
// if not unit then
55718: LD_VAR 0 1
55722: NOT
55723: IFFALSE 55727
// exit ;
55725: GO 55998
// side := GetSide ( unit ) ;
55727: LD_ADDR_VAR 0 3
55731: PUSH
55732: LD_VAR 0 1
55736: PPUSH
55737: CALL_OW 255
55741: ST_TO_ADDR
// x := GetX ( unit ) ;
55742: LD_ADDR_VAR 0 5
55746: PUSH
55747: LD_VAR 0 1
55751: PPUSH
55752: CALL_OW 250
55756: ST_TO_ADDR
// y := GetY ( unit ) ;
55757: LD_ADDR_VAR 0 6
55761: PUSH
55762: LD_VAR 0 1
55766: PPUSH
55767: CALL_OW 251
55771: ST_TO_ADDR
// r := 8 ;
55772: LD_ADDR_VAR 0 4
55776: PUSH
55777: LD_INT 8
55779: ST_TO_ADDR
// if x - r < 0 then
55780: LD_VAR 0 5
55784: PUSH
55785: LD_VAR 0 4
55789: MINUS
55790: PUSH
55791: LD_INT 0
55793: LESS
55794: IFFALSE 55806
// min_x := 0 else
55796: LD_ADDR_VAR 0 7
55800: PUSH
55801: LD_INT 0
55803: ST_TO_ADDR
55804: GO 55822
// min_x := x - r ;
55806: LD_ADDR_VAR 0 7
55810: PUSH
55811: LD_VAR 0 5
55815: PUSH
55816: LD_VAR 0 4
55820: MINUS
55821: ST_TO_ADDR
// if y - r < 0 then
55822: LD_VAR 0 6
55826: PUSH
55827: LD_VAR 0 4
55831: MINUS
55832: PUSH
55833: LD_INT 0
55835: LESS
55836: IFFALSE 55848
// min_y := 0 else
55838: LD_ADDR_VAR 0 8
55842: PUSH
55843: LD_INT 0
55845: ST_TO_ADDR
55846: GO 55864
// min_y := y - r ;
55848: LD_ADDR_VAR 0 8
55852: PUSH
55853: LD_VAR 0 6
55857: PUSH
55858: LD_VAR 0 4
55862: MINUS
55863: ST_TO_ADDR
// max_x := x + r ;
55864: LD_ADDR_VAR 0 9
55868: PUSH
55869: LD_VAR 0 5
55873: PUSH
55874: LD_VAR 0 4
55878: PLUS
55879: ST_TO_ADDR
// max_y := y + r ;
55880: LD_ADDR_VAR 0 10
55884: PUSH
55885: LD_VAR 0 6
55889: PUSH
55890: LD_VAR 0 4
55894: PLUS
55895: ST_TO_ADDR
// for _x = min_x to max_x do
55896: LD_ADDR_VAR 0 11
55900: PUSH
55901: DOUBLE
55902: LD_VAR 0 7
55906: DEC
55907: ST_TO_ADDR
55908: LD_VAR 0 9
55912: PUSH
55913: FOR_TO
55914: IFFALSE 55996
// for _y = min_y to max_y do
55916: LD_ADDR_VAR 0 12
55920: PUSH
55921: DOUBLE
55922: LD_VAR 0 8
55926: DEC
55927: ST_TO_ADDR
55928: LD_VAR 0 10
55932: PUSH
55933: FOR_TO
55934: IFFALSE 55992
// begin if not ValidHex ( _x , _y ) then
55936: LD_VAR 0 11
55940: PPUSH
55941: LD_VAR 0 12
55945: PPUSH
55946: CALL_OW 488
55950: NOT
55951: IFFALSE 55955
// continue ;
55953: GO 55933
// if MineAtPos ( _x , _y ) then
55955: LD_VAR 0 11
55959: PPUSH
55960: LD_VAR 0 12
55964: PPUSH
55965: CALL_OW 458
55969: IFFALSE 55990
// ViewMineAtPos ( _x , _y , side ) ;
55971: LD_VAR 0 11
55975: PPUSH
55976: LD_VAR 0 12
55980: PPUSH
55981: LD_VAR 0 3
55985: PPUSH
55986: CALL_OW 457
// end ;
55990: GO 55933
55992: POP
55993: POP
55994: GO 55913
55996: POP
55997: POP
// end ;
55998: LD_VAR 0 2
56002: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
56003: LD_INT 0
56005: PPUSH
56006: PPUSH
56007: PPUSH
56008: PPUSH
56009: PPUSH
56010: PPUSH
// if not units then
56011: LD_VAR 0 1
56015: NOT
56016: IFFALSE 56020
// exit ;
56018: GO 56450
// scaners := [ ] ;
56020: LD_ADDR_VAR 0 6
56024: PUSH
56025: EMPTY
56026: ST_TO_ADDR
// for i in units do
56027: LD_ADDR_VAR 0 3
56031: PUSH
56032: LD_VAR 0 1
56036: PUSH
56037: FOR_IN
56038: IFFALSE 56195
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
56040: LD_VAR 0 3
56044: PPUSH
56045: CALL_OW 264
56049: PUSH
56050: LD_INT 11
56052: NONEQUAL
56053: IFTRUE 56067
56055: PUSH
56056: LD_VAR 0 3
56060: PPUSH
56061: CALL_OW 302
56065: NOT
56066: OR
56067: IFTRUE 56084
56069: PUSH
56070: LD_VAR 0 3
56074: PPUSH
56075: CALL_OW 110
56079: PUSH
56080: LD_INT 502
56082: EQUAL
56083: OR
56084: IFFALSE 56088
// continue ;
56086: GO 56037
// ComStop ( i ) ;
56088: LD_VAR 0 3
56092: PPUSH
56093: CALL_OW 141
// x := GetX ( i ) ;
56097: LD_ADDR_VAR 0 4
56101: PUSH
56102: LD_VAR 0 3
56106: PPUSH
56107: CALL_OW 250
56111: ST_TO_ADDR
// y := GetY ( i ) ;
56112: LD_ADDR_VAR 0 5
56116: PUSH
56117: LD_VAR 0 3
56121: PPUSH
56122: CALL_OW 251
56126: ST_TO_ADDR
// if GetSide ( i ) = your_side then
56127: LD_VAR 0 3
56131: PPUSH
56132: CALL_OW 255
56136: PUSH
56137: LD_OWVAR 2
56141: EQUAL
56142: IFFALSE 56161
// PlaySoundXY ( x , y , mineDetector ) ;
56144: LD_VAR 0 4
56148: PPUSH
56149: LD_VAR 0 5
56153: PPUSH
56154: LD_STRING mineDetector
56156: PPUSH
56157: CALL_OW 366
// scaners := Join ( scaners , i ) ;
56161: LD_ADDR_VAR 0 6
56165: PUSH
56166: LD_VAR 0 6
56170: PPUSH
56171: LD_VAR 0 3
56175: PPUSH
56176: CALL 94638 0 2
56180: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
56181: LD_VAR 0 3
56185: PPUSH
56186: LD_INT 502
56188: PPUSH
56189: CALL_OW 109
// end ;
56193: GO 56037
56195: POP
56196: POP
// if not scaners then
56197: LD_VAR 0 6
56201: NOT
56202: IFFALSE 56206
// exit ;
56204: GO 56450
// wait ( 3 ) ;
56206: LD_INT 3
56208: PPUSH
56209: CALL_OW 67
// timer := 6 ;
56213: LD_ADDR_VAR 0 7
56217: PUSH
56218: LD_INT 6
56220: ST_TO_ADDR
// repeat for i in scaners do
56221: LD_ADDR_VAR 0 3
56225: PUSH
56226: LD_VAR 0 6
56230: PUSH
56231: FOR_IN
56232: IFFALSE 56348
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
56234: LD_VAR 0 3
56238: PPUSH
56239: CALL_OW 302
56243: NOT
56244: IFTRUE 56257
56246: PUSH
56247: LD_VAR 0 3
56251: PPUSH
56252: CALL_OW 314
56256: OR
56257: IFTRUE 56288
56259: PUSH
56260: LD_VAR 0 3
56264: PPUSH
56265: CALL_OW 263
56269: PUSH
56270: LD_INT 1
56272: EQUAL
56273: IFFALSE 56287
56275: PUSH
56276: LD_VAR 0 3
56280: PPUSH
56281: CALL_OW 311
56285: NOT
56286: AND
56287: OR
56288: IFFALSE 56332
// begin SetUnitDisplayNumber ( i , 0 ) ;
56290: LD_VAR 0 3
56294: PPUSH
56295: LD_INT 0
56297: PPUSH
56298: CALL_OW 505
// SetTag ( i , 0 ) ;
56302: LD_VAR 0 3
56306: PPUSH
56307: LD_INT 0
56309: PPUSH
56310: CALL_OW 109
// scaners := scaners diff i ;
56314: LD_ADDR_VAR 0 6
56318: PUSH
56319: LD_VAR 0 6
56323: PUSH
56324: LD_VAR 0 3
56328: DIFF
56329: ST_TO_ADDR
// continue ;
56330: GO 56231
// end ; SetUnitDisplayNumber ( i , timer ) ;
56332: LD_VAR 0 3
56336: PPUSH
56337: LD_VAR 0 7
56341: PPUSH
56342: CALL_OW 505
// end ;
56346: GO 56231
56348: POP
56349: POP
// if not scaners then
56350: LD_VAR 0 6
56354: NOT
56355: IFFALSE 56359
// exit ;
56357: GO 56450
// timer := Dec ( timer ) ;
56359: LD_ADDR_VAR 0 7
56363: PUSH
56364: LD_VAR 0 7
56368: PPUSH
56369: CALL 96033 0 1
56373: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56374: LD_INT 35
56376: PPUSH
56377: CALL_OW 67
// until timer = 0 ;
56381: LD_VAR 0 7
56385: PUSH
56386: LD_INT 0
56388: EQUAL
56389: IFFALSE 56221
// if not scaners then
56391: LD_VAR 0 6
56395: NOT
56396: IFFALSE 56400
// exit ;
56398: GO 56450
// for i in scaners do
56400: LD_ADDR_VAR 0 3
56404: PUSH
56405: LD_VAR 0 6
56409: PUSH
56410: FOR_IN
56411: IFFALSE 56448
// begin SetUnitDisplayNumber ( i , 0 ) ;
56413: LD_VAR 0 3
56417: PPUSH
56418: LD_INT 0
56420: PPUSH
56421: CALL_OW 505
// SetTag ( i , 0 ) ;
56425: LD_VAR 0 3
56429: PPUSH
56430: LD_INT 0
56432: PPUSH
56433: CALL_OW 109
// RevealDetectorMine ( i ) ;
56437: LD_VAR 0 3
56441: PPUSH
56442: CALL 55705 0 1
// end ;
56446: GO 56410
56448: POP
56449: POP
// end ;
56450: LD_VAR 0 2
56454: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
56455: LD_INT 0
56457: PPUSH
// if p1 = mine_detector_mode then
56458: LD_VAR 0 2
56462: PUSH
56463: LD_INT 103
56465: EQUAL
56466: IFFALSE 56477
// DetectMine ( units ) ;
56468: LD_VAR 0 1
56472: PPUSH
56473: CALL 56003 0 1
// end ; end_of_file
56477: LD_VAR 0 7
56481: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
56482: LD_INT 0
56484: PPUSH
56485: PPUSH
// if exist_mode then
56486: LD_VAR 0 2
56490: IFFALSE 56536
// begin unit := CreateCharacter ( prefix & ident ) ;
56492: LD_ADDR_VAR 0 5
56496: PUSH
56497: LD_VAR 0 3
56501: PUSH
56502: LD_VAR 0 1
56506: STR
56507: PPUSH
56508: CALL_OW 34
56512: ST_TO_ADDR
// if unit then
56513: LD_VAR 0 5
56517: IFFALSE 56534
// DeleteCharacters ( prefix & ident ) ;
56519: LD_VAR 0 3
56523: PUSH
56524: LD_VAR 0 1
56528: STR
56529: PPUSH
56530: CALL_OW 40
// end else
56534: GO 56551
// unit := NewCharacter ( ident ) ;
56536: LD_ADDR_VAR 0 5
56540: PUSH
56541: LD_VAR 0 1
56545: PPUSH
56546: CALL_OW 25
56550: ST_TO_ADDR
// result := unit ;
56551: LD_ADDR_VAR 0 4
56555: PUSH
56556: LD_VAR 0 5
56560: ST_TO_ADDR
// end ;
56561: LD_VAR 0 4
56565: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
56566: LD_INT 0
56568: PPUSH
56569: PPUSH
// if exist_mode then
56570: LD_VAR 0 2
56574: IFFALSE 56599
// unit := CreateCharacter ( prefix & ident ) else
56576: LD_ADDR_VAR 0 5
56580: PUSH
56581: LD_VAR 0 3
56585: PUSH
56586: LD_VAR 0 1
56590: STR
56591: PPUSH
56592: CALL_OW 34
56596: ST_TO_ADDR
56597: GO 56614
// unit := NewCharacter ( ident ) ;
56599: LD_ADDR_VAR 0 5
56603: PUSH
56604: LD_VAR 0 1
56608: PPUSH
56609: CALL_OW 25
56613: ST_TO_ADDR
// result := unit ;
56614: LD_ADDR_VAR 0 4
56618: PUSH
56619: LD_VAR 0 5
56623: ST_TO_ADDR
// end ;
56624: LD_VAR 0 4
56628: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
56629: LD_INT 0
56631: PPUSH
56632: PPUSH
// if not side or not nation then
56633: LD_VAR 0 1
56637: NOT
56638: IFTRUE 56647
56640: PUSH
56641: LD_VAR 0 2
56645: NOT
56646: OR
56647: IFFALSE 56651
// exit ;
56649: GO 57445
// case nation of nation_american :
56651: LD_VAR 0 2
56655: PUSH
56656: LD_INT 1
56658: DOUBLE
56659: EQUAL
56660: IFTRUE 56664
56662: GO 56886
56664: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
56665: LD_ADDR_VAR 0 4
56669: PUSH
56670: LD_INT 35
56672: PUSH
56673: LD_INT 45
56675: PUSH
56676: LD_INT 46
56678: PUSH
56679: LD_INT 47
56681: PUSH
56682: LD_INT 82
56684: PUSH
56685: LD_INT 83
56687: PUSH
56688: LD_INT 84
56690: PUSH
56691: LD_INT 85
56693: PUSH
56694: LD_INT 86
56696: PUSH
56697: LD_INT 1
56699: PUSH
56700: LD_INT 2
56702: PUSH
56703: LD_INT 6
56705: PUSH
56706: LD_INT 15
56708: PUSH
56709: LD_INT 16
56711: PUSH
56712: LD_INT 7
56714: PUSH
56715: LD_INT 12
56717: PUSH
56718: LD_INT 13
56720: PUSH
56721: LD_INT 10
56723: PUSH
56724: LD_INT 14
56726: PUSH
56727: LD_INT 20
56729: PUSH
56730: LD_INT 21
56732: PUSH
56733: LD_INT 22
56735: PUSH
56736: LD_INT 25
56738: PUSH
56739: LD_INT 32
56741: PUSH
56742: LD_INT 27
56744: PUSH
56745: LD_INT 36
56747: PUSH
56748: LD_INT 69
56750: PUSH
56751: LD_INT 39
56753: PUSH
56754: LD_INT 34
56756: PUSH
56757: LD_INT 40
56759: PUSH
56760: LD_INT 48
56762: PUSH
56763: LD_INT 49
56765: PUSH
56766: LD_INT 50
56768: PUSH
56769: LD_INT 51
56771: PUSH
56772: LD_INT 52
56774: PUSH
56775: LD_INT 53
56777: PUSH
56778: LD_INT 54
56780: PUSH
56781: LD_INT 55
56783: PUSH
56784: LD_INT 56
56786: PUSH
56787: LD_INT 57
56789: PUSH
56790: LD_INT 58
56792: PUSH
56793: LD_INT 59
56795: PUSH
56796: LD_INT 60
56798: PUSH
56799: LD_INT 61
56801: PUSH
56802: LD_INT 62
56804: PUSH
56805: LD_INT 80
56807: PUSH
56808: LD_INT 82
56810: PUSH
56811: LD_INT 83
56813: PUSH
56814: LD_INT 84
56816: PUSH
56817: LD_INT 85
56819: PUSH
56820: LD_INT 86
56822: PUSH
56823: LD_INT 90
56825: PUSH
56826: LD_INT 93
56828: PUSH
56829: EMPTY
56830: LIST
56831: LIST
56832: LIST
56833: LIST
56834: LIST
56835: LIST
56836: LIST
56837: LIST
56838: LIST
56839: LIST
56840: LIST
56841: LIST
56842: LIST
56843: LIST
56844: LIST
56845: LIST
56846: LIST
56847: LIST
56848: LIST
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: LIST
56855: LIST
56856: LIST
56857: LIST
56858: LIST
56859: LIST
56860: LIST
56861: LIST
56862: LIST
56863: LIST
56864: LIST
56865: LIST
56866: LIST
56867: LIST
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: LIST
56881: LIST
56882: LIST
56883: ST_TO_ADDR
56884: GO 57367
56886: LD_INT 2
56888: DOUBLE
56889: EQUAL
56890: IFTRUE 56894
56892: GO 57128
56894: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
56895: LD_ADDR_VAR 0 4
56899: PUSH
56900: LD_INT 35
56902: PUSH
56903: LD_INT 45
56905: PUSH
56906: LD_INT 46
56908: PUSH
56909: LD_INT 47
56911: PUSH
56912: LD_INT 82
56914: PUSH
56915: LD_INT 83
56917: PUSH
56918: LD_INT 84
56920: PUSH
56921: LD_INT 85
56923: PUSH
56924: LD_INT 87
56926: PUSH
56927: LD_INT 70
56929: PUSH
56930: LD_INT 1
56932: PUSH
56933: LD_INT 11
56935: PUSH
56936: LD_INT 3
56938: PUSH
56939: LD_INT 4
56941: PUSH
56942: LD_INT 5
56944: PUSH
56945: LD_INT 6
56947: PUSH
56948: LD_INT 15
56950: PUSH
56951: LD_INT 18
56953: PUSH
56954: LD_INT 7
56956: PUSH
56957: LD_INT 17
56959: PUSH
56960: LD_INT 8
56962: PUSH
56963: LD_INT 20
56965: PUSH
56966: LD_INT 21
56968: PUSH
56969: LD_INT 22
56971: PUSH
56972: LD_INT 72
56974: PUSH
56975: LD_INT 26
56977: PUSH
56978: LD_INT 69
56980: PUSH
56981: LD_INT 39
56983: PUSH
56984: LD_INT 40
56986: PUSH
56987: LD_INT 41
56989: PUSH
56990: LD_INT 42
56992: PUSH
56993: LD_INT 43
56995: PUSH
56996: LD_INT 48
56998: PUSH
56999: LD_INT 49
57001: PUSH
57002: LD_INT 50
57004: PUSH
57005: LD_INT 51
57007: PUSH
57008: LD_INT 52
57010: PUSH
57011: LD_INT 53
57013: PUSH
57014: LD_INT 54
57016: PUSH
57017: LD_INT 55
57019: PUSH
57020: LD_INT 56
57022: PUSH
57023: LD_INT 60
57025: PUSH
57026: LD_INT 61
57028: PUSH
57029: LD_INT 62
57031: PUSH
57032: LD_INT 66
57034: PUSH
57035: LD_INT 67
57037: PUSH
57038: LD_INT 68
57040: PUSH
57041: LD_INT 81
57043: PUSH
57044: LD_INT 82
57046: PUSH
57047: LD_INT 83
57049: PUSH
57050: LD_INT 84
57052: PUSH
57053: LD_INT 85
57055: PUSH
57056: LD_INT 87
57058: PUSH
57059: LD_INT 88
57061: PUSH
57062: LD_INT 92
57064: PUSH
57065: LD_INT 94
57067: PUSH
57068: EMPTY
57069: LIST
57070: LIST
57071: LIST
57072: LIST
57073: LIST
57074: LIST
57075: LIST
57076: LIST
57077: LIST
57078: LIST
57079: LIST
57080: LIST
57081: LIST
57082: LIST
57083: LIST
57084: LIST
57085: LIST
57086: LIST
57087: LIST
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: LIST
57093: LIST
57094: LIST
57095: LIST
57096: LIST
57097: LIST
57098: LIST
57099: LIST
57100: LIST
57101: LIST
57102: LIST
57103: LIST
57104: LIST
57105: LIST
57106: LIST
57107: LIST
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: ST_TO_ADDR
57126: GO 57367
57128: LD_INT 3
57130: DOUBLE
57131: EQUAL
57132: IFTRUE 57136
57134: GO 57366
57136: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
57137: LD_ADDR_VAR 0 4
57141: PUSH
57142: LD_INT 46
57144: PUSH
57145: LD_INT 47
57147: PUSH
57148: LD_INT 1
57150: PUSH
57151: LD_INT 2
57153: PUSH
57154: LD_INT 82
57156: PUSH
57157: LD_INT 83
57159: PUSH
57160: LD_INT 84
57162: PUSH
57163: LD_INT 85
57165: PUSH
57166: LD_INT 86
57168: PUSH
57169: LD_INT 11
57171: PUSH
57172: LD_INT 9
57174: PUSH
57175: LD_INT 20
57177: PUSH
57178: LD_INT 19
57180: PUSH
57181: LD_INT 21
57183: PUSH
57184: LD_INT 24
57186: PUSH
57187: LD_INT 22
57189: PUSH
57190: LD_INT 25
57192: PUSH
57193: LD_INT 28
57195: PUSH
57196: LD_INT 29
57198: PUSH
57199: LD_INT 30
57201: PUSH
57202: LD_INT 31
57204: PUSH
57205: LD_INT 37
57207: PUSH
57208: LD_INT 38
57210: PUSH
57211: LD_INT 32
57213: PUSH
57214: LD_INT 27
57216: PUSH
57217: LD_INT 33
57219: PUSH
57220: LD_INT 69
57222: PUSH
57223: LD_INT 39
57225: PUSH
57226: LD_INT 34
57228: PUSH
57229: LD_INT 40
57231: PUSH
57232: LD_INT 71
57234: PUSH
57235: LD_INT 23
57237: PUSH
57238: LD_INT 44
57240: PUSH
57241: LD_INT 48
57243: PUSH
57244: LD_INT 49
57246: PUSH
57247: LD_INT 50
57249: PUSH
57250: LD_INT 51
57252: PUSH
57253: LD_INT 52
57255: PUSH
57256: LD_INT 53
57258: PUSH
57259: LD_INT 54
57261: PUSH
57262: LD_INT 55
57264: PUSH
57265: LD_INT 56
57267: PUSH
57268: LD_INT 57
57270: PUSH
57271: LD_INT 58
57273: PUSH
57274: LD_INT 59
57276: PUSH
57277: LD_INT 63
57279: PUSH
57280: LD_INT 64
57282: PUSH
57283: LD_INT 65
57285: PUSH
57286: LD_INT 82
57288: PUSH
57289: LD_INT 83
57291: PUSH
57292: LD_INT 84
57294: PUSH
57295: LD_INT 85
57297: PUSH
57298: LD_INT 86
57300: PUSH
57301: LD_INT 89
57303: PUSH
57304: LD_INT 91
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: LIST
57317: LIST
57318: LIST
57319: LIST
57320: LIST
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: LIST
57329: LIST
57330: LIST
57331: LIST
57332: LIST
57333: LIST
57334: LIST
57335: LIST
57336: LIST
57337: LIST
57338: LIST
57339: LIST
57340: LIST
57341: LIST
57342: LIST
57343: LIST
57344: LIST
57345: LIST
57346: LIST
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: ST_TO_ADDR
57364: GO 57367
57366: POP
// if state > - 1 and state < 3 then
57367: LD_VAR 0 3
57371: PUSH
57372: LD_INT 1
57374: NEG
57375: GREATER
57376: IFFALSE 57388
57378: PUSH
57379: LD_VAR 0 3
57383: PUSH
57384: LD_INT 3
57386: LESS
57387: AND
57388: IFFALSE 57445
// for i in result do
57390: LD_ADDR_VAR 0 5
57394: PUSH
57395: LD_VAR 0 4
57399: PUSH
57400: FOR_IN
57401: IFFALSE 57443
// if GetTech ( i , side ) <> state then
57403: LD_VAR 0 5
57407: PPUSH
57408: LD_VAR 0 1
57412: PPUSH
57413: CALL_OW 321
57417: PUSH
57418: LD_VAR 0 3
57422: NONEQUAL
57423: IFFALSE 57441
// result := result diff i ;
57425: LD_ADDR_VAR 0 4
57429: PUSH
57430: LD_VAR 0 4
57434: PUSH
57435: LD_VAR 0 5
57439: DIFF
57440: ST_TO_ADDR
57441: GO 57400
57443: POP
57444: POP
// end ;
57445: LD_VAR 0 4
57449: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
57450: LD_INT 0
57452: PPUSH
57453: PPUSH
57454: PPUSH
// result := true ;
57455: LD_ADDR_VAR 0 3
57459: PUSH
57460: LD_INT 1
57462: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
57463: LD_ADDR_VAR 0 5
57467: PUSH
57468: LD_VAR 0 2
57472: PPUSH
57473: CALL_OW 480
57477: ST_TO_ADDR
// if not tmp then
57478: LD_VAR 0 5
57482: NOT
57483: IFFALSE 57487
// exit ;
57485: GO 57536
// for i in tmp do
57487: LD_ADDR_VAR 0 4
57491: PUSH
57492: LD_VAR 0 5
57496: PUSH
57497: FOR_IN
57498: IFFALSE 57534
// if GetTech ( i , side ) <> state_researched then
57500: LD_VAR 0 4
57504: PPUSH
57505: LD_VAR 0 1
57509: PPUSH
57510: CALL_OW 321
57514: PUSH
57515: LD_INT 2
57517: NONEQUAL
57518: IFFALSE 57532
// begin result := false ;
57520: LD_ADDR_VAR 0 3
57524: PUSH
57525: LD_INT 0
57527: ST_TO_ADDR
// exit ;
57528: POP
57529: POP
57530: GO 57536
// end ;
57532: GO 57497
57534: POP
57535: POP
// end ;
57536: LD_VAR 0 3
57540: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
57541: LD_INT 0
57543: PPUSH
57544: PPUSH
57545: PPUSH
57546: PPUSH
57547: PPUSH
57548: PPUSH
57549: PPUSH
57550: PPUSH
57551: PPUSH
57552: PPUSH
57553: PPUSH
57554: PPUSH
57555: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
57556: LD_VAR 0 1
57560: NOT
57561: IFTRUE 57578
57563: PUSH
57564: LD_VAR 0 1
57568: PPUSH
57569: CALL_OW 257
57573: PUSH
57574: LD_INT 9
57576: NONEQUAL
57577: OR
57578: IFFALSE 57582
// exit ;
57580: GO 58161
// side := GetSide ( unit ) ;
57582: LD_ADDR_VAR 0 9
57586: PUSH
57587: LD_VAR 0 1
57591: PPUSH
57592: CALL_OW 255
57596: ST_TO_ADDR
// tech_space := tech_spacanom ;
57597: LD_ADDR_VAR 0 12
57601: PUSH
57602: LD_INT 29
57604: ST_TO_ADDR
// tech_time := tech_taurad ;
57605: LD_ADDR_VAR 0 13
57609: PUSH
57610: LD_INT 28
57612: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
57613: LD_ADDR_VAR 0 11
57617: PUSH
57618: LD_VAR 0 1
57622: PPUSH
57623: CALL_OW 310
57627: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
57628: LD_VAR 0 11
57632: PPUSH
57633: CALL_OW 247
57637: PUSH
57638: LD_INT 2
57640: EQUAL
57641: IFFALSE 57645
// exit ;
57643: GO 58161
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
57645: LD_ADDR_VAR 0 8
57649: PUSH
57650: LD_INT 81
57652: PUSH
57653: LD_VAR 0 9
57657: PUSH
57658: EMPTY
57659: LIST
57660: LIST
57661: PUSH
57662: LD_INT 3
57664: PUSH
57665: LD_INT 21
57667: PUSH
57668: LD_INT 3
57670: PUSH
57671: EMPTY
57672: LIST
57673: LIST
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: PUSH
57679: EMPTY
57680: LIST
57681: LIST
57682: PPUSH
57683: CALL_OW 69
57687: ST_TO_ADDR
// if not tmp then
57688: LD_VAR 0 8
57692: NOT
57693: IFFALSE 57697
// exit ;
57695: GO 58161
// if in_unit then
57697: LD_VAR 0 11
57701: IFFALSE 57725
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
57703: LD_ADDR_VAR 0 10
57707: PUSH
57708: LD_VAR 0 8
57712: PPUSH
57713: LD_VAR 0 11
57717: PPUSH
57718: CALL_OW 74
57722: ST_TO_ADDR
57723: GO 57745
// enemy := NearestUnitToUnit ( tmp , unit ) ;
57725: LD_ADDR_VAR 0 10
57729: PUSH
57730: LD_VAR 0 8
57734: PPUSH
57735: LD_VAR 0 1
57739: PPUSH
57740: CALL_OW 74
57744: ST_TO_ADDR
// if not enemy then
57745: LD_VAR 0 10
57749: NOT
57750: IFFALSE 57754
// exit ;
57752: GO 58161
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
57754: LD_VAR 0 11
57758: IFFALSE 57780
57760: PUSH
57761: LD_VAR 0 11
57765: PPUSH
57766: LD_VAR 0 10
57770: PPUSH
57771: CALL_OW 296
57775: PUSH
57776: LD_INT 13
57778: GREATER
57779: AND
57780: IFTRUE 57802
57782: PUSH
57783: LD_VAR 0 1
57787: PPUSH
57788: LD_VAR 0 10
57792: PPUSH
57793: CALL_OW 296
57797: PUSH
57798: LD_INT 12
57800: GREATER
57801: OR
57802: IFFALSE 57806
// exit ;
57804: GO 58161
// missile := [ 1 ] ;
57806: LD_ADDR_VAR 0 14
57810: PUSH
57811: LD_INT 1
57813: PUSH
57814: EMPTY
57815: LIST
57816: ST_TO_ADDR
// if Researched ( side , tech_space ) then
57817: LD_VAR 0 9
57821: PPUSH
57822: LD_VAR 0 12
57826: PPUSH
57827: CALL_OW 325
57831: IFFALSE 57860
// missile := Replace ( missile , missile + 1 , 2 ) ;
57833: LD_ADDR_VAR 0 14
57837: PUSH
57838: LD_VAR 0 14
57842: PPUSH
57843: LD_VAR 0 14
57847: PUSH
57848: LD_INT 1
57850: PLUS
57851: PPUSH
57852: LD_INT 2
57854: PPUSH
57855: CALL_OW 1
57859: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
57860: LD_VAR 0 9
57864: PPUSH
57865: LD_VAR 0 13
57869: PPUSH
57870: CALL_OW 325
57874: IFFALSE 57898
57876: PUSH
57877: LD_VAR 0 10
57881: PPUSH
57882: CALL_OW 255
57886: PPUSH
57887: LD_VAR 0 13
57891: PPUSH
57892: CALL_OW 325
57896: NOT
57897: AND
57898: IFFALSE 57927
// missile := Replace ( missile , missile + 1 , 3 ) ;
57900: LD_ADDR_VAR 0 14
57904: PUSH
57905: LD_VAR 0 14
57909: PPUSH
57910: LD_VAR 0 14
57914: PUSH
57915: LD_INT 1
57917: PLUS
57918: PPUSH
57919: LD_INT 3
57921: PPUSH
57922: CALL_OW 1
57926: ST_TO_ADDR
// if missile < 2 then
57927: LD_VAR 0 14
57931: PUSH
57932: LD_INT 2
57934: LESS
57935: IFFALSE 57939
// exit ;
57937: GO 58161
// x := GetX ( enemy ) ;
57939: LD_ADDR_VAR 0 4
57943: PUSH
57944: LD_VAR 0 10
57948: PPUSH
57949: CALL_OW 250
57953: ST_TO_ADDR
// y := GetY ( enemy ) ;
57954: LD_ADDR_VAR 0 5
57958: PUSH
57959: LD_VAR 0 10
57963: PPUSH
57964: CALL_OW 251
57968: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
57969: LD_ADDR_VAR 0 6
57973: PUSH
57974: LD_VAR 0 4
57978: PUSH
57979: LD_INT 1
57981: NEG
57982: PPUSH
57983: LD_INT 1
57985: PPUSH
57986: CALL_OW 12
57990: PLUS
57991: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
57992: LD_ADDR_VAR 0 7
57996: PUSH
57997: LD_VAR 0 5
58001: PUSH
58002: LD_INT 1
58004: NEG
58005: PPUSH
58006: LD_INT 1
58008: PPUSH
58009: CALL_OW 12
58013: PLUS
58014: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58015: LD_VAR 0 6
58019: PPUSH
58020: LD_VAR 0 7
58024: PPUSH
58025: CALL_OW 488
58029: NOT
58030: IFFALSE 58052
// begin _x := x ;
58032: LD_ADDR_VAR 0 6
58036: PUSH
58037: LD_VAR 0 4
58041: ST_TO_ADDR
// _y := y ;
58042: LD_ADDR_VAR 0 7
58046: PUSH
58047: LD_VAR 0 5
58051: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
58052: LD_ADDR_VAR 0 3
58056: PUSH
58057: LD_INT 1
58059: PPUSH
58060: LD_VAR 0 14
58064: PPUSH
58065: CALL_OW 12
58069: ST_TO_ADDR
// case i of 1 :
58070: LD_VAR 0 3
58074: PUSH
58075: LD_INT 1
58077: DOUBLE
58078: EQUAL
58079: IFTRUE 58083
58081: GO 58100
58083: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
58084: LD_VAR 0 1
58088: PPUSH
58089: LD_VAR 0 10
58093: PPUSH
58094: CALL_OW 115
58098: GO 58161
58100: LD_INT 2
58102: DOUBLE
58103: EQUAL
58104: IFTRUE 58108
58106: GO 58130
58108: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
58109: LD_VAR 0 1
58113: PPUSH
58114: LD_VAR 0 6
58118: PPUSH
58119: LD_VAR 0 7
58123: PPUSH
58124: CALL_OW 153
58128: GO 58161
58130: LD_INT 3
58132: DOUBLE
58133: EQUAL
58134: IFTRUE 58138
58136: GO 58160
58138: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
58139: LD_VAR 0 1
58143: PPUSH
58144: LD_VAR 0 6
58148: PPUSH
58149: LD_VAR 0 7
58153: PPUSH
58154: CALL_OW 154
58158: GO 58161
58160: POP
// end ;
58161: LD_VAR 0 2
58165: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
58166: LD_INT 0
58168: PPUSH
58169: PPUSH
58170: PPUSH
58171: PPUSH
58172: PPUSH
58173: PPUSH
// if not unit or not building then
58174: LD_VAR 0 1
58178: NOT
58179: IFTRUE 58188
58181: PUSH
58182: LD_VAR 0 2
58186: NOT
58187: OR
58188: IFFALSE 58192
// exit ;
58190: GO 58350
// x := GetX ( building ) ;
58192: LD_ADDR_VAR 0 5
58196: PUSH
58197: LD_VAR 0 2
58201: PPUSH
58202: CALL_OW 250
58206: ST_TO_ADDR
// y := GetY ( building ) ;
58207: LD_ADDR_VAR 0 6
58211: PUSH
58212: LD_VAR 0 2
58216: PPUSH
58217: CALL_OW 251
58221: ST_TO_ADDR
// for i := 0 to 5 do
58222: LD_ADDR_VAR 0 4
58226: PUSH
58227: DOUBLE
58228: LD_INT 0
58230: DEC
58231: ST_TO_ADDR
58232: LD_INT 5
58234: PUSH
58235: FOR_TO
58236: IFFALSE 58348
// begin _x := ShiftX ( x , i , 3 ) ;
58238: LD_ADDR_VAR 0 7
58242: PUSH
58243: LD_VAR 0 5
58247: PPUSH
58248: LD_VAR 0 4
58252: PPUSH
58253: LD_INT 3
58255: PPUSH
58256: CALL_OW 272
58260: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
58261: LD_ADDR_VAR 0 8
58265: PUSH
58266: LD_VAR 0 6
58270: PPUSH
58271: LD_VAR 0 4
58275: PPUSH
58276: LD_INT 3
58278: PPUSH
58279: CALL_OW 273
58283: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58284: LD_VAR 0 7
58288: PPUSH
58289: LD_VAR 0 8
58293: PPUSH
58294: CALL_OW 488
58298: NOT
58299: IFFALSE 58303
// continue ;
58301: GO 58235
// if HexInfo ( _x , _y ) = 0 then
58303: LD_VAR 0 7
58307: PPUSH
58308: LD_VAR 0 8
58312: PPUSH
58313: CALL_OW 428
58317: PUSH
58318: LD_INT 0
58320: EQUAL
58321: IFFALSE 58346
// begin ComMoveXY ( unit , _x , _y ) ;
58323: LD_VAR 0 1
58327: PPUSH
58328: LD_VAR 0 7
58332: PPUSH
58333: LD_VAR 0 8
58337: PPUSH
58338: CALL_OW 111
// exit ;
58342: POP
58343: POP
58344: GO 58350
// end ; end ;
58346: GO 58235
58348: POP
58349: POP
// end ;
58350: LD_VAR 0 3
58354: RET
// export function ScanBase ( side , base_area ) ; begin
58355: LD_INT 0
58357: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
58358: LD_ADDR_VAR 0 3
58362: PUSH
58363: LD_VAR 0 2
58367: PPUSH
58368: LD_INT 81
58370: PUSH
58371: LD_VAR 0 1
58375: PUSH
58376: EMPTY
58377: LIST
58378: LIST
58379: PPUSH
58380: CALL_OW 70
58384: ST_TO_ADDR
// end ;
58385: LD_VAR 0 3
58389: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
58390: LD_INT 0
58392: PPUSH
58393: PPUSH
58394: PPUSH
58395: PPUSH
// result := false ;
58396: LD_ADDR_VAR 0 2
58400: PUSH
58401: LD_INT 0
58403: ST_TO_ADDR
// side := GetSide ( unit ) ;
58404: LD_ADDR_VAR 0 3
58408: PUSH
58409: LD_VAR 0 1
58413: PPUSH
58414: CALL_OW 255
58418: ST_TO_ADDR
// nat := GetNation ( unit ) ;
58419: LD_ADDR_VAR 0 4
58423: PUSH
58424: LD_VAR 0 1
58428: PPUSH
58429: CALL_OW 248
58433: ST_TO_ADDR
// case nat of 1 :
58434: LD_VAR 0 4
58438: PUSH
58439: LD_INT 1
58441: DOUBLE
58442: EQUAL
58443: IFTRUE 58447
58445: GO 58458
58447: POP
// tech := tech_lassight ; 2 :
58448: LD_ADDR_VAR 0 5
58452: PUSH
58453: LD_INT 12
58455: ST_TO_ADDR
58456: GO 58497
58458: LD_INT 2
58460: DOUBLE
58461: EQUAL
58462: IFTRUE 58466
58464: GO 58477
58466: POP
// tech := tech_mortar ; 3 :
58467: LD_ADDR_VAR 0 5
58471: PUSH
58472: LD_INT 41
58474: ST_TO_ADDR
58475: GO 58497
58477: LD_INT 3
58479: DOUBLE
58480: EQUAL
58481: IFTRUE 58485
58483: GO 58496
58485: POP
// tech := tech_bazooka ; end ;
58486: LD_ADDR_VAR 0 5
58490: PUSH
58491: LD_INT 44
58493: ST_TO_ADDR
58494: GO 58497
58496: POP
// if Researched ( side , tech ) then
58497: LD_VAR 0 3
58501: PPUSH
58502: LD_VAR 0 5
58506: PPUSH
58507: CALL_OW 325
58511: IFFALSE 58538
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
58513: LD_ADDR_VAR 0 2
58517: PUSH
58518: LD_INT 5
58520: PUSH
58521: LD_INT 8
58523: PUSH
58524: LD_INT 9
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: LIST
58531: PUSH
58532: LD_VAR 0 4
58536: ARRAY
58537: ST_TO_ADDR
// end ;
58538: LD_VAR 0 2
58542: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
58543: LD_INT 0
58545: PPUSH
58546: PPUSH
58547: PPUSH
// if not mines then
58548: LD_VAR 0 2
58552: NOT
58553: IFFALSE 58557
// exit ;
58555: GO 58701
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
58557: LD_ADDR_VAR 0 5
58561: PUSH
58562: LD_INT 81
58564: PUSH
58565: LD_VAR 0 1
58569: PUSH
58570: EMPTY
58571: LIST
58572: LIST
58573: PUSH
58574: LD_INT 3
58576: PUSH
58577: LD_INT 21
58579: PUSH
58580: LD_INT 3
58582: PUSH
58583: EMPTY
58584: LIST
58585: LIST
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: EMPTY
58592: LIST
58593: LIST
58594: PPUSH
58595: CALL_OW 69
58599: ST_TO_ADDR
// for i in mines do
58600: LD_ADDR_VAR 0 4
58604: PUSH
58605: LD_VAR 0 2
58609: PUSH
58610: FOR_IN
58611: IFFALSE 58699
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
58613: LD_VAR 0 4
58617: PUSH
58618: LD_INT 1
58620: ARRAY
58621: PPUSH
58622: LD_VAR 0 4
58626: PUSH
58627: LD_INT 2
58629: ARRAY
58630: PPUSH
58631: CALL_OW 458
58635: NOT
58636: IFFALSE 58640
// continue ;
58638: GO 58610
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
58640: LD_VAR 0 4
58644: PUSH
58645: LD_INT 1
58647: ARRAY
58648: PPUSH
58649: LD_VAR 0 4
58653: PUSH
58654: LD_INT 2
58656: ARRAY
58657: PPUSH
58658: CALL_OW 428
58662: PUSH
58663: LD_VAR 0 5
58667: IN
58668: IFFALSE 58697
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
58670: LD_VAR 0 4
58674: PUSH
58675: LD_INT 1
58677: ARRAY
58678: PPUSH
58679: LD_VAR 0 4
58683: PUSH
58684: LD_INT 2
58686: ARRAY
58687: PPUSH
58688: LD_VAR 0 1
58692: PPUSH
58693: CALL_OW 456
// end ;
58697: GO 58610
58699: POP
58700: POP
// end ;
58701: LD_VAR 0 3
58705: RET
// export function Count ( array ) ; begin
58706: LD_INT 0
58708: PPUSH
// result := array + 0 ;
58709: LD_ADDR_VAR 0 2
58713: PUSH
58714: LD_VAR 0 1
58718: PUSH
58719: LD_INT 0
58721: PLUS
58722: ST_TO_ADDR
// end ;
58723: LD_VAR 0 2
58727: RET
// export function IsEmpty ( building ) ; begin
58728: LD_INT 0
58730: PPUSH
// if not building then
58731: LD_VAR 0 1
58735: NOT
58736: IFFALSE 58740
// exit ;
58738: GO 58783
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
58740: LD_ADDR_VAR 0 2
58744: PUSH
58745: LD_VAR 0 1
58749: PUSH
58750: LD_INT 22
58752: PUSH
58753: LD_VAR 0 1
58757: PPUSH
58758: CALL_OW 255
58762: PUSH
58763: EMPTY
58764: LIST
58765: LIST
58766: PUSH
58767: LD_INT 58
58769: PUSH
58770: EMPTY
58771: LIST
58772: PUSH
58773: EMPTY
58774: LIST
58775: LIST
58776: PPUSH
58777: CALL_OW 69
58781: IN
58782: ST_TO_ADDR
// end ;
58783: LD_VAR 0 2
58787: RET
// export function IsNotFull ( building ) ; var places ; begin
58788: LD_INT 0
58790: PPUSH
58791: PPUSH
// if not building then
58792: LD_VAR 0 1
58796: NOT
58797: IFFALSE 58801
// exit ;
58799: GO 58829
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
58801: LD_ADDR_VAR 0 2
58805: PUSH
58806: LD_VAR 0 1
58810: PPUSH
58811: LD_INT 3
58813: PUSH
58814: LD_INT 62
58816: PUSH
58817: EMPTY
58818: LIST
58819: PUSH
58820: EMPTY
58821: LIST
58822: LIST
58823: PPUSH
58824: CALL_OW 72
58828: ST_TO_ADDR
// end ;
58829: LD_VAR 0 2
58833: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
58834: LD_INT 0
58836: PPUSH
58837: PPUSH
58838: PPUSH
58839: PPUSH
// tmp := [ ] ;
58840: LD_ADDR_VAR 0 3
58844: PUSH
58845: EMPTY
58846: ST_TO_ADDR
// list := [ ] ;
58847: LD_ADDR_VAR 0 5
58851: PUSH
58852: EMPTY
58853: ST_TO_ADDR
// for i = 16 to 25 do
58854: LD_ADDR_VAR 0 4
58858: PUSH
58859: DOUBLE
58860: LD_INT 16
58862: DEC
58863: ST_TO_ADDR
58864: LD_INT 25
58866: PUSH
58867: FOR_TO
58868: IFFALSE 58941
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
58870: LD_ADDR_VAR 0 3
58874: PUSH
58875: LD_VAR 0 3
58879: PUSH
58880: LD_INT 22
58882: PUSH
58883: LD_VAR 0 1
58887: PPUSH
58888: CALL_OW 255
58892: PUSH
58893: EMPTY
58894: LIST
58895: LIST
58896: PUSH
58897: LD_INT 91
58899: PUSH
58900: LD_VAR 0 1
58904: PUSH
58905: LD_INT 6
58907: PUSH
58908: EMPTY
58909: LIST
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 30
58915: PUSH
58916: LD_VAR 0 4
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: PUSH
58930: EMPTY
58931: LIST
58932: PPUSH
58933: CALL_OW 69
58937: ADD
58938: ST_TO_ADDR
58939: GO 58867
58941: POP
58942: POP
// for i = 1 to tmp do
58943: LD_ADDR_VAR 0 4
58947: PUSH
58948: DOUBLE
58949: LD_INT 1
58951: DEC
58952: ST_TO_ADDR
58953: LD_VAR 0 3
58957: PUSH
58958: FOR_TO
58959: IFFALSE 59047
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
58961: LD_ADDR_VAR 0 5
58965: PUSH
58966: LD_VAR 0 5
58970: PUSH
58971: LD_VAR 0 3
58975: PUSH
58976: LD_VAR 0 4
58980: ARRAY
58981: PPUSH
58982: CALL_OW 266
58986: PUSH
58987: LD_VAR 0 3
58991: PUSH
58992: LD_VAR 0 4
58996: ARRAY
58997: PPUSH
58998: CALL_OW 250
59002: PUSH
59003: LD_VAR 0 3
59007: PUSH
59008: LD_VAR 0 4
59012: ARRAY
59013: PPUSH
59014: CALL_OW 251
59018: PUSH
59019: LD_VAR 0 3
59023: PUSH
59024: LD_VAR 0 4
59028: ARRAY
59029: PPUSH
59030: CALL_OW 254
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: PUSH
59041: EMPTY
59042: LIST
59043: ADD
59044: ST_TO_ADDR
59045: GO 58958
59047: POP
59048: POP
// result := list ;
59049: LD_ADDR_VAR 0 2
59053: PUSH
59054: LD_VAR 0 5
59058: ST_TO_ADDR
// end ;
59059: LD_VAR 0 2
59063: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
59064: LD_INT 0
59066: PPUSH
59067: PPUSH
59068: PPUSH
59069: PPUSH
59070: PPUSH
59071: PPUSH
59072: PPUSH
// if not factory then
59073: LD_VAR 0 1
59077: NOT
59078: IFFALSE 59082
// exit ;
59080: GO 59685
// if control = control_apeman then
59082: LD_VAR 0 4
59086: PUSH
59087: LD_INT 5
59089: EQUAL
59090: IFFALSE 59199
// begin tmp := UnitsInside ( factory ) ;
59092: LD_ADDR_VAR 0 8
59096: PUSH
59097: LD_VAR 0 1
59101: PPUSH
59102: CALL_OW 313
59106: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
59107: LD_VAR 0 8
59111: PPUSH
59112: LD_INT 25
59114: PUSH
59115: LD_INT 12
59117: PUSH
59118: EMPTY
59119: LIST
59120: LIST
59121: PPUSH
59122: CALL_OW 72
59126: NOT
59127: IFFALSE 59137
// control := control_manual ;
59129: LD_ADDR_VAR 0 4
59133: PUSH
59134: LD_INT 1
59136: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
59137: LD_ADDR_VAR 0 8
59141: PUSH
59142: LD_VAR 0 1
59146: PPUSH
59147: CALL 58834 0 1
59151: ST_TO_ADDR
// if tmp then
59152: LD_VAR 0 8
59156: IFFALSE 59199
// begin for i in tmp do
59158: LD_ADDR_VAR 0 7
59162: PUSH
59163: LD_VAR 0 8
59167: PUSH
59168: FOR_IN
59169: IFFALSE 59197
// if i [ 1 ] = b_ext_radio then
59171: LD_VAR 0 7
59175: PUSH
59176: LD_INT 1
59178: ARRAY
59179: PUSH
59180: LD_INT 22
59182: EQUAL
59183: IFFALSE 59195
// begin control := control_remote ;
59185: LD_ADDR_VAR 0 4
59189: PUSH
59190: LD_INT 2
59192: ST_TO_ADDR
// break ;
59193: GO 59197
// end ;
59195: GO 59168
59197: POP
59198: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
59199: LD_VAR 0 1
59203: PPUSH
59204: LD_VAR 0 2
59208: PPUSH
59209: LD_VAR 0 3
59213: PPUSH
59214: LD_VAR 0 4
59218: PPUSH
59219: LD_VAR 0 5
59223: PPUSH
59224: CALL_OW 448
59228: IFFALSE 59263
// begin result := [ chassis , engine , control , weapon ] ;
59230: LD_ADDR_VAR 0 6
59234: PUSH
59235: LD_VAR 0 2
59239: PUSH
59240: LD_VAR 0 3
59244: PUSH
59245: LD_VAR 0 4
59249: PUSH
59250: LD_VAR 0 5
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: LIST
59259: LIST
59260: ST_TO_ADDR
// exit ;
59261: GO 59685
// end ; _chassis := AvailableChassisList ( factory ) ;
59263: LD_ADDR_VAR 0 9
59267: PUSH
59268: LD_VAR 0 1
59272: PPUSH
59273: CALL_OW 475
59277: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
59278: LD_ADDR_VAR 0 11
59282: PUSH
59283: LD_VAR 0 1
59287: PPUSH
59288: CALL_OW 476
59292: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
59293: LD_ADDR_VAR 0 12
59297: PUSH
59298: LD_VAR 0 1
59302: PPUSH
59303: CALL_OW 477
59307: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
59308: LD_ADDR_VAR 0 10
59312: PUSH
59313: LD_VAR 0 1
59317: PPUSH
59318: CALL_OW 478
59322: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
59323: LD_VAR 0 9
59327: NOT
59328: IFTRUE 59337
59330: PUSH
59331: LD_VAR 0 11
59335: NOT
59336: OR
59337: IFTRUE 59346
59339: PUSH
59340: LD_VAR 0 12
59344: NOT
59345: OR
59346: IFTRUE 59355
59348: PUSH
59349: LD_VAR 0 10
59353: NOT
59354: OR
59355: IFFALSE 59390
// begin result := [ chassis , engine , control , weapon ] ;
59357: LD_ADDR_VAR 0 6
59361: PUSH
59362: LD_VAR 0 2
59366: PUSH
59367: LD_VAR 0 3
59371: PUSH
59372: LD_VAR 0 4
59376: PUSH
59377: LD_VAR 0 5
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: LIST
59387: ST_TO_ADDR
// exit ;
59388: GO 59685
// end ; if not chassis in _chassis then
59390: LD_VAR 0 2
59394: PUSH
59395: LD_VAR 0 9
59399: IN
59400: NOT
59401: IFFALSE 59427
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
59403: LD_ADDR_VAR 0 2
59407: PUSH
59408: LD_VAR 0 9
59412: PUSH
59413: LD_INT 1
59415: PPUSH
59416: LD_VAR 0 9
59420: PPUSH
59421: CALL_OW 12
59425: ARRAY
59426: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
59427: LD_VAR 0 2
59431: PPUSH
59432: LD_VAR 0 3
59436: PPUSH
59437: CALL 59690 0 2
59441: NOT
59442: IFFALSE 59503
// repeat engine := _engine [ 1 ] ;
59444: LD_ADDR_VAR 0 3
59448: PUSH
59449: LD_VAR 0 11
59453: PUSH
59454: LD_INT 1
59456: ARRAY
59457: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
59458: LD_ADDR_VAR 0 11
59462: PUSH
59463: LD_VAR 0 11
59467: PPUSH
59468: LD_INT 1
59470: PPUSH
59471: CALL_OW 3
59475: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
59476: LD_VAR 0 2
59480: PPUSH
59481: LD_VAR 0 3
59485: PPUSH
59486: CALL 59690 0 2
59490: IFTRUE 59501
59492: PUSH
59493: LD_VAR 0 11
59497: PUSH
59498: EMPTY
59499: EQUAL
59500: OR
59501: IFFALSE 59444
// if not control in _control then
59503: LD_VAR 0 4
59507: PUSH
59508: LD_VAR 0 12
59512: IN
59513: NOT
59514: IFFALSE 59540
// control := _control [ rand ( 1 , _control ) ] ;
59516: LD_ADDR_VAR 0 4
59520: PUSH
59521: LD_VAR 0 12
59525: PUSH
59526: LD_INT 1
59528: PPUSH
59529: LD_VAR 0 12
59533: PPUSH
59534: CALL_OW 12
59538: ARRAY
59539: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
59540: LD_VAR 0 2
59544: PPUSH
59545: LD_VAR 0 5
59549: PPUSH
59550: CALL 59912 0 2
59554: NOT
59555: IFFALSE 59616
// repeat weapon := _weapon [ 1 ] ;
59557: LD_ADDR_VAR 0 5
59561: PUSH
59562: LD_VAR 0 10
59566: PUSH
59567: LD_INT 1
59569: ARRAY
59570: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
59571: LD_ADDR_VAR 0 10
59575: PUSH
59576: LD_VAR 0 10
59580: PPUSH
59581: LD_INT 1
59583: PPUSH
59584: CALL_OW 3
59588: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
59589: LD_VAR 0 2
59593: PPUSH
59594: LD_VAR 0 5
59598: PPUSH
59599: CALL 59912 0 2
59603: IFTRUE 59614
59605: PUSH
59606: LD_VAR 0 10
59610: PUSH
59611: EMPTY
59612: EQUAL
59613: OR
59614: IFFALSE 59557
// result := [ ] ;
59616: LD_ADDR_VAR 0 6
59620: PUSH
59621: EMPTY
59622: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
59623: LD_VAR 0 1
59627: PPUSH
59628: LD_VAR 0 2
59632: PPUSH
59633: LD_VAR 0 3
59637: PPUSH
59638: LD_VAR 0 4
59642: PPUSH
59643: LD_VAR 0 5
59647: PPUSH
59648: CALL_OW 448
59652: IFFALSE 59685
// result := [ chassis , engine , control , weapon ] ;
59654: LD_ADDR_VAR 0 6
59658: PUSH
59659: LD_VAR 0 2
59663: PUSH
59664: LD_VAR 0 3
59668: PUSH
59669: LD_VAR 0 4
59673: PUSH
59674: LD_VAR 0 5
59678: PUSH
59679: EMPTY
59680: LIST
59681: LIST
59682: LIST
59683: LIST
59684: ST_TO_ADDR
// end ;
59685: LD_VAR 0 6
59689: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
59690: LD_INT 0
59692: PPUSH
// if not chassis or not engine then
59693: LD_VAR 0 1
59697: NOT
59698: IFTRUE 59707
59700: PUSH
59701: LD_VAR 0 2
59705: NOT
59706: OR
59707: IFFALSE 59711
// exit ;
59709: GO 59907
// case engine of engine_solar :
59711: LD_VAR 0 2
59715: PUSH
59716: LD_INT 2
59718: DOUBLE
59719: EQUAL
59720: IFTRUE 59724
59722: GO 59762
59724: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
59725: LD_ADDR_VAR 0 3
59729: PUSH
59730: LD_INT 11
59732: PUSH
59733: LD_INT 12
59735: PUSH
59736: LD_INT 13
59738: PUSH
59739: LD_INT 14
59741: PUSH
59742: LD_INT 1
59744: PUSH
59745: LD_INT 2
59747: PUSH
59748: LD_INT 3
59750: PUSH
59751: EMPTY
59752: LIST
59753: LIST
59754: LIST
59755: LIST
59756: LIST
59757: LIST
59758: LIST
59759: ST_TO_ADDR
59760: GO 59891
59762: LD_INT 1
59764: DOUBLE
59765: EQUAL
59766: IFTRUE 59770
59768: GO 59832
59770: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
59771: LD_ADDR_VAR 0 3
59775: PUSH
59776: LD_INT 11
59778: PUSH
59779: LD_INT 12
59781: PUSH
59782: LD_INT 13
59784: PUSH
59785: LD_INT 14
59787: PUSH
59788: LD_INT 1
59790: PUSH
59791: LD_INT 2
59793: PUSH
59794: LD_INT 3
59796: PUSH
59797: LD_INT 4
59799: PUSH
59800: LD_INT 5
59802: PUSH
59803: LD_INT 21
59805: PUSH
59806: LD_INT 23
59808: PUSH
59809: LD_INT 22
59811: PUSH
59812: LD_INT 24
59814: PUSH
59815: EMPTY
59816: LIST
59817: LIST
59818: LIST
59819: LIST
59820: LIST
59821: LIST
59822: LIST
59823: LIST
59824: LIST
59825: LIST
59826: LIST
59827: LIST
59828: LIST
59829: ST_TO_ADDR
59830: GO 59891
59832: LD_INT 3
59834: DOUBLE
59835: EQUAL
59836: IFTRUE 59840
59838: GO 59890
59840: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
59841: LD_ADDR_VAR 0 3
59845: PUSH
59846: LD_INT 13
59848: PUSH
59849: LD_INT 14
59851: PUSH
59852: LD_INT 2
59854: PUSH
59855: LD_INT 3
59857: PUSH
59858: LD_INT 4
59860: PUSH
59861: LD_INT 5
59863: PUSH
59864: LD_INT 21
59866: PUSH
59867: LD_INT 22
59869: PUSH
59870: LD_INT 23
59872: PUSH
59873: LD_INT 24
59875: PUSH
59876: EMPTY
59877: LIST
59878: LIST
59879: LIST
59880: LIST
59881: LIST
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: ST_TO_ADDR
59888: GO 59891
59890: POP
// result := ( chassis in result ) ;
59891: LD_ADDR_VAR 0 3
59895: PUSH
59896: LD_VAR 0 1
59900: PUSH
59901: LD_VAR 0 3
59905: IN
59906: ST_TO_ADDR
// end ;
59907: LD_VAR 0 3
59911: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
59912: LD_INT 0
59914: PPUSH
// if not chassis or not weapon then
59915: LD_VAR 0 1
59919: NOT
59920: IFTRUE 59929
59922: PUSH
59923: LD_VAR 0 2
59927: NOT
59928: OR
59929: IFFALSE 59933
// exit ;
59931: GO 60993
// case weapon of us_machine_gun :
59933: LD_VAR 0 2
59937: PUSH
59938: LD_INT 2
59940: DOUBLE
59941: EQUAL
59942: IFTRUE 59946
59944: GO 59976
59946: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
59947: LD_ADDR_VAR 0 3
59951: PUSH
59952: LD_INT 1
59954: PUSH
59955: LD_INT 2
59957: PUSH
59958: LD_INT 3
59960: PUSH
59961: LD_INT 4
59963: PUSH
59964: LD_INT 5
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: LIST
59971: LIST
59972: LIST
59973: ST_TO_ADDR
59974: GO 60977
59976: LD_INT 3
59978: DOUBLE
59979: EQUAL
59980: IFTRUE 59984
59982: GO 60014
59984: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
59985: LD_ADDR_VAR 0 3
59989: PUSH
59990: LD_INT 1
59992: PUSH
59993: LD_INT 2
59995: PUSH
59996: LD_INT 3
59998: PUSH
59999: LD_INT 4
60001: PUSH
60002: LD_INT 5
60004: PUSH
60005: EMPTY
60006: LIST
60007: LIST
60008: LIST
60009: LIST
60010: LIST
60011: ST_TO_ADDR
60012: GO 60977
60014: LD_INT 11
60016: DOUBLE
60017: EQUAL
60018: IFTRUE 60022
60020: GO 60052
60022: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
60023: LD_ADDR_VAR 0 3
60027: PUSH
60028: LD_INT 1
60030: PUSH
60031: LD_INT 2
60033: PUSH
60034: LD_INT 3
60036: PUSH
60037: LD_INT 4
60039: PUSH
60040: LD_INT 5
60042: PUSH
60043: EMPTY
60044: LIST
60045: LIST
60046: LIST
60047: LIST
60048: LIST
60049: ST_TO_ADDR
60050: GO 60977
60052: LD_INT 4
60054: DOUBLE
60055: EQUAL
60056: IFTRUE 60060
60058: GO 60086
60060: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
60061: LD_ADDR_VAR 0 3
60065: PUSH
60066: LD_INT 2
60068: PUSH
60069: LD_INT 3
60071: PUSH
60072: LD_INT 4
60074: PUSH
60075: LD_INT 5
60077: PUSH
60078: EMPTY
60079: LIST
60080: LIST
60081: LIST
60082: LIST
60083: ST_TO_ADDR
60084: GO 60977
60086: LD_INT 5
60088: DOUBLE
60089: EQUAL
60090: IFTRUE 60094
60092: GO 60120
60094: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
60095: LD_ADDR_VAR 0 3
60099: PUSH
60100: LD_INT 2
60102: PUSH
60103: LD_INT 3
60105: PUSH
60106: LD_INT 4
60108: PUSH
60109: LD_INT 5
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: LIST
60116: LIST
60117: ST_TO_ADDR
60118: GO 60977
60120: LD_INT 9
60122: DOUBLE
60123: EQUAL
60124: IFTRUE 60128
60126: GO 60154
60128: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
60129: LD_ADDR_VAR 0 3
60133: PUSH
60134: LD_INT 2
60136: PUSH
60137: LD_INT 3
60139: PUSH
60140: LD_INT 4
60142: PUSH
60143: LD_INT 5
60145: PUSH
60146: EMPTY
60147: LIST
60148: LIST
60149: LIST
60150: LIST
60151: ST_TO_ADDR
60152: GO 60977
60154: LD_INT 7
60156: DOUBLE
60157: EQUAL
60158: IFTRUE 60162
60160: GO 60188
60162: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
60163: LD_ADDR_VAR 0 3
60167: PUSH
60168: LD_INT 2
60170: PUSH
60171: LD_INT 3
60173: PUSH
60174: LD_INT 4
60176: PUSH
60177: LD_INT 5
60179: PUSH
60180: EMPTY
60181: LIST
60182: LIST
60183: LIST
60184: LIST
60185: ST_TO_ADDR
60186: GO 60977
60188: LD_INT 12
60190: DOUBLE
60191: EQUAL
60192: IFTRUE 60196
60194: GO 60222
60196: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
60197: LD_ADDR_VAR 0 3
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: LD_INT 3
60207: PUSH
60208: LD_INT 4
60210: PUSH
60211: LD_INT 5
60213: PUSH
60214: EMPTY
60215: LIST
60216: LIST
60217: LIST
60218: LIST
60219: ST_TO_ADDR
60220: GO 60977
60222: LD_INT 13
60224: DOUBLE
60225: EQUAL
60226: IFTRUE 60230
60228: GO 60256
60230: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
60231: LD_ADDR_VAR 0 3
60235: PUSH
60236: LD_INT 2
60238: PUSH
60239: LD_INT 3
60241: PUSH
60242: LD_INT 4
60244: PUSH
60245: LD_INT 5
60247: PUSH
60248: EMPTY
60249: LIST
60250: LIST
60251: LIST
60252: LIST
60253: ST_TO_ADDR
60254: GO 60977
60256: LD_INT 14
60258: DOUBLE
60259: EQUAL
60260: IFTRUE 60264
60262: GO 60282
60264: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
60265: LD_ADDR_VAR 0 3
60269: PUSH
60270: LD_INT 4
60272: PUSH
60273: LD_INT 5
60275: PUSH
60276: EMPTY
60277: LIST
60278: LIST
60279: ST_TO_ADDR
60280: GO 60977
60282: LD_INT 6
60284: DOUBLE
60285: EQUAL
60286: IFTRUE 60290
60288: GO 60308
60290: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
60291: LD_ADDR_VAR 0 3
60295: PUSH
60296: LD_INT 4
60298: PUSH
60299: LD_INT 5
60301: PUSH
60302: EMPTY
60303: LIST
60304: LIST
60305: ST_TO_ADDR
60306: GO 60977
60308: LD_INT 10
60310: DOUBLE
60311: EQUAL
60312: IFTRUE 60316
60314: GO 60334
60316: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
60317: LD_ADDR_VAR 0 3
60321: PUSH
60322: LD_INT 4
60324: PUSH
60325: LD_INT 5
60327: PUSH
60328: EMPTY
60329: LIST
60330: LIST
60331: ST_TO_ADDR
60332: GO 60977
60334: LD_INT 22
60336: DOUBLE
60337: EQUAL
60338: IFTRUE 60342
60340: GO 60368
60342: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
60343: LD_ADDR_VAR 0 3
60347: PUSH
60348: LD_INT 11
60350: PUSH
60351: LD_INT 12
60353: PUSH
60354: LD_INT 13
60356: PUSH
60357: LD_INT 14
60359: PUSH
60360: EMPTY
60361: LIST
60362: LIST
60363: LIST
60364: LIST
60365: ST_TO_ADDR
60366: GO 60977
60368: LD_INT 23
60370: DOUBLE
60371: EQUAL
60372: IFTRUE 60376
60374: GO 60402
60376: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
60377: LD_ADDR_VAR 0 3
60381: PUSH
60382: LD_INT 11
60384: PUSH
60385: LD_INT 12
60387: PUSH
60388: LD_INT 13
60390: PUSH
60391: LD_INT 14
60393: PUSH
60394: EMPTY
60395: LIST
60396: LIST
60397: LIST
60398: LIST
60399: ST_TO_ADDR
60400: GO 60977
60402: LD_INT 24
60404: DOUBLE
60405: EQUAL
60406: IFTRUE 60410
60408: GO 60436
60410: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
60411: LD_ADDR_VAR 0 3
60415: PUSH
60416: LD_INT 11
60418: PUSH
60419: LD_INT 12
60421: PUSH
60422: LD_INT 13
60424: PUSH
60425: LD_INT 14
60427: PUSH
60428: EMPTY
60429: LIST
60430: LIST
60431: LIST
60432: LIST
60433: ST_TO_ADDR
60434: GO 60977
60436: LD_INT 30
60438: DOUBLE
60439: EQUAL
60440: IFTRUE 60444
60442: GO 60470
60444: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
60445: LD_ADDR_VAR 0 3
60449: PUSH
60450: LD_INT 11
60452: PUSH
60453: LD_INT 12
60455: PUSH
60456: LD_INT 13
60458: PUSH
60459: LD_INT 14
60461: PUSH
60462: EMPTY
60463: LIST
60464: LIST
60465: LIST
60466: LIST
60467: ST_TO_ADDR
60468: GO 60977
60470: LD_INT 25
60472: DOUBLE
60473: EQUAL
60474: IFTRUE 60478
60476: GO 60496
60478: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
60479: LD_ADDR_VAR 0 3
60483: PUSH
60484: LD_INT 13
60486: PUSH
60487: LD_INT 14
60489: PUSH
60490: EMPTY
60491: LIST
60492: LIST
60493: ST_TO_ADDR
60494: GO 60977
60496: LD_INT 27
60498: DOUBLE
60499: EQUAL
60500: IFTRUE 60504
60502: GO 60522
60504: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
60505: LD_ADDR_VAR 0 3
60509: PUSH
60510: LD_INT 13
60512: PUSH
60513: LD_INT 14
60515: PUSH
60516: EMPTY
60517: LIST
60518: LIST
60519: ST_TO_ADDR
60520: GO 60977
60522: LD_INT 92
60524: DOUBLE
60525: EQUAL
60526: IFTRUE 60530
60528: GO 60556
60530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
60531: LD_ADDR_VAR 0 3
60535: PUSH
60536: LD_INT 11
60538: PUSH
60539: LD_INT 12
60541: PUSH
60542: LD_INT 13
60544: PUSH
60545: LD_INT 14
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: LIST
60552: LIST
60553: ST_TO_ADDR
60554: GO 60977
60556: LD_INT 28
60558: DOUBLE
60559: EQUAL
60560: IFTRUE 60564
60562: GO 60582
60564: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
60565: LD_ADDR_VAR 0 3
60569: PUSH
60570: LD_INT 13
60572: PUSH
60573: LD_INT 14
60575: PUSH
60576: EMPTY
60577: LIST
60578: LIST
60579: ST_TO_ADDR
60580: GO 60977
60582: LD_INT 29
60584: DOUBLE
60585: EQUAL
60586: IFTRUE 60590
60588: GO 60608
60590: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
60591: LD_ADDR_VAR 0 3
60595: PUSH
60596: LD_INT 13
60598: PUSH
60599: LD_INT 14
60601: PUSH
60602: EMPTY
60603: LIST
60604: LIST
60605: ST_TO_ADDR
60606: GO 60977
60608: LD_INT 31
60610: DOUBLE
60611: EQUAL
60612: IFTRUE 60616
60614: GO 60634
60616: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
60617: LD_ADDR_VAR 0 3
60621: PUSH
60622: LD_INT 13
60624: PUSH
60625: LD_INT 14
60627: PUSH
60628: EMPTY
60629: LIST
60630: LIST
60631: ST_TO_ADDR
60632: GO 60977
60634: LD_INT 26
60636: DOUBLE
60637: EQUAL
60638: IFTRUE 60642
60640: GO 60660
60642: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
60643: LD_ADDR_VAR 0 3
60647: PUSH
60648: LD_INT 13
60650: PUSH
60651: LD_INT 14
60653: PUSH
60654: EMPTY
60655: LIST
60656: LIST
60657: ST_TO_ADDR
60658: GO 60977
60660: LD_INT 42
60662: DOUBLE
60663: EQUAL
60664: IFTRUE 60668
60666: GO 60694
60668: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
60669: LD_ADDR_VAR 0 3
60673: PUSH
60674: LD_INT 21
60676: PUSH
60677: LD_INT 22
60679: PUSH
60680: LD_INT 23
60682: PUSH
60683: LD_INT 24
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: ST_TO_ADDR
60692: GO 60977
60694: LD_INT 43
60696: DOUBLE
60697: EQUAL
60698: IFTRUE 60702
60700: GO 60728
60702: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
60703: LD_ADDR_VAR 0 3
60707: PUSH
60708: LD_INT 21
60710: PUSH
60711: LD_INT 22
60713: PUSH
60714: LD_INT 23
60716: PUSH
60717: LD_INT 24
60719: PUSH
60720: EMPTY
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: ST_TO_ADDR
60726: GO 60977
60728: LD_INT 44
60730: DOUBLE
60731: EQUAL
60732: IFTRUE 60736
60734: GO 60762
60736: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
60737: LD_ADDR_VAR 0 3
60741: PUSH
60742: LD_INT 21
60744: PUSH
60745: LD_INT 22
60747: PUSH
60748: LD_INT 23
60750: PUSH
60751: LD_INT 24
60753: PUSH
60754: EMPTY
60755: LIST
60756: LIST
60757: LIST
60758: LIST
60759: ST_TO_ADDR
60760: GO 60977
60762: LD_INT 45
60764: DOUBLE
60765: EQUAL
60766: IFTRUE 60770
60768: GO 60796
60770: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
60771: LD_ADDR_VAR 0 3
60775: PUSH
60776: LD_INT 21
60778: PUSH
60779: LD_INT 22
60781: PUSH
60782: LD_INT 23
60784: PUSH
60785: LD_INT 24
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: ST_TO_ADDR
60794: GO 60977
60796: LD_INT 49
60798: DOUBLE
60799: EQUAL
60800: IFTRUE 60804
60802: GO 60830
60804: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
60805: LD_ADDR_VAR 0 3
60809: PUSH
60810: LD_INT 21
60812: PUSH
60813: LD_INT 22
60815: PUSH
60816: LD_INT 23
60818: PUSH
60819: LD_INT 24
60821: PUSH
60822: EMPTY
60823: LIST
60824: LIST
60825: LIST
60826: LIST
60827: ST_TO_ADDR
60828: GO 60977
60830: LD_INT 51
60832: DOUBLE
60833: EQUAL
60834: IFTRUE 60838
60836: GO 60864
60838: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
60839: LD_ADDR_VAR 0 3
60843: PUSH
60844: LD_INT 21
60846: PUSH
60847: LD_INT 22
60849: PUSH
60850: LD_INT 23
60852: PUSH
60853: LD_INT 24
60855: PUSH
60856: EMPTY
60857: LIST
60858: LIST
60859: LIST
60860: LIST
60861: ST_TO_ADDR
60862: GO 60977
60864: LD_INT 52
60866: DOUBLE
60867: EQUAL
60868: IFTRUE 60872
60870: GO 60898
60872: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
60873: LD_ADDR_VAR 0 3
60877: PUSH
60878: LD_INT 21
60880: PUSH
60881: LD_INT 22
60883: PUSH
60884: LD_INT 23
60886: PUSH
60887: LD_INT 24
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: LIST
60894: LIST
60895: ST_TO_ADDR
60896: GO 60977
60898: LD_INT 53
60900: DOUBLE
60901: EQUAL
60902: IFTRUE 60906
60904: GO 60924
60906: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
60907: LD_ADDR_VAR 0 3
60911: PUSH
60912: LD_INT 23
60914: PUSH
60915: LD_INT 24
60917: PUSH
60918: EMPTY
60919: LIST
60920: LIST
60921: ST_TO_ADDR
60922: GO 60977
60924: LD_INT 46
60926: DOUBLE
60927: EQUAL
60928: IFTRUE 60932
60930: GO 60950
60932: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
60933: LD_ADDR_VAR 0 3
60937: PUSH
60938: LD_INT 23
60940: PUSH
60941: LD_INT 24
60943: PUSH
60944: EMPTY
60945: LIST
60946: LIST
60947: ST_TO_ADDR
60948: GO 60977
60950: LD_INT 47
60952: DOUBLE
60953: EQUAL
60954: IFTRUE 60958
60956: GO 60976
60958: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
60959: LD_ADDR_VAR 0 3
60963: PUSH
60964: LD_INT 23
60966: PUSH
60967: LD_INT 24
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: ST_TO_ADDR
60974: GO 60977
60976: POP
// result := ( chassis in result ) ;
60977: LD_ADDR_VAR 0 3
60981: PUSH
60982: LD_VAR 0 1
60986: PUSH
60987: LD_VAR 0 3
60991: IN
60992: ST_TO_ADDR
// end ;
60993: LD_VAR 0 3
60997: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
60998: LD_INT 0
61000: PPUSH
61001: PPUSH
61002: PPUSH
61003: PPUSH
61004: PPUSH
61005: PPUSH
61006: PPUSH
// result := array ;
61007: LD_ADDR_VAR 0 5
61011: PUSH
61012: LD_VAR 0 1
61016: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
61017: LD_VAR 0 1
61021: NOT
61022: IFTRUE 61031
61024: PUSH
61025: LD_VAR 0 2
61029: NOT
61030: OR
61031: IFTRUE 61040
61033: PUSH
61034: LD_VAR 0 3
61038: NOT
61039: OR
61040: IFTRUE 61054
61042: PUSH
61043: LD_VAR 0 2
61047: PUSH
61048: LD_VAR 0 1
61052: GREATER
61053: OR
61054: IFTRUE 61068
61056: PUSH
61057: LD_VAR 0 3
61061: PUSH
61062: LD_VAR 0 1
61066: GREATER
61067: OR
61068: IFFALSE 61072
// exit ;
61070: GO 61368
// if direction then
61072: LD_VAR 0 4
61076: IFFALSE 61140
// begin d := 1 ;
61078: LD_ADDR_VAR 0 9
61082: PUSH
61083: LD_INT 1
61085: ST_TO_ADDR
// if i_from > i_to then
61086: LD_VAR 0 2
61090: PUSH
61091: LD_VAR 0 3
61095: GREATER
61096: IFFALSE 61122
// length := ( array - i_from ) + i_to else
61098: LD_ADDR_VAR 0 11
61102: PUSH
61103: LD_VAR 0 1
61107: PUSH
61108: LD_VAR 0 2
61112: MINUS
61113: PUSH
61114: LD_VAR 0 3
61118: PLUS
61119: ST_TO_ADDR
61120: GO 61138
// length := i_to - i_from ;
61122: LD_ADDR_VAR 0 11
61126: PUSH
61127: LD_VAR 0 3
61131: PUSH
61132: LD_VAR 0 2
61136: MINUS
61137: ST_TO_ADDR
// end else
61138: GO 61201
// begin d := - 1 ;
61140: LD_ADDR_VAR 0 9
61144: PUSH
61145: LD_INT 1
61147: NEG
61148: ST_TO_ADDR
// if i_from > i_to then
61149: LD_VAR 0 2
61153: PUSH
61154: LD_VAR 0 3
61158: GREATER
61159: IFFALSE 61179
// length := i_from - i_to else
61161: LD_ADDR_VAR 0 11
61165: PUSH
61166: LD_VAR 0 2
61170: PUSH
61171: LD_VAR 0 3
61175: MINUS
61176: ST_TO_ADDR
61177: GO 61201
// length := ( array - i_to ) + i_from ;
61179: LD_ADDR_VAR 0 11
61183: PUSH
61184: LD_VAR 0 1
61188: PUSH
61189: LD_VAR 0 3
61193: MINUS
61194: PUSH
61195: LD_VAR 0 2
61199: PLUS
61200: ST_TO_ADDR
// end ; if not length then
61201: LD_VAR 0 11
61205: NOT
61206: IFFALSE 61210
// exit ;
61208: GO 61368
// tmp := array ;
61210: LD_ADDR_VAR 0 10
61214: PUSH
61215: LD_VAR 0 1
61219: ST_TO_ADDR
// for i = 1 to length do
61220: LD_ADDR_VAR 0 6
61224: PUSH
61225: DOUBLE
61226: LD_INT 1
61228: DEC
61229: ST_TO_ADDR
61230: LD_VAR 0 11
61234: PUSH
61235: FOR_TO
61236: IFFALSE 61356
// begin for j = 1 to array do
61238: LD_ADDR_VAR 0 7
61242: PUSH
61243: DOUBLE
61244: LD_INT 1
61246: DEC
61247: ST_TO_ADDR
61248: LD_VAR 0 1
61252: PUSH
61253: FOR_TO
61254: IFFALSE 61342
// begin k := j + d ;
61256: LD_ADDR_VAR 0 8
61260: PUSH
61261: LD_VAR 0 7
61265: PUSH
61266: LD_VAR 0 9
61270: PLUS
61271: ST_TO_ADDR
// if k > array then
61272: LD_VAR 0 8
61276: PUSH
61277: LD_VAR 0 1
61281: GREATER
61282: IFFALSE 61292
// k := 1 ;
61284: LD_ADDR_VAR 0 8
61288: PUSH
61289: LD_INT 1
61291: ST_TO_ADDR
// if not k then
61292: LD_VAR 0 8
61296: NOT
61297: IFFALSE 61309
// k := array ;
61299: LD_ADDR_VAR 0 8
61303: PUSH
61304: LD_VAR 0 1
61308: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
61309: LD_ADDR_VAR 0 10
61313: PUSH
61314: LD_VAR 0 10
61318: PPUSH
61319: LD_VAR 0 8
61323: PPUSH
61324: LD_VAR 0 1
61328: PUSH
61329: LD_VAR 0 7
61333: ARRAY
61334: PPUSH
61335: CALL_OW 1
61339: ST_TO_ADDR
// end ;
61340: GO 61253
61342: POP
61343: POP
// array := tmp ;
61344: LD_ADDR_VAR 0 1
61348: PUSH
61349: LD_VAR 0 10
61353: ST_TO_ADDR
// end ;
61354: GO 61235
61356: POP
61357: POP
// result := array ;
61358: LD_ADDR_VAR 0 5
61362: PUSH
61363: LD_VAR 0 1
61367: ST_TO_ADDR
// end ;
61368: LD_VAR 0 5
61372: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
61373: LD_INT 0
61375: PPUSH
61376: PPUSH
// result := 0 ;
61377: LD_ADDR_VAR 0 3
61381: PUSH
61382: LD_INT 0
61384: ST_TO_ADDR
// if not array or not value in array then
61385: LD_VAR 0 1
61389: NOT
61390: IFTRUE 61405
61392: PUSH
61393: LD_VAR 0 2
61397: PUSH
61398: LD_VAR 0 1
61402: IN
61403: NOT
61404: OR
61405: IFFALSE 61409
// exit ;
61407: GO 61463
// for i = 1 to array do
61409: LD_ADDR_VAR 0 4
61413: PUSH
61414: DOUBLE
61415: LD_INT 1
61417: DEC
61418: ST_TO_ADDR
61419: LD_VAR 0 1
61423: PUSH
61424: FOR_TO
61425: IFFALSE 61461
// if value = array [ i ] then
61427: LD_VAR 0 2
61431: PUSH
61432: LD_VAR 0 1
61436: PUSH
61437: LD_VAR 0 4
61441: ARRAY
61442: EQUAL
61443: IFFALSE 61459
// begin result := i ;
61445: LD_ADDR_VAR 0 3
61449: PUSH
61450: LD_VAR 0 4
61454: ST_TO_ADDR
// exit ;
61455: POP
61456: POP
61457: GO 61463
// end ;
61459: GO 61424
61461: POP
61462: POP
// end ;
61463: LD_VAR 0 3
61467: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
61468: LD_INT 0
61470: PPUSH
// vc_chassis := chassis ;
61471: LD_ADDR_OWVAR 37
61475: PUSH
61476: LD_VAR 0 1
61480: ST_TO_ADDR
// vc_engine := engine ;
61481: LD_ADDR_OWVAR 39
61485: PUSH
61486: LD_VAR 0 2
61490: ST_TO_ADDR
// vc_control := control ;
61491: LD_ADDR_OWVAR 38
61495: PUSH
61496: LD_VAR 0 3
61500: ST_TO_ADDR
// vc_weapon := weapon ;
61501: LD_ADDR_OWVAR 40
61505: PUSH
61506: LD_VAR 0 4
61510: ST_TO_ADDR
// vc_fuel_battery := fuel ;
61511: LD_ADDR_OWVAR 41
61515: PUSH
61516: LD_VAR 0 5
61520: ST_TO_ADDR
// end ;
61521: LD_VAR 0 6
61525: RET
// export function WantPlant ( unit ) ; var task ; begin
61526: LD_INT 0
61528: PPUSH
61529: PPUSH
// result := false ;
61530: LD_ADDR_VAR 0 2
61534: PUSH
61535: LD_INT 0
61537: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
61538: LD_ADDR_VAR 0 3
61542: PUSH
61543: LD_VAR 0 1
61547: PPUSH
61548: CALL_OW 437
61552: ST_TO_ADDR
// if task then
61553: LD_VAR 0 3
61557: IFFALSE 61585
// if task [ 1 ] [ 1 ] = p then
61559: LD_VAR 0 3
61563: PUSH
61564: LD_INT 1
61566: ARRAY
61567: PUSH
61568: LD_INT 1
61570: ARRAY
61571: PUSH
61572: LD_STRING p
61574: EQUAL
61575: IFFALSE 61585
// result := true ;
61577: LD_ADDR_VAR 0 2
61581: PUSH
61582: LD_INT 1
61584: ST_TO_ADDR
// end ;
61585: LD_VAR 0 2
61589: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
61590: LD_INT 0
61592: PPUSH
61593: PPUSH
61594: PPUSH
61595: PPUSH
// if pos < 1 then
61596: LD_VAR 0 2
61600: PUSH
61601: LD_INT 1
61603: LESS
61604: IFFALSE 61608
// exit ;
61606: GO 61911
// if pos = 1 then
61608: LD_VAR 0 2
61612: PUSH
61613: LD_INT 1
61615: EQUAL
61616: IFFALSE 61649
// result := Replace ( arr , pos [ 1 ] , value ) else
61618: LD_ADDR_VAR 0 4
61622: PUSH
61623: LD_VAR 0 1
61627: PPUSH
61628: LD_VAR 0 2
61632: PUSH
61633: LD_INT 1
61635: ARRAY
61636: PPUSH
61637: LD_VAR 0 3
61641: PPUSH
61642: CALL_OW 1
61646: ST_TO_ADDR
61647: GO 61911
// begin tmp := arr ;
61649: LD_ADDR_VAR 0 6
61653: PUSH
61654: LD_VAR 0 1
61658: ST_TO_ADDR
// s_arr := [ tmp ] ;
61659: LD_ADDR_VAR 0 7
61663: PUSH
61664: LD_VAR 0 6
61668: PUSH
61669: EMPTY
61670: LIST
61671: ST_TO_ADDR
// for i = 1 to pos - 1 do
61672: LD_ADDR_VAR 0 5
61676: PUSH
61677: DOUBLE
61678: LD_INT 1
61680: DEC
61681: ST_TO_ADDR
61682: LD_VAR 0 2
61686: PUSH
61687: LD_INT 1
61689: MINUS
61690: PUSH
61691: FOR_TO
61692: IFFALSE 61737
// begin tmp := tmp [ pos [ i ] ] ;
61694: LD_ADDR_VAR 0 6
61698: PUSH
61699: LD_VAR 0 6
61703: PUSH
61704: LD_VAR 0 2
61708: PUSH
61709: LD_VAR 0 5
61713: ARRAY
61714: ARRAY
61715: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
61716: LD_ADDR_VAR 0 7
61720: PUSH
61721: LD_VAR 0 7
61725: PUSH
61726: LD_VAR 0 6
61730: PUSH
61731: EMPTY
61732: LIST
61733: ADD
61734: ST_TO_ADDR
// end ;
61735: GO 61691
61737: POP
61738: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
61739: LD_ADDR_VAR 0 6
61743: PUSH
61744: LD_VAR 0 6
61748: PPUSH
61749: LD_VAR 0 2
61753: PUSH
61754: LD_VAR 0 2
61758: ARRAY
61759: PPUSH
61760: LD_VAR 0 3
61764: PPUSH
61765: CALL_OW 1
61769: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
61770: LD_ADDR_VAR 0 7
61774: PUSH
61775: LD_VAR 0 7
61779: PPUSH
61780: LD_VAR 0 7
61784: PPUSH
61785: LD_VAR 0 6
61789: PPUSH
61790: CALL_OW 1
61794: ST_TO_ADDR
// for i = s_arr downto 2 do
61795: LD_ADDR_VAR 0 5
61799: PUSH
61800: DOUBLE
61801: LD_VAR 0 7
61805: INC
61806: ST_TO_ADDR
61807: LD_INT 2
61809: PUSH
61810: FOR_DOWNTO
61811: IFFALSE 61895
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
61813: LD_ADDR_VAR 0 6
61817: PUSH
61818: LD_VAR 0 7
61822: PUSH
61823: LD_VAR 0 5
61827: PUSH
61828: LD_INT 1
61830: MINUS
61831: ARRAY
61832: PPUSH
61833: LD_VAR 0 2
61837: PUSH
61838: LD_VAR 0 5
61842: PUSH
61843: LD_INT 1
61845: MINUS
61846: ARRAY
61847: PPUSH
61848: LD_VAR 0 7
61852: PUSH
61853: LD_VAR 0 5
61857: ARRAY
61858: PPUSH
61859: CALL_OW 1
61863: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
61864: LD_ADDR_VAR 0 7
61868: PUSH
61869: LD_VAR 0 7
61873: PPUSH
61874: LD_VAR 0 5
61878: PUSH
61879: LD_INT 1
61881: MINUS
61882: PPUSH
61883: LD_VAR 0 6
61887: PPUSH
61888: CALL_OW 1
61892: ST_TO_ADDR
// end ;
61893: GO 61810
61895: POP
61896: POP
// result := s_arr [ 1 ] ;
61897: LD_ADDR_VAR 0 4
61901: PUSH
61902: LD_VAR 0 7
61906: PUSH
61907: LD_INT 1
61909: ARRAY
61910: ST_TO_ADDR
// end ; end ;
61911: LD_VAR 0 4
61915: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
61916: LD_INT 0
61918: PPUSH
61919: PPUSH
// if not list then
61920: LD_VAR 0 1
61924: NOT
61925: IFFALSE 61929
// exit ;
61927: GO 62020
// i := list [ pos1 ] ;
61929: LD_ADDR_VAR 0 5
61933: PUSH
61934: LD_VAR 0 1
61938: PUSH
61939: LD_VAR 0 2
61943: ARRAY
61944: ST_TO_ADDR
// if not i then
61945: LD_VAR 0 5
61949: NOT
61950: IFFALSE 61954
// exit ;
61952: GO 62020
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
61954: LD_ADDR_VAR 0 1
61958: PUSH
61959: LD_VAR 0 1
61963: PPUSH
61964: LD_VAR 0 2
61968: PPUSH
61969: LD_VAR 0 1
61973: PUSH
61974: LD_VAR 0 3
61978: ARRAY
61979: PPUSH
61980: CALL_OW 1
61984: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
61985: LD_ADDR_VAR 0 1
61989: PUSH
61990: LD_VAR 0 1
61994: PPUSH
61995: LD_VAR 0 3
61999: PPUSH
62000: LD_VAR 0 5
62004: PPUSH
62005: CALL_OW 1
62009: ST_TO_ADDR
// result := list ;
62010: LD_ADDR_VAR 0 4
62014: PUSH
62015: LD_VAR 0 1
62019: ST_TO_ADDR
// end ;
62020: LD_VAR 0 4
62024: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
62025: LD_INT 0
62027: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
62028: LD_ADDR_VAR 0 5
62032: PUSH
62033: LD_VAR 0 1
62037: PPUSH
62038: CALL_OW 250
62042: PPUSH
62043: LD_VAR 0 1
62047: PPUSH
62048: CALL_OW 251
62052: PPUSH
62053: LD_VAR 0 2
62057: PPUSH
62058: LD_VAR 0 3
62062: PPUSH
62063: LD_VAR 0 4
62067: PPUSH
62068: CALL 62450 0 5
62072: ST_TO_ADDR
// end ;
62073: LD_VAR 0 5
62077: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
62078: LD_INT 0
62080: PPUSH
62081: PPUSH
62082: PPUSH
62083: PPUSH
// if not list or not unit then
62084: LD_VAR 0 2
62088: NOT
62089: IFTRUE 62098
62091: PUSH
62092: LD_VAR 0 1
62096: NOT
62097: OR
62098: IFFALSE 62102
// exit ;
62100: GO 62445
// result := [ ] ;
62102: LD_ADDR_VAR 0 5
62106: PUSH
62107: EMPTY
62108: ST_TO_ADDR
// for i in list do
62109: LD_ADDR_VAR 0 6
62113: PUSH
62114: LD_VAR 0 2
62118: PUSH
62119: FOR_IN
62120: IFFALSE 62338
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62122: LD_ADDR_VAR 0 8
62126: PUSH
62127: LD_VAR 0 1
62131: PPUSH
62132: LD_VAR 0 6
62136: PUSH
62137: LD_INT 1
62139: ARRAY
62140: PPUSH
62141: LD_VAR 0 6
62145: PUSH
62146: LD_INT 2
62148: ARRAY
62149: PPUSH
62150: CALL_OW 297
62154: ST_TO_ADDR
// if not Count ( result ) then
62155: LD_VAR 0 5
62159: PPUSH
62160: CALL 58706 0 1
62164: NOT
62165: IFFALSE 62198
// begin result := Join ( result , [ i , tmp ] ) ;
62167: LD_ADDR_VAR 0 5
62171: PUSH
62172: LD_VAR 0 5
62176: PPUSH
62177: LD_VAR 0 6
62181: PUSH
62182: LD_VAR 0 8
62186: PUSH
62187: EMPTY
62188: LIST
62189: LIST
62190: PPUSH
62191: CALL 94638 0 2
62195: ST_TO_ADDR
// continue ;
62196: GO 62119
// end ; if result [ result ] [ 2 ] <= tmp then
62198: LD_VAR 0 5
62202: PUSH
62203: LD_VAR 0 5
62207: ARRAY
62208: PUSH
62209: LD_INT 2
62211: ARRAY
62212: PUSH
62213: LD_VAR 0 8
62217: LESSEQUAL
62218: IFFALSE 62251
// result := Join ( result , [ i , tmp ] ) else
62220: LD_ADDR_VAR 0 5
62224: PUSH
62225: LD_VAR 0 5
62229: PPUSH
62230: LD_VAR 0 6
62234: PUSH
62235: LD_VAR 0 8
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PPUSH
62244: CALL 94638 0 2
62248: ST_TO_ADDR
62249: GO 62336
// begin for j := 1 to Count ( result ) do
62251: LD_ADDR_VAR 0 7
62255: PUSH
62256: DOUBLE
62257: LD_INT 1
62259: DEC
62260: ST_TO_ADDR
62261: LD_VAR 0 5
62265: PPUSH
62266: CALL 58706 0 1
62270: PUSH
62271: FOR_TO
62272: IFFALSE 62334
// begin if tmp < result [ j ] [ 2 ] then
62274: LD_VAR 0 8
62278: PUSH
62279: LD_VAR 0 5
62283: PUSH
62284: LD_VAR 0 7
62288: ARRAY
62289: PUSH
62290: LD_INT 2
62292: ARRAY
62293: LESS
62294: IFFALSE 62332
// begin result := Insert ( result , j , [ i , tmp ] ) ;
62296: LD_ADDR_VAR 0 5
62300: PUSH
62301: LD_VAR 0 5
62305: PPUSH
62306: LD_VAR 0 7
62310: PPUSH
62311: LD_VAR 0 6
62315: PUSH
62316: LD_VAR 0 8
62320: PUSH
62321: EMPTY
62322: LIST
62323: LIST
62324: PPUSH
62325: CALL_OW 2
62329: ST_TO_ADDR
// break ;
62330: GO 62334
// end ; end ;
62332: GO 62271
62334: POP
62335: POP
// end ; end ;
62336: GO 62119
62338: POP
62339: POP
// if result and not asc then
62340: LD_VAR 0 5
62344: IFFALSE 62353
62346: PUSH
62347: LD_VAR 0 3
62351: NOT
62352: AND
62353: IFFALSE 62370
// result := ReverseArray ( result ) ;
62355: LD_ADDR_VAR 0 5
62359: PUSH
62360: LD_VAR 0 5
62364: PPUSH
62365: CALL 89728 0 1
62369: ST_TO_ADDR
// tmp := [ ] ;
62370: LD_ADDR_VAR 0 8
62374: PUSH
62375: EMPTY
62376: ST_TO_ADDR
// if mode then
62377: LD_VAR 0 4
62381: IFFALSE 62445
// begin for i := 1 to result do
62383: LD_ADDR_VAR 0 6
62387: PUSH
62388: DOUBLE
62389: LD_INT 1
62391: DEC
62392: ST_TO_ADDR
62393: LD_VAR 0 5
62397: PUSH
62398: FOR_TO
62399: IFFALSE 62433
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
62401: LD_ADDR_VAR 0 8
62405: PUSH
62406: LD_VAR 0 8
62410: PPUSH
62411: LD_VAR 0 5
62415: PUSH
62416: LD_VAR 0 6
62420: ARRAY
62421: PUSH
62422: LD_INT 1
62424: ARRAY
62425: PPUSH
62426: CALL 94638 0 2
62430: ST_TO_ADDR
62431: GO 62398
62433: POP
62434: POP
// result := tmp ;
62435: LD_ADDR_VAR 0 5
62439: PUSH
62440: LD_VAR 0 8
62444: ST_TO_ADDR
// end ; end ;
62445: LD_VAR 0 5
62449: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
62450: LD_INT 0
62452: PPUSH
62453: PPUSH
62454: PPUSH
62455: PPUSH
// if not list then
62456: LD_VAR 0 3
62460: NOT
62461: IFFALSE 62465
// exit ;
62463: GO 62855
// result := [ ] ;
62465: LD_ADDR_VAR 0 6
62469: PUSH
62470: EMPTY
62471: ST_TO_ADDR
// for i in list do
62472: LD_ADDR_VAR 0 7
62476: PUSH
62477: LD_VAR 0 3
62481: PUSH
62482: FOR_IN
62483: IFFALSE 62685
// begin tmp := GetDistUnitXY ( i , x , y ) ;
62485: LD_ADDR_VAR 0 9
62489: PUSH
62490: LD_VAR 0 7
62494: PPUSH
62495: LD_VAR 0 1
62499: PPUSH
62500: LD_VAR 0 2
62504: PPUSH
62505: CALL_OW 297
62509: ST_TO_ADDR
// if not result then
62510: LD_VAR 0 6
62514: NOT
62515: IFFALSE 62541
// result := [ [ i , tmp ] ] else
62517: LD_ADDR_VAR 0 6
62521: PUSH
62522: LD_VAR 0 7
62526: PUSH
62527: LD_VAR 0 9
62531: PUSH
62532: EMPTY
62533: LIST
62534: LIST
62535: PUSH
62536: EMPTY
62537: LIST
62538: ST_TO_ADDR
62539: GO 62683
// begin if result [ result ] [ 2 ] <= tmp then
62541: LD_VAR 0 6
62545: PUSH
62546: LD_VAR 0 6
62550: ARRAY
62551: PUSH
62552: LD_INT 2
62554: ARRAY
62555: PUSH
62556: LD_VAR 0 9
62560: LESSEQUAL
62561: IFFALSE 62603
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
62563: LD_ADDR_VAR 0 6
62567: PUSH
62568: LD_VAR 0 6
62572: PPUSH
62573: LD_VAR 0 6
62577: PUSH
62578: LD_INT 1
62580: PLUS
62581: PPUSH
62582: LD_VAR 0 7
62586: PUSH
62587: LD_VAR 0 9
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PPUSH
62596: CALL_OW 2
62600: ST_TO_ADDR
62601: GO 62683
// for j := 1 to result do
62603: LD_ADDR_VAR 0 8
62607: PUSH
62608: DOUBLE
62609: LD_INT 1
62611: DEC
62612: ST_TO_ADDR
62613: LD_VAR 0 6
62617: PUSH
62618: FOR_TO
62619: IFFALSE 62681
// begin if tmp < result [ j ] [ 2 ] then
62621: LD_VAR 0 9
62625: PUSH
62626: LD_VAR 0 6
62630: PUSH
62631: LD_VAR 0 8
62635: ARRAY
62636: PUSH
62637: LD_INT 2
62639: ARRAY
62640: LESS
62641: IFFALSE 62679
// begin result := Insert ( result , j , [ i , tmp ] ) ;
62643: LD_ADDR_VAR 0 6
62647: PUSH
62648: LD_VAR 0 6
62652: PPUSH
62653: LD_VAR 0 8
62657: PPUSH
62658: LD_VAR 0 7
62662: PUSH
62663: LD_VAR 0 9
62667: PUSH
62668: EMPTY
62669: LIST
62670: LIST
62671: PPUSH
62672: CALL_OW 2
62676: ST_TO_ADDR
// break ;
62677: GO 62681
// end ; end ;
62679: GO 62618
62681: POP
62682: POP
// end ; end ;
62683: GO 62482
62685: POP
62686: POP
// if result and not asc then
62687: LD_VAR 0 6
62691: IFFALSE 62700
62693: PUSH
62694: LD_VAR 0 4
62698: NOT
62699: AND
62700: IFFALSE 62775
// begin tmp := result ;
62702: LD_ADDR_VAR 0 9
62706: PUSH
62707: LD_VAR 0 6
62711: ST_TO_ADDR
// for i = tmp downto 1 do
62712: LD_ADDR_VAR 0 7
62716: PUSH
62717: DOUBLE
62718: LD_VAR 0 9
62722: INC
62723: ST_TO_ADDR
62724: LD_INT 1
62726: PUSH
62727: FOR_DOWNTO
62728: IFFALSE 62773
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
62730: LD_ADDR_VAR 0 6
62734: PUSH
62735: LD_VAR 0 6
62739: PPUSH
62740: LD_VAR 0 9
62744: PUSH
62745: LD_VAR 0 7
62749: MINUS
62750: PUSH
62751: LD_INT 1
62753: PLUS
62754: PPUSH
62755: LD_VAR 0 9
62759: PUSH
62760: LD_VAR 0 7
62764: ARRAY
62765: PPUSH
62766: CALL_OW 1
62770: ST_TO_ADDR
62771: GO 62727
62773: POP
62774: POP
// end ; tmp := [ ] ;
62775: LD_ADDR_VAR 0 9
62779: PUSH
62780: EMPTY
62781: ST_TO_ADDR
// if mode then
62782: LD_VAR 0 5
62786: IFFALSE 62855
// begin for i = 1 to result do
62788: LD_ADDR_VAR 0 7
62792: PUSH
62793: DOUBLE
62794: LD_INT 1
62796: DEC
62797: ST_TO_ADDR
62798: LD_VAR 0 6
62802: PUSH
62803: FOR_TO
62804: IFFALSE 62843
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
62806: LD_ADDR_VAR 0 9
62810: PUSH
62811: LD_VAR 0 9
62815: PPUSH
62816: LD_VAR 0 7
62820: PPUSH
62821: LD_VAR 0 6
62825: PUSH
62826: LD_VAR 0 7
62830: ARRAY
62831: PUSH
62832: LD_INT 1
62834: ARRAY
62835: PPUSH
62836: CALL_OW 1
62840: ST_TO_ADDR
62841: GO 62803
62843: POP
62844: POP
// result := tmp ;
62845: LD_ADDR_VAR 0 6
62849: PUSH
62850: LD_VAR 0 9
62854: ST_TO_ADDR
// end ; end ;
62855: LD_VAR 0 6
62859: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
62860: LD_INT 0
62862: PPUSH
62863: PPUSH
62864: PPUSH
62865: PPUSH
62866: PPUSH
62867: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
62868: LD_ADDR_VAR 0 5
62872: PUSH
62873: LD_INT 0
62875: PUSH
62876: LD_INT 0
62878: PUSH
62879: LD_INT 0
62881: PUSH
62882: EMPTY
62883: PUSH
62884: EMPTY
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: ST_TO_ADDR
// if not x or not y then
62890: LD_VAR 0 2
62894: NOT
62895: IFTRUE 62904
62897: PUSH
62898: LD_VAR 0 3
62902: NOT
62903: OR
62904: IFFALSE 62908
// exit ;
62906: GO 64564
// if not range then
62908: LD_VAR 0 4
62912: NOT
62913: IFFALSE 62923
// range := 10 ;
62915: LD_ADDR_VAR 0 4
62919: PUSH
62920: LD_INT 10
62922: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
62923: LD_ADDR_VAR 0 8
62927: PUSH
62928: LD_INT 81
62930: PUSH
62931: LD_VAR 0 1
62935: PUSH
62936: EMPTY
62937: LIST
62938: LIST
62939: PUSH
62940: LD_INT 92
62942: PUSH
62943: LD_VAR 0 2
62947: PUSH
62948: LD_VAR 0 3
62952: PUSH
62953: LD_VAR 0 4
62957: PUSH
62958: EMPTY
62959: LIST
62960: LIST
62961: LIST
62962: LIST
62963: PUSH
62964: LD_INT 3
62966: PUSH
62967: LD_INT 21
62969: PUSH
62970: LD_INT 3
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: EMPTY
62978: LIST
62979: LIST
62980: PUSH
62981: EMPTY
62982: LIST
62983: LIST
62984: LIST
62985: PPUSH
62986: CALL_OW 69
62990: ST_TO_ADDR
// if not tmp then
62991: LD_VAR 0 8
62995: NOT
62996: IFFALSE 63000
// exit ;
62998: GO 64564
// for i in tmp do
63000: LD_ADDR_VAR 0 6
63004: PUSH
63005: LD_VAR 0 8
63009: PUSH
63010: FOR_IN
63011: IFFALSE 64539
// begin points := [ 0 , 0 , 0 ] ;
63013: LD_ADDR_VAR 0 9
63017: PUSH
63018: LD_INT 0
63020: PUSH
63021: LD_INT 0
63023: PUSH
63024: LD_INT 0
63026: PUSH
63027: EMPTY
63028: LIST
63029: LIST
63030: LIST
63031: ST_TO_ADDR
// bpoints := 1 ;
63032: LD_ADDR_VAR 0 10
63036: PUSH
63037: LD_INT 1
63039: ST_TO_ADDR
// case GetType ( i ) of unit_human :
63040: LD_VAR 0 6
63044: PPUSH
63045: CALL_OW 247
63049: PUSH
63050: LD_INT 1
63052: DOUBLE
63053: EQUAL
63054: IFTRUE 63058
63056: GO 63640
63058: POP
// begin if GetClass ( i ) = 1 then
63059: LD_VAR 0 6
63063: PPUSH
63064: CALL_OW 257
63068: PUSH
63069: LD_INT 1
63071: EQUAL
63072: IFFALSE 63093
// points := [ 10 , 5 , 3 ] ;
63074: LD_ADDR_VAR 0 9
63078: PUSH
63079: LD_INT 10
63081: PUSH
63082: LD_INT 5
63084: PUSH
63085: LD_INT 3
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: LIST
63092: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
63093: LD_VAR 0 6
63097: PPUSH
63098: CALL_OW 257
63102: PUSH
63103: LD_INT 2
63105: PUSH
63106: LD_INT 3
63108: PUSH
63109: LD_INT 4
63111: PUSH
63112: EMPTY
63113: LIST
63114: LIST
63115: LIST
63116: IN
63117: IFFALSE 63138
// points := [ 3 , 2 , 1 ] ;
63119: LD_ADDR_VAR 0 9
63123: PUSH
63124: LD_INT 3
63126: PUSH
63127: LD_INT 2
63129: PUSH
63130: LD_INT 1
63132: PUSH
63133: EMPTY
63134: LIST
63135: LIST
63136: LIST
63137: ST_TO_ADDR
// if GetClass ( i ) = 5 then
63138: LD_VAR 0 6
63142: PPUSH
63143: CALL_OW 257
63147: PUSH
63148: LD_INT 5
63150: EQUAL
63151: IFFALSE 63172
// points := [ 130 , 5 , 2 ] ;
63153: LD_ADDR_VAR 0 9
63157: PUSH
63158: LD_INT 130
63160: PUSH
63161: LD_INT 5
63163: PUSH
63164: LD_INT 2
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: LIST
63171: ST_TO_ADDR
// if GetClass ( i ) = 8 then
63172: LD_VAR 0 6
63176: PPUSH
63177: CALL_OW 257
63181: PUSH
63182: LD_INT 8
63184: EQUAL
63185: IFFALSE 63206
// points := [ 35 , 35 , 30 ] ;
63187: LD_ADDR_VAR 0 9
63191: PUSH
63192: LD_INT 35
63194: PUSH
63195: LD_INT 35
63197: PUSH
63198: LD_INT 30
63200: PUSH
63201: EMPTY
63202: LIST
63203: LIST
63204: LIST
63205: ST_TO_ADDR
// if GetClass ( i ) = 9 then
63206: LD_VAR 0 6
63210: PPUSH
63211: CALL_OW 257
63215: PUSH
63216: LD_INT 9
63218: EQUAL
63219: IFFALSE 63240
// points := [ 20 , 55 , 40 ] ;
63221: LD_ADDR_VAR 0 9
63225: PUSH
63226: LD_INT 20
63228: PUSH
63229: LD_INT 55
63231: PUSH
63232: LD_INT 40
63234: PUSH
63235: EMPTY
63236: LIST
63237: LIST
63238: LIST
63239: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
63240: LD_VAR 0 6
63244: PPUSH
63245: CALL_OW 257
63249: PUSH
63250: LD_INT 12
63252: PUSH
63253: LD_INT 16
63255: PUSH
63256: EMPTY
63257: LIST
63258: LIST
63259: IN
63260: IFFALSE 63281
// points := [ 5 , 3 , 2 ] ;
63262: LD_ADDR_VAR 0 9
63266: PUSH
63267: LD_INT 5
63269: PUSH
63270: LD_INT 3
63272: PUSH
63273: LD_INT 2
63275: PUSH
63276: EMPTY
63277: LIST
63278: LIST
63279: LIST
63280: ST_TO_ADDR
// if GetClass ( i ) = 17 then
63281: LD_VAR 0 6
63285: PPUSH
63286: CALL_OW 257
63290: PUSH
63291: LD_INT 17
63293: EQUAL
63294: IFFALSE 63315
// points := [ 100 , 50 , 75 ] ;
63296: LD_ADDR_VAR 0 9
63300: PUSH
63301: LD_INT 100
63303: PUSH
63304: LD_INT 50
63306: PUSH
63307: LD_INT 75
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: LIST
63314: ST_TO_ADDR
// if GetClass ( i ) = 15 then
63315: LD_VAR 0 6
63319: PPUSH
63320: CALL_OW 257
63324: PUSH
63325: LD_INT 15
63327: EQUAL
63328: IFFALSE 63349
// points := [ 10 , 5 , 3 ] ;
63330: LD_ADDR_VAR 0 9
63334: PUSH
63335: LD_INT 10
63337: PUSH
63338: LD_INT 5
63340: PUSH
63341: LD_INT 3
63343: PUSH
63344: EMPTY
63345: LIST
63346: LIST
63347: LIST
63348: ST_TO_ADDR
// if GetClass ( i ) = 14 then
63349: LD_VAR 0 6
63353: PPUSH
63354: CALL_OW 257
63358: PUSH
63359: LD_INT 14
63361: EQUAL
63362: IFFALSE 63383
// points := [ 10 , 0 , 0 ] ;
63364: LD_ADDR_VAR 0 9
63368: PUSH
63369: LD_INT 10
63371: PUSH
63372: LD_INT 0
63374: PUSH
63375: LD_INT 0
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: LIST
63382: ST_TO_ADDR
// if GetClass ( i ) = 11 then
63383: LD_VAR 0 6
63387: PPUSH
63388: CALL_OW 257
63392: PUSH
63393: LD_INT 11
63395: EQUAL
63396: IFFALSE 63417
// points := [ 30 , 10 , 5 ] ;
63398: LD_ADDR_VAR 0 9
63402: PUSH
63403: LD_INT 30
63405: PUSH
63406: LD_INT 10
63408: PUSH
63409: LD_INT 5
63411: PUSH
63412: EMPTY
63413: LIST
63414: LIST
63415: LIST
63416: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
63417: LD_VAR 0 1
63421: PPUSH
63422: LD_INT 5
63424: PPUSH
63425: CALL_OW 321
63429: PUSH
63430: LD_INT 2
63432: EQUAL
63433: IFFALSE 63450
// bpoints := bpoints * 1.8 ;
63435: LD_ADDR_VAR 0 10
63439: PUSH
63440: LD_VAR 0 10
63444: PUSH
63445: LD_REAL  1.80000000000000E+0000
63448: MUL
63449: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
63450: LD_VAR 0 6
63454: PPUSH
63455: CALL_OW 257
63459: PUSH
63460: LD_INT 1
63462: PUSH
63463: LD_INT 2
63465: PUSH
63466: LD_INT 3
63468: PUSH
63469: LD_INT 4
63471: PUSH
63472: EMPTY
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: IN
63478: IFFALSE 63498
63480: PUSH
63481: LD_VAR 0 1
63485: PPUSH
63486: LD_INT 51
63488: PPUSH
63489: CALL_OW 321
63493: PUSH
63494: LD_INT 2
63496: EQUAL
63497: AND
63498: IFFALSE 63515
// bpoints := bpoints * 1.2 ;
63500: LD_ADDR_VAR 0 10
63504: PUSH
63505: LD_VAR 0 10
63509: PUSH
63510: LD_REAL  1.20000000000000E+0000
63513: MUL
63514: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
63515: LD_VAR 0 6
63519: PPUSH
63520: CALL_OW 257
63524: PUSH
63525: LD_INT 5
63527: PUSH
63528: LD_INT 7
63530: PUSH
63531: LD_INT 9
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: LIST
63538: IN
63539: IFFALSE 63559
63541: PUSH
63542: LD_VAR 0 1
63546: PPUSH
63547: LD_INT 52
63549: PPUSH
63550: CALL_OW 321
63554: PUSH
63555: LD_INT 2
63557: EQUAL
63558: AND
63559: IFFALSE 63576
// bpoints := bpoints * 1.5 ;
63561: LD_ADDR_VAR 0 10
63565: PUSH
63566: LD_VAR 0 10
63570: PUSH
63571: LD_REAL  1.50000000000000E+0000
63574: MUL
63575: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
63576: LD_VAR 0 1
63580: PPUSH
63581: LD_INT 66
63583: PPUSH
63584: CALL_OW 321
63588: PUSH
63589: LD_INT 2
63591: EQUAL
63592: IFFALSE 63609
// bpoints := bpoints * 1.1 ;
63594: LD_ADDR_VAR 0 10
63598: PUSH
63599: LD_VAR 0 10
63603: PUSH
63604: LD_REAL  1.10000000000000E+0000
63607: MUL
63608: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
63609: LD_ADDR_VAR 0 10
63613: PUSH
63614: LD_VAR 0 10
63618: PUSH
63619: LD_VAR 0 6
63623: PPUSH
63624: LD_INT 1
63626: PPUSH
63627: CALL_OW 259
63631: PUSH
63632: LD_REAL  1.15000000000000E+0000
63635: MUL
63636: MUL
63637: ST_TO_ADDR
// end ; unit_vehicle :
63638: GO 64468
63640: LD_INT 2
63642: DOUBLE
63643: EQUAL
63644: IFTRUE 63648
63646: GO 64456
63648: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
63649: LD_VAR 0 6
63653: PPUSH
63654: CALL_OW 264
63658: PUSH
63659: LD_INT 2
63661: PUSH
63662: LD_INT 42
63664: PUSH
63665: LD_INT 24
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: LIST
63672: IN
63673: IFFALSE 63694
// points := [ 25 , 5 , 3 ] ;
63675: LD_ADDR_VAR 0 9
63679: PUSH
63680: LD_INT 25
63682: PUSH
63683: LD_INT 5
63685: PUSH
63686: LD_INT 3
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: LIST
63693: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
63694: LD_VAR 0 6
63698: PPUSH
63699: CALL_OW 264
63703: PUSH
63704: LD_INT 4
63706: PUSH
63707: LD_INT 43
63709: PUSH
63710: LD_INT 25
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: LIST
63717: IN
63718: IFFALSE 63739
// points := [ 40 , 15 , 5 ] ;
63720: LD_ADDR_VAR 0 9
63724: PUSH
63725: LD_INT 40
63727: PUSH
63728: LD_INT 15
63730: PUSH
63731: LD_INT 5
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: LIST
63738: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
63739: LD_VAR 0 6
63743: PPUSH
63744: CALL_OW 264
63748: PUSH
63749: LD_INT 3
63751: PUSH
63752: LD_INT 23
63754: PUSH
63755: EMPTY
63756: LIST
63757: LIST
63758: IN
63759: IFFALSE 63780
// points := [ 7 , 25 , 8 ] ;
63761: LD_ADDR_VAR 0 9
63765: PUSH
63766: LD_INT 7
63768: PUSH
63769: LD_INT 25
63771: PUSH
63772: LD_INT 8
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: LIST
63779: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
63780: LD_VAR 0 6
63784: PPUSH
63785: CALL_OW 264
63789: PUSH
63790: LD_INT 5
63792: PUSH
63793: LD_INT 27
63795: PUSH
63796: LD_INT 44
63798: PUSH
63799: EMPTY
63800: LIST
63801: LIST
63802: LIST
63803: IN
63804: IFFALSE 63825
// points := [ 14 , 50 , 16 ] ;
63806: LD_ADDR_VAR 0 9
63810: PUSH
63811: LD_INT 14
63813: PUSH
63814: LD_INT 50
63816: PUSH
63817: LD_INT 16
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: LIST
63824: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
63825: LD_VAR 0 6
63829: PPUSH
63830: CALL_OW 264
63834: PUSH
63835: LD_INT 6
63837: PUSH
63838: LD_INT 46
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: IN
63845: IFFALSE 63866
// points := [ 32 , 120 , 70 ] ;
63847: LD_ADDR_VAR 0 9
63851: PUSH
63852: LD_INT 32
63854: PUSH
63855: LD_INT 120
63857: PUSH
63858: LD_INT 70
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
63866: LD_VAR 0 6
63870: PPUSH
63871: CALL_OW 264
63875: PUSH
63876: LD_INT 7
63878: PUSH
63879: LD_INT 28
63881: PUSH
63882: LD_INT 45
63884: PUSH
63885: LD_INT 92
63887: PUSH
63888: EMPTY
63889: LIST
63890: LIST
63891: LIST
63892: LIST
63893: IN
63894: IFFALSE 63915
// points := [ 35 , 20 , 45 ] ;
63896: LD_ADDR_VAR 0 9
63900: PUSH
63901: LD_INT 35
63903: PUSH
63904: LD_INT 20
63906: PUSH
63907: LD_INT 45
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: LIST
63914: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
63915: LD_VAR 0 6
63919: PPUSH
63920: CALL_OW 264
63924: PUSH
63925: LD_INT 47
63927: PUSH
63928: EMPTY
63929: LIST
63930: IN
63931: IFFALSE 63952
// points := [ 67 , 45 , 75 ] ;
63933: LD_ADDR_VAR 0 9
63937: PUSH
63938: LD_INT 67
63940: PUSH
63941: LD_INT 45
63943: PUSH
63944: LD_INT 75
63946: PUSH
63947: EMPTY
63948: LIST
63949: LIST
63950: LIST
63951: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
63952: LD_VAR 0 6
63956: PPUSH
63957: CALL_OW 264
63961: PUSH
63962: LD_INT 26
63964: PUSH
63965: EMPTY
63966: LIST
63967: IN
63968: IFFALSE 63989
// points := [ 120 , 30 , 80 ] ;
63970: LD_ADDR_VAR 0 9
63974: PUSH
63975: LD_INT 120
63977: PUSH
63978: LD_INT 30
63980: PUSH
63981: LD_INT 80
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: LIST
63988: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
63989: LD_VAR 0 6
63993: PPUSH
63994: CALL_OW 264
63998: PUSH
63999: LD_INT 22
64001: PUSH
64002: EMPTY
64003: LIST
64004: IN
64005: IFFALSE 64026
// points := [ 40 , 1 , 1 ] ;
64007: LD_ADDR_VAR 0 9
64011: PUSH
64012: LD_INT 40
64014: PUSH
64015: LD_INT 1
64017: PUSH
64018: LD_INT 1
64020: PUSH
64021: EMPTY
64022: LIST
64023: LIST
64024: LIST
64025: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
64026: LD_VAR 0 6
64030: PPUSH
64031: CALL_OW 264
64035: PUSH
64036: LD_INT 29
64038: PUSH
64039: EMPTY
64040: LIST
64041: IN
64042: IFFALSE 64063
// points := [ 70 , 200 , 400 ] ;
64044: LD_ADDR_VAR 0 9
64048: PUSH
64049: LD_INT 70
64051: PUSH
64052: LD_INT 200
64054: PUSH
64055: LD_INT 400
64057: PUSH
64058: EMPTY
64059: LIST
64060: LIST
64061: LIST
64062: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
64063: LD_VAR 0 6
64067: PPUSH
64068: CALL_OW 264
64072: PUSH
64073: LD_INT 14
64075: PUSH
64076: LD_INT 53
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: IN
64083: IFFALSE 64104
// points := [ 40 , 10 , 20 ] ;
64085: LD_ADDR_VAR 0 9
64089: PUSH
64090: LD_INT 40
64092: PUSH
64093: LD_INT 10
64095: PUSH
64096: LD_INT 20
64098: PUSH
64099: EMPTY
64100: LIST
64101: LIST
64102: LIST
64103: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
64104: LD_VAR 0 6
64108: PPUSH
64109: CALL_OW 264
64113: PUSH
64114: LD_INT 9
64116: PUSH
64117: EMPTY
64118: LIST
64119: IN
64120: IFFALSE 64141
// points := [ 5 , 70 , 20 ] ;
64122: LD_ADDR_VAR 0 9
64126: PUSH
64127: LD_INT 5
64129: PUSH
64130: LD_INT 70
64132: PUSH
64133: LD_INT 20
64135: PUSH
64136: EMPTY
64137: LIST
64138: LIST
64139: LIST
64140: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
64141: LD_VAR 0 6
64145: PPUSH
64146: CALL_OW 264
64150: PUSH
64151: LD_INT 10
64153: PUSH
64154: EMPTY
64155: LIST
64156: IN
64157: IFFALSE 64178
// points := [ 35 , 110 , 70 ] ;
64159: LD_ADDR_VAR 0 9
64163: PUSH
64164: LD_INT 35
64166: PUSH
64167: LD_INT 110
64169: PUSH
64170: LD_INT 70
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: LIST
64177: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
64178: LD_VAR 0 6
64182: PPUSH
64183: CALL_OW 265
64187: PUSH
64188: LD_INT 25
64190: EQUAL
64191: IFFALSE 64212
// points := [ 80 , 65 , 100 ] ;
64193: LD_ADDR_VAR 0 9
64197: PUSH
64198: LD_INT 80
64200: PUSH
64201: LD_INT 65
64203: PUSH
64204: LD_INT 100
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: LIST
64211: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
64212: LD_VAR 0 6
64216: PPUSH
64217: CALL_OW 263
64221: PUSH
64222: LD_INT 1
64224: EQUAL
64225: IFFALSE 64260
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
64227: LD_ADDR_VAR 0 10
64231: PUSH
64232: LD_VAR 0 10
64236: PUSH
64237: LD_VAR 0 6
64241: PPUSH
64242: CALL_OW 311
64246: PPUSH
64247: LD_INT 3
64249: PPUSH
64250: CALL_OW 259
64254: PUSH
64255: LD_INT 4
64257: MUL
64258: MUL
64259: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
64260: LD_VAR 0 6
64264: PPUSH
64265: CALL_OW 263
64269: PUSH
64270: LD_INT 2
64272: EQUAL
64273: IFFALSE 64324
// begin j := IsControledBy ( i ) ;
64275: LD_ADDR_VAR 0 7
64279: PUSH
64280: LD_VAR 0 6
64284: PPUSH
64285: CALL_OW 312
64289: ST_TO_ADDR
// if j then
64290: LD_VAR 0 7
64294: IFFALSE 64324
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
64296: LD_ADDR_VAR 0 10
64300: PUSH
64301: LD_VAR 0 10
64305: PUSH
64306: LD_VAR 0 7
64310: PPUSH
64311: LD_INT 3
64313: PPUSH
64314: CALL_OW 259
64318: PUSH
64319: LD_INT 3
64321: MUL
64322: MUL
64323: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
64324: LD_VAR 0 6
64328: PPUSH
64329: CALL_OW 264
64333: PUSH
64334: LD_INT 5
64336: PUSH
64337: LD_INT 6
64339: PUSH
64340: LD_INT 46
64342: PUSH
64343: LD_INT 44
64345: PUSH
64346: LD_INT 47
64348: PUSH
64349: LD_INT 45
64351: PUSH
64352: LD_INT 28
64354: PUSH
64355: LD_INT 7
64357: PUSH
64358: LD_INT 27
64360: PUSH
64361: LD_INT 29
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: IN
64376: IFFALSE 64396
64378: PUSH
64379: LD_VAR 0 1
64383: PPUSH
64384: LD_INT 52
64386: PPUSH
64387: CALL_OW 321
64391: PUSH
64392: LD_INT 2
64394: EQUAL
64395: AND
64396: IFFALSE 64413
// bpoints := bpoints * 1.2 ;
64398: LD_ADDR_VAR 0 10
64402: PUSH
64403: LD_VAR 0 10
64407: PUSH
64408: LD_REAL  1.20000000000000E+0000
64411: MUL
64412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
64413: LD_VAR 0 6
64417: PPUSH
64418: CALL_OW 264
64422: PUSH
64423: LD_INT 6
64425: PUSH
64426: LD_INT 46
64428: PUSH
64429: LD_INT 47
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: LIST
64436: IN
64437: IFFALSE 64454
// bpoints := bpoints * 1.2 ;
64439: LD_ADDR_VAR 0 10
64443: PUSH
64444: LD_VAR 0 10
64448: PUSH
64449: LD_REAL  1.20000000000000E+0000
64452: MUL
64453: ST_TO_ADDR
// end ; unit_building :
64454: GO 64468
64456: LD_INT 3
64458: DOUBLE
64459: EQUAL
64460: IFTRUE 64464
64462: GO 64467
64464: POP
// ; end ;
64465: GO 64468
64467: POP
// for j = 1 to 3 do
64468: LD_ADDR_VAR 0 7
64472: PUSH
64473: DOUBLE
64474: LD_INT 1
64476: DEC
64477: ST_TO_ADDR
64478: LD_INT 3
64480: PUSH
64481: FOR_TO
64482: IFFALSE 64535
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
64484: LD_ADDR_VAR 0 5
64488: PUSH
64489: LD_VAR 0 5
64493: PPUSH
64494: LD_VAR 0 7
64498: PPUSH
64499: LD_VAR 0 5
64503: PUSH
64504: LD_VAR 0 7
64508: ARRAY
64509: PUSH
64510: LD_VAR 0 9
64514: PUSH
64515: LD_VAR 0 7
64519: ARRAY
64520: PUSH
64521: LD_VAR 0 10
64525: MUL
64526: PLUS
64527: PPUSH
64528: CALL_OW 1
64532: ST_TO_ADDR
64533: GO 64481
64535: POP
64536: POP
// end ;
64537: GO 63010
64539: POP
64540: POP
// result := Replace ( result , 4 , tmp ) ;
64541: LD_ADDR_VAR 0 5
64545: PUSH
64546: LD_VAR 0 5
64550: PPUSH
64551: LD_INT 4
64553: PPUSH
64554: LD_VAR 0 8
64558: PPUSH
64559: CALL_OW 1
64563: ST_TO_ADDR
// end ;
64564: LD_VAR 0 5
64568: RET
// export function DangerAtRange ( unit , range ) ; begin
64569: LD_INT 0
64571: PPUSH
// if not unit then
64572: LD_VAR 0 1
64576: NOT
64577: IFFALSE 64581
// exit ;
64579: GO 64626
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
64581: LD_ADDR_VAR 0 3
64585: PUSH
64586: LD_VAR 0 1
64590: PPUSH
64591: CALL_OW 255
64595: PPUSH
64596: LD_VAR 0 1
64600: PPUSH
64601: CALL_OW 250
64605: PPUSH
64606: LD_VAR 0 1
64610: PPUSH
64611: CALL_OW 251
64615: PPUSH
64616: LD_VAR 0 2
64620: PPUSH
64621: CALL 62860 0 4
64625: ST_TO_ADDR
// end ;
64626: LD_VAR 0 3
64630: RET
// export function DangerInArea ( side , area ) ; begin
64631: LD_INT 0
64633: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
64634: LD_ADDR_VAR 0 3
64638: PUSH
64639: LD_VAR 0 2
64643: PPUSH
64644: LD_INT 81
64646: PUSH
64647: LD_VAR 0 1
64651: PUSH
64652: EMPTY
64653: LIST
64654: LIST
64655: PPUSH
64656: CALL_OW 70
64660: ST_TO_ADDR
// end ;
64661: LD_VAR 0 3
64665: RET
// export function IsExtension ( b ) ; begin
64666: LD_INT 0
64668: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
64669: LD_ADDR_VAR 0 2
64673: PUSH
64674: LD_VAR 0 1
64678: PUSH
64679: LD_INT 23
64681: PUSH
64682: LD_INT 20
64684: PUSH
64685: LD_INT 22
64687: PUSH
64688: LD_INT 17
64690: PUSH
64691: LD_INT 24
64693: PUSH
64694: LD_INT 21
64696: PUSH
64697: LD_INT 19
64699: PUSH
64700: LD_INT 16
64702: PUSH
64703: LD_INT 25
64705: PUSH
64706: LD_INT 18
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: IN
64721: ST_TO_ADDR
// end ;
64722: LD_VAR 0 2
64726: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
64727: LD_INT 0
64729: PPUSH
64730: PPUSH
64731: PPUSH
// result := [ ] ;
64732: LD_ADDR_VAR 0 4
64736: PUSH
64737: EMPTY
64738: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
64739: LD_ADDR_VAR 0 5
64743: PUSH
64744: LD_VAR 0 2
64748: PPUSH
64749: LD_INT 21
64751: PUSH
64752: LD_INT 3
64754: PUSH
64755: EMPTY
64756: LIST
64757: LIST
64758: PPUSH
64759: CALL_OW 70
64763: ST_TO_ADDR
// if not tmp then
64764: LD_VAR 0 5
64768: NOT
64769: IFFALSE 64773
// exit ;
64771: GO 64837
// if checkLink then
64773: LD_VAR 0 3
64777: IFFALSE 64827
// begin for i in tmp do
64779: LD_ADDR_VAR 0 6
64783: PUSH
64784: LD_VAR 0 5
64788: PUSH
64789: FOR_IN
64790: IFFALSE 64825
// if GetBase ( i ) <> base then
64792: LD_VAR 0 6
64796: PPUSH
64797: CALL_OW 274
64801: PUSH
64802: LD_VAR 0 1
64806: NONEQUAL
64807: IFFALSE 64823
// ComLinkToBase ( base , i ) ;
64809: LD_VAR 0 1
64813: PPUSH
64814: LD_VAR 0 6
64818: PPUSH
64819: CALL_OW 169
64823: GO 64789
64825: POP
64826: POP
// end ; result := tmp ;
64827: LD_ADDR_VAR 0 4
64831: PUSH
64832: LD_VAR 0 5
64836: ST_TO_ADDR
// end ;
64837: LD_VAR 0 4
64841: RET
// export function ComComplete ( units , b ) ; var i ; begin
64842: LD_INT 0
64844: PPUSH
64845: PPUSH
// if not units then
64846: LD_VAR 0 1
64850: NOT
64851: IFFALSE 64855
// exit ;
64853: GO 64945
// for i in units do
64855: LD_ADDR_VAR 0 4
64859: PUSH
64860: LD_VAR 0 1
64864: PUSH
64865: FOR_IN
64866: IFFALSE 64943
// if BuildingStatus ( b ) = bs_build then
64868: LD_VAR 0 2
64872: PPUSH
64873: CALL_OW 461
64877: PUSH
64878: LD_INT 1
64880: EQUAL
64881: IFFALSE 64941
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
64883: LD_VAR 0 4
64887: PPUSH
64888: LD_STRING h
64890: PUSH
64891: LD_VAR 0 2
64895: PPUSH
64896: CALL_OW 250
64900: PUSH
64901: LD_VAR 0 2
64905: PPUSH
64906: CALL_OW 251
64910: PUSH
64911: LD_VAR 0 2
64915: PUSH
64916: LD_INT 0
64918: PUSH
64919: LD_INT 0
64921: PUSH
64922: LD_INT 0
64924: PUSH
64925: EMPTY
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: PUSH
64934: EMPTY
64935: LIST
64936: PPUSH
64937: CALL_OW 446
64941: GO 64865
64943: POP
64944: POP
// end ;
64945: LD_VAR 0 3
64949: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
64950: LD_INT 0
64952: PPUSH
64953: PPUSH
64954: PPUSH
64955: PPUSH
64956: PPUSH
64957: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
64958: LD_VAR 0 1
64962: NOT
64963: IFTRUE 64980
64965: PUSH
64966: LD_VAR 0 1
64970: PPUSH
64971: CALL_OW 263
64975: PUSH
64976: LD_INT 2
64978: NONEQUAL
64979: OR
64980: IFFALSE 64984
// exit ;
64982: GO 65300
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
64984: LD_ADDR_VAR 0 6
64988: PUSH
64989: LD_INT 22
64991: PUSH
64992: LD_VAR 0 1
64996: PPUSH
64997: CALL_OW 255
65001: PUSH
65002: EMPTY
65003: LIST
65004: LIST
65005: PUSH
65006: LD_INT 2
65008: PUSH
65009: LD_INT 30
65011: PUSH
65012: LD_INT 36
65014: PUSH
65015: EMPTY
65016: LIST
65017: LIST
65018: PUSH
65019: LD_INT 34
65021: PUSH
65022: LD_INT 31
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: EMPTY
65030: LIST
65031: LIST
65032: LIST
65033: PUSH
65034: EMPTY
65035: LIST
65036: LIST
65037: PPUSH
65038: CALL_OW 69
65042: ST_TO_ADDR
// if not tmp then
65043: LD_VAR 0 6
65047: NOT
65048: IFFALSE 65052
// exit ;
65050: GO 65300
// result := [ ] ;
65052: LD_ADDR_VAR 0 2
65056: PUSH
65057: EMPTY
65058: ST_TO_ADDR
// for i in tmp do
65059: LD_ADDR_VAR 0 3
65063: PUSH
65064: LD_VAR 0 6
65068: PUSH
65069: FOR_IN
65070: IFFALSE 65141
// begin t := UnitsInside ( i ) ;
65072: LD_ADDR_VAR 0 4
65076: PUSH
65077: LD_VAR 0 3
65081: PPUSH
65082: CALL_OW 313
65086: ST_TO_ADDR
// if t then
65087: LD_VAR 0 4
65091: IFFALSE 65139
// for j in t do
65093: LD_ADDR_VAR 0 7
65097: PUSH
65098: LD_VAR 0 4
65102: PUSH
65103: FOR_IN
65104: IFFALSE 65137
// result := Replace ( result , result + 1 , j ) ;
65106: LD_ADDR_VAR 0 2
65110: PUSH
65111: LD_VAR 0 2
65115: PPUSH
65116: LD_VAR 0 2
65120: PUSH
65121: LD_INT 1
65123: PLUS
65124: PPUSH
65125: LD_VAR 0 7
65129: PPUSH
65130: CALL_OW 1
65134: ST_TO_ADDR
65135: GO 65103
65137: POP
65138: POP
// end ;
65139: GO 65069
65141: POP
65142: POP
// if not result then
65143: LD_VAR 0 2
65147: NOT
65148: IFFALSE 65152
// exit ;
65150: GO 65300
// mech := result [ 1 ] ;
65152: LD_ADDR_VAR 0 5
65156: PUSH
65157: LD_VAR 0 2
65161: PUSH
65162: LD_INT 1
65164: ARRAY
65165: ST_TO_ADDR
// if result > 1 then
65166: LD_VAR 0 2
65170: PUSH
65171: LD_INT 1
65173: GREATER
65174: IFFALSE 65286
// begin for i = 2 to result do
65176: LD_ADDR_VAR 0 3
65180: PUSH
65181: DOUBLE
65182: LD_INT 2
65184: DEC
65185: ST_TO_ADDR
65186: LD_VAR 0 2
65190: PUSH
65191: FOR_TO
65192: IFFALSE 65284
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
65194: LD_ADDR_VAR 0 4
65198: PUSH
65199: LD_VAR 0 2
65203: PUSH
65204: LD_VAR 0 3
65208: ARRAY
65209: PPUSH
65210: LD_INT 3
65212: PPUSH
65213: CALL_OW 259
65217: PUSH
65218: LD_VAR 0 2
65222: PUSH
65223: LD_VAR 0 3
65227: ARRAY
65228: PPUSH
65229: CALL_OW 432
65233: MINUS
65234: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
65235: LD_VAR 0 4
65239: PUSH
65240: LD_VAR 0 5
65244: PPUSH
65245: LD_INT 3
65247: PPUSH
65248: CALL_OW 259
65252: PUSH
65253: LD_VAR 0 5
65257: PPUSH
65258: CALL_OW 432
65262: MINUS
65263: GREATEREQUAL
65264: IFFALSE 65282
// mech := result [ i ] ;
65266: LD_ADDR_VAR 0 5
65270: PUSH
65271: LD_VAR 0 2
65275: PUSH
65276: LD_VAR 0 3
65280: ARRAY
65281: ST_TO_ADDR
// end ;
65282: GO 65191
65284: POP
65285: POP
// end ; ComLinkTo ( vehicle , mech ) ;
65286: LD_VAR 0 1
65290: PPUSH
65291: LD_VAR 0 5
65295: PPUSH
65296: CALL_OW 135
// end ;
65300: LD_VAR 0 2
65304: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
65305: LD_INT 0
65307: PPUSH
65308: PPUSH
65309: PPUSH
65310: PPUSH
65311: PPUSH
65312: PPUSH
65313: PPUSH
65314: PPUSH
65315: PPUSH
65316: PPUSH
65317: PPUSH
65318: PPUSH
65319: PPUSH
// result := [ ] ;
65320: LD_ADDR_VAR 0 7
65324: PUSH
65325: EMPTY
65326: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
65327: LD_VAR 0 1
65331: PPUSH
65332: CALL_OW 266
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: LD_INT 1
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: IN
65347: NOT
65348: IFFALSE 65352
// exit ;
65350: GO 66992
// if name then
65352: LD_VAR 0 3
65356: IFFALSE 65372
// SetBName ( base_dep , name ) ;
65358: LD_VAR 0 1
65362: PPUSH
65363: LD_VAR 0 3
65367: PPUSH
65368: CALL_OW 500
// base := GetBase ( base_dep ) ;
65372: LD_ADDR_VAR 0 15
65376: PUSH
65377: LD_VAR 0 1
65381: PPUSH
65382: CALL_OW 274
65386: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
65387: LD_ADDR_VAR 0 16
65391: PUSH
65392: LD_VAR 0 1
65396: PPUSH
65397: CALL_OW 255
65401: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
65402: LD_ADDR_VAR 0 17
65406: PUSH
65407: LD_VAR 0 1
65411: PPUSH
65412: CALL_OW 248
65416: ST_TO_ADDR
// if sources then
65417: LD_VAR 0 5
65421: IFFALSE 65468
// for i = 1 to 3 do
65423: LD_ADDR_VAR 0 8
65427: PUSH
65428: DOUBLE
65429: LD_INT 1
65431: DEC
65432: ST_TO_ADDR
65433: LD_INT 3
65435: PUSH
65436: FOR_TO
65437: IFFALSE 65466
// AddResourceType ( base , i , sources [ i ] ) ;
65439: LD_VAR 0 15
65443: PPUSH
65444: LD_VAR 0 8
65448: PPUSH
65449: LD_VAR 0 5
65453: PUSH
65454: LD_VAR 0 8
65458: ARRAY
65459: PPUSH
65460: CALL_OW 276
65464: GO 65436
65466: POP
65467: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
65468: LD_ADDR_VAR 0 18
65472: PUSH
65473: LD_VAR 0 15
65477: PPUSH
65478: LD_VAR 0 2
65482: PPUSH
65483: LD_INT 1
65485: PPUSH
65486: CALL 64727 0 3
65490: ST_TO_ADDR
// InitHc ;
65491: CALL_OW 19
// InitUc ;
65495: CALL_OW 18
// uc_side := side ;
65499: LD_ADDR_OWVAR 20
65503: PUSH
65504: LD_VAR 0 16
65508: ST_TO_ADDR
// uc_nation := nation ;
65509: LD_ADDR_OWVAR 21
65513: PUSH
65514: LD_VAR 0 17
65518: ST_TO_ADDR
// if buildings then
65519: LD_VAR 0 18
65523: IFFALSE 66851
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
65525: LD_ADDR_VAR 0 19
65529: PUSH
65530: LD_VAR 0 18
65534: PPUSH
65535: LD_INT 2
65537: PUSH
65538: LD_INT 30
65540: PUSH
65541: LD_INT 29
65543: PUSH
65544: EMPTY
65545: LIST
65546: LIST
65547: PUSH
65548: LD_INT 30
65550: PUSH
65551: LD_INT 30
65553: PUSH
65554: EMPTY
65555: LIST
65556: LIST
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: LIST
65562: PPUSH
65563: CALL_OW 72
65567: ST_TO_ADDR
// if tmp then
65568: LD_VAR 0 19
65572: IFFALSE 65620
// for i in tmp do
65574: LD_ADDR_VAR 0 8
65578: PUSH
65579: LD_VAR 0 19
65583: PUSH
65584: FOR_IN
65585: IFFALSE 65618
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
65587: LD_VAR 0 8
65591: PPUSH
65592: CALL_OW 250
65596: PPUSH
65597: LD_VAR 0 8
65601: PPUSH
65602: CALL_OW 251
65606: PPUSH
65607: LD_VAR 0 16
65611: PPUSH
65612: CALL_OW 441
65616: GO 65584
65618: POP
65619: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
65620: LD_VAR 0 18
65624: PPUSH
65625: LD_INT 2
65627: PUSH
65628: LD_INT 30
65630: PUSH
65631: LD_INT 32
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 30
65640: PUSH
65641: LD_INT 33
65643: PUSH
65644: EMPTY
65645: LIST
65646: LIST
65647: PUSH
65648: EMPTY
65649: LIST
65650: LIST
65651: LIST
65652: PPUSH
65653: CALL_OW 72
65657: IFFALSE 65745
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
65659: LD_ADDR_VAR 0 8
65663: PUSH
65664: LD_VAR 0 18
65668: PPUSH
65669: LD_INT 2
65671: PUSH
65672: LD_INT 30
65674: PUSH
65675: LD_INT 32
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 30
65684: PUSH
65685: LD_INT 33
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: EMPTY
65693: LIST
65694: LIST
65695: LIST
65696: PPUSH
65697: CALL_OW 72
65701: PUSH
65702: FOR_IN
65703: IFFALSE 65743
// begin if not GetBWeapon ( i ) then
65705: LD_VAR 0 8
65709: PPUSH
65710: CALL_OW 269
65714: NOT
65715: IFFALSE 65741
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
65717: LD_VAR 0 8
65721: PPUSH
65722: LD_VAR 0 8
65726: PPUSH
65727: LD_VAR 0 2
65731: PPUSH
65732: CALL 66997 0 2
65736: PPUSH
65737: CALL_OW 431
// end ;
65741: GO 65702
65743: POP
65744: POP
// end ; for i = 1 to personel do
65745: LD_ADDR_VAR 0 8
65749: PUSH
65750: DOUBLE
65751: LD_INT 1
65753: DEC
65754: ST_TO_ADDR
65755: LD_VAR 0 6
65759: PUSH
65760: FOR_TO
65761: IFFALSE 66831
// begin if i > 4 then
65763: LD_VAR 0 8
65767: PUSH
65768: LD_INT 4
65770: GREATER
65771: IFFALSE 65775
// break ;
65773: GO 66831
// case i of 1 :
65775: LD_VAR 0 8
65779: PUSH
65780: LD_INT 1
65782: DOUBLE
65783: EQUAL
65784: IFTRUE 65788
65786: GO 65868
65788: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
65789: LD_ADDR_VAR 0 12
65793: PUSH
65794: LD_VAR 0 18
65798: PPUSH
65799: LD_INT 22
65801: PUSH
65802: LD_VAR 0 16
65806: PUSH
65807: EMPTY
65808: LIST
65809: LIST
65810: PUSH
65811: LD_INT 58
65813: PUSH
65814: EMPTY
65815: LIST
65816: PUSH
65817: LD_INT 2
65819: PUSH
65820: LD_INT 30
65822: PUSH
65823: LD_INT 32
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 30
65832: PUSH
65833: LD_INT 4
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 30
65842: PUSH
65843: LD_INT 5
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: LIST
65854: LIST
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: LIST
65860: PPUSH
65861: CALL_OW 72
65865: ST_TO_ADDR
65866: GO 66090
65868: LD_INT 2
65870: DOUBLE
65871: EQUAL
65872: IFTRUE 65876
65874: GO 65938
65876: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
65877: LD_ADDR_VAR 0 12
65881: PUSH
65882: LD_VAR 0 18
65886: PPUSH
65887: LD_INT 22
65889: PUSH
65890: LD_VAR 0 16
65894: PUSH
65895: EMPTY
65896: LIST
65897: LIST
65898: PUSH
65899: LD_INT 2
65901: PUSH
65902: LD_INT 30
65904: PUSH
65905: LD_INT 0
65907: PUSH
65908: EMPTY
65909: LIST
65910: LIST
65911: PUSH
65912: LD_INT 30
65914: PUSH
65915: LD_INT 1
65917: PUSH
65918: EMPTY
65919: LIST
65920: LIST
65921: PUSH
65922: EMPTY
65923: LIST
65924: LIST
65925: LIST
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PPUSH
65931: CALL_OW 72
65935: ST_TO_ADDR
65936: GO 66090
65938: LD_INT 3
65940: DOUBLE
65941: EQUAL
65942: IFTRUE 65946
65944: GO 66008
65946: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
65947: LD_ADDR_VAR 0 12
65951: PUSH
65952: LD_VAR 0 18
65956: PPUSH
65957: LD_INT 22
65959: PUSH
65960: LD_VAR 0 16
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 2
65971: PUSH
65972: LD_INT 30
65974: PUSH
65975: LD_INT 2
65977: PUSH
65978: EMPTY
65979: LIST
65980: LIST
65981: PUSH
65982: LD_INT 30
65984: PUSH
65985: LD_INT 3
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: EMPTY
65993: LIST
65994: LIST
65995: LIST
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PPUSH
66001: CALL_OW 72
66005: ST_TO_ADDR
66006: GO 66090
66008: LD_INT 4
66010: DOUBLE
66011: EQUAL
66012: IFTRUE 66016
66014: GO 66089
66016: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
66017: LD_ADDR_VAR 0 12
66021: PUSH
66022: LD_VAR 0 18
66026: PPUSH
66027: LD_INT 22
66029: PUSH
66030: LD_VAR 0 16
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 2
66041: PUSH
66042: LD_INT 30
66044: PUSH
66045: LD_INT 6
66047: PUSH
66048: EMPTY
66049: LIST
66050: LIST
66051: PUSH
66052: LD_INT 30
66054: PUSH
66055: LD_INT 7
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 30
66064: PUSH
66065: LD_INT 8
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: EMPTY
66073: LIST
66074: LIST
66075: LIST
66076: LIST
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PPUSH
66082: CALL_OW 72
66086: ST_TO_ADDR
66087: GO 66090
66089: POP
// if i = 1 then
66090: LD_VAR 0 8
66094: PUSH
66095: LD_INT 1
66097: EQUAL
66098: IFFALSE 66209
// begin tmp := [ ] ;
66100: LD_ADDR_VAR 0 19
66104: PUSH
66105: EMPTY
66106: ST_TO_ADDR
// for j in f do
66107: LD_ADDR_VAR 0 9
66111: PUSH
66112: LD_VAR 0 12
66116: PUSH
66117: FOR_IN
66118: IFFALSE 66191
// if GetBType ( j ) = b_bunker then
66120: LD_VAR 0 9
66124: PPUSH
66125: CALL_OW 266
66129: PUSH
66130: LD_INT 32
66132: EQUAL
66133: IFFALSE 66160
// tmp := Insert ( tmp , 1 , j ) else
66135: LD_ADDR_VAR 0 19
66139: PUSH
66140: LD_VAR 0 19
66144: PPUSH
66145: LD_INT 1
66147: PPUSH
66148: LD_VAR 0 9
66152: PPUSH
66153: CALL_OW 2
66157: ST_TO_ADDR
66158: GO 66189
// tmp := Insert ( tmp , tmp + 1 , j ) ;
66160: LD_ADDR_VAR 0 19
66164: PUSH
66165: LD_VAR 0 19
66169: PPUSH
66170: LD_VAR 0 19
66174: PUSH
66175: LD_INT 1
66177: PLUS
66178: PPUSH
66179: LD_VAR 0 9
66183: PPUSH
66184: CALL_OW 2
66188: ST_TO_ADDR
66189: GO 66117
66191: POP
66192: POP
// if tmp then
66193: LD_VAR 0 19
66197: IFFALSE 66209
// f := tmp ;
66199: LD_ADDR_VAR 0 12
66203: PUSH
66204: LD_VAR 0 19
66208: ST_TO_ADDR
// end ; x := personel [ i ] ;
66209: LD_ADDR_VAR 0 13
66213: PUSH
66214: LD_VAR 0 6
66218: PUSH
66219: LD_VAR 0 8
66223: ARRAY
66224: ST_TO_ADDR
// if x = - 1 then
66225: LD_VAR 0 13
66229: PUSH
66230: LD_INT 1
66232: NEG
66233: EQUAL
66234: IFFALSE 66445
// begin for j in f do
66236: LD_ADDR_VAR 0 9
66240: PUSH
66241: LD_VAR 0 12
66245: PUSH
66246: FOR_IN
66247: IFFALSE 66441
// repeat InitHc ;
66249: CALL_OW 19
// if GetBType ( j ) = b_barracks then
66253: LD_VAR 0 9
66257: PPUSH
66258: CALL_OW 266
66262: PUSH
66263: LD_INT 5
66265: EQUAL
66266: IFFALSE 66336
// begin if UnitsInside ( j ) < 3 then
66268: LD_VAR 0 9
66272: PPUSH
66273: CALL_OW 313
66277: PUSH
66278: LD_INT 3
66280: LESS
66281: IFFALSE 66317
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
66283: LD_INT 0
66285: PPUSH
66286: LD_INT 5
66288: PUSH
66289: LD_INT 8
66291: PUSH
66292: LD_INT 9
66294: PUSH
66295: EMPTY
66296: LIST
66297: LIST
66298: LIST
66299: PUSH
66300: LD_VAR 0 17
66304: ARRAY
66305: PPUSH
66306: LD_VAR 0 4
66310: PPUSH
66311: CALL_OW 380
66315: GO 66334
// PrepareHuman ( false , i , skill ) ;
66317: LD_INT 0
66319: PPUSH
66320: LD_VAR 0 8
66324: PPUSH
66325: LD_VAR 0 4
66329: PPUSH
66330: CALL_OW 380
// end else
66334: GO 66353
// PrepareHuman ( false , i , skill ) ;
66336: LD_INT 0
66338: PPUSH
66339: LD_VAR 0 8
66343: PPUSH
66344: LD_VAR 0 4
66348: PPUSH
66349: CALL_OW 380
// un := CreateHuman ;
66353: LD_ADDR_VAR 0 14
66357: PUSH
66358: CALL_OW 44
66362: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
66363: LD_ADDR_VAR 0 7
66367: PUSH
66368: LD_VAR 0 7
66372: PPUSH
66373: LD_INT 1
66375: PPUSH
66376: LD_VAR 0 14
66380: PPUSH
66381: CALL_OW 2
66385: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
66386: LD_VAR 0 14
66390: PPUSH
66391: LD_VAR 0 9
66395: PPUSH
66396: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
66400: LD_VAR 0 9
66404: PPUSH
66405: CALL_OW 313
66409: PUSH
66410: LD_INT 6
66412: EQUAL
66413: IFTRUE 66437
66415: PUSH
66416: LD_VAR 0 9
66420: PPUSH
66421: CALL_OW 266
66425: PUSH
66426: LD_INT 32
66428: PUSH
66429: LD_INT 31
66431: PUSH
66432: EMPTY
66433: LIST
66434: LIST
66435: IN
66436: OR
66437: IFFALSE 66249
66439: GO 66246
66441: POP
66442: POP
// end else
66443: GO 66829
// for j = 1 to x do
66445: LD_ADDR_VAR 0 9
66449: PUSH
66450: DOUBLE
66451: LD_INT 1
66453: DEC
66454: ST_TO_ADDR
66455: LD_VAR 0 13
66459: PUSH
66460: FOR_TO
66461: IFFALSE 66827
// begin InitHc ;
66463: CALL_OW 19
// if not f then
66467: LD_VAR 0 12
66471: NOT
66472: IFFALSE 66561
// begin PrepareHuman ( false , i , skill ) ;
66474: LD_INT 0
66476: PPUSH
66477: LD_VAR 0 8
66481: PPUSH
66482: LD_VAR 0 4
66486: PPUSH
66487: CALL_OW 380
// un := CreateHuman ;
66491: LD_ADDR_VAR 0 14
66495: PUSH
66496: CALL_OW 44
66500: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
66501: LD_ADDR_VAR 0 7
66505: PUSH
66506: LD_VAR 0 7
66510: PPUSH
66511: LD_INT 1
66513: PPUSH
66514: LD_VAR 0 14
66518: PPUSH
66519: CALL_OW 2
66523: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
66524: LD_VAR 0 14
66528: PPUSH
66529: LD_VAR 0 1
66533: PPUSH
66534: CALL_OW 250
66538: PPUSH
66539: LD_VAR 0 1
66543: PPUSH
66544: CALL_OW 251
66548: PPUSH
66549: LD_INT 10
66551: PPUSH
66552: LD_INT 0
66554: PPUSH
66555: CALL_OW 50
// continue ;
66559: GO 66460
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
66561: LD_VAR 0 12
66565: PUSH
66566: LD_INT 1
66568: ARRAY
66569: PPUSH
66570: CALL_OW 313
66574: IFFALSE 66602
66576: PUSH
66577: LD_VAR 0 12
66581: PUSH
66582: LD_INT 1
66584: ARRAY
66585: PPUSH
66586: CALL_OW 266
66590: PUSH
66591: LD_INT 32
66593: PUSH
66594: LD_INT 31
66596: PUSH
66597: EMPTY
66598: LIST
66599: LIST
66600: IN
66601: AND
66602: IFTRUE 66623
66604: PUSH
66605: LD_VAR 0 12
66609: PUSH
66610: LD_INT 1
66612: ARRAY
66613: PPUSH
66614: CALL_OW 313
66618: PUSH
66619: LD_INT 6
66621: EQUAL
66622: OR
66623: IFFALSE 66643
// f := Delete ( f , 1 ) ;
66625: LD_ADDR_VAR 0 12
66629: PUSH
66630: LD_VAR 0 12
66634: PPUSH
66635: LD_INT 1
66637: PPUSH
66638: CALL_OW 3
66642: ST_TO_ADDR
// if not f then
66643: LD_VAR 0 12
66647: NOT
66648: IFFALSE 66666
// begin x := x + 2 ;
66650: LD_ADDR_VAR 0 13
66654: PUSH
66655: LD_VAR 0 13
66659: PUSH
66660: LD_INT 2
66662: PLUS
66663: ST_TO_ADDR
// continue ;
66664: GO 66460
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
66666: LD_VAR 0 12
66670: PUSH
66671: LD_INT 1
66673: ARRAY
66674: PPUSH
66675: CALL_OW 266
66679: PUSH
66680: LD_INT 5
66682: EQUAL
66683: IFFALSE 66757
// begin if UnitsInside ( f [ 1 ] ) < 3 then
66685: LD_VAR 0 12
66689: PUSH
66690: LD_INT 1
66692: ARRAY
66693: PPUSH
66694: CALL_OW 313
66698: PUSH
66699: LD_INT 3
66701: LESS
66702: IFFALSE 66738
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
66704: LD_INT 0
66706: PPUSH
66707: LD_INT 5
66709: PUSH
66710: LD_INT 8
66712: PUSH
66713: LD_INT 9
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: LIST
66720: PUSH
66721: LD_VAR 0 17
66725: ARRAY
66726: PPUSH
66727: LD_VAR 0 4
66731: PPUSH
66732: CALL_OW 380
66736: GO 66755
// PrepareHuman ( false , i , skill ) ;
66738: LD_INT 0
66740: PPUSH
66741: LD_VAR 0 8
66745: PPUSH
66746: LD_VAR 0 4
66750: PPUSH
66751: CALL_OW 380
// end else
66755: GO 66774
// PrepareHuman ( false , i , skill ) ;
66757: LD_INT 0
66759: PPUSH
66760: LD_VAR 0 8
66764: PPUSH
66765: LD_VAR 0 4
66769: PPUSH
66770: CALL_OW 380
// un := CreateHuman ;
66774: LD_ADDR_VAR 0 14
66778: PUSH
66779: CALL_OW 44
66783: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
66784: LD_ADDR_VAR 0 7
66788: PUSH
66789: LD_VAR 0 7
66793: PPUSH
66794: LD_INT 1
66796: PPUSH
66797: LD_VAR 0 14
66801: PPUSH
66802: CALL_OW 2
66806: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
66807: LD_VAR 0 14
66811: PPUSH
66812: LD_VAR 0 12
66816: PUSH
66817: LD_INT 1
66819: ARRAY
66820: PPUSH
66821: CALL_OW 52
// end ;
66825: GO 66460
66827: POP
66828: POP
// end ;
66829: GO 65760
66831: POP
66832: POP
// result := result ^ buildings ;
66833: LD_ADDR_VAR 0 7
66837: PUSH
66838: LD_VAR 0 7
66842: PUSH
66843: LD_VAR 0 18
66847: ADD
66848: ST_TO_ADDR
// end else
66849: GO 66992
// begin for i = 1 to personel do
66851: LD_ADDR_VAR 0 8
66855: PUSH
66856: DOUBLE
66857: LD_INT 1
66859: DEC
66860: ST_TO_ADDR
66861: LD_VAR 0 6
66865: PUSH
66866: FOR_TO
66867: IFFALSE 66990
// begin if i > 4 then
66869: LD_VAR 0 8
66873: PUSH
66874: LD_INT 4
66876: GREATER
66877: IFFALSE 66881
// break ;
66879: GO 66990
// x := personel [ i ] ;
66881: LD_ADDR_VAR 0 13
66885: PUSH
66886: LD_VAR 0 6
66890: PUSH
66891: LD_VAR 0 8
66895: ARRAY
66896: ST_TO_ADDR
// if x = - 1 then
66897: LD_VAR 0 13
66901: PUSH
66902: LD_INT 1
66904: NEG
66905: EQUAL
66906: IFFALSE 66910
// continue ;
66908: GO 66866
// PrepareHuman ( false , i , skill ) ;
66910: LD_INT 0
66912: PPUSH
66913: LD_VAR 0 8
66917: PPUSH
66918: LD_VAR 0 4
66922: PPUSH
66923: CALL_OW 380
// un := CreateHuman ;
66927: LD_ADDR_VAR 0 14
66931: PUSH
66932: CALL_OW 44
66936: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
66937: LD_VAR 0 14
66941: PPUSH
66942: LD_VAR 0 1
66946: PPUSH
66947: CALL_OW 250
66951: PPUSH
66952: LD_VAR 0 1
66956: PPUSH
66957: CALL_OW 251
66961: PPUSH
66962: LD_INT 10
66964: PPUSH
66965: LD_INT 0
66967: PPUSH
66968: CALL_OW 50
// result := result ^ un ;
66972: LD_ADDR_VAR 0 7
66976: PUSH
66977: LD_VAR 0 7
66981: PUSH
66982: LD_VAR 0 14
66986: ADD
66987: ST_TO_ADDR
// end ;
66988: GO 66866
66990: POP
66991: POP
// end ; end ;
66992: LD_VAR 0 7
66996: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
66997: LD_INT 0
66999: PPUSH
67000: PPUSH
67001: PPUSH
67002: PPUSH
67003: PPUSH
67004: PPUSH
67005: PPUSH
67006: PPUSH
67007: PPUSH
67008: PPUSH
67009: PPUSH
67010: PPUSH
67011: PPUSH
67012: PPUSH
67013: PPUSH
67014: PPUSH
// result := false ;
67015: LD_ADDR_VAR 0 3
67019: PUSH
67020: LD_INT 0
67022: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
67023: LD_VAR 0 1
67027: NOT
67028: IFTRUE 67053
67030: PUSH
67031: LD_VAR 0 1
67035: PPUSH
67036: CALL_OW 266
67040: PUSH
67041: LD_INT 32
67043: PUSH
67044: LD_INT 33
67046: PUSH
67047: EMPTY
67048: LIST
67049: LIST
67050: IN
67051: NOT
67052: OR
67053: IFFALSE 67057
// exit ;
67055: GO 68192
// nat := GetNation ( tower ) ;
67057: LD_ADDR_VAR 0 12
67061: PUSH
67062: LD_VAR 0 1
67066: PPUSH
67067: CALL_OW 248
67071: ST_TO_ADDR
// side := GetSide ( tower ) ;
67072: LD_ADDR_VAR 0 16
67076: PUSH
67077: LD_VAR 0 1
67081: PPUSH
67082: CALL_OW 255
67086: ST_TO_ADDR
// x := GetX ( tower ) ;
67087: LD_ADDR_VAR 0 10
67091: PUSH
67092: LD_VAR 0 1
67096: PPUSH
67097: CALL_OW 250
67101: ST_TO_ADDR
// y := GetY ( tower ) ;
67102: LD_ADDR_VAR 0 11
67106: PUSH
67107: LD_VAR 0 1
67111: PPUSH
67112: CALL_OW 251
67116: ST_TO_ADDR
// if not x or not y then
67117: LD_VAR 0 10
67121: NOT
67122: IFTRUE 67131
67124: PUSH
67125: LD_VAR 0 11
67129: NOT
67130: OR
67131: IFFALSE 67135
// exit ;
67133: GO 68192
// weapon := 0 ;
67135: LD_ADDR_VAR 0 18
67139: PUSH
67140: LD_INT 0
67142: ST_TO_ADDR
// fac_list := [ ] ;
67143: LD_ADDR_VAR 0 17
67147: PUSH
67148: EMPTY
67149: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
67150: LD_ADDR_VAR 0 6
67154: PUSH
67155: LD_VAR 0 1
67159: PPUSH
67160: CALL_OW 274
67164: PPUSH
67165: LD_VAR 0 2
67169: PPUSH
67170: LD_INT 0
67172: PPUSH
67173: CALL 64727 0 3
67177: PPUSH
67178: LD_INT 30
67180: PUSH
67181: LD_INT 3
67183: PUSH
67184: EMPTY
67185: LIST
67186: LIST
67187: PPUSH
67188: CALL_OW 72
67192: ST_TO_ADDR
// if not factories then
67193: LD_VAR 0 6
67197: NOT
67198: IFFALSE 67202
// exit ;
67200: GO 68192
// for i in factories do
67202: LD_ADDR_VAR 0 8
67206: PUSH
67207: LD_VAR 0 6
67211: PUSH
67212: FOR_IN
67213: IFFALSE 67238
// fac_list := fac_list union AvailableWeaponList ( i ) ;
67215: LD_ADDR_VAR 0 17
67219: PUSH
67220: LD_VAR 0 17
67224: PUSH
67225: LD_VAR 0 8
67229: PPUSH
67230: CALL_OW 478
67234: UNION
67235: ST_TO_ADDR
67236: GO 67212
67238: POP
67239: POP
// if not fac_list then
67240: LD_VAR 0 17
67244: NOT
67245: IFFALSE 67249
// exit ;
67247: GO 68192
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
67249: LD_ADDR_VAR 0 5
67253: PUSH
67254: LD_INT 4
67256: PUSH
67257: LD_INT 5
67259: PUSH
67260: LD_INT 9
67262: PUSH
67263: LD_INT 10
67265: PUSH
67266: LD_INT 6
67268: PUSH
67269: LD_INT 7
67271: PUSH
67272: LD_INT 11
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 27
67286: PUSH
67287: LD_INT 28
67289: PUSH
67290: LD_INT 26
67292: PUSH
67293: LD_INT 30
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 43
67304: PUSH
67305: LD_INT 44
67307: PUSH
67308: LD_INT 46
67310: PUSH
67311: LD_INT 45
67313: PUSH
67314: LD_INT 47
67316: PUSH
67317: LD_INT 49
67319: PUSH
67320: EMPTY
67321: LIST
67322: LIST
67323: LIST
67324: LIST
67325: LIST
67326: LIST
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: LIST
67332: PUSH
67333: LD_VAR 0 12
67337: ARRAY
67338: ST_TO_ADDR
// list := list isect fac_list ;
67339: LD_ADDR_VAR 0 5
67343: PUSH
67344: LD_VAR 0 5
67348: PUSH
67349: LD_VAR 0 17
67353: ISECT
67354: ST_TO_ADDR
// if not list then
67355: LD_VAR 0 5
67359: NOT
67360: IFFALSE 67364
// exit ;
67362: GO 68192
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
67364: LD_VAR 0 12
67368: PUSH
67369: LD_INT 3
67371: EQUAL
67372: IFFALSE 67384
67374: PUSH
67375: LD_INT 49
67377: PUSH
67378: LD_VAR 0 5
67382: IN
67383: AND
67384: IFFALSE 67404
67386: PUSH
67387: LD_INT 31
67389: PPUSH
67390: LD_VAR 0 16
67394: PPUSH
67395: CALL_OW 321
67399: PUSH
67400: LD_INT 2
67402: EQUAL
67403: AND
67404: IFFALSE 67464
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
67406: LD_INT 22
67408: PUSH
67409: LD_VAR 0 16
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 35
67420: PUSH
67421: LD_INT 49
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 91
67430: PUSH
67431: LD_VAR 0 1
67435: PUSH
67436: LD_INT 10
67438: PUSH
67439: EMPTY
67440: LIST
67441: LIST
67442: LIST
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: LIST
67448: PPUSH
67449: CALL_OW 69
67453: NOT
67454: IFFALSE 67464
// weapon := ru_time_lapser ;
67456: LD_ADDR_VAR 0 18
67460: PUSH
67461: LD_INT 49
67463: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
67464: LD_VAR 0 12
67468: PUSH
67469: LD_INT 1
67471: PUSH
67472: LD_INT 2
67474: PUSH
67475: EMPTY
67476: LIST
67477: LIST
67478: IN
67479: IFFALSE 67503
67481: PUSH
67482: LD_INT 11
67484: PUSH
67485: LD_VAR 0 5
67489: IN
67490: IFTRUE 67502
67492: PUSH
67493: LD_INT 30
67495: PUSH
67496: LD_VAR 0 5
67500: IN
67501: OR
67502: AND
67503: IFFALSE 67523
67505: PUSH
67506: LD_INT 6
67508: PPUSH
67509: LD_VAR 0 16
67513: PPUSH
67514: CALL_OW 321
67518: PUSH
67519: LD_INT 2
67521: EQUAL
67522: AND
67523: IFFALSE 67690
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
67525: LD_INT 22
67527: PUSH
67528: LD_VAR 0 16
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 2
67539: PUSH
67540: LD_INT 35
67542: PUSH
67543: LD_INT 11
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 35
67552: PUSH
67553: LD_INT 30
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 91
67567: PUSH
67568: LD_VAR 0 1
67572: PUSH
67573: LD_INT 18
67575: PUSH
67576: EMPTY
67577: LIST
67578: LIST
67579: LIST
67580: PUSH
67581: EMPTY
67582: LIST
67583: LIST
67584: LIST
67585: PPUSH
67586: CALL_OW 69
67590: NOT
67591: IFFALSE 67667
67593: PUSH
67594: LD_INT 22
67596: PUSH
67597: LD_VAR 0 16
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 2
67608: PUSH
67609: LD_INT 30
67611: PUSH
67612: LD_INT 32
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 30
67621: PUSH
67622: LD_INT 33
67624: PUSH
67625: EMPTY
67626: LIST
67627: LIST
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: LIST
67633: PUSH
67634: LD_INT 91
67636: PUSH
67637: LD_VAR 0 1
67641: PUSH
67642: LD_INT 12
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: LIST
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: LIST
67654: PUSH
67655: EMPTY
67656: LIST
67657: PPUSH
67658: CALL_OW 69
67662: PUSH
67663: LD_INT 2
67665: GREATER
67666: AND
67667: IFFALSE 67690
// weapon := [ us_radar , ar_radar ] [ nat ] ;
67669: LD_ADDR_VAR 0 18
67673: PUSH
67674: LD_INT 11
67676: PUSH
67677: LD_INT 30
67679: PUSH
67680: EMPTY
67681: LIST
67682: LIST
67683: PUSH
67684: LD_VAR 0 12
67688: ARRAY
67689: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
67690: LD_VAR 0 18
67694: NOT
67695: IFFALSE 67715
67697: PUSH
67698: LD_INT 40
67700: PPUSH
67701: LD_VAR 0 16
67705: PPUSH
67706: CALL_OW 321
67710: PUSH
67711: LD_INT 2
67713: EQUAL
67714: AND
67715: IFFALSE 67751
67717: PUSH
67718: LD_INT 7
67720: PUSH
67721: LD_VAR 0 5
67725: IN
67726: IFTRUE 67738
67728: PUSH
67729: LD_INT 28
67731: PUSH
67732: LD_VAR 0 5
67736: IN
67737: OR
67738: IFTRUE 67750
67740: PUSH
67741: LD_INT 45
67743: PUSH
67744: LD_VAR 0 5
67748: IN
67749: OR
67750: AND
67751: IFFALSE 68005
// begin hex := GetHexInfo ( x , y ) ;
67753: LD_ADDR_VAR 0 4
67757: PUSH
67758: LD_VAR 0 10
67762: PPUSH
67763: LD_VAR 0 11
67767: PPUSH
67768: CALL_OW 546
67772: ST_TO_ADDR
// if hex [ 1 ] then
67773: LD_VAR 0 4
67777: PUSH
67778: LD_INT 1
67780: ARRAY
67781: IFFALSE 67785
// exit ;
67783: GO 68192
// height := hex [ 2 ] ;
67785: LD_ADDR_VAR 0 15
67789: PUSH
67790: LD_VAR 0 4
67794: PUSH
67795: LD_INT 2
67797: ARRAY
67798: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
67799: LD_ADDR_VAR 0 14
67803: PUSH
67804: LD_INT 0
67806: PUSH
67807: LD_INT 2
67809: PUSH
67810: LD_INT 3
67812: PUSH
67813: LD_INT 5
67815: PUSH
67816: EMPTY
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: ST_TO_ADDR
// for i in tmp do
67822: LD_ADDR_VAR 0 8
67826: PUSH
67827: LD_VAR 0 14
67831: PUSH
67832: FOR_IN
67833: IFFALSE 68003
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
67835: LD_ADDR_VAR 0 9
67839: PUSH
67840: LD_VAR 0 10
67844: PPUSH
67845: LD_VAR 0 8
67849: PPUSH
67850: LD_INT 5
67852: PPUSH
67853: CALL_OW 272
67857: PUSH
67858: LD_VAR 0 11
67862: PPUSH
67863: LD_VAR 0 8
67867: PPUSH
67868: LD_INT 5
67870: PPUSH
67871: CALL_OW 273
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
67880: LD_VAR 0 9
67884: PUSH
67885: LD_INT 1
67887: ARRAY
67888: PPUSH
67889: LD_VAR 0 9
67893: PUSH
67894: LD_INT 2
67896: ARRAY
67897: PPUSH
67898: CALL_OW 488
67902: IFFALSE 68001
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
67904: LD_ADDR_VAR 0 4
67908: PUSH
67909: LD_VAR 0 9
67913: PUSH
67914: LD_INT 1
67916: ARRAY
67917: PPUSH
67918: LD_VAR 0 9
67922: PUSH
67923: LD_INT 2
67925: ARRAY
67926: PPUSH
67927: CALL_OW 546
67931: ST_TO_ADDR
// if hex [ 1 ] then
67932: LD_VAR 0 4
67936: PUSH
67937: LD_INT 1
67939: ARRAY
67940: IFFALSE 67944
// continue ;
67942: GO 67832
// h := hex [ 2 ] ;
67944: LD_ADDR_VAR 0 13
67948: PUSH
67949: LD_VAR 0 4
67953: PUSH
67954: LD_INT 2
67956: ARRAY
67957: ST_TO_ADDR
// if h + 7 < height then
67958: LD_VAR 0 13
67962: PUSH
67963: LD_INT 7
67965: PLUS
67966: PUSH
67967: LD_VAR 0 15
67971: LESS
67972: IFFALSE 68001
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
67974: LD_ADDR_VAR 0 18
67978: PUSH
67979: LD_INT 7
67981: PUSH
67982: LD_INT 28
67984: PUSH
67985: LD_INT 45
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: LIST
67992: PUSH
67993: LD_VAR 0 12
67997: ARRAY
67998: ST_TO_ADDR
// break ;
67999: GO 68003
// end ; end ; end ;
68001: GO 67832
68003: POP
68004: POP
// end ; if not weapon then
68005: LD_VAR 0 18
68009: NOT
68010: IFFALSE 68070
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
68012: LD_ADDR_VAR 0 5
68016: PUSH
68017: LD_VAR 0 5
68021: PUSH
68022: LD_INT 11
68024: PUSH
68025: LD_INT 30
68027: PUSH
68028: LD_INT 49
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: LIST
68035: DIFF
68036: ST_TO_ADDR
// if not list then
68037: LD_VAR 0 5
68041: NOT
68042: IFFALSE 68046
// exit ;
68044: GO 68192
// weapon := list [ rand ( 1 , list ) ] ;
68046: LD_ADDR_VAR 0 18
68050: PUSH
68051: LD_VAR 0 5
68055: PUSH
68056: LD_INT 1
68058: PPUSH
68059: LD_VAR 0 5
68063: PPUSH
68064: CALL_OW 12
68068: ARRAY
68069: ST_TO_ADDR
// end ; if weapon then
68070: LD_VAR 0 18
68074: IFFALSE 68192
// begin tmp := CostOfWeapon ( weapon ) ;
68076: LD_ADDR_VAR 0 14
68080: PUSH
68081: LD_VAR 0 18
68085: PPUSH
68086: CALL_OW 451
68090: ST_TO_ADDR
// j := GetBase ( tower ) ;
68091: LD_ADDR_VAR 0 9
68095: PUSH
68096: LD_VAR 0 1
68100: PPUSH
68101: CALL_OW 274
68105: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
68106: LD_VAR 0 9
68110: PPUSH
68111: LD_INT 1
68113: PPUSH
68114: CALL_OW 275
68118: PUSH
68119: LD_VAR 0 14
68123: PUSH
68124: LD_INT 1
68126: ARRAY
68127: GREATEREQUAL
68128: IFFALSE 68154
68130: PUSH
68131: LD_VAR 0 9
68135: PPUSH
68136: LD_INT 2
68138: PPUSH
68139: CALL_OW 275
68143: PUSH
68144: LD_VAR 0 14
68148: PUSH
68149: LD_INT 2
68151: ARRAY
68152: GREATEREQUAL
68153: AND
68154: IFFALSE 68180
68156: PUSH
68157: LD_VAR 0 9
68161: PPUSH
68162: LD_INT 3
68164: PPUSH
68165: CALL_OW 275
68169: PUSH
68170: LD_VAR 0 14
68174: PUSH
68175: LD_INT 3
68177: ARRAY
68178: GREATEREQUAL
68179: AND
68180: IFFALSE 68192
// result := weapon ;
68182: LD_ADDR_VAR 0 3
68186: PUSH
68187: LD_VAR 0 18
68191: ST_TO_ADDR
// end ; end ;
68192: LD_VAR 0 3
68196: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
68197: LD_INT 0
68199: PPUSH
68200: PPUSH
// result := true ;
68201: LD_ADDR_VAR 0 3
68205: PUSH
68206: LD_INT 1
68208: ST_TO_ADDR
// if array1 = array2 then
68209: LD_VAR 0 1
68213: PUSH
68214: LD_VAR 0 2
68218: EQUAL
68219: IFFALSE 68279
// begin for i = 1 to array1 do
68221: LD_ADDR_VAR 0 4
68225: PUSH
68226: DOUBLE
68227: LD_INT 1
68229: DEC
68230: ST_TO_ADDR
68231: LD_VAR 0 1
68235: PUSH
68236: FOR_TO
68237: IFFALSE 68275
// if array1 [ i ] <> array2 [ i ] then
68239: LD_VAR 0 1
68243: PUSH
68244: LD_VAR 0 4
68248: ARRAY
68249: PUSH
68250: LD_VAR 0 2
68254: PUSH
68255: LD_VAR 0 4
68259: ARRAY
68260: NONEQUAL
68261: IFFALSE 68273
// begin result := false ;
68263: LD_ADDR_VAR 0 3
68267: PUSH
68268: LD_INT 0
68270: ST_TO_ADDR
// break ;
68271: GO 68275
// end ;
68273: GO 68236
68275: POP
68276: POP
// end else
68277: GO 68287
// result := false ;
68279: LD_ADDR_VAR 0 3
68283: PUSH
68284: LD_INT 0
68286: ST_TO_ADDR
// end ;
68287: LD_VAR 0 3
68291: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
68292: LD_INT 0
68294: PPUSH
68295: PPUSH
// if not array1 or not array2 then
68296: LD_VAR 0 1
68300: NOT
68301: IFTRUE 68310
68303: PUSH
68304: LD_VAR 0 2
68308: NOT
68309: OR
68310: IFFALSE 68314
// exit ;
68312: GO 68378
// result := true ;
68314: LD_ADDR_VAR 0 3
68318: PUSH
68319: LD_INT 1
68321: ST_TO_ADDR
// for i = 1 to array1 do
68322: LD_ADDR_VAR 0 4
68326: PUSH
68327: DOUBLE
68328: LD_INT 1
68330: DEC
68331: ST_TO_ADDR
68332: LD_VAR 0 1
68336: PUSH
68337: FOR_TO
68338: IFFALSE 68376
// if array1 [ i ] <> array2 [ i ] then
68340: LD_VAR 0 1
68344: PUSH
68345: LD_VAR 0 4
68349: ARRAY
68350: PUSH
68351: LD_VAR 0 2
68355: PUSH
68356: LD_VAR 0 4
68360: ARRAY
68361: NONEQUAL
68362: IFFALSE 68374
// begin result := false ;
68364: LD_ADDR_VAR 0 3
68368: PUSH
68369: LD_INT 0
68371: ST_TO_ADDR
// break ;
68372: GO 68376
// end ;
68374: GO 68337
68376: POP
68377: POP
// end ;
68378: LD_VAR 0 3
68382: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
68383: LD_INT 0
68385: PPUSH
68386: PPUSH
68387: PPUSH
// pom := GetBase ( fac ) ;
68388: LD_ADDR_VAR 0 5
68392: PUSH
68393: LD_VAR 0 1
68397: PPUSH
68398: CALL_OW 274
68402: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
68403: LD_ADDR_VAR 0 4
68407: PUSH
68408: LD_VAR 0 2
68412: PUSH
68413: LD_INT 1
68415: ARRAY
68416: PPUSH
68417: LD_VAR 0 2
68421: PUSH
68422: LD_INT 2
68424: ARRAY
68425: PPUSH
68426: LD_VAR 0 2
68430: PUSH
68431: LD_INT 3
68433: ARRAY
68434: PPUSH
68435: LD_VAR 0 2
68439: PUSH
68440: LD_INT 4
68442: ARRAY
68443: PPUSH
68444: CALL_OW 449
68448: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
68449: LD_ADDR_VAR 0 3
68453: PUSH
68454: LD_VAR 0 5
68458: PPUSH
68459: LD_INT 1
68461: PPUSH
68462: CALL_OW 275
68466: PUSH
68467: LD_VAR 0 4
68471: PUSH
68472: LD_INT 1
68474: ARRAY
68475: GREATEREQUAL
68476: IFFALSE 68502
68478: PUSH
68479: LD_VAR 0 5
68483: PPUSH
68484: LD_INT 2
68486: PPUSH
68487: CALL_OW 275
68491: PUSH
68492: LD_VAR 0 4
68496: PUSH
68497: LD_INT 2
68499: ARRAY
68500: GREATEREQUAL
68501: AND
68502: IFFALSE 68528
68504: PUSH
68505: LD_VAR 0 5
68509: PPUSH
68510: LD_INT 3
68512: PPUSH
68513: CALL_OW 275
68517: PUSH
68518: LD_VAR 0 4
68522: PUSH
68523: LD_INT 3
68525: ARRAY
68526: GREATEREQUAL
68527: AND
68528: ST_TO_ADDR
// end ;
68529: LD_VAR 0 3
68533: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
68534: LD_INT 0
68536: PPUSH
68537: PPUSH
68538: PPUSH
68539: PPUSH
// pom := GetBase ( building ) ;
68540: LD_ADDR_VAR 0 3
68544: PUSH
68545: LD_VAR 0 1
68549: PPUSH
68550: CALL_OW 274
68554: ST_TO_ADDR
// if not pom then
68555: LD_VAR 0 3
68559: NOT
68560: IFFALSE 68564
// exit ;
68562: GO 68738
// btype := GetBType ( building ) ;
68564: LD_ADDR_VAR 0 5
68568: PUSH
68569: LD_VAR 0 1
68573: PPUSH
68574: CALL_OW 266
68578: ST_TO_ADDR
// if btype = b_armoury then
68579: LD_VAR 0 5
68583: PUSH
68584: LD_INT 4
68586: EQUAL
68587: IFFALSE 68597
// btype := b_barracks ;
68589: LD_ADDR_VAR 0 5
68593: PUSH
68594: LD_INT 5
68596: ST_TO_ADDR
// if btype = b_depot then
68597: LD_VAR 0 5
68601: PUSH
68602: LD_INT 0
68604: EQUAL
68605: IFFALSE 68615
// btype := b_warehouse ;
68607: LD_ADDR_VAR 0 5
68611: PUSH
68612: LD_INT 1
68614: ST_TO_ADDR
// if btype = b_workshop then
68615: LD_VAR 0 5
68619: PUSH
68620: LD_INT 2
68622: EQUAL
68623: IFFALSE 68633
// btype := b_factory ;
68625: LD_ADDR_VAR 0 5
68629: PUSH
68630: LD_INT 3
68632: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
68633: LD_ADDR_VAR 0 4
68637: PUSH
68638: LD_VAR 0 5
68642: PPUSH
68643: LD_VAR 0 1
68647: PPUSH
68648: CALL_OW 248
68652: PPUSH
68653: CALL_OW 450
68657: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
68658: LD_ADDR_VAR 0 2
68662: PUSH
68663: LD_VAR 0 3
68667: PPUSH
68668: LD_INT 1
68670: PPUSH
68671: CALL_OW 275
68675: PUSH
68676: LD_VAR 0 4
68680: PUSH
68681: LD_INT 1
68683: ARRAY
68684: GREATEREQUAL
68685: IFFALSE 68711
68687: PUSH
68688: LD_VAR 0 3
68692: PPUSH
68693: LD_INT 2
68695: PPUSH
68696: CALL_OW 275
68700: PUSH
68701: LD_VAR 0 4
68705: PUSH
68706: LD_INT 2
68708: ARRAY
68709: GREATEREQUAL
68710: AND
68711: IFFALSE 68737
68713: PUSH
68714: LD_VAR 0 3
68718: PPUSH
68719: LD_INT 3
68721: PPUSH
68722: CALL_OW 275
68726: PUSH
68727: LD_VAR 0 4
68731: PUSH
68732: LD_INT 3
68734: ARRAY
68735: GREATEREQUAL
68736: AND
68737: ST_TO_ADDR
// end ;
68738: LD_VAR 0 2
68742: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
68743: LD_INT 0
68745: PPUSH
68746: PPUSH
68747: PPUSH
// pom := GetBase ( building ) ;
68748: LD_ADDR_VAR 0 4
68752: PUSH
68753: LD_VAR 0 1
68757: PPUSH
68758: CALL_OW 274
68762: ST_TO_ADDR
// if not pom then
68763: LD_VAR 0 4
68767: NOT
68768: IFFALSE 68772
// exit ;
68770: GO 68877
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
68772: LD_ADDR_VAR 0 5
68776: PUSH
68777: LD_VAR 0 2
68781: PPUSH
68782: LD_VAR 0 1
68786: PPUSH
68787: CALL_OW 248
68791: PPUSH
68792: CALL_OW 450
68796: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
68797: LD_ADDR_VAR 0 3
68801: PUSH
68802: LD_VAR 0 4
68806: PPUSH
68807: LD_INT 1
68809: PPUSH
68810: CALL_OW 275
68814: PUSH
68815: LD_VAR 0 5
68819: PUSH
68820: LD_INT 1
68822: ARRAY
68823: GREATEREQUAL
68824: IFFALSE 68850
68826: PUSH
68827: LD_VAR 0 4
68831: PPUSH
68832: LD_INT 2
68834: PPUSH
68835: CALL_OW 275
68839: PUSH
68840: LD_VAR 0 5
68844: PUSH
68845: LD_INT 2
68847: ARRAY
68848: GREATEREQUAL
68849: AND
68850: IFFALSE 68876
68852: PUSH
68853: LD_VAR 0 4
68857: PPUSH
68858: LD_INT 3
68860: PPUSH
68861: CALL_OW 275
68865: PUSH
68866: LD_VAR 0 5
68870: PUSH
68871: LD_INT 3
68873: ARRAY
68874: GREATEREQUAL
68875: AND
68876: ST_TO_ADDR
// end ;
68877: LD_VAR 0 3
68881: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
68882: LD_INT 0
68884: PPUSH
68885: PPUSH
68886: PPUSH
68887: PPUSH
68888: PPUSH
68889: PPUSH
68890: PPUSH
68891: PPUSH
68892: PPUSH
68893: PPUSH
68894: PPUSH
// result := false ;
68895: LD_ADDR_VAR 0 8
68899: PUSH
68900: LD_INT 0
68902: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
68903: LD_VAR 0 5
68907: NOT
68908: IFTRUE 68917
68910: PUSH
68911: LD_VAR 0 1
68915: NOT
68916: OR
68917: IFTRUE 68926
68919: PUSH
68920: LD_VAR 0 2
68924: NOT
68925: OR
68926: IFTRUE 68935
68928: PUSH
68929: LD_VAR 0 3
68933: NOT
68934: OR
68935: IFFALSE 68939
// exit ;
68937: GO 69765
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
68939: LD_ADDR_VAR 0 14
68943: PUSH
68944: LD_VAR 0 1
68948: PPUSH
68949: LD_VAR 0 2
68953: PPUSH
68954: LD_VAR 0 3
68958: PPUSH
68959: LD_VAR 0 4
68963: PPUSH
68964: LD_VAR 0 5
68968: PUSH
68969: LD_INT 1
68971: ARRAY
68972: PPUSH
68973: CALL_OW 248
68977: PPUSH
68978: LD_INT 0
68980: PPUSH
68981: CALL 71046 0 6
68985: ST_TO_ADDR
// if not hexes then
68986: LD_VAR 0 14
68990: NOT
68991: IFFALSE 68995
// exit ;
68993: GO 69765
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
68995: LD_ADDR_VAR 0 17
68999: PUSH
69000: LD_VAR 0 5
69004: PPUSH
69005: LD_INT 22
69007: PUSH
69008: LD_VAR 0 13
69012: PPUSH
69013: CALL_OW 255
69017: PUSH
69018: EMPTY
69019: LIST
69020: LIST
69021: PUSH
69022: LD_INT 2
69024: PUSH
69025: LD_INT 30
69027: PUSH
69028: LD_INT 0
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: PUSH
69035: LD_INT 30
69037: PUSH
69038: LD_INT 1
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: LIST
69049: PUSH
69050: EMPTY
69051: LIST
69052: LIST
69053: PPUSH
69054: CALL_OW 72
69058: ST_TO_ADDR
// for i = 1 to hexes do
69059: LD_ADDR_VAR 0 9
69063: PUSH
69064: DOUBLE
69065: LD_INT 1
69067: DEC
69068: ST_TO_ADDR
69069: LD_VAR 0 14
69073: PUSH
69074: FOR_TO
69075: IFFALSE 69763
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69077: LD_ADDR_VAR 0 13
69081: PUSH
69082: LD_VAR 0 14
69086: PUSH
69087: LD_VAR 0 9
69091: ARRAY
69092: PUSH
69093: LD_INT 1
69095: ARRAY
69096: PPUSH
69097: LD_VAR 0 14
69101: PUSH
69102: LD_VAR 0 9
69106: ARRAY
69107: PUSH
69108: LD_INT 2
69110: ARRAY
69111: PPUSH
69112: CALL_OW 428
69116: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
69117: LD_VAR 0 14
69121: PUSH
69122: LD_VAR 0 9
69126: ARRAY
69127: PUSH
69128: LD_INT 1
69130: ARRAY
69131: PPUSH
69132: LD_VAR 0 14
69136: PUSH
69137: LD_VAR 0 9
69141: ARRAY
69142: PUSH
69143: LD_INT 2
69145: ARRAY
69146: PPUSH
69147: CALL_OW 351
69151: IFTRUE 69190
69153: PUSH
69154: LD_VAR 0 14
69158: PUSH
69159: LD_VAR 0 9
69163: ARRAY
69164: PUSH
69165: LD_INT 1
69167: ARRAY
69168: PPUSH
69169: LD_VAR 0 14
69173: PUSH
69174: LD_VAR 0 9
69178: ARRAY
69179: PUSH
69180: LD_INT 2
69182: ARRAY
69183: PPUSH
69184: CALL_OW 488
69188: NOT
69189: OR
69190: IFTRUE 69207
69192: PUSH
69193: LD_VAR 0 13
69197: PPUSH
69198: CALL_OW 247
69202: PUSH
69203: LD_INT 3
69205: EQUAL
69206: OR
69207: IFFALSE 69213
// exit ;
69209: POP
69210: POP
69211: GO 69765
// if not tmp then
69213: LD_VAR 0 13
69217: NOT
69218: IFFALSE 69222
// continue ;
69220: GO 69074
// result := true ;
69222: LD_ADDR_VAR 0 8
69226: PUSH
69227: LD_INT 1
69229: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
69230: LD_VAR 0 6
69234: IFFALSE 69251
69236: PUSH
69237: LD_VAR 0 13
69241: PPUSH
69242: CALL_OW 247
69246: PUSH
69247: LD_INT 2
69249: EQUAL
69250: AND
69251: IFFALSE 69268
69253: PUSH
69254: LD_VAR 0 13
69258: PPUSH
69259: CALL_OW 263
69263: PUSH
69264: LD_INT 1
69266: EQUAL
69267: AND
69268: IFFALSE 69432
// begin if IsDrivenBy ( tmp ) then
69270: LD_VAR 0 13
69274: PPUSH
69275: CALL_OW 311
69279: IFFALSE 69283
// continue ;
69281: GO 69074
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
69283: LD_VAR 0 6
69287: PPUSH
69288: LD_INT 3
69290: PUSH
69291: LD_INT 60
69293: PUSH
69294: EMPTY
69295: LIST
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 3
69303: PUSH
69304: LD_INT 55
69306: PUSH
69307: EMPTY
69308: LIST
69309: PUSH
69310: EMPTY
69311: LIST
69312: LIST
69313: PUSH
69314: EMPTY
69315: LIST
69316: LIST
69317: PPUSH
69318: CALL_OW 72
69322: IFFALSE 69430
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
69324: LD_ADDR_VAR 0 18
69328: PUSH
69329: LD_VAR 0 6
69333: PPUSH
69334: LD_INT 3
69336: PUSH
69337: LD_INT 60
69339: PUSH
69340: EMPTY
69341: LIST
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 3
69349: PUSH
69350: LD_INT 55
69352: PUSH
69353: EMPTY
69354: LIST
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: EMPTY
69361: LIST
69362: LIST
69363: PPUSH
69364: CALL_OW 72
69368: PUSH
69369: LD_INT 1
69371: ARRAY
69372: ST_TO_ADDR
// if IsInUnit ( driver ) then
69373: LD_VAR 0 18
69377: PPUSH
69378: CALL_OW 310
69382: IFFALSE 69393
// ComExit ( driver ) ;
69384: LD_VAR 0 18
69388: PPUSH
69389: CALL 95036 0 1
// AddComEnterUnit ( driver , tmp ) ;
69393: LD_VAR 0 18
69397: PPUSH
69398: LD_VAR 0 13
69402: PPUSH
69403: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
69407: LD_VAR 0 18
69411: PPUSH
69412: LD_VAR 0 7
69416: PPUSH
69417: CALL_OW 173
// AddComExitVehicle ( driver ) ;
69421: LD_VAR 0 18
69425: PPUSH
69426: CALL_OW 181
// end ; continue ;
69430: GO 69074
// end ; if not cleaners or not tmp in cleaners then
69432: LD_VAR 0 6
69436: NOT
69437: IFTRUE 69452
69439: PUSH
69440: LD_VAR 0 13
69444: PUSH
69445: LD_VAR 0 6
69449: IN
69450: NOT
69451: OR
69452: IFFALSE 69761
// begin if dep then
69454: LD_VAR 0 17
69458: IFFALSE 69594
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
69460: LD_ADDR_VAR 0 16
69464: PUSH
69465: LD_VAR 0 17
69469: PUSH
69470: LD_INT 1
69472: ARRAY
69473: PPUSH
69474: CALL_OW 250
69478: PPUSH
69479: LD_VAR 0 17
69483: PUSH
69484: LD_INT 1
69486: ARRAY
69487: PPUSH
69488: CALL_OW 254
69492: PPUSH
69493: LD_INT 5
69495: PPUSH
69496: CALL_OW 272
69500: PUSH
69501: LD_VAR 0 17
69505: PUSH
69506: LD_INT 1
69508: ARRAY
69509: PPUSH
69510: CALL_OW 251
69514: PPUSH
69515: LD_VAR 0 17
69519: PUSH
69520: LD_INT 1
69522: ARRAY
69523: PPUSH
69524: CALL_OW 254
69528: PPUSH
69529: LD_INT 5
69531: PPUSH
69532: CALL_OW 273
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
69541: LD_VAR 0 16
69545: PUSH
69546: LD_INT 1
69548: ARRAY
69549: PPUSH
69550: LD_VAR 0 16
69554: PUSH
69555: LD_INT 2
69557: ARRAY
69558: PPUSH
69559: CALL_OW 488
69563: IFFALSE 69594
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
69565: LD_VAR 0 13
69569: PPUSH
69570: LD_VAR 0 16
69574: PUSH
69575: LD_INT 1
69577: ARRAY
69578: PPUSH
69579: LD_VAR 0 16
69583: PUSH
69584: LD_INT 2
69586: ARRAY
69587: PPUSH
69588: CALL_OW 111
// continue ;
69592: GO 69074
// end ; end ; r := GetDir ( tmp ) ;
69594: LD_ADDR_VAR 0 15
69598: PUSH
69599: LD_VAR 0 13
69603: PPUSH
69604: CALL_OW 254
69608: ST_TO_ADDR
// if r = 5 then
69609: LD_VAR 0 15
69613: PUSH
69614: LD_INT 5
69616: EQUAL
69617: IFFALSE 69627
// r := 0 ;
69619: LD_ADDR_VAR 0 15
69623: PUSH
69624: LD_INT 0
69626: ST_TO_ADDR
// for j = r to 5 do
69627: LD_ADDR_VAR 0 10
69631: PUSH
69632: DOUBLE
69633: LD_VAR 0 15
69637: DEC
69638: ST_TO_ADDR
69639: LD_INT 5
69641: PUSH
69642: FOR_TO
69643: IFFALSE 69759
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
69645: LD_ADDR_VAR 0 11
69649: PUSH
69650: LD_VAR 0 13
69654: PPUSH
69655: CALL_OW 250
69659: PPUSH
69660: LD_VAR 0 10
69664: PPUSH
69665: LD_INT 2
69667: PPUSH
69668: CALL_OW 272
69672: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
69673: LD_ADDR_VAR 0 12
69677: PUSH
69678: LD_VAR 0 13
69682: PPUSH
69683: CALL_OW 251
69687: PPUSH
69688: LD_VAR 0 10
69692: PPUSH
69693: LD_INT 2
69695: PPUSH
69696: CALL_OW 273
69700: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
69701: LD_VAR 0 11
69705: PPUSH
69706: LD_VAR 0 12
69710: PPUSH
69711: CALL_OW 488
69715: IFFALSE 69734
69717: PUSH
69718: LD_VAR 0 11
69722: PPUSH
69723: LD_VAR 0 12
69727: PPUSH
69728: CALL_OW 428
69732: NOT
69733: AND
69734: IFFALSE 69757
// begin ComMoveXY ( tmp , _x , _y ) ;
69736: LD_VAR 0 13
69740: PPUSH
69741: LD_VAR 0 11
69745: PPUSH
69746: LD_VAR 0 12
69750: PPUSH
69751: CALL_OW 111
// break ;
69755: GO 69759
// end ; end ;
69757: GO 69642
69759: POP
69760: POP
// end ; end ;
69761: GO 69074
69763: POP
69764: POP
// end ;
69765: LD_VAR 0 8
69769: RET
// export function BuildingTechInvented ( side , btype ) ; begin
69770: LD_INT 0
69772: PPUSH
// result := true ;
69773: LD_ADDR_VAR 0 3
69777: PUSH
69778: LD_INT 1
69780: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
69781: LD_VAR 0 2
69785: PUSH
69786: LD_INT 24
69788: DOUBLE
69789: EQUAL
69790: IFTRUE 69800
69792: LD_INT 33
69794: DOUBLE
69795: EQUAL
69796: IFTRUE 69800
69798: GO 69825
69800: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
69801: LD_ADDR_VAR 0 3
69805: PUSH
69806: LD_INT 32
69808: PPUSH
69809: LD_VAR 0 1
69813: PPUSH
69814: CALL_OW 321
69818: PUSH
69819: LD_INT 2
69821: EQUAL
69822: ST_TO_ADDR
69823: GO 70141
69825: LD_INT 20
69827: DOUBLE
69828: EQUAL
69829: IFTRUE 69833
69831: GO 69858
69833: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
69834: LD_ADDR_VAR 0 3
69838: PUSH
69839: LD_INT 6
69841: PPUSH
69842: LD_VAR 0 1
69846: PPUSH
69847: CALL_OW 321
69851: PUSH
69852: LD_INT 2
69854: EQUAL
69855: ST_TO_ADDR
69856: GO 70141
69858: LD_INT 22
69860: DOUBLE
69861: EQUAL
69862: IFTRUE 69872
69864: LD_INT 36
69866: DOUBLE
69867: EQUAL
69868: IFTRUE 69872
69870: GO 69897
69872: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
69873: LD_ADDR_VAR 0 3
69877: PUSH
69878: LD_INT 15
69880: PPUSH
69881: LD_VAR 0 1
69885: PPUSH
69886: CALL_OW 321
69890: PUSH
69891: LD_INT 2
69893: EQUAL
69894: ST_TO_ADDR
69895: GO 70141
69897: LD_INT 30
69899: DOUBLE
69900: EQUAL
69901: IFTRUE 69905
69903: GO 69930
69905: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
69906: LD_ADDR_VAR 0 3
69910: PUSH
69911: LD_INT 20
69913: PPUSH
69914: LD_VAR 0 1
69918: PPUSH
69919: CALL_OW 321
69923: PUSH
69924: LD_INT 2
69926: EQUAL
69927: ST_TO_ADDR
69928: GO 70141
69930: LD_INT 28
69932: DOUBLE
69933: EQUAL
69934: IFTRUE 69944
69936: LD_INT 21
69938: DOUBLE
69939: EQUAL
69940: IFTRUE 69944
69942: GO 69969
69944: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
69945: LD_ADDR_VAR 0 3
69949: PUSH
69950: LD_INT 21
69952: PPUSH
69953: LD_VAR 0 1
69957: PPUSH
69958: CALL_OW 321
69962: PUSH
69963: LD_INT 2
69965: EQUAL
69966: ST_TO_ADDR
69967: GO 70141
69969: LD_INT 16
69971: DOUBLE
69972: EQUAL
69973: IFTRUE 69977
69975: GO 70002
69977: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
69978: LD_ADDR_VAR 0 3
69982: PUSH
69983: LD_INT 84
69985: PPUSH
69986: LD_VAR 0 1
69990: PPUSH
69991: CALL_OW 321
69995: PUSH
69996: LD_INT 2
69998: EQUAL
69999: ST_TO_ADDR
70000: GO 70141
70002: LD_INT 19
70004: DOUBLE
70005: EQUAL
70006: IFTRUE 70016
70008: LD_INT 23
70010: DOUBLE
70011: EQUAL
70012: IFTRUE 70016
70014: GO 70041
70016: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
70017: LD_ADDR_VAR 0 3
70021: PUSH
70022: LD_INT 83
70024: PPUSH
70025: LD_VAR 0 1
70029: PPUSH
70030: CALL_OW 321
70034: PUSH
70035: LD_INT 2
70037: EQUAL
70038: ST_TO_ADDR
70039: GO 70141
70041: LD_INT 17
70043: DOUBLE
70044: EQUAL
70045: IFTRUE 70049
70047: GO 70074
70049: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
70050: LD_ADDR_VAR 0 3
70054: PUSH
70055: LD_INT 39
70057: PPUSH
70058: LD_VAR 0 1
70062: PPUSH
70063: CALL_OW 321
70067: PUSH
70068: LD_INT 2
70070: EQUAL
70071: ST_TO_ADDR
70072: GO 70141
70074: LD_INT 18
70076: DOUBLE
70077: EQUAL
70078: IFTRUE 70082
70080: GO 70107
70082: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
70083: LD_ADDR_VAR 0 3
70087: PUSH
70088: LD_INT 40
70090: PPUSH
70091: LD_VAR 0 1
70095: PPUSH
70096: CALL_OW 321
70100: PUSH
70101: LD_INT 2
70103: EQUAL
70104: ST_TO_ADDR
70105: GO 70141
70107: LD_INT 27
70109: DOUBLE
70110: EQUAL
70111: IFTRUE 70115
70113: GO 70140
70115: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
70116: LD_ADDR_VAR 0 3
70120: PUSH
70121: LD_INT 35
70123: PPUSH
70124: LD_VAR 0 1
70128: PPUSH
70129: CALL_OW 321
70133: PUSH
70134: LD_INT 2
70136: EQUAL
70137: ST_TO_ADDR
70138: GO 70141
70140: POP
// end ;
70141: LD_VAR 0 3
70145: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
70146: LD_INT 0
70148: PPUSH
70149: PPUSH
70150: PPUSH
70151: PPUSH
70152: PPUSH
70153: PPUSH
70154: PPUSH
70155: PPUSH
70156: PPUSH
70157: PPUSH
70158: PPUSH
// result := false ;
70159: LD_ADDR_VAR 0 6
70163: PUSH
70164: LD_INT 0
70166: ST_TO_ADDR
// if btype = b_depot then
70167: LD_VAR 0 2
70171: PUSH
70172: LD_INT 0
70174: EQUAL
70175: IFFALSE 70187
// begin result := true ;
70177: LD_ADDR_VAR 0 6
70181: PUSH
70182: LD_INT 1
70184: ST_TO_ADDR
// exit ;
70185: GO 71041
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
70187: LD_VAR 0 1
70191: NOT
70192: IFTRUE 70217
70194: PUSH
70195: LD_VAR 0 1
70199: PPUSH
70200: CALL_OW 266
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: LD_INT 1
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: IN
70215: NOT
70216: OR
70217: IFTRUE 70226
70219: PUSH
70220: LD_VAR 0 2
70224: NOT
70225: OR
70226: IFTRUE 70262
70228: PUSH
70229: LD_VAR 0 5
70233: PUSH
70234: LD_INT 0
70236: PUSH
70237: LD_INT 1
70239: PUSH
70240: LD_INT 2
70242: PUSH
70243: LD_INT 3
70245: PUSH
70246: LD_INT 4
70248: PUSH
70249: LD_INT 5
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: LIST
70256: LIST
70257: LIST
70258: LIST
70259: IN
70260: NOT
70261: OR
70262: IFTRUE 70281
70264: PUSH
70265: LD_VAR 0 3
70269: PPUSH
70270: LD_VAR 0 4
70274: PPUSH
70275: CALL_OW 488
70279: NOT
70280: OR
70281: IFFALSE 70285
// exit ;
70283: GO 71041
// side := GetSide ( depot ) ;
70285: LD_ADDR_VAR 0 9
70289: PUSH
70290: LD_VAR 0 1
70294: PPUSH
70295: CALL_OW 255
70299: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
70300: LD_VAR 0 9
70304: PPUSH
70305: LD_VAR 0 2
70309: PPUSH
70310: CALL 69770 0 2
70314: NOT
70315: IFFALSE 70319
// exit ;
70317: GO 71041
// pom := GetBase ( depot ) ;
70319: LD_ADDR_VAR 0 10
70323: PUSH
70324: LD_VAR 0 1
70328: PPUSH
70329: CALL_OW 274
70333: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70334: LD_ADDR_VAR 0 11
70338: PUSH
70339: LD_VAR 0 2
70343: PPUSH
70344: LD_VAR 0 1
70348: PPUSH
70349: CALL_OW 248
70353: PPUSH
70354: CALL_OW 450
70358: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
70359: LD_VAR 0 10
70363: PPUSH
70364: LD_INT 1
70366: PPUSH
70367: CALL_OW 275
70371: PUSH
70372: LD_VAR 0 11
70376: PUSH
70377: LD_INT 1
70379: ARRAY
70380: GREATEREQUAL
70381: IFFALSE 70407
70383: PUSH
70384: LD_VAR 0 10
70388: PPUSH
70389: LD_INT 2
70391: PPUSH
70392: CALL_OW 275
70396: PUSH
70397: LD_VAR 0 11
70401: PUSH
70402: LD_INT 2
70404: ARRAY
70405: GREATEREQUAL
70406: AND
70407: IFFALSE 70433
70409: PUSH
70410: LD_VAR 0 10
70414: PPUSH
70415: LD_INT 3
70417: PPUSH
70418: CALL_OW 275
70422: PUSH
70423: LD_VAR 0 11
70427: PUSH
70428: LD_INT 3
70430: ARRAY
70431: GREATEREQUAL
70432: AND
70433: NOT
70434: IFFALSE 70438
// exit ;
70436: GO 71041
// if GetBType ( depot ) = b_depot then
70438: LD_VAR 0 1
70442: PPUSH
70443: CALL_OW 266
70447: PUSH
70448: LD_INT 0
70450: EQUAL
70451: IFFALSE 70463
// dist := 28 else
70453: LD_ADDR_VAR 0 14
70457: PUSH
70458: LD_INT 28
70460: ST_TO_ADDR
70461: GO 70471
// dist := 36 ;
70463: LD_ADDR_VAR 0 14
70467: PUSH
70468: LD_INT 36
70470: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
70471: LD_VAR 0 1
70475: PPUSH
70476: LD_VAR 0 3
70480: PPUSH
70481: LD_VAR 0 4
70485: PPUSH
70486: CALL_OW 297
70490: PUSH
70491: LD_VAR 0 14
70495: GREATER
70496: IFFALSE 70500
// exit ;
70498: GO 71041
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
70500: LD_ADDR_VAR 0 12
70504: PUSH
70505: LD_VAR 0 2
70509: PPUSH
70510: LD_VAR 0 3
70514: PPUSH
70515: LD_VAR 0 4
70519: PPUSH
70520: LD_VAR 0 5
70524: PPUSH
70525: LD_VAR 0 1
70529: PPUSH
70530: CALL_OW 248
70534: PPUSH
70535: LD_INT 0
70537: PPUSH
70538: CALL 71046 0 6
70542: ST_TO_ADDR
// if not hexes then
70543: LD_VAR 0 12
70547: NOT
70548: IFFALSE 70552
// exit ;
70550: GO 71041
// hex := GetHexInfo ( x , y ) ;
70552: LD_ADDR_VAR 0 15
70556: PUSH
70557: LD_VAR 0 3
70561: PPUSH
70562: LD_VAR 0 4
70566: PPUSH
70567: CALL_OW 546
70571: ST_TO_ADDR
// if hex [ 1 ] then
70572: LD_VAR 0 15
70576: PUSH
70577: LD_INT 1
70579: ARRAY
70580: IFFALSE 70584
// exit ;
70582: GO 71041
// height := hex [ 2 ] ;
70584: LD_ADDR_VAR 0 13
70588: PUSH
70589: LD_VAR 0 15
70593: PUSH
70594: LD_INT 2
70596: ARRAY
70597: ST_TO_ADDR
// for i = 1 to hexes do
70598: LD_ADDR_VAR 0 7
70602: PUSH
70603: DOUBLE
70604: LD_INT 1
70606: DEC
70607: ST_TO_ADDR
70608: LD_VAR 0 12
70612: PUSH
70613: FOR_TO
70614: IFFALSE 70958
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
70616: LD_VAR 0 12
70620: PUSH
70621: LD_VAR 0 7
70625: ARRAY
70626: PUSH
70627: LD_INT 1
70629: ARRAY
70630: PPUSH
70631: LD_VAR 0 12
70635: PUSH
70636: LD_VAR 0 7
70640: ARRAY
70641: PUSH
70642: LD_INT 2
70644: ARRAY
70645: PPUSH
70646: CALL_OW 488
70650: NOT
70651: IFTRUE 70693
70653: PUSH
70654: LD_VAR 0 12
70658: PUSH
70659: LD_VAR 0 7
70663: ARRAY
70664: PUSH
70665: LD_INT 1
70667: ARRAY
70668: PPUSH
70669: LD_VAR 0 12
70673: PUSH
70674: LD_VAR 0 7
70678: ARRAY
70679: PUSH
70680: LD_INT 2
70682: ARRAY
70683: PPUSH
70684: CALL_OW 428
70688: PUSH
70689: LD_INT 0
70691: GREATER
70692: OR
70693: IFTRUE 70731
70695: PUSH
70696: LD_VAR 0 12
70700: PUSH
70701: LD_VAR 0 7
70705: ARRAY
70706: PUSH
70707: LD_INT 1
70709: ARRAY
70710: PPUSH
70711: LD_VAR 0 12
70715: PUSH
70716: LD_VAR 0 7
70720: ARRAY
70721: PUSH
70722: LD_INT 2
70724: ARRAY
70725: PPUSH
70726: CALL_OW 351
70730: OR
70731: IFFALSE 70737
// exit ;
70733: POP
70734: POP
70735: GO 71041
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
70737: LD_ADDR_VAR 0 8
70741: PUSH
70742: LD_VAR 0 12
70746: PUSH
70747: LD_VAR 0 7
70751: ARRAY
70752: PUSH
70753: LD_INT 1
70755: ARRAY
70756: PPUSH
70757: LD_VAR 0 12
70761: PUSH
70762: LD_VAR 0 7
70766: ARRAY
70767: PUSH
70768: LD_INT 2
70770: ARRAY
70771: PPUSH
70772: CALL_OW 546
70776: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
70777: LD_VAR 0 8
70781: PUSH
70782: LD_INT 1
70784: ARRAY
70785: IFTRUE 70807
70787: PUSH
70788: LD_VAR 0 8
70792: PUSH
70793: LD_INT 2
70795: ARRAY
70796: PUSH
70797: LD_VAR 0 13
70801: PUSH
70802: LD_INT 2
70804: PLUS
70805: GREATER
70806: OR
70807: IFTRUE 70829
70809: PUSH
70810: LD_VAR 0 8
70814: PUSH
70815: LD_INT 2
70817: ARRAY
70818: PUSH
70819: LD_VAR 0 13
70823: PUSH
70824: LD_INT 2
70826: MINUS
70827: LESS
70828: OR
70829: IFTRUE 70897
70831: PUSH
70832: LD_VAR 0 8
70836: PUSH
70837: LD_INT 3
70839: ARRAY
70840: PUSH
70841: LD_INT 0
70843: PUSH
70844: LD_INT 8
70846: PUSH
70847: LD_INT 9
70849: PUSH
70850: LD_INT 10
70852: PUSH
70853: LD_INT 11
70855: PUSH
70856: LD_INT 12
70858: PUSH
70859: LD_INT 13
70861: PUSH
70862: LD_INT 16
70864: PUSH
70865: LD_INT 17
70867: PUSH
70868: LD_INT 18
70870: PUSH
70871: LD_INT 19
70873: PUSH
70874: LD_INT 20
70876: PUSH
70877: LD_INT 21
70879: PUSH
70880: EMPTY
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: LIST
70891: LIST
70892: LIST
70893: LIST
70894: IN
70895: NOT
70896: OR
70897: IFTRUE 70910
70899: PUSH
70900: LD_VAR 0 8
70904: PUSH
70905: LD_INT 5
70907: ARRAY
70908: NOT
70909: OR
70910: IFTRUE 70950
70912: PUSH
70913: LD_VAR 0 8
70917: PUSH
70918: LD_INT 6
70920: ARRAY
70921: PUSH
70922: LD_INT 1
70924: PUSH
70925: LD_INT 2
70927: PUSH
70928: LD_INT 7
70930: PUSH
70931: LD_INT 9
70933: PUSH
70934: LD_INT 10
70936: PUSH
70937: LD_INT 11
70939: PUSH
70940: EMPTY
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: IN
70948: NOT
70949: OR
70950: IFFALSE 70956
// exit ;
70952: POP
70953: POP
70954: GO 71041
// end ;
70956: GO 70613
70958: POP
70959: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
70960: LD_VAR 0 9
70964: PPUSH
70965: LD_VAR 0 3
70969: PPUSH
70970: LD_VAR 0 4
70974: PPUSH
70975: LD_INT 20
70977: PPUSH
70978: CALL 62860 0 4
70982: PUSH
70983: LD_INT 4
70985: ARRAY
70986: IFFALSE 70990
// exit ;
70988: GO 71041
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
70990: LD_VAR 0 2
70994: PUSH
70995: LD_INT 29
70997: PUSH
70998: LD_INT 30
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: IN
71005: IFFALSE 71029
71007: PUSH
71008: LD_VAR 0 3
71012: PPUSH
71013: LD_VAR 0 4
71017: PPUSH
71018: LD_VAR 0 9
71022: PPUSH
71023: CALL_OW 440
71027: NOT
71028: AND
71029: IFFALSE 71033
// exit ;
71031: GO 71041
// result := true ;
71033: LD_ADDR_VAR 0 6
71037: PUSH
71038: LD_INT 1
71040: ST_TO_ADDR
// end ;
71041: LD_VAR 0 6
71045: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
71046: LD_INT 0
71048: PPUSH
71049: PPUSH
71050: PPUSH
71051: PPUSH
71052: PPUSH
71053: PPUSH
71054: PPUSH
71055: PPUSH
71056: PPUSH
71057: PPUSH
71058: PPUSH
71059: PPUSH
71060: PPUSH
71061: PPUSH
71062: PPUSH
71063: PPUSH
71064: PPUSH
71065: PPUSH
71066: PPUSH
71067: PPUSH
71068: PPUSH
71069: PPUSH
71070: PPUSH
71071: PPUSH
71072: PPUSH
71073: PPUSH
71074: PPUSH
71075: PPUSH
71076: PPUSH
71077: PPUSH
71078: PPUSH
71079: PPUSH
71080: PPUSH
71081: PPUSH
71082: PPUSH
71083: PPUSH
71084: PPUSH
71085: PPUSH
71086: PPUSH
71087: PPUSH
71088: PPUSH
71089: PPUSH
71090: PPUSH
71091: PPUSH
71092: PPUSH
71093: PPUSH
71094: PPUSH
71095: PPUSH
71096: PPUSH
71097: PPUSH
71098: PPUSH
71099: PPUSH
71100: PPUSH
71101: PPUSH
71102: PPUSH
71103: PPUSH
71104: PPUSH
71105: PPUSH
// result = [ ] ;
71106: LD_ADDR_VAR 0 7
71110: PUSH
71111: EMPTY
71112: ST_TO_ADDR
// temp_list = [ ] ;
71113: LD_ADDR_VAR 0 9
71117: PUSH
71118: EMPTY
71119: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
71120: LD_VAR 0 4
71124: PUSH
71125: LD_INT 0
71127: PUSH
71128: LD_INT 1
71130: PUSH
71131: LD_INT 2
71133: PUSH
71134: LD_INT 3
71136: PUSH
71137: LD_INT 4
71139: PUSH
71140: LD_INT 5
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: LIST
71147: LIST
71148: LIST
71149: LIST
71150: IN
71151: NOT
71152: IFTRUE 71195
71154: PUSH
71155: LD_VAR 0 1
71159: PUSH
71160: LD_INT 0
71162: PUSH
71163: LD_INT 1
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: IN
71170: IFFALSE 71194
71172: PUSH
71173: LD_VAR 0 5
71177: PUSH
71178: LD_INT 1
71180: PUSH
71181: LD_INT 2
71183: PUSH
71184: LD_INT 3
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: LIST
71191: IN
71192: NOT
71193: AND
71194: OR
71195: IFFALSE 71199
// exit ;
71197: GO 89598
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
71199: LD_VAR 0 1
71203: PUSH
71204: LD_INT 6
71206: PUSH
71207: LD_INT 7
71209: PUSH
71210: LD_INT 8
71212: PUSH
71213: LD_INT 13
71215: PUSH
71216: LD_INT 12
71218: PUSH
71219: LD_INT 15
71221: PUSH
71222: LD_INT 11
71224: PUSH
71225: LD_INT 14
71227: PUSH
71228: LD_INT 10
71230: PUSH
71231: EMPTY
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: IN
71242: IFFALSE 71252
// btype = b_lab ;
71244: LD_ADDR_VAR 0 1
71248: PUSH
71249: LD_INT 6
71251: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
71252: LD_VAR 0 6
71256: PUSH
71257: LD_INT 0
71259: PUSH
71260: LD_INT 1
71262: PUSH
71263: LD_INT 2
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: LIST
71270: IN
71271: NOT
71272: IFTRUE 71340
71274: PUSH
71275: LD_VAR 0 1
71279: PUSH
71280: LD_INT 0
71282: PUSH
71283: LD_INT 1
71285: PUSH
71286: LD_INT 2
71288: PUSH
71289: LD_INT 3
71291: PUSH
71292: LD_INT 6
71294: PUSH
71295: LD_INT 36
71297: PUSH
71298: LD_INT 4
71300: PUSH
71301: LD_INT 5
71303: PUSH
71304: LD_INT 31
71306: PUSH
71307: LD_INT 32
71309: PUSH
71310: LD_INT 33
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: LIST
71317: LIST
71318: LIST
71319: LIST
71320: LIST
71321: LIST
71322: LIST
71323: LIST
71324: LIST
71325: IN
71326: NOT
71327: IFFALSE 71339
71329: PUSH
71330: LD_VAR 0 6
71334: PUSH
71335: LD_INT 1
71337: EQUAL
71338: AND
71339: OR
71340: IFTRUE 71372
71342: PUSH
71343: LD_VAR 0 1
71347: PUSH
71348: LD_INT 2
71350: PUSH
71351: LD_INT 3
71353: PUSH
71354: EMPTY
71355: LIST
71356: LIST
71357: IN
71358: NOT
71359: IFFALSE 71371
71361: PUSH
71362: LD_VAR 0 6
71366: PUSH
71367: LD_INT 2
71369: EQUAL
71370: AND
71371: OR
71372: IFFALSE 71382
// mode = 0 ;
71374: LD_ADDR_VAR 0 6
71378: PUSH
71379: LD_INT 0
71381: ST_TO_ADDR
// case mode of 0 :
71382: LD_VAR 0 6
71386: PUSH
71387: LD_INT 0
71389: DOUBLE
71390: EQUAL
71391: IFTRUE 71395
71393: GO 82848
71395: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71396: LD_ADDR_VAR 0 11
71400: PUSH
71401: LD_INT 0
71403: PUSH
71404: LD_INT 0
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: LD_INT 1
71416: NEG
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 1
71424: PUSH
71425: LD_INT 0
71427: PUSH
71428: EMPTY
71429: LIST
71430: LIST
71431: PUSH
71432: LD_INT 1
71434: PUSH
71435: LD_INT 1
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 0
71444: PUSH
71445: LD_INT 1
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: LD_INT 1
71454: NEG
71455: PUSH
71456: LD_INT 0
71458: PUSH
71459: EMPTY
71460: LIST
71461: LIST
71462: PUSH
71463: LD_INT 1
71465: NEG
71466: PUSH
71467: LD_INT 1
71469: NEG
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 1
71477: NEG
71478: PUSH
71479: LD_INT 2
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 0
71489: PUSH
71490: LD_INT 2
71492: NEG
71493: PUSH
71494: EMPTY
71495: LIST
71496: LIST
71497: PUSH
71498: LD_INT 1
71500: PUSH
71501: LD_INT 1
71503: NEG
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 1
71511: PUSH
71512: LD_INT 2
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 0
71521: PUSH
71522: LD_INT 2
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 1
71531: NEG
71532: PUSH
71533: LD_INT 1
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 1
71542: PUSH
71543: LD_INT 3
71545: PUSH
71546: EMPTY
71547: LIST
71548: LIST
71549: PUSH
71550: LD_INT 0
71552: PUSH
71553: LD_INT 3
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: LD_INT 1
71562: NEG
71563: PUSH
71564: LD_INT 2
71566: PUSH
71567: EMPTY
71568: LIST
71569: LIST
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: LIST
71581: LIST
71582: LIST
71583: LIST
71584: LIST
71585: LIST
71586: LIST
71587: LIST
71588: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71589: LD_ADDR_VAR 0 12
71593: PUSH
71594: LD_INT 0
71596: PUSH
71597: LD_INT 0
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 0
71606: PUSH
71607: LD_INT 1
71609: NEG
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 1
71617: PUSH
71618: LD_INT 0
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 1
71627: PUSH
71628: LD_INT 1
71630: PUSH
71631: EMPTY
71632: LIST
71633: LIST
71634: PUSH
71635: LD_INT 0
71637: PUSH
71638: LD_INT 1
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 1
71647: NEG
71648: PUSH
71649: LD_INT 0
71651: PUSH
71652: EMPTY
71653: LIST
71654: LIST
71655: PUSH
71656: LD_INT 1
71658: NEG
71659: PUSH
71660: LD_INT 1
71662: NEG
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 1
71670: PUSH
71671: LD_INT 1
71673: NEG
71674: PUSH
71675: EMPTY
71676: LIST
71677: LIST
71678: PUSH
71679: LD_INT 2
71681: PUSH
71682: LD_INT 0
71684: PUSH
71685: EMPTY
71686: LIST
71687: LIST
71688: PUSH
71689: LD_INT 2
71691: PUSH
71692: LD_INT 1
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 1
71701: NEG
71702: PUSH
71703: LD_INT 1
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 2
71712: NEG
71713: PUSH
71714: LD_INT 0
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 2
71723: NEG
71724: PUSH
71725: LD_INT 1
71727: NEG
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 2
71735: NEG
71736: PUSH
71737: LD_INT 1
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 3
71746: NEG
71747: PUSH
71748: LD_INT 0
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 3
71757: NEG
71758: PUSH
71759: LD_INT 1
71761: NEG
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71785: LD_ADDR_VAR 0 13
71789: PUSH
71790: LD_INT 0
71792: PUSH
71793: LD_INT 0
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PUSH
71800: LD_INT 0
71802: PUSH
71803: LD_INT 1
71805: NEG
71806: PUSH
71807: EMPTY
71808: LIST
71809: LIST
71810: PUSH
71811: LD_INT 1
71813: PUSH
71814: LD_INT 0
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 1
71823: PUSH
71824: LD_INT 1
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: LD_INT 0
71833: PUSH
71834: LD_INT 1
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 1
71843: NEG
71844: PUSH
71845: LD_INT 0
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 1
71854: NEG
71855: PUSH
71856: LD_INT 1
71858: NEG
71859: PUSH
71860: EMPTY
71861: LIST
71862: LIST
71863: PUSH
71864: LD_INT 1
71866: NEG
71867: PUSH
71868: LD_INT 2
71870: NEG
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 2
71878: PUSH
71879: LD_INT 1
71881: PUSH
71882: EMPTY
71883: LIST
71884: LIST
71885: PUSH
71886: LD_INT 2
71888: PUSH
71889: LD_INT 2
71891: PUSH
71892: EMPTY
71893: LIST
71894: LIST
71895: PUSH
71896: LD_INT 1
71898: PUSH
71899: LD_INT 2
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 2
71908: NEG
71909: PUSH
71910: LD_INT 1
71912: NEG
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 2
71920: NEG
71921: PUSH
71922: LD_INT 2
71924: NEG
71925: PUSH
71926: EMPTY
71927: LIST
71928: LIST
71929: PUSH
71930: LD_INT 2
71932: NEG
71933: PUSH
71934: LD_INT 3
71936: NEG
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: LD_INT 3
71944: NEG
71945: PUSH
71946: LD_INT 2
71948: NEG
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 3
71956: NEG
71957: PUSH
71958: LD_INT 3
71960: NEG
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: EMPTY
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71984: LD_ADDR_VAR 0 14
71988: PUSH
71989: LD_INT 0
71991: PUSH
71992: LD_INT 0
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 0
72001: PUSH
72002: LD_INT 1
72004: NEG
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 1
72012: PUSH
72013: LD_INT 0
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 1
72022: PUSH
72023: LD_INT 1
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: LD_INT 1
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 1
72042: NEG
72043: PUSH
72044: LD_INT 0
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 1
72053: NEG
72054: PUSH
72055: LD_INT 1
72057: NEG
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 1
72065: NEG
72066: PUSH
72067: LD_INT 2
72069: NEG
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 0
72077: PUSH
72078: LD_INT 2
72080: NEG
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 1
72088: PUSH
72089: LD_INT 1
72091: NEG
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 1
72099: PUSH
72100: LD_INT 2
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 0
72109: PUSH
72110: LD_INT 2
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 1
72119: NEG
72120: PUSH
72121: LD_INT 1
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: LD_INT 1
72130: NEG
72131: PUSH
72132: LD_INT 3
72134: NEG
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 0
72142: PUSH
72143: LD_INT 3
72145: NEG
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 1
72153: PUSH
72154: LD_INT 2
72156: NEG
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72180: LD_ADDR_VAR 0 15
72184: PUSH
72185: LD_INT 0
72187: PUSH
72188: LD_INT 0
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 0
72197: PUSH
72198: LD_INT 1
72200: NEG
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: PUSH
72206: LD_INT 1
72208: PUSH
72209: LD_INT 0
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 1
72218: PUSH
72219: LD_INT 1
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 0
72228: PUSH
72229: LD_INT 1
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 1
72238: NEG
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: EMPTY
72244: LIST
72245: LIST
72246: PUSH
72247: LD_INT 1
72249: NEG
72250: PUSH
72251: LD_INT 1
72253: NEG
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 1
72261: PUSH
72262: LD_INT 1
72264: NEG
72265: PUSH
72266: EMPTY
72267: LIST
72268: LIST
72269: PUSH
72270: LD_INT 2
72272: PUSH
72273: LD_INT 0
72275: PUSH
72276: EMPTY
72277: LIST
72278: LIST
72279: PUSH
72280: LD_INT 2
72282: PUSH
72283: LD_INT 1
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 1
72292: NEG
72293: PUSH
72294: LD_INT 1
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: LD_INT 2
72303: NEG
72304: PUSH
72305: LD_INT 0
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: LD_INT 2
72314: NEG
72315: PUSH
72316: LD_INT 1
72318: NEG
72319: PUSH
72320: EMPTY
72321: LIST
72322: LIST
72323: PUSH
72324: LD_INT 2
72326: PUSH
72327: LD_INT 1
72329: NEG
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 3
72337: PUSH
72338: LD_INT 0
72340: PUSH
72341: EMPTY
72342: LIST
72343: LIST
72344: PUSH
72345: LD_INT 3
72347: PUSH
72348: LD_INT 1
72350: PUSH
72351: EMPTY
72352: LIST
72353: LIST
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: LIST
72367: LIST
72368: LIST
72369: LIST
72370: LIST
72371: LIST
72372: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72373: LD_ADDR_VAR 0 16
72377: PUSH
72378: LD_INT 0
72380: PUSH
72381: LD_INT 0
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 0
72390: PUSH
72391: LD_INT 1
72393: NEG
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: LD_INT 1
72401: PUSH
72402: LD_INT 0
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 1
72411: PUSH
72412: LD_INT 1
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 0
72421: PUSH
72422: LD_INT 1
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 1
72431: NEG
72432: PUSH
72433: LD_INT 0
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: LD_INT 1
72442: NEG
72443: PUSH
72444: LD_INT 1
72446: NEG
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 1
72454: NEG
72455: PUSH
72456: LD_INT 2
72458: NEG
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 2
72466: PUSH
72467: LD_INT 1
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 2
72476: PUSH
72477: LD_INT 2
72479: PUSH
72480: EMPTY
72481: LIST
72482: LIST
72483: PUSH
72484: LD_INT 1
72486: PUSH
72487: LD_INT 2
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: LD_INT 2
72496: NEG
72497: PUSH
72498: LD_INT 1
72500: NEG
72501: PUSH
72502: EMPTY
72503: LIST
72504: LIST
72505: PUSH
72506: LD_INT 2
72508: NEG
72509: PUSH
72510: LD_INT 2
72512: NEG
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 3
72520: PUSH
72521: LD_INT 2
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 3
72530: PUSH
72531: LD_INT 3
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 2
72540: PUSH
72541: LD_INT 3
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: LIST
72552: LIST
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: LIST
72559: LIST
72560: LIST
72561: LIST
72562: LIST
72563: LIST
72564: LIST
72565: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72566: LD_ADDR_VAR 0 17
72570: PUSH
72571: LD_INT 0
72573: PUSH
72574: LD_INT 0
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 0
72583: PUSH
72584: LD_INT 1
72586: NEG
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: LD_INT 1
72594: PUSH
72595: LD_INT 0
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: PUSH
72602: LD_INT 1
72604: PUSH
72605: LD_INT 1
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 0
72614: PUSH
72615: LD_INT 1
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 1
72624: NEG
72625: PUSH
72626: LD_INT 0
72628: PUSH
72629: EMPTY
72630: LIST
72631: LIST
72632: PUSH
72633: LD_INT 1
72635: NEG
72636: PUSH
72637: LD_INT 1
72639: NEG
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 1
72647: NEG
72648: PUSH
72649: LD_INT 2
72651: NEG
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 0
72659: PUSH
72660: LD_INT 2
72662: NEG
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 1
72670: PUSH
72671: LD_INT 1
72673: NEG
72674: PUSH
72675: EMPTY
72676: LIST
72677: LIST
72678: PUSH
72679: LD_INT 2
72681: PUSH
72682: LD_INT 0
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: PUSH
72689: LD_INT 2
72691: PUSH
72692: LD_INT 1
72694: PUSH
72695: EMPTY
72696: LIST
72697: LIST
72698: PUSH
72699: LD_INT 2
72701: PUSH
72702: LD_INT 2
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 1
72711: PUSH
72712: LD_INT 2
72714: PUSH
72715: EMPTY
72716: LIST
72717: LIST
72718: PUSH
72719: LD_INT 0
72721: PUSH
72722: LD_INT 2
72724: PUSH
72725: EMPTY
72726: LIST
72727: LIST
72728: PUSH
72729: LD_INT 1
72731: NEG
72732: PUSH
72733: LD_INT 1
72735: PUSH
72736: EMPTY
72737: LIST
72738: LIST
72739: PUSH
72740: LD_INT 2
72742: NEG
72743: PUSH
72744: LD_INT 0
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PUSH
72751: LD_INT 2
72753: NEG
72754: PUSH
72755: LD_INT 1
72757: NEG
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 2
72765: NEG
72766: PUSH
72767: LD_INT 2
72769: NEG
72770: PUSH
72771: EMPTY
72772: LIST
72773: LIST
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: LIST
72779: LIST
72780: LIST
72781: LIST
72782: LIST
72783: LIST
72784: LIST
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72796: LD_ADDR_VAR 0 18
72800: PUSH
72801: LD_INT 0
72803: PUSH
72804: LD_INT 0
72806: PUSH
72807: EMPTY
72808: LIST
72809: LIST
72810: PUSH
72811: LD_INT 0
72813: PUSH
72814: LD_INT 1
72816: NEG
72817: PUSH
72818: EMPTY
72819: LIST
72820: LIST
72821: PUSH
72822: LD_INT 1
72824: PUSH
72825: LD_INT 0
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: LD_INT 1
72834: PUSH
72835: LD_INT 1
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 0
72844: PUSH
72845: LD_INT 1
72847: PUSH
72848: EMPTY
72849: LIST
72850: LIST
72851: PUSH
72852: LD_INT 1
72854: NEG
72855: PUSH
72856: LD_INT 0
72858: PUSH
72859: EMPTY
72860: LIST
72861: LIST
72862: PUSH
72863: LD_INT 1
72865: NEG
72866: PUSH
72867: LD_INT 1
72869: NEG
72870: PUSH
72871: EMPTY
72872: LIST
72873: LIST
72874: PUSH
72875: LD_INT 1
72877: NEG
72878: PUSH
72879: LD_INT 2
72881: NEG
72882: PUSH
72883: EMPTY
72884: LIST
72885: LIST
72886: PUSH
72887: LD_INT 0
72889: PUSH
72890: LD_INT 2
72892: NEG
72893: PUSH
72894: EMPTY
72895: LIST
72896: LIST
72897: PUSH
72898: LD_INT 1
72900: PUSH
72901: LD_INT 1
72903: NEG
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: LD_INT 2
72911: PUSH
72912: LD_INT 0
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 2
72921: PUSH
72922: LD_INT 1
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: PUSH
72929: LD_INT 2
72931: PUSH
72932: LD_INT 2
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 1
72941: PUSH
72942: LD_INT 2
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: LD_INT 0
72951: PUSH
72952: LD_INT 2
72954: PUSH
72955: EMPTY
72956: LIST
72957: LIST
72958: PUSH
72959: LD_INT 1
72961: NEG
72962: PUSH
72963: LD_INT 1
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 2
72972: NEG
72973: PUSH
72974: LD_INT 0
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 2
72983: NEG
72984: PUSH
72985: LD_INT 1
72987: NEG
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: LD_INT 2
72995: NEG
72996: PUSH
72997: LD_INT 2
72999: NEG
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73026: LD_ADDR_VAR 0 19
73030: PUSH
73031: LD_INT 0
73033: PUSH
73034: LD_INT 0
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 0
73043: PUSH
73044: LD_INT 1
73046: NEG
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 1
73054: PUSH
73055: LD_INT 0
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PUSH
73062: LD_INT 1
73064: PUSH
73065: LD_INT 1
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_INT 0
73074: PUSH
73075: LD_INT 1
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: PUSH
73082: LD_INT 1
73084: NEG
73085: PUSH
73086: LD_INT 0
73088: PUSH
73089: EMPTY
73090: LIST
73091: LIST
73092: PUSH
73093: LD_INT 1
73095: NEG
73096: PUSH
73097: LD_INT 1
73099: NEG
73100: PUSH
73101: EMPTY
73102: LIST
73103: LIST
73104: PUSH
73105: LD_INT 1
73107: NEG
73108: PUSH
73109: LD_INT 2
73111: NEG
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 0
73119: PUSH
73120: LD_INT 2
73122: NEG
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 1
73130: PUSH
73131: LD_INT 1
73133: NEG
73134: PUSH
73135: EMPTY
73136: LIST
73137: LIST
73138: PUSH
73139: LD_INT 2
73141: PUSH
73142: LD_INT 0
73144: PUSH
73145: EMPTY
73146: LIST
73147: LIST
73148: PUSH
73149: LD_INT 2
73151: PUSH
73152: LD_INT 1
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: PUSH
73159: LD_INT 2
73161: PUSH
73162: LD_INT 2
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: LD_INT 1
73171: PUSH
73172: LD_INT 2
73174: PUSH
73175: EMPTY
73176: LIST
73177: LIST
73178: PUSH
73179: LD_INT 0
73181: PUSH
73182: LD_INT 2
73184: PUSH
73185: EMPTY
73186: LIST
73187: LIST
73188: PUSH
73189: LD_INT 1
73191: NEG
73192: PUSH
73193: LD_INT 1
73195: PUSH
73196: EMPTY
73197: LIST
73198: LIST
73199: PUSH
73200: LD_INT 2
73202: NEG
73203: PUSH
73204: LD_INT 0
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: PUSH
73211: LD_INT 2
73213: NEG
73214: PUSH
73215: LD_INT 1
73217: NEG
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 2
73225: NEG
73226: PUSH
73227: LD_INT 2
73229: NEG
73230: PUSH
73231: EMPTY
73232: LIST
73233: LIST
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: LIST
73239: LIST
73240: LIST
73241: LIST
73242: LIST
73243: LIST
73244: LIST
73245: LIST
73246: LIST
73247: LIST
73248: LIST
73249: LIST
73250: LIST
73251: LIST
73252: LIST
73253: LIST
73254: LIST
73255: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73256: LD_ADDR_VAR 0 20
73260: PUSH
73261: LD_INT 0
73263: PUSH
73264: LD_INT 0
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 0
73273: PUSH
73274: LD_INT 1
73276: NEG
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 1
73284: PUSH
73285: LD_INT 0
73287: PUSH
73288: EMPTY
73289: LIST
73290: LIST
73291: PUSH
73292: LD_INT 1
73294: PUSH
73295: LD_INT 1
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PUSH
73302: LD_INT 0
73304: PUSH
73305: LD_INT 1
73307: PUSH
73308: EMPTY
73309: LIST
73310: LIST
73311: PUSH
73312: LD_INT 1
73314: NEG
73315: PUSH
73316: LD_INT 0
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 1
73325: NEG
73326: PUSH
73327: LD_INT 1
73329: NEG
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: LD_INT 1
73337: NEG
73338: PUSH
73339: LD_INT 2
73341: NEG
73342: PUSH
73343: EMPTY
73344: LIST
73345: LIST
73346: PUSH
73347: LD_INT 0
73349: PUSH
73350: LD_INT 2
73352: NEG
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 1
73360: PUSH
73361: LD_INT 1
73363: NEG
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: LD_INT 2
73371: PUSH
73372: LD_INT 0
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: PUSH
73379: LD_INT 2
73381: PUSH
73382: LD_INT 1
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PUSH
73389: LD_INT 2
73391: PUSH
73392: LD_INT 2
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 1
73401: PUSH
73402: LD_INT 2
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PUSH
73409: LD_INT 0
73411: PUSH
73412: LD_INT 2
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: LD_INT 1
73421: NEG
73422: PUSH
73423: LD_INT 1
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PUSH
73430: LD_INT 2
73432: NEG
73433: PUSH
73434: LD_INT 0
73436: PUSH
73437: EMPTY
73438: LIST
73439: LIST
73440: PUSH
73441: LD_INT 2
73443: NEG
73444: PUSH
73445: LD_INT 1
73447: NEG
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 2
73455: NEG
73456: PUSH
73457: LD_INT 2
73459: NEG
73460: PUSH
73461: EMPTY
73462: LIST
73463: LIST
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: LIST
73479: LIST
73480: LIST
73481: LIST
73482: LIST
73483: LIST
73484: LIST
73485: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73486: LD_ADDR_VAR 0 21
73490: PUSH
73491: LD_INT 0
73493: PUSH
73494: LD_INT 0
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: PUSH
73501: LD_INT 0
73503: PUSH
73504: LD_INT 1
73506: NEG
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: LD_INT 1
73514: PUSH
73515: LD_INT 0
73517: PUSH
73518: EMPTY
73519: LIST
73520: LIST
73521: PUSH
73522: LD_INT 1
73524: PUSH
73525: LD_INT 1
73527: PUSH
73528: EMPTY
73529: LIST
73530: LIST
73531: PUSH
73532: LD_INT 0
73534: PUSH
73535: LD_INT 1
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 1
73544: NEG
73545: PUSH
73546: LD_INT 0
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PUSH
73553: LD_INT 1
73555: NEG
73556: PUSH
73557: LD_INT 1
73559: NEG
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 1
73567: NEG
73568: PUSH
73569: LD_INT 2
73571: NEG
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: PUSH
73577: LD_INT 0
73579: PUSH
73580: LD_INT 2
73582: NEG
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: LD_INT 1
73590: PUSH
73591: LD_INT 1
73593: NEG
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 2
73601: PUSH
73602: LD_INT 0
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 2
73611: PUSH
73612: LD_INT 1
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: LD_INT 2
73621: PUSH
73622: LD_INT 2
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: PUSH
73629: LD_INT 1
73631: PUSH
73632: LD_INT 2
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: PUSH
73639: LD_INT 0
73641: PUSH
73642: LD_INT 2
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: PUSH
73649: LD_INT 1
73651: NEG
73652: PUSH
73653: LD_INT 1
73655: PUSH
73656: EMPTY
73657: LIST
73658: LIST
73659: PUSH
73660: LD_INT 2
73662: NEG
73663: PUSH
73664: LD_INT 0
73666: PUSH
73667: EMPTY
73668: LIST
73669: LIST
73670: PUSH
73671: LD_INT 2
73673: NEG
73674: PUSH
73675: LD_INT 1
73677: NEG
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 2
73685: NEG
73686: PUSH
73687: LD_INT 2
73689: NEG
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: LIST
73699: LIST
73700: LIST
73701: LIST
73702: LIST
73703: LIST
73704: LIST
73705: LIST
73706: LIST
73707: LIST
73708: LIST
73709: LIST
73710: LIST
73711: LIST
73712: LIST
73713: LIST
73714: LIST
73715: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73716: LD_ADDR_VAR 0 22
73720: PUSH
73721: LD_INT 0
73723: PUSH
73724: LD_INT 0
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: PUSH
73731: LD_INT 0
73733: PUSH
73734: LD_INT 1
73736: NEG
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PUSH
73742: LD_INT 1
73744: PUSH
73745: LD_INT 0
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 1
73754: PUSH
73755: LD_INT 1
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: PUSH
73762: LD_INT 0
73764: PUSH
73765: LD_INT 1
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 1
73774: NEG
73775: PUSH
73776: LD_INT 0
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: LD_INT 1
73785: NEG
73786: PUSH
73787: LD_INT 1
73789: NEG
73790: PUSH
73791: EMPTY
73792: LIST
73793: LIST
73794: PUSH
73795: LD_INT 1
73797: NEG
73798: PUSH
73799: LD_INT 2
73801: NEG
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: LD_INT 0
73809: PUSH
73810: LD_INT 2
73812: NEG
73813: PUSH
73814: EMPTY
73815: LIST
73816: LIST
73817: PUSH
73818: LD_INT 1
73820: PUSH
73821: LD_INT 1
73823: NEG
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: PUSH
73829: LD_INT 2
73831: PUSH
73832: LD_INT 0
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: LD_INT 2
73841: PUSH
73842: LD_INT 1
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PUSH
73849: LD_INT 2
73851: PUSH
73852: LD_INT 2
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PUSH
73859: LD_INT 1
73861: PUSH
73862: LD_INT 2
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: PUSH
73869: LD_INT 0
73871: PUSH
73872: LD_INT 2
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 1
73881: NEG
73882: PUSH
73883: LD_INT 1
73885: PUSH
73886: EMPTY
73887: LIST
73888: LIST
73889: PUSH
73890: LD_INT 2
73892: NEG
73893: PUSH
73894: LD_INT 0
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: PUSH
73901: LD_INT 2
73903: NEG
73904: PUSH
73905: LD_INT 1
73907: NEG
73908: PUSH
73909: EMPTY
73910: LIST
73911: LIST
73912: PUSH
73913: LD_INT 2
73915: NEG
73916: PUSH
73917: LD_INT 2
73919: NEG
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: EMPTY
73926: LIST
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73946: LD_ADDR_VAR 0 23
73950: PUSH
73951: LD_INT 0
73953: PUSH
73954: LD_INT 0
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PUSH
73961: LD_INT 0
73963: PUSH
73964: LD_INT 1
73966: NEG
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_INT 1
73974: PUSH
73975: LD_INT 0
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: PUSH
73982: LD_INT 1
73984: PUSH
73985: LD_INT 1
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 0
73994: PUSH
73995: LD_INT 1
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: LD_INT 1
74004: NEG
74005: PUSH
74006: LD_INT 0
74008: PUSH
74009: EMPTY
74010: LIST
74011: LIST
74012: PUSH
74013: LD_INT 1
74015: NEG
74016: PUSH
74017: LD_INT 1
74019: NEG
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: PUSH
74025: LD_INT 1
74027: NEG
74028: PUSH
74029: LD_INT 2
74031: NEG
74032: PUSH
74033: EMPTY
74034: LIST
74035: LIST
74036: PUSH
74037: LD_INT 0
74039: PUSH
74040: LD_INT 2
74042: NEG
74043: PUSH
74044: EMPTY
74045: LIST
74046: LIST
74047: PUSH
74048: LD_INT 1
74050: PUSH
74051: LD_INT 1
74053: NEG
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 2
74061: PUSH
74062: LD_INT 0
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: PUSH
74069: LD_INT 2
74071: PUSH
74072: LD_INT 1
74074: PUSH
74075: EMPTY
74076: LIST
74077: LIST
74078: PUSH
74079: LD_INT 2
74081: PUSH
74082: LD_INT 2
74084: PUSH
74085: EMPTY
74086: LIST
74087: LIST
74088: PUSH
74089: LD_INT 1
74091: PUSH
74092: LD_INT 2
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: PUSH
74099: LD_INT 0
74101: PUSH
74102: LD_INT 2
74104: PUSH
74105: EMPTY
74106: LIST
74107: LIST
74108: PUSH
74109: LD_INT 1
74111: NEG
74112: PUSH
74113: LD_INT 1
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: PUSH
74120: LD_INT 2
74122: NEG
74123: PUSH
74124: LD_INT 0
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: PUSH
74131: LD_INT 2
74133: NEG
74134: PUSH
74135: LD_INT 1
74137: NEG
74138: PUSH
74139: EMPTY
74140: LIST
74141: LIST
74142: PUSH
74143: LD_INT 2
74145: NEG
74146: PUSH
74147: LD_INT 2
74149: NEG
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PUSH
74155: LD_INT 2
74157: NEG
74158: PUSH
74159: LD_INT 3
74161: NEG
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 1
74169: NEG
74170: PUSH
74171: LD_INT 3
74173: NEG
74174: PUSH
74175: EMPTY
74176: LIST
74177: LIST
74178: PUSH
74179: LD_INT 1
74181: PUSH
74182: LD_INT 2
74184: NEG
74185: PUSH
74186: EMPTY
74187: LIST
74188: LIST
74189: PUSH
74190: LD_INT 2
74192: PUSH
74193: LD_INT 1
74195: NEG
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: EMPTY
74202: LIST
74203: LIST
74204: LIST
74205: LIST
74206: LIST
74207: LIST
74208: LIST
74209: LIST
74210: LIST
74211: LIST
74212: LIST
74213: LIST
74214: LIST
74215: LIST
74216: LIST
74217: LIST
74218: LIST
74219: LIST
74220: LIST
74221: LIST
74222: LIST
74223: LIST
74224: LIST
74225: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
74226: LD_ADDR_VAR 0 24
74230: PUSH
74231: LD_INT 0
74233: PUSH
74234: LD_INT 0
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: PUSH
74241: LD_INT 0
74243: PUSH
74244: LD_INT 1
74246: NEG
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: LD_INT 1
74254: PUSH
74255: LD_INT 0
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: LD_INT 1
74264: PUSH
74265: LD_INT 1
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: PUSH
74272: LD_INT 0
74274: PUSH
74275: LD_INT 1
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: PUSH
74282: LD_INT 1
74284: NEG
74285: PUSH
74286: LD_INT 0
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: PUSH
74293: LD_INT 1
74295: NEG
74296: PUSH
74297: LD_INT 1
74299: NEG
74300: PUSH
74301: EMPTY
74302: LIST
74303: LIST
74304: PUSH
74305: LD_INT 1
74307: NEG
74308: PUSH
74309: LD_INT 2
74311: NEG
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: LD_INT 2
74322: NEG
74323: PUSH
74324: EMPTY
74325: LIST
74326: LIST
74327: PUSH
74328: LD_INT 1
74330: PUSH
74331: LD_INT 1
74333: NEG
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 2
74341: PUSH
74342: LD_INT 0
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: PUSH
74349: LD_INT 2
74351: PUSH
74352: LD_INT 1
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 2
74361: PUSH
74362: LD_INT 2
74364: PUSH
74365: EMPTY
74366: LIST
74367: LIST
74368: PUSH
74369: LD_INT 1
74371: PUSH
74372: LD_INT 2
74374: PUSH
74375: EMPTY
74376: LIST
74377: LIST
74378: PUSH
74379: LD_INT 0
74381: PUSH
74382: LD_INT 2
74384: PUSH
74385: EMPTY
74386: LIST
74387: LIST
74388: PUSH
74389: LD_INT 1
74391: NEG
74392: PUSH
74393: LD_INT 1
74395: PUSH
74396: EMPTY
74397: LIST
74398: LIST
74399: PUSH
74400: LD_INT 2
74402: NEG
74403: PUSH
74404: LD_INT 0
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PUSH
74411: LD_INT 2
74413: NEG
74414: PUSH
74415: LD_INT 1
74417: NEG
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: PUSH
74423: LD_INT 2
74425: NEG
74426: PUSH
74427: LD_INT 2
74429: NEG
74430: PUSH
74431: EMPTY
74432: LIST
74433: LIST
74434: PUSH
74435: LD_INT 1
74437: PUSH
74438: LD_INT 2
74440: NEG
74441: PUSH
74442: EMPTY
74443: LIST
74444: LIST
74445: PUSH
74446: LD_INT 2
74448: PUSH
74449: LD_INT 1
74451: NEG
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: PUSH
74457: LD_INT 3
74459: PUSH
74460: LD_INT 1
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: PUSH
74467: LD_INT 3
74469: PUSH
74470: LD_INT 2
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: LIST
74494: LIST
74495: LIST
74496: LIST
74497: LIST
74498: LIST
74499: LIST
74500: LIST
74501: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
74502: LD_ADDR_VAR 0 25
74506: PUSH
74507: LD_INT 0
74509: PUSH
74510: LD_INT 0
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 0
74519: PUSH
74520: LD_INT 1
74522: NEG
74523: PUSH
74524: EMPTY
74525: LIST
74526: LIST
74527: PUSH
74528: LD_INT 1
74530: PUSH
74531: LD_INT 0
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: LD_INT 1
74540: PUSH
74541: LD_INT 1
74543: PUSH
74544: EMPTY
74545: LIST
74546: LIST
74547: PUSH
74548: LD_INT 0
74550: PUSH
74551: LD_INT 1
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PUSH
74558: LD_INT 1
74560: NEG
74561: PUSH
74562: LD_INT 0
74564: PUSH
74565: EMPTY
74566: LIST
74567: LIST
74568: PUSH
74569: LD_INT 1
74571: NEG
74572: PUSH
74573: LD_INT 1
74575: NEG
74576: PUSH
74577: EMPTY
74578: LIST
74579: LIST
74580: PUSH
74581: LD_INT 1
74583: NEG
74584: PUSH
74585: LD_INT 2
74587: NEG
74588: PUSH
74589: EMPTY
74590: LIST
74591: LIST
74592: PUSH
74593: LD_INT 0
74595: PUSH
74596: LD_INT 2
74598: NEG
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: PUSH
74604: LD_INT 1
74606: PUSH
74607: LD_INT 1
74609: NEG
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: PUSH
74615: LD_INT 2
74617: PUSH
74618: LD_INT 0
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: PUSH
74625: LD_INT 2
74627: PUSH
74628: LD_INT 1
74630: PUSH
74631: EMPTY
74632: LIST
74633: LIST
74634: PUSH
74635: LD_INT 2
74637: PUSH
74638: LD_INT 2
74640: PUSH
74641: EMPTY
74642: LIST
74643: LIST
74644: PUSH
74645: LD_INT 1
74647: PUSH
74648: LD_INT 2
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: PUSH
74655: LD_INT 0
74657: PUSH
74658: LD_INT 2
74660: PUSH
74661: EMPTY
74662: LIST
74663: LIST
74664: PUSH
74665: LD_INT 1
74667: NEG
74668: PUSH
74669: LD_INT 1
74671: PUSH
74672: EMPTY
74673: LIST
74674: LIST
74675: PUSH
74676: LD_INT 2
74678: NEG
74679: PUSH
74680: LD_INT 0
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: PUSH
74687: LD_INT 2
74689: NEG
74690: PUSH
74691: LD_INT 1
74693: NEG
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: LD_INT 2
74701: NEG
74702: PUSH
74703: LD_INT 2
74705: NEG
74706: PUSH
74707: EMPTY
74708: LIST
74709: LIST
74710: PUSH
74711: LD_INT 3
74713: PUSH
74714: LD_INT 1
74716: PUSH
74717: EMPTY
74718: LIST
74719: LIST
74720: PUSH
74721: LD_INT 3
74723: PUSH
74724: LD_INT 2
74726: PUSH
74727: EMPTY
74728: LIST
74729: LIST
74730: PUSH
74731: LD_INT 2
74733: PUSH
74734: LD_INT 3
74736: PUSH
74737: EMPTY
74738: LIST
74739: LIST
74740: PUSH
74741: LD_INT 1
74743: PUSH
74744: LD_INT 3
74746: PUSH
74747: EMPTY
74748: LIST
74749: LIST
74750: PUSH
74751: EMPTY
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: LIST
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: LIST
74775: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
74776: LD_ADDR_VAR 0 26
74780: PUSH
74781: LD_INT 0
74783: PUSH
74784: LD_INT 0
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: PUSH
74791: LD_INT 0
74793: PUSH
74794: LD_INT 1
74796: NEG
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: PUSH
74802: LD_INT 1
74804: PUSH
74805: LD_INT 0
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: PUSH
74812: LD_INT 1
74814: PUSH
74815: LD_INT 1
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: PUSH
74822: LD_INT 0
74824: PUSH
74825: LD_INT 1
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: PUSH
74832: LD_INT 1
74834: NEG
74835: PUSH
74836: LD_INT 0
74838: PUSH
74839: EMPTY
74840: LIST
74841: LIST
74842: PUSH
74843: LD_INT 1
74845: NEG
74846: PUSH
74847: LD_INT 1
74849: NEG
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: PUSH
74855: LD_INT 1
74857: NEG
74858: PUSH
74859: LD_INT 2
74861: NEG
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: PUSH
74867: LD_INT 0
74869: PUSH
74870: LD_INT 2
74872: NEG
74873: PUSH
74874: EMPTY
74875: LIST
74876: LIST
74877: PUSH
74878: LD_INT 1
74880: PUSH
74881: LD_INT 1
74883: NEG
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: PUSH
74889: LD_INT 2
74891: PUSH
74892: LD_INT 0
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: PUSH
74899: LD_INT 2
74901: PUSH
74902: LD_INT 1
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: PUSH
74909: LD_INT 2
74911: PUSH
74912: LD_INT 2
74914: PUSH
74915: EMPTY
74916: LIST
74917: LIST
74918: PUSH
74919: LD_INT 1
74921: PUSH
74922: LD_INT 2
74924: PUSH
74925: EMPTY
74926: LIST
74927: LIST
74928: PUSH
74929: LD_INT 0
74931: PUSH
74932: LD_INT 2
74934: PUSH
74935: EMPTY
74936: LIST
74937: LIST
74938: PUSH
74939: LD_INT 1
74941: NEG
74942: PUSH
74943: LD_INT 1
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PUSH
74950: LD_INT 2
74952: NEG
74953: PUSH
74954: LD_INT 0
74956: PUSH
74957: EMPTY
74958: LIST
74959: LIST
74960: PUSH
74961: LD_INT 2
74963: NEG
74964: PUSH
74965: LD_INT 1
74967: NEG
74968: PUSH
74969: EMPTY
74970: LIST
74971: LIST
74972: PUSH
74973: LD_INT 2
74975: NEG
74976: PUSH
74977: LD_INT 2
74979: NEG
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: LD_INT 2
74987: PUSH
74988: LD_INT 3
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 1
74997: PUSH
74998: LD_INT 3
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: LD_INT 1
75007: NEG
75008: PUSH
75009: LD_INT 2
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: PUSH
75016: LD_INT 2
75018: NEG
75019: PUSH
75020: LD_INT 1
75022: PUSH
75023: EMPTY
75024: LIST
75025: LIST
75026: PUSH
75027: EMPTY
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: LIST
75049: LIST
75050: LIST
75051: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
75052: LD_ADDR_VAR 0 27
75056: PUSH
75057: LD_INT 0
75059: PUSH
75060: LD_INT 0
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: LD_INT 0
75069: PUSH
75070: LD_INT 1
75072: NEG
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PUSH
75078: LD_INT 1
75080: PUSH
75081: LD_INT 0
75083: PUSH
75084: EMPTY
75085: LIST
75086: LIST
75087: PUSH
75088: LD_INT 1
75090: PUSH
75091: LD_INT 1
75093: PUSH
75094: EMPTY
75095: LIST
75096: LIST
75097: PUSH
75098: LD_INT 0
75100: PUSH
75101: LD_INT 1
75103: PUSH
75104: EMPTY
75105: LIST
75106: LIST
75107: PUSH
75108: LD_INT 1
75110: NEG
75111: PUSH
75112: LD_INT 0
75114: PUSH
75115: EMPTY
75116: LIST
75117: LIST
75118: PUSH
75119: LD_INT 1
75121: NEG
75122: PUSH
75123: LD_INT 1
75125: NEG
75126: PUSH
75127: EMPTY
75128: LIST
75129: LIST
75130: PUSH
75131: LD_INT 1
75133: NEG
75134: PUSH
75135: LD_INT 2
75137: NEG
75138: PUSH
75139: EMPTY
75140: LIST
75141: LIST
75142: PUSH
75143: LD_INT 0
75145: PUSH
75146: LD_INT 2
75148: NEG
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PUSH
75154: LD_INT 1
75156: PUSH
75157: LD_INT 1
75159: NEG
75160: PUSH
75161: EMPTY
75162: LIST
75163: LIST
75164: PUSH
75165: LD_INT 2
75167: PUSH
75168: LD_INT 0
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 2
75177: PUSH
75178: LD_INT 1
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: LD_INT 2
75187: PUSH
75188: LD_INT 2
75190: PUSH
75191: EMPTY
75192: LIST
75193: LIST
75194: PUSH
75195: LD_INT 1
75197: PUSH
75198: LD_INT 2
75200: PUSH
75201: EMPTY
75202: LIST
75203: LIST
75204: PUSH
75205: LD_INT 0
75207: PUSH
75208: LD_INT 2
75210: PUSH
75211: EMPTY
75212: LIST
75213: LIST
75214: PUSH
75215: LD_INT 1
75217: NEG
75218: PUSH
75219: LD_INT 1
75221: PUSH
75222: EMPTY
75223: LIST
75224: LIST
75225: PUSH
75226: LD_INT 2
75228: NEG
75229: PUSH
75230: LD_INT 0
75232: PUSH
75233: EMPTY
75234: LIST
75235: LIST
75236: PUSH
75237: LD_INT 2
75239: NEG
75240: PUSH
75241: LD_INT 1
75243: NEG
75244: PUSH
75245: EMPTY
75246: LIST
75247: LIST
75248: PUSH
75249: LD_INT 2
75251: NEG
75252: PUSH
75253: LD_INT 2
75255: NEG
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PUSH
75261: LD_INT 1
75263: NEG
75264: PUSH
75265: LD_INT 2
75267: PUSH
75268: EMPTY
75269: LIST
75270: LIST
75271: PUSH
75272: LD_INT 2
75274: NEG
75275: PUSH
75276: LD_INT 1
75278: PUSH
75279: EMPTY
75280: LIST
75281: LIST
75282: PUSH
75283: LD_INT 3
75285: NEG
75286: PUSH
75287: LD_INT 1
75289: NEG
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 3
75297: NEG
75298: PUSH
75299: LD_INT 2
75301: NEG
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: EMPTY
75308: LIST
75309: LIST
75310: LIST
75311: LIST
75312: LIST
75313: LIST
75314: LIST
75315: LIST
75316: LIST
75317: LIST
75318: LIST
75319: LIST
75320: LIST
75321: LIST
75322: LIST
75323: LIST
75324: LIST
75325: LIST
75326: LIST
75327: LIST
75328: LIST
75329: LIST
75330: LIST
75331: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
75332: LD_ADDR_VAR 0 28
75336: PUSH
75337: LD_INT 0
75339: PUSH
75340: LD_INT 0
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: PUSH
75347: LD_INT 0
75349: PUSH
75350: LD_INT 1
75352: NEG
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: LD_INT 1
75360: PUSH
75361: LD_INT 0
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: PUSH
75368: LD_INT 1
75370: PUSH
75371: LD_INT 1
75373: PUSH
75374: EMPTY
75375: LIST
75376: LIST
75377: PUSH
75378: LD_INT 0
75380: PUSH
75381: LD_INT 1
75383: PUSH
75384: EMPTY
75385: LIST
75386: LIST
75387: PUSH
75388: LD_INT 1
75390: NEG
75391: PUSH
75392: LD_INT 0
75394: PUSH
75395: EMPTY
75396: LIST
75397: LIST
75398: PUSH
75399: LD_INT 1
75401: NEG
75402: PUSH
75403: LD_INT 1
75405: NEG
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: LD_INT 1
75413: NEG
75414: PUSH
75415: LD_INT 2
75417: NEG
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: PUSH
75423: LD_INT 0
75425: PUSH
75426: LD_INT 2
75428: NEG
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PUSH
75434: LD_INT 1
75436: PUSH
75437: LD_INT 1
75439: NEG
75440: PUSH
75441: EMPTY
75442: LIST
75443: LIST
75444: PUSH
75445: LD_INT 2
75447: PUSH
75448: LD_INT 0
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PUSH
75455: LD_INT 2
75457: PUSH
75458: LD_INT 1
75460: PUSH
75461: EMPTY
75462: LIST
75463: LIST
75464: PUSH
75465: LD_INT 2
75467: PUSH
75468: LD_INT 2
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: PUSH
75475: LD_INT 1
75477: PUSH
75478: LD_INT 2
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: LD_INT 0
75487: PUSH
75488: LD_INT 2
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 1
75497: NEG
75498: PUSH
75499: LD_INT 1
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: PUSH
75506: LD_INT 2
75508: NEG
75509: PUSH
75510: LD_INT 0
75512: PUSH
75513: EMPTY
75514: LIST
75515: LIST
75516: PUSH
75517: LD_INT 2
75519: NEG
75520: PUSH
75521: LD_INT 1
75523: NEG
75524: PUSH
75525: EMPTY
75526: LIST
75527: LIST
75528: PUSH
75529: LD_INT 2
75531: NEG
75532: PUSH
75533: LD_INT 2
75535: NEG
75536: PUSH
75537: EMPTY
75538: LIST
75539: LIST
75540: PUSH
75541: LD_INT 2
75543: NEG
75544: PUSH
75545: LD_INT 3
75547: NEG
75548: PUSH
75549: EMPTY
75550: LIST
75551: LIST
75552: PUSH
75553: LD_INT 1
75555: NEG
75556: PUSH
75557: LD_INT 3
75559: NEG
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: PUSH
75565: LD_INT 3
75567: NEG
75568: PUSH
75569: LD_INT 1
75571: NEG
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: LD_INT 3
75579: NEG
75580: PUSH
75581: LD_INT 2
75583: NEG
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: LIST
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
75614: LD_ADDR_VAR 0 29
75618: PUSH
75619: LD_INT 0
75621: PUSH
75622: LD_INT 0
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: PUSH
75629: LD_INT 0
75631: PUSH
75632: LD_INT 1
75634: NEG
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: PUSH
75640: LD_INT 1
75642: PUSH
75643: LD_INT 0
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: LD_INT 1
75652: PUSH
75653: LD_INT 1
75655: PUSH
75656: EMPTY
75657: LIST
75658: LIST
75659: PUSH
75660: LD_INT 0
75662: PUSH
75663: LD_INT 1
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: LD_INT 1
75672: NEG
75673: PUSH
75674: LD_INT 0
75676: PUSH
75677: EMPTY
75678: LIST
75679: LIST
75680: PUSH
75681: LD_INT 1
75683: NEG
75684: PUSH
75685: LD_INT 1
75687: NEG
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: PUSH
75693: LD_INT 1
75695: NEG
75696: PUSH
75697: LD_INT 2
75699: NEG
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: PUSH
75705: LD_INT 0
75707: PUSH
75708: LD_INT 2
75710: NEG
75711: PUSH
75712: EMPTY
75713: LIST
75714: LIST
75715: PUSH
75716: LD_INT 1
75718: PUSH
75719: LD_INT 1
75721: NEG
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: PUSH
75727: LD_INT 2
75729: PUSH
75730: LD_INT 0
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: PUSH
75737: LD_INT 2
75739: PUSH
75740: LD_INT 1
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: PUSH
75747: LD_INT 1
75749: PUSH
75750: LD_INT 2
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: PUSH
75757: LD_INT 0
75759: PUSH
75760: LD_INT 2
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: LD_INT 1
75769: NEG
75770: PUSH
75771: LD_INT 1
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: PUSH
75778: LD_INT 2
75780: NEG
75781: PUSH
75782: LD_INT 1
75784: NEG
75785: PUSH
75786: EMPTY
75787: LIST
75788: LIST
75789: PUSH
75790: LD_INT 2
75792: NEG
75793: PUSH
75794: LD_INT 2
75796: NEG
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: PUSH
75802: LD_INT 2
75804: NEG
75805: PUSH
75806: LD_INT 3
75808: NEG
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: PUSH
75814: LD_INT 2
75816: PUSH
75817: LD_INT 1
75819: NEG
75820: PUSH
75821: EMPTY
75822: LIST
75823: LIST
75824: PUSH
75825: LD_INT 3
75827: PUSH
75828: LD_INT 1
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: LD_INT 1
75837: PUSH
75838: LD_INT 3
75840: PUSH
75841: EMPTY
75842: LIST
75843: LIST
75844: PUSH
75845: LD_INT 1
75847: NEG
75848: PUSH
75849: LD_INT 2
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: PUSH
75856: LD_INT 3
75858: NEG
75859: PUSH
75860: LD_INT 2
75862: NEG
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: LIST
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75893: LD_ADDR_VAR 0 30
75897: PUSH
75898: LD_INT 0
75900: PUSH
75901: LD_INT 0
75903: PUSH
75904: EMPTY
75905: LIST
75906: LIST
75907: PUSH
75908: LD_INT 0
75910: PUSH
75911: LD_INT 1
75913: NEG
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: PUSH
75919: LD_INT 1
75921: PUSH
75922: LD_INT 0
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PUSH
75929: LD_INT 1
75931: PUSH
75932: LD_INT 1
75934: PUSH
75935: EMPTY
75936: LIST
75937: LIST
75938: PUSH
75939: LD_INT 0
75941: PUSH
75942: LD_INT 1
75944: PUSH
75945: EMPTY
75946: LIST
75947: LIST
75948: PUSH
75949: LD_INT 1
75951: NEG
75952: PUSH
75953: LD_INT 0
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: PUSH
75960: LD_INT 1
75962: NEG
75963: PUSH
75964: LD_INT 1
75966: NEG
75967: PUSH
75968: EMPTY
75969: LIST
75970: LIST
75971: PUSH
75972: LD_INT 1
75974: NEG
75975: PUSH
75976: LD_INT 2
75978: NEG
75979: PUSH
75980: EMPTY
75981: LIST
75982: LIST
75983: PUSH
75984: LD_INT 0
75986: PUSH
75987: LD_INT 2
75989: NEG
75990: PUSH
75991: EMPTY
75992: LIST
75993: LIST
75994: PUSH
75995: LD_INT 1
75997: PUSH
75998: LD_INT 1
76000: NEG
76001: PUSH
76002: EMPTY
76003: LIST
76004: LIST
76005: PUSH
76006: LD_INT 2
76008: PUSH
76009: LD_INT 0
76011: PUSH
76012: EMPTY
76013: LIST
76014: LIST
76015: PUSH
76016: LD_INT 2
76018: PUSH
76019: LD_INT 1
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PUSH
76026: LD_INT 2
76028: PUSH
76029: LD_INT 2
76031: PUSH
76032: EMPTY
76033: LIST
76034: LIST
76035: PUSH
76036: LD_INT 1
76038: PUSH
76039: LD_INT 2
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: LD_INT 1
76048: NEG
76049: PUSH
76050: LD_INT 1
76052: PUSH
76053: EMPTY
76054: LIST
76055: LIST
76056: PUSH
76057: LD_INT 2
76059: NEG
76060: PUSH
76061: LD_INT 0
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: PUSH
76068: LD_INT 2
76070: NEG
76071: PUSH
76072: LD_INT 1
76074: NEG
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: PUSH
76080: LD_INT 1
76082: NEG
76083: PUSH
76084: LD_INT 3
76086: NEG
76087: PUSH
76088: EMPTY
76089: LIST
76090: LIST
76091: PUSH
76092: LD_INT 1
76094: PUSH
76095: LD_INT 2
76097: NEG
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: PUSH
76103: LD_INT 3
76105: PUSH
76106: LD_INT 2
76108: PUSH
76109: EMPTY
76110: LIST
76111: LIST
76112: PUSH
76113: LD_INT 2
76115: PUSH
76116: LD_INT 3
76118: PUSH
76119: EMPTY
76120: LIST
76121: LIST
76122: PUSH
76123: LD_INT 2
76125: NEG
76126: PUSH
76127: LD_INT 1
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: PUSH
76134: LD_INT 3
76136: NEG
76137: PUSH
76138: LD_INT 1
76140: NEG
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: PUSH
76146: EMPTY
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: LIST
76154: LIST
76155: LIST
76156: LIST
76157: LIST
76158: LIST
76159: LIST
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: LIST
76166: LIST
76167: LIST
76168: LIST
76169: LIST
76170: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
76171: LD_ADDR_VAR 0 31
76175: PUSH
76176: LD_INT 0
76178: PUSH
76179: LD_INT 0
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: LD_INT 0
76188: PUSH
76189: LD_INT 1
76191: NEG
76192: PUSH
76193: EMPTY
76194: LIST
76195: LIST
76196: PUSH
76197: LD_INT 1
76199: PUSH
76200: LD_INT 0
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: PUSH
76207: LD_INT 1
76209: PUSH
76210: LD_INT 1
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: PUSH
76217: LD_INT 0
76219: PUSH
76220: LD_INT 1
76222: PUSH
76223: EMPTY
76224: LIST
76225: LIST
76226: PUSH
76227: LD_INT 1
76229: NEG
76230: PUSH
76231: LD_INT 0
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PUSH
76238: LD_INT 1
76240: NEG
76241: PUSH
76242: LD_INT 1
76244: NEG
76245: PUSH
76246: EMPTY
76247: LIST
76248: LIST
76249: PUSH
76250: LD_INT 1
76252: NEG
76253: PUSH
76254: LD_INT 2
76256: NEG
76257: PUSH
76258: EMPTY
76259: LIST
76260: LIST
76261: PUSH
76262: LD_INT 1
76264: PUSH
76265: LD_INT 1
76267: NEG
76268: PUSH
76269: EMPTY
76270: LIST
76271: LIST
76272: PUSH
76273: LD_INT 2
76275: PUSH
76276: LD_INT 0
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: PUSH
76283: LD_INT 2
76285: PUSH
76286: LD_INT 1
76288: PUSH
76289: EMPTY
76290: LIST
76291: LIST
76292: PUSH
76293: LD_INT 2
76295: PUSH
76296: LD_INT 2
76298: PUSH
76299: EMPTY
76300: LIST
76301: LIST
76302: PUSH
76303: LD_INT 1
76305: PUSH
76306: LD_INT 2
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: LD_INT 0
76315: PUSH
76316: LD_INT 2
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: PUSH
76323: LD_INT 1
76325: NEG
76326: PUSH
76327: LD_INT 1
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: LD_INT 2
76336: NEG
76337: PUSH
76338: LD_INT 1
76340: NEG
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PUSH
76346: LD_INT 2
76348: NEG
76349: PUSH
76350: LD_INT 2
76352: NEG
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: PUSH
76358: LD_INT 2
76360: NEG
76361: PUSH
76362: LD_INT 3
76364: NEG
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: PUSH
76370: LD_INT 2
76372: PUSH
76373: LD_INT 1
76375: NEG
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: PUSH
76381: LD_INT 3
76383: PUSH
76384: LD_INT 1
76386: PUSH
76387: EMPTY
76388: LIST
76389: LIST
76390: PUSH
76391: LD_INT 1
76393: PUSH
76394: LD_INT 3
76396: PUSH
76397: EMPTY
76398: LIST
76399: LIST
76400: PUSH
76401: LD_INT 1
76403: NEG
76404: PUSH
76405: LD_INT 2
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: LD_INT 3
76414: NEG
76415: PUSH
76416: LD_INT 2
76418: NEG
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: LIST
76428: LIST
76429: LIST
76430: LIST
76431: LIST
76432: LIST
76433: LIST
76434: LIST
76435: LIST
76436: LIST
76437: LIST
76438: LIST
76439: LIST
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: LIST
76445: LIST
76446: LIST
76447: LIST
76448: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76449: LD_ADDR_VAR 0 32
76453: PUSH
76454: LD_INT 0
76456: PUSH
76457: LD_INT 0
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: PUSH
76464: LD_INT 0
76466: PUSH
76467: LD_INT 1
76469: NEG
76470: PUSH
76471: EMPTY
76472: LIST
76473: LIST
76474: PUSH
76475: LD_INT 1
76477: PUSH
76478: LD_INT 0
76480: PUSH
76481: EMPTY
76482: LIST
76483: LIST
76484: PUSH
76485: LD_INT 1
76487: PUSH
76488: LD_INT 1
76490: PUSH
76491: EMPTY
76492: LIST
76493: LIST
76494: PUSH
76495: LD_INT 0
76497: PUSH
76498: LD_INT 1
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: PUSH
76505: LD_INT 1
76507: NEG
76508: PUSH
76509: LD_INT 0
76511: PUSH
76512: EMPTY
76513: LIST
76514: LIST
76515: PUSH
76516: LD_INT 1
76518: NEG
76519: PUSH
76520: LD_INT 1
76522: NEG
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PUSH
76528: LD_INT 1
76530: NEG
76531: PUSH
76532: LD_INT 2
76534: NEG
76535: PUSH
76536: EMPTY
76537: LIST
76538: LIST
76539: PUSH
76540: LD_INT 0
76542: PUSH
76543: LD_INT 2
76545: NEG
76546: PUSH
76547: EMPTY
76548: LIST
76549: LIST
76550: PUSH
76551: LD_INT 1
76553: PUSH
76554: LD_INT 1
76556: NEG
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: PUSH
76562: LD_INT 2
76564: PUSH
76565: LD_INT 1
76567: PUSH
76568: EMPTY
76569: LIST
76570: LIST
76571: PUSH
76572: LD_INT 2
76574: PUSH
76575: LD_INT 2
76577: PUSH
76578: EMPTY
76579: LIST
76580: LIST
76581: PUSH
76582: LD_INT 1
76584: PUSH
76585: LD_INT 2
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: LD_INT 0
76594: PUSH
76595: LD_INT 2
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: LD_INT 1
76604: NEG
76605: PUSH
76606: LD_INT 1
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 2
76615: NEG
76616: PUSH
76617: LD_INT 0
76619: PUSH
76620: EMPTY
76621: LIST
76622: LIST
76623: PUSH
76624: LD_INT 2
76626: NEG
76627: PUSH
76628: LD_INT 1
76630: NEG
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: PUSH
76636: LD_INT 1
76638: NEG
76639: PUSH
76640: LD_INT 3
76642: NEG
76643: PUSH
76644: EMPTY
76645: LIST
76646: LIST
76647: PUSH
76648: LD_INT 1
76650: PUSH
76651: LD_INT 2
76653: NEG
76654: PUSH
76655: EMPTY
76656: LIST
76657: LIST
76658: PUSH
76659: LD_INT 3
76661: PUSH
76662: LD_INT 2
76664: PUSH
76665: EMPTY
76666: LIST
76667: LIST
76668: PUSH
76669: LD_INT 2
76671: PUSH
76672: LD_INT 3
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: PUSH
76679: LD_INT 2
76681: NEG
76682: PUSH
76683: LD_INT 1
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: PUSH
76690: LD_INT 3
76692: NEG
76693: PUSH
76694: LD_INT 1
76696: NEG
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: LIST
76709: LIST
76710: LIST
76711: LIST
76712: LIST
76713: LIST
76714: LIST
76715: LIST
76716: LIST
76717: LIST
76718: LIST
76719: LIST
76720: LIST
76721: LIST
76722: LIST
76723: LIST
76724: LIST
76725: LIST
76726: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
76727: LD_ADDR_VAR 0 33
76731: PUSH
76732: LD_INT 0
76734: PUSH
76735: LD_INT 0
76737: PUSH
76738: EMPTY
76739: LIST
76740: LIST
76741: PUSH
76742: LD_INT 0
76744: PUSH
76745: LD_INT 1
76747: NEG
76748: PUSH
76749: EMPTY
76750: LIST
76751: LIST
76752: PUSH
76753: LD_INT 1
76755: PUSH
76756: LD_INT 0
76758: PUSH
76759: EMPTY
76760: LIST
76761: LIST
76762: PUSH
76763: LD_INT 1
76765: PUSH
76766: LD_INT 1
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: LD_INT 0
76775: PUSH
76776: LD_INT 1
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: LD_INT 1
76785: NEG
76786: PUSH
76787: LD_INT 0
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: PUSH
76794: LD_INT 1
76796: NEG
76797: PUSH
76798: LD_INT 1
76800: NEG
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: LD_INT 1
76808: NEG
76809: PUSH
76810: LD_INT 2
76812: NEG
76813: PUSH
76814: EMPTY
76815: LIST
76816: LIST
76817: PUSH
76818: LD_INT 1
76820: PUSH
76821: LD_INT 1
76823: NEG
76824: PUSH
76825: EMPTY
76826: LIST
76827: LIST
76828: PUSH
76829: LD_INT 2
76831: PUSH
76832: LD_INT 0
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: PUSH
76839: LD_INT 2
76841: PUSH
76842: LD_INT 1
76844: PUSH
76845: EMPTY
76846: LIST
76847: LIST
76848: PUSH
76849: LD_INT 1
76851: PUSH
76852: LD_INT 2
76854: PUSH
76855: EMPTY
76856: LIST
76857: LIST
76858: PUSH
76859: LD_INT 0
76861: PUSH
76862: LD_INT 2
76864: PUSH
76865: EMPTY
76866: LIST
76867: LIST
76868: PUSH
76869: LD_INT 1
76871: NEG
76872: PUSH
76873: LD_INT 1
76875: PUSH
76876: EMPTY
76877: LIST
76878: LIST
76879: PUSH
76880: LD_INT 2
76882: NEG
76883: PUSH
76884: LD_INT 0
76886: PUSH
76887: EMPTY
76888: LIST
76889: LIST
76890: PUSH
76891: LD_INT 2
76893: NEG
76894: PUSH
76895: LD_INT 1
76897: NEG
76898: PUSH
76899: EMPTY
76900: LIST
76901: LIST
76902: PUSH
76903: LD_INT 2
76905: NEG
76906: PUSH
76907: LD_INT 2
76909: NEG
76910: PUSH
76911: EMPTY
76912: LIST
76913: LIST
76914: PUSH
76915: LD_INT 2
76917: NEG
76918: PUSH
76919: LD_INT 3
76921: NEG
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: LD_INT 2
76929: PUSH
76930: LD_INT 1
76932: NEG
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: PUSH
76938: LD_INT 3
76940: PUSH
76941: LD_INT 1
76943: PUSH
76944: EMPTY
76945: LIST
76946: LIST
76947: PUSH
76948: LD_INT 1
76950: PUSH
76951: LD_INT 3
76953: PUSH
76954: EMPTY
76955: LIST
76956: LIST
76957: PUSH
76958: LD_INT 1
76960: NEG
76961: PUSH
76962: LD_INT 2
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: LD_INT 3
76971: NEG
76972: PUSH
76973: LD_INT 2
76975: NEG
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: PUSH
76981: EMPTY
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: LIST
76996: LIST
76997: LIST
76998: LIST
76999: LIST
77000: LIST
77001: LIST
77002: LIST
77003: LIST
77004: LIST
77005: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
77006: LD_ADDR_VAR 0 34
77010: PUSH
77011: LD_INT 0
77013: PUSH
77014: LD_INT 0
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: PUSH
77021: LD_INT 0
77023: PUSH
77024: LD_INT 1
77026: NEG
77027: PUSH
77028: EMPTY
77029: LIST
77030: LIST
77031: PUSH
77032: LD_INT 1
77034: PUSH
77035: LD_INT 0
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: PUSH
77042: LD_INT 1
77044: PUSH
77045: LD_INT 1
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: LD_INT 0
77054: PUSH
77055: LD_INT 1
77057: PUSH
77058: EMPTY
77059: LIST
77060: LIST
77061: PUSH
77062: LD_INT 1
77064: NEG
77065: PUSH
77066: LD_INT 0
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: PUSH
77073: LD_INT 1
77075: NEG
77076: PUSH
77077: LD_INT 1
77079: NEG
77080: PUSH
77081: EMPTY
77082: LIST
77083: LIST
77084: PUSH
77085: LD_INT 1
77087: NEG
77088: PUSH
77089: LD_INT 2
77091: NEG
77092: PUSH
77093: EMPTY
77094: LIST
77095: LIST
77096: PUSH
77097: LD_INT 0
77099: PUSH
77100: LD_INT 2
77102: NEG
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: PUSH
77108: LD_INT 1
77110: PUSH
77111: LD_INT 1
77113: NEG
77114: PUSH
77115: EMPTY
77116: LIST
77117: LIST
77118: PUSH
77119: LD_INT 2
77121: PUSH
77122: LD_INT 1
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PUSH
77129: LD_INT 2
77131: PUSH
77132: LD_INT 2
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PUSH
77139: LD_INT 1
77141: PUSH
77142: LD_INT 2
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PUSH
77149: LD_INT 1
77151: NEG
77152: PUSH
77153: LD_INT 1
77155: PUSH
77156: EMPTY
77157: LIST
77158: LIST
77159: PUSH
77160: LD_INT 2
77162: NEG
77163: PUSH
77164: LD_INT 0
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: PUSH
77171: LD_INT 2
77173: NEG
77174: PUSH
77175: LD_INT 1
77177: NEG
77178: PUSH
77179: EMPTY
77180: LIST
77181: LIST
77182: PUSH
77183: LD_INT 2
77185: NEG
77186: PUSH
77187: LD_INT 2
77189: NEG
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: PUSH
77195: LD_INT 1
77197: NEG
77198: PUSH
77199: LD_INT 3
77201: NEG
77202: PUSH
77203: EMPTY
77204: LIST
77205: LIST
77206: PUSH
77207: LD_INT 1
77209: PUSH
77210: LD_INT 2
77212: NEG
77213: PUSH
77214: EMPTY
77215: LIST
77216: LIST
77217: PUSH
77218: LD_INT 3
77220: PUSH
77221: LD_INT 2
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: PUSH
77228: LD_INT 2
77230: PUSH
77231: LD_INT 3
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: PUSH
77238: LD_INT 2
77240: NEG
77241: PUSH
77242: LD_INT 1
77244: PUSH
77245: EMPTY
77246: LIST
77247: LIST
77248: PUSH
77249: LD_INT 3
77251: NEG
77252: PUSH
77253: LD_INT 1
77255: NEG
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: LIST
77265: LIST
77266: LIST
77267: LIST
77268: LIST
77269: LIST
77270: LIST
77271: LIST
77272: LIST
77273: LIST
77274: LIST
77275: LIST
77276: LIST
77277: LIST
77278: LIST
77279: LIST
77280: LIST
77281: LIST
77282: LIST
77283: LIST
77284: LIST
77285: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
77286: LD_ADDR_VAR 0 35
77290: PUSH
77291: LD_INT 0
77293: PUSH
77294: LD_INT 0
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: PUSH
77301: LD_INT 0
77303: PUSH
77304: LD_INT 1
77306: NEG
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: PUSH
77312: LD_INT 1
77314: PUSH
77315: LD_INT 0
77317: PUSH
77318: EMPTY
77319: LIST
77320: LIST
77321: PUSH
77322: LD_INT 1
77324: PUSH
77325: LD_INT 1
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: PUSH
77332: LD_INT 0
77334: PUSH
77335: LD_INT 1
77337: PUSH
77338: EMPTY
77339: LIST
77340: LIST
77341: PUSH
77342: LD_INT 1
77344: NEG
77345: PUSH
77346: LD_INT 0
77348: PUSH
77349: EMPTY
77350: LIST
77351: LIST
77352: PUSH
77353: LD_INT 1
77355: NEG
77356: PUSH
77357: LD_INT 1
77359: NEG
77360: PUSH
77361: EMPTY
77362: LIST
77363: LIST
77364: PUSH
77365: LD_INT 2
77367: PUSH
77368: LD_INT 1
77370: PUSH
77371: EMPTY
77372: LIST
77373: LIST
77374: PUSH
77375: LD_INT 2
77377: NEG
77378: PUSH
77379: LD_INT 1
77381: NEG
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: PUSH
77387: EMPTY
77388: LIST
77389: LIST
77390: LIST
77391: LIST
77392: LIST
77393: LIST
77394: LIST
77395: LIST
77396: LIST
77397: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
77398: LD_ADDR_VAR 0 36
77402: PUSH
77403: LD_INT 0
77405: PUSH
77406: LD_INT 0
77408: PUSH
77409: EMPTY
77410: LIST
77411: LIST
77412: PUSH
77413: LD_INT 0
77415: PUSH
77416: LD_INT 1
77418: NEG
77419: PUSH
77420: EMPTY
77421: LIST
77422: LIST
77423: PUSH
77424: LD_INT 1
77426: PUSH
77427: LD_INT 0
77429: PUSH
77430: EMPTY
77431: LIST
77432: LIST
77433: PUSH
77434: LD_INT 1
77436: PUSH
77437: LD_INT 1
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: PUSH
77444: LD_INT 0
77446: PUSH
77447: LD_INT 1
77449: PUSH
77450: EMPTY
77451: LIST
77452: LIST
77453: PUSH
77454: LD_INT 1
77456: NEG
77457: PUSH
77458: LD_INT 0
77460: PUSH
77461: EMPTY
77462: LIST
77463: LIST
77464: PUSH
77465: LD_INT 1
77467: NEG
77468: PUSH
77469: LD_INT 1
77471: NEG
77472: PUSH
77473: EMPTY
77474: LIST
77475: LIST
77476: PUSH
77477: LD_INT 1
77479: NEG
77480: PUSH
77481: LD_INT 2
77483: NEG
77484: PUSH
77485: EMPTY
77486: LIST
77487: LIST
77488: PUSH
77489: LD_INT 1
77491: PUSH
77492: LD_INT 2
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: LIST
77507: LIST
77508: LIST
77509: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
77510: LD_ADDR_VAR 0 37
77514: PUSH
77515: LD_INT 0
77517: PUSH
77518: LD_INT 0
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: PUSH
77525: LD_INT 0
77527: PUSH
77528: LD_INT 1
77530: NEG
77531: PUSH
77532: EMPTY
77533: LIST
77534: LIST
77535: PUSH
77536: LD_INT 1
77538: PUSH
77539: LD_INT 0
77541: PUSH
77542: EMPTY
77543: LIST
77544: LIST
77545: PUSH
77546: LD_INT 1
77548: PUSH
77549: LD_INT 1
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: PUSH
77556: LD_INT 0
77558: PUSH
77559: LD_INT 1
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: PUSH
77566: LD_INT 1
77568: NEG
77569: PUSH
77570: LD_INT 0
77572: PUSH
77573: EMPTY
77574: LIST
77575: LIST
77576: PUSH
77577: LD_INT 1
77579: NEG
77580: PUSH
77581: LD_INT 1
77583: NEG
77584: PUSH
77585: EMPTY
77586: LIST
77587: LIST
77588: PUSH
77589: LD_INT 1
77591: PUSH
77592: LD_INT 1
77594: NEG
77595: PUSH
77596: EMPTY
77597: LIST
77598: LIST
77599: PUSH
77600: LD_INT 1
77602: NEG
77603: PUSH
77604: LD_INT 1
77606: PUSH
77607: EMPTY
77608: LIST
77609: LIST
77610: PUSH
77611: EMPTY
77612: LIST
77613: LIST
77614: LIST
77615: LIST
77616: LIST
77617: LIST
77618: LIST
77619: LIST
77620: LIST
77621: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
77622: LD_ADDR_VAR 0 38
77626: PUSH
77627: LD_INT 0
77629: PUSH
77630: LD_INT 0
77632: PUSH
77633: EMPTY
77634: LIST
77635: LIST
77636: PUSH
77637: LD_INT 0
77639: PUSH
77640: LD_INT 1
77642: NEG
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: PUSH
77648: LD_INT 1
77650: PUSH
77651: LD_INT 0
77653: PUSH
77654: EMPTY
77655: LIST
77656: LIST
77657: PUSH
77658: LD_INT 1
77660: PUSH
77661: LD_INT 1
77663: PUSH
77664: EMPTY
77665: LIST
77666: LIST
77667: PUSH
77668: LD_INT 0
77670: PUSH
77671: LD_INT 1
77673: PUSH
77674: EMPTY
77675: LIST
77676: LIST
77677: PUSH
77678: LD_INT 1
77680: NEG
77681: PUSH
77682: LD_INT 0
77684: PUSH
77685: EMPTY
77686: LIST
77687: LIST
77688: PUSH
77689: LD_INT 1
77691: NEG
77692: PUSH
77693: LD_INT 1
77695: NEG
77696: PUSH
77697: EMPTY
77698: LIST
77699: LIST
77700: PUSH
77701: LD_INT 2
77703: PUSH
77704: LD_INT 1
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: PUSH
77711: LD_INT 2
77713: NEG
77714: PUSH
77715: LD_INT 1
77717: NEG
77718: PUSH
77719: EMPTY
77720: LIST
77721: LIST
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: LIST
77727: LIST
77728: LIST
77729: LIST
77730: LIST
77731: LIST
77732: LIST
77733: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
77734: LD_ADDR_VAR 0 39
77738: PUSH
77739: LD_INT 0
77741: PUSH
77742: LD_INT 0
77744: PUSH
77745: EMPTY
77746: LIST
77747: LIST
77748: PUSH
77749: LD_INT 0
77751: PUSH
77752: LD_INT 1
77754: NEG
77755: PUSH
77756: EMPTY
77757: LIST
77758: LIST
77759: PUSH
77760: LD_INT 1
77762: PUSH
77763: LD_INT 0
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: PUSH
77770: LD_INT 1
77772: PUSH
77773: LD_INT 1
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: PUSH
77780: LD_INT 0
77782: PUSH
77783: LD_INT 1
77785: PUSH
77786: EMPTY
77787: LIST
77788: LIST
77789: PUSH
77790: LD_INT 1
77792: NEG
77793: PUSH
77794: LD_INT 0
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: PUSH
77801: LD_INT 1
77803: NEG
77804: PUSH
77805: LD_INT 1
77807: NEG
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: PUSH
77813: LD_INT 1
77815: NEG
77816: PUSH
77817: LD_INT 2
77819: NEG
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: PUSH
77825: LD_INT 1
77827: PUSH
77828: LD_INT 2
77830: PUSH
77831: EMPTY
77832: LIST
77833: LIST
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
77846: LD_ADDR_VAR 0 40
77850: PUSH
77851: LD_INT 0
77853: PUSH
77854: LD_INT 0
77856: PUSH
77857: EMPTY
77858: LIST
77859: LIST
77860: PUSH
77861: LD_INT 0
77863: PUSH
77864: LD_INT 1
77866: NEG
77867: PUSH
77868: EMPTY
77869: LIST
77870: LIST
77871: PUSH
77872: LD_INT 1
77874: PUSH
77875: LD_INT 0
77877: PUSH
77878: EMPTY
77879: LIST
77880: LIST
77881: PUSH
77882: LD_INT 1
77884: PUSH
77885: LD_INT 1
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: PUSH
77892: LD_INT 0
77894: PUSH
77895: LD_INT 1
77897: PUSH
77898: EMPTY
77899: LIST
77900: LIST
77901: PUSH
77902: LD_INT 1
77904: NEG
77905: PUSH
77906: LD_INT 0
77908: PUSH
77909: EMPTY
77910: LIST
77911: LIST
77912: PUSH
77913: LD_INT 1
77915: NEG
77916: PUSH
77917: LD_INT 1
77919: NEG
77920: PUSH
77921: EMPTY
77922: LIST
77923: LIST
77924: PUSH
77925: LD_INT 1
77927: PUSH
77928: LD_INT 1
77930: NEG
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 1
77938: NEG
77939: PUSH
77940: LD_INT 1
77942: PUSH
77943: EMPTY
77944: LIST
77945: LIST
77946: PUSH
77947: EMPTY
77948: LIST
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: LIST
77954: LIST
77955: LIST
77956: LIST
77957: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77958: LD_ADDR_VAR 0 41
77962: PUSH
77963: LD_INT 0
77965: PUSH
77966: LD_INT 0
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: PUSH
77973: LD_INT 0
77975: PUSH
77976: LD_INT 1
77978: NEG
77979: PUSH
77980: EMPTY
77981: LIST
77982: LIST
77983: PUSH
77984: LD_INT 1
77986: PUSH
77987: LD_INT 0
77989: PUSH
77990: EMPTY
77991: LIST
77992: LIST
77993: PUSH
77994: LD_INT 1
77996: PUSH
77997: LD_INT 1
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: PUSH
78004: LD_INT 0
78006: PUSH
78007: LD_INT 1
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: PUSH
78014: LD_INT 1
78016: NEG
78017: PUSH
78018: LD_INT 0
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: PUSH
78025: LD_INT 1
78027: NEG
78028: PUSH
78029: LD_INT 1
78031: NEG
78032: PUSH
78033: EMPTY
78034: LIST
78035: LIST
78036: PUSH
78037: LD_INT 1
78039: NEG
78040: PUSH
78041: LD_INT 2
78043: NEG
78044: PUSH
78045: EMPTY
78046: LIST
78047: LIST
78048: PUSH
78049: LD_INT 1
78051: PUSH
78052: LD_INT 1
78054: NEG
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: PUSH
78060: LD_INT 2
78062: PUSH
78063: LD_INT 0
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: PUSH
78070: LD_INT 2
78072: PUSH
78073: LD_INT 1
78075: PUSH
78076: EMPTY
78077: LIST
78078: LIST
78079: PUSH
78080: LD_INT 2
78082: PUSH
78083: LD_INT 2
78085: PUSH
78086: EMPTY
78087: LIST
78088: LIST
78089: PUSH
78090: LD_INT 1
78092: PUSH
78093: LD_INT 2
78095: PUSH
78096: EMPTY
78097: LIST
78098: LIST
78099: PUSH
78100: LD_INT 1
78102: NEG
78103: PUSH
78104: LD_INT 1
78106: PUSH
78107: EMPTY
78108: LIST
78109: LIST
78110: PUSH
78111: LD_INT 2
78113: NEG
78114: PUSH
78115: LD_INT 0
78117: PUSH
78118: EMPTY
78119: LIST
78120: LIST
78121: PUSH
78122: LD_INT 2
78124: NEG
78125: PUSH
78126: LD_INT 1
78128: NEG
78129: PUSH
78130: EMPTY
78131: LIST
78132: LIST
78133: PUSH
78134: LD_INT 2
78136: NEG
78137: PUSH
78138: LD_INT 2
78140: NEG
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: PUSH
78146: LD_INT 2
78148: NEG
78149: PUSH
78150: LD_INT 3
78152: NEG
78153: PUSH
78154: EMPTY
78155: LIST
78156: LIST
78157: PUSH
78158: LD_INT 2
78160: PUSH
78161: LD_INT 1
78163: NEG
78164: PUSH
78165: EMPTY
78166: LIST
78167: LIST
78168: PUSH
78169: LD_INT 3
78171: PUSH
78172: LD_INT 0
78174: PUSH
78175: EMPTY
78176: LIST
78177: LIST
78178: PUSH
78179: LD_INT 3
78181: PUSH
78182: LD_INT 1
78184: PUSH
78185: EMPTY
78186: LIST
78187: LIST
78188: PUSH
78189: LD_INT 3
78191: PUSH
78192: LD_INT 2
78194: PUSH
78195: EMPTY
78196: LIST
78197: LIST
78198: PUSH
78199: LD_INT 3
78201: PUSH
78202: LD_INT 3
78204: PUSH
78205: EMPTY
78206: LIST
78207: LIST
78208: PUSH
78209: LD_INT 2
78211: PUSH
78212: LD_INT 3
78214: PUSH
78215: EMPTY
78216: LIST
78217: LIST
78218: PUSH
78219: LD_INT 2
78221: NEG
78222: PUSH
78223: LD_INT 1
78225: PUSH
78226: EMPTY
78227: LIST
78228: LIST
78229: PUSH
78230: LD_INT 3
78232: NEG
78233: PUSH
78234: LD_INT 0
78236: PUSH
78237: EMPTY
78238: LIST
78239: LIST
78240: PUSH
78241: LD_INT 3
78243: NEG
78244: PUSH
78245: LD_INT 1
78247: NEG
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: PUSH
78253: LD_INT 3
78255: NEG
78256: PUSH
78257: LD_INT 2
78259: NEG
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: PUSH
78265: LD_INT 3
78267: NEG
78268: PUSH
78269: LD_INT 3
78271: NEG
78272: PUSH
78273: EMPTY
78274: LIST
78275: LIST
78276: PUSH
78277: EMPTY
78278: LIST
78279: LIST
78280: LIST
78281: LIST
78282: LIST
78283: LIST
78284: LIST
78285: LIST
78286: LIST
78287: LIST
78288: LIST
78289: LIST
78290: LIST
78291: LIST
78292: LIST
78293: LIST
78294: LIST
78295: LIST
78296: LIST
78297: LIST
78298: LIST
78299: LIST
78300: LIST
78301: LIST
78302: LIST
78303: LIST
78304: LIST
78305: LIST
78306: LIST
78307: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78308: LD_ADDR_VAR 0 42
78312: PUSH
78313: LD_INT 0
78315: PUSH
78316: LD_INT 0
78318: PUSH
78319: EMPTY
78320: LIST
78321: LIST
78322: PUSH
78323: LD_INT 0
78325: PUSH
78326: LD_INT 1
78328: NEG
78329: PUSH
78330: EMPTY
78331: LIST
78332: LIST
78333: PUSH
78334: LD_INT 1
78336: PUSH
78337: LD_INT 0
78339: PUSH
78340: EMPTY
78341: LIST
78342: LIST
78343: PUSH
78344: LD_INT 1
78346: PUSH
78347: LD_INT 1
78349: PUSH
78350: EMPTY
78351: LIST
78352: LIST
78353: PUSH
78354: LD_INT 0
78356: PUSH
78357: LD_INT 1
78359: PUSH
78360: EMPTY
78361: LIST
78362: LIST
78363: PUSH
78364: LD_INT 1
78366: NEG
78367: PUSH
78368: LD_INT 0
78370: PUSH
78371: EMPTY
78372: LIST
78373: LIST
78374: PUSH
78375: LD_INT 1
78377: NEG
78378: PUSH
78379: LD_INT 1
78381: NEG
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PUSH
78387: LD_INT 1
78389: NEG
78390: PUSH
78391: LD_INT 2
78393: NEG
78394: PUSH
78395: EMPTY
78396: LIST
78397: LIST
78398: PUSH
78399: LD_INT 0
78401: PUSH
78402: LD_INT 2
78404: NEG
78405: PUSH
78406: EMPTY
78407: LIST
78408: LIST
78409: PUSH
78410: LD_INT 1
78412: PUSH
78413: LD_INT 1
78415: NEG
78416: PUSH
78417: EMPTY
78418: LIST
78419: LIST
78420: PUSH
78421: LD_INT 2
78423: PUSH
78424: LD_INT 1
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: PUSH
78431: LD_INT 2
78433: PUSH
78434: LD_INT 2
78436: PUSH
78437: EMPTY
78438: LIST
78439: LIST
78440: PUSH
78441: LD_INT 1
78443: PUSH
78444: LD_INT 2
78446: PUSH
78447: EMPTY
78448: LIST
78449: LIST
78450: PUSH
78451: LD_INT 0
78453: PUSH
78454: LD_INT 2
78456: PUSH
78457: EMPTY
78458: LIST
78459: LIST
78460: PUSH
78461: LD_INT 1
78463: NEG
78464: PUSH
78465: LD_INT 1
78467: PUSH
78468: EMPTY
78469: LIST
78470: LIST
78471: PUSH
78472: LD_INT 2
78474: NEG
78475: PUSH
78476: LD_INT 1
78478: NEG
78479: PUSH
78480: EMPTY
78481: LIST
78482: LIST
78483: PUSH
78484: LD_INT 2
78486: NEG
78487: PUSH
78488: LD_INT 2
78490: NEG
78491: PUSH
78492: EMPTY
78493: LIST
78494: LIST
78495: PUSH
78496: LD_INT 2
78498: NEG
78499: PUSH
78500: LD_INT 3
78502: NEG
78503: PUSH
78504: EMPTY
78505: LIST
78506: LIST
78507: PUSH
78508: LD_INT 1
78510: NEG
78511: PUSH
78512: LD_INT 3
78514: NEG
78515: PUSH
78516: EMPTY
78517: LIST
78518: LIST
78519: PUSH
78520: LD_INT 0
78522: PUSH
78523: LD_INT 3
78525: NEG
78526: PUSH
78527: EMPTY
78528: LIST
78529: LIST
78530: PUSH
78531: LD_INT 1
78533: PUSH
78534: LD_INT 2
78536: NEG
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: PUSH
78542: LD_INT 3
78544: PUSH
78545: LD_INT 2
78547: PUSH
78548: EMPTY
78549: LIST
78550: LIST
78551: PUSH
78552: LD_INT 3
78554: PUSH
78555: LD_INT 3
78557: PUSH
78558: EMPTY
78559: LIST
78560: LIST
78561: PUSH
78562: LD_INT 2
78564: PUSH
78565: LD_INT 3
78567: PUSH
78568: EMPTY
78569: LIST
78570: LIST
78571: PUSH
78572: LD_INT 1
78574: PUSH
78575: LD_INT 3
78577: PUSH
78578: EMPTY
78579: LIST
78580: LIST
78581: PUSH
78582: LD_INT 0
78584: PUSH
78585: LD_INT 3
78587: PUSH
78588: EMPTY
78589: LIST
78590: LIST
78591: PUSH
78592: LD_INT 1
78594: NEG
78595: PUSH
78596: LD_INT 2
78598: PUSH
78599: EMPTY
78600: LIST
78601: LIST
78602: PUSH
78603: LD_INT 3
78605: NEG
78606: PUSH
78607: LD_INT 2
78609: NEG
78610: PUSH
78611: EMPTY
78612: LIST
78613: LIST
78614: PUSH
78615: LD_INT 3
78617: NEG
78618: PUSH
78619: LD_INT 3
78621: NEG
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PUSH
78627: EMPTY
78628: LIST
78629: LIST
78630: LIST
78631: LIST
78632: LIST
78633: LIST
78634: LIST
78635: LIST
78636: LIST
78637: LIST
78638: LIST
78639: LIST
78640: LIST
78641: LIST
78642: LIST
78643: LIST
78644: LIST
78645: LIST
78646: LIST
78647: LIST
78648: LIST
78649: LIST
78650: LIST
78651: LIST
78652: LIST
78653: LIST
78654: LIST
78655: LIST
78656: LIST
78657: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78658: LD_ADDR_VAR 0 43
78662: PUSH
78663: LD_INT 0
78665: PUSH
78666: LD_INT 0
78668: PUSH
78669: EMPTY
78670: LIST
78671: LIST
78672: PUSH
78673: LD_INT 0
78675: PUSH
78676: LD_INT 1
78678: NEG
78679: PUSH
78680: EMPTY
78681: LIST
78682: LIST
78683: PUSH
78684: LD_INT 1
78686: PUSH
78687: LD_INT 0
78689: PUSH
78690: EMPTY
78691: LIST
78692: LIST
78693: PUSH
78694: LD_INT 1
78696: PUSH
78697: LD_INT 1
78699: PUSH
78700: EMPTY
78701: LIST
78702: LIST
78703: PUSH
78704: LD_INT 0
78706: PUSH
78707: LD_INT 1
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: PUSH
78714: LD_INT 1
78716: NEG
78717: PUSH
78718: LD_INT 0
78720: PUSH
78721: EMPTY
78722: LIST
78723: LIST
78724: PUSH
78725: LD_INT 1
78727: NEG
78728: PUSH
78729: LD_INT 1
78731: NEG
78732: PUSH
78733: EMPTY
78734: LIST
78735: LIST
78736: PUSH
78737: LD_INT 1
78739: NEG
78740: PUSH
78741: LD_INT 2
78743: NEG
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: PUSH
78749: LD_INT 0
78751: PUSH
78752: LD_INT 2
78754: NEG
78755: PUSH
78756: EMPTY
78757: LIST
78758: LIST
78759: PUSH
78760: LD_INT 1
78762: PUSH
78763: LD_INT 1
78765: NEG
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: PUSH
78771: LD_INT 2
78773: PUSH
78774: LD_INT 0
78776: PUSH
78777: EMPTY
78778: LIST
78779: LIST
78780: PUSH
78781: LD_INT 2
78783: PUSH
78784: LD_INT 1
78786: PUSH
78787: EMPTY
78788: LIST
78789: LIST
78790: PUSH
78791: LD_INT 1
78793: PUSH
78794: LD_INT 2
78796: PUSH
78797: EMPTY
78798: LIST
78799: LIST
78800: PUSH
78801: LD_INT 0
78803: PUSH
78804: LD_INT 2
78806: PUSH
78807: EMPTY
78808: LIST
78809: LIST
78810: PUSH
78811: LD_INT 1
78813: NEG
78814: PUSH
78815: LD_INT 1
78817: PUSH
78818: EMPTY
78819: LIST
78820: LIST
78821: PUSH
78822: LD_INT 2
78824: NEG
78825: PUSH
78826: LD_INT 0
78828: PUSH
78829: EMPTY
78830: LIST
78831: LIST
78832: PUSH
78833: LD_INT 2
78835: NEG
78836: PUSH
78837: LD_INT 1
78839: NEG
78840: PUSH
78841: EMPTY
78842: LIST
78843: LIST
78844: PUSH
78845: LD_INT 1
78847: NEG
78848: PUSH
78849: LD_INT 3
78851: NEG
78852: PUSH
78853: EMPTY
78854: LIST
78855: LIST
78856: PUSH
78857: LD_INT 0
78859: PUSH
78860: LD_INT 3
78862: NEG
78863: PUSH
78864: EMPTY
78865: LIST
78866: LIST
78867: PUSH
78868: LD_INT 1
78870: PUSH
78871: LD_INT 2
78873: NEG
78874: PUSH
78875: EMPTY
78876: LIST
78877: LIST
78878: PUSH
78879: LD_INT 2
78881: PUSH
78882: LD_INT 1
78884: NEG
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 3
78892: PUSH
78893: LD_INT 0
78895: PUSH
78896: EMPTY
78897: LIST
78898: LIST
78899: PUSH
78900: LD_INT 3
78902: PUSH
78903: LD_INT 1
78905: PUSH
78906: EMPTY
78907: LIST
78908: LIST
78909: PUSH
78910: LD_INT 1
78912: PUSH
78913: LD_INT 3
78915: PUSH
78916: EMPTY
78917: LIST
78918: LIST
78919: PUSH
78920: LD_INT 0
78922: PUSH
78923: LD_INT 3
78925: PUSH
78926: EMPTY
78927: LIST
78928: LIST
78929: PUSH
78930: LD_INT 1
78932: NEG
78933: PUSH
78934: LD_INT 2
78936: PUSH
78937: EMPTY
78938: LIST
78939: LIST
78940: PUSH
78941: LD_INT 2
78943: NEG
78944: PUSH
78945: LD_INT 1
78947: PUSH
78948: EMPTY
78949: LIST
78950: LIST
78951: PUSH
78952: LD_INT 3
78954: NEG
78955: PUSH
78956: LD_INT 0
78958: PUSH
78959: EMPTY
78960: LIST
78961: LIST
78962: PUSH
78963: LD_INT 3
78965: NEG
78966: PUSH
78967: LD_INT 1
78969: NEG
78970: PUSH
78971: EMPTY
78972: LIST
78973: LIST
78974: PUSH
78975: EMPTY
78976: LIST
78977: LIST
78978: LIST
78979: LIST
78980: LIST
78981: LIST
78982: LIST
78983: LIST
78984: LIST
78985: LIST
78986: LIST
78987: LIST
78988: LIST
78989: LIST
78990: LIST
78991: LIST
78992: LIST
78993: LIST
78994: LIST
78995: LIST
78996: LIST
78997: LIST
78998: LIST
78999: LIST
79000: LIST
79001: LIST
79002: LIST
79003: LIST
79004: LIST
79005: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
79006: LD_ADDR_VAR 0 44
79010: PUSH
79011: LD_INT 0
79013: PUSH
79014: LD_INT 0
79016: PUSH
79017: EMPTY
79018: LIST
79019: LIST
79020: PUSH
79021: LD_INT 0
79023: PUSH
79024: LD_INT 1
79026: NEG
79027: PUSH
79028: EMPTY
79029: LIST
79030: LIST
79031: PUSH
79032: LD_INT 1
79034: PUSH
79035: LD_INT 0
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PUSH
79042: LD_INT 1
79044: PUSH
79045: LD_INT 1
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: PUSH
79052: LD_INT 0
79054: PUSH
79055: LD_INT 1
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PUSH
79062: LD_INT 1
79064: NEG
79065: PUSH
79066: LD_INT 0
79068: PUSH
79069: EMPTY
79070: LIST
79071: LIST
79072: PUSH
79073: LD_INT 1
79075: NEG
79076: PUSH
79077: LD_INT 1
79079: NEG
79080: PUSH
79081: EMPTY
79082: LIST
79083: LIST
79084: PUSH
79085: LD_INT 1
79087: NEG
79088: PUSH
79089: LD_INT 2
79091: NEG
79092: PUSH
79093: EMPTY
79094: LIST
79095: LIST
79096: PUSH
79097: LD_INT 1
79099: PUSH
79100: LD_INT 1
79102: NEG
79103: PUSH
79104: EMPTY
79105: LIST
79106: LIST
79107: PUSH
79108: LD_INT 2
79110: PUSH
79111: LD_INT 0
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: PUSH
79118: LD_INT 2
79120: PUSH
79121: LD_INT 1
79123: PUSH
79124: EMPTY
79125: LIST
79126: LIST
79127: PUSH
79128: LD_INT 2
79130: PUSH
79131: LD_INT 2
79133: PUSH
79134: EMPTY
79135: LIST
79136: LIST
79137: PUSH
79138: LD_INT 1
79140: PUSH
79141: LD_INT 2
79143: PUSH
79144: EMPTY
79145: LIST
79146: LIST
79147: PUSH
79148: LD_INT 1
79150: NEG
79151: PUSH
79152: LD_INT 1
79154: PUSH
79155: EMPTY
79156: LIST
79157: LIST
79158: PUSH
79159: LD_INT 2
79161: NEG
79162: PUSH
79163: LD_INT 0
79165: PUSH
79166: EMPTY
79167: LIST
79168: LIST
79169: PUSH
79170: LD_INT 2
79172: NEG
79173: PUSH
79174: LD_INT 1
79176: NEG
79177: PUSH
79178: EMPTY
79179: LIST
79180: LIST
79181: PUSH
79182: LD_INT 2
79184: NEG
79185: PUSH
79186: LD_INT 2
79188: NEG
79189: PUSH
79190: EMPTY
79191: LIST
79192: LIST
79193: PUSH
79194: LD_INT 2
79196: NEG
79197: PUSH
79198: LD_INT 3
79200: NEG
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: PUSH
79206: LD_INT 2
79208: PUSH
79209: LD_INT 1
79211: NEG
79212: PUSH
79213: EMPTY
79214: LIST
79215: LIST
79216: PUSH
79217: LD_INT 3
79219: PUSH
79220: LD_INT 0
79222: PUSH
79223: EMPTY
79224: LIST
79225: LIST
79226: PUSH
79227: LD_INT 3
79229: PUSH
79230: LD_INT 1
79232: PUSH
79233: EMPTY
79234: LIST
79235: LIST
79236: PUSH
79237: LD_INT 3
79239: PUSH
79240: LD_INT 2
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: PUSH
79247: LD_INT 3
79249: PUSH
79250: LD_INT 3
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: PUSH
79257: LD_INT 2
79259: PUSH
79260: LD_INT 3
79262: PUSH
79263: EMPTY
79264: LIST
79265: LIST
79266: PUSH
79267: LD_INT 2
79269: NEG
79270: PUSH
79271: LD_INT 1
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: PUSH
79278: LD_INT 3
79280: NEG
79281: PUSH
79282: LD_INT 0
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: PUSH
79289: LD_INT 3
79291: NEG
79292: PUSH
79293: LD_INT 1
79295: NEG
79296: PUSH
79297: EMPTY
79298: LIST
79299: LIST
79300: PUSH
79301: LD_INT 3
79303: NEG
79304: PUSH
79305: LD_INT 2
79307: NEG
79308: PUSH
79309: EMPTY
79310: LIST
79311: LIST
79312: PUSH
79313: LD_INT 3
79315: NEG
79316: PUSH
79317: LD_INT 3
79319: NEG
79320: PUSH
79321: EMPTY
79322: LIST
79323: LIST
79324: PUSH
79325: EMPTY
79326: LIST
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: LIST
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: LIST
79342: LIST
79343: LIST
79344: LIST
79345: LIST
79346: LIST
79347: LIST
79348: LIST
79349: LIST
79350: LIST
79351: LIST
79352: LIST
79353: LIST
79354: LIST
79355: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
79356: LD_ADDR_VAR 0 45
79360: PUSH
79361: LD_INT 0
79363: PUSH
79364: LD_INT 0
79366: PUSH
79367: EMPTY
79368: LIST
79369: LIST
79370: PUSH
79371: LD_INT 0
79373: PUSH
79374: LD_INT 1
79376: NEG
79377: PUSH
79378: EMPTY
79379: LIST
79380: LIST
79381: PUSH
79382: LD_INT 1
79384: PUSH
79385: LD_INT 0
79387: PUSH
79388: EMPTY
79389: LIST
79390: LIST
79391: PUSH
79392: LD_INT 1
79394: PUSH
79395: LD_INT 1
79397: PUSH
79398: EMPTY
79399: LIST
79400: LIST
79401: PUSH
79402: LD_INT 0
79404: PUSH
79405: LD_INT 1
79407: PUSH
79408: EMPTY
79409: LIST
79410: LIST
79411: PUSH
79412: LD_INT 1
79414: NEG
79415: PUSH
79416: LD_INT 0
79418: PUSH
79419: EMPTY
79420: LIST
79421: LIST
79422: PUSH
79423: LD_INT 1
79425: NEG
79426: PUSH
79427: LD_INT 1
79429: NEG
79430: PUSH
79431: EMPTY
79432: LIST
79433: LIST
79434: PUSH
79435: LD_INT 1
79437: NEG
79438: PUSH
79439: LD_INT 2
79441: NEG
79442: PUSH
79443: EMPTY
79444: LIST
79445: LIST
79446: PUSH
79447: LD_INT 0
79449: PUSH
79450: LD_INT 2
79452: NEG
79453: PUSH
79454: EMPTY
79455: LIST
79456: LIST
79457: PUSH
79458: LD_INT 1
79460: PUSH
79461: LD_INT 1
79463: NEG
79464: PUSH
79465: EMPTY
79466: LIST
79467: LIST
79468: PUSH
79469: LD_INT 2
79471: PUSH
79472: LD_INT 1
79474: PUSH
79475: EMPTY
79476: LIST
79477: LIST
79478: PUSH
79479: LD_INT 2
79481: PUSH
79482: LD_INT 2
79484: PUSH
79485: EMPTY
79486: LIST
79487: LIST
79488: PUSH
79489: LD_INT 1
79491: PUSH
79492: LD_INT 2
79494: PUSH
79495: EMPTY
79496: LIST
79497: LIST
79498: PUSH
79499: LD_INT 0
79501: PUSH
79502: LD_INT 2
79504: PUSH
79505: EMPTY
79506: LIST
79507: LIST
79508: PUSH
79509: LD_INT 1
79511: NEG
79512: PUSH
79513: LD_INT 1
79515: PUSH
79516: EMPTY
79517: LIST
79518: LIST
79519: PUSH
79520: LD_INT 2
79522: NEG
79523: PUSH
79524: LD_INT 1
79526: NEG
79527: PUSH
79528: EMPTY
79529: LIST
79530: LIST
79531: PUSH
79532: LD_INT 2
79534: NEG
79535: PUSH
79536: LD_INT 2
79538: NEG
79539: PUSH
79540: EMPTY
79541: LIST
79542: LIST
79543: PUSH
79544: LD_INT 2
79546: NEG
79547: PUSH
79548: LD_INT 3
79550: NEG
79551: PUSH
79552: EMPTY
79553: LIST
79554: LIST
79555: PUSH
79556: LD_INT 1
79558: NEG
79559: PUSH
79560: LD_INT 3
79562: NEG
79563: PUSH
79564: EMPTY
79565: LIST
79566: LIST
79567: PUSH
79568: LD_INT 0
79570: PUSH
79571: LD_INT 3
79573: NEG
79574: PUSH
79575: EMPTY
79576: LIST
79577: LIST
79578: PUSH
79579: LD_INT 1
79581: PUSH
79582: LD_INT 2
79584: NEG
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: PUSH
79590: LD_INT 3
79592: PUSH
79593: LD_INT 2
79595: PUSH
79596: EMPTY
79597: LIST
79598: LIST
79599: PUSH
79600: LD_INT 3
79602: PUSH
79603: LD_INT 3
79605: PUSH
79606: EMPTY
79607: LIST
79608: LIST
79609: PUSH
79610: LD_INT 2
79612: PUSH
79613: LD_INT 3
79615: PUSH
79616: EMPTY
79617: LIST
79618: LIST
79619: PUSH
79620: LD_INT 1
79622: PUSH
79623: LD_INT 3
79625: PUSH
79626: EMPTY
79627: LIST
79628: LIST
79629: PUSH
79630: LD_INT 0
79632: PUSH
79633: LD_INT 3
79635: PUSH
79636: EMPTY
79637: LIST
79638: LIST
79639: PUSH
79640: LD_INT 1
79642: NEG
79643: PUSH
79644: LD_INT 2
79646: PUSH
79647: EMPTY
79648: LIST
79649: LIST
79650: PUSH
79651: LD_INT 3
79653: NEG
79654: PUSH
79655: LD_INT 2
79657: NEG
79658: PUSH
79659: EMPTY
79660: LIST
79661: LIST
79662: PUSH
79663: LD_INT 3
79665: NEG
79666: PUSH
79667: LD_INT 3
79669: NEG
79670: PUSH
79671: EMPTY
79672: LIST
79673: LIST
79674: PUSH
79675: EMPTY
79676: LIST
79677: LIST
79678: LIST
79679: LIST
79680: LIST
79681: LIST
79682: LIST
79683: LIST
79684: LIST
79685: LIST
79686: LIST
79687: LIST
79688: LIST
79689: LIST
79690: LIST
79691: LIST
79692: LIST
79693: LIST
79694: LIST
79695: LIST
79696: LIST
79697: LIST
79698: LIST
79699: LIST
79700: LIST
79701: LIST
79702: LIST
79703: LIST
79704: LIST
79705: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
79706: LD_ADDR_VAR 0 46
79710: PUSH
79711: LD_INT 0
79713: PUSH
79714: LD_INT 0
79716: PUSH
79717: EMPTY
79718: LIST
79719: LIST
79720: PUSH
79721: LD_INT 0
79723: PUSH
79724: LD_INT 1
79726: NEG
79727: PUSH
79728: EMPTY
79729: LIST
79730: LIST
79731: PUSH
79732: LD_INT 1
79734: PUSH
79735: LD_INT 0
79737: PUSH
79738: EMPTY
79739: LIST
79740: LIST
79741: PUSH
79742: LD_INT 1
79744: PUSH
79745: LD_INT 1
79747: PUSH
79748: EMPTY
79749: LIST
79750: LIST
79751: PUSH
79752: LD_INT 0
79754: PUSH
79755: LD_INT 1
79757: PUSH
79758: EMPTY
79759: LIST
79760: LIST
79761: PUSH
79762: LD_INT 1
79764: NEG
79765: PUSH
79766: LD_INT 0
79768: PUSH
79769: EMPTY
79770: LIST
79771: LIST
79772: PUSH
79773: LD_INT 1
79775: NEG
79776: PUSH
79777: LD_INT 1
79779: NEG
79780: PUSH
79781: EMPTY
79782: LIST
79783: LIST
79784: PUSH
79785: LD_INT 1
79787: NEG
79788: PUSH
79789: LD_INT 2
79791: NEG
79792: PUSH
79793: EMPTY
79794: LIST
79795: LIST
79796: PUSH
79797: LD_INT 0
79799: PUSH
79800: LD_INT 2
79802: NEG
79803: PUSH
79804: EMPTY
79805: LIST
79806: LIST
79807: PUSH
79808: LD_INT 1
79810: PUSH
79811: LD_INT 1
79813: NEG
79814: PUSH
79815: EMPTY
79816: LIST
79817: LIST
79818: PUSH
79819: LD_INT 2
79821: PUSH
79822: LD_INT 0
79824: PUSH
79825: EMPTY
79826: LIST
79827: LIST
79828: PUSH
79829: LD_INT 2
79831: PUSH
79832: LD_INT 1
79834: PUSH
79835: EMPTY
79836: LIST
79837: LIST
79838: PUSH
79839: LD_INT 1
79841: PUSH
79842: LD_INT 2
79844: PUSH
79845: EMPTY
79846: LIST
79847: LIST
79848: PUSH
79849: LD_INT 0
79851: PUSH
79852: LD_INT 2
79854: PUSH
79855: EMPTY
79856: LIST
79857: LIST
79858: PUSH
79859: LD_INT 1
79861: NEG
79862: PUSH
79863: LD_INT 1
79865: PUSH
79866: EMPTY
79867: LIST
79868: LIST
79869: PUSH
79870: LD_INT 2
79872: NEG
79873: PUSH
79874: LD_INT 0
79876: PUSH
79877: EMPTY
79878: LIST
79879: LIST
79880: PUSH
79881: LD_INT 2
79883: NEG
79884: PUSH
79885: LD_INT 1
79887: NEG
79888: PUSH
79889: EMPTY
79890: LIST
79891: LIST
79892: PUSH
79893: LD_INT 1
79895: NEG
79896: PUSH
79897: LD_INT 3
79899: NEG
79900: PUSH
79901: EMPTY
79902: LIST
79903: LIST
79904: PUSH
79905: LD_INT 0
79907: PUSH
79908: LD_INT 3
79910: NEG
79911: PUSH
79912: EMPTY
79913: LIST
79914: LIST
79915: PUSH
79916: LD_INT 1
79918: PUSH
79919: LD_INT 2
79921: NEG
79922: PUSH
79923: EMPTY
79924: LIST
79925: LIST
79926: PUSH
79927: LD_INT 2
79929: PUSH
79930: LD_INT 1
79932: NEG
79933: PUSH
79934: EMPTY
79935: LIST
79936: LIST
79937: PUSH
79938: LD_INT 3
79940: PUSH
79941: LD_INT 0
79943: PUSH
79944: EMPTY
79945: LIST
79946: LIST
79947: PUSH
79948: LD_INT 3
79950: PUSH
79951: LD_INT 1
79953: PUSH
79954: EMPTY
79955: LIST
79956: LIST
79957: PUSH
79958: LD_INT 1
79960: PUSH
79961: LD_INT 3
79963: PUSH
79964: EMPTY
79965: LIST
79966: LIST
79967: PUSH
79968: LD_INT 0
79970: PUSH
79971: LD_INT 3
79973: PUSH
79974: EMPTY
79975: LIST
79976: LIST
79977: PUSH
79978: LD_INT 1
79980: NEG
79981: PUSH
79982: LD_INT 2
79984: PUSH
79985: EMPTY
79986: LIST
79987: LIST
79988: PUSH
79989: LD_INT 2
79991: NEG
79992: PUSH
79993: LD_INT 1
79995: PUSH
79996: EMPTY
79997: LIST
79998: LIST
79999: PUSH
80000: LD_INT 3
80002: NEG
80003: PUSH
80004: LD_INT 0
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PUSH
80011: LD_INT 3
80013: NEG
80014: PUSH
80015: LD_INT 1
80017: NEG
80018: PUSH
80019: EMPTY
80020: LIST
80021: LIST
80022: PUSH
80023: EMPTY
80024: LIST
80025: LIST
80026: LIST
80027: LIST
80028: LIST
80029: LIST
80030: LIST
80031: LIST
80032: LIST
80033: LIST
80034: LIST
80035: LIST
80036: LIST
80037: LIST
80038: LIST
80039: LIST
80040: LIST
80041: LIST
80042: LIST
80043: LIST
80044: LIST
80045: LIST
80046: LIST
80047: LIST
80048: LIST
80049: LIST
80050: LIST
80051: LIST
80052: LIST
80053: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80054: LD_ADDR_VAR 0 47
80058: PUSH
80059: LD_INT 0
80061: PUSH
80062: LD_INT 0
80064: PUSH
80065: EMPTY
80066: LIST
80067: LIST
80068: PUSH
80069: LD_INT 0
80071: PUSH
80072: LD_INT 1
80074: NEG
80075: PUSH
80076: EMPTY
80077: LIST
80078: LIST
80079: PUSH
80080: LD_INT 1
80082: PUSH
80083: LD_INT 0
80085: PUSH
80086: EMPTY
80087: LIST
80088: LIST
80089: PUSH
80090: LD_INT 1
80092: PUSH
80093: LD_INT 1
80095: PUSH
80096: EMPTY
80097: LIST
80098: LIST
80099: PUSH
80100: LD_INT 0
80102: PUSH
80103: LD_INT 1
80105: PUSH
80106: EMPTY
80107: LIST
80108: LIST
80109: PUSH
80110: LD_INT 1
80112: NEG
80113: PUSH
80114: LD_INT 0
80116: PUSH
80117: EMPTY
80118: LIST
80119: LIST
80120: PUSH
80121: LD_INT 1
80123: NEG
80124: PUSH
80125: LD_INT 1
80127: NEG
80128: PUSH
80129: EMPTY
80130: LIST
80131: LIST
80132: PUSH
80133: LD_INT 1
80135: NEG
80136: PUSH
80137: LD_INT 2
80139: NEG
80140: PUSH
80141: EMPTY
80142: LIST
80143: LIST
80144: PUSH
80145: LD_INT 0
80147: PUSH
80148: LD_INT 2
80150: NEG
80151: PUSH
80152: EMPTY
80153: LIST
80154: LIST
80155: PUSH
80156: LD_INT 1
80158: PUSH
80159: LD_INT 1
80161: NEG
80162: PUSH
80163: EMPTY
80164: LIST
80165: LIST
80166: PUSH
80167: LD_INT 2
80169: NEG
80170: PUSH
80171: LD_INT 1
80173: NEG
80174: PUSH
80175: EMPTY
80176: LIST
80177: LIST
80178: PUSH
80179: LD_INT 2
80181: NEG
80182: PUSH
80183: LD_INT 2
80185: NEG
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: PUSH
80191: EMPTY
80192: LIST
80193: LIST
80194: LIST
80195: LIST
80196: LIST
80197: LIST
80198: LIST
80199: LIST
80200: LIST
80201: LIST
80202: LIST
80203: LIST
80204: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
80205: LD_ADDR_VAR 0 48
80209: PUSH
80210: LD_INT 0
80212: PUSH
80213: LD_INT 0
80215: PUSH
80216: EMPTY
80217: LIST
80218: LIST
80219: PUSH
80220: LD_INT 0
80222: PUSH
80223: LD_INT 1
80225: NEG
80226: PUSH
80227: EMPTY
80228: LIST
80229: LIST
80230: PUSH
80231: LD_INT 1
80233: PUSH
80234: LD_INT 0
80236: PUSH
80237: EMPTY
80238: LIST
80239: LIST
80240: PUSH
80241: LD_INT 1
80243: PUSH
80244: LD_INT 1
80246: PUSH
80247: EMPTY
80248: LIST
80249: LIST
80250: PUSH
80251: LD_INT 0
80253: PUSH
80254: LD_INT 1
80256: PUSH
80257: EMPTY
80258: LIST
80259: LIST
80260: PUSH
80261: LD_INT 1
80263: NEG
80264: PUSH
80265: LD_INT 0
80267: PUSH
80268: EMPTY
80269: LIST
80270: LIST
80271: PUSH
80272: LD_INT 1
80274: NEG
80275: PUSH
80276: LD_INT 1
80278: NEG
80279: PUSH
80280: EMPTY
80281: LIST
80282: LIST
80283: PUSH
80284: LD_INT 1
80286: NEG
80287: PUSH
80288: LD_INT 2
80290: NEG
80291: PUSH
80292: EMPTY
80293: LIST
80294: LIST
80295: PUSH
80296: LD_INT 0
80298: PUSH
80299: LD_INT 2
80301: NEG
80302: PUSH
80303: EMPTY
80304: LIST
80305: LIST
80306: PUSH
80307: LD_INT 1
80309: PUSH
80310: LD_INT 1
80312: NEG
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PUSH
80318: LD_INT 2
80320: PUSH
80321: LD_INT 0
80323: PUSH
80324: EMPTY
80325: LIST
80326: LIST
80327: PUSH
80328: LD_INT 2
80330: PUSH
80331: LD_INT 1
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PUSH
80338: EMPTY
80339: LIST
80340: LIST
80341: LIST
80342: LIST
80343: LIST
80344: LIST
80345: LIST
80346: LIST
80347: LIST
80348: LIST
80349: LIST
80350: LIST
80351: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
80352: LD_ADDR_VAR 0 49
80356: PUSH
80357: LD_INT 0
80359: PUSH
80360: LD_INT 0
80362: PUSH
80363: EMPTY
80364: LIST
80365: LIST
80366: PUSH
80367: LD_INT 0
80369: PUSH
80370: LD_INT 1
80372: NEG
80373: PUSH
80374: EMPTY
80375: LIST
80376: LIST
80377: PUSH
80378: LD_INT 1
80380: PUSH
80381: LD_INT 0
80383: PUSH
80384: EMPTY
80385: LIST
80386: LIST
80387: PUSH
80388: LD_INT 1
80390: PUSH
80391: LD_INT 1
80393: PUSH
80394: EMPTY
80395: LIST
80396: LIST
80397: PUSH
80398: LD_INT 0
80400: PUSH
80401: LD_INT 1
80403: PUSH
80404: EMPTY
80405: LIST
80406: LIST
80407: PUSH
80408: LD_INT 1
80410: NEG
80411: PUSH
80412: LD_INT 0
80414: PUSH
80415: EMPTY
80416: LIST
80417: LIST
80418: PUSH
80419: LD_INT 1
80421: NEG
80422: PUSH
80423: LD_INT 1
80425: NEG
80426: PUSH
80427: EMPTY
80428: LIST
80429: LIST
80430: PUSH
80431: LD_INT 1
80433: PUSH
80434: LD_INT 1
80436: NEG
80437: PUSH
80438: EMPTY
80439: LIST
80440: LIST
80441: PUSH
80442: LD_INT 2
80444: PUSH
80445: LD_INT 0
80447: PUSH
80448: EMPTY
80449: LIST
80450: LIST
80451: PUSH
80452: LD_INT 2
80454: PUSH
80455: LD_INT 1
80457: PUSH
80458: EMPTY
80459: LIST
80460: LIST
80461: PUSH
80462: LD_INT 2
80464: PUSH
80465: LD_INT 2
80467: PUSH
80468: EMPTY
80469: LIST
80470: LIST
80471: PUSH
80472: LD_INT 1
80474: PUSH
80475: LD_INT 2
80477: PUSH
80478: EMPTY
80479: LIST
80480: LIST
80481: PUSH
80482: EMPTY
80483: LIST
80484: LIST
80485: LIST
80486: LIST
80487: LIST
80488: LIST
80489: LIST
80490: LIST
80491: LIST
80492: LIST
80493: LIST
80494: LIST
80495: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
80496: LD_ADDR_VAR 0 50
80500: PUSH
80501: LD_INT 0
80503: PUSH
80504: LD_INT 0
80506: PUSH
80507: EMPTY
80508: LIST
80509: LIST
80510: PUSH
80511: LD_INT 0
80513: PUSH
80514: LD_INT 1
80516: NEG
80517: PUSH
80518: EMPTY
80519: LIST
80520: LIST
80521: PUSH
80522: LD_INT 1
80524: PUSH
80525: LD_INT 0
80527: PUSH
80528: EMPTY
80529: LIST
80530: LIST
80531: PUSH
80532: LD_INT 1
80534: PUSH
80535: LD_INT 1
80537: PUSH
80538: EMPTY
80539: LIST
80540: LIST
80541: PUSH
80542: LD_INT 0
80544: PUSH
80545: LD_INT 1
80547: PUSH
80548: EMPTY
80549: LIST
80550: LIST
80551: PUSH
80552: LD_INT 1
80554: NEG
80555: PUSH
80556: LD_INT 0
80558: PUSH
80559: EMPTY
80560: LIST
80561: LIST
80562: PUSH
80563: LD_INT 1
80565: NEG
80566: PUSH
80567: LD_INT 1
80569: NEG
80570: PUSH
80571: EMPTY
80572: LIST
80573: LIST
80574: PUSH
80575: LD_INT 2
80577: PUSH
80578: LD_INT 1
80580: PUSH
80581: EMPTY
80582: LIST
80583: LIST
80584: PUSH
80585: LD_INT 2
80587: PUSH
80588: LD_INT 2
80590: PUSH
80591: EMPTY
80592: LIST
80593: LIST
80594: PUSH
80595: LD_INT 1
80597: PUSH
80598: LD_INT 2
80600: PUSH
80601: EMPTY
80602: LIST
80603: LIST
80604: PUSH
80605: LD_INT 0
80607: PUSH
80608: LD_INT 2
80610: PUSH
80611: EMPTY
80612: LIST
80613: LIST
80614: PUSH
80615: LD_INT 1
80617: NEG
80618: PUSH
80619: LD_INT 1
80621: PUSH
80622: EMPTY
80623: LIST
80624: LIST
80625: PUSH
80626: EMPTY
80627: LIST
80628: LIST
80629: LIST
80630: LIST
80631: LIST
80632: LIST
80633: LIST
80634: LIST
80635: LIST
80636: LIST
80637: LIST
80638: LIST
80639: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
80640: LD_ADDR_VAR 0 51
80644: PUSH
80645: LD_INT 0
80647: PUSH
80648: LD_INT 0
80650: PUSH
80651: EMPTY
80652: LIST
80653: LIST
80654: PUSH
80655: LD_INT 0
80657: PUSH
80658: LD_INT 1
80660: NEG
80661: PUSH
80662: EMPTY
80663: LIST
80664: LIST
80665: PUSH
80666: LD_INT 1
80668: PUSH
80669: LD_INT 0
80671: PUSH
80672: EMPTY
80673: LIST
80674: LIST
80675: PUSH
80676: LD_INT 1
80678: PUSH
80679: LD_INT 1
80681: PUSH
80682: EMPTY
80683: LIST
80684: LIST
80685: PUSH
80686: LD_INT 0
80688: PUSH
80689: LD_INT 1
80691: PUSH
80692: EMPTY
80693: LIST
80694: LIST
80695: PUSH
80696: LD_INT 1
80698: NEG
80699: PUSH
80700: LD_INT 0
80702: PUSH
80703: EMPTY
80704: LIST
80705: LIST
80706: PUSH
80707: LD_INT 1
80709: NEG
80710: PUSH
80711: LD_INT 1
80713: NEG
80714: PUSH
80715: EMPTY
80716: LIST
80717: LIST
80718: PUSH
80719: LD_INT 1
80721: PUSH
80722: LD_INT 2
80724: PUSH
80725: EMPTY
80726: LIST
80727: LIST
80728: PUSH
80729: LD_INT 0
80731: PUSH
80732: LD_INT 2
80734: PUSH
80735: EMPTY
80736: LIST
80737: LIST
80738: PUSH
80739: LD_INT 1
80741: NEG
80742: PUSH
80743: LD_INT 1
80745: PUSH
80746: EMPTY
80747: LIST
80748: LIST
80749: PUSH
80750: LD_INT 2
80752: NEG
80753: PUSH
80754: LD_INT 0
80756: PUSH
80757: EMPTY
80758: LIST
80759: LIST
80760: PUSH
80761: LD_INT 2
80763: NEG
80764: PUSH
80765: LD_INT 1
80767: NEG
80768: PUSH
80769: EMPTY
80770: LIST
80771: LIST
80772: PUSH
80773: EMPTY
80774: LIST
80775: LIST
80776: LIST
80777: LIST
80778: LIST
80779: LIST
80780: LIST
80781: LIST
80782: LIST
80783: LIST
80784: LIST
80785: LIST
80786: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80787: LD_ADDR_VAR 0 52
80791: PUSH
80792: LD_INT 0
80794: PUSH
80795: LD_INT 0
80797: PUSH
80798: EMPTY
80799: LIST
80800: LIST
80801: PUSH
80802: LD_INT 0
80804: PUSH
80805: LD_INT 1
80807: NEG
80808: PUSH
80809: EMPTY
80810: LIST
80811: LIST
80812: PUSH
80813: LD_INT 1
80815: PUSH
80816: LD_INT 0
80818: PUSH
80819: EMPTY
80820: LIST
80821: LIST
80822: PUSH
80823: LD_INT 1
80825: PUSH
80826: LD_INT 1
80828: PUSH
80829: EMPTY
80830: LIST
80831: LIST
80832: PUSH
80833: LD_INT 0
80835: PUSH
80836: LD_INT 1
80838: PUSH
80839: EMPTY
80840: LIST
80841: LIST
80842: PUSH
80843: LD_INT 1
80845: NEG
80846: PUSH
80847: LD_INT 0
80849: PUSH
80850: EMPTY
80851: LIST
80852: LIST
80853: PUSH
80854: LD_INT 1
80856: NEG
80857: PUSH
80858: LD_INT 1
80860: NEG
80861: PUSH
80862: EMPTY
80863: LIST
80864: LIST
80865: PUSH
80866: LD_INT 1
80868: NEG
80869: PUSH
80870: LD_INT 2
80872: NEG
80873: PUSH
80874: EMPTY
80875: LIST
80876: LIST
80877: PUSH
80878: LD_INT 1
80880: NEG
80881: PUSH
80882: LD_INT 1
80884: PUSH
80885: EMPTY
80886: LIST
80887: LIST
80888: PUSH
80889: LD_INT 2
80891: NEG
80892: PUSH
80893: LD_INT 0
80895: PUSH
80896: EMPTY
80897: LIST
80898: LIST
80899: PUSH
80900: LD_INT 2
80902: NEG
80903: PUSH
80904: LD_INT 1
80906: NEG
80907: PUSH
80908: EMPTY
80909: LIST
80910: LIST
80911: PUSH
80912: LD_INT 2
80914: NEG
80915: PUSH
80916: LD_INT 2
80918: NEG
80919: PUSH
80920: EMPTY
80921: LIST
80922: LIST
80923: PUSH
80924: EMPTY
80925: LIST
80926: LIST
80927: LIST
80928: LIST
80929: LIST
80930: LIST
80931: LIST
80932: LIST
80933: LIST
80934: LIST
80935: LIST
80936: LIST
80937: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80938: LD_ADDR_VAR 0 53
80942: PUSH
80943: LD_INT 0
80945: PUSH
80946: LD_INT 0
80948: PUSH
80949: EMPTY
80950: LIST
80951: LIST
80952: PUSH
80953: LD_INT 0
80955: PUSH
80956: LD_INT 1
80958: NEG
80959: PUSH
80960: EMPTY
80961: LIST
80962: LIST
80963: PUSH
80964: LD_INT 1
80966: PUSH
80967: LD_INT 0
80969: PUSH
80970: EMPTY
80971: LIST
80972: LIST
80973: PUSH
80974: LD_INT 1
80976: PUSH
80977: LD_INT 1
80979: PUSH
80980: EMPTY
80981: LIST
80982: LIST
80983: PUSH
80984: LD_INT 0
80986: PUSH
80987: LD_INT 1
80989: PUSH
80990: EMPTY
80991: LIST
80992: LIST
80993: PUSH
80994: LD_INT 1
80996: NEG
80997: PUSH
80998: LD_INT 0
81000: PUSH
81001: EMPTY
81002: LIST
81003: LIST
81004: PUSH
81005: LD_INT 1
81007: NEG
81008: PUSH
81009: LD_INT 1
81011: NEG
81012: PUSH
81013: EMPTY
81014: LIST
81015: LIST
81016: PUSH
81017: LD_INT 1
81019: NEG
81020: PUSH
81021: LD_INT 2
81023: NEG
81024: PUSH
81025: EMPTY
81026: LIST
81027: LIST
81028: PUSH
81029: LD_INT 0
81031: PUSH
81032: LD_INT 2
81034: NEG
81035: PUSH
81036: EMPTY
81037: LIST
81038: LIST
81039: PUSH
81040: LD_INT 1
81042: PUSH
81043: LD_INT 1
81045: NEG
81046: PUSH
81047: EMPTY
81048: LIST
81049: LIST
81050: PUSH
81051: LD_INT 2
81053: PUSH
81054: LD_INT 0
81056: PUSH
81057: EMPTY
81058: LIST
81059: LIST
81060: PUSH
81061: LD_INT 2
81063: PUSH
81064: LD_INT 1
81066: PUSH
81067: EMPTY
81068: LIST
81069: LIST
81070: PUSH
81071: LD_INT 2
81073: PUSH
81074: LD_INT 2
81076: PUSH
81077: EMPTY
81078: LIST
81079: LIST
81080: PUSH
81081: LD_INT 1
81083: PUSH
81084: LD_INT 2
81086: PUSH
81087: EMPTY
81088: LIST
81089: LIST
81090: PUSH
81091: LD_INT 0
81093: PUSH
81094: LD_INT 2
81096: PUSH
81097: EMPTY
81098: LIST
81099: LIST
81100: PUSH
81101: LD_INT 1
81103: NEG
81104: PUSH
81105: LD_INT 1
81107: PUSH
81108: EMPTY
81109: LIST
81110: LIST
81111: PUSH
81112: LD_INT 2
81114: NEG
81115: PUSH
81116: LD_INT 0
81118: PUSH
81119: EMPTY
81120: LIST
81121: LIST
81122: PUSH
81123: LD_INT 2
81125: NEG
81126: PUSH
81127: LD_INT 1
81129: NEG
81130: PUSH
81131: EMPTY
81132: LIST
81133: LIST
81134: PUSH
81135: LD_INT 2
81137: NEG
81138: PUSH
81139: LD_INT 2
81141: NEG
81142: PUSH
81143: EMPTY
81144: LIST
81145: LIST
81146: PUSH
81147: EMPTY
81148: LIST
81149: LIST
81150: LIST
81151: LIST
81152: LIST
81153: LIST
81154: LIST
81155: LIST
81156: LIST
81157: LIST
81158: LIST
81159: LIST
81160: LIST
81161: LIST
81162: LIST
81163: LIST
81164: LIST
81165: LIST
81166: LIST
81167: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81168: LD_ADDR_VAR 0 54
81172: PUSH
81173: LD_INT 0
81175: PUSH
81176: LD_INT 0
81178: PUSH
81179: EMPTY
81180: LIST
81181: LIST
81182: PUSH
81183: LD_INT 0
81185: PUSH
81186: LD_INT 1
81188: NEG
81189: PUSH
81190: EMPTY
81191: LIST
81192: LIST
81193: PUSH
81194: LD_INT 1
81196: PUSH
81197: LD_INT 0
81199: PUSH
81200: EMPTY
81201: LIST
81202: LIST
81203: PUSH
81204: LD_INT 1
81206: PUSH
81207: LD_INT 1
81209: PUSH
81210: EMPTY
81211: LIST
81212: LIST
81213: PUSH
81214: LD_INT 0
81216: PUSH
81217: LD_INT 1
81219: PUSH
81220: EMPTY
81221: LIST
81222: LIST
81223: PUSH
81224: LD_INT 1
81226: NEG
81227: PUSH
81228: LD_INT 0
81230: PUSH
81231: EMPTY
81232: LIST
81233: LIST
81234: PUSH
81235: LD_INT 1
81237: NEG
81238: PUSH
81239: LD_INT 1
81241: NEG
81242: PUSH
81243: EMPTY
81244: LIST
81245: LIST
81246: PUSH
81247: LD_INT 1
81249: NEG
81250: PUSH
81251: LD_INT 2
81253: NEG
81254: PUSH
81255: EMPTY
81256: LIST
81257: LIST
81258: PUSH
81259: LD_INT 0
81261: PUSH
81262: LD_INT 2
81264: NEG
81265: PUSH
81266: EMPTY
81267: LIST
81268: LIST
81269: PUSH
81270: LD_INT 1
81272: PUSH
81273: LD_INT 1
81275: NEG
81276: PUSH
81277: EMPTY
81278: LIST
81279: LIST
81280: PUSH
81281: LD_INT 2
81283: PUSH
81284: LD_INT 0
81286: PUSH
81287: EMPTY
81288: LIST
81289: LIST
81290: PUSH
81291: LD_INT 2
81293: PUSH
81294: LD_INT 1
81296: PUSH
81297: EMPTY
81298: LIST
81299: LIST
81300: PUSH
81301: LD_INT 2
81303: PUSH
81304: LD_INT 2
81306: PUSH
81307: EMPTY
81308: LIST
81309: LIST
81310: PUSH
81311: LD_INT 1
81313: PUSH
81314: LD_INT 2
81316: PUSH
81317: EMPTY
81318: LIST
81319: LIST
81320: PUSH
81321: LD_INT 0
81323: PUSH
81324: LD_INT 2
81326: PUSH
81327: EMPTY
81328: LIST
81329: LIST
81330: PUSH
81331: LD_INT 1
81333: NEG
81334: PUSH
81335: LD_INT 1
81337: PUSH
81338: EMPTY
81339: LIST
81340: LIST
81341: PUSH
81342: LD_INT 2
81344: NEG
81345: PUSH
81346: LD_INT 0
81348: PUSH
81349: EMPTY
81350: LIST
81351: LIST
81352: PUSH
81353: LD_INT 2
81355: NEG
81356: PUSH
81357: LD_INT 1
81359: NEG
81360: PUSH
81361: EMPTY
81362: LIST
81363: LIST
81364: PUSH
81365: LD_INT 2
81367: NEG
81368: PUSH
81369: LD_INT 2
81371: NEG
81372: PUSH
81373: EMPTY
81374: LIST
81375: LIST
81376: PUSH
81377: EMPTY
81378: LIST
81379: LIST
81380: LIST
81381: LIST
81382: LIST
81383: LIST
81384: LIST
81385: LIST
81386: LIST
81387: LIST
81388: LIST
81389: LIST
81390: LIST
81391: LIST
81392: LIST
81393: LIST
81394: LIST
81395: LIST
81396: LIST
81397: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81398: LD_ADDR_VAR 0 55
81402: PUSH
81403: LD_INT 0
81405: PUSH
81406: LD_INT 0
81408: PUSH
81409: EMPTY
81410: LIST
81411: LIST
81412: PUSH
81413: LD_INT 0
81415: PUSH
81416: LD_INT 1
81418: NEG
81419: PUSH
81420: EMPTY
81421: LIST
81422: LIST
81423: PUSH
81424: LD_INT 1
81426: PUSH
81427: LD_INT 0
81429: PUSH
81430: EMPTY
81431: LIST
81432: LIST
81433: PUSH
81434: LD_INT 1
81436: PUSH
81437: LD_INT 1
81439: PUSH
81440: EMPTY
81441: LIST
81442: LIST
81443: PUSH
81444: LD_INT 0
81446: PUSH
81447: LD_INT 1
81449: PUSH
81450: EMPTY
81451: LIST
81452: LIST
81453: PUSH
81454: LD_INT 1
81456: NEG
81457: PUSH
81458: LD_INT 0
81460: PUSH
81461: EMPTY
81462: LIST
81463: LIST
81464: PUSH
81465: LD_INT 1
81467: NEG
81468: PUSH
81469: LD_INT 1
81471: NEG
81472: PUSH
81473: EMPTY
81474: LIST
81475: LIST
81476: PUSH
81477: LD_INT 1
81479: NEG
81480: PUSH
81481: LD_INT 2
81483: NEG
81484: PUSH
81485: EMPTY
81486: LIST
81487: LIST
81488: PUSH
81489: LD_INT 0
81491: PUSH
81492: LD_INT 2
81494: NEG
81495: PUSH
81496: EMPTY
81497: LIST
81498: LIST
81499: PUSH
81500: LD_INT 1
81502: PUSH
81503: LD_INT 1
81505: NEG
81506: PUSH
81507: EMPTY
81508: LIST
81509: LIST
81510: PUSH
81511: LD_INT 2
81513: PUSH
81514: LD_INT 0
81516: PUSH
81517: EMPTY
81518: LIST
81519: LIST
81520: PUSH
81521: LD_INT 2
81523: PUSH
81524: LD_INT 1
81526: PUSH
81527: EMPTY
81528: LIST
81529: LIST
81530: PUSH
81531: LD_INT 2
81533: PUSH
81534: LD_INT 2
81536: PUSH
81537: EMPTY
81538: LIST
81539: LIST
81540: PUSH
81541: LD_INT 1
81543: PUSH
81544: LD_INT 2
81546: PUSH
81547: EMPTY
81548: LIST
81549: LIST
81550: PUSH
81551: LD_INT 0
81553: PUSH
81554: LD_INT 2
81556: PUSH
81557: EMPTY
81558: LIST
81559: LIST
81560: PUSH
81561: LD_INT 1
81563: NEG
81564: PUSH
81565: LD_INT 1
81567: PUSH
81568: EMPTY
81569: LIST
81570: LIST
81571: PUSH
81572: LD_INT 2
81574: NEG
81575: PUSH
81576: LD_INT 0
81578: PUSH
81579: EMPTY
81580: LIST
81581: LIST
81582: PUSH
81583: LD_INT 2
81585: NEG
81586: PUSH
81587: LD_INT 1
81589: NEG
81590: PUSH
81591: EMPTY
81592: LIST
81593: LIST
81594: PUSH
81595: LD_INT 2
81597: NEG
81598: PUSH
81599: LD_INT 2
81601: NEG
81602: PUSH
81603: EMPTY
81604: LIST
81605: LIST
81606: PUSH
81607: EMPTY
81608: LIST
81609: LIST
81610: LIST
81611: LIST
81612: LIST
81613: LIST
81614: LIST
81615: LIST
81616: LIST
81617: LIST
81618: LIST
81619: LIST
81620: LIST
81621: LIST
81622: LIST
81623: LIST
81624: LIST
81625: LIST
81626: LIST
81627: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81628: LD_ADDR_VAR 0 56
81632: PUSH
81633: LD_INT 0
81635: PUSH
81636: LD_INT 0
81638: PUSH
81639: EMPTY
81640: LIST
81641: LIST
81642: PUSH
81643: LD_INT 0
81645: PUSH
81646: LD_INT 1
81648: NEG
81649: PUSH
81650: EMPTY
81651: LIST
81652: LIST
81653: PUSH
81654: LD_INT 1
81656: PUSH
81657: LD_INT 0
81659: PUSH
81660: EMPTY
81661: LIST
81662: LIST
81663: PUSH
81664: LD_INT 1
81666: PUSH
81667: LD_INT 1
81669: PUSH
81670: EMPTY
81671: LIST
81672: LIST
81673: PUSH
81674: LD_INT 0
81676: PUSH
81677: LD_INT 1
81679: PUSH
81680: EMPTY
81681: LIST
81682: LIST
81683: PUSH
81684: LD_INT 1
81686: NEG
81687: PUSH
81688: LD_INT 0
81690: PUSH
81691: EMPTY
81692: LIST
81693: LIST
81694: PUSH
81695: LD_INT 1
81697: NEG
81698: PUSH
81699: LD_INT 1
81701: NEG
81702: PUSH
81703: EMPTY
81704: LIST
81705: LIST
81706: PUSH
81707: LD_INT 1
81709: NEG
81710: PUSH
81711: LD_INT 2
81713: NEG
81714: PUSH
81715: EMPTY
81716: LIST
81717: LIST
81718: PUSH
81719: LD_INT 0
81721: PUSH
81722: LD_INT 2
81724: NEG
81725: PUSH
81726: EMPTY
81727: LIST
81728: LIST
81729: PUSH
81730: LD_INT 1
81732: PUSH
81733: LD_INT 1
81735: NEG
81736: PUSH
81737: EMPTY
81738: LIST
81739: LIST
81740: PUSH
81741: LD_INT 2
81743: PUSH
81744: LD_INT 0
81746: PUSH
81747: EMPTY
81748: LIST
81749: LIST
81750: PUSH
81751: LD_INT 2
81753: PUSH
81754: LD_INT 1
81756: PUSH
81757: EMPTY
81758: LIST
81759: LIST
81760: PUSH
81761: LD_INT 2
81763: PUSH
81764: LD_INT 2
81766: PUSH
81767: EMPTY
81768: LIST
81769: LIST
81770: PUSH
81771: LD_INT 1
81773: PUSH
81774: LD_INT 2
81776: PUSH
81777: EMPTY
81778: LIST
81779: LIST
81780: PUSH
81781: LD_INT 0
81783: PUSH
81784: LD_INT 2
81786: PUSH
81787: EMPTY
81788: LIST
81789: LIST
81790: PUSH
81791: LD_INT 1
81793: NEG
81794: PUSH
81795: LD_INT 1
81797: PUSH
81798: EMPTY
81799: LIST
81800: LIST
81801: PUSH
81802: LD_INT 2
81804: NEG
81805: PUSH
81806: LD_INT 0
81808: PUSH
81809: EMPTY
81810: LIST
81811: LIST
81812: PUSH
81813: LD_INT 2
81815: NEG
81816: PUSH
81817: LD_INT 1
81819: NEG
81820: PUSH
81821: EMPTY
81822: LIST
81823: LIST
81824: PUSH
81825: LD_INT 2
81827: NEG
81828: PUSH
81829: LD_INT 2
81831: NEG
81832: PUSH
81833: EMPTY
81834: LIST
81835: LIST
81836: PUSH
81837: EMPTY
81838: LIST
81839: LIST
81840: LIST
81841: LIST
81842: LIST
81843: LIST
81844: LIST
81845: LIST
81846: LIST
81847: LIST
81848: LIST
81849: LIST
81850: LIST
81851: LIST
81852: LIST
81853: LIST
81854: LIST
81855: LIST
81856: LIST
81857: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81858: LD_ADDR_VAR 0 57
81862: PUSH
81863: LD_INT 0
81865: PUSH
81866: LD_INT 0
81868: PUSH
81869: EMPTY
81870: LIST
81871: LIST
81872: PUSH
81873: LD_INT 0
81875: PUSH
81876: LD_INT 1
81878: NEG
81879: PUSH
81880: EMPTY
81881: LIST
81882: LIST
81883: PUSH
81884: LD_INT 1
81886: PUSH
81887: LD_INT 0
81889: PUSH
81890: EMPTY
81891: LIST
81892: LIST
81893: PUSH
81894: LD_INT 1
81896: PUSH
81897: LD_INT 1
81899: PUSH
81900: EMPTY
81901: LIST
81902: LIST
81903: PUSH
81904: LD_INT 0
81906: PUSH
81907: LD_INT 1
81909: PUSH
81910: EMPTY
81911: LIST
81912: LIST
81913: PUSH
81914: LD_INT 1
81916: NEG
81917: PUSH
81918: LD_INT 0
81920: PUSH
81921: EMPTY
81922: LIST
81923: LIST
81924: PUSH
81925: LD_INT 1
81927: NEG
81928: PUSH
81929: LD_INT 1
81931: NEG
81932: PUSH
81933: EMPTY
81934: LIST
81935: LIST
81936: PUSH
81937: LD_INT 1
81939: NEG
81940: PUSH
81941: LD_INT 2
81943: NEG
81944: PUSH
81945: EMPTY
81946: LIST
81947: LIST
81948: PUSH
81949: LD_INT 0
81951: PUSH
81952: LD_INT 2
81954: NEG
81955: PUSH
81956: EMPTY
81957: LIST
81958: LIST
81959: PUSH
81960: LD_INT 1
81962: PUSH
81963: LD_INT 1
81965: NEG
81966: PUSH
81967: EMPTY
81968: LIST
81969: LIST
81970: PUSH
81971: LD_INT 2
81973: PUSH
81974: LD_INT 0
81976: PUSH
81977: EMPTY
81978: LIST
81979: LIST
81980: PUSH
81981: LD_INT 2
81983: PUSH
81984: LD_INT 1
81986: PUSH
81987: EMPTY
81988: LIST
81989: LIST
81990: PUSH
81991: LD_INT 2
81993: PUSH
81994: LD_INT 2
81996: PUSH
81997: EMPTY
81998: LIST
81999: LIST
82000: PUSH
82001: LD_INT 1
82003: PUSH
82004: LD_INT 2
82006: PUSH
82007: EMPTY
82008: LIST
82009: LIST
82010: PUSH
82011: LD_INT 0
82013: PUSH
82014: LD_INT 2
82016: PUSH
82017: EMPTY
82018: LIST
82019: LIST
82020: PUSH
82021: LD_INT 1
82023: NEG
82024: PUSH
82025: LD_INT 1
82027: PUSH
82028: EMPTY
82029: LIST
82030: LIST
82031: PUSH
82032: LD_INT 2
82034: NEG
82035: PUSH
82036: LD_INT 0
82038: PUSH
82039: EMPTY
82040: LIST
82041: LIST
82042: PUSH
82043: LD_INT 2
82045: NEG
82046: PUSH
82047: LD_INT 1
82049: NEG
82050: PUSH
82051: EMPTY
82052: LIST
82053: LIST
82054: PUSH
82055: LD_INT 2
82057: NEG
82058: PUSH
82059: LD_INT 2
82061: NEG
82062: PUSH
82063: EMPTY
82064: LIST
82065: LIST
82066: PUSH
82067: EMPTY
82068: LIST
82069: LIST
82070: LIST
82071: LIST
82072: LIST
82073: LIST
82074: LIST
82075: LIST
82076: LIST
82077: LIST
82078: LIST
82079: LIST
82080: LIST
82081: LIST
82082: LIST
82083: LIST
82084: LIST
82085: LIST
82086: LIST
82087: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
82088: LD_ADDR_VAR 0 58
82092: PUSH
82093: LD_INT 0
82095: PUSH
82096: LD_INT 0
82098: PUSH
82099: EMPTY
82100: LIST
82101: LIST
82102: PUSH
82103: LD_INT 0
82105: PUSH
82106: LD_INT 1
82108: NEG
82109: PUSH
82110: EMPTY
82111: LIST
82112: LIST
82113: PUSH
82114: LD_INT 1
82116: PUSH
82117: LD_INT 0
82119: PUSH
82120: EMPTY
82121: LIST
82122: LIST
82123: PUSH
82124: LD_INT 1
82126: PUSH
82127: LD_INT 1
82129: PUSH
82130: EMPTY
82131: LIST
82132: LIST
82133: PUSH
82134: LD_INT 0
82136: PUSH
82137: LD_INT 1
82139: PUSH
82140: EMPTY
82141: LIST
82142: LIST
82143: PUSH
82144: LD_INT 1
82146: NEG
82147: PUSH
82148: LD_INT 0
82150: PUSH
82151: EMPTY
82152: LIST
82153: LIST
82154: PUSH
82155: LD_INT 1
82157: NEG
82158: PUSH
82159: LD_INT 1
82161: NEG
82162: PUSH
82163: EMPTY
82164: LIST
82165: LIST
82166: PUSH
82167: LD_INT 1
82169: NEG
82170: PUSH
82171: LD_INT 2
82173: NEG
82174: PUSH
82175: EMPTY
82176: LIST
82177: LIST
82178: PUSH
82179: LD_INT 0
82181: PUSH
82182: LD_INT 2
82184: NEG
82185: PUSH
82186: EMPTY
82187: LIST
82188: LIST
82189: PUSH
82190: LD_INT 1
82192: PUSH
82193: LD_INT 1
82195: NEG
82196: PUSH
82197: EMPTY
82198: LIST
82199: LIST
82200: PUSH
82201: LD_INT 2
82203: PUSH
82204: LD_INT 0
82206: PUSH
82207: EMPTY
82208: LIST
82209: LIST
82210: PUSH
82211: LD_INT 2
82213: PUSH
82214: LD_INT 1
82216: PUSH
82217: EMPTY
82218: LIST
82219: LIST
82220: PUSH
82221: LD_INT 2
82223: PUSH
82224: LD_INT 2
82226: PUSH
82227: EMPTY
82228: LIST
82229: LIST
82230: PUSH
82231: LD_INT 1
82233: PUSH
82234: LD_INT 2
82236: PUSH
82237: EMPTY
82238: LIST
82239: LIST
82240: PUSH
82241: LD_INT 0
82243: PUSH
82244: LD_INT 2
82246: PUSH
82247: EMPTY
82248: LIST
82249: LIST
82250: PUSH
82251: LD_INT 1
82253: NEG
82254: PUSH
82255: LD_INT 1
82257: PUSH
82258: EMPTY
82259: LIST
82260: LIST
82261: PUSH
82262: LD_INT 2
82264: NEG
82265: PUSH
82266: LD_INT 0
82268: PUSH
82269: EMPTY
82270: LIST
82271: LIST
82272: PUSH
82273: LD_INT 2
82275: NEG
82276: PUSH
82277: LD_INT 1
82279: NEG
82280: PUSH
82281: EMPTY
82282: LIST
82283: LIST
82284: PUSH
82285: LD_INT 2
82287: NEG
82288: PUSH
82289: LD_INT 2
82291: NEG
82292: PUSH
82293: EMPTY
82294: LIST
82295: LIST
82296: PUSH
82297: EMPTY
82298: LIST
82299: LIST
82300: LIST
82301: LIST
82302: LIST
82303: LIST
82304: LIST
82305: LIST
82306: LIST
82307: LIST
82308: LIST
82309: LIST
82310: LIST
82311: LIST
82312: LIST
82313: LIST
82314: LIST
82315: LIST
82316: LIST
82317: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
82318: LD_ADDR_VAR 0 59
82322: PUSH
82323: LD_INT 0
82325: PUSH
82326: LD_INT 0
82328: PUSH
82329: EMPTY
82330: LIST
82331: LIST
82332: PUSH
82333: LD_INT 0
82335: PUSH
82336: LD_INT 1
82338: NEG
82339: PUSH
82340: EMPTY
82341: LIST
82342: LIST
82343: PUSH
82344: LD_INT 1
82346: PUSH
82347: LD_INT 0
82349: PUSH
82350: EMPTY
82351: LIST
82352: LIST
82353: PUSH
82354: LD_INT 1
82356: PUSH
82357: LD_INT 1
82359: PUSH
82360: EMPTY
82361: LIST
82362: LIST
82363: PUSH
82364: LD_INT 0
82366: PUSH
82367: LD_INT 1
82369: PUSH
82370: EMPTY
82371: LIST
82372: LIST
82373: PUSH
82374: LD_INT 1
82376: NEG
82377: PUSH
82378: LD_INT 0
82380: PUSH
82381: EMPTY
82382: LIST
82383: LIST
82384: PUSH
82385: LD_INT 1
82387: NEG
82388: PUSH
82389: LD_INT 1
82391: NEG
82392: PUSH
82393: EMPTY
82394: LIST
82395: LIST
82396: PUSH
82397: EMPTY
82398: LIST
82399: LIST
82400: LIST
82401: LIST
82402: LIST
82403: LIST
82404: LIST
82405: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
82406: LD_ADDR_VAR 0 60
82410: PUSH
82411: LD_INT 0
82413: PUSH
82414: LD_INT 0
82416: PUSH
82417: EMPTY
82418: LIST
82419: LIST
82420: PUSH
82421: LD_INT 0
82423: PUSH
82424: LD_INT 1
82426: NEG
82427: PUSH
82428: EMPTY
82429: LIST
82430: LIST
82431: PUSH
82432: LD_INT 1
82434: PUSH
82435: LD_INT 0
82437: PUSH
82438: EMPTY
82439: LIST
82440: LIST
82441: PUSH
82442: LD_INT 1
82444: PUSH
82445: LD_INT 1
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: PUSH
82452: LD_INT 0
82454: PUSH
82455: LD_INT 1
82457: PUSH
82458: EMPTY
82459: LIST
82460: LIST
82461: PUSH
82462: LD_INT 1
82464: NEG
82465: PUSH
82466: LD_INT 0
82468: PUSH
82469: EMPTY
82470: LIST
82471: LIST
82472: PUSH
82473: LD_INT 1
82475: NEG
82476: PUSH
82477: LD_INT 1
82479: NEG
82480: PUSH
82481: EMPTY
82482: LIST
82483: LIST
82484: PUSH
82485: EMPTY
82486: LIST
82487: LIST
82488: LIST
82489: LIST
82490: LIST
82491: LIST
82492: LIST
82493: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
82494: LD_ADDR_VAR 0 61
82498: PUSH
82499: LD_INT 0
82501: PUSH
82502: LD_INT 0
82504: PUSH
82505: EMPTY
82506: LIST
82507: LIST
82508: PUSH
82509: LD_INT 0
82511: PUSH
82512: LD_INT 1
82514: NEG
82515: PUSH
82516: EMPTY
82517: LIST
82518: LIST
82519: PUSH
82520: LD_INT 1
82522: PUSH
82523: LD_INT 0
82525: PUSH
82526: EMPTY
82527: LIST
82528: LIST
82529: PUSH
82530: LD_INT 1
82532: PUSH
82533: LD_INT 1
82535: PUSH
82536: EMPTY
82537: LIST
82538: LIST
82539: PUSH
82540: LD_INT 0
82542: PUSH
82543: LD_INT 1
82545: PUSH
82546: EMPTY
82547: LIST
82548: LIST
82549: PUSH
82550: LD_INT 1
82552: NEG
82553: PUSH
82554: LD_INT 0
82556: PUSH
82557: EMPTY
82558: LIST
82559: LIST
82560: PUSH
82561: LD_INT 1
82563: NEG
82564: PUSH
82565: LD_INT 1
82567: NEG
82568: PUSH
82569: EMPTY
82570: LIST
82571: LIST
82572: PUSH
82573: EMPTY
82574: LIST
82575: LIST
82576: LIST
82577: LIST
82578: LIST
82579: LIST
82580: LIST
82581: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
82582: LD_ADDR_VAR 0 62
82586: PUSH
82587: LD_INT 0
82589: PUSH
82590: LD_INT 0
82592: PUSH
82593: EMPTY
82594: LIST
82595: LIST
82596: PUSH
82597: LD_INT 0
82599: PUSH
82600: LD_INT 1
82602: NEG
82603: PUSH
82604: EMPTY
82605: LIST
82606: LIST
82607: PUSH
82608: LD_INT 1
82610: PUSH
82611: LD_INT 0
82613: PUSH
82614: EMPTY
82615: LIST
82616: LIST
82617: PUSH
82618: LD_INT 1
82620: PUSH
82621: LD_INT 1
82623: PUSH
82624: EMPTY
82625: LIST
82626: LIST
82627: PUSH
82628: LD_INT 0
82630: PUSH
82631: LD_INT 1
82633: PUSH
82634: EMPTY
82635: LIST
82636: LIST
82637: PUSH
82638: LD_INT 1
82640: NEG
82641: PUSH
82642: LD_INT 0
82644: PUSH
82645: EMPTY
82646: LIST
82647: LIST
82648: PUSH
82649: LD_INT 1
82651: NEG
82652: PUSH
82653: LD_INT 1
82655: NEG
82656: PUSH
82657: EMPTY
82658: LIST
82659: LIST
82660: PUSH
82661: EMPTY
82662: LIST
82663: LIST
82664: LIST
82665: LIST
82666: LIST
82667: LIST
82668: LIST
82669: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
82670: LD_ADDR_VAR 0 63
82674: PUSH
82675: LD_INT 0
82677: PUSH
82678: LD_INT 0
82680: PUSH
82681: EMPTY
82682: LIST
82683: LIST
82684: PUSH
82685: LD_INT 0
82687: PUSH
82688: LD_INT 1
82690: NEG
82691: PUSH
82692: EMPTY
82693: LIST
82694: LIST
82695: PUSH
82696: LD_INT 1
82698: PUSH
82699: LD_INT 0
82701: PUSH
82702: EMPTY
82703: LIST
82704: LIST
82705: PUSH
82706: LD_INT 1
82708: PUSH
82709: LD_INT 1
82711: PUSH
82712: EMPTY
82713: LIST
82714: LIST
82715: PUSH
82716: LD_INT 0
82718: PUSH
82719: LD_INT 1
82721: PUSH
82722: EMPTY
82723: LIST
82724: LIST
82725: PUSH
82726: LD_INT 1
82728: NEG
82729: PUSH
82730: LD_INT 0
82732: PUSH
82733: EMPTY
82734: LIST
82735: LIST
82736: PUSH
82737: LD_INT 1
82739: NEG
82740: PUSH
82741: LD_INT 1
82743: NEG
82744: PUSH
82745: EMPTY
82746: LIST
82747: LIST
82748: PUSH
82749: EMPTY
82750: LIST
82751: LIST
82752: LIST
82753: LIST
82754: LIST
82755: LIST
82756: LIST
82757: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
82758: LD_ADDR_VAR 0 64
82762: PUSH
82763: LD_INT 0
82765: PUSH
82766: LD_INT 0
82768: PUSH
82769: EMPTY
82770: LIST
82771: LIST
82772: PUSH
82773: LD_INT 0
82775: PUSH
82776: LD_INT 1
82778: NEG
82779: PUSH
82780: EMPTY
82781: LIST
82782: LIST
82783: PUSH
82784: LD_INT 1
82786: PUSH
82787: LD_INT 0
82789: PUSH
82790: EMPTY
82791: LIST
82792: LIST
82793: PUSH
82794: LD_INT 1
82796: PUSH
82797: LD_INT 1
82799: PUSH
82800: EMPTY
82801: LIST
82802: LIST
82803: PUSH
82804: LD_INT 0
82806: PUSH
82807: LD_INT 1
82809: PUSH
82810: EMPTY
82811: LIST
82812: LIST
82813: PUSH
82814: LD_INT 1
82816: NEG
82817: PUSH
82818: LD_INT 0
82820: PUSH
82821: EMPTY
82822: LIST
82823: LIST
82824: PUSH
82825: LD_INT 1
82827: NEG
82828: PUSH
82829: LD_INT 1
82831: NEG
82832: PUSH
82833: EMPTY
82834: LIST
82835: LIST
82836: PUSH
82837: EMPTY
82838: LIST
82839: LIST
82840: LIST
82841: LIST
82842: LIST
82843: LIST
82844: LIST
82845: ST_TO_ADDR
// end ; 1 :
82846: GO 88743
82848: LD_INT 1
82850: DOUBLE
82851: EQUAL
82852: IFTRUE 82856
82854: GO 85479
82856: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
82857: LD_ADDR_VAR 0 11
82861: PUSH
82862: LD_INT 1
82864: NEG
82865: PUSH
82866: LD_INT 3
82868: NEG
82869: PUSH
82870: EMPTY
82871: LIST
82872: LIST
82873: PUSH
82874: LD_INT 0
82876: PUSH
82877: LD_INT 3
82879: NEG
82880: PUSH
82881: EMPTY
82882: LIST
82883: LIST
82884: PUSH
82885: LD_INT 1
82887: PUSH
82888: LD_INT 2
82890: NEG
82891: PUSH
82892: EMPTY
82893: LIST
82894: LIST
82895: PUSH
82896: EMPTY
82897: LIST
82898: LIST
82899: LIST
82900: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
82901: LD_ADDR_VAR 0 12
82905: PUSH
82906: LD_INT 2
82908: PUSH
82909: LD_INT 1
82911: NEG
82912: PUSH
82913: EMPTY
82914: LIST
82915: LIST
82916: PUSH
82917: LD_INT 3
82919: PUSH
82920: LD_INT 0
82922: PUSH
82923: EMPTY
82924: LIST
82925: LIST
82926: PUSH
82927: LD_INT 3
82929: PUSH
82930: LD_INT 1
82932: PUSH
82933: EMPTY
82934: LIST
82935: LIST
82936: PUSH
82937: EMPTY
82938: LIST
82939: LIST
82940: LIST
82941: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
82942: LD_ADDR_VAR 0 13
82946: PUSH
82947: LD_INT 3
82949: PUSH
82950: LD_INT 2
82952: PUSH
82953: EMPTY
82954: LIST
82955: LIST
82956: PUSH
82957: LD_INT 3
82959: PUSH
82960: LD_INT 3
82962: PUSH
82963: EMPTY
82964: LIST
82965: LIST
82966: PUSH
82967: LD_INT 2
82969: PUSH
82970: LD_INT 3
82972: PUSH
82973: EMPTY
82974: LIST
82975: LIST
82976: PUSH
82977: EMPTY
82978: LIST
82979: LIST
82980: LIST
82981: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
82982: LD_ADDR_VAR 0 14
82986: PUSH
82987: LD_INT 1
82989: PUSH
82990: LD_INT 3
82992: PUSH
82993: EMPTY
82994: LIST
82995: LIST
82996: PUSH
82997: LD_INT 0
82999: PUSH
83000: LD_INT 3
83002: PUSH
83003: EMPTY
83004: LIST
83005: LIST
83006: PUSH
83007: LD_INT 1
83009: NEG
83010: PUSH
83011: LD_INT 2
83013: PUSH
83014: EMPTY
83015: LIST
83016: LIST
83017: PUSH
83018: EMPTY
83019: LIST
83020: LIST
83021: LIST
83022: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
83023: LD_ADDR_VAR 0 15
83027: PUSH
83028: LD_INT 2
83030: NEG
83031: PUSH
83032: LD_INT 1
83034: PUSH
83035: EMPTY
83036: LIST
83037: LIST
83038: PUSH
83039: LD_INT 3
83041: NEG
83042: PUSH
83043: LD_INT 0
83045: PUSH
83046: EMPTY
83047: LIST
83048: LIST
83049: PUSH
83050: LD_INT 3
83052: NEG
83053: PUSH
83054: LD_INT 1
83056: NEG
83057: PUSH
83058: EMPTY
83059: LIST
83060: LIST
83061: PUSH
83062: EMPTY
83063: LIST
83064: LIST
83065: LIST
83066: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83067: LD_ADDR_VAR 0 16
83071: PUSH
83072: LD_INT 2
83074: NEG
83075: PUSH
83076: LD_INT 3
83078: NEG
83079: PUSH
83080: EMPTY
83081: LIST
83082: LIST
83083: PUSH
83084: LD_INT 3
83086: NEG
83087: PUSH
83088: LD_INT 2
83090: NEG
83091: PUSH
83092: EMPTY
83093: LIST
83094: LIST
83095: PUSH
83096: LD_INT 3
83098: NEG
83099: PUSH
83100: LD_INT 3
83102: NEG
83103: PUSH
83104: EMPTY
83105: LIST
83106: LIST
83107: PUSH
83108: EMPTY
83109: LIST
83110: LIST
83111: LIST
83112: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
83113: LD_ADDR_VAR 0 17
83117: PUSH
83118: LD_INT 1
83120: NEG
83121: PUSH
83122: LD_INT 3
83124: NEG
83125: PUSH
83126: EMPTY
83127: LIST
83128: LIST
83129: PUSH
83130: LD_INT 0
83132: PUSH
83133: LD_INT 3
83135: NEG
83136: PUSH
83137: EMPTY
83138: LIST
83139: LIST
83140: PUSH
83141: LD_INT 1
83143: PUSH
83144: LD_INT 2
83146: NEG
83147: PUSH
83148: EMPTY
83149: LIST
83150: LIST
83151: PUSH
83152: EMPTY
83153: LIST
83154: LIST
83155: LIST
83156: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
83157: LD_ADDR_VAR 0 18
83161: PUSH
83162: LD_INT 2
83164: PUSH
83165: LD_INT 1
83167: NEG
83168: PUSH
83169: EMPTY
83170: LIST
83171: LIST
83172: PUSH
83173: LD_INT 3
83175: PUSH
83176: LD_INT 0
83178: PUSH
83179: EMPTY
83180: LIST
83181: LIST
83182: PUSH
83183: LD_INT 3
83185: PUSH
83186: LD_INT 1
83188: PUSH
83189: EMPTY
83190: LIST
83191: LIST
83192: PUSH
83193: EMPTY
83194: LIST
83195: LIST
83196: LIST
83197: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
83198: LD_ADDR_VAR 0 19
83202: PUSH
83203: LD_INT 3
83205: PUSH
83206: LD_INT 2
83208: PUSH
83209: EMPTY
83210: LIST
83211: LIST
83212: PUSH
83213: LD_INT 3
83215: PUSH
83216: LD_INT 3
83218: PUSH
83219: EMPTY
83220: LIST
83221: LIST
83222: PUSH
83223: LD_INT 2
83225: PUSH
83226: LD_INT 3
83228: PUSH
83229: EMPTY
83230: LIST
83231: LIST
83232: PUSH
83233: EMPTY
83234: LIST
83235: LIST
83236: LIST
83237: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
83238: LD_ADDR_VAR 0 20
83242: PUSH
83243: LD_INT 1
83245: PUSH
83246: LD_INT 3
83248: PUSH
83249: EMPTY
83250: LIST
83251: LIST
83252: PUSH
83253: LD_INT 0
83255: PUSH
83256: LD_INT 3
83258: PUSH
83259: EMPTY
83260: LIST
83261: LIST
83262: PUSH
83263: LD_INT 1
83265: NEG
83266: PUSH
83267: LD_INT 2
83269: PUSH
83270: EMPTY
83271: LIST
83272: LIST
83273: PUSH
83274: EMPTY
83275: LIST
83276: LIST
83277: LIST
83278: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
83279: LD_ADDR_VAR 0 21
83283: PUSH
83284: LD_INT 2
83286: NEG
83287: PUSH
83288: LD_INT 1
83290: PUSH
83291: EMPTY
83292: LIST
83293: LIST
83294: PUSH
83295: LD_INT 3
83297: NEG
83298: PUSH
83299: LD_INT 0
83301: PUSH
83302: EMPTY
83303: LIST
83304: LIST
83305: PUSH
83306: LD_INT 3
83308: NEG
83309: PUSH
83310: LD_INT 1
83312: NEG
83313: PUSH
83314: EMPTY
83315: LIST
83316: LIST
83317: PUSH
83318: EMPTY
83319: LIST
83320: LIST
83321: LIST
83322: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83323: LD_ADDR_VAR 0 22
83327: PUSH
83328: LD_INT 2
83330: NEG
83331: PUSH
83332: LD_INT 3
83334: NEG
83335: PUSH
83336: EMPTY
83337: LIST
83338: LIST
83339: PUSH
83340: LD_INT 3
83342: NEG
83343: PUSH
83344: LD_INT 2
83346: NEG
83347: PUSH
83348: EMPTY
83349: LIST
83350: LIST
83351: PUSH
83352: LD_INT 3
83354: NEG
83355: PUSH
83356: LD_INT 3
83358: NEG
83359: PUSH
83360: EMPTY
83361: LIST
83362: LIST
83363: PUSH
83364: EMPTY
83365: LIST
83366: LIST
83367: LIST
83368: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
83369: LD_ADDR_VAR 0 23
83373: PUSH
83374: LD_INT 0
83376: PUSH
83377: LD_INT 3
83379: NEG
83380: PUSH
83381: EMPTY
83382: LIST
83383: LIST
83384: PUSH
83385: LD_INT 1
83387: NEG
83388: PUSH
83389: LD_INT 4
83391: NEG
83392: PUSH
83393: EMPTY
83394: LIST
83395: LIST
83396: PUSH
83397: LD_INT 1
83399: PUSH
83400: LD_INT 3
83402: NEG
83403: PUSH
83404: EMPTY
83405: LIST
83406: LIST
83407: PUSH
83408: EMPTY
83409: LIST
83410: LIST
83411: LIST
83412: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
83413: LD_ADDR_VAR 0 24
83417: PUSH
83418: LD_INT 3
83420: PUSH
83421: LD_INT 0
83423: PUSH
83424: EMPTY
83425: LIST
83426: LIST
83427: PUSH
83428: LD_INT 3
83430: PUSH
83431: LD_INT 1
83433: NEG
83434: PUSH
83435: EMPTY
83436: LIST
83437: LIST
83438: PUSH
83439: LD_INT 4
83441: PUSH
83442: LD_INT 1
83444: PUSH
83445: EMPTY
83446: LIST
83447: LIST
83448: PUSH
83449: EMPTY
83450: LIST
83451: LIST
83452: LIST
83453: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
83454: LD_ADDR_VAR 0 25
83458: PUSH
83459: LD_INT 3
83461: PUSH
83462: LD_INT 3
83464: PUSH
83465: EMPTY
83466: LIST
83467: LIST
83468: PUSH
83469: LD_INT 4
83471: PUSH
83472: LD_INT 3
83474: PUSH
83475: EMPTY
83476: LIST
83477: LIST
83478: PUSH
83479: LD_INT 3
83481: PUSH
83482: LD_INT 4
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: PUSH
83489: EMPTY
83490: LIST
83491: LIST
83492: LIST
83493: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
83494: LD_ADDR_VAR 0 26
83498: PUSH
83499: LD_INT 0
83501: PUSH
83502: LD_INT 3
83504: PUSH
83505: EMPTY
83506: LIST
83507: LIST
83508: PUSH
83509: LD_INT 1
83511: PUSH
83512: LD_INT 4
83514: PUSH
83515: EMPTY
83516: LIST
83517: LIST
83518: PUSH
83519: LD_INT 1
83521: NEG
83522: PUSH
83523: LD_INT 3
83525: PUSH
83526: EMPTY
83527: LIST
83528: LIST
83529: PUSH
83530: EMPTY
83531: LIST
83532: LIST
83533: LIST
83534: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
83535: LD_ADDR_VAR 0 27
83539: PUSH
83540: LD_INT 3
83542: NEG
83543: PUSH
83544: LD_INT 0
83546: PUSH
83547: EMPTY
83548: LIST
83549: LIST
83550: PUSH
83551: LD_INT 3
83553: NEG
83554: PUSH
83555: LD_INT 1
83557: PUSH
83558: EMPTY
83559: LIST
83560: LIST
83561: PUSH
83562: LD_INT 4
83564: NEG
83565: PUSH
83566: LD_INT 1
83568: NEG
83569: PUSH
83570: EMPTY
83571: LIST
83572: LIST
83573: PUSH
83574: EMPTY
83575: LIST
83576: LIST
83577: LIST
83578: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
83579: LD_ADDR_VAR 0 28
83583: PUSH
83584: LD_INT 3
83586: NEG
83587: PUSH
83588: LD_INT 3
83590: NEG
83591: PUSH
83592: EMPTY
83593: LIST
83594: LIST
83595: PUSH
83596: LD_INT 3
83598: NEG
83599: PUSH
83600: LD_INT 4
83602: NEG
83603: PUSH
83604: EMPTY
83605: LIST
83606: LIST
83607: PUSH
83608: LD_INT 4
83610: NEG
83611: PUSH
83612: LD_INT 3
83614: NEG
83615: PUSH
83616: EMPTY
83617: LIST
83618: LIST
83619: PUSH
83620: EMPTY
83621: LIST
83622: LIST
83623: LIST
83624: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
83625: LD_ADDR_VAR 0 29
83629: PUSH
83630: LD_INT 1
83632: NEG
83633: PUSH
83634: LD_INT 3
83636: NEG
83637: PUSH
83638: EMPTY
83639: LIST
83640: LIST
83641: PUSH
83642: LD_INT 0
83644: PUSH
83645: LD_INT 3
83647: NEG
83648: PUSH
83649: EMPTY
83650: LIST
83651: LIST
83652: PUSH
83653: LD_INT 1
83655: PUSH
83656: LD_INT 2
83658: NEG
83659: PUSH
83660: EMPTY
83661: LIST
83662: LIST
83663: PUSH
83664: LD_INT 1
83666: NEG
83667: PUSH
83668: LD_INT 4
83670: NEG
83671: PUSH
83672: EMPTY
83673: LIST
83674: LIST
83675: PUSH
83676: LD_INT 0
83678: PUSH
83679: LD_INT 4
83681: NEG
83682: PUSH
83683: EMPTY
83684: LIST
83685: LIST
83686: PUSH
83687: LD_INT 1
83689: PUSH
83690: LD_INT 3
83692: NEG
83693: PUSH
83694: EMPTY
83695: LIST
83696: LIST
83697: PUSH
83698: LD_INT 1
83700: NEG
83701: PUSH
83702: LD_INT 5
83704: NEG
83705: PUSH
83706: EMPTY
83707: LIST
83708: LIST
83709: PUSH
83710: LD_INT 0
83712: PUSH
83713: LD_INT 5
83715: NEG
83716: PUSH
83717: EMPTY
83718: LIST
83719: LIST
83720: PUSH
83721: LD_INT 1
83723: PUSH
83724: LD_INT 4
83726: NEG
83727: PUSH
83728: EMPTY
83729: LIST
83730: LIST
83731: PUSH
83732: LD_INT 1
83734: NEG
83735: PUSH
83736: LD_INT 6
83738: NEG
83739: PUSH
83740: EMPTY
83741: LIST
83742: LIST
83743: PUSH
83744: LD_INT 0
83746: PUSH
83747: LD_INT 6
83749: NEG
83750: PUSH
83751: EMPTY
83752: LIST
83753: LIST
83754: PUSH
83755: LD_INT 1
83757: PUSH
83758: LD_INT 5
83760: NEG
83761: PUSH
83762: EMPTY
83763: LIST
83764: LIST
83765: PUSH
83766: EMPTY
83767: LIST
83768: LIST
83769: LIST
83770: LIST
83771: LIST
83772: LIST
83773: LIST
83774: LIST
83775: LIST
83776: LIST
83777: LIST
83778: LIST
83779: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
83780: LD_ADDR_VAR 0 30
83784: PUSH
83785: LD_INT 2
83787: PUSH
83788: LD_INT 1
83790: NEG
83791: PUSH
83792: EMPTY
83793: LIST
83794: LIST
83795: PUSH
83796: LD_INT 3
83798: PUSH
83799: LD_INT 0
83801: PUSH
83802: EMPTY
83803: LIST
83804: LIST
83805: PUSH
83806: LD_INT 3
83808: PUSH
83809: LD_INT 1
83811: PUSH
83812: EMPTY
83813: LIST
83814: LIST
83815: PUSH
83816: LD_INT 3
83818: PUSH
83819: LD_INT 1
83821: NEG
83822: PUSH
83823: EMPTY
83824: LIST
83825: LIST
83826: PUSH
83827: LD_INT 4
83829: PUSH
83830: LD_INT 0
83832: PUSH
83833: EMPTY
83834: LIST
83835: LIST
83836: PUSH
83837: LD_INT 4
83839: PUSH
83840: LD_INT 1
83842: PUSH
83843: EMPTY
83844: LIST
83845: LIST
83846: PUSH
83847: LD_INT 4
83849: PUSH
83850: LD_INT 1
83852: NEG
83853: PUSH
83854: EMPTY
83855: LIST
83856: LIST
83857: PUSH
83858: LD_INT 5
83860: PUSH
83861: LD_INT 0
83863: PUSH
83864: EMPTY
83865: LIST
83866: LIST
83867: PUSH
83868: LD_INT 5
83870: PUSH
83871: LD_INT 1
83873: PUSH
83874: EMPTY
83875: LIST
83876: LIST
83877: PUSH
83878: LD_INT 5
83880: PUSH
83881: LD_INT 1
83883: NEG
83884: PUSH
83885: EMPTY
83886: LIST
83887: LIST
83888: PUSH
83889: LD_INT 6
83891: PUSH
83892: LD_INT 0
83894: PUSH
83895: EMPTY
83896: LIST
83897: LIST
83898: PUSH
83899: LD_INT 6
83901: PUSH
83902: LD_INT 1
83904: PUSH
83905: EMPTY
83906: LIST
83907: LIST
83908: PUSH
83909: EMPTY
83910: LIST
83911: LIST
83912: LIST
83913: LIST
83914: LIST
83915: LIST
83916: LIST
83917: LIST
83918: LIST
83919: LIST
83920: LIST
83921: LIST
83922: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
83923: LD_ADDR_VAR 0 31
83927: PUSH
83928: LD_INT 3
83930: PUSH
83931: LD_INT 2
83933: PUSH
83934: EMPTY
83935: LIST
83936: LIST
83937: PUSH
83938: LD_INT 3
83940: PUSH
83941: LD_INT 3
83943: PUSH
83944: EMPTY
83945: LIST
83946: LIST
83947: PUSH
83948: LD_INT 2
83950: PUSH
83951: LD_INT 3
83953: PUSH
83954: EMPTY
83955: LIST
83956: LIST
83957: PUSH
83958: LD_INT 4
83960: PUSH
83961: LD_INT 3
83963: PUSH
83964: EMPTY
83965: LIST
83966: LIST
83967: PUSH
83968: LD_INT 4
83970: PUSH
83971: LD_INT 4
83973: PUSH
83974: EMPTY
83975: LIST
83976: LIST
83977: PUSH
83978: LD_INT 3
83980: PUSH
83981: LD_INT 4
83983: PUSH
83984: EMPTY
83985: LIST
83986: LIST
83987: PUSH
83988: LD_INT 5
83990: PUSH
83991: LD_INT 4
83993: PUSH
83994: EMPTY
83995: LIST
83996: LIST
83997: PUSH
83998: LD_INT 5
84000: PUSH
84001: LD_INT 5
84003: PUSH
84004: EMPTY
84005: LIST
84006: LIST
84007: PUSH
84008: LD_INT 4
84010: PUSH
84011: LD_INT 5
84013: PUSH
84014: EMPTY
84015: LIST
84016: LIST
84017: PUSH
84018: LD_INT 6
84020: PUSH
84021: LD_INT 5
84023: PUSH
84024: EMPTY
84025: LIST
84026: LIST
84027: PUSH
84028: LD_INT 6
84030: PUSH
84031: LD_INT 6
84033: PUSH
84034: EMPTY
84035: LIST
84036: LIST
84037: PUSH
84038: LD_INT 5
84040: PUSH
84041: LD_INT 6
84043: PUSH
84044: EMPTY
84045: LIST
84046: LIST
84047: PUSH
84048: EMPTY
84049: LIST
84050: LIST
84051: LIST
84052: LIST
84053: LIST
84054: LIST
84055: LIST
84056: LIST
84057: LIST
84058: LIST
84059: LIST
84060: LIST
84061: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
84062: LD_ADDR_VAR 0 32
84066: PUSH
84067: LD_INT 1
84069: PUSH
84070: LD_INT 3
84072: PUSH
84073: EMPTY
84074: LIST
84075: LIST
84076: PUSH
84077: LD_INT 0
84079: PUSH
84080: LD_INT 3
84082: PUSH
84083: EMPTY
84084: LIST
84085: LIST
84086: PUSH
84087: LD_INT 1
84089: NEG
84090: PUSH
84091: LD_INT 2
84093: PUSH
84094: EMPTY
84095: LIST
84096: LIST
84097: PUSH
84098: LD_INT 1
84100: PUSH
84101: LD_INT 4
84103: PUSH
84104: EMPTY
84105: LIST
84106: LIST
84107: PUSH
84108: LD_INT 0
84110: PUSH
84111: LD_INT 4
84113: PUSH
84114: EMPTY
84115: LIST
84116: LIST
84117: PUSH
84118: LD_INT 1
84120: NEG
84121: PUSH
84122: LD_INT 3
84124: PUSH
84125: EMPTY
84126: LIST
84127: LIST
84128: PUSH
84129: LD_INT 1
84131: PUSH
84132: LD_INT 5
84134: PUSH
84135: EMPTY
84136: LIST
84137: LIST
84138: PUSH
84139: LD_INT 0
84141: PUSH
84142: LD_INT 5
84144: PUSH
84145: EMPTY
84146: LIST
84147: LIST
84148: PUSH
84149: LD_INT 1
84151: NEG
84152: PUSH
84153: LD_INT 4
84155: PUSH
84156: EMPTY
84157: LIST
84158: LIST
84159: PUSH
84160: LD_INT 1
84162: PUSH
84163: LD_INT 6
84165: PUSH
84166: EMPTY
84167: LIST
84168: LIST
84169: PUSH
84170: LD_INT 0
84172: PUSH
84173: LD_INT 6
84175: PUSH
84176: EMPTY
84177: LIST
84178: LIST
84179: PUSH
84180: LD_INT 1
84182: NEG
84183: PUSH
84184: LD_INT 5
84186: PUSH
84187: EMPTY
84188: LIST
84189: LIST
84190: PUSH
84191: EMPTY
84192: LIST
84193: LIST
84194: LIST
84195: LIST
84196: LIST
84197: LIST
84198: LIST
84199: LIST
84200: LIST
84201: LIST
84202: LIST
84203: LIST
84204: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
84205: LD_ADDR_VAR 0 33
84209: PUSH
84210: LD_INT 2
84212: NEG
84213: PUSH
84214: LD_INT 1
84216: PUSH
84217: EMPTY
84218: LIST
84219: LIST
84220: PUSH
84221: LD_INT 3
84223: NEG
84224: PUSH
84225: LD_INT 0
84227: PUSH
84228: EMPTY
84229: LIST
84230: LIST
84231: PUSH
84232: LD_INT 3
84234: NEG
84235: PUSH
84236: LD_INT 1
84238: NEG
84239: PUSH
84240: EMPTY
84241: LIST
84242: LIST
84243: PUSH
84244: LD_INT 3
84246: NEG
84247: PUSH
84248: LD_INT 1
84250: PUSH
84251: EMPTY
84252: LIST
84253: LIST
84254: PUSH
84255: LD_INT 4
84257: NEG
84258: PUSH
84259: LD_INT 0
84261: PUSH
84262: EMPTY
84263: LIST
84264: LIST
84265: PUSH
84266: LD_INT 4
84268: NEG
84269: PUSH
84270: LD_INT 1
84272: NEG
84273: PUSH
84274: EMPTY
84275: LIST
84276: LIST
84277: PUSH
84278: LD_INT 4
84280: NEG
84281: PUSH
84282: LD_INT 1
84284: PUSH
84285: EMPTY
84286: LIST
84287: LIST
84288: PUSH
84289: LD_INT 5
84291: NEG
84292: PUSH
84293: LD_INT 0
84295: PUSH
84296: EMPTY
84297: LIST
84298: LIST
84299: PUSH
84300: LD_INT 5
84302: NEG
84303: PUSH
84304: LD_INT 1
84306: NEG
84307: PUSH
84308: EMPTY
84309: LIST
84310: LIST
84311: PUSH
84312: LD_INT 5
84314: NEG
84315: PUSH
84316: LD_INT 1
84318: PUSH
84319: EMPTY
84320: LIST
84321: LIST
84322: PUSH
84323: LD_INT 6
84325: NEG
84326: PUSH
84327: LD_INT 0
84329: PUSH
84330: EMPTY
84331: LIST
84332: LIST
84333: PUSH
84334: LD_INT 6
84336: NEG
84337: PUSH
84338: LD_INT 1
84340: NEG
84341: PUSH
84342: EMPTY
84343: LIST
84344: LIST
84345: PUSH
84346: EMPTY
84347: LIST
84348: LIST
84349: LIST
84350: LIST
84351: LIST
84352: LIST
84353: LIST
84354: LIST
84355: LIST
84356: LIST
84357: LIST
84358: LIST
84359: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
84360: LD_ADDR_VAR 0 34
84364: PUSH
84365: LD_INT 2
84367: NEG
84368: PUSH
84369: LD_INT 3
84371: NEG
84372: PUSH
84373: EMPTY
84374: LIST
84375: LIST
84376: PUSH
84377: LD_INT 3
84379: NEG
84380: PUSH
84381: LD_INT 2
84383: NEG
84384: PUSH
84385: EMPTY
84386: LIST
84387: LIST
84388: PUSH
84389: LD_INT 3
84391: NEG
84392: PUSH
84393: LD_INT 3
84395: NEG
84396: PUSH
84397: EMPTY
84398: LIST
84399: LIST
84400: PUSH
84401: LD_INT 3
84403: NEG
84404: PUSH
84405: LD_INT 4
84407: NEG
84408: PUSH
84409: EMPTY
84410: LIST
84411: LIST
84412: PUSH
84413: LD_INT 4
84415: NEG
84416: PUSH
84417: LD_INT 3
84419: NEG
84420: PUSH
84421: EMPTY
84422: LIST
84423: LIST
84424: PUSH
84425: LD_INT 4
84427: NEG
84428: PUSH
84429: LD_INT 4
84431: NEG
84432: PUSH
84433: EMPTY
84434: LIST
84435: LIST
84436: PUSH
84437: LD_INT 4
84439: NEG
84440: PUSH
84441: LD_INT 5
84443: NEG
84444: PUSH
84445: EMPTY
84446: LIST
84447: LIST
84448: PUSH
84449: LD_INT 5
84451: NEG
84452: PUSH
84453: LD_INT 4
84455: NEG
84456: PUSH
84457: EMPTY
84458: LIST
84459: LIST
84460: PUSH
84461: LD_INT 5
84463: NEG
84464: PUSH
84465: LD_INT 5
84467: NEG
84468: PUSH
84469: EMPTY
84470: LIST
84471: LIST
84472: PUSH
84473: LD_INT 5
84475: NEG
84476: PUSH
84477: LD_INT 6
84479: NEG
84480: PUSH
84481: EMPTY
84482: LIST
84483: LIST
84484: PUSH
84485: LD_INT 6
84487: NEG
84488: PUSH
84489: LD_INT 5
84491: NEG
84492: PUSH
84493: EMPTY
84494: LIST
84495: LIST
84496: PUSH
84497: LD_INT 6
84499: NEG
84500: PUSH
84501: LD_INT 6
84503: NEG
84504: PUSH
84505: EMPTY
84506: LIST
84507: LIST
84508: PUSH
84509: EMPTY
84510: LIST
84511: LIST
84512: LIST
84513: LIST
84514: LIST
84515: LIST
84516: LIST
84517: LIST
84518: LIST
84519: LIST
84520: LIST
84521: LIST
84522: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
84523: LD_ADDR_VAR 0 41
84527: PUSH
84528: LD_INT 0
84530: PUSH
84531: LD_INT 2
84533: NEG
84534: PUSH
84535: EMPTY
84536: LIST
84537: LIST
84538: PUSH
84539: LD_INT 1
84541: NEG
84542: PUSH
84543: LD_INT 3
84545: NEG
84546: PUSH
84547: EMPTY
84548: LIST
84549: LIST
84550: PUSH
84551: LD_INT 1
84553: PUSH
84554: LD_INT 2
84556: NEG
84557: PUSH
84558: EMPTY
84559: LIST
84560: LIST
84561: PUSH
84562: EMPTY
84563: LIST
84564: LIST
84565: LIST
84566: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
84567: LD_ADDR_VAR 0 42
84571: PUSH
84572: LD_INT 2
84574: PUSH
84575: LD_INT 0
84577: PUSH
84578: EMPTY
84579: LIST
84580: LIST
84581: PUSH
84582: LD_INT 2
84584: PUSH
84585: LD_INT 1
84587: NEG
84588: PUSH
84589: EMPTY
84590: LIST
84591: LIST
84592: PUSH
84593: LD_INT 3
84595: PUSH
84596: LD_INT 1
84598: PUSH
84599: EMPTY
84600: LIST
84601: LIST
84602: PUSH
84603: EMPTY
84604: LIST
84605: LIST
84606: LIST
84607: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
84608: LD_ADDR_VAR 0 43
84612: PUSH
84613: LD_INT 2
84615: PUSH
84616: LD_INT 2
84618: PUSH
84619: EMPTY
84620: LIST
84621: LIST
84622: PUSH
84623: LD_INT 3
84625: PUSH
84626: LD_INT 2
84628: PUSH
84629: EMPTY
84630: LIST
84631: LIST
84632: PUSH
84633: LD_INT 2
84635: PUSH
84636: LD_INT 3
84638: PUSH
84639: EMPTY
84640: LIST
84641: LIST
84642: PUSH
84643: EMPTY
84644: LIST
84645: LIST
84646: LIST
84647: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
84648: LD_ADDR_VAR 0 44
84652: PUSH
84653: LD_INT 0
84655: PUSH
84656: LD_INT 2
84658: PUSH
84659: EMPTY
84660: LIST
84661: LIST
84662: PUSH
84663: LD_INT 1
84665: PUSH
84666: LD_INT 3
84668: PUSH
84669: EMPTY
84670: LIST
84671: LIST
84672: PUSH
84673: LD_INT 1
84675: NEG
84676: PUSH
84677: LD_INT 2
84679: PUSH
84680: EMPTY
84681: LIST
84682: LIST
84683: PUSH
84684: EMPTY
84685: LIST
84686: LIST
84687: LIST
84688: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
84689: LD_ADDR_VAR 0 45
84693: PUSH
84694: LD_INT 2
84696: NEG
84697: PUSH
84698: LD_INT 0
84700: PUSH
84701: EMPTY
84702: LIST
84703: LIST
84704: PUSH
84705: LD_INT 2
84707: NEG
84708: PUSH
84709: LD_INT 1
84711: PUSH
84712: EMPTY
84713: LIST
84714: LIST
84715: PUSH
84716: LD_INT 3
84718: NEG
84719: PUSH
84720: LD_INT 1
84722: NEG
84723: PUSH
84724: EMPTY
84725: LIST
84726: LIST
84727: PUSH
84728: EMPTY
84729: LIST
84730: LIST
84731: LIST
84732: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
84733: LD_ADDR_VAR 0 46
84737: PUSH
84738: LD_INT 2
84740: NEG
84741: PUSH
84742: LD_INT 2
84744: NEG
84745: PUSH
84746: EMPTY
84747: LIST
84748: LIST
84749: PUSH
84750: LD_INT 2
84752: NEG
84753: PUSH
84754: LD_INT 3
84756: NEG
84757: PUSH
84758: EMPTY
84759: LIST
84760: LIST
84761: PUSH
84762: LD_INT 3
84764: NEG
84765: PUSH
84766: LD_INT 2
84768: NEG
84769: PUSH
84770: EMPTY
84771: LIST
84772: LIST
84773: PUSH
84774: EMPTY
84775: LIST
84776: LIST
84777: LIST
84778: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
84779: LD_ADDR_VAR 0 47
84783: PUSH
84784: LD_INT 2
84786: NEG
84787: PUSH
84788: LD_INT 3
84790: NEG
84791: PUSH
84792: EMPTY
84793: LIST
84794: LIST
84795: PUSH
84796: LD_INT 1
84798: NEG
84799: PUSH
84800: LD_INT 3
84802: NEG
84803: PUSH
84804: EMPTY
84805: LIST
84806: LIST
84807: PUSH
84808: EMPTY
84809: LIST
84810: LIST
84811: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
84812: LD_ADDR_VAR 0 48
84816: PUSH
84817: LD_INT 1
84819: PUSH
84820: LD_INT 2
84822: NEG
84823: PUSH
84824: EMPTY
84825: LIST
84826: LIST
84827: PUSH
84828: LD_INT 2
84830: PUSH
84831: LD_INT 1
84833: NEG
84834: PUSH
84835: EMPTY
84836: LIST
84837: LIST
84838: PUSH
84839: EMPTY
84840: LIST
84841: LIST
84842: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
84843: LD_ADDR_VAR 0 49
84847: PUSH
84848: LD_INT 3
84850: PUSH
84851: LD_INT 1
84853: PUSH
84854: EMPTY
84855: LIST
84856: LIST
84857: PUSH
84858: LD_INT 3
84860: PUSH
84861: LD_INT 2
84863: PUSH
84864: EMPTY
84865: LIST
84866: LIST
84867: PUSH
84868: EMPTY
84869: LIST
84870: LIST
84871: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
84872: LD_ADDR_VAR 0 50
84876: PUSH
84877: LD_INT 2
84879: PUSH
84880: LD_INT 3
84882: PUSH
84883: EMPTY
84884: LIST
84885: LIST
84886: PUSH
84887: LD_INT 1
84889: PUSH
84890: LD_INT 3
84892: PUSH
84893: EMPTY
84894: LIST
84895: LIST
84896: PUSH
84897: EMPTY
84898: LIST
84899: LIST
84900: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
84901: LD_ADDR_VAR 0 51
84905: PUSH
84906: LD_INT 1
84908: NEG
84909: PUSH
84910: LD_INT 2
84912: PUSH
84913: EMPTY
84914: LIST
84915: LIST
84916: PUSH
84917: LD_INT 2
84919: NEG
84920: PUSH
84921: LD_INT 1
84923: PUSH
84924: EMPTY
84925: LIST
84926: LIST
84927: PUSH
84928: EMPTY
84929: LIST
84930: LIST
84931: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
84932: LD_ADDR_VAR 0 52
84936: PUSH
84937: LD_INT 3
84939: NEG
84940: PUSH
84941: LD_INT 1
84943: NEG
84944: PUSH
84945: EMPTY
84946: LIST
84947: LIST
84948: PUSH
84949: LD_INT 3
84951: NEG
84952: PUSH
84953: LD_INT 2
84955: NEG
84956: PUSH
84957: EMPTY
84958: LIST
84959: LIST
84960: PUSH
84961: EMPTY
84962: LIST
84963: LIST
84964: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
84965: LD_ADDR_VAR 0 53
84969: PUSH
84970: LD_INT 1
84972: NEG
84973: PUSH
84974: LD_INT 3
84976: NEG
84977: PUSH
84978: EMPTY
84979: LIST
84980: LIST
84981: PUSH
84982: LD_INT 0
84984: PUSH
84985: LD_INT 3
84987: NEG
84988: PUSH
84989: EMPTY
84990: LIST
84991: LIST
84992: PUSH
84993: LD_INT 1
84995: PUSH
84996: LD_INT 2
84998: NEG
84999: PUSH
85000: EMPTY
85001: LIST
85002: LIST
85003: PUSH
85004: EMPTY
85005: LIST
85006: LIST
85007: LIST
85008: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
85009: LD_ADDR_VAR 0 54
85013: PUSH
85014: LD_INT 2
85016: PUSH
85017: LD_INT 1
85019: NEG
85020: PUSH
85021: EMPTY
85022: LIST
85023: LIST
85024: PUSH
85025: LD_INT 3
85027: PUSH
85028: LD_INT 0
85030: PUSH
85031: EMPTY
85032: LIST
85033: LIST
85034: PUSH
85035: LD_INT 3
85037: PUSH
85038: LD_INT 1
85040: PUSH
85041: EMPTY
85042: LIST
85043: LIST
85044: PUSH
85045: EMPTY
85046: LIST
85047: LIST
85048: LIST
85049: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
85050: LD_ADDR_VAR 0 55
85054: PUSH
85055: LD_INT 3
85057: PUSH
85058: LD_INT 2
85060: PUSH
85061: EMPTY
85062: LIST
85063: LIST
85064: PUSH
85065: LD_INT 3
85067: PUSH
85068: LD_INT 3
85070: PUSH
85071: EMPTY
85072: LIST
85073: LIST
85074: PUSH
85075: LD_INT 2
85077: PUSH
85078: LD_INT 3
85080: PUSH
85081: EMPTY
85082: LIST
85083: LIST
85084: PUSH
85085: EMPTY
85086: LIST
85087: LIST
85088: LIST
85089: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
85090: LD_ADDR_VAR 0 56
85094: PUSH
85095: LD_INT 1
85097: PUSH
85098: LD_INT 3
85100: PUSH
85101: EMPTY
85102: LIST
85103: LIST
85104: PUSH
85105: LD_INT 0
85107: PUSH
85108: LD_INT 3
85110: PUSH
85111: EMPTY
85112: LIST
85113: LIST
85114: PUSH
85115: LD_INT 1
85117: NEG
85118: PUSH
85119: LD_INT 2
85121: PUSH
85122: EMPTY
85123: LIST
85124: LIST
85125: PUSH
85126: EMPTY
85127: LIST
85128: LIST
85129: LIST
85130: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
85131: LD_ADDR_VAR 0 57
85135: PUSH
85136: LD_INT 2
85138: NEG
85139: PUSH
85140: LD_INT 1
85142: PUSH
85143: EMPTY
85144: LIST
85145: LIST
85146: PUSH
85147: LD_INT 3
85149: NEG
85150: PUSH
85151: LD_INT 0
85153: PUSH
85154: EMPTY
85155: LIST
85156: LIST
85157: PUSH
85158: LD_INT 3
85160: NEG
85161: PUSH
85162: LD_INT 1
85164: NEG
85165: PUSH
85166: EMPTY
85167: LIST
85168: LIST
85169: PUSH
85170: EMPTY
85171: LIST
85172: LIST
85173: LIST
85174: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
85175: LD_ADDR_VAR 0 58
85179: PUSH
85180: LD_INT 2
85182: NEG
85183: PUSH
85184: LD_INT 3
85186: NEG
85187: PUSH
85188: EMPTY
85189: LIST
85190: LIST
85191: PUSH
85192: LD_INT 3
85194: NEG
85195: PUSH
85196: LD_INT 2
85198: NEG
85199: PUSH
85200: EMPTY
85201: LIST
85202: LIST
85203: PUSH
85204: LD_INT 3
85206: NEG
85207: PUSH
85208: LD_INT 3
85210: NEG
85211: PUSH
85212: EMPTY
85213: LIST
85214: LIST
85215: PUSH
85216: EMPTY
85217: LIST
85218: LIST
85219: LIST
85220: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
85221: LD_ADDR_VAR 0 59
85225: PUSH
85226: LD_INT 1
85228: NEG
85229: PUSH
85230: LD_INT 2
85232: NEG
85233: PUSH
85234: EMPTY
85235: LIST
85236: LIST
85237: PUSH
85238: LD_INT 0
85240: PUSH
85241: LD_INT 2
85243: NEG
85244: PUSH
85245: EMPTY
85246: LIST
85247: LIST
85248: PUSH
85249: LD_INT 1
85251: PUSH
85252: LD_INT 1
85254: NEG
85255: PUSH
85256: EMPTY
85257: LIST
85258: LIST
85259: PUSH
85260: EMPTY
85261: LIST
85262: LIST
85263: LIST
85264: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
85265: LD_ADDR_VAR 0 60
85269: PUSH
85270: LD_INT 1
85272: PUSH
85273: LD_INT 1
85275: NEG
85276: PUSH
85277: EMPTY
85278: LIST
85279: LIST
85280: PUSH
85281: LD_INT 2
85283: PUSH
85284: LD_INT 0
85286: PUSH
85287: EMPTY
85288: LIST
85289: LIST
85290: PUSH
85291: LD_INT 2
85293: PUSH
85294: LD_INT 1
85296: PUSH
85297: EMPTY
85298: LIST
85299: LIST
85300: PUSH
85301: EMPTY
85302: LIST
85303: LIST
85304: LIST
85305: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
85306: LD_ADDR_VAR 0 61
85310: PUSH
85311: LD_INT 2
85313: PUSH
85314: LD_INT 1
85316: PUSH
85317: EMPTY
85318: LIST
85319: LIST
85320: PUSH
85321: LD_INT 2
85323: PUSH
85324: LD_INT 2
85326: PUSH
85327: EMPTY
85328: LIST
85329: LIST
85330: PUSH
85331: LD_INT 1
85333: PUSH
85334: LD_INT 2
85336: PUSH
85337: EMPTY
85338: LIST
85339: LIST
85340: PUSH
85341: EMPTY
85342: LIST
85343: LIST
85344: LIST
85345: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
85346: LD_ADDR_VAR 0 62
85350: PUSH
85351: LD_INT 1
85353: PUSH
85354: LD_INT 2
85356: PUSH
85357: EMPTY
85358: LIST
85359: LIST
85360: PUSH
85361: LD_INT 0
85363: PUSH
85364: LD_INT 2
85366: PUSH
85367: EMPTY
85368: LIST
85369: LIST
85370: PUSH
85371: LD_INT 1
85373: NEG
85374: PUSH
85375: LD_INT 1
85377: PUSH
85378: EMPTY
85379: LIST
85380: LIST
85381: PUSH
85382: EMPTY
85383: LIST
85384: LIST
85385: LIST
85386: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
85387: LD_ADDR_VAR 0 63
85391: PUSH
85392: LD_INT 1
85394: NEG
85395: PUSH
85396: LD_INT 1
85398: PUSH
85399: EMPTY
85400: LIST
85401: LIST
85402: PUSH
85403: LD_INT 2
85405: NEG
85406: PUSH
85407: LD_INT 0
85409: PUSH
85410: EMPTY
85411: LIST
85412: LIST
85413: PUSH
85414: LD_INT 2
85416: NEG
85417: PUSH
85418: LD_INT 1
85420: NEG
85421: PUSH
85422: EMPTY
85423: LIST
85424: LIST
85425: PUSH
85426: EMPTY
85427: LIST
85428: LIST
85429: LIST
85430: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85431: LD_ADDR_VAR 0 64
85435: PUSH
85436: LD_INT 1
85438: NEG
85439: PUSH
85440: LD_INT 2
85442: NEG
85443: PUSH
85444: EMPTY
85445: LIST
85446: LIST
85447: PUSH
85448: LD_INT 2
85450: NEG
85451: PUSH
85452: LD_INT 1
85454: NEG
85455: PUSH
85456: EMPTY
85457: LIST
85458: LIST
85459: PUSH
85460: LD_INT 2
85462: NEG
85463: PUSH
85464: LD_INT 2
85466: NEG
85467: PUSH
85468: EMPTY
85469: LIST
85470: LIST
85471: PUSH
85472: EMPTY
85473: LIST
85474: LIST
85475: LIST
85476: ST_TO_ADDR
// end ; 2 :
85477: GO 88743
85479: LD_INT 2
85481: DOUBLE
85482: EQUAL
85483: IFTRUE 85487
85485: GO 88742
85487: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
85488: LD_ADDR_VAR 0 29
85492: PUSH
85493: LD_INT 4
85495: PUSH
85496: LD_INT 0
85498: PUSH
85499: EMPTY
85500: LIST
85501: LIST
85502: PUSH
85503: LD_INT 4
85505: PUSH
85506: LD_INT 1
85508: NEG
85509: PUSH
85510: EMPTY
85511: LIST
85512: LIST
85513: PUSH
85514: LD_INT 5
85516: PUSH
85517: LD_INT 0
85519: PUSH
85520: EMPTY
85521: LIST
85522: LIST
85523: PUSH
85524: LD_INT 5
85526: PUSH
85527: LD_INT 1
85529: PUSH
85530: EMPTY
85531: LIST
85532: LIST
85533: PUSH
85534: LD_INT 4
85536: PUSH
85537: LD_INT 1
85539: PUSH
85540: EMPTY
85541: LIST
85542: LIST
85543: PUSH
85544: LD_INT 3
85546: PUSH
85547: LD_INT 0
85549: PUSH
85550: EMPTY
85551: LIST
85552: LIST
85553: PUSH
85554: LD_INT 3
85556: PUSH
85557: LD_INT 1
85559: NEG
85560: PUSH
85561: EMPTY
85562: LIST
85563: LIST
85564: PUSH
85565: LD_INT 3
85567: PUSH
85568: LD_INT 2
85570: NEG
85571: PUSH
85572: EMPTY
85573: LIST
85574: LIST
85575: PUSH
85576: LD_INT 5
85578: PUSH
85579: LD_INT 2
85581: PUSH
85582: EMPTY
85583: LIST
85584: LIST
85585: PUSH
85586: LD_INT 3
85588: PUSH
85589: LD_INT 3
85591: PUSH
85592: EMPTY
85593: LIST
85594: LIST
85595: PUSH
85596: LD_INT 3
85598: PUSH
85599: LD_INT 2
85601: PUSH
85602: EMPTY
85603: LIST
85604: LIST
85605: PUSH
85606: LD_INT 4
85608: PUSH
85609: LD_INT 3
85611: PUSH
85612: EMPTY
85613: LIST
85614: LIST
85615: PUSH
85616: LD_INT 4
85618: PUSH
85619: LD_INT 4
85621: PUSH
85622: EMPTY
85623: LIST
85624: LIST
85625: PUSH
85626: LD_INT 3
85628: PUSH
85629: LD_INT 4
85631: PUSH
85632: EMPTY
85633: LIST
85634: LIST
85635: PUSH
85636: LD_INT 2
85638: PUSH
85639: LD_INT 3
85641: PUSH
85642: EMPTY
85643: LIST
85644: LIST
85645: PUSH
85646: LD_INT 2
85648: PUSH
85649: LD_INT 2
85651: PUSH
85652: EMPTY
85653: LIST
85654: LIST
85655: PUSH
85656: LD_INT 4
85658: PUSH
85659: LD_INT 2
85661: PUSH
85662: EMPTY
85663: LIST
85664: LIST
85665: PUSH
85666: LD_INT 2
85668: PUSH
85669: LD_INT 4
85671: PUSH
85672: EMPTY
85673: LIST
85674: LIST
85675: PUSH
85676: LD_INT 0
85678: PUSH
85679: LD_INT 4
85681: PUSH
85682: EMPTY
85683: LIST
85684: LIST
85685: PUSH
85686: LD_INT 0
85688: PUSH
85689: LD_INT 3
85691: PUSH
85692: EMPTY
85693: LIST
85694: LIST
85695: PUSH
85696: LD_INT 1
85698: PUSH
85699: LD_INT 4
85701: PUSH
85702: EMPTY
85703: LIST
85704: LIST
85705: PUSH
85706: LD_INT 1
85708: PUSH
85709: LD_INT 5
85711: PUSH
85712: EMPTY
85713: LIST
85714: LIST
85715: PUSH
85716: LD_INT 0
85718: PUSH
85719: LD_INT 5
85721: PUSH
85722: EMPTY
85723: LIST
85724: LIST
85725: PUSH
85726: LD_INT 1
85728: NEG
85729: PUSH
85730: LD_INT 4
85732: PUSH
85733: EMPTY
85734: LIST
85735: LIST
85736: PUSH
85737: LD_INT 1
85739: NEG
85740: PUSH
85741: LD_INT 3
85743: PUSH
85744: EMPTY
85745: LIST
85746: LIST
85747: PUSH
85748: LD_INT 2
85750: PUSH
85751: LD_INT 5
85753: PUSH
85754: EMPTY
85755: LIST
85756: LIST
85757: PUSH
85758: LD_INT 2
85760: NEG
85761: PUSH
85762: LD_INT 3
85764: PUSH
85765: EMPTY
85766: LIST
85767: LIST
85768: PUSH
85769: LD_INT 3
85771: NEG
85772: PUSH
85773: LD_INT 0
85775: PUSH
85776: EMPTY
85777: LIST
85778: LIST
85779: PUSH
85780: LD_INT 3
85782: NEG
85783: PUSH
85784: LD_INT 1
85786: NEG
85787: PUSH
85788: EMPTY
85789: LIST
85790: LIST
85791: PUSH
85792: LD_INT 2
85794: NEG
85795: PUSH
85796: LD_INT 0
85798: PUSH
85799: EMPTY
85800: LIST
85801: LIST
85802: PUSH
85803: LD_INT 2
85805: NEG
85806: PUSH
85807: LD_INT 1
85809: PUSH
85810: EMPTY
85811: LIST
85812: LIST
85813: PUSH
85814: LD_INT 3
85816: NEG
85817: PUSH
85818: LD_INT 1
85820: PUSH
85821: EMPTY
85822: LIST
85823: LIST
85824: PUSH
85825: LD_INT 4
85827: NEG
85828: PUSH
85829: LD_INT 0
85831: PUSH
85832: EMPTY
85833: LIST
85834: LIST
85835: PUSH
85836: LD_INT 4
85838: NEG
85839: PUSH
85840: LD_INT 1
85842: NEG
85843: PUSH
85844: EMPTY
85845: LIST
85846: LIST
85847: PUSH
85848: LD_INT 4
85850: NEG
85851: PUSH
85852: LD_INT 2
85854: NEG
85855: PUSH
85856: EMPTY
85857: LIST
85858: LIST
85859: PUSH
85860: LD_INT 2
85862: NEG
85863: PUSH
85864: LD_INT 2
85866: PUSH
85867: EMPTY
85868: LIST
85869: LIST
85870: PUSH
85871: LD_INT 4
85873: NEG
85874: PUSH
85875: LD_INT 4
85877: NEG
85878: PUSH
85879: EMPTY
85880: LIST
85881: LIST
85882: PUSH
85883: LD_INT 4
85885: NEG
85886: PUSH
85887: LD_INT 5
85889: NEG
85890: PUSH
85891: EMPTY
85892: LIST
85893: LIST
85894: PUSH
85895: LD_INT 3
85897: NEG
85898: PUSH
85899: LD_INT 4
85901: NEG
85902: PUSH
85903: EMPTY
85904: LIST
85905: LIST
85906: PUSH
85907: LD_INT 3
85909: NEG
85910: PUSH
85911: LD_INT 3
85913: NEG
85914: PUSH
85915: EMPTY
85916: LIST
85917: LIST
85918: PUSH
85919: LD_INT 4
85921: NEG
85922: PUSH
85923: LD_INT 3
85925: NEG
85926: PUSH
85927: EMPTY
85928: LIST
85929: LIST
85930: PUSH
85931: LD_INT 5
85933: NEG
85934: PUSH
85935: LD_INT 4
85937: NEG
85938: PUSH
85939: EMPTY
85940: LIST
85941: LIST
85942: PUSH
85943: LD_INT 5
85945: NEG
85946: PUSH
85947: LD_INT 5
85949: NEG
85950: PUSH
85951: EMPTY
85952: LIST
85953: LIST
85954: PUSH
85955: LD_INT 3
85957: NEG
85958: PUSH
85959: LD_INT 5
85961: NEG
85962: PUSH
85963: EMPTY
85964: LIST
85965: LIST
85966: PUSH
85967: LD_INT 5
85969: NEG
85970: PUSH
85971: LD_INT 3
85973: NEG
85974: PUSH
85975: EMPTY
85976: LIST
85977: LIST
85978: PUSH
85979: EMPTY
85980: LIST
85981: LIST
85982: LIST
85983: LIST
85984: LIST
85985: LIST
85986: LIST
85987: LIST
85988: LIST
85989: LIST
85990: LIST
85991: LIST
85992: LIST
85993: LIST
85994: LIST
85995: LIST
85996: LIST
85997: LIST
85998: LIST
85999: LIST
86000: LIST
86001: LIST
86002: LIST
86003: LIST
86004: LIST
86005: LIST
86006: LIST
86007: LIST
86008: LIST
86009: LIST
86010: LIST
86011: LIST
86012: LIST
86013: LIST
86014: LIST
86015: LIST
86016: LIST
86017: LIST
86018: LIST
86019: LIST
86020: LIST
86021: LIST
86022: LIST
86023: LIST
86024: LIST
86025: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
86026: LD_ADDR_VAR 0 30
86030: PUSH
86031: LD_INT 4
86033: PUSH
86034: LD_INT 4
86036: PUSH
86037: EMPTY
86038: LIST
86039: LIST
86040: PUSH
86041: LD_INT 4
86043: PUSH
86044: LD_INT 3
86046: PUSH
86047: EMPTY
86048: LIST
86049: LIST
86050: PUSH
86051: LD_INT 5
86053: PUSH
86054: LD_INT 4
86056: PUSH
86057: EMPTY
86058: LIST
86059: LIST
86060: PUSH
86061: LD_INT 5
86063: PUSH
86064: LD_INT 5
86066: PUSH
86067: EMPTY
86068: LIST
86069: LIST
86070: PUSH
86071: LD_INT 4
86073: PUSH
86074: LD_INT 5
86076: PUSH
86077: EMPTY
86078: LIST
86079: LIST
86080: PUSH
86081: LD_INT 3
86083: PUSH
86084: LD_INT 4
86086: PUSH
86087: EMPTY
86088: LIST
86089: LIST
86090: PUSH
86091: LD_INT 3
86093: PUSH
86094: LD_INT 3
86096: PUSH
86097: EMPTY
86098: LIST
86099: LIST
86100: PUSH
86101: LD_INT 5
86103: PUSH
86104: LD_INT 3
86106: PUSH
86107: EMPTY
86108: LIST
86109: LIST
86110: PUSH
86111: LD_INT 3
86113: PUSH
86114: LD_INT 5
86116: PUSH
86117: EMPTY
86118: LIST
86119: LIST
86120: PUSH
86121: LD_INT 0
86123: PUSH
86124: LD_INT 3
86126: PUSH
86127: EMPTY
86128: LIST
86129: LIST
86130: PUSH
86131: LD_INT 0
86133: PUSH
86134: LD_INT 2
86136: PUSH
86137: EMPTY
86138: LIST
86139: LIST
86140: PUSH
86141: LD_INT 1
86143: PUSH
86144: LD_INT 3
86146: PUSH
86147: EMPTY
86148: LIST
86149: LIST
86150: PUSH
86151: LD_INT 1
86153: PUSH
86154: LD_INT 4
86156: PUSH
86157: EMPTY
86158: LIST
86159: LIST
86160: PUSH
86161: LD_INT 0
86163: PUSH
86164: LD_INT 4
86166: PUSH
86167: EMPTY
86168: LIST
86169: LIST
86170: PUSH
86171: LD_INT 1
86173: NEG
86174: PUSH
86175: LD_INT 3
86177: PUSH
86178: EMPTY
86179: LIST
86180: LIST
86181: PUSH
86182: LD_INT 1
86184: NEG
86185: PUSH
86186: LD_INT 2
86188: PUSH
86189: EMPTY
86190: LIST
86191: LIST
86192: PUSH
86193: LD_INT 2
86195: PUSH
86196: LD_INT 4
86198: PUSH
86199: EMPTY
86200: LIST
86201: LIST
86202: PUSH
86203: LD_INT 2
86205: NEG
86206: PUSH
86207: LD_INT 2
86209: PUSH
86210: EMPTY
86211: LIST
86212: LIST
86213: PUSH
86214: LD_INT 4
86216: NEG
86217: PUSH
86218: LD_INT 0
86220: PUSH
86221: EMPTY
86222: LIST
86223: LIST
86224: PUSH
86225: LD_INT 4
86227: NEG
86228: PUSH
86229: LD_INT 1
86231: NEG
86232: PUSH
86233: EMPTY
86234: LIST
86235: LIST
86236: PUSH
86237: LD_INT 3
86239: NEG
86240: PUSH
86241: LD_INT 0
86243: PUSH
86244: EMPTY
86245: LIST
86246: LIST
86247: PUSH
86248: LD_INT 3
86250: NEG
86251: PUSH
86252: LD_INT 1
86254: PUSH
86255: EMPTY
86256: LIST
86257: LIST
86258: PUSH
86259: LD_INT 4
86261: NEG
86262: PUSH
86263: LD_INT 1
86265: PUSH
86266: EMPTY
86267: LIST
86268: LIST
86269: PUSH
86270: LD_INT 5
86272: NEG
86273: PUSH
86274: LD_INT 0
86276: PUSH
86277: EMPTY
86278: LIST
86279: LIST
86280: PUSH
86281: LD_INT 5
86283: NEG
86284: PUSH
86285: LD_INT 1
86287: NEG
86288: PUSH
86289: EMPTY
86290: LIST
86291: LIST
86292: PUSH
86293: LD_INT 5
86295: NEG
86296: PUSH
86297: LD_INT 2
86299: NEG
86300: PUSH
86301: EMPTY
86302: LIST
86303: LIST
86304: PUSH
86305: LD_INT 3
86307: NEG
86308: PUSH
86309: LD_INT 2
86311: PUSH
86312: EMPTY
86313: LIST
86314: LIST
86315: PUSH
86316: LD_INT 3
86318: NEG
86319: PUSH
86320: LD_INT 3
86322: NEG
86323: PUSH
86324: EMPTY
86325: LIST
86326: LIST
86327: PUSH
86328: LD_INT 3
86330: NEG
86331: PUSH
86332: LD_INT 4
86334: NEG
86335: PUSH
86336: EMPTY
86337: LIST
86338: LIST
86339: PUSH
86340: LD_INT 2
86342: NEG
86343: PUSH
86344: LD_INT 3
86346: NEG
86347: PUSH
86348: EMPTY
86349: LIST
86350: LIST
86351: PUSH
86352: LD_INT 2
86354: NEG
86355: PUSH
86356: LD_INT 2
86358: NEG
86359: PUSH
86360: EMPTY
86361: LIST
86362: LIST
86363: PUSH
86364: LD_INT 3
86366: NEG
86367: PUSH
86368: LD_INT 2
86370: NEG
86371: PUSH
86372: EMPTY
86373: LIST
86374: LIST
86375: PUSH
86376: LD_INT 4
86378: NEG
86379: PUSH
86380: LD_INT 3
86382: NEG
86383: PUSH
86384: EMPTY
86385: LIST
86386: LIST
86387: PUSH
86388: LD_INT 4
86390: NEG
86391: PUSH
86392: LD_INT 4
86394: NEG
86395: PUSH
86396: EMPTY
86397: LIST
86398: LIST
86399: PUSH
86400: LD_INT 2
86402: NEG
86403: PUSH
86404: LD_INT 4
86406: NEG
86407: PUSH
86408: EMPTY
86409: LIST
86410: LIST
86411: PUSH
86412: LD_INT 4
86414: NEG
86415: PUSH
86416: LD_INT 2
86418: NEG
86419: PUSH
86420: EMPTY
86421: LIST
86422: LIST
86423: PUSH
86424: LD_INT 0
86426: PUSH
86427: LD_INT 4
86429: NEG
86430: PUSH
86431: EMPTY
86432: LIST
86433: LIST
86434: PUSH
86435: LD_INT 0
86437: PUSH
86438: LD_INT 5
86440: NEG
86441: PUSH
86442: EMPTY
86443: LIST
86444: LIST
86445: PUSH
86446: LD_INT 1
86448: PUSH
86449: LD_INT 4
86451: NEG
86452: PUSH
86453: EMPTY
86454: LIST
86455: LIST
86456: PUSH
86457: LD_INT 1
86459: PUSH
86460: LD_INT 3
86462: NEG
86463: PUSH
86464: EMPTY
86465: LIST
86466: LIST
86467: PUSH
86468: LD_INT 0
86470: PUSH
86471: LD_INT 3
86473: NEG
86474: PUSH
86475: EMPTY
86476: LIST
86477: LIST
86478: PUSH
86479: LD_INT 1
86481: NEG
86482: PUSH
86483: LD_INT 4
86485: NEG
86486: PUSH
86487: EMPTY
86488: LIST
86489: LIST
86490: PUSH
86491: LD_INT 1
86493: NEG
86494: PUSH
86495: LD_INT 5
86497: NEG
86498: PUSH
86499: EMPTY
86500: LIST
86501: LIST
86502: PUSH
86503: LD_INT 2
86505: PUSH
86506: LD_INT 3
86508: NEG
86509: PUSH
86510: EMPTY
86511: LIST
86512: LIST
86513: PUSH
86514: LD_INT 2
86516: NEG
86517: PUSH
86518: LD_INT 5
86520: NEG
86521: PUSH
86522: EMPTY
86523: LIST
86524: LIST
86525: PUSH
86526: EMPTY
86527: LIST
86528: LIST
86529: LIST
86530: LIST
86531: LIST
86532: LIST
86533: LIST
86534: LIST
86535: LIST
86536: LIST
86537: LIST
86538: LIST
86539: LIST
86540: LIST
86541: LIST
86542: LIST
86543: LIST
86544: LIST
86545: LIST
86546: LIST
86547: LIST
86548: LIST
86549: LIST
86550: LIST
86551: LIST
86552: LIST
86553: LIST
86554: LIST
86555: LIST
86556: LIST
86557: LIST
86558: LIST
86559: LIST
86560: LIST
86561: LIST
86562: LIST
86563: LIST
86564: LIST
86565: LIST
86566: LIST
86567: LIST
86568: LIST
86569: LIST
86570: LIST
86571: LIST
86572: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
86573: LD_ADDR_VAR 0 31
86577: PUSH
86578: LD_INT 0
86580: PUSH
86581: LD_INT 4
86583: PUSH
86584: EMPTY
86585: LIST
86586: LIST
86587: PUSH
86588: LD_INT 0
86590: PUSH
86591: LD_INT 3
86593: PUSH
86594: EMPTY
86595: LIST
86596: LIST
86597: PUSH
86598: LD_INT 1
86600: PUSH
86601: LD_INT 4
86603: PUSH
86604: EMPTY
86605: LIST
86606: LIST
86607: PUSH
86608: LD_INT 1
86610: PUSH
86611: LD_INT 5
86613: PUSH
86614: EMPTY
86615: LIST
86616: LIST
86617: PUSH
86618: LD_INT 0
86620: PUSH
86621: LD_INT 5
86623: PUSH
86624: EMPTY
86625: LIST
86626: LIST
86627: PUSH
86628: LD_INT 1
86630: NEG
86631: PUSH
86632: LD_INT 4
86634: PUSH
86635: EMPTY
86636: LIST
86637: LIST
86638: PUSH
86639: LD_INT 1
86641: NEG
86642: PUSH
86643: LD_INT 3
86645: PUSH
86646: EMPTY
86647: LIST
86648: LIST
86649: PUSH
86650: LD_INT 2
86652: PUSH
86653: LD_INT 5
86655: PUSH
86656: EMPTY
86657: LIST
86658: LIST
86659: PUSH
86660: LD_INT 2
86662: NEG
86663: PUSH
86664: LD_INT 3
86666: PUSH
86667: EMPTY
86668: LIST
86669: LIST
86670: PUSH
86671: LD_INT 3
86673: NEG
86674: PUSH
86675: LD_INT 0
86677: PUSH
86678: EMPTY
86679: LIST
86680: LIST
86681: PUSH
86682: LD_INT 3
86684: NEG
86685: PUSH
86686: LD_INT 1
86688: NEG
86689: PUSH
86690: EMPTY
86691: LIST
86692: LIST
86693: PUSH
86694: LD_INT 2
86696: NEG
86697: PUSH
86698: LD_INT 0
86700: PUSH
86701: EMPTY
86702: LIST
86703: LIST
86704: PUSH
86705: LD_INT 2
86707: NEG
86708: PUSH
86709: LD_INT 1
86711: PUSH
86712: EMPTY
86713: LIST
86714: LIST
86715: PUSH
86716: LD_INT 3
86718: NEG
86719: PUSH
86720: LD_INT 1
86722: PUSH
86723: EMPTY
86724: LIST
86725: LIST
86726: PUSH
86727: LD_INT 4
86729: NEG
86730: PUSH
86731: LD_INT 0
86733: PUSH
86734: EMPTY
86735: LIST
86736: LIST
86737: PUSH
86738: LD_INT 4
86740: NEG
86741: PUSH
86742: LD_INT 1
86744: NEG
86745: PUSH
86746: EMPTY
86747: LIST
86748: LIST
86749: PUSH
86750: LD_INT 4
86752: NEG
86753: PUSH
86754: LD_INT 2
86756: NEG
86757: PUSH
86758: EMPTY
86759: LIST
86760: LIST
86761: PUSH
86762: LD_INT 2
86764: NEG
86765: PUSH
86766: LD_INT 2
86768: PUSH
86769: EMPTY
86770: LIST
86771: LIST
86772: PUSH
86773: LD_INT 4
86775: NEG
86776: PUSH
86777: LD_INT 4
86779: NEG
86780: PUSH
86781: EMPTY
86782: LIST
86783: LIST
86784: PUSH
86785: LD_INT 4
86787: NEG
86788: PUSH
86789: LD_INT 5
86791: NEG
86792: PUSH
86793: EMPTY
86794: LIST
86795: LIST
86796: PUSH
86797: LD_INT 3
86799: NEG
86800: PUSH
86801: LD_INT 4
86803: NEG
86804: PUSH
86805: EMPTY
86806: LIST
86807: LIST
86808: PUSH
86809: LD_INT 3
86811: NEG
86812: PUSH
86813: LD_INT 3
86815: NEG
86816: PUSH
86817: EMPTY
86818: LIST
86819: LIST
86820: PUSH
86821: LD_INT 4
86823: NEG
86824: PUSH
86825: LD_INT 3
86827: NEG
86828: PUSH
86829: EMPTY
86830: LIST
86831: LIST
86832: PUSH
86833: LD_INT 5
86835: NEG
86836: PUSH
86837: LD_INT 4
86839: NEG
86840: PUSH
86841: EMPTY
86842: LIST
86843: LIST
86844: PUSH
86845: LD_INT 5
86847: NEG
86848: PUSH
86849: LD_INT 5
86851: NEG
86852: PUSH
86853: EMPTY
86854: LIST
86855: LIST
86856: PUSH
86857: LD_INT 3
86859: NEG
86860: PUSH
86861: LD_INT 5
86863: NEG
86864: PUSH
86865: EMPTY
86866: LIST
86867: LIST
86868: PUSH
86869: LD_INT 5
86871: NEG
86872: PUSH
86873: LD_INT 3
86875: NEG
86876: PUSH
86877: EMPTY
86878: LIST
86879: LIST
86880: PUSH
86881: LD_INT 0
86883: PUSH
86884: LD_INT 3
86886: NEG
86887: PUSH
86888: EMPTY
86889: LIST
86890: LIST
86891: PUSH
86892: LD_INT 0
86894: PUSH
86895: LD_INT 4
86897: NEG
86898: PUSH
86899: EMPTY
86900: LIST
86901: LIST
86902: PUSH
86903: LD_INT 1
86905: PUSH
86906: LD_INT 3
86908: NEG
86909: PUSH
86910: EMPTY
86911: LIST
86912: LIST
86913: PUSH
86914: LD_INT 1
86916: PUSH
86917: LD_INT 2
86919: NEG
86920: PUSH
86921: EMPTY
86922: LIST
86923: LIST
86924: PUSH
86925: LD_INT 0
86927: PUSH
86928: LD_INT 2
86930: NEG
86931: PUSH
86932: EMPTY
86933: LIST
86934: LIST
86935: PUSH
86936: LD_INT 1
86938: NEG
86939: PUSH
86940: LD_INT 3
86942: NEG
86943: PUSH
86944: EMPTY
86945: LIST
86946: LIST
86947: PUSH
86948: LD_INT 1
86950: NEG
86951: PUSH
86952: LD_INT 4
86954: NEG
86955: PUSH
86956: EMPTY
86957: LIST
86958: LIST
86959: PUSH
86960: LD_INT 2
86962: PUSH
86963: LD_INT 2
86965: NEG
86966: PUSH
86967: EMPTY
86968: LIST
86969: LIST
86970: PUSH
86971: LD_INT 2
86973: NEG
86974: PUSH
86975: LD_INT 4
86977: NEG
86978: PUSH
86979: EMPTY
86980: LIST
86981: LIST
86982: PUSH
86983: LD_INT 4
86985: PUSH
86986: LD_INT 0
86988: PUSH
86989: EMPTY
86990: LIST
86991: LIST
86992: PUSH
86993: LD_INT 4
86995: PUSH
86996: LD_INT 1
86998: NEG
86999: PUSH
87000: EMPTY
87001: LIST
87002: LIST
87003: PUSH
87004: LD_INT 5
87006: PUSH
87007: LD_INT 0
87009: PUSH
87010: EMPTY
87011: LIST
87012: LIST
87013: PUSH
87014: LD_INT 5
87016: PUSH
87017: LD_INT 1
87019: PUSH
87020: EMPTY
87021: LIST
87022: LIST
87023: PUSH
87024: LD_INT 4
87026: PUSH
87027: LD_INT 1
87029: PUSH
87030: EMPTY
87031: LIST
87032: LIST
87033: PUSH
87034: LD_INT 3
87036: PUSH
87037: LD_INT 0
87039: PUSH
87040: EMPTY
87041: LIST
87042: LIST
87043: PUSH
87044: LD_INT 3
87046: PUSH
87047: LD_INT 1
87049: NEG
87050: PUSH
87051: EMPTY
87052: LIST
87053: LIST
87054: PUSH
87055: LD_INT 3
87057: PUSH
87058: LD_INT 2
87060: NEG
87061: PUSH
87062: EMPTY
87063: LIST
87064: LIST
87065: PUSH
87066: LD_INT 5
87068: PUSH
87069: LD_INT 2
87071: PUSH
87072: EMPTY
87073: LIST
87074: LIST
87075: PUSH
87076: EMPTY
87077: LIST
87078: LIST
87079: LIST
87080: LIST
87081: LIST
87082: LIST
87083: LIST
87084: LIST
87085: LIST
87086: LIST
87087: LIST
87088: LIST
87089: LIST
87090: LIST
87091: LIST
87092: LIST
87093: LIST
87094: LIST
87095: LIST
87096: LIST
87097: LIST
87098: LIST
87099: LIST
87100: LIST
87101: LIST
87102: LIST
87103: LIST
87104: LIST
87105: LIST
87106: LIST
87107: LIST
87108: LIST
87109: LIST
87110: LIST
87111: LIST
87112: LIST
87113: LIST
87114: LIST
87115: LIST
87116: LIST
87117: LIST
87118: LIST
87119: LIST
87120: LIST
87121: LIST
87122: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
87123: LD_ADDR_VAR 0 32
87127: PUSH
87128: LD_INT 4
87130: NEG
87131: PUSH
87132: LD_INT 0
87134: PUSH
87135: EMPTY
87136: LIST
87137: LIST
87138: PUSH
87139: LD_INT 4
87141: NEG
87142: PUSH
87143: LD_INT 1
87145: NEG
87146: PUSH
87147: EMPTY
87148: LIST
87149: LIST
87150: PUSH
87151: LD_INT 3
87153: NEG
87154: PUSH
87155: LD_INT 0
87157: PUSH
87158: EMPTY
87159: LIST
87160: LIST
87161: PUSH
87162: LD_INT 3
87164: NEG
87165: PUSH
87166: LD_INT 1
87168: PUSH
87169: EMPTY
87170: LIST
87171: LIST
87172: PUSH
87173: LD_INT 4
87175: NEG
87176: PUSH
87177: LD_INT 1
87179: PUSH
87180: EMPTY
87181: LIST
87182: LIST
87183: PUSH
87184: LD_INT 5
87186: NEG
87187: PUSH
87188: LD_INT 0
87190: PUSH
87191: EMPTY
87192: LIST
87193: LIST
87194: PUSH
87195: LD_INT 5
87197: NEG
87198: PUSH
87199: LD_INT 1
87201: NEG
87202: PUSH
87203: EMPTY
87204: LIST
87205: LIST
87206: PUSH
87207: LD_INT 5
87209: NEG
87210: PUSH
87211: LD_INT 2
87213: NEG
87214: PUSH
87215: EMPTY
87216: LIST
87217: LIST
87218: PUSH
87219: LD_INT 3
87221: NEG
87222: PUSH
87223: LD_INT 2
87225: PUSH
87226: EMPTY
87227: LIST
87228: LIST
87229: PUSH
87230: LD_INT 3
87232: NEG
87233: PUSH
87234: LD_INT 3
87236: NEG
87237: PUSH
87238: EMPTY
87239: LIST
87240: LIST
87241: PUSH
87242: LD_INT 3
87244: NEG
87245: PUSH
87246: LD_INT 4
87248: NEG
87249: PUSH
87250: EMPTY
87251: LIST
87252: LIST
87253: PUSH
87254: LD_INT 2
87256: NEG
87257: PUSH
87258: LD_INT 3
87260: NEG
87261: PUSH
87262: EMPTY
87263: LIST
87264: LIST
87265: PUSH
87266: LD_INT 2
87268: NEG
87269: PUSH
87270: LD_INT 2
87272: NEG
87273: PUSH
87274: EMPTY
87275: LIST
87276: LIST
87277: PUSH
87278: LD_INT 3
87280: NEG
87281: PUSH
87282: LD_INT 2
87284: NEG
87285: PUSH
87286: EMPTY
87287: LIST
87288: LIST
87289: PUSH
87290: LD_INT 4
87292: NEG
87293: PUSH
87294: LD_INT 3
87296: NEG
87297: PUSH
87298: EMPTY
87299: LIST
87300: LIST
87301: PUSH
87302: LD_INT 4
87304: NEG
87305: PUSH
87306: LD_INT 4
87308: NEG
87309: PUSH
87310: EMPTY
87311: LIST
87312: LIST
87313: PUSH
87314: LD_INT 2
87316: NEG
87317: PUSH
87318: LD_INT 4
87320: NEG
87321: PUSH
87322: EMPTY
87323: LIST
87324: LIST
87325: PUSH
87326: LD_INT 4
87328: NEG
87329: PUSH
87330: LD_INT 2
87332: NEG
87333: PUSH
87334: EMPTY
87335: LIST
87336: LIST
87337: PUSH
87338: LD_INT 0
87340: PUSH
87341: LD_INT 4
87343: NEG
87344: PUSH
87345: EMPTY
87346: LIST
87347: LIST
87348: PUSH
87349: LD_INT 0
87351: PUSH
87352: LD_INT 5
87354: NEG
87355: PUSH
87356: EMPTY
87357: LIST
87358: LIST
87359: PUSH
87360: LD_INT 1
87362: PUSH
87363: LD_INT 4
87365: NEG
87366: PUSH
87367: EMPTY
87368: LIST
87369: LIST
87370: PUSH
87371: LD_INT 1
87373: PUSH
87374: LD_INT 3
87376: NEG
87377: PUSH
87378: EMPTY
87379: LIST
87380: LIST
87381: PUSH
87382: LD_INT 0
87384: PUSH
87385: LD_INT 3
87387: NEG
87388: PUSH
87389: EMPTY
87390: LIST
87391: LIST
87392: PUSH
87393: LD_INT 1
87395: NEG
87396: PUSH
87397: LD_INT 4
87399: NEG
87400: PUSH
87401: EMPTY
87402: LIST
87403: LIST
87404: PUSH
87405: LD_INT 1
87407: NEG
87408: PUSH
87409: LD_INT 5
87411: NEG
87412: PUSH
87413: EMPTY
87414: LIST
87415: LIST
87416: PUSH
87417: LD_INT 2
87419: PUSH
87420: LD_INT 3
87422: NEG
87423: PUSH
87424: EMPTY
87425: LIST
87426: LIST
87427: PUSH
87428: LD_INT 2
87430: NEG
87431: PUSH
87432: LD_INT 5
87434: NEG
87435: PUSH
87436: EMPTY
87437: LIST
87438: LIST
87439: PUSH
87440: LD_INT 3
87442: PUSH
87443: LD_INT 0
87445: PUSH
87446: EMPTY
87447: LIST
87448: LIST
87449: PUSH
87450: LD_INT 3
87452: PUSH
87453: LD_INT 1
87455: NEG
87456: PUSH
87457: EMPTY
87458: LIST
87459: LIST
87460: PUSH
87461: LD_INT 4
87463: PUSH
87464: LD_INT 0
87466: PUSH
87467: EMPTY
87468: LIST
87469: LIST
87470: PUSH
87471: LD_INT 4
87473: PUSH
87474: LD_INT 1
87476: PUSH
87477: EMPTY
87478: LIST
87479: LIST
87480: PUSH
87481: LD_INT 3
87483: PUSH
87484: LD_INT 1
87486: PUSH
87487: EMPTY
87488: LIST
87489: LIST
87490: PUSH
87491: LD_INT 2
87493: PUSH
87494: LD_INT 0
87496: PUSH
87497: EMPTY
87498: LIST
87499: LIST
87500: PUSH
87501: LD_INT 2
87503: PUSH
87504: LD_INT 1
87506: NEG
87507: PUSH
87508: EMPTY
87509: LIST
87510: LIST
87511: PUSH
87512: LD_INT 2
87514: PUSH
87515: LD_INT 2
87517: NEG
87518: PUSH
87519: EMPTY
87520: LIST
87521: LIST
87522: PUSH
87523: LD_INT 4
87525: PUSH
87526: LD_INT 2
87528: PUSH
87529: EMPTY
87530: LIST
87531: LIST
87532: PUSH
87533: LD_INT 4
87535: PUSH
87536: LD_INT 4
87538: PUSH
87539: EMPTY
87540: LIST
87541: LIST
87542: PUSH
87543: LD_INT 4
87545: PUSH
87546: LD_INT 3
87548: PUSH
87549: EMPTY
87550: LIST
87551: LIST
87552: PUSH
87553: LD_INT 5
87555: PUSH
87556: LD_INT 4
87558: PUSH
87559: EMPTY
87560: LIST
87561: LIST
87562: PUSH
87563: LD_INT 5
87565: PUSH
87566: LD_INT 5
87568: PUSH
87569: EMPTY
87570: LIST
87571: LIST
87572: PUSH
87573: LD_INT 4
87575: PUSH
87576: LD_INT 5
87578: PUSH
87579: EMPTY
87580: LIST
87581: LIST
87582: PUSH
87583: LD_INT 3
87585: PUSH
87586: LD_INT 4
87588: PUSH
87589: EMPTY
87590: LIST
87591: LIST
87592: PUSH
87593: LD_INT 3
87595: PUSH
87596: LD_INT 3
87598: PUSH
87599: EMPTY
87600: LIST
87601: LIST
87602: PUSH
87603: LD_INT 5
87605: PUSH
87606: LD_INT 3
87608: PUSH
87609: EMPTY
87610: LIST
87611: LIST
87612: PUSH
87613: LD_INT 3
87615: PUSH
87616: LD_INT 5
87618: PUSH
87619: EMPTY
87620: LIST
87621: LIST
87622: PUSH
87623: EMPTY
87624: LIST
87625: LIST
87626: LIST
87627: LIST
87628: LIST
87629: LIST
87630: LIST
87631: LIST
87632: LIST
87633: LIST
87634: LIST
87635: LIST
87636: LIST
87637: LIST
87638: LIST
87639: LIST
87640: LIST
87641: LIST
87642: LIST
87643: LIST
87644: LIST
87645: LIST
87646: LIST
87647: LIST
87648: LIST
87649: LIST
87650: LIST
87651: LIST
87652: LIST
87653: LIST
87654: LIST
87655: LIST
87656: LIST
87657: LIST
87658: LIST
87659: LIST
87660: LIST
87661: LIST
87662: LIST
87663: LIST
87664: LIST
87665: LIST
87666: LIST
87667: LIST
87668: LIST
87669: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
87670: LD_ADDR_VAR 0 33
87674: PUSH
87675: LD_INT 4
87677: NEG
87678: PUSH
87679: LD_INT 4
87681: NEG
87682: PUSH
87683: EMPTY
87684: LIST
87685: LIST
87686: PUSH
87687: LD_INT 4
87689: NEG
87690: PUSH
87691: LD_INT 5
87693: NEG
87694: PUSH
87695: EMPTY
87696: LIST
87697: LIST
87698: PUSH
87699: LD_INT 3
87701: NEG
87702: PUSH
87703: LD_INT 4
87705: NEG
87706: PUSH
87707: EMPTY
87708: LIST
87709: LIST
87710: PUSH
87711: LD_INT 3
87713: NEG
87714: PUSH
87715: LD_INT 3
87717: NEG
87718: PUSH
87719: EMPTY
87720: LIST
87721: LIST
87722: PUSH
87723: LD_INT 4
87725: NEG
87726: PUSH
87727: LD_INT 3
87729: NEG
87730: PUSH
87731: EMPTY
87732: LIST
87733: LIST
87734: PUSH
87735: LD_INT 5
87737: NEG
87738: PUSH
87739: LD_INT 4
87741: NEG
87742: PUSH
87743: EMPTY
87744: LIST
87745: LIST
87746: PUSH
87747: LD_INT 5
87749: NEG
87750: PUSH
87751: LD_INT 5
87753: NEG
87754: PUSH
87755: EMPTY
87756: LIST
87757: LIST
87758: PUSH
87759: LD_INT 3
87761: NEG
87762: PUSH
87763: LD_INT 5
87765: NEG
87766: PUSH
87767: EMPTY
87768: LIST
87769: LIST
87770: PUSH
87771: LD_INT 5
87773: NEG
87774: PUSH
87775: LD_INT 3
87777: NEG
87778: PUSH
87779: EMPTY
87780: LIST
87781: LIST
87782: PUSH
87783: LD_INT 0
87785: PUSH
87786: LD_INT 3
87788: NEG
87789: PUSH
87790: EMPTY
87791: LIST
87792: LIST
87793: PUSH
87794: LD_INT 0
87796: PUSH
87797: LD_INT 4
87799: NEG
87800: PUSH
87801: EMPTY
87802: LIST
87803: LIST
87804: PUSH
87805: LD_INT 1
87807: PUSH
87808: LD_INT 3
87810: NEG
87811: PUSH
87812: EMPTY
87813: LIST
87814: LIST
87815: PUSH
87816: LD_INT 1
87818: PUSH
87819: LD_INT 2
87821: NEG
87822: PUSH
87823: EMPTY
87824: LIST
87825: LIST
87826: PUSH
87827: LD_INT 0
87829: PUSH
87830: LD_INT 2
87832: NEG
87833: PUSH
87834: EMPTY
87835: LIST
87836: LIST
87837: PUSH
87838: LD_INT 1
87840: NEG
87841: PUSH
87842: LD_INT 3
87844: NEG
87845: PUSH
87846: EMPTY
87847: LIST
87848: LIST
87849: PUSH
87850: LD_INT 1
87852: NEG
87853: PUSH
87854: LD_INT 4
87856: NEG
87857: PUSH
87858: EMPTY
87859: LIST
87860: LIST
87861: PUSH
87862: LD_INT 2
87864: PUSH
87865: LD_INT 2
87867: NEG
87868: PUSH
87869: EMPTY
87870: LIST
87871: LIST
87872: PUSH
87873: LD_INT 2
87875: NEG
87876: PUSH
87877: LD_INT 4
87879: NEG
87880: PUSH
87881: EMPTY
87882: LIST
87883: LIST
87884: PUSH
87885: LD_INT 4
87887: PUSH
87888: LD_INT 0
87890: PUSH
87891: EMPTY
87892: LIST
87893: LIST
87894: PUSH
87895: LD_INT 4
87897: PUSH
87898: LD_INT 1
87900: NEG
87901: PUSH
87902: EMPTY
87903: LIST
87904: LIST
87905: PUSH
87906: LD_INT 5
87908: PUSH
87909: LD_INT 0
87911: PUSH
87912: EMPTY
87913: LIST
87914: LIST
87915: PUSH
87916: LD_INT 5
87918: PUSH
87919: LD_INT 1
87921: PUSH
87922: EMPTY
87923: LIST
87924: LIST
87925: PUSH
87926: LD_INT 4
87928: PUSH
87929: LD_INT 1
87931: PUSH
87932: EMPTY
87933: LIST
87934: LIST
87935: PUSH
87936: LD_INT 3
87938: PUSH
87939: LD_INT 0
87941: PUSH
87942: EMPTY
87943: LIST
87944: LIST
87945: PUSH
87946: LD_INT 3
87948: PUSH
87949: LD_INT 1
87951: NEG
87952: PUSH
87953: EMPTY
87954: LIST
87955: LIST
87956: PUSH
87957: LD_INT 3
87959: PUSH
87960: LD_INT 2
87962: NEG
87963: PUSH
87964: EMPTY
87965: LIST
87966: LIST
87967: PUSH
87968: LD_INT 5
87970: PUSH
87971: LD_INT 2
87973: PUSH
87974: EMPTY
87975: LIST
87976: LIST
87977: PUSH
87978: LD_INT 3
87980: PUSH
87981: LD_INT 3
87983: PUSH
87984: EMPTY
87985: LIST
87986: LIST
87987: PUSH
87988: LD_INT 3
87990: PUSH
87991: LD_INT 2
87993: PUSH
87994: EMPTY
87995: LIST
87996: LIST
87997: PUSH
87998: LD_INT 4
88000: PUSH
88001: LD_INT 3
88003: PUSH
88004: EMPTY
88005: LIST
88006: LIST
88007: PUSH
88008: LD_INT 4
88010: PUSH
88011: LD_INT 4
88013: PUSH
88014: EMPTY
88015: LIST
88016: LIST
88017: PUSH
88018: LD_INT 3
88020: PUSH
88021: LD_INT 4
88023: PUSH
88024: EMPTY
88025: LIST
88026: LIST
88027: PUSH
88028: LD_INT 2
88030: PUSH
88031: LD_INT 3
88033: PUSH
88034: EMPTY
88035: LIST
88036: LIST
88037: PUSH
88038: LD_INT 2
88040: PUSH
88041: LD_INT 2
88043: PUSH
88044: EMPTY
88045: LIST
88046: LIST
88047: PUSH
88048: LD_INT 4
88050: PUSH
88051: LD_INT 2
88053: PUSH
88054: EMPTY
88055: LIST
88056: LIST
88057: PUSH
88058: LD_INT 2
88060: PUSH
88061: LD_INT 4
88063: PUSH
88064: EMPTY
88065: LIST
88066: LIST
88067: PUSH
88068: LD_INT 0
88070: PUSH
88071: LD_INT 4
88073: PUSH
88074: EMPTY
88075: LIST
88076: LIST
88077: PUSH
88078: LD_INT 0
88080: PUSH
88081: LD_INT 3
88083: PUSH
88084: EMPTY
88085: LIST
88086: LIST
88087: PUSH
88088: LD_INT 1
88090: PUSH
88091: LD_INT 4
88093: PUSH
88094: EMPTY
88095: LIST
88096: LIST
88097: PUSH
88098: LD_INT 1
88100: PUSH
88101: LD_INT 5
88103: PUSH
88104: EMPTY
88105: LIST
88106: LIST
88107: PUSH
88108: LD_INT 0
88110: PUSH
88111: LD_INT 5
88113: PUSH
88114: EMPTY
88115: LIST
88116: LIST
88117: PUSH
88118: LD_INT 1
88120: NEG
88121: PUSH
88122: LD_INT 4
88124: PUSH
88125: EMPTY
88126: LIST
88127: LIST
88128: PUSH
88129: LD_INT 1
88131: NEG
88132: PUSH
88133: LD_INT 3
88135: PUSH
88136: EMPTY
88137: LIST
88138: LIST
88139: PUSH
88140: LD_INT 2
88142: PUSH
88143: LD_INT 5
88145: PUSH
88146: EMPTY
88147: LIST
88148: LIST
88149: PUSH
88150: LD_INT 2
88152: NEG
88153: PUSH
88154: LD_INT 3
88156: PUSH
88157: EMPTY
88158: LIST
88159: LIST
88160: PUSH
88161: EMPTY
88162: LIST
88163: LIST
88164: LIST
88165: LIST
88166: LIST
88167: LIST
88168: LIST
88169: LIST
88170: LIST
88171: LIST
88172: LIST
88173: LIST
88174: LIST
88175: LIST
88176: LIST
88177: LIST
88178: LIST
88179: LIST
88180: LIST
88181: LIST
88182: LIST
88183: LIST
88184: LIST
88185: LIST
88186: LIST
88187: LIST
88188: LIST
88189: LIST
88190: LIST
88191: LIST
88192: LIST
88193: LIST
88194: LIST
88195: LIST
88196: LIST
88197: LIST
88198: LIST
88199: LIST
88200: LIST
88201: LIST
88202: LIST
88203: LIST
88204: LIST
88205: LIST
88206: LIST
88207: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
88208: LD_ADDR_VAR 0 34
88212: PUSH
88213: LD_INT 0
88215: PUSH
88216: LD_INT 4
88218: NEG
88219: PUSH
88220: EMPTY
88221: LIST
88222: LIST
88223: PUSH
88224: LD_INT 0
88226: PUSH
88227: LD_INT 5
88229: NEG
88230: PUSH
88231: EMPTY
88232: LIST
88233: LIST
88234: PUSH
88235: LD_INT 1
88237: PUSH
88238: LD_INT 4
88240: NEG
88241: PUSH
88242: EMPTY
88243: LIST
88244: LIST
88245: PUSH
88246: LD_INT 1
88248: PUSH
88249: LD_INT 3
88251: NEG
88252: PUSH
88253: EMPTY
88254: LIST
88255: LIST
88256: PUSH
88257: LD_INT 0
88259: PUSH
88260: LD_INT 3
88262: NEG
88263: PUSH
88264: EMPTY
88265: LIST
88266: LIST
88267: PUSH
88268: LD_INT 1
88270: NEG
88271: PUSH
88272: LD_INT 4
88274: NEG
88275: PUSH
88276: EMPTY
88277: LIST
88278: LIST
88279: PUSH
88280: LD_INT 1
88282: NEG
88283: PUSH
88284: LD_INT 5
88286: NEG
88287: PUSH
88288: EMPTY
88289: LIST
88290: LIST
88291: PUSH
88292: LD_INT 2
88294: PUSH
88295: LD_INT 3
88297: NEG
88298: PUSH
88299: EMPTY
88300: LIST
88301: LIST
88302: PUSH
88303: LD_INT 2
88305: NEG
88306: PUSH
88307: LD_INT 5
88309: NEG
88310: PUSH
88311: EMPTY
88312: LIST
88313: LIST
88314: PUSH
88315: LD_INT 3
88317: PUSH
88318: LD_INT 0
88320: PUSH
88321: EMPTY
88322: LIST
88323: LIST
88324: PUSH
88325: LD_INT 3
88327: PUSH
88328: LD_INT 1
88330: NEG
88331: PUSH
88332: EMPTY
88333: LIST
88334: LIST
88335: PUSH
88336: LD_INT 4
88338: PUSH
88339: LD_INT 0
88341: PUSH
88342: EMPTY
88343: LIST
88344: LIST
88345: PUSH
88346: LD_INT 4
88348: PUSH
88349: LD_INT 1
88351: PUSH
88352: EMPTY
88353: LIST
88354: LIST
88355: PUSH
88356: LD_INT 3
88358: PUSH
88359: LD_INT 1
88361: PUSH
88362: EMPTY
88363: LIST
88364: LIST
88365: PUSH
88366: LD_INT 2
88368: PUSH
88369: LD_INT 0
88371: PUSH
88372: EMPTY
88373: LIST
88374: LIST
88375: PUSH
88376: LD_INT 2
88378: PUSH
88379: LD_INT 1
88381: NEG
88382: PUSH
88383: EMPTY
88384: LIST
88385: LIST
88386: PUSH
88387: LD_INT 2
88389: PUSH
88390: LD_INT 2
88392: NEG
88393: PUSH
88394: EMPTY
88395: LIST
88396: LIST
88397: PUSH
88398: LD_INT 4
88400: PUSH
88401: LD_INT 2
88403: PUSH
88404: EMPTY
88405: LIST
88406: LIST
88407: PUSH
88408: LD_INT 4
88410: PUSH
88411: LD_INT 4
88413: PUSH
88414: EMPTY
88415: LIST
88416: LIST
88417: PUSH
88418: LD_INT 4
88420: PUSH
88421: LD_INT 3
88423: PUSH
88424: EMPTY
88425: LIST
88426: LIST
88427: PUSH
88428: LD_INT 5
88430: PUSH
88431: LD_INT 4
88433: PUSH
88434: EMPTY
88435: LIST
88436: LIST
88437: PUSH
88438: LD_INT 5
88440: PUSH
88441: LD_INT 5
88443: PUSH
88444: EMPTY
88445: LIST
88446: LIST
88447: PUSH
88448: LD_INT 4
88450: PUSH
88451: LD_INT 5
88453: PUSH
88454: EMPTY
88455: LIST
88456: LIST
88457: PUSH
88458: LD_INT 3
88460: PUSH
88461: LD_INT 4
88463: PUSH
88464: EMPTY
88465: LIST
88466: LIST
88467: PUSH
88468: LD_INT 3
88470: PUSH
88471: LD_INT 3
88473: PUSH
88474: EMPTY
88475: LIST
88476: LIST
88477: PUSH
88478: LD_INT 5
88480: PUSH
88481: LD_INT 3
88483: PUSH
88484: EMPTY
88485: LIST
88486: LIST
88487: PUSH
88488: LD_INT 3
88490: PUSH
88491: LD_INT 5
88493: PUSH
88494: EMPTY
88495: LIST
88496: LIST
88497: PUSH
88498: LD_INT 0
88500: PUSH
88501: LD_INT 3
88503: PUSH
88504: EMPTY
88505: LIST
88506: LIST
88507: PUSH
88508: LD_INT 0
88510: PUSH
88511: LD_INT 2
88513: PUSH
88514: EMPTY
88515: LIST
88516: LIST
88517: PUSH
88518: LD_INT 1
88520: PUSH
88521: LD_INT 3
88523: PUSH
88524: EMPTY
88525: LIST
88526: LIST
88527: PUSH
88528: LD_INT 1
88530: PUSH
88531: LD_INT 4
88533: PUSH
88534: EMPTY
88535: LIST
88536: LIST
88537: PUSH
88538: LD_INT 0
88540: PUSH
88541: LD_INT 4
88543: PUSH
88544: EMPTY
88545: LIST
88546: LIST
88547: PUSH
88548: LD_INT 1
88550: NEG
88551: PUSH
88552: LD_INT 3
88554: PUSH
88555: EMPTY
88556: LIST
88557: LIST
88558: PUSH
88559: LD_INT 1
88561: NEG
88562: PUSH
88563: LD_INT 2
88565: PUSH
88566: EMPTY
88567: LIST
88568: LIST
88569: PUSH
88570: LD_INT 2
88572: PUSH
88573: LD_INT 4
88575: PUSH
88576: EMPTY
88577: LIST
88578: LIST
88579: PUSH
88580: LD_INT 2
88582: NEG
88583: PUSH
88584: LD_INT 2
88586: PUSH
88587: EMPTY
88588: LIST
88589: LIST
88590: PUSH
88591: LD_INT 4
88593: NEG
88594: PUSH
88595: LD_INT 0
88597: PUSH
88598: EMPTY
88599: LIST
88600: LIST
88601: PUSH
88602: LD_INT 4
88604: NEG
88605: PUSH
88606: LD_INT 1
88608: NEG
88609: PUSH
88610: EMPTY
88611: LIST
88612: LIST
88613: PUSH
88614: LD_INT 3
88616: NEG
88617: PUSH
88618: LD_INT 0
88620: PUSH
88621: EMPTY
88622: LIST
88623: LIST
88624: PUSH
88625: LD_INT 3
88627: NEG
88628: PUSH
88629: LD_INT 1
88631: PUSH
88632: EMPTY
88633: LIST
88634: LIST
88635: PUSH
88636: LD_INT 4
88638: NEG
88639: PUSH
88640: LD_INT 1
88642: PUSH
88643: EMPTY
88644: LIST
88645: LIST
88646: PUSH
88647: LD_INT 5
88649: NEG
88650: PUSH
88651: LD_INT 0
88653: PUSH
88654: EMPTY
88655: LIST
88656: LIST
88657: PUSH
88658: LD_INT 5
88660: NEG
88661: PUSH
88662: LD_INT 1
88664: NEG
88665: PUSH
88666: EMPTY
88667: LIST
88668: LIST
88669: PUSH
88670: LD_INT 5
88672: NEG
88673: PUSH
88674: LD_INT 2
88676: NEG
88677: PUSH
88678: EMPTY
88679: LIST
88680: LIST
88681: PUSH
88682: LD_INT 3
88684: NEG
88685: PUSH
88686: LD_INT 2
88688: PUSH
88689: EMPTY
88690: LIST
88691: LIST
88692: PUSH
88693: EMPTY
88694: LIST
88695: LIST
88696: LIST
88697: LIST
88698: LIST
88699: LIST
88700: LIST
88701: LIST
88702: LIST
88703: LIST
88704: LIST
88705: LIST
88706: LIST
88707: LIST
88708: LIST
88709: LIST
88710: LIST
88711: LIST
88712: LIST
88713: LIST
88714: LIST
88715: LIST
88716: LIST
88717: LIST
88718: LIST
88719: LIST
88720: LIST
88721: LIST
88722: LIST
88723: LIST
88724: LIST
88725: LIST
88726: LIST
88727: LIST
88728: LIST
88729: LIST
88730: LIST
88731: LIST
88732: LIST
88733: LIST
88734: LIST
88735: LIST
88736: LIST
88737: LIST
88738: LIST
88739: ST_TO_ADDR
// end ; end ;
88740: GO 88743
88742: POP
// case btype of b_depot , b_warehouse :
88743: LD_VAR 0 1
88747: PUSH
88748: LD_INT 0
88750: DOUBLE
88751: EQUAL
88752: IFTRUE 88762
88754: LD_INT 1
88756: DOUBLE
88757: EQUAL
88758: IFTRUE 88762
88760: GO 88963
88762: POP
// case nation of nation_american :
88763: LD_VAR 0 5
88767: PUSH
88768: LD_INT 1
88770: DOUBLE
88771: EQUAL
88772: IFTRUE 88776
88774: GO 88832
88776: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
88777: LD_ADDR_VAR 0 9
88781: PUSH
88782: LD_VAR 0 11
88786: PUSH
88787: LD_VAR 0 12
88791: PUSH
88792: LD_VAR 0 13
88796: PUSH
88797: LD_VAR 0 14
88801: PUSH
88802: LD_VAR 0 15
88806: PUSH
88807: LD_VAR 0 16
88811: PUSH
88812: EMPTY
88813: LIST
88814: LIST
88815: LIST
88816: LIST
88817: LIST
88818: LIST
88819: PUSH
88820: LD_VAR 0 4
88824: PUSH
88825: LD_INT 1
88827: PLUS
88828: ARRAY
88829: ST_TO_ADDR
88830: GO 88961
88832: LD_INT 2
88834: DOUBLE
88835: EQUAL
88836: IFTRUE 88840
88838: GO 88896
88840: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
88841: LD_ADDR_VAR 0 9
88845: PUSH
88846: LD_VAR 0 17
88850: PUSH
88851: LD_VAR 0 18
88855: PUSH
88856: LD_VAR 0 19
88860: PUSH
88861: LD_VAR 0 20
88865: PUSH
88866: LD_VAR 0 21
88870: PUSH
88871: LD_VAR 0 22
88875: PUSH
88876: EMPTY
88877: LIST
88878: LIST
88879: LIST
88880: LIST
88881: LIST
88882: LIST
88883: PUSH
88884: LD_VAR 0 4
88888: PUSH
88889: LD_INT 1
88891: PLUS
88892: ARRAY
88893: ST_TO_ADDR
88894: GO 88961
88896: LD_INT 3
88898: DOUBLE
88899: EQUAL
88900: IFTRUE 88904
88902: GO 88960
88904: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
88905: LD_ADDR_VAR 0 9
88909: PUSH
88910: LD_VAR 0 23
88914: PUSH
88915: LD_VAR 0 24
88919: PUSH
88920: LD_VAR 0 25
88924: PUSH
88925: LD_VAR 0 26
88929: PUSH
88930: LD_VAR 0 27
88934: PUSH
88935: LD_VAR 0 28
88939: PUSH
88940: EMPTY
88941: LIST
88942: LIST
88943: LIST
88944: LIST
88945: LIST
88946: LIST
88947: PUSH
88948: LD_VAR 0 4
88952: PUSH
88953: LD_INT 1
88955: PLUS
88956: ARRAY
88957: ST_TO_ADDR
88958: GO 88961
88960: POP
88961: GO 89516
88963: LD_INT 2
88965: DOUBLE
88966: EQUAL
88967: IFTRUE 88977
88969: LD_INT 3
88971: DOUBLE
88972: EQUAL
88973: IFTRUE 88977
88975: GO 89033
88977: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
88978: LD_ADDR_VAR 0 9
88982: PUSH
88983: LD_VAR 0 29
88987: PUSH
88988: LD_VAR 0 30
88992: PUSH
88993: LD_VAR 0 31
88997: PUSH
88998: LD_VAR 0 32
89002: PUSH
89003: LD_VAR 0 33
89007: PUSH
89008: LD_VAR 0 34
89012: PUSH
89013: EMPTY
89014: LIST
89015: LIST
89016: LIST
89017: LIST
89018: LIST
89019: LIST
89020: PUSH
89021: LD_VAR 0 4
89025: PUSH
89026: LD_INT 1
89028: PLUS
89029: ARRAY
89030: ST_TO_ADDR
89031: GO 89516
89033: LD_INT 16
89035: DOUBLE
89036: EQUAL
89037: IFTRUE 89095
89039: LD_INT 17
89041: DOUBLE
89042: EQUAL
89043: IFTRUE 89095
89045: LD_INT 18
89047: DOUBLE
89048: EQUAL
89049: IFTRUE 89095
89051: LD_INT 19
89053: DOUBLE
89054: EQUAL
89055: IFTRUE 89095
89057: LD_INT 22
89059: DOUBLE
89060: EQUAL
89061: IFTRUE 89095
89063: LD_INT 20
89065: DOUBLE
89066: EQUAL
89067: IFTRUE 89095
89069: LD_INT 21
89071: DOUBLE
89072: EQUAL
89073: IFTRUE 89095
89075: LD_INT 23
89077: DOUBLE
89078: EQUAL
89079: IFTRUE 89095
89081: LD_INT 24
89083: DOUBLE
89084: EQUAL
89085: IFTRUE 89095
89087: LD_INT 25
89089: DOUBLE
89090: EQUAL
89091: IFTRUE 89095
89093: GO 89151
89095: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
89096: LD_ADDR_VAR 0 9
89100: PUSH
89101: LD_VAR 0 35
89105: PUSH
89106: LD_VAR 0 36
89110: PUSH
89111: LD_VAR 0 37
89115: PUSH
89116: LD_VAR 0 38
89120: PUSH
89121: LD_VAR 0 39
89125: PUSH
89126: LD_VAR 0 40
89130: PUSH
89131: EMPTY
89132: LIST
89133: LIST
89134: LIST
89135: LIST
89136: LIST
89137: LIST
89138: PUSH
89139: LD_VAR 0 4
89143: PUSH
89144: LD_INT 1
89146: PLUS
89147: ARRAY
89148: ST_TO_ADDR
89149: GO 89516
89151: LD_INT 6
89153: DOUBLE
89154: EQUAL
89155: IFTRUE 89207
89157: LD_INT 7
89159: DOUBLE
89160: EQUAL
89161: IFTRUE 89207
89163: LD_INT 8
89165: DOUBLE
89166: EQUAL
89167: IFTRUE 89207
89169: LD_INT 13
89171: DOUBLE
89172: EQUAL
89173: IFTRUE 89207
89175: LD_INT 12
89177: DOUBLE
89178: EQUAL
89179: IFTRUE 89207
89181: LD_INT 15
89183: DOUBLE
89184: EQUAL
89185: IFTRUE 89207
89187: LD_INT 11
89189: DOUBLE
89190: EQUAL
89191: IFTRUE 89207
89193: LD_INT 14
89195: DOUBLE
89196: EQUAL
89197: IFTRUE 89207
89199: LD_INT 10
89201: DOUBLE
89202: EQUAL
89203: IFTRUE 89207
89205: GO 89263
89207: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
89208: LD_ADDR_VAR 0 9
89212: PUSH
89213: LD_VAR 0 41
89217: PUSH
89218: LD_VAR 0 42
89222: PUSH
89223: LD_VAR 0 43
89227: PUSH
89228: LD_VAR 0 44
89232: PUSH
89233: LD_VAR 0 45
89237: PUSH
89238: LD_VAR 0 46
89242: PUSH
89243: EMPTY
89244: LIST
89245: LIST
89246: LIST
89247: LIST
89248: LIST
89249: LIST
89250: PUSH
89251: LD_VAR 0 4
89255: PUSH
89256: LD_INT 1
89258: PLUS
89259: ARRAY
89260: ST_TO_ADDR
89261: GO 89516
89263: LD_INT 36
89265: DOUBLE
89266: EQUAL
89267: IFTRUE 89271
89269: GO 89327
89271: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
89272: LD_ADDR_VAR 0 9
89276: PUSH
89277: LD_VAR 0 47
89281: PUSH
89282: LD_VAR 0 48
89286: PUSH
89287: LD_VAR 0 49
89291: PUSH
89292: LD_VAR 0 50
89296: PUSH
89297: LD_VAR 0 51
89301: PUSH
89302: LD_VAR 0 52
89306: PUSH
89307: EMPTY
89308: LIST
89309: LIST
89310: LIST
89311: LIST
89312: LIST
89313: LIST
89314: PUSH
89315: LD_VAR 0 4
89319: PUSH
89320: LD_INT 1
89322: PLUS
89323: ARRAY
89324: ST_TO_ADDR
89325: GO 89516
89327: LD_INT 4
89329: DOUBLE
89330: EQUAL
89331: IFTRUE 89353
89333: LD_INT 5
89335: DOUBLE
89336: EQUAL
89337: IFTRUE 89353
89339: LD_INT 34
89341: DOUBLE
89342: EQUAL
89343: IFTRUE 89353
89345: LD_INT 37
89347: DOUBLE
89348: EQUAL
89349: IFTRUE 89353
89351: GO 89409
89353: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
89354: LD_ADDR_VAR 0 9
89358: PUSH
89359: LD_VAR 0 53
89363: PUSH
89364: LD_VAR 0 54
89368: PUSH
89369: LD_VAR 0 55
89373: PUSH
89374: LD_VAR 0 56
89378: PUSH
89379: LD_VAR 0 57
89383: PUSH
89384: LD_VAR 0 58
89388: PUSH
89389: EMPTY
89390: LIST
89391: LIST
89392: LIST
89393: LIST
89394: LIST
89395: LIST
89396: PUSH
89397: LD_VAR 0 4
89401: PUSH
89402: LD_INT 1
89404: PLUS
89405: ARRAY
89406: ST_TO_ADDR
89407: GO 89516
89409: LD_INT 31
89411: DOUBLE
89412: EQUAL
89413: IFTRUE 89459
89415: LD_INT 32
89417: DOUBLE
89418: EQUAL
89419: IFTRUE 89459
89421: LD_INT 33
89423: DOUBLE
89424: EQUAL
89425: IFTRUE 89459
89427: LD_INT 27
89429: DOUBLE
89430: EQUAL
89431: IFTRUE 89459
89433: LD_INT 26
89435: DOUBLE
89436: EQUAL
89437: IFTRUE 89459
89439: LD_INT 28
89441: DOUBLE
89442: EQUAL
89443: IFTRUE 89459
89445: LD_INT 29
89447: DOUBLE
89448: EQUAL
89449: IFTRUE 89459
89451: LD_INT 30
89453: DOUBLE
89454: EQUAL
89455: IFTRUE 89459
89457: GO 89515
89459: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
89460: LD_ADDR_VAR 0 9
89464: PUSH
89465: LD_VAR 0 59
89469: PUSH
89470: LD_VAR 0 60
89474: PUSH
89475: LD_VAR 0 61
89479: PUSH
89480: LD_VAR 0 62
89484: PUSH
89485: LD_VAR 0 63
89489: PUSH
89490: LD_VAR 0 64
89494: PUSH
89495: EMPTY
89496: LIST
89497: LIST
89498: LIST
89499: LIST
89500: LIST
89501: LIST
89502: PUSH
89503: LD_VAR 0 4
89507: PUSH
89508: LD_INT 1
89510: PLUS
89511: ARRAY
89512: ST_TO_ADDR
89513: GO 89516
89515: POP
// temp_list2 = [ ] ;
89516: LD_ADDR_VAR 0 10
89520: PUSH
89521: EMPTY
89522: ST_TO_ADDR
// for i in temp_list do
89523: LD_ADDR_VAR 0 8
89527: PUSH
89528: LD_VAR 0 9
89532: PUSH
89533: FOR_IN
89534: IFFALSE 89586
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
89536: LD_ADDR_VAR 0 10
89540: PUSH
89541: LD_VAR 0 10
89545: PUSH
89546: LD_VAR 0 8
89550: PUSH
89551: LD_INT 1
89553: ARRAY
89554: PUSH
89555: LD_VAR 0 2
89559: PLUS
89560: PUSH
89561: LD_VAR 0 8
89565: PUSH
89566: LD_INT 2
89568: ARRAY
89569: PUSH
89570: LD_VAR 0 3
89574: PLUS
89575: PUSH
89576: EMPTY
89577: LIST
89578: LIST
89579: PUSH
89580: EMPTY
89581: LIST
89582: ADD
89583: ST_TO_ADDR
89584: GO 89533
89586: POP
89587: POP
// result = temp_list2 ;
89588: LD_ADDR_VAR 0 7
89592: PUSH
89593: LD_VAR 0 10
89597: ST_TO_ADDR
// end ;
89598: LD_VAR 0 7
89602: RET
// export function EnemyInRange ( unit , dist ) ; begin
89603: LD_INT 0
89605: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
89606: LD_ADDR_VAR 0 3
89610: PUSH
89611: LD_VAR 0 1
89615: PPUSH
89616: CALL_OW 255
89620: PPUSH
89621: LD_VAR 0 1
89625: PPUSH
89626: CALL_OW 250
89630: PPUSH
89631: LD_VAR 0 1
89635: PPUSH
89636: CALL_OW 251
89640: PPUSH
89641: LD_VAR 0 2
89645: PPUSH
89646: CALL 62860 0 4
89650: PUSH
89651: LD_INT 4
89653: ARRAY
89654: ST_TO_ADDR
// end ;
89655: LD_VAR 0 3
89659: RET
// export function PlayerSeeMe ( unit ) ; begin
89660: LD_INT 0
89662: PPUSH
// result := See ( your_side , unit ) ;
89663: LD_ADDR_VAR 0 2
89667: PUSH
89668: LD_OWVAR 2
89672: PPUSH
89673: LD_VAR 0 1
89677: PPUSH
89678: CALL_OW 292
89682: ST_TO_ADDR
// end ;
89683: LD_VAR 0 2
89687: RET
// export function ReverseDir ( unit ) ; begin
89688: LD_INT 0
89690: PPUSH
// if not unit then
89691: LD_VAR 0 1
89695: NOT
89696: IFFALSE 89700
// exit ;
89698: GO 89723
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
89700: LD_ADDR_VAR 0 2
89704: PUSH
89705: LD_VAR 0 1
89709: PPUSH
89710: CALL_OW 254
89714: PUSH
89715: LD_INT 3
89717: PLUS
89718: PUSH
89719: LD_INT 6
89721: MOD
89722: ST_TO_ADDR
// end ;
89723: LD_VAR 0 2
89727: RET
// export function ReverseArray ( array ) ; var i ; begin
89728: LD_INT 0
89730: PPUSH
89731: PPUSH
// if not array then
89732: LD_VAR 0 1
89736: NOT
89737: IFFALSE 89741
// exit ;
89739: GO 89796
// result := [ ] ;
89741: LD_ADDR_VAR 0 2
89745: PUSH
89746: EMPTY
89747: ST_TO_ADDR
// for i := array downto 1 do
89748: LD_ADDR_VAR 0 3
89752: PUSH
89753: DOUBLE
89754: LD_VAR 0 1
89758: INC
89759: ST_TO_ADDR
89760: LD_INT 1
89762: PUSH
89763: FOR_DOWNTO
89764: IFFALSE 89794
// result := Join ( result , array [ i ] ) ;
89766: LD_ADDR_VAR 0 2
89770: PUSH
89771: LD_VAR 0 2
89775: PPUSH
89776: LD_VAR 0 1
89780: PUSH
89781: LD_VAR 0 3
89785: ARRAY
89786: PPUSH
89787: CALL 94638 0 2
89791: ST_TO_ADDR
89792: GO 89763
89794: POP
89795: POP
// end ;
89796: LD_VAR 0 2
89800: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
89801: LD_INT 0
89803: PPUSH
89804: PPUSH
89805: PPUSH
89806: PPUSH
89807: PPUSH
89808: PPUSH
// if not unit or not hexes then
89809: LD_VAR 0 1
89813: NOT
89814: IFTRUE 89823
89816: PUSH
89817: LD_VAR 0 2
89821: NOT
89822: OR
89823: IFFALSE 89827
// exit ;
89825: GO 89950
// dist := 9999 ;
89827: LD_ADDR_VAR 0 5
89831: PUSH
89832: LD_INT 9999
89834: ST_TO_ADDR
// for i = 1 to hexes do
89835: LD_ADDR_VAR 0 4
89839: PUSH
89840: DOUBLE
89841: LD_INT 1
89843: DEC
89844: ST_TO_ADDR
89845: LD_VAR 0 2
89849: PUSH
89850: FOR_TO
89851: IFFALSE 89938
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
89853: LD_ADDR_VAR 0 6
89857: PUSH
89858: LD_VAR 0 1
89862: PPUSH
89863: LD_VAR 0 2
89867: PUSH
89868: LD_VAR 0 4
89872: ARRAY
89873: PUSH
89874: LD_INT 1
89876: ARRAY
89877: PPUSH
89878: LD_VAR 0 2
89882: PUSH
89883: LD_VAR 0 4
89887: ARRAY
89888: PUSH
89889: LD_INT 2
89891: ARRAY
89892: PPUSH
89893: CALL_OW 297
89897: ST_TO_ADDR
// if tdist < dist then
89898: LD_VAR 0 6
89902: PUSH
89903: LD_VAR 0 5
89907: LESS
89908: IFFALSE 89936
// begin hex := hexes [ i ] ;
89910: LD_ADDR_VAR 0 8
89914: PUSH
89915: LD_VAR 0 2
89919: PUSH
89920: LD_VAR 0 4
89924: ARRAY
89925: ST_TO_ADDR
// dist := tdist ;
89926: LD_ADDR_VAR 0 5
89930: PUSH
89931: LD_VAR 0 6
89935: ST_TO_ADDR
// end ; end ;
89936: GO 89850
89938: POP
89939: POP
// result := hex ;
89940: LD_ADDR_VAR 0 3
89944: PUSH
89945: LD_VAR 0 8
89949: ST_TO_ADDR
// end ;
89950: LD_VAR 0 3
89954: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
89955: LD_INT 0
89957: PPUSH
89958: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
89959: LD_VAR 0 1
89963: NOT
89964: IFTRUE 90003
89966: PUSH
89967: LD_VAR 0 1
89971: PUSH
89972: LD_INT 21
89974: PUSH
89975: LD_INT 2
89977: PUSH
89978: EMPTY
89979: LIST
89980: LIST
89981: PUSH
89982: LD_INT 23
89984: PUSH
89985: LD_INT 2
89987: PUSH
89988: EMPTY
89989: LIST
89990: LIST
89991: PUSH
89992: EMPTY
89993: LIST
89994: LIST
89995: PPUSH
89996: CALL_OW 69
90000: IN
90001: NOT
90002: OR
90003: IFFALSE 90007
// exit ;
90005: GO 90054
// for i = 1 to 3 do
90007: LD_ADDR_VAR 0 3
90011: PUSH
90012: DOUBLE
90013: LD_INT 1
90015: DEC
90016: ST_TO_ADDR
90017: LD_INT 3
90019: PUSH
90020: FOR_TO
90021: IFFALSE 90052
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
90023: LD_VAR 0 1
90027: PPUSH
90028: CALL_OW 250
90032: PPUSH
90033: LD_VAR 0 1
90037: PPUSH
90038: CALL_OW 251
90042: PPUSH
90043: LD_INT 1
90045: PPUSH
90046: CALL_OW 453
90050: GO 90020
90052: POP
90053: POP
// end ;
90054: LD_VAR 0 2
90058: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
90059: LD_INT 0
90061: PPUSH
90062: PPUSH
90063: PPUSH
90064: PPUSH
90065: PPUSH
90066: PPUSH
// if not unit or not enemy_unit then
90067: LD_VAR 0 1
90071: NOT
90072: IFTRUE 90081
90074: PUSH
90075: LD_VAR 0 2
90079: NOT
90080: OR
90081: IFFALSE 90085
// exit ;
90083: GO 90556
// if GetLives ( i ) < 250 then
90085: LD_VAR 0 4
90089: PPUSH
90090: CALL_OW 256
90094: PUSH
90095: LD_INT 250
90097: LESS
90098: IFFALSE 90111
// begin ComAutodestruct ( i ) ;
90100: LD_VAR 0 4
90104: PPUSH
90105: CALL 89955 0 1
// exit ;
90109: GO 90556
// end ; x := GetX ( enemy_unit ) ;
90111: LD_ADDR_VAR 0 7
90115: PUSH
90116: LD_VAR 0 2
90120: PPUSH
90121: CALL_OW 250
90125: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
90126: LD_ADDR_VAR 0 8
90130: PUSH
90131: LD_VAR 0 2
90135: PPUSH
90136: CALL_OW 251
90140: ST_TO_ADDR
// if not x or not y then
90141: LD_VAR 0 7
90145: NOT
90146: IFTRUE 90155
90148: PUSH
90149: LD_VAR 0 8
90153: NOT
90154: OR
90155: IFFALSE 90159
// exit ;
90157: GO 90556
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
90159: LD_ADDR_VAR 0 6
90163: PUSH
90164: LD_VAR 0 7
90168: PPUSH
90169: LD_INT 0
90171: PPUSH
90172: LD_INT 4
90174: PPUSH
90175: CALL_OW 272
90179: PUSH
90180: LD_VAR 0 8
90184: PPUSH
90185: LD_INT 0
90187: PPUSH
90188: LD_INT 4
90190: PPUSH
90191: CALL_OW 273
90195: PUSH
90196: EMPTY
90197: LIST
90198: LIST
90199: PUSH
90200: LD_VAR 0 7
90204: PPUSH
90205: LD_INT 1
90207: PPUSH
90208: LD_INT 4
90210: PPUSH
90211: CALL_OW 272
90215: PUSH
90216: LD_VAR 0 8
90220: PPUSH
90221: LD_INT 1
90223: PPUSH
90224: LD_INT 4
90226: PPUSH
90227: CALL_OW 273
90231: PUSH
90232: EMPTY
90233: LIST
90234: LIST
90235: PUSH
90236: LD_VAR 0 7
90240: PPUSH
90241: LD_INT 2
90243: PPUSH
90244: LD_INT 4
90246: PPUSH
90247: CALL_OW 272
90251: PUSH
90252: LD_VAR 0 8
90256: PPUSH
90257: LD_INT 2
90259: PPUSH
90260: LD_INT 4
90262: PPUSH
90263: CALL_OW 273
90267: PUSH
90268: EMPTY
90269: LIST
90270: LIST
90271: PUSH
90272: LD_VAR 0 7
90276: PPUSH
90277: LD_INT 3
90279: PPUSH
90280: LD_INT 4
90282: PPUSH
90283: CALL_OW 272
90287: PUSH
90288: LD_VAR 0 8
90292: PPUSH
90293: LD_INT 3
90295: PPUSH
90296: LD_INT 4
90298: PPUSH
90299: CALL_OW 273
90303: PUSH
90304: EMPTY
90305: LIST
90306: LIST
90307: PUSH
90308: LD_VAR 0 7
90312: PPUSH
90313: LD_INT 4
90315: PPUSH
90316: LD_INT 4
90318: PPUSH
90319: CALL_OW 272
90323: PUSH
90324: LD_VAR 0 8
90328: PPUSH
90329: LD_INT 4
90331: PPUSH
90332: LD_INT 4
90334: PPUSH
90335: CALL_OW 273
90339: PUSH
90340: EMPTY
90341: LIST
90342: LIST
90343: PUSH
90344: LD_VAR 0 7
90348: PPUSH
90349: LD_INT 5
90351: PPUSH
90352: LD_INT 4
90354: PPUSH
90355: CALL_OW 272
90359: PUSH
90360: LD_VAR 0 8
90364: PPUSH
90365: LD_INT 5
90367: PPUSH
90368: LD_INT 4
90370: PPUSH
90371: CALL_OW 273
90375: PUSH
90376: EMPTY
90377: LIST
90378: LIST
90379: PUSH
90380: EMPTY
90381: LIST
90382: LIST
90383: LIST
90384: LIST
90385: LIST
90386: LIST
90387: ST_TO_ADDR
// for i = tmp downto 1 do
90388: LD_ADDR_VAR 0 4
90392: PUSH
90393: DOUBLE
90394: LD_VAR 0 6
90398: INC
90399: ST_TO_ADDR
90400: LD_INT 1
90402: PUSH
90403: FOR_DOWNTO
90404: IFFALSE 90507
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
90406: LD_VAR 0 6
90410: PUSH
90411: LD_VAR 0 4
90415: ARRAY
90416: PUSH
90417: LD_INT 1
90419: ARRAY
90420: PPUSH
90421: LD_VAR 0 6
90425: PUSH
90426: LD_VAR 0 4
90430: ARRAY
90431: PUSH
90432: LD_INT 2
90434: ARRAY
90435: PPUSH
90436: CALL_OW 488
90440: NOT
90441: IFTRUE 90483
90443: PUSH
90444: LD_VAR 0 6
90448: PUSH
90449: LD_VAR 0 4
90453: ARRAY
90454: PUSH
90455: LD_INT 1
90457: ARRAY
90458: PPUSH
90459: LD_VAR 0 6
90463: PUSH
90464: LD_VAR 0 4
90468: ARRAY
90469: PUSH
90470: LD_INT 2
90472: ARRAY
90473: PPUSH
90474: CALL_OW 428
90478: PUSH
90479: LD_INT 0
90481: NONEQUAL
90482: OR
90483: IFFALSE 90505
// tmp := Delete ( tmp , i ) ;
90485: LD_ADDR_VAR 0 6
90489: PUSH
90490: LD_VAR 0 6
90494: PPUSH
90495: LD_VAR 0 4
90499: PPUSH
90500: CALL_OW 3
90504: ST_TO_ADDR
90505: GO 90403
90507: POP
90508: POP
// j := GetClosestHex ( unit , tmp ) ;
90509: LD_ADDR_VAR 0 5
90513: PUSH
90514: LD_VAR 0 1
90518: PPUSH
90519: LD_VAR 0 6
90523: PPUSH
90524: CALL 89801 0 2
90528: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
90529: LD_VAR 0 1
90533: PPUSH
90534: LD_VAR 0 5
90538: PUSH
90539: LD_INT 1
90541: ARRAY
90542: PPUSH
90543: LD_VAR 0 5
90547: PUSH
90548: LD_INT 2
90550: ARRAY
90551: PPUSH
90552: CALL_OW 111
// end ;
90556: LD_VAR 0 3
90560: RET
// export function PrepareApemanSoldier ( ) ; begin
90561: LD_INT 0
90563: PPUSH
// uc_nation := 0 ;
90564: LD_ADDR_OWVAR 21
90568: PUSH
90569: LD_INT 0
90571: ST_TO_ADDR
// hc_sex := sex_male ;
90572: LD_ADDR_OWVAR 27
90576: PUSH
90577: LD_INT 1
90579: ST_TO_ADDR
// hc_name :=  ;
90580: LD_ADDR_OWVAR 26
90584: PUSH
90585: LD_STRING 
90587: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
90588: LD_ADDR_OWVAR 28
90592: PUSH
90593: LD_INT 15
90595: ST_TO_ADDR
// hc_gallery :=  ;
90596: LD_ADDR_OWVAR 33
90600: PUSH
90601: LD_STRING 
90603: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
90604: LD_ADDR_OWVAR 31
90608: PUSH
90609: LD_INT 0
90611: PPUSH
90612: LD_INT 3
90614: PPUSH
90615: CALL_OW 12
90619: PUSH
90620: LD_INT 0
90622: PPUSH
90623: LD_INT 3
90625: PPUSH
90626: CALL_OW 12
90630: PUSH
90631: LD_INT 0
90633: PUSH
90634: LD_INT 0
90636: PUSH
90637: EMPTY
90638: LIST
90639: LIST
90640: LIST
90641: LIST
90642: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
90643: LD_ADDR_OWVAR 29
90647: PUSH
90648: LD_INT 12
90650: PUSH
90651: LD_INT 12
90653: PUSH
90654: EMPTY
90655: LIST
90656: LIST
90657: ST_TO_ADDR
// end ;
90658: LD_VAR 0 1
90662: RET
// export function PrepareApemanEngineer ( ) ; begin
90663: LD_INT 0
90665: PPUSH
// uc_nation := 0 ;
90666: LD_ADDR_OWVAR 21
90670: PUSH
90671: LD_INT 0
90673: ST_TO_ADDR
// hc_sex := sex_male ;
90674: LD_ADDR_OWVAR 27
90678: PUSH
90679: LD_INT 1
90681: ST_TO_ADDR
// hc_name :=  ;
90682: LD_ADDR_OWVAR 26
90686: PUSH
90687: LD_STRING 
90689: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
90690: LD_ADDR_OWVAR 28
90694: PUSH
90695: LD_INT 16
90697: ST_TO_ADDR
// hc_gallery :=  ;
90698: LD_ADDR_OWVAR 33
90702: PUSH
90703: LD_STRING 
90705: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
90706: LD_ADDR_OWVAR 31
90710: PUSH
90711: LD_INT 0
90713: PPUSH
90714: LD_INT 3
90716: PPUSH
90717: CALL_OW 12
90721: PUSH
90722: LD_INT 0
90724: PPUSH
90725: LD_INT 3
90727: PPUSH
90728: CALL_OW 12
90732: PUSH
90733: LD_INT 0
90735: PUSH
90736: LD_INT 0
90738: PUSH
90739: EMPTY
90740: LIST
90741: LIST
90742: LIST
90743: LIST
90744: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
90745: LD_ADDR_OWVAR 29
90749: PUSH
90750: LD_INT 12
90752: PUSH
90753: LD_INT 12
90755: PUSH
90756: EMPTY
90757: LIST
90758: LIST
90759: ST_TO_ADDR
// end ;
90760: LD_VAR 0 1
90764: RET
// export function PrepareApeman ( agressivity ) ; begin
90765: LD_INT 0
90767: PPUSH
// uc_side := 0 ;
90768: LD_ADDR_OWVAR 20
90772: PUSH
90773: LD_INT 0
90775: ST_TO_ADDR
// uc_nation := 0 ;
90776: LD_ADDR_OWVAR 21
90780: PUSH
90781: LD_INT 0
90783: ST_TO_ADDR
// hc_sex := sex_male ;
90784: LD_ADDR_OWVAR 27
90788: PUSH
90789: LD_INT 1
90791: ST_TO_ADDR
// hc_class := class_apeman ;
90792: LD_ADDR_OWVAR 28
90796: PUSH
90797: LD_INT 12
90799: ST_TO_ADDR
// hc_gallery :=  ;
90800: LD_ADDR_OWVAR 33
90804: PUSH
90805: LD_STRING 
90807: ST_TO_ADDR
// hc_name :=  ;
90808: LD_ADDR_OWVAR 26
90812: PUSH
90813: LD_STRING 
90815: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
90816: LD_ADDR_OWVAR 29
90820: PUSH
90821: LD_INT 12
90823: PUSH
90824: LD_INT 12
90826: PUSH
90827: EMPTY
90828: LIST
90829: LIST
90830: ST_TO_ADDR
// if agressivity = 0 then
90831: LD_VAR 0 1
90835: PUSH
90836: LD_INT 0
90838: EQUAL
90839: IFFALSE 90851
// hc_agressivity := 0 else
90841: LD_ADDR_OWVAR 35
90845: PUSH
90846: LD_INT 0
90848: ST_TO_ADDR
90849: GO 90872
// hc_agressivity := rand ( - agressivity , agressivity ) ;
90851: LD_ADDR_OWVAR 35
90855: PUSH
90856: LD_VAR 0 1
90860: NEG
90861: PPUSH
90862: LD_VAR 0 1
90866: PPUSH
90867: CALL_OW 12
90871: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
90872: LD_ADDR_OWVAR 31
90876: PUSH
90877: LD_INT 0
90879: PPUSH
90880: LD_INT 3
90882: PPUSH
90883: CALL_OW 12
90887: PUSH
90888: LD_INT 0
90890: PPUSH
90891: LD_INT 3
90893: PPUSH
90894: CALL_OW 12
90898: PUSH
90899: LD_INT 0
90901: PUSH
90902: LD_INT 0
90904: PUSH
90905: EMPTY
90906: LIST
90907: LIST
90908: LIST
90909: LIST
90910: ST_TO_ADDR
// end ;
90911: LD_VAR 0 2
90915: RET
// export function PrepareTiger ( agressivity ) ; begin
90916: LD_INT 0
90918: PPUSH
// uc_side := 0 ;
90919: LD_ADDR_OWVAR 20
90923: PUSH
90924: LD_INT 0
90926: ST_TO_ADDR
// uc_nation := 0 ;
90927: LD_ADDR_OWVAR 21
90931: PUSH
90932: LD_INT 0
90934: ST_TO_ADDR
// InitHc ;
90935: CALL_OW 19
// hc_class := class_tiger ;
90939: LD_ADDR_OWVAR 28
90943: PUSH
90944: LD_INT 14
90946: ST_TO_ADDR
// hc_gallery :=  ;
90947: LD_ADDR_OWVAR 33
90951: PUSH
90952: LD_STRING 
90954: ST_TO_ADDR
// hc_name :=  ;
90955: LD_ADDR_OWVAR 26
90959: PUSH
90960: LD_STRING 
90962: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
90963: LD_ADDR_OWVAR 35
90967: PUSH
90968: LD_VAR 0 1
90972: NEG
90973: PPUSH
90974: LD_VAR 0 1
90978: PPUSH
90979: CALL_OW 12
90983: ST_TO_ADDR
// end ;
90984: LD_VAR 0 2
90988: RET
// export function PrepareEnchidna ( ) ; begin
90989: LD_INT 0
90991: PPUSH
// uc_side := 0 ;
90992: LD_ADDR_OWVAR 20
90996: PUSH
90997: LD_INT 0
90999: ST_TO_ADDR
// uc_nation := 0 ;
91000: LD_ADDR_OWVAR 21
91004: PUSH
91005: LD_INT 0
91007: ST_TO_ADDR
// InitHc ;
91008: CALL_OW 19
// hc_class := class_baggie ;
91012: LD_ADDR_OWVAR 28
91016: PUSH
91017: LD_INT 13
91019: ST_TO_ADDR
// hc_gallery :=  ;
91020: LD_ADDR_OWVAR 33
91024: PUSH
91025: LD_STRING 
91027: ST_TO_ADDR
// hc_name :=  ;
91028: LD_ADDR_OWVAR 26
91032: PUSH
91033: LD_STRING 
91035: ST_TO_ADDR
// end ;
91036: LD_VAR 0 1
91040: RET
// export function PrepareFrog ( ) ; begin
91041: LD_INT 0
91043: PPUSH
// uc_side := 0 ;
91044: LD_ADDR_OWVAR 20
91048: PUSH
91049: LD_INT 0
91051: ST_TO_ADDR
// uc_nation := 0 ;
91052: LD_ADDR_OWVAR 21
91056: PUSH
91057: LD_INT 0
91059: ST_TO_ADDR
// InitHc ;
91060: CALL_OW 19
// hc_class := class_frog ;
91064: LD_ADDR_OWVAR 28
91068: PUSH
91069: LD_INT 19
91071: ST_TO_ADDR
// hc_gallery :=  ;
91072: LD_ADDR_OWVAR 33
91076: PUSH
91077: LD_STRING 
91079: ST_TO_ADDR
// hc_name :=  ;
91080: LD_ADDR_OWVAR 26
91084: PUSH
91085: LD_STRING 
91087: ST_TO_ADDR
// end ;
91088: LD_VAR 0 1
91092: RET
// export function PrepareFish ( ) ; begin
91093: LD_INT 0
91095: PPUSH
// uc_side := 0 ;
91096: LD_ADDR_OWVAR 20
91100: PUSH
91101: LD_INT 0
91103: ST_TO_ADDR
// uc_nation := 0 ;
91104: LD_ADDR_OWVAR 21
91108: PUSH
91109: LD_INT 0
91111: ST_TO_ADDR
// InitHc ;
91112: CALL_OW 19
// hc_class := class_fish ;
91116: LD_ADDR_OWVAR 28
91120: PUSH
91121: LD_INT 20
91123: ST_TO_ADDR
// hc_gallery :=  ;
91124: LD_ADDR_OWVAR 33
91128: PUSH
91129: LD_STRING 
91131: ST_TO_ADDR
// hc_name :=  ;
91132: LD_ADDR_OWVAR 26
91136: PUSH
91137: LD_STRING 
91139: ST_TO_ADDR
// end ;
91140: LD_VAR 0 1
91144: RET
// export function PrepareBird ( ) ; begin
91145: LD_INT 0
91147: PPUSH
// uc_side := 0 ;
91148: LD_ADDR_OWVAR 20
91152: PUSH
91153: LD_INT 0
91155: ST_TO_ADDR
// uc_nation := 0 ;
91156: LD_ADDR_OWVAR 21
91160: PUSH
91161: LD_INT 0
91163: ST_TO_ADDR
// InitHc ;
91164: CALL_OW 19
// hc_class := class_phororhacos ;
91168: LD_ADDR_OWVAR 28
91172: PUSH
91173: LD_INT 18
91175: ST_TO_ADDR
// hc_gallery :=  ;
91176: LD_ADDR_OWVAR 33
91180: PUSH
91181: LD_STRING 
91183: ST_TO_ADDR
// hc_name :=  ;
91184: LD_ADDR_OWVAR 26
91188: PUSH
91189: LD_STRING 
91191: ST_TO_ADDR
// end ;
91192: LD_VAR 0 1
91196: RET
// export function PrepareHorse ( ) ; begin
91197: LD_INT 0
91199: PPUSH
// uc_side := 0 ;
91200: LD_ADDR_OWVAR 20
91204: PUSH
91205: LD_INT 0
91207: ST_TO_ADDR
// uc_nation := 0 ;
91208: LD_ADDR_OWVAR 21
91212: PUSH
91213: LD_INT 0
91215: ST_TO_ADDR
// InitHc ;
91216: CALL_OW 19
// hc_class := class_horse ;
91220: LD_ADDR_OWVAR 28
91224: PUSH
91225: LD_INT 21
91227: ST_TO_ADDR
// hc_gallery :=  ;
91228: LD_ADDR_OWVAR 33
91232: PUSH
91233: LD_STRING 
91235: ST_TO_ADDR
// hc_name :=  ;
91236: LD_ADDR_OWVAR 26
91240: PUSH
91241: LD_STRING 
91243: ST_TO_ADDR
// end ;
91244: LD_VAR 0 1
91248: RET
// export function PrepareMastodont ( ) ; begin
91249: LD_INT 0
91251: PPUSH
// uc_side := 0 ;
91252: LD_ADDR_OWVAR 20
91256: PUSH
91257: LD_INT 0
91259: ST_TO_ADDR
// uc_nation := 0 ;
91260: LD_ADDR_OWVAR 21
91264: PUSH
91265: LD_INT 0
91267: ST_TO_ADDR
// vc_chassis := class_mastodont ;
91268: LD_ADDR_OWVAR 37
91272: PUSH
91273: LD_INT 31
91275: ST_TO_ADDR
// vc_control := control_rider ;
91276: LD_ADDR_OWVAR 38
91280: PUSH
91281: LD_INT 4
91283: ST_TO_ADDR
// end ;
91284: LD_VAR 0 1
91288: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
91289: LD_INT 0
91291: PPUSH
91292: PPUSH
91293: PPUSH
// uc_side = 0 ;
91294: LD_ADDR_OWVAR 20
91298: PUSH
91299: LD_INT 0
91301: ST_TO_ADDR
// uc_nation = 0 ;
91302: LD_ADDR_OWVAR 21
91306: PUSH
91307: LD_INT 0
91309: ST_TO_ADDR
// InitHc_All ( ) ;
91310: CALL_OW 584
// InitVc ;
91314: CALL_OW 20
// if mastodonts then
91318: LD_VAR 0 6
91322: IFFALSE 91389
// for i = 1 to mastodonts do
91324: LD_ADDR_VAR 0 11
91328: PUSH
91329: DOUBLE
91330: LD_INT 1
91332: DEC
91333: ST_TO_ADDR
91334: LD_VAR 0 6
91338: PUSH
91339: FOR_TO
91340: IFFALSE 91387
// begin vc_chassis := 31 ;
91342: LD_ADDR_OWVAR 37
91346: PUSH
91347: LD_INT 31
91349: ST_TO_ADDR
// vc_control := control_rider ;
91350: LD_ADDR_OWVAR 38
91354: PUSH
91355: LD_INT 4
91357: ST_TO_ADDR
// animal := CreateVehicle ;
91358: LD_ADDR_VAR 0 12
91362: PUSH
91363: CALL_OW 45
91367: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
91368: LD_VAR 0 12
91372: PPUSH
91373: LD_VAR 0 8
91377: PPUSH
91378: LD_INT 0
91380: PPUSH
91381: CALL 93531 0 3
// end ;
91385: GO 91339
91387: POP
91388: POP
// if horses then
91389: LD_VAR 0 5
91393: IFFALSE 91460
// for i = 1 to horses do
91395: LD_ADDR_VAR 0 11
91399: PUSH
91400: DOUBLE
91401: LD_INT 1
91403: DEC
91404: ST_TO_ADDR
91405: LD_VAR 0 5
91409: PUSH
91410: FOR_TO
91411: IFFALSE 91458
// begin hc_class := 21 ;
91413: LD_ADDR_OWVAR 28
91417: PUSH
91418: LD_INT 21
91420: ST_TO_ADDR
// hc_gallery :=  ;
91421: LD_ADDR_OWVAR 33
91425: PUSH
91426: LD_STRING 
91428: ST_TO_ADDR
// animal := CreateHuman ;
91429: LD_ADDR_VAR 0 12
91433: PUSH
91434: CALL_OW 44
91438: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
91439: LD_VAR 0 12
91443: PPUSH
91444: LD_VAR 0 8
91448: PPUSH
91449: LD_INT 0
91451: PPUSH
91452: CALL 93531 0 3
// end ;
91456: GO 91410
91458: POP
91459: POP
// if birds then
91460: LD_VAR 0 1
91464: IFFALSE 91531
// for i = 1 to birds do
91466: LD_ADDR_VAR 0 11
91470: PUSH
91471: DOUBLE
91472: LD_INT 1
91474: DEC
91475: ST_TO_ADDR
91476: LD_VAR 0 1
91480: PUSH
91481: FOR_TO
91482: IFFALSE 91529
// begin hc_class := 18 ;
91484: LD_ADDR_OWVAR 28
91488: PUSH
91489: LD_INT 18
91491: ST_TO_ADDR
// hc_gallery =  ;
91492: LD_ADDR_OWVAR 33
91496: PUSH
91497: LD_STRING 
91499: ST_TO_ADDR
// animal := CreateHuman ;
91500: LD_ADDR_VAR 0 12
91504: PUSH
91505: CALL_OW 44
91509: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
91510: LD_VAR 0 12
91514: PPUSH
91515: LD_VAR 0 8
91519: PPUSH
91520: LD_INT 0
91522: PPUSH
91523: CALL 93531 0 3
// end ;
91527: GO 91481
91529: POP
91530: POP
// if tigers then
91531: LD_VAR 0 2
91535: IFFALSE 91619
// for i = 1 to tigers do
91537: LD_ADDR_VAR 0 11
91541: PUSH
91542: DOUBLE
91543: LD_INT 1
91545: DEC
91546: ST_TO_ADDR
91547: LD_VAR 0 2
91551: PUSH
91552: FOR_TO
91553: IFFALSE 91617
// begin hc_class = class_tiger ;
91555: LD_ADDR_OWVAR 28
91559: PUSH
91560: LD_INT 14
91562: ST_TO_ADDR
// hc_gallery =  ;
91563: LD_ADDR_OWVAR 33
91567: PUSH
91568: LD_STRING 
91570: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
91571: LD_ADDR_OWVAR 35
91575: PUSH
91576: LD_INT 7
91578: NEG
91579: PPUSH
91580: LD_INT 7
91582: PPUSH
91583: CALL_OW 12
91587: ST_TO_ADDR
// animal := CreateHuman ;
91588: LD_ADDR_VAR 0 12
91592: PUSH
91593: CALL_OW 44
91597: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
91598: LD_VAR 0 12
91602: PPUSH
91603: LD_VAR 0 8
91607: PPUSH
91608: LD_INT 0
91610: PPUSH
91611: CALL 93531 0 3
// end ;
91615: GO 91552
91617: POP
91618: POP
// if apemans then
91619: LD_VAR 0 3
91623: IFFALSE 91746
// for i = 1 to apemans do
91625: LD_ADDR_VAR 0 11
91629: PUSH
91630: DOUBLE
91631: LD_INT 1
91633: DEC
91634: ST_TO_ADDR
91635: LD_VAR 0 3
91639: PUSH
91640: FOR_TO
91641: IFFALSE 91744
// begin hc_class = class_apeman ;
91643: LD_ADDR_OWVAR 28
91647: PUSH
91648: LD_INT 12
91650: ST_TO_ADDR
// hc_gallery =  ;
91651: LD_ADDR_OWVAR 33
91655: PUSH
91656: LD_STRING 
91658: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
91659: LD_ADDR_OWVAR 35
91663: PUSH
91664: LD_INT 2
91666: NEG
91667: PPUSH
91668: LD_INT 2
91670: PPUSH
91671: CALL_OW 12
91675: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
91676: LD_ADDR_OWVAR 31
91680: PUSH
91681: LD_INT 1
91683: PPUSH
91684: LD_INT 3
91686: PPUSH
91687: CALL_OW 12
91691: PUSH
91692: LD_INT 1
91694: PPUSH
91695: LD_INT 3
91697: PPUSH
91698: CALL_OW 12
91702: PUSH
91703: LD_INT 0
91705: PUSH
91706: LD_INT 0
91708: PUSH
91709: EMPTY
91710: LIST
91711: LIST
91712: LIST
91713: LIST
91714: ST_TO_ADDR
// animal := CreateHuman ;
91715: LD_ADDR_VAR 0 12
91719: PUSH
91720: CALL_OW 44
91724: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
91725: LD_VAR 0 12
91729: PPUSH
91730: LD_VAR 0 8
91734: PPUSH
91735: LD_INT 0
91737: PPUSH
91738: CALL 93531 0 3
// end ;
91742: GO 91640
91744: POP
91745: POP
// if enchidnas then
91746: LD_VAR 0 4
91750: IFFALSE 91817
// for i = 1 to enchidnas do
91752: LD_ADDR_VAR 0 11
91756: PUSH
91757: DOUBLE
91758: LD_INT 1
91760: DEC
91761: ST_TO_ADDR
91762: LD_VAR 0 4
91766: PUSH
91767: FOR_TO
91768: IFFALSE 91815
// begin hc_class = 13 ;
91770: LD_ADDR_OWVAR 28
91774: PUSH
91775: LD_INT 13
91777: ST_TO_ADDR
// hc_gallery =  ;
91778: LD_ADDR_OWVAR 33
91782: PUSH
91783: LD_STRING 
91785: ST_TO_ADDR
// animal := CreateHuman ;
91786: LD_ADDR_VAR 0 12
91790: PUSH
91791: CALL_OW 44
91795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
91796: LD_VAR 0 12
91800: PPUSH
91801: LD_VAR 0 8
91805: PPUSH
91806: LD_INT 0
91808: PPUSH
91809: CALL 93531 0 3
// end ;
91813: GO 91767
91815: POP
91816: POP
// if fishes then
91817: LD_VAR 0 7
91821: IFFALSE 91888
// for i = 1 to fishes do
91823: LD_ADDR_VAR 0 11
91827: PUSH
91828: DOUBLE
91829: LD_INT 1
91831: DEC
91832: ST_TO_ADDR
91833: LD_VAR 0 7
91837: PUSH
91838: FOR_TO
91839: IFFALSE 91886
// begin hc_class = 20 ;
91841: LD_ADDR_OWVAR 28
91845: PUSH
91846: LD_INT 20
91848: ST_TO_ADDR
// hc_gallery =  ;
91849: LD_ADDR_OWVAR 33
91853: PUSH
91854: LD_STRING 
91856: ST_TO_ADDR
// animal := CreateHuman ;
91857: LD_ADDR_VAR 0 12
91861: PUSH
91862: CALL_OW 44
91866: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
91867: LD_VAR 0 12
91871: PPUSH
91872: LD_VAR 0 9
91876: PPUSH
91877: LD_INT 0
91879: PPUSH
91880: CALL 93531 0 3
// end ;
91884: GO 91838
91886: POP
91887: POP
// end ;
91888: LD_VAR 0 10
91892: RET
// export function WantHeal ( sci , unit ) ; begin
91893: LD_INT 0
91895: PPUSH
// if GetTaskList ( sci ) > 0 then
91896: LD_VAR 0 1
91900: PPUSH
91901: CALL_OW 437
91905: PUSH
91906: LD_INT 0
91908: GREATER
91909: IFFALSE 91981
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
91911: LD_VAR 0 1
91915: PPUSH
91916: CALL_OW 437
91920: PUSH
91921: LD_INT 1
91923: ARRAY
91924: PUSH
91925: LD_INT 1
91927: ARRAY
91928: PUSH
91929: LD_STRING l
91931: EQUAL
91932: IFFALSE 91959
91934: PUSH
91935: LD_VAR 0 1
91939: PPUSH
91940: CALL_OW 437
91944: PUSH
91945: LD_INT 1
91947: ARRAY
91948: PUSH
91949: LD_INT 4
91951: ARRAY
91952: PUSH
91953: LD_VAR 0 2
91957: EQUAL
91958: AND
91959: IFFALSE 91971
// result := true else
91961: LD_ADDR_VAR 0 3
91965: PUSH
91966: LD_INT 1
91968: ST_TO_ADDR
91969: GO 91979
// result := false ;
91971: LD_ADDR_VAR 0 3
91975: PUSH
91976: LD_INT 0
91978: ST_TO_ADDR
// end else
91979: GO 91989
// result := false ;
91981: LD_ADDR_VAR 0 3
91985: PUSH
91986: LD_INT 0
91988: ST_TO_ADDR
// end ;
91989: LD_VAR 0 3
91993: RET
// export function HealTarget ( sci ) ; begin
91994: LD_INT 0
91996: PPUSH
// if not sci then
91997: LD_VAR 0 1
92001: NOT
92002: IFFALSE 92006
// exit ;
92004: GO 92071
// result := 0 ;
92006: LD_ADDR_VAR 0 2
92010: PUSH
92011: LD_INT 0
92013: ST_TO_ADDR
// if GetTaskList ( sci ) then
92014: LD_VAR 0 1
92018: PPUSH
92019: CALL_OW 437
92023: IFFALSE 92071
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
92025: LD_VAR 0 1
92029: PPUSH
92030: CALL_OW 437
92034: PUSH
92035: LD_INT 1
92037: ARRAY
92038: PUSH
92039: LD_INT 1
92041: ARRAY
92042: PUSH
92043: LD_STRING l
92045: EQUAL
92046: IFFALSE 92071
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
92048: LD_ADDR_VAR 0 2
92052: PUSH
92053: LD_VAR 0 1
92057: PPUSH
92058: CALL_OW 437
92062: PUSH
92063: LD_INT 1
92065: ARRAY
92066: PUSH
92067: LD_INT 4
92069: ARRAY
92070: ST_TO_ADDR
// end ;
92071: LD_VAR 0 2
92075: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
92076: LD_INT 0
92078: PPUSH
92079: PPUSH
92080: PPUSH
92081: PPUSH
// if not base_units then
92082: LD_VAR 0 1
92086: NOT
92087: IFFALSE 92091
// exit ;
92089: GO 92178
// result := false ;
92091: LD_ADDR_VAR 0 2
92095: PUSH
92096: LD_INT 0
92098: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
92099: LD_ADDR_VAR 0 5
92103: PUSH
92104: LD_VAR 0 1
92108: PPUSH
92109: LD_INT 21
92111: PUSH
92112: LD_INT 3
92114: PUSH
92115: EMPTY
92116: LIST
92117: LIST
92118: PPUSH
92119: CALL_OW 72
92123: ST_TO_ADDR
// if not tmp then
92124: LD_VAR 0 5
92128: NOT
92129: IFFALSE 92133
// exit ;
92131: GO 92178
// for i in tmp do
92133: LD_ADDR_VAR 0 3
92137: PUSH
92138: LD_VAR 0 5
92142: PUSH
92143: FOR_IN
92144: IFFALSE 92176
// begin result := EnemyInRange ( i , 22 ) ;
92146: LD_ADDR_VAR 0 2
92150: PUSH
92151: LD_VAR 0 3
92155: PPUSH
92156: LD_INT 22
92158: PPUSH
92159: CALL 89603 0 2
92163: ST_TO_ADDR
// if result then
92164: LD_VAR 0 2
92168: IFFALSE 92174
// exit ;
92170: POP
92171: POP
92172: GO 92178
// end ;
92174: GO 92143
92176: POP
92177: POP
// end ;
92178: LD_VAR 0 2
92182: RET
// export function FilterByTag ( units , tag ) ; begin
92183: LD_INT 0
92185: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
92186: LD_ADDR_VAR 0 3
92190: PUSH
92191: LD_VAR 0 1
92195: PPUSH
92196: LD_INT 120
92198: PUSH
92199: LD_VAR 0 2
92203: PUSH
92204: EMPTY
92205: LIST
92206: LIST
92207: PPUSH
92208: CALL_OW 72
92212: ST_TO_ADDR
// end ;
92213: LD_VAR 0 3
92217: RET
// export function IsDriver ( un ) ; begin
92218: LD_INT 0
92220: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
92221: LD_ADDR_VAR 0 2
92225: PUSH
92226: LD_VAR 0 1
92230: PUSH
92231: LD_INT 55
92233: PUSH
92234: EMPTY
92235: LIST
92236: PPUSH
92237: CALL_OW 69
92241: IN
92242: ST_TO_ADDR
// end ;
92243: LD_VAR 0 2
92247: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
92248: LD_INT 0
92250: PPUSH
92251: PPUSH
// list := [ ] ;
92252: LD_ADDR_VAR 0 5
92256: PUSH
92257: EMPTY
92258: ST_TO_ADDR
// case d of 0 :
92259: LD_VAR 0 3
92263: PUSH
92264: LD_INT 0
92266: DOUBLE
92267: EQUAL
92268: IFTRUE 92272
92270: GO 92405
92272: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
92273: LD_ADDR_VAR 0 5
92277: PUSH
92278: LD_VAR 0 1
92282: PUSH
92283: LD_INT 4
92285: MINUS
92286: PUSH
92287: LD_VAR 0 2
92291: PUSH
92292: LD_INT 4
92294: MINUS
92295: PUSH
92296: LD_INT 2
92298: PUSH
92299: EMPTY
92300: LIST
92301: LIST
92302: LIST
92303: PUSH
92304: LD_VAR 0 1
92308: PUSH
92309: LD_INT 3
92311: MINUS
92312: PUSH
92313: LD_VAR 0 2
92317: PUSH
92318: LD_INT 1
92320: PUSH
92321: EMPTY
92322: LIST
92323: LIST
92324: LIST
92325: PUSH
92326: LD_VAR 0 1
92330: PUSH
92331: LD_INT 4
92333: PLUS
92334: PUSH
92335: LD_VAR 0 2
92339: PUSH
92340: LD_INT 4
92342: PUSH
92343: EMPTY
92344: LIST
92345: LIST
92346: LIST
92347: PUSH
92348: LD_VAR 0 1
92352: PUSH
92353: LD_INT 3
92355: PLUS
92356: PUSH
92357: LD_VAR 0 2
92361: PUSH
92362: LD_INT 3
92364: PLUS
92365: PUSH
92366: LD_INT 5
92368: PUSH
92369: EMPTY
92370: LIST
92371: LIST
92372: LIST
92373: PUSH
92374: LD_VAR 0 1
92378: PUSH
92379: LD_VAR 0 2
92383: PUSH
92384: LD_INT 4
92386: PLUS
92387: PUSH
92388: LD_INT 0
92390: PUSH
92391: EMPTY
92392: LIST
92393: LIST
92394: LIST
92395: PUSH
92396: EMPTY
92397: LIST
92398: LIST
92399: LIST
92400: LIST
92401: LIST
92402: ST_TO_ADDR
// end ; 1 :
92403: GO 93103
92405: LD_INT 1
92407: DOUBLE
92408: EQUAL
92409: IFTRUE 92413
92411: GO 92546
92413: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
92414: LD_ADDR_VAR 0 5
92418: PUSH
92419: LD_VAR 0 1
92423: PUSH
92424: LD_VAR 0 2
92428: PUSH
92429: LD_INT 4
92431: MINUS
92432: PUSH
92433: LD_INT 3
92435: PUSH
92436: EMPTY
92437: LIST
92438: LIST
92439: LIST
92440: PUSH
92441: LD_VAR 0 1
92445: PUSH
92446: LD_INT 3
92448: MINUS
92449: PUSH
92450: LD_VAR 0 2
92454: PUSH
92455: LD_INT 3
92457: MINUS
92458: PUSH
92459: LD_INT 2
92461: PUSH
92462: EMPTY
92463: LIST
92464: LIST
92465: LIST
92466: PUSH
92467: LD_VAR 0 1
92471: PUSH
92472: LD_INT 4
92474: MINUS
92475: PUSH
92476: LD_VAR 0 2
92480: PUSH
92481: LD_INT 1
92483: PUSH
92484: EMPTY
92485: LIST
92486: LIST
92487: LIST
92488: PUSH
92489: LD_VAR 0 1
92493: PUSH
92494: LD_VAR 0 2
92498: PUSH
92499: LD_INT 3
92501: PLUS
92502: PUSH
92503: LD_INT 0
92505: PUSH
92506: EMPTY
92507: LIST
92508: LIST
92509: LIST
92510: PUSH
92511: LD_VAR 0 1
92515: PUSH
92516: LD_INT 4
92518: PLUS
92519: PUSH
92520: LD_VAR 0 2
92524: PUSH
92525: LD_INT 4
92527: PLUS
92528: PUSH
92529: LD_INT 5
92531: PUSH
92532: EMPTY
92533: LIST
92534: LIST
92535: LIST
92536: PUSH
92537: EMPTY
92538: LIST
92539: LIST
92540: LIST
92541: LIST
92542: LIST
92543: ST_TO_ADDR
// end ; 2 :
92544: GO 93103
92546: LD_INT 2
92548: DOUBLE
92549: EQUAL
92550: IFTRUE 92554
92552: GO 92683
92554: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
92555: LD_ADDR_VAR 0 5
92559: PUSH
92560: LD_VAR 0 1
92564: PUSH
92565: LD_VAR 0 2
92569: PUSH
92570: LD_INT 3
92572: MINUS
92573: PUSH
92574: LD_INT 3
92576: PUSH
92577: EMPTY
92578: LIST
92579: LIST
92580: LIST
92581: PUSH
92582: LD_VAR 0 1
92586: PUSH
92587: LD_INT 4
92589: PLUS
92590: PUSH
92591: LD_VAR 0 2
92595: PUSH
92596: LD_INT 4
92598: PUSH
92599: EMPTY
92600: LIST
92601: LIST
92602: LIST
92603: PUSH
92604: LD_VAR 0 1
92608: PUSH
92609: LD_VAR 0 2
92613: PUSH
92614: LD_INT 4
92616: PLUS
92617: PUSH
92618: LD_INT 0
92620: PUSH
92621: EMPTY
92622: LIST
92623: LIST
92624: LIST
92625: PUSH
92626: LD_VAR 0 1
92630: PUSH
92631: LD_INT 3
92633: MINUS
92634: PUSH
92635: LD_VAR 0 2
92639: PUSH
92640: LD_INT 1
92642: PUSH
92643: EMPTY
92644: LIST
92645: LIST
92646: LIST
92647: PUSH
92648: LD_VAR 0 1
92652: PUSH
92653: LD_INT 4
92655: MINUS
92656: PUSH
92657: LD_VAR 0 2
92661: PUSH
92662: LD_INT 4
92664: MINUS
92665: PUSH
92666: LD_INT 2
92668: PUSH
92669: EMPTY
92670: LIST
92671: LIST
92672: LIST
92673: PUSH
92674: EMPTY
92675: LIST
92676: LIST
92677: LIST
92678: LIST
92679: LIST
92680: ST_TO_ADDR
// end ; 3 :
92681: GO 93103
92683: LD_INT 3
92685: DOUBLE
92686: EQUAL
92687: IFTRUE 92691
92689: GO 92824
92691: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
92692: LD_ADDR_VAR 0 5
92696: PUSH
92697: LD_VAR 0 1
92701: PUSH
92702: LD_INT 3
92704: PLUS
92705: PUSH
92706: LD_VAR 0 2
92710: PUSH
92711: LD_INT 4
92713: PUSH
92714: EMPTY
92715: LIST
92716: LIST
92717: LIST
92718: PUSH
92719: LD_VAR 0 1
92723: PUSH
92724: LD_INT 4
92726: PLUS
92727: PUSH
92728: LD_VAR 0 2
92732: PUSH
92733: LD_INT 4
92735: PLUS
92736: PUSH
92737: LD_INT 5
92739: PUSH
92740: EMPTY
92741: LIST
92742: LIST
92743: LIST
92744: PUSH
92745: LD_VAR 0 1
92749: PUSH
92750: LD_INT 4
92752: MINUS
92753: PUSH
92754: LD_VAR 0 2
92758: PUSH
92759: LD_INT 1
92761: PUSH
92762: EMPTY
92763: LIST
92764: LIST
92765: LIST
92766: PUSH
92767: LD_VAR 0 1
92771: PUSH
92772: LD_VAR 0 2
92776: PUSH
92777: LD_INT 4
92779: MINUS
92780: PUSH
92781: LD_INT 3
92783: PUSH
92784: EMPTY
92785: LIST
92786: LIST
92787: LIST
92788: PUSH
92789: LD_VAR 0 1
92793: PUSH
92794: LD_INT 3
92796: MINUS
92797: PUSH
92798: LD_VAR 0 2
92802: PUSH
92803: LD_INT 3
92805: MINUS
92806: PUSH
92807: LD_INT 2
92809: PUSH
92810: EMPTY
92811: LIST
92812: LIST
92813: LIST
92814: PUSH
92815: EMPTY
92816: LIST
92817: LIST
92818: LIST
92819: LIST
92820: LIST
92821: ST_TO_ADDR
// end ; 4 :
92822: GO 93103
92824: LD_INT 4
92826: DOUBLE
92827: EQUAL
92828: IFTRUE 92832
92830: GO 92965
92832: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
92833: LD_ADDR_VAR 0 5
92837: PUSH
92838: LD_VAR 0 1
92842: PUSH
92843: LD_VAR 0 2
92847: PUSH
92848: LD_INT 4
92850: PLUS
92851: PUSH
92852: LD_INT 0
92854: PUSH
92855: EMPTY
92856: LIST
92857: LIST
92858: LIST
92859: PUSH
92860: LD_VAR 0 1
92864: PUSH
92865: LD_INT 3
92867: PLUS
92868: PUSH
92869: LD_VAR 0 2
92873: PUSH
92874: LD_INT 3
92876: PLUS
92877: PUSH
92878: LD_INT 5
92880: PUSH
92881: EMPTY
92882: LIST
92883: LIST
92884: LIST
92885: PUSH
92886: LD_VAR 0 1
92890: PUSH
92891: LD_INT 4
92893: PLUS
92894: PUSH
92895: LD_VAR 0 2
92899: PUSH
92900: LD_INT 4
92902: PUSH
92903: EMPTY
92904: LIST
92905: LIST
92906: LIST
92907: PUSH
92908: LD_VAR 0 1
92912: PUSH
92913: LD_VAR 0 2
92917: PUSH
92918: LD_INT 3
92920: MINUS
92921: PUSH
92922: LD_INT 3
92924: PUSH
92925: EMPTY
92926: LIST
92927: LIST
92928: LIST
92929: PUSH
92930: LD_VAR 0 1
92934: PUSH
92935: LD_INT 4
92937: MINUS
92938: PUSH
92939: LD_VAR 0 2
92943: PUSH
92944: LD_INT 4
92946: MINUS
92947: PUSH
92948: LD_INT 2
92950: PUSH
92951: EMPTY
92952: LIST
92953: LIST
92954: LIST
92955: PUSH
92956: EMPTY
92957: LIST
92958: LIST
92959: LIST
92960: LIST
92961: LIST
92962: ST_TO_ADDR
// end ; 5 :
92963: GO 93103
92965: LD_INT 5
92967: DOUBLE
92968: EQUAL
92969: IFTRUE 92973
92971: GO 93102
92973: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
92974: LD_ADDR_VAR 0 5
92978: PUSH
92979: LD_VAR 0 1
92983: PUSH
92984: LD_INT 4
92986: MINUS
92987: PUSH
92988: LD_VAR 0 2
92992: PUSH
92993: LD_INT 1
92995: PUSH
92996: EMPTY
92997: LIST
92998: LIST
92999: LIST
93000: PUSH
93001: LD_VAR 0 1
93005: PUSH
93006: LD_VAR 0 2
93010: PUSH
93011: LD_INT 4
93013: MINUS
93014: PUSH
93015: LD_INT 3
93017: PUSH
93018: EMPTY
93019: LIST
93020: LIST
93021: LIST
93022: PUSH
93023: LD_VAR 0 1
93027: PUSH
93028: LD_INT 4
93030: PLUS
93031: PUSH
93032: LD_VAR 0 2
93036: PUSH
93037: LD_INT 4
93039: PLUS
93040: PUSH
93041: LD_INT 5
93043: PUSH
93044: EMPTY
93045: LIST
93046: LIST
93047: LIST
93048: PUSH
93049: LD_VAR 0 1
93053: PUSH
93054: LD_INT 3
93056: PLUS
93057: PUSH
93058: LD_VAR 0 2
93062: PUSH
93063: LD_INT 4
93065: PUSH
93066: EMPTY
93067: LIST
93068: LIST
93069: LIST
93070: PUSH
93071: LD_VAR 0 1
93075: PUSH
93076: LD_VAR 0 2
93080: PUSH
93081: LD_INT 3
93083: PLUS
93084: PUSH
93085: LD_INT 0
93087: PUSH
93088: EMPTY
93089: LIST
93090: LIST
93091: LIST
93092: PUSH
93093: EMPTY
93094: LIST
93095: LIST
93096: LIST
93097: LIST
93098: LIST
93099: ST_TO_ADDR
// end ; end ;
93100: GO 93103
93102: POP
// result := list ;
93103: LD_ADDR_VAR 0 4
93107: PUSH
93108: LD_VAR 0 5
93112: ST_TO_ADDR
// end ;
93113: LD_VAR 0 4
93117: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
93118: LD_INT 0
93120: PPUSH
93121: PPUSH
93122: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
93123: LD_VAR 0 1
93127: NOT
93128: IFTRUE 93156
93130: PUSH
93131: LD_VAR 0 2
93135: PUSH
93136: LD_INT 1
93138: PUSH
93139: LD_INT 2
93141: PUSH
93142: LD_INT 3
93144: PUSH
93145: LD_INT 4
93147: PUSH
93148: EMPTY
93149: LIST
93150: LIST
93151: LIST
93152: LIST
93153: IN
93154: NOT
93155: OR
93156: IFFALSE 93160
// exit ;
93158: GO 93243
// tmp := [ ] ;
93160: LD_ADDR_VAR 0 5
93164: PUSH
93165: EMPTY
93166: ST_TO_ADDR
// for i in units do
93167: LD_ADDR_VAR 0 4
93171: PUSH
93172: LD_VAR 0 1
93176: PUSH
93177: FOR_IN
93178: IFFALSE 93212
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
93180: LD_ADDR_VAR 0 5
93184: PUSH
93185: LD_VAR 0 5
93189: PPUSH
93190: LD_VAR 0 4
93194: PPUSH
93195: LD_VAR 0 2
93199: PPUSH
93200: CALL_OW 259
93204: PPUSH
93205: CALL 94638 0 2
93209: ST_TO_ADDR
93210: GO 93177
93212: POP
93213: POP
// if not tmp then
93214: LD_VAR 0 5
93218: NOT
93219: IFFALSE 93223
// exit ;
93221: GO 93243
// result := SortListByListDesc ( units , tmp ) ;
93223: LD_ADDR_VAR 0 3
93227: PUSH
93228: LD_VAR 0 1
93232: PPUSH
93233: LD_VAR 0 5
93237: PPUSH
93238: CALL_OW 77
93242: ST_TO_ADDR
// end ;
93243: LD_VAR 0 3
93247: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
93248: LD_INT 0
93250: PPUSH
93251: PPUSH
93252: PPUSH
// result := false ;
93253: LD_ADDR_VAR 0 3
93257: PUSH
93258: LD_INT 0
93260: ST_TO_ADDR
// if not building then
93261: LD_VAR 0 2
93265: NOT
93266: IFFALSE 93270
// exit ;
93268: GO 93414
// x := GetX ( building ) ;
93270: LD_ADDR_VAR 0 4
93274: PUSH
93275: LD_VAR 0 2
93279: PPUSH
93280: CALL_OW 250
93284: ST_TO_ADDR
// y := GetY ( building ) ;
93285: LD_ADDR_VAR 0 5
93289: PUSH
93290: LD_VAR 0 2
93294: PPUSH
93295: CALL_OW 251
93299: ST_TO_ADDR
// if not x or not y then
93300: LD_VAR 0 4
93304: NOT
93305: IFTRUE 93314
93307: PUSH
93308: LD_VAR 0 5
93312: NOT
93313: OR
93314: IFFALSE 93318
// exit ;
93316: GO 93414
// if GetTaskList ( unit ) then
93318: LD_VAR 0 1
93322: PPUSH
93323: CALL_OW 437
93327: IFFALSE 93414
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
93329: LD_STRING e
93331: PUSH
93332: LD_VAR 0 1
93336: PPUSH
93337: CALL_OW 437
93341: PUSH
93342: LD_INT 1
93344: ARRAY
93345: PUSH
93346: LD_INT 1
93348: ARRAY
93349: EQUAL
93350: IFFALSE 93377
93352: PUSH
93353: LD_VAR 0 4
93357: PUSH
93358: LD_VAR 0 1
93362: PPUSH
93363: CALL_OW 437
93367: PUSH
93368: LD_INT 1
93370: ARRAY
93371: PUSH
93372: LD_INT 2
93374: ARRAY
93375: EQUAL
93376: AND
93377: IFFALSE 93404
93379: PUSH
93380: LD_VAR 0 5
93384: PUSH
93385: LD_VAR 0 1
93389: PPUSH
93390: CALL_OW 437
93394: PUSH
93395: LD_INT 1
93397: ARRAY
93398: PUSH
93399: LD_INT 3
93401: ARRAY
93402: EQUAL
93403: AND
93404: IFFALSE 93414
// result := true end ;
93406: LD_ADDR_VAR 0 3
93410: PUSH
93411: LD_INT 1
93413: ST_TO_ADDR
// end ;
93414: LD_VAR 0 3
93418: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
93419: LD_INT 0
93421: PPUSH
// result := false ;
93422: LD_ADDR_VAR 0 4
93426: PUSH
93427: LD_INT 0
93429: ST_TO_ADDR
// if GetTaskList ( unit ) then
93430: LD_VAR 0 1
93434: PPUSH
93435: CALL_OW 437
93439: IFFALSE 93526
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
93441: LD_STRING M
93443: PUSH
93444: LD_VAR 0 1
93448: PPUSH
93449: CALL_OW 437
93453: PUSH
93454: LD_INT 1
93456: ARRAY
93457: PUSH
93458: LD_INT 1
93460: ARRAY
93461: EQUAL
93462: IFFALSE 93489
93464: PUSH
93465: LD_VAR 0 2
93469: PUSH
93470: LD_VAR 0 1
93474: PPUSH
93475: CALL_OW 437
93479: PUSH
93480: LD_INT 1
93482: ARRAY
93483: PUSH
93484: LD_INT 2
93486: ARRAY
93487: EQUAL
93488: AND
93489: IFFALSE 93516
93491: PUSH
93492: LD_VAR 0 3
93496: PUSH
93497: LD_VAR 0 1
93501: PPUSH
93502: CALL_OW 437
93506: PUSH
93507: LD_INT 1
93509: ARRAY
93510: PUSH
93511: LD_INT 3
93513: ARRAY
93514: EQUAL
93515: AND
93516: IFFALSE 93526
// result := true ;
93518: LD_ADDR_VAR 0 4
93522: PUSH
93523: LD_INT 1
93525: ST_TO_ADDR
// end ; end ;
93526: LD_VAR 0 4
93530: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
93531: LD_INT 0
93533: PPUSH
93534: PPUSH
93535: PPUSH
93536: PPUSH
// if not unit or not area then
93537: LD_VAR 0 1
93541: NOT
93542: IFTRUE 93551
93544: PUSH
93545: LD_VAR 0 2
93549: NOT
93550: OR
93551: IFFALSE 93555
// exit ;
93553: GO 93731
// tmp := AreaToList ( area , i ) ;
93555: LD_ADDR_VAR 0 6
93559: PUSH
93560: LD_VAR 0 2
93564: PPUSH
93565: LD_VAR 0 5
93569: PPUSH
93570: CALL_OW 517
93574: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
93575: LD_ADDR_VAR 0 5
93579: PUSH
93580: DOUBLE
93581: LD_INT 1
93583: DEC
93584: ST_TO_ADDR
93585: LD_VAR 0 6
93589: PUSH
93590: LD_INT 1
93592: ARRAY
93593: PUSH
93594: FOR_TO
93595: IFFALSE 93729
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
93597: LD_ADDR_VAR 0 7
93601: PUSH
93602: LD_VAR 0 6
93606: PUSH
93607: LD_INT 1
93609: ARRAY
93610: PUSH
93611: LD_VAR 0 5
93615: ARRAY
93616: PUSH
93617: LD_VAR 0 6
93621: PUSH
93622: LD_INT 2
93624: ARRAY
93625: PUSH
93626: LD_VAR 0 5
93630: ARRAY
93631: PUSH
93632: EMPTY
93633: LIST
93634: LIST
93635: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
93636: LD_INT 92
93638: PUSH
93639: LD_VAR 0 7
93643: PUSH
93644: LD_INT 1
93646: ARRAY
93647: PUSH
93648: LD_VAR 0 7
93652: PUSH
93653: LD_INT 2
93655: ARRAY
93656: PUSH
93657: LD_INT 2
93659: PUSH
93660: EMPTY
93661: LIST
93662: LIST
93663: LIST
93664: LIST
93665: PPUSH
93666: CALL_OW 69
93670: PUSH
93671: LD_INT 0
93673: EQUAL
93674: IFFALSE 93727
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
93676: LD_VAR 0 1
93680: PPUSH
93681: LD_VAR 0 7
93685: PUSH
93686: LD_INT 1
93688: ARRAY
93689: PPUSH
93690: LD_VAR 0 7
93694: PUSH
93695: LD_INT 2
93697: ARRAY
93698: PPUSH
93699: LD_VAR 0 3
93703: PPUSH
93704: CALL_OW 48
// result := IsPlaced ( unit ) ;
93708: LD_ADDR_VAR 0 4
93712: PUSH
93713: LD_VAR 0 1
93717: PPUSH
93718: CALL_OW 305
93722: ST_TO_ADDR
// exit ;
93723: POP
93724: POP
93725: GO 93731
// end ; end ;
93727: GO 93594
93729: POP
93730: POP
// end ;
93731: LD_VAR 0 4
93735: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
93736: LD_INT 0
93738: PPUSH
93739: PPUSH
93740: PPUSH
// if not side or side > 8 then
93741: LD_VAR 0 1
93745: NOT
93746: IFTRUE 93758
93748: PUSH
93749: LD_VAR 0 1
93753: PUSH
93754: LD_INT 8
93756: GREATER
93757: OR
93758: IFFALSE 93762
// exit ;
93760: GO 93949
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
93762: LD_ADDR_VAR 0 4
93766: PUSH
93767: LD_INT 22
93769: PUSH
93770: LD_VAR 0 1
93774: PUSH
93775: EMPTY
93776: LIST
93777: LIST
93778: PUSH
93779: LD_INT 21
93781: PUSH
93782: LD_INT 3
93784: PUSH
93785: EMPTY
93786: LIST
93787: LIST
93788: PUSH
93789: EMPTY
93790: LIST
93791: LIST
93792: PPUSH
93793: CALL_OW 69
93797: ST_TO_ADDR
// if not tmp then
93798: LD_VAR 0 4
93802: NOT
93803: IFFALSE 93807
// exit ;
93805: GO 93949
// enable_addtolog := true ;
93807: LD_ADDR_OWVAR 81
93811: PUSH
93812: LD_INT 1
93814: ST_TO_ADDR
// AddToLog ( [ ) ;
93815: LD_STRING [
93817: PPUSH
93818: CALL_OW 561
// for i in tmp do
93822: LD_ADDR_VAR 0 3
93826: PUSH
93827: LD_VAR 0 4
93831: PUSH
93832: FOR_IN
93833: IFFALSE 93940
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
93835: LD_STRING [
93837: PUSH
93838: LD_VAR 0 3
93842: PPUSH
93843: CALL_OW 266
93847: STR
93848: PUSH
93849: LD_STRING , 
93851: STR
93852: PUSH
93853: LD_VAR 0 3
93857: PPUSH
93858: CALL_OW 250
93862: STR
93863: PUSH
93864: LD_STRING , 
93866: STR
93867: PUSH
93868: LD_VAR 0 3
93872: PPUSH
93873: CALL_OW 251
93877: STR
93878: PUSH
93879: LD_STRING , 
93881: STR
93882: PUSH
93883: LD_VAR 0 3
93887: PPUSH
93888: CALL_OW 254
93892: STR
93893: PUSH
93894: LD_STRING , 
93896: STR
93897: PUSH
93898: LD_VAR 0 3
93902: PPUSH
93903: LD_INT 1
93905: PPUSH
93906: CALL_OW 268
93910: STR
93911: PUSH
93912: LD_STRING , 
93914: STR
93915: PUSH
93916: LD_VAR 0 3
93920: PPUSH
93921: LD_INT 2
93923: PPUSH
93924: CALL_OW 268
93928: STR
93929: PUSH
93930: LD_STRING ],
93932: STR
93933: PPUSH
93934: CALL_OW 561
// end ;
93938: GO 93832
93940: POP
93941: POP
// AddToLog ( ]; ) ;
93942: LD_STRING ];
93944: PPUSH
93945: CALL_OW 561
// end ;
93949: LD_VAR 0 2
93953: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
93954: LD_INT 0
93956: PPUSH
93957: PPUSH
93958: PPUSH
93959: PPUSH
93960: PPUSH
// if not area or not rate or not max then
93961: LD_VAR 0 1
93965: NOT
93966: IFTRUE 93975
93968: PUSH
93969: LD_VAR 0 2
93973: NOT
93974: OR
93975: IFTRUE 93984
93977: PUSH
93978: LD_VAR 0 4
93982: NOT
93983: OR
93984: IFFALSE 93988
// exit ;
93986: GO 94177
// while 1 do
93988: LD_INT 1
93990: IFFALSE 94177
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
93992: LD_ADDR_VAR 0 9
93996: PUSH
93997: LD_VAR 0 1
94001: PPUSH
94002: LD_INT 1
94004: PPUSH
94005: CALL_OW 287
94009: PUSH
94010: LD_INT 10
94012: MUL
94013: ST_TO_ADDR
// r := rate / 10 ;
94014: LD_ADDR_VAR 0 7
94018: PUSH
94019: LD_VAR 0 2
94023: PUSH
94024: LD_INT 10
94026: DIVREAL
94027: ST_TO_ADDR
// time := 1 1$00 ;
94028: LD_ADDR_VAR 0 8
94032: PUSH
94033: LD_INT 2100
94035: ST_TO_ADDR
// if amount < min then
94036: LD_VAR 0 9
94040: PUSH
94041: LD_VAR 0 3
94045: LESS
94046: IFFALSE 94064
// r := r * 2 else
94048: LD_ADDR_VAR 0 7
94052: PUSH
94053: LD_VAR 0 7
94057: PUSH
94058: LD_INT 2
94060: MUL
94061: ST_TO_ADDR
94062: GO 94090
// if amount > max then
94064: LD_VAR 0 9
94068: PUSH
94069: LD_VAR 0 4
94073: GREATER
94074: IFFALSE 94090
// r := r / 2 ;
94076: LD_ADDR_VAR 0 7
94080: PUSH
94081: LD_VAR 0 7
94085: PUSH
94086: LD_INT 2
94088: DIVREAL
94089: ST_TO_ADDR
// time := time / r ;
94090: LD_ADDR_VAR 0 8
94094: PUSH
94095: LD_VAR 0 8
94099: PUSH
94100: LD_VAR 0 7
94104: DIVREAL
94105: ST_TO_ADDR
// if time < 0 then
94106: LD_VAR 0 8
94110: PUSH
94111: LD_INT 0
94113: LESS
94114: IFFALSE 94131
// time := time * - 1 ;
94116: LD_ADDR_VAR 0 8
94120: PUSH
94121: LD_VAR 0 8
94125: PUSH
94126: LD_INT 1
94128: NEG
94129: MUL
94130: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
94131: LD_VAR 0 8
94135: PUSH
94136: LD_INT 35
94138: PPUSH
94139: LD_INT 875
94141: PPUSH
94142: CALL_OW 12
94146: PLUS
94147: PPUSH
94148: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
94152: LD_INT 1
94154: PPUSH
94155: LD_INT 5
94157: PPUSH
94158: CALL_OW 12
94162: PPUSH
94163: LD_VAR 0 1
94167: PPUSH
94168: LD_INT 1
94170: PPUSH
94171: CALL_OW 55
// end ;
94175: GO 93988
// end ;
94177: LD_VAR 0 5
94181: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
94182: LD_INT 0
94184: PPUSH
94185: PPUSH
94186: PPUSH
94187: PPUSH
94188: PPUSH
94189: PPUSH
94190: PPUSH
94191: PPUSH
// if not turrets or not factories then
94192: LD_VAR 0 1
94196: NOT
94197: IFTRUE 94206
94199: PUSH
94200: LD_VAR 0 2
94204: NOT
94205: OR
94206: IFFALSE 94210
// exit ;
94208: GO 94517
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
94210: LD_ADDR_VAR 0 10
94214: PUSH
94215: LD_INT 5
94217: PUSH
94218: LD_INT 6
94220: PUSH
94221: EMPTY
94222: LIST
94223: LIST
94224: PUSH
94225: LD_INT 2
94227: PUSH
94228: LD_INT 4
94230: PUSH
94231: EMPTY
94232: LIST
94233: LIST
94234: PUSH
94235: LD_INT 3
94237: PUSH
94238: LD_INT 5
94240: PUSH
94241: EMPTY
94242: LIST
94243: LIST
94244: PUSH
94245: EMPTY
94246: LIST
94247: LIST
94248: LIST
94249: PUSH
94250: LD_INT 24
94252: PUSH
94253: LD_INT 25
94255: PUSH
94256: EMPTY
94257: LIST
94258: LIST
94259: PUSH
94260: LD_INT 23
94262: PUSH
94263: LD_INT 27
94265: PUSH
94266: EMPTY
94267: LIST
94268: LIST
94269: PUSH
94270: EMPTY
94271: LIST
94272: LIST
94273: PUSH
94274: LD_INT 42
94276: PUSH
94277: LD_INT 43
94279: PUSH
94280: EMPTY
94281: LIST
94282: LIST
94283: PUSH
94284: LD_INT 44
94286: PUSH
94287: LD_INT 46
94289: PUSH
94290: EMPTY
94291: LIST
94292: LIST
94293: PUSH
94294: LD_INT 45
94296: PUSH
94297: LD_INT 47
94299: PUSH
94300: EMPTY
94301: LIST
94302: LIST
94303: PUSH
94304: EMPTY
94305: LIST
94306: LIST
94307: LIST
94308: PUSH
94309: EMPTY
94310: LIST
94311: LIST
94312: LIST
94313: ST_TO_ADDR
// result := [ ] ;
94314: LD_ADDR_VAR 0 3
94318: PUSH
94319: EMPTY
94320: ST_TO_ADDR
// for i in turrets do
94321: LD_ADDR_VAR 0 4
94325: PUSH
94326: LD_VAR 0 1
94330: PUSH
94331: FOR_IN
94332: IFFALSE 94515
// begin nat := GetNation ( i ) ;
94334: LD_ADDR_VAR 0 7
94338: PUSH
94339: LD_VAR 0 4
94343: PPUSH
94344: CALL_OW 248
94348: ST_TO_ADDR
// weapon := 0 ;
94349: LD_ADDR_VAR 0 8
94353: PUSH
94354: LD_INT 0
94356: ST_TO_ADDR
// if not nat then
94357: LD_VAR 0 7
94361: NOT
94362: IFFALSE 94366
// continue ;
94364: GO 94331
// for j in list [ nat ] do
94366: LD_ADDR_VAR 0 5
94370: PUSH
94371: LD_VAR 0 10
94375: PUSH
94376: LD_VAR 0 7
94380: ARRAY
94381: PUSH
94382: FOR_IN
94383: IFFALSE 94424
// if GetBWeapon ( i ) = j [ 1 ] then
94385: LD_VAR 0 4
94389: PPUSH
94390: CALL_OW 269
94394: PUSH
94395: LD_VAR 0 5
94399: PUSH
94400: LD_INT 1
94402: ARRAY
94403: EQUAL
94404: IFFALSE 94422
// begin weapon := j [ 2 ] ;
94406: LD_ADDR_VAR 0 8
94410: PUSH
94411: LD_VAR 0 5
94415: PUSH
94416: LD_INT 2
94418: ARRAY
94419: ST_TO_ADDR
// break ;
94420: GO 94424
// end ;
94422: GO 94382
94424: POP
94425: POP
// if not weapon then
94426: LD_VAR 0 8
94430: NOT
94431: IFFALSE 94435
// continue ;
94433: GO 94331
// for k in factories do
94435: LD_ADDR_VAR 0 6
94439: PUSH
94440: LD_VAR 0 2
94444: PUSH
94445: FOR_IN
94446: IFFALSE 94511
// begin weapons := AvailableWeaponList ( k ) ;
94448: LD_ADDR_VAR 0 9
94452: PUSH
94453: LD_VAR 0 6
94457: PPUSH
94458: CALL_OW 478
94462: ST_TO_ADDR
// if not weapons then
94463: LD_VAR 0 9
94467: NOT
94468: IFFALSE 94472
// continue ;
94470: GO 94445
// if weapon in weapons then
94472: LD_VAR 0 8
94476: PUSH
94477: LD_VAR 0 9
94481: IN
94482: IFFALSE 94509
// begin result := [ i , weapon ] ;
94484: LD_ADDR_VAR 0 3
94488: PUSH
94489: LD_VAR 0 4
94493: PUSH
94494: LD_VAR 0 8
94498: PUSH
94499: EMPTY
94500: LIST
94501: LIST
94502: ST_TO_ADDR
// exit ;
94503: POP
94504: POP
94505: POP
94506: POP
94507: GO 94517
// end ; end ;
94509: GO 94445
94511: POP
94512: POP
// end ;
94513: GO 94331
94515: POP
94516: POP
// end ;
94517: LD_VAR 0 3
94521: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
94522: LD_INT 0
94524: PPUSH
// if not side or side > 8 then
94525: LD_VAR 0 3
94529: NOT
94530: IFTRUE 94542
94532: PUSH
94533: LD_VAR 0 3
94537: PUSH
94538: LD_INT 8
94540: GREATER
94541: OR
94542: IFFALSE 94546
// exit ;
94544: GO 94605
// if not range then
94546: LD_VAR 0 4
94550: NOT
94551: IFFALSE 94562
// range := - 12 ;
94553: LD_ADDR_VAR 0 4
94557: PUSH
94558: LD_INT 12
94560: NEG
94561: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
94562: LD_VAR 0 1
94566: PPUSH
94567: LD_VAR 0 2
94571: PPUSH
94572: LD_VAR 0 3
94576: PPUSH
94577: LD_VAR 0 4
94581: PPUSH
94582: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
94586: LD_VAR 0 1
94590: PPUSH
94591: LD_VAR 0 2
94595: PPUSH
94596: LD_VAR 0 3
94600: PPUSH
94601: CALL_OW 331
// end ;
94605: LD_VAR 0 5
94609: RET
// export function Video ( mode ) ; begin
94610: LD_INT 0
94612: PPUSH
// ingame_video = mode ;
94613: LD_ADDR_OWVAR 52
94617: PUSH
94618: LD_VAR 0 1
94622: ST_TO_ADDR
// interface_hidden = mode ;
94623: LD_ADDR_OWVAR 54
94627: PUSH
94628: LD_VAR 0 1
94632: ST_TO_ADDR
// end ;
94633: LD_VAR 0 2
94637: RET
// export function Join ( array , element ) ; begin
94638: LD_INT 0
94640: PPUSH
// result := Replace ( array , array + 1 , element ) ;
94641: LD_ADDR_VAR 0 3
94645: PUSH
94646: LD_VAR 0 1
94650: PPUSH
94651: LD_VAR 0 1
94655: PUSH
94656: LD_INT 1
94658: PLUS
94659: PPUSH
94660: LD_VAR 0 2
94664: PPUSH
94665: CALL_OW 1
94669: ST_TO_ADDR
// end ;
94670: LD_VAR 0 3
94674: RET
// export function JoinUnion ( array , element ) ; begin
94675: LD_INT 0
94677: PPUSH
// result := array union element ;
94678: LD_ADDR_VAR 0 3
94682: PUSH
94683: LD_VAR 0 1
94687: PUSH
94688: LD_VAR 0 2
94692: UNION
94693: ST_TO_ADDR
// end ;
94694: LD_VAR 0 3
94698: RET
// export function GetBehemoths ( side ) ; begin
94699: LD_INT 0
94701: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
94702: LD_ADDR_VAR 0 2
94706: PUSH
94707: LD_INT 22
94709: PUSH
94710: LD_VAR 0 1
94714: PUSH
94715: EMPTY
94716: LIST
94717: LIST
94718: PUSH
94719: LD_INT 31
94721: PUSH
94722: LD_INT 25
94724: PUSH
94725: EMPTY
94726: LIST
94727: LIST
94728: PUSH
94729: EMPTY
94730: LIST
94731: LIST
94732: PPUSH
94733: CALL_OW 69
94737: ST_TO_ADDR
// end ;
94738: LD_VAR 0 2
94742: RET
// export function Shuffle ( array ) ; var i , index ; begin
94743: LD_INT 0
94745: PPUSH
94746: PPUSH
94747: PPUSH
// result := [ ] ;
94748: LD_ADDR_VAR 0 2
94752: PUSH
94753: EMPTY
94754: ST_TO_ADDR
// if not array then
94755: LD_VAR 0 1
94759: NOT
94760: IFFALSE 94764
// exit ;
94762: GO 94863
// Randomize ;
94764: CALL_OW 10
// for i = array downto 1 do
94768: LD_ADDR_VAR 0 3
94772: PUSH
94773: DOUBLE
94774: LD_VAR 0 1
94778: INC
94779: ST_TO_ADDR
94780: LD_INT 1
94782: PUSH
94783: FOR_DOWNTO
94784: IFFALSE 94861
// begin index := rand ( 1 , array ) ;
94786: LD_ADDR_VAR 0 4
94790: PUSH
94791: LD_INT 1
94793: PPUSH
94794: LD_VAR 0 1
94798: PPUSH
94799: CALL_OW 12
94803: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
94804: LD_ADDR_VAR 0 2
94808: PUSH
94809: LD_VAR 0 2
94813: PPUSH
94814: LD_VAR 0 2
94818: PUSH
94819: LD_INT 1
94821: PLUS
94822: PPUSH
94823: LD_VAR 0 1
94827: PUSH
94828: LD_VAR 0 4
94832: ARRAY
94833: PPUSH
94834: CALL_OW 2
94838: ST_TO_ADDR
// array := Delete ( array , index ) ;
94839: LD_ADDR_VAR 0 1
94843: PUSH
94844: LD_VAR 0 1
94848: PPUSH
94849: LD_VAR 0 4
94853: PPUSH
94854: CALL_OW 3
94858: ST_TO_ADDR
// end ;
94859: GO 94783
94861: POP
94862: POP
// end ;
94863: LD_VAR 0 2
94867: RET
// export function GetBaseMaterials ( base ) ; begin
94868: LD_INT 0
94870: PPUSH
// result := [ 0 , 0 , 0 ] ;
94871: LD_ADDR_VAR 0 2
94875: PUSH
94876: LD_INT 0
94878: PUSH
94879: LD_INT 0
94881: PUSH
94882: LD_INT 0
94884: PUSH
94885: EMPTY
94886: LIST
94887: LIST
94888: LIST
94889: ST_TO_ADDR
// if not base then
94890: LD_VAR 0 1
94894: NOT
94895: IFFALSE 94899
// exit ;
94897: GO 94948
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
94899: LD_ADDR_VAR 0 2
94903: PUSH
94904: LD_VAR 0 1
94908: PPUSH
94909: LD_INT 1
94911: PPUSH
94912: CALL_OW 275
94916: PUSH
94917: LD_VAR 0 1
94921: PPUSH
94922: LD_INT 2
94924: PPUSH
94925: CALL_OW 275
94929: PUSH
94930: LD_VAR 0 1
94934: PPUSH
94935: LD_INT 3
94937: PPUSH
94938: CALL_OW 275
94942: PUSH
94943: EMPTY
94944: LIST
94945: LIST
94946: LIST
94947: ST_TO_ADDR
// end ;
94948: LD_VAR 0 2
94952: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
94953: LD_INT 0
94955: PPUSH
94956: PPUSH
// result := array ;
94957: LD_ADDR_VAR 0 3
94961: PUSH
94962: LD_VAR 0 1
94966: ST_TO_ADDR
// if size >= result then
94967: LD_VAR 0 2
94971: PUSH
94972: LD_VAR 0 3
94976: GREATEREQUAL
94977: IFFALSE 94981
// exit ;
94979: GO 95031
// if size then
94981: LD_VAR 0 2
94985: IFFALSE 95031
// for i := array downto size do
94987: LD_ADDR_VAR 0 4
94991: PUSH
94992: DOUBLE
94993: LD_VAR 0 1
94997: INC
94998: ST_TO_ADDR
94999: LD_VAR 0 2
95003: PUSH
95004: FOR_DOWNTO
95005: IFFALSE 95029
// result := Delete ( result , result ) ;
95007: LD_ADDR_VAR 0 3
95011: PUSH
95012: LD_VAR 0 3
95016: PPUSH
95017: LD_VAR 0 3
95021: PPUSH
95022: CALL_OW 3
95026: ST_TO_ADDR
95027: GO 95004
95029: POP
95030: POP
// end ;
95031: LD_VAR 0 3
95035: RET
// export function ComExit ( unit ) ; var tmp ; begin
95036: LD_INT 0
95038: PPUSH
95039: PPUSH
// if not IsInUnit ( unit ) then
95040: LD_VAR 0 1
95044: PPUSH
95045: CALL_OW 310
95049: NOT
95050: IFFALSE 95054
// exit ;
95052: GO 95114
// tmp := IsInUnit ( unit ) ;
95054: LD_ADDR_VAR 0 3
95058: PUSH
95059: LD_VAR 0 1
95063: PPUSH
95064: CALL_OW 310
95068: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
95069: LD_VAR 0 3
95073: PPUSH
95074: CALL_OW 247
95078: PUSH
95079: LD_INT 2
95081: EQUAL
95082: IFFALSE 95095
// ComExitVehicle ( unit ) else
95084: LD_VAR 0 1
95088: PPUSH
95089: CALL_OW 121
95093: GO 95104
// ComExitBuilding ( unit ) ;
95095: LD_VAR 0 1
95099: PPUSH
95100: CALL_OW 122
// result := tmp ;
95104: LD_ADDR_VAR 0 2
95108: PUSH
95109: LD_VAR 0 3
95113: ST_TO_ADDR
// end ;
95114: LD_VAR 0 2
95118: RET
// export function ComExitAll ( units ) ; var i ; begin
95119: LD_INT 0
95121: PPUSH
95122: PPUSH
// if not units then
95123: LD_VAR 0 1
95127: NOT
95128: IFFALSE 95132
// exit ;
95130: GO 95158
// for i in units do
95132: LD_ADDR_VAR 0 3
95136: PUSH
95137: LD_VAR 0 1
95141: PUSH
95142: FOR_IN
95143: IFFALSE 95156
// ComExit ( i ) ;
95145: LD_VAR 0 3
95149: PPUSH
95150: CALL 95036 0 1
95154: GO 95142
95156: POP
95157: POP
// end ;
95158: LD_VAR 0 2
95162: RET
// export function ResetHc ; begin
95163: LD_INT 0
95165: PPUSH
// InitHc ;
95166: CALL_OW 19
// hc_importance := 0 ;
95170: LD_ADDR_OWVAR 32
95174: PUSH
95175: LD_INT 0
95177: ST_TO_ADDR
// end ;
95178: LD_VAR 0 1
95182: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
95183: LD_INT 0
95185: PPUSH
95186: PPUSH
95187: PPUSH
// _x := ( x1 + x2 ) div 2 ;
95188: LD_ADDR_VAR 0 6
95192: PUSH
95193: LD_VAR 0 1
95197: PUSH
95198: LD_VAR 0 3
95202: PLUS
95203: PUSH
95204: LD_INT 2
95206: DIV
95207: ST_TO_ADDR
// if _x < 0 then
95208: LD_VAR 0 6
95212: PUSH
95213: LD_INT 0
95215: LESS
95216: IFFALSE 95233
// _x := _x * - 1 ;
95218: LD_ADDR_VAR 0 6
95222: PUSH
95223: LD_VAR 0 6
95227: PUSH
95228: LD_INT 1
95230: NEG
95231: MUL
95232: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
95233: LD_ADDR_VAR 0 7
95237: PUSH
95238: LD_VAR 0 2
95242: PUSH
95243: LD_VAR 0 4
95247: PLUS
95248: PUSH
95249: LD_INT 2
95251: DIV
95252: ST_TO_ADDR
// if _y < 0 then
95253: LD_VAR 0 7
95257: PUSH
95258: LD_INT 0
95260: LESS
95261: IFFALSE 95278
// _y := _y * - 1 ;
95263: LD_ADDR_VAR 0 7
95267: PUSH
95268: LD_VAR 0 7
95272: PUSH
95273: LD_INT 1
95275: NEG
95276: MUL
95277: ST_TO_ADDR
// result := [ _x , _y ] ;
95278: LD_ADDR_VAR 0 5
95282: PUSH
95283: LD_VAR 0 6
95287: PUSH
95288: LD_VAR 0 7
95292: PUSH
95293: EMPTY
95294: LIST
95295: LIST
95296: ST_TO_ADDR
// end ;
95297: LD_VAR 0 5
95301: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
95302: LD_INT 0
95304: PPUSH
95305: PPUSH
95306: PPUSH
95307: PPUSH
// task := GetTaskList ( unit ) ;
95308: LD_ADDR_VAR 0 7
95312: PUSH
95313: LD_VAR 0 1
95317: PPUSH
95318: CALL_OW 437
95322: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
95323: LD_VAR 0 7
95327: NOT
95328: IFFALSE 95347
95330: PUSH
95331: LD_VAR 0 1
95335: PPUSH
95336: LD_VAR 0 2
95340: PPUSH
95341: CALL_OW 308
95345: NOT
95346: AND
95347: IFFALSE 95351
// exit ;
95349: GO 95469
// if IsInArea ( unit , area ) then
95351: LD_VAR 0 1
95355: PPUSH
95356: LD_VAR 0 2
95360: PPUSH
95361: CALL_OW 308
95365: IFFALSE 95383
// begin ComMoveToArea ( unit , goAway ) ;
95367: LD_VAR 0 1
95371: PPUSH
95372: LD_VAR 0 3
95376: PPUSH
95377: CALL_OW 113
// exit ;
95381: GO 95469
// end ; if task [ 1 ] [ 1 ] <> M then
95383: LD_VAR 0 7
95387: PUSH
95388: LD_INT 1
95390: ARRAY
95391: PUSH
95392: LD_INT 1
95394: ARRAY
95395: PUSH
95396: LD_STRING M
95398: NONEQUAL
95399: IFFALSE 95403
// exit ;
95401: GO 95469
// x := task [ 1 ] [ 2 ] ;
95403: LD_ADDR_VAR 0 5
95407: PUSH
95408: LD_VAR 0 7
95412: PUSH
95413: LD_INT 1
95415: ARRAY
95416: PUSH
95417: LD_INT 2
95419: ARRAY
95420: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
95421: LD_ADDR_VAR 0 6
95425: PUSH
95426: LD_VAR 0 7
95430: PUSH
95431: LD_INT 1
95433: ARRAY
95434: PUSH
95435: LD_INT 3
95437: ARRAY
95438: ST_TO_ADDR
// if InArea ( x , y , area ) then
95439: LD_VAR 0 5
95443: PPUSH
95444: LD_VAR 0 6
95448: PPUSH
95449: LD_VAR 0 2
95453: PPUSH
95454: CALL_OW 309
95458: IFFALSE 95469
// ComStop ( unit ) ;
95460: LD_VAR 0 1
95464: PPUSH
95465: CALL_OW 141
// end ;
95469: LD_VAR 0 4
95473: RET
// export function Abs ( value ) ; begin
95474: LD_INT 0
95476: PPUSH
// result := value ;
95477: LD_ADDR_VAR 0 2
95481: PUSH
95482: LD_VAR 0 1
95486: ST_TO_ADDR
// if value < 0 then
95487: LD_VAR 0 1
95491: PUSH
95492: LD_INT 0
95494: LESS
95495: IFFALSE 95512
// result := value * - 1 ;
95497: LD_ADDR_VAR 0 2
95501: PUSH
95502: LD_VAR 0 1
95506: PUSH
95507: LD_INT 1
95509: NEG
95510: MUL
95511: ST_TO_ADDR
// end ;
95512: LD_VAR 0 2
95516: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
95517: LD_INT 0
95519: PPUSH
95520: PPUSH
95521: PPUSH
95522: PPUSH
95523: PPUSH
95524: PPUSH
95525: PPUSH
95526: PPUSH
// if not unit or not building then
95527: LD_VAR 0 1
95531: NOT
95532: IFTRUE 95541
95534: PUSH
95535: LD_VAR 0 2
95539: NOT
95540: OR
95541: IFFALSE 95545
// exit ;
95543: GO 95773
// x := GetX ( building ) ;
95545: LD_ADDR_VAR 0 4
95549: PUSH
95550: LD_VAR 0 2
95554: PPUSH
95555: CALL_OW 250
95559: ST_TO_ADDR
// y := GetY ( building ) ;
95560: LD_ADDR_VAR 0 6
95564: PUSH
95565: LD_VAR 0 2
95569: PPUSH
95570: CALL_OW 251
95574: ST_TO_ADDR
// d := GetDir ( building ) ;
95575: LD_ADDR_VAR 0 8
95579: PUSH
95580: LD_VAR 0 2
95584: PPUSH
95585: CALL_OW 254
95589: ST_TO_ADDR
// r := 4 ;
95590: LD_ADDR_VAR 0 9
95594: PUSH
95595: LD_INT 4
95597: ST_TO_ADDR
// for i := 1 to 5 do
95598: LD_ADDR_VAR 0 10
95602: PUSH
95603: DOUBLE
95604: LD_INT 1
95606: DEC
95607: ST_TO_ADDR
95608: LD_INT 5
95610: PUSH
95611: FOR_TO
95612: IFFALSE 95771
// begin _x := ShiftX ( x , d , r + i ) ;
95614: LD_ADDR_VAR 0 5
95618: PUSH
95619: LD_VAR 0 4
95623: PPUSH
95624: LD_VAR 0 8
95628: PPUSH
95629: LD_VAR 0 9
95633: PUSH
95634: LD_VAR 0 10
95638: PLUS
95639: PPUSH
95640: CALL_OW 272
95644: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
95645: LD_ADDR_VAR 0 7
95649: PUSH
95650: LD_VAR 0 6
95654: PPUSH
95655: LD_VAR 0 8
95659: PPUSH
95660: LD_VAR 0 9
95664: PUSH
95665: LD_VAR 0 10
95669: PLUS
95670: PPUSH
95671: CALL_OW 273
95675: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
95676: LD_VAR 0 5
95680: PPUSH
95681: LD_VAR 0 7
95685: PPUSH
95686: CALL_OW 488
95690: IFFALSE 95725
95692: PUSH
95693: LD_VAR 0 5
95697: PPUSH
95698: LD_VAR 0 7
95702: PPUSH
95703: CALL_OW 428
95707: PPUSH
95708: CALL_OW 247
95712: PUSH
95713: LD_INT 3
95715: PUSH
95716: LD_INT 2
95718: PUSH
95719: EMPTY
95720: LIST
95721: LIST
95722: IN
95723: NOT
95724: AND
95725: IFFALSE 95769
// begin ComMoveXY ( unit , _x , _y ) ;
95727: LD_VAR 0 1
95731: PPUSH
95732: LD_VAR 0 5
95736: PPUSH
95737: LD_VAR 0 7
95741: PPUSH
95742: CALL_OW 111
// result := [ _x , _y ] ;
95746: LD_ADDR_VAR 0 3
95750: PUSH
95751: LD_VAR 0 5
95755: PUSH
95756: LD_VAR 0 7
95760: PUSH
95761: EMPTY
95762: LIST
95763: LIST
95764: ST_TO_ADDR
// exit ;
95765: POP
95766: POP
95767: GO 95773
// end ; end ;
95769: GO 95611
95771: POP
95772: POP
// end ;
95773: LD_VAR 0 3
95777: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
95778: LD_INT 0
95780: PPUSH
95781: PPUSH
95782: PPUSH
// result := 0 ;
95783: LD_ADDR_VAR 0 3
95787: PUSH
95788: LD_INT 0
95790: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
95791: LD_VAR 0 1
95795: PUSH
95796: LD_INT 0
95798: LESS
95799: IFTRUE 95811
95801: PUSH
95802: LD_VAR 0 1
95806: PUSH
95807: LD_INT 8
95809: GREATER
95810: OR
95811: IFTRUE 95823
95813: PUSH
95814: LD_VAR 0 2
95818: PUSH
95819: LD_INT 0
95821: LESS
95822: OR
95823: IFTRUE 95835
95825: PUSH
95826: LD_VAR 0 2
95830: PUSH
95831: LD_INT 8
95833: GREATER
95834: OR
95835: IFFALSE 95839
// exit ;
95837: GO 95914
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
95839: LD_ADDR_VAR 0 4
95843: PUSH
95844: LD_INT 22
95846: PUSH
95847: LD_VAR 0 2
95851: PUSH
95852: EMPTY
95853: LIST
95854: LIST
95855: PPUSH
95856: CALL_OW 69
95860: PUSH
95861: FOR_IN
95862: IFFALSE 95912
// begin un := UnitShoot ( i ) ;
95864: LD_ADDR_VAR 0 5
95868: PUSH
95869: LD_VAR 0 4
95873: PPUSH
95874: CALL_OW 504
95878: ST_TO_ADDR
// if GetSide ( un ) = side1 then
95879: LD_VAR 0 5
95883: PPUSH
95884: CALL_OW 255
95888: PUSH
95889: LD_VAR 0 1
95893: EQUAL
95894: IFFALSE 95910
// begin result := un ;
95896: LD_ADDR_VAR 0 3
95900: PUSH
95901: LD_VAR 0 5
95905: ST_TO_ADDR
// exit ;
95906: POP
95907: POP
95908: GO 95914
// end ; end ;
95910: GO 95861
95912: POP
95913: POP
// end ;
95914: LD_VAR 0 3
95918: RET
// export function GetCargoBay ( units ) ; begin
95919: LD_INT 0
95921: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
95922: LD_ADDR_VAR 0 2
95926: PUSH
95927: LD_VAR 0 1
95931: PPUSH
95932: LD_INT 2
95934: PUSH
95935: LD_INT 34
95937: PUSH
95938: LD_INT 12
95940: PUSH
95941: EMPTY
95942: LIST
95943: LIST
95944: PUSH
95945: LD_INT 34
95947: PUSH
95948: LD_INT 51
95950: PUSH
95951: EMPTY
95952: LIST
95953: LIST
95954: PUSH
95955: LD_INT 34
95957: PUSH
95958: LD_INT 32
95960: PUSH
95961: EMPTY
95962: LIST
95963: LIST
95964: PUSH
95965: LD_INT 34
95967: PUSH
95968: LD_INT 89
95970: PUSH
95971: EMPTY
95972: LIST
95973: LIST
95974: PUSH
95975: EMPTY
95976: LIST
95977: LIST
95978: LIST
95979: LIST
95980: LIST
95981: PPUSH
95982: CALL_OW 72
95986: ST_TO_ADDR
// end ;
95987: LD_VAR 0 2
95991: RET
// export function Negate ( value ) ; begin
95992: LD_INT 0
95994: PPUSH
// result := not value ;
95995: LD_ADDR_VAR 0 2
95999: PUSH
96000: LD_VAR 0 1
96004: NOT
96005: ST_TO_ADDR
// end ;
96006: LD_VAR 0 2
96010: RET
// export function Inc ( value ) ; begin
96011: LD_INT 0
96013: PPUSH
// result := value + 1 ;
96014: LD_ADDR_VAR 0 2
96018: PUSH
96019: LD_VAR 0 1
96023: PUSH
96024: LD_INT 1
96026: PLUS
96027: ST_TO_ADDR
// end ;
96028: LD_VAR 0 2
96032: RET
// export function Dec ( value ) ; begin
96033: LD_INT 0
96035: PPUSH
// result := value - 1 ;
96036: LD_ADDR_VAR 0 2
96040: PUSH
96041: LD_VAR 0 1
96045: PUSH
96046: LD_INT 1
96048: MINUS
96049: ST_TO_ADDR
// end ;
96050: LD_VAR 0 2
96054: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
96055: LD_INT 0
96057: PPUSH
96058: PPUSH
96059: PPUSH
96060: PPUSH
96061: PPUSH
96062: PPUSH
96063: PPUSH
96064: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
96065: LD_VAR 0 1
96069: PPUSH
96070: LD_VAR 0 2
96074: PPUSH
96075: CALL_OW 488
96079: NOT
96080: IFTRUE 96099
96082: PUSH
96083: LD_VAR 0 3
96087: PPUSH
96088: LD_VAR 0 4
96092: PPUSH
96093: CALL_OW 488
96097: NOT
96098: OR
96099: IFFALSE 96112
// begin result := - 1 ;
96101: LD_ADDR_VAR 0 5
96105: PUSH
96106: LD_INT 1
96108: NEG
96109: ST_TO_ADDR
// exit ;
96110: GO 96347
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
96112: LD_ADDR_VAR 0 12
96116: PUSH
96117: LD_VAR 0 1
96121: PPUSH
96122: LD_VAR 0 2
96126: PPUSH
96127: LD_VAR 0 3
96131: PPUSH
96132: LD_VAR 0 4
96136: PPUSH
96137: CALL 95183 0 4
96141: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
96142: LD_ADDR_VAR 0 11
96146: PUSH
96147: LD_VAR 0 1
96151: PPUSH
96152: LD_VAR 0 2
96156: PPUSH
96157: LD_VAR 0 12
96161: PUSH
96162: LD_INT 1
96164: ARRAY
96165: PPUSH
96166: LD_VAR 0 12
96170: PUSH
96171: LD_INT 2
96173: ARRAY
96174: PPUSH
96175: CALL_OW 298
96179: ST_TO_ADDR
// distance := 9999 ;
96180: LD_ADDR_VAR 0 10
96184: PUSH
96185: LD_INT 9999
96187: ST_TO_ADDR
// for i := 0 to 5 do
96188: LD_ADDR_VAR 0 6
96192: PUSH
96193: DOUBLE
96194: LD_INT 0
96196: DEC
96197: ST_TO_ADDR
96198: LD_INT 5
96200: PUSH
96201: FOR_TO
96202: IFFALSE 96345
// begin _x := ShiftX ( x1 , i , centerDist ) ;
96204: LD_ADDR_VAR 0 7
96208: PUSH
96209: LD_VAR 0 1
96213: PPUSH
96214: LD_VAR 0 6
96218: PPUSH
96219: LD_VAR 0 11
96223: PPUSH
96224: CALL_OW 272
96228: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
96229: LD_ADDR_VAR 0 8
96233: PUSH
96234: LD_VAR 0 2
96238: PPUSH
96239: LD_VAR 0 6
96243: PPUSH
96244: LD_VAR 0 11
96248: PPUSH
96249: CALL_OW 273
96253: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
96254: LD_VAR 0 7
96258: PPUSH
96259: LD_VAR 0 8
96263: PPUSH
96264: CALL_OW 488
96268: NOT
96269: IFFALSE 96273
// continue ;
96271: GO 96201
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
96273: LD_ADDR_VAR 0 9
96277: PUSH
96278: LD_VAR 0 12
96282: PUSH
96283: LD_INT 1
96285: ARRAY
96286: PPUSH
96287: LD_VAR 0 12
96291: PUSH
96292: LD_INT 2
96294: ARRAY
96295: PPUSH
96296: LD_VAR 0 7
96300: PPUSH
96301: LD_VAR 0 8
96305: PPUSH
96306: CALL_OW 298
96310: ST_TO_ADDR
// if tmp < distance then
96311: LD_VAR 0 9
96315: PUSH
96316: LD_VAR 0 10
96320: LESS
96321: IFFALSE 96343
// begin result := i ;
96323: LD_ADDR_VAR 0 5
96327: PUSH
96328: LD_VAR 0 6
96332: ST_TO_ADDR
// distance := tmp ;
96333: LD_ADDR_VAR 0 10
96337: PUSH
96338: LD_VAR 0 9
96342: ST_TO_ADDR
// end ; end ;
96343: GO 96201
96345: POP
96346: POP
// end ;
96347: LD_VAR 0 5
96351: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
96352: LD_INT 0
96354: PPUSH
96355: PPUSH
// if not driver or not IsInUnit ( driver ) then
96356: LD_VAR 0 1
96360: NOT
96361: IFTRUE 96375
96363: PUSH
96364: LD_VAR 0 1
96368: PPUSH
96369: CALL_OW 310
96373: NOT
96374: OR
96375: IFFALSE 96379
// exit ;
96377: GO 96469
// vehicle := IsInUnit ( driver ) ;
96379: LD_ADDR_VAR 0 3
96383: PUSH
96384: LD_VAR 0 1
96388: PPUSH
96389: CALL_OW 310
96393: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
96394: LD_VAR 0 1
96398: PPUSH
96399: LD_STRING \
96401: PUSH
96402: LD_INT 0
96404: PUSH
96405: LD_INT 0
96407: PUSH
96408: LD_INT 0
96410: PUSH
96411: LD_INT 0
96413: PUSH
96414: LD_INT 0
96416: PUSH
96417: LD_INT 0
96419: PUSH
96420: EMPTY
96421: LIST
96422: LIST
96423: LIST
96424: LIST
96425: LIST
96426: LIST
96427: LIST
96428: PUSH
96429: LD_STRING E
96431: PUSH
96432: LD_INT 0
96434: PUSH
96435: LD_INT 0
96437: PUSH
96438: LD_VAR 0 3
96442: PUSH
96443: LD_INT 0
96445: PUSH
96446: LD_INT 0
96448: PUSH
96449: LD_INT 0
96451: PUSH
96452: EMPTY
96453: LIST
96454: LIST
96455: LIST
96456: LIST
96457: LIST
96458: LIST
96459: LIST
96460: PUSH
96461: EMPTY
96462: LIST
96463: LIST
96464: PPUSH
96465: CALL_OW 446
// end ;
96469: LD_VAR 0 2
96473: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
96474: LD_INT 0
96476: PPUSH
96477: PPUSH
// if not driver or not IsInUnit ( driver ) then
96478: LD_VAR 0 1
96482: NOT
96483: IFTRUE 96497
96485: PUSH
96486: LD_VAR 0 1
96490: PPUSH
96491: CALL_OW 310
96495: NOT
96496: OR
96497: IFFALSE 96501
// exit ;
96499: GO 96591
// vehicle := IsInUnit ( driver ) ;
96501: LD_ADDR_VAR 0 3
96505: PUSH
96506: LD_VAR 0 1
96510: PPUSH
96511: CALL_OW 310
96515: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
96516: LD_VAR 0 1
96520: PPUSH
96521: LD_STRING \
96523: PUSH
96524: LD_INT 0
96526: PUSH
96527: LD_INT 0
96529: PUSH
96530: LD_INT 0
96532: PUSH
96533: LD_INT 0
96535: PUSH
96536: LD_INT 0
96538: PUSH
96539: LD_INT 0
96541: PUSH
96542: EMPTY
96543: LIST
96544: LIST
96545: LIST
96546: LIST
96547: LIST
96548: LIST
96549: LIST
96550: PUSH
96551: LD_STRING E
96553: PUSH
96554: LD_INT 0
96556: PUSH
96557: LD_INT 0
96559: PUSH
96560: LD_VAR 0 3
96564: PUSH
96565: LD_INT 0
96567: PUSH
96568: LD_INT 0
96570: PUSH
96571: LD_INT 0
96573: PUSH
96574: EMPTY
96575: LIST
96576: LIST
96577: LIST
96578: LIST
96579: LIST
96580: LIST
96581: LIST
96582: PUSH
96583: EMPTY
96584: LIST
96585: LIST
96586: PPUSH
96587: CALL_OW 447
// end ;
96591: LD_VAR 0 2
96595: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
96596: LD_INT 0
96598: PPUSH
96599: PPUSH
96600: PPUSH
// tmp := [ ] ;
96601: LD_ADDR_VAR 0 5
96605: PUSH
96606: EMPTY
96607: ST_TO_ADDR
// for i in units do
96608: LD_ADDR_VAR 0 4
96612: PUSH
96613: LD_VAR 0 1
96617: PUSH
96618: FOR_IN
96619: IFFALSE 96657
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
96621: LD_ADDR_VAR 0 5
96625: PUSH
96626: LD_VAR 0 5
96630: PPUSH
96631: LD_VAR 0 5
96635: PUSH
96636: LD_INT 1
96638: PLUS
96639: PPUSH
96640: LD_VAR 0 4
96644: PPUSH
96645: CALL_OW 256
96649: PPUSH
96650: CALL_OW 2
96654: ST_TO_ADDR
96655: GO 96618
96657: POP
96658: POP
// if not tmp then
96659: LD_VAR 0 5
96663: NOT
96664: IFFALSE 96668
// exit ;
96666: GO 96716
// if asc then
96668: LD_VAR 0 2
96672: IFFALSE 96696
// result := SortListByListAsc ( units , tmp ) else
96674: LD_ADDR_VAR 0 3
96678: PUSH
96679: LD_VAR 0 1
96683: PPUSH
96684: LD_VAR 0 5
96688: PPUSH
96689: CALL_OW 76
96693: ST_TO_ADDR
96694: GO 96716
// result := SortListByListDesc ( units , tmp ) ;
96696: LD_ADDR_VAR 0 3
96700: PUSH
96701: LD_VAR 0 1
96705: PPUSH
96706: LD_VAR 0 5
96710: PPUSH
96711: CALL_OW 77
96715: ST_TO_ADDR
// end ;
96716: LD_VAR 0 3
96720: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
96721: LD_INT 0
96723: PPUSH
96724: PPUSH
// task := GetTaskList ( mech ) ;
96725: LD_ADDR_VAR 0 4
96729: PUSH
96730: LD_VAR 0 1
96734: PPUSH
96735: CALL_OW 437
96739: ST_TO_ADDR
// if not task then
96740: LD_VAR 0 4
96744: NOT
96745: IFFALSE 96749
// exit ;
96747: GO 96793
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
96749: LD_ADDR_VAR 0 3
96753: PUSH
96754: LD_VAR 0 4
96758: PUSH
96759: LD_INT 1
96761: ARRAY
96762: PUSH
96763: LD_INT 1
96765: ARRAY
96766: PUSH
96767: LD_STRING r
96769: EQUAL
96770: IFFALSE 96792
96772: PUSH
96773: LD_VAR 0 4
96777: PUSH
96778: LD_INT 1
96780: ARRAY
96781: PUSH
96782: LD_INT 4
96784: ARRAY
96785: PUSH
96786: LD_VAR 0 2
96790: EQUAL
96791: AND
96792: ST_TO_ADDR
// end ;
96793: LD_VAR 0 3
96797: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
96798: LD_INT 0
96800: PPUSH
// SetDir ( unit , d ) ;
96801: LD_VAR 0 1
96805: PPUSH
96806: LD_VAR 0 4
96810: PPUSH
96811: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
96815: LD_ADDR_VAR 0 6
96819: PUSH
96820: LD_VAR 0 1
96824: PPUSH
96825: LD_VAR 0 2
96829: PPUSH
96830: LD_VAR 0 3
96834: PPUSH
96835: LD_VAR 0 5
96839: PPUSH
96840: CALL_OW 48
96844: ST_TO_ADDR
// end ;
96845: LD_VAR 0 6
96849: RET
// export function ToNaturalNumber ( number ) ; begin
96850: LD_INT 0
96852: PPUSH
// result := number div 1 ;
96853: LD_ADDR_VAR 0 2
96857: PUSH
96858: LD_VAR 0 1
96862: PUSH
96863: LD_INT 1
96865: DIV
96866: ST_TO_ADDR
// if number < 0 then
96867: LD_VAR 0 1
96871: PUSH
96872: LD_INT 0
96874: LESS
96875: IFFALSE 96885
// result := 0 ;
96877: LD_ADDR_VAR 0 2
96881: PUSH
96882: LD_INT 0
96884: ST_TO_ADDR
// end ;
96885: LD_VAR 0 2
96889: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
96890: LD_INT 0
96892: PPUSH
96893: PPUSH
96894: PPUSH
// if not buildings then
96895: LD_VAR 0 1
96899: NOT
96900: IFFALSE 96904
// exit ;
96902: GO 97019
// tmp := [ ] ;
96904: LD_ADDR_VAR 0 5
96908: PUSH
96909: EMPTY
96910: ST_TO_ADDR
// for b in buildings do
96911: LD_ADDR_VAR 0 4
96915: PUSH
96916: LD_VAR 0 1
96920: PUSH
96921: FOR_IN
96922: IFFALSE 96960
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
96924: LD_ADDR_VAR 0 5
96928: PUSH
96929: LD_VAR 0 5
96933: PPUSH
96934: LD_VAR 0 5
96938: PUSH
96939: LD_INT 1
96941: PLUS
96942: PPUSH
96943: LD_VAR 0 4
96947: PPUSH
96948: CALL_OW 266
96952: PPUSH
96953: CALL_OW 1
96957: ST_TO_ADDR
96958: GO 96921
96960: POP
96961: POP
// if not tmp then
96962: LD_VAR 0 5
96966: NOT
96967: IFFALSE 96971
// exit ;
96969: GO 97019
// if asc then
96971: LD_VAR 0 2
96975: IFFALSE 96999
// result := SortListByListAsc ( buildings , tmp ) else
96977: LD_ADDR_VAR 0 3
96981: PUSH
96982: LD_VAR 0 1
96986: PPUSH
96987: LD_VAR 0 5
96991: PPUSH
96992: CALL_OW 76
96996: ST_TO_ADDR
96997: GO 97019
// result := SortListByListDesc ( buildings , tmp ) ;
96999: LD_ADDR_VAR 0 3
97003: PUSH
97004: LD_VAR 0 1
97008: PPUSH
97009: LD_VAR 0 5
97013: PPUSH
97014: CALL_OW 77
97018: ST_TO_ADDR
// end ;
97019: LD_VAR 0 3
97023: RET
// export function SortByClass ( units , class ) ; var un ; begin
97024: LD_INT 0
97026: PPUSH
97027: PPUSH
// if not units or not class then
97028: LD_VAR 0 1
97032: NOT
97033: IFTRUE 97042
97035: PUSH
97036: LD_VAR 0 2
97040: NOT
97041: OR
97042: IFFALSE 97046
// exit ;
97044: GO 97141
// result := [ ] ;
97046: LD_ADDR_VAR 0 3
97050: PUSH
97051: EMPTY
97052: ST_TO_ADDR
// for un in units do
97053: LD_ADDR_VAR 0 4
97057: PUSH
97058: LD_VAR 0 1
97062: PUSH
97063: FOR_IN
97064: IFFALSE 97139
// if GetClass ( un ) = class then
97066: LD_VAR 0 4
97070: PPUSH
97071: CALL_OW 257
97075: PUSH
97076: LD_VAR 0 2
97080: EQUAL
97081: IFFALSE 97108
// result := Insert ( result , 1 , un ) else
97083: LD_ADDR_VAR 0 3
97087: PUSH
97088: LD_VAR 0 3
97092: PPUSH
97093: LD_INT 1
97095: PPUSH
97096: LD_VAR 0 4
97100: PPUSH
97101: CALL_OW 2
97105: ST_TO_ADDR
97106: GO 97137
// result := Replace ( result , result + 1 , un ) ;
97108: LD_ADDR_VAR 0 3
97112: PUSH
97113: LD_VAR 0 3
97117: PPUSH
97118: LD_VAR 0 3
97122: PUSH
97123: LD_INT 1
97125: PLUS
97126: PPUSH
97127: LD_VAR 0 4
97131: PPUSH
97132: CALL_OW 1
97136: ST_TO_ADDR
97137: GO 97063
97139: POP
97140: POP
// end ;
97141: LD_VAR 0 3
97145: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
97146: LD_INT 0
97148: PPUSH
97149: PPUSH
97150: PPUSH
97151: PPUSH
97152: PPUSH
97153: PPUSH
97154: PPUSH
// result := [ ] ;
97155: LD_ADDR_VAR 0 4
97159: PUSH
97160: EMPTY
97161: ST_TO_ADDR
// if x - r < 0 then
97162: LD_VAR 0 1
97166: PUSH
97167: LD_VAR 0 3
97171: MINUS
97172: PUSH
97173: LD_INT 0
97175: LESS
97176: IFFALSE 97188
// min_x := 0 else
97178: LD_ADDR_VAR 0 8
97182: PUSH
97183: LD_INT 0
97185: ST_TO_ADDR
97186: GO 97204
// min_x := x - r ;
97188: LD_ADDR_VAR 0 8
97192: PUSH
97193: LD_VAR 0 1
97197: PUSH
97198: LD_VAR 0 3
97202: MINUS
97203: ST_TO_ADDR
// if y - r < 0 then
97204: LD_VAR 0 2
97208: PUSH
97209: LD_VAR 0 3
97213: MINUS
97214: PUSH
97215: LD_INT 0
97217: LESS
97218: IFFALSE 97230
// min_y := 0 else
97220: LD_ADDR_VAR 0 7
97224: PUSH
97225: LD_INT 0
97227: ST_TO_ADDR
97228: GO 97246
// min_y := y - r ;
97230: LD_ADDR_VAR 0 7
97234: PUSH
97235: LD_VAR 0 2
97239: PUSH
97240: LD_VAR 0 3
97244: MINUS
97245: ST_TO_ADDR
// max_x := x + r ;
97246: LD_ADDR_VAR 0 9
97250: PUSH
97251: LD_VAR 0 1
97255: PUSH
97256: LD_VAR 0 3
97260: PLUS
97261: ST_TO_ADDR
// max_y := y + r ;
97262: LD_ADDR_VAR 0 10
97266: PUSH
97267: LD_VAR 0 2
97271: PUSH
97272: LD_VAR 0 3
97276: PLUS
97277: ST_TO_ADDR
// for _x = min_x to max_x do
97278: LD_ADDR_VAR 0 5
97282: PUSH
97283: DOUBLE
97284: LD_VAR 0 8
97288: DEC
97289: ST_TO_ADDR
97290: LD_VAR 0 9
97294: PUSH
97295: FOR_TO
97296: IFFALSE 97397
// for _y = min_y to max_y do
97298: LD_ADDR_VAR 0 6
97302: PUSH
97303: DOUBLE
97304: LD_VAR 0 7
97308: DEC
97309: ST_TO_ADDR
97310: LD_VAR 0 10
97314: PUSH
97315: FOR_TO
97316: IFFALSE 97393
// begin if not ValidHex ( _x , _y ) then
97318: LD_VAR 0 5
97322: PPUSH
97323: LD_VAR 0 6
97327: PPUSH
97328: CALL_OW 488
97332: NOT
97333: IFFALSE 97337
// continue ;
97335: GO 97315
// if GetResourceTypeXY ( _x , _y ) then
97337: LD_VAR 0 5
97341: PPUSH
97342: LD_VAR 0 6
97346: PPUSH
97347: CALL_OW 283
97351: IFFALSE 97391
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
97353: LD_ADDR_VAR 0 4
97357: PUSH
97358: LD_VAR 0 4
97362: PPUSH
97363: LD_VAR 0 4
97367: PUSH
97368: LD_INT 1
97370: PLUS
97371: PPUSH
97372: LD_VAR 0 5
97376: PUSH
97377: LD_VAR 0 6
97381: PUSH
97382: EMPTY
97383: LIST
97384: LIST
97385: PPUSH
97386: CALL_OW 1
97390: ST_TO_ADDR
// end ;
97391: GO 97315
97393: POP
97394: POP
97395: GO 97295
97397: POP
97398: POP
// end ;
97399: LD_VAR 0 4
97403: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
97404: LD_INT 0
97406: PPUSH
97407: PPUSH
97408: PPUSH
97409: PPUSH
97410: PPUSH
97411: PPUSH
97412: PPUSH
97413: PPUSH
// if not units then
97414: LD_VAR 0 1
97418: NOT
97419: IFFALSE 97423
// exit ;
97421: GO 97955
// result := UnitFilter ( units , [ f_ok ] ) ;
97423: LD_ADDR_VAR 0 3
97427: PUSH
97428: LD_VAR 0 1
97432: PPUSH
97433: LD_INT 50
97435: PUSH
97436: EMPTY
97437: LIST
97438: PPUSH
97439: CALL_OW 72
97443: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
97444: LD_ADDR_VAR 0 8
97448: PUSH
97449: LD_VAR 0 1
97453: PUSH
97454: LD_INT 1
97456: ARRAY
97457: PPUSH
97458: CALL_OW 255
97462: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
97463: LD_ADDR_VAR 0 10
97467: PUSH
97468: LD_INT 29
97470: PUSH
97471: LD_INT 91
97473: PUSH
97474: LD_INT 49
97476: PUSH
97477: EMPTY
97478: LIST
97479: LIST
97480: LIST
97481: ST_TO_ADDR
// if not result then
97482: LD_VAR 0 3
97486: NOT
97487: IFFALSE 97491
// exit ;
97489: GO 97955
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
97491: LD_ADDR_VAR 0 5
97495: PUSH
97496: LD_INT 81
97498: PUSH
97499: LD_VAR 0 8
97503: PUSH
97504: EMPTY
97505: LIST
97506: LIST
97507: PPUSH
97508: CALL_OW 69
97512: ST_TO_ADDR
// for i in result do
97513: LD_ADDR_VAR 0 4
97517: PUSH
97518: LD_VAR 0 3
97522: PUSH
97523: FOR_IN
97524: IFFALSE 97953
// begin tag := GetTag ( i ) + 1 ;
97526: LD_ADDR_VAR 0 9
97530: PUSH
97531: LD_VAR 0 4
97535: PPUSH
97536: CALL_OW 110
97540: PUSH
97541: LD_INT 1
97543: PLUS
97544: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
97545: LD_ADDR_VAR 0 7
97549: PUSH
97550: LD_VAR 0 4
97554: PPUSH
97555: CALL_OW 250
97559: PPUSH
97560: LD_VAR 0 4
97564: PPUSH
97565: CALL_OW 251
97569: PPUSH
97570: LD_INT 4
97572: PPUSH
97573: CALL 97146 0 3
97577: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
97578: LD_VAR 0 4
97582: PPUSH
97583: CALL_OW 247
97587: PUSH
97588: LD_INT 2
97590: EQUAL
97591: IFFALSE 97603
97593: PUSH
97594: LD_VAR 0 7
97598: PUSH
97599: LD_INT 2
97601: GREATER
97602: AND
97603: IFFALSE 97623
97605: PUSH
97606: LD_VAR 0 4
97610: PPUSH
97611: CALL_OW 264
97615: PUSH
97616: LD_VAR 0 10
97620: IN
97621: NOT
97622: AND
97623: IFFALSE 97662
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
97625: LD_VAR 0 4
97629: PPUSH
97630: LD_VAR 0 7
97634: PUSH
97635: LD_INT 1
97637: ARRAY
97638: PUSH
97639: LD_INT 1
97641: ARRAY
97642: PPUSH
97643: LD_VAR 0 7
97647: PUSH
97648: LD_INT 1
97650: ARRAY
97651: PUSH
97652: LD_INT 2
97654: ARRAY
97655: PPUSH
97656: CALL_OW 116
97660: GO 97951
// if path > tag then
97662: LD_VAR 0 2
97666: PUSH
97667: LD_VAR 0 9
97671: GREATER
97672: IFFALSE 97880
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
97674: LD_ADDR_VAR 0 6
97678: PUSH
97679: LD_VAR 0 5
97683: PPUSH
97684: LD_INT 91
97686: PUSH
97687: LD_VAR 0 4
97691: PUSH
97692: LD_INT 8
97694: PUSH
97695: EMPTY
97696: LIST
97697: LIST
97698: LIST
97699: PPUSH
97700: CALL_OW 72
97704: ST_TO_ADDR
// if nearEnemy then
97705: LD_VAR 0 6
97709: IFFALSE 97778
// begin if GetWeapon ( i ) = ru_time_lapser then
97711: LD_VAR 0 4
97715: PPUSH
97716: CALL_OW 264
97720: PUSH
97721: LD_INT 49
97723: EQUAL
97724: IFFALSE 97752
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
97726: LD_VAR 0 4
97730: PPUSH
97731: LD_VAR 0 6
97735: PPUSH
97736: LD_VAR 0 4
97740: PPUSH
97741: CALL_OW 74
97745: PPUSH
97746: CALL_OW 112
97750: GO 97776
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
97752: LD_VAR 0 4
97756: PPUSH
97757: LD_VAR 0 6
97761: PPUSH
97762: LD_VAR 0 4
97766: PPUSH
97767: CALL_OW 74
97771: PPUSH
97772: CALL 99036 0 2
// end else
97776: GO 97878
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
97778: LD_VAR 0 4
97782: PPUSH
97783: LD_VAR 0 2
97787: PUSH
97788: LD_VAR 0 9
97792: ARRAY
97793: PUSH
97794: LD_INT 1
97796: ARRAY
97797: PPUSH
97798: LD_VAR 0 2
97802: PUSH
97803: LD_VAR 0 9
97807: ARRAY
97808: PUSH
97809: LD_INT 2
97811: ARRAY
97812: PPUSH
97813: CALL_OW 297
97817: PUSH
97818: LD_INT 6
97820: GREATER
97821: IFFALSE 97864
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
97823: LD_VAR 0 4
97827: PPUSH
97828: LD_VAR 0 2
97832: PUSH
97833: LD_VAR 0 9
97837: ARRAY
97838: PUSH
97839: LD_INT 1
97841: ARRAY
97842: PPUSH
97843: LD_VAR 0 2
97847: PUSH
97848: LD_VAR 0 9
97852: ARRAY
97853: PUSH
97854: LD_INT 2
97856: ARRAY
97857: PPUSH
97858: CALL_OW 114
97862: GO 97878
// SetTag ( i , tag ) ;
97864: LD_VAR 0 4
97868: PPUSH
97869: LD_VAR 0 9
97873: PPUSH
97874: CALL_OW 109
// end else
97878: GO 97951
// if enemy then
97880: LD_VAR 0 5
97884: IFFALSE 97951
// begin if GetWeapon ( i ) = ru_time_lapser then
97886: LD_VAR 0 4
97890: PPUSH
97891: CALL_OW 264
97895: PUSH
97896: LD_INT 49
97898: EQUAL
97899: IFFALSE 97927
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
97901: LD_VAR 0 4
97905: PPUSH
97906: LD_VAR 0 5
97910: PPUSH
97911: LD_VAR 0 4
97915: PPUSH
97916: CALL_OW 74
97920: PPUSH
97921: CALL_OW 112
97925: GO 97951
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
97927: LD_VAR 0 4
97931: PPUSH
97932: LD_VAR 0 5
97936: PPUSH
97937: LD_VAR 0 4
97941: PPUSH
97942: CALL_OW 74
97946: PPUSH
97947: CALL 99036 0 2
// end ; end ;
97951: GO 97523
97953: POP
97954: POP
// end ;
97955: LD_VAR 0 3
97959: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
97960: LD_INT 0
97962: PPUSH
97963: PPUSH
97964: PPUSH
// if not unit or IsInUnit ( unit ) then
97965: LD_VAR 0 1
97969: NOT
97970: IFTRUE 97983
97972: PUSH
97973: LD_VAR 0 1
97977: PPUSH
97978: CALL_OW 310
97982: OR
97983: IFFALSE 97987
// exit ;
97985: GO 98078
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
97987: LD_ADDR_VAR 0 4
97991: PUSH
97992: LD_VAR 0 1
97996: PPUSH
97997: CALL_OW 250
98001: PPUSH
98002: LD_VAR 0 2
98006: PPUSH
98007: LD_INT 1
98009: PPUSH
98010: CALL_OW 272
98014: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
98015: LD_ADDR_VAR 0 5
98019: PUSH
98020: LD_VAR 0 1
98024: PPUSH
98025: CALL_OW 251
98029: PPUSH
98030: LD_VAR 0 2
98034: PPUSH
98035: LD_INT 1
98037: PPUSH
98038: CALL_OW 273
98042: ST_TO_ADDR
// if ValidHex ( x , y ) then
98043: LD_VAR 0 4
98047: PPUSH
98048: LD_VAR 0 5
98052: PPUSH
98053: CALL_OW 488
98057: IFFALSE 98078
// ComTurnXY ( unit , x , y ) ;
98059: LD_VAR 0 1
98063: PPUSH
98064: LD_VAR 0 4
98068: PPUSH
98069: LD_VAR 0 5
98073: PPUSH
98074: CALL_OW 118
// end ;
98078: LD_VAR 0 3
98082: RET
// export function SeeUnits ( side , units ) ; var i ; begin
98083: LD_INT 0
98085: PPUSH
98086: PPUSH
// result := false ;
98087: LD_ADDR_VAR 0 3
98091: PUSH
98092: LD_INT 0
98094: ST_TO_ADDR
// if not units then
98095: LD_VAR 0 2
98099: NOT
98100: IFFALSE 98104
// exit ;
98102: GO 98149
// for i in units do
98104: LD_ADDR_VAR 0 4
98108: PUSH
98109: LD_VAR 0 2
98113: PUSH
98114: FOR_IN
98115: IFFALSE 98147
// if See ( side , i ) then
98117: LD_VAR 0 1
98121: PPUSH
98122: LD_VAR 0 4
98126: PPUSH
98127: CALL_OW 292
98131: IFFALSE 98145
// begin result := true ;
98133: LD_ADDR_VAR 0 3
98137: PUSH
98138: LD_INT 1
98140: ST_TO_ADDR
// exit ;
98141: POP
98142: POP
98143: GO 98149
// end ;
98145: GO 98114
98147: POP
98148: POP
// end ;
98149: LD_VAR 0 3
98153: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
98154: LD_INT 0
98156: PPUSH
98157: PPUSH
98158: PPUSH
98159: PPUSH
// if not unit or not points then
98160: LD_VAR 0 1
98164: NOT
98165: IFTRUE 98174
98167: PUSH
98168: LD_VAR 0 2
98172: NOT
98173: OR
98174: IFFALSE 98178
// exit ;
98176: GO 98268
// dist := 99999 ;
98178: LD_ADDR_VAR 0 5
98182: PUSH
98183: LD_INT 99999
98185: ST_TO_ADDR
// for i in points do
98186: LD_ADDR_VAR 0 4
98190: PUSH
98191: LD_VAR 0 2
98195: PUSH
98196: FOR_IN
98197: IFFALSE 98266
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
98199: LD_ADDR_VAR 0 6
98203: PUSH
98204: LD_VAR 0 1
98208: PPUSH
98209: LD_VAR 0 4
98213: PUSH
98214: LD_INT 1
98216: ARRAY
98217: PPUSH
98218: LD_VAR 0 4
98222: PUSH
98223: LD_INT 2
98225: ARRAY
98226: PPUSH
98227: CALL_OW 297
98231: ST_TO_ADDR
// if tmpDist < dist then
98232: LD_VAR 0 6
98236: PUSH
98237: LD_VAR 0 5
98241: LESS
98242: IFFALSE 98264
// begin result := i ;
98244: LD_ADDR_VAR 0 3
98248: PUSH
98249: LD_VAR 0 4
98253: ST_TO_ADDR
// dist := tmpDist ;
98254: LD_ADDR_VAR 0 5
98258: PUSH
98259: LD_VAR 0 6
98263: ST_TO_ADDR
// end ; end ;
98264: GO 98196
98266: POP
98267: POP
// end ;
98268: LD_VAR 0 3
98272: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
98273: LD_INT 0
98275: PPUSH
// uc_side := side ;
98276: LD_ADDR_OWVAR 20
98280: PUSH
98281: LD_VAR 0 1
98285: ST_TO_ADDR
// uc_nation := 3 ;
98286: LD_ADDR_OWVAR 21
98290: PUSH
98291: LD_INT 3
98293: ST_TO_ADDR
// vc_chassis := 25 ;
98294: LD_ADDR_OWVAR 37
98298: PUSH
98299: LD_INT 25
98301: ST_TO_ADDR
// vc_engine := engine_siberite ;
98302: LD_ADDR_OWVAR 39
98306: PUSH
98307: LD_INT 3
98309: ST_TO_ADDR
// vc_control := control_computer ;
98310: LD_ADDR_OWVAR 38
98314: PUSH
98315: LD_INT 3
98317: ST_TO_ADDR
// vc_weapon := 59 ;
98318: LD_ADDR_OWVAR 40
98322: PUSH
98323: LD_INT 59
98325: ST_TO_ADDR
// result := CreateVehicle ;
98326: LD_ADDR_VAR 0 5
98330: PUSH
98331: CALL_OW 45
98335: ST_TO_ADDR
// SetDir ( result , d ) ;
98336: LD_VAR 0 5
98340: PPUSH
98341: LD_VAR 0 4
98345: PPUSH
98346: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
98350: LD_VAR 0 5
98354: PPUSH
98355: LD_VAR 0 2
98359: PPUSH
98360: LD_VAR 0 3
98364: PPUSH
98365: LD_INT 0
98367: PPUSH
98368: CALL_OW 48
// end ;
98372: LD_VAR 0 5
98376: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
98377: LD_INT 0
98379: PPUSH
98380: PPUSH
98381: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
98382: LD_ADDR_VAR 0 2
98386: PUSH
98387: LD_INT 0
98389: PUSH
98390: LD_INT 0
98392: PUSH
98393: LD_INT 0
98395: PUSH
98396: LD_INT 0
98398: PUSH
98399: EMPTY
98400: LIST
98401: LIST
98402: LIST
98403: LIST
98404: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
98405: LD_VAR 0 1
98409: NOT
98410: IFTRUE 98443
98412: PUSH
98413: LD_VAR 0 1
98417: PPUSH
98418: CALL_OW 264
98422: PUSH
98423: LD_INT 12
98425: PUSH
98426: LD_INT 51
98428: PUSH
98429: LD_INT 32
98431: PUSH
98432: LD_INT 89
98434: PUSH
98435: EMPTY
98436: LIST
98437: LIST
98438: LIST
98439: LIST
98440: IN
98441: NOT
98442: OR
98443: IFFALSE 98447
// exit ;
98445: GO 98545
// for i := 1 to 3 do
98447: LD_ADDR_VAR 0 3
98451: PUSH
98452: DOUBLE
98453: LD_INT 1
98455: DEC
98456: ST_TO_ADDR
98457: LD_INT 3
98459: PUSH
98460: FOR_TO
98461: IFFALSE 98543
// begin tmp := GetCargo ( cargo , i ) ;
98463: LD_ADDR_VAR 0 4
98467: PUSH
98468: LD_VAR 0 1
98472: PPUSH
98473: LD_VAR 0 3
98477: PPUSH
98478: CALL_OW 289
98482: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
98483: LD_ADDR_VAR 0 2
98487: PUSH
98488: LD_VAR 0 2
98492: PPUSH
98493: LD_VAR 0 3
98497: PPUSH
98498: LD_VAR 0 4
98502: PPUSH
98503: CALL_OW 1
98507: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
98508: LD_ADDR_VAR 0 2
98512: PUSH
98513: LD_VAR 0 2
98517: PPUSH
98518: LD_INT 4
98520: PPUSH
98521: LD_VAR 0 2
98525: PUSH
98526: LD_INT 4
98528: ARRAY
98529: PUSH
98530: LD_VAR 0 4
98534: PLUS
98535: PPUSH
98536: CALL_OW 1
98540: ST_TO_ADDR
// end ;
98541: GO 98460
98543: POP
98544: POP
// end ;
98545: LD_VAR 0 2
98549: RET
// export function Length ( array ) ; begin
98550: LD_INT 0
98552: PPUSH
// result := array + 0 ;
98553: LD_ADDR_VAR 0 2
98557: PUSH
98558: LD_VAR 0 1
98562: PUSH
98563: LD_INT 0
98565: PLUS
98566: ST_TO_ADDR
// end ;
98567: LD_VAR 0 2
98571: RET
// export function PrepareArray ( array ) ; begin
98572: LD_INT 0
98574: PPUSH
// result := array diff 0 ;
98575: LD_ADDR_VAR 0 2
98579: PUSH
98580: LD_VAR 0 1
98584: PUSH
98585: LD_INT 0
98587: DIFF
98588: ST_TO_ADDR
// if not result [ 1 ] then
98589: LD_VAR 0 2
98593: PUSH
98594: LD_INT 1
98596: ARRAY
98597: NOT
98598: IFFALSE 98618
// result := Delete ( result , 1 ) ;
98600: LD_ADDR_VAR 0 2
98604: PUSH
98605: LD_VAR 0 2
98609: PPUSH
98610: LD_INT 1
98612: PPUSH
98613: CALL_OW 3
98617: ST_TO_ADDR
// end ;
98618: LD_VAR 0 2
98622: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
98623: LD_INT 0
98625: PPUSH
98626: PPUSH
98627: PPUSH
98628: PPUSH
// sibRocketRange := 25 ;
98629: LD_ADDR_VAR 0 6
98633: PUSH
98634: LD_INT 25
98636: ST_TO_ADDR
// result := false ;
98637: LD_ADDR_VAR 0 4
98641: PUSH
98642: LD_INT 0
98644: ST_TO_ADDR
// for i := 0 to 5 do
98645: LD_ADDR_VAR 0 5
98649: PUSH
98650: DOUBLE
98651: LD_INT 0
98653: DEC
98654: ST_TO_ADDR
98655: LD_INT 5
98657: PUSH
98658: FOR_TO
98659: IFFALSE 98726
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
98661: LD_VAR 0 1
98665: PPUSH
98666: LD_VAR 0 5
98670: PPUSH
98671: LD_VAR 0 6
98675: PPUSH
98676: CALL_OW 272
98680: PPUSH
98681: LD_VAR 0 2
98685: PPUSH
98686: LD_VAR 0 5
98690: PPUSH
98691: LD_VAR 0 6
98695: PPUSH
98696: CALL_OW 273
98700: PPUSH
98701: LD_VAR 0 3
98705: PPUSH
98706: CALL_OW 309
98710: IFFALSE 98724
// begin result := true ;
98712: LD_ADDR_VAR 0 4
98716: PUSH
98717: LD_INT 1
98719: ST_TO_ADDR
// exit ;
98720: POP
98721: POP
98722: GO 98728
// end ;
98724: GO 98658
98726: POP
98727: POP
// end ;
98728: LD_VAR 0 4
98732: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
98733: LD_INT 0
98735: PPUSH
98736: PPUSH
98737: PPUSH
// if btype = b_depot then
98738: LD_VAR 0 2
98742: PUSH
98743: LD_INT 0
98745: EQUAL
98746: IFFALSE 98758
// begin result := true ;
98748: LD_ADDR_VAR 0 3
98752: PUSH
98753: LD_INT 1
98755: ST_TO_ADDR
// exit ;
98756: GO 98878
// end ; pom := GetBase ( depot ) ;
98758: LD_ADDR_VAR 0 4
98762: PUSH
98763: LD_VAR 0 1
98767: PPUSH
98768: CALL_OW 274
98772: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
98773: LD_ADDR_VAR 0 5
98777: PUSH
98778: LD_VAR 0 2
98782: PPUSH
98783: LD_VAR 0 1
98787: PPUSH
98788: CALL_OW 248
98792: PPUSH
98793: CALL_OW 450
98797: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
98798: LD_ADDR_VAR 0 3
98802: PUSH
98803: LD_VAR 0 4
98807: PPUSH
98808: LD_INT 1
98810: PPUSH
98811: CALL_OW 275
98815: PUSH
98816: LD_VAR 0 5
98820: PUSH
98821: LD_INT 1
98823: ARRAY
98824: GREATEREQUAL
98825: IFFALSE 98851
98827: PUSH
98828: LD_VAR 0 4
98832: PPUSH
98833: LD_INT 2
98835: PPUSH
98836: CALL_OW 275
98840: PUSH
98841: LD_VAR 0 5
98845: PUSH
98846: LD_INT 2
98848: ARRAY
98849: GREATEREQUAL
98850: AND
98851: IFFALSE 98877
98853: PUSH
98854: LD_VAR 0 4
98858: PPUSH
98859: LD_INT 3
98861: PPUSH
98862: CALL_OW 275
98866: PUSH
98867: LD_VAR 0 5
98871: PUSH
98872: LD_INT 3
98874: ARRAY
98875: GREATEREQUAL
98876: AND
98877: ST_TO_ADDR
// end ;
98878: LD_VAR 0 3
98882: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
98883: LD_INT 0
98885: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
98886: LD_VAR 0 1
98890: PPUSH
98891: LD_VAR 0 2
98895: PPUSH
98896: LD_INT 0
98898: PPUSH
98899: LD_INT 0
98901: PPUSH
98902: LD_INT 1
98904: PPUSH
98905: LD_INT 0
98907: PPUSH
98908: CALL_OW 587
// end ;
98912: LD_VAR 0 3
98916: RET
// export function CenterOnNow ( unit ) ; begin
98917: LD_INT 0
98919: PPUSH
// result := IsInUnit ( unit ) ;
98920: LD_ADDR_VAR 0 2
98924: PUSH
98925: LD_VAR 0 1
98929: PPUSH
98930: CALL_OW 310
98934: ST_TO_ADDR
// if not result then
98935: LD_VAR 0 2
98939: NOT
98940: IFFALSE 98952
// result := unit ;
98942: LD_ADDR_VAR 0 2
98946: PUSH
98947: LD_VAR 0 1
98951: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
98952: LD_VAR 0 1
98956: PPUSH
98957: CALL_OW 87
// end ;
98961: LD_VAR 0 2
98965: RET
// export function ComMoveHex ( unit , hex ) ; begin
98966: LD_INT 0
98968: PPUSH
// if not hex then
98969: LD_VAR 0 2
98973: NOT
98974: IFFALSE 98978
// exit ;
98976: GO 99031
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
98978: LD_VAR 0 2
98982: PUSH
98983: LD_INT 1
98985: ARRAY
98986: PPUSH
98987: LD_VAR 0 2
98991: PUSH
98992: LD_INT 2
98994: ARRAY
98995: PPUSH
98996: CALL_OW 428
99000: IFFALSE 99004
// exit ;
99002: GO 99031
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
99004: LD_VAR 0 1
99008: PPUSH
99009: LD_VAR 0 2
99013: PUSH
99014: LD_INT 1
99016: ARRAY
99017: PPUSH
99018: LD_VAR 0 2
99022: PUSH
99023: LD_INT 2
99025: ARRAY
99026: PPUSH
99027: CALL_OW 111
// end ;
99031: LD_VAR 0 3
99035: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
99036: LD_INT 0
99038: PPUSH
99039: PPUSH
99040: PPUSH
// if not unit or not enemy then
99041: LD_VAR 0 1
99045: NOT
99046: IFTRUE 99055
99048: PUSH
99049: LD_VAR 0 2
99053: NOT
99054: OR
99055: IFFALSE 99059
// exit ;
99057: GO 99185
// x := GetX ( enemy ) ;
99059: LD_ADDR_VAR 0 4
99063: PUSH
99064: LD_VAR 0 2
99068: PPUSH
99069: CALL_OW 250
99073: ST_TO_ADDR
// y := GetY ( enemy ) ;
99074: LD_ADDR_VAR 0 5
99078: PUSH
99079: LD_VAR 0 2
99083: PPUSH
99084: CALL_OW 251
99088: ST_TO_ADDR
// if ValidHex ( x , y ) then
99089: LD_VAR 0 4
99093: PPUSH
99094: LD_VAR 0 5
99098: PPUSH
99099: CALL_OW 488
99103: IFFALSE 99185
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
99105: LD_VAR 0 2
99109: PPUSH
99110: CALL_OW 247
99114: PUSH
99115: LD_INT 3
99117: PUSH
99118: LD_INT 2
99120: PUSH
99121: EMPTY
99122: LIST
99123: LIST
99124: IN
99125: IFTRUE 99148
99127: PUSH
99128: LD_VAR 0 1
99132: PPUSH
99133: CALL_OW 255
99137: PPUSH
99138: LD_VAR 0 2
99142: PPUSH
99143: CALL_OW 292
99147: OR
99148: IFFALSE 99166
// ComAttackUnit ( unit , enemy ) else
99150: LD_VAR 0 1
99154: PPUSH
99155: LD_VAR 0 2
99159: PPUSH
99160: CALL_OW 115
99164: GO 99185
// ComAgressiveMove ( unit , x , y ) ;
99166: LD_VAR 0 1
99170: PPUSH
99171: LD_VAR 0 4
99175: PPUSH
99176: LD_VAR 0 5
99180: PPUSH
99181: CALL_OW 114
// end ;
99185: LD_VAR 0 3
99189: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
99190: LD_INT 0
99192: PPUSH
99193: PPUSH
99194: PPUSH
// list := AreaToList ( area , 0 ) ;
99195: LD_ADDR_VAR 0 5
99199: PUSH
99200: LD_VAR 0 1
99204: PPUSH
99205: LD_INT 0
99207: PPUSH
99208: CALL_OW 517
99212: ST_TO_ADDR
// if not list then
99213: LD_VAR 0 5
99217: NOT
99218: IFFALSE 99222
// exit ;
99220: GO 99352
// if all then
99222: LD_VAR 0 2
99226: IFFALSE 99314
// begin for i := 1 to list [ 1 ] do
99228: LD_ADDR_VAR 0 4
99232: PUSH
99233: DOUBLE
99234: LD_INT 1
99236: DEC
99237: ST_TO_ADDR
99238: LD_VAR 0 5
99242: PUSH
99243: LD_INT 1
99245: ARRAY
99246: PUSH
99247: FOR_TO
99248: IFFALSE 99310
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
99250: LD_ADDR_VAR 0 3
99254: PUSH
99255: LD_VAR 0 3
99259: PPUSH
99260: LD_VAR 0 3
99264: PUSH
99265: LD_INT 1
99267: PLUS
99268: PPUSH
99269: LD_VAR 0 5
99273: PUSH
99274: LD_INT 1
99276: ARRAY
99277: PUSH
99278: LD_VAR 0 4
99282: ARRAY
99283: PUSH
99284: LD_VAR 0 5
99288: PUSH
99289: LD_INT 2
99291: ARRAY
99292: PUSH
99293: LD_VAR 0 4
99297: ARRAY
99298: PUSH
99299: EMPTY
99300: LIST
99301: LIST
99302: PPUSH
99303: CALL_OW 1
99307: ST_TO_ADDR
99308: GO 99247
99310: POP
99311: POP
// exit ;
99312: GO 99352
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
99314: LD_ADDR_VAR 0 3
99318: PUSH
99319: LD_VAR 0 5
99323: PUSH
99324: LD_INT 1
99326: ARRAY
99327: PUSH
99328: LD_INT 1
99330: ARRAY
99331: PUSH
99332: LD_VAR 0 5
99336: PUSH
99337: LD_INT 2
99339: ARRAY
99340: PUSH
99341: LD_INT 1
99343: ARRAY
99344: PUSH
99345: EMPTY
99346: LIST
99347: LIST
99348: PUSH
99349: EMPTY
99350: LIST
99351: ST_TO_ADDR
// end ;
99352: LD_VAR 0 3
99356: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
99357: LD_INT 0
99359: PPUSH
99360: PPUSH
// list := AreaToList ( area , 0 ) ;
99361: LD_ADDR_VAR 0 4
99365: PUSH
99366: LD_VAR 0 1
99370: PPUSH
99371: LD_INT 0
99373: PPUSH
99374: CALL_OW 517
99378: ST_TO_ADDR
// if not list then
99379: LD_VAR 0 4
99383: NOT
99384: IFFALSE 99388
// exit ;
99386: GO 99429
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
99388: LD_ADDR_VAR 0 3
99392: PUSH
99393: LD_VAR 0 4
99397: PUSH
99398: LD_INT 1
99400: ARRAY
99401: PUSH
99402: LD_INT 1
99404: ARRAY
99405: PUSH
99406: LD_VAR 0 4
99410: PUSH
99411: LD_INT 2
99413: ARRAY
99414: PUSH
99415: LD_INT 1
99417: ARRAY
99418: PUSH
99419: LD_VAR 0 2
99423: PUSH
99424: EMPTY
99425: LIST
99426: LIST
99427: LIST
99428: ST_TO_ADDR
// end ;
99429: LD_VAR 0 3
99433: RET
// export function First ( array ) ; begin
99434: LD_INT 0
99436: PPUSH
// if not array then
99437: LD_VAR 0 1
99441: NOT
99442: IFFALSE 99446
// exit ;
99444: GO 99460
// result := array [ 1 ] ;
99446: LD_ADDR_VAR 0 2
99450: PUSH
99451: LD_VAR 0 1
99455: PUSH
99456: LD_INT 1
99458: ARRAY
99459: ST_TO_ADDR
// end ;
99460: LD_VAR 0 2
99464: RET
// export function Last ( array ) ; begin
99465: LD_INT 0
99467: PPUSH
// if not array then
99468: LD_VAR 0 1
99472: NOT
99473: IFFALSE 99477
// exit ;
99475: GO 99493
// result := array [ array ] ;
99477: LD_ADDR_VAR 0 2
99481: PUSH
99482: LD_VAR 0 1
99486: PUSH
99487: LD_VAR 0 1
99491: ARRAY
99492: ST_TO_ADDR
// end ;
99493: LD_VAR 0 2
99497: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
99498: LD_INT 0
99500: PPUSH
99501: PPUSH
// result := [ ] ;
99502: LD_ADDR_VAR 0 5
99506: PUSH
99507: EMPTY
99508: ST_TO_ADDR
// if not array then
99509: LD_VAR 0 1
99513: NOT
99514: IFFALSE 99518
// exit ;
99516: GO 99630
// for i := 1 to array do
99518: LD_ADDR_VAR 0 6
99522: PUSH
99523: DOUBLE
99524: LD_INT 1
99526: DEC
99527: ST_TO_ADDR
99528: LD_VAR 0 1
99532: PUSH
99533: FOR_TO
99534: IFFALSE 99628
// if array [ i ] [ index ] = value then
99536: LD_VAR 0 1
99540: PUSH
99541: LD_VAR 0 6
99545: ARRAY
99546: PUSH
99547: LD_VAR 0 2
99551: ARRAY
99552: PUSH
99553: LD_VAR 0 3
99557: EQUAL
99558: IFFALSE 99626
// begin if indexColumn then
99560: LD_VAR 0 4
99564: IFFALSE 99600
// result := Join ( result , array [ i ] [ indexColumn ] ) else
99566: LD_ADDR_VAR 0 5
99570: PUSH
99571: LD_VAR 0 5
99575: PPUSH
99576: LD_VAR 0 1
99580: PUSH
99581: LD_VAR 0 6
99585: ARRAY
99586: PUSH
99587: LD_VAR 0 4
99591: ARRAY
99592: PPUSH
99593: CALL 94638 0 2
99597: ST_TO_ADDR
99598: GO 99626
// result := Join ( result , array [ i ] ) ;
99600: LD_ADDR_VAR 0 5
99604: PUSH
99605: LD_VAR 0 5
99609: PPUSH
99610: LD_VAR 0 1
99614: PUSH
99615: LD_VAR 0 6
99619: ARRAY
99620: PPUSH
99621: CALL 94638 0 2
99625: ST_TO_ADDR
// end ;
99626: GO 99533
99628: POP
99629: POP
// end ;
99630: LD_VAR 0 5
99634: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
99635: LD_INT 0
99637: PPUSH
// if not vehicles or not parkingPoint then
99638: LD_VAR 0 1
99642: NOT
99643: IFTRUE 99652
99645: PUSH
99646: LD_VAR 0 2
99650: NOT
99651: OR
99652: IFFALSE 99656
// exit ;
99654: GO 99754
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
99656: LD_ADDR_VAR 0 1
99660: PUSH
99661: LD_VAR 0 1
99665: PPUSH
99666: LD_INT 50
99668: PUSH
99669: EMPTY
99670: LIST
99671: PUSH
99672: LD_INT 3
99674: PUSH
99675: LD_INT 92
99677: PUSH
99678: LD_VAR 0 2
99682: PUSH
99683: LD_INT 1
99685: ARRAY
99686: PUSH
99687: LD_VAR 0 2
99691: PUSH
99692: LD_INT 2
99694: ARRAY
99695: PUSH
99696: LD_INT 8
99698: PUSH
99699: EMPTY
99700: LIST
99701: LIST
99702: LIST
99703: LIST
99704: PUSH
99705: EMPTY
99706: LIST
99707: LIST
99708: PUSH
99709: EMPTY
99710: LIST
99711: LIST
99712: PPUSH
99713: CALL_OW 72
99717: ST_TO_ADDR
// if not vehicles then
99718: LD_VAR 0 1
99722: NOT
99723: IFFALSE 99727
// exit ;
99725: GO 99754
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
99727: LD_VAR 0 1
99731: PPUSH
99732: LD_VAR 0 2
99736: PUSH
99737: LD_INT 1
99739: ARRAY
99740: PPUSH
99741: LD_VAR 0 2
99745: PUSH
99746: LD_INT 2
99748: ARRAY
99749: PPUSH
99750: CALL_OW 111
// end ;
99754: LD_VAR 0 3
99758: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
99759: LD_INT 0
99761: PPUSH
99762: PPUSH
99763: PPUSH
// if not side or not area then
99764: LD_VAR 0 1
99768: NOT
99769: IFTRUE 99778
99771: PUSH
99772: LD_VAR 0 2
99776: NOT
99777: OR
99778: IFFALSE 99782
// exit ;
99780: GO 99901
// tmp := AreaToList ( area , 0 ) ;
99782: LD_ADDR_VAR 0 5
99786: PUSH
99787: LD_VAR 0 2
99791: PPUSH
99792: LD_INT 0
99794: PPUSH
99795: CALL_OW 517
99799: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
99800: LD_ADDR_VAR 0 4
99804: PUSH
99805: DOUBLE
99806: LD_INT 1
99808: DEC
99809: ST_TO_ADDR
99810: LD_VAR 0 5
99814: PUSH
99815: LD_INT 1
99817: ARRAY
99818: PUSH
99819: FOR_TO
99820: IFFALSE 99899
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
99822: LD_VAR 0 5
99826: PUSH
99827: LD_INT 1
99829: ARRAY
99830: PUSH
99831: LD_VAR 0 4
99835: ARRAY
99836: PPUSH
99837: LD_VAR 0 5
99841: PUSH
99842: LD_INT 2
99844: ARRAY
99845: PUSH
99846: LD_VAR 0 4
99850: ARRAY
99851: PPUSH
99852: CALL_OW 351
99856: IFFALSE 99897
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
99858: LD_VAR 0 5
99862: PUSH
99863: LD_INT 1
99865: ARRAY
99866: PUSH
99867: LD_VAR 0 4
99871: ARRAY
99872: PPUSH
99873: LD_VAR 0 5
99877: PUSH
99878: LD_INT 2
99880: ARRAY
99881: PUSH
99882: LD_VAR 0 4
99886: ARRAY
99887: PPUSH
99888: LD_VAR 0 1
99892: PPUSH
99893: CALL_OW 244
// end ;
99897: GO 99819
99899: POP
99900: POP
// end ;
99901: LD_VAR 0 3
99905: RET
// export function UniqueArray ( array ) ; var i ; begin
99906: LD_INT 0
99908: PPUSH
99909: PPUSH
// result := [ ] ;
99910: LD_ADDR_VAR 0 2
99914: PUSH
99915: EMPTY
99916: ST_TO_ADDR
// if not array then
99917: LD_VAR 0 1
99921: NOT
99922: IFFALSE 99926
// exit ;
99924: GO 99987
// for i := 1 to array do
99926: LD_ADDR_VAR 0 3
99930: PUSH
99931: DOUBLE
99932: LD_INT 1
99934: DEC
99935: ST_TO_ADDR
99936: LD_VAR 0 1
99940: PUSH
99941: FOR_TO
99942: IFFALSE 99985
// if not array [ i ] in result then
99944: LD_VAR 0 1
99948: PUSH
99949: LD_VAR 0 3
99953: ARRAY
99954: PUSH
99955: LD_VAR 0 2
99959: IN
99960: NOT
99961: IFFALSE 99983
// result := Join ( result , i ) ;
99963: LD_ADDR_VAR 0 2
99967: PUSH
99968: LD_VAR 0 2
99972: PPUSH
99973: LD_VAR 0 3
99977: PPUSH
99978: CALL 94638 0 2
99982: ST_TO_ADDR
99983: GO 99941
99985: POP
99986: POP
// end ; end_of_file
99987: LD_VAR 0 2
99991: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
99992: LD_VAR 0 1
99996: PUSH
99997: LD_INT 200
99999: DOUBLE
100000: GREATEREQUAL
100001: IFFALSE 100009
100003: LD_INT 299
100005: DOUBLE
100006: LESSEQUAL
100007: IFTRUE 100011
100009: GO 100043
100011: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
100012: LD_VAR 0 1
100016: PPUSH
100017: LD_VAR 0 2
100021: PPUSH
100022: LD_VAR 0 3
100026: PPUSH
100027: LD_VAR 0 4
100031: PPUSH
100032: LD_VAR 0 5
100036: PPUSH
100037: CALL 50948 0 5
100041: GO 100120
100043: LD_INT 300
100045: DOUBLE
100046: GREATEREQUAL
100047: IFFALSE 100055
100049: LD_INT 399
100051: DOUBLE
100052: LESSEQUAL
100053: IFTRUE 100057
100055: GO 100119
100057: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
100058: LD_VAR 0 1
100062: PPUSH
100063: LD_VAR 0 2
100067: PPUSH
100068: LD_VAR 0 3
100072: PPUSH
100073: LD_VAR 0 4
100077: PPUSH
100078: LD_VAR 0 5
100082: PPUSH
100083: LD_VAR 0 6
100087: PPUSH
100088: LD_VAR 0 7
100092: PPUSH
100093: LD_VAR 0 8
100097: PPUSH
100098: LD_VAR 0 9
100102: PPUSH
100103: LD_VAR 0 10
100107: PPUSH
100108: LD_VAR 0 11
100112: PPUSH
100113: CALL 46832 0 11
100117: GO 100120
100119: POP
// end ;
100120: PPOPN 11
100122: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
100123: LD_VAR 0 1
100127: PPUSH
100128: LD_VAR 0 2
100132: PPUSH
100133: LD_VAR 0 3
100137: PPUSH
100138: LD_VAR 0 4
100142: PPUSH
100143: LD_VAR 0 5
100147: PPUSH
100148: CALL 50329 0 5
// end ; end_of_file
100152: PPOPN 5
100154: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
100155: LD_VAR 0 1
100159: PPUSH
100160: LD_VAR 0 2
100164: PPUSH
100165: LD_VAR 0 3
100169: PPUSH
100170: LD_VAR 0 4
100174: PPUSH
100175: LD_VAR 0 5
100179: PPUSH
100180: LD_VAR 0 6
100184: PPUSH
100185: CALL 34372 0 6
// end ;
100189: PPOPN 6
100191: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
100192: LD_INT 0
100194: PPUSH
// begin if not units then
100195: LD_VAR 0 1
100199: NOT
100200: IFFALSE 100204
// exit ;
100202: GO 100238
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
100204: LD_VAR 0 1
100208: PPUSH
100209: LD_VAR 0 2
100213: PPUSH
100214: LD_VAR 0 3
100218: PPUSH
100219: LD_VAR 0 4
100223: PPUSH
100224: LD_VAR 0 5
100228: PPUSH
100229: LD_VAR 0 6
100233: PPUSH
100234: CALL 56455 0 6
// end ;
100238: PPOPN 7
100240: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
100241: CALL 34259 0 0
// end ;
100245: PPOPN 1
100247: END
