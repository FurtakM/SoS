// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell ; export Truman ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 30
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 22
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 31
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 40
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 41
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 42
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 43
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 44
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 52
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 49
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 48
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 50
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 51
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 63
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 53
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 67
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 68
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 65
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 55
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 54
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 58
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 61
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 62
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 64
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 59
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 60
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 66
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 56
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 57
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 69
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// Video ( true ) ;
 314: LD_INT 1
 316: PPUSH
 317: CALL 87534 0 1
// CreateNature ;
 321: CALL 27274 0 0
// PrepareDifficulty ;
 325: CALL 11792 0 0
// PrepareJMMTeam ;
 329: CALL 1363 0 0
// PrepareCathyTeam ;
 333: CALL 2599 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 337: LD_INT 24
 339: PPUSH
 340: LD_INT 1
 342: PUSH
 343: LD_OWVAR 67
 347: PLUS
 348: PPUSH
 349: CALL 21652 0 2
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 375
// PlaceMines ( MineField2 , Difficulty ) ;
 363: LD_INT 25
 365: PPUSH
 366: LD_OWVAR 67
 370: PPUSH
 371: CALL 21652 0 2
// if Difficulty > 2 then
 375: LD_OWVAR 67
 379: PUSH
 380: LD_INT 2
 382: GREATER
 383: IFFALSE 397
// PlaceMines ( MineField3 , Difficulty ) ;
 385: LD_INT 26
 387: PPUSH
 388: LD_OWVAR 67
 392: PPUSH
 393: CALL 21652 0 2
// PrepareArabianCommander ;
 397: CALL 4250 0 0
// PrepareArabian ;
 401: CALL 4302 0 0
// BuildArabianBase ;
 405: CALL 14607 0 0
// TameApemans ;
 409: CALL 20457 0 0
// end ;
 413: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 414: LD_EXP 69
 418: PUSH
 419: LD_INT 1
 421: EQUAL
 422: IFFALSE 728
 424: GO 426
 426: DISABLE
 427: LD_INT 0
 429: PPUSH
// begin enable ;
 430: ENABLE
// fogoff ( true ) ;
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 438: LD_ADDR_VAR 0 1
 442: PUSH
 443: LD_INT 22
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 21
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PPUSH
 467: CALL_OW 69
 471: PUSH
 472: FOR_IN
 473: IFFALSE 489
// SetLives ( i , 1000 ) ;
 475: LD_VAR 0 1
 479: PPUSH
 480: LD_INT 1000
 482: PPUSH
 483: CALL_OW 234
 487: GO 472
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 570: LD_ADDR_VAR 0 1
 574: PUSH
 575: LD_INT 22
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 2
 587: PUSH
 588: LD_INT 30
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 30
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PPUSH
 617: CALL_OW 69
 621: PUSH
 622: FOR_IN
 623: IFFALSE 647
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 274
 634: PPUSH
 635: LD_INT 2
 637: PPUSH
 638: LD_INT 9999
 640: PPUSH
 641: CALL_OW 277
 645: GO 622
 647: POP
 648: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 30
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PPUSH
 696: CALL_OW 69
 700: PUSH
 701: FOR_IN
 702: IFFALSE 726
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 704: LD_VAR 0 1
 708: PPUSH
 709: CALL_OW 274
 713: PPUSH
 714: LD_INT 3
 716: PPUSH
 717: LD_INT 9999
 719: PPUSH
 720: CALL_OW 277
 724: GO 701
 726: POP
 727: POP
// end ;
 728: PPOPN 1
 730: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 731: LD_INT 25
 733: PUSH
 734: LD_INT 5
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: IFFALSE 758
 747: GO 749
 749: DISABLE
// snipersTrained := true ;
 750: LD_ADDR_EXP 64
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
 758: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and spawnRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 759: LD_INT 1
 761: PPUSH
 762: LD_INT 2
 764: PPUSH
 765: CALL_OW 81
 769: PUSH
 770: LD_INT 1
 772: EQUAL
 773: PUSH
 774: LD_EXP 60
 778: AND
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PPUSH
 790: CALL_OW 69
 794: PUSH
 795: LD_INT 0
 797: EQUAL
 798: AND
 799: IFFALSE 811
 801: GO 803
 803: DISABLE
// SetAchievement ( ACH_POWER ) ;
 804: LD_STRING ACH_POWER
 806: PPUSH
 807: CALL_OW 543
 811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 812: LD_INT 22
 814: PUSH
 815: LD_INT 1
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PPUSH
 836: CALL_OW 69
 840: PUSH
 841: LD_INT 22
 843: PUSH
 844: LD_INT 1
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 30
 853: PUSH
 854: LD_INT 32
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: AND
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 33
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PPUSH
 895: CALL_OW 69
 899: AND
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 30
 913: PUSH
 914: LD_INT 5
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PPUSH
 925: CALL_OW 69
 929: AND
 930: PUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 30
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: AND
 960: PUSH
 961: LD_INT 22
 963: PUSH
 964: LD_INT 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 36
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 69
 989: AND
 990: PUSH
 991: LD_INT 22
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 31
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PPUSH
1015: CALL_OW 69
1019: AND
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 22
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 69
1049: AND
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 20
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: AND
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 30
1093: PUSH
1094: LD_INT 19
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PPUSH
1105: CALL_OW 69
1109: AND
1110: PUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 30
1123: PUSH
1124: LD_INT 16
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 69
1139: AND
1140: PUSH
1141: LD_INT 22
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 30
1153: PUSH
1154: LD_INT 17
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PPUSH
1165: CALL_OW 69
1169: AND
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 30
1183: PUSH
1184: LD_INT 21
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: AND
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 30
1213: PUSH
1214: LD_INT 29
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: AND
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PPUSH
1255: CALL_OW 69
1259: AND
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 30
1273: PUSH
1274: LD_INT 27
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: AND
1290: PUSH
1291: LD_INT 22
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 26
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: AND
1320: PUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 30
1333: PUSH
1334: LD_INT 28
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL_OW 69
1349: AND
1350: IFFALSE 1362
1352: GO 1354
1354: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1355: LD_STRING ACH_ARCH
1357: PPUSH
1358: CALL_OW 543
1362: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// count = 0 ;
1387: LD_ADDR_VAR 0 6
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_STRING JMM
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_STRING 10_
1408: PPUSH
1409: CALL 50113 0 3
1413: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1414: LD_ADDR_EXP 22
1418: PUSH
1419: LD_EXP 22
1423: PUSH
1424: LD_EXP 1
1428: ADD
1429: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1430: LD_ADDR_EXP 10
1434: PUSH
1435: LD_STRING Gary
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_STRING 10_
1443: PPUSH
1444: CALL 50113 0 3
1448: ST_TO_ADDR
// if Gary then
1449: LD_EXP 10
1453: IFFALSE 1471
// JMMSquad = JMMSquad ^ Gary ;
1455: LD_ADDR_EXP 22
1459: PUSH
1460: LD_EXP 22
1464: PUSH
1465: LD_EXP 10
1469: ADD
1470: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1471: LD_ADDR_EXP 5
1475: PUSH
1476: LD_STRING Cyrus
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_STRING 10_
1484: PPUSH
1485: CALL 50113 0 3
1489: ST_TO_ADDR
// if Cyrus then
1490: LD_EXP 5
1494: IFFALSE 1512
// JMMSquad = JMMSquad ^ Cyrus ;
1496: LD_ADDR_EXP 22
1500: PUSH
1501: LD_EXP 22
1505: PUSH
1506: LD_EXP 5
1510: ADD
1511: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_STRING Bobby
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 10_
1525: PPUSH
1526: CALL 50113 0 3
1530: ST_TO_ADDR
// if Bobby then
1531: LD_EXP 4
1535: IFFALSE 1553
// JMMSquad = JMMSquad ^ Bobby ;
1537: LD_ADDR_EXP 22
1541: PUSH
1542: LD_EXP 22
1546: PUSH
1547: LD_EXP 4
1551: ADD
1552: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1553: LD_ADDR_EXP 6
1557: PUSH
1558: LD_STRING Lisa
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_STRING 10_
1566: PPUSH
1567: CALL 50113 0 3
1571: ST_TO_ADDR
// if Lisa then
1572: LD_EXP 6
1576: IFFALSE 1594
// JMMSquad = JMMSquad ^ Lisa ;
1578: LD_ADDR_EXP 22
1582: PUSH
1583: LD_EXP 22
1587: PUSH
1588: LD_EXP 6
1592: ADD
1593: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1594: LD_ADDR_EXP 2
1598: PUSH
1599: LD_STRING Brown
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_STRING 10_
1607: PPUSH
1608: CALL 50113 0 3
1612: ST_TO_ADDR
// if Brown then
1613: LD_EXP 2
1617: IFFALSE 1635
// JMMSquad = JMMSquad ^ Brown ;
1619: LD_ADDR_EXP 22
1623: PUSH
1624: LD_EXP 22
1628: PUSH
1629: LD_EXP 2
1633: ADD
1634: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1635: LD_ADDR_EXP 3
1639: PUSH
1640: LD_STRING Donaldson
1642: PPUSH
1643: LD_INT 1
1645: PPUSH
1646: LD_STRING 10_
1648: PPUSH
1649: CALL 50113 0 3
1653: ST_TO_ADDR
// if Donaldson then
1654: LD_EXP 3
1658: IFFALSE 1676
// JMMSquad = JMMSquad ^ Donaldson ;
1660: LD_ADDR_EXP 22
1664: PUSH
1665: LD_EXP 22
1669: PUSH
1670: LD_EXP 3
1674: ADD
1675: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1676: LD_ADDR_EXP 7
1680: PUSH
1681: LD_STRING Frank
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_STRING 10_
1689: PPUSH
1690: CALL 50113 0 3
1694: ST_TO_ADDR
// if Frank then
1695: LD_EXP 7
1699: IFFALSE 1717
// JMMSquad = JMMSquad ^ Frank ;
1701: LD_ADDR_EXP 22
1705: PUSH
1706: LD_EXP 22
1710: PUSH
1711: LD_EXP 7
1715: ADD
1716: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1717: LD_ADDR_EXP 9
1721: PUSH
1722: LD_STRING Houten
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_STRING 10_
1730: PPUSH
1731: CALL 50113 0 3
1735: ST_TO_ADDR
// if Houten then
1736: LD_EXP 9
1740: IFFALSE 1758
// JMMSquad = JMMSquad ^ Houten ;
1742: LD_ADDR_EXP 22
1746: PUSH
1747: LD_EXP 22
1751: PUSH
1752: LD_EXP 9
1756: ADD
1757: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1758: LD_ADDR_EXP 23
1762: PUSH
1763: LD_STRING OthersIn10
1765: PPUSH
1766: CALL_OW 31
1770: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1771: LD_ADDR_EXP 26
1775: PUSH
1776: LD_STRING Powell
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: LD_STRING 
1784: PPUSH
1785: CALL 50113 0 3
1789: ST_TO_ADDR
// for i in JMMSquad do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_EXP 22
1799: PUSH
1800: FOR_IN
1801: IFFALSE 2081
// begin if count < 3 then
1803: LD_VAR 0 6
1807: PUSH
1808: LD_INT 3
1810: LESS
1811: IFFALSE 1928
// begin vc_engine = 1 ;
1813: LD_ADDR_OWVAR 39
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// vc_control = 1 ;
1821: LD_ADDR_OWVAR 38
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_weapon = 12 ;
1829: LD_ADDR_OWVAR 40
1833: PUSH
1834: LD_INT 12
1836: ST_TO_ADDR
// vc_chassis = 3 ;
1837: LD_ADDR_OWVAR 37
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// veh = CreateVehicle ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: CALL_OW 45
1854: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1855: LD_VAR 0 4
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1867: LD_VAR 0 4
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
// if count mod 2 = 0 then
1882: LD_VAR 0 6
1886: PUSH
1887: LD_INT 2
1889: MOD
1890: PUSH
1891: LD_INT 0
1893: EQUAL
1894: IFFALSE 1913
// AddCargo ( veh , 1 , 100 ) else
1896: LD_VAR 0 4
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 291
1911: GO 1928
// AddCargo ( veh , 3 , 100 ) end ;
1913: LD_VAR 0 4
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 100
1923: PPUSH
1924: CALL_OW 291
// if count >= 3 then
1928: LD_VAR 0 6
1932: PUSH
1933: LD_INT 3
1935: GREATEREQUAL
1936: IFFALSE 2051
// begin vc_engine = 1 ;
1938: LD_ADDR_OWVAR 39
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// vc_control = 1 ;
1946: LD_ADDR_OWVAR 38
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1954: LD_ADDR_OWVAR 40
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 4
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 12
1983: ARRAY
1984: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: MOD
2008: PUSH
2009: LD_INT 1
2011: PLUS
2012: ARRAY
2013: ST_TO_ADDR
// veh = CreateVehicle ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
// end ; count = count + 1 ;
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_VAR 0 4
2074: PPUSH
2075: CALL_OW 52
// end ;
2079: GO 1800
2081: POP
2082: POP
// for i := 1 to others10 do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 1
2091: DEC
2092: ST_TO_ADDR
2093: LD_EXP 23
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2330
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2101: LD_VAR 0 2
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 3
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_OWVAR 67
2128: ARRAY
2129: LESS
2130: IFFALSE 2283
// begin vc_engine = 1 ;
2132: LD_ADDR_OWVAR 39
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// vc_control = 1 ;
2140: LD_ADDR_OWVAR 38
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2148: LD_ADDR_OWVAR 40
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 4
2158: PUSH
2159: LD_INT 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 12
2177: ARRAY
2178: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2179: LD_ADDR_OWVAR 37
2183: PUSH
2184: LD_INT 2
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_VAR 0 2
2198: PUSH
2199: LD_INT 2
2201: MOD
2202: PUSH
2203: LD_INT 1
2205: PLUS
2206: ARRAY
2207: ST_TO_ADDR
// veh = CreateVehicle ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2218: LD_VAR 0 4
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 4
2234: PPUSH
2235: LD_INT 2
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2245: LD_ADDR_EXP 30
2249: PUSH
2250: LD_EXP 30
2254: PUSH
2255: LD_VAR 0 4
2259: ADD
2260: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2261: LD_EXP 23
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PPUSH
2272: LD_VAR 0 4
2276: PPUSH
2277: CALL_OW 52
// end else
2281: GO 2328
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2283: LD_EXP 23
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 106
2296: PPUSH
2297: LD_INT 33
2299: PPUSH
2300: LD_INT 6
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2310: LD_EXP 23
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_INT 4
2323: PPUSH
2324: CALL_OW 235
// end ; end ;
2328: GO 2098
2330: POP
2331: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2332: LD_INT 22
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 21
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: CALL_OW 336
// end ;
2368: LD_VAR 0 1
2372: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
// uc_side = 1 ;
2380: LD_ADDR_OWVAR 20
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// uc_nation = 1 ;
2388: LD_ADDR_OWVAR 21
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// for i := 1 to 10 do
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: DOUBLE
2402: LD_INT 1
2404: DEC
2405: ST_TO_ADDR
2406: LD_INT 10
2408: PUSH
2409: FOR_TO
2410: IFFALSE 2592
// begin vc_engine = 1 ;
2412: LD_ADDR_OWVAR 39
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_control = 1 ;
2420: LD_ADDR_OWVAR 38
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 12
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 4
2456: PPUSH
2457: CALL_OW 12
2461: ARRAY
2462: ST_TO_ADDR
// vc_chassis = 3 ;
2463: LD_ADDR_OWVAR 37
2467: PUSH
2468: LD_INT 3
2470: ST_TO_ADDR
// veh = CreateVehicle ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2481: LD_VAR 0 3
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2493: LD_VAR 0 3
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2508: LD_ADDR_EXP 30
2512: PUSH
2513: LD_EXP 30
2517: PUSH
2518: LD_VAR 0 3
2522: ADD
2523: ST_TO_ADDR
// if vc_weapon = 12 then
2524: LD_OWVAR 40
2528: PUSH
2529: LD_INT 12
2531: EQUAL
2532: IFFALSE 2590
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_INT 5
2541: PPUSH
2542: LD_INT 10
2544: PPUSH
2545: CALL_OW 12
2549: PUSH
2550: LD_INT 10
2552: MUL
2553: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 1
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 291
// end ; end ;
2590: GO 2409
2592: POP
2593: POP
// end ;
2594: LD_VAR 0 1
2598: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2599: LD_INT 0
2601: PPUSH
2602: PPUSH
2603: PPUSH
// uc_side = 4 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 4
2611: ST_TO_ADDR
// uc_nation = 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , false ) then
2620: LD_STRING 08_SikorskiStatus
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 30
2630: IFFALSE 2651
// Truman := PrepareUnit ( Truman , false ,  ) ;
2632: LD_ADDR_EXP 21
2636: PUSH
2637: LD_STRING Truman
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: LD_STRING 
2645: PPUSH
2646: CALL 50113 0 3
2650: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2651: LD_ADDR_EXP 11
2655: PUSH
2656: LD_STRING Simms
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: LD_STRING 
2664: PPUSH
2665: CALL 50113 0 3
2669: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2670: LD_ADDR_EXP 12
2674: PUSH
2675: LD_STRING Denis
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_STRING 08_
2683: PPUSH
2684: CALL 50113 0 3
2688: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2689: LD_ADDR_EXP 13
2693: PUSH
2694: LD_STRING Joan
2696: PPUSH
2697: LD_INT 1
2699: PPUSH
2700: LD_STRING 08_
2702: PPUSH
2703: CALL 50113 0 3
2707: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , true , 08_ ) ;
2708: LD_ADDR_EXP 19
2712: PUSH
2713: LD_STRING Mike
2715: PPUSH
2716: LD_INT 1
2718: PPUSH
2719: LD_STRING 08_
2721: PPUSH
2722: CALL 50113 0 3
2726: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2727: LD_STRING 08_Khatam
2729: PPUSH
2730: CALL_OW 28
2734: IFFALSE 2757
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2736: LD_ADDR_EXP 14
2740: PUSH
2741: LD_STRING Khatam
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_STRING 08_
2749: PPUSH
2750: CALL 50113 0 3
2754: ST_TO_ADDR
2755: GO 2785
// if TestCharacters ( 03_Khatam ) then
2757: LD_STRING 03_Khatam
2759: PPUSH
2760: CALL_OW 28
2764: IFFALSE 2785
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2766: LD_ADDR_EXP 14
2770: PUSH
2771: LD_STRING Khatam
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: LD_STRING 03_
2779: PPUSH
2780: CALL 50113 0 3
2784: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2785: LD_ADDR_EXP 15
2789: PUSH
2790: LD_STRING Gladstone
2792: PPUSH
2793: LD_INT 1
2795: PPUSH
2796: LD_STRING 08_
2798: PPUSH
2799: CALL 50113 0 3
2803: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2804: LD_ADDR_EXP 17
2808: PUSH
2809: LD_STRING DeltaDoctor
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: LD_STRING 
2817: PPUSH
2818: CALL 50113 0 3
2822: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2823: LD_ADDR_EXP 7
2827: PUSH
2828: LD_STRING Frank
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_STRING 08_
2836: PPUSH
2837: CALL 50113 0 3
2841: ST_TO_ADDR
// if Frank then
2842: LD_EXP 7
2846: IFFALSE 2869
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2848: LD_ADDR_EXP 8
2852: PUSH
2853: LD_STRING Yamoko
2855: PPUSH
2856: LD_INT 0
2858: PPUSH
2859: LD_STRING 
2861: PPUSH
2862: CALL 50113 0 3
2866: ST_TO_ADDR
2867: GO 2888
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2869: LD_ADDR_EXP 8
2873: PUSH
2874: LD_STRING Kikuchi
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_STRING 08_
2882: PPUSH
2883: CALL 50113 0 3
2887: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2888: LD_ADDR_EXP 24
2892: PUSH
2893: LD_STRING 09_others
2895: PPUSH
2896: CALL_OW 31
2900: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2901: LD_ADDR_EXP 25
2905: PUSH
2906: LD_STRING 09_apes
2908: PPUSH
2909: CALL_OW 31
2913: ST_TO_ADDR
// if Truman then
2914: LD_EXP 21
2918: IFFALSE 2935
// PlaceUnitArea ( Truman , CathyTeamSpawn , false ) ;
2920: LD_EXP 21
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: LD_INT 0
2930: PPUSH
2931: CALL_OW 49
// PlaceUnitArea ( Mike , CathyTeamSpawn , false ) ;
2935: LD_EXP 19
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 49
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2950: LD_EXP 11
2954: PPUSH
2955: LD_INT 1
2957: PPUSH
2958: LD_INT 0
2960: PPUSH
2961: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2965: LD_EXP 12
2969: PPUSH
2970: LD_INT 1
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2980: LD_EXP 13
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2995: LD_EXP 14
2999: PPUSH
3000: LD_INT 1
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
3010: LD_EXP 15
3014: PPUSH
3015: LD_INT 1
3017: PPUSH
3018: LD_INT 0
3020: PPUSH
3021: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
3025: LD_EXP 17
3029: PPUSH
3030: LD_INT 1
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// if Kikuchi then
3040: LD_EXP 8
3044: IFFALSE 3061
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
3046: LD_EXP 8
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3061: LD_EXP 11
3065: PUSH
3066: LD_EXP 14
3070: PUSH
3071: LD_EXP 12
3075: PUSH
3076: LD_EXP 15
3080: PUSH
3081: LD_EXP 17
3085: PUSH
3086: LD_EXP 13
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PPUSH
3099: LD_INT 4
3101: PPUSH
3102: CALL_OW 336
// if others09 > 2 then
3106: LD_EXP 24
3110: PUSH
3111: LD_INT 2
3113: GREATER
3114: IFFALSE 3195
// begin for i := 1 to 3 do
3116: LD_ADDR_VAR 0 2
3120: PUSH
3121: DOUBLE
3122: LD_INT 1
3124: DEC
3125: ST_TO_ADDR
3126: LD_INT 3
3128: PUSH
3129: FOR_TO
3130: IFFALSE 3191
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3132: LD_EXP 24
3136: PUSH
3137: LD_VAR 0 2
3141: ARRAY
3142: PPUSH
3143: LD_INT 1
3145: PPUSH
3146: LD_INT 0
3148: PPUSH
3149: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3153: LD_ADDR_EXP 24
3157: PUSH
3158: LD_EXP 24
3162: PPUSH
3163: LD_INT 1
3165: PPUSH
3166: CALL_OW 3
3170: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3171: LD_EXP 24
3175: PUSH
3176: LD_VAR 0 2
3180: ARRAY
3181: PPUSH
3182: LD_INT 2
3184: PPUSH
3185: CALL_OW 336
// end ;
3189: GO 3129
3191: POP
3192: POP
// end else
3193: GO 3255
// begin for i in others09 do
3195: LD_ADDR_VAR 0 2
3199: PUSH
3200: LD_EXP 24
3204: PUSH
3205: FOR_IN
3206: IFFALSE 3253
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3208: LD_VAR 0 2
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: LD_INT 0
3218: PPUSH
3219: CALL_OW 49
// others09 = others09 diff i ;
3223: LD_ADDR_EXP 24
3227: PUSH
3228: LD_EXP 24
3232: PUSH
3233: LD_VAR 0 2
3237: DIFF
3238: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3239: LD_VAR 0 2
3243: PPUSH
3244: LD_INT 2
3246: PPUSH
3247: CALL_OW 336
// end ;
3251: GO 3205
3253: POP
3254: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3255: LD_INT 22
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 25
3267: PUSH
3268: LD_INT 2
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PPUSH
3279: CALL_OW 69
3283: PUSH
3284: LD_INT 0
3286: EQUAL
3287: IFFALSE 3419
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 22
3296: PUSH
3297: LD_INT 4
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 25
3306: PUSH
3307: LD_INT 2
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PPUSH
3318: CALL_OW 69
3322: PUSH
3323: LD_EXP 11
3327: PUSH
3328: LD_EXP 14
3332: PUSH
3333: LD_EXP 12
3337: PUSH
3338: LD_EXP 15
3342: PUSH
3343: LD_EXP 17
3347: PUSH
3348: LD_EXP 13
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: DIFF
3361: ST_TO_ADDR
// if not tmp then
3362: LD_VAR 0 3
3366: NOT
3367: IFFALSE 3403
// begin if Denis then
3369: LD_EXP 12
3373: IFFALSE 3389
// SetClass ( Denis , 2 ) else
3375: LD_EXP 12
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 336
3387: GO 3401
// SetClass ( DeltaDoctor , 2 ) ;
3389: LD_EXP 17
3393: PPUSH
3394: LD_INT 2
3396: PPUSH
3397: CALL_OW 336
// end else
3401: GO 3419
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3403: LD_VAR 0 3
3407: PUSH
3408: LD_INT 1
3410: ARRAY
3411: PPUSH
3412: LD_INT 2
3414: PPUSH
3415: CALL_OW 336
// end ; end ; for i in ape09 do
3419: LD_ADDR_VAR 0 2
3423: PUSH
3424: LD_EXP 25
3428: PUSH
3429: FOR_IN
3430: IFFALSE 3449
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3432: LD_VAR 0 2
3436: PPUSH
3437: LD_INT 1
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
3447: GO 3429
3449: POP
3450: POP
// uc_side = 4 ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_INT 4
3458: ST_TO_ADDR
// hc_class := 1 ;
3459: LD_ADDR_OWVAR 28
3463: PUSH
3464: LD_INT 1
3466: ST_TO_ADDR
// hc_sex := sex_female ;
3467: LD_ADDR_OWVAR 27
3471: PUSH
3472: LD_INT 2
3474: ST_TO_ADDR
// hc_gallery :=  ;
3475: LD_ADDR_OWVAR 33
3479: PUSH
3480: LD_STRING 
3482: ST_TO_ADDR
// hc_name :=  ;
3483: LD_ADDR_OWVAR 26
3487: PUSH
3488: LD_STRING 
3490: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3491: LD_ADDR_OWVAR 31
3495: PUSH
3496: LD_INT 1
3498: PUSH
3499: LD_INT 7
3501: PUSH
3502: LD_INT 1
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// AmScout = CreateHuman ;
3514: LD_ADDR_EXP 18
3518: PUSH
3519: CALL_OW 44
3523: ST_TO_ADDR
// end ;
3524: LD_VAR 0 1
3528: RET
// export function PrepareCornell ; begin
3529: LD_INT 0
3531: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3532: LD_INT 4
3534: PPUSH
3535: LD_INT 4
3537: PPUSH
3538: CALL_OW 343
// uc_side = 4 ;
3542: LD_ADDR_OWVAR 20
3546: PUSH
3547: LD_INT 4
3549: ST_TO_ADDR
// uc_nation = 1 ;
3550: LD_ADDR_OWVAR 21
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3558: LD_ADDR_EXP 20
3562: PUSH
3563: LD_STRING Cornel
3565: PPUSH
3566: LD_INT 1
3568: PPUSH
3569: LD_STRING 03_
3571: PPUSH
3572: CALL 50113 0 3
3576: ST_TO_ADDR
// if not Cornell then
3577: LD_EXP 20
3581: NOT
3582: IFFALSE 3586
// exit ;
3584: GO 3694
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3586: LD_EXP 20
3590: PPUSH
3591: LD_INT 8
3593: PPUSH
3594: LD_INT 0
3596: PPUSH
3597: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3601: LD_EXP 20
3605: PPUSH
3606: LD_INT 350
3608: PPUSH
3609: CALL_OW 234
// if IsInUnit ( JMM ) then
3613: LD_EXP 1
3617: PPUSH
3618: CALL_OW 310
3622: IFFALSE 3665
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3624: LD_EXP 20
3628: PPUSH
3629: LD_EXP 1
3633: PPUSH
3634: CALL_OW 310
3638: PPUSH
3639: CALL_OW 250
3643: PPUSH
3644: LD_EXP 1
3648: PPUSH
3649: CALL_OW 310
3653: PPUSH
3654: CALL_OW 251
3658: PPUSH
3659: CALL_OW 111
3663: GO 3694
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3665: LD_EXP 20
3669: PPUSH
3670: LD_EXP 1
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_EXP 1
3684: PPUSH
3685: CALL_OW 251
3689: PPUSH
3690: CALL_OW 111
// end ;
3694: LD_VAR 0 1
3698: RET
// every 0 0$1 trigger IsAt ( Truman , 17 , 31 ) do
3699: LD_EXP 21
3703: PPUSH
3704: LD_INT 17
3706: PPUSH
3707: LD_INT 31
3709: PPUSH
3710: CALL_OW 307
3714: IFFALSE 3728
3716: GO 3718
3718: DISABLE
// RemoveUnit ( Truman ) ;
3719: LD_EXP 21
3723: PPUSH
3724: CALL_OW 64
3728: END
// every 0 0$2 trigger joinEpsilon = 1 and IsOk ( Truman ) and not HasTask ( Truman ) do
3729: LD_EXP 31
3733: PUSH
3734: LD_INT 1
3736: EQUAL
3737: PUSH
3738: LD_EXP 21
3742: PPUSH
3743: CALL_OW 302
3747: AND
3748: PUSH
3749: LD_EXP 21
3753: PPUSH
3754: CALL_OW 314
3758: NOT
3759: AND
3760: IFFALSE 3781
3762: GO 3764
3764: DISABLE
// begin enable ;
3765: ENABLE
// ComMoveXY ( Truman , 17 , 31 ) ;
3766: LD_EXP 21
3770: PPUSH
3771: LD_INT 17
3773: PPUSH
3774: LD_INT 31
3776: PPUSH
3777: CALL_OW 111
// end ; end_of_file
3781: END
// export function PrepareRussians ; var i , un ; begin
3782: LD_INT 0
3784: PPUSH
3785: PPUSH
3786: PPUSH
// uc_side = 3 ;
3787: LD_ADDR_OWVAR 20
3791: PUSH
3792: LD_INT 3
3794: ST_TO_ADDR
// uc_nation = 3 ;
3795: LD_ADDR_OWVAR 21
3799: PUSH
3800: LD_INT 3
3802: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3803: LD_ADDR_EXP 27
3807: PUSH
3808: LD_STRING Tsaritsyn
3810: PPUSH
3811: LD_INT 0
3813: PPUSH
3814: LD_STRING 
3816: PPUSH
3817: CALL 50113 0 3
3821: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3822: LD_EXP 27
3826: PPUSH
3827: LD_INT 3
3829: PPUSH
3830: LD_INT 0
3832: PPUSH
3833: CALL_OW 49
// for i = 1 to 14 do
3837: LD_ADDR_VAR 0 2
3841: PUSH
3842: DOUBLE
3843: LD_INT 1
3845: DEC
3846: ST_TO_ADDR
3847: LD_INT 14
3849: PUSH
3850: FOR_TO
3851: IFFALSE 3937
// begin uc_side = 3 ;
3853: LD_ADDR_OWVAR 20
3857: PUSH
3858: LD_INT 3
3860: ST_TO_ADDR
// uc_nation = 3 ;
3861: LD_ADDR_OWVAR 21
3865: PUSH
3866: LD_INT 3
3868: ST_TO_ADDR
// hc_gallery =  ;
3869: LD_ADDR_OWVAR 33
3873: PUSH
3874: LD_STRING 
3876: ST_TO_ADDR
// hc_name =  ;
3877: LD_ADDR_OWVAR 26
3881: PUSH
3882: LD_STRING 
3884: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3885: LD_INT 0
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_EXP 38
3895: PPUSH
3896: LD_EXP 39
3900: PPUSH
3901: CALL_OW 12
3905: PPUSH
3906: CALL_OW 380
// un = CreateHuman ;
3910: LD_ADDR_VAR 0 3
3914: PUSH
3915: CALL_OW 44
3919: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3920: LD_VAR 0 3
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 49
// end ;
3935: GO 3850
3937: POP
3938: POP
// for i = 1 to 6 do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: DOUBLE
3945: LD_INT 1
3947: DEC
3948: ST_TO_ADDR
3949: LD_INT 6
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4039
// begin uc_side = 3 ;
3955: LD_ADDR_OWVAR 20
3959: PUSH
3960: LD_INT 3
3962: ST_TO_ADDR
// uc_nation = 3 ;
3963: LD_ADDR_OWVAR 21
3967: PUSH
3968: LD_INT 3
3970: ST_TO_ADDR
// hc_gallery =  ;
3971: LD_ADDR_OWVAR 33
3975: PUSH
3976: LD_STRING 
3978: ST_TO_ADDR
// hc_name =  ;
3979: LD_ADDR_OWVAR 26
3983: PUSH
3984: LD_STRING 
3986: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3987: LD_INT 0
3989: PPUSH
3990: LD_INT 2
3992: PPUSH
3993: LD_EXP 38
3997: PPUSH
3998: LD_EXP 39
4002: PPUSH
4003: CALL_OW 12
4007: PPUSH
4008: CALL_OW 380
// un = CreateHuman ;
4012: LD_ADDR_VAR 0 3
4016: PUSH
4017: CALL_OW 44
4021: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4022: LD_VAR 0 3
4026: PPUSH
4027: LD_INT 3
4029: PPUSH
4030: LD_INT 0
4032: PPUSH
4033: CALL_OW 49
// end ;
4037: GO 3952
4039: POP
4040: POP
// for i = 1 to 6 do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: DOUBLE
4047: LD_INT 1
4049: DEC
4050: ST_TO_ADDR
4051: LD_INT 6
4053: PUSH
4054: FOR_TO
4055: IFFALSE 4141
// begin uc_side = 3 ;
4057: LD_ADDR_OWVAR 20
4061: PUSH
4062: LD_INT 3
4064: ST_TO_ADDR
// uc_nation = 3 ;
4065: LD_ADDR_OWVAR 21
4069: PUSH
4070: LD_INT 3
4072: ST_TO_ADDR
// hc_gallery =  ;
4073: LD_ADDR_OWVAR 33
4077: PUSH
4078: LD_STRING 
4080: ST_TO_ADDR
// hc_name =  ;
4081: LD_ADDR_OWVAR 26
4085: PUSH
4086: LD_STRING 
4088: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4089: LD_INT 0
4091: PPUSH
4092: LD_INT 3
4094: PPUSH
4095: LD_EXP 38
4099: PPUSH
4100: LD_EXP 39
4104: PPUSH
4105: CALL_OW 12
4109: PPUSH
4110: CALL_OW 380
// un = CreateHuman ;
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: CALL_OW 44
4123: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4124: LD_VAR 0 3
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: CALL_OW 49
// end ;
4139: GO 4054
4141: POP
4142: POP
// for i = 1 to 4 do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: DOUBLE
4149: LD_INT 1
4151: DEC
4152: ST_TO_ADDR
4153: LD_INT 4
4155: PUSH
4156: FOR_TO
4157: IFFALSE 4243
// begin uc_side = 3 ;
4159: LD_ADDR_OWVAR 20
4163: PUSH
4164: LD_INT 3
4166: ST_TO_ADDR
// uc_nation = 3 ;
4167: LD_ADDR_OWVAR 21
4171: PUSH
4172: LD_INT 3
4174: ST_TO_ADDR
// hc_gallery =  ;
4175: LD_ADDR_OWVAR 33
4179: PUSH
4180: LD_STRING 
4182: ST_TO_ADDR
// hc_name =  ;
4183: LD_ADDR_OWVAR 26
4187: PUSH
4188: LD_STRING 
4190: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4191: LD_INT 0
4193: PPUSH
4194: LD_INT 4
4196: PPUSH
4197: LD_EXP 38
4201: PPUSH
4202: LD_EXP 39
4206: PPUSH
4207: CALL_OW 12
4211: PPUSH
4212: CALL_OW 380
// un = CreateHuman ;
4216: LD_ADDR_VAR 0 3
4220: PUSH
4221: CALL_OW 44
4225: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4226: LD_VAR 0 3
4230: PPUSH
4231: LD_INT 3
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// end ;
4241: GO 4156
4243: POP
4244: POP
// end ; end_of_file
4245: LD_VAR 0 1
4249: RET
// export function PrepareArabianCommander ; begin
4250: LD_INT 0
4252: PPUSH
// uc_side = 2 ;
4253: LD_ADDR_OWVAR 20
4257: PUSH
4258: LD_INT 2
4260: ST_TO_ADDR
// uc_nation = 2 ;
4261: LD_ADDR_OWVAR 21
4265: PUSH
4266: LD_INT 2
4268: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4269: LD_ADDR_EXP 28
4273: PUSH
4274: LD_STRING Dietrich
4276: PPUSH
4277: CALL_OW 25
4281: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4282: LD_EXP 28
4286: PPUSH
4287: LD_INT 4
4289: PPUSH
4290: LD_INT 0
4292: PPUSH
4293: CALL_OW 49
// end ;
4297: LD_VAR 0 1
4301: RET
// export function PrepareArabian ; var i , un , veh ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
// uc_side := 2 ;
4308: LD_ADDR_OWVAR 20
4312: PUSH
4313: LD_INT 2
4315: ST_TO_ADDR
// uc_nation := 2 ;
4316: LD_ADDR_OWVAR 21
4320: PUSH
4321: LD_INT 2
4323: ST_TO_ADDR
// if not Ahmed then
4324: LD_EXP 29
4328: NOT
4329: IFFALSE 4397
// begin InitHc ;
4331: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4335: LD_INT 1
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: LD_EXP 38
4345: PPUSH
4346: LD_EXP 39
4350: PUSH
4351: LD_INT 1
4353: PLUS
4354: PPUSH
4355: CALL_OW 12
4359: PPUSH
4360: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Ahmed Abbasid
4371: ST_TO_ADDR
// Ahmed := CreateHuman ;
4372: LD_ADDR_EXP 29
4376: PUSH
4377: CALL_OW 44
4381: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4382: LD_EXP 29
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: LD_INT 0
4392: PPUSH
4393: CALL_OW 49
// end ; for i = 1 to 4 do
4397: LD_ADDR_VAR 0 2
4401: PUSH
4402: DOUBLE
4403: LD_INT 1
4405: DEC
4406: ST_TO_ADDR
4407: LD_INT 4
4409: PUSH
4410: FOR_TO
4411: IFFALSE 4497
// begin uc_side = 2 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 2
4420: ST_TO_ADDR
// uc_nation = 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery =  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_name =  ;
4437: LD_ADDR_OWVAR 26
4441: PUSH
4442: LD_STRING 
4444: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4445: LD_INT 0
4447: PPUSH
4448: LD_INT 2
4450: PPUSH
4451: LD_EXP 38
4455: PPUSH
4456: LD_EXP 39
4460: PPUSH
4461: CALL_OW 12
4465: PPUSH
4466: CALL_OW 380
// un = CreateHuman ;
4470: LD_ADDR_VAR 0 3
4474: PUSH
4475: CALL_OW 44
4479: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4480: LD_VAR 0 3
4484: PPUSH
4485: LD_INT 4
4487: PPUSH
4488: LD_INT 0
4490: PPUSH
4491: CALL_OW 49
// end ;
4495: GO 4410
4497: POP
4498: POP
// for i = 1 to 5 do
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: DOUBLE
4505: LD_INT 1
4507: DEC
4508: ST_TO_ADDR
4509: LD_INT 5
4511: PUSH
4512: FOR_TO
4513: IFFALSE 4599
// begin uc_side = 2 ;
4515: LD_ADDR_OWVAR 20
4519: PUSH
4520: LD_INT 2
4522: ST_TO_ADDR
// uc_nation = 2 ;
4523: LD_ADDR_OWVAR 21
4527: PUSH
4528: LD_INT 2
4530: ST_TO_ADDR
// hc_gallery =  ;
4531: LD_ADDR_OWVAR 33
4535: PUSH
4536: LD_STRING 
4538: ST_TO_ADDR
// hc_name =  ;
4539: LD_ADDR_OWVAR 26
4543: PUSH
4544: LD_STRING 
4546: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4547: LD_INT 0
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_EXP 38
4557: PPUSH
4558: LD_EXP 39
4562: PPUSH
4563: CALL_OW 12
4567: PPUSH
4568: CALL_OW 380
// un = CreateHuman ;
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: CALL_OW 44
4581: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4582: LD_VAR 0 3
4586: PPUSH
4587: LD_INT 4
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 49
// end ;
4597: GO 4512
4599: POP
4600: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4601: LD_ADDR_VAR 0 2
4605: PUSH
4606: DOUBLE
4607: LD_INT 1
4609: DEC
4610: ST_TO_ADDR
4611: LD_INT 3
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: PUSH
4629: LD_OWVAR 67
4633: ARRAY
4634: PUSH
4635: FOR_TO
4636: IFFALSE 4722
// begin uc_side = 2 ;
4638: LD_ADDR_OWVAR 20
4642: PUSH
4643: LD_INT 2
4645: ST_TO_ADDR
// uc_nation = 2 ;
4646: LD_ADDR_OWVAR 21
4650: PUSH
4651: LD_INT 2
4653: ST_TO_ADDR
// hc_gallery =  ;
4654: LD_ADDR_OWVAR 33
4658: PUSH
4659: LD_STRING 
4661: ST_TO_ADDR
// hc_name =  ;
4662: LD_ADDR_OWVAR 26
4666: PUSH
4667: LD_STRING 
4669: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4670: LD_INT 0
4672: PPUSH
4673: LD_INT 4
4675: PPUSH
4676: LD_EXP 38
4680: PPUSH
4681: LD_EXP 39
4685: PPUSH
4686: CALL_OW 12
4690: PPUSH
4691: CALL_OW 380
// un = CreateHuman ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: CALL_OW 44
4704: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4705: LD_VAR 0 3
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL_OW 49
// end ;
4720: GO 4635
4722: POP
4723: POP
// for i = 1 to 2 do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_INT 2
4736: PUSH
4737: FOR_TO
4738: IFFALSE 4868
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4740: LD_ADDR_VAR 0 4
4744: PUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 2
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 21
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: LD_INT 58
4767: PUSH
4768: EMPTY
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: ST_TO_ADDR
// uc_side = 2 ;
4781: LD_ADDR_OWVAR 20
4785: PUSH
4786: LD_INT 2
4788: ST_TO_ADDR
// uc_nation = 2 ;
4789: LD_ADDR_OWVAR 21
4793: PUSH
4794: LD_INT 2
4796: ST_TO_ADDR
// hc_gallery =  ;
4797: LD_ADDR_OWVAR 33
4801: PUSH
4802: LD_STRING 
4804: ST_TO_ADDR
// hc_name =  ;
4805: LD_ADDR_OWVAR 26
4809: PUSH
4810: LD_STRING 
4812: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4813: LD_INT 0
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_EXP 38
4823: PPUSH
4824: LD_EXP 39
4828: PPUSH
4829: CALL_OW 12
4833: PPUSH
4834: CALL_OW 380
// un = CreateHuman ;
4838: LD_ADDR_VAR 0 3
4842: PUSH
4843: CALL_OW 44
4847: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4848: LD_VAR 0 3
4852: PPUSH
4853: LD_VAR 0 4
4857: PUSH
4858: LD_INT 1
4860: ARRAY
4861: PPUSH
4862: CALL_OW 52
// end ;
4866: GO 4737
4868: POP
4869: POP
// end ;
4870: LD_VAR 0 1
4874: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4875: LD_INT 0
4877: PPUSH
4878: PPUSH
4879: PPUSH
4880: PPUSH
4881: PPUSH
4882: PPUSH
// for i := 1 to 2 do
4883: LD_ADDR_VAR 0 2
4887: PUSH
4888: DOUBLE
4889: LD_INT 1
4891: DEC
4892: ST_TO_ADDR
4893: LD_INT 2
4895: PUSH
4896: FOR_TO
4897: IFFALSE 5023
// begin uc_side = 5 ;
4899: LD_ADDR_OWVAR 20
4903: PUSH
4904: LD_INT 5
4906: ST_TO_ADDR
// uc_nation = 2 ;
4907: LD_ADDR_OWVAR 21
4911: PUSH
4912: LD_INT 2
4914: ST_TO_ADDR
// vc_chassis := 31 ;
4915: LD_ADDR_OWVAR 37
4919: PUSH
4920: LD_INT 31
4922: ST_TO_ADDR
// vc_control := control_rider ;
4923: LD_ADDR_OWVAR 38
4927: PUSH
4928: LD_INT 4
4930: ST_TO_ADDR
// animal := CreateVehicle ;
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: CALL_OW 45
4940: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4941: LD_VAR 0 3
4945: PPUSH
4946: LD_INT 7
4948: PPUSH
4949: LD_INT 0
4951: PPUSH
4952: CALL_OW 49
// hc_gallery =  ;
4956: LD_ADDR_OWVAR 33
4960: PUSH
4961: LD_STRING 
4963: ST_TO_ADDR
// hc_name =  ;
4964: LD_ADDR_OWVAR 26
4968: PUSH
4969: LD_STRING 
4971: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4972: LD_INT 0
4974: PPUSH
4975: LD_INT 11
4977: PPUSH
4978: LD_EXP 38
4982: PPUSH
4983: LD_EXP 39
4987: PPUSH
4988: CALL_OW 12
4992: PPUSH
4993: CALL_OW 380
// un = CreateHuman ;
4997: LD_ADDR_VAR 0 4
5001: PUSH
5002: CALL_OW 44
5006: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
5007: LD_VAR 0 4
5011: PPUSH
5012: LD_VAR 0 3
5016: PPUSH
5017: CALL_OW 52
// end ;
5021: GO 4896
5023: POP
5024: POP
// repeat wait ( 0 0$1 ) ;
5025: LD_INT 35
5027: PPUSH
5028: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
5032: LD_ADDR_VAR 0 5
5036: PUSH
5037: LD_INT 22
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 69
5051: PPUSH
5052: LD_VAR 0 2
5056: PPUSH
5057: CALL_OW 74
5061: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5062: LD_ADDR_VAR 0 6
5066: PUSH
5067: LD_INT 22
5069: PUSH
5070: LD_INT 1
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 59
5082: PUSH
5083: EMPTY
5084: LIST
5085: PUSH
5086: LD_INT 21
5088: PUSH
5089: LD_INT 1
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 21
5098: PUSH
5099: LD_INT 2
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: PPUSH
5119: CALL_OW 69
5123: PPUSH
5124: LD_VAR 0 2
5128: PPUSH
5129: CALL_OW 74
5133: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
5134: LD_ADDR_VAR 0 2
5138: PUSH
5139: LD_INT 22
5141: PUSH
5142: LD_INT 5
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 25
5151: PUSH
5152: LD_INT 11
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 69
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5239
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5171: LD_VAR 0 2
5175: PPUSH
5176: LD_VAR 0 5
5180: PPUSH
5181: CALL_OW 296
5185: PUSH
5186: LD_INT 8
5188: PLUS
5189: PUSH
5190: LD_VAR 0 2
5194: PPUSH
5195: LD_VAR 0 6
5199: PPUSH
5200: CALL_OW 296
5204: LESS
5205: IFFALSE 5223
// ComAttackUnit ( i , target1 ) else
5207: LD_VAR 0 2
5211: PPUSH
5212: LD_VAR 0 5
5216: PPUSH
5217: CALL_OW 115
5221: GO 5237
// ComAttackUnit ( i , target2 ) ;
5223: LD_VAR 0 2
5227: PPUSH
5228: LD_VAR 0 6
5232: PPUSH
5233: CALL_OW 115
// end ;
5237: GO 5168
5239: POP
5240: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5241: LD_INT 22
5243: PUSH
5244: LD_INT 5
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 25
5253: PUSH
5254: LD_INT 11
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: PUSH
5270: LD_INT 0
5272: EQUAL
5273: PUSH
5274: LD_INT 22
5276: PUSH
5277: LD_INT 1
5279: PUSH
5280: EMPTY
5281: LIST
5282: LIST
5283: PPUSH
5284: CALL_OW 69
5288: PUSH
5289: LD_INT 0
5291: EQUAL
5292: OR
5293: IFFALSE 5025
// end ; end_of_file
5295: LD_VAR 0 1
5299: RET
// every 0 0$1 do
5300: GO 5302
5302: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
5303: LD_INT 1
5305: PPUSH
5306: LD_INT 19
5308: PPUSH
5309: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5313: LD_EXP 11
5317: PPUSH
5318: CALL_OW 87
// wait ( 0 0$3 ) ;
5322: LD_INT 105
5324: PPUSH
5325: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5329: LD_EXP 1
5333: PPUSH
5334: CALL_OW 310
5338: PPUSH
5339: CALL_OW 85
// Wait ( 0 0$1 ) ;
5343: LD_INT 35
5345: PPUSH
5346: CALL_OW 67
// if IsOk ( Gary ) then
5350: LD_EXP 10
5354: PPUSH
5355: CALL_OW 302
5359: IFFALSE 5397
// begin Say ( Gary , D2-Gary-1 ) ;
5361: LD_EXP 10
5365: PPUSH
5366: LD_STRING D2-Gary-1
5368: PPUSH
5369: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5373: LD_EXP 1
5377: PPUSH
5378: LD_STRING D2-JMM-1
5380: PPUSH
5381: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5385: LD_EXP 10
5389: PPUSH
5390: LD_STRING D2-Gary-2
5392: PPUSH
5393: CALL_OW 88
// end ; Video ( false ) ;
5397: LD_INT 0
5399: PPUSH
5400: CALL 87534 0 1
// ChangeMissionObjectives ( M1 ) ;
5404: LD_STRING M1
5406: PPUSH
5407: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5411: LD_INT 38
5413: PPUSH
5414: LD_INT 1
5416: PPUSH
5417: LD_INT 100
5419: PPUSH
5420: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5424: LD_INT 47
5426: PPUSH
5427: LD_INT 1
5429: PPUSH
5430: LD_INT 50
5432: PPUSH
5433: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5437: LD_INT 47
5439: PPUSH
5440: LD_INT 3
5442: PPUSH
5443: LD_INT 50
5445: PPUSH
5446: CALL_OW 291
// SaveForQuickRestart ;
5450: CALL_OW 22
// end ;
5454: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5455: LD_EXP 1
5459: PPUSH
5460: LD_EXP 11
5464: PPUSH
5465: CALL_OW 296
5469: PUSH
5470: LD_INT 15
5472: LESS
5473: IFFALSE 6301
5475: GO 5477
5477: DISABLE
5478: LD_INT 0
5480: PPUSH
// begin wait ( 0 0$3 ) ;
5481: LD_INT 105
5483: PPUSH
5484: CALL_OW 67
// Video ( true ) ;
5488: LD_INT 1
5490: PPUSH
5491: CALL 87534 0 1
// ComExitVehicle ( JMM ) ;
5495: LD_EXP 1
5499: PPUSH
5500: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5504: LD_EXP 1
5508: PPUSH
5509: CALL_OW 87
// if Truman then
5513: LD_EXP 21
5517: IFFALSE 5654
// begin ComMoveUnit ( Truman , JMM ) ;
5519: LD_EXP 21
5523: PPUSH
5524: LD_EXP 1
5528: PPUSH
5529: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5533: LD_INT 35
5535: PPUSH
5536: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
5540: LD_EXP 21
5544: PPUSH
5545: LD_EXP 1
5549: PPUSH
5550: CALL_OW 296
5554: PUSH
5555: LD_INT 6
5557: LESS
5558: IFFALSE 5533
// ComTurnUnit ( Truman , JMM ) ;
5560: LD_EXP 21
5564: PPUSH
5565: LD_EXP 1
5569: PPUSH
5570: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
5574: LD_EXP 1
5578: PPUSH
5579: LD_EXP 21
5583: PPUSH
5584: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
5588: LD_EXP 21
5592: PPUSH
5593: LD_STRING D2-Tru-1
5595: PPUSH
5596: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
5600: LD_EXP 1
5604: PPUSH
5605: LD_STRING D2-JMM-Tru-1
5607: PPUSH
5608: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
5612: LD_EXP 21
5616: PPUSH
5617: LD_STRING D2-Tru-2
5619: PPUSH
5620: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
5624: LD_EXP 21
5628: PPUSH
5629: LD_INT 79
5631: PPUSH
5632: LD_INT 41
5634: PPUSH
5635: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
5639: LD_EXP 21
5643: PPUSH
5644: LD_INT 17
5646: PPUSH
5647: LD_INT 31
5649: PPUSH
5650: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
5654: LD_EXP 1
5658: PPUSH
5659: LD_EXP 11
5663: PPUSH
5664: CALL_OW 179
// p := 15 ;
5668: LD_ADDR_VAR 0 1
5672: PUSH
5673: LD_INT 15
5675: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5676: LD_INT 35
5678: PPUSH
5679: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5683: LD_EXP 11
5687: PUSH
5688: LD_EXP 13
5692: PUSH
5693: LD_EXP 12
5697: PUSH
5698: LD_EXP 14
5702: PUSH
5703: LD_EXP 8
5707: PUSH
5708: EMPTY
5709: LIST
5710: LIST
5711: LIST
5712: LIST
5713: LIST
5714: PPUSH
5715: LD_EXP 1
5719: PPUSH
5720: CALL_OW 112
// p := p - 1 ;
5724: LD_ADDR_VAR 0 1
5728: PUSH
5729: LD_VAR 0 1
5733: PUSH
5734: LD_INT 1
5736: MINUS
5737: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5738: LD_EXP 1
5742: PPUSH
5743: LD_EXP 11
5747: PPUSH
5748: CALL_OW 296
5752: PUSH
5753: LD_INT 5
5755: LESS
5756: PUSH
5757: LD_VAR 0 1
5761: PUSH
5762: LD_INT 0
5764: LESSEQUAL
5765: OR
5766: IFFALSE 5676
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5768: LD_EXP 11
5772: PUSH
5773: LD_EXP 13
5777: PUSH
5778: LD_EXP 12
5782: PUSH
5783: LD_EXP 14
5787: PUSH
5788: LD_EXP 8
5792: PUSH
5793: EMPTY
5794: LIST
5795: LIST
5796: LIST
5797: LIST
5798: LIST
5799: PPUSH
5800: LD_EXP 1
5804: PPUSH
5805: CALL_OW 119
// if not IsInUnit ( JMM ) then
5809: LD_EXP 1
5813: PPUSH
5814: CALL_OW 310
5818: NOT
5819: IFFALSE 5835
// ComTurnUnit ( JMM , Simms ) ;
5821: LD_EXP 1
5825: PPUSH
5826: LD_EXP 11
5830: PPUSH
5831: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5835: LD_EXP 11
5839: PUSH
5840: LD_EXP 13
5844: PUSH
5845: LD_EXP 12
5849: PUSH
5850: LD_EXP 14
5854: PUSH
5855: EMPTY
5856: LIST
5857: LIST
5858: LIST
5859: LIST
5860: PPUSH
5861: LD_EXP 1
5865: PPUSH
5866: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5870: LD_EXP 1
5874: PUSH
5875: LD_EXP 11
5879: PUSH
5880: EMPTY
5881: LIST
5882: LIST
5883: PPUSH
5884: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5888: LD_EXP 11
5892: PPUSH
5893: LD_STRING D2a-Sim-1
5895: PPUSH
5896: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5900: LD_EXP 1
5904: PPUSH
5905: LD_STRING D2a-JMM-1
5907: PPUSH
5908: CALL_OW 88
// if IsOk ( Joan ) then
5912: LD_EXP 13
5916: PPUSH
5917: CALL_OW 302
5921: IFFALSE 5999
// begin if not IsInUnit ( JMM ) then
5923: LD_EXP 1
5927: PPUSH
5928: CALL_OW 310
5932: NOT
5933: IFFALSE 5949
// ComTurnUnit ( JMM , Joan ) ;
5935: LD_EXP 1
5939: PPUSH
5940: LD_EXP 13
5944: PPUSH
5945: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5949: LD_EXP 13
5953: PPUSH
5954: LD_EXP 1
5958: PPUSH
5959: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5963: LD_EXP 13
5967: PPUSH
5968: LD_STRING D2b-Joan-1
5970: PPUSH
5971: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5975: LD_EXP 1
5979: PPUSH
5980: LD_STRING D2b-JMM-1
5982: PPUSH
5983: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5987: LD_EXP 13
5991: PPUSH
5992: LD_STRING D2b-Joan-2
5994: PPUSH
5995: CALL_OW 88
// end ; if IsOk ( Denis ) then
5999: LD_EXP 12
6003: PPUSH
6004: CALL_OW 302
6008: IFFALSE 6062
// begin if not IsInUnit ( JMM ) then
6010: LD_EXP 1
6014: PPUSH
6015: CALL_OW 310
6019: NOT
6020: IFFALSE 6036
// ComTurnUnit ( JMM , Denis ) ;
6022: LD_EXP 1
6026: PPUSH
6027: LD_EXP 12
6031: PPUSH
6032: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
6036: LD_EXP 12
6040: PPUSH
6041: LD_EXP 1
6045: PPUSH
6046: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
6050: LD_EXP 12
6054: PPUSH
6055: LD_STRING D2c-Den-1
6057: PPUSH
6058: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
6062: LD_EXP 8
6066: PPUSH
6067: CALL_OW 302
6071: PUSH
6072: LD_STRING 08_Kikuchi
6074: PPUSH
6075: CALL_OW 28
6079: NOT
6080: AND
6081: IFFALSE 6176
// begin repeat wait ( 0 0$1 ) ;
6083: LD_INT 35
6085: PPUSH
6086: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
6090: LD_EXP 8
6094: PPUSH
6095: LD_EXP 1
6099: PPUSH
6100: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
6104: LD_EXP 1
6108: PPUSH
6109: LD_EXP 8
6113: PPUSH
6114: CALL_OW 296
6118: PUSH
6119: LD_INT 5
6121: LESS
6122: IFFALSE 6083
// ComTurnUnit ( Kikuchi , JMM ) ;
6124: LD_EXP 8
6128: PPUSH
6129: LD_EXP 1
6133: PPUSH
6134: CALL_OW 119
// if not IsInUnit ( JMM ) then
6138: LD_EXP 1
6142: PPUSH
6143: CALL_OW 310
6147: NOT
6148: IFFALSE 6164
// ComTurnUnit ( JMM , Kikuchi ) ;
6150: LD_EXP 1
6154: PPUSH
6155: LD_EXP 8
6159: PPUSH
6160: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
6164: LD_EXP 8
6168: PPUSH
6169: LD_STRING D3b-Yam-1
6171: PPUSH
6172: CALL_OW 88
// end ; if IsOk ( Khatam ) then
6176: LD_EXP 14
6180: PPUSH
6181: CALL_OW 302
6185: IFFALSE 6251
// begin if not IsInUnit ( JMM ) then
6187: LD_EXP 1
6191: PPUSH
6192: CALL_OW 310
6196: NOT
6197: IFFALSE 6213
// ComTurnUnit ( JMM , Khatam ) ;
6199: LD_EXP 1
6203: PPUSH
6204: LD_EXP 14
6208: PPUSH
6209: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
6213: LD_EXP 14
6217: PPUSH
6218: LD_EXP 1
6222: PPUSH
6223: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
6227: LD_EXP 1
6231: PPUSH
6232: LD_STRING D2c-JMM-1
6234: PPUSH
6235: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
6239: LD_EXP 14
6243: PPUSH
6244: LD_STRING D2c-Khat-1
6246: PPUSH
6247: CALL_OW 88
// end ; Video ( false ) ;
6251: LD_INT 0
6253: PPUSH
6254: CALL 87534 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
6258: LD_INT 22
6260: PUSH
6261: LD_INT 4
6263: PUSH
6264: EMPTY
6265: LIST
6266: LIST
6267: PPUSH
6268: CALL_OW 69
6272: PUSH
6273: LD_EXP 21
6277: DIFF
6278: PPUSH
6279: LD_INT 1
6281: PPUSH
6282: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
6286: LD_STRING M1a
6288: PPUSH
6289: CALL_OW 337
// joinEpsilon := 1 ;
6293: LD_ADDR_EXP 31
6297: PUSH
6298: LD_INT 1
6300: ST_TO_ADDR
// end ;
6301: PPOPN 1
6303: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6304: LD_INT 38
6306: PPUSH
6307: LD_INT 1
6309: PPUSH
6310: CALL_OW 289
6314: PUSH
6315: LD_INT 0
6317: EQUAL
6318: PUSH
6319: LD_INT 47
6321: PPUSH
6322: LD_INT 1
6324: PPUSH
6325: CALL_OW 289
6329: PUSH
6330: LD_INT 0
6332: EQUAL
6333: AND
6334: PUSH
6335: LD_INT 47
6337: PPUSH
6338: LD_INT 2
6340: PPUSH
6341: CALL_OW 289
6345: PUSH
6346: LD_INT 0
6348: EQUAL
6349: AND
6350: IFFALSE 6475
6352: GO 6354
6354: DISABLE
6355: LD_INT 0
6357: PPUSH
// begin p := 0 ;
6358: LD_ADDR_VAR 0 1
6362: PUSH
6363: LD_INT 0
6365: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6366: LD_INT 38
6368: PUSH
6369: LD_INT 47
6371: PUSH
6372: EMPTY
6373: LIST
6374: LIST
6375: PPUSH
6376: LD_INT 56
6378: PPUSH
6379: LD_INT 0
6381: PPUSH
6382: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6386: LD_INT 35
6388: PPUSH
6389: CALL_OW 67
// p := p + 1 ;
6393: LD_ADDR_VAR 0 1
6397: PUSH
6398: LD_VAR 0 1
6402: PUSH
6403: LD_INT 1
6405: PLUS
6406: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6407: LD_INT 38
6409: PUSH
6410: LD_INT 47
6412: PUSH
6413: EMPTY
6414: LIST
6415: LIST
6416: PPUSH
6417: LD_INT 56
6419: PPUSH
6420: LD_INT 0
6422: PPUSH
6423: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6427: LD_INT 38
6429: PPUSH
6430: LD_INT 27
6432: PPUSH
6433: CALL_OW 308
6437: IFFALSE 6446
// RemoveUnit ( cargo1 ) ;
6439: LD_INT 38
6441: PPUSH
6442: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6446: LD_INT 47
6448: PPUSH
6449: LD_INT 27
6451: PPUSH
6452: CALL_OW 308
6456: IFFALSE 6465
// RemoveUnit ( cargo2 ) ;
6458: LD_INT 47
6460: PPUSH
6461: CALL_OW 64
// until p > 30 ;
6465: LD_VAR 0 1
6469: PUSH
6470: LD_INT 30
6472: GREATER
6473: IFFALSE 6386
// end ;
6475: PPOPN 1
6477: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6478: LD_EXP 67
6482: PUSH
6483: LD_INT 1
6485: EQUAL
6486: IFFALSE 7660
6488: GO 6490
6490: DISABLE
6491: LD_INT 0
6493: PPUSH
6494: PPUSH
6495: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6496: LD_ADDR_VAR 0 1
6500: PUSH
6501: LD_INT 22
6503: PUSH
6504: LD_INT 1
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: LD_INT 25
6513: PUSH
6514: LD_INT 4
6516: PUSH
6517: EMPTY
6518: LIST
6519: LIST
6520: PUSH
6521: LD_INT 26
6523: PUSH
6524: LD_INT 1
6526: PUSH
6527: EMPTY
6528: LIST
6529: LIST
6530: PUSH
6531: EMPTY
6532: LIST
6533: LIST
6534: LIST
6535: PPUSH
6536: CALL_OW 69
6540: PUSH
6541: LD_EXP 1
6545: PUSH
6546: LD_EXP 2
6550: PUSH
6551: LD_EXP 3
6555: PUSH
6556: LD_EXP 4
6560: PUSH
6561: LD_EXP 5
6565: PUSH
6566: LD_EXP 6
6570: PUSH
6571: LD_EXP 7
6575: PUSH
6576: LD_EXP 8
6580: PUSH
6581: LD_EXP 9
6585: PUSH
6586: LD_EXP 10
6590: PUSH
6591: LD_EXP 11
6595: PUSH
6596: LD_EXP 12
6600: PUSH
6601: LD_EXP 13
6605: PUSH
6606: LD_EXP 14
6610: PUSH
6611: LD_EXP 15
6615: PUSH
6616: LD_EXP 16
6620: PUSH
6621: LD_EXP 17
6625: PUSH
6626: LD_EXP 18
6630: PUSH
6631: LD_EXP 20
6635: PUSH
6636: LD_EXP 26
6640: PUSH
6641: EMPTY
6642: LIST
6643: LIST
6644: LIST
6645: LIST
6646: LIST
6647: LIST
6648: LIST
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: LIST
6656: LIST
6657: LIST
6658: LIST
6659: LIST
6660: LIST
6661: LIST
6662: DIFF
6663: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6664: LD_ADDR_VAR 0 2
6668: PUSH
6669: LD_INT 22
6671: PUSH
6672: LD_INT 1
6674: PUSH
6675: EMPTY
6676: LIST
6677: LIST
6678: PUSH
6679: LD_INT 26
6681: PUSH
6682: LD_INT 1
6684: PUSH
6685: EMPTY
6686: LIST
6687: LIST
6688: PUSH
6689: LD_INT 2
6691: PUSH
6692: LD_INT 25
6694: PUSH
6695: LD_INT 1
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: LD_INT 25
6704: PUSH
6705: LD_INT 2
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 25
6714: PUSH
6715: LD_INT 3
6717: PUSH
6718: EMPTY
6719: LIST
6720: LIST
6721: PUSH
6722: EMPTY
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: PUSH
6728: EMPTY
6729: LIST
6730: LIST
6731: LIST
6732: PPUSH
6733: CALL_OW 69
6737: PUSH
6738: LD_EXP 1
6742: PUSH
6743: LD_EXP 2
6747: PUSH
6748: LD_EXP 3
6752: PUSH
6753: LD_EXP 4
6757: PUSH
6758: LD_EXP 5
6762: PUSH
6763: LD_EXP 6
6767: PUSH
6768: LD_EXP 7
6772: PUSH
6773: LD_EXP 8
6777: PUSH
6778: LD_EXP 9
6782: PUSH
6783: LD_EXP 10
6787: PUSH
6788: LD_EXP 11
6792: PUSH
6793: LD_EXP 12
6797: PUSH
6798: LD_EXP 13
6802: PUSH
6803: LD_EXP 14
6807: PUSH
6808: LD_EXP 15
6812: PUSH
6813: LD_EXP 16
6817: PUSH
6818: LD_EXP 17
6822: PUSH
6823: LD_EXP 18
6827: PUSH
6828: LD_EXP 20
6832: PUSH
6833: LD_EXP 26
6837: PUSH
6838: EMPTY
6839: LIST
6840: LIST
6841: LIST
6842: LIST
6843: LIST
6844: LIST
6845: LIST
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: DIFF
6860: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6861: LD_EXP 10
6865: PUSH
6866: LD_VAR 0 2
6870: OR
6871: PUSH
6872: LD_EXP 17
6876: PUSH
6877: LD_VAR 0 1
6881: OR
6882: AND
6883: IFFALSE 7102
// begin DialogueOn ;
6885: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6889: LD_EXP 17
6893: PPUSH
6894: CALL_OW 302
6898: IFFALSE 6914
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6900: LD_EXP 17
6904: PPUSH
6905: LD_STRING D3-Sci1-1
6907: PPUSH
6908: CALL_OW 88
6912: GO 6926
// Say ( tmp1 , D3-Sci1-1 ) ;
6914: LD_VAR 0 1
6918: PPUSH
6919: LD_STRING D3-Sci1-1
6921: PPUSH
6922: CALL_OW 88
// if IsOk ( Gary ) then
6926: LD_EXP 10
6930: PPUSH
6931: CALL_OW 302
6935: IFFALSE 6951
// Say ( Gary , D3-Gary-1 ) else
6937: LD_EXP 10
6941: PPUSH
6942: LD_STRING D3-Gary-1
6944: PPUSH
6945: CALL_OW 88
6949: GO 6963
// Say ( tmp2 , D3-Gary-1 ) ;
6951: LD_VAR 0 2
6955: PPUSH
6956: LD_STRING D3-Gary-1
6958: PPUSH
6959: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6963: LD_EXP 17
6967: PPUSH
6968: CALL_OW 302
6972: IFFALSE 6988
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6974: LD_EXP 17
6978: PPUSH
6979: LD_STRING D3-Sci1-2
6981: PPUSH
6982: CALL_OW 88
6986: GO 7000
// Say ( tmp1 , D3-Sci1-2 ) ;
6988: LD_VAR 0 1
6992: PPUSH
6993: LD_STRING D3-Sci1-2
6995: PPUSH
6996: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
7000: LD_EXP 1
7004: PPUSH
7005: LD_STRING D3-JMM-2
7007: PPUSH
7008: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
7012: LD_EXP 17
7016: PPUSH
7017: CALL_OW 302
7021: IFFALSE 7037
// Say ( DeltaDoctor , D3-Sci1-3 ) else
7023: LD_EXP 17
7027: PPUSH
7028: LD_STRING D3-Sci1-3
7030: PPUSH
7031: CALL_OW 88
7035: GO 7049
// Say ( tmp1 , D3-Sci1-3 ) ;
7037: LD_VAR 0 1
7041: PPUSH
7042: LD_STRING D3-Sci1-3
7044: PPUSH
7045: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7049: LD_EXP 1
7053: PPUSH
7054: LD_STRING D3-JMM-3
7056: PPUSH
7057: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
7061: LD_EXP 17
7065: PPUSH
7066: CALL_OW 302
7070: IFFALSE 7086
// Say ( DeltaDoctor , D3-Sci1-4 ) else
7072: LD_EXP 17
7076: PPUSH
7077: LD_STRING D3-Sci1-4
7079: PPUSH
7080: CALL_OW 88
7084: GO 7098
// Say ( tmp1 , D3-Sci1-4 ) ;
7086: LD_VAR 0 1
7090: PPUSH
7091: LD_STRING D3-Sci1-4
7093: PPUSH
7094: CALL_OW 88
// DialogueOff ;
7098: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
7102: LD_INT 12
7104: PPUSH
7105: LD_INT 1
7107: PPUSH
7108: LD_INT 1
7110: PPUSH
7111: CALL_OW 322
// SetTech ( tech_rocket , 1 , state_enabled ) ;
7115: LD_INT 40
7117: PPUSH
7118: LD_INT 1
7120: PPUSH
7121: LD_INT 1
7123: PPUSH
7124: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
7128: LD_INT 32
7130: PPUSH
7131: LD_INT 1
7133: PPUSH
7134: LD_INT 1
7136: PPUSH
7137: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
7141: LD_INT 12
7143: PPUSH
7144: LD_INT 1
7146: PPUSH
7147: LD_INT 1
7149: PPUSH
7150: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
7154: LD_INT 33
7156: PPUSH
7157: LD_INT 1
7159: PPUSH
7160: LD_INT 1
7162: PPUSH
7163: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
7167: LD_STRING M2
7169: PPUSH
7170: CALL_OW 337
// wait ( 3 3$0 ) ;
7174: LD_INT 6300
7176: PPUSH
7177: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7181: LD_INT 35
7183: PPUSH
7184: CALL_OW 67
// until not InBattle ( 1 ) ;
7188: LD_INT 1
7190: PPUSH
7191: CALL_OW 463
7195: NOT
7196: IFFALSE 7181
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
7198: LD_EXP 11
7202: PPUSH
7203: CALL_OW 302
7207: PUSH
7208: LD_EXP 17
7212: PPUSH
7213: CALL_OW 302
7217: AND
7218: IFFALSE 7387
// begin DialogueOn ;
7220: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7224: LD_EXP 11
7228: PPUSH
7229: LD_STRING D3a-Sim-1
7231: PPUSH
7232: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
7236: LD_EXP 17
7240: PPUSH
7241: LD_STRING D3a-Sci1-1
7243: PPUSH
7244: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7248: LD_EXP 11
7252: PPUSH
7253: LD_STRING D3a-Sim-2
7255: PPUSH
7256: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
7260: LD_EXP 17
7264: PPUSH
7265: LD_STRING D3a-Sci1-2
7267: PPUSH
7268: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7272: LD_EXP 11
7276: PPUSH
7277: LD_STRING D3a-Sim-3
7279: PPUSH
7280: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
7284: LD_EXP 17
7288: PPUSH
7289: LD_STRING D3a-Sci1-3
7291: PPUSH
7292: CALL_OW 88
// if IsOK ( Joan ) then
7296: LD_EXP 13
7300: PPUSH
7301: CALL_OW 302
7305: IFFALSE 7321
// Say ( Simms , D3a-Sim-4 ) else
7307: LD_EXP 11
7311: PPUSH
7312: LD_STRING D3a-Sim-4
7314: PPUSH
7315: CALL_OW 88
7319: GO 7333
// Say ( Simms , D3a-Sim-4a ) ;
7321: LD_EXP 11
7325: PPUSH
7326: LD_STRING D3a-Sim-4a
7328: PPUSH
7329: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7333: LD_EXP 17
7337: PPUSH
7338: LD_STRING D3a-Sci1-4
7340: PPUSH
7341: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7345: LD_EXP 11
7349: PPUSH
7350: LD_STRING D3a-Sim-5
7352: PPUSH
7353: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7357: LD_EXP 17
7361: PPUSH
7362: LD_STRING D3a-Sci1-5
7364: PPUSH
7365: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7369: LD_EXP 11
7373: PPUSH
7374: LD_STRING D3a-Sim-6
7376: PPUSH
7377: CALL_OW 88
// DialogueOff ;
7381: CALL_OW 7
// end else
7385: GO 7660
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
7387: LD_ADDR_VAR 0 3
7391: PUSH
7392: LD_INT 22
7394: PUSH
7395: LD_INT 1
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: LD_INT 26
7404: PUSH
7405: LD_INT 1
7407: PUSH
7408: EMPTY
7409: LIST
7410: LIST
7411: PUSH
7412: LD_INT 25
7414: PUSH
7415: LD_INT 4
7417: PUSH
7418: EMPTY
7419: LIST
7420: LIST
7421: PUSH
7422: EMPTY
7423: LIST
7424: LIST
7425: LIST
7426: PPUSH
7427: CALL_OW 69
7431: PUSH
7432: LD_EXP 1
7436: PUSH
7437: LD_EXP 7
7441: PUSH
7442: LD_EXP 6
7446: PUSH
7447: LD_EXP 11
7451: PUSH
7452: LD_EXP 14
7456: PUSH
7457: EMPTY
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: LIST
7463: DIFF
7464: ST_TO_ADDR
// if tmp3 > 0 then
7465: LD_VAR 0 3
7469: PUSH
7470: LD_INT 0
7472: GREATER
7473: IFFALSE 7660
// begin DialogueOn ;
7475: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7479: LD_EXP 11
7483: PPUSH
7484: LD_STRING D3a-Sim-1
7486: PPUSH
7487: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7491: LD_VAR 0 3
7495: PUSH
7496: LD_INT 1
7498: ARRAY
7499: PPUSH
7500: LD_STRING D3a-Sci1-1
7502: PPUSH
7503: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7507: LD_EXP 11
7511: PPUSH
7512: LD_STRING D3a-Sim-2
7514: PPUSH
7515: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7519: LD_VAR 0 3
7523: PUSH
7524: LD_INT 1
7526: ARRAY
7527: PPUSH
7528: LD_STRING D3a-Sci1-2
7530: PPUSH
7531: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7535: LD_EXP 11
7539: PPUSH
7540: LD_STRING D3a-Sim-3
7542: PPUSH
7543: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 1
7554: ARRAY
7555: PPUSH
7556: LD_STRING D3a-Sci1-3
7558: PPUSH
7559: CALL_OW 88
// if IsOK ( Joan ) then
7563: LD_EXP 13
7567: PPUSH
7568: CALL_OW 302
7572: IFFALSE 7588
// Say ( Simms , D3a-Sim-4 ) else
7574: LD_EXP 11
7578: PPUSH
7579: LD_STRING D3a-Sim-4
7581: PPUSH
7582: CALL_OW 88
7586: GO 7600
// Say ( Simms , D3a-Sim-4a ) ;
7588: LD_EXP 11
7592: PPUSH
7593: LD_STRING D3a-Sim-4a
7595: PPUSH
7596: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7600: LD_VAR 0 3
7604: PUSH
7605: LD_INT 1
7607: ARRAY
7608: PPUSH
7609: LD_STRING D3a-Sci1-4
7611: PPUSH
7612: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7616: LD_EXP 11
7620: PPUSH
7621: LD_STRING D3a-Sim-5
7623: PPUSH
7624: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7628: LD_VAR 0 3
7632: PUSH
7633: LD_INT 1
7635: ARRAY
7636: PPUSH
7637: LD_STRING D3a-Sci1-5
7639: PPUSH
7640: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7644: LD_EXP 11
7648: PPUSH
7649: LD_STRING D3a-Sim-6
7651: PPUSH
7652: CALL_OW 88
// DialogueOff ;
7656: CALL_OW 7
// end ; end ; end ;
7660: PPOPN 3
7662: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7663: LD_EXP 31
7667: PUSH
7668: LD_INT 1
7670: EQUAL
7671: IFFALSE 8006
7673: GO 7675
7675: DISABLE
7676: LD_INT 0
7678: PPUSH
// begin wait ( 2 2$00 ) ;
7679: LD_INT 4200
7681: PPUSH
7682: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7686: LD_EXP 18
7690: PPUSH
7691: LD_STRING D4-FSol1-1
7693: PPUSH
7694: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7698: LD_STRING M3
7700: PPUSH
7701: CALL_OW 337
// PrepareRussians ;
7705: CALL 3782 0 0
// spawnRussians := true ;
7709: LD_ADDR_EXP 60
7713: PUSH
7714: LD_INT 1
7716: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7717: LD_ADDR_VAR 0 1
7721: PUSH
7722: LD_INT 1
7724: PPUSH
7725: LD_INT 100
7727: PPUSH
7728: CALL_OW 12
7732: ST_TO_ADDR
// if difficulty = 1 then
7733: LD_OWVAR 67
7737: PUSH
7738: LD_INT 1
7740: EQUAL
7741: IFFALSE 7824
// begin if rnd > 0 and rnd < 51 then
7743: LD_VAR 0 1
7747: PUSH
7748: LD_INT 0
7750: GREATER
7751: PUSH
7752: LD_VAR 0 1
7756: PUSH
7757: LD_INT 51
7759: LESS
7760: AND
7761: IFFALSE 7770
// BuildRussianBase ( 2 ) ;
7763: LD_INT 2
7765: PPUSH
7766: CALL 12112 0 1
// if rnd > 50 and rnd < 81 then
7770: LD_VAR 0 1
7774: PUSH
7775: LD_INT 50
7777: GREATER
7778: PUSH
7779: LD_VAR 0 1
7783: PUSH
7784: LD_INT 81
7786: LESS
7787: AND
7788: IFFALSE 7797
// BuildRussianBase ( 1 ) ;
7790: LD_INT 1
7792: PPUSH
7793: CALL 12112 0 1
// if rnd > 80 and rnd < 101 then
7797: LD_VAR 0 1
7801: PUSH
7802: LD_INT 80
7804: GREATER
7805: PUSH
7806: LD_VAR 0 1
7810: PUSH
7811: LD_INT 101
7813: LESS
7814: AND
7815: IFFALSE 7824
// BuildRussianBase ( 3 ) ;
7817: LD_INT 3
7819: PPUSH
7820: CALL 12112 0 1
// end ; if difficulty = 2 then
7824: LD_OWVAR 67
7828: PUSH
7829: LD_INT 2
7831: EQUAL
7832: IFFALSE 7915
// begin if rnd > 0 and rnd < 61 then
7834: LD_VAR 0 1
7838: PUSH
7839: LD_INT 0
7841: GREATER
7842: PUSH
7843: LD_VAR 0 1
7847: PUSH
7848: LD_INT 61
7850: LESS
7851: AND
7852: IFFALSE 7861
// BuildRussianBase ( 2 ) ;
7854: LD_INT 2
7856: PPUSH
7857: CALL 12112 0 1
// if rnd > 60 and rnd < 81 then
7861: LD_VAR 0 1
7865: PUSH
7866: LD_INT 60
7868: GREATER
7869: PUSH
7870: LD_VAR 0 1
7874: PUSH
7875: LD_INT 81
7877: LESS
7878: AND
7879: IFFALSE 7888
// BuildRussianBase ( 1 ) ;
7881: LD_INT 1
7883: PPUSH
7884: CALL 12112 0 1
// if rnd > 80 and rnd < 101 then
7888: LD_VAR 0 1
7892: PUSH
7893: LD_INT 80
7895: GREATER
7896: PUSH
7897: LD_VAR 0 1
7901: PUSH
7902: LD_INT 101
7904: LESS
7905: AND
7906: IFFALSE 7915
// BuildRussianBase ( 3 ) ;
7908: LD_INT 3
7910: PPUSH
7911: CALL 12112 0 1
// end ; if difficulty >= 3 then
7915: LD_OWVAR 67
7919: PUSH
7920: LD_INT 3
7922: GREATEREQUAL
7923: IFFALSE 8006
// begin if rnd > 0 and rnd < 71 then
7925: LD_VAR 0 1
7929: PUSH
7930: LD_INT 0
7932: GREATER
7933: PUSH
7934: LD_VAR 0 1
7938: PUSH
7939: LD_INT 71
7941: LESS
7942: AND
7943: IFFALSE 7952
// BuildRussianBase ( 3 ) ;
7945: LD_INT 3
7947: PPUSH
7948: CALL 12112 0 1
// if rnd > 70 and rnd < 81 then
7952: LD_VAR 0 1
7956: PUSH
7957: LD_INT 70
7959: GREATER
7960: PUSH
7961: LD_VAR 0 1
7965: PUSH
7966: LD_INT 81
7968: LESS
7969: AND
7970: IFFALSE 7979
// BuildRussianBase ( 2 ) ;
7972: LD_INT 2
7974: PPUSH
7975: CALL 12112 0 1
// if rnd > 80 and rnd < 101 then
7979: LD_VAR 0 1
7983: PUSH
7984: LD_INT 80
7986: GREATER
7987: PUSH
7988: LD_VAR 0 1
7992: PUSH
7993: LD_INT 101
7995: LESS
7996: AND
7997: IFFALSE 8006
// BuildRussianBase ( 1 ) ;
7999: LD_INT 1
8001: PPUSH
8002: CALL 12112 0 1
// end ; end ;
8006: PPOPN 1
8008: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
8009: LD_INT 54
8011: PPUSH
8012: LD_INT 1
8014: PPUSH
8015: CALL_OW 321
8019: PUSH
8020: LD_INT 2
8022: EQUAL
8023: PUSH
8024: LD_INT 21
8026: PPUSH
8027: LD_INT 1
8029: PPUSH
8030: CALL_OW 321
8034: PUSH
8035: LD_INT 2
8037: EQUAL
8038: OR
8039: PUSH
8040: LD_INT 22
8042: PPUSH
8043: LD_INT 1
8045: PPUSH
8046: CALL_OW 321
8050: PUSH
8051: LD_INT 2
8053: EQUAL
8054: OR
8055: IFFALSE 8357
8057: GO 8059
8059: DISABLE
8060: LD_INT 0
8062: PPUSH
8063: PPUSH
// begin if IsOk ( DeltaDoctor ) then
8064: LD_EXP 17
8068: PPUSH
8069: CALL_OW 302
8073: IFFALSE 8087
// tmp := DeltaDoctor else
8075: LD_ADDR_VAR 0 2
8079: PUSH
8080: LD_EXP 17
8084: ST_TO_ADDR
8085: GO 8097
// tmp := Denis ;
8087: LD_ADDR_VAR 0 2
8091: PUSH
8092: LD_EXP 12
8096: ST_TO_ADDR
// if tmp then
8097: LD_VAR 0 2
8101: IFFALSE 8195
// begin DialogueOn ;
8103: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
8107: LD_EXP 1
8111: PPUSH
8112: LD_STRING D6-JMM-1
8114: PPUSH
8115: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
8119: LD_VAR 0 2
8123: PPUSH
8124: LD_STRING D6-Sci1-1
8126: PPUSH
8127: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
8131: LD_EXP 1
8135: PPUSH
8136: LD_STRING D6-JMM-2
8138: PPUSH
8139: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
8143: LD_VAR 0 2
8147: PPUSH
8148: LD_STRING D6-Sci1-2
8150: PPUSH
8151: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
8155: LD_EXP 1
8159: PPUSH
8160: LD_STRING D6-JMM-3
8162: PPUSH
8163: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
8167: LD_VAR 0 2
8171: PPUSH
8172: LD_STRING D6-Sci1-3
8174: PPUSH
8175: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
8179: LD_EXP 1
8183: PPUSH
8184: LD_STRING D6-JMM-4
8186: PPUSH
8187: CALL_OW 88
// DialogueOff ;
8191: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
8195: LD_INT 1050
8197: PPUSH
8198: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
8202: LD_EXP 51
8206: PUSH
8207: LD_INT 0
8209: EQUAL
8210: PUSH
8211: LD_EXP 14
8215: PPUSH
8216: CALL_OW 302
8220: AND
8221: IFFALSE 8279
// begin DialogueOn ;
8223: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
8227: LD_EXP 29
8231: PPUSH
8232: LD_STRING D5-Ar1-1
8234: PPUSH
8235: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
8239: LD_EXP 28
8243: PPUSH
8244: LD_STRING D5-Diet-1
8246: PPUSH
8247: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
8251: LD_EXP 29
8255: PPUSH
8256: LD_STRING D5-Ar1-2
8258: PPUSH
8259: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
8263: LD_EXP 28
8267: PPUSH
8268: LD_STRING D5-Diet-2
8270: PPUSH
8271: CALL_OW 88
// DialogueOff ;
8275: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
8279: LD_INT 35
8281: PPUSH
8282: CALL_OW 67
// until tick > 10 10$00 ;
8286: LD_OWVAR 1
8290: PUSH
8291: LD_INT 21000
8293: GREATER
8294: IFFALSE 8279
// wait ( 1 1$30 ) ;
8296: LD_INT 3150
8298: PPUSH
8299: CALL_OW 67
// if arabianTrait = 0 then
8303: LD_EXP 51
8307: PUSH
8308: LD_INT 0
8310: EQUAL
8311: IFFALSE 8357
// begin arabianTrait = 1 ;
8313: LD_ADDR_EXP 51
8317: PUSH
8318: LD_INT 1
8320: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
8321: LD_INT 2
8323: PPUSH
8324: LD_INT 3
8326: PPUSH
8327: LD_INT 1
8329: PPUSH
8330: LD_INT 1
8332: PPUSH
8333: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
8337: LD_INT 2
8339: PPUSH
8340: LD_INT 6
8342: PPUSH
8343: LD_INT 1
8345: PPUSH
8346: LD_INT 1
8348: PPUSH
8349: CALL_OW 80
// PrepareArabianTrait ;
8353: CALL 8360 0 0
// end ; end ;
8357: PPOPN 2
8359: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8360: LD_INT 0
8362: PPUSH
8363: PPUSH
8364: PPUSH
8365: PPUSH
8366: PPUSH
8367: PPUSH
8368: PPUSH
8369: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8370: LD_ADDR_VAR 0 6
8374: PUSH
8375: LD_INT 22
8377: PUSH
8378: LD_INT 2
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: PUSH
8385: LD_INT 2
8387: PUSH
8388: LD_INT 25
8390: PUSH
8391: LD_INT 4
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: LD_INT 25
8400: PUSH
8401: LD_INT 2
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PUSH
8408: LD_INT 25
8410: PUSH
8411: LD_INT 3
8413: PUSH
8414: EMPTY
8415: LIST
8416: LIST
8417: PUSH
8418: EMPTY
8419: LIST
8420: LIST
8421: LIST
8422: LIST
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PPUSH
8428: CALL_OW 69
8432: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8433: LD_ADDR_VAR 0 5
8437: PUSH
8438: LD_INT 22
8440: PUSH
8441: LD_INT 2
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: PUSH
8448: LD_INT 21
8450: PUSH
8451: LD_INT 1
8453: PUSH
8454: EMPTY
8455: LIST
8456: LIST
8457: PUSH
8458: LD_INT 2
8460: PUSH
8461: LD_INT 25
8463: PUSH
8464: LD_INT 1
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: LD_INT 25
8473: PUSH
8474: LD_INT 8
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: LD_INT 25
8483: PUSH
8484: LD_INT 15
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 69
8506: PUSH
8507: LD_EXP 28
8511: PUSH
8512: EMPTY
8513: LIST
8514: DIFF
8515: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8516: LD_ADDR_VAR 0 7
8520: PUSH
8521: LD_INT 22
8523: PUSH
8524: LD_INT 2
8526: PUSH
8527: EMPTY
8528: LIST
8529: LIST
8530: PUSH
8531: LD_INT 30
8533: PUSH
8534: LD_INT 5
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: PUSH
8541: EMPTY
8542: LIST
8543: LIST
8544: PPUSH
8545: CALL_OW 69
8549: PUSH
8550: LD_INT 1
8552: ARRAY
8553: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8554: LD_VAR 0 6
8558: PPUSH
8559: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8563: LD_VAR 0 5
8567: PPUSH
8568: CALL_OW 122
// wait ( 0 0$3 ) ;
8572: LD_INT 105
8574: PPUSH
8575: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8579: LD_VAR 0 6
8583: PPUSH
8584: LD_VAR 0 7
8588: PPUSH
8589: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8593: LD_VAR 0 6
8597: PPUSH
8598: LD_INT 1
8600: PUSH
8601: LD_INT 8
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: PUSH
8608: LD_INT 1
8610: PPUSH
8611: LD_INT 2
8613: PPUSH
8614: CALL_OW 12
8618: ARRAY
8619: PPUSH
8620: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8624: LD_VAR 0 6
8628: PPUSH
8629: CALL_OW 182
// wait ( 0 0$1 ) ;
8633: LD_INT 35
8635: PPUSH
8636: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8640: LD_INT 76
8642: PPUSH
8643: LD_INT 19
8645: PPUSH
8646: CALL_OW 84
// DialogueOn ;
8650: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8654: LD_INT 22
8656: PUSH
8657: LD_INT 1
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: LD_INT 26
8666: PUSH
8667: LD_INT 1
8669: PUSH
8670: EMPTY
8671: LIST
8672: LIST
8673: PUSH
8674: LD_INT 2
8676: PUSH
8677: LD_INT 25
8679: PUSH
8680: LD_INT 1
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 25
8689: PUSH
8690: LD_INT 2
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 25
8699: PUSH
8700: LD_INT 3
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: LD_INT 25
8709: PUSH
8710: LD_INT 4
8712: PUSH
8713: EMPTY
8714: LIST
8715: LIST
8716: PUSH
8717: LD_INT 25
8719: PUSH
8720: LD_INT 5
8722: PUSH
8723: EMPTY
8724: LIST
8725: LIST
8726: PUSH
8727: EMPTY
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: PUSH
8735: EMPTY
8736: LIST
8737: LIST
8738: LIST
8739: PPUSH
8740: CALL_OW 69
8744: PPUSH
8745: LD_STRING D8-Sol1-1
8747: PPUSH
8748: LD_STRING D8-Sol1-1
8750: PPUSH
8751: CALL 11454 0 3
// if IsOK ( DeltaDoctor ) then
8755: LD_EXP 17
8759: PPUSH
8760: CALL_OW 302
8764: IFFALSE 8780
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8766: LD_EXP 17
8770: PPUSH
8771: LD_STRING D8-Sci1-1
8773: PPUSH
8774: CALL_OW 88
8778: GO 8881
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8780: LD_INT 22
8782: PUSH
8783: LD_INT 1
8785: PUSH
8786: EMPTY
8787: LIST
8788: LIST
8789: PUSH
8790: LD_INT 26
8792: PUSH
8793: LD_INT 1
8795: PUSH
8796: EMPTY
8797: LIST
8798: LIST
8799: PUSH
8800: LD_INT 2
8802: PUSH
8803: LD_INT 25
8805: PUSH
8806: LD_INT 1
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 25
8815: PUSH
8816: LD_INT 2
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 25
8825: PUSH
8826: LD_INT 3
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: LD_INT 25
8835: PUSH
8836: LD_INT 4
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 25
8845: PUSH
8846: LD_INT 5
8848: PUSH
8849: EMPTY
8850: LIST
8851: LIST
8852: PUSH
8853: EMPTY
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: PPUSH
8866: CALL_OW 69
8870: PPUSH
8871: LD_STRING D8-Sol1-1
8873: PPUSH
8874: LD_STRING D8-Sol1-1
8876: PPUSH
8877: CALL 11454 0 3
// Say ( JMM , D8-JMM-1 ) ;
8881: LD_EXP 1
8885: PPUSH
8886: LD_STRING D8-JMM-1
8888: PPUSH
8889: CALL_OW 88
// DialogueOff ;
8893: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8897: LD_INT 2
8899: PPUSH
8900: LD_INT 2
8902: PPUSH
8903: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8907: LD_INT 1
8909: PPUSH
8910: LD_INT 2
8912: PPUSH
8913: LD_INT 2
8915: PPUSH
8916: LD_INT 1
8918: PPUSH
8919: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8923: LD_INT 3
8925: PPUSH
8926: LD_INT 2
8928: PPUSH
8929: LD_INT 1
8931: PPUSH
8932: LD_INT 1
8934: PPUSH
8935: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8939: LD_STRING M4
8941: PPUSH
8942: CALL_OW 337
// wait ( 0 0$1 ) ;
8946: LD_INT 35
8948: PPUSH
8949: CALL_OW 67
// if IsLive ( Khatam ) then
8953: LD_EXP 14
8957: PPUSH
8958: CALL_OW 300
8962: IFFALSE 8976
// DoNotAttack ( 2 , Khatam ) ;
8964: LD_INT 2
8966: PPUSH
8967: LD_EXP 14
8971: PPUSH
8972: CALL_OW 471
// wait ( 0 0$1 ) ;
8976: LD_INT 35
8978: PPUSH
8979: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8983: LD_ADDR_VAR 0 8
8987: PUSH
8988: LD_INT 22
8990: PUSH
8991: LD_INT 1
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 21
9000: PUSH
9001: LD_INT 3
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: EMPTY
9009: LIST
9010: LIST
9011: PPUSH
9012: CALL_OW 69
9016: PPUSH
9017: LD_VAR 0 5
9021: PUSH
9022: LD_INT 1
9024: ARRAY
9025: PPUSH
9026: CALL_OW 74
9030: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
9031: LD_VAR 0 5
9035: PPUSH
9036: LD_INT 25
9038: PUSH
9039: LD_INT 1
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: PPUSH
9046: CALL_OW 72
9050: PUSH
9051: LD_INT 1
9053: ARRAY
9054: PPUSH
9055: LD_VAR 0 8
9059: PPUSH
9060: CALL_OW 250
9064: PPUSH
9065: LD_VAR 0 8
9069: PPUSH
9070: CALL_OW 251
9074: PPUSH
9075: LD_VAR 0 8
9079: PPUSH
9080: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
9084: LD_VAR 0 5
9088: PPUSH
9089: LD_INT 84
9091: PPUSH
9092: LD_INT 22
9094: PPUSH
9095: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
9099: LD_VAR 0 5
9103: PPUSH
9104: LD_INT 82
9106: PPUSH
9107: LD_INT 5
9109: PPUSH
9110: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
9114: LD_VAR 0 5
9118: PPUSH
9119: LD_INT 95
9121: PPUSH
9122: LD_INT 12
9124: PPUSH
9125: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
9129: LD_VAR 0 5
9133: PPUSH
9134: LD_INT 102
9136: PPUSH
9137: LD_INT 11
9139: PPUSH
9140: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
9144: LD_VAR 0 5
9148: PPUSH
9149: LD_INT 116
9151: PPUSH
9152: LD_INT 15
9154: PPUSH
9155: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
9159: LD_VAR 0 5
9163: PPUSH
9164: LD_INT 140
9166: PPUSH
9167: LD_INT 25
9169: PPUSH
9170: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
9174: LD_VAR 0 5
9178: PPUSH
9179: LD_INT 160
9181: PPUSH
9182: LD_INT 56
9184: PPUSH
9185: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
9189: LD_ADDR_VAR 0 5
9193: PUSH
9194: LD_INT 22
9196: PUSH
9197: LD_INT 2
9199: PUSH
9200: EMPTY
9201: LIST
9202: LIST
9203: PUSH
9204: LD_INT 21
9206: PUSH
9207: LD_INT 1
9209: PUSH
9210: EMPTY
9211: LIST
9212: LIST
9213: PUSH
9214: LD_INT 2
9216: PUSH
9217: LD_INT 25
9219: PUSH
9220: LD_INT 1
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: LD_INT 25
9229: PUSH
9230: LD_INT 8
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: PUSH
9237: LD_INT 25
9239: PUSH
9240: LD_INT 15
9242: PUSH
9243: EMPTY
9244: LIST
9245: LIST
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: PUSH
9253: EMPTY
9254: LIST
9255: LIST
9256: LIST
9257: PPUSH
9258: CALL_OW 69
9262: PUSH
9263: LD_EXP 28
9267: PUSH
9268: EMPTY
9269: LIST
9270: DIFF
9271: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
9272: LD_ADDR_VAR 0 6
9276: PUSH
9277: LD_INT 22
9279: PUSH
9280: LD_INT 2
9282: PUSH
9283: EMPTY
9284: LIST
9285: LIST
9286: PUSH
9287: LD_INT 21
9289: PUSH
9290: LD_INT 1
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: PUSH
9297: LD_INT 2
9299: PUSH
9300: LD_INT 25
9302: PUSH
9303: LD_INT 2
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PUSH
9310: LD_INT 25
9312: PUSH
9313: LD_INT 3
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 25
9322: PUSH
9323: LD_INT 4
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: LD_INT 25
9332: PUSH
9333: LD_INT 12
9335: PUSH
9336: EMPTY
9337: LIST
9338: LIST
9339: PUSH
9340: LD_INT 25
9342: PUSH
9343: LD_INT 16
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: PUSH
9350: EMPTY
9351: LIST
9352: LIST
9353: LIST
9354: LIST
9355: LIST
9356: LIST
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: PPUSH
9363: CALL_OW 69
9367: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9368: LD_ADDR_VAR 0 6
9372: PUSH
9373: LD_VAR 0 6
9377: PUSH
9378: LD_EXP 28
9382: ADD
9383: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9384: LD_VAR 0 5
9388: PPUSH
9389: LD_INT 189
9391: PPUSH
9392: LD_INT 79
9394: PPUSH
9395: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9399: LD_VAR 0 5
9403: PPUSH
9404: LD_INT 25
9406: PUSH
9407: LD_INT 15
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: PPUSH
9414: CALL_OW 72
9418: IFFALSE 9459
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9420: LD_VAR 0 5
9424: PPUSH
9425: LD_INT 25
9427: PUSH
9428: LD_INT 15
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: PPUSH
9435: CALL_OW 72
9439: PUSH
9440: LD_INT 1
9442: ARRAY
9443: PPUSH
9444: LD_INT 84
9446: PPUSH
9447: LD_INT 21
9449: PPUSH
9450: CALL_OW 428
9454: PPUSH
9455: CALL_OW 120
// wait ( 0 0$4 ) ;
9459: LD_INT 140
9461: PPUSH
9462: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9466: LD_VAR 0 6
9470: PPUSH
9471: LD_INT 88
9473: PPUSH
9474: LD_INT 8
9476: PPUSH
9477: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9481: LD_VAR 0 6
9485: PPUSH
9486: LD_INT 102
9488: PPUSH
9489: LD_INT 10
9491: PPUSH
9492: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 116
9503: PPUSH
9504: LD_INT 15
9506: PPUSH
9507: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9511: LD_VAR 0 6
9515: PPUSH
9516: LD_INT 140
9518: PPUSH
9519: LD_INT 25
9521: PPUSH
9522: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9526: LD_VAR 0 6
9530: PPUSH
9531: LD_INT 160
9533: PPUSH
9534: LD_INT 56
9536: PPUSH
9537: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9541: LD_VAR 0 6
9545: PPUSH
9546: LD_INT 189
9548: PPUSH
9549: LD_INT 79
9551: PPUSH
9552: CALL_OW 171
// arabianAttackersAI = 1 ;
9556: LD_ADDR_EXP 48
9560: PUSH
9561: LD_INT 1
9563: ST_TO_ADDR
// if IsOk ( Gary ) then
9564: LD_EXP 10
9568: PPUSH
9569: CALL_OW 302
9573: IFFALSE 9587
// Say ( Gary , D8a-Gary-1 ) ;
9575: LD_EXP 10
9579: PPUSH
9580: LD_STRING D8a-Gary-1
9582: PPUSH
9583: CALL_OW 88
// wait ( 0 0$5 ) ;
9587: LD_INT 175
9589: PPUSH
9590: CALL_OW 67
// if IsOK ( Khatam ) then
9594: LD_EXP 14
9598: PPUSH
9599: CALL_OW 302
9603: IFFALSE 10139
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9605: LD_ADDR_VAR 0 3
9609: PUSH
9610: LD_INT 22
9612: PUSH
9613: LD_INT 1
9615: PUSH
9616: EMPTY
9617: LIST
9618: LIST
9619: PUSH
9620: LD_INT 2
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: LD_INT 1
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: LD_INT 25
9635: PUSH
9636: LD_INT 2
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 25
9645: PUSH
9646: LD_INT 3
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 25
9655: PUSH
9656: LD_INT 4
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: LD_INT 25
9665: PUSH
9666: LD_INT 5
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: PUSH
9673: LD_INT 25
9675: PUSH
9676: LD_INT 8
9678: PUSH
9679: EMPTY
9680: LIST
9681: LIST
9682: PUSH
9683: EMPTY
9684: LIST
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: PUSH
9692: EMPTY
9693: LIST
9694: LIST
9695: PPUSH
9696: CALL_OW 69
9700: PUSH
9701: LD_EXP 1
9705: PUSH
9706: LD_EXP 2
9710: PUSH
9711: LD_EXP 3
9715: PUSH
9716: LD_EXP 4
9720: PUSH
9721: LD_EXP 5
9725: PUSH
9726: LD_EXP 6
9730: PUSH
9731: LD_EXP 7
9735: PUSH
9736: LD_EXP 8
9740: PUSH
9741: LD_EXP 9
9745: PUSH
9746: LD_EXP 10
9750: PUSH
9751: LD_EXP 11
9755: PUSH
9756: LD_EXP 12
9760: PUSH
9761: LD_EXP 13
9765: PUSH
9766: LD_EXP 14
9770: PUSH
9771: LD_EXP 15
9775: PUSH
9776: LD_EXP 16
9780: PUSH
9781: LD_EXP 17
9785: PUSH
9786: LD_EXP 20
9790: PUSH
9791: LD_EXP 26
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: DIFF
9817: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9818: LD_EXP 14
9822: PPUSH
9823: LD_INT 8
9825: PPUSH
9826: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9830: LD_EXP 14
9834: PPUSH
9835: CALL_OW 122
// wait ( 0 0$1 ) ;
9839: LD_INT 35
9841: PPUSH
9842: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9846: LD_EXP 14
9850: PPUSH
9851: CALL_OW 121
// wait ( 0 0$1 ) ;
9855: LD_INT 35
9857: PPUSH
9858: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9862: LD_EXP 14
9866: PPUSH
9867: LD_INT 7
9869: PPUSH
9870: CALL_OW 113
// if not tmp then
9874: LD_VAR 0 3
9878: NOT
9879: IFFALSE 9883
// exit ;
9881: GO 10139
// DialogueOn ;
9883: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9887: LD_VAR 0 3
9891: PUSH
9892: LD_INT 1
9894: ARRAY
9895: PPUSH
9896: CALL_OW 258
9900: PUSH
9901: LD_INT 1
9903: EQUAL
9904: IFFALSE 9924
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9906: LD_VAR 0 3
9910: PUSH
9911: LD_INT 1
9913: ARRAY
9914: PPUSH
9915: LD_STRING D8b-Sol1-1
9917: PPUSH
9918: CALL_OW 88
9922: GO 9940
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9924: LD_VAR 0 3
9928: PUSH
9929: LD_INT 1
9931: ARRAY
9932: PPUSH
9933: LD_STRING D8b-FSol1-1
9935: PPUSH
9936: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9940: LD_EXP 14
9944: PPUSH
9945: LD_STRING D8b-Khat-1
9947: PPUSH
9948: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9952: LD_VAR 0 3
9956: PUSH
9957: LD_INT 1
9959: ARRAY
9960: PPUSH
9961: CALL_OW 258
9965: PUSH
9966: LD_INT 1
9968: EQUAL
9969: IFFALSE 9989
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9971: LD_VAR 0 3
9975: PUSH
9976: LD_INT 1
9978: ARRAY
9979: PPUSH
9980: LD_STRING D8b-Sol1-2
9982: PPUSH
9983: CALL_OW 88
9987: GO 10005
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9989: LD_VAR 0 3
9993: PUSH
9994: LD_INT 1
9996: ARRAY
9997: PPUSH
9998: LD_STRING D8b-FSol1-2
10000: PPUSH
10001: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
10005: LD_EXP 14
10009: PPUSH
10010: LD_STRING D8b-Khat-2
10012: PPUSH
10013: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
10017: LD_VAR 0 3
10021: PUSH
10022: LD_INT 1
10024: ARRAY
10025: PPUSH
10026: CALL_OW 258
10030: PUSH
10031: LD_INT 1
10033: EQUAL
10034: IFFALSE 10054
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
10036: LD_VAR 0 3
10040: PUSH
10041: LD_INT 1
10043: ARRAY
10044: PPUSH
10045: LD_STRING D8b-Sol1-3
10047: PPUSH
10048: CALL_OW 88
10052: GO 10070
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
10054: LD_VAR 0 3
10058: PUSH
10059: LD_INT 1
10061: ARRAY
10062: PPUSH
10063: LD_STRING D8b-FSol1-3
10065: PPUSH
10066: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
10070: LD_EXP 14
10074: PPUSH
10075: LD_STRING D8b-Khat-3
10077: PPUSH
10078: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
10082: LD_VAR 0 3
10086: PUSH
10087: LD_INT 1
10089: ARRAY
10090: PPUSH
10091: CALL_OW 258
10095: PUSH
10096: LD_INT 1
10098: EQUAL
10099: IFFALSE 10119
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
10101: LD_VAR 0 3
10105: PUSH
10106: LD_INT 1
10108: ARRAY
10109: PPUSH
10110: LD_STRING D8b-Sol1-4
10112: PPUSH
10113: CALL_OW 88
10117: GO 10135
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
10119: LD_VAR 0 3
10123: PUSH
10124: LD_INT 1
10126: ARRAY
10127: PPUSH
10128: LD_STRING D8b-FSol1-4
10130: PPUSH
10131: CALL_OW 88
// DialogueOff ;
10135: CALL_OW 7
// end ; end ;
10139: LD_VAR 0 1
10143: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
10144: LD_INT 7
10146: PPUSH
10147: LD_INT 22
10149: PUSH
10150: LD_INT 2
10152: PUSH
10153: EMPTY
10154: LIST
10155: LIST
10156: PPUSH
10157: CALL_OW 70
10161: PUSH
10162: LD_INT 0
10164: GREATER
10165: PUSH
10166: LD_EXP 14
10170: PPUSH
10171: LD_INT 7
10173: PPUSH
10174: CALL_OW 308
10178: OR
10179: IFFALSE 10386
10181: GO 10183
10183: DISABLE
10184: LD_INT 0
10186: PPUSH
// begin enable ;
10187: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
10188: LD_ADDR_VAR 0 1
10192: PUSH
10193: LD_INT 7
10195: PPUSH
10196: LD_INT 22
10198: PUSH
10199: LD_INT 2
10201: PUSH
10202: EMPTY
10203: LIST
10204: LIST
10205: PPUSH
10206: CALL_OW 70
10210: PUSH
10211: FOR_IN
10212: IFFALSE 10353
// begin if GetClass ( i ) = 4 then
10214: LD_VAR 0 1
10218: PPUSH
10219: CALL_OW 257
10223: PUSH
10224: LD_INT 4
10226: EQUAL
10227: IFFALSE 10239
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
10229: LD_INT 1
10231: PPUSH
10232: LD_STRING 10_ScientistsEscape_1
10234: PPUSH
10235: CALL_OW 39
// if i = Dietrich then
10239: LD_VAR 0 1
10243: PUSH
10244: LD_EXP 28
10248: EQUAL
10249: IFFALSE 10259
// GensherStatus = 1 ;
10251: LD_ADDR_EXP 54
10255: PUSH
10256: LD_INT 1
10258: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
10259: LD_VAR 0 1
10263: PPUSH
10264: CALL_OW 257
10268: PUSH
10269: LD_INT 1
10271: EQUAL
10272: PUSH
10273: LD_VAR 0 1
10277: PPUSH
10278: CALL_OW 257
10282: PUSH
10283: LD_INT 2
10285: EQUAL
10286: OR
10287: PUSH
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 257
10297: PUSH
10298: LD_INT 3
10300: EQUAL
10301: OR
10302: PUSH
10303: LD_VAR 0 1
10307: PPUSH
10308: CALL_OW 257
10312: PUSH
10313: LD_INT 4
10315: EQUAL
10316: OR
10317: PUSH
10318: LD_VAR 0 1
10322: PPUSH
10323: CALL_OW 257
10327: PUSH
10328: LD_INT 8
10330: EQUAL
10331: OR
10332: IFFALSE 10342
// arabianEscape = 1 ;
10334: LD_ADDR_EXP 49
10338: PUSH
10339: LD_INT 1
10341: ST_TO_ADDR
// RemoveUnit ( i ) ;
10342: LD_VAR 0 1
10346: PPUSH
10347: CALL_OW 64
// end ;
10351: GO 10211
10353: POP
10354: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10355: LD_EXP 14
10359: PPUSH
10360: LD_INT 7
10362: PPUSH
10363: CALL_OW 308
10367: IFFALSE 10386
// begin KhatamStatus = 1 ;
10369: LD_ADDR_EXP 55
10373: PUSH
10374: LD_INT 1
10376: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10377: LD_EXP 14
10381: PPUSH
10382: CALL_OW 64
// end ; end ;
10386: PPOPN 1
10388: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10389: LD_INT 22
10391: PUSH
10392: LD_INT 2
10394: PUSH
10395: EMPTY
10396: LIST
10397: LIST
10398: PUSH
10399: LD_INT 21
10401: PUSH
10402: LD_INT 1
10404: PUSH
10405: EMPTY
10406: LIST
10407: LIST
10408: PUSH
10409: EMPTY
10410: LIST
10411: LIST
10412: PPUSH
10413: CALL_OW 69
10417: PUSH
10418: LD_INT 0
10420: EQUAL
10421: PUSH
10422: LD_INT 22
10424: PUSH
10425: LD_INT 4
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 21
10434: PUSH
10435: LD_INT 1
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: EMPTY
10443: LIST
10444: LIST
10445: PPUSH
10446: CALL_OW 69
10450: PUSH
10451: LD_INT 0
10453: EQUAL
10454: AND
10455: IFFALSE 10468
10457: GO 10459
10459: DISABLE
// arabianDefeated = 1 ;
10460: LD_ADDR_EXP 50
10464: PUSH
10465: LD_INT 1
10467: ST_TO_ADDR
10468: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10469: LD_INT 54
10471: PPUSH
10472: LD_INT 1
10474: PPUSH
10475: CALL_OW 321
10479: PUSH
10480: LD_INT 2
10482: EQUAL
10483: PUSH
10484: LD_INT 55
10486: PPUSH
10487: LD_INT 1
10489: PPUSH
10490: CALL_OW 321
10494: PUSH
10495: LD_INT 2
10497: EQUAL
10498: AND
10499: PUSH
10500: LD_INT 21
10502: PPUSH
10503: LD_INT 1
10505: PPUSH
10506: CALL_OW 321
10510: PUSH
10511: LD_INT 2
10513: EQUAL
10514: AND
10515: PUSH
10516: LD_INT 22
10518: PPUSH
10519: LD_INT 1
10521: PPUSH
10522: CALL_OW 321
10526: PUSH
10527: LD_INT 2
10529: EQUAL
10530: AND
10531: PUSH
10532: LD_INT 12
10534: PPUSH
10535: LD_INT 1
10537: PPUSH
10538: CALL_OW 321
10542: PUSH
10543: LD_INT 2
10545: EQUAL
10546: AND
10547: PUSH
10548: LD_INT 32
10550: PPUSH
10551: LD_INT 1
10553: PPUSH
10554: CALL_OW 321
10558: PUSH
10559: LD_INT 2
10561: EQUAL
10562: AND
10563: PUSH
10564: LD_EXP 65
10568: PUSH
10569: LD_INT 0
10571: EQUAL
10572: AND
10573: PUSH
10574: LD_EXP 51
10578: PUSH
10579: LD_INT 0
10581: EQUAL
10582: AND
10583: PUSH
10584: LD_OWVAR 1
10588: PUSH
10589: LD_INT 31500
10591: GREATEREQUAL
10592: AND
10593: IFFALSE 10610
10595: GO 10597
10597: DISABLE
// begin arabianTrait = 1 ;
10598: LD_ADDR_EXP 51
10602: PUSH
10603: LD_INT 1
10605: ST_TO_ADDR
// PrepareArabianTrait ;
10606: CALL 8360 0 0
// end ;
10610: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10611: LD_EXP 31
10615: PUSH
10616: LD_STRING 02_mikhailStatus_1
10618: PPUSH
10619: LD_INT 0
10621: PPUSH
10622: CALL_OW 30
10626: PUSH
10627: LD_INT 1
10629: EQUAL
10630: AND
10631: PUSH
10632: LD_INT 22
10634: PUSH
10635: LD_INT 5
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: PPUSH
10642: CALL_OW 69
10646: PUSH
10647: LD_INT 0
10649: EQUAL
10650: AND
10651: PUSH
10652: LD_INT 22
10654: PUSH
10655: LD_INT 2
10657: PUSH
10658: EMPTY
10659: LIST
10660: LIST
10661: PUSH
10662: LD_INT 21
10664: PUSH
10665: LD_INT 1
10667: PUSH
10668: EMPTY
10669: LIST
10670: LIST
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PPUSH
10676: CALL_OW 69
10680: PUSH
10681: LD_INT 0
10683: EQUAL
10684: PUSH
10685: LD_EXP 51
10689: PUSH
10690: LD_INT 0
10692: EQUAL
10693: OR
10694: AND
10695: IFFALSE 10704
10697: GO 10699
10699: DISABLE
// PrepareCornell ;
10700: CALL 3529 0 0
10704: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10705: LD_INT 22
10707: PUSH
10708: LD_INT 1
10710: PUSH
10711: EMPTY
10712: LIST
10713: LIST
10714: PPUSH
10715: CALL_OW 69
10719: PPUSH
10720: LD_EXP 20
10724: PPUSH
10725: CALL_OW 74
10729: PPUSH
10730: LD_EXP 20
10734: PPUSH
10735: CALL_OW 296
10739: PUSH
10740: LD_INT 9
10742: LESS
10743: IFFALSE 10964
10745: GO 10747
10747: DISABLE
// begin InGameOn ;
10748: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10752: LD_EXP 20
10756: PPUSH
10757: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10761: LD_EXP 20
10765: PPUSH
10766: LD_STRING D7-Corn-1
10768: PPUSH
10769: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10773: LD_INT 22
10775: PUSH
10776: LD_INT 1
10778: PUSH
10779: EMPTY
10780: LIST
10781: LIST
10782: PUSH
10783: LD_INT 2
10785: PUSH
10786: LD_INT 25
10788: PUSH
10789: LD_INT 1
10791: PUSH
10792: EMPTY
10793: LIST
10794: LIST
10795: PUSH
10796: LD_INT 25
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: EMPTY
10803: LIST
10804: LIST
10805: PUSH
10806: LD_INT 25
10808: PUSH
10809: LD_INT 3
10811: PUSH
10812: EMPTY
10813: LIST
10814: LIST
10815: PUSH
10816: LD_INT 25
10818: PUSH
10819: LD_INT 4
10821: PUSH
10822: EMPTY
10823: LIST
10824: LIST
10825: PUSH
10826: LD_INT 25
10828: PUSH
10829: LD_INT 5
10831: PUSH
10832: EMPTY
10833: LIST
10834: LIST
10835: PUSH
10836: EMPTY
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: PUSH
10844: EMPTY
10845: LIST
10846: LIST
10847: PPUSH
10848: CALL_OW 69
10852: PPUSH
10853: LD_STRING D7-Sol1-1
10855: PPUSH
10856: LD_STRING D7-FSol1-1
10858: PPUSH
10859: CALL 11454 0 3
// CenterNowOnUnits ( Cornell ) ;
10863: LD_EXP 20
10867: PPUSH
10868: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10872: LD_EXP 20
10876: PPUSH
10877: LD_STRING D7-Corn-2
10879: PPUSH
10880: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10884: LD_EXP 1
10888: PPUSH
10889: LD_STRING D7-JMM-2
10891: PPUSH
10892: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10896: LD_EXP 20
10900: PPUSH
10901: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10905: LD_EXP 20
10909: PPUSH
10910: LD_STRING D7-Corn-3
10912: PPUSH
10913: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10917: LD_EXP 20
10921: PPUSH
10922: LD_INT 250
10924: PPUSH
10925: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10929: LD_EXP 20
10933: PPUSH
10934: LD_INT 1
10936: PPUSH
10937: CALL_OW 235
// wait ( 0 0$1 ) ;
10941: LD_INT 35
10943: PPUSH
10944: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10948: LD_EXP 1
10952: PPUSH
10953: LD_STRING D7-JMM-3
10955: PPUSH
10956: CALL_OW 88
// InGameOff ;
10960: CALL_OW 9
// end ;
10964: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10965: LD_EXP 20
10969: PPUSH
10970: CALL_OW 255
10974: PUSH
10975: LD_INT 1
10977: EQUAL
10978: PUSH
10979: LD_EXP 20
10983: PPUSH
10984: CALL_OW 256
10988: PUSH
10989: LD_INT 350
10991: GREATER
10992: AND
10993: IFFALSE 11186
10995: GO 10997
10997: DISABLE
// begin DialogueOn ;
10998: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
11002: LD_EXP 1
11006: PPUSH
11007: LD_STRING D7a-JMM-1
11009: PPUSH
11010: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
11014: LD_EXP 20
11018: PPUSH
11019: LD_STRING D7a-Corn-1
11021: PPUSH
11022: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
11026: LD_EXP 1
11030: PPUSH
11031: LD_STRING D7a-JMM-2
11033: PPUSH
11034: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
11038: LD_EXP 20
11042: PPUSH
11043: LD_STRING D7a-Corn-2
11045: PPUSH
11046: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
11050: LD_EXP 1
11054: PPUSH
11055: LD_STRING D7a-JMM-3
11057: PPUSH
11058: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
11062: LD_EXP 20
11066: PPUSH
11067: LD_STRING D7a-Corn-3
11069: PPUSH
11070: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
11074: LD_EXP 1
11078: PPUSH
11079: LD_STRING D7a-JMM-4
11081: PPUSH
11082: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
11086: LD_EXP 20
11090: PPUSH
11091: LD_STRING D7a-Corn-4
11093: PPUSH
11094: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
11098: LD_EXP 1
11102: PPUSH
11103: LD_STRING D7a-JMM-5
11105: PPUSH
11106: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
11110: LD_EXP 20
11114: PPUSH
11115: LD_STRING D7a-Corn-5
11117: PPUSH
11118: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
11122: LD_EXP 1
11126: PPUSH
11127: LD_STRING D7a-JMM-6
11129: PPUSH
11130: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
11134: LD_EXP 20
11138: PPUSH
11139: LD_STRING D7a-Corn-6
11141: PPUSH
11142: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
11146: LD_EXP 1
11150: PPUSH
11151: LD_STRING D7a-JMM-7
11153: PPUSH
11154: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
11158: LD_EXP 20
11162: PPUSH
11163: LD_STRING D7a-Corn-7
11165: PPUSH
11166: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
11170: LD_EXP 1
11174: PPUSH
11175: LD_STRING D7a-JMM-8
11177: PPUSH
11178: CALL_OW 88
// DialogueOff ;
11182: CALL_OW 7
// end ;
11186: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
11187: LD_EXP 63
11191: PUSH
11192: LD_EXP 1
11196: PPUSH
11197: CALL_OW 302
11201: PUSH
11202: LD_EXP 5
11206: PPUSH
11207: CALL_OW 302
11211: OR
11212: AND
11213: IFFALSE 11303
11215: GO 11217
11217: DISABLE
// begin Wait ( 0 0$2 ) ;
11218: LD_INT 70
11220: PPUSH
11221: CALL_OW 67
// DialogueOn ;
11225: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
11229: LD_EXP 63
11233: PUSH
11234: LD_INT 1
11236: ARRAY
11237: PPUSH
11238: LD_EXP 63
11242: PUSH
11243: LD_INT 2
11245: ARRAY
11246: PPUSH
11247: CALL_OW 86
// if IsOk ( Cyrus ) then
11251: LD_EXP 5
11255: PPUSH
11256: CALL_OW 302
11260: IFFALSE 11276
// Say ( Cyrus , D10-Cyrus-1 ) else
11262: LD_EXP 5
11266: PPUSH
11267: LD_STRING D10-Cyrus-1
11269: PPUSH
11270: CALL_OW 88
11274: GO 11299
// if IsOk ( JMM ) then
11276: LD_EXP 1
11280: PPUSH
11281: CALL_OW 302
11285: IFFALSE 11299
// Say ( JMM , D10-JMM-1 ) ;
11287: LD_EXP 1
11291: PPUSH
11292: LD_STRING D10-JMM-1
11294: PPUSH
11295: CALL_OW 88
// DialogueOff ;
11299: CALL_OW 7
// end ;
11303: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
11304: LD_INT 12
11306: PPUSH
11307: LD_INT 1
11309: PPUSH
11310: CALL_OW 321
11314: PUSH
11315: LD_INT 2
11317: EQUAL
11318: IFFALSE 11330
11320: GO 11322
11322: DISABLE
// ChangeMissionObjectives ( M2b ) ;
11323: LD_STRING M2b
11325: PPUSH
11326: CALL_OW 337
11330: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
11331: LD_INT 32
11333: PPUSH
11334: LD_INT 1
11336: PPUSH
11337: CALL_OW 321
11341: PUSH
11342: LD_INT 2
11344: EQUAL
11345: IFFALSE 11357
11347: GO 11349
11349: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11350: LD_STRING M2c
11352: PPUSH
11353: CALL_OW 337
11357: END
// every 0 0$1 trigger arabianDefeated = 1 do
11358: LD_EXP 50
11362: PUSH
11363: LD_INT 1
11365: EQUAL
11366: IFFALSE 11378
11368: GO 11370
11370: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11371: LD_STRING M4a
11373: PPUSH
11374: CALL_OW 337
11378: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11379: LD_INT 54
11381: PPUSH
11382: LD_INT 1
11384: PPUSH
11385: CALL_OW 321
11389: PUSH
11390: LD_INT 2
11392: EQUAL
11393: PUSH
11394: LD_INT 55
11396: PPUSH
11397: LD_INT 1
11399: PPUSH
11400: CALL_OW 321
11404: PUSH
11405: LD_INT 2
11407: EQUAL
11408: AND
11409: PUSH
11410: LD_INT 21
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 321
11420: PUSH
11421: LD_INT 2
11423: EQUAL
11424: AND
11425: PUSH
11426: LD_INT 22
11428: PPUSH
11429: LD_INT 1
11431: PPUSH
11432: CALL_OW 321
11436: PUSH
11437: LD_INT 2
11439: EQUAL
11440: AND
11441: IFFALSE 11453
11443: GO 11445
11445: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11446: LD_STRING M2a
11448: PPUSH
11449: CALL_OW 337
11453: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11454: LD_INT 0
11456: PPUSH
11457: PPUSH
11458: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11459: LD_ADDR_VAR 0 1
11463: PUSH
11464: LD_VAR 0 1
11468: PUSH
11469: LD_EXP 1
11473: PUSH
11474: LD_EXP 2
11478: PUSH
11479: LD_EXP 3
11483: PUSH
11484: LD_EXP 4
11488: PUSH
11489: LD_EXP 5
11493: PUSH
11494: LD_EXP 6
11498: PUSH
11499: LD_EXP 7
11503: PUSH
11504: LD_EXP 8
11508: PUSH
11509: LD_EXP 9
11513: PUSH
11514: LD_EXP 10
11518: PUSH
11519: LD_EXP 11
11523: PUSH
11524: LD_EXP 12
11528: PUSH
11529: LD_EXP 13
11533: PUSH
11534: LD_EXP 14
11538: PUSH
11539: LD_EXP 15
11543: PUSH
11544: LD_EXP 16
11548: PUSH
11549: LD_EXP 17
11553: PUSH
11554: LD_EXP 18
11558: PUSH
11559: LD_EXP 20
11563: PUSH
11564: LD_EXP 26
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: DIFF
11591: ST_TO_ADDR
// if not characters then
11592: LD_VAR 0 1
11596: NOT
11597: IFFALSE 11601
// exit ;
11599: GO 11747
// rnd = rand ( 1 , characters ) ;
11601: LD_ADDR_VAR 0 6
11605: PUSH
11606: LD_INT 1
11608: PPUSH
11609: LD_VAR 0 1
11613: PPUSH
11614: CALL_OW 12
11618: ST_TO_ADDR
// for i = 1 to characters do
11619: LD_ADDR_VAR 0 5
11623: PUSH
11624: DOUBLE
11625: LD_INT 1
11627: DEC
11628: ST_TO_ADDR
11629: LD_VAR 0 1
11633: PUSH
11634: FOR_TO
11635: IFFALSE 11745
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11637: LD_VAR 0 5
11641: PUSH
11642: LD_VAR 0 6
11646: EQUAL
11647: PUSH
11648: LD_VAR 0 1
11652: PUSH
11653: LD_VAR 0 5
11657: ARRAY
11658: PPUSH
11659: CALL_OW 258
11663: PUSH
11664: LD_INT 1
11666: EQUAL
11667: AND
11668: IFFALSE 11690
// Say ( characters [ i ] , dialogMID ) ;
11670: LD_VAR 0 1
11674: PUSH
11675: LD_VAR 0 5
11679: ARRAY
11680: PPUSH
11681: LD_VAR 0 2
11685: PPUSH
11686: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11690: LD_VAR 0 5
11694: PUSH
11695: LD_VAR 0 6
11699: EQUAL
11700: PUSH
11701: LD_VAR 0 1
11705: PUSH
11706: LD_VAR 0 5
11710: ARRAY
11711: PPUSH
11712: CALL_OW 258
11716: PUSH
11717: LD_INT 2
11719: EQUAL
11720: AND
11721: IFFALSE 11743
// Say ( characters [ i ] , dialogFID ) ;
11723: LD_VAR 0 1
11727: PUSH
11728: LD_VAR 0 5
11732: ARRAY
11733: PPUSH
11734: LD_VAR 0 3
11738: PPUSH
11739: CALL_OW 88
// end ;
11743: GO 11634
11745: POP
11746: POP
// end ;
11747: LD_VAR 0 4
11751: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11752: LD_INT 0
11754: PPUSH
11755: PPUSH
// for i in charactersList do
11756: LD_ADDR_VAR 0 4
11760: PUSH
11761: LD_VAR 0 1
11765: PUSH
11766: FOR_IN
11767: IFFALSE 11785
// SaveCharacters ( i , ident ) ;
11769: LD_VAR 0 4
11773: PPUSH
11774: LD_VAR 0 2
11778: PPUSH
11779: CALL_OW 38
11783: GO 11766
11785: POP
11786: POP
// end ;
11787: LD_VAR 0 3
11791: RET
// export function PrepareDifficulty ; begin
11792: LD_INT 0
11794: PPUSH
// if difficulty = 1 then
11795: LD_OWVAR 67
11799: PUSH
11800: LD_INT 1
11802: EQUAL
11803: IFFALSE 11847
// begin RuSolMinLevel = 3 ;
11805: LD_ADDR_EXP 38
11809: PUSH
11810: LD_INT 3
11812: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11813: LD_ADDR_EXP 39
11817: PUSH
11818: LD_INT 5
11820: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11821: LD_INT 51
11823: PPUSH
11824: LD_INT 6
11826: PPUSH
11827: LD_INT 2
11829: PPUSH
11830: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11834: LD_INT 51
11836: PPUSH
11837: LD_INT 5
11839: PPUSH
11840: LD_INT 2
11842: PPUSH
11843: CALL_OW 322
// end ; if difficulty = 2 then
11847: LD_OWVAR 67
11851: PUSH
11852: LD_INT 2
11854: EQUAL
11855: IFFALSE 11951
// begin RuSolMinLevel = 5 ;
11857: LD_ADDR_EXP 38
11861: PUSH
11862: LD_INT 5
11864: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11865: LD_ADDR_EXP 39
11869: PUSH
11870: LD_INT 7
11872: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11873: LD_INT 51
11875: PPUSH
11876: LD_INT 6
11878: PPUSH
11879: LD_INT 2
11881: PPUSH
11882: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11886: LD_INT 57
11888: PPUSH
11889: LD_INT 6
11891: PPUSH
11892: LD_INT 2
11894: PPUSH
11895: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11899: LD_INT 63
11901: PPUSH
11902: LD_INT 6
11904: PPUSH
11905: LD_INT 2
11907: PPUSH
11908: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11912: LD_INT 51
11914: PPUSH
11915: LD_INT 5
11917: PPUSH
11918: LD_INT 2
11920: PPUSH
11921: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11925: LD_INT 5
11927: PPUSH
11928: LD_INT 2
11930: PPUSH
11931: LD_INT 2
11933: PPUSH
11934: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11938: LD_INT 5
11940: PPUSH
11941: LD_INT 5
11943: PPUSH
11944: LD_INT 2
11946: PPUSH
11947: CALL_OW 322
// end ; if difficulty >= 3 then
11951: LD_OWVAR 67
11955: PUSH
11956: LD_INT 3
11958: GREATEREQUAL
11959: IFFALSE 12107
// begin RuSolMinLevel = 6 ;
11961: LD_ADDR_EXP 38
11965: PUSH
11966: LD_INT 6
11968: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11969: LD_ADDR_EXP 39
11973: PUSH
11974: LD_INT 8
11976: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11977: LD_INT 51
11979: PPUSH
11980: LD_INT 6
11982: PPUSH
11983: LD_INT 2
11985: PPUSH
11986: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11990: LD_INT 57
11992: PPUSH
11993: LD_INT 6
11995: PPUSH
11996: LD_INT 2
11998: PPUSH
11999: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
12003: LD_INT 52
12005: PPUSH
12006: LD_INT 6
12008: PPUSH
12009: LD_INT 2
12011: PPUSH
12012: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
12016: LD_INT 58
12018: PPUSH
12019: LD_INT 6
12021: PPUSH
12022: LD_INT 2
12024: PPUSH
12025: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
12029: LD_INT 63
12031: PPUSH
12032: LD_INT 6
12034: PPUSH
12035: LD_INT 2
12037: PPUSH
12038: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
12042: LD_INT 64
12044: PPUSH
12045: LD_INT 6
12047: PPUSH
12048: LD_INT 2
12050: PPUSH
12051: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
12055: LD_INT 51
12057: PPUSH
12058: LD_INT 5
12060: PPUSH
12061: LD_INT 2
12063: PPUSH
12064: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
12068: LD_INT 52
12070: PPUSH
12071: LD_INT 5
12073: PPUSH
12074: LD_INT 2
12076: PPUSH
12077: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
12081: LD_INT 66
12083: PPUSH
12084: LD_INT 2
12086: PPUSH
12087: LD_INT 2
12089: PPUSH
12090: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
12094: LD_INT 66
12096: PPUSH
12097: LD_INT 5
12099: PPUSH
12100: LD_INT 2
12102: PPUSH
12103: CALL_OW 322
// end ; end ;
12107: LD_VAR 0 1
12111: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
12112: LD_INT 0
12114: PPUSH
12115: PPUSH
12116: PPUSH
12117: PPUSH
12118: PPUSH
12119: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
12120: LD_ADDR_VAR 0 7
12124: PUSH
12125: LD_INT 43
12127: PUSH
12128: LD_INT 68
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 43
12137: PUSH
12138: LD_INT 79
12140: PUSH
12141: EMPTY
12142: LIST
12143: LIST
12144: PUSH
12145: LD_INT 99
12147: PUSH
12148: LD_INT 114
12150: PUSH
12151: EMPTY
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 103
12157: PUSH
12158: LD_INT 114
12160: PUSH
12161: EMPTY
12162: LIST
12163: LIST
12164: PUSH
12165: LD_INT 156
12167: PUSH
12168: LD_INT 92
12170: PUSH
12171: EMPTY
12172: LIST
12173: LIST
12174: PUSH
12175: LD_INT 152
12177: PUSH
12178: LD_INT 85
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: ST_TO_ADDR
// for i in sources do
12193: LD_ADDR_VAR 0 3
12197: PUSH
12198: LD_VAR 0 7
12202: PUSH
12203: FOR_IN
12204: IFFALSE 12233
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
12206: LD_VAR 0 3
12210: PUSH
12211: LD_INT 1
12213: ARRAY
12214: PPUSH
12215: LD_VAR 0 3
12219: PUSH
12220: LD_INT 2
12222: ARRAY
12223: PPUSH
12224: LD_INT 3
12226: PPUSH
12227: CALL_OW 441
12231: GO 12203
12233: POP
12234: POP
// case position of 1 :
12235: LD_VAR 0 1
12239: PUSH
12240: LD_INT 1
12242: DOUBLE
12243: EQUAL
12244: IFTRUE 12248
12246: GO 12259
12248: POP
// area := westConv ; 2 :
12249: LD_ADDR_VAR 0 6
12253: PUSH
12254: LD_INT 20
12256: ST_TO_ADDR
12257: GO 12298
12259: LD_INT 2
12261: DOUBLE
12262: EQUAL
12263: IFTRUE 12267
12265: GO 12278
12267: POP
// area := midConv ; 3 :
12268: LD_ADDR_VAR 0 6
12272: PUSH
12273: LD_INT 21
12275: ST_TO_ADDR
12276: GO 12298
12278: LD_INT 3
12280: DOUBLE
12281: EQUAL
12282: IFTRUE 12286
12284: GO 12297
12286: POP
// area := eastConv ; end ;
12287: LD_ADDR_VAR 0 6
12291: PUSH
12292: LD_INT 22
12294: ST_TO_ADDR
12295: GO 12298
12297: POP
// area := AreaToList ( area , 0 ) ;
12298: LD_ADDR_VAR 0 6
12302: PUSH
12303: LD_VAR 0 6
12307: PPUSH
12308: LD_INT 0
12310: PPUSH
12311: CALL_OW 517
12315: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
12316: LD_ADDR_VAR 0 3
12320: PUSH
12321: DOUBLE
12322: LD_INT 1
12324: DEC
12325: ST_TO_ADDR
12326: LD_VAR 0 6
12330: PUSH
12331: LD_INT 1
12333: ARRAY
12334: PUSH
12335: FOR_TO
12336: IFFALSE 12417
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
12338: LD_VAR 0 6
12342: PUSH
12343: LD_INT 1
12345: ARRAY
12346: PUSH
12347: LD_VAR 0 3
12351: ARRAY
12352: PPUSH
12353: LD_VAR 0 6
12357: PUSH
12358: LD_INT 2
12360: ARRAY
12361: PUSH
12362: LD_VAR 0 3
12366: ARRAY
12367: PPUSH
12368: LD_INT 1
12370: PPUSH
12371: LD_INT 1
12373: PPUSH
12374: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12378: LD_VAR 0 6
12382: PUSH
12383: LD_INT 1
12385: ARRAY
12386: PUSH
12387: LD_VAR 0 3
12391: ARRAY
12392: PPUSH
12393: LD_VAR 0 6
12397: PUSH
12398: LD_INT 2
12400: ARRAY
12401: PUSH
12402: LD_VAR 0 3
12406: ARRAY
12407: PPUSH
12408: LD_INT 1
12410: PPUSH
12411: CALL_OW 331
// end ;
12415: GO 12335
12417: POP
12418: POP
// ruPossition = position ;
12419: LD_ADDR_EXP 43
12423: PUSH
12424: LD_VAR 0 1
12428: ST_TO_ADDR
// if position = 1 then
12429: LD_VAR 0 1
12433: PUSH
12434: LD_INT 1
12436: EQUAL
12437: IFFALSE 13185
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12439: LD_ADDR_VAR 0 4
12443: PUSH
12444: LD_INT 22
12446: PUSH
12447: LD_INT 3
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: PUSH
12454: LD_INT 25
12456: PUSH
12457: LD_INT 2
12459: PUSH
12460: EMPTY
12461: LIST
12462: LIST
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PPUSH
12468: CALL_OW 69
12472: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12473: LD_ADDR_VAR 0 5
12477: PUSH
12478: LD_INT 0
12480: PUSH
12481: LD_INT 49
12483: PUSH
12484: LD_INT 74
12486: PUSH
12487: LD_INT 3
12489: PUSH
12490: EMPTY
12491: LIST
12492: LIST
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 4
12498: PUSH
12499: LD_INT 73
12501: PUSH
12502: LD_INT 88
12504: PUSH
12505: LD_INT 5
12507: PUSH
12508: EMPTY
12509: LIST
12510: LIST
12511: LIST
12512: LIST
12513: PUSH
12514: LD_INT 4
12516: PUSH
12517: LD_INT 56
12519: PUSH
12520: LD_INT 62
12522: PUSH
12523: LD_INT 3
12525: PUSH
12526: EMPTY
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: PUSH
12532: LD_INT 29
12534: PUSH
12535: LD_INT 43
12537: PUSH
12538: LD_INT 68
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: EMPTY
12545: LIST
12546: LIST
12547: LIST
12548: LIST
12549: PUSH
12550: LD_INT 30
12552: PUSH
12553: LD_INT 43
12555: PUSH
12556: LD_INT 79
12558: PUSH
12559: LD_INT 5
12561: PUSH
12562: EMPTY
12563: LIST
12564: LIST
12565: LIST
12566: LIST
12567: PUSH
12568: LD_INT 28
12570: PUSH
12571: LD_INT 60
12573: PUSH
12574: LD_INT 75
12576: PUSH
12577: LD_INT 1
12579: PUSH
12580: EMPTY
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: PUSH
12586: LD_INT 2
12588: PUSH
12589: LD_INT 50
12591: PUSH
12592: LD_INT 87
12594: PUSH
12595: LD_INT 1
12597: PUSH
12598: EMPTY
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: PUSH
12604: LD_INT 28
12606: PUSH
12607: LD_INT 45
12609: PUSH
12610: LD_INT 67
12612: PUSH
12613: LD_INT 2
12615: PUSH
12616: EMPTY
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: PUSH
12622: LD_INT 17
12624: PUSH
12625: LD_INT 47
12627: PUSH
12628: LD_INT 84
12630: PUSH
12631: LD_INT 2
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: PUSH
12640: LD_INT 18
12642: PUSH
12643: LD_INT 46
12645: PUSH
12646: LD_INT 87
12648: PUSH
12649: LD_INT 1
12651: PUSH
12652: EMPTY
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: PUSH
12658: LD_INT 28
12660: PUSH
12661: LD_INT 41
12663: PUSH
12664: LD_INT 64
12666: PUSH
12667: LD_INT 5
12669: PUSH
12670: EMPTY
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: PUSH
12676: LD_INT 32
12678: PUSH
12679: LD_INT 75
12681: PUSH
12682: LD_INT 76
12684: PUSH
12685: LD_INT 5
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 32
12696: PUSH
12697: LD_INT 77
12699: PUSH
12700: LD_INT 75
12702: PUSH
12703: LD_INT 5
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 32
12714: PUSH
12715: LD_INT 69
12717: PUSH
12718: LD_INT 68
12720: PUSH
12721: LD_INT 3
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: PUSH
12730: LD_INT 32
12732: PUSH
12733: LD_INT 59
12735: PUSH
12736: LD_INT 96
12738: PUSH
12739: LD_INT 5
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 32
12750: PUSH
12751: LD_INT 56
12753: PUSH
12754: LD_INT 96
12756: PUSH
12757: LD_INT 0
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 32
12768: PUSH
12769: LD_INT 51
12771: PUSH
12772: LD_INT 61
12774: PUSH
12775: LD_INT 3
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 32
12786: PUSH
12787: LD_INT 42
12789: PUSH
12790: LD_INT 60
12792: PUSH
12793: LD_INT 3
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 32
12804: PUSH
12805: LD_INT 36
12807: PUSH
12808: LD_INT 58
12810: PUSH
12811: LD_INT 3
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 32
12822: PUSH
12823: LD_INT 39
12825: PUSH
12826: LD_INT 59
12828: PUSH
12829: LD_INT 3
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 32
12840: PUSH
12841: LD_INT 61
12843: PUSH
12844: LD_INT 64
12846: PUSH
12847: LD_INT 3
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 33
12858: PUSH
12859: LD_INT 63
12861: PUSH
12862: LD_INT 90
12864: PUSH
12865: LD_INT 5
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 33
12876: PUSH
12877: LD_INT 64
12879: PUSH
12880: LD_INT 88
12882: PUSH
12883: LD_INT 5
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 33
12894: PUSH
12895: LD_INT 72
12897: PUSH
12898: LD_INT 82
12900: PUSH
12901: LD_INT 5
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 6
12912: PUSH
12913: LD_INT 42
12915: PUSH
12916: LD_INT 74
12918: PUSH
12919: LD_INT 1
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 6
12930: PUSH
12931: LD_INT 56
12933: PUSH
12934: LD_INT 77
12936: PUSH
12937: LD_INT 2
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 21
12948: PUSH
12949: LD_INT 54
12951: PUSH
12952: LD_INT 91
12954: PUSH
12955: LD_INT 5
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 16
12966: PUSH
12967: LD_INT 50
12969: PUSH
12970: LD_INT 83
12972: PUSH
12973: LD_INT 3
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 24
12984: PUSH
12985: LD_INT 50
12987: PUSH
12988: LD_INT 90
12990: PUSH
12991: LD_INT 0
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13031: LD_ADDR_VAR 0 3
13035: PUSH
13036: LD_INT 22
13038: PUSH
13039: LD_INT 3
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 3
13048: PUSH
13049: LD_INT 25
13051: PUSH
13052: LD_INT 2
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PPUSH
13067: CALL_OW 69
13071: PUSH
13072: FOR_IN
13073: IFFALSE 13092
// AddComAgressiveMove ( i , 53 , 82 ) ;
13075: LD_VAR 0 3
13079: PPUSH
13080: LD_INT 53
13082: PPUSH
13083: LD_INT 82
13085: PPUSH
13086: CALL_OW 174
13090: GO 13072
13092: POP
13093: POP
// for i := 1 to buildingsTab do
13094: LD_ADDR_VAR 0 3
13098: PUSH
13099: DOUBLE
13100: LD_INT 1
13102: DEC
13103: ST_TO_ADDR
13104: LD_VAR 0 5
13108: PUSH
13109: FOR_TO
13110: IFFALSE 13183
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13112: LD_VAR 0 4
13116: PPUSH
13117: LD_VAR 0 5
13121: PUSH
13122: LD_VAR 0 3
13126: ARRAY
13127: PUSH
13128: LD_INT 1
13130: ARRAY
13131: PPUSH
13132: LD_VAR 0 5
13136: PUSH
13137: LD_VAR 0 3
13141: ARRAY
13142: PUSH
13143: LD_INT 2
13145: ARRAY
13146: PPUSH
13147: LD_VAR 0 5
13151: PUSH
13152: LD_VAR 0 3
13156: ARRAY
13157: PUSH
13158: LD_INT 3
13160: ARRAY
13161: PPUSH
13162: LD_VAR 0 5
13166: PUSH
13167: LD_VAR 0 3
13171: ARRAY
13172: PUSH
13173: LD_INT 4
13175: ARRAY
13176: PPUSH
13177: CALL_OW 205
13181: GO 13109
13183: POP
13184: POP
// end ; if position = 2 then
13185: LD_VAR 0 1
13189: PUSH
13190: LD_INT 2
13192: EQUAL
13193: IFFALSE 13808
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13195: LD_ADDR_VAR 0 4
13199: PUSH
13200: LD_INT 22
13202: PUSH
13203: LD_INT 3
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: PUSH
13210: LD_INT 25
13212: PUSH
13213: LD_INT 2
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: PUSH
13220: EMPTY
13221: LIST
13222: LIST
13223: PPUSH
13224: CALL_OW 69
13228: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
13229: LD_ADDR_VAR 0 5
13233: PUSH
13234: LD_INT 0
13236: PUSH
13237: LD_INT 104
13239: PUSH
13240: LD_INT 110
13242: PUSH
13243: LD_INT 5
13245: PUSH
13246: EMPTY
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: PUSH
13252: LD_INT 4
13254: PUSH
13255: LD_INT 98
13257: PUSH
13258: LD_INT 90
13260: PUSH
13261: LD_INT 3
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: PUSH
13270: LD_INT 29
13272: PUSH
13273: LD_INT 103
13275: PUSH
13276: LD_INT 114
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: PUSH
13288: LD_INT 30
13290: PUSH
13291: LD_INT 99
13293: PUSH
13294: LD_INT 114
13296: PUSH
13297: LD_INT 3
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: PUSH
13306: LD_INT 28
13308: PUSH
13309: LD_INT 100
13311: PUSH
13312: LD_INT 112
13314: PUSH
13315: LD_INT 1
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: LIST
13322: LIST
13323: PUSH
13324: LD_INT 2
13326: PUSH
13327: LD_INT 92
13329: PUSH
13330: LD_INT 101
13332: PUSH
13333: LD_INT 0
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: PUSH
13342: LD_INT 28
13344: PUSH
13345: LD_INT 97
13347: PUSH
13348: LD_INT 116
13350: PUSH
13351: LD_INT 5
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: PUSH
13360: LD_INT 17
13362: PUSH
13363: LD_INT 96
13365: PUSH
13366: LD_INT 101
13368: PUSH
13369: LD_INT 4
13371: PUSH
13372: EMPTY
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: PUSH
13378: LD_INT 18
13380: PUSH
13381: LD_INT 88
13383: PUSH
13384: LD_INT 97
13386: PUSH
13387: LD_INT 2
13389: PUSH
13390: EMPTY
13391: LIST
13392: LIST
13393: LIST
13394: LIST
13395: PUSH
13396: LD_INT 28
13398: PUSH
13399: LD_INT 106
13401: PUSH
13402: LD_INT 92
13404: PUSH
13405: LD_INT 2
13407: PUSH
13408: EMPTY
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: PUSH
13414: LD_INT 32
13416: PUSH
13417: LD_INT 88
13419: PUSH
13420: LD_INT 89
13422: PUSH
13423: LD_INT 2
13425: PUSH
13426: EMPTY
13427: LIST
13428: LIST
13429: LIST
13430: LIST
13431: PUSH
13432: LD_INT 32
13434: PUSH
13435: LD_INT 86
13437: PUSH
13438: LD_INT 90
13440: PUSH
13441: LD_INT 2
13443: PUSH
13444: EMPTY
13445: LIST
13446: LIST
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 32
13452: PUSH
13453: LD_INT 85
13455: PUSH
13456: LD_INT 99
13458: PUSH
13459: LD_INT 2
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 32
13470: PUSH
13471: LD_INT 85
13473: PUSH
13474: LD_INT 107
13476: PUSH
13477: LD_INT 1
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: PUSH
13486: LD_INT 33
13488: PUSH
13489: LD_INT 105
13491: PUSH
13492: LD_INT 99
13494: PUSH
13495: LD_INT 1
13497: PUSH
13498: EMPTY
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 33
13506: PUSH
13507: LD_INT 102
13509: PUSH
13510: LD_INT 92
13512: PUSH
13513: LD_INT 3
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: PUSH
13522: LD_INT 33
13524: PUSH
13525: LD_INT 105
13527: PUSH
13528: LD_INT 92
13530: PUSH
13531: LD_INT 2
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: LIST
13538: LIST
13539: PUSH
13540: LD_INT 6
13542: PUSH
13543: LD_INT 92
13545: PUSH
13546: LD_INT 110
13548: PUSH
13549: LD_INT 0
13551: PUSH
13552: EMPTY
13553: LIST
13554: LIST
13555: LIST
13556: LIST
13557: PUSH
13558: LD_INT 6
13560: PUSH
13561: LD_INT 103
13563: PUSH
13564: LD_INT 103
13566: PUSH
13567: LD_INT 5
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: LIST
13574: LIST
13575: PUSH
13576: LD_INT 21
13578: PUSH
13579: LD_INT 89
13581: PUSH
13582: LD_INT 101
13584: PUSH
13585: LD_INT 1
13587: PUSH
13588: EMPTY
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: PUSH
13594: LD_INT 16
13596: PUSH
13597: LD_INT 95
13599: PUSH
13600: LD_INT 104
13602: PUSH
13603: LD_INT 4
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: LIST
13611: PUSH
13612: LD_INT 24
13614: PUSH
13615: LD_INT 92
13617: PUSH
13618: LD_INT 105
13620: PUSH
13621: LD_INT 0
13623: PUSH
13624: EMPTY
13625: LIST
13626: LIST
13627: LIST
13628: LIST
13629: PUSH
13630: EMPTY
13631: LIST
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: LIST
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13654: LD_ADDR_VAR 0 3
13658: PUSH
13659: LD_INT 22
13661: PUSH
13662: LD_INT 3
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: PUSH
13669: LD_INT 3
13671: PUSH
13672: LD_INT 25
13674: PUSH
13675: LD_INT 2
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL_OW 69
13694: PUSH
13695: FOR_IN
13696: IFFALSE 13715
// AddComAgressiveMove ( i , 96 , 99 ) ;
13698: LD_VAR 0 3
13702: PPUSH
13703: LD_INT 96
13705: PPUSH
13706: LD_INT 99
13708: PPUSH
13709: CALL_OW 174
13713: GO 13695
13715: POP
13716: POP
// for i := 1 to buildingsTab do
13717: LD_ADDR_VAR 0 3
13721: PUSH
13722: DOUBLE
13723: LD_INT 1
13725: DEC
13726: ST_TO_ADDR
13727: LD_VAR 0 5
13731: PUSH
13732: FOR_TO
13733: IFFALSE 13806
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13735: LD_VAR 0 4
13739: PPUSH
13740: LD_VAR 0 5
13744: PUSH
13745: LD_VAR 0 3
13749: ARRAY
13750: PUSH
13751: LD_INT 1
13753: ARRAY
13754: PPUSH
13755: LD_VAR 0 5
13759: PUSH
13760: LD_VAR 0 3
13764: ARRAY
13765: PUSH
13766: LD_INT 2
13768: ARRAY
13769: PPUSH
13770: LD_VAR 0 5
13774: PUSH
13775: LD_VAR 0 3
13779: ARRAY
13780: PUSH
13781: LD_INT 3
13783: ARRAY
13784: PPUSH
13785: LD_VAR 0 5
13789: PUSH
13790: LD_VAR 0 3
13794: ARRAY
13795: PUSH
13796: LD_INT 4
13798: ARRAY
13799: PPUSH
13800: CALL_OW 205
13804: GO 13732
13806: POP
13807: POP
// end ; if position = 3 then
13808: LD_VAR 0 1
13812: PUSH
13813: LD_INT 3
13815: EQUAL
13816: IFFALSE 14602
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13818: LD_ADDR_VAR 0 4
13822: PUSH
13823: LD_INT 22
13825: PUSH
13826: LD_INT 3
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PUSH
13833: LD_INT 25
13835: PUSH
13836: LD_INT 2
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: PUSH
13843: EMPTY
13844: LIST
13845: LIST
13846: PPUSH
13847: CALL_OW 69
13851: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13852: LD_ADDR_VAR 0 5
13856: PUSH
13857: LD_INT 0
13859: PUSH
13860: LD_INT 151
13862: PUSH
13863: LD_INT 71
13865: PUSH
13866: LD_INT 4
13868: PUSH
13869: EMPTY
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: PUSH
13875: LD_INT 4
13877: PUSH
13878: LD_INT 145
13880: PUSH
13881: LD_INT 53
13883: PUSH
13884: LD_INT 3
13886: PUSH
13887: EMPTY
13888: LIST
13889: LIST
13890: LIST
13891: LIST
13892: PUSH
13893: LD_INT 4
13895: PUSH
13896: LD_INT 172
13898: PUSH
13899: LD_INT 102
13901: PUSH
13902: LD_INT 5
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 29
13913: PUSH
13914: LD_INT 152
13916: PUSH
13917: LD_INT 85
13919: PUSH
13920: LD_INT 3
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: PUSH
13929: LD_INT 30
13931: PUSH
13932: LD_INT 156
13934: PUSH
13935: LD_INT 92
13937: PUSH
13938: LD_INT 3
13940: PUSH
13941: EMPTY
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 28
13949: PUSH
13950: LD_INT 151
13952: PUSH
13953: LD_INT 66
13955: PUSH
13956: LD_INT 4
13958: PUSH
13959: EMPTY
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: PUSH
13965: LD_INT 2
13967: PUSH
13968: LD_INT 163
13970: PUSH
13971: LD_INT 95
13973: PUSH
13974: LD_INT 5
13976: PUSH
13977: EMPTY
13978: LIST
13979: LIST
13980: LIST
13981: LIST
13982: PUSH
13983: LD_INT 28
13985: PUSH
13986: LD_INT 149
13988: PUSH
13989: LD_INT 63
13991: PUSH
13992: LD_INT 4
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: LIST
13999: LIST
14000: PUSH
14001: LD_INT 17
14003: PUSH
14004: LD_INT 167
14006: PUSH
14007: LD_INT 99
14009: PUSH
14010: LD_INT 5
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 18
14021: PUSH
14022: LD_INT 163
14024: PUSH
14025: LD_INT 98
14027: PUSH
14028: LD_INT 0
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 28
14039: PUSH
14040: LD_INT 154
14042: PUSH
14043: LD_INT 70
14045: PUSH
14046: LD_INT 4
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 32
14057: PUSH
14058: LD_INT 155
14060: PUSH
14061: LD_INT 62
14063: PUSH
14064: LD_INT 4
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 32
14075: PUSH
14076: LD_INT 161
14078: PUSH
14079: LD_INT 69
14081: PUSH
14082: LD_INT 4
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 32
14093: PUSH
14094: LD_INT 168
14096: PUSH
14097: LD_INT 78
14099: PUSH
14100: LD_INT 4
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 32
14111: PUSH
14112: LD_INT 163
14114: PUSH
14115: LD_INT 80
14117: PUSH
14118: LD_INT 5
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 32
14129: PUSH
14130: LD_INT 136
14132: PUSH
14133: LD_INT 73
14135: PUSH
14136: LD_INT 0
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: PUSH
14145: LD_INT 32
14147: PUSH
14148: LD_INT 157
14150: PUSH
14151: LD_INT 98
14153: PUSH
14154: LD_INT 0
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 32
14165: PUSH
14166: LD_INT 150
14168: PUSH
14169: LD_INT 87
14171: PUSH
14172: LD_INT 1
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: PUSH
14181: LD_INT 33
14183: PUSH
14184: LD_INT 171
14186: PUSH
14187: LD_INT 97
14189: PUSH
14190: LD_INT 4
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: LIST
14197: LIST
14198: PUSH
14199: LD_INT 33
14201: PUSH
14202: LD_INT 168
14204: PUSH
14205: LD_INT 92
14207: PUSH
14208: LD_INT 4
14210: PUSH
14211: EMPTY
14212: LIST
14213: LIST
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 33
14219: PUSH
14220: LD_INT 166
14222: PUSH
14223: LD_INT 80
14225: PUSH
14226: LD_INT 5
14228: PUSH
14229: EMPTY
14230: LIST
14231: LIST
14232: LIST
14233: LIST
14234: PUSH
14235: LD_INT 33
14237: PUSH
14238: LD_INT 141
14240: PUSH
14241: LD_INT 54
14243: PUSH
14244: LD_INT 2
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: LIST
14251: LIST
14252: PUSH
14253: LD_INT 33
14255: PUSH
14256: LD_INT 133
14258: PUSH
14259: LD_INT 57
14261: PUSH
14262: LD_INT 2
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: PUSH
14271: LD_INT 33
14273: PUSH
14274: LD_INT 132
14276: PUSH
14277: LD_INT 61
14279: PUSH
14280: LD_INT 2
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 33
14291: PUSH
14292: LD_INT 150
14294: PUSH
14295: LD_INT 82
14297: PUSH
14298: LD_INT 0
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 33
14309: PUSH
14310: LD_INT 132
14312: PUSH
14313: LD_INT 72
14315: PUSH
14316: LD_INT 0
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 6
14327: PUSH
14328: LD_INT 146
14330: PUSH
14331: LD_INT 64
14333: PUSH
14334: LD_INT 4
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 6
14345: PUSH
14346: LD_INT 159
14348: PUSH
14349: LD_INT 85
14351: PUSH
14352: LD_INT 4
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 21
14363: PUSH
14364: LD_INT 163
14366: PUSH
14367: LD_INT 91
14369: PUSH
14370: LD_INT 3
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 16
14381: PUSH
14382: LD_INT 166
14384: PUSH
14385: LD_INT 95
14387: PUSH
14388: LD_INT 4
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: PUSH
14397: LD_INT 24
14399: PUSH
14400: LD_INT 159
14402: PUSH
14403: LD_INT 95
14405: PUSH
14406: LD_INT 1
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: LIST
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14448: LD_ADDR_VAR 0 3
14452: PUSH
14453: LD_INT 22
14455: PUSH
14456: LD_INT 3
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: LD_INT 3
14465: PUSH
14466: LD_INT 25
14468: PUSH
14469: LD_INT 2
14471: PUSH
14472: EMPTY
14473: LIST
14474: LIST
14475: PUSH
14476: EMPTY
14477: LIST
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: PPUSH
14484: CALL_OW 69
14488: PUSH
14489: FOR_IN
14490: IFFALSE 14509
// AddComAgressiveMove ( i , 141 , 65 ) ;
14492: LD_VAR 0 3
14496: PPUSH
14497: LD_INT 141
14499: PPUSH
14500: LD_INT 65
14502: PPUSH
14503: CALL_OW 174
14507: GO 14489
14509: POP
14510: POP
// for i := 1 to buildingsTab do
14511: LD_ADDR_VAR 0 3
14515: PUSH
14516: DOUBLE
14517: LD_INT 1
14519: DEC
14520: ST_TO_ADDR
14521: LD_VAR 0 5
14525: PUSH
14526: FOR_TO
14527: IFFALSE 14600
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14529: LD_VAR 0 4
14533: PPUSH
14534: LD_VAR 0 5
14538: PUSH
14539: LD_VAR 0 3
14543: ARRAY
14544: PUSH
14545: LD_INT 1
14547: ARRAY
14548: PPUSH
14549: LD_VAR 0 5
14553: PUSH
14554: LD_VAR 0 3
14558: ARRAY
14559: PUSH
14560: LD_INT 2
14562: ARRAY
14563: PPUSH
14564: LD_VAR 0 5
14568: PUSH
14569: LD_VAR 0 3
14573: ARRAY
14574: PUSH
14575: LD_INT 3
14577: ARRAY
14578: PPUSH
14579: LD_VAR 0 5
14583: PUSH
14584: LD_VAR 0 3
14588: ARRAY
14589: PUSH
14590: LD_INT 4
14592: ARRAY
14593: PPUSH
14594: CALL_OW 205
14598: GO 14526
14600: POP
14601: POP
// end ; end ;
14602: LD_VAR 0 2
14606: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14607: LD_INT 0
14609: PPUSH
14610: PPUSH
14611: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14612: LD_ADDR_EXP 70
14616: PUSH
14617: LD_INT 0
14619: PUSH
14620: LD_INT 71
14622: PUSH
14623: LD_INT 15
14625: PUSH
14626: LD_INT 3
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: LIST
14633: LIST
14634: PUSH
14635: LD_INT 6
14637: PUSH
14638: LD_INT 77
14640: PUSH
14641: LD_INT 18
14643: PUSH
14644: LD_INT 3
14646: PUSH
14647: EMPTY
14648: LIST
14649: LIST
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 4
14655: PUSH
14656: LD_INT 77
14658: PUSH
14659: LD_INT 26
14661: PUSH
14662: LD_INT 0
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: PUSH
14671: LD_INT 31
14673: PUSH
14674: LD_INT 72
14676: PUSH
14677: LD_INT 24
14679: PUSH
14680: LD_INT 0
14682: PUSH
14683: EMPTY
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: PUSH
14689: LD_INT 31
14691: PUSH
14692: LD_INT 82
14694: PUSH
14695: LD_INT 28
14697: PUSH
14698: LD_INT 0
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 31
14709: PUSH
14710: LD_INT 84
14712: PUSH
14713: LD_INT 21
14715: PUSH
14716: LD_INT 3
14718: PUSH
14719: EMPTY
14720: LIST
14721: LIST
14722: LIST
14723: LIST
14724: PUSH
14725: LD_INT 31
14727: PUSH
14728: LD_INT 66
14730: PUSH
14731: LD_INT 14
14733: PUSH
14734: LD_INT 2
14736: PUSH
14737: EMPTY
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: PUSH
14743: LD_INT 27
14745: PUSH
14746: LD_INT 67
14748: PUSH
14749: LD_INT 18
14751: PUSH
14752: LD_INT 5
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 27
14763: PUSH
14764: LD_INT 69
14766: PUSH
14767: LD_INT 23
14769: PUSH
14770: LD_INT 2
14772: PUSH
14773: EMPTY
14774: LIST
14775: LIST
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: LIST
14783: LIST
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: LIST
14789: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14790: LD_ADDR_VAR 0 3
14794: PUSH
14795: LD_INT 22
14797: PUSH
14798: LD_INT 2
14800: PUSH
14801: EMPTY
14802: LIST
14803: LIST
14804: PUSH
14805: LD_INT 25
14807: PUSH
14808: LD_INT 2
14810: PUSH
14811: EMPTY
14812: LIST
14813: LIST
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: PPUSH
14819: CALL_OW 69
14823: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14824: LD_VAR 0 3
14828: PPUSH
14829: LD_EXP 70
14833: PUSH
14834: LD_INT 1
14836: ARRAY
14837: PUSH
14838: LD_INT 1
14840: ARRAY
14841: PPUSH
14842: LD_EXP 70
14846: PUSH
14847: LD_INT 1
14849: ARRAY
14850: PUSH
14851: LD_INT 2
14853: ARRAY
14854: PPUSH
14855: LD_EXP 70
14859: PUSH
14860: LD_INT 1
14862: ARRAY
14863: PUSH
14864: LD_INT 3
14866: ARRAY
14867: PPUSH
14868: LD_EXP 70
14872: PUSH
14873: LD_INT 1
14875: ARRAY
14876: PUSH
14877: LD_INT 4
14879: ARRAY
14880: PPUSH
14881: CALL_OW 205
// end ;
14885: LD_VAR 0 1
14889: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14890: LD_INT 0
14892: PPUSH
14893: PPUSH
14894: PPUSH
14895: PPUSH
14896: PPUSH
14897: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14898: LD_ADDR_VAR 0 7
14902: PUSH
14903: LD_INT 22
14905: PUSH
14906: LD_VAR 0 1
14910: PUSH
14911: EMPTY
14912: LIST
14913: LIST
14914: PUSH
14915: LD_INT 25
14917: PUSH
14918: LD_INT 9
14920: PUSH
14921: EMPTY
14922: LIST
14923: LIST
14924: PUSH
14925: EMPTY
14926: LIST
14927: LIST
14928: PPUSH
14929: CALL_OW 69
14933: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14934: LD_ADDR_VAR 0 8
14938: PUSH
14939: LD_INT 22
14941: PUSH
14942: LD_VAR 0 2
14946: PUSH
14947: EMPTY
14948: LIST
14949: LIST
14950: PUSH
14951: LD_INT 3
14953: PUSH
14954: LD_INT 21
14956: PUSH
14957: LD_INT 3
14959: PUSH
14960: EMPTY
14961: LIST
14962: LIST
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PPUSH
14972: CALL_OW 69
14976: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14977: LD_ADDR_VAR 0 5
14981: PUSH
14982: LD_INT 1
14984: PPUSH
14985: LD_INT 3
14987: PPUSH
14988: CALL_OW 12
14992: ST_TO_ADDR
// for i = 1 to list do
14993: LD_ADDR_VAR 0 6
14997: PUSH
14998: DOUBLE
14999: LD_INT 1
15001: DEC
15002: ST_TO_ADDR
15003: LD_VAR 0 7
15007: PUSH
15008: FOR_TO
15009: IFFALSE 15999
// for ta in filter do
15011: LD_ADDR_VAR 0 4
15015: PUSH
15016: LD_VAR 0 8
15020: PUSH
15021: FOR_IN
15022: IFFALSE 15995
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15024: LD_VAR 0 7
15028: PUSH
15029: LD_VAR 0 6
15033: ARRAY
15034: PPUSH
15035: LD_VAR 0 4
15039: PPUSH
15040: CALL_OW 296
15044: PUSH
15045: LD_INT 15
15047: LESSEQUAL
15048: IFFALSE 15993
// begin case c of 1 :
15050: LD_VAR 0 5
15054: PUSH
15055: LD_INT 1
15057: DOUBLE
15058: EQUAL
15059: IFTRUE 15063
15061: GO 15495
15063: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
15064: LD_VAR 0 7
15068: PUSH
15069: LD_VAR 0 6
15073: ARRAY
15074: PPUSH
15075: LD_VAR 0 4
15079: PPUSH
15080: CALL_OW 250
15084: PPUSH
15085: LD_VAR 0 4
15089: PPUSH
15090: CALL_OW 251
15094: PPUSH
15095: CALL_OW 154
// if eventVar2 = 0 then
15099: LD_EXP 68
15103: PUSH
15104: LD_INT 0
15106: EQUAL
15107: IFFALSE 15493
// begin eventVar2 = 1 ;
15109: LD_ADDR_EXP 68
15113: PUSH
15114: LD_INT 1
15116: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15117: LD_INT 245
15119: PPUSH
15120: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15124: LD_VAR 0 4
15128: PPUSH
15129: CALL_OW 250
15133: PPUSH
15134: LD_VAR 0 4
15138: PPUSH
15139: CALL_OW 251
15143: PPUSH
15144: CALL_OW 84
// DialogueOn ;
15148: CALL_OW 6
// if IsOK ( Cyrus ) then
15152: LD_EXP 5
15156: PPUSH
15157: CALL_OW 302
15161: IFFALSE 15177
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15163: LD_EXP 5
15167: PPUSH
15168: LD_STRING D9a-Cyrus-1
15170: PPUSH
15171: CALL_OW 88
// end else
15175: GO 15299
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15177: LD_INT 22
15179: PUSH
15180: LD_INT 1
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 26
15189: PUSH
15190: LD_INT 1
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 2
15199: PUSH
15200: LD_INT 25
15202: PUSH
15203: LD_INT 1
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: LD_INT 25
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 25
15222: PUSH
15223: LD_INT 3
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 25
15232: PUSH
15233: LD_INT 4
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 25
15242: PUSH
15243: LD_INT 5
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: EMPTY
15251: LIST
15252: LIST
15253: LIST
15254: LIST
15255: LIST
15256: LIST
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: LIST
15262: PPUSH
15263: CALL_OW 69
15267: PUSH
15268: LD_EXP 1
15272: PUSH
15273: LD_EXP 14
15277: PUSH
15278: LD_EXP 5
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: LIST
15287: DIFF
15288: PPUSH
15289: LD_STRING D9a-Sol1-1
15291: PPUSH
15292: LD_STRING D9a-Sol1-1
15294: PPUSH
15295: CALL 11454 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15299: LD_INT 22
15301: PUSH
15302: LD_INT 1
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 26
15311: PUSH
15312: LD_INT 1
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: LD_INT 25
15324: PUSH
15325: LD_INT 1
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 25
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 25
15344: PUSH
15345: LD_INT 3
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 25
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 25
15364: PUSH
15365: LD_INT 5
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: PPUSH
15385: CALL_OW 69
15389: PUSH
15390: LD_EXP 1
15394: PUSH
15395: LD_EXP 14
15399: PUSH
15400: LD_EXP 5
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: DIFF
15410: PPUSH
15411: LD_STRING D9b-Sol1-1
15413: PPUSH
15414: LD_STRING D9b-Sol1-1
15416: PPUSH
15417: CALL 11454 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15421: LD_STRING 09_arInfo
15423: PPUSH
15424: LD_INT 0
15426: PPUSH
15427: CALL_OW 30
15431: PUSH
15432: LD_INT 1
15434: EQUAL
15435: IFFALSE 15449
// Say ( JMM , D9a-JMM-1 ) ;
15437: LD_EXP 1
15441: PPUSH
15442: LD_STRING D9a-JMM-1
15444: PPUSH
15445: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15449: LD_EXP 1
15453: PPUSH
15454: LD_STRING D9c-JMM-1
15456: PPUSH
15457: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15461: LD_INT 12
15463: PPUSH
15464: LD_INT 1
15466: PPUSH
15467: CALL_OW 321
15471: PUSH
15472: LD_INT 2
15474: EQUAL
15475: IFFALSE 15489
// Say ( JMM , D9c-JMM-1a ) ;
15477: LD_EXP 1
15481: PPUSH
15482: LD_STRING D9c-JMM-1a
15484: PPUSH
15485: CALL_OW 88
// DialogueOff ;
15489: CALL_OW 7
// end ; end ; 2 :
15493: GO 15993
15495: LD_INT 2
15497: DOUBLE
15498: EQUAL
15499: IFTRUE 15503
15501: GO 15961
15503: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15504: LD_VAR 0 7
15508: PUSH
15509: LD_VAR 0 6
15513: ARRAY
15514: PPUSH
15515: LD_VAR 0 4
15519: PPUSH
15520: CALL_OW 250
15524: PUSH
15525: LD_INT 1
15527: NEG
15528: PPUSH
15529: LD_INT 1
15531: PPUSH
15532: CALL_OW 12
15536: PLUS
15537: PPUSH
15538: LD_VAR 0 4
15542: PPUSH
15543: CALL_OW 251
15547: PUSH
15548: LD_INT 1
15550: NEG
15551: PPUSH
15552: LD_INT 1
15554: PPUSH
15555: CALL_OW 12
15559: PLUS
15560: PPUSH
15561: CALL_OW 153
// if eventVar2 = 0 then
15565: LD_EXP 68
15569: PUSH
15570: LD_INT 0
15572: EQUAL
15573: IFFALSE 15959
// begin eventVar2 = 1 ;
15575: LD_ADDR_EXP 68
15579: PUSH
15580: LD_INT 1
15582: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15583: LD_INT 245
15585: PPUSH
15586: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15590: LD_VAR 0 4
15594: PPUSH
15595: CALL_OW 250
15599: PPUSH
15600: LD_VAR 0 4
15604: PPUSH
15605: CALL_OW 251
15609: PPUSH
15610: CALL_OW 84
// DialogueOn ;
15614: CALL_OW 6
// if IsOK ( Cyrus ) then
15618: LD_EXP 5
15622: PPUSH
15623: CALL_OW 302
15627: IFFALSE 15643
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15629: LD_EXP 5
15633: PPUSH
15634: LD_STRING D9a-Cyrus-1
15636: PPUSH
15637: CALL_OW 88
// end else
15641: GO 15765
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15643: LD_INT 22
15645: PUSH
15646: LD_INT 1
15648: PUSH
15649: EMPTY
15650: LIST
15651: LIST
15652: PUSH
15653: LD_INT 26
15655: PUSH
15656: LD_INT 1
15658: PUSH
15659: EMPTY
15660: LIST
15661: LIST
15662: PUSH
15663: LD_INT 2
15665: PUSH
15666: LD_INT 25
15668: PUSH
15669: LD_INT 1
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: LD_INT 25
15678: PUSH
15679: LD_INT 2
15681: PUSH
15682: EMPTY
15683: LIST
15684: LIST
15685: PUSH
15686: LD_INT 25
15688: PUSH
15689: LD_INT 3
15691: PUSH
15692: EMPTY
15693: LIST
15694: LIST
15695: PUSH
15696: LD_INT 25
15698: PUSH
15699: LD_INT 4
15701: PUSH
15702: EMPTY
15703: LIST
15704: LIST
15705: PUSH
15706: LD_INT 25
15708: PUSH
15709: LD_INT 5
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: PUSH
15716: EMPTY
15717: LIST
15718: LIST
15719: LIST
15720: LIST
15721: LIST
15722: LIST
15723: PUSH
15724: EMPTY
15725: LIST
15726: LIST
15727: LIST
15728: PPUSH
15729: CALL_OW 69
15733: PUSH
15734: LD_EXP 1
15738: PUSH
15739: LD_EXP 14
15743: PUSH
15744: LD_EXP 5
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: LIST
15753: DIFF
15754: PPUSH
15755: LD_STRING D9a-Sol1-1
15757: PPUSH
15758: LD_STRING D9a-Sol1-1
15760: PPUSH
15761: CALL 11454 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15765: LD_INT 22
15767: PUSH
15768: LD_INT 1
15770: PUSH
15771: EMPTY
15772: LIST
15773: LIST
15774: PUSH
15775: LD_INT 26
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 2
15787: PUSH
15788: LD_INT 25
15790: PUSH
15791: LD_INT 1
15793: PUSH
15794: EMPTY
15795: LIST
15796: LIST
15797: PUSH
15798: LD_INT 25
15800: PUSH
15801: LD_INT 2
15803: PUSH
15804: EMPTY
15805: LIST
15806: LIST
15807: PUSH
15808: LD_INT 25
15810: PUSH
15811: LD_INT 3
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 25
15820: PUSH
15821: LD_INT 4
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: LD_INT 25
15830: PUSH
15831: LD_INT 5
15833: PUSH
15834: EMPTY
15835: LIST
15836: LIST
15837: PUSH
15838: EMPTY
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: LIST
15850: PPUSH
15851: CALL_OW 69
15855: PUSH
15856: LD_EXP 1
15860: PUSH
15861: LD_EXP 14
15865: PUSH
15866: LD_EXP 5
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: LIST
15875: DIFF
15876: PPUSH
15877: LD_STRING D9b-Sol1-1
15879: PPUSH
15880: LD_STRING D9b-Sol1-1
15882: PPUSH
15883: CALL 11454 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15887: LD_STRING 09_arInfo
15889: PPUSH
15890: LD_INT 0
15892: PPUSH
15893: CALL_OW 30
15897: PUSH
15898: LD_INT 1
15900: EQUAL
15901: IFFALSE 15915
// Say ( JMM , D9a-JMM-1 ) ;
15903: LD_EXP 1
15907: PPUSH
15908: LD_STRING D9a-JMM-1
15910: PPUSH
15911: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15915: LD_EXP 1
15919: PPUSH
15920: LD_STRING D9c-JMM-1
15922: PPUSH
15923: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15927: LD_INT 12
15929: PPUSH
15930: LD_INT 1
15932: PPUSH
15933: CALL_OW 321
15937: PUSH
15938: LD_INT 2
15940: EQUAL
15941: IFFALSE 15955
// Say ( JMM , D9c-JMM-1a ) ;
15943: LD_EXP 1
15947: PPUSH
15948: LD_STRING D9c-JMM-1a
15950: PPUSH
15951: CALL_OW 88
// DialogueOff ;
15955: CALL_OW 7
// end ; end ; 3 :
15959: GO 15993
15961: LD_INT 3
15963: DOUBLE
15964: EQUAL
15965: IFTRUE 15969
15967: GO 15992
15969: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15970: LD_VAR 0 7
15974: PUSH
15975: LD_VAR 0 6
15979: ARRAY
15980: PPUSH
15981: LD_VAR 0 4
15985: PPUSH
15986: CALL_OW 115
15990: GO 15993
15992: POP
// end ; end ;
15993: GO 15021
15995: POP
15996: POP
15997: GO 15008
15999: POP
16000: POP
// end ;
16001: LD_VAR 0 3
16005: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
16006: LD_INT 0
16008: PPUSH
16009: PPUSH
16010: PPUSH
16011: PPUSH
// for i = 1 to 72 do
16012: LD_ADDR_VAR 0 5
16016: PUSH
16017: DOUBLE
16018: LD_INT 1
16020: DEC
16021: ST_TO_ADDR
16022: LD_INT 72
16024: PUSH
16025: FOR_TO
16026: IFFALSE 16084
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
16028: LD_VAR 0 5
16032: PPUSH
16033: LD_VAR 0 1
16037: PPUSH
16038: CALL_OW 321
16042: PUSH
16043: LD_INT 1
16045: EQUAL
16046: PUSH
16047: LD_VAR 0 5
16051: PPUSH
16052: LD_VAR 0 3
16056: PPUSH
16057: CALL_OW 482
16061: PUSH
16062: LD_INT 1
16064: EQUAL
16065: AND
16066: IFFALSE 16082
// AddComResearch ( lab , i ) ;
16068: LD_VAR 0 2
16072: PPUSH
16073: LD_VAR 0 5
16077: PPUSH
16078: CALL_OW 184
16082: GO 16025
16084: POP
16085: POP
// end ;
16086: LD_VAR 0 4
16090: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
16091: LD_INT 0
16093: PPUSH
16094: PPUSH
16095: PPUSH
16096: PPUSH
16097: PPUSH
16098: PPUSH
16099: PPUSH
16100: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
16101: LD_ADDR_VAR 0 6
16105: PUSH
16106: LD_INT 22
16108: PUSH
16109: LD_VAR 0 1
16113: PUSH
16114: EMPTY
16115: LIST
16116: LIST
16117: PUSH
16118: LD_INT 56
16120: PUSH
16121: EMPTY
16122: LIST
16123: PUSH
16124: LD_INT 24
16126: PUSH
16127: LD_INT 700
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 3
16136: PUSH
16137: LD_INT 60
16139: PUSH
16140: EMPTY
16141: LIST
16142: PUSH
16143: EMPTY
16144: LIST
16145: LIST
16146: PUSH
16147: LD_INT 2
16149: PUSH
16150: LD_INT 25
16152: PUSH
16153: LD_INT 1
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 25
16162: PUSH
16163: LD_INT 9
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: LIST
16174: PUSH
16175: EMPTY
16176: LIST
16177: LIST
16178: LIST
16179: LIST
16180: LIST
16181: PPUSH
16182: CALL_OW 69
16186: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
16187: LD_ADDR_VAR 0 7
16191: PUSH
16192: LD_INT 22
16194: PUSH
16195: LD_VAR 0 1
16199: PUSH
16200: EMPTY
16201: LIST
16202: LIST
16203: PUSH
16204: LD_INT 30
16206: PUSH
16207: LD_INT 32
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: LD_INT 58
16216: PUSH
16217: EMPTY
16218: LIST
16219: PUSH
16220: LD_INT 24
16222: PUSH
16223: LD_INT 251
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: LIST
16234: LIST
16235: PPUSH
16236: CALL_OW 69
16240: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
16241: LD_ADDR_VAR 0 9
16245: PUSH
16246: LD_INT 22
16248: PUSH
16249: LD_VAR 0 1
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 2
16260: PUSH
16261: LD_INT 30
16263: PUSH
16264: LD_INT 4
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 30
16273: PUSH
16274: LD_INT 5
16276: PUSH
16277: EMPTY
16278: LIST
16279: LIST
16280: PUSH
16281: EMPTY
16282: LIST
16283: LIST
16284: LIST
16285: PUSH
16286: LD_INT 24
16288: PUSH
16289: LD_INT 251
16291: PUSH
16292: EMPTY
16293: LIST
16294: LIST
16295: PUSH
16296: EMPTY
16297: LIST
16298: LIST
16299: LIST
16300: PPUSH
16301: CALL_OW 69
16305: ST_TO_ADDR
// if barrackList > 0 then
16306: LD_VAR 0 9
16310: PUSH
16311: LD_INT 0
16313: GREATER
16314: IFFALSE 16449
// begin if turretList = 0 then
16316: LD_VAR 0 7
16320: PUSH
16321: LD_INT 0
16323: EQUAL
16324: IFFALSE 16373
// begin for i in soldiers_list do
16326: LD_ADDR_VAR 0 4
16330: PUSH
16331: LD_VAR 0 6
16335: PUSH
16336: FOR_IN
16337: IFFALSE 16369
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
16339: LD_VAR 0 4
16343: PPUSH
16344: LD_VAR 0 9
16348: PUSH
16349: LD_INT 1
16351: PPUSH
16352: LD_VAR 0 9
16356: PPUSH
16357: CALL_OW 12
16361: ARRAY
16362: PPUSH
16363: CALL_OW 120
16367: GO 16336
16369: POP
16370: POP
// end else
16371: GO 16449
// begin for i in barrackList do
16373: LD_ADDR_VAR 0 4
16377: PUSH
16378: LD_VAR 0 9
16382: PUSH
16383: FOR_IN
16384: IFFALSE 16447
// begin insideUnits = UnitsInside ( i ) ;
16386: LD_ADDR_VAR 0 10
16390: PUSH
16391: LD_VAR 0 4
16395: PPUSH
16396: CALL_OW 313
16400: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16401: LD_VAR 0 10
16405: PUSH
16406: LD_INT 1
16408: ARRAY
16409: PPUSH
16410: LD_VAR 0 7
16414: PUSH
16415: LD_INT 1
16417: ARRAY
16418: PPUSH
16419: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16423: LD_VAR 0 6
16427: PUSH
16428: LD_INT 1
16430: ARRAY
16431: PPUSH
16432: LD_VAR 0 7
16436: PUSH
16437: LD_INT 1
16439: ARRAY
16440: PPUSH
16441: CALL_OW 120
// end ;
16445: GO 16383
16447: POP
16448: POP
// end ; end ; end ;
16449: LD_VAR 0 3
16453: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16454: LD_INT 0
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
16460: PPUSH
16461: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16462: LD_ADDR_VAR 0 6
16466: PUSH
16467: LD_VAR 0 2
16471: PPUSH
16472: CALL_OW 313
16476: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16477: LD_ADDR_VAR 0 7
16481: PUSH
16482: LD_INT 22
16484: PUSH
16485: LD_VAR 0 1
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: LD_INT 25
16496: PUSH
16497: LD_INT 2
16499: PUSH
16500: EMPTY
16501: LIST
16502: LIST
16503: PUSH
16504: LD_INT 24
16506: PUSH
16507: LD_INT 1000
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: LD_INT 3
16516: PUSH
16517: LD_INT 54
16519: PUSH
16520: EMPTY
16521: LIST
16522: PUSH
16523: EMPTY
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: LIST
16532: PPUSH
16533: CALL_OW 69
16537: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16538: LD_ADDR_VAR 0 4
16542: PUSH
16543: LD_INT 22
16545: PUSH
16546: LD_VAR 0 1
16550: PUSH
16551: EMPTY
16552: LIST
16553: LIST
16554: PUSH
16555: LD_INT 21
16557: PUSH
16558: LD_INT 3
16560: PUSH
16561: EMPTY
16562: LIST
16563: LIST
16564: PUSH
16565: LD_INT 3
16567: PUSH
16568: LD_INT 24
16570: PUSH
16571: LD_INT 1000
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PUSH
16578: EMPTY
16579: LIST
16580: LIST
16581: PUSH
16582: EMPTY
16583: LIST
16584: LIST
16585: LIST
16586: PUSH
16587: EMPTY
16588: LIST
16589: PPUSH
16590: CALL_OW 69
16594: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16595: LD_VAR 0 4
16599: NOT
16600: PUSH
16601: LD_VAR 0 7
16605: NOT
16606: AND
16607: PUSH
16608: LD_EXP 44
16612: NOT
16613: AND
16614: IFFALSE 16618
// exit ;
16616: GO 16809
// if buildings_list > 0 and engineerOkInside then
16618: LD_VAR 0 4
16622: PUSH
16623: LD_INT 0
16625: GREATER
16626: PUSH
16627: LD_VAR 0 6
16631: AND
16632: IFFALSE 16686
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16634: LD_ADDR_VAR 0 5
16638: PUSH
16639: LD_INT 22
16641: PUSH
16642: LD_VAR 0 1
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 25
16653: PUSH
16654: LD_INT 2
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PPUSH
16665: CALL_OW 69
16669: PUSH
16670: FOR_IN
16671: IFFALSE 16684
// ComExitBuilding ( i ) ;
16673: LD_VAR 0 5
16677: PPUSH
16678: CALL_OW 122
16682: GO 16670
16684: POP
16685: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16686: LD_VAR 0 4
16690: PUSH
16691: LD_INT 0
16693: GREATER
16694: PUSH
16695: LD_VAR 0 7
16699: PUSH
16700: LD_INT 0
16702: GREATER
16703: AND
16704: IFFALSE 16758
// begin for i in engineerOkOutside do
16706: LD_ADDR_VAR 0 5
16710: PUSH
16711: LD_VAR 0 7
16715: PUSH
16716: FOR_IN
16717: IFFALSE 16756
// for j in buildings_list do
16719: LD_ADDR_VAR 0 8
16723: PUSH
16724: LD_VAR 0 4
16728: PUSH
16729: FOR_IN
16730: IFFALSE 16752
// ComRepairBuilding ( i , j [ 1 ] ) ;
16732: LD_VAR 0 5
16736: PPUSH
16737: LD_VAR 0 8
16741: PUSH
16742: LD_INT 1
16744: ARRAY
16745: PPUSH
16746: CALL_OW 130
16750: GO 16729
16752: POP
16753: POP
16754: GO 16716
16756: POP
16757: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16758: LD_VAR 0 4
16762: PUSH
16763: LD_INT 0
16765: EQUAL
16766: PUSH
16767: LD_VAR 0 7
16771: PUSH
16772: LD_INT 0
16774: GREATER
16775: AND
16776: IFFALSE 16809
// for i in engineerOkOutside do
16778: LD_ADDR_VAR 0 5
16782: PUSH
16783: LD_VAR 0 7
16787: PUSH
16788: FOR_IN
16789: IFFALSE 16807
// ComEnterUnit ( i , building ) ;
16791: LD_VAR 0 5
16795: PPUSH
16796: LD_VAR 0 2
16800: PPUSH
16801: CALL_OW 120
16805: GO 16788
16807: POP
16808: POP
// end ;
16809: LD_VAR 0 3
16813: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16814: LD_INT 0
16816: PPUSH
16817: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16818: LD_INT 22
16820: PUSH
16821: LD_VAR 0 1
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 25
16832: PUSH
16833: LD_INT 2
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PPUSH
16844: CALL_OW 69
16848: PUSH
16849: LD_INT 0
16851: GREATER
16852: PUSH
16853: LD_INT 22
16855: PUSH
16856: LD_VAR 0 1
16860: PUSH
16861: EMPTY
16862: LIST
16863: LIST
16864: PUSH
16865: LD_INT 21
16867: PUSH
16868: LD_INT 3
16870: PUSH
16871: EMPTY
16872: LIST
16873: LIST
16874: PUSH
16875: LD_INT 3
16877: PUSH
16878: LD_INT 24
16880: PUSH
16881: LD_INT 1000
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: LIST
16896: PPUSH
16897: CALL_OW 69
16901: PUSH
16902: LD_INT 0
16904: EQUAL
16905: AND
16906: PUSH
16907: LD_VAR 0 2
16911: PUSH
16912: LD_INT 0
16914: GREATER
16915: AND
16916: IFFALSE 17015
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16918: LD_ADDR_VAR 0 4
16922: PUSH
16923: LD_INT 22
16925: PUSH
16926: LD_VAR 0 1
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 25
16937: PUSH
16938: LD_INT 2
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PPUSH
16949: CALL_OW 69
16953: PUSH
16954: FOR_IN
16955: IFFALSE 17013
// begin AddComExitBuilding ( i ) ;
16957: LD_VAR 0 4
16961: PPUSH
16962: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16966: LD_VAR 0 4
16970: PPUSH
16971: LD_VAR 0 2
16975: PUSH
16976: LD_INT 1
16978: ARRAY
16979: PPUSH
16980: LD_VAR 0 2
16984: PUSH
16985: LD_INT 2
16987: ARRAY
16988: PPUSH
16989: LD_VAR 0 2
16993: PUSH
16994: LD_INT 3
16996: ARRAY
16997: PPUSH
16998: LD_VAR 0 2
17002: PUSH
17003: LD_INT 4
17005: ARRAY
17006: PPUSH
17007: CALL_OW 205
// end ;
17011: GO 16954
17013: POP
17014: POP
// end ; end ;
17015: LD_VAR 0 3
17019: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
17020: LD_INT 0
17022: PPUSH
17023: PPUSH
17024: PPUSH
17025: PPUSH
17026: PPUSH
17027: PPUSH
17028: PPUSH
17029: PPUSH
17030: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
17031: LD_ADDR_VAR 0 6
17035: PUSH
17036: LD_INT 22
17038: PUSH
17039: LD_VAR 0 1
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: LD_INT 25
17050: PUSH
17051: LD_INT 4
17053: PUSH
17054: EMPTY
17055: LIST
17056: LIST
17057: PUSH
17058: LD_INT 24
17060: PUSH
17061: LD_INT 251
17063: PUSH
17064: EMPTY
17065: LIST
17066: LIST
17067: PUSH
17068: EMPTY
17069: LIST
17070: LIST
17071: LIST
17072: PPUSH
17073: CALL_OW 69
17077: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
17078: LD_ADDR_VAR 0 7
17082: PUSH
17083: LD_VAR 0 3
17087: PPUSH
17088: LD_INT 22
17090: PUSH
17091: LD_VAR 0 1
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 25
17102: PUSH
17103: LD_INT 4
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: PUSH
17110: LD_INT 50
17112: PUSH
17113: EMPTY
17114: LIST
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: LIST
17120: PPUSH
17121: CALL_OW 70
17125: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
17126: LD_ADDR_VAR 0 10
17130: PUSH
17131: LD_VAR 0 3
17135: PPUSH
17136: LD_INT 22
17138: PUSH
17139: LD_VAR 0 1
17143: PUSH
17144: EMPTY
17145: LIST
17146: LIST
17147: PUSH
17148: LD_INT 21
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PUSH
17158: LD_INT 3
17160: PUSH
17161: LD_INT 25
17163: PUSH
17164: LD_INT 3
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: PUSH
17171: EMPTY
17172: LIST
17173: LIST
17174: PUSH
17175: LD_INT 3
17177: PUSH
17178: LD_INT 24
17180: PUSH
17181: LD_INT 750
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: LIST
17197: PPUSH
17198: CALL_OW 70
17202: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17203: LD_ADDR_VAR 0 11
17207: PUSH
17208: LD_VAR 0 2
17212: PPUSH
17213: LD_INT 22
17215: PUSH
17216: LD_VAR 0 1
17220: PUSH
17221: EMPTY
17222: LIST
17223: LIST
17224: PUSH
17225: LD_INT 21
17227: PUSH
17228: LD_INT 1
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 3
17237: PUSH
17238: LD_INT 25
17240: PUSH
17241: LD_INT 3
17243: PUSH
17244: EMPTY
17245: LIST
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: LD_INT 24
17257: PUSH
17258: LD_INT 1000
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: LIST
17274: PPUSH
17275: CALL_OW 70
17279: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
17280: LD_VAR 0 10
17284: NOT
17285: PUSH
17286: LD_VAR 0 7
17290: NOT
17291: AND
17292: PUSH
17293: LD_VAR 0 11
17297: NOT
17298: AND
17299: IFFALSE 17303
// exit ;
17301: GO 17563
// if damageUnits > 0 and sci_list > 0 then
17303: LD_VAR 0 10
17307: PUSH
17308: LD_INT 0
17310: GREATER
17311: PUSH
17312: LD_VAR 0 6
17316: PUSH
17317: LD_INT 0
17319: GREATER
17320: AND
17321: IFFALSE 17354
// for i in damageUnits do
17323: LD_ADDR_VAR 0 8
17327: PUSH
17328: LD_VAR 0 10
17332: PUSH
17333: FOR_IN
17334: IFFALSE 17352
// ComMoveToArea ( i , healArea ) ;
17336: LD_VAR 0 8
17340: PPUSH
17341: LD_VAR 0 2
17345: PPUSH
17346: CALL_OW 113
17350: GO 17333
17352: POP
17353: POP
// if unitsToHeal > 0 and sci_list > 0 then
17354: LD_VAR 0 11
17358: PUSH
17359: LD_INT 0
17361: GREATER
17362: PUSH
17363: LD_VAR 0 6
17367: PUSH
17368: LD_INT 0
17370: GREATER
17371: AND
17372: IFFALSE 17431
// begin for i in sci_list do
17374: LD_ADDR_VAR 0 8
17378: PUSH
17379: LD_VAR 0 6
17383: PUSH
17384: FOR_IN
17385: IFFALSE 17429
// begin ComExitBuilding ( i ) ;
17387: LD_VAR 0 8
17391: PPUSH
17392: CALL_OW 122
// for j in unitsToHeal do
17396: LD_ADDR_VAR 0 9
17400: PUSH
17401: LD_VAR 0 11
17405: PUSH
17406: FOR_IN
17407: IFFALSE 17425
// AddComHeal ( i , j ) ;
17409: LD_VAR 0 8
17413: PPUSH
17414: LD_VAR 0 9
17418: PPUSH
17419: CALL_OW 188
17423: GO 17406
17425: POP
17426: POP
// end ;
17427: GO 17384
17429: POP
17430: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17431: LD_VAR 0 10
17435: PUSH
17436: LD_INT 0
17438: EQUAL
17439: PUSH
17440: LD_VAR 0 11
17444: PUSH
17445: LD_INT 0
17447: EQUAL
17448: AND
17449: PUSH
17450: LD_VAR 0 7
17454: PUSH
17455: LD_INT 0
17457: GREATER
17458: AND
17459: IFFALSE 17563
// for i in sci_listOutside do
17461: LD_ADDR_VAR 0 8
17465: PUSH
17466: LD_VAR 0 7
17470: PUSH
17471: FOR_IN
17472: IFFALSE 17561
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17474: LD_ADDR_VAR 0 12
17478: PUSH
17479: LD_INT 22
17481: PUSH
17482: LD_VAR 0 1
17486: PUSH
17487: EMPTY
17488: LIST
17489: LIST
17490: PUSH
17491: LD_INT 21
17493: PUSH
17494: LD_INT 3
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: PUSH
17501: LD_INT 30
17503: PUSH
17504: LD_INT 8
17506: PUSH
17507: EMPTY
17508: LIST
17509: LIST
17510: PUSH
17511: EMPTY
17512: LIST
17513: LIST
17514: LIST
17515: PPUSH
17516: CALL_OW 69
17520: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17521: LD_ADDR_VAR 0 13
17525: PUSH
17526: LD_INT 1
17528: PPUSH
17529: LD_VAR 0 12
17533: PPUSH
17534: CALL_OW 12
17538: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17539: LD_VAR 0 8
17543: PPUSH
17544: LD_VAR 0 12
17548: PUSH
17549: LD_VAR 0 13
17553: ARRAY
17554: PPUSH
17555: CALL_OW 120
// end ;
17559: GO 17471
17561: POP
17562: POP
// end ;
17563: LD_VAR 0 5
17567: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17568: LD_INT 0
17570: PPUSH
17571: PPUSH
17572: PPUSH
17573: PPUSH
17574: PPUSH
17575: PPUSH
17576: PPUSH
17577: PPUSH
17578: PPUSH
17579: PPUSH
17580: PPUSH
// amChassisTab = [ ] ;
17581: LD_ADDR_VAR 0 19
17585: PUSH
17586: EMPTY
17587: ST_TO_ADDR
// arChassisTab = [ ] ;
17588: LD_ADDR_VAR 0 18
17592: PUSH
17593: EMPTY
17594: ST_TO_ADDR
// ruChassisTab = [ ] ;
17595: LD_ADDR_VAR 0 17
17599: PUSH
17600: EMPTY
17601: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17602: LD_INT 35
17604: PPUSH
17605: CALL_OW 67
// if nation = 1 then
17609: LD_VAR 0 5
17613: PUSH
17614: LD_INT 1
17616: EQUAL
17617: IFFALSE 18122
// begin uc_side = side ;
17619: LD_ADDR_OWVAR 20
17623: PUSH
17624: LD_VAR 0 2
17628: ST_TO_ADDR
// uc_nation = nation ;
17629: LD_ADDR_OWVAR 21
17633: PUSH
17634: LD_VAR 0 5
17638: ST_TO_ADDR
// vc_engine = vehengine ;
17639: LD_ADDR_OWVAR 39
17643: PUSH
17644: LD_VAR 0 6
17648: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17649: LD_ADDR_OWVAR 38
17653: PUSH
17654: LD_VAR 0 7
17658: PUSH
17659: LD_INT 1
17661: PPUSH
17662: LD_VAR 0 7
17666: PPUSH
17667: CALL_OW 12
17671: ARRAY
17672: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17673: LD_ADDR_OWVAR 40
17677: PUSH
17678: LD_VAR 0 10
17682: PUSH
17683: LD_INT 1
17685: PPUSH
17686: LD_VAR 0 10
17690: PPUSH
17691: CALL_OW 12
17695: ARRAY
17696: ST_TO_ADDR
// for j = 1 to AMWeapon do
17697: LD_ADDR_VAR 0 14
17701: PUSH
17702: DOUBLE
17703: LD_INT 1
17705: DEC
17706: ST_TO_ADDR
17707: LD_VAR 0 10
17711: PUSH
17712: FOR_TO
17713: IFFALSE 18014
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17715: LD_VAR 0 10
17719: PUSH
17720: LD_VAR 0 14
17724: ARRAY
17725: PUSH
17726: LD_INT 2
17728: EQUAL
17729: PUSH
17730: LD_VAR 0 10
17734: PUSH
17735: LD_VAR 0 14
17739: ARRAY
17740: PUSH
17741: LD_INT 3
17743: EQUAL
17744: OR
17745: IFFALSE 17798
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17747: LD_ADDR_VAR 0 19
17751: PUSH
17752: LD_INT 1
17754: PUSH
17755: LD_INT 2
17757: PUSH
17758: LD_INT 3
17760: PUSH
17761: LD_INT 4
17763: PUSH
17764: LD_INT 5
17766: PUSH
17767: EMPTY
17768: LIST
17769: LIST
17770: LIST
17771: LIST
17772: LIST
17773: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17774: LD_ADDR_OWVAR 37
17778: PUSH
17779: LD_VAR 0 19
17783: PUSH
17784: LD_INT 1
17786: PPUSH
17787: LD_VAR 0 19
17791: PPUSH
17792: CALL_OW 12
17796: ARRAY
17797: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17798: LD_VAR 0 10
17802: PUSH
17803: LD_VAR 0 14
17807: ARRAY
17808: PUSH
17809: LD_INT 4
17811: EQUAL
17812: PUSH
17813: LD_VAR 0 10
17817: PUSH
17818: LD_VAR 0 14
17822: ARRAY
17823: PUSH
17824: LD_INT 5
17826: EQUAL
17827: OR
17828: PUSH
17829: LD_VAR 0 10
17833: PUSH
17834: LD_VAR 0 14
17838: ARRAY
17839: PUSH
17840: LD_INT 9
17842: EQUAL
17843: OR
17844: PUSH
17845: LD_VAR 0 10
17849: PUSH
17850: LD_VAR 0 14
17854: ARRAY
17855: PUSH
17856: LD_INT 11
17858: EQUAL
17859: OR
17860: PUSH
17861: LD_VAR 0 10
17865: PUSH
17866: LD_VAR 0 14
17870: ARRAY
17871: PUSH
17872: LD_INT 7
17874: EQUAL
17875: OR
17876: IFFALSE 17925
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17878: LD_ADDR_VAR 0 19
17882: PUSH
17883: LD_INT 2
17885: PUSH
17886: LD_INT 3
17888: PUSH
17889: LD_INT 4
17891: PUSH
17892: LD_INT 5
17894: PUSH
17895: EMPTY
17896: LIST
17897: LIST
17898: LIST
17899: LIST
17900: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17901: LD_ADDR_OWVAR 37
17905: PUSH
17906: LD_VAR 0 19
17910: PUSH
17911: LD_INT 1
17913: PPUSH
17914: LD_VAR 0 19
17918: PPUSH
17919: CALL_OW 12
17923: ARRAY
17924: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17925: LD_VAR 0 10
17929: PUSH
17930: LD_VAR 0 14
17934: ARRAY
17935: PUSH
17936: LD_INT 8
17938: EQUAL
17939: PUSH
17940: LD_VAR 0 10
17944: PUSH
17945: LD_VAR 0 14
17949: ARRAY
17950: PUSH
17951: LD_INT 6
17953: EQUAL
17954: OR
17955: PUSH
17956: LD_VAR 0 10
17960: PUSH
17961: LD_VAR 0 14
17965: ARRAY
17966: PUSH
17967: LD_INT 10
17969: EQUAL
17970: OR
17971: IFFALSE 18012
// begin amChassisTab = [ 4 , 5 ] ;
17973: LD_ADDR_VAR 0 19
17977: PUSH
17978: LD_INT 4
17980: PUSH
17981: LD_INT 5
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17988: LD_ADDR_OWVAR 37
17992: PUSH
17993: LD_VAR 0 19
17997: PUSH
17998: LD_INT 1
18000: PPUSH
18001: LD_VAR 0 19
18005: PPUSH
18006: CALL_OW 12
18010: ARRAY
18011: ST_TO_ADDR
// end ; end ;
18012: GO 17712
18014: POP
18015: POP
// veh = CreateVehicle ;
18016: LD_ADDR_VAR 0 16
18020: PUSH
18021: CALL_OW 45
18025: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18026: LD_VAR 0 16
18030: PPUSH
18031: LD_VAR 0 1
18035: PPUSH
18036: LD_INT 0
18038: PPUSH
18039: CALL_OW 49
// if vc_control = 1 then
18043: LD_OWVAR 38
18047: PUSH
18048: LD_INT 1
18050: EQUAL
18051: IFFALSE 18108
// begin hc_gallery =  ;
18053: LD_ADDR_OWVAR 33
18057: PUSH
18058: LD_STRING 
18060: ST_TO_ADDR
// hc_name =  ;
18061: LD_ADDR_OWVAR 26
18065: PUSH
18066: LD_STRING 
18068: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18069: LD_INT 0
18071: PPUSH
18072: LD_INT 3
18074: PPUSH
18075: LD_VAR 0 4
18079: PPUSH
18080: CALL_OW 380
// un = CreateHuman ;
18084: LD_ADDR_VAR 0 15
18088: PUSH
18089: CALL_OW 44
18093: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18094: LD_VAR 0 15
18098: PPUSH
18099: LD_VAR 0 16
18103: PPUSH
18104: CALL_OW 52
// end ; i = i + 1 ;
18108: LD_ADDR_VAR 0 13
18112: PUSH
18113: LD_VAR 0 13
18117: PUSH
18118: LD_INT 1
18120: PLUS
18121: ST_TO_ADDR
// end ; if nation = 2 then
18122: LD_VAR 0 5
18126: PUSH
18127: LD_INT 2
18129: EQUAL
18130: IFFALSE 18552
// begin uc_side = side ;
18132: LD_ADDR_OWVAR 20
18136: PUSH
18137: LD_VAR 0 2
18141: ST_TO_ADDR
// uc_nation = nation ;
18142: LD_ADDR_OWVAR 21
18146: PUSH
18147: LD_VAR 0 5
18151: ST_TO_ADDR
// vc_engine = vehengine ;
18152: LD_ADDR_OWVAR 39
18156: PUSH
18157: LD_VAR 0 6
18161: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18162: LD_ADDR_OWVAR 38
18166: PUSH
18167: LD_VAR 0 7
18171: PUSH
18172: LD_INT 1
18174: PPUSH
18175: LD_VAR 0 7
18179: PPUSH
18180: CALL_OW 12
18184: ARRAY
18185: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
18186: LD_ADDR_OWVAR 40
18190: PUSH
18191: LD_VAR 0 9
18195: PUSH
18196: LD_INT 1
18198: PPUSH
18199: LD_VAR 0 9
18203: PPUSH
18204: CALL_OW 12
18208: ARRAY
18209: ST_TO_ADDR
// for j = 1 to ARWeapons do
18210: LD_ADDR_VAR 0 14
18214: PUSH
18215: DOUBLE
18216: LD_INT 1
18218: DEC
18219: ST_TO_ADDR
18220: LD_VAR 0 9
18224: PUSH
18225: FOR_TO
18226: IFFALSE 18444
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
18228: LD_VAR 0 9
18232: PUSH
18233: LD_VAR 0 14
18237: ARRAY
18238: PUSH
18239: LD_INT 24
18241: EQUAL
18242: PUSH
18243: LD_VAR 0 9
18247: PUSH
18248: LD_VAR 0 14
18252: ARRAY
18253: PUSH
18254: LD_INT 22
18256: EQUAL
18257: OR
18258: PUSH
18259: LD_VAR 0 9
18263: PUSH
18264: LD_VAR 0 14
18268: ARRAY
18269: PUSH
18270: LD_INT 23
18272: EQUAL
18273: OR
18274: PUSH
18275: LD_VAR 0 9
18279: PUSH
18280: LD_VAR 0 14
18284: ARRAY
18285: PUSH
18286: LD_INT 30
18288: EQUAL
18289: OR
18290: IFFALSE 18327
// begin arChassisTab = [ 14 ] ;
18292: LD_ADDR_VAR 0 18
18296: PUSH
18297: LD_INT 14
18299: PUSH
18300: EMPTY
18301: LIST
18302: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18303: LD_ADDR_OWVAR 37
18307: PUSH
18308: LD_VAR 0 18
18312: PUSH
18313: LD_INT 1
18315: PPUSH
18316: LD_VAR 0 18
18320: PPUSH
18321: CALL_OW 12
18325: ARRAY
18326: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
18327: LD_VAR 0 9
18331: PUSH
18332: LD_VAR 0 14
18336: ARRAY
18337: PUSH
18338: LD_INT 29
18340: EQUAL
18341: PUSH
18342: LD_VAR 0 9
18346: PUSH
18347: LD_VAR 0 14
18351: ARRAY
18352: PUSH
18353: LD_INT 28
18355: EQUAL
18356: OR
18357: PUSH
18358: LD_VAR 0 9
18362: PUSH
18363: LD_VAR 0 14
18367: ARRAY
18368: PUSH
18369: LD_INT 27
18371: EQUAL
18372: OR
18373: PUSH
18374: LD_VAR 0 9
18378: PUSH
18379: LD_VAR 0 14
18383: ARRAY
18384: PUSH
18385: LD_INT 26
18387: EQUAL
18388: OR
18389: PUSH
18390: LD_VAR 0 9
18394: PUSH
18395: LD_VAR 0 14
18399: ARRAY
18400: PUSH
18401: LD_INT 25
18403: EQUAL
18404: OR
18405: IFFALSE 18442
// begin arChassisTab = [ 14 ] ;
18407: LD_ADDR_VAR 0 18
18411: PUSH
18412: LD_INT 14
18414: PUSH
18415: EMPTY
18416: LIST
18417: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18418: LD_ADDR_OWVAR 37
18422: PUSH
18423: LD_VAR 0 18
18427: PUSH
18428: LD_INT 1
18430: PPUSH
18431: LD_VAR 0 18
18435: PPUSH
18436: CALL_OW 12
18440: ARRAY
18441: ST_TO_ADDR
// end ; end ;
18442: GO 18225
18444: POP
18445: POP
// veh = CreateVehicle ;
18446: LD_ADDR_VAR 0 16
18450: PUSH
18451: CALL_OW 45
18455: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18456: LD_VAR 0 16
18460: PPUSH
18461: LD_VAR 0 1
18465: PPUSH
18466: LD_INT 0
18468: PPUSH
18469: CALL_OW 49
// if vc_control = 1 then
18473: LD_OWVAR 38
18477: PUSH
18478: LD_INT 1
18480: EQUAL
18481: IFFALSE 18538
// begin hc_gallery =  ;
18483: LD_ADDR_OWVAR 33
18487: PUSH
18488: LD_STRING 
18490: ST_TO_ADDR
// hc_name =  ;
18491: LD_ADDR_OWVAR 26
18495: PUSH
18496: LD_STRING 
18498: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18499: LD_INT 0
18501: PPUSH
18502: LD_INT 3
18504: PPUSH
18505: LD_VAR 0 4
18509: PPUSH
18510: CALL_OW 380
// un = CreateHuman ;
18514: LD_ADDR_VAR 0 15
18518: PUSH
18519: CALL_OW 44
18523: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18524: LD_VAR 0 15
18528: PPUSH
18529: LD_VAR 0 16
18533: PPUSH
18534: CALL_OW 52
// end ; i = i + 1 ;
18538: LD_ADDR_VAR 0 13
18542: PUSH
18543: LD_VAR 0 13
18547: PUSH
18548: LD_INT 1
18550: PLUS
18551: ST_TO_ADDR
// end ; if nation = 3 then
18552: LD_VAR 0 5
18556: PUSH
18557: LD_INT 3
18559: EQUAL
18560: IFFALSE 18966
// begin uc_side = side ;
18562: LD_ADDR_OWVAR 20
18566: PUSH
18567: LD_VAR 0 2
18571: ST_TO_ADDR
// uc_nation = nation ;
18572: LD_ADDR_OWVAR 21
18576: PUSH
18577: LD_VAR 0 5
18581: ST_TO_ADDR
// vc_engine = vehengine ;
18582: LD_ADDR_OWVAR 39
18586: PUSH
18587: LD_VAR 0 6
18591: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18592: LD_ADDR_OWVAR 38
18596: PUSH
18597: LD_VAR 0 7
18601: PUSH
18602: LD_INT 1
18604: PPUSH
18605: LD_VAR 0 7
18609: PPUSH
18610: CALL_OW 12
18614: ARRAY
18615: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18616: LD_ADDR_OWVAR 40
18620: PUSH
18621: LD_VAR 0 8
18625: PUSH
18626: LD_INT 1
18628: PPUSH
18629: LD_VAR 0 8
18633: PPUSH
18634: CALL_OW 12
18638: ARRAY
18639: ST_TO_ADDR
// for j = 1 to RuWeapons do
18640: LD_ADDR_VAR 0 14
18644: PUSH
18645: DOUBLE
18646: LD_INT 1
18648: DEC
18649: ST_TO_ADDR
18650: LD_VAR 0 8
18654: PUSH
18655: FOR_TO
18656: IFFALSE 18858
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18658: LD_VAR 0 8
18662: PUSH
18663: LD_VAR 0 14
18667: ARRAY
18668: PUSH
18669: LD_INT 42
18671: EQUAL
18672: PUSH
18673: LD_VAR 0 8
18677: PUSH
18678: LD_VAR 0 14
18682: ARRAY
18683: PUSH
18684: LD_INT 43
18686: EQUAL
18687: OR
18688: PUSH
18689: LD_VAR 0 8
18693: PUSH
18694: LD_VAR 0 14
18698: ARRAY
18699: PUSH
18700: LD_INT 44
18702: EQUAL
18703: OR
18704: PUSH
18705: LD_VAR 0 8
18709: PUSH
18710: LD_VAR 0 14
18714: ARRAY
18715: PUSH
18716: LD_INT 45
18718: EQUAL
18719: OR
18720: PUSH
18721: LD_VAR 0 8
18725: PUSH
18726: LD_VAR 0 14
18730: ARRAY
18731: PUSH
18732: LD_INT 49
18734: EQUAL
18735: OR
18736: IFFALSE 18785
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18738: LD_ADDR_VAR 0 17
18742: PUSH
18743: LD_INT 21
18745: PUSH
18746: LD_INT 22
18748: PUSH
18749: LD_INT 23
18751: PUSH
18752: LD_INT 24
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: LIST
18759: LIST
18760: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18761: LD_ADDR_OWVAR 37
18765: PUSH
18766: LD_VAR 0 17
18770: PUSH
18771: LD_INT 1
18773: PPUSH
18774: LD_VAR 0 17
18778: PPUSH
18779: CALL_OW 12
18783: ARRAY
18784: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18785: LD_VAR 0 8
18789: PUSH
18790: LD_VAR 0 14
18794: ARRAY
18795: PUSH
18796: LD_INT 46
18798: EQUAL
18799: PUSH
18800: LD_VAR 0 8
18804: PUSH
18805: LD_VAR 0 14
18809: ARRAY
18810: PUSH
18811: LD_INT 47
18813: EQUAL
18814: OR
18815: IFFALSE 18856
// begin ruChassisTab = [ 23 , 24 ] ;
18817: LD_ADDR_VAR 0 17
18821: PUSH
18822: LD_INT 23
18824: PUSH
18825: LD_INT 24
18827: PUSH
18828: EMPTY
18829: LIST
18830: LIST
18831: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18832: LD_ADDR_OWVAR 37
18836: PUSH
18837: LD_VAR 0 17
18841: PUSH
18842: LD_INT 1
18844: PPUSH
18845: LD_VAR 0 17
18849: PPUSH
18850: CALL_OW 12
18854: ARRAY
18855: ST_TO_ADDR
// end ; end ;
18856: GO 18655
18858: POP
18859: POP
// veh = CreateVehicle ;
18860: LD_ADDR_VAR 0 16
18864: PUSH
18865: CALL_OW 45
18869: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18870: LD_VAR 0 16
18874: PPUSH
18875: LD_VAR 0 1
18879: PPUSH
18880: LD_INT 0
18882: PPUSH
18883: CALL_OW 49
// if vc_control = 1 then
18887: LD_OWVAR 38
18891: PUSH
18892: LD_INT 1
18894: EQUAL
18895: IFFALSE 18952
// begin hc_gallery =  ;
18897: LD_ADDR_OWVAR 33
18901: PUSH
18902: LD_STRING 
18904: ST_TO_ADDR
// hc_name =  ;
18905: LD_ADDR_OWVAR 26
18909: PUSH
18910: LD_STRING 
18912: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18913: LD_INT 0
18915: PPUSH
18916: LD_INT 3
18918: PPUSH
18919: LD_VAR 0 4
18923: PPUSH
18924: CALL_OW 380
// un = CreateHuman ;
18928: LD_ADDR_VAR 0 15
18932: PUSH
18933: CALL_OW 44
18937: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18938: LD_VAR 0 15
18942: PPUSH
18943: LD_VAR 0 16
18947: PPUSH
18948: CALL_OW 52
// end ; i = i + 1 ;
18952: LD_ADDR_VAR 0 13
18956: PUSH
18957: LD_VAR 0 13
18961: PUSH
18962: LD_INT 1
18964: PLUS
18965: ST_TO_ADDR
// end ; until i = vehCount ;
18966: LD_VAR 0 13
18970: PUSH
18971: LD_VAR 0 3
18975: EQUAL
18976: IFFALSE 17602
// repeat wait ( 0 0$1 ) ;
18978: LD_INT 35
18980: PPUSH
18981: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18985: LD_ADDR_VAR 0 20
18989: PUSH
18990: LD_INT 22
18992: PUSH
18993: LD_VAR 0 2
18997: PUSH
18998: EMPTY
18999: LIST
19000: LIST
19001: PUSH
19002: LD_INT 21
19004: PUSH
19005: LD_INT 2
19007: PUSH
19008: EMPTY
19009: LIST
19010: LIST
19011: PUSH
19012: LD_INT 24
19014: PUSH
19015: LD_INT 650
19017: PUSH
19018: EMPTY
19019: LIST
19020: LIST
19021: PUSH
19022: EMPTY
19023: LIST
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 69
19031: ST_TO_ADDR
// if vehicleOK_list > 0 then
19032: LD_VAR 0 20
19036: PUSH
19037: LD_INT 0
19039: GREATER
19040: IFFALSE 19231
// begin for i in vehicleOK_list do
19042: LD_ADDR_VAR 0 13
19046: PUSH
19047: LD_VAR 0 20
19051: PUSH
19052: FOR_IN
19053: IFFALSE 19229
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19055: LD_ADDR_VAR 0 21
19059: PUSH
19060: LD_INT 22
19062: PUSH
19063: LD_VAR 0 11
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PPUSH
19072: CALL_OW 69
19076: PPUSH
19077: LD_VAR 0 13
19081: PPUSH
19082: CALL_OW 74
19086: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19087: LD_ADDR_VAR 0 22
19091: PUSH
19092: LD_INT 22
19094: PUSH
19095: LD_VAR 0 11
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 2
19106: PUSH
19107: LD_INT 59
19109: PUSH
19110: EMPTY
19111: LIST
19112: PUSH
19113: LD_INT 21
19115: PUSH
19116: LD_INT 1
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: PUSH
19123: LD_INT 21
19125: PUSH
19126: LD_INT 2
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: LIST
19137: LIST
19138: PUSH
19139: EMPTY
19140: LIST
19141: LIST
19142: PUSH
19143: EMPTY
19144: LIST
19145: PPUSH
19146: CALL_OW 69
19150: PPUSH
19151: LD_VAR 0 13
19155: PPUSH
19156: CALL_OW 74
19160: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19161: LD_VAR 0 13
19165: PPUSH
19166: LD_VAR 0 21
19170: PPUSH
19171: CALL_OW 296
19175: PUSH
19176: LD_INT 8
19178: PLUS
19179: PUSH
19180: LD_VAR 0 13
19184: PPUSH
19185: LD_VAR 0 22
19189: PPUSH
19190: CALL_OW 296
19194: LESS
19195: IFFALSE 19213
// begin ComAttackUnit ( i , target1 ) ;
19197: LD_VAR 0 13
19201: PPUSH
19202: LD_VAR 0 21
19206: PPUSH
19207: CALL_OW 115
// end else
19211: GO 19227
// begin ComAttackUnit ( i , target2 ) ;
19213: LD_VAR 0 13
19217: PPUSH
19218: LD_VAR 0 22
19222: PPUSH
19223: CALL_OW 115
// end ; end ;
19227: GO 19052
19229: POP
19230: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
19231: LD_INT 22
19233: PUSH
19234: LD_VAR 0 2
19238: PUSH
19239: EMPTY
19240: LIST
19241: LIST
19242: PUSH
19243: LD_INT 21
19245: PUSH
19246: LD_INT 2
19248: PUSH
19249: EMPTY
19250: LIST
19251: LIST
19252: PUSH
19253: EMPTY
19254: LIST
19255: LIST
19256: PPUSH
19257: CALL_OW 69
19261: PUSH
19262: LD_INT 0
19264: EQUAL
19265: IFFALSE 18978
// end ;
19267: LD_VAR 0 12
19271: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
19272: LD_INT 0
19274: PPUSH
19275: PPUSH
19276: PPUSH
19277: PPUSH
19278: PPUSH
19279: PPUSH
19280: PPUSH
19281: PPUSH
19282: PPUSH
19283: PPUSH
19284: PPUSH
// for i = 1 to soldierCount do
19285: LD_ADDR_VAR 0 13
19289: PUSH
19290: DOUBLE
19291: LD_INT 1
19293: DEC
19294: ST_TO_ADDR
19295: LD_VAR 0 3
19299: PUSH
19300: FOR_TO
19301: IFFALSE 19383
// begin uc_side = side ;
19303: LD_ADDR_OWVAR 20
19307: PUSH
19308: LD_VAR 0 1
19312: ST_TO_ADDR
// uc_nation = nation ;
19313: LD_ADDR_OWVAR 21
19317: PUSH
19318: LD_VAR 0 2
19322: ST_TO_ADDR
// hc_name =  ;
19323: LD_ADDR_OWVAR 26
19327: PUSH
19328: LD_STRING 
19330: ST_TO_ADDR
// hc_gallery =  ;
19331: LD_ADDR_OWVAR 33
19335: PUSH
19336: LD_STRING 
19338: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
19339: LD_INT 0
19341: PPUSH
19342: LD_INT 1
19344: PPUSH
19345: LD_VAR 0 8
19349: PPUSH
19350: CALL_OW 380
// un = CreateHuman ;
19354: LD_ADDR_VAR 0 15
19358: PUSH
19359: CALL_OW 44
19363: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19364: LD_VAR 0 15
19368: PPUSH
19369: LD_VAR 0 9
19373: PPUSH
19374: LD_INT 0
19376: PPUSH
19377: CALL_OW 49
// end ;
19381: GO 19300
19383: POP
19384: POP
// for i = 1 to sniperCount do
19385: LD_ADDR_VAR 0 13
19389: PUSH
19390: DOUBLE
19391: LD_INT 1
19393: DEC
19394: ST_TO_ADDR
19395: LD_VAR 0 4
19399: PUSH
19400: FOR_TO
19401: IFFALSE 19483
// begin uc_side = side ;
19403: LD_ADDR_OWVAR 20
19407: PUSH
19408: LD_VAR 0 1
19412: ST_TO_ADDR
// uc_nation = nation ;
19413: LD_ADDR_OWVAR 21
19417: PUSH
19418: LD_VAR 0 2
19422: ST_TO_ADDR
// hc_name =  ;
19423: LD_ADDR_OWVAR 26
19427: PUSH
19428: LD_STRING 
19430: ST_TO_ADDR
// hc_gallery =  ;
19431: LD_ADDR_OWVAR 33
19435: PUSH
19436: LD_STRING 
19438: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19439: LD_INT 0
19441: PPUSH
19442: LD_INT 5
19444: PPUSH
19445: LD_VAR 0 8
19449: PPUSH
19450: CALL_OW 380
// un = CreateHuman ;
19454: LD_ADDR_VAR 0 15
19458: PUSH
19459: CALL_OW 44
19463: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19464: LD_VAR 0 15
19468: PPUSH
19469: LD_VAR 0 9
19473: PPUSH
19474: LD_INT 0
19476: PPUSH
19477: CALL_OW 49
// end ;
19481: GO 19400
19483: POP
19484: POP
// for i = 1 to bazookCount do
19485: LD_ADDR_VAR 0 13
19489: PUSH
19490: DOUBLE
19491: LD_INT 1
19493: DEC
19494: ST_TO_ADDR
19495: LD_VAR 0 5
19499: PUSH
19500: FOR_TO
19501: IFFALSE 19583
// begin uc_side = side ;
19503: LD_ADDR_OWVAR 20
19507: PUSH
19508: LD_VAR 0 1
19512: ST_TO_ADDR
// uc_nation = nation ;
19513: LD_ADDR_OWVAR 21
19517: PUSH
19518: LD_VAR 0 2
19522: ST_TO_ADDR
// hc_name =  ;
19523: LD_ADDR_OWVAR 26
19527: PUSH
19528: LD_STRING 
19530: ST_TO_ADDR
// hc_gallery =  ;
19531: LD_ADDR_OWVAR 33
19535: PUSH
19536: LD_STRING 
19538: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19539: LD_INT 0
19541: PPUSH
19542: LD_INT 9
19544: PPUSH
19545: LD_VAR 0 8
19549: PPUSH
19550: CALL_OW 380
// un = CreateHuman ;
19554: LD_ADDR_VAR 0 15
19558: PUSH
19559: CALL_OW 44
19563: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19564: LD_VAR 0 15
19568: PPUSH
19569: LD_VAR 0 9
19573: PPUSH
19574: LD_INT 0
19576: PPUSH
19577: CALL_OW 49
// end ;
19581: GO 19500
19583: POP
19584: POP
// for i = 1 to mortalCount do
19585: LD_ADDR_VAR 0 13
19589: PUSH
19590: DOUBLE
19591: LD_INT 1
19593: DEC
19594: ST_TO_ADDR
19595: LD_VAR 0 6
19599: PUSH
19600: FOR_TO
19601: IFFALSE 19683
// begin uc_side = side ;
19603: LD_ADDR_OWVAR 20
19607: PUSH
19608: LD_VAR 0 1
19612: ST_TO_ADDR
// uc_nation = nation ;
19613: LD_ADDR_OWVAR 21
19617: PUSH
19618: LD_VAR 0 2
19622: ST_TO_ADDR
// hc_name =  ;
19623: LD_ADDR_OWVAR 26
19627: PUSH
19628: LD_STRING 
19630: ST_TO_ADDR
// hc_gallery =  ;
19631: LD_ADDR_OWVAR 33
19635: PUSH
19636: LD_STRING 
19638: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19639: LD_INT 0
19641: PPUSH
19642: LD_INT 8
19644: PPUSH
19645: LD_VAR 0 8
19649: PPUSH
19650: CALL_OW 380
// un = CreateHuman ;
19654: LD_ADDR_VAR 0 15
19658: PUSH
19659: CALL_OW 44
19663: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19664: LD_VAR 0 15
19668: PPUSH
19669: LD_VAR 0 9
19673: PPUSH
19674: LD_INT 0
19676: PPUSH
19677: CALL_OW 49
// end ;
19681: GO 19600
19683: POP
19684: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19685: LD_ADDR_VAR 0 18
19689: PUSH
19690: LD_INT 22
19692: PUSH
19693: LD_VAR 0 1
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 2
19704: PUSH
19705: LD_INT 25
19707: PUSH
19708: LD_INT 1
19710: PUSH
19711: EMPTY
19712: LIST
19713: LIST
19714: PUSH
19715: LD_INT 25
19717: PUSH
19718: LD_INT 5
19720: PUSH
19721: EMPTY
19722: LIST
19723: LIST
19724: PUSH
19725: LD_INT 25
19727: PUSH
19728: LD_INT 8
19730: PUSH
19731: EMPTY
19732: LIST
19733: LIST
19734: PUSH
19735: LD_INT 25
19737: PUSH
19738: LD_INT 9
19740: PUSH
19741: EMPTY
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: LIST
19749: LIST
19750: LIST
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PPUSH
19756: CALL_OW 69
19760: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19761: LD_ADDR_VAR 0 17
19765: PUSH
19766: LD_INT 22
19768: PUSH
19769: LD_VAR 0 1
19773: PUSH
19774: EMPTY
19775: LIST
19776: LIST
19777: PUSH
19778: LD_INT 25
19780: PUSH
19781: LD_INT 4
19783: PUSH
19784: EMPTY
19785: LIST
19786: LIST
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PPUSH
19792: CALL_OW 69
19796: ST_TO_ADDR
// for i in medic_list do
19797: LD_ADDR_VAR 0 13
19801: PUSH
19802: LD_VAR 0 17
19806: PUSH
19807: FOR_IN
19808: IFFALSE 19826
// ComMoveToArea ( i , healArea ) ;
19810: LD_VAR 0 13
19814: PPUSH
19815: LD_VAR 0 10
19819: PPUSH
19820: CALL_OW 113
19824: GO 19807
19826: POP
19827: POP
// repeat wait ( 0 0$1 ) ;
19828: LD_INT 35
19830: PPUSH
19831: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19835: LD_ADDR_VAR 0 16
19839: PUSH
19840: LD_INT 22
19842: PUSH
19843: LD_VAR 0 1
19847: PUSH
19848: EMPTY
19849: LIST
19850: LIST
19851: PUSH
19852: LD_INT 1
19854: PUSH
19855: LD_INT 3
19857: PUSH
19858: LD_INT 24
19860: PUSH
19861: LD_INT 550
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 24
19874: PUSH
19875: LD_INT 250
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: LIST
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PPUSH
19891: CALL_OW 69
19895: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19896: LD_ADDR_VAR 0 18
19900: PUSH
19901: LD_INT 22
19903: PUSH
19904: LD_VAR 0 1
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: LD_INT 2
19915: PUSH
19916: LD_INT 25
19918: PUSH
19919: LD_INT 1
19921: PUSH
19922: EMPTY
19923: LIST
19924: LIST
19925: PUSH
19926: LD_INT 25
19928: PUSH
19929: LD_INT 5
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PUSH
19936: LD_INT 25
19938: PUSH
19939: LD_INT 8
19941: PUSH
19942: EMPTY
19943: LIST
19944: LIST
19945: PUSH
19946: LD_INT 25
19948: PUSH
19949: LD_INT 9
19951: PUSH
19952: EMPTY
19953: LIST
19954: LIST
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: LIST
19962: PUSH
19963: LD_INT 24
19965: PUSH
19966: LD_INT 1000
19968: PUSH
19969: EMPTY
19970: LIST
19971: LIST
19972: PUSH
19973: EMPTY
19974: LIST
19975: LIST
19976: LIST
19977: PPUSH
19978: CALL_OW 69
19982: ST_TO_ADDR
// if medicCount > 0 then
19983: LD_VAR 0 7
19987: PUSH
19988: LD_INT 0
19990: GREATER
19991: IFFALSE 20065
// begin if damageUnit_list > 0 then
19993: LD_VAR 0 16
19997: PUSH
19998: LD_INT 0
20000: GREATER
20001: IFFALSE 20065
// begin for i in damageUnit_list do
20003: LD_ADDR_VAR 0 13
20007: PUSH
20008: LD_VAR 0 16
20012: PUSH
20013: FOR_IN
20014: IFFALSE 20063
// begin ComMoveToArea ( i , healArea ) ;
20016: LD_VAR 0 13
20020: PPUSH
20021: LD_VAR 0 10
20025: PPUSH
20026: CALL_OW 113
// for j in medic_list do
20030: LD_ADDR_VAR 0 14
20034: PUSH
20035: LD_VAR 0 17
20039: PUSH
20040: FOR_IN
20041: IFFALSE 20059
// AddComHeal ( j , i ) ;
20043: LD_VAR 0 14
20047: PPUSH
20048: LD_VAR 0 13
20052: PPUSH
20053: CALL_OW 188
20057: GO 20040
20059: POP
20060: POP
// end ;
20061: GO 20013
20063: POP
20064: POP
// end ; end ; for i in soldiersOK_list do
20065: LD_ADDR_VAR 0 13
20069: PUSH
20070: LD_VAR 0 18
20074: PUSH
20075: FOR_IN
20076: IFFALSE 20252
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20078: LD_ADDR_VAR 0 21
20082: PUSH
20083: LD_INT 22
20085: PUSH
20086: LD_VAR 0 11
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: PPUSH
20095: CALL_OW 69
20099: PPUSH
20100: LD_VAR 0 13
20104: PPUSH
20105: CALL_OW 74
20109: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20110: LD_ADDR_VAR 0 22
20114: PUSH
20115: LD_INT 22
20117: PUSH
20118: LD_VAR 0 11
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PUSH
20127: LD_INT 2
20129: PUSH
20130: LD_INT 59
20132: PUSH
20133: EMPTY
20134: LIST
20135: PUSH
20136: LD_INT 21
20138: PUSH
20139: LD_INT 1
20141: PUSH
20142: EMPTY
20143: LIST
20144: LIST
20145: PUSH
20146: LD_INT 21
20148: PUSH
20149: LD_INT 2
20151: PUSH
20152: EMPTY
20153: LIST
20154: LIST
20155: PUSH
20156: EMPTY
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: PUSH
20162: EMPTY
20163: LIST
20164: LIST
20165: PUSH
20166: EMPTY
20167: LIST
20168: PPUSH
20169: CALL_OW 69
20173: PPUSH
20174: LD_VAR 0 13
20178: PPUSH
20179: CALL_OW 74
20183: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20184: LD_VAR 0 13
20188: PPUSH
20189: LD_VAR 0 21
20193: PPUSH
20194: CALL_OW 296
20198: PUSH
20199: LD_INT 8
20201: PLUS
20202: PUSH
20203: LD_VAR 0 13
20207: PPUSH
20208: LD_VAR 0 22
20212: PPUSH
20213: CALL_OW 296
20217: LESS
20218: IFFALSE 20236
// begin ComAttackUnit ( i , target1 ) ;
20220: LD_VAR 0 13
20224: PPUSH
20225: LD_VAR 0 21
20229: PPUSH
20230: CALL_OW 115
// end else
20234: GO 20250
// begin ComAttackUnit ( i , target2 ) ;
20236: LD_VAR 0 13
20240: PPUSH
20241: LD_VAR 0 22
20245: PPUSH
20246: CALL_OW 115
// end ; end ;
20250: GO 20075
20252: POP
20253: POP
// for i in soldiersOK_list do
20254: LD_ADDR_VAR 0 13
20258: PUSH
20259: LD_VAR 0 18
20263: PUSH
20264: FOR_IN
20265: IFFALSE 20441
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20267: LD_ADDR_VAR 0 21
20271: PUSH
20272: LD_INT 22
20274: PUSH
20275: LD_VAR 0 11
20279: PUSH
20280: EMPTY
20281: LIST
20282: LIST
20283: PPUSH
20284: CALL_OW 69
20288: PPUSH
20289: LD_VAR 0 13
20293: PPUSH
20294: CALL_OW 74
20298: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20299: LD_ADDR_VAR 0 22
20303: PUSH
20304: LD_INT 22
20306: PUSH
20307: LD_VAR 0 11
20311: PUSH
20312: EMPTY
20313: LIST
20314: LIST
20315: PUSH
20316: LD_INT 2
20318: PUSH
20319: LD_INT 59
20321: PUSH
20322: EMPTY
20323: LIST
20324: PUSH
20325: LD_INT 21
20327: PUSH
20328: LD_INT 1
20330: PUSH
20331: EMPTY
20332: LIST
20333: LIST
20334: PUSH
20335: LD_INT 21
20337: PUSH
20338: LD_INT 2
20340: PUSH
20341: EMPTY
20342: LIST
20343: LIST
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: LIST
20349: LIST
20350: PUSH
20351: EMPTY
20352: LIST
20353: LIST
20354: PUSH
20355: EMPTY
20356: LIST
20357: PPUSH
20358: CALL_OW 69
20362: PPUSH
20363: LD_VAR 0 13
20367: PPUSH
20368: CALL_OW 74
20372: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20373: LD_VAR 0 13
20377: PPUSH
20378: LD_VAR 0 21
20382: PPUSH
20383: CALL_OW 296
20387: PUSH
20388: LD_INT 8
20390: PLUS
20391: PUSH
20392: LD_VAR 0 13
20396: PPUSH
20397: LD_VAR 0 22
20401: PPUSH
20402: CALL_OW 296
20406: LESS
20407: IFFALSE 20425
// begin ComAttackUnit ( i , target1 ) ;
20409: LD_VAR 0 13
20413: PPUSH
20414: LD_VAR 0 21
20418: PPUSH
20419: CALL_OW 115
// end else
20423: GO 20439
// begin ComAttackUnit ( i , target2 ) ;
20425: LD_VAR 0 13
20429: PPUSH
20430: LD_VAR 0 22
20434: PPUSH
20435: CALL_OW 115
// end ; end ;
20439: GO 20264
20441: POP
20442: POP
// until soldiersOK_list = [ ] ;
20443: LD_VAR 0 18
20447: PUSH
20448: EMPTY
20449: EQUAL
20450: IFFALSE 19828
// end ;
20452: LD_VAR 0 12
20456: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20457: LD_INT 0
20459: PPUSH
20460: PPUSH
20461: PPUSH
20462: PPUSH
20463: PPUSH
20464: PPUSH
20465: PPUSH
// repeat wait ( 0 0$1 ) ;
20466: LD_INT 35
20468: PPUSH
20469: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20473: LD_ADDR_VAR 0 7
20477: PUSH
20478: LD_INT 22
20480: PUSH
20481: LD_INT 2
20483: PUSH
20484: EMPTY
20485: LIST
20486: LIST
20487: PUSH
20488: LD_INT 25
20490: PUSH
20491: LD_INT 4
20493: PUSH
20494: EMPTY
20495: LIST
20496: LIST
20497: PUSH
20498: LD_INT 3
20500: PUSH
20501: LD_INT 60
20503: PUSH
20504: EMPTY
20505: LIST
20506: PUSH
20507: EMPTY
20508: LIST
20509: LIST
20510: PUSH
20511: EMPTY
20512: LIST
20513: LIST
20514: LIST
20515: PPUSH
20516: CALL_OW 69
20520: ST_TO_ADDR
// if not tmp then
20521: LD_VAR 0 7
20525: NOT
20526: IFFALSE 20530
// continue ;
20528: GO 20466
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20530: LD_ADDR_VAR 0 3
20534: PUSH
20535: LD_INT 5
20537: PPUSH
20538: LD_INT 22
20540: PUSH
20541: LD_INT 0
20543: PUSH
20544: EMPTY
20545: LIST
20546: LIST
20547: PUSH
20548: LD_INT 25
20550: PUSH
20551: LD_INT 12
20553: PUSH
20554: EMPTY
20555: LIST
20556: LIST
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: PPUSH
20562: CALL_OW 70
20566: PUSH
20567: FOR_IN
20568: IFFALSE 20601
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20570: LD_VAR 0 7
20574: PPUSH
20575: LD_VAR 0 3
20579: PPUSH
20580: CALL_OW 250
20584: PPUSH
20585: LD_VAR 0 3
20589: PPUSH
20590: CALL_OW 251
20594: PPUSH
20595: CALL_OW 131
20599: GO 20567
20601: POP
20602: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20603: LD_INT 22
20605: PUSH
20606: LD_INT 2
20608: PUSH
20609: EMPTY
20610: LIST
20611: LIST
20612: PUSH
20613: LD_INT 25
20615: PUSH
20616: LD_INT 4
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: PUSH
20623: EMPTY
20624: LIST
20625: LIST
20626: PPUSH
20627: CALL_OW 69
20631: PUSH
20632: LD_INT 0
20634: EQUAL
20635: PUSH
20636: LD_INT 5
20638: PPUSH
20639: LD_INT 22
20641: PUSH
20642: LD_INT 0
20644: PUSH
20645: EMPTY
20646: LIST
20647: LIST
20648: PUSH
20649: LD_INT 25
20651: PUSH
20652: LD_INT 12
20654: PUSH
20655: EMPTY
20656: LIST
20657: LIST
20658: PUSH
20659: EMPTY
20660: LIST
20661: LIST
20662: PPUSH
20663: CALL_OW 70
20667: PUSH
20668: LD_INT 2
20670: LESS
20671: OR
20672: PUSH
20673: LD_OWVAR 1
20677: PUSH
20678: LD_INT 7000
20680: GREATEREQUAL
20681: OR
20682: IFFALSE 20466
// repeat wait ( 0 0$1 ) ;
20684: LD_INT 35
20686: PPUSH
20687: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20691: LD_ADDR_VAR 0 5
20695: PUSH
20696: LD_INT 22
20698: PUSH
20699: LD_INT 2
20701: PUSH
20702: EMPTY
20703: LIST
20704: LIST
20705: PUSH
20706: LD_INT 30
20708: PUSH
20709: LD_INT 5
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PPUSH
20720: CALL_OW 69
20724: ST_TO_ADDR
// until arm ;
20725: LD_VAR 0 5
20729: IFFALSE 20684
// wait ( 0 0$25 ) ;
20731: LD_INT 875
20733: PPUSH
20734: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20738: LD_ADDR_VAR 0 6
20742: PUSH
20743: LD_INT 22
20745: PUSH
20746: LD_INT 2
20748: PUSH
20749: EMPTY
20750: LIST
20751: LIST
20752: PUSH
20753: LD_INT 2
20755: PUSH
20756: LD_INT 30
20758: PUSH
20759: LD_INT 0
20761: PUSH
20762: EMPTY
20763: LIST
20764: LIST
20765: PUSH
20766: LD_INT 30
20768: PUSH
20769: LD_INT 1
20771: PUSH
20772: EMPTY
20773: LIST
20774: LIST
20775: PUSH
20776: EMPTY
20777: LIST
20778: LIST
20779: LIST
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PPUSH
20785: CALL_OW 69
20789: ST_TO_ADDR
// j := 0 ;
20790: LD_ADDR_VAR 0 3
20794: PUSH
20795: LD_INT 0
20797: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20798: LD_ADDR_VAR 0 2
20802: PUSH
20803: LD_INT 22
20805: PUSH
20806: LD_INT 2
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 25
20815: PUSH
20816: LD_INT 12
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: PPUSH
20827: CALL_OW 69
20831: PUSH
20832: FOR_IN
20833: IFFALSE 20920
// begin ComMoveXY ( i , 63 , 16 ) ;
20835: LD_VAR 0 2
20839: PPUSH
20840: LD_INT 63
20842: PPUSH
20843: LD_INT 16
20845: PPUSH
20846: CALL_OW 111
// j := j + 1 ;
20850: LD_ADDR_VAR 0 3
20854: PUSH
20855: LD_VAR 0 3
20859: PUSH
20860: LD_INT 1
20862: PLUS
20863: ST_TO_ADDR
// if j < 5 then
20864: LD_VAR 0 3
20868: PUSH
20869: LD_INT 5
20871: LESS
20872: IFFALSE 20890
// b := arm [ 1 ] else
20874: LD_ADDR_VAR 0 4
20878: PUSH
20879: LD_VAR 0 5
20883: PUSH
20884: LD_INT 1
20886: ARRAY
20887: ST_TO_ADDR
20888: GO 20904
// b := dep [ 1 ] ;
20890: LD_ADDR_VAR 0 4
20894: PUSH
20895: LD_VAR 0 6
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20904: LD_VAR 0 2
20908: PPUSH
20909: LD_VAR 0 4
20913: PPUSH
20914: CALL_OW 180
// end ;
20918: GO 20832
20920: POP
20921: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20922: LD_ADDR_VAR 0 2
20926: PUSH
20927: LD_INT 22
20929: PUSH
20930: LD_INT 2
20932: PUSH
20933: EMPTY
20934: LIST
20935: LIST
20936: PUSH
20937: LD_INT 25
20939: PUSH
20940: LD_INT 4
20942: PUSH
20943: EMPTY
20944: LIST
20945: LIST
20946: PUSH
20947: EMPTY
20948: LIST
20949: LIST
20950: PPUSH
20951: CALL_OW 69
20955: PUSH
20956: FOR_IN
20957: IFFALSE 21003
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20959: LD_VAR 0 2
20963: PPUSH
20964: LD_INT 22
20966: PUSH
20967: LD_INT 2
20969: PUSH
20970: EMPTY
20971: LIST
20972: LIST
20973: PUSH
20974: LD_INT 30
20976: PUSH
20977: LD_INT 8
20979: PUSH
20980: EMPTY
20981: LIST
20982: LIST
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PPUSH
20988: CALL_OW 69
20992: PUSH
20993: LD_INT 1
20995: ARRAY
20996: PPUSH
20997: CALL_OW 120
21001: GO 20956
21003: POP
21004: POP
// end ;
21005: LD_VAR 0 1
21009: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
21010: LD_INT 0
21012: PPUSH
21013: PPUSH
21014: PPUSH
21015: PPUSH
21016: PPUSH
21017: PPUSH
21018: PPUSH
21019: PPUSH
21020: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
21021: LD_INT 22
21023: PUSH
21024: LD_VAR 0 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 21
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: EMPTY
21044: LIST
21045: LIST
21046: PPUSH
21047: CALL_OW 69
21051: PUSH
21052: LD_VAR 0 3
21056: LESSEQUAL
21057: IFFALSE 21201
// for i = 1 to vehCount do
21059: LD_ADDR_VAR 0 10
21063: PUSH
21064: DOUBLE
21065: LD_INT 1
21067: DEC
21068: ST_TO_ADDR
21069: LD_VAR 0 3
21073: PUSH
21074: FOR_TO
21075: IFFALSE 21199
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
21077: LD_ADDR_VAR 0 12
21081: PUSH
21082: LD_VAR 0 5
21086: PUSH
21087: LD_INT 1
21089: PPUSH
21090: LD_VAR 0 5
21094: PPUSH
21095: CALL_OW 12
21099: ARRAY
21100: ST_TO_ADDR
// if randWeapon = 46 then
21101: LD_VAR 0 12
21105: PUSH
21106: LD_INT 46
21108: EQUAL
21109: IFFALSE 21154
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
21111: LD_VAR 0 2
21115: PPUSH
21116: LD_INT 24
21118: PPUSH
21119: LD_VAR 0 6
21123: PPUSH
21124: LD_VAR 0 7
21128: PUSH
21129: LD_INT 1
21131: PPUSH
21132: LD_VAR 0 7
21136: PPUSH
21137: CALL_OW 12
21141: ARRAY
21142: PPUSH
21143: LD_VAR 0 12
21147: PPUSH
21148: CALL_OW 185
21152: GO 21197
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
21154: LD_VAR 0 2
21158: PPUSH
21159: LD_VAR 0 8
21163: PPUSH
21164: LD_VAR 0 6
21168: PPUSH
21169: LD_VAR 0 7
21173: PUSH
21174: LD_INT 1
21176: PPUSH
21177: LD_VAR 0 7
21181: PPUSH
21182: CALL_OW 12
21186: ARRAY
21187: PPUSH
21188: LD_VAR 0 12
21192: PPUSH
21193: CALL_OW 185
// end ;
21197: GO 21074
21199: POP
21200: POP
// repeat wait ( 0 0$1 ) ;
21201: LD_INT 35
21203: PPUSH
21204: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
21208: LD_INT 22
21210: PUSH
21211: LD_VAR 0 1
21215: PUSH
21216: EMPTY
21217: LIST
21218: LIST
21219: PUSH
21220: LD_INT 21
21222: PUSH
21223: LD_INT 2
21225: PUSH
21226: EMPTY
21227: LIST
21228: LIST
21229: PUSH
21230: LD_INT 24
21232: PUSH
21233: LD_INT 250
21235: PUSH
21236: EMPTY
21237: LIST
21238: LIST
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: LIST
21244: PPUSH
21245: CALL_OW 69
21249: PUSH
21250: LD_VAR 0 3
21254: GREATEREQUAL
21255: IFFALSE 21201
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
21257: LD_INT 22
21259: PUSH
21260: LD_VAR 0 1
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: LD_INT 21
21271: PUSH
21272: LD_INT 2
21274: PUSH
21275: EMPTY
21276: LIST
21277: LIST
21278: PUSH
21279: LD_INT 24
21281: PUSH
21282: LD_INT 250
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: LIST
21293: PPUSH
21294: CALL_OW 69
21298: PUSH
21299: LD_VAR 0 3
21303: GREATEREQUAL
21304: IFFALSE 21647
// begin repeat begin wait ( 0 0$1 ) ;
21306: LD_INT 35
21308: PPUSH
21309: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
21313: LD_INT 22
21315: PUSH
21316: LD_VAR 0 1
21320: PUSH
21321: EMPTY
21322: LIST
21323: LIST
21324: PUSH
21325: LD_INT 21
21327: PUSH
21328: LD_INT 2
21330: PUSH
21331: EMPTY
21332: LIST
21333: LIST
21334: PUSH
21335: LD_INT 24
21337: PUSH
21338: LD_INT 651
21340: PUSH
21341: EMPTY
21342: LIST
21343: LIST
21344: PUSH
21345: EMPTY
21346: LIST
21347: LIST
21348: LIST
21349: PPUSH
21350: CALL_OW 69
21354: PUSH
21355: LD_INT 0
21357: GREATER
21358: IFFALSE 21586
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21360: LD_ADDR_VAR 0 10
21364: PUSH
21365: LD_INT 22
21367: PUSH
21368: LD_VAR 0 1
21372: PUSH
21373: EMPTY
21374: LIST
21375: LIST
21376: PUSH
21377: LD_INT 21
21379: PUSH
21380: LD_INT 2
21382: PUSH
21383: EMPTY
21384: LIST
21385: LIST
21386: PUSH
21387: LD_INT 24
21389: PUSH
21390: LD_INT 651
21392: PUSH
21393: EMPTY
21394: LIST
21395: LIST
21396: PUSH
21397: EMPTY
21398: LIST
21399: LIST
21400: LIST
21401: PPUSH
21402: CALL_OW 69
21406: PUSH
21407: FOR_IN
21408: IFFALSE 21584
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21410: LD_ADDR_VAR 0 16
21414: PUSH
21415: LD_INT 22
21417: PUSH
21418: LD_VAR 0 4
21422: PUSH
21423: EMPTY
21424: LIST
21425: LIST
21426: PPUSH
21427: CALL_OW 69
21431: PPUSH
21432: LD_VAR 0 10
21436: PPUSH
21437: CALL_OW 74
21441: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21442: LD_ADDR_VAR 0 17
21446: PUSH
21447: LD_INT 22
21449: PUSH
21450: LD_VAR 0 4
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: LD_INT 2
21461: PUSH
21462: LD_INT 59
21464: PUSH
21465: EMPTY
21466: LIST
21467: PUSH
21468: LD_INT 21
21470: PUSH
21471: LD_INT 1
21473: PUSH
21474: EMPTY
21475: LIST
21476: LIST
21477: PUSH
21478: LD_INT 21
21480: PUSH
21481: LD_INT 2
21483: PUSH
21484: EMPTY
21485: LIST
21486: LIST
21487: PUSH
21488: EMPTY
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: PUSH
21494: EMPTY
21495: LIST
21496: LIST
21497: PUSH
21498: EMPTY
21499: LIST
21500: PPUSH
21501: CALL_OW 69
21505: PPUSH
21506: LD_VAR 0 10
21510: PPUSH
21511: CALL_OW 74
21515: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21516: LD_VAR 0 10
21520: PPUSH
21521: LD_VAR 0 16
21525: PPUSH
21526: CALL_OW 296
21530: PUSH
21531: LD_INT 8
21533: PLUS
21534: PUSH
21535: LD_VAR 0 10
21539: PPUSH
21540: LD_VAR 0 17
21544: PPUSH
21545: CALL_OW 296
21549: LESS
21550: IFFALSE 21568
// begin ComAttackUnit ( i , target1 ) ;
21552: LD_VAR 0 10
21556: PPUSH
21557: LD_VAR 0 16
21561: PPUSH
21562: CALL_OW 115
// end else
21566: GO 21582
// begin ComAttackUnit ( i , target2 ) ;
21568: LD_VAR 0 10
21572: PPUSH
21573: LD_VAR 0 17
21577: PPUSH
21578: CALL_OW 115
// end ; end ;
21582: GO 21407
21584: POP
21585: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21586: LD_INT 22
21588: PUSH
21589: LD_VAR 0 1
21593: PUSH
21594: EMPTY
21595: LIST
21596: LIST
21597: PUSH
21598: LD_INT 21
21600: PUSH
21601: LD_INT 2
21603: PUSH
21604: EMPTY
21605: LIST
21606: LIST
21607: PUSH
21608: EMPTY
21609: LIST
21610: LIST
21611: PPUSH
21612: CALL_OW 69
21616: PUSH
21617: LD_INT 0
21619: EQUAL
21620: PUSH
21621: LD_INT 22
21623: PUSH
21624: LD_VAR 0 4
21628: PUSH
21629: EMPTY
21630: LIST
21631: LIST
21632: PUSH
21633: EMPTY
21634: LIST
21635: PPUSH
21636: CALL_OW 69
21640: PUSH
21641: LD_INT 0
21643: EQUAL
21644: OR
21645: IFFALSE 21306
// end ; end ;
21647: LD_VAR 0 9
21651: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21652: LD_INT 0
21654: PPUSH
21655: PPUSH
21656: PPUSH
21657: PPUSH
// r := 100 ;
21658: LD_ADDR_VAR 0 5
21662: PUSH
21663: LD_INT 100
21665: ST_TO_ADDR
// x := 0 ;
21666: LD_ADDR_VAR 0 6
21670: PUSH
21671: LD_INT 0
21673: ST_TO_ADDR
// while ( x < n ) do
21674: LD_VAR 0 6
21678: PUSH
21679: LD_VAR 0 2
21683: LESS
21684: IFFALSE 21971
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21686: LD_ADDR_VAR 0 4
21690: PUSH
21691: DOUBLE
21692: LD_INT 1
21694: DEC
21695: ST_TO_ADDR
21696: LD_VAR 0 1
21700: PPUSH
21701: LD_INT 0
21703: PPUSH
21704: CALL_OW 517
21708: PUSH
21709: LD_INT 1
21711: ARRAY
21712: PUSH
21713: FOR_TO
21714: IFFALSE 21967
// begin if r > 50 then
21716: LD_VAR 0 5
21720: PUSH
21721: LD_INT 50
21723: GREATER
21724: IFFALSE 21943
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21726: LD_VAR 0 1
21730: PPUSH
21731: LD_INT 0
21733: PPUSH
21734: CALL_OW 517
21738: PUSH
21739: LD_INT 1
21741: ARRAY
21742: PUSH
21743: LD_VAR 0 4
21747: ARRAY
21748: PPUSH
21749: LD_VAR 0 1
21753: PPUSH
21754: LD_INT 0
21756: PPUSH
21757: CALL_OW 517
21761: PUSH
21762: LD_INT 2
21764: ARRAY
21765: PUSH
21766: LD_VAR 0 4
21770: ARRAY
21771: PPUSH
21772: CALL_OW 458
21776: NOT
21777: IFFALSE 21927
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21779: LD_VAR 0 1
21783: PPUSH
21784: LD_INT 0
21786: PPUSH
21787: CALL_OW 517
21791: PUSH
21792: LD_INT 1
21794: ARRAY
21795: PUSH
21796: LD_VAR 0 4
21800: ARRAY
21801: PPUSH
21802: LD_VAR 0 1
21806: PPUSH
21807: LD_INT 0
21809: PPUSH
21810: CALL_OW 517
21814: PUSH
21815: LD_INT 2
21817: ARRAY
21818: PUSH
21819: LD_VAR 0 4
21823: ARRAY
21824: PPUSH
21825: LD_INT 5
21827: PPUSH
21828: LD_INT 0
21830: PPUSH
21831: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21835: LD_ADDR_EXP 52
21839: PUSH
21840: LD_EXP 52
21844: PPUSH
21845: LD_INT 1
21847: PPUSH
21848: LD_VAR 0 1
21852: PPUSH
21853: LD_INT 0
21855: PPUSH
21856: CALL_OW 517
21860: PUSH
21861: LD_INT 1
21863: ARRAY
21864: PUSH
21865: LD_VAR 0 4
21869: ARRAY
21870: PUSH
21871: LD_VAR 0 1
21875: PPUSH
21876: LD_INT 0
21878: PPUSH
21879: CALL_OW 517
21883: PUSH
21884: LD_INT 2
21886: ARRAY
21887: PUSH
21888: LD_VAR 0 4
21892: ARRAY
21893: PUSH
21894: EMPTY
21895: LIST
21896: LIST
21897: PPUSH
21898: CALL_OW 2
21902: ST_TO_ADDR
// r := 0 ;
21903: LD_ADDR_VAR 0 5
21907: PUSH
21908: LD_INT 0
21910: ST_TO_ADDR
// x := x + 1 ;
21911: LD_ADDR_VAR 0 6
21915: PUSH
21916: LD_VAR 0 6
21920: PUSH
21921: LD_INT 1
21923: PLUS
21924: ST_TO_ADDR
// end else
21925: GO 21941
// r := r + 35 ;
21927: LD_ADDR_VAR 0 5
21931: PUSH
21932: LD_VAR 0 5
21936: PUSH
21937: LD_INT 35
21939: PLUS
21940: ST_TO_ADDR
// end else
21941: GO 21965
// r := r + rand ( 10 , 25 ) ;
21943: LD_ADDR_VAR 0 5
21947: PUSH
21948: LD_VAR 0 5
21952: PUSH
21953: LD_INT 10
21955: PPUSH
21956: LD_INT 25
21958: PPUSH
21959: CALL_OW 12
21963: PLUS
21964: ST_TO_ADDR
// end ;
21965: GO 21713
21967: POP
21968: POP
21969: GO 21674
// end ; end_of_file
21971: LD_VAR 0 3
21975: RET
// every 0 0$1 trigger russianAI = 1 do
21976: LD_EXP 41
21980: PUSH
21981: LD_INT 1
21983: EQUAL
21984: IFFALSE 22203
21986: GO 21988
21988: DISABLE
// begin enable ;
21989: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21990: LD_INT 3
21992: PPUSH
21993: LD_EXP 32
21997: PPUSH
21998: CALL 16454 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
22002: LD_INT 3
22004: PPUSH
22005: LD_EXP 44
22009: PPUSH
22010: CALL 16814 0 2
// if ruPossition = 1 then
22014: LD_EXP 43
22018: PUSH
22019: LD_INT 1
22021: EQUAL
22022: IFFALSE 22077
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22024: LD_INT 3
22026: PPUSH
22027: LD_INT 13
22029: PPUSH
22030: LD_INT 10
22032: PPUSH
22033: LD_INT 22
22035: PUSH
22036: LD_INT 3
22038: PUSH
22039: EMPTY
22040: LIST
22041: LIST
22042: PUSH
22043: LD_INT 21
22045: PUSH
22046: LD_INT 3
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: PUSH
22053: LD_INT 30
22055: PUSH
22056: LD_INT 8
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: EMPTY
22064: LIST
22065: LIST
22066: LIST
22067: PPUSH
22068: CALL_OW 69
22072: PPUSH
22073: CALL 17020 0 4
// if ruPossition = 2 then
22077: LD_EXP 43
22081: PUSH
22082: LD_INT 2
22084: EQUAL
22085: IFFALSE 22140
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22087: LD_INT 3
22089: PPUSH
22090: LD_INT 14
22092: PPUSH
22093: LD_INT 11
22095: PPUSH
22096: LD_INT 22
22098: PUSH
22099: LD_INT 3
22101: PUSH
22102: EMPTY
22103: LIST
22104: LIST
22105: PUSH
22106: LD_INT 21
22108: PUSH
22109: LD_INT 3
22111: PUSH
22112: EMPTY
22113: LIST
22114: LIST
22115: PUSH
22116: LD_INT 30
22118: PUSH
22119: LD_INT 8
22121: PUSH
22122: EMPTY
22123: LIST
22124: LIST
22125: PUSH
22126: EMPTY
22127: LIST
22128: LIST
22129: LIST
22130: PPUSH
22131: CALL_OW 69
22135: PPUSH
22136: CALL 17020 0 4
// if ruPossition = 3 then
22140: LD_EXP 43
22144: PUSH
22145: LD_INT 3
22147: EQUAL
22148: IFFALSE 22203
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22150: LD_INT 3
22152: PPUSH
22153: LD_INT 15
22155: PPUSH
22156: LD_INT 12
22158: PPUSH
22159: LD_INT 22
22161: PUSH
22162: LD_INT 3
22164: PUSH
22165: EMPTY
22166: LIST
22167: LIST
22168: PUSH
22169: LD_INT 21
22171: PUSH
22172: LD_INT 3
22174: PUSH
22175: EMPTY
22176: LIST
22177: LIST
22178: PUSH
22179: LD_INT 30
22181: PUSH
22182: LD_INT 8
22184: PUSH
22185: EMPTY
22186: LIST
22187: LIST
22188: PUSH
22189: EMPTY
22190: LIST
22191: LIST
22192: LIST
22193: PPUSH
22194: CALL_OW 69
22198: PPUSH
22199: CALL 17020 0 4
// end ;
22203: END
// every 0 0$1 do
22204: GO 22206
22206: DISABLE
// begin enable ;
22207: ENABLE
// if ruPossition = 1 then
22208: LD_EXP 43
22212: PUSH
22213: LD_INT 1
22215: EQUAL
22216: IFFALSE 22228
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
22218: LD_INT 3
22220: PPUSH
22221: LD_INT 10
22223: PPUSH
22224: CALL 16091 0 2
// if ruPossition = 2 then
22228: LD_EXP 43
22232: PUSH
22233: LD_INT 2
22235: EQUAL
22236: IFFALSE 22248
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
22238: LD_INT 3
22240: PPUSH
22241: LD_INT 11
22243: PPUSH
22244: CALL 16091 0 2
// if ruPossition = 3 then
22248: LD_EXP 43
22252: PUSH
22253: LD_INT 3
22255: EQUAL
22256: IFFALSE 22268
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
22258: LD_INT 3
22260: PPUSH
22261: LD_INT 12
22263: PPUSH
22264: CALL 16091 0 2
// IntBazooka ( 3 , 1 ) ;
22268: LD_INT 3
22270: PPUSH
22271: LD_INT 1
22273: PPUSH
22274: CALL 14890 0 2
// IntBazooka ( 6 , 1 ) ;
22278: LD_INT 6
22280: PPUSH
22281: LD_INT 1
22283: PPUSH
22284: CALL 14890 0 2
// end ;
22288: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22289: LD_EXP 41
22293: PUSH
22294: LD_INT 1
22296: EQUAL
22297: PUSH
22298: LD_EXP 37
22302: PPUSH
22303: CALL_OW 302
22307: AND
22308: PUSH
22309: LD_EXP 37
22313: PPUSH
22314: CALL_OW 255
22318: PUSH
22319: LD_INT 3
22321: EQUAL
22322: AND
22323: PUSH
22324: LD_INT 22
22326: PUSH
22327: LD_INT 3
22329: PUSH
22330: EMPTY
22331: LIST
22332: LIST
22333: PUSH
22334: LD_INT 21
22336: PUSH
22337: LD_INT 2
22339: PUSH
22340: EMPTY
22341: LIST
22342: LIST
22343: PUSH
22344: LD_INT 33
22346: PUSH
22347: LD_INT 3
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: EMPTY
22355: LIST
22356: LIST
22357: LIST
22358: PPUSH
22359: CALL_OW 69
22363: PUSH
22364: LD_INT 0
22366: EQUAL
22367: AND
22368: IFFALSE 22576
22370: GO 22372
22372: DISABLE
// begin enable ;
22373: ENABLE
// if Difficulty = 1 then
22374: LD_OWVAR 67
22378: PUSH
22379: LD_INT 1
22381: EQUAL
22382: IFFALSE 22444
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22384: LD_INT 3
22386: PPUSH
22387: LD_EXP 37
22391: PPUSH
22392: LD_INT 5
22394: PPUSH
22395: LD_INT 8
22397: PPUSH
22398: CALL_OW 12
22402: PPUSH
22403: LD_INT 1
22405: PPUSH
22406: LD_INT 43
22408: PUSH
22409: LD_INT 44
22411: PUSH
22412: LD_INT 45
22414: PUSH
22415: LD_INT 46
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: LIST
22422: LIST
22423: PPUSH
22424: LD_INT 1
22426: PPUSH
22427: LD_INT 3
22429: PUSH
22430: LD_INT 3
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PPUSH
22437: LD_INT 22
22439: PPUSH
22440: CALL 21010 0 8
// if Difficulty = 2 then
22444: LD_OWVAR 67
22448: PUSH
22449: LD_INT 2
22451: EQUAL
22452: IFFALSE 22510
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22454: LD_INT 3
22456: PPUSH
22457: LD_EXP 37
22461: PPUSH
22462: LD_INT 6
22464: PPUSH
22465: LD_INT 8
22467: PPUSH
22468: CALL_OW 12
22472: PPUSH
22473: LD_INT 1
22475: PPUSH
22476: LD_INT 44
22478: PUSH
22479: LD_INT 45
22481: PUSH
22482: LD_INT 46
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: LIST
22489: PPUSH
22490: LD_INT 1
22492: PPUSH
22493: LD_INT 3
22495: PUSH
22496: LD_INT 3
22498: PUSH
22499: EMPTY
22500: LIST
22501: LIST
22502: PPUSH
22503: LD_INT 22
22505: PPUSH
22506: CALL 21010 0 8
// if Difficulty >= 3 then
22510: LD_OWVAR 67
22514: PUSH
22515: LD_INT 3
22517: GREATEREQUAL
22518: IFFALSE 22576
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22520: LD_INT 3
22522: PPUSH
22523: LD_EXP 37
22527: PPUSH
22528: LD_INT 7
22530: PPUSH
22531: LD_INT 8
22533: PPUSH
22534: CALL_OW 12
22538: PPUSH
22539: LD_INT 1
22541: PPUSH
22542: LD_INT 44
22544: PUSH
22545: LD_INT 45
22547: PUSH
22548: LD_INT 46
22550: PUSH
22551: EMPTY
22552: LIST
22553: LIST
22554: LIST
22555: PPUSH
22556: LD_INT 1
22558: PPUSH
22559: LD_INT 3
22561: PUSH
22562: LD_INT 3
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PPUSH
22569: LD_INT 22
22571: PPUSH
22572: CALL 21010 0 8
// end ;
22576: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22577: LD_EXP 52
22581: PUSH
22582: LD_EXP 51
22586: AND
22587: IFFALSE 22708
22589: GO 22591
22591: DISABLE
22592: LD_INT 0
22594: PPUSH
// begin enable ;
22595: ENABLE
// for i in arabianMines do
22596: LD_ADDR_VAR 0 1
22600: PUSH
22601: LD_EXP 52
22605: PUSH
22606: FOR_IN
22607: IFFALSE 22706
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22609: LD_INT 22
22611: PUSH
22612: LD_INT 1
22614: PUSH
22615: EMPTY
22616: LIST
22617: LIST
22618: PUSH
22619: LD_INT 92
22621: PUSH
22622: LD_VAR 0 1
22626: PUSH
22627: LD_INT 1
22629: ARRAY
22630: PUSH
22631: LD_VAR 0 1
22635: PUSH
22636: LD_INT 2
22638: ARRAY
22639: PUSH
22640: LD_INT 3
22642: PUSH
22643: EMPTY
22644: LIST
22645: LIST
22646: LIST
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: PPUSH
22653: CALL_OW 69
22657: IFFALSE 22704
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22659: LD_VAR 0 1
22663: PUSH
22664: LD_INT 1
22666: ARRAY
22667: PPUSH
22668: LD_VAR 0 1
22672: PUSH
22673: LD_INT 2
22675: ARRAY
22676: PPUSH
22677: LD_INT 5
22679: PPUSH
22680: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22684: LD_ADDR_EXP 52
22688: PUSH
22689: LD_EXP 52
22693: PPUSH
22694: LD_VAR 0 1
22698: PPUSH
22699: CALL_OW 3
22703: ST_TO_ADDR
// end ; end ;
22704: GO 22606
22706: POP
22707: POP
// end ; end_of_file
22708: PPOPN 1
22710: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22711: LD_VAR 0 1
22715: PPUSH
22716: CALL_OW 255
22720: PUSH
22721: LD_INT 4
22723: EQUAL
22724: IFFALSE 22738
// SetBName ( building , epsilon ) ;
22726: LD_VAR 0 1
22730: PPUSH
22731: LD_STRING epsilon
22733: PPUSH
22734: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22738: LD_VAR 0 1
22742: PPUSH
22743: CALL_OW 255
22747: PUSH
22748: LD_INT 1
22750: EQUAL
22751: PUSH
22752: LD_VAR 0 1
22756: PPUSH
22757: CALL_OW 266
22761: PUSH
22762: LD_INT 0
22764: EQUAL
22765: AND
22766: IFFALSE 22780
// SetBName ( building , epsilon ) ;
22768: LD_VAR 0 1
22772: PPUSH
22773: LD_STRING epsilon
22775: PPUSH
22776: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22780: LD_VAR 0 1
22784: PPUSH
22785: CALL_OW 255
22789: PUSH
22790: LD_INT 3
22792: EQUAL
22793: PUSH
22794: LD_VAR 0 1
22798: PPUSH
22799: CALL_OW 266
22803: PUSH
22804: LD_INT 0
22806: EQUAL
22807: AND
22808: IFFALSE 22822
// SetBName ( building , chuikov ) ;
22810: LD_VAR 0 1
22814: PPUSH
22815: LD_STRING chuikov
22817: PPUSH
22818: CALL_OW 500
// if GetSide ( building ) = 2 then
22822: LD_VAR 0 1
22826: PPUSH
22827: CALL_OW 255
22831: PUSH
22832: LD_INT 2
22834: EQUAL
22835: IFFALSE 22891
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22837: LD_VAR 0 1
22841: PPUSH
22842: CALL_OW 266
22846: PUSH
22847: LD_INT 6
22849: EQUAL
22850: PUSH
22851: LD_VAR 0 1
22855: PPUSH
22856: CALL_OW 266
22860: PUSH
22861: LD_INT 9
22863: EQUAL
22864: OR
22865: IFFALSE 22891
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22867: LD_VAR 0 1
22871: PPUSH
22872: LD_INT 10
22874: PPUSH
22875: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22879: LD_VAR 0 1
22883: PPUSH
22884: LD_INT 11
22886: PPUSH
22887: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22891: LD_VAR 0 1
22895: PPUSH
22896: CALL_OW 255
22900: PUSH
22901: LD_INT 3
22903: EQUAL
22904: IFFALSE 22938
// begin ruDepotConstructed := true ;
22906: LD_ADDR_EXP 59
22910: PUSH
22911: LD_INT 1
22913: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22914: LD_VAR 0 1
22918: PPUSH
22919: CALL_OW 266
22923: PUSH
22924: LD_INT 2
22926: EQUAL
22927: IFFALSE 22938
// AddComUpgrade ( building ) ;
22929: LD_VAR 0 1
22933: PPUSH
22934: CALL_OW 206
// end ; end ;
22938: PPOPN 2
22940: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22941: LD_INT 0
22943: PPUSH
22944: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22945: LD_VAR 0 1
22949: PUSH
22950: LD_INT 22
22952: PUSH
22953: LD_INT 3
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 23
22962: PUSH
22963: LD_INT 3
22965: PUSH
22966: EMPTY
22967: LIST
22968: LIST
22969: PUSH
22970: LD_INT 21
22972: PUSH
22973: LD_INT 2
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PUSH
22980: EMPTY
22981: LIST
22982: LIST
22983: LIST
22984: PPUSH
22985: CALL_OW 69
22989: IN
22990: PUSH
22991: LD_EXP 63
22995: NOT
22996: AND
22997: IFFALSE 23028
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22999: LD_ADDR_EXP 63
23003: PUSH
23004: LD_VAR 0 1
23008: PPUSH
23009: CALL_OW 250
23013: PUSH
23014: LD_VAR 0 1
23018: PPUSH
23019: CALL_OW 251
23023: PUSH
23024: EMPTY
23025: LIST
23026: LIST
23027: ST_TO_ADDR
// end ;
23028: PPOPN 3
23030: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
23031: LD_VAR 0 2
23035: PPUSH
23036: CALL_OW 255
23040: PUSH
23041: LD_INT 3
23043: EQUAL
23044: PUSH
23045: LD_EXP 37
23049: PPUSH
23050: CALL_OW 255
23054: PUSH
23055: LD_INT 3
23057: EQUAL
23058: AND
23059: PUSH
23060: LD_EXP 37
23064: PPUSH
23065: CALL_OW 302
23069: AND
23070: IFFALSE 23086
// ComEnterUnit ( human , ruFab ) ;
23072: LD_VAR 0 2
23076: PPUSH
23077: LD_EXP 37
23081: PPUSH
23082: CALL_OW 120
// end ;
23086: PPOPN 2
23088: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
23089: LD_INT 0
23091: PPUSH
23092: PPUSH
23093: PPUSH
23094: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23095: LD_VAR 0 1
23099: PPUSH
23100: CALL_OW 255
23104: PUSH
23105: LD_INT 1
23107: EQUAL
23108: PUSH
23109: LD_EXP 67
23113: PUSH
23114: LD_INT 0
23116: EQUAL
23117: AND
23118: IFFALSE 23320
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
23120: LD_VAR 0 1
23124: PPUSH
23125: CALL_OW 266
23129: PUSH
23130: LD_INT 26
23132: EQUAL
23133: PUSH
23134: LD_VAR 0 1
23138: PPUSH
23139: CALL_OW 266
23143: PUSH
23144: LD_INT 27
23146: EQUAL
23147: OR
23148: PUSH
23149: LD_VAR 0 1
23153: PPUSH
23154: CALL_OW 266
23158: PUSH
23159: LD_INT 28
23161: EQUAL
23162: OR
23163: IFFALSE 23320
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
23165: LD_INT 22
23167: PUSH
23168: LD_INT 1
23170: PUSH
23171: EMPTY
23172: LIST
23173: LIST
23174: PUSH
23175: LD_INT 2
23177: PUSH
23178: LD_INT 30
23180: PUSH
23181: LD_INT 7
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 30
23190: PUSH
23191: LD_INT 8
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: EMPTY
23199: LIST
23200: LIST
23201: LIST
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: PPUSH
23207: CALL_OW 69
23211: PUSH
23212: LD_INT 0
23214: GREATER
23215: IFFALSE 23320
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23217: LD_ADDR_VAR 0 2
23221: PUSH
23222: LD_INT 22
23224: PUSH
23225: LD_INT 1
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: PUSH
23232: LD_INT 2
23234: PUSH
23235: LD_INT 30
23237: PUSH
23238: LD_INT 7
23240: PUSH
23241: EMPTY
23242: LIST
23243: LIST
23244: PUSH
23245: LD_INT 30
23247: PUSH
23248: LD_INT 8
23250: PUSH
23251: EMPTY
23252: LIST
23253: LIST
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: LIST
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: PPUSH
23264: CALL_OW 69
23268: PUSH
23269: FOR_IN
23270: IFFALSE 23318
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23272: LD_VAR 0 2
23276: PPUSH
23277: LD_INT 1
23279: PPUSH
23280: CALL_OW 268
23284: PUSH
23285: LD_INT 11
23287: EQUAL
23288: PUSH
23289: LD_VAR 0 2
23293: PPUSH
23294: LD_INT 2
23296: PPUSH
23297: CALL_OW 268
23301: PUSH
23302: LD_INT 11
23304: EQUAL
23305: OR
23306: IFFALSE 23316
// eventVar1 = 1 ;
23308: LD_ADDR_EXP 67
23312: PUSH
23313: LD_INT 1
23315: ST_TO_ADDR
23316: GO 23269
23318: POP
23319: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
23320: LD_VAR 0 1
23324: PPUSH
23325: CALL_OW 255
23329: PUSH
23330: LD_INT 3
23332: EQUAL
23333: IFFALSE 23813
// begin if GetBType ( building ) = b_depot then
23335: LD_VAR 0 1
23339: PPUSH
23340: CALL_OW 266
23344: PUSH
23345: LD_INT 0
23347: EQUAL
23348: IFFALSE 23420
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23350: LD_VAR 0 1
23354: PPUSH
23355: CALL_OW 274
23359: PPUSH
23360: LD_INT 1
23362: PPUSH
23363: LD_INT 5000
23365: PPUSH
23366: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23370: LD_VAR 0 1
23374: PPUSH
23375: CALL_OW 274
23379: PPUSH
23380: LD_INT 2
23382: PPUSH
23383: LD_INT 300
23385: PPUSH
23386: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23390: LD_VAR 0 1
23394: PPUSH
23395: CALL_OW 274
23399: PPUSH
23400: LD_INT 3
23402: PPUSH
23403: LD_INT 100
23405: PPUSH
23406: CALL_OW 277
// ruDepot = building ;
23410: LD_ADDR_EXP 32
23414: PUSH
23415: LD_VAR 0 1
23419: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 266
23429: PUSH
23430: LD_INT 0
23432: EQUAL
23433: PUSH
23434: LD_VAR 0 1
23438: PPUSH
23439: CALL_OW 266
23443: PUSH
23444: LD_INT 2
23446: EQUAL
23447: OR
23448: PUSH
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL_OW 266
23458: PUSH
23459: LD_INT 4
23461: EQUAL
23462: OR
23463: IFFALSE 23474
// ComUpgrade ( building ) ;
23465: LD_VAR 0 1
23469: PPUSH
23470: CALL_OW 146
// if GetBType ( building ) = b_lab then
23474: LD_VAR 0 1
23478: PPUSH
23479: CALL_OW 266
23483: PUSH
23484: LD_INT 6
23486: EQUAL
23487: IFFALSE 23690
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23489: LD_INT 22
23491: PUSH
23492: LD_INT 3
23494: PUSH
23495: EMPTY
23496: LIST
23497: LIST
23498: PUSH
23499: LD_INT 30
23501: PUSH
23502: LD_INT 8
23504: PUSH
23505: EMPTY
23506: LIST
23507: LIST
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PPUSH
23513: CALL_OW 69
23517: PUSH
23518: LD_INT 0
23520: EQUAL
23521: IFFALSE 23559
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23523: LD_VAR 0 1
23527: PPUSH
23528: LD_INT 10
23530: PPUSH
23531: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23535: LD_VAR 0 1
23539: PPUSH
23540: LD_INT 12
23542: PPUSH
23543: CALL_OW 207
// ruLab1 = building ;
23547: LD_ADDR_EXP 33
23551: PUSH
23552: LD_VAR 0 1
23556: ST_TO_ADDR
// end else
23557: GO 23593
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23559: LD_VAR 0 1
23563: PPUSH
23564: LD_INT 11
23566: PPUSH
23567: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23571: LD_VAR 0 1
23575: PPUSH
23576: LD_INT 14
23578: PPUSH
23579: CALL_OW 207
// ruLab2 = building ;
23583: LD_ADDR_EXP 34
23587: PUSH
23588: LD_VAR 0 1
23592: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23593: LD_INT 3
23595: PPUSH
23596: LD_VAR 0 1
23600: PPUSH
23601: LD_INT 3
23603: PPUSH
23604: CALL 16006 0 3
// if ruDestroyedBuildings > 0 then
23608: LD_EXP 44
23612: PUSH
23613: LD_INT 0
23615: GREATER
23616: IFFALSE 23690
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23618: LD_ADDR_EXP 44
23622: PUSH
23623: LD_EXP 44
23627: PPUSH
23628: LD_INT 1
23630: PPUSH
23631: CALL_OW 3
23635: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23636: LD_ADDR_EXP 44
23640: PUSH
23641: LD_EXP 44
23645: PPUSH
23646: LD_INT 1
23648: PPUSH
23649: CALL_OW 3
23653: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23654: LD_ADDR_EXP 44
23658: PUSH
23659: LD_EXP 44
23663: PPUSH
23664: LD_INT 1
23666: PPUSH
23667: CALL_OW 3
23671: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23672: LD_ADDR_EXP 44
23676: PUSH
23677: LD_EXP 44
23681: PPUSH
23682: LD_INT 1
23684: PPUSH
23685: CALL_OW 3
23689: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23690: LD_VAR 0 1
23694: PPUSH
23695: CALL_OW 266
23699: PUSH
23700: LD_INT 32
23702: EQUAL
23703: IFFALSE 23740
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23705: LD_VAR 0 1
23709: PPUSH
23710: LD_INT 44
23712: PUSH
23713: LD_INT 45
23715: PUSH
23716: LD_INT 46
23718: PUSH
23719: EMPTY
23720: LIST
23721: LIST
23722: LIST
23723: PUSH
23724: LD_INT 1
23726: PPUSH
23727: LD_INT 3
23729: PPUSH
23730: CALL_OW 12
23734: ARRAY
23735: PPUSH
23736: CALL_OW 208
// if GetBType ( building ) = b_turret then
23740: LD_VAR 0 1
23744: PPUSH
23745: CALL_OW 266
23749: PUSH
23750: LD_INT 33
23752: EQUAL
23753: IFFALSE 23790
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23755: LD_VAR 0 1
23759: PPUSH
23760: LD_INT 44
23762: PUSH
23763: LD_INT 45
23765: PUSH
23766: LD_INT 46
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: LIST
23773: PUSH
23774: LD_INT 1
23776: PPUSH
23777: LD_INT 3
23779: PPUSH
23780: CALL_OW 12
23784: ARRAY
23785: PPUSH
23786: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23790: LD_VAR 0 1
23794: PPUSH
23795: CALL_OW 266
23799: PUSH
23800: LD_INT 24
23802: EQUAL
23803: IFFALSE 23813
// russianAI = 1 ;
23805: LD_ADDR_EXP 41
23809: PUSH
23810: LD_INT 1
23812: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23813: LD_VAR 0 1
23817: PPUSH
23818: CALL_OW 255
23822: PUSH
23823: LD_INT 2
23825: EQUAL
23826: IFFALSE 24705
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23828: LD_VAR 0 1
23832: PPUSH
23833: CALL_OW 266
23837: PUSH
23838: LD_EXP 70
23842: PUSH
23843: LD_INT 1
23845: ARRAY
23846: PUSH
23847: LD_INT 1
23849: ARRAY
23850: EQUAL
23851: IFFALSE 23978
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23853: LD_ADDR_EXP 70
23857: PUSH
23858: LD_EXP 70
23862: PPUSH
23863: LD_INT 1
23865: PPUSH
23866: CALL_OW 3
23870: ST_TO_ADDR
// if arBuildingsTab then
23871: LD_EXP 70
23875: IFFALSE 23978
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23877: LD_ADDR_VAR 0 3
23881: PUSH
23882: LD_INT 22
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: LD_INT 25
23894: PUSH
23895: LD_INT 2
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PPUSH
23906: CALL_OW 69
23910: ST_TO_ADDR
// if engineers then
23911: LD_VAR 0 3
23915: IFFALSE 23978
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23917: LD_VAR 0 3
23921: PPUSH
23922: LD_EXP 70
23926: PUSH
23927: LD_INT 1
23929: ARRAY
23930: PUSH
23931: LD_INT 1
23933: ARRAY
23934: PPUSH
23935: LD_EXP 70
23939: PUSH
23940: LD_INT 1
23942: ARRAY
23943: PUSH
23944: LD_INT 2
23946: ARRAY
23947: PPUSH
23948: LD_EXP 70
23952: PUSH
23953: LD_INT 1
23955: ARRAY
23956: PUSH
23957: LD_INT 3
23959: ARRAY
23960: PPUSH
23961: LD_EXP 70
23965: PUSH
23966: LD_INT 1
23968: ARRAY
23969: PUSH
23970: LD_INT 4
23972: ARRAY
23973: PPUSH
23974: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23978: LD_VAR 0 1
23982: PPUSH
23983: CALL_OW 266
23987: PUSH
23988: LD_INT 31
23990: EQUAL
23991: IFFALSE 24137
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23993: LD_ADDR_VAR 0 4
23997: PUSH
23998: LD_INT 22
24000: PUSH
24001: LD_INT 2
24003: PUSH
24004: EMPTY
24005: LIST
24006: LIST
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: LD_INT 25
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 25
24023: PUSH
24024: LD_INT 8
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PPUSH
24040: CALL_OW 69
24044: PUSH
24045: LD_EXP 28
24049: DIFF
24050: ST_TO_ADDR
// if not sol then
24051: LD_VAR 0 4
24055: NOT
24056: IFFALSE 24060
// exit ;
24058: GO 24705
// for i in sol do
24060: LD_ADDR_VAR 0 2
24064: PUSH
24065: LD_VAR 0 4
24069: PUSH
24070: FOR_IN
24071: IFFALSE 24135
// if not GetTag ( i ) then
24073: LD_VAR 0 2
24077: PPUSH
24078: CALL_OW 110
24082: NOT
24083: IFFALSE 24133
// begin if IsInUnit ( i ) then
24085: LD_VAR 0 2
24089: PPUSH
24090: CALL_OW 310
24094: IFFALSE 24105
// ComExitBuilding ( i ) ;
24096: LD_VAR 0 2
24100: PPUSH
24101: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
24105: LD_VAR 0 2
24109: PPUSH
24110: LD_VAR 0 1
24114: PPUSH
24115: CALL_OW 180
// SetTag ( i , 11 ) ;
24119: LD_VAR 0 2
24123: PPUSH
24124: LD_INT 11
24126: PPUSH
24127: CALL_OW 109
// break ;
24131: GO 24135
// end ;
24133: GO 24070
24135: POP
24136: POP
// end ; if GetBType ( building ) = b_depot then
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 266
24146: PUSH
24147: LD_INT 0
24149: EQUAL
24150: IFFALSE 24236
// begin arDepot = building ;
24152: LD_ADDR_EXP 45
24156: PUSH
24157: LD_VAR 0 1
24161: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
24162: LD_INT 38
24164: PUSH
24165: LD_INT 47
24167: PUSH
24168: EMPTY
24169: LIST
24170: LIST
24171: PPUSH
24172: LD_INT 71
24174: PPUSH
24175: LD_INT 19
24177: PPUSH
24178: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
24182: LD_VAR 0 1
24186: PPUSH
24187: CALL_OW 274
24191: PPUSH
24192: LD_INT 1
24194: PPUSH
24195: LD_INT 500
24197: PPUSH
24198: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
24202: LD_VAR 0 1
24206: PPUSH
24207: CALL_OW 274
24211: PPUSH
24212: LD_INT 3
24214: PPUSH
24215: LD_INT 30
24217: PPUSH
24218: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
24222: LD_EXP 28
24226: PPUSH
24227: LD_VAR 0 1
24231: PPUSH
24232: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
24236: LD_VAR 0 1
24240: PPUSH
24241: CALL_OW 266
24245: PUSH
24246: LD_INT 6
24248: EQUAL
24249: PUSH
24250: LD_VAR 0 1
24254: PPUSH
24255: CALL_OW 266
24259: PUSH
24260: LD_INT 9
24262: EQUAL
24263: OR
24264: IFFALSE 24315
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
24266: LD_VAR 0 1
24270: PPUSH
24271: LD_INT 10
24273: PPUSH
24274: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
24278: LD_VAR 0 1
24282: PPUSH
24283: LD_INT 11
24285: PPUSH
24286: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
24290: LD_INT 2
24292: PPUSH
24293: LD_VAR 0 1
24297: PPUSH
24298: LD_INT 2
24300: PPUSH
24301: CALL 16006 0 3
// arLab = building ;
24305: LD_ADDR_EXP 46
24309: PUSH
24310: LD_VAR 0 1
24314: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
24315: LD_VAR 0 1
24319: PPUSH
24320: CALL_OW 266
24324: PUSH
24325: LD_INT 2
24327: EQUAL
24328: PUSH
24329: LD_VAR 0 1
24333: PPUSH
24334: CALL_OW 266
24338: PUSH
24339: LD_INT 4
24341: EQUAL
24342: OR
24343: IFFALSE 24414
// begin ComUpgrade ( building ) ;
24345: LD_VAR 0 1
24349: PPUSH
24350: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24354: LD_VAR 0 1
24358: PPUSH
24359: CALL_OW 266
24363: PUSH
24364: LD_INT 4
24366: EQUAL
24367: IFFALSE 24414
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24369: LD_INT 22
24371: PUSH
24372: LD_INT 2
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: PUSH
24379: LD_INT 25
24381: PUSH
24382: LD_INT 1
24384: PUSH
24385: EMPTY
24386: LIST
24387: LIST
24388: PUSH
24389: EMPTY
24390: LIST
24391: LIST
24392: PPUSH
24393: CALL_OW 69
24397: PUSH
24398: LD_EXP 28
24402: DIFF
24403: PPUSH
24404: LD_INT 75
24406: PPUSH
24407: LD_INT 21
24409: PPUSH
24410: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24414: LD_VAR 0 1
24418: PPUSH
24419: CALL_OW 266
24423: PUSH
24424: LD_INT 27
24426: EQUAL
24427: IFFALSE 24705
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24429: LD_INT 22
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 30
24441: PUSH
24442: LD_INT 27
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PPUSH
24453: CALL_OW 69
24457: PUSH
24458: LD_INT 2
24460: EQUAL
24461: IFFALSE 24705
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24463: LD_ADDR_VAR 0 2
24467: PUSH
24468: LD_INT 22
24470: PUSH
24471: LD_INT 2
24473: PUSH
24474: EMPTY
24475: LIST
24476: LIST
24477: PUSH
24478: LD_INT 21
24480: PUSH
24481: LD_INT 1
24483: PUSH
24484: EMPTY
24485: LIST
24486: LIST
24487: PUSH
24488: LD_INT 25
24490: PUSH
24491: LD_INT 2
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: LIST
24502: PPUSH
24503: CALL_OW 69
24507: PUSH
24508: LD_INT 1
24510: ARRAY
24511: ST_TO_ADDR
// if not i then
24512: LD_VAR 0 2
24516: NOT
24517: IFFALSE 24521
// exit ;
24519: GO 24705
// AddComMoveXY ( i , 92 , 34 ) ;
24521: LD_VAR 0 2
24525: PPUSH
24526: LD_INT 92
24528: PPUSH
24529: LD_INT 34
24531: PPUSH
24532: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24536: LD_VAR 0 2
24540: PPUSH
24541: LD_INT 35
24543: PPUSH
24544: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24548: LD_VAR 0 2
24552: PPUSH
24553: LD_INT 101
24555: PPUSH
24556: LD_INT 20
24558: PPUSH
24559: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24563: LD_VAR 0 2
24567: PPUSH
24568: LD_INT 35
24570: PPUSH
24571: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24575: LD_VAR 0 2
24579: PPUSH
24580: LD_INT 115
24582: PPUSH
24583: LD_INT 30
24585: PPUSH
24586: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24590: LD_VAR 0 2
24594: PPUSH
24595: LD_INT 35
24597: PPUSH
24598: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24602: LD_VAR 0 2
24606: PPUSH
24607: LD_INT 82
24609: PPUSH
24610: LD_INT 57
24612: PPUSH
24613: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24617: LD_VAR 0 2
24621: PPUSH
24622: LD_INT 35
24624: PPUSH
24625: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24629: LD_VAR 0 2
24633: PPUSH
24634: LD_INT 36
24636: PPUSH
24637: LD_INT 28
24639: PPUSH
24640: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24644: LD_VAR 0 2
24648: PPUSH
24649: LD_INT 70
24651: PPUSH
24652: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24656: LD_INT 22
24658: PUSH
24659: LD_INT 2
24661: PUSH
24662: EMPTY
24663: LIST
24664: LIST
24665: PUSH
24666: LD_INT 21
24668: PUSH
24669: LD_INT 1
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PUSH
24676: LD_INT 25
24678: PUSH
24679: LD_INT 2
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: EMPTY
24687: LIST
24688: LIST
24689: LIST
24690: PPUSH
24691: CALL_OW 69
24695: PPUSH
24696: LD_EXP 45
24700: PPUSH
24701: CALL_OW 180
// end ; end ; end ;
24705: PPOPN 5
24707: END
// on UpgradeComplete ( building ) do var i ;
24708: LD_INT 0
24710: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24711: LD_VAR 0 1
24715: PPUSH
24716: CALL_OW 255
24720: PUSH
24721: LD_INT 1
24723: EQUAL
24724: PUSH
24725: LD_EXP 67
24729: PUSH
24730: LD_INT 0
24732: EQUAL
24733: AND
24734: IFFALSE 24932
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24736: LD_VAR 0 1
24740: PPUSH
24741: CALL_OW 266
24745: PUSH
24746: LD_INT 7
24748: EQUAL
24749: PUSH
24750: LD_VAR 0 1
24754: PPUSH
24755: CALL_OW 266
24759: PUSH
24760: LD_INT 8
24762: EQUAL
24763: OR
24764: IFFALSE 24932
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24766: LD_INT 22
24768: PUSH
24769: LD_INT 1
24771: PUSH
24772: EMPTY
24773: LIST
24774: LIST
24775: PUSH
24776: LD_INT 2
24778: PUSH
24779: LD_INT 30
24781: PUSH
24782: LD_INT 26
24784: PUSH
24785: EMPTY
24786: LIST
24787: LIST
24788: PUSH
24789: LD_INT 30
24791: PUSH
24792: LD_INT 27
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 30
24801: PUSH
24802: LD_INT 28
24804: PUSH
24805: EMPTY
24806: LIST
24807: LIST
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: LIST
24813: LIST
24814: PUSH
24815: EMPTY
24816: LIST
24817: LIST
24818: PPUSH
24819: CALL_OW 69
24823: PUSH
24824: LD_INT 0
24826: GREATER
24827: IFFALSE 24932
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24829: LD_ADDR_VAR 0 2
24833: PUSH
24834: LD_INT 22
24836: PUSH
24837: LD_INT 1
24839: PUSH
24840: EMPTY
24841: LIST
24842: LIST
24843: PUSH
24844: LD_INT 2
24846: PUSH
24847: LD_INT 30
24849: PUSH
24850: LD_INT 7
24852: PUSH
24853: EMPTY
24854: LIST
24855: LIST
24856: PUSH
24857: LD_INT 30
24859: PUSH
24860: LD_INT 8
24862: PUSH
24863: EMPTY
24864: LIST
24865: LIST
24866: PUSH
24867: EMPTY
24868: LIST
24869: LIST
24870: LIST
24871: PUSH
24872: EMPTY
24873: LIST
24874: LIST
24875: PPUSH
24876: CALL_OW 69
24880: PUSH
24881: FOR_IN
24882: IFFALSE 24930
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24884: LD_VAR 0 2
24888: PPUSH
24889: LD_INT 1
24891: PPUSH
24892: CALL_OW 268
24896: PUSH
24897: LD_INT 11
24899: EQUAL
24900: PUSH
24901: LD_VAR 0 2
24905: PPUSH
24906: LD_INT 2
24908: PPUSH
24909: CALL_OW 268
24913: PUSH
24914: LD_INT 11
24916: EQUAL
24917: OR
24918: IFFALSE 24928
// eventVar1 = 1 ;
24920: LD_ADDR_EXP 67
24924: PUSH
24925: LD_INT 1
24927: ST_TO_ADDR
24928: GO 24881
24930: POP
24931: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24932: LD_VAR 0 1
24936: PPUSH
24937: CALL_OW 255
24941: PUSH
24942: LD_INT 2
24944: EQUAL
24945: IFFALSE 25050
// begin if GetBType ( building ) = b_barracks then
24947: LD_VAR 0 1
24951: PPUSH
24952: CALL_OW 266
24956: PUSH
24957: LD_INT 5
24959: EQUAL
24960: IFFALSE 25050
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24962: LD_ADDR_VAR 0 2
24966: PUSH
24967: LD_INT 22
24969: PUSH
24970: LD_INT 2
24972: PUSH
24973: EMPTY
24974: LIST
24975: LIST
24976: PUSH
24977: LD_INT 25
24979: PUSH
24980: LD_INT 1
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: LD_INT 3
24989: PUSH
24990: LD_INT 54
24992: PUSH
24993: EMPTY
24994: LIST
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: LIST
25004: PPUSH
25005: CALL_OW 69
25009: PUSH
25010: LD_EXP 28
25014: PUSH
25015: EMPTY
25016: LIST
25017: DIFF
25018: PUSH
25019: FOR_IN
25020: IFFALSE 25038
// ComEnterUnit ( i , building ) ;
25022: LD_VAR 0 2
25026: PPUSH
25027: LD_VAR 0 1
25031: PPUSH
25032: CALL_OW 120
25036: GO 25019
25038: POP
25039: POP
// arArm = building ;
25040: LD_ADDR_EXP 47
25044: PUSH
25045: LD_VAR 0 1
25049: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
25050: LD_VAR 0 1
25054: PPUSH
25055: CALL_OW 255
25059: PUSH
25060: LD_INT 3
25062: EQUAL
25063: IFFALSE 25536
// begin if GetBType ( building ) = b_factory then
25065: LD_VAR 0 1
25069: PPUSH
25070: CALL_OW 266
25074: PUSH
25075: LD_INT 3
25077: EQUAL
25078: IFFALSE 25145
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
25080: LD_ADDR_VAR 0 2
25084: PUSH
25085: LD_INT 22
25087: PUSH
25088: LD_INT 3
25090: PUSH
25091: EMPTY
25092: LIST
25093: LIST
25094: PUSH
25095: LD_INT 25
25097: PUSH
25098: LD_INT 3
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PPUSH
25109: CALL_OW 69
25113: PUSH
25114: FOR_IN
25115: IFFALSE 25133
// ComEnterUnit ( i , building ) ;
25117: LD_VAR 0 2
25121: PPUSH
25122: LD_VAR 0 1
25126: PPUSH
25127: CALL_OW 120
25131: GO 25114
25133: POP
25134: POP
// ruFab = building ;
25135: LD_ADDR_EXP 37
25139: PUSH
25140: LD_VAR 0 1
25144: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
25145: LD_INT 22
25147: PUSH
25148: LD_INT 3
25150: PUSH
25151: EMPTY
25152: LIST
25153: LIST
25154: PUSH
25155: LD_INT 21
25157: PUSH
25158: LD_INT 3
25160: PUSH
25161: EMPTY
25162: LIST
25163: LIST
25164: PUSH
25165: LD_INT 30
25167: PUSH
25168: LD_INT 8
25170: PUSH
25171: EMPTY
25172: LIST
25173: LIST
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: LIST
25179: PPUSH
25180: CALL_OW 69
25184: PUSH
25185: LD_INT 2
25187: EQUAL
25188: IFFALSE 25396
// begin for i = 1 to 2 do
25190: LD_ADDR_VAR 0 2
25194: PUSH
25195: DOUBLE
25196: LD_INT 1
25198: DEC
25199: ST_TO_ADDR
25200: LD_INT 2
25202: PUSH
25203: FOR_TO
25204: IFFALSE 25291
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
25206: LD_INT 22
25208: PUSH
25209: LD_INT 3
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 25
25218: PUSH
25219: LD_INT 4
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: PPUSH
25230: CALL_OW 69
25234: PUSH
25235: LD_VAR 0 2
25239: ARRAY
25240: PPUSH
25241: LD_INT 22
25243: PUSH
25244: LD_INT 3
25246: PUSH
25247: EMPTY
25248: LIST
25249: LIST
25250: PUSH
25251: LD_INT 21
25253: PUSH
25254: LD_INT 3
25256: PUSH
25257: EMPTY
25258: LIST
25259: LIST
25260: PUSH
25261: LD_INT 30
25263: PUSH
25264: LD_INT 8
25266: PUSH
25267: EMPTY
25268: LIST
25269: LIST
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: LIST
25275: PPUSH
25276: CALL_OW 69
25280: PUSH
25281: LD_INT 1
25283: ARRAY
25284: PPUSH
25285: CALL_OW 120
25289: GO 25203
25291: POP
25292: POP
// for i = 3 to 4 do
25293: LD_ADDR_VAR 0 2
25297: PUSH
25298: DOUBLE
25299: LD_INT 3
25301: DEC
25302: ST_TO_ADDR
25303: LD_INT 4
25305: PUSH
25306: FOR_TO
25307: IFFALSE 25394
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
25309: LD_INT 22
25311: PUSH
25312: LD_INT 3
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 25
25321: PUSH
25322: LD_INT 4
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: PPUSH
25333: CALL_OW 69
25337: PUSH
25338: LD_VAR 0 2
25342: ARRAY
25343: PPUSH
25344: LD_INT 22
25346: PUSH
25347: LD_INT 3
25349: PUSH
25350: EMPTY
25351: LIST
25352: LIST
25353: PUSH
25354: LD_INT 21
25356: PUSH
25357: LD_INT 3
25359: PUSH
25360: EMPTY
25361: LIST
25362: LIST
25363: PUSH
25364: LD_INT 30
25366: PUSH
25367: LD_INT 8
25369: PUSH
25370: EMPTY
25371: LIST
25372: LIST
25373: PUSH
25374: EMPTY
25375: LIST
25376: LIST
25377: LIST
25378: PPUSH
25379: CALL_OW 69
25383: PUSH
25384: LD_INT 2
25386: ARRAY
25387: PPUSH
25388: CALL_OW 120
25392: GO 25306
25394: POP
25395: POP
// end ; if GetBType ( building ) = b_barracks then
25396: LD_VAR 0 1
25400: PPUSH
25401: CALL_OW 266
25405: PUSH
25406: LD_INT 5
25408: EQUAL
25409: IFFALSE 25536
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25411: LD_ADDR_VAR 0 2
25415: PUSH
25416: LD_INT 22
25418: PUSH
25419: LD_INT 3
25421: PUSH
25422: EMPTY
25423: LIST
25424: LIST
25425: PUSH
25426: LD_INT 25
25428: PUSH
25429: LD_INT 1
25431: PUSH
25432: EMPTY
25433: LIST
25434: LIST
25435: PUSH
25436: LD_INT 3
25438: PUSH
25439: LD_INT 54
25441: PUSH
25442: EMPTY
25443: LIST
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: LIST
25453: PPUSH
25454: CALL_OW 69
25458: PUSH
25459: FOR_IN
25460: IFFALSE 25478
// ComEnterUnit ( i , building ) ;
25462: LD_VAR 0 2
25466: PPUSH
25467: LD_VAR 0 1
25471: PPUSH
25472: CALL_OW 120
25476: GO 25459
25478: POP
25479: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25480: LD_INT 22
25482: PUSH
25483: LD_INT 3
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: PUSH
25490: LD_INT 30
25492: PUSH
25493: LD_INT 5
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: EMPTY
25501: LIST
25502: LIST
25503: PPUSH
25504: CALL_OW 69
25508: PUSH
25509: LD_INT 0
25511: EQUAL
25512: IFFALSE 25526
// ruArm1 = building else
25514: LD_ADDR_EXP 35
25518: PUSH
25519: LD_VAR 0 1
25523: ST_TO_ADDR
25524: GO 25536
// ruArm2 = building ;
25526: LD_ADDR_EXP 36
25530: PUSH
25531: LD_VAR 0 1
25535: ST_TO_ADDR
// end ; end ; end ;
25536: PPOPN 2
25538: END
// on EnterBuilding ( building , human ) do var rnd ;
25539: LD_INT 0
25541: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25542: LD_VAR 0 2
25546: PPUSH
25547: CALL_OW 255
25551: PUSH
25552: LD_INT 2
25554: EQUAL
25555: PUSH
25556: LD_VAR 0 2
25560: PPUSH
25561: CALL_OW 257
25565: PUSH
25566: LD_INT 1
25568: EQUAL
25569: AND
25570: PUSH
25571: LD_VAR 0 1
25575: PUSH
25576: LD_EXP 47
25580: EQUAL
25581: AND
25582: IFFALSE 25629
// begin wait ( 0 0$1 ) ;
25584: LD_INT 35
25586: PPUSH
25587: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25591: LD_ADDR_VAR 0 3
25595: PUSH
25596: LD_INT 1
25598: PPUSH
25599: LD_INT 100
25601: PPUSH
25602: CALL_OW 12
25606: ST_TO_ADDR
// if rnd > 50 then
25607: LD_VAR 0 3
25611: PUSH
25612: LD_INT 50
25614: GREATER
25615: IFFALSE 25629
// SetClass ( human , class_mortar ) ;
25617: LD_VAR 0 2
25621: PPUSH
25622: LD_INT 8
25624: PPUSH
25625: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25629: LD_VAR 0 2
25633: PUSH
25634: LD_INT 22
25636: PUSH
25637: LD_INT 2
25639: PUSH
25640: EMPTY
25641: LIST
25642: LIST
25643: PUSH
25644: LD_INT 25
25646: PUSH
25647: LD_INT 12
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PPUSH
25658: CALL_OW 69
25662: IN
25663: IFFALSE 25713
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25665: LD_VAR 0 1
25669: PPUSH
25670: CALL_OW 266
25674: PUSH
25675: LD_INT 0
25677: PUSH
25678: LD_INT 1
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: IN
25685: IFFALSE 25701
// SetClass ( human , class_apeman_engineer ) else
25687: LD_VAR 0 2
25691: PPUSH
25692: LD_INT 16
25694: PPUSH
25695: CALL_OW 336
25699: GO 25713
// SetClass ( human , class_apeman_soldier ) ;
25701: LD_VAR 0 2
25705: PPUSH
25706: LD_INT 15
25708: PPUSH
25709: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25713: LD_VAR 0 2
25717: PPUSH
25718: CALL_OW 255
25722: PUSH
25723: LD_INT 3
25725: EQUAL
25726: PUSH
25727: LD_VAR 0 2
25731: PPUSH
25732: CALL_OW 257
25736: PUSH
25737: LD_INT 1
25739: EQUAL
25740: AND
25741: PUSH
25742: LD_VAR 0 1
25746: PUSH
25747: LD_EXP 35
25751: EQUAL
25752: PUSH
25753: LD_VAR 0 1
25757: PUSH
25758: LD_EXP 36
25762: EQUAL
25763: OR
25764: PUSH
25765: EMPTY
25766: LIST
25767: AND
25768: IFFALSE 25789
// begin wait ( 0 0$1 ) ;
25770: LD_INT 35
25772: PPUSH
25773: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25777: LD_VAR 0 2
25781: PPUSH
25782: LD_INT 9
25784: PPUSH
25785: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25789: LD_VAR 0 2
25793: PPUSH
25794: CALL_OW 255
25798: PUSH
25799: LD_INT 3
25801: EQUAL
25802: PUSH
25803: LD_VAR 0 2
25807: PPUSH
25808: CALL_OW 257
25812: PUSH
25813: LD_INT 9
25815: EQUAL
25816: AND
25817: PUSH
25818: LD_VAR 0 1
25822: PPUSH
25823: CALL_OW 266
25827: PUSH
25828: LD_INT 32
25830: EQUAL
25831: AND
25832: IFFALSE 25853
// begin wait ( 0 0$1 ) ;
25834: LD_INT 35
25836: PPUSH
25837: CALL_OW 67
// SetClass ( human , 1 ) ;
25841: LD_VAR 0 2
25845: PPUSH
25846: LD_INT 1
25848: PPUSH
25849: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25853: LD_VAR 0 2
25857: PPUSH
25858: CALL_OW 255
25862: PUSH
25863: LD_INT 3
25865: EQUAL
25866: PUSH
25867: LD_VAR 0 2
25871: PPUSH
25872: CALL_OW 257
25876: PUSH
25877: LD_INT 3
25879: EQUAL
25880: AND
25881: PUSH
25882: LD_VAR 0 1
25886: PUSH
25887: LD_EXP 37
25891: EQUAL
25892: AND
25893: IFFALSE 25907
// SetLives ( human , 1000 ) ;
25895: LD_VAR 0 2
25899: PPUSH
25900: LD_INT 1000
25902: PPUSH
25903: CALL_OW 234
// end ;
25907: PPOPN 3
25909: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25910: LD_VAR 0 1
25914: PUSH
25915: LD_INT 1
25917: EQUAL
25918: PUSH
25919: LD_VAR 0 2
25923: PUSH
25924: LD_INT 2
25926: EQUAL
25927: AND
25928: PUSH
25929: LD_INT 1
25931: PPUSH
25932: LD_INT 2
25934: PPUSH
25935: CALL_OW 81
25939: PUSH
25940: LD_INT 1
25942: EQUAL
25943: AND
25944: IFFALSE 25965
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25946: LD_EXP 26
25950: PPUSH
25951: LD_STRING D6b-Pow-1
25953: PPUSH
25954: CALL_OW 94
// YouLost ( Powell ) ;
25958: LD_STRING Powell
25960: PPUSH
25961: CALL_OW 104
// end ; end ;
25965: PPOPN 2
25967: END
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25968: LD_INT 23
25970: PPUSH
25971: LD_INT 22
25973: PUSH
25974: LD_INT 1
25976: PUSH
25977: EMPTY
25978: LIST
25979: LIST
25980: PUSH
25981: LD_INT 21
25983: PUSH
25984: LD_INT 3
25986: PUSH
25987: EMPTY
25988: LIST
25989: LIST
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PPUSH
25995: CALL_OW 70
25999: PUSH
26000: LD_INT 23
26002: PPUSH
26003: LD_INT 22
26005: PUSH
26006: LD_INT 1
26008: PUSH
26009: EMPTY
26010: LIST
26011: LIST
26012: PUSH
26013: LD_INT 21
26015: PUSH
26016: LD_INT 2
26018: PUSH
26019: EMPTY
26020: LIST
26021: LIST
26022: PUSH
26023: EMPTY
26024: LIST
26025: LIST
26026: PPUSH
26027: CALL_OW 70
26031: OR
26032: PUSH
26033: LD_INT 1
26035: PPUSH
26036: LD_INT 2
26038: PPUSH
26039: CALL_OW 81
26043: PUSH
26044: LD_INT 1
26046: EQUAL
26047: AND
26048: IFFALSE 26287
26050: GO 26052
26052: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26053: LD_INT 23
26055: PPUSH
26056: LD_INT 22
26058: PUSH
26059: LD_INT 1
26061: PUSH
26062: EMPTY
26063: LIST
26064: LIST
26065: PUSH
26066: LD_INT 21
26068: PUSH
26069: LD_INT 3
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PUSH
26076: EMPTY
26077: LIST
26078: LIST
26079: PPUSH
26080: CALL_OW 70
26084: PUSH
26085: LD_INT 23
26087: PPUSH
26088: LD_INT 22
26090: PUSH
26091: LD_INT 1
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 21
26100: PUSH
26101: LD_INT 2
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: EMPTY
26109: LIST
26110: LIST
26111: PPUSH
26112: CALL_OW 70
26116: OR
26117: PUSH
26118: LD_INT 1
26120: PPUSH
26121: LD_INT 2
26123: PPUSH
26124: CALL_OW 81
26128: PUSH
26129: LD_INT 1
26131: EQUAL
26132: AND
26133: IFFALSE 26142
// Query ( QAttack ) ;
26135: LD_STRING QAttack
26137: PPUSH
26138: CALL_OW 97
// wait ( 0 0$20 ) ;
26142: LD_INT 700
26144: PPUSH
26145: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26149: LD_INT 350
26151: PPUSH
26152: CALL_OW 67
// if arabianTrait = 1 then
26156: LD_EXP 51
26160: PUSH
26161: LD_INT 1
26163: EQUAL
26164: IFFALSE 26168
// exit ;
26166: GO 26287
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26168: LD_INT 23
26170: PPUSH
26171: LD_INT 22
26173: PUSH
26174: LD_INT 1
26176: PUSH
26177: EMPTY
26178: LIST
26179: LIST
26180: PUSH
26181: LD_INT 21
26183: PUSH
26184: LD_INT 3
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PPUSH
26195: CALL_OW 70
26199: PUSH
26200: LD_INT 23
26202: PPUSH
26203: LD_INT 22
26205: PUSH
26206: LD_INT 1
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 21
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: EMPTY
26220: LIST
26221: LIST
26222: PUSH
26223: EMPTY
26224: LIST
26225: LIST
26226: PPUSH
26227: CALL_OW 70
26231: OR
26232: PUSH
26233: LD_INT 1
26235: PPUSH
26236: LD_INT 2
26238: PPUSH
26239: CALL_OW 81
26243: PUSH
26244: LD_INT 1
26246: EQUAL
26247: AND
26248: IFFALSE 26149
// InGameOn ;
26250: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26254: LD_INT 73
26256: PPUSH
26257: LD_INT 18
26259: PPUSH
26260: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26264: LD_EXP 26
26268: PPUSH
26269: LD_STRING D6b-Pow-1
26271: PPUSH
26272: CALL_OW 94
// YouLost ( Powell ) ;
26276: LD_STRING Powell
26278: PPUSH
26279: CALL_OW 104
// InGameOff ;
26283: CALL_OW 9
// end ;
26287: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
26288: LD_VAR 0 1
26292: PPUSH
26293: CALL 45824 0 1
// if unit = Truman then
26297: LD_VAR 0 1
26301: PUSH
26302: LD_EXP 21
26306: EQUAL
26307: IFFALSE 26316
// YouLost ( Powell ) ;
26309: LD_STRING Powell
26311: PPUSH
26312: CALL_OW 104
// if unit = JMM then
26316: LD_VAR 0 1
26320: PUSH
26321: LD_EXP 1
26325: EQUAL
26326: IFFALSE 26335
// YouLost ( JMM ) ;
26328: LD_STRING JMM
26330: PPUSH
26331: CALL_OW 104
// if unit = Khatam then
26335: LD_VAR 0 1
26339: PUSH
26340: LD_EXP 14
26344: EQUAL
26345: IFFALSE 26355
// KhatamStatus = 0 ;
26347: LD_ADDR_EXP 55
26351: PUSH
26352: LD_INT 0
26354: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
26355: LD_VAR 0 1
26359: PPUSH
26360: CALL_OW 255
26364: PUSH
26365: LD_INT 3
26367: EQUAL
26368: PUSH
26369: LD_VAR 0 1
26373: PPUSH
26374: CALL_OW 247
26378: PUSH
26379: LD_INT 3
26381: EQUAL
26382: AND
26383: IFFALSE 27075
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
26385: LD_VAR 0 1
26389: PPUSH
26390: CALL_OW 266
26394: PUSH
26395: LD_INT 31
26397: EQUAL
26398: PUSH
26399: LD_VAR 0 1
26403: PPUSH
26404: CALL_OW 266
26408: PUSH
26409: LD_INT 32
26411: EQUAL
26412: OR
26413: PUSH
26414: LD_VAR 0 1
26418: PPUSH
26419: CALL_OW 266
26423: PUSH
26424: LD_INT 36
26426: EQUAL
26427: OR
26428: PUSH
26429: LD_VAR 0 1
26433: PPUSH
26434: CALL_OW 266
26438: PUSH
26439: LD_INT 0
26441: EQUAL
26442: OR
26443: PUSH
26444: LD_VAR 0 1
26448: PPUSH
26449: CALL_OW 266
26453: PUSH
26454: LD_INT 24
26456: EQUAL
26457: OR
26458: PUSH
26459: LD_VAR 0 1
26463: PPUSH
26464: CALL_OW 266
26468: PUSH
26469: LD_INT 17
26471: EQUAL
26472: OR
26473: PUSH
26474: LD_VAR 0 1
26478: PPUSH
26479: CALL_OW 266
26483: PUSH
26484: LD_INT 25
26486: EQUAL
26487: OR
26488: PUSH
26489: LD_VAR 0 1
26493: PPUSH
26494: CALL_OW 266
26498: PUSH
26499: LD_INT 19
26501: EQUAL
26502: OR
26503: PUSH
26504: LD_VAR 0 1
26508: PPUSH
26509: CALL_OW 266
26513: PUSH
26514: LD_INT 20
26516: EQUAL
26517: OR
26518: PUSH
26519: LD_VAR 0 1
26523: PPUSH
26524: CALL_OW 266
26528: PUSH
26529: LD_INT 18
26531: EQUAL
26532: OR
26533: PUSH
26534: LD_VAR 0 1
26538: PPUSH
26539: CALL_OW 266
26543: PUSH
26544: LD_INT 21
26546: EQUAL
26547: OR
26548: PUSH
26549: LD_VAR 0 1
26553: PPUSH
26554: CALL_OW 266
26558: PUSH
26559: LD_INT 23
26561: EQUAL
26562: OR
26563: PUSH
26564: LD_VAR 0 1
26568: PPUSH
26569: CALL_OW 266
26573: PUSH
26574: LD_INT 16
26576: EQUAL
26577: OR
26578: PUSH
26579: LD_VAR 0 1
26583: PPUSH
26584: CALL_OW 266
26588: PUSH
26589: LD_INT 6
26591: EQUAL
26592: OR
26593: PUSH
26594: LD_VAR 0 1
26598: PPUSH
26599: CALL_OW 266
26603: PUSH
26604: LD_INT 29
26606: EQUAL
26607: OR
26608: PUSH
26609: LD_VAR 0 1
26613: PPUSH
26614: CALL_OW 266
26618: PUSH
26619: LD_INT 26
26621: EQUAL
26622: OR
26623: PUSH
26624: LD_VAR 0 1
26628: PPUSH
26629: CALL_OW 266
26633: PUSH
26634: LD_INT 30
26636: EQUAL
26637: OR
26638: PUSH
26639: LD_VAR 0 1
26643: PPUSH
26644: CALL_OW 266
26648: PUSH
26649: LD_INT 28
26651: EQUAL
26652: OR
26653: PUSH
26654: LD_VAR 0 1
26658: PPUSH
26659: CALL_OW 266
26663: PUSH
26664: LD_INT 27
26666: EQUAL
26667: OR
26668: PUSH
26669: LD_VAR 0 1
26673: PPUSH
26674: CALL_OW 266
26678: PUSH
26679: LD_INT 33
26681: EQUAL
26682: OR
26683: PUSH
26684: LD_VAR 0 1
26688: PPUSH
26689: CALL_OW 266
26693: PUSH
26694: LD_INT 2
26696: EQUAL
26697: OR
26698: PUSH
26699: LD_VAR 0 1
26703: PPUSH
26704: CALL_OW 266
26708: PUSH
26709: LD_INT 4
26711: EQUAL
26712: OR
26713: IFFALSE 26799
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26715: LD_ADDR_EXP 44
26719: PUSH
26720: LD_EXP 44
26724: PUSH
26725: LD_VAR 0 1
26729: PPUSH
26730: CALL_OW 266
26734: ADD
26735: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26736: LD_ADDR_EXP 44
26740: PUSH
26741: LD_EXP 44
26745: PUSH
26746: LD_VAR 0 1
26750: PPUSH
26751: CALL_OW 250
26755: ADD
26756: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26757: LD_ADDR_EXP 44
26761: PUSH
26762: LD_EXP 44
26766: PUSH
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL_OW 251
26776: ADD
26777: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26778: LD_ADDR_EXP 44
26782: PUSH
26783: LD_EXP 44
26787: PUSH
26788: LD_VAR 0 1
26792: PPUSH
26793: CALL_OW 254
26797: ADD
26798: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26799: LD_VAR 0 1
26803: PPUSH
26804: CALL_OW 266
26808: PUSH
26809: LD_INT 1
26811: EQUAL
26812: IFFALSE 26891
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26814: LD_ADDR_EXP 44
26818: PUSH
26819: LD_EXP 44
26823: PUSH
26824: LD_INT 0
26826: ADD
26827: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26828: LD_ADDR_EXP 44
26832: PUSH
26833: LD_EXP 44
26837: PUSH
26838: LD_VAR 0 1
26842: PPUSH
26843: CALL_OW 250
26847: ADD
26848: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26849: LD_ADDR_EXP 44
26853: PUSH
26854: LD_EXP 44
26858: PUSH
26859: LD_VAR 0 1
26863: PPUSH
26864: CALL_OW 251
26868: ADD
26869: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26870: LD_ADDR_EXP 44
26874: PUSH
26875: LD_EXP 44
26879: PUSH
26880: LD_VAR 0 1
26884: PPUSH
26885: CALL_OW 254
26889: ADD
26890: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26891: LD_VAR 0 1
26895: PPUSH
26896: CALL_OW 266
26900: PUSH
26901: LD_INT 3
26903: EQUAL
26904: IFFALSE 26983
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26906: LD_ADDR_EXP 44
26910: PUSH
26911: LD_EXP 44
26915: PUSH
26916: LD_INT 2
26918: ADD
26919: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26920: LD_ADDR_EXP 44
26924: PUSH
26925: LD_EXP 44
26929: PUSH
26930: LD_VAR 0 1
26934: PPUSH
26935: CALL_OW 250
26939: ADD
26940: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26941: LD_ADDR_EXP 44
26945: PUSH
26946: LD_EXP 44
26950: PUSH
26951: LD_VAR 0 1
26955: PPUSH
26956: CALL_OW 251
26960: ADD
26961: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26962: LD_ADDR_EXP 44
26966: PUSH
26967: LD_EXP 44
26971: PUSH
26972: LD_VAR 0 1
26976: PPUSH
26977: CALL_OW 254
26981: ADD
26982: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26983: LD_VAR 0 1
26987: PPUSH
26988: CALL_OW 266
26992: PUSH
26993: LD_INT 5
26995: EQUAL
26996: IFFALSE 27075
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26998: LD_ADDR_EXP 44
27002: PUSH
27003: LD_EXP 44
27007: PUSH
27008: LD_INT 4
27010: ADD
27011: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
27012: LD_ADDR_EXP 44
27016: PUSH
27017: LD_EXP 44
27021: PUSH
27022: LD_VAR 0 1
27026: PPUSH
27027: CALL_OW 250
27031: ADD
27032: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
27033: LD_ADDR_EXP 44
27037: PUSH
27038: LD_EXP 44
27042: PUSH
27043: LD_VAR 0 1
27047: PPUSH
27048: CALL_OW 251
27052: ADD
27053: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
27054: LD_ADDR_EXP 44
27058: PUSH
27059: LD_EXP 44
27063: PUSH
27064: LD_VAR 0 1
27068: PPUSH
27069: CALL_OW 254
27073: ADD
27074: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
27075: LD_EXP 53
27079: PUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL_OW 257
27089: PUSH
27090: LD_INT 3
27092: EQUAL
27093: AND
27094: PUSH
27095: LD_VAR 0 1
27099: PPUSH
27100: CALL_OW 255
27104: PUSH
27105: LD_INT 3
27107: EQUAL
27108: AND
27109: PUSH
27110: LD_EXP 37
27114: PPUSH
27115: CALL_OW 302
27119: AND
27120: PUSH
27121: LD_EXP 37
27125: PPUSH
27126: CALL_OW 255
27130: PUSH
27131: LD_INT 3
27133: EQUAL
27134: AND
27135: IFFALSE 27219
// begin ruMech := ruMech - 1 ;
27137: LD_ADDR_EXP 53
27141: PUSH
27142: LD_EXP 53
27146: PUSH
27147: LD_INT 1
27149: MINUS
27150: ST_TO_ADDR
// uc_side = 3 ;
27151: LD_ADDR_OWVAR 20
27155: PUSH
27156: LD_INT 3
27158: ST_TO_ADDR
// uc_nation = 3 ;
27159: LD_ADDR_OWVAR 21
27163: PUSH
27164: LD_INT 3
27166: ST_TO_ADDR
// hc_gallery :=  ;
27167: LD_ADDR_OWVAR 33
27171: PUSH
27172: LD_STRING 
27174: ST_TO_ADDR
// hc_name :=  ;
27175: LD_ADDR_OWVAR 26
27179: PUSH
27180: LD_STRING 
27182: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
27183: LD_INT 0
27185: PPUSH
27186: LD_EXP 38
27190: PPUSH
27191: LD_EXP 39
27195: PPUSH
27196: CALL_OW 12
27200: PPUSH
27201: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
27205: CALL_OW 44
27209: PPUSH
27210: LD_EXP 37
27214: PPUSH
27215: CALL_OW 52
// end ; end ;
27219: PPOPN 1
27221: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
27222: LD_VAR 0 1
27226: PPUSH
27227: LD_VAR 0 2
27231: PPUSH
27232: CALL 45944 0 2
// end ;
27236: PPOPN 2
27238: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
27239: LD_ADDR_OWVAR 57
27243: PUSH
27244: LD_INT 0
27246: ST_TO_ADDR
// fastEnd = 1 ;
27247: LD_ADDR_EXP 65
27251: PUSH
27252: LD_INT 1
27254: ST_TO_ADDR
// FinishMission ;
27255: CALL 28423 0 0
// end ;
27259: PPOPN 1
27261: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
27262: LD_VAR 0 1
27266: PPUSH
27267: CALL 45928 0 1
// end ; end_of_file
27271: PPOPN 1
27273: END
// export function CreateNature ; var i , un ; begin
27274: LD_INT 0
27276: PPUSH
27277: PPUSH
27278: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
27279: LD_ADDR_VAR 0 2
27283: PUSH
27284: DOUBLE
27285: LD_INT 1
27287: DEC
27288: ST_TO_ADDR
27289: LD_OWVAR 67
27293: PUSH
27294: LD_INT 1
27296: PPUSH
27297: LD_INT 5
27299: PPUSH
27300: CALL_OW 12
27304: PLUS
27305: PUSH
27306: FOR_TO
27307: IFFALSE 27452
// begin hc_sex = sex_male ;
27309: LD_ADDR_OWVAR 27
27313: PUSH
27314: LD_INT 1
27316: ST_TO_ADDR
// uc_side = 0 ;
27317: LD_ADDR_OWVAR 20
27321: PUSH
27322: LD_INT 0
27324: ST_TO_ADDR
// uc_nation = nation_nature ;
27325: LD_ADDR_OWVAR 21
27329: PUSH
27330: LD_INT 0
27332: ST_TO_ADDR
// hc_class = class_apeman ;
27333: LD_ADDR_OWVAR 28
27337: PUSH
27338: LD_INT 12
27340: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
27341: LD_ADDR_OWVAR 31
27345: PUSH
27346: LD_INT 2
27348: PPUSH
27349: LD_INT 7
27351: PPUSH
27352: CALL_OW 12
27356: PUSH
27357: LD_OWVAR 67
27361: PLUS
27362: PUSH
27363: LD_INT 2
27365: PPUSH
27366: LD_INT 10
27368: PPUSH
27369: CALL_OW 12
27373: PUSH
27374: LD_INT 2
27376: PPUSH
27377: LD_INT 10
27379: PPUSH
27380: CALL_OW 12
27384: PUSH
27385: LD_INT 2
27387: PPUSH
27388: LD_INT 10
27390: PPUSH
27391: CALL_OW 12
27395: PUSH
27396: EMPTY
27397: LIST
27398: LIST
27399: LIST
27400: LIST
27401: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27402: LD_ADDR_OWVAR 35
27406: PUSH
27407: LD_INT 5
27409: NEG
27410: PPUSH
27411: LD_INT 5
27413: PPUSH
27414: CALL_OW 12
27418: PUSH
27419: LD_OWVAR 67
27423: MUL
27424: ST_TO_ADDR
// un = CreateHuman ;
27425: LD_ADDR_VAR 0 3
27429: PUSH
27430: CALL_OW 44
27434: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
27435: LD_VAR 0 3
27439: PPUSH
27440: LD_INT 5
27442: PPUSH
27443: LD_INT 0
27445: PPUSH
27446: CALL_OW 49
// end ;
27450: GO 27306
27452: POP
27453: POP
// for i = 1 to Difficulty + 2 do
27454: LD_ADDR_VAR 0 2
27458: PUSH
27459: DOUBLE
27460: LD_INT 1
27462: DEC
27463: ST_TO_ADDR
27464: LD_OWVAR 67
27468: PUSH
27469: LD_INT 2
27471: PLUS
27472: PUSH
27473: FOR_TO
27474: IFFALSE 27583
// begin hc_sex = sex_male ;
27476: LD_ADDR_OWVAR 27
27480: PUSH
27481: LD_INT 1
27483: ST_TO_ADDR
// uc_side = 0 ;
27484: LD_ADDR_OWVAR 20
27488: PUSH
27489: LD_INT 0
27491: ST_TO_ADDR
// uc_nation = nation_nature ;
27492: LD_ADDR_OWVAR 21
27496: PUSH
27497: LD_INT 0
27499: ST_TO_ADDR
// hc_class = class_tiger ;
27500: LD_ADDR_OWVAR 28
27504: PUSH
27505: LD_INT 14
27507: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27508: LD_ADDR_OWVAR 31
27512: PUSH
27513: LD_EXP 39
27517: PUSH
27518: LD_INT 0
27520: PUSH
27521: LD_INT 0
27523: PUSH
27524: LD_INT 0
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: LIST
27531: LIST
27532: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27533: LD_ADDR_OWVAR 35
27537: PUSH
27538: LD_INT 5
27540: NEG
27541: PPUSH
27542: LD_INT 5
27544: PPUSH
27545: CALL_OW 12
27549: PUSH
27550: LD_OWVAR 67
27554: MUL
27555: ST_TO_ADDR
// un = CreateHuman ;
27556: LD_ADDR_VAR 0 3
27560: PUSH
27561: CALL_OW 44
27565: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27566: LD_VAR 0 3
27570: PPUSH
27571: LD_INT 6
27573: PPUSH
27574: LD_INT 0
27576: PPUSH
27577: CALL_OW 49
// end ;
27581: GO 27473
27583: POP
27584: POP
// for i = 1 to rand ( 3 , 4 ) do
27585: LD_ADDR_VAR 0 2
27589: PUSH
27590: DOUBLE
27591: LD_INT 1
27593: DEC
27594: ST_TO_ADDR
27595: LD_INT 3
27597: PPUSH
27598: LD_INT 4
27600: PPUSH
27601: CALL_OW 12
27605: PUSH
27606: FOR_TO
27607: IFFALSE 27701
// begin hc_sex = sex_male ;
27609: LD_ADDR_OWVAR 27
27613: PUSH
27614: LD_INT 1
27616: ST_TO_ADDR
// uc_side = 0 ;
27617: LD_ADDR_OWVAR 20
27621: PUSH
27622: LD_INT 0
27624: ST_TO_ADDR
// uc_nation = nation_nature ;
27625: LD_ADDR_OWVAR 21
27629: PUSH
27630: LD_INT 0
27632: ST_TO_ADDR
// hc_class = 18 ;
27633: LD_ADDR_OWVAR 28
27637: PUSH
27638: LD_INT 18
27640: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27641: LD_ADDR_OWVAR 31
27645: PUSH
27646: LD_EXP 39
27650: PUSH
27651: LD_INT 0
27653: PUSH
27654: LD_INT 0
27656: PUSH
27657: LD_INT 0
27659: PUSH
27660: EMPTY
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: ST_TO_ADDR
// hc_agressivity = 0 ;
27666: LD_ADDR_OWVAR 35
27670: PUSH
27671: LD_INT 0
27673: ST_TO_ADDR
// un = CreateHuman ;
27674: LD_ADDR_VAR 0 3
27678: PUSH
27679: CALL_OW 44
27683: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27684: LD_VAR 0 3
27688: PPUSH
27689: LD_INT 6
27691: PPUSH
27692: LD_INT 0
27694: PPUSH
27695: CALL_OW 49
// end ;
27699: GO 27606
27701: POP
27702: POP
// end ; end_of_file
27703: LD_VAR 0 1
27707: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27708: LD_EXP 48
27712: PUSH
27713: LD_INT 1
27715: EQUAL
27716: IFFALSE 27804
27718: GO 27720
27720: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27721: LD_INT 7
27723: PPUSH
27724: LD_INT 5
27726: PPUSH
27727: LD_INT 4
27729: PUSH
27730: LD_INT 5
27732: PUSH
27733: LD_INT 6
27735: PUSH
27736: LD_INT 6
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: PUSH
27745: LD_OWVAR 67
27749: ARRAY
27750: PPUSH
27751: LD_EXP 38
27755: PPUSH
27756: LD_EXP 39
27760: PPUSH
27761: CALL_OW 12
27765: PPUSH
27766: LD_INT 2
27768: PPUSH
27769: LD_INT 1
27771: PPUSH
27772: LD_INT 1
27774: PPUSH
27775: EMPTY
27776: PPUSH
27777: LD_INT 25
27779: PUSH
27780: LD_INT 26
27782: PUSH
27783: LD_INT 27
27785: PUSH
27786: LD_INT 28
27788: PUSH
27789: EMPTY
27790: LIST
27791: LIST
27792: LIST
27793: LIST
27794: PPUSH
27795: EMPTY
27796: PPUSH
27797: LD_INT 1
27799: PPUSH
27800: CALL 17568 0 11
27804: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27805: LD_EXP 48
27809: PUSH
27810: LD_INT 1
27812: EQUAL
27813: IFFALSE 27905
27815: GO 27817
27817: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27818: LD_INT 5
27820: PPUSH
27821: LD_INT 2
27823: PPUSH
27824: LD_INT 5
27826: PUSH
27827: LD_INT 6
27829: PUSH
27830: LD_INT 8
27832: PUSH
27833: LD_INT 9
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: PUSH
27842: LD_OWVAR 67
27846: ARRAY
27847: PPUSH
27848: LD_INT 0
27850: PPUSH
27851: LD_INT 0
27853: PPUSH
27854: LD_INT 2
27856: PUSH
27857: LD_INT 4
27859: PUSH
27860: LD_INT 5
27862: PUSH
27863: EMPTY
27864: LIST
27865: LIST
27866: LIST
27867: PUSH
27868: LD_OWVAR 67
27872: ARRAY
27873: PPUSH
27874: LD_INT 0
27876: PPUSH
27877: LD_EXP 38
27881: PPUSH
27882: LD_EXP 39
27886: PPUSH
27887: CALL_OW 12
27891: PPUSH
27892: LD_INT 7
27894: PPUSH
27895: LD_INT 9
27897: PPUSH
27898: LD_INT 1
27900: PPUSH
27901: CALL 19272 0 11
27905: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27906: LD_EXP 48
27910: PUSH
27911: LD_INT 1
27913: EQUAL
27914: IFFALSE 27923
27916: GO 27918
27918: DISABLE
// PrepareArabianSheik ;
27919: CALL 4875 0 0
27923: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27924: LD_EXP 31
27928: PUSH
27929: LD_EXP 66
27933: PUSH
27934: LD_INT 1
27936: EQUAL
27937: AND
27938: IFFALSE 28007
27940: GO 27942
27942: DISABLE
// begin enable ;
27943: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27944: LD_INT 6
27946: PPUSH
27947: LD_INT 3
27949: PPUSH
27950: LD_EXP 62
27954: PPUSH
27955: LD_INT 0
27957: PPUSH
27958: LD_OWVAR 67
27962: PPUSH
27963: LD_INT 0
27965: PPUSH
27966: LD_EXP 62
27970: PUSH
27971: LD_INT 3
27973: DIV
27974: PUSH
27975: LD_INT 1
27977: PLUS
27978: PPUSH
27979: LD_EXP 38
27983: PPUSH
27984: LD_EXP 39
27988: PPUSH
27989: CALL_OW 12
27993: PPUSH
27994: LD_INT 17
27996: PPUSH
27997: LD_INT 18
27999: PPUSH
28000: LD_INT 1
28002: PPUSH
28003: CALL 19272 0 11
// end ;
28007: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
28008: LD_EXP 31
28012: PUSH
28013: LD_EXP 66
28017: PUSH
28018: LD_INT 1
28020: EQUAL
28021: AND
28022: IFFALSE 28099
28024: GO 28026
28026: DISABLE
// begin enable ;
28027: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
28028: LD_INT 17
28030: PPUSH
28031: LD_INT 6
28033: PPUSH
28034: LD_EXP 61
28038: PPUSH
28039: LD_EXP 38
28043: PPUSH
28044: LD_EXP 39
28048: PPUSH
28049: CALL_OW 12
28053: PPUSH
28054: LD_INT 3
28056: PPUSH
28057: LD_INT 1
28059: PPUSH
28060: LD_INT 3
28062: PUSH
28063: LD_INT 3
28065: PUSH
28066: EMPTY
28067: LIST
28068: LIST
28069: PPUSH
28070: LD_INT 43
28072: PUSH
28073: LD_INT 44
28075: PUSH
28076: LD_INT 45
28078: PUSH
28079: LD_INT 46
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: LIST
28087: PPUSH
28088: EMPTY
28089: PPUSH
28090: EMPTY
28091: PPUSH
28092: LD_INT 1
28094: PPUSH
28095: CALL 17568 0 11
// end ;
28099: END
// every 10 10$00 trigger joinEpsilon do
28100: LD_EXP 31
28104: IFFALSE 28158
28106: GO 28108
28108: DISABLE
// begin enable ;
28109: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
28110: LD_ADDR_EXP 61
28114: PUSH
28115: LD_EXP 61
28119: PUSH
28120: LD_INT 1
28122: PPUSH
28123: LD_OWVAR 67
28127: PPUSH
28128: CALL_OW 12
28132: PLUS
28133: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
28134: LD_ADDR_EXP 62
28138: PUSH
28139: LD_EXP 62
28143: PUSH
28144: LD_INT 1
28146: PPUSH
28147: LD_OWVAR 67
28151: PPUSH
28152: CALL_OW 12
28156: PLUS
28157: ST_TO_ADDR
// end ;
28158: END
// every 21 21$0 trigger attackAvalaible = 1 do
28159: LD_EXP 66
28163: PUSH
28164: LD_INT 1
28166: EQUAL
28167: IFFALSE 28180
28169: GO 28171
28171: DISABLE
// attackAvalaible = 0 ; end_of_file
28172: LD_ADDR_EXP 66
28176: PUSH
28177: LD_INT 0
28179: ST_TO_ADDR
28180: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
28181: LD_INT 54
28183: PPUSH
28184: LD_INT 1
28186: PPUSH
28187: CALL_OW 321
28191: PUSH
28192: LD_INT 2
28194: EQUAL
28195: PUSH
28196: LD_INT 55
28198: PPUSH
28199: LD_INT 1
28201: PPUSH
28202: CALL_OW 321
28206: PUSH
28207: LD_INT 2
28209: EQUAL
28210: AND
28211: PUSH
28212: LD_INT 21
28214: PPUSH
28215: LD_INT 1
28217: PPUSH
28218: CALL_OW 321
28222: PUSH
28223: LD_INT 2
28225: EQUAL
28226: AND
28227: PUSH
28228: LD_INT 22
28230: PPUSH
28231: LD_INT 1
28233: PPUSH
28234: CALL_OW 321
28238: PUSH
28239: LD_INT 2
28241: EQUAL
28242: AND
28243: PUSH
28244: LD_INT 12
28246: PPUSH
28247: LD_INT 1
28249: PPUSH
28250: CALL_OW 321
28254: PUSH
28255: LD_INT 1
28257: EQUAL
28258: PUSH
28259: LD_INT 32
28261: PPUSH
28262: LD_INT 1
28264: PPUSH
28265: CALL_OW 321
28269: PUSH
28270: LD_INT 1
28272: EQUAL
28273: OR
28274: PUSH
28275: EMPTY
28276: LIST
28277: AND
28278: PUSH
28279: LD_EXP 50
28283: PUSH
28284: LD_INT 1
28286: EQUAL
28287: AND
28288: PUSH
28289: LD_INT 22
28291: PUSH
28292: LD_INT 3
28294: PUSH
28295: EMPTY
28296: LIST
28297: LIST
28298: PUSH
28299: LD_INT 21
28301: PUSH
28302: LD_INT 1
28304: PUSH
28305: EMPTY
28306: LIST
28307: LIST
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: PPUSH
28313: CALL_OW 69
28317: PUSH
28318: LD_INT 0
28320: EQUAL
28321: AND
28322: IFFALSE 28378
28324: GO 28326
28326: DISABLE
// begin case query ( QEndMission ) of 1 :
28327: LD_STRING QEndMission
28329: PPUSH
28330: CALL_OW 97
28334: PUSH
28335: LD_INT 1
28337: DOUBLE
28338: EQUAL
28339: IFTRUE 28343
28341: GO 28354
28343: POP
// begin end_the_mission_allowed = true ;
28344: LD_ADDR_OWVAR 57
28348: PUSH
28349: LD_INT 1
28351: ST_TO_ADDR
// end ; 2 :
28352: GO 28378
28354: LD_INT 2
28356: DOUBLE
28357: EQUAL
28358: IFTRUE 28362
28360: GO 28377
28362: POP
// begin fastEnd = 1 ;
28363: LD_ADDR_EXP 65
28367: PUSH
28368: LD_INT 1
28370: ST_TO_ADDR
// FinishMission ;
28371: CALL 28423 0 0
// end ; end ;
28375: GO 28378
28377: POP
// end ;
28378: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
28379: LD_EXP 60
28383: PUSH
28384: LD_EXP 59
28388: NOT
28389: AND
28390: PUSH
28391: LD_INT 22
28393: PUSH
28394: LD_INT 3
28396: PUSH
28397: EMPTY
28398: LIST
28399: LIST
28400: PPUSH
28401: CALL_OW 69
28405: PUSH
28406: LD_INT 0
28408: EQUAL
28409: AND
28410: IFFALSE 28422
28412: GO 28414
28414: DISABLE
// SetAchievement ( ACH_TACT ) ;
28415: LD_STRING ACH_TACT
28417: PPUSH
28418: CALL_OW 543
28422: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
28423: LD_INT 0
28425: PPUSH
28426: PPUSH
28427: PPUSH
28428: PPUSH
// if not snipersTrained then
28429: LD_EXP 64
28433: NOT
28434: IFFALSE 28443
// SetAchievement ( ACH_SNIPER ) ;
28436: LD_STRING ACH_SNIPER
28438: PPUSH
28439: CALL_OW 543
// m1 := false ;
28443: LD_ADDR_VAR 0 2
28447: PUSH
28448: LD_INT 0
28450: ST_TO_ADDR
// m2 := false ;
28451: LD_ADDR_VAR 0 3
28455: PUSH
28456: LD_INT 0
28458: ST_TO_ADDR
// m3 := false ;
28459: LD_ADDR_VAR 0 4
28463: PUSH
28464: LD_INT 0
28466: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
28467: LD_EXP 55
28471: PPUSH
28472: LD_STRING 10_KhatamStatus_1
28474: PPUSH
28475: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
28479: LD_EXP 54
28483: PPUSH
28484: LD_STRING 10_GensherEscape_1
28486: PPUSH
28487: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
28491: LD_INT 12
28493: PPUSH
28494: LD_INT 1
28496: PPUSH
28497: CALL_OW 321
28501: PUSH
28502: LD_INT 2
28504: EQUAL
28505: IFFALSE 28527
// begin AddMedal ( sights , 1 ) ;
28507: LD_STRING sights
28509: PPUSH
28510: LD_INT 1
28512: PPUSH
28513: CALL_OW 101
// m1 := true ;
28517: LD_ADDR_VAR 0 2
28521: PUSH
28522: LD_INT 1
28524: ST_TO_ADDR
// end else
28525: GO 28538
// begin AddMedal ( sights , - 1 ) ;
28527: LD_STRING sights
28529: PPUSH
28530: LD_INT 1
28532: NEG
28533: PPUSH
28534: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28538: LD_INT 32
28540: PPUSH
28541: LD_INT 1
28543: PPUSH
28544: CALL_OW 321
28548: PUSH
28549: LD_INT 2
28551: EQUAL
28552: IFFALSE 28574
// begin AddMedal ( computers , 1 ) ;
28554: LD_STRING computers
28556: PPUSH
28557: LD_INT 1
28559: PPUSH
28560: CALL_OW 101
// m2 := true ;
28564: LD_ADDR_VAR 0 3
28568: PUSH
28569: LD_INT 1
28571: ST_TO_ADDR
// end else
28572: GO 28585
// begin AddMedal ( computers , - 1 ) ;
28574: LD_STRING computers
28576: PPUSH
28577: LD_INT 1
28579: NEG
28580: PPUSH
28581: CALL_OW 101
// end ; if arabianEscape = 0 then
28585: LD_EXP 49
28589: PUSH
28590: LD_INT 0
28592: EQUAL
28593: IFFALSE 28625
// begin AddMedal ( renegades , 2 ) ;
28595: LD_STRING renegades
28597: PPUSH
28598: LD_INT 2
28600: PPUSH
28601: CALL_OW 101
// m3 := true ;
28605: LD_ADDR_VAR 0 4
28609: PUSH
28610: LD_INT 1
28612: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28613: LD_INT 0
28615: PPUSH
28616: LD_STRING 10_ScientistsEscape_1
28618: PPUSH
28619: CALL_OW 39
// end else
28623: GO 28636
// begin AddMedal ( renegades , - 1 ) ;
28625: LD_STRING renegades
28627: PPUSH
28628: LD_INT 1
28630: NEG
28631: PPUSH
28632: CALL_OW 101
// end ; SaveEpsilonBase ;
28636: CALL 29451 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28640: LD_VAR 0 2
28644: PUSH
28645: LD_VAR 0 3
28649: AND
28650: PUSH
28651: LD_VAR 0 4
28655: AND
28656: PUSH
28657: LD_OWVAR 67
28661: PUSH
28662: LD_INT 3
28664: GREATEREQUAL
28665: AND
28666: IFFALSE 28678
// SetAchievementEX ( ACH_AMER , 10 ) ;
28668: LD_STRING ACH_AMER
28670: PPUSH
28671: LD_INT 10
28673: PPUSH
28674: CALL_OW 564
// if tick <= 40 40$00 then
28678: LD_OWVAR 1
28682: PUSH
28683: LD_INT 84000
28685: LESSEQUAL
28686: IFFALSE 28702
// begin wait ( 3 ) ;
28688: LD_INT 3
28690: PPUSH
28691: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28695: LD_STRING ACH_ASPEED_10
28697: PPUSH
28698: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28702: LD_STRING Main
28704: PPUSH
28705: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28709: LD_INT 22
28711: PUSH
28712: LD_INT 1
28714: PUSH
28715: EMPTY
28716: LIST
28717: LIST
28718: PUSH
28719: LD_INT 23
28721: PUSH
28722: LD_INT 1
28724: PUSH
28725: EMPTY
28726: LIST
28727: LIST
28728: PUSH
28729: LD_INT 21
28731: PUSH
28732: LD_INT 1
28734: PUSH
28735: EMPTY
28736: LIST
28737: LIST
28738: PUSH
28739: LD_INT 2
28741: PUSH
28742: LD_INT 25
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 25
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 25
28764: PUSH
28765: LD_INT 3
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 25
28774: PUSH
28775: LD_INT 4
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 25
28784: PUSH
28785: LD_INT 5
28787: PUSH
28788: EMPTY
28789: LIST
28790: LIST
28791: PUSH
28792: LD_INT 25
28794: PUSH
28795: LD_INT 8
28797: PUSH
28798: EMPTY
28799: LIST
28800: LIST
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: PUSH
28811: EMPTY
28812: LIST
28813: LIST
28814: LIST
28815: LIST
28816: PPUSH
28817: CALL_OW 69
28821: PPUSH
28822: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28826: LD_EXP 1
28830: PPUSH
28831: LD_EXP 56
28835: PUSH
28836: LD_STRING JMM
28838: STR
28839: PPUSH
28840: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28844: LD_EXP 2
28848: PPUSH
28849: LD_EXP 56
28853: PUSH
28854: LD_STRING Brown
28856: STR
28857: PPUSH
28858: CALL 11752 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28862: LD_EXP 3
28866: PPUSH
28867: LD_EXP 56
28871: PUSH
28872: LD_STRING Donaldson
28874: STR
28875: PPUSH
28876: CALL 11752 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28880: LD_EXP 4
28884: PPUSH
28885: LD_EXP 56
28889: PUSH
28890: LD_STRING Bobby
28892: STR
28893: PPUSH
28894: CALL 11752 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28898: LD_EXP 5
28902: PPUSH
28903: LD_EXP 56
28907: PUSH
28908: LD_STRING Cyrus
28910: STR
28911: PPUSH
28912: CALL 11752 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28916: LD_EXP 6
28920: PPUSH
28921: LD_EXP 56
28925: PUSH
28926: LD_STRING Lisa
28928: STR
28929: PPUSH
28930: CALL 11752 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28934: LD_EXP 7
28938: PPUSH
28939: LD_EXP 56
28943: PUSH
28944: LD_STRING Frank
28946: STR
28947: PPUSH
28948: CALL 11752 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28952: LD_EXP 8
28956: PPUSH
28957: LD_EXP 56
28961: PUSH
28962: LD_STRING Kikuchi
28964: STR
28965: PPUSH
28966: CALL 11752 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28970: LD_EXP 9
28974: PPUSH
28975: LD_EXP 56
28979: PUSH
28980: LD_STRING Houten
28982: STR
28983: PPUSH
28984: CALL 11752 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28988: LD_EXP 10
28992: PPUSH
28993: LD_EXP 56
28997: PUSH
28998: LD_STRING Gary
29000: STR
29001: PPUSH
29002: CALL 11752 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
29006: LD_EXP 20
29010: PPUSH
29011: LD_EXP 56
29015: PUSH
29016: LD_STRING Cornell
29018: STR
29019: PPUSH
29020: CALL 11752 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
29024: LD_EXP 11
29028: PPUSH
29029: LD_EXP 56
29033: PUSH
29034: LD_STRING Simms
29036: STR
29037: PPUSH
29038: CALL 11752 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
29042: LD_EXP 12
29046: PPUSH
29047: LD_EXP 56
29051: PUSH
29052: LD_STRING Denis
29054: STR
29055: PPUSH
29056: CALL 11752 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
29060: LD_EXP 13
29064: PPUSH
29065: LD_EXP 56
29069: PUSH
29070: LD_STRING Joan
29072: STR
29073: PPUSH
29074: CALL 11752 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
29078: LD_EXP 15
29082: PPUSH
29083: LD_EXP 56
29087: PUSH
29088: LD_STRING Gladstone
29090: STR
29091: PPUSH
29092: CALL 11752 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
29096: LD_EXP 17
29100: PPUSH
29101: LD_EXP 56
29105: PUSH
29106: LD_STRING DeltaDoctor
29108: STR
29109: PPUSH
29110: CALL 11752 0 2
// if IsLive ( Mike ) then
29114: LD_EXP 19
29118: PPUSH
29119: CALL_OW 300
29123: IFFALSE 29143
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
29125: LD_EXP 19
29129: PPUSH
29130: LD_EXP 56
29134: PUSH
29135: LD_STRING Mike
29137: STR
29138: PPUSH
29139: CALL_OW 38
// SaveCharacters ( others09 , 10c_lock ) ;
29143: LD_EXP 24
29147: PPUSH
29148: LD_STRING 10c_lock
29150: PPUSH
29151: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
29155: LD_INT 50
29157: PUSH
29158: EMPTY
29159: LIST
29160: PUSH
29161: LD_INT 22
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: PUSH
29171: LD_INT 21
29173: PUSH
29174: LD_INT 1
29176: PUSH
29177: EMPTY
29178: LIST
29179: LIST
29180: PUSH
29181: LD_INT 2
29183: PUSH
29184: LD_INT 25
29186: PUSH
29187: LD_INT 1
29189: PUSH
29190: EMPTY
29191: LIST
29192: LIST
29193: PUSH
29194: LD_INT 25
29196: PUSH
29197: LD_INT 2
29199: PUSH
29200: EMPTY
29201: LIST
29202: LIST
29203: PUSH
29204: LD_INT 25
29206: PUSH
29207: LD_INT 3
29209: PUSH
29210: EMPTY
29211: LIST
29212: LIST
29213: PUSH
29214: LD_INT 25
29216: PUSH
29217: LD_INT 4
29219: PUSH
29220: EMPTY
29221: LIST
29222: LIST
29223: PUSH
29224: LD_INT 25
29226: PUSH
29227: LD_INT 5
29229: PUSH
29230: EMPTY
29231: LIST
29232: LIST
29233: PUSH
29234: LD_INT 25
29236: PUSH
29237: LD_INT 8
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: LIST
29251: LIST
29252: PUSH
29253: EMPTY
29254: LIST
29255: LIST
29256: LIST
29257: LIST
29258: PPUSH
29259: CALL_OW 69
29263: PUSH
29264: LD_EXP 1
29268: PUSH
29269: LD_EXP 2
29273: PUSH
29274: LD_EXP 3
29278: PUSH
29279: LD_EXP 4
29283: PUSH
29284: LD_EXP 5
29288: PUSH
29289: LD_EXP 6
29293: PUSH
29294: LD_EXP 7
29298: PUSH
29299: LD_EXP 15
29303: PUSH
29304: LD_EXP 8
29308: PUSH
29309: LD_EXP 12
29313: PUSH
29314: LD_EXP 13
29318: PUSH
29319: LD_EXP 9
29323: PUSH
29324: LD_EXP 11
29328: PUSH
29329: LD_EXP 10
29333: PUSH
29334: LD_EXP 17
29338: PUSH
29339: LD_EXP 20
29343: PUSH
29344: EMPTY
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: LIST
29353: LIST
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: DIFF
29362: PPUSH
29363: LD_STRING 10_other_survivors
29365: PPUSH
29366: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
29370: LD_INT 50
29372: PUSH
29373: EMPTY
29374: LIST
29375: PUSH
29376: LD_INT 22
29378: PUSH
29379: LD_INT 1
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: PUSH
29386: LD_INT 21
29388: PUSH
29389: LD_INT 1
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 2
29398: PUSH
29399: LD_INT 25
29401: PUSH
29402: LD_INT 16
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 25
29411: PUSH
29412: LD_INT 12
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: LIST
29423: PUSH
29424: EMPTY
29425: LIST
29426: LIST
29427: LIST
29428: LIST
29429: PPUSH
29430: CALL_OW 69
29434: PPUSH
29435: LD_STRING 10_ape
29437: PPUSH
29438: CALL_OW 38
// YouWin ;
29442: CALL_OW 103
// end ;
29446: LD_VAR 0 1
29450: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
29451: LD_INT 0
29453: PPUSH
29454: PPUSH
29455: PPUSH
29456: PPUSH
// epsilonBase = [ ] ;
29457: LD_ADDR_VAR 0 2
29461: PUSH
29462: EMPTY
29463: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
29464: LD_ADDR_VAR 0 3
29468: PUSH
29469: LD_INT 22
29471: PUSH
29472: LD_INT 1
29474: PUSH
29475: EMPTY
29476: LIST
29477: LIST
29478: PUSH
29479: LD_INT 21
29481: PUSH
29482: LD_INT 3
29484: PUSH
29485: EMPTY
29486: LIST
29487: LIST
29488: PUSH
29489: LD_INT 50
29491: PUSH
29492: EMPTY
29493: LIST
29494: PUSH
29495: EMPTY
29496: LIST
29497: LIST
29498: LIST
29499: PPUSH
29500: CALL_OW 69
29504: ST_TO_ADDR
// for i in buildings do
29505: LD_ADDR_VAR 0 4
29509: PUSH
29510: LD_VAR 0 3
29514: PUSH
29515: FOR_IN
29516: IFFALSE 29968
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
29518: LD_VAR 0 4
29522: PPUSH
29523: CALL_OW 266
29527: PUSH
29528: LD_INT 6
29530: PUSH
29531: LD_INT 7
29533: PUSH
29534: LD_INT 8
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: LIST
29541: IN
29542: IFFALSE 29656
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29544: LD_ADDR_VAR 0 2
29548: PUSH
29549: LD_VAR 0 2
29553: PUSH
29554: LD_VAR 0 4
29558: PPUSH
29559: CALL_OW 266
29563: PUSH
29564: LD_VAR 0 4
29568: PPUSH
29569: CALL_OW 250
29573: PUSH
29574: LD_VAR 0 4
29578: PPUSH
29579: CALL_OW 251
29583: PUSH
29584: LD_VAR 0 4
29588: PPUSH
29589: CALL_OW 254
29593: PUSH
29594: LD_VAR 0 4
29598: PPUSH
29599: CALL_OW 267
29603: PUSH
29604: LD_VAR 0 4
29608: PPUSH
29609: CALL_OW 248
29613: PUSH
29614: LD_VAR 0 4
29618: PPUSH
29619: LD_INT 1
29621: PPUSH
29622: CALL_OW 268
29626: PUSH
29627: LD_VAR 0 4
29631: PPUSH
29632: LD_INT 2
29634: PPUSH
29635: CALL_OW 268
29639: PUSH
29640: EMPTY
29641: LIST
29642: LIST
29643: LIST
29644: LIST
29645: LIST
29646: LIST
29647: LIST
29648: LIST
29649: PUSH
29650: EMPTY
29651: LIST
29652: ADD
29653: ST_TO_ADDR
29654: GO 29966
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29656: LD_VAR 0 4
29660: PPUSH
29661: CALL_OW 266
29665: PUSH
29666: LD_INT 32
29668: EQUAL
29669: PUSH
29670: LD_VAR 0 4
29674: PPUSH
29675: CALL_OW 266
29679: PUSH
29680: LD_INT 33
29682: EQUAL
29683: OR
29684: IFFALSE 29781
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29686: LD_ADDR_VAR 0 2
29690: PUSH
29691: LD_VAR 0 2
29695: PUSH
29696: LD_VAR 0 4
29700: PPUSH
29701: CALL_OW 266
29705: PUSH
29706: LD_VAR 0 4
29710: PPUSH
29711: CALL_OW 250
29715: PUSH
29716: LD_VAR 0 4
29720: PPUSH
29721: CALL_OW 251
29725: PUSH
29726: LD_VAR 0 4
29730: PPUSH
29731: CALL_OW 254
29735: PUSH
29736: LD_VAR 0 4
29740: PPUSH
29741: CALL_OW 267
29745: PUSH
29746: LD_VAR 0 4
29750: PPUSH
29751: CALL_OW 248
29755: PUSH
29756: LD_VAR 0 4
29760: PPUSH
29761: CALL_OW 269
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: PUSH
29775: EMPTY
29776: LIST
29777: ADD
29778: ST_TO_ADDR
29779: GO 29966
// if GetBType ( i ) = b_factory then
29781: LD_VAR 0 4
29785: PPUSH
29786: CALL_OW 266
29790: PUSH
29791: LD_INT 3
29793: EQUAL
29794: IFFALSE 29884
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29796: LD_ADDR_VAR 0 2
29800: PUSH
29801: LD_VAR 0 2
29805: PPUSH
29806: LD_INT 1
29808: PPUSH
29809: LD_VAR 0 4
29813: PPUSH
29814: CALL_OW 266
29818: PUSH
29819: LD_VAR 0 4
29823: PPUSH
29824: CALL_OW 250
29828: PUSH
29829: LD_VAR 0 4
29833: PPUSH
29834: CALL_OW 251
29838: PUSH
29839: LD_VAR 0 4
29843: PPUSH
29844: CALL_OW 254
29848: PUSH
29849: LD_VAR 0 4
29853: PPUSH
29854: CALL_OW 267
29858: PUSH
29859: LD_VAR 0 4
29863: PPUSH
29864: CALL_OW 248
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: LIST
29873: LIST
29874: LIST
29875: LIST
29876: PPUSH
29877: CALL_OW 2
29881: ST_TO_ADDR
29882: GO 29966
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29884: LD_ADDR_VAR 0 2
29888: PUSH
29889: LD_VAR 0 2
29893: PUSH
29894: LD_VAR 0 4
29898: PPUSH
29899: CALL_OW 266
29903: PUSH
29904: LD_VAR 0 4
29908: PPUSH
29909: CALL_OW 250
29913: PUSH
29914: LD_VAR 0 4
29918: PPUSH
29919: CALL_OW 251
29923: PUSH
29924: LD_VAR 0 4
29928: PPUSH
29929: CALL_OW 254
29933: PUSH
29934: LD_VAR 0 4
29938: PPUSH
29939: CALL_OW 267
29943: PUSH
29944: LD_VAR 0 4
29948: PPUSH
29949: CALL_OW 248
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: LIST
29961: PUSH
29962: EMPTY
29963: LIST
29964: ADD
29965: ST_TO_ADDR
// end ;
29966: GO 29515
29968: POP
29969: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29970: LD_VAR 0 2
29974: PPUSH
29975: LD_STRING 10_EpsilonBase
29977: PPUSH
29978: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29982: LD_INT 19
29984: PPUSH
29985: LD_STRING 10_EpsilonEnv
29987: PPUSH
29988: CALL 29997 0 2
// end ;
29992: LD_VAR 0 1
29996: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29997: LD_INT 0
29999: PPUSH
// result := ListEnvironmentArea ( area ) ;
30000: LD_ADDR_VAR 0 3
30004: PUSH
30005: LD_VAR 0 1
30009: PPUSH
30010: CALL_OW 353
30014: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
30015: LD_VAR 0 3
30019: PPUSH
30020: LD_VAR 0 2
30024: PPUSH
30025: CALL_OW 39
// end ; end_of_file
30029: LD_VAR 0 3
30033: RET
// every 0 0$01 do var timer ;
30034: GO 30036
30036: DISABLE
30037: LD_INT 0
30039: PPUSH
// begin timer := 0 0$20 ;
30040: LD_ADDR_VAR 0 1
30044: PUSH
30045: LD_INT 700
30047: ST_TO_ADDR
// repeat wait ( timer ) ;
30048: LD_VAR 0 1
30052: PPUSH
30053: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
30057: LD_EXP 58
30061: PUSH
30062: LD_INT 6
30064: GREATEREQUAL
30065: PUSH
30066: LD_EXP 58
30070: PUSH
30071: LD_INT 14
30073: LESS
30074: AND
30075: IFFALSE 30091
// timer := timer + 0 0$3 ;
30077: LD_ADDR_VAR 0 1
30081: PUSH
30082: LD_VAR 0 1
30086: PUSH
30087: LD_INT 105
30089: PLUS
30090: ST_TO_ADDR
// if cratesSpawned >= 14 then
30091: LD_EXP 58
30095: PUSH
30096: LD_INT 14
30098: GREATEREQUAL
30099: IFFALSE 30115
// timer := timer + 0 0$6 ;
30101: LD_ADDR_VAR 0 1
30105: PUSH
30106: LD_VAR 0 1
30110: PUSH
30111: LD_INT 210
30113: PLUS
30114: ST_TO_ADDR
// if timer > 2 2$00 then
30115: LD_VAR 0 1
30119: PUSH
30120: LD_INT 4200
30122: GREATER
30123: IFFALSE 30133
// timer := 0 0$45 ;
30125: LD_ADDR_VAR 0 1
30129: PUSH
30130: LD_INT 1575
30132: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
30133: LD_INT 1
30135: PPUSH
30136: LD_INT 5
30138: PPUSH
30139: CALL_OW 12
30143: PPUSH
30144: LD_INT 16
30146: PPUSH
30147: LD_INT 1
30149: PPUSH
30150: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
30154: LD_ADDR_EXP 58
30158: PUSH
30159: LD_EXP 58
30163: PUSH
30164: LD_INT 1
30166: PLUS
30167: ST_TO_ADDR
// until false ;
30168: LD_INT 0
30170: IFFALSE 30048
// end ; end_of_file end_of_file
30172: PPOPN 1
30174: END
// every 0 0$1 do
30175: GO 30177
30177: DISABLE
// begin enable ;
30178: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
30179: LD_STRING updateTimer(
30181: PUSH
30182: LD_OWVAR 1
30186: STR
30187: PUSH
30188: LD_STRING );
30190: STR
30191: PPUSH
30192: CALL_OW 559
// end ;
30196: END
// export function SOS_MapStart ( ) ; begin
30197: LD_INT 0
30199: PPUSH
// if streamModeActive then
30200: LD_EXP 71
30204: IFFALSE 30213
// DefineStreamItems ( true ) ;
30206: LD_INT 1
30208: PPUSH
30209: CALL 31867 0 1
// UpdateFactoryWaypoints ( ) ;
30213: CALL 44728 0 0
// UpdateWarehouseGatheringPoints ( ) ;
30217: CALL 44985 0 0
// end ;
30221: LD_VAR 0 1
30225: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30226: LD_INT 0
30228: PPUSH
// if p2 = hack_mode then
30229: LD_VAR 0 2
30233: PUSH
30234: LD_INT 100
30236: EQUAL
30237: IFFALSE 31240
// begin if not StreamModeActive then
30239: LD_EXP 71
30243: NOT
30244: IFFALSE 30254
// StreamModeActive := true ;
30246: LD_ADDR_EXP 71
30250: PUSH
30251: LD_INT 1
30253: ST_TO_ADDR
// if p3 = 0 then
30254: LD_VAR 0 3
30258: PUSH
30259: LD_INT 0
30261: EQUAL
30262: IFFALSE 30268
// InitStreamMode ;
30264: CALL 31403 0 0
// if p3 = 1 then
30268: LD_VAR 0 3
30272: PUSH
30273: LD_INT 1
30275: EQUAL
30276: IFFALSE 30286
// sRocket := true ;
30278: LD_ADDR_EXP 76
30282: PUSH
30283: LD_INT 1
30285: ST_TO_ADDR
// if p3 = 2 then
30286: LD_VAR 0 3
30290: PUSH
30291: LD_INT 2
30293: EQUAL
30294: IFFALSE 30304
// sSpeed := true ;
30296: LD_ADDR_EXP 75
30300: PUSH
30301: LD_INT 1
30303: ST_TO_ADDR
// if p3 = 3 then
30304: LD_VAR 0 3
30308: PUSH
30309: LD_INT 3
30311: EQUAL
30312: IFFALSE 30322
// sEngine := true ;
30314: LD_ADDR_EXP 77
30318: PUSH
30319: LD_INT 1
30321: ST_TO_ADDR
// if p3 = 4 then
30322: LD_VAR 0 3
30326: PUSH
30327: LD_INT 4
30329: EQUAL
30330: IFFALSE 30340
// sSpec := true ;
30332: LD_ADDR_EXP 74
30336: PUSH
30337: LD_INT 1
30339: ST_TO_ADDR
// if p3 = 5 then
30340: LD_VAR 0 3
30344: PUSH
30345: LD_INT 5
30347: EQUAL
30348: IFFALSE 30358
// sLevel := true ;
30350: LD_ADDR_EXP 78
30354: PUSH
30355: LD_INT 1
30357: ST_TO_ADDR
// if p3 = 6 then
30358: LD_VAR 0 3
30362: PUSH
30363: LD_INT 6
30365: EQUAL
30366: IFFALSE 30376
// sArmoury := true ;
30368: LD_ADDR_EXP 79
30372: PUSH
30373: LD_INT 1
30375: ST_TO_ADDR
// if p3 = 7 then
30376: LD_VAR 0 3
30380: PUSH
30381: LD_INT 7
30383: EQUAL
30384: IFFALSE 30394
// sRadar := true ;
30386: LD_ADDR_EXP 80
30390: PUSH
30391: LD_INT 1
30393: ST_TO_ADDR
// if p3 = 8 then
30394: LD_VAR 0 3
30398: PUSH
30399: LD_INT 8
30401: EQUAL
30402: IFFALSE 30412
// sBunker := true ;
30404: LD_ADDR_EXP 81
30408: PUSH
30409: LD_INT 1
30411: ST_TO_ADDR
// if p3 = 9 then
30412: LD_VAR 0 3
30416: PUSH
30417: LD_INT 9
30419: EQUAL
30420: IFFALSE 30430
// sHack := true ;
30422: LD_ADDR_EXP 82
30426: PUSH
30427: LD_INT 1
30429: ST_TO_ADDR
// if p3 = 10 then
30430: LD_VAR 0 3
30434: PUSH
30435: LD_INT 10
30437: EQUAL
30438: IFFALSE 30448
// sFire := true ;
30440: LD_ADDR_EXP 83
30444: PUSH
30445: LD_INT 1
30447: ST_TO_ADDR
// if p3 = 11 then
30448: LD_VAR 0 3
30452: PUSH
30453: LD_INT 11
30455: EQUAL
30456: IFFALSE 30466
// sRefresh := true ;
30458: LD_ADDR_EXP 84
30462: PUSH
30463: LD_INT 1
30465: ST_TO_ADDR
// if p3 = 12 then
30466: LD_VAR 0 3
30470: PUSH
30471: LD_INT 12
30473: EQUAL
30474: IFFALSE 30484
// sExp := true ;
30476: LD_ADDR_EXP 85
30480: PUSH
30481: LD_INT 1
30483: ST_TO_ADDR
// if p3 = 13 then
30484: LD_VAR 0 3
30488: PUSH
30489: LD_INT 13
30491: EQUAL
30492: IFFALSE 30502
// sDepot := true ;
30494: LD_ADDR_EXP 86
30498: PUSH
30499: LD_INT 1
30501: ST_TO_ADDR
// if p3 = 14 then
30502: LD_VAR 0 3
30506: PUSH
30507: LD_INT 14
30509: EQUAL
30510: IFFALSE 30520
// sFlag := true ;
30512: LD_ADDR_EXP 87
30516: PUSH
30517: LD_INT 1
30519: ST_TO_ADDR
// if p3 = 15 then
30520: LD_VAR 0 3
30524: PUSH
30525: LD_INT 15
30527: EQUAL
30528: IFFALSE 30538
// sKamikadze := true ;
30530: LD_ADDR_EXP 95
30534: PUSH
30535: LD_INT 1
30537: ST_TO_ADDR
// if p3 = 16 then
30538: LD_VAR 0 3
30542: PUSH
30543: LD_INT 16
30545: EQUAL
30546: IFFALSE 30556
// sTroll := true ;
30548: LD_ADDR_EXP 96
30552: PUSH
30553: LD_INT 1
30555: ST_TO_ADDR
// if p3 = 17 then
30556: LD_VAR 0 3
30560: PUSH
30561: LD_INT 17
30563: EQUAL
30564: IFFALSE 30574
// sSlow := true ;
30566: LD_ADDR_EXP 97
30570: PUSH
30571: LD_INT 1
30573: ST_TO_ADDR
// if p3 = 18 then
30574: LD_VAR 0 3
30578: PUSH
30579: LD_INT 18
30581: EQUAL
30582: IFFALSE 30592
// sLack := true ;
30584: LD_ADDR_EXP 98
30588: PUSH
30589: LD_INT 1
30591: ST_TO_ADDR
// if p3 = 19 then
30592: LD_VAR 0 3
30596: PUSH
30597: LD_INT 19
30599: EQUAL
30600: IFFALSE 30610
// sTank := true ;
30602: LD_ADDR_EXP 100
30606: PUSH
30607: LD_INT 1
30609: ST_TO_ADDR
// if p3 = 20 then
30610: LD_VAR 0 3
30614: PUSH
30615: LD_INT 20
30617: EQUAL
30618: IFFALSE 30628
// sRemote := true ;
30620: LD_ADDR_EXP 101
30624: PUSH
30625: LD_INT 1
30627: ST_TO_ADDR
// if p3 = 21 then
30628: LD_VAR 0 3
30632: PUSH
30633: LD_INT 21
30635: EQUAL
30636: IFFALSE 30646
// sPowell := true ;
30638: LD_ADDR_EXP 102
30642: PUSH
30643: LD_INT 1
30645: ST_TO_ADDR
// if p3 = 22 then
30646: LD_VAR 0 3
30650: PUSH
30651: LD_INT 22
30653: EQUAL
30654: IFFALSE 30664
// sTeleport := true ;
30656: LD_ADDR_EXP 105
30660: PUSH
30661: LD_INT 1
30663: ST_TO_ADDR
// if p3 = 23 then
30664: LD_VAR 0 3
30668: PUSH
30669: LD_INT 23
30671: EQUAL
30672: IFFALSE 30682
// sOilTower := true ;
30674: LD_ADDR_EXP 107
30678: PUSH
30679: LD_INT 1
30681: ST_TO_ADDR
// if p3 = 24 then
30682: LD_VAR 0 3
30686: PUSH
30687: LD_INT 24
30689: EQUAL
30690: IFFALSE 30700
// sShovel := true ;
30692: LD_ADDR_EXP 108
30696: PUSH
30697: LD_INT 1
30699: ST_TO_ADDR
// if p3 = 25 then
30700: LD_VAR 0 3
30704: PUSH
30705: LD_INT 25
30707: EQUAL
30708: IFFALSE 30718
// sSheik := true ;
30710: LD_ADDR_EXP 109
30714: PUSH
30715: LD_INT 1
30717: ST_TO_ADDR
// if p3 = 26 then
30718: LD_VAR 0 3
30722: PUSH
30723: LD_INT 26
30725: EQUAL
30726: IFFALSE 30736
// sEarthquake := true ;
30728: LD_ADDR_EXP 111
30732: PUSH
30733: LD_INT 1
30735: ST_TO_ADDR
// if p3 = 27 then
30736: LD_VAR 0 3
30740: PUSH
30741: LD_INT 27
30743: EQUAL
30744: IFFALSE 30754
// sAI := true ;
30746: LD_ADDR_EXP 112
30750: PUSH
30751: LD_INT 1
30753: ST_TO_ADDR
// if p3 = 28 then
30754: LD_VAR 0 3
30758: PUSH
30759: LD_INT 28
30761: EQUAL
30762: IFFALSE 30772
// sCargo := true ;
30764: LD_ADDR_EXP 115
30768: PUSH
30769: LD_INT 1
30771: ST_TO_ADDR
// if p3 = 29 then
30772: LD_VAR 0 3
30776: PUSH
30777: LD_INT 29
30779: EQUAL
30780: IFFALSE 30790
// sDLaser := true ;
30782: LD_ADDR_EXP 116
30786: PUSH
30787: LD_INT 1
30789: ST_TO_ADDR
// if p3 = 30 then
30790: LD_VAR 0 3
30794: PUSH
30795: LD_INT 30
30797: EQUAL
30798: IFFALSE 30808
// sExchange := true ;
30800: LD_ADDR_EXP 117
30804: PUSH
30805: LD_INT 1
30807: ST_TO_ADDR
// if p3 = 31 then
30808: LD_VAR 0 3
30812: PUSH
30813: LD_INT 31
30815: EQUAL
30816: IFFALSE 30826
// sFac := true ;
30818: LD_ADDR_EXP 118
30822: PUSH
30823: LD_INT 1
30825: ST_TO_ADDR
// if p3 = 32 then
30826: LD_VAR 0 3
30830: PUSH
30831: LD_INT 32
30833: EQUAL
30834: IFFALSE 30844
// sPower := true ;
30836: LD_ADDR_EXP 119
30840: PUSH
30841: LD_INT 1
30843: ST_TO_ADDR
// if p3 = 33 then
30844: LD_VAR 0 3
30848: PUSH
30849: LD_INT 33
30851: EQUAL
30852: IFFALSE 30862
// sRandom := true ;
30854: LD_ADDR_EXP 120
30858: PUSH
30859: LD_INT 1
30861: ST_TO_ADDR
// if p3 = 34 then
30862: LD_VAR 0 3
30866: PUSH
30867: LD_INT 34
30869: EQUAL
30870: IFFALSE 30880
// sShield := true ;
30872: LD_ADDR_EXP 121
30876: PUSH
30877: LD_INT 1
30879: ST_TO_ADDR
// if p3 = 35 then
30880: LD_VAR 0 3
30884: PUSH
30885: LD_INT 35
30887: EQUAL
30888: IFFALSE 30898
// sTime := true ;
30890: LD_ADDR_EXP 122
30894: PUSH
30895: LD_INT 1
30897: ST_TO_ADDR
// if p3 = 36 then
30898: LD_VAR 0 3
30902: PUSH
30903: LD_INT 36
30905: EQUAL
30906: IFFALSE 30916
// sTools := true ;
30908: LD_ADDR_EXP 123
30912: PUSH
30913: LD_INT 1
30915: ST_TO_ADDR
// if p3 = 101 then
30916: LD_VAR 0 3
30920: PUSH
30921: LD_INT 101
30923: EQUAL
30924: IFFALSE 30934
// sSold := true ;
30926: LD_ADDR_EXP 88
30930: PUSH
30931: LD_INT 1
30933: ST_TO_ADDR
// if p3 = 102 then
30934: LD_VAR 0 3
30938: PUSH
30939: LD_INT 102
30941: EQUAL
30942: IFFALSE 30952
// sDiff := true ;
30944: LD_ADDR_EXP 89
30948: PUSH
30949: LD_INT 1
30951: ST_TO_ADDR
// if p3 = 103 then
30952: LD_VAR 0 3
30956: PUSH
30957: LD_INT 103
30959: EQUAL
30960: IFFALSE 30970
// sFog := true ;
30962: LD_ADDR_EXP 92
30966: PUSH
30967: LD_INT 1
30969: ST_TO_ADDR
// if p3 = 104 then
30970: LD_VAR 0 3
30974: PUSH
30975: LD_INT 104
30977: EQUAL
30978: IFFALSE 30988
// sReset := true ;
30980: LD_ADDR_EXP 93
30984: PUSH
30985: LD_INT 1
30987: ST_TO_ADDR
// if p3 = 105 then
30988: LD_VAR 0 3
30992: PUSH
30993: LD_INT 105
30995: EQUAL
30996: IFFALSE 31006
// sSun := true ;
30998: LD_ADDR_EXP 94
31002: PUSH
31003: LD_INT 1
31005: ST_TO_ADDR
// if p3 = 106 then
31006: LD_VAR 0 3
31010: PUSH
31011: LD_INT 106
31013: EQUAL
31014: IFFALSE 31024
// sTiger := true ;
31016: LD_ADDR_EXP 90
31020: PUSH
31021: LD_INT 1
31023: ST_TO_ADDR
// if p3 = 107 then
31024: LD_VAR 0 3
31028: PUSH
31029: LD_INT 107
31031: EQUAL
31032: IFFALSE 31042
// sBomb := true ;
31034: LD_ADDR_EXP 91
31038: PUSH
31039: LD_INT 1
31041: ST_TO_ADDR
// if p3 = 108 then
31042: LD_VAR 0 3
31046: PUSH
31047: LD_INT 108
31049: EQUAL
31050: IFFALSE 31060
// sWound := true ;
31052: LD_ADDR_EXP 99
31056: PUSH
31057: LD_INT 1
31059: ST_TO_ADDR
// if p3 = 109 then
31060: LD_VAR 0 3
31064: PUSH
31065: LD_INT 109
31067: EQUAL
31068: IFFALSE 31078
// sBetray := true ;
31070: LD_ADDR_EXP 103
31074: PUSH
31075: LD_INT 1
31077: ST_TO_ADDR
// if p3 = 110 then
31078: LD_VAR 0 3
31082: PUSH
31083: LD_INT 110
31085: EQUAL
31086: IFFALSE 31096
// sContamin := true ;
31088: LD_ADDR_EXP 104
31092: PUSH
31093: LD_INT 1
31095: ST_TO_ADDR
// if p3 = 111 then
31096: LD_VAR 0 3
31100: PUSH
31101: LD_INT 111
31103: EQUAL
31104: IFFALSE 31114
// sOil := true ;
31106: LD_ADDR_EXP 106
31110: PUSH
31111: LD_INT 1
31113: ST_TO_ADDR
// if p3 = 112 then
31114: LD_VAR 0 3
31118: PUSH
31119: LD_INT 112
31121: EQUAL
31122: IFFALSE 31132
// sStu := true ;
31124: LD_ADDR_EXP 110
31128: PUSH
31129: LD_INT 1
31131: ST_TO_ADDR
// if p3 = 113 then
31132: LD_VAR 0 3
31136: PUSH
31137: LD_INT 113
31139: EQUAL
31140: IFFALSE 31150
// sBazooka := true ;
31142: LD_ADDR_EXP 113
31146: PUSH
31147: LD_INT 1
31149: ST_TO_ADDR
// if p3 = 114 then
31150: LD_VAR 0 3
31154: PUSH
31155: LD_INT 114
31157: EQUAL
31158: IFFALSE 31168
// sMortar := true ;
31160: LD_ADDR_EXP 114
31164: PUSH
31165: LD_INT 1
31167: ST_TO_ADDR
// if p3 = 115 then
31168: LD_VAR 0 3
31172: PUSH
31173: LD_INT 115
31175: EQUAL
31176: IFFALSE 31186
// sRanger := true ;
31178: LD_ADDR_EXP 124
31182: PUSH
31183: LD_INT 1
31185: ST_TO_ADDR
// if p3 = 116 then
31186: LD_VAR 0 3
31190: PUSH
31191: LD_INT 116
31193: EQUAL
31194: IFFALSE 31204
// sComputer := true ;
31196: LD_ADDR_EXP 125
31200: PUSH
31201: LD_INT 1
31203: ST_TO_ADDR
// if p3 = 117 then
31204: LD_VAR 0 3
31208: PUSH
31209: LD_INT 117
31211: EQUAL
31212: IFFALSE 31222
// s30 := true ;
31214: LD_ADDR_EXP 126
31218: PUSH
31219: LD_INT 1
31221: ST_TO_ADDR
// if p3 = 118 then
31222: LD_VAR 0 3
31226: PUSH
31227: LD_INT 118
31229: EQUAL
31230: IFFALSE 31240
// s60 := true ;
31232: LD_ADDR_EXP 127
31236: PUSH
31237: LD_INT 1
31239: ST_TO_ADDR
// end ; if p2 = stream_mode then
31240: LD_VAR 0 2
31244: PUSH
31245: LD_INT 101
31247: EQUAL
31248: IFFALSE 31376
// begin case p3 of 1 :
31250: LD_VAR 0 3
31254: PUSH
31255: LD_INT 1
31257: DOUBLE
31258: EQUAL
31259: IFTRUE 31263
31261: GO 31270
31263: POP
// hHackUnlimitedResources ; 2 :
31264: CALL 43474 0 0
31268: GO 31376
31270: LD_INT 2
31272: DOUBLE
31273: EQUAL
31274: IFTRUE 31278
31276: GO 31285
31278: POP
// hHackSetLevel10 ; 3 :
31279: CALL 43607 0 0
31283: GO 31376
31285: LD_INT 3
31287: DOUBLE
31288: EQUAL
31289: IFTRUE 31293
31291: GO 31300
31293: POP
// hHackSetLevel10YourUnits ; 4 :
31294: CALL 43692 0 0
31298: GO 31376
31300: LD_INT 4
31302: DOUBLE
31303: EQUAL
31304: IFTRUE 31308
31306: GO 31315
31308: POP
// hHackInvincible ; 5 :
31309: CALL 44140 0 0
31313: GO 31376
31315: LD_INT 5
31317: DOUBLE
31318: EQUAL
31319: IFTRUE 31323
31321: GO 31330
31323: POP
// hHackInvisible ; 6 :
31324: CALL 44251 0 0
31328: GO 31376
31330: LD_INT 6
31332: DOUBLE
31333: EQUAL
31334: IFTRUE 31338
31336: GO 31345
31338: POP
// hHackChangeYourSide ; 7 :
31339: CALL 44308 0 0
31343: GO 31376
31345: LD_INT 7
31347: DOUBLE
31348: EQUAL
31349: IFTRUE 31353
31351: GO 31360
31353: POP
// hHackChangeUnitSide ; 8 :
31354: CALL 44350 0 0
31358: GO 31376
31360: LD_INT 8
31362: DOUBLE
31363: EQUAL
31364: IFTRUE 31368
31366: GO 31375
31368: POP
// hHackFog ; end ;
31369: CALL 44451 0 0
31373: GO 31376
31375: POP
// end ; end ;
31376: LD_VAR 0 7
31380: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
31381: GO 31383
31383: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
31384: LD_STRING initStreamRollete();
31386: PPUSH
31387: CALL_OW 559
// InitStreamMode ;
31391: CALL 31403 0 0
// DefineStreamItems ( false ) ;
31395: LD_INT 0
31397: PPUSH
31398: CALL 31867 0 1
// end ;
31402: END
// function InitStreamMode ; begin
31403: LD_INT 0
31405: PPUSH
// streamModeActive := false ;
31406: LD_ADDR_EXP 71
31410: PUSH
31411: LD_INT 0
31413: ST_TO_ADDR
// normalCounter := 36 ;
31414: LD_ADDR_EXP 72
31418: PUSH
31419: LD_INT 36
31421: ST_TO_ADDR
// hardcoreCounter := 18 ;
31422: LD_ADDR_EXP 73
31426: PUSH
31427: LD_INT 18
31429: ST_TO_ADDR
// sRocket := false ;
31430: LD_ADDR_EXP 76
31434: PUSH
31435: LD_INT 0
31437: ST_TO_ADDR
// sSpeed := false ;
31438: LD_ADDR_EXP 75
31442: PUSH
31443: LD_INT 0
31445: ST_TO_ADDR
// sEngine := false ;
31446: LD_ADDR_EXP 77
31450: PUSH
31451: LD_INT 0
31453: ST_TO_ADDR
// sSpec := false ;
31454: LD_ADDR_EXP 74
31458: PUSH
31459: LD_INT 0
31461: ST_TO_ADDR
// sLevel := false ;
31462: LD_ADDR_EXP 78
31466: PUSH
31467: LD_INT 0
31469: ST_TO_ADDR
// sArmoury := false ;
31470: LD_ADDR_EXP 79
31474: PUSH
31475: LD_INT 0
31477: ST_TO_ADDR
// sRadar := false ;
31478: LD_ADDR_EXP 80
31482: PUSH
31483: LD_INT 0
31485: ST_TO_ADDR
// sBunker := false ;
31486: LD_ADDR_EXP 81
31490: PUSH
31491: LD_INT 0
31493: ST_TO_ADDR
// sHack := false ;
31494: LD_ADDR_EXP 82
31498: PUSH
31499: LD_INT 0
31501: ST_TO_ADDR
// sFire := false ;
31502: LD_ADDR_EXP 83
31506: PUSH
31507: LD_INT 0
31509: ST_TO_ADDR
// sRefresh := false ;
31510: LD_ADDR_EXP 84
31514: PUSH
31515: LD_INT 0
31517: ST_TO_ADDR
// sExp := false ;
31518: LD_ADDR_EXP 85
31522: PUSH
31523: LD_INT 0
31525: ST_TO_ADDR
// sDepot := false ;
31526: LD_ADDR_EXP 86
31530: PUSH
31531: LD_INT 0
31533: ST_TO_ADDR
// sFlag := false ;
31534: LD_ADDR_EXP 87
31538: PUSH
31539: LD_INT 0
31541: ST_TO_ADDR
// sKamikadze := false ;
31542: LD_ADDR_EXP 95
31546: PUSH
31547: LD_INT 0
31549: ST_TO_ADDR
// sTroll := false ;
31550: LD_ADDR_EXP 96
31554: PUSH
31555: LD_INT 0
31557: ST_TO_ADDR
// sSlow := false ;
31558: LD_ADDR_EXP 97
31562: PUSH
31563: LD_INT 0
31565: ST_TO_ADDR
// sLack := false ;
31566: LD_ADDR_EXP 98
31570: PUSH
31571: LD_INT 0
31573: ST_TO_ADDR
// sTank := false ;
31574: LD_ADDR_EXP 100
31578: PUSH
31579: LD_INT 0
31581: ST_TO_ADDR
// sRemote := false ;
31582: LD_ADDR_EXP 101
31586: PUSH
31587: LD_INT 0
31589: ST_TO_ADDR
// sPowell := false ;
31590: LD_ADDR_EXP 102
31594: PUSH
31595: LD_INT 0
31597: ST_TO_ADDR
// sTeleport := false ;
31598: LD_ADDR_EXP 105
31602: PUSH
31603: LD_INT 0
31605: ST_TO_ADDR
// sOilTower := false ;
31606: LD_ADDR_EXP 107
31610: PUSH
31611: LD_INT 0
31613: ST_TO_ADDR
// sShovel := false ;
31614: LD_ADDR_EXP 108
31618: PUSH
31619: LD_INT 0
31621: ST_TO_ADDR
// sSheik := false ;
31622: LD_ADDR_EXP 109
31626: PUSH
31627: LD_INT 0
31629: ST_TO_ADDR
// sEarthquake := false ;
31630: LD_ADDR_EXP 111
31634: PUSH
31635: LD_INT 0
31637: ST_TO_ADDR
// sAI := false ;
31638: LD_ADDR_EXP 112
31642: PUSH
31643: LD_INT 0
31645: ST_TO_ADDR
// sCargo := false ;
31646: LD_ADDR_EXP 115
31650: PUSH
31651: LD_INT 0
31653: ST_TO_ADDR
// sDLaser := false ;
31654: LD_ADDR_EXP 116
31658: PUSH
31659: LD_INT 0
31661: ST_TO_ADDR
// sExchange := false ;
31662: LD_ADDR_EXP 117
31666: PUSH
31667: LD_INT 0
31669: ST_TO_ADDR
// sFac := false ;
31670: LD_ADDR_EXP 118
31674: PUSH
31675: LD_INT 0
31677: ST_TO_ADDR
// sPower := false ;
31678: LD_ADDR_EXP 119
31682: PUSH
31683: LD_INT 0
31685: ST_TO_ADDR
// sRandom := false ;
31686: LD_ADDR_EXP 120
31690: PUSH
31691: LD_INT 0
31693: ST_TO_ADDR
// sShield := false ;
31694: LD_ADDR_EXP 121
31698: PUSH
31699: LD_INT 0
31701: ST_TO_ADDR
// sTime := false ;
31702: LD_ADDR_EXP 122
31706: PUSH
31707: LD_INT 0
31709: ST_TO_ADDR
// sTools := false ;
31710: LD_ADDR_EXP 123
31714: PUSH
31715: LD_INT 0
31717: ST_TO_ADDR
// sSold := false ;
31718: LD_ADDR_EXP 88
31722: PUSH
31723: LD_INT 0
31725: ST_TO_ADDR
// sDiff := false ;
31726: LD_ADDR_EXP 89
31730: PUSH
31731: LD_INT 0
31733: ST_TO_ADDR
// sFog := false ;
31734: LD_ADDR_EXP 92
31738: PUSH
31739: LD_INT 0
31741: ST_TO_ADDR
// sReset := false ;
31742: LD_ADDR_EXP 93
31746: PUSH
31747: LD_INT 0
31749: ST_TO_ADDR
// sSun := false ;
31750: LD_ADDR_EXP 94
31754: PUSH
31755: LD_INT 0
31757: ST_TO_ADDR
// sTiger := false ;
31758: LD_ADDR_EXP 90
31762: PUSH
31763: LD_INT 0
31765: ST_TO_ADDR
// sBomb := false ;
31766: LD_ADDR_EXP 91
31770: PUSH
31771: LD_INT 0
31773: ST_TO_ADDR
// sWound := false ;
31774: LD_ADDR_EXP 99
31778: PUSH
31779: LD_INT 0
31781: ST_TO_ADDR
// sBetray := false ;
31782: LD_ADDR_EXP 103
31786: PUSH
31787: LD_INT 0
31789: ST_TO_ADDR
// sContamin := false ;
31790: LD_ADDR_EXP 104
31794: PUSH
31795: LD_INT 0
31797: ST_TO_ADDR
// sOil := false ;
31798: LD_ADDR_EXP 106
31802: PUSH
31803: LD_INT 0
31805: ST_TO_ADDR
// sStu := false ;
31806: LD_ADDR_EXP 110
31810: PUSH
31811: LD_INT 0
31813: ST_TO_ADDR
// sBazooka := false ;
31814: LD_ADDR_EXP 113
31818: PUSH
31819: LD_INT 0
31821: ST_TO_ADDR
// sMortar := false ;
31822: LD_ADDR_EXP 114
31826: PUSH
31827: LD_INT 0
31829: ST_TO_ADDR
// sRanger := false ;
31830: LD_ADDR_EXP 124
31834: PUSH
31835: LD_INT 0
31837: ST_TO_ADDR
// sComputer := false ;
31838: LD_ADDR_EXP 125
31842: PUSH
31843: LD_INT 0
31845: ST_TO_ADDR
// s30 := false ;
31846: LD_ADDR_EXP 126
31850: PUSH
31851: LD_INT 0
31853: ST_TO_ADDR
// s60 := false ;
31854: LD_ADDR_EXP 127
31858: PUSH
31859: LD_INT 0
31861: ST_TO_ADDR
// end ;
31862: LD_VAR 0 1
31866: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
31867: LD_INT 0
31869: PPUSH
31870: PPUSH
31871: PPUSH
31872: PPUSH
31873: PPUSH
31874: PPUSH
31875: PPUSH
// result := [ ] ;
31876: LD_ADDR_VAR 0 2
31880: PUSH
31881: EMPTY
31882: ST_TO_ADDR
// if campaign_id = 1 then
31883: LD_OWVAR 69
31887: PUSH
31888: LD_INT 1
31890: EQUAL
31891: IFFALSE 35057
// begin case mission_number of 1 :
31893: LD_OWVAR 70
31897: PUSH
31898: LD_INT 1
31900: DOUBLE
31901: EQUAL
31902: IFTRUE 31906
31904: GO 31982
31906: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
31907: LD_ADDR_VAR 0 2
31911: PUSH
31912: LD_INT 2
31914: PUSH
31915: LD_INT 4
31917: PUSH
31918: LD_INT 11
31920: PUSH
31921: LD_INT 12
31923: PUSH
31924: LD_INT 15
31926: PUSH
31927: LD_INT 16
31929: PUSH
31930: LD_INT 22
31932: PUSH
31933: LD_INT 23
31935: PUSH
31936: LD_INT 26
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 101
31952: PUSH
31953: LD_INT 102
31955: PUSH
31956: LD_INT 106
31958: PUSH
31959: LD_INT 116
31961: PUSH
31962: LD_INT 117
31964: PUSH
31965: LD_INT 118
31967: PUSH
31968: EMPTY
31969: LIST
31970: LIST
31971: LIST
31972: LIST
31973: LIST
31974: LIST
31975: PUSH
31976: EMPTY
31977: LIST
31978: LIST
31979: ST_TO_ADDR
31980: GO 35055
31982: LD_INT 2
31984: DOUBLE
31985: EQUAL
31986: IFTRUE 31990
31988: GO 32074
31990: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
31991: LD_ADDR_VAR 0 2
31995: PUSH
31996: LD_INT 2
31998: PUSH
31999: LD_INT 4
32001: PUSH
32002: LD_INT 11
32004: PUSH
32005: LD_INT 12
32007: PUSH
32008: LD_INT 15
32010: PUSH
32011: LD_INT 16
32013: PUSH
32014: LD_INT 22
32016: PUSH
32017: LD_INT 23
32019: PUSH
32020: LD_INT 26
32022: PUSH
32023: EMPTY
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: PUSH
32034: LD_INT 101
32036: PUSH
32037: LD_INT 102
32039: PUSH
32040: LD_INT 105
32042: PUSH
32043: LD_INT 106
32045: PUSH
32046: LD_INT 108
32048: PUSH
32049: LD_INT 116
32051: PUSH
32052: LD_INT 117
32054: PUSH
32055: LD_INT 118
32057: PUSH
32058: EMPTY
32059: LIST
32060: LIST
32061: LIST
32062: LIST
32063: LIST
32064: LIST
32065: LIST
32066: LIST
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: ST_TO_ADDR
32072: GO 35055
32074: LD_INT 3
32076: DOUBLE
32077: EQUAL
32078: IFTRUE 32082
32080: GO 32170
32082: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
32083: LD_ADDR_VAR 0 2
32087: PUSH
32088: LD_INT 2
32090: PUSH
32091: LD_INT 4
32093: PUSH
32094: LD_INT 5
32096: PUSH
32097: LD_INT 11
32099: PUSH
32100: LD_INT 12
32102: PUSH
32103: LD_INT 15
32105: PUSH
32106: LD_INT 16
32108: PUSH
32109: LD_INT 22
32111: PUSH
32112: LD_INT 26
32114: PUSH
32115: LD_INT 36
32117: PUSH
32118: EMPTY
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 101
32132: PUSH
32133: LD_INT 102
32135: PUSH
32136: LD_INT 105
32138: PUSH
32139: LD_INT 106
32141: PUSH
32142: LD_INT 108
32144: PUSH
32145: LD_INT 116
32147: PUSH
32148: LD_INT 117
32150: PUSH
32151: LD_INT 118
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: PUSH
32164: EMPTY
32165: LIST
32166: LIST
32167: ST_TO_ADDR
32168: GO 35055
32170: LD_INT 4
32172: DOUBLE
32173: EQUAL
32174: IFTRUE 32178
32176: GO 32274
32178: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
32179: LD_ADDR_VAR 0 2
32183: PUSH
32184: LD_INT 2
32186: PUSH
32187: LD_INT 4
32189: PUSH
32190: LD_INT 5
32192: PUSH
32193: LD_INT 8
32195: PUSH
32196: LD_INT 11
32198: PUSH
32199: LD_INT 12
32201: PUSH
32202: LD_INT 15
32204: PUSH
32205: LD_INT 16
32207: PUSH
32208: LD_INT 22
32210: PUSH
32211: LD_INT 23
32213: PUSH
32214: LD_INT 26
32216: PUSH
32217: LD_INT 36
32219: PUSH
32220: EMPTY
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: PUSH
32234: LD_INT 101
32236: PUSH
32237: LD_INT 102
32239: PUSH
32240: LD_INT 105
32242: PUSH
32243: LD_INT 106
32245: PUSH
32246: LD_INT 108
32248: PUSH
32249: LD_INT 116
32251: PUSH
32252: LD_INT 117
32254: PUSH
32255: LD_INT 118
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: LIST
32262: LIST
32263: LIST
32264: LIST
32265: LIST
32266: LIST
32267: PUSH
32268: EMPTY
32269: LIST
32270: LIST
32271: ST_TO_ADDR
32272: GO 35055
32274: LD_INT 5
32276: DOUBLE
32277: EQUAL
32278: IFTRUE 32282
32280: GO 32394
32282: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
32283: LD_ADDR_VAR 0 2
32287: PUSH
32288: LD_INT 2
32290: PUSH
32291: LD_INT 4
32293: PUSH
32294: LD_INT 5
32296: PUSH
32297: LD_INT 6
32299: PUSH
32300: LD_INT 8
32302: PUSH
32303: LD_INT 11
32305: PUSH
32306: LD_INT 12
32308: PUSH
32309: LD_INT 15
32311: PUSH
32312: LD_INT 16
32314: PUSH
32315: LD_INT 22
32317: PUSH
32318: LD_INT 23
32320: PUSH
32321: LD_INT 25
32323: PUSH
32324: LD_INT 26
32326: PUSH
32327: LD_INT 36
32329: PUSH
32330: EMPTY
32331: LIST
32332: LIST
32333: LIST
32334: LIST
32335: LIST
32336: LIST
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 101
32348: PUSH
32349: LD_INT 102
32351: PUSH
32352: LD_INT 105
32354: PUSH
32355: LD_INT 106
32357: PUSH
32358: LD_INT 108
32360: PUSH
32361: LD_INT 109
32363: PUSH
32364: LD_INT 112
32366: PUSH
32367: LD_INT 116
32369: PUSH
32370: LD_INT 117
32372: PUSH
32373: LD_INT 118
32375: PUSH
32376: EMPTY
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: ST_TO_ADDR
32392: GO 35055
32394: LD_INT 6
32396: DOUBLE
32397: EQUAL
32398: IFTRUE 32402
32400: GO 32534
32402: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32403: LD_ADDR_VAR 0 2
32407: PUSH
32408: LD_INT 2
32410: PUSH
32411: LD_INT 4
32413: PUSH
32414: LD_INT 5
32416: PUSH
32417: LD_INT 6
32419: PUSH
32420: LD_INT 8
32422: PUSH
32423: LD_INT 11
32425: PUSH
32426: LD_INT 12
32428: PUSH
32429: LD_INT 15
32431: PUSH
32432: LD_INT 16
32434: PUSH
32435: LD_INT 20
32437: PUSH
32438: LD_INT 21
32440: PUSH
32441: LD_INT 22
32443: PUSH
32444: LD_INT 23
32446: PUSH
32447: LD_INT 25
32449: PUSH
32450: LD_INT 26
32452: PUSH
32453: LD_INT 30
32455: PUSH
32456: LD_INT 31
32458: PUSH
32459: LD_INT 32
32461: PUSH
32462: LD_INT 36
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: PUSH
32486: LD_INT 101
32488: PUSH
32489: LD_INT 102
32491: PUSH
32492: LD_INT 105
32494: PUSH
32495: LD_INT 106
32497: PUSH
32498: LD_INT 108
32500: PUSH
32501: LD_INT 109
32503: PUSH
32504: LD_INT 112
32506: PUSH
32507: LD_INT 116
32509: PUSH
32510: LD_INT 117
32512: PUSH
32513: LD_INT 118
32515: PUSH
32516: EMPTY
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: PUSH
32528: EMPTY
32529: LIST
32530: LIST
32531: ST_TO_ADDR
32532: GO 35055
32534: LD_INT 7
32536: DOUBLE
32537: EQUAL
32538: IFTRUE 32542
32540: GO 32654
32542: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32543: LD_ADDR_VAR 0 2
32547: PUSH
32548: LD_INT 2
32550: PUSH
32551: LD_INT 4
32553: PUSH
32554: LD_INT 5
32556: PUSH
32557: LD_INT 7
32559: PUSH
32560: LD_INT 11
32562: PUSH
32563: LD_INT 12
32565: PUSH
32566: LD_INT 15
32568: PUSH
32569: LD_INT 16
32571: PUSH
32572: LD_INT 20
32574: PUSH
32575: LD_INT 21
32577: PUSH
32578: LD_INT 22
32580: PUSH
32581: LD_INT 23
32583: PUSH
32584: LD_INT 25
32586: PUSH
32587: LD_INT 26
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: LIST
32594: LIST
32595: LIST
32596: LIST
32597: LIST
32598: LIST
32599: LIST
32600: LIST
32601: LIST
32602: LIST
32603: LIST
32604: LIST
32605: PUSH
32606: LD_INT 101
32608: PUSH
32609: LD_INT 102
32611: PUSH
32612: LD_INT 103
32614: PUSH
32615: LD_INT 105
32617: PUSH
32618: LD_INT 106
32620: PUSH
32621: LD_INT 108
32623: PUSH
32624: LD_INT 112
32626: PUSH
32627: LD_INT 116
32629: PUSH
32630: LD_INT 117
32632: PUSH
32633: LD_INT 118
32635: PUSH
32636: EMPTY
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: ST_TO_ADDR
32652: GO 35055
32654: LD_INT 8
32656: DOUBLE
32657: EQUAL
32658: IFTRUE 32662
32660: GO 32802
32662: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32663: LD_ADDR_VAR 0 2
32667: PUSH
32668: LD_INT 2
32670: PUSH
32671: LD_INT 4
32673: PUSH
32674: LD_INT 5
32676: PUSH
32677: LD_INT 6
32679: PUSH
32680: LD_INT 7
32682: PUSH
32683: LD_INT 8
32685: PUSH
32686: LD_INT 11
32688: PUSH
32689: LD_INT 12
32691: PUSH
32692: LD_INT 15
32694: PUSH
32695: LD_INT 16
32697: PUSH
32698: LD_INT 20
32700: PUSH
32701: LD_INT 21
32703: PUSH
32704: LD_INT 22
32706: PUSH
32707: LD_INT 23
32709: PUSH
32710: LD_INT 25
32712: PUSH
32713: LD_INT 26
32715: PUSH
32716: LD_INT 30
32718: PUSH
32719: LD_INT 31
32721: PUSH
32722: LD_INT 32
32724: PUSH
32725: LD_INT 36
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: LIST
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: LIST
32746: LIST
32747: LIST
32748: LIST
32749: PUSH
32750: LD_INT 101
32752: PUSH
32753: LD_INT 102
32755: PUSH
32756: LD_INT 103
32758: PUSH
32759: LD_INT 105
32761: PUSH
32762: LD_INT 106
32764: PUSH
32765: LD_INT 108
32767: PUSH
32768: LD_INT 109
32770: PUSH
32771: LD_INT 112
32773: PUSH
32774: LD_INT 116
32776: PUSH
32777: LD_INT 117
32779: PUSH
32780: LD_INT 118
32782: PUSH
32783: EMPTY
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: PUSH
32796: EMPTY
32797: LIST
32798: LIST
32799: ST_TO_ADDR
32800: GO 35055
32802: LD_INT 9
32804: DOUBLE
32805: EQUAL
32806: IFTRUE 32810
32808: GO 32958
32810: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32811: LD_ADDR_VAR 0 2
32815: PUSH
32816: LD_INT 2
32818: PUSH
32819: LD_INT 4
32821: PUSH
32822: LD_INT 5
32824: PUSH
32825: LD_INT 6
32827: PUSH
32828: LD_INT 7
32830: PUSH
32831: LD_INT 8
32833: PUSH
32834: LD_INT 11
32836: PUSH
32837: LD_INT 12
32839: PUSH
32840: LD_INT 15
32842: PUSH
32843: LD_INT 16
32845: PUSH
32846: LD_INT 20
32848: PUSH
32849: LD_INT 21
32851: PUSH
32852: LD_INT 22
32854: PUSH
32855: LD_INT 23
32857: PUSH
32858: LD_INT 25
32860: PUSH
32861: LD_INT 26
32863: PUSH
32864: LD_INT 28
32866: PUSH
32867: LD_INT 30
32869: PUSH
32870: LD_INT 31
32872: PUSH
32873: LD_INT 32
32875: PUSH
32876: LD_INT 36
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: PUSH
32902: LD_INT 101
32904: PUSH
32905: LD_INT 102
32907: PUSH
32908: LD_INT 103
32910: PUSH
32911: LD_INT 105
32913: PUSH
32914: LD_INT 106
32916: PUSH
32917: LD_INT 108
32919: PUSH
32920: LD_INT 109
32922: PUSH
32923: LD_INT 112
32925: PUSH
32926: LD_INT 114
32928: PUSH
32929: LD_INT 116
32931: PUSH
32932: LD_INT 117
32934: PUSH
32935: LD_INT 118
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: LIST
32942: LIST
32943: LIST
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: ST_TO_ADDR
32956: GO 35055
32958: LD_INT 10
32960: DOUBLE
32961: EQUAL
32962: IFTRUE 32966
32964: GO 33162
32966: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
32967: LD_ADDR_VAR 0 2
32971: PUSH
32972: LD_INT 2
32974: PUSH
32975: LD_INT 4
32977: PUSH
32978: LD_INT 5
32980: PUSH
32981: LD_INT 6
32983: PUSH
32984: LD_INT 7
32986: PUSH
32987: LD_INT 8
32989: PUSH
32990: LD_INT 9
32992: PUSH
32993: LD_INT 10
32995: PUSH
32996: LD_INT 11
32998: PUSH
32999: LD_INT 12
33001: PUSH
33002: LD_INT 13
33004: PUSH
33005: LD_INT 14
33007: PUSH
33008: LD_INT 15
33010: PUSH
33011: LD_INT 16
33013: PUSH
33014: LD_INT 17
33016: PUSH
33017: LD_INT 18
33019: PUSH
33020: LD_INT 19
33022: PUSH
33023: LD_INT 20
33025: PUSH
33026: LD_INT 21
33028: PUSH
33029: LD_INT 22
33031: PUSH
33032: LD_INT 23
33034: PUSH
33035: LD_INT 24
33037: PUSH
33038: LD_INT 25
33040: PUSH
33041: LD_INT 26
33043: PUSH
33044: LD_INT 28
33046: PUSH
33047: LD_INT 30
33049: PUSH
33050: LD_INT 31
33052: PUSH
33053: LD_INT 32
33055: PUSH
33056: LD_INT 36
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 101
33092: PUSH
33093: LD_INT 102
33095: PUSH
33096: LD_INT 103
33098: PUSH
33099: LD_INT 104
33101: PUSH
33102: LD_INT 105
33104: PUSH
33105: LD_INT 106
33107: PUSH
33108: LD_INT 107
33110: PUSH
33111: LD_INT 108
33113: PUSH
33114: LD_INT 109
33116: PUSH
33117: LD_INT 110
33119: PUSH
33120: LD_INT 111
33122: PUSH
33123: LD_INT 112
33125: PUSH
33126: LD_INT 114
33128: PUSH
33129: LD_INT 116
33131: PUSH
33132: LD_INT 117
33134: PUSH
33135: LD_INT 118
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: LIST
33142: LIST
33143: LIST
33144: LIST
33145: LIST
33146: LIST
33147: LIST
33148: LIST
33149: LIST
33150: LIST
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: PUSH
33156: EMPTY
33157: LIST
33158: LIST
33159: ST_TO_ADDR
33160: GO 35055
33162: LD_INT 11
33164: DOUBLE
33165: EQUAL
33166: IFTRUE 33170
33168: GO 33374
33170: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
33171: LD_ADDR_VAR 0 2
33175: PUSH
33176: LD_INT 2
33178: PUSH
33179: LD_INT 3
33181: PUSH
33182: LD_INT 4
33184: PUSH
33185: LD_INT 5
33187: PUSH
33188: LD_INT 6
33190: PUSH
33191: LD_INT 7
33193: PUSH
33194: LD_INT 8
33196: PUSH
33197: LD_INT 9
33199: PUSH
33200: LD_INT 10
33202: PUSH
33203: LD_INT 11
33205: PUSH
33206: LD_INT 12
33208: PUSH
33209: LD_INT 13
33211: PUSH
33212: LD_INT 14
33214: PUSH
33215: LD_INT 15
33217: PUSH
33218: LD_INT 16
33220: PUSH
33221: LD_INT 17
33223: PUSH
33224: LD_INT 18
33226: PUSH
33227: LD_INT 19
33229: PUSH
33230: LD_INT 20
33232: PUSH
33233: LD_INT 21
33235: PUSH
33236: LD_INT 22
33238: PUSH
33239: LD_INT 23
33241: PUSH
33242: LD_INT 24
33244: PUSH
33245: LD_INT 25
33247: PUSH
33248: LD_INT 26
33250: PUSH
33251: LD_INT 28
33253: PUSH
33254: LD_INT 30
33256: PUSH
33257: LD_INT 31
33259: PUSH
33260: LD_INT 32
33262: PUSH
33263: LD_INT 34
33265: PUSH
33266: LD_INT 36
33268: PUSH
33269: EMPTY
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: LIST
33284: LIST
33285: LIST
33286: LIST
33287: LIST
33288: LIST
33289: LIST
33290: LIST
33291: LIST
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: PUSH
33302: LD_INT 101
33304: PUSH
33305: LD_INT 102
33307: PUSH
33308: LD_INT 103
33310: PUSH
33311: LD_INT 104
33313: PUSH
33314: LD_INT 105
33316: PUSH
33317: LD_INT 106
33319: PUSH
33320: LD_INT 107
33322: PUSH
33323: LD_INT 108
33325: PUSH
33326: LD_INT 109
33328: PUSH
33329: LD_INT 110
33331: PUSH
33332: LD_INT 111
33334: PUSH
33335: LD_INT 112
33337: PUSH
33338: LD_INT 114
33340: PUSH
33341: LD_INT 116
33343: PUSH
33344: LD_INT 117
33346: PUSH
33347: LD_INT 118
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: LIST
33355: LIST
33356: LIST
33357: LIST
33358: LIST
33359: LIST
33360: LIST
33361: LIST
33362: LIST
33363: LIST
33364: LIST
33365: LIST
33366: LIST
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: ST_TO_ADDR
33372: GO 35055
33374: LD_INT 12
33376: DOUBLE
33377: EQUAL
33378: IFTRUE 33382
33380: GO 33602
33382: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33383: LD_ADDR_VAR 0 2
33387: PUSH
33388: LD_INT 1
33390: PUSH
33391: LD_INT 2
33393: PUSH
33394: LD_INT 3
33396: PUSH
33397: LD_INT 4
33399: PUSH
33400: LD_INT 5
33402: PUSH
33403: LD_INT 6
33405: PUSH
33406: LD_INT 7
33408: PUSH
33409: LD_INT 8
33411: PUSH
33412: LD_INT 9
33414: PUSH
33415: LD_INT 10
33417: PUSH
33418: LD_INT 11
33420: PUSH
33421: LD_INT 12
33423: PUSH
33424: LD_INT 13
33426: PUSH
33427: LD_INT 14
33429: PUSH
33430: LD_INT 15
33432: PUSH
33433: LD_INT 16
33435: PUSH
33436: LD_INT 17
33438: PUSH
33439: LD_INT 18
33441: PUSH
33442: LD_INT 19
33444: PUSH
33445: LD_INT 20
33447: PUSH
33448: LD_INT 21
33450: PUSH
33451: LD_INT 22
33453: PUSH
33454: LD_INT 23
33456: PUSH
33457: LD_INT 24
33459: PUSH
33460: LD_INT 25
33462: PUSH
33463: LD_INT 26
33465: PUSH
33466: LD_INT 27
33468: PUSH
33469: LD_INT 28
33471: PUSH
33472: LD_INT 30
33474: PUSH
33475: LD_INT 31
33477: PUSH
33478: LD_INT 32
33480: PUSH
33481: LD_INT 33
33483: PUSH
33484: LD_INT 34
33486: PUSH
33487: LD_INT 36
33489: PUSH
33490: EMPTY
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: PUSH
33526: LD_INT 101
33528: PUSH
33529: LD_INT 102
33531: PUSH
33532: LD_INT 103
33534: PUSH
33535: LD_INT 104
33537: PUSH
33538: LD_INT 105
33540: PUSH
33541: LD_INT 106
33543: PUSH
33544: LD_INT 107
33546: PUSH
33547: LD_INT 108
33549: PUSH
33550: LD_INT 109
33552: PUSH
33553: LD_INT 110
33555: PUSH
33556: LD_INT 111
33558: PUSH
33559: LD_INT 112
33561: PUSH
33562: LD_INT 113
33564: PUSH
33565: LD_INT 114
33567: PUSH
33568: LD_INT 116
33570: PUSH
33571: LD_INT 117
33573: PUSH
33574: LD_INT 118
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: LIST
33581: LIST
33582: LIST
33583: LIST
33584: LIST
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: PUSH
33596: EMPTY
33597: LIST
33598: LIST
33599: ST_TO_ADDR
33600: GO 35055
33602: LD_INT 13
33604: DOUBLE
33605: EQUAL
33606: IFTRUE 33610
33608: GO 33818
33610: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33611: LD_ADDR_VAR 0 2
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 2
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: LD_INT 4
33627: PUSH
33628: LD_INT 5
33630: PUSH
33631: LD_INT 8
33633: PUSH
33634: LD_INT 9
33636: PUSH
33637: LD_INT 10
33639: PUSH
33640: LD_INT 11
33642: PUSH
33643: LD_INT 12
33645: PUSH
33646: LD_INT 14
33648: PUSH
33649: LD_INT 15
33651: PUSH
33652: LD_INT 16
33654: PUSH
33655: LD_INT 17
33657: PUSH
33658: LD_INT 18
33660: PUSH
33661: LD_INT 19
33663: PUSH
33664: LD_INT 20
33666: PUSH
33667: LD_INT 21
33669: PUSH
33670: LD_INT 22
33672: PUSH
33673: LD_INT 23
33675: PUSH
33676: LD_INT 24
33678: PUSH
33679: LD_INT 25
33681: PUSH
33682: LD_INT 26
33684: PUSH
33685: LD_INT 27
33687: PUSH
33688: LD_INT 28
33690: PUSH
33691: LD_INT 30
33693: PUSH
33694: LD_INT 31
33696: PUSH
33697: LD_INT 32
33699: PUSH
33700: LD_INT 33
33702: PUSH
33703: LD_INT 34
33705: PUSH
33706: LD_INT 36
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: PUSH
33742: LD_INT 101
33744: PUSH
33745: LD_INT 102
33747: PUSH
33748: LD_INT 103
33750: PUSH
33751: LD_INT 104
33753: PUSH
33754: LD_INT 105
33756: PUSH
33757: LD_INT 106
33759: PUSH
33760: LD_INT 107
33762: PUSH
33763: LD_INT 108
33765: PUSH
33766: LD_INT 109
33768: PUSH
33769: LD_INT 110
33771: PUSH
33772: LD_INT 111
33774: PUSH
33775: LD_INT 112
33777: PUSH
33778: LD_INT 113
33780: PUSH
33781: LD_INT 114
33783: PUSH
33784: LD_INT 116
33786: PUSH
33787: LD_INT 117
33789: PUSH
33790: LD_INT 118
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: PUSH
33812: EMPTY
33813: LIST
33814: LIST
33815: ST_TO_ADDR
33816: GO 35055
33818: LD_INT 14
33820: DOUBLE
33821: EQUAL
33822: IFTRUE 33826
33824: GO 34050
33826: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
33827: LD_ADDR_VAR 0 2
33831: PUSH
33832: LD_INT 1
33834: PUSH
33835: LD_INT 2
33837: PUSH
33838: LD_INT 3
33840: PUSH
33841: LD_INT 4
33843: PUSH
33844: LD_INT 5
33846: PUSH
33847: LD_INT 6
33849: PUSH
33850: LD_INT 7
33852: PUSH
33853: LD_INT 8
33855: PUSH
33856: LD_INT 9
33858: PUSH
33859: LD_INT 10
33861: PUSH
33862: LD_INT 11
33864: PUSH
33865: LD_INT 12
33867: PUSH
33868: LD_INT 13
33870: PUSH
33871: LD_INT 14
33873: PUSH
33874: LD_INT 15
33876: PUSH
33877: LD_INT 16
33879: PUSH
33880: LD_INT 17
33882: PUSH
33883: LD_INT 18
33885: PUSH
33886: LD_INT 19
33888: PUSH
33889: LD_INT 20
33891: PUSH
33892: LD_INT 21
33894: PUSH
33895: LD_INT 22
33897: PUSH
33898: LD_INT 23
33900: PUSH
33901: LD_INT 24
33903: PUSH
33904: LD_INT 25
33906: PUSH
33907: LD_INT 26
33909: PUSH
33910: LD_INT 27
33912: PUSH
33913: LD_INT 28
33915: PUSH
33916: LD_INT 29
33918: PUSH
33919: LD_INT 30
33921: PUSH
33922: LD_INT 31
33924: PUSH
33925: LD_INT 32
33927: PUSH
33928: LD_INT 33
33930: PUSH
33931: LD_INT 34
33933: PUSH
33934: LD_INT 36
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: PUSH
33974: LD_INT 101
33976: PUSH
33977: LD_INT 102
33979: PUSH
33980: LD_INT 103
33982: PUSH
33983: LD_INT 104
33985: PUSH
33986: LD_INT 105
33988: PUSH
33989: LD_INT 106
33991: PUSH
33992: LD_INT 107
33994: PUSH
33995: LD_INT 108
33997: PUSH
33998: LD_INT 109
34000: PUSH
34001: LD_INT 110
34003: PUSH
34004: LD_INT 111
34006: PUSH
34007: LD_INT 112
34009: PUSH
34010: LD_INT 113
34012: PUSH
34013: LD_INT 114
34015: PUSH
34016: LD_INT 116
34018: PUSH
34019: LD_INT 117
34021: PUSH
34022: LD_INT 118
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: PUSH
34044: EMPTY
34045: LIST
34046: LIST
34047: ST_TO_ADDR
34048: GO 35055
34050: LD_INT 15
34052: DOUBLE
34053: EQUAL
34054: IFTRUE 34058
34056: GO 34282
34058: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
34059: LD_ADDR_VAR 0 2
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: LD_INT 2
34069: PUSH
34070: LD_INT 3
34072: PUSH
34073: LD_INT 4
34075: PUSH
34076: LD_INT 5
34078: PUSH
34079: LD_INT 6
34081: PUSH
34082: LD_INT 7
34084: PUSH
34085: LD_INT 8
34087: PUSH
34088: LD_INT 9
34090: PUSH
34091: LD_INT 10
34093: PUSH
34094: LD_INT 11
34096: PUSH
34097: LD_INT 12
34099: PUSH
34100: LD_INT 13
34102: PUSH
34103: LD_INT 14
34105: PUSH
34106: LD_INT 15
34108: PUSH
34109: LD_INT 16
34111: PUSH
34112: LD_INT 17
34114: PUSH
34115: LD_INT 18
34117: PUSH
34118: LD_INT 19
34120: PUSH
34121: LD_INT 20
34123: PUSH
34124: LD_INT 21
34126: PUSH
34127: LD_INT 22
34129: PUSH
34130: LD_INT 23
34132: PUSH
34133: LD_INT 24
34135: PUSH
34136: LD_INT 25
34138: PUSH
34139: LD_INT 26
34141: PUSH
34142: LD_INT 27
34144: PUSH
34145: LD_INT 28
34147: PUSH
34148: LD_INT 29
34150: PUSH
34151: LD_INT 30
34153: PUSH
34154: LD_INT 31
34156: PUSH
34157: LD_INT 32
34159: PUSH
34160: LD_INT 33
34162: PUSH
34163: LD_INT 34
34165: PUSH
34166: LD_INT 36
34168: PUSH
34169: EMPTY
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: PUSH
34206: LD_INT 101
34208: PUSH
34209: LD_INT 102
34211: PUSH
34212: LD_INT 103
34214: PUSH
34215: LD_INT 104
34217: PUSH
34218: LD_INT 105
34220: PUSH
34221: LD_INT 106
34223: PUSH
34224: LD_INT 107
34226: PUSH
34227: LD_INT 108
34229: PUSH
34230: LD_INT 109
34232: PUSH
34233: LD_INT 110
34235: PUSH
34236: LD_INT 111
34238: PUSH
34239: LD_INT 112
34241: PUSH
34242: LD_INT 113
34244: PUSH
34245: LD_INT 114
34247: PUSH
34248: LD_INT 116
34250: PUSH
34251: LD_INT 117
34253: PUSH
34254: LD_INT 118
34256: PUSH
34257: EMPTY
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: LIST
34273: LIST
34274: LIST
34275: PUSH
34276: EMPTY
34277: LIST
34278: LIST
34279: ST_TO_ADDR
34280: GO 35055
34282: LD_INT 16
34284: DOUBLE
34285: EQUAL
34286: IFTRUE 34290
34288: GO 34426
34290: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
34291: LD_ADDR_VAR 0 2
34295: PUSH
34296: LD_INT 2
34298: PUSH
34299: LD_INT 4
34301: PUSH
34302: LD_INT 5
34304: PUSH
34305: LD_INT 7
34307: PUSH
34308: LD_INT 11
34310: PUSH
34311: LD_INT 12
34313: PUSH
34314: LD_INT 15
34316: PUSH
34317: LD_INT 16
34319: PUSH
34320: LD_INT 20
34322: PUSH
34323: LD_INT 21
34325: PUSH
34326: LD_INT 22
34328: PUSH
34329: LD_INT 23
34331: PUSH
34332: LD_INT 25
34334: PUSH
34335: LD_INT 26
34337: PUSH
34338: LD_INT 30
34340: PUSH
34341: LD_INT 31
34343: PUSH
34344: LD_INT 32
34346: PUSH
34347: LD_INT 33
34349: PUSH
34350: LD_INT 34
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: PUSH
34374: LD_INT 101
34376: PUSH
34377: LD_INT 102
34379: PUSH
34380: LD_INT 103
34382: PUSH
34383: LD_INT 106
34385: PUSH
34386: LD_INT 108
34388: PUSH
34389: LD_INT 112
34391: PUSH
34392: LD_INT 113
34394: PUSH
34395: LD_INT 114
34397: PUSH
34398: LD_INT 116
34400: PUSH
34401: LD_INT 117
34403: PUSH
34404: LD_INT 118
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: PUSH
34420: EMPTY
34421: LIST
34422: LIST
34423: ST_TO_ADDR
34424: GO 35055
34426: LD_INT 17
34428: DOUBLE
34429: EQUAL
34430: IFTRUE 34434
34432: GO 34658
34434: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34435: LD_ADDR_VAR 0 2
34439: PUSH
34440: LD_INT 1
34442: PUSH
34443: LD_INT 2
34445: PUSH
34446: LD_INT 3
34448: PUSH
34449: LD_INT 4
34451: PUSH
34452: LD_INT 5
34454: PUSH
34455: LD_INT 6
34457: PUSH
34458: LD_INT 7
34460: PUSH
34461: LD_INT 8
34463: PUSH
34464: LD_INT 9
34466: PUSH
34467: LD_INT 10
34469: PUSH
34470: LD_INT 11
34472: PUSH
34473: LD_INT 12
34475: PUSH
34476: LD_INT 13
34478: PUSH
34479: LD_INT 14
34481: PUSH
34482: LD_INT 15
34484: PUSH
34485: LD_INT 16
34487: PUSH
34488: LD_INT 17
34490: PUSH
34491: LD_INT 18
34493: PUSH
34494: LD_INT 19
34496: PUSH
34497: LD_INT 20
34499: PUSH
34500: LD_INT 21
34502: PUSH
34503: LD_INT 22
34505: PUSH
34506: LD_INT 23
34508: PUSH
34509: LD_INT 24
34511: PUSH
34512: LD_INT 25
34514: PUSH
34515: LD_INT 26
34517: PUSH
34518: LD_INT 27
34520: PUSH
34521: LD_INT 28
34523: PUSH
34524: LD_INT 29
34526: PUSH
34527: LD_INT 30
34529: PUSH
34530: LD_INT 31
34532: PUSH
34533: LD_INT 32
34535: PUSH
34536: LD_INT 33
34538: PUSH
34539: LD_INT 34
34541: PUSH
34542: LD_INT 36
34544: PUSH
34545: EMPTY
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: PUSH
34582: LD_INT 101
34584: PUSH
34585: LD_INT 102
34587: PUSH
34588: LD_INT 103
34590: PUSH
34591: LD_INT 104
34593: PUSH
34594: LD_INT 105
34596: PUSH
34597: LD_INT 106
34599: PUSH
34600: LD_INT 107
34602: PUSH
34603: LD_INT 108
34605: PUSH
34606: LD_INT 109
34608: PUSH
34609: LD_INT 110
34611: PUSH
34612: LD_INT 111
34614: PUSH
34615: LD_INT 112
34617: PUSH
34618: LD_INT 113
34620: PUSH
34621: LD_INT 114
34623: PUSH
34624: LD_INT 116
34626: PUSH
34627: LD_INT 117
34629: PUSH
34630: LD_INT 118
34632: PUSH
34633: EMPTY
34634: LIST
34635: LIST
34636: LIST
34637: LIST
34638: LIST
34639: LIST
34640: LIST
34641: LIST
34642: LIST
34643: LIST
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: PUSH
34652: EMPTY
34653: LIST
34654: LIST
34655: ST_TO_ADDR
34656: GO 35055
34658: LD_INT 18
34660: DOUBLE
34661: EQUAL
34662: IFTRUE 34666
34664: GO 34814
34666: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34667: LD_ADDR_VAR 0 2
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: LD_INT 4
34677: PUSH
34678: LD_INT 5
34680: PUSH
34681: LD_INT 7
34683: PUSH
34684: LD_INT 11
34686: PUSH
34687: LD_INT 12
34689: PUSH
34690: LD_INT 15
34692: PUSH
34693: LD_INT 16
34695: PUSH
34696: LD_INT 20
34698: PUSH
34699: LD_INT 21
34701: PUSH
34702: LD_INT 22
34704: PUSH
34705: LD_INT 23
34707: PUSH
34708: LD_INT 25
34710: PUSH
34711: LD_INT 26
34713: PUSH
34714: LD_INT 30
34716: PUSH
34717: LD_INT 31
34719: PUSH
34720: LD_INT 32
34722: PUSH
34723: LD_INT 33
34725: PUSH
34726: LD_INT 34
34728: PUSH
34729: LD_INT 35
34731: PUSH
34732: LD_INT 36
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: PUSH
34758: LD_INT 101
34760: PUSH
34761: LD_INT 102
34763: PUSH
34764: LD_INT 103
34766: PUSH
34767: LD_INT 106
34769: PUSH
34770: LD_INT 108
34772: PUSH
34773: LD_INT 112
34775: PUSH
34776: LD_INT 113
34778: PUSH
34779: LD_INT 114
34781: PUSH
34782: LD_INT 115
34784: PUSH
34785: LD_INT 116
34787: PUSH
34788: LD_INT 117
34790: PUSH
34791: LD_INT 118
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: PUSH
34808: EMPTY
34809: LIST
34810: LIST
34811: ST_TO_ADDR
34812: GO 35055
34814: LD_INT 19
34816: DOUBLE
34817: EQUAL
34818: IFTRUE 34822
34820: GO 35054
34822: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
34823: LD_ADDR_VAR 0 2
34827: PUSH
34828: LD_INT 1
34830: PUSH
34831: LD_INT 2
34833: PUSH
34834: LD_INT 3
34836: PUSH
34837: LD_INT 4
34839: PUSH
34840: LD_INT 5
34842: PUSH
34843: LD_INT 6
34845: PUSH
34846: LD_INT 7
34848: PUSH
34849: LD_INT 8
34851: PUSH
34852: LD_INT 9
34854: PUSH
34855: LD_INT 10
34857: PUSH
34858: LD_INT 11
34860: PUSH
34861: LD_INT 12
34863: PUSH
34864: LD_INT 13
34866: PUSH
34867: LD_INT 14
34869: PUSH
34870: LD_INT 15
34872: PUSH
34873: LD_INT 16
34875: PUSH
34876: LD_INT 17
34878: PUSH
34879: LD_INT 18
34881: PUSH
34882: LD_INT 19
34884: PUSH
34885: LD_INT 20
34887: PUSH
34888: LD_INT 21
34890: PUSH
34891: LD_INT 22
34893: PUSH
34894: LD_INT 23
34896: PUSH
34897: LD_INT 24
34899: PUSH
34900: LD_INT 25
34902: PUSH
34903: LD_INT 26
34905: PUSH
34906: LD_INT 27
34908: PUSH
34909: LD_INT 28
34911: PUSH
34912: LD_INT 29
34914: PUSH
34915: LD_INT 30
34917: PUSH
34918: LD_INT 31
34920: PUSH
34921: LD_INT 32
34923: PUSH
34924: LD_INT 33
34926: PUSH
34927: LD_INT 34
34929: PUSH
34930: LD_INT 35
34932: PUSH
34933: LD_INT 36
34935: PUSH
34936: EMPTY
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: LIST
34956: LIST
34957: LIST
34958: LIST
34959: LIST
34960: LIST
34961: LIST
34962: LIST
34963: LIST
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: LIST
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 101
34976: PUSH
34977: LD_INT 102
34979: PUSH
34980: LD_INT 103
34982: PUSH
34983: LD_INT 104
34985: PUSH
34986: LD_INT 105
34988: PUSH
34989: LD_INT 106
34991: PUSH
34992: LD_INT 107
34994: PUSH
34995: LD_INT 108
34997: PUSH
34998: LD_INT 109
35000: PUSH
35001: LD_INT 110
35003: PUSH
35004: LD_INT 111
35006: PUSH
35007: LD_INT 112
35009: PUSH
35010: LD_INT 113
35012: PUSH
35013: LD_INT 114
35015: PUSH
35016: LD_INT 115
35018: PUSH
35019: LD_INT 116
35021: PUSH
35022: LD_INT 117
35024: PUSH
35025: LD_INT 118
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: LIST
35032: LIST
35033: LIST
35034: LIST
35035: LIST
35036: LIST
35037: LIST
35038: LIST
35039: LIST
35040: LIST
35041: LIST
35042: LIST
35043: LIST
35044: LIST
35045: LIST
35046: LIST
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: ST_TO_ADDR
35052: GO 35055
35054: POP
// end else
35055: GO 35286
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
35057: LD_ADDR_VAR 0 2
35061: PUSH
35062: LD_INT 1
35064: PUSH
35065: LD_INT 2
35067: PUSH
35068: LD_INT 3
35070: PUSH
35071: LD_INT 4
35073: PUSH
35074: LD_INT 5
35076: PUSH
35077: LD_INT 6
35079: PUSH
35080: LD_INT 7
35082: PUSH
35083: LD_INT 8
35085: PUSH
35086: LD_INT 9
35088: PUSH
35089: LD_INT 10
35091: PUSH
35092: LD_INT 11
35094: PUSH
35095: LD_INT 12
35097: PUSH
35098: LD_INT 13
35100: PUSH
35101: LD_INT 14
35103: PUSH
35104: LD_INT 15
35106: PUSH
35107: LD_INT 16
35109: PUSH
35110: LD_INT 17
35112: PUSH
35113: LD_INT 18
35115: PUSH
35116: LD_INT 19
35118: PUSH
35119: LD_INT 20
35121: PUSH
35122: LD_INT 21
35124: PUSH
35125: LD_INT 22
35127: PUSH
35128: LD_INT 23
35130: PUSH
35131: LD_INT 24
35133: PUSH
35134: LD_INT 25
35136: PUSH
35137: LD_INT 26
35139: PUSH
35140: LD_INT 27
35142: PUSH
35143: LD_INT 28
35145: PUSH
35146: LD_INT 29
35148: PUSH
35149: LD_INT 30
35151: PUSH
35152: LD_INT 31
35154: PUSH
35155: LD_INT 32
35157: PUSH
35158: LD_INT 33
35160: PUSH
35161: LD_INT 34
35163: PUSH
35164: LD_INT 35
35166: PUSH
35167: LD_INT 36
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: LIST
35201: LIST
35202: LIST
35203: LIST
35204: LIST
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 101
35210: PUSH
35211: LD_INT 102
35213: PUSH
35214: LD_INT 103
35216: PUSH
35217: LD_INT 104
35219: PUSH
35220: LD_INT 105
35222: PUSH
35223: LD_INT 106
35225: PUSH
35226: LD_INT 107
35228: PUSH
35229: LD_INT 108
35231: PUSH
35232: LD_INT 109
35234: PUSH
35235: LD_INT 110
35237: PUSH
35238: LD_INT 111
35240: PUSH
35241: LD_INT 112
35243: PUSH
35244: LD_INT 113
35246: PUSH
35247: LD_INT 114
35249: PUSH
35250: LD_INT 115
35252: PUSH
35253: LD_INT 116
35255: PUSH
35256: LD_INT 117
35258: PUSH
35259: LD_INT 118
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: LIST
35266: LIST
35267: LIST
35268: LIST
35269: LIST
35270: LIST
35271: LIST
35272: LIST
35273: LIST
35274: LIST
35275: LIST
35276: LIST
35277: LIST
35278: LIST
35279: LIST
35280: LIST
35281: PUSH
35282: EMPTY
35283: LIST
35284: LIST
35285: ST_TO_ADDR
// if result then
35286: LD_VAR 0 2
35290: IFFALSE 36076
// begin normal :=  ;
35292: LD_ADDR_VAR 0 5
35296: PUSH
35297: LD_STRING 
35299: ST_TO_ADDR
// hardcore :=  ;
35300: LD_ADDR_VAR 0 6
35304: PUSH
35305: LD_STRING 
35307: ST_TO_ADDR
// active :=  ;
35308: LD_ADDR_VAR 0 7
35312: PUSH
35313: LD_STRING 
35315: ST_TO_ADDR
// for i = 1 to normalCounter do
35316: LD_ADDR_VAR 0 8
35320: PUSH
35321: DOUBLE
35322: LD_INT 1
35324: DEC
35325: ST_TO_ADDR
35326: LD_EXP 72
35330: PUSH
35331: FOR_TO
35332: IFFALSE 35433
// begin tmp := 0 ;
35334: LD_ADDR_VAR 0 3
35338: PUSH
35339: LD_STRING 0
35341: ST_TO_ADDR
// if result [ 1 ] then
35342: LD_VAR 0 2
35346: PUSH
35347: LD_INT 1
35349: ARRAY
35350: IFFALSE 35415
// if result [ 1 ] [ 1 ] = i then
35352: LD_VAR 0 2
35356: PUSH
35357: LD_INT 1
35359: ARRAY
35360: PUSH
35361: LD_INT 1
35363: ARRAY
35364: PUSH
35365: LD_VAR 0 8
35369: EQUAL
35370: IFFALSE 35415
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35372: LD_ADDR_VAR 0 2
35376: PUSH
35377: LD_VAR 0 2
35381: PPUSH
35382: LD_INT 1
35384: PPUSH
35385: LD_VAR 0 2
35389: PUSH
35390: LD_INT 1
35392: ARRAY
35393: PPUSH
35394: LD_INT 1
35396: PPUSH
35397: CALL_OW 3
35401: PPUSH
35402: CALL_OW 1
35406: ST_TO_ADDR
// tmp := 1 ;
35407: LD_ADDR_VAR 0 3
35411: PUSH
35412: LD_STRING 1
35414: ST_TO_ADDR
// end ; normal := normal & tmp ;
35415: LD_ADDR_VAR 0 5
35419: PUSH
35420: LD_VAR 0 5
35424: PUSH
35425: LD_VAR 0 3
35429: STR
35430: ST_TO_ADDR
// end ;
35431: GO 35331
35433: POP
35434: POP
// for i = 1 to hardcoreCounter do
35435: LD_ADDR_VAR 0 8
35439: PUSH
35440: DOUBLE
35441: LD_INT 1
35443: DEC
35444: ST_TO_ADDR
35445: LD_EXP 73
35449: PUSH
35450: FOR_TO
35451: IFFALSE 35556
// begin tmp := 0 ;
35453: LD_ADDR_VAR 0 3
35457: PUSH
35458: LD_STRING 0
35460: ST_TO_ADDR
// if result [ 2 ] then
35461: LD_VAR 0 2
35465: PUSH
35466: LD_INT 2
35468: ARRAY
35469: IFFALSE 35538
// if result [ 2 ] [ 1 ] = 100 + i then
35471: LD_VAR 0 2
35475: PUSH
35476: LD_INT 2
35478: ARRAY
35479: PUSH
35480: LD_INT 1
35482: ARRAY
35483: PUSH
35484: LD_INT 100
35486: PUSH
35487: LD_VAR 0 8
35491: PLUS
35492: EQUAL
35493: IFFALSE 35538
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35495: LD_ADDR_VAR 0 2
35499: PUSH
35500: LD_VAR 0 2
35504: PPUSH
35505: LD_INT 2
35507: PPUSH
35508: LD_VAR 0 2
35512: PUSH
35513: LD_INT 2
35515: ARRAY
35516: PPUSH
35517: LD_INT 1
35519: PPUSH
35520: CALL_OW 3
35524: PPUSH
35525: CALL_OW 1
35529: ST_TO_ADDR
// tmp := 1 ;
35530: LD_ADDR_VAR 0 3
35534: PUSH
35535: LD_STRING 1
35537: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35538: LD_ADDR_VAR 0 6
35542: PUSH
35543: LD_VAR 0 6
35547: PUSH
35548: LD_VAR 0 3
35552: STR
35553: ST_TO_ADDR
// end ;
35554: GO 35450
35556: POP
35557: POP
// if isGameLoad then
35558: LD_VAR 0 1
35562: IFFALSE 36037
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35564: LD_ADDR_VAR 0 4
35568: PUSH
35569: LD_EXP 76
35573: PUSH
35574: LD_EXP 75
35578: PUSH
35579: LD_EXP 77
35583: PUSH
35584: LD_EXP 74
35588: PUSH
35589: LD_EXP 78
35593: PUSH
35594: LD_EXP 79
35598: PUSH
35599: LD_EXP 80
35603: PUSH
35604: LD_EXP 81
35608: PUSH
35609: LD_EXP 82
35613: PUSH
35614: LD_EXP 83
35618: PUSH
35619: LD_EXP 84
35623: PUSH
35624: LD_EXP 85
35628: PUSH
35629: LD_EXP 86
35633: PUSH
35634: LD_EXP 87
35638: PUSH
35639: LD_EXP 95
35643: PUSH
35644: LD_EXP 96
35648: PUSH
35649: LD_EXP 97
35653: PUSH
35654: LD_EXP 98
35658: PUSH
35659: LD_EXP 100
35663: PUSH
35664: LD_EXP 101
35668: PUSH
35669: LD_EXP 102
35673: PUSH
35674: LD_EXP 105
35678: PUSH
35679: LD_EXP 107
35683: PUSH
35684: LD_EXP 108
35688: PUSH
35689: LD_EXP 109
35693: PUSH
35694: LD_EXP 111
35698: PUSH
35699: LD_EXP 112
35703: PUSH
35704: LD_EXP 115
35708: PUSH
35709: LD_EXP 116
35713: PUSH
35714: LD_EXP 117
35718: PUSH
35719: LD_EXP 118
35723: PUSH
35724: LD_EXP 119
35728: PUSH
35729: LD_EXP 120
35733: PUSH
35734: LD_EXP 121
35738: PUSH
35739: LD_EXP 122
35743: PUSH
35744: LD_EXP 123
35748: PUSH
35749: LD_EXP 88
35753: PUSH
35754: LD_EXP 89
35758: PUSH
35759: LD_EXP 92
35763: PUSH
35764: LD_EXP 93
35768: PUSH
35769: LD_EXP 94
35773: PUSH
35774: LD_EXP 90
35778: PUSH
35779: LD_EXP 91
35783: PUSH
35784: LD_EXP 99
35788: PUSH
35789: LD_EXP 103
35793: PUSH
35794: LD_EXP 104
35798: PUSH
35799: LD_EXP 106
35803: PUSH
35804: LD_EXP 110
35808: PUSH
35809: LD_EXP 113
35813: PUSH
35814: LD_EXP 114
35818: PUSH
35819: LD_EXP 124
35823: PUSH
35824: LD_EXP 125
35828: PUSH
35829: LD_EXP 126
35833: PUSH
35834: LD_EXP 127
35838: PUSH
35839: EMPTY
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: LIST
35875: LIST
35876: LIST
35877: LIST
35878: LIST
35879: LIST
35880: LIST
35881: LIST
35882: LIST
35883: LIST
35884: LIST
35885: LIST
35886: LIST
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: ST_TO_ADDR
// tmp :=  ;
35895: LD_ADDR_VAR 0 3
35899: PUSH
35900: LD_STRING 
35902: ST_TO_ADDR
// for i = 1 to normalCounter do
35903: LD_ADDR_VAR 0 8
35907: PUSH
35908: DOUBLE
35909: LD_INT 1
35911: DEC
35912: ST_TO_ADDR
35913: LD_EXP 72
35917: PUSH
35918: FOR_TO
35919: IFFALSE 35955
// begin if flags [ i ] then
35921: LD_VAR 0 4
35925: PUSH
35926: LD_VAR 0 8
35930: ARRAY
35931: IFFALSE 35953
// tmp := tmp & i & ; ;
35933: LD_ADDR_VAR 0 3
35937: PUSH
35938: LD_VAR 0 3
35942: PUSH
35943: LD_VAR 0 8
35947: STR
35948: PUSH
35949: LD_STRING ;
35951: STR
35952: ST_TO_ADDR
// end ;
35953: GO 35918
35955: POP
35956: POP
// for i = 1 to hardcoreCounter do
35957: LD_ADDR_VAR 0 8
35961: PUSH
35962: DOUBLE
35963: LD_INT 1
35965: DEC
35966: ST_TO_ADDR
35967: LD_EXP 73
35971: PUSH
35972: FOR_TO
35973: IFFALSE 36019
// begin if flags [ normalCounter + i ] then
35975: LD_VAR 0 4
35979: PUSH
35980: LD_EXP 72
35984: PUSH
35985: LD_VAR 0 8
35989: PLUS
35990: ARRAY
35991: IFFALSE 36017
// tmp := tmp & ( 100 + i ) & ; ;
35993: LD_ADDR_VAR 0 3
35997: PUSH
35998: LD_VAR 0 3
36002: PUSH
36003: LD_INT 100
36005: PUSH
36006: LD_VAR 0 8
36010: PLUS
36011: STR
36012: PUSH
36013: LD_STRING ;
36015: STR
36016: ST_TO_ADDR
// end ;
36017: GO 35972
36019: POP
36020: POP
// if tmp then
36021: LD_VAR 0 3
36025: IFFALSE 36037
// active := tmp ;
36027: LD_ADDR_VAR 0 7
36031: PUSH
36032: LD_VAR 0 3
36036: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
36037: LD_STRING getStreamItemsFromMission("
36039: PUSH
36040: LD_VAR 0 5
36044: STR
36045: PUSH
36046: LD_STRING ","
36048: STR
36049: PUSH
36050: LD_VAR 0 6
36054: STR
36055: PUSH
36056: LD_STRING ","
36058: STR
36059: PUSH
36060: LD_VAR 0 7
36064: STR
36065: PUSH
36066: LD_STRING ")
36068: STR
36069: PPUSH
36070: CALL_OW 559
// end else
36074: GO 36083
// ToLua ( getStreamItemsFromMission("","","") ) ;
36076: LD_STRING getStreamItemsFromMission("","","")
36078: PPUSH
36079: CALL_OW 559
// end ;
36083: LD_VAR 0 2
36087: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
36088: LD_EXP 71
36092: PUSH
36093: LD_EXP 76
36097: AND
36098: IFFALSE 36222
36100: GO 36102
36102: DISABLE
36103: LD_INT 0
36105: PPUSH
36106: PPUSH
// begin enable ;
36107: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
36108: LD_ADDR_VAR 0 2
36112: PUSH
36113: LD_INT 22
36115: PUSH
36116: LD_OWVAR 2
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: LD_INT 2
36127: PUSH
36128: LD_INT 34
36130: PUSH
36131: LD_INT 7
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 34
36140: PUSH
36141: LD_INT 45
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 34
36150: PUSH
36151: LD_INT 28
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 34
36160: PUSH
36161: LD_INT 47
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PPUSH
36179: CALL_OW 69
36183: ST_TO_ADDR
// if not tmp then
36184: LD_VAR 0 2
36188: NOT
36189: IFFALSE 36193
// exit ;
36191: GO 36222
// for i in tmp do
36193: LD_ADDR_VAR 0 1
36197: PUSH
36198: LD_VAR 0 2
36202: PUSH
36203: FOR_IN
36204: IFFALSE 36220
// begin SetLives ( i , 0 ) ;
36206: LD_VAR 0 1
36210: PPUSH
36211: LD_INT 0
36213: PPUSH
36214: CALL_OW 234
// end ;
36218: GO 36203
36220: POP
36221: POP
// end ;
36222: PPOPN 2
36224: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
36225: LD_EXP 71
36229: PUSH
36230: LD_EXP 77
36234: AND
36235: IFFALSE 36319
36237: GO 36239
36239: DISABLE
36240: LD_INT 0
36242: PPUSH
36243: PPUSH
// begin enable ;
36244: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
36245: LD_ADDR_VAR 0 2
36249: PUSH
36250: LD_INT 22
36252: PUSH
36253: LD_OWVAR 2
36257: PUSH
36258: EMPTY
36259: LIST
36260: LIST
36261: PUSH
36262: LD_INT 32
36264: PUSH
36265: LD_INT 3
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: EMPTY
36273: LIST
36274: LIST
36275: PPUSH
36276: CALL_OW 69
36280: ST_TO_ADDR
// if not tmp then
36281: LD_VAR 0 2
36285: NOT
36286: IFFALSE 36290
// exit ;
36288: GO 36319
// for i in tmp do
36290: LD_ADDR_VAR 0 1
36294: PUSH
36295: LD_VAR 0 2
36299: PUSH
36300: FOR_IN
36301: IFFALSE 36317
// begin SetLives ( i , 0 ) ;
36303: LD_VAR 0 1
36307: PPUSH
36308: LD_INT 0
36310: PPUSH
36311: CALL_OW 234
// end ;
36315: GO 36300
36317: POP
36318: POP
// end ;
36319: PPOPN 2
36321: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
36322: LD_EXP 71
36326: PUSH
36327: LD_EXP 74
36331: AND
36332: IFFALSE 36425
36334: GO 36336
36336: DISABLE
36337: LD_INT 0
36339: PPUSH
// begin enable ;
36340: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
36341: LD_ADDR_VAR 0 1
36345: PUSH
36346: LD_INT 22
36348: PUSH
36349: LD_OWVAR 2
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PUSH
36358: LD_INT 2
36360: PUSH
36361: LD_INT 25
36363: PUSH
36364: LD_INT 5
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: LD_INT 25
36373: PUSH
36374: LD_INT 9
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PUSH
36381: LD_INT 25
36383: PUSH
36384: LD_INT 8
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PPUSH
36401: CALL_OW 69
36405: PUSH
36406: FOR_IN
36407: IFFALSE 36423
// begin SetClass ( i , 1 ) ;
36409: LD_VAR 0 1
36413: PPUSH
36414: LD_INT 1
36416: PPUSH
36417: CALL_OW 336
// end ;
36421: GO 36406
36423: POP
36424: POP
// end ;
36425: PPOPN 1
36427: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36428: LD_EXP 71
36432: PUSH
36433: LD_EXP 75
36437: AND
36438: PUSH
36439: LD_OWVAR 65
36443: PUSH
36444: LD_INT 7
36446: LESS
36447: AND
36448: IFFALSE 36462
36450: GO 36452
36452: DISABLE
// begin enable ;
36453: ENABLE
// game_speed := 7 ;
36454: LD_ADDR_OWVAR 65
36458: PUSH
36459: LD_INT 7
36461: ST_TO_ADDR
// end ;
36462: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36463: LD_EXP 71
36467: PUSH
36468: LD_EXP 78
36472: AND
36473: IFFALSE 36675
36475: GO 36477
36477: DISABLE
36478: LD_INT 0
36480: PPUSH
36481: PPUSH
36482: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36483: LD_ADDR_VAR 0 3
36487: PUSH
36488: LD_INT 81
36490: PUSH
36491: LD_OWVAR 2
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 21
36502: PUSH
36503: LD_INT 1
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PPUSH
36514: CALL_OW 69
36518: ST_TO_ADDR
// if not tmp then
36519: LD_VAR 0 3
36523: NOT
36524: IFFALSE 36528
// exit ;
36526: GO 36675
// if tmp > 5 then
36528: LD_VAR 0 3
36532: PUSH
36533: LD_INT 5
36535: GREATER
36536: IFFALSE 36548
// k := 5 else
36538: LD_ADDR_VAR 0 2
36542: PUSH
36543: LD_INT 5
36545: ST_TO_ADDR
36546: GO 36558
// k := tmp ;
36548: LD_ADDR_VAR 0 2
36552: PUSH
36553: LD_VAR 0 3
36557: ST_TO_ADDR
// for i := 1 to k do
36558: LD_ADDR_VAR 0 1
36562: PUSH
36563: DOUBLE
36564: LD_INT 1
36566: DEC
36567: ST_TO_ADDR
36568: LD_VAR 0 2
36572: PUSH
36573: FOR_TO
36574: IFFALSE 36673
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36576: LD_VAR 0 3
36580: PUSH
36581: LD_VAR 0 1
36585: ARRAY
36586: PPUSH
36587: LD_VAR 0 1
36591: PUSH
36592: LD_INT 4
36594: MOD
36595: PUSH
36596: LD_INT 1
36598: PLUS
36599: PPUSH
36600: CALL_OW 259
36604: PUSH
36605: LD_INT 10
36607: LESS
36608: IFFALSE 36671
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36610: LD_VAR 0 3
36614: PUSH
36615: LD_VAR 0 1
36619: ARRAY
36620: PPUSH
36621: LD_VAR 0 1
36625: PUSH
36626: LD_INT 4
36628: MOD
36629: PUSH
36630: LD_INT 1
36632: PLUS
36633: PPUSH
36634: LD_VAR 0 3
36638: PUSH
36639: LD_VAR 0 1
36643: ARRAY
36644: PPUSH
36645: LD_VAR 0 1
36649: PUSH
36650: LD_INT 4
36652: MOD
36653: PUSH
36654: LD_INT 1
36656: PLUS
36657: PPUSH
36658: CALL_OW 259
36662: PUSH
36663: LD_INT 1
36665: PLUS
36666: PPUSH
36667: CALL_OW 237
36671: GO 36573
36673: POP
36674: POP
// end ;
36675: PPOPN 3
36677: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36678: LD_EXP 71
36682: PUSH
36683: LD_EXP 79
36687: AND
36688: IFFALSE 36708
36690: GO 36692
36692: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36693: LD_INT 4
36695: PPUSH
36696: LD_OWVAR 2
36700: PPUSH
36701: LD_INT 0
36703: PPUSH
36704: CALL_OW 324
36708: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36709: LD_EXP 71
36713: PUSH
36714: LD_EXP 108
36718: AND
36719: IFFALSE 36739
36721: GO 36723
36723: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36724: LD_INT 19
36726: PPUSH
36727: LD_OWVAR 2
36731: PPUSH
36732: LD_INT 0
36734: PPUSH
36735: CALL_OW 324
36739: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36740: LD_EXP 71
36744: PUSH
36745: LD_EXP 80
36749: AND
36750: IFFALSE 36852
36752: GO 36754
36754: DISABLE
36755: LD_INT 0
36757: PPUSH
36758: PPUSH
// begin enable ;
36759: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36760: LD_ADDR_VAR 0 2
36764: PUSH
36765: LD_INT 22
36767: PUSH
36768: LD_OWVAR 2
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: LD_INT 34
36782: PUSH
36783: LD_INT 11
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: PUSH
36790: LD_INT 34
36792: PUSH
36793: LD_INT 30
36795: PUSH
36796: EMPTY
36797: LIST
36798: LIST
36799: PUSH
36800: EMPTY
36801: LIST
36802: LIST
36803: LIST
36804: PUSH
36805: EMPTY
36806: LIST
36807: LIST
36808: PPUSH
36809: CALL_OW 69
36813: ST_TO_ADDR
// if not tmp then
36814: LD_VAR 0 2
36818: NOT
36819: IFFALSE 36823
// exit ;
36821: GO 36852
// for i in tmp do
36823: LD_ADDR_VAR 0 1
36827: PUSH
36828: LD_VAR 0 2
36832: PUSH
36833: FOR_IN
36834: IFFALSE 36850
// begin SetLives ( i , 0 ) ;
36836: LD_VAR 0 1
36840: PPUSH
36841: LD_INT 0
36843: PPUSH
36844: CALL_OW 234
// end ;
36848: GO 36833
36850: POP
36851: POP
// end ;
36852: PPOPN 2
36854: END
// every 0 0$1 trigger StreamModeActive and sBunker do
36855: LD_EXP 71
36859: PUSH
36860: LD_EXP 81
36864: AND
36865: IFFALSE 36885
36867: GO 36869
36869: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
36870: LD_INT 32
36872: PPUSH
36873: LD_OWVAR 2
36877: PPUSH
36878: LD_INT 0
36880: PPUSH
36881: CALL_OW 324
36885: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
36886: LD_EXP 71
36890: PUSH
36891: LD_EXP 82
36895: AND
36896: IFFALSE 37077
36898: GO 36900
36900: DISABLE
36901: LD_INT 0
36903: PPUSH
36904: PPUSH
36905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
36906: LD_ADDR_VAR 0 2
36910: PUSH
36911: LD_INT 22
36913: PUSH
36914: LD_OWVAR 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 33
36925: PUSH
36926: LD_INT 3
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: PUSH
36933: EMPTY
36934: LIST
36935: LIST
36936: PPUSH
36937: CALL_OW 69
36941: ST_TO_ADDR
// if not tmp then
36942: LD_VAR 0 2
36946: NOT
36947: IFFALSE 36951
// exit ;
36949: GO 37077
// side := 0 ;
36951: LD_ADDR_VAR 0 3
36955: PUSH
36956: LD_INT 0
36958: ST_TO_ADDR
// for i := 1 to 8 do
36959: LD_ADDR_VAR 0 1
36963: PUSH
36964: DOUBLE
36965: LD_INT 1
36967: DEC
36968: ST_TO_ADDR
36969: LD_INT 8
36971: PUSH
36972: FOR_TO
36973: IFFALSE 37021
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
36975: LD_OWVAR 2
36979: PUSH
36980: LD_VAR 0 1
36984: NONEQUAL
36985: PUSH
36986: LD_OWVAR 2
36990: PPUSH
36991: LD_VAR 0 1
36995: PPUSH
36996: CALL_OW 81
37000: PUSH
37001: LD_INT 2
37003: EQUAL
37004: AND
37005: IFFALSE 37019
// begin side := i ;
37007: LD_ADDR_VAR 0 3
37011: PUSH
37012: LD_VAR 0 1
37016: ST_TO_ADDR
// break ;
37017: GO 37021
// end ;
37019: GO 36972
37021: POP
37022: POP
// if not side then
37023: LD_VAR 0 3
37027: NOT
37028: IFFALSE 37032
// exit ;
37030: GO 37077
// for i := 1 to tmp do
37032: LD_ADDR_VAR 0 1
37036: PUSH
37037: DOUBLE
37038: LD_INT 1
37040: DEC
37041: ST_TO_ADDR
37042: LD_VAR 0 2
37046: PUSH
37047: FOR_TO
37048: IFFALSE 37075
// if Prob ( 60 ) then
37050: LD_INT 60
37052: PPUSH
37053: CALL_OW 13
37057: IFFALSE 37073
// SetSide ( i , side ) ;
37059: LD_VAR 0 1
37063: PPUSH
37064: LD_VAR 0 3
37068: PPUSH
37069: CALL_OW 235
37073: GO 37047
37075: POP
37076: POP
// end ;
37077: PPOPN 3
37079: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
37080: LD_EXP 71
37084: PUSH
37085: LD_EXP 84
37089: AND
37090: IFFALSE 37209
37092: GO 37094
37094: DISABLE
37095: LD_INT 0
37097: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
37098: LD_ADDR_VAR 0 1
37102: PUSH
37103: LD_INT 22
37105: PUSH
37106: LD_OWVAR 2
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 21
37117: PUSH
37118: LD_INT 1
37120: PUSH
37121: EMPTY
37122: LIST
37123: LIST
37124: PUSH
37125: LD_INT 3
37127: PUSH
37128: LD_INT 23
37130: PUSH
37131: LD_INT 0
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: LIST
37146: PPUSH
37147: CALL_OW 69
37151: PUSH
37152: FOR_IN
37153: IFFALSE 37207
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
37155: LD_VAR 0 1
37159: PPUSH
37160: CALL_OW 257
37164: PUSH
37165: LD_INT 1
37167: PUSH
37168: LD_INT 2
37170: PUSH
37171: LD_INT 3
37173: PUSH
37174: LD_INT 4
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: IN
37183: IFFALSE 37205
// SetClass ( un , rand ( 1 , 4 ) ) ;
37185: LD_VAR 0 1
37189: PPUSH
37190: LD_INT 1
37192: PPUSH
37193: LD_INT 4
37195: PPUSH
37196: CALL_OW 12
37200: PPUSH
37201: CALL_OW 336
37205: GO 37152
37207: POP
37208: POP
// end ;
37209: PPOPN 1
37211: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
37212: LD_EXP 71
37216: PUSH
37217: LD_EXP 83
37221: AND
37222: IFFALSE 37301
37224: GO 37226
37226: DISABLE
37227: LD_INT 0
37229: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37230: LD_ADDR_VAR 0 1
37234: PUSH
37235: LD_INT 22
37237: PUSH
37238: LD_OWVAR 2
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 21
37249: PUSH
37250: LD_INT 3
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PPUSH
37261: CALL_OW 69
37265: ST_TO_ADDR
// if not tmp then
37266: LD_VAR 0 1
37270: NOT
37271: IFFALSE 37275
// exit ;
37273: GO 37301
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
37275: LD_VAR 0 1
37279: PUSH
37280: LD_INT 1
37282: PPUSH
37283: LD_VAR 0 1
37287: PPUSH
37288: CALL_OW 12
37292: ARRAY
37293: PPUSH
37294: LD_INT 100
37296: PPUSH
37297: CALL_OW 234
// end ;
37301: PPOPN 1
37303: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
37304: LD_EXP 71
37308: PUSH
37309: LD_EXP 85
37313: AND
37314: IFFALSE 37412
37316: GO 37318
37318: DISABLE
37319: LD_INT 0
37321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37322: LD_ADDR_VAR 0 1
37326: PUSH
37327: LD_INT 22
37329: PUSH
37330: LD_OWVAR 2
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 21
37341: PUSH
37342: LD_INT 1
37344: PUSH
37345: EMPTY
37346: LIST
37347: LIST
37348: PUSH
37349: EMPTY
37350: LIST
37351: LIST
37352: PPUSH
37353: CALL_OW 69
37357: ST_TO_ADDR
// if not tmp then
37358: LD_VAR 0 1
37362: NOT
37363: IFFALSE 37367
// exit ;
37365: GO 37412
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37367: LD_VAR 0 1
37371: PUSH
37372: LD_INT 1
37374: PPUSH
37375: LD_VAR 0 1
37379: PPUSH
37380: CALL_OW 12
37384: ARRAY
37385: PPUSH
37386: LD_INT 1
37388: PPUSH
37389: LD_INT 4
37391: PPUSH
37392: CALL_OW 12
37396: PPUSH
37397: LD_INT 3000
37399: PPUSH
37400: LD_INT 9000
37402: PPUSH
37403: CALL_OW 12
37407: PPUSH
37408: CALL_OW 492
// end ;
37412: PPOPN 1
37414: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37415: LD_EXP 71
37419: PUSH
37420: LD_EXP 86
37424: AND
37425: IFFALSE 37445
37427: GO 37429
37429: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37430: LD_INT 1
37432: PPUSH
37433: LD_OWVAR 2
37437: PPUSH
37438: LD_INT 0
37440: PPUSH
37441: CALL_OW 324
37445: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37446: LD_EXP 71
37450: PUSH
37451: LD_EXP 87
37455: AND
37456: IFFALSE 37539
37458: GO 37460
37460: DISABLE
37461: LD_INT 0
37463: PPUSH
37464: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37465: LD_ADDR_VAR 0 2
37469: PUSH
37470: LD_INT 22
37472: PUSH
37473: LD_OWVAR 2
37477: PUSH
37478: EMPTY
37479: LIST
37480: LIST
37481: PUSH
37482: LD_INT 21
37484: PUSH
37485: LD_INT 3
37487: PUSH
37488: EMPTY
37489: LIST
37490: LIST
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PPUSH
37496: CALL_OW 69
37500: ST_TO_ADDR
// if not tmp then
37501: LD_VAR 0 2
37505: NOT
37506: IFFALSE 37510
// exit ;
37508: GO 37539
// for i in tmp do
37510: LD_ADDR_VAR 0 1
37514: PUSH
37515: LD_VAR 0 2
37519: PUSH
37520: FOR_IN
37521: IFFALSE 37537
// SetBLevel ( i , 10 ) ;
37523: LD_VAR 0 1
37527: PPUSH
37528: LD_INT 10
37530: PPUSH
37531: CALL_OW 241
37535: GO 37520
37537: POP
37538: POP
// end ;
37539: PPOPN 2
37541: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37542: LD_EXP 71
37546: PUSH
37547: LD_EXP 88
37551: AND
37552: IFFALSE 37663
37554: GO 37556
37556: DISABLE
37557: LD_INT 0
37559: PPUSH
37560: PPUSH
37561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37562: LD_ADDR_VAR 0 3
37566: PUSH
37567: LD_INT 22
37569: PUSH
37570: LD_OWVAR 2
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 25
37581: PUSH
37582: LD_INT 1
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: EMPTY
37590: LIST
37591: LIST
37592: PPUSH
37593: CALL_OW 69
37597: ST_TO_ADDR
// if not tmp then
37598: LD_VAR 0 3
37602: NOT
37603: IFFALSE 37607
// exit ;
37605: GO 37663
// un := tmp [ rand ( 1 , tmp ) ] ;
37607: LD_ADDR_VAR 0 2
37611: PUSH
37612: LD_VAR 0 3
37616: PUSH
37617: LD_INT 1
37619: PPUSH
37620: LD_VAR 0 3
37624: PPUSH
37625: CALL_OW 12
37629: ARRAY
37630: ST_TO_ADDR
// if Crawls ( un ) then
37631: LD_VAR 0 2
37635: PPUSH
37636: CALL_OW 318
37640: IFFALSE 37651
// ComWalk ( un ) ;
37642: LD_VAR 0 2
37646: PPUSH
37647: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37651: LD_VAR 0 2
37655: PPUSH
37656: LD_INT 5
37658: PPUSH
37659: CALL_OW 336
// end ;
37663: PPOPN 3
37665: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37666: LD_EXP 71
37670: PUSH
37671: LD_EXP 89
37675: AND
37676: PUSH
37677: LD_OWVAR 67
37681: PUSH
37682: LD_INT 4
37684: LESS
37685: AND
37686: IFFALSE 37705
37688: GO 37690
37690: DISABLE
// begin Difficulty := Difficulty + 1 ;
37691: LD_ADDR_OWVAR 67
37695: PUSH
37696: LD_OWVAR 67
37700: PUSH
37701: LD_INT 1
37703: PLUS
37704: ST_TO_ADDR
// end ;
37705: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37706: LD_EXP 71
37710: PUSH
37711: LD_EXP 90
37715: AND
37716: IFFALSE 37819
37718: GO 37720
37720: DISABLE
37721: LD_INT 0
37723: PPUSH
// begin for i := 1 to 5 do
37724: LD_ADDR_VAR 0 1
37728: PUSH
37729: DOUBLE
37730: LD_INT 1
37732: DEC
37733: ST_TO_ADDR
37734: LD_INT 5
37736: PUSH
37737: FOR_TO
37738: IFFALSE 37817
// begin uc_nation := nation_nature ;
37740: LD_ADDR_OWVAR 21
37744: PUSH
37745: LD_INT 0
37747: ST_TO_ADDR
// uc_side := 0 ;
37748: LD_ADDR_OWVAR 20
37752: PUSH
37753: LD_INT 0
37755: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37756: LD_ADDR_OWVAR 29
37760: PUSH
37761: LD_INT 12
37763: PUSH
37764: LD_INT 12
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: ST_TO_ADDR
// hc_agressivity := 20 ;
37771: LD_ADDR_OWVAR 35
37775: PUSH
37776: LD_INT 20
37778: ST_TO_ADDR
// hc_class := class_tiger ;
37779: LD_ADDR_OWVAR 28
37783: PUSH
37784: LD_INT 14
37786: ST_TO_ADDR
// hc_gallery :=  ;
37787: LD_ADDR_OWVAR 33
37791: PUSH
37792: LD_STRING 
37794: ST_TO_ADDR
// hc_name :=  ;
37795: LD_ADDR_OWVAR 26
37799: PUSH
37800: LD_STRING 
37802: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37803: CALL_OW 44
37807: PPUSH
37808: LD_INT 0
37810: PPUSH
37811: CALL_OW 51
// end ;
37815: GO 37737
37817: POP
37818: POP
// end ;
37819: PPOPN 1
37821: END
// every 0 0$1 trigger StreamModeActive and sBomb do
37822: LD_EXP 71
37826: PUSH
37827: LD_EXP 91
37831: AND
37832: IFFALSE 37841
37834: GO 37836
37836: DISABLE
// StreamSibBomb ;
37837: CALL 37842 0 0
37841: END
// export function StreamSibBomb ; var i , x , y ; begin
37842: LD_INT 0
37844: PPUSH
37845: PPUSH
37846: PPUSH
37847: PPUSH
// result := false ;
37848: LD_ADDR_VAR 0 1
37852: PUSH
37853: LD_INT 0
37855: ST_TO_ADDR
// for i := 1 to 16 do
37856: LD_ADDR_VAR 0 2
37860: PUSH
37861: DOUBLE
37862: LD_INT 1
37864: DEC
37865: ST_TO_ADDR
37866: LD_INT 16
37868: PUSH
37869: FOR_TO
37870: IFFALSE 38069
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37872: LD_ADDR_VAR 0 3
37876: PUSH
37877: LD_INT 10
37879: PUSH
37880: LD_INT 20
37882: PUSH
37883: LD_INT 30
37885: PUSH
37886: LD_INT 40
37888: PUSH
37889: LD_INT 50
37891: PUSH
37892: LD_INT 60
37894: PUSH
37895: LD_INT 70
37897: PUSH
37898: LD_INT 80
37900: PUSH
37901: LD_INT 90
37903: PUSH
37904: LD_INT 100
37906: PUSH
37907: LD_INT 110
37909: PUSH
37910: LD_INT 120
37912: PUSH
37913: LD_INT 130
37915: PUSH
37916: LD_INT 140
37918: PUSH
37919: LD_INT 150
37921: PUSH
37922: EMPTY
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 1
37941: PPUSH
37942: LD_INT 15
37944: PPUSH
37945: CALL_OW 12
37949: ARRAY
37950: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37951: LD_ADDR_VAR 0 4
37955: PUSH
37956: LD_INT 10
37958: PUSH
37959: LD_INT 20
37961: PUSH
37962: LD_INT 30
37964: PUSH
37965: LD_INT 40
37967: PUSH
37968: LD_INT 50
37970: PUSH
37971: LD_INT 60
37973: PUSH
37974: LD_INT 70
37976: PUSH
37977: LD_INT 80
37979: PUSH
37980: LD_INT 90
37982: PUSH
37983: LD_INT 100
37985: PUSH
37986: LD_INT 110
37988: PUSH
37989: LD_INT 120
37991: PUSH
37992: LD_INT 130
37994: PUSH
37995: LD_INT 140
37997: PUSH
37998: LD_INT 150
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: LIST
38008: LIST
38009: LIST
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 1
38020: PPUSH
38021: LD_INT 15
38023: PPUSH
38024: CALL_OW 12
38028: ARRAY
38029: ST_TO_ADDR
// if ValidHex ( x , y ) then
38030: LD_VAR 0 3
38034: PPUSH
38035: LD_VAR 0 4
38039: PPUSH
38040: CALL_OW 488
38044: IFFALSE 38067
// begin result := [ x , y ] ;
38046: LD_ADDR_VAR 0 1
38050: PUSH
38051: LD_VAR 0 3
38055: PUSH
38056: LD_VAR 0 4
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: ST_TO_ADDR
// break ;
38065: GO 38069
// end ; end ;
38067: GO 37869
38069: POP
38070: POP
// if result then
38071: LD_VAR 0 1
38075: IFFALSE 38135
// begin ToLua ( playSibBomb() ) ;
38077: LD_STRING playSibBomb()
38079: PPUSH
38080: CALL_OW 559
// wait ( 0 0$14 ) ;
38084: LD_INT 490
38086: PPUSH
38087: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
38091: LD_VAR 0 1
38095: PUSH
38096: LD_INT 1
38098: ARRAY
38099: PPUSH
38100: LD_VAR 0 1
38104: PUSH
38105: LD_INT 2
38107: ARRAY
38108: PPUSH
38109: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
38113: LD_VAR 0 1
38117: PUSH
38118: LD_INT 1
38120: ARRAY
38121: PPUSH
38122: LD_VAR 0 1
38126: PUSH
38127: LD_INT 2
38129: ARRAY
38130: PPUSH
38131: CALL_OW 429
// end ; end ;
38135: LD_VAR 0 1
38139: RET
// every 0 0$1 trigger StreamModeActive and sReset do
38140: LD_EXP 71
38144: PUSH
38145: LD_EXP 93
38149: AND
38150: IFFALSE 38162
38152: GO 38154
38154: DISABLE
// YouLost (  ) ;
38155: LD_STRING 
38157: PPUSH
38158: CALL_OW 104
38162: END
// every 0 0$1 trigger StreamModeActive and sFog do
38163: LD_EXP 71
38167: PUSH
38168: LD_EXP 92
38172: AND
38173: IFFALSE 38187
38175: GO 38177
38177: DISABLE
// FogOff ( your_side ) ;
38178: LD_OWVAR 2
38182: PPUSH
38183: CALL_OW 344
38187: END
// every 0 0$1 trigger StreamModeActive and sSun do
38188: LD_EXP 71
38192: PUSH
38193: LD_EXP 94
38197: AND
38198: IFFALSE 38226
38200: GO 38202
38202: DISABLE
// begin solar_recharge_percent := 0 ;
38203: LD_ADDR_OWVAR 79
38207: PUSH
38208: LD_INT 0
38210: ST_TO_ADDR
// wait ( 5 5$00 ) ;
38211: LD_INT 10500
38213: PPUSH
38214: CALL_OW 67
// solar_recharge_percent := 100 ;
38218: LD_ADDR_OWVAR 79
38222: PUSH
38223: LD_INT 100
38225: ST_TO_ADDR
// end ;
38226: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
38227: LD_EXP 71
38231: PUSH
38232: LD_EXP 95
38236: AND
38237: IFFALSE 38476
38239: GO 38241
38241: DISABLE
38242: LD_INT 0
38244: PPUSH
38245: PPUSH
38246: PPUSH
// begin tmp := [ ] ;
38247: LD_ADDR_VAR 0 3
38251: PUSH
38252: EMPTY
38253: ST_TO_ADDR
// for i := 1 to 6 do
38254: LD_ADDR_VAR 0 1
38258: PUSH
38259: DOUBLE
38260: LD_INT 1
38262: DEC
38263: ST_TO_ADDR
38264: LD_INT 6
38266: PUSH
38267: FOR_TO
38268: IFFALSE 38373
// begin uc_nation := nation_nature ;
38270: LD_ADDR_OWVAR 21
38274: PUSH
38275: LD_INT 0
38277: ST_TO_ADDR
// uc_side := 0 ;
38278: LD_ADDR_OWVAR 20
38282: PUSH
38283: LD_INT 0
38285: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38286: LD_ADDR_OWVAR 29
38290: PUSH
38291: LD_INT 12
38293: PUSH
38294: LD_INT 12
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: ST_TO_ADDR
// hc_agressivity := 20 ;
38301: LD_ADDR_OWVAR 35
38305: PUSH
38306: LD_INT 20
38308: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
38309: LD_ADDR_OWVAR 28
38313: PUSH
38314: LD_INT 17
38316: ST_TO_ADDR
// hc_gallery :=  ;
38317: LD_ADDR_OWVAR 33
38321: PUSH
38322: LD_STRING 
38324: ST_TO_ADDR
// hc_name :=  ;
38325: LD_ADDR_OWVAR 26
38329: PUSH
38330: LD_STRING 
38332: ST_TO_ADDR
// un := CreateHuman ;
38333: LD_ADDR_VAR 0 2
38337: PUSH
38338: CALL_OW 44
38342: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
38343: LD_VAR 0 2
38347: PPUSH
38348: LD_INT 1
38350: PPUSH
38351: CALL_OW 51
// tmp := tmp ^ un ;
38355: LD_ADDR_VAR 0 3
38359: PUSH
38360: LD_VAR 0 3
38364: PUSH
38365: LD_VAR 0 2
38369: ADD
38370: ST_TO_ADDR
// end ;
38371: GO 38267
38373: POP
38374: POP
// repeat wait ( 0 0$1 ) ;
38375: LD_INT 35
38377: PPUSH
38378: CALL_OW 67
// for un in tmp do
38382: LD_ADDR_VAR 0 2
38386: PUSH
38387: LD_VAR 0 3
38391: PUSH
38392: FOR_IN
38393: IFFALSE 38467
// begin if IsDead ( un ) then
38395: LD_VAR 0 2
38399: PPUSH
38400: CALL_OW 301
38404: IFFALSE 38424
// begin tmp := tmp diff un ;
38406: LD_ADDR_VAR 0 3
38410: PUSH
38411: LD_VAR 0 3
38415: PUSH
38416: LD_VAR 0 2
38420: DIFF
38421: ST_TO_ADDR
// continue ;
38422: GO 38392
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38424: LD_VAR 0 2
38428: PPUSH
38429: LD_INT 3
38431: PUSH
38432: LD_INT 22
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PPUSH
38446: CALL_OW 69
38450: PPUSH
38451: LD_VAR 0 2
38455: PPUSH
38456: CALL_OW 74
38460: PPUSH
38461: CALL_OW 115
// end ;
38465: GO 38392
38467: POP
38468: POP
// until not tmp ;
38469: LD_VAR 0 3
38473: NOT
38474: IFFALSE 38375
// end ;
38476: PPOPN 3
38478: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38479: LD_EXP 71
38483: PUSH
38484: LD_EXP 96
38488: AND
38489: IFFALSE 38543
38491: GO 38493
38493: DISABLE
// begin ToLua ( displayTroll(); ) ;
38494: LD_STRING displayTroll();
38496: PPUSH
38497: CALL_OW 559
// wait ( 3 3$00 ) ;
38501: LD_INT 6300
38503: PPUSH
38504: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38508: LD_STRING hideTroll();
38510: PPUSH
38511: CALL_OW 559
// wait ( 1 1$00 ) ;
38515: LD_INT 2100
38517: PPUSH
38518: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38522: LD_STRING displayTroll();
38524: PPUSH
38525: CALL_OW 559
// wait ( 1 1$00 ) ;
38529: LD_INT 2100
38531: PPUSH
38532: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38536: LD_STRING hideTroll();
38538: PPUSH
38539: CALL_OW 559
// end ;
38543: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38544: LD_EXP 71
38548: PUSH
38549: LD_EXP 97
38553: AND
38554: IFFALSE 38617
38556: GO 38558
38558: DISABLE
38559: LD_INT 0
38561: PPUSH
// begin p := 0 ;
38562: LD_ADDR_VAR 0 1
38566: PUSH
38567: LD_INT 0
38569: ST_TO_ADDR
// repeat game_speed := 1 ;
38570: LD_ADDR_OWVAR 65
38574: PUSH
38575: LD_INT 1
38577: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38578: LD_INT 35
38580: PPUSH
38581: CALL_OW 67
// p := p + 1 ;
38585: LD_ADDR_VAR 0 1
38589: PUSH
38590: LD_VAR 0 1
38594: PUSH
38595: LD_INT 1
38597: PLUS
38598: ST_TO_ADDR
// until p >= 60 ;
38599: LD_VAR 0 1
38603: PUSH
38604: LD_INT 60
38606: GREATEREQUAL
38607: IFFALSE 38570
// game_speed := 4 ;
38609: LD_ADDR_OWVAR 65
38613: PUSH
38614: LD_INT 4
38616: ST_TO_ADDR
// end ;
38617: PPOPN 1
38619: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38620: LD_EXP 71
38624: PUSH
38625: LD_EXP 98
38629: AND
38630: IFFALSE 38776
38632: GO 38634
38634: DISABLE
38635: LD_INT 0
38637: PPUSH
38638: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38639: LD_ADDR_VAR 0 1
38643: PUSH
38644: LD_INT 22
38646: PUSH
38647: LD_OWVAR 2
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: LD_INT 30
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 30
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PPUSH
38688: CALL_OW 69
38692: ST_TO_ADDR
// if not depot then
38693: LD_VAR 0 1
38697: NOT
38698: IFFALSE 38702
// exit ;
38700: GO 38776
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38702: LD_ADDR_VAR 0 2
38706: PUSH
38707: LD_VAR 0 1
38711: PUSH
38712: LD_INT 1
38714: PPUSH
38715: LD_VAR 0 1
38719: PPUSH
38720: CALL_OW 12
38724: ARRAY
38725: PPUSH
38726: CALL_OW 274
38730: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38731: LD_VAR 0 2
38735: PPUSH
38736: LD_INT 1
38738: PPUSH
38739: LD_INT 0
38741: PPUSH
38742: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38746: LD_VAR 0 2
38750: PPUSH
38751: LD_INT 2
38753: PPUSH
38754: LD_INT 0
38756: PPUSH
38757: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38761: LD_VAR 0 2
38765: PPUSH
38766: LD_INT 3
38768: PPUSH
38769: LD_INT 0
38771: PPUSH
38772: CALL_OW 277
// end ;
38776: PPOPN 2
38778: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38779: LD_EXP 71
38783: PUSH
38784: LD_EXP 99
38788: AND
38789: IFFALSE 38886
38791: GO 38793
38793: DISABLE
38794: LD_INT 0
38796: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38797: LD_ADDR_VAR 0 1
38801: PUSH
38802: LD_INT 22
38804: PUSH
38805: LD_OWVAR 2
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 21
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 3
38826: PUSH
38827: LD_INT 23
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: LIST
38845: PPUSH
38846: CALL_OW 69
38850: ST_TO_ADDR
// if not tmp then
38851: LD_VAR 0 1
38855: NOT
38856: IFFALSE 38860
// exit ;
38858: GO 38886
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
38860: LD_VAR 0 1
38864: PUSH
38865: LD_INT 1
38867: PPUSH
38868: LD_VAR 0 1
38872: PPUSH
38873: CALL_OW 12
38877: ARRAY
38878: PPUSH
38879: LD_INT 200
38881: PPUSH
38882: CALL_OW 234
// end ;
38886: PPOPN 1
38888: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
38889: LD_EXP 71
38893: PUSH
38894: LD_EXP 100
38898: AND
38899: IFFALSE 38978
38901: GO 38903
38903: DISABLE
38904: LD_INT 0
38906: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
38907: LD_ADDR_VAR 0 1
38911: PUSH
38912: LD_INT 22
38914: PUSH
38915: LD_OWVAR 2
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 21
38926: PUSH
38927: LD_INT 2
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: EMPTY
38935: LIST
38936: LIST
38937: PPUSH
38938: CALL_OW 69
38942: ST_TO_ADDR
// if not tmp then
38943: LD_VAR 0 1
38947: NOT
38948: IFFALSE 38952
// exit ;
38950: GO 38978
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
38952: LD_VAR 0 1
38956: PUSH
38957: LD_INT 1
38959: PPUSH
38960: LD_VAR 0 1
38964: PPUSH
38965: CALL_OW 12
38969: ARRAY
38970: PPUSH
38971: LD_INT 60
38973: PPUSH
38974: CALL_OW 234
// end ;
38978: PPOPN 1
38980: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
38981: LD_EXP 71
38985: PUSH
38986: LD_EXP 101
38990: AND
38991: IFFALSE 39090
38993: GO 38995
38995: DISABLE
38996: LD_INT 0
38998: PPUSH
38999: PPUSH
// begin enable ;
39000: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
39001: LD_ADDR_VAR 0 1
39005: PUSH
39006: LD_INT 22
39008: PUSH
39009: LD_OWVAR 2
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 61
39020: PUSH
39021: EMPTY
39022: LIST
39023: PUSH
39024: LD_INT 33
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: LIST
39038: PPUSH
39039: CALL_OW 69
39043: ST_TO_ADDR
// if not tmp then
39044: LD_VAR 0 1
39048: NOT
39049: IFFALSE 39053
// exit ;
39051: GO 39090
// for i in tmp do
39053: LD_ADDR_VAR 0 2
39057: PUSH
39058: LD_VAR 0 1
39062: PUSH
39063: FOR_IN
39064: IFFALSE 39088
// if IsControledBy ( i ) then
39066: LD_VAR 0 2
39070: PPUSH
39071: CALL_OW 312
39075: IFFALSE 39086
// ComUnlink ( i ) ;
39077: LD_VAR 0 2
39081: PPUSH
39082: CALL_OW 136
39086: GO 39063
39088: POP
39089: POP
// end ;
39090: PPOPN 2
39092: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
39093: LD_EXP 71
39097: PUSH
39098: LD_EXP 102
39102: AND
39103: IFFALSE 39243
39105: GO 39107
39107: DISABLE
39108: LD_INT 0
39110: PPUSH
39111: PPUSH
// begin ToLua ( displayPowell(); ) ;
39112: LD_STRING displayPowell();
39114: PPUSH
39115: CALL_OW 559
// uc_side := 0 ;
39119: LD_ADDR_OWVAR 20
39123: PUSH
39124: LD_INT 0
39126: ST_TO_ADDR
// uc_nation := 2 ;
39127: LD_ADDR_OWVAR 21
39131: PUSH
39132: LD_INT 2
39134: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
39135: LD_ADDR_OWVAR 37
39139: PUSH
39140: LD_INT 14
39142: ST_TO_ADDR
// vc_engine := engine_siberite ;
39143: LD_ADDR_OWVAR 39
39147: PUSH
39148: LD_INT 3
39150: ST_TO_ADDR
// vc_control := control_apeman ;
39151: LD_ADDR_OWVAR 38
39155: PUSH
39156: LD_INT 5
39158: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
39159: LD_ADDR_OWVAR 40
39163: PUSH
39164: LD_INT 29
39166: ST_TO_ADDR
// un := CreateVehicle ;
39167: LD_ADDR_VAR 0 2
39171: PUSH
39172: CALL_OW 45
39176: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39177: LD_VAR 0 2
39181: PPUSH
39182: LD_INT 1
39184: PPUSH
39185: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39189: LD_INT 35
39191: PPUSH
39192: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39196: LD_VAR 0 2
39200: PPUSH
39201: LD_INT 22
39203: PUSH
39204: LD_OWVAR 2
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PPUSH
39213: CALL_OW 69
39217: PPUSH
39218: LD_VAR 0 2
39222: PPUSH
39223: CALL_OW 74
39227: PPUSH
39228: CALL_OW 115
// until IsDead ( un ) ;
39232: LD_VAR 0 2
39236: PPUSH
39237: CALL_OW 301
39241: IFFALSE 39189
// end ;
39243: PPOPN 2
39245: END
// every 0 0$1 trigger StreamModeActive and sStu do
39246: LD_EXP 71
39250: PUSH
39251: LD_EXP 110
39255: AND
39256: IFFALSE 39272
39258: GO 39260
39260: DISABLE
// begin ToLua ( displayStucuk(); ) ;
39261: LD_STRING displayStucuk();
39263: PPUSH
39264: CALL_OW 559
// ResetFog ;
39268: CALL_OW 335
// end ;
39272: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
39273: LD_EXP 71
39277: PUSH
39278: LD_EXP 103
39282: AND
39283: IFFALSE 39424
39285: GO 39287
39287: DISABLE
39288: LD_INT 0
39290: PPUSH
39291: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39292: LD_ADDR_VAR 0 2
39296: PUSH
39297: LD_INT 22
39299: PUSH
39300: LD_OWVAR 2
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 21
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PPUSH
39323: CALL_OW 69
39327: ST_TO_ADDR
// if not tmp then
39328: LD_VAR 0 2
39332: NOT
39333: IFFALSE 39337
// exit ;
39335: GO 39424
// un := tmp [ rand ( 1 , tmp ) ] ;
39337: LD_ADDR_VAR 0 1
39341: PUSH
39342: LD_VAR 0 2
39346: PUSH
39347: LD_INT 1
39349: PPUSH
39350: LD_VAR 0 2
39354: PPUSH
39355: CALL_OW 12
39359: ARRAY
39360: ST_TO_ADDR
// SetSide ( un , 0 ) ;
39361: LD_VAR 0 1
39365: PPUSH
39366: LD_INT 0
39368: PPUSH
39369: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39373: LD_VAR 0 1
39377: PPUSH
39378: LD_OWVAR 3
39382: PUSH
39383: LD_VAR 0 1
39387: DIFF
39388: PPUSH
39389: LD_VAR 0 1
39393: PPUSH
39394: CALL_OW 74
39398: PPUSH
39399: CALL_OW 115
// wait ( 0 0$20 ) ;
39403: LD_INT 700
39405: PPUSH
39406: CALL_OW 67
// SetSide ( un , your_side ) ;
39410: LD_VAR 0 1
39414: PPUSH
39415: LD_OWVAR 2
39419: PPUSH
39420: CALL_OW 235
// end ;
39424: PPOPN 2
39426: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39427: LD_EXP 71
39431: PUSH
39432: LD_EXP 104
39436: AND
39437: IFFALSE 39543
39439: GO 39441
39441: DISABLE
39442: LD_INT 0
39444: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39445: LD_ADDR_VAR 0 1
39449: PUSH
39450: LD_INT 22
39452: PUSH
39453: LD_OWVAR 2
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: PUSH
39462: LD_INT 2
39464: PUSH
39465: LD_INT 30
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 30
39477: PUSH
39478: LD_INT 1
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PPUSH
39494: CALL_OW 69
39498: ST_TO_ADDR
// if not depot then
39499: LD_VAR 0 1
39503: NOT
39504: IFFALSE 39508
// exit ;
39506: GO 39543
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39508: LD_VAR 0 1
39512: PUSH
39513: LD_INT 1
39515: ARRAY
39516: PPUSH
39517: CALL_OW 250
39521: PPUSH
39522: LD_VAR 0 1
39526: PUSH
39527: LD_INT 1
39529: ARRAY
39530: PPUSH
39531: CALL_OW 251
39535: PPUSH
39536: LD_INT 70
39538: PPUSH
39539: CALL_OW 495
// end ;
39543: PPOPN 1
39545: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39546: LD_EXP 71
39550: PUSH
39551: LD_EXP 105
39555: AND
39556: IFFALSE 39767
39558: GO 39560
39560: DISABLE
39561: LD_INT 0
39563: PPUSH
39564: PPUSH
39565: PPUSH
39566: PPUSH
39567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39568: LD_ADDR_VAR 0 5
39572: PUSH
39573: LD_INT 22
39575: PUSH
39576: LD_OWVAR 2
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 21
39587: PUSH
39588: LD_INT 1
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: PPUSH
39599: CALL_OW 69
39603: ST_TO_ADDR
// if not tmp then
39604: LD_VAR 0 5
39608: NOT
39609: IFFALSE 39613
// exit ;
39611: GO 39767
// for i in tmp do
39613: LD_ADDR_VAR 0 1
39617: PUSH
39618: LD_VAR 0 5
39622: PUSH
39623: FOR_IN
39624: IFFALSE 39765
// begin d := rand ( 0 , 5 ) ;
39626: LD_ADDR_VAR 0 4
39630: PUSH
39631: LD_INT 0
39633: PPUSH
39634: LD_INT 5
39636: PPUSH
39637: CALL_OW 12
39641: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39642: LD_ADDR_VAR 0 2
39646: PUSH
39647: LD_VAR 0 1
39651: PPUSH
39652: CALL_OW 250
39656: PPUSH
39657: LD_VAR 0 4
39661: PPUSH
39662: LD_INT 3
39664: PPUSH
39665: LD_INT 12
39667: PPUSH
39668: CALL_OW 12
39672: PPUSH
39673: CALL_OW 272
39677: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39678: LD_ADDR_VAR 0 3
39682: PUSH
39683: LD_VAR 0 1
39687: PPUSH
39688: CALL_OW 251
39692: PPUSH
39693: LD_VAR 0 4
39697: PPUSH
39698: LD_INT 3
39700: PPUSH
39701: LD_INT 12
39703: PPUSH
39704: CALL_OW 12
39708: PPUSH
39709: CALL_OW 273
39713: ST_TO_ADDR
// if ValidHex ( x , y ) then
39714: LD_VAR 0 2
39718: PPUSH
39719: LD_VAR 0 3
39723: PPUSH
39724: CALL_OW 488
39728: IFFALSE 39763
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39730: LD_VAR 0 1
39734: PPUSH
39735: LD_VAR 0 2
39739: PPUSH
39740: LD_VAR 0 3
39744: PPUSH
39745: LD_INT 3
39747: PPUSH
39748: LD_INT 6
39750: PPUSH
39751: CALL_OW 12
39755: PPUSH
39756: LD_INT 1
39758: PPUSH
39759: CALL_OW 483
// end ;
39763: GO 39623
39765: POP
39766: POP
// end ;
39767: PPOPN 5
39769: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39770: LD_EXP 71
39774: PUSH
39775: LD_EXP 106
39779: AND
39780: IFFALSE 39874
39782: GO 39784
39784: DISABLE
39785: LD_INT 0
39787: PPUSH
39788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39789: LD_ADDR_VAR 0 2
39793: PUSH
39794: LD_INT 22
39796: PUSH
39797: LD_OWVAR 2
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: LD_INT 32
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 21
39818: PUSH
39819: LD_INT 2
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: PPUSH
39831: CALL_OW 69
39835: ST_TO_ADDR
// if not tmp then
39836: LD_VAR 0 2
39840: NOT
39841: IFFALSE 39845
// exit ;
39843: GO 39874
// for i in tmp do
39845: LD_ADDR_VAR 0 1
39849: PUSH
39850: LD_VAR 0 2
39854: PUSH
39855: FOR_IN
39856: IFFALSE 39872
// SetFuel ( i , 0 ) ;
39858: LD_VAR 0 1
39862: PPUSH
39863: LD_INT 0
39865: PPUSH
39866: CALL_OW 240
39870: GO 39855
39872: POP
39873: POP
// end ;
39874: PPOPN 2
39876: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
39877: LD_EXP 71
39881: PUSH
39882: LD_EXP 107
39886: AND
39887: IFFALSE 39953
39889: GO 39891
39891: DISABLE
39892: LD_INT 0
39894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39895: LD_ADDR_VAR 0 1
39899: PUSH
39900: LD_INT 22
39902: PUSH
39903: LD_OWVAR 2
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 30
39914: PUSH
39915: LD_INT 29
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PPUSH
39926: CALL_OW 69
39930: ST_TO_ADDR
// if not tmp then
39931: LD_VAR 0 1
39935: NOT
39936: IFFALSE 39940
// exit ;
39938: GO 39953
// DestroyUnit ( tmp [ 1 ] ) ;
39940: LD_VAR 0 1
39944: PUSH
39945: LD_INT 1
39947: ARRAY
39948: PPUSH
39949: CALL_OW 65
// end ;
39953: PPOPN 1
39955: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
39956: LD_EXP 71
39960: PUSH
39961: LD_EXP 109
39965: AND
39966: IFFALSE 40095
39968: GO 39970
39970: DISABLE
39971: LD_INT 0
39973: PPUSH
// begin uc_side := 0 ;
39974: LD_ADDR_OWVAR 20
39978: PUSH
39979: LD_INT 0
39981: ST_TO_ADDR
// uc_nation := nation_arabian ;
39982: LD_ADDR_OWVAR 21
39986: PUSH
39987: LD_INT 2
39989: ST_TO_ADDR
// hc_gallery :=  ;
39990: LD_ADDR_OWVAR 33
39994: PUSH
39995: LD_STRING 
39997: ST_TO_ADDR
// hc_name :=  ;
39998: LD_ADDR_OWVAR 26
40002: PUSH
40003: LD_STRING 
40005: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
40006: LD_INT 1
40008: PPUSH
40009: LD_INT 11
40011: PPUSH
40012: LD_INT 10
40014: PPUSH
40015: CALL_OW 380
// un := CreateHuman ;
40019: LD_ADDR_VAR 0 1
40023: PUSH
40024: CALL_OW 44
40028: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40029: LD_VAR 0 1
40033: PPUSH
40034: LD_INT 1
40036: PPUSH
40037: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
40041: LD_INT 35
40043: PPUSH
40044: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
40048: LD_VAR 0 1
40052: PPUSH
40053: LD_INT 22
40055: PUSH
40056: LD_OWVAR 2
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PPUSH
40065: CALL_OW 69
40069: PPUSH
40070: LD_VAR 0 1
40074: PPUSH
40075: CALL_OW 74
40079: PPUSH
40080: CALL_OW 115
// until IsDead ( un ) ;
40084: LD_VAR 0 1
40088: PPUSH
40089: CALL_OW 301
40093: IFFALSE 40041
// end ;
40095: PPOPN 1
40097: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
40098: LD_EXP 71
40102: PUSH
40103: LD_EXP 111
40107: AND
40108: IFFALSE 40120
40110: GO 40112
40112: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
40113: LD_STRING earthquake(getX(game), 0, 32)
40115: PPUSH
40116: CALL_OW 559
40120: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
40121: LD_EXP 71
40125: PUSH
40126: LD_EXP 112
40130: AND
40131: IFFALSE 40222
40133: GO 40135
40135: DISABLE
40136: LD_INT 0
40138: PPUSH
// begin enable ;
40139: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
40140: LD_ADDR_VAR 0 1
40144: PUSH
40145: LD_INT 22
40147: PUSH
40148: LD_OWVAR 2
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: LD_INT 21
40159: PUSH
40160: LD_INT 2
40162: PUSH
40163: EMPTY
40164: LIST
40165: LIST
40166: PUSH
40167: LD_INT 33
40169: PUSH
40170: LD_INT 3
40172: PUSH
40173: EMPTY
40174: LIST
40175: LIST
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: LIST
40181: PPUSH
40182: CALL_OW 69
40186: ST_TO_ADDR
// if not tmp then
40187: LD_VAR 0 1
40191: NOT
40192: IFFALSE 40196
// exit ;
40194: GO 40222
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40196: LD_VAR 0 1
40200: PUSH
40201: LD_INT 1
40203: PPUSH
40204: LD_VAR 0 1
40208: PPUSH
40209: CALL_OW 12
40213: ARRAY
40214: PPUSH
40215: LD_INT 1
40217: PPUSH
40218: CALL_OW 234
// end ;
40222: PPOPN 1
40224: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
40225: LD_EXP 71
40229: PUSH
40230: LD_EXP 113
40234: AND
40235: IFFALSE 40376
40237: GO 40239
40239: DISABLE
40240: LD_INT 0
40242: PPUSH
40243: PPUSH
40244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40245: LD_ADDR_VAR 0 3
40249: PUSH
40250: LD_INT 22
40252: PUSH
40253: LD_OWVAR 2
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 25
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PPUSH
40276: CALL_OW 69
40280: ST_TO_ADDR
// if not tmp then
40281: LD_VAR 0 3
40285: NOT
40286: IFFALSE 40290
// exit ;
40288: GO 40376
// un := tmp [ rand ( 1 , tmp ) ] ;
40290: LD_ADDR_VAR 0 2
40294: PUSH
40295: LD_VAR 0 3
40299: PUSH
40300: LD_INT 1
40302: PPUSH
40303: LD_VAR 0 3
40307: PPUSH
40308: CALL_OW 12
40312: ARRAY
40313: ST_TO_ADDR
// if Crawls ( un ) then
40314: LD_VAR 0 2
40318: PPUSH
40319: CALL_OW 318
40323: IFFALSE 40334
// ComWalk ( un ) ;
40325: LD_VAR 0 2
40329: PPUSH
40330: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
40334: LD_VAR 0 2
40338: PPUSH
40339: LD_INT 9
40341: PPUSH
40342: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
40346: LD_INT 28
40348: PPUSH
40349: LD_OWVAR 2
40353: PPUSH
40354: LD_INT 2
40356: PPUSH
40357: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
40361: LD_INT 29
40363: PPUSH
40364: LD_OWVAR 2
40368: PPUSH
40369: LD_INT 2
40371: PPUSH
40372: CALL_OW 322
// end ;
40376: PPOPN 3
40378: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40379: LD_EXP 71
40383: PUSH
40384: LD_EXP 114
40388: AND
40389: IFFALSE 40500
40391: GO 40393
40393: DISABLE
40394: LD_INT 0
40396: PPUSH
40397: PPUSH
40398: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40399: LD_ADDR_VAR 0 3
40403: PUSH
40404: LD_INT 22
40406: PUSH
40407: LD_OWVAR 2
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 25
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PPUSH
40430: CALL_OW 69
40434: ST_TO_ADDR
// if not tmp then
40435: LD_VAR 0 3
40439: NOT
40440: IFFALSE 40444
// exit ;
40442: GO 40500
// un := tmp [ rand ( 1 , tmp ) ] ;
40444: LD_ADDR_VAR 0 2
40448: PUSH
40449: LD_VAR 0 3
40453: PUSH
40454: LD_INT 1
40456: PPUSH
40457: LD_VAR 0 3
40461: PPUSH
40462: CALL_OW 12
40466: ARRAY
40467: ST_TO_ADDR
// if Crawls ( un ) then
40468: LD_VAR 0 2
40472: PPUSH
40473: CALL_OW 318
40477: IFFALSE 40488
// ComWalk ( un ) ;
40479: LD_VAR 0 2
40483: PPUSH
40484: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40488: LD_VAR 0 2
40492: PPUSH
40493: LD_INT 8
40495: PPUSH
40496: CALL_OW 336
// end ;
40500: PPOPN 3
40502: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40503: LD_EXP 71
40507: PUSH
40508: LD_EXP 115
40512: AND
40513: IFFALSE 40657
40515: GO 40517
40517: DISABLE
40518: LD_INT 0
40520: PPUSH
40521: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40522: LD_ADDR_VAR 0 2
40526: PUSH
40527: LD_INT 22
40529: PUSH
40530: LD_OWVAR 2
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 21
40541: PUSH
40542: LD_INT 2
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: PUSH
40552: LD_INT 34
40554: PUSH
40555: LD_INT 12
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 34
40564: PUSH
40565: LD_INT 51
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 34
40574: PUSH
40575: LD_INT 32
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: EMPTY
40583: LIST
40584: LIST
40585: LIST
40586: LIST
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: LIST
40592: PPUSH
40593: CALL_OW 69
40597: ST_TO_ADDR
// if not tmp then
40598: LD_VAR 0 2
40602: NOT
40603: IFFALSE 40607
// exit ;
40605: GO 40657
// for i in tmp do
40607: LD_ADDR_VAR 0 1
40611: PUSH
40612: LD_VAR 0 2
40616: PUSH
40617: FOR_IN
40618: IFFALSE 40655
// if GetCargo ( i , mat_artifact ) = 0 then
40620: LD_VAR 0 1
40624: PPUSH
40625: LD_INT 4
40627: PPUSH
40628: CALL_OW 289
40632: PUSH
40633: LD_INT 0
40635: EQUAL
40636: IFFALSE 40653
// SetCargo ( i , mat_siberit , 100 ) ;
40638: LD_VAR 0 1
40642: PPUSH
40643: LD_INT 3
40645: PPUSH
40646: LD_INT 100
40648: PPUSH
40649: CALL_OW 290
40653: GO 40617
40655: POP
40656: POP
// end ;
40657: PPOPN 2
40659: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40660: LD_EXP 71
40664: PUSH
40665: LD_EXP 116
40669: AND
40670: IFFALSE 40853
40672: GO 40674
40674: DISABLE
40675: LD_INT 0
40677: PPUSH
40678: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40679: LD_ADDR_VAR 0 2
40683: PUSH
40684: LD_INT 22
40686: PUSH
40687: LD_OWVAR 2
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PPUSH
40696: CALL_OW 69
40700: ST_TO_ADDR
// if not tmp then
40701: LD_VAR 0 2
40705: NOT
40706: IFFALSE 40710
// exit ;
40708: GO 40853
// for i := 1 to 2 do
40710: LD_ADDR_VAR 0 1
40714: PUSH
40715: DOUBLE
40716: LD_INT 1
40718: DEC
40719: ST_TO_ADDR
40720: LD_INT 2
40722: PUSH
40723: FOR_TO
40724: IFFALSE 40851
// begin uc_side := your_side ;
40726: LD_ADDR_OWVAR 20
40730: PUSH
40731: LD_OWVAR 2
40735: ST_TO_ADDR
// uc_nation := nation_american ;
40736: LD_ADDR_OWVAR 21
40740: PUSH
40741: LD_INT 1
40743: ST_TO_ADDR
// vc_chassis := us_morphling ;
40744: LD_ADDR_OWVAR 37
40748: PUSH
40749: LD_INT 5
40751: ST_TO_ADDR
// vc_engine := engine_siberite ;
40752: LD_ADDR_OWVAR 39
40756: PUSH
40757: LD_INT 3
40759: ST_TO_ADDR
// vc_control := control_computer ;
40760: LD_ADDR_OWVAR 38
40764: PUSH
40765: LD_INT 3
40767: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40768: LD_ADDR_OWVAR 40
40772: PUSH
40773: LD_INT 10
40775: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40776: LD_VAR 0 2
40780: PUSH
40781: LD_INT 1
40783: ARRAY
40784: PPUSH
40785: CALL_OW 310
40789: NOT
40790: IFFALSE 40837
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40792: CALL_OW 45
40796: PPUSH
40797: LD_VAR 0 2
40801: PUSH
40802: LD_INT 1
40804: ARRAY
40805: PPUSH
40806: CALL_OW 250
40810: PPUSH
40811: LD_VAR 0 2
40815: PUSH
40816: LD_INT 1
40818: ARRAY
40819: PPUSH
40820: CALL_OW 251
40824: PPUSH
40825: LD_INT 12
40827: PPUSH
40828: LD_INT 1
40830: PPUSH
40831: CALL_OW 50
40835: GO 40849
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
40837: CALL_OW 45
40841: PPUSH
40842: LD_INT 1
40844: PPUSH
40845: CALL_OW 51
// end ;
40849: GO 40723
40851: POP
40852: POP
// end ;
40853: PPOPN 2
40855: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
40856: LD_EXP 71
40860: PUSH
40861: LD_EXP 117
40865: AND
40866: IFFALSE 41088
40868: GO 40870
40870: DISABLE
40871: LD_INT 0
40873: PPUSH
40874: PPUSH
40875: PPUSH
40876: PPUSH
40877: PPUSH
40878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40879: LD_ADDR_VAR 0 6
40883: PUSH
40884: LD_INT 22
40886: PUSH
40887: LD_OWVAR 2
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 21
40898: PUSH
40899: LD_INT 1
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 3
40908: PUSH
40909: LD_INT 23
40911: PUSH
40912: LD_INT 0
40914: PUSH
40915: EMPTY
40916: LIST
40917: LIST
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: LIST
40927: PPUSH
40928: CALL_OW 69
40932: ST_TO_ADDR
// if not tmp then
40933: LD_VAR 0 6
40937: NOT
40938: IFFALSE 40942
// exit ;
40940: GO 41088
// s1 := rand ( 1 , 4 ) ;
40942: LD_ADDR_VAR 0 2
40946: PUSH
40947: LD_INT 1
40949: PPUSH
40950: LD_INT 4
40952: PPUSH
40953: CALL_OW 12
40957: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
40958: LD_ADDR_VAR 0 4
40962: PUSH
40963: LD_VAR 0 6
40967: PUSH
40968: LD_INT 1
40970: ARRAY
40971: PPUSH
40972: LD_VAR 0 2
40976: PPUSH
40977: CALL_OW 259
40981: ST_TO_ADDR
// if s1 = 1 then
40982: LD_VAR 0 2
40986: PUSH
40987: LD_INT 1
40989: EQUAL
40990: IFFALSE 41010
// s2 := rand ( 2 , 4 ) else
40992: LD_ADDR_VAR 0 3
40996: PUSH
40997: LD_INT 2
40999: PPUSH
41000: LD_INT 4
41002: PPUSH
41003: CALL_OW 12
41007: ST_TO_ADDR
41008: GO 41018
// s2 := 1 ;
41010: LD_ADDR_VAR 0 3
41014: PUSH
41015: LD_INT 1
41017: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
41018: LD_ADDR_VAR 0 5
41022: PUSH
41023: LD_VAR 0 6
41027: PUSH
41028: LD_INT 1
41030: ARRAY
41031: PPUSH
41032: LD_VAR 0 3
41036: PPUSH
41037: CALL_OW 259
41041: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
41042: LD_VAR 0 6
41046: PUSH
41047: LD_INT 1
41049: ARRAY
41050: PPUSH
41051: LD_VAR 0 2
41055: PPUSH
41056: LD_VAR 0 5
41060: PPUSH
41061: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
41065: LD_VAR 0 6
41069: PUSH
41070: LD_INT 1
41072: ARRAY
41073: PPUSH
41074: LD_VAR 0 3
41078: PPUSH
41079: LD_VAR 0 4
41083: PPUSH
41084: CALL_OW 237
// end ;
41088: PPOPN 6
41090: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
41091: LD_EXP 71
41095: PUSH
41096: LD_EXP 118
41100: AND
41101: IFFALSE 41180
41103: GO 41105
41105: DISABLE
41106: LD_INT 0
41108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
41109: LD_ADDR_VAR 0 1
41113: PUSH
41114: LD_INT 22
41116: PUSH
41117: LD_OWVAR 2
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 30
41128: PUSH
41129: LD_INT 3
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PPUSH
41140: CALL_OW 69
41144: ST_TO_ADDR
// if not tmp then
41145: LD_VAR 0 1
41149: NOT
41150: IFFALSE 41154
// exit ;
41152: GO 41180
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
41154: LD_VAR 0 1
41158: PUSH
41159: LD_INT 1
41161: PPUSH
41162: LD_VAR 0 1
41166: PPUSH
41167: CALL_OW 12
41171: ARRAY
41172: PPUSH
41173: LD_INT 1
41175: PPUSH
41176: CALL_OW 234
// end ;
41180: PPOPN 1
41182: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
41183: LD_EXP 71
41187: PUSH
41188: LD_EXP 119
41192: AND
41193: IFFALSE 41305
41195: GO 41197
41197: DISABLE
41198: LD_INT 0
41200: PPUSH
41201: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
41202: LD_ADDR_VAR 0 2
41206: PUSH
41207: LD_INT 22
41209: PUSH
41210: LD_OWVAR 2
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 2
41221: PUSH
41222: LD_INT 30
41224: PUSH
41225: LD_INT 27
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 30
41234: PUSH
41235: LD_INT 26
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 30
41244: PUSH
41245: LD_INT 28
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PPUSH
41262: CALL_OW 69
41266: ST_TO_ADDR
// if not tmp then
41267: LD_VAR 0 2
41271: NOT
41272: IFFALSE 41276
// exit ;
41274: GO 41305
// for i in tmp do
41276: LD_ADDR_VAR 0 1
41280: PUSH
41281: LD_VAR 0 2
41285: PUSH
41286: FOR_IN
41287: IFFALSE 41303
// SetLives ( i , 1 ) ;
41289: LD_VAR 0 1
41293: PPUSH
41294: LD_INT 1
41296: PPUSH
41297: CALL_OW 234
41301: GO 41286
41303: POP
41304: POP
// end ;
41305: PPOPN 2
41307: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
41308: LD_EXP 71
41312: PUSH
41313: LD_EXP 120
41317: AND
41318: IFFALSE 41605
41320: GO 41322
41322: DISABLE
41323: LD_INT 0
41325: PPUSH
41326: PPUSH
41327: PPUSH
// begin i := rand ( 1 , 7 ) ;
41328: LD_ADDR_VAR 0 1
41332: PUSH
41333: LD_INT 1
41335: PPUSH
41336: LD_INT 7
41338: PPUSH
41339: CALL_OW 12
41343: ST_TO_ADDR
// case i of 1 :
41344: LD_VAR 0 1
41348: PUSH
41349: LD_INT 1
41351: DOUBLE
41352: EQUAL
41353: IFTRUE 41357
41355: GO 41367
41357: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
41358: LD_STRING earthquake(getX(game), 0, 32)
41360: PPUSH
41361: CALL_OW 559
41365: GO 41605
41367: LD_INT 2
41369: DOUBLE
41370: EQUAL
41371: IFTRUE 41375
41373: GO 41389
41375: POP
// begin ToLua ( displayStucuk(); ) ;
41376: LD_STRING displayStucuk();
41378: PPUSH
41379: CALL_OW 559
// ResetFog ;
41383: CALL_OW 335
// end ; 3 :
41387: GO 41605
41389: LD_INT 3
41391: DOUBLE
41392: EQUAL
41393: IFTRUE 41397
41395: GO 41501
41397: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41398: LD_ADDR_VAR 0 2
41402: PUSH
41403: LD_INT 22
41405: PUSH
41406: LD_OWVAR 2
41410: PUSH
41411: EMPTY
41412: LIST
41413: LIST
41414: PUSH
41415: LD_INT 25
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PPUSH
41429: CALL_OW 69
41433: ST_TO_ADDR
// if not tmp then
41434: LD_VAR 0 2
41438: NOT
41439: IFFALSE 41443
// exit ;
41441: GO 41605
// un := tmp [ rand ( 1 , tmp ) ] ;
41443: LD_ADDR_VAR 0 3
41447: PUSH
41448: LD_VAR 0 2
41452: PUSH
41453: LD_INT 1
41455: PPUSH
41456: LD_VAR 0 2
41460: PPUSH
41461: CALL_OW 12
41465: ARRAY
41466: ST_TO_ADDR
// if Crawls ( un ) then
41467: LD_VAR 0 3
41471: PPUSH
41472: CALL_OW 318
41476: IFFALSE 41487
// ComWalk ( un ) ;
41478: LD_VAR 0 3
41482: PPUSH
41483: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41487: LD_VAR 0 3
41491: PPUSH
41492: LD_INT 8
41494: PPUSH
41495: CALL_OW 336
// end ; 4 :
41499: GO 41605
41501: LD_INT 4
41503: DOUBLE
41504: EQUAL
41505: IFTRUE 41509
41507: GO 41583
41509: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41510: LD_ADDR_VAR 0 2
41514: PUSH
41515: LD_INT 22
41517: PUSH
41518: LD_OWVAR 2
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 30
41529: PUSH
41530: LD_INT 29
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: EMPTY
41538: LIST
41539: LIST
41540: PPUSH
41541: CALL_OW 69
41545: ST_TO_ADDR
// if not tmp then
41546: LD_VAR 0 2
41550: NOT
41551: IFFALSE 41555
// exit ;
41553: GO 41605
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41555: LD_VAR 0 2
41559: PUSH
41560: LD_INT 1
41562: ARRAY
41563: PPUSH
41564: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41568: LD_VAR 0 2
41572: PUSH
41573: LD_INT 1
41575: ARRAY
41576: PPUSH
41577: CALL_OW 65
// end ; 5 .. 7 :
41581: GO 41605
41583: LD_INT 5
41585: DOUBLE
41586: GREATEREQUAL
41587: IFFALSE 41595
41589: LD_INT 7
41591: DOUBLE
41592: LESSEQUAL
41593: IFTRUE 41597
41595: GO 41604
41597: POP
// StreamSibBomb ; end ;
41598: CALL 37842 0 0
41602: GO 41605
41604: POP
// end ;
41605: PPOPN 3
41607: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41608: LD_EXP 71
41612: PUSH
41613: LD_EXP 121
41617: AND
41618: IFFALSE 41774
41620: GO 41622
41622: DISABLE
41623: LD_INT 0
41625: PPUSH
41626: PPUSH
41627: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41628: LD_ADDR_VAR 0 2
41632: PUSH
41633: LD_INT 81
41635: PUSH
41636: LD_OWVAR 2
41640: PUSH
41641: EMPTY
41642: LIST
41643: LIST
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: LD_INT 21
41650: PUSH
41651: LD_INT 1
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: PUSH
41658: LD_INT 21
41660: PUSH
41661: LD_INT 2
41663: PUSH
41664: EMPTY
41665: LIST
41666: LIST
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: LIST
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PPUSH
41677: CALL_OW 69
41681: ST_TO_ADDR
// if not tmp then
41682: LD_VAR 0 2
41686: NOT
41687: IFFALSE 41691
// exit ;
41689: GO 41774
// p := 0 ;
41691: LD_ADDR_VAR 0 3
41695: PUSH
41696: LD_INT 0
41698: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41699: LD_INT 35
41701: PPUSH
41702: CALL_OW 67
// p := p + 1 ;
41706: LD_ADDR_VAR 0 3
41710: PUSH
41711: LD_VAR 0 3
41715: PUSH
41716: LD_INT 1
41718: PLUS
41719: ST_TO_ADDR
// for i in tmp do
41720: LD_ADDR_VAR 0 1
41724: PUSH
41725: LD_VAR 0 2
41729: PUSH
41730: FOR_IN
41731: IFFALSE 41762
// if GetLives ( i ) < 1000 then
41733: LD_VAR 0 1
41737: PPUSH
41738: CALL_OW 256
41742: PUSH
41743: LD_INT 1000
41745: LESS
41746: IFFALSE 41760
// SetLives ( i , 1000 ) ;
41748: LD_VAR 0 1
41752: PPUSH
41753: LD_INT 1000
41755: PPUSH
41756: CALL_OW 234
41760: GO 41730
41762: POP
41763: POP
// until p > 20 ;
41764: LD_VAR 0 3
41768: PUSH
41769: LD_INT 20
41771: GREATER
41772: IFFALSE 41699
// end ;
41774: PPOPN 3
41776: END
// every 0 0$1 trigger StreamModeActive and sTime do
41777: LD_EXP 71
41781: PUSH
41782: LD_EXP 122
41786: AND
41787: IFFALSE 41822
41789: GO 41791
41791: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41792: LD_INT 28
41794: PPUSH
41795: LD_OWVAR 2
41799: PPUSH
41800: LD_INT 2
41802: PPUSH
41803: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
41807: LD_INT 30
41809: PPUSH
41810: LD_OWVAR 2
41814: PPUSH
41815: LD_INT 2
41817: PPUSH
41818: CALL_OW 322
// end ;
41822: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
41823: LD_EXP 71
41827: PUSH
41828: LD_EXP 123
41832: AND
41833: IFFALSE 41954
41835: GO 41837
41837: DISABLE
41838: LD_INT 0
41840: PPUSH
41841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41842: LD_ADDR_VAR 0 2
41846: PUSH
41847: LD_INT 22
41849: PUSH
41850: LD_OWVAR 2
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 21
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 3
41871: PUSH
41872: LD_INT 23
41874: PUSH
41875: LD_INT 0
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: EMPTY
41883: LIST
41884: LIST
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: LIST
41890: PPUSH
41891: CALL_OW 69
41895: ST_TO_ADDR
// if not tmp then
41896: LD_VAR 0 2
41900: NOT
41901: IFFALSE 41905
// exit ;
41903: GO 41954
// for i in tmp do
41905: LD_ADDR_VAR 0 1
41909: PUSH
41910: LD_VAR 0 2
41914: PUSH
41915: FOR_IN
41916: IFFALSE 41952
// begin if Crawls ( i ) then
41918: LD_VAR 0 1
41922: PPUSH
41923: CALL_OW 318
41927: IFFALSE 41938
// ComWalk ( i ) ;
41929: LD_VAR 0 1
41933: PPUSH
41934: CALL_OW 138
// SetClass ( i , 2 ) ;
41938: LD_VAR 0 1
41942: PPUSH
41943: LD_INT 2
41945: PPUSH
41946: CALL_OW 336
// end ;
41950: GO 41915
41952: POP
41953: POP
// end ;
41954: PPOPN 2
41956: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
41957: LD_EXP 71
41961: PUSH
41962: LD_EXP 124
41966: AND
41967: IFFALSE 42255
41969: GO 41971
41971: DISABLE
41972: LD_INT 0
41974: PPUSH
41975: PPUSH
41976: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
41977: LD_OWVAR 2
41981: PPUSH
41982: LD_INT 9
41984: PPUSH
41985: LD_INT 1
41987: PPUSH
41988: LD_INT 1
41990: PPUSH
41991: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
41995: LD_INT 9
41997: PPUSH
41998: LD_OWVAR 2
42002: PPUSH
42003: CALL_OW 343
// uc_side := 9 ;
42007: LD_ADDR_OWVAR 20
42011: PUSH
42012: LD_INT 9
42014: ST_TO_ADDR
// uc_nation := 2 ;
42015: LD_ADDR_OWVAR 21
42019: PUSH
42020: LD_INT 2
42022: ST_TO_ADDR
// hc_name := Dark Warrior ;
42023: LD_ADDR_OWVAR 26
42027: PUSH
42028: LD_STRING Dark Warrior
42030: ST_TO_ADDR
// hc_gallery :=  ;
42031: LD_ADDR_OWVAR 33
42035: PUSH
42036: LD_STRING 
42038: ST_TO_ADDR
// hc_noskilllimit := true ;
42039: LD_ADDR_OWVAR 76
42043: PUSH
42044: LD_INT 1
42046: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
42047: LD_ADDR_OWVAR 31
42051: PUSH
42052: LD_INT 30
42054: PUSH
42055: LD_INT 30
42057: PUSH
42058: LD_INT 30
42060: PUSH
42061: LD_INT 30
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: LIST
42068: LIST
42069: ST_TO_ADDR
// un := CreateHuman ;
42070: LD_ADDR_VAR 0 3
42074: PUSH
42075: CALL_OW 44
42079: ST_TO_ADDR
// hc_noskilllimit := false ;
42080: LD_ADDR_OWVAR 76
42084: PUSH
42085: LD_INT 0
42087: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
42088: LD_VAR 0 3
42092: PPUSH
42093: LD_INT 1
42095: PPUSH
42096: CALL_OW 51
// ToLua ( playRanger() ) ;
42100: LD_STRING playRanger()
42102: PPUSH
42103: CALL_OW 559
// p := 0 ;
42107: LD_ADDR_VAR 0 2
42111: PUSH
42112: LD_INT 0
42114: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42115: LD_INT 35
42117: PPUSH
42118: CALL_OW 67
// p := p + 1 ;
42122: LD_ADDR_VAR 0 2
42126: PUSH
42127: LD_VAR 0 2
42131: PUSH
42132: LD_INT 1
42134: PLUS
42135: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
42136: LD_VAR 0 3
42140: PPUSH
42141: CALL_OW 256
42145: PUSH
42146: LD_INT 1000
42148: LESS
42149: IFFALSE 42163
// SetLives ( un , 1000 ) ;
42151: LD_VAR 0 3
42155: PPUSH
42156: LD_INT 1000
42158: PPUSH
42159: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
42163: LD_VAR 0 3
42167: PPUSH
42168: LD_INT 81
42170: PUSH
42171: LD_OWVAR 2
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 91
42182: PUSH
42183: LD_VAR 0 3
42187: PUSH
42188: LD_INT 30
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: LIST
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PPUSH
42200: CALL_OW 69
42204: PPUSH
42205: LD_VAR 0 3
42209: PPUSH
42210: CALL_OW 74
42214: PPUSH
42215: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
42219: LD_VAR 0 2
42223: PUSH
42224: LD_INT 80
42226: GREATER
42227: PUSH
42228: LD_VAR 0 3
42232: PPUSH
42233: CALL_OW 301
42237: OR
42238: IFFALSE 42115
// if un then
42240: LD_VAR 0 3
42244: IFFALSE 42255
// RemoveUnit ( un ) ;
42246: LD_VAR 0 3
42250: PPUSH
42251: CALL_OW 64
// end ;
42255: PPOPN 3
42257: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
42258: LD_EXP 125
42262: IFFALSE 42378
42264: GO 42266
42266: DISABLE
42267: LD_INT 0
42269: PPUSH
42270: PPUSH
42271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
42272: LD_ADDR_VAR 0 2
42276: PUSH
42277: LD_INT 81
42279: PUSH
42280: LD_OWVAR 2
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 21
42291: PUSH
42292: LD_INT 1
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: EMPTY
42300: LIST
42301: LIST
42302: PPUSH
42303: CALL_OW 69
42307: ST_TO_ADDR
// ToLua ( playComputer() ) ;
42308: LD_STRING playComputer()
42310: PPUSH
42311: CALL_OW 559
// if not tmp then
42315: LD_VAR 0 2
42319: NOT
42320: IFFALSE 42324
// exit ;
42322: GO 42378
// for i in tmp do
42324: LD_ADDR_VAR 0 1
42328: PUSH
42329: LD_VAR 0 2
42333: PUSH
42334: FOR_IN
42335: IFFALSE 42376
// for j := 1 to 4 do
42337: LD_ADDR_VAR 0 3
42341: PUSH
42342: DOUBLE
42343: LD_INT 1
42345: DEC
42346: ST_TO_ADDR
42347: LD_INT 4
42349: PUSH
42350: FOR_TO
42351: IFFALSE 42372
// SetSkill ( i , j , 10 ) ;
42353: LD_VAR 0 1
42357: PPUSH
42358: LD_VAR 0 3
42362: PPUSH
42363: LD_INT 10
42365: PPUSH
42366: CALL_OW 237
42370: GO 42350
42372: POP
42373: POP
42374: GO 42334
42376: POP
42377: POP
// end ;
42378: PPOPN 3
42380: END
// every 0 0$1 trigger s30 do var i , tmp ;
42381: LD_EXP 126
42385: IFFALSE 42454
42387: GO 42389
42389: DISABLE
42390: LD_INT 0
42392: PPUSH
42393: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42394: LD_ADDR_VAR 0 2
42398: PUSH
42399: LD_INT 22
42401: PUSH
42402: LD_OWVAR 2
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PPUSH
42411: CALL_OW 69
42415: ST_TO_ADDR
// if not tmp then
42416: LD_VAR 0 2
42420: NOT
42421: IFFALSE 42425
// exit ;
42423: GO 42454
// for i in tmp do
42425: LD_ADDR_VAR 0 1
42429: PUSH
42430: LD_VAR 0 2
42434: PUSH
42435: FOR_IN
42436: IFFALSE 42452
// SetLives ( i , 300 ) ;
42438: LD_VAR 0 1
42442: PPUSH
42443: LD_INT 300
42445: PPUSH
42446: CALL_OW 234
42450: GO 42435
42452: POP
42453: POP
// end ;
42454: PPOPN 2
42456: END
// every 0 0$1 trigger s60 do var i , tmp ;
42457: LD_EXP 127
42461: IFFALSE 42530
42463: GO 42465
42465: DISABLE
42466: LD_INT 0
42468: PPUSH
42469: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42470: LD_ADDR_VAR 0 2
42474: PUSH
42475: LD_INT 22
42477: PUSH
42478: LD_OWVAR 2
42482: PUSH
42483: EMPTY
42484: LIST
42485: LIST
42486: PPUSH
42487: CALL_OW 69
42491: ST_TO_ADDR
// if not tmp then
42492: LD_VAR 0 2
42496: NOT
42497: IFFALSE 42501
// exit ;
42499: GO 42530
// for i in tmp do
42501: LD_ADDR_VAR 0 1
42505: PUSH
42506: LD_VAR 0 2
42510: PUSH
42511: FOR_IN
42512: IFFALSE 42528
// SetLives ( i , 600 ) ;
42514: LD_VAR 0 1
42518: PPUSH
42519: LD_INT 600
42521: PPUSH
42522: CALL_OW 234
42526: GO 42511
42528: POP
42529: POP
// end ;
42530: PPOPN 2
42532: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42533: LD_INT 0
42535: PPUSH
// case cmd of 301 :
42536: LD_VAR 0 1
42540: PUSH
42541: LD_INT 301
42543: DOUBLE
42544: EQUAL
42545: IFTRUE 42549
42547: GO 42581
42549: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42550: LD_VAR 0 6
42554: PPUSH
42555: LD_VAR 0 7
42559: PPUSH
42560: LD_VAR 0 8
42564: PPUSH
42565: LD_VAR 0 4
42569: PPUSH
42570: LD_VAR 0 5
42574: PPUSH
42575: CALL 43782 0 5
42579: GO 42702
42581: LD_INT 302
42583: DOUBLE
42584: EQUAL
42585: IFTRUE 42589
42587: GO 42626
42589: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42590: LD_VAR 0 6
42594: PPUSH
42595: LD_VAR 0 7
42599: PPUSH
42600: LD_VAR 0 8
42604: PPUSH
42605: LD_VAR 0 9
42609: PPUSH
42610: LD_VAR 0 4
42614: PPUSH
42615: LD_VAR 0 5
42619: PPUSH
42620: CALL 43873 0 6
42624: GO 42702
42626: LD_INT 303
42628: DOUBLE
42629: EQUAL
42630: IFTRUE 42634
42632: GO 42671
42634: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42635: LD_VAR 0 6
42639: PPUSH
42640: LD_VAR 0 7
42644: PPUSH
42645: LD_VAR 0 8
42649: PPUSH
42650: LD_VAR 0 9
42654: PPUSH
42655: LD_VAR 0 4
42659: PPUSH
42660: LD_VAR 0 5
42664: PPUSH
42665: CALL 42707 0 6
42669: GO 42702
42671: LD_INT 304
42673: DOUBLE
42674: EQUAL
42675: IFTRUE 42679
42677: GO 42701
42679: POP
// hHackTeleport ( unit , x , y ) ; end ;
42680: LD_VAR 0 2
42684: PPUSH
42685: LD_VAR 0 4
42689: PPUSH
42690: LD_VAR 0 5
42694: PPUSH
42695: CALL 44466 0 3
42699: GO 42702
42701: POP
// end ;
42702: LD_VAR 0 12
42706: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42707: LD_INT 0
42709: PPUSH
42710: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42711: LD_VAR 0 1
42715: PUSH
42716: LD_INT 1
42718: LESS
42719: PUSH
42720: LD_VAR 0 1
42724: PUSH
42725: LD_INT 3
42727: GREATER
42728: OR
42729: PUSH
42730: LD_VAR 0 5
42734: PPUSH
42735: LD_VAR 0 6
42739: PPUSH
42740: CALL_OW 428
42744: OR
42745: IFFALSE 42749
// exit ;
42747: GO 43469
// uc_side := your_side ;
42749: LD_ADDR_OWVAR 20
42753: PUSH
42754: LD_OWVAR 2
42758: ST_TO_ADDR
// uc_nation := nation ;
42759: LD_ADDR_OWVAR 21
42763: PUSH
42764: LD_VAR 0 1
42768: ST_TO_ADDR
// bc_level = 1 ;
42769: LD_ADDR_OWVAR 43
42773: PUSH
42774: LD_INT 1
42776: ST_TO_ADDR
// case btype of 1 :
42777: LD_VAR 0 2
42781: PUSH
42782: LD_INT 1
42784: DOUBLE
42785: EQUAL
42786: IFTRUE 42790
42788: GO 42801
42790: POP
// bc_type := b_depot ; 2 :
42791: LD_ADDR_OWVAR 42
42795: PUSH
42796: LD_INT 0
42798: ST_TO_ADDR
42799: GO 43413
42801: LD_INT 2
42803: DOUBLE
42804: EQUAL
42805: IFTRUE 42809
42807: GO 42820
42809: POP
// bc_type := b_warehouse ; 3 :
42810: LD_ADDR_OWVAR 42
42814: PUSH
42815: LD_INT 1
42817: ST_TO_ADDR
42818: GO 43413
42820: LD_INT 3
42822: DOUBLE
42823: EQUAL
42824: IFTRUE 42828
42826: GO 42839
42828: POP
// bc_type := b_lab ; 4 .. 9 :
42829: LD_ADDR_OWVAR 42
42833: PUSH
42834: LD_INT 6
42836: ST_TO_ADDR
42837: GO 43413
42839: LD_INT 4
42841: DOUBLE
42842: GREATEREQUAL
42843: IFFALSE 42851
42845: LD_INT 9
42847: DOUBLE
42848: LESSEQUAL
42849: IFTRUE 42853
42851: GO 42905
42853: POP
// begin bc_type := b_lab_half ;
42854: LD_ADDR_OWVAR 42
42858: PUSH
42859: LD_INT 7
42861: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
42862: LD_ADDR_OWVAR 44
42866: PUSH
42867: LD_INT 10
42869: PUSH
42870: LD_INT 11
42872: PUSH
42873: LD_INT 12
42875: PUSH
42876: LD_INT 15
42878: PUSH
42879: LD_INT 14
42881: PUSH
42882: LD_INT 13
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: PUSH
42893: LD_VAR 0 2
42897: PUSH
42898: LD_INT 3
42900: MINUS
42901: ARRAY
42902: ST_TO_ADDR
// end ; 10 .. 13 :
42903: GO 43413
42905: LD_INT 10
42907: DOUBLE
42908: GREATEREQUAL
42909: IFFALSE 42917
42911: LD_INT 13
42913: DOUBLE
42914: LESSEQUAL
42915: IFTRUE 42919
42917: GO 42996
42919: POP
// begin bc_type := b_lab_full ;
42920: LD_ADDR_OWVAR 42
42924: PUSH
42925: LD_INT 8
42927: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
42928: LD_ADDR_OWVAR 44
42932: PUSH
42933: LD_INT 10
42935: PUSH
42936: LD_INT 12
42938: PUSH
42939: LD_INT 14
42941: PUSH
42942: LD_INT 13
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: PUSH
42951: LD_VAR 0 2
42955: PUSH
42956: LD_INT 9
42958: MINUS
42959: ARRAY
42960: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
42961: LD_ADDR_OWVAR 45
42965: PUSH
42966: LD_INT 11
42968: PUSH
42969: LD_INT 15
42971: PUSH
42972: LD_INT 12
42974: PUSH
42975: LD_INT 15
42977: PUSH
42978: EMPTY
42979: LIST
42980: LIST
42981: LIST
42982: LIST
42983: PUSH
42984: LD_VAR 0 2
42988: PUSH
42989: LD_INT 9
42991: MINUS
42992: ARRAY
42993: ST_TO_ADDR
// end ; 14 :
42994: GO 43413
42996: LD_INT 14
42998: DOUBLE
42999: EQUAL
43000: IFTRUE 43004
43002: GO 43015
43004: POP
// bc_type := b_workshop ; 15 :
43005: LD_ADDR_OWVAR 42
43009: PUSH
43010: LD_INT 2
43012: ST_TO_ADDR
43013: GO 43413
43015: LD_INT 15
43017: DOUBLE
43018: EQUAL
43019: IFTRUE 43023
43021: GO 43034
43023: POP
// bc_type := b_factory ; 16 :
43024: LD_ADDR_OWVAR 42
43028: PUSH
43029: LD_INT 3
43031: ST_TO_ADDR
43032: GO 43413
43034: LD_INT 16
43036: DOUBLE
43037: EQUAL
43038: IFTRUE 43042
43040: GO 43053
43042: POP
// bc_type := b_ext_gun ; 17 :
43043: LD_ADDR_OWVAR 42
43047: PUSH
43048: LD_INT 17
43050: ST_TO_ADDR
43051: GO 43413
43053: LD_INT 17
43055: DOUBLE
43056: EQUAL
43057: IFTRUE 43061
43059: GO 43089
43061: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
43062: LD_ADDR_OWVAR 42
43066: PUSH
43067: LD_INT 19
43069: PUSH
43070: LD_INT 23
43072: PUSH
43073: LD_INT 19
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: PUSH
43081: LD_VAR 0 1
43085: ARRAY
43086: ST_TO_ADDR
43087: GO 43413
43089: LD_INT 18
43091: DOUBLE
43092: EQUAL
43093: IFTRUE 43097
43095: GO 43108
43097: POP
// bc_type := b_ext_radar ; 19 :
43098: LD_ADDR_OWVAR 42
43102: PUSH
43103: LD_INT 20
43105: ST_TO_ADDR
43106: GO 43413
43108: LD_INT 19
43110: DOUBLE
43111: EQUAL
43112: IFTRUE 43116
43114: GO 43127
43116: POP
// bc_type := b_ext_radio ; 20 :
43117: LD_ADDR_OWVAR 42
43121: PUSH
43122: LD_INT 22
43124: ST_TO_ADDR
43125: GO 43413
43127: LD_INT 20
43129: DOUBLE
43130: EQUAL
43131: IFTRUE 43135
43133: GO 43146
43135: POP
// bc_type := b_ext_siberium ; 21 :
43136: LD_ADDR_OWVAR 42
43140: PUSH
43141: LD_INT 21
43143: ST_TO_ADDR
43144: GO 43413
43146: LD_INT 21
43148: DOUBLE
43149: EQUAL
43150: IFTRUE 43154
43152: GO 43165
43154: POP
// bc_type := b_ext_computer ; 22 :
43155: LD_ADDR_OWVAR 42
43159: PUSH
43160: LD_INT 24
43162: ST_TO_ADDR
43163: GO 43413
43165: LD_INT 22
43167: DOUBLE
43168: EQUAL
43169: IFTRUE 43173
43171: GO 43184
43173: POP
// bc_type := b_ext_track ; 23 :
43174: LD_ADDR_OWVAR 42
43178: PUSH
43179: LD_INT 16
43181: ST_TO_ADDR
43182: GO 43413
43184: LD_INT 23
43186: DOUBLE
43187: EQUAL
43188: IFTRUE 43192
43190: GO 43203
43192: POP
// bc_type := b_ext_laser ; 24 :
43193: LD_ADDR_OWVAR 42
43197: PUSH
43198: LD_INT 25
43200: ST_TO_ADDR
43201: GO 43413
43203: LD_INT 24
43205: DOUBLE
43206: EQUAL
43207: IFTRUE 43211
43209: GO 43222
43211: POP
// bc_type := b_control_tower ; 25 :
43212: LD_ADDR_OWVAR 42
43216: PUSH
43217: LD_INT 36
43219: ST_TO_ADDR
43220: GO 43413
43222: LD_INT 25
43224: DOUBLE
43225: EQUAL
43226: IFTRUE 43230
43228: GO 43241
43230: POP
// bc_type := b_breastwork ; 26 :
43231: LD_ADDR_OWVAR 42
43235: PUSH
43236: LD_INT 31
43238: ST_TO_ADDR
43239: GO 43413
43241: LD_INT 26
43243: DOUBLE
43244: EQUAL
43245: IFTRUE 43249
43247: GO 43260
43249: POP
// bc_type := b_bunker ; 27 :
43250: LD_ADDR_OWVAR 42
43254: PUSH
43255: LD_INT 32
43257: ST_TO_ADDR
43258: GO 43413
43260: LD_INT 27
43262: DOUBLE
43263: EQUAL
43264: IFTRUE 43268
43266: GO 43279
43268: POP
// bc_type := b_turret ; 28 :
43269: LD_ADDR_OWVAR 42
43273: PUSH
43274: LD_INT 33
43276: ST_TO_ADDR
43277: GO 43413
43279: LD_INT 28
43281: DOUBLE
43282: EQUAL
43283: IFTRUE 43287
43285: GO 43298
43287: POP
// bc_type := b_armoury ; 29 :
43288: LD_ADDR_OWVAR 42
43292: PUSH
43293: LD_INT 4
43295: ST_TO_ADDR
43296: GO 43413
43298: LD_INT 29
43300: DOUBLE
43301: EQUAL
43302: IFTRUE 43306
43304: GO 43317
43306: POP
// bc_type := b_barracks ; 30 :
43307: LD_ADDR_OWVAR 42
43311: PUSH
43312: LD_INT 5
43314: ST_TO_ADDR
43315: GO 43413
43317: LD_INT 30
43319: DOUBLE
43320: EQUAL
43321: IFTRUE 43325
43323: GO 43336
43325: POP
// bc_type := b_solar_power ; 31 :
43326: LD_ADDR_OWVAR 42
43330: PUSH
43331: LD_INT 27
43333: ST_TO_ADDR
43334: GO 43413
43336: LD_INT 31
43338: DOUBLE
43339: EQUAL
43340: IFTRUE 43344
43342: GO 43355
43344: POP
// bc_type := b_oil_power ; 32 :
43345: LD_ADDR_OWVAR 42
43349: PUSH
43350: LD_INT 26
43352: ST_TO_ADDR
43353: GO 43413
43355: LD_INT 32
43357: DOUBLE
43358: EQUAL
43359: IFTRUE 43363
43361: GO 43374
43363: POP
// bc_type := b_siberite_power ; 33 :
43364: LD_ADDR_OWVAR 42
43368: PUSH
43369: LD_INT 28
43371: ST_TO_ADDR
43372: GO 43413
43374: LD_INT 33
43376: DOUBLE
43377: EQUAL
43378: IFTRUE 43382
43380: GO 43393
43382: POP
// bc_type := b_oil_mine ; 34 :
43383: LD_ADDR_OWVAR 42
43387: PUSH
43388: LD_INT 29
43390: ST_TO_ADDR
43391: GO 43413
43393: LD_INT 34
43395: DOUBLE
43396: EQUAL
43397: IFTRUE 43401
43399: GO 43412
43401: POP
// bc_type := b_siberite_mine ; end ;
43402: LD_ADDR_OWVAR 42
43406: PUSH
43407: LD_INT 30
43409: ST_TO_ADDR
43410: GO 43413
43412: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43413: LD_ADDR_VAR 0 8
43417: PUSH
43418: LD_VAR 0 5
43422: PPUSH
43423: LD_VAR 0 6
43427: PPUSH
43428: LD_VAR 0 3
43432: PPUSH
43433: CALL_OW 47
43437: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43438: LD_OWVAR 42
43442: PUSH
43443: LD_INT 32
43445: PUSH
43446: LD_INT 33
43448: PUSH
43449: EMPTY
43450: LIST
43451: LIST
43452: IN
43453: IFFALSE 43469
// PlaceWeaponTurret ( b , weapon ) ;
43455: LD_VAR 0 8
43459: PPUSH
43460: LD_VAR 0 4
43464: PPUSH
43465: CALL_OW 431
// end ;
43469: LD_VAR 0 7
43473: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43474: LD_INT 0
43476: PPUSH
43477: PPUSH
43478: PPUSH
43479: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43480: LD_ADDR_VAR 0 4
43484: PUSH
43485: LD_INT 22
43487: PUSH
43488: LD_OWVAR 2
43492: PUSH
43493: EMPTY
43494: LIST
43495: LIST
43496: PUSH
43497: LD_INT 2
43499: PUSH
43500: LD_INT 30
43502: PUSH
43503: LD_INT 0
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: PUSH
43510: LD_INT 30
43512: PUSH
43513: LD_INT 1
43515: PUSH
43516: EMPTY
43517: LIST
43518: LIST
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: LIST
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PPUSH
43529: CALL_OW 69
43533: ST_TO_ADDR
// if not tmp then
43534: LD_VAR 0 4
43538: NOT
43539: IFFALSE 43543
// exit ;
43541: GO 43602
// for i in tmp do
43543: LD_ADDR_VAR 0 2
43547: PUSH
43548: LD_VAR 0 4
43552: PUSH
43553: FOR_IN
43554: IFFALSE 43600
// for j = 1 to 3 do
43556: LD_ADDR_VAR 0 3
43560: PUSH
43561: DOUBLE
43562: LD_INT 1
43564: DEC
43565: ST_TO_ADDR
43566: LD_INT 3
43568: PUSH
43569: FOR_TO
43570: IFFALSE 43596
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43572: LD_VAR 0 2
43576: PPUSH
43577: CALL_OW 274
43581: PPUSH
43582: LD_VAR 0 3
43586: PPUSH
43587: LD_INT 99999
43589: PPUSH
43590: CALL_OW 277
43594: GO 43569
43596: POP
43597: POP
43598: GO 43553
43600: POP
43601: POP
// end ;
43602: LD_VAR 0 1
43606: RET
// export function hHackSetLevel10 ; var i , j ; begin
43607: LD_INT 0
43609: PPUSH
43610: PPUSH
43611: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43612: LD_ADDR_VAR 0 2
43616: PUSH
43617: LD_INT 21
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PPUSH
43627: CALL_OW 69
43631: PUSH
43632: FOR_IN
43633: IFFALSE 43685
// if IsSelected ( i ) then
43635: LD_VAR 0 2
43639: PPUSH
43640: CALL_OW 306
43644: IFFALSE 43683
// begin for j := 1 to 4 do
43646: LD_ADDR_VAR 0 3
43650: PUSH
43651: DOUBLE
43652: LD_INT 1
43654: DEC
43655: ST_TO_ADDR
43656: LD_INT 4
43658: PUSH
43659: FOR_TO
43660: IFFALSE 43681
// SetSkill ( i , j , 10 ) ;
43662: LD_VAR 0 2
43666: PPUSH
43667: LD_VAR 0 3
43671: PPUSH
43672: LD_INT 10
43674: PPUSH
43675: CALL_OW 237
43679: GO 43659
43681: POP
43682: POP
// end ;
43683: GO 43632
43685: POP
43686: POP
// end ;
43687: LD_VAR 0 1
43691: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43692: LD_INT 0
43694: PPUSH
43695: PPUSH
43696: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43697: LD_ADDR_VAR 0 2
43701: PUSH
43702: LD_INT 22
43704: PUSH
43705: LD_OWVAR 2
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 21
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PPUSH
43728: CALL_OW 69
43732: PUSH
43733: FOR_IN
43734: IFFALSE 43775
// begin for j := 1 to 4 do
43736: LD_ADDR_VAR 0 3
43740: PUSH
43741: DOUBLE
43742: LD_INT 1
43744: DEC
43745: ST_TO_ADDR
43746: LD_INT 4
43748: PUSH
43749: FOR_TO
43750: IFFALSE 43771
// SetSkill ( i , j , 10 ) ;
43752: LD_VAR 0 2
43756: PPUSH
43757: LD_VAR 0 3
43761: PPUSH
43762: LD_INT 10
43764: PPUSH
43765: CALL_OW 237
43769: GO 43749
43771: POP
43772: POP
// end ;
43773: GO 43733
43775: POP
43776: POP
// end ;
43777: LD_VAR 0 1
43781: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43782: LD_INT 0
43784: PPUSH
// uc_side := your_side ;
43785: LD_ADDR_OWVAR 20
43789: PUSH
43790: LD_OWVAR 2
43794: ST_TO_ADDR
// uc_nation := nation ;
43795: LD_ADDR_OWVAR 21
43799: PUSH
43800: LD_VAR 0 1
43804: ST_TO_ADDR
// InitHc ;
43805: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
43809: LD_INT 0
43811: PPUSH
43812: LD_VAR 0 2
43816: PPUSH
43817: LD_VAR 0 3
43821: PPUSH
43822: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
43826: LD_VAR 0 4
43830: PPUSH
43831: LD_VAR 0 5
43835: PPUSH
43836: CALL_OW 428
43840: PUSH
43841: LD_INT 0
43843: EQUAL
43844: IFFALSE 43868
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
43846: CALL_OW 44
43850: PPUSH
43851: LD_VAR 0 4
43855: PPUSH
43856: LD_VAR 0 5
43860: PPUSH
43861: LD_INT 1
43863: PPUSH
43864: CALL_OW 48
// end ;
43868: LD_VAR 0 6
43872: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
43873: LD_INT 0
43875: PPUSH
43876: PPUSH
// uc_side := your_side ;
43877: LD_ADDR_OWVAR 20
43881: PUSH
43882: LD_OWVAR 2
43886: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
43887: LD_VAR 0 1
43891: PUSH
43892: LD_INT 1
43894: PUSH
43895: LD_INT 2
43897: PUSH
43898: LD_INT 3
43900: PUSH
43901: LD_INT 4
43903: PUSH
43904: LD_INT 5
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: IN
43914: IFFALSE 43926
// uc_nation := nation_american else
43916: LD_ADDR_OWVAR 21
43920: PUSH
43921: LD_INT 1
43923: ST_TO_ADDR
43924: GO 43969
// if chassis in [ 11 , 12 , 13 , 14 ] then
43926: LD_VAR 0 1
43930: PUSH
43931: LD_INT 11
43933: PUSH
43934: LD_INT 12
43936: PUSH
43937: LD_INT 13
43939: PUSH
43940: LD_INT 14
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: IN
43949: IFFALSE 43961
// uc_nation := nation_arabian else
43951: LD_ADDR_OWVAR 21
43955: PUSH
43956: LD_INT 2
43958: ST_TO_ADDR
43959: GO 43969
// uc_nation := nation_russian ;
43961: LD_ADDR_OWVAR 21
43965: PUSH
43966: LD_INT 3
43968: ST_TO_ADDR
// vc_chassis := chassis ;
43969: LD_ADDR_OWVAR 37
43973: PUSH
43974: LD_VAR 0 1
43978: ST_TO_ADDR
// vc_engine := engine ;
43979: LD_ADDR_OWVAR 39
43983: PUSH
43984: LD_VAR 0 2
43988: ST_TO_ADDR
// vc_control := control ;
43989: LD_ADDR_OWVAR 38
43993: PUSH
43994: LD_VAR 0 3
43998: ST_TO_ADDR
// vc_weapon := weapon ;
43999: LD_ADDR_OWVAR 40
44003: PUSH
44004: LD_VAR 0 4
44008: ST_TO_ADDR
// un := CreateVehicle ;
44009: LD_ADDR_VAR 0 8
44013: PUSH
44014: CALL_OW 45
44018: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
44019: LD_VAR 0 8
44023: PPUSH
44024: LD_INT 0
44026: PPUSH
44027: LD_INT 5
44029: PPUSH
44030: CALL_OW 12
44034: PPUSH
44035: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
44039: LD_VAR 0 8
44043: PPUSH
44044: LD_VAR 0 5
44048: PPUSH
44049: LD_VAR 0 6
44053: PPUSH
44054: LD_INT 1
44056: PPUSH
44057: CALL_OW 48
// end ;
44061: LD_VAR 0 7
44065: RET
// export hInvincible ; every 1 do
44066: GO 44068
44068: DISABLE
// hInvincible := [ ] ;
44069: LD_ADDR_EXP 128
44073: PUSH
44074: EMPTY
44075: ST_TO_ADDR
44076: END
// every 10 do var i ;
44077: GO 44079
44079: DISABLE
44080: LD_INT 0
44082: PPUSH
// begin enable ;
44083: ENABLE
// if not hInvincible then
44084: LD_EXP 128
44088: NOT
44089: IFFALSE 44093
// exit ;
44091: GO 44137
// for i in hInvincible do
44093: LD_ADDR_VAR 0 1
44097: PUSH
44098: LD_EXP 128
44102: PUSH
44103: FOR_IN
44104: IFFALSE 44135
// if GetLives ( i ) < 1000 then
44106: LD_VAR 0 1
44110: PPUSH
44111: CALL_OW 256
44115: PUSH
44116: LD_INT 1000
44118: LESS
44119: IFFALSE 44133
// SetLives ( i , 1000 ) ;
44121: LD_VAR 0 1
44125: PPUSH
44126: LD_INT 1000
44128: PPUSH
44129: CALL_OW 234
44133: GO 44103
44135: POP
44136: POP
// end ;
44137: PPOPN 1
44139: END
// export function hHackInvincible ; var i ; begin
44140: LD_INT 0
44142: PPUSH
44143: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
44144: LD_ADDR_VAR 0 2
44148: PUSH
44149: LD_INT 2
44151: PUSH
44152: LD_INT 21
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 21
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: EMPTY
44173: LIST
44174: LIST
44175: LIST
44176: PPUSH
44177: CALL_OW 69
44181: PUSH
44182: FOR_IN
44183: IFFALSE 44244
// if IsSelected ( i ) then
44185: LD_VAR 0 2
44189: PPUSH
44190: CALL_OW 306
44194: IFFALSE 44242
// begin if i in hInvincible then
44196: LD_VAR 0 2
44200: PUSH
44201: LD_EXP 128
44205: IN
44206: IFFALSE 44226
// hInvincible := hInvincible diff i else
44208: LD_ADDR_EXP 128
44212: PUSH
44213: LD_EXP 128
44217: PUSH
44218: LD_VAR 0 2
44222: DIFF
44223: ST_TO_ADDR
44224: GO 44242
// hInvincible := hInvincible union i ;
44226: LD_ADDR_EXP 128
44230: PUSH
44231: LD_EXP 128
44235: PUSH
44236: LD_VAR 0 2
44240: UNION
44241: ST_TO_ADDR
// end ;
44242: GO 44182
44244: POP
44245: POP
// end ;
44246: LD_VAR 0 1
44250: RET
// export function hHackInvisible ; var i , j ; begin
44251: LD_INT 0
44253: PPUSH
44254: PPUSH
44255: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
44256: LD_ADDR_VAR 0 2
44260: PUSH
44261: LD_INT 21
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: EMPTY
44268: LIST
44269: LIST
44270: PPUSH
44271: CALL_OW 69
44275: PUSH
44276: FOR_IN
44277: IFFALSE 44301
// if IsSelected ( i ) then
44279: LD_VAR 0 2
44283: PPUSH
44284: CALL_OW 306
44288: IFFALSE 44299
// ComForceInvisible ( i ) ;
44290: LD_VAR 0 2
44294: PPUSH
44295: CALL_OW 496
44299: GO 44276
44301: POP
44302: POP
// end ;
44303: LD_VAR 0 1
44307: RET
// export function hHackChangeYourSide ; begin
44308: LD_INT 0
44310: PPUSH
// if your_side = 8 then
44311: LD_OWVAR 2
44315: PUSH
44316: LD_INT 8
44318: EQUAL
44319: IFFALSE 44331
// your_side := 0 else
44321: LD_ADDR_OWVAR 2
44325: PUSH
44326: LD_INT 0
44328: ST_TO_ADDR
44329: GO 44345
// your_side := your_side + 1 ;
44331: LD_ADDR_OWVAR 2
44335: PUSH
44336: LD_OWVAR 2
44340: PUSH
44341: LD_INT 1
44343: PLUS
44344: ST_TO_ADDR
// end ;
44345: LD_VAR 0 1
44349: RET
// export function hHackChangeUnitSide ; var i , j ; begin
44350: LD_INT 0
44352: PPUSH
44353: PPUSH
44354: PPUSH
// for i in all_units do
44355: LD_ADDR_VAR 0 2
44359: PUSH
44360: LD_OWVAR 3
44364: PUSH
44365: FOR_IN
44366: IFFALSE 44444
// if IsSelected ( i ) then
44368: LD_VAR 0 2
44372: PPUSH
44373: CALL_OW 306
44377: IFFALSE 44442
// begin j := GetSide ( i ) ;
44379: LD_ADDR_VAR 0 3
44383: PUSH
44384: LD_VAR 0 2
44388: PPUSH
44389: CALL_OW 255
44393: ST_TO_ADDR
// if j = 8 then
44394: LD_VAR 0 3
44398: PUSH
44399: LD_INT 8
44401: EQUAL
44402: IFFALSE 44414
// j := 0 else
44404: LD_ADDR_VAR 0 3
44408: PUSH
44409: LD_INT 0
44411: ST_TO_ADDR
44412: GO 44428
// j := j + 1 ;
44414: LD_ADDR_VAR 0 3
44418: PUSH
44419: LD_VAR 0 3
44423: PUSH
44424: LD_INT 1
44426: PLUS
44427: ST_TO_ADDR
// SetSide ( i , j ) ;
44428: LD_VAR 0 2
44432: PPUSH
44433: LD_VAR 0 3
44437: PPUSH
44438: CALL_OW 235
// end ;
44442: GO 44365
44444: POP
44445: POP
// end ;
44446: LD_VAR 0 1
44450: RET
// export function hHackFog ; begin
44451: LD_INT 0
44453: PPUSH
// FogOff ( true ) ;
44454: LD_INT 1
44456: PPUSH
44457: CALL_OW 344
// end ;
44461: LD_VAR 0 1
44465: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44466: LD_INT 0
44468: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44469: LD_VAR 0 1
44473: PPUSH
44474: LD_VAR 0 2
44478: PPUSH
44479: LD_VAR 0 3
44483: PPUSH
44484: LD_INT 1
44486: PPUSH
44487: LD_INT 1
44489: PPUSH
44490: CALL_OW 483
// CenterOnXY ( x , y ) ;
44494: LD_VAR 0 2
44498: PPUSH
44499: LD_VAR 0 3
44503: PPUSH
44504: CALL_OW 84
// end ;
44508: LD_VAR 0 4
44512: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
44513: LD_INT 0
44515: PPUSH
44516: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
44517: LD_VAR 0 1
44521: NOT
44522: PUSH
44523: LD_VAR 0 2
44527: PPUSH
44528: LD_VAR 0 3
44532: PPUSH
44533: CALL_OW 488
44537: NOT
44538: OR
44539: PUSH
44540: LD_VAR 0 1
44544: PPUSH
44545: CALL_OW 266
44549: PUSH
44550: LD_INT 3
44552: NONEQUAL
44553: PUSH
44554: LD_VAR 0 1
44558: PPUSH
44559: CALL_OW 247
44563: PUSH
44564: LD_INT 1
44566: EQUAL
44567: NOT
44568: AND
44569: OR
44570: IFFALSE 44574
// exit ;
44572: GO 44723
// if GetType ( factory ) = unit_human then
44574: LD_VAR 0 1
44578: PPUSH
44579: CALL_OW 247
44583: PUSH
44584: LD_INT 1
44586: EQUAL
44587: IFFALSE 44604
// factory := IsInUnit ( factory ) ;
44589: LD_ADDR_VAR 0 1
44593: PUSH
44594: LD_VAR 0 1
44598: PPUSH
44599: CALL_OW 310
44603: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
44604: LD_VAR 0 1
44608: PPUSH
44609: CALL_OW 266
44613: PUSH
44614: LD_INT 3
44616: NONEQUAL
44617: IFFALSE 44621
// exit ;
44619: GO 44723
// if HexInfo ( x , y ) = factory then
44621: LD_VAR 0 2
44625: PPUSH
44626: LD_VAR 0 3
44630: PPUSH
44631: CALL_OW 428
44635: PUSH
44636: LD_VAR 0 1
44640: EQUAL
44641: IFFALSE 44668
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
44643: LD_ADDR_EXP 129
44647: PUSH
44648: LD_EXP 129
44652: PPUSH
44653: LD_VAR 0 1
44657: PPUSH
44658: LD_INT 0
44660: PPUSH
44661: CALL_OW 1
44665: ST_TO_ADDR
44666: GO 44719
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
44668: LD_ADDR_EXP 129
44672: PUSH
44673: LD_EXP 129
44677: PPUSH
44678: LD_VAR 0 1
44682: PPUSH
44683: LD_VAR 0 1
44687: PPUSH
44688: CALL_OW 255
44692: PUSH
44693: LD_VAR 0 1
44697: PUSH
44698: LD_VAR 0 2
44702: PUSH
44703: LD_VAR 0 3
44707: PUSH
44708: EMPTY
44709: LIST
44710: LIST
44711: LIST
44712: LIST
44713: PPUSH
44714: CALL_OW 1
44718: ST_TO_ADDR
// UpdateFactoryWaypoints ;
44719: CALL 44728 0 0
// end ;
44723: LD_VAR 0 4
44727: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
44728: LD_INT 0
44730: PPUSH
44731: PPUSH
44732: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
44733: LD_STRING resetFactoryWaypoint();
44735: PPUSH
44736: CALL_OW 559
// if factoryWaypoints then
44740: LD_EXP 129
44744: IFFALSE 44870
// begin list := PrepareArray ( factoryWaypoints ) ;
44746: LD_ADDR_VAR 0 3
44750: PUSH
44751: LD_EXP 129
44755: PPUSH
44756: CALL 91320 0 1
44760: ST_TO_ADDR
// for i := 1 to list do
44761: LD_ADDR_VAR 0 2
44765: PUSH
44766: DOUBLE
44767: LD_INT 1
44769: DEC
44770: ST_TO_ADDR
44771: LD_VAR 0 3
44775: PUSH
44776: FOR_TO
44777: IFFALSE 44868
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44779: LD_STRING setFactoryWaypointXY(
44781: PUSH
44782: LD_VAR 0 3
44786: PUSH
44787: LD_VAR 0 2
44791: ARRAY
44792: PUSH
44793: LD_INT 1
44795: ARRAY
44796: STR
44797: PUSH
44798: LD_STRING ,
44800: STR
44801: PUSH
44802: LD_VAR 0 3
44806: PUSH
44807: LD_VAR 0 2
44811: ARRAY
44812: PUSH
44813: LD_INT 2
44815: ARRAY
44816: STR
44817: PUSH
44818: LD_STRING ,
44820: STR
44821: PUSH
44822: LD_VAR 0 3
44826: PUSH
44827: LD_VAR 0 2
44831: ARRAY
44832: PUSH
44833: LD_INT 3
44835: ARRAY
44836: STR
44837: PUSH
44838: LD_STRING ,
44840: STR
44841: PUSH
44842: LD_VAR 0 3
44846: PUSH
44847: LD_VAR 0 2
44851: ARRAY
44852: PUSH
44853: LD_INT 4
44855: ARRAY
44856: STR
44857: PUSH
44858: LD_STRING )
44860: STR
44861: PPUSH
44862: CALL_OW 559
44866: GO 44776
44868: POP
44869: POP
// end ; end ;
44870: LD_VAR 0 1
44874: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
44875: LD_INT 0
44877: PPUSH
// if HexInfo ( x , y ) = warehouse then
44878: LD_VAR 0 2
44882: PPUSH
44883: LD_VAR 0 3
44887: PPUSH
44888: CALL_OW 428
44892: PUSH
44893: LD_VAR 0 1
44897: EQUAL
44898: IFFALSE 44925
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
44900: LD_ADDR_EXP 130
44904: PUSH
44905: LD_EXP 130
44909: PPUSH
44910: LD_VAR 0 1
44914: PPUSH
44915: LD_INT 0
44917: PPUSH
44918: CALL_OW 1
44922: ST_TO_ADDR
44923: GO 44976
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
44925: LD_ADDR_EXP 130
44929: PUSH
44930: LD_EXP 130
44934: PPUSH
44935: LD_VAR 0 1
44939: PPUSH
44940: LD_VAR 0 1
44944: PPUSH
44945: CALL_OW 255
44949: PUSH
44950: LD_VAR 0 1
44954: PUSH
44955: LD_VAR 0 2
44959: PUSH
44960: LD_VAR 0 3
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: PPUSH
44971: CALL_OW 1
44975: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
44976: CALL 44985 0 0
// end ;
44980: LD_VAR 0 4
44984: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
44985: LD_INT 0
44987: PPUSH
44988: PPUSH
44989: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
44990: LD_STRING resetWarehouseGatheringPoints();
44992: PPUSH
44993: CALL_OW 559
// if warehouseGatheringPoints then
44997: LD_EXP 130
45001: IFFALSE 45127
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
45003: LD_ADDR_VAR 0 3
45007: PUSH
45008: LD_EXP 130
45012: PPUSH
45013: CALL 91320 0 1
45017: ST_TO_ADDR
// for i := 1 to list do
45018: LD_ADDR_VAR 0 2
45022: PUSH
45023: DOUBLE
45024: LD_INT 1
45026: DEC
45027: ST_TO_ADDR
45028: LD_VAR 0 3
45032: PUSH
45033: FOR_TO
45034: IFFALSE 45125
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
45036: LD_STRING setWarehouseGatheringPointXY(
45038: PUSH
45039: LD_VAR 0 3
45043: PUSH
45044: LD_VAR 0 2
45048: ARRAY
45049: PUSH
45050: LD_INT 1
45052: ARRAY
45053: STR
45054: PUSH
45055: LD_STRING ,
45057: STR
45058: PUSH
45059: LD_VAR 0 3
45063: PUSH
45064: LD_VAR 0 2
45068: ARRAY
45069: PUSH
45070: LD_INT 2
45072: ARRAY
45073: STR
45074: PUSH
45075: LD_STRING ,
45077: STR
45078: PUSH
45079: LD_VAR 0 3
45083: PUSH
45084: LD_VAR 0 2
45088: ARRAY
45089: PUSH
45090: LD_INT 3
45092: ARRAY
45093: STR
45094: PUSH
45095: LD_STRING ,
45097: STR
45098: PUSH
45099: LD_VAR 0 3
45103: PUSH
45104: LD_VAR 0 2
45108: ARRAY
45109: PUSH
45110: LD_INT 4
45112: ARRAY
45113: STR
45114: PUSH
45115: LD_STRING )
45117: STR
45118: PPUSH
45119: CALL_OW 559
45123: GO 45033
45125: POP
45126: POP
// end ; end ;
45127: LD_VAR 0 1
45131: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
45132: LD_EXP 130
45136: IFFALSE 45821
45138: GO 45140
45140: DISABLE
45141: LD_INT 0
45143: PPUSH
45144: PPUSH
45145: PPUSH
45146: PPUSH
45147: PPUSH
45148: PPUSH
45149: PPUSH
45150: PPUSH
45151: PPUSH
// begin enable ;
45152: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
45153: LD_ADDR_VAR 0 3
45157: PUSH
45158: LD_EXP 130
45162: PPUSH
45163: CALL 91320 0 1
45167: ST_TO_ADDR
// if not list then
45168: LD_VAR 0 3
45172: NOT
45173: IFFALSE 45177
// exit ;
45175: GO 45821
// for i := 1 to list do
45177: LD_ADDR_VAR 0 1
45181: PUSH
45182: DOUBLE
45183: LD_INT 1
45185: DEC
45186: ST_TO_ADDR
45187: LD_VAR 0 3
45191: PUSH
45192: FOR_TO
45193: IFFALSE 45819
// begin depot := list [ i ] [ 2 ] ;
45195: LD_ADDR_VAR 0 8
45199: PUSH
45200: LD_VAR 0 3
45204: PUSH
45205: LD_VAR 0 1
45209: ARRAY
45210: PUSH
45211: LD_INT 2
45213: ARRAY
45214: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
45215: LD_ADDR_VAR 0 5
45219: PUSH
45220: LD_VAR 0 3
45224: PUSH
45225: LD_VAR 0 1
45229: ARRAY
45230: PUSH
45231: LD_INT 1
45233: ARRAY
45234: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
45235: LD_VAR 0 8
45239: PPUSH
45240: CALL_OW 301
45244: PUSH
45245: LD_VAR 0 5
45249: PUSH
45250: LD_VAR 0 8
45254: PPUSH
45255: CALL_OW 255
45259: NONEQUAL
45260: OR
45261: IFFALSE 45290
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
45263: LD_ADDR_EXP 130
45267: PUSH
45268: LD_EXP 130
45272: PPUSH
45273: LD_VAR 0 8
45277: PPUSH
45278: LD_INT 0
45280: PPUSH
45281: CALL_OW 1
45285: ST_TO_ADDR
// exit ;
45286: POP
45287: POP
45288: GO 45821
// end ; x := list [ i ] [ 3 ] ;
45290: LD_ADDR_VAR 0 6
45294: PUSH
45295: LD_VAR 0 3
45299: PUSH
45300: LD_VAR 0 1
45304: ARRAY
45305: PUSH
45306: LD_INT 3
45308: ARRAY
45309: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
45310: LD_ADDR_VAR 0 7
45314: PUSH
45315: LD_VAR 0 3
45319: PUSH
45320: LD_VAR 0 1
45324: ARRAY
45325: PUSH
45326: LD_INT 4
45328: ARRAY
45329: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
45330: LD_ADDR_VAR 0 9
45334: PUSH
45335: LD_VAR 0 6
45339: PPUSH
45340: LD_VAR 0 7
45344: PPUSH
45345: LD_INT 16
45347: PPUSH
45348: CALL 89908 0 3
45352: ST_TO_ADDR
// if not cratesNearbyPoint then
45353: LD_VAR 0 9
45357: NOT
45358: IFFALSE 45364
// exit ;
45360: POP
45361: POP
45362: GO 45821
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
45364: LD_ADDR_VAR 0 4
45368: PUSH
45369: LD_INT 22
45371: PUSH
45372: LD_VAR 0 5
45376: PUSH
45377: EMPTY
45378: LIST
45379: LIST
45380: PUSH
45381: LD_INT 3
45383: PUSH
45384: LD_INT 60
45386: PUSH
45387: EMPTY
45388: LIST
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 91
45396: PUSH
45397: LD_VAR 0 8
45401: PUSH
45402: LD_INT 6
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 2
45412: PUSH
45413: LD_INT 25
45415: PUSH
45416: LD_INT 2
45418: PUSH
45419: EMPTY
45420: LIST
45421: LIST
45422: PUSH
45423: LD_INT 25
45425: PUSH
45426: LD_INT 16
45428: PUSH
45429: EMPTY
45430: LIST
45431: LIST
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: LIST
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: PPUSH
45444: CALL_OW 69
45448: PUSH
45449: LD_VAR 0 8
45453: PPUSH
45454: CALL_OW 313
45458: PPUSH
45459: LD_INT 3
45461: PUSH
45462: LD_INT 60
45464: PUSH
45465: EMPTY
45466: LIST
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 2
45474: PUSH
45475: LD_INT 25
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 25
45487: PUSH
45488: LD_INT 16
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: LIST
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PPUSH
45504: CALL_OW 72
45508: UNION
45509: ST_TO_ADDR
// if tmp then
45510: LD_VAR 0 4
45514: IFFALSE 45594
// begin tmp := ShrinkArray ( tmp , 3 ) ;
45516: LD_ADDR_VAR 0 4
45520: PUSH
45521: LD_VAR 0 4
45525: PPUSH
45526: LD_INT 3
45528: PPUSH
45529: CALL 87877 0 2
45533: ST_TO_ADDR
// for j in tmp do
45534: LD_ADDR_VAR 0 2
45538: PUSH
45539: LD_VAR 0 4
45543: PUSH
45544: FOR_IN
45545: IFFALSE 45588
// begin if IsInUnit ( j ) then
45547: LD_VAR 0 2
45551: PPUSH
45552: CALL_OW 310
45556: IFFALSE 45567
// ComExit ( j ) ;
45558: LD_VAR 0 2
45562: PPUSH
45563: CALL 87960 0 1
// AddComCollect ( j , x , y ) ;
45567: LD_VAR 0 2
45571: PPUSH
45572: LD_VAR 0 6
45576: PPUSH
45577: LD_VAR 0 7
45581: PPUSH
45582: CALL_OW 177
// end ;
45586: GO 45544
45588: POP
45589: POP
// exit ;
45590: POP
45591: POP
45592: GO 45821
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
45594: LD_ADDR_VAR 0 4
45598: PUSH
45599: LD_INT 22
45601: PUSH
45602: LD_VAR 0 5
45606: PUSH
45607: EMPTY
45608: LIST
45609: LIST
45610: PUSH
45611: LD_INT 91
45613: PUSH
45614: LD_VAR 0 8
45618: PUSH
45619: LD_INT 8
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: LIST
45626: PUSH
45627: LD_INT 2
45629: PUSH
45630: LD_INT 34
45632: PUSH
45633: LD_INT 12
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 34
45642: PUSH
45643: LD_INT 51
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 34
45652: PUSH
45653: LD_INT 32
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 34
45662: PUSH
45663: LD_INT 89
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: LIST
45681: PPUSH
45682: CALL_OW 69
45686: ST_TO_ADDR
// if tmp then
45687: LD_VAR 0 4
45691: IFFALSE 45817
// begin for j in tmp do
45693: LD_ADDR_VAR 0 2
45697: PUSH
45698: LD_VAR 0 4
45702: PUSH
45703: FOR_IN
45704: IFFALSE 45815
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
45706: LD_VAR 0 2
45710: PPUSH
45711: CALL_OW 262
45715: PUSH
45716: LD_INT 3
45718: EQUAL
45719: PUSH
45720: LD_VAR 0 2
45724: PPUSH
45725: CALL_OW 261
45729: PUSH
45730: LD_INT 20
45732: GREATER
45733: OR
45734: PUSH
45735: LD_VAR 0 2
45739: PPUSH
45740: CALL_OW 314
45744: NOT
45745: AND
45746: PUSH
45747: LD_VAR 0 2
45751: PPUSH
45752: CALL_OW 263
45756: PUSH
45757: LD_INT 1
45759: NONEQUAL
45760: PUSH
45761: LD_VAR 0 2
45765: PPUSH
45766: CALL_OW 311
45770: OR
45771: AND
45772: IFFALSE 45813
// begin ComCollect ( j , x , y ) ;
45774: LD_VAR 0 2
45778: PPUSH
45779: LD_VAR 0 6
45783: PPUSH
45784: LD_VAR 0 7
45788: PPUSH
45789: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
45793: LD_VAR 0 2
45797: PPUSH
45798: LD_VAR 0 8
45802: PPUSH
45803: CALL_OW 172
// exit ;
45807: POP
45808: POP
45809: POP
45810: POP
45811: GO 45821
// end ;
45813: GO 45703
45815: POP
45816: POP
// end ; end ;
45817: GO 45192
45819: POP
45820: POP
// end ; end_of_file
45821: PPOPN 9
45823: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
45824: LD_INT 0
45826: PPUSH
45827: PPUSH
45828: PPUSH
45829: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
45830: LD_VAR 0 1
45834: PPUSH
45835: CALL_OW 264
45839: PUSH
45840: LD_INT 91
45842: EQUAL
45843: IFFALSE 45915
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
45845: LD_INT 68
45847: PPUSH
45848: LD_VAR 0 1
45852: PPUSH
45853: CALL_OW 255
45857: PPUSH
45858: CALL_OW 321
45862: PUSH
45863: LD_INT 2
45865: EQUAL
45866: IFFALSE 45878
// eff := 70 else
45868: LD_ADDR_VAR 0 4
45872: PUSH
45873: LD_INT 70
45875: ST_TO_ADDR
45876: GO 45886
// eff := 30 ;
45878: LD_ADDR_VAR 0 4
45882: PUSH
45883: LD_INT 30
45885: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
45886: LD_VAR 0 1
45890: PPUSH
45891: CALL_OW 250
45895: PPUSH
45896: LD_VAR 0 1
45900: PPUSH
45901: CALL_OW 251
45905: PPUSH
45906: LD_VAR 0 4
45910: PPUSH
45911: CALL_OW 495
// end ; end ;
45915: LD_VAR 0 2
45919: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
45920: LD_INT 0
45922: PPUSH
// end ;
45923: LD_VAR 0 4
45927: RET
// export function SOS_Command ( cmd ) ; begin
45928: LD_INT 0
45930: PPUSH
// end ;
45931: LD_VAR 0 2
45935: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
45936: LD_INT 0
45938: PPUSH
// end ;
45939: LD_VAR 0 6
45943: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
45944: LD_INT 0
45946: PPUSH
45947: PPUSH
// if not vehicle or not factory then
45948: LD_VAR 0 1
45952: NOT
45953: PUSH
45954: LD_VAR 0 2
45958: NOT
45959: OR
45960: IFFALSE 45964
// exit ;
45962: GO 46195
// if factoryWaypoints >= factory then
45964: LD_EXP 129
45968: PUSH
45969: LD_VAR 0 2
45973: GREATEREQUAL
45974: IFFALSE 46195
// if factoryWaypoints [ factory ] then
45976: LD_EXP 129
45980: PUSH
45981: LD_VAR 0 2
45985: ARRAY
45986: IFFALSE 46195
// begin if GetControl ( vehicle ) = control_manual then
45988: LD_VAR 0 1
45992: PPUSH
45993: CALL_OW 263
45997: PUSH
45998: LD_INT 1
46000: EQUAL
46001: IFFALSE 46082
// begin driver := IsDrivenBy ( vehicle ) ;
46003: LD_ADDR_VAR 0 4
46007: PUSH
46008: LD_VAR 0 1
46012: PPUSH
46013: CALL_OW 311
46017: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46018: LD_VAR 0 4
46022: PPUSH
46023: LD_EXP 129
46027: PUSH
46028: LD_VAR 0 2
46032: ARRAY
46033: PUSH
46034: LD_INT 3
46036: ARRAY
46037: PPUSH
46038: LD_EXP 129
46042: PUSH
46043: LD_VAR 0 2
46047: ARRAY
46048: PUSH
46049: LD_INT 4
46051: ARRAY
46052: PPUSH
46053: CALL_OW 171
// AddComExitVehicle ( driver ) ;
46057: LD_VAR 0 4
46061: PPUSH
46062: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
46066: LD_VAR 0 4
46070: PPUSH
46071: LD_VAR 0 2
46075: PPUSH
46076: CALL_OW 180
// end else
46080: GO 46195
// if GetControl ( vehicle ) = control_remote then
46082: LD_VAR 0 1
46086: PPUSH
46087: CALL_OW 263
46091: PUSH
46092: LD_INT 2
46094: EQUAL
46095: IFFALSE 46156
// begin wait ( 0 0$2 ) ;
46097: LD_INT 70
46099: PPUSH
46100: CALL_OW 67
// if Connect ( vehicle ) then
46104: LD_VAR 0 1
46108: PPUSH
46109: CALL 58219 0 1
46113: IFFALSE 46154
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46115: LD_VAR 0 1
46119: PPUSH
46120: LD_EXP 129
46124: PUSH
46125: LD_VAR 0 2
46129: ARRAY
46130: PUSH
46131: LD_INT 3
46133: ARRAY
46134: PPUSH
46135: LD_EXP 129
46139: PUSH
46140: LD_VAR 0 2
46144: ARRAY
46145: PUSH
46146: LD_INT 4
46148: ARRAY
46149: PPUSH
46150: CALL_OW 171
// end else
46154: GO 46195
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46156: LD_VAR 0 1
46160: PPUSH
46161: LD_EXP 129
46165: PUSH
46166: LD_VAR 0 2
46170: ARRAY
46171: PUSH
46172: LD_INT 3
46174: ARRAY
46175: PPUSH
46176: LD_EXP 129
46180: PUSH
46181: LD_VAR 0 2
46185: ARRAY
46186: PUSH
46187: LD_INT 4
46189: ARRAY
46190: PPUSH
46191: CALL_OW 171
// end ; end ;
46195: LD_VAR 0 3
46199: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
46200: LD_INT 0
46202: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
46203: LD_VAR 0 1
46207: PUSH
46208: LD_INT 250
46210: EQUAL
46211: PUSH
46212: LD_VAR 0 2
46216: PPUSH
46217: CALL_OW 264
46221: PUSH
46222: LD_INT 81
46224: EQUAL
46225: AND
46226: IFFALSE 46247
// MinerPlaceMine ( unit , x , y ) ;
46228: LD_VAR 0 2
46232: PPUSH
46233: LD_VAR 0 4
46237: PPUSH
46238: LD_VAR 0 5
46242: PPUSH
46243: CALL 48632 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
46247: LD_VAR 0 1
46251: PUSH
46252: LD_INT 251
46254: EQUAL
46255: PUSH
46256: LD_VAR 0 2
46260: PPUSH
46261: CALL_OW 264
46265: PUSH
46266: LD_INT 81
46268: EQUAL
46269: AND
46270: IFFALSE 46291
// MinerDetonateMine ( unit , x , y ) ;
46272: LD_VAR 0 2
46276: PPUSH
46277: LD_VAR 0 4
46281: PPUSH
46282: LD_VAR 0 5
46286: PPUSH
46287: CALL 48907 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
46291: LD_VAR 0 1
46295: PUSH
46296: LD_INT 252
46298: EQUAL
46299: PUSH
46300: LD_VAR 0 2
46304: PPUSH
46305: CALL_OW 264
46309: PUSH
46310: LD_INT 81
46312: EQUAL
46313: AND
46314: IFFALSE 46335
// MinerCreateMinefield ( unit , x , y ) ;
46316: LD_VAR 0 2
46320: PPUSH
46321: LD_VAR 0 4
46325: PPUSH
46326: LD_VAR 0 5
46330: PPUSH
46331: CALL 49324 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
46335: LD_VAR 0 1
46339: PUSH
46340: LD_INT 253
46342: EQUAL
46343: PUSH
46344: LD_VAR 0 2
46348: PPUSH
46349: CALL_OW 257
46353: PUSH
46354: LD_INT 5
46356: EQUAL
46357: AND
46358: IFFALSE 46379
// ComBinocular ( unit , x , y ) ;
46360: LD_VAR 0 2
46364: PPUSH
46365: LD_VAR 0 4
46369: PPUSH
46370: LD_VAR 0 5
46374: PPUSH
46375: CALL 49693 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
46379: LD_VAR 0 1
46383: PUSH
46384: LD_INT 254
46386: EQUAL
46387: PUSH
46388: LD_VAR 0 2
46392: PPUSH
46393: CALL_OW 264
46397: PUSH
46398: LD_INT 99
46400: EQUAL
46401: AND
46402: PUSH
46403: LD_VAR 0 3
46407: PPUSH
46408: CALL_OW 263
46412: PUSH
46413: LD_INT 3
46415: EQUAL
46416: AND
46417: IFFALSE 46433
// HackDestroyVehicle ( unit , selectedUnit ) ;
46419: LD_VAR 0 2
46423: PPUSH
46424: LD_VAR 0 3
46428: PPUSH
46429: CALL 47996 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
46433: LD_VAR 0 1
46437: PUSH
46438: LD_INT 255
46440: EQUAL
46441: PUSH
46442: LD_VAR 0 2
46446: PPUSH
46447: CALL_OW 264
46451: PUSH
46452: LD_INT 14
46454: PUSH
46455: LD_INT 53
46457: PUSH
46458: EMPTY
46459: LIST
46460: LIST
46461: IN
46462: AND
46463: PUSH
46464: LD_VAR 0 4
46468: PPUSH
46469: LD_VAR 0 5
46473: PPUSH
46474: CALL_OW 488
46478: AND
46479: IFFALSE 46503
// CutTreeXYR ( unit , x , y , 12 ) ;
46481: LD_VAR 0 2
46485: PPUSH
46486: LD_VAR 0 4
46490: PPUSH
46491: LD_VAR 0 5
46495: PPUSH
46496: LD_INT 12
46498: PPUSH
46499: CALL 46566 0 4
// if cmd = 256 then
46503: LD_VAR 0 1
46507: PUSH
46508: LD_INT 256
46510: EQUAL
46511: IFFALSE 46532
// SetFactoryWaypoint ( unit , x , y ) ;
46513: LD_VAR 0 2
46517: PPUSH
46518: LD_VAR 0 4
46522: PPUSH
46523: LD_VAR 0 5
46527: PPUSH
46528: CALL 44513 0 3
// if cmd = 257 then
46532: LD_VAR 0 1
46536: PUSH
46537: LD_INT 257
46539: EQUAL
46540: IFFALSE 46561
// SetWarehouseGatheringPoint ( unit , x , y ) ;
46542: LD_VAR 0 2
46546: PPUSH
46547: LD_VAR 0 4
46551: PPUSH
46552: LD_VAR 0 5
46556: PPUSH
46557: CALL 44875 0 3
// end ;
46561: LD_VAR 0 6
46565: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46566: LD_INT 0
46568: PPUSH
46569: PPUSH
46570: PPUSH
46571: PPUSH
46572: PPUSH
46573: PPUSH
46574: PPUSH
46575: PPUSH
46576: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
46577: LD_VAR 0 1
46581: NOT
46582: PUSH
46583: LD_VAR 0 2
46587: PPUSH
46588: LD_VAR 0 3
46592: PPUSH
46593: CALL_OW 488
46597: NOT
46598: OR
46599: PUSH
46600: LD_VAR 0 4
46604: NOT
46605: OR
46606: IFFALSE 46610
// exit ;
46608: GO 46950
// list := [ ] ;
46610: LD_ADDR_VAR 0 13
46614: PUSH
46615: EMPTY
46616: ST_TO_ADDR
// if x - r < 0 then
46617: LD_VAR 0 2
46621: PUSH
46622: LD_VAR 0 4
46626: MINUS
46627: PUSH
46628: LD_INT 0
46630: LESS
46631: IFFALSE 46643
// min_x := 0 else
46633: LD_ADDR_VAR 0 7
46637: PUSH
46638: LD_INT 0
46640: ST_TO_ADDR
46641: GO 46659
// min_x := x - r ;
46643: LD_ADDR_VAR 0 7
46647: PUSH
46648: LD_VAR 0 2
46652: PUSH
46653: LD_VAR 0 4
46657: MINUS
46658: ST_TO_ADDR
// if y - r < 0 then
46659: LD_VAR 0 3
46663: PUSH
46664: LD_VAR 0 4
46668: MINUS
46669: PUSH
46670: LD_INT 0
46672: LESS
46673: IFFALSE 46685
// min_y := 0 else
46675: LD_ADDR_VAR 0 8
46679: PUSH
46680: LD_INT 0
46682: ST_TO_ADDR
46683: GO 46701
// min_y := y - r ;
46685: LD_ADDR_VAR 0 8
46689: PUSH
46690: LD_VAR 0 3
46694: PUSH
46695: LD_VAR 0 4
46699: MINUS
46700: ST_TO_ADDR
// max_x := x + r ;
46701: LD_ADDR_VAR 0 9
46705: PUSH
46706: LD_VAR 0 2
46710: PUSH
46711: LD_VAR 0 4
46715: PLUS
46716: ST_TO_ADDR
// max_y := y + r ;
46717: LD_ADDR_VAR 0 10
46721: PUSH
46722: LD_VAR 0 3
46726: PUSH
46727: LD_VAR 0 4
46731: PLUS
46732: ST_TO_ADDR
// for _x = min_x to max_x do
46733: LD_ADDR_VAR 0 11
46737: PUSH
46738: DOUBLE
46739: LD_VAR 0 7
46743: DEC
46744: ST_TO_ADDR
46745: LD_VAR 0 9
46749: PUSH
46750: FOR_TO
46751: IFFALSE 46868
// for _y = min_y to max_y do
46753: LD_ADDR_VAR 0 12
46757: PUSH
46758: DOUBLE
46759: LD_VAR 0 8
46763: DEC
46764: ST_TO_ADDR
46765: LD_VAR 0 10
46769: PUSH
46770: FOR_TO
46771: IFFALSE 46864
// begin if not ValidHex ( _x , _y ) then
46773: LD_VAR 0 11
46777: PPUSH
46778: LD_VAR 0 12
46782: PPUSH
46783: CALL_OW 488
46787: NOT
46788: IFFALSE 46792
// continue ;
46790: GO 46770
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46792: LD_VAR 0 11
46796: PPUSH
46797: LD_VAR 0 12
46801: PPUSH
46802: CALL_OW 351
46806: PUSH
46807: LD_VAR 0 11
46811: PPUSH
46812: LD_VAR 0 12
46816: PPUSH
46817: CALL_OW 554
46821: AND
46822: IFFALSE 46862
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46824: LD_ADDR_VAR 0 13
46828: PUSH
46829: LD_VAR 0 13
46833: PPUSH
46834: LD_VAR 0 13
46838: PUSH
46839: LD_INT 1
46841: PLUS
46842: PPUSH
46843: LD_VAR 0 11
46847: PUSH
46848: LD_VAR 0 12
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PPUSH
46857: CALL_OW 2
46861: ST_TO_ADDR
// end ;
46862: GO 46770
46864: POP
46865: POP
46866: GO 46750
46868: POP
46869: POP
// if not list then
46870: LD_VAR 0 13
46874: NOT
46875: IFFALSE 46879
// exit ;
46877: GO 46950
// for i in list do
46879: LD_ADDR_VAR 0 6
46883: PUSH
46884: LD_VAR 0 13
46888: PUSH
46889: FOR_IN
46890: IFFALSE 46948
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
46892: LD_VAR 0 1
46896: PPUSH
46897: LD_STRING M
46899: PUSH
46900: LD_VAR 0 6
46904: PUSH
46905: LD_INT 1
46907: ARRAY
46908: PUSH
46909: LD_VAR 0 6
46913: PUSH
46914: LD_INT 2
46916: ARRAY
46917: PUSH
46918: LD_INT 0
46920: PUSH
46921: LD_INT 0
46923: PUSH
46924: LD_INT 0
46926: PUSH
46927: LD_INT 0
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: PUSH
46939: EMPTY
46940: LIST
46941: PPUSH
46942: CALL_OW 447
46946: GO 46889
46948: POP
46949: POP
// end ;
46950: LD_VAR 0 5
46954: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
46955: LD_EXP 132
46959: NOT
46960: IFFALSE 47010
46962: GO 46964
46964: DISABLE
// begin initHack := true ;
46965: LD_ADDR_EXP 132
46969: PUSH
46970: LD_INT 1
46972: ST_TO_ADDR
// hackTanks := [ ] ;
46973: LD_ADDR_EXP 133
46977: PUSH
46978: EMPTY
46979: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
46980: LD_ADDR_EXP 134
46984: PUSH
46985: EMPTY
46986: ST_TO_ADDR
// hackLimit := 3 ;
46987: LD_ADDR_EXP 135
46991: PUSH
46992: LD_INT 3
46994: ST_TO_ADDR
// hackDist := 12 ;
46995: LD_ADDR_EXP 136
46999: PUSH
47000: LD_INT 12
47002: ST_TO_ADDR
// hackCounter := [ ] ;
47003: LD_ADDR_EXP 137
47007: PUSH
47008: EMPTY
47009: ST_TO_ADDR
// end ;
47010: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
47011: LD_EXP 132
47015: PUSH
47016: LD_INT 34
47018: PUSH
47019: LD_INT 99
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PPUSH
47026: CALL_OW 69
47030: AND
47031: IFFALSE 47284
47033: GO 47035
47035: DISABLE
47036: LD_INT 0
47038: PPUSH
47039: PPUSH
// begin enable ;
47040: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
47041: LD_ADDR_VAR 0 1
47045: PUSH
47046: LD_INT 34
47048: PUSH
47049: LD_INT 99
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PPUSH
47056: CALL_OW 69
47060: PUSH
47061: FOR_IN
47062: IFFALSE 47282
// begin if not i in hackTanks then
47064: LD_VAR 0 1
47068: PUSH
47069: LD_EXP 133
47073: IN
47074: NOT
47075: IFFALSE 47158
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
47077: LD_ADDR_EXP 133
47081: PUSH
47082: LD_EXP 133
47086: PPUSH
47087: LD_EXP 133
47091: PUSH
47092: LD_INT 1
47094: PLUS
47095: PPUSH
47096: LD_VAR 0 1
47100: PPUSH
47101: CALL_OW 1
47105: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
47106: LD_ADDR_EXP 134
47110: PUSH
47111: LD_EXP 134
47115: PPUSH
47116: LD_EXP 134
47120: PUSH
47121: LD_INT 1
47123: PLUS
47124: PPUSH
47125: EMPTY
47126: PPUSH
47127: CALL_OW 1
47131: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
47132: LD_ADDR_EXP 137
47136: PUSH
47137: LD_EXP 137
47141: PPUSH
47142: LD_EXP 137
47146: PUSH
47147: LD_INT 1
47149: PLUS
47150: PPUSH
47151: EMPTY
47152: PPUSH
47153: CALL_OW 1
47157: ST_TO_ADDR
// end ; if not IsOk ( i ) then
47158: LD_VAR 0 1
47162: PPUSH
47163: CALL_OW 302
47167: NOT
47168: IFFALSE 47181
// begin HackUnlinkAll ( i ) ;
47170: LD_VAR 0 1
47174: PPUSH
47175: CALL 47287 0 1
// continue ;
47179: GO 47061
// end ; HackCheckCapturedStatus ( i ) ;
47181: LD_VAR 0 1
47185: PPUSH
47186: CALL 47730 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
47190: LD_ADDR_VAR 0 2
47194: PUSH
47195: LD_INT 81
47197: PUSH
47198: LD_VAR 0 1
47202: PPUSH
47203: CALL_OW 255
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 33
47214: PUSH
47215: LD_INT 3
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 91
47224: PUSH
47225: LD_VAR 0 1
47229: PUSH
47230: LD_EXP 136
47234: PUSH
47235: EMPTY
47236: LIST
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 50
47242: PUSH
47243: EMPTY
47244: LIST
47245: PUSH
47246: EMPTY
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: PPUSH
47252: CALL_OW 69
47256: ST_TO_ADDR
// if not tmp then
47257: LD_VAR 0 2
47261: NOT
47262: IFFALSE 47266
// continue ;
47264: GO 47061
// HackLink ( i , tmp ) ;
47266: LD_VAR 0 1
47270: PPUSH
47271: LD_VAR 0 2
47275: PPUSH
47276: CALL 47423 0 2
// end ;
47280: GO 47061
47282: POP
47283: POP
// end ;
47284: PPOPN 2
47286: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
47287: LD_INT 0
47289: PPUSH
47290: PPUSH
47291: PPUSH
// if not hack in hackTanks then
47292: LD_VAR 0 1
47296: PUSH
47297: LD_EXP 133
47301: IN
47302: NOT
47303: IFFALSE 47307
// exit ;
47305: GO 47418
// index := GetElementIndex ( hackTanks , hack ) ;
47307: LD_ADDR_VAR 0 4
47311: PUSH
47312: LD_EXP 133
47316: PPUSH
47317: LD_VAR 0 1
47321: PPUSH
47322: CALL 55035 0 2
47326: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
47327: LD_EXP 134
47331: PUSH
47332: LD_VAR 0 4
47336: ARRAY
47337: IFFALSE 47418
// begin for i in hackTanksCaptured [ index ] do
47339: LD_ADDR_VAR 0 3
47343: PUSH
47344: LD_EXP 134
47348: PUSH
47349: LD_VAR 0 4
47353: ARRAY
47354: PUSH
47355: FOR_IN
47356: IFFALSE 47382
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
47358: LD_VAR 0 3
47362: PUSH
47363: LD_INT 1
47365: ARRAY
47366: PPUSH
47367: LD_VAR 0 3
47371: PUSH
47372: LD_INT 2
47374: ARRAY
47375: PPUSH
47376: CALL_OW 235
47380: GO 47355
47382: POP
47383: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
47384: LD_ADDR_EXP 134
47388: PUSH
47389: LD_EXP 134
47393: PPUSH
47394: LD_VAR 0 4
47398: PPUSH
47399: EMPTY
47400: PPUSH
47401: CALL_OW 1
47405: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
47406: LD_VAR 0 1
47410: PPUSH
47411: LD_INT 0
47413: PPUSH
47414: CALL_OW 505
// end ; end ;
47418: LD_VAR 0 2
47422: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
47423: LD_INT 0
47425: PPUSH
47426: PPUSH
47427: PPUSH
// if not hack in hackTanks or not vehicles then
47428: LD_VAR 0 1
47432: PUSH
47433: LD_EXP 133
47437: IN
47438: NOT
47439: PUSH
47440: LD_VAR 0 2
47444: NOT
47445: OR
47446: IFFALSE 47450
// exit ;
47448: GO 47725
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
47450: LD_ADDR_VAR 0 2
47454: PUSH
47455: LD_VAR 0 1
47459: PPUSH
47460: LD_VAR 0 2
47464: PPUSH
47465: LD_INT 1
47467: PPUSH
47468: LD_INT 1
47470: PPUSH
47471: CALL 55685 0 4
47475: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
47476: LD_ADDR_VAR 0 5
47480: PUSH
47481: LD_EXP 133
47485: PPUSH
47486: LD_VAR 0 1
47490: PPUSH
47491: CALL 55035 0 2
47495: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
47496: LD_EXP 134
47500: PUSH
47501: LD_VAR 0 5
47505: ARRAY
47506: PUSH
47507: LD_EXP 135
47511: LESS
47512: IFFALSE 47701
// begin for i := 1 to vehicles do
47514: LD_ADDR_VAR 0 4
47518: PUSH
47519: DOUBLE
47520: LD_INT 1
47522: DEC
47523: ST_TO_ADDR
47524: LD_VAR 0 2
47528: PUSH
47529: FOR_TO
47530: IFFALSE 47699
// begin if hackTanksCaptured [ index ] = hackLimit then
47532: LD_EXP 134
47536: PUSH
47537: LD_VAR 0 5
47541: ARRAY
47542: PUSH
47543: LD_EXP 135
47547: EQUAL
47548: IFFALSE 47552
// break ;
47550: GO 47699
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47552: LD_ADDR_EXP 137
47556: PUSH
47557: LD_EXP 137
47561: PPUSH
47562: LD_VAR 0 5
47566: PPUSH
47567: LD_EXP 137
47571: PUSH
47572: LD_VAR 0 5
47576: ARRAY
47577: PUSH
47578: LD_INT 1
47580: PLUS
47581: PPUSH
47582: CALL_OW 1
47586: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47587: LD_ADDR_EXP 134
47591: PUSH
47592: LD_EXP 134
47596: PPUSH
47597: LD_VAR 0 5
47601: PUSH
47602: LD_EXP 134
47606: PUSH
47607: LD_VAR 0 5
47611: ARRAY
47612: PUSH
47613: LD_INT 1
47615: PLUS
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PPUSH
47621: LD_VAR 0 2
47625: PUSH
47626: LD_VAR 0 4
47630: ARRAY
47631: PUSH
47632: LD_VAR 0 2
47636: PUSH
47637: LD_VAR 0 4
47641: ARRAY
47642: PPUSH
47643: CALL_OW 255
47647: PUSH
47648: EMPTY
47649: LIST
47650: LIST
47651: PPUSH
47652: CALL 55250 0 3
47656: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47657: LD_VAR 0 2
47661: PUSH
47662: LD_VAR 0 4
47666: ARRAY
47667: PPUSH
47668: LD_VAR 0 1
47672: PPUSH
47673: CALL_OW 255
47677: PPUSH
47678: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47682: LD_VAR 0 2
47686: PUSH
47687: LD_VAR 0 4
47691: ARRAY
47692: PPUSH
47693: CALL_OW 141
// end ;
47697: GO 47529
47699: POP
47700: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47701: LD_VAR 0 1
47705: PPUSH
47706: LD_EXP 134
47710: PUSH
47711: LD_VAR 0 5
47715: ARRAY
47716: PUSH
47717: LD_INT 0
47719: PLUS
47720: PPUSH
47721: CALL_OW 505
// end ;
47725: LD_VAR 0 3
47729: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47730: LD_INT 0
47732: PPUSH
47733: PPUSH
47734: PPUSH
47735: PPUSH
// if not hack in hackTanks then
47736: LD_VAR 0 1
47740: PUSH
47741: LD_EXP 133
47745: IN
47746: NOT
47747: IFFALSE 47751
// exit ;
47749: GO 47991
// index := GetElementIndex ( hackTanks , hack ) ;
47751: LD_ADDR_VAR 0 4
47755: PUSH
47756: LD_EXP 133
47760: PPUSH
47761: LD_VAR 0 1
47765: PPUSH
47766: CALL 55035 0 2
47770: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47771: LD_ADDR_VAR 0 3
47775: PUSH
47776: DOUBLE
47777: LD_EXP 134
47781: PUSH
47782: LD_VAR 0 4
47786: ARRAY
47787: INC
47788: ST_TO_ADDR
47789: LD_INT 1
47791: PUSH
47792: FOR_DOWNTO
47793: IFFALSE 47965
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47795: LD_ADDR_VAR 0 5
47799: PUSH
47800: LD_EXP 134
47804: PUSH
47805: LD_VAR 0 4
47809: ARRAY
47810: PUSH
47811: LD_VAR 0 3
47815: ARRAY
47816: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
47817: LD_VAR 0 5
47821: PUSH
47822: LD_INT 1
47824: ARRAY
47825: PPUSH
47826: CALL_OW 302
47830: NOT
47831: PUSH
47832: LD_VAR 0 5
47836: PUSH
47837: LD_INT 1
47839: ARRAY
47840: PPUSH
47841: CALL_OW 255
47845: PUSH
47846: LD_VAR 0 1
47850: PPUSH
47851: CALL_OW 255
47855: NONEQUAL
47856: OR
47857: IFFALSE 47963
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
47859: LD_VAR 0 5
47863: PUSH
47864: LD_INT 1
47866: ARRAY
47867: PPUSH
47868: CALL_OW 305
47872: PUSH
47873: LD_VAR 0 5
47877: PUSH
47878: LD_INT 1
47880: ARRAY
47881: PPUSH
47882: CALL_OW 255
47886: PUSH
47887: LD_VAR 0 1
47891: PPUSH
47892: CALL_OW 255
47896: EQUAL
47897: AND
47898: IFFALSE 47922
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
47900: LD_VAR 0 5
47904: PUSH
47905: LD_INT 1
47907: ARRAY
47908: PPUSH
47909: LD_VAR 0 5
47913: PUSH
47914: LD_INT 2
47916: ARRAY
47917: PPUSH
47918: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
47922: LD_ADDR_EXP 134
47926: PUSH
47927: LD_EXP 134
47931: PPUSH
47932: LD_VAR 0 4
47936: PPUSH
47937: LD_EXP 134
47941: PUSH
47942: LD_VAR 0 4
47946: ARRAY
47947: PPUSH
47948: LD_VAR 0 3
47952: PPUSH
47953: CALL_OW 3
47957: PPUSH
47958: CALL_OW 1
47962: ST_TO_ADDR
// end ; end ;
47963: GO 47792
47965: POP
47966: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47967: LD_VAR 0 1
47971: PPUSH
47972: LD_EXP 134
47976: PUSH
47977: LD_VAR 0 4
47981: ARRAY
47982: PUSH
47983: LD_INT 0
47985: PLUS
47986: PPUSH
47987: CALL_OW 505
// end ;
47991: LD_VAR 0 2
47995: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
47996: LD_INT 0
47998: PPUSH
47999: PPUSH
48000: PPUSH
48001: PPUSH
// if not hack in hackTanks then
48002: LD_VAR 0 1
48006: PUSH
48007: LD_EXP 133
48011: IN
48012: NOT
48013: IFFALSE 48017
// exit ;
48015: GO 48102
// index := GetElementIndex ( hackTanks , hack ) ;
48017: LD_ADDR_VAR 0 5
48021: PUSH
48022: LD_EXP 133
48026: PPUSH
48027: LD_VAR 0 1
48031: PPUSH
48032: CALL 55035 0 2
48036: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
48037: LD_ADDR_VAR 0 4
48041: PUSH
48042: DOUBLE
48043: LD_INT 1
48045: DEC
48046: ST_TO_ADDR
48047: LD_EXP 134
48051: PUSH
48052: LD_VAR 0 5
48056: ARRAY
48057: PUSH
48058: FOR_TO
48059: IFFALSE 48100
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
48061: LD_EXP 134
48065: PUSH
48066: LD_VAR 0 5
48070: ARRAY
48071: PUSH
48072: LD_VAR 0 4
48076: ARRAY
48077: PUSH
48078: LD_INT 1
48080: ARRAY
48081: PUSH
48082: LD_VAR 0 2
48086: EQUAL
48087: IFFALSE 48098
// KillUnit ( vehicle ) ;
48089: LD_VAR 0 2
48093: PPUSH
48094: CALL_OW 66
48098: GO 48058
48100: POP
48101: POP
// end ;
48102: LD_VAR 0 3
48106: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
48107: LD_EXP 138
48111: NOT
48112: IFFALSE 48147
48114: GO 48116
48116: DISABLE
// begin initMiner := true ;
48117: LD_ADDR_EXP 138
48121: PUSH
48122: LD_INT 1
48124: ST_TO_ADDR
// minersList := [ ] ;
48125: LD_ADDR_EXP 139
48129: PUSH
48130: EMPTY
48131: ST_TO_ADDR
// minerMinesList := [ ] ;
48132: LD_ADDR_EXP 140
48136: PUSH
48137: EMPTY
48138: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
48139: LD_ADDR_EXP 141
48143: PUSH
48144: LD_INT 5
48146: ST_TO_ADDR
// end ;
48147: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
48148: LD_EXP 138
48152: PUSH
48153: LD_INT 34
48155: PUSH
48156: LD_INT 81
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PPUSH
48163: CALL_OW 69
48167: AND
48168: IFFALSE 48629
48170: GO 48172
48172: DISABLE
48173: LD_INT 0
48175: PPUSH
48176: PPUSH
48177: PPUSH
48178: PPUSH
// begin enable ;
48179: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
48180: LD_ADDR_VAR 0 1
48184: PUSH
48185: LD_INT 34
48187: PUSH
48188: LD_INT 81
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PPUSH
48195: CALL_OW 69
48199: PUSH
48200: FOR_IN
48201: IFFALSE 48273
// begin if not i in minersList then
48203: LD_VAR 0 1
48207: PUSH
48208: LD_EXP 139
48212: IN
48213: NOT
48214: IFFALSE 48271
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
48216: LD_ADDR_EXP 139
48220: PUSH
48221: LD_EXP 139
48225: PPUSH
48226: LD_EXP 139
48230: PUSH
48231: LD_INT 1
48233: PLUS
48234: PPUSH
48235: LD_VAR 0 1
48239: PPUSH
48240: CALL_OW 1
48244: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
48245: LD_ADDR_EXP 140
48249: PUSH
48250: LD_EXP 140
48254: PPUSH
48255: LD_EXP 140
48259: PUSH
48260: LD_INT 1
48262: PLUS
48263: PPUSH
48264: EMPTY
48265: PPUSH
48266: CALL_OW 1
48270: ST_TO_ADDR
// end end ;
48271: GO 48200
48273: POP
48274: POP
// for i := minerMinesList downto 1 do
48275: LD_ADDR_VAR 0 1
48279: PUSH
48280: DOUBLE
48281: LD_EXP 140
48285: INC
48286: ST_TO_ADDR
48287: LD_INT 1
48289: PUSH
48290: FOR_DOWNTO
48291: IFFALSE 48627
// begin if IsLive ( minersList [ i ] ) then
48293: LD_EXP 139
48297: PUSH
48298: LD_VAR 0 1
48302: ARRAY
48303: PPUSH
48304: CALL_OW 300
48308: IFFALSE 48336
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
48310: LD_EXP 139
48314: PUSH
48315: LD_VAR 0 1
48319: ARRAY
48320: PPUSH
48321: LD_EXP 140
48325: PUSH
48326: LD_VAR 0 1
48330: ARRAY
48331: PPUSH
48332: CALL_OW 505
// if not minerMinesList [ i ] then
48336: LD_EXP 140
48340: PUSH
48341: LD_VAR 0 1
48345: ARRAY
48346: NOT
48347: IFFALSE 48351
// continue ;
48349: GO 48290
// for j := minerMinesList [ i ] downto 1 do
48351: LD_ADDR_VAR 0 2
48355: PUSH
48356: DOUBLE
48357: LD_EXP 140
48361: PUSH
48362: LD_VAR 0 1
48366: ARRAY
48367: INC
48368: ST_TO_ADDR
48369: LD_INT 1
48371: PUSH
48372: FOR_DOWNTO
48373: IFFALSE 48623
// begin side := GetSide ( minersList [ i ] ) ;
48375: LD_ADDR_VAR 0 3
48379: PUSH
48380: LD_EXP 139
48384: PUSH
48385: LD_VAR 0 1
48389: ARRAY
48390: PPUSH
48391: CALL_OW 255
48395: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48396: LD_ADDR_VAR 0 4
48400: PUSH
48401: LD_EXP 140
48405: PUSH
48406: LD_VAR 0 1
48410: ARRAY
48411: PUSH
48412: LD_VAR 0 2
48416: ARRAY
48417: PUSH
48418: LD_INT 1
48420: ARRAY
48421: PPUSH
48422: LD_EXP 140
48426: PUSH
48427: LD_VAR 0 1
48431: ARRAY
48432: PUSH
48433: LD_VAR 0 2
48437: ARRAY
48438: PUSH
48439: LD_INT 2
48441: ARRAY
48442: PPUSH
48443: CALL_OW 428
48447: ST_TO_ADDR
// if not tmp then
48448: LD_VAR 0 4
48452: NOT
48453: IFFALSE 48457
// continue ;
48455: GO 48372
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
48457: LD_VAR 0 4
48461: PUSH
48462: LD_INT 81
48464: PUSH
48465: LD_VAR 0 3
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PPUSH
48474: CALL_OW 69
48478: IN
48479: PUSH
48480: LD_EXP 140
48484: PUSH
48485: LD_VAR 0 1
48489: ARRAY
48490: PUSH
48491: LD_VAR 0 2
48495: ARRAY
48496: PUSH
48497: LD_INT 1
48499: ARRAY
48500: PPUSH
48501: LD_EXP 140
48505: PUSH
48506: LD_VAR 0 1
48510: ARRAY
48511: PUSH
48512: LD_VAR 0 2
48516: ARRAY
48517: PUSH
48518: LD_INT 2
48520: ARRAY
48521: PPUSH
48522: CALL_OW 458
48526: AND
48527: IFFALSE 48621
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48529: LD_EXP 140
48533: PUSH
48534: LD_VAR 0 1
48538: ARRAY
48539: PUSH
48540: LD_VAR 0 2
48544: ARRAY
48545: PUSH
48546: LD_INT 1
48548: ARRAY
48549: PPUSH
48550: LD_EXP 140
48554: PUSH
48555: LD_VAR 0 1
48559: ARRAY
48560: PUSH
48561: LD_VAR 0 2
48565: ARRAY
48566: PUSH
48567: LD_INT 2
48569: ARRAY
48570: PPUSH
48571: LD_VAR 0 3
48575: PPUSH
48576: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48580: LD_ADDR_EXP 140
48584: PUSH
48585: LD_EXP 140
48589: PPUSH
48590: LD_VAR 0 1
48594: PPUSH
48595: LD_EXP 140
48599: PUSH
48600: LD_VAR 0 1
48604: ARRAY
48605: PPUSH
48606: LD_VAR 0 2
48610: PPUSH
48611: CALL_OW 3
48615: PPUSH
48616: CALL_OW 1
48620: ST_TO_ADDR
// end ; end ;
48621: GO 48372
48623: POP
48624: POP
// end ;
48625: GO 48290
48627: POP
48628: POP
// end ;
48629: PPOPN 4
48631: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48632: LD_INT 0
48634: PPUSH
48635: PPUSH
// result := false ;
48636: LD_ADDR_VAR 0 4
48640: PUSH
48641: LD_INT 0
48643: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48644: LD_VAR 0 1
48648: PPUSH
48649: CALL_OW 264
48653: PUSH
48654: LD_INT 81
48656: EQUAL
48657: NOT
48658: IFFALSE 48662
// exit ;
48660: GO 48902
// index := GetElementIndex ( minersList , unit ) ;
48662: LD_ADDR_VAR 0 5
48666: PUSH
48667: LD_EXP 139
48671: PPUSH
48672: LD_VAR 0 1
48676: PPUSH
48677: CALL 55035 0 2
48681: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48682: LD_EXP 140
48686: PUSH
48687: LD_VAR 0 5
48691: ARRAY
48692: PUSH
48693: LD_EXP 141
48697: GREATEREQUAL
48698: IFFALSE 48702
// exit ;
48700: GO 48902
// ComMoveXY ( unit , x , y ) ;
48702: LD_VAR 0 1
48706: PPUSH
48707: LD_VAR 0 2
48711: PPUSH
48712: LD_VAR 0 3
48716: PPUSH
48717: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48721: LD_INT 35
48723: PPUSH
48724: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48728: LD_VAR 0 1
48732: PPUSH
48733: LD_VAR 0 2
48737: PPUSH
48738: LD_VAR 0 3
48742: PPUSH
48743: CALL 86371 0 3
48747: NOT
48748: PUSH
48749: LD_VAR 0 1
48753: PPUSH
48754: CALL_OW 314
48758: AND
48759: IFFALSE 48763
// exit ;
48761: GO 48902
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48763: LD_VAR 0 2
48767: PPUSH
48768: LD_VAR 0 3
48772: PPUSH
48773: CALL_OW 428
48777: PUSH
48778: LD_VAR 0 1
48782: EQUAL
48783: PUSH
48784: LD_VAR 0 1
48788: PPUSH
48789: CALL_OW 314
48793: NOT
48794: AND
48795: IFFALSE 48721
// PlaySoundXY ( x , y , PlantMine ) ;
48797: LD_VAR 0 2
48801: PPUSH
48802: LD_VAR 0 3
48806: PPUSH
48807: LD_STRING PlantMine
48809: PPUSH
48810: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
48814: LD_VAR 0 2
48818: PPUSH
48819: LD_VAR 0 3
48823: PPUSH
48824: LD_VAR 0 1
48828: PPUSH
48829: CALL_OW 255
48833: PPUSH
48834: LD_INT 0
48836: PPUSH
48837: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
48841: LD_ADDR_EXP 140
48845: PUSH
48846: LD_EXP 140
48850: PPUSH
48851: LD_VAR 0 5
48855: PUSH
48856: LD_EXP 140
48860: PUSH
48861: LD_VAR 0 5
48865: ARRAY
48866: PUSH
48867: LD_INT 1
48869: PLUS
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PPUSH
48875: LD_VAR 0 2
48879: PUSH
48880: LD_VAR 0 3
48884: PUSH
48885: EMPTY
48886: LIST
48887: LIST
48888: PPUSH
48889: CALL 55250 0 3
48893: ST_TO_ADDR
// result := true ;
48894: LD_ADDR_VAR 0 4
48898: PUSH
48899: LD_INT 1
48901: ST_TO_ADDR
// end ;
48902: LD_VAR 0 4
48906: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
48907: LD_INT 0
48909: PPUSH
48910: PPUSH
48911: PPUSH
// if not unit in minersList then
48912: LD_VAR 0 1
48916: PUSH
48917: LD_EXP 139
48921: IN
48922: NOT
48923: IFFALSE 48927
// exit ;
48925: GO 49319
// index := GetElementIndex ( minersList , unit ) ;
48927: LD_ADDR_VAR 0 6
48931: PUSH
48932: LD_EXP 139
48936: PPUSH
48937: LD_VAR 0 1
48941: PPUSH
48942: CALL 55035 0 2
48946: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
48947: LD_ADDR_VAR 0 5
48951: PUSH
48952: DOUBLE
48953: LD_EXP 140
48957: PUSH
48958: LD_VAR 0 6
48962: ARRAY
48963: INC
48964: ST_TO_ADDR
48965: LD_INT 1
48967: PUSH
48968: FOR_DOWNTO
48969: IFFALSE 49130
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
48971: LD_EXP 140
48975: PUSH
48976: LD_VAR 0 6
48980: ARRAY
48981: PUSH
48982: LD_VAR 0 5
48986: ARRAY
48987: PUSH
48988: LD_INT 1
48990: ARRAY
48991: PUSH
48992: LD_VAR 0 2
48996: EQUAL
48997: PUSH
48998: LD_EXP 140
49002: PUSH
49003: LD_VAR 0 6
49007: ARRAY
49008: PUSH
49009: LD_VAR 0 5
49013: ARRAY
49014: PUSH
49015: LD_INT 2
49017: ARRAY
49018: PUSH
49019: LD_VAR 0 3
49023: EQUAL
49024: AND
49025: IFFALSE 49128
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49027: LD_EXP 140
49031: PUSH
49032: LD_VAR 0 6
49036: ARRAY
49037: PUSH
49038: LD_VAR 0 5
49042: ARRAY
49043: PUSH
49044: LD_INT 1
49046: ARRAY
49047: PPUSH
49048: LD_EXP 140
49052: PUSH
49053: LD_VAR 0 6
49057: ARRAY
49058: PUSH
49059: LD_VAR 0 5
49063: ARRAY
49064: PUSH
49065: LD_INT 2
49067: ARRAY
49068: PPUSH
49069: LD_VAR 0 1
49073: PPUSH
49074: CALL_OW 255
49078: PPUSH
49079: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49083: LD_ADDR_EXP 140
49087: PUSH
49088: LD_EXP 140
49092: PPUSH
49093: LD_VAR 0 6
49097: PPUSH
49098: LD_EXP 140
49102: PUSH
49103: LD_VAR 0 6
49107: ARRAY
49108: PPUSH
49109: LD_VAR 0 5
49113: PPUSH
49114: CALL_OW 3
49118: PPUSH
49119: CALL_OW 1
49123: ST_TO_ADDR
// exit ;
49124: POP
49125: POP
49126: GO 49319
// end ; end ;
49128: GO 48968
49130: POP
49131: POP
// for i := minerMinesList [ index ] downto 1 do
49132: LD_ADDR_VAR 0 5
49136: PUSH
49137: DOUBLE
49138: LD_EXP 140
49142: PUSH
49143: LD_VAR 0 6
49147: ARRAY
49148: INC
49149: ST_TO_ADDR
49150: LD_INT 1
49152: PUSH
49153: FOR_DOWNTO
49154: IFFALSE 49317
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
49156: LD_EXP 140
49160: PUSH
49161: LD_VAR 0 6
49165: ARRAY
49166: PUSH
49167: LD_VAR 0 5
49171: ARRAY
49172: PUSH
49173: LD_INT 1
49175: ARRAY
49176: PPUSH
49177: LD_EXP 140
49181: PUSH
49182: LD_VAR 0 6
49186: ARRAY
49187: PUSH
49188: LD_VAR 0 5
49192: ARRAY
49193: PUSH
49194: LD_INT 2
49196: ARRAY
49197: PPUSH
49198: LD_VAR 0 2
49202: PPUSH
49203: LD_VAR 0 3
49207: PPUSH
49208: CALL_OW 298
49212: PUSH
49213: LD_INT 6
49215: LESS
49216: IFFALSE 49315
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49218: LD_EXP 140
49222: PUSH
49223: LD_VAR 0 6
49227: ARRAY
49228: PUSH
49229: LD_VAR 0 5
49233: ARRAY
49234: PUSH
49235: LD_INT 1
49237: ARRAY
49238: PPUSH
49239: LD_EXP 140
49243: PUSH
49244: LD_VAR 0 6
49248: ARRAY
49249: PUSH
49250: LD_VAR 0 5
49254: ARRAY
49255: PUSH
49256: LD_INT 2
49258: ARRAY
49259: PPUSH
49260: LD_VAR 0 1
49264: PPUSH
49265: CALL_OW 255
49269: PPUSH
49270: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49274: LD_ADDR_EXP 140
49278: PUSH
49279: LD_EXP 140
49283: PPUSH
49284: LD_VAR 0 6
49288: PPUSH
49289: LD_EXP 140
49293: PUSH
49294: LD_VAR 0 6
49298: ARRAY
49299: PPUSH
49300: LD_VAR 0 5
49304: PPUSH
49305: CALL_OW 3
49309: PPUSH
49310: CALL_OW 1
49314: ST_TO_ADDR
// end ; end ;
49315: GO 49153
49317: POP
49318: POP
// end ;
49319: LD_VAR 0 4
49323: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
49324: LD_INT 0
49326: PPUSH
49327: PPUSH
49328: PPUSH
49329: PPUSH
49330: PPUSH
49331: PPUSH
49332: PPUSH
49333: PPUSH
49334: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
49335: LD_VAR 0 1
49339: PPUSH
49340: CALL_OW 264
49344: PUSH
49345: LD_INT 81
49347: EQUAL
49348: NOT
49349: PUSH
49350: LD_VAR 0 1
49354: PUSH
49355: LD_EXP 139
49359: IN
49360: NOT
49361: OR
49362: IFFALSE 49366
// exit ;
49364: GO 49688
// index := GetElementIndex ( minersList , unit ) ;
49366: LD_ADDR_VAR 0 6
49370: PUSH
49371: LD_EXP 139
49375: PPUSH
49376: LD_VAR 0 1
49380: PPUSH
49381: CALL 55035 0 2
49385: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
49386: LD_ADDR_VAR 0 8
49390: PUSH
49391: LD_EXP 141
49395: PUSH
49396: LD_EXP 140
49400: PUSH
49401: LD_VAR 0 6
49405: ARRAY
49406: MINUS
49407: ST_TO_ADDR
// if not minesFreeAmount then
49408: LD_VAR 0 8
49412: NOT
49413: IFFALSE 49417
// exit ;
49415: GO 49688
// tmp := [ ] ;
49417: LD_ADDR_VAR 0 7
49421: PUSH
49422: EMPTY
49423: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
49424: LD_ADDR_VAR 0 5
49428: PUSH
49429: DOUBLE
49430: LD_INT 1
49432: DEC
49433: ST_TO_ADDR
49434: LD_VAR 0 8
49438: PUSH
49439: FOR_TO
49440: IFFALSE 49635
// begin _d := rand ( 0 , 5 ) ;
49442: LD_ADDR_VAR 0 11
49446: PUSH
49447: LD_INT 0
49449: PPUSH
49450: LD_INT 5
49452: PPUSH
49453: CALL_OW 12
49457: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
49458: LD_ADDR_VAR 0 12
49462: PUSH
49463: LD_INT 2
49465: PPUSH
49466: LD_INT 6
49468: PPUSH
49469: CALL_OW 12
49473: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
49474: LD_ADDR_VAR 0 9
49478: PUSH
49479: LD_VAR 0 2
49483: PPUSH
49484: LD_VAR 0 11
49488: PPUSH
49489: LD_VAR 0 12
49493: PPUSH
49494: CALL_OW 272
49498: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49499: LD_ADDR_VAR 0 10
49503: PUSH
49504: LD_VAR 0 3
49508: PPUSH
49509: LD_VAR 0 11
49513: PPUSH
49514: LD_VAR 0 12
49518: PPUSH
49519: CALL_OW 273
49523: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49524: LD_VAR 0 9
49528: PPUSH
49529: LD_VAR 0 10
49533: PPUSH
49534: CALL_OW 488
49538: PUSH
49539: LD_VAR 0 9
49543: PUSH
49544: LD_VAR 0 10
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_VAR 0 7
49557: IN
49558: NOT
49559: AND
49560: PUSH
49561: LD_VAR 0 9
49565: PPUSH
49566: LD_VAR 0 10
49570: PPUSH
49571: CALL_OW 458
49575: NOT
49576: AND
49577: IFFALSE 49619
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49579: LD_ADDR_VAR 0 7
49583: PUSH
49584: LD_VAR 0 7
49588: PPUSH
49589: LD_VAR 0 7
49593: PUSH
49594: LD_INT 1
49596: PLUS
49597: PPUSH
49598: LD_VAR 0 9
49602: PUSH
49603: LD_VAR 0 10
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PPUSH
49612: CALL_OW 1
49616: ST_TO_ADDR
49617: GO 49633
// i := i - 1 ;
49619: LD_ADDR_VAR 0 5
49623: PUSH
49624: LD_VAR 0 5
49628: PUSH
49629: LD_INT 1
49631: MINUS
49632: ST_TO_ADDR
// end ;
49633: GO 49439
49635: POP
49636: POP
// for i in tmp do
49637: LD_ADDR_VAR 0 5
49641: PUSH
49642: LD_VAR 0 7
49646: PUSH
49647: FOR_IN
49648: IFFALSE 49686
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49650: LD_VAR 0 1
49654: PPUSH
49655: LD_VAR 0 5
49659: PUSH
49660: LD_INT 1
49662: ARRAY
49663: PPUSH
49664: LD_VAR 0 5
49668: PUSH
49669: LD_INT 2
49671: ARRAY
49672: PPUSH
49673: CALL 48632 0 3
49677: NOT
49678: IFFALSE 49684
// exit ;
49680: POP
49681: POP
49682: GO 49688
49684: GO 49647
49686: POP
49687: POP
// end ;
49688: LD_VAR 0 4
49692: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
49693: LD_INT 0
49695: PPUSH
49696: PPUSH
49697: PPUSH
49698: PPUSH
49699: PPUSH
49700: PPUSH
49701: PPUSH
// if not GetClass ( unit ) = class_sniper then
49702: LD_VAR 0 1
49706: PPUSH
49707: CALL_OW 257
49711: PUSH
49712: LD_INT 5
49714: EQUAL
49715: NOT
49716: IFFALSE 49720
// exit ;
49718: GO 50108
// dist := 8 ;
49720: LD_ADDR_VAR 0 5
49724: PUSH
49725: LD_INT 8
49727: ST_TO_ADDR
// viewRange := 12 ;
49728: LD_ADDR_VAR 0 7
49732: PUSH
49733: LD_INT 12
49735: ST_TO_ADDR
// side := GetSide ( unit ) ;
49736: LD_ADDR_VAR 0 6
49740: PUSH
49741: LD_VAR 0 1
49745: PPUSH
49746: CALL_OW 255
49750: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49751: LD_INT 61
49753: PPUSH
49754: LD_VAR 0 6
49758: PPUSH
49759: CALL_OW 321
49763: PUSH
49764: LD_INT 2
49766: EQUAL
49767: IFFALSE 49777
// viewRange := 16 ;
49769: LD_ADDR_VAR 0 7
49773: PUSH
49774: LD_INT 16
49776: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49777: LD_VAR 0 1
49781: PPUSH
49782: LD_VAR 0 2
49786: PPUSH
49787: LD_VAR 0 3
49791: PPUSH
49792: CALL_OW 297
49796: PUSH
49797: LD_VAR 0 5
49801: GREATER
49802: IFFALSE 49881
// begin ComMoveXY ( unit , x , y ) ;
49804: LD_VAR 0 1
49808: PPUSH
49809: LD_VAR 0 2
49813: PPUSH
49814: LD_VAR 0 3
49818: PPUSH
49819: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49823: LD_INT 35
49825: PPUSH
49826: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
49830: LD_VAR 0 1
49834: PPUSH
49835: LD_VAR 0 2
49839: PPUSH
49840: LD_VAR 0 3
49844: PPUSH
49845: CALL 86371 0 3
49849: NOT
49850: IFFALSE 49854
// exit ;
49852: GO 50108
// until GetDistUnitXY ( unit , x , y ) < dist ;
49854: LD_VAR 0 1
49858: PPUSH
49859: LD_VAR 0 2
49863: PPUSH
49864: LD_VAR 0 3
49868: PPUSH
49869: CALL_OW 297
49873: PUSH
49874: LD_VAR 0 5
49878: LESS
49879: IFFALSE 49823
// end ; ComTurnXY ( unit , x , y ) ;
49881: LD_VAR 0 1
49885: PPUSH
49886: LD_VAR 0 2
49890: PPUSH
49891: LD_VAR 0 3
49895: PPUSH
49896: CALL_OW 118
// wait ( 5 ) ;
49900: LD_INT 5
49902: PPUSH
49903: CALL_OW 67
// _d := GetDir ( unit ) ;
49907: LD_ADDR_VAR 0 10
49911: PUSH
49912: LD_VAR 0 1
49916: PPUSH
49917: CALL_OW 254
49921: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
49922: LD_ADDR_VAR 0 8
49926: PUSH
49927: LD_VAR 0 1
49931: PPUSH
49932: CALL_OW 250
49936: PPUSH
49937: LD_VAR 0 10
49941: PPUSH
49942: LD_VAR 0 5
49946: PPUSH
49947: CALL_OW 272
49951: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
49952: LD_ADDR_VAR 0 9
49956: PUSH
49957: LD_VAR 0 1
49961: PPUSH
49962: CALL_OW 251
49966: PPUSH
49967: LD_VAR 0 10
49971: PPUSH
49972: LD_VAR 0 5
49976: PPUSH
49977: CALL_OW 273
49981: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49982: LD_VAR 0 8
49986: PPUSH
49987: LD_VAR 0 9
49991: PPUSH
49992: CALL_OW 488
49996: NOT
49997: IFFALSE 50001
// exit ;
49999: GO 50108
// ComAnimCustom ( unit , 1 ) ;
50001: LD_VAR 0 1
50005: PPUSH
50006: LD_INT 1
50008: PPUSH
50009: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
50013: LD_VAR 0 8
50017: PPUSH
50018: LD_VAR 0 9
50022: PPUSH
50023: LD_VAR 0 6
50027: PPUSH
50028: LD_VAR 0 7
50032: PPUSH
50033: CALL_OW 330
// repeat wait ( 1 ) ;
50037: LD_INT 1
50039: PPUSH
50040: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
50044: LD_VAR 0 1
50048: PPUSH
50049: CALL_OW 316
50053: PUSH
50054: LD_VAR 0 1
50058: PPUSH
50059: CALL_OW 314
50063: OR
50064: PUSH
50065: LD_VAR 0 1
50069: PPUSH
50070: CALL_OW 302
50074: NOT
50075: OR
50076: PUSH
50077: LD_VAR 0 1
50081: PPUSH
50082: CALL_OW 301
50086: OR
50087: IFFALSE 50037
// RemoveSeeing ( _x , _y , side ) ;
50089: LD_VAR 0 8
50093: PPUSH
50094: LD_VAR 0 9
50098: PPUSH
50099: LD_VAR 0 6
50103: PPUSH
50104: CALL_OW 331
// end ; end_of_file
50108: LD_VAR 0 4
50112: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
50113: LD_INT 0
50115: PPUSH
50116: PPUSH
// if exist_mode then
50117: LD_VAR 0 2
50121: IFFALSE 50146
// unit := CreateCharacter ( prefix & ident ) else
50123: LD_ADDR_VAR 0 5
50127: PUSH
50128: LD_VAR 0 3
50132: PUSH
50133: LD_VAR 0 1
50137: STR
50138: PPUSH
50139: CALL_OW 34
50143: ST_TO_ADDR
50144: GO 50161
// unit := NewCharacter ( ident ) ;
50146: LD_ADDR_VAR 0 5
50150: PUSH
50151: LD_VAR 0 1
50155: PPUSH
50156: CALL_OW 25
50160: ST_TO_ADDR
// result := unit ;
50161: LD_ADDR_VAR 0 4
50165: PUSH
50166: LD_VAR 0 5
50170: ST_TO_ADDR
// end ;
50171: LD_VAR 0 4
50175: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
50176: LD_INT 0
50178: PPUSH
50179: PPUSH
// if not side or not nation then
50180: LD_VAR 0 1
50184: NOT
50185: PUSH
50186: LD_VAR 0 2
50190: NOT
50191: OR
50192: IFFALSE 50196
// exit ;
50194: GO 50964
// case nation of nation_american :
50196: LD_VAR 0 2
50200: PUSH
50201: LD_INT 1
50203: DOUBLE
50204: EQUAL
50205: IFTRUE 50209
50207: GO 50423
50209: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
50210: LD_ADDR_VAR 0 4
50214: PUSH
50215: LD_INT 35
50217: PUSH
50218: LD_INT 45
50220: PUSH
50221: LD_INT 46
50223: PUSH
50224: LD_INT 47
50226: PUSH
50227: LD_INT 82
50229: PUSH
50230: LD_INT 83
50232: PUSH
50233: LD_INT 84
50235: PUSH
50236: LD_INT 85
50238: PUSH
50239: LD_INT 86
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: LD_INT 2
50247: PUSH
50248: LD_INT 6
50250: PUSH
50251: LD_INT 15
50253: PUSH
50254: LD_INT 16
50256: PUSH
50257: LD_INT 7
50259: PUSH
50260: LD_INT 12
50262: PUSH
50263: LD_INT 13
50265: PUSH
50266: LD_INT 10
50268: PUSH
50269: LD_INT 14
50271: PUSH
50272: LD_INT 20
50274: PUSH
50275: LD_INT 21
50277: PUSH
50278: LD_INT 22
50280: PUSH
50281: LD_INT 25
50283: PUSH
50284: LD_INT 32
50286: PUSH
50287: LD_INT 27
50289: PUSH
50290: LD_INT 36
50292: PUSH
50293: LD_INT 69
50295: PUSH
50296: LD_INT 39
50298: PUSH
50299: LD_INT 34
50301: PUSH
50302: LD_INT 40
50304: PUSH
50305: LD_INT 48
50307: PUSH
50308: LD_INT 49
50310: PUSH
50311: LD_INT 50
50313: PUSH
50314: LD_INT 51
50316: PUSH
50317: LD_INT 52
50319: PUSH
50320: LD_INT 53
50322: PUSH
50323: LD_INT 54
50325: PUSH
50326: LD_INT 55
50328: PUSH
50329: LD_INT 56
50331: PUSH
50332: LD_INT 57
50334: PUSH
50335: LD_INT 58
50337: PUSH
50338: LD_INT 59
50340: PUSH
50341: LD_INT 60
50343: PUSH
50344: LD_INT 61
50346: PUSH
50347: LD_INT 62
50349: PUSH
50350: LD_INT 80
50352: PUSH
50353: LD_INT 82
50355: PUSH
50356: LD_INT 83
50358: PUSH
50359: LD_INT 84
50361: PUSH
50362: LD_INT 85
50364: PUSH
50365: LD_INT 86
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: ST_TO_ADDR
50421: GO 50888
50423: LD_INT 2
50425: DOUBLE
50426: EQUAL
50427: IFTRUE 50431
50429: GO 50657
50431: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
50432: LD_ADDR_VAR 0 4
50436: PUSH
50437: LD_INT 35
50439: PUSH
50440: LD_INT 45
50442: PUSH
50443: LD_INT 46
50445: PUSH
50446: LD_INT 47
50448: PUSH
50449: LD_INT 82
50451: PUSH
50452: LD_INT 83
50454: PUSH
50455: LD_INT 84
50457: PUSH
50458: LD_INT 85
50460: PUSH
50461: LD_INT 87
50463: PUSH
50464: LD_INT 70
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: LD_INT 11
50472: PUSH
50473: LD_INT 3
50475: PUSH
50476: LD_INT 4
50478: PUSH
50479: LD_INT 5
50481: PUSH
50482: LD_INT 6
50484: PUSH
50485: LD_INT 15
50487: PUSH
50488: LD_INT 18
50490: PUSH
50491: LD_INT 7
50493: PUSH
50494: LD_INT 17
50496: PUSH
50497: LD_INT 8
50499: PUSH
50500: LD_INT 20
50502: PUSH
50503: LD_INT 21
50505: PUSH
50506: LD_INT 22
50508: PUSH
50509: LD_INT 72
50511: PUSH
50512: LD_INT 26
50514: PUSH
50515: LD_INT 69
50517: PUSH
50518: LD_INT 39
50520: PUSH
50521: LD_INT 40
50523: PUSH
50524: LD_INT 41
50526: PUSH
50527: LD_INT 42
50529: PUSH
50530: LD_INT 43
50532: PUSH
50533: LD_INT 48
50535: PUSH
50536: LD_INT 49
50538: PUSH
50539: LD_INT 50
50541: PUSH
50542: LD_INT 51
50544: PUSH
50545: LD_INT 52
50547: PUSH
50548: LD_INT 53
50550: PUSH
50551: LD_INT 54
50553: PUSH
50554: LD_INT 55
50556: PUSH
50557: LD_INT 56
50559: PUSH
50560: LD_INT 60
50562: PUSH
50563: LD_INT 61
50565: PUSH
50566: LD_INT 62
50568: PUSH
50569: LD_INT 66
50571: PUSH
50572: LD_INT 67
50574: PUSH
50575: LD_INT 68
50577: PUSH
50578: LD_INT 81
50580: PUSH
50581: LD_INT 82
50583: PUSH
50584: LD_INT 83
50586: PUSH
50587: LD_INT 84
50589: PUSH
50590: LD_INT 85
50592: PUSH
50593: LD_INT 87
50595: PUSH
50596: LD_INT 88
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: ST_TO_ADDR
50655: GO 50888
50657: LD_INT 3
50659: DOUBLE
50660: EQUAL
50661: IFTRUE 50665
50663: GO 50887
50665: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
50666: LD_ADDR_VAR 0 4
50670: PUSH
50671: LD_INT 46
50673: PUSH
50674: LD_INT 47
50676: PUSH
50677: LD_INT 1
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 82
50685: PUSH
50686: LD_INT 83
50688: PUSH
50689: LD_INT 84
50691: PUSH
50692: LD_INT 85
50694: PUSH
50695: LD_INT 86
50697: PUSH
50698: LD_INT 11
50700: PUSH
50701: LD_INT 9
50703: PUSH
50704: LD_INT 20
50706: PUSH
50707: LD_INT 19
50709: PUSH
50710: LD_INT 21
50712: PUSH
50713: LD_INT 24
50715: PUSH
50716: LD_INT 22
50718: PUSH
50719: LD_INT 25
50721: PUSH
50722: LD_INT 28
50724: PUSH
50725: LD_INT 29
50727: PUSH
50728: LD_INT 30
50730: PUSH
50731: LD_INT 31
50733: PUSH
50734: LD_INT 37
50736: PUSH
50737: LD_INT 38
50739: PUSH
50740: LD_INT 32
50742: PUSH
50743: LD_INT 27
50745: PUSH
50746: LD_INT 33
50748: PUSH
50749: LD_INT 69
50751: PUSH
50752: LD_INT 39
50754: PUSH
50755: LD_INT 34
50757: PUSH
50758: LD_INT 40
50760: PUSH
50761: LD_INT 71
50763: PUSH
50764: LD_INT 23
50766: PUSH
50767: LD_INT 44
50769: PUSH
50770: LD_INT 48
50772: PUSH
50773: LD_INT 49
50775: PUSH
50776: LD_INT 50
50778: PUSH
50779: LD_INT 51
50781: PUSH
50782: LD_INT 52
50784: PUSH
50785: LD_INT 53
50787: PUSH
50788: LD_INT 54
50790: PUSH
50791: LD_INT 55
50793: PUSH
50794: LD_INT 56
50796: PUSH
50797: LD_INT 57
50799: PUSH
50800: LD_INT 58
50802: PUSH
50803: LD_INT 59
50805: PUSH
50806: LD_INT 63
50808: PUSH
50809: LD_INT 64
50811: PUSH
50812: LD_INT 65
50814: PUSH
50815: LD_INT 82
50817: PUSH
50818: LD_INT 83
50820: PUSH
50821: LD_INT 84
50823: PUSH
50824: LD_INT 85
50826: PUSH
50827: LD_INT 86
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: ST_TO_ADDR
50885: GO 50888
50887: POP
// if state > - 1 and state < 3 then
50888: LD_VAR 0 3
50892: PUSH
50893: LD_INT 1
50895: NEG
50896: GREATER
50897: PUSH
50898: LD_VAR 0 3
50902: PUSH
50903: LD_INT 3
50905: LESS
50906: AND
50907: IFFALSE 50964
// for i in result do
50909: LD_ADDR_VAR 0 5
50913: PUSH
50914: LD_VAR 0 4
50918: PUSH
50919: FOR_IN
50920: IFFALSE 50962
// if GetTech ( i , side ) <> state then
50922: LD_VAR 0 5
50926: PPUSH
50927: LD_VAR 0 1
50931: PPUSH
50932: CALL_OW 321
50936: PUSH
50937: LD_VAR 0 3
50941: NONEQUAL
50942: IFFALSE 50960
// result := result diff i ;
50944: LD_ADDR_VAR 0 4
50948: PUSH
50949: LD_VAR 0 4
50953: PUSH
50954: LD_VAR 0 5
50958: DIFF
50959: ST_TO_ADDR
50960: GO 50919
50962: POP
50963: POP
// end ;
50964: LD_VAR 0 4
50968: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
50969: LD_INT 0
50971: PPUSH
50972: PPUSH
50973: PPUSH
// result := true ;
50974: LD_ADDR_VAR 0 3
50978: PUSH
50979: LD_INT 1
50981: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
50982: LD_ADDR_VAR 0 5
50986: PUSH
50987: LD_VAR 0 2
50991: PPUSH
50992: CALL_OW 480
50996: ST_TO_ADDR
// if not tmp then
50997: LD_VAR 0 5
51001: NOT
51002: IFFALSE 51006
// exit ;
51004: GO 51055
// for i in tmp do
51006: LD_ADDR_VAR 0 4
51010: PUSH
51011: LD_VAR 0 5
51015: PUSH
51016: FOR_IN
51017: IFFALSE 51053
// if GetTech ( i , side ) <> state_researched then
51019: LD_VAR 0 4
51023: PPUSH
51024: LD_VAR 0 1
51028: PPUSH
51029: CALL_OW 321
51033: PUSH
51034: LD_INT 2
51036: NONEQUAL
51037: IFFALSE 51051
// begin result := false ;
51039: LD_ADDR_VAR 0 3
51043: PUSH
51044: LD_INT 0
51046: ST_TO_ADDR
// exit ;
51047: POP
51048: POP
51049: GO 51055
// end ;
51051: GO 51016
51053: POP
51054: POP
// end ;
51055: LD_VAR 0 3
51059: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
51060: LD_INT 0
51062: PPUSH
51063: PPUSH
51064: PPUSH
51065: PPUSH
51066: PPUSH
51067: PPUSH
51068: PPUSH
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
51075: LD_VAR 0 1
51079: NOT
51080: PUSH
51081: LD_VAR 0 1
51085: PPUSH
51086: CALL_OW 257
51090: PUSH
51091: LD_INT 9
51093: NONEQUAL
51094: OR
51095: IFFALSE 51099
// exit ;
51097: GO 51672
// side := GetSide ( unit ) ;
51099: LD_ADDR_VAR 0 9
51103: PUSH
51104: LD_VAR 0 1
51108: PPUSH
51109: CALL_OW 255
51113: ST_TO_ADDR
// tech_space := tech_spacanom ;
51114: LD_ADDR_VAR 0 12
51118: PUSH
51119: LD_INT 29
51121: ST_TO_ADDR
// tech_time := tech_taurad ;
51122: LD_ADDR_VAR 0 13
51126: PUSH
51127: LD_INT 28
51129: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
51130: LD_ADDR_VAR 0 11
51134: PUSH
51135: LD_VAR 0 1
51139: PPUSH
51140: CALL_OW 310
51144: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
51145: LD_VAR 0 11
51149: PPUSH
51150: CALL_OW 247
51154: PUSH
51155: LD_INT 2
51157: EQUAL
51158: IFFALSE 51162
// exit ;
51160: GO 51672
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51162: LD_ADDR_VAR 0 8
51166: PUSH
51167: LD_INT 81
51169: PUSH
51170: LD_VAR 0 9
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 3
51181: PUSH
51182: LD_INT 21
51184: PUSH
51185: LD_INT 3
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PPUSH
51200: CALL_OW 69
51204: ST_TO_ADDR
// if not tmp then
51205: LD_VAR 0 8
51209: NOT
51210: IFFALSE 51214
// exit ;
51212: GO 51672
// if in_unit then
51214: LD_VAR 0 11
51218: IFFALSE 51242
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51220: LD_ADDR_VAR 0 10
51224: PUSH
51225: LD_VAR 0 8
51229: PPUSH
51230: LD_VAR 0 11
51234: PPUSH
51235: CALL_OW 74
51239: ST_TO_ADDR
51240: GO 51262
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51242: LD_ADDR_VAR 0 10
51246: PUSH
51247: LD_VAR 0 8
51251: PPUSH
51252: LD_VAR 0 1
51256: PPUSH
51257: CALL_OW 74
51261: ST_TO_ADDR
// if not enemy then
51262: LD_VAR 0 10
51266: NOT
51267: IFFALSE 51271
// exit ;
51269: GO 51672
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51271: LD_VAR 0 11
51275: PUSH
51276: LD_VAR 0 11
51280: PPUSH
51281: LD_VAR 0 10
51285: PPUSH
51286: CALL_OW 296
51290: PUSH
51291: LD_INT 13
51293: GREATER
51294: AND
51295: PUSH
51296: LD_VAR 0 1
51300: PPUSH
51301: LD_VAR 0 10
51305: PPUSH
51306: CALL_OW 296
51310: PUSH
51311: LD_INT 12
51313: GREATER
51314: OR
51315: IFFALSE 51319
// exit ;
51317: GO 51672
// missile := [ 1 ] ;
51319: LD_ADDR_VAR 0 14
51323: PUSH
51324: LD_INT 1
51326: PUSH
51327: EMPTY
51328: LIST
51329: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51330: LD_VAR 0 9
51334: PPUSH
51335: LD_VAR 0 12
51339: PPUSH
51340: CALL_OW 325
51344: IFFALSE 51373
// missile := Replace ( missile , missile + 1 , 2 ) ;
51346: LD_ADDR_VAR 0 14
51350: PUSH
51351: LD_VAR 0 14
51355: PPUSH
51356: LD_VAR 0 14
51360: PUSH
51361: LD_INT 1
51363: PLUS
51364: PPUSH
51365: LD_INT 2
51367: PPUSH
51368: CALL_OW 1
51372: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51373: LD_VAR 0 9
51377: PPUSH
51378: LD_VAR 0 13
51382: PPUSH
51383: CALL_OW 325
51387: PUSH
51388: LD_VAR 0 10
51392: PPUSH
51393: CALL_OW 255
51397: PPUSH
51398: LD_VAR 0 13
51402: PPUSH
51403: CALL_OW 325
51407: NOT
51408: AND
51409: IFFALSE 51438
// missile := Replace ( missile , missile + 1 , 3 ) ;
51411: LD_ADDR_VAR 0 14
51415: PUSH
51416: LD_VAR 0 14
51420: PPUSH
51421: LD_VAR 0 14
51425: PUSH
51426: LD_INT 1
51428: PLUS
51429: PPUSH
51430: LD_INT 3
51432: PPUSH
51433: CALL_OW 1
51437: ST_TO_ADDR
// if missile < 2 then
51438: LD_VAR 0 14
51442: PUSH
51443: LD_INT 2
51445: LESS
51446: IFFALSE 51450
// exit ;
51448: GO 51672
// x := GetX ( enemy ) ;
51450: LD_ADDR_VAR 0 4
51454: PUSH
51455: LD_VAR 0 10
51459: PPUSH
51460: CALL_OW 250
51464: ST_TO_ADDR
// y := GetY ( enemy ) ;
51465: LD_ADDR_VAR 0 5
51469: PUSH
51470: LD_VAR 0 10
51474: PPUSH
51475: CALL_OW 251
51479: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
51480: LD_ADDR_VAR 0 6
51484: PUSH
51485: LD_VAR 0 4
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PPUSH
51494: LD_INT 1
51496: PPUSH
51497: CALL_OW 12
51501: PLUS
51502: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
51503: LD_ADDR_VAR 0 7
51507: PUSH
51508: LD_VAR 0 5
51512: PUSH
51513: LD_INT 1
51515: NEG
51516: PPUSH
51517: LD_INT 1
51519: PPUSH
51520: CALL_OW 12
51524: PLUS
51525: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51526: LD_VAR 0 6
51530: PPUSH
51531: LD_VAR 0 7
51535: PPUSH
51536: CALL_OW 488
51540: NOT
51541: IFFALSE 51563
// begin _x := x ;
51543: LD_ADDR_VAR 0 6
51547: PUSH
51548: LD_VAR 0 4
51552: ST_TO_ADDR
// _y := y ;
51553: LD_ADDR_VAR 0 7
51557: PUSH
51558: LD_VAR 0 5
51562: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
51563: LD_ADDR_VAR 0 3
51567: PUSH
51568: LD_INT 1
51570: PPUSH
51571: LD_VAR 0 14
51575: PPUSH
51576: CALL_OW 12
51580: ST_TO_ADDR
// case i of 1 :
51581: LD_VAR 0 3
51585: PUSH
51586: LD_INT 1
51588: DOUBLE
51589: EQUAL
51590: IFTRUE 51594
51592: GO 51611
51594: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
51595: LD_VAR 0 1
51599: PPUSH
51600: LD_VAR 0 10
51604: PPUSH
51605: CALL_OW 115
51609: GO 51672
51611: LD_INT 2
51613: DOUBLE
51614: EQUAL
51615: IFTRUE 51619
51617: GO 51641
51619: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
51620: LD_VAR 0 1
51624: PPUSH
51625: LD_VAR 0 6
51629: PPUSH
51630: LD_VAR 0 7
51634: PPUSH
51635: CALL_OW 153
51639: GO 51672
51641: LD_INT 3
51643: DOUBLE
51644: EQUAL
51645: IFTRUE 51649
51647: GO 51671
51649: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
51650: LD_VAR 0 1
51654: PPUSH
51655: LD_VAR 0 6
51659: PPUSH
51660: LD_VAR 0 7
51664: PPUSH
51665: CALL_OW 154
51669: GO 51672
51671: POP
// end ;
51672: LD_VAR 0 2
51676: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
51677: LD_INT 0
51679: PPUSH
51680: PPUSH
51681: PPUSH
51682: PPUSH
51683: PPUSH
51684: PPUSH
// if not unit or not building then
51685: LD_VAR 0 1
51689: NOT
51690: PUSH
51691: LD_VAR 0 2
51695: NOT
51696: OR
51697: IFFALSE 51701
// exit ;
51699: GO 51859
// x := GetX ( building ) ;
51701: LD_ADDR_VAR 0 5
51705: PUSH
51706: LD_VAR 0 2
51710: PPUSH
51711: CALL_OW 250
51715: ST_TO_ADDR
// y := GetY ( building ) ;
51716: LD_ADDR_VAR 0 6
51720: PUSH
51721: LD_VAR 0 2
51725: PPUSH
51726: CALL_OW 251
51730: ST_TO_ADDR
// for i = 0 to 5 do
51731: LD_ADDR_VAR 0 4
51735: PUSH
51736: DOUBLE
51737: LD_INT 0
51739: DEC
51740: ST_TO_ADDR
51741: LD_INT 5
51743: PUSH
51744: FOR_TO
51745: IFFALSE 51857
// begin _x := ShiftX ( x , i , 3 ) ;
51747: LD_ADDR_VAR 0 7
51751: PUSH
51752: LD_VAR 0 5
51756: PPUSH
51757: LD_VAR 0 4
51761: PPUSH
51762: LD_INT 3
51764: PPUSH
51765: CALL_OW 272
51769: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
51770: LD_ADDR_VAR 0 8
51774: PUSH
51775: LD_VAR 0 6
51779: PPUSH
51780: LD_VAR 0 4
51784: PPUSH
51785: LD_INT 3
51787: PPUSH
51788: CALL_OW 273
51792: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51793: LD_VAR 0 7
51797: PPUSH
51798: LD_VAR 0 8
51802: PPUSH
51803: CALL_OW 488
51807: NOT
51808: IFFALSE 51812
// continue ;
51810: GO 51744
// if HexInfo ( _x , _y ) = 0 then
51812: LD_VAR 0 7
51816: PPUSH
51817: LD_VAR 0 8
51821: PPUSH
51822: CALL_OW 428
51826: PUSH
51827: LD_INT 0
51829: EQUAL
51830: IFFALSE 51855
// begin ComMoveXY ( unit , _x , _y ) ;
51832: LD_VAR 0 1
51836: PPUSH
51837: LD_VAR 0 7
51841: PPUSH
51842: LD_VAR 0 8
51846: PPUSH
51847: CALL_OW 111
// exit ;
51851: POP
51852: POP
51853: GO 51859
// end ; end ;
51855: GO 51744
51857: POP
51858: POP
// end ;
51859: LD_VAR 0 3
51863: RET
// export function ScanBase ( side , base_area ) ; begin
51864: LD_INT 0
51866: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
51867: LD_ADDR_VAR 0 3
51871: PUSH
51872: LD_VAR 0 2
51876: PPUSH
51877: LD_INT 81
51879: PUSH
51880: LD_VAR 0 1
51884: PUSH
51885: EMPTY
51886: LIST
51887: LIST
51888: PPUSH
51889: CALL_OW 70
51893: ST_TO_ADDR
// end ;
51894: LD_VAR 0 3
51898: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
51899: LD_INT 0
51901: PPUSH
51902: PPUSH
51903: PPUSH
51904: PPUSH
// result := false ;
51905: LD_ADDR_VAR 0 2
51909: PUSH
51910: LD_INT 0
51912: ST_TO_ADDR
// side := GetSide ( unit ) ;
51913: LD_ADDR_VAR 0 3
51917: PUSH
51918: LD_VAR 0 1
51922: PPUSH
51923: CALL_OW 255
51927: ST_TO_ADDR
// nat := GetNation ( unit ) ;
51928: LD_ADDR_VAR 0 4
51932: PUSH
51933: LD_VAR 0 1
51937: PPUSH
51938: CALL_OW 248
51942: ST_TO_ADDR
// case nat of 1 :
51943: LD_VAR 0 4
51947: PUSH
51948: LD_INT 1
51950: DOUBLE
51951: EQUAL
51952: IFTRUE 51956
51954: GO 51967
51956: POP
// tech := tech_lassight ; 2 :
51957: LD_ADDR_VAR 0 5
51961: PUSH
51962: LD_INT 12
51964: ST_TO_ADDR
51965: GO 52006
51967: LD_INT 2
51969: DOUBLE
51970: EQUAL
51971: IFTRUE 51975
51973: GO 51986
51975: POP
// tech := tech_mortar ; 3 :
51976: LD_ADDR_VAR 0 5
51980: PUSH
51981: LD_INT 41
51983: ST_TO_ADDR
51984: GO 52006
51986: LD_INT 3
51988: DOUBLE
51989: EQUAL
51990: IFTRUE 51994
51992: GO 52005
51994: POP
// tech := tech_bazooka ; end ;
51995: LD_ADDR_VAR 0 5
51999: PUSH
52000: LD_INT 44
52002: ST_TO_ADDR
52003: GO 52006
52005: POP
// if Researched ( side , tech ) then
52006: LD_VAR 0 3
52010: PPUSH
52011: LD_VAR 0 5
52015: PPUSH
52016: CALL_OW 325
52020: IFFALSE 52047
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
52022: LD_ADDR_VAR 0 2
52026: PUSH
52027: LD_INT 5
52029: PUSH
52030: LD_INT 8
52032: PUSH
52033: LD_INT 9
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: LIST
52040: PUSH
52041: LD_VAR 0 4
52045: ARRAY
52046: ST_TO_ADDR
// end ;
52047: LD_VAR 0 2
52051: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
52052: LD_INT 0
52054: PPUSH
52055: PPUSH
52056: PPUSH
// if not mines then
52057: LD_VAR 0 2
52061: NOT
52062: IFFALSE 52066
// exit ;
52064: GO 52210
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52066: LD_ADDR_VAR 0 5
52070: PUSH
52071: LD_INT 81
52073: PUSH
52074: LD_VAR 0 1
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: LD_INT 21
52088: PUSH
52089: LD_INT 3
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PPUSH
52104: CALL_OW 69
52108: ST_TO_ADDR
// for i in mines do
52109: LD_ADDR_VAR 0 4
52113: PUSH
52114: LD_VAR 0 2
52118: PUSH
52119: FOR_IN
52120: IFFALSE 52208
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
52122: LD_VAR 0 4
52126: PUSH
52127: LD_INT 1
52129: ARRAY
52130: PPUSH
52131: LD_VAR 0 4
52135: PUSH
52136: LD_INT 2
52138: ARRAY
52139: PPUSH
52140: CALL_OW 458
52144: NOT
52145: IFFALSE 52149
// continue ;
52147: GO 52119
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
52149: LD_VAR 0 4
52153: PUSH
52154: LD_INT 1
52156: ARRAY
52157: PPUSH
52158: LD_VAR 0 4
52162: PUSH
52163: LD_INT 2
52165: ARRAY
52166: PPUSH
52167: CALL_OW 428
52171: PUSH
52172: LD_VAR 0 5
52176: IN
52177: IFFALSE 52206
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
52179: LD_VAR 0 4
52183: PUSH
52184: LD_INT 1
52186: ARRAY
52187: PPUSH
52188: LD_VAR 0 4
52192: PUSH
52193: LD_INT 2
52195: ARRAY
52196: PPUSH
52197: LD_VAR 0 1
52201: PPUSH
52202: CALL_OW 456
// end ;
52206: GO 52119
52208: POP
52209: POP
// end ;
52210: LD_VAR 0 3
52214: RET
// export function Count ( array ) ; var i ; begin
52215: LD_INT 0
52217: PPUSH
52218: PPUSH
// result := 0 ;
52219: LD_ADDR_VAR 0 2
52223: PUSH
52224: LD_INT 0
52226: ST_TO_ADDR
// for i in array do
52227: LD_ADDR_VAR 0 3
52231: PUSH
52232: LD_VAR 0 1
52236: PUSH
52237: FOR_IN
52238: IFFALSE 52262
// if i then
52240: LD_VAR 0 3
52244: IFFALSE 52260
// result := result + 1 ;
52246: LD_ADDR_VAR 0 2
52250: PUSH
52251: LD_VAR 0 2
52255: PUSH
52256: LD_INT 1
52258: PLUS
52259: ST_TO_ADDR
52260: GO 52237
52262: POP
52263: POP
// end ;
52264: LD_VAR 0 2
52268: RET
// export function IsEmpty ( building ) ; begin
52269: LD_INT 0
52271: PPUSH
// if not building then
52272: LD_VAR 0 1
52276: NOT
52277: IFFALSE 52281
// exit ;
52279: GO 52324
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
52281: LD_ADDR_VAR 0 2
52285: PUSH
52286: LD_VAR 0 1
52290: PUSH
52291: LD_INT 22
52293: PUSH
52294: LD_VAR 0 1
52298: PPUSH
52299: CALL_OW 255
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 58
52310: PUSH
52311: EMPTY
52312: LIST
52313: PUSH
52314: EMPTY
52315: LIST
52316: LIST
52317: PPUSH
52318: CALL_OW 69
52322: IN
52323: ST_TO_ADDR
// end ;
52324: LD_VAR 0 2
52328: RET
// export function IsNotFull ( building ) ; var places ; begin
52329: LD_INT 0
52331: PPUSH
52332: PPUSH
// if not building then
52333: LD_VAR 0 1
52337: NOT
52338: IFFALSE 52342
// exit ;
52340: GO 52513
// result := false ;
52342: LD_ADDR_VAR 0 2
52346: PUSH
52347: LD_INT 0
52349: ST_TO_ADDR
// places := 0 ;
52350: LD_ADDR_VAR 0 3
52354: PUSH
52355: LD_INT 0
52357: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
52358: LD_VAR 0 1
52362: PPUSH
52363: CALL_OW 266
52367: PUSH
52368: LD_INT 0
52370: DOUBLE
52371: EQUAL
52372: IFTRUE 52430
52374: LD_INT 1
52376: DOUBLE
52377: EQUAL
52378: IFTRUE 52430
52380: LD_INT 6
52382: DOUBLE
52383: EQUAL
52384: IFTRUE 52430
52386: LD_INT 7
52388: DOUBLE
52389: EQUAL
52390: IFTRUE 52430
52392: LD_INT 8
52394: DOUBLE
52395: EQUAL
52396: IFTRUE 52430
52398: LD_INT 4
52400: DOUBLE
52401: EQUAL
52402: IFTRUE 52430
52404: LD_INT 5
52406: DOUBLE
52407: EQUAL
52408: IFTRUE 52430
52410: LD_INT 2
52412: DOUBLE
52413: EQUAL
52414: IFTRUE 52430
52416: LD_INT 3
52418: DOUBLE
52419: EQUAL
52420: IFTRUE 52430
52422: LD_INT 35
52424: DOUBLE
52425: EQUAL
52426: IFTRUE 52430
52428: GO 52441
52430: POP
// places := 6 ; b_bunker , b_breastwork :
52431: LD_ADDR_VAR 0 3
52435: PUSH
52436: LD_INT 6
52438: ST_TO_ADDR
52439: GO 52486
52441: LD_INT 32
52443: DOUBLE
52444: EQUAL
52445: IFTRUE 52455
52447: LD_INT 31
52449: DOUBLE
52450: EQUAL
52451: IFTRUE 52455
52453: GO 52466
52455: POP
// places := 1 ; b_control_tower :
52456: LD_ADDR_VAR 0 3
52460: PUSH
52461: LD_INT 1
52463: ST_TO_ADDR
52464: GO 52486
52466: LD_INT 36
52468: DOUBLE
52469: EQUAL
52470: IFTRUE 52474
52472: GO 52485
52474: POP
// places := 3 ; end ;
52475: LD_ADDR_VAR 0 3
52479: PUSH
52480: LD_INT 3
52482: ST_TO_ADDR
52483: GO 52486
52485: POP
// if places then
52486: LD_VAR 0 3
52490: IFFALSE 52513
// result := UnitsInside ( building ) < places ;
52492: LD_ADDR_VAR 0 2
52496: PUSH
52497: LD_VAR 0 1
52501: PPUSH
52502: CALL_OW 313
52506: PUSH
52507: LD_VAR 0 3
52511: LESS
52512: ST_TO_ADDR
// end ;
52513: LD_VAR 0 2
52517: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52518: LD_INT 0
52520: PPUSH
52521: PPUSH
52522: PPUSH
52523: PPUSH
// tmp := [ ] ;
52524: LD_ADDR_VAR 0 3
52528: PUSH
52529: EMPTY
52530: ST_TO_ADDR
// list := [ ] ;
52531: LD_ADDR_VAR 0 5
52535: PUSH
52536: EMPTY
52537: ST_TO_ADDR
// for i = 16 to 25 do
52538: LD_ADDR_VAR 0 4
52542: PUSH
52543: DOUBLE
52544: LD_INT 16
52546: DEC
52547: ST_TO_ADDR
52548: LD_INT 25
52550: PUSH
52551: FOR_TO
52552: IFFALSE 52625
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52554: LD_ADDR_VAR 0 3
52558: PUSH
52559: LD_VAR 0 3
52563: PUSH
52564: LD_INT 22
52566: PUSH
52567: LD_VAR 0 1
52571: PPUSH
52572: CALL_OW 255
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 91
52583: PUSH
52584: LD_VAR 0 1
52588: PUSH
52589: LD_INT 6
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: LIST
52596: PUSH
52597: LD_INT 30
52599: PUSH
52600: LD_VAR 0 4
52604: PUSH
52605: EMPTY
52606: LIST
52607: LIST
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: PPUSH
52617: CALL_OW 69
52621: ADD
52622: ST_TO_ADDR
52623: GO 52551
52625: POP
52626: POP
// for i = 1 to tmp do
52627: LD_ADDR_VAR 0 4
52631: PUSH
52632: DOUBLE
52633: LD_INT 1
52635: DEC
52636: ST_TO_ADDR
52637: LD_VAR 0 3
52641: PUSH
52642: FOR_TO
52643: IFFALSE 52731
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52645: LD_ADDR_VAR 0 5
52649: PUSH
52650: LD_VAR 0 5
52654: PUSH
52655: LD_VAR 0 3
52659: PUSH
52660: LD_VAR 0 4
52664: ARRAY
52665: PPUSH
52666: CALL_OW 266
52670: PUSH
52671: LD_VAR 0 3
52675: PUSH
52676: LD_VAR 0 4
52680: ARRAY
52681: PPUSH
52682: CALL_OW 250
52686: PUSH
52687: LD_VAR 0 3
52691: PUSH
52692: LD_VAR 0 4
52696: ARRAY
52697: PPUSH
52698: CALL_OW 251
52702: PUSH
52703: LD_VAR 0 3
52707: PUSH
52708: LD_VAR 0 4
52712: ARRAY
52713: PPUSH
52714: CALL_OW 254
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: LIST
52723: LIST
52724: PUSH
52725: EMPTY
52726: LIST
52727: ADD
52728: ST_TO_ADDR
52729: GO 52642
52731: POP
52732: POP
// result := list ;
52733: LD_ADDR_VAR 0 2
52737: PUSH
52738: LD_VAR 0 5
52742: ST_TO_ADDR
// end ;
52743: LD_VAR 0 2
52747: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52748: LD_INT 0
52750: PPUSH
52751: PPUSH
52752: PPUSH
52753: PPUSH
52754: PPUSH
52755: PPUSH
52756: PPUSH
// if not factory then
52757: LD_VAR 0 1
52761: NOT
52762: IFFALSE 52766
// exit ;
52764: GO 53359
// if control = control_apeman then
52766: LD_VAR 0 4
52770: PUSH
52771: LD_INT 5
52773: EQUAL
52774: IFFALSE 52883
// begin tmp := UnitsInside ( factory ) ;
52776: LD_ADDR_VAR 0 8
52780: PUSH
52781: LD_VAR 0 1
52785: PPUSH
52786: CALL_OW 313
52790: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52791: LD_VAR 0 8
52795: PPUSH
52796: LD_INT 25
52798: PUSH
52799: LD_INT 12
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PPUSH
52806: CALL_OW 72
52810: NOT
52811: IFFALSE 52821
// control := control_manual ;
52813: LD_ADDR_VAR 0 4
52817: PUSH
52818: LD_INT 1
52820: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
52821: LD_ADDR_VAR 0 8
52825: PUSH
52826: LD_VAR 0 1
52830: PPUSH
52831: CALL 52518 0 1
52835: ST_TO_ADDR
// if tmp then
52836: LD_VAR 0 8
52840: IFFALSE 52883
// begin for i in tmp do
52842: LD_ADDR_VAR 0 7
52846: PUSH
52847: LD_VAR 0 8
52851: PUSH
52852: FOR_IN
52853: IFFALSE 52881
// if i [ 1 ] = b_ext_radio then
52855: LD_VAR 0 7
52859: PUSH
52860: LD_INT 1
52862: ARRAY
52863: PUSH
52864: LD_INT 22
52866: EQUAL
52867: IFFALSE 52879
// begin control := control_remote ;
52869: LD_ADDR_VAR 0 4
52873: PUSH
52874: LD_INT 2
52876: ST_TO_ADDR
// break ;
52877: GO 52881
// end ;
52879: GO 52852
52881: POP
52882: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52883: LD_VAR 0 1
52887: PPUSH
52888: LD_VAR 0 2
52892: PPUSH
52893: LD_VAR 0 3
52897: PPUSH
52898: LD_VAR 0 4
52902: PPUSH
52903: LD_VAR 0 5
52907: PPUSH
52908: CALL_OW 448
52912: IFFALSE 52947
// begin result := [ chassis , engine , control , weapon ] ;
52914: LD_ADDR_VAR 0 6
52918: PUSH
52919: LD_VAR 0 2
52923: PUSH
52924: LD_VAR 0 3
52928: PUSH
52929: LD_VAR 0 4
52933: PUSH
52934: LD_VAR 0 5
52938: PUSH
52939: EMPTY
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: ST_TO_ADDR
// exit ;
52945: GO 53359
// end ; _chassis := AvailableChassisList ( factory ) ;
52947: LD_ADDR_VAR 0 9
52951: PUSH
52952: LD_VAR 0 1
52956: PPUSH
52957: CALL_OW 475
52961: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
52962: LD_ADDR_VAR 0 11
52966: PUSH
52967: LD_VAR 0 1
52971: PPUSH
52972: CALL_OW 476
52976: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
52977: LD_ADDR_VAR 0 12
52981: PUSH
52982: LD_VAR 0 1
52986: PPUSH
52987: CALL_OW 477
52991: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
52992: LD_ADDR_VAR 0 10
52996: PUSH
52997: LD_VAR 0 1
53001: PPUSH
53002: CALL_OW 478
53006: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
53007: LD_VAR 0 9
53011: NOT
53012: PUSH
53013: LD_VAR 0 11
53017: NOT
53018: OR
53019: PUSH
53020: LD_VAR 0 12
53024: NOT
53025: OR
53026: PUSH
53027: LD_VAR 0 10
53031: NOT
53032: OR
53033: IFFALSE 53068
// begin result := [ chassis , engine , control , weapon ] ;
53035: LD_ADDR_VAR 0 6
53039: PUSH
53040: LD_VAR 0 2
53044: PUSH
53045: LD_VAR 0 3
53049: PUSH
53050: LD_VAR 0 4
53054: PUSH
53055: LD_VAR 0 5
53059: PUSH
53060: EMPTY
53061: LIST
53062: LIST
53063: LIST
53064: LIST
53065: ST_TO_ADDR
// exit ;
53066: GO 53359
// end ; if not chassis in _chassis then
53068: LD_VAR 0 2
53072: PUSH
53073: LD_VAR 0 9
53077: IN
53078: NOT
53079: IFFALSE 53105
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
53081: LD_ADDR_VAR 0 2
53085: PUSH
53086: LD_VAR 0 9
53090: PUSH
53091: LD_INT 1
53093: PPUSH
53094: LD_VAR 0 9
53098: PPUSH
53099: CALL_OW 12
53103: ARRAY
53104: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
53105: LD_VAR 0 2
53109: PPUSH
53110: LD_VAR 0 3
53114: PPUSH
53115: CALL 53364 0 2
53119: NOT
53120: IFFALSE 53179
// repeat engine := _engine [ 1 ] ;
53122: LD_ADDR_VAR 0 3
53126: PUSH
53127: LD_VAR 0 11
53131: PUSH
53132: LD_INT 1
53134: ARRAY
53135: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
53136: LD_ADDR_VAR 0 11
53140: PUSH
53141: LD_VAR 0 11
53145: PPUSH
53146: LD_INT 1
53148: PPUSH
53149: CALL_OW 3
53153: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
53154: LD_VAR 0 2
53158: PPUSH
53159: LD_VAR 0 3
53163: PPUSH
53164: CALL 53364 0 2
53168: PUSH
53169: LD_VAR 0 11
53173: PUSH
53174: EMPTY
53175: EQUAL
53176: OR
53177: IFFALSE 53122
// if not control in _control then
53179: LD_VAR 0 4
53183: PUSH
53184: LD_VAR 0 12
53188: IN
53189: NOT
53190: IFFALSE 53216
// control := _control [ rand ( 1 , _control ) ] ;
53192: LD_ADDR_VAR 0 4
53196: PUSH
53197: LD_VAR 0 12
53201: PUSH
53202: LD_INT 1
53204: PPUSH
53205: LD_VAR 0 12
53209: PPUSH
53210: CALL_OW 12
53214: ARRAY
53215: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
53216: LD_VAR 0 2
53220: PPUSH
53221: LD_VAR 0 5
53225: PPUSH
53226: CALL 53584 0 2
53230: NOT
53231: IFFALSE 53290
// repeat weapon := _weapon [ 1 ] ;
53233: LD_ADDR_VAR 0 5
53237: PUSH
53238: LD_VAR 0 10
53242: PUSH
53243: LD_INT 1
53245: ARRAY
53246: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
53247: LD_ADDR_VAR 0 10
53251: PUSH
53252: LD_VAR 0 10
53256: PPUSH
53257: LD_INT 1
53259: PPUSH
53260: CALL_OW 3
53264: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
53265: LD_VAR 0 2
53269: PPUSH
53270: LD_VAR 0 5
53274: PPUSH
53275: CALL 53584 0 2
53279: PUSH
53280: LD_VAR 0 10
53284: PUSH
53285: EMPTY
53286: EQUAL
53287: OR
53288: IFFALSE 53233
// result := [ ] ;
53290: LD_ADDR_VAR 0 6
53294: PUSH
53295: EMPTY
53296: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53297: LD_VAR 0 1
53301: PPUSH
53302: LD_VAR 0 2
53306: PPUSH
53307: LD_VAR 0 3
53311: PPUSH
53312: LD_VAR 0 4
53316: PPUSH
53317: LD_VAR 0 5
53321: PPUSH
53322: CALL_OW 448
53326: IFFALSE 53359
// result := [ chassis , engine , control , weapon ] ;
53328: LD_ADDR_VAR 0 6
53332: PUSH
53333: LD_VAR 0 2
53337: PUSH
53338: LD_VAR 0 3
53342: PUSH
53343: LD_VAR 0 4
53347: PUSH
53348: LD_VAR 0 5
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: LIST
53357: LIST
53358: ST_TO_ADDR
// end ;
53359: LD_VAR 0 6
53363: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
53364: LD_INT 0
53366: PPUSH
// if not chassis or not engine then
53367: LD_VAR 0 1
53371: NOT
53372: PUSH
53373: LD_VAR 0 2
53377: NOT
53378: OR
53379: IFFALSE 53383
// exit ;
53381: GO 53579
// case engine of engine_solar :
53383: LD_VAR 0 2
53387: PUSH
53388: LD_INT 2
53390: DOUBLE
53391: EQUAL
53392: IFTRUE 53396
53394: GO 53434
53396: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
53397: LD_ADDR_VAR 0 3
53401: PUSH
53402: LD_INT 11
53404: PUSH
53405: LD_INT 12
53407: PUSH
53408: LD_INT 13
53410: PUSH
53411: LD_INT 14
53413: PUSH
53414: LD_INT 1
53416: PUSH
53417: LD_INT 2
53419: PUSH
53420: LD_INT 3
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: ST_TO_ADDR
53432: GO 53563
53434: LD_INT 1
53436: DOUBLE
53437: EQUAL
53438: IFTRUE 53442
53440: GO 53504
53442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53443: LD_ADDR_VAR 0 3
53447: PUSH
53448: LD_INT 11
53450: PUSH
53451: LD_INT 12
53453: PUSH
53454: LD_INT 13
53456: PUSH
53457: LD_INT 14
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: LD_INT 3
53468: PUSH
53469: LD_INT 4
53471: PUSH
53472: LD_INT 5
53474: PUSH
53475: LD_INT 21
53477: PUSH
53478: LD_INT 23
53480: PUSH
53481: LD_INT 22
53483: PUSH
53484: LD_INT 24
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: LIST
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
53502: GO 53563
53504: LD_INT 3
53506: DOUBLE
53507: EQUAL
53508: IFTRUE 53512
53510: GO 53562
53512: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53513: LD_ADDR_VAR 0 3
53517: PUSH
53518: LD_INT 13
53520: PUSH
53521: LD_INT 14
53523: PUSH
53524: LD_INT 2
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: LD_INT 4
53532: PUSH
53533: LD_INT 5
53535: PUSH
53536: LD_INT 21
53538: PUSH
53539: LD_INT 22
53541: PUSH
53542: LD_INT 23
53544: PUSH
53545: LD_INT 24
53547: PUSH
53548: EMPTY
53549: LIST
53550: LIST
53551: LIST
53552: LIST
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: ST_TO_ADDR
53560: GO 53563
53562: POP
// result := ( chassis in result ) ;
53563: LD_ADDR_VAR 0 3
53567: PUSH
53568: LD_VAR 0 1
53572: PUSH
53573: LD_VAR 0 3
53577: IN
53578: ST_TO_ADDR
// end ;
53579: LD_VAR 0 3
53583: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53584: LD_INT 0
53586: PPUSH
// if not chassis or not weapon then
53587: LD_VAR 0 1
53591: NOT
53592: PUSH
53593: LD_VAR 0 2
53597: NOT
53598: OR
53599: IFFALSE 53603
// exit ;
53601: GO 54663
// case weapon of us_machine_gun :
53603: LD_VAR 0 2
53607: PUSH
53608: LD_INT 2
53610: DOUBLE
53611: EQUAL
53612: IFTRUE 53616
53614: GO 53646
53616: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53617: LD_ADDR_VAR 0 3
53621: PUSH
53622: LD_INT 1
53624: PUSH
53625: LD_INT 2
53627: PUSH
53628: LD_INT 3
53630: PUSH
53631: LD_INT 4
53633: PUSH
53634: LD_INT 5
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: ST_TO_ADDR
53644: GO 54647
53646: LD_INT 3
53648: DOUBLE
53649: EQUAL
53650: IFTRUE 53654
53652: GO 53684
53654: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53655: LD_ADDR_VAR 0 3
53659: PUSH
53660: LD_INT 1
53662: PUSH
53663: LD_INT 2
53665: PUSH
53666: LD_INT 3
53668: PUSH
53669: LD_INT 4
53671: PUSH
53672: LD_INT 5
53674: PUSH
53675: EMPTY
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: ST_TO_ADDR
53682: GO 54647
53684: LD_INT 11
53686: DOUBLE
53687: EQUAL
53688: IFTRUE 53692
53690: GO 53722
53692: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53693: LD_ADDR_VAR 0 3
53697: PUSH
53698: LD_INT 1
53700: PUSH
53701: LD_INT 2
53703: PUSH
53704: LD_INT 3
53706: PUSH
53707: LD_INT 4
53709: PUSH
53710: LD_INT 5
53712: PUSH
53713: EMPTY
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: ST_TO_ADDR
53720: GO 54647
53722: LD_INT 4
53724: DOUBLE
53725: EQUAL
53726: IFTRUE 53730
53728: GO 53756
53730: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53731: LD_ADDR_VAR 0 3
53735: PUSH
53736: LD_INT 2
53738: PUSH
53739: LD_INT 3
53741: PUSH
53742: LD_INT 4
53744: PUSH
53745: LD_INT 5
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: LIST
53752: LIST
53753: ST_TO_ADDR
53754: GO 54647
53756: LD_INT 5
53758: DOUBLE
53759: EQUAL
53760: IFTRUE 53764
53762: GO 53790
53764: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53765: LD_ADDR_VAR 0 3
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: LD_INT 3
53775: PUSH
53776: LD_INT 4
53778: PUSH
53779: LD_INT 5
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: ST_TO_ADDR
53788: GO 54647
53790: LD_INT 9
53792: DOUBLE
53793: EQUAL
53794: IFTRUE 53798
53796: GO 53824
53798: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53799: LD_ADDR_VAR 0 3
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 3
53809: PUSH
53810: LD_INT 4
53812: PUSH
53813: LD_INT 5
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: ST_TO_ADDR
53822: GO 54647
53824: LD_INT 7
53826: DOUBLE
53827: EQUAL
53828: IFTRUE 53832
53830: GO 53858
53832: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
53833: LD_ADDR_VAR 0 3
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: LD_INT 3
53843: PUSH
53844: LD_INT 4
53846: PUSH
53847: LD_INT 5
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: ST_TO_ADDR
53856: GO 54647
53858: LD_INT 12
53860: DOUBLE
53861: EQUAL
53862: IFTRUE 53866
53864: GO 53892
53866: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
53867: LD_ADDR_VAR 0 3
53871: PUSH
53872: LD_INT 2
53874: PUSH
53875: LD_INT 3
53877: PUSH
53878: LD_INT 4
53880: PUSH
53881: LD_INT 5
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: ST_TO_ADDR
53890: GO 54647
53892: LD_INT 13
53894: DOUBLE
53895: EQUAL
53896: IFTRUE 53900
53898: GO 53926
53900: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
53901: LD_ADDR_VAR 0 3
53905: PUSH
53906: LD_INT 2
53908: PUSH
53909: LD_INT 3
53911: PUSH
53912: LD_INT 4
53914: PUSH
53915: LD_INT 5
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: ST_TO_ADDR
53924: GO 54647
53926: LD_INT 14
53928: DOUBLE
53929: EQUAL
53930: IFTRUE 53934
53932: GO 53952
53934: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
53935: LD_ADDR_VAR 0 3
53939: PUSH
53940: LD_INT 4
53942: PUSH
53943: LD_INT 5
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: ST_TO_ADDR
53950: GO 54647
53952: LD_INT 6
53954: DOUBLE
53955: EQUAL
53956: IFTRUE 53960
53958: GO 53978
53960: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
53961: LD_ADDR_VAR 0 3
53965: PUSH
53966: LD_INT 4
53968: PUSH
53969: LD_INT 5
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: ST_TO_ADDR
53976: GO 54647
53978: LD_INT 10
53980: DOUBLE
53981: EQUAL
53982: IFTRUE 53986
53984: GO 54004
53986: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
53987: LD_ADDR_VAR 0 3
53991: PUSH
53992: LD_INT 4
53994: PUSH
53995: LD_INT 5
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: ST_TO_ADDR
54002: GO 54647
54004: LD_INT 22
54006: DOUBLE
54007: EQUAL
54008: IFTRUE 54012
54010: GO 54038
54012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
54013: LD_ADDR_VAR 0 3
54017: PUSH
54018: LD_INT 11
54020: PUSH
54021: LD_INT 12
54023: PUSH
54024: LD_INT 13
54026: PUSH
54027: LD_INT 14
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: ST_TO_ADDR
54036: GO 54647
54038: LD_INT 23
54040: DOUBLE
54041: EQUAL
54042: IFTRUE 54046
54044: GO 54072
54046: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
54047: LD_ADDR_VAR 0 3
54051: PUSH
54052: LD_INT 11
54054: PUSH
54055: LD_INT 12
54057: PUSH
54058: LD_INT 13
54060: PUSH
54061: LD_INT 14
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: ST_TO_ADDR
54070: GO 54647
54072: LD_INT 24
54074: DOUBLE
54075: EQUAL
54076: IFTRUE 54080
54078: GO 54106
54080: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
54081: LD_ADDR_VAR 0 3
54085: PUSH
54086: LD_INT 11
54088: PUSH
54089: LD_INT 12
54091: PUSH
54092: LD_INT 13
54094: PUSH
54095: LD_INT 14
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: ST_TO_ADDR
54104: GO 54647
54106: LD_INT 30
54108: DOUBLE
54109: EQUAL
54110: IFTRUE 54114
54112: GO 54140
54114: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
54115: LD_ADDR_VAR 0 3
54119: PUSH
54120: LD_INT 11
54122: PUSH
54123: LD_INT 12
54125: PUSH
54126: LD_INT 13
54128: PUSH
54129: LD_INT 14
54131: PUSH
54132: EMPTY
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: ST_TO_ADDR
54138: GO 54647
54140: LD_INT 25
54142: DOUBLE
54143: EQUAL
54144: IFTRUE 54148
54146: GO 54166
54148: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
54149: LD_ADDR_VAR 0 3
54153: PUSH
54154: LD_INT 13
54156: PUSH
54157: LD_INT 14
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: ST_TO_ADDR
54164: GO 54647
54166: LD_INT 27
54168: DOUBLE
54169: EQUAL
54170: IFTRUE 54174
54172: GO 54192
54174: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
54175: LD_ADDR_VAR 0 3
54179: PUSH
54180: LD_INT 13
54182: PUSH
54183: LD_INT 14
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: ST_TO_ADDR
54190: GO 54647
54192: LD_INT 92
54194: DOUBLE
54195: EQUAL
54196: IFTRUE 54200
54198: GO 54226
54200: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
54201: LD_ADDR_VAR 0 3
54205: PUSH
54206: LD_INT 11
54208: PUSH
54209: LD_INT 12
54211: PUSH
54212: LD_INT 13
54214: PUSH
54215: LD_INT 14
54217: PUSH
54218: EMPTY
54219: LIST
54220: LIST
54221: LIST
54222: LIST
54223: ST_TO_ADDR
54224: GO 54647
54226: LD_INT 28
54228: DOUBLE
54229: EQUAL
54230: IFTRUE 54234
54232: GO 54252
54234: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
54235: LD_ADDR_VAR 0 3
54239: PUSH
54240: LD_INT 13
54242: PUSH
54243: LD_INT 14
54245: PUSH
54246: EMPTY
54247: LIST
54248: LIST
54249: ST_TO_ADDR
54250: GO 54647
54252: LD_INT 29
54254: DOUBLE
54255: EQUAL
54256: IFTRUE 54260
54258: GO 54278
54260: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
54261: LD_ADDR_VAR 0 3
54265: PUSH
54266: LD_INT 13
54268: PUSH
54269: LD_INT 14
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: ST_TO_ADDR
54276: GO 54647
54278: LD_INT 31
54280: DOUBLE
54281: EQUAL
54282: IFTRUE 54286
54284: GO 54304
54286: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
54287: LD_ADDR_VAR 0 3
54291: PUSH
54292: LD_INT 13
54294: PUSH
54295: LD_INT 14
54297: PUSH
54298: EMPTY
54299: LIST
54300: LIST
54301: ST_TO_ADDR
54302: GO 54647
54304: LD_INT 26
54306: DOUBLE
54307: EQUAL
54308: IFTRUE 54312
54310: GO 54330
54312: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
54313: LD_ADDR_VAR 0 3
54317: PUSH
54318: LD_INT 13
54320: PUSH
54321: LD_INT 14
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: ST_TO_ADDR
54328: GO 54647
54330: LD_INT 42
54332: DOUBLE
54333: EQUAL
54334: IFTRUE 54338
54336: GO 54364
54338: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
54339: LD_ADDR_VAR 0 3
54343: PUSH
54344: LD_INT 21
54346: PUSH
54347: LD_INT 22
54349: PUSH
54350: LD_INT 23
54352: PUSH
54353: LD_INT 24
54355: PUSH
54356: EMPTY
54357: LIST
54358: LIST
54359: LIST
54360: LIST
54361: ST_TO_ADDR
54362: GO 54647
54364: LD_INT 43
54366: DOUBLE
54367: EQUAL
54368: IFTRUE 54372
54370: GO 54398
54372: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
54373: LD_ADDR_VAR 0 3
54377: PUSH
54378: LD_INT 21
54380: PUSH
54381: LD_INT 22
54383: PUSH
54384: LD_INT 23
54386: PUSH
54387: LD_INT 24
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: ST_TO_ADDR
54396: GO 54647
54398: LD_INT 44
54400: DOUBLE
54401: EQUAL
54402: IFTRUE 54406
54404: GO 54432
54406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
54407: LD_ADDR_VAR 0 3
54411: PUSH
54412: LD_INT 21
54414: PUSH
54415: LD_INT 22
54417: PUSH
54418: LD_INT 23
54420: PUSH
54421: LD_INT 24
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: LIST
54428: LIST
54429: ST_TO_ADDR
54430: GO 54647
54432: LD_INT 45
54434: DOUBLE
54435: EQUAL
54436: IFTRUE 54440
54438: GO 54466
54440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
54441: LD_ADDR_VAR 0 3
54445: PUSH
54446: LD_INT 21
54448: PUSH
54449: LD_INT 22
54451: PUSH
54452: LD_INT 23
54454: PUSH
54455: LD_INT 24
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: LIST
54462: LIST
54463: ST_TO_ADDR
54464: GO 54647
54466: LD_INT 49
54468: DOUBLE
54469: EQUAL
54470: IFTRUE 54474
54472: GO 54500
54474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54475: LD_ADDR_VAR 0 3
54479: PUSH
54480: LD_INT 21
54482: PUSH
54483: LD_INT 22
54485: PUSH
54486: LD_INT 23
54488: PUSH
54489: LD_INT 24
54491: PUSH
54492: EMPTY
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: ST_TO_ADDR
54498: GO 54647
54500: LD_INT 51
54502: DOUBLE
54503: EQUAL
54504: IFTRUE 54508
54506: GO 54534
54508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54509: LD_ADDR_VAR 0 3
54513: PUSH
54514: LD_INT 21
54516: PUSH
54517: LD_INT 22
54519: PUSH
54520: LD_INT 23
54522: PUSH
54523: LD_INT 24
54525: PUSH
54526: EMPTY
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: ST_TO_ADDR
54532: GO 54647
54534: LD_INT 52
54536: DOUBLE
54537: EQUAL
54538: IFTRUE 54542
54540: GO 54568
54542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54543: LD_ADDR_VAR 0 3
54547: PUSH
54548: LD_INT 21
54550: PUSH
54551: LD_INT 22
54553: PUSH
54554: LD_INT 23
54556: PUSH
54557: LD_INT 24
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: ST_TO_ADDR
54566: GO 54647
54568: LD_INT 53
54570: DOUBLE
54571: EQUAL
54572: IFTRUE 54576
54574: GO 54594
54576: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54577: LD_ADDR_VAR 0 3
54581: PUSH
54582: LD_INT 23
54584: PUSH
54585: LD_INT 24
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: ST_TO_ADDR
54592: GO 54647
54594: LD_INT 46
54596: DOUBLE
54597: EQUAL
54598: IFTRUE 54602
54600: GO 54620
54602: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54603: LD_ADDR_VAR 0 3
54607: PUSH
54608: LD_INT 23
54610: PUSH
54611: LD_INT 24
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: ST_TO_ADDR
54618: GO 54647
54620: LD_INT 47
54622: DOUBLE
54623: EQUAL
54624: IFTRUE 54628
54626: GO 54646
54628: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54629: LD_ADDR_VAR 0 3
54633: PUSH
54634: LD_INT 23
54636: PUSH
54637: LD_INT 24
54639: PUSH
54640: EMPTY
54641: LIST
54642: LIST
54643: ST_TO_ADDR
54644: GO 54647
54646: POP
// result := ( chassis in result ) ;
54647: LD_ADDR_VAR 0 3
54651: PUSH
54652: LD_VAR 0 1
54656: PUSH
54657: LD_VAR 0 3
54661: IN
54662: ST_TO_ADDR
// end ;
54663: LD_VAR 0 3
54667: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54668: LD_INT 0
54670: PPUSH
54671: PPUSH
54672: PPUSH
54673: PPUSH
54674: PPUSH
54675: PPUSH
54676: PPUSH
// result := array ;
54677: LD_ADDR_VAR 0 5
54681: PUSH
54682: LD_VAR 0 1
54686: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54687: LD_VAR 0 1
54691: NOT
54692: PUSH
54693: LD_VAR 0 2
54697: NOT
54698: OR
54699: PUSH
54700: LD_VAR 0 3
54704: NOT
54705: OR
54706: PUSH
54707: LD_VAR 0 2
54711: PUSH
54712: LD_VAR 0 1
54716: GREATER
54717: OR
54718: PUSH
54719: LD_VAR 0 3
54723: PUSH
54724: LD_VAR 0 1
54728: GREATER
54729: OR
54730: IFFALSE 54734
// exit ;
54732: GO 55030
// if direction then
54734: LD_VAR 0 4
54738: IFFALSE 54802
// begin d := 1 ;
54740: LD_ADDR_VAR 0 9
54744: PUSH
54745: LD_INT 1
54747: ST_TO_ADDR
// if i_from > i_to then
54748: LD_VAR 0 2
54752: PUSH
54753: LD_VAR 0 3
54757: GREATER
54758: IFFALSE 54784
// length := ( array - i_from ) + i_to else
54760: LD_ADDR_VAR 0 11
54764: PUSH
54765: LD_VAR 0 1
54769: PUSH
54770: LD_VAR 0 2
54774: MINUS
54775: PUSH
54776: LD_VAR 0 3
54780: PLUS
54781: ST_TO_ADDR
54782: GO 54800
// length := i_to - i_from ;
54784: LD_ADDR_VAR 0 11
54788: PUSH
54789: LD_VAR 0 3
54793: PUSH
54794: LD_VAR 0 2
54798: MINUS
54799: ST_TO_ADDR
// end else
54800: GO 54863
// begin d := - 1 ;
54802: LD_ADDR_VAR 0 9
54806: PUSH
54807: LD_INT 1
54809: NEG
54810: ST_TO_ADDR
// if i_from > i_to then
54811: LD_VAR 0 2
54815: PUSH
54816: LD_VAR 0 3
54820: GREATER
54821: IFFALSE 54841
// length := i_from - i_to else
54823: LD_ADDR_VAR 0 11
54827: PUSH
54828: LD_VAR 0 2
54832: PUSH
54833: LD_VAR 0 3
54837: MINUS
54838: ST_TO_ADDR
54839: GO 54863
// length := ( array - i_to ) + i_from ;
54841: LD_ADDR_VAR 0 11
54845: PUSH
54846: LD_VAR 0 1
54850: PUSH
54851: LD_VAR 0 3
54855: MINUS
54856: PUSH
54857: LD_VAR 0 2
54861: PLUS
54862: ST_TO_ADDR
// end ; if not length then
54863: LD_VAR 0 11
54867: NOT
54868: IFFALSE 54872
// exit ;
54870: GO 55030
// tmp := array ;
54872: LD_ADDR_VAR 0 10
54876: PUSH
54877: LD_VAR 0 1
54881: ST_TO_ADDR
// for i = 1 to length do
54882: LD_ADDR_VAR 0 6
54886: PUSH
54887: DOUBLE
54888: LD_INT 1
54890: DEC
54891: ST_TO_ADDR
54892: LD_VAR 0 11
54896: PUSH
54897: FOR_TO
54898: IFFALSE 55018
// begin for j = 1 to array do
54900: LD_ADDR_VAR 0 7
54904: PUSH
54905: DOUBLE
54906: LD_INT 1
54908: DEC
54909: ST_TO_ADDR
54910: LD_VAR 0 1
54914: PUSH
54915: FOR_TO
54916: IFFALSE 55004
// begin k := j + d ;
54918: LD_ADDR_VAR 0 8
54922: PUSH
54923: LD_VAR 0 7
54927: PUSH
54928: LD_VAR 0 9
54932: PLUS
54933: ST_TO_ADDR
// if k > array then
54934: LD_VAR 0 8
54938: PUSH
54939: LD_VAR 0 1
54943: GREATER
54944: IFFALSE 54954
// k := 1 ;
54946: LD_ADDR_VAR 0 8
54950: PUSH
54951: LD_INT 1
54953: ST_TO_ADDR
// if not k then
54954: LD_VAR 0 8
54958: NOT
54959: IFFALSE 54971
// k := array ;
54961: LD_ADDR_VAR 0 8
54965: PUSH
54966: LD_VAR 0 1
54970: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
54971: LD_ADDR_VAR 0 10
54975: PUSH
54976: LD_VAR 0 10
54980: PPUSH
54981: LD_VAR 0 8
54985: PPUSH
54986: LD_VAR 0 1
54990: PUSH
54991: LD_VAR 0 7
54995: ARRAY
54996: PPUSH
54997: CALL_OW 1
55001: ST_TO_ADDR
// end ;
55002: GO 54915
55004: POP
55005: POP
// array := tmp ;
55006: LD_ADDR_VAR 0 1
55010: PUSH
55011: LD_VAR 0 10
55015: ST_TO_ADDR
// end ;
55016: GO 54897
55018: POP
55019: POP
// result := array ;
55020: LD_ADDR_VAR 0 5
55024: PUSH
55025: LD_VAR 0 1
55029: ST_TO_ADDR
// end ;
55030: LD_VAR 0 5
55034: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
55035: LD_INT 0
55037: PPUSH
55038: PPUSH
// result := 0 ;
55039: LD_ADDR_VAR 0 3
55043: PUSH
55044: LD_INT 0
55046: ST_TO_ADDR
// if not array or not value in array then
55047: LD_VAR 0 1
55051: NOT
55052: PUSH
55053: LD_VAR 0 2
55057: PUSH
55058: LD_VAR 0 1
55062: IN
55063: NOT
55064: OR
55065: IFFALSE 55069
// exit ;
55067: GO 55123
// for i = 1 to array do
55069: LD_ADDR_VAR 0 4
55073: PUSH
55074: DOUBLE
55075: LD_INT 1
55077: DEC
55078: ST_TO_ADDR
55079: LD_VAR 0 1
55083: PUSH
55084: FOR_TO
55085: IFFALSE 55121
// if value = array [ i ] then
55087: LD_VAR 0 2
55091: PUSH
55092: LD_VAR 0 1
55096: PUSH
55097: LD_VAR 0 4
55101: ARRAY
55102: EQUAL
55103: IFFALSE 55119
// begin result := i ;
55105: LD_ADDR_VAR 0 3
55109: PUSH
55110: LD_VAR 0 4
55114: ST_TO_ADDR
// exit ;
55115: POP
55116: POP
55117: GO 55123
// end ;
55119: GO 55084
55121: POP
55122: POP
// end ;
55123: LD_VAR 0 3
55127: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
55128: LD_INT 0
55130: PPUSH
// vc_chassis := chassis ;
55131: LD_ADDR_OWVAR 37
55135: PUSH
55136: LD_VAR 0 1
55140: ST_TO_ADDR
// vc_engine := engine ;
55141: LD_ADDR_OWVAR 39
55145: PUSH
55146: LD_VAR 0 2
55150: ST_TO_ADDR
// vc_control := control ;
55151: LD_ADDR_OWVAR 38
55155: PUSH
55156: LD_VAR 0 3
55160: ST_TO_ADDR
// vc_weapon := weapon ;
55161: LD_ADDR_OWVAR 40
55165: PUSH
55166: LD_VAR 0 4
55170: ST_TO_ADDR
// vc_fuel_battery := fuel ;
55171: LD_ADDR_OWVAR 41
55175: PUSH
55176: LD_VAR 0 5
55180: ST_TO_ADDR
// end ;
55181: LD_VAR 0 6
55185: RET
// export function WantPlant ( unit ) ; var task ; begin
55186: LD_INT 0
55188: PPUSH
55189: PPUSH
// result := false ;
55190: LD_ADDR_VAR 0 2
55194: PUSH
55195: LD_INT 0
55197: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
55198: LD_ADDR_VAR 0 3
55202: PUSH
55203: LD_VAR 0 1
55207: PPUSH
55208: CALL_OW 437
55212: ST_TO_ADDR
// if task then
55213: LD_VAR 0 3
55217: IFFALSE 55245
// if task [ 1 ] [ 1 ] = p then
55219: LD_VAR 0 3
55223: PUSH
55224: LD_INT 1
55226: ARRAY
55227: PUSH
55228: LD_INT 1
55230: ARRAY
55231: PUSH
55232: LD_STRING p
55234: EQUAL
55235: IFFALSE 55245
// result := true ;
55237: LD_ADDR_VAR 0 2
55241: PUSH
55242: LD_INT 1
55244: ST_TO_ADDR
// end ;
55245: LD_VAR 0 2
55249: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
55250: LD_INT 0
55252: PPUSH
55253: PPUSH
55254: PPUSH
55255: PPUSH
// if pos < 1 then
55256: LD_VAR 0 2
55260: PUSH
55261: LD_INT 1
55263: LESS
55264: IFFALSE 55268
// exit ;
55266: GO 55571
// if pos = 1 then
55268: LD_VAR 0 2
55272: PUSH
55273: LD_INT 1
55275: EQUAL
55276: IFFALSE 55309
// result := Replace ( arr , pos [ 1 ] , value ) else
55278: LD_ADDR_VAR 0 4
55282: PUSH
55283: LD_VAR 0 1
55287: PPUSH
55288: LD_VAR 0 2
55292: PUSH
55293: LD_INT 1
55295: ARRAY
55296: PPUSH
55297: LD_VAR 0 3
55301: PPUSH
55302: CALL_OW 1
55306: ST_TO_ADDR
55307: GO 55571
// begin tmp := arr ;
55309: LD_ADDR_VAR 0 6
55313: PUSH
55314: LD_VAR 0 1
55318: ST_TO_ADDR
// s_arr := [ tmp ] ;
55319: LD_ADDR_VAR 0 7
55323: PUSH
55324: LD_VAR 0 6
55328: PUSH
55329: EMPTY
55330: LIST
55331: ST_TO_ADDR
// for i = 1 to pos - 1 do
55332: LD_ADDR_VAR 0 5
55336: PUSH
55337: DOUBLE
55338: LD_INT 1
55340: DEC
55341: ST_TO_ADDR
55342: LD_VAR 0 2
55346: PUSH
55347: LD_INT 1
55349: MINUS
55350: PUSH
55351: FOR_TO
55352: IFFALSE 55397
// begin tmp := tmp [ pos [ i ] ] ;
55354: LD_ADDR_VAR 0 6
55358: PUSH
55359: LD_VAR 0 6
55363: PUSH
55364: LD_VAR 0 2
55368: PUSH
55369: LD_VAR 0 5
55373: ARRAY
55374: ARRAY
55375: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
55376: LD_ADDR_VAR 0 7
55380: PUSH
55381: LD_VAR 0 7
55385: PUSH
55386: LD_VAR 0 6
55390: PUSH
55391: EMPTY
55392: LIST
55393: ADD
55394: ST_TO_ADDR
// end ;
55395: GO 55351
55397: POP
55398: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
55399: LD_ADDR_VAR 0 6
55403: PUSH
55404: LD_VAR 0 6
55408: PPUSH
55409: LD_VAR 0 2
55413: PUSH
55414: LD_VAR 0 2
55418: ARRAY
55419: PPUSH
55420: LD_VAR 0 3
55424: PPUSH
55425: CALL_OW 1
55429: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
55430: LD_ADDR_VAR 0 7
55434: PUSH
55435: LD_VAR 0 7
55439: PPUSH
55440: LD_VAR 0 7
55444: PPUSH
55445: LD_VAR 0 6
55449: PPUSH
55450: CALL_OW 1
55454: ST_TO_ADDR
// for i = s_arr downto 2 do
55455: LD_ADDR_VAR 0 5
55459: PUSH
55460: DOUBLE
55461: LD_VAR 0 7
55465: INC
55466: ST_TO_ADDR
55467: LD_INT 2
55469: PUSH
55470: FOR_DOWNTO
55471: IFFALSE 55555
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55473: LD_ADDR_VAR 0 6
55477: PUSH
55478: LD_VAR 0 7
55482: PUSH
55483: LD_VAR 0 5
55487: PUSH
55488: LD_INT 1
55490: MINUS
55491: ARRAY
55492: PPUSH
55493: LD_VAR 0 2
55497: PUSH
55498: LD_VAR 0 5
55502: PUSH
55503: LD_INT 1
55505: MINUS
55506: ARRAY
55507: PPUSH
55508: LD_VAR 0 7
55512: PUSH
55513: LD_VAR 0 5
55517: ARRAY
55518: PPUSH
55519: CALL_OW 1
55523: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55524: LD_ADDR_VAR 0 7
55528: PUSH
55529: LD_VAR 0 7
55533: PPUSH
55534: LD_VAR 0 5
55538: PUSH
55539: LD_INT 1
55541: MINUS
55542: PPUSH
55543: LD_VAR 0 6
55547: PPUSH
55548: CALL_OW 1
55552: ST_TO_ADDR
// end ;
55553: GO 55470
55555: POP
55556: POP
// result := s_arr [ 1 ] ;
55557: LD_ADDR_VAR 0 4
55561: PUSH
55562: LD_VAR 0 7
55566: PUSH
55567: LD_INT 1
55569: ARRAY
55570: ST_TO_ADDR
// end ; end ;
55571: LD_VAR 0 4
55575: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55576: LD_INT 0
55578: PPUSH
55579: PPUSH
// if not list then
55580: LD_VAR 0 1
55584: NOT
55585: IFFALSE 55589
// exit ;
55587: GO 55680
// i := list [ pos1 ] ;
55589: LD_ADDR_VAR 0 5
55593: PUSH
55594: LD_VAR 0 1
55598: PUSH
55599: LD_VAR 0 2
55603: ARRAY
55604: ST_TO_ADDR
// if not i then
55605: LD_VAR 0 5
55609: NOT
55610: IFFALSE 55614
// exit ;
55612: GO 55680
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55614: LD_ADDR_VAR 0 1
55618: PUSH
55619: LD_VAR 0 1
55623: PPUSH
55624: LD_VAR 0 2
55628: PPUSH
55629: LD_VAR 0 1
55633: PUSH
55634: LD_VAR 0 3
55638: ARRAY
55639: PPUSH
55640: CALL_OW 1
55644: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55645: LD_ADDR_VAR 0 1
55649: PUSH
55650: LD_VAR 0 1
55654: PPUSH
55655: LD_VAR 0 3
55659: PPUSH
55660: LD_VAR 0 5
55664: PPUSH
55665: CALL_OW 1
55669: ST_TO_ADDR
// result := list ;
55670: LD_ADDR_VAR 0 4
55674: PUSH
55675: LD_VAR 0 1
55679: ST_TO_ADDR
// end ;
55680: LD_VAR 0 4
55684: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55685: LD_INT 0
55687: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55688: LD_ADDR_VAR 0 5
55692: PUSH
55693: LD_VAR 0 1
55697: PPUSH
55698: CALL_OW 250
55702: PPUSH
55703: LD_VAR 0 1
55707: PPUSH
55708: CALL_OW 251
55712: PPUSH
55713: LD_VAR 0 2
55717: PPUSH
55718: LD_VAR 0 3
55722: PPUSH
55723: LD_VAR 0 4
55727: PPUSH
55728: CALL 55738 0 5
55732: ST_TO_ADDR
// end ;
55733: LD_VAR 0 5
55737: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55738: LD_INT 0
55740: PPUSH
55741: PPUSH
55742: PPUSH
55743: PPUSH
// if not list then
55744: LD_VAR 0 3
55748: NOT
55749: IFFALSE 55753
// exit ;
55751: GO 56141
// result := [ ] ;
55753: LD_ADDR_VAR 0 6
55757: PUSH
55758: EMPTY
55759: ST_TO_ADDR
// for i in list do
55760: LD_ADDR_VAR 0 7
55764: PUSH
55765: LD_VAR 0 3
55769: PUSH
55770: FOR_IN
55771: IFFALSE 55973
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55773: LD_ADDR_VAR 0 9
55777: PUSH
55778: LD_VAR 0 7
55782: PPUSH
55783: LD_VAR 0 1
55787: PPUSH
55788: LD_VAR 0 2
55792: PPUSH
55793: CALL_OW 297
55797: ST_TO_ADDR
// if not result then
55798: LD_VAR 0 6
55802: NOT
55803: IFFALSE 55829
// result := [ [ i , tmp ] ] else
55805: LD_ADDR_VAR 0 6
55809: PUSH
55810: LD_VAR 0 7
55814: PUSH
55815: LD_VAR 0 9
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: EMPTY
55825: LIST
55826: ST_TO_ADDR
55827: GO 55971
// begin if result [ result ] [ 2 ] < tmp then
55829: LD_VAR 0 6
55833: PUSH
55834: LD_VAR 0 6
55838: ARRAY
55839: PUSH
55840: LD_INT 2
55842: ARRAY
55843: PUSH
55844: LD_VAR 0 9
55848: LESS
55849: IFFALSE 55891
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
55851: LD_ADDR_VAR 0 6
55855: PUSH
55856: LD_VAR 0 6
55860: PPUSH
55861: LD_VAR 0 6
55865: PUSH
55866: LD_INT 1
55868: PLUS
55869: PPUSH
55870: LD_VAR 0 7
55874: PUSH
55875: LD_VAR 0 9
55879: PUSH
55880: EMPTY
55881: LIST
55882: LIST
55883: PPUSH
55884: CALL_OW 2
55888: ST_TO_ADDR
55889: GO 55971
// for j = 1 to result do
55891: LD_ADDR_VAR 0 8
55895: PUSH
55896: DOUBLE
55897: LD_INT 1
55899: DEC
55900: ST_TO_ADDR
55901: LD_VAR 0 6
55905: PUSH
55906: FOR_TO
55907: IFFALSE 55969
// begin if tmp < result [ j ] [ 2 ] then
55909: LD_VAR 0 9
55913: PUSH
55914: LD_VAR 0 6
55918: PUSH
55919: LD_VAR 0 8
55923: ARRAY
55924: PUSH
55925: LD_INT 2
55927: ARRAY
55928: LESS
55929: IFFALSE 55967
// begin result := Insert ( result , j , [ i , tmp ] ) ;
55931: LD_ADDR_VAR 0 6
55935: PUSH
55936: LD_VAR 0 6
55940: PPUSH
55941: LD_VAR 0 8
55945: PPUSH
55946: LD_VAR 0 7
55950: PUSH
55951: LD_VAR 0 9
55955: PUSH
55956: EMPTY
55957: LIST
55958: LIST
55959: PPUSH
55960: CALL_OW 2
55964: ST_TO_ADDR
// break ;
55965: GO 55969
// end ; end ;
55967: GO 55906
55969: POP
55970: POP
// end ; end ;
55971: GO 55770
55973: POP
55974: POP
// if result and not asc then
55975: LD_VAR 0 6
55979: PUSH
55980: LD_VAR 0 4
55984: NOT
55985: AND
55986: IFFALSE 56061
// begin tmp := result ;
55988: LD_ADDR_VAR 0 9
55992: PUSH
55993: LD_VAR 0 6
55997: ST_TO_ADDR
// for i = tmp downto 1 do
55998: LD_ADDR_VAR 0 7
56002: PUSH
56003: DOUBLE
56004: LD_VAR 0 9
56008: INC
56009: ST_TO_ADDR
56010: LD_INT 1
56012: PUSH
56013: FOR_DOWNTO
56014: IFFALSE 56059
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
56016: LD_ADDR_VAR 0 6
56020: PUSH
56021: LD_VAR 0 6
56025: PPUSH
56026: LD_VAR 0 9
56030: PUSH
56031: LD_VAR 0 7
56035: MINUS
56036: PUSH
56037: LD_INT 1
56039: PLUS
56040: PPUSH
56041: LD_VAR 0 9
56045: PUSH
56046: LD_VAR 0 7
56050: ARRAY
56051: PPUSH
56052: CALL_OW 1
56056: ST_TO_ADDR
56057: GO 56013
56059: POP
56060: POP
// end ; tmp := [ ] ;
56061: LD_ADDR_VAR 0 9
56065: PUSH
56066: EMPTY
56067: ST_TO_ADDR
// if mode then
56068: LD_VAR 0 5
56072: IFFALSE 56141
// begin for i = 1 to result do
56074: LD_ADDR_VAR 0 7
56078: PUSH
56079: DOUBLE
56080: LD_INT 1
56082: DEC
56083: ST_TO_ADDR
56084: LD_VAR 0 6
56088: PUSH
56089: FOR_TO
56090: IFFALSE 56129
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
56092: LD_ADDR_VAR 0 9
56096: PUSH
56097: LD_VAR 0 9
56101: PPUSH
56102: LD_VAR 0 7
56106: PPUSH
56107: LD_VAR 0 6
56111: PUSH
56112: LD_VAR 0 7
56116: ARRAY
56117: PUSH
56118: LD_INT 1
56120: ARRAY
56121: PPUSH
56122: CALL_OW 1
56126: ST_TO_ADDR
56127: GO 56089
56129: POP
56130: POP
// result := tmp ;
56131: LD_ADDR_VAR 0 6
56135: PUSH
56136: LD_VAR 0 9
56140: ST_TO_ADDR
// end ; end ;
56141: LD_VAR 0 6
56145: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
56146: LD_INT 0
56148: PPUSH
56149: PPUSH
56150: PPUSH
56151: PPUSH
56152: PPUSH
56153: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
56154: LD_ADDR_VAR 0 5
56158: PUSH
56159: LD_INT 0
56161: PUSH
56162: LD_INT 0
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: EMPTY
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: ST_TO_ADDR
// if not x or not y then
56176: LD_VAR 0 2
56180: NOT
56181: PUSH
56182: LD_VAR 0 3
56186: NOT
56187: OR
56188: IFFALSE 56192
// exit ;
56190: GO 57842
// if not range then
56192: LD_VAR 0 4
56196: NOT
56197: IFFALSE 56207
// range := 10 ;
56199: LD_ADDR_VAR 0 4
56203: PUSH
56204: LD_INT 10
56206: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56207: LD_ADDR_VAR 0 8
56211: PUSH
56212: LD_INT 81
56214: PUSH
56215: LD_VAR 0 1
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 92
56226: PUSH
56227: LD_VAR 0 2
56231: PUSH
56232: LD_VAR 0 3
56236: PUSH
56237: LD_VAR 0 4
56241: PUSH
56242: EMPTY
56243: LIST
56244: LIST
56245: LIST
56246: LIST
56247: PUSH
56248: LD_INT 3
56250: PUSH
56251: LD_INT 21
56253: PUSH
56254: LD_INT 3
56256: PUSH
56257: EMPTY
56258: LIST
56259: LIST
56260: PUSH
56261: EMPTY
56262: LIST
56263: LIST
56264: PUSH
56265: EMPTY
56266: LIST
56267: LIST
56268: LIST
56269: PPUSH
56270: CALL_OW 69
56274: ST_TO_ADDR
// if not tmp then
56275: LD_VAR 0 8
56279: NOT
56280: IFFALSE 56284
// exit ;
56282: GO 57842
// for i in tmp do
56284: LD_ADDR_VAR 0 6
56288: PUSH
56289: LD_VAR 0 8
56293: PUSH
56294: FOR_IN
56295: IFFALSE 57817
// begin points := [ 0 , 0 , 0 ] ;
56297: LD_ADDR_VAR 0 9
56301: PUSH
56302: LD_INT 0
56304: PUSH
56305: LD_INT 0
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: LIST
56315: ST_TO_ADDR
// bpoints := 1 ;
56316: LD_ADDR_VAR 0 10
56320: PUSH
56321: LD_INT 1
56323: ST_TO_ADDR
// case GetType ( i ) of unit_human :
56324: LD_VAR 0 6
56328: PPUSH
56329: CALL_OW 247
56333: PUSH
56334: LD_INT 1
56336: DOUBLE
56337: EQUAL
56338: IFTRUE 56342
56340: GO 56920
56342: POP
// begin if GetClass ( i ) = 1 then
56343: LD_VAR 0 6
56347: PPUSH
56348: CALL_OW 257
56352: PUSH
56353: LD_INT 1
56355: EQUAL
56356: IFFALSE 56377
// points := [ 10 , 5 , 3 ] ;
56358: LD_ADDR_VAR 0 9
56362: PUSH
56363: LD_INT 10
56365: PUSH
56366: LD_INT 5
56368: PUSH
56369: LD_INT 3
56371: PUSH
56372: EMPTY
56373: LIST
56374: LIST
56375: LIST
56376: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
56377: LD_VAR 0 6
56381: PPUSH
56382: CALL_OW 257
56386: PUSH
56387: LD_INT 2
56389: PUSH
56390: LD_INT 3
56392: PUSH
56393: LD_INT 4
56395: PUSH
56396: EMPTY
56397: LIST
56398: LIST
56399: LIST
56400: IN
56401: IFFALSE 56422
// points := [ 3 , 2 , 1 ] ;
56403: LD_ADDR_VAR 0 9
56407: PUSH
56408: LD_INT 3
56410: PUSH
56411: LD_INT 2
56413: PUSH
56414: LD_INT 1
56416: PUSH
56417: EMPTY
56418: LIST
56419: LIST
56420: LIST
56421: ST_TO_ADDR
// if GetClass ( i ) = 5 then
56422: LD_VAR 0 6
56426: PPUSH
56427: CALL_OW 257
56431: PUSH
56432: LD_INT 5
56434: EQUAL
56435: IFFALSE 56456
// points := [ 130 , 5 , 2 ] ;
56437: LD_ADDR_VAR 0 9
56441: PUSH
56442: LD_INT 130
56444: PUSH
56445: LD_INT 5
56447: PUSH
56448: LD_INT 2
56450: PUSH
56451: EMPTY
56452: LIST
56453: LIST
56454: LIST
56455: ST_TO_ADDR
// if GetClass ( i ) = 8 then
56456: LD_VAR 0 6
56460: PPUSH
56461: CALL_OW 257
56465: PUSH
56466: LD_INT 8
56468: EQUAL
56469: IFFALSE 56490
// points := [ 35 , 35 , 30 ] ;
56471: LD_ADDR_VAR 0 9
56475: PUSH
56476: LD_INT 35
56478: PUSH
56479: LD_INT 35
56481: PUSH
56482: LD_INT 30
56484: PUSH
56485: EMPTY
56486: LIST
56487: LIST
56488: LIST
56489: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56490: LD_VAR 0 6
56494: PPUSH
56495: CALL_OW 257
56499: PUSH
56500: LD_INT 9
56502: EQUAL
56503: IFFALSE 56524
// points := [ 20 , 55 , 40 ] ;
56505: LD_ADDR_VAR 0 9
56509: PUSH
56510: LD_INT 20
56512: PUSH
56513: LD_INT 55
56515: PUSH
56516: LD_INT 40
56518: PUSH
56519: EMPTY
56520: LIST
56521: LIST
56522: LIST
56523: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56524: LD_VAR 0 6
56528: PPUSH
56529: CALL_OW 257
56533: PUSH
56534: LD_INT 12
56536: PUSH
56537: LD_INT 16
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: IN
56544: IFFALSE 56565
// points := [ 5 , 3 , 2 ] ;
56546: LD_ADDR_VAR 0 9
56550: PUSH
56551: LD_INT 5
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: LD_INT 2
56559: PUSH
56560: EMPTY
56561: LIST
56562: LIST
56563: LIST
56564: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56565: LD_VAR 0 6
56569: PPUSH
56570: CALL_OW 257
56574: PUSH
56575: LD_INT 17
56577: EQUAL
56578: IFFALSE 56599
// points := [ 100 , 50 , 75 ] ;
56580: LD_ADDR_VAR 0 9
56584: PUSH
56585: LD_INT 100
56587: PUSH
56588: LD_INT 50
56590: PUSH
56591: LD_INT 75
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: LIST
56598: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56599: LD_VAR 0 6
56603: PPUSH
56604: CALL_OW 257
56608: PUSH
56609: LD_INT 15
56611: EQUAL
56612: IFFALSE 56633
// points := [ 10 , 5 , 3 ] ;
56614: LD_ADDR_VAR 0 9
56618: PUSH
56619: LD_INT 10
56621: PUSH
56622: LD_INT 5
56624: PUSH
56625: LD_INT 3
56627: PUSH
56628: EMPTY
56629: LIST
56630: LIST
56631: LIST
56632: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56633: LD_VAR 0 6
56637: PPUSH
56638: CALL_OW 257
56642: PUSH
56643: LD_INT 14
56645: EQUAL
56646: IFFALSE 56667
// points := [ 10 , 0 , 0 ] ;
56648: LD_ADDR_VAR 0 9
56652: PUSH
56653: LD_INT 10
56655: PUSH
56656: LD_INT 0
56658: PUSH
56659: LD_INT 0
56661: PUSH
56662: EMPTY
56663: LIST
56664: LIST
56665: LIST
56666: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56667: LD_VAR 0 6
56671: PPUSH
56672: CALL_OW 257
56676: PUSH
56677: LD_INT 11
56679: EQUAL
56680: IFFALSE 56701
// points := [ 30 , 10 , 5 ] ;
56682: LD_ADDR_VAR 0 9
56686: PUSH
56687: LD_INT 30
56689: PUSH
56690: LD_INT 10
56692: PUSH
56693: LD_INT 5
56695: PUSH
56696: EMPTY
56697: LIST
56698: LIST
56699: LIST
56700: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56701: LD_VAR 0 1
56705: PPUSH
56706: LD_INT 5
56708: PPUSH
56709: CALL_OW 321
56713: PUSH
56714: LD_INT 2
56716: EQUAL
56717: IFFALSE 56734
// bpoints := bpoints * 1.8 ;
56719: LD_ADDR_VAR 0 10
56723: PUSH
56724: LD_VAR 0 10
56728: PUSH
56729: LD_REAL  1.80000000000000E+0000
56732: MUL
56733: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56734: LD_VAR 0 6
56738: PPUSH
56739: CALL_OW 257
56743: PUSH
56744: LD_INT 1
56746: PUSH
56747: LD_INT 2
56749: PUSH
56750: LD_INT 3
56752: PUSH
56753: LD_INT 4
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: LIST
56760: LIST
56761: IN
56762: PUSH
56763: LD_VAR 0 1
56767: PPUSH
56768: LD_INT 51
56770: PPUSH
56771: CALL_OW 321
56775: PUSH
56776: LD_INT 2
56778: EQUAL
56779: AND
56780: IFFALSE 56797
// bpoints := bpoints * 1.2 ;
56782: LD_ADDR_VAR 0 10
56786: PUSH
56787: LD_VAR 0 10
56791: PUSH
56792: LD_REAL  1.20000000000000E+0000
56795: MUL
56796: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56797: LD_VAR 0 6
56801: PPUSH
56802: CALL_OW 257
56806: PUSH
56807: LD_INT 5
56809: PUSH
56810: LD_INT 7
56812: PUSH
56813: LD_INT 9
56815: PUSH
56816: EMPTY
56817: LIST
56818: LIST
56819: LIST
56820: IN
56821: PUSH
56822: LD_VAR 0 1
56826: PPUSH
56827: LD_INT 52
56829: PPUSH
56830: CALL_OW 321
56834: PUSH
56835: LD_INT 2
56837: EQUAL
56838: AND
56839: IFFALSE 56856
// bpoints := bpoints * 1.5 ;
56841: LD_ADDR_VAR 0 10
56845: PUSH
56846: LD_VAR 0 10
56850: PUSH
56851: LD_REAL  1.50000000000000E+0000
56854: MUL
56855: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
56856: LD_VAR 0 1
56860: PPUSH
56861: LD_INT 66
56863: PPUSH
56864: CALL_OW 321
56868: PUSH
56869: LD_INT 2
56871: EQUAL
56872: IFFALSE 56889
// bpoints := bpoints * 1.1 ;
56874: LD_ADDR_VAR 0 10
56878: PUSH
56879: LD_VAR 0 10
56883: PUSH
56884: LD_REAL  1.10000000000000E+0000
56887: MUL
56888: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
56889: LD_ADDR_VAR 0 10
56893: PUSH
56894: LD_VAR 0 10
56898: PUSH
56899: LD_VAR 0 6
56903: PPUSH
56904: LD_INT 1
56906: PPUSH
56907: CALL_OW 259
56911: PUSH
56912: LD_REAL  1.15000000000000E+0000
56915: MUL
56916: MUL
56917: ST_TO_ADDR
// end ; unit_vehicle :
56918: GO 57746
56920: LD_INT 2
56922: DOUBLE
56923: EQUAL
56924: IFTRUE 56928
56926: GO 57734
56928: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
56929: LD_VAR 0 6
56933: PPUSH
56934: CALL_OW 264
56938: PUSH
56939: LD_INT 2
56941: PUSH
56942: LD_INT 42
56944: PUSH
56945: LD_INT 24
56947: PUSH
56948: EMPTY
56949: LIST
56950: LIST
56951: LIST
56952: IN
56953: IFFALSE 56974
// points := [ 25 , 5 , 3 ] ;
56955: LD_ADDR_VAR 0 9
56959: PUSH
56960: LD_INT 25
56962: PUSH
56963: LD_INT 5
56965: PUSH
56966: LD_INT 3
56968: PUSH
56969: EMPTY
56970: LIST
56971: LIST
56972: LIST
56973: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
56974: LD_VAR 0 6
56978: PPUSH
56979: CALL_OW 264
56983: PUSH
56984: LD_INT 4
56986: PUSH
56987: LD_INT 43
56989: PUSH
56990: LD_INT 25
56992: PUSH
56993: EMPTY
56994: LIST
56995: LIST
56996: LIST
56997: IN
56998: IFFALSE 57019
// points := [ 40 , 15 , 5 ] ;
57000: LD_ADDR_VAR 0 9
57004: PUSH
57005: LD_INT 40
57007: PUSH
57008: LD_INT 15
57010: PUSH
57011: LD_INT 5
57013: PUSH
57014: EMPTY
57015: LIST
57016: LIST
57017: LIST
57018: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
57019: LD_VAR 0 6
57023: PPUSH
57024: CALL_OW 264
57028: PUSH
57029: LD_INT 3
57031: PUSH
57032: LD_INT 23
57034: PUSH
57035: EMPTY
57036: LIST
57037: LIST
57038: IN
57039: IFFALSE 57060
// points := [ 7 , 25 , 8 ] ;
57041: LD_ADDR_VAR 0 9
57045: PUSH
57046: LD_INT 7
57048: PUSH
57049: LD_INT 25
57051: PUSH
57052: LD_INT 8
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: LIST
57059: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
57060: LD_VAR 0 6
57064: PPUSH
57065: CALL_OW 264
57069: PUSH
57070: LD_INT 5
57072: PUSH
57073: LD_INT 27
57075: PUSH
57076: LD_INT 44
57078: PUSH
57079: EMPTY
57080: LIST
57081: LIST
57082: LIST
57083: IN
57084: IFFALSE 57105
// points := [ 14 , 50 , 16 ] ;
57086: LD_ADDR_VAR 0 9
57090: PUSH
57091: LD_INT 14
57093: PUSH
57094: LD_INT 50
57096: PUSH
57097: LD_INT 16
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: LIST
57104: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
57105: LD_VAR 0 6
57109: PPUSH
57110: CALL_OW 264
57114: PUSH
57115: LD_INT 6
57117: PUSH
57118: LD_INT 46
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: IN
57125: IFFALSE 57146
// points := [ 32 , 120 , 70 ] ;
57127: LD_ADDR_VAR 0 9
57131: PUSH
57132: LD_INT 32
57134: PUSH
57135: LD_INT 120
57137: PUSH
57138: LD_INT 70
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: LIST
57145: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
57146: LD_VAR 0 6
57150: PPUSH
57151: CALL_OW 264
57155: PUSH
57156: LD_INT 7
57158: PUSH
57159: LD_INT 28
57161: PUSH
57162: LD_INT 45
57164: PUSH
57165: LD_INT 92
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: LIST
57172: LIST
57173: IN
57174: IFFALSE 57195
// points := [ 35 , 20 , 45 ] ;
57176: LD_ADDR_VAR 0 9
57180: PUSH
57181: LD_INT 35
57183: PUSH
57184: LD_INT 20
57186: PUSH
57187: LD_INT 45
57189: PUSH
57190: EMPTY
57191: LIST
57192: LIST
57193: LIST
57194: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
57195: LD_VAR 0 6
57199: PPUSH
57200: CALL_OW 264
57204: PUSH
57205: LD_INT 47
57207: PUSH
57208: EMPTY
57209: LIST
57210: IN
57211: IFFALSE 57232
// points := [ 67 , 45 , 75 ] ;
57213: LD_ADDR_VAR 0 9
57217: PUSH
57218: LD_INT 67
57220: PUSH
57221: LD_INT 45
57223: PUSH
57224: LD_INT 75
57226: PUSH
57227: EMPTY
57228: LIST
57229: LIST
57230: LIST
57231: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
57232: LD_VAR 0 6
57236: PPUSH
57237: CALL_OW 264
57241: PUSH
57242: LD_INT 26
57244: PUSH
57245: EMPTY
57246: LIST
57247: IN
57248: IFFALSE 57269
// points := [ 120 , 30 , 80 ] ;
57250: LD_ADDR_VAR 0 9
57254: PUSH
57255: LD_INT 120
57257: PUSH
57258: LD_INT 30
57260: PUSH
57261: LD_INT 80
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
57269: LD_VAR 0 6
57273: PPUSH
57274: CALL_OW 264
57278: PUSH
57279: LD_INT 22
57281: PUSH
57282: EMPTY
57283: LIST
57284: IN
57285: IFFALSE 57306
// points := [ 40 , 1 , 1 ] ;
57287: LD_ADDR_VAR 0 9
57291: PUSH
57292: LD_INT 40
57294: PUSH
57295: LD_INT 1
57297: PUSH
57298: LD_INT 1
57300: PUSH
57301: EMPTY
57302: LIST
57303: LIST
57304: LIST
57305: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
57306: LD_VAR 0 6
57310: PPUSH
57311: CALL_OW 264
57315: PUSH
57316: LD_INT 29
57318: PUSH
57319: EMPTY
57320: LIST
57321: IN
57322: IFFALSE 57343
// points := [ 70 , 200 , 400 ] ;
57324: LD_ADDR_VAR 0 9
57328: PUSH
57329: LD_INT 70
57331: PUSH
57332: LD_INT 200
57334: PUSH
57335: LD_INT 400
57337: PUSH
57338: EMPTY
57339: LIST
57340: LIST
57341: LIST
57342: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
57343: LD_VAR 0 6
57347: PPUSH
57348: CALL_OW 264
57352: PUSH
57353: LD_INT 14
57355: PUSH
57356: LD_INT 53
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: IN
57363: IFFALSE 57384
// points := [ 40 , 10 , 20 ] ;
57365: LD_ADDR_VAR 0 9
57369: PUSH
57370: LD_INT 40
57372: PUSH
57373: LD_INT 10
57375: PUSH
57376: LD_INT 20
57378: PUSH
57379: EMPTY
57380: LIST
57381: LIST
57382: LIST
57383: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
57384: LD_VAR 0 6
57388: PPUSH
57389: CALL_OW 264
57393: PUSH
57394: LD_INT 9
57396: PUSH
57397: EMPTY
57398: LIST
57399: IN
57400: IFFALSE 57421
// points := [ 5 , 70 , 20 ] ;
57402: LD_ADDR_VAR 0 9
57406: PUSH
57407: LD_INT 5
57409: PUSH
57410: LD_INT 70
57412: PUSH
57413: LD_INT 20
57415: PUSH
57416: EMPTY
57417: LIST
57418: LIST
57419: LIST
57420: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
57421: LD_VAR 0 6
57425: PPUSH
57426: CALL_OW 264
57430: PUSH
57431: LD_INT 10
57433: PUSH
57434: EMPTY
57435: LIST
57436: IN
57437: IFFALSE 57458
// points := [ 35 , 110 , 70 ] ;
57439: LD_ADDR_VAR 0 9
57443: PUSH
57444: LD_INT 35
57446: PUSH
57447: LD_INT 110
57449: PUSH
57450: LD_INT 70
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: LIST
57457: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
57458: LD_VAR 0 6
57462: PPUSH
57463: CALL_OW 265
57467: PUSH
57468: LD_INT 25
57470: EQUAL
57471: IFFALSE 57492
// points := [ 80 , 65 , 100 ] ;
57473: LD_ADDR_VAR 0 9
57477: PUSH
57478: LD_INT 80
57480: PUSH
57481: LD_INT 65
57483: PUSH
57484: LD_INT 100
57486: PUSH
57487: EMPTY
57488: LIST
57489: LIST
57490: LIST
57491: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57492: LD_VAR 0 6
57496: PPUSH
57497: CALL_OW 263
57501: PUSH
57502: LD_INT 1
57504: EQUAL
57505: IFFALSE 57540
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57507: LD_ADDR_VAR 0 10
57511: PUSH
57512: LD_VAR 0 10
57516: PUSH
57517: LD_VAR 0 6
57521: PPUSH
57522: CALL_OW 311
57526: PPUSH
57527: LD_INT 3
57529: PPUSH
57530: CALL_OW 259
57534: PUSH
57535: LD_INT 4
57537: MUL
57538: MUL
57539: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57540: LD_VAR 0 6
57544: PPUSH
57545: CALL_OW 263
57549: PUSH
57550: LD_INT 2
57552: EQUAL
57553: IFFALSE 57604
// begin j := IsControledBy ( i ) ;
57555: LD_ADDR_VAR 0 7
57559: PUSH
57560: LD_VAR 0 6
57564: PPUSH
57565: CALL_OW 312
57569: ST_TO_ADDR
// if j then
57570: LD_VAR 0 7
57574: IFFALSE 57604
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57576: LD_ADDR_VAR 0 10
57580: PUSH
57581: LD_VAR 0 10
57585: PUSH
57586: LD_VAR 0 7
57590: PPUSH
57591: LD_INT 3
57593: PPUSH
57594: CALL_OW 259
57598: PUSH
57599: LD_INT 3
57601: MUL
57602: MUL
57603: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57604: LD_VAR 0 6
57608: PPUSH
57609: CALL_OW 264
57613: PUSH
57614: LD_INT 5
57616: PUSH
57617: LD_INT 6
57619: PUSH
57620: LD_INT 46
57622: PUSH
57623: LD_INT 44
57625: PUSH
57626: LD_INT 47
57628: PUSH
57629: LD_INT 45
57631: PUSH
57632: LD_INT 28
57634: PUSH
57635: LD_INT 7
57637: PUSH
57638: LD_INT 27
57640: PUSH
57641: LD_INT 29
57643: PUSH
57644: EMPTY
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: LIST
57651: LIST
57652: LIST
57653: LIST
57654: LIST
57655: IN
57656: PUSH
57657: LD_VAR 0 1
57661: PPUSH
57662: LD_INT 52
57664: PPUSH
57665: CALL_OW 321
57669: PUSH
57670: LD_INT 2
57672: EQUAL
57673: AND
57674: IFFALSE 57691
// bpoints := bpoints * 1.2 ;
57676: LD_ADDR_VAR 0 10
57680: PUSH
57681: LD_VAR 0 10
57685: PUSH
57686: LD_REAL  1.20000000000000E+0000
57689: MUL
57690: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57691: LD_VAR 0 6
57695: PPUSH
57696: CALL_OW 264
57700: PUSH
57701: LD_INT 6
57703: PUSH
57704: LD_INT 46
57706: PUSH
57707: LD_INT 47
57709: PUSH
57710: EMPTY
57711: LIST
57712: LIST
57713: LIST
57714: IN
57715: IFFALSE 57732
// bpoints := bpoints * 1.2 ;
57717: LD_ADDR_VAR 0 10
57721: PUSH
57722: LD_VAR 0 10
57726: PUSH
57727: LD_REAL  1.20000000000000E+0000
57730: MUL
57731: ST_TO_ADDR
// end ; unit_building :
57732: GO 57746
57734: LD_INT 3
57736: DOUBLE
57737: EQUAL
57738: IFTRUE 57742
57740: GO 57745
57742: POP
// ; end ;
57743: GO 57746
57745: POP
// for j = 1 to 3 do
57746: LD_ADDR_VAR 0 7
57750: PUSH
57751: DOUBLE
57752: LD_INT 1
57754: DEC
57755: ST_TO_ADDR
57756: LD_INT 3
57758: PUSH
57759: FOR_TO
57760: IFFALSE 57813
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57762: LD_ADDR_VAR 0 5
57766: PUSH
57767: LD_VAR 0 5
57771: PPUSH
57772: LD_VAR 0 7
57776: PPUSH
57777: LD_VAR 0 5
57781: PUSH
57782: LD_VAR 0 7
57786: ARRAY
57787: PUSH
57788: LD_VAR 0 9
57792: PUSH
57793: LD_VAR 0 7
57797: ARRAY
57798: PUSH
57799: LD_VAR 0 10
57803: MUL
57804: PLUS
57805: PPUSH
57806: CALL_OW 1
57810: ST_TO_ADDR
57811: GO 57759
57813: POP
57814: POP
// end ;
57815: GO 56294
57817: POP
57818: POP
// result := Replace ( result , 4 , tmp ) ;
57819: LD_ADDR_VAR 0 5
57823: PUSH
57824: LD_VAR 0 5
57828: PPUSH
57829: LD_INT 4
57831: PPUSH
57832: LD_VAR 0 8
57836: PPUSH
57837: CALL_OW 1
57841: ST_TO_ADDR
// end ;
57842: LD_VAR 0 5
57846: RET
// export function DangerAtRange ( unit , range ) ; begin
57847: LD_INT 0
57849: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
57850: LD_ADDR_VAR 0 3
57854: PUSH
57855: LD_VAR 0 1
57859: PPUSH
57860: CALL_OW 255
57864: PPUSH
57865: LD_VAR 0 1
57869: PPUSH
57870: CALL_OW 250
57874: PPUSH
57875: LD_VAR 0 1
57879: PPUSH
57880: CALL_OW 251
57884: PPUSH
57885: LD_VAR 0 2
57889: PPUSH
57890: CALL 56146 0 4
57894: ST_TO_ADDR
// end ;
57895: LD_VAR 0 3
57899: RET
// export function DangerInArea ( side , area ) ; begin
57900: LD_INT 0
57902: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
57903: LD_ADDR_VAR 0 3
57907: PUSH
57908: LD_VAR 0 2
57912: PPUSH
57913: LD_INT 81
57915: PUSH
57916: LD_VAR 0 1
57920: PUSH
57921: EMPTY
57922: LIST
57923: LIST
57924: PPUSH
57925: CALL_OW 70
57929: ST_TO_ADDR
// end ;
57930: LD_VAR 0 3
57934: RET
// export function IsExtension ( b ) ; begin
57935: LD_INT 0
57937: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
57938: LD_ADDR_VAR 0 2
57942: PUSH
57943: LD_VAR 0 1
57947: PUSH
57948: LD_INT 23
57950: PUSH
57951: LD_INT 20
57953: PUSH
57954: LD_INT 22
57956: PUSH
57957: LD_INT 17
57959: PUSH
57960: LD_INT 24
57962: PUSH
57963: LD_INT 21
57965: PUSH
57966: LD_INT 19
57968: PUSH
57969: LD_INT 16
57971: PUSH
57972: LD_INT 25
57974: PUSH
57975: LD_INT 18
57977: PUSH
57978: EMPTY
57979: LIST
57980: LIST
57981: LIST
57982: LIST
57983: LIST
57984: LIST
57985: LIST
57986: LIST
57987: LIST
57988: LIST
57989: IN
57990: ST_TO_ADDR
// end ;
57991: LD_VAR 0 2
57995: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
57996: LD_INT 0
57998: PPUSH
57999: PPUSH
58000: PPUSH
// result := [ ] ;
58001: LD_ADDR_VAR 0 4
58005: PUSH
58006: EMPTY
58007: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
58008: LD_ADDR_VAR 0 5
58012: PUSH
58013: LD_VAR 0 2
58017: PPUSH
58018: LD_INT 21
58020: PUSH
58021: LD_INT 3
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PPUSH
58028: CALL_OW 70
58032: ST_TO_ADDR
// if not tmp then
58033: LD_VAR 0 5
58037: NOT
58038: IFFALSE 58042
// exit ;
58040: GO 58106
// if checkLink then
58042: LD_VAR 0 3
58046: IFFALSE 58096
// begin for i in tmp do
58048: LD_ADDR_VAR 0 6
58052: PUSH
58053: LD_VAR 0 5
58057: PUSH
58058: FOR_IN
58059: IFFALSE 58094
// if GetBase ( i ) <> base then
58061: LD_VAR 0 6
58065: PPUSH
58066: CALL_OW 274
58070: PUSH
58071: LD_VAR 0 1
58075: NONEQUAL
58076: IFFALSE 58092
// ComLinkToBase ( base , i ) ;
58078: LD_VAR 0 1
58082: PPUSH
58083: LD_VAR 0 6
58087: PPUSH
58088: CALL_OW 169
58092: GO 58058
58094: POP
58095: POP
// end ; result := tmp ;
58096: LD_ADDR_VAR 0 4
58100: PUSH
58101: LD_VAR 0 5
58105: ST_TO_ADDR
// end ;
58106: LD_VAR 0 4
58110: RET
// export function ComComplete ( units , b ) ; var i ; begin
58111: LD_INT 0
58113: PPUSH
58114: PPUSH
// if not units then
58115: LD_VAR 0 1
58119: NOT
58120: IFFALSE 58124
// exit ;
58122: GO 58214
// for i in units do
58124: LD_ADDR_VAR 0 4
58128: PUSH
58129: LD_VAR 0 1
58133: PUSH
58134: FOR_IN
58135: IFFALSE 58212
// if BuildingStatus ( b ) = bs_build then
58137: LD_VAR 0 2
58141: PPUSH
58142: CALL_OW 461
58146: PUSH
58147: LD_INT 1
58149: EQUAL
58150: IFFALSE 58210
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
58152: LD_VAR 0 4
58156: PPUSH
58157: LD_STRING h
58159: PUSH
58160: LD_VAR 0 2
58164: PPUSH
58165: CALL_OW 250
58169: PUSH
58170: LD_VAR 0 2
58174: PPUSH
58175: CALL_OW 251
58179: PUSH
58180: LD_VAR 0 2
58184: PUSH
58185: LD_INT 0
58187: PUSH
58188: LD_INT 0
58190: PUSH
58191: LD_INT 0
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: LIST
58198: LIST
58199: LIST
58200: LIST
58201: LIST
58202: PUSH
58203: EMPTY
58204: LIST
58205: PPUSH
58206: CALL_OW 446
58210: GO 58134
58212: POP
58213: POP
// end ;
58214: LD_VAR 0 3
58218: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
58219: LD_INT 0
58221: PPUSH
58222: PPUSH
58223: PPUSH
58224: PPUSH
58225: PPUSH
58226: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
58227: LD_VAR 0 1
58231: NOT
58232: PUSH
58233: LD_VAR 0 1
58237: PPUSH
58238: CALL_OW 263
58242: PUSH
58243: LD_INT 2
58245: NONEQUAL
58246: OR
58247: IFFALSE 58251
// exit ;
58249: GO 58567
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
58251: LD_ADDR_VAR 0 6
58255: PUSH
58256: LD_INT 22
58258: PUSH
58259: LD_VAR 0 1
58263: PPUSH
58264: CALL_OW 255
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 30
58278: PUSH
58279: LD_INT 36
58281: PUSH
58282: EMPTY
58283: LIST
58284: LIST
58285: PUSH
58286: LD_INT 34
58288: PUSH
58289: LD_INT 31
58291: PUSH
58292: EMPTY
58293: LIST
58294: LIST
58295: PUSH
58296: EMPTY
58297: LIST
58298: LIST
58299: LIST
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: PPUSH
58305: CALL_OW 69
58309: ST_TO_ADDR
// if not tmp then
58310: LD_VAR 0 6
58314: NOT
58315: IFFALSE 58319
// exit ;
58317: GO 58567
// result := [ ] ;
58319: LD_ADDR_VAR 0 2
58323: PUSH
58324: EMPTY
58325: ST_TO_ADDR
// for i in tmp do
58326: LD_ADDR_VAR 0 3
58330: PUSH
58331: LD_VAR 0 6
58335: PUSH
58336: FOR_IN
58337: IFFALSE 58408
// begin t := UnitsInside ( i ) ;
58339: LD_ADDR_VAR 0 4
58343: PUSH
58344: LD_VAR 0 3
58348: PPUSH
58349: CALL_OW 313
58353: ST_TO_ADDR
// if t then
58354: LD_VAR 0 4
58358: IFFALSE 58406
// for j in t do
58360: LD_ADDR_VAR 0 7
58364: PUSH
58365: LD_VAR 0 4
58369: PUSH
58370: FOR_IN
58371: IFFALSE 58404
// result := Replace ( result , result + 1 , j ) ;
58373: LD_ADDR_VAR 0 2
58377: PUSH
58378: LD_VAR 0 2
58382: PPUSH
58383: LD_VAR 0 2
58387: PUSH
58388: LD_INT 1
58390: PLUS
58391: PPUSH
58392: LD_VAR 0 7
58396: PPUSH
58397: CALL_OW 1
58401: ST_TO_ADDR
58402: GO 58370
58404: POP
58405: POP
// end ;
58406: GO 58336
58408: POP
58409: POP
// if not result then
58410: LD_VAR 0 2
58414: NOT
58415: IFFALSE 58419
// exit ;
58417: GO 58567
// mech := result [ 1 ] ;
58419: LD_ADDR_VAR 0 5
58423: PUSH
58424: LD_VAR 0 2
58428: PUSH
58429: LD_INT 1
58431: ARRAY
58432: ST_TO_ADDR
// if result > 1 then
58433: LD_VAR 0 2
58437: PUSH
58438: LD_INT 1
58440: GREATER
58441: IFFALSE 58553
// begin for i = 2 to result do
58443: LD_ADDR_VAR 0 3
58447: PUSH
58448: DOUBLE
58449: LD_INT 2
58451: DEC
58452: ST_TO_ADDR
58453: LD_VAR 0 2
58457: PUSH
58458: FOR_TO
58459: IFFALSE 58551
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
58461: LD_ADDR_VAR 0 4
58465: PUSH
58466: LD_VAR 0 2
58470: PUSH
58471: LD_VAR 0 3
58475: ARRAY
58476: PPUSH
58477: LD_INT 3
58479: PPUSH
58480: CALL_OW 259
58484: PUSH
58485: LD_VAR 0 2
58489: PUSH
58490: LD_VAR 0 3
58494: ARRAY
58495: PPUSH
58496: CALL_OW 432
58500: MINUS
58501: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
58502: LD_VAR 0 4
58506: PUSH
58507: LD_VAR 0 5
58511: PPUSH
58512: LD_INT 3
58514: PPUSH
58515: CALL_OW 259
58519: PUSH
58520: LD_VAR 0 5
58524: PPUSH
58525: CALL_OW 432
58529: MINUS
58530: GREATEREQUAL
58531: IFFALSE 58549
// mech := result [ i ] ;
58533: LD_ADDR_VAR 0 5
58537: PUSH
58538: LD_VAR 0 2
58542: PUSH
58543: LD_VAR 0 3
58547: ARRAY
58548: ST_TO_ADDR
// end ;
58549: GO 58458
58551: POP
58552: POP
// end ; ComLinkTo ( vehicle , mech ) ;
58553: LD_VAR 0 1
58557: PPUSH
58558: LD_VAR 0 5
58562: PPUSH
58563: CALL_OW 135
// end ;
58567: LD_VAR 0 2
58571: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58572: LD_INT 0
58574: PPUSH
58575: PPUSH
58576: PPUSH
58577: PPUSH
58578: PPUSH
58579: PPUSH
58580: PPUSH
58581: PPUSH
58582: PPUSH
58583: PPUSH
58584: PPUSH
58585: PPUSH
58586: PPUSH
// result := [ ] ;
58587: LD_ADDR_VAR 0 7
58591: PUSH
58592: EMPTY
58593: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58594: LD_VAR 0 1
58598: PPUSH
58599: CALL_OW 266
58603: PUSH
58604: LD_INT 0
58606: PUSH
58607: LD_INT 1
58609: PUSH
58610: EMPTY
58611: LIST
58612: LIST
58613: IN
58614: NOT
58615: IFFALSE 58619
// exit ;
58617: GO 60253
// if name then
58619: LD_VAR 0 3
58623: IFFALSE 58639
// SetBName ( base_dep , name ) ;
58625: LD_VAR 0 1
58629: PPUSH
58630: LD_VAR 0 3
58634: PPUSH
58635: CALL_OW 500
// base := GetBase ( base_dep ) ;
58639: LD_ADDR_VAR 0 15
58643: PUSH
58644: LD_VAR 0 1
58648: PPUSH
58649: CALL_OW 274
58653: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58654: LD_ADDR_VAR 0 16
58658: PUSH
58659: LD_VAR 0 1
58663: PPUSH
58664: CALL_OW 255
58668: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58669: LD_ADDR_VAR 0 17
58673: PUSH
58674: LD_VAR 0 1
58678: PPUSH
58679: CALL_OW 248
58683: ST_TO_ADDR
// if sources then
58684: LD_VAR 0 5
58688: IFFALSE 58735
// for i = 1 to 3 do
58690: LD_ADDR_VAR 0 8
58694: PUSH
58695: DOUBLE
58696: LD_INT 1
58698: DEC
58699: ST_TO_ADDR
58700: LD_INT 3
58702: PUSH
58703: FOR_TO
58704: IFFALSE 58733
// AddResourceType ( base , i , sources [ i ] ) ;
58706: LD_VAR 0 15
58710: PPUSH
58711: LD_VAR 0 8
58715: PPUSH
58716: LD_VAR 0 5
58720: PUSH
58721: LD_VAR 0 8
58725: ARRAY
58726: PPUSH
58727: CALL_OW 276
58731: GO 58703
58733: POP
58734: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
58735: LD_ADDR_VAR 0 18
58739: PUSH
58740: LD_VAR 0 15
58744: PPUSH
58745: LD_VAR 0 2
58749: PPUSH
58750: LD_INT 1
58752: PPUSH
58753: CALL 57996 0 3
58757: ST_TO_ADDR
// InitHc ;
58758: CALL_OW 19
// InitUc ;
58762: CALL_OW 18
// uc_side := side ;
58766: LD_ADDR_OWVAR 20
58770: PUSH
58771: LD_VAR 0 16
58775: ST_TO_ADDR
// uc_nation := nation ;
58776: LD_ADDR_OWVAR 21
58780: PUSH
58781: LD_VAR 0 17
58785: ST_TO_ADDR
// if buildings then
58786: LD_VAR 0 18
58790: IFFALSE 60112
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58792: LD_ADDR_VAR 0 19
58796: PUSH
58797: LD_VAR 0 18
58801: PPUSH
58802: LD_INT 2
58804: PUSH
58805: LD_INT 30
58807: PUSH
58808: LD_INT 29
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 30
58817: PUSH
58818: LD_INT 30
58820: PUSH
58821: EMPTY
58822: LIST
58823: LIST
58824: PUSH
58825: EMPTY
58826: LIST
58827: LIST
58828: LIST
58829: PPUSH
58830: CALL_OW 72
58834: ST_TO_ADDR
// if tmp then
58835: LD_VAR 0 19
58839: IFFALSE 58887
// for i in tmp do
58841: LD_ADDR_VAR 0 8
58845: PUSH
58846: LD_VAR 0 19
58850: PUSH
58851: FOR_IN
58852: IFFALSE 58885
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
58854: LD_VAR 0 8
58858: PPUSH
58859: CALL_OW 250
58863: PPUSH
58864: LD_VAR 0 8
58868: PPUSH
58869: CALL_OW 251
58873: PPUSH
58874: LD_VAR 0 16
58878: PPUSH
58879: CALL_OW 441
58883: GO 58851
58885: POP
58886: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
58887: LD_VAR 0 18
58891: PPUSH
58892: LD_INT 2
58894: PUSH
58895: LD_INT 30
58897: PUSH
58898: LD_INT 32
58900: PUSH
58901: EMPTY
58902: LIST
58903: LIST
58904: PUSH
58905: LD_INT 30
58907: PUSH
58908: LD_INT 33
58910: PUSH
58911: EMPTY
58912: LIST
58913: LIST
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: LIST
58919: PPUSH
58920: CALL_OW 72
58924: IFFALSE 59012
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
58926: LD_ADDR_VAR 0 8
58930: PUSH
58931: LD_VAR 0 18
58935: PPUSH
58936: LD_INT 2
58938: PUSH
58939: LD_INT 30
58941: PUSH
58942: LD_INT 32
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: PUSH
58949: LD_INT 30
58951: PUSH
58952: LD_INT 33
58954: PUSH
58955: EMPTY
58956: LIST
58957: LIST
58958: PUSH
58959: EMPTY
58960: LIST
58961: LIST
58962: LIST
58963: PPUSH
58964: CALL_OW 72
58968: PUSH
58969: FOR_IN
58970: IFFALSE 59010
// begin if not GetBWeapon ( i ) then
58972: LD_VAR 0 8
58976: PPUSH
58977: CALL_OW 269
58981: NOT
58982: IFFALSE 59008
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
58984: LD_VAR 0 8
58988: PPUSH
58989: LD_VAR 0 8
58993: PPUSH
58994: LD_VAR 0 2
58998: PPUSH
58999: CALL 60258 0 2
59003: PPUSH
59004: CALL_OW 431
// end ;
59008: GO 58969
59010: POP
59011: POP
// end ; for i = 1 to personel do
59012: LD_ADDR_VAR 0 8
59016: PUSH
59017: DOUBLE
59018: LD_INT 1
59020: DEC
59021: ST_TO_ADDR
59022: LD_VAR 0 6
59026: PUSH
59027: FOR_TO
59028: IFFALSE 60092
// begin if i > 4 then
59030: LD_VAR 0 8
59034: PUSH
59035: LD_INT 4
59037: GREATER
59038: IFFALSE 59042
// break ;
59040: GO 60092
// case i of 1 :
59042: LD_VAR 0 8
59046: PUSH
59047: LD_INT 1
59049: DOUBLE
59050: EQUAL
59051: IFTRUE 59055
59053: GO 59135
59055: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
59056: LD_ADDR_VAR 0 12
59060: PUSH
59061: LD_VAR 0 18
59065: PPUSH
59066: LD_INT 22
59068: PUSH
59069: LD_VAR 0 16
59073: PUSH
59074: EMPTY
59075: LIST
59076: LIST
59077: PUSH
59078: LD_INT 58
59080: PUSH
59081: EMPTY
59082: LIST
59083: PUSH
59084: LD_INT 2
59086: PUSH
59087: LD_INT 30
59089: PUSH
59090: LD_INT 32
59092: PUSH
59093: EMPTY
59094: LIST
59095: LIST
59096: PUSH
59097: LD_INT 30
59099: PUSH
59100: LD_INT 4
59102: PUSH
59103: EMPTY
59104: LIST
59105: LIST
59106: PUSH
59107: LD_INT 30
59109: PUSH
59110: LD_INT 5
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: EMPTY
59118: LIST
59119: LIST
59120: LIST
59121: LIST
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: LIST
59127: PPUSH
59128: CALL_OW 72
59132: ST_TO_ADDR
59133: GO 59357
59135: LD_INT 2
59137: DOUBLE
59138: EQUAL
59139: IFTRUE 59143
59141: GO 59205
59143: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
59144: LD_ADDR_VAR 0 12
59148: PUSH
59149: LD_VAR 0 18
59153: PPUSH
59154: LD_INT 22
59156: PUSH
59157: LD_VAR 0 16
59161: PUSH
59162: EMPTY
59163: LIST
59164: LIST
59165: PUSH
59166: LD_INT 2
59168: PUSH
59169: LD_INT 30
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: PUSH
59179: LD_INT 30
59181: PUSH
59182: LD_INT 1
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PUSH
59189: EMPTY
59190: LIST
59191: LIST
59192: LIST
59193: PUSH
59194: EMPTY
59195: LIST
59196: LIST
59197: PPUSH
59198: CALL_OW 72
59202: ST_TO_ADDR
59203: GO 59357
59205: LD_INT 3
59207: DOUBLE
59208: EQUAL
59209: IFTRUE 59213
59211: GO 59275
59213: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
59214: LD_ADDR_VAR 0 12
59218: PUSH
59219: LD_VAR 0 18
59223: PPUSH
59224: LD_INT 22
59226: PUSH
59227: LD_VAR 0 16
59231: PUSH
59232: EMPTY
59233: LIST
59234: LIST
59235: PUSH
59236: LD_INT 2
59238: PUSH
59239: LD_INT 30
59241: PUSH
59242: LD_INT 2
59244: PUSH
59245: EMPTY
59246: LIST
59247: LIST
59248: PUSH
59249: LD_INT 30
59251: PUSH
59252: LD_INT 3
59254: PUSH
59255: EMPTY
59256: LIST
59257: LIST
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: LIST
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: PPUSH
59268: CALL_OW 72
59272: ST_TO_ADDR
59273: GO 59357
59275: LD_INT 4
59277: DOUBLE
59278: EQUAL
59279: IFTRUE 59283
59281: GO 59356
59283: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
59284: LD_ADDR_VAR 0 12
59288: PUSH
59289: LD_VAR 0 18
59293: PPUSH
59294: LD_INT 22
59296: PUSH
59297: LD_VAR 0 16
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: PUSH
59306: LD_INT 2
59308: PUSH
59309: LD_INT 30
59311: PUSH
59312: LD_INT 6
59314: PUSH
59315: EMPTY
59316: LIST
59317: LIST
59318: PUSH
59319: LD_INT 30
59321: PUSH
59322: LD_INT 7
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 30
59331: PUSH
59332: LD_INT 8
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: LIST
59343: LIST
59344: PUSH
59345: EMPTY
59346: LIST
59347: LIST
59348: PPUSH
59349: CALL_OW 72
59353: ST_TO_ADDR
59354: GO 59357
59356: POP
// if i = 1 then
59357: LD_VAR 0 8
59361: PUSH
59362: LD_INT 1
59364: EQUAL
59365: IFFALSE 59476
// begin tmp := [ ] ;
59367: LD_ADDR_VAR 0 19
59371: PUSH
59372: EMPTY
59373: ST_TO_ADDR
// for j in f do
59374: LD_ADDR_VAR 0 9
59378: PUSH
59379: LD_VAR 0 12
59383: PUSH
59384: FOR_IN
59385: IFFALSE 59458
// if GetBType ( j ) = b_bunker then
59387: LD_VAR 0 9
59391: PPUSH
59392: CALL_OW 266
59396: PUSH
59397: LD_INT 32
59399: EQUAL
59400: IFFALSE 59427
// tmp := Insert ( tmp , 1 , j ) else
59402: LD_ADDR_VAR 0 19
59406: PUSH
59407: LD_VAR 0 19
59411: PPUSH
59412: LD_INT 1
59414: PPUSH
59415: LD_VAR 0 9
59419: PPUSH
59420: CALL_OW 2
59424: ST_TO_ADDR
59425: GO 59456
// tmp := Insert ( tmp , tmp + 1 , j ) ;
59427: LD_ADDR_VAR 0 19
59431: PUSH
59432: LD_VAR 0 19
59436: PPUSH
59437: LD_VAR 0 19
59441: PUSH
59442: LD_INT 1
59444: PLUS
59445: PPUSH
59446: LD_VAR 0 9
59450: PPUSH
59451: CALL_OW 2
59455: ST_TO_ADDR
59456: GO 59384
59458: POP
59459: POP
// if tmp then
59460: LD_VAR 0 19
59464: IFFALSE 59476
// f := tmp ;
59466: LD_ADDR_VAR 0 12
59470: PUSH
59471: LD_VAR 0 19
59475: ST_TO_ADDR
// end ; x := personel [ i ] ;
59476: LD_ADDR_VAR 0 13
59480: PUSH
59481: LD_VAR 0 6
59485: PUSH
59486: LD_VAR 0 8
59490: ARRAY
59491: ST_TO_ADDR
// if x = - 1 then
59492: LD_VAR 0 13
59496: PUSH
59497: LD_INT 1
59499: NEG
59500: EQUAL
59501: IFFALSE 59710
// begin for j in f do
59503: LD_ADDR_VAR 0 9
59507: PUSH
59508: LD_VAR 0 12
59512: PUSH
59513: FOR_IN
59514: IFFALSE 59706
// repeat InitHc ;
59516: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59520: LD_VAR 0 9
59524: PPUSH
59525: CALL_OW 266
59529: PUSH
59530: LD_INT 5
59532: EQUAL
59533: IFFALSE 59603
// begin if UnitsInside ( j ) < 3 then
59535: LD_VAR 0 9
59539: PPUSH
59540: CALL_OW 313
59544: PUSH
59545: LD_INT 3
59547: LESS
59548: IFFALSE 59584
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59550: LD_INT 0
59552: PPUSH
59553: LD_INT 5
59555: PUSH
59556: LD_INT 8
59558: PUSH
59559: LD_INT 9
59561: PUSH
59562: EMPTY
59563: LIST
59564: LIST
59565: LIST
59566: PUSH
59567: LD_VAR 0 17
59571: ARRAY
59572: PPUSH
59573: LD_VAR 0 4
59577: PPUSH
59578: CALL_OW 380
59582: GO 59601
// PrepareHuman ( false , i , skill ) ;
59584: LD_INT 0
59586: PPUSH
59587: LD_VAR 0 8
59591: PPUSH
59592: LD_VAR 0 4
59596: PPUSH
59597: CALL_OW 380
// end else
59601: GO 59620
// PrepareHuman ( false , i , skill ) ;
59603: LD_INT 0
59605: PPUSH
59606: LD_VAR 0 8
59610: PPUSH
59611: LD_VAR 0 4
59615: PPUSH
59616: CALL_OW 380
// un := CreateHuman ;
59620: LD_ADDR_VAR 0 14
59624: PUSH
59625: CALL_OW 44
59629: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59630: LD_ADDR_VAR 0 7
59634: PUSH
59635: LD_VAR 0 7
59639: PPUSH
59640: LD_INT 1
59642: PPUSH
59643: LD_VAR 0 14
59647: PPUSH
59648: CALL_OW 2
59652: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59653: LD_VAR 0 14
59657: PPUSH
59658: LD_VAR 0 9
59662: PPUSH
59663: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59667: LD_VAR 0 9
59671: PPUSH
59672: CALL_OW 313
59676: PUSH
59677: LD_INT 6
59679: EQUAL
59680: PUSH
59681: LD_VAR 0 9
59685: PPUSH
59686: CALL_OW 266
59690: PUSH
59691: LD_INT 32
59693: PUSH
59694: LD_INT 31
59696: PUSH
59697: EMPTY
59698: LIST
59699: LIST
59700: IN
59701: OR
59702: IFFALSE 59516
59704: GO 59513
59706: POP
59707: POP
// end else
59708: GO 60090
// for j = 1 to x do
59710: LD_ADDR_VAR 0 9
59714: PUSH
59715: DOUBLE
59716: LD_INT 1
59718: DEC
59719: ST_TO_ADDR
59720: LD_VAR 0 13
59724: PUSH
59725: FOR_TO
59726: IFFALSE 60088
// begin InitHc ;
59728: CALL_OW 19
// if not f then
59732: LD_VAR 0 12
59736: NOT
59737: IFFALSE 59826
// begin PrepareHuman ( false , i , skill ) ;
59739: LD_INT 0
59741: PPUSH
59742: LD_VAR 0 8
59746: PPUSH
59747: LD_VAR 0 4
59751: PPUSH
59752: CALL_OW 380
// un := CreateHuman ;
59756: LD_ADDR_VAR 0 14
59760: PUSH
59761: CALL_OW 44
59765: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59766: LD_ADDR_VAR 0 7
59770: PUSH
59771: LD_VAR 0 7
59775: PPUSH
59776: LD_INT 1
59778: PPUSH
59779: LD_VAR 0 14
59783: PPUSH
59784: CALL_OW 2
59788: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59789: LD_VAR 0 14
59793: PPUSH
59794: LD_VAR 0 1
59798: PPUSH
59799: CALL_OW 250
59803: PPUSH
59804: LD_VAR 0 1
59808: PPUSH
59809: CALL_OW 251
59813: PPUSH
59814: LD_INT 10
59816: PPUSH
59817: LD_INT 0
59819: PPUSH
59820: CALL_OW 50
// continue ;
59824: GO 59725
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
59826: LD_VAR 0 12
59830: PUSH
59831: LD_INT 1
59833: ARRAY
59834: PPUSH
59835: CALL_OW 313
59839: PUSH
59840: LD_VAR 0 12
59844: PUSH
59845: LD_INT 1
59847: ARRAY
59848: PPUSH
59849: CALL_OW 266
59853: PUSH
59854: LD_INT 32
59856: PUSH
59857: LD_INT 31
59859: PUSH
59860: EMPTY
59861: LIST
59862: LIST
59863: IN
59864: AND
59865: PUSH
59866: LD_VAR 0 12
59870: PUSH
59871: LD_INT 1
59873: ARRAY
59874: PPUSH
59875: CALL_OW 313
59879: PUSH
59880: LD_INT 6
59882: EQUAL
59883: OR
59884: IFFALSE 59904
// f := Delete ( f , 1 ) ;
59886: LD_ADDR_VAR 0 12
59890: PUSH
59891: LD_VAR 0 12
59895: PPUSH
59896: LD_INT 1
59898: PPUSH
59899: CALL_OW 3
59903: ST_TO_ADDR
// if not f then
59904: LD_VAR 0 12
59908: NOT
59909: IFFALSE 59927
// begin x := x + 2 ;
59911: LD_ADDR_VAR 0 13
59915: PUSH
59916: LD_VAR 0 13
59920: PUSH
59921: LD_INT 2
59923: PLUS
59924: ST_TO_ADDR
// continue ;
59925: GO 59725
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
59927: LD_VAR 0 12
59931: PUSH
59932: LD_INT 1
59934: ARRAY
59935: PPUSH
59936: CALL_OW 266
59940: PUSH
59941: LD_INT 5
59943: EQUAL
59944: IFFALSE 60018
// begin if UnitsInside ( f [ 1 ] ) < 3 then
59946: LD_VAR 0 12
59950: PUSH
59951: LD_INT 1
59953: ARRAY
59954: PPUSH
59955: CALL_OW 313
59959: PUSH
59960: LD_INT 3
59962: LESS
59963: IFFALSE 59999
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59965: LD_INT 0
59967: PPUSH
59968: LD_INT 5
59970: PUSH
59971: LD_INT 8
59973: PUSH
59974: LD_INT 9
59976: PUSH
59977: EMPTY
59978: LIST
59979: LIST
59980: LIST
59981: PUSH
59982: LD_VAR 0 17
59986: ARRAY
59987: PPUSH
59988: LD_VAR 0 4
59992: PPUSH
59993: CALL_OW 380
59997: GO 60016
// PrepareHuman ( false , i , skill ) ;
59999: LD_INT 0
60001: PPUSH
60002: LD_VAR 0 8
60006: PPUSH
60007: LD_VAR 0 4
60011: PPUSH
60012: CALL_OW 380
// end else
60016: GO 60035
// PrepareHuman ( false , i , skill ) ;
60018: LD_INT 0
60020: PPUSH
60021: LD_VAR 0 8
60025: PPUSH
60026: LD_VAR 0 4
60030: PPUSH
60031: CALL_OW 380
// un := CreateHuman ;
60035: LD_ADDR_VAR 0 14
60039: PUSH
60040: CALL_OW 44
60044: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60045: LD_ADDR_VAR 0 7
60049: PUSH
60050: LD_VAR 0 7
60054: PPUSH
60055: LD_INT 1
60057: PPUSH
60058: LD_VAR 0 14
60062: PPUSH
60063: CALL_OW 2
60067: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
60068: LD_VAR 0 14
60072: PPUSH
60073: LD_VAR 0 12
60077: PUSH
60078: LD_INT 1
60080: ARRAY
60081: PPUSH
60082: CALL_OW 52
// end ;
60086: GO 59725
60088: POP
60089: POP
// end ;
60090: GO 59027
60092: POP
60093: POP
// result := result ^ buildings ;
60094: LD_ADDR_VAR 0 7
60098: PUSH
60099: LD_VAR 0 7
60103: PUSH
60104: LD_VAR 0 18
60108: ADD
60109: ST_TO_ADDR
// end else
60110: GO 60253
// begin for i = 1 to personel do
60112: LD_ADDR_VAR 0 8
60116: PUSH
60117: DOUBLE
60118: LD_INT 1
60120: DEC
60121: ST_TO_ADDR
60122: LD_VAR 0 6
60126: PUSH
60127: FOR_TO
60128: IFFALSE 60251
// begin if i > 4 then
60130: LD_VAR 0 8
60134: PUSH
60135: LD_INT 4
60137: GREATER
60138: IFFALSE 60142
// break ;
60140: GO 60251
// x := personel [ i ] ;
60142: LD_ADDR_VAR 0 13
60146: PUSH
60147: LD_VAR 0 6
60151: PUSH
60152: LD_VAR 0 8
60156: ARRAY
60157: ST_TO_ADDR
// if x = - 1 then
60158: LD_VAR 0 13
60162: PUSH
60163: LD_INT 1
60165: NEG
60166: EQUAL
60167: IFFALSE 60171
// continue ;
60169: GO 60127
// PrepareHuman ( false , i , skill ) ;
60171: LD_INT 0
60173: PPUSH
60174: LD_VAR 0 8
60178: PPUSH
60179: LD_VAR 0 4
60183: PPUSH
60184: CALL_OW 380
// un := CreateHuman ;
60188: LD_ADDR_VAR 0 14
60192: PUSH
60193: CALL_OW 44
60197: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60198: LD_VAR 0 14
60202: PPUSH
60203: LD_VAR 0 1
60207: PPUSH
60208: CALL_OW 250
60212: PPUSH
60213: LD_VAR 0 1
60217: PPUSH
60218: CALL_OW 251
60222: PPUSH
60223: LD_INT 10
60225: PPUSH
60226: LD_INT 0
60228: PPUSH
60229: CALL_OW 50
// result := result ^ un ;
60233: LD_ADDR_VAR 0 7
60237: PUSH
60238: LD_VAR 0 7
60242: PUSH
60243: LD_VAR 0 14
60247: ADD
60248: ST_TO_ADDR
// end ;
60249: GO 60127
60251: POP
60252: POP
// end ; end ;
60253: LD_VAR 0 7
60257: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
60258: LD_INT 0
60260: PPUSH
60261: PPUSH
60262: PPUSH
60263: PPUSH
60264: PPUSH
60265: PPUSH
60266: PPUSH
60267: PPUSH
60268: PPUSH
60269: PPUSH
60270: PPUSH
60271: PPUSH
60272: PPUSH
60273: PPUSH
60274: PPUSH
60275: PPUSH
// result := false ;
60276: LD_ADDR_VAR 0 3
60280: PUSH
60281: LD_INT 0
60283: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
60284: LD_VAR 0 1
60288: NOT
60289: PUSH
60290: LD_VAR 0 1
60294: PPUSH
60295: CALL_OW 266
60299: PUSH
60300: LD_INT 32
60302: PUSH
60303: LD_INT 33
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: IN
60310: NOT
60311: OR
60312: IFFALSE 60316
// exit ;
60314: GO 61425
// nat := GetNation ( tower ) ;
60316: LD_ADDR_VAR 0 12
60320: PUSH
60321: LD_VAR 0 1
60325: PPUSH
60326: CALL_OW 248
60330: ST_TO_ADDR
// side := GetSide ( tower ) ;
60331: LD_ADDR_VAR 0 16
60335: PUSH
60336: LD_VAR 0 1
60340: PPUSH
60341: CALL_OW 255
60345: ST_TO_ADDR
// x := GetX ( tower ) ;
60346: LD_ADDR_VAR 0 10
60350: PUSH
60351: LD_VAR 0 1
60355: PPUSH
60356: CALL_OW 250
60360: ST_TO_ADDR
// y := GetY ( tower ) ;
60361: LD_ADDR_VAR 0 11
60365: PUSH
60366: LD_VAR 0 1
60370: PPUSH
60371: CALL_OW 251
60375: ST_TO_ADDR
// if not x or not y then
60376: LD_VAR 0 10
60380: NOT
60381: PUSH
60382: LD_VAR 0 11
60386: NOT
60387: OR
60388: IFFALSE 60392
// exit ;
60390: GO 61425
// weapon := 0 ;
60392: LD_ADDR_VAR 0 18
60396: PUSH
60397: LD_INT 0
60399: ST_TO_ADDR
// fac_list := [ ] ;
60400: LD_ADDR_VAR 0 17
60404: PUSH
60405: EMPTY
60406: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
60407: LD_ADDR_VAR 0 6
60411: PUSH
60412: LD_VAR 0 1
60416: PPUSH
60417: CALL_OW 274
60421: PPUSH
60422: LD_VAR 0 2
60426: PPUSH
60427: LD_INT 0
60429: PPUSH
60430: CALL 57996 0 3
60434: PPUSH
60435: LD_INT 30
60437: PUSH
60438: LD_INT 3
60440: PUSH
60441: EMPTY
60442: LIST
60443: LIST
60444: PPUSH
60445: CALL_OW 72
60449: ST_TO_ADDR
// if not factories then
60450: LD_VAR 0 6
60454: NOT
60455: IFFALSE 60459
// exit ;
60457: GO 61425
// for i in factories do
60459: LD_ADDR_VAR 0 8
60463: PUSH
60464: LD_VAR 0 6
60468: PUSH
60469: FOR_IN
60470: IFFALSE 60495
// fac_list := fac_list union AvailableWeaponList ( i ) ;
60472: LD_ADDR_VAR 0 17
60476: PUSH
60477: LD_VAR 0 17
60481: PUSH
60482: LD_VAR 0 8
60486: PPUSH
60487: CALL_OW 478
60491: UNION
60492: ST_TO_ADDR
60493: GO 60469
60495: POP
60496: POP
// if not fac_list then
60497: LD_VAR 0 17
60501: NOT
60502: IFFALSE 60506
// exit ;
60504: GO 61425
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
60506: LD_ADDR_VAR 0 5
60510: PUSH
60511: LD_INT 4
60513: PUSH
60514: LD_INT 5
60516: PUSH
60517: LD_INT 9
60519: PUSH
60520: LD_INT 10
60522: PUSH
60523: LD_INT 6
60525: PUSH
60526: LD_INT 7
60528: PUSH
60529: LD_INT 11
60531: PUSH
60532: EMPTY
60533: LIST
60534: LIST
60535: LIST
60536: LIST
60537: LIST
60538: LIST
60539: LIST
60540: PUSH
60541: LD_INT 27
60543: PUSH
60544: LD_INT 28
60546: PUSH
60547: LD_INT 26
60549: PUSH
60550: LD_INT 30
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: LIST
60557: LIST
60558: PUSH
60559: LD_INT 43
60561: PUSH
60562: LD_INT 44
60564: PUSH
60565: LD_INT 46
60567: PUSH
60568: LD_INT 45
60570: PUSH
60571: LD_INT 47
60573: PUSH
60574: LD_INT 49
60576: PUSH
60577: EMPTY
60578: LIST
60579: LIST
60580: LIST
60581: LIST
60582: LIST
60583: LIST
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: LIST
60589: PUSH
60590: LD_VAR 0 12
60594: ARRAY
60595: ST_TO_ADDR
// list := list isect fac_list ;
60596: LD_ADDR_VAR 0 5
60600: PUSH
60601: LD_VAR 0 5
60605: PUSH
60606: LD_VAR 0 17
60610: ISECT
60611: ST_TO_ADDR
// if not list then
60612: LD_VAR 0 5
60616: NOT
60617: IFFALSE 60621
// exit ;
60619: GO 61425
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60621: LD_VAR 0 12
60625: PUSH
60626: LD_INT 3
60628: EQUAL
60629: PUSH
60630: LD_INT 49
60632: PUSH
60633: LD_VAR 0 5
60637: IN
60638: AND
60639: PUSH
60640: LD_INT 31
60642: PPUSH
60643: LD_VAR 0 16
60647: PPUSH
60648: CALL_OW 321
60652: PUSH
60653: LD_INT 2
60655: EQUAL
60656: AND
60657: IFFALSE 60717
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60659: LD_INT 22
60661: PUSH
60662: LD_VAR 0 16
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 35
60673: PUSH
60674: LD_INT 49
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: LD_INT 91
60683: PUSH
60684: LD_VAR 0 1
60688: PUSH
60689: LD_INT 10
60691: PUSH
60692: EMPTY
60693: LIST
60694: LIST
60695: LIST
60696: PUSH
60697: EMPTY
60698: LIST
60699: LIST
60700: LIST
60701: PPUSH
60702: CALL_OW 69
60706: NOT
60707: IFFALSE 60717
// weapon := ru_time_lapser ;
60709: LD_ADDR_VAR 0 18
60713: PUSH
60714: LD_INT 49
60716: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60717: LD_VAR 0 12
60721: PUSH
60722: LD_INT 1
60724: PUSH
60725: LD_INT 2
60727: PUSH
60728: EMPTY
60729: LIST
60730: LIST
60731: IN
60732: PUSH
60733: LD_INT 11
60735: PUSH
60736: LD_VAR 0 5
60740: IN
60741: PUSH
60742: LD_INT 30
60744: PUSH
60745: LD_VAR 0 5
60749: IN
60750: OR
60751: AND
60752: PUSH
60753: LD_INT 6
60755: PPUSH
60756: LD_VAR 0 16
60760: PPUSH
60761: CALL_OW 321
60765: PUSH
60766: LD_INT 2
60768: EQUAL
60769: AND
60770: IFFALSE 60935
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60772: LD_INT 22
60774: PUSH
60775: LD_VAR 0 16
60779: PUSH
60780: EMPTY
60781: LIST
60782: LIST
60783: PUSH
60784: LD_INT 2
60786: PUSH
60787: LD_INT 35
60789: PUSH
60790: LD_INT 11
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: PUSH
60797: LD_INT 35
60799: PUSH
60800: LD_INT 30
60802: PUSH
60803: EMPTY
60804: LIST
60805: LIST
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: LIST
60811: PUSH
60812: LD_INT 91
60814: PUSH
60815: LD_VAR 0 1
60819: PUSH
60820: LD_INT 18
60822: PUSH
60823: EMPTY
60824: LIST
60825: LIST
60826: LIST
60827: PUSH
60828: EMPTY
60829: LIST
60830: LIST
60831: LIST
60832: PPUSH
60833: CALL_OW 69
60837: NOT
60838: PUSH
60839: LD_INT 22
60841: PUSH
60842: LD_VAR 0 16
60846: PUSH
60847: EMPTY
60848: LIST
60849: LIST
60850: PUSH
60851: LD_INT 2
60853: PUSH
60854: LD_INT 30
60856: PUSH
60857: LD_INT 32
60859: PUSH
60860: EMPTY
60861: LIST
60862: LIST
60863: PUSH
60864: LD_INT 30
60866: PUSH
60867: LD_INT 33
60869: PUSH
60870: EMPTY
60871: LIST
60872: LIST
60873: PUSH
60874: EMPTY
60875: LIST
60876: LIST
60877: LIST
60878: PUSH
60879: LD_INT 91
60881: PUSH
60882: LD_VAR 0 1
60886: PUSH
60887: LD_INT 12
60889: PUSH
60890: EMPTY
60891: LIST
60892: LIST
60893: LIST
60894: PUSH
60895: EMPTY
60896: LIST
60897: LIST
60898: LIST
60899: PUSH
60900: EMPTY
60901: LIST
60902: PPUSH
60903: CALL_OW 69
60907: PUSH
60908: LD_INT 2
60910: GREATER
60911: AND
60912: IFFALSE 60935
// weapon := [ us_radar , ar_radar ] [ nat ] ;
60914: LD_ADDR_VAR 0 18
60918: PUSH
60919: LD_INT 11
60921: PUSH
60922: LD_INT 30
60924: PUSH
60925: EMPTY
60926: LIST
60927: LIST
60928: PUSH
60929: LD_VAR 0 12
60933: ARRAY
60934: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
60935: LD_VAR 0 18
60939: NOT
60940: PUSH
60941: LD_INT 40
60943: PPUSH
60944: LD_VAR 0 16
60948: PPUSH
60949: CALL_OW 321
60953: PUSH
60954: LD_INT 2
60956: EQUAL
60957: AND
60958: PUSH
60959: LD_INT 7
60961: PUSH
60962: LD_VAR 0 5
60966: IN
60967: PUSH
60968: LD_INT 28
60970: PUSH
60971: LD_VAR 0 5
60975: IN
60976: OR
60977: PUSH
60978: LD_INT 45
60980: PUSH
60981: LD_VAR 0 5
60985: IN
60986: OR
60987: AND
60988: IFFALSE 61242
// begin hex := GetHexInfo ( x , y ) ;
60990: LD_ADDR_VAR 0 4
60994: PUSH
60995: LD_VAR 0 10
60999: PPUSH
61000: LD_VAR 0 11
61004: PPUSH
61005: CALL_OW 546
61009: ST_TO_ADDR
// if hex [ 1 ] then
61010: LD_VAR 0 4
61014: PUSH
61015: LD_INT 1
61017: ARRAY
61018: IFFALSE 61022
// exit ;
61020: GO 61425
// height := hex [ 2 ] ;
61022: LD_ADDR_VAR 0 15
61026: PUSH
61027: LD_VAR 0 4
61031: PUSH
61032: LD_INT 2
61034: ARRAY
61035: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
61036: LD_ADDR_VAR 0 14
61040: PUSH
61041: LD_INT 0
61043: PUSH
61044: LD_INT 2
61046: PUSH
61047: LD_INT 3
61049: PUSH
61050: LD_INT 5
61052: PUSH
61053: EMPTY
61054: LIST
61055: LIST
61056: LIST
61057: LIST
61058: ST_TO_ADDR
// for i in tmp do
61059: LD_ADDR_VAR 0 8
61063: PUSH
61064: LD_VAR 0 14
61068: PUSH
61069: FOR_IN
61070: IFFALSE 61240
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
61072: LD_ADDR_VAR 0 9
61076: PUSH
61077: LD_VAR 0 10
61081: PPUSH
61082: LD_VAR 0 8
61086: PPUSH
61087: LD_INT 5
61089: PPUSH
61090: CALL_OW 272
61094: PUSH
61095: LD_VAR 0 11
61099: PPUSH
61100: LD_VAR 0 8
61104: PPUSH
61105: LD_INT 5
61107: PPUSH
61108: CALL_OW 273
61112: PUSH
61113: EMPTY
61114: LIST
61115: LIST
61116: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
61117: LD_VAR 0 9
61121: PUSH
61122: LD_INT 1
61124: ARRAY
61125: PPUSH
61126: LD_VAR 0 9
61130: PUSH
61131: LD_INT 2
61133: ARRAY
61134: PPUSH
61135: CALL_OW 488
61139: IFFALSE 61238
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
61141: LD_ADDR_VAR 0 4
61145: PUSH
61146: LD_VAR 0 9
61150: PUSH
61151: LD_INT 1
61153: ARRAY
61154: PPUSH
61155: LD_VAR 0 9
61159: PUSH
61160: LD_INT 2
61162: ARRAY
61163: PPUSH
61164: CALL_OW 546
61168: ST_TO_ADDR
// if hex [ 1 ] then
61169: LD_VAR 0 4
61173: PUSH
61174: LD_INT 1
61176: ARRAY
61177: IFFALSE 61181
// continue ;
61179: GO 61069
// h := hex [ 2 ] ;
61181: LD_ADDR_VAR 0 13
61185: PUSH
61186: LD_VAR 0 4
61190: PUSH
61191: LD_INT 2
61193: ARRAY
61194: ST_TO_ADDR
// if h + 7 < height then
61195: LD_VAR 0 13
61199: PUSH
61200: LD_INT 7
61202: PLUS
61203: PUSH
61204: LD_VAR 0 15
61208: LESS
61209: IFFALSE 61238
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
61211: LD_ADDR_VAR 0 18
61215: PUSH
61216: LD_INT 7
61218: PUSH
61219: LD_INT 28
61221: PUSH
61222: LD_INT 45
61224: PUSH
61225: EMPTY
61226: LIST
61227: LIST
61228: LIST
61229: PUSH
61230: LD_VAR 0 12
61234: ARRAY
61235: ST_TO_ADDR
// break ;
61236: GO 61240
// end ; end ; end ;
61238: GO 61069
61240: POP
61241: POP
// end ; if not weapon then
61242: LD_VAR 0 18
61246: NOT
61247: IFFALSE 61307
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
61249: LD_ADDR_VAR 0 5
61253: PUSH
61254: LD_VAR 0 5
61258: PUSH
61259: LD_INT 11
61261: PUSH
61262: LD_INT 30
61264: PUSH
61265: LD_INT 49
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: LIST
61272: DIFF
61273: ST_TO_ADDR
// if not list then
61274: LD_VAR 0 5
61278: NOT
61279: IFFALSE 61283
// exit ;
61281: GO 61425
// weapon := list [ rand ( 1 , list ) ] ;
61283: LD_ADDR_VAR 0 18
61287: PUSH
61288: LD_VAR 0 5
61292: PUSH
61293: LD_INT 1
61295: PPUSH
61296: LD_VAR 0 5
61300: PPUSH
61301: CALL_OW 12
61305: ARRAY
61306: ST_TO_ADDR
// end ; if weapon then
61307: LD_VAR 0 18
61311: IFFALSE 61425
// begin tmp := CostOfWeapon ( weapon ) ;
61313: LD_ADDR_VAR 0 14
61317: PUSH
61318: LD_VAR 0 18
61322: PPUSH
61323: CALL_OW 451
61327: ST_TO_ADDR
// j := GetBase ( tower ) ;
61328: LD_ADDR_VAR 0 9
61332: PUSH
61333: LD_VAR 0 1
61337: PPUSH
61338: CALL_OW 274
61342: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
61343: LD_VAR 0 9
61347: PPUSH
61348: LD_INT 1
61350: PPUSH
61351: CALL_OW 275
61355: PUSH
61356: LD_VAR 0 14
61360: PUSH
61361: LD_INT 1
61363: ARRAY
61364: GREATEREQUAL
61365: PUSH
61366: LD_VAR 0 9
61370: PPUSH
61371: LD_INT 2
61373: PPUSH
61374: CALL_OW 275
61378: PUSH
61379: LD_VAR 0 14
61383: PUSH
61384: LD_INT 2
61386: ARRAY
61387: GREATEREQUAL
61388: AND
61389: PUSH
61390: LD_VAR 0 9
61394: PPUSH
61395: LD_INT 3
61397: PPUSH
61398: CALL_OW 275
61402: PUSH
61403: LD_VAR 0 14
61407: PUSH
61408: LD_INT 3
61410: ARRAY
61411: GREATEREQUAL
61412: AND
61413: IFFALSE 61425
// result := weapon ;
61415: LD_ADDR_VAR 0 3
61419: PUSH
61420: LD_VAR 0 18
61424: ST_TO_ADDR
// end ; end ;
61425: LD_VAR 0 3
61429: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
61430: LD_INT 0
61432: PPUSH
61433: PPUSH
// result := true ;
61434: LD_ADDR_VAR 0 3
61438: PUSH
61439: LD_INT 1
61441: ST_TO_ADDR
// if array1 = array2 then
61442: LD_VAR 0 1
61446: PUSH
61447: LD_VAR 0 2
61451: EQUAL
61452: IFFALSE 61512
// begin for i = 1 to array1 do
61454: LD_ADDR_VAR 0 4
61458: PUSH
61459: DOUBLE
61460: LD_INT 1
61462: DEC
61463: ST_TO_ADDR
61464: LD_VAR 0 1
61468: PUSH
61469: FOR_TO
61470: IFFALSE 61508
// if array1 [ i ] <> array2 [ i ] then
61472: LD_VAR 0 1
61476: PUSH
61477: LD_VAR 0 4
61481: ARRAY
61482: PUSH
61483: LD_VAR 0 2
61487: PUSH
61488: LD_VAR 0 4
61492: ARRAY
61493: NONEQUAL
61494: IFFALSE 61506
// begin result := false ;
61496: LD_ADDR_VAR 0 3
61500: PUSH
61501: LD_INT 0
61503: ST_TO_ADDR
// break ;
61504: GO 61508
// end ;
61506: GO 61469
61508: POP
61509: POP
// end else
61510: GO 61520
// result := false ;
61512: LD_ADDR_VAR 0 3
61516: PUSH
61517: LD_INT 0
61519: ST_TO_ADDR
// end ;
61520: LD_VAR 0 3
61524: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
61525: LD_INT 0
61527: PPUSH
61528: PPUSH
// if not array1 or not array2 then
61529: LD_VAR 0 1
61533: NOT
61534: PUSH
61535: LD_VAR 0 2
61539: NOT
61540: OR
61541: IFFALSE 61545
// exit ;
61543: GO 61609
// result := true ;
61545: LD_ADDR_VAR 0 3
61549: PUSH
61550: LD_INT 1
61552: ST_TO_ADDR
// for i = 1 to array1 do
61553: LD_ADDR_VAR 0 4
61557: PUSH
61558: DOUBLE
61559: LD_INT 1
61561: DEC
61562: ST_TO_ADDR
61563: LD_VAR 0 1
61567: PUSH
61568: FOR_TO
61569: IFFALSE 61607
// if array1 [ i ] <> array2 [ i ] then
61571: LD_VAR 0 1
61575: PUSH
61576: LD_VAR 0 4
61580: ARRAY
61581: PUSH
61582: LD_VAR 0 2
61586: PUSH
61587: LD_VAR 0 4
61591: ARRAY
61592: NONEQUAL
61593: IFFALSE 61605
// begin result := false ;
61595: LD_ADDR_VAR 0 3
61599: PUSH
61600: LD_INT 0
61602: ST_TO_ADDR
// break ;
61603: GO 61607
// end ;
61605: GO 61568
61607: POP
61608: POP
// end ;
61609: LD_VAR 0 3
61613: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61614: LD_INT 0
61616: PPUSH
61617: PPUSH
61618: PPUSH
// pom := GetBase ( fac ) ;
61619: LD_ADDR_VAR 0 5
61623: PUSH
61624: LD_VAR 0 1
61628: PPUSH
61629: CALL_OW 274
61633: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61634: LD_ADDR_VAR 0 4
61638: PUSH
61639: LD_VAR 0 2
61643: PUSH
61644: LD_INT 1
61646: ARRAY
61647: PPUSH
61648: LD_VAR 0 2
61652: PUSH
61653: LD_INT 2
61655: ARRAY
61656: PPUSH
61657: LD_VAR 0 2
61661: PUSH
61662: LD_INT 3
61664: ARRAY
61665: PPUSH
61666: LD_VAR 0 2
61670: PUSH
61671: LD_INT 4
61673: ARRAY
61674: PPUSH
61675: CALL_OW 449
61679: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61680: LD_ADDR_VAR 0 3
61684: PUSH
61685: LD_VAR 0 5
61689: PPUSH
61690: LD_INT 1
61692: PPUSH
61693: CALL_OW 275
61697: PUSH
61698: LD_VAR 0 4
61702: PUSH
61703: LD_INT 1
61705: ARRAY
61706: GREATEREQUAL
61707: PUSH
61708: LD_VAR 0 5
61712: PPUSH
61713: LD_INT 2
61715: PPUSH
61716: CALL_OW 275
61720: PUSH
61721: LD_VAR 0 4
61725: PUSH
61726: LD_INT 2
61728: ARRAY
61729: GREATEREQUAL
61730: AND
61731: PUSH
61732: LD_VAR 0 5
61736: PPUSH
61737: LD_INT 3
61739: PPUSH
61740: CALL_OW 275
61744: PUSH
61745: LD_VAR 0 4
61749: PUSH
61750: LD_INT 3
61752: ARRAY
61753: GREATEREQUAL
61754: AND
61755: ST_TO_ADDR
// end ;
61756: LD_VAR 0 3
61760: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61761: LD_INT 0
61763: PPUSH
61764: PPUSH
61765: PPUSH
61766: PPUSH
// pom := GetBase ( building ) ;
61767: LD_ADDR_VAR 0 3
61771: PUSH
61772: LD_VAR 0 1
61776: PPUSH
61777: CALL_OW 274
61781: ST_TO_ADDR
// if not pom then
61782: LD_VAR 0 3
61786: NOT
61787: IFFALSE 61791
// exit ;
61789: GO 61961
// btype := GetBType ( building ) ;
61791: LD_ADDR_VAR 0 5
61795: PUSH
61796: LD_VAR 0 1
61800: PPUSH
61801: CALL_OW 266
61805: ST_TO_ADDR
// if btype = b_armoury then
61806: LD_VAR 0 5
61810: PUSH
61811: LD_INT 4
61813: EQUAL
61814: IFFALSE 61824
// btype := b_barracks ;
61816: LD_ADDR_VAR 0 5
61820: PUSH
61821: LD_INT 5
61823: ST_TO_ADDR
// if btype = b_depot then
61824: LD_VAR 0 5
61828: PUSH
61829: LD_INT 0
61831: EQUAL
61832: IFFALSE 61842
// btype := b_warehouse ;
61834: LD_ADDR_VAR 0 5
61838: PUSH
61839: LD_INT 1
61841: ST_TO_ADDR
// if btype = b_workshop then
61842: LD_VAR 0 5
61846: PUSH
61847: LD_INT 2
61849: EQUAL
61850: IFFALSE 61860
// btype := b_factory ;
61852: LD_ADDR_VAR 0 5
61856: PUSH
61857: LD_INT 3
61859: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61860: LD_ADDR_VAR 0 4
61864: PUSH
61865: LD_VAR 0 5
61869: PPUSH
61870: LD_VAR 0 1
61874: PPUSH
61875: CALL_OW 248
61879: PPUSH
61880: CALL_OW 450
61884: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61885: LD_ADDR_VAR 0 2
61889: PUSH
61890: LD_VAR 0 3
61894: PPUSH
61895: LD_INT 1
61897: PPUSH
61898: CALL_OW 275
61902: PUSH
61903: LD_VAR 0 4
61907: PUSH
61908: LD_INT 1
61910: ARRAY
61911: GREATEREQUAL
61912: PUSH
61913: LD_VAR 0 3
61917: PPUSH
61918: LD_INT 2
61920: PPUSH
61921: CALL_OW 275
61925: PUSH
61926: LD_VAR 0 4
61930: PUSH
61931: LD_INT 2
61933: ARRAY
61934: GREATEREQUAL
61935: AND
61936: PUSH
61937: LD_VAR 0 3
61941: PPUSH
61942: LD_INT 3
61944: PPUSH
61945: CALL_OW 275
61949: PUSH
61950: LD_VAR 0 4
61954: PUSH
61955: LD_INT 3
61957: ARRAY
61958: GREATEREQUAL
61959: AND
61960: ST_TO_ADDR
// end ;
61961: LD_VAR 0 2
61965: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
61966: LD_INT 0
61968: PPUSH
61969: PPUSH
61970: PPUSH
// pom := GetBase ( building ) ;
61971: LD_ADDR_VAR 0 4
61975: PUSH
61976: LD_VAR 0 1
61980: PPUSH
61981: CALL_OW 274
61985: ST_TO_ADDR
// if not pom then
61986: LD_VAR 0 4
61990: NOT
61991: IFFALSE 61995
// exit ;
61993: GO 62096
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61995: LD_ADDR_VAR 0 5
61999: PUSH
62000: LD_VAR 0 2
62004: PPUSH
62005: LD_VAR 0 1
62009: PPUSH
62010: CALL_OW 248
62014: PPUSH
62015: CALL_OW 450
62019: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62020: LD_ADDR_VAR 0 3
62024: PUSH
62025: LD_VAR 0 4
62029: PPUSH
62030: LD_INT 1
62032: PPUSH
62033: CALL_OW 275
62037: PUSH
62038: LD_VAR 0 5
62042: PUSH
62043: LD_INT 1
62045: ARRAY
62046: GREATEREQUAL
62047: PUSH
62048: LD_VAR 0 4
62052: PPUSH
62053: LD_INT 2
62055: PPUSH
62056: CALL_OW 275
62060: PUSH
62061: LD_VAR 0 5
62065: PUSH
62066: LD_INT 2
62068: ARRAY
62069: GREATEREQUAL
62070: AND
62071: PUSH
62072: LD_VAR 0 4
62076: PPUSH
62077: LD_INT 3
62079: PPUSH
62080: CALL_OW 275
62084: PUSH
62085: LD_VAR 0 5
62089: PUSH
62090: LD_INT 3
62092: ARRAY
62093: GREATEREQUAL
62094: AND
62095: ST_TO_ADDR
// end ;
62096: LD_VAR 0 3
62100: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
62101: LD_INT 0
62103: PPUSH
62104: PPUSH
62105: PPUSH
62106: PPUSH
62107: PPUSH
62108: PPUSH
62109: PPUSH
62110: PPUSH
62111: PPUSH
62112: PPUSH
62113: PPUSH
// result := false ;
62114: LD_ADDR_VAR 0 8
62118: PUSH
62119: LD_INT 0
62121: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
62122: LD_VAR 0 5
62126: NOT
62127: PUSH
62128: LD_VAR 0 1
62132: NOT
62133: OR
62134: PUSH
62135: LD_VAR 0 2
62139: NOT
62140: OR
62141: PUSH
62142: LD_VAR 0 3
62146: NOT
62147: OR
62148: IFFALSE 62152
// exit ;
62150: GO 62966
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
62152: LD_ADDR_VAR 0 14
62156: PUSH
62157: LD_VAR 0 1
62161: PPUSH
62162: LD_VAR 0 2
62166: PPUSH
62167: LD_VAR 0 3
62171: PPUSH
62172: LD_VAR 0 4
62176: PPUSH
62177: LD_VAR 0 5
62181: PUSH
62182: LD_INT 1
62184: ARRAY
62185: PPUSH
62186: CALL_OW 248
62190: PPUSH
62191: LD_INT 0
62193: PPUSH
62194: CALL 64199 0 6
62198: ST_TO_ADDR
// if not hexes then
62199: LD_VAR 0 14
62203: NOT
62204: IFFALSE 62208
// exit ;
62206: GO 62966
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62208: LD_ADDR_VAR 0 17
62212: PUSH
62213: LD_VAR 0 5
62217: PPUSH
62218: LD_INT 22
62220: PUSH
62221: LD_VAR 0 13
62225: PPUSH
62226: CALL_OW 255
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 2
62237: PUSH
62238: LD_INT 30
62240: PUSH
62241: LD_INT 0
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: PUSH
62248: LD_INT 30
62250: PUSH
62251: LD_INT 1
62253: PUSH
62254: EMPTY
62255: LIST
62256: LIST
62257: PUSH
62258: EMPTY
62259: LIST
62260: LIST
62261: LIST
62262: PUSH
62263: EMPTY
62264: LIST
62265: LIST
62266: PPUSH
62267: CALL_OW 72
62271: ST_TO_ADDR
// for i = 1 to hexes do
62272: LD_ADDR_VAR 0 9
62276: PUSH
62277: DOUBLE
62278: LD_INT 1
62280: DEC
62281: ST_TO_ADDR
62282: LD_VAR 0 14
62286: PUSH
62287: FOR_TO
62288: IFFALSE 62964
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62290: LD_ADDR_VAR 0 13
62294: PUSH
62295: LD_VAR 0 14
62299: PUSH
62300: LD_VAR 0 9
62304: ARRAY
62305: PUSH
62306: LD_INT 1
62308: ARRAY
62309: PPUSH
62310: LD_VAR 0 14
62314: PUSH
62315: LD_VAR 0 9
62319: ARRAY
62320: PUSH
62321: LD_INT 2
62323: ARRAY
62324: PPUSH
62325: CALL_OW 428
62329: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
62330: LD_VAR 0 14
62334: PUSH
62335: LD_VAR 0 9
62339: ARRAY
62340: PUSH
62341: LD_INT 1
62343: ARRAY
62344: PPUSH
62345: LD_VAR 0 14
62349: PUSH
62350: LD_VAR 0 9
62354: ARRAY
62355: PUSH
62356: LD_INT 2
62358: ARRAY
62359: PPUSH
62360: CALL_OW 351
62364: PUSH
62365: LD_VAR 0 14
62369: PUSH
62370: LD_VAR 0 9
62374: ARRAY
62375: PUSH
62376: LD_INT 1
62378: ARRAY
62379: PPUSH
62380: LD_VAR 0 14
62384: PUSH
62385: LD_VAR 0 9
62389: ARRAY
62390: PUSH
62391: LD_INT 2
62393: ARRAY
62394: PPUSH
62395: CALL_OW 488
62399: NOT
62400: OR
62401: PUSH
62402: LD_VAR 0 13
62406: PPUSH
62407: CALL_OW 247
62411: PUSH
62412: LD_INT 3
62414: EQUAL
62415: OR
62416: IFFALSE 62422
// exit ;
62418: POP
62419: POP
62420: GO 62966
// if not tmp then
62422: LD_VAR 0 13
62426: NOT
62427: IFFALSE 62431
// continue ;
62429: GO 62287
// result := true ;
62431: LD_ADDR_VAR 0 8
62435: PUSH
62436: LD_INT 1
62438: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
62439: LD_VAR 0 6
62443: PUSH
62444: LD_VAR 0 13
62448: PPUSH
62449: CALL_OW 247
62453: PUSH
62454: LD_INT 2
62456: EQUAL
62457: AND
62458: PUSH
62459: LD_VAR 0 13
62463: PPUSH
62464: CALL_OW 263
62468: PUSH
62469: LD_INT 1
62471: EQUAL
62472: AND
62473: IFFALSE 62637
// begin if IsDrivenBy ( tmp ) then
62475: LD_VAR 0 13
62479: PPUSH
62480: CALL_OW 311
62484: IFFALSE 62488
// continue ;
62486: GO 62287
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
62488: LD_VAR 0 6
62492: PPUSH
62493: LD_INT 3
62495: PUSH
62496: LD_INT 60
62498: PUSH
62499: EMPTY
62500: LIST
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: PUSH
62506: LD_INT 3
62508: PUSH
62509: LD_INT 55
62511: PUSH
62512: EMPTY
62513: LIST
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: EMPTY
62520: LIST
62521: LIST
62522: PPUSH
62523: CALL_OW 72
62527: IFFALSE 62635
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
62529: LD_ADDR_VAR 0 18
62533: PUSH
62534: LD_VAR 0 6
62538: PPUSH
62539: LD_INT 3
62541: PUSH
62542: LD_INT 60
62544: PUSH
62545: EMPTY
62546: LIST
62547: PUSH
62548: EMPTY
62549: LIST
62550: LIST
62551: PUSH
62552: LD_INT 3
62554: PUSH
62555: LD_INT 55
62557: PUSH
62558: EMPTY
62559: LIST
62560: PUSH
62561: EMPTY
62562: LIST
62563: LIST
62564: PUSH
62565: EMPTY
62566: LIST
62567: LIST
62568: PPUSH
62569: CALL_OW 72
62573: PUSH
62574: LD_INT 1
62576: ARRAY
62577: ST_TO_ADDR
// if IsInUnit ( driver ) then
62578: LD_VAR 0 18
62582: PPUSH
62583: CALL_OW 310
62587: IFFALSE 62598
// ComExit ( driver ) ;
62589: LD_VAR 0 18
62593: PPUSH
62594: CALL 87960 0 1
// AddComEnterUnit ( driver , tmp ) ;
62598: LD_VAR 0 18
62602: PPUSH
62603: LD_VAR 0 13
62607: PPUSH
62608: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
62612: LD_VAR 0 18
62616: PPUSH
62617: LD_VAR 0 7
62621: PPUSH
62622: CALL_OW 173
// AddComExitVehicle ( driver ) ;
62626: LD_VAR 0 18
62630: PPUSH
62631: CALL_OW 181
// end ; continue ;
62635: GO 62287
// end ; if not cleaners or not tmp in cleaners then
62637: LD_VAR 0 6
62641: NOT
62642: PUSH
62643: LD_VAR 0 13
62647: PUSH
62648: LD_VAR 0 6
62652: IN
62653: NOT
62654: OR
62655: IFFALSE 62962
// begin if dep then
62657: LD_VAR 0 17
62661: IFFALSE 62797
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
62663: LD_ADDR_VAR 0 16
62667: PUSH
62668: LD_VAR 0 17
62672: PUSH
62673: LD_INT 1
62675: ARRAY
62676: PPUSH
62677: CALL_OW 250
62681: PPUSH
62682: LD_VAR 0 17
62686: PUSH
62687: LD_INT 1
62689: ARRAY
62690: PPUSH
62691: CALL_OW 254
62695: PPUSH
62696: LD_INT 5
62698: PPUSH
62699: CALL_OW 272
62703: PUSH
62704: LD_VAR 0 17
62708: PUSH
62709: LD_INT 1
62711: ARRAY
62712: PPUSH
62713: CALL_OW 251
62717: PPUSH
62718: LD_VAR 0 17
62722: PUSH
62723: LD_INT 1
62725: ARRAY
62726: PPUSH
62727: CALL_OW 254
62731: PPUSH
62732: LD_INT 5
62734: PPUSH
62735: CALL_OW 273
62739: PUSH
62740: EMPTY
62741: LIST
62742: LIST
62743: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
62744: LD_VAR 0 16
62748: PUSH
62749: LD_INT 1
62751: ARRAY
62752: PPUSH
62753: LD_VAR 0 16
62757: PUSH
62758: LD_INT 2
62760: ARRAY
62761: PPUSH
62762: CALL_OW 488
62766: IFFALSE 62797
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
62768: LD_VAR 0 13
62772: PPUSH
62773: LD_VAR 0 16
62777: PUSH
62778: LD_INT 1
62780: ARRAY
62781: PPUSH
62782: LD_VAR 0 16
62786: PUSH
62787: LD_INT 2
62789: ARRAY
62790: PPUSH
62791: CALL_OW 111
// continue ;
62795: GO 62287
// end ; end ; r := GetDir ( tmp ) ;
62797: LD_ADDR_VAR 0 15
62801: PUSH
62802: LD_VAR 0 13
62806: PPUSH
62807: CALL_OW 254
62811: ST_TO_ADDR
// if r = 5 then
62812: LD_VAR 0 15
62816: PUSH
62817: LD_INT 5
62819: EQUAL
62820: IFFALSE 62830
// r := 0 ;
62822: LD_ADDR_VAR 0 15
62826: PUSH
62827: LD_INT 0
62829: ST_TO_ADDR
// for j = r to 5 do
62830: LD_ADDR_VAR 0 10
62834: PUSH
62835: DOUBLE
62836: LD_VAR 0 15
62840: DEC
62841: ST_TO_ADDR
62842: LD_INT 5
62844: PUSH
62845: FOR_TO
62846: IFFALSE 62960
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
62848: LD_ADDR_VAR 0 11
62852: PUSH
62853: LD_VAR 0 13
62857: PPUSH
62858: CALL_OW 250
62862: PPUSH
62863: LD_VAR 0 10
62867: PPUSH
62868: LD_INT 2
62870: PPUSH
62871: CALL_OW 272
62875: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
62876: LD_ADDR_VAR 0 12
62880: PUSH
62881: LD_VAR 0 13
62885: PPUSH
62886: CALL_OW 251
62890: PPUSH
62891: LD_VAR 0 10
62895: PPUSH
62896: LD_INT 2
62898: PPUSH
62899: CALL_OW 273
62903: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
62904: LD_VAR 0 11
62908: PPUSH
62909: LD_VAR 0 12
62913: PPUSH
62914: CALL_OW 488
62918: PUSH
62919: LD_VAR 0 11
62923: PPUSH
62924: LD_VAR 0 12
62928: PPUSH
62929: CALL_OW 428
62933: NOT
62934: AND
62935: IFFALSE 62958
// begin ComMoveXY ( tmp , _x , _y ) ;
62937: LD_VAR 0 13
62941: PPUSH
62942: LD_VAR 0 11
62946: PPUSH
62947: LD_VAR 0 12
62951: PPUSH
62952: CALL_OW 111
// break ;
62956: GO 62960
// end ; end ;
62958: GO 62845
62960: POP
62961: POP
// end ; end ;
62962: GO 62287
62964: POP
62965: POP
// end ;
62966: LD_VAR 0 8
62970: RET
// export function BuildingTechInvented ( side , btype ) ; begin
62971: LD_INT 0
62973: PPUSH
// result := true ;
62974: LD_ADDR_VAR 0 3
62978: PUSH
62979: LD_INT 1
62981: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
62982: LD_VAR 0 2
62986: PUSH
62987: LD_INT 24
62989: DOUBLE
62990: EQUAL
62991: IFTRUE 63001
62993: LD_INT 33
62995: DOUBLE
62996: EQUAL
62997: IFTRUE 63001
62999: GO 63026
63001: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
63002: LD_ADDR_VAR 0 3
63006: PUSH
63007: LD_INT 32
63009: PPUSH
63010: LD_VAR 0 1
63014: PPUSH
63015: CALL_OW 321
63019: PUSH
63020: LD_INT 2
63022: EQUAL
63023: ST_TO_ADDR
63024: GO 63342
63026: LD_INT 20
63028: DOUBLE
63029: EQUAL
63030: IFTRUE 63034
63032: GO 63059
63034: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
63035: LD_ADDR_VAR 0 3
63039: PUSH
63040: LD_INT 6
63042: PPUSH
63043: LD_VAR 0 1
63047: PPUSH
63048: CALL_OW 321
63052: PUSH
63053: LD_INT 2
63055: EQUAL
63056: ST_TO_ADDR
63057: GO 63342
63059: LD_INT 22
63061: DOUBLE
63062: EQUAL
63063: IFTRUE 63073
63065: LD_INT 36
63067: DOUBLE
63068: EQUAL
63069: IFTRUE 63073
63071: GO 63098
63073: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
63074: LD_ADDR_VAR 0 3
63078: PUSH
63079: LD_INT 15
63081: PPUSH
63082: LD_VAR 0 1
63086: PPUSH
63087: CALL_OW 321
63091: PUSH
63092: LD_INT 2
63094: EQUAL
63095: ST_TO_ADDR
63096: GO 63342
63098: LD_INT 30
63100: DOUBLE
63101: EQUAL
63102: IFTRUE 63106
63104: GO 63131
63106: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
63107: LD_ADDR_VAR 0 3
63111: PUSH
63112: LD_INT 20
63114: PPUSH
63115: LD_VAR 0 1
63119: PPUSH
63120: CALL_OW 321
63124: PUSH
63125: LD_INT 2
63127: EQUAL
63128: ST_TO_ADDR
63129: GO 63342
63131: LD_INT 28
63133: DOUBLE
63134: EQUAL
63135: IFTRUE 63145
63137: LD_INT 21
63139: DOUBLE
63140: EQUAL
63141: IFTRUE 63145
63143: GO 63170
63145: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
63146: LD_ADDR_VAR 0 3
63150: PUSH
63151: LD_INT 21
63153: PPUSH
63154: LD_VAR 0 1
63158: PPUSH
63159: CALL_OW 321
63163: PUSH
63164: LD_INT 2
63166: EQUAL
63167: ST_TO_ADDR
63168: GO 63342
63170: LD_INT 16
63172: DOUBLE
63173: EQUAL
63174: IFTRUE 63178
63176: GO 63203
63178: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
63179: LD_ADDR_VAR 0 3
63183: PUSH
63184: LD_INT 84
63186: PPUSH
63187: LD_VAR 0 1
63191: PPUSH
63192: CALL_OW 321
63196: PUSH
63197: LD_INT 2
63199: EQUAL
63200: ST_TO_ADDR
63201: GO 63342
63203: LD_INT 19
63205: DOUBLE
63206: EQUAL
63207: IFTRUE 63217
63209: LD_INT 23
63211: DOUBLE
63212: EQUAL
63213: IFTRUE 63217
63215: GO 63242
63217: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
63218: LD_ADDR_VAR 0 3
63222: PUSH
63223: LD_INT 83
63225: PPUSH
63226: LD_VAR 0 1
63230: PPUSH
63231: CALL_OW 321
63235: PUSH
63236: LD_INT 2
63238: EQUAL
63239: ST_TO_ADDR
63240: GO 63342
63242: LD_INT 17
63244: DOUBLE
63245: EQUAL
63246: IFTRUE 63250
63248: GO 63275
63250: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
63251: LD_ADDR_VAR 0 3
63255: PUSH
63256: LD_INT 39
63258: PPUSH
63259: LD_VAR 0 1
63263: PPUSH
63264: CALL_OW 321
63268: PUSH
63269: LD_INT 2
63271: EQUAL
63272: ST_TO_ADDR
63273: GO 63342
63275: LD_INT 18
63277: DOUBLE
63278: EQUAL
63279: IFTRUE 63283
63281: GO 63308
63283: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
63284: LD_ADDR_VAR 0 3
63288: PUSH
63289: LD_INT 40
63291: PPUSH
63292: LD_VAR 0 1
63296: PPUSH
63297: CALL_OW 321
63301: PUSH
63302: LD_INT 2
63304: EQUAL
63305: ST_TO_ADDR
63306: GO 63342
63308: LD_INT 27
63310: DOUBLE
63311: EQUAL
63312: IFTRUE 63316
63314: GO 63341
63316: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
63317: LD_ADDR_VAR 0 3
63321: PUSH
63322: LD_INT 35
63324: PPUSH
63325: LD_VAR 0 1
63329: PPUSH
63330: CALL_OW 321
63334: PUSH
63335: LD_INT 2
63337: EQUAL
63338: ST_TO_ADDR
63339: GO 63342
63341: POP
// end ;
63342: LD_VAR 0 3
63346: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
63347: LD_INT 0
63349: PPUSH
63350: PPUSH
63351: PPUSH
63352: PPUSH
63353: PPUSH
63354: PPUSH
63355: PPUSH
63356: PPUSH
63357: PPUSH
63358: PPUSH
63359: PPUSH
// result := false ;
63360: LD_ADDR_VAR 0 6
63364: PUSH
63365: LD_INT 0
63367: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
63368: LD_VAR 0 1
63372: NOT
63373: PUSH
63374: LD_VAR 0 1
63378: PPUSH
63379: CALL_OW 266
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: LD_INT 1
63389: PUSH
63390: EMPTY
63391: LIST
63392: LIST
63393: IN
63394: NOT
63395: OR
63396: PUSH
63397: LD_VAR 0 2
63401: NOT
63402: OR
63403: PUSH
63404: LD_VAR 0 5
63408: PUSH
63409: LD_INT 0
63411: PUSH
63412: LD_INT 1
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: LD_INT 3
63420: PUSH
63421: LD_INT 4
63423: PUSH
63424: LD_INT 5
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: LIST
63431: LIST
63432: LIST
63433: LIST
63434: IN
63435: NOT
63436: OR
63437: PUSH
63438: LD_VAR 0 3
63442: PPUSH
63443: LD_VAR 0 4
63447: PPUSH
63448: CALL_OW 488
63452: NOT
63453: OR
63454: IFFALSE 63458
// exit ;
63456: GO 64194
// side := GetSide ( depot ) ;
63458: LD_ADDR_VAR 0 9
63462: PUSH
63463: LD_VAR 0 1
63467: PPUSH
63468: CALL_OW 255
63472: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
63473: LD_VAR 0 9
63477: PPUSH
63478: LD_VAR 0 2
63482: PPUSH
63483: CALL 62971 0 2
63487: NOT
63488: IFFALSE 63492
// exit ;
63490: GO 64194
// pom := GetBase ( depot ) ;
63492: LD_ADDR_VAR 0 10
63496: PUSH
63497: LD_VAR 0 1
63501: PPUSH
63502: CALL_OW 274
63506: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63507: LD_ADDR_VAR 0 11
63511: PUSH
63512: LD_VAR 0 2
63516: PPUSH
63517: LD_VAR 0 1
63521: PPUSH
63522: CALL_OW 248
63526: PPUSH
63527: CALL_OW 450
63531: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
63532: LD_VAR 0 10
63536: PPUSH
63537: LD_INT 1
63539: PPUSH
63540: CALL_OW 275
63544: PUSH
63545: LD_VAR 0 11
63549: PUSH
63550: LD_INT 1
63552: ARRAY
63553: GREATEREQUAL
63554: PUSH
63555: LD_VAR 0 10
63559: PPUSH
63560: LD_INT 2
63562: PPUSH
63563: CALL_OW 275
63567: PUSH
63568: LD_VAR 0 11
63572: PUSH
63573: LD_INT 2
63575: ARRAY
63576: GREATEREQUAL
63577: AND
63578: PUSH
63579: LD_VAR 0 10
63583: PPUSH
63584: LD_INT 3
63586: PPUSH
63587: CALL_OW 275
63591: PUSH
63592: LD_VAR 0 11
63596: PUSH
63597: LD_INT 3
63599: ARRAY
63600: GREATEREQUAL
63601: AND
63602: NOT
63603: IFFALSE 63607
// exit ;
63605: GO 64194
// if GetBType ( depot ) = b_depot then
63607: LD_VAR 0 1
63611: PPUSH
63612: CALL_OW 266
63616: PUSH
63617: LD_INT 0
63619: EQUAL
63620: IFFALSE 63632
// dist := 28 else
63622: LD_ADDR_VAR 0 14
63626: PUSH
63627: LD_INT 28
63629: ST_TO_ADDR
63630: GO 63640
// dist := 36 ;
63632: LD_ADDR_VAR 0 14
63636: PUSH
63637: LD_INT 36
63639: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
63640: LD_VAR 0 1
63644: PPUSH
63645: LD_VAR 0 3
63649: PPUSH
63650: LD_VAR 0 4
63654: PPUSH
63655: CALL_OW 297
63659: PUSH
63660: LD_VAR 0 14
63664: GREATER
63665: IFFALSE 63669
// exit ;
63667: GO 64194
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
63669: LD_ADDR_VAR 0 12
63673: PUSH
63674: LD_VAR 0 2
63678: PPUSH
63679: LD_VAR 0 3
63683: PPUSH
63684: LD_VAR 0 4
63688: PPUSH
63689: LD_VAR 0 5
63693: PPUSH
63694: LD_VAR 0 1
63698: PPUSH
63699: CALL_OW 248
63703: PPUSH
63704: LD_INT 0
63706: PPUSH
63707: CALL 64199 0 6
63711: ST_TO_ADDR
// if not hexes then
63712: LD_VAR 0 12
63716: NOT
63717: IFFALSE 63721
// exit ;
63719: GO 64194
// hex := GetHexInfo ( x , y ) ;
63721: LD_ADDR_VAR 0 15
63725: PUSH
63726: LD_VAR 0 3
63730: PPUSH
63731: LD_VAR 0 4
63735: PPUSH
63736: CALL_OW 546
63740: ST_TO_ADDR
// if hex [ 1 ] then
63741: LD_VAR 0 15
63745: PUSH
63746: LD_INT 1
63748: ARRAY
63749: IFFALSE 63753
// exit ;
63751: GO 64194
// height := hex [ 2 ] ;
63753: LD_ADDR_VAR 0 13
63757: PUSH
63758: LD_VAR 0 15
63762: PUSH
63763: LD_INT 2
63765: ARRAY
63766: ST_TO_ADDR
// for i = 1 to hexes do
63767: LD_ADDR_VAR 0 7
63771: PUSH
63772: DOUBLE
63773: LD_INT 1
63775: DEC
63776: ST_TO_ADDR
63777: LD_VAR 0 12
63781: PUSH
63782: FOR_TO
63783: IFFALSE 64113
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
63785: LD_VAR 0 12
63789: PUSH
63790: LD_VAR 0 7
63794: ARRAY
63795: PUSH
63796: LD_INT 1
63798: ARRAY
63799: PPUSH
63800: LD_VAR 0 12
63804: PUSH
63805: LD_VAR 0 7
63809: ARRAY
63810: PUSH
63811: LD_INT 2
63813: ARRAY
63814: PPUSH
63815: CALL_OW 488
63819: NOT
63820: PUSH
63821: LD_VAR 0 12
63825: PUSH
63826: LD_VAR 0 7
63830: ARRAY
63831: PUSH
63832: LD_INT 1
63834: ARRAY
63835: PPUSH
63836: LD_VAR 0 12
63840: PUSH
63841: LD_VAR 0 7
63845: ARRAY
63846: PUSH
63847: LD_INT 2
63849: ARRAY
63850: PPUSH
63851: CALL_OW 428
63855: PUSH
63856: LD_INT 0
63858: GREATER
63859: OR
63860: PUSH
63861: LD_VAR 0 12
63865: PUSH
63866: LD_VAR 0 7
63870: ARRAY
63871: PUSH
63872: LD_INT 1
63874: ARRAY
63875: PPUSH
63876: LD_VAR 0 12
63880: PUSH
63881: LD_VAR 0 7
63885: ARRAY
63886: PUSH
63887: LD_INT 2
63889: ARRAY
63890: PPUSH
63891: CALL_OW 351
63895: OR
63896: IFFALSE 63902
// exit ;
63898: POP
63899: POP
63900: GO 64194
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63902: LD_ADDR_VAR 0 8
63906: PUSH
63907: LD_VAR 0 12
63911: PUSH
63912: LD_VAR 0 7
63916: ARRAY
63917: PUSH
63918: LD_INT 1
63920: ARRAY
63921: PPUSH
63922: LD_VAR 0 12
63926: PUSH
63927: LD_VAR 0 7
63931: ARRAY
63932: PUSH
63933: LD_INT 2
63935: ARRAY
63936: PPUSH
63937: CALL_OW 546
63941: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
63942: LD_VAR 0 8
63946: PUSH
63947: LD_INT 1
63949: ARRAY
63950: PUSH
63951: LD_VAR 0 8
63955: PUSH
63956: LD_INT 2
63958: ARRAY
63959: PUSH
63960: LD_VAR 0 13
63964: PUSH
63965: LD_INT 2
63967: PLUS
63968: GREATER
63969: OR
63970: PUSH
63971: LD_VAR 0 8
63975: PUSH
63976: LD_INT 2
63978: ARRAY
63979: PUSH
63980: LD_VAR 0 13
63984: PUSH
63985: LD_INT 2
63987: MINUS
63988: LESS
63989: OR
63990: PUSH
63991: LD_VAR 0 8
63995: PUSH
63996: LD_INT 3
63998: ARRAY
63999: PUSH
64000: LD_INT 0
64002: PUSH
64003: LD_INT 8
64005: PUSH
64006: LD_INT 9
64008: PUSH
64009: LD_INT 10
64011: PUSH
64012: LD_INT 11
64014: PUSH
64015: LD_INT 12
64017: PUSH
64018: LD_INT 13
64020: PUSH
64021: LD_INT 16
64023: PUSH
64024: LD_INT 17
64026: PUSH
64027: LD_INT 18
64029: PUSH
64030: LD_INT 19
64032: PUSH
64033: LD_INT 20
64035: PUSH
64036: LD_INT 21
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: LIST
64043: LIST
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: LIST
64049: LIST
64050: LIST
64051: LIST
64052: LIST
64053: IN
64054: NOT
64055: OR
64056: PUSH
64057: LD_VAR 0 8
64061: PUSH
64062: LD_INT 5
64064: ARRAY
64065: NOT
64066: OR
64067: PUSH
64068: LD_VAR 0 8
64072: PUSH
64073: LD_INT 6
64075: ARRAY
64076: PUSH
64077: LD_INT 1
64079: PUSH
64080: LD_INT 2
64082: PUSH
64083: LD_INT 7
64085: PUSH
64086: LD_INT 9
64088: PUSH
64089: LD_INT 10
64091: PUSH
64092: LD_INT 11
64094: PUSH
64095: EMPTY
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: IN
64103: NOT
64104: OR
64105: IFFALSE 64111
// exit ;
64107: POP
64108: POP
64109: GO 64194
// end ;
64111: GO 63782
64113: POP
64114: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
64115: LD_VAR 0 9
64119: PPUSH
64120: LD_VAR 0 3
64124: PPUSH
64125: LD_VAR 0 4
64129: PPUSH
64130: LD_INT 20
64132: PPUSH
64133: CALL 56146 0 4
64137: PUSH
64138: LD_INT 4
64140: ARRAY
64141: IFFALSE 64145
// exit ;
64143: GO 64194
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
64145: LD_VAR 0 2
64149: PUSH
64150: LD_INT 29
64152: PUSH
64153: LD_INT 30
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: IN
64160: PUSH
64161: LD_VAR 0 3
64165: PPUSH
64166: LD_VAR 0 4
64170: PPUSH
64171: LD_VAR 0 9
64175: PPUSH
64176: CALL_OW 440
64180: NOT
64181: AND
64182: IFFALSE 64186
// exit ;
64184: GO 64194
// result := true ;
64186: LD_ADDR_VAR 0 6
64190: PUSH
64191: LD_INT 1
64193: ST_TO_ADDR
// end ;
64194: LD_VAR 0 6
64198: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
64199: LD_INT 0
64201: PPUSH
64202: PPUSH
64203: PPUSH
64204: PPUSH
64205: PPUSH
64206: PPUSH
64207: PPUSH
64208: PPUSH
64209: PPUSH
64210: PPUSH
64211: PPUSH
64212: PPUSH
64213: PPUSH
64214: PPUSH
64215: PPUSH
64216: PPUSH
64217: PPUSH
64218: PPUSH
64219: PPUSH
64220: PPUSH
64221: PPUSH
64222: PPUSH
64223: PPUSH
64224: PPUSH
64225: PPUSH
64226: PPUSH
64227: PPUSH
64228: PPUSH
64229: PPUSH
64230: PPUSH
64231: PPUSH
64232: PPUSH
64233: PPUSH
64234: PPUSH
64235: PPUSH
64236: PPUSH
64237: PPUSH
64238: PPUSH
64239: PPUSH
64240: PPUSH
64241: PPUSH
64242: PPUSH
64243: PPUSH
64244: PPUSH
64245: PPUSH
64246: PPUSH
64247: PPUSH
64248: PPUSH
64249: PPUSH
64250: PPUSH
64251: PPUSH
64252: PPUSH
64253: PPUSH
64254: PPUSH
64255: PPUSH
64256: PPUSH
64257: PPUSH
64258: PPUSH
// result = [ ] ;
64259: LD_ADDR_VAR 0 7
64263: PUSH
64264: EMPTY
64265: ST_TO_ADDR
// temp_list = [ ] ;
64266: LD_ADDR_VAR 0 9
64270: PUSH
64271: EMPTY
64272: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
64273: LD_VAR 0 4
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: LD_INT 1
64283: PUSH
64284: LD_INT 2
64286: PUSH
64287: LD_INT 3
64289: PUSH
64290: LD_INT 4
64292: PUSH
64293: LD_INT 5
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: LIST
64300: LIST
64301: LIST
64302: LIST
64303: IN
64304: NOT
64305: PUSH
64306: LD_VAR 0 1
64310: PUSH
64311: LD_INT 0
64313: PUSH
64314: LD_INT 1
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: IN
64321: PUSH
64322: LD_VAR 0 5
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: LD_INT 2
64332: PUSH
64333: LD_INT 3
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: LIST
64340: IN
64341: NOT
64342: AND
64343: OR
64344: IFFALSE 64348
// exit ;
64346: GO 82739
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
64348: LD_VAR 0 1
64352: PUSH
64353: LD_INT 6
64355: PUSH
64356: LD_INT 7
64358: PUSH
64359: LD_INT 8
64361: PUSH
64362: LD_INT 13
64364: PUSH
64365: LD_INT 12
64367: PUSH
64368: LD_INT 15
64370: PUSH
64371: LD_INT 11
64373: PUSH
64374: LD_INT 14
64376: PUSH
64377: LD_INT 10
64379: PUSH
64380: EMPTY
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: IN
64391: IFFALSE 64401
// btype = b_lab ;
64393: LD_ADDR_VAR 0 1
64397: PUSH
64398: LD_INT 6
64400: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
64401: LD_VAR 0 6
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: LD_INT 1
64411: PUSH
64412: LD_INT 2
64414: PUSH
64415: EMPTY
64416: LIST
64417: LIST
64418: LIST
64419: IN
64420: NOT
64421: PUSH
64422: LD_VAR 0 1
64426: PUSH
64427: LD_INT 0
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: LD_INT 2
64435: PUSH
64436: LD_INT 3
64438: PUSH
64439: LD_INT 6
64441: PUSH
64442: LD_INT 36
64444: PUSH
64445: LD_INT 4
64447: PUSH
64448: LD_INT 5
64450: PUSH
64451: LD_INT 31
64453: PUSH
64454: LD_INT 32
64456: PUSH
64457: LD_INT 33
64459: PUSH
64460: EMPTY
64461: LIST
64462: LIST
64463: LIST
64464: LIST
64465: LIST
64466: LIST
64467: LIST
64468: LIST
64469: LIST
64470: LIST
64471: LIST
64472: IN
64473: NOT
64474: PUSH
64475: LD_VAR 0 6
64479: PUSH
64480: LD_INT 1
64482: EQUAL
64483: AND
64484: OR
64485: PUSH
64486: LD_VAR 0 1
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: LD_INT 3
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: IN
64501: NOT
64502: PUSH
64503: LD_VAR 0 6
64507: PUSH
64508: LD_INT 2
64510: EQUAL
64511: AND
64512: OR
64513: IFFALSE 64523
// mode = 0 ;
64515: LD_ADDR_VAR 0 6
64519: PUSH
64520: LD_INT 0
64522: ST_TO_ADDR
// case mode of 0 :
64523: LD_VAR 0 6
64527: PUSH
64528: LD_INT 0
64530: DOUBLE
64531: EQUAL
64532: IFTRUE 64536
64534: GO 75989
64536: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64537: LD_ADDR_VAR 0 11
64541: PUSH
64542: LD_INT 0
64544: PUSH
64545: LD_INT 0
64547: PUSH
64548: EMPTY
64549: LIST
64550: LIST
64551: PUSH
64552: LD_INT 0
64554: PUSH
64555: LD_INT 1
64557: NEG
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: PUSH
64563: LD_INT 1
64565: PUSH
64566: LD_INT 0
64568: PUSH
64569: EMPTY
64570: LIST
64571: LIST
64572: PUSH
64573: LD_INT 1
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: EMPTY
64580: LIST
64581: LIST
64582: PUSH
64583: LD_INT 0
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: EMPTY
64590: LIST
64591: LIST
64592: PUSH
64593: LD_INT 1
64595: NEG
64596: PUSH
64597: LD_INT 0
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: PUSH
64604: LD_INT 1
64606: NEG
64607: PUSH
64608: LD_INT 1
64610: NEG
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: LD_INT 2
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 0
64630: PUSH
64631: LD_INT 2
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 1
64641: PUSH
64642: LD_INT 1
64644: NEG
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 1
64652: PUSH
64653: LD_INT 2
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 0
64662: PUSH
64663: LD_INT 2
64665: PUSH
64666: EMPTY
64667: LIST
64668: LIST
64669: PUSH
64670: LD_INT 1
64672: NEG
64673: PUSH
64674: LD_INT 1
64676: PUSH
64677: EMPTY
64678: LIST
64679: LIST
64680: PUSH
64681: LD_INT 1
64683: PUSH
64684: LD_INT 3
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 0
64693: PUSH
64694: LD_INT 3
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: NEG
64704: PUSH
64705: LD_INT 2
64707: PUSH
64708: EMPTY
64709: LIST
64710: LIST
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: LIST
64724: LIST
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64730: LD_ADDR_VAR 0 12
64734: PUSH
64735: LD_INT 0
64737: PUSH
64738: LD_INT 0
64740: PUSH
64741: EMPTY
64742: LIST
64743: LIST
64744: PUSH
64745: LD_INT 0
64747: PUSH
64748: LD_INT 1
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 1
64758: PUSH
64759: LD_INT 0
64761: PUSH
64762: EMPTY
64763: LIST
64764: LIST
64765: PUSH
64766: LD_INT 1
64768: PUSH
64769: LD_INT 1
64771: PUSH
64772: EMPTY
64773: LIST
64774: LIST
64775: PUSH
64776: LD_INT 0
64778: PUSH
64779: LD_INT 1
64781: PUSH
64782: EMPTY
64783: LIST
64784: LIST
64785: PUSH
64786: LD_INT 1
64788: NEG
64789: PUSH
64790: LD_INT 0
64792: PUSH
64793: EMPTY
64794: LIST
64795: LIST
64796: PUSH
64797: LD_INT 1
64799: NEG
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: PUSH
64812: LD_INT 1
64814: NEG
64815: PUSH
64816: EMPTY
64817: LIST
64818: LIST
64819: PUSH
64820: LD_INT 2
64822: PUSH
64823: LD_INT 0
64825: PUSH
64826: EMPTY
64827: LIST
64828: LIST
64829: PUSH
64830: LD_INT 2
64832: PUSH
64833: LD_INT 1
64835: PUSH
64836: EMPTY
64837: LIST
64838: LIST
64839: PUSH
64840: LD_INT 1
64842: NEG
64843: PUSH
64844: LD_INT 1
64846: PUSH
64847: EMPTY
64848: LIST
64849: LIST
64850: PUSH
64851: LD_INT 2
64853: NEG
64854: PUSH
64855: LD_INT 0
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: LD_INT 1
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 2
64876: NEG
64877: PUSH
64878: LD_INT 1
64880: PUSH
64881: EMPTY
64882: LIST
64883: LIST
64884: PUSH
64885: LD_INT 3
64887: NEG
64888: PUSH
64889: LD_INT 0
64891: PUSH
64892: EMPTY
64893: LIST
64894: LIST
64895: PUSH
64896: LD_INT 3
64898: NEG
64899: PUSH
64900: LD_INT 1
64902: NEG
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: LIST
64915: LIST
64916: LIST
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64926: LD_ADDR_VAR 0 13
64930: PUSH
64931: LD_INT 0
64933: PUSH
64934: LD_INT 0
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 0
64943: PUSH
64944: LD_INT 1
64946: NEG
64947: PUSH
64948: EMPTY
64949: LIST
64950: LIST
64951: PUSH
64952: LD_INT 1
64954: PUSH
64955: LD_INT 0
64957: PUSH
64958: EMPTY
64959: LIST
64960: LIST
64961: PUSH
64962: LD_INT 1
64964: PUSH
64965: LD_INT 1
64967: PUSH
64968: EMPTY
64969: LIST
64970: LIST
64971: PUSH
64972: LD_INT 0
64974: PUSH
64975: LD_INT 1
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: NEG
64985: PUSH
64986: LD_INT 0
64988: PUSH
64989: EMPTY
64990: LIST
64991: LIST
64992: PUSH
64993: LD_INT 1
64995: NEG
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: LD_INT 2
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 2
65019: PUSH
65020: LD_INT 1
65022: PUSH
65023: EMPTY
65024: LIST
65025: LIST
65026: PUSH
65027: LD_INT 2
65029: PUSH
65030: LD_INT 2
65032: PUSH
65033: EMPTY
65034: LIST
65035: LIST
65036: PUSH
65037: LD_INT 1
65039: PUSH
65040: LD_INT 2
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 2
65049: NEG
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 2
65061: NEG
65062: PUSH
65063: LD_INT 2
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: LD_INT 3
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 3
65085: NEG
65086: PUSH
65087: LD_INT 2
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 3
65097: NEG
65098: PUSH
65099: LD_INT 3
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: EMPTY
65108: LIST
65109: LIST
65110: LIST
65111: LIST
65112: LIST
65113: LIST
65114: LIST
65115: LIST
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65125: LD_ADDR_VAR 0 14
65129: PUSH
65130: LD_INT 0
65132: PUSH
65133: LD_INT 0
65135: PUSH
65136: EMPTY
65137: LIST
65138: LIST
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: LD_INT 1
65145: NEG
65146: PUSH
65147: EMPTY
65148: LIST
65149: LIST
65150: PUSH
65151: LD_INT 1
65153: PUSH
65154: LD_INT 0
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 1
65163: PUSH
65164: LD_INT 1
65166: PUSH
65167: EMPTY
65168: LIST
65169: LIST
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: LD_INT 1
65176: PUSH
65177: EMPTY
65178: LIST
65179: LIST
65180: PUSH
65181: LD_INT 1
65183: NEG
65184: PUSH
65185: LD_INT 0
65187: PUSH
65188: EMPTY
65189: LIST
65190: LIST
65191: PUSH
65192: LD_INT 1
65194: NEG
65195: PUSH
65196: LD_INT 1
65198: NEG
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: LD_INT 2
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 0
65218: PUSH
65219: LD_INT 2
65221: NEG
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 1
65229: PUSH
65230: LD_INT 1
65232: NEG
65233: PUSH
65234: EMPTY
65235: LIST
65236: LIST
65237: PUSH
65238: LD_INT 1
65240: PUSH
65241: LD_INT 2
65243: PUSH
65244: EMPTY
65245: LIST
65246: LIST
65247: PUSH
65248: LD_INT 0
65250: PUSH
65251: LD_INT 2
65253: PUSH
65254: EMPTY
65255: LIST
65256: LIST
65257: PUSH
65258: LD_INT 1
65260: NEG
65261: PUSH
65262: LD_INT 1
65264: PUSH
65265: EMPTY
65266: LIST
65267: LIST
65268: PUSH
65269: LD_INT 1
65271: NEG
65272: PUSH
65273: LD_INT 3
65275: NEG
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: LD_INT 3
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: LD_INT 1
65294: PUSH
65295: LD_INT 2
65297: NEG
65298: PUSH
65299: EMPTY
65300: LIST
65301: LIST
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: LIST
65310: LIST
65311: LIST
65312: LIST
65313: LIST
65314: LIST
65315: LIST
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65321: LD_ADDR_VAR 0 15
65325: PUSH
65326: LD_INT 0
65328: PUSH
65329: LD_INT 0
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 0
65338: PUSH
65339: LD_INT 1
65341: NEG
65342: PUSH
65343: EMPTY
65344: LIST
65345: LIST
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: LD_INT 0
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: EMPTY
65364: LIST
65365: LIST
65366: PUSH
65367: LD_INT 0
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: NEG
65380: PUSH
65381: LD_INT 0
65383: PUSH
65384: EMPTY
65385: LIST
65386: LIST
65387: PUSH
65388: LD_INT 1
65390: NEG
65391: PUSH
65392: LD_INT 1
65394: NEG
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: PUSH
65403: LD_INT 1
65405: NEG
65406: PUSH
65407: EMPTY
65408: LIST
65409: LIST
65410: PUSH
65411: LD_INT 2
65413: PUSH
65414: LD_INT 0
65416: PUSH
65417: EMPTY
65418: LIST
65419: LIST
65420: PUSH
65421: LD_INT 2
65423: PUSH
65424: LD_INT 1
65426: PUSH
65427: EMPTY
65428: LIST
65429: LIST
65430: PUSH
65431: LD_INT 1
65433: NEG
65434: PUSH
65435: LD_INT 1
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 2
65444: NEG
65445: PUSH
65446: LD_INT 0
65448: PUSH
65449: EMPTY
65450: LIST
65451: LIST
65452: PUSH
65453: LD_INT 2
65455: NEG
65456: PUSH
65457: LD_INT 1
65459: NEG
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 2
65467: PUSH
65468: LD_INT 1
65470: NEG
65471: PUSH
65472: EMPTY
65473: LIST
65474: LIST
65475: PUSH
65476: LD_INT 3
65478: PUSH
65479: LD_INT 0
65481: PUSH
65482: EMPTY
65483: LIST
65484: LIST
65485: PUSH
65486: LD_INT 3
65488: PUSH
65489: LD_INT 1
65491: PUSH
65492: EMPTY
65493: LIST
65494: LIST
65495: PUSH
65496: EMPTY
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: LIST
65506: LIST
65507: LIST
65508: LIST
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65514: LD_ADDR_VAR 0 16
65518: PUSH
65519: LD_INT 0
65521: PUSH
65522: LD_INT 0
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 0
65531: PUSH
65532: LD_INT 1
65534: NEG
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: PUSH
65540: LD_INT 1
65542: PUSH
65543: LD_INT 0
65545: PUSH
65546: EMPTY
65547: LIST
65548: LIST
65549: PUSH
65550: LD_INT 1
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: EMPTY
65557: LIST
65558: LIST
65559: PUSH
65560: LD_INT 0
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: EMPTY
65578: LIST
65579: LIST
65580: PUSH
65581: LD_INT 1
65583: NEG
65584: PUSH
65585: LD_INT 1
65587: NEG
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: LD_INT 2
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 2
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 2
65617: PUSH
65618: LD_INT 2
65620: PUSH
65621: EMPTY
65622: LIST
65623: LIST
65624: PUSH
65625: LD_INT 1
65627: PUSH
65628: LD_INT 2
65630: PUSH
65631: EMPTY
65632: LIST
65633: LIST
65634: PUSH
65635: LD_INT 2
65637: NEG
65638: PUSH
65639: LD_INT 1
65641: NEG
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 2
65649: NEG
65650: PUSH
65651: LD_INT 2
65653: NEG
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 3
65661: PUSH
65662: LD_INT 2
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 3
65671: PUSH
65672: LD_INT 3
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 2
65681: PUSH
65682: LD_INT 3
65684: PUSH
65685: EMPTY
65686: LIST
65687: LIST
65688: PUSH
65689: EMPTY
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: LIST
65699: LIST
65700: LIST
65701: LIST
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65707: LD_ADDR_VAR 0 17
65711: PUSH
65712: LD_INT 0
65714: PUSH
65715: LD_INT 0
65717: PUSH
65718: EMPTY
65719: LIST
65720: LIST
65721: PUSH
65722: LD_INT 0
65724: PUSH
65725: LD_INT 1
65727: NEG
65728: PUSH
65729: EMPTY
65730: LIST
65731: LIST
65732: PUSH
65733: LD_INT 1
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: EMPTY
65740: LIST
65741: LIST
65742: PUSH
65743: LD_INT 1
65745: PUSH
65746: LD_INT 1
65748: PUSH
65749: EMPTY
65750: LIST
65751: LIST
65752: PUSH
65753: LD_INT 0
65755: PUSH
65756: LD_INT 1
65758: PUSH
65759: EMPTY
65760: LIST
65761: LIST
65762: PUSH
65763: LD_INT 1
65765: NEG
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: EMPTY
65771: LIST
65772: LIST
65773: PUSH
65774: LD_INT 1
65776: NEG
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: LD_INT 2
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 0
65800: PUSH
65801: LD_INT 2
65803: NEG
65804: PUSH
65805: EMPTY
65806: LIST
65807: LIST
65808: PUSH
65809: LD_INT 1
65811: PUSH
65812: LD_INT 1
65814: NEG
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 2
65822: PUSH
65823: LD_INT 0
65825: PUSH
65826: EMPTY
65827: LIST
65828: LIST
65829: PUSH
65830: LD_INT 2
65832: PUSH
65833: LD_INT 1
65835: PUSH
65836: EMPTY
65837: LIST
65838: LIST
65839: PUSH
65840: LD_INT 2
65842: PUSH
65843: LD_INT 2
65845: PUSH
65846: EMPTY
65847: LIST
65848: LIST
65849: PUSH
65850: LD_INT 1
65852: PUSH
65853: LD_INT 2
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 0
65862: PUSH
65863: LD_INT 2
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 1
65872: NEG
65873: PUSH
65874: LD_INT 1
65876: PUSH
65877: EMPTY
65878: LIST
65879: LIST
65880: PUSH
65881: LD_INT 2
65883: NEG
65884: PUSH
65885: LD_INT 0
65887: PUSH
65888: EMPTY
65889: LIST
65890: LIST
65891: PUSH
65892: LD_INT 2
65894: NEG
65895: PUSH
65896: LD_INT 1
65898: NEG
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 2
65906: NEG
65907: PUSH
65908: LD_INT 2
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: LIST
65920: LIST
65921: LIST
65922: LIST
65923: LIST
65924: LIST
65925: LIST
65926: LIST
65927: LIST
65928: LIST
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65937: LD_ADDR_VAR 0 18
65941: PUSH
65942: LD_INT 0
65944: PUSH
65945: LD_INT 0
65947: PUSH
65948: EMPTY
65949: LIST
65950: LIST
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: LD_INT 1
65957: NEG
65958: PUSH
65959: EMPTY
65960: LIST
65961: LIST
65962: PUSH
65963: LD_INT 1
65965: PUSH
65966: LD_INT 0
65968: PUSH
65969: EMPTY
65970: LIST
65971: LIST
65972: PUSH
65973: LD_INT 1
65975: PUSH
65976: LD_INT 1
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: LD_INT 1
65988: PUSH
65989: EMPTY
65990: LIST
65991: LIST
65992: PUSH
65993: LD_INT 1
65995: NEG
65996: PUSH
65997: LD_INT 0
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: LD_INT 1
66006: NEG
66007: PUSH
66008: LD_INT 1
66010: NEG
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: LD_INT 2
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 0
66030: PUSH
66031: LD_INT 2
66033: NEG
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: PUSH
66039: LD_INT 1
66041: PUSH
66042: LD_INT 1
66044: NEG
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: LD_INT 2
66052: PUSH
66053: LD_INT 0
66055: PUSH
66056: EMPTY
66057: LIST
66058: LIST
66059: PUSH
66060: LD_INT 2
66062: PUSH
66063: LD_INT 1
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: PUSH
66070: LD_INT 2
66072: PUSH
66073: LD_INT 2
66075: PUSH
66076: EMPTY
66077: LIST
66078: LIST
66079: PUSH
66080: LD_INT 1
66082: PUSH
66083: LD_INT 2
66085: PUSH
66086: EMPTY
66087: LIST
66088: LIST
66089: PUSH
66090: LD_INT 0
66092: PUSH
66093: LD_INT 2
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 1
66102: NEG
66103: PUSH
66104: LD_INT 1
66106: PUSH
66107: EMPTY
66108: LIST
66109: LIST
66110: PUSH
66111: LD_INT 2
66113: NEG
66114: PUSH
66115: LD_INT 0
66117: PUSH
66118: EMPTY
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 2
66124: NEG
66125: PUSH
66126: LD_INT 1
66128: NEG
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 2
66136: NEG
66137: PUSH
66138: LD_INT 2
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: LIST
66150: LIST
66151: LIST
66152: LIST
66153: LIST
66154: LIST
66155: LIST
66156: LIST
66157: LIST
66158: LIST
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66167: LD_ADDR_VAR 0 19
66171: PUSH
66172: LD_INT 0
66174: PUSH
66175: LD_INT 0
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: LD_INT 1
66187: NEG
66188: PUSH
66189: EMPTY
66190: LIST
66191: LIST
66192: PUSH
66193: LD_INT 1
66195: PUSH
66196: LD_INT 0
66198: PUSH
66199: EMPTY
66200: LIST
66201: LIST
66202: PUSH
66203: LD_INT 1
66205: PUSH
66206: LD_INT 1
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: LD_INT 1
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 1
66225: NEG
66226: PUSH
66227: LD_INT 0
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: LD_INT 1
66236: NEG
66237: PUSH
66238: LD_INT 1
66240: NEG
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: NEG
66249: PUSH
66250: LD_INT 2
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 0
66260: PUSH
66261: LD_INT 2
66263: NEG
66264: PUSH
66265: EMPTY
66266: LIST
66267: LIST
66268: PUSH
66269: LD_INT 1
66271: PUSH
66272: LD_INT 1
66274: NEG
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 2
66282: PUSH
66283: LD_INT 0
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 2
66292: PUSH
66293: LD_INT 1
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: PUSH
66300: LD_INT 2
66302: PUSH
66303: LD_INT 2
66305: PUSH
66306: EMPTY
66307: LIST
66308: LIST
66309: PUSH
66310: LD_INT 1
66312: PUSH
66313: LD_INT 2
66315: PUSH
66316: EMPTY
66317: LIST
66318: LIST
66319: PUSH
66320: LD_INT 0
66322: PUSH
66323: LD_INT 2
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 1
66332: NEG
66333: PUSH
66334: LD_INT 1
66336: PUSH
66337: EMPTY
66338: LIST
66339: LIST
66340: PUSH
66341: LD_INT 2
66343: NEG
66344: PUSH
66345: LD_INT 0
66347: PUSH
66348: EMPTY
66349: LIST
66350: LIST
66351: PUSH
66352: LD_INT 2
66354: NEG
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 2
66366: NEG
66367: PUSH
66368: LD_INT 2
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66397: LD_ADDR_VAR 0 20
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 0
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: LD_INT 0
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 1
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: LD_INT 1
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 1
66466: NEG
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: NEG
66479: PUSH
66480: LD_INT 2
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 0
66490: PUSH
66491: LD_INT 2
66493: NEG
66494: PUSH
66495: EMPTY
66496: LIST
66497: LIST
66498: PUSH
66499: LD_INT 1
66501: PUSH
66502: LD_INT 1
66504: NEG
66505: PUSH
66506: EMPTY
66507: LIST
66508: LIST
66509: PUSH
66510: LD_INT 2
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: EMPTY
66517: LIST
66518: LIST
66519: PUSH
66520: LD_INT 2
66522: PUSH
66523: LD_INT 1
66525: PUSH
66526: EMPTY
66527: LIST
66528: LIST
66529: PUSH
66530: LD_INT 2
66532: PUSH
66533: LD_INT 2
66535: PUSH
66536: EMPTY
66537: LIST
66538: LIST
66539: PUSH
66540: LD_INT 1
66542: PUSH
66543: LD_INT 2
66545: PUSH
66546: EMPTY
66547: LIST
66548: LIST
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: LD_INT 2
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 1
66562: NEG
66563: PUSH
66564: LD_INT 1
66566: PUSH
66567: EMPTY
66568: LIST
66569: LIST
66570: PUSH
66571: LD_INT 2
66573: NEG
66574: PUSH
66575: LD_INT 0
66577: PUSH
66578: EMPTY
66579: LIST
66580: LIST
66581: PUSH
66582: LD_INT 2
66584: NEG
66585: PUSH
66586: LD_INT 1
66588: NEG
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 2
66596: NEG
66597: PUSH
66598: LD_INT 2
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66627: LD_ADDR_VAR 0 21
66631: PUSH
66632: LD_INT 0
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: LD_INT 1
66647: NEG
66648: PUSH
66649: EMPTY
66650: LIST
66651: LIST
66652: PUSH
66653: LD_INT 1
66655: PUSH
66656: LD_INT 0
66658: PUSH
66659: EMPTY
66660: LIST
66661: LIST
66662: PUSH
66663: LD_INT 1
66665: PUSH
66666: LD_INT 1
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 0
66675: PUSH
66676: LD_INT 1
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 1
66685: NEG
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: EMPTY
66691: LIST
66692: LIST
66693: PUSH
66694: LD_INT 1
66696: NEG
66697: PUSH
66698: LD_INT 1
66700: NEG
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: LD_INT 2
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 0
66720: PUSH
66721: LD_INT 2
66723: NEG
66724: PUSH
66725: EMPTY
66726: LIST
66727: LIST
66728: PUSH
66729: LD_INT 1
66731: PUSH
66732: LD_INT 1
66734: NEG
66735: PUSH
66736: EMPTY
66737: LIST
66738: LIST
66739: PUSH
66740: LD_INT 2
66742: PUSH
66743: LD_INT 0
66745: PUSH
66746: EMPTY
66747: LIST
66748: LIST
66749: PUSH
66750: LD_INT 2
66752: PUSH
66753: LD_INT 1
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 2
66762: PUSH
66763: LD_INT 2
66765: PUSH
66766: EMPTY
66767: LIST
66768: LIST
66769: PUSH
66770: LD_INT 1
66772: PUSH
66773: LD_INT 2
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 0
66782: PUSH
66783: LD_INT 2
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 1
66792: NEG
66793: PUSH
66794: LD_INT 1
66796: PUSH
66797: EMPTY
66798: LIST
66799: LIST
66800: PUSH
66801: LD_INT 2
66803: NEG
66804: PUSH
66805: LD_INT 0
66807: PUSH
66808: EMPTY
66809: LIST
66810: LIST
66811: PUSH
66812: LD_INT 2
66814: NEG
66815: PUSH
66816: LD_INT 1
66818: NEG
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 2
66826: NEG
66827: PUSH
66828: LD_INT 2
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: LIST
66844: LIST
66845: LIST
66846: LIST
66847: LIST
66848: LIST
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66857: LD_ADDR_VAR 0 22
66861: PUSH
66862: LD_INT 0
66864: PUSH
66865: LD_INT 0
66867: PUSH
66868: EMPTY
66869: LIST
66870: LIST
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: LD_INT 1
66877: NEG
66878: PUSH
66879: EMPTY
66880: LIST
66881: LIST
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: LD_INT 0
66888: PUSH
66889: EMPTY
66890: LIST
66891: LIST
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: LD_INT 1
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 1
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: LD_INT 0
66919: PUSH
66920: EMPTY
66921: LIST
66922: LIST
66923: PUSH
66924: LD_INT 1
66926: NEG
66927: PUSH
66928: LD_INT 1
66930: NEG
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: LD_INT 2
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 0
66950: PUSH
66951: LD_INT 2
66953: NEG
66954: PUSH
66955: EMPTY
66956: LIST
66957: LIST
66958: PUSH
66959: LD_INT 1
66961: PUSH
66962: LD_INT 1
66964: NEG
66965: PUSH
66966: EMPTY
66967: LIST
66968: LIST
66969: PUSH
66970: LD_INT 2
66972: PUSH
66973: LD_INT 0
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 2
66982: PUSH
66983: LD_INT 1
66985: PUSH
66986: EMPTY
66987: LIST
66988: LIST
66989: PUSH
66990: LD_INT 2
66992: PUSH
66993: LD_INT 2
66995: PUSH
66996: EMPTY
66997: LIST
66998: LIST
66999: PUSH
67000: LD_INT 1
67002: PUSH
67003: LD_INT 2
67005: PUSH
67006: EMPTY
67007: LIST
67008: LIST
67009: PUSH
67010: LD_INT 0
67012: PUSH
67013: LD_INT 2
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 1
67022: NEG
67023: PUSH
67024: LD_INT 1
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 2
67033: NEG
67034: PUSH
67035: LD_INT 0
67037: PUSH
67038: EMPTY
67039: LIST
67040: LIST
67041: PUSH
67042: LD_INT 2
67044: NEG
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 2
67056: NEG
67057: PUSH
67058: LD_INT 2
67060: NEG
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: LIST
67070: LIST
67071: LIST
67072: LIST
67073: LIST
67074: LIST
67075: LIST
67076: LIST
67077: LIST
67078: LIST
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67087: LD_ADDR_VAR 0 23
67091: PUSH
67092: LD_INT 0
67094: PUSH
67095: LD_INT 0
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: LD_INT 1
67107: NEG
67108: PUSH
67109: EMPTY
67110: LIST
67111: LIST
67112: PUSH
67113: LD_INT 1
67115: PUSH
67116: LD_INT 0
67118: PUSH
67119: EMPTY
67120: LIST
67121: LIST
67122: PUSH
67123: LD_INT 1
67125: PUSH
67126: LD_INT 1
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 0
67135: PUSH
67136: LD_INT 1
67138: PUSH
67139: EMPTY
67140: LIST
67141: LIST
67142: PUSH
67143: LD_INT 1
67145: NEG
67146: PUSH
67147: LD_INT 0
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: PUSH
67154: LD_INT 1
67156: NEG
67157: PUSH
67158: LD_INT 1
67160: NEG
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 1
67168: NEG
67169: PUSH
67170: LD_INT 2
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 0
67180: PUSH
67181: LD_INT 2
67183: NEG
67184: PUSH
67185: EMPTY
67186: LIST
67187: LIST
67188: PUSH
67189: LD_INT 1
67191: PUSH
67192: LD_INT 1
67194: NEG
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 2
67202: PUSH
67203: LD_INT 0
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 2
67212: PUSH
67213: LD_INT 1
67215: PUSH
67216: EMPTY
67217: LIST
67218: LIST
67219: PUSH
67220: LD_INT 2
67222: PUSH
67223: LD_INT 2
67225: PUSH
67226: EMPTY
67227: LIST
67228: LIST
67229: PUSH
67230: LD_INT 1
67232: PUSH
67233: LD_INT 2
67235: PUSH
67236: EMPTY
67237: LIST
67238: LIST
67239: PUSH
67240: LD_INT 0
67242: PUSH
67243: LD_INT 2
67245: PUSH
67246: EMPTY
67247: LIST
67248: LIST
67249: PUSH
67250: LD_INT 1
67252: NEG
67253: PUSH
67254: LD_INT 1
67256: PUSH
67257: EMPTY
67258: LIST
67259: LIST
67260: PUSH
67261: LD_INT 2
67263: NEG
67264: PUSH
67265: LD_INT 0
67267: PUSH
67268: EMPTY
67269: LIST
67270: LIST
67271: PUSH
67272: LD_INT 2
67274: NEG
67275: PUSH
67276: LD_INT 1
67278: NEG
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 2
67286: NEG
67287: PUSH
67288: LD_INT 2
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 2
67298: NEG
67299: PUSH
67300: LD_INT 3
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: NEG
67311: PUSH
67312: LD_INT 3
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 1
67322: PUSH
67323: LD_INT 2
67325: NEG
67326: PUSH
67327: EMPTY
67328: LIST
67329: LIST
67330: PUSH
67331: LD_INT 2
67333: PUSH
67334: LD_INT 1
67336: NEG
67337: PUSH
67338: EMPTY
67339: LIST
67340: LIST
67341: PUSH
67342: EMPTY
67343: LIST
67344: LIST
67345: LIST
67346: LIST
67347: LIST
67348: LIST
67349: LIST
67350: LIST
67351: LIST
67352: LIST
67353: LIST
67354: LIST
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
67367: LD_ADDR_VAR 0 24
67371: PUSH
67372: LD_INT 0
67374: PUSH
67375: LD_INT 0
67377: PUSH
67378: EMPTY
67379: LIST
67380: LIST
67381: PUSH
67382: LD_INT 0
67384: PUSH
67385: LD_INT 1
67387: NEG
67388: PUSH
67389: EMPTY
67390: LIST
67391: LIST
67392: PUSH
67393: LD_INT 1
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: EMPTY
67400: LIST
67401: LIST
67402: PUSH
67403: LD_INT 1
67405: PUSH
67406: LD_INT 1
67408: PUSH
67409: EMPTY
67410: LIST
67411: LIST
67412: PUSH
67413: LD_INT 0
67415: PUSH
67416: LD_INT 1
67418: PUSH
67419: EMPTY
67420: LIST
67421: LIST
67422: PUSH
67423: LD_INT 1
67425: NEG
67426: PUSH
67427: LD_INT 0
67429: PUSH
67430: EMPTY
67431: LIST
67432: LIST
67433: PUSH
67434: LD_INT 1
67436: NEG
67437: PUSH
67438: LD_INT 1
67440: NEG
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 1
67448: NEG
67449: PUSH
67450: LD_INT 2
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 0
67460: PUSH
67461: LD_INT 2
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 1
67471: PUSH
67472: LD_INT 1
67474: NEG
67475: PUSH
67476: EMPTY
67477: LIST
67478: LIST
67479: PUSH
67480: LD_INT 2
67482: PUSH
67483: LD_INT 0
67485: PUSH
67486: EMPTY
67487: LIST
67488: LIST
67489: PUSH
67490: LD_INT 2
67492: PUSH
67493: LD_INT 1
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: LD_INT 2
67502: PUSH
67503: LD_INT 2
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PUSH
67510: LD_INT 1
67512: PUSH
67513: LD_INT 2
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 0
67522: PUSH
67523: LD_INT 2
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: LD_INT 1
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: NEG
67544: PUSH
67545: LD_INT 0
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 2
67554: NEG
67555: PUSH
67556: LD_INT 1
67558: NEG
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 2
67566: NEG
67567: PUSH
67568: LD_INT 2
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 1
67578: PUSH
67579: LD_INT 2
67581: NEG
67582: PUSH
67583: EMPTY
67584: LIST
67585: LIST
67586: PUSH
67587: LD_INT 2
67589: PUSH
67590: LD_INT 1
67592: NEG
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 3
67600: PUSH
67601: LD_INT 1
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 3
67610: PUSH
67611: LD_INT 2
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: EMPTY
67619: LIST
67620: LIST
67621: LIST
67622: LIST
67623: LIST
67624: LIST
67625: LIST
67626: LIST
67627: LIST
67628: LIST
67629: LIST
67630: LIST
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
67643: LD_ADDR_VAR 0 25
67647: PUSH
67648: LD_INT 0
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 0
67660: PUSH
67661: LD_INT 1
67663: NEG
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 1
67671: PUSH
67672: LD_INT 0
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 1
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: EMPTY
67686: LIST
67687: LIST
67688: PUSH
67689: LD_INT 0
67691: PUSH
67692: LD_INT 1
67694: PUSH
67695: EMPTY
67696: LIST
67697: LIST
67698: PUSH
67699: LD_INT 1
67701: NEG
67702: PUSH
67703: LD_INT 0
67705: PUSH
67706: EMPTY
67707: LIST
67708: LIST
67709: PUSH
67710: LD_INT 1
67712: NEG
67713: PUSH
67714: LD_INT 1
67716: NEG
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 1
67724: NEG
67725: PUSH
67726: LD_INT 2
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 0
67736: PUSH
67737: LD_INT 2
67739: NEG
67740: PUSH
67741: EMPTY
67742: LIST
67743: LIST
67744: PUSH
67745: LD_INT 1
67747: PUSH
67748: LD_INT 1
67750: NEG
67751: PUSH
67752: EMPTY
67753: LIST
67754: LIST
67755: PUSH
67756: LD_INT 2
67758: PUSH
67759: LD_INT 0
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PUSH
67766: LD_INT 2
67768: PUSH
67769: LD_INT 1
67771: PUSH
67772: EMPTY
67773: LIST
67774: LIST
67775: PUSH
67776: LD_INT 2
67778: PUSH
67779: LD_INT 2
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: PUSH
67786: LD_INT 1
67788: PUSH
67789: LD_INT 2
67791: PUSH
67792: EMPTY
67793: LIST
67794: LIST
67795: PUSH
67796: LD_INT 0
67798: PUSH
67799: LD_INT 2
67801: PUSH
67802: EMPTY
67803: LIST
67804: LIST
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: LD_INT 1
67812: PUSH
67813: EMPTY
67814: LIST
67815: LIST
67816: PUSH
67817: LD_INT 2
67819: NEG
67820: PUSH
67821: LD_INT 0
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 2
67830: NEG
67831: PUSH
67832: LD_INT 1
67834: NEG
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 2
67842: NEG
67843: PUSH
67844: LD_INT 2
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 3
67854: PUSH
67855: LD_INT 1
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 3
67864: PUSH
67865: LD_INT 2
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: LD_INT 2
67874: PUSH
67875: LD_INT 3
67877: PUSH
67878: EMPTY
67879: LIST
67880: LIST
67881: PUSH
67882: LD_INT 1
67884: PUSH
67885: LD_INT 3
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: LIST
67896: LIST
67897: LIST
67898: LIST
67899: LIST
67900: LIST
67901: LIST
67902: LIST
67903: LIST
67904: LIST
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67917: LD_ADDR_VAR 0 26
67921: PUSH
67922: LD_INT 0
67924: PUSH
67925: LD_INT 0
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 0
67934: PUSH
67935: LD_INT 1
67937: NEG
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 1
67945: PUSH
67946: LD_INT 0
67948: PUSH
67949: EMPTY
67950: LIST
67951: LIST
67952: PUSH
67953: LD_INT 1
67955: PUSH
67956: LD_INT 1
67958: PUSH
67959: EMPTY
67960: LIST
67961: LIST
67962: PUSH
67963: LD_INT 0
67965: PUSH
67966: LD_INT 1
67968: PUSH
67969: EMPTY
67970: LIST
67971: LIST
67972: PUSH
67973: LD_INT 1
67975: NEG
67976: PUSH
67977: LD_INT 0
67979: PUSH
67980: EMPTY
67981: LIST
67982: LIST
67983: PUSH
67984: LD_INT 1
67986: NEG
67987: PUSH
67988: LD_INT 1
67990: NEG
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 1
67998: NEG
67999: PUSH
68000: LD_INT 2
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 0
68010: PUSH
68011: LD_INT 2
68013: NEG
68014: PUSH
68015: EMPTY
68016: LIST
68017: LIST
68018: PUSH
68019: LD_INT 1
68021: PUSH
68022: LD_INT 1
68024: NEG
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 2
68032: PUSH
68033: LD_INT 0
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 2
68042: PUSH
68043: LD_INT 1
68045: PUSH
68046: EMPTY
68047: LIST
68048: LIST
68049: PUSH
68050: LD_INT 2
68052: PUSH
68053: LD_INT 2
68055: PUSH
68056: EMPTY
68057: LIST
68058: LIST
68059: PUSH
68060: LD_INT 1
68062: PUSH
68063: LD_INT 2
68065: PUSH
68066: EMPTY
68067: LIST
68068: LIST
68069: PUSH
68070: LD_INT 0
68072: PUSH
68073: LD_INT 2
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 1
68082: NEG
68083: PUSH
68084: LD_INT 1
68086: PUSH
68087: EMPTY
68088: LIST
68089: LIST
68090: PUSH
68091: LD_INT 2
68093: NEG
68094: PUSH
68095: LD_INT 0
68097: PUSH
68098: EMPTY
68099: LIST
68100: LIST
68101: PUSH
68102: LD_INT 2
68104: NEG
68105: PUSH
68106: LD_INT 1
68108: NEG
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 2
68116: NEG
68117: PUSH
68118: LD_INT 2
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 2
68128: PUSH
68129: LD_INT 3
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 1
68138: PUSH
68139: LD_INT 3
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 1
68148: NEG
68149: PUSH
68150: LD_INT 2
68152: PUSH
68153: EMPTY
68154: LIST
68155: LIST
68156: PUSH
68157: LD_INT 2
68159: NEG
68160: PUSH
68161: LD_INT 1
68163: PUSH
68164: EMPTY
68165: LIST
68166: LIST
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68193: LD_ADDR_VAR 0 27
68197: PUSH
68198: LD_INT 0
68200: PUSH
68201: LD_INT 0
68203: PUSH
68204: EMPTY
68205: LIST
68206: LIST
68207: PUSH
68208: LD_INT 0
68210: PUSH
68211: LD_INT 1
68213: NEG
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 1
68221: PUSH
68222: LD_INT 0
68224: PUSH
68225: EMPTY
68226: LIST
68227: LIST
68228: PUSH
68229: LD_INT 1
68231: PUSH
68232: LD_INT 1
68234: PUSH
68235: EMPTY
68236: LIST
68237: LIST
68238: PUSH
68239: LD_INT 0
68241: PUSH
68242: LD_INT 1
68244: PUSH
68245: EMPTY
68246: LIST
68247: LIST
68248: PUSH
68249: LD_INT 1
68251: NEG
68252: PUSH
68253: LD_INT 0
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: PUSH
68260: LD_INT 1
68262: NEG
68263: PUSH
68264: LD_INT 1
68266: NEG
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 1
68274: NEG
68275: PUSH
68276: LD_INT 2
68278: NEG
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 0
68286: PUSH
68287: LD_INT 2
68289: NEG
68290: PUSH
68291: EMPTY
68292: LIST
68293: LIST
68294: PUSH
68295: LD_INT 1
68297: PUSH
68298: LD_INT 1
68300: NEG
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 2
68308: PUSH
68309: LD_INT 0
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 2
68318: PUSH
68319: LD_INT 1
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 2
68328: PUSH
68329: LD_INT 2
68331: PUSH
68332: EMPTY
68333: LIST
68334: LIST
68335: PUSH
68336: LD_INT 1
68338: PUSH
68339: LD_INT 2
68341: PUSH
68342: EMPTY
68343: LIST
68344: LIST
68345: PUSH
68346: LD_INT 0
68348: PUSH
68349: LD_INT 2
68351: PUSH
68352: EMPTY
68353: LIST
68354: LIST
68355: PUSH
68356: LD_INT 1
68358: NEG
68359: PUSH
68360: LD_INT 1
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 2
68369: NEG
68370: PUSH
68371: LD_INT 0
68373: PUSH
68374: EMPTY
68375: LIST
68376: LIST
68377: PUSH
68378: LD_INT 2
68380: NEG
68381: PUSH
68382: LD_INT 1
68384: NEG
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 2
68392: NEG
68393: PUSH
68394: LD_INT 2
68396: NEG
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 1
68404: NEG
68405: PUSH
68406: LD_INT 2
68408: PUSH
68409: EMPTY
68410: LIST
68411: LIST
68412: PUSH
68413: LD_INT 2
68415: NEG
68416: PUSH
68417: LD_INT 1
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 3
68426: NEG
68427: PUSH
68428: LD_INT 1
68430: NEG
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 3
68438: NEG
68439: PUSH
68440: LD_INT 2
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: EMPTY
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68473: LD_ADDR_VAR 0 28
68477: PUSH
68478: LD_INT 0
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: EMPTY
68485: LIST
68486: LIST
68487: PUSH
68488: LD_INT 0
68490: PUSH
68491: LD_INT 1
68493: NEG
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 1
68501: PUSH
68502: LD_INT 0
68504: PUSH
68505: EMPTY
68506: LIST
68507: LIST
68508: PUSH
68509: LD_INT 1
68511: PUSH
68512: LD_INT 1
68514: PUSH
68515: EMPTY
68516: LIST
68517: LIST
68518: PUSH
68519: LD_INT 0
68521: PUSH
68522: LD_INT 1
68524: PUSH
68525: EMPTY
68526: LIST
68527: LIST
68528: PUSH
68529: LD_INT 1
68531: NEG
68532: PUSH
68533: LD_INT 0
68535: PUSH
68536: EMPTY
68537: LIST
68538: LIST
68539: PUSH
68540: LD_INT 1
68542: NEG
68543: PUSH
68544: LD_INT 1
68546: NEG
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 1
68554: NEG
68555: PUSH
68556: LD_INT 2
68558: NEG
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 0
68566: PUSH
68567: LD_INT 2
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 1
68577: PUSH
68578: LD_INT 1
68580: NEG
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 2
68588: PUSH
68589: LD_INT 0
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 2
68598: PUSH
68599: LD_INT 1
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 2
68608: PUSH
68609: LD_INT 2
68611: PUSH
68612: EMPTY
68613: LIST
68614: LIST
68615: PUSH
68616: LD_INT 1
68618: PUSH
68619: LD_INT 2
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 0
68628: PUSH
68629: LD_INT 2
68631: PUSH
68632: EMPTY
68633: LIST
68634: LIST
68635: PUSH
68636: LD_INT 1
68638: NEG
68639: PUSH
68640: LD_INT 1
68642: PUSH
68643: EMPTY
68644: LIST
68645: LIST
68646: PUSH
68647: LD_INT 2
68649: NEG
68650: PUSH
68651: LD_INT 0
68653: PUSH
68654: EMPTY
68655: LIST
68656: LIST
68657: PUSH
68658: LD_INT 2
68660: NEG
68661: PUSH
68662: LD_INT 1
68664: NEG
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 2
68672: NEG
68673: PUSH
68674: LD_INT 2
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 2
68684: NEG
68685: PUSH
68686: LD_INT 3
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 1
68696: NEG
68697: PUSH
68698: LD_INT 3
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 3
68708: NEG
68709: PUSH
68710: LD_INT 1
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: NEG
68721: PUSH
68722: LD_INT 2
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: LIST
68734: LIST
68735: LIST
68736: LIST
68737: LIST
68738: LIST
68739: LIST
68740: LIST
68741: LIST
68742: LIST
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68755: LD_ADDR_VAR 0 29
68759: PUSH
68760: LD_INT 0
68762: PUSH
68763: LD_INT 0
68765: PUSH
68766: EMPTY
68767: LIST
68768: LIST
68769: PUSH
68770: LD_INT 0
68772: PUSH
68773: LD_INT 1
68775: NEG
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 1
68783: PUSH
68784: LD_INT 0
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 1
68793: PUSH
68794: LD_INT 1
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 0
68803: PUSH
68804: LD_INT 1
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 1
68813: NEG
68814: PUSH
68815: LD_INT 0
68817: PUSH
68818: EMPTY
68819: LIST
68820: LIST
68821: PUSH
68822: LD_INT 1
68824: NEG
68825: PUSH
68826: LD_INT 1
68828: NEG
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 1
68836: NEG
68837: PUSH
68838: LD_INT 2
68840: NEG
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 0
68848: PUSH
68849: LD_INT 2
68851: NEG
68852: PUSH
68853: EMPTY
68854: LIST
68855: LIST
68856: PUSH
68857: LD_INT 1
68859: PUSH
68860: LD_INT 1
68862: NEG
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: PUSH
68868: LD_INT 2
68870: PUSH
68871: LD_INT 0
68873: PUSH
68874: EMPTY
68875: LIST
68876: LIST
68877: PUSH
68878: LD_INT 2
68880: PUSH
68881: LD_INT 1
68883: PUSH
68884: EMPTY
68885: LIST
68886: LIST
68887: PUSH
68888: LD_INT 1
68890: PUSH
68891: LD_INT 2
68893: PUSH
68894: EMPTY
68895: LIST
68896: LIST
68897: PUSH
68898: LD_INT 0
68900: PUSH
68901: LD_INT 2
68903: PUSH
68904: EMPTY
68905: LIST
68906: LIST
68907: PUSH
68908: LD_INT 1
68910: NEG
68911: PUSH
68912: LD_INT 1
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: PUSH
68919: LD_INT 2
68921: NEG
68922: PUSH
68923: LD_INT 1
68925: NEG
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 2
68933: NEG
68934: PUSH
68935: LD_INT 2
68937: NEG
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 2
68945: NEG
68946: PUSH
68947: LD_INT 3
68949: NEG
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 2
68957: PUSH
68958: LD_INT 1
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 3
68968: PUSH
68969: LD_INT 1
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 1
68978: PUSH
68979: LD_INT 3
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 1
68988: NEG
68989: PUSH
68990: LD_INT 2
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 3
68999: NEG
69000: PUSH
69001: LD_INT 2
69003: NEG
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: EMPTY
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: LIST
69018: LIST
69019: LIST
69020: LIST
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69034: LD_ADDR_VAR 0 30
69038: PUSH
69039: LD_INT 0
69041: PUSH
69042: LD_INT 0
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 0
69051: PUSH
69052: LD_INT 1
69054: NEG
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 1
69062: PUSH
69063: LD_INT 0
69065: PUSH
69066: EMPTY
69067: LIST
69068: LIST
69069: PUSH
69070: LD_INT 1
69072: PUSH
69073: LD_INT 1
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: PUSH
69080: LD_INT 0
69082: PUSH
69083: LD_INT 1
69085: PUSH
69086: EMPTY
69087: LIST
69088: LIST
69089: PUSH
69090: LD_INT 1
69092: NEG
69093: PUSH
69094: LD_INT 0
69096: PUSH
69097: EMPTY
69098: LIST
69099: LIST
69100: PUSH
69101: LD_INT 1
69103: NEG
69104: PUSH
69105: LD_INT 1
69107: NEG
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 1
69115: NEG
69116: PUSH
69117: LD_INT 2
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 0
69127: PUSH
69128: LD_INT 2
69130: NEG
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 1
69138: PUSH
69139: LD_INT 1
69141: NEG
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 2
69149: PUSH
69150: LD_INT 0
69152: PUSH
69153: EMPTY
69154: LIST
69155: LIST
69156: PUSH
69157: LD_INT 2
69159: PUSH
69160: LD_INT 1
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 2
69169: PUSH
69170: LD_INT 2
69172: PUSH
69173: EMPTY
69174: LIST
69175: LIST
69176: PUSH
69177: LD_INT 1
69179: PUSH
69180: LD_INT 2
69182: PUSH
69183: EMPTY
69184: LIST
69185: LIST
69186: PUSH
69187: LD_INT 1
69189: NEG
69190: PUSH
69191: LD_INT 1
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: PUSH
69198: LD_INT 2
69200: NEG
69201: PUSH
69202: LD_INT 0
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 2
69211: NEG
69212: PUSH
69213: LD_INT 1
69215: NEG
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 1
69223: NEG
69224: PUSH
69225: LD_INT 3
69227: NEG
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 1
69235: PUSH
69236: LD_INT 2
69238: NEG
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 3
69246: PUSH
69247: LD_INT 2
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 2
69256: PUSH
69257: LD_INT 3
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 2
69266: NEG
69267: PUSH
69268: LD_INT 1
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 3
69277: NEG
69278: PUSH
69279: LD_INT 1
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: LIST
69291: LIST
69292: LIST
69293: LIST
69294: LIST
69295: LIST
69296: LIST
69297: LIST
69298: LIST
69299: LIST
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69312: LD_ADDR_VAR 0 31
69316: PUSH
69317: LD_INT 0
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: EMPTY
69324: LIST
69325: LIST
69326: PUSH
69327: LD_INT 0
69329: PUSH
69330: LD_INT 1
69332: NEG
69333: PUSH
69334: EMPTY
69335: LIST
69336: LIST
69337: PUSH
69338: LD_INT 1
69340: PUSH
69341: LD_INT 0
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 1
69350: PUSH
69351: LD_INT 1
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 0
69360: PUSH
69361: LD_INT 1
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 1
69370: NEG
69371: PUSH
69372: LD_INT 0
69374: PUSH
69375: EMPTY
69376: LIST
69377: LIST
69378: PUSH
69379: LD_INT 1
69381: NEG
69382: PUSH
69383: LD_INT 1
69385: NEG
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 1
69393: NEG
69394: PUSH
69395: LD_INT 2
69397: NEG
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 1
69405: PUSH
69406: LD_INT 1
69408: NEG
69409: PUSH
69410: EMPTY
69411: LIST
69412: LIST
69413: PUSH
69414: LD_INT 2
69416: PUSH
69417: LD_INT 0
69419: PUSH
69420: EMPTY
69421: LIST
69422: LIST
69423: PUSH
69424: LD_INT 2
69426: PUSH
69427: LD_INT 1
69429: PUSH
69430: EMPTY
69431: LIST
69432: LIST
69433: PUSH
69434: LD_INT 2
69436: PUSH
69437: LD_INT 2
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: PUSH
69444: LD_INT 1
69446: PUSH
69447: LD_INT 2
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 0
69456: PUSH
69457: LD_INT 2
69459: PUSH
69460: EMPTY
69461: LIST
69462: LIST
69463: PUSH
69464: LD_INT 1
69466: NEG
69467: PUSH
69468: LD_INT 1
69470: PUSH
69471: EMPTY
69472: LIST
69473: LIST
69474: PUSH
69475: LD_INT 2
69477: NEG
69478: PUSH
69479: LD_INT 1
69481: NEG
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 2
69489: NEG
69490: PUSH
69491: LD_INT 2
69493: NEG
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 2
69501: NEG
69502: PUSH
69503: LD_INT 3
69505: NEG
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 2
69513: PUSH
69514: LD_INT 1
69516: NEG
69517: PUSH
69518: EMPTY
69519: LIST
69520: LIST
69521: PUSH
69522: LD_INT 3
69524: PUSH
69525: LD_INT 1
69527: PUSH
69528: EMPTY
69529: LIST
69530: LIST
69531: PUSH
69532: LD_INT 1
69534: PUSH
69535: LD_INT 3
69537: PUSH
69538: EMPTY
69539: LIST
69540: LIST
69541: PUSH
69542: LD_INT 1
69544: NEG
69545: PUSH
69546: LD_INT 2
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 3
69555: NEG
69556: PUSH
69557: LD_INT 2
69559: NEG
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: EMPTY
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69590: LD_ADDR_VAR 0 32
69594: PUSH
69595: LD_INT 0
69597: PUSH
69598: LD_INT 0
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 0
69607: PUSH
69608: LD_INT 1
69610: NEG
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 1
69618: PUSH
69619: LD_INT 0
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: LD_INT 1
69628: PUSH
69629: LD_INT 1
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: PUSH
69636: LD_INT 0
69638: PUSH
69639: LD_INT 1
69641: PUSH
69642: EMPTY
69643: LIST
69644: LIST
69645: PUSH
69646: LD_INT 1
69648: NEG
69649: PUSH
69650: LD_INT 0
69652: PUSH
69653: EMPTY
69654: LIST
69655: LIST
69656: PUSH
69657: LD_INT 1
69659: NEG
69660: PUSH
69661: LD_INT 1
69663: NEG
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: PUSH
69673: LD_INT 2
69675: NEG
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 0
69683: PUSH
69684: LD_INT 2
69686: NEG
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 1
69694: PUSH
69695: LD_INT 1
69697: NEG
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 2
69705: PUSH
69706: LD_INT 1
69708: PUSH
69709: EMPTY
69710: LIST
69711: LIST
69712: PUSH
69713: LD_INT 2
69715: PUSH
69716: LD_INT 2
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 1
69725: PUSH
69726: LD_INT 2
69728: PUSH
69729: EMPTY
69730: LIST
69731: LIST
69732: PUSH
69733: LD_INT 0
69735: PUSH
69736: LD_INT 2
69738: PUSH
69739: EMPTY
69740: LIST
69741: LIST
69742: PUSH
69743: LD_INT 1
69745: NEG
69746: PUSH
69747: LD_INT 1
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: PUSH
69754: LD_INT 2
69756: NEG
69757: PUSH
69758: LD_INT 0
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 2
69767: NEG
69768: PUSH
69769: LD_INT 1
69771: NEG
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 1
69779: NEG
69780: PUSH
69781: LD_INT 3
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 1
69791: PUSH
69792: LD_INT 2
69794: NEG
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 3
69802: PUSH
69803: LD_INT 2
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 2
69812: PUSH
69813: LD_INT 3
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 2
69822: NEG
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 3
69833: NEG
69834: PUSH
69835: LD_INT 1
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: LIST
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69868: LD_ADDR_VAR 0 33
69872: PUSH
69873: LD_INT 0
69875: PUSH
69876: LD_INT 0
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: LD_INT 0
69885: PUSH
69886: LD_INT 1
69888: NEG
69889: PUSH
69890: EMPTY
69891: LIST
69892: LIST
69893: PUSH
69894: LD_INT 1
69896: PUSH
69897: LD_INT 0
69899: PUSH
69900: EMPTY
69901: LIST
69902: LIST
69903: PUSH
69904: LD_INT 1
69906: PUSH
69907: LD_INT 1
69909: PUSH
69910: EMPTY
69911: LIST
69912: LIST
69913: PUSH
69914: LD_INT 0
69916: PUSH
69917: LD_INT 1
69919: PUSH
69920: EMPTY
69921: LIST
69922: LIST
69923: PUSH
69924: LD_INT 1
69926: NEG
69927: PUSH
69928: LD_INT 0
69930: PUSH
69931: EMPTY
69932: LIST
69933: LIST
69934: PUSH
69935: LD_INT 1
69937: NEG
69938: PUSH
69939: LD_INT 1
69941: NEG
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: LD_INT 2
69953: NEG
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 1
69961: PUSH
69962: LD_INT 1
69964: NEG
69965: PUSH
69966: EMPTY
69967: LIST
69968: LIST
69969: PUSH
69970: LD_INT 2
69972: PUSH
69973: LD_INT 0
69975: PUSH
69976: EMPTY
69977: LIST
69978: LIST
69979: PUSH
69980: LD_INT 2
69982: PUSH
69983: LD_INT 1
69985: PUSH
69986: EMPTY
69987: LIST
69988: LIST
69989: PUSH
69990: LD_INT 1
69992: PUSH
69993: LD_INT 2
69995: PUSH
69996: EMPTY
69997: LIST
69998: LIST
69999: PUSH
70000: LD_INT 0
70002: PUSH
70003: LD_INT 2
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 1
70012: NEG
70013: PUSH
70014: LD_INT 1
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 2
70023: NEG
70024: PUSH
70025: LD_INT 0
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: PUSH
70032: LD_INT 2
70034: NEG
70035: PUSH
70036: LD_INT 1
70038: NEG
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 2
70046: NEG
70047: PUSH
70048: LD_INT 2
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 2
70058: NEG
70059: PUSH
70060: LD_INT 3
70062: NEG
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 2
70070: PUSH
70071: LD_INT 1
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 3
70081: PUSH
70082: LD_INT 1
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 1
70091: PUSH
70092: LD_INT 3
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 1
70101: NEG
70102: PUSH
70103: LD_INT 2
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 3
70112: NEG
70113: PUSH
70114: LD_INT 2
70116: NEG
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: LIST
70130: LIST
70131: LIST
70132: LIST
70133: LIST
70134: LIST
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70147: LD_ADDR_VAR 0 34
70151: PUSH
70152: LD_INT 0
70154: PUSH
70155: LD_INT 0
70157: PUSH
70158: EMPTY
70159: LIST
70160: LIST
70161: PUSH
70162: LD_INT 0
70164: PUSH
70165: LD_INT 1
70167: NEG
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 1
70175: PUSH
70176: LD_INT 0
70178: PUSH
70179: EMPTY
70180: LIST
70181: LIST
70182: PUSH
70183: LD_INT 1
70185: PUSH
70186: LD_INT 1
70188: PUSH
70189: EMPTY
70190: LIST
70191: LIST
70192: PUSH
70193: LD_INT 0
70195: PUSH
70196: LD_INT 1
70198: PUSH
70199: EMPTY
70200: LIST
70201: LIST
70202: PUSH
70203: LD_INT 1
70205: NEG
70206: PUSH
70207: LD_INT 0
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 1
70216: NEG
70217: PUSH
70218: LD_INT 1
70220: NEG
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 1
70228: NEG
70229: PUSH
70230: LD_INT 2
70232: NEG
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 0
70240: PUSH
70241: LD_INT 2
70243: NEG
70244: PUSH
70245: EMPTY
70246: LIST
70247: LIST
70248: PUSH
70249: LD_INT 1
70251: PUSH
70252: LD_INT 1
70254: NEG
70255: PUSH
70256: EMPTY
70257: LIST
70258: LIST
70259: PUSH
70260: LD_INT 2
70262: PUSH
70263: LD_INT 1
70265: PUSH
70266: EMPTY
70267: LIST
70268: LIST
70269: PUSH
70270: LD_INT 2
70272: PUSH
70273: LD_INT 2
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 1
70282: PUSH
70283: LD_INT 2
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 1
70292: NEG
70293: PUSH
70294: LD_INT 1
70296: PUSH
70297: EMPTY
70298: LIST
70299: LIST
70300: PUSH
70301: LD_INT 2
70303: NEG
70304: PUSH
70305: LD_INT 0
70307: PUSH
70308: EMPTY
70309: LIST
70310: LIST
70311: PUSH
70312: LD_INT 2
70314: NEG
70315: PUSH
70316: LD_INT 1
70318: NEG
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 2
70326: NEG
70327: PUSH
70328: LD_INT 2
70330: NEG
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 1
70338: NEG
70339: PUSH
70340: LD_INT 3
70342: NEG
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 1
70350: PUSH
70351: LD_INT 2
70353: NEG
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 3
70361: PUSH
70362: LD_INT 2
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 2
70371: PUSH
70372: LD_INT 3
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 2
70381: NEG
70382: PUSH
70383: LD_INT 1
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 3
70392: NEG
70393: PUSH
70394: LD_INT 1
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: EMPTY
70403: LIST
70404: LIST
70405: LIST
70406: LIST
70407: LIST
70408: LIST
70409: LIST
70410: LIST
70411: LIST
70412: LIST
70413: LIST
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70427: LD_ADDR_VAR 0 35
70431: PUSH
70432: LD_INT 0
70434: PUSH
70435: LD_INT 0
70437: PUSH
70438: EMPTY
70439: LIST
70440: LIST
70441: PUSH
70442: LD_INT 0
70444: PUSH
70445: LD_INT 1
70447: NEG
70448: PUSH
70449: EMPTY
70450: LIST
70451: LIST
70452: PUSH
70453: LD_INT 1
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 1
70465: PUSH
70466: LD_INT 1
70468: PUSH
70469: EMPTY
70470: LIST
70471: LIST
70472: PUSH
70473: LD_INT 0
70475: PUSH
70476: LD_INT 1
70478: PUSH
70479: EMPTY
70480: LIST
70481: LIST
70482: PUSH
70483: LD_INT 1
70485: NEG
70486: PUSH
70487: LD_INT 0
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 1
70496: NEG
70497: PUSH
70498: LD_INT 1
70500: NEG
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: PUSH
70506: LD_INT 2
70508: PUSH
70509: LD_INT 1
70511: PUSH
70512: EMPTY
70513: LIST
70514: LIST
70515: PUSH
70516: LD_INT 2
70518: NEG
70519: PUSH
70520: LD_INT 1
70522: NEG
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: LIST
70532: LIST
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70539: LD_ADDR_VAR 0 36
70543: PUSH
70544: LD_INT 0
70546: PUSH
70547: LD_INT 0
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: LD_INT 1
70559: NEG
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 1
70567: PUSH
70568: LD_INT 0
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 1
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 0
70587: PUSH
70588: LD_INT 1
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 1
70597: NEG
70598: PUSH
70599: LD_INT 0
70601: PUSH
70602: EMPTY
70603: LIST
70604: LIST
70605: PUSH
70606: LD_INT 1
70608: NEG
70609: PUSH
70610: LD_INT 1
70612: NEG
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 1
70620: NEG
70621: PUSH
70622: LD_INT 2
70624: NEG
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 1
70632: PUSH
70633: LD_INT 2
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70651: LD_ADDR_VAR 0 37
70655: PUSH
70656: LD_INT 0
70658: PUSH
70659: LD_INT 0
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 0
70668: PUSH
70669: LD_INT 1
70671: NEG
70672: PUSH
70673: EMPTY
70674: LIST
70675: LIST
70676: PUSH
70677: LD_INT 1
70679: PUSH
70680: LD_INT 0
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 1
70689: PUSH
70690: LD_INT 1
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 0
70699: PUSH
70700: LD_INT 1
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 1
70709: NEG
70710: PUSH
70711: LD_INT 0
70713: PUSH
70714: EMPTY
70715: LIST
70716: LIST
70717: PUSH
70718: LD_INT 1
70720: NEG
70721: PUSH
70722: LD_INT 1
70724: NEG
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 1
70732: PUSH
70733: LD_INT 1
70735: NEG
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 1
70743: NEG
70744: PUSH
70745: LD_INT 1
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: EMPTY
70753: LIST
70754: LIST
70755: LIST
70756: LIST
70757: LIST
70758: LIST
70759: LIST
70760: LIST
70761: LIST
70762: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70763: LD_ADDR_VAR 0 38
70767: PUSH
70768: LD_INT 0
70770: PUSH
70771: LD_INT 0
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 0
70780: PUSH
70781: LD_INT 1
70783: NEG
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 1
70791: PUSH
70792: LD_INT 0
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 1
70801: PUSH
70802: LD_INT 1
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 0
70811: PUSH
70812: LD_INT 1
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 1
70821: NEG
70822: PUSH
70823: LD_INT 0
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 1
70832: NEG
70833: PUSH
70834: LD_INT 1
70836: NEG
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 2
70844: PUSH
70845: LD_INT 1
70847: PUSH
70848: EMPTY
70849: LIST
70850: LIST
70851: PUSH
70852: LD_INT 2
70854: NEG
70855: PUSH
70856: LD_INT 1
70858: NEG
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: LIST
70868: LIST
70869: LIST
70870: LIST
70871: LIST
70872: LIST
70873: LIST
70874: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70875: LD_ADDR_VAR 0 39
70879: PUSH
70880: LD_INT 0
70882: PUSH
70883: LD_INT 0
70885: PUSH
70886: EMPTY
70887: LIST
70888: LIST
70889: PUSH
70890: LD_INT 0
70892: PUSH
70893: LD_INT 1
70895: NEG
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 1
70903: PUSH
70904: LD_INT 0
70906: PUSH
70907: EMPTY
70908: LIST
70909: LIST
70910: PUSH
70911: LD_INT 1
70913: PUSH
70914: LD_INT 1
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: LD_INT 0
70923: PUSH
70924: LD_INT 1
70926: PUSH
70927: EMPTY
70928: LIST
70929: LIST
70930: PUSH
70931: LD_INT 1
70933: NEG
70934: PUSH
70935: LD_INT 0
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 1
70944: NEG
70945: PUSH
70946: LD_INT 1
70948: NEG
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: NEG
70957: PUSH
70958: LD_INT 2
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 1
70968: PUSH
70969: LD_INT 2
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: LIST
70980: LIST
70981: LIST
70982: LIST
70983: LIST
70984: LIST
70985: LIST
70986: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70987: LD_ADDR_VAR 0 40
70991: PUSH
70992: LD_INT 0
70994: PUSH
70995: LD_INT 0
70997: PUSH
70998: EMPTY
70999: LIST
71000: LIST
71001: PUSH
71002: LD_INT 0
71004: PUSH
71005: LD_INT 1
71007: NEG
71008: PUSH
71009: EMPTY
71010: LIST
71011: LIST
71012: PUSH
71013: LD_INT 1
71015: PUSH
71016: LD_INT 0
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 1
71025: PUSH
71026: LD_INT 1
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 0
71035: PUSH
71036: LD_INT 1
71038: PUSH
71039: EMPTY
71040: LIST
71041: LIST
71042: PUSH
71043: LD_INT 1
71045: NEG
71046: PUSH
71047: LD_INT 0
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 1
71056: NEG
71057: PUSH
71058: LD_INT 1
71060: NEG
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 1
71068: PUSH
71069: LD_INT 1
71071: NEG
71072: PUSH
71073: EMPTY
71074: LIST
71075: LIST
71076: PUSH
71077: LD_INT 1
71079: NEG
71080: PUSH
71081: LD_INT 1
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: LIST
71092: LIST
71093: LIST
71094: LIST
71095: LIST
71096: LIST
71097: LIST
71098: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71099: LD_ADDR_VAR 0 41
71103: PUSH
71104: LD_INT 0
71106: PUSH
71107: LD_INT 0
71109: PUSH
71110: EMPTY
71111: LIST
71112: LIST
71113: PUSH
71114: LD_INT 0
71116: PUSH
71117: LD_INT 1
71119: NEG
71120: PUSH
71121: EMPTY
71122: LIST
71123: LIST
71124: PUSH
71125: LD_INT 1
71127: PUSH
71128: LD_INT 0
71130: PUSH
71131: EMPTY
71132: LIST
71133: LIST
71134: PUSH
71135: LD_INT 1
71137: PUSH
71138: LD_INT 1
71140: PUSH
71141: EMPTY
71142: LIST
71143: LIST
71144: PUSH
71145: LD_INT 0
71147: PUSH
71148: LD_INT 1
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 1
71157: NEG
71158: PUSH
71159: LD_INT 0
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 1
71168: NEG
71169: PUSH
71170: LD_INT 1
71172: NEG
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 1
71180: NEG
71181: PUSH
71182: LD_INT 2
71184: NEG
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 1
71192: PUSH
71193: LD_INT 1
71195: NEG
71196: PUSH
71197: EMPTY
71198: LIST
71199: LIST
71200: PUSH
71201: LD_INT 2
71203: PUSH
71204: LD_INT 0
71206: PUSH
71207: EMPTY
71208: LIST
71209: LIST
71210: PUSH
71211: LD_INT 2
71213: PUSH
71214: LD_INT 1
71216: PUSH
71217: EMPTY
71218: LIST
71219: LIST
71220: PUSH
71221: LD_INT 2
71223: PUSH
71224: LD_INT 2
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 1
71233: PUSH
71234: LD_INT 2
71236: PUSH
71237: EMPTY
71238: LIST
71239: LIST
71240: PUSH
71241: LD_INT 1
71243: NEG
71244: PUSH
71245: LD_INT 1
71247: PUSH
71248: EMPTY
71249: LIST
71250: LIST
71251: PUSH
71252: LD_INT 2
71254: NEG
71255: PUSH
71256: LD_INT 0
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 2
71265: NEG
71266: PUSH
71267: LD_INT 1
71269: NEG
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 2
71277: NEG
71278: PUSH
71279: LD_INT 2
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 2
71289: NEG
71290: PUSH
71291: LD_INT 3
71293: NEG
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 2
71301: PUSH
71302: LD_INT 1
71304: NEG
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 3
71312: PUSH
71313: LD_INT 0
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 3
71322: PUSH
71323: LD_INT 1
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 3
71332: PUSH
71333: LD_INT 2
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 3
71342: PUSH
71343: LD_INT 3
71345: PUSH
71346: EMPTY
71347: LIST
71348: LIST
71349: PUSH
71350: LD_INT 2
71352: PUSH
71353: LD_INT 3
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 2
71362: NEG
71363: PUSH
71364: LD_INT 1
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 3
71373: NEG
71374: PUSH
71375: LD_INT 0
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 3
71384: NEG
71385: PUSH
71386: LD_INT 1
71388: NEG
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 3
71396: NEG
71397: PUSH
71398: LD_INT 2
71400: NEG
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 3
71408: NEG
71409: PUSH
71410: LD_INT 3
71412: NEG
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: LIST
71430: LIST
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71449: LD_ADDR_VAR 0 42
71453: PUSH
71454: LD_INT 0
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 0
71466: PUSH
71467: LD_INT 1
71469: NEG
71470: PUSH
71471: EMPTY
71472: LIST
71473: LIST
71474: PUSH
71475: LD_INT 1
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: EMPTY
71482: LIST
71483: LIST
71484: PUSH
71485: LD_INT 1
71487: PUSH
71488: LD_INT 1
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 0
71497: PUSH
71498: LD_INT 1
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 1
71507: NEG
71508: PUSH
71509: LD_INT 0
71511: PUSH
71512: EMPTY
71513: LIST
71514: LIST
71515: PUSH
71516: LD_INT 1
71518: NEG
71519: PUSH
71520: LD_INT 1
71522: NEG
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 1
71530: NEG
71531: PUSH
71532: LD_INT 2
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 0
71542: PUSH
71543: LD_INT 2
71545: NEG
71546: PUSH
71547: EMPTY
71548: LIST
71549: LIST
71550: PUSH
71551: LD_INT 1
71553: PUSH
71554: LD_INT 1
71556: NEG
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 2
71564: PUSH
71565: LD_INT 1
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 2
71574: PUSH
71575: LD_INT 2
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 1
71584: PUSH
71585: LD_INT 2
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: LD_INT 0
71594: PUSH
71595: LD_INT 2
71597: PUSH
71598: EMPTY
71599: LIST
71600: LIST
71601: PUSH
71602: LD_INT 1
71604: NEG
71605: PUSH
71606: LD_INT 1
71608: PUSH
71609: EMPTY
71610: LIST
71611: LIST
71612: PUSH
71613: LD_INT 2
71615: NEG
71616: PUSH
71617: LD_INT 1
71619: NEG
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 2
71627: NEG
71628: PUSH
71629: LD_INT 2
71631: NEG
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 2
71639: NEG
71640: PUSH
71641: LD_INT 3
71643: NEG
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 1
71651: NEG
71652: PUSH
71653: LD_INT 3
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: LD_INT 3
71666: NEG
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 1
71674: PUSH
71675: LD_INT 2
71677: NEG
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 3
71685: PUSH
71686: LD_INT 2
71688: PUSH
71689: EMPTY
71690: LIST
71691: LIST
71692: PUSH
71693: LD_INT 3
71695: PUSH
71696: LD_INT 3
71698: PUSH
71699: EMPTY
71700: LIST
71701: LIST
71702: PUSH
71703: LD_INT 2
71705: PUSH
71706: LD_INT 3
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 1
71715: PUSH
71716: LD_INT 3
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 0
71725: PUSH
71726: LD_INT 3
71728: PUSH
71729: EMPTY
71730: LIST
71731: LIST
71732: PUSH
71733: LD_INT 1
71735: NEG
71736: PUSH
71737: LD_INT 2
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 3
71746: NEG
71747: PUSH
71748: LD_INT 2
71750: NEG
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: LD_INT 3
71758: NEG
71759: PUSH
71760: LD_INT 3
71762: NEG
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: LIST
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: LIST
71780: LIST
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71799: LD_ADDR_VAR 0 43
71803: PUSH
71804: LD_INT 0
71806: PUSH
71807: LD_INT 0
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: PUSH
71814: LD_INT 0
71816: PUSH
71817: LD_INT 1
71819: NEG
71820: PUSH
71821: EMPTY
71822: LIST
71823: LIST
71824: PUSH
71825: LD_INT 1
71827: PUSH
71828: LD_INT 0
71830: PUSH
71831: EMPTY
71832: LIST
71833: LIST
71834: PUSH
71835: LD_INT 1
71837: PUSH
71838: LD_INT 1
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_INT 0
71847: PUSH
71848: LD_INT 1
71850: PUSH
71851: EMPTY
71852: LIST
71853: LIST
71854: PUSH
71855: LD_INT 1
71857: NEG
71858: PUSH
71859: LD_INT 0
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 1
71868: NEG
71869: PUSH
71870: LD_INT 1
71872: NEG
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 1
71880: NEG
71881: PUSH
71882: LD_INT 2
71884: NEG
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 0
71892: PUSH
71893: LD_INT 2
71895: NEG
71896: PUSH
71897: EMPTY
71898: LIST
71899: LIST
71900: PUSH
71901: LD_INT 1
71903: PUSH
71904: LD_INT 1
71906: NEG
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: LD_INT 2
71914: PUSH
71915: LD_INT 0
71917: PUSH
71918: EMPTY
71919: LIST
71920: LIST
71921: PUSH
71922: LD_INT 2
71924: PUSH
71925: LD_INT 1
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 1
71934: PUSH
71935: LD_INT 2
71937: PUSH
71938: EMPTY
71939: LIST
71940: LIST
71941: PUSH
71942: LD_INT 0
71944: PUSH
71945: LD_INT 2
71947: PUSH
71948: EMPTY
71949: LIST
71950: LIST
71951: PUSH
71952: LD_INT 1
71954: NEG
71955: PUSH
71956: LD_INT 1
71958: PUSH
71959: EMPTY
71960: LIST
71961: LIST
71962: PUSH
71963: LD_INT 2
71965: NEG
71966: PUSH
71967: LD_INT 0
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 2
71976: NEG
71977: PUSH
71978: LD_INT 1
71980: NEG
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: PUSH
71986: LD_INT 1
71988: NEG
71989: PUSH
71990: LD_INT 3
71992: NEG
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 0
72000: PUSH
72001: LD_INT 3
72003: NEG
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 1
72011: PUSH
72012: LD_INT 2
72014: NEG
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 2
72022: PUSH
72023: LD_INT 1
72025: NEG
72026: PUSH
72027: EMPTY
72028: LIST
72029: LIST
72030: PUSH
72031: LD_INT 3
72033: PUSH
72034: LD_INT 0
72036: PUSH
72037: EMPTY
72038: LIST
72039: LIST
72040: PUSH
72041: LD_INT 3
72043: PUSH
72044: LD_INT 1
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 1
72053: PUSH
72054: LD_INT 3
72056: PUSH
72057: EMPTY
72058: LIST
72059: LIST
72060: PUSH
72061: LD_INT 0
72063: PUSH
72064: LD_INT 3
72066: PUSH
72067: EMPTY
72068: LIST
72069: LIST
72070: PUSH
72071: LD_INT 1
72073: NEG
72074: PUSH
72075: LD_INT 2
72077: PUSH
72078: EMPTY
72079: LIST
72080: LIST
72081: PUSH
72082: LD_INT 2
72084: NEG
72085: PUSH
72086: LD_INT 1
72088: PUSH
72089: EMPTY
72090: LIST
72091: LIST
72092: PUSH
72093: LD_INT 3
72095: NEG
72096: PUSH
72097: LD_INT 0
72099: PUSH
72100: EMPTY
72101: LIST
72102: LIST
72103: PUSH
72104: LD_INT 3
72106: NEG
72107: PUSH
72108: LD_INT 1
72110: NEG
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: LIST
72120: LIST
72121: LIST
72122: LIST
72123: LIST
72124: LIST
72125: LIST
72126: LIST
72127: LIST
72128: LIST
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72147: LD_ADDR_VAR 0 44
72151: PUSH
72152: LD_INT 0
72154: PUSH
72155: LD_INT 0
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 0
72164: PUSH
72165: LD_INT 1
72167: NEG
72168: PUSH
72169: EMPTY
72170: LIST
72171: LIST
72172: PUSH
72173: LD_INT 1
72175: PUSH
72176: LD_INT 0
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: LD_INT 1
72185: PUSH
72186: LD_INT 1
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 0
72195: PUSH
72196: LD_INT 1
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 1
72205: NEG
72206: PUSH
72207: LD_INT 0
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 1
72216: NEG
72217: PUSH
72218: LD_INT 1
72220: NEG
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 1
72228: NEG
72229: PUSH
72230: LD_INT 2
72232: NEG
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 1
72240: PUSH
72241: LD_INT 1
72243: NEG
72244: PUSH
72245: EMPTY
72246: LIST
72247: LIST
72248: PUSH
72249: LD_INT 2
72251: PUSH
72252: LD_INT 0
72254: PUSH
72255: EMPTY
72256: LIST
72257: LIST
72258: PUSH
72259: LD_INT 2
72261: PUSH
72262: LD_INT 1
72264: PUSH
72265: EMPTY
72266: LIST
72267: LIST
72268: PUSH
72269: LD_INT 2
72271: PUSH
72272: LD_INT 2
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 1
72281: PUSH
72282: LD_INT 2
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 1
72291: NEG
72292: PUSH
72293: LD_INT 1
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 2
72302: NEG
72303: PUSH
72304: LD_INT 0
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 2
72313: NEG
72314: PUSH
72315: LD_INT 1
72317: NEG
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 2
72325: NEG
72326: PUSH
72327: LD_INT 2
72329: NEG
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 2
72337: NEG
72338: PUSH
72339: LD_INT 3
72341: NEG
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: PUSH
72347: LD_INT 2
72349: PUSH
72350: LD_INT 1
72352: NEG
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 3
72360: PUSH
72361: LD_INT 0
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 3
72370: PUSH
72371: LD_INT 1
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 3
72380: PUSH
72381: LD_INT 2
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 3
72390: PUSH
72391: LD_INT 3
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 2
72400: PUSH
72401: LD_INT 3
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 2
72410: NEG
72411: PUSH
72412: LD_INT 1
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 3
72421: NEG
72422: PUSH
72423: LD_INT 0
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 3
72432: NEG
72433: PUSH
72434: LD_INT 1
72436: NEG
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 3
72444: NEG
72445: PUSH
72446: LD_INT 2
72448: NEG
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 3
72456: NEG
72457: PUSH
72458: LD_INT 3
72460: NEG
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: LIST
72470: LIST
72471: LIST
72472: LIST
72473: LIST
72474: LIST
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72497: LD_ADDR_VAR 0 45
72501: PUSH
72502: LD_INT 0
72504: PUSH
72505: LD_INT 0
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: PUSH
72512: LD_INT 0
72514: PUSH
72515: LD_INT 1
72517: NEG
72518: PUSH
72519: EMPTY
72520: LIST
72521: LIST
72522: PUSH
72523: LD_INT 1
72525: PUSH
72526: LD_INT 0
72528: PUSH
72529: EMPTY
72530: LIST
72531: LIST
72532: PUSH
72533: LD_INT 1
72535: PUSH
72536: LD_INT 1
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 0
72545: PUSH
72546: LD_INT 1
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 1
72555: NEG
72556: PUSH
72557: LD_INT 0
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 1
72566: NEG
72567: PUSH
72568: LD_INT 1
72570: NEG
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 1
72578: NEG
72579: PUSH
72580: LD_INT 2
72582: NEG
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 0
72590: PUSH
72591: LD_INT 2
72593: NEG
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: LD_INT 1
72601: PUSH
72602: LD_INT 1
72604: NEG
72605: PUSH
72606: EMPTY
72607: LIST
72608: LIST
72609: PUSH
72610: LD_INT 2
72612: PUSH
72613: LD_INT 1
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: PUSH
72620: LD_INT 2
72622: PUSH
72623: LD_INT 2
72625: PUSH
72626: EMPTY
72627: LIST
72628: LIST
72629: PUSH
72630: LD_INT 1
72632: PUSH
72633: LD_INT 2
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: LD_INT 0
72642: PUSH
72643: LD_INT 2
72645: PUSH
72646: EMPTY
72647: LIST
72648: LIST
72649: PUSH
72650: LD_INT 1
72652: NEG
72653: PUSH
72654: LD_INT 1
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 2
72663: NEG
72664: PUSH
72665: LD_INT 1
72667: NEG
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 2
72675: NEG
72676: PUSH
72677: LD_INT 2
72679: NEG
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 2
72687: NEG
72688: PUSH
72689: LD_INT 3
72691: NEG
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 1
72699: NEG
72700: PUSH
72701: LD_INT 3
72703: NEG
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 0
72711: PUSH
72712: LD_INT 3
72714: NEG
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 1
72722: PUSH
72723: LD_INT 2
72725: NEG
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 3
72733: PUSH
72734: LD_INT 2
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 3
72743: PUSH
72744: LD_INT 3
72746: PUSH
72747: EMPTY
72748: LIST
72749: LIST
72750: PUSH
72751: LD_INT 2
72753: PUSH
72754: LD_INT 3
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: PUSH
72761: LD_INT 1
72763: PUSH
72764: LD_INT 3
72766: PUSH
72767: EMPTY
72768: LIST
72769: LIST
72770: PUSH
72771: LD_INT 0
72773: PUSH
72774: LD_INT 3
72776: PUSH
72777: EMPTY
72778: LIST
72779: LIST
72780: PUSH
72781: LD_INT 1
72783: NEG
72784: PUSH
72785: LD_INT 2
72787: PUSH
72788: EMPTY
72789: LIST
72790: LIST
72791: PUSH
72792: LD_INT 3
72794: NEG
72795: PUSH
72796: LD_INT 2
72798: NEG
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: LD_INT 3
72806: NEG
72807: PUSH
72808: LD_INT 3
72810: NEG
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: LIST
72820: LIST
72821: LIST
72822: LIST
72823: LIST
72824: LIST
72825: LIST
72826: LIST
72827: LIST
72828: LIST
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72847: LD_ADDR_VAR 0 46
72851: PUSH
72852: LD_INT 0
72854: PUSH
72855: LD_INT 0
72857: PUSH
72858: EMPTY
72859: LIST
72860: LIST
72861: PUSH
72862: LD_INT 0
72864: PUSH
72865: LD_INT 1
72867: NEG
72868: PUSH
72869: EMPTY
72870: LIST
72871: LIST
72872: PUSH
72873: LD_INT 1
72875: PUSH
72876: LD_INT 0
72878: PUSH
72879: EMPTY
72880: LIST
72881: LIST
72882: PUSH
72883: LD_INT 1
72885: PUSH
72886: LD_INT 1
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 0
72895: PUSH
72896: LD_INT 1
72898: PUSH
72899: EMPTY
72900: LIST
72901: LIST
72902: PUSH
72903: LD_INT 1
72905: NEG
72906: PUSH
72907: LD_INT 0
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: PUSH
72914: LD_INT 1
72916: NEG
72917: PUSH
72918: LD_INT 1
72920: NEG
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 1
72928: NEG
72929: PUSH
72930: LD_INT 2
72932: NEG
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 0
72940: PUSH
72941: LD_INT 2
72943: NEG
72944: PUSH
72945: EMPTY
72946: LIST
72947: LIST
72948: PUSH
72949: LD_INT 1
72951: PUSH
72952: LD_INT 1
72954: NEG
72955: PUSH
72956: EMPTY
72957: LIST
72958: LIST
72959: PUSH
72960: LD_INT 2
72962: PUSH
72963: LD_INT 0
72965: PUSH
72966: EMPTY
72967: LIST
72968: LIST
72969: PUSH
72970: LD_INT 2
72972: PUSH
72973: LD_INT 1
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: PUSH
72980: LD_INT 1
72982: PUSH
72983: LD_INT 2
72985: PUSH
72986: EMPTY
72987: LIST
72988: LIST
72989: PUSH
72990: LD_INT 0
72992: PUSH
72993: LD_INT 2
72995: PUSH
72996: EMPTY
72997: LIST
72998: LIST
72999: PUSH
73000: LD_INT 1
73002: NEG
73003: PUSH
73004: LD_INT 1
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 2
73013: NEG
73014: PUSH
73015: LD_INT 0
73017: PUSH
73018: EMPTY
73019: LIST
73020: LIST
73021: PUSH
73022: LD_INT 2
73024: NEG
73025: PUSH
73026: LD_INT 1
73028: NEG
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: PUSH
73034: LD_INT 1
73036: NEG
73037: PUSH
73038: LD_INT 3
73040: NEG
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 0
73048: PUSH
73049: LD_INT 3
73051: NEG
73052: PUSH
73053: EMPTY
73054: LIST
73055: LIST
73056: PUSH
73057: LD_INT 1
73059: PUSH
73060: LD_INT 2
73062: NEG
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: LD_INT 2
73070: PUSH
73071: LD_INT 1
73073: NEG
73074: PUSH
73075: EMPTY
73076: LIST
73077: LIST
73078: PUSH
73079: LD_INT 3
73081: PUSH
73082: LD_INT 0
73084: PUSH
73085: EMPTY
73086: LIST
73087: LIST
73088: PUSH
73089: LD_INT 3
73091: PUSH
73092: LD_INT 1
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 1
73101: PUSH
73102: LD_INT 3
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 0
73111: PUSH
73112: LD_INT 3
73114: PUSH
73115: EMPTY
73116: LIST
73117: LIST
73118: PUSH
73119: LD_INT 1
73121: NEG
73122: PUSH
73123: LD_INT 2
73125: PUSH
73126: EMPTY
73127: LIST
73128: LIST
73129: PUSH
73130: LD_INT 2
73132: NEG
73133: PUSH
73134: LD_INT 1
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 3
73143: NEG
73144: PUSH
73145: LD_INT 0
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 3
73154: NEG
73155: PUSH
73156: LD_INT 1
73158: NEG
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73195: LD_ADDR_VAR 0 47
73199: PUSH
73200: LD_INT 0
73202: PUSH
73203: LD_INT 0
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 0
73212: PUSH
73213: LD_INT 1
73215: NEG
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 1
73223: PUSH
73224: LD_INT 0
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 1
73233: PUSH
73234: LD_INT 1
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 0
73243: PUSH
73244: LD_INT 1
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 1
73253: NEG
73254: PUSH
73255: LD_INT 0
73257: PUSH
73258: EMPTY
73259: LIST
73260: LIST
73261: PUSH
73262: LD_INT 1
73264: NEG
73265: PUSH
73266: LD_INT 1
73268: NEG
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 1
73276: NEG
73277: PUSH
73278: LD_INT 2
73280: NEG
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 0
73288: PUSH
73289: LD_INT 2
73291: NEG
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: LD_INT 1
73299: PUSH
73300: LD_INT 1
73302: NEG
73303: PUSH
73304: EMPTY
73305: LIST
73306: LIST
73307: PUSH
73308: LD_INT 2
73310: NEG
73311: PUSH
73312: LD_INT 1
73314: NEG
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 2
73322: NEG
73323: PUSH
73324: LD_INT 2
73326: NEG
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: LIST
73338: LIST
73339: LIST
73340: LIST
73341: LIST
73342: LIST
73343: LIST
73344: LIST
73345: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73346: LD_ADDR_VAR 0 48
73350: PUSH
73351: LD_INT 0
73353: PUSH
73354: LD_INT 0
73356: PUSH
73357: EMPTY
73358: LIST
73359: LIST
73360: PUSH
73361: LD_INT 0
73363: PUSH
73364: LD_INT 1
73366: NEG
73367: PUSH
73368: EMPTY
73369: LIST
73370: LIST
73371: PUSH
73372: LD_INT 1
73374: PUSH
73375: LD_INT 0
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: PUSH
73382: LD_INT 1
73384: PUSH
73385: LD_INT 1
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 0
73394: PUSH
73395: LD_INT 1
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 1
73404: NEG
73405: PUSH
73406: LD_INT 0
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PUSH
73413: LD_INT 1
73415: NEG
73416: PUSH
73417: LD_INT 1
73419: NEG
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: PUSH
73425: LD_INT 1
73427: NEG
73428: PUSH
73429: LD_INT 2
73431: NEG
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PUSH
73437: LD_INT 0
73439: PUSH
73440: LD_INT 2
73442: NEG
73443: PUSH
73444: EMPTY
73445: LIST
73446: LIST
73447: PUSH
73448: LD_INT 1
73450: PUSH
73451: LD_INT 1
73453: NEG
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: LD_INT 2
73461: PUSH
73462: LD_INT 0
73464: PUSH
73465: EMPTY
73466: LIST
73467: LIST
73468: PUSH
73469: LD_INT 2
73471: PUSH
73472: LD_INT 1
73474: PUSH
73475: EMPTY
73476: LIST
73477: LIST
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: LIST
73483: LIST
73484: LIST
73485: LIST
73486: LIST
73487: LIST
73488: LIST
73489: LIST
73490: LIST
73491: LIST
73492: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73493: LD_ADDR_VAR 0 49
73497: PUSH
73498: LD_INT 0
73500: PUSH
73501: LD_INT 0
73503: PUSH
73504: EMPTY
73505: LIST
73506: LIST
73507: PUSH
73508: LD_INT 0
73510: PUSH
73511: LD_INT 1
73513: NEG
73514: PUSH
73515: EMPTY
73516: LIST
73517: LIST
73518: PUSH
73519: LD_INT 1
73521: PUSH
73522: LD_INT 0
73524: PUSH
73525: EMPTY
73526: LIST
73527: LIST
73528: PUSH
73529: LD_INT 1
73531: PUSH
73532: LD_INT 1
73534: PUSH
73535: EMPTY
73536: LIST
73537: LIST
73538: PUSH
73539: LD_INT 0
73541: PUSH
73542: LD_INT 1
73544: PUSH
73545: EMPTY
73546: LIST
73547: LIST
73548: PUSH
73549: LD_INT 1
73551: NEG
73552: PUSH
73553: LD_INT 0
73555: PUSH
73556: EMPTY
73557: LIST
73558: LIST
73559: PUSH
73560: LD_INT 1
73562: NEG
73563: PUSH
73564: LD_INT 1
73566: NEG
73567: PUSH
73568: EMPTY
73569: LIST
73570: LIST
73571: PUSH
73572: LD_INT 1
73574: PUSH
73575: LD_INT 1
73577: NEG
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 2
73585: PUSH
73586: LD_INT 0
73588: PUSH
73589: EMPTY
73590: LIST
73591: LIST
73592: PUSH
73593: LD_INT 2
73595: PUSH
73596: LD_INT 1
73598: PUSH
73599: EMPTY
73600: LIST
73601: LIST
73602: PUSH
73603: LD_INT 2
73605: PUSH
73606: LD_INT 2
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PUSH
73613: LD_INT 1
73615: PUSH
73616: LD_INT 2
73618: PUSH
73619: EMPTY
73620: LIST
73621: LIST
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73637: LD_ADDR_VAR 0 50
73641: PUSH
73642: LD_INT 0
73644: PUSH
73645: LD_INT 0
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 0
73654: PUSH
73655: LD_INT 1
73657: NEG
73658: PUSH
73659: EMPTY
73660: LIST
73661: LIST
73662: PUSH
73663: LD_INT 1
73665: PUSH
73666: LD_INT 0
73668: PUSH
73669: EMPTY
73670: LIST
73671: LIST
73672: PUSH
73673: LD_INT 1
73675: PUSH
73676: LD_INT 1
73678: PUSH
73679: EMPTY
73680: LIST
73681: LIST
73682: PUSH
73683: LD_INT 0
73685: PUSH
73686: LD_INT 1
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 1
73695: NEG
73696: PUSH
73697: LD_INT 0
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 1
73706: NEG
73707: PUSH
73708: LD_INT 1
73710: NEG
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 2
73718: PUSH
73719: LD_INT 1
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: LD_INT 2
73728: PUSH
73729: LD_INT 2
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: PUSH
73736: LD_INT 1
73738: PUSH
73739: LD_INT 2
73741: PUSH
73742: EMPTY
73743: LIST
73744: LIST
73745: PUSH
73746: LD_INT 0
73748: PUSH
73749: LD_INT 2
73751: PUSH
73752: EMPTY
73753: LIST
73754: LIST
73755: PUSH
73756: LD_INT 1
73758: NEG
73759: PUSH
73760: LD_INT 1
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PUSH
73767: EMPTY
73768: LIST
73769: LIST
73770: LIST
73771: LIST
73772: LIST
73773: LIST
73774: LIST
73775: LIST
73776: LIST
73777: LIST
73778: LIST
73779: LIST
73780: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73781: LD_ADDR_VAR 0 51
73785: PUSH
73786: LD_INT 0
73788: PUSH
73789: LD_INT 0
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 0
73798: PUSH
73799: LD_INT 1
73801: NEG
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: LD_INT 1
73809: PUSH
73810: LD_INT 0
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: LD_INT 1
73819: PUSH
73820: LD_INT 1
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 0
73829: PUSH
73830: LD_INT 1
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 1
73839: NEG
73840: PUSH
73841: LD_INT 0
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: PUSH
73848: LD_INT 1
73850: NEG
73851: PUSH
73852: LD_INT 1
73854: NEG
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 1
73862: PUSH
73863: LD_INT 2
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: PUSH
73870: LD_INT 0
73872: PUSH
73873: LD_INT 2
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: PUSH
73880: LD_INT 1
73882: NEG
73883: PUSH
73884: LD_INT 1
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: PUSH
73891: LD_INT 2
73893: NEG
73894: PUSH
73895: LD_INT 0
73897: PUSH
73898: EMPTY
73899: LIST
73900: LIST
73901: PUSH
73902: LD_INT 2
73904: NEG
73905: PUSH
73906: LD_INT 1
73908: NEG
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73928: LD_ADDR_VAR 0 52
73932: PUSH
73933: LD_INT 0
73935: PUSH
73936: LD_INT 0
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: PUSH
73943: LD_INT 0
73945: PUSH
73946: LD_INT 1
73948: NEG
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: LD_INT 1
73956: PUSH
73957: LD_INT 0
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: PUSH
73964: LD_INT 1
73966: PUSH
73967: LD_INT 1
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: PUSH
73974: LD_INT 0
73976: PUSH
73977: LD_INT 1
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: PUSH
73984: LD_INT 1
73986: NEG
73987: PUSH
73988: LD_INT 0
73990: PUSH
73991: EMPTY
73992: LIST
73993: LIST
73994: PUSH
73995: LD_INT 1
73997: NEG
73998: PUSH
73999: LD_INT 1
74001: NEG
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 1
74009: NEG
74010: PUSH
74011: LD_INT 2
74013: NEG
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 1
74021: NEG
74022: PUSH
74023: LD_INT 1
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: LD_INT 2
74032: NEG
74033: PUSH
74034: LD_INT 0
74036: PUSH
74037: EMPTY
74038: LIST
74039: LIST
74040: PUSH
74041: LD_INT 2
74043: NEG
74044: PUSH
74045: LD_INT 1
74047: NEG
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_INT 2
74055: NEG
74056: PUSH
74057: LD_INT 2
74059: NEG
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: LIST
74069: LIST
74070: LIST
74071: LIST
74072: LIST
74073: LIST
74074: LIST
74075: LIST
74076: LIST
74077: LIST
74078: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74079: LD_ADDR_VAR 0 53
74083: PUSH
74084: LD_INT 0
74086: PUSH
74087: LD_INT 0
74089: PUSH
74090: EMPTY
74091: LIST
74092: LIST
74093: PUSH
74094: LD_INT 0
74096: PUSH
74097: LD_INT 1
74099: NEG
74100: PUSH
74101: EMPTY
74102: LIST
74103: LIST
74104: PUSH
74105: LD_INT 1
74107: PUSH
74108: LD_INT 0
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: PUSH
74115: LD_INT 1
74117: PUSH
74118: LD_INT 1
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PUSH
74125: LD_INT 0
74127: PUSH
74128: LD_INT 1
74130: PUSH
74131: EMPTY
74132: LIST
74133: LIST
74134: PUSH
74135: LD_INT 1
74137: NEG
74138: PUSH
74139: LD_INT 0
74141: PUSH
74142: EMPTY
74143: LIST
74144: LIST
74145: PUSH
74146: LD_INT 1
74148: NEG
74149: PUSH
74150: LD_INT 1
74152: NEG
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 1
74160: NEG
74161: PUSH
74162: LD_INT 2
74164: NEG
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: LD_INT 0
74172: PUSH
74173: LD_INT 2
74175: NEG
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: PUSH
74181: LD_INT 1
74183: PUSH
74184: LD_INT 1
74186: NEG
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: LD_INT 2
74194: PUSH
74195: LD_INT 0
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 2
74204: PUSH
74205: LD_INT 1
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: LD_INT 2
74214: PUSH
74215: LD_INT 2
74217: PUSH
74218: EMPTY
74219: LIST
74220: LIST
74221: PUSH
74222: LD_INT 1
74224: PUSH
74225: LD_INT 2
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 0
74234: PUSH
74235: LD_INT 2
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: LD_INT 1
74244: NEG
74245: PUSH
74246: LD_INT 1
74248: PUSH
74249: EMPTY
74250: LIST
74251: LIST
74252: PUSH
74253: LD_INT 2
74255: NEG
74256: PUSH
74257: LD_INT 0
74259: PUSH
74260: EMPTY
74261: LIST
74262: LIST
74263: PUSH
74264: LD_INT 2
74266: NEG
74267: PUSH
74268: LD_INT 1
74270: NEG
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 2
74278: NEG
74279: PUSH
74280: LD_INT 2
74282: NEG
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74309: LD_ADDR_VAR 0 54
74313: PUSH
74314: LD_INT 0
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: EMPTY
74321: LIST
74322: LIST
74323: PUSH
74324: LD_INT 0
74326: PUSH
74327: LD_INT 1
74329: NEG
74330: PUSH
74331: EMPTY
74332: LIST
74333: LIST
74334: PUSH
74335: LD_INT 1
74337: PUSH
74338: LD_INT 0
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PUSH
74345: LD_INT 1
74347: PUSH
74348: LD_INT 1
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: LD_INT 0
74357: PUSH
74358: LD_INT 1
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: PUSH
74365: LD_INT 1
74367: NEG
74368: PUSH
74369: LD_INT 0
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 1
74378: NEG
74379: PUSH
74380: LD_INT 1
74382: NEG
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: LD_INT 1
74390: NEG
74391: PUSH
74392: LD_INT 2
74394: NEG
74395: PUSH
74396: EMPTY
74397: LIST
74398: LIST
74399: PUSH
74400: LD_INT 0
74402: PUSH
74403: LD_INT 2
74405: NEG
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PUSH
74411: LD_INT 1
74413: PUSH
74414: LD_INT 1
74416: NEG
74417: PUSH
74418: EMPTY
74419: LIST
74420: LIST
74421: PUSH
74422: LD_INT 2
74424: PUSH
74425: LD_INT 0
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: PUSH
74432: LD_INT 2
74434: PUSH
74435: LD_INT 1
74437: PUSH
74438: EMPTY
74439: LIST
74440: LIST
74441: PUSH
74442: LD_INT 2
74444: PUSH
74445: LD_INT 2
74447: PUSH
74448: EMPTY
74449: LIST
74450: LIST
74451: PUSH
74452: LD_INT 1
74454: PUSH
74455: LD_INT 2
74457: PUSH
74458: EMPTY
74459: LIST
74460: LIST
74461: PUSH
74462: LD_INT 0
74464: PUSH
74465: LD_INT 2
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: PUSH
74472: LD_INT 1
74474: NEG
74475: PUSH
74476: LD_INT 1
74478: PUSH
74479: EMPTY
74480: LIST
74481: LIST
74482: PUSH
74483: LD_INT 2
74485: NEG
74486: PUSH
74487: LD_INT 0
74489: PUSH
74490: EMPTY
74491: LIST
74492: LIST
74493: PUSH
74494: LD_INT 2
74496: NEG
74497: PUSH
74498: LD_INT 1
74500: NEG
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: LD_INT 2
74508: NEG
74509: PUSH
74510: LD_INT 2
74512: NEG
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74539: LD_ADDR_VAR 0 55
74543: PUSH
74544: LD_INT 0
74546: PUSH
74547: LD_INT 0
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: PUSH
74554: LD_INT 0
74556: PUSH
74557: LD_INT 1
74559: NEG
74560: PUSH
74561: EMPTY
74562: LIST
74563: LIST
74564: PUSH
74565: LD_INT 1
74567: PUSH
74568: LD_INT 0
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: PUSH
74575: LD_INT 1
74577: PUSH
74578: LD_INT 1
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 0
74587: PUSH
74588: LD_INT 1
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: LD_INT 1
74597: NEG
74598: PUSH
74599: LD_INT 0
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PUSH
74606: LD_INT 1
74608: NEG
74609: PUSH
74610: LD_INT 1
74612: NEG
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PUSH
74618: LD_INT 1
74620: NEG
74621: PUSH
74622: LD_INT 2
74624: NEG
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: LD_INT 0
74632: PUSH
74633: LD_INT 2
74635: NEG
74636: PUSH
74637: EMPTY
74638: LIST
74639: LIST
74640: PUSH
74641: LD_INT 1
74643: PUSH
74644: LD_INT 1
74646: NEG
74647: PUSH
74648: EMPTY
74649: LIST
74650: LIST
74651: PUSH
74652: LD_INT 2
74654: PUSH
74655: LD_INT 0
74657: PUSH
74658: EMPTY
74659: LIST
74660: LIST
74661: PUSH
74662: LD_INT 2
74664: PUSH
74665: LD_INT 1
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: PUSH
74672: LD_INT 2
74674: PUSH
74675: LD_INT 2
74677: PUSH
74678: EMPTY
74679: LIST
74680: LIST
74681: PUSH
74682: LD_INT 1
74684: PUSH
74685: LD_INT 2
74687: PUSH
74688: EMPTY
74689: LIST
74690: LIST
74691: PUSH
74692: LD_INT 0
74694: PUSH
74695: LD_INT 2
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: PUSH
74702: LD_INT 1
74704: NEG
74705: PUSH
74706: LD_INT 1
74708: PUSH
74709: EMPTY
74710: LIST
74711: LIST
74712: PUSH
74713: LD_INT 2
74715: NEG
74716: PUSH
74717: LD_INT 0
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PUSH
74724: LD_INT 2
74726: NEG
74727: PUSH
74728: LD_INT 1
74730: NEG
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: LD_INT 2
74738: NEG
74739: PUSH
74740: LD_INT 2
74742: NEG
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: EMPTY
74749: LIST
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74769: LD_ADDR_VAR 0 56
74773: PUSH
74774: LD_INT 0
74776: PUSH
74777: LD_INT 0
74779: PUSH
74780: EMPTY
74781: LIST
74782: LIST
74783: PUSH
74784: LD_INT 0
74786: PUSH
74787: LD_INT 1
74789: NEG
74790: PUSH
74791: EMPTY
74792: LIST
74793: LIST
74794: PUSH
74795: LD_INT 1
74797: PUSH
74798: LD_INT 0
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: LD_INT 1
74807: PUSH
74808: LD_INT 1
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 0
74817: PUSH
74818: LD_INT 1
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: PUSH
74825: LD_INT 1
74827: NEG
74828: PUSH
74829: LD_INT 0
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: PUSH
74836: LD_INT 1
74838: NEG
74839: PUSH
74840: LD_INT 1
74842: NEG
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 1
74850: NEG
74851: PUSH
74852: LD_INT 2
74854: NEG
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 0
74862: PUSH
74863: LD_INT 2
74865: NEG
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 1
74873: PUSH
74874: LD_INT 1
74876: NEG
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: PUSH
74882: LD_INT 2
74884: PUSH
74885: LD_INT 0
74887: PUSH
74888: EMPTY
74889: LIST
74890: LIST
74891: PUSH
74892: LD_INT 2
74894: PUSH
74895: LD_INT 1
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: PUSH
74902: LD_INT 2
74904: PUSH
74905: LD_INT 2
74907: PUSH
74908: EMPTY
74909: LIST
74910: LIST
74911: PUSH
74912: LD_INT 1
74914: PUSH
74915: LD_INT 2
74917: PUSH
74918: EMPTY
74919: LIST
74920: LIST
74921: PUSH
74922: LD_INT 0
74924: PUSH
74925: LD_INT 2
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: PUSH
74932: LD_INT 1
74934: NEG
74935: PUSH
74936: LD_INT 1
74938: PUSH
74939: EMPTY
74940: LIST
74941: LIST
74942: PUSH
74943: LD_INT 2
74945: NEG
74946: PUSH
74947: LD_INT 0
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PUSH
74954: LD_INT 2
74956: NEG
74957: PUSH
74958: LD_INT 1
74960: NEG
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: PUSH
74966: LD_INT 2
74968: NEG
74969: PUSH
74970: LD_INT 2
74972: NEG
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: LIST
74982: LIST
74983: LIST
74984: LIST
74985: LIST
74986: LIST
74987: LIST
74988: LIST
74989: LIST
74990: LIST
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74999: LD_ADDR_VAR 0 57
75003: PUSH
75004: LD_INT 0
75006: PUSH
75007: LD_INT 0
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: LD_INT 0
75016: PUSH
75017: LD_INT 1
75019: NEG
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: PUSH
75025: LD_INT 1
75027: PUSH
75028: LD_INT 0
75030: PUSH
75031: EMPTY
75032: LIST
75033: LIST
75034: PUSH
75035: LD_INT 1
75037: PUSH
75038: LD_INT 1
75040: PUSH
75041: EMPTY
75042: LIST
75043: LIST
75044: PUSH
75045: LD_INT 0
75047: PUSH
75048: LD_INT 1
75050: PUSH
75051: EMPTY
75052: LIST
75053: LIST
75054: PUSH
75055: LD_INT 1
75057: NEG
75058: PUSH
75059: LD_INT 0
75061: PUSH
75062: EMPTY
75063: LIST
75064: LIST
75065: PUSH
75066: LD_INT 1
75068: NEG
75069: PUSH
75070: LD_INT 1
75072: NEG
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PUSH
75078: LD_INT 1
75080: NEG
75081: PUSH
75082: LD_INT 2
75084: NEG
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PUSH
75090: LD_INT 0
75092: PUSH
75093: LD_INT 2
75095: NEG
75096: PUSH
75097: EMPTY
75098: LIST
75099: LIST
75100: PUSH
75101: LD_INT 1
75103: PUSH
75104: LD_INT 1
75106: NEG
75107: PUSH
75108: EMPTY
75109: LIST
75110: LIST
75111: PUSH
75112: LD_INT 2
75114: PUSH
75115: LD_INT 0
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: PUSH
75122: LD_INT 2
75124: PUSH
75125: LD_INT 1
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PUSH
75132: LD_INT 2
75134: PUSH
75135: LD_INT 2
75137: PUSH
75138: EMPTY
75139: LIST
75140: LIST
75141: PUSH
75142: LD_INT 1
75144: PUSH
75145: LD_INT 2
75147: PUSH
75148: EMPTY
75149: LIST
75150: LIST
75151: PUSH
75152: LD_INT 0
75154: PUSH
75155: LD_INT 2
75157: PUSH
75158: EMPTY
75159: LIST
75160: LIST
75161: PUSH
75162: LD_INT 1
75164: NEG
75165: PUSH
75166: LD_INT 1
75168: PUSH
75169: EMPTY
75170: LIST
75171: LIST
75172: PUSH
75173: LD_INT 2
75175: NEG
75176: PUSH
75177: LD_INT 0
75179: PUSH
75180: EMPTY
75181: LIST
75182: LIST
75183: PUSH
75184: LD_INT 2
75186: NEG
75187: PUSH
75188: LD_INT 1
75190: NEG
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PUSH
75196: LD_INT 2
75198: NEG
75199: PUSH
75200: LD_INT 2
75202: NEG
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: LIST
75212: LIST
75213: LIST
75214: LIST
75215: LIST
75216: LIST
75217: LIST
75218: LIST
75219: LIST
75220: LIST
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75229: LD_ADDR_VAR 0 58
75233: PUSH
75234: LD_INT 0
75236: PUSH
75237: LD_INT 0
75239: PUSH
75240: EMPTY
75241: LIST
75242: LIST
75243: PUSH
75244: LD_INT 0
75246: PUSH
75247: LD_INT 1
75249: NEG
75250: PUSH
75251: EMPTY
75252: LIST
75253: LIST
75254: PUSH
75255: LD_INT 1
75257: PUSH
75258: LD_INT 0
75260: PUSH
75261: EMPTY
75262: LIST
75263: LIST
75264: PUSH
75265: LD_INT 1
75267: PUSH
75268: LD_INT 1
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PUSH
75275: LD_INT 0
75277: PUSH
75278: LD_INT 1
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: PUSH
75285: LD_INT 1
75287: NEG
75288: PUSH
75289: LD_INT 0
75291: PUSH
75292: EMPTY
75293: LIST
75294: LIST
75295: PUSH
75296: LD_INT 1
75298: NEG
75299: PUSH
75300: LD_INT 1
75302: NEG
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: PUSH
75308: LD_INT 1
75310: NEG
75311: PUSH
75312: LD_INT 2
75314: NEG
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PUSH
75320: LD_INT 0
75322: PUSH
75323: LD_INT 2
75325: NEG
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: LD_INT 1
75333: PUSH
75334: LD_INT 1
75336: NEG
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: LD_INT 2
75344: PUSH
75345: LD_INT 0
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PUSH
75352: LD_INT 2
75354: PUSH
75355: LD_INT 1
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PUSH
75362: LD_INT 2
75364: PUSH
75365: LD_INT 2
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: PUSH
75372: LD_INT 1
75374: PUSH
75375: LD_INT 2
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: LD_INT 0
75384: PUSH
75385: LD_INT 2
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: PUSH
75392: LD_INT 1
75394: NEG
75395: PUSH
75396: LD_INT 1
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: PUSH
75403: LD_INT 2
75405: NEG
75406: PUSH
75407: LD_INT 0
75409: PUSH
75410: EMPTY
75411: LIST
75412: LIST
75413: PUSH
75414: LD_INT 2
75416: NEG
75417: PUSH
75418: LD_INT 1
75420: NEG
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 2
75428: NEG
75429: PUSH
75430: LD_INT 2
75432: NEG
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: LIST
75442: LIST
75443: LIST
75444: LIST
75445: LIST
75446: LIST
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75459: LD_ADDR_VAR 0 59
75463: PUSH
75464: LD_INT 0
75466: PUSH
75467: LD_INT 0
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 0
75476: PUSH
75477: LD_INT 1
75479: NEG
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: LD_INT 1
75487: PUSH
75488: LD_INT 0
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 1
75497: PUSH
75498: LD_INT 1
75500: PUSH
75501: EMPTY
75502: LIST
75503: LIST
75504: PUSH
75505: LD_INT 0
75507: PUSH
75508: LD_INT 1
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: PUSH
75515: LD_INT 1
75517: NEG
75518: PUSH
75519: LD_INT 0
75521: PUSH
75522: EMPTY
75523: LIST
75524: LIST
75525: PUSH
75526: LD_INT 1
75528: NEG
75529: PUSH
75530: LD_INT 1
75532: NEG
75533: PUSH
75534: EMPTY
75535: LIST
75536: LIST
75537: PUSH
75538: EMPTY
75539: LIST
75540: LIST
75541: LIST
75542: LIST
75543: LIST
75544: LIST
75545: LIST
75546: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75547: LD_ADDR_VAR 0 60
75551: PUSH
75552: LD_INT 0
75554: PUSH
75555: LD_INT 0
75557: PUSH
75558: EMPTY
75559: LIST
75560: LIST
75561: PUSH
75562: LD_INT 0
75564: PUSH
75565: LD_INT 1
75567: NEG
75568: PUSH
75569: EMPTY
75570: LIST
75571: LIST
75572: PUSH
75573: LD_INT 1
75575: PUSH
75576: LD_INT 0
75578: PUSH
75579: EMPTY
75580: LIST
75581: LIST
75582: PUSH
75583: LD_INT 1
75585: PUSH
75586: LD_INT 1
75588: PUSH
75589: EMPTY
75590: LIST
75591: LIST
75592: PUSH
75593: LD_INT 0
75595: PUSH
75596: LD_INT 1
75598: PUSH
75599: EMPTY
75600: LIST
75601: LIST
75602: PUSH
75603: LD_INT 1
75605: NEG
75606: PUSH
75607: LD_INT 0
75609: PUSH
75610: EMPTY
75611: LIST
75612: LIST
75613: PUSH
75614: LD_INT 1
75616: NEG
75617: PUSH
75618: LD_INT 1
75620: NEG
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75635: LD_ADDR_VAR 0 61
75639: PUSH
75640: LD_INT 0
75642: PUSH
75643: LD_INT 0
75645: PUSH
75646: EMPTY
75647: LIST
75648: LIST
75649: PUSH
75650: LD_INT 0
75652: PUSH
75653: LD_INT 1
75655: NEG
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: PUSH
75661: LD_INT 1
75663: PUSH
75664: LD_INT 0
75666: PUSH
75667: EMPTY
75668: LIST
75669: LIST
75670: PUSH
75671: LD_INT 1
75673: PUSH
75674: LD_INT 1
75676: PUSH
75677: EMPTY
75678: LIST
75679: LIST
75680: PUSH
75681: LD_INT 0
75683: PUSH
75684: LD_INT 1
75686: PUSH
75687: EMPTY
75688: LIST
75689: LIST
75690: PUSH
75691: LD_INT 1
75693: NEG
75694: PUSH
75695: LD_INT 0
75697: PUSH
75698: EMPTY
75699: LIST
75700: LIST
75701: PUSH
75702: LD_INT 1
75704: NEG
75705: PUSH
75706: LD_INT 1
75708: NEG
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: LIST
75718: LIST
75719: LIST
75720: LIST
75721: LIST
75722: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75723: LD_ADDR_VAR 0 62
75727: PUSH
75728: LD_INT 0
75730: PUSH
75731: LD_INT 0
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: LD_INT 0
75740: PUSH
75741: LD_INT 1
75743: NEG
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: LD_INT 1
75751: PUSH
75752: LD_INT 0
75754: PUSH
75755: EMPTY
75756: LIST
75757: LIST
75758: PUSH
75759: LD_INT 1
75761: PUSH
75762: LD_INT 1
75764: PUSH
75765: EMPTY
75766: LIST
75767: LIST
75768: PUSH
75769: LD_INT 0
75771: PUSH
75772: LD_INT 1
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: PUSH
75779: LD_INT 1
75781: NEG
75782: PUSH
75783: LD_INT 0
75785: PUSH
75786: EMPTY
75787: LIST
75788: LIST
75789: PUSH
75790: LD_INT 1
75792: NEG
75793: PUSH
75794: LD_INT 1
75796: NEG
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: PUSH
75802: EMPTY
75803: LIST
75804: LIST
75805: LIST
75806: LIST
75807: LIST
75808: LIST
75809: LIST
75810: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75811: LD_ADDR_VAR 0 63
75815: PUSH
75816: LD_INT 0
75818: PUSH
75819: LD_INT 0
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: PUSH
75826: LD_INT 0
75828: PUSH
75829: LD_INT 1
75831: NEG
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: PUSH
75837: LD_INT 1
75839: PUSH
75840: LD_INT 0
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: PUSH
75847: LD_INT 1
75849: PUSH
75850: LD_INT 1
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: LD_INT 0
75859: PUSH
75860: LD_INT 1
75862: PUSH
75863: EMPTY
75864: LIST
75865: LIST
75866: PUSH
75867: LD_INT 1
75869: NEG
75870: PUSH
75871: LD_INT 0
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: PUSH
75878: LD_INT 1
75880: NEG
75881: PUSH
75882: LD_INT 1
75884: NEG
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75899: LD_ADDR_VAR 0 64
75903: PUSH
75904: LD_INT 0
75906: PUSH
75907: LD_INT 0
75909: PUSH
75910: EMPTY
75911: LIST
75912: LIST
75913: PUSH
75914: LD_INT 0
75916: PUSH
75917: LD_INT 1
75919: NEG
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PUSH
75925: LD_INT 1
75927: PUSH
75928: LD_INT 0
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PUSH
75935: LD_INT 1
75937: PUSH
75938: LD_INT 1
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PUSH
75945: LD_INT 0
75947: PUSH
75948: LD_INT 1
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: LD_INT 1
75957: NEG
75958: PUSH
75959: LD_INT 0
75961: PUSH
75962: EMPTY
75963: LIST
75964: LIST
75965: PUSH
75966: LD_INT 1
75968: NEG
75969: PUSH
75970: LD_INT 1
75972: NEG
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: ST_TO_ADDR
// end ; 1 :
75987: GO 81884
75989: LD_INT 1
75991: DOUBLE
75992: EQUAL
75993: IFTRUE 75997
75995: GO 78620
75997: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75998: LD_ADDR_VAR 0 11
76002: PUSH
76003: LD_INT 1
76005: NEG
76006: PUSH
76007: LD_INT 3
76009: NEG
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: PUSH
76015: LD_INT 0
76017: PUSH
76018: LD_INT 3
76020: NEG
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PUSH
76026: LD_INT 1
76028: PUSH
76029: LD_INT 2
76031: NEG
76032: PUSH
76033: EMPTY
76034: LIST
76035: LIST
76036: PUSH
76037: EMPTY
76038: LIST
76039: LIST
76040: LIST
76041: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76042: LD_ADDR_VAR 0 12
76046: PUSH
76047: LD_INT 2
76049: PUSH
76050: LD_INT 1
76052: NEG
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: PUSH
76058: LD_INT 3
76060: PUSH
76061: LD_INT 0
76063: PUSH
76064: EMPTY
76065: LIST
76066: LIST
76067: PUSH
76068: LD_INT 3
76070: PUSH
76071: LD_INT 1
76073: PUSH
76074: EMPTY
76075: LIST
76076: LIST
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: LIST
76082: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76083: LD_ADDR_VAR 0 13
76087: PUSH
76088: LD_INT 3
76090: PUSH
76091: LD_INT 2
76093: PUSH
76094: EMPTY
76095: LIST
76096: LIST
76097: PUSH
76098: LD_INT 3
76100: PUSH
76101: LD_INT 3
76103: PUSH
76104: EMPTY
76105: LIST
76106: LIST
76107: PUSH
76108: LD_INT 2
76110: PUSH
76111: LD_INT 3
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: PUSH
76118: EMPTY
76119: LIST
76120: LIST
76121: LIST
76122: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76123: LD_ADDR_VAR 0 14
76127: PUSH
76128: LD_INT 1
76130: PUSH
76131: LD_INT 3
76133: PUSH
76134: EMPTY
76135: LIST
76136: LIST
76137: PUSH
76138: LD_INT 0
76140: PUSH
76141: LD_INT 3
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: PUSH
76148: LD_INT 1
76150: NEG
76151: PUSH
76152: LD_INT 2
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: LIST
76163: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76164: LD_ADDR_VAR 0 15
76168: PUSH
76169: LD_INT 2
76171: NEG
76172: PUSH
76173: LD_INT 1
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: LD_INT 3
76182: NEG
76183: PUSH
76184: LD_INT 0
76186: PUSH
76187: EMPTY
76188: LIST
76189: LIST
76190: PUSH
76191: LD_INT 3
76193: NEG
76194: PUSH
76195: LD_INT 1
76197: NEG
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: PUSH
76203: EMPTY
76204: LIST
76205: LIST
76206: LIST
76207: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76208: LD_ADDR_VAR 0 16
76212: PUSH
76213: LD_INT 2
76215: NEG
76216: PUSH
76217: LD_INT 3
76219: NEG
76220: PUSH
76221: EMPTY
76222: LIST
76223: LIST
76224: PUSH
76225: LD_INT 3
76227: NEG
76228: PUSH
76229: LD_INT 2
76231: NEG
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: PUSH
76237: LD_INT 3
76239: NEG
76240: PUSH
76241: LD_INT 3
76243: NEG
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: PUSH
76249: EMPTY
76250: LIST
76251: LIST
76252: LIST
76253: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76254: LD_ADDR_VAR 0 17
76258: PUSH
76259: LD_INT 1
76261: NEG
76262: PUSH
76263: LD_INT 3
76265: NEG
76266: PUSH
76267: EMPTY
76268: LIST
76269: LIST
76270: PUSH
76271: LD_INT 0
76273: PUSH
76274: LD_INT 3
76276: NEG
76277: PUSH
76278: EMPTY
76279: LIST
76280: LIST
76281: PUSH
76282: LD_INT 1
76284: PUSH
76285: LD_INT 2
76287: NEG
76288: PUSH
76289: EMPTY
76290: LIST
76291: LIST
76292: PUSH
76293: EMPTY
76294: LIST
76295: LIST
76296: LIST
76297: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76298: LD_ADDR_VAR 0 18
76302: PUSH
76303: LD_INT 2
76305: PUSH
76306: LD_INT 1
76308: NEG
76309: PUSH
76310: EMPTY
76311: LIST
76312: LIST
76313: PUSH
76314: LD_INT 3
76316: PUSH
76317: LD_INT 0
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PUSH
76324: LD_INT 3
76326: PUSH
76327: LD_INT 1
76329: PUSH
76330: EMPTY
76331: LIST
76332: LIST
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: LIST
76338: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76339: LD_ADDR_VAR 0 19
76343: PUSH
76344: LD_INT 3
76346: PUSH
76347: LD_INT 2
76349: PUSH
76350: EMPTY
76351: LIST
76352: LIST
76353: PUSH
76354: LD_INT 3
76356: PUSH
76357: LD_INT 3
76359: PUSH
76360: EMPTY
76361: LIST
76362: LIST
76363: PUSH
76364: LD_INT 2
76366: PUSH
76367: LD_INT 3
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: PUSH
76374: EMPTY
76375: LIST
76376: LIST
76377: LIST
76378: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76379: LD_ADDR_VAR 0 20
76383: PUSH
76384: LD_INT 1
76386: PUSH
76387: LD_INT 3
76389: PUSH
76390: EMPTY
76391: LIST
76392: LIST
76393: PUSH
76394: LD_INT 0
76396: PUSH
76397: LD_INT 3
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: PUSH
76404: LD_INT 1
76406: NEG
76407: PUSH
76408: LD_INT 2
76410: PUSH
76411: EMPTY
76412: LIST
76413: LIST
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: LIST
76419: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76420: LD_ADDR_VAR 0 21
76424: PUSH
76425: LD_INT 2
76427: NEG
76428: PUSH
76429: LD_INT 1
76431: PUSH
76432: EMPTY
76433: LIST
76434: LIST
76435: PUSH
76436: LD_INT 3
76438: NEG
76439: PUSH
76440: LD_INT 0
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: PUSH
76447: LD_INT 3
76449: NEG
76450: PUSH
76451: LD_INT 1
76453: NEG
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: PUSH
76459: EMPTY
76460: LIST
76461: LIST
76462: LIST
76463: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76464: LD_ADDR_VAR 0 22
76468: PUSH
76469: LD_INT 2
76471: NEG
76472: PUSH
76473: LD_INT 3
76475: NEG
76476: PUSH
76477: EMPTY
76478: LIST
76479: LIST
76480: PUSH
76481: LD_INT 3
76483: NEG
76484: PUSH
76485: LD_INT 2
76487: NEG
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: PUSH
76493: LD_INT 3
76495: NEG
76496: PUSH
76497: LD_INT 3
76499: NEG
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: LIST
76509: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
76510: LD_ADDR_VAR 0 23
76514: PUSH
76515: LD_INT 0
76517: PUSH
76518: LD_INT 3
76520: NEG
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: PUSH
76526: LD_INT 1
76528: NEG
76529: PUSH
76530: LD_INT 4
76532: NEG
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PUSH
76538: LD_INT 1
76540: PUSH
76541: LD_INT 3
76543: NEG
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: EMPTY
76550: LIST
76551: LIST
76552: LIST
76553: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
76554: LD_ADDR_VAR 0 24
76558: PUSH
76559: LD_INT 3
76561: PUSH
76562: LD_INT 0
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: PUSH
76569: LD_INT 3
76571: PUSH
76572: LD_INT 1
76574: NEG
76575: PUSH
76576: EMPTY
76577: LIST
76578: LIST
76579: PUSH
76580: LD_INT 4
76582: PUSH
76583: LD_INT 1
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: LIST
76594: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
76595: LD_ADDR_VAR 0 25
76599: PUSH
76600: LD_INT 3
76602: PUSH
76603: LD_INT 3
76605: PUSH
76606: EMPTY
76607: LIST
76608: LIST
76609: PUSH
76610: LD_INT 4
76612: PUSH
76613: LD_INT 3
76615: PUSH
76616: EMPTY
76617: LIST
76618: LIST
76619: PUSH
76620: LD_INT 3
76622: PUSH
76623: LD_INT 4
76625: PUSH
76626: EMPTY
76627: LIST
76628: LIST
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: LIST
76634: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
76635: LD_ADDR_VAR 0 26
76639: PUSH
76640: LD_INT 0
76642: PUSH
76643: LD_INT 3
76645: PUSH
76646: EMPTY
76647: LIST
76648: LIST
76649: PUSH
76650: LD_INT 1
76652: PUSH
76653: LD_INT 4
76655: PUSH
76656: EMPTY
76657: LIST
76658: LIST
76659: PUSH
76660: LD_INT 1
76662: NEG
76663: PUSH
76664: LD_INT 3
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: PUSH
76671: EMPTY
76672: LIST
76673: LIST
76674: LIST
76675: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
76676: LD_ADDR_VAR 0 27
76680: PUSH
76681: LD_INT 3
76683: NEG
76684: PUSH
76685: LD_INT 0
76687: PUSH
76688: EMPTY
76689: LIST
76690: LIST
76691: PUSH
76692: LD_INT 3
76694: NEG
76695: PUSH
76696: LD_INT 1
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PUSH
76703: LD_INT 4
76705: NEG
76706: PUSH
76707: LD_INT 1
76709: NEG
76710: PUSH
76711: EMPTY
76712: LIST
76713: LIST
76714: PUSH
76715: EMPTY
76716: LIST
76717: LIST
76718: LIST
76719: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
76720: LD_ADDR_VAR 0 28
76724: PUSH
76725: LD_INT 3
76727: NEG
76728: PUSH
76729: LD_INT 3
76731: NEG
76732: PUSH
76733: EMPTY
76734: LIST
76735: LIST
76736: PUSH
76737: LD_INT 3
76739: NEG
76740: PUSH
76741: LD_INT 4
76743: NEG
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: PUSH
76749: LD_INT 4
76751: NEG
76752: PUSH
76753: LD_INT 3
76755: NEG
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: LIST
76765: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
76766: LD_ADDR_VAR 0 29
76770: PUSH
76771: LD_INT 1
76773: NEG
76774: PUSH
76775: LD_INT 3
76777: NEG
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: LD_INT 0
76785: PUSH
76786: LD_INT 3
76788: NEG
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: PUSH
76794: LD_INT 1
76796: PUSH
76797: LD_INT 2
76799: NEG
76800: PUSH
76801: EMPTY
76802: LIST
76803: LIST
76804: PUSH
76805: LD_INT 1
76807: NEG
76808: PUSH
76809: LD_INT 4
76811: NEG
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: PUSH
76817: LD_INT 0
76819: PUSH
76820: LD_INT 4
76822: NEG
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: PUSH
76828: LD_INT 1
76830: PUSH
76831: LD_INT 3
76833: NEG
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: PUSH
76839: LD_INT 1
76841: NEG
76842: PUSH
76843: LD_INT 5
76845: NEG
76846: PUSH
76847: EMPTY
76848: LIST
76849: LIST
76850: PUSH
76851: LD_INT 0
76853: PUSH
76854: LD_INT 5
76856: NEG
76857: PUSH
76858: EMPTY
76859: LIST
76860: LIST
76861: PUSH
76862: LD_INT 1
76864: PUSH
76865: LD_INT 4
76867: NEG
76868: PUSH
76869: EMPTY
76870: LIST
76871: LIST
76872: PUSH
76873: LD_INT 1
76875: NEG
76876: PUSH
76877: LD_INT 6
76879: NEG
76880: PUSH
76881: EMPTY
76882: LIST
76883: LIST
76884: PUSH
76885: LD_INT 0
76887: PUSH
76888: LD_INT 6
76890: NEG
76891: PUSH
76892: EMPTY
76893: LIST
76894: LIST
76895: PUSH
76896: LD_INT 1
76898: PUSH
76899: LD_INT 5
76901: NEG
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: PUSH
76907: EMPTY
76908: LIST
76909: LIST
76910: LIST
76911: LIST
76912: LIST
76913: LIST
76914: LIST
76915: LIST
76916: LIST
76917: LIST
76918: LIST
76919: LIST
76920: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
76921: LD_ADDR_VAR 0 30
76925: PUSH
76926: LD_INT 2
76928: PUSH
76929: LD_INT 1
76931: NEG
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: PUSH
76937: LD_INT 3
76939: PUSH
76940: LD_INT 0
76942: PUSH
76943: EMPTY
76944: LIST
76945: LIST
76946: PUSH
76947: LD_INT 3
76949: PUSH
76950: LD_INT 1
76952: PUSH
76953: EMPTY
76954: LIST
76955: LIST
76956: PUSH
76957: LD_INT 3
76959: PUSH
76960: LD_INT 1
76962: NEG
76963: PUSH
76964: EMPTY
76965: LIST
76966: LIST
76967: PUSH
76968: LD_INT 4
76970: PUSH
76971: LD_INT 0
76973: PUSH
76974: EMPTY
76975: LIST
76976: LIST
76977: PUSH
76978: LD_INT 4
76980: PUSH
76981: LD_INT 1
76983: PUSH
76984: EMPTY
76985: LIST
76986: LIST
76987: PUSH
76988: LD_INT 4
76990: PUSH
76991: LD_INT 1
76993: NEG
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: PUSH
76999: LD_INT 5
77001: PUSH
77002: LD_INT 0
77004: PUSH
77005: EMPTY
77006: LIST
77007: LIST
77008: PUSH
77009: LD_INT 5
77011: PUSH
77012: LD_INT 1
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: PUSH
77019: LD_INT 5
77021: PUSH
77022: LD_INT 1
77024: NEG
77025: PUSH
77026: EMPTY
77027: LIST
77028: LIST
77029: PUSH
77030: LD_INT 6
77032: PUSH
77033: LD_INT 0
77035: PUSH
77036: EMPTY
77037: LIST
77038: LIST
77039: PUSH
77040: LD_INT 6
77042: PUSH
77043: LD_INT 1
77045: PUSH
77046: EMPTY
77047: LIST
77048: LIST
77049: PUSH
77050: EMPTY
77051: LIST
77052: LIST
77053: LIST
77054: LIST
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: LIST
77060: LIST
77061: LIST
77062: LIST
77063: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
77064: LD_ADDR_VAR 0 31
77068: PUSH
77069: LD_INT 3
77071: PUSH
77072: LD_INT 2
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: PUSH
77079: LD_INT 3
77081: PUSH
77082: LD_INT 3
77084: PUSH
77085: EMPTY
77086: LIST
77087: LIST
77088: PUSH
77089: LD_INT 2
77091: PUSH
77092: LD_INT 3
77094: PUSH
77095: EMPTY
77096: LIST
77097: LIST
77098: PUSH
77099: LD_INT 4
77101: PUSH
77102: LD_INT 3
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: PUSH
77109: LD_INT 4
77111: PUSH
77112: LD_INT 4
77114: PUSH
77115: EMPTY
77116: LIST
77117: LIST
77118: PUSH
77119: LD_INT 3
77121: PUSH
77122: LD_INT 4
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PUSH
77129: LD_INT 5
77131: PUSH
77132: LD_INT 4
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PUSH
77139: LD_INT 5
77141: PUSH
77142: LD_INT 5
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PUSH
77149: LD_INT 4
77151: PUSH
77152: LD_INT 5
77154: PUSH
77155: EMPTY
77156: LIST
77157: LIST
77158: PUSH
77159: LD_INT 6
77161: PUSH
77162: LD_INT 5
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: PUSH
77169: LD_INT 6
77171: PUSH
77172: LD_INT 6
77174: PUSH
77175: EMPTY
77176: LIST
77177: LIST
77178: PUSH
77179: LD_INT 5
77181: PUSH
77182: LD_INT 6
77184: PUSH
77185: EMPTY
77186: LIST
77187: LIST
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
77203: LD_ADDR_VAR 0 32
77207: PUSH
77208: LD_INT 1
77210: PUSH
77211: LD_INT 3
77213: PUSH
77214: EMPTY
77215: LIST
77216: LIST
77217: PUSH
77218: LD_INT 0
77220: PUSH
77221: LD_INT 3
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: PUSH
77228: LD_INT 1
77230: NEG
77231: PUSH
77232: LD_INT 2
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: PUSH
77239: LD_INT 1
77241: PUSH
77242: LD_INT 4
77244: PUSH
77245: EMPTY
77246: LIST
77247: LIST
77248: PUSH
77249: LD_INT 0
77251: PUSH
77252: LD_INT 4
77254: PUSH
77255: EMPTY
77256: LIST
77257: LIST
77258: PUSH
77259: LD_INT 1
77261: NEG
77262: PUSH
77263: LD_INT 3
77265: PUSH
77266: EMPTY
77267: LIST
77268: LIST
77269: PUSH
77270: LD_INT 1
77272: PUSH
77273: LD_INT 5
77275: PUSH
77276: EMPTY
77277: LIST
77278: LIST
77279: PUSH
77280: LD_INT 0
77282: PUSH
77283: LD_INT 5
77285: PUSH
77286: EMPTY
77287: LIST
77288: LIST
77289: PUSH
77290: LD_INT 1
77292: NEG
77293: PUSH
77294: LD_INT 4
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: PUSH
77301: LD_INT 1
77303: PUSH
77304: LD_INT 6
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: PUSH
77311: LD_INT 0
77313: PUSH
77314: LD_INT 6
77316: PUSH
77317: EMPTY
77318: LIST
77319: LIST
77320: PUSH
77321: LD_INT 1
77323: NEG
77324: PUSH
77325: LD_INT 5
77327: PUSH
77328: EMPTY
77329: LIST
77330: LIST
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: LIST
77336: LIST
77337: LIST
77338: LIST
77339: LIST
77340: LIST
77341: LIST
77342: LIST
77343: LIST
77344: LIST
77345: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
77346: LD_ADDR_VAR 0 33
77350: PUSH
77351: LD_INT 2
77353: NEG
77354: PUSH
77355: LD_INT 1
77357: PUSH
77358: EMPTY
77359: LIST
77360: LIST
77361: PUSH
77362: LD_INT 3
77364: NEG
77365: PUSH
77366: LD_INT 0
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: PUSH
77373: LD_INT 3
77375: NEG
77376: PUSH
77377: LD_INT 1
77379: NEG
77380: PUSH
77381: EMPTY
77382: LIST
77383: LIST
77384: PUSH
77385: LD_INT 3
77387: NEG
77388: PUSH
77389: LD_INT 1
77391: PUSH
77392: EMPTY
77393: LIST
77394: LIST
77395: PUSH
77396: LD_INT 4
77398: NEG
77399: PUSH
77400: LD_INT 0
77402: PUSH
77403: EMPTY
77404: LIST
77405: LIST
77406: PUSH
77407: LD_INT 4
77409: NEG
77410: PUSH
77411: LD_INT 1
77413: NEG
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PUSH
77419: LD_INT 4
77421: NEG
77422: PUSH
77423: LD_INT 1
77425: PUSH
77426: EMPTY
77427: LIST
77428: LIST
77429: PUSH
77430: LD_INT 5
77432: NEG
77433: PUSH
77434: LD_INT 0
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: PUSH
77441: LD_INT 5
77443: NEG
77444: PUSH
77445: LD_INT 1
77447: NEG
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: PUSH
77453: LD_INT 5
77455: NEG
77456: PUSH
77457: LD_INT 1
77459: PUSH
77460: EMPTY
77461: LIST
77462: LIST
77463: PUSH
77464: LD_INT 6
77466: NEG
77467: PUSH
77468: LD_INT 0
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: PUSH
77475: LD_INT 6
77477: NEG
77478: PUSH
77479: LD_INT 1
77481: NEG
77482: PUSH
77483: EMPTY
77484: LIST
77485: LIST
77486: PUSH
77487: EMPTY
77488: LIST
77489: LIST
77490: LIST
77491: LIST
77492: LIST
77493: LIST
77494: LIST
77495: LIST
77496: LIST
77497: LIST
77498: LIST
77499: LIST
77500: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
77501: LD_ADDR_VAR 0 34
77505: PUSH
77506: LD_INT 2
77508: NEG
77509: PUSH
77510: LD_INT 3
77512: NEG
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: PUSH
77518: LD_INT 3
77520: NEG
77521: PUSH
77522: LD_INT 2
77524: NEG
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: LD_INT 3
77532: NEG
77533: PUSH
77534: LD_INT 3
77536: NEG
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PUSH
77542: LD_INT 3
77544: NEG
77545: PUSH
77546: LD_INT 4
77548: NEG
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: PUSH
77554: LD_INT 4
77556: NEG
77557: PUSH
77558: LD_INT 3
77560: NEG
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: PUSH
77566: LD_INT 4
77568: NEG
77569: PUSH
77570: LD_INT 4
77572: NEG
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: PUSH
77578: LD_INT 4
77580: NEG
77581: PUSH
77582: LD_INT 5
77584: NEG
77585: PUSH
77586: EMPTY
77587: LIST
77588: LIST
77589: PUSH
77590: LD_INT 5
77592: NEG
77593: PUSH
77594: LD_INT 4
77596: NEG
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PUSH
77602: LD_INT 5
77604: NEG
77605: PUSH
77606: LD_INT 5
77608: NEG
77609: PUSH
77610: EMPTY
77611: LIST
77612: LIST
77613: PUSH
77614: LD_INT 5
77616: NEG
77617: PUSH
77618: LD_INT 6
77620: NEG
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: PUSH
77626: LD_INT 6
77628: NEG
77629: PUSH
77630: LD_INT 5
77632: NEG
77633: PUSH
77634: EMPTY
77635: LIST
77636: LIST
77637: PUSH
77638: LD_INT 6
77640: NEG
77641: PUSH
77642: LD_INT 6
77644: NEG
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: LIST
77654: LIST
77655: LIST
77656: LIST
77657: LIST
77658: LIST
77659: LIST
77660: LIST
77661: LIST
77662: LIST
77663: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
77664: LD_ADDR_VAR 0 41
77668: PUSH
77669: LD_INT 0
77671: PUSH
77672: LD_INT 2
77674: NEG
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: LD_INT 1
77682: NEG
77683: PUSH
77684: LD_INT 3
77686: NEG
77687: PUSH
77688: EMPTY
77689: LIST
77690: LIST
77691: PUSH
77692: LD_INT 1
77694: PUSH
77695: LD_INT 2
77697: NEG
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: PUSH
77703: EMPTY
77704: LIST
77705: LIST
77706: LIST
77707: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
77708: LD_ADDR_VAR 0 42
77712: PUSH
77713: LD_INT 2
77715: PUSH
77716: LD_INT 0
77718: PUSH
77719: EMPTY
77720: LIST
77721: LIST
77722: PUSH
77723: LD_INT 2
77725: PUSH
77726: LD_INT 1
77728: NEG
77729: PUSH
77730: EMPTY
77731: LIST
77732: LIST
77733: PUSH
77734: LD_INT 3
77736: PUSH
77737: LD_INT 1
77739: PUSH
77740: EMPTY
77741: LIST
77742: LIST
77743: PUSH
77744: EMPTY
77745: LIST
77746: LIST
77747: LIST
77748: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
77749: LD_ADDR_VAR 0 43
77753: PUSH
77754: LD_INT 2
77756: PUSH
77757: LD_INT 2
77759: PUSH
77760: EMPTY
77761: LIST
77762: LIST
77763: PUSH
77764: LD_INT 3
77766: PUSH
77767: LD_INT 2
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: PUSH
77774: LD_INT 2
77776: PUSH
77777: LD_INT 3
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: PUSH
77784: EMPTY
77785: LIST
77786: LIST
77787: LIST
77788: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
77789: LD_ADDR_VAR 0 44
77793: PUSH
77794: LD_INT 0
77796: PUSH
77797: LD_INT 2
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: PUSH
77804: LD_INT 1
77806: PUSH
77807: LD_INT 3
77809: PUSH
77810: EMPTY
77811: LIST
77812: LIST
77813: PUSH
77814: LD_INT 1
77816: NEG
77817: PUSH
77818: LD_INT 2
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: LIST
77829: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
77830: LD_ADDR_VAR 0 45
77834: PUSH
77835: LD_INT 2
77837: NEG
77838: PUSH
77839: LD_INT 0
77841: PUSH
77842: EMPTY
77843: LIST
77844: LIST
77845: PUSH
77846: LD_INT 2
77848: NEG
77849: PUSH
77850: LD_INT 1
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: PUSH
77857: LD_INT 3
77859: NEG
77860: PUSH
77861: LD_INT 1
77863: NEG
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: LIST
77873: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
77874: LD_ADDR_VAR 0 46
77878: PUSH
77879: LD_INT 2
77881: NEG
77882: PUSH
77883: LD_INT 2
77885: NEG
77886: PUSH
77887: EMPTY
77888: LIST
77889: LIST
77890: PUSH
77891: LD_INT 2
77893: NEG
77894: PUSH
77895: LD_INT 3
77897: NEG
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: PUSH
77903: LD_INT 3
77905: NEG
77906: PUSH
77907: LD_INT 2
77909: NEG
77910: PUSH
77911: EMPTY
77912: LIST
77913: LIST
77914: PUSH
77915: EMPTY
77916: LIST
77917: LIST
77918: LIST
77919: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
77920: LD_ADDR_VAR 0 47
77924: PUSH
77925: LD_INT 2
77927: NEG
77928: PUSH
77929: LD_INT 3
77931: NEG
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: PUSH
77937: LD_INT 1
77939: NEG
77940: PUSH
77941: LD_INT 3
77943: NEG
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: PUSH
77949: EMPTY
77950: LIST
77951: LIST
77952: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
77953: LD_ADDR_VAR 0 48
77957: PUSH
77958: LD_INT 1
77960: PUSH
77961: LD_INT 2
77963: NEG
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: PUSH
77969: LD_INT 2
77971: PUSH
77972: LD_INT 1
77974: NEG
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: PUSH
77980: EMPTY
77981: LIST
77982: LIST
77983: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
77984: LD_ADDR_VAR 0 49
77988: PUSH
77989: LD_INT 3
77991: PUSH
77992: LD_INT 1
77994: PUSH
77995: EMPTY
77996: LIST
77997: LIST
77998: PUSH
77999: LD_INT 3
78001: PUSH
78002: LD_INT 2
78004: PUSH
78005: EMPTY
78006: LIST
78007: LIST
78008: PUSH
78009: EMPTY
78010: LIST
78011: LIST
78012: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
78013: LD_ADDR_VAR 0 50
78017: PUSH
78018: LD_INT 2
78020: PUSH
78021: LD_INT 3
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: PUSH
78028: LD_INT 1
78030: PUSH
78031: LD_INT 3
78033: PUSH
78034: EMPTY
78035: LIST
78036: LIST
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
78042: LD_ADDR_VAR 0 51
78046: PUSH
78047: LD_INT 1
78049: NEG
78050: PUSH
78051: LD_INT 2
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: PUSH
78058: LD_INT 2
78060: NEG
78061: PUSH
78062: LD_INT 1
78064: PUSH
78065: EMPTY
78066: LIST
78067: LIST
78068: PUSH
78069: EMPTY
78070: LIST
78071: LIST
78072: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
78073: LD_ADDR_VAR 0 52
78077: PUSH
78078: LD_INT 3
78080: NEG
78081: PUSH
78082: LD_INT 1
78084: NEG
78085: PUSH
78086: EMPTY
78087: LIST
78088: LIST
78089: PUSH
78090: LD_INT 3
78092: NEG
78093: PUSH
78094: LD_INT 2
78096: NEG
78097: PUSH
78098: EMPTY
78099: LIST
78100: LIST
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
78106: LD_ADDR_VAR 0 53
78110: PUSH
78111: LD_INT 1
78113: NEG
78114: PUSH
78115: LD_INT 3
78117: NEG
78118: PUSH
78119: EMPTY
78120: LIST
78121: LIST
78122: PUSH
78123: LD_INT 0
78125: PUSH
78126: LD_INT 3
78128: NEG
78129: PUSH
78130: EMPTY
78131: LIST
78132: LIST
78133: PUSH
78134: LD_INT 1
78136: PUSH
78137: LD_INT 2
78139: NEG
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: LIST
78149: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
78150: LD_ADDR_VAR 0 54
78154: PUSH
78155: LD_INT 2
78157: PUSH
78158: LD_INT 1
78160: NEG
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PUSH
78166: LD_INT 3
78168: PUSH
78169: LD_INT 0
78171: PUSH
78172: EMPTY
78173: LIST
78174: LIST
78175: PUSH
78176: LD_INT 3
78178: PUSH
78179: LD_INT 1
78181: PUSH
78182: EMPTY
78183: LIST
78184: LIST
78185: PUSH
78186: EMPTY
78187: LIST
78188: LIST
78189: LIST
78190: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
78191: LD_ADDR_VAR 0 55
78195: PUSH
78196: LD_INT 3
78198: PUSH
78199: LD_INT 2
78201: PUSH
78202: EMPTY
78203: LIST
78204: LIST
78205: PUSH
78206: LD_INT 3
78208: PUSH
78209: LD_INT 3
78211: PUSH
78212: EMPTY
78213: LIST
78214: LIST
78215: PUSH
78216: LD_INT 2
78218: PUSH
78219: LD_INT 3
78221: PUSH
78222: EMPTY
78223: LIST
78224: LIST
78225: PUSH
78226: EMPTY
78227: LIST
78228: LIST
78229: LIST
78230: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
78231: LD_ADDR_VAR 0 56
78235: PUSH
78236: LD_INT 1
78238: PUSH
78239: LD_INT 3
78241: PUSH
78242: EMPTY
78243: LIST
78244: LIST
78245: PUSH
78246: LD_INT 0
78248: PUSH
78249: LD_INT 3
78251: PUSH
78252: EMPTY
78253: LIST
78254: LIST
78255: PUSH
78256: LD_INT 1
78258: NEG
78259: PUSH
78260: LD_INT 2
78262: PUSH
78263: EMPTY
78264: LIST
78265: LIST
78266: PUSH
78267: EMPTY
78268: LIST
78269: LIST
78270: LIST
78271: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78272: LD_ADDR_VAR 0 57
78276: PUSH
78277: LD_INT 2
78279: NEG
78280: PUSH
78281: LD_INT 1
78283: PUSH
78284: EMPTY
78285: LIST
78286: LIST
78287: PUSH
78288: LD_INT 3
78290: NEG
78291: PUSH
78292: LD_INT 0
78294: PUSH
78295: EMPTY
78296: LIST
78297: LIST
78298: PUSH
78299: LD_INT 3
78301: NEG
78302: PUSH
78303: LD_INT 1
78305: NEG
78306: PUSH
78307: EMPTY
78308: LIST
78309: LIST
78310: PUSH
78311: EMPTY
78312: LIST
78313: LIST
78314: LIST
78315: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78316: LD_ADDR_VAR 0 58
78320: PUSH
78321: LD_INT 2
78323: NEG
78324: PUSH
78325: LD_INT 3
78327: NEG
78328: PUSH
78329: EMPTY
78330: LIST
78331: LIST
78332: PUSH
78333: LD_INT 3
78335: NEG
78336: PUSH
78337: LD_INT 2
78339: NEG
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: PUSH
78345: LD_INT 3
78347: NEG
78348: PUSH
78349: LD_INT 3
78351: NEG
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: PUSH
78357: EMPTY
78358: LIST
78359: LIST
78360: LIST
78361: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
78362: LD_ADDR_VAR 0 59
78366: PUSH
78367: LD_INT 1
78369: NEG
78370: PUSH
78371: LD_INT 2
78373: NEG
78374: PUSH
78375: EMPTY
78376: LIST
78377: LIST
78378: PUSH
78379: LD_INT 0
78381: PUSH
78382: LD_INT 2
78384: NEG
78385: PUSH
78386: EMPTY
78387: LIST
78388: LIST
78389: PUSH
78390: LD_INT 1
78392: PUSH
78393: LD_INT 1
78395: NEG
78396: PUSH
78397: EMPTY
78398: LIST
78399: LIST
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: LIST
78405: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78406: LD_ADDR_VAR 0 60
78410: PUSH
78411: LD_INT 1
78413: PUSH
78414: LD_INT 1
78416: NEG
78417: PUSH
78418: EMPTY
78419: LIST
78420: LIST
78421: PUSH
78422: LD_INT 2
78424: PUSH
78425: LD_INT 0
78427: PUSH
78428: EMPTY
78429: LIST
78430: LIST
78431: PUSH
78432: LD_INT 2
78434: PUSH
78435: LD_INT 1
78437: PUSH
78438: EMPTY
78439: LIST
78440: LIST
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: LIST
78446: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78447: LD_ADDR_VAR 0 61
78451: PUSH
78452: LD_INT 2
78454: PUSH
78455: LD_INT 1
78457: PUSH
78458: EMPTY
78459: LIST
78460: LIST
78461: PUSH
78462: LD_INT 2
78464: PUSH
78465: LD_INT 2
78467: PUSH
78468: EMPTY
78469: LIST
78470: LIST
78471: PUSH
78472: LD_INT 1
78474: PUSH
78475: LD_INT 2
78477: PUSH
78478: EMPTY
78479: LIST
78480: LIST
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: LIST
78486: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78487: LD_ADDR_VAR 0 62
78491: PUSH
78492: LD_INT 1
78494: PUSH
78495: LD_INT 2
78497: PUSH
78498: EMPTY
78499: LIST
78500: LIST
78501: PUSH
78502: LD_INT 0
78504: PUSH
78505: LD_INT 2
78507: PUSH
78508: EMPTY
78509: LIST
78510: LIST
78511: PUSH
78512: LD_INT 1
78514: NEG
78515: PUSH
78516: LD_INT 1
78518: PUSH
78519: EMPTY
78520: LIST
78521: LIST
78522: PUSH
78523: EMPTY
78524: LIST
78525: LIST
78526: LIST
78527: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78528: LD_ADDR_VAR 0 63
78532: PUSH
78533: LD_INT 1
78535: NEG
78536: PUSH
78537: LD_INT 1
78539: PUSH
78540: EMPTY
78541: LIST
78542: LIST
78543: PUSH
78544: LD_INT 2
78546: NEG
78547: PUSH
78548: LD_INT 0
78550: PUSH
78551: EMPTY
78552: LIST
78553: LIST
78554: PUSH
78555: LD_INT 2
78557: NEG
78558: PUSH
78559: LD_INT 1
78561: NEG
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: PUSH
78567: EMPTY
78568: LIST
78569: LIST
78570: LIST
78571: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78572: LD_ADDR_VAR 0 64
78576: PUSH
78577: LD_INT 1
78579: NEG
78580: PUSH
78581: LD_INT 2
78583: NEG
78584: PUSH
78585: EMPTY
78586: LIST
78587: LIST
78588: PUSH
78589: LD_INT 2
78591: NEG
78592: PUSH
78593: LD_INT 1
78595: NEG
78596: PUSH
78597: EMPTY
78598: LIST
78599: LIST
78600: PUSH
78601: LD_INT 2
78603: NEG
78604: PUSH
78605: LD_INT 2
78607: NEG
78608: PUSH
78609: EMPTY
78610: LIST
78611: LIST
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: LIST
78617: ST_TO_ADDR
// end ; 2 :
78618: GO 81884
78620: LD_INT 2
78622: DOUBLE
78623: EQUAL
78624: IFTRUE 78628
78626: GO 81883
78628: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
78629: LD_ADDR_VAR 0 29
78633: PUSH
78634: LD_INT 4
78636: PUSH
78637: LD_INT 0
78639: PUSH
78640: EMPTY
78641: LIST
78642: LIST
78643: PUSH
78644: LD_INT 4
78646: PUSH
78647: LD_INT 1
78649: NEG
78650: PUSH
78651: EMPTY
78652: LIST
78653: LIST
78654: PUSH
78655: LD_INT 5
78657: PUSH
78658: LD_INT 0
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: PUSH
78665: LD_INT 5
78667: PUSH
78668: LD_INT 1
78670: PUSH
78671: EMPTY
78672: LIST
78673: LIST
78674: PUSH
78675: LD_INT 4
78677: PUSH
78678: LD_INT 1
78680: PUSH
78681: EMPTY
78682: LIST
78683: LIST
78684: PUSH
78685: LD_INT 3
78687: PUSH
78688: LD_INT 0
78690: PUSH
78691: EMPTY
78692: LIST
78693: LIST
78694: PUSH
78695: LD_INT 3
78697: PUSH
78698: LD_INT 1
78700: NEG
78701: PUSH
78702: EMPTY
78703: LIST
78704: LIST
78705: PUSH
78706: LD_INT 3
78708: PUSH
78709: LD_INT 2
78711: NEG
78712: PUSH
78713: EMPTY
78714: LIST
78715: LIST
78716: PUSH
78717: LD_INT 5
78719: PUSH
78720: LD_INT 2
78722: PUSH
78723: EMPTY
78724: LIST
78725: LIST
78726: PUSH
78727: LD_INT 3
78729: PUSH
78730: LD_INT 3
78732: PUSH
78733: EMPTY
78734: LIST
78735: LIST
78736: PUSH
78737: LD_INT 3
78739: PUSH
78740: LD_INT 2
78742: PUSH
78743: EMPTY
78744: LIST
78745: LIST
78746: PUSH
78747: LD_INT 4
78749: PUSH
78750: LD_INT 3
78752: PUSH
78753: EMPTY
78754: LIST
78755: LIST
78756: PUSH
78757: LD_INT 4
78759: PUSH
78760: LD_INT 4
78762: PUSH
78763: EMPTY
78764: LIST
78765: LIST
78766: PUSH
78767: LD_INT 3
78769: PUSH
78770: LD_INT 4
78772: PUSH
78773: EMPTY
78774: LIST
78775: LIST
78776: PUSH
78777: LD_INT 2
78779: PUSH
78780: LD_INT 3
78782: PUSH
78783: EMPTY
78784: LIST
78785: LIST
78786: PUSH
78787: LD_INT 2
78789: PUSH
78790: LD_INT 2
78792: PUSH
78793: EMPTY
78794: LIST
78795: LIST
78796: PUSH
78797: LD_INT 4
78799: PUSH
78800: LD_INT 2
78802: PUSH
78803: EMPTY
78804: LIST
78805: LIST
78806: PUSH
78807: LD_INT 2
78809: PUSH
78810: LD_INT 4
78812: PUSH
78813: EMPTY
78814: LIST
78815: LIST
78816: PUSH
78817: LD_INT 0
78819: PUSH
78820: LD_INT 4
78822: PUSH
78823: EMPTY
78824: LIST
78825: LIST
78826: PUSH
78827: LD_INT 0
78829: PUSH
78830: LD_INT 3
78832: PUSH
78833: EMPTY
78834: LIST
78835: LIST
78836: PUSH
78837: LD_INT 1
78839: PUSH
78840: LD_INT 4
78842: PUSH
78843: EMPTY
78844: LIST
78845: LIST
78846: PUSH
78847: LD_INT 1
78849: PUSH
78850: LD_INT 5
78852: PUSH
78853: EMPTY
78854: LIST
78855: LIST
78856: PUSH
78857: LD_INT 0
78859: PUSH
78860: LD_INT 5
78862: PUSH
78863: EMPTY
78864: LIST
78865: LIST
78866: PUSH
78867: LD_INT 1
78869: NEG
78870: PUSH
78871: LD_INT 4
78873: PUSH
78874: EMPTY
78875: LIST
78876: LIST
78877: PUSH
78878: LD_INT 1
78880: NEG
78881: PUSH
78882: LD_INT 3
78884: PUSH
78885: EMPTY
78886: LIST
78887: LIST
78888: PUSH
78889: LD_INT 2
78891: PUSH
78892: LD_INT 5
78894: PUSH
78895: EMPTY
78896: LIST
78897: LIST
78898: PUSH
78899: LD_INT 2
78901: NEG
78902: PUSH
78903: LD_INT 3
78905: PUSH
78906: EMPTY
78907: LIST
78908: LIST
78909: PUSH
78910: LD_INT 3
78912: NEG
78913: PUSH
78914: LD_INT 0
78916: PUSH
78917: EMPTY
78918: LIST
78919: LIST
78920: PUSH
78921: LD_INT 3
78923: NEG
78924: PUSH
78925: LD_INT 1
78927: NEG
78928: PUSH
78929: EMPTY
78930: LIST
78931: LIST
78932: PUSH
78933: LD_INT 2
78935: NEG
78936: PUSH
78937: LD_INT 0
78939: PUSH
78940: EMPTY
78941: LIST
78942: LIST
78943: PUSH
78944: LD_INT 2
78946: NEG
78947: PUSH
78948: LD_INT 1
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: PUSH
78955: LD_INT 3
78957: NEG
78958: PUSH
78959: LD_INT 1
78961: PUSH
78962: EMPTY
78963: LIST
78964: LIST
78965: PUSH
78966: LD_INT 4
78968: NEG
78969: PUSH
78970: LD_INT 0
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: PUSH
78977: LD_INT 4
78979: NEG
78980: PUSH
78981: LD_INT 1
78983: NEG
78984: PUSH
78985: EMPTY
78986: LIST
78987: LIST
78988: PUSH
78989: LD_INT 4
78991: NEG
78992: PUSH
78993: LD_INT 2
78995: NEG
78996: PUSH
78997: EMPTY
78998: LIST
78999: LIST
79000: PUSH
79001: LD_INT 2
79003: NEG
79004: PUSH
79005: LD_INT 2
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: PUSH
79012: LD_INT 4
79014: NEG
79015: PUSH
79016: LD_INT 4
79018: NEG
79019: PUSH
79020: EMPTY
79021: LIST
79022: LIST
79023: PUSH
79024: LD_INT 4
79026: NEG
79027: PUSH
79028: LD_INT 5
79030: NEG
79031: PUSH
79032: EMPTY
79033: LIST
79034: LIST
79035: PUSH
79036: LD_INT 3
79038: NEG
79039: PUSH
79040: LD_INT 4
79042: NEG
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: PUSH
79048: LD_INT 3
79050: NEG
79051: PUSH
79052: LD_INT 3
79054: NEG
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: PUSH
79060: LD_INT 4
79062: NEG
79063: PUSH
79064: LD_INT 3
79066: NEG
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: PUSH
79072: LD_INT 5
79074: NEG
79075: PUSH
79076: LD_INT 4
79078: NEG
79079: PUSH
79080: EMPTY
79081: LIST
79082: LIST
79083: PUSH
79084: LD_INT 5
79086: NEG
79087: PUSH
79088: LD_INT 5
79090: NEG
79091: PUSH
79092: EMPTY
79093: LIST
79094: LIST
79095: PUSH
79096: LD_INT 3
79098: NEG
79099: PUSH
79100: LD_INT 5
79102: NEG
79103: PUSH
79104: EMPTY
79105: LIST
79106: LIST
79107: PUSH
79108: LD_INT 5
79110: NEG
79111: PUSH
79112: LD_INT 3
79114: NEG
79115: PUSH
79116: EMPTY
79117: LIST
79118: LIST
79119: PUSH
79120: EMPTY
79121: LIST
79122: LIST
79123: LIST
79124: LIST
79125: LIST
79126: LIST
79127: LIST
79128: LIST
79129: LIST
79130: LIST
79131: LIST
79132: LIST
79133: LIST
79134: LIST
79135: LIST
79136: LIST
79137: LIST
79138: LIST
79139: LIST
79140: LIST
79141: LIST
79142: LIST
79143: LIST
79144: LIST
79145: LIST
79146: LIST
79147: LIST
79148: LIST
79149: LIST
79150: LIST
79151: LIST
79152: LIST
79153: LIST
79154: LIST
79155: LIST
79156: LIST
79157: LIST
79158: LIST
79159: LIST
79160: LIST
79161: LIST
79162: LIST
79163: LIST
79164: LIST
79165: LIST
79166: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
79167: LD_ADDR_VAR 0 30
79171: PUSH
79172: LD_INT 4
79174: PUSH
79175: LD_INT 4
79177: PUSH
79178: EMPTY
79179: LIST
79180: LIST
79181: PUSH
79182: LD_INT 4
79184: PUSH
79185: LD_INT 3
79187: PUSH
79188: EMPTY
79189: LIST
79190: LIST
79191: PUSH
79192: LD_INT 5
79194: PUSH
79195: LD_INT 4
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: PUSH
79202: LD_INT 5
79204: PUSH
79205: LD_INT 5
79207: PUSH
79208: EMPTY
79209: LIST
79210: LIST
79211: PUSH
79212: LD_INT 4
79214: PUSH
79215: LD_INT 5
79217: PUSH
79218: EMPTY
79219: LIST
79220: LIST
79221: PUSH
79222: LD_INT 3
79224: PUSH
79225: LD_INT 4
79227: PUSH
79228: EMPTY
79229: LIST
79230: LIST
79231: PUSH
79232: LD_INT 3
79234: PUSH
79235: LD_INT 3
79237: PUSH
79238: EMPTY
79239: LIST
79240: LIST
79241: PUSH
79242: LD_INT 5
79244: PUSH
79245: LD_INT 3
79247: PUSH
79248: EMPTY
79249: LIST
79250: LIST
79251: PUSH
79252: LD_INT 3
79254: PUSH
79255: LD_INT 5
79257: PUSH
79258: EMPTY
79259: LIST
79260: LIST
79261: PUSH
79262: LD_INT 0
79264: PUSH
79265: LD_INT 3
79267: PUSH
79268: EMPTY
79269: LIST
79270: LIST
79271: PUSH
79272: LD_INT 0
79274: PUSH
79275: LD_INT 2
79277: PUSH
79278: EMPTY
79279: LIST
79280: LIST
79281: PUSH
79282: LD_INT 1
79284: PUSH
79285: LD_INT 3
79287: PUSH
79288: EMPTY
79289: LIST
79290: LIST
79291: PUSH
79292: LD_INT 1
79294: PUSH
79295: LD_INT 4
79297: PUSH
79298: EMPTY
79299: LIST
79300: LIST
79301: PUSH
79302: LD_INT 0
79304: PUSH
79305: LD_INT 4
79307: PUSH
79308: EMPTY
79309: LIST
79310: LIST
79311: PUSH
79312: LD_INT 1
79314: NEG
79315: PUSH
79316: LD_INT 3
79318: PUSH
79319: EMPTY
79320: LIST
79321: LIST
79322: PUSH
79323: LD_INT 1
79325: NEG
79326: PUSH
79327: LD_INT 2
79329: PUSH
79330: EMPTY
79331: LIST
79332: LIST
79333: PUSH
79334: LD_INT 2
79336: PUSH
79337: LD_INT 4
79339: PUSH
79340: EMPTY
79341: LIST
79342: LIST
79343: PUSH
79344: LD_INT 2
79346: NEG
79347: PUSH
79348: LD_INT 2
79350: PUSH
79351: EMPTY
79352: LIST
79353: LIST
79354: PUSH
79355: LD_INT 4
79357: NEG
79358: PUSH
79359: LD_INT 0
79361: PUSH
79362: EMPTY
79363: LIST
79364: LIST
79365: PUSH
79366: LD_INT 4
79368: NEG
79369: PUSH
79370: LD_INT 1
79372: NEG
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: PUSH
79378: LD_INT 3
79380: NEG
79381: PUSH
79382: LD_INT 0
79384: PUSH
79385: EMPTY
79386: LIST
79387: LIST
79388: PUSH
79389: LD_INT 3
79391: NEG
79392: PUSH
79393: LD_INT 1
79395: PUSH
79396: EMPTY
79397: LIST
79398: LIST
79399: PUSH
79400: LD_INT 4
79402: NEG
79403: PUSH
79404: LD_INT 1
79406: PUSH
79407: EMPTY
79408: LIST
79409: LIST
79410: PUSH
79411: LD_INT 5
79413: NEG
79414: PUSH
79415: LD_INT 0
79417: PUSH
79418: EMPTY
79419: LIST
79420: LIST
79421: PUSH
79422: LD_INT 5
79424: NEG
79425: PUSH
79426: LD_INT 1
79428: NEG
79429: PUSH
79430: EMPTY
79431: LIST
79432: LIST
79433: PUSH
79434: LD_INT 5
79436: NEG
79437: PUSH
79438: LD_INT 2
79440: NEG
79441: PUSH
79442: EMPTY
79443: LIST
79444: LIST
79445: PUSH
79446: LD_INT 3
79448: NEG
79449: PUSH
79450: LD_INT 2
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: PUSH
79457: LD_INT 3
79459: NEG
79460: PUSH
79461: LD_INT 3
79463: NEG
79464: PUSH
79465: EMPTY
79466: LIST
79467: LIST
79468: PUSH
79469: LD_INT 3
79471: NEG
79472: PUSH
79473: LD_INT 4
79475: NEG
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: PUSH
79481: LD_INT 2
79483: NEG
79484: PUSH
79485: LD_INT 3
79487: NEG
79488: PUSH
79489: EMPTY
79490: LIST
79491: LIST
79492: PUSH
79493: LD_INT 2
79495: NEG
79496: PUSH
79497: LD_INT 2
79499: NEG
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: PUSH
79505: LD_INT 3
79507: NEG
79508: PUSH
79509: LD_INT 2
79511: NEG
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PUSH
79517: LD_INT 4
79519: NEG
79520: PUSH
79521: LD_INT 3
79523: NEG
79524: PUSH
79525: EMPTY
79526: LIST
79527: LIST
79528: PUSH
79529: LD_INT 4
79531: NEG
79532: PUSH
79533: LD_INT 4
79535: NEG
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: PUSH
79541: LD_INT 2
79543: NEG
79544: PUSH
79545: LD_INT 4
79547: NEG
79548: PUSH
79549: EMPTY
79550: LIST
79551: LIST
79552: PUSH
79553: LD_INT 4
79555: NEG
79556: PUSH
79557: LD_INT 2
79559: NEG
79560: PUSH
79561: EMPTY
79562: LIST
79563: LIST
79564: PUSH
79565: LD_INT 0
79567: PUSH
79568: LD_INT 4
79570: NEG
79571: PUSH
79572: EMPTY
79573: LIST
79574: LIST
79575: PUSH
79576: LD_INT 0
79578: PUSH
79579: LD_INT 5
79581: NEG
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 1
79589: PUSH
79590: LD_INT 4
79592: NEG
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: PUSH
79598: LD_INT 1
79600: PUSH
79601: LD_INT 3
79603: NEG
79604: PUSH
79605: EMPTY
79606: LIST
79607: LIST
79608: PUSH
79609: LD_INT 0
79611: PUSH
79612: LD_INT 3
79614: NEG
79615: PUSH
79616: EMPTY
79617: LIST
79618: LIST
79619: PUSH
79620: LD_INT 1
79622: NEG
79623: PUSH
79624: LD_INT 4
79626: NEG
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: PUSH
79632: LD_INT 1
79634: NEG
79635: PUSH
79636: LD_INT 5
79638: NEG
79639: PUSH
79640: EMPTY
79641: LIST
79642: LIST
79643: PUSH
79644: LD_INT 2
79646: PUSH
79647: LD_INT 3
79649: NEG
79650: PUSH
79651: EMPTY
79652: LIST
79653: LIST
79654: PUSH
79655: LD_INT 2
79657: NEG
79658: PUSH
79659: LD_INT 5
79661: NEG
79662: PUSH
79663: EMPTY
79664: LIST
79665: LIST
79666: PUSH
79667: EMPTY
79668: LIST
79669: LIST
79670: LIST
79671: LIST
79672: LIST
79673: LIST
79674: LIST
79675: LIST
79676: LIST
79677: LIST
79678: LIST
79679: LIST
79680: LIST
79681: LIST
79682: LIST
79683: LIST
79684: LIST
79685: LIST
79686: LIST
79687: LIST
79688: LIST
79689: LIST
79690: LIST
79691: LIST
79692: LIST
79693: LIST
79694: LIST
79695: LIST
79696: LIST
79697: LIST
79698: LIST
79699: LIST
79700: LIST
79701: LIST
79702: LIST
79703: LIST
79704: LIST
79705: LIST
79706: LIST
79707: LIST
79708: LIST
79709: LIST
79710: LIST
79711: LIST
79712: LIST
79713: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
79714: LD_ADDR_VAR 0 31
79718: PUSH
79719: LD_INT 0
79721: PUSH
79722: LD_INT 4
79724: PUSH
79725: EMPTY
79726: LIST
79727: LIST
79728: PUSH
79729: LD_INT 0
79731: PUSH
79732: LD_INT 3
79734: PUSH
79735: EMPTY
79736: LIST
79737: LIST
79738: PUSH
79739: LD_INT 1
79741: PUSH
79742: LD_INT 4
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: PUSH
79749: LD_INT 1
79751: PUSH
79752: LD_INT 5
79754: PUSH
79755: EMPTY
79756: LIST
79757: LIST
79758: PUSH
79759: LD_INT 0
79761: PUSH
79762: LD_INT 5
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: PUSH
79769: LD_INT 1
79771: NEG
79772: PUSH
79773: LD_INT 4
79775: PUSH
79776: EMPTY
79777: LIST
79778: LIST
79779: PUSH
79780: LD_INT 1
79782: NEG
79783: PUSH
79784: LD_INT 3
79786: PUSH
79787: EMPTY
79788: LIST
79789: LIST
79790: PUSH
79791: LD_INT 2
79793: PUSH
79794: LD_INT 5
79796: PUSH
79797: EMPTY
79798: LIST
79799: LIST
79800: PUSH
79801: LD_INT 2
79803: NEG
79804: PUSH
79805: LD_INT 3
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: PUSH
79812: LD_INT 3
79814: NEG
79815: PUSH
79816: LD_INT 0
79818: PUSH
79819: EMPTY
79820: LIST
79821: LIST
79822: PUSH
79823: LD_INT 3
79825: NEG
79826: PUSH
79827: LD_INT 1
79829: NEG
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: PUSH
79835: LD_INT 2
79837: NEG
79838: PUSH
79839: LD_INT 0
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: PUSH
79846: LD_INT 2
79848: NEG
79849: PUSH
79850: LD_INT 1
79852: PUSH
79853: EMPTY
79854: LIST
79855: LIST
79856: PUSH
79857: LD_INT 3
79859: NEG
79860: PUSH
79861: LD_INT 1
79863: PUSH
79864: EMPTY
79865: LIST
79866: LIST
79867: PUSH
79868: LD_INT 4
79870: NEG
79871: PUSH
79872: LD_INT 0
79874: PUSH
79875: EMPTY
79876: LIST
79877: LIST
79878: PUSH
79879: LD_INT 4
79881: NEG
79882: PUSH
79883: LD_INT 1
79885: NEG
79886: PUSH
79887: EMPTY
79888: LIST
79889: LIST
79890: PUSH
79891: LD_INT 4
79893: NEG
79894: PUSH
79895: LD_INT 2
79897: NEG
79898: PUSH
79899: EMPTY
79900: LIST
79901: LIST
79902: PUSH
79903: LD_INT 2
79905: NEG
79906: PUSH
79907: LD_INT 2
79909: PUSH
79910: EMPTY
79911: LIST
79912: LIST
79913: PUSH
79914: LD_INT 4
79916: NEG
79917: PUSH
79918: LD_INT 4
79920: NEG
79921: PUSH
79922: EMPTY
79923: LIST
79924: LIST
79925: PUSH
79926: LD_INT 4
79928: NEG
79929: PUSH
79930: LD_INT 5
79932: NEG
79933: PUSH
79934: EMPTY
79935: LIST
79936: LIST
79937: PUSH
79938: LD_INT 3
79940: NEG
79941: PUSH
79942: LD_INT 4
79944: NEG
79945: PUSH
79946: EMPTY
79947: LIST
79948: LIST
79949: PUSH
79950: LD_INT 3
79952: NEG
79953: PUSH
79954: LD_INT 3
79956: NEG
79957: PUSH
79958: EMPTY
79959: LIST
79960: LIST
79961: PUSH
79962: LD_INT 4
79964: NEG
79965: PUSH
79966: LD_INT 3
79968: NEG
79969: PUSH
79970: EMPTY
79971: LIST
79972: LIST
79973: PUSH
79974: LD_INT 5
79976: NEG
79977: PUSH
79978: LD_INT 4
79980: NEG
79981: PUSH
79982: EMPTY
79983: LIST
79984: LIST
79985: PUSH
79986: LD_INT 5
79988: NEG
79989: PUSH
79990: LD_INT 5
79992: NEG
79993: PUSH
79994: EMPTY
79995: LIST
79996: LIST
79997: PUSH
79998: LD_INT 3
80000: NEG
80001: PUSH
80002: LD_INT 5
80004: NEG
80005: PUSH
80006: EMPTY
80007: LIST
80008: LIST
80009: PUSH
80010: LD_INT 5
80012: NEG
80013: PUSH
80014: LD_INT 3
80016: NEG
80017: PUSH
80018: EMPTY
80019: LIST
80020: LIST
80021: PUSH
80022: LD_INT 0
80024: PUSH
80025: LD_INT 3
80027: NEG
80028: PUSH
80029: EMPTY
80030: LIST
80031: LIST
80032: PUSH
80033: LD_INT 0
80035: PUSH
80036: LD_INT 4
80038: NEG
80039: PUSH
80040: EMPTY
80041: LIST
80042: LIST
80043: PUSH
80044: LD_INT 1
80046: PUSH
80047: LD_INT 3
80049: NEG
80050: PUSH
80051: EMPTY
80052: LIST
80053: LIST
80054: PUSH
80055: LD_INT 1
80057: PUSH
80058: LD_INT 2
80060: NEG
80061: PUSH
80062: EMPTY
80063: LIST
80064: LIST
80065: PUSH
80066: LD_INT 0
80068: PUSH
80069: LD_INT 2
80071: NEG
80072: PUSH
80073: EMPTY
80074: LIST
80075: LIST
80076: PUSH
80077: LD_INT 1
80079: NEG
80080: PUSH
80081: LD_INT 3
80083: NEG
80084: PUSH
80085: EMPTY
80086: LIST
80087: LIST
80088: PUSH
80089: LD_INT 1
80091: NEG
80092: PUSH
80093: LD_INT 4
80095: NEG
80096: PUSH
80097: EMPTY
80098: LIST
80099: LIST
80100: PUSH
80101: LD_INT 2
80103: PUSH
80104: LD_INT 2
80106: NEG
80107: PUSH
80108: EMPTY
80109: LIST
80110: LIST
80111: PUSH
80112: LD_INT 2
80114: NEG
80115: PUSH
80116: LD_INT 4
80118: NEG
80119: PUSH
80120: EMPTY
80121: LIST
80122: LIST
80123: PUSH
80124: LD_INT 4
80126: PUSH
80127: LD_INT 0
80129: PUSH
80130: EMPTY
80131: LIST
80132: LIST
80133: PUSH
80134: LD_INT 4
80136: PUSH
80137: LD_INT 1
80139: NEG
80140: PUSH
80141: EMPTY
80142: LIST
80143: LIST
80144: PUSH
80145: LD_INT 5
80147: PUSH
80148: LD_INT 0
80150: PUSH
80151: EMPTY
80152: LIST
80153: LIST
80154: PUSH
80155: LD_INT 5
80157: PUSH
80158: LD_INT 1
80160: PUSH
80161: EMPTY
80162: LIST
80163: LIST
80164: PUSH
80165: LD_INT 4
80167: PUSH
80168: LD_INT 1
80170: PUSH
80171: EMPTY
80172: LIST
80173: LIST
80174: PUSH
80175: LD_INT 3
80177: PUSH
80178: LD_INT 0
80180: PUSH
80181: EMPTY
80182: LIST
80183: LIST
80184: PUSH
80185: LD_INT 3
80187: PUSH
80188: LD_INT 1
80190: NEG
80191: PUSH
80192: EMPTY
80193: LIST
80194: LIST
80195: PUSH
80196: LD_INT 3
80198: PUSH
80199: LD_INT 2
80201: NEG
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: PUSH
80207: LD_INT 5
80209: PUSH
80210: LD_INT 2
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: PUSH
80217: EMPTY
80218: LIST
80219: LIST
80220: LIST
80221: LIST
80222: LIST
80223: LIST
80224: LIST
80225: LIST
80226: LIST
80227: LIST
80228: LIST
80229: LIST
80230: LIST
80231: LIST
80232: LIST
80233: LIST
80234: LIST
80235: LIST
80236: LIST
80237: LIST
80238: LIST
80239: LIST
80240: LIST
80241: LIST
80242: LIST
80243: LIST
80244: LIST
80245: LIST
80246: LIST
80247: LIST
80248: LIST
80249: LIST
80250: LIST
80251: LIST
80252: LIST
80253: LIST
80254: LIST
80255: LIST
80256: LIST
80257: LIST
80258: LIST
80259: LIST
80260: LIST
80261: LIST
80262: LIST
80263: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
80264: LD_ADDR_VAR 0 32
80268: PUSH
80269: LD_INT 4
80271: NEG
80272: PUSH
80273: LD_INT 0
80275: PUSH
80276: EMPTY
80277: LIST
80278: LIST
80279: PUSH
80280: LD_INT 4
80282: NEG
80283: PUSH
80284: LD_INT 1
80286: NEG
80287: PUSH
80288: EMPTY
80289: LIST
80290: LIST
80291: PUSH
80292: LD_INT 3
80294: NEG
80295: PUSH
80296: LD_INT 0
80298: PUSH
80299: EMPTY
80300: LIST
80301: LIST
80302: PUSH
80303: LD_INT 3
80305: NEG
80306: PUSH
80307: LD_INT 1
80309: PUSH
80310: EMPTY
80311: LIST
80312: LIST
80313: PUSH
80314: LD_INT 4
80316: NEG
80317: PUSH
80318: LD_INT 1
80320: PUSH
80321: EMPTY
80322: LIST
80323: LIST
80324: PUSH
80325: LD_INT 5
80327: NEG
80328: PUSH
80329: LD_INT 0
80331: PUSH
80332: EMPTY
80333: LIST
80334: LIST
80335: PUSH
80336: LD_INT 5
80338: NEG
80339: PUSH
80340: LD_INT 1
80342: NEG
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PUSH
80348: LD_INT 5
80350: NEG
80351: PUSH
80352: LD_INT 2
80354: NEG
80355: PUSH
80356: EMPTY
80357: LIST
80358: LIST
80359: PUSH
80360: LD_INT 3
80362: NEG
80363: PUSH
80364: LD_INT 2
80366: PUSH
80367: EMPTY
80368: LIST
80369: LIST
80370: PUSH
80371: LD_INT 3
80373: NEG
80374: PUSH
80375: LD_INT 3
80377: NEG
80378: PUSH
80379: EMPTY
80380: LIST
80381: LIST
80382: PUSH
80383: LD_INT 3
80385: NEG
80386: PUSH
80387: LD_INT 4
80389: NEG
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 2
80397: NEG
80398: PUSH
80399: LD_INT 3
80401: NEG
80402: PUSH
80403: EMPTY
80404: LIST
80405: LIST
80406: PUSH
80407: LD_INT 2
80409: NEG
80410: PUSH
80411: LD_INT 2
80413: NEG
80414: PUSH
80415: EMPTY
80416: LIST
80417: LIST
80418: PUSH
80419: LD_INT 3
80421: NEG
80422: PUSH
80423: LD_INT 2
80425: NEG
80426: PUSH
80427: EMPTY
80428: LIST
80429: LIST
80430: PUSH
80431: LD_INT 4
80433: NEG
80434: PUSH
80435: LD_INT 3
80437: NEG
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: PUSH
80443: LD_INT 4
80445: NEG
80446: PUSH
80447: LD_INT 4
80449: NEG
80450: PUSH
80451: EMPTY
80452: LIST
80453: LIST
80454: PUSH
80455: LD_INT 2
80457: NEG
80458: PUSH
80459: LD_INT 4
80461: NEG
80462: PUSH
80463: EMPTY
80464: LIST
80465: LIST
80466: PUSH
80467: LD_INT 4
80469: NEG
80470: PUSH
80471: LD_INT 2
80473: NEG
80474: PUSH
80475: EMPTY
80476: LIST
80477: LIST
80478: PUSH
80479: LD_INT 0
80481: PUSH
80482: LD_INT 4
80484: NEG
80485: PUSH
80486: EMPTY
80487: LIST
80488: LIST
80489: PUSH
80490: LD_INT 0
80492: PUSH
80493: LD_INT 5
80495: NEG
80496: PUSH
80497: EMPTY
80498: LIST
80499: LIST
80500: PUSH
80501: LD_INT 1
80503: PUSH
80504: LD_INT 4
80506: NEG
80507: PUSH
80508: EMPTY
80509: LIST
80510: LIST
80511: PUSH
80512: LD_INT 1
80514: PUSH
80515: LD_INT 3
80517: NEG
80518: PUSH
80519: EMPTY
80520: LIST
80521: LIST
80522: PUSH
80523: LD_INT 0
80525: PUSH
80526: LD_INT 3
80528: NEG
80529: PUSH
80530: EMPTY
80531: LIST
80532: LIST
80533: PUSH
80534: LD_INT 1
80536: NEG
80537: PUSH
80538: LD_INT 4
80540: NEG
80541: PUSH
80542: EMPTY
80543: LIST
80544: LIST
80545: PUSH
80546: LD_INT 1
80548: NEG
80549: PUSH
80550: LD_INT 5
80552: NEG
80553: PUSH
80554: EMPTY
80555: LIST
80556: LIST
80557: PUSH
80558: LD_INT 2
80560: PUSH
80561: LD_INT 3
80563: NEG
80564: PUSH
80565: EMPTY
80566: LIST
80567: LIST
80568: PUSH
80569: LD_INT 2
80571: NEG
80572: PUSH
80573: LD_INT 5
80575: NEG
80576: PUSH
80577: EMPTY
80578: LIST
80579: LIST
80580: PUSH
80581: LD_INT 3
80583: PUSH
80584: LD_INT 0
80586: PUSH
80587: EMPTY
80588: LIST
80589: LIST
80590: PUSH
80591: LD_INT 3
80593: PUSH
80594: LD_INT 1
80596: NEG
80597: PUSH
80598: EMPTY
80599: LIST
80600: LIST
80601: PUSH
80602: LD_INT 4
80604: PUSH
80605: LD_INT 0
80607: PUSH
80608: EMPTY
80609: LIST
80610: LIST
80611: PUSH
80612: LD_INT 4
80614: PUSH
80615: LD_INT 1
80617: PUSH
80618: EMPTY
80619: LIST
80620: LIST
80621: PUSH
80622: LD_INT 3
80624: PUSH
80625: LD_INT 1
80627: PUSH
80628: EMPTY
80629: LIST
80630: LIST
80631: PUSH
80632: LD_INT 2
80634: PUSH
80635: LD_INT 0
80637: PUSH
80638: EMPTY
80639: LIST
80640: LIST
80641: PUSH
80642: LD_INT 2
80644: PUSH
80645: LD_INT 1
80647: NEG
80648: PUSH
80649: EMPTY
80650: LIST
80651: LIST
80652: PUSH
80653: LD_INT 2
80655: PUSH
80656: LD_INT 2
80658: NEG
80659: PUSH
80660: EMPTY
80661: LIST
80662: LIST
80663: PUSH
80664: LD_INT 4
80666: PUSH
80667: LD_INT 2
80669: PUSH
80670: EMPTY
80671: LIST
80672: LIST
80673: PUSH
80674: LD_INT 4
80676: PUSH
80677: LD_INT 4
80679: PUSH
80680: EMPTY
80681: LIST
80682: LIST
80683: PUSH
80684: LD_INT 4
80686: PUSH
80687: LD_INT 3
80689: PUSH
80690: EMPTY
80691: LIST
80692: LIST
80693: PUSH
80694: LD_INT 5
80696: PUSH
80697: LD_INT 4
80699: PUSH
80700: EMPTY
80701: LIST
80702: LIST
80703: PUSH
80704: LD_INT 5
80706: PUSH
80707: LD_INT 5
80709: PUSH
80710: EMPTY
80711: LIST
80712: LIST
80713: PUSH
80714: LD_INT 4
80716: PUSH
80717: LD_INT 5
80719: PUSH
80720: EMPTY
80721: LIST
80722: LIST
80723: PUSH
80724: LD_INT 3
80726: PUSH
80727: LD_INT 4
80729: PUSH
80730: EMPTY
80731: LIST
80732: LIST
80733: PUSH
80734: LD_INT 3
80736: PUSH
80737: LD_INT 3
80739: PUSH
80740: EMPTY
80741: LIST
80742: LIST
80743: PUSH
80744: LD_INT 5
80746: PUSH
80747: LD_INT 3
80749: PUSH
80750: EMPTY
80751: LIST
80752: LIST
80753: PUSH
80754: LD_INT 3
80756: PUSH
80757: LD_INT 5
80759: PUSH
80760: EMPTY
80761: LIST
80762: LIST
80763: PUSH
80764: EMPTY
80765: LIST
80766: LIST
80767: LIST
80768: LIST
80769: LIST
80770: LIST
80771: LIST
80772: LIST
80773: LIST
80774: LIST
80775: LIST
80776: LIST
80777: LIST
80778: LIST
80779: LIST
80780: LIST
80781: LIST
80782: LIST
80783: LIST
80784: LIST
80785: LIST
80786: LIST
80787: LIST
80788: LIST
80789: LIST
80790: LIST
80791: LIST
80792: LIST
80793: LIST
80794: LIST
80795: LIST
80796: LIST
80797: LIST
80798: LIST
80799: LIST
80800: LIST
80801: LIST
80802: LIST
80803: LIST
80804: LIST
80805: LIST
80806: LIST
80807: LIST
80808: LIST
80809: LIST
80810: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
80811: LD_ADDR_VAR 0 33
80815: PUSH
80816: LD_INT 4
80818: NEG
80819: PUSH
80820: LD_INT 4
80822: NEG
80823: PUSH
80824: EMPTY
80825: LIST
80826: LIST
80827: PUSH
80828: LD_INT 4
80830: NEG
80831: PUSH
80832: LD_INT 5
80834: NEG
80835: PUSH
80836: EMPTY
80837: LIST
80838: LIST
80839: PUSH
80840: LD_INT 3
80842: NEG
80843: PUSH
80844: LD_INT 4
80846: NEG
80847: PUSH
80848: EMPTY
80849: LIST
80850: LIST
80851: PUSH
80852: LD_INT 3
80854: NEG
80855: PUSH
80856: LD_INT 3
80858: NEG
80859: PUSH
80860: EMPTY
80861: LIST
80862: LIST
80863: PUSH
80864: LD_INT 4
80866: NEG
80867: PUSH
80868: LD_INT 3
80870: NEG
80871: PUSH
80872: EMPTY
80873: LIST
80874: LIST
80875: PUSH
80876: LD_INT 5
80878: NEG
80879: PUSH
80880: LD_INT 4
80882: NEG
80883: PUSH
80884: EMPTY
80885: LIST
80886: LIST
80887: PUSH
80888: LD_INT 5
80890: NEG
80891: PUSH
80892: LD_INT 5
80894: NEG
80895: PUSH
80896: EMPTY
80897: LIST
80898: LIST
80899: PUSH
80900: LD_INT 3
80902: NEG
80903: PUSH
80904: LD_INT 5
80906: NEG
80907: PUSH
80908: EMPTY
80909: LIST
80910: LIST
80911: PUSH
80912: LD_INT 5
80914: NEG
80915: PUSH
80916: LD_INT 3
80918: NEG
80919: PUSH
80920: EMPTY
80921: LIST
80922: LIST
80923: PUSH
80924: LD_INT 0
80926: PUSH
80927: LD_INT 3
80929: NEG
80930: PUSH
80931: EMPTY
80932: LIST
80933: LIST
80934: PUSH
80935: LD_INT 0
80937: PUSH
80938: LD_INT 4
80940: NEG
80941: PUSH
80942: EMPTY
80943: LIST
80944: LIST
80945: PUSH
80946: LD_INT 1
80948: PUSH
80949: LD_INT 3
80951: NEG
80952: PUSH
80953: EMPTY
80954: LIST
80955: LIST
80956: PUSH
80957: LD_INT 1
80959: PUSH
80960: LD_INT 2
80962: NEG
80963: PUSH
80964: EMPTY
80965: LIST
80966: LIST
80967: PUSH
80968: LD_INT 0
80970: PUSH
80971: LD_INT 2
80973: NEG
80974: PUSH
80975: EMPTY
80976: LIST
80977: LIST
80978: PUSH
80979: LD_INT 1
80981: NEG
80982: PUSH
80983: LD_INT 3
80985: NEG
80986: PUSH
80987: EMPTY
80988: LIST
80989: LIST
80990: PUSH
80991: LD_INT 1
80993: NEG
80994: PUSH
80995: LD_INT 4
80997: NEG
80998: PUSH
80999: EMPTY
81000: LIST
81001: LIST
81002: PUSH
81003: LD_INT 2
81005: PUSH
81006: LD_INT 2
81008: NEG
81009: PUSH
81010: EMPTY
81011: LIST
81012: LIST
81013: PUSH
81014: LD_INT 2
81016: NEG
81017: PUSH
81018: LD_INT 4
81020: NEG
81021: PUSH
81022: EMPTY
81023: LIST
81024: LIST
81025: PUSH
81026: LD_INT 4
81028: PUSH
81029: LD_INT 0
81031: PUSH
81032: EMPTY
81033: LIST
81034: LIST
81035: PUSH
81036: LD_INT 4
81038: PUSH
81039: LD_INT 1
81041: NEG
81042: PUSH
81043: EMPTY
81044: LIST
81045: LIST
81046: PUSH
81047: LD_INT 5
81049: PUSH
81050: LD_INT 0
81052: PUSH
81053: EMPTY
81054: LIST
81055: LIST
81056: PUSH
81057: LD_INT 5
81059: PUSH
81060: LD_INT 1
81062: PUSH
81063: EMPTY
81064: LIST
81065: LIST
81066: PUSH
81067: LD_INT 4
81069: PUSH
81070: LD_INT 1
81072: PUSH
81073: EMPTY
81074: LIST
81075: LIST
81076: PUSH
81077: LD_INT 3
81079: PUSH
81080: LD_INT 0
81082: PUSH
81083: EMPTY
81084: LIST
81085: LIST
81086: PUSH
81087: LD_INT 3
81089: PUSH
81090: LD_INT 1
81092: NEG
81093: PUSH
81094: EMPTY
81095: LIST
81096: LIST
81097: PUSH
81098: LD_INT 3
81100: PUSH
81101: LD_INT 2
81103: NEG
81104: PUSH
81105: EMPTY
81106: LIST
81107: LIST
81108: PUSH
81109: LD_INT 5
81111: PUSH
81112: LD_INT 2
81114: PUSH
81115: EMPTY
81116: LIST
81117: LIST
81118: PUSH
81119: LD_INT 3
81121: PUSH
81122: LD_INT 3
81124: PUSH
81125: EMPTY
81126: LIST
81127: LIST
81128: PUSH
81129: LD_INT 3
81131: PUSH
81132: LD_INT 2
81134: PUSH
81135: EMPTY
81136: LIST
81137: LIST
81138: PUSH
81139: LD_INT 4
81141: PUSH
81142: LD_INT 3
81144: PUSH
81145: EMPTY
81146: LIST
81147: LIST
81148: PUSH
81149: LD_INT 4
81151: PUSH
81152: LD_INT 4
81154: PUSH
81155: EMPTY
81156: LIST
81157: LIST
81158: PUSH
81159: LD_INT 3
81161: PUSH
81162: LD_INT 4
81164: PUSH
81165: EMPTY
81166: LIST
81167: LIST
81168: PUSH
81169: LD_INT 2
81171: PUSH
81172: LD_INT 3
81174: PUSH
81175: EMPTY
81176: LIST
81177: LIST
81178: PUSH
81179: LD_INT 2
81181: PUSH
81182: LD_INT 2
81184: PUSH
81185: EMPTY
81186: LIST
81187: LIST
81188: PUSH
81189: LD_INT 4
81191: PUSH
81192: LD_INT 2
81194: PUSH
81195: EMPTY
81196: LIST
81197: LIST
81198: PUSH
81199: LD_INT 2
81201: PUSH
81202: LD_INT 4
81204: PUSH
81205: EMPTY
81206: LIST
81207: LIST
81208: PUSH
81209: LD_INT 0
81211: PUSH
81212: LD_INT 4
81214: PUSH
81215: EMPTY
81216: LIST
81217: LIST
81218: PUSH
81219: LD_INT 0
81221: PUSH
81222: LD_INT 3
81224: PUSH
81225: EMPTY
81226: LIST
81227: LIST
81228: PUSH
81229: LD_INT 1
81231: PUSH
81232: LD_INT 4
81234: PUSH
81235: EMPTY
81236: LIST
81237: LIST
81238: PUSH
81239: LD_INT 1
81241: PUSH
81242: LD_INT 5
81244: PUSH
81245: EMPTY
81246: LIST
81247: LIST
81248: PUSH
81249: LD_INT 0
81251: PUSH
81252: LD_INT 5
81254: PUSH
81255: EMPTY
81256: LIST
81257: LIST
81258: PUSH
81259: LD_INT 1
81261: NEG
81262: PUSH
81263: LD_INT 4
81265: PUSH
81266: EMPTY
81267: LIST
81268: LIST
81269: PUSH
81270: LD_INT 1
81272: NEG
81273: PUSH
81274: LD_INT 3
81276: PUSH
81277: EMPTY
81278: LIST
81279: LIST
81280: PUSH
81281: LD_INT 2
81283: PUSH
81284: LD_INT 5
81286: PUSH
81287: EMPTY
81288: LIST
81289: LIST
81290: PUSH
81291: LD_INT 2
81293: NEG
81294: PUSH
81295: LD_INT 3
81297: PUSH
81298: EMPTY
81299: LIST
81300: LIST
81301: PUSH
81302: EMPTY
81303: LIST
81304: LIST
81305: LIST
81306: LIST
81307: LIST
81308: LIST
81309: LIST
81310: LIST
81311: LIST
81312: LIST
81313: LIST
81314: LIST
81315: LIST
81316: LIST
81317: LIST
81318: LIST
81319: LIST
81320: LIST
81321: LIST
81322: LIST
81323: LIST
81324: LIST
81325: LIST
81326: LIST
81327: LIST
81328: LIST
81329: LIST
81330: LIST
81331: LIST
81332: LIST
81333: LIST
81334: LIST
81335: LIST
81336: LIST
81337: LIST
81338: LIST
81339: LIST
81340: LIST
81341: LIST
81342: LIST
81343: LIST
81344: LIST
81345: LIST
81346: LIST
81347: LIST
81348: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
81349: LD_ADDR_VAR 0 34
81353: PUSH
81354: LD_INT 0
81356: PUSH
81357: LD_INT 4
81359: NEG
81360: PUSH
81361: EMPTY
81362: LIST
81363: LIST
81364: PUSH
81365: LD_INT 0
81367: PUSH
81368: LD_INT 5
81370: NEG
81371: PUSH
81372: EMPTY
81373: LIST
81374: LIST
81375: PUSH
81376: LD_INT 1
81378: PUSH
81379: LD_INT 4
81381: NEG
81382: PUSH
81383: EMPTY
81384: LIST
81385: LIST
81386: PUSH
81387: LD_INT 1
81389: PUSH
81390: LD_INT 3
81392: NEG
81393: PUSH
81394: EMPTY
81395: LIST
81396: LIST
81397: PUSH
81398: LD_INT 0
81400: PUSH
81401: LD_INT 3
81403: NEG
81404: PUSH
81405: EMPTY
81406: LIST
81407: LIST
81408: PUSH
81409: LD_INT 1
81411: NEG
81412: PUSH
81413: LD_INT 4
81415: NEG
81416: PUSH
81417: EMPTY
81418: LIST
81419: LIST
81420: PUSH
81421: LD_INT 1
81423: NEG
81424: PUSH
81425: LD_INT 5
81427: NEG
81428: PUSH
81429: EMPTY
81430: LIST
81431: LIST
81432: PUSH
81433: LD_INT 2
81435: PUSH
81436: LD_INT 3
81438: NEG
81439: PUSH
81440: EMPTY
81441: LIST
81442: LIST
81443: PUSH
81444: LD_INT 2
81446: NEG
81447: PUSH
81448: LD_INT 5
81450: NEG
81451: PUSH
81452: EMPTY
81453: LIST
81454: LIST
81455: PUSH
81456: LD_INT 3
81458: PUSH
81459: LD_INT 0
81461: PUSH
81462: EMPTY
81463: LIST
81464: LIST
81465: PUSH
81466: LD_INT 3
81468: PUSH
81469: LD_INT 1
81471: NEG
81472: PUSH
81473: EMPTY
81474: LIST
81475: LIST
81476: PUSH
81477: LD_INT 4
81479: PUSH
81480: LD_INT 0
81482: PUSH
81483: EMPTY
81484: LIST
81485: LIST
81486: PUSH
81487: LD_INT 4
81489: PUSH
81490: LD_INT 1
81492: PUSH
81493: EMPTY
81494: LIST
81495: LIST
81496: PUSH
81497: LD_INT 3
81499: PUSH
81500: LD_INT 1
81502: PUSH
81503: EMPTY
81504: LIST
81505: LIST
81506: PUSH
81507: LD_INT 2
81509: PUSH
81510: LD_INT 0
81512: PUSH
81513: EMPTY
81514: LIST
81515: LIST
81516: PUSH
81517: LD_INT 2
81519: PUSH
81520: LD_INT 1
81522: NEG
81523: PUSH
81524: EMPTY
81525: LIST
81526: LIST
81527: PUSH
81528: LD_INT 2
81530: PUSH
81531: LD_INT 2
81533: NEG
81534: PUSH
81535: EMPTY
81536: LIST
81537: LIST
81538: PUSH
81539: LD_INT 4
81541: PUSH
81542: LD_INT 2
81544: PUSH
81545: EMPTY
81546: LIST
81547: LIST
81548: PUSH
81549: LD_INT 4
81551: PUSH
81552: LD_INT 4
81554: PUSH
81555: EMPTY
81556: LIST
81557: LIST
81558: PUSH
81559: LD_INT 4
81561: PUSH
81562: LD_INT 3
81564: PUSH
81565: EMPTY
81566: LIST
81567: LIST
81568: PUSH
81569: LD_INT 5
81571: PUSH
81572: LD_INT 4
81574: PUSH
81575: EMPTY
81576: LIST
81577: LIST
81578: PUSH
81579: LD_INT 5
81581: PUSH
81582: LD_INT 5
81584: PUSH
81585: EMPTY
81586: LIST
81587: LIST
81588: PUSH
81589: LD_INT 4
81591: PUSH
81592: LD_INT 5
81594: PUSH
81595: EMPTY
81596: LIST
81597: LIST
81598: PUSH
81599: LD_INT 3
81601: PUSH
81602: LD_INT 4
81604: PUSH
81605: EMPTY
81606: LIST
81607: LIST
81608: PUSH
81609: LD_INT 3
81611: PUSH
81612: LD_INT 3
81614: PUSH
81615: EMPTY
81616: LIST
81617: LIST
81618: PUSH
81619: LD_INT 5
81621: PUSH
81622: LD_INT 3
81624: PUSH
81625: EMPTY
81626: LIST
81627: LIST
81628: PUSH
81629: LD_INT 3
81631: PUSH
81632: LD_INT 5
81634: PUSH
81635: EMPTY
81636: LIST
81637: LIST
81638: PUSH
81639: LD_INT 0
81641: PUSH
81642: LD_INT 3
81644: PUSH
81645: EMPTY
81646: LIST
81647: LIST
81648: PUSH
81649: LD_INT 0
81651: PUSH
81652: LD_INT 2
81654: PUSH
81655: EMPTY
81656: LIST
81657: LIST
81658: PUSH
81659: LD_INT 1
81661: PUSH
81662: LD_INT 3
81664: PUSH
81665: EMPTY
81666: LIST
81667: LIST
81668: PUSH
81669: LD_INT 1
81671: PUSH
81672: LD_INT 4
81674: PUSH
81675: EMPTY
81676: LIST
81677: LIST
81678: PUSH
81679: LD_INT 0
81681: PUSH
81682: LD_INT 4
81684: PUSH
81685: EMPTY
81686: LIST
81687: LIST
81688: PUSH
81689: LD_INT 1
81691: NEG
81692: PUSH
81693: LD_INT 3
81695: PUSH
81696: EMPTY
81697: LIST
81698: LIST
81699: PUSH
81700: LD_INT 1
81702: NEG
81703: PUSH
81704: LD_INT 2
81706: PUSH
81707: EMPTY
81708: LIST
81709: LIST
81710: PUSH
81711: LD_INT 2
81713: PUSH
81714: LD_INT 4
81716: PUSH
81717: EMPTY
81718: LIST
81719: LIST
81720: PUSH
81721: LD_INT 2
81723: NEG
81724: PUSH
81725: LD_INT 2
81727: PUSH
81728: EMPTY
81729: LIST
81730: LIST
81731: PUSH
81732: LD_INT 4
81734: NEG
81735: PUSH
81736: LD_INT 0
81738: PUSH
81739: EMPTY
81740: LIST
81741: LIST
81742: PUSH
81743: LD_INT 4
81745: NEG
81746: PUSH
81747: LD_INT 1
81749: NEG
81750: PUSH
81751: EMPTY
81752: LIST
81753: LIST
81754: PUSH
81755: LD_INT 3
81757: NEG
81758: PUSH
81759: LD_INT 0
81761: PUSH
81762: EMPTY
81763: LIST
81764: LIST
81765: PUSH
81766: LD_INT 3
81768: NEG
81769: PUSH
81770: LD_INT 1
81772: PUSH
81773: EMPTY
81774: LIST
81775: LIST
81776: PUSH
81777: LD_INT 4
81779: NEG
81780: PUSH
81781: LD_INT 1
81783: PUSH
81784: EMPTY
81785: LIST
81786: LIST
81787: PUSH
81788: LD_INT 5
81790: NEG
81791: PUSH
81792: LD_INT 0
81794: PUSH
81795: EMPTY
81796: LIST
81797: LIST
81798: PUSH
81799: LD_INT 5
81801: NEG
81802: PUSH
81803: LD_INT 1
81805: NEG
81806: PUSH
81807: EMPTY
81808: LIST
81809: LIST
81810: PUSH
81811: LD_INT 5
81813: NEG
81814: PUSH
81815: LD_INT 2
81817: NEG
81818: PUSH
81819: EMPTY
81820: LIST
81821: LIST
81822: PUSH
81823: LD_INT 3
81825: NEG
81826: PUSH
81827: LD_INT 2
81829: PUSH
81830: EMPTY
81831: LIST
81832: LIST
81833: PUSH
81834: EMPTY
81835: LIST
81836: LIST
81837: LIST
81838: LIST
81839: LIST
81840: LIST
81841: LIST
81842: LIST
81843: LIST
81844: LIST
81845: LIST
81846: LIST
81847: LIST
81848: LIST
81849: LIST
81850: LIST
81851: LIST
81852: LIST
81853: LIST
81854: LIST
81855: LIST
81856: LIST
81857: LIST
81858: LIST
81859: LIST
81860: LIST
81861: LIST
81862: LIST
81863: LIST
81864: LIST
81865: LIST
81866: LIST
81867: LIST
81868: LIST
81869: LIST
81870: LIST
81871: LIST
81872: LIST
81873: LIST
81874: LIST
81875: LIST
81876: LIST
81877: LIST
81878: LIST
81879: LIST
81880: ST_TO_ADDR
// end ; end ;
81881: GO 81884
81883: POP
// case btype of b_depot , b_warehouse :
81884: LD_VAR 0 1
81888: PUSH
81889: LD_INT 0
81891: DOUBLE
81892: EQUAL
81893: IFTRUE 81903
81895: LD_INT 1
81897: DOUBLE
81898: EQUAL
81899: IFTRUE 81903
81901: GO 82104
81903: POP
// case nation of nation_american :
81904: LD_VAR 0 5
81908: PUSH
81909: LD_INT 1
81911: DOUBLE
81912: EQUAL
81913: IFTRUE 81917
81915: GO 81973
81917: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
81918: LD_ADDR_VAR 0 9
81922: PUSH
81923: LD_VAR 0 11
81927: PUSH
81928: LD_VAR 0 12
81932: PUSH
81933: LD_VAR 0 13
81937: PUSH
81938: LD_VAR 0 14
81942: PUSH
81943: LD_VAR 0 15
81947: PUSH
81948: LD_VAR 0 16
81952: PUSH
81953: EMPTY
81954: LIST
81955: LIST
81956: LIST
81957: LIST
81958: LIST
81959: LIST
81960: PUSH
81961: LD_VAR 0 4
81965: PUSH
81966: LD_INT 1
81968: PLUS
81969: ARRAY
81970: ST_TO_ADDR
81971: GO 82102
81973: LD_INT 2
81975: DOUBLE
81976: EQUAL
81977: IFTRUE 81981
81979: GO 82037
81981: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
81982: LD_ADDR_VAR 0 9
81986: PUSH
81987: LD_VAR 0 17
81991: PUSH
81992: LD_VAR 0 18
81996: PUSH
81997: LD_VAR 0 19
82001: PUSH
82002: LD_VAR 0 20
82006: PUSH
82007: LD_VAR 0 21
82011: PUSH
82012: LD_VAR 0 22
82016: PUSH
82017: EMPTY
82018: LIST
82019: LIST
82020: LIST
82021: LIST
82022: LIST
82023: LIST
82024: PUSH
82025: LD_VAR 0 4
82029: PUSH
82030: LD_INT 1
82032: PLUS
82033: ARRAY
82034: ST_TO_ADDR
82035: GO 82102
82037: LD_INT 3
82039: DOUBLE
82040: EQUAL
82041: IFTRUE 82045
82043: GO 82101
82045: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
82046: LD_ADDR_VAR 0 9
82050: PUSH
82051: LD_VAR 0 23
82055: PUSH
82056: LD_VAR 0 24
82060: PUSH
82061: LD_VAR 0 25
82065: PUSH
82066: LD_VAR 0 26
82070: PUSH
82071: LD_VAR 0 27
82075: PUSH
82076: LD_VAR 0 28
82080: PUSH
82081: EMPTY
82082: LIST
82083: LIST
82084: LIST
82085: LIST
82086: LIST
82087: LIST
82088: PUSH
82089: LD_VAR 0 4
82093: PUSH
82094: LD_INT 1
82096: PLUS
82097: ARRAY
82098: ST_TO_ADDR
82099: GO 82102
82101: POP
82102: GO 82657
82104: LD_INT 2
82106: DOUBLE
82107: EQUAL
82108: IFTRUE 82118
82110: LD_INT 3
82112: DOUBLE
82113: EQUAL
82114: IFTRUE 82118
82116: GO 82174
82118: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
82119: LD_ADDR_VAR 0 9
82123: PUSH
82124: LD_VAR 0 29
82128: PUSH
82129: LD_VAR 0 30
82133: PUSH
82134: LD_VAR 0 31
82138: PUSH
82139: LD_VAR 0 32
82143: PUSH
82144: LD_VAR 0 33
82148: PUSH
82149: LD_VAR 0 34
82153: PUSH
82154: EMPTY
82155: LIST
82156: LIST
82157: LIST
82158: LIST
82159: LIST
82160: LIST
82161: PUSH
82162: LD_VAR 0 4
82166: PUSH
82167: LD_INT 1
82169: PLUS
82170: ARRAY
82171: ST_TO_ADDR
82172: GO 82657
82174: LD_INT 16
82176: DOUBLE
82177: EQUAL
82178: IFTRUE 82236
82180: LD_INT 17
82182: DOUBLE
82183: EQUAL
82184: IFTRUE 82236
82186: LD_INT 18
82188: DOUBLE
82189: EQUAL
82190: IFTRUE 82236
82192: LD_INT 19
82194: DOUBLE
82195: EQUAL
82196: IFTRUE 82236
82198: LD_INT 22
82200: DOUBLE
82201: EQUAL
82202: IFTRUE 82236
82204: LD_INT 20
82206: DOUBLE
82207: EQUAL
82208: IFTRUE 82236
82210: LD_INT 21
82212: DOUBLE
82213: EQUAL
82214: IFTRUE 82236
82216: LD_INT 23
82218: DOUBLE
82219: EQUAL
82220: IFTRUE 82236
82222: LD_INT 24
82224: DOUBLE
82225: EQUAL
82226: IFTRUE 82236
82228: LD_INT 25
82230: DOUBLE
82231: EQUAL
82232: IFTRUE 82236
82234: GO 82292
82236: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
82237: LD_ADDR_VAR 0 9
82241: PUSH
82242: LD_VAR 0 35
82246: PUSH
82247: LD_VAR 0 36
82251: PUSH
82252: LD_VAR 0 37
82256: PUSH
82257: LD_VAR 0 38
82261: PUSH
82262: LD_VAR 0 39
82266: PUSH
82267: LD_VAR 0 40
82271: PUSH
82272: EMPTY
82273: LIST
82274: LIST
82275: LIST
82276: LIST
82277: LIST
82278: LIST
82279: PUSH
82280: LD_VAR 0 4
82284: PUSH
82285: LD_INT 1
82287: PLUS
82288: ARRAY
82289: ST_TO_ADDR
82290: GO 82657
82292: LD_INT 6
82294: DOUBLE
82295: EQUAL
82296: IFTRUE 82348
82298: LD_INT 7
82300: DOUBLE
82301: EQUAL
82302: IFTRUE 82348
82304: LD_INT 8
82306: DOUBLE
82307: EQUAL
82308: IFTRUE 82348
82310: LD_INT 13
82312: DOUBLE
82313: EQUAL
82314: IFTRUE 82348
82316: LD_INT 12
82318: DOUBLE
82319: EQUAL
82320: IFTRUE 82348
82322: LD_INT 15
82324: DOUBLE
82325: EQUAL
82326: IFTRUE 82348
82328: LD_INT 11
82330: DOUBLE
82331: EQUAL
82332: IFTRUE 82348
82334: LD_INT 14
82336: DOUBLE
82337: EQUAL
82338: IFTRUE 82348
82340: LD_INT 10
82342: DOUBLE
82343: EQUAL
82344: IFTRUE 82348
82346: GO 82404
82348: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
82349: LD_ADDR_VAR 0 9
82353: PUSH
82354: LD_VAR 0 41
82358: PUSH
82359: LD_VAR 0 42
82363: PUSH
82364: LD_VAR 0 43
82368: PUSH
82369: LD_VAR 0 44
82373: PUSH
82374: LD_VAR 0 45
82378: PUSH
82379: LD_VAR 0 46
82383: PUSH
82384: EMPTY
82385: LIST
82386: LIST
82387: LIST
82388: LIST
82389: LIST
82390: LIST
82391: PUSH
82392: LD_VAR 0 4
82396: PUSH
82397: LD_INT 1
82399: PLUS
82400: ARRAY
82401: ST_TO_ADDR
82402: GO 82657
82404: LD_INT 36
82406: DOUBLE
82407: EQUAL
82408: IFTRUE 82412
82410: GO 82468
82412: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
82413: LD_ADDR_VAR 0 9
82417: PUSH
82418: LD_VAR 0 47
82422: PUSH
82423: LD_VAR 0 48
82427: PUSH
82428: LD_VAR 0 49
82432: PUSH
82433: LD_VAR 0 50
82437: PUSH
82438: LD_VAR 0 51
82442: PUSH
82443: LD_VAR 0 52
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: LIST
82452: LIST
82453: LIST
82454: LIST
82455: PUSH
82456: LD_VAR 0 4
82460: PUSH
82461: LD_INT 1
82463: PLUS
82464: ARRAY
82465: ST_TO_ADDR
82466: GO 82657
82468: LD_INT 4
82470: DOUBLE
82471: EQUAL
82472: IFTRUE 82494
82474: LD_INT 5
82476: DOUBLE
82477: EQUAL
82478: IFTRUE 82494
82480: LD_INT 34
82482: DOUBLE
82483: EQUAL
82484: IFTRUE 82494
82486: LD_INT 37
82488: DOUBLE
82489: EQUAL
82490: IFTRUE 82494
82492: GO 82550
82494: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
82495: LD_ADDR_VAR 0 9
82499: PUSH
82500: LD_VAR 0 53
82504: PUSH
82505: LD_VAR 0 54
82509: PUSH
82510: LD_VAR 0 55
82514: PUSH
82515: LD_VAR 0 56
82519: PUSH
82520: LD_VAR 0 57
82524: PUSH
82525: LD_VAR 0 58
82529: PUSH
82530: EMPTY
82531: LIST
82532: LIST
82533: LIST
82534: LIST
82535: LIST
82536: LIST
82537: PUSH
82538: LD_VAR 0 4
82542: PUSH
82543: LD_INT 1
82545: PLUS
82546: ARRAY
82547: ST_TO_ADDR
82548: GO 82657
82550: LD_INT 31
82552: DOUBLE
82553: EQUAL
82554: IFTRUE 82600
82556: LD_INT 32
82558: DOUBLE
82559: EQUAL
82560: IFTRUE 82600
82562: LD_INT 33
82564: DOUBLE
82565: EQUAL
82566: IFTRUE 82600
82568: LD_INT 27
82570: DOUBLE
82571: EQUAL
82572: IFTRUE 82600
82574: LD_INT 26
82576: DOUBLE
82577: EQUAL
82578: IFTRUE 82600
82580: LD_INT 28
82582: DOUBLE
82583: EQUAL
82584: IFTRUE 82600
82586: LD_INT 29
82588: DOUBLE
82589: EQUAL
82590: IFTRUE 82600
82592: LD_INT 30
82594: DOUBLE
82595: EQUAL
82596: IFTRUE 82600
82598: GO 82656
82600: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
82601: LD_ADDR_VAR 0 9
82605: PUSH
82606: LD_VAR 0 59
82610: PUSH
82611: LD_VAR 0 60
82615: PUSH
82616: LD_VAR 0 61
82620: PUSH
82621: LD_VAR 0 62
82625: PUSH
82626: LD_VAR 0 63
82630: PUSH
82631: LD_VAR 0 64
82635: PUSH
82636: EMPTY
82637: LIST
82638: LIST
82639: LIST
82640: LIST
82641: LIST
82642: LIST
82643: PUSH
82644: LD_VAR 0 4
82648: PUSH
82649: LD_INT 1
82651: PLUS
82652: ARRAY
82653: ST_TO_ADDR
82654: GO 82657
82656: POP
// temp_list2 = [ ] ;
82657: LD_ADDR_VAR 0 10
82661: PUSH
82662: EMPTY
82663: ST_TO_ADDR
// for i in temp_list do
82664: LD_ADDR_VAR 0 8
82668: PUSH
82669: LD_VAR 0 9
82673: PUSH
82674: FOR_IN
82675: IFFALSE 82727
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
82677: LD_ADDR_VAR 0 10
82681: PUSH
82682: LD_VAR 0 10
82686: PUSH
82687: LD_VAR 0 8
82691: PUSH
82692: LD_INT 1
82694: ARRAY
82695: PUSH
82696: LD_VAR 0 2
82700: PLUS
82701: PUSH
82702: LD_VAR 0 8
82706: PUSH
82707: LD_INT 2
82709: ARRAY
82710: PUSH
82711: LD_VAR 0 3
82715: PLUS
82716: PUSH
82717: EMPTY
82718: LIST
82719: LIST
82720: PUSH
82721: EMPTY
82722: LIST
82723: ADD
82724: ST_TO_ADDR
82725: GO 82674
82727: POP
82728: POP
// result = temp_list2 ;
82729: LD_ADDR_VAR 0 7
82733: PUSH
82734: LD_VAR 0 10
82738: ST_TO_ADDR
// end ;
82739: LD_VAR 0 7
82743: RET
// export function EnemyInRange ( unit , dist ) ; begin
82744: LD_INT 0
82746: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
82747: LD_ADDR_VAR 0 3
82751: PUSH
82752: LD_VAR 0 1
82756: PPUSH
82757: CALL_OW 255
82761: PPUSH
82762: LD_VAR 0 1
82766: PPUSH
82767: CALL_OW 250
82771: PPUSH
82772: LD_VAR 0 1
82776: PPUSH
82777: CALL_OW 251
82781: PPUSH
82782: LD_VAR 0 2
82786: PPUSH
82787: CALL 56146 0 4
82791: PUSH
82792: LD_INT 4
82794: ARRAY
82795: ST_TO_ADDR
// end ;
82796: LD_VAR 0 3
82800: RET
// export function PlayerSeeMe ( unit ) ; begin
82801: LD_INT 0
82803: PPUSH
// result := See ( your_side , unit ) ;
82804: LD_ADDR_VAR 0 2
82808: PUSH
82809: LD_OWVAR 2
82813: PPUSH
82814: LD_VAR 0 1
82818: PPUSH
82819: CALL_OW 292
82823: ST_TO_ADDR
// end ;
82824: LD_VAR 0 2
82828: RET
// export function ReverseDir ( unit ) ; begin
82829: LD_INT 0
82831: PPUSH
// if not unit then
82832: LD_VAR 0 1
82836: NOT
82837: IFFALSE 82841
// exit ;
82839: GO 82864
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
82841: LD_ADDR_VAR 0 2
82845: PUSH
82846: LD_VAR 0 1
82850: PPUSH
82851: CALL_OW 254
82855: PUSH
82856: LD_INT 3
82858: PLUS
82859: PUSH
82860: LD_INT 6
82862: MOD
82863: ST_TO_ADDR
// end ;
82864: LD_VAR 0 2
82868: RET
// export function ReverseArray ( array ) ; var i ; begin
82869: LD_INT 0
82871: PPUSH
82872: PPUSH
// if not array then
82873: LD_VAR 0 1
82877: NOT
82878: IFFALSE 82882
// exit ;
82880: GO 82937
// result := [ ] ;
82882: LD_ADDR_VAR 0 2
82886: PUSH
82887: EMPTY
82888: ST_TO_ADDR
// for i := array downto 1 do
82889: LD_ADDR_VAR 0 3
82893: PUSH
82894: DOUBLE
82895: LD_VAR 0 1
82899: INC
82900: ST_TO_ADDR
82901: LD_INT 1
82903: PUSH
82904: FOR_DOWNTO
82905: IFFALSE 82935
// result := Join ( result , array [ i ] ) ;
82907: LD_ADDR_VAR 0 2
82911: PUSH
82912: LD_VAR 0 2
82916: PPUSH
82917: LD_VAR 0 1
82921: PUSH
82922: LD_VAR 0 3
82926: ARRAY
82927: PPUSH
82928: CALL 87562 0 2
82932: ST_TO_ADDR
82933: GO 82904
82935: POP
82936: POP
// end ;
82937: LD_VAR 0 2
82941: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
82942: LD_INT 0
82944: PPUSH
82945: PPUSH
82946: PPUSH
82947: PPUSH
82948: PPUSH
82949: PPUSH
// if not unit or not hexes then
82950: LD_VAR 0 1
82954: NOT
82955: PUSH
82956: LD_VAR 0 2
82960: NOT
82961: OR
82962: IFFALSE 82966
// exit ;
82964: GO 83089
// dist := 9999 ;
82966: LD_ADDR_VAR 0 5
82970: PUSH
82971: LD_INT 9999
82973: ST_TO_ADDR
// for i = 1 to hexes do
82974: LD_ADDR_VAR 0 4
82978: PUSH
82979: DOUBLE
82980: LD_INT 1
82982: DEC
82983: ST_TO_ADDR
82984: LD_VAR 0 2
82988: PUSH
82989: FOR_TO
82990: IFFALSE 83077
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
82992: LD_ADDR_VAR 0 6
82996: PUSH
82997: LD_VAR 0 1
83001: PPUSH
83002: LD_VAR 0 2
83006: PUSH
83007: LD_VAR 0 4
83011: ARRAY
83012: PUSH
83013: LD_INT 1
83015: ARRAY
83016: PPUSH
83017: LD_VAR 0 2
83021: PUSH
83022: LD_VAR 0 4
83026: ARRAY
83027: PUSH
83028: LD_INT 2
83030: ARRAY
83031: PPUSH
83032: CALL_OW 297
83036: ST_TO_ADDR
// if tdist < dist then
83037: LD_VAR 0 6
83041: PUSH
83042: LD_VAR 0 5
83046: LESS
83047: IFFALSE 83075
// begin hex := hexes [ i ] ;
83049: LD_ADDR_VAR 0 8
83053: PUSH
83054: LD_VAR 0 2
83058: PUSH
83059: LD_VAR 0 4
83063: ARRAY
83064: ST_TO_ADDR
// dist := tdist ;
83065: LD_ADDR_VAR 0 5
83069: PUSH
83070: LD_VAR 0 6
83074: ST_TO_ADDR
// end ; end ;
83075: GO 82989
83077: POP
83078: POP
// result := hex ;
83079: LD_ADDR_VAR 0 3
83083: PUSH
83084: LD_VAR 0 8
83088: ST_TO_ADDR
// end ;
83089: LD_VAR 0 3
83093: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
83094: LD_INT 0
83096: PPUSH
83097: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
83098: LD_VAR 0 1
83102: NOT
83103: PUSH
83104: LD_VAR 0 1
83108: PUSH
83109: LD_INT 21
83111: PUSH
83112: LD_INT 2
83114: PUSH
83115: EMPTY
83116: LIST
83117: LIST
83118: PUSH
83119: LD_INT 23
83121: PUSH
83122: LD_INT 2
83124: PUSH
83125: EMPTY
83126: LIST
83127: LIST
83128: PUSH
83129: EMPTY
83130: LIST
83131: LIST
83132: PPUSH
83133: CALL_OW 69
83137: IN
83138: NOT
83139: OR
83140: IFFALSE 83144
// exit ;
83142: GO 83191
// for i = 1 to 3 do
83144: LD_ADDR_VAR 0 3
83148: PUSH
83149: DOUBLE
83150: LD_INT 1
83152: DEC
83153: ST_TO_ADDR
83154: LD_INT 3
83156: PUSH
83157: FOR_TO
83158: IFFALSE 83189
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
83160: LD_VAR 0 1
83164: PPUSH
83165: CALL_OW 250
83169: PPUSH
83170: LD_VAR 0 1
83174: PPUSH
83175: CALL_OW 251
83179: PPUSH
83180: LD_INT 1
83182: PPUSH
83183: CALL_OW 453
83187: GO 83157
83189: POP
83190: POP
// end ;
83191: LD_VAR 0 2
83195: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
83196: LD_INT 0
83198: PPUSH
83199: PPUSH
83200: PPUSH
83201: PPUSH
83202: PPUSH
83203: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
83204: LD_VAR 0 1
83208: NOT
83209: PUSH
83210: LD_VAR 0 2
83214: NOT
83215: OR
83216: PUSH
83217: LD_VAR 0 1
83221: PPUSH
83222: CALL_OW 314
83226: OR
83227: IFFALSE 83231
// exit ;
83229: GO 83672
// x := GetX ( enemy_unit ) ;
83231: LD_ADDR_VAR 0 7
83235: PUSH
83236: LD_VAR 0 2
83240: PPUSH
83241: CALL_OW 250
83245: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
83246: LD_ADDR_VAR 0 8
83250: PUSH
83251: LD_VAR 0 2
83255: PPUSH
83256: CALL_OW 251
83260: ST_TO_ADDR
// if not x or not y then
83261: LD_VAR 0 7
83265: NOT
83266: PUSH
83267: LD_VAR 0 8
83271: NOT
83272: OR
83273: IFFALSE 83277
// exit ;
83275: GO 83672
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
83277: LD_ADDR_VAR 0 6
83281: PUSH
83282: LD_VAR 0 7
83286: PPUSH
83287: LD_INT 0
83289: PPUSH
83290: LD_INT 4
83292: PPUSH
83293: CALL_OW 272
83297: PUSH
83298: LD_VAR 0 8
83302: PPUSH
83303: LD_INT 0
83305: PPUSH
83306: LD_INT 4
83308: PPUSH
83309: CALL_OW 273
83313: PUSH
83314: EMPTY
83315: LIST
83316: LIST
83317: PUSH
83318: LD_VAR 0 7
83322: PPUSH
83323: LD_INT 1
83325: PPUSH
83326: LD_INT 4
83328: PPUSH
83329: CALL_OW 272
83333: PUSH
83334: LD_VAR 0 8
83338: PPUSH
83339: LD_INT 1
83341: PPUSH
83342: LD_INT 4
83344: PPUSH
83345: CALL_OW 273
83349: PUSH
83350: EMPTY
83351: LIST
83352: LIST
83353: PUSH
83354: LD_VAR 0 7
83358: PPUSH
83359: LD_INT 2
83361: PPUSH
83362: LD_INT 4
83364: PPUSH
83365: CALL_OW 272
83369: PUSH
83370: LD_VAR 0 8
83374: PPUSH
83375: LD_INT 2
83377: PPUSH
83378: LD_INT 4
83380: PPUSH
83381: CALL_OW 273
83385: PUSH
83386: EMPTY
83387: LIST
83388: LIST
83389: PUSH
83390: LD_VAR 0 7
83394: PPUSH
83395: LD_INT 3
83397: PPUSH
83398: LD_INT 4
83400: PPUSH
83401: CALL_OW 272
83405: PUSH
83406: LD_VAR 0 8
83410: PPUSH
83411: LD_INT 3
83413: PPUSH
83414: LD_INT 4
83416: PPUSH
83417: CALL_OW 273
83421: PUSH
83422: EMPTY
83423: LIST
83424: LIST
83425: PUSH
83426: LD_VAR 0 7
83430: PPUSH
83431: LD_INT 4
83433: PPUSH
83434: LD_INT 4
83436: PPUSH
83437: CALL_OW 272
83441: PUSH
83442: LD_VAR 0 8
83446: PPUSH
83447: LD_INT 4
83449: PPUSH
83450: LD_INT 4
83452: PPUSH
83453: CALL_OW 273
83457: PUSH
83458: EMPTY
83459: LIST
83460: LIST
83461: PUSH
83462: LD_VAR 0 7
83466: PPUSH
83467: LD_INT 5
83469: PPUSH
83470: LD_INT 4
83472: PPUSH
83473: CALL_OW 272
83477: PUSH
83478: LD_VAR 0 8
83482: PPUSH
83483: LD_INT 5
83485: PPUSH
83486: LD_INT 4
83488: PPUSH
83489: CALL_OW 273
83493: PUSH
83494: EMPTY
83495: LIST
83496: LIST
83497: PUSH
83498: EMPTY
83499: LIST
83500: LIST
83501: LIST
83502: LIST
83503: LIST
83504: LIST
83505: ST_TO_ADDR
// for i = tmp downto 1 do
83506: LD_ADDR_VAR 0 4
83510: PUSH
83511: DOUBLE
83512: LD_VAR 0 6
83516: INC
83517: ST_TO_ADDR
83518: LD_INT 1
83520: PUSH
83521: FOR_DOWNTO
83522: IFFALSE 83623
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
83524: LD_VAR 0 6
83528: PUSH
83529: LD_VAR 0 4
83533: ARRAY
83534: PUSH
83535: LD_INT 1
83537: ARRAY
83538: PPUSH
83539: LD_VAR 0 6
83543: PUSH
83544: LD_VAR 0 4
83548: ARRAY
83549: PUSH
83550: LD_INT 2
83552: ARRAY
83553: PPUSH
83554: CALL_OW 488
83558: NOT
83559: PUSH
83560: LD_VAR 0 6
83564: PUSH
83565: LD_VAR 0 4
83569: ARRAY
83570: PUSH
83571: LD_INT 1
83573: ARRAY
83574: PPUSH
83575: LD_VAR 0 6
83579: PUSH
83580: LD_VAR 0 4
83584: ARRAY
83585: PUSH
83586: LD_INT 2
83588: ARRAY
83589: PPUSH
83590: CALL_OW 428
83594: PUSH
83595: LD_INT 0
83597: NONEQUAL
83598: OR
83599: IFFALSE 83621
// tmp := Delete ( tmp , i ) ;
83601: LD_ADDR_VAR 0 6
83605: PUSH
83606: LD_VAR 0 6
83610: PPUSH
83611: LD_VAR 0 4
83615: PPUSH
83616: CALL_OW 3
83620: ST_TO_ADDR
83621: GO 83521
83623: POP
83624: POP
// j := GetClosestHex ( unit , tmp ) ;
83625: LD_ADDR_VAR 0 5
83629: PUSH
83630: LD_VAR 0 1
83634: PPUSH
83635: LD_VAR 0 6
83639: PPUSH
83640: CALL 82942 0 2
83644: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
83645: LD_VAR 0 1
83649: PPUSH
83650: LD_VAR 0 5
83654: PUSH
83655: LD_INT 1
83657: ARRAY
83658: PPUSH
83659: LD_VAR 0 5
83663: PUSH
83664: LD_INT 2
83666: ARRAY
83667: PPUSH
83668: CALL_OW 111
// end ;
83672: LD_VAR 0 3
83676: RET
// export function PrepareApemanSoldier ( ) ; begin
83677: LD_INT 0
83679: PPUSH
// uc_nation := 0 ;
83680: LD_ADDR_OWVAR 21
83684: PUSH
83685: LD_INT 0
83687: ST_TO_ADDR
// hc_sex := sex_male ;
83688: LD_ADDR_OWVAR 27
83692: PUSH
83693: LD_INT 1
83695: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
83696: LD_ADDR_OWVAR 28
83700: PUSH
83701: LD_INT 15
83703: ST_TO_ADDR
// hc_gallery :=  ;
83704: LD_ADDR_OWVAR 33
83708: PUSH
83709: LD_STRING 
83711: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83712: LD_ADDR_OWVAR 31
83716: PUSH
83717: LD_INT 0
83719: PPUSH
83720: LD_INT 3
83722: PPUSH
83723: CALL_OW 12
83727: PUSH
83728: LD_INT 0
83730: PPUSH
83731: LD_INT 3
83733: PPUSH
83734: CALL_OW 12
83738: PUSH
83739: LD_INT 0
83741: PUSH
83742: LD_INT 0
83744: PUSH
83745: EMPTY
83746: LIST
83747: LIST
83748: LIST
83749: LIST
83750: ST_TO_ADDR
// end ;
83751: LD_VAR 0 1
83755: RET
// export function PrepareApemanEngineer ( ) ; begin
83756: LD_INT 0
83758: PPUSH
// uc_nation := 0 ;
83759: LD_ADDR_OWVAR 21
83763: PUSH
83764: LD_INT 0
83766: ST_TO_ADDR
// hc_sex := sex_male ;
83767: LD_ADDR_OWVAR 27
83771: PUSH
83772: LD_INT 1
83774: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
83775: LD_ADDR_OWVAR 28
83779: PUSH
83780: LD_INT 16
83782: ST_TO_ADDR
// hc_gallery :=  ;
83783: LD_ADDR_OWVAR 33
83787: PUSH
83788: LD_STRING 
83790: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83791: LD_ADDR_OWVAR 31
83795: PUSH
83796: LD_INT 0
83798: PPUSH
83799: LD_INT 3
83801: PPUSH
83802: CALL_OW 12
83806: PUSH
83807: LD_INT 0
83809: PPUSH
83810: LD_INT 3
83812: PPUSH
83813: CALL_OW 12
83817: PUSH
83818: LD_INT 0
83820: PUSH
83821: LD_INT 0
83823: PUSH
83824: EMPTY
83825: LIST
83826: LIST
83827: LIST
83828: LIST
83829: ST_TO_ADDR
// end ;
83830: LD_VAR 0 1
83834: RET
// export function PrepareApeman ( agressivity ) ; begin
83835: LD_INT 0
83837: PPUSH
// uc_side := 0 ;
83838: LD_ADDR_OWVAR 20
83842: PUSH
83843: LD_INT 0
83845: ST_TO_ADDR
// uc_nation := 0 ;
83846: LD_ADDR_OWVAR 21
83850: PUSH
83851: LD_INT 0
83853: ST_TO_ADDR
// hc_sex := sex_male ;
83854: LD_ADDR_OWVAR 27
83858: PUSH
83859: LD_INT 1
83861: ST_TO_ADDR
// hc_class := class_apeman ;
83862: LD_ADDR_OWVAR 28
83866: PUSH
83867: LD_INT 12
83869: ST_TO_ADDR
// hc_gallery :=  ;
83870: LD_ADDR_OWVAR 33
83874: PUSH
83875: LD_STRING 
83877: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
83878: LD_ADDR_OWVAR 35
83882: PUSH
83883: LD_VAR 0 1
83887: NEG
83888: PPUSH
83889: LD_VAR 0 1
83893: PPUSH
83894: CALL_OW 12
83898: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83899: LD_ADDR_OWVAR 31
83903: PUSH
83904: LD_INT 0
83906: PPUSH
83907: LD_INT 3
83909: PPUSH
83910: CALL_OW 12
83914: PUSH
83915: LD_INT 0
83917: PPUSH
83918: LD_INT 3
83920: PPUSH
83921: CALL_OW 12
83925: PUSH
83926: LD_INT 0
83928: PUSH
83929: LD_INT 0
83931: PUSH
83932: EMPTY
83933: LIST
83934: LIST
83935: LIST
83936: LIST
83937: ST_TO_ADDR
// end ;
83938: LD_VAR 0 2
83942: RET
// export function PrepareTiger ( agressivity ) ; begin
83943: LD_INT 0
83945: PPUSH
// uc_side := 0 ;
83946: LD_ADDR_OWVAR 20
83950: PUSH
83951: LD_INT 0
83953: ST_TO_ADDR
// uc_nation := 0 ;
83954: LD_ADDR_OWVAR 21
83958: PUSH
83959: LD_INT 0
83961: ST_TO_ADDR
// hc_class := class_tiger ;
83962: LD_ADDR_OWVAR 28
83966: PUSH
83967: LD_INT 14
83969: ST_TO_ADDR
// hc_gallery :=  ;
83970: LD_ADDR_OWVAR 33
83974: PUSH
83975: LD_STRING 
83977: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
83978: LD_ADDR_OWVAR 35
83982: PUSH
83983: LD_VAR 0 1
83987: NEG
83988: PPUSH
83989: LD_VAR 0 1
83993: PPUSH
83994: CALL_OW 12
83998: ST_TO_ADDR
// end ;
83999: LD_VAR 0 2
84003: RET
// export function PrepareEnchidna ( ) ; begin
84004: LD_INT 0
84006: PPUSH
// uc_side := 0 ;
84007: LD_ADDR_OWVAR 20
84011: PUSH
84012: LD_INT 0
84014: ST_TO_ADDR
// uc_nation := 0 ;
84015: LD_ADDR_OWVAR 21
84019: PUSH
84020: LD_INT 0
84022: ST_TO_ADDR
// hc_class := class_baggie ;
84023: LD_ADDR_OWVAR 28
84027: PUSH
84028: LD_INT 13
84030: ST_TO_ADDR
// hc_gallery :=  ;
84031: LD_ADDR_OWVAR 33
84035: PUSH
84036: LD_STRING 
84038: ST_TO_ADDR
// end ;
84039: LD_VAR 0 1
84043: RET
// export function PrepareFrog ( ) ; begin
84044: LD_INT 0
84046: PPUSH
// uc_side := 0 ;
84047: LD_ADDR_OWVAR 20
84051: PUSH
84052: LD_INT 0
84054: ST_TO_ADDR
// uc_nation := 0 ;
84055: LD_ADDR_OWVAR 21
84059: PUSH
84060: LD_INT 0
84062: ST_TO_ADDR
// hc_class := class_frog ;
84063: LD_ADDR_OWVAR 28
84067: PUSH
84068: LD_INT 19
84070: ST_TO_ADDR
// hc_gallery :=  ;
84071: LD_ADDR_OWVAR 33
84075: PUSH
84076: LD_STRING 
84078: ST_TO_ADDR
// end ;
84079: LD_VAR 0 1
84083: RET
// export function PrepareFish ( ) ; begin
84084: LD_INT 0
84086: PPUSH
// uc_side := 0 ;
84087: LD_ADDR_OWVAR 20
84091: PUSH
84092: LD_INT 0
84094: ST_TO_ADDR
// uc_nation := 0 ;
84095: LD_ADDR_OWVAR 21
84099: PUSH
84100: LD_INT 0
84102: ST_TO_ADDR
// hc_class := class_fish ;
84103: LD_ADDR_OWVAR 28
84107: PUSH
84108: LD_INT 20
84110: ST_TO_ADDR
// hc_gallery :=  ;
84111: LD_ADDR_OWVAR 33
84115: PUSH
84116: LD_STRING 
84118: ST_TO_ADDR
// end ;
84119: LD_VAR 0 1
84123: RET
// export function PrepareBird ( ) ; begin
84124: LD_INT 0
84126: PPUSH
// uc_side := 0 ;
84127: LD_ADDR_OWVAR 20
84131: PUSH
84132: LD_INT 0
84134: ST_TO_ADDR
// uc_nation := 0 ;
84135: LD_ADDR_OWVAR 21
84139: PUSH
84140: LD_INT 0
84142: ST_TO_ADDR
// hc_class := class_phororhacos ;
84143: LD_ADDR_OWVAR 28
84147: PUSH
84148: LD_INT 18
84150: ST_TO_ADDR
// hc_gallery :=  ;
84151: LD_ADDR_OWVAR 33
84155: PUSH
84156: LD_STRING 
84158: ST_TO_ADDR
// end ;
84159: LD_VAR 0 1
84163: RET
// export function PrepareHorse ( ) ; begin
84164: LD_INT 0
84166: PPUSH
// uc_side := 0 ;
84167: LD_ADDR_OWVAR 20
84171: PUSH
84172: LD_INT 0
84174: ST_TO_ADDR
// uc_nation := 0 ;
84175: LD_ADDR_OWVAR 21
84179: PUSH
84180: LD_INT 0
84182: ST_TO_ADDR
// hc_class := class_horse ;
84183: LD_ADDR_OWVAR 28
84187: PUSH
84188: LD_INT 21
84190: ST_TO_ADDR
// hc_gallery :=  ;
84191: LD_ADDR_OWVAR 33
84195: PUSH
84196: LD_STRING 
84198: ST_TO_ADDR
// end ;
84199: LD_VAR 0 1
84203: RET
// export function PrepareMastodont ( ) ; begin
84204: LD_INT 0
84206: PPUSH
// uc_side := 0 ;
84207: LD_ADDR_OWVAR 20
84211: PUSH
84212: LD_INT 0
84214: ST_TO_ADDR
// uc_nation := 0 ;
84215: LD_ADDR_OWVAR 21
84219: PUSH
84220: LD_INT 0
84222: ST_TO_ADDR
// vc_chassis := class_mastodont ;
84223: LD_ADDR_OWVAR 37
84227: PUSH
84228: LD_INT 31
84230: ST_TO_ADDR
// vc_control := control_rider ;
84231: LD_ADDR_OWVAR 38
84235: PUSH
84236: LD_INT 4
84238: ST_TO_ADDR
// end ;
84239: LD_VAR 0 1
84243: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
84244: LD_INT 0
84246: PPUSH
84247: PPUSH
84248: PPUSH
// uc_side = 0 ;
84249: LD_ADDR_OWVAR 20
84253: PUSH
84254: LD_INT 0
84256: ST_TO_ADDR
// uc_nation = 0 ;
84257: LD_ADDR_OWVAR 21
84261: PUSH
84262: LD_INT 0
84264: ST_TO_ADDR
// InitHc_All ( ) ;
84265: CALL_OW 584
// InitVc ;
84269: CALL_OW 20
// if mastodonts then
84273: LD_VAR 0 6
84277: IFFALSE 84344
// for i = 1 to mastodonts do
84279: LD_ADDR_VAR 0 11
84283: PUSH
84284: DOUBLE
84285: LD_INT 1
84287: DEC
84288: ST_TO_ADDR
84289: LD_VAR 0 6
84293: PUSH
84294: FOR_TO
84295: IFFALSE 84342
// begin vc_chassis := 31 ;
84297: LD_ADDR_OWVAR 37
84301: PUSH
84302: LD_INT 31
84304: ST_TO_ADDR
// vc_control := control_rider ;
84305: LD_ADDR_OWVAR 38
84309: PUSH
84310: LD_INT 4
84312: ST_TO_ADDR
// animal := CreateVehicle ;
84313: LD_ADDR_VAR 0 12
84317: PUSH
84318: CALL_OW 45
84322: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84323: LD_VAR 0 12
84327: PPUSH
84328: LD_VAR 0 8
84332: PPUSH
84333: LD_INT 0
84335: PPUSH
84336: CALL 86479 0 3
// end ;
84340: GO 84294
84342: POP
84343: POP
// if horses then
84344: LD_VAR 0 5
84348: IFFALSE 84415
// for i = 1 to horses do
84350: LD_ADDR_VAR 0 11
84354: PUSH
84355: DOUBLE
84356: LD_INT 1
84358: DEC
84359: ST_TO_ADDR
84360: LD_VAR 0 5
84364: PUSH
84365: FOR_TO
84366: IFFALSE 84413
// begin hc_class := 21 ;
84368: LD_ADDR_OWVAR 28
84372: PUSH
84373: LD_INT 21
84375: ST_TO_ADDR
// hc_gallery :=  ;
84376: LD_ADDR_OWVAR 33
84380: PUSH
84381: LD_STRING 
84383: ST_TO_ADDR
// animal := CreateHuman ;
84384: LD_ADDR_VAR 0 12
84388: PUSH
84389: CALL_OW 44
84393: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84394: LD_VAR 0 12
84398: PPUSH
84399: LD_VAR 0 8
84403: PPUSH
84404: LD_INT 0
84406: PPUSH
84407: CALL 86479 0 3
// end ;
84411: GO 84365
84413: POP
84414: POP
// if birds then
84415: LD_VAR 0 1
84419: IFFALSE 84486
// for i = 1 to birds do
84421: LD_ADDR_VAR 0 11
84425: PUSH
84426: DOUBLE
84427: LD_INT 1
84429: DEC
84430: ST_TO_ADDR
84431: LD_VAR 0 1
84435: PUSH
84436: FOR_TO
84437: IFFALSE 84484
// begin hc_class = 18 ;
84439: LD_ADDR_OWVAR 28
84443: PUSH
84444: LD_INT 18
84446: ST_TO_ADDR
// hc_gallery =  ;
84447: LD_ADDR_OWVAR 33
84451: PUSH
84452: LD_STRING 
84454: ST_TO_ADDR
// animal := CreateHuman ;
84455: LD_ADDR_VAR 0 12
84459: PUSH
84460: CALL_OW 44
84464: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84465: LD_VAR 0 12
84469: PPUSH
84470: LD_VAR 0 8
84474: PPUSH
84475: LD_INT 0
84477: PPUSH
84478: CALL 86479 0 3
// end ;
84482: GO 84436
84484: POP
84485: POP
// if tigers then
84486: LD_VAR 0 2
84490: IFFALSE 84574
// for i = 1 to tigers do
84492: LD_ADDR_VAR 0 11
84496: PUSH
84497: DOUBLE
84498: LD_INT 1
84500: DEC
84501: ST_TO_ADDR
84502: LD_VAR 0 2
84506: PUSH
84507: FOR_TO
84508: IFFALSE 84572
// begin hc_class = class_tiger ;
84510: LD_ADDR_OWVAR 28
84514: PUSH
84515: LD_INT 14
84517: ST_TO_ADDR
// hc_gallery =  ;
84518: LD_ADDR_OWVAR 33
84522: PUSH
84523: LD_STRING 
84525: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
84526: LD_ADDR_OWVAR 35
84530: PUSH
84531: LD_INT 7
84533: NEG
84534: PPUSH
84535: LD_INT 7
84537: PPUSH
84538: CALL_OW 12
84542: ST_TO_ADDR
// animal := CreateHuman ;
84543: LD_ADDR_VAR 0 12
84547: PUSH
84548: CALL_OW 44
84552: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84553: LD_VAR 0 12
84557: PPUSH
84558: LD_VAR 0 8
84562: PPUSH
84563: LD_INT 0
84565: PPUSH
84566: CALL 86479 0 3
// end ;
84570: GO 84507
84572: POP
84573: POP
// if apemans then
84574: LD_VAR 0 3
84578: IFFALSE 84701
// for i = 1 to apemans do
84580: LD_ADDR_VAR 0 11
84584: PUSH
84585: DOUBLE
84586: LD_INT 1
84588: DEC
84589: ST_TO_ADDR
84590: LD_VAR 0 3
84594: PUSH
84595: FOR_TO
84596: IFFALSE 84699
// begin hc_class = class_apeman ;
84598: LD_ADDR_OWVAR 28
84602: PUSH
84603: LD_INT 12
84605: ST_TO_ADDR
// hc_gallery =  ;
84606: LD_ADDR_OWVAR 33
84610: PUSH
84611: LD_STRING 
84613: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
84614: LD_ADDR_OWVAR 35
84618: PUSH
84619: LD_INT 2
84621: NEG
84622: PPUSH
84623: LD_INT 2
84625: PPUSH
84626: CALL_OW 12
84630: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
84631: LD_ADDR_OWVAR 31
84635: PUSH
84636: LD_INT 1
84638: PPUSH
84639: LD_INT 3
84641: PPUSH
84642: CALL_OW 12
84646: PUSH
84647: LD_INT 1
84649: PPUSH
84650: LD_INT 3
84652: PPUSH
84653: CALL_OW 12
84657: PUSH
84658: LD_INT 0
84660: PUSH
84661: LD_INT 0
84663: PUSH
84664: EMPTY
84665: LIST
84666: LIST
84667: LIST
84668: LIST
84669: ST_TO_ADDR
// animal := CreateHuman ;
84670: LD_ADDR_VAR 0 12
84674: PUSH
84675: CALL_OW 44
84679: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84680: LD_VAR 0 12
84684: PPUSH
84685: LD_VAR 0 8
84689: PPUSH
84690: LD_INT 0
84692: PPUSH
84693: CALL 86479 0 3
// end ;
84697: GO 84595
84699: POP
84700: POP
// if enchidnas then
84701: LD_VAR 0 4
84705: IFFALSE 84772
// for i = 1 to enchidnas do
84707: LD_ADDR_VAR 0 11
84711: PUSH
84712: DOUBLE
84713: LD_INT 1
84715: DEC
84716: ST_TO_ADDR
84717: LD_VAR 0 4
84721: PUSH
84722: FOR_TO
84723: IFFALSE 84770
// begin hc_class = 13 ;
84725: LD_ADDR_OWVAR 28
84729: PUSH
84730: LD_INT 13
84732: ST_TO_ADDR
// hc_gallery =  ;
84733: LD_ADDR_OWVAR 33
84737: PUSH
84738: LD_STRING 
84740: ST_TO_ADDR
// animal := CreateHuman ;
84741: LD_ADDR_VAR 0 12
84745: PUSH
84746: CALL_OW 44
84750: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84751: LD_VAR 0 12
84755: PPUSH
84756: LD_VAR 0 8
84760: PPUSH
84761: LD_INT 0
84763: PPUSH
84764: CALL 86479 0 3
// end ;
84768: GO 84722
84770: POP
84771: POP
// if fishes then
84772: LD_VAR 0 7
84776: IFFALSE 84843
// for i = 1 to fishes do
84778: LD_ADDR_VAR 0 11
84782: PUSH
84783: DOUBLE
84784: LD_INT 1
84786: DEC
84787: ST_TO_ADDR
84788: LD_VAR 0 7
84792: PUSH
84793: FOR_TO
84794: IFFALSE 84841
// begin hc_class = 20 ;
84796: LD_ADDR_OWVAR 28
84800: PUSH
84801: LD_INT 20
84803: ST_TO_ADDR
// hc_gallery =  ;
84804: LD_ADDR_OWVAR 33
84808: PUSH
84809: LD_STRING 
84811: ST_TO_ADDR
// animal := CreateHuman ;
84812: LD_ADDR_VAR 0 12
84816: PUSH
84817: CALL_OW 44
84821: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
84822: LD_VAR 0 12
84826: PPUSH
84827: LD_VAR 0 9
84831: PPUSH
84832: LD_INT 0
84834: PPUSH
84835: CALL 86479 0 3
// end ;
84839: GO 84793
84841: POP
84842: POP
// end ;
84843: LD_VAR 0 10
84847: RET
// export function WantHeal ( sci , unit ) ; begin
84848: LD_INT 0
84850: PPUSH
// if GetTaskList ( sci ) > 0 then
84851: LD_VAR 0 1
84855: PPUSH
84856: CALL_OW 437
84860: PUSH
84861: LD_INT 0
84863: GREATER
84864: IFFALSE 84934
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
84866: LD_VAR 0 1
84870: PPUSH
84871: CALL_OW 437
84875: PUSH
84876: LD_INT 1
84878: ARRAY
84879: PUSH
84880: LD_INT 1
84882: ARRAY
84883: PUSH
84884: LD_STRING l
84886: EQUAL
84887: PUSH
84888: LD_VAR 0 1
84892: PPUSH
84893: CALL_OW 437
84897: PUSH
84898: LD_INT 1
84900: ARRAY
84901: PUSH
84902: LD_INT 4
84904: ARRAY
84905: PUSH
84906: LD_VAR 0 2
84910: EQUAL
84911: AND
84912: IFFALSE 84924
// result := true else
84914: LD_ADDR_VAR 0 3
84918: PUSH
84919: LD_INT 1
84921: ST_TO_ADDR
84922: GO 84932
// result := false ;
84924: LD_ADDR_VAR 0 3
84928: PUSH
84929: LD_INT 0
84931: ST_TO_ADDR
// end else
84932: GO 84942
// result := false ;
84934: LD_ADDR_VAR 0 3
84938: PUSH
84939: LD_INT 0
84941: ST_TO_ADDR
// end ;
84942: LD_VAR 0 3
84946: RET
// export function HealTarget ( sci ) ; begin
84947: LD_INT 0
84949: PPUSH
// if not sci then
84950: LD_VAR 0 1
84954: NOT
84955: IFFALSE 84959
// exit ;
84957: GO 85024
// result := 0 ;
84959: LD_ADDR_VAR 0 2
84963: PUSH
84964: LD_INT 0
84966: ST_TO_ADDR
// if GetTaskList ( sci ) then
84967: LD_VAR 0 1
84971: PPUSH
84972: CALL_OW 437
84976: IFFALSE 85024
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
84978: LD_VAR 0 1
84982: PPUSH
84983: CALL_OW 437
84987: PUSH
84988: LD_INT 1
84990: ARRAY
84991: PUSH
84992: LD_INT 1
84994: ARRAY
84995: PUSH
84996: LD_STRING l
84998: EQUAL
84999: IFFALSE 85024
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
85001: LD_ADDR_VAR 0 2
85005: PUSH
85006: LD_VAR 0 1
85010: PPUSH
85011: CALL_OW 437
85015: PUSH
85016: LD_INT 1
85018: ARRAY
85019: PUSH
85020: LD_INT 4
85022: ARRAY
85023: ST_TO_ADDR
// end ;
85024: LD_VAR 0 2
85028: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
85029: LD_INT 0
85031: PPUSH
85032: PPUSH
85033: PPUSH
85034: PPUSH
// if not base_units then
85035: LD_VAR 0 1
85039: NOT
85040: IFFALSE 85044
// exit ;
85042: GO 85131
// result := false ;
85044: LD_ADDR_VAR 0 2
85048: PUSH
85049: LD_INT 0
85051: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
85052: LD_ADDR_VAR 0 5
85056: PUSH
85057: LD_VAR 0 1
85061: PPUSH
85062: LD_INT 21
85064: PUSH
85065: LD_INT 3
85067: PUSH
85068: EMPTY
85069: LIST
85070: LIST
85071: PPUSH
85072: CALL_OW 72
85076: ST_TO_ADDR
// if not tmp then
85077: LD_VAR 0 5
85081: NOT
85082: IFFALSE 85086
// exit ;
85084: GO 85131
// for i in tmp do
85086: LD_ADDR_VAR 0 3
85090: PUSH
85091: LD_VAR 0 5
85095: PUSH
85096: FOR_IN
85097: IFFALSE 85129
// begin result := EnemyInRange ( i , 22 ) ;
85099: LD_ADDR_VAR 0 2
85103: PUSH
85104: LD_VAR 0 3
85108: PPUSH
85109: LD_INT 22
85111: PPUSH
85112: CALL 82744 0 2
85116: ST_TO_ADDR
// if result then
85117: LD_VAR 0 2
85121: IFFALSE 85127
// exit ;
85123: POP
85124: POP
85125: GO 85131
// end ;
85127: GO 85096
85129: POP
85130: POP
// end ;
85131: LD_VAR 0 2
85135: RET
// export function FilterByTag ( units , tag ) ; begin
85136: LD_INT 0
85138: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
85139: LD_ADDR_VAR 0 3
85143: PUSH
85144: LD_VAR 0 1
85148: PPUSH
85149: LD_INT 120
85151: PUSH
85152: LD_VAR 0 2
85156: PUSH
85157: EMPTY
85158: LIST
85159: LIST
85160: PPUSH
85161: CALL_OW 72
85165: ST_TO_ADDR
// end ;
85166: LD_VAR 0 3
85170: RET
// export function IsDriver ( un ) ; begin
85171: LD_INT 0
85173: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
85174: LD_ADDR_VAR 0 2
85178: PUSH
85179: LD_VAR 0 1
85183: PUSH
85184: LD_INT 55
85186: PUSH
85187: EMPTY
85188: LIST
85189: PPUSH
85190: CALL_OW 69
85194: IN
85195: ST_TO_ADDR
// end ;
85196: LD_VAR 0 2
85200: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
85201: LD_INT 0
85203: PPUSH
85204: PPUSH
// list := [ ] ;
85205: LD_ADDR_VAR 0 5
85209: PUSH
85210: EMPTY
85211: ST_TO_ADDR
// case d of 0 :
85212: LD_VAR 0 3
85216: PUSH
85217: LD_INT 0
85219: DOUBLE
85220: EQUAL
85221: IFTRUE 85225
85223: GO 85358
85225: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
85226: LD_ADDR_VAR 0 5
85230: PUSH
85231: LD_VAR 0 1
85235: PUSH
85236: LD_INT 4
85238: MINUS
85239: PUSH
85240: LD_VAR 0 2
85244: PUSH
85245: LD_INT 4
85247: MINUS
85248: PUSH
85249: LD_INT 2
85251: PUSH
85252: EMPTY
85253: LIST
85254: LIST
85255: LIST
85256: PUSH
85257: LD_VAR 0 1
85261: PUSH
85262: LD_INT 3
85264: MINUS
85265: PUSH
85266: LD_VAR 0 2
85270: PUSH
85271: LD_INT 1
85273: PUSH
85274: EMPTY
85275: LIST
85276: LIST
85277: LIST
85278: PUSH
85279: LD_VAR 0 1
85283: PUSH
85284: LD_INT 4
85286: PLUS
85287: PUSH
85288: LD_VAR 0 2
85292: PUSH
85293: LD_INT 4
85295: PUSH
85296: EMPTY
85297: LIST
85298: LIST
85299: LIST
85300: PUSH
85301: LD_VAR 0 1
85305: PUSH
85306: LD_INT 3
85308: PLUS
85309: PUSH
85310: LD_VAR 0 2
85314: PUSH
85315: LD_INT 3
85317: PLUS
85318: PUSH
85319: LD_INT 5
85321: PUSH
85322: EMPTY
85323: LIST
85324: LIST
85325: LIST
85326: PUSH
85327: LD_VAR 0 1
85331: PUSH
85332: LD_VAR 0 2
85336: PUSH
85337: LD_INT 4
85339: PLUS
85340: PUSH
85341: LD_INT 0
85343: PUSH
85344: EMPTY
85345: LIST
85346: LIST
85347: LIST
85348: PUSH
85349: EMPTY
85350: LIST
85351: LIST
85352: LIST
85353: LIST
85354: LIST
85355: ST_TO_ADDR
// end ; 1 :
85356: GO 86056
85358: LD_INT 1
85360: DOUBLE
85361: EQUAL
85362: IFTRUE 85366
85364: GO 85499
85366: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
85367: LD_ADDR_VAR 0 5
85371: PUSH
85372: LD_VAR 0 1
85376: PUSH
85377: LD_VAR 0 2
85381: PUSH
85382: LD_INT 4
85384: MINUS
85385: PUSH
85386: LD_INT 3
85388: PUSH
85389: EMPTY
85390: LIST
85391: LIST
85392: LIST
85393: PUSH
85394: LD_VAR 0 1
85398: PUSH
85399: LD_INT 3
85401: MINUS
85402: PUSH
85403: LD_VAR 0 2
85407: PUSH
85408: LD_INT 3
85410: MINUS
85411: PUSH
85412: LD_INT 2
85414: PUSH
85415: EMPTY
85416: LIST
85417: LIST
85418: LIST
85419: PUSH
85420: LD_VAR 0 1
85424: PUSH
85425: LD_INT 4
85427: MINUS
85428: PUSH
85429: LD_VAR 0 2
85433: PUSH
85434: LD_INT 1
85436: PUSH
85437: EMPTY
85438: LIST
85439: LIST
85440: LIST
85441: PUSH
85442: LD_VAR 0 1
85446: PUSH
85447: LD_VAR 0 2
85451: PUSH
85452: LD_INT 3
85454: PLUS
85455: PUSH
85456: LD_INT 0
85458: PUSH
85459: EMPTY
85460: LIST
85461: LIST
85462: LIST
85463: PUSH
85464: LD_VAR 0 1
85468: PUSH
85469: LD_INT 4
85471: PLUS
85472: PUSH
85473: LD_VAR 0 2
85477: PUSH
85478: LD_INT 4
85480: PLUS
85481: PUSH
85482: LD_INT 5
85484: PUSH
85485: EMPTY
85486: LIST
85487: LIST
85488: LIST
85489: PUSH
85490: EMPTY
85491: LIST
85492: LIST
85493: LIST
85494: LIST
85495: LIST
85496: ST_TO_ADDR
// end ; 2 :
85497: GO 86056
85499: LD_INT 2
85501: DOUBLE
85502: EQUAL
85503: IFTRUE 85507
85505: GO 85636
85507: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
85508: LD_ADDR_VAR 0 5
85512: PUSH
85513: LD_VAR 0 1
85517: PUSH
85518: LD_VAR 0 2
85522: PUSH
85523: LD_INT 3
85525: MINUS
85526: PUSH
85527: LD_INT 3
85529: PUSH
85530: EMPTY
85531: LIST
85532: LIST
85533: LIST
85534: PUSH
85535: LD_VAR 0 1
85539: PUSH
85540: LD_INT 4
85542: PLUS
85543: PUSH
85544: LD_VAR 0 2
85548: PUSH
85549: LD_INT 4
85551: PUSH
85552: EMPTY
85553: LIST
85554: LIST
85555: LIST
85556: PUSH
85557: LD_VAR 0 1
85561: PUSH
85562: LD_VAR 0 2
85566: PUSH
85567: LD_INT 4
85569: PLUS
85570: PUSH
85571: LD_INT 0
85573: PUSH
85574: EMPTY
85575: LIST
85576: LIST
85577: LIST
85578: PUSH
85579: LD_VAR 0 1
85583: PUSH
85584: LD_INT 3
85586: MINUS
85587: PUSH
85588: LD_VAR 0 2
85592: PUSH
85593: LD_INT 1
85595: PUSH
85596: EMPTY
85597: LIST
85598: LIST
85599: LIST
85600: PUSH
85601: LD_VAR 0 1
85605: PUSH
85606: LD_INT 4
85608: MINUS
85609: PUSH
85610: LD_VAR 0 2
85614: PUSH
85615: LD_INT 4
85617: MINUS
85618: PUSH
85619: LD_INT 2
85621: PUSH
85622: EMPTY
85623: LIST
85624: LIST
85625: LIST
85626: PUSH
85627: EMPTY
85628: LIST
85629: LIST
85630: LIST
85631: LIST
85632: LIST
85633: ST_TO_ADDR
// end ; 3 :
85634: GO 86056
85636: LD_INT 3
85638: DOUBLE
85639: EQUAL
85640: IFTRUE 85644
85642: GO 85777
85644: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
85645: LD_ADDR_VAR 0 5
85649: PUSH
85650: LD_VAR 0 1
85654: PUSH
85655: LD_INT 3
85657: PLUS
85658: PUSH
85659: LD_VAR 0 2
85663: PUSH
85664: LD_INT 4
85666: PUSH
85667: EMPTY
85668: LIST
85669: LIST
85670: LIST
85671: PUSH
85672: LD_VAR 0 1
85676: PUSH
85677: LD_INT 4
85679: PLUS
85680: PUSH
85681: LD_VAR 0 2
85685: PUSH
85686: LD_INT 4
85688: PLUS
85689: PUSH
85690: LD_INT 5
85692: PUSH
85693: EMPTY
85694: LIST
85695: LIST
85696: LIST
85697: PUSH
85698: LD_VAR 0 1
85702: PUSH
85703: LD_INT 4
85705: MINUS
85706: PUSH
85707: LD_VAR 0 2
85711: PUSH
85712: LD_INT 1
85714: PUSH
85715: EMPTY
85716: LIST
85717: LIST
85718: LIST
85719: PUSH
85720: LD_VAR 0 1
85724: PUSH
85725: LD_VAR 0 2
85729: PUSH
85730: LD_INT 4
85732: MINUS
85733: PUSH
85734: LD_INT 3
85736: PUSH
85737: EMPTY
85738: LIST
85739: LIST
85740: LIST
85741: PUSH
85742: LD_VAR 0 1
85746: PUSH
85747: LD_INT 3
85749: MINUS
85750: PUSH
85751: LD_VAR 0 2
85755: PUSH
85756: LD_INT 3
85758: MINUS
85759: PUSH
85760: LD_INT 2
85762: PUSH
85763: EMPTY
85764: LIST
85765: LIST
85766: LIST
85767: PUSH
85768: EMPTY
85769: LIST
85770: LIST
85771: LIST
85772: LIST
85773: LIST
85774: ST_TO_ADDR
// end ; 4 :
85775: GO 86056
85777: LD_INT 4
85779: DOUBLE
85780: EQUAL
85781: IFTRUE 85785
85783: GO 85918
85785: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
85786: LD_ADDR_VAR 0 5
85790: PUSH
85791: LD_VAR 0 1
85795: PUSH
85796: LD_VAR 0 2
85800: PUSH
85801: LD_INT 4
85803: PLUS
85804: PUSH
85805: LD_INT 0
85807: PUSH
85808: EMPTY
85809: LIST
85810: LIST
85811: LIST
85812: PUSH
85813: LD_VAR 0 1
85817: PUSH
85818: LD_INT 3
85820: PLUS
85821: PUSH
85822: LD_VAR 0 2
85826: PUSH
85827: LD_INT 3
85829: PLUS
85830: PUSH
85831: LD_INT 5
85833: PUSH
85834: EMPTY
85835: LIST
85836: LIST
85837: LIST
85838: PUSH
85839: LD_VAR 0 1
85843: PUSH
85844: LD_INT 4
85846: PLUS
85847: PUSH
85848: LD_VAR 0 2
85852: PUSH
85853: LD_INT 4
85855: PUSH
85856: EMPTY
85857: LIST
85858: LIST
85859: LIST
85860: PUSH
85861: LD_VAR 0 1
85865: PUSH
85866: LD_VAR 0 2
85870: PUSH
85871: LD_INT 3
85873: MINUS
85874: PUSH
85875: LD_INT 3
85877: PUSH
85878: EMPTY
85879: LIST
85880: LIST
85881: LIST
85882: PUSH
85883: LD_VAR 0 1
85887: PUSH
85888: LD_INT 4
85890: MINUS
85891: PUSH
85892: LD_VAR 0 2
85896: PUSH
85897: LD_INT 4
85899: MINUS
85900: PUSH
85901: LD_INT 2
85903: PUSH
85904: EMPTY
85905: LIST
85906: LIST
85907: LIST
85908: PUSH
85909: EMPTY
85910: LIST
85911: LIST
85912: LIST
85913: LIST
85914: LIST
85915: ST_TO_ADDR
// end ; 5 :
85916: GO 86056
85918: LD_INT 5
85920: DOUBLE
85921: EQUAL
85922: IFTRUE 85926
85924: GO 86055
85926: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
85927: LD_ADDR_VAR 0 5
85931: PUSH
85932: LD_VAR 0 1
85936: PUSH
85937: LD_INT 4
85939: MINUS
85940: PUSH
85941: LD_VAR 0 2
85945: PUSH
85946: LD_INT 1
85948: PUSH
85949: EMPTY
85950: LIST
85951: LIST
85952: LIST
85953: PUSH
85954: LD_VAR 0 1
85958: PUSH
85959: LD_VAR 0 2
85963: PUSH
85964: LD_INT 4
85966: MINUS
85967: PUSH
85968: LD_INT 3
85970: PUSH
85971: EMPTY
85972: LIST
85973: LIST
85974: LIST
85975: PUSH
85976: LD_VAR 0 1
85980: PUSH
85981: LD_INT 4
85983: PLUS
85984: PUSH
85985: LD_VAR 0 2
85989: PUSH
85990: LD_INT 4
85992: PLUS
85993: PUSH
85994: LD_INT 5
85996: PUSH
85997: EMPTY
85998: LIST
85999: LIST
86000: LIST
86001: PUSH
86002: LD_VAR 0 1
86006: PUSH
86007: LD_INT 3
86009: PLUS
86010: PUSH
86011: LD_VAR 0 2
86015: PUSH
86016: LD_INT 4
86018: PUSH
86019: EMPTY
86020: LIST
86021: LIST
86022: LIST
86023: PUSH
86024: LD_VAR 0 1
86028: PUSH
86029: LD_VAR 0 2
86033: PUSH
86034: LD_INT 3
86036: PLUS
86037: PUSH
86038: LD_INT 0
86040: PUSH
86041: EMPTY
86042: LIST
86043: LIST
86044: LIST
86045: PUSH
86046: EMPTY
86047: LIST
86048: LIST
86049: LIST
86050: LIST
86051: LIST
86052: ST_TO_ADDR
// end ; end ;
86053: GO 86056
86055: POP
// result := list ;
86056: LD_ADDR_VAR 0 4
86060: PUSH
86061: LD_VAR 0 5
86065: ST_TO_ADDR
// end ;
86066: LD_VAR 0 4
86070: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
86071: LD_INT 0
86073: PPUSH
86074: PPUSH
86075: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
86076: LD_VAR 0 1
86080: NOT
86081: PUSH
86082: LD_VAR 0 2
86086: PUSH
86087: LD_INT 1
86089: PUSH
86090: LD_INT 2
86092: PUSH
86093: LD_INT 3
86095: PUSH
86096: LD_INT 4
86098: PUSH
86099: EMPTY
86100: LIST
86101: LIST
86102: LIST
86103: LIST
86104: IN
86105: NOT
86106: OR
86107: IFFALSE 86111
// exit ;
86109: GO 86203
// tmp := [ ] ;
86111: LD_ADDR_VAR 0 5
86115: PUSH
86116: EMPTY
86117: ST_TO_ADDR
// for i in units do
86118: LD_ADDR_VAR 0 4
86122: PUSH
86123: LD_VAR 0 1
86127: PUSH
86128: FOR_IN
86129: IFFALSE 86172
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
86131: LD_ADDR_VAR 0 5
86135: PUSH
86136: LD_VAR 0 5
86140: PPUSH
86141: LD_VAR 0 5
86145: PUSH
86146: LD_INT 1
86148: PLUS
86149: PPUSH
86150: LD_VAR 0 4
86154: PPUSH
86155: LD_VAR 0 2
86159: PPUSH
86160: CALL_OW 259
86164: PPUSH
86165: CALL_OW 2
86169: ST_TO_ADDR
86170: GO 86128
86172: POP
86173: POP
// if not tmp then
86174: LD_VAR 0 5
86178: NOT
86179: IFFALSE 86183
// exit ;
86181: GO 86203
// result := SortListByListDesc ( units , tmp ) ;
86183: LD_ADDR_VAR 0 3
86187: PUSH
86188: LD_VAR 0 1
86192: PPUSH
86193: LD_VAR 0 5
86197: PPUSH
86198: CALL_OW 77
86202: ST_TO_ADDR
// end ;
86203: LD_VAR 0 3
86207: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
86208: LD_INT 0
86210: PPUSH
86211: PPUSH
86212: PPUSH
// result := false ;
86213: LD_ADDR_VAR 0 3
86217: PUSH
86218: LD_INT 0
86220: ST_TO_ADDR
// x := GetX ( building ) ;
86221: LD_ADDR_VAR 0 4
86225: PUSH
86226: LD_VAR 0 2
86230: PPUSH
86231: CALL_OW 250
86235: ST_TO_ADDR
// y := GetY ( building ) ;
86236: LD_ADDR_VAR 0 5
86240: PUSH
86241: LD_VAR 0 2
86245: PPUSH
86246: CALL_OW 251
86250: ST_TO_ADDR
// if not building or not x or not y then
86251: LD_VAR 0 2
86255: NOT
86256: PUSH
86257: LD_VAR 0 4
86261: NOT
86262: OR
86263: PUSH
86264: LD_VAR 0 5
86268: NOT
86269: OR
86270: IFFALSE 86274
// exit ;
86272: GO 86366
// if GetTaskList ( unit ) then
86274: LD_VAR 0 1
86278: PPUSH
86279: CALL_OW 437
86283: IFFALSE 86366
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86285: LD_STRING e
86287: PUSH
86288: LD_VAR 0 1
86292: PPUSH
86293: CALL_OW 437
86297: PUSH
86298: LD_INT 1
86300: ARRAY
86301: PUSH
86302: LD_INT 1
86304: ARRAY
86305: EQUAL
86306: PUSH
86307: LD_VAR 0 4
86311: PUSH
86312: LD_VAR 0 1
86316: PPUSH
86317: CALL_OW 437
86321: PUSH
86322: LD_INT 1
86324: ARRAY
86325: PUSH
86326: LD_INT 2
86328: ARRAY
86329: EQUAL
86330: AND
86331: PUSH
86332: LD_VAR 0 5
86336: PUSH
86337: LD_VAR 0 1
86341: PPUSH
86342: CALL_OW 437
86346: PUSH
86347: LD_INT 1
86349: ARRAY
86350: PUSH
86351: LD_INT 3
86353: ARRAY
86354: EQUAL
86355: AND
86356: IFFALSE 86366
// result := true end ;
86358: LD_ADDR_VAR 0 3
86362: PUSH
86363: LD_INT 1
86365: ST_TO_ADDR
// end ;
86366: LD_VAR 0 3
86370: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
86371: LD_INT 0
86373: PPUSH
// result := false ;
86374: LD_ADDR_VAR 0 4
86378: PUSH
86379: LD_INT 0
86381: ST_TO_ADDR
// if GetTaskList ( unit ) then
86382: LD_VAR 0 1
86386: PPUSH
86387: CALL_OW 437
86391: IFFALSE 86474
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86393: LD_STRING M
86395: PUSH
86396: LD_VAR 0 1
86400: PPUSH
86401: CALL_OW 437
86405: PUSH
86406: LD_INT 1
86408: ARRAY
86409: PUSH
86410: LD_INT 1
86412: ARRAY
86413: EQUAL
86414: PUSH
86415: LD_VAR 0 2
86419: PUSH
86420: LD_VAR 0 1
86424: PPUSH
86425: CALL_OW 437
86429: PUSH
86430: LD_INT 1
86432: ARRAY
86433: PUSH
86434: LD_INT 2
86436: ARRAY
86437: EQUAL
86438: AND
86439: PUSH
86440: LD_VAR 0 3
86444: PUSH
86445: LD_VAR 0 1
86449: PPUSH
86450: CALL_OW 437
86454: PUSH
86455: LD_INT 1
86457: ARRAY
86458: PUSH
86459: LD_INT 3
86461: ARRAY
86462: EQUAL
86463: AND
86464: IFFALSE 86474
// result := true ;
86466: LD_ADDR_VAR 0 4
86470: PUSH
86471: LD_INT 1
86473: ST_TO_ADDR
// end ; end ;
86474: LD_VAR 0 4
86478: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
86479: LD_INT 0
86481: PPUSH
86482: PPUSH
86483: PPUSH
86484: PPUSH
// if not unit or not area then
86485: LD_VAR 0 1
86489: NOT
86490: PUSH
86491: LD_VAR 0 2
86495: NOT
86496: OR
86497: IFFALSE 86501
// exit ;
86499: GO 86665
// tmp := AreaToList ( area , i ) ;
86501: LD_ADDR_VAR 0 6
86505: PUSH
86506: LD_VAR 0 2
86510: PPUSH
86511: LD_VAR 0 5
86515: PPUSH
86516: CALL_OW 517
86520: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
86521: LD_ADDR_VAR 0 5
86525: PUSH
86526: DOUBLE
86527: LD_INT 1
86529: DEC
86530: ST_TO_ADDR
86531: LD_VAR 0 6
86535: PUSH
86536: LD_INT 1
86538: ARRAY
86539: PUSH
86540: FOR_TO
86541: IFFALSE 86663
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
86543: LD_ADDR_VAR 0 7
86547: PUSH
86548: LD_VAR 0 6
86552: PUSH
86553: LD_INT 1
86555: ARRAY
86556: PUSH
86557: LD_VAR 0 5
86561: ARRAY
86562: PUSH
86563: LD_VAR 0 6
86567: PUSH
86568: LD_INT 2
86570: ARRAY
86571: PUSH
86572: LD_VAR 0 5
86576: ARRAY
86577: PUSH
86578: EMPTY
86579: LIST
86580: LIST
86581: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
86582: LD_VAR 0 7
86586: PUSH
86587: LD_INT 1
86589: ARRAY
86590: PPUSH
86591: LD_VAR 0 7
86595: PUSH
86596: LD_INT 2
86598: ARRAY
86599: PPUSH
86600: CALL_OW 428
86604: PUSH
86605: LD_INT 0
86607: EQUAL
86608: IFFALSE 86661
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
86610: LD_VAR 0 1
86614: PPUSH
86615: LD_VAR 0 7
86619: PUSH
86620: LD_INT 1
86622: ARRAY
86623: PPUSH
86624: LD_VAR 0 7
86628: PUSH
86629: LD_INT 2
86631: ARRAY
86632: PPUSH
86633: LD_VAR 0 3
86637: PPUSH
86638: CALL_OW 48
// result := IsPlaced ( unit ) ;
86642: LD_ADDR_VAR 0 4
86646: PUSH
86647: LD_VAR 0 1
86651: PPUSH
86652: CALL_OW 305
86656: ST_TO_ADDR
// exit ;
86657: POP
86658: POP
86659: GO 86665
// end ; end ;
86661: GO 86540
86663: POP
86664: POP
// end ;
86665: LD_VAR 0 4
86669: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
86670: LD_INT 0
86672: PPUSH
86673: PPUSH
86674: PPUSH
// if not side or side > 8 then
86675: LD_VAR 0 1
86679: NOT
86680: PUSH
86681: LD_VAR 0 1
86685: PUSH
86686: LD_INT 8
86688: GREATER
86689: OR
86690: IFFALSE 86694
// exit ;
86692: GO 86881
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
86694: LD_ADDR_VAR 0 4
86698: PUSH
86699: LD_INT 22
86701: PUSH
86702: LD_VAR 0 1
86706: PUSH
86707: EMPTY
86708: LIST
86709: LIST
86710: PUSH
86711: LD_INT 21
86713: PUSH
86714: LD_INT 3
86716: PUSH
86717: EMPTY
86718: LIST
86719: LIST
86720: PUSH
86721: EMPTY
86722: LIST
86723: LIST
86724: PPUSH
86725: CALL_OW 69
86729: ST_TO_ADDR
// if not tmp then
86730: LD_VAR 0 4
86734: NOT
86735: IFFALSE 86739
// exit ;
86737: GO 86881
// enable_addtolog := true ;
86739: LD_ADDR_OWVAR 81
86743: PUSH
86744: LD_INT 1
86746: ST_TO_ADDR
// AddToLog ( [ ) ;
86747: LD_STRING [
86749: PPUSH
86750: CALL_OW 561
// for i in tmp do
86754: LD_ADDR_VAR 0 3
86758: PUSH
86759: LD_VAR 0 4
86763: PUSH
86764: FOR_IN
86765: IFFALSE 86872
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
86767: LD_STRING [
86769: PUSH
86770: LD_VAR 0 3
86774: PPUSH
86775: CALL_OW 266
86779: STR
86780: PUSH
86781: LD_STRING , 
86783: STR
86784: PUSH
86785: LD_VAR 0 3
86789: PPUSH
86790: CALL_OW 250
86794: STR
86795: PUSH
86796: LD_STRING , 
86798: STR
86799: PUSH
86800: LD_VAR 0 3
86804: PPUSH
86805: CALL_OW 251
86809: STR
86810: PUSH
86811: LD_STRING , 
86813: STR
86814: PUSH
86815: LD_VAR 0 3
86819: PPUSH
86820: CALL_OW 254
86824: STR
86825: PUSH
86826: LD_STRING , 
86828: STR
86829: PUSH
86830: LD_VAR 0 3
86834: PPUSH
86835: LD_INT 1
86837: PPUSH
86838: CALL_OW 268
86842: STR
86843: PUSH
86844: LD_STRING , 
86846: STR
86847: PUSH
86848: LD_VAR 0 3
86852: PPUSH
86853: LD_INT 2
86855: PPUSH
86856: CALL_OW 268
86860: STR
86861: PUSH
86862: LD_STRING ],
86864: STR
86865: PPUSH
86866: CALL_OW 561
// end ;
86870: GO 86764
86872: POP
86873: POP
// AddToLog ( ]; ) ;
86874: LD_STRING ];
86876: PPUSH
86877: CALL_OW 561
// end ;
86881: LD_VAR 0 2
86885: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
86886: LD_INT 0
86888: PPUSH
86889: PPUSH
86890: PPUSH
86891: PPUSH
86892: PPUSH
// if not area or not rate or not max then
86893: LD_VAR 0 1
86897: NOT
86898: PUSH
86899: LD_VAR 0 2
86903: NOT
86904: OR
86905: PUSH
86906: LD_VAR 0 4
86910: NOT
86911: OR
86912: IFFALSE 86916
// exit ;
86914: GO 87105
// while 1 do
86916: LD_INT 1
86918: IFFALSE 87105
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
86920: LD_ADDR_VAR 0 9
86924: PUSH
86925: LD_VAR 0 1
86929: PPUSH
86930: LD_INT 1
86932: PPUSH
86933: CALL_OW 287
86937: PUSH
86938: LD_INT 10
86940: MUL
86941: ST_TO_ADDR
// r := rate / 10 ;
86942: LD_ADDR_VAR 0 7
86946: PUSH
86947: LD_VAR 0 2
86951: PUSH
86952: LD_INT 10
86954: DIVREAL
86955: ST_TO_ADDR
// time := 1 1$00 ;
86956: LD_ADDR_VAR 0 8
86960: PUSH
86961: LD_INT 2100
86963: ST_TO_ADDR
// if amount < min then
86964: LD_VAR 0 9
86968: PUSH
86969: LD_VAR 0 3
86973: LESS
86974: IFFALSE 86992
// r := r * 2 else
86976: LD_ADDR_VAR 0 7
86980: PUSH
86981: LD_VAR 0 7
86985: PUSH
86986: LD_INT 2
86988: MUL
86989: ST_TO_ADDR
86990: GO 87018
// if amount > max then
86992: LD_VAR 0 9
86996: PUSH
86997: LD_VAR 0 4
87001: GREATER
87002: IFFALSE 87018
// r := r / 2 ;
87004: LD_ADDR_VAR 0 7
87008: PUSH
87009: LD_VAR 0 7
87013: PUSH
87014: LD_INT 2
87016: DIVREAL
87017: ST_TO_ADDR
// time := time / r ;
87018: LD_ADDR_VAR 0 8
87022: PUSH
87023: LD_VAR 0 8
87027: PUSH
87028: LD_VAR 0 7
87032: DIVREAL
87033: ST_TO_ADDR
// if time < 0 then
87034: LD_VAR 0 8
87038: PUSH
87039: LD_INT 0
87041: LESS
87042: IFFALSE 87059
// time := time * - 1 ;
87044: LD_ADDR_VAR 0 8
87048: PUSH
87049: LD_VAR 0 8
87053: PUSH
87054: LD_INT 1
87056: NEG
87057: MUL
87058: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
87059: LD_VAR 0 8
87063: PUSH
87064: LD_INT 35
87066: PPUSH
87067: LD_INT 875
87069: PPUSH
87070: CALL_OW 12
87074: PLUS
87075: PPUSH
87076: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
87080: LD_INT 1
87082: PPUSH
87083: LD_INT 5
87085: PPUSH
87086: CALL_OW 12
87090: PPUSH
87091: LD_VAR 0 1
87095: PPUSH
87096: LD_INT 1
87098: PPUSH
87099: CALL_OW 55
// end ;
87103: GO 86916
// end ;
87105: LD_VAR 0 5
87109: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
87110: LD_INT 0
87112: PPUSH
87113: PPUSH
87114: PPUSH
87115: PPUSH
87116: PPUSH
87117: PPUSH
87118: PPUSH
87119: PPUSH
// if not turrets or not factories then
87120: LD_VAR 0 1
87124: NOT
87125: PUSH
87126: LD_VAR 0 2
87130: NOT
87131: OR
87132: IFFALSE 87136
// exit ;
87134: GO 87443
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
87136: LD_ADDR_VAR 0 10
87140: PUSH
87141: LD_INT 5
87143: PUSH
87144: LD_INT 6
87146: PUSH
87147: EMPTY
87148: LIST
87149: LIST
87150: PUSH
87151: LD_INT 2
87153: PUSH
87154: LD_INT 4
87156: PUSH
87157: EMPTY
87158: LIST
87159: LIST
87160: PUSH
87161: LD_INT 3
87163: PUSH
87164: LD_INT 5
87166: PUSH
87167: EMPTY
87168: LIST
87169: LIST
87170: PUSH
87171: EMPTY
87172: LIST
87173: LIST
87174: LIST
87175: PUSH
87176: LD_INT 24
87178: PUSH
87179: LD_INT 25
87181: PUSH
87182: EMPTY
87183: LIST
87184: LIST
87185: PUSH
87186: LD_INT 23
87188: PUSH
87189: LD_INT 27
87191: PUSH
87192: EMPTY
87193: LIST
87194: LIST
87195: PUSH
87196: EMPTY
87197: LIST
87198: LIST
87199: PUSH
87200: LD_INT 42
87202: PUSH
87203: LD_INT 43
87205: PUSH
87206: EMPTY
87207: LIST
87208: LIST
87209: PUSH
87210: LD_INT 44
87212: PUSH
87213: LD_INT 46
87215: PUSH
87216: EMPTY
87217: LIST
87218: LIST
87219: PUSH
87220: LD_INT 45
87222: PUSH
87223: LD_INT 47
87225: PUSH
87226: EMPTY
87227: LIST
87228: LIST
87229: PUSH
87230: EMPTY
87231: LIST
87232: LIST
87233: LIST
87234: PUSH
87235: EMPTY
87236: LIST
87237: LIST
87238: LIST
87239: ST_TO_ADDR
// result := [ ] ;
87240: LD_ADDR_VAR 0 3
87244: PUSH
87245: EMPTY
87246: ST_TO_ADDR
// for i in turrets do
87247: LD_ADDR_VAR 0 4
87251: PUSH
87252: LD_VAR 0 1
87256: PUSH
87257: FOR_IN
87258: IFFALSE 87441
// begin nat := GetNation ( i ) ;
87260: LD_ADDR_VAR 0 7
87264: PUSH
87265: LD_VAR 0 4
87269: PPUSH
87270: CALL_OW 248
87274: ST_TO_ADDR
// weapon := 0 ;
87275: LD_ADDR_VAR 0 8
87279: PUSH
87280: LD_INT 0
87282: ST_TO_ADDR
// if not nat then
87283: LD_VAR 0 7
87287: NOT
87288: IFFALSE 87292
// continue ;
87290: GO 87257
// for j in list [ nat ] do
87292: LD_ADDR_VAR 0 5
87296: PUSH
87297: LD_VAR 0 10
87301: PUSH
87302: LD_VAR 0 7
87306: ARRAY
87307: PUSH
87308: FOR_IN
87309: IFFALSE 87350
// if GetBWeapon ( i ) = j [ 1 ] then
87311: LD_VAR 0 4
87315: PPUSH
87316: CALL_OW 269
87320: PUSH
87321: LD_VAR 0 5
87325: PUSH
87326: LD_INT 1
87328: ARRAY
87329: EQUAL
87330: IFFALSE 87348
// begin weapon := j [ 2 ] ;
87332: LD_ADDR_VAR 0 8
87336: PUSH
87337: LD_VAR 0 5
87341: PUSH
87342: LD_INT 2
87344: ARRAY
87345: ST_TO_ADDR
// break ;
87346: GO 87350
// end ;
87348: GO 87308
87350: POP
87351: POP
// if not weapon then
87352: LD_VAR 0 8
87356: NOT
87357: IFFALSE 87361
// continue ;
87359: GO 87257
// for k in factories do
87361: LD_ADDR_VAR 0 6
87365: PUSH
87366: LD_VAR 0 2
87370: PUSH
87371: FOR_IN
87372: IFFALSE 87437
// begin weapons := AvailableWeaponList ( k ) ;
87374: LD_ADDR_VAR 0 9
87378: PUSH
87379: LD_VAR 0 6
87383: PPUSH
87384: CALL_OW 478
87388: ST_TO_ADDR
// if not weapons then
87389: LD_VAR 0 9
87393: NOT
87394: IFFALSE 87398
// continue ;
87396: GO 87371
// if weapon in weapons then
87398: LD_VAR 0 8
87402: PUSH
87403: LD_VAR 0 9
87407: IN
87408: IFFALSE 87435
// begin result := [ i , weapon ] ;
87410: LD_ADDR_VAR 0 3
87414: PUSH
87415: LD_VAR 0 4
87419: PUSH
87420: LD_VAR 0 8
87424: PUSH
87425: EMPTY
87426: LIST
87427: LIST
87428: ST_TO_ADDR
// exit ;
87429: POP
87430: POP
87431: POP
87432: POP
87433: GO 87443
// end ; end ;
87435: GO 87371
87437: POP
87438: POP
// end ;
87439: GO 87257
87441: POP
87442: POP
// end ;
87443: LD_VAR 0 3
87447: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
87448: LD_INT 0
87450: PPUSH
// if not side or side > 8 then
87451: LD_VAR 0 3
87455: NOT
87456: PUSH
87457: LD_VAR 0 3
87461: PUSH
87462: LD_INT 8
87464: GREATER
87465: OR
87466: IFFALSE 87470
// exit ;
87468: GO 87529
// if not range then
87470: LD_VAR 0 4
87474: NOT
87475: IFFALSE 87486
// range := - 12 ;
87477: LD_ADDR_VAR 0 4
87481: PUSH
87482: LD_INT 12
87484: NEG
87485: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
87486: LD_VAR 0 1
87490: PPUSH
87491: LD_VAR 0 2
87495: PPUSH
87496: LD_VAR 0 3
87500: PPUSH
87501: LD_VAR 0 4
87505: PPUSH
87506: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
87510: LD_VAR 0 1
87514: PPUSH
87515: LD_VAR 0 2
87519: PPUSH
87520: LD_VAR 0 3
87524: PPUSH
87525: CALL_OW 331
// end ;
87529: LD_VAR 0 5
87533: RET
// export function Video ( mode ) ; begin
87534: LD_INT 0
87536: PPUSH
// ingame_video = mode ;
87537: LD_ADDR_OWVAR 52
87541: PUSH
87542: LD_VAR 0 1
87546: ST_TO_ADDR
// interface_hidden = mode ;
87547: LD_ADDR_OWVAR 54
87551: PUSH
87552: LD_VAR 0 1
87556: ST_TO_ADDR
// end ;
87557: LD_VAR 0 2
87561: RET
// export function Join ( array , element ) ; begin
87562: LD_INT 0
87564: PPUSH
// result := Replace ( array , array + 1 , element ) ;
87565: LD_ADDR_VAR 0 3
87569: PUSH
87570: LD_VAR 0 1
87574: PPUSH
87575: LD_VAR 0 1
87579: PUSH
87580: LD_INT 1
87582: PLUS
87583: PPUSH
87584: LD_VAR 0 2
87588: PPUSH
87589: CALL_OW 1
87593: ST_TO_ADDR
// end ;
87594: LD_VAR 0 3
87598: RET
// export function JoinUnion ( array , element ) ; begin
87599: LD_INT 0
87601: PPUSH
// result := array union element ;
87602: LD_ADDR_VAR 0 3
87606: PUSH
87607: LD_VAR 0 1
87611: PUSH
87612: LD_VAR 0 2
87616: UNION
87617: ST_TO_ADDR
// end ;
87618: LD_VAR 0 3
87622: RET
// export function GetBehemoths ( side ) ; begin
87623: LD_INT 0
87625: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
87626: LD_ADDR_VAR 0 2
87630: PUSH
87631: LD_INT 22
87633: PUSH
87634: LD_VAR 0 1
87638: PUSH
87639: EMPTY
87640: LIST
87641: LIST
87642: PUSH
87643: LD_INT 31
87645: PUSH
87646: LD_INT 25
87648: PUSH
87649: EMPTY
87650: LIST
87651: LIST
87652: PUSH
87653: EMPTY
87654: LIST
87655: LIST
87656: PPUSH
87657: CALL_OW 69
87661: ST_TO_ADDR
// end ;
87662: LD_VAR 0 2
87666: RET
// export function Shuffle ( array ) ; var i , index ; begin
87667: LD_INT 0
87669: PPUSH
87670: PPUSH
87671: PPUSH
// result := [ ] ;
87672: LD_ADDR_VAR 0 2
87676: PUSH
87677: EMPTY
87678: ST_TO_ADDR
// if not array then
87679: LD_VAR 0 1
87683: NOT
87684: IFFALSE 87688
// exit ;
87686: GO 87787
// Randomize ;
87688: CALL_OW 10
// for i = array downto 1 do
87692: LD_ADDR_VAR 0 3
87696: PUSH
87697: DOUBLE
87698: LD_VAR 0 1
87702: INC
87703: ST_TO_ADDR
87704: LD_INT 1
87706: PUSH
87707: FOR_DOWNTO
87708: IFFALSE 87785
// begin index := rand ( 1 , array ) ;
87710: LD_ADDR_VAR 0 4
87714: PUSH
87715: LD_INT 1
87717: PPUSH
87718: LD_VAR 0 1
87722: PPUSH
87723: CALL_OW 12
87727: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
87728: LD_ADDR_VAR 0 2
87732: PUSH
87733: LD_VAR 0 2
87737: PPUSH
87738: LD_VAR 0 2
87742: PUSH
87743: LD_INT 1
87745: PLUS
87746: PPUSH
87747: LD_VAR 0 1
87751: PUSH
87752: LD_VAR 0 4
87756: ARRAY
87757: PPUSH
87758: CALL_OW 2
87762: ST_TO_ADDR
// array := Delete ( array , index ) ;
87763: LD_ADDR_VAR 0 1
87767: PUSH
87768: LD_VAR 0 1
87772: PPUSH
87773: LD_VAR 0 4
87777: PPUSH
87778: CALL_OW 3
87782: ST_TO_ADDR
// end ;
87783: GO 87707
87785: POP
87786: POP
// end ;
87787: LD_VAR 0 2
87791: RET
// export function GetBaseMaterials ( base ) ; begin
87792: LD_INT 0
87794: PPUSH
// result := [ 0 , 0 , 0 ] ;
87795: LD_ADDR_VAR 0 2
87799: PUSH
87800: LD_INT 0
87802: PUSH
87803: LD_INT 0
87805: PUSH
87806: LD_INT 0
87808: PUSH
87809: EMPTY
87810: LIST
87811: LIST
87812: LIST
87813: ST_TO_ADDR
// if not base then
87814: LD_VAR 0 1
87818: NOT
87819: IFFALSE 87823
// exit ;
87821: GO 87872
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
87823: LD_ADDR_VAR 0 2
87827: PUSH
87828: LD_VAR 0 1
87832: PPUSH
87833: LD_INT 1
87835: PPUSH
87836: CALL_OW 275
87840: PUSH
87841: LD_VAR 0 1
87845: PPUSH
87846: LD_INT 2
87848: PPUSH
87849: CALL_OW 275
87853: PUSH
87854: LD_VAR 0 1
87858: PPUSH
87859: LD_INT 3
87861: PPUSH
87862: CALL_OW 275
87866: PUSH
87867: EMPTY
87868: LIST
87869: LIST
87870: LIST
87871: ST_TO_ADDR
// end ;
87872: LD_VAR 0 2
87876: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
87877: LD_INT 0
87879: PPUSH
87880: PPUSH
// result := array ;
87881: LD_ADDR_VAR 0 3
87885: PUSH
87886: LD_VAR 0 1
87890: ST_TO_ADDR
// if size >= result then
87891: LD_VAR 0 2
87895: PUSH
87896: LD_VAR 0 3
87900: GREATEREQUAL
87901: IFFALSE 87905
// exit ;
87903: GO 87955
// if size then
87905: LD_VAR 0 2
87909: IFFALSE 87955
// for i := array downto size do
87911: LD_ADDR_VAR 0 4
87915: PUSH
87916: DOUBLE
87917: LD_VAR 0 1
87921: INC
87922: ST_TO_ADDR
87923: LD_VAR 0 2
87927: PUSH
87928: FOR_DOWNTO
87929: IFFALSE 87953
// result := Delete ( result , result ) ;
87931: LD_ADDR_VAR 0 3
87935: PUSH
87936: LD_VAR 0 3
87940: PPUSH
87941: LD_VAR 0 3
87945: PPUSH
87946: CALL_OW 3
87950: ST_TO_ADDR
87951: GO 87928
87953: POP
87954: POP
// end ;
87955: LD_VAR 0 3
87959: RET
// export function ComExit ( unit ) ; var tmp ; begin
87960: LD_INT 0
87962: PPUSH
87963: PPUSH
// if not IsInUnit ( unit ) then
87964: LD_VAR 0 1
87968: PPUSH
87969: CALL_OW 310
87973: NOT
87974: IFFALSE 87978
// exit ;
87976: GO 88038
// tmp := IsInUnit ( unit ) ;
87978: LD_ADDR_VAR 0 3
87982: PUSH
87983: LD_VAR 0 1
87987: PPUSH
87988: CALL_OW 310
87992: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
87993: LD_VAR 0 3
87997: PPUSH
87998: CALL_OW 247
88002: PUSH
88003: LD_INT 2
88005: EQUAL
88006: IFFALSE 88019
// ComExitVehicle ( unit ) else
88008: LD_VAR 0 1
88012: PPUSH
88013: CALL_OW 121
88017: GO 88028
// ComExitBuilding ( unit ) ;
88019: LD_VAR 0 1
88023: PPUSH
88024: CALL_OW 122
// result := tmp ;
88028: LD_ADDR_VAR 0 2
88032: PUSH
88033: LD_VAR 0 3
88037: ST_TO_ADDR
// end ;
88038: LD_VAR 0 2
88042: RET
// export function ComExitAll ( units ) ; var i ; begin
88043: LD_INT 0
88045: PPUSH
88046: PPUSH
// if not units then
88047: LD_VAR 0 1
88051: NOT
88052: IFFALSE 88056
// exit ;
88054: GO 88082
// for i in units do
88056: LD_ADDR_VAR 0 3
88060: PUSH
88061: LD_VAR 0 1
88065: PUSH
88066: FOR_IN
88067: IFFALSE 88080
// ComExit ( i ) ;
88069: LD_VAR 0 3
88073: PPUSH
88074: CALL 87960 0 1
88078: GO 88066
88080: POP
88081: POP
// end ;
88082: LD_VAR 0 2
88086: RET
// export function ResetHc ; begin
88087: LD_INT 0
88089: PPUSH
// InitHc ;
88090: CALL_OW 19
// hc_importance := 0 ;
88094: LD_ADDR_OWVAR 32
88098: PUSH
88099: LD_INT 0
88101: ST_TO_ADDR
// end ;
88102: LD_VAR 0 1
88106: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
88107: LD_INT 0
88109: PPUSH
88110: PPUSH
88111: PPUSH
// _x := ( x1 + x2 ) div 2 ;
88112: LD_ADDR_VAR 0 6
88116: PUSH
88117: LD_VAR 0 1
88121: PUSH
88122: LD_VAR 0 3
88126: PLUS
88127: PUSH
88128: LD_INT 2
88130: DIV
88131: ST_TO_ADDR
// if _x < 0 then
88132: LD_VAR 0 6
88136: PUSH
88137: LD_INT 0
88139: LESS
88140: IFFALSE 88157
// _x := _x * - 1 ;
88142: LD_ADDR_VAR 0 6
88146: PUSH
88147: LD_VAR 0 6
88151: PUSH
88152: LD_INT 1
88154: NEG
88155: MUL
88156: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
88157: LD_ADDR_VAR 0 7
88161: PUSH
88162: LD_VAR 0 2
88166: PUSH
88167: LD_VAR 0 4
88171: PLUS
88172: PUSH
88173: LD_INT 2
88175: DIV
88176: ST_TO_ADDR
// if _y < 0 then
88177: LD_VAR 0 7
88181: PUSH
88182: LD_INT 0
88184: LESS
88185: IFFALSE 88202
// _y := _y * - 1 ;
88187: LD_ADDR_VAR 0 7
88191: PUSH
88192: LD_VAR 0 7
88196: PUSH
88197: LD_INT 1
88199: NEG
88200: MUL
88201: ST_TO_ADDR
// result := [ _x , _y ] ;
88202: LD_ADDR_VAR 0 5
88206: PUSH
88207: LD_VAR 0 6
88211: PUSH
88212: LD_VAR 0 7
88216: PUSH
88217: EMPTY
88218: LIST
88219: LIST
88220: ST_TO_ADDR
// end ;
88221: LD_VAR 0 5
88225: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
88226: LD_INT 0
88228: PPUSH
88229: PPUSH
88230: PPUSH
88231: PPUSH
// task := GetTaskList ( unit ) ;
88232: LD_ADDR_VAR 0 7
88236: PUSH
88237: LD_VAR 0 1
88241: PPUSH
88242: CALL_OW 437
88246: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
88247: LD_VAR 0 7
88251: NOT
88252: PUSH
88253: LD_VAR 0 1
88257: PPUSH
88258: LD_VAR 0 2
88262: PPUSH
88263: CALL_OW 308
88267: NOT
88268: AND
88269: IFFALSE 88273
// exit ;
88271: GO 88391
// if IsInArea ( unit , area ) then
88273: LD_VAR 0 1
88277: PPUSH
88278: LD_VAR 0 2
88282: PPUSH
88283: CALL_OW 308
88287: IFFALSE 88305
// begin ComMoveToArea ( unit , goAway ) ;
88289: LD_VAR 0 1
88293: PPUSH
88294: LD_VAR 0 3
88298: PPUSH
88299: CALL_OW 113
// exit ;
88303: GO 88391
// end ; if task [ 1 ] [ 1 ] <> M then
88305: LD_VAR 0 7
88309: PUSH
88310: LD_INT 1
88312: ARRAY
88313: PUSH
88314: LD_INT 1
88316: ARRAY
88317: PUSH
88318: LD_STRING M
88320: NONEQUAL
88321: IFFALSE 88325
// exit ;
88323: GO 88391
// x := task [ 1 ] [ 2 ] ;
88325: LD_ADDR_VAR 0 5
88329: PUSH
88330: LD_VAR 0 7
88334: PUSH
88335: LD_INT 1
88337: ARRAY
88338: PUSH
88339: LD_INT 2
88341: ARRAY
88342: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
88343: LD_ADDR_VAR 0 6
88347: PUSH
88348: LD_VAR 0 7
88352: PUSH
88353: LD_INT 1
88355: ARRAY
88356: PUSH
88357: LD_INT 3
88359: ARRAY
88360: ST_TO_ADDR
// if InArea ( x , y , area ) then
88361: LD_VAR 0 5
88365: PPUSH
88366: LD_VAR 0 6
88370: PPUSH
88371: LD_VAR 0 2
88375: PPUSH
88376: CALL_OW 309
88380: IFFALSE 88391
// ComStop ( unit ) ;
88382: LD_VAR 0 1
88386: PPUSH
88387: CALL_OW 141
// end ;
88391: LD_VAR 0 4
88395: RET
// export function Abs ( value ) ; begin
88396: LD_INT 0
88398: PPUSH
// result := value ;
88399: LD_ADDR_VAR 0 2
88403: PUSH
88404: LD_VAR 0 1
88408: ST_TO_ADDR
// if value < 0 then
88409: LD_VAR 0 1
88413: PUSH
88414: LD_INT 0
88416: LESS
88417: IFFALSE 88434
// result := value * - 1 ;
88419: LD_ADDR_VAR 0 2
88423: PUSH
88424: LD_VAR 0 1
88428: PUSH
88429: LD_INT 1
88431: NEG
88432: MUL
88433: ST_TO_ADDR
// end ;
88434: LD_VAR 0 2
88438: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
88439: LD_INT 0
88441: PPUSH
88442: PPUSH
88443: PPUSH
88444: PPUSH
88445: PPUSH
88446: PPUSH
88447: PPUSH
88448: PPUSH
// if not unit or not building then
88449: LD_VAR 0 1
88453: NOT
88454: PUSH
88455: LD_VAR 0 2
88459: NOT
88460: OR
88461: IFFALSE 88465
// exit ;
88463: GO 88691
// x := GetX ( building ) ;
88465: LD_ADDR_VAR 0 4
88469: PUSH
88470: LD_VAR 0 2
88474: PPUSH
88475: CALL_OW 250
88479: ST_TO_ADDR
// y := GetY ( building ) ;
88480: LD_ADDR_VAR 0 6
88484: PUSH
88485: LD_VAR 0 2
88489: PPUSH
88490: CALL_OW 251
88494: ST_TO_ADDR
// d := GetDir ( building ) ;
88495: LD_ADDR_VAR 0 8
88499: PUSH
88500: LD_VAR 0 2
88504: PPUSH
88505: CALL_OW 254
88509: ST_TO_ADDR
// r := 4 ;
88510: LD_ADDR_VAR 0 9
88514: PUSH
88515: LD_INT 4
88517: ST_TO_ADDR
// for i := 1 to 5 do
88518: LD_ADDR_VAR 0 10
88522: PUSH
88523: DOUBLE
88524: LD_INT 1
88526: DEC
88527: ST_TO_ADDR
88528: LD_INT 5
88530: PUSH
88531: FOR_TO
88532: IFFALSE 88689
// begin _x := ShiftX ( x , d , r + i ) ;
88534: LD_ADDR_VAR 0 5
88538: PUSH
88539: LD_VAR 0 4
88543: PPUSH
88544: LD_VAR 0 8
88548: PPUSH
88549: LD_VAR 0 9
88553: PUSH
88554: LD_VAR 0 10
88558: PLUS
88559: PPUSH
88560: CALL_OW 272
88564: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
88565: LD_ADDR_VAR 0 7
88569: PUSH
88570: LD_VAR 0 6
88574: PPUSH
88575: LD_VAR 0 8
88579: PPUSH
88580: LD_VAR 0 9
88584: PUSH
88585: LD_VAR 0 10
88589: PLUS
88590: PPUSH
88591: CALL_OW 273
88595: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
88596: LD_VAR 0 5
88600: PPUSH
88601: LD_VAR 0 7
88605: PPUSH
88606: CALL_OW 488
88610: PUSH
88611: LD_VAR 0 5
88615: PPUSH
88616: LD_VAR 0 7
88620: PPUSH
88621: CALL_OW 428
88625: PPUSH
88626: CALL_OW 247
88630: PUSH
88631: LD_INT 3
88633: PUSH
88634: LD_INT 2
88636: PUSH
88637: EMPTY
88638: LIST
88639: LIST
88640: IN
88641: NOT
88642: AND
88643: IFFALSE 88687
// begin ComMoveXY ( unit , _x , _y ) ;
88645: LD_VAR 0 1
88649: PPUSH
88650: LD_VAR 0 5
88654: PPUSH
88655: LD_VAR 0 7
88659: PPUSH
88660: CALL_OW 111
// result := [ _x , _y ] ;
88664: LD_ADDR_VAR 0 3
88668: PUSH
88669: LD_VAR 0 5
88673: PUSH
88674: LD_VAR 0 7
88678: PUSH
88679: EMPTY
88680: LIST
88681: LIST
88682: ST_TO_ADDR
// exit ;
88683: POP
88684: POP
88685: GO 88691
// end ; end ;
88687: GO 88531
88689: POP
88690: POP
// end ;
88691: LD_VAR 0 3
88695: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
88696: LD_INT 0
88698: PPUSH
88699: PPUSH
88700: PPUSH
// result := 0 ;
88701: LD_ADDR_VAR 0 3
88705: PUSH
88706: LD_INT 0
88708: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
88709: LD_VAR 0 1
88713: PUSH
88714: LD_INT 0
88716: LESS
88717: PUSH
88718: LD_VAR 0 1
88722: PUSH
88723: LD_INT 8
88725: GREATER
88726: OR
88727: PUSH
88728: LD_VAR 0 2
88732: PUSH
88733: LD_INT 0
88735: LESS
88736: OR
88737: PUSH
88738: LD_VAR 0 2
88742: PUSH
88743: LD_INT 8
88745: GREATER
88746: OR
88747: IFFALSE 88751
// exit ;
88749: GO 88826
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
88751: LD_ADDR_VAR 0 4
88755: PUSH
88756: LD_INT 22
88758: PUSH
88759: LD_VAR 0 2
88763: PUSH
88764: EMPTY
88765: LIST
88766: LIST
88767: PPUSH
88768: CALL_OW 69
88772: PUSH
88773: FOR_IN
88774: IFFALSE 88824
// begin un := UnitShoot ( i ) ;
88776: LD_ADDR_VAR 0 5
88780: PUSH
88781: LD_VAR 0 4
88785: PPUSH
88786: CALL_OW 504
88790: ST_TO_ADDR
// if GetSide ( un ) = side1 then
88791: LD_VAR 0 5
88795: PPUSH
88796: CALL_OW 255
88800: PUSH
88801: LD_VAR 0 1
88805: EQUAL
88806: IFFALSE 88822
// begin result := un ;
88808: LD_ADDR_VAR 0 3
88812: PUSH
88813: LD_VAR 0 5
88817: ST_TO_ADDR
// exit ;
88818: POP
88819: POP
88820: GO 88826
// end ; end ;
88822: GO 88773
88824: POP
88825: POP
// end ;
88826: LD_VAR 0 3
88830: RET
// export function GetCargoBay ( units ) ; begin
88831: LD_INT 0
88833: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
88834: LD_ADDR_VAR 0 2
88838: PUSH
88839: LD_VAR 0 1
88843: PPUSH
88844: LD_INT 2
88846: PUSH
88847: LD_INT 34
88849: PUSH
88850: LD_INT 12
88852: PUSH
88853: EMPTY
88854: LIST
88855: LIST
88856: PUSH
88857: LD_INT 34
88859: PUSH
88860: LD_INT 51
88862: PUSH
88863: EMPTY
88864: LIST
88865: LIST
88866: PUSH
88867: LD_INT 34
88869: PUSH
88870: LD_INT 32
88872: PUSH
88873: EMPTY
88874: LIST
88875: LIST
88876: PUSH
88877: LD_INT 34
88879: PUSH
88880: LD_INT 89
88882: PUSH
88883: EMPTY
88884: LIST
88885: LIST
88886: PUSH
88887: EMPTY
88888: LIST
88889: LIST
88890: LIST
88891: LIST
88892: LIST
88893: PPUSH
88894: CALL_OW 72
88898: ST_TO_ADDR
// end ;
88899: LD_VAR 0 2
88903: RET
// export function Negate ( value ) ; begin
88904: LD_INT 0
88906: PPUSH
// result := not value ;
88907: LD_ADDR_VAR 0 2
88911: PUSH
88912: LD_VAR 0 1
88916: NOT
88917: ST_TO_ADDR
// end ;
88918: LD_VAR 0 2
88922: RET
// export function Inc ( value ) ; begin
88923: LD_INT 0
88925: PPUSH
// result := value + 1 ;
88926: LD_ADDR_VAR 0 2
88930: PUSH
88931: LD_VAR 0 1
88935: PUSH
88936: LD_INT 1
88938: PLUS
88939: ST_TO_ADDR
// end ;
88940: LD_VAR 0 2
88944: RET
// export function Dec ( value ) ; begin
88945: LD_INT 0
88947: PPUSH
// result := value - 1 ;
88948: LD_ADDR_VAR 0 2
88952: PUSH
88953: LD_VAR 0 1
88957: PUSH
88958: LD_INT 1
88960: MINUS
88961: ST_TO_ADDR
// end ;
88962: LD_VAR 0 2
88966: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
88967: LD_INT 0
88969: PPUSH
88970: PPUSH
88971: PPUSH
88972: PPUSH
88973: PPUSH
88974: PPUSH
88975: PPUSH
88976: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
88977: LD_VAR 0 1
88981: PPUSH
88982: LD_VAR 0 2
88986: PPUSH
88987: CALL_OW 488
88991: NOT
88992: PUSH
88993: LD_VAR 0 3
88997: PPUSH
88998: LD_VAR 0 4
89002: PPUSH
89003: CALL_OW 488
89007: NOT
89008: OR
89009: IFFALSE 89022
// begin result := - 1 ;
89011: LD_ADDR_VAR 0 5
89015: PUSH
89016: LD_INT 1
89018: NEG
89019: ST_TO_ADDR
// exit ;
89020: GO 89257
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
89022: LD_ADDR_VAR 0 12
89026: PUSH
89027: LD_VAR 0 1
89031: PPUSH
89032: LD_VAR 0 2
89036: PPUSH
89037: LD_VAR 0 3
89041: PPUSH
89042: LD_VAR 0 4
89046: PPUSH
89047: CALL 88107 0 4
89051: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
89052: LD_ADDR_VAR 0 11
89056: PUSH
89057: LD_VAR 0 1
89061: PPUSH
89062: LD_VAR 0 2
89066: PPUSH
89067: LD_VAR 0 12
89071: PUSH
89072: LD_INT 1
89074: ARRAY
89075: PPUSH
89076: LD_VAR 0 12
89080: PUSH
89081: LD_INT 2
89083: ARRAY
89084: PPUSH
89085: CALL_OW 298
89089: ST_TO_ADDR
// distance := 9999 ;
89090: LD_ADDR_VAR 0 10
89094: PUSH
89095: LD_INT 9999
89097: ST_TO_ADDR
// for i := 0 to 5 do
89098: LD_ADDR_VAR 0 6
89102: PUSH
89103: DOUBLE
89104: LD_INT 0
89106: DEC
89107: ST_TO_ADDR
89108: LD_INT 5
89110: PUSH
89111: FOR_TO
89112: IFFALSE 89255
// begin _x := ShiftX ( x1 , i , centerDist ) ;
89114: LD_ADDR_VAR 0 7
89118: PUSH
89119: LD_VAR 0 1
89123: PPUSH
89124: LD_VAR 0 6
89128: PPUSH
89129: LD_VAR 0 11
89133: PPUSH
89134: CALL_OW 272
89138: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
89139: LD_ADDR_VAR 0 8
89143: PUSH
89144: LD_VAR 0 2
89148: PPUSH
89149: LD_VAR 0 6
89153: PPUSH
89154: LD_VAR 0 11
89158: PPUSH
89159: CALL_OW 273
89163: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
89164: LD_VAR 0 7
89168: PPUSH
89169: LD_VAR 0 8
89173: PPUSH
89174: CALL_OW 488
89178: NOT
89179: IFFALSE 89183
// continue ;
89181: GO 89111
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
89183: LD_ADDR_VAR 0 9
89187: PUSH
89188: LD_VAR 0 12
89192: PUSH
89193: LD_INT 1
89195: ARRAY
89196: PPUSH
89197: LD_VAR 0 12
89201: PUSH
89202: LD_INT 2
89204: ARRAY
89205: PPUSH
89206: LD_VAR 0 7
89210: PPUSH
89211: LD_VAR 0 8
89215: PPUSH
89216: CALL_OW 298
89220: ST_TO_ADDR
// if tmp < distance then
89221: LD_VAR 0 9
89225: PUSH
89226: LD_VAR 0 10
89230: LESS
89231: IFFALSE 89253
// begin result := i ;
89233: LD_ADDR_VAR 0 5
89237: PUSH
89238: LD_VAR 0 6
89242: ST_TO_ADDR
// distance := tmp ;
89243: LD_ADDR_VAR 0 10
89247: PUSH
89248: LD_VAR 0 9
89252: ST_TO_ADDR
// end ; end ;
89253: GO 89111
89255: POP
89256: POP
// end ;
89257: LD_VAR 0 5
89261: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89262: LD_INT 0
89264: PPUSH
89265: PPUSH
// if not driver or not IsInUnit ( driver ) then
89266: LD_VAR 0 1
89270: NOT
89271: PUSH
89272: LD_VAR 0 1
89276: PPUSH
89277: CALL_OW 310
89281: NOT
89282: OR
89283: IFFALSE 89287
// exit ;
89285: GO 89377
// vehicle := IsInUnit ( driver ) ;
89287: LD_ADDR_VAR 0 3
89291: PUSH
89292: LD_VAR 0 1
89296: PPUSH
89297: CALL_OW 310
89301: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89302: LD_VAR 0 1
89306: PPUSH
89307: LD_STRING \
89309: PUSH
89310: LD_INT 0
89312: PUSH
89313: LD_INT 0
89315: PUSH
89316: LD_INT 0
89318: PUSH
89319: LD_INT 0
89321: PUSH
89322: LD_INT 0
89324: PUSH
89325: LD_INT 0
89327: PUSH
89328: EMPTY
89329: LIST
89330: LIST
89331: LIST
89332: LIST
89333: LIST
89334: LIST
89335: LIST
89336: PUSH
89337: LD_STRING E
89339: PUSH
89340: LD_INT 0
89342: PUSH
89343: LD_INT 0
89345: PUSH
89346: LD_VAR 0 3
89350: PUSH
89351: LD_INT 0
89353: PUSH
89354: LD_INT 0
89356: PUSH
89357: LD_INT 0
89359: PUSH
89360: EMPTY
89361: LIST
89362: LIST
89363: LIST
89364: LIST
89365: LIST
89366: LIST
89367: LIST
89368: PUSH
89369: EMPTY
89370: LIST
89371: LIST
89372: PPUSH
89373: CALL_OW 446
// end ;
89377: LD_VAR 0 2
89381: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89382: LD_INT 0
89384: PPUSH
89385: PPUSH
// if not driver or not IsInUnit ( driver ) then
89386: LD_VAR 0 1
89390: NOT
89391: PUSH
89392: LD_VAR 0 1
89396: PPUSH
89397: CALL_OW 310
89401: NOT
89402: OR
89403: IFFALSE 89407
// exit ;
89405: GO 89497
// vehicle := IsInUnit ( driver ) ;
89407: LD_ADDR_VAR 0 3
89411: PUSH
89412: LD_VAR 0 1
89416: PPUSH
89417: CALL_OW 310
89421: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89422: LD_VAR 0 1
89426: PPUSH
89427: LD_STRING \
89429: PUSH
89430: LD_INT 0
89432: PUSH
89433: LD_INT 0
89435: PUSH
89436: LD_INT 0
89438: PUSH
89439: LD_INT 0
89441: PUSH
89442: LD_INT 0
89444: PUSH
89445: LD_INT 0
89447: PUSH
89448: EMPTY
89449: LIST
89450: LIST
89451: LIST
89452: LIST
89453: LIST
89454: LIST
89455: LIST
89456: PUSH
89457: LD_STRING E
89459: PUSH
89460: LD_INT 0
89462: PUSH
89463: LD_INT 0
89465: PUSH
89466: LD_VAR 0 3
89470: PUSH
89471: LD_INT 0
89473: PUSH
89474: LD_INT 0
89476: PUSH
89477: LD_INT 0
89479: PUSH
89480: EMPTY
89481: LIST
89482: LIST
89483: LIST
89484: LIST
89485: LIST
89486: LIST
89487: LIST
89488: PUSH
89489: EMPTY
89490: LIST
89491: LIST
89492: PPUSH
89493: CALL_OW 447
// end ;
89497: LD_VAR 0 2
89501: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
89502: LD_INT 0
89504: PPUSH
89505: PPUSH
89506: PPUSH
// tmp := [ ] ;
89507: LD_ADDR_VAR 0 5
89511: PUSH
89512: EMPTY
89513: ST_TO_ADDR
// for i in units do
89514: LD_ADDR_VAR 0 4
89518: PUSH
89519: LD_VAR 0 1
89523: PUSH
89524: FOR_IN
89525: IFFALSE 89563
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
89527: LD_ADDR_VAR 0 5
89531: PUSH
89532: LD_VAR 0 5
89536: PPUSH
89537: LD_VAR 0 5
89541: PUSH
89542: LD_INT 1
89544: PLUS
89545: PPUSH
89546: LD_VAR 0 4
89550: PPUSH
89551: CALL_OW 256
89555: PPUSH
89556: CALL_OW 2
89560: ST_TO_ADDR
89561: GO 89524
89563: POP
89564: POP
// if not tmp then
89565: LD_VAR 0 5
89569: NOT
89570: IFFALSE 89574
// exit ;
89572: GO 89622
// if asc then
89574: LD_VAR 0 2
89578: IFFALSE 89602
// result := SortListByListAsc ( units , tmp ) else
89580: LD_ADDR_VAR 0 3
89584: PUSH
89585: LD_VAR 0 1
89589: PPUSH
89590: LD_VAR 0 5
89594: PPUSH
89595: CALL_OW 76
89599: ST_TO_ADDR
89600: GO 89622
// result := SortListByListDesc ( units , tmp ) ;
89602: LD_ADDR_VAR 0 3
89606: PUSH
89607: LD_VAR 0 1
89611: PPUSH
89612: LD_VAR 0 5
89616: PPUSH
89617: CALL_OW 77
89621: ST_TO_ADDR
// end ;
89622: LD_VAR 0 3
89626: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
89627: LD_INT 0
89629: PPUSH
89630: PPUSH
// task := GetTaskList ( mech ) ;
89631: LD_ADDR_VAR 0 4
89635: PUSH
89636: LD_VAR 0 1
89640: PPUSH
89641: CALL_OW 437
89645: ST_TO_ADDR
// if not task then
89646: LD_VAR 0 4
89650: NOT
89651: IFFALSE 89655
// exit ;
89653: GO 89697
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
89655: LD_ADDR_VAR 0 3
89659: PUSH
89660: LD_VAR 0 4
89664: PUSH
89665: LD_INT 1
89667: ARRAY
89668: PUSH
89669: LD_INT 1
89671: ARRAY
89672: PUSH
89673: LD_STRING r
89675: EQUAL
89676: PUSH
89677: LD_VAR 0 4
89681: PUSH
89682: LD_INT 1
89684: ARRAY
89685: PUSH
89686: LD_INT 4
89688: ARRAY
89689: PUSH
89690: LD_VAR 0 2
89694: EQUAL
89695: AND
89696: ST_TO_ADDR
// end ;
89697: LD_VAR 0 3
89701: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
89702: LD_INT 0
89704: PPUSH
// SetDir ( unit , d ) ;
89705: LD_VAR 0 1
89709: PPUSH
89710: LD_VAR 0 4
89714: PPUSH
89715: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
89719: LD_VAR 0 1
89723: PPUSH
89724: LD_VAR 0 2
89728: PPUSH
89729: LD_VAR 0 3
89733: PPUSH
89734: LD_VAR 0 5
89738: PPUSH
89739: CALL_OW 48
// end ;
89743: LD_VAR 0 6
89747: RET
// export function ToNaturalNumber ( number ) ; begin
89748: LD_INT 0
89750: PPUSH
// result := number div 1 ;
89751: LD_ADDR_VAR 0 2
89755: PUSH
89756: LD_VAR 0 1
89760: PUSH
89761: LD_INT 1
89763: DIV
89764: ST_TO_ADDR
// if number < 0 then
89765: LD_VAR 0 1
89769: PUSH
89770: LD_INT 0
89772: LESS
89773: IFFALSE 89783
// result := 0 ;
89775: LD_ADDR_VAR 0 2
89779: PUSH
89780: LD_INT 0
89782: ST_TO_ADDR
// end ;
89783: LD_VAR 0 2
89787: RET
// export function SortByClass ( units , class ) ; var un ; begin
89788: LD_INT 0
89790: PPUSH
89791: PPUSH
// if not units or not class then
89792: LD_VAR 0 1
89796: NOT
89797: PUSH
89798: LD_VAR 0 2
89802: NOT
89803: OR
89804: IFFALSE 89808
// exit ;
89806: GO 89903
// result := [ ] ;
89808: LD_ADDR_VAR 0 3
89812: PUSH
89813: EMPTY
89814: ST_TO_ADDR
// for un in units do
89815: LD_ADDR_VAR 0 4
89819: PUSH
89820: LD_VAR 0 1
89824: PUSH
89825: FOR_IN
89826: IFFALSE 89901
// if GetClass ( un ) = class then
89828: LD_VAR 0 4
89832: PPUSH
89833: CALL_OW 257
89837: PUSH
89838: LD_VAR 0 2
89842: EQUAL
89843: IFFALSE 89870
// result := Insert ( result , 1 , un ) else
89845: LD_ADDR_VAR 0 3
89849: PUSH
89850: LD_VAR 0 3
89854: PPUSH
89855: LD_INT 1
89857: PPUSH
89858: LD_VAR 0 4
89862: PPUSH
89863: CALL_OW 2
89867: ST_TO_ADDR
89868: GO 89899
// result := Replace ( result , result + 1 , un ) ;
89870: LD_ADDR_VAR 0 3
89874: PUSH
89875: LD_VAR 0 3
89879: PPUSH
89880: LD_VAR 0 3
89884: PUSH
89885: LD_INT 1
89887: PLUS
89888: PPUSH
89889: LD_VAR 0 4
89893: PPUSH
89894: CALL_OW 1
89898: ST_TO_ADDR
89899: GO 89825
89901: POP
89902: POP
// end ;
89903: LD_VAR 0 3
89907: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
89908: LD_INT 0
89910: PPUSH
89911: PPUSH
89912: PPUSH
89913: PPUSH
89914: PPUSH
89915: PPUSH
89916: PPUSH
// result := [ ] ;
89917: LD_ADDR_VAR 0 4
89921: PUSH
89922: EMPTY
89923: ST_TO_ADDR
// if x - r < 0 then
89924: LD_VAR 0 1
89928: PUSH
89929: LD_VAR 0 3
89933: MINUS
89934: PUSH
89935: LD_INT 0
89937: LESS
89938: IFFALSE 89950
// min_x := 0 else
89940: LD_ADDR_VAR 0 8
89944: PUSH
89945: LD_INT 0
89947: ST_TO_ADDR
89948: GO 89966
// min_x := x - r ;
89950: LD_ADDR_VAR 0 8
89954: PUSH
89955: LD_VAR 0 1
89959: PUSH
89960: LD_VAR 0 3
89964: MINUS
89965: ST_TO_ADDR
// if y - r < 0 then
89966: LD_VAR 0 2
89970: PUSH
89971: LD_VAR 0 3
89975: MINUS
89976: PUSH
89977: LD_INT 0
89979: LESS
89980: IFFALSE 89992
// min_y := 0 else
89982: LD_ADDR_VAR 0 7
89986: PUSH
89987: LD_INT 0
89989: ST_TO_ADDR
89990: GO 90008
// min_y := y - r ;
89992: LD_ADDR_VAR 0 7
89996: PUSH
89997: LD_VAR 0 2
90001: PUSH
90002: LD_VAR 0 3
90006: MINUS
90007: ST_TO_ADDR
// max_x := x + r ;
90008: LD_ADDR_VAR 0 9
90012: PUSH
90013: LD_VAR 0 1
90017: PUSH
90018: LD_VAR 0 3
90022: PLUS
90023: ST_TO_ADDR
// max_y := y + r ;
90024: LD_ADDR_VAR 0 10
90028: PUSH
90029: LD_VAR 0 2
90033: PUSH
90034: LD_VAR 0 3
90038: PLUS
90039: ST_TO_ADDR
// for _x = min_x to max_x do
90040: LD_ADDR_VAR 0 5
90044: PUSH
90045: DOUBLE
90046: LD_VAR 0 8
90050: DEC
90051: ST_TO_ADDR
90052: LD_VAR 0 9
90056: PUSH
90057: FOR_TO
90058: IFFALSE 90159
// for _y = min_y to max_y do
90060: LD_ADDR_VAR 0 6
90064: PUSH
90065: DOUBLE
90066: LD_VAR 0 7
90070: DEC
90071: ST_TO_ADDR
90072: LD_VAR 0 10
90076: PUSH
90077: FOR_TO
90078: IFFALSE 90155
// begin if not ValidHex ( _x , _y ) then
90080: LD_VAR 0 5
90084: PPUSH
90085: LD_VAR 0 6
90089: PPUSH
90090: CALL_OW 488
90094: NOT
90095: IFFALSE 90099
// continue ;
90097: GO 90077
// if GetResourceTypeXY ( _x , _y ) then
90099: LD_VAR 0 5
90103: PPUSH
90104: LD_VAR 0 6
90108: PPUSH
90109: CALL_OW 283
90113: IFFALSE 90153
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
90115: LD_ADDR_VAR 0 4
90119: PUSH
90120: LD_VAR 0 4
90124: PPUSH
90125: LD_VAR 0 4
90129: PUSH
90130: LD_INT 1
90132: PLUS
90133: PPUSH
90134: LD_VAR 0 5
90138: PUSH
90139: LD_VAR 0 6
90143: PUSH
90144: EMPTY
90145: LIST
90146: LIST
90147: PPUSH
90148: CALL_OW 1
90152: ST_TO_ADDR
// end ;
90153: GO 90077
90155: POP
90156: POP
90157: GO 90057
90159: POP
90160: POP
// end ;
90161: LD_VAR 0 4
90165: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
90166: LD_INT 0
90168: PPUSH
90169: PPUSH
90170: PPUSH
90171: PPUSH
90172: PPUSH
90173: PPUSH
90174: PPUSH
90175: PPUSH
// if not units then
90176: LD_VAR 0 1
90180: NOT
90181: IFFALSE 90185
// exit ;
90183: GO 90709
// result := UnitFilter ( units , [ f_ok ] ) ;
90185: LD_ADDR_VAR 0 3
90189: PUSH
90190: LD_VAR 0 1
90194: PPUSH
90195: LD_INT 50
90197: PUSH
90198: EMPTY
90199: LIST
90200: PPUSH
90201: CALL_OW 72
90205: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
90206: LD_ADDR_VAR 0 8
90210: PUSH
90211: LD_VAR 0 1
90215: PUSH
90216: LD_INT 1
90218: ARRAY
90219: PPUSH
90220: CALL_OW 255
90224: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
90225: LD_ADDR_VAR 0 10
90229: PUSH
90230: LD_INT 29
90232: PUSH
90233: LD_INT 91
90235: PUSH
90236: LD_INT 49
90238: PUSH
90239: EMPTY
90240: LIST
90241: LIST
90242: LIST
90243: ST_TO_ADDR
// if not result then
90244: LD_VAR 0 3
90248: NOT
90249: IFFALSE 90253
// exit ;
90251: GO 90709
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
90253: LD_ADDR_VAR 0 5
90257: PUSH
90258: LD_INT 81
90260: PUSH
90261: LD_VAR 0 8
90265: PUSH
90266: EMPTY
90267: LIST
90268: LIST
90269: PPUSH
90270: CALL_OW 69
90274: ST_TO_ADDR
// for i in result do
90275: LD_ADDR_VAR 0 4
90279: PUSH
90280: LD_VAR 0 3
90284: PUSH
90285: FOR_IN
90286: IFFALSE 90707
// begin tag := GetTag ( i ) + 1 ;
90288: LD_ADDR_VAR 0 9
90292: PUSH
90293: LD_VAR 0 4
90297: PPUSH
90298: CALL_OW 110
90302: PUSH
90303: LD_INT 1
90305: PLUS
90306: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
90307: LD_ADDR_VAR 0 7
90311: PUSH
90312: LD_VAR 0 4
90316: PPUSH
90317: CALL_OW 250
90321: PPUSH
90322: LD_VAR 0 4
90326: PPUSH
90327: CALL_OW 251
90331: PPUSH
90332: LD_INT 6
90334: PPUSH
90335: CALL 89908 0 3
90339: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
90340: LD_VAR 0 4
90344: PPUSH
90345: CALL_OW 247
90349: PUSH
90350: LD_INT 2
90352: EQUAL
90353: PUSH
90354: LD_VAR 0 7
90358: AND
90359: PUSH
90360: LD_VAR 0 4
90364: PPUSH
90365: CALL_OW 264
90369: PUSH
90370: LD_VAR 0 10
90374: IN
90375: NOT
90376: AND
90377: IFFALSE 90416
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
90379: LD_VAR 0 4
90383: PPUSH
90384: LD_VAR 0 7
90388: PUSH
90389: LD_INT 1
90391: ARRAY
90392: PUSH
90393: LD_INT 1
90395: ARRAY
90396: PPUSH
90397: LD_VAR 0 7
90401: PUSH
90402: LD_INT 1
90404: ARRAY
90405: PUSH
90406: LD_INT 2
90408: ARRAY
90409: PPUSH
90410: CALL_OW 116
90414: GO 90705
// if path > tag then
90416: LD_VAR 0 2
90420: PUSH
90421: LD_VAR 0 9
90425: GREATER
90426: IFFALSE 90634
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
90428: LD_ADDR_VAR 0 6
90432: PUSH
90433: LD_VAR 0 5
90437: PPUSH
90438: LD_INT 91
90440: PUSH
90441: LD_VAR 0 4
90445: PUSH
90446: LD_INT 8
90448: PUSH
90449: EMPTY
90450: LIST
90451: LIST
90452: LIST
90453: PPUSH
90454: CALL_OW 72
90458: ST_TO_ADDR
// if nearEnemy then
90459: LD_VAR 0 6
90463: IFFALSE 90532
// begin if GetWeapon ( i ) = ru_time_lapser then
90465: LD_VAR 0 4
90469: PPUSH
90470: CALL_OW 264
90474: PUSH
90475: LD_INT 49
90477: EQUAL
90478: IFFALSE 90506
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
90480: LD_VAR 0 4
90484: PPUSH
90485: LD_VAR 0 6
90489: PPUSH
90490: LD_VAR 0 4
90494: PPUSH
90495: CALL_OW 74
90499: PPUSH
90500: CALL_OW 112
90504: GO 90530
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
90506: LD_VAR 0 4
90510: PPUSH
90511: LD_VAR 0 6
90515: PPUSH
90516: LD_VAR 0 4
90520: PPUSH
90521: CALL_OW 74
90525: PPUSH
90526: CALL_OW 115
// end else
90530: GO 90632
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
90532: LD_VAR 0 4
90536: PPUSH
90537: LD_VAR 0 2
90541: PUSH
90542: LD_VAR 0 9
90546: ARRAY
90547: PUSH
90548: LD_INT 1
90550: ARRAY
90551: PPUSH
90552: LD_VAR 0 2
90556: PUSH
90557: LD_VAR 0 9
90561: ARRAY
90562: PUSH
90563: LD_INT 2
90565: ARRAY
90566: PPUSH
90567: CALL_OW 297
90571: PUSH
90572: LD_INT 6
90574: GREATER
90575: IFFALSE 90618
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
90577: LD_VAR 0 4
90581: PPUSH
90582: LD_VAR 0 2
90586: PUSH
90587: LD_VAR 0 9
90591: ARRAY
90592: PUSH
90593: LD_INT 1
90595: ARRAY
90596: PPUSH
90597: LD_VAR 0 2
90601: PUSH
90602: LD_VAR 0 9
90606: ARRAY
90607: PUSH
90608: LD_INT 2
90610: ARRAY
90611: PPUSH
90612: CALL_OW 114
90616: GO 90632
// SetTag ( i , tag ) ;
90618: LD_VAR 0 4
90622: PPUSH
90623: LD_VAR 0 9
90627: PPUSH
90628: CALL_OW 109
// end else
90632: GO 90705
// if enemy then
90634: LD_VAR 0 5
90638: IFFALSE 90705
// begin if GetWeapon ( i ) = ru_time_lapser then
90640: LD_VAR 0 4
90644: PPUSH
90645: CALL_OW 264
90649: PUSH
90650: LD_INT 49
90652: EQUAL
90653: IFFALSE 90681
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
90655: LD_VAR 0 4
90659: PPUSH
90660: LD_VAR 0 5
90664: PPUSH
90665: LD_VAR 0 4
90669: PPUSH
90670: CALL_OW 74
90674: PPUSH
90675: CALL_OW 112
90679: GO 90705
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
90681: LD_VAR 0 4
90685: PPUSH
90686: LD_VAR 0 5
90690: PPUSH
90691: LD_VAR 0 4
90695: PPUSH
90696: CALL_OW 74
90700: PPUSH
90701: CALL_OW 115
// end ; end ;
90705: GO 90285
90707: POP
90708: POP
// end ;
90709: LD_VAR 0 3
90713: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
90714: LD_INT 0
90716: PPUSH
90717: PPUSH
90718: PPUSH
// if not unit or IsInUnit ( unit ) then
90719: LD_VAR 0 1
90723: NOT
90724: PUSH
90725: LD_VAR 0 1
90729: PPUSH
90730: CALL_OW 310
90734: OR
90735: IFFALSE 90739
// exit ;
90737: GO 90830
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
90739: LD_ADDR_VAR 0 4
90743: PUSH
90744: LD_VAR 0 1
90748: PPUSH
90749: CALL_OW 250
90753: PPUSH
90754: LD_VAR 0 2
90758: PPUSH
90759: LD_INT 1
90761: PPUSH
90762: CALL_OW 272
90766: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
90767: LD_ADDR_VAR 0 5
90771: PUSH
90772: LD_VAR 0 1
90776: PPUSH
90777: CALL_OW 251
90781: PPUSH
90782: LD_VAR 0 2
90786: PPUSH
90787: LD_INT 1
90789: PPUSH
90790: CALL_OW 273
90794: ST_TO_ADDR
// if ValidHex ( x , y ) then
90795: LD_VAR 0 4
90799: PPUSH
90800: LD_VAR 0 5
90804: PPUSH
90805: CALL_OW 488
90809: IFFALSE 90830
// ComTurnXY ( unit , x , y ) ;
90811: LD_VAR 0 1
90815: PPUSH
90816: LD_VAR 0 4
90820: PPUSH
90821: LD_VAR 0 5
90825: PPUSH
90826: CALL_OW 118
// end ;
90830: LD_VAR 0 3
90834: RET
// export function SeeUnits ( side , units ) ; var i ; begin
90835: LD_INT 0
90837: PPUSH
90838: PPUSH
// result := false ;
90839: LD_ADDR_VAR 0 3
90843: PUSH
90844: LD_INT 0
90846: ST_TO_ADDR
// if not units then
90847: LD_VAR 0 2
90851: NOT
90852: IFFALSE 90856
// exit ;
90854: GO 90901
// for i in units do
90856: LD_ADDR_VAR 0 4
90860: PUSH
90861: LD_VAR 0 2
90865: PUSH
90866: FOR_IN
90867: IFFALSE 90899
// if See ( side , i ) then
90869: LD_VAR 0 1
90873: PPUSH
90874: LD_VAR 0 4
90878: PPUSH
90879: CALL_OW 292
90883: IFFALSE 90897
// begin result := true ;
90885: LD_ADDR_VAR 0 3
90889: PUSH
90890: LD_INT 1
90892: ST_TO_ADDR
// exit ;
90893: POP
90894: POP
90895: GO 90901
// end ;
90897: GO 90866
90899: POP
90900: POP
// end ;
90901: LD_VAR 0 3
90905: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
90906: LD_INT 0
90908: PPUSH
90909: PPUSH
90910: PPUSH
90911: PPUSH
// if not unit or not points then
90912: LD_VAR 0 1
90916: NOT
90917: PUSH
90918: LD_VAR 0 2
90922: NOT
90923: OR
90924: IFFALSE 90928
// exit ;
90926: GO 91018
// dist := 99999 ;
90928: LD_ADDR_VAR 0 5
90932: PUSH
90933: LD_INT 99999
90935: ST_TO_ADDR
// for i in points do
90936: LD_ADDR_VAR 0 4
90940: PUSH
90941: LD_VAR 0 2
90945: PUSH
90946: FOR_IN
90947: IFFALSE 91016
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
90949: LD_ADDR_VAR 0 6
90953: PUSH
90954: LD_VAR 0 1
90958: PPUSH
90959: LD_VAR 0 4
90963: PUSH
90964: LD_INT 1
90966: ARRAY
90967: PPUSH
90968: LD_VAR 0 4
90972: PUSH
90973: LD_INT 2
90975: ARRAY
90976: PPUSH
90977: CALL_OW 297
90981: ST_TO_ADDR
// if tmpDist < dist then
90982: LD_VAR 0 6
90986: PUSH
90987: LD_VAR 0 5
90991: LESS
90992: IFFALSE 91014
// begin result := i ;
90994: LD_ADDR_VAR 0 3
90998: PUSH
90999: LD_VAR 0 4
91003: ST_TO_ADDR
// dist := tmpDist ;
91004: LD_ADDR_VAR 0 5
91008: PUSH
91009: LD_VAR 0 6
91013: ST_TO_ADDR
// end ; end ;
91014: GO 90946
91016: POP
91017: POP
// end ;
91018: LD_VAR 0 3
91022: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
91023: LD_INT 0
91025: PPUSH
// uc_side := side ;
91026: LD_ADDR_OWVAR 20
91030: PUSH
91031: LD_VAR 0 1
91035: ST_TO_ADDR
// uc_nation := 3 ;
91036: LD_ADDR_OWVAR 21
91040: PUSH
91041: LD_INT 3
91043: ST_TO_ADDR
// vc_chassis := 25 ;
91044: LD_ADDR_OWVAR 37
91048: PUSH
91049: LD_INT 25
91051: ST_TO_ADDR
// vc_engine := engine_siberite ;
91052: LD_ADDR_OWVAR 39
91056: PUSH
91057: LD_INT 3
91059: ST_TO_ADDR
// vc_control := control_computer ;
91060: LD_ADDR_OWVAR 38
91064: PUSH
91065: LD_INT 3
91067: ST_TO_ADDR
// vc_weapon := 59 ;
91068: LD_ADDR_OWVAR 40
91072: PUSH
91073: LD_INT 59
91075: ST_TO_ADDR
// result := CreateVehicle ;
91076: LD_ADDR_VAR 0 5
91080: PUSH
91081: CALL_OW 45
91085: ST_TO_ADDR
// SetDir ( result , d ) ;
91086: LD_VAR 0 5
91090: PPUSH
91091: LD_VAR 0 4
91095: PPUSH
91096: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
91100: LD_VAR 0 5
91104: PPUSH
91105: LD_VAR 0 2
91109: PPUSH
91110: LD_VAR 0 3
91114: PPUSH
91115: LD_INT 0
91117: PPUSH
91118: CALL_OW 48
// end ;
91122: LD_VAR 0 5
91126: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
91127: LD_INT 0
91129: PPUSH
91130: PPUSH
91131: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
91132: LD_ADDR_VAR 0 2
91136: PUSH
91137: LD_INT 0
91139: PUSH
91140: LD_INT 0
91142: PUSH
91143: LD_INT 0
91145: PUSH
91146: LD_INT 0
91148: PUSH
91149: EMPTY
91150: LIST
91151: LIST
91152: LIST
91153: LIST
91154: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
91155: LD_VAR 0 1
91159: NOT
91160: PUSH
91161: LD_VAR 0 1
91165: PPUSH
91166: CALL_OW 264
91170: PUSH
91171: LD_INT 12
91173: PUSH
91174: LD_INT 51
91176: PUSH
91177: LD_INT 32
91179: PUSH
91180: LD_INT 89
91182: PUSH
91183: EMPTY
91184: LIST
91185: LIST
91186: LIST
91187: LIST
91188: IN
91189: NOT
91190: OR
91191: IFFALSE 91195
// exit ;
91193: GO 91293
// for i := 1 to 3 do
91195: LD_ADDR_VAR 0 3
91199: PUSH
91200: DOUBLE
91201: LD_INT 1
91203: DEC
91204: ST_TO_ADDR
91205: LD_INT 3
91207: PUSH
91208: FOR_TO
91209: IFFALSE 91291
// begin tmp := GetCargo ( cargo , i ) ;
91211: LD_ADDR_VAR 0 4
91215: PUSH
91216: LD_VAR 0 1
91220: PPUSH
91221: LD_VAR 0 3
91225: PPUSH
91226: CALL_OW 289
91230: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
91231: LD_ADDR_VAR 0 2
91235: PUSH
91236: LD_VAR 0 2
91240: PPUSH
91241: LD_VAR 0 3
91245: PPUSH
91246: LD_VAR 0 4
91250: PPUSH
91251: CALL_OW 1
91255: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
91256: LD_ADDR_VAR 0 2
91260: PUSH
91261: LD_VAR 0 2
91265: PPUSH
91266: LD_INT 4
91268: PPUSH
91269: LD_VAR 0 2
91273: PUSH
91274: LD_INT 4
91276: ARRAY
91277: PUSH
91278: LD_VAR 0 4
91282: PLUS
91283: PPUSH
91284: CALL_OW 1
91288: ST_TO_ADDR
// end ;
91289: GO 91208
91291: POP
91292: POP
// end ;
91293: LD_VAR 0 2
91297: RET
// export function Length ( array ) ; begin
91298: LD_INT 0
91300: PPUSH
// result := array + 0 ;
91301: LD_ADDR_VAR 0 2
91305: PUSH
91306: LD_VAR 0 1
91310: PUSH
91311: LD_INT 0
91313: PLUS
91314: ST_TO_ADDR
// end ;
91315: LD_VAR 0 2
91319: RET
// export function PrepareArray ( array ) ; begin
91320: LD_INT 0
91322: PPUSH
// result := array diff 0 ;
91323: LD_ADDR_VAR 0 2
91327: PUSH
91328: LD_VAR 0 1
91332: PUSH
91333: LD_INT 0
91335: DIFF
91336: ST_TO_ADDR
// if not result [ 1 ] then
91337: LD_VAR 0 2
91341: PUSH
91342: LD_INT 1
91344: ARRAY
91345: NOT
91346: IFFALSE 91366
// result := Delete ( result , 1 ) ;
91348: LD_ADDR_VAR 0 2
91352: PUSH
91353: LD_VAR 0 2
91357: PPUSH
91358: LD_INT 1
91360: PPUSH
91361: CALL_OW 3
91365: ST_TO_ADDR
// end ;
91366: LD_VAR 0 2
91370: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
91371: LD_INT 0
91373: PPUSH
91374: PPUSH
91375: PPUSH
91376: PPUSH
// sibRocketRange := 25 ;
91377: LD_ADDR_VAR 0 6
91381: PUSH
91382: LD_INT 25
91384: ST_TO_ADDR
// result := false ;
91385: LD_ADDR_VAR 0 4
91389: PUSH
91390: LD_INT 0
91392: ST_TO_ADDR
// for i := 0 to 5 do
91393: LD_ADDR_VAR 0 5
91397: PUSH
91398: DOUBLE
91399: LD_INT 0
91401: DEC
91402: ST_TO_ADDR
91403: LD_INT 5
91405: PUSH
91406: FOR_TO
91407: IFFALSE 91474
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
91409: LD_VAR 0 1
91413: PPUSH
91414: LD_VAR 0 5
91418: PPUSH
91419: LD_VAR 0 6
91423: PPUSH
91424: CALL_OW 272
91428: PPUSH
91429: LD_VAR 0 2
91433: PPUSH
91434: LD_VAR 0 5
91438: PPUSH
91439: LD_VAR 0 6
91443: PPUSH
91444: CALL_OW 273
91448: PPUSH
91449: LD_VAR 0 3
91453: PPUSH
91454: CALL_OW 309
91458: IFFALSE 91472
// begin result := true ;
91460: LD_ADDR_VAR 0 4
91464: PUSH
91465: LD_INT 1
91467: ST_TO_ADDR
// exit ;
91468: POP
91469: POP
91470: GO 91476
// end ;
91472: GO 91406
91474: POP
91475: POP
// end ;
91476: LD_VAR 0 4
91480: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
91481: LD_INT 0
91483: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
91484: LD_VAR 0 1
91488: PPUSH
91489: LD_VAR 0 2
91493: PPUSH
91494: LD_INT 0
91496: PPUSH
91497: LD_INT 0
91499: PPUSH
91500: LD_INT 1
91502: PPUSH
91503: LD_INT 0
91505: PPUSH
91506: CALL_OW 587
// end ; end_of_file
91510: LD_VAR 0 3
91514: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
91515: LD_VAR 0 1
91519: PUSH
91520: LD_INT 200
91522: DOUBLE
91523: GREATEREQUAL
91524: IFFALSE 91532
91526: LD_INT 299
91528: DOUBLE
91529: LESSEQUAL
91530: IFTRUE 91534
91532: GO 91566
91534: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
91535: LD_VAR 0 1
91539: PPUSH
91540: LD_VAR 0 2
91544: PPUSH
91545: LD_VAR 0 3
91549: PPUSH
91550: LD_VAR 0 4
91554: PPUSH
91555: LD_VAR 0 5
91559: PPUSH
91560: CALL 46200 0 5
91564: GO 91643
91566: LD_INT 300
91568: DOUBLE
91569: GREATEREQUAL
91570: IFFALSE 91578
91572: LD_INT 399
91574: DOUBLE
91575: LESSEQUAL
91576: IFTRUE 91580
91578: GO 91642
91580: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
91581: LD_VAR 0 1
91585: PPUSH
91586: LD_VAR 0 2
91590: PPUSH
91591: LD_VAR 0 3
91595: PPUSH
91596: LD_VAR 0 4
91600: PPUSH
91601: LD_VAR 0 5
91605: PPUSH
91606: LD_VAR 0 6
91610: PPUSH
91611: LD_VAR 0 7
91615: PPUSH
91616: LD_VAR 0 8
91620: PPUSH
91621: LD_VAR 0 9
91625: PPUSH
91626: LD_VAR 0 10
91630: PPUSH
91631: LD_VAR 0 11
91635: PPUSH
91636: CALL 42533 0 11
91640: GO 91643
91642: POP
// end ;
91643: PPOPN 11
91645: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
91646: LD_VAR 0 1
91650: PPUSH
91651: LD_VAR 0 2
91655: PPUSH
91656: LD_VAR 0 3
91660: PPUSH
91661: LD_VAR 0 4
91665: PPUSH
91666: LD_VAR 0 5
91670: PPUSH
91671: CALL 45936 0 5
// end ; end_of_file
91675: PPOPN 5
91677: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91678: LD_VAR 0 1
91682: PPUSH
91683: LD_VAR 0 2
91687: PPUSH
91688: LD_VAR 0 3
91692: PPUSH
91693: LD_VAR 0 4
91697: PPUSH
91698: LD_VAR 0 5
91702: PPUSH
91703: LD_VAR 0 6
91707: PPUSH
91708: CALL 30226 0 6
// end ;
91712: PPOPN 6
91714: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91715: LD_INT 0
91717: PPUSH
// begin if not units then
91718: LD_VAR 0 1
91722: NOT
91723: IFFALSE 91727
// exit ;
91725: GO 91727
// end ;
91727: PPOPN 7
91729: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91730: CALL 30197 0 0
// end ;
91734: PPOPN 1
91736: END
