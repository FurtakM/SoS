// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 3 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 3
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3425 0 0
// PrepareAmerican ;
  37: CALL 1057 0 0
// PrepareRussian ;
  41: CALL 8776 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 91611 0 9
// Action ;
  97: CALL 25531 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: IFFALSE 372
 365: PUSH
 366: LD_EXP 4
 370: NOT
 371: AND
 372: IFFALSE 380
 374: PUSH
 375: LD_EXP 19
 379: AND
 380: IFFALSE 402
 382: PUSH
 383: LD_INT 22
 385: PUSH
 386: LD_INT 3
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PPUSH
 393: CALL_OW 69
 397: PUSH
 398: LD_INT 0
 400: EQUAL
 401: AND
 402: IFFALSE 414
 404: GO 406
 406: DISABLE
// SetAchievement ( ACH_POWER ) ;
 407: LD_STRING ACH_POWER
 409: PPUSH
 410: CALL_OW 543
 414: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 415: LD_EXP 19
 419: IFFALSE 428
 421: PUSH
 422: LD_EXP 68
 426: NOT
 427: AND
 428: IFFALSE 437
 430: PUSH
 431: LD_EXP 69
 435: NOT
 436: AND
 437: IFFALSE 459
 439: PUSH
 440: LD_INT 22
 442: PUSH
 443: LD_INT 3
 445: PUSH
 446: EMPTY
 447: LIST
 448: LIST
 449: PPUSH
 450: CALL_OW 69
 454: PUSH
 455: LD_INT 0
 457: EQUAL
 458: AND
 459: IFFALSE 471
 461: GO 463
 463: DISABLE
// SetAchievement ( ACH_TACT ) ;
 464: LD_STRING ACH_TACT
 466: PPUSH
 467: CALL_OW 543
 471: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 472: LD_INT 22
 474: PUSH
 475: LD_INT 1
 477: PUSH
 478: EMPTY
 479: LIST
 480: LIST
 481: PUSH
 482: LD_INT 30
 484: PUSH
 485: LD_INT 1
 487: PUSH
 488: EMPTY
 489: LIST
 490: LIST
 491: PUSH
 492: EMPTY
 493: LIST
 494: LIST
 495: PPUSH
 496: CALL_OW 69
 500: IFFALSE 532
 502: PUSH
 503: LD_INT 22
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 30
 515: PUSH
 516: LD_INT 32
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: PPUSH
 527: CALL_OW 69
 531: AND
 532: IFFALSE 564
 534: PUSH
 535: LD_INT 22
 537: PUSH
 538: LD_INT 1
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: PUSH
 545: LD_INT 30
 547: PUSH
 548: LD_INT 33
 550: PUSH
 551: EMPTY
 552: LIST
 553: LIST
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PPUSH
 559: CALL_OW 69
 563: AND
 564: IFFALSE 596
 566: PUSH
 567: LD_INT 22
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 30
 579: PUSH
 580: LD_INT 5
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PPUSH
 591: CALL_OW 69
 595: AND
 596: IFFALSE 628
 598: PUSH
 599: LD_INT 22
 601: PUSH
 602: LD_INT 1
 604: PUSH
 605: EMPTY
 606: LIST
 607: LIST
 608: PUSH
 609: LD_INT 30
 611: PUSH
 612: LD_INT 3
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: EMPTY
 620: LIST
 621: LIST
 622: PPUSH
 623: CALL_OW 69
 627: AND
 628: IFFALSE 660
 630: PUSH
 631: LD_INT 22
 633: PUSH
 634: LD_INT 1
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: PUSH
 641: LD_INT 30
 643: PUSH
 644: LD_INT 36
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: EMPTY
 652: LIST
 653: LIST
 654: PPUSH
 655: CALL_OW 69
 659: AND
 660: IFFALSE 692
 662: PUSH
 663: LD_INT 22
 665: PUSH
 666: LD_INT 1
 668: PUSH
 669: EMPTY
 670: LIST
 671: LIST
 672: PUSH
 673: LD_INT 30
 675: PUSH
 676: LD_INT 31
 678: PUSH
 679: EMPTY
 680: LIST
 681: LIST
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PPUSH
 687: CALL_OW 69
 691: AND
 692: IFFALSE 724
 694: PUSH
 695: LD_INT 22
 697: PUSH
 698: LD_INT 1
 700: PUSH
 701: EMPTY
 702: LIST
 703: LIST
 704: PUSH
 705: LD_INT 30
 707: PUSH
 708: LD_INT 22
 710: PUSH
 711: EMPTY
 712: LIST
 713: LIST
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PPUSH
 719: CALL_OW 69
 723: AND
 724: IFFALSE 756
 726: PUSH
 727: LD_INT 22
 729: PUSH
 730: LD_INT 1
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: LD_INT 30
 739: PUSH
 740: LD_INT 20
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PPUSH
 751: CALL_OW 69
 755: AND
 756: IFFALSE 788
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 19
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: IFFALSE 820
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 30
 803: PUSH
 804: LD_INT 16
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PPUSH
 815: CALL_OW 69
 819: AND
 820: IFFALSE 852
 822: PUSH
 823: LD_INT 22
 825: PUSH
 826: LD_INT 1
 828: PUSH
 829: EMPTY
 830: LIST
 831: LIST
 832: PUSH
 833: LD_INT 30
 835: PUSH
 836: LD_INT 17
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PPUSH
 847: CALL_OW 69
 851: AND
 852: IFFALSE 884
 854: PUSH
 855: LD_INT 22
 857: PUSH
 858: LD_INT 1
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PUSH
 865: LD_INT 30
 867: PUSH
 868: LD_INT 21
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PUSH
 875: EMPTY
 876: LIST
 877: LIST
 878: PPUSH
 879: CALL_OW 69
 883: AND
 884: IFFALSE 916
 886: PUSH
 887: LD_INT 22
 889: PUSH
 890: LD_INT 1
 892: PUSH
 893: EMPTY
 894: LIST
 895: LIST
 896: PUSH
 897: LD_INT 30
 899: PUSH
 900: LD_INT 29
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PPUSH
 911: CALL_OW 69
 915: AND
 916: IFFALSE 948
 918: PUSH
 919: LD_INT 22
 921: PUSH
 922: LD_INT 1
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: LD_INT 30
 931: PUSH
 932: LD_INT 30
 934: PUSH
 935: EMPTY
 936: LIST
 937: LIST
 938: PUSH
 939: EMPTY
 940: LIST
 941: LIST
 942: PPUSH
 943: CALL_OW 69
 947: AND
 948: IFFALSE 980
 950: PUSH
 951: LD_INT 22
 953: PUSH
 954: LD_INT 1
 956: PUSH
 957: EMPTY
 958: LIST
 959: LIST
 960: PUSH
 961: LD_INT 30
 963: PUSH
 964: LD_INT 27
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: EMPTY
 972: LIST
 973: LIST
 974: PPUSH
 975: CALL_OW 69
 979: AND
 980: IFFALSE 1012
 982: PUSH
 983: LD_INT 22
 985: PUSH
 986: LD_INT 1
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PUSH
 993: LD_INT 30
 995: PUSH
 996: LD_INT 26
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: PUSH
1003: EMPTY
1004: LIST
1005: LIST
1006: PPUSH
1007: CALL_OW 69
1011: AND
1012: IFFALSE 1044
1014: PUSH
1015: LD_INT 22
1017: PUSH
1018: LD_INT 1
1020: PUSH
1021: EMPTY
1022: LIST
1023: LIST
1024: PUSH
1025: LD_INT 30
1027: PUSH
1028: LD_INT 28
1030: PUSH
1031: EMPTY
1032: LIST
1033: LIST
1034: PUSH
1035: EMPTY
1036: LIST
1037: LIST
1038: PPUSH
1039: CALL_OW 69
1043: AND
1044: IFFALSE 1056
1046: GO 1048
1048: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1049: LD_STRING ACH_ARCH
1051: PPUSH
1052: CALL_OW 543
1056: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1057: LD_INT 0
1059: PPUSH
1060: PPUSH
1061: PPUSH
1062: PPUSH
1063: PPUSH
1064: PPUSH
1065: PPUSH
1066: PPUSH
// uc_nation := nation_american ;
1067: LD_ADDR_OWVAR 21
1071: PUSH
1072: LD_INT 1
1074: ST_TO_ADDR
// uc_side := 4 ;
1075: LD_ADDR_OWVAR 20
1079: PUSH
1080: LD_INT 4
1082: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1083: LD_ADDR_EXP 44
1087: PUSH
1088: LD_STRING Powell
1090: PPUSH
1091: LD_INT 0
1093: PPUSH
1094: LD_STRING 
1096: PPUSH
1097: CALL 56760 0 3
1101: ST_TO_ADDR
// uc_side := 1 ;
1102: LD_ADDR_OWVAR 20
1106: PUSH
1107: LD_INT 1
1109: ST_TO_ADDR
// JMMSquad := [ ] ;
1110: LD_ADDR_EXP 45
1114: PUSH
1115: EMPTY
1116: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1117: LD_ADDR_EXP 23
1121: PUSH
1122: LD_STRING JMM
1124: PPUSH
1125: LD_EXP 1
1129: NOT
1130: PPUSH
1131: LD_STRING 10_
1133: PPUSH
1134: CALL 56760 0 3
1138: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1139: LD_ADDR_EXP 32
1143: PUSH
1144: LD_STRING Gary
1146: PPUSH
1147: LD_EXP 1
1151: NOT
1152: PPUSH
1153: LD_STRING 10_
1155: PPUSH
1156: CALL 56760 0 3
1160: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1161: LD_ADDR_EXP 27
1165: PUSH
1166: LD_STRING Cyrus
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 10_
1177: PPUSH
1178: CALL 56760 0 3
1182: ST_TO_ADDR
// if Cyrus then
1183: LD_EXP 27
1187: IFFALSE 1205
// JMMSquad := JMMSquad ^ Cyrus ;
1189: LD_ADDR_EXP 45
1193: PUSH
1194: LD_EXP 45
1198: PUSH
1199: LD_EXP 27
1203: ADD
1204: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1205: LD_ADDR_EXP 26
1209: PUSH
1210: LD_STRING Bobby
1212: PPUSH
1213: LD_EXP 1
1217: NOT
1218: PPUSH
1219: LD_STRING 10_
1221: PPUSH
1222: CALL 56760 0 3
1226: ST_TO_ADDR
// if Bobby then
1227: LD_EXP 26
1231: IFFALSE 1249
// JMMSquad := JMMSquad ^ Bobby ;
1233: LD_ADDR_EXP 45
1237: PUSH
1238: LD_EXP 45
1242: PUSH
1243: LD_EXP 26
1247: ADD
1248: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1249: LD_ADDR_EXP 28
1253: PUSH
1254: LD_STRING Lisa
1256: PPUSH
1257: LD_EXP 1
1261: NOT
1262: PPUSH
1263: LD_STRING 10_
1265: PPUSH
1266: CALL 56760 0 3
1270: ST_TO_ADDR
// if Lisa then
1271: LD_EXP 28
1275: IFFALSE 1293
// JMMSquad := JMMSquad ^ Lisa ;
1277: LD_ADDR_EXP 45
1281: PUSH
1282: LD_EXP 45
1286: PUSH
1287: LD_EXP 28
1291: ADD
1292: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1293: LD_ADDR_EXP 24
1297: PUSH
1298: LD_STRING Brown
1300: PPUSH
1301: LD_EXP 1
1305: NOT
1306: PPUSH
1307: LD_STRING 10_
1309: PPUSH
1310: CALL 56760 0 3
1314: ST_TO_ADDR
// if Brown then
1315: LD_EXP 24
1319: IFFALSE 1337
// JMMSquad := JMMSquad ^ Brown ;
1321: LD_ADDR_EXP 45
1325: PUSH
1326: LD_EXP 45
1330: PUSH
1331: LD_EXP 24
1335: ADD
1336: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1337: LD_ADDR_EXP 25
1341: PUSH
1342: LD_STRING Donaldson
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_STRING 10_
1353: PPUSH
1354: CALL 56760 0 3
1358: ST_TO_ADDR
// if Donaldson then
1359: LD_EXP 25
1363: IFFALSE 1381
// JMMSquad := JMMSquad ^ Donaldson ;
1365: LD_ADDR_EXP 45
1369: PUSH
1370: LD_EXP 45
1374: PUSH
1375: LD_EXP 25
1379: ADD
1380: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1381: LD_ADDR_EXP 29
1385: PUSH
1386: LD_STRING Frank
1388: PPUSH
1389: LD_EXP 1
1393: NOT
1394: PPUSH
1395: LD_STRING 10_
1397: PPUSH
1398: CALL 56760 0 3
1402: ST_TO_ADDR
// if Frank then
1403: LD_EXP 29
1407: IFFALSE 1425
// JMMSquad := JMMSquad ^ Frank ;
1409: LD_ADDR_EXP 45
1413: PUSH
1414: LD_EXP 45
1418: PUSH
1419: LD_EXP 29
1423: ADD
1424: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1425: LD_ADDR_EXP 31
1429: PUSH
1430: LD_STRING Houten
1432: PPUSH
1433: LD_EXP 1
1437: NOT
1438: PPUSH
1439: LD_STRING 10_
1441: PPUSH
1442: CALL 56760 0 3
1446: ST_TO_ADDR
// if Houten then
1447: LD_EXP 31
1451: IFFALSE 1469
// JMMSquad := JMMSquad ^ Houten ;
1453: LD_ADDR_EXP 45
1457: PUSH
1458: LD_EXP 45
1462: PUSH
1463: LD_EXP 31
1467: ADD
1468: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1469: LD_ADDR_EXP 46
1473: PUSH
1474: LD_STRING OthersIn10
1476: PPUSH
1477: CALL_OW 31
1481: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1482: LD_EXP 45
1486: PPUSH
1487: CALL 58984 0 1
1491: PUSH
1492: LD_EXP 46
1496: PPUSH
1497: CALL 58984 0 1
1501: PLUS
1502: PUSH
1503: LD_INT 9
1505: LESS
1506: IFFALSE 1593
// begin InitHC_All ( ) ;
1508: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1512: LD_ADDR_VAR 0 2
1516: PUSH
1517: DOUBLE
1518: LD_INT 9
1520: INC
1521: ST_TO_ADDR
1522: LD_EXP 45
1526: PPUSH
1527: CALL 58984 0 1
1531: PUSH
1532: LD_EXP 46
1536: PPUSH
1537: CALL 58984 0 1
1541: PLUS
1542: PUSH
1543: FOR_DOWNTO
1544: IFFALSE 1591
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1546: LD_INT 0
1548: PPUSH
1549: LD_VAR 0 2
1553: PUSH
1554: LD_INT 4
1556: MOD
1557: PUSH
1558: LD_INT 1
1560: PLUS
1561: PPUSH
1562: LD_INT 5
1564: PPUSH
1565: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1569: LD_ADDR_EXP 46
1573: PUSH
1574: LD_EXP 46
1578: PPUSH
1579: CALL_OW 44
1583: PPUSH
1584: CALL 94960 0 2
1588: ST_TO_ADDR
// end ;
1589: GO 1543
1591: POP
1592: POP
// end ; if debug then
1593: LD_EXP 1
1597: IFFALSE 1638
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1599: LD_ADDR_VAR 0 1
1603: PUSH
1604: LD_EXP 27
1608: PUSH
1609: LD_EXP 26
1613: PUSH
1614: LD_EXP 28
1618: PUSH
1619: LD_EXP 25
1623: PUSH
1624: LD_EXP 24
1628: PUSH
1629: EMPTY
1630: LIST
1631: LIST
1632: LIST
1633: LIST
1634: LIST
1635: ST_TO_ADDR
1636: GO 1801
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1638: LD_ADDR_VAR 0 1
1642: PUSH
1643: LD_STRING 1
1645: PPUSH
1646: LD_INT 6
1648: PUSH
1649: LD_INT 5
1651: PUSH
1652: LD_INT 4
1654: PUSH
1655: LD_INT 4
1657: PUSH
1658: EMPTY
1659: LIST
1660: LIST
1661: LIST
1662: LIST
1663: PUSH
1664: LD_OWVAR 67
1668: ARRAY
1669: PPUSH
1670: LD_INT 6
1672: PUSH
1673: LD_INT 5
1675: PUSH
1676: LD_INT 4
1678: PUSH
1679: LD_INT 4
1681: PUSH
1682: EMPTY
1683: LIST
1684: LIST
1685: LIST
1686: LIST
1687: PUSH
1688: LD_OWVAR 67
1692: ARRAY
1693: PPUSH
1694: LD_INT -4
1696: PUSH
1697: LD_INT -1
1699: PUSH
1700: LD_INT -5
1702: PUSH
1703: EMPTY
1704: LIST
1705: LIST
1706: LIST
1707: PUSH
1708: LD_EXP 23
1712: ADD
1713: PUSH
1714: LD_EXP 32
1718: ADD
1719: PUSH
1720: LD_INT -2
1722: PUSH
1723: LD_INT -3
1725: PUSH
1726: LD_INT -5
1728: PUSH
1729: EMPTY
1730: LIST
1731: LIST
1732: LIST
1733: ADD
1734: PUSH
1735: LD_EXP 45
1739: ADD
1740: PUSH
1741: LD_EXP 46
1745: ADD
1746: PUSH
1747: LD_INT -4
1749: PUSH
1750: LD_INT -2
1752: PUSH
1753: EMPTY
1754: LIST
1755: LIST
1756: ADD
1757: PUSH
1758: LD_EXP 44
1762: ADD
1763: PPUSH
1764: LD_INT 1
1766: PUSH
1767: LD_INT 3
1769: PUSH
1770: LD_INT 1
1772: PUSH
1773: EMPTY
1774: LIST
1775: LIST
1776: PUSH
1777: LD_INT 2
1779: PUSH
1780: LD_INT 1
1782: PUSH
1783: EMPTY
1784: LIST
1785: LIST
1786: PUSH
1787: LD_INT 4
1789: PUSH
1790: EMPTY
1791: LIST
1792: LIST
1793: LIST
1794: LIST
1795: PPUSH
1796: CALL_OW 42
1800: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1801: LD_ADDR_VAR 0 1
1805: PUSH
1806: LD_VAR 0 1
1810: PPUSH
1811: LD_EXP 23
1815: PPUSH
1816: CALL 94997 0 2
1820: ST_TO_ADDR
// if Gary then
1821: LD_EXP 32
1825: IFFALSE 1847
// result := JoinUnion ( result , Gary ) ;
1827: LD_ADDR_VAR 0 1
1831: PUSH
1832: LD_VAR 0 1
1836: PPUSH
1837: LD_EXP 32
1841: PPUSH
1842: CALL 94997 0 2
1846: ST_TO_ADDR
// if Count ( others ) then
1847: LD_EXP 46
1851: PPUSH
1852: CALL 58984 0 1
1856: IFFALSE 1874
// others := others diff result ;
1858: LD_ADDR_EXP 46
1862: PUSH
1863: LD_EXP 46
1867: PUSH
1868: LD_VAR 0 1
1872: DIFF
1873: ST_TO_ADDR
// vehs := [ ] ;
1874: LD_ADDR_VAR 0 5
1878: PUSH
1879: EMPTY
1880: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1881: LD_INT 2
1883: PPUSH
1884: LD_INT 1
1886: PPUSH
1887: LD_INT 1
1889: PPUSH
1890: LD_INT 12
1892: PPUSH
1893: LD_INT 50
1895: PPUSH
1896: CALL 61780 0 5
// veh := CreateVehicle ;
1900: LD_ADDR_VAR 0 4
1904: PUSH
1905: CALL_OW 45
1909: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1910: LD_ADDR_VAR 0 5
1914: PUSH
1915: LD_VAR 0 5
1919: PPUSH
1920: LD_VAR 0 4
1924: PPUSH
1925: CALL 94960 0 2
1929: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1930: LD_VAR 0 4
1934: PPUSH
1935: LD_INT 1
1937: PPUSH
1938: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1942: LD_ADDR_VAR 0 6
1946: PUSH
1947: LD_STRING 09_sibRes
1949: PPUSH
1950: LD_INT 100
1952: PPUSH
1953: CALL_OW 30
1957: PUSH
1958: LD_INT 20
1960: MINUS
1961: ST_TO_ADDR
// if sibRes >= 100 then
1962: LD_VAR 0 6
1966: PUSH
1967: LD_INT 100
1969: GREATEREQUAL
1970: IFFALSE 1989
// SetCargo ( veh , mat_siberit , 100 ) else
1972: LD_VAR 0 4
1976: PPUSH
1977: LD_INT 3
1979: PPUSH
1980: LD_INT 100
1982: PPUSH
1983: CALL_OW 290
1987: GO 2006
// SetCargo ( veh , mat_siberit , sibRes ) ;
1989: LD_VAR 0 4
1993: PPUSH
1994: LD_INT 3
1996: PPUSH
1997: LD_VAR 0 6
2001: PPUSH
2002: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
2006: LD_INT 2
2008: PPUSH
2009: LD_INT 1
2011: PPUSH
2012: LD_INT 1
2014: PPUSH
2015: LD_INT 12
2017: PPUSH
2018: LD_INT 50
2020: PPUSH
2021: CALL 61780 0 5
// veh := CreateVehicle ;
2025: LD_ADDR_VAR 0 4
2029: PUSH
2030: CALL_OW 45
2034: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2035: LD_ADDR_VAR 0 5
2039: PUSH
2040: LD_VAR 0 5
2044: PPUSH
2045: LD_VAR 0 4
2049: PPUSH
2050: CALL 94960 0 2
2054: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2055: LD_VAR 0 4
2059: PPUSH
2060: LD_INT 1
2062: PPUSH
2063: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2067: LD_VAR 0 4
2071: PPUSH
2072: LD_INT 1
2074: PPUSH
2075: LD_INT 100
2077: PPUSH
2078: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2082: LD_ADDR_VAR 0 2
2086: PUSH
2087: DOUBLE
2088: LD_INT 1
2090: DEC
2091: ST_TO_ADDR
2092: LD_VAR 0 1
2096: PPUSH
2097: CALL 58984 0 1
2101: PUSH
2102: LD_INT 2
2104: MINUS
2105: PUSH
2106: FOR_TO
2107: IFFALSE 2213
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2109: LD_INT 2
2111: PPUSH
2112: LD_INT 1
2114: PPUSH
2115: LD_INT 1
2117: PPUSH
2118: LD_INT 3
2120: PUSH
2121: LD_INT 4
2123: PUSH
2124: LD_INT 5
2126: PUSH
2127: LD_INT 11
2129: PUSH
2130: LD_INT 3
2132: PUSH
2133: EMPTY
2134: LIST
2135: LIST
2136: LIST
2137: LIST
2138: LIST
2139: PUSH
2140: LD_VAR 0 2
2144: PUSH
2145: LD_INT 5
2147: MOD
2148: PUSH
2149: LD_INT 1
2151: PLUS
2152: ARRAY
2153: PPUSH
2154: LD_INT 45
2156: PPUSH
2157: LD_INT 55
2159: PPUSH
2160: CALL_OW 12
2164: PPUSH
2165: CALL 61780 0 5
// veh := CreateVehicle ;
2169: LD_ADDR_VAR 0 4
2173: PUSH
2174: CALL_OW 45
2178: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2179: LD_ADDR_VAR 0 5
2183: PUSH
2184: LD_VAR 0 5
2188: PPUSH
2189: LD_VAR 0 4
2193: PPUSH
2194: CALL 94960 0 2
2198: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2199: LD_VAR 0 4
2203: PPUSH
2204: LD_INT 1
2206: PPUSH
2207: CALL_OW 233
// end ;
2211: GO 2106
2213: POP
2214: POP
// for i in vehs do
2215: LD_ADDR_VAR 0 2
2219: PUSH
2220: LD_VAR 0 5
2224: PUSH
2225: FOR_IN
2226: IFFALSE 2281
// begin PlaceUnitArea ( i , startArea , false ) ;
2228: LD_VAR 0 2
2232: PPUSH
2233: LD_INT 3
2235: PPUSH
2236: LD_INT 0
2238: PPUSH
2239: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2243: LD_VAR 0 1
2247: PUSH
2248: LD_INT 1
2250: ARRAY
2251: PPUSH
2252: LD_VAR 0 2
2256: PPUSH
2257: CALL_OW 52
// result := Delete ( result , 1 ) ;
2261: LD_ADDR_VAR 0 1
2265: PUSH
2266: LD_VAR 0 1
2270: PPUSH
2271: LD_INT 1
2273: PPUSH
2274: CALL_OW 3
2278: ST_TO_ADDR
// end ;
2279: GO 2225
2281: POP
2282: POP
// uc_side := 4 ;
2283: LD_ADDR_OWVAR 20
2287: PUSH
2288: LD_INT 4
2290: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2291: LD_STRING 08_SikorskiStatus
2293: PPUSH
2294: LD_EXP 1
2298: PPUSH
2299: CALL_OW 30
2303: IFFALSE 2324
// Truman := PrepareUnit ( Truman , false ,  ) ;
2305: LD_ADDR_EXP 43
2309: PUSH
2310: LD_STRING Truman
2312: PPUSH
2313: LD_INT 0
2315: PPUSH
2316: LD_STRING 
2318: PPUSH
2319: CALL 56760 0 3
2323: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2324: LD_ADDR_EXP 33
2328: PUSH
2329: LD_STRING Simms
2331: PPUSH
2332: LD_INT 0
2334: PPUSH
2335: LD_STRING 
2337: PPUSH
2338: CALL 56760 0 3
2342: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2343: LD_ADDR_EXP 34
2347: PUSH
2348: LD_STRING Denis
2350: PPUSH
2351: LD_EXP 1
2355: NOT
2356: PPUSH
2357: LD_STRING 08_
2359: PPUSH
2360: CALL 56760 0 3
2364: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2365: LD_ADDR_EXP 35
2369: PUSH
2370: LD_STRING Joan
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 08_
2381: PPUSH
2382: CALL 56760 0 3
2386: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2387: LD_ADDR_EXP 41
2391: PUSH
2392: LD_STRING Mike
2394: PPUSH
2395: LD_EXP 1
2399: NOT
2400: PPUSH
2401: LD_STRING 08_
2403: PPUSH
2404: CALL 56760 0 3
2408: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2409: LD_STRING 08_Khatam
2411: PPUSH
2412: CALL_OW 28
2416: IFFALSE 2439
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2418: LD_ADDR_EXP 36
2422: PUSH
2423: LD_STRING Khatam
2425: PPUSH
2426: LD_INT 1
2428: PPUSH
2429: LD_STRING 08_
2431: PPUSH
2432: CALL 56760 0 3
2436: ST_TO_ADDR
2437: GO 2467
// if TestCharacters ( 03_Khatam ) then
2439: LD_STRING 03_Khatam
2441: PPUSH
2442: CALL_OW 28
2446: IFFALSE 2467
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2448: LD_ADDR_EXP 36
2452: PUSH
2453: LD_STRING Khatam
2455: PPUSH
2456: LD_INT 1
2458: PPUSH
2459: LD_STRING 03_
2461: PPUSH
2462: CALL 56760 0 3
2466: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2467: LD_ADDR_EXP 37
2471: PUSH
2472: LD_STRING Gladstone
2474: PPUSH
2475: LD_EXP 1
2479: NOT
2480: PPUSH
2481: LD_STRING 08_
2483: PPUSH
2484: CALL 56760 0 3
2488: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2489: LD_ADDR_EXP 39
2493: PUSH
2494: LD_STRING DeltaDoctor
2496: PPUSH
2497: LD_EXP 1
2501: NOT
2502: PPUSH
2503: LD_STRING 
2505: PPUSH
2506: CALL 56760 0 3
2510: ST_TO_ADDR
// if Frank then
2511: LD_EXP 29
2515: IFFALSE 2538
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2517: LD_ADDR_EXP 30
2521: PUSH
2522: LD_STRING Yamoko
2524: PPUSH
2525: LD_INT 0
2527: PPUSH
2528: LD_STRING 
2530: PPUSH
2531: CALL 56760 0 3
2535: ST_TO_ADDR
2536: GO 2560
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2538: LD_ADDR_EXP 30
2542: PUSH
2543: LD_STRING Kikuchi
2545: PPUSH
2546: LD_EXP 1
2550: NOT
2551: PPUSH
2552: LD_STRING 08_
2554: PPUSH
2555: CALL 56760 0 3
2559: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2560: LD_ADDR_EXP 47
2564: PUSH
2565: LD_STRING 09_others
2567: PPUSH
2568: CALL_OW 31
2572: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2573: LD_ADDR_EXP 48
2577: PUSH
2578: LD_STRING 09_apes
2580: PPUSH
2581: CALL_OW 31
2585: ST_TO_ADDR
// if Truman then
2586: LD_EXP 43
2590: IFFALSE 2607
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2592: LD_EXP 43
2596: PPUSH
2597: LD_INT 4
2599: PPUSH
2600: LD_INT 0
2602: PPUSH
2603: CALL_OW 49
// if Mike then
2607: LD_EXP 41
2611: IFFALSE 2628
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2613: LD_EXP 41
2617: PPUSH
2618: LD_INT 4
2620: PPUSH
2621: LD_INT 0
2623: PPUSH
2624: CALL_OW 49
// if Simms then
2628: LD_EXP 33
2632: IFFALSE 2649
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2634: LD_EXP 33
2638: PPUSH
2639: LD_INT 4
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: CALL_OW 49
// if Denis then
2649: LD_EXP 34
2653: IFFALSE 2670
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2655: LD_EXP 34
2659: PPUSH
2660: LD_INT 4
2662: PPUSH
2663: LD_INT 0
2665: PPUSH
2666: CALL_OW 49
// if Joan then
2670: LD_EXP 35
2674: IFFALSE 2691
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2676: LD_EXP 35
2680: PPUSH
2681: LD_INT 4
2683: PPUSH
2684: LD_INT 0
2686: PPUSH
2687: CALL_OW 49
// if Khatam then
2691: LD_EXP 36
2695: IFFALSE 2712
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2697: LD_EXP 36
2701: PPUSH
2702: LD_INT 4
2704: PPUSH
2705: LD_INT 0
2707: PPUSH
2708: CALL_OW 49
// if Gladstone then
2712: LD_EXP 37
2716: IFFALSE 2733
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2718: LD_EXP 37
2722: PPUSH
2723: LD_INT 4
2725: PPUSH
2726: LD_INT 0
2728: PPUSH
2729: CALL_OW 49
// if DeltaDoctor then
2733: LD_EXP 39
2737: IFFALSE 2754
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2739: LD_EXP 39
2743: PPUSH
2744: LD_INT 4
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// if Kikuchi then
2754: LD_EXP 30
2758: IFFALSE 2775
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2760: LD_EXP 30
2764: PPUSH
2765: LD_INT 4
2767: PPUSH
2768: LD_INT 0
2770: PPUSH
2771: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2775: LD_EXP 33
2779: PUSH
2780: LD_EXP 36
2784: PUSH
2785: LD_EXP 34
2789: PUSH
2790: LD_EXP 37
2794: PUSH
2795: LD_EXP 39
2799: PUSH
2800: LD_EXP 35
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: PPUSH
2813: LD_INT 4
2815: PPUSH
2816: CALL_OW 336
// amount := Count ( others09 ) ;
2820: LD_ADDR_VAR 0 8
2824: PUSH
2825: LD_EXP 47
2829: PPUSH
2830: CALL 58984 0 1
2834: ST_TO_ADDR
// if amount then
2835: LD_VAR 0 8
2839: IFFALSE 2987
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2841: LD_VAR 0 8
2845: PUSH
2846: LD_INT 6
2848: PUSH
2849: LD_INT 5
2851: PUSH
2852: LD_INT 4
2854: PUSH
2855: LD_INT 4
2857: PUSH
2858: EMPTY
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: PUSH
2864: LD_OWVAR 67
2868: ARRAY
2869: GREATER
2870: IFFALSE 2901
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2872: LD_ADDR_VAR 0 8
2876: PUSH
2877: LD_INT 6
2879: PUSH
2880: LD_INT 5
2882: PUSH
2883: LD_INT 4
2885: PUSH
2886: LD_INT 4
2888: PUSH
2889: EMPTY
2890: LIST
2891: LIST
2892: LIST
2893: LIST
2894: PUSH
2895: LD_OWVAR 67
2899: ARRAY
2900: ST_TO_ADDR
// for i := 1 to amount do
2901: LD_ADDR_VAR 0 2
2905: PUSH
2906: DOUBLE
2907: LD_INT 1
2909: DEC
2910: ST_TO_ADDR
2911: LD_VAR 0 8
2915: PUSH
2916: FOR_TO
2917: IFFALSE 2958
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2919: LD_EXP 47
2923: PUSH
2924: LD_INT 1
2926: ARRAY
2927: PPUSH
2928: LD_INT 4
2930: PPUSH
2931: LD_INT 0
2933: PPUSH
2934: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2938: LD_ADDR_EXP 47
2942: PUSH
2943: LD_EXP 47
2947: PPUSH
2948: LD_INT 1
2950: PPUSH
2951: CALL_OW 3
2955: ST_TO_ADDR
// end ;
2956: GO 2916
2958: POP
2959: POP
// if Count ( others09 ) then
2960: LD_EXP 47
2964: PPUSH
2965: CALL 58984 0 1
2969: IFFALSE 2987
// others := others union others09 ;
2971: LD_ADDR_EXP 46
2975: PUSH
2976: LD_EXP 46
2980: PUSH
2981: LD_EXP 47
2985: UNION
2986: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2987: LD_INT 22
2989: PUSH
2990: LD_INT 4
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: PUSH
2997: LD_INT 50
2999: PUSH
3000: EMPTY
3001: LIST
3002: PUSH
3003: LD_INT 25
3005: PUSH
3006: LD_INT 2
3008: PUSH
3009: EMPTY
3010: LIST
3011: LIST
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: LIST
3017: PPUSH
3018: CALL_OW 69
3022: PUSH
3023: LD_INT 0
3025: EQUAL
3026: IFFALSE 3165
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3028: LD_ADDR_VAR 0 7
3032: PUSH
3033: LD_INT 22
3035: PUSH
3036: LD_INT 4
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: PUSH
3043: LD_INT 50
3045: PUSH
3046: EMPTY
3047: LIST
3048: PUSH
3049: LD_INT 25
3051: PUSH
3052: LD_INT 2
3054: PUSH
3055: EMPTY
3056: LIST
3057: LIST
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: PPUSH
3064: CALL_OW 69
3068: PUSH
3069: LD_EXP 33
3073: PUSH
3074: LD_EXP 36
3078: PUSH
3079: LD_EXP 34
3083: PUSH
3084: LD_EXP 37
3088: PUSH
3089: LD_EXP 39
3093: PUSH
3094: LD_EXP 35
3098: PUSH
3099: EMPTY
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: LIST
3105: LIST
3106: DIFF
3107: ST_TO_ADDR
// if not tmp then
3108: LD_VAR 0 7
3112: NOT
3113: IFFALSE 3149
// begin if Denis then
3115: LD_EXP 34
3119: IFFALSE 3135
// SetClass ( Denis , class_engineer ) else
3121: LD_EXP 34
3125: PPUSH
3126: LD_INT 2
3128: PPUSH
3129: CALL_OW 336
3133: GO 3147
// SetClass ( DeltaDoctor , class_engineer ) ;
3135: LD_EXP 39
3139: PPUSH
3140: LD_INT 2
3142: PPUSH
3143: CALL_OW 336
// end else
3147: GO 3165
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3149: LD_VAR 0 7
3153: PUSH
3154: LD_INT 1
3156: ARRAY
3157: PPUSH
3158: LD_INT 2
3160: PPUSH
3161: CALL_OW 336
// end ; for i in ape09 do
3165: LD_ADDR_VAR 0 2
3169: PUSH
3170: LD_EXP 48
3174: PUSH
3175: FOR_IN
3176: IFFALSE 3195
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3178: LD_VAR 0 2
3182: PPUSH
3183: LD_INT 4
3185: PPUSH
3186: LD_INT 0
3188: PPUSH
3189: CALL_OW 49
3193: GO 3175
3195: POP
3196: POP
// PrepareSoldier ( sex_female , 6 ) ;
3197: LD_INT 2
3199: PPUSH
3200: LD_INT 6
3202: PPUSH
3203: CALL_OW 381
// AmScout := CreateHuman ;
3207: LD_ADDR_EXP 40
3211: PUSH
3212: CALL_OW 44
3216: ST_TO_ADDR
// end ;
3217: LD_VAR 0 1
3221: RET
// export function PrepareCornell ; begin
3222: LD_INT 0
3224: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3225: LD_INT 4
3227: PPUSH
3228: LD_INT 4
3230: PPUSH
3231: CALL_OW 343
// uc_side := 4 ;
3235: LD_ADDR_OWVAR 20
3239: PUSH
3240: LD_INT 4
3242: ST_TO_ADDR
// uc_nation := nation_american ;
3243: LD_ADDR_OWVAR 21
3247: PUSH
3248: LD_INT 1
3250: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3251: LD_ADDR_EXP 42
3255: PUSH
3256: LD_STRING Cornel
3258: PPUSH
3259: LD_EXP 1
3263: NOT
3264: PPUSH
3265: LD_STRING 03_
3267: PPUSH
3268: CALL 56760 0 3
3272: ST_TO_ADDR
// if not Cornell then
3273: LD_EXP 42
3277: NOT
3278: IFFALSE 3282
// exit ;
3280: GO 3420
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3282: LD_EXP 42
3286: PPUSH
3287: LD_INT 12
3289: PPUSH
3290: LD_INT 0
3292: PPUSH
3293: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3297: LD_EXP 42
3301: PPUSH
3302: LD_INT 350
3304: PPUSH
3305: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3309: LD_EXP 42
3313: PPUSH
3314: LD_INT 125
3316: PPUSH
3317: LD_INT 17
3319: PPUSH
3320: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3324: LD_EXP 42
3328: PPUSH
3329: LD_INT 112
3331: PPUSH
3332: LD_INT 19
3334: PPUSH
3335: CALL_OW 171
// if IsInUnit ( JMM ) then
3339: LD_EXP 23
3343: PPUSH
3344: CALL_OW 310
3348: IFFALSE 3391
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3350: LD_EXP 42
3354: PPUSH
3355: LD_EXP 23
3359: PPUSH
3360: CALL_OW 310
3364: PPUSH
3365: CALL_OW 250
3369: PPUSH
3370: LD_EXP 23
3374: PPUSH
3375: CALL_OW 310
3379: PPUSH
3380: CALL_OW 251
3384: PPUSH
3385: CALL_OW 171
3389: GO 3420
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3391: LD_EXP 42
3395: PPUSH
3396: LD_EXP 23
3400: PPUSH
3401: CALL_OW 250
3405: PPUSH
3406: LD_EXP 23
3410: PPUSH
3411: CALL_OW 251
3415: PPUSH
3416: CALL_OW 171
// end ; end_of_file
3420: LD_VAR 0 1
3424: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3425: LD_INT 0
3427: PPUSH
3428: PPUSH
3429: PPUSH
3430: PPUSH
3431: PPUSH
3432: PPUSH
// uc_side := 2 ;
3433: LD_ADDR_OWVAR 20
3437: PUSH
3438: LD_INT 2
3440: ST_TO_ADDR
// uc_nation := nation_arabian ;
3441: LD_ADDR_OWVAR 21
3445: PUSH
3446: LD_INT 2
3448: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3449: LD_ADDR_VAR 0 6
3453: PUSH
3454: LD_INT 4
3456: PUSH
3457: LD_INT 5
3459: PUSH
3460: LD_INT 6
3462: PUSH
3463: LD_INT 7
3465: PUSH
3466: EMPTY
3467: LIST
3468: LIST
3469: LIST
3470: LIST
3471: PUSH
3472: LD_OWVAR 67
3476: ARRAY
3477: ST_TO_ADDR
// arForces := [ ] ;
3478: LD_ADDR_EXP 49
3482: PUSH
3483: EMPTY
3484: ST_TO_ADDR
// arTech := [ ] ;
3485: LD_ADDR_EXP 52
3489: PUSH
3490: EMPTY
3491: ST_TO_ADDR
// arBuildings := [ ] ;
3492: LD_ADDR_EXP 53
3496: PUSH
3497: EMPTY
3498: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3499: LD_ADDR_EXP 55
3503: PUSH
3504: LD_INT 94
3506: PUSH
3507: LD_INT 19
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: PUSH
3514: LD_INT 92
3516: PUSH
3517: LD_INT 34
3519: PUSH
3520: EMPTY
3521: LIST
3522: LIST
3523: PUSH
3524: LD_INT 109
3526: PUSH
3527: LD_INT 67
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: PUSH
3534: LD_INT 120
3536: PUSH
3537: LD_INT 38
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 116
3546: PUSH
3547: LD_INT 30
3549: PUSH
3550: EMPTY
3551: LIST
3552: LIST
3553: PUSH
3554: LD_INT 102
3556: PUSH
3557: LD_INT 20
3559: PUSH
3560: EMPTY
3561: LIST
3562: LIST
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: LIST
3570: LIST
3571: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3572: LD_ADDR_EXP 54
3576: PUSH
3577: LD_INT 73
3579: PUSH
3580: LD_INT 36
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: PUSH
3587: LD_INT 76
3589: PUSH
3590: LD_INT 38
3592: PUSH
3593: EMPTY
3594: LIST
3595: LIST
3596: PUSH
3597: LD_INT 79
3599: PUSH
3600: LD_INT 39
3602: PUSH
3603: EMPTY
3604: LIST
3605: LIST
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: LIST
3611: ST_TO_ADDR
// arEscapist := [ ] ;
3612: LD_ADDR_EXP 56
3616: PUSH
3617: EMPTY
3618: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3619: LD_INT 35
3621: PPUSH
3622: CALL_OW 274
3626: PPUSH
3627: LD_INT 1
3629: PPUSH
3630: LD_INT 150
3632: PPUSH
3633: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3637: LD_INT 35
3639: PPUSH
3640: CALL_OW 274
3644: PPUSH
3645: LD_INT 2
3647: PPUSH
3648: LD_INT 60
3650: PPUSH
3651: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3655: LD_INT 35
3657: PPUSH
3658: CALL_OW 274
3662: PPUSH
3663: LD_INT 3
3665: PPUSH
3666: LD_INT 10
3668: PPUSH
3669: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3673: LD_INT 36
3675: PPUSH
3676: LD_INT 22
3678: PPUSH
3679: LD_INT 2
3681: PPUSH
3682: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3686: LD_ADDR_VAR 0 2
3690: PUSH
3691: LD_INT 22
3693: PUSH
3694: LD_INT 2
3696: PUSH
3697: EMPTY
3698: LIST
3699: LIST
3700: PUSH
3701: LD_INT 21
3703: PUSH
3704: LD_INT 3
3706: PUSH
3707: EMPTY
3708: LIST
3709: LIST
3710: PUSH
3711: EMPTY
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 69
3719: PUSH
3720: FOR_IN
3721: IFFALSE 3737
// SetBLevel ( i , 6 ) ;
3723: LD_VAR 0 2
3727: PPUSH
3728: LD_INT 6
3730: PPUSH
3731: CALL_OW 241
3735: GO 3720
3737: POP
3738: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3739: LD_ADDR_EXP 50
3743: PUSH
3744: LD_STRING Dietrich
3746: PPUSH
3747: CALL_OW 25
3751: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3752: LD_EXP 50
3756: PPUSH
3757: LD_INT 35
3759: PPUSH
3760: CALL_OW 52
// InitHC_All ( ) ;
3764: CALL_OW 584
// for i := 1 to 3 do
3768: LD_ADDR_VAR 0 2
3772: PUSH
3773: DOUBLE
3774: LD_INT 1
3776: DEC
3777: ST_TO_ADDR
3778: LD_INT 3
3780: PUSH
3781: FOR_TO
3782: IFFALSE 3888
// begin PrepareEngineer ( sex_male , skill ) ;
3784: LD_INT 1
3786: PPUSH
3787: LD_VAR 0 6
3791: PPUSH
3792: CALL_OW 382
// if i = 1 then
3796: LD_VAR 0 2
3800: PUSH
3801: LD_INT 1
3803: EQUAL
3804: IFFALSE 3816
// hc_name := Ahmed Abbasid else
3806: LD_ADDR_OWVAR 26
3810: PUSH
3811: LD_STRING Ahmed Abbasid
3813: ST_TO_ADDR
3814: GO 3824
// hc_name :=  ;
3816: LD_ADDR_OWVAR 26
3820: PUSH
3821: LD_STRING 
3823: ST_TO_ADDR
// un := CreateHuman ;
3824: LD_ADDR_VAR 0 4
3828: PUSH
3829: CALL_OW 44
3833: ST_TO_ADDR
// if i = 1 then
3834: LD_VAR 0 2
3838: PUSH
3839: LD_INT 1
3841: EQUAL
3842: IFFALSE 3854
// Ahmed := un ;
3844: LD_ADDR_EXP 51
3848: PUSH
3849: LD_VAR 0 4
3853: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3854: LD_ADDR_EXP 49
3858: PUSH
3859: LD_EXP 49
3863: PPUSH
3864: LD_VAR 0 4
3868: PPUSH
3869: CALL 94960 0 2
3873: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3874: LD_VAR 0 4
3878: PPUSH
3879: LD_INT 35
3881: PPUSH
3882: CALL_OW 52
// end ;
3886: GO 3781
3888: POP
3889: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3890: LD_ADDR_VAR 0 2
3894: PUSH
3895: DOUBLE
3896: LD_INT 1
3898: DEC
3899: ST_TO_ADDR
3900: LD_INT 2
3902: PUSH
3903: LD_INT 3
3905: PUSH
3906: LD_INT 4
3908: PUSH
3909: LD_INT 5
3911: PUSH
3912: EMPTY
3913: LIST
3914: LIST
3915: LIST
3916: LIST
3917: PUSH
3918: LD_OWVAR 67
3922: ARRAY
3923: PUSH
3924: FOR_TO
3925: IFFALSE 4000
// begin PrepareScientist ( false , skill ) ;
3927: LD_INT 0
3929: PPUSH
3930: LD_VAR 0 6
3934: PPUSH
3935: CALL_OW 384
// un := CreateHuman ;
3939: LD_ADDR_VAR 0 4
3943: PUSH
3944: CALL_OW 44
3948: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3949: LD_VAR 0 4
3953: PPUSH
3954: LD_INT 1
3956: PPUSH
3957: LD_VAR 0 6
3961: PPUSH
3962: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3966: LD_ADDR_EXP 49
3970: PUSH
3971: LD_EXP 49
3975: PPUSH
3976: LD_VAR 0 4
3980: PPUSH
3981: CALL 94960 0 2
3985: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3986: LD_VAR 0 4
3990: PPUSH
3991: LD_INT 36
3993: PPUSH
3994: CALL_OW 52
// end ;
3998: GO 3924
4000: POP
4001: POP
// for j in [ arBar1 , arBar2 ] do
4002: LD_ADDR_VAR 0 3
4006: PUSH
4007: LD_INT 37
4009: PUSH
4010: LD_INT 38
4012: PUSH
4013: EMPTY
4014: LIST
4015: LIST
4016: PUSH
4017: FOR_IN
4018: IFFALSE 4098
// for i := 1 to 4 do
4020: LD_ADDR_VAR 0 2
4024: PUSH
4025: DOUBLE
4026: LD_INT 1
4028: DEC
4029: ST_TO_ADDR
4030: LD_INT 4
4032: PUSH
4033: FOR_TO
4034: IFFALSE 4094
// begin PrepareSoldier ( false , skill ) ;
4036: LD_INT 0
4038: PPUSH
4039: LD_VAR 0 6
4043: PPUSH
4044: CALL_OW 381
// un := CreateHuman ;
4048: LD_ADDR_VAR 0 4
4052: PUSH
4053: CALL_OW 44
4057: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4058: LD_ADDR_EXP 49
4062: PUSH
4063: LD_EXP 49
4067: PPUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: CALL 94960 0 2
4077: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4078: LD_VAR 0 4
4082: PPUSH
4083: LD_VAR 0 3
4087: PPUSH
4088: CALL_OW 52
// end ;
4092: GO 4033
4094: POP
4095: POP
4096: GO 4017
4098: POP
4099: POP
// for i := 1 to 3 do
4100: LD_ADDR_VAR 0 2
4104: PUSH
4105: DOUBLE
4106: LD_INT 1
4108: DEC
4109: ST_TO_ADDR
4110: LD_INT 3
4112: PUSH
4113: FOR_TO
4114: IFFALSE 4193
// begin un := arForces [ arForces - i ] ;
4116: LD_ADDR_VAR 0 4
4120: PUSH
4121: LD_EXP 49
4125: PUSH
4126: LD_EXP 49
4130: PUSH
4131: LD_VAR 0 2
4135: MINUS
4136: ARRAY
4137: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4138: LD_VAR 0 4
4142: PPUSH
4143: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4147: LD_VAR 0 4
4151: PPUSH
4152: LD_INT 22
4154: PUSH
4155: LD_INT 2
4157: PUSH
4158: EMPTY
4159: LIST
4160: LIST
4161: PUSH
4162: LD_INT 30
4164: PUSH
4165: LD_INT 31
4167: PUSH
4168: EMPTY
4169: LIST
4170: LIST
4171: PUSH
4172: EMPTY
4173: LIST
4174: LIST
4175: PPUSH
4176: CALL_OW 69
4180: PUSH
4181: LD_VAR 0 2
4185: ARRAY
4186: PPUSH
4187: CALL_OW 180
// end ;
4191: GO 4113
4193: POP
4194: POP
// for i := 1 to 3 do
4195: LD_ADDR_VAR 0 2
4199: PUSH
4200: DOUBLE
4201: LD_INT 1
4203: DEC
4204: ST_TO_ADDR
4205: LD_INT 3
4207: PUSH
4208: FOR_TO
4209: IFFALSE 4294
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4211: LD_ADDR_VAR 0 5
4215: PUSH
4216: LD_EXP 49
4220: PPUSH
4221: LD_INT 25
4223: PUSH
4224: LD_INT 1
4226: PUSH
4227: EMPTY
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 3
4233: PUSH
4234: LD_INT 120
4236: PUSH
4237: LD_INT 6
4239: PUSH
4240: EMPTY
4241: LIST
4242: LIST
4243: PUSH
4244: EMPTY
4245: LIST
4246: LIST
4247: PUSH
4248: EMPTY
4249: LIST
4250: LIST
4251: PPUSH
4252: CALL_OW 72
4256: ST_TO_ADDR
// if not tmp then
4257: LD_VAR 0 5
4261: NOT
4262: IFFALSE 4266
// continue ;
4264: GO 4208
// un := tmp [ 1 ] ;
4266: LD_ADDR_VAR 0 4
4270: PUSH
4271: LD_VAR 0 5
4275: PUSH
4276: LD_INT 1
4278: ARRAY
4279: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4280: LD_VAR 0 4
4284: PPUSH
4285: LD_INT 6
4287: PPUSH
4288: CALL_OW 109
// end ;
4292: GO 4208
4294: POP
4295: POP
// for i in UnitsInside ( arBar2 ) do
4296: LD_ADDR_VAR 0 2
4300: PUSH
4301: LD_INT 38
4303: PPUSH
4304: CALL_OW 313
4308: PUSH
4309: FOR_IN
4310: IFFALSE 4326
// SetClass ( i , class_mortar ) ;
4312: LD_VAR 0 2
4316: PPUSH
4317: LD_INT 8
4319: PPUSH
4320: CALL_OW 336
4324: GO 4309
4326: POP
4327: POP
// end ;
4328: LD_VAR 0 1
4332: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4333: LD_EXP 7
4337: IFFALSE 4754
4339: GO 4341
4341: DISABLE
4342: LD_INT 0
4344: PPUSH
4345: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4346: LD_INT 36
4348: PPUSH
4349: LD_INT 11
4351: PPUSH
4352: CALL_OW 147
// wait ( 0 0$10 ) ;
4356: LD_INT 350
4358: PPUSH
4359: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4363: LD_ADDR_EXP 53
4367: PUSH
4368: LD_INT 27
4370: PUSH
4371: LD_INT 69
4373: PUSH
4374: LD_INT 4
4376: PUSH
4377: LD_INT 2
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: LIST
4384: LIST
4385: PUSH
4386: LD_INT 27
4388: PUSH
4389: LD_INT 67
4391: PUSH
4392: LD_INT 6
4394: PUSH
4395: LD_INT 3
4397: PUSH
4398: EMPTY
4399: LIST
4400: LIST
4401: LIST
4402: LIST
4403: PUSH
4404: EMPTY
4405: LIST
4406: LIST
4407: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4408: LD_INT 35
4410: PPUSH
4411: CALL_OW 67
// until not arBuildings ;
4415: LD_EXP 53
4419: NOT
4420: IFFALSE 4408
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4422: LD_ADDR_VAR 0 2
4426: PUSH
4427: LD_EXP 49
4431: PPUSH
4432: LD_INT 25
4434: PUSH
4435: LD_INT 2
4437: PUSH
4438: EMPTY
4439: LIST
4440: LIST
4441: PPUSH
4442: CALL_OW 72
4446: ST_TO_ADDR
// if eng then
4447: LD_VAR 0 2
4451: IFFALSE 4590
// begin eng := eng [ 1 ] ;
4453: LD_ADDR_VAR 0 2
4457: PUSH
4458: LD_VAR 0 2
4462: PUSH
4463: LD_INT 1
4465: ARRAY
4466: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4467: LD_VAR 0 2
4471: PPUSH
4472: LD_INT 4
4474: PPUSH
4475: CALL_OW 109
// for i in arCameras do
4479: LD_ADDR_VAR 0 1
4483: PUSH
4484: LD_EXP 55
4488: PUSH
4489: FOR_IN
4490: IFFALSE 4521
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4492: LD_VAR 0 2
4496: PPUSH
4497: LD_VAR 0 1
4501: PUSH
4502: LD_INT 1
4504: ARRAY
4505: PPUSH
4506: LD_VAR 0 1
4510: PUSH
4511: LD_INT 2
4513: ARRAY
4514: PPUSH
4515: CALL_OW 217
4519: GO 4489
4521: POP
4522: POP
// repeat wait ( 0 0$1 ) ;
4523: LD_INT 35
4525: PPUSH
4526: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4530: LD_VAR 0 2
4534: PPUSH
4535: CALL_OW 314
4539: NOT
4540: IFTRUE 4553
4542: PUSH
4543: LD_VAR 0 2
4547: PPUSH
4548: CALL_OW 301
4552: OR
4553: IFFALSE 4523
// if IsOk ( eng ) then
4555: LD_VAR 0 2
4559: PPUSH
4560: CALL_OW 302
4564: IFFALSE 4590
// begin SetTag ( eng , 0 ) ;
4566: LD_VAR 0 2
4570: PPUSH
4571: LD_INT 0
4573: PPUSH
4574: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4578: LD_VAR 0 2
4582: PPUSH
4583: LD_INT 35
4585: PPUSH
4586: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4590: LD_INT 35
4592: PPUSH
4593: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4597: LD_OWVAR 1
4601: PUSH
4602: LD_INT 4200
4604: MOD
4605: PUSH
4606: LD_INT 0
4608: EQUAL
4609: IFFALSE 4624
4611: PUSH
4612: LD_INT 9
4614: PPUSH
4615: CALL_OW 435
4619: PUSH
4620: LD_INT 3
4622: LESS
4623: AND
4624: IFFALSE 4647
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4626: LD_INT 1
4628: PPUSH
4629: LD_INT 5
4631: PPUSH
4632: CALL_OW 12
4636: PPUSH
4637: LD_INT 9
4639: PPUSH
4640: LD_INT 1
4642: PPUSH
4643: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4647: LD_INT 22
4649: PUSH
4650: LD_INT 1
4652: PUSH
4653: EMPTY
4654: LIST
4655: LIST
4656: PUSH
4657: LD_INT 3
4659: PUSH
4660: LD_INT 57
4662: PUSH
4663: EMPTY
4664: LIST
4665: PUSH
4666: EMPTY
4667: LIST
4668: LIST
4669: PUSH
4670: LD_INT 63
4672: PUSH
4673: LD_INT 11
4675: PUSH
4676: EMPTY
4677: LIST
4678: LIST
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: LIST
4684: PPUSH
4685: CALL_OW 69
4689: IFFALSE 4590
// wait ( 0 0$10 ) ;
4691: LD_INT 350
4693: PPUSH
4694: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4698: LD_ADDR_EXP 52
4702: PUSH
4703: LD_INT 21
4705: PUSH
4706: LD_INT 22
4708: PUSH
4709: LD_INT 54
4711: PUSH
4712: EMPTY
4713: LIST
4714: LIST
4715: LIST
4716: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4717: LD_INT 35
4719: PPUSH
4720: CALL_OW 67
// until not arTech ;
4724: LD_EXP 52
4728: NOT
4729: IFFALSE 4717
// wait ( 0 0$30 ) ;
4731: LD_INT 1050
4733: PPUSH
4734: CALL_OW 67
// arabianAttack := true ;
4738: LD_ADDR_EXP 4
4742: PUSH
4743: LD_INT 1
4745: ST_TO_ADDR
// arBaseActive := false ;
4746: LD_ADDR_EXP 3
4750: PUSH
4751: LD_INT 0
4753: ST_TO_ADDR
// end ;
4754: PPOPN 2
4756: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4757: LD_EXP 3
4761: IFFALSE 4769
4763: PUSH
4764: LD_EXP 54
4768: AND
4769: IFFALSE 4790
4771: PUSH
4772: LD_INT 8
4774: PPUSH
4775: LD_INT 81
4777: PUSH
4778: LD_INT 2
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: PPUSH
4785: CALL_OW 70
4789: AND
4790: IFFALSE 4901
4792: GO 4794
4794: DISABLE
4795: LD_INT 0
4797: PPUSH
4798: PPUSH
// begin enable ;
4799: ENABLE
// for i in arMines do
4800: LD_ADDR_VAR 0 1
4804: PUSH
4805: LD_EXP 54
4809: PUSH
4810: FOR_IN
4811: IFFALSE 4899
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4813: LD_ADDR_VAR 0 2
4817: PUSH
4818: LD_VAR 0 1
4822: PUSH
4823: LD_INT 1
4825: ARRAY
4826: PPUSH
4827: LD_VAR 0 1
4831: PUSH
4832: LD_INT 2
4834: ARRAY
4835: PPUSH
4836: CALL_OW 428
4840: ST_TO_ADDR
// if not e then
4841: LD_VAR 0 2
4845: NOT
4846: IFFALSE 4850
// continue ;
4848: GO 4810
// if GetSide ( e ) in [ 3 , 6 ] then
4850: LD_VAR 0 2
4854: PPUSH
4855: CALL_OW 255
4859: PUSH
4860: LD_INT 3
4862: PUSH
4863: LD_INT 6
4865: PUSH
4866: EMPTY
4867: LIST
4868: LIST
4869: IN
4870: IFFALSE 4897
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4872: LD_VAR 0 1
4876: PUSH
4877: LD_INT 1
4879: ARRAY
4880: PPUSH
4881: LD_VAR 0 1
4885: PUSH
4886: LD_INT 2
4888: ARRAY
4889: PPUSH
4890: LD_INT 2
4892: PPUSH
4893: CALL_OW 456
// end ;
4897: GO 4810
4899: POP
4900: POP
// end ;
4901: PPOPN 2
4903: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4904: LD_EXP 3
4908: IFFALSE 7126
4910: GO 4912
4912: DISABLE
4913: LD_INT 0
4915: PPUSH
4916: PPUSH
4917: PPUSH
4918: PPUSH
4919: PPUSH
4920: PPUSH
4921: PPUSH
4922: PPUSH
4923: PPUSH
4924: PPUSH
4925: PPUSH
4926: PPUSH
4927: PPUSH
4928: PPUSH
4929: PPUSH
4930: PPUSH
// begin enable ;
4931: ENABLE
// side := 2 ;
4932: LD_ADDR_VAR 0 4
4936: PUSH
4937: LD_INT 2
4939: ST_TO_ADDR
// if arTech then
4940: LD_EXP 52
4944: IFFALSE 5100
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4946: LD_ADDR_VAR 0 6
4950: PUSH
4951: LD_INT 22
4953: PUSH
4954: LD_VAR 0 4
4958: PUSH
4959: EMPTY
4960: LIST
4961: LIST
4962: PUSH
4963: LD_INT 50
4965: PUSH
4966: EMPTY
4967: LIST
4968: PUSH
4969: LD_INT 2
4971: PUSH
4972: LD_INT 30
4974: PUSH
4975: LD_INT 6
4977: PUSH
4978: EMPTY
4979: LIST
4980: LIST
4981: PUSH
4982: LD_INT 30
4984: PUSH
4985: LD_INT 7
4987: PUSH
4988: EMPTY
4989: LIST
4990: LIST
4991: PUSH
4992: LD_INT 30
4994: PUSH
4995: LD_INT 8
4997: PUSH
4998: EMPTY
4999: LIST
5000: LIST
5001: PUSH
5002: EMPTY
5003: LIST
5004: LIST
5005: LIST
5006: LIST
5007: PUSH
5008: EMPTY
5009: LIST
5010: LIST
5011: LIST
5012: PPUSH
5013: CALL_OW 69
5017: ST_TO_ADDR
// if lab then
5018: LD_VAR 0 6
5022: IFFALSE 5100
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: CALL_OW 461
5037: PUSH
5038: LD_INT 2
5040: EQUAL
5041: IFFALSE 5100
// begin for i in arTech do
5043: LD_ADDR_VAR 0 1
5047: PUSH
5048: LD_EXP 52
5052: PUSH
5053: FOR_IN
5054: IFFALSE 5098
// if CanBeResearched ( lab [ 1 ] , i ) then
5056: LD_VAR 0 6
5060: PUSH
5061: LD_INT 1
5063: ARRAY
5064: PPUSH
5065: LD_VAR 0 1
5069: PPUSH
5070: CALL_OW 430
5074: IFFALSE 5096
// begin ComResearch ( lab [ 1 ] , i ) ;
5076: LD_VAR 0 6
5080: PUSH
5081: LD_INT 1
5083: ARRAY
5084: PPUSH
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 124
// break ;
5094: GO 5098
// end ;
5096: GO 5053
5098: POP
5099: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5100: LD_ADDR_VAR 0 5
5104: PUSH
5105: LD_INT 5
5107: PPUSH
5108: LD_INT 21
5110: PUSH
5111: LD_INT 3
5113: PUSH
5114: EMPTY
5115: LIST
5116: LIST
5117: PUSH
5118: LD_INT 3
5120: PUSH
5121: LD_INT 24
5123: PUSH
5124: LD_INT 1000
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PUSH
5131: EMPTY
5132: LIST
5133: LIST
5134: PUSH
5135: EMPTY
5136: LIST
5137: LIST
5138: PPUSH
5139: CALL_OW 70
5143: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5144: LD_ADDR_VAR 0 9
5148: PUSH
5149: LD_INT 9
5151: PPUSH
5152: CALL_OW 435
5156: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5157: LD_ADDR_VAR 0 11
5161: PUSH
5162: LD_EXP 49
5166: PPUSH
5167: LD_INT 25
5169: PUSH
5170: LD_INT 4
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PUSH
5177: LD_INT 50
5179: PUSH
5180: EMPTY
5181: LIST
5182: PUSH
5183: EMPTY
5184: LIST
5185: LIST
5186: PPUSH
5187: CALL_OW 72
5191: ST_TO_ADDR
// if sci then
5192: LD_VAR 0 11
5196: IFFALSE 5566
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5198: LD_ADDR_VAR 0 13
5202: PUSH
5203: LD_EXP 49
5207: PPUSH
5208: LD_INT 95
5210: PUSH
5211: LD_INT 5
5213: PUSH
5214: EMPTY
5215: LIST
5216: LIST
5217: PUSH
5218: LD_INT 3
5220: PUSH
5221: LD_INT 54
5223: PUSH
5224: EMPTY
5225: LIST
5226: PUSH
5227: EMPTY
5228: LIST
5229: LIST
5230: PUSH
5231: LD_INT 120
5233: PUSH
5234: LD_INT 1
5236: PUSH
5237: EMPTY
5238: LIST
5239: LIST
5240: PUSH
5241: EMPTY
5242: LIST
5243: LIST
5244: LIST
5245: PPUSH
5246: CALL_OW 72
5250: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5251: LD_ADDR_VAR 0 6
5255: PUSH
5256: LD_INT 22
5258: PUSH
5259: LD_VAR 0 4
5263: PUSH
5264: EMPTY
5265: LIST
5266: LIST
5267: PUSH
5268: LD_INT 50
5270: PUSH
5271: EMPTY
5272: LIST
5273: PUSH
5274: LD_INT 2
5276: PUSH
5277: LD_INT 30
5279: PUSH
5280: LD_INT 6
5282: PUSH
5283: EMPTY
5284: LIST
5285: LIST
5286: PUSH
5287: LD_INT 30
5289: PUSH
5290: LD_INT 7
5292: PUSH
5293: EMPTY
5294: LIST
5295: LIST
5296: PUSH
5297: LD_INT 30
5299: PUSH
5300: LD_INT 8
5302: PUSH
5303: EMPTY
5304: LIST
5305: LIST
5306: PUSH
5307: EMPTY
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: PUSH
5313: EMPTY
5314: LIST
5315: LIST
5316: LIST
5317: PPUSH
5318: CALL_OW 69
5322: ST_TO_ADDR
// tag := GetTag ( i ) ;
5323: LD_ADDR_VAR 0 8
5327: PUSH
5328: LD_VAR 0 1
5332: PPUSH
5333: CALL_OW 110
5337: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5338: LD_VAR 0 1
5342: PPUSH
5343: CALL_OW 256
5347: PUSH
5348: LD_INT 800
5350: LESS
5351: IFFALSE 5363
5353: PUSH
5354: LD_VAR 0 8
5358: PUSH
5359: LD_INT 1
5361: NONEQUAL
5362: AND
5363: IFFALSE 5392
// begin ComMoveXY ( i , 72 , 15 ) ;
5365: LD_VAR 0 1
5369: PPUSH
5370: LD_INT 72
5372: PPUSH
5373: LD_INT 15
5375: PPUSH
5376: CALL_OW 111
// SetTag ( i , tHeal ) ;
5380: LD_VAR 0 1
5384: PPUSH
5385: LD_INT 1
5387: PPUSH
5388: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5392: LD_VAR 0 1
5396: PPUSH
5397: CALL_OW 256
5401: PUSH
5402: LD_INT 1000
5404: EQUAL
5405: IFFALSE 5417
5407: PUSH
5408: LD_VAR 0 8
5412: PUSH
5413: LD_INT 1
5415: EQUAL
5416: AND
5417: IFFALSE 5431
// begin SetTag ( i , 0 ) ;
5419: LD_VAR 0 1
5423: PPUSH
5424: LD_INT 0
5426: PPUSH
5427: CALL_OW 109
// end ; if hurtUnits then
5431: LD_VAR 0 13
5435: IFFALSE 5496
// begin for i in sci do
5437: LD_ADDR_VAR 0 1
5441: PUSH
5442: LD_VAR 0 11
5446: PUSH
5447: FOR_IN
5448: IFFALSE 5492
// if IsInUnit ( i ) then
5450: LD_VAR 0 1
5454: PPUSH
5455: CALL_OW 310
5459: IFFALSE 5472
// ComExitBuilding ( i ) else
5461: LD_VAR 0 1
5465: PPUSH
5466: CALL_OW 122
5470: GO 5490
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5472: LD_VAR 0 1
5476: PPUSH
5477: LD_VAR 0 13
5481: PUSH
5482: LD_INT 1
5484: ARRAY
5485: PPUSH
5486: CALL_OW 128
5490: GO 5447
5492: POP
5493: POP
// end else
5494: GO 5566
// if lab then
5496: LD_VAR 0 6
5500: IFFALSE 5566
// begin for i in sci do
5502: LD_ADDR_VAR 0 1
5506: PUSH
5507: LD_VAR 0 11
5511: PUSH
5512: FOR_IN
5513: IFFALSE 5564
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5515: LD_VAR 0 1
5519: PPUSH
5520: CALL_OW 310
5524: NOT
5525: IFFALSE 5542
5527: PUSH
5528: LD_VAR 0 1
5532: PPUSH
5533: CALL_OW 110
5537: PUSH
5538: LD_INT 1
5540: NONEQUAL
5541: AND
5542: IFFALSE 5562
// ComEnterUnit ( i , lab [ 1 ] ) ;
5544: LD_VAR 0 1
5548: PPUSH
5549: LD_VAR 0 6
5553: PUSH
5554: LD_INT 1
5556: ARRAY
5557: PPUSH
5558: CALL_OW 120
5562: GO 5512
5564: POP
5565: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5566: LD_ADDR_VAR 0 7
5570: PUSH
5571: LD_EXP 49
5575: PPUSH
5576: LD_INT 25
5578: PUSH
5579: LD_INT 2
5581: PUSH
5582: EMPTY
5583: LIST
5584: LIST
5585: PPUSH
5586: CALL_OW 72
5590: ST_TO_ADDR
// if eng then
5591: LD_VAR 0 7
5595: IFFALSE 6274
// begin for i in eng do
5597: LD_ADDR_VAR 0 1
5601: PUSH
5602: LD_VAR 0 7
5606: PUSH
5607: FOR_IN
5608: IFFALSE 6272
// begin tag := GetTag ( i ) ;
5610: LD_ADDR_VAR 0 8
5614: PUSH
5615: LD_VAR 0 1
5619: PPUSH
5620: CALL_OW 110
5624: ST_TO_ADDR
// if tag = tCamera then
5625: LD_VAR 0 8
5629: PUSH
5630: LD_INT 4
5632: EQUAL
5633: IFFALSE 5637
// continue ;
5635: GO 5607
// if GetLives ( i ) < 600 and tag <> tHeal then
5637: LD_VAR 0 1
5641: PPUSH
5642: CALL_OW 256
5646: PUSH
5647: LD_INT 600
5649: LESS
5650: IFFALSE 5662
5652: PUSH
5653: LD_VAR 0 8
5657: PUSH
5658: LD_INT 1
5660: NONEQUAL
5661: AND
5662: IFFALSE 5700
// begin SetTag ( i , tHeal ) ;
5664: LD_VAR 0 1
5668: PPUSH
5669: LD_INT 1
5671: PPUSH
5672: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5676: LD_VAR 0 1
5680: PPUSH
5681: LD_INT 72
5683: PPUSH
5684: LD_INT 15
5686: PPUSH
5687: CALL_OW 111
// AddComHold ( i ) ;
5691: LD_VAR 0 1
5695: PPUSH
5696: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5700: LD_VAR 0 8
5704: PUSH
5705: LD_INT 1
5707: EQUAL
5708: IFFALSE 5725
5710: PUSH
5711: LD_VAR 0 1
5715: PPUSH
5716: CALL_OW 256
5720: PUSH
5721: LD_INT 1000
5723: EQUAL
5724: AND
5725: IFFALSE 5739
// SetTag ( i , 0 ) ;
5727: LD_VAR 0 1
5731: PPUSH
5732: LD_INT 0
5734: PPUSH
5735: CALL_OW 109
// if not tag then
5739: LD_VAR 0 8
5743: NOT
5744: IFFALSE 5894
// begin if cr or tmp or Count ( arBuildings ) then
5746: LD_VAR 0 9
5750: IFTRUE 5758
5752: PUSH
5753: LD_VAR 0 5
5757: OR
5758: IFTRUE 5771
5760: PUSH
5761: LD_EXP 53
5765: PPUSH
5766: CALL 58984 0 1
5770: OR
5771: IFFALSE 5858
// begin if IsInUnit ( i ) then
5773: LD_VAR 0 1
5777: PPUSH
5778: CALL_OW 310
5782: IFFALSE 5793
// ComExitBuilding ( i ) ;
5784: LD_VAR 0 1
5788: PPUSH
5789: CALL_OW 122
// if tmp then
5793: LD_VAR 0 5
5797: IFFALSE 5813
// SetTag ( i , tRepair ) else
5799: LD_VAR 0 1
5803: PPUSH
5804: LD_INT 3
5806: PPUSH
5807: CALL_OW 109
5811: GO 5856
// if cr then
5813: LD_VAR 0 9
5817: IFFALSE 5833
// SetTag ( i , tCrates ) else
5819: LD_VAR 0 1
5823: PPUSH
5824: LD_INT 2
5826: PPUSH
5827: CALL_OW 109
5831: GO 5856
// if Count ( arBuildings ) then
5833: LD_EXP 53
5837: PPUSH
5838: CALL 58984 0 1
5842: IFFALSE 5856
// SetTag ( i , tBuild ) ;
5844: LD_VAR 0 1
5848: PPUSH
5849: LD_INT 5
5851: PPUSH
5852: CALL_OW 109
// end else
5856: GO 5894
// if not IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: NOT
5868: IFFALSE 5894
// begin SetTag ( i , 0 ) ;
5870: LD_VAR 0 1
5874: PPUSH
5875: LD_INT 0
5877: PPUSH
5878: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5882: LD_VAR 0 1
5886: PPUSH
5887: LD_INT 35
5889: PPUSH
5890: CALL_OW 120
// end ; end ; if tag = tRepair then
5894: LD_VAR 0 8
5898: PUSH
5899: LD_INT 3
5901: EQUAL
5902: IFFALSE 6004
// begin if IsInUnit ( i ) then
5904: LD_VAR 0 1
5908: PPUSH
5909: CALL_OW 310
5913: IFFALSE 5926
// begin ComExitBuilding ( i ) ;
5915: LD_VAR 0 1
5919: PPUSH
5920: CALL_OW 122
// continue ;
5924: GO 5607
// end ; if not tmp then
5926: LD_VAR 0 5
5930: NOT
5931: IFFALSE 5947
// begin SetTag ( i , 0 ) ;
5933: LD_VAR 0 1
5937: PPUSH
5938: LD_INT 0
5940: PPUSH
5941: CALL_OW 109
// continue ;
5945: GO 5607
// end ; if not HasTask ( i ) then
5947: LD_VAR 0 1
5951: PPUSH
5952: CALL_OW 314
5956: NOT
5957: IFFALSE 5977
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5959: LD_VAR 0 1
5963: PPUSH
5964: LD_VAR 0 5
5968: PUSH
5969: LD_INT 1
5971: ARRAY
5972: PPUSH
5973: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5977: LD_VAR 0 1
5981: PPUSH
5982: LD_INT 5
5984: PPUSH
5985: CALL_OW 308
5989: NOT
5990: IFFALSE 6004
// ComMoveToArea ( i , arBaseArea ) ;
5992: LD_VAR 0 1
5996: PPUSH
5997: LD_INT 5
5999: PPUSH
6000: CALL_OW 113
// end ; if tag = tBuild then
6004: LD_VAR 0 8
6008: PUSH
6009: LD_INT 5
6011: EQUAL
6012: IFFALSE 6123
// begin if IsInUnit ( i ) then
6014: LD_VAR 0 1
6018: PPUSH
6019: CALL_OW 310
6023: IFFALSE 6036
// begin ComExitBuilding ( i ) ;
6025: LD_VAR 0 1
6029: PPUSH
6030: CALL_OW 122
// continue ;
6034: GO 5607
// end ; if not Count ( arBuildings ) then
6036: LD_EXP 53
6040: PPUSH
6041: CALL 58984 0 1
6045: NOT
6046: IFFALSE 6062
// begin SetTag ( i , 0 ) ;
6048: LD_VAR 0 1
6052: PPUSH
6053: LD_INT 0
6055: PPUSH
6056: CALL_OW 109
// continue ;
6060: GO 5607
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6062: LD_VAR 0 1
6066: PPUSH
6067: LD_EXP 53
6071: PUSH
6072: LD_INT 1
6074: ARRAY
6075: PUSH
6076: LD_INT 1
6078: ARRAY
6079: PPUSH
6080: LD_EXP 53
6084: PUSH
6085: LD_INT 1
6087: ARRAY
6088: PUSH
6089: LD_INT 2
6091: ARRAY
6092: PPUSH
6093: LD_EXP 53
6097: PUSH
6098: LD_INT 1
6100: ARRAY
6101: PUSH
6102: LD_INT 3
6104: ARRAY
6105: PPUSH
6106: LD_EXP 53
6110: PUSH
6111: LD_INT 1
6113: ARRAY
6114: PUSH
6115: LD_INT 4
6117: ARRAY
6118: PPUSH
6119: CALL_OW 145
// end ; if tag = tCrates then
6123: LD_VAR 0 8
6127: PUSH
6128: LD_INT 2
6130: EQUAL
6131: IFFALSE 6270
// begin if IsInUnit ( i ) then
6133: LD_VAR 0 1
6137: PPUSH
6138: CALL_OW 310
6142: IFFALSE 6155
// begin ComExitBuilding ( i ) ;
6144: LD_VAR 0 1
6148: PPUSH
6149: CALL_OW 122
// continue ;
6153: GO 5607
// end ; if not cr then
6155: LD_VAR 0 9
6159: NOT
6160: IFFALSE 6176
// begin SetTag ( i , 0 ) ;
6162: LD_VAR 0 1
6166: PPUSH
6167: LD_INT 0
6169: PPUSH
6170: CALL_OW 109
// continue ;
6174: GO 5607
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6176: LD_VAR 0 1
6180: PPUSH
6181: CALL_OW 314
6185: NOT
6186: IFFALSE 6241
6188: PUSH
6189: LD_INT 81
6191: PUSH
6192: LD_VAR 0 4
6196: PUSH
6197: EMPTY
6198: LIST
6199: LIST
6200: PUSH
6201: LD_INT 92
6203: PUSH
6204: LD_VAR 0 9
6208: PUSH
6209: LD_INT 1
6211: ARRAY
6212: PUSH
6213: LD_VAR 0 9
6217: PUSH
6218: LD_INT 2
6220: ARRAY
6221: PUSH
6222: LD_INT 12
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: PUSH
6231: EMPTY
6232: LIST
6233: LIST
6234: PPUSH
6235: CALL_OW 69
6239: NOT
6240: AND
6241: IFFALSE 6270
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6243: LD_VAR 0 1
6247: PPUSH
6248: LD_VAR 0 9
6252: PUSH
6253: LD_INT 1
6255: ARRAY
6256: PPUSH
6257: LD_VAR 0 9
6261: PUSH
6262: LD_INT 2
6264: ARRAY
6265: PPUSH
6266: CALL_OW 117
// end ; end ;
6270: GO 5607
6272: POP
6273: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6274: LD_ADDR_VAR 0 12
6278: PUSH
6279: LD_EXP 49
6283: PPUSH
6284: LD_INT 25
6286: PUSH
6287: LD_INT 1
6289: PUSH
6290: EMPTY
6291: LIST
6292: LIST
6293: PUSH
6294: LD_INT 50
6296: PUSH
6297: EMPTY
6298: LIST
6299: PUSH
6300: EMPTY
6301: LIST
6302: LIST
6303: PPUSH
6304: CALL_OW 72
6308: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6309: LD_ADDR_VAR 0 14
6313: PUSH
6314: LD_INT 5
6316: PPUSH
6317: LD_INT 81
6319: PUSH
6320: LD_VAR 0 4
6324: PUSH
6325: EMPTY
6326: LIST
6327: LIST
6328: PPUSH
6329: CALL_OW 70
6333: ST_TO_ADDR
// if sol then
6334: LD_VAR 0 12
6338: IFFALSE 7126
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6340: LD_ADDR_VAR 0 5
6344: PUSH
6345: LD_VAR 0 12
6349: PPUSH
6350: LD_INT 50
6352: PUSH
6353: EMPTY
6354: LIST
6355: PUSH
6356: LD_INT 120
6358: PUSH
6359: LD_INT 6
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PUSH
6366: EMPTY
6367: LIST
6368: LIST
6369: PPUSH
6370: CALL_OW 72
6374: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6375: LD_VAR 0 5
6379: IFFALSE 6422
6381: PUSH
6382: LD_INT 81
6384: PUSH
6385: LD_VAR 0 4
6389: PUSH
6390: EMPTY
6391: LIST
6392: LIST
6393: PUSH
6394: LD_INT 92
6396: PUSH
6397: LD_INT 76
6399: PUSH
6400: LD_INT 38
6402: PUSH
6403: LD_INT 12
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: PUSH
6412: EMPTY
6413: LIST
6414: LIST
6415: PPUSH
6416: CALL_OW 69
6420: NOT
6421: AND
6422: IFFALSE 6594
// for i := 1 to Count ( tmp ) do
6424: LD_ADDR_VAR 0 1
6428: PUSH
6429: DOUBLE
6430: LD_INT 1
6432: DEC
6433: ST_TO_ADDR
6434: LD_VAR 0 5
6438: PPUSH
6439: CALL 58984 0 1
6443: PUSH
6444: FOR_TO
6445: IFFALSE 6592
// begin un := tmp [ i ] ;
6447: LD_ADDR_VAR 0 2
6451: PUSH
6452: LD_VAR 0 5
6456: PUSH
6457: LD_VAR 0 1
6461: ARRAY
6462: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6463: LD_ADDR_VAR 0 3
6467: PUSH
6468: LD_VAR 0 2
6472: PPUSH
6473: CALL_OW 310
6477: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6478: LD_VAR 0 2
6482: PPUSH
6483: CALL_OW 459
6487: NOT
6488: IFFALSE 6557
// begin ComExitBuilding ( un ) ;
6490: LD_VAR 0 2
6494: PPUSH
6495: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6499: LD_VAR 0 2
6503: PPUSH
6504: LD_EXP 54
6508: PUSH
6509: LD_VAR 0 1
6513: ARRAY
6514: PUSH
6515: LD_INT 1
6517: ARRAY
6518: PPUSH
6519: LD_EXP 54
6523: PUSH
6524: LD_VAR 0 1
6528: ARRAY
6529: PUSH
6530: LD_INT 2
6532: ARRAY
6533: PPUSH
6534: LD_INT 0
6536: PPUSH
6537: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6541: LD_VAR 0 2
6545: PPUSH
6546: LD_VAR 0 3
6550: PPUSH
6551: CALL_OW 180
// end else
6555: GO 6590
// if not b and not HasTask ( un ) then
6557: LD_VAR 0 3
6561: NOT
6562: IFFALSE 6576
6564: PUSH
6565: LD_VAR 0 2
6569: PPUSH
6570: CALL_OW 314
6574: NOT
6575: AND
6576: IFFALSE 6590
// ComEnterUnit ( un , arBar1 ) ;
6578: LD_VAR 0 2
6582: PPUSH
6583: LD_INT 37
6585: PPUSH
6586: CALL_OW 120
// end ;
6590: GO 6444
6592: POP
6593: POP
// if enemyInBase then
6594: LD_VAR 0 14
6598: IFFALSE 6743
// begin for i in sol do
6600: LD_ADDR_VAR 0 1
6604: PUSH
6605: LD_VAR 0 12
6609: PUSH
6610: FOR_IN
6611: IFFALSE 6739
// begin tw := IsInUnit ( i ) ;
6613: LD_ADDR_VAR 0 10
6617: PUSH
6618: LD_VAR 0 1
6622: PPUSH
6623: CALL_OW 310
6627: ST_TO_ADDR
// if tw then
6628: LD_VAR 0 10
6632: IFFALSE 6713
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6634: LD_VAR 0 10
6638: PUSH
6639: LD_INT 22
6641: PUSH
6642: LD_VAR 0 4
6646: PUSH
6647: EMPTY
6648: LIST
6649: LIST
6650: PUSH
6651: LD_INT 101
6653: PUSH
6654: LD_INT 2
6656: PUSH
6657: EMPTY
6658: LIST
6659: LIST
6660: PUSH
6661: LD_INT 2
6663: PUSH
6664: LD_INT 30
6666: PUSH
6667: LD_INT 32
6669: PUSH
6670: EMPTY
6671: LIST
6672: LIST
6673: PUSH
6674: LD_INT 30
6676: PUSH
6677: LD_INT 31
6679: PUSH
6680: EMPTY
6681: LIST
6682: LIST
6683: PUSH
6684: EMPTY
6685: LIST
6686: LIST
6687: LIST
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: LIST
6693: PPUSH
6694: CALL_OW 69
6698: IN
6699: NOT
6700: IFFALSE 6711
// ComExitBuilding ( i ) ;
6702: LD_VAR 0 1
6706: PPUSH
6707: CALL_OW 122
// end else
6711: GO 6737
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6713: LD_VAR 0 1
6717: PPUSH
6718: LD_VAR 0 14
6722: PPUSH
6723: LD_VAR 0 1
6727: PPUSH
6728: CALL_OW 74
6732: PPUSH
6733: CALL_OW 115
// end ;
6737: GO 6610
6739: POP
6740: POP
// end else
6741: GO 7126
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6743: LD_ADDR_VAR 0 15
6747: PUSH
6748: LD_INT 5
6750: PPUSH
6751: LD_INT 3
6753: PUSH
6754: LD_INT 62
6756: PUSH
6757: EMPTY
6758: LIST
6759: PUSH
6760: EMPTY
6761: LIST
6762: LIST
6763: PUSH
6764: LD_INT 2
6766: PUSH
6767: LD_INT 30
6769: PUSH
6770: LD_INT 32
6772: PUSH
6773: EMPTY
6774: LIST
6775: LIST
6776: PUSH
6777: LD_INT 30
6779: PUSH
6780: LD_INT 4
6782: PUSH
6783: EMPTY
6784: LIST
6785: LIST
6786: PUSH
6787: LD_INT 30
6789: PUSH
6790: LD_INT 5
6792: PUSH
6793: EMPTY
6794: LIST
6795: LIST
6796: PUSH
6797: LD_INT 30
6799: PUSH
6800: LD_INT 31
6802: PUSH
6803: EMPTY
6804: LIST
6805: LIST
6806: PUSH
6807: EMPTY
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: PPUSH
6818: CALL_OW 70
6822: ST_TO_ADDR
// if empty then
6823: LD_VAR 0 15
6827: IFFALSE 6844
// empty := ReverseArray ( empty ) ;
6829: LD_ADDR_VAR 0 15
6833: PUSH
6834: LD_VAR 0 15
6838: PPUSH
6839: CALL 90040 0 1
6843: ST_TO_ADDR
// for i in sol do
6844: LD_ADDR_VAR 0 1
6848: PUSH
6849: LD_VAR 0 12
6853: PUSH
6854: FOR_IN
6855: IFFALSE 7124
// begin tag := GetTag ( i ) ;
6857: LD_ADDR_VAR 0 8
6861: PUSH
6862: LD_VAR 0 1
6866: PPUSH
6867: CALL_OW 110
6871: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 256
6881: PUSH
6882: LD_INT 1000
6884: LESS
6885: IFFALSE 6897
6887: PUSH
6888: LD_VAR 0 8
6892: PUSH
6893: LD_INT 1
6895: NONEQUAL
6896: AND
6897: IFFALSE 6937
// begin SetTag ( i , tHeal ) ;
6899: LD_VAR 0 1
6903: PPUSH
6904: LD_INT 1
6906: PPUSH
6907: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6911: LD_VAR 0 1
6915: PPUSH
6916: LD_INT 72
6918: PPUSH
6919: LD_INT 15
6921: PPUSH
6922: CALL_OW 111
// AddComHold ( i ) ;
6926: LD_VAR 0 1
6930: PPUSH
6931: CALL_OW 200
// continue ;
6935: GO 6854
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6937: LD_VAR 0 1
6941: PPUSH
6942: CALL_OW 256
6946: PUSH
6947: LD_INT 1000
6949: EQUAL
6950: IFFALSE 6962
6952: PUSH
6953: LD_VAR 0 8
6957: PUSH
6958: LD_INT 1
6960: EQUAL
6961: AND
6962: IFFALSE 7045
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6964: LD_VAR 0 1
6968: PPUSH
6969: CALL_OW 459
6973: IFTRUE 7015
6975: PUSH
6976: LD_VAR 0 12
6980: PPUSH
6981: LD_INT 50
6983: PUSH
6984: EMPTY
6985: LIST
6986: PUSH
6987: LD_INT 120
6989: PUSH
6990: LD_INT 6
6992: PUSH
6993: EMPTY
6994: LIST
6995: LIST
6996: PUSH
6997: EMPTY
6998: LIST
6999: LIST
7000: PPUSH
7001: CALL_OW 72
7005: PPUSH
7006: CALL 58984 0 1
7010: PUSH
7011: LD_INT 3
7013: LESS
7014: OR
7015: IFFALSE 7031
// SetTag ( i , tMine ) else
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_INT 6
7024: PPUSH
7025: CALL_OW 109
7029: GO 7043
// SetTag ( i , 0 ) ;
7031: LD_VAR 0 1
7035: PPUSH
7036: LD_INT 0
7038: PPUSH
7039: CALL_OW 109
// continue ;
7043: GO 6854
// end ; if tag = tMine then
7045: LD_VAR 0 8
7049: PUSH
7050: LD_INT 6
7052: EQUAL
7053: IFFALSE 7057
// continue ;
7055: GO 6854
// if not IsInUnit ( i ) and not tag and empty then
7057: LD_VAR 0 1
7061: PPUSH
7062: CALL_OW 310
7066: NOT
7067: IFFALSE 7076
7069: PUSH
7070: LD_VAR 0 8
7074: NOT
7075: AND
7076: IFFALSE 7084
7078: PUSH
7079: LD_VAR 0 15
7083: AND
7084: IFFALSE 7122
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7086: LD_VAR 0 1
7090: PPUSH
7091: LD_VAR 0 15
7095: PUSH
7096: LD_INT 1
7098: ARRAY
7099: PPUSH
7100: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7104: LD_ADDR_VAR 0 15
7108: PUSH
7109: LD_VAR 0 15
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL_OW 3
7121: ST_TO_ADDR
// end ; end ;
7122: GO 6854
7124: POP
7125: POP
// end ; end ; end ;
7126: PPOPN 16
7128: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7129: LD_EXP 56
7133: PPUSH
7134: CALL 58984 0 1
7138: IFFALSE 7283
7140: GO 7142
7142: DISABLE
7143: LD_INT 0
7145: PPUSH
// begin enable ;
7146: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7147: LD_ADDR_VAR 0 1
7151: PUSH
7152: LD_EXP 56
7156: PPUSH
7157: LD_INT 50
7159: PUSH
7160: EMPTY
7161: LIST
7162: PPUSH
7163: CALL_OW 72
7167: PUSH
7168: FOR_IN
7169: IFFALSE 7281
// begin if not HasTask ( i ) then
7171: LD_VAR 0 1
7175: PPUSH
7176: CALL_OW 314
7180: NOT
7181: IFFALSE 7195
// AddComMoveToArea ( i , khatamArea ) ;
7183: LD_VAR 0 1
7187: PPUSH
7188: LD_INT 11
7190: PPUSH
7191: CALL_OW 173
// if IsInArea ( i , khatamArea ) then
7195: LD_VAR 0 1
7199: PPUSH
7200: LD_INT 11
7202: PPUSH
7203: CALL_OW 308
7207: IFFALSE 7279
// begin RemoveUnit ( i ) ;
7209: LD_VAR 0 1
7213: PPUSH
7214: CALL_OW 64
// arEscapist := arEscapist diff i ;
7218: LD_ADDR_EXP 56
7222: PUSH
7223: LD_EXP 56
7227: PUSH
7228: LD_VAR 0 1
7232: DIFF
7233: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7234: LD_ADDR_EXP 21
7238: PUSH
7239: LD_EXP 21
7243: PPUSH
7244: CALL 96333 0 1
7248: ST_TO_ADDR
// if i = Dietrich then
7249: LD_VAR 0 1
7253: PUSH
7254: LD_EXP 50
7258: EQUAL
7259: IFFALSE 7279
// begin gensherEscaped := true ;
7261: LD_ADDR_EXP 13
7265: PUSH
7266: LD_INT 1
7268: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7269: LD_INT 1
7271: PPUSH
7272: LD_STRING 10_GensherEscape_1
7274: PPUSH
7275: CALL_OW 39
// end ; end ; end ;
7279: GO 7168
7281: POP
7282: POP
// end ;
7283: PPOPN 1
7285: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7286: LD_INT 0
7288: PPUSH
7289: PPUSH
7290: PPUSH
7291: PPUSH
7292: PPUSH
// uc_side := 5 ;
7293: LD_ADDR_OWVAR 20
7297: PUSH
7298: LD_INT 5
7300: ST_TO_ADDR
// uc_nation := nation_arabian ;
7301: LD_ADDR_OWVAR 21
7305: PUSH
7306: LD_INT 2
7308: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7309: LD_ADDR_VAR 0 3
7313: PUSH
7314: LD_INT 5
7316: PUSH
7317: LD_INT 6
7319: PUSH
7320: LD_INT 7
7322: PUSH
7323: LD_INT 8
7325: PUSH
7326: EMPTY
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: PUSH
7332: LD_OWVAR 67
7336: ARRAY
7337: ST_TO_ADDR
// arAttackersInf := [ ] ;
7338: LD_ADDR_EXP 57
7342: PUSH
7343: EMPTY
7344: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7345: LD_ADDR_EXP 58
7349: PUSH
7350: EMPTY
7351: ST_TO_ADDR
// InitHC_All ( ) ;
7352: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7356: LD_ADDR_VAR 0 2
7360: PUSH
7361: DOUBLE
7362: LD_INT 1
7364: DEC
7365: ST_TO_ADDR
7366: LD_INT 3
7368: PUSH
7369: LD_INT 4
7371: PUSH
7372: LD_INT 5
7374: PUSH
7375: LD_INT 6
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: PUSH
7384: LD_OWVAR 67
7388: ARRAY
7389: PUSH
7390: FOR_TO
7391: IFFALSE 7493
// begin PrepareSoldier ( false , skill ) ;
7393: LD_INT 0
7395: PPUSH
7396: LD_VAR 0 3
7400: PPUSH
7401: CALL_OW 381
// un := CreateHuman ;
7405: LD_ADDR_VAR 0 4
7409: PUSH
7410: CALL_OW 44
7414: ST_TO_ADDR
// if i mod 2 = 0 then
7415: LD_VAR 0 2
7419: PUSH
7420: LD_INT 2
7422: MOD
7423: PUSH
7424: LD_INT 0
7426: EQUAL
7427: IFFALSE 7441
// SetClass ( un , class_mortar ) ;
7429: LD_VAR 0 4
7433: PPUSH
7434: LD_INT 8
7436: PPUSH
7437: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7441: LD_VAR 0 4
7445: PPUSH
7446: LD_INT 19
7448: PPUSH
7449: LD_INT 0
7451: PPUSH
7452: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7456: LD_ADDR_EXP 57
7460: PUSH
7461: LD_EXP 57
7465: PPUSH
7466: LD_VAR 0 4
7470: PPUSH
7471: CALL 94960 0 2
7475: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7476: LD_VAR 0 4
7480: PPUSH
7481: LD_INT 104
7483: PPUSH
7484: LD_INT 60
7486: PPUSH
7487: CALL_OW 114
// end ;
7491: GO 7390
7493: POP
7494: POP
// for i := 1 to 3 do
7495: LD_ADDR_VAR 0 2
7499: PUSH
7500: DOUBLE
7501: LD_INT 1
7503: DEC
7504: ST_TO_ADDR
7505: LD_INT 3
7507: PUSH
7508: FOR_TO
7509: IFFALSE 7661
// begin PrepareMechanic ( false , skill ) ;
7511: LD_INT 0
7513: PPUSH
7514: LD_VAR 0 3
7518: PPUSH
7519: CALL_OW 383
// un := CreateHuman ;
7523: LD_ADDR_VAR 0 4
7527: PUSH
7528: CALL_OW 44
7532: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7533: LD_INT 14
7535: PPUSH
7536: LD_INT 1
7538: PPUSH
7539: LD_INT 1
7541: PPUSH
7542: LD_INT 27
7544: PUSH
7545: LD_INT 25
7547: PUSH
7548: EMPTY
7549: LIST
7550: LIST
7551: PUSH
7552: LD_VAR 0 2
7556: PUSH
7557: LD_INT 2
7559: MOD
7560: PUSH
7561: LD_INT 1
7563: PLUS
7564: ARRAY
7565: PPUSH
7566: LD_INT 80
7568: PPUSH
7569: CALL 61780 0 5
// veh := CreateVehicle ;
7573: LD_ADDR_VAR 0 5
7577: PUSH
7578: CALL_OW 45
7582: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7583: LD_VAR 0 5
7587: PPUSH
7588: LD_INT 4
7590: PPUSH
7591: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7595: LD_VAR 0 5
7599: PPUSH
7600: LD_INT 18
7602: PPUSH
7603: LD_INT 0
7605: PPUSH
7606: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7610: LD_VAR 0 4
7614: PPUSH
7615: LD_VAR 0 5
7619: PPUSH
7620: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7624: LD_VAR 0 4
7628: PPUSH
7629: LD_INT 129
7631: PPUSH
7632: LD_INT 20
7634: PPUSH
7635: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7639: LD_ADDR_EXP 58
7643: PUSH
7644: LD_EXP 58
7648: PPUSH
7649: LD_VAR 0 5
7653: PPUSH
7654: CALL 94960 0 2
7658: ST_TO_ADDR
// end ;
7659: GO 7508
7661: POP
7662: POP
// wait ( 0 0$2 ) ;
7663: LD_INT 70
7665: PPUSH
7666: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7670: LD_ADDR_VAR 0 2
7674: PUSH
7675: DOUBLE
7676: LD_INT 1
7678: DEC
7679: ST_TO_ADDR
7680: LD_INT 1
7682: PUSH
7683: LD_INT 2
7685: PUSH
7686: LD_INT 2
7688: PUSH
7689: LD_INT 3
7691: PUSH
7692: EMPTY
7693: LIST
7694: LIST
7695: LIST
7696: LIST
7697: PUSH
7698: LD_OWVAR 67
7702: ARRAY
7703: PUSH
7704: FOR_TO
7705: IFFALSE 7836
// begin PrepareMechanic ( false , skill ) ;
7707: LD_INT 0
7709: PPUSH
7710: LD_VAR 0 3
7714: PPUSH
7715: CALL_OW 383
// un := CreateHuman ;
7719: LD_ADDR_VAR 0 4
7723: PUSH
7724: CALL_OW 44
7728: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7729: LD_INT 14
7731: PPUSH
7732: LD_INT 1
7734: PPUSH
7735: LD_INT 1
7737: PPUSH
7738: LD_INT 26
7740: PPUSH
7741: LD_INT 80
7743: PPUSH
7744: CALL 61780 0 5
// veh := CreateVehicle ;
7748: LD_ADDR_VAR 0 5
7752: PUSH
7753: CALL_OW 45
7757: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7758: LD_VAR 0 5
7762: PPUSH
7763: LD_INT 4
7765: PPUSH
7766: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7770: LD_VAR 0 5
7774: PPUSH
7775: LD_INT 18
7777: PPUSH
7778: LD_INT 0
7780: PPUSH
7781: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7785: LD_VAR 0 4
7789: PPUSH
7790: LD_VAR 0 5
7794: PPUSH
7795: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7799: LD_VAR 0 4
7803: PPUSH
7804: LD_INT 133
7806: PPUSH
7807: LD_INT 40
7809: PPUSH
7810: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7814: LD_ADDR_EXP 58
7818: PUSH
7819: LD_EXP 58
7823: PPUSH
7824: LD_VAR 0 5
7828: PPUSH
7829: CALL 94960 0 2
7833: ST_TO_ADDR
// end ;
7834: GO 7704
7836: POP
7837: POP
// wait ( 0 0$2 ) ;
7838: LD_INT 70
7840: PPUSH
7841: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7845: LD_ADDR_VAR 0 2
7849: PUSH
7850: DOUBLE
7851: LD_INT 1
7853: DEC
7854: ST_TO_ADDR
7855: LD_INT 1
7857: PUSH
7858: LD_INT 2
7860: PUSH
7861: LD_INT 3
7863: PUSH
7864: LD_INT 4
7866: PUSH
7867: EMPTY
7868: LIST
7869: LIST
7870: LIST
7871: LIST
7872: PUSH
7873: LD_OWVAR 67
7877: ARRAY
7878: PUSH
7879: FOR_TO
7880: IFFALSE 8042
// begin PrepareMechanic ( false , skill ) ;
7882: LD_INT 0
7884: PPUSH
7885: LD_VAR 0 3
7889: PPUSH
7890: CALL_OW 383
// un := CreateHuman ;
7894: LD_ADDR_VAR 0 4
7898: PUSH
7899: CALL_OW 44
7903: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7904: LD_INT 14
7906: PPUSH
7907: LD_INT 1
7909: PPUSH
7910: LD_INT 1
7912: PPUSH
7913: LD_INT 28
7915: PPUSH
7916: LD_INT 80
7918: PPUSH
7919: CALL 61780 0 5
// veh := CreateVehicle ;
7923: LD_ADDR_VAR 0 5
7927: PUSH
7928: CALL_OW 45
7932: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7933: LD_VAR 0 5
7937: PPUSH
7938: LD_INT 4
7940: PPUSH
7941: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7945: LD_VAR 0 5
7949: PPUSH
7950: LD_INT 18
7952: PPUSH
7953: LD_INT 0
7955: PPUSH
7956: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7960: LD_VAR 0 4
7964: PPUSH
7965: LD_VAR 0 5
7969: PPUSH
7970: CALL_OW 52
// if i mod 2 = 0 then
7974: LD_VAR 0 2
7978: PUSH
7979: LD_INT 2
7981: MOD
7982: PUSH
7983: LD_INT 0
7985: EQUAL
7986: IFFALSE 8005
// ComMoveXY ( un , 136 , 61 ) else
7988: LD_VAR 0 4
7992: PPUSH
7993: LD_INT 136
7995: PPUSH
7996: LD_INT 61
7998: PPUSH
7999: CALL_OW 111
8003: GO 8020
// ComMoveXY ( un , 137 , 41 ) ;
8005: LD_VAR 0 4
8009: PPUSH
8010: LD_INT 137
8012: PPUSH
8013: LD_INT 41
8015: PPUSH
8016: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
8020: LD_ADDR_EXP 58
8024: PUSH
8025: LD_EXP 58
8029: PPUSH
8030: LD_VAR 0 5
8034: PPUSH
8035: CALL 94960 0 2
8039: ST_TO_ADDR
// end ;
8040: GO 7879
8042: POP
8043: POP
// arabianAttackSpawned := true ;
8044: LD_ADDR_EXP 12
8048: PUSH
8049: LD_INT 1
8051: ST_TO_ADDR
// end ;
8052: LD_VAR 0 1
8056: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
8057: LD_EXP 57
8061: IFFALSE 8478
8063: GO 8065
8065: DISABLE
8066: LD_INT 0
8068: PPUSH
8069: PPUSH
8070: PPUSH
// begin wait ( 0 0$10 ) ;
8071: LD_INT 350
8073: PPUSH
8074: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8078: LD_ADDR_VAR 0 2
8082: PUSH
8083: LD_EXP 57
8087: PPUSH
8088: LD_INT 25
8090: PUSH
8091: LD_INT 1
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: PUSH
8098: LD_INT 50
8100: PUSH
8101: EMPTY
8102: LIST
8103: PUSH
8104: EMPTY
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL_OW 72
8112: ST_TO_ADDR
// for i in tmp do
8113: LD_ADDR_VAR 0 1
8117: PUSH
8118: LD_VAR 0 2
8122: PUSH
8123: FOR_IN
8124: IFFALSE 8249
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8126: LD_ADDR_VAR 0 3
8130: PUSH
8131: LD_INT 22
8133: PUSH
8134: LD_INT 1
8136: PUSH
8137: EMPTY
8138: LIST
8139: LIST
8140: PUSH
8141: LD_INT 3
8143: PUSH
8144: LD_INT 120
8146: PUSH
8147: LD_INT 11
8149: PUSH
8150: EMPTY
8151: LIST
8152: LIST
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 2
8160: PUSH
8161: LD_INT 21
8163: PUSH
8164: LD_INT 2
8166: PUSH
8167: EMPTY
8168: LIST
8169: LIST
8170: PUSH
8171: LD_INT 21
8173: PUSH
8174: LD_INT 3
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PUSH
8181: EMPTY
8182: LIST
8183: LIST
8184: LIST
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: LIST
8190: PPUSH
8191: CALL_OW 69
8195: PPUSH
8196: LD_VAR 0 1
8200: PPUSH
8201: CALL_OW 74
8205: ST_TO_ADDR
// if not nearest then
8206: LD_VAR 0 3
8210: NOT
8211: IFFALSE 8215
// break ;
8213: GO 8249
// SetTag ( nearest , tMined ) ;
8215: LD_VAR 0 3
8219: PPUSH
8220: LD_INT 11
8222: PPUSH
8223: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8227: LD_VAR 0 1
8231: PPUSH
8232: LD_INT 0
8234: PPUSH
8235: LD_INT 0
8237: PPUSH
8238: LD_VAR 0 3
8242: PPUSH
8243: CALL_OW 132
// end ;
8247: GO 8123
8249: POP
8250: POP
// if hasBase and epsilon then
8251: LD_EXP 9
8255: IFFALSE 8263
8257: PUSH
8258: LD_EXP 10
8262: AND
8263: IFFALSE 8287
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8265: LD_VAR 0 2
8269: PPUSH
8270: LD_INT 0
8272: PPUSH
8273: LD_INT 0
8275: PPUSH
8276: LD_EXP 10
8280: PPUSH
8281: CALL_OW 192
8285: GO 8302
// AddComMoveXY ( tmp , 107 , 59 ) ;
8287: LD_VAR 0 2
8291: PPUSH
8292: LD_INT 107
8294: PPUSH
8295: LD_INT 59
8297: PPUSH
8298: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8302: LD_INT 35
8304: PPUSH
8305: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8309: LD_EXP 50
8313: PPUSH
8314: CALL_OW 301
8318: IFTRUE 8326
8320: PUSH
8321: LD_EXP 13
8325: OR
8326: IFFALSE 8302
// if not gensherEscaped then
8328: LD_EXP 13
8332: NOT
8333: IFFALSE 8342
// wait ( 1 1$20 ) ;
8335: LD_INT 2800
8337: PPUSH
8338: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8342: LD_ADDR_VAR 0 2
8346: PUSH
8347: LD_EXP 57
8351: PPUSH
8352: LD_INT 50
8354: PUSH
8355: EMPTY
8356: LIST
8357: PPUSH
8358: CALL_OW 72
8362: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8363: LD_VAR 0 2
8367: PPUSH
8368: LD_INT 143
8370: PPUSH
8371: LD_INT 117
8373: PPUSH
8374: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8378: LD_INT 35
8380: PPUSH
8381: CALL_OW 67
// for i in tmp do
8385: LD_ADDR_VAR 0 1
8389: PUSH
8390: LD_VAR 0 2
8394: PUSH
8395: FOR_IN
8396: IFFALSE 8469
// if IsInArea ( i , arAttackSpawn2Area ) then
8398: LD_VAR 0 1
8402: PPUSH
8403: LD_INT 19
8405: PPUSH
8406: CALL_OW 308
8410: IFFALSE 8455
// begin tmp := tmp diff i ;
8412: LD_ADDR_VAR 0 2
8416: PUSH
8417: LD_VAR 0 2
8421: PUSH
8422: LD_VAR 0 1
8426: DIFF
8427: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8428: LD_ADDR_EXP 57
8432: PUSH
8433: LD_EXP 57
8437: PUSH
8438: LD_VAR 0 1
8442: DIFF
8443: ST_TO_ADDR
// RemoveUnit ( i ) ;
8444: LD_VAR 0 1
8448: PPUSH
8449: CALL_OW 64
// end else
8453: GO 8467
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8455: LD_VAR 0 1
8459: PPUSH
8460: LD_INT 19
8462: PPUSH
8463: CALL_OW 113
8467: GO 8395
8469: POP
8470: POP
// until not tmp ;
8471: LD_VAR 0 2
8475: NOT
8476: IFFALSE 8378
// end ;
8478: PPOPN 3
8480: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , p ;
8481: LD_EXP 58
8485: IFFALSE 8773
8487: GO 8489
8489: DISABLE
8490: LD_INT 0
8492: PPUSH
8493: PPUSH
8494: PPUSH
// begin p := 0 ;
8495: LD_ADDR_VAR 0 3
8499: PUSH
8500: LD_INT 0
8502: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8503: LD_INT 35
8505: PPUSH
8506: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8510: LD_ADDR_VAR 0 2
8514: PUSH
8515: LD_EXP 58
8519: PPUSH
8520: LD_INT 50
8522: PUSH
8523: EMPTY
8524: LIST
8525: PPUSH
8526: CALL_OW 72
8530: ST_TO_ADDR
// for i in tmp do
8531: LD_ADDR_VAR 0 1
8535: PUSH
8536: LD_VAR 0 2
8540: PUSH
8541: FOR_IN
8542: IFFALSE 8579
// AgressiveMove ( i , [ [ 143 , 38 ] , [ 111 , 31 ] ] ) ;
8544: LD_VAR 0 1
8548: PPUSH
8549: LD_INT 143
8551: PUSH
8552: LD_INT 38
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 111
8561: PUSH
8562: LD_INT 31
8564: PUSH
8565: EMPTY
8566: LIST
8567: LIST
8568: PUSH
8569: EMPTY
8570: LIST
8571: LIST
8572: PPUSH
8573: CALL 97726 0 2
8577: GO 8541
8579: POP
8580: POP
// if IsDead ( Dietrich ) then
8581: LD_EXP 50
8585: PPUSH
8586: CALL_OW 301
8590: IFFALSE 8607
// p := Inc ( p ) ;
8592: LD_ADDR_VAR 0 3
8596: PUSH
8597: LD_VAR 0 3
8601: PPUSH
8602: CALL 96333 0 1
8606: ST_TO_ADDR
// until not tmp or gensherEscaped or p > 40 ;
8607: LD_VAR 0 2
8611: NOT
8612: IFTRUE 8620
8614: PUSH
8615: LD_EXP 13
8619: OR
8620: IFTRUE 8632
8622: PUSH
8623: LD_VAR 0 3
8627: PUSH
8628: LD_INT 40
8630: GREATER
8631: OR
8632: IFFALSE 8503
// if not arAttackersVeh then
8634: LD_EXP 58
8638: NOT
8639: IFFALSE 8643
// exit ;
8641: GO 8773
// repeat wait ( 0 0$1 ) ;
8643: LD_INT 35
8645: PPUSH
8646: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8650: LD_ADDR_VAR 0 2
8654: PUSH
8655: LD_EXP 58
8659: PPUSH
8660: LD_INT 50
8662: PUSH
8663: EMPTY
8664: LIST
8665: PPUSH
8666: CALL_OW 72
8670: ST_TO_ADDR
// for i in tmp do
8671: LD_ADDR_VAR 0 1
8675: PUSH
8676: LD_VAR 0 2
8680: PUSH
8681: FOR_IN
8682: IFFALSE 8764
// if IsInArea ( i , arAttackSpawnArea ) then
8684: LD_VAR 0 1
8688: PPUSH
8689: LD_INT 18
8691: PPUSH
8692: CALL_OW 308
8696: IFFALSE 8750
// begin if IsInUnit ( i ) then
8698: LD_VAR 0 1
8702: PPUSH
8703: CALL_OW 310
8707: IFFALSE 8723
// RemoveUnit ( IsInUnit ( i ) ) ;
8709: LD_VAR 0 1
8713: PPUSH
8714: CALL_OW 310
8718: PPUSH
8719: CALL_OW 64
// RemoveUnit ( i ) ;
8723: LD_VAR 0 1
8727: PPUSH
8728: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8732: LD_ADDR_EXP 58
8736: PUSH
8737: LD_EXP 58
8741: PUSH
8742: LD_VAR 0 1
8746: DIFF
8747: ST_TO_ADDR
// end else
8748: GO 8762
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8750: LD_VAR 0 1
8754: PPUSH
8755: LD_INT 18
8757: PPUSH
8758: CALL_OW 113
8762: GO 8681
8764: POP
8765: POP
// until not tmp ;
8766: LD_VAR 0 2
8770: NOT
8771: IFFALSE 8643
// end ; end_of_file
8773: PPOPN 3
8775: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , c , skill , sources ; begin
8776: LD_INT 0
8778: PPUSH
8779: PPUSH
8780: PPUSH
8781: PPUSH
8782: PPUSH
8783: PPUSH
8784: PPUSH
// uc_side := 3 ;
8785: LD_ADDR_OWVAR 20
8789: PUSH
8790: LD_INT 3
8792: ST_TO_ADDR
// uc_nation := nation_russian ;
8793: LD_ADDR_OWVAR 21
8797: PUSH
8798: LD_INT 3
8800: ST_TO_ADDR
// ruForces := [ ] ;
8801: LD_ADDR_EXP 59
8805: PUSH
8806: EMPTY
8807: ST_TO_ADDR
// ruForces2 := [ ] ;
8808: LD_ADDR_EXP 60
8812: PUSH
8813: EMPTY
8814: ST_TO_ADDR
// ruMech := [ ] ;
8815: LD_ADDR_EXP 63
8819: PUSH
8820: EMPTY
8821: ST_TO_ADDR
// ruMech2 := [ ] ;
8822: LD_ADDR_EXP 64
8826: PUSH
8827: EMPTY
8828: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8829: LD_ADDR_EXP 65
8833: PUSH
8834: LD_INT 37
8836: PUSH
8837: LD_INT 63
8839: PUSH
8840: LD_INT 52
8842: PUSH
8843: LD_INT 54
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: LIST
8850: LIST
8851: ST_TO_ADDR
// ruBaseArea := 0 ;
8852: LD_ADDR_EXP 66
8856: PUSH
8857: LD_INT 0
8859: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8860: LD_ADDR_EXP 67
8864: PUSH
8865: LD_INT 0
8867: ST_TO_ADDR
// ruBase := 0 ;
8868: LD_ADDR_EXP 68
8872: PUSH
8873: LD_INT 0
8875: ST_TO_ADDR
// ruBase2 := 0 ;
8876: LD_ADDR_EXP 69
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// ruConstructList := [ ] ;
8884: LD_ADDR_EXP 70
8888: PUSH
8889: EMPTY
8890: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8891: LD_ADDR_EXP 71
8895: PUSH
8896: LD_INT 22
8898: PUSH
8899: LD_INT 3
8901: PUSH
8902: LD_INT 1
8904: PUSH
8905: LD_INT 43
8907: PUSH
8908: LD_INT 44
8910: PUSH
8911: LD_INT 45
8913: PUSH
8914: EMPTY
8915: LIST
8916: LIST
8917: LIST
8918: PUSH
8919: LD_INT 1
8921: PPUSH
8922: LD_INT 3
8924: PPUSH
8925: CALL_OW 12
8929: ARRAY
8930: PUSH
8931: EMPTY
8932: LIST
8933: LIST
8934: LIST
8935: LIST
8936: PUSH
8937: LD_INT 22
8939: PUSH
8940: LD_INT 3
8942: PUSH
8943: LD_INT 1
8945: PUSH
8946: LD_INT 43
8948: PUSH
8949: LD_INT 44
8951: PUSH
8952: LD_INT 45
8954: PUSH
8955: EMPTY
8956: LIST
8957: LIST
8958: LIST
8959: PUSH
8960: LD_INT 1
8962: PPUSH
8963: LD_INT 3
8965: PPUSH
8966: CALL_OW 12
8970: ARRAY
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 22
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: LD_INT 1
8986: PUSH
8987: LD_INT 43
8989: PUSH
8990: LD_INT 44
8992: PUSH
8993: LD_INT 45
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: LIST
9000: PUSH
9001: LD_INT 1
9003: PPUSH
9004: LD_INT 3
9006: PPUSH
9007: CALL_OW 12
9011: ARRAY
9012: PUSH
9013: EMPTY
9014: LIST
9015: LIST
9016: LIST
9017: LIST
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: ST_TO_ADDR
// ruCratesArea := 0 ;
9024: LD_ADDR_EXP 72
9028: PUSH
9029: LD_INT 0
9031: ST_TO_ADDR
// ruCratesArea2 := 0 ;
9032: LD_ADDR_EXP 73
9036: PUSH
9037: LD_INT 0
9039: ST_TO_ADDR
// ruHealPoint := [ ] ;
9040: LD_ADDR_EXP 74
9044: PUSH
9045: EMPTY
9046: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
9047: LD_ADDR_EXP 75
9051: PUSH
9052: EMPTY
9053: ST_TO_ADDR
// ruBuildings := [ ] ;
9054: LD_ADDR_EXP 76
9058: PUSH
9059: EMPTY
9060: ST_TO_ADDR
// ruBuildings2 := [ ] ;
9061: LD_ADDR_EXP 77
9065: PUSH
9066: EMPTY
9067: ST_TO_ADDR
// ruTanks := [ ] ;
9068: LD_ADDR_EXP 79
9072: PUSH
9073: EMPTY
9074: ST_TO_ADDR
// ruTanks2 := [ ] ;
9075: LD_ADDR_EXP 80
9079: PUSH
9080: EMPTY
9081: ST_TO_ADDR
// ruParkingArea := 0 ;
9082: LD_ADDR_EXP 82
9086: PUSH
9087: LD_INT 0
9089: ST_TO_ADDR
// ruParkingArea2 := 0 ;
9090: LD_ADDR_EXP 83
9094: PUSH
9095: LD_INT 0
9097: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
9098: LD_ADDR_VAR 0 2
9102: PUSH
9103: DOUBLE
9104: LD_INT 1
9106: DEC
9107: ST_TO_ADDR
9108: LD_INT 2
9110: PUSH
9111: LD_INT 3
9113: PUSH
9114: LD_INT 4
9116: PUSH
9117: LD_INT 4
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: LD_OWVAR 67
9130: ARRAY
9131: PUSH
9132: FOR_TO
9133: IFFALSE 9193
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9135: LD_ADDR_EXP 70
9139: PUSH
9140: LD_EXP 70
9144: PPUSH
9145: LD_INT 22
9147: PUSH
9148: LD_INT 3
9150: PUSH
9151: LD_INT 1
9153: PUSH
9154: LD_INT 43
9156: PUSH
9157: LD_INT 44
9159: PUSH
9160: LD_INT 45
9162: PUSH
9163: EMPTY
9164: LIST
9165: LIST
9166: LIST
9167: PUSH
9168: LD_INT 1
9170: PPUSH
9171: LD_INT 3
9173: PPUSH
9174: CALL_OW 12
9178: ARRAY
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: PPUSH
9186: CALL 94960 0 2
9190: ST_TO_ADDR
9191: GO 9132
9193: POP
9194: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9195: LD_ADDR_VAR 0 7
9199: PUSH
9200: LD_INT 43
9202: PUSH
9203: LD_INT 68
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: PUSH
9210: LD_INT 43
9212: PUSH
9213: LD_INT 79
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: PUSH
9220: LD_INT 99
9222: PUSH
9223: LD_INT 114
9225: PUSH
9226: EMPTY
9227: LIST
9228: LIST
9229: PUSH
9230: LD_INT 103
9232: PUSH
9233: LD_INT 114
9235: PUSH
9236: EMPTY
9237: LIST
9238: LIST
9239: PUSH
9240: LD_INT 156
9242: PUSH
9243: LD_INT 92
9245: PUSH
9246: EMPTY
9247: LIST
9248: LIST
9249: PUSH
9250: LD_INT 152
9252: PUSH
9253: LD_INT 85
9255: PUSH
9256: EMPTY
9257: LIST
9258: LIST
9259: PUSH
9260: EMPTY
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: ST_TO_ADDR
// for i in sources do
9268: LD_ADDR_VAR 0 2
9272: PUSH
9273: LD_VAR 0 7
9277: PUSH
9278: FOR_IN
9279: IFFALSE 9308
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9281: LD_VAR 0 2
9285: PUSH
9286: LD_INT 1
9288: ARRAY
9289: PPUSH
9290: LD_VAR 0 2
9294: PUSH
9295: LD_INT 2
9297: ARRAY
9298: PPUSH
9299: LD_INT 3
9301: PPUSH
9302: CALL_OW 441
9306: GO 9278
9308: POP
9309: POP
// if Difficulty > 2 then
9310: LD_OWVAR 67
9314: PUSH
9315: LD_INT 2
9317: GREATER
9318: IFFALSE 9346
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9320: LD_INT 52
9322: PPUSH
9323: LD_INT 6
9325: PPUSH
9326: LD_INT 2
9328: PPUSH
9329: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9333: LD_INT 58
9335: PPUSH
9336: LD_INT 6
9338: PPUSH
9339: LD_INT 2
9341: PPUSH
9342: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 9 ] [ Difficulty ] ;
9346: LD_ADDR_VAR 0 6
9350: PUSH
9351: LD_INT 5
9353: PUSH
9354: LD_INT 6
9356: PUSH
9357: LD_INT 7
9359: PUSH
9360: LD_INT 9
9362: PUSH
9363: EMPTY
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: PUSH
9369: LD_OWVAR 67
9373: ARRAY
9374: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9375: LD_ADDR_EXP 61
9379: PUSH
9380: LD_STRING Tsaritsyn
9382: PPUSH
9383: LD_INT 0
9385: PPUSH
9386: LD_STRING 
9388: PPUSH
9389: CALL 56760 0 3
9393: ST_TO_ADDR
// c := 0 ;
9394: LD_ADDR_VAR 0 5
9398: PUSH
9399: LD_INT 0
9401: ST_TO_ADDR
// for i := 1 to 4 do
9402: LD_ADDR_VAR 0 2
9406: PUSH
9407: DOUBLE
9408: LD_INT 1
9410: DEC
9411: ST_TO_ADDR
9412: LD_INT 4
9414: PUSH
9415: FOR_TO
9416: IFFALSE 9649
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9418: LD_ADDR_VAR 0 3
9422: PUSH
9423: DOUBLE
9424: LD_INT 1
9426: DEC
9427: ST_TO_ADDR
9428: LD_INT 5
9430: PUSH
9431: LD_INT 6
9433: PUSH
9434: LD_INT 8
9436: PUSH
9437: LD_INT 9
9439: PUSH
9440: EMPTY
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: PUSH
9446: LD_OWVAR 67
9450: ARRAY
9451: PUSH
9452: LD_INT 3
9454: PUSH
9455: LD_INT 4
9457: PUSH
9458: LD_INT 5
9460: PUSH
9461: LD_INT 6
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: PUSH
9470: LD_OWVAR 67
9474: ARRAY
9475: PUSH
9476: LD_INT 3
9478: PUSH
9479: LD_INT 4
9481: PUSH
9482: LD_INT 5
9484: PUSH
9485: LD_INT 6
9487: PUSH
9488: EMPTY
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: LD_OWVAR 67
9498: ARRAY
9499: PUSH
9500: LD_INT 2
9502: PUSH
9503: LD_INT 3
9505: PUSH
9506: LD_INT 3
9508: PUSH
9509: LD_INT 3
9511: PUSH
9512: EMPTY
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: PUSH
9518: LD_OWVAR 67
9522: ARRAY
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: PUSH
9530: LD_VAR 0 2
9534: ARRAY
9535: PUSH
9536: FOR_TO
9537: IFFALSE 9645
// begin c := Inc ( c ) ;
9539: LD_ADDR_VAR 0 5
9543: PUSH
9544: LD_VAR 0 5
9548: PPUSH
9549: CALL 96333 0 1
9553: ST_TO_ADDR
// PrepareHuman ( false , i , skill ) ;
9554: LD_INT 0
9556: PPUSH
9557: LD_VAR 0 2
9561: PPUSH
9562: LD_VAR 0 6
9566: PPUSH
9567: CALL_OW 380
// un := CreateHuman ;
9571: LD_ADDR_VAR 0 4
9575: PUSH
9576: CALL_OW 44
9580: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9581: LD_ADDR_EXP 59
9585: PUSH
9586: LD_EXP 59
9590: PPUSH
9591: LD_VAR 0 4
9595: PPUSH
9596: CALL 94960 0 2
9600: ST_TO_ADDR
// if i = 3 then
9601: LD_VAR 0 2
9605: PUSH
9606: LD_INT 3
9608: EQUAL
9609: IFFALSE 9643
// begin ruMech := Join ( ruMech , un ) ;
9611: LD_ADDR_EXP 63
9615: PUSH
9616: LD_EXP 63
9620: PPUSH
9621: LD_VAR 0 4
9625: PPUSH
9626: CALL 94960 0 2
9630: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9631: LD_VAR 0 4
9635: PPUSH
9636: LD_INT 1
9638: PPUSH
9639: CALL_OW 336
// end ; end ;
9643: GO 9536
9645: POP
9646: POP
9647: GO 9415
9649: POP
9650: POP
// if Difficulty < 4 then
9651: LD_OWVAR 67
9655: PUSH
9656: LD_INT 4
9658: LESS
9659: IFFALSE 9663
// exit ;
9661: GO 9935
// PrepareSoldier ( sex_male , skill + 1 ) ;
9663: LD_INT 1
9665: PPUSH
9666: LD_VAR 0 6
9670: PUSH
9671: LD_INT 1
9673: PLUS
9674: PPUSH
9675: CALL_OW 381
// hc_importance := 100 ;
9679: LD_ADDR_OWVAR 32
9683: PUSH
9684: LD_INT 100
9686: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9687: LD_ADDR_EXP 62
9691: PUSH
9692: CALL_OW 44
9696: ST_TO_ADDR
// InitHc_All ( ) ;
9697: CALL_OW 584
// for i := 1 to 4 do
9701: LD_ADDR_VAR 0 2
9705: PUSH
9706: DOUBLE
9707: LD_INT 1
9709: DEC
9710: ST_TO_ADDR
9711: LD_INT 4
9713: PUSH
9714: FOR_TO
9715: IFFALSE 9933
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9717: LD_ADDR_VAR 0 3
9721: PUSH
9722: DOUBLE
9723: LD_INT 1
9725: DEC
9726: ST_TO_ADDR
9727: LD_INT 5
9729: PUSH
9730: LD_INT 6
9732: PUSH
9733: LD_INT 8
9735: PUSH
9736: LD_INT 9
9738: PUSH
9739: EMPTY
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: PUSH
9745: LD_OWVAR 67
9749: ARRAY
9750: PUSH
9751: LD_INT 3
9753: PUSH
9754: LD_INT 4
9756: PUSH
9757: LD_INT 5
9759: PUSH
9760: LD_INT 6
9762: PUSH
9763: EMPTY
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: PUSH
9769: LD_OWVAR 67
9773: ARRAY
9774: PUSH
9775: LD_INT 3
9777: PUSH
9778: LD_INT 4
9780: PUSH
9781: LD_INT 5
9783: PUSH
9784: LD_INT 6
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: PUSH
9793: LD_OWVAR 67
9797: ARRAY
9798: PUSH
9799: LD_INT 2
9801: PUSH
9802: LD_INT 3
9804: PUSH
9805: LD_INT 3
9807: PUSH
9808: LD_INT 3
9810: PUSH
9811: EMPTY
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: PUSH
9817: LD_OWVAR 67
9821: ARRAY
9822: PUSH
9823: EMPTY
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: PUSH
9829: LD_VAR 0 2
9833: ARRAY
9834: PUSH
9835: FOR_TO
9836: IFFALSE 9929
// begin PrepareHuman ( false , i , skill ) ;
9838: LD_INT 0
9840: PPUSH
9841: LD_VAR 0 2
9845: PPUSH
9846: LD_VAR 0 6
9850: PPUSH
9851: CALL_OW 380
// un := CreateHuman ;
9855: LD_ADDR_VAR 0 4
9859: PUSH
9860: CALL_OW 44
9864: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9865: LD_ADDR_EXP 60
9869: PUSH
9870: LD_EXP 60
9874: PPUSH
9875: LD_VAR 0 4
9879: PPUSH
9880: CALL 94960 0 2
9884: ST_TO_ADDR
// if i = 3 then
9885: LD_VAR 0 2
9889: PUSH
9890: LD_INT 3
9892: EQUAL
9893: IFFALSE 9927
// begin ruMech2 := Join ( ruMech2 , un ) ;
9895: LD_ADDR_EXP 64
9899: PUSH
9900: LD_EXP 64
9904: PPUSH
9905: LD_VAR 0 4
9909: PPUSH
9910: CALL 94960 0 2
9914: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9915: LD_VAR 0 4
9919: PPUSH
9920: LD_INT 1
9922: PPUSH
9923: CALL_OW 336
// end ; end ;
9927: GO 9835
9929: POP
9930: POP
9931: GO 9714
9933: POP
9934: POP
// end ;
9935: LD_VAR 0 1
9939: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9940: LD_EXP 66
9944: PPUSH
9945: LD_INT 30
9947: PUSH
9948: LD_INT 3
9950: PUSH
9951: EMPTY
9952: LIST
9953: LIST
9954: PUSH
9955: LD_INT 50
9957: PUSH
9958: EMPTY
9959: LIST
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: PPUSH
9965: CALL_OW 70
9969: IFFALSE 9986
9971: PUSH
9972: LD_EXP 76
9976: PPUSH
9977: CALL 58984 0 1
9981: PUSH
9982: LD_INT 3
9984: LESS
9985: AND
9986: IFFALSE 10250
9988: GO 9990
9990: DISABLE
9991: LD_INT 0
9993: PPUSH
// begin enable ;
9994: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9995: LD_ADDR_EXP 70
9999: PUSH
10000: LD_EXP 70
10004: PUSH
10005: LD_INT 22
10007: PUSH
10008: LD_INT 22
10010: PUSH
10011: LD_INT 24
10013: PUSH
10014: LD_INT 24
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: PUSH
10023: LD_OWVAR 67
10027: ARRAY
10028: PUSH
10029: LD_INT 1
10031: PUSH
10032: LD_INT 3
10034: PUSH
10035: LD_INT 44
10037: PUSH
10038: LD_INT 45
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: LD_INT 1
10047: PPUSH
10048: LD_INT 2
10050: PPUSH
10051: CALL_OW 12
10055: ARRAY
10056: PUSH
10057: EMPTY
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 22
10065: PUSH
10066: LD_INT 22
10068: PUSH
10069: LD_INT 24
10071: PUSH
10072: LD_INT 24
10074: PUSH
10075: EMPTY
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: PUSH
10081: LD_OWVAR 67
10085: ARRAY
10086: PUSH
10087: LD_INT 1
10089: PUSH
10090: LD_INT 3
10092: PUSH
10093: LD_INT 45
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: PUSH
10102: LD_INT 22
10104: PUSH
10105: LD_INT 22
10107: PUSH
10108: LD_INT 24
10110: PUSH
10111: LD_INT 24
10113: PUSH
10114: EMPTY
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: PUSH
10120: LD_OWVAR 67
10124: ARRAY
10125: PUSH
10126: LD_INT 1
10128: PUSH
10129: LD_INT 3
10131: PUSH
10132: LD_INT 45
10134: PUSH
10135: EMPTY
10136: LIST
10137: LIST
10138: LIST
10139: LIST
10140: PUSH
10141: EMPTY
10142: LIST
10143: LIST
10144: LIST
10145: ADD
10146: ST_TO_ADDR
// for i := Difficulty downto 1 do
10147: LD_ADDR_VAR 0 1
10151: PUSH
10152: DOUBLE
10153: LD_OWVAR 67
10157: INC
10158: ST_TO_ADDR
10159: LD_INT 1
10161: PUSH
10162: FOR_DOWNTO
10163: IFFALSE 10248
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10165: LD_ADDR_EXP 70
10169: PUSH
10170: LD_EXP 70
10174: PPUSH
10175: LD_INT 22
10177: PUSH
10178: LD_INT 22
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: LD_INT 24
10186: PUSH
10187: EMPTY
10188: LIST
10189: LIST
10190: LIST
10191: LIST
10192: PUSH
10193: LD_OWVAR 67
10197: ARRAY
10198: PUSH
10199: LD_INT 1
10201: PUSH
10202: LD_INT 3
10204: PUSH
10205: LD_INT 44
10207: PUSH
10208: LD_INT 45
10210: PUSH
10211: LD_INT 45
10213: PUSH
10214: LD_INT 43
10216: PUSH
10217: EMPTY
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: PUSH
10223: LD_INT 1
10225: PPUSH
10226: LD_INT 4
10228: PPUSH
10229: CALL_OW 12
10233: ARRAY
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: PPUSH
10241: CALL 94960 0 2
10245: ST_TO_ADDR
10246: GO 10162
10248: POP
10249: POP
// end ;
10250: PPOPN 1
10252: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10253: LD_EXP 67
10257: PPUSH
10258: LD_INT 30
10260: PUSH
10261: LD_INT 3
10263: PUSH
10264: EMPTY
10265: LIST
10266: LIST
10267: PUSH
10268: LD_INT 50
10270: PUSH
10271: EMPTY
10272: LIST
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 70
10282: IFFALSE 10299
10284: PUSH
10285: LD_EXP 77
10289: PPUSH
10290: CALL 58984 0 1
10294: PUSH
10295: LD_INT 3
10297: LESS
10298: AND
10299: IFFALSE 10494
10301: GO 10303
10303: DISABLE
// begin enable ;
10304: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10305: LD_ADDR_EXP 71
10309: PUSH
10310: LD_EXP 71
10314: PUSH
10315: LD_INT 22
10317: PUSH
10318: LD_INT 22
10320: PUSH
10321: LD_INT 24
10323: PUSH
10324: LD_INT 24
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: LIST
10331: LIST
10332: PUSH
10333: LD_INT 1
10335: PPUSH
10336: LD_INT 4
10338: PPUSH
10339: CALL_OW 12
10343: ARRAY
10344: PUSH
10345: LD_INT 1
10347: PUSH
10348: LD_INT 3
10350: PUSH
10351: LD_INT 44
10353: PUSH
10354: LD_INT 45
10356: PUSH
10357: EMPTY
10358: LIST
10359: LIST
10360: PUSH
10361: LD_INT 1
10363: PPUSH
10364: LD_INT 2
10366: PPUSH
10367: CALL_OW 12
10371: ARRAY
10372: PUSH
10373: EMPTY
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 22
10381: PUSH
10382: LD_INT 22
10384: PUSH
10385: LD_INT 24
10387: PUSH
10388: LD_INT 24
10390: PUSH
10391: EMPTY
10392: LIST
10393: LIST
10394: LIST
10395: LIST
10396: PUSH
10397: LD_INT 1
10399: PPUSH
10400: LD_INT 4
10402: PPUSH
10403: CALL_OW 12
10407: ARRAY
10408: PUSH
10409: LD_INT 1
10411: PUSH
10412: LD_INT 3
10414: PUSH
10415: LD_INT 45
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: PUSH
10424: LD_INT 22
10426: PUSH
10427: LD_INT 22
10429: PUSH
10430: LD_INT 24
10432: PUSH
10433: LD_INT 24
10435: PUSH
10436: EMPTY
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 1
10444: PPUSH
10445: LD_INT 4
10447: PPUSH
10448: CALL_OW 12
10452: ARRAY
10453: PUSH
10454: LD_INT 1
10456: PUSH
10457: LD_INT 3
10459: PUSH
10460: LD_INT 45
10462: PUSH
10463: EMPTY
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_INT 1
10474: PUSH
10475: LD_INT 3
10477: PUSH
10478: LD_INT 43
10480: PUSH
10481: EMPTY
10482: LIST
10483: LIST
10484: LIST
10485: LIST
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: ADD
10493: ST_TO_ADDR
// end ;
10494: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10495: LD_INT 0
10497: PPUSH
10498: PPUSH
10499: PPUSH
10500: PPUSH
10501: PPUSH
10502: PPUSH
10503: PPUSH
10504: PPUSH
// case Difficulty of 1 :
10505: LD_OWVAR 67
10509: PUSH
10510: LD_INT 1
10512: DOUBLE
10513: EQUAL
10514: IFTRUE 10518
10516: GO 10537
10518: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10519: LD_ADDR_VAR 0 4
10523: PUSH
10524: LD_INT 1
10526: PPUSH
10527: LD_INT 2
10529: PPUSH
10530: CALL_OW 12
10534: ST_TO_ADDR
10535: GO 10611
10537: LD_INT 2
10539: DOUBLE
10540: EQUAL
10541: IFTRUE 10545
10543: GO 10564
10545: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10546: LD_ADDR_VAR 0 4
10550: PUSH
10551: LD_INT 1
10553: PPUSH
10554: LD_INT 3
10556: PPUSH
10557: CALL_OW 12
10561: ST_TO_ADDR
10562: GO 10611
10564: LD_INT 3
10566: DOUBLE
10567: EQUAL
10568: IFTRUE 10572
10570: GO 10591
10572: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10573: LD_ADDR_VAR 0 4
10577: PUSH
10578: LD_INT 2
10580: PPUSH
10581: LD_INT 3
10583: PPUSH
10584: CALL_OW 12
10588: ST_TO_ADDR
10589: GO 10611
10591: LD_INT 4
10593: DOUBLE
10594: EQUAL
10595: IFTRUE 10599
10597: GO 10610
10599: POP
// spawn := 3 ; end ;
10600: LD_ADDR_VAR 0 4
10604: PUSH
10605: LD_INT 3
10607: ST_TO_ADDR
10608: GO 10611
10610: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10611: LD_ADDR_VAR 0 6
10615: PUSH
10616: LD_INT 24
10618: PUSH
10619: LD_INT 25
10621: PUSH
10622: LD_INT 23
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: LIST
10629: PUSH
10630: LD_VAR 0 4
10634: ARRAY
10635: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10636: LD_ADDR_VAR 0 5
10640: PUSH
10641: LD_INT 21
10643: PUSH
10644: LD_INT 22
10646: PUSH
10647: LD_INT 20
10649: PUSH
10650: EMPTY
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: LD_VAR 0 4
10659: ARRAY
10660: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10661: LD_ADDR_VAR 0 8
10665: PUSH
10666: LD_INT 96
10668: PUSH
10669: LD_INT 102
10671: PUSH
10672: EMPTY
10673: LIST
10674: LIST
10675: PUSH
10676: LD_INT 54
10678: PUSH
10679: LD_INT 85
10681: PUSH
10682: EMPTY
10683: LIST
10684: LIST
10685: PUSH
10686: LD_INT 146
10688: PUSH
10689: LD_INT 67
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: PUSH
10696: EMPTY
10697: LIST
10698: LIST
10699: LIST
10700: PUSH
10701: LD_VAR 0 4
10705: ARRAY
10706: ST_TO_ADDR
// for i in ruForces union ruCommander do
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_EXP 59
10716: PUSH
10717: LD_EXP 61
10721: UNION
10722: PUSH
10723: FOR_IN
10724: IFFALSE 10788
// begin repeat wait ( 0 0$1 ) ;
10726: LD_INT 35
10728: PPUSH
10729: CALL_OW 67
// until PlaceUnitArea ( i , area , false ) ;
10733: LD_VAR 0 2
10737: PPUSH
10738: LD_VAR 0 5
10742: PPUSH
10743: LD_INT 0
10745: PPUSH
10746: CALL_OW 49
10750: IFFALSE 10726
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10752: LD_VAR 0 2
10756: PPUSH
10757: LD_VAR 0 8
10761: PUSH
10762: LD_INT 1
10764: ARRAY
10765: PPUSH
10766: LD_VAR 0 8
10770: PUSH
10771: LD_INT 2
10773: ARRAY
10774: PPUSH
10775: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10779: LD_INT 14
10781: PPUSH
10782: CALL_OW 67
// end ;
10786: GO 10723
10788: POP
10789: POP
// DRussianConvoy ;
10790: CALL 28752 0 0
// spawnedRussians := true ;
10794: LD_ADDR_EXP 19
10798: PUSH
10799: LD_INT 1
10801: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10802: LD_INT 1
10804: PPUSH
10805: LD_VAR 0 6
10809: PPUSH
10810: CALL_OW 332
// case spawn of 1 :
10814: LD_VAR 0 4
10818: PUSH
10819: LD_INT 1
10821: DOUBLE
10822: EQUAL
10823: IFTRUE 10827
10825: GO 10837
10827: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10828: LD_INT 102
10830: PPUSH
10831: CALL_OW 427
10835: GO 10874
10837: LD_INT 2
10839: DOUBLE
10840: EQUAL
10841: IFTRUE 10845
10843: GO 10855
10845: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10846: LD_INT 103
10848: PPUSH
10849: CALL_OW 427
10853: GO 10874
10855: LD_INT 3
10857: DOUBLE
10858: EQUAL
10859: IFTRUE 10863
10861: GO 10873
10863: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10864: LD_INT 104
10866: PPUSH
10867: CALL_OW 427
10871: GO 10874
10873: POP
// if Difficulty < 4 then
10874: LD_OWVAR 67
10878: PUSH
10879: LD_INT 4
10881: LESS
10882: IFFALSE 10886
// exit ;
10884: GO 10972
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10886: LD_INT 1
10888: PPUSH
10889: LD_INT 22
10891: PPUSH
10892: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10896: LD_ADDR_VAR 0 2
10900: PUSH
10901: LD_EXP 60
10905: PUSH
10906: LD_EXP 62
10910: UNION
10911: PUSH
10912: FOR_IN
10913: IFFALSE 10963
// begin repeat wait ( 0 0$1 ) ;
10915: LD_INT 35
10917: PPUSH
10918: CALL_OW 67
// until PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10922: LD_VAR 0 2
10926: PPUSH
10927: LD_INT 22
10929: PPUSH
10930: LD_INT 0
10932: PPUSH
10933: CALL_OW 49
10937: IFFALSE 10915
// ComAgressiveMove ( i , 54 , 85 ) ;
10939: LD_VAR 0 2
10943: PPUSH
10944: LD_INT 54
10946: PPUSH
10947: LD_INT 85
10949: PPUSH
10950: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10954: LD_INT 28
10956: PPUSH
10957: CALL_OW 67
// end ;
10961: GO 10912
10963: POP
10964: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10965: LD_INT 105
10967: PPUSH
10968: CALL_OW 427
// end ;
10972: LD_VAR 0 1
10976: RET
// export function RussianBase ( group , option ) ; begin
10977: LD_INT 0
10979: PPUSH
// case option of 1 :
10980: LD_VAR 0 2
10984: PUSH
10985: LD_INT 1
10987: DOUBLE
10988: EQUAL
10989: IFTRUE 10993
10991: GO 11449
10993: POP
// begin ruBaseArea := ruBaseCenterArea ;
10994: LD_ADDR_EXP 66
10998: PUSH
10999: LD_INT 26
11001: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
11002: LD_ADDR_EXP 72
11006: PUSH
11007: LD_INT 26
11009: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
11010: LD_ADDR_EXP 76
11014: PUSH
11015: LD_INT 0
11017: PUSH
11018: LD_INT 104
11020: PUSH
11021: LD_INT 110
11023: PUSH
11024: LD_INT 5
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: PUSH
11033: LD_INT 4
11035: PUSH
11036: LD_INT 98
11038: PUSH
11039: LD_INT 90
11041: PUSH
11042: LD_INT 3
11044: PUSH
11045: EMPTY
11046: LIST
11047: LIST
11048: LIST
11049: LIST
11050: PUSH
11051: LD_INT 29
11053: PUSH
11054: LD_INT 103
11056: PUSH
11057: LD_INT 114
11059: PUSH
11060: LD_INT 2
11062: PUSH
11063: EMPTY
11064: LIST
11065: LIST
11066: LIST
11067: LIST
11068: PUSH
11069: LD_INT 30
11071: PUSH
11072: LD_INT 99
11074: PUSH
11075: LD_INT 114
11077: PUSH
11078: LD_INT 3
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: PUSH
11087: LD_INT 28
11089: PUSH
11090: LD_INT 100
11092: PUSH
11093: LD_INT 112
11095: PUSH
11096: LD_INT 1
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: PUSH
11105: LD_INT 2
11107: PUSH
11108: LD_INT 92
11110: PUSH
11111: LD_INT 101
11113: PUSH
11114: LD_INT 0
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: PUSH
11123: LD_INT 26
11125: PUSH
11126: LD_INT 97
11128: PUSH
11129: LD_INT 116
11131: PUSH
11132: LD_INT 5
11134: PUSH
11135: EMPTY
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: PUSH
11141: LD_INT 17
11143: PUSH
11144: LD_INT 96
11146: PUSH
11147: LD_INT 101
11149: PUSH
11150: LD_INT 4
11152: PUSH
11153: EMPTY
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 18
11161: PUSH
11162: LD_INT 88
11164: PUSH
11165: LD_INT 97
11167: PUSH
11168: LD_INT 2
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: LIST
11175: LIST
11176: PUSH
11177: LD_INT 26
11179: PUSH
11180: LD_INT 106
11182: PUSH
11183: LD_INT 92
11185: PUSH
11186: LD_INT 2
11188: PUSH
11189: EMPTY
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: PUSH
11195: LD_INT 6
11197: PUSH
11198: LD_INT 93
11200: PUSH
11201: LD_INT 110
11203: PUSH
11204: LD_INT 0
11206: PUSH
11207: EMPTY
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: PUSH
11213: LD_INT 21
11215: PUSH
11216: LD_INT 89
11218: PUSH
11219: LD_INT 101
11221: PUSH
11222: LD_INT 1
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: PUSH
11231: LD_INT 16
11233: PUSH
11234: LD_INT 95
11236: PUSH
11237: LD_INT 104
11239: PUSH
11240: LD_INT 4
11242: PUSH
11243: EMPTY
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: PUSH
11249: LD_INT 24
11251: PUSH
11252: LD_INT 92
11254: PUSH
11255: LD_INT 105
11257: PUSH
11258: LD_INT 0
11260: PUSH
11261: EMPTY
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 33
11269: PUSH
11270: LD_INT 88
11272: PUSH
11273: LD_INT 89
11275: PUSH
11276: LD_INT 2
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: PUSH
11285: LD_INT 33
11287: PUSH
11288: LD_INT 86
11290: PUSH
11291: LD_INT 90
11293: PUSH
11294: LD_INT 2
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: PUSH
11303: LD_INT 33
11305: PUSH
11306: LD_INT 85
11308: PUSH
11309: LD_INT 99
11311: PUSH
11312: LD_INT 2
11314: PUSH
11315: EMPTY
11316: LIST
11317: LIST
11318: LIST
11319: LIST
11320: PUSH
11321: LD_INT 33
11323: PUSH
11324: LD_INT 85
11326: PUSH
11327: LD_INT 107
11329: PUSH
11330: LD_INT 1
11332: PUSH
11333: EMPTY
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: PUSH
11339: LD_INT 33
11341: PUSH
11342: LD_INT 105
11344: PUSH
11345: LD_INT 99
11347: PUSH
11348: LD_INT 1
11350: PUSH
11351: EMPTY
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: PUSH
11357: LD_INT 33
11359: PUSH
11360: LD_INT 102
11362: PUSH
11363: LD_INT 92
11365: PUSH
11366: LD_INT 3
11368: PUSH
11369: EMPTY
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 33
11377: PUSH
11378: LD_INT 105
11380: PUSH
11381: LD_INT 92
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: EMPTY
11388: LIST
11389: LIST
11390: LIST
11391: LIST
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: LIST
11402: LIST
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11416: LD_ADDR_EXP 74
11420: PUSH
11421: LD_INT 98
11423: PUSH
11424: LD_INT 107
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11431: LD_ADDR_EXP 82
11435: PUSH
11436: LD_INT 30
11438: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11439: LD_ADDR_EXP 84
11443: PUSH
11444: LD_INT 36
11446: ST_TO_ADDR
// end ; 2 :
11447: GO 12473
11449: LD_INT 2
11451: DOUBLE
11452: EQUAL
11453: IFTRUE 11457
11455: GO 11951
11457: POP
// begin ruBaseArea := ruBaseWestArea ;
11458: LD_ADDR_EXP 66
11462: PUSH
11463: LD_INT 28
11465: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11466: LD_ADDR_EXP 72
11470: PUSH
11471: LD_INT 28
11473: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11474: LD_ADDR_EXP 76
11478: PUSH
11479: LD_INT 0
11481: PUSH
11482: LD_INT 49
11484: PUSH
11485: LD_INT 74
11487: PUSH
11488: LD_INT 3
11490: PUSH
11491: EMPTY
11492: LIST
11493: LIST
11494: LIST
11495: LIST
11496: PUSH
11497: LD_INT 4
11499: PUSH
11500: LD_INT 73
11502: PUSH
11503: LD_INT 88
11505: PUSH
11506: LD_INT 5
11508: PUSH
11509: EMPTY
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: PUSH
11515: LD_INT 4
11517: PUSH
11518: LD_INT 56
11520: PUSH
11521: LD_INT 62
11523: PUSH
11524: LD_INT 3
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: PUSH
11533: LD_INT 29
11535: PUSH
11536: LD_INT 43
11538: PUSH
11539: LD_INT 68
11541: PUSH
11542: LD_INT 2
11544: PUSH
11545: EMPTY
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: PUSH
11551: LD_INT 30
11553: PUSH
11554: LD_INT 43
11556: PUSH
11557: LD_INT 79
11559: PUSH
11560: LD_INT 5
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: PUSH
11569: LD_INT 28
11571: PUSH
11572: LD_INT 60
11574: PUSH
11575: LD_INT 75
11577: PUSH
11578: LD_INT 1
11580: PUSH
11581: EMPTY
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 2
11589: PUSH
11590: LD_INT 50
11592: PUSH
11593: LD_INT 87
11595: PUSH
11596: LD_INT 1
11598: PUSH
11599: EMPTY
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: PUSH
11605: LD_INT 26
11607: PUSH
11608: LD_INT 45
11610: PUSH
11611: LD_INT 67
11613: PUSH
11614: LD_INT 2
11616: PUSH
11617: EMPTY
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: PUSH
11623: LD_INT 17
11625: PUSH
11626: LD_INT 47
11628: PUSH
11629: LD_INT 84
11631: PUSH
11632: LD_INT 2
11634: PUSH
11635: EMPTY
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: PUSH
11641: LD_INT 18
11643: PUSH
11644: LD_INT 46
11646: PUSH
11647: LD_INT 87
11649: PUSH
11650: LD_INT 1
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: PUSH
11659: LD_INT 26
11661: PUSH
11662: LD_INT 41
11664: PUSH
11665: LD_INT 64
11667: PUSH
11668: LD_INT 5
11670: PUSH
11671: EMPTY
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: LD_INT 6
11679: PUSH
11680: LD_INT 42
11682: PUSH
11683: LD_INT 74
11685: PUSH
11686: LD_INT 1
11688: PUSH
11689: EMPTY
11690: LIST
11691: LIST
11692: LIST
11693: LIST
11694: PUSH
11695: LD_INT 21
11697: PUSH
11698: LD_INT 54
11700: PUSH
11701: LD_INT 91
11703: PUSH
11704: LD_INT 5
11706: PUSH
11707: EMPTY
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: PUSH
11713: LD_INT 16
11715: PUSH
11716: LD_INT 50
11718: PUSH
11719: LD_INT 83
11721: PUSH
11722: LD_INT 3
11724: PUSH
11725: EMPTY
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: PUSH
11731: LD_INT 24
11733: PUSH
11734: LD_INT 50
11736: PUSH
11737: LD_INT 90
11739: PUSH
11740: LD_INT 0
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: PUSH
11749: LD_INT 33
11751: PUSH
11752: LD_INT 51
11754: PUSH
11755: LD_INT 61
11757: PUSH
11758: LD_INT 3
11760: PUSH
11761: EMPTY
11762: LIST
11763: LIST
11764: LIST
11765: LIST
11766: PUSH
11767: LD_INT 33
11769: PUSH
11770: LD_INT 42
11772: PUSH
11773: LD_INT 60
11775: PUSH
11776: LD_INT 3
11778: PUSH
11779: EMPTY
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: PUSH
11785: LD_INT 33
11787: PUSH
11788: LD_INT 36
11790: PUSH
11791: LD_INT 58
11793: PUSH
11794: LD_INT 3
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: PUSH
11803: LD_INT 33
11805: PUSH
11806: LD_INT 39
11808: PUSH
11809: LD_INT 59
11811: PUSH
11812: LD_INT 3
11814: PUSH
11815: EMPTY
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 33
11823: PUSH
11824: LD_INT 61
11826: PUSH
11827: LD_INT 64
11829: PUSH
11830: LD_INT 3
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 33
11841: PUSH
11842: LD_INT 63
11844: PUSH
11845: LD_INT 90
11847: PUSH
11848: LD_INT 5
11850: PUSH
11851: EMPTY
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: PUSH
11857: LD_INT 33
11859: PUSH
11860: LD_INT 64
11862: PUSH
11863: LD_INT 88
11865: PUSH
11866: LD_INT 5
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: PUSH
11875: LD_INT 33
11877: PUSH
11878: LD_INT 72
11880: PUSH
11881: LD_INT 82
11883: PUSH
11884: LD_INT 5
11886: PUSH
11887: EMPTY
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: PUSH
11893: EMPTY
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11918: LD_ADDR_EXP 74
11922: PUSH
11923: LD_INT 45
11925: PUSH
11926: LD_INT 75
11928: PUSH
11929: EMPTY
11930: LIST
11931: LIST
11932: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11933: LD_ADDR_EXP 82
11937: PUSH
11938: LD_INT 31
11940: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11941: LD_ADDR_EXP 84
11945: PUSH
11946: LD_INT 37
11948: ST_TO_ADDR
// end ; 3 :
11949: GO 12473
11951: LD_INT 3
11953: DOUBLE
11954: EQUAL
11955: IFTRUE 11959
11957: GO 12472
11959: POP
// begin ruBaseArea := ruBaseEastArea ;
11960: LD_ADDR_EXP 66
11964: PUSH
11965: LD_INT 27
11967: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11968: LD_ADDR_EXP 72
11972: PUSH
11973: LD_INT 27
11975: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11976: LD_ADDR_EXP 76
11980: PUSH
11981: LD_INT 0
11983: PUSH
11984: LD_INT 152
11986: PUSH
11987: LD_INT 72
11989: PUSH
11990: LD_INT 4
11992: PUSH
11993: EMPTY
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 4
12001: PUSH
12002: LD_INT 139
12004: PUSH
12005: LD_INT 69
12007: PUSH
12008: LD_INT 1
12010: PUSH
12011: EMPTY
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: PUSH
12017: LD_INT 4
12019: PUSH
12020: LD_INT 142
12022: PUSH
12023: LD_INT 56
12025: PUSH
12026: LD_INT 2
12028: PUSH
12029: EMPTY
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: PUSH
12035: LD_INT 29
12037: PUSH
12038: LD_INT 152
12040: PUSH
12041: LD_INT 85
12043: PUSH
12044: LD_INT 3
12046: PUSH
12047: EMPTY
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: LD_INT 30
12055: PUSH
12056: LD_INT 156
12058: PUSH
12059: LD_INT 92
12061: PUSH
12062: LD_INT 3
12064: PUSH
12065: EMPTY
12066: LIST
12067: LIST
12068: LIST
12069: LIST
12070: PUSH
12071: LD_INT 28
12073: PUSH
12074: LD_INT 157
12076: PUSH
12077: LD_INT 96
12079: PUSH
12080: LD_INT 4
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: PUSH
12089: LD_INT 2
12091: PUSH
12092: LD_INT 161
12094: PUSH
12095: LD_INT 74
12097: PUSH
12098: LD_INT 5
12100: PUSH
12101: EMPTY
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: PUSH
12107: LD_INT 21
12109: PUSH
12110: LD_INT 157
12112: PUSH
12113: LD_INT 74
12115: PUSH
12116: LD_INT 1
12118: PUSH
12119: EMPTY
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: PUSH
12125: LD_INT 16
12127: PUSH
12128: LD_INT 161
12130: PUSH
12131: LD_INT 77
12133: PUSH
12134: LD_INT 0
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: PUSH
12143: LD_INT 24
12145: PUSH
12146: LD_INT 165
12148: PUSH
12149: LD_INT 78
12151: PUSH
12152: LD_INT 5
12154: PUSH
12155: EMPTY
12156: LIST
12157: LIST
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 17
12163: PUSH
12164: LD_INT 164
12166: PUSH
12167: LD_INT 74
12169: PUSH
12170: LD_INT 4
12172: PUSH
12173: EMPTY
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 6
12181: PUSH
12182: LD_INT 164
12184: PUSH
12185: LD_INT 95
12187: PUSH
12188: LD_INT 5
12190: PUSH
12191: EMPTY
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 18
12199: PUSH
12200: LD_INT 161
12202: PUSH
12203: LD_INT 70
12205: PUSH
12206: LD_INT 3
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 26
12217: PUSH
12218: LD_INT 155
12220: PUSH
12221: LD_INT 87
12223: PUSH
12224: LD_INT 0
12226: PUSH
12227: EMPTY
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: PUSH
12233: LD_INT 26
12235: PUSH
12236: LD_INT 159
12238: PUSH
12239: LD_INT 95
12241: PUSH
12242: LD_INT 3
12244: PUSH
12245: EMPTY
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: PUSH
12251: LD_INT 26
12253: PUSH
12254: LD_INT 167
12256: PUSH
12257: LD_INT 98
12259: PUSH
12260: LD_INT 1
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: PUSH
12269: LD_INT 33
12271: PUSH
12272: LD_INT 152
12274: PUSH
12275: LD_INT 89
12277: PUSH
12278: LD_INT 1
12280: PUSH
12281: EMPTY
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: PUSH
12287: LD_INT 33
12289: PUSH
12290: LD_INT 134
12292: PUSH
12293: LD_INT 61
12295: PUSH
12296: LD_INT 2
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: PUSH
12305: LD_INT 33
12307: PUSH
12308: LD_INT 156
12310: PUSH
12311: LD_INT 62
12313: PUSH
12314: LD_INT 3
12316: PUSH
12317: EMPTY
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: PUSH
12323: LD_INT 33
12325: PUSH
12326: LD_INT 171
12328: PUSH
12329: LD_INT 97
12331: PUSH
12332: LD_INT 5
12334: PUSH
12335: EMPTY
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: PUSH
12341: LD_INT 33
12343: PUSH
12344: LD_INT 169
12346: PUSH
12347: LD_INT 103
12349: PUSH
12350: LD_INT 5
12352: PUSH
12353: EMPTY
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: PUSH
12359: LD_INT 33
12361: PUSH
12362: LD_INT 158
12364: PUSH
12365: LD_INT 65
12367: PUSH
12368: LD_INT 3
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: PUSH
12377: LD_INT 33
12379: PUSH
12380: LD_INT 144
12382: PUSH
12383: LD_INT 53
12385: PUSH
12386: LD_INT 2
12388: PUSH
12389: EMPTY
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: PUSH
12395: LD_INT 33
12397: PUSH
12398: LD_INT 150
12400: PUSH
12401: LD_INT 81
12403: PUSH
12404: LD_INT 1
12406: PUSH
12407: EMPTY
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: PUSH
12413: EMPTY
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12439: LD_ADDR_EXP 74
12443: PUSH
12444: LD_INT 145
12446: PUSH
12447: LD_INT 71
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12454: LD_ADDR_EXP 82
12458: PUSH
12459: LD_INT 29
12461: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12462: LD_ADDR_EXP 84
12466: PUSH
12467: LD_INT 35
12469: ST_TO_ADDR
// end ; end ;
12470: GO 12473
12472: POP
// ruScriptActive := true ;
12473: LD_ADDR_EXP 14
12477: PUSH
12478: LD_INT 1
12480: ST_TO_ADDR
// end ;
12481: LD_VAR 0 3
12485: RET
// export function RussianBase2 ( group , option ) ; begin
12486: LD_INT 0
12488: PPUSH
// case option of 1 :
12489: LD_VAR 0 2
12493: PUSH
12494: LD_INT 1
12496: DOUBLE
12497: EQUAL
12498: IFTRUE 12502
12500: GO 12958
12502: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12503: LD_ADDR_EXP 67
12507: PUSH
12508: LD_INT 26
12510: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12511: LD_ADDR_EXP 73
12515: PUSH
12516: LD_INT 26
12518: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12519: LD_ADDR_EXP 77
12523: PUSH
12524: LD_INT 0
12526: PUSH
12527: LD_INT 104
12529: PUSH
12530: LD_INT 110
12532: PUSH
12533: LD_INT 5
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: LIST
12540: LIST
12541: PUSH
12542: LD_INT 4
12544: PUSH
12545: LD_INT 98
12547: PUSH
12548: LD_INT 90
12550: PUSH
12551: LD_INT 3
12553: PUSH
12554: EMPTY
12555: LIST
12556: LIST
12557: LIST
12558: LIST
12559: PUSH
12560: LD_INT 29
12562: PUSH
12563: LD_INT 103
12565: PUSH
12566: LD_INT 114
12568: PUSH
12569: LD_INT 2
12571: PUSH
12572: EMPTY
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: PUSH
12578: LD_INT 30
12580: PUSH
12581: LD_INT 99
12583: PUSH
12584: LD_INT 114
12586: PUSH
12587: LD_INT 3
12589: PUSH
12590: EMPTY
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: PUSH
12596: LD_INT 28
12598: PUSH
12599: LD_INT 100
12601: PUSH
12602: LD_INT 112
12604: PUSH
12605: LD_INT 1
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: LD_INT 92
12619: PUSH
12620: LD_INT 101
12622: PUSH
12623: LD_INT 0
12625: PUSH
12626: EMPTY
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: PUSH
12632: LD_INT 26
12634: PUSH
12635: LD_INT 97
12637: PUSH
12638: LD_INT 116
12640: PUSH
12641: LD_INT 5
12643: PUSH
12644: EMPTY
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 17
12652: PUSH
12653: LD_INT 96
12655: PUSH
12656: LD_INT 101
12658: PUSH
12659: LD_INT 4
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: PUSH
12668: LD_INT 18
12670: PUSH
12671: LD_INT 88
12673: PUSH
12674: LD_INT 97
12676: PUSH
12677: LD_INT 2
12679: PUSH
12680: EMPTY
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: PUSH
12686: LD_INT 26
12688: PUSH
12689: LD_INT 106
12691: PUSH
12692: LD_INT 92
12694: PUSH
12695: LD_INT 2
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: LIST
12702: LIST
12703: PUSH
12704: LD_INT 6
12706: PUSH
12707: LD_INT 93
12709: PUSH
12710: LD_INT 110
12712: PUSH
12713: LD_INT 0
12715: PUSH
12716: EMPTY
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: PUSH
12722: LD_INT 21
12724: PUSH
12725: LD_INT 89
12727: PUSH
12728: LD_INT 101
12730: PUSH
12731: LD_INT 1
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 95
12745: PUSH
12746: LD_INT 104
12748: PUSH
12749: LD_INT 4
12751: PUSH
12752: EMPTY
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: PUSH
12758: LD_INT 24
12760: PUSH
12761: LD_INT 92
12763: PUSH
12764: LD_INT 105
12766: PUSH
12767: LD_INT 0
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 33
12778: PUSH
12779: LD_INT 88
12781: PUSH
12782: LD_INT 89
12784: PUSH
12785: LD_INT 2
12787: PUSH
12788: EMPTY
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: PUSH
12794: LD_INT 33
12796: PUSH
12797: LD_INT 86
12799: PUSH
12800: LD_INT 90
12802: PUSH
12803: LD_INT 2
12805: PUSH
12806: EMPTY
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: PUSH
12812: LD_INT 33
12814: PUSH
12815: LD_INT 85
12817: PUSH
12818: LD_INT 99
12820: PUSH
12821: LD_INT 2
12823: PUSH
12824: EMPTY
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 33
12832: PUSH
12833: LD_INT 85
12835: PUSH
12836: LD_INT 107
12838: PUSH
12839: LD_INT 1
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: PUSH
12848: LD_INT 33
12850: PUSH
12851: LD_INT 105
12853: PUSH
12854: LD_INT 99
12856: PUSH
12857: LD_INT 1
12859: PUSH
12860: EMPTY
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 33
12868: PUSH
12869: LD_INT 102
12871: PUSH
12872: LD_INT 92
12874: PUSH
12875: LD_INT 3
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: LIST
12882: LIST
12883: PUSH
12884: LD_INT 33
12886: PUSH
12887: LD_INT 105
12889: PUSH
12890: LD_INT 92
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: EMPTY
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: LIST
12924: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12925: LD_ADDR_EXP 75
12929: PUSH
12930: LD_INT 98
12932: PUSH
12933: LD_INT 107
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12940: LD_ADDR_EXP 83
12944: PUSH
12945: LD_INT 30
12947: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12948: LD_ADDR_EXP 85
12952: PUSH
12953: LD_INT 36
12955: ST_TO_ADDR
// end ; 2 :
12956: GO 13925
12958: LD_INT 2
12960: DOUBLE
12961: EQUAL
12962: IFTRUE 12966
12964: GO 13460
12966: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12967: LD_ADDR_EXP 67
12971: PUSH
12972: LD_INT 28
12974: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12975: LD_ADDR_EXP 73
12979: PUSH
12980: LD_INT 28
12982: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12983: LD_ADDR_EXP 77
12987: PUSH
12988: LD_INT 0
12990: PUSH
12991: LD_INT 49
12993: PUSH
12994: LD_INT 74
12996: PUSH
12997: LD_INT 3
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: PUSH
13006: LD_INT 4
13008: PUSH
13009: LD_INT 73
13011: PUSH
13012: LD_INT 88
13014: PUSH
13015: LD_INT 5
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: PUSH
13024: LD_INT 4
13026: PUSH
13027: LD_INT 56
13029: PUSH
13030: LD_INT 62
13032: PUSH
13033: LD_INT 3
13035: PUSH
13036: EMPTY
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: PUSH
13042: LD_INT 29
13044: PUSH
13045: LD_INT 43
13047: PUSH
13048: LD_INT 68
13050: PUSH
13051: LD_INT 2
13053: PUSH
13054: EMPTY
13055: LIST
13056: LIST
13057: LIST
13058: LIST
13059: PUSH
13060: LD_INT 30
13062: PUSH
13063: LD_INT 43
13065: PUSH
13066: LD_INT 79
13068: PUSH
13069: LD_INT 5
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: PUSH
13078: LD_INT 28
13080: PUSH
13081: LD_INT 60
13083: PUSH
13084: LD_INT 75
13086: PUSH
13087: LD_INT 1
13089: PUSH
13090: EMPTY
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: PUSH
13096: LD_INT 2
13098: PUSH
13099: LD_INT 50
13101: PUSH
13102: LD_INT 87
13104: PUSH
13105: LD_INT 1
13107: PUSH
13108: EMPTY
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: PUSH
13114: LD_INT 26
13116: PUSH
13117: LD_INT 45
13119: PUSH
13120: LD_INT 67
13122: PUSH
13123: LD_INT 2
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: LIST
13130: LIST
13131: PUSH
13132: LD_INT 17
13134: PUSH
13135: LD_INT 47
13137: PUSH
13138: LD_INT 84
13140: PUSH
13141: LD_INT 2
13143: PUSH
13144: EMPTY
13145: LIST
13146: LIST
13147: LIST
13148: LIST
13149: PUSH
13150: LD_INT 18
13152: PUSH
13153: LD_INT 46
13155: PUSH
13156: LD_INT 87
13158: PUSH
13159: LD_INT 1
13161: PUSH
13162: EMPTY
13163: LIST
13164: LIST
13165: LIST
13166: LIST
13167: PUSH
13168: LD_INT 26
13170: PUSH
13171: LD_INT 41
13173: PUSH
13174: LD_INT 64
13176: PUSH
13177: LD_INT 5
13179: PUSH
13180: EMPTY
13181: LIST
13182: LIST
13183: LIST
13184: LIST
13185: PUSH
13186: LD_INT 6
13188: PUSH
13189: LD_INT 42
13191: PUSH
13192: LD_INT 74
13194: PUSH
13195: LD_INT 1
13197: PUSH
13198: EMPTY
13199: LIST
13200: LIST
13201: LIST
13202: LIST
13203: PUSH
13204: LD_INT 21
13206: PUSH
13207: LD_INT 54
13209: PUSH
13210: LD_INT 91
13212: PUSH
13213: LD_INT 5
13215: PUSH
13216: EMPTY
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: PUSH
13222: LD_INT 16
13224: PUSH
13225: LD_INT 50
13227: PUSH
13228: LD_INT 83
13230: PUSH
13231: LD_INT 3
13233: PUSH
13234: EMPTY
13235: LIST
13236: LIST
13237: LIST
13238: LIST
13239: PUSH
13240: LD_INT 24
13242: PUSH
13243: LD_INT 50
13245: PUSH
13246: LD_INT 90
13248: PUSH
13249: LD_INT 0
13251: PUSH
13252: EMPTY
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 33
13260: PUSH
13261: LD_INT 51
13263: PUSH
13264: LD_INT 61
13266: PUSH
13267: LD_INT 3
13269: PUSH
13270: EMPTY
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 33
13278: PUSH
13279: LD_INT 42
13281: PUSH
13282: LD_INT 60
13284: PUSH
13285: LD_INT 3
13287: PUSH
13288: EMPTY
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: PUSH
13294: LD_INT 33
13296: PUSH
13297: LD_INT 36
13299: PUSH
13300: LD_INT 58
13302: PUSH
13303: LD_INT 3
13305: PUSH
13306: EMPTY
13307: LIST
13308: LIST
13309: LIST
13310: LIST
13311: PUSH
13312: LD_INT 33
13314: PUSH
13315: LD_INT 39
13317: PUSH
13318: LD_INT 59
13320: PUSH
13321: LD_INT 3
13323: PUSH
13324: EMPTY
13325: LIST
13326: LIST
13327: LIST
13328: LIST
13329: PUSH
13330: LD_INT 33
13332: PUSH
13333: LD_INT 61
13335: PUSH
13336: LD_INT 64
13338: PUSH
13339: LD_INT 3
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: PUSH
13348: LD_INT 33
13350: PUSH
13351: LD_INT 63
13353: PUSH
13354: LD_INT 90
13356: PUSH
13357: LD_INT 5
13359: PUSH
13360: EMPTY
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: PUSH
13366: LD_INT 33
13368: PUSH
13369: LD_INT 64
13371: PUSH
13372: LD_INT 88
13374: PUSH
13375: LD_INT 5
13377: PUSH
13378: EMPTY
13379: LIST
13380: LIST
13381: LIST
13382: LIST
13383: PUSH
13384: LD_INT 33
13386: PUSH
13387: LD_INT 72
13389: PUSH
13390: LD_INT 82
13392: PUSH
13393: LD_INT 5
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: LIST
13400: LIST
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: LIST
13413: LIST
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: LIST
13425: LIST
13426: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13427: LD_ADDR_EXP 74
13431: PUSH
13432: LD_INT 45
13434: PUSH
13435: LD_INT 75
13437: PUSH
13438: EMPTY
13439: LIST
13440: LIST
13441: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13442: LD_ADDR_EXP 83
13446: PUSH
13447: LD_INT 31
13449: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13450: LD_ADDR_EXP 85
13454: PUSH
13455: LD_INT 37
13457: ST_TO_ADDR
// end ; 3 :
13458: GO 13925
13460: LD_INT 3
13462: DOUBLE
13463: EQUAL
13464: IFTRUE 13468
13466: GO 13924
13468: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13469: LD_ADDR_EXP 67
13473: PUSH
13474: LD_INT 27
13476: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13477: LD_ADDR_EXP 73
13481: PUSH
13482: LD_INT 27
13484: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13485: LD_ADDR_EXP 77
13489: PUSH
13490: LD_INT 0
13492: PUSH
13493: LD_INT 152
13495: PUSH
13496: LD_INT 72
13498: PUSH
13499: LD_INT 4
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: PUSH
13508: LD_INT 4
13510: PUSH
13511: LD_INT 139
13513: PUSH
13514: LD_INT 69
13516: PUSH
13517: LD_INT 1
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: PUSH
13526: LD_INT 4
13528: PUSH
13529: LD_INT 142
13531: PUSH
13532: LD_INT 56
13534: PUSH
13535: LD_INT 2
13537: PUSH
13538: EMPTY
13539: LIST
13540: LIST
13541: LIST
13542: LIST
13543: PUSH
13544: LD_INT 29
13546: PUSH
13547: LD_INT 152
13549: PUSH
13550: LD_INT 85
13552: PUSH
13553: LD_INT 3
13555: PUSH
13556: EMPTY
13557: LIST
13558: LIST
13559: LIST
13560: LIST
13561: PUSH
13562: LD_INT 30
13564: PUSH
13565: LD_INT 156
13567: PUSH
13568: LD_INT 92
13570: PUSH
13571: LD_INT 3
13573: PUSH
13574: EMPTY
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: PUSH
13580: LD_INT 28
13582: PUSH
13583: LD_INT 157
13585: PUSH
13586: LD_INT 96
13588: PUSH
13589: LD_INT 4
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: PUSH
13598: LD_INT 2
13600: PUSH
13601: LD_INT 161
13603: PUSH
13604: LD_INT 74
13606: PUSH
13607: LD_INT 5
13609: PUSH
13610: EMPTY
13611: LIST
13612: LIST
13613: LIST
13614: LIST
13615: PUSH
13616: LD_INT 21
13618: PUSH
13619: LD_INT 157
13621: PUSH
13622: LD_INT 74
13624: PUSH
13625: LD_INT 1
13627: PUSH
13628: EMPTY
13629: LIST
13630: LIST
13631: LIST
13632: LIST
13633: PUSH
13634: LD_INT 16
13636: PUSH
13637: LD_INT 161
13639: PUSH
13640: LD_INT 77
13642: PUSH
13643: LD_INT 0
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: PUSH
13652: LD_INT 24
13654: PUSH
13655: LD_INT 165
13657: PUSH
13658: LD_INT 78
13660: PUSH
13661: LD_INT 5
13663: PUSH
13664: EMPTY
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: PUSH
13670: LD_INT 17
13672: PUSH
13673: LD_INT 164
13675: PUSH
13676: LD_INT 74
13678: PUSH
13679: LD_INT 4
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 6
13690: PUSH
13691: LD_INT 164
13693: PUSH
13694: LD_INT 95
13696: PUSH
13697: LD_INT 5
13699: PUSH
13700: EMPTY
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: PUSH
13706: LD_INT 18
13708: PUSH
13709: LD_INT 161
13711: PUSH
13712: LD_INT 70
13714: PUSH
13715: LD_INT 3
13717: PUSH
13718: EMPTY
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: PUSH
13724: LD_INT 26
13726: PUSH
13727: LD_INT 155
13729: PUSH
13730: LD_INT 87
13732: PUSH
13733: LD_INT 0
13735: PUSH
13736: EMPTY
13737: LIST
13738: LIST
13739: LIST
13740: LIST
13741: PUSH
13742: LD_INT 26
13744: PUSH
13745: LD_INT 159
13747: PUSH
13748: LD_INT 95
13750: PUSH
13751: LD_INT 3
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: PUSH
13760: LD_INT 26
13762: PUSH
13763: LD_INT 167
13765: PUSH
13766: LD_INT 98
13768: PUSH
13769: LD_INT 1
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: LIST
13776: LIST
13777: PUSH
13778: LD_INT 33
13780: PUSH
13781: LD_INT 152
13783: PUSH
13784: LD_INT 89
13786: PUSH
13787: LD_INT 1
13789: PUSH
13790: EMPTY
13791: LIST
13792: LIST
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 33
13798: PUSH
13799: LD_INT 134
13801: PUSH
13802: LD_INT 61
13804: PUSH
13805: LD_INT 2
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 33
13816: PUSH
13817: LD_INT 156
13819: PUSH
13820: LD_INT 62
13822: PUSH
13823: LD_INT 3
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: PUSH
13832: LD_INT 33
13834: PUSH
13835: LD_INT 171
13837: PUSH
13838: LD_INT 97
13840: PUSH
13841: LD_INT 5
13843: PUSH
13844: EMPTY
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: PUSH
13850: LD_INT 33
13852: PUSH
13853: LD_INT 169
13855: PUSH
13856: LD_INT 103
13858: PUSH
13859: LD_INT 5
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: PUSH
13868: EMPTY
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13891: LD_ADDR_EXP 75
13895: PUSH
13896: LD_INT 145
13898: PUSH
13899: LD_INT 71
13901: PUSH
13902: EMPTY
13903: LIST
13904: LIST
13905: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13906: LD_ADDR_EXP 83
13910: PUSH
13911: LD_INT 29
13913: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13914: LD_ADDR_EXP 85
13918: PUSH
13919: LD_INT 35
13921: ST_TO_ADDR
// end ; end ;
13922: GO 13925
13924: POP
// ruScriptActive2 := true ;
13925: LD_ADDR_EXP 15
13929: PUSH
13930: LD_INT 1
13932: ST_TO_ADDR
// end ;
13933: LD_VAR 0 3
13937: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13938: LD_EXP 14
13942: IFFALSE 13955
13944: PUSH
13945: LD_EXP 59
13949: PPUSH
13950: CALL 58984 0 1
13954: AND
13955: IFFALSE 16559
13957: GO 13959
13959: DISABLE
13960: LD_INT 0
13962: PPUSH
13963: PPUSH
13964: PPUSH
13965: PPUSH
13966: PPUSH
13967: PPUSH
13968: PPUSH
13969: PPUSH
13970: PPUSH
13971: PPUSH
13972: PPUSH
13973: PPUSH
13974: PPUSH
13975: PPUSH
13976: PPUSH
13977: PPUSH
// begin enable ;
13978: ENABLE
// if ruTech then
13979: LD_EXP 65
13983: IFFALSE 14137
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13985: LD_ADDR_VAR 0 4
13989: PUSH
13990: LD_INT 22
13992: PUSH
13993: LD_INT 3
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: LD_INT 50
14002: PUSH
14003: EMPTY
14004: LIST
14005: PUSH
14006: LD_INT 2
14008: PUSH
14009: LD_INT 30
14011: PUSH
14012: LD_INT 6
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 30
14021: PUSH
14022: LD_INT 7
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 30
14031: PUSH
14032: LD_INT 8
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: PPUSH
14050: CALL_OW 69
14054: ST_TO_ADDR
// if lab then
14055: LD_VAR 0 4
14059: IFFALSE 14137
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
14061: LD_VAR 0 4
14065: PUSH
14066: LD_INT 1
14068: ARRAY
14069: PPUSH
14070: CALL_OW 461
14074: PUSH
14075: LD_INT 2
14077: EQUAL
14078: IFFALSE 14137
// begin for i in ruTech do
14080: LD_ADDR_VAR 0 1
14084: PUSH
14085: LD_EXP 65
14089: PUSH
14090: FOR_IN
14091: IFFALSE 14135
// if CanBeResearched ( lab [ 1 ] , i ) then
14093: LD_VAR 0 4
14097: PUSH
14098: LD_INT 1
14100: ARRAY
14101: PPUSH
14102: LD_VAR 0 1
14106: PPUSH
14107: CALL_OW 430
14111: IFFALSE 14133
// begin ComResearch ( lab [ 1 ] , i ) ;
14113: LD_VAR 0 4
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: PPUSH
14122: LD_VAR 0 1
14126: PPUSH
14127: CALL_OW 124
// break ;
14131: GO 14135
// end ;
14133: GO 14090
14135: POP
14136: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
14137: LD_ADDR_VAR 0 14
14141: PUSH
14142: LD_EXP 66
14146: PPUSH
14147: LD_INT 22
14149: PUSH
14150: LD_INT 3
14152: PUSH
14153: EMPTY
14154: LIST
14155: LIST
14156: PUSH
14157: LD_INT 30
14159: PUSH
14160: LD_INT 3
14162: PUSH
14163: EMPTY
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 50
14169: PUSH
14170: EMPTY
14171: LIST
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: PPUSH
14178: CALL_OW 70
14182: ST_TO_ADDR
// if fac then
14183: LD_VAR 0 14
14187: IFFALSE 14784
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14189: LD_EXP 63
14193: PPUSH
14194: LD_INT 3
14196: PUSH
14197: LD_INT 60
14199: PUSH
14200: EMPTY
14201: LIST
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 3
14209: PUSH
14210: LD_INT 25
14212: PUSH
14213: LD_INT 3
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: PUSH
14224: EMPTY
14225: LIST
14226: LIST
14227: PPUSH
14228: CALL_OW 72
14232: IFFALSE 14375
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14234: LD_ADDR_VAR 0 1
14238: PUSH
14239: LD_EXP 63
14243: PPUSH
14244: LD_INT 3
14246: PUSH
14247: LD_INT 60
14249: PUSH
14250: EMPTY
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 3
14259: PUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: EMPTY
14271: LIST
14272: LIST
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PPUSH
14278: CALL_OW 72
14282: PUSH
14283: FOR_IN
14284: IFFALSE 14373
// begin SetTag ( i , tMech ) ;
14286: LD_VAR 0 1
14290: PPUSH
14291: LD_INT 7
14293: PPUSH
14294: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14298: LD_VAR 0 1
14302: PPUSH
14303: CALL_OW 310
14307: IFFALSE 14330
14309: PUSH
14310: LD_VAR 0 1
14314: PPUSH
14315: CALL_OW 310
14319: PUSH
14320: LD_VAR 0 14
14324: PUSH
14325: LD_INT 1
14327: ARRAY
14328: NONEQUAL
14329: AND
14330: IFFALSE 14341
// ComExitBuilding ( i ) ;
14332: LD_VAR 0 1
14336: PPUSH
14337: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14341: LD_VAR 0 1
14345: PPUSH
14346: LD_VAR 0 14
14350: PUSH
14351: LD_INT 1
14353: ARRAY
14354: PPUSH
14355: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14359: LD_VAR 0 1
14363: PPUSH
14364: LD_INT 3
14366: PPUSH
14367: CALL_OW 183
// end ;
14371: GO 14283
14373: POP
14374: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14375: LD_EXP 63
14379: PPUSH
14380: LD_INT 25
14382: PUSH
14383: LD_INT 3
14385: PUSH
14386: EMPTY
14387: LIST
14388: LIST
14389: PUSH
14390: LD_INT 3
14392: PUSH
14393: LD_INT 54
14395: PUSH
14396: EMPTY
14397: LIST
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: LD_INT 120
14405: PUSH
14406: LD_INT 7
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 50
14415: PUSH
14416: EMPTY
14417: LIST
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 72
14429: IFFALSE 14516
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14431: LD_ADDR_VAR 0 1
14435: PUSH
14436: LD_EXP 63
14440: PPUSH
14441: LD_INT 25
14443: PUSH
14444: LD_INT 3
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: LD_INT 3
14453: PUSH
14454: LD_INT 54
14456: PUSH
14457: EMPTY
14458: LIST
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: PUSH
14464: LD_INT 120
14466: PUSH
14467: LD_INT 7
14469: PUSH
14470: EMPTY
14471: LIST
14472: LIST
14473: PUSH
14474: LD_INT 50
14476: PUSH
14477: EMPTY
14478: LIST
14479: PUSH
14480: EMPTY
14481: LIST
14482: LIST
14483: LIST
14484: LIST
14485: PPUSH
14486: CALL_OW 72
14490: PUSH
14491: FOR_IN
14492: IFFALSE 14514
// ComEnterUnit ( i , fac [ 1 ] ) ;
14494: LD_VAR 0 1
14498: PPUSH
14499: LD_VAR 0 14
14503: PUSH
14504: LD_INT 1
14506: ARRAY
14507: PPUSH
14508: CALL_OW 120
14512: GO 14491
14514: POP
14515: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14516: LD_VAR 0 14
14520: PUSH
14521: LD_INT 1
14523: ARRAY
14524: PPUSH
14525: CALL_OW 461
14529: PUSH
14530: LD_INT 2
14532: EQUAL
14533: IFFALSE 14784
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14535: LD_ADDR_VAR 0 15
14539: PUSH
14540: LD_EXP 66
14544: PPUSH
14545: LD_INT 2
14547: PUSH
14548: LD_INT 30
14550: PUSH
14551: LD_INT 32
14553: PUSH
14554: EMPTY
14555: LIST
14556: LIST
14557: PUSH
14558: LD_INT 30
14560: PUSH
14561: LD_INT 33
14563: PUSH
14564: EMPTY
14565: LIST
14566: LIST
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: LIST
14572: PUSH
14573: LD_INT 35
14575: PUSH
14576: LD_INT 0
14578: PUSH
14579: EMPTY
14580: LIST
14581: LIST
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PPUSH
14587: CALL_OW 70
14591: ST_TO_ADDR
// if emptyTowers then
14592: LD_VAR 0 15
14596: IFFALSE 14646
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14598: LD_ADDR_VAR 0 16
14602: PUSH
14603: LD_VAR 0 15
14607: PUSH
14608: LD_INT 1
14610: ARRAY
14611: PPUSH
14612: LD_EXP 66
14616: PPUSH
14617: CALL 67309 0 2
14621: ST_TO_ADDR
// if weapon then
14622: LD_VAR 0 16
14626: IFFALSE 14646
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14628: LD_VAR 0 15
14632: PUSH
14633: LD_INT 1
14635: ARRAY
14636: PPUSH
14637: LD_VAR 0 16
14641: PPUSH
14642: CALL_OW 148
// end ; if ruConstructList then
14646: LD_EXP 70
14650: IFFALSE 14784
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14652: LD_VAR 0 14
14656: PUSH
14657: LD_INT 1
14659: ARRAY
14660: PPUSH
14661: LD_EXP 70
14665: PUSH
14666: LD_INT 1
14668: ARRAY
14669: PUSH
14670: LD_INT 1
14672: ARRAY
14673: PPUSH
14674: LD_EXP 70
14678: PUSH
14679: LD_INT 1
14681: ARRAY
14682: PUSH
14683: LD_INT 2
14685: ARRAY
14686: PPUSH
14687: LD_EXP 70
14691: PUSH
14692: LD_INT 1
14694: ARRAY
14695: PUSH
14696: LD_INT 3
14698: ARRAY
14699: PPUSH
14700: LD_EXP 70
14704: PUSH
14705: LD_INT 1
14707: ARRAY
14708: PUSH
14709: LD_INT 4
14711: ARRAY
14712: PPUSH
14713: CALL_OW 448
14717: IFFALSE 14784
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14719: LD_VAR 0 14
14723: PUSH
14724: LD_INT 1
14726: ARRAY
14727: PPUSH
14728: LD_EXP 70
14732: PUSH
14733: LD_INT 1
14735: ARRAY
14736: PUSH
14737: LD_INT 1
14739: ARRAY
14740: PPUSH
14741: LD_EXP 70
14745: PUSH
14746: LD_INT 1
14748: ARRAY
14749: PUSH
14750: LD_INT 2
14752: ARRAY
14753: PPUSH
14754: LD_EXP 70
14758: PUSH
14759: LD_INT 1
14761: ARRAY
14762: PUSH
14763: LD_INT 3
14765: ARRAY
14766: PPUSH
14767: LD_EXP 70
14771: PUSH
14772: LD_INT 1
14774: ARRAY
14775: PUSH
14776: LD_INT 4
14778: ARRAY
14779: PPUSH
14780: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14784: LD_ADDR_VAR 0 2
14788: PUSH
14789: LD_EXP 66
14793: PPUSH
14794: LD_INT 21
14796: PUSH
14797: LD_INT 3
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 3
14806: PUSH
14807: LD_INT 57
14809: PUSH
14810: EMPTY
14811: LIST
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: LD_INT 3
14819: PUSH
14820: LD_INT 24
14822: PUSH
14823: LD_INT 1000
14825: PUSH
14826: EMPTY
14827: LIST
14828: LIST
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: EMPTY
14835: LIST
14836: LIST
14837: LIST
14838: PPUSH
14839: CALL_OW 70
14843: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14844: LD_ADDR_VAR 0 8
14848: PUSH
14849: LD_EXP 72
14853: PPUSH
14854: CALL_OW 435
14858: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14859: LD_ADDR_VAR 0 9
14863: PUSH
14864: LD_EXP 59
14868: PPUSH
14869: LD_INT 25
14871: PUSH
14872: LD_INT 4
14874: PUSH
14875: EMPTY
14876: LIST
14877: LIST
14878: PUSH
14879: LD_INT 50
14881: PUSH
14882: EMPTY
14883: LIST
14884: PUSH
14885: EMPTY
14886: LIST
14887: LIST
14888: PPUSH
14889: CALL_OW 72
14893: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14894: LD_ADDR_VAR 0 4
14898: PUSH
14899: LD_EXP 66
14903: PPUSH
14904: LD_INT 2
14906: PUSH
14907: LD_INT 30
14909: PUSH
14910: LD_INT 6
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PUSH
14917: LD_INT 30
14919: PUSH
14920: LD_INT 7
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 30
14929: PUSH
14930: LD_INT 8
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: LIST
14941: LIST
14942: PPUSH
14943: CALL_OW 70
14947: ST_TO_ADDR
// if sci then
14948: LD_VAR 0 9
14952: IFFALSE 15113
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14954: LD_ADDR_VAR 0 11
14958: PUSH
14959: LD_EXP 59
14963: PPUSH
14964: LD_INT 95
14966: PUSH
14967: LD_EXP 66
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: PUSH
14976: LD_INT 120
14978: PUSH
14979: LD_INT 1
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PUSH
14986: EMPTY
14987: LIST
14988: LIST
14989: PPUSH
14990: CALL_OW 72
14994: ST_TO_ADDR
// if hurtUnits then
14995: LD_VAR 0 11
14999: IFFALSE 15060
// begin for i in sci do
15001: LD_ADDR_VAR 0 1
15005: PUSH
15006: LD_VAR 0 9
15010: PUSH
15011: FOR_IN
15012: IFFALSE 15056
// if IsInUnit ( i ) then
15014: LD_VAR 0 1
15018: PPUSH
15019: CALL_OW 310
15023: IFFALSE 15036
// ComExitBuilding ( i ) else
15025: LD_VAR 0 1
15029: PPUSH
15030: CALL_OW 122
15034: GO 15054
// ComHeal ( i , hurtUnits [ 1 ] ) ;
15036: LD_VAR 0 1
15040: PPUSH
15041: LD_VAR 0 11
15045: PUSH
15046: LD_INT 1
15048: ARRAY
15049: PPUSH
15050: CALL_OW 128
15054: GO 15011
15056: POP
15057: POP
// end else
15058: GO 15113
// if lab then
15060: LD_VAR 0 4
15064: IFFALSE 15113
// begin for i in sci do
15066: LD_ADDR_VAR 0 1
15070: PUSH
15071: LD_VAR 0 9
15075: PUSH
15076: FOR_IN
15077: IFFALSE 15111
// if not IsInUnit ( i ) then
15079: LD_VAR 0 1
15083: PPUSH
15084: CALL_OW 310
15088: NOT
15089: IFFALSE 15109
// ComEnterUnit ( i , lab [ 1 ] ) ;
15091: LD_VAR 0 1
15095: PPUSH
15096: LD_VAR 0 4
15100: PUSH
15101: LD_INT 1
15103: ARRAY
15104: PPUSH
15105: CALL_OW 120
15109: GO 15076
15111: POP
15112: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
15113: LD_ADDR_VAR 0 5
15117: PUSH
15118: LD_EXP 59
15122: PPUSH
15123: LD_INT 25
15125: PUSH
15126: LD_INT 2
15128: PUSH
15129: EMPTY
15130: LIST
15131: LIST
15132: PPUSH
15133: CALL_OW 72
15137: ST_TO_ADDR
// if eng then
15138: LD_VAR 0 5
15142: IFFALSE 15937
// begin for i in eng do
15144: LD_ADDR_VAR 0 1
15148: PUSH
15149: LD_VAR 0 5
15153: PUSH
15154: FOR_IN
15155: IFFALSE 15935
// begin tag := GetTag ( i ) ;
15157: LD_ADDR_VAR 0 6
15161: PUSH
15162: LD_VAR 0 1
15166: PPUSH
15167: CALL_OW 110
15171: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15172: LD_VAR 0 1
15176: PPUSH
15177: CALL_OW 256
15181: PUSH
15182: LD_INT 800
15184: LESS
15185: IFFALSE 15197
15187: PUSH
15188: LD_VAR 0 6
15192: PUSH
15193: LD_INT 1
15195: NONEQUAL
15196: AND
15197: IFFALSE 15247
// begin SetTag ( i , tHeal ) ;
15199: LD_VAR 0 1
15203: PPUSH
15204: LD_INT 1
15206: PPUSH
15207: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15211: LD_VAR 0 1
15215: PPUSH
15216: LD_EXP 74
15220: PUSH
15221: LD_INT 1
15223: ARRAY
15224: PPUSH
15225: LD_EXP 74
15229: PUSH
15230: LD_INT 2
15232: ARRAY
15233: PPUSH
15234: CALL_OW 111
// AddComHold ( i ) ;
15238: LD_VAR 0 1
15242: PPUSH
15243: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15247: LD_VAR 0 6
15251: PUSH
15252: LD_INT 1
15254: EQUAL
15255: IFFALSE 15272
15257: PUSH
15258: LD_VAR 0 1
15262: PPUSH
15263: CALL_OW 256
15267: PUSH
15268: LD_INT 1000
15270: EQUAL
15271: AND
15272: IFFALSE 15286
// SetTag ( i , 0 ) ;
15274: LD_VAR 0 1
15278: PPUSH
15279: LD_INT 0
15281: PPUSH
15282: CALL_OW 109
// if not tag then
15286: LD_VAR 0 6
15290: NOT
15291: IFFALSE 15467
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15293: LD_ADDR_VAR 0 3
15297: PUSH
15298: LD_EXP 66
15302: PPUSH
15303: LD_INT 57
15305: PUSH
15306: EMPTY
15307: LIST
15308: PPUSH
15309: CALL_OW 70
15313: ST_TO_ADDR
// if undone then
15314: LD_VAR 0 3
15318: IFFALSE 15340
// begin ComComplete ( i , undone [ 1 ] ) ;
15320: LD_VAR 0 1
15324: PPUSH
15325: LD_VAR 0 3
15329: PUSH
15330: LD_INT 1
15332: ARRAY
15333: PPUSH
15334: CALL 65154 0 2
// continue ;
15338: GO 15154
// end ; if cr or tmp or Count ( ruBuildings ) then
15340: LD_VAR 0 8
15344: IFTRUE 15352
15346: PUSH
15347: LD_VAR 0 2
15351: OR
15352: IFTRUE 15365
15354: PUSH
15355: LD_EXP 76
15359: PPUSH
15360: CALL 58984 0 1
15364: OR
15365: IFFALSE 15441
// begin if IsInUnit ( i ) then
15367: LD_VAR 0 1
15371: PPUSH
15372: CALL_OW 310
15376: IFFALSE 15387
// ComExitBuilding ( i ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: CALL_OW 122
// if tmp then
15387: LD_VAR 0 2
15391: IFFALSE 15407
// SetTag ( i , tRepair ) else
15393: LD_VAR 0 1
15397: PPUSH
15398: LD_INT 3
15400: PPUSH
15401: CALL_OW 109
15405: GO 15439
// if cr then
15407: LD_VAR 0 8
15411: IFFALSE 15427
// SetTag ( i , tCrates ) else
15413: LD_VAR 0 1
15417: PPUSH
15418: LD_INT 2
15420: PPUSH
15421: CALL_OW 109
15425: GO 15439
// SetTag ( i , tBuild ) ;
15427: LD_VAR 0 1
15431: PPUSH
15432: LD_INT 5
15434: PPUSH
15435: CALL_OW 109
// end else
15439: GO 15467
// if not IsInUnit ( i ) then
15441: LD_VAR 0 1
15445: PPUSH
15446: CALL_OW 310
15450: NOT
15451: IFFALSE 15467
// ComEnterUnit ( i , ruBase ) ;
15453: LD_VAR 0 1
15457: PPUSH
15458: LD_EXP 68
15462: PPUSH
15463: CALL_OW 120
// end ; if tag = tRepair then
15467: LD_VAR 0 6
15471: PUSH
15472: LD_INT 3
15474: EQUAL
15475: IFFALSE 15581
// begin if IsInUnit ( i ) then
15477: LD_VAR 0 1
15481: PPUSH
15482: CALL_OW 310
15486: IFFALSE 15499
// begin ComExitBuilding ( i ) ;
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 122
// continue ;
15497: GO 15154
// end ; if not tmp then
15499: LD_VAR 0 2
15503: NOT
15504: IFFALSE 15520
// begin SetTag ( i , 0 ) ;
15506: LD_VAR 0 1
15510: PPUSH
15511: LD_INT 0
15513: PPUSH
15514: CALL_OW 109
// continue ;
15518: GO 15154
// end ; if not HasTask ( i ) then
15520: LD_VAR 0 1
15524: PPUSH
15525: CALL_OW 314
15529: NOT
15530: IFFALSE 15550
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15532: LD_VAR 0 1
15536: PPUSH
15537: LD_VAR 0 2
15541: PUSH
15542: LD_INT 1
15544: ARRAY
15545: PPUSH
15546: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15550: LD_VAR 0 1
15554: PPUSH
15555: LD_EXP 66
15559: PPUSH
15560: CALL_OW 308
15564: NOT
15565: IFFALSE 15581
// ComMoveToArea ( i , ruBaseArea ) ;
15567: LD_VAR 0 1
15571: PPUSH
15572: LD_EXP 66
15576: PPUSH
15577: CALL_OW 113
// end ; if tag = tBuild then
15581: LD_VAR 0 6
15585: PUSH
15586: LD_INT 5
15588: EQUAL
15589: IFFALSE 15788
// begin if IsInUnit ( i ) then
15591: LD_VAR 0 1
15595: PPUSH
15596: CALL_OW 310
15600: IFFALSE 15613
// begin ComExitBuilding ( i ) ;
15602: LD_VAR 0 1
15606: PPUSH
15607: CALL_OW 122
// continue ;
15611: GO 15154
// end ; if not Count ( ruBuildings ) then
15613: LD_EXP 76
15617: PPUSH
15618: CALL 58984 0 1
15622: NOT
15623: IFFALSE 15641
// begin SetTag ( i , 0 ) ;
15625: LD_VAR 0 1
15629: PPUSH
15630: LD_INT 0
15632: PPUSH
15633: CALL_OW 109
// continue ;
15637: GO 15154
// end else
15639: GO 15680
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15641: LD_EXP 68
15645: PPUSH
15646: LD_EXP 76
15650: PUSH
15651: LD_INT 1
15653: ARRAY
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PPUSH
15659: CALL 99055 0 2
15663: NOT
15664: IFFALSE 15680
// begin SetTag ( i , 0 ) ;
15666: LD_VAR 0 1
15670: PPUSH
15671: LD_INT 0
15673: PPUSH
15674: CALL_OW 109
// continue ;
15678: GO 15154
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15680: LD_ADDR_VAR 0 3
15684: PUSH
15685: LD_EXP 66
15689: PPUSH
15690: LD_INT 57
15692: PUSH
15693: EMPTY
15694: LIST
15695: PPUSH
15696: CALL_OW 70
15700: ST_TO_ADDR
// if undone then
15701: LD_VAR 0 3
15705: IFFALSE 15727
// begin ComComplete ( i , undone [ 1 ] ) ;
15707: LD_VAR 0 1
15711: PPUSH
15712: LD_VAR 0 3
15716: PUSH
15717: LD_INT 1
15719: ARRAY
15720: PPUSH
15721: CALL 65154 0 2
// continue ;
15725: GO 15154
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15727: LD_VAR 0 1
15731: PPUSH
15732: LD_EXP 76
15736: PUSH
15737: LD_INT 1
15739: ARRAY
15740: PUSH
15741: LD_INT 1
15743: ARRAY
15744: PPUSH
15745: LD_EXP 76
15749: PUSH
15750: LD_INT 1
15752: ARRAY
15753: PUSH
15754: LD_INT 2
15756: ARRAY
15757: PPUSH
15758: LD_EXP 76
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: PUSH
15767: LD_INT 3
15769: ARRAY
15770: PPUSH
15771: LD_EXP 76
15775: PUSH
15776: LD_INT 1
15778: ARRAY
15779: PUSH
15780: LD_INT 4
15782: ARRAY
15783: PPUSH
15784: CALL_OW 145
// end ; if tag = tCrates then
15788: LD_VAR 0 6
15792: PUSH
15793: LD_INT 2
15795: EQUAL
15796: IFFALSE 15933
// begin if IsInUnit ( i ) then
15798: LD_VAR 0 1
15802: PPUSH
15803: CALL_OW 310
15807: IFFALSE 15820
// begin ComExitBuilding ( i ) ;
15809: LD_VAR 0 1
15813: PPUSH
15814: CALL_OW 122
// continue ;
15818: GO 15154
// end ; if not cr then
15820: LD_VAR 0 8
15824: NOT
15825: IFFALSE 15841
// begin SetTag ( i , 0 ) ;
15827: LD_VAR 0 1
15831: PPUSH
15832: LD_INT 0
15834: PPUSH
15835: CALL_OW 109
// continue ;
15839: GO 15154
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15841: LD_VAR 0 1
15845: PPUSH
15846: CALL_OW 314
15850: NOT
15851: IFFALSE 15904
15853: PUSH
15854: LD_INT 81
15856: PUSH
15857: LD_INT 3
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 92
15866: PUSH
15867: LD_VAR 0 8
15871: PUSH
15872: LD_INT 1
15874: ARRAY
15875: PUSH
15876: LD_VAR 0 8
15880: PUSH
15881: LD_INT 2
15883: ARRAY
15884: PUSH
15885: LD_INT 12
15887: PUSH
15888: EMPTY
15889: LIST
15890: LIST
15891: LIST
15892: LIST
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PPUSH
15898: CALL_OW 69
15902: NOT
15903: AND
15904: IFFALSE 15933
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15906: LD_VAR 0 1
15910: PPUSH
15911: LD_VAR 0 8
15915: PUSH
15916: LD_INT 1
15918: ARRAY
15919: PPUSH
15920: LD_VAR 0 8
15924: PUSH
15925: LD_INT 2
15927: ARRAY
15928: PPUSH
15929: CALL_OW 117
// end ; end ;
15933: GO 15154
15935: POP
15936: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15937: LD_ADDR_VAR 0 10
15941: PUSH
15942: LD_EXP 59
15946: PPUSH
15947: LD_INT 2
15949: PUSH
15950: LD_INT 25
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 25
15962: PUSH
15963: LD_INT 9
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 50
15977: PUSH
15978: EMPTY
15979: LIST
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PPUSH
15985: CALL_OW 72
15989: PUSH
15990: LD_EXP 61
15994: UNION
15995: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15996: LD_ADDR_VAR 0 12
16000: PUSH
16001: LD_EXP 66
16005: PPUSH
16006: LD_INT 81
16008: PUSH
16009: LD_INT 3
16011: PUSH
16012: EMPTY
16013: LIST
16014: LIST
16015: PPUSH
16016: CALL_OW 70
16020: ST_TO_ADDR
// if sol then
16021: LD_VAR 0 10
16025: IFFALSE 16559
// begin if enemyInBase then
16027: LD_VAR 0 12
16031: IFFALSE 16174
// begin for i in sol do
16033: LD_ADDR_VAR 0 1
16037: PUSH
16038: LD_VAR 0 10
16042: PUSH
16043: FOR_IN
16044: IFFALSE 16170
// begin tw := IsInUnit ( i ) ;
16046: LD_ADDR_VAR 0 7
16050: PUSH
16051: LD_VAR 0 1
16055: PPUSH
16056: CALL_OW 310
16060: ST_TO_ADDR
// if tw then
16061: LD_VAR 0 7
16065: IFFALSE 16144
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
16067: LD_VAR 0 7
16071: PUSH
16072: LD_INT 22
16074: PUSH
16075: LD_INT 3
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 101
16084: PUSH
16085: LD_INT 1
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 2
16094: PUSH
16095: LD_INT 30
16097: PUSH
16098: LD_INT 32
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: LD_INT 30
16107: PUSH
16108: LD_INT 31
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: EMPTY
16116: LIST
16117: LIST
16118: LIST
16119: PUSH
16120: EMPTY
16121: LIST
16122: LIST
16123: LIST
16124: PPUSH
16125: CALL_OW 69
16129: IN
16130: NOT
16131: IFFALSE 16142
// ComExitBuilding ( i ) ;
16133: LD_VAR 0 1
16137: PPUSH
16138: CALL_OW 122
// end else
16142: GO 16168
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
16144: LD_VAR 0 1
16148: PPUSH
16149: LD_VAR 0 12
16153: PPUSH
16154: LD_VAR 0 1
16158: PPUSH
16159: CALL_OW 74
16163: PPUSH
16164: CALL_OW 115
// end ;
16168: GO 16043
16170: POP
16171: POP
// end else
16172: GO 16559
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16174: LD_ADDR_VAR 0 13
16178: PUSH
16179: LD_EXP 66
16183: PPUSH
16184: LD_INT 3
16186: PUSH
16187: LD_INT 62
16189: PUSH
16190: EMPTY
16191: LIST
16192: PUSH
16193: EMPTY
16194: LIST
16195: LIST
16196: PUSH
16197: LD_INT 2
16199: PUSH
16200: LD_INT 30
16202: PUSH
16203: LD_INT 32
16205: PUSH
16206: EMPTY
16207: LIST
16208: LIST
16209: PUSH
16210: LD_INT 30
16212: PUSH
16213: LD_INT 4
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 30
16222: PUSH
16223: LD_INT 5
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 30
16232: PUSH
16233: LD_INT 31
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: PUSH
16240: EMPTY
16241: LIST
16242: LIST
16243: LIST
16244: LIST
16245: LIST
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PPUSH
16251: CALL_OW 70
16255: ST_TO_ADDR
// if empty then
16256: LD_VAR 0 13
16260: IFFALSE 16277
// empty := ReverseArray ( empty ) ;
16262: LD_ADDR_VAR 0 13
16266: PUSH
16267: LD_VAR 0 13
16271: PPUSH
16272: CALL 90040 0 1
16276: ST_TO_ADDR
// for i in sol do
16277: LD_ADDR_VAR 0 1
16281: PUSH
16282: LD_VAR 0 10
16286: PUSH
16287: FOR_IN
16288: IFFALSE 16557
// begin tag := GetTag ( i ) ;
16290: LD_ADDR_VAR 0 6
16294: PUSH
16295: LD_VAR 0 1
16299: PPUSH
16300: CALL_OW 110
16304: ST_TO_ADDR
// if tag = tMech then
16305: LD_VAR 0 6
16309: PUSH
16310: LD_INT 7
16312: EQUAL
16313: IFFALSE 16317
// continue ;
16315: GO 16287
// if GetLives ( i ) < 1000 and tag <> tHeal then
16317: LD_VAR 0 1
16321: PPUSH
16322: CALL_OW 256
16326: PUSH
16327: LD_INT 1000
16329: LESS
16330: IFFALSE 16342
16332: PUSH
16333: LD_VAR 0 6
16337: PUSH
16338: LD_INT 1
16340: NONEQUAL
16341: AND
16342: IFFALSE 16394
// begin SetTag ( i , tHeal ) ;
16344: LD_VAR 0 1
16348: PPUSH
16349: LD_INT 1
16351: PPUSH
16352: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16356: LD_VAR 0 1
16360: PPUSH
16361: LD_EXP 74
16365: PUSH
16366: LD_INT 1
16368: ARRAY
16369: PPUSH
16370: LD_EXP 74
16374: PUSH
16375: LD_INT 2
16377: ARRAY
16378: PPUSH
16379: CALL_OW 111
// AddComHold ( i ) ;
16383: LD_VAR 0 1
16387: PPUSH
16388: CALL_OW 200
// continue ;
16392: GO 16287
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16394: LD_VAR 0 1
16398: PPUSH
16399: CALL_OW 256
16403: PUSH
16404: LD_INT 1000
16406: EQUAL
16407: IFFALSE 16419
16409: PUSH
16410: LD_VAR 0 6
16414: PUSH
16415: LD_INT 1
16417: EQUAL
16418: AND
16419: IFFALSE 16435
// begin SetTag ( i , 0 ) ;
16421: LD_VAR 0 1
16425: PPUSH
16426: LD_INT 0
16428: PPUSH
16429: CALL_OW 109
// continue ;
16433: GO 16287
// end ; if HasTask ( i ) then
16435: LD_VAR 0 1
16439: PPUSH
16440: CALL_OW 314
16444: IFFALSE 16448
// continue ;
16446: GO 16287
// if not IsInUnit ( i ) and not tag and empty then
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 310
16457: NOT
16458: IFFALSE 16467
16460: PUSH
16461: LD_VAR 0 6
16465: NOT
16466: AND
16467: IFFALSE 16475
16469: PUSH
16470: LD_VAR 0 13
16474: AND
16475: IFFALSE 16555
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16477: LD_VAR 0 1
16481: PPUSH
16482: LD_VAR 0 13
16486: PUSH
16487: LD_INT 1
16489: ARRAY
16490: PPUSH
16491: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16495: LD_VAR 0 13
16499: PUSH
16500: LD_INT 1
16502: ARRAY
16503: PPUSH
16504: CALL_OW 266
16508: PUSH
16509: LD_INT 5
16511: EQUAL
16512: IFFALSE 16523
16514: PUSH
16515: LD_INT 50
16517: PPUSH
16518: CALL_OW 13
16522: AND
16523: IFFALSE 16537
// AddComChangeProfession ( i , class_bazooker ) ;
16525: LD_VAR 0 1
16529: PPUSH
16530: LD_INT 9
16532: PPUSH
16533: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16537: LD_ADDR_VAR 0 13
16541: PUSH
16542: LD_VAR 0 13
16546: PPUSH
16547: LD_INT 1
16549: PPUSH
16550: CALL_OW 3
16554: ST_TO_ADDR
// end ; end ;
16555: GO 16287
16557: POP
16558: POP
// end ; end ; end ;
16559: PPOPN 16
16561: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16562: LD_EXP 15
16566: IFFALSE 16579
16568: PUSH
16569: LD_EXP 60
16573: PPUSH
16574: CALL 58984 0 1
16578: AND
16579: IFFALSE 19183
16581: GO 16583
16583: DISABLE
16584: LD_INT 0
16586: PPUSH
16587: PPUSH
16588: PPUSH
16589: PPUSH
16590: PPUSH
16591: PPUSH
16592: PPUSH
16593: PPUSH
16594: PPUSH
16595: PPUSH
16596: PPUSH
16597: PPUSH
16598: PPUSH
16599: PPUSH
16600: PPUSH
16601: PPUSH
// begin enable ;
16602: ENABLE
// if ruTech then
16603: LD_EXP 65
16607: IFFALSE 16761
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16609: LD_ADDR_VAR 0 4
16613: PUSH
16614: LD_INT 22
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: EMPTY
16621: LIST
16622: LIST
16623: PUSH
16624: LD_INT 50
16626: PUSH
16627: EMPTY
16628: LIST
16629: PUSH
16630: LD_INT 2
16632: PUSH
16633: LD_INT 30
16635: PUSH
16636: LD_INT 6
16638: PUSH
16639: EMPTY
16640: LIST
16641: LIST
16642: PUSH
16643: LD_INT 30
16645: PUSH
16646: LD_INT 7
16648: PUSH
16649: EMPTY
16650: LIST
16651: LIST
16652: PUSH
16653: LD_INT 30
16655: PUSH
16656: LD_INT 8
16658: PUSH
16659: EMPTY
16660: LIST
16661: LIST
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: LIST
16673: PPUSH
16674: CALL_OW 69
16678: ST_TO_ADDR
// if lab then
16679: LD_VAR 0 4
16683: IFFALSE 16761
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16685: LD_VAR 0 4
16689: PUSH
16690: LD_INT 1
16692: ARRAY
16693: PPUSH
16694: CALL_OW 461
16698: PUSH
16699: LD_INT 2
16701: EQUAL
16702: IFFALSE 16761
// begin for i in ruTech do
16704: LD_ADDR_VAR 0 1
16708: PUSH
16709: LD_EXP 65
16713: PUSH
16714: FOR_IN
16715: IFFALSE 16759
// if CanBeResearched ( lab [ 1 ] , i ) then
16717: LD_VAR 0 4
16721: PUSH
16722: LD_INT 1
16724: ARRAY
16725: PPUSH
16726: LD_VAR 0 1
16730: PPUSH
16731: CALL_OW 430
16735: IFFALSE 16757
// begin ComResearch ( lab [ 1 ] , i ) ;
16737: LD_VAR 0 4
16741: PUSH
16742: LD_INT 1
16744: ARRAY
16745: PPUSH
16746: LD_VAR 0 1
16750: PPUSH
16751: CALL_OW 124
// break ;
16755: GO 16759
// end ;
16757: GO 16714
16759: POP
16760: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16761: LD_ADDR_VAR 0 14
16765: PUSH
16766: LD_EXP 67
16770: PPUSH
16771: LD_INT 22
16773: PUSH
16774: LD_INT 3
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: LD_INT 30
16783: PUSH
16784: LD_INT 3
16786: PUSH
16787: EMPTY
16788: LIST
16789: LIST
16790: PUSH
16791: LD_INT 50
16793: PUSH
16794: EMPTY
16795: LIST
16796: PUSH
16797: EMPTY
16798: LIST
16799: LIST
16800: LIST
16801: PPUSH
16802: CALL_OW 70
16806: ST_TO_ADDR
// if fac then
16807: LD_VAR 0 14
16811: IFFALSE 17408
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16813: LD_EXP 64
16817: PPUSH
16818: LD_INT 3
16820: PUSH
16821: LD_INT 60
16823: PUSH
16824: EMPTY
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 3
16833: PUSH
16834: LD_INT 25
16836: PUSH
16837: LD_INT 3
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: PPUSH
16852: CALL_OW 72
16856: IFFALSE 16999
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16858: LD_ADDR_VAR 0 1
16862: PUSH
16863: LD_EXP 64
16867: PPUSH
16868: LD_INT 3
16870: PUSH
16871: LD_INT 60
16873: PUSH
16874: EMPTY
16875: LIST
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 3
16883: PUSH
16884: LD_INT 25
16886: PUSH
16887: LD_INT 3
16889: PUSH
16890: EMPTY
16891: LIST
16892: LIST
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PUSH
16898: EMPTY
16899: LIST
16900: LIST
16901: PPUSH
16902: CALL_OW 72
16906: PUSH
16907: FOR_IN
16908: IFFALSE 16997
// begin SetTag ( i , tMech ) ;
16910: LD_VAR 0 1
16914: PPUSH
16915: LD_INT 7
16917: PPUSH
16918: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16922: LD_VAR 0 1
16926: PPUSH
16927: CALL_OW 310
16931: IFFALSE 16954
16933: PUSH
16934: LD_VAR 0 1
16938: PPUSH
16939: CALL_OW 310
16943: PUSH
16944: LD_VAR 0 14
16948: PUSH
16949: LD_INT 1
16951: ARRAY
16952: NONEQUAL
16953: AND
16954: IFFALSE 16965
// ComExitBuilding ( i ) ;
16956: LD_VAR 0 1
16960: PPUSH
16961: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16965: LD_VAR 0 1
16969: PPUSH
16970: LD_VAR 0 14
16974: PUSH
16975: LD_INT 1
16977: ARRAY
16978: PPUSH
16979: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16983: LD_VAR 0 1
16987: PPUSH
16988: LD_INT 3
16990: PPUSH
16991: CALL_OW 183
// end ;
16995: GO 16907
16997: POP
16998: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16999: LD_EXP 64
17003: PPUSH
17004: LD_INT 25
17006: PUSH
17007: LD_INT 3
17009: PUSH
17010: EMPTY
17011: LIST
17012: LIST
17013: PUSH
17014: LD_INT 3
17016: PUSH
17017: LD_INT 54
17019: PUSH
17020: EMPTY
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: PUSH
17027: LD_INT 120
17029: PUSH
17030: LD_INT 7
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 50
17039: PUSH
17040: EMPTY
17041: LIST
17042: PUSH
17043: EMPTY
17044: LIST
17045: LIST
17046: LIST
17047: LIST
17048: PPUSH
17049: CALL_OW 72
17053: IFFALSE 17140
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
17055: LD_ADDR_VAR 0 1
17059: PUSH
17060: LD_EXP 64
17064: PPUSH
17065: LD_INT 25
17067: PUSH
17068: LD_INT 3
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: PUSH
17075: LD_INT 3
17077: PUSH
17078: LD_INT 54
17080: PUSH
17081: EMPTY
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: PUSH
17088: LD_INT 120
17090: PUSH
17091: LD_INT 7
17093: PUSH
17094: EMPTY
17095: LIST
17096: LIST
17097: PUSH
17098: LD_INT 50
17100: PUSH
17101: EMPTY
17102: LIST
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: LIST
17108: LIST
17109: PPUSH
17110: CALL_OW 72
17114: PUSH
17115: FOR_IN
17116: IFFALSE 17138
// ComEnterUnit ( i , fac [ 1 ] ) ;
17118: LD_VAR 0 1
17122: PPUSH
17123: LD_VAR 0 14
17127: PUSH
17128: LD_INT 1
17130: ARRAY
17131: PPUSH
17132: CALL_OW 120
17136: GO 17115
17138: POP
17139: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
17140: LD_VAR 0 14
17144: PUSH
17145: LD_INT 1
17147: ARRAY
17148: PPUSH
17149: CALL_OW 461
17153: PUSH
17154: LD_INT 2
17156: EQUAL
17157: IFFALSE 17408
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
17159: LD_ADDR_VAR 0 15
17163: PUSH
17164: LD_EXP 67
17168: PPUSH
17169: LD_INT 2
17171: PUSH
17172: LD_INT 30
17174: PUSH
17175: LD_INT 32
17177: PUSH
17178: EMPTY
17179: LIST
17180: LIST
17181: PUSH
17182: LD_INT 30
17184: PUSH
17185: LD_INT 33
17187: PUSH
17188: EMPTY
17189: LIST
17190: LIST
17191: PUSH
17192: EMPTY
17193: LIST
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 35
17199: PUSH
17200: LD_INT 0
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: EMPTY
17208: LIST
17209: LIST
17210: PPUSH
17211: CALL_OW 70
17215: ST_TO_ADDR
// if emptyTowers then
17216: LD_VAR 0 15
17220: IFFALSE 17270
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17222: LD_ADDR_VAR 0 16
17226: PUSH
17227: LD_VAR 0 15
17231: PUSH
17232: LD_INT 1
17234: ARRAY
17235: PPUSH
17236: LD_EXP 67
17240: PPUSH
17241: CALL 67309 0 2
17245: ST_TO_ADDR
// if weapon then
17246: LD_VAR 0 16
17250: IFFALSE 17270
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17252: LD_VAR 0 15
17256: PUSH
17257: LD_INT 1
17259: ARRAY
17260: PPUSH
17261: LD_VAR 0 16
17265: PPUSH
17266: CALL_OW 148
// end ; if ruConstructList2 then
17270: LD_EXP 71
17274: IFFALSE 17408
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17276: LD_VAR 0 14
17280: PUSH
17281: LD_INT 1
17283: ARRAY
17284: PPUSH
17285: LD_EXP 71
17289: PUSH
17290: LD_INT 1
17292: ARRAY
17293: PUSH
17294: LD_INT 1
17296: ARRAY
17297: PPUSH
17298: LD_EXP 71
17302: PUSH
17303: LD_INT 1
17305: ARRAY
17306: PUSH
17307: LD_INT 2
17309: ARRAY
17310: PPUSH
17311: LD_EXP 71
17315: PUSH
17316: LD_INT 1
17318: ARRAY
17319: PUSH
17320: LD_INT 3
17322: ARRAY
17323: PPUSH
17324: LD_EXP 71
17328: PUSH
17329: LD_INT 1
17331: ARRAY
17332: PUSH
17333: LD_INT 4
17335: ARRAY
17336: PPUSH
17337: CALL_OW 448
17341: IFFALSE 17408
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17343: LD_VAR 0 14
17347: PUSH
17348: LD_INT 1
17350: ARRAY
17351: PPUSH
17352: LD_EXP 71
17356: PUSH
17357: LD_INT 1
17359: ARRAY
17360: PUSH
17361: LD_INT 1
17363: ARRAY
17364: PPUSH
17365: LD_EXP 71
17369: PUSH
17370: LD_INT 1
17372: ARRAY
17373: PUSH
17374: LD_INT 2
17376: ARRAY
17377: PPUSH
17378: LD_EXP 71
17382: PUSH
17383: LD_INT 1
17385: ARRAY
17386: PUSH
17387: LD_INT 3
17389: ARRAY
17390: PPUSH
17391: LD_EXP 71
17395: PUSH
17396: LD_INT 1
17398: ARRAY
17399: PUSH
17400: LD_INT 4
17402: ARRAY
17403: PPUSH
17404: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17408: LD_ADDR_VAR 0 2
17412: PUSH
17413: LD_EXP 67
17417: PPUSH
17418: LD_INT 21
17420: PUSH
17421: LD_INT 3
17423: PUSH
17424: EMPTY
17425: LIST
17426: LIST
17427: PUSH
17428: LD_INT 3
17430: PUSH
17431: LD_INT 57
17433: PUSH
17434: EMPTY
17435: LIST
17436: PUSH
17437: EMPTY
17438: LIST
17439: LIST
17440: PUSH
17441: LD_INT 3
17443: PUSH
17444: LD_INT 24
17446: PUSH
17447: LD_INT 1000
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PUSH
17458: EMPTY
17459: LIST
17460: LIST
17461: LIST
17462: PPUSH
17463: CALL_OW 70
17467: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17468: LD_ADDR_VAR 0 8
17472: PUSH
17473: LD_EXP 73
17477: PPUSH
17478: CALL_OW 435
17482: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17483: LD_ADDR_VAR 0 9
17487: PUSH
17488: LD_EXP 60
17492: PPUSH
17493: LD_INT 25
17495: PUSH
17496: LD_INT 4
17498: PUSH
17499: EMPTY
17500: LIST
17501: LIST
17502: PUSH
17503: LD_INT 50
17505: PUSH
17506: EMPTY
17507: LIST
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 72
17517: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17518: LD_ADDR_VAR 0 4
17522: PUSH
17523: LD_EXP 67
17527: PPUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 30
17533: PUSH
17534: LD_INT 6
17536: PUSH
17537: EMPTY
17538: LIST
17539: LIST
17540: PUSH
17541: LD_INT 30
17543: PUSH
17544: LD_INT 7
17546: PUSH
17547: EMPTY
17548: LIST
17549: LIST
17550: PUSH
17551: LD_INT 30
17553: PUSH
17554: LD_INT 8
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: PUSH
17561: EMPTY
17562: LIST
17563: LIST
17564: LIST
17565: LIST
17566: PPUSH
17567: CALL_OW 70
17571: ST_TO_ADDR
// if sci then
17572: LD_VAR 0 9
17576: IFFALSE 17737
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17578: LD_ADDR_VAR 0 11
17582: PUSH
17583: LD_EXP 60
17587: PPUSH
17588: LD_INT 95
17590: PUSH
17591: LD_EXP 67
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PUSH
17600: LD_INT 120
17602: PUSH
17603: LD_INT 1
17605: PUSH
17606: EMPTY
17607: LIST
17608: LIST
17609: PUSH
17610: EMPTY
17611: LIST
17612: LIST
17613: PPUSH
17614: CALL_OW 72
17618: ST_TO_ADDR
// if hurtUnits then
17619: LD_VAR 0 11
17623: IFFALSE 17684
// begin for i in sci do
17625: LD_ADDR_VAR 0 1
17629: PUSH
17630: LD_VAR 0 9
17634: PUSH
17635: FOR_IN
17636: IFFALSE 17680
// if IsInUnit ( i ) then
17638: LD_VAR 0 1
17642: PPUSH
17643: CALL_OW 310
17647: IFFALSE 17660
// ComExitBuilding ( i ) else
17649: LD_VAR 0 1
17653: PPUSH
17654: CALL_OW 122
17658: GO 17678
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17660: LD_VAR 0 1
17664: PPUSH
17665: LD_VAR 0 11
17669: PUSH
17670: LD_INT 1
17672: ARRAY
17673: PPUSH
17674: CALL_OW 128
17678: GO 17635
17680: POP
17681: POP
// end else
17682: GO 17737
// if lab then
17684: LD_VAR 0 4
17688: IFFALSE 17737
// begin for i in sci do
17690: LD_ADDR_VAR 0 1
17694: PUSH
17695: LD_VAR 0 9
17699: PUSH
17700: FOR_IN
17701: IFFALSE 17735
// if not IsInUnit ( i ) then
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 310
17712: NOT
17713: IFFALSE 17733
// ComEnterUnit ( i , lab [ 1 ] ) ;
17715: LD_VAR 0 1
17719: PPUSH
17720: LD_VAR 0 4
17724: PUSH
17725: LD_INT 1
17727: ARRAY
17728: PPUSH
17729: CALL_OW 120
17733: GO 17700
17735: POP
17736: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17737: LD_ADDR_VAR 0 5
17741: PUSH
17742: LD_EXP 60
17746: PPUSH
17747: LD_INT 25
17749: PUSH
17750: LD_INT 2
17752: PUSH
17753: EMPTY
17754: LIST
17755: LIST
17756: PPUSH
17757: CALL_OW 72
17761: ST_TO_ADDR
// if eng then
17762: LD_VAR 0 5
17766: IFFALSE 18561
// begin for i in eng do
17768: LD_ADDR_VAR 0 1
17772: PUSH
17773: LD_VAR 0 5
17777: PUSH
17778: FOR_IN
17779: IFFALSE 18559
// begin tag := GetTag ( i ) ;
17781: LD_ADDR_VAR 0 6
17785: PUSH
17786: LD_VAR 0 1
17790: PPUSH
17791: CALL_OW 110
17795: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17796: LD_VAR 0 1
17800: PPUSH
17801: CALL_OW 256
17805: PUSH
17806: LD_INT 800
17808: LESS
17809: IFFALSE 17821
17811: PUSH
17812: LD_VAR 0 6
17816: PUSH
17817: LD_INT 1
17819: NONEQUAL
17820: AND
17821: IFFALSE 17871
// begin SetTag ( i , tHeal ) ;
17823: LD_VAR 0 1
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17835: LD_VAR 0 1
17839: PPUSH
17840: LD_EXP 75
17844: PUSH
17845: LD_INT 1
17847: ARRAY
17848: PPUSH
17849: LD_EXP 75
17853: PUSH
17854: LD_INT 2
17856: ARRAY
17857: PPUSH
17858: CALL_OW 111
// AddComHold ( i ) ;
17862: LD_VAR 0 1
17866: PPUSH
17867: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17871: LD_VAR 0 6
17875: PUSH
17876: LD_INT 1
17878: EQUAL
17879: IFFALSE 17896
17881: PUSH
17882: LD_VAR 0 1
17886: PPUSH
17887: CALL_OW 256
17891: PUSH
17892: LD_INT 1000
17894: EQUAL
17895: AND
17896: IFFALSE 17910
// SetTag ( i , 0 ) ;
17898: LD_VAR 0 1
17902: PPUSH
17903: LD_INT 0
17905: PPUSH
17906: CALL_OW 109
// if not tag then
17910: LD_VAR 0 6
17914: NOT
17915: IFFALSE 18091
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17917: LD_ADDR_VAR 0 3
17921: PUSH
17922: LD_EXP 67
17926: PPUSH
17927: LD_INT 57
17929: PUSH
17930: EMPTY
17931: LIST
17932: PPUSH
17933: CALL_OW 70
17937: ST_TO_ADDR
// if undone then
17938: LD_VAR 0 3
17942: IFFALSE 17964
// begin ComComplete ( i , undone [ 1 ] ) ;
17944: LD_VAR 0 1
17948: PPUSH
17949: LD_VAR 0 3
17953: PUSH
17954: LD_INT 1
17956: ARRAY
17957: PPUSH
17958: CALL 65154 0 2
// continue ;
17962: GO 17778
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17964: LD_VAR 0 8
17968: IFTRUE 17976
17970: PUSH
17971: LD_VAR 0 2
17975: OR
17976: IFTRUE 17989
17978: PUSH
17979: LD_EXP 77
17983: PPUSH
17984: CALL 58984 0 1
17988: OR
17989: IFFALSE 18065
// begin if IsInUnit ( i ) then
17991: LD_VAR 0 1
17995: PPUSH
17996: CALL_OW 310
18000: IFFALSE 18011
// ComExitBuilding ( i ) ;
18002: LD_VAR 0 1
18006: PPUSH
18007: CALL_OW 122
// if tmp then
18011: LD_VAR 0 2
18015: IFFALSE 18031
// SetTag ( i , tRepair ) else
18017: LD_VAR 0 1
18021: PPUSH
18022: LD_INT 3
18024: PPUSH
18025: CALL_OW 109
18029: GO 18063
// if cr then
18031: LD_VAR 0 8
18035: IFFALSE 18051
// SetTag ( i , tCrates ) else
18037: LD_VAR 0 1
18041: PPUSH
18042: LD_INT 2
18044: PPUSH
18045: CALL_OW 109
18049: GO 18063
// SetTag ( i , tBuild ) ;
18051: LD_VAR 0 1
18055: PPUSH
18056: LD_INT 5
18058: PPUSH
18059: CALL_OW 109
// end else
18063: GO 18091
// if not IsInUnit ( i ) then
18065: LD_VAR 0 1
18069: PPUSH
18070: CALL_OW 310
18074: NOT
18075: IFFALSE 18091
// ComEnterUnit ( i , ruBase2 ) ;
18077: LD_VAR 0 1
18081: PPUSH
18082: LD_EXP 69
18086: PPUSH
18087: CALL_OW 120
// end ; if tag = tRepair then
18091: LD_VAR 0 6
18095: PUSH
18096: LD_INT 3
18098: EQUAL
18099: IFFALSE 18205
// begin if IsInUnit ( i ) then
18101: LD_VAR 0 1
18105: PPUSH
18106: CALL_OW 310
18110: IFFALSE 18123
// begin ComExitBuilding ( i ) ;
18112: LD_VAR 0 1
18116: PPUSH
18117: CALL_OW 122
// continue ;
18121: GO 17778
// end ; if not tmp then
18123: LD_VAR 0 2
18127: NOT
18128: IFFALSE 18144
// begin SetTag ( i , 0 ) ;
18130: LD_VAR 0 1
18134: PPUSH
18135: LD_INT 0
18137: PPUSH
18138: CALL_OW 109
// continue ;
18142: GO 17778
// end ; if not HasTask ( i ) then
18144: LD_VAR 0 1
18148: PPUSH
18149: CALL_OW 314
18153: NOT
18154: IFFALSE 18174
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18156: LD_VAR 0 1
18160: PPUSH
18161: LD_VAR 0 2
18165: PUSH
18166: LD_INT 1
18168: ARRAY
18169: PPUSH
18170: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18174: LD_VAR 0 1
18178: PPUSH
18179: LD_EXP 67
18183: PPUSH
18184: CALL_OW 308
18188: NOT
18189: IFFALSE 18205
// ComMoveToArea ( i , ruBaseArea2 ) ;
18191: LD_VAR 0 1
18195: PPUSH
18196: LD_EXP 67
18200: PPUSH
18201: CALL_OW 113
// end ; if tag = tBuild then
18205: LD_VAR 0 6
18209: PUSH
18210: LD_INT 5
18212: EQUAL
18213: IFFALSE 18412
// begin if IsInUnit ( i ) then
18215: LD_VAR 0 1
18219: PPUSH
18220: CALL_OW 310
18224: IFFALSE 18237
// begin ComExitBuilding ( i ) ;
18226: LD_VAR 0 1
18230: PPUSH
18231: CALL_OW 122
// continue ;
18235: GO 17778
// end ; if not Count ( ruBuildings2 ) then
18237: LD_EXP 77
18241: PPUSH
18242: CALL 58984 0 1
18246: NOT
18247: IFFALSE 18265
// begin SetTag ( i , 0 ) ;
18249: LD_VAR 0 1
18253: PPUSH
18254: LD_INT 0
18256: PPUSH
18257: CALL_OW 109
// continue ;
18261: GO 17778
// end else
18263: GO 18304
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18265: LD_EXP 69
18269: PPUSH
18270: LD_EXP 77
18274: PUSH
18275: LD_INT 1
18277: ARRAY
18278: PUSH
18279: LD_INT 1
18281: ARRAY
18282: PPUSH
18283: CALL 99055 0 2
18287: NOT
18288: IFFALSE 18304
// begin SetTag ( i , 0 ) ;
18290: LD_VAR 0 1
18294: PPUSH
18295: LD_INT 0
18297: PPUSH
18298: CALL_OW 109
// continue ;
18302: GO 17778
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18304: LD_ADDR_VAR 0 3
18308: PUSH
18309: LD_EXP 67
18313: PPUSH
18314: LD_INT 57
18316: PUSH
18317: EMPTY
18318: LIST
18319: PPUSH
18320: CALL_OW 70
18324: ST_TO_ADDR
// if undone then
18325: LD_VAR 0 3
18329: IFFALSE 18351
// begin ComComplete ( i , undone [ 1 ] ) ;
18331: LD_VAR 0 1
18335: PPUSH
18336: LD_VAR 0 3
18340: PUSH
18341: LD_INT 1
18343: ARRAY
18344: PPUSH
18345: CALL 65154 0 2
// continue ;
18349: GO 17778
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18351: LD_VAR 0 1
18355: PPUSH
18356: LD_EXP 77
18360: PUSH
18361: LD_INT 1
18363: ARRAY
18364: PUSH
18365: LD_INT 1
18367: ARRAY
18368: PPUSH
18369: LD_EXP 77
18373: PUSH
18374: LD_INT 1
18376: ARRAY
18377: PUSH
18378: LD_INT 2
18380: ARRAY
18381: PPUSH
18382: LD_EXP 77
18386: PUSH
18387: LD_INT 1
18389: ARRAY
18390: PUSH
18391: LD_INT 3
18393: ARRAY
18394: PPUSH
18395: LD_EXP 77
18399: PUSH
18400: LD_INT 1
18402: ARRAY
18403: PUSH
18404: LD_INT 4
18406: ARRAY
18407: PPUSH
18408: CALL_OW 145
// end ; if tag = tCrates then
18412: LD_VAR 0 6
18416: PUSH
18417: LD_INT 2
18419: EQUAL
18420: IFFALSE 18557
// begin if IsInUnit ( i ) then
18422: LD_VAR 0 1
18426: PPUSH
18427: CALL_OW 310
18431: IFFALSE 18444
// begin ComExitBuilding ( i ) ;
18433: LD_VAR 0 1
18437: PPUSH
18438: CALL_OW 122
// continue ;
18442: GO 17778
// end ; if not cr then
18444: LD_VAR 0 8
18448: NOT
18449: IFFALSE 18465
// begin SetTag ( i , 0 ) ;
18451: LD_VAR 0 1
18455: PPUSH
18456: LD_INT 0
18458: PPUSH
18459: CALL_OW 109
// continue ;
18463: GO 17778
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18465: LD_VAR 0 1
18469: PPUSH
18470: CALL_OW 314
18474: NOT
18475: IFFALSE 18528
18477: PUSH
18478: LD_INT 81
18480: PUSH
18481: LD_INT 3
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 92
18490: PUSH
18491: LD_VAR 0 8
18495: PUSH
18496: LD_INT 1
18498: ARRAY
18499: PUSH
18500: LD_VAR 0 8
18504: PUSH
18505: LD_INT 2
18507: ARRAY
18508: PUSH
18509: LD_INT 12
18511: PUSH
18512: EMPTY
18513: LIST
18514: LIST
18515: LIST
18516: LIST
18517: PUSH
18518: EMPTY
18519: LIST
18520: LIST
18521: PPUSH
18522: CALL_OW 69
18526: NOT
18527: AND
18528: IFFALSE 18557
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18530: LD_VAR 0 1
18534: PPUSH
18535: LD_VAR 0 8
18539: PUSH
18540: LD_INT 1
18542: ARRAY
18543: PPUSH
18544: LD_VAR 0 8
18548: PUSH
18549: LD_INT 2
18551: ARRAY
18552: PPUSH
18553: CALL_OW 117
// end ; end ;
18557: GO 17778
18559: POP
18560: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18561: LD_ADDR_VAR 0 10
18565: PUSH
18566: LD_EXP 60
18570: PPUSH
18571: LD_INT 2
18573: PUSH
18574: LD_INT 25
18576: PUSH
18577: LD_INT 1
18579: PUSH
18580: EMPTY
18581: LIST
18582: LIST
18583: PUSH
18584: LD_INT 25
18586: PUSH
18587: LD_INT 9
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: PUSH
18594: EMPTY
18595: LIST
18596: LIST
18597: LIST
18598: PUSH
18599: LD_INT 50
18601: PUSH
18602: EMPTY
18603: LIST
18604: PUSH
18605: EMPTY
18606: LIST
18607: LIST
18608: PPUSH
18609: CALL_OW 72
18613: PUSH
18614: LD_EXP 62
18618: UNION
18619: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18620: LD_ADDR_VAR 0 12
18624: PUSH
18625: LD_EXP 67
18629: PPUSH
18630: LD_INT 81
18632: PUSH
18633: LD_INT 3
18635: PUSH
18636: EMPTY
18637: LIST
18638: LIST
18639: PPUSH
18640: CALL_OW 70
18644: ST_TO_ADDR
// if sol then
18645: LD_VAR 0 10
18649: IFFALSE 19183
// begin if enemyInBase then
18651: LD_VAR 0 12
18655: IFFALSE 18798
// begin for i in sol do
18657: LD_ADDR_VAR 0 1
18661: PUSH
18662: LD_VAR 0 10
18666: PUSH
18667: FOR_IN
18668: IFFALSE 18794
// begin tw := IsInUnit ( i ) ;
18670: LD_ADDR_VAR 0 7
18674: PUSH
18675: LD_VAR 0 1
18679: PPUSH
18680: CALL_OW 310
18684: ST_TO_ADDR
// if tw then
18685: LD_VAR 0 7
18689: IFFALSE 18768
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18691: LD_VAR 0 7
18695: PUSH
18696: LD_INT 22
18698: PUSH
18699: LD_INT 3
18701: PUSH
18702: EMPTY
18703: LIST
18704: LIST
18705: PUSH
18706: LD_INT 101
18708: PUSH
18709: LD_INT 1
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: PUSH
18716: LD_INT 2
18718: PUSH
18719: LD_INT 30
18721: PUSH
18722: LD_INT 32
18724: PUSH
18725: EMPTY
18726: LIST
18727: LIST
18728: PUSH
18729: LD_INT 30
18731: PUSH
18732: LD_INT 31
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: PUSH
18739: EMPTY
18740: LIST
18741: LIST
18742: LIST
18743: PUSH
18744: EMPTY
18745: LIST
18746: LIST
18747: LIST
18748: PPUSH
18749: CALL_OW 69
18753: IN
18754: NOT
18755: IFFALSE 18766
// ComExitBuilding ( i ) ;
18757: LD_VAR 0 1
18761: PPUSH
18762: CALL_OW 122
// end else
18766: GO 18792
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18768: LD_VAR 0 1
18772: PPUSH
18773: LD_VAR 0 12
18777: PPUSH
18778: LD_VAR 0 1
18782: PPUSH
18783: CALL_OW 74
18787: PPUSH
18788: CALL_OW 115
// end ;
18792: GO 18667
18794: POP
18795: POP
// end else
18796: GO 19183
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18798: LD_ADDR_VAR 0 13
18802: PUSH
18803: LD_EXP 67
18807: PPUSH
18808: LD_INT 3
18810: PUSH
18811: LD_INT 62
18813: PUSH
18814: EMPTY
18815: LIST
18816: PUSH
18817: EMPTY
18818: LIST
18819: LIST
18820: PUSH
18821: LD_INT 2
18823: PUSH
18824: LD_INT 30
18826: PUSH
18827: LD_INT 32
18829: PUSH
18830: EMPTY
18831: LIST
18832: LIST
18833: PUSH
18834: LD_INT 30
18836: PUSH
18837: LD_INT 4
18839: PUSH
18840: EMPTY
18841: LIST
18842: LIST
18843: PUSH
18844: LD_INT 30
18846: PUSH
18847: LD_INT 5
18849: PUSH
18850: EMPTY
18851: LIST
18852: LIST
18853: PUSH
18854: LD_INT 30
18856: PUSH
18857: LD_INT 31
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PPUSH
18875: CALL_OW 70
18879: ST_TO_ADDR
// if empty then
18880: LD_VAR 0 13
18884: IFFALSE 18901
// empty := ReverseArray ( empty ) ;
18886: LD_ADDR_VAR 0 13
18890: PUSH
18891: LD_VAR 0 13
18895: PPUSH
18896: CALL 90040 0 1
18900: ST_TO_ADDR
// for i in sol do
18901: LD_ADDR_VAR 0 1
18905: PUSH
18906: LD_VAR 0 10
18910: PUSH
18911: FOR_IN
18912: IFFALSE 19181
// begin tag := GetTag ( i ) ;
18914: LD_ADDR_VAR 0 6
18918: PUSH
18919: LD_VAR 0 1
18923: PPUSH
18924: CALL_OW 110
18928: ST_TO_ADDR
// if tag = tMech then
18929: LD_VAR 0 6
18933: PUSH
18934: LD_INT 7
18936: EQUAL
18937: IFFALSE 18941
// continue ;
18939: GO 18911
// if GetLives ( i ) < 1000 and tag <> tHeal then
18941: LD_VAR 0 1
18945: PPUSH
18946: CALL_OW 256
18950: PUSH
18951: LD_INT 1000
18953: LESS
18954: IFFALSE 18966
18956: PUSH
18957: LD_VAR 0 6
18961: PUSH
18962: LD_INT 1
18964: NONEQUAL
18965: AND
18966: IFFALSE 19018
// begin SetTag ( i , tHeal ) ;
18968: LD_VAR 0 1
18972: PPUSH
18973: LD_INT 1
18975: PPUSH
18976: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18980: LD_VAR 0 1
18984: PPUSH
18985: LD_EXP 75
18989: PUSH
18990: LD_INT 1
18992: ARRAY
18993: PPUSH
18994: LD_EXP 75
18998: PUSH
18999: LD_INT 2
19001: ARRAY
19002: PPUSH
19003: CALL_OW 111
// AddComHold ( i ) ;
19007: LD_VAR 0 1
19011: PPUSH
19012: CALL_OW 200
// continue ;
19016: GO 18911
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
19018: LD_VAR 0 1
19022: PPUSH
19023: CALL_OW 256
19027: PUSH
19028: LD_INT 1000
19030: EQUAL
19031: IFFALSE 19043
19033: PUSH
19034: LD_VAR 0 6
19038: PUSH
19039: LD_INT 1
19041: EQUAL
19042: AND
19043: IFFALSE 19059
// begin SetTag ( i , 0 ) ;
19045: LD_VAR 0 1
19049: PPUSH
19050: LD_INT 0
19052: PPUSH
19053: CALL_OW 109
// continue ;
19057: GO 18911
// end ; if HasTask ( i ) then
19059: LD_VAR 0 1
19063: PPUSH
19064: CALL_OW 314
19068: IFFALSE 19072
// continue ;
19070: GO 18911
// if not IsInUnit ( i ) and not tag and empty then
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 310
19081: NOT
19082: IFFALSE 19091
19084: PUSH
19085: LD_VAR 0 6
19089: NOT
19090: AND
19091: IFFALSE 19099
19093: PUSH
19094: LD_VAR 0 13
19098: AND
19099: IFFALSE 19179
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
19101: LD_VAR 0 1
19105: PPUSH
19106: LD_VAR 0 13
19110: PUSH
19111: LD_INT 1
19113: ARRAY
19114: PPUSH
19115: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
19119: LD_VAR 0 13
19123: PUSH
19124: LD_INT 1
19126: ARRAY
19127: PPUSH
19128: CALL_OW 266
19132: PUSH
19133: LD_INT 5
19135: EQUAL
19136: IFFALSE 19147
19138: PUSH
19139: LD_INT 50
19141: PPUSH
19142: CALL_OW 13
19146: AND
19147: IFFALSE 19161
// AddComChangeProfession ( i , class_bazooker ) ;
19149: LD_VAR 0 1
19153: PPUSH
19154: LD_INT 9
19156: PPUSH
19157: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
19161: LD_ADDR_VAR 0 13
19165: PUSH
19166: LD_VAR 0 13
19170: PPUSH
19171: LD_INT 1
19173: PPUSH
19174: CALL_OW 3
19178: ST_TO_ADDR
// end ; end ;
19179: GO 18911
19181: POP
19182: POP
// end ; end ; end ;
19183: PPOPN 16
19185: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19186: LD_EXP 79
19190: IFFALSE 19198
19192: PUSH
19193: LD_EXP 22
19197: AND
19198: IFFALSE 19773
19200: GO 19202
19202: DISABLE
19203: LD_INT 0
19205: PPUSH
19206: PPUSH
19207: PPUSH
// begin enable ;
19208: ENABLE
// if not ruTanks then
19209: LD_EXP 79
19213: NOT
19214: IFFALSE 19218
// exit ;
19216: GO 19773
// for i in ruTanks do
19218: LD_ADDR_VAR 0 1
19222: PUSH
19223: LD_EXP 79
19227: PUSH
19228: FOR_IN
19229: IFFALSE 19771
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19231: LD_VAR 0 1
19235: PPUSH
19236: CALL_OW 302
19240: NOT
19241: IFTRUE 19258
19243: PUSH
19244: LD_VAR 0 1
19248: PPUSH
19249: CALL_OW 255
19253: PUSH
19254: LD_INT 3
19256: NONEQUAL
19257: OR
19258: IFFALSE 19278
// begin ruTanks := ruTanks diff i ;
19260: LD_ADDR_EXP 79
19264: PUSH
19265: LD_EXP 79
19269: PUSH
19270: LD_VAR 0 1
19274: DIFF
19275: ST_TO_ADDR
// continue ;
19276: GO 19228
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19278: LD_VAR 0 1
19282: PPUSH
19283: CALL_OW 110
19287: NOT
19288: IFTRUE 19305
19290: PUSH
19291: LD_VAR 0 1
19295: PPUSH
19296: CALL_OW 110
19300: PUSH
19301: LD_INT 0
19303: EQUAL
19304: OR
19305: IFFALSE 19482
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19307: LD_VAR 0 1
19311: PPUSH
19312: CALL_OW 262
19316: PUSH
19317: LD_INT 1
19319: EQUAL
19320: IFFALSE 19337
19322: PUSH
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 261
19332: PUSH
19333: LD_INT 50
19335: LESS
19336: AND
19337: IFFALSE 19350
19339: PUSH
19340: LD_EXP 68
19344: PPUSH
19345: CALL_OW 302
19349: AND
19350: IFFALSE 19437
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19352: LD_VAR 0 1
19356: PPUSH
19357: LD_EXP 68
19361: PPUSH
19362: CALL_OW 250
19366: PPUSH
19367: LD_EXP 68
19371: PPUSH
19372: CALL_OW 251
19376: PPUSH
19377: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19381: LD_INT 35
19383: PPUSH
19384: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19388: LD_VAR 0 1
19392: PPUSH
19393: LD_EXP 68
19397: PPUSH
19398: CALL_OW 250
19402: PPUSH
19403: LD_EXP 68
19407: PPUSH
19408: CALL_OW 251
19412: PPUSH
19413: CALL_OW 297
19417: PUSH
19418: LD_INT 6
19420: LESS
19421: IFFALSE 19381
// SetFuel ( i , 100 ) ;
19423: LD_VAR 0 1
19427: PPUSH
19428: LD_INT 100
19430: PPUSH
19431: CALL_OW 240
// end else
19435: GO 19482
// if not IsInArea ( i , ruParkingArea ) then
19437: LD_VAR 0 1
19441: PPUSH
19442: LD_EXP 82
19446: PPUSH
19447: CALL_OW 308
19451: NOT
19452: IFFALSE 19470
// ComMoveToArea ( i , ruParkingArea ) else
19454: LD_VAR 0 1
19458: PPUSH
19459: LD_EXP 82
19463: PPUSH
19464: CALL_OW 113
19468: GO 19482
// SetTag ( i , tParking ) ;
19470: LD_VAR 0 1
19474: PPUSH
19475: LD_INT 12
19477: PPUSH
19478: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19482: LD_VAR 0 1
19486: PPUSH
19487: CALL_OW 110
19491: PUSH
19492: LD_INT 12
19494: EQUAL
19495: IFFALSE 19625
// begin if GetLives ( i ) < 650 then
19497: LD_VAR 0 1
19501: PPUSH
19502: CALL_OW 256
19506: PUSH
19507: LD_INT 650
19509: LESS
19510: IFFALSE 19602
// begin if not IsDrivenBy ( i ) then
19512: LD_VAR 0 1
19516: PPUSH
19517: CALL_OW 311
19521: NOT
19522: IFFALSE 19526
// continue ;
19524: GO 19228
// mech := IsDrivenBy ( i ) ;
19526: LD_ADDR_VAR 0 2
19530: PUSH
19531: LD_VAR 0 1
19535: PPUSH
19536: CALL_OW 311
19540: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19541: LD_VAR 0 2
19545: PPUSH
19546: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19550: LD_VAR 0 2
19554: PPUSH
19555: LD_VAR 0 1
19559: PPUSH
19560: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19564: LD_INT 35
19566: PPUSH
19567: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19571: LD_VAR 0 1
19575: PPUSH
19576: CALL_OW 256
19580: PUSH
19581: LD_INT 1000
19583: EQUAL
19584: IFFALSE 19564
// ComEnterUnit ( mech , i ) ;
19586: LD_VAR 0 2
19590: PPUSH
19591: LD_VAR 0 1
19595: PPUSH
19596: CALL_OW 120
// end else
19600: GO 19625
// if IsDrivenBy ( i ) then
19602: LD_VAR 0 1
19606: PPUSH
19607: CALL_OW 311
19611: IFFALSE 19625
// SetTag ( i , tAttack ) ;
19613: LD_VAR 0 1
19617: PPUSH
19618: LD_INT 13
19620: PPUSH
19621: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19625: LD_VAR 0 1
19629: PPUSH
19630: CALL_OW 110
19634: PUSH
19635: LD_INT 13
19637: EQUAL
19638: IFFALSE 19769
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19640: LD_ADDR_VAR 0 3
19644: PUSH
19645: LD_EXP 66
19649: PPUSH
19650: LD_INT 81
19652: PUSH
19653: LD_INT 3
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PPUSH
19660: CALL_OW 70
19664: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19665: LD_VAR 0 1
19669: PPUSH
19670: CALL_OW 256
19674: PUSH
19675: LD_INT 650
19677: LESS
19678: IFFALSE 19703
// begin ComStop ( i ) ;
19680: LD_VAR 0 1
19684: PPUSH
19685: CALL_OW 141
// SetTag ( i , 0 ) ;
19689: LD_VAR 0 1
19693: PPUSH
19694: LD_INT 0
19696: PPUSH
19697: CALL_OW 109
// continue ;
19701: GO 19228
// end ; if enemy then
19703: LD_VAR 0 3
19707: IFFALSE 19747
// begin if not HasTask ( i ) then
19709: LD_VAR 0 1
19713: PPUSH
19714: CALL_OW 314
19718: NOT
19719: IFFALSE 19745
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19721: LD_VAR 0 1
19725: PPUSH
19726: LD_VAR 0 3
19730: PPUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 74
19740: PPUSH
19741: CALL_OW 115
// end else
19745: GO 19769
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19747: LD_VAR 0 1
19751: PPUSH
19752: LD_INT 105
19754: PUSH
19755: LD_INT 35
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: EMPTY
19763: LIST
19764: PPUSH
19765: CALL 97726 0 2
// end ; end ;
19769: GO 19228
19771: POP
19772: POP
// end ;
19773: PPOPN 3
19775: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19776: LD_EXP 80
19780: IFFALSE 19788
19782: PUSH
19783: LD_EXP 22
19787: AND
19788: IFFALSE 20363
19790: GO 19792
19792: DISABLE
19793: LD_INT 0
19795: PPUSH
19796: PPUSH
19797: PPUSH
// begin enable ;
19798: ENABLE
// if not ruTanks2 then
19799: LD_EXP 80
19803: NOT
19804: IFFALSE 19808
// exit ;
19806: GO 20363
// for i in ruTanks2 do
19808: LD_ADDR_VAR 0 1
19812: PUSH
19813: LD_EXP 80
19817: PUSH
19818: FOR_IN
19819: IFFALSE 20361
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19821: LD_VAR 0 1
19825: PPUSH
19826: CALL_OW 302
19830: NOT
19831: IFTRUE 19848
19833: PUSH
19834: LD_VAR 0 1
19838: PPUSH
19839: CALL_OW 255
19843: PUSH
19844: LD_INT 3
19846: NONEQUAL
19847: OR
19848: IFFALSE 19868
// begin ruTanks := ruTanks diff i ;
19850: LD_ADDR_EXP 79
19854: PUSH
19855: LD_EXP 79
19859: PUSH
19860: LD_VAR 0 1
19864: DIFF
19865: ST_TO_ADDR
// continue ;
19866: GO 19818
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19868: LD_VAR 0 1
19872: PPUSH
19873: CALL_OW 110
19877: NOT
19878: IFTRUE 19895
19880: PUSH
19881: LD_VAR 0 1
19885: PPUSH
19886: CALL_OW 110
19890: PUSH
19891: LD_INT 0
19893: EQUAL
19894: OR
19895: IFFALSE 20072
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19897: LD_VAR 0 1
19901: PPUSH
19902: CALL_OW 262
19906: PUSH
19907: LD_INT 1
19909: EQUAL
19910: IFFALSE 19927
19912: PUSH
19913: LD_VAR 0 1
19917: PPUSH
19918: CALL_OW 261
19922: PUSH
19923: LD_INT 50
19925: LESS
19926: AND
19927: IFFALSE 19940
19929: PUSH
19930: LD_EXP 69
19934: PPUSH
19935: CALL_OW 302
19939: AND
19940: IFFALSE 20027
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19942: LD_VAR 0 1
19946: PPUSH
19947: LD_EXP 69
19951: PPUSH
19952: CALL_OW 250
19956: PPUSH
19957: LD_EXP 69
19961: PPUSH
19962: CALL_OW 251
19966: PPUSH
19967: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19971: LD_INT 35
19973: PPUSH
19974: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19978: LD_VAR 0 1
19982: PPUSH
19983: LD_EXP 69
19987: PPUSH
19988: CALL_OW 250
19992: PPUSH
19993: LD_EXP 69
19997: PPUSH
19998: CALL_OW 251
20002: PPUSH
20003: CALL_OW 297
20007: PUSH
20008: LD_INT 6
20010: LESS
20011: IFFALSE 19971
// SetFuel ( i , 100 ) ;
20013: LD_VAR 0 1
20017: PPUSH
20018: LD_INT 100
20020: PPUSH
20021: CALL_OW 240
// end else
20025: GO 20072
// if not IsInArea ( i , ruParkingArea2 ) then
20027: LD_VAR 0 1
20031: PPUSH
20032: LD_EXP 83
20036: PPUSH
20037: CALL_OW 308
20041: NOT
20042: IFFALSE 20060
// ComMoveToArea ( i , ruParkingArea2 ) else
20044: LD_VAR 0 1
20048: PPUSH
20049: LD_EXP 83
20053: PPUSH
20054: CALL_OW 113
20058: GO 20072
// SetTag ( i , tParking ) ;
20060: LD_VAR 0 1
20064: PPUSH
20065: LD_INT 12
20067: PPUSH
20068: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
20072: LD_VAR 0 1
20076: PPUSH
20077: CALL_OW 110
20081: PUSH
20082: LD_INT 12
20084: EQUAL
20085: IFFALSE 20215
// begin if GetLives ( i ) < 650 then
20087: LD_VAR 0 1
20091: PPUSH
20092: CALL_OW 256
20096: PUSH
20097: LD_INT 650
20099: LESS
20100: IFFALSE 20192
// begin if not IsDrivenBy ( i ) then
20102: LD_VAR 0 1
20106: PPUSH
20107: CALL_OW 311
20111: NOT
20112: IFFALSE 20116
// continue ;
20114: GO 19818
// mech := IsDrivenBy ( i ) ;
20116: LD_ADDR_VAR 0 2
20120: PUSH
20121: LD_VAR 0 1
20125: PPUSH
20126: CALL_OW 311
20130: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
20131: LD_VAR 0 2
20135: PPUSH
20136: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
20140: LD_VAR 0 2
20144: PPUSH
20145: LD_VAR 0 1
20149: PPUSH
20150: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
20154: LD_INT 35
20156: PPUSH
20157: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20161: LD_VAR 0 1
20165: PPUSH
20166: CALL_OW 256
20170: PUSH
20171: LD_INT 1000
20173: EQUAL
20174: IFFALSE 20154
// ComEnterUnit ( mech , i ) ;
20176: LD_VAR 0 2
20180: PPUSH
20181: LD_VAR 0 1
20185: PPUSH
20186: CALL_OW 120
// end else
20190: GO 20215
// if IsDrivenBy ( i ) then
20192: LD_VAR 0 1
20196: PPUSH
20197: CALL_OW 311
20201: IFFALSE 20215
// SetTag ( i , tAttack ) ;
20203: LD_VAR 0 1
20207: PPUSH
20208: LD_INT 13
20210: PPUSH
20211: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20215: LD_VAR 0 1
20219: PPUSH
20220: CALL_OW 110
20224: PUSH
20225: LD_INT 13
20227: EQUAL
20228: IFFALSE 20359
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20230: LD_ADDR_VAR 0 3
20234: PUSH
20235: LD_EXP 67
20239: PPUSH
20240: LD_INT 81
20242: PUSH
20243: LD_INT 3
20245: PUSH
20246: EMPTY
20247: LIST
20248: LIST
20249: PPUSH
20250: CALL_OW 70
20254: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20255: LD_VAR 0 1
20259: PPUSH
20260: CALL_OW 256
20264: PUSH
20265: LD_INT 650
20267: LESS
20268: IFFALSE 20293
// begin ComStop ( i ) ;
20270: LD_VAR 0 1
20274: PPUSH
20275: CALL_OW 141
// SetTag ( i , 0 ) ;
20279: LD_VAR 0 1
20283: PPUSH
20284: LD_INT 0
20286: PPUSH
20287: CALL_OW 109
// continue ;
20291: GO 19818
// end ; if enemy then
20293: LD_VAR 0 3
20297: IFFALSE 20337
// begin if not HasTask ( i ) then
20299: LD_VAR 0 1
20303: PPUSH
20304: CALL_OW 314
20308: NOT
20309: IFFALSE 20335
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20311: LD_VAR 0 1
20315: PPUSH
20316: LD_VAR 0 3
20320: PPUSH
20321: LD_VAR 0 1
20325: PPUSH
20326: CALL_OW 74
20330: PPUSH
20331: CALL_OW 115
// end else
20335: GO 20359
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20337: LD_VAR 0 1
20341: PPUSH
20342: LD_INT 105
20344: PUSH
20345: LD_INT 35
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: EMPTY
20353: LIST
20354: PPUSH
20355: CALL 97726 0 2
// end ; end ;
20359: GO 19818
20361: POP
20362: POP
// end ;
20363: PPOPN 3
20365: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20366: LD_EXP 81
20370: PPUSH
20371: CALL 58984 0 1
20375: IFFALSE 20388
20377: GO 20379
20379: DISABLE
// begin enable ;
20380: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20381: LD_INT 106
20383: PPUSH
20384: CALL_OW 427
// end ;
20388: END
// export function RussianExtraAttack ; var i , tmp ; begin
20389: LD_INT 0
20391: PPUSH
20392: PPUSH
20393: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20394: LD_ADDR_VAR 0 3
20398: PUSH
20399: LD_EXP 81
20403: PPUSH
20404: LD_INT 50
20406: PUSH
20407: EMPTY
20408: LIST
20409: PPUSH
20410: CALL_OW 72
20414: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20415: LD_ADDR_EXP 81
20419: PUSH
20420: LD_EXP 81
20424: PUSH
20425: LD_VAR 0 3
20429: DIFF
20430: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20431: LD_VAR 0 3
20435: PPUSH
20436: LD_INT 105
20438: PPUSH
20439: LD_INT 35
20441: PPUSH
20442: CALL_OW 114
// wait ( 0 0$5 ) ;
20446: LD_INT 175
20448: PPUSH
20449: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20453: LD_INT 35
20455: PPUSH
20456: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20460: LD_ADDR_VAR 0 3
20464: PUSH
20465: LD_VAR 0 3
20469: PPUSH
20470: LD_INT 50
20472: PUSH
20473: EMPTY
20474: LIST
20475: PPUSH
20476: CALL_OW 72
20480: ST_TO_ADDR
// for i in tmp do
20481: LD_ADDR_VAR 0 2
20485: PUSH
20486: LD_VAR 0 3
20490: PUSH
20491: FOR_IN
20492: IFFALSE 20518
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20494: LD_VAR 0 2
20498: PPUSH
20499: LD_INT 105
20501: PUSH
20502: LD_INT 35
20504: PUSH
20505: EMPTY
20506: LIST
20507: LIST
20508: PUSH
20509: EMPTY
20510: LIST
20511: PPUSH
20512: CALL 97726 0 2
20516: GO 20491
20518: POP
20519: POP
// until not tmp ;
20520: LD_VAR 0 3
20524: NOT
20525: IFFALSE 20453
// end ;
20527: LD_VAR 0 1
20531: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20532: LD_INT 0
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
20539: PPUSH
20540: PPUSH
20541: PPUSH
20542: PPUSH
20543: PPUSH
// result := [ ] ;
20544: LD_ADDR_VAR 0 2
20548: PUSH
20549: EMPTY
20550: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20551: LD_ADDR_VAR 0 7
20555: PUSH
20556: LD_INT 4
20558: PUSH
20559: LD_INT 5
20561: PUSH
20562: LD_INT 6
20564: PUSH
20565: LD_INT 7
20567: PUSH
20568: EMPTY
20569: LIST
20570: LIST
20571: LIST
20572: LIST
20573: PUSH
20574: LD_OWVAR 67
20578: ARRAY
20579: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20580: LD_ADDR_VAR 0 8
20584: PUSH
20585: LD_INT 19
20587: ST_TO_ADDR
// parking := ruGatPointArea ;
20588: LD_ADDR_VAR 0 9
20592: PUSH
20593: LD_INT 32
20595: ST_TO_ADDR
// dir := 5 ;
20596: LD_ADDR_VAR 0 10
20600: PUSH
20601: LD_INT 5
20603: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20604: LD_VAR 0 8
20608: PPUSH
20609: LD_INT 2
20611: PUSH
20612: LD_INT 22
20614: PUSH
20615: LD_INT 0
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 22
20624: PUSH
20625: LD_INT 6
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: EMPTY
20633: LIST
20634: LIST
20635: LIST
20636: PPUSH
20637: CALL_OW 70
20641: IFFALSE 20702
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20643: LD_ADDR_VAR 0 3
20647: PUSH
20648: LD_VAR 0 8
20652: PPUSH
20653: LD_INT 2
20655: PUSH
20656: LD_INT 22
20658: PUSH
20659: LD_INT 0
20661: PUSH
20662: EMPTY
20663: LIST
20664: LIST
20665: PUSH
20666: LD_INT 22
20668: PUSH
20669: LD_INT 6
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PUSH
20676: EMPTY
20677: LIST
20678: LIST
20679: LIST
20680: PPUSH
20681: CALL_OW 70
20685: PUSH
20686: FOR_IN
20687: IFFALSE 20700
// RemoveUnit ( i ) ;
20689: LD_VAR 0 3
20693: PPUSH
20694: CALL_OW 64
20698: GO 20686
20700: POP
20701: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20702: LD_VAR 0 8
20706: PPUSH
20707: LD_INT 3
20709: PUSH
20710: LD_INT 21
20712: PUSH
20713: LD_INT 1
20715: PUSH
20716: EMPTY
20717: LIST
20718: LIST
20719: PUSH
20720: EMPTY
20721: LIST
20722: LIST
20723: PUSH
20724: LD_INT 22
20726: PUSH
20727: LD_INT 1
20729: PUSH
20730: EMPTY
20731: LIST
20732: LIST
20733: PUSH
20734: EMPTY
20735: LIST
20736: LIST
20737: PPUSH
20738: CALL_OW 70
20742: IFFALSE 20806
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20744: LD_ADDR_VAR 0 3
20748: PUSH
20749: LD_VAR 0 8
20753: PPUSH
20754: LD_INT 3
20756: PUSH
20757: LD_INT 21
20759: PUSH
20760: LD_INT 1
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: EMPTY
20768: LIST
20769: LIST
20770: PUSH
20771: LD_INT 22
20773: PUSH
20774: LD_INT 1
20776: PUSH
20777: EMPTY
20778: LIST
20779: LIST
20780: PUSH
20781: EMPTY
20782: LIST
20783: LIST
20784: PPUSH
20785: CALL_OW 70
20789: PUSH
20790: FOR_IN
20791: IFFALSE 20804
// KillUnit ( i ) ;
20793: LD_VAR 0 3
20797: PPUSH
20798: CALL_OW 66
20802: GO 20790
20804: POP
20805: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20806: LD_VAR 0 8
20810: PPUSH
20811: LD_INT 21
20813: PUSH
20814: LD_INT 1
20816: PUSH
20817: EMPTY
20818: LIST
20819: LIST
20820: PUSH
20821: LD_INT 22
20823: PUSH
20824: LD_INT 1
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PPUSH
20835: CALL_OW 70
20839: IFFALSE 20902
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20841: LD_ADDR_VAR 0 3
20845: PUSH
20846: LD_VAR 0 8
20850: PPUSH
20851: LD_INT 21
20853: PUSH
20854: LD_INT 1
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 22
20863: PUSH
20864: LD_INT 1
20866: PUSH
20867: EMPTY
20868: LIST
20869: LIST
20870: PUSH
20871: EMPTY
20872: LIST
20873: LIST
20874: PPUSH
20875: CALL_OW 70
20879: PUSH
20880: FOR_IN
20881: IFFALSE 20900
// ComMoveXY ( i , 92 , 92 ) ;
20883: LD_VAR 0 3
20887: PPUSH
20888: LD_INT 92
20890: PPUSH
20891: LD_INT 92
20893: PPUSH
20894: CALL_OW 111
20898: GO 20880
20900: POP
20901: POP
// repeat wait ( 0 0$1 ) ;
20902: LD_INT 35
20904: PPUSH
20905: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20909: LD_VAR 0 8
20913: PPUSH
20914: LD_INT 50
20916: PUSH
20917: EMPTY
20918: LIST
20919: PPUSH
20920: CALL_OW 70
20924: NOT
20925: IFFALSE 20902
// InitHC_All ( ) ;
20927: CALL_OW 584
// InitVc ;
20931: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20935: LD_ADDR_VAR 0 3
20939: PUSH
20940: DOUBLE
20941: LD_INT 1
20943: DEC
20944: ST_TO_ADDR
20945: LD_INT 3
20947: PUSH
20948: LD_INT 4
20950: PUSH
20951: LD_INT 4
20953: PUSH
20954: LD_INT 5
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: PUSH
20963: LD_OWVAR 67
20967: ARRAY
20968: PUSH
20969: LD_VAR 0 1
20973: PLUS
20974: PUSH
20975: FOR_TO
20976: IFFALSE 21283
// begin uc_side := 6 ;
20978: LD_ADDR_OWVAR 20
20982: PUSH
20983: LD_INT 6
20985: ST_TO_ADDR
// uc_nation := nation_russian ;
20986: LD_ADDR_OWVAR 21
20990: PUSH
20991: LD_INT 3
20993: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20994: LD_ADDR_VAR 0 11
20998: PUSH
20999: LD_INT 1
21001: PUSH
21002: LD_INT 3
21004: PUSH
21005: LD_INT 3
21007: PUSH
21008: LD_INT 3
21010: PUSH
21011: EMPTY
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: PUSH
21017: LD_INT 1
21019: PPUSH
21020: LD_INT 4
21022: PPUSH
21023: CALL_OW 12
21027: ARRAY
21028: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
21029: LD_INT 22
21031: PUSH
21032: LD_INT 24
21034: PUSH
21035: LD_INT 23
21037: PUSH
21038: EMPTY
21039: LIST
21040: LIST
21041: LIST
21042: PUSH
21043: LD_VAR 0 3
21047: PUSH
21048: LD_INT 3
21050: MOD
21051: PUSH
21052: LD_INT 1
21054: PLUS
21055: ARRAY
21056: PPUSH
21057: LD_INT 3
21059: PUSH
21060: LD_INT 1
21062: PUSH
21063: EMPTY
21064: LIST
21065: LIST
21066: PUSH
21067: LD_INT 1
21069: PPUSH
21070: LD_INT 2
21072: PPUSH
21073: CALL_OW 12
21077: ARRAY
21078: PPUSH
21079: LD_VAR 0 11
21083: PPUSH
21084: LD_INT 45
21086: PUSH
21087: LD_INT 46
21089: PUSH
21090: LD_INT 43
21092: PUSH
21093: EMPTY
21094: LIST
21095: LIST
21096: LIST
21097: PUSH
21098: LD_VAR 0 3
21102: PUSH
21103: LD_INT 3
21105: MOD
21106: PUSH
21107: LD_INT 1
21109: PLUS
21110: ARRAY
21111: PPUSH
21112: LD_INT 100
21114: PPUSH
21115: CALL 61780 0 5
// veh := CreateVehicle ;
21119: LD_ADDR_VAR 0 6
21123: PUSH
21124: CALL_OW 45
21128: ST_TO_ADDR
// SetDir ( veh , dir ) ;
21129: LD_VAR 0 6
21133: PPUSH
21134: LD_VAR 0 10
21138: PPUSH
21139: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
21143: LD_VAR 0 6
21147: PPUSH
21148: LD_VAR 0 8
21152: PPUSH
21153: LD_INT 0
21155: PPUSH
21156: CALL_OW 49
// if control = control_manual then
21160: LD_VAR 0 11
21164: PUSH
21165: LD_INT 1
21167: EQUAL
21168: IFFALSE 21222
// begin uc_side := 6 ;
21170: LD_ADDR_OWVAR 20
21174: PUSH
21175: LD_INT 6
21177: ST_TO_ADDR
// uc_nation := nation_russian ;
21178: LD_ADDR_OWVAR 21
21182: PUSH
21183: LD_INT 3
21185: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21186: LD_INT 0
21188: PPUSH
21189: LD_VAR 0 7
21193: PPUSH
21194: CALL_OW 383
// un := CreateHuman ;
21198: LD_ADDR_VAR 0 5
21202: PUSH
21203: CALL_OW 44
21207: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21208: LD_VAR 0 5
21212: PPUSH
21213: LD_VAR 0 6
21217: PPUSH
21218: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21222: LD_VAR 0 6
21226: PPUSH
21227: LD_VAR 0 9
21231: PPUSH
21232: CALL_OW 113
// wait ( 0 0$3 ) ;
21236: LD_INT 105
21238: PPUSH
21239: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21243: LD_VAR 0 8
21247: PPUSH
21248: LD_INT 50
21250: PUSH
21251: EMPTY
21252: LIST
21253: PPUSH
21254: CALL_OW 70
21258: NOT
21259: IFFALSE 21222
// result := Join ( result , veh ) ;
21261: LD_ADDR_VAR 0 2
21265: PUSH
21266: LD_VAR 0 2
21270: PPUSH
21271: LD_VAR 0 6
21275: PPUSH
21276: CALL 94960 0 2
21280: ST_TO_ADDR
// end ;
21281: GO 20975
21283: POP
21284: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21285: LD_ADDR_VAR 0 3
21289: PUSH
21290: DOUBLE
21291: LD_INT 1
21293: DEC
21294: ST_TO_ADDR
21295: LD_INT 2
21297: PUSH
21298: LD_INT 2
21300: PUSH
21301: LD_INT 3
21303: PUSH
21304: LD_INT 4
21306: PUSH
21307: EMPTY
21308: LIST
21309: LIST
21310: LIST
21311: LIST
21312: PUSH
21313: LD_OWVAR 67
21317: ARRAY
21318: PUSH
21319: FOR_TO
21320: IFFALSE 21476
// begin uc_side := 6 ;
21322: LD_ADDR_OWVAR 20
21326: PUSH
21327: LD_INT 6
21329: ST_TO_ADDR
// uc_nation := nation_russian ;
21330: LD_ADDR_OWVAR 21
21334: PUSH
21335: LD_INT 3
21337: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21338: LD_INT 0
21340: PPUSH
21341: LD_VAR 0 7
21345: PPUSH
21346: CALL_OW 381
// un := CreateHuman ;
21350: LD_ADDR_VAR 0 5
21354: PUSH
21355: CALL_OW 44
21359: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21360: LD_INT 35
21362: PUSH
21363: LD_INT 60
21365: PUSH
21366: LD_INT 70
21368: PUSH
21369: LD_INT 80
21371: PUSH
21372: EMPTY
21373: LIST
21374: LIST
21375: LIST
21376: LIST
21377: PUSH
21378: LD_OWVAR 67
21382: ARRAY
21383: PPUSH
21384: CALL_OW 13
21388: IFFALSE 21402
// SetClass ( un , class_bazooker ) ;
21390: LD_VAR 0 5
21394: PPUSH
21395: LD_INT 9
21397: PPUSH
21398: CALL_OW 336
// SetDir ( un , dir ) ;
21402: LD_VAR 0 5
21406: PPUSH
21407: LD_VAR 0 10
21411: PPUSH
21412: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21416: LD_VAR 0 5
21420: PPUSH
21421: LD_VAR 0 8
21425: PPUSH
21426: LD_INT 0
21428: PPUSH
21429: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21433: LD_VAR 0 5
21437: PPUSH
21438: LD_VAR 0 9
21442: PPUSH
21443: CALL_OW 113
// wait ( 0 0$1 ) ;
21447: LD_INT 35
21449: PPUSH
21450: CALL_OW 67
// result := Join ( result , un ) ;
21454: LD_ADDR_VAR 0 2
21458: PUSH
21459: LD_VAR 0 2
21463: PPUSH
21464: LD_VAR 0 5
21468: PPUSH
21469: CALL 94960 0 2
21473: ST_TO_ADDR
// end ;
21474: GO 21319
21476: POP
21477: POP
// end ;
21478: LD_VAR 0 2
21482: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21483: LD_INT 0
21485: PPUSH
21486: PPUSH
21487: PPUSH
21488: PPUSH
21489: PPUSH
21490: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21491: LD_ADDR_EXP 18
21495: PUSH
21496: LD_EXP 18
21500: PPUSH
21501: CALL 96333 0 1
21505: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21506: LD_ADDR_VAR 0 3
21510: PUSH
21511: LD_INT 99
21513: PUSH
21514: LD_INT 91
21516: PUSH
21517: EMPTY
21518: LIST
21519: LIST
21520: PUSH
21521: LD_INT 78
21523: PUSH
21524: LD_INT 50
21526: PUSH
21527: EMPTY
21528: LIST
21529: LIST
21530: PUSH
21531: LD_INT 91
21533: PUSH
21534: LD_INT 45
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: EMPTY
21542: LIST
21543: LIST
21544: LIST
21545: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21546: LD_ADDR_VAR 0 4
21550: PUSH
21551: LD_VAR 0 1
21555: PPUSH
21556: CALL 20532 0 1
21560: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21561: LD_VAR 0 4
21565: PPUSH
21566: LD_INT 21
21568: PUSH
21569: LD_INT 1
21571: PUSH
21572: EMPTY
21573: LIST
21574: LIST
21575: PPUSH
21576: CALL_OW 72
21580: PPUSH
21581: LD_INT 108
21583: PPUSH
21584: LD_INT 60
21586: PPUSH
21587: CALL_OW 114
// DRussianNextAttack ;
21591: CALL 28732 0 0
// repeat wait ( 0 0$2 ) ;
21595: LD_INT 70
21597: PPUSH
21598: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21602: LD_ADDR_VAR 0 7
21606: PUSH
21607: LD_INT 81
21609: PUSH
21610: LD_INT 6
21612: PUSH
21613: EMPTY
21614: LIST
21615: LIST
21616: PPUSH
21617: CALL_OW 69
21621: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21622: LD_ADDR_VAR 0 4
21626: PUSH
21627: LD_VAR 0 4
21631: PPUSH
21632: LD_INT 50
21634: PUSH
21635: EMPTY
21636: LIST
21637: PPUSH
21638: CALL_OW 72
21642: ST_TO_ADDR
// for i in attackers do
21643: LD_ADDR_VAR 0 6
21647: PUSH
21648: LD_VAR 0 4
21652: PUSH
21653: FOR_IN
21654: IFFALSE 22032
// begin if not IsOk ( i ) then
21656: LD_VAR 0 6
21660: PPUSH
21661: CALL_OW 302
21665: NOT
21666: IFFALSE 21686
// begin attackers := attackers diff i ;
21668: LD_ADDR_VAR 0 4
21672: PUSH
21673: LD_VAR 0 4
21677: PUSH
21678: LD_VAR 0 6
21682: DIFF
21683: ST_TO_ADDR
// continue ;
21684: GO 21653
// end ; if GetType ( i ) = unit_vehicle then
21686: LD_VAR 0 6
21690: PPUSH
21691: CALL_OW 247
21695: PUSH
21696: LD_INT 2
21698: EQUAL
21699: IFFALSE 21717
// AgressiveMove ( i , path ) else
21701: LD_VAR 0 6
21705: PPUSH
21706: LD_VAR 0 3
21710: PPUSH
21711: CALL 97726 0 2
21715: GO 22030
// begin if GetClass ( i ) = class_bazooker then
21717: LD_VAR 0 6
21721: PPUSH
21722: CALL_OW 257
21726: PUSH
21727: LD_INT 9
21729: EQUAL
21730: IFFALSE 22006
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21732: LD_VAR 0 6
21736: PPUSH
21737: LD_VAR 0 7
21741: PPUSH
21742: LD_VAR 0 6
21746: PPUSH
21747: CALL_OW 74
21751: PPUSH
21752: CALL_OW 296
21756: PUSH
21757: LD_INT 12
21759: GREATER
21760: IFFALSE 21788
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21762: LD_VAR 0 6
21766: PPUSH
21767: LD_VAR 0 7
21771: PPUSH
21772: LD_VAR 0 6
21776: PPUSH
21777: CALL_OW 74
21781: PPUSH
21782: CALL 99358 0 2
21786: GO 22004
// begin e := NearestUnitToUnit ( enemy , i ) ;
21788: LD_ADDR_VAR 0 5
21792: PUSH
21793: LD_VAR 0 7
21797: PPUSH
21798: LD_VAR 0 6
21802: PPUSH
21803: CALL_OW 74
21807: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21808: LD_INT 1
21810: PPUSH
21811: LD_INT 3
21813: PPUSH
21814: CALL_OW 12
21818: PUSH
21819: LD_INT 1
21821: DOUBLE
21822: EQUAL
21823: IFTRUE 21827
21825: GO 21844
21827: POP
// ComAttackUnit ( i , e ) ; 2 :
21828: LD_VAR 0 6
21832: PPUSH
21833: LD_VAR 0 5
21837: PPUSH
21838: CALL_OW 115
21842: GO 22004
21844: LD_INT 2
21846: DOUBLE
21847: EQUAL
21848: IFTRUE 21852
21850: GO 21932
21852: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21853: LD_VAR 0 6
21857: PPUSH
21858: LD_VAR 0 5
21862: PPUSH
21863: CALL_OW 250
21867: PPUSH
21868: LD_VAR 0 5
21872: PPUSH
21873: CALL_OW 251
21877: PPUSH
21878: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21882: LD_VAR 0 5
21886: PPUSH
21887: CALL_OW 247
21891: PUSH
21892: LD_INT 3
21894: NONEQUAL
21895: IFFALSE 21904
21897: PUSH
21898: LD_EXP 17
21902: NOT
21903: AND
21904: IFFALSE 21930
// begin dialogRussianSpaceAmmo := true ;
21906: LD_ADDR_EXP 17
21910: PUSH
21911: LD_INT 1
21913: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21914: LD_INT 210
21916: PPUSH
21917: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21921: LD_VAR 0 5
21925: PPUSH
21926: CALL 28779 0 1
// end ; end ; 3 :
21930: GO 22004
21932: LD_INT 3
21934: DOUBLE
21935: EQUAL
21936: IFTRUE 21940
21938: GO 22003
21940: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21941: LD_VAR 0 6
21945: PPUSH
21946: LD_VAR 0 5
21950: PPUSH
21951: CALL_OW 250
21955: PPUSH
21956: LD_VAR 0 5
21960: PPUSH
21961: CALL_OW 251
21965: PPUSH
21966: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21970: LD_EXP 17
21974: NOT
21975: IFFALSE 22001
// begin dialogRussianSpaceAmmo := true ;
21977: LD_ADDR_EXP 17
21981: PUSH
21982: LD_INT 1
21984: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21985: LD_INT 210
21987: PPUSH
21988: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21992: LD_VAR 0 5
21996: PPUSH
21997: CALL 28779 0 1
// end ; end ; end ;
22001: GO 22004
22003: POP
// end ; end else
22004: GO 22030
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
22006: LD_VAR 0 6
22010: PPUSH
22011: LD_VAR 0 7
22015: PPUSH
22016: LD_VAR 0 6
22020: PPUSH
22021: CALL_OW 74
22025: PPUSH
22026: CALL 99358 0 2
// end ; end ;
22030: GO 21653
22032: POP
22033: POP
// until not attackers ;
22034: LD_VAR 0 4
22038: NOT
22039: IFFALSE 21595
// end ;
22041: LD_VAR 0 2
22045: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
22046: LD_EXP 10
22050: IFFALSE 22058
22052: PUSH
22053: LD_EXP 16
22057: AND
22058: IFFALSE 22170
22060: GO 22062
22062: DISABLE
22063: LD_INT 0
22065: PPUSH
22066: PPUSH
22067: PPUSH
// begin InitHC_All ( ) ;
22068: CALL_OW 584
// for i := 1 to 3 do
22072: LD_ADDR_VAR 0 1
22076: PUSH
22077: DOUBLE
22078: LD_INT 1
22080: DEC
22081: ST_TO_ADDR
22082: LD_INT 3
22084: PUSH
22085: FOR_TO
22086: IFFALSE 22168
// begin uc_side := 6 ;
22088: LD_ADDR_OWVAR 20
22092: PUSH
22093: LD_INT 6
22095: ST_TO_ADDR
// uc_nation := nation_russian ;
22096: LD_ADDR_OWVAR 21
22100: PUSH
22101: LD_INT 3
22103: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
22104: LD_INT 0
22106: PPUSH
22107: LD_INT 3
22109: PPUSH
22110: CALL_OW 381
// un := CreateHuman ;
22114: LD_ADDR_VAR 0 2
22118: PUSH
22119: CALL_OW 44
22123: ST_TO_ADDR
// SetDir ( un , 2 ) ;
22124: LD_VAR 0 2
22128: PPUSH
22129: LD_INT 2
22131: PPUSH
22132: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
22136: LD_VAR 0 2
22140: PPUSH
22141: LD_INT 33
22143: PPUSH
22144: LD_INT 0
22146: PPUSH
22147: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
22151: LD_VAR 0 2
22155: PPUSH
22156: LD_INT 52
22158: PPUSH
22159: LD_INT 16
22161: PPUSH
22162: CALL_OW 114
// end ;
22166: GO 22085
22168: POP
22169: POP
// end ;
22170: PPOPN 3
22172: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
22173: LD_EXP 68
22177: PPUSH
22178: CALL_OW 302
22182: IFFALSE 22191
22184: PUSH
22185: LD_EXP 78
22189: NOT
22190: AND
22191: IFFALSE 22430
22193: GO 22195
22195: DISABLE
22196: LD_INT 0
22198: PPUSH
// begin enable ;
22199: ENABLE
// uc_side := 3 ;
22200: LD_ADDR_OWVAR 20
22204: PUSH
22205: LD_INT 3
22207: ST_TO_ADDR
// uc_nation := nation_russian ;
22208: LD_ADDR_OWVAR 21
22212: PUSH
22213: LD_INT 3
22215: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22216: LD_INT 22
22218: PPUSH
22219: LD_INT 3
22221: PPUSH
22222: LD_INT 3
22224: PPUSH
22225: LD_INT 51
22227: PPUSH
22228: LD_INT 100
22230: PPUSH
22231: CALL 61780 0 5
// cargo := CreateVehicle ;
22235: LD_ADDR_VAR 0 1
22239: PUSH
22240: CALL_OW 45
22244: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22245: LD_VAR 0 1
22249: PPUSH
22250: LD_INT 5
22252: PPUSH
22253: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22257: LD_VAR 0 1
22261: PPUSH
22262: LD_INT 187
22264: PPUSH
22265: LD_INT 117
22267: PPUSH
22268: LD_INT 0
22270: PPUSH
22271: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22275: LD_VAR 0 1
22279: PPUSH
22280: LD_INT 1
22282: PPUSH
22283: LD_INT 100
22285: PPUSH
22286: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22290: LD_VAR 0 1
22294: PPUSH
22295: LD_EXP 68
22299: PPUSH
22300: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22304: LD_VAR 0 1
22308: PPUSH
22309: LD_EXP 68
22313: PPUSH
22314: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22318: LD_VAR 0 1
22322: PPUSH
22323: LD_INT 187
22325: PPUSH
22326: LD_INT 117
22328: PPUSH
22329: CALL_OW 171
// wait ( 0 0$10 ) ;
22333: LD_INT 350
22335: PPUSH
22336: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22340: LD_INT 35
22342: PPUSH
22343: CALL_OW 67
// if not HasTask ( cargo ) then
22347: LD_VAR 0 1
22351: PPUSH
22352: CALL_OW 314
22356: NOT
22357: IFFALSE 22374
// ComMoveXY ( cargo , 187 , 117 ) ;
22359: LD_VAR 0 1
22363: PPUSH
22364: LD_INT 187
22366: PPUSH
22367: LD_INT 117
22369: PPUSH
22370: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22374: LD_VAR 0 1
22378: PPUSH
22379: CALL_OW 301
22383: IFTRUE 22402
22385: PUSH
22386: LD_VAR 0 1
22390: PPUSH
22391: LD_INT 187
22393: PPUSH
22394: LD_INT 117
22396: PPUSH
22397: CALL_OW 307
22401: OR
22402: IFFALSE 22340
// if IsAt ( cargo , 187 , 117 ) then
22404: LD_VAR 0 1
22408: PPUSH
22409: LD_INT 187
22411: PPUSH
22412: LD_INT 117
22414: PPUSH
22415: CALL_OW 307
22419: IFFALSE 22430
// RemoveUnit ( cargo ) ;
22421: LD_VAR 0 1
22425: PPUSH
22426: CALL_OW 64
// end ; end_of_file
22430: PPOPN 1
22432: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22433: LD_VAR 0 1
22437: PPUSH
22438: CALL 50286 0 1
// if unit = Dietrich and not arabianAttack then
22442: LD_VAR 0 1
22446: PUSH
22447: LD_EXP 50
22451: EQUAL
22452: IFFALSE 22461
22454: PUSH
22455: LD_EXP 4
22459: NOT
22460: AND
22461: IFFALSE 22470
// YouLost ( ArabDefeated ) ;
22463: LD_STRING ArabDefeated
22465: PPUSH
22466: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22470: LD_VAR 0 1
22474: PUSH
22475: LD_INT 22
22477: PUSH
22478: LD_INT 2
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: LD_INT 25
22487: PUSH
22488: LD_INT 4
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: PUSH
22495: EMPTY
22496: LIST
22497: LIST
22498: PPUSH
22499: CALL_OW 69
22503: IN
22504: IFFALSE 22513
22506: PUSH
22507: LD_EXP 4
22511: NOT
22512: AND
22513: IFFALSE 22522
// YouLost ( ArabDefeated ) ;
22515: LD_STRING ArabDefeated
22517: PPUSH
22518: CALL_OW 104
// if unit in JMMSquad then
22522: LD_VAR 0 1
22526: PUSH
22527: LD_EXP 45
22531: IN
22532: IFFALSE 22550
// JMMSquad := JMMSquad diff unit ;
22534: LD_ADDR_EXP 45
22538: PUSH
22539: LD_EXP 45
22543: PUSH
22544: LD_VAR 0 1
22548: DIFF
22549: ST_TO_ADDR
// if unit = Truman then
22550: LD_VAR 0 1
22554: PUSH
22555: LD_EXP 43
22559: EQUAL
22560: IFFALSE 22569
// YouLost ( Powell ) ;
22562: LD_STRING Powell
22564: PPUSH
22565: CALL_OW 104
// if unit = JMM then
22569: LD_VAR 0 1
22573: PUSH
22574: LD_EXP 23
22578: EQUAL
22579: IFFALSE 22588
// YouLost ( JMM ) ;
22581: LD_STRING JMM
22583: PPUSH
22584: CALL_OW 104
// if unit in arEscapist then
22588: LD_VAR 0 1
22592: PUSH
22593: LD_EXP 56
22597: IN
22598: IFFALSE 22616
// arEscapist := arEscapist diff unit ;
22600: LD_ADDR_EXP 56
22604: PUSH
22605: LD_EXP 56
22609: PUSH
22610: LD_VAR 0 1
22614: DIFF
22615: ST_TO_ADDR
// if unit in arAttackersInf then
22616: LD_VAR 0 1
22620: PUSH
22621: LD_EXP 57
22625: IN
22626: IFFALSE 22644
// arAttackersInf := arAttackersInf diff unit ;
22628: LD_ADDR_EXP 57
22632: PUSH
22633: LD_EXP 57
22637: PUSH
22638: LD_VAR 0 1
22642: DIFF
22643: ST_TO_ADDR
// if unit in arAttackersVeh then
22644: LD_VAR 0 1
22648: PUSH
22649: LD_EXP 58
22653: IN
22654: IFFALSE 22672
// arAttackersVeh := arAttackersVeh diff unit ;
22656: LD_ADDR_EXP 58
22660: PUSH
22661: LD_EXP 58
22665: PUSH
22666: LD_VAR 0 1
22670: DIFF
22671: ST_TO_ADDR
// if unit = Khatam then
22672: LD_VAR 0 1
22676: PUSH
22677: LD_EXP 36
22681: EQUAL
22682: IFFALSE 22692
// khatamStatus := false ;
22684: LD_ADDR_EXP 5
22688: PUSH
22689: LD_INT 0
22691: ST_TO_ADDR
// if unit = epsilon then
22692: LD_VAR 0 1
22696: PUSH
22697: LD_EXP 10
22701: EQUAL
22702: IFFALSE 22733
// begin hasBase := false ;
22704: LD_ADDR_EXP 9
22708: PUSH
22709: LD_INT 0
22711: ST_TO_ADDR
// epsilon := 0 ;
22712: LD_ADDR_EXP 10
22716: PUSH
22717: LD_INT 0
22719: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22720: LD_INT 0
22722: PPUSH
22723: LD_INT 1
22725: PPUSH
22726: LD_INT 1
22728: PPUSH
22729: CALL_OW 324
// end ; if unit = Khatam then
22733: LD_VAR 0 1
22737: PUSH
22738: LD_EXP 36
22742: EQUAL
22743: IFFALSE 22755
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22745: LD_INT 0
22747: PPUSH
22748: LD_STRING 10_KhatamStatus_1
22750: PPUSH
22751: CALL_OW 39
// if unit in ruForces then
22755: LD_VAR 0 1
22759: PUSH
22760: LD_EXP 59
22764: IN
22765: IFFALSE 22783
// ruForces := ruForces diff unit ;
22767: LD_ADDR_EXP 59
22771: PUSH
22772: LD_EXP 59
22776: PUSH
22777: LD_VAR 0 1
22781: DIFF
22782: ST_TO_ADDR
// if unit in ruForces2 then
22783: LD_VAR 0 1
22787: PUSH
22788: LD_EXP 60
22792: IN
22793: IFFALSE 22811
// ruForces2 := ruForces2 diff unit ;
22795: LD_ADDR_EXP 60
22799: PUSH
22800: LD_EXP 60
22804: PUSH
22805: LD_VAR 0 1
22809: DIFF
22810: ST_TO_ADDR
// if unit in ruTanks then
22811: LD_VAR 0 1
22815: PUSH
22816: LD_EXP 79
22820: IN
22821: IFFALSE 22839
// ruTanks := ruTanks diff unit ;
22823: LD_ADDR_EXP 79
22827: PUSH
22828: LD_EXP 79
22832: PUSH
22833: LD_VAR 0 1
22837: DIFF
22838: ST_TO_ADDR
// if unit in ruTanks2 then
22839: LD_VAR 0 1
22843: PUSH
22844: LD_EXP 80
22848: IN
22849: IFFALSE 22867
// ruTanks2 := ruTanks2 diff unit ;
22851: LD_ADDR_EXP 80
22855: PUSH
22856: LD_EXP 80
22860: PUSH
22861: LD_VAR 0 1
22865: DIFF
22866: ST_TO_ADDR
// if unit in ruExtraTanks then
22867: LD_VAR 0 1
22871: PUSH
22872: LD_EXP 81
22876: IN
22877: IFFALSE 22895
// ruExtraTanks := ruExtraTanks diff unit ;
22879: LD_ADDR_EXP 81
22883: PUSH
22884: LD_EXP 81
22888: PUSH
22889: LD_VAR 0 1
22893: DIFF
22894: ST_TO_ADDR
// if unit in ruMech then
22895: LD_VAR 0 1
22899: PUSH
22900: LD_EXP 63
22904: IN
22905: IFFALSE 22923
// ruMech := ruMech diff unit ;
22907: LD_ADDR_EXP 63
22911: PUSH
22912: LD_EXP 63
22916: PUSH
22917: LD_VAR 0 1
22921: DIFF
22922: ST_TO_ADDR
// if unit in ruMech2 then
22923: LD_VAR 0 1
22927: PUSH
22928: LD_EXP 64
22932: IN
22933: IFFALSE 22951
// ruMech2 := ruMech2 diff unit ;
22935: LD_ADDR_EXP 64
22939: PUSH
22940: LD_EXP 64
22944: PUSH
22945: LD_VAR 0 1
22949: DIFF
22950: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22951: LD_VAR 0 1
22955: PPUSH
22956: CALL_OW 266
22960: PUSH
22961: LD_INT 32
22963: PUSH
22964: LD_INT 33
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: IN
22971: IFFALSE 22988
22973: PUSH
22974: LD_VAR 0 1
22978: PPUSH
22979: CALL_OW 255
22983: PUSH
22984: LD_INT 3
22986: EQUAL
22987: AND
22988: IFFALSE 23144
// begin if IsInArea ( unit , ruBaseArea ) then
22990: LD_VAR 0 1
22994: PPUSH
22995: LD_EXP 66
22999: PPUSH
23000: CALL_OW 308
23004: IFFALSE 23067
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
23006: LD_ADDR_EXP 76
23010: PUSH
23011: LD_EXP 76
23015: PPUSH
23016: LD_VAR 0 1
23020: PPUSH
23021: CALL_OW 266
23025: PUSH
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 250
23035: PUSH
23036: LD_VAR 0 1
23040: PPUSH
23041: CALL_OW 251
23045: PUSH
23046: LD_VAR 0 1
23050: PPUSH
23051: CALL_OW 254
23055: PUSH
23056: EMPTY
23057: LIST
23058: LIST
23059: LIST
23060: LIST
23061: PPUSH
23062: CALL 94960 0 2
23066: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
23067: LD_VAR 0 1
23071: PPUSH
23072: LD_EXP 67
23076: PPUSH
23077: CALL_OW 308
23081: IFFALSE 23144
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
23083: LD_ADDR_EXP 77
23087: PUSH
23088: LD_EXP 77
23092: PPUSH
23093: LD_VAR 0 1
23097: PPUSH
23098: CALL_OW 266
23102: PUSH
23103: LD_VAR 0 1
23107: PPUSH
23108: CALL_OW 250
23112: PUSH
23113: LD_VAR 0 1
23117: PPUSH
23118: CALL_OW 251
23122: PUSH
23123: LD_VAR 0 1
23127: PPUSH
23128: CALL_OW 254
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: LIST
23137: LIST
23138: PPUSH
23139: CALL 94960 0 2
23143: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
23144: LD_VAR 0 1
23148: PUSH
23149: LD_INT 22
23151: PUSH
23152: LD_INT 6
23154: PUSH
23155: EMPTY
23156: LIST
23157: LIST
23158: PUSH
23159: LD_INT 34
23161: PUSH
23162: LD_INT 51
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PUSH
23169: EMPTY
23170: LIST
23171: LIST
23172: PPUSH
23173: CALL_OW 69
23177: IN
23178: IFFALSE 23188
// ruTransportDestroyed := true ;
23180: LD_ADDR_EXP 78
23184: PUSH
23185: LD_INT 1
23187: ST_TO_ADDR
// end ;
23188: PPOPN 1
23190: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
23191: LD_VAR 0 1
23195: PPUSH
23196: CALL_OW 110
23200: PUSH
23201: LD_INT 7
23203: EQUAL
23204: IFFALSE 23218
// SetTag ( un , 0 ) ;
23206: LD_VAR 0 1
23210: PPUSH
23211: LD_INT 0
23213: PPUSH
23214: CALL_OW 109
// end ;
23218: PPOPN 3
23220: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23221: LD_VAR 0 2
23225: PUSH
23226: LD_INT 22
23228: PUSH
23229: LD_INT 3
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PUSH
23236: LD_INT 25
23238: PUSH
23239: LD_INT 3
23241: PUSH
23242: EMPTY
23243: LIST
23244: LIST
23245: PUSH
23246: EMPTY
23247: LIST
23248: LIST
23249: PPUSH
23250: CALL_OW 69
23254: IN
23255: IFFALSE 23272
23257: PUSH
23258: LD_VAR 0 1
23262: PPUSH
23263: CALL_OW 266
23267: PUSH
23268: LD_INT 3
23270: EQUAL
23271: AND
23272: IFFALSE 23289
23274: PUSH
23275: LD_VAR 0 2
23279: PPUSH
23280: CALL_OW 256
23284: PUSH
23285: LD_INT 1000
23287: LESS
23288: AND
23289: IFFALSE 23315
// begin SetTag ( un , 0 ) ;
23291: LD_VAR 0 2
23295: PPUSH
23296: LD_INT 0
23298: PPUSH
23299: CALL_OW 109
// SetLives ( un , 1000 ) ;
23303: LD_VAR 0 2
23307: PPUSH
23308: LD_INT 1000
23310: PPUSH
23311: CALL_OW 234
// end ; end ;
23315: PPOPN 2
23317: END
// on UnitGoesToRed ( un ) do var i ;
23318: LD_INT 0
23320: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23321: LD_VAR 0 1
23325: PUSH
23326: LD_EXP 36
23330: EQUAL
23331: IFFALSE 23348
23333: PUSH
23334: LD_EXP 36
23338: PPUSH
23339: CALL_OW 255
23343: PUSH
23344: LD_INT 8
23346: EQUAL
23347: AND
23348: IFFALSE 23359
// KillUnit ( Khatam ) ;
23350: LD_EXP 36
23354: PPUSH
23355: CALL_OW 66
// end ;
23359: PPOPN 2
23361: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23362: LD_EXP 6
23366: NOT
23367: IFFALSE 23401
// begin seenRussianTeleport := true ;
23369: LD_ADDR_EXP 6
23373: PUSH
23374: LD_INT 1
23376: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23377: LD_VAR 0 1
23381: PPUSH
23382: CALL_OW 250
23386: PPUSH
23387: LD_VAR 0 1
23391: PPUSH
23392: CALL_OW 251
23396: PPUSH
23397: CALL 26755 0 2
// end ; end ;
23401: PPOPN 1
23403: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23404: LD_INT 0
23406: PPUSH
23407: PPUSH
23408: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23409: LD_VAR 0 2
23413: PUSH
23414: LD_INT 2
23416: EQUAL
23417: IFFALSE 23449
23419: PUSH
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 266
23429: PUSH
23430: LD_INT 7
23432: PUSH
23433: LD_INT 6
23435: PUSH
23436: LD_INT 0
23438: PUSH
23439: LD_INT 5
23441: PUSH
23442: EMPTY
23443: LIST
23444: LIST
23445: LIST
23446: LIST
23447: IN
23448: AND
23449: IFFALSE 23568
// begin for i := 1 to rand ( 2 , 4 ) do
23451: LD_ADDR_VAR 0 4
23455: PUSH
23456: DOUBLE
23457: LD_INT 1
23459: DEC
23460: ST_TO_ADDR
23461: LD_INT 2
23463: PPUSH
23464: LD_INT 4
23466: PPUSH
23467: CALL_OW 12
23471: PUSH
23472: FOR_TO
23473: IFFALSE 23566
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23475: LD_ADDR_VAR 0 5
23479: PUSH
23480: LD_VAR 0 1
23484: PPUSH
23485: CALL_OW 250
23489: PUSH
23490: LD_INT 2
23492: NEG
23493: PPUSH
23494: LD_INT 2
23496: PPUSH
23497: CALL_OW 12
23501: MINUS
23502: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23503: LD_ADDR_VAR 0 6
23507: PUSH
23508: LD_VAR 0 1
23512: PPUSH
23513: CALL_OW 251
23517: PUSH
23518: LD_INT 2
23520: NEG
23521: PPUSH
23522: LD_INT 2
23524: PPUSH
23525: CALL_OW 12
23529: PLUS
23530: ST_TO_ADDR
// if ValidHex ( x , y ) then
23531: LD_VAR 0 5
23535: PPUSH
23536: LD_VAR 0 6
23540: PPUSH
23541: CALL_OW 488
23545: IFFALSE 23564
// MineExplosion ( x , y , 10 ) ;
23547: LD_VAR 0 5
23551: PPUSH
23552: LD_VAR 0 6
23556: PPUSH
23557: LD_INT 10
23559: PPUSH
23560: CALL_OW 453
// end ;
23564: GO 23472
23566: POP
23567: POP
// end ; end ;
23568: PPOPN 6
23570: END
// on VehicleConstructed ( veh , fac ) do var side ;
23571: LD_INT 0
23573: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23574: LD_VAR 0 1
23578: PPUSH
23579: LD_VAR 0 2
23583: PPUSH
23584: CALL 50344 0 2
// side := GetSide ( fac ) ;
23588: LD_ADDR_VAR 0 3
23592: PUSH
23593: LD_VAR 0 2
23597: PPUSH
23598: CALL_OW 255
23602: ST_TO_ADDR
// if side = 3 then
23603: LD_VAR 0 3
23607: PUSH
23608: LD_INT 3
23610: EQUAL
23611: IFFALSE 23795
// begin if IsInArea ( fac , ruBaseArea ) then
23613: LD_VAR 0 2
23617: PPUSH
23618: LD_EXP 66
23622: PPUSH
23623: CALL_OW 308
23627: IFFALSE 23704
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23629: LD_ADDR_EXP 70
23633: PUSH
23634: LD_EXP 70
23638: PPUSH
23639: LD_INT 1
23641: PPUSH
23642: CALL_OW 3
23646: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23647: LD_VAR 0 1
23651: PPUSH
23652: CALL_OW 263
23656: PUSH
23657: LD_INT 1
23659: EQUAL
23660: IFFALSE 23684
// ruTanks := Join ( ruTanks , veh ) else
23662: LD_ADDR_EXP 79
23666: PUSH
23667: LD_EXP 79
23671: PPUSH
23672: LD_VAR 0 1
23676: PPUSH
23677: CALL 94960 0 2
23681: ST_TO_ADDR
23682: GO 23704
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23684: LD_ADDR_EXP 81
23688: PUSH
23689: LD_EXP 81
23693: PPUSH
23694: LD_VAR 0 1
23698: PPUSH
23699: CALL 94960 0 2
23703: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23704: LD_VAR 0 2
23708: PPUSH
23709: LD_EXP 67
23713: PPUSH
23714: CALL_OW 308
23718: IFFALSE 23795
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23720: LD_ADDR_EXP 71
23724: PUSH
23725: LD_EXP 71
23729: PPUSH
23730: LD_INT 1
23732: PPUSH
23733: CALL_OW 3
23737: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23738: LD_VAR 0 1
23742: PPUSH
23743: CALL_OW 263
23747: PUSH
23748: LD_INT 1
23750: EQUAL
23751: IFFALSE 23775
// ruTanks2 := Join ( ruTanks2 , veh ) else
23753: LD_ADDR_EXP 80
23757: PUSH
23758: LD_EXP 80
23762: PPUSH
23763: LD_VAR 0 1
23767: PPUSH
23768: CALL 94960 0 2
23772: ST_TO_ADDR
23773: GO 23795
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23775: LD_ADDR_EXP 81
23779: PUSH
23780: LD_EXP 81
23784: PPUSH
23785: LD_VAR 0 1
23789: PPUSH
23790: CALL 94960 0 2
23794: ST_TO_ADDR
// end ; end ; end ;
23795: PPOPN 3
23797: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23798: LD_INT 0
23800: PPUSH
23801: PPUSH
23802: PPUSH
// begin side := GetSide ( driver ) ;
23803: LD_ADDR_VAR 0 7
23807: PUSH
23808: LD_VAR 0 1
23812: PPUSH
23813: CALL_OW 255
23817: ST_TO_ADDR
// if side = 5 then
23818: LD_VAR 0 7
23822: PUSH
23823: LD_INT 5
23825: EQUAL
23826: IFFALSE 23906
// begin arAttackersVeh := arAttackersVeh diff driver ;
23828: LD_ADDR_EXP 58
23832: PUSH
23833: LD_EXP 58
23837: PUSH
23838: LD_VAR 0 1
23842: DIFF
23843: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23844: LD_VAR 0 1
23848: PPUSH
23849: LD_INT 189
23851: PPUSH
23852: LD_INT 80
23854: PPUSH
23855: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23859: LD_INT 35
23861: PPUSH
23862: CALL_OW 67
// if not IsOk ( driver ) then
23866: LD_VAR 0 1
23870: PPUSH
23871: CALL_OW 302
23875: NOT
23876: IFFALSE 23880
// exit ;
23878: GO 24430
// until IsAt ( driver , 189 , 80 ) ;
23880: LD_VAR 0 1
23884: PPUSH
23885: LD_INT 189
23887: PPUSH
23888: LD_INT 80
23890: PPUSH
23891: CALL_OW 307
23895: IFFALSE 23859
// RemoveUnit ( driver ) ;
23897: LD_VAR 0 1
23901: PPUSH
23902: CALL_OW 64
// end ; if side = 6 then
23906: LD_VAR 0 7
23910: PUSH
23911: LD_INT 6
23913: EQUAL
23914: IFFALSE 23972
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23916: LD_VAR 0 1
23920: PPUSH
23921: LD_INT 19
23923: PPUSH
23924: CALL_OW 113
// wait ( 0 0$3 ) ;
23928: LD_INT 105
23930: PPUSH
23931: CALL_OW 67
// if not IsOk ( driver ) then
23935: LD_VAR 0 1
23939: PPUSH
23940: CALL_OW 302
23944: NOT
23945: IFFALSE 23949
// exit ;
23947: GO 24430
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23949: LD_VAR 0 1
23953: PPUSH
23954: LD_INT 19
23956: PPUSH
23957: CALL_OW 308
23961: IFFALSE 23916
// RemoveUnit ( driver ) ;
23963: LD_VAR 0 1
23967: PPUSH
23968: CALL_OW 64
// end ; if side = 3 then
23972: LD_VAR 0 7
23976: PUSH
23977: LD_INT 3
23979: EQUAL
23980: IFFALSE 24430
// begin if driver in ruMech then
23982: LD_VAR 0 1
23986: PUSH
23987: LD_EXP 63
23991: IN
23992: IFFALSE 24206
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23994: LD_VAR 0 1
23998: PPUSH
23999: LD_EXP 66
24003: PPUSH
24004: CALL_OW 113
// SetTag ( driver , tMech ) ;
24008: LD_VAR 0 1
24012: PPUSH
24013: LD_INT 7
24015: PPUSH
24016: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24020: LD_ADDR_VAR 0 6
24024: PUSH
24025: LD_EXP 66
24029: PPUSH
24030: LD_INT 22
24032: PUSH
24033: LD_INT 3
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PUSH
24040: LD_INT 30
24042: PUSH
24043: LD_INT 3
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: PUSH
24050: LD_INT 50
24052: PUSH
24053: EMPTY
24054: LIST
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: LIST
24060: PPUSH
24061: CALL_OW 70
24065: ST_TO_ADDR
// if fac then
24066: LD_VAR 0 6
24070: IFFALSE 24092
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24072: LD_VAR 0 1
24076: PPUSH
24077: LD_VAR 0 6
24081: PUSH
24082: LD_INT 1
24084: ARRAY
24085: PPUSH
24086: CALL_OW 180
// exit ;
24090: GO 24430
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24092: LD_ADDR_VAR 0 5
24096: PUSH
24097: LD_EXP 66
24101: PPUSH
24102: LD_INT 22
24104: PUSH
24105: LD_INT 3
24107: PUSH
24108: EMPTY
24109: LIST
24110: LIST
24111: PUSH
24112: LD_INT 2
24114: PUSH
24115: LD_INT 30
24117: PUSH
24118: LD_INT 4
24120: PUSH
24121: EMPTY
24122: LIST
24123: LIST
24124: PUSH
24125: LD_INT 30
24127: PUSH
24128: LD_INT 5
24130: PUSH
24131: EMPTY
24132: LIST
24133: LIST
24134: PUSH
24135: EMPTY
24136: LIST
24137: LIST
24138: LIST
24139: PUSH
24140: LD_INT 3
24142: PUSH
24143: LD_INT 62
24145: PUSH
24146: EMPTY
24147: LIST
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: LD_INT 50
24155: PUSH
24156: EMPTY
24157: LIST
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: PPUSH
24165: CALL_OW 70
24169: ST_TO_ADDR
// if arm then
24170: LD_VAR 0 5
24174: IFFALSE 24206
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24176: LD_VAR 0 1
24180: PPUSH
24181: LD_VAR 0 5
24185: PUSH
24186: LD_INT 1
24188: ARRAY
24189: PPUSH
24190: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_INT 1
24201: PPUSH
24202: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24206: LD_VAR 0 1
24210: PUSH
24211: LD_EXP 64
24215: IN
24216: IFFALSE 24430
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24218: LD_VAR 0 1
24222: PPUSH
24223: LD_EXP 67
24227: PPUSH
24228: CALL_OW 113
// SetTag ( driver , tMech ) ;
24232: LD_VAR 0 1
24236: PPUSH
24237: LD_INT 7
24239: PPUSH
24240: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24244: LD_ADDR_VAR 0 6
24248: PUSH
24249: LD_EXP 67
24253: PPUSH
24254: LD_INT 22
24256: PUSH
24257: LD_INT 3
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 30
24266: PUSH
24267: LD_INT 3
24269: PUSH
24270: EMPTY
24271: LIST
24272: LIST
24273: PUSH
24274: LD_INT 50
24276: PUSH
24277: EMPTY
24278: LIST
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: PPUSH
24285: CALL_OW 70
24289: ST_TO_ADDR
// if fac then
24290: LD_VAR 0 6
24294: IFFALSE 24316
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24296: LD_VAR 0 1
24300: PPUSH
24301: LD_VAR 0 6
24305: PUSH
24306: LD_INT 1
24308: ARRAY
24309: PPUSH
24310: CALL_OW 180
// exit ;
24314: GO 24430
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24316: LD_ADDR_VAR 0 5
24320: PUSH
24321: LD_EXP 67
24325: PPUSH
24326: LD_INT 22
24328: PUSH
24329: LD_INT 3
24331: PUSH
24332: EMPTY
24333: LIST
24334: LIST
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: LD_INT 30
24341: PUSH
24342: LD_INT 4
24344: PUSH
24345: EMPTY
24346: LIST
24347: LIST
24348: PUSH
24349: LD_INT 30
24351: PUSH
24352: LD_INT 5
24354: PUSH
24355: EMPTY
24356: LIST
24357: LIST
24358: PUSH
24359: EMPTY
24360: LIST
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 3
24366: PUSH
24367: LD_INT 62
24369: PUSH
24370: EMPTY
24371: LIST
24372: PUSH
24373: EMPTY
24374: LIST
24375: LIST
24376: PUSH
24377: LD_INT 50
24379: PUSH
24380: EMPTY
24381: LIST
24382: PUSH
24383: EMPTY
24384: LIST
24385: LIST
24386: LIST
24387: LIST
24388: PPUSH
24389: CALL_OW 70
24393: ST_TO_ADDR
// if arm then
24394: LD_VAR 0 5
24398: IFFALSE 24430
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24400: LD_VAR 0 1
24404: PPUSH
24405: LD_VAR 0 5
24409: PUSH
24410: LD_INT 1
24412: ARRAY
24413: PPUSH
24414: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24418: LD_VAR 0 1
24422: PPUSH
24423: LD_INT 1
24425: PPUSH
24426: CALL_OW 183
// end ; end ; end ; end ;
24430: PPOPN 7
24432: END
// on EndTheMissionRaised ( ev ) do begin if end_the_mission_allowed then
24433: LD_OWVAR 57
24437: IFFALSE 24451
// begin end_the_mission_allowed := false ;
24439: LD_ADDR_OWVAR 57
24443: PUSH
24444: LD_INT 0
24446: ST_TO_ADDR
// FinishMission ;
24447: CALL 32271 0 0
// end ; end ;
24451: PPOPN 1
24453: END
// on BuildingComplete ( b ) do var side , type ;
24454: LD_INT 0
24456: PPUSH
24457: PPUSH
// begin side := GetSide ( b ) ;
24458: LD_ADDR_VAR 0 2
24462: PUSH
24463: LD_VAR 0 1
24467: PPUSH
24468: CALL_OW 255
24472: ST_TO_ADDR
// type := GetBType ( b ) ;
24473: LD_ADDR_VAR 0 3
24477: PUSH
24478: LD_VAR 0 1
24482: PPUSH
24483: CALL_OW 266
24487: ST_TO_ADDR
// if side = 2 then
24488: LD_VAR 0 2
24492: PUSH
24493: LD_INT 2
24495: EQUAL
24496: IFFALSE 24516
// arBuildings := Delete ( arBuildings , 1 ) ;
24498: LD_ADDR_EXP 53
24502: PUSH
24503: LD_EXP 53
24507: PPUSH
24508: LD_INT 1
24510: PPUSH
24511: CALL_OW 3
24515: ST_TO_ADDR
// if side = 1 then
24516: LD_VAR 0 2
24520: PUSH
24521: LD_INT 1
24523: EQUAL
24524: IFFALSE 24588
// if type = b_depot and not hasBase then
24526: LD_VAR 0 3
24530: PUSH
24531: LD_INT 0
24533: EQUAL
24534: IFFALSE 24543
24536: PUSH
24537: LD_EXP 9
24541: NOT
24542: AND
24543: IFFALSE 24588
// begin hasBase := true ;
24545: LD_ADDR_EXP 9
24549: PUSH
24550: LD_INT 1
24552: ST_TO_ADDR
// epsilon := b ;
24553: LD_ADDR_EXP 10
24557: PUSH
24558: LD_VAR 0 1
24562: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24563: LD_VAR 0 1
24567: PPUSH
24568: LD_STRING epsilon
24570: PPUSH
24571: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24575: LD_INT 0
24577: PPUSH
24578: LD_INT 1
24580: PPUSH
24581: LD_INT 0
24583: PPUSH
24584: CALL_OW 324
// end ; if side = 3 then
24588: LD_VAR 0 2
24592: PUSH
24593: LD_INT 3
24595: EQUAL
24596: IFFALSE 24882
// begin if IsInArea ( b , ruBaseArea ) then
24598: LD_VAR 0 1
24602: PPUSH
24603: LD_EXP 66
24607: PPUSH
24608: CALL_OW 308
24612: IFFALSE 24632
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24614: LD_ADDR_EXP 76
24618: PUSH
24619: LD_EXP 76
24623: PPUSH
24624: LD_INT 1
24626: PPUSH
24627: CALL_OW 3
24631: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24632: LD_VAR 0 1
24636: PPUSH
24637: LD_EXP 67
24641: PPUSH
24642: CALL_OW 308
24646: IFFALSE 24666
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24648: LD_ADDR_EXP 77
24652: PUSH
24653: LD_EXP 77
24657: PPUSH
24658: LD_INT 1
24660: PPUSH
24661: CALL_OW 3
24665: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24666: LD_VAR 0 3
24670: PUSH
24671: LD_INT 0
24673: PUSH
24674: LD_INT 4
24676: PUSH
24677: LD_INT 2
24679: PUSH
24680: EMPTY
24681: LIST
24682: LIST
24683: LIST
24684: IN
24685: IFFALSE 24696
// ComUpgrade ( b ) ;
24687: LD_VAR 0 1
24691: PPUSH
24692: CALL_OW 146
// if type = b_lab then
24696: LD_VAR 0 3
24700: PUSH
24701: LD_INT 6
24703: EQUAL
24704: IFFALSE 24748
// if IsInArea ( b , ruBaseArea ) then
24706: LD_VAR 0 1
24710: PPUSH
24711: LD_EXP 66
24715: PPUSH
24716: CALL_OW 308
24720: IFFALSE 24736
// ComUpgradeLab ( b , b_lab_weapon ) else
24722: LD_VAR 0 1
24726: PPUSH
24727: LD_INT 10
24729: PPUSH
24730: CALL_OW 147
24734: GO 24748
// ComUpgradeLab ( b , b_lab_computer ) ;
24736: LD_VAR 0 1
24740: PPUSH
24741: LD_INT 12
24743: PPUSH
24744: CALL_OW 147
// if type = b_depot then
24748: LD_VAR 0 3
24752: PUSH
24753: LD_INT 0
24755: EQUAL
24756: IFFALSE 24882
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 274
24767: PPUSH
24768: LD_INT 1
24770: PPUSH
24771: LD_INT 2550
24773: PPUSH
24774: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 274
24787: PPUSH
24788: LD_INT 2
24790: PPUSH
24791: LD_INT 250
24793: PPUSH
24794: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24798: LD_VAR 0 1
24802: PPUSH
24803: CALL_OW 274
24807: PPUSH
24808: LD_INT 3
24810: PPUSH
24811: LD_INT 200
24813: PPUSH
24814: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24818: LD_VAR 0 1
24822: PPUSH
24823: LD_EXP 66
24827: PPUSH
24828: CALL_OW 308
24832: IFFALSE 24856
// begin ruBase := b ;
24834: LD_ADDR_EXP 68
24838: PUSH
24839: LD_VAR 0 1
24843: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24844: LD_VAR 0 1
24848: PPUSH
24849: LD_STRING chuikov
24851: PPUSH
24852: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24856: LD_VAR 0 1
24860: PPUSH
24861: LD_EXP 67
24865: PPUSH
24866: CALL_OW 308
24870: IFFALSE 24882
// begin ruBase2 := b ;
24872: LD_ADDR_EXP 69
24876: PUSH
24877: LD_VAR 0 1
24881: ST_TO_ADDR
// end ; end ; end ; end ;
24882: PPOPN 3
24884: END
// on UpgradeComplete ( b ) do var side , type ;
24885: LD_INT 0
24887: PPUSH
24888: PPUSH
// begin side := GetSide ( b ) ;
24889: LD_ADDR_VAR 0 2
24893: PUSH
24894: LD_VAR 0 1
24898: PPUSH
24899: CALL_OW 255
24903: ST_TO_ADDR
// type := GetBType ( b ) ;
24904: LD_ADDR_VAR 0 3
24908: PUSH
24909: LD_VAR 0 1
24913: PPUSH
24914: CALL_OW 266
24918: ST_TO_ADDR
// if side = 3 then
24919: LD_VAR 0 2
24923: PUSH
24924: LD_INT 3
24926: EQUAL
24927: IFFALSE 24981
// if type = b_lab_half then
24929: LD_VAR 0 3
24933: PUSH
24934: LD_INT 7
24936: EQUAL
24937: IFFALSE 24981
// if IsInArea ( b , ruBaseArea ) then
24939: LD_VAR 0 1
24943: PPUSH
24944: LD_EXP 66
24948: PPUSH
24949: CALL_OW 308
24953: IFFALSE 24969
// ComUpgradeLab ( b , b_lab_spacetime ) else
24955: LD_VAR 0 1
24959: PPUSH
24960: LD_INT 14
24962: PPUSH
24963: CALL_OW 147
24967: GO 24981
// ComUpgradeLab ( b , b_lab_siberium ) ;
24969: LD_VAR 0 1
24973: PPUSH
24974: LD_INT 11
24976: PPUSH
24977: CALL_OW 147
// end ;
24981: PPOPN 3
24983: END
// on ResearchComplete ( tech , lab ) do var side ;
24984: LD_INT 0
24986: PPUSH
// begin side := GetSide ( lab ) ;
24987: LD_ADDR_VAR 0 3
24991: PUSH
24992: LD_VAR 0 2
24996: PPUSH
24997: CALL_OW 255
25001: ST_TO_ADDR
// if side = 2 then
25002: LD_VAR 0 3
25006: PUSH
25007: LD_INT 2
25009: EQUAL
25010: IFFALSE 25058
// begin arTech := Delete ( arTech , 1 ) ;
25012: LD_ADDR_EXP 52
25016: PUSH
25017: LD_EXP 52
25021: PPUSH
25022: LD_INT 1
25024: PPUSH
25025: CALL_OW 3
25029: ST_TO_ADDR
// if tech = tech_sibPow then
25030: LD_VAR 0 1
25034: PUSH
25035: LD_INT 21
25037: EQUAL
25038: IFFALSE 25044
// DArabTrait1 ;
25040: CALL 29151 0 0
// if tech = tech_sibEng then
25044: LD_VAR 0 1
25048: PUSH
25049: LD_INT 22
25051: EQUAL
25052: IFFALSE 25058
// DArabTrait2 ;
25054: CALL 29482 0 0
// end ; end ;
25058: PPOPN 3
25060: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
25061: LD_VAR 0 1
25065: PPUSH
25066: CALL 50328 0 1
// end ;
25070: PPOPN 1
25072: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25073: LD_VAR 0 1
25077: PUSH
25078: LD_INT 1
25080: EQUAL
25081: IFFALSE 25093
25083: PUSH
25084: LD_VAR 0 2
25088: PUSH
25089: LD_INT 2
25091: EQUAL
25092: AND
25093: IFFALSE 25111
25095: PUSH
25096: LD_INT 1
25098: PPUSH
25099: LD_INT 2
25101: PPUSH
25102: CALL_OW 81
25106: PUSH
25107: LD_INT 1
25109: EQUAL
25110: AND
25111: IFFALSE 25117
// DAttackOnAlly ;
25113: CALL 26833 0 0
// end ;
25117: PPOPN 2
25119: END
// on SailEvent ( event ) do begin case event of EArabAttack :
25120: LD_VAR 0 1
25124: PUSH
25125: LD_INT 101
25127: DOUBLE
25128: EQUAL
25129: IFTRUE 25133
25131: GO 25140
25133: POP
// ArabAttack ; ERussianBaseC :
25134: CALL 7286 0 0
25138: GO 25292
25140: LD_INT 102
25142: DOUBLE
25143: EQUAL
25144: IFTRUE 25148
25146: GO 25169
25148: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
25149: LD_EXP 59
25153: PUSH
25154: LD_EXP 61
25158: UNION
25159: PPUSH
25160: LD_INT 1
25162: PPUSH
25163: CALL 10977 0 2
25167: GO 25292
25169: LD_INT 103
25171: DOUBLE
25172: EQUAL
25173: IFTRUE 25177
25175: GO 25198
25177: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
25178: LD_EXP 59
25182: PUSH
25183: LD_EXP 61
25187: UNION
25188: PPUSH
25189: LD_INT 2
25191: PPUSH
25192: CALL 10977 0 2
25196: GO 25292
25198: LD_INT 104
25200: DOUBLE
25201: EQUAL
25202: IFTRUE 25206
25204: GO 25227
25206: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
25207: LD_EXP 59
25211: PUSH
25212: LD_EXP 61
25216: UNION
25217: PPUSH
25218: LD_INT 3
25220: PPUSH
25221: CALL 10977 0 2
25225: GO 25292
25227: LD_INT 105
25229: DOUBLE
25230: EQUAL
25231: IFTRUE 25235
25233: GO 25256
25235: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25236: LD_EXP 60
25240: PUSH
25241: LD_EXP 62
25245: UNION
25246: PPUSH
25247: LD_INT 2
25249: PPUSH
25250: CALL 12486 0 2
25254: GO 25292
25256: LD_INT 106
25258: DOUBLE
25259: EQUAL
25260: IFTRUE 25264
25262: GO 25271
25264: POP
// RussianExtraAttack ; ESendRussianAttack :
25265: CALL 20389 0 0
25269: GO 25292
25271: LD_INT 107
25273: DOUBLE
25274: EQUAL
25275: IFTRUE 25279
25277: GO 25291
25279: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25280: LD_EXP 18
25284: PPUSH
25285: CALL 21483 0 1
25289: GO 25292
25291: POP
// end ; end_of_file
25292: PPOPN 1
25294: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25295: LD_INT 0
25297: PPUSH
25298: PPUSH
25299: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25300: LD_ADDR_VAR 0 1
25304: PUSH
25305: LD_VAR 0 1
25309: PUSH
25310: LD_EXP 23
25314: PUSH
25315: LD_EXP 24
25319: PUSH
25320: LD_EXP 25
25324: PUSH
25325: LD_EXP 26
25329: PUSH
25330: LD_EXP 27
25334: PUSH
25335: LD_EXP 28
25339: PUSH
25340: LD_EXP 29
25344: PUSH
25345: LD_EXP 30
25349: PUSH
25350: LD_EXP 31
25354: PUSH
25355: LD_EXP 32
25359: PUSH
25360: LD_EXP 33
25364: PUSH
25365: LD_EXP 34
25369: PUSH
25370: LD_EXP 35
25374: PUSH
25375: LD_EXP 36
25379: PUSH
25380: LD_EXP 37
25384: PUSH
25385: LD_EXP 38
25389: PUSH
25390: LD_EXP 39
25394: PUSH
25395: LD_EXP 40
25399: PUSH
25400: LD_EXP 42
25404: PUSH
25405: LD_EXP 44
25409: PUSH
25410: EMPTY
25411: LIST
25412: LIST
25413: LIST
25414: LIST
25415: LIST
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: DIFF
25432: ST_TO_ADDR
// if not characters then
25433: LD_VAR 0 1
25437: NOT
25438: IFFALSE 25442
// exit ;
25440: GO 25526
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25442: LD_ADDR_VAR 0 6
25446: PUSH
25447: LD_VAR 0 1
25451: PUSH
25452: LD_INT 1
25454: PPUSH
25455: LD_VAR 0 1
25459: PPUSH
25460: CALL 58984 0 1
25464: PPUSH
25465: CALL_OW 12
25469: ARRAY
25470: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25471: LD_VAR 0 6
25475: PPUSH
25476: CALL_OW 258
25480: PUSH
25481: LD_INT 1
25483: EQUAL
25484: IFFALSE 25502
// Say ( speaker , dialogMID ) else
25486: LD_VAR 0 6
25490: PPUSH
25491: LD_VAR 0 2
25495: PPUSH
25496: CALL_OW 88
25500: GO 25516
// Say ( speaker , dialogFID ) ;
25502: LD_VAR 0 6
25506: PPUSH
25507: LD_VAR 0 3
25511: PPUSH
25512: CALL_OW 88
// result := speaker ;
25516: LD_ADDR_VAR 0 4
25520: PUSH
25521: LD_VAR 0 6
25525: ST_TO_ADDR
// end ; end_of_file
25526: LD_VAR 0 4
25530: RET
// export function Action ; begin
25531: LD_INT 0
25533: PPUSH
// InGameOn ;
25534: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25538: LD_INT 25
25540: PPUSH
25541: LD_INT 35
25543: PPUSH
25544: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25548: LD_INT 1
25550: PPUSH
25551: LD_INT 5
25553: PPUSH
25554: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25558: LD_INT 1
25560: PPUSH
25561: LD_INT 4
25563: PPUSH
25564: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25568: LD_INT 52
25570: PPUSH
25571: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25575: LD_EXP 33
25579: PPUSH
25580: CALL_OW 87
// wait ( 0 0$3 ) ;
25584: LD_INT 105
25586: PPUSH
25587: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25591: LD_EXP 23
25595: PPUSH
25596: CALL_OW 310
25600: PPUSH
25601: CALL_OW 85
// wait ( 0 0$1 ) ;
25605: LD_INT 35
25607: PPUSH
25608: CALL_OW 67
// if IsOk ( Gary ) then
25612: LD_EXP 32
25616: PPUSH
25617: CALL_OW 302
25621: IFFALSE 25659
// begin Say ( Gary , D2-Gary-1 ) ;
25623: LD_EXP 32
25627: PPUSH
25628: LD_STRING D2-Gary-1
25630: PPUSH
25631: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25635: LD_EXP 23
25639: PPUSH
25640: LD_STRING D2-JMM-1
25642: PPUSH
25643: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25647: LD_EXP 32
25651: PPUSH
25652: LD_STRING D2-Gary-2
25654: PPUSH
25655: CALL_OW 88
// end ; InGameOff ;
25659: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25663: LD_STRING M1
25665: PPUSH
25666: CALL_OW 337
// SaveForQuickRestart ;
25670: CALL_OW 22
// end ;
25674: LD_VAR 0 1
25678: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25679: LD_EXP 23
25683: PPUSH
25684: LD_EXP 33
25688: PPUSH
25689: CALL_OW 296
25693: PUSH
25694: LD_INT 15
25696: LESS
25697: IFFALSE 26661
25699: GO 25701
25701: DISABLE
25702: LD_INT 0
25704: PPUSH
25705: PPUSH
// begin wait ( 0 0$3 ) ;
25706: LD_INT 105
25708: PPUSH
25709: CALL_OW 67
// Video ( true ) ;
25713: LD_INT 1
25715: PPUSH
25716: CALL 94932 0 1
// ComExitVehicle ( JMM ) ;
25720: LD_EXP 23
25724: PPUSH
25725: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25729: LD_EXP 23
25733: PPUSH
25734: LD_EXP 33
25738: PPUSH
25739: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25743: LD_EXP 23
25747: PPUSH
25748: CALL_OW 87
// if Truman then
25752: LD_EXP 43
25756: IFFALSE 25893
// begin ComMoveUnit ( Truman , JMM ) ;
25758: LD_EXP 43
25762: PPUSH
25763: LD_EXP 23
25767: PPUSH
25768: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25772: LD_INT 35
25774: PPUSH
25775: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25779: LD_EXP 43
25783: PPUSH
25784: LD_EXP 23
25788: PPUSH
25789: CALL_OW 296
25793: PUSH
25794: LD_INT 6
25796: LESS
25797: IFFALSE 25772
// ComTurnUnit ( Truman , JMM ) ;
25799: LD_EXP 43
25803: PPUSH
25804: LD_EXP 23
25808: PPUSH
25809: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25813: LD_EXP 23
25817: PPUSH
25818: LD_EXP 43
25822: PPUSH
25823: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25827: LD_EXP 43
25831: PPUSH
25832: LD_STRING D2-Tru-1
25834: PPUSH
25835: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25839: LD_EXP 23
25843: PPUSH
25844: LD_STRING D2-JMM-Tru-1
25846: PPUSH
25847: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25851: LD_EXP 43
25855: PPUSH
25856: LD_STRING D2-Tru-2
25858: PPUSH
25859: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25863: LD_EXP 43
25867: PPUSH
25868: LD_INT 79
25870: PPUSH
25871: LD_INT 41
25873: PPUSH
25874: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25878: LD_EXP 43
25882: PPUSH
25883: LD_INT 17
25885: PPUSH
25886: LD_INT 31
25888: PPUSH
25889: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25893: LD_EXP 23
25897: PPUSH
25898: LD_EXP 33
25902: PPUSH
25903: CALL_OW 179
// p := 15 ;
25907: LD_ADDR_VAR 0 2
25911: PUSH
25912: LD_INT 15
25914: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25915: LD_INT 35
25917: PPUSH
25918: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25922: LD_EXP 33
25926: PUSH
25927: LD_EXP 35
25931: PUSH
25932: LD_EXP 34
25936: PUSH
25937: LD_EXP 36
25941: PUSH
25942: LD_EXP 30
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: LIST
25953: PPUSH
25954: LD_EXP 23
25958: PPUSH
25959: CALL_OW 112
// p := p - 1 ;
25963: LD_ADDR_VAR 0 2
25967: PUSH
25968: LD_VAR 0 2
25972: PUSH
25973: LD_INT 1
25975: MINUS
25976: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25977: LD_EXP 23
25981: PPUSH
25982: LD_EXP 33
25986: PPUSH
25987: CALL_OW 296
25991: PUSH
25992: LD_INT 5
25994: LESS
25995: IFTRUE 26007
25997: PUSH
25998: LD_VAR 0 2
26002: PUSH
26003: LD_INT 0
26005: LESSEQUAL
26006: OR
26007: IFFALSE 25915
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
26009: LD_EXP 33
26013: PUSH
26014: LD_EXP 35
26018: PUSH
26019: LD_EXP 34
26023: PUSH
26024: LD_EXP 36
26028: PUSH
26029: LD_EXP 30
26033: PUSH
26034: EMPTY
26035: LIST
26036: LIST
26037: LIST
26038: LIST
26039: LIST
26040: PPUSH
26041: LD_EXP 23
26045: PPUSH
26046: CALL_OW 119
// if not IsInUnit ( JMM ) then
26050: LD_EXP 23
26054: PPUSH
26055: CALL_OW 310
26059: NOT
26060: IFFALSE 26076
// ComTurnUnit ( JMM , Simms ) ;
26062: LD_EXP 23
26066: PPUSH
26067: LD_EXP 33
26071: PPUSH
26072: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
26076: LD_EXP 33
26080: PUSH
26081: LD_EXP 35
26085: PUSH
26086: LD_EXP 34
26090: PUSH
26091: LD_EXP 36
26095: PUSH
26096: EMPTY
26097: LIST
26098: LIST
26099: LIST
26100: LIST
26101: PPUSH
26102: LD_EXP 23
26106: PPUSH
26107: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
26111: LD_EXP 23
26115: PUSH
26116: LD_EXP 33
26120: PUSH
26121: EMPTY
26122: LIST
26123: LIST
26124: PPUSH
26125: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
26129: LD_EXP 33
26133: PPUSH
26134: LD_STRING D2a-Sim-1
26136: PPUSH
26137: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
26141: LD_EXP 23
26145: PPUSH
26146: LD_STRING D2a-JMM-1
26148: PPUSH
26149: CALL_OW 88
// if IsOk ( Joan ) then
26153: LD_EXP 35
26157: PPUSH
26158: CALL_OW 302
26162: IFFALSE 26240
// begin if not IsInUnit ( JMM ) then
26164: LD_EXP 23
26168: PPUSH
26169: CALL_OW 310
26173: NOT
26174: IFFALSE 26190
// ComTurnUnit ( JMM , Joan ) ;
26176: LD_EXP 23
26180: PPUSH
26181: LD_EXP 35
26185: PPUSH
26186: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
26190: LD_EXP 35
26194: PPUSH
26195: LD_EXP 23
26199: PPUSH
26200: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
26204: LD_EXP 35
26208: PPUSH
26209: LD_STRING D2b-Joan-1
26211: PPUSH
26212: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26216: LD_EXP 23
26220: PPUSH
26221: LD_STRING D2b-JMM-1
26223: PPUSH
26224: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26228: LD_EXP 35
26232: PPUSH
26233: LD_STRING D2b-Joan-2
26235: PPUSH
26236: CALL_OW 88
// end ; if IsOk ( Denis ) then
26240: LD_EXP 34
26244: PPUSH
26245: CALL_OW 302
26249: IFFALSE 26303
// begin if not IsInUnit ( JMM ) then
26251: LD_EXP 23
26255: PPUSH
26256: CALL_OW 310
26260: NOT
26261: IFFALSE 26277
// ComTurnUnit ( JMM , Denis ) ;
26263: LD_EXP 23
26267: PPUSH
26268: LD_EXP 34
26272: PPUSH
26273: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26277: LD_EXP 34
26281: PPUSH
26282: LD_EXP 23
26286: PPUSH
26287: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26291: LD_EXP 34
26295: PPUSH
26296: LD_STRING D2c-Den-1
26298: PPUSH
26299: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26303: LD_EXP 30
26307: PPUSH
26308: CALL_OW 302
26312: IFFALSE 26324
26314: PUSH
26315: LD_STRING 08_Kikuchi
26317: PPUSH
26318: CALL_OW 28
26322: NOT
26323: AND
26324: IFFALSE 26419
// begin repeat wait ( 0 0$1 ) ;
26326: LD_INT 35
26328: PPUSH
26329: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26333: LD_EXP 30
26337: PPUSH
26338: LD_EXP 23
26342: PPUSH
26343: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26347: LD_EXP 23
26351: PPUSH
26352: LD_EXP 30
26356: PPUSH
26357: CALL_OW 296
26361: PUSH
26362: LD_INT 5
26364: LESS
26365: IFFALSE 26326
// ComTurnUnit ( Kikuchi , JMM ) ;
26367: LD_EXP 30
26371: PPUSH
26372: LD_EXP 23
26376: PPUSH
26377: CALL_OW 119
// if not IsInUnit ( JMM ) then
26381: LD_EXP 23
26385: PPUSH
26386: CALL_OW 310
26390: NOT
26391: IFFALSE 26407
// ComTurnUnit ( JMM , Kikuchi ) ;
26393: LD_EXP 23
26397: PPUSH
26398: LD_EXP 30
26402: PPUSH
26403: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26407: LD_EXP 30
26411: PPUSH
26412: LD_STRING D3b-Yam-1
26414: PPUSH
26415: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26419: LD_EXP 36
26423: PPUSH
26424: CALL_OW 302
26428: IFFALSE 26494
// begin if not IsInUnit ( JMM ) then
26430: LD_EXP 23
26434: PPUSH
26435: CALL_OW 310
26439: NOT
26440: IFFALSE 26456
// ComTurnUnit ( JMM , Khatam ) ;
26442: LD_EXP 23
26446: PPUSH
26447: LD_EXP 36
26451: PPUSH
26452: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26456: LD_EXP 36
26460: PPUSH
26461: LD_EXP 23
26465: PPUSH
26466: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26470: LD_EXP 23
26474: PPUSH
26475: LD_STRING D2c-JMM-1
26477: PPUSH
26478: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26482: LD_EXP 36
26486: PPUSH
26487: LD_STRING D2c-Khat-1
26489: PPUSH
26490: CALL_OW 88
// end ; Video ( false ) ;
26494: LD_INT 0
26496: PPUSH
26497: CALL 94932 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26501: LD_INT 22
26503: PUSH
26504: LD_INT 4
26506: PUSH
26507: EMPTY
26508: LIST
26509: LIST
26510: PPUSH
26511: CALL_OW 69
26515: PUSH
26516: LD_EXP 43
26520: DIFF
26521: PPUSH
26522: LD_INT 1
26524: PPUSH
26525: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26529: LD_STRING M1a
26531: PPUSH
26532: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26536: LD_INT 0
26538: PPUSH
26539: LD_INT 1
26541: PPUSH
26542: LD_INT 1
26544: PPUSH
26545: CALL_OW 324
// joinedToEpsilon := true ;
26549: LD_ADDR_EXP 7
26553: PUSH
26554: LD_INT 1
26556: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26557: LD_INT 1050
26559: PPUSH
26560: CALL_OW 67
// SpawnConvoy ;
26564: CALL 10495 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26568: LD_INT 25200
26570: PUSH
26571: LD_INT 2100
26573: PUSH
26574: LD_OWVAR 67
26578: MUL
26579: MINUS
26580: PPUSH
26581: CALL_OW 67
// firstAttack := true ;
26585: LD_ADDR_EXP 16
26589: PUSH
26590: LD_INT 1
26592: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26593: LD_INT 107
26595: PPUSH
26596: CALL_OW 427
// for i := 1 to Difficulty do
26600: LD_ADDR_VAR 0 1
26604: PUSH
26605: DOUBLE
26606: LD_INT 1
26608: DEC
26609: ST_TO_ADDR
26610: LD_OWVAR 67
26614: PUSH
26615: FOR_TO
26616: IFFALSE 26659
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26618: LD_INT 25200
26620: PUSH
26621: LD_INT 2100
26623: PUSH
26624: LD_OWVAR 67
26628: MUL
26629: MINUS
26630: PPUSH
26631: CALL_OW 67
// if not ruActiveAttacks then
26635: LD_EXP 22
26639: NOT
26640: IFFALSE 26650
// ruActiveAttacks := true ;
26642: LD_ADDR_EXP 22
26646: PUSH
26647: LD_INT 1
26649: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26650: LD_INT 107
26652: PPUSH
26653: CALL_OW 427
// end ;
26657: GO 26615
26659: POP
26660: POP
// end ;
26661: PPOPN 2
26663: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26664: LD_EXP 43
26668: PPUSH
26669: CALL_OW 302
26673: IFFALSE 26681
26675: PUSH
26676: LD_EXP 7
26680: AND
26681: IFFALSE 26754
26683: GO 26685
26685: DISABLE
// begin enable ;
26686: ENABLE
// if not HasTask ( Truman ) then
26687: LD_EXP 43
26691: PPUSH
26692: CALL_OW 314
26696: NOT
26697: IFFALSE 26711
// ComMoveToArea ( Truman , removeArea ) ;
26699: LD_EXP 43
26703: PPUSH
26704: LD_INT 10
26706: PPUSH
26707: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26711: LD_EXP 43
26715: PPUSH
26716: LD_INT 17
26718: PPUSH
26719: LD_INT 32
26721: PPUSH
26722: CALL_OW 307
26726: IFTRUE 26742
26728: PUSH
26729: LD_EXP 43
26733: PPUSH
26734: LD_INT 10
26736: PPUSH
26737: CALL_OW 308
26741: OR
26742: IFFALSE 26754
// begin RemoveUnit ( Truman ) ;
26744: LD_EXP 43
26748: PPUSH
26749: CALL_OW 64
// disable ;
26753: DISABLE
// end ; end ;
26754: END
// export function DTankTeleport ( x , y ) ; begin
26755: LD_INT 0
26757: PPUSH
// DialogueOn ;
26758: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26762: LD_VAR 0 1
26766: PPUSH
26767: LD_VAR 0 2
26771: PPUSH
26772: CALL_OW 86
// if IsOk ( Cyrus ) then
26776: LD_EXP 27
26780: PPUSH
26781: CALL_OW 302
26785: IFFALSE 26801
// Say ( Cyrus , D10-Cyrus-1 ) else
26787: LD_EXP 27
26791: PPUSH
26792: LD_STRING D10-Cyrus-1
26794: PPUSH
26795: CALL_OW 88
26799: GO 26824
// if IsOk ( JMM ) then
26801: LD_EXP 23
26805: PPUSH
26806: CALL_OW 302
26810: IFFALSE 26824
// Say ( JMM , D10-JMM-1 ) ;
26812: LD_EXP 23
26816: PPUSH
26817: LD_STRING D10-JMM-1
26819: PPUSH
26820: CALL_OW 88
// DialogueOff ;
26824: CALL_OW 7
// end ;
26828: LD_VAR 0 3
26832: RET
// export function DAttackOnAlly ; begin
26833: LD_INT 0
26835: PPUSH
// DialogueOn ;
26836: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26840: LD_INT 10
26842: PPUSH
26843: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26847: LD_EXP 44
26851: PPUSH
26852: LD_STRING D6b-Pow-1
26854: PPUSH
26855: CALL_OW 94
// YouLost ( Powell ) ;
26859: LD_STRING Powell
26861: PPUSH
26862: CALL_OW 104
// DialogueOff ;
26866: CALL_OW 7
// end ;
26870: LD_VAR 0 1
26874: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26875: LD_INT 5
26877: PPUSH
26878: LD_INT 22
26880: PUSH
26881: LD_INT 1
26883: PUSH
26884: EMPTY
26885: LIST
26886: LIST
26887: PUSH
26888: LD_INT 21
26890: PUSH
26891: LD_INT 3
26893: PUSH
26894: EMPTY
26895: LIST
26896: LIST
26897: PUSH
26898: EMPTY
26899: LIST
26900: LIST
26901: PPUSH
26902: CALL_OW 70
26906: IFTRUE 26941
26908: PUSH
26909: LD_INT 5
26911: PPUSH
26912: LD_INT 22
26914: PUSH
26915: LD_INT 1
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PUSH
26922: LD_INT 21
26924: PUSH
26925: LD_INT 2
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PUSH
26932: EMPTY
26933: LIST
26934: LIST
26935: PPUSH
26936: CALL_OW 70
26940: OR
26941: IFFALSE 26959
26943: PUSH
26944: LD_INT 1
26946: PPUSH
26947: LD_INT 2
26949: PPUSH
26950: CALL_OW 81
26954: PUSH
26955: LD_INT 1
26957: EQUAL
26958: AND
26959: IFFALSE 27202
26961: GO 26963
26963: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26964: LD_INT 5
26966: PPUSH
26967: LD_INT 22
26969: PUSH
26970: LD_INT 1
26972: PUSH
26973: EMPTY
26974: LIST
26975: LIST
26976: PUSH
26977: LD_INT 21
26979: PUSH
26980: LD_INT 3
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PPUSH
26991: CALL_OW 70
26995: IFTRUE 27030
26997: PUSH
26998: LD_INT 5
27000: PPUSH
27001: LD_INT 22
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 21
27013: PUSH
27014: LD_INT 2
27016: PUSH
27017: EMPTY
27018: LIST
27019: LIST
27020: PUSH
27021: EMPTY
27022: LIST
27023: LIST
27024: PPUSH
27025: CALL_OW 70
27029: OR
27030: IFFALSE 27048
27032: PUSH
27033: LD_INT 1
27035: PPUSH
27036: LD_INT 2
27038: PPUSH
27039: CALL_OW 81
27043: PUSH
27044: LD_INT 1
27046: EQUAL
27047: AND
27048: IFFALSE 27057
// Query ( QAttack ) ;
27050: LD_STRING QAttack
27052: PPUSH
27053: CALL_OW 97
// wait ( 0 0$20 ) ;
27057: LD_INT 700
27059: PPUSH
27060: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
27064: LD_INT 350
27066: PPUSH
27067: CALL_OW 67
// if arabianAttack then
27071: LD_EXP 4
27075: IFFALSE 27079
// exit ;
27077: GO 27202
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
27079: LD_INT 5
27081: PPUSH
27082: LD_INT 22
27084: PUSH
27085: LD_INT 1
27087: PUSH
27088: EMPTY
27089: LIST
27090: LIST
27091: PUSH
27092: LD_INT 21
27094: PUSH
27095: LD_INT 3
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: PUSH
27102: EMPTY
27103: LIST
27104: LIST
27105: PPUSH
27106: CALL_OW 70
27110: IFTRUE 27145
27112: PUSH
27113: LD_INT 5
27115: PPUSH
27116: LD_INT 22
27118: PUSH
27119: LD_INT 1
27121: PUSH
27122: EMPTY
27123: LIST
27124: LIST
27125: PUSH
27126: LD_INT 21
27128: PUSH
27129: LD_INT 2
27131: PUSH
27132: EMPTY
27133: LIST
27134: LIST
27135: PUSH
27136: EMPTY
27137: LIST
27138: LIST
27139: PPUSH
27140: CALL_OW 70
27144: OR
27145: IFFALSE 27163
27147: PUSH
27148: LD_INT 1
27150: PPUSH
27151: LD_INT 2
27153: PPUSH
27154: CALL_OW 81
27158: PUSH
27159: LD_INT 1
27161: EQUAL
27162: AND
27163: IFFALSE 27064
// InGameOn ;
27165: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
27169: LD_INT 73
27171: PPUSH
27172: LD_INT 18
27174: PPUSH
27175: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
27179: LD_EXP 44
27183: PPUSH
27184: LD_STRING D6b-Pow-1
27186: PPUSH
27187: CALL_OW 94
// YouLost ( Powell ) ;
27191: LD_STRING Powell
27193: PPUSH
27194: CALL_OW 104
// InGameOff ;
27198: CALL_OW 9
// end ;
27202: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
27203: LD_INT 12
27205: PPUSH
27206: LD_INT 1
27208: PPUSH
27209: CALL_OW 321
27213: PUSH
27214: LD_INT 2
27216: EQUAL
27217: IFFALSE 27229
27219: GO 27221
27221: DISABLE
// ChangeMissionObjectives ( M2b ) ;
27222: LD_STRING M2b
27224: PPUSH
27225: CALL_OW 337
27229: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
27230: LD_INT 32
27232: PPUSH
27233: LD_INT 1
27235: PPUSH
27236: CALL_OW 321
27240: PUSH
27241: LD_INT 2
27243: EQUAL
27244: IFFALSE 27256
27246: GO 27248
27248: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27249: LD_STRING M2c
27251: PPUSH
27252: CALL_OW 337
27256: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27257: LD_EXP 4
27261: IFFALSE 27269
27263: PUSH
27264: LD_EXP 12
27268: AND
27269: IFFALSE 27305
27271: PUSH
27272: LD_INT 22
27274: PUSH
27275: LD_INT 2
27277: PUSH
27278: EMPTY
27279: LIST
27280: LIST
27281: PUSH
27282: LD_INT 21
27284: PUSH
27285: LD_INT 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PPUSH
27296: CALL_OW 69
27300: PUSH
27301: LD_INT 0
27303: EQUAL
27304: AND
27305: IFFALSE 27328
27307: PUSH
27308: LD_EXP 58
27312: PPUSH
27313: LD_INT 50
27315: PUSH
27316: EMPTY
27317: LIST
27318: PPUSH
27319: CALL_OW 72
27323: PUSH
27324: LD_INT 0
27326: EQUAL
27327: AND
27328: IFFALSE 27351
27330: PUSH
27331: LD_EXP 57
27335: PPUSH
27336: LD_INT 50
27338: PUSH
27339: EMPTY
27340: LIST
27341: PPUSH
27342: CALL_OW 72
27346: PUSH
27347: LD_INT 0
27349: EQUAL
27350: AND
27351: IFFALSE 27371
27353: GO 27355
27355: DISABLE
// begin arabianDefeated := true ;
27356: LD_ADDR_EXP 8
27360: PUSH
27361: LD_INT 1
27363: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27364: LD_STRING M4a
27366: PPUSH
27367: CALL_OW 337
// end ;
27371: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27372: LD_INT 54
27374: PPUSH
27375: LD_INT 1
27377: PPUSH
27378: CALL_OW 321
27382: PUSH
27383: LD_INT 2
27385: EQUAL
27386: IFFALSE 27404
27388: PUSH
27389: LD_INT 55
27391: PPUSH
27392: LD_INT 1
27394: PPUSH
27395: CALL_OW 321
27399: PUSH
27400: LD_INT 2
27402: EQUAL
27403: AND
27404: IFFALSE 27422
27406: PUSH
27407: LD_INT 21
27409: PPUSH
27410: LD_INT 1
27412: PPUSH
27413: CALL_OW 321
27417: PUSH
27418: LD_INT 2
27420: EQUAL
27421: AND
27422: IFFALSE 27440
27424: PUSH
27425: LD_INT 22
27427: PPUSH
27428: LD_INT 1
27430: PPUSH
27431: CALL_OW 321
27435: PUSH
27436: LD_INT 2
27438: EQUAL
27439: AND
27440: IFFALSE 27452
27442: GO 27444
27444: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27445: LD_STRING M2a
27447: PPUSH
27448: CALL_OW 337
27452: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27453: LD_INT 22
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 3
27465: PUSH
27466: LD_INT 57
27468: PUSH
27469: EMPTY
27470: LIST
27471: PUSH
27472: EMPTY
27473: LIST
27474: LIST
27475: PUSH
27476: LD_INT 63
27478: PUSH
27479: LD_INT 11
27481: PUSH
27482: EMPTY
27483: LIST
27484: LIST
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: PPUSH
27491: CALL_OW 69
27495: IFFALSE 28729
27497: GO 27499
27499: DISABLE
27500: LD_INT 0
27502: PPUSH
27503: PPUSH
27504: PPUSH
27505: PPUSH
27506: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27507: LD_ADDR_VAR 0 1
27511: PUSH
27512: LD_EXP 32
27516: PPUSH
27517: CALL_OW 302
27521: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27522: LD_ADDR_VAR 0 2
27526: PUSH
27527: LD_EXP 39
27531: PPUSH
27532: CALL_OW 302
27536: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27537: LD_ADDR_VAR 0 3
27541: PUSH
27542: LD_INT 22
27544: PUSH
27545: LD_INT 1
27547: PUSH
27548: EMPTY
27549: LIST
27550: LIST
27551: PUSH
27552: LD_INT 50
27554: PUSH
27555: EMPTY
27556: LIST
27557: PUSH
27558: LD_INT 25
27560: PUSH
27561: LD_INT 4
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 26
27570: PUSH
27571: LD_INT 1
27573: PUSH
27574: EMPTY
27575: LIST
27576: LIST
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: PPUSH
27584: CALL_OW 69
27588: PUSH
27589: LD_EXP 23
27593: PUSH
27594: LD_EXP 24
27598: PUSH
27599: LD_EXP 25
27603: PUSH
27604: LD_EXP 26
27608: PUSH
27609: LD_EXP 27
27613: PUSH
27614: LD_EXP 28
27618: PUSH
27619: LD_EXP 29
27623: PUSH
27624: LD_EXP 30
27628: PUSH
27629: LD_EXP 31
27633: PUSH
27634: LD_EXP 32
27638: PUSH
27639: LD_EXP 33
27643: PUSH
27644: LD_EXP 34
27648: PUSH
27649: LD_EXP 35
27653: PUSH
27654: LD_EXP 36
27658: PUSH
27659: LD_EXP 37
27663: PUSH
27664: LD_EXP 38
27668: PUSH
27669: LD_EXP 39
27673: PUSH
27674: LD_EXP 40
27678: PUSH
27679: LD_EXP 42
27683: PUSH
27684: LD_EXP 44
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: LIST
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: DIFF
27711: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27712: LD_ADDR_VAR 0 4
27716: PUSH
27717: LD_INT 22
27719: PUSH
27720: LD_INT 1
27722: PUSH
27723: EMPTY
27724: LIST
27725: LIST
27726: PUSH
27727: LD_INT 50
27729: PUSH
27730: EMPTY
27731: LIST
27732: PUSH
27733: LD_INT 26
27735: PUSH
27736: LD_INT 1
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: PUSH
27743: LD_INT 2
27745: PUSH
27746: LD_INT 25
27748: PUSH
27749: LD_INT 1
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: PUSH
27756: LD_INT 25
27758: PUSH
27759: LD_INT 2
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: PUSH
27766: LD_INT 25
27768: PUSH
27769: LD_INT 3
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: PPUSH
27788: CALL_OW 69
27792: PUSH
27793: LD_EXP 23
27797: PUSH
27798: LD_EXP 24
27802: PUSH
27803: LD_EXP 25
27807: PUSH
27808: LD_EXP 26
27812: PUSH
27813: LD_EXP 27
27817: PUSH
27818: LD_EXP 28
27822: PUSH
27823: LD_EXP 29
27827: PUSH
27828: LD_EXP 30
27832: PUSH
27833: LD_EXP 31
27837: PUSH
27838: LD_EXP 32
27842: PUSH
27843: LD_EXP 33
27847: PUSH
27848: LD_EXP 34
27852: PUSH
27853: LD_EXP 35
27857: PUSH
27858: LD_EXP 36
27862: PUSH
27863: LD_EXP 37
27867: PUSH
27868: LD_EXP 38
27872: PUSH
27873: LD_EXP 39
27877: PUSH
27878: LD_EXP 40
27882: PUSH
27883: LD_EXP 42
27887: PUSH
27888: LD_EXP 44
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: LIST
27897: LIST
27898: LIST
27899: LIST
27900: LIST
27901: LIST
27902: LIST
27903: LIST
27904: LIST
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: DIFF
27915: ST_TO_ADDR
// if tmp1 then
27916: LD_VAR 0 3
27920: IFFALSE 27936
// tmp1 := tmp1 [ 1 ] ;
27922: LD_ADDR_VAR 0 3
27926: PUSH
27927: LD_VAR 0 3
27931: PUSH
27932: LD_INT 1
27934: ARRAY
27935: ST_TO_ADDR
// if tmp2 then
27936: LD_VAR 0 4
27940: IFFALSE 27956
// tmp2 := tmp2 [ 1 ] ;
27942: LD_ADDR_VAR 0 4
27946: PUSH
27947: LD_VAR 0 4
27951: PUSH
27952: LD_INT 1
27954: ARRAY
27955: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27956: LD_VAR 0 1
27960: IFTRUE 27968
27962: PUSH
27963: LD_VAR 0 4
27967: OR
27968: IFFALSE 27984
27970: PUSH
27971: LD_VAR 0 2
27975: IFTRUE 27983
27977: PUSH
27978: LD_VAR 0 3
27982: OR
27983: AND
27984: IFFALSE 28178
// begin DialogueOn ;
27986: CALL_OW 6
// if deltaSpeaker then
27990: LD_VAR 0 2
27994: IFFALSE 28010
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27996: LD_EXP 39
28000: PPUSH
28001: LD_STRING D3-Sci1-1
28003: PPUSH
28004: CALL_OW 88
28008: GO 28022
// Say ( tmp1 , D3-Sci1-1 ) ;
28010: LD_VAR 0 3
28014: PPUSH
28015: LD_STRING D3-Sci1-1
28017: PPUSH
28018: CALL_OW 88
// if garySpeaker then
28022: LD_VAR 0 1
28026: IFFALSE 28042
// Say ( Gary , D3-Gary-1 ) else
28028: LD_EXP 32
28032: PPUSH
28033: LD_STRING D3-Gary-1
28035: PPUSH
28036: CALL_OW 88
28040: GO 28054
// Say ( tmp2 , D3-Gary-1 ) ;
28042: LD_VAR 0 4
28046: PPUSH
28047: LD_STRING D3-Gary-1
28049: PPUSH
28050: CALL_OW 88
// if deltaSpeaker then
28054: LD_VAR 0 2
28058: IFFALSE 28074
// Say ( DeltaDoctor , D3-Sci1-2 ) else
28060: LD_EXP 39
28064: PPUSH
28065: LD_STRING D3-Sci1-2
28067: PPUSH
28068: CALL_OW 88
28072: GO 28086
// Say ( tmp1 , D3-Sci1-2 ) ;
28074: LD_VAR 0 3
28078: PPUSH
28079: LD_STRING D3-Sci1-2
28081: PPUSH
28082: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
28086: LD_EXP 23
28090: PPUSH
28091: LD_STRING D3-JMM-2
28093: PPUSH
28094: CALL_OW 88
// if deltaSpeaker then
28098: LD_VAR 0 2
28102: IFFALSE 28118
// Say ( DeltaDoctor , D3-Sci1-3 ) else
28104: LD_EXP 39
28108: PPUSH
28109: LD_STRING D3-Sci1-3
28111: PPUSH
28112: CALL_OW 88
28116: GO 28130
// Say ( tmp1 , D3-Sci1-3 ) ;
28118: LD_VAR 0 3
28122: PPUSH
28123: LD_STRING D3-Sci1-3
28125: PPUSH
28126: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
28130: LD_EXP 23
28134: PPUSH
28135: LD_STRING D3-JMM-3
28137: PPUSH
28138: CALL_OW 88
// if deltaSpeaker then
28142: LD_VAR 0 2
28146: IFFALSE 28162
// Say ( DeltaDoctor , D3-Sci1-4 ) else
28148: LD_EXP 39
28152: PPUSH
28153: LD_STRING D3-Sci1-4
28155: PPUSH
28156: CALL_OW 88
28160: GO 28174
// Say ( tmp1 , D3-Sci1-4 ) ;
28162: LD_VAR 0 3
28166: PPUSH
28167: LD_STRING D3-Sci1-4
28169: PPUSH
28170: CALL_OW 88
// DialogueOff ;
28174: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
28178: LD_INT 12
28180: PPUSH
28181: LD_INT 1
28183: PPUSH
28184: LD_INT 1
28186: PPUSH
28187: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
28191: LD_INT 40
28193: PPUSH
28194: LD_INT 1
28196: PPUSH
28197: LD_INT 1
28199: PPUSH
28200: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
28204: LD_INT 32
28206: PPUSH
28207: LD_INT 1
28209: PPUSH
28210: LD_INT 1
28212: PPUSH
28213: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
28217: LD_INT 33
28219: PPUSH
28220: LD_INT 1
28222: PPUSH
28223: LD_INT 1
28225: PPUSH
28226: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
28230: LD_INT 12
28232: PPUSH
28233: LD_INT 1
28235: PPUSH
28236: LD_INT 1
28238: PPUSH
28239: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
28243: LD_STRING M2
28245: PPUSH
28246: CALL_OW 337
// wait ( 3 3$0 ) ;
28250: LD_INT 6300
28252: PPUSH
28253: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28257: LD_INT 35
28259: PPUSH
28260: CALL_OW 67
// until not InBattle ( 1 ) ;
28264: LD_INT 1
28266: PPUSH
28267: CALL_OW 463
28271: NOT
28272: IFFALSE 28257
// if IsOk ( Simms ) and deltaSpeaker then
28274: LD_EXP 33
28278: PPUSH
28279: CALL_OW 302
28283: IFFALSE 28291
28285: PUSH
28286: LD_VAR 0 2
28290: AND
28291: IFFALSE 28460
// begin DialogueOn ;
28293: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28297: LD_EXP 33
28301: PPUSH
28302: LD_STRING D3a-Sim-1
28304: PPUSH
28305: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28309: LD_EXP 39
28313: PPUSH
28314: LD_STRING D3a-Sci1-1
28316: PPUSH
28317: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28321: LD_EXP 33
28325: PPUSH
28326: LD_STRING D3a-Sim-2
28328: PPUSH
28329: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28333: LD_EXP 39
28337: PPUSH
28338: LD_STRING D3a-Sci1-2
28340: PPUSH
28341: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28345: LD_EXP 33
28349: PPUSH
28350: LD_STRING D3a-Sim-3
28352: PPUSH
28353: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28357: LD_EXP 39
28361: PPUSH
28362: LD_STRING D3a-Sci1-3
28364: PPUSH
28365: CALL_OW 88
// if IsOK ( Joan ) then
28369: LD_EXP 35
28373: PPUSH
28374: CALL_OW 302
28378: IFFALSE 28394
// Say ( Simms , D3a-Sim-4 ) else
28380: LD_EXP 33
28384: PPUSH
28385: LD_STRING D3a-Sim-4
28387: PPUSH
28388: CALL_OW 88
28392: GO 28406
// Say ( Simms , D3a-Sim-4a ) ;
28394: LD_EXP 33
28398: PPUSH
28399: LD_STRING D3a-Sim-4a
28401: PPUSH
28402: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28406: LD_EXP 39
28410: PPUSH
28411: LD_STRING D3a-Sci1-4
28413: PPUSH
28414: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28418: LD_EXP 33
28422: PPUSH
28423: LD_STRING D3a-Sim-5
28425: PPUSH
28426: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28430: LD_EXP 39
28434: PPUSH
28435: LD_STRING D3a-Sci1-5
28437: PPUSH
28438: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28442: LD_EXP 33
28446: PPUSH
28447: LD_STRING D3a-Sim-6
28449: PPUSH
28450: CALL_OW 88
// DialogueOff ;
28454: CALL_OW 7
// end else
28458: GO 28729
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28460: LD_ADDR_VAR 0 5
28464: PUSH
28465: LD_INT 22
28467: PUSH
28468: LD_INT 1
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: PUSH
28475: LD_INT 26
28477: PUSH
28478: LD_INT 1
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: PUSH
28485: LD_INT 25
28487: PUSH
28488: LD_INT 4
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PUSH
28495: EMPTY
28496: LIST
28497: LIST
28498: LIST
28499: PPUSH
28500: CALL_OW 69
28504: PUSH
28505: LD_EXP 23
28509: PUSH
28510: LD_EXP 29
28514: PUSH
28515: LD_EXP 28
28519: PUSH
28520: LD_EXP 33
28524: PUSH
28525: LD_EXP 36
28529: PUSH
28530: EMPTY
28531: LIST
28532: LIST
28533: LIST
28534: LIST
28535: LIST
28536: DIFF
28537: ST_TO_ADDR
// if tmp3 then
28538: LD_VAR 0 5
28542: IFFALSE 28729
// begin DialogueOn ;
28544: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28548: LD_EXP 33
28552: PPUSH
28553: LD_STRING D3a-Sim-1
28555: PPUSH
28556: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28560: LD_VAR 0 5
28564: PUSH
28565: LD_INT 1
28567: ARRAY
28568: PPUSH
28569: LD_STRING D3a-Sci1-1
28571: PPUSH
28572: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28576: LD_EXP 33
28580: PPUSH
28581: LD_STRING D3a-Sim-2
28583: PPUSH
28584: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28588: LD_VAR 0 5
28592: PUSH
28593: LD_INT 1
28595: ARRAY
28596: PPUSH
28597: LD_STRING D3a-Sci1-2
28599: PPUSH
28600: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28604: LD_EXP 33
28608: PPUSH
28609: LD_STRING D3a-Sim-3
28611: PPUSH
28612: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28616: LD_VAR 0 5
28620: PUSH
28621: LD_INT 1
28623: ARRAY
28624: PPUSH
28625: LD_STRING D3a-Sci1-3
28627: PPUSH
28628: CALL_OW 88
// if IsOK ( Joan ) then
28632: LD_EXP 35
28636: PPUSH
28637: CALL_OW 302
28641: IFFALSE 28657
// Say ( Simms , D3a-Sim-4 ) else
28643: LD_EXP 33
28647: PPUSH
28648: LD_STRING D3a-Sim-4
28650: PPUSH
28651: CALL_OW 88
28655: GO 28669
// Say ( Simms , D3a-Sim-4a ) ;
28657: LD_EXP 33
28661: PPUSH
28662: LD_STRING D3a-Sim-4a
28664: PPUSH
28665: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28669: LD_VAR 0 5
28673: PUSH
28674: LD_INT 1
28676: ARRAY
28677: PPUSH
28678: LD_STRING D3a-Sci1-4
28680: PPUSH
28681: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28685: LD_EXP 33
28689: PPUSH
28690: LD_STRING D3a-Sim-5
28692: PPUSH
28693: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28697: LD_VAR 0 5
28701: PUSH
28702: LD_INT 1
28704: ARRAY
28705: PPUSH
28706: LD_STRING D3a-Sci1-5
28708: PPUSH
28709: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28713: LD_EXP 33
28717: PPUSH
28718: LD_STRING D3a-Sim-6
28720: PPUSH
28721: CALL_OW 88
// DialogueOff ;
28725: CALL_OW 7
// end ; end ; end ;
28729: PPOPN 5
28731: END
// export function DRussianNextAttack ; begin
28732: LD_INT 0
28734: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28735: LD_EXP 40
28739: PPUSH
28740: LD_STRING D4-FSol1-2
28742: PPUSH
28743: CALL_OW 94
// end ;
28747: LD_VAR 0 1
28751: RET
// export function DRussianConvoy ; begin
28752: LD_INT 0
28754: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28755: LD_EXP 40
28759: PPUSH
28760: LD_STRING D4-FSol1-1
28762: PPUSH
28763: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28767: LD_STRING M3
28769: PPUSH
28770: CALL_OW 337
// end ;
28774: LD_VAR 0 1
28778: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28779: LD_INT 0
28781: PPUSH
// CenterNowOnUnits ( unit ) ;
28782: LD_VAR 0 1
28786: PPUSH
28787: CALL_OW 87
// DialogueOn ;
28791: CALL_OW 6
// if IsOK ( Cyrus ) then
28795: LD_EXP 27
28799: PPUSH
28800: CALL_OW 302
28804: IFFALSE 28820
// Say ( Cyrus , D9a-Cyrus-1 ) else
28806: LD_EXP 27
28810: PPUSH
28811: LD_STRING D9a-Cyrus-1
28813: PPUSH
28814: CALL_OW 88
28818: GO 28942
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28820: LD_INT 22
28822: PUSH
28823: LD_INT 1
28825: PUSH
28826: EMPTY
28827: LIST
28828: LIST
28829: PUSH
28830: LD_INT 26
28832: PUSH
28833: LD_INT 1
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: PUSH
28840: LD_INT 2
28842: PUSH
28843: LD_INT 25
28845: PUSH
28846: LD_INT 1
28848: PUSH
28849: EMPTY
28850: LIST
28851: LIST
28852: PUSH
28853: LD_INT 25
28855: PUSH
28856: LD_INT 2
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 25
28865: PUSH
28866: LD_INT 3
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 25
28875: PUSH
28876: LD_INT 4
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: LD_INT 25
28885: PUSH
28886: LD_INT 5
28888: PUSH
28889: EMPTY
28890: LIST
28891: LIST
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: PUSH
28901: EMPTY
28902: LIST
28903: LIST
28904: LIST
28905: PPUSH
28906: CALL_OW 69
28910: PUSH
28911: LD_EXP 23
28915: PUSH
28916: LD_EXP 36
28920: PUSH
28921: LD_EXP 27
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: LIST
28930: DIFF
28931: PPUSH
28932: LD_STRING D9a-Sol1-1
28934: PPUSH
28935: LD_STRING D9a-Sol1-1
28937: PPUSH
28938: CALL 25295 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28942: LD_INT 22
28944: PUSH
28945: LD_INT 1
28947: PUSH
28948: EMPTY
28949: LIST
28950: LIST
28951: PUSH
28952: LD_INT 26
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 2
28964: PUSH
28965: LD_INT 25
28967: PUSH
28968: LD_INT 1
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: PUSH
28975: LD_INT 25
28977: PUSH
28978: LD_INT 2
28980: PUSH
28981: EMPTY
28982: LIST
28983: LIST
28984: PUSH
28985: LD_INT 25
28987: PUSH
28988: LD_INT 3
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PUSH
28995: LD_INT 25
28997: PUSH
28998: LD_INT 4
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 25
29007: PUSH
29008: LD_INT 5
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: LIST
29019: LIST
29020: LIST
29021: LIST
29022: PUSH
29023: EMPTY
29024: LIST
29025: LIST
29026: LIST
29027: PPUSH
29028: CALL_OW 69
29032: PUSH
29033: LD_EXP 23
29037: PUSH
29038: LD_EXP 36
29042: PUSH
29043: LD_EXP 27
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: DIFF
29053: PPUSH
29054: LD_STRING D9b-Sol1-1
29056: PPUSH
29057: LD_STRING D9b-Sol1-1
29059: PPUSH
29060: CALL 25295 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
29064: LD_STRING 09_arInfo
29066: PPUSH
29067: LD_INT 0
29069: PPUSH
29070: CALL_OW 30
29074: IFFALSE 29088
// Say ( JMM , D9a-JMM-1 ) ;
29076: LD_EXP 23
29080: PPUSH
29081: LD_STRING D9a-JMM-1
29083: PPUSH
29084: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
29088: LD_EXP 23
29092: PPUSH
29093: LD_STRING D9c-JMM-1
29095: PPUSH
29096: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
29100: LD_INT 22
29102: PUSH
29103: LD_INT 1
29105: PUSH
29106: EMPTY
29107: LIST
29108: LIST
29109: PUSH
29110: LD_INT 25
29112: PUSH
29113: LD_INT 5
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PUSH
29120: EMPTY
29121: LIST
29122: LIST
29123: PPUSH
29124: CALL_OW 69
29128: IFFALSE 29142
// Say ( JMM , D9c-JMM-1a ) ;
29130: LD_EXP 23
29134: PPUSH
29135: LD_STRING D9c-JMM-1a
29137: PPUSH
29138: CALL_OW 88
// DialogueOff ;
29142: CALL_OW 7
// end ;
29146: LD_VAR 0 2
29150: RET
// export function DArabTrait1 ; var tmp ; begin
29151: LD_INT 0
29153: PPUSH
29154: PPUSH
// if IsOk ( DeltaDoctor ) then
29155: LD_EXP 39
29159: PPUSH
29160: CALL_OW 302
29164: IFFALSE 29178
// tmp := DeltaDoctor else
29166: LD_ADDR_VAR 0 2
29170: PUSH
29171: LD_EXP 39
29175: ST_TO_ADDR
29176: GO 29376
// if IsOk ( Denis ) then
29178: LD_EXP 34
29182: PPUSH
29183: CALL_OW 302
29187: IFFALSE 29201
// tmp := Denis else
29189: LD_ADDR_VAR 0 2
29193: PUSH
29194: LD_EXP 34
29198: ST_TO_ADDR
29199: GO 29376
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
29201: LD_ADDR_VAR 0 2
29205: PUSH
29206: LD_INT 22
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 50
29218: PUSH
29219: EMPTY
29220: LIST
29221: PUSH
29222: LD_INT 25
29224: PUSH
29225: LD_INT 4
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 26
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: PPUSH
29248: CALL_OW 69
29252: PUSH
29253: LD_EXP 23
29257: PUSH
29258: LD_EXP 24
29262: PUSH
29263: LD_EXP 25
29267: PUSH
29268: LD_EXP 26
29272: PUSH
29273: LD_EXP 27
29277: PUSH
29278: LD_EXP 28
29282: PUSH
29283: LD_EXP 29
29287: PUSH
29288: LD_EXP 30
29292: PUSH
29293: LD_EXP 31
29297: PUSH
29298: LD_EXP 32
29302: PUSH
29303: LD_EXP 33
29307: PUSH
29308: LD_EXP 34
29312: PUSH
29313: LD_EXP 35
29317: PUSH
29318: LD_EXP 36
29322: PUSH
29323: LD_EXP 37
29327: PUSH
29328: LD_EXP 38
29332: PUSH
29333: LD_EXP 39
29337: PUSH
29338: LD_EXP 40
29342: PUSH
29343: LD_EXP 42
29347: PUSH
29348: LD_EXP 44
29352: PUSH
29353: EMPTY
29354: LIST
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: LIST
29360: LIST
29361: LIST
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: DIFF
29375: ST_TO_ADDR
// if not tmp then
29376: LD_VAR 0 2
29380: NOT
29381: IFFALSE 29385
// exit ;
29383: GO 29477
// DialogueOn ;
29385: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29389: LD_EXP 23
29393: PPUSH
29394: LD_STRING D6-JMM-1
29396: PPUSH
29397: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29401: LD_VAR 0 2
29405: PPUSH
29406: LD_STRING D6-Sci1-1
29408: PPUSH
29409: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29413: LD_EXP 23
29417: PPUSH
29418: LD_STRING D6-JMM-2
29420: PPUSH
29421: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29425: LD_VAR 0 2
29429: PPUSH
29430: LD_STRING D6-Sci1-2
29432: PPUSH
29433: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29437: LD_EXP 23
29441: PPUSH
29442: LD_STRING D6-JMM-3
29444: PPUSH
29445: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29449: LD_VAR 0 2
29453: PPUSH
29454: LD_STRING D6-Sci1-3
29456: PPUSH
29457: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29461: LD_EXP 23
29465: PPUSH
29466: LD_STRING D6-JMM-4
29468: PPUSH
29469: CALL_OW 88
// DialogueOff ;
29473: CALL_OW 7
// end ;
29477: LD_VAR 0 1
29481: RET
// export function DArabTrait2 ; begin
29482: LD_INT 0
29484: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29485: LD_EXP 36
29489: PPUSH
29490: CALL_OW 305
29494: NOT
29495: IFTRUE 29509
29497: PUSH
29498: LD_EXP 51
29502: PPUSH
29503: CALL_OW 302
29507: NOT
29508: OR
29509: IFTRUE 29523
29511: PUSH
29512: LD_EXP 50
29516: PPUSH
29517: CALL_OW 302
29521: NOT
29522: OR
29523: IFFALSE 29527
// exit ;
29525: GO 29583
// DialogueOn ;
29527: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29531: LD_EXP 51
29535: PPUSH
29536: LD_STRING D5-Ar1-1
29538: PPUSH
29539: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29543: LD_EXP 50
29547: PPUSH
29548: LD_STRING D5-Diet-1
29550: PPUSH
29551: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29555: LD_EXP 51
29559: PPUSH
29560: LD_STRING D5-Ar1-2
29562: PPUSH
29563: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29567: LD_EXP 50
29571: PPUSH
29572: LD_STRING D5-Diet-2
29574: PPUSH
29575: CALL_OW 88
// DialogueOff ;
29579: CALL_OW 7
// end ;
29583: LD_VAR 0 1
29587: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29588: LD_EXP 4
29592: IFFALSE 31305
29594: GO 29596
29596: DISABLE
29597: LD_INT 0
29599: PPUSH
29600: PPUSH
29601: PPUSH
29602: PPUSH
29603: PPUSH
29604: PPUSH
29605: PPUSH
29606: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29607: LD_INT 2
29609: PPUSH
29610: LD_INT 3
29612: PPUSH
29613: LD_INT 1
29615: PPUSH
29616: LD_INT 1
29618: PPUSH
29619: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29623: LD_INT 2
29625: PPUSH
29626: LD_INT 6
29628: PPUSH
29629: LD_INT 1
29631: PPUSH
29632: LD_INT 1
29634: PPUSH
29635: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29639: LD_ADDR_VAR 0 5
29643: PUSH
29644: LD_INT 22
29646: PUSH
29647: LD_INT 2
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: PUSH
29654: LD_INT 2
29656: PUSH
29657: LD_INT 25
29659: PUSH
29660: LD_INT 4
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: LD_INT 25
29669: PUSH
29670: LD_INT 2
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: PUSH
29677: LD_INT 25
29679: PUSH
29680: LD_INT 3
29682: PUSH
29683: EMPTY
29684: LIST
29685: LIST
29686: PUSH
29687: EMPTY
29688: LIST
29689: LIST
29690: LIST
29691: LIST
29692: PUSH
29693: EMPTY
29694: LIST
29695: LIST
29696: PPUSH
29697: CALL_OW 69
29701: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
29702: LD_ADDR_VAR 0 4
29706: PUSH
29707: LD_INT 22
29709: PUSH
29710: LD_INT 2
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: LD_INT 21
29719: PUSH
29720: LD_INT 1
29722: PUSH
29723: EMPTY
29724: LIST
29725: LIST
29726: PUSH
29727: LD_INT 2
29729: PUSH
29730: LD_INT 25
29732: PUSH
29733: LD_INT 1
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: PUSH
29740: LD_INT 25
29742: PUSH
29743: LD_INT 8
29745: PUSH
29746: EMPTY
29747: LIST
29748: LIST
29749: PUSH
29750: LD_INT 25
29752: PUSH
29753: LD_INT 15
29755: PUSH
29756: EMPTY
29757: LIST
29758: LIST
29759: PUSH
29760: EMPTY
29761: LIST
29762: LIST
29763: LIST
29764: LIST
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: PPUSH
29771: CALL_OW 69
29775: PUSH
29776: LD_EXP 50
29780: DIFF
29781: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29782: LD_ADDR_VAR 0 6
29786: PUSH
29787: LD_INT 22
29789: PUSH
29790: LD_INT 2
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 30
29799: PUSH
29800: LD_INT 5
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PPUSH
29811: CALL_OW 69
29815: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29816: LD_VAR 0 5
29820: PPUSH
29821: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29825: LD_VAR 0 4
29829: PPUSH
29830: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29834: LD_INT 101
29836: PPUSH
29837: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29841: LD_EXP 40
29845: PPUSH
29846: LD_STRING D4-FSol1-3
29848: PPUSH
29849: CALL_OW 94
// for i in arCivilian do
29853: LD_ADDR_VAR 0 1
29857: PUSH
29858: LD_VAR 0 5
29862: PUSH
29863: FOR_IN
29864: IFFALSE 29943
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29866: LD_VAR 0 1
29870: PPUSH
29871: LD_VAR 0 6
29875: PUSH
29876: LD_VAR 0 1
29880: PUSH
29881: LD_INT 2
29883: MOD
29884: PUSH
29885: LD_INT 1
29887: PLUS
29888: ARRAY
29889: PPUSH
29890: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29894: LD_VAR 0 1
29898: PPUSH
29899: LD_INT 1
29901: PUSH
29902: LD_INT 8
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 1
29911: PPUSH
29912: LD_INT 2
29914: PPUSH
29915: CALL_OW 12
29919: ARRAY
29920: PPUSH
29921: CALL_OW 183
// AddComExitBuilding ( i ) ;
29925: LD_VAR 0 1
29929: PPUSH
29930: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29934: LD_INT 18
29936: PPUSH
29937: CALL_OW 67
// end ;
29941: GO 29863
29943: POP
29944: POP
// wait ( 0 0$5 ) ;
29945: LD_INT 175
29947: PPUSH
29948: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29952: LD_INT 76
29954: PPUSH
29955: LD_INT 19
29957: PPUSH
29958: CALL_OW 84
// DialogueOn ;
29962: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29966: LD_INT 22
29968: PUSH
29969: LD_INT 1
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: PUSH
29976: LD_INT 26
29978: PUSH
29979: LD_INT 1
29981: PUSH
29982: EMPTY
29983: LIST
29984: LIST
29985: PUSH
29986: LD_INT 2
29988: PUSH
29989: LD_INT 25
29991: PUSH
29992: LD_INT 1
29994: PUSH
29995: EMPTY
29996: LIST
29997: LIST
29998: PUSH
29999: LD_INT 25
30001: PUSH
30002: LD_INT 2
30004: PUSH
30005: EMPTY
30006: LIST
30007: LIST
30008: PUSH
30009: LD_INT 25
30011: PUSH
30012: LD_INT 3
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 25
30021: PUSH
30022: LD_INT 4
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: LD_INT 25
30031: PUSH
30032: LD_INT 5
30034: PUSH
30035: EMPTY
30036: LIST
30037: LIST
30038: PUSH
30039: EMPTY
30040: LIST
30041: LIST
30042: LIST
30043: LIST
30044: LIST
30045: LIST
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: LIST
30051: PPUSH
30052: CALL_OW 69
30056: PPUSH
30057: LD_STRING D8-Sol1-1
30059: PPUSH
30060: LD_STRING D8-Sol1-1
30062: PPUSH
30063: CALL 25295 0 3
// if IsOk ( DeltaDoctor ) then
30067: LD_EXP 39
30071: PPUSH
30072: CALL_OW 302
30076: IFFALSE 30092
// Say ( DeltaDoctor , D8-Sci1-1 ) else
30078: LD_EXP 39
30082: PPUSH
30083: LD_STRING D8-Sci1-1
30085: PPUSH
30086: CALL_OW 88
30090: GO 30193
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
30092: LD_INT 22
30094: PUSH
30095: LD_INT 1
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 26
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: EMPTY
30109: LIST
30110: LIST
30111: PUSH
30112: LD_INT 2
30114: PUSH
30115: LD_INT 25
30117: PUSH
30118: LD_INT 1
30120: PUSH
30121: EMPTY
30122: LIST
30123: LIST
30124: PUSH
30125: LD_INT 25
30127: PUSH
30128: LD_INT 2
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: PUSH
30135: LD_INT 25
30137: PUSH
30138: LD_INT 3
30140: PUSH
30141: EMPTY
30142: LIST
30143: LIST
30144: PUSH
30145: LD_INT 25
30147: PUSH
30148: LD_INT 4
30150: PUSH
30151: EMPTY
30152: LIST
30153: LIST
30154: PUSH
30155: LD_INT 25
30157: PUSH
30158: LD_INT 5
30160: PUSH
30161: EMPTY
30162: LIST
30163: LIST
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: LIST
30170: LIST
30171: LIST
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: LIST
30177: PPUSH
30178: CALL_OW 69
30182: PPUSH
30183: LD_STRING D8-Sol1-1
30185: PPUSH
30186: LD_STRING D8-Sol1-1
30188: PPUSH
30189: CALL 25295 0 3
// Say ( JMM , D8-JMM-1 ) ;
30193: LD_EXP 23
30197: PPUSH
30198: LD_STRING D8-JMM-1
30200: PPUSH
30201: CALL_OW 88
// DialogueOff ;
30205: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
30209: LD_INT 2
30211: PPUSH
30212: LD_INT 2
30214: PPUSH
30215: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
30219: LD_INT 1
30221: PPUSH
30222: LD_INT 2
30224: PPUSH
30225: LD_INT 2
30227: PPUSH
30228: LD_INT 1
30230: PPUSH
30231: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
30235: LD_INT 3
30237: PPUSH
30238: LD_INT 2
30240: PPUSH
30241: LD_INT 1
30243: PPUSH
30244: LD_INT 1
30246: PPUSH
30247: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
30251: LD_INT 6
30253: PPUSH
30254: LD_INT 2
30256: PPUSH
30257: LD_INT 1
30259: PPUSH
30260: LD_INT 1
30262: PPUSH
30263: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30267: LD_STRING M4
30269: PPUSH
30270: CALL_OW 337
// wait ( 0 0$1 ) ;
30274: LD_INT 35
30276: PPUSH
30277: CALL_OW 67
// if IsLive ( Khatam ) then
30281: LD_EXP 36
30285: PPUSH
30286: CALL_OW 300
30290: IFFALSE 30304
// DoNotAttack ( 2 , Khatam ) ;
30292: LD_INT 2
30294: PPUSH
30295: LD_EXP 36
30299: PPUSH
30300: CALL_OW 471
// wait ( 0 0$1 ) ;
30304: LD_INT 35
30306: PPUSH
30307: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30311: LD_ADDR_VAR 0 7
30315: PUSH
30316: LD_INT 22
30318: PUSH
30319: LD_INT 1
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 21
30328: PUSH
30329: LD_INT 3
30331: PUSH
30332: EMPTY
30333: LIST
30334: LIST
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PPUSH
30340: CALL_OW 69
30344: PPUSH
30345: LD_VAR 0 4
30349: PUSH
30350: LD_INT 1
30352: ARRAY
30353: PPUSH
30354: CALL_OW 74
30358: ST_TO_ADDR
// for i := 1 to 3 do
30359: LD_ADDR_VAR 0 1
30363: PUSH
30364: DOUBLE
30365: LD_INT 1
30367: DEC
30368: ST_TO_ADDR
30369: LD_INT 3
30371: PUSH
30372: FOR_TO
30373: IFFALSE 30432
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ i ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30375: LD_VAR 0 4
30379: PPUSH
30380: LD_INT 25
30382: PUSH
30383: LD_INT 1
30385: PUSH
30386: EMPTY
30387: LIST
30388: LIST
30389: PPUSH
30390: CALL_OW 72
30394: PUSH
30395: LD_VAR 0 1
30399: ARRAY
30400: PPUSH
30401: LD_VAR 0 7
30405: PPUSH
30406: CALL_OW 250
30410: PPUSH
30411: LD_VAR 0 7
30415: PPUSH
30416: CALL_OW 251
30420: PPUSH
30421: LD_VAR 0 7
30425: PPUSH
30426: CALL_OW 192
30430: GO 30372
30432: POP
30433: POP
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
30434: LD_VAR 0 4
30438: PPUSH
30439: LD_INT 84
30441: PPUSH
30442: LD_INT 22
30444: PPUSH
30445: CALL_OW 174
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30449: LD_VAR 0 4
30453: PPUSH
30454: LD_INT 95
30456: PPUSH
30457: LD_INT 12
30459: PPUSH
30460: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30464: LD_VAR 0 4
30468: PPUSH
30469: LD_INT 102
30471: PPUSH
30472: LD_INT 11
30474: PPUSH
30475: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30479: LD_VAR 0 4
30483: PPUSH
30484: LD_INT 116
30486: PPUSH
30487: LD_INT 15
30489: PPUSH
30490: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30494: LD_VAR 0 4
30498: PPUSH
30499: LD_INT 140
30501: PPUSH
30502: LD_INT 25
30504: PPUSH
30505: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
30509: LD_ADDR_VAR 0 4
30513: PUSH
30514: LD_INT 22
30516: PUSH
30517: LD_INT 2
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 21
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 2
30536: PUSH
30537: LD_INT 25
30539: PUSH
30540: LD_INT 1
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PUSH
30547: LD_INT 25
30549: PUSH
30550: LD_INT 8
30552: PUSH
30553: EMPTY
30554: LIST
30555: LIST
30556: PUSH
30557: LD_INT 25
30559: PUSH
30560: LD_INT 15
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: EMPTY
30568: LIST
30569: LIST
30570: LIST
30571: LIST
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: PPUSH
30578: CALL_OW 69
30582: PUSH
30583: LD_EXP 50
30587: DIFF
30588: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30589: LD_ADDR_VAR 0 5
30593: PUSH
30594: LD_INT 22
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: EMPTY
30601: LIST
30602: LIST
30603: PUSH
30604: LD_INT 21
30606: PUSH
30607: LD_INT 1
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 2
30616: PUSH
30617: LD_INT 25
30619: PUSH
30620: LD_INT 2
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: PUSH
30627: LD_INT 25
30629: PUSH
30630: LD_INT 3
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 25
30639: PUSH
30640: LD_INT 4
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 25
30649: PUSH
30650: LD_INT 12
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: LD_INT 25
30659: PUSH
30660: LD_INT 16
30662: PUSH
30663: EMPTY
30664: LIST
30665: LIST
30666: PUSH
30667: EMPTY
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: LIST
30679: PPUSH
30680: CALL_OW 69
30684: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30685: LD_ADDR_VAR 0 5
30689: PUSH
30690: LD_VAR 0 5
30694: PUSH
30695: LD_EXP 50
30699: ADD
30700: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 81 , 12 ) ;
30701: LD_VAR 0 5
30705: PPUSH
30706: LD_INT 81
30708: PPUSH
30709: LD_INT 12
30711: PPUSH
30712: CALL_OW 171
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30716: LD_VAR 0 5
30720: PPUSH
30721: LD_INT 88
30723: PPUSH
30724: LD_INT 8
30726: PPUSH
30727: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30731: LD_VAR 0 5
30735: PPUSH
30736: LD_INT 102
30738: PPUSH
30739: LD_INT 10
30741: PPUSH
30742: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30746: LD_VAR 0 5
30750: PPUSH
30751: LD_INT 116
30753: PPUSH
30754: LD_INT 15
30756: PPUSH
30757: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30761: LD_VAR 0 5
30765: PPUSH
30766: LD_INT 140
30768: PPUSH
30769: LD_INT 25
30771: PPUSH
30772: CALL_OW 171
// wait ( 3 ) ;
30776: LD_INT 3
30778: PPUSH
30779: CALL_OW 67
// arEscapist := arCivilian union arSoldiers ;
30783: LD_ADDR_EXP 56
30787: PUSH
30788: LD_VAR 0 5
30792: PUSH
30793: LD_VAR 0 4
30797: UNION
30798: ST_TO_ADDR
// if IsOk ( Gary ) then
30799: LD_EXP 32
30803: PPUSH
30804: CALL_OW 302
30808: IFFALSE 30822
// Say ( Gary , D8a-Gary-1 ) ;
30810: LD_EXP 32
30814: PPUSH
30815: LD_STRING D8a-Gary-1
30817: PPUSH
30818: CALL_OW 88
// wait ( 0 0$5 ) ;
30822: LD_INT 175
30824: PPUSH
30825: CALL_OW 67
// if IsOK ( Khatam ) then
30829: LD_EXP 36
30833: PPUSH
30834: CALL_OW 302
30838: IFFALSE 31305
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30840: LD_ADDR_VAR 0 2
30844: PUSH
30845: LD_INT 22
30847: PUSH
30848: LD_INT 1
30850: PUSH
30851: EMPTY
30852: LIST
30853: LIST
30854: PUSH
30855: LD_INT 2
30857: PUSH
30858: LD_INT 25
30860: PUSH
30861: LD_INT 1
30863: PUSH
30864: EMPTY
30865: LIST
30866: LIST
30867: PUSH
30868: LD_INT 25
30870: PUSH
30871: LD_INT 2
30873: PUSH
30874: EMPTY
30875: LIST
30876: LIST
30877: PUSH
30878: LD_INT 25
30880: PUSH
30881: LD_INT 3
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 25
30890: PUSH
30891: LD_INT 4
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 25
30900: PUSH
30901: LD_INT 5
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 25
30910: PUSH
30911: LD_INT 8
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: EMPTY
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: PPUSH
30931: CALL_OW 69
30935: PUSH
30936: LD_EXP 23
30940: PUSH
30941: LD_EXP 24
30945: PUSH
30946: LD_EXP 25
30950: PUSH
30951: LD_EXP 26
30955: PUSH
30956: LD_EXP 27
30960: PUSH
30961: LD_EXP 28
30965: PUSH
30966: LD_EXP 29
30970: PUSH
30971: LD_EXP 30
30975: PUSH
30976: LD_EXP 31
30980: PUSH
30981: LD_EXP 32
30985: PUSH
30986: LD_EXP 33
30990: PUSH
30991: LD_EXP 34
30995: PUSH
30996: LD_EXP 35
31000: PUSH
31001: LD_EXP 36
31005: PUSH
31006: LD_EXP 37
31010: PUSH
31011: LD_EXP 38
31015: PUSH
31016: LD_EXP 39
31020: PUSH
31021: LD_EXP 42
31025: PUSH
31026: LD_EXP 44
31030: PUSH
31031: EMPTY
31032: LIST
31033: LIST
31034: LIST
31035: LIST
31036: LIST
31037: LIST
31038: LIST
31039: LIST
31040: LIST
31041: LIST
31042: LIST
31043: LIST
31044: LIST
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: DIFF
31052: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
31053: LD_EXP 36
31057: PPUSH
31058: LD_INT 8
31060: PPUSH
31061: CALL_OW 235
// ComExit ( Khatam ) ;
31065: LD_EXP 36
31069: PPUSH
31070: CALL 95358 0 1
// wait ( 0 0$1 ) ;
31074: LD_INT 35
31076: PPUSH
31077: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
31081: LD_EXP 36
31085: PPUSH
31086: LD_INT 11
31088: PPUSH
31089: CALL_OW 113
// escapeKhatam := true ;
31093: LD_ADDR_EXP 11
31097: PUSH
31098: LD_INT 1
31100: ST_TO_ADDR
// if not tmp then
31101: LD_VAR 0 2
31105: NOT
31106: IFFALSE 31110
// exit ;
31108: GO 31305
// wait ( 0 0$2 ) ;
31110: LD_INT 70
31112: PPUSH
31113: CALL_OW 67
// DialogueOn ;
31117: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
31121: LD_ADDR_VAR 0 8
31125: PUSH
31126: LD_VAR 0 2
31130: PPUSH
31131: LD_STRING D8b-Sol1-1
31133: PPUSH
31134: LD_STRING D8b-FSol1-1
31136: PPUSH
31137: CALL 25295 0 3
31141: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
31142: LD_EXP 36
31146: PPUSH
31147: LD_STRING D8b-Khat-1
31149: PPUSH
31150: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31154: LD_VAR 0 8
31158: PPUSH
31159: CALL_OW 258
31163: PUSH
31164: LD_INT 1
31166: EQUAL
31167: IFFALSE 31183
// Say ( speaker , D8b-Sol1-2 ) else
31169: LD_VAR 0 8
31173: PPUSH
31174: LD_STRING D8b-Sol1-2
31176: PPUSH
31177: CALL_OW 88
31181: GO 31195
// Say ( speaker , D8b-FSol1-2 ) ;
31183: LD_VAR 0 8
31187: PPUSH
31188: LD_STRING D8b-FSol1-2
31190: PPUSH
31191: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
31195: LD_EXP 36
31199: PPUSH
31200: LD_STRING D8b-Khat-2
31202: PPUSH
31203: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31207: LD_VAR 0 8
31211: PPUSH
31212: CALL_OW 258
31216: PUSH
31217: LD_INT 1
31219: EQUAL
31220: IFFALSE 31236
// Say ( speaker , D8b-Sol1-3 ) else
31222: LD_VAR 0 8
31226: PPUSH
31227: LD_STRING D8b-Sol1-3
31229: PPUSH
31230: CALL_OW 88
31234: GO 31248
// Say ( speaker , D8b-FSol1-3 ) ;
31236: LD_VAR 0 8
31240: PPUSH
31241: LD_STRING D8b-FSol1-3
31243: PPUSH
31244: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
31248: LD_EXP 36
31252: PPUSH
31253: LD_STRING D8b-Khat-3
31255: PPUSH
31256: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31260: LD_VAR 0 8
31264: PPUSH
31265: CALL_OW 258
31269: PUSH
31270: LD_INT 1
31272: EQUAL
31273: IFFALSE 31289
// Say ( speaker , D8b-Sol1-4 ) else
31275: LD_VAR 0 8
31279: PPUSH
31280: LD_STRING D8b-Sol1-4
31282: PPUSH
31283: CALL_OW 88
31287: GO 31301
// Say ( speaker , D8b-FSol1-4 ) ;
31289: LD_VAR 0 8
31293: PPUSH
31294: LD_STRING D8b-FSol1-4
31296: PPUSH
31297: CALL_OW 88
// DialogueOff ;
31301: CALL_OW 7
// end ; end ;
31305: PPOPN 8
31307: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31308: LD_EXP 11
31312: IFFALSE 31325
31314: PUSH
31315: LD_EXP 36
31319: PPUSH
31320: CALL_OW 302
31324: AND
31325: IFFALSE 31402
31327: GO 31329
31329: DISABLE
// begin enable ;
31330: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31331: LD_EXP 36
31335: PPUSH
31336: CALL_OW 302
31340: IFFALSE 31354
31342: PUSH
31343: LD_EXP 36
31347: PPUSH
31348: CALL_OW 314
31352: NOT
31353: AND
31354: IFFALSE 31368
// ComMoveToArea ( Khatam , khatamArea ) ;
31356: LD_EXP 36
31360: PPUSH
31361: LD_INT 11
31363: PPUSH
31364: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31368: LD_EXP 36
31372: PPUSH
31373: LD_INT 11
31375: PPUSH
31376: CALL_OW 308
31380: IFFALSE 31402
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31382: LD_INT 1
31384: PPUSH
31385: LD_STRING 10_KhatamStatus_1
31387: PPUSH
31388: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31392: LD_EXP 36
31396: PPUSH
31397: CALL_OW 64
// disable ;
31401: DISABLE
// end ; end ;
31402: END
// every 0 0$30 trigger joinedToEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31403: LD_EXP 7
31407: IFFALSE 31421
31409: PUSH
31410: LD_STRING 02_mikhailStatus_1
31412: PPUSH
31413: LD_INT 0
31415: PPUSH
31416: CALL_OW 30
31420: AND
31421: IFFALSE 31453
31423: PUSH
31424: LD_INT 22
31426: PUSH
31427: LD_INT 5
31429: PUSH
31430: EMPTY
31431: LIST
31432: LIST
31433: PUSH
31434: LD_INT 50
31436: PUSH
31437: EMPTY
31438: LIST
31439: PUSH
31440: EMPTY
31441: LIST
31442: LIST
31443: PPUSH
31444: CALL_OW 69
31448: PUSH
31449: LD_INT 0
31451: EQUAL
31452: AND
31453: IFFALSE 31505
31455: PUSH
31456: LD_INT 22
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: EMPTY
31463: LIST
31464: LIST
31465: PUSH
31466: LD_INT 50
31468: PUSH
31469: EMPTY
31470: LIST
31471: PUSH
31472: LD_INT 21
31474: PUSH
31475: LD_INT 1
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: PPUSH
31487: CALL_OW 69
31491: PUSH
31492: LD_INT 0
31494: EQUAL
31495: IFTRUE 31504
31497: PUSH
31498: LD_EXP 4
31502: NOT
31503: OR
31504: AND
31505: IFFALSE 31527
31507: GO 31509
31509: DISABLE
// begin wait ( 2 2$00 * Difficulty ) ;
31510: LD_INT 4200
31512: PUSH
31513: LD_OWVAR 67
31517: MUL
31518: PPUSH
31519: CALL_OW 67
// PrepareCornell ;
31523: CALL 3222 0 0
// end ;
31527: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31528: LD_INT 22
31530: PUSH
31531: LD_INT 1
31533: PUSH
31534: EMPTY
31535: LIST
31536: LIST
31537: PPUSH
31538: CALL_OW 69
31542: PPUSH
31543: LD_EXP 42
31547: PPUSH
31548: CALL_OW 74
31552: PPUSH
31553: LD_EXP 42
31557: PPUSH
31558: CALL_OW 296
31562: PUSH
31563: LD_INT 9
31565: LESS
31566: IFFALSE 31579
31568: PUSH
31569: LD_EXP 42
31573: PPUSH
31574: CALL_OW 302
31578: AND
31579: IFFALSE 32023
31581: GO 31583
31583: DISABLE
// begin InGameOn ;
31584: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31588: LD_EXP 42
31592: PPUSH
31593: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31597: LD_EXP 42
31601: PPUSH
31602: LD_STRING D7-Corn-1
31604: PPUSH
31605: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31609: LD_INT 22
31611: PUSH
31612: LD_INT 1
31614: PUSH
31615: EMPTY
31616: LIST
31617: LIST
31618: PUSH
31619: LD_INT 2
31621: PUSH
31622: LD_INT 25
31624: PUSH
31625: LD_INT 1
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: PUSH
31632: LD_INT 25
31634: PUSH
31635: LD_INT 2
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: PUSH
31642: LD_INT 25
31644: PUSH
31645: LD_INT 3
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: PUSH
31652: LD_INT 25
31654: PUSH
31655: LD_INT 4
31657: PUSH
31658: EMPTY
31659: LIST
31660: LIST
31661: PUSH
31662: LD_INT 25
31664: PUSH
31665: LD_INT 5
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: EMPTY
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: PUSH
31680: EMPTY
31681: LIST
31682: LIST
31683: PPUSH
31684: CALL_OW 69
31688: PPUSH
31689: LD_STRING D7-Sol1-1
31691: PPUSH
31692: LD_STRING D7-FSol1-1
31694: PPUSH
31695: CALL 25295 0 3
// CenterNowOnUnits ( Cornell ) ;
31699: LD_EXP 42
31703: PPUSH
31704: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31708: LD_EXP 42
31712: PPUSH
31713: LD_STRING D7-Corn-2
31715: PPUSH
31716: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31720: LD_EXP 23
31724: PPUSH
31725: LD_STRING D7-JMM-2
31727: PPUSH
31728: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31732: LD_EXP 42
31736: PPUSH
31737: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31741: LD_EXP 42
31745: PPUSH
31746: LD_STRING D7-Corn-3
31748: PPUSH
31749: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31753: LD_EXP 42
31757: PPUSH
31758: LD_INT 250
31760: PPUSH
31761: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31765: LD_EXP 42
31769: PPUSH
31770: LD_INT 1
31772: PPUSH
31773: CALL_OW 235
// wait ( 0 0$1 ) ;
31777: LD_INT 35
31779: PPUSH
31780: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31784: LD_EXP 23
31788: PPUSH
31789: LD_STRING D7-JMM-3
31791: PPUSH
31792: CALL_OW 88
// InGameOff ;
31796: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31800: LD_INT 35
31802: PPUSH
31803: CALL_OW 67
// if IsDead ( Cornell ) then
31807: LD_EXP 42
31811: PPUSH
31812: CALL_OW 301
31816: IFFALSE 31820
// exit ;
31818: GO 32023
// until GetLives ( Cornell ) > 350 ;
31820: LD_EXP 42
31824: PPUSH
31825: CALL_OW 256
31829: PUSH
31830: LD_INT 350
31832: GREATER
31833: IFFALSE 31800
// DialogueOn ;
31835: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31839: LD_EXP 23
31843: PPUSH
31844: LD_STRING D7a-JMM-1
31846: PPUSH
31847: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31851: LD_EXP 42
31855: PPUSH
31856: LD_STRING D7a-Corn-1
31858: PPUSH
31859: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31863: LD_EXP 23
31867: PPUSH
31868: LD_STRING D7a-JMM-2
31870: PPUSH
31871: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31875: LD_EXP 42
31879: PPUSH
31880: LD_STRING D7a-Corn-2
31882: PPUSH
31883: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31887: LD_EXP 23
31891: PPUSH
31892: LD_STRING D7a-JMM-3
31894: PPUSH
31895: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31899: LD_EXP 42
31903: PPUSH
31904: LD_STRING D7a-Corn-3
31906: PPUSH
31907: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31911: LD_EXP 23
31915: PPUSH
31916: LD_STRING D7a-JMM-4
31918: PPUSH
31919: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31923: LD_EXP 42
31927: PPUSH
31928: LD_STRING D7a-Corn-4
31930: PPUSH
31931: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31935: LD_EXP 23
31939: PPUSH
31940: LD_STRING D7a-JMM-5
31942: PPUSH
31943: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31947: LD_EXP 42
31951: PPUSH
31952: LD_STRING D7a-Corn-5
31954: PPUSH
31955: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31959: LD_EXP 23
31963: PPUSH
31964: LD_STRING D7a-JMM-6
31966: PPUSH
31967: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31971: LD_EXP 42
31975: PPUSH
31976: LD_STRING D7a-Corn-6
31978: PPUSH
31979: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31983: LD_EXP 23
31987: PPUSH
31988: LD_STRING D7a-JMM-7
31990: PPUSH
31991: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31995: LD_EXP 42
31999: PPUSH
32000: LD_STRING D7a-Corn-7
32002: PPUSH
32003: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
32007: LD_EXP 23
32011: PPUSH
32012: LD_STRING D7a-JMM-8
32014: PPUSH
32015: CALL_OW 88
// DialogueOff ;
32019: CALL_OW 7
// end ;
32023: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
32024: LD_INT 54
32026: PPUSH
32027: LD_INT 1
32029: PPUSH
32030: CALL_OW 321
32034: PUSH
32035: LD_INT 2
32037: EQUAL
32038: IFFALSE 32056
32040: PUSH
32041: LD_INT 55
32043: PPUSH
32044: LD_INT 1
32046: PPUSH
32047: CALL_OW 321
32051: PUSH
32052: LD_INT 2
32054: EQUAL
32055: AND
32056: IFFALSE 32074
32058: PUSH
32059: LD_INT 21
32061: PPUSH
32062: LD_INT 1
32064: PPUSH
32065: CALL_OW 321
32069: PUSH
32070: LD_INT 2
32072: EQUAL
32073: AND
32074: IFFALSE 32092
32076: PUSH
32077: LD_INT 22
32079: PPUSH
32080: LD_INT 1
32082: PPUSH
32083: CALL_OW 321
32087: PUSH
32088: LD_INT 2
32090: EQUAL
32091: AND
32092: IFFALSE 32131
32094: PUSH
32095: LD_INT 12
32097: PPUSH
32098: LD_INT 1
32100: PPUSH
32101: CALL_OW 321
32105: PUSH
32106: LD_INT 1
32108: EQUAL
32109: IFTRUE 32127
32111: PUSH
32112: LD_INT 32
32114: PPUSH
32115: LD_INT 1
32117: PPUSH
32118: CALL_OW 321
32122: PUSH
32123: LD_INT 1
32125: EQUAL
32126: OR
32127: PUSH
32128: EMPTY
32129: LIST
32130: AND
32131: IFFALSE 32139
32133: PUSH
32134: LD_EXP 8
32138: AND
32139: IFFALSE 32175
32141: PUSH
32142: LD_INT 22
32144: PUSH
32145: LD_INT 3
32147: PUSH
32148: EMPTY
32149: LIST
32150: LIST
32151: PUSH
32152: LD_INT 21
32154: PUSH
32155: LD_INT 1
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: PUSH
32162: EMPTY
32163: LIST
32164: LIST
32165: PPUSH
32166: CALL_OW 69
32170: PUSH
32171: LD_INT 0
32173: EQUAL
32174: AND
32175: IFFALSE 32223
32177: GO 32179
32179: DISABLE
// begin case Query ( QEndMission ) of 1 :
32180: LD_STRING QEndMission
32182: PPUSH
32183: CALL_OW 97
32187: PUSH
32188: LD_INT 1
32190: DOUBLE
32191: EQUAL
32192: IFTRUE 32196
32194: GO 32207
32196: POP
// end_the_mission_allowed = true ; 2 :
32197: LD_ADDR_OWVAR 57
32201: PUSH
32202: LD_INT 1
32204: ST_TO_ADDR
32205: GO 32223
32207: LD_INT 2
32209: DOUBLE
32210: EQUAL
32211: IFTRUE 32215
32213: GO 32222
32215: POP
// FinishMission ; end ;
32216: CALL 32271 0 0
32220: GO 32223
32222: POP
// end ;
32223: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
32224: LD_INT 0
32226: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
32227: LD_VAR 0 1
32231: PPUSH
32232: CALL_OW 300
32236: IFTRUE 32250
32238: PUSH
32239: LD_VAR 0 1
32243: PUSH
32244: LD_EXP 45
32248: IN
32249: OR
32250: IFFALSE 32266
// SaveCharacters ( unit , id ) ;
32252: LD_VAR 0 1
32256: PPUSH
32257: LD_VAR 0 2
32261: PPUSH
32262: CALL_OW 38
// end ;
32266: LD_VAR 0 3
32270: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
32271: LD_INT 0
32273: PPUSH
32274: PPUSH
32275: PPUSH
32276: PPUSH
32277: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
32278: LD_INT 22
32280: PUSH
32281: LD_INT 1
32283: PUSH
32284: EMPTY
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 21
32290: PUSH
32291: LD_INT 1
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 23
32300: PUSH
32301: LD_INT 1
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: LD_INT 50
32310: PUSH
32311: EMPTY
32312: LIST
32313: PUSH
32314: EMPTY
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: PPUSH
32320: CALL_OW 69
32324: PPUSH
32325: CALL 58984 0 1
32329: PUSH
32330: LD_INT 5
32332: LESS
32333: IFFALSE 32344
// begin YouLost ( Troops ) ;
32335: LD_STRING Troops
32337: PPUSH
32338: CALL_OW 104
// exit ;
32342: GO 33370
// end ; if not hasSniper then
32344: LD_EXP 20
32348: NOT
32349: IFFALSE 32358
// SetAchievement ( ACH_SNIPER ) ;
32351: LD_STRING ACH_SNIPER
32353: PPUSH
32354: CALL_OW 543
// m1 := false ;
32358: LD_ADDR_VAR 0 2
32362: PUSH
32363: LD_INT 0
32365: ST_TO_ADDR
// m2 := false ;
32366: LD_ADDR_VAR 0 3
32370: PUSH
32371: LD_INT 0
32373: ST_TO_ADDR
// m3 := false ;
32374: LD_ADDR_VAR 0 4
32378: PUSH
32379: LD_INT 0
32381: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32382: LD_INT 12
32384: PPUSH
32385: LD_INT 1
32387: PPUSH
32388: CALL_OW 321
32392: PUSH
32393: LD_INT 2
32395: EQUAL
32396: IFFALSE 32418
// begin AddMedal ( sights , 1 ) ;
32398: LD_STRING sights
32400: PPUSH
32401: LD_INT 1
32403: PPUSH
32404: CALL_OW 101
// m1 := true ;
32408: LD_ADDR_VAR 0 2
32412: PUSH
32413: LD_INT 1
32415: ST_TO_ADDR
// end else
32416: GO 32429
// AddMedal ( sights , - 1 ) ;
32418: LD_STRING sights
32420: PPUSH
32421: LD_INT 1
32423: NEG
32424: PPUSH
32425: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32429: LD_INT 32
32431: PPUSH
32432: LD_INT 1
32434: PPUSH
32435: CALL_OW 321
32439: PUSH
32440: LD_INT 2
32442: EQUAL
32443: IFFALSE 32465
// begin AddMedal ( computers , 1 ) ;
32445: LD_STRING computers
32447: PPUSH
32448: LD_INT 1
32450: PPUSH
32451: CALL_OW 101
// m2 := true ;
32455: LD_ADDR_VAR 0 3
32459: PUSH
32460: LD_INT 1
32462: ST_TO_ADDR
// end else
32463: GO 32476
// AddMedal ( computers , - 1 ) ;
32465: LD_STRING computers
32467: PPUSH
32468: LD_INT 1
32470: NEG
32471: PPUSH
32472: CALL_OW 101
// if arabianEscapedCounter = 0 then
32476: LD_EXP 21
32480: PUSH
32481: LD_INT 0
32483: EQUAL
32484: IFFALSE 32516
// begin AddMedal ( renegades , 2 ) ;
32486: LD_STRING renegades
32488: PPUSH
32489: LD_INT 2
32491: PPUSH
32492: CALL_OW 101
// m3 := true ;
32496: LD_ADDR_VAR 0 4
32500: PUSH
32501: LD_INT 1
32503: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32504: LD_INT 0
32506: PPUSH
32507: LD_STRING 10_ScientistsEscape_1
32509: PPUSH
32510: CALL_OW 39
// end else
32514: GO 32527
// AddMedal ( renegades , - 1 ) ;
32516: LD_STRING renegades
32518: PPUSH
32519: LD_INT 1
32521: NEG
32522: PPUSH
32523: CALL_OW 101
// SaveEpsilonBase ;
32527: CALL 33375 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32531: LD_VAR 0 2
32535: IFFALSE 32543
32537: PUSH
32538: LD_VAR 0 3
32542: AND
32543: IFFALSE 32551
32545: PUSH
32546: LD_VAR 0 4
32550: AND
32551: IFFALSE 32563
32553: PUSH
32554: LD_OWVAR 67
32558: PUSH
32559: LD_INT 3
32561: GREATEREQUAL
32562: AND
32563: IFFALSE 32575
// SetAchievementEX ( ACH_AMER , 10 ) ;
32565: LD_STRING ACH_AMER
32567: PPUSH
32568: LD_INT 10
32570: PPUSH
32571: CALL_OW 564
// if tick <= 40 40$00 then
32575: LD_OWVAR 1
32579: PUSH
32580: LD_INT 84000
32582: LESSEQUAL
32583: IFFALSE 32599
// begin wait ( 3 ) ;
32585: LD_INT 3
32587: PPUSH
32588: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32592: LD_STRING ACH_ASPEED_10
32594: PPUSH
32595: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32599: LD_STRING Main
32601: PPUSH
32602: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32606: LD_INT 22
32608: PUSH
32609: LD_INT 1
32611: PUSH
32612: EMPTY
32613: LIST
32614: LIST
32615: PUSH
32616: LD_INT 23
32618: PUSH
32619: LD_INT 1
32621: PUSH
32622: EMPTY
32623: LIST
32624: LIST
32625: PUSH
32626: LD_INT 21
32628: PUSH
32629: LD_INT 1
32631: PUSH
32632: EMPTY
32633: LIST
32634: LIST
32635: PUSH
32636: LD_INT 2
32638: PUSH
32639: LD_INT 25
32641: PUSH
32642: LD_INT 1
32644: PUSH
32645: EMPTY
32646: LIST
32647: LIST
32648: PUSH
32649: LD_INT 25
32651: PUSH
32652: LD_INT 2
32654: PUSH
32655: EMPTY
32656: LIST
32657: LIST
32658: PUSH
32659: LD_INT 25
32661: PUSH
32662: LD_INT 3
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: LD_INT 25
32671: PUSH
32672: LD_INT 4
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: PUSH
32679: LD_INT 25
32681: PUSH
32682: LD_INT 5
32684: PUSH
32685: EMPTY
32686: LIST
32687: LIST
32688: PUSH
32689: LD_INT 25
32691: PUSH
32692: LD_INT 8
32694: PUSH
32695: EMPTY
32696: LIST
32697: LIST
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: PPUSH
32714: CALL_OW 69
32718: PPUSH
32719: CALL_OW 43
// prefix := 10c_ ;
32723: LD_ADDR_VAR 0 5
32727: PUSH
32728: LD_STRING 10c_
32730: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32731: LD_EXP 23
32735: PPUSH
32736: LD_VAR 0 5
32740: PUSH
32741: LD_STRING JMM
32743: STR
32744: PPUSH
32745: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32749: LD_EXP 24
32753: PPUSH
32754: LD_VAR 0 5
32758: PUSH
32759: LD_STRING Brown
32761: STR
32762: PPUSH
32763: CALL 32224 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32767: LD_EXP 25
32771: PPUSH
32772: LD_VAR 0 5
32776: PUSH
32777: LD_STRING Donaldson
32779: STR
32780: PPUSH
32781: CALL 32224 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32785: LD_EXP 26
32789: PPUSH
32790: LD_VAR 0 5
32794: PUSH
32795: LD_STRING Bobby
32797: STR
32798: PPUSH
32799: CALL 32224 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32803: LD_EXP 27
32807: PPUSH
32808: LD_VAR 0 5
32812: PUSH
32813: LD_STRING Cyrus
32815: STR
32816: PPUSH
32817: CALL 32224 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32821: LD_EXP 28
32825: PPUSH
32826: LD_VAR 0 5
32830: PUSH
32831: LD_STRING Lisa
32833: STR
32834: PPUSH
32835: CALL 32224 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32839: LD_EXP 29
32843: PPUSH
32844: LD_VAR 0 5
32848: PUSH
32849: LD_STRING Frank
32851: STR
32852: PPUSH
32853: CALL 32224 0 2
// if Kikuchi then
32857: LD_EXP 30
32861: IFFALSE 32888
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32863: LD_STRING enableBioCharacter(BIO_YAMO)
32865: PPUSH
32866: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32870: LD_EXP 30
32874: PPUSH
32875: LD_VAR 0 5
32879: PUSH
32880: LD_STRING Kikuchi
32882: STR
32883: PPUSH
32884: CALL 32224 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32888: LD_EXP 31
32892: PPUSH
32893: LD_VAR 0 5
32897: PUSH
32898: LD_STRING Houten
32900: STR
32901: PPUSH
32902: CALL 32224 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32906: LD_EXP 32
32910: PPUSH
32911: LD_VAR 0 5
32915: PUSH
32916: LD_STRING Gary
32918: STR
32919: PPUSH
32920: CALL 32224 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32924: LD_EXP 42
32928: PPUSH
32929: LD_VAR 0 5
32933: PUSH
32934: LD_STRING Cornell
32936: STR
32937: PPUSH
32938: CALL 32224 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32942: LD_EXP 33
32946: PPUSH
32947: LD_VAR 0 5
32951: PUSH
32952: LD_STRING Simms
32954: STR
32955: PPUSH
32956: CALL 32224 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32960: LD_EXP 34
32964: PPUSH
32965: LD_VAR 0 5
32969: PUSH
32970: LD_STRING Denis
32972: STR
32973: PPUSH
32974: CALL 32224 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32978: LD_EXP 35
32982: PPUSH
32983: LD_VAR 0 5
32987: PUSH
32988: LD_STRING Joan
32990: STR
32991: PPUSH
32992: CALL 32224 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32996: LD_EXP 37
33000: PPUSH
33001: LD_VAR 0 5
33005: PUSH
33006: LD_STRING Gladstone
33008: STR
33009: PPUSH
33010: CALL 32224 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
33014: LD_EXP 39
33018: PPUSH
33019: LD_VAR 0 5
33023: PUSH
33024: LD_STRING DeltaDoctor
33026: STR
33027: PPUSH
33028: CALL 32224 0 2
// if IsLive ( Mike ) then
33032: LD_EXP 41
33036: PPUSH
33037: CALL_OW 300
33041: IFFALSE 33061
// SaveCharacters ( Mike , prefix & Mike ) ;
33043: LD_EXP 41
33047: PPUSH
33048: LD_VAR 0 5
33052: PUSH
33053: LD_STRING Mike
33055: STR
33056: PPUSH
33057: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
33061: LD_EXP 46
33065: PPUSH
33066: LD_STRING 10c_lock
33068: PPUSH
33069: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
33073: LD_INT 50
33075: PUSH
33076: EMPTY
33077: LIST
33078: PUSH
33079: LD_INT 22
33081: PUSH
33082: LD_INT 1
33084: PUSH
33085: EMPTY
33086: LIST
33087: LIST
33088: PUSH
33089: LD_INT 21
33091: PUSH
33092: LD_INT 1
33094: PUSH
33095: EMPTY
33096: LIST
33097: LIST
33098: PUSH
33099: LD_INT 2
33101: PUSH
33102: LD_INT 25
33104: PUSH
33105: LD_INT 1
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PUSH
33112: LD_INT 25
33114: PUSH
33115: LD_INT 2
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 25
33124: PUSH
33125: LD_INT 3
33127: PUSH
33128: EMPTY
33129: LIST
33130: LIST
33131: PUSH
33132: LD_INT 25
33134: PUSH
33135: LD_INT 4
33137: PUSH
33138: EMPTY
33139: LIST
33140: LIST
33141: PUSH
33142: LD_INT 25
33144: PUSH
33145: LD_INT 5
33147: PUSH
33148: EMPTY
33149: LIST
33150: LIST
33151: PUSH
33152: LD_INT 25
33154: PUSH
33155: LD_INT 8
33157: PUSH
33158: EMPTY
33159: LIST
33160: LIST
33161: PUSH
33162: EMPTY
33163: LIST
33164: LIST
33165: LIST
33166: LIST
33167: LIST
33168: LIST
33169: LIST
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: PPUSH
33177: CALL_OW 69
33181: PUSH
33182: LD_EXP 23
33186: PUSH
33187: LD_EXP 24
33191: PUSH
33192: LD_EXP 25
33196: PUSH
33197: LD_EXP 26
33201: PUSH
33202: LD_EXP 27
33206: PUSH
33207: LD_EXP 28
33211: PUSH
33212: LD_EXP 29
33216: PUSH
33217: LD_EXP 37
33221: PUSH
33222: LD_EXP 30
33226: PUSH
33227: LD_EXP 34
33231: PUSH
33232: LD_EXP 35
33236: PUSH
33237: LD_EXP 31
33241: PUSH
33242: LD_EXP 33
33246: PUSH
33247: LD_EXP 32
33251: PUSH
33252: LD_EXP 39
33256: PUSH
33257: LD_EXP 42
33261: PUSH
33262: EMPTY
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: DIFF
33280: PPUSH
33281: LD_STRING 10_other_survivors
33283: PPUSH
33284: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
33288: LD_INT 50
33290: PUSH
33291: EMPTY
33292: LIST
33293: PUSH
33294: LD_INT 22
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: PUSH
33304: LD_INT 21
33306: PUSH
33307: LD_INT 1
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: PUSH
33314: LD_INT 2
33316: PUSH
33317: LD_INT 25
33319: PUSH
33320: LD_INT 16
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 25
33329: PUSH
33330: LD_INT 12
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PUSH
33337: EMPTY
33338: LIST
33339: LIST
33340: LIST
33341: PUSH
33342: EMPTY
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: PPUSH
33348: CALL_OW 69
33352: PUSH
33353: LD_EXP 41
33357: DIFF
33358: PPUSH
33359: LD_STRING 10_ape
33361: PPUSH
33362: CALL_OW 38
// YouWin ;
33366: CALL_OW 103
// end ;
33370: LD_VAR 0 1
33374: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33375: LD_INT 0
33377: PPUSH
33378: PPUSH
33379: PPUSH
33380: PPUSH
// epsilonBase := [ ] ;
33381: LD_ADDR_VAR 0 2
33385: PUSH
33386: EMPTY
33387: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33388: LD_ADDR_VAR 0 3
33392: PUSH
33393: LD_INT 22
33395: PUSH
33396: LD_INT 1
33398: PUSH
33399: EMPTY
33400: LIST
33401: LIST
33402: PUSH
33403: LD_INT 21
33405: PUSH
33406: LD_INT 3
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: PUSH
33413: LD_INT 50
33415: PUSH
33416: EMPTY
33417: LIST
33418: PUSH
33419: EMPTY
33420: LIST
33421: LIST
33422: LIST
33423: PPUSH
33424: CALL_OW 69
33428: ST_TO_ADDR
// for i in buildings do
33429: LD_ADDR_VAR 0 4
33433: PUSH
33434: LD_VAR 0 3
33438: PUSH
33439: FOR_IN
33440: IFFALSE 33894
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33442: LD_VAR 0 4
33446: PPUSH
33447: CALL_OW 266
33451: PUSH
33452: LD_INT 6
33454: PUSH
33455: LD_INT 7
33457: PUSH
33458: LD_INT 8
33460: PUSH
33461: EMPTY
33462: LIST
33463: LIST
33464: LIST
33465: IN
33466: IFFALSE 33580
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33468: LD_ADDR_VAR 0 2
33472: PUSH
33473: LD_VAR 0 2
33477: PUSH
33478: LD_VAR 0 4
33482: PPUSH
33483: CALL_OW 266
33487: PUSH
33488: LD_VAR 0 4
33492: PPUSH
33493: CALL_OW 250
33497: PUSH
33498: LD_VAR 0 4
33502: PPUSH
33503: CALL_OW 251
33507: PUSH
33508: LD_VAR 0 4
33512: PPUSH
33513: CALL_OW 254
33517: PUSH
33518: LD_VAR 0 4
33522: PPUSH
33523: CALL_OW 267
33527: PUSH
33528: LD_VAR 0 4
33532: PPUSH
33533: CALL_OW 248
33537: PUSH
33538: LD_VAR 0 4
33542: PPUSH
33543: LD_INT 1
33545: PPUSH
33546: CALL_OW 268
33550: PUSH
33551: LD_VAR 0 4
33555: PPUSH
33556: LD_INT 2
33558: PPUSH
33559: CALL_OW 268
33563: PUSH
33564: EMPTY
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: PUSH
33574: EMPTY
33575: LIST
33576: ADD
33577: ST_TO_ADDR
33578: GO 33892
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33580: LD_VAR 0 4
33584: PPUSH
33585: CALL_OW 266
33589: PUSH
33590: LD_INT 32
33592: EQUAL
33593: IFTRUE 33610
33595: PUSH
33596: LD_VAR 0 4
33600: PPUSH
33601: CALL_OW 266
33605: PUSH
33606: LD_INT 33
33608: EQUAL
33609: OR
33610: IFFALSE 33707
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33612: LD_ADDR_VAR 0 2
33616: PUSH
33617: LD_VAR 0 2
33621: PUSH
33622: LD_VAR 0 4
33626: PPUSH
33627: CALL_OW 266
33631: PUSH
33632: LD_VAR 0 4
33636: PPUSH
33637: CALL_OW 250
33641: PUSH
33642: LD_VAR 0 4
33646: PPUSH
33647: CALL_OW 251
33651: PUSH
33652: LD_VAR 0 4
33656: PPUSH
33657: CALL_OW 254
33661: PUSH
33662: LD_VAR 0 4
33666: PPUSH
33667: CALL_OW 267
33671: PUSH
33672: LD_VAR 0 4
33676: PPUSH
33677: CALL_OW 248
33681: PUSH
33682: LD_VAR 0 4
33686: PPUSH
33687: CALL_OW 269
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: PUSH
33701: EMPTY
33702: LIST
33703: ADD
33704: ST_TO_ADDR
33705: GO 33892
// if GetBType ( i ) = b_factory then
33707: LD_VAR 0 4
33711: PPUSH
33712: CALL_OW 266
33716: PUSH
33717: LD_INT 3
33719: EQUAL
33720: IFFALSE 33810
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33722: LD_ADDR_VAR 0 2
33726: PUSH
33727: LD_VAR 0 2
33731: PPUSH
33732: LD_INT 1
33734: PPUSH
33735: LD_VAR 0 4
33739: PPUSH
33740: CALL_OW 266
33744: PUSH
33745: LD_VAR 0 4
33749: PPUSH
33750: CALL_OW 250
33754: PUSH
33755: LD_VAR 0 4
33759: PPUSH
33760: CALL_OW 251
33764: PUSH
33765: LD_VAR 0 4
33769: PPUSH
33770: CALL_OW 254
33774: PUSH
33775: LD_VAR 0 4
33779: PPUSH
33780: CALL_OW 267
33784: PUSH
33785: LD_VAR 0 4
33789: PPUSH
33790: CALL_OW 248
33794: PUSH
33795: EMPTY
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: PPUSH
33803: CALL_OW 2
33807: ST_TO_ADDR
33808: GO 33892
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33810: LD_ADDR_VAR 0 2
33814: PUSH
33815: LD_VAR 0 2
33819: PUSH
33820: LD_VAR 0 4
33824: PPUSH
33825: CALL_OW 266
33829: PUSH
33830: LD_VAR 0 4
33834: PPUSH
33835: CALL_OW 250
33839: PUSH
33840: LD_VAR 0 4
33844: PPUSH
33845: CALL_OW 251
33849: PUSH
33850: LD_VAR 0 4
33854: PPUSH
33855: CALL_OW 254
33859: PUSH
33860: LD_VAR 0 4
33864: PPUSH
33865: CALL_OW 267
33869: PUSH
33870: LD_VAR 0 4
33874: PPUSH
33875: CALL_OW 248
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: PUSH
33888: EMPTY
33889: LIST
33890: ADD
33891: ST_TO_ADDR
// end ;
33892: GO 33439
33894: POP
33895: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33896: LD_VAR 0 2
33900: PPUSH
33901: LD_STRING 10_EpsilonBase
33903: PPUSH
33904: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33908: LD_INT 34
33910: PPUSH
33911: CALL_OW 353
33915: PPUSH
33916: LD_STRING 10_EpsilonEnv
33918: PPUSH
33919: CALL_OW 39
// end ; end_of_file
33923: LD_VAR 0 1
33927: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33928: LD_EXP 7
33932: IFFALSE 34055
33934: GO 33936
33936: DISABLE
33937: LD_INT 0
33939: PPUSH
33940: PPUSH
// begin enable ;
33941: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33942: LD_INT 35
33944: PPUSH
33945: LD_INT 385
33947: PPUSH
33948: CALL_OW 12
33952: PPUSH
33953: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33957: LD_ADDR_VAR 0 2
33961: PUSH
33962: LD_INT 13
33964: PUSH
33965: LD_INT 14
33967: PUSH
33968: LD_INT 15
33970: PUSH
33971: LD_INT 16
33973: PUSH
33974: LD_INT 17
33976: PUSH
33977: LD_INT 38
33979: PUSH
33980: EMPTY
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33988: LD_ADDR_VAR 0 1
33992: PUSH
33993: LD_VAR 0 2
33997: PUSH
33998: LD_INT 1
34000: PPUSH
34001: LD_VAR 0 2
34005: PPUSH
34006: CALL 58984 0 1
34010: PPUSH
34011: CALL_OW 12
34015: ARRAY
34016: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
34017: LD_VAR 0 1
34021: PPUSH
34022: CALL_OW 435
34026: PUSH
34027: LD_INT 8
34029: LESS
34030: IFFALSE 34055
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
34032: LD_INT 1
34034: PPUSH
34035: LD_INT 5
34037: PPUSH
34038: CALL_OW 12
34042: PPUSH
34043: LD_VAR 0 1
34047: PPUSH
34048: LD_INT 1
34050: PPUSH
34051: CALL_OW 55
// end ;
34055: PPOPN 2
34057: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
34058: LD_OWVAR 1
34062: PUSH
34063: LD_INT 10500
34065: LESS
34066: IFFALSE 34074
34068: PUSH
34069: LD_EXP 9
34073: AND
34074: IFFALSE 34101
34076: GO 34078
34078: DISABLE
// begin enable ;
34079: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
34080: LD_INT 1
34082: PPUSH
34083: LD_INT 5
34085: PPUSH
34086: CALL_OW 12
34090: PPUSH
34091: LD_INT 15
34093: PPUSH
34094: LD_INT 1
34096: PPUSH
34097: CALL_OW 55
// end ;
34101: END
// every 0 0$55 trigger ruBase do
34102: LD_EXP 68
34106: IFFALSE 34150
34108: GO 34110
34110: DISABLE
// begin enable ;
34111: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
34112: LD_EXP 84
34116: PPUSH
34117: CALL_OW 435
34121: PUSH
34122: LD_INT 3
34124: LESS
34125: IFFALSE 34150
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
34127: LD_INT 1
34129: PPUSH
34130: LD_INT 5
34132: PPUSH
34133: CALL_OW 12
34137: PPUSH
34138: LD_EXP 84
34142: PPUSH
34143: LD_INT 1
34145: PPUSH
34146: CALL_OW 55
// end ;
34150: END
// every 1 1$05 trigger ruBase2 do
34151: LD_EXP 69
34155: IFFALSE 34199
34157: GO 34159
34159: DISABLE
// begin enable ;
34160: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
34161: LD_EXP 85
34165: PPUSH
34166: CALL_OW 435
34170: PUSH
34171: LD_INT 3
34173: LESS
34174: IFFALSE 34199
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
34176: LD_INT 1
34178: PPUSH
34179: LD_INT 5
34181: PPUSH
34182: CALL_OW 12
34186: PPUSH
34187: LD_EXP 85
34191: PPUSH
34192: LD_INT 1
34194: PPUSH
34195: CALL_OW 55
// end ; end_of_file end_of_file
34199: END
// export globalGameSaveCounter ; every 0 0$1 do
34200: GO 34202
34202: DISABLE
// begin enable ;
34203: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
34204: LD_STRING updateTimer(
34206: PUSH
34207: LD_OWVAR 1
34211: STR
34212: PUSH
34213: LD_STRING );
34215: STR
34216: PPUSH
34217: CALL_OW 559
// end ;
34221: END
// every 0 0$1 do
34222: GO 34224
34224: DISABLE
// begin globalGameSaveCounter := 0 ;
34225: LD_ADDR_EXP 86
34229: PUSH
34230: LD_INT 0
34232: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
34233: LD_STRING setGameSaveCounter(0)
34235: PPUSH
34236: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
34240: LD_STRING initStreamRollete();
34242: PPUSH
34243: CALL_OW 559
// InitStreamMode ;
34247: CALL 35599 0 0
// DefineStreamItems ( false ) ;
34251: LD_INT 0
34253: PPUSH
34254: CALL 36063 0 1
// end ;
34258: END
// export function SOS_MapStart ( ) ; begin
34259: LD_INT 0
34261: PPUSH
// if streamModeActive then
34262: LD_EXP 87
34266: IFFALSE 34275
// DefineStreamItems ( true ) ;
34268: LD_INT 1
34270: PPUSH
34271: CALL 36063 0 1
// ToLua ( LFC_UNITS_CUSTOM_ICON = {}; ) ;
34275: LD_STRING LFC_UNITS_CUSTOM_ICON = {};
34277: PPUSH
34278: CALL_OW 559
// UpdateLuaVariables ( ) ;
34282: CALL 34299 0 0
// UpdateFactoryWaypoints ( ) ;
34286: CALL 49185 0 0
// UpdateWarehouseGatheringPoints ( ) ;
34290: CALL 49437 0 0
// end ;
34294: LD_VAR 0 1
34298: RET
// function UpdateLuaVariables ( ) ; begin
34299: LD_INT 0
34301: PPUSH
// if globalGameSaveCounter then
34302: LD_EXP 86
34306: IFFALSE 34340
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34308: LD_ADDR_EXP 86
34312: PUSH
34313: LD_EXP 86
34317: PPUSH
34318: CALL 96333 0 1
34322: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34323: LD_STRING setGameSaveCounter(
34325: PUSH
34326: LD_EXP 86
34330: STR
34331: PUSH
34332: LD_STRING )
34334: STR
34335: PPUSH
34336: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34340: LD_STRING setGameDifficulty(
34342: PUSH
34343: LD_OWVAR 67
34347: STR
34348: PUSH
34349: LD_STRING )
34351: STR
34352: PPUSH
34353: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
34357: LD_STRING displayDifficulty(
34359: PUSH
34360: LD_OWVAR 67
34364: STR
34365: PUSH
34366: LD_STRING )
34368: STR
34369: PPUSH
34370: CALL_OW 559
// end ;
34374: LD_VAR 0 1
34378: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34379: LD_INT 0
34381: PPUSH
// if p2 = stream_mode then
34382: LD_VAR 0 2
34386: PUSH
34387: LD_INT 100
34389: EQUAL
34390: IFFALSE 35393
// begin if not StreamModeActive then
34392: LD_EXP 87
34396: NOT
34397: IFFALSE 34407
// StreamModeActive := true ;
34399: LD_ADDR_EXP 87
34403: PUSH
34404: LD_INT 1
34406: ST_TO_ADDR
// if p3 = 0 then
34407: LD_VAR 0 3
34411: PUSH
34412: LD_INT 0
34414: EQUAL
34415: IFFALSE 34421
// InitStreamMode ;
34417: CALL 35599 0 0
// if p3 = 1 then
34421: LD_VAR 0 3
34425: PUSH
34426: LD_INT 1
34428: EQUAL
34429: IFFALSE 34439
// sRocket := true ;
34431: LD_ADDR_EXP 92
34435: PUSH
34436: LD_INT 1
34438: ST_TO_ADDR
// if p3 = 2 then
34439: LD_VAR 0 3
34443: PUSH
34444: LD_INT 2
34446: EQUAL
34447: IFFALSE 34457
// sSpeed := true ;
34449: LD_ADDR_EXP 91
34453: PUSH
34454: LD_INT 1
34456: ST_TO_ADDR
// if p3 = 3 then
34457: LD_VAR 0 3
34461: PUSH
34462: LD_INT 3
34464: EQUAL
34465: IFFALSE 34475
// sEngine := true ;
34467: LD_ADDR_EXP 93
34471: PUSH
34472: LD_INT 1
34474: ST_TO_ADDR
// if p3 = 4 then
34475: LD_VAR 0 3
34479: PUSH
34480: LD_INT 4
34482: EQUAL
34483: IFFALSE 34493
// sSpec := true ;
34485: LD_ADDR_EXP 90
34489: PUSH
34490: LD_INT 1
34492: ST_TO_ADDR
// if p3 = 5 then
34493: LD_VAR 0 3
34497: PUSH
34498: LD_INT 5
34500: EQUAL
34501: IFFALSE 34511
// sLevel := true ;
34503: LD_ADDR_EXP 94
34507: PUSH
34508: LD_INT 1
34510: ST_TO_ADDR
// if p3 = 6 then
34511: LD_VAR 0 3
34515: PUSH
34516: LD_INT 6
34518: EQUAL
34519: IFFALSE 34529
// sArmoury := true ;
34521: LD_ADDR_EXP 95
34525: PUSH
34526: LD_INT 1
34528: ST_TO_ADDR
// if p3 = 7 then
34529: LD_VAR 0 3
34533: PUSH
34534: LD_INT 7
34536: EQUAL
34537: IFFALSE 34547
// sRadar := true ;
34539: LD_ADDR_EXP 96
34543: PUSH
34544: LD_INT 1
34546: ST_TO_ADDR
// if p3 = 8 then
34547: LD_VAR 0 3
34551: PUSH
34552: LD_INT 8
34554: EQUAL
34555: IFFALSE 34565
// sBunker := true ;
34557: LD_ADDR_EXP 97
34561: PUSH
34562: LD_INT 1
34564: ST_TO_ADDR
// if p3 = 9 then
34565: LD_VAR 0 3
34569: PUSH
34570: LD_INT 9
34572: EQUAL
34573: IFFALSE 34583
// sHack := true ;
34575: LD_ADDR_EXP 98
34579: PUSH
34580: LD_INT 1
34582: ST_TO_ADDR
// if p3 = 10 then
34583: LD_VAR 0 3
34587: PUSH
34588: LD_INT 10
34590: EQUAL
34591: IFFALSE 34601
// sFire := true ;
34593: LD_ADDR_EXP 99
34597: PUSH
34598: LD_INT 1
34600: ST_TO_ADDR
// if p3 = 11 then
34601: LD_VAR 0 3
34605: PUSH
34606: LD_INT 11
34608: EQUAL
34609: IFFALSE 34619
// sRefresh := true ;
34611: LD_ADDR_EXP 100
34615: PUSH
34616: LD_INT 1
34618: ST_TO_ADDR
// if p3 = 12 then
34619: LD_VAR 0 3
34623: PUSH
34624: LD_INT 12
34626: EQUAL
34627: IFFALSE 34637
// sExp := true ;
34629: LD_ADDR_EXP 101
34633: PUSH
34634: LD_INT 1
34636: ST_TO_ADDR
// if p3 = 13 then
34637: LD_VAR 0 3
34641: PUSH
34642: LD_INT 13
34644: EQUAL
34645: IFFALSE 34655
// sDepot := true ;
34647: LD_ADDR_EXP 102
34651: PUSH
34652: LD_INT 1
34654: ST_TO_ADDR
// if p3 = 14 then
34655: LD_VAR 0 3
34659: PUSH
34660: LD_INT 14
34662: EQUAL
34663: IFFALSE 34673
// sFlag := true ;
34665: LD_ADDR_EXP 103
34669: PUSH
34670: LD_INT 1
34672: ST_TO_ADDR
// if p3 = 15 then
34673: LD_VAR 0 3
34677: PUSH
34678: LD_INT 15
34680: EQUAL
34681: IFFALSE 34691
// sKamikadze := true ;
34683: LD_ADDR_EXP 111
34687: PUSH
34688: LD_INT 1
34690: ST_TO_ADDR
// if p3 = 16 then
34691: LD_VAR 0 3
34695: PUSH
34696: LD_INT 16
34698: EQUAL
34699: IFFALSE 34709
// sTroll := true ;
34701: LD_ADDR_EXP 112
34705: PUSH
34706: LD_INT 1
34708: ST_TO_ADDR
// if p3 = 17 then
34709: LD_VAR 0 3
34713: PUSH
34714: LD_INT 17
34716: EQUAL
34717: IFFALSE 34727
// sSlow := true ;
34719: LD_ADDR_EXP 113
34723: PUSH
34724: LD_INT 1
34726: ST_TO_ADDR
// if p3 = 18 then
34727: LD_VAR 0 3
34731: PUSH
34732: LD_INT 18
34734: EQUAL
34735: IFFALSE 34745
// sLack := true ;
34737: LD_ADDR_EXP 114
34741: PUSH
34742: LD_INT 1
34744: ST_TO_ADDR
// if p3 = 19 then
34745: LD_VAR 0 3
34749: PUSH
34750: LD_INT 19
34752: EQUAL
34753: IFFALSE 34763
// sTank := true ;
34755: LD_ADDR_EXP 116
34759: PUSH
34760: LD_INT 1
34762: ST_TO_ADDR
// if p3 = 20 then
34763: LD_VAR 0 3
34767: PUSH
34768: LD_INT 20
34770: EQUAL
34771: IFFALSE 34781
// sRemote := true ;
34773: LD_ADDR_EXP 117
34777: PUSH
34778: LD_INT 1
34780: ST_TO_ADDR
// if p3 = 21 then
34781: LD_VAR 0 3
34785: PUSH
34786: LD_INT 21
34788: EQUAL
34789: IFFALSE 34799
// sPowell := true ;
34791: LD_ADDR_EXP 118
34795: PUSH
34796: LD_INT 1
34798: ST_TO_ADDR
// if p3 = 22 then
34799: LD_VAR 0 3
34803: PUSH
34804: LD_INT 22
34806: EQUAL
34807: IFFALSE 34817
// sTeleport := true ;
34809: LD_ADDR_EXP 121
34813: PUSH
34814: LD_INT 1
34816: ST_TO_ADDR
// if p3 = 23 then
34817: LD_VAR 0 3
34821: PUSH
34822: LD_INT 23
34824: EQUAL
34825: IFFALSE 34835
// sOilTower := true ;
34827: LD_ADDR_EXP 123
34831: PUSH
34832: LD_INT 1
34834: ST_TO_ADDR
// if p3 = 24 then
34835: LD_VAR 0 3
34839: PUSH
34840: LD_INT 24
34842: EQUAL
34843: IFFALSE 34853
// sShovel := true ;
34845: LD_ADDR_EXP 124
34849: PUSH
34850: LD_INT 1
34852: ST_TO_ADDR
// if p3 = 25 then
34853: LD_VAR 0 3
34857: PUSH
34858: LD_INT 25
34860: EQUAL
34861: IFFALSE 34871
// sSheik := true ;
34863: LD_ADDR_EXP 125
34867: PUSH
34868: LD_INT 1
34870: ST_TO_ADDR
// if p3 = 26 then
34871: LD_VAR 0 3
34875: PUSH
34876: LD_INT 26
34878: EQUAL
34879: IFFALSE 34889
// sEarthquake := true ;
34881: LD_ADDR_EXP 127
34885: PUSH
34886: LD_INT 1
34888: ST_TO_ADDR
// if p3 = 27 then
34889: LD_VAR 0 3
34893: PUSH
34894: LD_INT 27
34896: EQUAL
34897: IFFALSE 34907
// sAI := true ;
34899: LD_ADDR_EXP 128
34903: PUSH
34904: LD_INT 1
34906: ST_TO_ADDR
// if p3 = 28 then
34907: LD_VAR 0 3
34911: PUSH
34912: LD_INT 28
34914: EQUAL
34915: IFFALSE 34925
// sCargo := true ;
34917: LD_ADDR_EXP 131
34921: PUSH
34922: LD_INT 1
34924: ST_TO_ADDR
// if p3 = 29 then
34925: LD_VAR 0 3
34929: PUSH
34930: LD_INT 29
34932: EQUAL
34933: IFFALSE 34943
// sDLaser := true ;
34935: LD_ADDR_EXP 132
34939: PUSH
34940: LD_INT 1
34942: ST_TO_ADDR
// if p3 = 30 then
34943: LD_VAR 0 3
34947: PUSH
34948: LD_INT 30
34950: EQUAL
34951: IFFALSE 34961
// sExchange := true ;
34953: LD_ADDR_EXP 133
34957: PUSH
34958: LD_INT 1
34960: ST_TO_ADDR
// if p3 = 31 then
34961: LD_VAR 0 3
34965: PUSH
34966: LD_INT 31
34968: EQUAL
34969: IFFALSE 34979
// sFac := true ;
34971: LD_ADDR_EXP 134
34975: PUSH
34976: LD_INT 1
34978: ST_TO_ADDR
// if p3 = 32 then
34979: LD_VAR 0 3
34983: PUSH
34984: LD_INT 32
34986: EQUAL
34987: IFFALSE 34997
// sPower := true ;
34989: LD_ADDR_EXP 135
34993: PUSH
34994: LD_INT 1
34996: ST_TO_ADDR
// if p3 = 33 then
34997: LD_VAR 0 3
35001: PUSH
35002: LD_INT 33
35004: EQUAL
35005: IFFALSE 35015
// sRandom := true ;
35007: LD_ADDR_EXP 136
35011: PUSH
35012: LD_INT 1
35014: ST_TO_ADDR
// if p3 = 34 then
35015: LD_VAR 0 3
35019: PUSH
35020: LD_INT 34
35022: EQUAL
35023: IFFALSE 35033
// sShield := true ;
35025: LD_ADDR_EXP 137
35029: PUSH
35030: LD_INT 1
35032: ST_TO_ADDR
// if p3 = 35 then
35033: LD_VAR 0 3
35037: PUSH
35038: LD_INT 35
35040: EQUAL
35041: IFFALSE 35051
// sTime := true ;
35043: LD_ADDR_EXP 138
35047: PUSH
35048: LD_INT 1
35050: ST_TO_ADDR
// if p3 = 36 then
35051: LD_VAR 0 3
35055: PUSH
35056: LD_INT 36
35058: EQUAL
35059: IFFALSE 35069
// sTools := true ;
35061: LD_ADDR_EXP 139
35065: PUSH
35066: LD_INT 1
35068: ST_TO_ADDR
// if p3 = 101 then
35069: LD_VAR 0 3
35073: PUSH
35074: LD_INT 101
35076: EQUAL
35077: IFFALSE 35087
// sSold := true ;
35079: LD_ADDR_EXP 104
35083: PUSH
35084: LD_INT 1
35086: ST_TO_ADDR
// if p3 = 102 then
35087: LD_VAR 0 3
35091: PUSH
35092: LD_INT 102
35094: EQUAL
35095: IFFALSE 35105
// sDiff := true ;
35097: LD_ADDR_EXP 105
35101: PUSH
35102: LD_INT 1
35104: ST_TO_ADDR
// if p3 = 103 then
35105: LD_VAR 0 3
35109: PUSH
35110: LD_INT 103
35112: EQUAL
35113: IFFALSE 35123
// sFog := true ;
35115: LD_ADDR_EXP 108
35119: PUSH
35120: LD_INT 1
35122: ST_TO_ADDR
// if p3 = 104 then
35123: LD_VAR 0 3
35127: PUSH
35128: LD_INT 104
35130: EQUAL
35131: IFFALSE 35141
// sReset := true ;
35133: LD_ADDR_EXP 109
35137: PUSH
35138: LD_INT 1
35140: ST_TO_ADDR
// if p3 = 105 then
35141: LD_VAR 0 3
35145: PUSH
35146: LD_INT 105
35148: EQUAL
35149: IFFALSE 35159
// sSun := true ;
35151: LD_ADDR_EXP 110
35155: PUSH
35156: LD_INT 1
35158: ST_TO_ADDR
// if p3 = 106 then
35159: LD_VAR 0 3
35163: PUSH
35164: LD_INT 106
35166: EQUAL
35167: IFFALSE 35177
// sTiger := true ;
35169: LD_ADDR_EXP 106
35173: PUSH
35174: LD_INT 1
35176: ST_TO_ADDR
// if p3 = 107 then
35177: LD_VAR 0 3
35181: PUSH
35182: LD_INT 107
35184: EQUAL
35185: IFFALSE 35195
// sBomb := true ;
35187: LD_ADDR_EXP 107
35191: PUSH
35192: LD_INT 1
35194: ST_TO_ADDR
// if p3 = 108 then
35195: LD_VAR 0 3
35199: PUSH
35200: LD_INT 108
35202: EQUAL
35203: IFFALSE 35213
// sWound := true ;
35205: LD_ADDR_EXP 115
35209: PUSH
35210: LD_INT 1
35212: ST_TO_ADDR
// if p3 = 109 then
35213: LD_VAR 0 3
35217: PUSH
35218: LD_INT 109
35220: EQUAL
35221: IFFALSE 35231
// sBetray := true ;
35223: LD_ADDR_EXP 119
35227: PUSH
35228: LD_INT 1
35230: ST_TO_ADDR
// if p3 = 110 then
35231: LD_VAR 0 3
35235: PUSH
35236: LD_INT 110
35238: EQUAL
35239: IFFALSE 35249
// sContamin := true ;
35241: LD_ADDR_EXP 120
35245: PUSH
35246: LD_INT 1
35248: ST_TO_ADDR
// if p3 = 111 then
35249: LD_VAR 0 3
35253: PUSH
35254: LD_INT 111
35256: EQUAL
35257: IFFALSE 35267
// sOil := true ;
35259: LD_ADDR_EXP 122
35263: PUSH
35264: LD_INT 1
35266: ST_TO_ADDR
// if p3 = 112 then
35267: LD_VAR 0 3
35271: PUSH
35272: LD_INT 112
35274: EQUAL
35275: IFFALSE 35285
// sStu := true ;
35277: LD_ADDR_EXP 126
35281: PUSH
35282: LD_INT 1
35284: ST_TO_ADDR
// if p3 = 113 then
35285: LD_VAR 0 3
35289: PUSH
35290: LD_INT 113
35292: EQUAL
35293: IFFALSE 35303
// sBazooka := true ;
35295: LD_ADDR_EXP 129
35299: PUSH
35300: LD_INT 1
35302: ST_TO_ADDR
// if p3 = 114 then
35303: LD_VAR 0 3
35307: PUSH
35308: LD_INT 114
35310: EQUAL
35311: IFFALSE 35321
// sMortar := true ;
35313: LD_ADDR_EXP 130
35317: PUSH
35318: LD_INT 1
35320: ST_TO_ADDR
// if p3 = 115 then
35321: LD_VAR 0 3
35325: PUSH
35326: LD_INT 115
35328: EQUAL
35329: IFFALSE 35339
// sRanger := true ;
35331: LD_ADDR_EXP 140
35335: PUSH
35336: LD_INT 1
35338: ST_TO_ADDR
// if p3 = 116 then
35339: LD_VAR 0 3
35343: PUSH
35344: LD_INT 116
35346: EQUAL
35347: IFFALSE 35357
// sComputer := true ;
35349: LD_ADDR_EXP 141
35353: PUSH
35354: LD_INT 1
35356: ST_TO_ADDR
// if p3 = 117 then
35357: LD_VAR 0 3
35361: PUSH
35362: LD_INT 117
35364: EQUAL
35365: IFFALSE 35375
// s30 := true ;
35367: LD_ADDR_EXP 142
35371: PUSH
35372: LD_INT 1
35374: ST_TO_ADDR
// if p3 = 118 then
35375: LD_VAR 0 3
35379: PUSH
35380: LD_INT 118
35382: EQUAL
35383: IFFALSE 35393
// s60 := true ;
35385: LD_ADDR_EXP 143
35389: PUSH
35390: LD_INT 1
35392: ST_TO_ADDR
// end ; if p2 = hack_mode then
35393: LD_VAR 0 2
35397: PUSH
35398: LD_INT 101
35400: EQUAL
35401: IFFALSE 35529
// begin case p3 of 1 :
35403: LD_VAR 0 3
35407: PUSH
35408: LD_INT 1
35410: DOUBLE
35411: EQUAL
35412: IFTRUE 35416
35414: GO 35423
35416: POP
// hHackUnlimitedResources ; 2 :
35417: CALL 47792 0 0
35421: GO 35529
35423: LD_INT 2
35425: DOUBLE
35426: EQUAL
35427: IFTRUE 35431
35429: GO 35438
35431: POP
// hHackSetLevel10 ; 3 :
35432: CALL 47925 0 0
35436: GO 35529
35438: LD_INT 3
35440: DOUBLE
35441: EQUAL
35442: IFTRUE 35446
35444: GO 35453
35446: POP
// hHackSetLevel10YourUnits ; 4 :
35447: CALL 48010 0 0
35451: GO 35529
35453: LD_INT 4
35455: DOUBLE
35456: EQUAL
35457: IFTRUE 35461
35459: GO 35468
35461: POP
// hHackInvincible ; 5 :
35462: CALL 48458 0 0
35466: GO 35529
35468: LD_INT 5
35470: DOUBLE
35471: EQUAL
35472: IFTRUE 35476
35474: GO 35483
35476: POP
// hHackInvisible ; 6 :
35477: CALL 48569 0 0
35481: GO 35529
35483: LD_INT 6
35485: DOUBLE
35486: EQUAL
35487: IFTRUE 35491
35489: GO 35498
35491: POP
// hHackChangeYourSide ; 7 :
35492: CALL 48626 0 0
35496: GO 35529
35498: LD_INT 7
35500: DOUBLE
35501: EQUAL
35502: IFTRUE 35506
35504: GO 35513
35506: POP
// hHackChangeUnitSide ; 8 :
35507: CALL 48668 0 0
35511: GO 35529
35513: LD_INT 8
35515: DOUBLE
35516: EQUAL
35517: IFTRUE 35521
35519: GO 35528
35521: POP
// hHackFog ; end ;
35522: CALL 48769 0 0
35526: GO 35529
35528: POP
// end ; if p2 = game_save_mode then
35529: LD_VAR 0 2
35533: PUSH
35534: LD_INT 102
35536: EQUAL
35537: IFFALSE 35594
// begin if p3 = 1 then
35539: LD_VAR 0 3
35543: PUSH
35544: LD_INT 1
35546: EQUAL
35547: IFFALSE 35559
// globalGameSaveCounter := p4 ;
35549: LD_ADDR_EXP 86
35553: PUSH
35554: LD_VAR 0 4
35558: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35559: LD_VAR 0 3
35563: PUSH
35564: LD_INT 2
35566: EQUAL
35567: IFFALSE 35575
35569: PUSH
35570: LD_EXP 86
35574: AND
35575: IFFALSE 35594
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35577: LD_STRING setGameSaveCounter(
35579: PUSH
35580: LD_EXP 86
35584: STR
35585: PUSH
35586: LD_STRING )
35588: STR
35589: PPUSH
35590: CALL_OW 559
// end ; end ;
35594: LD_VAR 0 7
35598: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35599: LD_INT 0
35601: PPUSH
// streamModeActive := false ;
35602: LD_ADDR_EXP 87
35606: PUSH
35607: LD_INT 0
35609: ST_TO_ADDR
// normalCounter := 36 ;
35610: LD_ADDR_EXP 88
35614: PUSH
35615: LD_INT 36
35617: ST_TO_ADDR
// hardcoreCounter := 18 ;
35618: LD_ADDR_EXP 89
35622: PUSH
35623: LD_INT 18
35625: ST_TO_ADDR
// sRocket := false ;
35626: LD_ADDR_EXP 92
35630: PUSH
35631: LD_INT 0
35633: ST_TO_ADDR
// sSpeed := false ;
35634: LD_ADDR_EXP 91
35638: PUSH
35639: LD_INT 0
35641: ST_TO_ADDR
// sEngine := false ;
35642: LD_ADDR_EXP 93
35646: PUSH
35647: LD_INT 0
35649: ST_TO_ADDR
// sSpec := false ;
35650: LD_ADDR_EXP 90
35654: PUSH
35655: LD_INT 0
35657: ST_TO_ADDR
// sLevel := false ;
35658: LD_ADDR_EXP 94
35662: PUSH
35663: LD_INT 0
35665: ST_TO_ADDR
// sArmoury := false ;
35666: LD_ADDR_EXP 95
35670: PUSH
35671: LD_INT 0
35673: ST_TO_ADDR
// sRadar := false ;
35674: LD_ADDR_EXP 96
35678: PUSH
35679: LD_INT 0
35681: ST_TO_ADDR
// sBunker := false ;
35682: LD_ADDR_EXP 97
35686: PUSH
35687: LD_INT 0
35689: ST_TO_ADDR
// sHack := false ;
35690: LD_ADDR_EXP 98
35694: PUSH
35695: LD_INT 0
35697: ST_TO_ADDR
// sFire := false ;
35698: LD_ADDR_EXP 99
35702: PUSH
35703: LD_INT 0
35705: ST_TO_ADDR
// sRefresh := false ;
35706: LD_ADDR_EXP 100
35710: PUSH
35711: LD_INT 0
35713: ST_TO_ADDR
// sExp := false ;
35714: LD_ADDR_EXP 101
35718: PUSH
35719: LD_INT 0
35721: ST_TO_ADDR
// sDepot := false ;
35722: LD_ADDR_EXP 102
35726: PUSH
35727: LD_INT 0
35729: ST_TO_ADDR
// sFlag := false ;
35730: LD_ADDR_EXP 103
35734: PUSH
35735: LD_INT 0
35737: ST_TO_ADDR
// sKamikadze := false ;
35738: LD_ADDR_EXP 111
35742: PUSH
35743: LD_INT 0
35745: ST_TO_ADDR
// sTroll := false ;
35746: LD_ADDR_EXP 112
35750: PUSH
35751: LD_INT 0
35753: ST_TO_ADDR
// sSlow := false ;
35754: LD_ADDR_EXP 113
35758: PUSH
35759: LD_INT 0
35761: ST_TO_ADDR
// sLack := false ;
35762: LD_ADDR_EXP 114
35766: PUSH
35767: LD_INT 0
35769: ST_TO_ADDR
// sTank := false ;
35770: LD_ADDR_EXP 116
35774: PUSH
35775: LD_INT 0
35777: ST_TO_ADDR
// sRemote := false ;
35778: LD_ADDR_EXP 117
35782: PUSH
35783: LD_INT 0
35785: ST_TO_ADDR
// sPowell := false ;
35786: LD_ADDR_EXP 118
35790: PUSH
35791: LD_INT 0
35793: ST_TO_ADDR
// sTeleport := false ;
35794: LD_ADDR_EXP 121
35798: PUSH
35799: LD_INT 0
35801: ST_TO_ADDR
// sOilTower := false ;
35802: LD_ADDR_EXP 123
35806: PUSH
35807: LD_INT 0
35809: ST_TO_ADDR
// sShovel := false ;
35810: LD_ADDR_EXP 124
35814: PUSH
35815: LD_INT 0
35817: ST_TO_ADDR
// sSheik := false ;
35818: LD_ADDR_EXP 125
35822: PUSH
35823: LD_INT 0
35825: ST_TO_ADDR
// sEarthquake := false ;
35826: LD_ADDR_EXP 127
35830: PUSH
35831: LD_INT 0
35833: ST_TO_ADDR
// sAI := false ;
35834: LD_ADDR_EXP 128
35838: PUSH
35839: LD_INT 0
35841: ST_TO_ADDR
// sCargo := false ;
35842: LD_ADDR_EXP 131
35846: PUSH
35847: LD_INT 0
35849: ST_TO_ADDR
// sDLaser := false ;
35850: LD_ADDR_EXP 132
35854: PUSH
35855: LD_INT 0
35857: ST_TO_ADDR
// sExchange := false ;
35858: LD_ADDR_EXP 133
35862: PUSH
35863: LD_INT 0
35865: ST_TO_ADDR
// sFac := false ;
35866: LD_ADDR_EXP 134
35870: PUSH
35871: LD_INT 0
35873: ST_TO_ADDR
// sPower := false ;
35874: LD_ADDR_EXP 135
35878: PUSH
35879: LD_INT 0
35881: ST_TO_ADDR
// sRandom := false ;
35882: LD_ADDR_EXP 136
35886: PUSH
35887: LD_INT 0
35889: ST_TO_ADDR
// sShield := false ;
35890: LD_ADDR_EXP 137
35894: PUSH
35895: LD_INT 0
35897: ST_TO_ADDR
// sTime := false ;
35898: LD_ADDR_EXP 138
35902: PUSH
35903: LD_INT 0
35905: ST_TO_ADDR
// sTools := false ;
35906: LD_ADDR_EXP 139
35910: PUSH
35911: LD_INT 0
35913: ST_TO_ADDR
// sSold := false ;
35914: LD_ADDR_EXP 104
35918: PUSH
35919: LD_INT 0
35921: ST_TO_ADDR
// sDiff := false ;
35922: LD_ADDR_EXP 105
35926: PUSH
35927: LD_INT 0
35929: ST_TO_ADDR
// sFog := false ;
35930: LD_ADDR_EXP 108
35934: PUSH
35935: LD_INT 0
35937: ST_TO_ADDR
// sReset := false ;
35938: LD_ADDR_EXP 109
35942: PUSH
35943: LD_INT 0
35945: ST_TO_ADDR
// sSun := false ;
35946: LD_ADDR_EXP 110
35950: PUSH
35951: LD_INT 0
35953: ST_TO_ADDR
// sTiger := false ;
35954: LD_ADDR_EXP 106
35958: PUSH
35959: LD_INT 0
35961: ST_TO_ADDR
// sBomb := false ;
35962: LD_ADDR_EXP 107
35966: PUSH
35967: LD_INT 0
35969: ST_TO_ADDR
// sWound := false ;
35970: LD_ADDR_EXP 115
35974: PUSH
35975: LD_INT 0
35977: ST_TO_ADDR
// sBetray := false ;
35978: LD_ADDR_EXP 119
35982: PUSH
35983: LD_INT 0
35985: ST_TO_ADDR
// sContamin := false ;
35986: LD_ADDR_EXP 120
35990: PUSH
35991: LD_INT 0
35993: ST_TO_ADDR
// sOil := false ;
35994: LD_ADDR_EXP 122
35998: PUSH
35999: LD_INT 0
36001: ST_TO_ADDR
// sStu := false ;
36002: LD_ADDR_EXP 126
36006: PUSH
36007: LD_INT 0
36009: ST_TO_ADDR
// sBazooka := false ;
36010: LD_ADDR_EXP 129
36014: PUSH
36015: LD_INT 0
36017: ST_TO_ADDR
// sMortar := false ;
36018: LD_ADDR_EXP 130
36022: PUSH
36023: LD_INT 0
36025: ST_TO_ADDR
// sRanger := false ;
36026: LD_ADDR_EXP 140
36030: PUSH
36031: LD_INT 0
36033: ST_TO_ADDR
// sComputer := false ;
36034: LD_ADDR_EXP 141
36038: PUSH
36039: LD_INT 0
36041: ST_TO_ADDR
// s30 := false ;
36042: LD_ADDR_EXP 142
36046: PUSH
36047: LD_INT 0
36049: ST_TO_ADDR
// s60 := false ;
36050: LD_ADDR_EXP 143
36054: PUSH
36055: LD_INT 0
36057: ST_TO_ADDR
// end ;
36058: LD_VAR 0 1
36062: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
36063: LD_INT 0
36065: PPUSH
36066: PPUSH
36067: PPUSH
36068: PPUSH
36069: PPUSH
36070: PPUSH
36071: PPUSH
// result := [ ] ;
36072: LD_ADDR_VAR 0 2
36076: PUSH
36077: EMPTY
36078: ST_TO_ADDR
// if campaign_id = 1 then
36079: LD_OWVAR 69
36083: PUSH
36084: LD_INT 1
36086: EQUAL
36087: IFFALSE 39253
// begin case mission_number of 1 :
36089: LD_OWVAR 70
36093: PUSH
36094: LD_INT 1
36096: DOUBLE
36097: EQUAL
36098: IFTRUE 36102
36100: GO 36178
36102: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
36103: LD_ADDR_VAR 0 2
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: LD_INT 4
36113: PUSH
36114: LD_INT 11
36116: PUSH
36117: LD_INT 12
36119: PUSH
36120: LD_INT 15
36122: PUSH
36123: LD_INT 16
36125: PUSH
36126: LD_INT 22
36128: PUSH
36129: LD_INT 23
36131: PUSH
36132: LD_INT 26
36134: PUSH
36135: EMPTY
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: PUSH
36146: LD_INT 101
36148: PUSH
36149: LD_INT 102
36151: PUSH
36152: LD_INT 106
36154: PUSH
36155: LD_INT 116
36157: PUSH
36158: LD_INT 117
36160: PUSH
36161: LD_INT 118
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: PUSH
36172: EMPTY
36173: LIST
36174: LIST
36175: ST_TO_ADDR
36176: GO 39251
36178: LD_INT 2
36180: DOUBLE
36181: EQUAL
36182: IFTRUE 36186
36184: GO 36270
36186: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
36187: LD_ADDR_VAR 0 2
36191: PUSH
36192: LD_INT 2
36194: PUSH
36195: LD_INT 4
36197: PUSH
36198: LD_INT 11
36200: PUSH
36201: LD_INT 12
36203: PUSH
36204: LD_INT 15
36206: PUSH
36207: LD_INT 16
36209: PUSH
36210: LD_INT 22
36212: PUSH
36213: LD_INT 23
36215: PUSH
36216: LD_INT 26
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 101
36232: PUSH
36233: LD_INT 102
36235: PUSH
36236: LD_INT 105
36238: PUSH
36239: LD_INT 106
36241: PUSH
36242: LD_INT 108
36244: PUSH
36245: LD_INT 116
36247: PUSH
36248: LD_INT 117
36250: PUSH
36251: LD_INT 118
36253: PUSH
36254: EMPTY
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: ST_TO_ADDR
36268: GO 39251
36270: LD_INT 3
36272: DOUBLE
36273: EQUAL
36274: IFTRUE 36278
36276: GO 36366
36278: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
36279: LD_ADDR_VAR 0 2
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: LD_INT 4
36289: PUSH
36290: LD_INT 5
36292: PUSH
36293: LD_INT 11
36295: PUSH
36296: LD_INT 12
36298: PUSH
36299: LD_INT 15
36301: PUSH
36302: LD_INT 16
36304: PUSH
36305: LD_INT 22
36307: PUSH
36308: LD_INT 26
36310: PUSH
36311: LD_INT 36
36313: PUSH
36314: EMPTY
36315: LIST
36316: LIST
36317: LIST
36318: LIST
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 101
36328: PUSH
36329: LD_INT 102
36331: PUSH
36332: LD_INT 105
36334: PUSH
36335: LD_INT 106
36337: PUSH
36338: LD_INT 108
36340: PUSH
36341: LD_INT 116
36343: PUSH
36344: LD_INT 117
36346: PUSH
36347: LD_INT 118
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: ST_TO_ADDR
36364: GO 39251
36366: LD_INT 4
36368: DOUBLE
36369: EQUAL
36370: IFTRUE 36374
36372: GO 36470
36374: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36375: LD_ADDR_VAR 0 2
36379: PUSH
36380: LD_INT 2
36382: PUSH
36383: LD_INT 4
36385: PUSH
36386: LD_INT 5
36388: PUSH
36389: LD_INT 8
36391: PUSH
36392: LD_INT 11
36394: PUSH
36395: LD_INT 12
36397: PUSH
36398: LD_INT 15
36400: PUSH
36401: LD_INT 16
36403: PUSH
36404: LD_INT 22
36406: PUSH
36407: LD_INT 23
36409: PUSH
36410: LD_INT 26
36412: PUSH
36413: LD_INT 36
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 101
36432: PUSH
36433: LD_INT 102
36435: PUSH
36436: LD_INT 105
36438: PUSH
36439: LD_INT 106
36441: PUSH
36442: LD_INT 108
36444: PUSH
36445: LD_INT 116
36447: PUSH
36448: LD_INT 117
36450: PUSH
36451: LD_INT 118
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: LIST
36458: LIST
36459: LIST
36460: LIST
36461: LIST
36462: LIST
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: ST_TO_ADDR
36468: GO 39251
36470: LD_INT 5
36472: DOUBLE
36473: EQUAL
36474: IFTRUE 36478
36476: GO 36590
36478: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36479: LD_ADDR_VAR 0 2
36483: PUSH
36484: LD_INT 2
36486: PUSH
36487: LD_INT 4
36489: PUSH
36490: LD_INT 5
36492: PUSH
36493: LD_INT 6
36495: PUSH
36496: LD_INT 8
36498: PUSH
36499: LD_INT 11
36501: PUSH
36502: LD_INT 12
36504: PUSH
36505: LD_INT 15
36507: PUSH
36508: LD_INT 16
36510: PUSH
36511: LD_INT 22
36513: PUSH
36514: LD_INT 23
36516: PUSH
36517: LD_INT 25
36519: PUSH
36520: LD_INT 26
36522: PUSH
36523: LD_INT 36
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: LIST
36540: LIST
36541: PUSH
36542: LD_INT 101
36544: PUSH
36545: LD_INT 102
36547: PUSH
36548: LD_INT 105
36550: PUSH
36551: LD_INT 106
36553: PUSH
36554: LD_INT 108
36556: PUSH
36557: LD_INT 109
36559: PUSH
36560: LD_INT 112
36562: PUSH
36563: LD_INT 116
36565: PUSH
36566: LD_INT 117
36568: PUSH
36569: LD_INT 118
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: ST_TO_ADDR
36588: GO 39251
36590: LD_INT 6
36592: DOUBLE
36593: EQUAL
36594: IFTRUE 36598
36596: GO 36730
36598: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36599: LD_ADDR_VAR 0 2
36603: PUSH
36604: LD_INT 2
36606: PUSH
36607: LD_INT 4
36609: PUSH
36610: LD_INT 5
36612: PUSH
36613: LD_INT 6
36615: PUSH
36616: LD_INT 8
36618: PUSH
36619: LD_INT 11
36621: PUSH
36622: LD_INT 12
36624: PUSH
36625: LD_INT 15
36627: PUSH
36628: LD_INT 16
36630: PUSH
36631: LD_INT 20
36633: PUSH
36634: LD_INT 21
36636: PUSH
36637: LD_INT 22
36639: PUSH
36640: LD_INT 23
36642: PUSH
36643: LD_INT 25
36645: PUSH
36646: LD_INT 26
36648: PUSH
36649: LD_INT 30
36651: PUSH
36652: LD_INT 31
36654: PUSH
36655: LD_INT 32
36657: PUSH
36658: LD_INT 36
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: LIST
36672: LIST
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 101
36684: PUSH
36685: LD_INT 102
36687: PUSH
36688: LD_INT 105
36690: PUSH
36691: LD_INT 106
36693: PUSH
36694: LD_INT 108
36696: PUSH
36697: LD_INT 109
36699: PUSH
36700: LD_INT 112
36702: PUSH
36703: LD_INT 116
36705: PUSH
36706: LD_INT 117
36708: PUSH
36709: LD_INT 118
36711: PUSH
36712: EMPTY
36713: LIST
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: PUSH
36724: EMPTY
36725: LIST
36726: LIST
36727: ST_TO_ADDR
36728: GO 39251
36730: LD_INT 7
36732: DOUBLE
36733: EQUAL
36734: IFTRUE 36738
36736: GO 36850
36738: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36739: LD_ADDR_VAR 0 2
36743: PUSH
36744: LD_INT 2
36746: PUSH
36747: LD_INT 4
36749: PUSH
36750: LD_INT 5
36752: PUSH
36753: LD_INT 7
36755: PUSH
36756: LD_INT 11
36758: PUSH
36759: LD_INT 12
36761: PUSH
36762: LD_INT 15
36764: PUSH
36765: LD_INT 16
36767: PUSH
36768: LD_INT 20
36770: PUSH
36771: LD_INT 21
36773: PUSH
36774: LD_INT 22
36776: PUSH
36777: LD_INT 23
36779: PUSH
36780: LD_INT 25
36782: PUSH
36783: LD_INT 26
36785: PUSH
36786: EMPTY
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: PUSH
36802: LD_INT 101
36804: PUSH
36805: LD_INT 102
36807: PUSH
36808: LD_INT 103
36810: PUSH
36811: LD_INT 105
36813: PUSH
36814: LD_INT 106
36816: PUSH
36817: LD_INT 108
36819: PUSH
36820: LD_INT 112
36822: PUSH
36823: LD_INT 116
36825: PUSH
36826: LD_INT 117
36828: PUSH
36829: LD_INT 118
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: ST_TO_ADDR
36848: GO 39251
36850: LD_INT 8
36852: DOUBLE
36853: EQUAL
36854: IFTRUE 36858
36856: GO 36998
36858: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36859: LD_ADDR_VAR 0 2
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: LD_INT 4
36869: PUSH
36870: LD_INT 5
36872: PUSH
36873: LD_INT 6
36875: PUSH
36876: LD_INT 7
36878: PUSH
36879: LD_INT 8
36881: PUSH
36882: LD_INT 11
36884: PUSH
36885: LD_INT 12
36887: PUSH
36888: LD_INT 15
36890: PUSH
36891: LD_INT 16
36893: PUSH
36894: LD_INT 20
36896: PUSH
36897: LD_INT 21
36899: PUSH
36900: LD_INT 22
36902: PUSH
36903: LD_INT 23
36905: PUSH
36906: LD_INT 25
36908: PUSH
36909: LD_INT 26
36911: PUSH
36912: LD_INT 30
36914: PUSH
36915: LD_INT 31
36917: PUSH
36918: LD_INT 32
36920: PUSH
36921: LD_INT 36
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: LIST
36928: LIST
36929: LIST
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 101
36948: PUSH
36949: LD_INT 102
36951: PUSH
36952: LD_INT 103
36954: PUSH
36955: LD_INT 105
36957: PUSH
36958: LD_INT 106
36960: PUSH
36961: LD_INT 108
36963: PUSH
36964: LD_INT 109
36966: PUSH
36967: LD_INT 112
36969: PUSH
36970: LD_INT 116
36972: PUSH
36973: LD_INT 117
36975: PUSH
36976: LD_INT 118
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: ST_TO_ADDR
36996: GO 39251
36998: LD_INT 9
37000: DOUBLE
37001: EQUAL
37002: IFTRUE 37006
37004: GO 37154
37006: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
37007: LD_ADDR_VAR 0 2
37011: PUSH
37012: LD_INT 2
37014: PUSH
37015: LD_INT 4
37017: PUSH
37018: LD_INT 5
37020: PUSH
37021: LD_INT 6
37023: PUSH
37024: LD_INT 7
37026: PUSH
37027: LD_INT 8
37029: PUSH
37030: LD_INT 11
37032: PUSH
37033: LD_INT 12
37035: PUSH
37036: LD_INT 15
37038: PUSH
37039: LD_INT 16
37041: PUSH
37042: LD_INT 20
37044: PUSH
37045: LD_INT 21
37047: PUSH
37048: LD_INT 22
37050: PUSH
37051: LD_INT 23
37053: PUSH
37054: LD_INT 25
37056: PUSH
37057: LD_INT 26
37059: PUSH
37060: LD_INT 28
37062: PUSH
37063: LD_INT 30
37065: PUSH
37066: LD_INT 31
37068: PUSH
37069: LD_INT 32
37071: PUSH
37072: LD_INT 36
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: PUSH
37098: LD_INT 101
37100: PUSH
37101: LD_INT 102
37103: PUSH
37104: LD_INT 103
37106: PUSH
37107: LD_INT 105
37109: PUSH
37110: LD_INT 106
37112: PUSH
37113: LD_INT 108
37115: PUSH
37116: LD_INT 109
37118: PUSH
37119: LD_INT 112
37121: PUSH
37122: LD_INT 114
37124: PUSH
37125: LD_INT 116
37127: PUSH
37128: LD_INT 117
37130: PUSH
37131: LD_INT 118
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: LIST
37138: LIST
37139: LIST
37140: LIST
37141: LIST
37142: LIST
37143: LIST
37144: LIST
37145: LIST
37146: LIST
37147: PUSH
37148: EMPTY
37149: LIST
37150: LIST
37151: ST_TO_ADDR
37152: GO 39251
37154: LD_INT 10
37156: DOUBLE
37157: EQUAL
37158: IFTRUE 37162
37160: GO 37358
37162: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
37163: LD_ADDR_VAR 0 2
37167: PUSH
37168: LD_INT 2
37170: PUSH
37171: LD_INT 4
37173: PUSH
37174: LD_INT 5
37176: PUSH
37177: LD_INT 6
37179: PUSH
37180: LD_INT 7
37182: PUSH
37183: LD_INT 8
37185: PUSH
37186: LD_INT 9
37188: PUSH
37189: LD_INT 10
37191: PUSH
37192: LD_INT 11
37194: PUSH
37195: LD_INT 12
37197: PUSH
37198: LD_INT 13
37200: PUSH
37201: LD_INT 14
37203: PUSH
37204: LD_INT 15
37206: PUSH
37207: LD_INT 16
37209: PUSH
37210: LD_INT 17
37212: PUSH
37213: LD_INT 18
37215: PUSH
37216: LD_INT 19
37218: PUSH
37219: LD_INT 20
37221: PUSH
37222: LD_INT 21
37224: PUSH
37225: LD_INT 22
37227: PUSH
37228: LD_INT 23
37230: PUSH
37231: LD_INT 24
37233: PUSH
37234: LD_INT 25
37236: PUSH
37237: LD_INT 26
37239: PUSH
37240: LD_INT 28
37242: PUSH
37243: LD_INT 30
37245: PUSH
37246: LD_INT 31
37248: PUSH
37249: LD_INT 32
37251: PUSH
37252: LD_INT 36
37254: PUSH
37255: EMPTY
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: LIST
37271: LIST
37272: LIST
37273: LIST
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 101
37288: PUSH
37289: LD_INT 102
37291: PUSH
37292: LD_INT 103
37294: PUSH
37295: LD_INT 104
37297: PUSH
37298: LD_INT 105
37300: PUSH
37301: LD_INT 106
37303: PUSH
37304: LD_INT 107
37306: PUSH
37307: LD_INT 108
37309: PUSH
37310: LD_INT 109
37312: PUSH
37313: LD_INT 110
37315: PUSH
37316: LD_INT 111
37318: PUSH
37319: LD_INT 112
37321: PUSH
37322: LD_INT 114
37324: PUSH
37325: LD_INT 116
37327: PUSH
37328: LD_INT 117
37330: PUSH
37331: LD_INT 118
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: LIST
37338: LIST
37339: LIST
37340: LIST
37341: LIST
37342: LIST
37343: LIST
37344: LIST
37345: LIST
37346: LIST
37347: LIST
37348: LIST
37349: LIST
37350: LIST
37351: PUSH
37352: EMPTY
37353: LIST
37354: LIST
37355: ST_TO_ADDR
37356: GO 39251
37358: LD_INT 11
37360: DOUBLE
37361: EQUAL
37362: IFTRUE 37366
37364: GO 37570
37366: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37367: LD_ADDR_VAR 0 2
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: LD_INT 3
37377: PUSH
37378: LD_INT 4
37380: PUSH
37381: LD_INT 5
37383: PUSH
37384: LD_INT 6
37386: PUSH
37387: LD_INT 7
37389: PUSH
37390: LD_INT 8
37392: PUSH
37393: LD_INT 9
37395: PUSH
37396: LD_INT 10
37398: PUSH
37399: LD_INT 11
37401: PUSH
37402: LD_INT 12
37404: PUSH
37405: LD_INT 13
37407: PUSH
37408: LD_INT 14
37410: PUSH
37411: LD_INT 15
37413: PUSH
37414: LD_INT 16
37416: PUSH
37417: LD_INT 17
37419: PUSH
37420: LD_INT 18
37422: PUSH
37423: LD_INT 19
37425: PUSH
37426: LD_INT 20
37428: PUSH
37429: LD_INT 21
37431: PUSH
37432: LD_INT 22
37434: PUSH
37435: LD_INT 23
37437: PUSH
37438: LD_INT 24
37440: PUSH
37441: LD_INT 25
37443: PUSH
37444: LD_INT 26
37446: PUSH
37447: LD_INT 28
37449: PUSH
37450: LD_INT 30
37452: PUSH
37453: LD_INT 31
37455: PUSH
37456: LD_INT 32
37458: PUSH
37459: LD_INT 34
37461: PUSH
37462: LD_INT 36
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: PUSH
37498: LD_INT 101
37500: PUSH
37501: LD_INT 102
37503: PUSH
37504: LD_INT 103
37506: PUSH
37507: LD_INT 104
37509: PUSH
37510: LD_INT 105
37512: PUSH
37513: LD_INT 106
37515: PUSH
37516: LD_INT 107
37518: PUSH
37519: LD_INT 108
37521: PUSH
37522: LD_INT 109
37524: PUSH
37525: LD_INT 110
37527: PUSH
37528: LD_INT 111
37530: PUSH
37531: LD_INT 112
37533: PUSH
37534: LD_INT 114
37536: PUSH
37537: LD_INT 116
37539: PUSH
37540: LD_INT 117
37542: PUSH
37543: LD_INT 118
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: ST_TO_ADDR
37568: GO 39251
37570: LD_INT 12
37572: DOUBLE
37573: EQUAL
37574: IFTRUE 37578
37576: GO 37798
37578: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37579: LD_ADDR_VAR 0 2
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: LD_INT 2
37589: PUSH
37590: LD_INT 3
37592: PUSH
37593: LD_INT 4
37595: PUSH
37596: LD_INT 5
37598: PUSH
37599: LD_INT 6
37601: PUSH
37602: LD_INT 7
37604: PUSH
37605: LD_INT 8
37607: PUSH
37608: LD_INT 9
37610: PUSH
37611: LD_INT 10
37613: PUSH
37614: LD_INT 11
37616: PUSH
37617: LD_INT 12
37619: PUSH
37620: LD_INT 13
37622: PUSH
37623: LD_INT 14
37625: PUSH
37626: LD_INT 15
37628: PUSH
37629: LD_INT 16
37631: PUSH
37632: LD_INT 17
37634: PUSH
37635: LD_INT 18
37637: PUSH
37638: LD_INT 19
37640: PUSH
37641: LD_INT 20
37643: PUSH
37644: LD_INT 21
37646: PUSH
37647: LD_INT 22
37649: PUSH
37650: LD_INT 23
37652: PUSH
37653: LD_INT 24
37655: PUSH
37656: LD_INT 25
37658: PUSH
37659: LD_INT 26
37661: PUSH
37662: LD_INT 27
37664: PUSH
37665: LD_INT 28
37667: PUSH
37668: LD_INT 30
37670: PUSH
37671: LD_INT 31
37673: PUSH
37674: LD_INT 32
37676: PUSH
37677: LD_INT 33
37679: PUSH
37680: LD_INT 34
37682: PUSH
37683: LD_INT 36
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: LIST
37701: LIST
37702: LIST
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: PUSH
37722: LD_INT 101
37724: PUSH
37725: LD_INT 102
37727: PUSH
37728: LD_INT 103
37730: PUSH
37731: LD_INT 104
37733: PUSH
37734: LD_INT 105
37736: PUSH
37737: LD_INT 106
37739: PUSH
37740: LD_INT 107
37742: PUSH
37743: LD_INT 108
37745: PUSH
37746: LD_INT 109
37748: PUSH
37749: LD_INT 110
37751: PUSH
37752: LD_INT 111
37754: PUSH
37755: LD_INT 112
37757: PUSH
37758: LD_INT 113
37760: PUSH
37761: LD_INT 114
37763: PUSH
37764: LD_INT 116
37766: PUSH
37767: LD_INT 117
37769: PUSH
37770: LD_INT 118
37772: PUSH
37773: EMPTY
37774: LIST
37775: LIST
37776: LIST
37777: LIST
37778: LIST
37779: LIST
37780: LIST
37781: LIST
37782: LIST
37783: LIST
37784: LIST
37785: LIST
37786: LIST
37787: LIST
37788: LIST
37789: LIST
37790: LIST
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: ST_TO_ADDR
37796: GO 39251
37798: LD_INT 13
37800: DOUBLE
37801: EQUAL
37802: IFTRUE 37806
37804: GO 38014
37806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37807: LD_ADDR_VAR 0 2
37811: PUSH
37812: LD_INT 1
37814: PUSH
37815: LD_INT 2
37817: PUSH
37818: LD_INT 3
37820: PUSH
37821: LD_INT 4
37823: PUSH
37824: LD_INT 5
37826: PUSH
37827: LD_INT 8
37829: PUSH
37830: LD_INT 9
37832: PUSH
37833: LD_INT 10
37835: PUSH
37836: LD_INT 11
37838: PUSH
37839: LD_INT 12
37841: PUSH
37842: LD_INT 14
37844: PUSH
37845: LD_INT 15
37847: PUSH
37848: LD_INT 16
37850: PUSH
37851: LD_INT 17
37853: PUSH
37854: LD_INT 18
37856: PUSH
37857: LD_INT 19
37859: PUSH
37860: LD_INT 20
37862: PUSH
37863: LD_INT 21
37865: PUSH
37866: LD_INT 22
37868: PUSH
37869: LD_INT 23
37871: PUSH
37872: LD_INT 24
37874: PUSH
37875: LD_INT 25
37877: PUSH
37878: LD_INT 26
37880: PUSH
37881: LD_INT 27
37883: PUSH
37884: LD_INT 28
37886: PUSH
37887: LD_INT 30
37889: PUSH
37890: LD_INT 31
37892: PUSH
37893: LD_INT 32
37895: PUSH
37896: LD_INT 33
37898: PUSH
37899: LD_INT 34
37901: PUSH
37902: LD_INT 36
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 101
37940: PUSH
37941: LD_INT 102
37943: PUSH
37944: LD_INT 103
37946: PUSH
37947: LD_INT 104
37949: PUSH
37950: LD_INT 105
37952: PUSH
37953: LD_INT 106
37955: PUSH
37956: LD_INT 107
37958: PUSH
37959: LD_INT 108
37961: PUSH
37962: LD_INT 109
37964: PUSH
37965: LD_INT 110
37967: PUSH
37968: LD_INT 111
37970: PUSH
37971: LD_INT 112
37973: PUSH
37974: LD_INT 113
37976: PUSH
37977: LD_INT 114
37979: PUSH
37980: LD_INT 116
37982: PUSH
37983: LD_INT 117
37985: PUSH
37986: LD_INT 118
37988: PUSH
37989: EMPTY
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: ST_TO_ADDR
38012: GO 39251
38014: LD_INT 14
38016: DOUBLE
38017: EQUAL
38018: IFTRUE 38022
38020: GO 38246
38022: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
38023: LD_ADDR_VAR 0 2
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: LD_INT 2
38033: PUSH
38034: LD_INT 3
38036: PUSH
38037: LD_INT 4
38039: PUSH
38040: LD_INT 5
38042: PUSH
38043: LD_INT 6
38045: PUSH
38046: LD_INT 7
38048: PUSH
38049: LD_INT 8
38051: PUSH
38052: LD_INT 9
38054: PUSH
38055: LD_INT 10
38057: PUSH
38058: LD_INT 11
38060: PUSH
38061: LD_INT 12
38063: PUSH
38064: LD_INT 13
38066: PUSH
38067: LD_INT 14
38069: PUSH
38070: LD_INT 15
38072: PUSH
38073: LD_INT 16
38075: PUSH
38076: LD_INT 17
38078: PUSH
38079: LD_INT 18
38081: PUSH
38082: LD_INT 19
38084: PUSH
38085: LD_INT 20
38087: PUSH
38088: LD_INT 21
38090: PUSH
38091: LD_INT 22
38093: PUSH
38094: LD_INT 23
38096: PUSH
38097: LD_INT 24
38099: PUSH
38100: LD_INT 25
38102: PUSH
38103: LD_INT 26
38105: PUSH
38106: LD_INT 27
38108: PUSH
38109: LD_INT 28
38111: PUSH
38112: LD_INT 29
38114: PUSH
38115: LD_INT 30
38117: PUSH
38118: LD_INT 31
38120: PUSH
38121: LD_INT 32
38123: PUSH
38124: LD_INT 33
38126: PUSH
38127: LD_INT 34
38129: PUSH
38130: LD_INT 36
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 101
38172: PUSH
38173: LD_INT 102
38175: PUSH
38176: LD_INT 103
38178: PUSH
38179: LD_INT 104
38181: PUSH
38182: LD_INT 105
38184: PUSH
38185: LD_INT 106
38187: PUSH
38188: LD_INT 107
38190: PUSH
38191: LD_INT 108
38193: PUSH
38194: LD_INT 109
38196: PUSH
38197: LD_INT 110
38199: PUSH
38200: LD_INT 111
38202: PUSH
38203: LD_INT 112
38205: PUSH
38206: LD_INT 113
38208: PUSH
38209: LD_INT 114
38211: PUSH
38212: LD_INT 116
38214: PUSH
38215: LD_INT 117
38217: PUSH
38218: LD_INT 118
38220: PUSH
38221: EMPTY
38222: LIST
38223: LIST
38224: LIST
38225: LIST
38226: LIST
38227: LIST
38228: LIST
38229: LIST
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: ST_TO_ADDR
38244: GO 39251
38246: LD_INT 15
38248: DOUBLE
38249: EQUAL
38250: IFTRUE 38254
38252: GO 38478
38254: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
38255: LD_ADDR_VAR 0 2
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: LD_INT 2
38265: PUSH
38266: LD_INT 3
38268: PUSH
38269: LD_INT 4
38271: PUSH
38272: LD_INT 5
38274: PUSH
38275: LD_INT 6
38277: PUSH
38278: LD_INT 7
38280: PUSH
38281: LD_INT 8
38283: PUSH
38284: LD_INT 9
38286: PUSH
38287: LD_INT 10
38289: PUSH
38290: LD_INT 11
38292: PUSH
38293: LD_INT 12
38295: PUSH
38296: LD_INT 13
38298: PUSH
38299: LD_INT 14
38301: PUSH
38302: LD_INT 15
38304: PUSH
38305: LD_INT 16
38307: PUSH
38308: LD_INT 17
38310: PUSH
38311: LD_INT 18
38313: PUSH
38314: LD_INT 19
38316: PUSH
38317: LD_INT 20
38319: PUSH
38320: LD_INT 21
38322: PUSH
38323: LD_INT 22
38325: PUSH
38326: LD_INT 23
38328: PUSH
38329: LD_INT 24
38331: PUSH
38332: LD_INT 25
38334: PUSH
38335: LD_INT 26
38337: PUSH
38338: LD_INT 27
38340: PUSH
38341: LD_INT 28
38343: PUSH
38344: LD_INT 29
38346: PUSH
38347: LD_INT 30
38349: PUSH
38350: LD_INT 31
38352: PUSH
38353: LD_INT 32
38355: PUSH
38356: LD_INT 33
38358: PUSH
38359: LD_INT 34
38361: PUSH
38362: LD_INT 36
38364: PUSH
38365: EMPTY
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: LIST
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 101
38404: PUSH
38405: LD_INT 102
38407: PUSH
38408: LD_INT 103
38410: PUSH
38411: LD_INT 104
38413: PUSH
38414: LD_INT 105
38416: PUSH
38417: LD_INT 106
38419: PUSH
38420: LD_INT 107
38422: PUSH
38423: LD_INT 108
38425: PUSH
38426: LD_INT 109
38428: PUSH
38429: LD_INT 110
38431: PUSH
38432: LD_INT 111
38434: PUSH
38435: LD_INT 112
38437: PUSH
38438: LD_INT 113
38440: PUSH
38441: LD_INT 114
38443: PUSH
38444: LD_INT 116
38446: PUSH
38447: LD_INT 117
38449: PUSH
38450: LD_INT 118
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: ST_TO_ADDR
38476: GO 39251
38478: LD_INT 16
38480: DOUBLE
38481: EQUAL
38482: IFTRUE 38486
38484: GO 38622
38486: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38487: LD_ADDR_VAR 0 2
38491: PUSH
38492: LD_INT 2
38494: PUSH
38495: LD_INT 4
38497: PUSH
38498: LD_INT 5
38500: PUSH
38501: LD_INT 7
38503: PUSH
38504: LD_INT 11
38506: PUSH
38507: LD_INT 12
38509: PUSH
38510: LD_INT 15
38512: PUSH
38513: LD_INT 16
38515: PUSH
38516: LD_INT 20
38518: PUSH
38519: LD_INT 21
38521: PUSH
38522: LD_INT 22
38524: PUSH
38525: LD_INT 23
38527: PUSH
38528: LD_INT 25
38530: PUSH
38531: LD_INT 26
38533: PUSH
38534: LD_INT 30
38536: PUSH
38537: LD_INT 31
38539: PUSH
38540: LD_INT 32
38542: PUSH
38543: LD_INT 33
38545: PUSH
38546: LD_INT 34
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: PUSH
38570: LD_INT 101
38572: PUSH
38573: LD_INT 102
38575: PUSH
38576: LD_INT 103
38578: PUSH
38579: LD_INT 106
38581: PUSH
38582: LD_INT 108
38584: PUSH
38585: LD_INT 112
38587: PUSH
38588: LD_INT 113
38590: PUSH
38591: LD_INT 114
38593: PUSH
38594: LD_INT 116
38596: PUSH
38597: LD_INT 117
38599: PUSH
38600: LD_INT 118
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: LIST
38607: LIST
38608: LIST
38609: LIST
38610: LIST
38611: LIST
38612: LIST
38613: LIST
38614: LIST
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: ST_TO_ADDR
38620: GO 39251
38622: LD_INT 17
38624: DOUBLE
38625: EQUAL
38626: IFTRUE 38630
38628: GO 38854
38630: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38631: LD_ADDR_VAR 0 2
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 2
38641: PUSH
38642: LD_INT 3
38644: PUSH
38645: LD_INT 4
38647: PUSH
38648: LD_INT 5
38650: PUSH
38651: LD_INT 6
38653: PUSH
38654: LD_INT 7
38656: PUSH
38657: LD_INT 8
38659: PUSH
38660: LD_INT 9
38662: PUSH
38663: LD_INT 10
38665: PUSH
38666: LD_INT 11
38668: PUSH
38669: LD_INT 12
38671: PUSH
38672: LD_INT 13
38674: PUSH
38675: LD_INT 14
38677: PUSH
38678: LD_INT 15
38680: PUSH
38681: LD_INT 16
38683: PUSH
38684: LD_INT 17
38686: PUSH
38687: LD_INT 18
38689: PUSH
38690: LD_INT 19
38692: PUSH
38693: LD_INT 20
38695: PUSH
38696: LD_INT 21
38698: PUSH
38699: LD_INT 22
38701: PUSH
38702: LD_INT 23
38704: PUSH
38705: LD_INT 24
38707: PUSH
38708: LD_INT 25
38710: PUSH
38711: LD_INT 26
38713: PUSH
38714: LD_INT 27
38716: PUSH
38717: LD_INT 28
38719: PUSH
38720: LD_INT 29
38722: PUSH
38723: LD_INT 30
38725: PUSH
38726: LD_INT 31
38728: PUSH
38729: LD_INT 32
38731: PUSH
38732: LD_INT 33
38734: PUSH
38735: LD_INT 34
38737: PUSH
38738: LD_INT 36
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: LIST
38755: LIST
38756: LIST
38757: LIST
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 101
38780: PUSH
38781: LD_INT 102
38783: PUSH
38784: LD_INT 103
38786: PUSH
38787: LD_INT 104
38789: PUSH
38790: LD_INT 105
38792: PUSH
38793: LD_INT 106
38795: PUSH
38796: LD_INT 107
38798: PUSH
38799: LD_INT 108
38801: PUSH
38802: LD_INT 109
38804: PUSH
38805: LD_INT 110
38807: PUSH
38808: LD_INT 111
38810: PUSH
38811: LD_INT 112
38813: PUSH
38814: LD_INT 113
38816: PUSH
38817: LD_INT 114
38819: PUSH
38820: LD_INT 116
38822: PUSH
38823: LD_INT 117
38825: PUSH
38826: LD_INT 118
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: ST_TO_ADDR
38852: GO 39251
38854: LD_INT 18
38856: DOUBLE
38857: EQUAL
38858: IFTRUE 38862
38860: GO 39010
38862: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38863: LD_ADDR_VAR 0 2
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: LD_INT 4
38873: PUSH
38874: LD_INT 5
38876: PUSH
38877: LD_INT 7
38879: PUSH
38880: LD_INT 11
38882: PUSH
38883: LD_INT 12
38885: PUSH
38886: LD_INT 15
38888: PUSH
38889: LD_INT 16
38891: PUSH
38892: LD_INT 20
38894: PUSH
38895: LD_INT 21
38897: PUSH
38898: LD_INT 22
38900: PUSH
38901: LD_INT 23
38903: PUSH
38904: LD_INT 25
38906: PUSH
38907: LD_INT 26
38909: PUSH
38910: LD_INT 30
38912: PUSH
38913: LD_INT 31
38915: PUSH
38916: LD_INT 32
38918: PUSH
38919: LD_INT 33
38921: PUSH
38922: LD_INT 34
38924: PUSH
38925: LD_INT 35
38927: PUSH
38928: LD_INT 36
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: LIST
38944: LIST
38945: LIST
38946: LIST
38947: LIST
38948: LIST
38949: LIST
38950: LIST
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 101
38956: PUSH
38957: LD_INT 102
38959: PUSH
38960: LD_INT 103
38962: PUSH
38963: LD_INT 106
38965: PUSH
38966: LD_INT 108
38968: PUSH
38969: LD_INT 112
38971: PUSH
38972: LD_INT 113
38974: PUSH
38975: LD_INT 114
38977: PUSH
38978: LD_INT 115
38980: PUSH
38981: LD_INT 116
38983: PUSH
38984: LD_INT 117
38986: PUSH
38987: LD_INT 118
38989: PUSH
38990: EMPTY
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: ST_TO_ADDR
39008: GO 39251
39010: LD_INT 19
39012: DOUBLE
39013: EQUAL
39014: IFTRUE 39018
39016: GO 39250
39018: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
39019: LD_ADDR_VAR 0 2
39023: PUSH
39024: LD_INT 1
39026: PUSH
39027: LD_INT 2
39029: PUSH
39030: LD_INT 3
39032: PUSH
39033: LD_INT 4
39035: PUSH
39036: LD_INT 5
39038: PUSH
39039: LD_INT 6
39041: PUSH
39042: LD_INT 7
39044: PUSH
39045: LD_INT 8
39047: PUSH
39048: LD_INT 9
39050: PUSH
39051: LD_INT 10
39053: PUSH
39054: LD_INT 11
39056: PUSH
39057: LD_INT 12
39059: PUSH
39060: LD_INT 13
39062: PUSH
39063: LD_INT 14
39065: PUSH
39066: LD_INT 15
39068: PUSH
39069: LD_INT 16
39071: PUSH
39072: LD_INT 17
39074: PUSH
39075: LD_INT 18
39077: PUSH
39078: LD_INT 19
39080: PUSH
39081: LD_INT 20
39083: PUSH
39084: LD_INT 21
39086: PUSH
39087: LD_INT 22
39089: PUSH
39090: LD_INT 23
39092: PUSH
39093: LD_INT 24
39095: PUSH
39096: LD_INT 25
39098: PUSH
39099: LD_INT 26
39101: PUSH
39102: LD_INT 27
39104: PUSH
39105: LD_INT 28
39107: PUSH
39108: LD_INT 29
39110: PUSH
39111: LD_INT 30
39113: PUSH
39114: LD_INT 31
39116: PUSH
39117: LD_INT 32
39119: PUSH
39120: LD_INT 33
39122: PUSH
39123: LD_INT 34
39125: PUSH
39126: LD_INT 35
39128: PUSH
39129: LD_INT 36
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 101
39172: PUSH
39173: LD_INT 102
39175: PUSH
39176: LD_INT 103
39178: PUSH
39179: LD_INT 104
39181: PUSH
39182: LD_INT 105
39184: PUSH
39185: LD_INT 106
39187: PUSH
39188: LD_INT 107
39190: PUSH
39191: LD_INT 108
39193: PUSH
39194: LD_INT 109
39196: PUSH
39197: LD_INT 110
39199: PUSH
39200: LD_INT 111
39202: PUSH
39203: LD_INT 112
39205: PUSH
39206: LD_INT 113
39208: PUSH
39209: LD_INT 114
39211: PUSH
39212: LD_INT 115
39214: PUSH
39215: LD_INT 116
39217: PUSH
39218: LD_INT 117
39220: PUSH
39221: LD_INT 118
39223: PUSH
39224: EMPTY
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: LIST
39240: LIST
39241: LIST
39242: LIST
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: ST_TO_ADDR
39248: GO 39251
39250: POP
// end else
39251: GO 39482
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
39253: LD_ADDR_VAR 0 2
39257: PUSH
39258: LD_INT 1
39260: PUSH
39261: LD_INT 2
39263: PUSH
39264: LD_INT 3
39266: PUSH
39267: LD_INT 4
39269: PUSH
39270: LD_INT 5
39272: PUSH
39273: LD_INT 6
39275: PUSH
39276: LD_INT 7
39278: PUSH
39279: LD_INT 8
39281: PUSH
39282: LD_INT 9
39284: PUSH
39285: LD_INT 10
39287: PUSH
39288: LD_INT 11
39290: PUSH
39291: LD_INT 12
39293: PUSH
39294: LD_INT 13
39296: PUSH
39297: LD_INT 14
39299: PUSH
39300: LD_INT 15
39302: PUSH
39303: LD_INT 16
39305: PUSH
39306: LD_INT 17
39308: PUSH
39309: LD_INT 18
39311: PUSH
39312: LD_INT 19
39314: PUSH
39315: LD_INT 20
39317: PUSH
39318: LD_INT 21
39320: PUSH
39321: LD_INT 22
39323: PUSH
39324: LD_INT 23
39326: PUSH
39327: LD_INT 24
39329: PUSH
39330: LD_INT 25
39332: PUSH
39333: LD_INT 26
39335: PUSH
39336: LD_INT 27
39338: PUSH
39339: LD_INT 28
39341: PUSH
39342: LD_INT 29
39344: PUSH
39345: LD_INT 30
39347: PUSH
39348: LD_INT 31
39350: PUSH
39351: LD_INT 32
39353: PUSH
39354: LD_INT 33
39356: PUSH
39357: LD_INT 34
39359: PUSH
39360: LD_INT 35
39362: PUSH
39363: LD_INT 36
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: LIST
39373: LIST
39374: LIST
39375: LIST
39376: LIST
39377: LIST
39378: LIST
39379: LIST
39380: LIST
39381: LIST
39382: LIST
39383: LIST
39384: LIST
39385: LIST
39386: LIST
39387: LIST
39388: LIST
39389: LIST
39390: LIST
39391: LIST
39392: LIST
39393: LIST
39394: LIST
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 101
39406: PUSH
39407: LD_INT 102
39409: PUSH
39410: LD_INT 103
39412: PUSH
39413: LD_INT 104
39415: PUSH
39416: LD_INT 105
39418: PUSH
39419: LD_INT 106
39421: PUSH
39422: LD_INT 107
39424: PUSH
39425: LD_INT 108
39427: PUSH
39428: LD_INT 109
39430: PUSH
39431: LD_INT 110
39433: PUSH
39434: LD_INT 111
39436: PUSH
39437: LD_INT 112
39439: PUSH
39440: LD_INT 113
39442: PUSH
39443: LD_INT 114
39445: PUSH
39446: LD_INT 115
39448: PUSH
39449: LD_INT 116
39451: PUSH
39452: LD_INT 117
39454: PUSH
39455: LD_INT 118
39457: PUSH
39458: EMPTY
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: LIST
39470: LIST
39471: LIST
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: ST_TO_ADDR
// if result then
39482: LD_VAR 0 2
39486: IFFALSE 40272
// begin normal :=  ;
39488: LD_ADDR_VAR 0 5
39492: PUSH
39493: LD_STRING 
39495: ST_TO_ADDR
// hardcore :=  ;
39496: LD_ADDR_VAR 0 6
39500: PUSH
39501: LD_STRING 
39503: ST_TO_ADDR
// active :=  ;
39504: LD_ADDR_VAR 0 7
39508: PUSH
39509: LD_STRING 
39511: ST_TO_ADDR
// for i = 1 to normalCounter do
39512: LD_ADDR_VAR 0 8
39516: PUSH
39517: DOUBLE
39518: LD_INT 1
39520: DEC
39521: ST_TO_ADDR
39522: LD_EXP 88
39526: PUSH
39527: FOR_TO
39528: IFFALSE 39629
// begin tmp := 0 ;
39530: LD_ADDR_VAR 0 3
39534: PUSH
39535: LD_STRING 0
39537: ST_TO_ADDR
// if result [ 1 ] then
39538: LD_VAR 0 2
39542: PUSH
39543: LD_INT 1
39545: ARRAY
39546: IFFALSE 39611
// if result [ 1 ] [ 1 ] = i then
39548: LD_VAR 0 2
39552: PUSH
39553: LD_INT 1
39555: ARRAY
39556: PUSH
39557: LD_INT 1
39559: ARRAY
39560: PUSH
39561: LD_VAR 0 8
39565: EQUAL
39566: IFFALSE 39611
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39568: LD_ADDR_VAR 0 2
39572: PUSH
39573: LD_VAR 0 2
39577: PPUSH
39578: LD_INT 1
39580: PPUSH
39581: LD_VAR 0 2
39585: PUSH
39586: LD_INT 1
39588: ARRAY
39589: PPUSH
39590: LD_INT 1
39592: PPUSH
39593: CALL_OW 3
39597: PPUSH
39598: CALL_OW 1
39602: ST_TO_ADDR
// tmp := 1 ;
39603: LD_ADDR_VAR 0 3
39607: PUSH
39608: LD_STRING 1
39610: ST_TO_ADDR
// end ; normal := normal & tmp ;
39611: LD_ADDR_VAR 0 5
39615: PUSH
39616: LD_VAR 0 5
39620: PUSH
39621: LD_VAR 0 3
39625: STR
39626: ST_TO_ADDR
// end ;
39627: GO 39527
39629: POP
39630: POP
// for i = 1 to hardcoreCounter do
39631: LD_ADDR_VAR 0 8
39635: PUSH
39636: DOUBLE
39637: LD_INT 1
39639: DEC
39640: ST_TO_ADDR
39641: LD_EXP 89
39645: PUSH
39646: FOR_TO
39647: IFFALSE 39752
// begin tmp := 0 ;
39649: LD_ADDR_VAR 0 3
39653: PUSH
39654: LD_STRING 0
39656: ST_TO_ADDR
// if result [ 2 ] then
39657: LD_VAR 0 2
39661: PUSH
39662: LD_INT 2
39664: ARRAY
39665: IFFALSE 39734
// if result [ 2 ] [ 1 ] = 100 + i then
39667: LD_VAR 0 2
39671: PUSH
39672: LD_INT 2
39674: ARRAY
39675: PUSH
39676: LD_INT 1
39678: ARRAY
39679: PUSH
39680: LD_INT 100
39682: PUSH
39683: LD_VAR 0 8
39687: PLUS
39688: EQUAL
39689: IFFALSE 39734
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39691: LD_ADDR_VAR 0 2
39695: PUSH
39696: LD_VAR 0 2
39700: PPUSH
39701: LD_INT 2
39703: PPUSH
39704: LD_VAR 0 2
39708: PUSH
39709: LD_INT 2
39711: ARRAY
39712: PPUSH
39713: LD_INT 1
39715: PPUSH
39716: CALL_OW 3
39720: PPUSH
39721: CALL_OW 1
39725: ST_TO_ADDR
// tmp := 1 ;
39726: LD_ADDR_VAR 0 3
39730: PUSH
39731: LD_STRING 1
39733: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39734: LD_ADDR_VAR 0 6
39738: PUSH
39739: LD_VAR 0 6
39743: PUSH
39744: LD_VAR 0 3
39748: STR
39749: ST_TO_ADDR
// end ;
39750: GO 39646
39752: POP
39753: POP
// if isGameLoad then
39754: LD_VAR 0 1
39758: IFFALSE 40233
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39760: LD_ADDR_VAR 0 4
39764: PUSH
39765: LD_EXP 92
39769: PUSH
39770: LD_EXP 91
39774: PUSH
39775: LD_EXP 93
39779: PUSH
39780: LD_EXP 90
39784: PUSH
39785: LD_EXP 94
39789: PUSH
39790: LD_EXP 95
39794: PUSH
39795: LD_EXP 96
39799: PUSH
39800: LD_EXP 97
39804: PUSH
39805: LD_EXP 98
39809: PUSH
39810: LD_EXP 99
39814: PUSH
39815: LD_EXP 100
39819: PUSH
39820: LD_EXP 101
39824: PUSH
39825: LD_EXP 102
39829: PUSH
39830: LD_EXP 103
39834: PUSH
39835: LD_EXP 111
39839: PUSH
39840: LD_EXP 112
39844: PUSH
39845: LD_EXP 113
39849: PUSH
39850: LD_EXP 114
39854: PUSH
39855: LD_EXP 116
39859: PUSH
39860: LD_EXP 117
39864: PUSH
39865: LD_EXP 118
39869: PUSH
39870: LD_EXP 121
39874: PUSH
39875: LD_EXP 123
39879: PUSH
39880: LD_EXP 124
39884: PUSH
39885: LD_EXP 125
39889: PUSH
39890: LD_EXP 127
39894: PUSH
39895: LD_EXP 128
39899: PUSH
39900: LD_EXP 131
39904: PUSH
39905: LD_EXP 132
39909: PUSH
39910: LD_EXP 133
39914: PUSH
39915: LD_EXP 134
39919: PUSH
39920: LD_EXP 135
39924: PUSH
39925: LD_EXP 136
39929: PUSH
39930: LD_EXP 137
39934: PUSH
39935: LD_EXP 138
39939: PUSH
39940: LD_EXP 139
39944: PUSH
39945: LD_EXP 104
39949: PUSH
39950: LD_EXP 105
39954: PUSH
39955: LD_EXP 108
39959: PUSH
39960: LD_EXP 109
39964: PUSH
39965: LD_EXP 110
39969: PUSH
39970: LD_EXP 106
39974: PUSH
39975: LD_EXP 107
39979: PUSH
39980: LD_EXP 115
39984: PUSH
39985: LD_EXP 119
39989: PUSH
39990: LD_EXP 120
39994: PUSH
39995: LD_EXP 122
39999: PUSH
40000: LD_EXP 126
40004: PUSH
40005: LD_EXP 129
40009: PUSH
40010: LD_EXP 130
40014: PUSH
40015: LD_EXP 140
40019: PUSH
40020: LD_EXP 141
40024: PUSH
40025: LD_EXP 142
40029: PUSH
40030: LD_EXP 143
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: LIST
40064: LIST
40065: LIST
40066: LIST
40067: LIST
40068: LIST
40069: LIST
40070: LIST
40071: LIST
40072: LIST
40073: LIST
40074: LIST
40075: LIST
40076: LIST
40077: LIST
40078: LIST
40079: LIST
40080: LIST
40081: LIST
40082: LIST
40083: LIST
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: ST_TO_ADDR
// tmp :=  ;
40091: LD_ADDR_VAR 0 3
40095: PUSH
40096: LD_STRING 
40098: ST_TO_ADDR
// for i = 1 to normalCounter do
40099: LD_ADDR_VAR 0 8
40103: PUSH
40104: DOUBLE
40105: LD_INT 1
40107: DEC
40108: ST_TO_ADDR
40109: LD_EXP 88
40113: PUSH
40114: FOR_TO
40115: IFFALSE 40151
// begin if flags [ i ] then
40117: LD_VAR 0 4
40121: PUSH
40122: LD_VAR 0 8
40126: ARRAY
40127: IFFALSE 40149
// tmp := tmp & i & ; ;
40129: LD_ADDR_VAR 0 3
40133: PUSH
40134: LD_VAR 0 3
40138: PUSH
40139: LD_VAR 0 8
40143: STR
40144: PUSH
40145: LD_STRING ;
40147: STR
40148: ST_TO_ADDR
// end ;
40149: GO 40114
40151: POP
40152: POP
// for i = 1 to hardcoreCounter do
40153: LD_ADDR_VAR 0 8
40157: PUSH
40158: DOUBLE
40159: LD_INT 1
40161: DEC
40162: ST_TO_ADDR
40163: LD_EXP 89
40167: PUSH
40168: FOR_TO
40169: IFFALSE 40215
// begin if flags [ normalCounter + i ] then
40171: LD_VAR 0 4
40175: PUSH
40176: LD_EXP 88
40180: PUSH
40181: LD_VAR 0 8
40185: PLUS
40186: ARRAY
40187: IFFALSE 40213
// tmp := tmp & ( 100 + i ) & ; ;
40189: LD_ADDR_VAR 0 3
40193: PUSH
40194: LD_VAR 0 3
40198: PUSH
40199: LD_INT 100
40201: PUSH
40202: LD_VAR 0 8
40206: PLUS
40207: STR
40208: PUSH
40209: LD_STRING ;
40211: STR
40212: ST_TO_ADDR
// end ;
40213: GO 40168
40215: POP
40216: POP
// if tmp then
40217: LD_VAR 0 3
40221: IFFALSE 40233
// active := tmp ;
40223: LD_ADDR_VAR 0 7
40227: PUSH
40228: LD_VAR 0 3
40232: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
40233: LD_STRING getStreamItemsFromMission("
40235: PUSH
40236: LD_VAR 0 5
40240: STR
40241: PUSH
40242: LD_STRING ","
40244: STR
40245: PUSH
40246: LD_VAR 0 6
40250: STR
40251: PUSH
40252: LD_STRING ","
40254: STR
40255: PUSH
40256: LD_VAR 0 7
40260: STR
40261: PUSH
40262: LD_STRING ")
40264: STR
40265: PPUSH
40266: CALL_OW 559
// end else
40270: GO 40279
// ToLua ( getStreamItemsFromMission("","","") ) ;
40272: LD_STRING getStreamItemsFromMission("","","")
40274: PPUSH
40275: CALL_OW 559
// end ;
40279: LD_VAR 0 2
40283: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
40284: LD_EXP 87
40288: IFFALSE 40296
40290: PUSH
40291: LD_EXP 92
40295: AND
40296: IFFALSE 40420
40298: GO 40300
40300: DISABLE
40301: LD_INT 0
40303: PPUSH
40304: PPUSH
// begin enable ;
40305: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
40306: LD_ADDR_VAR 0 2
40310: PUSH
40311: LD_INT 22
40313: PUSH
40314: LD_OWVAR 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 2
40325: PUSH
40326: LD_INT 34
40328: PUSH
40329: LD_INT 7
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 34
40338: PUSH
40339: LD_INT 45
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 34
40348: PUSH
40349: LD_INT 28
40351: PUSH
40352: EMPTY
40353: LIST
40354: LIST
40355: PUSH
40356: LD_INT 34
40358: PUSH
40359: LD_INT 47
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PPUSH
40377: CALL_OW 69
40381: ST_TO_ADDR
// if not tmp then
40382: LD_VAR 0 2
40386: NOT
40387: IFFALSE 40391
// exit ;
40389: GO 40420
// for i in tmp do
40391: LD_ADDR_VAR 0 1
40395: PUSH
40396: LD_VAR 0 2
40400: PUSH
40401: FOR_IN
40402: IFFALSE 40418
// begin SetLives ( i , 0 ) ;
40404: LD_VAR 0 1
40408: PPUSH
40409: LD_INT 0
40411: PPUSH
40412: CALL_OW 234
// end ;
40416: GO 40401
40418: POP
40419: POP
// end ;
40420: PPOPN 2
40422: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40423: LD_EXP 87
40427: IFFALSE 40435
40429: PUSH
40430: LD_EXP 93
40434: AND
40435: IFFALSE 40519
40437: GO 40439
40439: DISABLE
40440: LD_INT 0
40442: PPUSH
40443: PPUSH
// begin enable ;
40444: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40445: LD_ADDR_VAR 0 2
40449: PUSH
40450: LD_INT 22
40452: PUSH
40453: LD_OWVAR 2
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 32
40464: PUSH
40465: LD_INT 3
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: EMPTY
40473: LIST
40474: LIST
40475: PPUSH
40476: CALL_OW 69
40480: ST_TO_ADDR
// if not tmp then
40481: LD_VAR 0 2
40485: NOT
40486: IFFALSE 40490
// exit ;
40488: GO 40519
// for i in tmp do
40490: LD_ADDR_VAR 0 1
40494: PUSH
40495: LD_VAR 0 2
40499: PUSH
40500: FOR_IN
40501: IFFALSE 40517
// begin SetLives ( i , 0 ) ;
40503: LD_VAR 0 1
40507: PPUSH
40508: LD_INT 0
40510: PPUSH
40511: CALL_OW 234
// end ;
40515: GO 40500
40517: POP
40518: POP
// end ;
40519: PPOPN 2
40521: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40522: LD_EXP 87
40526: IFFALSE 40534
40528: PUSH
40529: LD_EXP 90
40533: AND
40534: IFFALSE 40627
40536: GO 40538
40538: DISABLE
40539: LD_INT 0
40541: PPUSH
// begin enable ;
40542: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40543: LD_ADDR_VAR 0 1
40547: PUSH
40548: LD_INT 22
40550: PUSH
40551: LD_OWVAR 2
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 2
40562: PUSH
40563: LD_INT 25
40565: PUSH
40566: LD_INT 5
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 25
40575: PUSH
40576: LD_INT 9
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 25
40585: PUSH
40586: LD_INT 8
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PPUSH
40603: CALL_OW 69
40607: PUSH
40608: FOR_IN
40609: IFFALSE 40625
// begin SetClass ( i , 1 ) ;
40611: LD_VAR 0 1
40615: PPUSH
40616: LD_INT 1
40618: PPUSH
40619: CALL_OW 336
// end ;
40623: GO 40608
40625: POP
40626: POP
// end ;
40627: PPOPN 1
40629: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40630: LD_EXP 87
40634: IFFALSE 40642
40636: PUSH
40637: LD_EXP 91
40641: AND
40642: IFFALSE 40654
40644: PUSH
40645: LD_OWVAR 65
40649: PUSH
40650: LD_INT 7
40652: LESS
40653: AND
40654: IFFALSE 40668
40656: GO 40658
40658: DISABLE
// begin enable ;
40659: ENABLE
// game_speed := 7 ;
40660: LD_ADDR_OWVAR 65
40664: PUSH
40665: LD_INT 7
40667: ST_TO_ADDR
// end ;
40668: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40669: LD_EXP 87
40673: IFFALSE 40681
40675: PUSH
40676: LD_EXP 94
40680: AND
40681: IFFALSE 40883
40683: GO 40685
40685: DISABLE
40686: LD_INT 0
40688: PPUSH
40689: PPUSH
40690: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40691: LD_ADDR_VAR 0 3
40695: PUSH
40696: LD_INT 81
40698: PUSH
40699: LD_OWVAR 2
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 21
40710: PUSH
40711: LD_INT 1
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PPUSH
40722: CALL_OW 69
40726: ST_TO_ADDR
// if not tmp then
40727: LD_VAR 0 3
40731: NOT
40732: IFFALSE 40736
// exit ;
40734: GO 40883
// if tmp > 5 then
40736: LD_VAR 0 3
40740: PUSH
40741: LD_INT 5
40743: GREATER
40744: IFFALSE 40756
// k := 5 else
40746: LD_ADDR_VAR 0 2
40750: PUSH
40751: LD_INT 5
40753: ST_TO_ADDR
40754: GO 40766
// k := tmp ;
40756: LD_ADDR_VAR 0 2
40760: PUSH
40761: LD_VAR 0 3
40765: ST_TO_ADDR
// for i := 1 to k do
40766: LD_ADDR_VAR 0 1
40770: PUSH
40771: DOUBLE
40772: LD_INT 1
40774: DEC
40775: ST_TO_ADDR
40776: LD_VAR 0 2
40780: PUSH
40781: FOR_TO
40782: IFFALSE 40881
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40784: LD_VAR 0 3
40788: PUSH
40789: LD_VAR 0 1
40793: ARRAY
40794: PPUSH
40795: LD_VAR 0 1
40799: PUSH
40800: LD_INT 4
40802: MOD
40803: PUSH
40804: LD_INT 1
40806: PLUS
40807: PPUSH
40808: CALL_OW 259
40812: PUSH
40813: LD_INT 10
40815: LESS
40816: IFFALSE 40879
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40818: LD_VAR 0 3
40822: PUSH
40823: LD_VAR 0 1
40827: ARRAY
40828: PPUSH
40829: LD_VAR 0 1
40833: PUSH
40834: LD_INT 4
40836: MOD
40837: PUSH
40838: LD_INT 1
40840: PLUS
40841: PPUSH
40842: LD_VAR 0 3
40846: PUSH
40847: LD_VAR 0 1
40851: ARRAY
40852: PPUSH
40853: LD_VAR 0 1
40857: PUSH
40858: LD_INT 4
40860: MOD
40861: PUSH
40862: LD_INT 1
40864: PLUS
40865: PPUSH
40866: CALL_OW 259
40870: PUSH
40871: LD_INT 1
40873: PLUS
40874: PPUSH
40875: CALL_OW 237
40879: GO 40781
40881: POP
40882: POP
// end ;
40883: PPOPN 3
40885: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40886: LD_EXP 87
40890: IFFALSE 40898
40892: PUSH
40893: LD_EXP 95
40897: AND
40898: IFFALSE 40918
40900: GO 40902
40902: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40903: LD_INT 4
40905: PPUSH
40906: LD_OWVAR 2
40910: PPUSH
40911: LD_INT 0
40913: PPUSH
40914: CALL_OW 324
40918: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40919: LD_EXP 87
40923: IFFALSE 40931
40925: PUSH
40926: LD_EXP 124
40930: AND
40931: IFFALSE 40951
40933: GO 40935
40935: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40936: LD_INT 19
40938: PPUSH
40939: LD_OWVAR 2
40943: PPUSH
40944: LD_INT 0
40946: PPUSH
40947: CALL_OW 324
40951: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40952: LD_EXP 87
40956: IFFALSE 40964
40958: PUSH
40959: LD_EXP 96
40963: AND
40964: IFFALSE 41066
40966: GO 40968
40968: DISABLE
40969: LD_INT 0
40971: PPUSH
40972: PPUSH
// begin enable ;
40973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40974: LD_ADDR_VAR 0 2
40978: PUSH
40979: LD_INT 22
40981: PUSH
40982: LD_OWVAR 2
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: PUSH
40994: LD_INT 34
40996: PUSH
40997: LD_INT 11
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 34
41006: PUSH
41007: LD_INT 30
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: LIST
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PPUSH
41023: CALL_OW 69
41027: ST_TO_ADDR
// if not tmp then
41028: LD_VAR 0 2
41032: NOT
41033: IFFALSE 41037
// exit ;
41035: GO 41066
// for i in tmp do
41037: LD_ADDR_VAR 0 1
41041: PUSH
41042: LD_VAR 0 2
41046: PUSH
41047: FOR_IN
41048: IFFALSE 41064
// begin SetLives ( i , 0 ) ;
41050: LD_VAR 0 1
41054: PPUSH
41055: LD_INT 0
41057: PPUSH
41058: CALL_OW 234
// end ;
41062: GO 41047
41064: POP
41065: POP
// end ;
41066: PPOPN 2
41068: END
// every 0 0$1 trigger StreamModeActive and sBunker do
41069: LD_EXP 87
41073: IFFALSE 41081
41075: PUSH
41076: LD_EXP 97
41080: AND
41081: IFFALSE 41101
41083: GO 41085
41085: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
41086: LD_INT 32
41088: PPUSH
41089: LD_OWVAR 2
41093: PPUSH
41094: LD_INT 0
41096: PPUSH
41097: CALL_OW 324
41101: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
41102: LD_EXP 87
41106: IFFALSE 41114
41108: PUSH
41109: LD_EXP 98
41113: AND
41114: IFFALSE 41297
41116: GO 41118
41118: DISABLE
41119: LD_INT 0
41121: PPUSH
41122: PPUSH
41123: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
41124: LD_ADDR_VAR 0 2
41128: PUSH
41129: LD_INT 22
41131: PUSH
41132: LD_OWVAR 2
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 33
41143: PUSH
41144: LD_INT 3
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PPUSH
41155: CALL_OW 69
41159: ST_TO_ADDR
// if not tmp then
41160: LD_VAR 0 2
41164: NOT
41165: IFFALSE 41169
// exit ;
41167: GO 41297
// side := 0 ;
41169: LD_ADDR_VAR 0 3
41173: PUSH
41174: LD_INT 0
41176: ST_TO_ADDR
// for i := 1 to 8 do
41177: LD_ADDR_VAR 0 1
41181: PUSH
41182: DOUBLE
41183: LD_INT 1
41185: DEC
41186: ST_TO_ADDR
41187: LD_INT 8
41189: PUSH
41190: FOR_TO
41191: IFFALSE 41241
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
41193: LD_OWVAR 2
41197: PUSH
41198: LD_VAR 0 1
41202: NONEQUAL
41203: IFFALSE 41225
41205: PUSH
41206: LD_OWVAR 2
41210: PPUSH
41211: LD_VAR 0 1
41215: PPUSH
41216: CALL_OW 81
41220: PUSH
41221: LD_INT 2
41223: EQUAL
41224: AND
41225: IFFALSE 41239
// begin side := i ;
41227: LD_ADDR_VAR 0 3
41231: PUSH
41232: LD_VAR 0 1
41236: ST_TO_ADDR
// break ;
41237: GO 41241
// end ;
41239: GO 41190
41241: POP
41242: POP
// if not side then
41243: LD_VAR 0 3
41247: NOT
41248: IFFALSE 41252
// exit ;
41250: GO 41297
// for i := 1 to tmp do
41252: LD_ADDR_VAR 0 1
41256: PUSH
41257: DOUBLE
41258: LD_INT 1
41260: DEC
41261: ST_TO_ADDR
41262: LD_VAR 0 2
41266: PUSH
41267: FOR_TO
41268: IFFALSE 41295
// if Prob ( 60 ) then
41270: LD_INT 60
41272: PPUSH
41273: CALL_OW 13
41277: IFFALSE 41293
// SetSide ( i , side ) ;
41279: LD_VAR 0 1
41283: PPUSH
41284: LD_VAR 0 3
41288: PPUSH
41289: CALL_OW 235
41293: GO 41267
41295: POP
41296: POP
// end ;
41297: PPOPN 3
41299: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
41300: LD_EXP 87
41304: IFFALSE 41312
41306: PUSH
41307: LD_EXP 100
41311: AND
41312: IFFALSE 41431
41314: GO 41316
41316: DISABLE
41317: LD_INT 0
41319: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
41320: LD_ADDR_VAR 0 1
41324: PUSH
41325: LD_INT 22
41327: PUSH
41328: LD_OWVAR 2
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 21
41339: PUSH
41340: LD_INT 1
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 3
41349: PUSH
41350: LD_INT 23
41352: PUSH
41353: LD_INT 0
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: LIST
41368: PPUSH
41369: CALL_OW 69
41373: PUSH
41374: FOR_IN
41375: IFFALSE 41429
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41377: LD_VAR 0 1
41381: PPUSH
41382: CALL_OW 257
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: LD_INT 2
41392: PUSH
41393: LD_INT 3
41395: PUSH
41396: LD_INT 4
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: IN
41405: IFFALSE 41427
// SetClass ( un , rand ( 1 , 4 ) ) ;
41407: LD_VAR 0 1
41411: PPUSH
41412: LD_INT 1
41414: PPUSH
41415: LD_INT 4
41417: PPUSH
41418: CALL_OW 12
41422: PPUSH
41423: CALL_OW 336
41427: GO 41374
41429: POP
41430: POP
// end ;
41431: PPOPN 1
41433: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41434: LD_EXP 87
41438: IFFALSE 41446
41440: PUSH
41441: LD_EXP 99
41445: AND
41446: IFFALSE 41525
41448: GO 41450
41450: DISABLE
41451: LD_INT 0
41453: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41454: LD_ADDR_VAR 0 1
41458: PUSH
41459: LD_INT 22
41461: PUSH
41462: LD_OWVAR 2
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 21
41473: PUSH
41474: LD_INT 3
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PPUSH
41485: CALL_OW 69
41489: ST_TO_ADDR
// if not tmp then
41490: LD_VAR 0 1
41494: NOT
41495: IFFALSE 41499
// exit ;
41497: GO 41525
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41499: LD_VAR 0 1
41503: PUSH
41504: LD_INT 1
41506: PPUSH
41507: LD_VAR 0 1
41511: PPUSH
41512: CALL_OW 12
41516: ARRAY
41517: PPUSH
41518: LD_INT 100
41520: PPUSH
41521: CALL_OW 234
// end ;
41525: PPOPN 1
41527: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41528: LD_EXP 87
41532: IFFALSE 41540
41534: PUSH
41535: LD_EXP 101
41539: AND
41540: IFFALSE 41638
41542: GO 41544
41544: DISABLE
41545: LD_INT 0
41547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41548: LD_ADDR_VAR 0 1
41552: PUSH
41553: LD_INT 22
41555: PUSH
41556: LD_OWVAR 2
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 21
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PPUSH
41579: CALL_OW 69
41583: ST_TO_ADDR
// if not tmp then
41584: LD_VAR 0 1
41588: NOT
41589: IFFALSE 41593
// exit ;
41591: GO 41638
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41593: LD_VAR 0 1
41597: PUSH
41598: LD_INT 1
41600: PPUSH
41601: LD_VAR 0 1
41605: PPUSH
41606: CALL_OW 12
41610: ARRAY
41611: PPUSH
41612: LD_INT 1
41614: PPUSH
41615: LD_INT 4
41617: PPUSH
41618: CALL_OW 12
41622: PPUSH
41623: LD_INT 3000
41625: PPUSH
41626: LD_INT 9000
41628: PPUSH
41629: CALL_OW 12
41633: PPUSH
41634: CALL_OW 492
// end ;
41638: PPOPN 1
41640: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41641: LD_EXP 87
41645: IFFALSE 41653
41647: PUSH
41648: LD_EXP 102
41652: AND
41653: IFFALSE 41673
41655: GO 41657
41657: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41658: LD_INT 1
41660: PPUSH
41661: LD_OWVAR 2
41665: PPUSH
41666: LD_INT 0
41668: PPUSH
41669: CALL_OW 324
41673: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41674: LD_EXP 87
41678: IFFALSE 41686
41680: PUSH
41681: LD_EXP 103
41685: AND
41686: IFFALSE 41769
41688: GO 41690
41690: DISABLE
41691: LD_INT 0
41693: PPUSH
41694: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41695: LD_ADDR_VAR 0 2
41699: PUSH
41700: LD_INT 22
41702: PUSH
41703: LD_OWVAR 2
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 21
41714: PUSH
41715: LD_INT 3
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PPUSH
41726: CALL_OW 69
41730: ST_TO_ADDR
// if not tmp then
41731: LD_VAR 0 2
41735: NOT
41736: IFFALSE 41740
// exit ;
41738: GO 41769
// for i in tmp do
41740: LD_ADDR_VAR 0 1
41744: PUSH
41745: LD_VAR 0 2
41749: PUSH
41750: FOR_IN
41751: IFFALSE 41767
// SetBLevel ( i , 10 ) ;
41753: LD_VAR 0 1
41757: PPUSH
41758: LD_INT 10
41760: PPUSH
41761: CALL_OW 241
41765: GO 41750
41767: POP
41768: POP
// end ;
41769: PPOPN 2
41771: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41772: LD_EXP 87
41776: IFFALSE 41784
41778: PUSH
41779: LD_EXP 104
41783: AND
41784: IFFALSE 41895
41786: GO 41788
41788: DISABLE
41789: LD_INT 0
41791: PPUSH
41792: PPUSH
41793: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41794: LD_ADDR_VAR 0 3
41798: PUSH
41799: LD_INT 22
41801: PUSH
41802: LD_OWVAR 2
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 25
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PPUSH
41825: CALL_OW 69
41829: ST_TO_ADDR
// if not tmp then
41830: LD_VAR 0 3
41834: NOT
41835: IFFALSE 41839
// exit ;
41837: GO 41895
// un := tmp [ rand ( 1 , tmp ) ] ;
41839: LD_ADDR_VAR 0 2
41843: PUSH
41844: LD_VAR 0 3
41848: PUSH
41849: LD_INT 1
41851: PPUSH
41852: LD_VAR 0 3
41856: PPUSH
41857: CALL_OW 12
41861: ARRAY
41862: ST_TO_ADDR
// if Crawls ( un ) then
41863: LD_VAR 0 2
41867: PPUSH
41868: CALL_OW 318
41872: IFFALSE 41883
// ComWalk ( un ) ;
41874: LD_VAR 0 2
41878: PPUSH
41879: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41883: LD_VAR 0 2
41887: PPUSH
41888: LD_INT 5
41890: PPUSH
41891: CALL_OW 336
// end ;
41895: PPOPN 3
41897: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41898: LD_EXP 87
41902: IFFALSE 41910
41904: PUSH
41905: LD_EXP 105
41909: AND
41910: IFFALSE 41922
41912: PUSH
41913: LD_OWVAR 67
41917: PUSH
41918: LD_INT 4
41920: LESS
41921: AND
41922: IFFALSE 41941
41924: GO 41926
41926: DISABLE
// begin Difficulty := Difficulty + 1 ;
41927: LD_ADDR_OWVAR 67
41931: PUSH
41932: LD_OWVAR 67
41936: PUSH
41937: LD_INT 1
41939: PLUS
41940: ST_TO_ADDR
// end ;
41941: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41942: LD_EXP 87
41946: IFFALSE 41954
41948: PUSH
41949: LD_EXP 106
41953: AND
41954: IFFALSE 42057
41956: GO 41958
41958: DISABLE
41959: LD_INT 0
41961: PPUSH
// begin for i := 1 to 5 do
41962: LD_ADDR_VAR 0 1
41966: PUSH
41967: DOUBLE
41968: LD_INT 1
41970: DEC
41971: ST_TO_ADDR
41972: LD_INT 5
41974: PUSH
41975: FOR_TO
41976: IFFALSE 42055
// begin uc_nation := nation_nature ;
41978: LD_ADDR_OWVAR 21
41982: PUSH
41983: LD_INT 0
41985: ST_TO_ADDR
// uc_side := 0 ;
41986: LD_ADDR_OWVAR 20
41990: PUSH
41991: LD_INT 0
41993: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41994: LD_ADDR_OWVAR 29
41998: PUSH
41999: LD_INT 12
42001: PUSH
42002: LD_INT 12
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: ST_TO_ADDR
// hc_agressivity := 20 ;
42009: LD_ADDR_OWVAR 35
42013: PUSH
42014: LD_INT 20
42016: ST_TO_ADDR
// hc_class := class_tiger ;
42017: LD_ADDR_OWVAR 28
42021: PUSH
42022: LD_INT 14
42024: ST_TO_ADDR
// hc_gallery :=  ;
42025: LD_ADDR_OWVAR 33
42029: PUSH
42030: LD_STRING 
42032: ST_TO_ADDR
// hc_name :=  ;
42033: LD_ADDR_OWVAR 26
42037: PUSH
42038: LD_STRING 
42040: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
42041: CALL_OW 44
42045: PPUSH
42046: LD_INT 0
42048: PPUSH
42049: CALL_OW 51
// end ;
42053: GO 41975
42055: POP
42056: POP
// end ;
42057: PPOPN 1
42059: END
// every 0 0$1 trigger StreamModeActive and sBomb do
42060: LD_EXP 87
42064: IFFALSE 42072
42066: PUSH
42067: LD_EXP 107
42071: AND
42072: IFFALSE 42081
42074: GO 42076
42076: DISABLE
// StreamSibBomb ;
42077: CALL 42082 0 0
42081: END
// export function StreamSibBomb ; var i , x , y ; begin
42082: LD_INT 0
42084: PPUSH
42085: PPUSH
42086: PPUSH
42087: PPUSH
// result := false ;
42088: LD_ADDR_VAR 0 1
42092: PUSH
42093: LD_INT 0
42095: ST_TO_ADDR
// for i := 1 to 16 do
42096: LD_ADDR_VAR 0 2
42100: PUSH
42101: DOUBLE
42102: LD_INT 1
42104: DEC
42105: ST_TO_ADDR
42106: LD_INT 16
42108: PUSH
42109: FOR_TO
42110: IFFALSE 42309
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
42112: LD_ADDR_VAR 0 3
42116: PUSH
42117: LD_INT 10
42119: PUSH
42120: LD_INT 20
42122: PUSH
42123: LD_INT 30
42125: PUSH
42126: LD_INT 40
42128: PUSH
42129: LD_INT 50
42131: PUSH
42132: LD_INT 60
42134: PUSH
42135: LD_INT 70
42137: PUSH
42138: LD_INT 80
42140: PUSH
42141: LD_INT 90
42143: PUSH
42144: LD_INT 100
42146: PUSH
42147: LD_INT 110
42149: PUSH
42150: LD_INT 120
42152: PUSH
42153: LD_INT 130
42155: PUSH
42156: LD_INT 140
42158: PUSH
42159: LD_INT 150
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: LIST
42174: LIST
42175: LIST
42176: LIST
42177: LIST
42178: PUSH
42179: LD_INT 1
42181: PPUSH
42182: LD_INT 15
42184: PPUSH
42185: CALL_OW 12
42189: ARRAY
42190: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
42191: LD_ADDR_VAR 0 4
42195: PUSH
42196: LD_INT 10
42198: PUSH
42199: LD_INT 20
42201: PUSH
42202: LD_INT 30
42204: PUSH
42205: LD_INT 40
42207: PUSH
42208: LD_INT 50
42210: PUSH
42211: LD_INT 60
42213: PUSH
42214: LD_INT 70
42216: PUSH
42217: LD_INT 80
42219: PUSH
42220: LD_INT 90
42222: PUSH
42223: LD_INT 100
42225: PUSH
42226: LD_INT 110
42228: PUSH
42229: LD_INT 120
42231: PUSH
42232: LD_INT 130
42234: PUSH
42235: LD_INT 140
42237: PUSH
42238: LD_INT 150
42240: PUSH
42241: EMPTY
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PPUSH
42261: LD_INT 15
42263: PPUSH
42264: CALL_OW 12
42268: ARRAY
42269: ST_TO_ADDR
// if ValidHex ( x , y ) then
42270: LD_VAR 0 3
42274: PPUSH
42275: LD_VAR 0 4
42279: PPUSH
42280: CALL_OW 488
42284: IFFALSE 42307
// begin result := [ x , y ] ;
42286: LD_ADDR_VAR 0 1
42290: PUSH
42291: LD_VAR 0 3
42295: PUSH
42296: LD_VAR 0 4
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: ST_TO_ADDR
// break ;
42305: GO 42309
// end ; end ;
42307: GO 42109
42309: POP
42310: POP
// if result then
42311: LD_VAR 0 1
42315: IFFALSE 42375
// begin ToLua ( playSibBomb() ) ;
42317: LD_STRING playSibBomb()
42319: PPUSH
42320: CALL_OW 559
// wait ( 0 0$14 ) ;
42324: LD_INT 490
42326: PPUSH
42327: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
42331: LD_VAR 0 1
42335: PUSH
42336: LD_INT 1
42338: ARRAY
42339: PPUSH
42340: LD_VAR 0 1
42344: PUSH
42345: LD_INT 2
42347: ARRAY
42348: PPUSH
42349: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
42353: LD_VAR 0 1
42357: PUSH
42358: LD_INT 1
42360: ARRAY
42361: PPUSH
42362: LD_VAR 0 1
42366: PUSH
42367: LD_INT 2
42369: ARRAY
42370: PPUSH
42371: CALL_OW 429
// end ; end ;
42375: LD_VAR 0 1
42379: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42380: LD_EXP 87
42384: IFFALSE 42392
42386: PUSH
42387: LD_EXP 109
42391: AND
42392: IFFALSE 42404
42394: GO 42396
42396: DISABLE
// YouLost (  ) ;
42397: LD_STRING 
42399: PPUSH
42400: CALL_OW 104
42404: END
// every 0 0$1 trigger StreamModeActive and sFog do
42405: LD_EXP 87
42409: IFFALSE 42417
42411: PUSH
42412: LD_EXP 108
42416: AND
42417: IFFALSE 42431
42419: GO 42421
42421: DISABLE
// FogOff ( your_side ) ;
42422: LD_OWVAR 2
42426: PPUSH
42427: CALL_OW 344
42431: END
// every 0 0$1 trigger StreamModeActive and sSun do
42432: LD_EXP 87
42436: IFFALSE 42444
42438: PUSH
42439: LD_EXP 110
42443: AND
42444: IFFALSE 42472
42446: GO 42448
42448: DISABLE
// begin solar_recharge_percent := 0 ;
42449: LD_ADDR_OWVAR 79
42453: PUSH
42454: LD_INT 0
42456: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42457: LD_INT 10500
42459: PPUSH
42460: CALL_OW 67
// solar_recharge_percent := 100 ;
42464: LD_ADDR_OWVAR 79
42468: PUSH
42469: LD_INT 100
42471: ST_TO_ADDR
// end ;
42472: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42473: LD_EXP 87
42477: IFFALSE 42485
42479: PUSH
42480: LD_EXP 111
42484: AND
42485: IFFALSE 42724
42487: GO 42489
42489: DISABLE
42490: LD_INT 0
42492: PPUSH
42493: PPUSH
42494: PPUSH
// begin tmp := [ ] ;
42495: LD_ADDR_VAR 0 3
42499: PUSH
42500: EMPTY
42501: ST_TO_ADDR
// for i := 1 to 6 do
42502: LD_ADDR_VAR 0 1
42506: PUSH
42507: DOUBLE
42508: LD_INT 1
42510: DEC
42511: ST_TO_ADDR
42512: LD_INT 6
42514: PUSH
42515: FOR_TO
42516: IFFALSE 42621
// begin uc_nation := nation_nature ;
42518: LD_ADDR_OWVAR 21
42522: PUSH
42523: LD_INT 0
42525: ST_TO_ADDR
// uc_side := 0 ;
42526: LD_ADDR_OWVAR 20
42530: PUSH
42531: LD_INT 0
42533: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42534: LD_ADDR_OWVAR 29
42538: PUSH
42539: LD_INT 12
42541: PUSH
42542: LD_INT 12
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: ST_TO_ADDR
// hc_agressivity := 20 ;
42549: LD_ADDR_OWVAR 35
42553: PUSH
42554: LD_INT 20
42556: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42557: LD_ADDR_OWVAR 28
42561: PUSH
42562: LD_INT 17
42564: ST_TO_ADDR
// hc_gallery :=  ;
42565: LD_ADDR_OWVAR 33
42569: PUSH
42570: LD_STRING 
42572: ST_TO_ADDR
// hc_name :=  ;
42573: LD_ADDR_OWVAR 26
42577: PUSH
42578: LD_STRING 
42580: ST_TO_ADDR
// un := CreateHuman ;
42581: LD_ADDR_VAR 0 2
42585: PUSH
42586: CALL_OW 44
42590: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42591: LD_VAR 0 2
42595: PPUSH
42596: LD_INT 1
42598: PPUSH
42599: CALL_OW 51
// tmp := tmp ^ un ;
42603: LD_ADDR_VAR 0 3
42607: PUSH
42608: LD_VAR 0 3
42612: PUSH
42613: LD_VAR 0 2
42617: ADD
42618: ST_TO_ADDR
// end ;
42619: GO 42515
42621: POP
42622: POP
// repeat wait ( 0 0$1 ) ;
42623: LD_INT 35
42625: PPUSH
42626: CALL_OW 67
// for un in tmp do
42630: LD_ADDR_VAR 0 2
42634: PUSH
42635: LD_VAR 0 3
42639: PUSH
42640: FOR_IN
42641: IFFALSE 42715
// begin if IsDead ( un ) then
42643: LD_VAR 0 2
42647: PPUSH
42648: CALL_OW 301
42652: IFFALSE 42672
// begin tmp := tmp diff un ;
42654: LD_ADDR_VAR 0 3
42658: PUSH
42659: LD_VAR 0 3
42663: PUSH
42664: LD_VAR 0 2
42668: DIFF
42669: ST_TO_ADDR
// continue ;
42670: GO 42640
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42672: LD_VAR 0 2
42676: PPUSH
42677: LD_INT 3
42679: PUSH
42680: LD_INT 22
42682: PUSH
42683: LD_INT 0
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: EMPTY
42691: LIST
42692: LIST
42693: PPUSH
42694: CALL_OW 69
42698: PPUSH
42699: LD_VAR 0 2
42703: PPUSH
42704: CALL_OW 74
42708: PPUSH
42709: CALL_OW 115
// end ;
42713: GO 42640
42715: POP
42716: POP
// until not tmp ;
42717: LD_VAR 0 3
42721: NOT
42722: IFFALSE 42623
// end ;
42724: PPOPN 3
42726: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42727: LD_EXP 87
42731: IFFALSE 42739
42733: PUSH
42734: LD_EXP 112
42738: AND
42739: IFFALSE 42793
42741: GO 42743
42743: DISABLE
// begin ToLua ( displayTroll(); ) ;
42744: LD_STRING displayTroll();
42746: PPUSH
42747: CALL_OW 559
// wait ( 3 3$00 ) ;
42751: LD_INT 6300
42753: PPUSH
42754: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42758: LD_STRING hideTroll();
42760: PPUSH
42761: CALL_OW 559
// wait ( 1 1$00 ) ;
42765: LD_INT 2100
42767: PPUSH
42768: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42772: LD_STRING displayTroll();
42774: PPUSH
42775: CALL_OW 559
// wait ( 1 1$00 ) ;
42779: LD_INT 2100
42781: PPUSH
42782: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42786: LD_STRING hideTroll();
42788: PPUSH
42789: CALL_OW 559
// end ;
42793: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42794: LD_EXP 87
42798: IFFALSE 42806
42800: PUSH
42801: LD_EXP 113
42805: AND
42806: IFFALSE 42869
42808: GO 42810
42810: DISABLE
42811: LD_INT 0
42813: PPUSH
// begin p := 0 ;
42814: LD_ADDR_VAR 0 1
42818: PUSH
42819: LD_INT 0
42821: ST_TO_ADDR
// repeat game_speed := 1 ;
42822: LD_ADDR_OWVAR 65
42826: PUSH
42827: LD_INT 1
42829: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42830: LD_INT 35
42832: PPUSH
42833: CALL_OW 67
// p := p + 1 ;
42837: LD_ADDR_VAR 0 1
42841: PUSH
42842: LD_VAR 0 1
42846: PUSH
42847: LD_INT 1
42849: PLUS
42850: ST_TO_ADDR
// until p >= 60 ;
42851: LD_VAR 0 1
42855: PUSH
42856: LD_INT 60
42858: GREATEREQUAL
42859: IFFALSE 42822
// game_speed := 4 ;
42861: LD_ADDR_OWVAR 65
42865: PUSH
42866: LD_INT 4
42868: ST_TO_ADDR
// end ;
42869: PPOPN 1
42871: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42872: LD_EXP 87
42876: IFFALSE 42884
42878: PUSH
42879: LD_EXP 114
42883: AND
42884: IFFALSE 43030
42886: GO 42888
42888: DISABLE
42889: LD_INT 0
42891: PPUSH
42892: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42893: LD_ADDR_VAR 0 1
42897: PUSH
42898: LD_INT 22
42900: PUSH
42901: LD_OWVAR 2
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 2
42912: PUSH
42913: LD_INT 30
42915: PUSH
42916: LD_INT 0
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: LD_INT 30
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: EMPTY
42930: LIST
42931: LIST
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: LIST
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PPUSH
42942: CALL_OW 69
42946: ST_TO_ADDR
// if not depot then
42947: LD_VAR 0 1
42951: NOT
42952: IFFALSE 42956
// exit ;
42954: GO 43030
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42956: LD_ADDR_VAR 0 2
42960: PUSH
42961: LD_VAR 0 1
42965: PUSH
42966: LD_INT 1
42968: PPUSH
42969: LD_VAR 0 1
42973: PPUSH
42974: CALL_OW 12
42978: ARRAY
42979: PPUSH
42980: CALL_OW 274
42984: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42985: LD_VAR 0 2
42989: PPUSH
42990: LD_INT 1
42992: PPUSH
42993: LD_INT 0
42995: PPUSH
42996: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
43000: LD_VAR 0 2
43004: PPUSH
43005: LD_INT 2
43007: PPUSH
43008: LD_INT 0
43010: PPUSH
43011: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
43015: LD_VAR 0 2
43019: PPUSH
43020: LD_INT 3
43022: PPUSH
43023: LD_INT 0
43025: PPUSH
43026: CALL_OW 277
// end ;
43030: PPOPN 2
43032: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
43033: LD_EXP 87
43037: IFFALSE 43045
43039: PUSH
43040: LD_EXP 115
43044: AND
43045: IFFALSE 43142
43047: GO 43049
43049: DISABLE
43050: LD_INT 0
43052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
43053: LD_ADDR_VAR 0 1
43057: PUSH
43058: LD_INT 22
43060: PUSH
43061: LD_OWVAR 2
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 21
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: PUSH
43080: LD_INT 3
43082: PUSH
43083: LD_INT 23
43085: PUSH
43086: LD_INT 0
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: LIST
43101: PPUSH
43102: CALL_OW 69
43106: ST_TO_ADDR
// if not tmp then
43107: LD_VAR 0 1
43111: NOT
43112: IFFALSE 43116
// exit ;
43114: GO 43142
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
43116: LD_VAR 0 1
43120: PUSH
43121: LD_INT 1
43123: PPUSH
43124: LD_VAR 0 1
43128: PPUSH
43129: CALL_OW 12
43133: ARRAY
43134: PPUSH
43135: LD_INT 200
43137: PPUSH
43138: CALL_OW 234
// end ;
43142: PPOPN 1
43144: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
43145: LD_EXP 87
43149: IFFALSE 43157
43151: PUSH
43152: LD_EXP 116
43156: AND
43157: IFFALSE 43236
43159: GO 43161
43161: DISABLE
43162: LD_INT 0
43164: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
43165: LD_ADDR_VAR 0 1
43169: PUSH
43170: LD_INT 22
43172: PUSH
43173: LD_OWVAR 2
43177: PUSH
43178: EMPTY
43179: LIST
43180: LIST
43181: PUSH
43182: LD_INT 21
43184: PUSH
43185: LD_INT 2
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PPUSH
43196: CALL_OW 69
43200: ST_TO_ADDR
// if not tmp then
43201: LD_VAR 0 1
43205: NOT
43206: IFFALSE 43210
// exit ;
43208: GO 43236
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
43210: LD_VAR 0 1
43214: PUSH
43215: LD_INT 1
43217: PPUSH
43218: LD_VAR 0 1
43222: PPUSH
43223: CALL_OW 12
43227: ARRAY
43228: PPUSH
43229: LD_INT 60
43231: PPUSH
43232: CALL_OW 234
// end ;
43236: PPOPN 1
43238: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
43239: LD_EXP 87
43243: IFFALSE 43251
43245: PUSH
43246: LD_EXP 117
43250: AND
43251: IFFALSE 43350
43253: GO 43255
43255: DISABLE
43256: LD_INT 0
43258: PPUSH
43259: PPUSH
// begin enable ;
43260: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
43261: LD_ADDR_VAR 0 1
43265: PUSH
43266: LD_INT 22
43268: PUSH
43269: LD_OWVAR 2
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 61
43280: PUSH
43281: EMPTY
43282: LIST
43283: PUSH
43284: LD_INT 33
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: EMPTY
43291: LIST
43292: LIST
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: LIST
43298: PPUSH
43299: CALL_OW 69
43303: ST_TO_ADDR
// if not tmp then
43304: LD_VAR 0 1
43308: NOT
43309: IFFALSE 43313
// exit ;
43311: GO 43350
// for i in tmp do
43313: LD_ADDR_VAR 0 2
43317: PUSH
43318: LD_VAR 0 1
43322: PUSH
43323: FOR_IN
43324: IFFALSE 43348
// if IsControledBy ( i ) then
43326: LD_VAR 0 2
43330: PPUSH
43331: CALL_OW 312
43335: IFFALSE 43346
// ComUnlink ( i ) ;
43337: LD_VAR 0 2
43341: PPUSH
43342: CALL_OW 136
43346: GO 43323
43348: POP
43349: POP
// end ;
43350: PPOPN 2
43352: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
43353: LD_EXP 87
43357: IFFALSE 43365
43359: PUSH
43360: LD_EXP 118
43364: AND
43365: IFFALSE 43505
43367: GO 43369
43369: DISABLE
43370: LD_INT 0
43372: PPUSH
43373: PPUSH
// begin ToLua ( displayPowell(); ) ;
43374: LD_STRING displayPowell();
43376: PPUSH
43377: CALL_OW 559
// uc_side := 0 ;
43381: LD_ADDR_OWVAR 20
43385: PUSH
43386: LD_INT 0
43388: ST_TO_ADDR
// uc_nation := 2 ;
43389: LD_ADDR_OWVAR 21
43393: PUSH
43394: LD_INT 2
43396: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43397: LD_ADDR_OWVAR 37
43401: PUSH
43402: LD_INT 14
43404: ST_TO_ADDR
// vc_engine := engine_siberite ;
43405: LD_ADDR_OWVAR 39
43409: PUSH
43410: LD_INT 3
43412: ST_TO_ADDR
// vc_control := control_apeman ;
43413: LD_ADDR_OWVAR 38
43417: PUSH
43418: LD_INT 5
43420: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43421: LD_ADDR_OWVAR 40
43425: PUSH
43426: LD_INT 29
43428: ST_TO_ADDR
// un := CreateVehicle ;
43429: LD_ADDR_VAR 0 2
43433: PUSH
43434: CALL_OW 45
43438: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43439: LD_VAR 0 2
43443: PPUSH
43444: LD_INT 1
43446: PPUSH
43447: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43451: LD_INT 35
43453: PPUSH
43454: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43458: LD_VAR 0 2
43462: PPUSH
43463: LD_INT 22
43465: PUSH
43466: LD_OWVAR 2
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PPUSH
43475: CALL_OW 69
43479: PPUSH
43480: LD_VAR 0 2
43484: PPUSH
43485: CALL_OW 74
43489: PPUSH
43490: CALL_OW 115
// until IsDead ( un ) ;
43494: LD_VAR 0 2
43498: PPUSH
43499: CALL_OW 301
43503: IFFALSE 43451
// end ;
43505: PPOPN 2
43507: END
// every 0 0$1 trigger StreamModeActive and sStu do
43508: LD_EXP 87
43512: IFFALSE 43520
43514: PUSH
43515: LD_EXP 126
43519: AND
43520: IFFALSE 43536
43522: GO 43524
43524: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43525: LD_STRING displayStucuk();
43527: PPUSH
43528: CALL_OW 559
// ResetFog ;
43532: CALL_OW 335
// end ;
43536: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43537: LD_EXP 87
43541: IFFALSE 43549
43543: PUSH
43544: LD_EXP 119
43548: AND
43549: IFFALSE 43690
43551: GO 43553
43553: DISABLE
43554: LD_INT 0
43556: PPUSH
43557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43558: LD_ADDR_VAR 0 2
43562: PUSH
43563: LD_INT 22
43565: PUSH
43566: LD_OWVAR 2
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 21
43577: PUSH
43578: LD_INT 1
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PPUSH
43589: CALL_OW 69
43593: ST_TO_ADDR
// if not tmp then
43594: LD_VAR 0 2
43598: NOT
43599: IFFALSE 43603
// exit ;
43601: GO 43690
// un := tmp [ rand ( 1 , tmp ) ] ;
43603: LD_ADDR_VAR 0 1
43607: PUSH
43608: LD_VAR 0 2
43612: PUSH
43613: LD_INT 1
43615: PPUSH
43616: LD_VAR 0 2
43620: PPUSH
43621: CALL_OW 12
43625: ARRAY
43626: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43627: LD_VAR 0 1
43631: PPUSH
43632: LD_INT 0
43634: PPUSH
43635: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43639: LD_VAR 0 1
43643: PPUSH
43644: LD_OWVAR 3
43648: PUSH
43649: LD_VAR 0 1
43653: DIFF
43654: PPUSH
43655: LD_VAR 0 1
43659: PPUSH
43660: CALL_OW 74
43664: PPUSH
43665: CALL_OW 115
// wait ( 0 0$20 ) ;
43669: LD_INT 700
43671: PPUSH
43672: CALL_OW 67
// SetSide ( un , your_side ) ;
43676: LD_VAR 0 1
43680: PPUSH
43681: LD_OWVAR 2
43685: PPUSH
43686: CALL_OW 235
// end ;
43690: PPOPN 2
43692: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43693: LD_EXP 87
43697: IFFALSE 43705
43699: PUSH
43700: LD_EXP 120
43704: AND
43705: IFFALSE 43811
43707: GO 43709
43709: DISABLE
43710: LD_INT 0
43712: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43713: LD_ADDR_VAR 0 1
43717: PUSH
43718: LD_INT 22
43720: PUSH
43721: LD_OWVAR 2
43725: PUSH
43726: EMPTY
43727: LIST
43728: LIST
43729: PUSH
43730: LD_INT 2
43732: PUSH
43733: LD_INT 30
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 30
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: LIST
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PPUSH
43762: CALL_OW 69
43766: ST_TO_ADDR
// if not depot then
43767: LD_VAR 0 1
43771: NOT
43772: IFFALSE 43776
// exit ;
43774: GO 43811
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43776: LD_VAR 0 1
43780: PUSH
43781: LD_INT 1
43783: ARRAY
43784: PPUSH
43785: CALL_OW 250
43789: PPUSH
43790: LD_VAR 0 1
43794: PUSH
43795: LD_INT 1
43797: ARRAY
43798: PPUSH
43799: CALL_OW 251
43803: PPUSH
43804: LD_INT 70
43806: PPUSH
43807: CALL_OW 495
// end ;
43811: PPOPN 1
43813: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43814: LD_EXP 87
43818: IFFALSE 43826
43820: PUSH
43821: LD_EXP 121
43825: AND
43826: IFFALSE 44037
43828: GO 43830
43830: DISABLE
43831: LD_INT 0
43833: PPUSH
43834: PPUSH
43835: PPUSH
43836: PPUSH
43837: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43838: LD_ADDR_VAR 0 5
43842: PUSH
43843: LD_INT 22
43845: PUSH
43846: LD_OWVAR 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 21
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PPUSH
43869: CALL_OW 69
43873: ST_TO_ADDR
// if not tmp then
43874: LD_VAR 0 5
43878: NOT
43879: IFFALSE 43883
// exit ;
43881: GO 44037
// for i in tmp do
43883: LD_ADDR_VAR 0 1
43887: PUSH
43888: LD_VAR 0 5
43892: PUSH
43893: FOR_IN
43894: IFFALSE 44035
// begin d := rand ( 0 , 5 ) ;
43896: LD_ADDR_VAR 0 4
43900: PUSH
43901: LD_INT 0
43903: PPUSH
43904: LD_INT 5
43906: PPUSH
43907: CALL_OW 12
43911: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43912: LD_ADDR_VAR 0 2
43916: PUSH
43917: LD_VAR 0 1
43921: PPUSH
43922: CALL_OW 250
43926: PPUSH
43927: LD_VAR 0 4
43931: PPUSH
43932: LD_INT 3
43934: PPUSH
43935: LD_INT 12
43937: PPUSH
43938: CALL_OW 12
43942: PPUSH
43943: CALL_OW 272
43947: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43948: LD_ADDR_VAR 0 3
43952: PUSH
43953: LD_VAR 0 1
43957: PPUSH
43958: CALL_OW 251
43962: PPUSH
43963: LD_VAR 0 4
43967: PPUSH
43968: LD_INT 3
43970: PPUSH
43971: LD_INT 12
43973: PPUSH
43974: CALL_OW 12
43978: PPUSH
43979: CALL_OW 273
43983: ST_TO_ADDR
// if ValidHex ( x , y ) then
43984: LD_VAR 0 2
43988: PPUSH
43989: LD_VAR 0 3
43993: PPUSH
43994: CALL_OW 488
43998: IFFALSE 44033
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
44000: LD_VAR 0 1
44004: PPUSH
44005: LD_VAR 0 2
44009: PPUSH
44010: LD_VAR 0 3
44014: PPUSH
44015: LD_INT 3
44017: PPUSH
44018: LD_INT 6
44020: PPUSH
44021: CALL_OW 12
44025: PPUSH
44026: LD_INT 1
44028: PPUSH
44029: CALL_OW 483
// end ;
44033: GO 43893
44035: POP
44036: POP
// end ;
44037: PPOPN 5
44039: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
44040: LD_EXP 87
44044: IFFALSE 44052
44046: PUSH
44047: LD_EXP 122
44051: AND
44052: IFFALSE 44146
44054: GO 44056
44056: DISABLE
44057: LD_INT 0
44059: PPUSH
44060: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
44061: LD_ADDR_VAR 0 2
44065: PUSH
44066: LD_INT 22
44068: PUSH
44069: LD_OWVAR 2
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 32
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 21
44090: PUSH
44091: LD_INT 2
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: LIST
44102: PPUSH
44103: CALL_OW 69
44107: ST_TO_ADDR
// if not tmp then
44108: LD_VAR 0 2
44112: NOT
44113: IFFALSE 44117
// exit ;
44115: GO 44146
// for i in tmp do
44117: LD_ADDR_VAR 0 1
44121: PUSH
44122: LD_VAR 0 2
44126: PUSH
44127: FOR_IN
44128: IFFALSE 44144
// SetFuel ( i , 0 ) ;
44130: LD_VAR 0 1
44134: PPUSH
44135: LD_INT 0
44137: PPUSH
44138: CALL_OW 240
44142: GO 44127
44144: POP
44145: POP
// end ;
44146: PPOPN 2
44148: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
44149: LD_EXP 87
44153: IFFALSE 44161
44155: PUSH
44156: LD_EXP 123
44160: AND
44161: IFFALSE 44227
44163: GO 44165
44165: DISABLE
44166: LD_INT 0
44168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
44169: LD_ADDR_VAR 0 1
44173: PUSH
44174: LD_INT 22
44176: PUSH
44177: LD_OWVAR 2
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 30
44188: PUSH
44189: LD_INT 29
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: EMPTY
44197: LIST
44198: LIST
44199: PPUSH
44200: CALL_OW 69
44204: ST_TO_ADDR
// if not tmp then
44205: LD_VAR 0 1
44209: NOT
44210: IFFALSE 44214
// exit ;
44212: GO 44227
// DestroyUnit ( tmp [ 1 ] ) ;
44214: LD_VAR 0 1
44218: PUSH
44219: LD_INT 1
44221: ARRAY
44222: PPUSH
44223: CALL_OW 65
// end ;
44227: PPOPN 1
44229: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
44230: LD_EXP 87
44234: IFFALSE 44242
44236: PUSH
44237: LD_EXP 125
44241: AND
44242: IFFALSE 44371
44244: GO 44246
44246: DISABLE
44247: LD_INT 0
44249: PPUSH
// begin uc_side := 0 ;
44250: LD_ADDR_OWVAR 20
44254: PUSH
44255: LD_INT 0
44257: ST_TO_ADDR
// uc_nation := nation_arabian ;
44258: LD_ADDR_OWVAR 21
44262: PUSH
44263: LD_INT 2
44265: ST_TO_ADDR
// hc_gallery :=  ;
44266: LD_ADDR_OWVAR 33
44270: PUSH
44271: LD_STRING 
44273: ST_TO_ADDR
// hc_name :=  ;
44274: LD_ADDR_OWVAR 26
44278: PUSH
44279: LD_STRING 
44281: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
44282: LD_INT 1
44284: PPUSH
44285: LD_INT 11
44287: PPUSH
44288: LD_INT 10
44290: PPUSH
44291: CALL_OW 380
// un := CreateHuman ;
44295: LD_ADDR_VAR 0 1
44299: PUSH
44300: CALL_OW 44
44304: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
44305: LD_VAR 0 1
44309: PPUSH
44310: LD_INT 1
44312: PPUSH
44313: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
44317: LD_INT 35
44319: PPUSH
44320: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
44324: LD_VAR 0 1
44328: PPUSH
44329: LD_INT 22
44331: PUSH
44332: LD_OWVAR 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PPUSH
44341: CALL_OW 69
44345: PPUSH
44346: LD_VAR 0 1
44350: PPUSH
44351: CALL_OW 74
44355: PPUSH
44356: CALL_OW 115
// until IsDead ( un ) ;
44360: LD_VAR 0 1
44364: PPUSH
44365: CALL_OW 301
44369: IFFALSE 44317
// end ;
44371: PPOPN 1
44373: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
44374: LD_EXP 87
44378: IFFALSE 44386
44380: PUSH
44381: LD_EXP 127
44385: AND
44386: IFFALSE 44398
44388: GO 44390
44390: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
44391: LD_STRING earthquake(getX(game), 0, 32)
44393: PPUSH
44394: CALL_OW 559
44398: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
44399: LD_EXP 87
44403: IFFALSE 44411
44405: PUSH
44406: LD_EXP 128
44410: AND
44411: IFFALSE 44502
44413: GO 44415
44415: DISABLE
44416: LD_INT 0
44418: PPUSH
// begin enable ;
44419: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44420: LD_ADDR_VAR 0 1
44424: PUSH
44425: LD_INT 22
44427: PUSH
44428: LD_OWVAR 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 21
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 33
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: PPUSH
44462: CALL_OW 69
44466: ST_TO_ADDR
// if not tmp then
44467: LD_VAR 0 1
44471: NOT
44472: IFFALSE 44476
// exit ;
44474: GO 44502
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44476: LD_VAR 0 1
44480: PUSH
44481: LD_INT 1
44483: PPUSH
44484: LD_VAR 0 1
44488: PPUSH
44489: CALL_OW 12
44493: ARRAY
44494: PPUSH
44495: LD_INT 1
44497: PPUSH
44498: CALL_OW 234
// end ;
44502: PPOPN 1
44504: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44505: LD_EXP 87
44509: IFFALSE 44517
44511: PUSH
44512: LD_EXP 129
44516: AND
44517: IFFALSE 44658
44519: GO 44521
44521: DISABLE
44522: LD_INT 0
44524: PPUSH
44525: PPUSH
44526: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44527: LD_ADDR_VAR 0 3
44531: PUSH
44532: LD_INT 22
44534: PUSH
44535: LD_OWVAR 2
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 25
44546: PUSH
44547: LD_INT 1
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PPUSH
44558: CALL_OW 69
44562: ST_TO_ADDR
// if not tmp then
44563: LD_VAR 0 3
44567: NOT
44568: IFFALSE 44572
// exit ;
44570: GO 44658
// un := tmp [ rand ( 1 , tmp ) ] ;
44572: LD_ADDR_VAR 0 2
44576: PUSH
44577: LD_VAR 0 3
44581: PUSH
44582: LD_INT 1
44584: PPUSH
44585: LD_VAR 0 3
44589: PPUSH
44590: CALL_OW 12
44594: ARRAY
44595: ST_TO_ADDR
// if Crawls ( un ) then
44596: LD_VAR 0 2
44600: PPUSH
44601: CALL_OW 318
44605: IFFALSE 44616
// ComWalk ( un ) ;
44607: LD_VAR 0 2
44611: PPUSH
44612: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44616: LD_VAR 0 2
44620: PPUSH
44621: LD_INT 9
44623: PPUSH
44624: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44628: LD_INT 28
44630: PPUSH
44631: LD_OWVAR 2
44635: PPUSH
44636: LD_INT 2
44638: PPUSH
44639: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44643: LD_INT 29
44645: PPUSH
44646: LD_OWVAR 2
44650: PPUSH
44651: LD_INT 2
44653: PPUSH
44654: CALL_OW 322
// end ;
44658: PPOPN 3
44660: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44661: LD_EXP 87
44665: IFFALSE 44673
44667: PUSH
44668: LD_EXP 130
44672: AND
44673: IFFALSE 44784
44675: GO 44677
44677: DISABLE
44678: LD_INT 0
44680: PPUSH
44681: PPUSH
44682: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44683: LD_ADDR_VAR 0 3
44687: PUSH
44688: LD_INT 22
44690: PUSH
44691: LD_OWVAR 2
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 25
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PPUSH
44714: CALL_OW 69
44718: ST_TO_ADDR
// if not tmp then
44719: LD_VAR 0 3
44723: NOT
44724: IFFALSE 44728
// exit ;
44726: GO 44784
// un := tmp [ rand ( 1 , tmp ) ] ;
44728: LD_ADDR_VAR 0 2
44732: PUSH
44733: LD_VAR 0 3
44737: PUSH
44738: LD_INT 1
44740: PPUSH
44741: LD_VAR 0 3
44745: PPUSH
44746: CALL_OW 12
44750: ARRAY
44751: ST_TO_ADDR
// if Crawls ( un ) then
44752: LD_VAR 0 2
44756: PPUSH
44757: CALL_OW 318
44761: IFFALSE 44772
// ComWalk ( un ) ;
44763: LD_VAR 0 2
44767: PPUSH
44768: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44772: LD_VAR 0 2
44776: PPUSH
44777: LD_INT 8
44779: PPUSH
44780: CALL_OW 336
// end ;
44784: PPOPN 3
44786: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44787: LD_EXP 87
44791: IFFALSE 44799
44793: PUSH
44794: LD_EXP 131
44798: AND
44799: IFFALSE 44943
44801: GO 44803
44803: DISABLE
44804: LD_INT 0
44806: PPUSH
44807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44808: LD_ADDR_VAR 0 2
44812: PUSH
44813: LD_INT 22
44815: PUSH
44816: LD_OWVAR 2
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 21
44827: PUSH
44828: LD_INT 2
44830: PUSH
44831: EMPTY
44832: LIST
44833: LIST
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: LD_INT 34
44840: PUSH
44841: LD_INT 12
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 34
44850: PUSH
44851: LD_INT 51
44853: PUSH
44854: EMPTY
44855: LIST
44856: LIST
44857: PUSH
44858: LD_INT 34
44860: PUSH
44861: LD_INT 32
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: LIST
44878: PPUSH
44879: CALL_OW 69
44883: ST_TO_ADDR
// if not tmp then
44884: LD_VAR 0 2
44888: NOT
44889: IFFALSE 44893
// exit ;
44891: GO 44943
// for i in tmp do
44893: LD_ADDR_VAR 0 1
44897: PUSH
44898: LD_VAR 0 2
44902: PUSH
44903: FOR_IN
44904: IFFALSE 44941
// if GetCargo ( i , mat_artifact ) = 0 then
44906: LD_VAR 0 1
44910: PPUSH
44911: LD_INT 4
44913: PPUSH
44914: CALL_OW 289
44918: PUSH
44919: LD_INT 0
44921: EQUAL
44922: IFFALSE 44939
// SetCargo ( i , mat_siberit , 100 ) ;
44924: LD_VAR 0 1
44928: PPUSH
44929: LD_INT 3
44931: PPUSH
44932: LD_INT 100
44934: PPUSH
44935: CALL_OW 290
44939: GO 44903
44941: POP
44942: POP
// end ;
44943: PPOPN 2
44945: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44946: LD_EXP 87
44950: IFFALSE 44958
44952: PUSH
44953: LD_EXP 132
44957: AND
44958: IFFALSE 45141
44960: GO 44962
44962: DISABLE
44963: LD_INT 0
44965: PPUSH
44966: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44967: LD_ADDR_VAR 0 2
44971: PUSH
44972: LD_INT 22
44974: PUSH
44975: LD_OWVAR 2
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PPUSH
44984: CALL_OW 69
44988: ST_TO_ADDR
// if not tmp then
44989: LD_VAR 0 2
44993: NOT
44994: IFFALSE 44998
// exit ;
44996: GO 45141
// for i := 1 to 2 do
44998: LD_ADDR_VAR 0 1
45002: PUSH
45003: DOUBLE
45004: LD_INT 1
45006: DEC
45007: ST_TO_ADDR
45008: LD_INT 2
45010: PUSH
45011: FOR_TO
45012: IFFALSE 45139
// begin uc_side := your_side ;
45014: LD_ADDR_OWVAR 20
45018: PUSH
45019: LD_OWVAR 2
45023: ST_TO_ADDR
// uc_nation := nation_american ;
45024: LD_ADDR_OWVAR 21
45028: PUSH
45029: LD_INT 1
45031: ST_TO_ADDR
// vc_chassis := us_morphling ;
45032: LD_ADDR_OWVAR 37
45036: PUSH
45037: LD_INT 5
45039: ST_TO_ADDR
// vc_engine := engine_siberite ;
45040: LD_ADDR_OWVAR 39
45044: PUSH
45045: LD_INT 3
45047: ST_TO_ADDR
// vc_control := control_computer ;
45048: LD_ADDR_OWVAR 38
45052: PUSH
45053: LD_INT 3
45055: ST_TO_ADDR
// vc_weapon := us_double_laser ;
45056: LD_ADDR_OWVAR 40
45060: PUSH
45061: LD_INT 10
45063: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
45064: LD_VAR 0 2
45068: PUSH
45069: LD_INT 1
45071: ARRAY
45072: PPUSH
45073: CALL_OW 310
45077: NOT
45078: IFFALSE 45125
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
45080: CALL_OW 45
45084: PPUSH
45085: LD_VAR 0 2
45089: PUSH
45090: LD_INT 1
45092: ARRAY
45093: PPUSH
45094: CALL_OW 250
45098: PPUSH
45099: LD_VAR 0 2
45103: PUSH
45104: LD_INT 1
45106: ARRAY
45107: PPUSH
45108: CALL_OW 251
45112: PPUSH
45113: LD_INT 12
45115: PPUSH
45116: LD_INT 1
45118: PPUSH
45119: CALL_OW 50
45123: GO 45137
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
45125: CALL_OW 45
45129: PPUSH
45130: LD_INT 1
45132: PPUSH
45133: CALL_OW 51
// end ;
45137: GO 45011
45139: POP
45140: POP
// end ;
45141: PPOPN 2
45143: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
45144: LD_EXP 87
45148: IFFALSE 45156
45150: PUSH
45151: LD_EXP 133
45155: AND
45156: IFFALSE 45378
45158: GO 45160
45160: DISABLE
45161: LD_INT 0
45163: PPUSH
45164: PPUSH
45165: PPUSH
45166: PPUSH
45167: PPUSH
45168: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45169: LD_ADDR_VAR 0 6
45173: PUSH
45174: LD_INT 22
45176: PUSH
45177: LD_OWVAR 2
45181: PUSH
45182: EMPTY
45183: LIST
45184: LIST
45185: PUSH
45186: LD_INT 21
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: EMPTY
45193: LIST
45194: LIST
45195: PUSH
45196: LD_INT 3
45198: PUSH
45199: LD_INT 23
45201: PUSH
45202: LD_INT 0
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: EMPTY
45214: LIST
45215: LIST
45216: LIST
45217: PPUSH
45218: CALL_OW 69
45222: ST_TO_ADDR
// if not tmp then
45223: LD_VAR 0 6
45227: NOT
45228: IFFALSE 45232
// exit ;
45230: GO 45378
// s1 := rand ( 1 , 4 ) ;
45232: LD_ADDR_VAR 0 2
45236: PUSH
45237: LD_INT 1
45239: PPUSH
45240: LD_INT 4
45242: PPUSH
45243: CALL_OW 12
45247: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
45248: LD_ADDR_VAR 0 4
45252: PUSH
45253: LD_VAR 0 6
45257: PUSH
45258: LD_INT 1
45260: ARRAY
45261: PPUSH
45262: LD_VAR 0 2
45266: PPUSH
45267: CALL_OW 259
45271: ST_TO_ADDR
// if s1 = 1 then
45272: LD_VAR 0 2
45276: PUSH
45277: LD_INT 1
45279: EQUAL
45280: IFFALSE 45300
// s2 := rand ( 2 , 4 ) else
45282: LD_ADDR_VAR 0 3
45286: PUSH
45287: LD_INT 2
45289: PPUSH
45290: LD_INT 4
45292: PPUSH
45293: CALL_OW 12
45297: ST_TO_ADDR
45298: GO 45308
// s2 := 1 ;
45300: LD_ADDR_VAR 0 3
45304: PUSH
45305: LD_INT 1
45307: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
45308: LD_ADDR_VAR 0 5
45312: PUSH
45313: LD_VAR 0 6
45317: PUSH
45318: LD_INT 1
45320: ARRAY
45321: PPUSH
45322: LD_VAR 0 3
45326: PPUSH
45327: CALL_OW 259
45331: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
45332: LD_VAR 0 6
45336: PUSH
45337: LD_INT 1
45339: ARRAY
45340: PPUSH
45341: LD_VAR 0 2
45345: PPUSH
45346: LD_VAR 0 5
45350: PPUSH
45351: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
45355: LD_VAR 0 6
45359: PUSH
45360: LD_INT 1
45362: ARRAY
45363: PPUSH
45364: LD_VAR 0 3
45368: PPUSH
45369: LD_VAR 0 4
45373: PPUSH
45374: CALL_OW 237
// end ;
45378: PPOPN 6
45380: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
45381: LD_EXP 87
45385: IFFALSE 45393
45387: PUSH
45388: LD_EXP 134
45392: AND
45393: IFFALSE 45472
45395: GO 45397
45397: DISABLE
45398: LD_INT 0
45400: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
45401: LD_ADDR_VAR 0 1
45405: PUSH
45406: LD_INT 22
45408: PUSH
45409: LD_OWVAR 2
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 30
45420: PUSH
45421: LD_INT 3
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PPUSH
45432: CALL_OW 69
45436: ST_TO_ADDR
// if not tmp then
45437: LD_VAR 0 1
45441: NOT
45442: IFFALSE 45446
// exit ;
45444: GO 45472
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45446: LD_VAR 0 1
45450: PUSH
45451: LD_INT 1
45453: PPUSH
45454: LD_VAR 0 1
45458: PPUSH
45459: CALL_OW 12
45463: ARRAY
45464: PPUSH
45465: LD_INT 1
45467: PPUSH
45468: CALL_OW 234
// end ;
45472: PPOPN 1
45474: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45475: LD_EXP 87
45479: IFFALSE 45487
45481: PUSH
45482: LD_EXP 135
45486: AND
45487: IFFALSE 45599
45489: GO 45491
45491: DISABLE
45492: LD_INT 0
45494: PPUSH
45495: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45496: LD_ADDR_VAR 0 2
45500: PUSH
45501: LD_INT 22
45503: PUSH
45504: LD_OWVAR 2
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: PUSH
45513: LD_INT 2
45515: PUSH
45516: LD_INT 30
45518: PUSH
45519: LD_INT 27
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 30
45528: PUSH
45529: LD_INT 26
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 30
45538: PUSH
45539: LD_INT 28
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: LIST
45550: LIST
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PPUSH
45556: CALL_OW 69
45560: ST_TO_ADDR
// if not tmp then
45561: LD_VAR 0 2
45565: NOT
45566: IFFALSE 45570
// exit ;
45568: GO 45599
// for i in tmp do
45570: LD_ADDR_VAR 0 1
45574: PUSH
45575: LD_VAR 0 2
45579: PUSH
45580: FOR_IN
45581: IFFALSE 45597
// SetLives ( i , 1 ) ;
45583: LD_VAR 0 1
45587: PPUSH
45588: LD_INT 1
45590: PPUSH
45591: CALL_OW 234
45595: GO 45580
45597: POP
45598: POP
// end ;
45599: PPOPN 2
45601: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45602: LD_EXP 87
45606: IFFALSE 45614
45608: PUSH
45609: LD_EXP 136
45613: AND
45614: IFFALSE 45901
45616: GO 45618
45618: DISABLE
45619: LD_INT 0
45621: PPUSH
45622: PPUSH
45623: PPUSH
// begin i := rand ( 1 , 7 ) ;
45624: LD_ADDR_VAR 0 1
45628: PUSH
45629: LD_INT 1
45631: PPUSH
45632: LD_INT 7
45634: PPUSH
45635: CALL_OW 12
45639: ST_TO_ADDR
// case i of 1 :
45640: LD_VAR 0 1
45644: PUSH
45645: LD_INT 1
45647: DOUBLE
45648: EQUAL
45649: IFTRUE 45653
45651: GO 45663
45653: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45654: LD_STRING earthquake(getX(game), 0, 32)
45656: PPUSH
45657: CALL_OW 559
45661: GO 45901
45663: LD_INT 2
45665: DOUBLE
45666: EQUAL
45667: IFTRUE 45671
45669: GO 45685
45671: POP
// begin ToLua ( displayStucuk(); ) ;
45672: LD_STRING displayStucuk();
45674: PPUSH
45675: CALL_OW 559
// ResetFog ;
45679: CALL_OW 335
// end ; 3 :
45683: GO 45901
45685: LD_INT 3
45687: DOUBLE
45688: EQUAL
45689: IFTRUE 45693
45691: GO 45797
45693: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45694: LD_ADDR_VAR 0 2
45698: PUSH
45699: LD_INT 22
45701: PUSH
45702: LD_OWVAR 2
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 25
45713: PUSH
45714: LD_INT 1
45716: PUSH
45717: EMPTY
45718: LIST
45719: LIST
45720: PUSH
45721: EMPTY
45722: LIST
45723: LIST
45724: PPUSH
45725: CALL_OW 69
45729: ST_TO_ADDR
// if not tmp then
45730: LD_VAR 0 2
45734: NOT
45735: IFFALSE 45739
// exit ;
45737: GO 45901
// un := tmp [ rand ( 1 , tmp ) ] ;
45739: LD_ADDR_VAR 0 3
45743: PUSH
45744: LD_VAR 0 2
45748: PUSH
45749: LD_INT 1
45751: PPUSH
45752: LD_VAR 0 2
45756: PPUSH
45757: CALL_OW 12
45761: ARRAY
45762: ST_TO_ADDR
// if Crawls ( un ) then
45763: LD_VAR 0 3
45767: PPUSH
45768: CALL_OW 318
45772: IFFALSE 45783
// ComWalk ( un ) ;
45774: LD_VAR 0 3
45778: PPUSH
45779: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45783: LD_VAR 0 3
45787: PPUSH
45788: LD_INT 8
45790: PPUSH
45791: CALL_OW 336
// end ; 4 :
45795: GO 45901
45797: LD_INT 4
45799: DOUBLE
45800: EQUAL
45801: IFTRUE 45805
45803: GO 45879
45805: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45806: LD_ADDR_VAR 0 2
45810: PUSH
45811: LD_INT 22
45813: PUSH
45814: LD_OWVAR 2
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 30
45825: PUSH
45826: LD_INT 29
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: PPUSH
45837: CALL_OW 69
45841: ST_TO_ADDR
// if not tmp then
45842: LD_VAR 0 2
45846: NOT
45847: IFFALSE 45851
// exit ;
45849: GO 45901
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45851: LD_VAR 0 2
45855: PUSH
45856: LD_INT 1
45858: ARRAY
45859: PPUSH
45860: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45864: LD_VAR 0 2
45868: PUSH
45869: LD_INT 1
45871: ARRAY
45872: PPUSH
45873: CALL_OW 65
// end ; 5 .. 7 :
45877: GO 45901
45879: LD_INT 5
45881: DOUBLE
45882: GREATEREQUAL
45883: IFFALSE 45891
45885: LD_INT 7
45887: DOUBLE
45888: LESSEQUAL
45889: IFTRUE 45893
45891: GO 45900
45893: POP
// StreamSibBomb ; end ;
45894: CALL 42082 0 0
45898: GO 45901
45900: POP
// end ;
45901: PPOPN 3
45903: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45904: LD_EXP 87
45908: IFFALSE 45916
45910: PUSH
45911: LD_EXP 137
45915: AND
45916: IFFALSE 46072
45918: GO 45920
45920: DISABLE
45921: LD_INT 0
45923: PPUSH
45924: PPUSH
45925: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45926: LD_ADDR_VAR 0 2
45930: PUSH
45931: LD_INT 81
45933: PUSH
45934: LD_OWVAR 2
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 2
45945: PUSH
45946: LD_INT 21
45948: PUSH
45949: LD_INT 1
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 21
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: LIST
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PPUSH
45975: CALL_OW 69
45979: ST_TO_ADDR
// if not tmp then
45980: LD_VAR 0 2
45984: NOT
45985: IFFALSE 45989
// exit ;
45987: GO 46072
// p := 0 ;
45989: LD_ADDR_VAR 0 3
45993: PUSH
45994: LD_INT 0
45996: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45997: LD_INT 35
45999: PPUSH
46000: CALL_OW 67
// p := p + 1 ;
46004: LD_ADDR_VAR 0 3
46008: PUSH
46009: LD_VAR 0 3
46013: PUSH
46014: LD_INT 1
46016: PLUS
46017: ST_TO_ADDR
// for i in tmp do
46018: LD_ADDR_VAR 0 1
46022: PUSH
46023: LD_VAR 0 2
46027: PUSH
46028: FOR_IN
46029: IFFALSE 46060
// if GetLives ( i ) < 1000 then
46031: LD_VAR 0 1
46035: PPUSH
46036: CALL_OW 256
46040: PUSH
46041: LD_INT 1000
46043: LESS
46044: IFFALSE 46058
// SetLives ( i , 1000 ) ;
46046: LD_VAR 0 1
46050: PPUSH
46051: LD_INT 1000
46053: PPUSH
46054: CALL_OW 234
46058: GO 46028
46060: POP
46061: POP
// until p > 20 ;
46062: LD_VAR 0 3
46066: PUSH
46067: LD_INT 20
46069: GREATER
46070: IFFALSE 45997
// end ;
46072: PPOPN 3
46074: END
// every 0 0$1 trigger StreamModeActive and sTime do
46075: LD_EXP 87
46079: IFFALSE 46087
46081: PUSH
46082: LD_EXP 138
46086: AND
46087: IFFALSE 46122
46089: GO 46091
46091: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
46092: LD_INT 28
46094: PPUSH
46095: LD_OWVAR 2
46099: PPUSH
46100: LD_INT 2
46102: PPUSH
46103: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
46107: LD_INT 30
46109: PPUSH
46110: LD_OWVAR 2
46114: PPUSH
46115: LD_INT 2
46117: PPUSH
46118: CALL_OW 322
// end ;
46122: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
46123: LD_EXP 87
46127: IFFALSE 46135
46129: PUSH
46130: LD_EXP 139
46134: AND
46135: IFFALSE 46256
46137: GO 46139
46139: DISABLE
46140: LD_INT 0
46142: PPUSH
46143: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
46144: LD_ADDR_VAR 0 2
46148: PUSH
46149: LD_INT 22
46151: PUSH
46152: LD_OWVAR 2
46156: PUSH
46157: EMPTY
46158: LIST
46159: LIST
46160: PUSH
46161: LD_INT 21
46163: PUSH
46164: LD_INT 1
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: PUSH
46171: LD_INT 3
46173: PUSH
46174: LD_INT 23
46176: PUSH
46177: LD_INT 0
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: LIST
46192: PPUSH
46193: CALL_OW 69
46197: ST_TO_ADDR
// if not tmp then
46198: LD_VAR 0 2
46202: NOT
46203: IFFALSE 46207
// exit ;
46205: GO 46256
// for i in tmp do
46207: LD_ADDR_VAR 0 1
46211: PUSH
46212: LD_VAR 0 2
46216: PUSH
46217: FOR_IN
46218: IFFALSE 46254
// begin if Crawls ( i ) then
46220: LD_VAR 0 1
46224: PPUSH
46225: CALL_OW 318
46229: IFFALSE 46240
// ComWalk ( i ) ;
46231: LD_VAR 0 1
46235: PPUSH
46236: CALL_OW 138
// SetClass ( i , 2 ) ;
46240: LD_VAR 0 1
46244: PPUSH
46245: LD_INT 2
46247: PPUSH
46248: CALL_OW 336
// end ;
46252: GO 46217
46254: POP
46255: POP
// end ;
46256: PPOPN 2
46258: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
46259: LD_EXP 87
46263: IFFALSE 46271
46265: PUSH
46266: LD_EXP 140
46270: AND
46271: IFFALSE 46561
46273: GO 46275
46275: DISABLE
46276: LD_INT 0
46278: PPUSH
46279: PPUSH
46280: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
46281: LD_OWVAR 2
46285: PPUSH
46286: LD_INT 9
46288: PPUSH
46289: LD_INT 1
46291: PPUSH
46292: LD_INT 1
46294: PPUSH
46295: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
46299: LD_INT 9
46301: PPUSH
46302: LD_OWVAR 2
46306: PPUSH
46307: CALL_OW 343
// uc_side := 9 ;
46311: LD_ADDR_OWVAR 20
46315: PUSH
46316: LD_INT 9
46318: ST_TO_ADDR
// uc_nation := 2 ;
46319: LD_ADDR_OWVAR 21
46323: PUSH
46324: LD_INT 2
46326: ST_TO_ADDR
// hc_name := Dark Warrior ;
46327: LD_ADDR_OWVAR 26
46331: PUSH
46332: LD_STRING Dark Warrior
46334: ST_TO_ADDR
// hc_gallery :=  ;
46335: LD_ADDR_OWVAR 33
46339: PUSH
46340: LD_STRING 
46342: ST_TO_ADDR
// hc_noskilllimit := true ;
46343: LD_ADDR_OWVAR 76
46347: PUSH
46348: LD_INT 1
46350: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
46351: LD_ADDR_OWVAR 31
46355: PUSH
46356: LD_INT 30
46358: PUSH
46359: LD_INT 30
46361: PUSH
46362: LD_INT 30
46364: PUSH
46365: LD_INT 30
46367: PUSH
46368: EMPTY
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: ST_TO_ADDR
// un := CreateHuman ;
46374: LD_ADDR_VAR 0 3
46378: PUSH
46379: CALL_OW 44
46383: ST_TO_ADDR
// hc_noskilllimit := false ;
46384: LD_ADDR_OWVAR 76
46388: PUSH
46389: LD_INT 0
46391: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
46392: LD_VAR 0 3
46396: PPUSH
46397: LD_INT 1
46399: PPUSH
46400: CALL_OW 51
// ToLua ( playRanger() ) ;
46404: LD_STRING playRanger()
46406: PPUSH
46407: CALL_OW 559
// p := 0 ;
46411: LD_ADDR_VAR 0 2
46415: PUSH
46416: LD_INT 0
46418: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46419: LD_INT 35
46421: PPUSH
46422: CALL_OW 67
// p := p + 1 ;
46426: LD_ADDR_VAR 0 2
46430: PUSH
46431: LD_VAR 0 2
46435: PUSH
46436: LD_INT 1
46438: PLUS
46439: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46440: LD_VAR 0 3
46444: PPUSH
46445: CALL_OW 256
46449: PUSH
46450: LD_INT 1000
46452: LESS
46453: IFFALSE 46467
// SetLives ( un , 1000 ) ;
46455: LD_VAR 0 3
46459: PPUSH
46460: LD_INT 1000
46462: PPUSH
46463: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46467: LD_VAR 0 3
46471: PPUSH
46472: LD_INT 81
46474: PUSH
46475: LD_OWVAR 2
46479: PUSH
46480: EMPTY
46481: LIST
46482: LIST
46483: PUSH
46484: LD_INT 91
46486: PUSH
46487: LD_VAR 0 3
46491: PUSH
46492: LD_INT 30
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: LIST
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PPUSH
46504: CALL_OW 69
46508: PPUSH
46509: LD_VAR 0 3
46513: PPUSH
46514: CALL_OW 74
46518: PPUSH
46519: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46523: LD_VAR 0 2
46527: PUSH
46528: LD_INT 80
46530: GREATER
46531: IFTRUE 46544
46533: PUSH
46534: LD_VAR 0 3
46538: PPUSH
46539: CALL_OW 301
46543: OR
46544: IFFALSE 46419
// if un then
46546: LD_VAR 0 3
46550: IFFALSE 46561
// RemoveUnit ( un ) ;
46552: LD_VAR 0 3
46556: PPUSH
46557: CALL_OW 64
// end ;
46561: PPOPN 3
46563: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46564: LD_EXP 141
46568: IFFALSE 46684
46570: GO 46572
46572: DISABLE
46573: LD_INT 0
46575: PPUSH
46576: PPUSH
46577: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46578: LD_ADDR_VAR 0 2
46582: PUSH
46583: LD_INT 81
46585: PUSH
46586: LD_OWVAR 2
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 21
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PPUSH
46609: CALL_OW 69
46613: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46614: LD_STRING playComputer()
46616: PPUSH
46617: CALL_OW 559
// if not tmp then
46621: LD_VAR 0 2
46625: NOT
46626: IFFALSE 46630
// exit ;
46628: GO 46684
// for i in tmp do
46630: LD_ADDR_VAR 0 1
46634: PUSH
46635: LD_VAR 0 2
46639: PUSH
46640: FOR_IN
46641: IFFALSE 46682
// for j := 1 to 4 do
46643: LD_ADDR_VAR 0 3
46647: PUSH
46648: DOUBLE
46649: LD_INT 1
46651: DEC
46652: ST_TO_ADDR
46653: LD_INT 4
46655: PUSH
46656: FOR_TO
46657: IFFALSE 46678
// SetSkill ( i , j , 10 ) ;
46659: LD_VAR 0 1
46663: PPUSH
46664: LD_VAR 0 3
46668: PPUSH
46669: LD_INT 10
46671: PPUSH
46672: CALL_OW 237
46676: GO 46656
46678: POP
46679: POP
46680: GO 46640
46682: POP
46683: POP
// end ;
46684: PPOPN 3
46686: END
// every 0 0$1 trigger s30 do var i , tmp ;
46687: LD_EXP 142
46691: IFFALSE 46760
46693: GO 46695
46695: DISABLE
46696: LD_INT 0
46698: PPUSH
46699: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46700: LD_ADDR_VAR 0 2
46704: PUSH
46705: LD_INT 22
46707: PUSH
46708: LD_OWVAR 2
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PPUSH
46717: CALL_OW 69
46721: ST_TO_ADDR
// if not tmp then
46722: LD_VAR 0 2
46726: NOT
46727: IFFALSE 46731
// exit ;
46729: GO 46760
// for i in tmp do
46731: LD_ADDR_VAR 0 1
46735: PUSH
46736: LD_VAR 0 2
46740: PUSH
46741: FOR_IN
46742: IFFALSE 46758
// SetLives ( i , 300 ) ;
46744: LD_VAR 0 1
46748: PPUSH
46749: LD_INT 300
46751: PPUSH
46752: CALL_OW 234
46756: GO 46741
46758: POP
46759: POP
// end ;
46760: PPOPN 2
46762: END
// every 0 0$1 trigger s60 do var i , tmp ;
46763: LD_EXP 143
46767: IFFALSE 46836
46769: GO 46771
46771: DISABLE
46772: LD_INT 0
46774: PPUSH
46775: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46776: LD_ADDR_VAR 0 2
46780: PUSH
46781: LD_INT 22
46783: PUSH
46784: LD_OWVAR 2
46788: PUSH
46789: EMPTY
46790: LIST
46791: LIST
46792: PPUSH
46793: CALL_OW 69
46797: ST_TO_ADDR
// if not tmp then
46798: LD_VAR 0 2
46802: NOT
46803: IFFALSE 46807
// exit ;
46805: GO 46836
// for i in tmp do
46807: LD_ADDR_VAR 0 1
46811: PUSH
46812: LD_VAR 0 2
46816: PUSH
46817: FOR_IN
46818: IFFALSE 46834
// SetLives ( i , 600 ) ;
46820: LD_VAR 0 1
46824: PPUSH
46825: LD_INT 600
46827: PPUSH
46828: CALL_OW 234
46832: GO 46817
46834: POP
46835: POP
// end ;
46836: PPOPN 2
46838: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46839: LD_INT 0
46841: PPUSH
// case cmd of 301 :
46842: LD_VAR 0 1
46846: PUSH
46847: LD_INT 301
46849: DOUBLE
46850: EQUAL
46851: IFTRUE 46855
46853: GO 46887
46855: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46856: LD_VAR 0 6
46860: PPUSH
46861: LD_VAR 0 7
46865: PPUSH
46866: LD_VAR 0 8
46870: PPUSH
46871: LD_VAR 0 4
46875: PPUSH
46876: LD_VAR 0 5
46880: PPUSH
46881: CALL 48100 0 5
46885: GO 47008
46887: LD_INT 302
46889: DOUBLE
46890: EQUAL
46891: IFTRUE 46895
46893: GO 46932
46895: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46896: LD_VAR 0 6
46900: PPUSH
46901: LD_VAR 0 7
46905: PPUSH
46906: LD_VAR 0 8
46910: PPUSH
46911: LD_VAR 0 9
46915: PPUSH
46916: LD_VAR 0 4
46920: PPUSH
46921: LD_VAR 0 5
46925: PPUSH
46926: CALL 48191 0 6
46930: GO 47008
46932: LD_INT 303
46934: DOUBLE
46935: EQUAL
46936: IFTRUE 46940
46938: GO 46977
46940: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46941: LD_VAR 0 6
46945: PPUSH
46946: LD_VAR 0 7
46950: PPUSH
46951: LD_VAR 0 8
46955: PPUSH
46956: LD_VAR 0 9
46960: PPUSH
46961: LD_VAR 0 4
46965: PPUSH
46966: LD_VAR 0 5
46970: PPUSH
46971: CALL 47013 0 6
46975: GO 47008
46977: LD_INT 304
46979: DOUBLE
46980: EQUAL
46981: IFTRUE 46985
46983: GO 47007
46985: POP
// hHackTeleport ( unit , x , y ) ; end ;
46986: LD_VAR 0 2
46990: PPUSH
46991: LD_VAR 0 4
46995: PPUSH
46996: LD_VAR 0 5
47000: PPUSH
47001: CALL 48784 0 3
47005: GO 47008
47007: POP
// end ;
47008: LD_VAR 0 12
47012: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
47013: LD_INT 0
47015: PPUSH
47016: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
47017: LD_VAR 0 1
47021: PUSH
47022: LD_INT 1
47024: LESS
47025: IFTRUE 47037
47027: PUSH
47028: LD_VAR 0 1
47032: PUSH
47033: LD_INT 3
47035: GREATER
47036: OR
47037: IFTRUE 47055
47039: PUSH
47040: LD_VAR 0 5
47044: PPUSH
47045: LD_VAR 0 6
47049: PPUSH
47050: CALL_OW 428
47054: OR
47055: IFFALSE 47059
// exit ;
47057: GO 47787
// uc_side := your_side ;
47059: LD_ADDR_OWVAR 20
47063: PUSH
47064: LD_OWVAR 2
47068: ST_TO_ADDR
// uc_nation := nation ;
47069: LD_ADDR_OWVAR 21
47073: PUSH
47074: LD_VAR 0 1
47078: ST_TO_ADDR
// bc_level = 1 ;
47079: LD_ADDR_OWVAR 43
47083: PUSH
47084: LD_INT 1
47086: ST_TO_ADDR
// case btype of 1 :
47087: LD_VAR 0 2
47091: PUSH
47092: LD_INT 1
47094: DOUBLE
47095: EQUAL
47096: IFTRUE 47100
47098: GO 47111
47100: POP
// bc_type := b_depot ; 2 :
47101: LD_ADDR_OWVAR 42
47105: PUSH
47106: LD_INT 0
47108: ST_TO_ADDR
47109: GO 47731
47111: LD_INT 2
47113: DOUBLE
47114: EQUAL
47115: IFTRUE 47119
47117: GO 47130
47119: POP
// bc_type := b_warehouse ; 3 :
47120: LD_ADDR_OWVAR 42
47124: PUSH
47125: LD_INT 1
47127: ST_TO_ADDR
47128: GO 47731
47130: LD_INT 3
47132: DOUBLE
47133: EQUAL
47134: IFTRUE 47138
47136: GO 47149
47138: POP
// bc_type := b_lab ; 4 .. 9 :
47139: LD_ADDR_OWVAR 42
47143: PUSH
47144: LD_INT 6
47146: ST_TO_ADDR
47147: GO 47731
47149: LD_INT 4
47151: DOUBLE
47152: GREATEREQUAL
47153: IFFALSE 47161
47155: LD_INT 9
47157: DOUBLE
47158: LESSEQUAL
47159: IFTRUE 47163
47161: GO 47223
47163: POP
// begin bc_type := b_lab_half ;
47164: LD_ADDR_OWVAR 42
47168: PUSH
47169: LD_INT 7
47171: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
47172: LD_ADDR_OWVAR 44
47176: PUSH
47177: LD_INT 10
47179: PUSH
47180: LD_INT 11
47182: PUSH
47183: LD_INT 12
47185: PUSH
47186: LD_INT 15
47188: PUSH
47189: LD_INT 14
47191: PUSH
47192: LD_INT 13
47194: PUSH
47195: EMPTY
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: PUSH
47203: LD_VAR 0 2
47207: PUSH
47208: LD_INT 3
47210: MINUS
47211: ARRAY
47212: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
47213: LD_ADDR_OWVAR 45
47217: PUSH
47218: LD_INT 9
47220: ST_TO_ADDR
// end ; 10 .. 13 :
47221: GO 47731
47223: LD_INT 10
47225: DOUBLE
47226: GREATEREQUAL
47227: IFFALSE 47235
47229: LD_INT 13
47231: DOUBLE
47232: LESSEQUAL
47233: IFTRUE 47237
47235: GO 47314
47237: POP
// begin bc_type := b_lab_full ;
47238: LD_ADDR_OWVAR 42
47242: PUSH
47243: LD_INT 8
47245: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
47246: LD_ADDR_OWVAR 44
47250: PUSH
47251: LD_INT 10
47253: PUSH
47254: LD_INT 12
47256: PUSH
47257: LD_INT 14
47259: PUSH
47260: LD_INT 13
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: PUSH
47269: LD_VAR 0 2
47273: PUSH
47274: LD_INT 9
47276: MINUS
47277: ARRAY
47278: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
47279: LD_ADDR_OWVAR 45
47283: PUSH
47284: LD_INT 11
47286: PUSH
47287: LD_INT 15
47289: PUSH
47290: LD_INT 12
47292: PUSH
47293: LD_INT 15
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: PUSH
47302: LD_VAR 0 2
47306: PUSH
47307: LD_INT 9
47309: MINUS
47310: ARRAY
47311: ST_TO_ADDR
// end ; 14 :
47312: GO 47731
47314: LD_INT 14
47316: DOUBLE
47317: EQUAL
47318: IFTRUE 47322
47320: GO 47333
47322: POP
// bc_type := b_workshop ; 15 :
47323: LD_ADDR_OWVAR 42
47327: PUSH
47328: LD_INT 2
47330: ST_TO_ADDR
47331: GO 47731
47333: LD_INT 15
47335: DOUBLE
47336: EQUAL
47337: IFTRUE 47341
47339: GO 47352
47341: POP
// bc_type := b_factory ; 16 :
47342: LD_ADDR_OWVAR 42
47346: PUSH
47347: LD_INT 3
47349: ST_TO_ADDR
47350: GO 47731
47352: LD_INT 16
47354: DOUBLE
47355: EQUAL
47356: IFTRUE 47360
47358: GO 47371
47360: POP
// bc_type := b_ext_gun ; 17 :
47361: LD_ADDR_OWVAR 42
47365: PUSH
47366: LD_INT 17
47368: ST_TO_ADDR
47369: GO 47731
47371: LD_INT 17
47373: DOUBLE
47374: EQUAL
47375: IFTRUE 47379
47377: GO 47407
47379: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
47380: LD_ADDR_OWVAR 42
47384: PUSH
47385: LD_INT 19
47387: PUSH
47388: LD_INT 23
47390: PUSH
47391: LD_INT 19
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: LIST
47398: PUSH
47399: LD_VAR 0 1
47403: ARRAY
47404: ST_TO_ADDR
47405: GO 47731
47407: LD_INT 18
47409: DOUBLE
47410: EQUAL
47411: IFTRUE 47415
47413: GO 47426
47415: POP
// bc_type := b_ext_radar ; 19 :
47416: LD_ADDR_OWVAR 42
47420: PUSH
47421: LD_INT 20
47423: ST_TO_ADDR
47424: GO 47731
47426: LD_INT 19
47428: DOUBLE
47429: EQUAL
47430: IFTRUE 47434
47432: GO 47445
47434: POP
// bc_type := b_ext_radio ; 20 :
47435: LD_ADDR_OWVAR 42
47439: PUSH
47440: LD_INT 22
47442: ST_TO_ADDR
47443: GO 47731
47445: LD_INT 20
47447: DOUBLE
47448: EQUAL
47449: IFTRUE 47453
47451: GO 47464
47453: POP
// bc_type := b_ext_siberium ; 21 :
47454: LD_ADDR_OWVAR 42
47458: PUSH
47459: LD_INT 21
47461: ST_TO_ADDR
47462: GO 47731
47464: LD_INT 21
47466: DOUBLE
47467: EQUAL
47468: IFTRUE 47472
47470: GO 47483
47472: POP
// bc_type := b_ext_computer ; 22 :
47473: LD_ADDR_OWVAR 42
47477: PUSH
47478: LD_INT 24
47480: ST_TO_ADDR
47481: GO 47731
47483: LD_INT 22
47485: DOUBLE
47486: EQUAL
47487: IFTRUE 47491
47489: GO 47502
47491: POP
// bc_type := b_ext_track ; 23 :
47492: LD_ADDR_OWVAR 42
47496: PUSH
47497: LD_INT 16
47499: ST_TO_ADDR
47500: GO 47731
47502: LD_INT 23
47504: DOUBLE
47505: EQUAL
47506: IFTRUE 47510
47508: GO 47521
47510: POP
// bc_type := b_ext_laser ; 24 :
47511: LD_ADDR_OWVAR 42
47515: PUSH
47516: LD_INT 25
47518: ST_TO_ADDR
47519: GO 47731
47521: LD_INT 24
47523: DOUBLE
47524: EQUAL
47525: IFTRUE 47529
47527: GO 47540
47529: POP
// bc_type := b_control_tower ; 25 :
47530: LD_ADDR_OWVAR 42
47534: PUSH
47535: LD_INT 36
47537: ST_TO_ADDR
47538: GO 47731
47540: LD_INT 25
47542: DOUBLE
47543: EQUAL
47544: IFTRUE 47548
47546: GO 47559
47548: POP
// bc_type := b_breastwork ; 26 :
47549: LD_ADDR_OWVAR 42
47553: PUSH
47554: LD_INT 31
47556: ST_TO_ADDR
47557: GO 47731
47559: LD_INT 26
47561: DOUBLE
47562: EQUAL
47563: IFTRUE 47567
47565: GO 47578
47567: POP
// bc_type := b_bunker ; 27 :
47568: LD_ADDR_OWVAR 42
47572: PUSH
47573: LD_INT 32
47575: ST_TO_ADDR
47576: GO 47731
47578: LD_INT 27
47580: DOUBLE
47581: EQUAL
47582: IFTRUE 47586
47584: GO 47597
47586: POP
// bc_type := b_turret ; 28 :
47587: LD_ADDR_OWVAR 42
47591: PUSH
47592: LD_INT 33
47594: ST_TO_ADDR
47595: GO 47731
47597: LD_INT 28
47599: DOUBLE
47600: EQUAL
47601: IFTRUE 47605
47603: GO 47616
47605: POP
// bc_type := b_armoury ; 29 :
47606: LD_ADDR_OWVAR 42
47610: PUSH
47611: LD_INT 4
47613: ST_TO_ADDR
47614: GO 47731
47616: LD_INT 29
47618: DOUBLE
47619: EQUAL
47620: IFTRUE 47624
47622: GO 47635
47624: POP
// bc_type := b_barracks ; 30 :
47625: LD_ADDR_OWVAR 42
47629: PUSH
47630: LD_INT 5
47632: ST_TO_ADDR
47633: GO 47731
47635: LD_INT 30
47637: DOUBLE
47638: EQUAL
47639: IFTRUE 47643
47641: GO 47654
47643: POP
// bc_type := b_solar_power ; 31 :
47644: LD_ADDR_OWVAR 42
47648: PUSH
47649: LD_INT 27
47651: ST_TO_ADDR
47652: GO 47731
47654: LD_INT 31
47656: DOUBLE
47657: EQUAL
47658: IFTRUE 47662
47660: GO 47673
47662: POP
// bc_type := b_oil_power ; 32 :
47663: LD_ADDR_OWVAR 42
47667: PUSH
47668: LD_INT 26
47670: ST_TO_ADDR
47671: GO 47731
47673: LD_INT 32
47675: DOUBLE
47676: EQUAL
47677: IFTRUE 47681
47679: GO 47692
47681: POP
// bc_type := b_siberite_power ; 33 :
47682: LD_ADDR_OWVAR 42
47686: PUSH
47687: LD_INT 28
47689: ST_TO_ADDR
47690: GO 47731
47692: LD_INT 33
47694: DOUBLE
47695: EQUAL
47696: IFTRUE 47700
47698: GO 47711
47700: POP
// bc_type := b_oil_mine ; 34 :
47701: LD_ADDR_OWVAR 42
47705: PUSH
47706: LD_INT 29
47708: ST_TO_ADDR
47709: GO 47731
47711: LD_INT 34
47713: DOUBLE
47714: EQUAL
47715: IFTRUE 47719
47717: GO 47730
47719: POP
// bc_type := b_siberite_mine ; end ;
47720: LD_ADDR_OWVAR 42
47724: PUSH
47725: LD_INT 30
47727: ST_TO_ADDR
47728: GO 47731
47730: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47731: LD_ADDR_VAR 0 8
47735: PUSH
47736: LD_VAR 0 5
47740: PPUSH
47741: LD_VAR 0 6
47745: PPUSH
47746: LD_VAR 0 3
47750: PPUSH
47751: CALL_OW 47
47755: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47756: LD_OWVAR 42
47760: PUSH
47761: LD_INT 32
47763: PUSH
47764: LD_INT 33
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: IN
47771: IFFALSE 47787
// PlaceWeaponTurret ( b , weapon ) ;
47773: LD_VAR 0 8
47777: PPUSH
47778: LD_VAR 0 4
47782: PPUSH
47783: CALL_OW 431
// end ;
47787: LD_VAR 0 7
47791: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47792: LD_INT 0
47794: PPUSH
47795: PPUSH
47796: PPUSH
47797: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47798: LD_ADDR_VAR 0 4
47802: PUSH
47803: LD_INT 22
47805: PUSH
47806: LD_OWVAR 2
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 2
47817: PUSH
47818: LD_INT 30
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: LD_INT 30
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: EMPTY
47839: LIST
47840: LIST
47841: LIST
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PPUSH
47847: CALL_OW 69
47851: ST_TO_ADDR
// if not tmp then
47852: LD_VAR 0 4
47856: NOT
47857: IFFALSE 47861
// exit ;
47859: GO 47920
// for i in tmp do
47861: LD_ADDR_VAR 0 2
47865: PUSH
47866: LD_VAR 0 4
47870: PUSH
47871: FOR_IN
47872: IFFALSE 47918
// for j = 1 to 3 do
47874: LD_ADDR_VAR 0 3
47878: PUSH
47879: DOUBLE
47880: LD_INT 1
47882: DEC
47883: ST_TO_ADDR
47884: LD_INT 3
47886: PUSH
47887: FOR_TO
47888: IFFALSE 47914
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47890: LD_VAR 0 2
47894: PPUSH
47895: CALL_OW 274
47899: PPUSH
47900: LD_VAR 0 3
47904: PPUSH
47905: LD_INT 99999
47907: PPUSH
47908: CALL_OW 277
47912: GO 47887
47914: POP
47915: POP
47916: GO 47871
47918: POP
47919: POP
// end ;
47920: LD_VAR 0 1
47924: RET
// export function hHackSetLevel10 ; var i , j ; begin
47925: LD_INT 0
47927: PPUSH
47928: PPUSH
47929: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47930: LD_ADDR_VAR 0 2
47934: PUSH
47935: LD_INT 21
47937: PUSH
47938: LD_INT 1
47940: PUSH
47941: EMPTY
47942: LIST
47943: LIST
47944: PPUSH
47945: CALL_OW 69
47949: PUSH
47950: FOR_IN
47951: IFFALSE 48003
// if IsSelected ( i ) then
47953: LD_VAR 0 2
47957: PPUSH
47958: CALL_OW 306
47962: IFFALSE 48001
// begin for j := 1 to 4 do
47964: LD_ADDR_VAR 0 3
47968: PUSH
47969: DOUBLE
47970: LD_INT 1
47972: DEC
47973: ST_TO_ADDR
47974: LD_INT 4
47976: PUSH
47977: FOR_TO
47978: IFFALSE 47999
// SetSkill ( i , j , 10 ) ;
47980: LD_VAR 0 2
47984: PPUSH
47985: LD_VAR 0 3
47989: PPUSH
47990: LD_INT 10
47992: PPUSH
47993: CALL_OW 237
47997: GO 47977
47999: POP
48000: POP
// end ;
48001: GO 47950
48003: POP
48004: POP
// end ;
48005: LD_VAR 0 1
48009: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
48010: LD_INT 0
48012: PPUSH
48013: PPUSH
48014: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
48015: LD_ADDR_VAR 0 2
48019: PUSH
48020: LD_INT 22
48022: PUSH
48023: LD_OWVAR 2
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 21
48034: PUSH
48035: LD_INT 1
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PPUSH
48046: CALL_OW 69
48050: PUSH
48051: FOR_IN
48052: IFFALSE 48093
// begin for j := 1 to 4 do
48054: LD_ADDR_VAR 0 3
48058: PUSH
48059: DOUBLE
48060: LD_INT 1
48062: DEC
48063: ST_TO_ADDR
48064: LD_INT 4
48066: PUSH
48067: FOR_TO
48068: IFFALSE 48089
// SetSkill ( i , j , 10 ) ;
48070: LD_VAR 0 2
48074: PPUSH
48075: LD_VAR 0 3
48079: PPUSH
48080: LD_INT 10
48082: PPUSH
48083: CALL_OW 237
48087: GO 48067
48089: POP
48090: POP
// end ;
48091: GO 48051
48093: POP
48094: POP
// end ;
48095: LD_VAR 0 1
48099: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
48100: LD_INT 0
48102: PPUSH
// uc_side := your_side ;
48103: LD_ADDR_OWVAR 20
48107: PUSH
48108: LD_OWVAR 2
48112: ST_TO_ADDR
// uc_nation := nation ;
48113: LD_ADDR_OWVAR 21
48117: PUSH
48118: LD_VAR 0 1
48122: ST_TO_ADDR
// InitHc ;
48123: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
48127: LD_INT 0
48129: PPUSH
48130: LD_VAR 0 2
48134: PPUSH
48135: LD_VAR 0 3
48139: PPUSH
48140: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
48144: LD_VAR 0 4
48148: PPUSH
48149: LD_VAR 0 5
48153: PPUSH
48154: CALL_OW 428
48158: PUSH
48159: LD_INT 0
48161: EQUAL
48162: IFFALSE 48186
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
48164: CALL_OW 44
48168: PPUSH
48169: LD_VAR 0 4
48173: PPUSH
48174: LD_VAR 0 5
48178: PPUSH
48179: LD_INT 1
48181: PPUSH
48182: CALL_OW 48
// end ;
48186: LD_VAR 0 6
48190: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
48191: LD_INT 0
48193: PPUSH
48194: PPUSH
// uc_side := your_side ;
48195: LD_ADDR_OWVAR 20
48199: PUSH
48200: LD_OWVAR 2
48204: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
48205: LD_VAR 0 1
48209: PUSH
48210: LD_INT 1
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: LD_INT 3
48218: PUSH
48219: LD_INT 4
48221: PUSH
48222: LD_INT 5
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: LIST
48229: LIST
48230: LIST
48231: IN
48232: IFFALSE 48244
// uc_nation := nation_american else
48234: LD_ADDR_OWVAR 21
48238: PUSH
48239: LD_INT 1
48241: ST_TO_ADDR
48242: GO 48287
// if chassis in [ 11 , 12 , 13 , 14 ] then
48244: LD_VAR 0 1
48248: PUSH
48249: LD_INT 11
48251: PUSH
48252: LD_INT 12
48254: PUSH
48255: LD_INT 13
48257: PUSH
48258: LD_INT 14
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: LIST
48265: LIST
48266: IN
48267: IFFALSE 48279
// uc_nation := nation_arabian else
48269: LD_ADDR_OWVAR 21
48273: PUSH
48274: LD_INT 2
48276: ST_TO_ADDR
48277: GO 48287
// uc_nation := nation_russian ;
48279: LD_ADDR_OWVAR 21
48283: PUSH
48284: LD_INT 3
48286: ST_TO_ADDR
// vc_chassis := chassis ;
48287: LD_ADDR_OWVAR 37
48291: PUSH
48292: LD_VAR 0 1
48296: ST_TO_ADDR
// vc_engine := engine ;
48297: LD_ADDR_OWVAR 39
48301: PUSH
48302: LD_VAR 0 2
48306: ST_TO_ADDR
// vc_control := control ;
48307: LD_ADDR_OWVAR 38
48311: PUSH
48312: LD_VAR 0 3
48316: ST_TO_ADDR
// vc_weapon := weapon ;
48317: LD_ADDR_OWVAR 40
48321: PUSH
48322: LD_VAR 0 4
48326: ST_TO_ADDR
// un := CreateVehicle ;
48327: LD_ADDR_VAR 0 8
48331: PUSH
48332: CALL_OW 45
48336: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
48337: LD_VAR 0 8
48341: PPUSH
48342: LD_INT 0
48344: PPUSH
48345: LD_INT 5
48347: PPUSH
48348: CALL_OW 12
48352: PPUSH
48353: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
48357: LD_VAR 0 8
48361: PPUSH
48362: LD_VAR 0 5
48366: PPUSH
48367: LD_VAR 0 6
48371: PPUSH
48372: LD_INT 1
48374: PPUSH
48375: CALL_OW 48
// end ;
48379: LD_VAR 0 7
48383: RET
// export hInvincible ; every 1 do
48384: GO 48386
48386: DISABLE
// hInvincible := [ ] ;
48387: LD_ADDR_EXP 144
48391: PUSH
48392: EMPTY
48393: ST_TO_ADDR
48394: END
// every 10 do var i ;
48395: GO 48397
48397: DISABLE
48398: LD_INT 0
48400: PPUSH
// begin enable ;
48401: ENABLE
// if not hInvincible then
48402: LD_EXP 144
48406: NOT
48407: IFFALSE 48411
// exit ;
48409: GO 48455
// for i in hInvincible do
48411: LD_ADDR_VAR 0 1
48415: PUSH
48416: LD_EXP 144
48420: PUSH
48421: FOR_IN
48422: IFFALSE 48453
// if GetLives ( i ) < 1000 then
48424: LD_VAR 0 1
48428: PPUSH
48429: CALL_OW 256
48433: PUSH
48434: LD_INT 1000
48436: LESS
48437: IFFALSE 48451
// SetLives ( i , 1000 ) ;
48439: LD_VAR 0 1
48443: PPUSH
48444: LD_INT 1000
48446: PPUSH
48447: CALL_OW 234
48451: GO 48421
48453: POP
48454: POP
// end ;
48455: PPOPN 1
48457: END
// export function hHackInvincible ; var i ; begin
48458: LD_INT 0
48460: PPUSH
48461: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48462: LD_ADDR_VAR 0 2
48466: PUSH
48467: LD_INT 2
48469: PUSH
48470: LD_INT 21
48472: PUSH
48473: LD_INT 1
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: LD_INT 21
48482: PUSH
48483: LD_INT 2
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: LIST
48494: PPUSH
48495: CALL_OW 69
48499: PUSH
48500: FOR_IN
48501: IFFALSE 48562
// if IsSelected ( i ) then
48503: LD_VAR 0 2
48507: PPUSH
48508: CALL_OW 306
48512: IFFALSE 48560
// begin if i in hInvincible then
48514: LD_VAR 0 2
48518: PUSH
48519: LD_EXP 144
48523: IN
48524: IFFALSE 48544
// hInvincible := hInvincible diff i else
48526: LD_ADDR_EXP 144
48530: PUSH
48531: LD_EXP 144
48535: PUSH
48536: LD_VAR 0 2
48540: DIFF
48541: ST_TO_ADDR
48542: GO 48560
// hInvincible := hInvincible union i ;
48544: LD_ADDR_EXP 144
48548: PUSH
48549: LD_EXP 144
48553: PUSH
48554: LD_VAR 0 2
48558: UNION
48559: ST_TO_ADDR
// end ;
48560: GO 48500
48562: POP
48563: POP
// end ;
48564: LD_VAR 0 1
48568: RET
// export function hHackInvisible ; var i , j ; begin
48569: LD_INT 0
48571: PPUSH
48572: PPUSH
48573: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48574: LD_ADDR_VAR 0 2
48578: PUSH
48579: LD_INT 21
48581: PUSH
48582: LD_INT 1
48584: PUSH
48585: EMPTY
48586: LIST
48587: LIST
48588: PPUSH
48589: CALL_OW 69
48593: PUSH
48594: FOR_IN
48595: IFFALSE 48619
// if IsSelected ( i ) then
48597: LD_VAR 0 2
48601: PPUSH
48602: CALL_OW 306
48606: IFFALSE 48617
// ComForceInvisible ( i ) ;
48608: LD_VAR 0 2
48612: PPUSH
48613: CALL_OW 496
48617: GO 48594
48619: POP
48620: POP
// end ;
48621: LD_VAR 0 1
48625: RET
// export function hHackChangeYourSide ; begin
48626: LD_INT 0
48628: PPUSH
// if your_side = 8 then
48629: LD_OWVAR 2
48633: PUSH
48634: LD_INT 8
48636: EQUAL
48637: IFFALSE 48649
// your_side := 0 else
48639: LD_ADDR_OWVAR 2
48643: PUSH
48644: LD_INT 0
48646: ST_TO_ADDR
48647: GO 48663
// your_side := your_side + 1 ;
48649: LD_ADDR_OWVAR 2
48653: PUSH
48654: LD_OWVAR 2
48658: PUSH
48659: LD_INT 1
48661: PLUS
48662: ST_TO_ADDR
// end ;
48663: LD_VAR 0 1
48667: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48668: LD_INT 0
48670: PPUSH
48671: PPUSH
48672: PPUSH
// for i in all_units do
48673: LD_ADDR_VAR 0 2
48677: PUSH
48678: LD_OWVAR 3
48682: PUSH
48683: FOR_IN
48684: IFFALSE 48762
// if IsSelected ( i ) then
48686: LD_VAR 0 2
48690: PPUSH
48691: CALL_OW 306
48695: IFFALSE 48760
// begin j := GetSide ( i ) ;
48697: LD_ADDR_VAR 0 3
48701: PUSH
48702: LD_VAR 0 2
48706: PPUSH
48707: CALL_OW 255
48711: ST_TO_ADDR
// if j = 8 then
48712: LD_VAR 0 3
48716: PUSH
48717: LD_INT 8
48719: EQUAL
48720: IFFALSE 48732
// j := 0 else
48722: LD_ADDR_VAR 0 3
48726: PUSH
48727: LD_INT 0
48729: ST_TO_ADDR
48730: GO 48746
// j := j + 1 ;
48732: LD_ADDR_VAR 0 3
48736: PUSH
48737: LD_VAR 0 3
48741: PUSH
48742: LD_INT 1
48744: PLUS
48745: ST_TO_ADDR
// SetSide ( i , j ) ;
48746: LD_VAR 0 2
48750: PPUSH
48751: LD_VAR 0 3
48755: PPUSH
48756: CALL_OW 235
// end ;
48760: GO 48683
48762: POP
48763: POP
// end ;
48764: LD_VAR 0 1
48768: RET
// export function hHackFog ; begin
48769: LD_INT 0
48771: PPUSH
// FogOff ( true ) ;
48772: LD_INT 1
48774: PPUSH
48775: CALL_OW 344
// end ;
48779: LD_VAR 0 1
48783: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48784: LD_INT 0
48786: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48787: LD_VAR 0 1
48791: PPUSH
48792: LD_VAR 0 2
48796: PPUSH
48797: LD_VAR 0 3
48801: PPUSH
48802: LD_INT 1
48804: PPUSH
48805: LD_INT 1
48807: PPUSH
48808: CALL_OW 483
// CenterOnXY ( x , y ) ;
48812: LD_VAR 0 2
48816: PPUSH
48817: LD_VAR 0 3
48821: PPUSH
48822: CALL_OW 84
// end ;
48826: LD_VAR 0 4
48830: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48831: LD_INT 0
48833: PPUSH
48834: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48835: LD_VAR 0 1
48839: NOT
48840: IFTRUE 48859
48842: PUSH
48843: LD_VAR 0 2
48847: PPUSH
48848: LD_VAR 0 3
48852: PPUSH
48853: CALL_OW 488
48857: NOT
48858: OR
48859: IFTRUE 48894
48861: PUSH
48862: LD_VAR 0 1
48866: PPUSH
48867: CALL_OW 266
48871: PUSH
48872: LD_INT 3
48874: NONEQUAL
48875: IFFALSE 48893
48877: PUSH
48878: LD_VAR 0 1
48882: PPUSH
48883: CALL_OW 247
48887: PUSH
48888: LD_INT 1
48890: EQUAL
48891: NOT
48892: AND
48893: OR
48894: IFFALSE 48898
// exit ;
48896: GO 49180
// if GetType ( factory ) = unit_human then
48898: LD_VAR 0 1
48902: PPUSH
48903: CALL_OW 247
48907: PUSH
48908: LD_INT 1
48910: EQUAL
48911: IFFALSE 48928
// factory := IsInUnit ( factory ) ;
48913: LD_ADDR_VAR 0 1
48917: PUSH
48918: LD_VAR 0 1
48922: PPUSH
48923: CALL_OW 310
48927: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48928: LD_VAR 0 1
48932: PPUSH
48933: CALL_OW 266
48937: PUSH
48938: LD_INT 3
48940: NONEQUAL
48941: IFFALSE 48945
// exit ;
48943: GO 49180
// for i := 1 to Count ( factoryWaypoints ) do
48945: LD_ADDR_VAR 0 5
48949: PUSH
48950: DOUBLE
48951: LD_INT 1
48953: DEC
48954: ST_TO_ADDR
48955: LD_EXP 145
48959: PPUSH
48960: CALL 58984 0 1
48964: PUSH
48965: FOR_TO
48966: IFFALSE 49128
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
48968: LD_VAR 0 2
48972: PPUSH
48973: LD_VAR 0 3
48977: PPUSH
48978: CALL_OW 428
48982: PUSH
48983: LD_EXP 145
48987: PUSH
48988: LD_VAR 0 5
48992: ARRAY
48993: PUSH
48994: LD_INT 2
48996: ARRAY
48997: EQUAL
48998: IFFALSE 49030
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
49000: LD_ADDR_EXP 145
49004: PUSH
49005: LD_EXP 145
49009: PPUSH
49010: LD_VAR 0 5
49014: PPUSH
49015: CALL_OW 3
49019: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49020: CALL 49185 0 0
// exit ;
49024: POP
49025: POP
49026: GO 49180
// end else
49028: GO 49126
// if factory = factoryWaypoints [ i ] [ 2 ] then
49030: LD_VAR 0 1
49034: PUSH
49035: LD_EXP 145
49039: PUSH
49040: LD_VAR 0 5
49044: ARRAY
49045: PUSH
49046: LD_INT 2
49048: ARRAY
49049: EQUAL
49050: IFFALSE 49126
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
49052: LD_ADDR_EXP 145
49056: PUSH
49057: LD_EXP 145
49061: PPUSH
49062: LD_VAR 0 5
49066: PPUSH
49067: CALL_OW 3
49071: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
49072: LD_ADDR_EXP 145
49076: PUSH
49077: LD_EXP 145
49081: PPUSH
49082: LD_VAR 0 1
49086: PPUSH
49087: CALL_OW 255
49091: PUSH
49092: LD_VAR 0 1
49096: PUSH
49097: LD_VAR 0 2
49101: PUSH
49102: LD_VAR 0 3
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: LIST
49111: LIST
49112: PPUSH
49113: CALL 94960 0 2
49117: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49118: CALL 49185 0 0
// exit ;
49122: POP
49123: POP
49124: GO 49180
// end ; end ;
49126: GO 48965
49128: POP
49129: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
49130: LD_ADDR_EXP 145
49134: PUSH
49135: LD_EXP 145
49139: PPUSH
49140: LD_VAR 0 1
49144: PPUSH
49145: CALL_OW 255
49149: PUSH
49150: LD_VAR 0 1
49154: PUSH
49155: LD_VAR 0 2
49159: PUSH
49160: LD_VAR 0 3
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: PPUSH
49171: CALL 94960 0 2
49175: ST_TO_ADDR
// UpdateFactoryWaypoints ;
49176: CALL 49185 0 0
// end ;
49180: LD_VAR 0 4
49184: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
49185: LD_INT 0
49187: PPUSH
49188: PPUSH
49189: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
49190: LD_STRING resetFactoryWaypoint();
49192: PPUSH
49193: CALL_OW 559
// if factoryWaypoints then
49197: LD_EXP 145
49201: IFFALSE 49322
// begin list := factoryWaypoints ;
49203: LD_ADDR_VAR 0 3
49207: PUSH
49208: LD_EXP 145
49212: ST_TO_ADDR
// for i := 1 to list do
49213: LD_ADDR_VAR 0 2
49217: PUSH
49218: DOUBLE
49219: LD_INT 1
49221: DEC
49222: ST_TO_ADDR
49223: LD_VAR 0 3
49227: PUSH
49228: FOR_TO
49229: IFFALSE 49320
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
49231: LD_STRING setFactoryWaypointXY(
49233: PUSH
49234: LD_VAR 0 3
49238: PUSH
49239: LD_VAR 0 2
49243: ARRAY
49244: PUSH
49245: LD_INT 1
49247: ARRAY
49248: STR
49249: PUSH
49250: LD_STRING ,
49252: STR
49253: PUSH
49254: LD_VAR 0 3
49258: PUSH
49259: LD_VAR 0 2
49263: ARRAY
49264: PUSH
49265: LD_INT 2
49267: ARRAY
49268: STR
49269: PUSH
49270: LD_STRING ,
49272: STR
49273: PUSH
49274: LD_VAR 0 3
49278: PUSH
49279: LD_VAR 0 2
49283: ARRAY
49284: PUSH
49285: LD_INT 3
49287: ARRAY
49288: STR
49289: PUSH
49290: LD_STRING ,
49292: STR
49293: PUSH
49294: LD_VAR 0 3
49298: PUSH
49299: LD_VAR 0 2
49303: ARRAY
49304: PUSH
49305: LD_INT 4
49307: ARRAY
49308: STR
49309: PUSH
49310: LD_STRING )
49312: STR
49313: PPUSH
49314: CALL_OW 559
49318: GO 49228
49320: POP
49321: POP
// end ; end ;
49322: LD_VAR 0 1
49326: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
49327: LD_INT 0
49329: PPUSH
// if HexInfo ( x , y ) = warehouse then
49330: LD_VAR 0 2
49334: PPUSH
49335: LD_VAR 0 3
49339: PPUSH
49340: CALL_OW 428
49344: PUSH
49345: LD_VAR 0 1
49349: EQUAL
49350: IFFALSE 49377
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
49352: LD_ADDR_EXP 147
49356: PUSH
49357: LD_EXP 147
49361: PPUSH
49362: LD_VAR 0 1
49366: PPUSH
49367: LD_INT 0
49369: PPUSH
49370: CALL_OW 1
49374: ST_TO_ADDR
49375: GO 49428
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
49377: LD_ADDR_EXP 147
49381: PUSH
49382: LD_EXP 147
49386: PPUSH
49387: LD_VAR 0 1
49391: PPUSH
49392: LD_VAR 0 1
49396: PPUSH
49397: CALL_OW 255
49401: PUSH
49402: LD_VAR 0 1
49406: PUSH
49407: LD_VAR 0 2
49411: PUSH
49412: LD_VAR 0 3
49416: PUSH
49417: EMPTY
49418: LIST
49419: LIST
49420: LIST
49421: LIST
49422: PPUSH
49423: CALL_OW 1
49427: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
49428: CALL 49437 0 0
// end ;
49432: LD_VAR 0 4
49436: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
49437: LD_INT 0
49439: PPUSH
49440: PPUSH
49441: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
49442: LD_STRING resetWarehouseGatheringPoints();
49444: PPUSH
49445: CALL_OW 559
// if warehouseGatheringPoints then
49449: LD_EXP 147
49453: IFFALSE 49579
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
49455: LD_ADDR_VAR 0 3
49459: PUSH
49460: LD_EXP 147
49464: PPUSH
49465: CALL 98894 0 1
49469: ST_TO_ADDR
// for i := 1 to list do
49470: LD_ADDR_VAR 0 2
49474: PUSH
49475: DOUBLE
49476: LD_INT 1
49478: DEC
49479: ST_TO_ADDR
49480: LD_VAR 0 3
49484: PUSH
49485: FOR_TO
49486: IFFALSE 49577
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
49488: LD_STRING setWarehouseGatheringPointXY(
49490: PUSH
49491: LD_VAR 0 3
49495: PUSH
49496: LD_VAR 0 2
49500: ARRAY
49501: PUSH
49502: LD_INT 1
49504: ARRAY
49505: STR
49506: PUSH
49507: LD_STRING ,
49509: STR
49510: PUSH
49511: LD_VAR 0 3
49515: PUSH
49516: LD_VAR 0 2
49520: ARRAY
49521: PUSH
49522: LD_INT 2
49524: ARRAY
49525: STR
49526: PUSH
49527: LD_STRING ,
49529: STR
49530: PUSH
49531: LD_VAR 0 3
49535: PUSH
49536: LD_VAR 0 2
49540: ARRAY
49541: PUSH
49542: LD_INT 3
49544: ARRAY
49545: STR
49546: PUSH
49547: LD_STRING ,
49549: STR
49550: PUSH
49551: LD_VAR 0 3
49555: PUSH
49556: LD_VAR 0 2
49560: ARRAY
49561: PUSH
49562: LD_INT 4
49564: ARRAY
49565: STR
49566: PUSH
49567: LD_STRING )
49569: STR
49570: PPUSH
49571: CALL_OW 559
49575: GO 49485
49577: POP
49578: POP
// end ; end ;
49579: LD_VAR 0 1
49583: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49584: LD_EXP 147
49588: IFFALSE 50283
49590: GO 49592
49592: DISABLE
49593: LD_INT 0
49595: PPUSH
49596: PPUSH
49597: PPUSH
49598: PPUSH
49599: PPUSH
49600: PPUSH
49601: PPUSH
49602: PPUSH
49603: PPUSH
// begin enable ;
49604: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49605: LD_ADDR_VAR 0 3
49609: PUSH
49610: LD_EXP 147
49614: PPUSH
49615: CALL 98894 0 1
49619: ST_TO_ADDR
// if not list then
49620: LD_VAR 0 3
49624: NOT
49625: IFFALSE 49629
// exit ;
49627: GO 50283
// for i := 1 to list do
49629: LD_ADDR_VAR 0 1
49633: PUSH
49634: DOUBLE
49635: LD_INT 1
49637: DEC
49638: ST_TO_ADDR
49639: LD_VAR 0 3
49643: PUSH
49644: FOR_TO
49645: IFFALSE 50281
// begin depot := list [ i ] [ 2 ] ;
49647: LD_ADDR_VAR 0 8
49651: PUSH
49652: LD_VAR 0 3
49656: PUSH
49657: LD_VAR 0 1
49661: ARRAY
49662: PUSH
49663: LD_INT 2
49665: ARRAY
49666: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49667: LD_ADDR_VAR 0 5
49671: PUSH
49672: LD_VAR 0 3
49676: PUSH
49677: LD_VAR 0 1
49681: ARRAY
49682: PUSH
49683: LD_INT 1
49685: ARRAY
49686: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49687: LD_VAR 0 8
49691: PPUSH
49692: CALL_OW 301
49696: IFTRUE 49715
49698: PUSH
49699: LD_VAR 0 5
49703: PUSH
49704: LD_VAR 0 8
49708: PPUSH
49709: CALL_OW 255
49713: NONEQUAL
49714: OR
49715: IFFALSE 49744
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49717: LD_ADDR_EXP 147
49721: PUSH
49722: LD_EXP 147
49726: PPUSH
49727: LD_VAR 0 8
49731: PPUSH
49732: LD_INT 0
49734: PPUSH
49735: CALL_OW 1
49739: ST_TO_ADDR
// exit ;
49740: POP
49741: POP
49742: GO 50283
// end ; x := list [ i ] [ 3 ] ;
49744: LD_ADDR_VAR 0 6
49748: PUSH
49749: LD_VAR 0 3
49753: PUSH
49754: LD_VAR 0 1
49758: ARRAY
49759: PUSH
49760: LD_INT 3
49762: ARRAY
49763: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49764: LD_ADDR_VAR 0 7
49768: PUSH
49769: LD_VAR 0 3
49773: PUSH
49774: LD_VAR 0 1
49778: ARRAY
49779: PUSH
49780: LD_INT 4
49782: ARRAY
49783: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49784: LD_ADDR_VAR 0 9
49788: PUSH
49789: LD_VAR 0 6
49793: PPUSH
49794: LD_VAR 0 7
49798: PPUSH
49799: LD_INT 16
49801: PPUSH
49802: CALL 97468 0 3
49806: ST_TO_ADDR
// if not cratesNearbyPoint then
49807: LD_VAR 0 9
49811: NOT
49812: IFFALSE 49818
// exit ;
49814: POP
49815: POP
49816: GO 50283
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49818: LD_ADDR_VAR 0 4
49822: PUSH
49823: LD_INT 22
49825: PUSH
49826: LD_VAR 0 5
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 3
49837: PUSH
49838: LD_INT 60
49840: PUSH
49841: EMPTY
49842: LIST
49843: PUSH
49844: EMPTY
49845: LIST
49846: LIST
49847: PUSH
49848: LD_INT 91
49850: PUSH
49851: LD_VAR 0 8
49855: PUSH
49856: LD_INT 6
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: LIST
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: LD_INT 25
49869: PUSH
49870: LD_INT 2
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: LD_INT 25
49879: PUSH
49880: LD_INT 16
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: PUSH
49892: EMPTY
49893: LIST
49894: LIST
49895: LIST
49896: LIST
49897: PPUSH
49898: CALL_OW 69
49902: PUSH
49903: LD_VAR 0 8
49907: PPUSH
49908: CALL_OW 313
49912: PPUSH
49913: LD_INT 3
49915: PUSH
49916: LD_INT 60
49918: PUSH
49919: EMPTY
49920: LIST
49921: PUSH
49922: EMPTY
49923: LIST
49924: LIST
49925: PUSH
49926: LD_INT 2
49928: PUSH
49929: LD_INT 25
49931: PUSH
49932: LD_INT 2
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 25
49941: PUSH
49942: LD_INT 16
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: LIST
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PPUSH
49958: CALL_OW 72
49962: UNION
49963: ST_TO_ADDR
// if tmp then
49964: LD_VAR 0 4
49968: IFFALSE 50048
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49970: LD_ADDR_VAR 0 4
49974: PUSH
49975: LD_VAR 0 4
49979: PPUSH
49980: LD_INT 3
49982: PPUSH
49983: CALL 95275 0 2
49987: ST_TO_ADDR
// for j in tmp do
49988: LD_ADDR_VAR 0 2
49992: PUSH
49993: LD_VAR 0 4
49997: PUSH
49998: FOR_IN
49999: IFFALSE 50042
// begin if IsInUnit ( j ) then
50001: LD_VAR 0 2
50005: PPUSH
50006: CALL_OW 310
50010: IFFALSE 50021
// ComExit ( j ) ;
50012: LD_VAR 0 2
50016: PPUSH
50017: CALL 95358 0 1
// AddComCollect ( j , x , y ) ;
50021: LD_VAR 0 2
50025: PPUSH
50026: LD_VAR 0 6
50030: PPUSH
50031: LD_VAR 0 7
50035: PPUSH
50036: CALL_OW 177
// end ;
50040: GO 49998
50042: POP
50043: POP
// exit ;
50044: POP
50045: POP
50046: GO 50283
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
50048: LD_ADDR_VAR 0 4
50052: PUSH
50053: LD_INT 22
50055: PUSH
50056: LD_VAR 0 5
50060: PUSH
50061: EMPTY
50062: LIST
50063: LIST
50064: PUSH
50065: LD_INT 91
50067: PUSH
50068: LD_VAR 0 8
50072: PUSH
50073: LD_INT 8
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 2
50083: PUSH
50084: LD_INT 34
50086: PUSH
50087: LD_INT 12
50089: PUSH
50090: EMPTY
50091: LIST
50092: LIST
50093: PUSH
50094: LD_INT 34
50096: PUSH
50097: LD_INT 51
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 34
50106: PUSH
50107: LD_INT 32
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: PUSH
50114: LD_INT 34
50116: PUSH
50117: LD_INT 89
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: LIST
50128: LIST
50129: LIST
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: LIST
50135: PPUSH
50136: CALL_OW 69
50140: ST_TO_ADDR
// if tmp then
50141: LD_VAR 0 4
50145: IFFALSE 50279
// begin for j in tmp do
50147: LD_ADDR_VAR 0 2
50151: PUSH
50152: LD_VAR 0 4
50156: PUSH
50157: FOR_IN
50158: IFFALSE 50277
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
50160: LD_VAR 0 2
50164: PPUSH
50165: CALL_OW 262
50169: PUSH
50170: LD_INT 3
50172: EQUAL
50173: IFTRUE 50190
50175: PUSH
50176: LD_VAR 0 2
50180: PPUSH
50181: CALL_OW 261
50185: PUSH
50186: LD_INT 20
50188: GREATER
50189: OR
50190: IFFALSE 50204
50192: PUSH
50193: LD_VAR 0 2
50197: PPUSH
50198: CALL_OW 314
50202: NOT
50203: AND
50204: IFFALSE 50234
50206: PUSH
50207: LD_VAR 0 2
50211: PPUSH
50212: CALL_OW 263
50216: PUSH
50217: LD_INT 1
50219: NONEQUAL
50220: IFTRUE 50233
50222: PUSH
50223: LD_VAR 0 2
50227: PPUSH
50228: CALL_OW 311
50232: OR
50233: AND
50234: IFFALSE 50275
// begin ComCollect ( j , x , y ) ;
50236: LD_VAR 0 2
50240: PPUSH
50241: LD_VAR 0 6
50245: PPUSH
50246: LD_VAR 0 7
50250: PPUSH
50251: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
50255: LD_VAR 0 2
50259: PPUSH
50260: LD_VAR 0 8
50264: PPUSH
50265: CALL_OW 172
// exit ;
50269: POP
50270: POP
50271: POP
50272: POP
50273: GO 50283
// end ;
50275: GO 50157
50277: POP
50278: POP
// end ; end ;
50279: GO 49644
50281: POP
50282: POP
// end ; end_of_file
50283: PPOPN 9
50285: END
// export function SOS_UnitDestroyed ( un ) ; begin
50286: LD_INT 0
50288: PPUSH
// ComRadiation ( un ) ;
50289: LD_VAR 0 1
50293: PPUSH
50294: CALL 51456 0 1
// end ;
50298: LD_VAR 0 2
50302: RET
// export function SOS_UnitKamikazed ( un ) ; begin
50303: LD_INT 0
50305: PPUSH
// ComRadiation ( un ) ;
50306: LD_VAR 0 1
50310: PPUSH
50311: CALL 51456 0 1
// end ;
50315: LD_VAR 0 2
50319: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
50320: LD_INT 0
50322: PPUSH
// end ;
50323: LD_VAR 0 4
50327: RET
// export function SOS_Command ( cmd ) ; begin
50328: LD_INT 0
50330: PPUSH
// end ;
50331: LD_VAR 0 2
50335: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
50336: LD_INT 0
50338: PPUSH
// end ;
50339: LD_VAR 0 6
50343: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
50344: LD_INT 0
50346: PPUSH
50347: PPUSH
50348: PPUSH
50349: PPUSH
50350: PPUSH
// if not vehicle or not factory then
50351: LD_VAR 0 1
50355: NOT
50356: IFTRUE 50365
50358: PUSH
50359: LD_VAR 0 2
50363: NOT
50364: OR
50365: IFFALSE 50369
// exit ;
50367: GO 51031
// weapon := GetWeapon ( vehicle ) ;
50369: LD_ADDR_VAR 0 7
50373: PUSH
50374: LD_VAR 0 1
50378: PPUSH
50379: CALL_OW 264
50383: ST_TO_ADDR
// if weapon = ar_miner then
50384: LD_VAR 0 7
50388: PUSH
50389: LD_INT 81
50391: EQUAL
50392: IFFALSE 50449
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
50394: LD_ADDR_EXP 156
50398: PUSH
50399: LD_EXP 156
50403: PPUSH
50404: LD_EXP 156
50408: PUSH
50409: LD_INT 1
50411: PLUS
50412: PPUSH
50413: LD_VAR 0 1
50417: PPUSH
50418: CALL_OW 1
50422: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
50423: LD_ADDR_EXP 157
50427: PUSH
50428: LD_EXP 157
50432: PPUSH
50433: LD_EXP 157
50437: PUSH
50438: LD_INT 1
50440: PLUS
50441: PPUSH
50442: EMPTY
50443: PPUSH
50444: CALL_OW 1
50448: ST_TO_ADDR
// end ; if not factoryWaypoints then
50449: LD_EXP 145
50453: NOT
50454: IFFALSE 50458
// exit ;
50456: GO 51031
// for i := 1 to Count ( factoryWaypoints ) do
50458: LD_ADDR_VAR 0 4
50462: PUSH
50463: DOUBLE
50464: LD_INT 1
50466: DEC
50467: ST_TO_ADDR
50468: LD_EXP 145
50472: PPUSH
50473: CALL 58984 0 1
50477: PUSH
50478: FOR_TO
50479: IFFALSE 51029
// if factoryWaypoints [ i ] [ 2 ] = factory then
50481: LD_EXP 145
50485: PUSH
50486: LD_VAR 0 4
50490: ARRAY
50491: PUSH
50492: LD_INT 2
50494: ARRAY
50495: PUSH
50496: LD_VAR 0 2
50500: EQUAL
50501: IFFALSE 51027
// begin if GetControl ( vehicle ) = control_manual then
50503: LD_VAR 0 1
50507: PPUSH
50508: CALL_OW 263
50512: PUSH
50513: LD_INT 1
50515: EQUAL
50516: IFFALSE 50880
// begin driver := IsDrivenBy ( vehicle ) ;
50518: LD_ADDR_VAR 0 5
50522: PUSH
50523: LD_VAR 0 1
50527: PPUSH
50528: CALL_OW 311
50532: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
50533: LD_VAR 0 5
50537: PUSH
50538: LD_EXP 146
50542: IN
50543: IFTRUE 50557
50545: PUSH
50546: LD_VAR 0 1
50550: PUSH
50551: LD_EXP 146
50555: IN
50556: OR
50557: IFFALSE 50563
// exit ;
50559: POP
50560: POP
50561: GO 51031
// if not HasTask ( driver ) then
50563: LD_VAR 0 5
50567: PPUSH
50568: CALL_OW 314
50572: NOT
50573: IFFALSE 50878
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
50575: LD_ADDR_EXP 146
50579: PUSH
50580: LD_EXP 146
50584: PPUSH
50585: LD_VAR 0 5
50589: PPUSH
50590: CALL 94960 0 2
50594: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
50595: LD_ADDR_EXP 146
50599: PUSH
50600: LD_EXP 146
50604: PPUSH
50605: LD_VAR 0 1
50609: PPUSH
50610: CALL 94960 0 2
50614: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50615: LD_ADDR_VAR 0 6
50619: PUSH
50620: LD_EXP 145
50624: PUSH
50625: LD_VAR 0 4
50629: ARRAY
50630: PUSH
50631: LD_INT 3
50633: ARRAY
50634: PPUSH
50635: LD_EXP 145
50639: PUSH
50640: LD_VAR 0 4
50644: ARRAY
50645: PUSH
50646: LD_INT 4
50648: ARRAY
50649: PPUSH
50650: CALL_OW 428
50654: ST_TO_ADDR
// if hex then
50655: LD_VAR 0 6
50659: IFFALSE 50677
// ComMoveUnit ( driver , hex ) else
50661: LD_VAR 0 5
50665: PPUSH
50666: LD_VAR 0 6
50670: PPUSH
50671: CALL_OW 112
50675: GO 50761
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
50677: LD_VAR 0 1
50681: PPUSH
50682: LD_EXP 145
50686: PUSH
50687: LD_VAR 0 4
50691: ARRAY
50692: PUSH
50693: LD_INT 3
50695: ARRAY
50696: PPUSH
50697: LD_EXP 145
50701: PUSH
50702: LD_VAR 0 4
50706: ARRAY
50707: PUSH
50708: LD_INT 4
50710: ARRAY
50711: PPUSH
50712: CALL_OW 297
50716: PUSH
50717: LD_INT 0
50719: GREATER
50720: IFFALSE 50761
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50722: LD_VAR 0 5
50726: PPUSH
50727: LD_EXP 145
50731: PUSH
50732: LD_VAR 0 4
50736: ARRAY
50737: PUSH
50738: LD_INT 3
50740: ARRAY
50741: PPUSH
50742: LD_EXP 145
50746: PUSH
50747: LD_VAR 0 4
50751: ARRAY
50752: PUSH
50753: LD_INT 4
50755: ARRAY
50756: PPUSH
50757: CALL_OW 111
// AddComExitVehicle ( driver ) ;
50761: LD_VAR 0 5
50765: PPUSH
50766: CALL_OW 181
// if Multiplayer then
50770: LD_OWVAR 4
50774: IFFALSE 50823
// begin repeat wait ( 10 ) ;
50776: LD_INT 10
50778: PPUSH
50779: CALL_OW 67
// until not IsInUnit ( driver ) ;
50783: LD_VAR 0 5
50787: PPUSH
50788: CALL_OW 310
50792: NOT
50793: IFFALSE 50776
// if not HasTask ( driver ) then
50795: LD_VAR 0 5
50799: PPUSH
50800: CALL_OW 314
50804: NOT
50805: IFFALSE 50821
// ComEnterUnit ( driver , factory ) ;
50807: LD_VAR 0 5
50811: PPUSH
50812: LD_VAR 0 2
50816: PPUSH
50817: CALL_OW 120
// end else
50821: GO 50837
// AddComEnterUnit ( driver , factory ) ;
50823: LD_VAR 0 5
50827: PPUSH
50828: LD_VAR 0 2
50832: PPUSH
50833: CALL_OW 180
// wait ( 0 0$1 ) ;
50837: LD_INT 35
50839: PPUSH
50840: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
50844: LD_ADDR_EXP 146
50848: PUSH
50849: LD_EXP 146
50853: PUSH
50854: LD_VAR 0 5
50858: DIFF
50859: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
50860: LD_ADDR_EXP 146
50864: PUSH
50865: LD_EXP 146
50869: PUSH
50870: LD_VAR 0 1
50874: DIFF
50875: ST_TO_ADDR
// break ;
50876: GO 51029
// end ; end else
50878: GO 51027
// if GetControl ( vehicle ) = control_remote then
50880: LD_VAR 0 1
50884: PPUSH
50885: CALL_OW 263
50889: PUSH
50890: LD_INT 2
50892: EQUAL
50893: IFFALSE 50979
// begin wait ( 0 0$2 ) ;
50895: LD_INT 70
50897: PPUSH
50898: CALL_OW 67
// repeat wait ( 10 ) ;
50902: LD_INT 10
50904: PPUSH
50905: CALL_OW 67
// Connect ( vehicle ) ;
50909: LD_VAR 0 1
50913: PPUSH
50914: CALL 65262 0 1
// until IsControledBy ( vehicle ) ;
50918: LD_VAR 0 1
50922: PPUSH
50923: CALL_OW 312
50927: IFFALSE 50902
// wait ( 10 ) ;
50929: LD_INT 10
50931: PPUSH
50932: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50936: LD_VAR 0 1
50940: PPUSH
50941: LD_EXP 145
50945: PUSH
50946: LD_VAR 0 4
50950: ARRAY
50951: PUSH
50952: LD_INT 3
50954: ARRAY
50955: PPUSH
50956: LD_EXP 145
50960: PUSH
50961: LD_VAR 0 4
50965: ARRAY
50966: PUSH
50967: LD_INT 4
50969: ARRAY
50970: PPUSH
50971: CALL_OW 111
// break ;
50975: GO 51029
// end else
50977: GO 51027
// begin wait ( 0 0$3 ) ;
50979: LD_INT 105
50981: PPUSH
50982: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50986: LD_VAR 0 1
50990: PPUSH
50991: LD_EXP 145
50995: PUSH
50996: LD_VAR 0 4
51000: ARRAY
51001: PUSH
51002: LD_INT 3
51004: ARRAY
51005: PPUSH
51006: LD_EXP 145
51010: PUSH
51011: LD_VAR 0 4
51015: ARRAY
51016: PUSH
51017: LD_INT 4
51019: ARRAY
51020: PPUSH
51021: CALL_OW 111
// break ;
51025: GO 51029
// end ; end ;
51027: GO 50478
51029: POP
51030: POP
// end ;
51031: LD_VAR 0 3
51035: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
51036: LD_INT 0
51038: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
51039: LD_VAR 0 1
51043: PUSH
51044: LD_INT 250
51046: EQUAL
51047: IFFALSE 51064
51049: PUSH
51050: LD_VAR 0 2
51054: PPUSH
51055: CALL_OW 264
51059: PUSH
51060: LD_INT 81
51062: EQUAL
51063: AND
51064: IFFALSE 51085
// MinerPlaceMine ( unit , x , y ) ;
51066: LD_VAR 0 2
51070: PPUSH
51071: LD_VAR 0 4
51075: PPUSH
51076: LD_VAR 0 5
51080: PPUSH
51081: CALL 54431 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
51085: LD_VAR 0 1
51089: PUSH
51090: LD_INT 251
51092: EQUAL
51093: IFFALSE 51110
51095: PUSH
51096: LD_VAR 0 2
51100: PPUSH
51101: CALL_OW 264
51105: PUSH
51106: LD_INT 81
51108: EQUAL
51109: AND
51110: IFFALSE 51131
// MinerDetonateMine ( unit , x , y ) ;
51112: LD_VAR 0 2
51116: PPUSH
51117: LD_VAR 0 4
51121: PPUSH
51122: LD_VAR 0 5
51126: PPUSH
51127: CALL 54838 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
51131: LD_VAR 0 1
51135: PUSH
51136: LD_INT 252
51138: EQUAL
51139: IFFALSE 51156
51141: PUSH
51142: LD_VAR 0 2
51146: PPUSH
51147: CALL_OW 264
51151: PUSH
51152: LD_INT 81
51154: EQUAL
51155: AND
51156: IFFALSE 51177
// MinerCreateMinefield ( unit , x , y ) ;
51158: LD_VAR 0 2
51162: PPUSH
51163: LD_VAR 0 4
51167: PPUSH
51168: LD_VAR 0 5
51172: PPUSH
51173: CALL 55070 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
51177: LD_VAR 0 1
51181: PUSH
51182: LD_INT 253
51184: EQUAL
51185: IFFALSE 51202
51187: PUSH
51188: LD_VAR 0 2
51192: PPUSH
51193: CALL_OW 257
51197: PUSH
51198: LD_INT 5
51200: EQUAL
51201: AND
51202: IFFALSE 51223
// ComBinocular ( unit , x , y ) ;
51204: LD_VAR 0 2
51208: PPUSH
51209: LD_VAR 0 4
51213: PPUSH
51214: LD_VAR 0 5
51218: PPUSH
51219: CALL 55445 0 3
// if selectedUnit then
51223: LD_VAR 0 3
51227: IFFALSE 51287
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
51229: LD_VAR 0 1
51233: PUSH
51234: LD_INT 254
51236: EQUAL
51237: IFFALSE 51254
51239: PUSH
51240: LD_VAR 0 2
51244: PPUSH
51245: CALL_OW 264
51249: PUSH
51250: LD_INT 99
51252: EQUAL
51253: AND
51254: IFFALSE 51271
51256: PUSH
51257: LD_VAR 0 3
51261: PPUSH
51262: CALL_OW 263
51266: PUSH
51267: LD_INT 3
51269: EQUAL
51270: AND
51271: IFFALSE 51287
// HackDestroyVehicle ( unit , selectedUnit ) ;
51273: LD_VAR 0 2
51277: PPUSH
51278: LD_VAR 0 3
51282: PPUSH
51283: CALL 53621 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
51287: LD_VAR 0 1
51291: PUSH
51292: LD_INT 255
51294: EQUAL
51295: IFFALSE 51319
51297: PUSH
51298: LD_VAR 0 2
51302: PPUSH
51303: CALL_OW 264
51307: PUSH
51308: LD_INT 14
51310: PUSH
51311: LD_INT 53
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: IN
51318: AND
51319: IFFALSE 51337
51321: PUSH
51322: LD_VAR 0 4
51326: PPUSH
51327: LD_VAR 0 5
51331: PPUSH
51332: CALL_OW 488
51336: AND
51337: IFFALSE 51361
// CutTreeXYR ( unit , x , y , 12 ) ;
51339: LD_VAR 0 2
51343: PPUSH
51344: LD_VAR 0 4
51348: PPUSH
51349: LD_VAR 0 5
51353: PPUSH
51354: LD_INT 12
51356: PPUSH
51357: CALL 51552 0 4
// if cmd = 256 then
51361: LD_VAR 0 1
51365: PUSH
51366: LD_INT 256
51368: EQUAL
51369: IFFALSE 51390
// SetFactoryWaypoint ( unit , x , y ) ;
51371: LD_VAR 0 2
51375: PPUSH
51376: LD_VAR 0 4
51380: PPUSH
51381: LD_VAR 0 5
51385: PPUSH
51386: CALL 48831 0 3
// if cmd = 257 then
51390: LD_VAR 0 1
51394: PUSH
51395: LD_INT 257
51397: EQUAL
51398: IFFALSE 51419
// SetWarehouseGatheringPoint ( unit , x , y ) ;
51400: LD_VAR 0 2
51404: PPUSH
51405: LD_VAR 0 4
51409: PPUSH
51410: LD_VAR 0 5
51414: PPUSH
51415: CALL 49327 0 3
// if cmd = 258 then
51419: LD_VAR 0 1
51423: PUSH
51424: LD_INT 258
51426: EQUAL
51427: IFFALSE 51451
// BurnTreeXYR ( unit , x , y , 8 ) ;
51429: LD_VAR 0 2
51433: PPUSH
51434: LD_VAR 0 4
51438: PPUSH
51439: LD_VAR 0 5
51443: PPUSH
51444: LD_INT 8
51446: PPUSH
51447: CALL 51974 0 4
// end ;
51451: LD_VAR 0 6
51455: RET
// export function ComRadiation ( un ) ; var eff ; begin
51456: LD_INT 0
51458: PPUSH
51459: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
51460: LD_VAR 0 1
51464: PPUSH
51465: CALL_OW 264
51469: PUSH
51470: LD_INT 91
51472: NONEQUAL
51473: IFFALSE 51477
// exit ;
51475: GO 51547
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
51477: LD_INT 68
51479: PPUSH
51480: LD_VAR 0 1
51484: PPUSH
51485: CALL_OW 255
51489: PPUSH
51490: CALL_OW 321
51494: PUSH
51495: LD_INT 2
51497: EQUAL
51498: IFFALSE 51510
// eff := 50 else
51500: LD_ADDR_VAR 0 3
51504: PUSH
51505: LD_INT 50
51507: ST_TO_ADDR
51508: GO 51518
// eff := 25 ;
51510: LD_ADDR_VAR 0 3
51514: PUSH
51515: LD_INT 25
51517: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
51518: LD_VAR 0 1
51522: PPUSH
51523: CALL_OW 250
51527: PPUSH
51528: LD_VAR 0 1
51532: PPUSH
51533: CALL_OW 251
51537: PPUSH
51538: LD_VAR 0 3
51542: PPUSH
51543: CALL_OW 495
// end ;
51547: LD_VAR 0 2
51551: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
51552: LD_INT 0
51554: PPUSH
51555: PPUSH
51556: PPUSH
51557: PPUSH
51558: PPUSH
51559: PPUSH
51560: PPUSH
51561: PPUSH
51562: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
51563: LD_VAR 0 1
51567: PPUSH
51568: CALL_OW 302
51572: NOT
51573: IFTRUE 51592
51575: PUSH
51576: LD_VAR 0 2
51580: PPUSH
51581: LD_VAR 0 3
51585: PPUSH
51586: CALL_OW 488
51590: NOT
51591: OR
51592: IFTRUE 51601
51594: PUSH
51595: LD_VAR 0 4
51599: NOT
51600: OR
51601: IFFALSE 51605
// exit ;
51603: GO 51969
// if Count ( GetTaskList ( bulldozer ) ) > 10 then
51605: LD_VAR 0 1
51609: PPUSH
51610: CALL_OW 437
51614: PPUSH
51615: CALL 58984 0 1
51619: PUSH
51620: LD_INT 10
51622: GREATER
51623: IFFALSE 51627
// exit ;
51625: GO 51969
// list := [ ] ;
51627: LD_ADDR_VAR 0 13
51631: PUSH
51632: EMPTY
51633: ST_TO_ADDR
// if x - r < 0 then
51634: LD_VAR 0 2
51638: PUSH
51639: LD_VAR 0 4
51643: MINUS
51644: PUSH
51645: LD_INT 0
51647: LESS
51648: IFFALSE 51660
// min_x := 0 else
51650: LD_ADDR_VAR 0 7
51654: PUSH
51655: LD_INT 0
51657: ST_TO_ADDR
51658: GO 51676
// min_x := x - r ;
51660: LD_ADDR_VAR 0 7
51664: PUSH
51665: LD_VAR 0 2
51669: PUSH
51670: LD_VAR 0 4
51674: MINUS
51675: ST_TO_ADDR
// if y - r < 0 then
51676: LD_VAR 0 3
51680: PUSH
51681: LD_VAR 0 4
51685: MINUS
51686: PUSH
51687: LD_INT 0
51689: LESS
51690: IFFALSE 51702
// min_y := 0 else
51692: LD_ADDR_VAR 0 8
51696: PUSH
51697: LD_INT 0
51699: ST_TO_ADDR
51700: GO 51718
// min_y := y - r ;
51702: LD_ADDR_VAR 0 8
51706: PUSH
51707: LD_VAR 0 3
51711: PUSH
51712: LD_VAR 0 4
51716: MINUS
51717: ST_TO_ADDR
// max_x := x + r ;
51718: LD_ADDR_VAR 0 9
51722: PUSH
51723: LD_VAR 0 2
51727: PUSH
51728: LD_VAR 0 4
51732: PLUS
51733: ST_TO_ADDR
// max_y := y + r ;
51734: LD_ADDR_VAR 0 10
51738: PUSH
51739: LD_VAR 0 3
51743: PUSH
51744: LD_VAR 0 4
51748: PLUS
51749: ST_TO_ADDR
// for _x = min_x to max_x do
51750: LD_ADDR_VAR 0 11
51754: PUSH
51755: DOUBLE
51756: LD_VAR 0 7
51760: DEC
51761: ST_TO_ADDR
51762: LD_VAR 0 9
51766: PUSH
51767: FOR_TO
51768: IFFALSE 51887
// for _y = min_y to max_y do
51770: LD_ADDR_VAR 0 12
51774: PUSH
51775: DOUBLE
51776: LD_VAR 0 8
51780: DEC
51781: ST_TO_ADDR
51782: LD_VAR 0 10
51786: PUSH
51787: FOR_TO
51788: IFFALSE 51883
// begin if not ValidHex ( _x , _y ) then
51790: LD_VAR 0 11
51794: PPUSH
51795: LD_VAR 0 12
51799: PPUSH
51800: CALL_OW 488
51804: NOT
51805: IFFALSE 51809
// continue ;
51807: GO 51787
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51809: LD_VAR 0 11
51813: PPUSH
51814: LD_VAR 0 12
51818: PPUSH
51819: CALL_OW 351
51823: IFFALSE 51841
51825: PUSH
51826: LD_VAR 0 11
51830: PPUSH
51831: LD_VAR 0 12
51835: PPUSH
51836: CALL_OW 554
51840: AND
51841: IFFALSE 51881
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51843: LD_ADDR_VAR 0 13
51847: PUSH
51848: LD_VAR 0 13
51852: PPUSH
51853: LD_VAR 0 13
51857: PUSH
51858: LD_INT 1
51860: PLUS
51861: PPUSH
51862: LD_VAR 0 11
51866: PUSH
51867: LD_VAR 0 12
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PPUSH
51876: CALL_OW 2
51880: ST_TO_ADDR
// end ;
51881: GO 51787
51883: POP
51884: POP
51885: GO 51767
51887: POP
51888: POP
// if not list then
51889: LD_VAR 0 13
51893: NOT
51894: IFFALSE 51898
// exit ;
51896: GO 51969
// for i in list do
51898: LD_ADDR_VAR 0 6
51902: PUSH
51903: LD_VAR 0 13
51907: PUSH
51908: FOR_IN
51909: IFFALSE 51967
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
51911: LD_VAR 0 1
51915: PPUSH
51916: LD_STRING M
51918: PUSH
51919: LD_VAR 0 6
51923: PUSH
51924: LD_INT 1
51926: ARRAY
51927: PUSH
51928: LD_VAR 0 6
51932: PUSH
51933: LD_INT 2
51935: ARRAY
51936: PUSH
51937: LD_INT 0
51939: PUSH
51940: LD_INT 0
51942: PUSH
51943: LD_INT 0
51945: PUSH
51946: LD_INT 0
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: PUSH
51958: EMPTY
51959: LIST
51960: PPUSH
51961: CALL_OW 447
51965: GO 51908
51967: POP
51968: POP
// end ;
51969: LD_VAR 0 5
51973: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
51974: LD_INT 0
51976: PPUSH
51977: PPUSH
51978: PPUSH
51979: PPUSH
51980: PPUSH
51981: PPUSH
51982: PPUSH
51983: PPUSH
51984: PPUSH
51985: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
51986: LD_VAR 0 1
51990: PPUSH
51991: CALL_OW 302
51995: NOT
51996: IFTRUE 52015
51998: PUSH
51999: LD_VAR 0 2
52003: PPUSH
52004: LD_VAR 0 3
52008: PPUSH
52009: CALL_OW 488
52013: NOT
52014: OR
52015: IFTRUE 52024
52017: PUSH
52018: LD_VAR 0 4
52022: NOT
52023: OR
52024: IFFALSE 52028
// exit ;
52026: GO 52567
// if Count ( GetTaskList ( flame ) ) > 10 then
52028: LD_VAR 0 1
52032: PPUSH
52033: CALL_OW 437
52037: PPUSH
52038: CALL 58984 0 1
52042: PUSH
52043: LD_INT 10
52045: GREATER
52046: IFFALSE 52050
// exit ;
52048: GO 52567
// list := [ ] ;
52050: LD_ADDR_VAR 0 13
52054: PUSH
52055: EMPTY
52056: ST_TO_ADDR
// if x - r < 0 then
52057: LD_VAR 0 2
52061: PUSH
52062: LD_VAR 0 4
52066: MINUS
52067: PUSH
52068: LD_INT 0
52070: LESS
52071: IFFALSE 52083
// min_x := 0 else
52073: LD_ADDR_VAR 0 7
52077: PUSH
52078: LD_INT 0
52080: ST_TO_ADDR
52081: GO 52099
// min_x := x - r ;
52083: LD_ADDR_VAR 0 7
52087: PUSH
52088: LD_VAR 0 2
52092: PUSH
52093: LD_VAR 0 4
52097: MINUS
52098: ST_TO_ADDR
// if y - r < 0 then
52099: LD_VAR 0 3
52103: PUSH
52104: LD_VAR 0 4
52108: MINUS
52109: PUSH
52110: LD_INT 0
52112: LESS
52113: IFFALSE 52125
// min_y := 0 else
52115: LD_ADDR_VAR 0 8
52119: PUSH
52120: LD_INT 0
52122: ST_TO_ADDR
52123: GO 52141
// min_y := y - r ;
52125: LD_ADDR_VAR 0 8
52129: PUSH
52130: LD_VAR 0 3
52134: PUSH
52135: LD_VAR 0 4
52139: MINUS
52140: ST_TO_ADDR
// max_x := x + r ;
52141: LD_ADDR_VAR 0 9
52145: PUSH
52146: LD_VAR 0 2
52150: PUSH
52151: LD_VAR 0 4
52155: PLUS
52156: ST_TO_ADDR
// max_y := y + r ;
52157: LD_ADDR_VAR 0 10
52161: PUSH
52162: LD_VAR 0 3
52166: PUSH
52167: LD_VAR 0 4
52171: PLUS
52172: ST_TO_ADDR
// for _x = min_x to max_x do
52173: LD_ADDR_VAR 0 11
52177: PUSH
52178: DOUBLE
52179: LD_VAR 0 7
52183: DEC
52184: ST_TO_ADDR
52185: LD_VAR 0 9
52189: PUSH
52190: FOR_TO
52191: IFFALSE 52310
// for _y = min_y to max_y do
52193: LD_ADDR_VAR 0 12
52197: PUSH
52198: DOUBLE
52199: LD_VAR 0 8
52203: DEC
52204: ST_TO_ADDR
52205: LD_VAR 0 10
52209: PUSH
52210: FOR_TO
52211: IFFALSE 52306
// begin if not ValidHex ( _x , _y ) then
52213: LD_VAR 0 11
52217: PPUSH
52218: LD_VAR 0 12
52222: PPUSH
52223: CALL_OW 488
52227: NOT
52228: IFFALSE 52232
// continue ;
52230: GO 52210
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
52232: LD_VAR 0 11
52236: PPUSH
52237: LD_VAR 0 12
52241: PPUSH
52242: CALL_OW 351
52246: IFFALSE 52264
52248: PUSH
52249: LD_VAR 0 11
52253: PPUSH
52254: LD_VAR 0 12
52258: PPUSH
52259: CALL_OW 554
52263: AND
52264: IFFALSE 52304
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
52266: LD_ADDR_VAR 0 13
52270: PUSH
52271: LD_VAR 0 13
52275: PPUSH
52276: LD_VAR 0 13
52280: PUSH
52281: LD_INT 1
52283: PLUS
52284: PPUSH
52285: LD_VAR 0 11
52289: PUSH
52290: LD_VAR 0 12
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PPUSH
52299: CALL_OW 2
52303: ST_TO_ADDR
// end ;
52304: GO 52210
52306: POP
52307: POP
52308: GO 52190
52310: POP
52311: POP
// if not list then
52312: LD_VAR 0 13
52316: NOT
52317: IFFALSE 52321
// exit ;
52319: GO 52567
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
52321: LD_ADDR_VAR 0 13
52325: PUSH
52326: LD_VAR 0 1
52330: PPUSH
52331: LD_VAR 0 13
52335: PPUSH
52336: LD_INT 1
52338: PPUSH
52339: LD_INT 1
52341: PPUSH
52342: CALL 62390 0 4
52346: ST_TO_ADDR
// ComStop ( flame ) ;
52347: LD_VAR 0 1
52351: PPUSH
52352: CALL_OW 141
// for i in list do
52356: LD_ADDR_VAR 0 6
52360: PUSH
52361: LD_VAR 0 13
52365: PUSH
52366: FOR_IN
52367: IFFALSE 52398
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
52369: LD_VAR 0 1
52373: PPUSH
52374: LD_VAR 0 6
52378: PUSH
52379: LD_INT 1
52381: ARRAY
52382: PPUSH
52383: LD_VAR 0 6
52387: PUSH
52388: LD_INT 2
52390: ARRAY
52391: PPUSH
52392: CALL_OW 176
52396: GO 52366
52398: POP
52399: POP
// repeat wait ( 0 0$1 ) ;
52400: LD_INT 35
52402: PPUSH
52403: CALL_OW 67
// task := GetTaskList ( flame ) ;
52407: LD_ADDR_VAR 0 14
52411: PUSH
52412: LD_VAR 0 1
52416: PPUSH
52417: CALL_OW 437
52421: ST_TO_ADDR
// if not task then
52422: LD_VAR 0 14
52426: NOT
52427: IFFALSE 52431
// exit ;
52429: GO 52567
// if task [ 1 ] [ 1 ] <> | then
52431: LD_VAR 0 14
52435: PUSH
52436: LD_INT 1
52438: ARRAY
52439: PUSH
52440: LD_INT 1
52442: ARRAY
52443: PUSH
52444: LD_STRING |
52446: NONEQUAL
52447: IFFALSE 52451
// exit ;
52449: GO 52567
// _x := task [ 1 ] [ 2 ] ;
52451: LD_ADDR_VAR 0 11
52455: PUSH
52456: LD_VAR 0 14
52460: PUSH
52461: LD_INT 1
52463: ARRAY
52464: PUSH
52465: LD_INT 2
52467: ARRAY
52468: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
52469: LD_ADDR_VAR 0 12
52473: PUSH
52474: LD_VAR 0 14
52478: PUSH
52479: LD_INT 1
52481: ARRAY
52482: PUSH
52483: LD_INT 3
52485: ARRAY
52486: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
52487: LD_VAR 0 11
52491: PPUSH
52492: LD_VAR 0 12
52496: PPUSH
52497: CALL_OW 351
52501: NOT
52502: IFTRUE 52521
52504: PUSH
52505: LD_VAR 0 11
52509: PPUSH
52510: LD_VAR 0 12
52514: PPUSH
52515: CALL_OW 554
52519: NOT
52520: OR
52521: IFFALSE 52555
// begin task := Delete ( task , 1 ) ;
52523: LD_ADDR_VAR 0 14
52527: PUSH
52528: LD_VAR 0 14
52532: PPUSH
52533: LD_INT 1
52535: PPUSH
52536: CALL_OW 3
52540: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
52541: LD_VAR 0 1
52545: PPUSH
52546: LD_VAR 0 14
52550: PPUSH
52551: CALL_OW 446
// end ; until not HasTask ( flame ) ;
52555: LD_VAR 0 1
52559: PPUSH
52560: CALL_OW 314
52564: NOT
52565: IFFALSE 52400
// end ;
52567: LD_VAR 0 5
52571: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
52572: LD_EXP 149
52576: NOT
52577: IFFALSE 52627
52579: GO 52581
52581: DISABLE
// begin initHack := true ;
52582: LD_ADDR_EXP 149
52586: PUSH
52587: LD_INT 1
52589: ST_TO_ADDR
// hackTanks := [ ] ;
52590: LD_ADDR_EXP 150
52594: PUSH
52595: EMPTY
52596: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
52597: LD_ADDR_EXP 151
52601: PUSH
52602: EMPTY
52603: ST_TO_ADDR
// hackLimit := 3 ;
52604: LD_ADDR_EXP 152
52608: PUSH
52609: LD_INT 3
52611: ST_TO_ADDR
// hackDist := 12 ;
52612: LD_ADDR_EXP 153
52616: PUSH
52617: LD_INT 12
52619: ST_TO_ADDR
// hackCounter := [ ] ;
52620: LD_ADDR_EXP 154
52624: PUSH
52625: EMPTY
52626: ST_TO_ADDR
// end ;
52627: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
52628: LD_EXP 149
52632: IFFALSE 52650
52634: PUSH
52635: LD_INT 34
52637: PUSH
52638: LD_INT 99
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PPUSH
52645: CALL_OW 69
52649: AND
52650: IFFALSE 52903
52652: GO 52654
52654: DISABLE
52655: LD_INT 0
52657: PPUSH
52658: PPUSH
// begin enable ;
52659: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
52660: LD_ADDR_VAR 0 1
52664: PUSH
52665: LD_INT 34
52667: PUSH
52668: LD_INT 99
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PPUSH
52675: CALL_OW 69
52679: PUSH
52680: FOR_IN
52681: IFFALSE 52901
// begin if not i in hackTanks then
52683: LD_VAR 0 1
52687: PUSH
52688: LD_EXP 150
52692: IN
52693: NOT
52694: IFFALSE 52777
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
52696: LD_ADDR_EXP 150
52700: PUSH
52701: LD_EXP 150
52705: PPUSH
52706: LD_EXP 150
52710: PUSH
52711: LD_INT 1
52713: PLUS
52714: PPUSH
52715: LD_VAR 0 1
52719: PPUSH
52720: CALL_OW 1
52724: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
52725: LD_ADDR_EXP 151
52729: PUSH
52730: LD_EXP 151
52734: PPUSH
52735: LD_EXP 151
52739: PUSH
52740: LD_INT 1
52742: PLUS
52743: PPUSH
52744: EMPTY
52745: PPUSH
52746: CALL_OW 1
52750: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
52751: LD_ADDR_EXP 154
52755: PUSH
52756: LD_EXP 154
52760: PPUSH
52761: LD_EXP 154
52765: PUSH
52766: LD_INT 1
52768: PLUS
52769: PPUSH
52770: EMPTY
52771: PPUSH
52772: CALL_OW 1
52776: ST_TO_ADDR
// end ; if not IsOk ( i ) then
52777: LD_VAR 0 1
52781: PPUSH
52782: CALL_OW 302
52786: NOT
52787: IFFALSE 52800
// begin HackUnlinkAll ( i ) ;
52789: LD_VAR 0 1
52793: PPUSH
52794: CALL 52906 0 1
// continue ;
52798: GO 52680
// end ; HackCheckCapturedStatus ( i ) ;
52800: LD_VAR 0 1
52804: PPUSH
52805: CALL 53351 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
52809: LD_ADDR_VAR 0 2
52813: PUSH
52814: LD_INT 81
52816: PUSH
52817: LD_VAR 0 1
52821: PPUSH
52822: CALL_OW 255
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 33
52833: PUSH
52834: LD_INT 3
52836: PUSH
52837: EMPTY
52838: LIST
52839: LIST
52840: PUSH
52841: LD_INT 91
52843: PUSH
52844: LD_VAR 0 1
52848: PUSH
52849: LD_EXP 153
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 50
52861: PUSH
52862: EMPTY
52863: LIST
52864: PUSH
52865: EMPTY
52866: LIST
52867: LIST
52868: LIST
52869: LIST
52870: PPUSH
52871: CALL_OW 69
52875: ST_TO_ADDR
// if not tmp then
52876: LD_VAR 0 2
52880: NOT
52881: IFFALSE 52885
// continue ;
52883: GO 52680
// HackLink ( i , tmp ) ;
52885: LD_VAR 0 1
52889: PPUSH
52890: LD_VAR 0 2
52894: PPUSH
52895: CALL 53042 0 2
// end ;
52899: GO 52680
52901: POP
52902: POP
// end ;
52903: PPOPN 2
52905: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
52906: LD_INT 0
52908: PPUSH
52909: PPUSH
52910: PPUSH
// if not hack in hackTanks then
52911: LD_VAR 0 1
52915: PUSH
52916: LD_EXP 150
52920: IN
52921: NOT
52922: IFFALSE 52926
// exit ;
52924: GO 53037
// index := GetElementIndex ( hackTanks , hack ) ;
52926: LD_ADDR_VAR 0 4
52930: PUSH
52931: LD_EXP 150
52935: PPUSH
52936: LD_VAR 0 1
52940: PPUSH
52941: CALL 61685 0 2
52945: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
52946: LD_EXP 151
52950: PUSH
52951: LD_VAR 0 4
52955: ARRAY
52956: IFFALSE 53037
// begin for i in hackTanksCaptured [ index ] do
52958: LD_ADDR_VAR 0 3
52962: PUSH
52963: LD_EXP 151
52967: PUSH
52968: LD_VAR 0 4
52972: ARRAY
52973: PUSH
52974: FOR_IN
52975: IFFALSE 53001
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
52977: LD_VAR 0 3
52981: PUSH
52982: LD_INT 1
52984: ARRAY
52985: PPUSH
52986: LD_VAR 0 3
52990: PUSH
52991: LD_INT 2
52993: ARRAY
52994: PPUSH
52995: CALL_OW 235
52999: GO 52974
53001: POP
53002: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
53003: LD_ADDR_EXP 151
53007: PUSH
53008: LD_EXP 151
53012: PPUSH
53013: LD_VAR 0 4
53017: PPUSH
53018: EMPTY
53019: PPUSH
53020: CALL_OW 1
53024: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
53025: LD_VAR 0 1
53029: PPUSH
53030: LD_INT 0
53032: PPUSH
53033: CALL_OW 505
// end ; end ;
53037: LD_VAR 0 2
53041: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
53042: LD_INT 0
53044: PPUSH
53045: PPUSH
53046: PPUSH
// if not hack in hackTanks or not vehicles then
53047: LD_VAR 0 1
53051: PUSH
53052: LD_EXP 150
53056: IN
53057: NOT
53058: IFTRUE 53067
53060: PUSH
53061: LD_VAR 0 2
53065: NOT
53066: OR
53067: IFFALSE 53071
// exit ;
53069: GO 53346
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
53071: LD_ADDR_VAR 0 2
53075: PUSH
53076: LD_VAR 0 1
53080: PPUSH
53081: LD_VAR 0 2
53085: PPUSH
53086: LD_INT 1
53088: PPUSH
53089: LD_INT 1
53091: PPUSH
53092: CALL 62337 0 4
53096: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
53097: LD_ADDR_VAR 0 5
53101: PUSH
53102: LD_EXP 150
53106: PPUSH
53107: LD_VAR 0 1
53111: PPUSH
53112: CALL 61685 0 2
53116: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
53117: LD_EXP 151
53121: PUSH
53122: LD_VAR 0 5
53126: ARRAY
53127: PUSH
53128: LD_EXP 152
53132: LESS
53133: IFFALSE 53322
// begin for i := 1 to vehicles do
53135: LD_ADDR_VAR 0 4
53139: PUSH
53140: DOUBLE
53141: LD_INT 1
53143: DEC
53144: ST_TO_ADDR
53145: LD_VAR 0 2
53149: PUSH
53150: FOR_TO
53151: IFFALSE 53320
// begin if hackTanksCaptured [ index ] = hackLimit then
53153: LD_EXP 151
53157: PUSH
53158: LD_VAR 0 5
53162: ARRAY
53163: PUSH
53164: LD_EXP 152
53168: EQUAL
53169: IFFALSE 53173
// break ;
53171: GO 53320
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
53173: LD_ADDR_EXP 154
53177: PUSH
53178: LD_EXP 154
53182: PPUSH
53183: LD_VAR 0 5
53187: PPUSH
53188: LD_EXP 154
53192: PUSH
53193: LD_VAR 0 5
53197: ARRAY
53198: PUSH
53199: LD_INT 1
53201: PLUS
53202: PPUSH
53203: CALL_OW 1
53207: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
53208: LD_ADDR_EXP 151
53212: PUSH
53213: LD_EXP 151
53217: PPUSH
53218: LD_VAR 0 5
53222: PUSH
53223: LD_EXP 151
53227: PUSH
53228: LD_VAR 0 5
53232: ARRAY
53233: PUSH
53234: LD_INT 1
53236: PLUS
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: PPUSH
53242: LD_VAR 0 2
53246: PUSH
53247: LD_VAR 0 4
53251: ARRAY
53252: PUSH
53253: LD_VAR 0 2
53257: PUSH
53258: LD_VAR 0 4
53262: ARRAY
53263: PPUSH
53264: CALL_OW 255
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PPUSH
53273: CALL 61902 0 3
53277: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
53278: LD_VAR 0 2
53282: PUSH
53283: LD_VAR 0 4
53287: ARRAY
53288: PPUSH
53289: LD_VAR 0 1
53293: PPUSH
53294: CALL_OW 255
53298: PPUSH
53299: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
53303: LD_VAR 0 2
53307: PUSH
53308: LD_VAR 0 4
53312: ARRAY
53313: PPUSH
53314: CALL_OW 141
// end ;
53318: GO 53150
53320: POP
53321: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53322: LD_VAR 0 1
53326: PPUSH
53327: LD_EXP 151
53331: PUSH
53332: LD_VAR 0 5
53336: ARRAY
53337: PUSH
53338: LD_INT 0
53340: PLUS
53341: PPUSH
53342: CALL_OW 505
// end ;
53346: LD_VAR 0 3
53350: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
53351: LD_INT 0
53353: PPUSH
53354: PPUSH
53355: PPUSH
53356: PPUSH
// if not hack in hackTanks then
53357: LD_VAR 0 1
53361: PUSH
53362: LD_EXP 150
53366: IN
53367: NOT
53368: IFFALSE 53372
// exit ;
53370: GO 53616
// index := GetElementIndex ( hackTanks , hack ) ;
53372: LD_ADDR_VAR 0 4
53376: PUSH
53377: LD_EXP 150
53381: PPUSH
53382: LD_VAR 0 1
53386: PPUSH
53387: CALL 61685 0 2
53391: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
53392: LD_ADDR_VAR 0 3
53396: PUSH
53397: DOUBLE
53398: LD_EXP 151
53402: PUSH
53403: LD_VAR 0 4
53407: ARRAY
53408: INC
53409: ST_TO_ADDR
53410: LD_INT 1
53412: PUSH
53413: FOR_DOWNTO
53414: IFFALSE 53590
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
53416: LD_ADDR_VAR 0 5
53420: PUSH
53421: LD_EXP 151
53425: PUSH
53426: LD_VAR 0 4
53430: ARRAY
53431: PUSH
53432: LD_VAR 0 3
53436: ARRAY
53437: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
53438: LD_VAR 0 5
53442: PUSH
53443: LD_INT 1
53445: ARRAY
53446: PPUSH
53447: CALL_OW 302
53451: NOT
53452: IFTRUE 53480
53454: PUSH
53455: LD_VAR 0 5
53459: PUSH
53460: LD_INT 1
53462: ARRAY
53463: PPUSH
53464: CALL_OW 255
53468: PUSH
53469: LD_VAR 0 1
53473: PPUSH
53474: CALL_OW 255
53478: NONEQUAL
53479: OR
53480: IFFALSE 53588
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
53482: LD_VAR 0 5
53486: PUSH
53487: LD_INT 1
53489: ARRAY
53490: PPUSH
53491: CALL_OW 305
53495: IFFALSE 53523
53497: PUSH
53498: LD_VAR 0 5
53502: PUSH
53503: LD_INT 1
53505: ARRAY
53506: PPUSH
53507: CALL_OW 255
53511: PUSH
53512: LD_VAR 0 1
53516: PPUSH
53517: CALL_OW 255
53521: EQUAL
53522: AND
53523: IFFALSE 53547
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
53525: LD_VAR 0 5
53529: PUSH
53530: LD_INT 1
53532: ARRAY
53533: PPUSH
53534: LD_VAR 0 5
53538: PUSH
53539: LD_INT 2
53541: ARRAY
53542: PPUSH
53543: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
53547: LD_ADDR_EXP 151
53551: PUSH
53552: LD_EXP 151
53556: PPUSH
53557: LD_VAR 0 4
53561: PPUSH
53562: LD_EXP 151
53566: PUSH
53567: LD_VAR 0 4
53571: ARRAY
53572: PPUSH
53573: LD_VAR 0 3
53577: PPUSH
53578: CALL_OW 3
53582: PPUSH
53583: CALL_OW 1
53587: ST_TO_ADDR
// end ; end ;
53588: GO 53413
53590: POP
53591: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
53592: LD_VAR 0 1
53596: PPUSH
53597: LD_EXP 151
53601: PUSH
53602: LD_VAR 0 4
53606: ARRAY
53607: PUSH
53608: LD_INT 0
53610: PLUS
53611: PPUSH
53612: CALL_OW 505
// end ;
53616: LD_VAR 0 2
53620: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
53621: LD_INT 0
53623: PPUSH
53624: PPUSH
53625: PPUSH
53626: PPUSH
// if not hack in hackTanks then
53627: LD_VAR 0 1
53631: PUSH
53632: LD_EXP 150
53636: IN
53637: NOT
53638: IFFALSE 53642
// exit ;
53640: GO 53727
// index := GetElementIndex ( hackTanks , hack ) ;
53642: LD_ADDR_VAR 0 5
53646: PUSH
53647: LD_EXP 150
53651: PPUSH
53652: LD_VAR 0 1
53656: PPUSH
53657: CALL 61685 0 2
53661: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
53662: LD_ADDR_VAR 0 4
53666: PUSH
53667: DOUBLE
53668: LD_INT 1
53670: DEC
53671: ST_TO_ADDR
53672: LD_EXP 151
53676: PUSH
53677: LD_VAR 0 5
53681: ARRAY
53682: PUSH
53683: FOR_TO
53684: IFFALSE 53725
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
53686: LD_EXP 151
53690: PUSH
53691: LD_VAR 0 5
53695: ARRAY
53696: PUSH
53697: LD_VAR 0 4
53701: ARRAY
53702: PUSH
53703: LD_INT 1
53705: ARRAY
53706: PUSH
53707: LD_VAR 0 2
53711: EQUAL
53712: IFFALSE 53723
// KillUnit ( vehicle ) ;
53714: LD_VAR 0 2
53718: PPUSH
53719: CALL_OW 66
53723: GO 53683
53725: POP
53726: POP
// end ;
53727: LD_VAR 0 3
53731: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
53732: LD_EXP 155
53736: NOT
53737: IFFALSE 53870
53739: GO 53741
53741: DISABLE
53742: LD_INT 0
53744: PPUSH
// begin initMiner := true ;
53745: LD_ADDR_EXP 155
53749: PUSH
53750: LD_INT 1
53752: ST_TO_ADDR
// minersList := [ ] ;
53753: LD_ADDR_EXP 156
53757: PUSH
53758: EMPTY
53759: ST_TO_ADDR
// minerMinesList := [ ] ;
53760: LD_ADDR_EXP 157
53764: PUSH
53765: EMPTY
53766: ST_TO_ADDR
// minesLimitPerVehicle := 10 ;
53767: LD_ADDR_EXP 158
53771: PUSH
53772: LD_INT 10
53774: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
53775: LD_ADDR_VAR 0 1
53779: PUSH
53780: LD_INT 34
53782: PUSH
53783: LD_INT 81
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PPUSH
53790: CALL_OW 69
53794: PUSH
53795: FOR_IN
53796: IFFALSE 53868
// begin if not i in minersList then
53798: LD_VAR 0 1
53802: PUSH
53803: LD_EXP 156
53807: IN
53808: NOT
53809: IFFALSE 53866
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
53811: LD_ADDR_EXP 156
53815: PUSH
53816: LD_EXP 156
53820: PPUSH
53821: LD_EXP 156
53825: PUSH
53826: LD_INT 1
53828: PLUS
53829: PPUSH
53830: LD_VAR 0 1
53834: PPUSH
53835: CALL_OW 1
53839: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53840: LD_ADDR_EXP 157
53844: PUSH
53845: LD_EXP 157
53849: PPUSH
53850: LD_EXP 157
53854: PUSH
53855: LD_INT 1
53857: PLUS
53858: PPUSH
53859: EMPTY
53860: PPUSH
53861: CALL_OW 1
53865: ST_TO_ADDR
// end end ;
53866: GO 53795
53868: POP
53869: POP
// end ;
53870: PPOPN 1
53872: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
53873: LD_EXP 155
53877: IFFALSE 53908
53879: PUSH
53880: LD_EXP 157
53884: PPUSH
53885: CALL 58984 0 1
53889: IFTRUE 53907
53891: PUSH
53892: LD_INT 34
53894: PUSH
53895: LD_INT 81
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PPUSH
53902: CALL_OW 69
53906: OR
53907: AND
53908: IFFALSE 54428
53910: GO 53912
53912: DISABLE
53913: LD_INT 0
53915: PPUSH
53916: PPUSH
53917: PPUSH
53918: PPUSH
// begin enable ;
53919: ENABLE
// for i := minerMinesList downto 1 do
53920: LD_ADDR_VAR 0 1
53924: PUSH
53925: DOUBLE
53926: LD_EXP 157
53930: INC
53931: ST_TO_ADDR
53932: LD_INT 1
53934: PUSH
53935: FOR_DOWNTO
53936: IFFALSE 54426
// begin side := GetSide ( minersList [ i ] ) ;
53938: LD_ADDR_VAR 0 3
53942: PUSH
53943: LD_EXP 156
53947: PUSH
53948: LD_VAR 0 1
53952: ARRAY
53953: PPUSH
53954: CALL_OW 255
53958: ST_TO_ADDR
// if IsLive ( minersList [ i ] ) and side in [ your_side , 9 ] then
53959: LD_EXP 156
53963: PUSH
53964: LD_VAR 0 1
53968: ARRAY
53969: PPUSH
53970: CALL_OW 300
53974: IFFALSE 53995
53976: PUSH
53977: LD_VAR 0 3
53981: PUSH
53982: LD_OWVAR 2
53986: PUSH
53987: LD_INT 9
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: IN
53994: AND
53995: IFFALSE 54028
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
53997: LD_EXP 156
54001: PUSH
54002: LD_VAR 0 1
54006: ARRAY
54007: PPUSH
54008: LD_EXP 157
54012: PUSH
54013: LD_VAR 0 1
54017: ARRAY
54018: PPUSH
54019: CALL 58984 0 1
54023: PPUSH
54024: CALL_OW 505
// if not minerMinesList [ i ] then
54028: LD_EXP 157
54032: PUSH
54033: LD_VAR 0 1
54037: ARRAY
54038: NOT
54039: IFFALSE 54043
// continue ;
54041: GO 53935
// for j := minerMinesList [ i ] downto 1 do
54043: LD_ADDR_VAR 0 2
54047: PUSH
54048: DOUBLE
54049: LD_EXP 157
54053: PUSH
54054: LD_VAR 0 1
54058: ARRAY
54059: INC
54060: ST_TO_ADDR
54061: LD_INT 1
54063: PUSH
54064: FOR_DOWNTO
54065: IFFALSE 54422
// begin if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
54067: LD_EXP 156
54071: PUSH
54072: LD_VAR 0 1
54076: ARRAY
54077: PPUSH
54078: CALL_OW 301
54082: IFTRUE 54102
54084: PUSH
54085: LD_EXP 156
54089: PUSH
54090: LD_VAR 0 1
54094: ARRAY
54095: PPUSH
54096: CALL_OW 305
54100: NOT
54101: OR
54102: IFFALSE 54193
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54104: LD_EXP 157
54108: PUSH
54109: LD_VAR 0 1
54113: ARRAY
54114: PUSH
54115: LD_VAR 0 2
54119: ARRAY
54120: PUSH
54121: LD_INT 1
54123: ARRAY
54124: PPUSH
54125: LD_EXP 157
54129: PUSH
54130: LD_VAR 0 1
54134: ARRAY
54135: PUSH
54136: LD_VAR 0 2
54140: ARRAY
54141: PUSH
54142: LD_INT 2
54144: ARRAY
54145: PPUSH
54146: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
54150: LD_ADDR_EXP 157
54154: PUSH
54155: LD_EXP 157
54159: PPUSH
54160: LD_VAR 0 1
54164: PPUSH
54165: LD_EXP 157
54169: PUSH
54170: LD_VAR 0 1
54174: ARRAY
54175: PPUSH
54176: LD_VAR 0 2
54180: PPUSH
54181: CALL_OW 3
54185: PPUSH
54186: CALL_OW 1
54190: ST_TO_ADDR
// continue ;
54191: GO 54064
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
54193: LD_ADDR_VAR 0 4
54197: PUSH
54198: LD_EXP 157
54202: PUSH
54203: LD_VAR 0 1
54207: ARRAY
54208: PUSH
54209: LD_VAR 0 2
54213: ARRAY
54214: PUSH
54215: LD_INT 1
54217: ARRAY
54218: PPUSH
54219: LD_EXP 157
54223: PUSH
54224: LD_VAR 0 1
54228: ARRAY
54229: PUSH
54230: LD_VAR 0 2
54234: ARRAY
54235: PUSH
54236: LD_INT 2
54238: ARRAY
54239: PPUSH
54240: CALL_OW 428
54244: ST_TO_ADDR
// if not tmp then
54245: LD_VAR 0 4
54249: NOT
54250: IFFALSE 54254
// continue ;
54252: GO 54064
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
54254: LD_VAR 0 4
54258: PUSH
54259: LD_INT 81
54261: PUSH
54262: LD_VAR 0 3
54266: PUSH
54267: EMPTY
54268: LIST
54269: LIST
54270: PPUSH
54271: CALL_OW 69
54275: IN
54276: IFFALSE 54326
54278: PUSH
54279: LD_EXP 157
54283: PUSH
54284: LD_VAR 0 1
54288: ARRAY
54289: PUSH
54290: LD_VAR 0 2
54294: ARRAY
54295: PUSH
54296: LD_INT 1
54298: ARRAY
54299: PPUSH
54300: LD_EXP 157
54304: PUSH
54305: LD_VAR 0 1
54309: ARRAY
54310: PUSH
54311: LD_VAR 0 2
54315: ARRAY
54316: PUSH
54317: LD_INT 2
54319: ARRAY
54320: PPUSH
54321: CALL_OW 458
54325: AND
54326: IFFALSE 54420
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
54328: LD_EXP 157
54332: PUSH
54333: LD_VAR 0 1
54337: ARRAY
54338: PUSH
54339: LD_VAR 0 2
54343: ARRAY
54344: PUSH
54345: LD_INT 1
54347: ARRAY
54348: PPUSH
54349: LD_EXP 157
54353: PUSH
54354: LD_VAR 0 1
54358: ARRAY
54359: PUSH
54360: LD_VAR 0 2
54364: ARRAY
54365: PUSH
54366: LD_INT 2
54368: ARRAY
54369: PPUSH
54370: LD_VAR 0 3
54374: PPUSH
54375: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
54379: LD_ADDR_EXP 157
54383: PUSH
54384: LD_EXP 157
54388: PPUSH
54389: LD_VAR 0 1
54393: PPUSH
54394: LD_EXP 157
54398: PUSH
54399: LD_VAR 0 1
54403: ARRAY
54404: PPUSH
54405: LD_VAR 0 2
54409: PPUSH
54410: CALL_OW 3
54414: PPUSH
54415: CALL_OW 1
54419: ST_TO_ADDR
// end ; end ;
54420: GO 54064
54422: POP
54423: POP
// end ;
54424: GO 53935
54426: POP
54427: POP
// end ;
54428: PPOPN 4
54430: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
54431: LD_INT 0
54433: PPUSH
54434: PPUSH
54435: PPUSH
54436: PPUSH
// result := false ;
54437: LD_ADDR_VAR 0 4
54441: PUSH
54442: LD_INT 0
54444: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
54445: LD_VAR 0 1
54449: PPUSH
54450: CALL_OW 264
54454: PUSH
54455: LD_INT 81
54457: EQUAL
54458: NOT
54459: IFFALSE 54463
// exit ;
54461: GO 54833
// side := GetSide ( unit ) ;
54463: LD_ADDR_VAR 0 6
54467: PUSH
54468: LD_VAR 0 1
54472: PPUSH
54473: CALL_OW 255
54477: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
54478: LD_ADDR_VAR 0 5
54482: PUSH
54483: LD_EXP 156
54487: PPUSH
54488: LD_VAR 0 1
54492: PPUSH
54493: CALL 61685 0 2
54497: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
54498: LD_EXP 157
54502: PUSH
54503: LD_VAR 0 5
54507: ARRAY
54508: PUSH
54509: LD_EXP 158
54513: GREATEREQUAL
54514: IFFALSE 54518
// exit ;
54516: GO 54833
// ComMoveXY ( unit , x , y ) ;
54518: LD_VAR 0 1
54522: PPUSH
54523: LD_VAR 0 2
54527: PPUSH
54528: LD_VAR 0 3
54532: PPUSH
54533: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54537: LD_INT 35
54539: PPUSH
54540: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
54544: LD_VAR 0 1
54548: PPUSH
54549: LD_VAR 0 2
54553: PPUSH
54554: LD_VAR 0 3
54558: PPUSH
54559: CALL 93741 0 3
54563: NOT
54564: IFFALSE 54577
54566: PUSH
54567: LD_VAR 0 1
54571: PPUSH
54572: CALL_OW 314
54576: AND
54577: IFFALSE 54581
// exit ;
54579: GO 54833
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
54581: LD_VAR 0 2
54585: PPUSH
54586: LD_VAR 0 3
54590: PPUSH
54591: CALL_OW 428
54595: PUSH
54596: LD_VAR 0 1
54600: EQUAL
54601: IFFALSE 54615
54603: PUSH
54604: LD_VAR 0 1
54608: PPUSH
54609: CALL_OW 314
54613: NOT
54614: AND
54615: IFFALSE 54537
// if MineAtPos ( x , y ) then
54617: LD_VAR 0 2
54621: PPUSH
54622: LD_VAR 0 3
54626: PPUSH
54627: CALL_OW 458
54631: IFFALSE 54635
// exit ;
54633: GO 54833
// if your_side = side then
54635: LD_OWVAR 2
54639: PUSH
54640: LD_VAR 0 6
54644: EQUAL
54645: IFFALSE 54664
// PlaySoundXY ( x , y , PlantMine ) ;
54647: LD_VAR 0 2
54651: PPUSH
54652: LD_VAR 0 3
54656: PPUSH
54657: LD_STRING PlantMine
54659: PPUSH
54660: CALL_OW 366
// repeat wait ( 1 ) ;
54664: LD_INT 1
54666: PPUSH
54667: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
54671: LD_VAR 0 2
54675: PPUSH
54676: LD_VAR 0 3
54680: PPUSH
54681: LD_VAR 0 6
54685: PPUSH
54686: LD_INT 0
54688: PPUSH
54689: CALL_OW 454
54693: IFFALSE 54664
// if MineAtPos ( x , y ) then
54695: LD_VAR 0 2
54699: PPUSH
54700: LD_VAR 0 3
54704: PPUSH
54705: CALL_OW 458
54709: IFFALSE 54825
// begin for i in minerMinesList [ index ] do
54711: LD_ADDR_VAR 0 7
54715: PUSH
54716: LD_EXP 157
54720: PUSH
54721: LD_VAR 0 5
54725: ARRAY
54726: PUSH
54727: FOR_IN
54728: IFFALSE 54770
// if i [ 1 ] = x and i [ 2 ] = y then
54730: LD_VAR 0 7
54734: PUSH
54735: LD_INT 1
54737: ARRAY
54738: PUSH
54739: LD_VAR 0 2
54743: EQUAL
54744: IFFALSE 54762
54746: PUSH
54747: LD_VAR 0 7
54751: PUSH
54752: LD_INT 2
54754: ARRAY
54755: PUSH
54756: LD_VAR 0 3
54760: EQUAL
54761: AND
54762: IFFALSE 54768
// exit ;
54764: POP
54765: POP
54766: GO 54833
54768: GO 54727
54770: POP
54771: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
54772: LD_ADDR_EXP 157
54776: PUSH
54777: LD_EXP 157
54781: PPUSH
54782: LD_VAR 0 5
54786: PUSH
54787: LD_EXP 157
54791: PUSH
54792: LD_VAR 0 5
54796: ARRAY
54797: PUSH
54798: LD_INT 1
54800: PLUS
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PPUSH
54806: LD_VAR 0 2
54810: PUSH
54811: LD_VAR 0 3
54815: PUSH
54816: EMPTY
54817: LIST
54818: LIST
54819: PPUSH
54820: CALL 61902 0 3
54824: ST_TO_ADDR
// end ; result := true ;
54825: LD_ADDR_VAR 0 4
54829: PUSH
54830: LD_INT 1
54832: ST_TO_ADDR
// end ;
54833: LD_VAR 0 4
54837: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
54838: LD_INT 0
54840: PPUSH
54841: PPUSH
54842: PPUSH
// if not unit in minersList then
54843: LD_VAR 0 1
54847: PUSH
54848: LD_EXP 156
54852: IN
54853: NOT
54854: IFFALSE 54858
// exit ;
54856: GO 55065
// index := GetElementIndex ( minersList , unit ) ;
54858: LD_ADDR_VAR 0 6
54862: PUSH
54863: LD_EXP 156
54867: PPUSH
54868: LD_VAR 0 1
54872: PPUSH
54873: CALL 61685 0 2
54877: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
54878: LD_ADDR_VAR 0 5
54882: PUSH
54883: DOUBLE
54884: LD_EXP 157
54888: PUSH
54889: LD_VAR 0 6
54893: ARRAY
54894: INC
54895: ST_TO_ADDR
54896: LD_INT 1
54898: PUSH
54899: FOR_DOWNTO
54900: IFFALSE 55063
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
54902: LD_EXP 157
54906: PUSH
54907: LD_VAR 0 6
54911: ARRAY
54912: PUSH
54913: LD_VAR 0 5
54917: ARRAY
54918: PUSH
54919: LD_INT 1
54921: ARRAY
54922: PPUSH
54923: LD_EXP 157
54927: PUSH
54928: LD_VAR 0 6
54932: ARRAY
54933: PUSH
54934: LD_VAR 0 5
54938: ARRAY
54939: PUSH
54940: LD_INT 2
54942: ARRAY
54943: PPUSH
54944: LD_VAR 0 2
54948: PPUSH
54949: LD_VAR 0 3
54953: PPUSH
54954: CALL_OW 298
54958: PUSH
54959: LD_INT 6
54961: LESS
54962: IFFALSE 55061
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54964: LD_EXP 157
54968: PUSH
54969: LD_VAR 0 6
54973: ARRAY
54974: PUSH
54975: LD_VAR 0 5
54979: ARRAY
54980: PUSH
54981: LD_INT 1
54983: ARRAY
54984: PPUSH
54985: LD_EXP 157
54989: PUSH
54990: LD_VAR 0 6
54994: ARRAY
54995: PUSH
54996: LD_VAR 0 5
55000: ARRAY
55001: PUSH
55002: LD_INT 2
55004: ARRAY
55005: PPUSH
55006: LD_VAR 0 1
55010: PPUSH
55011: CALL_OW 255
55015: PPUSH
55016: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
55020: LD_ADDR_EXP 157
55024: PUSH
55025: LD_EXP 157
55029: PPUSH
55030: LD_VAR 0 6
55034: PPUSH
55035: LD_EXP 157
55039: PUSH
55040: LD_VAR 0 6
55044: ARRAY
55045: PPUSH
55046: LD_VAR 0 5
55050: PPUSH
55051: CALL_OW 3
55055: PPUSH
55056: CALL_OW 1
55060: ST_TO_ADDR
// end ; end ;
55061: GO 54899
55063: POP
55064: POP
// end ;
55065: LD_VAR 0 4
55069: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
55070: LD_INT 0
55072: PPUSH
55073: PPUSH
55074: PPUSH
55075: PPUSH
55076: PPUSH
55077: PPUSH
55078: PPUSH
55079: PPUSH
55080: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
55081: LD_VAR 0 1
55085: PPUSH
55086: CALL_OW 264
55090: PUSH
55091: LD_INT 81
55093: EQUAL
55094: NOT
55095: IFTRUE 55110
55097: PUSH
55098: LD_VAR 0 1
55102: PUSH
55103: LD_EXP 156
55107: IN
55108: NOT
55109: OR
55110: IFFALSE 55114
// exit ;
55112: GO 55440
// index := GetElementIndex ( minersList , unit ) ;
55114: LD_ADDR_VAR 0 6
55118: PUSH
55119: LD_EXP 156
55123: PPUSH
55124: LD_VAR 0 1
55128: PPUSH
55129: CALL 61685 0 2
55133: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
55134: LD_ADDR_VAR 0 8
55138: PUSH
55139: LD_EXP 158
55143: PUSH
55144: LD_EXP 157
55148: PUSH
55149: LD_VAR 0 6
55153: ARRAY
55154: MINUS
55155: ST_TO_ADDR
// if not minesFreeAmount then
55156: LD_VAR 0 8
55160: NOT
55161: IFFALSE 55165
// exit ;
55163: GO 55440
// tmp := [ ] ;
55165: LD_ADDR_VAR 0 7
55169: PUSH
55170: EMPTY
55171: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
55172: LD_ADDR_VAR 0 5
55176: PUSH
55177: DOUBLE
55178: LD_INT 1
55180: DEC
55181: ST_TO_ADDR
55182: LD_VAR 0 8
55186: PUSH
55187: FOR_TO
55188: IFFALSE 55387
// begin _d := rand ( 0 , 5 ) ;
55190: LD_ADDR_VAR 0 11
55194: PUSH
55195: LD_INT 0
55197: PPUSH
55198: LD_INT 5
55200: PPUSH
55201: CALL_OW 12
55205: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
55206: LD_ADDR_VAR 0 12
55210: PUSH
55211: LD_INT 2
55213: PPUSH
55214: LD_INT 6
55216: PPUSH
55217: CALL_OW 12
55221: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
55222: LD_ADDR_VAR 0 9
55226: PUSH
55227: LD_VAR 0 2
55231: PPUSH
55232: LD_VAR 0 11
55236: PPUSH
55237: LD_VAR 0 12
55241: PPUSH
55242: CALL_OW 272
55246: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
55247: LD_ADDR_VAR 0 10
55251: PUSH
55252: LD_VAR 0 3
55256: PPUSH
55257: LD_VAR 0 11
55261: PPUSH
55262: LD_VAR 0 12
55266: PPUSH
55267: CALL_OW 273
55271: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
55272: LD_VAR 0 9
55276: PPUSH
55277: LD_VAR 0 10
55281: PPUSH
55282: CALL_OW 488
55286: IFFALSE 55310
55288: PUSH
55289: LD_VAR 0 9
55293: PUSH
55294: LD_VAR 0 10
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: LD_VAR 0 7
55307: IN
55308: NOT
55309: AND
55310: IFFALSE 55329
55312: PUSH
55313: LD_VAR 0 9
55317: PPUSH
55318: LD_VAR 0 10
55322: PPUSH
55323: CALL_OW 458
55327: NOT
55328: AND
55329: IFFALSE 55371
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
55331: LD_ADDR_VAR 0 7
55335: PUSH
55336: LD_VAR 0 7
55340: PPUSH
55341: LD_VAR 0 7
55345: PUSH
55346: LD_INT 1
55348: PLUS
55349: PPUSH
55350: LD_VAR 0 9
55354: PUSH
55355: LD_VAR 0 10
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: PPUSH
55364: CALL_OW 1
55368: ST_TO_ADDR
55369: GO 55385
// i := i - 1 ;
55371: LD_ADDR_VAR 0 5
55375: PUSH
55376: LD_VAR 0 5
55380: PUSH
55381: LD_INT 1
55383: MINUS
55384: ST_TO_ADDR
// end ;
55385: GO 55187
55387: POP
55388: POP
// for i in tmp do
55389: LD_ADDR_VAR 0 5
55393: PUSH
55394: LD_VAR 0 7
55398: PUSH
55399: FOR_IN
55400: IFFALSE 55438
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
55402: LD_VAR 0 1
55406: PPUSH
55407: LD_VAR 0 5
55411: PUSH
55412: LD_INT 1
55414: ARRAY
55415: PPUSH
55416: LD_VAR 0 5
55420: PUSH
55421: LD_INT 2
55423: ARRAY
55424: PPUSH
55425: CALL 54431 0 3
55429: NOT
55430: IFFALSE 55436
// exit ;
55432: POP
55433: POP
55434: GO 55440
55436: GO 55399
55438: POP
55439: POP
// end ;
55440: LD_VAR 0 4
55444: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
55445: LD_INT 0
55447: PPUSH
55448: PPUSH
55449: PPUSH
55450: PPUSH
55451: PPUSH
55452: PPUSH
55453: PPUSH
55454: PPUSH
55455: PPUSH
// if GetClass ( unit ) <> class_sniper then
55456: LD_VAR 0 1
55460: PPUSH
55461: CALL_OW 257
55465: PUSH
55466: LD_INT 5
55468: NONEQUAL
55469: IFFALSE 55473
// exit ;
55471: GO 55943
// dist := 8 ;
55473: LD_ADDR_VAR 0 5
55477: PUSH
55478: LD_INT 8
55480: ST_TO_ADDR
// viewRange := 12 ;
55481: LD_ADDR_VAR 0 8
55485: PUSH
55486: LD_INT 12
55488: ST_TO_ADDR
// side := GetSide ( unit ) ;
55489: LD_ADDR_VAR 0 6
55493: PUSH
55494: LD_VAR 0 1
55498: PPUSH
55499: CALL_OW 255
55503: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
55504: LD_INT 61
55506: PPUSH
55507: LD_VAR 0 6
55511: PPUSH
55512: CALL_OW 321
55516: PUSH
55517: LD_INT 2
55519: EQUAL
55520: IFFALSE 55530
// viewRange := 16 ;
55522: LD_ADDR_VAR 0 8
55526: PUSH
55527: LD_INT 16
55529: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
55530: LD_VAR 0 1
55534: PPUSH
55535: LD_VAR 0 2
55539: PPUSH
55540: LD_VAR 0 3
55544: PPUSH
55545: CALL_OW 297
55549: PUSH
55550: LD_VAR 0 5
55554: GREATER
55555: IFFALSE 55634
// begin ComMoveXY ( unit , x , y ) ;
55557: LD_VAR 0 1
55561: PPUSH
55562: LD_VAR 0 2
55566: PPUSH
55567: LD_VAR 0 3
55571: PPUSH
55572: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
55576: LD_INT 35
55578: PPUSH
55579: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
55583: LD_VAR 0 1
55587: PPUSH
55588: LD_VAR 0 2
55592: PPUSH
55593: LD_VAR 0 3
55597: PPUSH
55598: CALL 93741 0 3
55602: NOT
55603: IFFALSE 55607
// exit ;
55605: GO 55943
// until GetDistUnitXY ( unit , x , y ) < dist ;
55607: LD_VAR 0 1
55611: PPUSH
55612: LD_VAR 0 2
55616: PPUSH
55617: LD_VAR 0 3
55621: PPUSH
55622: CALL_OW 297
55626: PUSH
55627: LD_VAR 0 5
55631: LESS
55632: IFFALSE 55576
// end ; ComTurnXY ( unit , x , y ) ;
55634: LD_VAR 0 1
55638: PPUSH
55639: LD_VAR 0 2
55643: PPUSH
55644: LD_VAR 0 3
55648: PPUSH
55649: CALL_OW 118
// repeat if Multiplayer then
55653: LD_OWVAR 4
55657: IFFALSE 55668
// wait ( 35 ) else
55659: LD_INT 35
55661: PPUSH
55662: CALL_OW 67
55666: GO 55675
// wait ( 5 ) ;
55668: LD_INT 5
55670: PPUSH
55671: CALL_OW 67
// _d := GetDir ( unit ) ;
55675: LD_ADDR_VAR 0 11
55679: PUSH
55680: LD_VAR 0 1
55684: PPUSH
55685: CALL_OW 254
55689: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
55690: LD_ADDR_VAR 0 7
55694: PUSH
55695: LD_VAR 0 1
55699: PPUSH
55700: CALL_OW 250
55704: PPUSH
55705: LD_VAR 0 1
55709: PPUSH
55710: CALL_OW 251
55714: PPUSH
55715: LD_VAR 0 2
55719: PPUSH
55720: LD_VAR 0 3
55724: PPUSH
55725: CALL 96377 0 4
55729: ST_TO_ADDR
// until dir = _d ;
55730: LD_VAR 0 7
55734: PUSH
55735: LD_VAR 0 11
55739: EQUAL
55740: IFFALSE 55653
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
55742: LD_ADDR_VAR 0 9
55746: PUSH
55747: LD_VAR 0 1
55751: PPUSH
55752: CALL_OW 250
55756: PPUSH
55757: LD_VAR 0 7
55761: PPUSH
55762: LD_VAR 0 5
55766: PPUSH
55767: CALL_OW 272
55771: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
55772: LD_ADDR_VAR 0 10
55776: PUSH
55777: LD_VAR 0 1
55781: PPUSH
55782: CALL_OW 251
55786: PPUSH
55787: LD_VAR 0 7
55791: PPUSH
55792: LD_VAR 0 5
55796: PPUSH
55797: CALL_OW 273
55801: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55802: LD_VAR 0 9
55806: PPUSH
55807: LD_VAR 0 10
55811: PPUSH
55812: CALL_OW 488
55816: NOT
55817: IFFALSE 55821
// exit ;
55819: GO 55943
// ComAnimCustom ( unit , 1 ) ;
55821: LD_VAR 0 1
55825: PPUSH
55826: LD_INT 1
55828: PPUSH
55829: CALL_OW 592
// p := 0 ;
55833: LD_ADDR_VAR 0 12
55837: PUSH
55838: LD_INT 0
55840: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
55841: LD_VAR 0 9
55845: PPUSH
55846: LD_VAR 0 10
55850: PPUSH
55851: LD_VAR 0 6
55855: PPUSH
55856: LD_VAR 0 8
55860: PPUSH
55861: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
55865: LD_INT 35
55867: PPUSH
55868: CALL_OW 67
// p := Inc ( p ) ;
55872: LD_ADDR_VAR 0 12
55876: PUSH
55877: LD_VAR 0 12
55881: PPUSH
55882: CALL 96333 0 1
55886: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
55887: LD_VAR 0 12
55891: PUSH
55892: LD_INT 3
55894: EQUAL
55895: IFTRUE 55909
55897: PUSH
55898: LD_VAR 0 1
55902: PPUSH
55903: CALL_OW 302
55907: NOT
55908: OR
55909: IFTRUE 55922
55911: PUSH
55912: LD_VAR 0 1
55916: PPUSH
55917: CALL_OW 301
55921: OR
55922: IFFALSE 55865
// RemoveSeeing ( _x , _y , side ) ;
55924: LD_VAR 0 9
55928: PPUSH
55929: LD_VAR 0 10
55933: PPUSH
55934: LD_VAR 0 6
55938: PPUSH
55939: CALL_OW 331
// end ;
55943: LD_VAR 0 4
55947: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
55948: LD_INT 0
55950: PPUSH
55951: PPUSH
55952: PPUSH
55953: PPUSH
55954: PPUSH
55955: PPUSH
55956: PPUSH
55957: PPUSH
55958: PPUSH
55959: PPUSH
55960: PPUSH
// if not unit then
55961: LD_VAR 0 1
55965: NOT
55966: IFFALSE 55970
// exit ;
55968: GO 56241
// side := GetSide ( unit ) ;
55970: LD_ADDR_VAR 0 3
55974: PUSH
55975: LD_VAR 0 1
55979: PPUSH
55980: CALL_OW 255
55984: ST_TO_ADDR
// x := GetX ( unit ) ;
55985: LD_ADDR_VAR 0 5
55989: PUSH
55990: LD_VAR 0 1
55994: PPUSH
55995: CALL_OW 250
55999: ST_TO_ADDR
// y := GetY ( unit ) ;
56000: LD_ADDR_VAR 0 6
56004: PUSH
56005: LD_VAR 0 1
56009: PPUSH
56010: CALL_OW 251
56014: ST_TO_ADDR
// r := 8 ;
56015: LD_ADDR_VAR 0 4
56019: PUSH
56020: LD_INT 8
56022: ST_TO_ADDR
// if x - r < 0 then
56023: LD_VAR 0 5
56027: PUSH
56028: LD_VAR 0 4
56032: MINUS
56033: PUSH
56034: LD_INT 0
56036: LESS
56037: IFFALSE 56049
// min_x := 0 else
56039: LD_ADDR_VAR 0 7
56043: PUSH
56044: LD_INT 0
56046: ST_TO_ADDR
56047: GO 56065
// min_x := x - r ;
56049: LD_ADDR_VAR 0 7
56053: PUSH
56054: LD_VAR 0 5
56058: PUSH
56059: LD_VAR 0 4
56063: MINUS
56064: ST_TO_ADDR
// if y - r < 0 then
56065: LD_VAR 0 6
56069: PUSH
56070: LD_VAR 0 4
56074: MINUS
56075: PUSH
56076: LD_INT 0
56078: LESS
56079: IFFALSE 56091
// min_y := 0 else
56081: LD_ADDR_VAR 0 8
56085: PUSH
56086: LD_INT 0
56088: ST_TO_ADDR
56089: GO 56107
// min_y := y - r ;
56091: LD_ADDR_VAR 0 8
56095: PUSH
56096: LD_VAR 0 6
56100: PUSH
56101: LD_VAR 0 4
56105: MINUS
56106: ST_TO_ADDR
// max_x := x + r ;
56107: LD_ADDR_VAR 0 9
56111: PUSH
56112: LD_VAR 0 5
56116: PUSH
56117: LD_VAR 0 4
56121: PLUS
56122: ST_TO_ADDR
// max_y := y + r ;
56123: LD_ADDR_VAR 0 10
56127: PUSH
56128: LD_VAR 0 6
56132: PUSH
56133: LD_VAR 0 4
56137: PLUS
56138: ST_TO_ADDR
// for _x = min_x to max_x do
56139: LD_ADDR_VAR 0 11
56143: PUSH
56144: DOUBLE
56145: LD_VAR 0 7
56149: DEC
56150: ST_TO_ADDR
56151: LD_VAR 0 9
56155: PUSH
56156: FOR_TO
56157: IFFALSE 56239
// for _y = min_y to max_y do
56159: LD_ADDR_VAR 0 12
56163: PUSH
56164: DOUBLE
56165: LD_VAR 0 8
56169: DEC
56170: ST_TO_ADDR
56171: LD_VAR 0 10
56175: PUSH
56176: FOR_TO
56177: IFFALSE 56235
// begin if not ValidHex ( _x , _y ) then
56179: LD_VAR 0 11
56183: PPUSH
56184: LD_VAR 0 12
56188: PPUSH
56189: CALL_OW 488
56193: NOT
56194: IFFALSE 56198
// continue ;
56196: GO 56176
// if MineAtPos ( _x , _y ) then
56198: LD_VAR 0 11
56202: PPUSH
56203: LD_VAR 0 12
56207: PPUSH
56208: CALL_OW 458
56212: IFFALSE 56233
// ViewMineAtPos ( _x , _y , side ) ;
56214: LD_VAR 0 11
56218: PPUSH
56219: LD_VAR 0 12
56223: PPUSH
56224: LD_VAR 0 3
56228: PPUSH
56229: CALL_OW 457
// end ;
56233: GO 56176
56235: POP
56236: POP
56237: GO 56156
56239: POP
56240: POP
// end ;
56241: LD_VAR 0 2
56245: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer , side ; begin
56246: LD_INT 0
56248: PPUSH
56249: PPUSH
56250: PPUSH
56251: PPUSH
56252: PPUSH
56253: PPUSH
56254: PPUSH
// if not units then
56255: LD_VAR 0 1
56259: NOT
56260: IFFALSE 56264
// exit ;
56262: GO 56728
// scaners := [ ] ;
56264: LD_ADDR_VAR 0 6
56268: PUSH
56269: EMPTY
56270: ST_TO_ADDR
// for i in units do
56271: LD_ADDR_VAR 0 3
56275: PUSH
56276: LD_VAR 0 1
56280: PUSH
56281: FOR_IN
56282: IFFALSE 56439
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
56284: LD_VAR 0 3
56288: PPUSH
56289: CALL_OW 264
56293: PUSH
56294: LD_INT 11
56296: NONEQUAL
56297: IFTRUE 56311
56299: PUSH
56300: LD_VAR 0 3
56304: PPUSH
56305: CALL_OW 302
56309: NOT
56310: OR
56311: IFTRUE 56328
56313: PUSH
56314: LD_VAR 0 3
56318: PPUSH
56319: CALL_OW 110
56323: PUSH
56324: LD_INT 502
56326: EQUAL
56327: OR
56328: IFFALSE 56332
// continue ;
56330: GO 56281
// ComStop ( i ) ;
56332: LD_VAR 0 3
56336: PPUSH
56337: CALL_OW 141
// x := GetX ( i ) ;
56341: LD_ADDR_VAR 0 4
56345: PUSH
56346: LD_VAR 0 3
56350: PPUSH
56351: CALL_OW 250
56355: ST_TO_ADDR
// y := GetY ( i ) ;
56356: LD_ADDR_VAR 0 5
56360: PUSH
56361: LD_VAR 0 3
56365: PPUSH
56366: CALL_OW 251
56370: ST_TO_ADDR
// if GetSide ( i ) = your_side then
56371: LD_VAR 0 3
56375: PPUSH
56376: CALL_OW 255
56380: PUSH
56381: LD_OWVAR 2
56385: EQUAL
56386: IFFALSE 56405
// PlaySoundXY ( x , y , mineDetector ) ;
56388: LD_VAR 0 4
56392: PPUSH
56393: LD_VAR 0 5
56397: PPUSH
56398: LD_STRING mineDetector
56400: PPUSH
56401: CALL_OW 366
// scaners := Join ( scaners , i ) ;
56405: LD_ADDR_VAR 0 6
56409: PUSH
56410: LD_VAR 0 6
56414: PPUSH
56415: LD_VAR 0 3
56419: PPUSH
56420: CALL 94960 0 2
56424: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
56425: LD_VAR 0 3
56429: PPUSH
56430: LD_INT 502
56432: PPUSH
56433: CALL_OW 109
// end ;
56437: GO 56281
56439: POP
56440: POP
// if not scaners then
56441: LD_VAR 0 6
56445: NOT
56446: IFFALSE 56450
// exit ;
56448: GO 56728
// wait ( 3 ) ;
56450: LD_INT 3
56452: PPUSH
56453: CALL_OW 67
// timer := 6 ;
56457: LD_ADDR_VAR 0 7
56461: PUSH
56462: LD_INT 6
56464: ST_TO_ADDR
// repeat for i in scaners do
56465: LD_ADDR_VAR 0 3
56469: PUSH
56470: LD_VAR 0 6
56474: PUSH
56475: FOR_IN
56476: IFFALSE 56626
// begin side := GetSide ( i ) ;
56478: LD_ADDR_VAR 0 8
56482: PUSH
56483: LD_VAR 0 3
56487: PPUSH
56488: CALL_OW 255
56492: ST_TO_ADDR
// if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
56493: LD_VAR 0 3
56497: PPUSH
56498: CALL_OW 302
56502: NOT
56503: IFTRUE 56516
56505: PUSH
56506: LD_VAR 0 3
56510: PPUSH
56511: CALL_OW 314
56515: OR
56516: IFTRUE 56547
56518: PUSH
56519: LD_VAR 0 3
56523: PPUSH
56524: CALL_OW 263
56528: PUSH
56529: LD_INT 1
56531: EQUAL
56532: IFFALSE 56546
56534: PUSH
56535: LD_VAR 0 3
56539: PPUSH
56540: CALL_OW 311
56544: NOT
56545: AND
56546: OR
56547: IFFALSE 56591
// begin SetUnitDisplayNumber ( i , 0 ) ;
56549: LD_VAR 0 3
56553: PPUSH
56554: LD_INT 0
56556: PPUSH
56557: CALL_OW 505
// SetTag ( i , 0 ) ;
56561: LD_VAR 0 3
56565: PPUSH
56566: LD_INT 0
56568: PPUSH
56569: CALL_OW 109
// scaners := scaners diff i ;
56573: LD_ADDR_VAR 0 6
56577: PUSH
56578: LD_VAR 0 6
56582: PUSH
56583: LD_VAR 0 3
56587: DIFF
56588: ST_TO_ADDR
// continue ;
56589: GO 56475
// end ; if side in [ your_side , 9 ] then
56591: LD_VAR 0 8
56595: PUSH
56596: LD_OWVAR 2
56600: PUSH
56601: LD_INT 9
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: IN
56608: IFFALSE 56624
// SetUnitDisplayNumber ( i , timer ) ;
56610: LD_VAR 0 3
56614: PPUSH
56615: LD_VAR 0 7
56619: PPUSH
56620: CALL_OW 505
// end ;
56624: GO 56475
56626: POP
56627: POP
// if not scaners then
56628: LD_VAR 0 6
56632: NOT
56633: IFFALSE 56637
// exit ;
56635: GO 56728
// timer := Dec ( timer ) ;
56637: LD_ADDR_VAR 0 7
56641: PUSH
56642: LD_VAR 0 7
56646: PPUSH
56647: CALL 96355 0 1
56651: ST_TO_ADDR
// wait ( 0 0$1 ) ;
56652: LD_INT 35
56654: PPUSH
56655: CALL_OW 67
// until timer = 0 ;
56659: LD_VAR 0 7
56663: PUSH
56664: LD_INT 0
56666: EQUAL
56667: IFFALSE 56465
// if not scaners then
56669: LD_VAR 0 6
56673: NOT
56674: IFFALSE 56678
// exit ;
56676: GO 56728
// for i in scaners do
56678: LD_ADDR_VAR 0 3
56682: PUSH
56683: LD_VAR 0 6
56687: PUSH
56688: FOR_IN
56689: IFFALSE 56726
// begin SetUnitDisplayNumber ( i , 0 ) ;
56691: LD_VAR 0 3
56695: PPUSH
56696: LD_INT 0
56698: PPUSH
56699: CALL_OW 505
// SetTag ( i , 0 ) ;
56703: LD_VAR 0 3
56707: PPUSH
56708: LD_INT 0
56710: PPUSH
56711: CALL_OW 109
// RevealDetectorMine ( i ) ;
56715: LD_VAR 0 3
56719: PPUSH
56720: CALL 55948 0 1
// end ;
56724: GO 56688
56726: POP
56727: POP
// end ;
56728: LD_VAR 0 2
56732: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
56733: LD_INT 0
56735: PPUSH
// if p1 = mine_detector_mode then
56736: LD_VAR 0 2
56740: PUSH
56741: LD_INT 103
56743: EQUAL
56744: IFFALSE 56755
// DetectMine ( units ) ;
56746: LD_VAR 0 1
56750: PPUSH
56751: CALL 56246 0 1
// end ; end_of_file
56755: LD_VAR 0 7
56759: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
56760: LD_INT 0
56762: PPUSH
56763: PPUSH
// if exist_mode then
56764: LD_VAR 0 2
56768: IFFALSE 56814
// begin unit := CreateCharacter ( prefix & ident ) ;
56770: LD_ADDR_VAR 0 5
56774: PUSH
56775: LD_VAR 0 3
56779: PUSH
56780: LD_VAR 0 1
56784: STR
56785: PPUSH
56786: CALL_OW 34
56790: ST_TO_ADDR
// if unit then
56791: LD_VAR 0 5
56795: IFFALSE 56812
// DeleteCharacters ( prefix & ident ) ;
56797: LD_VAR 0 3
56801: PUSH
56802: LD_VAR 0 1
56806: STR
56807: PPUSH
56808: CALL_OW 40
// end else
56812: GO 56829
// unit := NewCharacter ( ident ) ;
56814: LD_ADDR_VAR 0 5
56818: PUSH
56819: LD_VAR 0 1
56823: PPUSH
56824: CALL_OW 25
56828: ST_TO_ADDR
// result := unit ;
56829: LD_ADDR_VAR 0 4
56833: PUSH
56834: LD_VAR 0 5
56838: ST_TO_ADDR
// end ;
56839: LD_VAR 0 4
56843: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
56844: LD_INT 0
56846: PPUSH
56847: PPUSH
// if exist_mode then
56848: LD_VAR 0 2
56852: IFFALSE 56877
// unit := CreateCharacter ( prefix & ident ) else
56854: LD_ADDR_VAR 0 5
56858: PUSH
56859: LD_VAR 0 3
56863: PUSH
56864: LD_VAR 0 1
56868: STR
56869: PPUSH
56870: CALL_OW 34
56874: ST_TO_ADDR
56875: GO 56892
// unit := NewCharacter ( ident ) ;
56877: LD_ADDR_VAR 0 5
56881: PUSH
56882: LD_VAR 0 1
56886: PPUSH
56887: CALL_OW 25
56891: ST_TO_ADDR
// result := unit ;
56892: LD_ADDR_VAR 0 4
56896: PUSH
56897: LD_VAR 0 5
56901: ST_TO_ADDR
// end ;
56902: LD_VAR 0 4
56906: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
56907: LD_INT 0
56909: PPUSH
56910: PPUSH
// if not side or not nation then
56911: LD_VAR 0 1
56915: NOT
56916: IFTRUE 56925
56918: PUSH
56919: LD_VAR 0 2
56923: NOT
56924: OR
56925: IFFALSE 56929
// exit ;
56927: GO 57723
// case nation of nation_american :
56929: LD_VAR 0 2
56933: PUSH
56934: LD_INT 1
56936: DOUBLE
56937: EQUAL
56938: IFTRUE 56942
56940: GO 57164
56942: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
56943: LD_ADDR_VAR 0 4
56947: PUSH
56948: LD_INT 35
56950: PUSH
56951: LD_INT 45
56953: PUSH
56954: LD_INT 46
56956: PUSH
56957: LD_INT 47
56959: PUSH
56960: LD_INT 82
56962: PUSH
56963: LD_INT 83
56965: PUSH
56966: LD_INT 84
56968: PUSH
56969: LD_INT 85
56971: PUSH
56972: LD_INT 86
56974: PUSH
56975: LD_INT 1
56977: PUSH
56978: LD_INT 2
56980: PUSH
56981: LD_INT 6
56983: PUSH
56984: LD_INT 15
56986: PUSH
56987: LD_INT 16
56989: PUSH
56990: LD_INT 7
56992: PUSH
56993: LD_INT 12
56995: PUSH
56996: LD_INT 13
56998: PUSH
56999: LD_INT 10
57001: PUSH
57002: LD_INT 14
57004: PUSH
57005: LD_INT 20
57007: PUSH
57008: LD_INT 21
57010: PUSH
57011: LD_INT 22
57013: PUSH
57014: LD_INT 25
57016: PUSH
57017: LD_INT 32
57019: PUSH
57020: LD_INT 27
57022: PUSH
57023: LD_INT 36
57025: PUSH
57026: LD_INT 69
57028: PUSH
57029: LD_INT 39
57031: PUSH
57032: LD_INT 34
57034: PUSH
57035: LD_INT 40
57037: PUSH
57038: LD_INT 48
57040: PUSH
57041: LD_INT 49
57043: PUSH
57044: LD_INT 50
57046: PUSH
57047: LD_INT 51
57049: PUSH
57050: LD_INT 52
57052: PUSH
57053: LD_INT 53
57055: PUSH
57056: LD_INT 54
57058: PUSH
57059: LD_INT 55
57061: PUSH
57062: LD_INT 56
57064: PUSH
57065: LD_INT 57
57067: PUSH
57068: LD_INT 58
57070: PUSH
57071: LD_INT 59
57073: PUSH
57074: LD_INT 60
57076: PUSH
57077: LD_INT 61
57079: PUSH
57080: LD_INT 62
57082: PUSH
57083: LD_INT 80
57085: PUSH
57086: LD_INT 82
57088: PUSH
57089: LD_INT 83
57091: PUSH
57092: LD_INT 84
57094: PUSH
57095: LD_INT 85
57097: PUSH
57098: LD_INT 86
57100: PUSH
57101: LD_INT 90
57103: PUSH
57104: LD_INT 93
57106: PUSH
57107: EMPTY
57108: LIST
57109: LIST
57110: LIST
57111: LIST
57112: LIST
57113: LIST
57114: LIST
57115: LIST
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: LIST
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: LIST
57126: LIST
57127: LIST
57128: LIST
57129: LIST
57130: LIST
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: LIST
57137: LIST
57138: LIST
57139: LIST
57140: LIST
57141: LIST
57142: LIST
57143: LIST
57144: LIST
57145: LIST
57146: LIST
57147: LIST
57148: LIST
57149: LIST
57150: LIST
57151: LIST
57152: LIST
57153: LIST
57154: LIST
57155: LIST
57156: LIST
57157: LIST
57158: LIST
57159: LIST
57160: LIST
57161: ST_TO_ADDR
57162: GO 57645
57164: LD_INT 2
57166: DOUBLE
57167: EQUAL
57168: IFTRUE 57172
57170: GO 57406
57172: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
57173: LD_ADDR_VAR 0 4
57177: PUSH
57178: LD_INT 35
57180: PUSH
57181: LD_INT 45
57183: PUSH
57184: LD_INT 46
57186: PUSH
57187: LD_INT 47
57189: PUSH
57190: LD_INT 82
57192: PUSH
57193: LD_INT 83
57195: PUSH
57196: LD_INT 84
57198: PUSH
57199: LD_INT 85
57201: PUSH
57202: LD_INT 87
57204: PUSH
57205: LD_INT 70
57207: PUSH
57208: LD_INT 1
57210: PUSH
57211: LD_INT 11
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: LD_INT 4
57219: PUSH
57220: LD_INT 5
57222: PUSH
57223: LD_INT 6
57225: PUSH
57226: LD_INT 15
57228: PUSH
57229: LD_INT 18
57231: PUSH
57232: LD_INT 7
57234: PUSH
57235: LD_INT 17
57237: PUSH
57238: LD_INT 8
57240: PUSH
57241: LD_INT 20
57243: PUSH
57244: LD_INT 21
57246: PUSH
57247: LD_INT 22
57249: PUSH
57250: LD_INT 72
57252: PUSH
57253: LD_INT 26
57255: PUSH
57256: LD_INT 69
57258: PUSH
57259: LD_INT 39
57261: PUSH
57262: LD_INT 40
57264: PUSH
57265: LD_INT 41
57267: PUSH
57268: LD_INT 42
57270: PUSH
57271: LD_INT 43
57273: PUSH
57274: LD_INT 48
57276: PUSH
57277: LD_INT 49
57279: PUSH
57280: LD_INT 50
57282: PUSH
57283: LD_INT 51
57285: PUSH
57286: LD_INT 52
57288: PUSH
57289: LD_INT 53
57291: PUSH
57292: LD_INT 54
57294: PUSH
57295: LD_INT 55
57297: PUSH
57298: LD_INT 56
57300: PUSH
57301: LD_INT 60
57303: PUSH
57304: LD_INT 61
57306: PUSH
57307: LD_INT 62
57309: PUSH
57310: LD_INT 66
57312: PUSH
57313: LD_INT 67
57315: PUSH
57316: LD_INT 68
57318: PUSH
57319: LD_INT 81
57321: PUSH
57322: LD_INT 82
57324: PUSH
57325: LD_INT 83
57327: PUSH
57328: LD_INT 84
57330: PUSH
57331: LD_INT 85
57333: PUSH
57334: LD_INT 87
57336: PUSH
57337: LD_INT 88
57339: PUSH
57340: LD_INT 92
57342: PUSH
57343: LD_INT 94
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: LIST
57351: LIST
57352: LIST
57353: LIST
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: LIST
57359: LIST
57360: LIST
57361: LIST
57362: LIST
57363: LIST
57364: LIST
57365: LIST
57366: LIST
57367: LIST
57368: LIST
57369: LIST
57370: LIST
57371: LIST
57372: LIST
57373: LIST
57374: LIST
57375: LIST
57376: LIST
57377: LIST
57378: LIST
57379: LIST
57380: LIST
57381: LIST
57382: LIST
57383: LIST
57384: LIST
57385: LIST
57386: LIST
57387: LIST
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: LIST
57393: LIST
57394: LIST
57395: LIST
57396: LIST
57397: LIST
57398: LIST
57399: LIST
57400: LIST
57401: LIST
57402: LIST
57403: ST_TO_ADDR
57404: GO 57645
57406: LD_INT 3
57408: DOUBLE
57409: EQUAL
57410: IFTRUE 57414
57412: GO 57644
57414: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
57415: LD_ADDR_VAR 0 4
57419: PUSH
57420: LD_INT 46
57422: PUSH
57423: LD_INT 47
57425: PUSH
57426: LD_INT 1
57428: PUSH
57429: LD_INT 2
57431: PUSH
57432: LD_INT 82
57434: PUSH
57435: LD_INT 83
57437: PUSH
57438: LD_INT 84
57440: PUSH
57441: LD_INT 85
57443: PUSH
57444: LD_INT 86
57446: PUSH
57447: LD_INT 11
57449: PUSH
57450: LD_INT 9
57452: PUSH
57453: LD_INT 20
57455: PUSH
57456: LD_INT 19
57458: PUSH
57459: LD_INT 21
57461: PUSH
57462: LD_INT 24
57464: PUSH
57465: LD_INT 22
57467: PUSH
57468: LD_INT 25
57470: PUSH
57471: LD_INT 28
57473: PUSH
57474: LD_INT 29
57476: PUSH
57477: LD_INT 30
57479: PUSH
57480: LD_INT 31
57482: PUSH
57483: LD_INT 37
57485: PUSH
57486: LD_INT 38
57488: PUSH
57489: LD_INT 32
57491: PUSH
57492: LD_INT 27
57494: PUSH
57495: LD_INT 33
57497: PUSH
57498: LD_INT 69
57500: PUSH
57501: LD_INT 39
57503: PUSH
57504: LD_INT 34
57506: PUSH
57507: LD_INT 40
57509: PUSH
57510: LD_INT 71
57512: PUSH
57513: LD_INT 23
57515: PUSH
57516: LD_INT 44
57518: PUSH
57519: LD_INT 48
57521: PUSH
57522: LD_INT 49
57524: PUSH
57525: LD_INT 50
57527: PUSH
57528: LD_INT 51
57530: PUSH
57531: LD_INT 52
57533: PUSH
57534: LD_INT 53
57536: PUSH
57537: LD_INT 54
57539: PUSH
57540: LD_INT 55
57542: PUSH
57543: LD_INT 56
57545: PUSH
57546: LD_INT 57
57548: PUSH
57549: LD_INT 58
57551: PUSH
57552: LD_INT 59
57554: PUSH
57555: LD_INT 63
57557: PUSH
57558: LD_INT 64
57560: PUSH
57561: LD_INT 65
57563: PUSH
57564: LD_INT 82
57566: PUSH
57567: LD_INT 83
57569: PUSH
57570: LD_INT 84
57572: PUSH
57573: LD_INT 85
57575: PUSH
57576: LD_INT 86
57578: PUSH
57579: LD_INT 89
57581: PUSH
57582: LD_INT 91
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: LIST
57591: LIST
57592: LIST
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: LIST
57599: LIST
57600: LIST
57601: LIST
57602: LIST
57603: LIST
57604: LIST
57605: LIST
57606: LIST
57607: LIST
57608: LIST
57609: LIST
57610: LIST
57611: LIST
57612: LIST
57613: LIST
57614: LIST
57615: LIST
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: LIST
57623: LIST
57624: LIST
57625: LIST
57626: LIST
57627: LIST
57628: LIST
57629: LIST
57630: LIST
57631: LIST
57632: LIST
57633: LIST
57634: LIST
57635: LIST
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: ST_TO_ADDR
57642: GO 57645
57644: POP
// if state > - 1 and state < 3 then
57645: LD_VAR 0 3
57649: PUSH
57650: LD_INT 1
57652: NEG
57653: GREATER
57654: IFFALSE 57666
57656: PUSH
57657: LD_VAR 0 3
57661: PUSH
57662: LD_INT 3
57664: LESS
57665: AND
57666: IFFALSE 57723
// for i in result do
57668: LD_ADDR_VAR 0 5
57672: PUSH
57673: LD_VAR 0 4
57677: PUSH
57678: FOR_IN
57679: IFFALSE 57721
// if GetTech ( i , side ) <> state then
57681: LD_VAR 0 5
57685: PPUSH
57686: LD_VAR 0 1
57690: PPUSH
57691: CALL_OW 321
57695: PUSH
57696: LD_VAR 0 3
57700: NONEQUAL
57701: IFFALSE 57719
// result := result diff i ;
57703: LD_ADDR_VAR 0 4
57707: PUSH
57708: LD_VAR 0 4
57712: PUSH
57713: LD_VAR 0 5
57717: DIFF
57718: ST_TO_ADDR
57719: GO 57678
57721: POP
57722: POP
// end ;
57723: LD_VAR 0 4
57727: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
57728: LD_INT 0
57730: PPUSH
57731: PPUSH
57732: PPUSH
// result := true ;
57733: LD_ADDR_VAR 0 3
57737: PUSH
57738: LD_INT 1
57740: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
57741: LD_ADDR_VAR 0 5
57745: PUSH
57746: LD_VAR 0 2
57750: PPUSH
57751: CALL_OW 480
57755: ST_TO_ADDR
// if not tmp then
57756: LD_VAR 0 5
57760: NOT
57761: IFFALSE 57765
// exit ;
57763: GO 57814
// for i in tmp do
57765: LD_ADDR_VAR 0 4
57769: PUSH
57770: LD_VAR 0 5
57774: PUSH
57775: FOR_IN
57776: IFFALSE 57812
// if GetTech ( i , side ) <> state_researched then
57778: LD_VAR 0 4
57782: PPUSH
57783: LD_VAR 0 1
57787: PPUSH
57788: CALL_OW 321
57792: PUSH
57793: LD_INT 2
57795: NONEQUAL
57796: IFFALSE 57810
// begin result := false ;
57798: LD_ADDR_VAR 0 3
57802: PUSH
57803: LD_INT 0
57805: ST_TO_ADDR
// exit ;
57806: POP
57807: POP
57808: GO 57814
// end ;
57810: GO 57775
57812: POP
57813: POP
// end ;
57814: LD_VAR 0 3
57818: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
57819: LD_INT 0
57821: PPUSH
57822: PPUSH
57823: PPUSH
57824: PPUSH
57825: PPUSH
57826: PPUSH
57827: PPUSH
57828: PPUSH
57829: PPUSH
57830: PPUSH
57831: PPUSH
57832: PPUSH
57833: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
57834: LD_VAR 0 1
57838: NOT
57839: IFTRUE 57856
57841: PUSH
57842: LD_VAR 0 1
57846: PPUSH
57847: CALL_OW 257
57851: PUSH
57852: LD_INT 9
57854: NONEQUAL
57855: OR
57856: IFFALSE 57860
// exit ;
57858: GO 58439
// side := GetSide ( unit ) ;
57860: LD_ADDR_VAR 0 9
57864: PUSH
57865: LD_VAR 0 1
57869: PPUSH
57870: CALL_OW 255
57874: ST_TO_ADDR
// tech_space := tech_spacanom ;
57875: LD_ADDR_VAR 0 12
57879: PUSH
57880: LD_INT 29
57882: ST_TO_ADDR
// tech_time := tech_taurad ;
57883: LD_ADDR_VAR 0 13
57887: PUSH
57888: LD_INT 28
57890: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
57891: LD_ADDR_VAR 0 11
57895: PUSH
57896: LD_VAR 0 1
57900: PPUSH
57901: CALL_OW 310
57905: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
57906: LD_VAR 0 11
57910: PPUSH
57911: CALL_OW 247
57915: PUSH
57916: LD_INT 2
57918: EQUAL
57919: IFFALSE 57923
// exit ;
57921: GO 58439
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
57923: LD_ADDR_VAR 0 8
57927: PUSH
57928: LD_INT 81
57930: PUSH
57931: LD_VAR 0 9
57935: PUSH
57936: EMPTY
57937: LIST
57938: LIST
57939: PUSH
57940: LD_INT 3
57942: PUSH
57943: LD_INT 21
57945: PUSH
57946: LD_INT 3
57948: PUSH
57949: EMPTY
57950: LIST
57951: LIST
57952: PUSH
57953: EMPTY
57954: LIST
57955: LIST
57956: PUSH
57957: EMPTY
57958: LIST
57959: LIST
57960: PPUSH
57961: CALL_OW 69
57965: ST_TO_ADDR
// if not tmp then
57966: LD_VAR 0 8
57970: NOT
57971: IFFALSE 57975
// exit ;
57973: GO 58439
// if in_unit then
57975: LD_VAR 0 11
57979: IFFALSE 58003
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
57981: LD_ADDR_VAR 0 10
57985: PUSH
57986: LD_VAR 0 8
57990: PPUSH
57991: LD_VAR 0 11
57995: PPUSH
57996: CALL_OW 74
58000: ST_TO_ADDR
58001: GO 58023
// enemy := NearestUnitToUnit ( tmp , unit ) ;
58003: LD_ADDR_VAR 0 10
58007: PUSH
58008: LD_VAR 0 8
58012: PPUSH
58013: LD_VAR 0 1
58017: PPUSH
58018: CALL_OW 74
58022: ST_TO_ADDR
// if not enemy then
58023: LD_VAR 0 10
58027: NOT
58028: IFFALSE 58032
// exit ;
58030: GO 58439
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
58032: LD_VAR 0 11
58036: IFFALSE 58058
58038: PUSH
58039: LD_VAR 0 11
58043: PPUSH
58044: LD_VAR 0 10
58048: PPUSH
58049: CALL_OW 296
58053: PUSH
58054: LD_INT 13
58056: GREATER
58057: AND
58058: IFTRUE 58080
58060: PUSH
58061: LD_VAR 0 1
58065: PPUSH
58066: LD_VAR 0 10
58070: PPUSH
58071: CALL_OW 296
58075: PUSH
58076: LD_INT 12
58078: GREATER
58079: OR
58080: IFFALSE 58084
// exit ;
58082: GO 58439
// missile := [ 1 ] ;
58084: LD_ADDR_VAR 0 14
58088: PUSH
58089: LD_INT 1
58091: PUSH
58092: EMPTY
58093: LIST
58094: ST_TO_ADDR
// if Researched ( side , tech_space ) then
58095: LD_VAR 0 9
58099: PPUSH
58100: LD_VAR 0 12
58104: PPUSH
58105: CALL_OW 325
58109: IFFALSE 58138
// missile := Replace ( missile , missile + 1 , 2 ) ;
58111: LD_ADDR_VAR 0 14
58115: PUSH
58116: LD_VAR 0 14
58120: PPUSH
58121: LD_VAR 0 14
58125: PUSH
58126: LD_INT 1
58128: PLUS
58129: PPUSH
58130: LD_INT 2
58132: PPUSH
58133: CALL_OW 1
58137: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
58138: LD_VAR 0 9
58142: PPUSH
58143: LD_VAR 0 13
58147: PPUSH
58148: CALL_OW 325
58152: IFFALSE 58176
58154: PUSH
58155: LD_VAR 0 10
58159: PPUSH
58160: CALL_OW 255
58164: PPUSH
58165: LD_VAR 0 13
58169: PPUSH
58170: CALL_OW 325
58174: NOT
58175: AND
58176: IFFALSE 58205
// missile := Replace ( missile , missile + 1 , 3 ) ;
58178: LD_ADDR_VAR 0 14
58182: PUSH
58183: LD_VAR 0 14
58187: PPUSH
58188: LD_VAR 0 14
58192: PUSH
58193: LD_INT 1
58195: PLUS
58196: PPUSH
58197: LD_INT 3
58199: PPUSH
58200: CALL_OW 1
58204: ST_TO_ADDR
// if missile < 2 then
58205: LD_VAR 0 14
58209: PUSH
58210: LD_INT 2
58212: LESS
58213: IFFALSE 58217
// exit ;
58215: GO 58439
// x := GetX ( enemy ) ;
58217: LD_ADDR_VAR 0 4
58221: PUSH
58222: LD_VAR 0 10
58226: PPUSH
58227: CALL_OW 250
58231: ST_TO_ADDR
// y := GetY ( enemy ) ;
58232: LD_ADDR_VAR 0 5
58236: PUSH
58237: LD_VAR 0 10
58241: PPUSH
58242: CALL_OW 251
58246: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
58247: LD_ADDR_VAR 0 6
58251: PUSH
58252: LD_VAR 0 4
58256: PUSH
58257: LD_INT 1
58259: NEG
58260: PPUSH
58261: LD_INT 1
58263: PPUSH
58264: CALL_OW 12
58268: PLUS
58269: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
58270: LD_ADDR_VAR 0 7
58274: PUSH
58275: LD_VAR 0 5
58279: PUSH
58280: LD_INT 1
58282: NEG
58283: PPUSH
58284: LD_INT 1
58286: PPUSH
58287: CALL_OW 12
58291: PLUS
58292: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58293: LD_VAR 0 6
58297: PPUSH
58298: LD_VAR 0 7
58302: PPUSH
58303: CALL_OW 488
58307: NOT
58308: IFFALSE 58330
// begin _x := x ;
58310: LD_ADDR_VAR 0 6
58314: PUSH
58315: LD_VAR 0 4
58319: ST_TO_ADDR
// _y := y ;
58320: LD_ADDR_VAR 0 7
58324: PUSH
58325: LD_VAR 0 5
58329: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
58330: LD_ADDR_VAR 0 3
58334: PUSH
58335: LD_INT 1
58337: PPUSH
58338: LD_VAR 0 14
58342: PPUSH
58343: CALL_OW 12
58347: ST_TO_ADDR
// case i of 1 :
58348: LD_VAR 0 3
58352: PUSH
58353: LD_INT 1
58355: DOUBLE
58356: EQUAL
58357: IFTRUE 58361
58359: GO 58378
58361: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
58362: LD_VAR 0 1
58366: PPUSH
58367: LD_VAR 0 10
58371: PPUSH
58372: CALL_OW 115
58376: GO 58439
58378: LD_INT 2
58380: DOUBLE
58381: EQUAL
58382: IFTRUE 58386
58384: GO 58408
58386: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
58387: LD_VAR 0 1
58391: PPUSH
58392: LD_VAR 0 6
58396: PPUSH
58397: LD_VAR 0 7
58401: PPUSH
58402: CALL_OW 153
58406: GO 58439
58408: LD_INT 3
58410: DOUBLE
58411: EQUAL
58412: IFTRUE 58416
58414: GO 58438
58416: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
58417: LD_VAR 0 1
58421: PPUSH
58422: LD_VAR 0 6
58426: PPUSH
58427: LD_VAR 0 7
58431: PPUSH
58432: CALL_OW 154
58436: GO 58439
58438: POP
// end ;
58439: LD_VAR 0 2
58443: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
58444: LD_INT 0
58446: PPUSH
58447: PPUSH
58448: PPUSH
58449: PPUSH
58450: PPUSH
58451: PPUSH
// if not unit or not building then
58452: LD_VAR 0 1
58456: NOT
58457: IFTRUE 58466
58459: PUSH
58460: LD_VAR 0 2
58464: NOT
58465: OR
58466: IFFALSE 58470
// exit ;
58468: GO 58628
// x := GetX ( building ) ;
58470: LD_ADDR_VAR 0 5
58474: PUSH
58475: LD_VAR 0 2
58479: PPUSH
58480: CALL_OW 250
58484: ST_TO_ADDR
// y := GetY ( building ) ;
58485: LD_ADDR_VAR 0 6
58489: PUSH
58490: LD_VAR 0 2
58494: PPUSH
58495: CALL_OW 251
58499: ST_TO_ADDR
// for i := 0 to 5 do
58500: LD_ADDR_VAR 0 4
58504: PUSH
58505: DOUBLE
58506: LD_INT 0
58508: DEC
58509: ST_TO_ADDR
58510: LD_INT 5
58512: PUSH
58513: FOR_TO
58514: IFFALSE 58626
// begin _x := ShiftX ( x , i , 3 ) ;
58516: LD_ADDR_VAR 0 7
58520: PUSH
58521: LD_VAR 0 5
58525: PPUSH
58526: LD_VAR 0 4
58530: PPUSH
58531: LD_INT 3
58533: PPUSH
58534: CALL_OW 272
58538: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
58539: LD_ADDR_VAR 0 8
58543: PUSH
58544: LD_VAR 0 6
58548: PPUSH
58549: LD_VAR 0 4
58553: PPUSH
58554: LD_INT 3
58556: PPUSH
58557: CALL_OW 273
58561: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58562: LD_VAR 0 7
58566: PPUSH
58567: LD_VAR 0 8
58571: PPUSH
58572: CALL_OW 488
58576: NOT
58577: IFFALSE 58581
// continue ;
58579: GO 58513
// if HexInfo ( _x , _y ) = 0 then
58581: LD_VAR 0 7
58585: PPUSH
58586: LD_VAR 0 8
58590: PPUSH
58591: CALL_OW 428
58595: PUSH
58596: LD_INT 0
58598: EQUAL
58599: IFFALSE 58624
// begin ComMoveXY ( unit , _x , _y ) ;
58601: LD_VAR 0 1
58605: PPUSH
58606: LD_VAR 0 7
58610: PPUSH
58611: LD_VAR 0 8
58615: PPUSH
58616: CALL_OW 111
// exit ;
58620: POP
58621: POP
58622: GO 58628
// end ; end ;
58624: GO 58513
58626: POP
58627: POP
// end ;
58628: LD_VAR 0 3
58632: RET
// export function ScanBase ( side , base_area ) ; begin
58633: LD_INT 0
58635: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
58636: LD_ADDR_VAR 0 3
58640: PUSH
58641: LD_VAR 0 2
58645: PPUSH
58646: LD_INT 81
58648: PUSH
58649: LD_VAR 0 1
58653: PUSH
58654: EMPTY
58655: LIST
58656: LIST
58657: PPUSH
58658: CALL_OW 70
58662: ST_TO_ADDR
// end ;
58663: LD_VAR 0 3
58667: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
58668: LD_INT 0
58670: PPUSH
58671: PPUSH
58672: PPUSH
58673: PPUSH
// result := false ;
58674: LD_ADDR_VAR 0 2
58678: PUSH
58679: LD_INT 0
58681: ST_TO_ADDR
// side := GetSide ( unit ) ;
58682: LD_ADDR_VAR 0 3
58686: PUSH
58687: LD_VAR 0 1
58691: PPUSH
58692: CALL_OW 255
58696: ST_TO_ADDR
// nat := GetNation ( unit ) ;
58697: LD_ADDR_VAR 0 4
58701: PUSH
58702: LD_VAR 0 1
58706: PPUSH
58707: CALL_OW 248
58711: ST_TO_ADDR
// case nat of 1 :
58712: LD_VAR 0 4
58716: PUSH
58717: LD_INT 1
58719: DOUBLE
58720: EQUAL
58721: IFTRUE 58725
58723: GO 58736
58725: POP
// tech := tech_lassight ; 2 :
58726: LD_ADDR_VAR 0 5
58730: PUSH
58731: LD_INT 12
58733: ST_TO_ADDR
58734: GO 58775
58736: LD_INT 2
58738: DOUBLE
58739: EQUAL
58740: IFTRUE 58744
58742: GO 58755
58744: POP
// tech := tech_mortar ; 3 :
58745: LD_ADDR_VAR 0 5
58749: PUSH
58750: LD_INT 41
58752: ST_TO_ADDR
58753: GO 58775
58755: LD_INT 3
58757: DOUBLE
58758: EQUAL
58759: IFTRUE 58763
58761: GO 58774
58763: POP
// tech := tech_bazooka ; end ;
58764: LD_ADDR_VAR 0 5
58768: PUSH
58769: LD_INT 44
58771: ST_TO_ADDR
58772: GO 58775
58774: POP
// if Researched ( side , tech ) then
58775: LD_VAR 0 3
58779: PPUSH
58780: LD_VAR 0 5
58784: PPUSH
58785: CALL_OW 325
58789: IFFALSE 58816
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
58791: LD_ADDR_VAR 0 2
58795: PUSH
58796: LD_INT 5
58798: PUSH
58799: LD_INT 8
58801: PUSH
58802: LD_INT 9
58804: PUSH
58805: EMPTY
58806: LIST
58807: LIST
58808: LIST
58809: PUSH
58810: LD_VAR 0 4
58814: ARRAY
58815: ST_TO_ADDR
// end ;
58816: LD_VAR 0 2
58820: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
58821: LD_INT 0
58823: PPUSH
58824: PPUSH
58825: PPUSH
// if not mines then
58826: LD_VAR 0 2
58830: NOT
58831: IFFALSE 58835
// exit ;
58833: GO 58979
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
58835: LD_ADDR_VAR 0 5
58839: PUSH
58840: LD_INT 81
58842: PUSH
58843: LD_VAR 0 1
58847: PUSH
58848: EMPTY
58849: LIST
58850: LIST
58851: PUSH
58852: LD_INT 3
58854: PUSH
58855: LD_INT 21
58857: PUSH
58858: LD_INT 3
58860: PUSH
58861: EMPTY
58862: LIST
58863: LIST
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: PUSH
58869: EMPTY
58870: LIST
58871: LIST
58872: PPUSH
58873: CALL_OW 69
58877: ST_TO_ADDR
// for i in mines do
58878: LD_ADDR_VAR 0 4
58882: PUSH
58883: LD_VAR 0 2
58887: PUSH
58888: FOR_IN
58889: IFFALSE 58977
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
58891: LD_VAR 0 4
58895: PUSH
58896: LD_INT 1
58898: ARRAY
58899: PPUSH
58900: LD_VAR 0 4
58904: PUSH
58905: LD_INT 2
58907: ARRAY
58908: PPUSH
58909: CALL_OW 458
58913: NOT
58914: IFFALSE 58918
// continue ;
58916: GO 58888
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
58918: LD_VAR 0 4
58922: PUSH
58923: LD_INT 1
58925: ARRAY
58926: PPUSH
58927: LD_VAR 0 4
58931: PUSH
58932: LD_INT 2
58934: ARRAY
58935: PPUSH
58936: CALL_OW 428
58940: PUSH
58941: LD_VAR 0 5
58945: IN
58946: IFFALSE 58975
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
58948: LD_VAR 0 4
58952: PUSH
58953: LD_INT 1
58955: ARRAY
58956: PPUSH
58957: LD_VAR 0 4
58961: PUSH
58962: LD_INT 2
58964: ARRAY
58965: PPUSH
58966: LD_VAR 0 1
58970: PPUSH
58971: CALL_OW 456
// end ;
58975: GO 58888
58977: POP
58978: POP
// end ;
58979: LD_VAR 0 3
58983: RET
// export function Count ( array ) ; begin
58984: LD_INT 0
58986: PPUSH
// result := array + 0 ;
58987: LD_ADDR_VAR 0 2
58991: PUSH
58992: LD_VAR 0 1
58996: PUSH
58997: LD_INT 0
58999: PLUS
59000: ST_TO_ADDR
// end ;
59001: LD_VAR 0 2
59005: RET
// export function IsEmpty ( building ) ; begin
59006: LD_INT 0
59008: PPUSH
// if not building then
59009: LD_VAR 0 1
59013: NOT
59014: IFFALSE 59018
// exit ;
59016: GO 59061
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
59018: LD_ADDR_VAR 0 2
59022: PUSH
59023: LD_VAR 0 1
59027: PUSH
59028: LD_INT 22
59030: PUSH
59031: LD_VAR 0 1
59035: PPUSH
59036: CALL_OW 255
59040: PUSH
59041: EMPTY
59042: LIST
59043: LIST
59044: PUSH
59045: LD_INT 58
59047: PUSH
59048: EMPTY
59049: LIST
59050: PUSH
59051: EMPTY
59052: LIST
59053: LIST
59054: PPUSH
59055: CALL_OW 69
59059: IN
59060: ST_TO_ADDR
// end ;
59061: LD_VAR 0 2
59065: RET
// export function IsNotFull ( building ) ; var places ; begin
59066: LD_INT 0
59068: PPUSH
59069: PPUSH
// if not building then
59070: LD_VAR 0 1
59074: NOT
59075: IFFALSE 59079
// exit ;
59077: GO 59107
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
59079: LD_ADDR_VAR 0 2
59083: PUSH
59084: LD_VAR 0 1
59088: PPUSH
59089: LD_INT 3
59091: PUSH
59092: LD_INT 62
59094: PUSH
59095: EMPTY
59096: LIST
59097: PUSH
59098: EMPTY
59099: LIST
59100: LIST
59101: PPUSH
59102: CALL_OW 72
59106: ST_TO_ADDR
// end ;
59107: LD_VAR 0 2
59111: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
59112: LD_INT 0
59114: PPUSH
59115: PPUSH
59116: PPUSH
59117: PPUSH
// tmp := [ ] ;
59118: LD_ADDR_VAR 0 3
59122: PUSH
59123: EMPTY
59124: ST_TO_ADDR
// list := [ ] ;
59125: LD_ADDR_VAR 0 5
59129: PUSH
59130: EMPTY
59131: ST_TO_ADDR
// for i = 16 to 25 do
59132: LD_ADDR_VAR 0 4
59136: PUSH
59137: DOUBLE
59138: LD_INT 16
59140: DEC
59141: ST_TO_ADDR
59142: LD_INT 25
59144: PUSH
59145: FOR_TO
59146: IFFALSE 59219
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
59148: LD_ADDR_VAR 0 3
59152: PUSH
59153: LD_VAR 0 3
59157: PUSH
59158: LD_INT 22
59160: PUSH
59161: LD_VAR 0 1
59165: PPUSH
59166: CALL_OW 255
59170: PUSH
59171: EMPTY
59172: LIST
59173: LIST
59174: PUSH
59175: LD_INT 91
59177: PUSH
59178: LD_VAR 0 1
59182: PUSH
59183: LD_INT 6
59185: PUSH
59186: EMPTY
59187: LIST
59188: LIST
59189: LIST
59190: PUSH
59191: LD_INT 30
59193: PUSH
59194: LD_VAR 0 4
59198: PUSH
59199: EMPTY
59200: LIST
59201: LIST
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: LIST
59207: PUSH
59208: EMPTY
59209: LIST
59210: PPUSH
59211: CALL_OW 69
59215: ADD
59216: ST_TO_ADDR
59217: GO 59145
59219: POP
59220: POP
// for i = 1 to tmp do
59221: LD_ADDR_VAR 0 4
59225: PUSH
59226: DOUBLE
59227: LD_INT 1
59229: DEC
59230: ST_TO_ADDR
59231: LD_VAR 0 3
59235: PUSH
59236: FOR_TO
59237: IFFALSE 59325
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
59239: LD_ADDR_VAR 0 5
59243: PUSH
59244: LD_VAR 0 5
59248: PUSH
59249: LD_VAR 0 3
59253: PUSH
59254: LD_VAR 0 4
59258: ARRAY
59259: PPUSH
59260: CALL_OW 266
59264: PUSH
59265: LD_VAR 0 3
59269: PUSH
59270: LD_VAR 0 4
59274: ARRAY
59275: PPUSH
59276: CALL_OW 250
59280: PUSH
59281: LD_VAR 0 3
59285: PUSH
59286: LD_VAR 0 4
59290: ARRAY
59291: PPUSH
59292: CALL_OW 251
59296: PUSH
59297: LD_VAR 0 3
59301: PUSH
59302: LD_VAR 0 4
59306: ARRAY
59307: PPUSH
59308: CALL_OW 254
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: LIST
59317: LIST
59318: PUSH
59319: EMPTY
59320: LIST
59321: ADD
59322: ST_TO_ADDR
59323: GO 59236
59325: POP
59326: POP
// result := list ;
59327: LD_ADDR_VAR 0 2
59331: PUSH
59332: LD_VAR 0 5
59336: ST_TO_ADDR
// end ;
59337: LD_VAR 0 2
59341: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
59342: LD_INT 0
59344: PPUSH
59345: PPUSH
59346: PPUSH
59347: PPUSH
59348: PPUSH
59349: PPUSH
59350: PPUSH
// if not factory then
59351: LD_VAR 0 1
59355: NOT
59356: IFFALSE 59360
// exit ;
59358: GO 59963
// if control = control_apeman then
59360: LD_VAR 0 4
59364: PUSH
59365: LD_INT 5
59367: EQUAL
59368: IFFALSE 59477
// begin tmp := UnitsInside ( factory ) ;
59370: LD_ADDR_VAR 0 8
59374: PUSH
59375: LD_VAR 0 1
59379: PPUSH
59380: CALL_OW 313
59384: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
59385: LD_VAR 0 8
59389: PPUSH
59390: LD_INT 25
59392: PUSH
59393: LD_INT 12
59395: PUSH
59396: EMPTY
59397: LIST
59398: LIST
59399: PPUSH
59400: CALL_OW 72
59404: NOT
59405: IFFALSE 59415
// control := control_manual ;
59407: LD_ADDR_VAR 0 4
59411: PUSH
59412: LD_INT 1
59414: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
59415: LD_ADDR_VAR 0 8
59419: PUSH
59420: LD_VAR 0 1
59424: PPUSH
59425: CALL 59112 0 1
59429: ST_TO_ADDR
// if tmp then
59430: LD_VAR 0 8
59434: IFFALSE 59477
// begin for i in tmp do
59436: LD_ADDR_VAR 0 7
59440: PUSH
59441: LD_VAR 0 8
59445: PUSH
59446: FOR_IN
59447: IFFALSE 59475
// if i [ 1 ] = b_ext_radio then
59449: LD_VAR 0 7
59453: PUSH
59454: LD_INT 1
59456: ARRAY
59457: PUSH
59458: LD_INT 22
59460: EQUAL
59461: IFFALSE 59473
// begin control := control_remote ;
59463: LD_ADDR_VAR 0 4
59467: PUSH
59468: LD_INT 2
59470: ST_TO_ADDR
// break ;
59471: GO 59475
// end ;
59473: GO 59446
59475: POP
59476: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
59477: LD_VAR 0 1
59481: PPUSH
59482: LD_VAR 0 2
59486: PPUSH
59487: LD_VAR 0 3
59491: PPUSH
59492: LD_VAR 0 4
59496: PPUSH
59497: LD_VAR 0 5
59501: PPUSH
59502: CALL_OW 448
59506: IFFALSE 59541
// begin result := [ chassis , engine , control , weapon ] ;
59508: LD_ADDR_VAR 0 6
59512: PUSH
59513: LD_VAR 0 2
59517: PUSH
59518: LD_VAR 0 3
59522: PUSH
59523: LD_VAR 0 4
59527: PUSH
59528: LD_VAR 0 5
59532: PUSH
59533: EMPTY
59534: LIST
59535: LIST
59536: LIST
59537: LIST
59538: ST_TO_ADDR
// exit ;
59539: GO 59963
// end ; _chassis := AvailableChassisList ( factory ) ;
59541: LD_ADDR_VAR 0 9
59545: PUSH
59546: LD_VAR 0 1
59550: PPUSH
59551: CALL_OW 475
59555: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
59556: LD_ADDR_VAR 0 11
59560: PUSH
59561: LD_VAR 0 1
59565: PPUSH
59566: CALL_OW 476
59570: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
59571: LD_ADDR_VAR 0 12
59575: PUSH
59576: LD_VAR 0 1
59580: PPUSH
59581: CALL_OW 477
59585: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
59586: LD_ADDR_VAR 0 10
59590: PUSH
59591: LD_VAR 0 1
59595: PPUSH
59596: CALL_OW 478
59600: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
59601: LD_VAR 0 9
59605: NOT
59606: IFTRUE 59615
59608: PUSH
59609: LD_VAR 0 11
59613: NOT
59614: OR
59615: IFTRUE 59624
59617: PUSH
59618: LD_VAR 0 12
59622: NOT
59623: OR
59624: IFTRUE 59633
59626: PUSH
59627: LD_VAR 0 10
59631: NOT
59632: OR
59633: IFFALSE 59668
// begin result := [ chassis , engine , control , weapon ] ;
59635: LD_ADDR_VAR 0 6
59639: PUSH
59640: LD_VAR 0 2
59644: PUSH
59645: LD_VAR 0 3
59649: PUSH
59650: LD_VAR 0 4
59654: PUSH
59655: LD_VAR 0 5
59659: PUSH
59660: EMPTY
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: ST_TO_ADDR
// exit ;
59666: GO 59963
// end ; if not chassis in _chassis then
59668: LD_VAR 0 2
59672: PUSH
59673: LD_VAR 0 9
59677: IN
59678: NOT
59679: IFFALSE 59705
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
59681: LD_ADDR_VAR 0 2
59685: PUSH
59686: LD_VAR 0 9
59690: PUSH
59691: LD_INT 1
59693: PPUSH
59694: LD_VAR 0 9
59698: PPUSH
59699: CALL_OW 12
59703: ARRAY
59704: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
59705: LD_VAR 0 2
59709: PPUSH
59710: LD_VAR 0 3
59714: PPUSH
59715: CALL 59968 0 2
59719: NOT
59720: IFFALSE 59781
// repeat engine := _engine [ 1 ] ;
59722: LD_ADDR_VAR 0 3
59726: PUSH
59727: LD_VAR 0 11
59731: PUSH
59732: LD_INT 1
59734: ARRAY
59735: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
59736: LD_ADDR_VAR 0 11
59740: PUSH
59741: LD_VAR 0 11
59745: PPUSH
59746: LD_INT 1
59748: PPUSH
59749: CALL_OW 3
59753: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
59754: LD_VAR 0 2
59758: PPUSH
59759: LD_VAR 0 3
59763: PPUSH
59764: CALL 59968 0 2
59768: IFTRUE 59779
59770: PUSH
59771: LD_VAR 0 11
59775: PUSH
59776: EMPTY
59777: EQUAL
59778: OR
59779: IFFALSE 59722
// if not control in _control then
59781: LD_VAR 0 4
59785: PUSH
59786: LD_VAR 0 12
59790: IN
59791: NOT
59792: IFFALSE 59818
// control := _control [ rand ( 1 , _control ) ] ;
59794: LD_ADDR_VAR 0 4
59798: PUSH
59799: LD_VAR 0 12
59803: PUSH
59804: LD_INT 1
59806: PPUSH
59807: LD_VAR 0 12
59811: PPUSH
59812: CALL_OW 12
59816: ARRAY
59817: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
59818: LD_VAR 0 2
59822: PPUSH
59823: LD_VAR 0 5
59827: PPUSH
59828: CALL 60190 0 2
59832: NOT
59833: IFFALSE 59894
// repeat weapon := _weapon [ 1 ] ;
59835: LD_ADDR_VAR 0 5
59839: PUSH
59840: LD_VAR 0 10
59844: PUSH
59845: LD_INT 1
59847: ARRAY
59848: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
59849: LD_ADDR_VAR 0 10
59853: PUSH
59854: LD_VAR 0 10
59858: PPUSH
59859: LD_INT 1
59861: PPUSH
59862: CALL_OW 3
59866: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
59867: LD_VAR 0 2
59871: PPUSH
59872: LD_VAR 0 5
59876: PPUSH
59877: CALL 60190 0 2
59881: IFTRUE 59892
59883: PUSH
59884: LD_VAR 0 10
59888: PUSH
59889: EMPTY
59890: EQUAL
59891: OR
59892: IFFALSE 59835
// result := [ ] ;
59894: LD_ADDR_VAR 0 6
59898: PUSH
59899: EMPTY
59900: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
59901: LD_VAR 0 1
59905: PPUSH
59906: LD_VAR 0 2
59910: PPUSH
59911: LD_VAR 0 3
59915: PPUSH
59916: LD_VAR 0 4
59920: PPUSH
59921: LD_VAR 0 5
59925: PPUSH
59926: CALL_OW 448
59930: IFFALSE 59963
// result := [ chassis , engine , control , weapon ] ;
59932: LD_ADDR_VAR 0 6
59936: PUSH
59937: LD_VAR 0 2
59941: PUSH
59942: LD_VAR 0 3
59946: PUSH
59947: LD_VAR 0 4
59951: PUSH
59952: LD_VAR 0 5
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: LIST
59961: LIST
59962: ST_TO_ADDR
// end ;
59963: LD_VAR 0 6
59967: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
59968: LD_INT 0
59970: PPUSH
// if not chassis or not engine then
59971: LD_VAR 0 1
59975: NOT
59976: IFTRUE 59985
59978: PUSH
59979: LD_VAR 0 2
59983: NOT
59984: OR
59985: IFFALSE 59989
// exit ;
59987: GO 60185
// case engine of engine_solar :
59989: LD_VAR 0 2
59993: PUSH
59994: LD_INT 2
59996: DOUBLE
59997: EQUAL
59998: IFTRUE 60002
60000: GO 60040
60002: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
60003: LD_ADDR_VAR 0 3
60007: PUSH
60008: LD_INT 11
60010: PUSH
60011: LD_INT 12
60013: PUSH
60014: LD_INT 13
60016: PUSH
60017: LD_INT 14
60019: PUSH
60020: LD_INT 1
60022: PUSH
60023: LD_INT 2
60025: PUSH
60026: LD_INT 3
60028: PUSH
60029: EMPTY
60030: LIST
60031: LIST
60032: LIST
60033: LIST
60034: LIST
60035: LIST
60036: LIST
60037: ST_TO_ADDR
60038: GO 60169
60040: LD_INT 1
60042: DOUBLE
60043: EQUAL
60044: IFTRUE 60048
60046: GO 60110
60048: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
60049: LD_ADDR_VAR 0 3
60053: PUSH
60054: LD_INT 11
60056: PUSH
60057: LD_INT 12
60059: PUSH
60060: LD_INT 13
60062: PUSH
60063: LD_INT 14
60065: PUSH
60066: LD_INT 1
60068: PUSH
60069: LD_INT 2
60071: PUSH
60072: LD_INT 3
60074: PUSH
60075: LD_INT 4
60077: PUSH
60078: LD_INT 5
60080: PUSH
60081: LD_INT 21
60083: PUSH
60084: LD_INT 23
60086: PUSH
60087: LD_INT 22
60089: PUSH
60090: LD_INT 24
60092: PUSH
60093: EMPTY
60094: LIST
60095: LIST
60096: LIST
60097: LIST
60098: LIST
60099: LIST
60100: LIST
60101: LIST
60102: LIST
60103: LIST
60104: LIST
60105: LIST
60106: LIST
60107: ST_TO_ADDR
60108: GO 60169
60110: LD_INT 3
60112: DOUBLE
60113: EQUAL
60114: IFTRUE 60118
60116: GO 60168
60118: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
60119: LD_ADDR_VAR 0 3
60123: PUSH
60124: LD_INT 13
60126: PUSH
60127: LD_INT 14
60129: PUSH
60130: LD_INT 2
60132: PUSH
60133: LD_INT 3
60135: PUSH
60136: LD_INT 4
60138: PUSH
60139: LD_INT 5
60141: PUSH
60142: LD_INT 21
60144: PUSH
60145: LD_INT 22
60147: PUSH
60148: LD_INT 23
60150: PUSH
60151: LD_INT 24
60153: PUSH
60154: EMPTY
60155: LIST
60156: LIST
60157: LIST
60158: LIST
60159: LIST
60160: LIST
60161: LIST
60162: LIST
60163: LIST
60164: LIST
60165: ST_TO_ADDR
60166: GO 60169
60168: POP
// result := ( chassis in result ) ;
60169: LD_ADDR_VAR 0 3
60173: PUSH
60174: LD_VAR 0 1
60178: PUSH
60179: LD_VAR 0 3
60183: IN
60184: ST_TO_ADDR
// end ;
60185: LD_VAR 0 3
60189: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
60190: LD_INT 0
60192: PPUSH
// if not chassis or not weapon then
60193: LD_VAR 0 1
60197: NOT
60198: IFTRUE 60207
60200: PUSH
60201: LD_VAR 0 2
60205: NOT
60206: OR
60207: IFFALSE 60211
// exit ;
60209: GO 61305
// case weapon of us_machine_gun :
60211: LD_VAR 0 2
60215: PUSH
60216: LD_INT 2
60218: DOUBLE
60219: EQUAL
60220: IFTRUE 60224
60222: GO 60254
60224: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
60225: LD_ADDR_VAR 0 3
60229: PUSH
60230: LD_INT 1
60232: PUSH
60233: LD_INT 2
60235: PUSH
60236: LD_INT 3
60238: PUSH
60239: LD_INT 4
60241: PUSH
60242: LD_INT 5
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: LIST
60250: LIST
60251: ST_TO_ADDR
60252: GO 61289
60254: LD_INT 3
60256: DOUBLE
60257: EQUAL
60258: IFTRUE 60262
60260: GO 60292
60262: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
60263: LD_ADDR_VAR 0 3
60267: PUSH
60268: LD_INT 1
60270: PUSH
60271: LD_INT 2
60273: PUSH
60274: LD_INT 3
60276: PUSH
60277: LD_INT 4
60279: PUSH
60280: LD_INT 5
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: LIST
60287: LIST
60288: LIST
60289: ST_TO_ADDR
60290: GO 61289
60292: LD_INT 11
60294: DOUBLE
60295: EQUAL
60296: IFTRUE 60300
60298: GO 60330
60300: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
60301: LD_ADDR_VAR 0 3
60305: PUSH
60306: LD_INT 1
60308: PUSH
60309: LD_INT 2
60311: PUSH
60312: LD_INT 3
60314: PUSH
60315: LD_INT 4
60317: PUSH
60318: LD_INT 5
60320: PUSH
60321: EMPTY
60322: LIST
60323: LIST
60324: LIST
60325: LIST
60326: LIST
60327: ST_TO_ADDR
60328: GO 61289
60330: LD_INT 4
60332: DOUBLE
60333: EQUAL
60334: IFTRUE 60338
60336: GO 60364
60338: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
60339: LD_ADDR_VAR 0 3
60343: PUSH
60344: LD_INT 2
60346: PUSH
60347: LD_INT 3
60349: PUSH
60350: LD_INT 4
60352: PUSH
60353: LD_INT 5
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: LIST
60360: LIST
60361: ST_TO_ADDR
60362: GO 61289
60364: LD_INT 5
60366: DOUBLE
60367: EQUAL
60368: IFTRUE 60372
60370: GO 60398
60372: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
60373: LD_ADDR_VAR 0 3
60377: PUSH
60378: LD_INT 2
60380: PUSH
60381: LD_INT 3
60383: PUSH
60384: LD_INT 4
60386: PUSH
60387: LD_INT 5
60389: PUSH
60390: EMPTY
60391: LIST
60392: LIST
60393: LIST
60394: LIST
60395: ST_TO_ADDR
60396: GO 61289
60398: LD_INT 9
60400: DOUBLE
60401: EQUAL
60402: IFTRUE 60406
60404: GO 60432
60406: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
60407: LD_ADDR_VAR 0 3
60411: PUSH
60412: LD_INT 2
60414: PUSH
60415: LD_INT 3
60417: PUSH
60418: LD_INT 4
60420: PUSH
60421: LD_INT 5
60423: PUSH
60424: EMPTY
60425: LIST
60426: LIST
60427: LIST
60428: LIST
60429: ST_TO_ADDR
60430: GO 61289
60432: LD_INT 7
60434: DOUBLE
60435: EQUAL
60436: IFTRUE 60440
60438: GO 60466
60440: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
60441: LD_ADDR_VAR 0 3
60445: PUSH
60446: LD_INT 2
60448: PUSH
60449: LD_INT 3
60451: PUSH
60452: LD_INT 4
60454: PUSH
60455: LD_INT 5
60457: PUSH
60458: EMPTY
60459: LIST
60460: LIST
60461: LIST
60462: LIST
60463: ST_TO_ADDR
60464: GO 61289
60466: LD_INT 12
60468: DOUBLE
60469: EQUAL
60470: IFTRUE 60474
60472: GO 60500
60474: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
60475: LD_ADDR_VAR 0 3
60479: PUSH
60480: LD_INT 2
60482: PUSH
60483: LD_INT 3
60485: PUSH
60486: LD_INT 4
60488: PUSH
60489: LD_INT 5
60491: PUSH
60492: EMPTY
60493: LIST
60494: LIST
60495: LIST
60496: LIST
60497: ST_TO_ADDR
60498: GO 61289
60500: LD_INT 13
60502: DOUBLE
60503: EQUAL
60504: IFTRUE 60508
60506: GO 60534
60508: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
60509: LD_ADDR_VAR 0 3
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: LD_INT 3
60519: PUSH
60520: LD_INT 4
60522: PUSH
60523: LD_INT 5
60525: PUSH
60526: EMPTY
60527: LIST
60528: LIST
60529: LIST
60530: LIST
60531: ST_TO_ADDR
60532: GO 61289
60534: LD_INT 14
60536: DOUBLE
60537: EQUAL
60538: IFTRUE 60542
60540: GO 60560
60542: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
60543: LD_ADDR_VAR 0 3
60547: PUSH
60548: LD_INT 4
60550: PUSH
60551: LD_INT 5
60553: PUSH
60554: EMPTY
60555: LIST
60556: LIST
60557: ST_TO_ADDR
60558: GO 61289
60560: LD_INT 6
60562: DOUBLE
60563: EQUAL
60564: IFTRUE 60568
60566: GO 60586
60568: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
60569: LD_ADDR_VAR 0 3
60573: PUSH
60574: LD_INT 4
60576: PUSH
60577: LD_INT 5
60579: PUSH
60580: EMPTY
60581: LIST
60582: LIST
60583: ST_TO_ADDR
60584: GO 61289
60586: LD_INT 10
60588: DOUBLE
60589: EQUAL
60590: IFTRUE 60594
60592: GO 60612
60594: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
60595: LD_ADDR_VAR 0 3
60599: PUSH
60600: LD_INT 4
60602: PUSH
60603: LD_INT 5
60605: PUSH
60606: EMPTY
60607: LIST
60608: LIST
60609: ST_TO_ADDR
60610: GO 61289
60612: LD_INT 22
60614: DOUBLE
60615: EQUAL
60616: IFTRUE 60620
60618: GO 60646
60620: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
60621: LD_ADDR_VAR 0 3
60625: PUSH
60626: LD_INT 11
60628: PUSH
60629: LD_INT 12
60631: PUSH
60632: LD_INT 13
60634: PUSH
60635: LD_INT 14
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: ST_TO_ADDR
60644: GO 61289
60646: LD_INT 23
60648: DOUBLE
60649: EQUAL
60650: IFTRUE 60654
60652: GO 60680
60654: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
60655: LD_ADDR_VAR 0 3
60659: PUSH
60660: LD_INT 11
60662: PUSH
60663: LD_INT 12
60665: PUSH
60666: LD_INT 13
60668: PUSH
60669: LD_INT 14
60671: PUSH
60672: EMPTY
60673: LIST
60674: LIST
60675: LIST
60676: LIST
60677: ST_TO_ADDR
60678: GO 61289
60680: LD_INT 24
60682: DOUBLE
60683: EQUAL
60684: IFTRUE 60688
60686: GO 60714
60688: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
60689: LD_ADDR_VAR 0 3
60693: PUSH
60694: LD_INT 11
60696: PUSH
60697: LD_INT 12
60699: PUSH
60700: LD_INT 13
60702: PUSH
60703: LD_INT 14
60705: PUSH
60706: EMPTY
60707: LIST
60708: LIST
60709: LIST
60710: LIST
60711: ST_TO_ADDR
60712: GO 61289
60714: LD_INT 30
60716: DOUBLE
60717: EQUAL
60718: IFTRUE 60722
60720: GO 60748
60722: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
60723: LD_ADDR_VAR 0 3
60727: PUSH
60728: LD_INT 11
60730: PUSH
60731: LD_INT 12
60733: PUSH
60734: LD_INT 13
60736: PUSH
60737: LD_INT 14
60739: PUSH
60740: EMPTY
60741: LIST
60742: LIST
60743: LIST
60744: LIST
60745: ST_TO_ADDR
60746: GO 61289
60748: LD_INT 25
60750: DOUBLE
60751: EQUAL
60752: IFTRUE 60756
60754: GO 60774
60756: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
60757: LD_ADDR_VAR 0 3
60761: PUSH
60762: LD_INT 13
60764: PUSH
60765: LD_INT 14
60767: PUSH
60768: EMPTY
60769: LIST
60770: LIST
60771: ST_TO_ADDR
60772: GO 61289
60774: LD_INT 27
60776: DOUBLE
60777: EQUAL
60778: IFTRUE 60782
60780: GO 60800
60782: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
60783: LD_ADDR_VAR 0 3
60787: PUSH
60788: LD_INT 13
60790: PUSH
60791: LD_INT 14
60793: PUSH
60794: EMPTY
60795: LIST
60796: LIST
60797: ST_TO_ADDR
60798: GO 61289
60800: LD_INT 92
60802: DOUBLE
60803: EQUAL
60804: IFTRUE 60808
60806: GO 60834
60808: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
60809: LD_ADDR_VAR 0 3
60813: PUSH
60814: LD_INT 11
60816: PUSH
60817: LD_INT 12
60819: PUSH
60820: LD_INT 13
60822: PUSH
60823: LD_INT 14
60825: PUSH
60826: EMPTY
60827: LIST
60828: LIST
60829: LIST
60830: LIST
60831: ST_TO_ADDR
60832: GO 61289
60834: LD_INT 28
60836: DOUBLE
60837: EQUAL
60838: IFTRUE 60842
60840: GO 60860
60842: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
60843: LD_ADDR_VAR 0 3
60847: PUSH
60848: LD_INT 13
60850: PUSH
60851: LD_INT 14
60853: PUSH
60854: EMPTY
60855: LIST
60856: LIST
60857: ST_TO_ADDR
60858: GO 61289
60860: LD_INT 29
60862: DOUBLE
60863: EQUAL
60864: IFTRUE 60868
60866: GO 60886
60868: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
60869: LD_ADDR_VAR 0 3
60873: PUSH
60874: LD_INT 13
60876: PUSH
60877: LD_INT 14
60879: PUSH
60880: EMPTY
60881: LIST
60882: LIST
60883: ST_TO_ADDR
60884: GO 61289
60886: LD_INT 31
60888: DOUBLE
60889: EQUAL
60890: IFTRUE 60894
60892: GO 60912
60894: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
60895: LD_ADDR_VAR 0 3
60899: PUSH
60900: LD_INT 13
60902: PUSH
60903: LD_INT 14
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: ST_TO_ADDR
60910: GO 61289
60912: LD_INT 26
60914: DOUBLE
60915: EQUAL
60916: IFTRUE 60920
60918: GO 60938
60920: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
60921: LD_ADDR_VAR 0 3
60925: PUSH
60926: LD_INT 13
60928: PUSH
60929: LD_INT 14
60931: PUSH
60932: EMPTY
60933: LIST
60934: LIST
60935: ST_TO_ADDR
60936: GO 61289
60938: LD_INT 42
60940: DOUBLE
60941: EQUAL
60942: IFTRUE 60946
60944: GO 60972
60946: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
60947: LD_ADDR_VAR 0 3
60951: PUSH
60952: LD_INT 21
60954: PUSH
60955: LD_INT 22
60957: PUSH
60958: LD_INT 23
60960: PUSH
60961: LD_INT 24
60963: PUSH
60964: EMPTY
60965: LIST
60966: LIST
60967: LIST
60968: LIST
60969: ST_TO_ADDR
60970: GO 61289
60972: LD_INT 43
60974: DOUBLE
60975: EQUAL
60976: IFTRUE 60980
60978: GO 61006
60980: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
60981: LD_ADDR_VAR 0 3
60985: PUSH
60986: LD_INT 21
60988: PUSH
60989: LD_INT 22
60991: PUSH
60992: LD_INT 23
60994: PUSH
60995: LD_INT 24
60997: PUSH
60998: EMPTY
60999: LIST
61000: LIST
61001: LIST
61002: LIST
61003: ST_TO_ADDR
61004: GO 61289
61006: LD_INT 44
61008: DOUBLE
61009: EQUAL
61010: IFTRUE 61014
61012: GO 61040
61014: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
61015: LD_ADDR_VAR 0 3
61019: PUSH
61020: LD_INT 21
61022: PUSH
61023: LD_INT 22
61025: PUSH
61026: LD_INT 23
61028: PUSH
61029: LD_INT 24
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: LIST
61036: LIST
61037: ST_TO_ADDR
61038: GO 61289
61040: LD_INT 45
61042: DOUBLE
61043: EQUAL
61044: IFTRUE 61048
61046: GO 61074
61048: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
61049: LD_ADDR_VAR 0 3
61053: PUSH
61054: LD_INT 21
61056: PUSH
61057: LD_INT 22
61059: PUSH
61060: LD_INT 23
61062: PUSH
61063: LD_INT 24
61065: PUSH
61066: EMPTY
61067: LIST
61068: LIST
61069: LIST
61070: LIST
61071: ST_TO_ADDR
61072: GO 61289
61074: LD_INT 49
61076: DOUBLE
61077: EQUAL
61078: IFTRUE 61082
61080: GO 61108
61082: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
61083: LD_ADDR_VAR 0 3
61087: PUSH
61088: LD_INT 21
61090: PUSH
61091: LD_INT 22
61093: PUSH
61094: LD_INT 23
61096: PUSH
61097: LD_INT 24
61099: PUSH
61100: EMPTY
61101: LIST
61102: LIST
61103: LIST
61104: LIST
61105: ST_TO_ADDR
61106: GO 61289
61108: LD_INT 51
61110: DOUBLE
61111: EQUAL
61112: IFTRUE 61116
61114: GO 61142
61116: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
61117: LD_ADDR_VAR 0 3
61121: PUSH
61122: LD_INT 21
61124: PUSH
61125: LD_INT 22
61127: PUSH
61128: LD_INT 23
61130: PUSH
61131: LD_INT 24
61133: PUSH
61134: EMPTY
61135: LIST
61136: LIST
61137: LIST
61138: LIST
61139: ST_TO_ADDR
61140: GO 61289
61142: LD_INT 52
61144: DOUBLE
61145: EQUAL
61146: IFTRUE 61150
61148: GO 61176
61150: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
61151: LD_ADDR_VAR 0 3
61155: PUSH
61156: LD_INT 21
61158: PUSH
61159: LD_INT 22
61161: PUSH
61162: LD_INT 23
61164: PUSH
61165: LD_INT 24
61167: PUSH
61168: EMPTY
61169: LIST
61170: LIST
61171: LIST
61172: LIST
61173: ST_TO_ADDR
61174: GO 61289
61176: LD_INT 53
61178: DOUBLE
61179: EQUAL
61180: IFTRUE 61184
61182: GO 61202
61184: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
61185: LD_ADDR_VAR 0 3
61189: PUSH
61190: LD_INT 23
61192: PUSH
61193: LD_INT 24
61195: PUSH
61196: EMPTY
61197: LIST
61198: LIST
61199: ST_TO_ADDR
61200: GO 61289
61202: LD_INT 46
61204: DOUBLE
61205: EQUAL
61206: IFTRUE 61210
61208: GO 61228
61210: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
61211: LD_ADDR_VAR 0 3
61215: PUSH
61216: LD_INT 23
61218: PUSH
61219: LD_INT 24
61221: PUSH
61222: EMPTY
61223: LIST
61224: LIST
61225: ST_TO_ADDR
61226: GO 61289
61228: LD_INT 47
61230: DOUBLE
61231: EQUAL
61232: IFTRUE 61236
61234: GO 61254
61236: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
61237: LD_ADDR_VAR 0 3
61241: PUSH
61242: LD_INT 23
61244: PUSH
61245: LD_INT 24
61247: PUSH
61248: EMPTY
61249: LIST
61250: LIST
61251: ST_TO_ADDR
61252: GO 61289
61254: LD_INT 98
61256: DOUBLE
61257: EQUAL
61258: IFTRUE 61262
61260: GO 61288
61262: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
61263: LD_ADDR_VAR 0 3
61267: PUSH
61268: LD_INT 21
61270: PUSH
61271: LD_INT 22
61273: PUSH
61274: LD_INT 23
61276: PUSH
61277: LD_INT 24
61279: PUSH
61280: EMPTY
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: ST_TO_ADDR
61286: GO 61289
61288: POP
// result := ( chassis in result ) ;
61289: LD_ADDR_VAR 0 3
61293: PUSH
61294: LD_VAR 0 1
61298: PUSH
61299: LD_VAR 0 3
61303: IN
61304: ST_TO_ADDR
// end ;
61305: LD_VAR 0 3
61309: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
61310: LD_INT 0
61312: PPUSH
61313: PPUSH
61314: PPUSH
61315: PPUSH
61316: PPUSH
61317: PPUSH
61318: PPUSH
// result := array ;
61319: LD_ADDR_VAR 0 5
61323: PUSH
61324: LD_VAR 0 1
61328: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
61329: LD_VAR 0 1
61333: NOT
61334: IFTRUE 61343
61336: PUSH
61337: LD_VAR 0 2
61341: NOT
61342: OR
61343: IFTRUE 61352
61345: PUSH
61346: LD_VAR 0 3
61350: NOT
61351: OR
61352: IFTRUE 61366
61354: PUSH
61355: LD_VAR 0 2
61359: PUSH
61360: LD_VAR 0 1
61364: GREATER
61365: OR
61366: IFTRUE 61380
61368: PUSH
61369: LD_VAR 0 3
61373: PUSH
61374: LD_VAR 0 1
61378: GREATER
61379: OR
61380: IFFALSE 61384
// exit ;
61382: GO 61680
// if direction then
61384: LD_VAR 0 4
61388: IFFALSE 61452
// begin d := 1 ;
61390: LD_ADDR_VAR 0 9
61394: PUSH
61395: LD_INT 1
61397: ST_TO_ADDR
// if i_from > i_to then
61398: LD_VAR 0 2
61402: PUSH
61403: LD_VAR 0 3
61407: GREATER
61408: IFFALSE 61434
// length := ( array - i_from ) + i_to else
61410: LD_ADDR_VAR 0 11
61414: PUSH
61415: LD_VAR 0 1
61419: PUSH
61420: LD_VAR 0 2
61424: MINUS
61425: PUSH
61426: LD_VAR 0 3
61430: PLUS
61431: ST_TO_ADDR
61432: GO 61450
// length := i_to - i_from ;
61434: LD_ADDR_VAR 0 11
61438: PUSH
61439: LD_VAR 0 3
61443: PUSH
61444: LD_VAR 0 2
61448: MINUS
61449: ST_TO_ADDR
// end else
61450: GO 61513
// begin d := - 1 ;
61452: LD_ADDR_VAR 0 9
61456: PUSH
61457: LD_INT 1
61459: NEG
61460: ST_TO_ADDR
// if i_from > i_to then
61461: LD_VAR 0 2
61465: PUSH
61466: LD_VAR 0 3
61470: GREATER
61471: IFFALSE 61491
// length := i_from - i_to else
61473: LD_ADDR_VAR 0 11
61477: PUSH
61478: LD_VAR 0 2
61482: PUSH
61483: LD_VAR 0 3
61487: MINUS
61488: ST_TO_ADDR
61489: GO 61513
// length := ( array - i_to ) + i_from ;
61491: LD_ADDR_VAR 0 11
61495: PUSH
61496: LD_VAR 0 1
61500: PUSH
61501: LD_VAR 0 3
61505: MINUS
61506: PUSH
61507: LD_VAR 0 2
61511: PLUS
61512: ST_TO_ADDR
// end ; if not length then
61513: LD_VAR 0 11
61517: NOT
61518: IFFALSE 61522
// exit ;
61520: GO 61680
// tmp := array ;
61522: LD_ADDR_VAR 0 10
61526: PUSH
61527: LD_VAR 0 1
61531: ST_TO_ADDR
// for i = 1 to length do
61532: LD_ADDR_VAR 0 6
61536: PUSH
61537: DOUBLE
61538: LD_INT 1
61540: DEC
61541: ST_TO_ADDR
61542: LD_VAR 0 11
61546: PUSH
61547: FOR_TO
61548: IFFALSE 61668
// begin for j = 1 to array do
61550: LD_ADDR_VAR 0 7
61554: PUSH
61555: DOUBLE
61556: LD_INT 1
61558: DEC
61559: ST_TO_ADDR
61560: LD_VAR 0 1
61564: PUSH
61565: FOR_TO
61566: IFFALSE 61654
// begin k := j + d ;
61568: LD_ADDR_VAR 0 8
61572: PUSH
61573: LD_VAR 0 7
61577: PUSH
61578: LD_VAR 0 9
61582: PLUS
61583: ST_TO_ADDR
// if k > array then
61584: LD_VAR 0 8
61588: PUSH
61589: LD_VAR 0 1
61593: GREATER
61594: IFFALSE 61604
// k := 1 ;
61596: LD_ADDR_VAR 0 8
61600: PUSH
61601: LD_INT 1
61603: ST_TO_ADDR
// if not k then
61604: LD_VAR 0 8
61608: NOT
61609: IFFALSE 61621
// k := array ;
61611: LD_ADDR_VAR 0 8
61615: PUSH
61616: LD_VAR 0 1
61620: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
61621: LD_ADDR_VAR 0 10
61625: PUSH
61626: LD_VAR 0 10
61630: PPUSH
61631: LD_VAR 0 8
61635: PPUSH
61636: LD_VAR 0 1
61640: PUSH
61641: LD_VAR 0 7
61645: ARRAY
61646: PPUSH
61647: CALL_OW 1
61651: ST_TO_ADDR
// end ;
61652: GO 61565
61654: POP
61655: POP
// array := tmp ;
61656: LD_ADDR_VAR 0 1
61660: PUSH
61661: LD_VAR 0 10
61665: ST_TO_ADDR
// end ;
61666: GO 61547
61668: POP
61669: POP
// result := array ;
61670: LD_ADDR_VAR 0 5
61674: PUSH
61675: LD_VAR 0 1
61679: ST_TO_ADDR
// end ;
61680: LD_VAR 0 5
61684: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
61685: LD_INT 0
61687: PPUSH
61688: PPUSH
// result := 0 ;
61689: LD_ADDR_VAR 0 3
61693: PUSH
61694: LD_INT 0
61696: ST_TO_ADDR
// if not array or not value in array then
61697: LD_VAR 0 1
61701: NOT
61702: IFTRUE 61717
61704: PUSH
61705: LD_VAR 0 2
61709: PUSH
61710: LD_VAR 0 1
61714: IN
61715: NOT
61716: OR
61717: IFFALSE 61721
// exit ;
61719: GO 61775
// for i = 1 to array do
61721: LD_ADDR_VAR 0 4
61725: PUSH
61726: DOUBLE
61727: LD_INT 1
61729: DEC
61730: ST_TO_ADDR
61731: LD_VAR 0 1
61735: PUSH
61736: FOR_TO
61737: IFFALSE 61773
// if value = array [ i ] then
61739: LD_VAR 0 2
61743: PUSH
61744: LD_VAR 0 1
61748: PUSH
61749: LD_VAR 0 4
61753: ARRAY
61754: EQUAL
61755: IFFALSE 61771
// begin result := i ;
61757: LD_ADDR_VAR 0 3
61761: PUSH
61762: LD_VAR 0 4
61766: ST_TO_ADDR
// exit ;
61767: POP
61768: POP
61769: GO 61775
// end ;
61771: GO 61736
61773: POP
61774: POP
// end ;
61775: LD_VAR 0 3
61779: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
61780: LD_INT 0
61782: PPUSH
// vc_chassis := chassis ;
61783: LD_ADDR_OWVAR 37
61787: PUSH
61788: LD_VAR 0 1
61792: ST_TO_ADDR
// vc_engine := engine ;
61793: LD_ADDR_OWVAR 39
61797: PUSH
61798: LD_VAR 0 2
61802: ST_TO_ADDR
// vc_control := control ;
61803: LD_ADDR_OWVAR 38
61807: PUSH
61808: LD_VAR 0 3
61812: ST_TO_ADDR
// vc_weapon := weapon ;
61813: LD_ADDR_OWVAR 40
61817: PUSH
61818: LD_VAR 0 4
61822: ST_TO_ADDR
// vc_fuel_battery := fuel ;
61823: LD_ADDR_OWVAR 41
61827: PUSH
61828: LD_VAR 0 5
61832: ST_TO_ADDR
// end ;
61833: LD_VAR 0 6
61837: RET
// export function WantPlant ( unit ) ; var task ; begin
61838: LD_INT 0
61840: PPUSH
61841: PPUSH
// result := false ;
61842: LD_ADDR_VAR 0 2
61846: PUSH
61847: LD_INT 0
61849: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
61850: LD_ADDR_VAR 0 3
61854: PUSH
61855: LD_VAR 0 1
61859: PPUSH
61860: CALL_OW 437
61864: ST_TO_ADDR
// if task then
61865: LD_VAR 0 3
61869: IFFALSE 61897
// if task [ 1 ] [ 1 ] = p then
61871: LD_VAR 0 3
61875: PUSH
61876: LD_INT 1
61878: ARRAY
61879: PUSH
61880: LD_INT 1
61882: ARRAY
61883: PUSH
61884: LD_STRING p
61886: EQUAL
61887: IFFALSE 61897
// result := true ;
61889: LD_ADDR_VAR 0 2
61893: PUSH
61894: LD_INT 1
61896: ST_TO_ADDR
// end ;
61897: LD_VAR 0 2
61901: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
61902: LD_INT 0
61904: PPUSH
61905: PPUSH
61906: PPUSH
61907: PPUSH
// if pos < 1 then
61908: LD_VAR 0 2
61912: PUSH
61913: LD_INT 1
61915: LESS
61916: IFFALSE 61920
// exit ;
61918: GO 62223
// if pos = 1 then
61920: LD_VAR 0 2
61924: PUSH
61925: LD_INT 1
61927: EQUAL
61928: IFFALSE 61961
// result := Replace ( arr , pos [ 1 ] , value ) else
61930: LD_ADDR_VAR 0 4
61934: PUSH
61935: LD_VAR 0 1
61939: PPUSH
61940: LD_VAR 0 2
61944: PUSH
61945: LD_INT 1
61947: ARRAY
61948: PPUSH
61949: LD_VAR 0 3
61953: PPUSH
61954: CALL_OW 1
61958: ST_TO_ADDR
61959: GO 62223
// begin tmp := arr ;
61961: LD_ADDR_VAR 0 6
61965: PUSH
61966: LD_VAR 0 1
61970: ST_TO_ADDR
// s_arr := [ tmp ] ;
61971: LD_ADDR_VAR 0 7
61975: PUSH
61976: LD_VAR 0 6
61980: PUSH
61981: EMPTY
61982: LIST
61983: ST_TO_ADDR
// for i = 1 to pos - 1 do
61984: LD_ADDR_VAR 0 5
61988: PUSH
61989: DOUBLE
61990: LD_INT 1
61992: DEC
61993: ST_TO_ADDR
61994: LD_VAR 0 2
61998: PUSH
61999: LD_INT 1
62001: MINUS
62002: PUSH
62003: FOR_TO
62004: IFFALSE 62049
// begin tmp := tmp [ pos [ i ] ] ;
62006: LD_ADDR_VAR 0 6
62010: PUSH
62011: LD_VAR 0 6
62015: PUSH
62016: LD_VAR 0 2
62020: PUSH
62021: LD_VAR 0 5
62025: ARRAY
62026: ARRAY
62027: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
62028: LD_ADDR_VAR 0 7
62032: PUSH
62033: LD_VAR 0 7
62037: PUSH
62038: LD_VAR 0 6
62042: PUSH
62043: EMPTY
62044: LIST
62045: ADD
62046: ST_TO_ADDR
// end ;
62047: GO 62003
62049: POP
62050: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
62051: LD_ADDR_VAR 0 6
62055: PUSH
62056: LD_VAR 0 6
62060: PPUSH
62061: LD_VAR 0 2
62065: PUSH
62066: LD_VAR 0 2
62070: ARRAY
62071: PPUSH
62072: LD_VAR 0 3
62076: PPUSH
62077: CALL_OW 1
62081: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
62082: LD_ADDR_VAR 0 7
62086: PUSH
62087: LD_VAR 0 7
62091: PPUSH
62092: LD_VAR 0 7
62096: PPUSH
62097: LD_VAR 0 6
62101: PPUSH
62102: CALL_OW 1
62106: ST_TO_ADDR
// for i = s_arr downto 2 do
62107: LD_ADDR_VAR 0 5
62111: PUSH
62112: DOUBLE
62113: LD_VAR 0 7
62117: INC
62118: ST_TO_ADDR
62119: LD_INT 2
62121: PUSH
62122: FOR_DOWNTO
62123: IFFALSE 62207
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
62125: LD_ADDR_VAR 0 6
62129: PUSH
62130: LD_VAR 0 7
62134: PUSH
62135: LD_VAR 0 5
62139: PUSH
62140: LD_INT 1
62142: MINUS
62143: ARRAY
62144: PPUSH
62145: LD_VAR 0 2
62149: PUSH
62150: LD_VAR 0 5
62154: PUSH
62155: LD_INT 1
62157: MINUS
62158: ARRAY
62159: PPUSH
62160: LD_VAR 0 7
62164: PUSH
62165: LD_VAR 0 5
62169: ARRAY
62170: PPUSH
62171: CALL_OW 1
62175: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
62176: LD_ADDR_VAR 0 7
62180: PUSH
62181: LD_VAR 0 7
62185: PPUSH
62186: LD_VAR 0 5
62190: PUSH
62191: LD_INT 1
62193: MINUS
62194: PPUSH
62195: LD_VAR 0 6
62199: PPUSH
62200: CALL_OW 1
62204: ST_TO_ADDR
// end ;
62205: GO 62122
62207: POP
62208: POP
// result := s_arr [ 1 ] ;
62209: LD_ADDR_VAR 0 4
62213: PUSH
62214: LD_VAR 0 7
62218: PUSH
62219: LD_INT 1
62221: ARRAY
62222: ST_TO_ADDR
// end ; end ;
62223: LD_VAR 0 4
62227: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
62228: LD_INT 0
62230: PPUSH
62231: PPUSH
// if not list then
62232: LD_VAR 0 1
62236: NOT
62237: IFFALSE 62241
// exit ;
62239: GO 62332
// i := list [ pos1 ] ;
62241: LD_ADDR_VAR 0 5
62245: PUSH
62246: LD_VAR 0 1
62250: PUSH
62251: LD_VAR 0 2
62255: ARRAY
62256: ST_TO_ADDR
// if not i then
62257: LD_VAR 0 5
62261: NOT
62262: IFFALSE 62266
// exit ;
62264: GO 62332
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
62266: LD_ADDR_VAR 0 1
62270: PUSH
62271: LD_VAR 0 1
62275: PPUSH
62276: LD_VAR 0 2
62280: PPUSH
62281: LD_VAR 0 1
62285: PUSH
62286: LD_VAR 0 3
62290: ARRAY
62291: PPUSH
62292: CALL_OW 1
62296: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
62297: LD_ADDR_VAR 0 1
62301: PUSH
62302: LD_VAR 0 1
62306: PPUSH
62307: LD_VAR 0 3
62311: PPUSH
62312: LD_VAR 0 5
62316: PPUSH
62317: CALL_OW 1
62321: ST_TO_ADDR
// result := list ;
62322: LD_ADDR_VAR 0 4
62326: PUSH
62327: LD_VAR 0 1
62331: ST_TO_ADDR
// end ;
62332: LD_VAR 0 4
62336: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
62337: LD_INT 0
62339: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
62340: LD_ADDR_VAR 0 5
62344: PUSH
62345: LD_VAR 0 1
62349: PPUSH
62350: CALL_OW 250
62354: PPUSH
62355: LD_VAR 0 1
62359: PPUSH
62360: CALL_OW 251
62364: PPUSH
62365: LD_VAR 0 2
62369: PPUSH
62370: LD_VAR 0 3
62374: PPUSH
62375: LD_VAR 0 4
62379: PPUSH
62380: CALL 62762 0 5
62384: ST_TO_ADDR
// end ;
62385: LD_VAR 0 5
62389: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
62390: LD_INT 0
62392: PPUSH
62393: PPUSH
62394: PPUSH
62395: PPUSH
// if not list or not unit then
62396: LD_VAR 0 2
62400: NOT
62401: IFTRUE 62410
62403: PUSH
62404: LD_VAR 0 1
62408: NOT
62409: OR
62410: IFFALSE 62414
// exit ;
62412: GO 62757
// result := [ ] ;
62414: LD_ADDR_VAR 0 5
62418: PUSH
62419: EMPTY
62420: ST_TO_ADDR
// for i in list do
62421: LD_ADDR_VAR 0 6
62425: PUSH
62426: LD_VAR 0 2
62430: PUSH
62431: FOR_IN
62432: IFFALSE 62650
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62434: LD_ADDR_VAR 0 8
62438: PUSH
62439: LD_VAR 0 1
62443: PPUSH
62444: LD_VAR 0 6
62448: PUSH
62449: LD_INT 1
62451: ARRAY
62452: PPUSH
62453: LD_VAR 0 6
62457: PUSH
62458: LD_INT 2
62460: ARRAY
62461: PPUSH
62462: CALL_OW 297
62466: ST_TO_ADDR
// if not Count ( result ) then
62467: LD_VAR 0 5
62471: PPUSH
62472: CALL 58984 0 1
62476: NOT
62477: IFFALSE 62510
// begin result := Join ( result , [ i , tmp ] ) ;
62479: LD_ADDR_VAR 0 5
62483: PUSH
62484: LD_VAR 0 5
62488: PPUSH
62489: LD_VAR 0 6
62493: PUSH
62494: LD_VAR 0 8
62498: PUSH
62499: EMPTY
62500: LIST
62501: LIST
62502: PPUSH
62503: CALL 94960 0 2
62507: ST_TO_ADDR
// continue ;
62508: GO 62431
// end ; if result [ result ] [ 2 ] <= tmp then
62510: LD_VAR 0 5
62514: PUSH
62515: LD_VAR 0 5
62519: ARRAY
62520: PUSH
62521: LD_INT 2
62523: ARRAY
62524: PUSH
62525: LD_VAR 0 8
62529: LESSEQUAL
62530: IFFALSE 62563
// result := Join ( result , [ i , tmp ] ) else
62532: LD_ADDR_VAR 0 5
62536: PUSH
62537: LD_VAR 0 5
62541: PPUSH
62542: LD_VAR 0 6
62546: PUSH
62547: LD_VAR 0 8
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: PPUSH
62556: CALL 94960 0 2
62560: ST_TO_ADDR
62561: GO 62648
// begin for j := 1 to Count ( result ) do
62563: LD_ADDR_VAR 0 7
62567: PUSH
62568: DOUBLE
62569: LD_INT 1
62571: DEC
62572: ST_TO_ADDR
62573: LD_VAR 0 5
62577: PPUSH
62578: CALL 58984 0 1
62582: PUSH
62583: FOR_TO
62584: IFFALSE 62646
// begin if tmp < result [ j ] [ 2 ] then
62586: LD_VAR 0 8
62590: PUSH
62591: LD_VAR 0 5
62595: PUSH
62596: LD_VAR 0 7
62600: ARRAY
62601: PUSH
62602: LD_INT 2
62604: ARRAY
62605: LESS
62606: IFFALSE 62644
// begin result := Insert ( result , j , [ i , tmp ] ) ;
62608: LD_ADDR_VAR 0 5
62612: PUSH
62613: LD_VAR 0 5
62617: PPUSH
62618: LD_VAR 0 7
62622: PPUSH
62623: LD_VAR 0 6
62627: PUSH
62628: LD_VAR 0 8
62632: PUSH
62633: EMPTY
62634: LIST
62635: LIST
62636: PPUSH
62637: CALL_OW 2
62641: ST_TO_ADDR
// break ;
62642: GO 62646
// end ; end ;
62644: GO 62583
62646: POP
62647: POP
// end ; end ;
62648: GO 62431
62650: POP
62651: POP
// if result and not asc then
62652: LD_VAR 0 5
62656: IFFALSE 62665
62658: PUSH
62659: LD_VAR 0 3
62663: NOT
62664: AND
62665: IFFALSE 62682
// result := ReverseArray ( result ) ;
62667: LD_ADDR_VAR 0 5
62671: PUSH
62672: LD_VAR 0 5
62676: PPUSH
62677: CALL 90040 0 1
62681: ST_TO_ADDR
// tmp := [ ] ;
62682: LD_ADDR_VAR 0 8
62686: PUSH
62687: EMPTY
62688: ST_TO_ADDR
// if mode then
62689: LD_VAR 0 4
62693: IFFALSE 62757
// begin for i := 1 to result do
62695: LD_ADDR_VAR 0 6
62699: PUSH
62700: DOUBLE
62701: LD_INT 1
62703: DEC
62704: ST_TO_ADDR
62705: LD_VAR 0 5
62709: PUSH
62710: FOR_TO
62711: IFFALSE 62745
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
62713: LD_ADDR_VAR 0 8
62717: PUSH
62718: LD_VAR 0 8
62722: PPUSH
62723: LD_VAR 0 5
62727: PUSH
62728: LD_VAR 0 6
62732: ARRAY
62733: PUSH
62734: LD_INT 1
62736: ARRAY
62737: PPUSH
62738: CALL 94960 0 2
62742: ST_TO_ADDR
62743: GO 62710
62745: POP
62746: POP
// result := tmp ;
62747: LD_ADDR_VAR 0 5
62751: PUSH
62752: LD_VAR 0 8
62756: ST_TO_ADDR
// end ; end ;
62757: LD_VAR 0 5
62761: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
62762: LD_INT 0
62764: PPUSH
62765: PPUSH
62766: PPUSH
62767: PPUSH
// if not list then
62768: LD_VAR 0 3
62772: NOT
62773: IFFALSE 62777
// exit ;
62775: GO 63167
// result := [ ] ;
62777: LD_ADDR_VAR 0 6
62781: PUSH
62782: EMPTY
62783: ST_TO_ADDR
// for i in list do
62784: LD_ADDR_VAR 0 7
62788: PUSH
62789: LD_VAR 0 3
62793: PUSH
62794: FOR_IN
62795: IFFALSE 62997
// begin tmp := GetDistUnitXY ( i , x , y ) ;
62797: LD_ADDR_VAR 0 9
62801: PUSH
62802: LD_VAR 0 7
62806: PPUSH
62807: LD_VAR 0 1
62811: PPUSH
62812: LD_VAR 0 2
62816: PPUSH
62817: CALL_OW 297
62821: ST_TO_ADDR
// if not result then
62822: LD_VAR 0 6
62826: NOT
62827: IFFALSE 62853
// result := [ [ i , tmp ] ] else
62829: LD_ADDR_VAR 0 6
62833: PUSH
62834: LD_VAR 0 7
62838: PUSH
62839: LD_VAR 0 9
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: EMPTY
62849: LIST
62850: ST_TO_ADDR
62851: GO 62995
// begin if result [ result ] [ 2 ] <= tmp then
62853: LD_VAR 0 6
62857: PUSH
62858: LD_VAR 0 6
62862: ARRAY
62863: PUSH
62864: LD_INT 2
62866: ARRAY
62867: PUSH
62868: LD_VAR 0 9
62872: LESSEQUAL
62873: IFFALSE 62915
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
62875: LD_ADDR_VAR 0 6
62879: PUSH
62880: LD_VAR 0 6
62884: PPUSH
62885: LD_VAR 0 6
62889: PUSH
62890: LD_INT 1
62892: PLUS
62893: PPUSH
62894: LD_VAR 0 7
62898: PUSH
62899: LD_VAR 0 9
62903: PUSH
62904: EMPTY
62905: LIST
62906: LIST
62907: PPUSH
62908: CALL_OW 2
62912: ST_TO_ADDR
62913: GO 62995
// for j := 1 to result do
62915: LD_ADDR_VAR 0 8
62919: PUSH
62920: DOUBLE
62921: LD_INT 1
62923: DEC
62924: ST_TO_ADDR
62925: LD_VAR 0 6
62929: PUSH
62930: FOR_TO
62931: IFFALSE 62993
// begin if tmp < result [ j ] [ 2 ] then
62933: LD_VAR 0 9
62937: PUSH
62938: LD_VAR 0 6
62942: PUSH
62943: LD_VAR 0 8
62947: ARRAY
62948: PUSH
62949: LD_INT 2
62951: ARRAY
62952: LESS
62953: IFFALSE 62991
// begin result := Insert ( result , j , [ i , tmp ] ) ;
62955: LD_ADDR_VAR 0 6
62959: PUSH
62960: LD_VAR 0 6
62964: PPUSH
62965: LD_VAR 0 8
62969: PPUSH
62970: LD_VAR 0 7
62974: PUSH
62975: LD_VAR 0 9
62979: PUSH
62980: EMPTY
62981: LIST
62982: LIST
62983: PPUSH
62984: CALL_OW 2
62988: ST_TO_ADDR
// break ;
62989: GO 62993
// end ; end ;
62991: GO 62930
62993: POP
62994: POP
// end ; end ;
62995: GO 62794
62997: POP
62998: POP
// if result and not asc then
62999: LD_VAR 0 6
63003: IFFALSE 63012
63005: PUSH
63006: LD_VAR 0 4
63010: NOT
63011: AND
63012: IFFALSE 63087
// begin tmp := result ;
63014: LD_ADDR_VAR 0 9
63018: PUSH
63019: LD_VAR 0 6
63023: ST_TO_ADDR
// for i = tmp downto 1 do
63024: LD_ADDR_VAR 0 7
63028: PUSH
63029: DOUBLE
63030: LD_VAR 0 9
63034: INC
63035: ST_TO_ADDR
63036: LD_INT 1
63038: PUSH
63039: FOR_DOWNTO
63040: IFFALSE 63085
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
63042: LD_ADDR_VAR 0 6
63046: PUSH
63047: LD_VAR 0 6
63051: PPUSH
63052: LD_VAR 0 9
63056: PUSH
63057: LD_VAR 0 7
63061: MINUS
63062: PUSH
63063: LD_INT 1
63065: PLUS
63066: PPUSH
63067: LD_VAR 0 9
63071: PUSH
63072: LD_VAR 0 7
63076: ARRAY
63077: PPUSH
63078: CALL_OW 1
63082: ST_TO_ADDR
63083: GO 63039
63085: POP
63086: POP
// end ; tmp := [ ] ;
63087: LD_ADDR_VAR 0 9
63091: PUSH
63092: EMPTY
63093: ST_TO_ADDR
// if mode then
63094: LD_VAR 0 5
63098: IFFALSE 63167
// begin for i = 1 to result do
63100: LD_ADDR_VAR 0 7
63104: PUSH
63105: DOUBLE
63106: LD_INT 1
63108: DEC
63109: ST_TO_ADDR
63110: LD_VAR 0 6
63114: PUSH
63115: FOR_TO
63116: IFFALSE 63155
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
63118: LD_ADDR_VAR 0 9
63122: PUSH
63123: LD_VAR 0 9
63127: PPUSH
63128: LD_VAR 0 7
63132: PPUSH
63133: LD_VAR 0 6
63137: PUSH
63138: LD_VAR 0 7
63142: ARRAY
63143: PUSH
63144: LD_INT 1
63146: ARRAY
63147: PPUSH
63148: CALL_OW 1
63152: ST_TO_ADDR
63153: GO 63115
63155: POP
63156: POP
// result := tmp ;
63157: LD_ADDR_VAR 0 6
63161: PUSH
63162: LD_VAR 0 9
63166: ST_TO_ADDR
// end ; end ;
63167: LD_VAR 0 6
63171: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
63172: LD_INT 0
63174: PPUSH
63175: PPUSH
63176: PPUSH
63177: PPUSH
63178: PPUSH
63179: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
63180: LD_ADDR_VAR 0 5
63184: PUSH
63185: LD_INT 0
63187: PUSH
63188: LD_INT 0
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: EMPTY
63195: PUSH
63196: EMPTY
63197: LIST
63198: LIST
63199: LIST
63200: LIST
63201: ST_TO_ADDR
// if not x or not y then
63202: LD_VAR 0 2
63206: NOT
63207: IFTRUE 63216
63209: PUSH
63210: LD_VAR 0 3
63214: NOT
63215: OR
63216: IFFALSE 63220
// exit ;
63218: GO 64876
// if not range then
63220: LD_VAR 0 4
63224: NOT
63225: IFFALSE 63235
// range := 10 ;
63227: LD_ADDR_VAR 0 4
63231: PUSH
63232: LD_INT 10
63234: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
63235: LD_ADDR_VAR 0 8
63239: PUSH
63240: LD_INT 81
63242: PUSH
63243: LD_VAR 0 1
63247: PUSH
63248: EMPTY
63249: LIST
63250: LIST
63251: PUSH
63252: LD_INT 92
63254: PUSH
63255: LD_VAR 0 2
63259: PUSH
63260: LD_VAR 0 3
63264: PUSH
63265: LD_VAR 0 4
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: LIST
63274: LIST
63275: PUSH
63276: LD_INT 3
63278: PUSH
63279: LD_INT 21
63281: PUSH
63282: LD_INT 3
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: EMPTY
63290: LIST
63291: LIST
63292: PUSH
63293: EMPTY
63294: LIST
63295: LIST
63296: LIST
63297: PPUSH
63298: CALL_OW 69
63302: ST_TO_ADDR
// if not tmp then
63303: LD_VAR 0 8
63307: NOT
63308: IFFALSE 63312
// exit ;
63310: GO 64876
// for i in tmp do
63312: LD_ADDR_VAR 0 6
63316: PUSH
63317: LD_VAR 0 8
63321: PUSH
63322: FOR_IN
63323: IFFALSE 64851
// begin points := [ 0 , 0 , 0 ] ;
63325: LD_ADDR_VAR 0 9
63329: PUSH
63330: LD_INT 0
63332: PUSH
63333: LD_INT 0
63335: PUSH
63336: LD_INT 0
63338: PUSH
63339: EMPTY
63340: LIST
63341: LIST
63342: LIST
63343: ST_TO_ADDR
// bpoints := 1 ;
63344: LD_ADDR_VAR 0 10
63348: PUSH
63349: LD_INT 1
63351: ST_TO_ADDR
// case GetType ( i ) of unit_human :
63352: LD_VAR 0 6
63356: PPUSH
63357: CALL_OW 247
63361: PUSH
63362: LD_INT 1
63364: DOUBLE
63365: EQUAL
63366: IFTRUE 63370
63368: GO 63952
63370: POP
// begin if GetClass ( i ) = 1 then
63371: LD_VAR 0 6
63375: PPUSH
63376: CALL_OW 257
63380: PUSH
63381: LD_INT 1
63383: EQUAL
63384: IFFALSE 63405
// points := [ 10 , 5 , 3 ] ;
63386: LD_ADDR_VAR 0 9
63390: PUSH
63391: LD_INT 10
63393: PUSH
63394: LD_INT 5
63396: PUSH
63397: LD_INT 3
63399: PUSH
63400: EMPTY
63401: LIST
63402: LIST
63403: LIST
63404: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
63405: LD_VAR 0 6
63409: PPUSH
63410: CALL_OW 257
63414: PUSH
63415: LD_INT 2
63417: PUSH
63418: LD_INT 3
63420: PUSH
63421: LD_INT 4
63423: PUSH
63424: EMPTY
63425: LIST
63426: LIST
63427: LIST
63428: IN
63429: IFFALSE 63450
// points := [ 3 , 2 , 1 ] ;
63431: LD_ADDR_VAR 0 9
63435: PUSH
63436: LD_INT 3
63438: PUSH
63439: LD_INT 2
63441: PUSH
63442: LD_INT 1
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: LIST
63449: ST_TO_ADDR
// if GetClass ( i ) = 5 then
63450: LD_VAR 0 6
63454: PPUSH
63455: CALL_OW 257
63459: PUSH
63460: LD_INT 5
63462: EQUAL
63463: IFFALSE 63484
// points := [ 130 , 5 , 2 ] ;
63465: LD_ADDR_VAR 0 9
63469: PUSH
63470: LD_INT 130
63472: PUSH
63473: LD_INT 5
63475: PUSH
63476: LD_INT 2
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: LIST
63483: ST_TO_ADDR
// if GetClass ( i ) = 8 then
63484: LD_VAR 0 6
63488: PPUSH
63489: CALL_OW 257
63493: PUSH
63494: LD_INT 8
63496: EQUAL
63497: IFFALSE 63518
// points := [ 35 , 35 , 30 ] ;
63499: LD_ADDR_VAR 0 9
63503: PUSH
63504: LD_INT 35
63506: PUSH
63507: LD_INT 35
63509: PUSH
63510: LD_INT 30
63512: PUSH
63513: EMPTY
63514: LIST
63515: LIST
63516: LIST
63517: ST_TO_ADDR
// if GetClass ( i ) = 9 then
63518: LD_VAR 0 6
63522: PPUSH
63523: CALL_OW 257
63527: PUSH
63528: LD_INT 9
63530: EQUAL
63531: IFFALSE 63552
// points := [ 20 , 55 , 40 ] ;
63533: LD_ADDR_VAR 0 9
63537: PUSH
63538: LD_INT 20
63540: PUSH
63541: LD_INT 55
63543: PUSH
63544: LD_INT 40
63546: PUSH
63547: EMPTY
63548: LIST
63549: LIST
63550: LIST
63551: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
63552: LD_VAR 0 6
63556: PPUSH
63557: CALL_OW 257
63561: PUSH
63562: LD_INT 12
63564: PUSH
63565: LD_INT 16
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: IN
63572: IFFALSE 63593
// points := [ 5 , 3 , 2 ] ;
63574: LD_ADDR_VAR 0 9
63578: PUSH
63579: LD_INT 5
63581: PUSH
63582: LD_INT 3
63584: PUSH
63585: LD_INT 2
63587: PUSH
63588: EMPTY
63589: LIST
63590: LIST
63591: LIST
63592: ST_TO_ADDR
// if GetClass ( i ) = 17 then
63593: LD_VAR 0 6
63597: PPUSH
63598: CALL_OW 257
63602: PUSH
63603: LD_INT 17
63605: EQUAL
63606: IFFALSE 63627
// points := [ 100 , 50 , 75 ] ;
63608: LD_ADDR_VAR 0 9
63612: PUSH
63613: LD_INT 100
63615: PUSH
63616: LD_INT 50
63618: PUSH
63619: LD_INT 75
63621: PUSH
63622: EMPTY
63623: LIST
63624: LIST
63625: LIST
63626: ST_TO_ADDR
// if GetClass ( i ) = 15 then
63627: LD_VAR 0 6
63631: PPUSH
63632: CALL_OW 257
63636: PUSH
63637: LD_INT 15
63639: EQUAL
63640: IFFALSE 63661
// points := [ 10 , 5 , 3 ] ;
63642: LD_ADDR_VAR 0 9
63646: PUSH
63647: LD_INT 10
63649: PUSH
63650: LD_INT 5
63652: PUSH
63653: LD_INT 3
63655: PUSH
63656: EMPTY
63657: LIST
63658: LIST
63659: LIST
63660: ST_TO_ADDR
// if GetClass ( i ) = 14 then
63661: LD_VAR 0 6
63665: PPUSH
63666: CALL_OW 257
63670: PUSH
63671: LD_INT 14
63673: EQUAL
63674: IFFALSE 63695
// points := [ 10 , 0 , 0 ] ;
63676: LD_ADDR_VAR 0 9
63680: PUSH
63681: LD_INT 10
63683: PUSH
63684: LD_INT 0
63686: PUSH
63687: LD_INT 0
63689: PUSH
63690: EMPTY
63691: LIST
63692: LIST
63693: LIST
63694: ST_TO_ADDR
// if GetClass ( i ) = 11 then
63695: LD_VAR 0 6
63699: PPUSH
63700: CALL_OW 257
63704: PUSH
63705: LD_INT 11
63707: EQUAL
63708: IFFALSE 63729
// points := [ 30 , 10 , 5 ] ;
63710: LD_ADDR_VAR 0 9
63714: PUSH
63715: LD_INT 30
63717: PUSH
63718: LD_INT 10
63720: PUSH
63721: LD_INT 5
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: LIST
63728: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
63729: LD_VAR 0 1
63733: PPUSH
63734: LD_INT 5
63736: PPUSH
63737: CALL_OW 321
63741: PUSH
63742: LD_INT 2
63744: EQUAL
63745: IFFALSE 63762
// bpoints := bpoints * 1.8 ;
63747: LD_ADDR_VAR 0 10
63751: PUSH
63752: LD_VAR 0 10
63756: PUSH
63757: LD_REAL  1.80000000000000E+0000
63760: MUL
63761: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
63762: LD_VAR 0 6
63766: PPUSH
63767: CALL_OW 257
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: LD_INT 2
63777: PUSH
63778: LD_INT 3
63780: PUSH
63781: LD_INT 4
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: LIST
63788: LIST
63789: IN
63790: IFFALSE 63810
63792: PUSH
63793: LD_VAR 0 1
63797: PPUSH
63798: LD_INT 51
63800: PPUSH
63801: CALL_OW 321
63805: PUSH
63806: LD_INT 2
63808: EQUAL
63809: AND
63810: IFFALSE 63827
// bpoints := bpoints * 1.2 ;
63812: LD_ADDR_VAR 0 10
63816: PUSH
63817: LD_VAR 0 10
63821: PUSH
63822: LD_REAL  1.20000000000000E+0000
63825: MUL
63826: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
63827: LD_VAR 0 6
63831: PPUSH
63832: CALL_OW 257
63836: PUSH
63837: LD_INT 5
63839: PUSH
63840: LD_INT 7
63842: PUSH
63843: LD_INT 9
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: LIST
63850: IN
63851: IFFALSE 63871
63853: PUSH
63854: LD_VAR 0 1
63858: PPUSH
63859: LD_INT 52
63861: PPUSH
63862: CALL_OW 321
63866: PUSH
63867: LD_INT 2
63869: EQUAL
63870: AND
63871: IFFALSE 63888
// bpoints := bpoints * 1.5 ;
63873: LD_ADDR_VAR 0 10
63877: PUSH
63878: LD_VAR 0 10
63882: PUSH
63883: LD_REAL  1.50000000000000E+0000
63886: MUL
63887: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
63888: LD_VAR 0 1
63892: PPUSH
63893: LD_INT 66
63895: PPUSH
63896: CALL_OW 321
63900: PUSH
63901: LD_INT 2
63903: EQUAL
63904: IFFALSE 63921
// bpoints := bpoints * 1.1 ;
63906: LD_ADDR_VAR 0 10
63910: PUSH
63911: LD_VAR 0 10
63915: PUSH
63916: LD_REAL  1.10000000000000E+0000
63919: MUL
63920: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
63921: LD_ADDR_VAR 0 10
63925: PUSH
63926: LD_VAR 0 10
63930: PUSH
63931: LD_VAR 0 6
63935: PPUSH
63936: LD_INT 1
63938: PPUSH
63939: CALL_OW 259
63943: PUSH
63944: LD_REAL  1.15000000000000E+0000
63947: MUL
63948: MUL
63949: ST_TO_ADDR
// end ; unit_vehicle :
63950: GO 64780
63952: LD_INT 2
63954: DOUBLE
63955: EQUAL
63956: IFTRUE 63960
63958: GO 64768
63960: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
63961: LD_VAR 0 6
63965: PPUSH
63966: CALL_OW 264
63970: PUSH
63971: LD_INT 2
63973: PUSH
63974: LD_INT 42
63976: PUSH
63977: LD_INT 24
63979: PUSH
63980: EMPTY
63981: LIST
63982: LIST
63983: LIST
63984: IN
63985: IFFALSE 64006
// points := [ 25 , 5 , 3 ] ;
63987: LD_ADDR_VAR 0 9
63991: PUSH
63992: LD_INT 25
63994: PUSH
63995: LD_INT 5
63997: PUSH
63998: LD_INT 3
64000: PUSH
64001: EMPTY
64002: LIST
64003: LIST
64004: LIST
64005: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
64006: LD_VAR 0 6
64010: PPUSH
64011: CALL_OW 264
64015: PUSH
64016: LD_INT 4
64018: PUSH
64019: LD_INT 43
64021: PUSH
64022: LD_INT 25
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: LIST
64029: IN
64030: IFFALSE 64051
// points := [ 40 , 15 , 5 ] ;
64032: LD_ADDR_VAR 0 9
64036: PUSH
64037: LD_INT 40
64039: PUSH
64040: LD_INT 15
64042: PUSH
64043: LD_INT 5
64045: PUSH
64046: EMPTY
64047: LIST
64048: LIST
64049: LIST
64050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
64051: LD_VAR 0 6
64055: PPUSH
64056: CALL_OW 264
64060: PUSH
64061: LD_INT 3
64063: PUSH
64064: LD_INT 23
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: IN
64071: IFFALSE 64092
// points := [ 7 , 25 , 8 ] ;
64073: LD_ADDR_VAR 0 9
64077: PUSH
64078: LD_INT 7
64080: PUSH
64081: LD_INT 25
64083: PUSH
64084: LD_INT 8
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: LIST
64091: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
64092: LD_VAR 0 6
64096: PPUSH
64097: CALL_OW 264
64101: PUSH
64102: LD_INT 5
64104: PUSH
64105: LD_INT 27
64107: PUSH
64108: LD_INT 44
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: LIST
64115: IN
64116: IFFALSE 64137
// points := [ 14 , 50 , 16 ] ;
64118: LD_ADDR_VAR 0 9
64122: PUSH
64123: LD_INT 14
64125: PUSH
64126: LD_INT 50
64128: PUSH
64129: LD_INT 16
64131: PUSH
64132: EMPTY
64133: LIST
64134: LIST
64135: LIST
64136: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
64137: LD_VAR 0 6
64141: PPUSH
64142: CALL_OW 264
64146: PUSH
64147: LD_INT 6
64149: PUSH
64150: LD_INT 46
64152: PUSH
64153: EMPTY
64154: LIST
64155: LIST
64156: IN
64157: IFFALSE 64178
// points := [ 32 , 120 , 70 ] ;
64159: LD_ADDR_VAR 0 9
64163: PUSH
64164: LD_INT 32
64166: PUSH
64167: LD_INT 120
64169: PUSH
64170: LD_INT 70
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: LIST
64177: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
64178: LD_VAR 0 6
64182: PPUSH
64183: CALL_OW 264
64187: PUSH
64188: LD_INT 7
64190: PUSH
64191: LD_INT 28
64193: PUSH
64194: LD_INT 45
64196: PUSH
64197: LD_INT 92
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: IN
64206: IFFALSE 64227
// points := [ 35 , 20 , 45 ] ;
64208: LD_ADDR_VAR 0 9
64212: PUSH
64213: LD_INT 35
64215: PUSH
64216: LD_INT 20
64218: PUSH
64219: LD_INT 45
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: LIST
64226: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
64227: LD_VAR 0 6
64231: PPUSH
64232: CALL_OW 264
64236: PUSH
64237: LD_INT 47
64239: PUSH
64240: EMPTY
64241: LIST
64242: IN
64243: IFFALSE 64264
// points := [ 67 , 45 , 75 ] ;
64245: LD_ADDR_VAR 0 9
64249: PUSH
64250: LD_INT 67
64252: PUSH
64253: LD_INT 45
64255: PUSH
64256: LD_INT 75
64258: PUSH
64259: EMPTY
64260: LIST
64261: LIST
64262: LIST
64263: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
64264: LD_VAR 0 6
64268: PPUSH
64269: CALL_OW 264
64273: PUSH
64274: LD_INT 26
64276: PUSH
64277: EMPTY
64278: LIST
64279: IN
64280: IFFALSE 64301
// points := [ 120 , 30 , 80 ] ;
64282: LD_ADDR_VAR 0 9
64286: PUSH
64287: LD_INT 120
64289: PUSH
64290: LD_INT 30
64292: PUSH
64293: LD_INT 80
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: LIST
64300: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
64301: LD_VAR 0 6
64305: PPUSH
64306: CALL_OW 264
64310: PUSH
64311: LD_INT 22
64313: PUSH
64314: EMPTY
64315: LIST
64316: IN
64317: IFFALSE 64338
// points := [ 40 , 1 , 1 ] ;
64319: LD_ADDR_VAR 0 9
64323: PUSH
64324: LD_INT 40
64326: PUSH
64327: LD_INT 1
64329: PUSH
64330: LD_INT 1
64332: PUSH
64333: EMPTY
64334: LIST
64335: LIST
64336: LIST
64337: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
64338: LD_VAR 0 6
64342: PPUSH
64343: CALL_OW 264
64347: PUSH
64348: LD_INT 29
64350: PUSH
64351: EMPTY
64352: LIST
64353: IN
64354: IFFALSE 64375
// points := [ 70 , 200 , 400 ] ;
64356: LD_ADDR_VAR 0 9
64360: PUSH
64361: LD_INT 70
64363: PUSH
64364: LD_INT 200
64366: PUSH
64367: LD_INT 400
64369: PUSH
64370: EMPTY
64371: LIST
64372: LIST
64373: LIST
64374: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
64375: LD_VAR 0 6
64379: PPUSH
64380: CALL_OW 264
64384: PUSH
64385: LD_INT 14
64387: PUSH
64388: LD_INT 53
64390: PUSH
64391: EMPTY
64392: LIST
64393: LIST
64394: IN
64395: IFFALSE 64416
// points := [ 40 , 10 , 20 ] ;
64397: LD_ADDR_VAR 0 9
64401: PUSH
64402: LD_INT 40
64404: PUSH
64405: LD_INT 10
64407: PUSH
64408: LD_INT 20
64410: PUSH
64411: EMPTY
64412: LIST
64413: LIST
64414: LIST
64415: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
64416: LD_VAR 0 6
64420: PPUSH
64421: CALL_OW 264
64425: PUSH
64426: LD_INT 9
64428: PUSH
64429: EMPTY
64430: LIST
64431: IN
64432: IFFALSE 64453
// points := [ 5 , 70 , 20 ] ;
64434: LD_ADDR_VAR 0 9
64438: PUSH
64439: LD_INT 5
64441: PUSH
64442: LD_INT 70
64444: PUSH
64445: LD_INT 20
64447: PUSH
64448: EMPTY
64449: LIST
64450: LIST
64451: LIST
64452: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
64453: LD_VAR 0 6
64457: PPUSH
64458: CALL_OW 264
64462: PUSH
64463: LD_INT 10
64465: PUSH
64466: EMPTY
64467: LIST
64468: IN
64469: IFFALSE 64490
// points := [ 35 , 110 , 70 ] ;
64471: LD_ADDR_VAR 0 9
64475: PUSH
64476: LD_INT 35
64478: PUSH
64479: LD_INT 110
64481: PUSH
64482: LD_INT 70
64484: PUSH
64485: EMPTY
64486: LIST
64487: LIST
64488: LIST
64489: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
64490: LD_VAR 0 6
64494: PPUSH
64495: CALL_OW 265
64499: PUSH
64500: LD_INT 25
64502: EQUAL
64503: IFFALSE 64524
// points := [ 80 , 65 , 100 ] ;
64505: LD_ADDR_VAR 0 9
64509: PUSH
64510: LD_INT 80
64512: PUSH
64513: LD_INT 65
64515: PUSH
64516: LD_INT 100
64518: PUSH
64519: EMPTY
64520: LIST
64521: LIST
64522: LIST
64523: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
64524: LD_VAR 0 6
64528: PPUSH
64529: CALL_OW 263
64533: PUSH
64534: LD_INT 1
64536: EQUAL
64537: IFFALSE 64572
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
64539: LD_ADDR_VAR 0 10
64543: PUSH
64544: LD_VAR 0 10
64548: PUSH
64549: LD_VAR 0 6
64553: PPUSH
64554: CALL_OW 311
64558: PPUSH
64559: LD_INT 3
64561: PPUSH
64562: CALL_OW 259
64566: PUSH
64567: LD_INT 4
64569: MUL
64570: MUL
64571: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
64572: LD_VAR 0 6
64576: PPUSH
64577: CALL_OW 263
64581: PUSH
64582: LD_INT 2
64584: EQUAL
64585: IFFALSE 64636
// begin j := IsControledBy ( i ) ;
64587: LD_ADDR_VAR 0 7
64591: PUSH
64592: LD_VAR 0 6
64596: PPUSH
64597: CALL_OW 312
64601: ST_TO_ADDR
// if j then
64602: LD_VAR 0 7
64606: IFFALSE 64636
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
64608: LD_ADDR_VAR 0 10
64612: PUSH
64613: LD_VAR 0 10
64617: PUSH
64618: LD_VAR 0 7
64622: PPUSH
64623: LD_INT 3
64625: PPUSH
64626: CALL_OW 259
64630: PUSH
64631: LD_INT 3
64633: MUL
64634: MUL
64635: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
64636: LD_VAR 0 6
64640: PPUSH
64641: CALL_OW 264
64645: PUSH
64646: LD_INT 5
64648: PUSH
64649: LD_INT 6
64651: PUSH
64652: LD_INT 46
64654: PUSH
64655: LD_INT 44
64657: PUSH
64658: LD_INT 47
64660: PUSH
64661: LD_INT 45
64663: PUSH
64664: LD_INT 28
64666: PUSH
64667: LD_INT 7
64669: PUSH
64670: LD_INT 27
64672: PUSH
64673: LD_INT 29
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: LIST
64680: LIST
64681: LIST
64682: LIST
64683: LIST
64684: LIST
64685: LIST
64686: LIST
64687: IN
64688: IFFALSE 64708
64690: PUSH
64691: LD_VAR 0 1
64695: PPUSH
64696: LD_INT 52
64698: PPUSH
64699: CALL_OW 321
64703: PUSH
64704: LD_INT 2
64706: EQUAL
64707: AND
64708: IFFALSE 64725
// bpoints := bpoints * 1.2 ;
64710: LD_ADDR_VAR 0 10
64714: PUSH
64715: LD_VAR 0 10
64719: PUSH
64720: LD_REAL  1.20000000000000E+0000
64723: MUL
64724: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
64725: LD_VAR 0 6
64729: PPUSH
64730: CALL_OW 264
64734: PUSH
64735: LD_INT 6
64737: PUSH
64738: LD_INT 46
64740: PUSH
64741: LD_INT 47
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: LIST
64748: IN
64749: IFFALSE 64766
// bpoints := bpoints * 1.2 ;
64751: LD_ADDR_VAR 0 10
64755: PUSH
64756: LD_VAR 0 10
64760: PUSH
64761: LD_REAL  1.20000000000000E+0000
64764: MUL
64765: ST_TO_ADDR
// end ; unit_building :
64766: GO 64780
64768: LD_INT 3
64770: DOUBLE
64771: EQUAL
64772: IFTRUE 64776
64774: GO 64779
64776: POP
// ; end ;
64777: GO 64780
64779: POP
// for j = 1 to 3 do
64780: LD_ADDR_VAR 0 7
64784: PUSH
64785: DOUBLE
64786: LD_INT 1
64788: DEC
64789: ST_TO_ADDR
64790: LD_INT 3
64792: PUSH
64793: FOR_TO
64794: IFFALSE 64847
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
64796: LD_ADDR_VAR 0 5
64800: PUSH
64801: LD_VAR 0 5
64805: PPUSH
64806: LD_VAR 0 7
64810: PPUSH
64811: LD_VAR 0 5
64815: PUSH
64816: LD_VAR 0 7
64820: ARRAY
64821: PUSH
64822: LD_VAR 0 9
64826: PUSH
64827: LD_VAR 0 7
64831: ARRAY
64832: PUSH
64833: LD_VAR 0 10
64837: MUL
64838: PLUS
64839: PPUSH
64840: CALL_OW 1
64844: ST_TO_ADDR
64845: GO 64793
64847: POP
64848: POP
// end ;
64849: GO 63322
64851: POP
64852: POP
// result := Replace ( result , 4 , tmp ) ;
64853: LD_ADDR_VAR 0 5
64857: PUSH
64858: LD_VAR 0 5
64862: PPUSH
64863: LD_INT 4
64865: PPUSH
64866: LD_VAR 0 8
64870: PPUSH
64871: CALL_OW 1
64875: ST_TO_ADDR
// end ;
64876: LD_VAR 0 5
64880: RET
// export function DangerAtRange ( unit , range ) ; begin
64881: LD_INT 0
64883: PPUSH
// if not unit then
64884: LD_VAR 0 1
64888: NOT
64889: IFFALSE 64893
// exit ;
64891: GO 64938
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
64893: LD_ADDR_VAR 0 3
64897: PUSH
64898: LD_VAR 0 1
64902: PPUSH
64903: CALL_OW 255
64907: PPUSH
64908: LD_VAR 0 1
64912: PPUSH
64913: CALL_OW 250
64917: PPUSH
64918: LD_VAR 0 1
64922: PPUSH
64923: CALL_OW 251
64927: PPUSH
64928: LD_VAR 0 2
64932: PPUSH
64933: CALL 63172 0 4
64937: ST_TO_ADDR
// end ;
64938: LD_VAR 0 3
64942: RET
// export function DangerInArea ( side , area ) ; begin
64943: LD_INT 0
64945: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
64946: LD_ADDR_VAR 0 3
64950: PUSH
64951: LD_VAR 0 2
64955: PPUSH
64956: LD_INT 81
64958: PUSH
64959: LD_VAR 0 1
64963: PUSH
64964: EMPTY
64965: LIST
64966: LIST
64967: PPUSH
64968: CALL_OW 70
64972: ST_TO_ADDR
// end ;
64973: LD_VAR 0 3
64977: RET
// export function IsExtension ( b ) ; begin
64978: LD_INT 0
64980: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
64981: LD_ADDR_VAR 0 2
64985: PUSH
64986: LD_VAR 0 1
64990: PUSH
64991: LD_INT 23
64993: PUSH
64994: LD_INT 20
64996: PUSH
64997: LD_INT 22
64999: PUSH
65000: LD_INT 17
65002: PUSH
65003: LD_INT 24
65005: PUSH
65006: LD_INT 21
65008: PUSH
65009: LD_INT 19
65011: PUSH
65012: LD_INT 16
65014: PUSH
65015: LD_INT 25
65017: PUSH
65018: LD_INT 18
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: LIST
65025: LIST
65026: LIST
65027: LIST
65028: LIST
65029: LIST
65030: LIST
65031: LIST
65032: IN
65033: ST_TO_ADDR
// end ;
65034: LD_VAR 0 2
65038: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
65039: LD_INT 0
65041: PPUSH
65042: PPUSH
65043: PPUSH
// result := [ ] ;
65044: LD_ADDR_VAR 0 4
65048: PUSH
65049: EMPTY
65050: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
65051: LD_ADDR_VAR 0 5
65055: PUSH
65056: LD_VAR 0 2
65060: PPUSH
65061: LD_INT 21
65063: PUSH
65064: LD_INT 3
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PPUSH
65071: CALL_OW 70
65075: ST_TO_ADDR
// if not tmp then
65076: LD_VAR 0 5
65080: NOT
65081: IFFALSE 65085
// exit ;
65083: GO 65149
// if checkLink then
65085: LD_VAR 0 3
65089: IFFALSE 65139
// begin for i in tmp do
65091: LD_ADDR_VAR 0 6
65095: PUSH
65096: LD_VAR 0 5
65100: PUSH
65101: FOR_IN
65102: IFFALSE 65137
// if GetBase ( i ) <> base then
65104: LD_VAR 0 6
65108: PPUSH
65109: CALL_OW 274
65113: PUSH
65114: LD_VAR 0 1
65118: NONEQUAL
65119: IFFALSE 65135
// ComLinkToBase ( base , i ) ;
65121: LD_VAR 0 1
65125: PPUSH
65126: LD_VAR 0 6
65130: PPUSH
65131: CALL_OW 169
65135: GO 65101
65137: POP
65138: POP
// end ; result := tmp ;
65139: LD_ADDR_VAR 0 4
65143: PUSH
65144: LD_VAR 0 5
65148: ST_TO_ADDR
// end ;
65149: LD_VAR 0 4
65153: RET
// export function ComComplete ( units , b ) ; var i ; begin
65154: LD_INT 0
65156: PPUSH
65157: PPUSH
// if not units then
65158: LD_VAR 0 1
65162: NOT
65163: IFFALSE 65167
// exit ;
65165: GO 65257
// for i in units do
65167: LD_ADDR_VAR 0 4
65171: PUSH
65172: LD_VAR 0 1
65176: PUSH
65177: FOR_IN
65178: IFFALSE 65255
// if BuildingStatus ( b ) = bs_build then
65180: LD_VAR 0 2
65184: PPUSH
65185: CALL_OW 461
65189: PUSH
65190: LD_INT 1
65192: EQUAL
65193: IFFALSE 65253
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
65195: LD_VAR 0 4
65199: PPUSH
65200: LD_STRING h
65202: PUSH
65203: LD_VAR 0 2
65207: PPUSH
65208: CALL_OW 250
65212: PUSH
65213: LD_VAR 0 2
65217: PPUSH
65218: CALL_OW 251
65222: PUSH
65223: LD_VAR 0 2
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 0
65233: PUSH
65234: LD_INT 0
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: LIST
65245: PUSH
65246: EMPTY
65247: LIST
65248: PPUSH
65249: CALL_OW 446
65253: GO 65177
65255: POP
65256: POP
// end ;
65257: LD_VAR 0 3
65261: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
65262: LD_INT 0
65264: PPUSH
65265: PPUSH
65266: PPUSH
65267: PPUSH
65268: PPUSH
65269: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
65270: LD_VAR 0 1
65274: NOT
65275: IFTRUE 65292
65277: PUSH
65278: LD_VAR 0 1
65282: PPUSH
65283: CALL_OW 263
65287: PUSH
65288: LD_INT 2
65290: NONEQUAL
65291: OR
65292: IFFALSE 65296
// exit ;
65294: GO 65612
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
65296: LD_ADDR_VAR 0 6
65300: PUSH
65301: LD_INT 22
65303: PUSH
65304: LD_VAR 0 1
65308: PPUSH
65309: CALL_OW 255
65313: PUSH
65314: EMPTY
65315: LIST
65316: LIST
65317: PUSH
65318: LD_INT 2
65320: PUSH
65321: LD_INT 30
65323: PUSH
65324: LD_INT 36
65326: PUSH
65327: EMPTY
65328: LIST
65329: LIST
65330: PUSH
65331: LD_INT 34
65333: PUSH
65334: LD_INT 31
65336: PUSH
65337: EMPTY
65338: LIST
65339: LIST
65340: PUSH
65341: EMPTY
65342: LIST
65343: LIST
65344: LIST
65345: PUSH
65346: EMPTY
65347: LIST
65348: LIST
65349: PPUSH
65350: CALL_OW 69
65354: ST_TO_ADDR
// if not tmp then
65355: LD_VAR 0 6
65359: NOT
65360: IFFALSE 65364
// exit ;
65362: GO 65612
// result := [ ] ;
65364: LD_ADDR_VAR 0 2
65368: PUSH
65369: EMPTY
65370: ST_TO_ADDR
// for i in tmp do
65371: LD_ADDR_VAR 0 3
65375: PUSH
65376: LD_VAR 0 6
65380: PUSH
65381: FOR_IN
65382: IFFALSE 65453
// begin t := UnitsInside ( i ) ;
65384: LD_ADDR_VAR 0 4
65388: PUSH
65389: LD_VAR 0 3
65393: PPUSH
65394: CALL_OW 313
65398: ST_TO_ADDR
// if t then
65399: LD_VAR 0 4
65403: IFFALSE 65451
// for j in t do
65405: LD_ADDR_VAR 0 7
65409: PUSH
65410: LD_VAR 0 4
65414: PUSH
65415: FOR_IN
65416: IFFALSE 65449
// result := Replace ( result , result + 1 , j ) ;
65418: LD_ADDR_VAR 0 2
65422: PUSH
65423: LD_VAR 0 2
65427: PPUSH
65428: LD_VAR 0 2
65432: PUSH
65433: LD_INT 1
65435: PLUS
65436: PPUSH
65437: LD_VAR 0 7
65441: PPUSH
65442: CALL_OW 1
65446: ST_TO_ADDR
65447: GO 65415
65449: POP
65450: POP
// end ;
65451: GO 65381
65453: POP
65454: POP
// if not result then
65455: LD_VAR 0 2
65459: NOT
65460: IFFALSE 65464
// exit ;
65462: GO 65612
// mech := result [ 1 ] ;
65464: LD_ADDR_VAR 0 5
65468: PUSH
65469: LD_VAR 0 2
65473: PUSH
65474: LD_INT 1
65476: ARRAY
65477: ST_TO_ADDR
// if result > 1 then
65478: LD_VAR 0 2
65482: PUSH
65483: LD_INT 1
65485: GREATER
65486: IFFALSE 65598
// begin for i = 2 to result do
65488: LD_ADDR_VAR 0 3
65492: PUSH
65493: DOUBLE
65494: LD_INT 2
65496: DEC
65497: ST_TO_ADDR
65498: LD_VAR 0 2
65502: PUSH
65503: FOR_TO
65504: IFFALSE 65596
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
65506: LD_ADDR_VAR 0 4
65510: PUSH
65511: LD_VAR 0 2
65515: PUSH
65516: LD_VAR 0 3
65520: ARRAY
65521: PPUSH
65522: LD_INT 3
65524: PPUSH
65525: CALL_OW 259
65529: PUSH
65530: LD_VAR 0 2
65534: PUSH
65535: LD_VAR 0 3
65539: ARRAY
65540: PPUSH
65541: CALL_OW 432
65545: MINUS
65546: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
65547: LD_VAR 0 4
65551: PUSH
65552: LD_VAR 0 5
65556: PPUSH
65557: LD_INT 3
65559: PPUSH
65560: CALL_OW 259
65564: PUSH
65565: LD_VAR 0 5
65569: PPUSH
65570: CALL_OW 432
65574: MINUS
65575: GREATEREQUAL
65576: IFFALSE 65594
// mech := result [ i ] ;
65578: LD_ADDR_VAR 0 5
65582: PUSH
65583: LD_VAR 0 2
65587: PUSH
65588: LD_VAR 0 3
65592: ARRAY
65593: ST_TO_ADDR
// end ;
65594: GO 65503
65596: POP
65597: POP
// end ; ComLinkTo ( vehicle , mech ) ;
65598: LD_VAR 0 1
65602: PPUSH
65603: LD_VAR 0 5
65607: PPUSH
65608: CALL_OW 135
// end ;
65612: LD_VAR 0 2
65616: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
65617: LD_INT 0
65619: PPUSH
65620: PPUSH
65621: PPUSH
65622: PPUSH
65623: PPUSH
65624: PPUSH
65625: PPUSH
65626: PPUSH
65627: PPUSH
65628: PPUSH
65629: PPUSH
65630: PPUSH
65631: PPUSH
// result := [ ] ;
65632: LD_ADDR_VAR 0 7
65636: PUSH
65637: EMPTY
65638: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
65639: LD_VAR 0 1
65643: PPUSH
65644: CALL_OW 266
65648: PUSH
65649: LD_INT 0
65651: PUSH
65652: LD_INT 1
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: IN
65659: NOT
65660: IFFALSE 65664
// exit ;
65662: GO 67304
// if name then
65664: LD_VAR 0 3
65668: IFFALSE 65684
// SetBName ( base_dep , name ) ;
65670: LD_VAR 0 1
65674: PPUSH
65675: LD_VAR 0 3
65679: PPUSH
65680: CALL_OW 500
// base := GetBase ( base_dep ) ;
65684: LD_ADDR_VAR 0 15
65688: PUSH
65689: LD_VAR 0 1
65693: PPUSH
65694: CALL_OW 274
65698: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
65699: LD_ADDR_VAR 0 16
65703: PUSH
65704: LD_VAR 0 1
65708: PPUSH
65709: CALL_OW 255
65713: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
65714: LD_ADDR_VAR 0 17
65718: PUSH
65719: LD_VAR 0 1
65723: PPUSH
65724: CALL_OW 248
65728: ST_TO_ADDR
// if sources then
65729: LD_VAR 0 5
65733: IFFALSE 65780
// for i = 1 to 3 do
65735: LD_ADDR_VAR 0 8
65739: PUSH
65740: DOUBLE
65741: LD_INT 1
65743: DEC
65744: ST_TO_ADDR
65745: LD_INT 3
65747: PUSH
65748: FOR_TO
65749: IFFALSE 65778
// AddResourceType ( base , i , sources [ i ] ) ;
65751: LD_VAR 0 15
65755: PPUSH
65756: LD_VAR 0 8
65760: PPUSH
65761: LD_VAR 0 5
65765: PUSH
65766: LD_VAR 0 8
65770: ARRAY
65771: PPUSH
65772: CALL_OW 276
65776: GO 65748
65778: POP
65779: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
65780: LD_ADDR_VAR 0 18
65784: PUSH
65785: LD_VAR 0 15
65789: PPUSH
65790: LD_VAR 0 2
65794: PPUSH
65795: LD_INT 1
65797: PPUSH
65798: CALL 65039 0 3
65802: ST_TO_ADDR
// InitHc ;
65803: CALL_OW 19
// InitUc ;
65807: CALL_OW 18
// uc_side := side ;
65811: LD_ADDR_OWVAR 20
65815: PUSH
65816: LD_VAR 0 16
65820: ST_TO_ADDR
// uc_nation := nation ;
65821: LD_ADDR_OWVAR 21
65825: PUSH
65826: LD_VAR 0 17
65830: ST_TO_ADDR
// if buildings then
65831: LD_VAR 0 18
65835: IFFALSE 67163
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
65837: LD_ADDR_VAR 0 19
65841: PUSH
65842: LD_VAR 0 18
65846: PPUSH
65847: LD_INT 2
65849: PUSH
65850: LD_INT 30
65852: PUSH
65853: LD_INT 29
65855: PUSH
65856: EMPTY
65857: LIST
65858: LIST
65859: PUSH
65860: LD_INT 30
65862: PUSH
65863: LD_INT 30
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: LIST
65874: PPUSH
65875: CALL_OW 72
65879: ST_TO_ADDR
// if tmp then
65880: LD_VAR 0 19
65884: IFFALSE 65932
// for i in tmp do
65886: LD_ADDR_VAR 0 8
65890: PUSH
65891: LD_VAR 0 19
65895: PUSH
65896: FOR_IN
65897: IFFALSE 65930
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
65899: LD_VAR 0 8
65903: PPUSH
65904: CALL_OW 250
65908: PPUSH
65909: LD_VAR 0 8
65913: PPUSH
65914: CALL_OW 251
65918: PPUSH
65919: LD_VAR 0 16
65923: PPUSH
65924: CALL_OW 441
65928: GO 65896
65930: POP
65931: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
65932: LD_VAR 0 18
65936: PPUSH
65937: LD_INT 2
65939: PUSH
65940: LD_INT 30
65942: PUSH
65943: LD_INT 32
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 30
65952: PUSH
65953: LD_INT 33
65955: PUSH
65956: EMPTY
65957: LIST
65958: LIST
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: LIST
65964: PPUSH
65965: CALL_OW 72
65969: IFFALSE 66057
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
65971: LD_ADDR_VAR 0 8
65975: PUSH
65976: LD_VAR 0 18
65980: PPUSH
65981: LD_INT 2
65983: PUSH
65984: LD_INT 30
65986: PUSH
65987: LD_INT 32
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 30
65996: PUSH
65997: LD_INT 33
65999: PUSH
66000: EMPTY
66001: LIST
66002: LIST
66003: PUSH
66004: EMPTY
66005: LIST
66006: LIST
66007: LIST
66008: PPUSH
66009: CALL_OW 72
66013: PUSH
66014: FOR_IN
66015: IFFALSE 66055
// begin if not GetBWeapon ( i ) then
66017: LD_VAR 0 8
66021: PPUSH
66022: CALL_OW 269
66026: NOT
66027: IFFALSE 66053
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
66029: LD_VAR 0 8
66033: PPUSH
66034: LD_VAR 0 8
66038: PPUSH
66039: LD_VAR 0 2
66043: PPUSH
66044: CALL 67309 0 2
66048: PPUSH
66049: CALL_OW 431
// end ;
66053: GO 66014
66055: POP
66056: POP
// end ; for i = 1 to personel do
66057: LD_ADDR_VAR 0 8
66061: PUSH
66062: DOUBLE
66063: LD_INT 1
66065: DEC
66066: ST_TO_ADDR
66067: LD_VAR 0 6
66071: PUSH
66072: FOR_TO
66073: IFFALSE 67143
// begin if i > 4 then
66075: LD_VAR 0 8
66079: PUSH
66080: LD_INT 4
66082: GREATER
66083: IFFALSE 66087
// break ;
66085: GO 67143
// case i of 1 :
66087: LD_VAR 0 8
66091: PUSH
66092: LD_INT 1
66094: DOUBLE
66095: EQUAL
66096: IFTRUE 66100
66098: GO 66180
66100: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
66101: LD_ADDR_VAR 0 12
66105: PUSH
66106: LD_VAR 0 18
66110: PPUSH
66111: LD_INT 22
66113: PUSH
66114: LD_VAR 0 16
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 58
66125: PUSH
66126: EMPTY
66127: LIST
66128: PUSH
66129: LD_INT 2
66131: PUSH
66132: LD_INT 30
66134: PUSH
66135: LD_INT 32
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 30
66144: PUSH
66145: LD_INT 4
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 30
66154: PUSH
66155: LD_INT 5
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: EMPTY
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: LIST
66172: PPUSH
66173: CALL_OW 72
66177: ST_TO_ADDR
66178: GO 66402
66180: LD_INT 2
66182: DOUBLE
66183: EQUAL
66184: IFTRUE 66188
66186: GO 66250
66188: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
66189: LD_ADDR_VAR 0 12
66193: PUSH
66194: LD_VAR 0 18
66198: PPUSH
66199: LD_INT 22
66201: PUSH
66202: LD_VAR 0 16
66206: PUSH
66207: EMPTY
66208: LIST
66209: LIST
66210: PUSH
66211: LD_INT 2
66213: PUSH
66214: LD_INT 30
66216: PUSH
66217: LD_INT 0
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 30
66226: PUSH
66227: LD_INT 1
66229: PUSH
66230: EMPTY
66231: LIST
66232: LIST
66233: PUSH
66234: EMPTY
66235: LIST
66236: LIST
66237: LIST
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PPUSH
66243: CALL_OW 72
66247: ST_TO_ADDR
66248: GO 66402
66250: LD_INT 3
66252: DOUBLE
66253: EQUAL
66254: IFTRUE 66258
66256: GO 66320
66258: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
66259: LD_ADDR_VAR 0 12
66263: PUSH
66264: LD_VAR 0 18
66268: PPUSH
66269: LD_INT 22
66271: PUSH
66272: LD_VAR 0 16
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 2
66283: PUSH
66284: LD_INT 30
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: EMPTY
66291: LIST
66292: LIST
66293: PUSH
66294: LD_INT 30
66296: PUSH
66297: LD_INT 3
66299: PUSH
66300: EMPTY
66301: LIST
66302: LIST
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: LIST
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PPUSH
66313: CALL_OW 72
66317: ST_TO_ADDR
66318: GO 66402
66320: LD_INT 4
66322: DOUBLE
66323: EQUAL
66324: IFTRUE 66328
66326: GO 66401
66328: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
66329: LD_ADDR_VAR 0 12
66333: PUSH
66334: LD_VAR 0 18
66338: PPUSH
66339: LD_INT 22
66341: PUSH
66342: LD_VAR 0 16
66346: PUSH
66347: EMPTY
66348: LIST
66349: LIST
66350: PUSH
66351: LD_INT 2
66353: PUSH
66354: LD_INT 30
66356: PUSH
66357: LD_INT 6
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 30
66366: PUSH
66367: LD_INT 7
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 30
66376: PUSH
66377: LD_INT 8
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PPUSH
66394: CALL_OW 72
66398: ST_TO_ADDR
66399: GO 66402
66401: POP
// if i = 1 then
66402: LD_VAR 0 8
66406: PUSH
66407: LD_INT 1
66409: EQUAL
66410: IFFALSE 66521
// begin tmp := [ ] ;
66412: LD_ADDR_VAR 0 19
66416: PUSH
66417: EMPTY
66418: ST_TO_ADDR
// for j in f do
66419: LD_ADDR_VAR 0 9
66423: PUSH
66424: LD_VAR 0 12
66428: PUSH
66429: FOR_IN
66430: IFFALSE 66503
// if GetBType ( j ) = b_bunker then
66432: LD_VAR 0 9
66436: PPUSH
66437: CALL_OW 266
66441: PUSH
66442: LD_INT 32
66444: EQUAL
66445: IFFALSE 66472
// tmp := Insert ( tmp , 1 , j ) else
66447: LD_ADDR_VAR 0 19
66451: PUSH
66452: LD_VAR 0 19
66456: PPUSH
66457: LD_INT 1
66459: PPUSH
66460: LD_VAR 0 9
66464: PPUSH
66465: CALL_OW 2
66469: ST_TO_ADDR
66470: GO 66501
// tmp := Insert ( tmp , tmp + 1 , j ) ;
66472: LD_ADDR_VAR 0 19
66476: PUSH
66477: LD_VAR 0 19
66481: PPUSH
66482: LD_VAR 0 19
66486: PUSH
66487: LD_INT 1
66489: PLUS
66490: PPUSH
66491: LD_VAR 0 9
66495: PPUSH
66496: CALL_OW 2
66500: ST_TO_ADDR
66501: GO 66429
66503: POP
66504: POP
// if tmp then
66505: LD_VAR 0 19
66509: IFFALSE 66521
// f := tmp ;
66511: LD_ADDR_VAR 0 12
66515: PUSH
66516: LD_VAR 0 19
66520: ST_TO_ADDR
// end ; x := personel [ i ] ;
66521: LD_ADDR_VAR 0 13
66525: PUSH
66526: LD_VAR 0 6
66530: PUSH
66531: LD_VAR 0 8
66535: ARRAY
66536: ST_TO_ADDR
// if x = - 1 then
66537: LD_VAR 0 13
66541: PUSH
66542: LD_INT 1
66544: NEG
66545: EQUAL
66546: IFFALSE 66757
// begin for j in f do
66548: LD_ADDR_VAR 0 9
66552: PUSH
66553: LD_VAR 0 12
66557: PUSH
66558: FOR_IN
66559: IFFALSE 66753
// repeat InitHc ;
66561: CALL_OW 19
// if GetBType ( j ) = b_barracks then
66565: LD_VAR 0 9
66569: PPUSH
66570: CALL_OW 266
66574: PUSH
66575: LD_INT 5
66577: EQUAL
66578: IFFALSE 66648
// begin if UnitsInside ( j ) < 3 then
66580: LD_VAR 0 9
66584: PPUSH
66585: CALL_OW 313
66589: PUSH
66590: LD_INT 3
66592: LESS
66593: IFFALSE 66629
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
66595: LD_INT 0
66597: PPUSH
66598: LD_INT 5
66600: PUSH
66601: LD_INT 8
66603: PUSH
66604: LD_INT 9
66606: PUSH
66607: EMPTY
66608: LIST
66609: LIST
66610: LIST
66611: PUSH
66612: LD_VAR 0 17
66616: ARRAY
66617: PPUSH
66618: LD_VAR 0 4
66622: PPUSH
66623: CALL_OW 380
66627: GO 66646
// PrepareHuman ( false , i , skill ) ;
66629: LD_INT 0
66631: PPUSH
66632: LD_VAR 0 8
66636: PPUSH
66637: LD_VAR 0 4
66641: PPUSH
66642: CALL_OW 380
// end else
66646: GO 66665
// PrepareHuman ( false , i , skill ) ;
66648: LD_INT 0
66650: PPUSH
66651: LD_VAR 0 8
66655: PPUSH
66656: LD_VAR 0 4
66660: PPUSH
66661: CALL_OW 380
// un := CreateHuman ;
66665: LD_ADDR_VAR 0 14
66669: PUSH
66670: CALL_OW 44
66674: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
66675: LD_ADDR_VAR 0 7
66679: PUSH
66680: LD_VAR 0 7
66684: PPUSH
66685: LD_INT 1
66687: PPUSH
66688: LD_VAR 0 14
66692: PPUSH
66693: CALL_OW 2
66697: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
66698: LD_VAR 0 14
66702: PPUSH
66703: LD_VAR 0 9
66707: PPUSH
66708: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
66712: LD_VAR 0 9
66716: PPUSH
66717: CALL_OW 313
66721: PUSH
66722: LD_INT 6
66724: EQUAL
66725: IFTRUE 66749
66727: PUSH
66728: LD_VAR 0 9
66732: PPUSH
66733: CALL_OW 266
66737: PUSH
66738: LD_INT 32
66740: PUSH
66741: LD_INT 31
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: IN
66748: OR
66749: IFFALSE 66561
66751: GO 66558
66753: POP
66754: POP
// end else
66755: GO 67141
// for j = 1 to x do
66757: LD_ADDR_VAR 0 9
66761: PUSH
66762: DOUBLE
66763: LD_INT 1
66765: DEC
66766: ST_TO_ADDR
66767: LD_VAR 0 13
66771: PUSH
66772: FOR_TO
66773: IFFALSE 67139
// begin InitHc ;
66775: CALL_OW 19
// if not f then
66779: LD_VAR 0 12
66783: NOT
66784: IFFALSE 66873
// begin PrepareHuman ( false , i , skill ) ;
66786: LD_INT 0
66788: PPUSH
66789: LD_VAR 0 8
66793: PPUSH
66794: LD_VAR 0 4
66798: PPUSH
66799: CALL_OW 380
// un := CreateHuman ;
66803: LD_ADDR_VAR 0 14
66807: PUSH
66808: CALL_OW 44
66812: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
66813: LD_ADDR_VAR 0 7
66817: PUSH
66818: LD_VAR 0 7
66822: PPUSH
66823: LD_INT 1
66825: PPUSH
66826: LD_VAR 0 14
66830: PPUSH
66831: CALL_OW 2
66835: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
66836: LD_VAR 0 14
66840: PPUSH
66841: LD_VAR 0 1
66845: PPUSH
66846: CALL_OW 250
66850: PPUSH
66851: LD_VAR 0 1
66855: PPUSH
66856: CALL_OW 251
66860: PPUSH
66861: LD_INT 10
66863: PPUSH
66864: LD_INT 0
66866: PPUSH
66867: CALL_OW 50
// continue ;
66871: GO 66772
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
66873: LD_VAR 0 12
66877: PUSH
66878: LD_INT 1
66880: ARRAY
66881: PPUSH
66882: CALL_OW 313
66886: IFFALSE 66914
66888: PUSH
66889: LD_VAR 0 12
66893: PUSH
66894: LD_INT 1
66896: ARRAY
66897: PPUSH
66898: CALL_OW 266
66902: PUSH
66903: LD_INT 32
66905: PUSH
66906: LD_INT 31
66908: PUSH
66909: EMPTY
66910: LIST
66911: LIST
66912: IN
66913: AND
66914: IFTRUE 66935
66916: PUSH
66917: LD_VAR 0 12
66921: PUSH
66922: LD_INT 1
66924: ARRAY
66925: PPUSH
66926: CALL_OW 313
66930: PUSH
66931: LD_INT 6
66933: EQUAL
66934: OR
66935: IFFALSE 66955
// f := Delete ( f , 1 ) ;
66937: LD_ADDR_VAR 0 12
66941: PUSH
66942: LD_VAR 0 12
66946: PPUSH
66947: LD_INT 1
66949: PPUSH
66950: CALL_OW 3
66954: ST_TO_ADDR
// if not f then
66955: LD_VAR 0 12
66959: NOT
66960: IFFALSE 66978
// begin x := x + 2 ;
66962: LD_ADDR_VAR 0 13
66966: PUSH
66967: LD_VAR 0 13
66971: PUSH
66972: LD_INT 2
66974: PLUS
66975: ST_TO_ADDR
// continue ;
66976: GO 66772
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
66978: LD_VAR 0 12
66982: PUSH
66983: LD_INT 1
66985: ARRAY
66986: PPUSH
66987: CALL_OW 266
66991: PUSH
66992: LD_INT 5
66994: EQUAL
66995: IFFALSE 67069
// begin if UnitsInside ( f [ 1 ] ) < 3 then
66997: LD_VAR 0 12
67001: PUSH
67002: LD_INT 1
67004: ARRAY
67005: PPUSH
67006: CALL_OW 313
67010: PUSH
67011: LD_INT 3
67013: LESS
67014: IFFALSE 67050
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
67016: LD_INT 0
67018: PPUSH
67019: LD_INT 5
67021: PUSH
67022: LD_INT 8
67024: PUSH
67025: LD_INT 9
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: LIST
67032: PUSH
67033: LD_VAR 0 17
67037: ARRAY
67038: PPUSH
67039: LD_VAR 0 4
67043: PPUSH
67044: CALL_OW 380
67048: GO 67067
// PrepareHuman ( false , i , skill ) ;
67050: LD_INT 0
67052: PPUSH
67053: LD_VAR 0 8
67057: PPUSH
67058: LD_VAR 0 4
67062: PPUSH
67063: CALL_OW 380
// end else
67067: GO 67086
// PrepareHuman ( false , i , skill ) ;
67069: LD_INT 0
67071: PPUSH
67072: LD_VAR 0 8
67076: PPUSH
67077: LD_VAR 0 4
67081: PPUSH
67082: CALL_OW 380
// un := CreateHuman ;
67086: LD_ADDR_VAR 0 14
67090: PUSH
67091: CALL_OW 44
67095: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
67096: LD_ADDR_VAR 0 7
67100: PUSH
67101: LD_VAR 0 7
67105: PPUSH
67106: LD_INT 1
67108: PPUSH
67109: LD_VAR 0 14
67113: PPUSH
67114: CALL_OW 2
67118: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
67119: LD_VAR 0 14
67123: PPUSH
67124: LD_VAR 0 12
67128: PUSH
67129: LD_INT 1
67131: ARRAY
67132: PPUSH
67133: CALL_OW 52
// end ;
67137: GO 66772
67139: POP
67140: POP
// end ;
67141: GO 66072
67143: POP
67144: POP
// result := result ^ buildings ;
67145: LD_ADDR_VAR 0 7
67149: PUSH
67150: LD_VAR 0 7
67154: PUSH
67155: LD_VAR 0 18
67159: ADD
67160: ST_TO_ADDR
// end else
67161: GO 67304
// begin for i = 1 to personel do
67163: LD_ADDR_VAR 0 8
67167: PUSH
67168: DOUBLE
67169: LD_INT 1
67171: DEC
67172: ST_TO_ADDR
67173: LD_VAR 0 6
67177: PUSH
67178: FOR_TO
67179: IFFALSE 67302
// begin if i > 4 then
67181: LD_VAR 0 8
67185: PUSH
67186: LD_INT 4
67188: GREATER
67189: IFFALSE 67193
// break ;
67191: GO 67302
// x := personel [ i ] ;
67193: LD_ADDR_VAR 0 13
67197: PUSH
67198: LD_VAR 0 6
67202: PUSH
67203: LD_VAR 0 8
67207: ARRAY
67208: ST_TO_ADDR
// if x = - 1 then
67209: LD_VAR 0 13
67213: PUSH
67214: LD_INT 1
67216: NEG
67217: EQUAL
67218: IFFALSE 67222
// continue ;
67220: GO 67178
// PrepareHuman ( false , i , skill ) ;
67222: LD_INT 0
67224: PPUSH
67225: LD_VAR 0 8
67229: PPUSH
67230: LD_VAR 0 4
67234: PPUSH
67235: CALL_OW 380
// un := CreateHuman ;
67239: LD_ADDR_VAR 0 14
67243: PUSH
67244: CALL_OW 44
67248: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
67249: LD_VAR 0 14
67253: PPUSH
67254: LD_VAR 0 1
67258: PPUSH
67259: CALL_OW 250
67263: PPUSH
67264: LD_VAR 0 1
67268: PPUSH
67269: CALL_OW 251
67273: PPUSH
67274: LD_INT 10
67276: PPUSH
67277: LD_INT 0
67279: PPUSH
67280: CALL_OW 50
// result := result ^ un ;
67284: LD_ADDR_VAR 0 7
67288: PUSH
67289: LD_VAR 0 7
67293: PUSH
67294: LD_VAR 0 14
67298: ADD
67299: ST_TO_ADDR
// end ;
67300: GO 67178
67302: POP
67303: POP
// end ; end ;
67304: LD_VAR 0 7
67308: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
67309: LD_INT 0
67311: PPUSH
67312: PPUSH
67313: PPUSH
67314: PPUSH
67315: PPUSH
67316: PPUSH
67317: PPUSH
67318: PPUSH
67319: PPUSH
67320: PPUSH
67321: PPUSH
67322: PPUSH
67323: PPUSH
67324: PPUSH
67325: PPUSH
67326: PPUSH
// result := false ;
67327: LD_ADDR_VAR 0 3
67331: PUSH
67332: LD_INT 0
67334: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
67335: LD_VAR 0 1
67339: NOT
67340: IFTRUE 67365
67342: PUSH
67343: LD_VAR 0 1
67347: PPUSH
67348: CALL_OW 266
67352: PUSH
67353: LD_INT 32
67355: PUSH
67356: LD_INT 33
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: IN
67363: NOT
67364: OR
67365: IFFALSE 67369
// exit ;
67367: GO 68504
// nat := GetNation ( tower ) ;
67369: LD_ADDR_VAR 0 12
67373: PUSH
67374: LD_VAR 0 1
67378: PPUSH
67379: CALL_OW 248
67383: ST_TO_ADDR
// side := GetSide ( tower ) ;
67384: LD_ADDR_VAR 0 16
67388: PUSH
67389: LD_VAR 0 1
67393: PPUSH
67394: CALL_OW 255
67398: ST_TO_ADDR
// x := GetX ( tower ) ;
67399: LD_ADDR_VAR 0 10
67403: PUSH
67404: LD_VAR 0 1
67408: PPUSH
67409: CALL_OW 250
67413: ST_TO_ADDR
// y := GetY ( tower ) ;
67414: LD_ADDR_VAR 0 11
67418: PUSH
67419: LD_VAR 0 1
67423: PPUSH
67424: CALL_OW 251
67428: ST_TO_ADDR
// if not x or not y then
67429: LD_VAR 0 10
67433: NOT
67434: IFTRUE 67443
67436: PUSH
67437: LD_VAR 0 11
67441: NOT
67442: OR
67443: IFFALSE 67447
// exit ;
67445: GO 68504
// weapon := 0 ;
67447: LD_ADDR_VAR 0 18
67451: PUSH
67452: LD_INT 0
67454: ST_TO_ADDR
// fac_list := [ ] ;
67455: LD_ADDR_VAR 0 17
67459: PUSH
67460: EMPTY
67461: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
67462: LD_ADDR_VAR 0 6
67466: PUSH
67467: LD_VAR 0 1
67471: PPUSH
67472: CALL_OW 274
67476: PPUSH
67477: LD_VAR 0 2
67481: PPUSH
67482: LD_INT 0
67484: PPUSH
67485: CALL 65039 0 3
67489: PPUSH
67490: LD_INT 30
67492: PUSH
67493: LD_INT 3
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PPUSH
67500: CALL_OW 72
67504: ST_TO_ADDR
// if not factories then
67505: LD_VAR 0 6
67509: NOT
67510: IFFALSE 67514
// exit ;
67512: GO 68504
// for i in factories do
67514: LD_ADDR_VAR 0 8
67518: PUSH
67519: LD_VAR 0 6
67523: PUSH
67524: FOR_IN
67525: IFFALSE 67550
// fac_list := fac_list union AvailableWeaponList ( i ) ;
67527: LD_ADDR_VAR 0 17
67531: PUSH
67532: LD_VAR 0 17
67536: PUSH
67537: LD_VAR 0 8
67541: PPUSH
67542: CALL_OW 478
67546: UNION
67547: ST_TO_ADDR
67548: GO 67524
67550: POP
67551: POP
// if not fac_list then
67552: LD_VAR 0 17
67556: NOT
67557: IFFALSE 67561
// exit ;
67559: GO 68504
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
67561: LD_ADDR_VAR 0 5
67565: PUSH
67566: LD_INT 4
67568: PUSH
67569: LD_INT 5
67571: PUSH
67572: LD_INT 9
67574: PUSH
67575: LD_INT 10
67577: PUSH
67578: LD_INT 6
67580: PUSH
67581: LD_INT 7
67583: PUSH
67584: LD_INT 11
67586: PUSH
67587: EMPTY
67588: LIST
67589: LIST
67590: LIST
67591: LIST
67592: LIST
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 27
67598: PUSH
67599: LD_INT 28
67601: PUSH
67602: LD_INT 26
67604: PUSH
67605: LD_INT 30
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: LIST
67612: LIST
67613: PUSH
67614: LD_INT 43
67616: PUSH
67617: LD_INT 44
67619: PUSH
67620: LD_INT 46
67622: PUSH
67623: LD_INT 45
67625: PUSH
67626: LD_INT 47
67628: PUSH
67629: LD_INT 49
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: PUSH
67640: EMPTY
67641: LIST
67642: LIST
67643: LIST
67644: PUSH
67645: LD_VAR 0 12
67649: ARRAY
67650: ST_TO_ADDR
// list := list isect fac_list ;
67651: LD_ADDR_VAR 0 5
67655: PUSH
67656: LD_VAR 0 5
67660: PUSH
67661: LD_VAR 0 17
67665: ISECT
67666: ST_TO_ADDR
// if not list then
67667: LD_VAR 0 5
67671: NOT
67672: IFFALSE 67676
// exit ;
67674: GO 68504
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
67676: LD_VAR 0 12
67680: PUSH
67681: LD_INT 3
67683: EQUAL
67684: IFFALSE 67696
67686: PUSH
67687: LD_INT 49
67689: PUSH
67690: LD_VAR 0 5
67694: IN
67695: AND
67696: IFFALSE 67716
67698: PUSH
67699: LD_INT 31
67701: PPUSH
67702: LD_VAR 0 16
67706: PPUSH
67707: CALL_OW 321
67711: PUSH
67712: LD_INT 2
67714: EQUAL
67715: AND
67716: IFFALSE 67776
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
67718: LD_INT 22
67720: PUSH
67721: LD_VAR 0 16
67725: PUSH
67726: EMPTY
67727: LIST
67728: LIST
67729: PUSH
67730: LD_INT 35
67732: PUSH
67733: LD_INT 49
67735: PUSH
67736: EMPTY
67737: LIST
67738: LIST
67739: PUSH
67740: LD_INT 91
67742: PUSH
67743: LD_VAR 0 1
67747: PUSH
67748: LD_INT 10
67750: PUSH
67751: EMPTY
67752: LIST
67753: LIST
67754: LIST
67755: PUSH
67756: EMPTY
67757: LIST
67758: LIST
67759: LIST
67760: PPUSH
67761: CALL_OW 69
67765: NOT
67766: IFFALSE 67776
// weapon := ru_time_lapser ;
67768: LD_ADDR_VAR 0 18
67772: PUSH
67773: LD_INT 49
67775: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
67776: LD_VAR 0 12
67780: PUSH
67781: LD_INT 1
67783: PUSH
67784: LD_INT 2
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: IN
67791: IFFALSE 67815
67793: PUSH
67794: LD_INT 11
67796: PUSH
67797: LD_VAR 0 5
67801: IN
67802: IFTRUE 67814
67804: PUSH
67805: LD_INT 30
67807: PUSH
67808: LD_VAR 0 5
67812: IN
67813: OR
67814: AND
67815: IFFALSE 67835
67817: PUSH
67818: LD_INT 6
67820: PPUSH
67821: LD_VAR 0 16
67825: PPUSH
67826: CALL_OW 321
67830: PUSH
67831: LD_INT 2
67833: EQUAL
67834: AND
67835: IFFALSE 68002
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
67837: LD_INT 22
67839: PUSH
67840: LD_VAR 0 16
67844: PUSH
67845: EMPTY
67846: LIST
67847: LIST
67848: PUSH
67849: LD_INT 2
67851: PUSH
67852: LD_INT 35
67854: PUSH
67855: LD_INT 11
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 35
67864: PUSH
67865: LD_INT 30
67867: PUSH
67868: EMPTY
67869: LIST
67870: LIST
67871: PUSH
67872: EMPTY
67873: LIST
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 91
67879: PUSH
67880: LD_VAR 0 1
67884: PUSH
67885: LD_INT 18
67887: PUSH
67888: EMPTY
67889: LIST
67890: LIST
67891: LIST
67892: PUSH
67893: EMPTY
67894: LIST
67895: LIST
67896: LIST
67897: PPUSH
67898: CALL_OW 69
67902: NOT
67903: IFFALSE 67979
67905: PUSH
67906: LD_INT 22
67908: PUSH
67909: LD_VAR 0 16
67913: PUSH
67914: EMPTY
67915: LIST
67916: LIST
67917: PUSH
67918: LD_INT 2
67920: PUSH
67921: LD_INT 30
67923: PUSH
67924: LD_INT 32
67926: PUSH
67927: EMPTY
67928: LIST
67929: LIST
67930: PUSH
67931: LD_INT 30
67933: PUSH
67934: LD_INT 33
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: EMPTY
67942: LIST
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 91
67948: PUSH
67949: LD_VAR 0 1
67953: PUSH
67954: LD_INT 12
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: LIST
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: LIST
67966: PUSH
67967: EMPTY
67968: LIST
67969: PPUSH
67970: CALL_OW 69
67974: PUSH
67975: LD_INT 2
67977: GREATER
67978: AND
67979: IFFALSE 68002
// weapon := [ us_radar , ar_radar ] [ nat ] ;
67981: LD_ADDR_VAR 0 18
67985: PUSH
67986: LD_INT 11
67988: PUSH
67989: LD_INT 30
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_VAR 0 12
68000: ARRAY
68001: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
68002: LD_VAR 0 18
68006: NOT
68007: IFFALSE 68027
68009: PUSH
68010: LD_INT 40
68012: PPUSH
68013: LD_VAR 0 16
68017: PPUSH
68018: CALL_OW 321
68022: PUSH
68023: LD_INT 2
68025: EQUAL
68026: AND
68027: IFFALSE 68063
68029: PUSH
68030: LD_INT 7
68032: PUSH
68033: LD_VAR 0 5
68037: IN
68038: IFTRUE 68050
68040: PUSH
68041: LD_INT 28
68043: PUSH
68044: LD_VAR 0 5
68048: IN
68049: OR
68050: IFTRUE 68062
68052: PUSH
68053: LD_INT 45
68055: PUSH
68056: LD_VAR 0 5
68060: IN
68061: OR
68062: AND
68063: IFFALSE 68317
// begin hex := GetHexInfo ( x , y ) ;
68065: LD_ADDR_VAR 0 4
68069: PUSH
68070: LD_VAR 0 10
68074: PPUSH
68075: LD_VAR 0 11
68079: PPUSH
68080: CALL_OW 546
68084: ST_TO_ADDR
// if hex [ 1 ] then
68085: LD_VAR 0 4
68089: PUSH
68090: LD_INT 1
68092: ARRAY
68093: IFFALSE 68097
// exit ;
68095: GO 68504
// height := hex [ 2 ] ;
68097: LD_ADDR_VAR 0 15
68101: PUSH
68102: LD_VAR 0 4
68106: PUSH
68107: LD_INT 2
68109: ARRAY
68110: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
68111: LD_ADDR_VAR 0 14
68115: PUSH
68116: LD_INT 0
68118: PUSH
68119: LD_INT 2
68121: PUSH
68122: LD_INT 3
68124: PUSH
68125: LD_INT 5
68127: PUSH
68128: EMPTY
68129: LIST
68130: LIST
68131: LIST
68132: LIST
68133: ST_TO_ADDR
// for i in tmp do
68134: LD_ADDR_VAR 0 8
68138: PUSH
68139: LD_VAR 0 14
68143: PUSH
68144: FOR_IN
68145: IFFALSE 68315
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
68147: LD_ADDR_VAR 0 9
68151: PUSH
68152: LD_VAR 0 10
68156: PPUSH
68157: LD_VAR 0 8
68161: PPUSH
68162: LD_INT 5
68164: PPUSH
68165: CALL_OW 272
68169: PUSH
68170: LD_VAR 0 11
68174: PPUSH
68175: LD_VAR 0 8
68179: PPUSH
68180: LD_INT 5
68182: PPUSH
68183: CALL_OW 273
68187: PUSH
68188: EMPTY
68189: LIST
68190: LIST
68191: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
68192: LD_VAR 0 9
68196: PUSH
68197: LD_INT 1
68199: ARRAY
68200: PPUSH
68201: LD_VAR 0 9
68205: PUSH
68206: LD_INT 2
68208: ARRAY
68209: PPUSH
68210: CALL_OW 488
68214: IFFALSE 68313
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
68216: LD_ADDR_VAR 0 4
68220: PUSH
68221: LD_VAR 0 9
68225: PUSH
68226: LD_INT 1
68228: ARRAY
68229: PPUSH
68230: LD_VAR 0 9
68234: PUSH
68235: LD_INT 2
68237: ARRAY
68238: PPUSH
68239: CALL_OW 546
68243: ST_TO_ADDR
// if hex [ 1 ] then
68244: LD_VAR 0 4
68248: PUSH
68249: LD_INT 1
68251: ARRAY
68252: IFFALSE 68256
// continue ;
68254: GO 68144
// h := hex [ 2 ] ;
68256: LD_ADDR_VAR 0 13
68260: PUSH
68261: LD_VAR 0 4
68265: PUSH
68266: LD_INT 2
68268: ARRAY
68269: ST_TO_ADDR
// if h + 7 < height then
68270: LD_VAR 0 13
68274: PUSH
68275: LD_INT 7
68277: PLUS
68278: PUSH
68279: LD_VAR 0 15
68283: LESS
68284: IFFALSE 68313
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
68286: LD_ADDR_VAR 0 18
68290: PUSH
68291: LD_INT 7
68293: PUSH
68294: LD_INT 28
68296: PUSH
68297: LD_INT 45
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: LIST
68304: PUSH
68305: LD_VAR 0 12
68309: ARRAY
68310: ST_TO_ADDR
// break ;
68311: GO 68315
// end ; end ; end ;
68313: GO 68144
68315: POP
68316: POP
// end ; if not weapon then
68317: LD_VAR 0 18
68321: NOT
68322: IFFALSE 68382
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
68324: LD_ADDR_VAR 0 5
68328: PUSH
68329: LD_VAR 0 5
68333: PUSH
68334: LD_INT 11
68336: PUSH
68337: LD_INT 30
68339: PUSH
68340: LD_INT 49
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: LIST
68347: DIFF
68348: ST_TO_ADDR
// if not list then
68349: LD_VAR 0 5
68353: NOT
68354: IFFALSE 68358
// exit ;
68356: GO 68504
// weapon := list [ rand ( 1 , list ) ] ;
68358: LD_ADDR_VAR 0 18
68362: PUSH
68363: LD_VAR 0 5
68367: PUSH
68368: LD_INT 1
68370: PPUSH
68371: LD_VAR 0 5
68375: PPUSH
68376: CALL_OW 12
68380: ARRAY
68381: ST_TO_ADDR
// end ; if weapon then
68382: LD_VAR 0 18
68386: IFFALSE 68504
// begin tmp := CostOfWeapon ( weapon ) ;
68388: LD_ADDR_VAR 0 14
68392: PUSH
68393: LD_VAR 0 18
68397: PPUSH
68398: CALL_OW 451
68402: ST_TO_ADDR
// j := GetBase ( tower ) ;
68403: LD_ADDR_VAR 0 9
68407: PUSH
68408: LD_VAR 0 1
68412: PPUSH
68413: CALL_OW 274
68417: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
68418: LD_VAR 0 9
68422: PPUSH
68423: LD_INT 1
68425: PPUSH
68426: CALL_OW 275
68430: PUSH
68431: LD_VAR 0 14
68435: PUSH
68436: LD_INT 1
68438: ARRAY
68439: GREATEREQUAL
68440: IFFALSE 68466
68442: PUSH
68443: LD_VAR 0 9
68447: PPUSH
68448: LD_INT 2
68450: PPUSH
68451: CALL_OW 275
68455: PUSH
68456: LD_VAR 0 14
68460: PUSH
68461: LD_INT 2
68463: ARRAY
68464: GREATEREQUAL
68465: AND
68466: IFFALSE 68492
68468: PUSH
68469: LD_VAR 0 9
68473: PPUSH
68474: LD_INT 3
68476: PPUSH
68477: CALL_OW 275
68481: PUSH
68482: LD_VAR 0 14
68486: PUSH
68487: LD_INT 3
68489: ARRAY
68490: GREATEREQUAL
68491: AND
68492: IFFALSE 68504
// result := weapon ;
68494: LD_ADDR_VAR 0 3
68498: PUSH
68499: LD_VAR 0 18
68503: ST_TO_ADDR
// end ; end ;
68504: LD_VAR 0 3
68508: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
68509: LD_INT 0
68511: PPUSH
68512: PPUSH
// result := true ;
68513: LD_ADDR_VAR 0 3
68517: PUSH
68518: LD_INT 1
68520: ST_TO_ADDR
// if array1 = array2 then
68521: LD_VAR 0 1
68525: PUSH
68526: LD_VAR 0 2
68530: EQUAL
68531: IFFALSE 68591
// begin for i = 1 to array1 do
68533: LD_ADDR_VAR 0 4
68537: PUSH
68538: DOUBLE
68539: LD_INT 1
68541: DEC
68542: ST_TO_ADDR
68543: LD_VAR 0 1
68547: PUSH
68548: FOR_TO
68549: IFFALSE 68587
// if array1 [ i ] <> array2 [ i ] then
68551: LD_VAR 0 1
68555: PUSH
68556: LD_VAR 0 4
68560: ARRAY
68561: PUSH
68562: LD_VAR 0 2
68566: PUSH
68567: LD_VAR 0 4
68571: ARRAY
68572: NONEQUAL
68573: IFFALSE 68585
// begin result := false ;
68575: LD_ADDR_VAR 0 3
68579: PUSH
68580: LD_INT 0
68582: ST_TO_ADDR
// break ;
68583: GO 68587
// end ;
68585: GO 68548
68587: POP
68588: POP
// end else
68589: GO 68599
// result := false ;
68591: LD_ADDR_VAR 0 3
68595: PUSH
68596: LD_INT 0
68598: ST_TO_ADDR
// end ;
68599: LD_VAR 0 3
68603: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
68604: LD_INT 0
68606: PPUSH
68607: PPUSH
// if not array1 or not array2 then
68608: LD_VAR 0 1
68612: NOT
68613: IFTRUE 68622
68615: PUSH
68616: LD_VAR 0 2
68620: NOT
68621: OR
68622: IFFALSE 68626
// exit ;
68624: GO 68690
// result := true ;
68626: LD_ADDR_VAR 0 3
68630: PUSH
68631: LD_INT 1
68633: ST_TO_ADDR
// for i = 1 to array1 do
68634: LD_ADDR_VAR 0 4
68638: PUSH
68639: DOUBLE
68640: LD_INT 1
68642: DEC
68643: ST_TO_ADDR
68644: LD_VAR 0 1
68648: PUSH
68649: FOR_TO
68650: IFFALSE 68688
// if array1 [ i ] <> array2 [ i ] then
68652: LD_VAR 0 1
68656: PUSH
68657: LD_VAR 0 4
68661: ARRAY
68662: PUSH
68663: LD_VAR 0 2
68667: PUSH
68668: LD_VAR 0 4
68672: ARRAY
68673: NONEQUAL
68674: IFFALSE 68686
// begin result := false ;
68676: LD_ADDR_VAR 0 3
68680: PUSH
68681: LD_INT 0
68683: ST_TO_ADDR
// break ;
68684: GO 68688
// end ;
68686: GO 68649
68688: POP
68689: POP
// end ;
68690: LD_VAR 0 3
68694: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
68695: LD_INT 0
68697: PPUSH
68698: PPUSH
68699: PPUSH
// pom := GetBase ( fac ) ;
68700: LD_ADDR_VAR 0 5
68704: PUSH
68705: LD_VAR 0 1
68709: PPUSH
68710: CALL_OW 274
68714: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
68715: LD_ADDR_VAR 0 4
68719: PUSH
68720: LD_VAR 0 2
68724: PUSH
68725: LD_INT 1
68727: ARRAY
68728: PPUSH
68729: LD_VAR 0 2
68733: PUSH
68734: LD_INT 2
68736: ARRAY
68737: PPUSH
68738: LD_VAR 0 2
68742: PUSH
68743: LD_INT 3
68745: ARRAY
68746: PPUSH
68747: LD_VAR 0 2
68751: PUSH
68752: LD_INT 4
68754: ARRAY
68755: PPUSH
68756: CALL_OW 449
68760: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
68761: LD_ADDR_VAR 0 3
68765: PUSH
68766: LD_VAR 0 5
68770: PPUSH
68771: LD_INT 1
68773: PPUSH
68774: CALL_OW 275
68778: PUSH
68779: LD_VAR 0 4
68783: PUSH
68784: LD_INT 1
68786: ARRAY
68787: GREATEREQUAL
68788: IFFALSE 68814
68790: PUSH
68791: LD_VAR 0 5
68795: PPUSH
68796: LD_INT 2
68798: PPUSH
68799: CALL_OW 275
68803: PUSH
68804: LD_VAR 0 4
68808: PUSH
68809: LD_INT 2
68811: ARRAY
68812: GREATEREQUAL
68813: AND
68814: IFFALSE 68840
68816: PUSH
68817: LD_VAR 0 5
68821: PPUSH
68822: LD_INT 3
68824: PPUSH
68825: CALL_OW 275
68829: PUSH
68830: LD_VAR 0 4
68834: PUSH
68835: LD_INT 3
68837: ARRAY
68838: GREATEREQUAL
68839: AND
68840: ST_TO_ADDR
// end ;
68841: LD_VAR 0 3
68845: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
68846: LD_INT 0
68848: PPUSH
68849: PPUSH
68850: PPUSH
68851: PPUSH
// pom := GetBase ( building ) ;
68852: LD_ADDR_VAR 0 3
68856: PUSH
68857: LD_VAR 0 1
68861: PPUSH
68862: CALL_OW 274
68866: ST_TO_ADDR
// if not pom then
68867: LD_VAR 0 3
68871: NOT
68872: IFFALSE 68876
// exit ;
68874: GO 69050
// btype := GetBType ( building ) ;
68876: LD_ADDR_VAR 0 5
68880: PUSH
68881: LD_VAR 0 1
68885: PPUSH
68886: CALL_OW 266
68890: ST_TO_ADDR
// if btype = b_armoury then
68891: LD_VAR 0 5
68895: PUSH
68896: LD_INT 4
68898: EQUAL
68899: IFFALSE 68909
// btype := b_barracks ;
68901: LD_ADDR_VAR 0 5
68905: PUSH
68906: LD_INT 5
68908: ST_TO_ADDR
// if btype = b_depot then
68909: LD_VAR 0 5
68913: PUSH
68914: LD_INT 0
68916: EQUAL
68917: IFFALSE 68927
// btype := b_warehouse ;
68919: LD_ADDR_VAR 0 5
68923: PUSH
68924: LD_INT 1
68926: ST_TO_ADDR
// if btype = b_workshop then
68927: LD_VAR 0 5
68931: PUSH
68932: LD_INT 2
68934: EQUAL
68935: IFFALSE 68945
// btype := b_factory ;
68937: LD_ADDR_VAR 0 5
68941: PUSH
68942: LD_INT 3
68944: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
68945: LD_ADDR_VAR 0 4
68949: PUSH
68950: LD_VAR 0 5
68954: PPUSH
68955: LD_VAR 0 1
68959: PPUSH
68960: CALL_OW 248
68964: PPUSH
68965: CALL_OW 450
68969: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
68970: LD_ADDR_VAR 0 2
68974: PUSH
68975: LD_VAR 0 3
68979: PPUSH
68980: LD_INT 1
68982: PPUSH
68983: CALL_OW 275
68987: PUSH
68988: LD_VAR 0 4
68992: PUSH
68993: LD_INT 1
68995: ARRAY
68996: GREATEREQUAL
68997: IFFALSE 69023
68999: PUSH
69000: LD_VAR 0 3
69004: PPUSH
69005: LD_INT 2
69007: PPUSH
69008: CALL_OW 275
69012: PUSH
69013: LD_VAR 0 4
69017: PUSH
69018: LD_INT 2
69020: ARRAY
69021: GREATEREQUAL
69022: AND
69023: IFFALSE 69049
69025: PUSH
69026: LD_VAR 0 3
69030: PPUSH
69031: LD_INT 3
69033: PPUSH
69034: CALL_OW 275
69038: PUSH
69039: LD_VAR 0 4
69043: PUSH
69044: LD_INT 3
69046: ARRAY
69047: GREATEREQUAL
69048: AND
69049: ST_TO_ADDR
// end ;
69050: LD_VAR 0 2
69054: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
69055: LD_INT 0
69057: PPUSH
69058: PPUSH
69059: PPUSH
// pom := GetBase ( building ) ;
69060: LD_ADDR_VAR 0 4
69064: PUSH
69065: LD_VAR 0 1
69069: PPUSH
69070: CALL_OW 274
69074: ST_TO_ADDR
// if not pom then
69075: LD_VAR 0 4
69079: NOT
69080: IFFALSE 69084
// exit ;
69082: GO 69189
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
69084: LD_ADDR_VAR 0 5
69088: PUSH
69089: LD_VAR 0 2
69093: PPUSH
69094: LD_VAR 0 1
69098: PPUSH
69099: CALL_OW 248
69103: PPUSH
69104: CALL_OW 450
69108: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
69109: LD_ADDR_VAR 0 3
69113: PUSH
69114: LD_VAR 0 4
69118: PPUSH
69119: LD_INT 1
69121: PPUSH
69122: CALL_OW 275
69126: PUSH
69127: LD_VAR 0 5
69131: PUSH
69132: LD_INT 1
69134: ARRAY
69135: GREATEREQUAL
69136: IFFALSE 69162
69138: PUSH
69139: LD_VAR 0 4
69143: PPUSH
69144: LD_INT 2
69146: PPUSH
69147: CALL_OW 275
69151: PUSH
69152: LD_VAR 0 5
69156: PUSH
69157: LD_INT 2
69159: ARRAY
69160: GREATEREQUAL
69161: AND
69162: IFFALSE 69188
69164: PUSH
69165: LD_VAR 0 4
69169: PPUSH
69170: LD_INT 3
69172: PPUSH
69173: CALL_OW 275
69177: PUSH
69178: LD_VAR 0 5
69182: PUSH
69183: LD_INT 3
69185: ARRAY
69186: GREATEREQUAL
69187: AND
69188: ST_TO_ADDR
// end ;
69189: LD_VAR 0 3
69193: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
69194: LD_INT 0
69196: PPUSH
69197: PPUSH
69198: PPUSH
69199: PPUSH
69200: PPUSH
69201: PPUSH
69202: PPUSH
69203: PPUSH
69204: PPUSH
69205: PPUSH
69206: PPUSH
// result := false ;
69207: LD_ADDR_VAR 0 8
69211: PUSH
69212: LD_INT 0
69214: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
69215: LD_VAR 0 5
69219: NOT
69220: IFTRUE 69229
69222: PUSH
69223: LD_VAR 0 1
69227: NOT
69228: OR
69229: IFTRUE 69238
69231: PUSH
69232: LD_VAR 0 2
69236: NOT
69237: OR
69238: IFTRUE 69247
69240: PUSH
69241: LD_VAR 0 3
69245: NOT
69246: OR
69247: IFFALSE 69251
// exit ;
69249: GO 70077
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
69251: LD_ADDR_VAR 0 14
69255: PUSH
69256: LD_VAR 0 1
69260: PPUSH
69261: LD_VAR 0 2
69265: PPUSH
69266: LD_VAR 0 3
69270: PPUSH
69271: LD_VAR 0 4
69275: PPUSH
69276: LD_VAR 0 5
69280: PUSH
69281: LD_INT 1
69283: ARRAY
69284: PPUSH
69285: CALL_OW 248
69289: PPUSH
69290: LD_INT 0
69292: PPUSH
69293: CALL 71358 0 6
69297: ST_TO_ADDR
// if not hexes then
69298: LD_VAR 0 14
69302: NOT
69303: IFFALSE 69307
// exit ;
69305: GO 70077
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
69307: LD_ADDR_VAR 0 17
69311: PUSH
69312: LD_VAR 0 5
69316: PPUSH
69317: LD_INT 22
69319: PUSH
69320: LD_VAR 0 13
69324: PPUSH
69325: CALL_OW 255
69329: PUSH
69330: EMPTY
69331: LIST
69332: LIST
69333: PUSH
69334: LD_INT 2
69336: PUSH
69337: LD_INT 30
69339: PUSH
69340: LD_INT 0
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 30
69349: PUSH
69350: LD_INT 1
69352: PUSH
69353: EMPTY
69354: LIST
69355: LIST
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: LIST
69361: PUSH
69362: EMPTY
69363: LIST
69364: LIST
69365: PPUSH
69366: CALL_OW 72
69370: ST_TO_ADDR
// for i = 1 to hexes do
69371: LD_ADDR_VAR 0 9
69375: PUSH
69376: DOUBLE
69377: LD_INT 1
69379: DEC
69380: ST_TO_ADDR
69381: LD_VAR 0 14
69385: PUSH
69386: FOR_TO
69387: IFFALSE 70075
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69389: LD_ADDR_VAR 0 13
69393: PUSH
69394: LD_VAR 0 14
69398: PUSH
69399: LD_VAR 0 9
69403: ARRAY
69404: PUSH
69405: LD_INT 1
69407: ARRAY
69408: PPUSH
69409: LD_VAR 0 14
69413: PUSH
69414: LD_VAR 0 9
69418: ARRAY
69419: PUSH
69420: LD_INT 2
69422: ARRAY
69423: PPUSH
69424: CALL_OW 428
69428: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
69429: LD_VAR 0 14
69433: PUSH
69434: LD_VAR 0 9
69438: ARRAY
69439: PUSH
69440: LD_INT 1
69442: ARRAY
69443: PPUSH
69444: LD_VAR 0 14
69448: PUSH
69449: LD_VAR 0 9
69453: ARRAY
69454: PUSH
69455: LD_INT 2
69457: ARRAY
69458: PPUSH
69459: CALL_OW 351
69463: IFTRUE 69502
69465: PUSH
69466: LD_VAR 0 14
69470: PUSH
69471: LD_VAR 0 9
69475: ARRAY
69476: PUSH
69477: LD_INT 1
69479: ARRAY
69480: PPUSH
69481: LD_VAR 0 14
69485: PUSH
69486: LD_VAR 0 9
69490: ARRAY
69491: PUSH
69492: LD_INT 2
69494: ARRAY
69495: PPUSH
69496: CALL_OW 488
69500: NOT
69501: OR
69502: IFTRUE 69519
69504: PUSH
69505: LD_VAR 0 13
69509: PPUSH
69510: CALL_OW 247
69514: PUSH
69515: LD_INT 3
69517: EQUAL
69518: OR
69519: IFFALSE 69525
// exit ;
69521: POP
69522: POP
69523: GO 70077
// if not tmp then
69525: LD_VAR 0 13
69529: NOT
69530: IFFALSE 69534
// continue ;
69532: GO 69386
// result := true ;
69534: LD_ADDR_VAR 0 8
69538: PUSH
69539: LD_INT 1
69541: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
69542: LD_VAR 0 6
69546: IFFALSE 69563
69548: PUSH
69549: LD_VAR 0 13
69553: PPUSH
69554: CALL_OW 247
69558: PUSH
69559: LD_INT 2
69561: EQUAL
69562: AND
69563: IFFALSE 69580
69565: PUSH
69566: LD_VAR 0 13
69570: PPUSH
69571: CALL_OW 263
69575: PUSH
69576: LD_INT 1
69578: EQUAL
69579: AND
69580: IFFALSE 69744
// begin if IsDrivenBy ( tmp ) then
69582: LD_VAR 0 13
69586: PPUSH
69587: CALL_OW 311
69591: IFFALSE 69595
// continue ;
69593: GO 69386
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
69595: LD_VAR 0 6
69599: PPUSH
69600: LD_INT 3
69602: PUSH
69603: LD_INT 60
69605: PUSH
69606: EMPTY
69607: LIST
69608: PUSH
69609: EMPTY
69610: LIST
69611: LIST
69612: PUSH
69613: LD_INT 3
69615: PUSH
69616: LD_INT 55
69618: PUSH
69619: EMPTY
69620: LIST
69621: PUSH
69622: EMPTY
69623: LIST
69624: LIST
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PPUSH
69630: CALL_OW 72
69634: IFFALSE 69742
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
69636: LD_ADDR_VAR 0 18
69640: PUSH
69641: LD_VAR 0 6
69645: PPUSH
69646: LD_INT 3
69648: PUSH
69649: LD_INT 60
69651: PUSH
69652: EMPTY
69653: LIST
69654: PUSH
69655: EMPTY
69656: LIST
69657: LIST
69658: PUSH
69659: LD_INT 3
69661: PUSH
69662: LD_INT 55
69664: PUSH
69665: EMPTY
69666: LIST
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PPUSH
69676: CALL_OW 72
69680: PUSH
69681: LD_INT 1
69683: ARRAY
69684: ST_TO_ADDR
// if IsInUnit ( driver ) then
69685: LD_VAR 0 18
69689: PPUSH
69690: CALL_OW 310
69694: IFFALSE 69705
// ComExit ( driver ) ;
69696: LD_VAR 0 18
69700: PPUSH
69701: CALL 95358 0 1
// AddComEnterUnit ( driver , tmp ) ;
69705: LD_VAR 0 18
69709: PPUSH
69710: LD_VAR 0 13
69714: PPUSH
69715: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
69719: LD_VAR 0 18
69723: PPUSH
69724: LD_VAR 0 7
69728: PPUSH
69729: CALL_OW 173
// AddComExitVehicle ( driver ) ;
69733: LD_VAR 0 18
69737: PPUSH
69738: CALL_OW 181
// end ; continue ;
69742: GO 69386
// end ; if not cleaners or not tmp in cleaners then
69744: LD_VAR 0 6
69748: NOT
69749: IFTRUE 69764
69751: PUSH
69752: LD_VAR 0 13
69756: PUSH
69757: LD_VAR 0 6
69761: IN
69762: NOT
69763: OR
69764: IFFALSE 70073
// begin if dep then
69766: LD_VAR 0 17
69770: IFFALSE 69906
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
69772: LD_ADDR_VAR 0 16
69776: PUSH
69777: LD_VAR 0 17
69781: PUSH
69782: LD_INT 1
69784: ARRAY
69785: PPUSH
69786: CALL_OW 250
69790: PPUSH
69791: LD_VAR 0 17
69795: PUSH
69796: LD_INT 1
69798: ARRAY
69799: PPUSH
69800: CALL_OW 254
69804: PPUSH
69805: LD_INT 5
69807: PPUSH
69808: CALL_OW 272
69812: PUSH
69813: LD_VAR 0 17
69817: PUSH
69818: LD_INT 1
69820: ARRAY
69821: PPUSH
69822: CALL_OW 251
69826: PPUSH
69827: LD_VAR 0 17
69831: PUSH
69832: LD_INT 1
69834: ARRAY
69835: PPUSH
69836: CALL_OW 254
69840: PPUSH
69841: LD_INT 5
69843: PPUSH
69844: CALL_OW 273
69848: PUSH
69849: EMPTY
69850: LIST
69851: LIST
69852: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
69853: LD_VAR 0 16
69857: PUSH
69858: LD_INT 1
69860: ARRAY
69861: PPUSH
69862: LD_VAR 0 16
69866: PUSH
69867: LD_INT 2
69869: ARRAY
69870: PPUSH
69871: CALL_OW 488
69875: IFFALSE 69906
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
69877: LD_VAR 0 13
69881: PPUSH
69882: LD_VAR 0 16
69886: PUSH
69887: LD_INT 1
69889: ARRAY
69890: PPUSH
69891: LD_VAR 0 16
69895: PUSH
69896: LD_INT 2
69898: ARRAY
69899: PPUSH
69900: CALL_OW 111
// continue ;
69904: GO 69386
// end ; end ; r := GetDir ( tmp ) ;
69906: LD_ADDR_VAR 0 15
69910: PUSH
69911: LD_VAR 0 13
69915: PPUSH
69916: CALL_OW 254
69920: ST_TO_ADDR
// if r = 5 then
69921: LD_VAR 0 15
69925: PUSH
69926: LD_INT 5
69928: EQUAL
69929: IFFALSE 69939
// r := 0 ;
69931: LD_ADDR_VAR 0 15
69935: PUSH
69936: LD_INT 0
69938: ST_TO_ADDR
// for j = r to 5 do
69939: LD_ADDR_VAR 0 10
69943: PUSH
69944: DOUBLE
69945: LD_VAR 0 15
69949: DEC
69950: ST_TO_ADDR
69951: LD_INT 5
69953: PUSH
69954: FOR_TO
69955: IFFALSE 70071
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
69957: LD_ADDR_VAR 0 11
69961: PUSH
69962: LD_VAR 0 13
69966: PPUSH
69967: CALL_OW 250
69971: PPUSH
69972: LD_VAR 0 10
69976: PPUSH
69977: LD_INT 2
69979: PPUSH
69980: CALL_OW 272
69984: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
69985: LD_ADDR_VAR 0 12
69989: PUSH
69990: LD_VAR 0 13
69994: PPUSH
69995: CALL_OW 251
69999: PPUSH
70000: LD_VAR 0 10
70004: PPUSH
70005: LD_INT 2
70007: PPUSH
70008: CALL_OW 273
70012: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
70013: LD_VAR 0 11
70017: PPUSH
70018: LD_VAR 0 12
70022: PPUSH
70023: CALL_OW 488
70027: IFFALSE 70046
70029: PUSH
70030: LD_VAR 0 11
70034: PPUSH
70035: LD_VAR 0 12
70039: PPUSH
70040: CALL_OW 428
70044: NOT
70045: AND
70046: IFFALSE 70069
// begin ComMoveXY ( tmp , _x , _y ) ;
70048: LD_VAR 0 13
70052: PPUSH
70053: LD_VAR 0 11
70057: PPUSH
70058: LD_VAR 0 12
70062: PPUSH
70063: CALL_OW 111
// break ;
70067: GO 70071
// end ; end ;
70069: GO 69954
70071: POP
70072: POP
// end ; end ;
70073: GO 69386
70075: POP
70076: POP
// end ;
70077: LD_VAR 0 8
70081: RET
// export function BuildingTechInvented ( side , btype ) ; begin
70082: LD_INT 0
70084: PPUSH
// result := true ;
70085: LD_ADDR_VAR 0 3
70089: PUSH
70090: LD_INT 1
70092: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
70093: LD_VAR 0 2
70097: PUSH
70098: LD_INT 24
70100: DOUBLE
70101: EQUAL
70102: IFTRUE 70112
70104: LD_INT 33
70106: DOUBLE
70107: EQUAL
70108: IFTRUE 70112
70110: GO 70137
70112: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
70113: LD_ADDR_VAR 0 3
70117: PUSH
70118: LD_INT 32
70120: PPUSH
70121: LD_VAR 0 1
70125: PPUSH
70126: CALL_OW 321
70130: PUSH
70131: LD_INT 2
70133: EQUAL
70134: ST_TO_ADDR
70135: GO 70453
70137: LD_INT 20
70139: DOUBLE
70140: EQUAL
70141: IFTRUE 70145
70143: GO 70170
70145: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
70146: LD_ADDR_VAR 0 3
70150: PUSH
70151: LD_INT 6
70153: PPUSH
70154: LD_VAR 0 1
70158: PPUSH
70159: CALL_OW 321
70163: PUSH
70164: LD_INT 2
70166: EQUAL
70167: ST_TO_ADDR
70168: GO 70453
70170: LD_INT 22
70172: DOUBLE
70173: EQUAL
70174: IFTRUE 70184
70176: LD_INT 36
70178: DOUBLE
70179: EQUAL
70180: IFTRUE 70184
70182: GO 70209
70184: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
70185: LD_ADDR_VAR 0 3
70189: PUSH
70190: LD_INT 15
70192: PPUSH
70193: LD_VAR 0 1
70197: PPUSH
70198: CALL_OW 321
70202: PUSH
70203: LD_INT 2
70205: EQUAL
70206: ST_TO_ADDR
70207: GO 70453
70209: LD_INT 30
70211: DOUBLE
70212: EQUAL
70213: IFTRUE 70217
70215: GO 70242
70217: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
70218: LD_ADDR_VAR 0 3
70222: PUSH
70223: LD_INT 20
70225: PPUSH
70226: LD_VAR 0 1
70230: PPUSH
70231: CALL_OW 321
70235: PUSH
70236: LD_INT 2
70238: EQUAL
70239: ST_TO_ADDR
70240: GO 70453
70242: LD_INT 28
70244: DOUBLE
70245: EQUAL
70246: IFTRUE 70256
70248: LD_INT 21
70250: DOUBLE
70251: EQUAL
70252: IFTRUE 70256
70254: GO 70281
70256: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
70257: LD_ADDR_VAR 0 3
70261: PUSH
70262: LD_INT 21
70264: PPUSH
70265: LD_VAR 0 1
70269: PPUSH
70270: CALL_OW 321
70274: PUSH
70275: LD_INT 2
70277: EQUAL
70278: ST_TO_ADDR
70279: GO 70453
70281: LD_INT 16
70283: DOUBLE
70284: EQUAL
70285: IFTRUE 70289
70287: GO 70314
70289: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
70290: LD_ADDR_VAR 0 3
70294: PUSH
70295: LD_INT 84
70297: PPUSH
70298: LD_VAR 0 1
70302: PPUSH
70303: CALL_OW 321
70307: PUSH
70308: LD_INT 2
70310: EQUAL
70311: ST_TO_ADDR
70312: GO 70453
70314: LD_INT 19
70316: DOUBLE
70317: EQUAL
70318: IFTRUE 70328
70320: LD_INT 23
70322: DOUBLE
70323: EQUAL
70324: IFTRUE 70328
70326: GO 70353
70328: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
70329: LD_ADDR_VAR 0 3
70333: PUSH
70334: LD_INT 83
70336: PPUSH
70337: LD_VAR 0 1
70341: PPUSH
70342: CALL_OW 321
70346: PUSH
70347: LD_INT 2
70349: EQUAL
70350: ST_TO_ADDR
70351: GO 70453
70353: LD_INT 17
70355: DOUBLE
70356: EQUAL
70357: IFTRUE 70361
70359: GO 70386
70361: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
70362: LD_ADDR_VAR 0 3
70366: PUSH
70367: LD_INT 39
70369: PPUSH
70370: LD_VAR 0 1
70374: PPUSH
70375: CALL_OW 321
70379: PUSH
70380: LD_INT 2
70382: EQUAL
70383: ST_TO_ADDR
70384: GO 70453
70386: LD_INT 18
70388: DOUBLE
70389: EQUAL
70390: IFTRUE 70394
70392: GO 70419
70394: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
70395: LD_ADDR_VAR 0 3
70399: PUSH
70400: LD_INT 40
70402: PPUSH
70403: LD_VAR 0 1
70407: PPUSH
70408: CALL_OW 321
70412: PUSH
70413: LD_INT 2
70415: EQUAL
70416: ST_TO_ADDR
70417: GO 70453
70419: LD_INT 27
70421: DOUBLE
70422: EQUAL
70423: IFTRUE 70427
70425: GO 70452
70427: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
70428: LD_ADDR_VAR 0 3
70432: PUSH
70433: LD_INT 35
70435: PPUSH
70436: LD_VAR 0 1
70440: PPUSH
70441: CALL_OW 321
70445: PUSH
70446: LD_INT 2
70448: EQUAL
70449: ST_TO_ADDR
70450: GO 70453
70452: POP
// end ;
70453: LD_VAR 0 3
70457: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
70458: LD_INT 0
70460: PPUSH
70461: PPUSH
70462: PPUSH
70463: PPUSH
70464: PPUSH
70465: PPUSH
70466: PPUSH
70467: PPUSH
70468: PPUSH
70469: PPUSH
70470: PPUSH
// result := false ;
70471: LD_ADDR_VAR 0 6
70475: PUSH
70476: LD_INT 0
70478: ST_TO_ADDR
// if btype = b_depot then
70479: LD_VAR 0 2
70483: PUSH
70484: LD_INT 0
70486: EQUAL
70487: IFFALSE 70499
// begin result := true ;
70489: LD_ADDR_VAR 0 6
70493: PUSH
70494: LD_INT 1
70496: ST_TO_ADDR
// exit ;
70497: GO 71353
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
70499: LD_VAR 0 1
70503: NOT
70504: IFTRUE 70529
70506: PUSH
70507: LD_VAR 0 1
70511: PPUSH
70512: CALL_OW 266
70516: PUSH
70517: LD_INT 0
70519: PUSH
70520: LD_INT 1
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: IN
70527: NOT
70528: OR
70529: IFTRUE 70538
70531: PUSH
70532: LD_VAR 0 2
70536: NOT
70537: OR
70538: IFTRUE 70574
70540: PUSH
70541: LD_VAR 0 5
70545: PUSH
70546: LD_INT 0
70548: PUSH
70549: LD_INT 1
70551: PUSH
70552: LD_INT 2
70554: PUSH
70555: LD_INT 3
70557: PUSH
70558: LD_INT 4
70560: PUSH
70561: LD_INT 5
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: IN
70572: NOT
70573: OR
70574: IFTRUE 70593
70576: PUSH
70577: LD_VAR 0 3
70581: PPUSH
70582: LD_VAR 0 4
70586: PPUSH
70587: CALL_OW 488
70591: NOT
70592: OR
70593: IFFALSE 70597
// exit ;
70595: GO 71353
// side := GetSide ( depot ) ;
70597: LD_ADDR_VAR 0 9
70601: PUSH
70602: LD_VAR 0 1
70606: PPUSH
70607: CALL_OW 255
70611: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
70612: LD_VAR 0 9
70616: PPUSH
70617: LD_VAR 0 2
70621: PPUSH
70622: CALL 70082 0 2
70626: NOT
70627: IFFALSE 70631
// exit ;
70629: GO 71353
// pom := GetBase ( depot ) ;
70631: LD_ADDR_VAR 0 10
70635: PUSH
70636: LD_VAR 0 1
70640: PPUSH
70641: CALL_OW 274
70645: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
70646: LD_ADDR_VAR 0 11
70650: PUSH
70651: LD_VAR 0 2
70655: PPUSH
70656: LD_VAR 0 1
70660: PPUSH
70661: CALL_OW 248
70665: PPUSH
70666: CALL_OW 450
70670: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
70671: LD_VAR 0 10
70675: PPUSH
70676: LD_INT 1
70678: PPUSH
70679: CALL_OW 275
70683: PUSH
70684: LD_VAR 0 11
70688: PUSH
70689: LD_INT 1
70691: ARRAY
70692: GREATEREQUAL
70693: IFFALSE 70719
70695: PUSH
70696: LD_VAR 0 10
70700: PPUSH
70701: LD_INT 2
70703: PPUSH
70704: CALL_OW 275
70708: PUSH
70709: LD_VAR 0 11
70713: PUSH
70714: LD_INT 2
70716: ARRAY
70717: GREATEREQUAL
70718: AND
70719: IFFALSE 70745
70721: PUSH
70722: LD_VAR 0 10
70726: PPUSH
70727: LD_INT 3
70729: PPUSH
70730: CALL_OW 275
70734: PUSH
70735: LD_VAR 0 11
70739: PUSH
70740: LD_INT 3
70742: ARRAY
70743: GREATEREQUAL
70744: AND
70745: NOT
70746: IFFALSE 70750
// exit ;
70748: GO 71353
// if GetBType ( depot ) = b_depot then
70750: LD_VAR 0 1
70754: PPUSH
70755: CALL_OW 266
70759: PUSH
70760: LD_INT 0
70762: EQUAL
70763: IFFALSE 70775
// dist := 28 else
70765: LD_ADDR_VAR 0 14
70769: PUSH
70770: LD_INT 28
70772: ST_TO_ADDR
70773: GO 70783
// dist := 36 ;
70775: LD_ADDR_VAR 0 14
70779: PUSH
70780: LD_INT 36
70782: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
70783: LD_VAR 0 1
70787: PPUSH
70788: LD_VAR 0 3
70792: PPUSH
70793: LD_VAR 0 4
70797: PPUSH
70798: CALL_OW 297
70802: PUSH
70803: LD_VAR 0 14
70807: GREATER
70808: IFFALSE 70812
// exit ;
70810: GO 71353
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
70812: LD_ADDR_VAR 0 12
70816: PUSH
70817: LD_VAR 0 2
70821: PPUSH
70822: LD_VAR 0 3
70826: PPUSH
70827: LD_VAR 0 4
70831: PPUSH
70832: LD_VAR 0 5
70836: PPUSH
70837: LD_VAR 0 1
70841: PPUSH
70842: CALL_OW 248
70846: PPUSH
70847: LD_INT 0
70849: PPUSH
70850: CALL 71358 0 6
70854: ST_TO_ADDR
// if not hexes then
70855: LD_VAR 0 12
70859: NOT
70860: IFFALSE 70864
// exit ;
70862: GO 71353
// hex := GetHexInfo ( x , y ) ;
70864: LD_ADDR_VAR 0 15
70868: PUSH
70869: LD_VAR 0 3
70873: PPUSH
70874: LD_VAR 0 4
70878: PPUSH
70879: CALL_OW 546
70883: ST_TO_ADDR
// if hex [ 1 ] then
70884: LD_VAR 0 15
70888: PUSH
70889: LD_INT 1
70891: ARRAY
70892: IFFALSE 70896
// exit ;
70894: GO 71353
// height := hex [ 2 ] ;
70896: LD_ADDR_VAR 0 13
70900: PUSH
70901: LD_VAR 0 15
70905: PUSH
70906: LD_INT 2
70908: ARRAY
70909: ST_TO_ADDR
// for i = 1 to hexes do
70910: LD_ADDR_VAR 0 7
70914: PUSH
70915: DOUBLE
70916: LD_INT 1
70918: DEC
70919: ST_TO_ADDR
70920: LD_VAR 0 12
70924: PUSH
70925: FOR_TO
70926: IFFALSE 71270
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
70928: LD_VAR 0 12
70932: PUSH
70933: LD_VAR 0 7
70937: ARRAY
70938: PUSH
70939: LD_INT 1
70941: ARRAY
70942: PPUSH
70943: LD_VAR 0 12
70947: PUSH
70948: LD_VAR 0 7
70952: ARRAY
70953: PUSH
70954: LD_INT 2
70956: ARRAY
70957: PPUSH
70958: CALL_OW 488
70962: NOT
70963: IFTRUE 71005
70965: PUSH
70966: LD_VAR 0 12
70970: PUSH
70971: LD_VAR 0 7
70975: ARRAY
70976: PUSH
70977: LD_INT 1
70979: ARRAY
70980: PPUSH
70981: LD_VAR 0 12
70985: PUSH
70986: LD_VAR 0 7
70990: ARRAY
70991: PUSH
70992: LD_INT 2
70994: ARRAY
70995: PPUSH
70996: CALL_OW 428
71000: PUSH
71001: LD_INT 0
71003: GREATER
71004: OR
71005: IFTRUE 71043
71007: PUSH
71008: LD_VAR 0 12
71012: PUSH
71013: LD_VAR 0 7
71017: ARRAY
71018: PUSH
71019: LD_INT 1
71021: ARRAY
71022: PPUSH
71023: LD_VAR 0 12
71027: PUSH
71028: LD_VAR 0 7
71032: ARRAY
71033: PUSH
71034: LD_INT 2
71036: ARRAY
71037: PPUSH
71038: CALL_OW 351
71042: OR
71043: IFFALSE 71049
// exit ;
71045: POP
71046: POP
71047: GO 71353
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
71049: LD_ADDR_VAR 0 8
71053: PUSH
71054: LD_VAR 0 12
71058: PUSH
71059: LD_VAR 0 7
71063: ARRAY
71064: PUSH
71065: LD_INT 1
71067: ARRAY
71068: PPUSH
71069: LD_VAR 0 12
71073: PUSH
71074: LD_VAR 0 7
71078: ARRAY
71079: PUSH
71080: LD_INT 2
71082: ARRAY
71083: PPUSH
71084: CALL_OW 546
71088: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
71089: LD_VAR 0 8
71093: PUSH
71094: LD_INT 1
71096: ARRAY
71097: IFTRUE 71119
71099: PUSH
71100: LD_VAR 0 8
71104: PUSH
71105: LD_INT 2
71107: ARRAY
71108: PUSH
71109: LD_VAR 0 13
71113: PUSH
71114: LD_INT 2
71116: PLUS
71117: GREATER
71118: OR
71119: IFTRUE 71141
71121: PUSH
71122: LD_VAR 0 8
71126: PUSH
71127: LD_INT 2
71129: ARRAY
71130: PUSH
71131: LD_VAR 0 13
71135: PUSH
71136: LD_INT 2
71138: MINUS
71139: LESS
71140: OR
71141: IFTRUE 71209
71143: PUSH
71144: LD_VAR 0 8
71148: PUSH
71149: LD_INT 3
71151: ARRAY
71152: PUSH
71153: LD_INT 0
71155: PUSH
71156: LD_INT 8
71158: PUSH
71159: LD_INT 9
71161: PUSH
71162: LD_INT 10
71164: PUSH
71165: LD_INT 11
71167: PUSH
71168: LD_INT 12
71170: PUSH
71171: LD_INT 13
71173: PUSH
71174: LD_INT 16
71176: PUSH
71177: LD_INT 17
71179: PUSH
71180: LD_INT 18
71182: PUSH
71183: LD_INT 19
71185: PUSH
71186: LD_INT 20
71188: PUSH
71189: LD_INT 21
71191: PUSH
71192: EMPTY
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: IN
71207: NOT
71208: OR
71209: IFTRUE 71222
71211: PUSH
71212: LD_VAR 0 8
71216: PUSH
71217: LD_INT 5
71219: ARRAY
71220: NOT
71221: OR
71222: IFTRUE 71262
71224: PUSH
71225: LD_VAR 0 8
71229: PUSH
71230: LD_INT 6
71232: ARRAY
71233: PUSH
71234: LD_INT 1
71236: PUSH
71237: LD_INT 2
71239: PUSH
71240: LD_INT 7
71242: PUSH
71243: LD_INT 9
71245: PUSH
71246: LD_INT 10
71248: PUSH
71249: LD_INT 11
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: IN
71260: NOT
71261: OR
71262: IFFALSE 71268
// exit ;
71264: POP
71265: POP
71266: GO 71353
// end ;
71268: GO 70925
71270: POP
71271: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
71272: LD_VAR 0 9
71276: PPUSH
71277: LD_VAR 0 3
71281: PPUSH
71282: LD_VAR 0 4
71286: PPUSH
71287: LD_INT 20
71289: PPUSH
71290: CALL 63172 0 4
71294: PUSH
71295: LD_INT 4
71297: ARRAY
71298: IFFALSE 71302
// exit ;
71300: GO 71353
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
71302: LD_VAR 0 2
71306: PUSH
71307: LD_INT 29
71309: PUSH
71310: LD_INT 30
71312: PUSH
71313: EMPTY
71314: LIST
71315: LIST
71316: IN
71317: IFFALSE 71341
71319: PUSH
71320: LD_VAR 0 3
71324: PPUSH
71325: LD_VAR 0 4
71329: PPUSH
71330: LD_VAR 0 9
71334: PPUSH
71335: CALL_OW 440
71339: NOT
71340: AND
71341: IFFALSE 71345
// exit ;
71343: GO 71353
// result := true ;
71345: LD_ADDR_VAR 0 6
71349: PUSH
71350: LD_INT 1
71352: ST_TO_ADDR
// end ;
71353: LD_VAR 0 6
71357: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
71358: LD_INT 0
71360: PPUSH
71361: PPUSH
71362: PPUSH
71363: PPUSH
71364: PPUSH
71365: PPUSH
71366: PPUSH
71367: PPUSH
71368: PPUSH
71369: PPUSH
71370: PPUSH
71371: PPUSH
71372: PPUSH
71373: PPUSH
71374: PPUSH
71375: PPUSH
71376: PPUSH
71377: PPUSH
71378: PPUSH
71379: PPUSH
71380: PPUSH
71381: PPUSH
71382: PPUSH
71383: PPUSH
71384: PPUSH
71385: PPUSH
71386: PPUSH
71387: PPUSH
71388: PPUSH
71389: PPUSH
71390: PPUSH
71391: PPUSH
71392: PPUSH
71393: PPUSH
71394: PPUSH
71395: PPUSH
71396: PPUSH
71397: PPUSH
71398: PPUSH
71399: PPUSH
71400: PPUSH
71401: PPUSH
71402: PPUSH
71403: PPUSH
71404: PPUSH
71405: PPUSH
71406: PPUSH
71407: PPUSH
71408: PPUSH
71409: PPUSH
71410: PPUSH
71411: PPUSH
71412: PPUSH
71413: PPUSH
71414: PPUSH
71415: PPUSH
71416: PPUSH
71417: PPUSH
// result = [ ] ;
71418: LD_ADDR_VAR 0 7
71422: PUSH
71423: EMPTY
71424: ST_TO_ADDR
// temp_list = [ ] ;
71425: LD_ADDR_VAR 0 9
71429: PUSH
71430: EMPTY
71431: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
71432: LD_VAR 0 4
71436: PUSH
71437: LD_INT 0
71439: PUSH
71440: LD_INT 1
71442: PUSH
71443: LD_INT 2
71445: PUSH
71446: LD_INT 3
71448: PUSH
71449: LD_INT 4
71451: PUSH
71452: LD_INT 5
71454: PUSH
71455: EMPTY
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: IN
71463: NOT
71464: IFTRUE 71507
71466: PUSH
71467: LD_VAR 0 1
71471: PUSH
71472: LD_INT 0
71474: PUSH
71475: LD_INT 1
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: IN
71482: IFFALSE 71506
71484: PUSH
71485: LD_VAR 0 5
71489: PUSH
71490: LD_INT 1
71492: PUSH
71493: LD_INT 2
71495: PUSH
71496: LD_INT 3
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: LIST
71503: IN
71504: NOT
71505: AND
71506: OR
71507: IFFALSE 71511
// exit ;
71509: GO 89910
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
71511: LD_VAR 0 1
71515: PUSH
71516: LD_INT 6
71518: PUSH
71519: LD_INT 7
71521: PUSH
71522: LD_INT 8
71524: PUSH
71525: LD_INT 13
71527: PUSH
71528: LD_INT 12
71530: PUSH
71531: LD_INT 15
71533: PUSH
71534: LD_INT 11
71536: PUSH
71537: LD_INT 14
71539: PUSH
71540: LD_INT 10
71542: PUSH
71543: EMPTY
71544: LIST
71545: LIST
71546: LIST
71547: LIST
71548: LIST
71549: LIST
71550: LIST
71551: LIST
71552: LIST
71553: IN
71554: IFFALSE 71564
// btype = b_lab ;
71556: LD_ADDR_VAR 0 1
71560: PUSH
71561: LD_INT 6
71563: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
71564: LD_VAR 0 6
71568: PUSH
71569: LD_INT 0
71571: PUSH
71572: LD_INT 1
71574: PUSH
71575: LD_INT 2
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: LIST
71582: IN
71583: NOT
71584: IFTRUE 71652
71586: PUSH
71587: LD_VAR 0 1
71591: PUSH
71592: LD_INT 0
71594: PUSH
71595: LD_INT 1
71597: PUSH
71598: LD_INT 2
71600: PUSH
71601: LD_INT 3
71603: PUSH
71604: LD_INT 6
71606: PUSH
71607: LD_INT 36
71609: PUSH
71610: LD_INT 4
71612: PUSH
71613: LD_INT 5
71615: PUSH
71616: LD_INT 31
71618: PUSH
71619: LD_INT 32
71621: PUSH
71622: LD_INT 33
71624: PUSH
71625: EMPTY
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: LIST
71634: LIST
71635: LIST
71636: LIST
71637: IN
71638: NOT
71639: IFFALSE 71651
71641: PUSH
71642: LD_VAR 0 6
71646: PUSH
71647: LD_INT 1
71649: EQUAL
71650: AND
71651: OR
71652: IFTRUE 71684
71654: PUSH
71655: LD_VAR 0 1
71659: PUSH
71660: LD_INT 2
71662: PUSH
71663: LD_INT 3
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: IN
71670: NOT
71671: IFFALSE 71683
71673: PUSH
71674: LD_VAR 0 6
71678: PUSH
71679: LD_INT 2
71681: EQUAL
71682: AND
71683: OR
71684: IFFALSE 71694
// mode = 0 ;
71686: LD_ADDR_VAR 0 6
71690: PUSH
71691: LD_INT 0
71693: ST_TO_ADDR
// case mode of 0 :
71694: LD_VAR 0 6
71698: PUSH
71699: LD_INT 0
71701: DOUBLE
71702: EQUAL
71703: IFTRUE 71707
71705: GO 83160
71707: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
71708: LD_ADDR_VAR 0 11
71712: PUSH
71713: LD_INT 0
71715: PUSH
71716: LD_INT 0
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 0
71725: PUSH
71726: LD_INT 1
71728: NEG
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 1
71736: PUSH
71737: LD_INT 0
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 1
71746: PUSH
71747: LD_INT 1
71749: PUSH
71750: EMPTY
71751: LIST
71752: LIST
71753: PUSH
71754: LD_INT 0
71756: PUSH
71757: LD_INT 1
71759: PUSH
71760: EMPTY
71761: LIST
71762: LIST
71763: PUSH
71764: LD_INT 1
71766: NEG
71767: PUSH
71768: LD_INT 0
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 1
71777: NEG
71778: PUSH
71779: LD_INT 1
71781: NEG
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 1
71789: NEG
71790: PUSH
71791: LD_INT 2
71793: NEG
71794: PUSH
71795: EMPTY
71796: LIST
71797: LIST
71798: PUSH
71799: LD_INT 0
71801: PUSH
71802: LD_INT 2
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 1
71812: PUSH
71813: LD_INT 1
71815: NEG
71816: PUSH
71817: EMPTY
71818: LIST
71819: LIST
71820: PUSH
71821: LD_INT 1
71823: PUSH
71824: LD_INT 2
71826: PUSH
71827: EMPTY
71828: LIST
71829: LIST
71830: PUSH
71831: LD_INT 0
71833: PUSH
71834: LD_INT 2
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 1
71843: NEG
71844: PUSH
71845: LD_INT 1
71847: PUSH
71848: EMPTY
71849: LIST
71850: LIST
71851: PUSH
71852: LD_INT 1
71854: PUSH
71855: LD_INT 3
71857: PUSH
71858: EMPTY
71859: LIST
71860: LIST
71861: PUSH
71862: LD_INT 0
71864: PUSH
71865: LD_INT 3
71867: PUSH
71868: EMPTY
71869: LIST
71870: LIST
71871: PUSH
71872: LD_INT 1
71874: NEG
71875: PUSH
71876: LD_INT 2
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71901: LD_ADDR_VAR 0 12
71905: PUSH
71906: LD_INT 0
71908: PUSH
71909: LD_INT 0
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 0
71918: PUSH
71919: LD_INT 1
71921: NEG
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 1
71929: PUSH
71930: LD_INT 0
71932: PUSH
71933: EMPTY
71934: LIST
71935: LIST
71936: PUSH
71937: LD_INT 1
71939: PUSH
71940: LD_INT 1
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 0
71949: PUSH
71950: LD_INT 1
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 1
71959: NEG
71960: PUSH
71961: LD_INT 0
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 1
71970: NEG
71971: PUSH
71972: LD_INT 1
71974: NEG
71975: PUSH
71976: EMPTY
71977: LIST
71978: LIST
71979: PUSH
71980: LD_INT 1
71982: PUSH
71983: LD_INT 1
71985: NEG
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 2
71993: PUSH
71994: LD_INT 0
71996: PUSH
71997: EMPTY
71998: LIST
71999: LIST
72000: PUSH
72001: LD_INT 2
72003: PUSH
72004: LD_INT 1
72006: PUSH
72007: EMPTY
72008: LIST
72009: LIST
72010: PUSH
72011: LD_INT 1
72013: NEG
72014: PUSH
72015: LD_INT 1
72017: PUSH
72018: EMPTY
72019: LIST
72020: LIST
72021: PUSH
72022: LD_INT 2
72024: NEG
72025: PUSH
72026: LD_INT 0
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 2
72035: NEG
72036: PUSH
72037: LD_INT 1
72039: NEG
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 2
72047: NEG
72048: PUSH
72049: LD_INT 1
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 3
72058: NEG
72059: PUSH
72060: LD_INT 0
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 3
72069: NEG
72070: PUSH
72071: LD_INT 1
72073: NEG
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: LIST
72091: LIST
72092: LIST
72093: LIST
72094: LIST
72095: LIST
72096: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72097: LD_ADDR_VAR 0 13
72101: PUSH
72102: LD_INT 0
72104: PUSH
72105: LD_INT 0
72107: PUSH
72108: EMPTY
72109: LIST
72110: LIST
72111: PUSH
72112: LD_INT 0
72114: PUSH
72115: LD_INT 1
72117: NEG
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PUSH
72123: LD_INT 1
72125: PUSH
72126: LD_INT 0
72128: PUSH
72129: EMPTY
72130: LIST
72131: LIST
72132: PUSH
72133: LD_INT 1
72135: PUSH
72136: LD_INT 1
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 0
72145: PUSH
72146: LD_INT 1
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 1
72155: NEG
72156: PUSH
72157: LD_INT 0
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: LD_INT 1
72166: NEG
72167: PUSH
72168: LD_INT 1
72170: NEG
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 1
72178: NEG
72179: PUSH
72180: LD_INT 2
72182: NEG
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_INT 2
72190: PUSH
72191: LD_INT 1
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 2
72200: PUSH
72201: LD_INT 2
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 1
72210: PUSH
72211: LD_INT 2
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 2
72220: NEG
72221: PUSH
72222: LD_INT 1
72224: NEG
72225: PUSH
72226: EMPTY
72227: LIST
72228: LIST
72229: PUSH
72230: LD_INT 2
72232: NEG
72233: PUSH
72234: LD_INT 2
72236: NEG
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 2
72244: NEG
72245: PUSH
72246: LD_INT 3
72248: NEG
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 3
72256: NEG
72257: PUSH
72258: LD_INT 2
72260: NEG
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 3
72268: NEG
72269: PUSH
72270: LD_INT 3
72272: NEG
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: EMPTY
72279: LIST
72280: LIST
72281: LIST
72282: LIST
72283: LIST
72284: LIST
72285: LIST
72286: LIST
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72296: LD_ADDR_VAR 0 14
72300: PUSH
72301: LD_INT 0
72303: PUSH
72304: LD_INT 0
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 0
72313: PUSH
72314: LD_INT 1
72316: NEG
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 1
72324: PUSH
72325: LD_INT 0
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 1
72334: PUSH
72335: LD_INT 1
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: PUSH
72342: LD_INT 0
72344: PUSH
72345: LD_INT 1
72347: PUSH
72348: EMPTY
72349: LIST
72350: LIST
72351: PUSH
72352: LD_INT 1
72354: NEG
72355: PUSH
72356: LD_INT 0
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 1
72365: NEG
72366: PUSH
72367: LD_INT 1
72369: NEG
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: LD_INT 1
72377: NEG
72378: PUSH
72379: LD_INT 2
72381: NEG
72382: PUSH
72383: EMPTY
72384: LIST
72385: LIST
72386: PUSH
72387: LD_INT 0
72389: PUSH
72390: LD_INT 2
72392: NEG
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 1
72400: PUSH
72401: LD_INT 1
72403: NEG
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 1
72411: PUSH
72412: LD_INT 2
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 0
72421: PUSH
72422: LD_INT 2
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 1
72431: NEG
72432: PUSH
72433: LD_INT 1
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: LD_INT 1
72442: NEG
72443: PUSH
72444: LD_INT 3
72446: NEG
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 0
72454: PUSH
72455: LD_INT 3
72457: NEG
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: LD_INT 1
72465: PUSH
72466: LD_INT 2
72468: NEG
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: LIST
72478: LIST
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72492: LD_ADDR_VAR 0 15
72496: PUSH
72497: LD_INT 0
72499: PUSH
72500: LD_INT 0
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 0
72509: PUSH
72510: LD_INT 1
72512: NEG
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 1
72520: PUSH
72521: LD_INT 0
72523: PUSH
72524: EMPTY
72525: LIST
72526: LIST
72527: PUSH
72528: LD_INT 1
72530: PUSH
72531: LD_INT 1
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 0
72540: PUSH
72541: LD_INT 1
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 1
72550: NEG
72551: PUSH
72552: LD_INT 0
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 1
72561: NEG
72562: PUSH
72563: LD_INT 1
72565: NEG
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 1
72573: PUSH
72574: LD_INT 1
72576: NEG
72577: PUSH
72578: EMPTY
72579: LIST
72580: LIST
72581: PUSH
72582: LD_INT 2
72584: PUSH
72585: LD_INT 0
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: LD_INT 2
72594: PUSH
72595: LD_INT 1
72597: PUSH
72598: EMPTY
72599: LIST
72600: LIST
72601: PUSH
72602: LD_INT 1
72604: NEG
72605: PUSH
72606: LD_INT 1
72608: PUSH
72609: EMPTY
72610: LIST
72611: LIST
72612: PUSH
72613: LD_INT 2
72615: NEG
72616: PUSH
72617: LD_INT 0
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: LD_INT 2
72626: NEG
72627: PUSH
72628: LD_INT 1
72630: NEG
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: LD_INT 2
72638: PUSH
72639: LD_INT 1
72641: NEG
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: PUSH
72647: LD_INT 3
72649: PUSH
72650: LD_INT 0
72652: PUSH
72653: EMPTY
72654: LIST
72655: LIST
72656: PUSH
72657: LD_INT 3
72659: PUSH
72660: LD_INT 1
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: LIST
72682: LIST
72683: LIST
72684: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72685: LD_ADDR_VAR 0 16
72689: PUSH
72690: LD_INT 0
72692: PUSH
72693: LD_INT 0
72695: PUSH
72696: EMPTY
72697: LIST
72698: LIST
72699: PUSH
72700: LD_INT 0
72702: PUSH
72703: LD_INT 1
72705: NEG
72706: PUSH
72707: EMPTY
72708: LIST
72709: LIST
72710: PUSH
72711: LD_INT 1
72713: PUSH
72714: LD_INT 0
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 1
72723: PUSH
72724: LD_INT 1
72726: PUSH
72727: EMPTY
72728: LIST
72729: LIST
72730: PUSH
72731: LD_INT 0
72733: PUSH
72734: LD_INT 1
72736: PUSH
72737: EMPTY
72738: LIST
72739: LIST
72740: PUSH
72741: LD_INT 1
72743: NEG
72744: PUSH
72745: LD_INT 0
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 1
72754: NEG
72755: PUSH
72756: LD_INT 1
72758: NEG
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 1
72766: NEG
72767: PUSH
72768: LD_INT 2
72770: NEG
72771: PUSH
72772: EMPTY
72773: LIST
72774: LIST
72775: PUSH
72776: LD_INT 2
72778: PUSH
72779: LD_INT 1
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PUSH
72786: LD_INT 2
72788: PUSH
72789: LD_INT 2
72791: PUSH
72792: EMPTY
72793: LIST
72794: LIST
72795: PUSH
72796: LD_INT 1
72798: PUSH
72799: LD_INT 2
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 2
72808: NEG
72809: PUSH
72810: LD_INT 1
72812: NEG
72813: PUSH
72814: EMPTY
72815: LIST
72816: LIST
72817: PUSH
72818: LD_INT 2
72820: NEG
72821: PUSH
72822: LD_INT 2
72824: NEG
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: PUSH
72830: LD_INT 3
72832: PUSH
72833: LD_INT 2
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 3
72842: PUSH
72843: LD_INT 3
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 2
72852: PUSH
72853: LD_INT 3
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: EMPTY
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: LIST
72875: LIST
72876: LIST
72877: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72878: LD_ADDR_VAR 0 17
72882: PUSH
72883: LD_INT 0
72885: PUSH
72886: LD_INT 0
72888: PUSH
72889: EMPTY
72890: LIST
72891: LIST
72892: PUSH
72893: LD_INT 0
72895: PUSH
72896: LD_INT 1
72898: NEG
72899: PUSH
72900: EMPTY
72901: LIST
72902: LIST
72903: PUSH
72904: LD_INT 1
72906: PUSH
72907: LD_INT 0
72909: PUSH
72910: EMPTY
72911: LIST
72912: LIST
72913: PUSH
72914: LD_INT 1
72916: PUSH
72917: LD_INT 1
72919: PUSH
72920: EMPTY
72921: LIST
72922: LIST
72923: PUSH
72924: LD_INT 0
72926: PUSH
72927: LD_INT 1
72929: PUSH
72930: EMPTY
72931: LIST
72932: LIST
72933: PUSH
72934: LD_INT 1
72936: NEG
72937: PUSH
72938: LD_INT 0
72940: PUSH
72941: EMPTY
72942: LIST
72943: LIST
72944: PUSH
72945: LD_INT 1
72947: NEG
72948: PUSH
72949: LD_INT 1
72951: NEG
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 1
72959: NEG
72960: PUSH
72961: LD_INT 2
72963: NEG
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 0
72971: PUSH
72972: LD_INT 2
72974: NEG
72975: PUSH
72976: EMPTY
72977: LIST
72978: LIST
72979: PUSH
72980: LD_INT 1
72982: PUSH
72983: LD_INT 1
72985: NEG
72986: PUSH
72987: EMPTY
72988: LIST
72989: LIST
72990: PUSH
72991: LD_INT 2
72993: PUSH
72994: LD_INT 0
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: LD_INT 2
73003: PUSH
73004: LD_INT 1
73006: PUSH
73007: EMPTY
73008: LIST
73009: LIST
73010: PUSH
73011: LD_INT 2
73013: PUSH
73014: LD_INT 2
73016: PUSH
73017: EMPTY
73018: LIST
73019: LIST
73020: PUSH
73021: LD_INT 1
73023: PUSH
73024: LD_INT 2
73026: PUSH
73027: EMPTY
73028: LIST
73029: LIST
73030: PUSH
73031: LD_INT 0
73033: PUSH
73034: LD_INT 2
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 1
73043: NEG
73044: PUSH
73045: LD_INT 1
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 2
73054: NEG
73055: PUSH
73056: LD_INT 0
73058: PUSH
73059: EMPTY
73060: LIST
73061: LIST
73062: PUSH
73063: LD_INT 2
73065: NEG
73066: PUSH
73067: LD_INT 1
73069: NEG
73070: PUSH
73071: EMPTY
73072: LIST
73073: LIST
73074: PUSH
73075: LD_INT 2
73077: NEG
73078: PUSH
73079: LD_INT 2
73081: NEG
73082: PUSH
73083: EMPTY
73084: LIST
73085: LIST
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: LIST
73091: LIST
73092: LIST
73093: LIST
73094: LIST
73095: LIST
73096: LIST
73097: LIST
73098: LIST
73099: LIST
73100: LIST
73101: LIST
73102: LIST
73103: LIST
73104: LIST
73105: LIST
73106: LIST
73107: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73108: LD_ADDR_VAR 0 18
73112: PUSH
73113: LD_INT 0
73115: PUSH
73116: LD_INT 0
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 0
73125: PUSH
73126: LD_INT 1
73128: NEG
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 1
73136: PUSH
73137: LD_INT 0
73139: PUSH
73140: EMPTY
73141: LIST
73142: LIST
73143: PUSH
73144: LD_INT 1
73146: PUSH
73147: LD_INT 1
73149: PUSH
73150: EMPTY
73151: LIST
73152: LIST
73153: PUSH
73154: LD_INT 0
73156: PUSH
73157: LD_INT 1
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 1
73166: NEG
73167: PUSH
73168: LD_INT 0
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: LD_INT 1
73177: NEG
73178: PUSH
73179: LD_INT 1
73181: NEG
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PUSH
73187: LD_INT 1
73189: NEG
73190: PUSH
73191: LD_INT 2
73193: NEG
73194: PUSH
73195: EMPTY
73196: LIST
73197: LIST
73198: PUSH
73199: LD_INT 0
73201: PUSH
73202: LD_INT 2
73204: NEG
73205: PUSH
73206: EMPTY
73207: LIST
73208: LIST
73209: PUSH
73210: LD_INT 1
73212: PUSH
73213: LD_INT 1
73215: NEG
73216: PUSH
73217: EMPTY
73218: LIST
73219: LIST
73220: PUSH
73221: LD_INT 2
73223: PUSH
73224: LD_INT 0
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 2
73233: PUSH
73234: LD_INT 1
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 2
73243: PUSH
73244: LD_INT 2
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 1
73253: PUSH
73254: LD_INT 2
73256: PUSH
73257: EMPTY
73258: LIST
73259: LIST
73260: PUSH
73261: LD_INT 0
73263: PUSH
73264: LD_INT 2
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 1
73273: NEG
73274: PUSH
73275: LD_INT 1
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 2
73284: NEG
73285: PUSH
73286: LD_INT 0
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 2
73295: NEG
73296: PUSH
73297: LD_INT 1
73299: NEG
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: PUSH
73305: LD_INT 2
73307: NEG
73308: PUSH
73309: LD_INT 2
73311: NEG
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: EMPTY
73318: LIST
73319: LIST
73320: LIST
73321: LIST
73322: LIST
73323: LIST
73324: LIST
73325: LIST
73326: LIST
73327: LIST
73328: LIST
73329: LIST
73330: LIST
73331: LIST
73332: LIST
73333: LIST
73334: LIST
73335: LIST
73336: LIST
73337: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73338: LD_ADDR_VAR 0 19
73342: PUSH
73343: LD_INT 0
73345: PUSH
73346: LD_INT 0
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: PUSH
73353: LD_INT 0
73355: PUSH
73356: LD_INT 1
73358: NEG
73359: PUSH
73360: EMPTY
73361: LIST
73362: LIST
73363: PUSH
73364: LD_INT 1
73366: PUSH
73367: LD_INT 0
73369: PUSH
73370: EMPTY
73371: LIST
73372: LIST
73373: PUSH
73374: LD_INT 1
73376: PUSH
73377: LD_INT 1
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 0
73386: PUSH
73387: LD_INT 1
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PUSH
73394: LD_INT 1
73396: NEG
73397: PUSH
73398: LD_INT 0
73400: PUSH
73401: EMPTY
73402: LIST
73403: LIST
73404: PUSH
73405: LD_INT 1
73407: NEG
73408: PUSH
73409: LD_INT 1
73411: NEG
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 1
73419: NEG
73420: PUSH
73421: LD_INT 2
73423: NEG
73424: PUSH
73425: EMPTY
73426: LIST
73427: LIST
73428: PUSH
73429: LD_INT 0
73431: PUSH
73432: LD_INT 2
73434: NEG
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 1
73442: PUSH
73443: LD_INT 1
73445: NEG
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 2
73453: PUSH
73454: LD_INT 0
73456: PUSH
73457: EMPTY
73458: LIST
73459: LIST
73460: PUSH
73461: LD_INT 2
73463: PUSH
73464: LD_INT 1
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 2
73473: PUSH
73474: LD_INT 2
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 1
73483: PUSH
73484: LD_INT 2
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: LD_INT 0
73493: PUSH
73494: LD_INT 2
73496: PUSH
73497: EMPTY
73498: LIST
73499: LIST
73500: PUSH
73501: LD_INT 1
73503: NEG
73504: PUSH
73505: LD_INT 1
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: LD_INT 2
73514: NEG
73515: PUSH
73516: LD_INT 0
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 2
73525: NEG
73526: PUSH
73527: LD_INT 1
73529: NEG
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 2
73537: NEG
73538: PUSH
73539: LD_INT 2
73541: NEG
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73568: LD_ADDR_VAR 0 20
73572: PUSH
73573: LD_INT 0
73575: PUSH
73576: LD_INT 0
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 0
73585: PUSH
73586: LD_INT 1
73588: NEG
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PUSH
73594: LD_INT 1
73596: PUSH
73597: LD_INT 0
73599: PUSH
73600: EMPTY
73601: LIST
73602: LIST
73603: PUSH
73604: LD_INT 1
73606: PUSH
73607: LD_INT 1
73609: PUSH
73610: EMPTY
73611: LIST
73612: LIST
73613: PUSH
73614: LD_INT 0
73616: PUSH
73617: LD_INT 1
73619: PUSH
73620: EMPTY
73621: LIST
73622: LIST
73623: PUSH
73624: LD_INT 1
73626: NEG
73627: PUSH
73628: LD_INT 0
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 1
73637: NEG
73638: PUSH
73639: LD_INT 1
73641: NEG
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 1
73649: NEG
73650: PUSH
73651: LD_INT 2
73653: NEG
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: PUSH
73659: LD_INT 0
73661: PUSH
73662: LD_INT 2
73664: NEG
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PUSH
73670: LD_INT 1
73672: PUSH
73673: LD_INT 1
73675: NEG
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 2
73683: PUSH
73684: LD_INT 0
73686: PUSH
73687: EMPTY
73688: LIST
73689: LIST
73690: PUSH
73691: LD_INT 2
73693: PUSH
73694: LD_INT 1
73696: PUSH
73697: EMPTY
73698: LIST
73699: LIST
73700: PUSH
73701: LD_INT 2
73703: PUSH
73704: LD_INT 2
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: PUSH
73711: LD_INT 1
73713: PUSH
73714: LD_INT 2
73716: PUSH
73717: EMPTY
73718: LIST
73719: LIST
73720: PUSH
73721: LD_INT 0
73723: PUSH
73724: LD_INT 2
73726: PUSH
73727: EMPTY
73728: LIST
73729: LIST
73730: PUSH
73731: LD_INT 1
73733: NEG
73734: PUSH
73735: LD_INT 1
73737: PUSH
73738: EMPTY
73739: LIST
73740: LIST
73741: PUSH
73742: LD_INT 2
73744: NEG
73745: PUSH
73746: LD_INT 0
73748: PUSH
73749: EMPTY
73750: LIST
73751: LIST
73752: PUSH
73753: LD_INT 2
73755: NEG
73756: PUSH
73757: LD_INT 1
73759: NEG
73760: PUSH
73761: EMPTY
73762: LIST
73763: LIST
73764: PUSH
73765: LD_INT 2
73767: NEG
73768: PUSH
73769: LD_INT 2
73771: NEG
73772: PUSH
73773: EMPTY
73774: LIST
73775: LIST
73776: PUSH
73777: EMPTY
73778: LIST
73779: LIST
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: LIST
73793: LIST
73794: LIST
73795: LIST
73796: LIST
73797: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73798: LD_ADDR_VAR 0 21
73802: PUSH
73803: LD_INT 0
73805: PUSH
73806: LD_INT 0
73808: PUSH
73809: EMPTY
73810: LIST
73811: LIST
73812: PUSH
73813: LD_INT 0
73815: PUSH
73816: LD_INT 1
73818: NEG
73819: PUSH
73820: EMPTY
73821: LIST
73822: LIST
73823: PUSH
73824: LD_INT 1
73826: PUSH
73827: LD_INT 0
73829: PUSH
73830: EMPTY
73831: LIST
73832: LIST
73833: PUSH
73834: LD_INT 1
73836: PUSH
73837: LD_INT 1
73839: PUSH
73840: EMPTY
73841: LIST
73842: LIST
73843: PUSH
73844: LD_INT 0
73846: PUSH
73847: LD_INT 1
73849: PUSH
73850: EMPTY
73851: LIST
73852: LIST
73853: PUSH
73854: LD_INT 1
73856: NEG
73857: PUSH
73858: LD_INT 0
73860: PUSH
73861: EMPTY
73862: LIST
73863: LIST
73864: PUSH
73865: LD_INT 1
73867: NEG
73868: PUSH
73869: LD_INT 1
73871: NEG
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: LD_INT 1
73879: NEG
73880: PUSH
73881: LD_INT 2
73883: NEG
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PUSH
73889: LD_INT 0
73891: PUSH
73892: LD_INT 2
73894: NEG
73895: PUSH
73896: EMPTY
73897: LIST
73898: LIST
73899: PUSH
73900: LD_INT 1
73902: PUSH
73903: LD_INT 1
73905: NEG
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 2
73913: PUSH
73914: LD_INT 0
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PUSH
73921: LD_INT 2
73923: PUSH
73924: LD_INT 1
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PUSH
73931: LD_INT 2
73933: PUSH
73934: LD_INT 2
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: PUSH
73941: LD_INT 1
73943: PUSH
73944: LD_INT 2
73946: PUSH
73947: EMPTY
73948: LIST
73949: LIST
73950: PUSH
73951: LD_INT 0
73953: PUSH
73954: LD_INT 2
73956: PUSH
73957: EMPTY
73958: LIST
73959: LIST
73960: PUSH
73961: LD_INT 1
73963: NEG
73964: PUSH
73965: LD_INT 1
73967: PUSH
73968: EMPTY
73969: LIST
73970: LIST
73971: PUSH
73972: LD_INT 2
73974: NEG
73975: PUSH
73976: LD_INT 0
73978: PUSH
73979: EMPTY
73980: LIST
73981: LIST
73982: PUSH
73983: LD_INT 2
73985: NEG
73986: PUSH
73987: LD_INT 1
73989: NEG
73990: PUSH
73991: EMPTY
73992: LIST
73993: LIST
73994: PUSH
73995: LD_INT 2
73997: NEG
73998: PUSH
73999: LD_INT 2
74001: NEG
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74028: LD_ADDR_VAR 0 22
74032: PUSH
74033: LD_INT 0
74035: PUSH
74036: LD_INT 0
74038: PUSH
74039: EMPTY
74040: LIST
74041: LIST
74042: PUSH
74043: LD_INT 0
74045: PUSH
74046: LD_INT 1
74048: NEG
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: LD_INT 1
74056: PUSH
74057: LD_INT 0
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 1
74066: PUSH
74067: LD_INT 1
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 0
74076: PUSH
74077: LD_INT 1
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 1
74086: NEG
74087: PUSH
74088: LD_INT 0
74090: PUSH
74091: EMPTY
74092: LIST
74093: LIST
74094: PUSH
74095: LD_INT 1
74097: NEG
74098: PUSH
74099: LD_INT 1
74101: NEG
74102: PUSH
74103: EMPTY
74104: LIST
74105: LIST
74106: PUSH
74107: LD_INT 1
74109: NEG
74110: PUSH
74111: LD_INT 2
74113: NEG
74114: PUSH
74115: EMPTY
74116: LIST
74117: LIST
74118: PUSH
74119: LD_INT 0
74121: PUSH
74122: LD_INT 2
74124: NEG
74125: PUSH
74126: EMPTY
74127: LIST
74128: LIST
74129: PUSH
74130: LD_INT 1
74132: PUSH
74133: LD_INT 1
74135: NEG
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: PUSH
74141: LD_INT 2
74143: PUSH
74144: LD_INT 0
74146: PUSH
74147: EMPTY
74148: LIST
74149: LIST
74150: PUSH
74151: LD_INT 2
74153: PUSH
74154: LD_INT 1
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PUSH
74161: LD_INT 2
74163: PUSH
74164: LD_INT 2
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: PUSH
74171: LD_INT 1
74173: PUSH
74174: LD_INT 2
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: PUSH
74181: LD_INT 0
74183: PUSH
74184: LD_INT 2
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 1
74193: NEG
74194: PUSH
74195: LD_INT 1
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 2
74204: NEG
74205: PUSH
74206: LD_INT 0
74208: PUSH
74209: EMPTY
74210: LIST
74211: LIST
74212: PUSH
74213: LD_INT 2
74215: NEG
74216: PUSH
74217: LD_INT 1
74219: NEG
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: LD_INT 2
74227: NEG
74228: PUSH
74229: LD_INT 2
74231: NEG
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: EMPTY
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
74258: LD_ADDR_VAR 0 23
74262: PUSH
74263: LD_INT 0
74265: PUSH
74266: LD_INT 0
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: PUSH
74273: LD_INT 0
74275: PUSH
74276: LD_INT 1
74278: NEG
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: PUSH
74284: LD_INT 1
74286: PUSH
74287: LD_INT 0
74289: PUSH
74290: EMPTY
74291: LIST
74292: LIST
74293: PUSH
74294: LD_INT 1
74296: PUSH
74297: LD_INT 1
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: PUSH
74304: LD_INT 0
74306: PUSH
74307: LD_INT 1
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 1
74316: NEG
74317: PUSH
74318: LD_INT 0
74320: PUSH
74321: EMPTY
74322: LIST
74323: LIST
74324: PUSH
74325: LD_INT 1
74327: NEG
74328: PUSH
74329: LD_INT 1
74331: NEG
74332: PUSH
74333: EMPTY
74334: LIST
74335: LIST
74336: PUSH
74337: LD_INT 1
74339: NEG
74340: PUSH
74341: LD_INT 2
74343: NEG
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: PUSH
74349: LD_INT 0
74351: PUSH
74352: LD_INT 2
74354: NEG
74355: PUSH
74356: EMPTY
74357: LIST
74358: LIST
74359: PUSH
74360: LD_INT 1
74362: PUSH
74363: LD_INT 1
74365: NEG
74366: PUSH
74367: EMPTY
74368: LIST
74369: LIST
74370: PUSH
74371: LD_INT 2
74373: PUSH
74374: LD_INT 0
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 2
74383: PUSH
74384: LD_INT 1
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: PUSH
74391: LD_INT 2
74393: PUSH
74394: LD_INT 2
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: PUSH
74401: LD_INT 1
74403: PUSH
74404: LD_INT 2
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PUSH
74411: LD_INT 0
74413: PUSH
74414: LD_INT 2
74416: PUSH
74417: EMPTY
74418: LIST
74419: LIST
74420: PUSH
74421: LD_INT 1
74423: NEG
74424: PUSH
74425: LD_INT 1
74427: PUSH
74428: EMPTY
74429: LIST
74430: LIST
74431: PUSH
74432: LD_INT 2
74434: NEG
74435: PUSH
74436: LD_INT 0
74438: PUSH
74439: EMPTY
74440: LIST
74441: LIST
74442: PUSH
74443: LD_INT 2
74445: NEG
74446: PUSH
74447: LD_INT 1
74449: NEG
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: PUSH
74455: LD_INT 2
74457: NEG
74458: PUSH
74459: LD_INT 2
74461: NEG
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: PUSH
74467: LD_INT 2
74469: NEG
74470: PUSH
74471: LD_INT 3
74473: NEG
74474: PUSH
74475: EMPTY
74476: LIST
74477: LIST
74478: PUSH
74479: LD_INT 1
74481: NEG
74482: PUSH
74483: LD_INT 3
74485: NEG
74486: PUSH
74487: EMPTY
74488: LIST
74489: LIST
74490: PUSH
74491: LD_INT 1
74493: PUSH
74494: LD_INT 2
74496: NEG
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: PUSH
74502: LD_INT 2
74504: PUSH
74505: LD_INT 1
74507: NEG
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: LIST
74517: LIST
74518: LIST
74519: LIST
74520: LIST
74521: LIST
74522: LIST
74523: LIST
74524: LIST
74525: LIST
74526: LIST
74527: LIST
74528: LIST
74529: LIST
74530: LIST
74531: LIST
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
74538: LD_ADDR_VAR 0 24
74542: PUSH
74543: LD_INT 0
74545: PUSH
74546: LD_INT 0
74548: PUSH
74549: EMPTY
74550: LIST
74551: LIST
74552: PUSH
74553: LD_INT 0
74555: PUSH
74556: LD_INT 1
74558: NEG
74559: PUSH
74560: EMPTY
74561: LIST
74562: LIST
74563: PUSH
74564: LD_INT 1
74566: PUSH
74567: LD_INT 0
74569: PUSH
74570: EMPTY
74571: LIST
74572: LIST
74573: PUSH
74574: LD_INT 1
74576: PUSH
74577: LD_INT 1
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: PUSH
74584: LD_INT 0
74586: PUSH
74587: LD_INT 1
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: PUSH
74594: LD_INT 1
74596: NEG
74597: PUSH
74598: LD_INT 0
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: PUSH
74605: LD_INT 1
74607: NEG
74608: PUSH
74609: LD_INT 1
74611: NEG
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: LD_INT 1
74619: NEG
74620: PUSH
74621: LD_INT 2
74623: NEG
74624: PUSH
74625: EMPTY
74626: LIST
74627: LIST
74628: PUSH
74629: LD_INT 0
74631: PUSH
74632: LD_INT 2
74634: NEG
74635: PUSH
74636: EMPTY
74637: LIST
74638: LIST
74639: PUSH
74640: LD_INT 1
74642: PUSH
74643: LD_INT 1
74645: NEG
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 2
74653: PUSH
74654: LD_INT 0
74656: PUSH
74657: EMPTY
74658: LIST
74659: LIST
74660: PUSH
74661: LD_INT 2
74663: PUSH
74664: LD_INT 1
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: PUSH
74671: LD_INT 2
74673: PUSH
74674: LD_INT 2
74676: PUSH
74677: EMPTY
74678: LIST
74679: LIST
74680: PUSH
74681: LD_INT 1
74683: PUSH
74684: LD_INT 2
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_INT 0
74693: PUSH
74694: LD_INT 2
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: PUSH
74701: LD_INT 1
74703: NEG
74704: PUSH
74705: LD_INT 1
74707: PUSH
74708: EMPTY
74709: LIST
74710: LIST
74711: PUSH
74712: LD_INT 2
74714: NEG
74715: PUSH
74716: LD_INT 0
74718: PUSH
74719: EMPTY
74720: LIST
74721: LIST
74722: PUSH
74723: LD_INT 2
74725: NEG
74726: PUSH
74727: LD_INT 1
74729: NEG
74730: PUSH
74731: EMPTY
74732: LIST
74733: LIST
74734: PUSH
74735: LD_INT 2
74737: NEG
74738: PUSH
74739: LD_INT 2
74741: NEG
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PUSH
74747: LD_INT 1
74749: PUSH
74750: LD_INT 2
74752: NEG
74753: PUSH
74754: EMPTY
74755: LIST
74756: LIST
74757: PUSH
74758: LD_INT 2
74760: PUSH
74761: LD_INT 1
74763: NEG
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: PUSH
74769: LD_INT 3
74771: PUSH
74772: LD_INT 1
74774: PUSH
74775: EMPTY
74776: LIST
74777: LIST
74778: PUSH
74779: LD_INT 3
74781: PUSH
74782: LD_INT 2
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: EMPTY
74790: LIST
74791: LIST
74792: LIST
74793: LIST
74794: LIST
74795: LIST
74796: LIST
74797: LIST
74798: LIST
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
74814: LD_ADDR_VAR 0 25
74818: PUSH
74819: LD_INT 0
74821: PUSH
74822: LD_INT 0
74824: PUSH
74825: EMPTY
74826: LIST
74827: LIST
74828: PUSH
74829: LD_INT 0
74831: PUSH
74832: LD_INT 1
74834: NEG
74835: PUSH
74836: EMPTY
74837: LIST
74838: LIST
74839: PUSH
74840: LD_INT 1
74842: PUSH
74843: LD_INT 0
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: LD_INT 1
74852: PUSH
74853: LD_INT 1
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 0
74862: PUSH
74863: LD_INT 1
74865: PUSH
74866: EMPTY
74867: LIST
74868: LIST
74869: PUSH
74870: LD_INT 1
74872: NEG
74873: PUSH
74874: LD_INT 0
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 1
74883: NEG
74884: PUSH
74885: LD_INT 1
74887: NEG
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 1
74895: NEG
74896: PUSH
74897: LD_INT 2
74899: NEG
74900: PUSH
74901: EMPTY
74902: LIST
74903: LIST
74904: PUSH
74905: LD_INT 0
74907: PUSH
74908: LD_INT 2
74910: NEG
74911: PUSH
74912: EMPTY
74913: LIST
74914: LIST
74915: PUSH
74916: LD_INT 1
74918: PUSH
74919: LD_INT 1
74921: NEG
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: LD_INT 2
74929: PUSH
74930: LD_INT 0
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: PUSH
74937: LD_INT 2
74939: PUSH
74940: LD_INT 1
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: PUSH
74947: LD_INT 2
74949: PUSH
74950: LD_INT 2
74952: PUSH
74953: EMPTY
74954: LIST
74955: LIST
74956: PUSH
74957: LD_INT 1
74959: PUSH
74960: LD_INT 2
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: LD_INT 0
74969: PUSH
74970: LD_INT 2
74972: PUSH
74973: EMPTY
74974: LIST
74975: LIST
74976: PUSH
74977: LD_INT 1
74979: NEG
74980: PUSH
74981: LD_INT 1
74983: PUSH
74984: EMPTY
74985: LIST
74986: LIST
74987: PUSH
74988: LD_INT 2
74990: NEG
74991: PUSH
74992: LD_INT 0
74994: PUSH
74995: EMPTY
74996: LIST
74997: LIST
74998: PUSH
74999: LD_INT 2
75001: NEG
75002: PUSH
75003: LD_INT 1
75005: NEG
75006: PUSH
75007: EMPTY
75008: LIST
75009: LIST
75010: PUSH
75011: LD_INT 2
75013: NEG
75014: PUSH
75015: LD_INT 2
75017: NEG
75018: PUSH
75019: EMPTY
75020: LIST
75021: LIST
75022: PUSH
75023: LD_INT 3
75025: PUSH
75026: LD_INT 1
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: PUSH
75033: LD_INT 3
75035: PUSH
75036: LD_INT 2
75038: PUSH
75039: EMPTY
75040: LIST
75041: LIST
75042: PUSH
75043: LD_INT 2
75045: PUSH
75046: LD_INT 3
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: PUSH
75053: LD_INT 1
75055: PUSH
75056: LD_INT 3
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: LIST
75067: LIST
75068: LIST
75069: LIST
75070: LIST
75071: LIST
75072: LIST
75073: LIST
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: LIST
75084: LIST
75085: LIST
75086: LIST
75087: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
75088: LD_ADDR_VAR 0 26
75092: PUSH
75093: LD_INT 0
75095: PUSH
75096: LD_INT 0
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: PUSH
75103: LD_INT 0
75105: PUSH
75106: LD_INT 1
75108: NEG
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: PUSH
75114: LD_INT 1
75116: PUSH
75117: LD_INT 0
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PUSH
75124: LD_INT 1
75126: PUSH
75127: LD_INT 1
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: PUSH
75134: LD_INT 0
75136: PUSH
75137: LD_INT 1
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: PUSH
75144: LD_INT 1
75146: NEG
75147: PUSH
75148: LD_INT 0
75150: PUSH
75151: EMPTY
75152: LIST
75153: LIST
75154: PUSH
75155: LD_INT 1
75157: NEG
75158: PUSH
75159: LD_INT 1
75161: NEG
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: PUSH
75167: LD_INT 1
75169: NEG
75170: PUSH
75171: LD_INT 2
75173: NEG
75174: PUSH
75175: EMPTY
75176: LIST
75177: LIST
75178: PUSH
75179: LD_INT 0
75181: PUSH
75182: LD_INT 2
75184: NEG
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: LD_INT 1
75192: PUSH
75193: LD_INT 1
75195: NEG
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 2
75203: PUSH
75204: LD_INT 0
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 2
75213: PUSH
75214: LD_INT 1
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: LD_INT 2
75223: PUSH
75224: LD_INT 2
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 1
75233: PUSH
75234: LD_INT 2
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: LD_INT 0
75243: PUSH
75244: LD_INT 2
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: LD_INT 1
75253: NEG
75254: PUSH
75255: LD_INT 1
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: PUSH
75262: LD_INT 2
75264: NEG
75265: PUSH
75266: LD_INT 0
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: LD_INT 2
75275: NEG
75276: PUSH
75277: LD_INT 1
75279: NEG
75280: PUSH
75281: EMPTY
75282: LIST
75283: LIST
75284: PUSH
75285: LD_INT 2
75287: NEG
75288: PUSH
75289: LD_INT 2
75291: NEG
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PUSH
75297: LD_INT 2
75299: PUSH
75300: LD_INT 3
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: LD_INT 1
75309: PUSH
75310: LD_INT 3
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 1
75319: NEG
75320: PUSH
75321: LD_INT 2
75323: PUSH
75324: EMPTY
75325: LIST
75326: LIST
75327: PUSH
75328: LD_INT 2
75330: NEG
75331: PUSH
75332: LD_INT 1
75334: PUSH
75335: EMPTY
75336: LIST
75337: LIST
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: LIST
75343: LIST
75344: LIST
75345: LIST
75346: LIST
75347: LIST
75348: LIST
75349: LIST
75350: LIST
75351: LIST
75352: LIST
75353: LIST
75354: LIST
75355: LIST
75356: LIST
75357: LIST
75358: LIST
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
75364: LD_ADDR_VAR 0 27
75368: PUSH
75369: LD_INT 0
75371: PUSH
75372: LD_INT 0
75374: PUSH
75375: EMPTY
75376: LIST
75377: LIST
75378: PUSH
75379: LD_INT 0
75381: PUSH
75382: LD_INT 1
75384: NEG
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 1
75392: PUSH
75393: LD_INT 0
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: PUSH
75400: LD_INT 1
75402: PUSH
75403: LD_INT 1
75405: PUSH
75406: EMPTY
75407: LIST
75408: LIST
75409: PUSH
75410: LD_INT 0
75412: PUSH
75413: LD_INT 1
75415: PUSH
75416: EMPTY
75417: LIST
75418: LIST
75419: PUSH
75420: LD_INT 1
75422: NEG
75423: PUSH
75424: LD_INT 0
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: PUSH
75431: LD_INT 1
75433: NEG
75434: PUSH
75435: LD_INT 1
75437: NEG
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: PUSH
75443: LD_INT 1
75445: NEG
75446: PUSH
75447: LD_INT 2
75449: NEG
75450: PUSH
75451: EMPTY
75452: LIST
75453: LIST
75454: PUSH
75455: LD_INT 0
75457: PUSH
75458: LD_INT 2
75460: NEG
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: PUSH
75466: LD_INT 1
75468: PUSH
75469: LD_INT 1
75471: NEG
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: PUSH
75477: LD_INT 2
75479: PUSH
75480: LD_INT 0
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: PUSH
75487: LD_INT 2
75489: PUSH
75490: LD_INT 1
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: PUSH
75497: LD_INT 2
75499: PUSH
75500: LD_INT 2
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: PUSH
75507: LD_INT 1
75509: PUSH
75510: LD_INT 2
75512: PUSH
75513: EMPTY
75514: LIST
75515: LIST
75516: PUSH
75517: LD_INT 0
75519: PUSH
75520: LD_INT 2
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: PUSH
75527: LD_INT 1
75529: NEG
75530: PUSH
75531: LD_INT 1
75533: PUSH
75534: EMPTY
75535: LIST
75536: LIST
75537: PUSH
75538: LD_INT 2
75540: NEG
75541: PUSH
75542: LD_INT 0
75544: PUSH
75545: EMPTY
75546: LIST
75547: LIST
75548: PUSH
75549: LD_INT 2
75551: NEG
75552: PUSH
75553: LD_INT 1
75555: NEG
75556: PUSH
75557: EMPTY
75558: LIST
75559: LIST
75560: PUSH
75561: LD_INT 2
75563: NEG
75564: PUSH
75565: LD_INT 2
75567: NEG
75568: PUSH
75569: EMPTY
75570: LIST
75571: LIST
75572: PUSH
75573: LD_INT 1
75575: NEG
75576: PUSH
75577: LD_INT 2
75579: PUSH
75580: EMPTY
75581: LIST
75582: LIST
75583: PUSH
75584: LD_INT 2
75586: NEG
75587: PUSH
75588: LD_INT 1
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: LD_INT 3
75597: NEG
75598: PUSH
75599: LD_INT 1
75601: NEG
75602: PUSH
75603: EMPTY
75604: LIST
75605: LIST
75606: PUSH
75607: LD_INT 3
75609: NEG
75610: PUSH
75611: LD_INT 2
75613: NEG
75614: PUSH
75615: EMPTY
75616: LIST
75617: LIST
75618: PUSH
75619: EMPTY
75620: LIST
75621: LIST
75622: LIST
75623: LIST
75624: LIST
75625: LIST
75626: LIST
75627: LIST
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
75644: LD_ADDR_VAR 0 28
75648: PUSH
75649: LD_INT 0
75651: PUSH
75652: LD_INT 0
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: PUSH
75659: LD_INT 0
75661: PUSH
75662: LD_INT 1
75664: NEG
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: LD_INT 1
75672: PUSH
75673: LD_INT 0
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: PUSH
75680: LD_INT 1
75682: PUSH
75683: LD_INT 1
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PUSH
75690: LD_INT 0
75692: PUSH
75693: LD_INT 1
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PUSH
75700: LD_INT 1
75702: NEG
75703: PUSH
75704: LD_INT 0
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: LD_INT 1
75713: NEG
75714: PUSH
75715: LD_INT 1
75717: NEG
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: PUSH
75723: LD_INT 1
75725: NEG
75726: PUSH
75727: LD_INT 2
75729: NEG
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: PUSH
75735: LD_INT 0
75737: PUSH
75738: LD_INT 2
75740: NEG
75741: PUSH
75742: EMPTY
75743: LIST
75744: LIST
75745: PUSH
75746: LD_INT 1
75748: PUSH
75749: LD_INT 1
75751: NEG
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: PUSH
75757: LD_INT 2
75759: PUSH
75760: LD_INT 0
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: LD_INT 2
75769: PUSH
75770: LD_INT 1
75772: PUSH
75773: EMPTY
75774: LIST
75775: LIST
75776: PUSH
75777: LD_INT 2
75779: PUSH
75780: LD_INT 2
75782: PUSH
75783: EMPTY
75784: LIST
75785: LIST
75786: PUSH
75787: LD_INT 1
75789: PUSH
75790: LD_INT 2
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: PUSH
75797: LD_INT 0
75799: PUSH
75800: LD_INT 2
75802: PUSH
75803: EMPTY
75804: LIST
75805: LIST
75806: PUSH
75807: LD_INT 1
75809: NEG
75810: PUSH
75811: LD_INT 1
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: PUSH
75818: LD_INT 2
75820: NEG
75821: PUSH
75822: LD_INT 0
75824: PUSH
75825: EMPTY
75826: LIST
75827: LIST
75828: PUSH
75829: LD_INT 2
75831: NEG
75832: PUSH
75833: LD_INT 1
75835: NEG
75836: PUSH
75837: EMPTY
75838: LIST
75839: LIST
75840: PUSH
75841: LD_INT 2
75843: NEG
75844: PUSH
75845: LD_INT 2
75847: NEG
75848: PUSH
75849: EMPTY
75850: LIST
75851: LIST
75852: PUSH
75853: LD_INT 2
75855: NEG
75856: PUSH
75857: LD_INT 3
75859: NEG
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: PUSH
75865: LD_INT 1
75867: NEG
75868: PUSH
75869: LD_INT 3
75871: NEG
75872: PUSH
75873: EMPTY
75874: LIST
75875: LIST
75876: PUSH
75877: LD_INT 3
75879: NEG
75880: PUSH
75881: LD_INT 1
75883: NEG
75884: PUSH
75885: EMPTY
75886: LIST
75887: LIST
75888: PUSH
75889: LD_INT 3
75891: NEG
75892: PUSH
75893: LD_INT 2
75895: NEG
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: LIST
75915: LIST
75916: LIST
75917: LIST
75918: LIST
75919: LIST
75920: LIST
75921: LIST
75922: LIST
75923: LIST
75924: LIST
75925: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
75926: LD_ADDR_VAR 0 29
75930: PUSH
75931: LD_INT 0
75933: PUSH
75934: LD_INT 0
75936: PUSH
75937: EMPTY
75938: LIST
75939: LIST
75940: PUSH
75941: LD_INT 0
75943: PUSH
75944: LD_INT 1
75946: NEG
75947: PUSH
75948: EMPTY
75949: LIST
75950: LIST
75951: PUSH
75952: LD_INT 1
75954: PUSH
75955: LD_INT 0
75957: PUSH
75958: EMPTY
75959: LIST
75960: LIST
75961: PUSH
75962: LD_INT 1
75964: PUSH
75965: LD_INT 1
75967: PUSH
75968: EMPTY
75969: LIST
75970: LIST
75971: PUSH
75972: LD_INT 0
75974: PUSH
75975: LD_INT 1
75977: PUSH
75978: EMPTY
75979: LIST
75980: LIST
75981: PUSH
75982: LD_INT 1
75984: NEG
75985: PUSH
75986: LD_INT 0
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: PUSH
75993: LD_INT 1
75995: NEG
75996: PUSH
75997: LD_INT 1
75999: NEG
76000: PUSH
76001: EMPTY
76002: LIST
76003: LIST
76004: PUSH
76005: LD_INT 1
76007: NEG
76008: PUSH
76009: LD_INT 2
76011: NEG
76012: PUSH
76013: EMPTY
76014: LIST
76015: LIST
76016: PUSH
76017: LD_INT 0
76019: PUSH
76020: LD_INT 2
76022: NEG
76023: PUSH
76024: EMPTY
76025: LIST
76026: LIST
76027: PUSH
76028: LD_INT 1
76030: PUSH
76031: LD_INT 1
76033: NEG
76034: PUSH
76035: EMPTY
76036: LIST
76037: LIST
76038: PUSH
76039: LD_INT 2
76041: PUSH
76042: LD_INT 0
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: PUSH
76049: LD_INT 2
76051: PUSH
76052: LD_INT 1
76054: PUSH
76055: EMPTY
76056: LIST
76057: LIST
76058: PUSH
76059: LD_INT 1
76061: PUSH
76062: LD_INT 2
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: PUSH
76069: LD_INT 0
76071: PUSH
76072: LD_INT 2
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: PUSH
76079: LD_INT 1
76081: NEG
76082: PUSH
76083: LD_INT 1
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: PUSH
76090: LD_INT 2
76092: NEG
76093: PUSH
76094: LD_INT 1
76096: NEG
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: PUSH
76102: LD_INT 2
76104: NEG
76105: PUSH
76106: LD_INT 2
76108: NEG
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_INT 2
76116: NEG
76117: PUSH
76118: LD_INT 3
76120: NEG
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PUSH
76126: LD_INT 2
76128: PUSH
76129: LD_INT 1
76131: NEG
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: PUSH
76137: LD_INT 3
76139: PUSH
76140: LD_INT 1
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 1
76149: PUSH
76150: LD_INT 3
76152: PUSH
76153: EMPTY
76154: LIST
76155: LIST
76156: PUSH
76157: LD_INT 1
76159: NEG
76160: PUSH
76161: LD_INT 2
76163: PUSH
76164: EMPTY
76165: LIST
76166: LIST
76167: PUSH
76168: LD_INT 3
76170: NEG
76171: PUSH
76172: LD_INT 2
76174: NEG
76175: PUSH
76176: EMPTY
76177: LIST
76178: LIST
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: LIST
76184: LIST
76185: LIST
76186: LIST
76187: LIST
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76205: LD_ADDR_VAR 0 30
76209: PUSH
76210: LD_INT 0
76212: PUSH
76213: LD_INT 0
76215: PUSH
76216: EMPTY
76217: LIST
76218: LIST
76219: PUSH
76220: LD_INT 0
76222: PUSH
76223: LD_INT 1
76225: NEG
76226: PUSH
76227: EMPTY
76228: LIST
76229: LIST
76230: PUSH
76231: LD_INT 1
76233: PUSH
76234: LD_INT 0
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PUSH
76241: LD_INT 1
76243: PUSH
76244: LD_INT 1
76246: PUSH
76247: EMPTY
76248: LIST
76249: LIST
76250: PUSH
76251: LD_INT 0
76253: PUSH
76254: LD_INT 1
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PUSH
76261: LD_INT 1
76263: NEG
76264: PUSH
76265: LD_INT 0
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: LD_INT 1
76274: NEG
76275: PUSH
76276: LD_INT 1
76278: NEG
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PUSH
76284: LD_INT 1
76286: NEG
76287: PUSH
76288: LD_INT 2
76290: NEG
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 0
76298: PUSH
76299: LD_INT 2
76301: NEG
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: PUSH
76307: LD_INT 1
76309: PUSH
76310: LD_INT 1
76312: NEG
76313: PUSH
76314: EMPTY
76315: LIST
76316: LIST
76317: PUSH
76318: LD_INT 2
76320: PUSH
76321: LD_INT 0
76323: PUSH
76324: EMPTY
76325: LIST
76326: LIST
76327: PUSH
76328: LD_INT 2
76330: PUSH
76331: LD_INT 1
76333: PUSH
76334: EMPTY
76335: LIST
76336: LIST
76337: PUSH
76338: LD_INT 2
76340: PUSH
76341: LD_INT 2
76343: PUSH
76344: EMPTY
76345: LIST
76346: LIST
76347: PUSH
76348: LD_INT 1
76350: PUSH
76351: LD_INT 2
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: PUSH
76358: LD_INT 1
76360: NEG
76361: PUSH
76362: LD_INT 1
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: LD_INT 2
76371: NEG
76372: PUSH
76373: LD_INT 0
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: PUSH
76380: LD_INT 2
76382: NEG
76383: PUSH
76384: LD_INT 1
76386: NEG
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PUSH
76392: LD_INT 1
76394: NEG
76395: PUSH
76396: LD_INT 3
76398: NEG
76399: PUSH
76400: EMPTY
76401: LIST
76402: LIST
76403: PUSH
76404: LD_INT 1
76406: PUSH
76407: LD_INT 2
76409: NEG
76410: PUSH
76411: EMPTY
76412: LIST
76413: LIST
76414: PUSH
76415: LD_INT 3
76417: PUSH
76418: LD_INT 2
76420: PUSH
76421: EMPTY
76422: LIST
76423: LIST
76424: PUSH
76425: LD_INT 2
76427: PUSH
76428: LD_INT 3
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: PUSH
76435: LD_INT 2
76437: NEG
76438: PUSH
76439: LD_INT 1
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PUSH
76446: LD_INT 3
76448: NEG
76449: PUSH
76450: LD_INT 1
76452: NEG
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: PUSH
76458: EMPTY
76459: LIST
76460: LIST
76461: LIST
76462: LIST
76463: LIST
76464: LIST
76465: LIST
76466: LIST
76467: LIST
76468: LIST
76469: LIST
76470: LIST
76471: LIST
76472: LIST
76473: LIST
76474: LIST
76475: LIST
76476: LIST
76477: LIST
76478: LIST
76479: LIST
76480: LIST
76481: LIST
76482: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
76483: LD_ADDR_VAR 0 31
76487: PUSH
76488: LD_INT 0
76490: PUSH
76491: LD_INT 0
76493: PUSH
76494: EMPTY
76495: LIST
76496: LIST
76497: PUSH
76498: LD_INT 0
76500: PUSH
76501: LD_INT 1
76503: NEG
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: PUSH
76509: LD_INT 1
76511: PUSH
76512: LD_INT 0
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PUSH
76519: LD_INT 1
76521: PUSH
76522: LD_INT 1
76524: PUSH
76525: EMPTY
76526: LIST
76527: LIST
76528: PUSH
76529: LD_INT 0
76531: PUSH
76532: LD_INT 1
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: LD_INT 1
76541: NEG
76542: PUSH
76543: LD_INT 0
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: PUSH
76550: LD_INT 1
76552: NEG
76553: PUSH
76554: LD_INT 1
76556: NEG
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: PUSH
76562: LD_INT 1
76564: NEG
76565: PUSH
76566: LD_INT 2
76568: NEG
76569: PUSH
76570: EMPTY
76571: LIST
76572: LIST
76573: PUSH
76574: LD_INT 1
76576: PUSH
76577: LD_INT 1
76579: NEG
76580: PUSH
76581: EMPTY
76582: LIST
76583: LIST
76584: PUSH
76585: LD_INT 2
76587: PUSH
76588: LD_INT 0
76590: PUSH
76591: EMPTY
76592: LIST
76593: LIST
76594: PUSH
76595: LD_INT 2
76597: PUSH
76598: LD_INT 1
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: PUSH
76605: LD_INT 2
76607: PUSH
76608: LD_INT 2
76610: PUSH
76611: EMPTY
76612: LIST
76613: LIST
76614: PUSH
76615: LD_INT 1
76617: PUSH
76618: LD_INT 2
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 0
76627: PUSH
76628: LD_INT 2
76630: PUSH
76631: EMPTY
76632: LIST
76633: LIST
76634: PUSH
76635: LD_INT 1
76637: NEG
76638: PUSH
76639: LD_INT 1
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: LD_INT 2
76648: NEG
76649: PUSH
76650: LD_INT 1
76652: NEG
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: PUSH
76658: LD_INT 2
76660: NEG
76661: PUSH
76662: LD_INT 2
76664: NEG
76665: PUSH
76666: EMPTY
76667: LIST
76668: LIST
76669: PUSH
76670: LD_INT 2
76672: NEG
76673: PUSH
76674: LD_INT 3
76676: NEG
76677: PUSH
76678: EMPTY
76679: LIST
76680: LIST
76681: PUSH
76682: LD_INT 2
76684: PUSH
76685: LD_INT 1
76687: NEG
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: PUSH
76693: LD_INT 3
76695: PUSH
76696: LD_INT 1
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PUSH
76703: LD_INT 1
76705: PUSH
76706: LD_INT 3
76708: PUSH
76709: EMPTY
76710: LIST
76711: LIST
76712: PUSH
76713: LD_INT 1
76715: NEG
76716: PUSH
76717: LD_INT 2
76719: PUSH
76720: EMPTY
76721: LIST
76722: LIST
76723: PUSH
76724: LD_INT 3
76726: NEG
76727: PUSH
76728: LD_INT 2
76730: NEG
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: PUSH
76736: EMPTY
76737: LIST
76738: LIST
76739: LIST
76740: LIST
76741: LIST
76742: LIST
76743: LIST
76744: LIST
76745: LIST
76746: LIST
76747: LIST
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
76761: LD_ADDR_VAR 0 32
76765: PUSH
76766: LD_INT 0
76768: PUSH
76769: LD_INT 0
76771: PUSH
76772: EMPTY
76773: LIST
76774: LIST
76775: PUSH
76776: LD_INT 0
76778: PUSH
76779: LD_INT 1
76781: NEG
76782: PUSH
76783: EMPTY
76784: LIST
76785: LIST
76786: PUSH
76787: LD_INT 1
76789: PUSH
76790: LD_INT 0
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: PUSH
76797: LD_INT 1
76799: PUSH
76800: LD_INT 1
76802: PUSH
76803: EMPTY
76804: LIST
76805: LIST
76806: PUSH
76807: LD_INT 0
76809: PUSH
76810: LD_INT 1
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: PUSH
76817: LD_INT 1
76819: NEG
76820: PUSH
76821: LD_INT 0
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: PUSH
76828: LD_INT 1
76830: NEG
76831: PUSH
76832: LD_INT 1
76834: NEG
76835: PUSH
76836: EMPTY
76837: LIST
76838: LIST
76839: PUSH
76840: LD_INT 1
76842: NEG
76843: PUSH
76844: LD_INT 2
76846: NEG
76847: PUSH
76848: EMPTY
76849: LIST
76850: LIST
76851: PUSH
76852: LD_INT 0
76854: PUSH
76855: LD_INT 2
76857: NEG
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PUSH
76863: LD_INT 1
76865: PUSH
76866: LD_INT 1
76868: NEG
76869: PUSH
76870: EMPTY
76871: LIST
76872: LIST
76873: PUSH
76874: LD_INT 2
76876: PUSH
76877: LD_INT 1
76879: PUSH
76880: EMPTY
76881: LIST
76882: LIST
76883: PUSH
76884: LD_INT 2
76886: PUSH
76887: LD_INT 2
76889: PUSH
76890: EMPTY
76891: LIST
76892: LIST
76893: PUSH
76894: LD_INT 1
76896: PUSH
76897: LD_INT 2
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: PUSH
76904: LD_INT 0
76906: PUSH
76907: LD_INT 2
76909: PUSH
76910: EMPTY
76911: LIST
76912: LIST
76913: PUSH
76914: LD_INT 1
76916: NEG
76917: PUSH
76918: LD_INT 1
76920: PUSH
76921: EMPTY
76922: LIST
76923: LIST
76924: PUSH
76925: LD_INT 2
76927: NEG
76928: PUSH
76929: LD_INT 0
76931: PUSH
76932: EMPTY
76933: LIST
76934: LIST
76935: PUSH
76936: LD_INT 2
76938: NEG
76939: PUSH
76940: LD_INT 1
76942: NEG
76943: PUSH
76944: EMPTY
76945: LIST
76946: LIST
76947: PUSH
76948: LD_INT 1
76950: NEG
76951: PUSH
76952: LD_INT 3
76954: NEG
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_INT 1
76962: PUSH
76963: LD_INT 2
76965: NEG
76966: PUSH
76967: EMPTY
76968: LIST
76969: LIST
76970: PUSH
76971: LD_INT 3
76973: PUSH
76974: LD_INT 2
76976: PUSH
76977: EMPTY
76978: LIST
76979: LIST
76980: PUSH
76981: LD_INT 2
76983: PUSH
76984: LD_INT 3
76986: PUSH
76987: EMPTY
76988: LIST
76989: LIST
76990: PUSH
76991: LD_INT 2
76993: NEG
76994: PUSH
76995: LD_INT 1
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: LD_INT 3
77004: NEG
77005: PUSH
77006: LD_INT 1
77008: NEG
77009: PUSH
77010: EMPTY
77011: LIST
77012: LIST
77013: PUSH
77014: EMPTY
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: LIST
77023: LIST
77024: LIST
77025: LIST
77026: LIST
77027: LIST
77028: LIST
77029: LIST
77030: LIST
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: LIST
77037: LIST
77038: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
77039: LD_ADDR_VAR 0 33
77043: PUSH
77044: LD_INT 0
77046: PUSH
77047: LD_INT 0
77049: PUSH
77050: EMPTY
77051: LIST
77052: LIST
77053: PUSH
77054: LD_INT 0
77056: PUSH
77057: LD_INT 1
77059: NEG
77060: PUSH
77061: EMPTY
77062: LIST
77063: LIST
77064: PUSH
77065: LD_INT 1
77067: PUSH
77068: LD_INT 0
77070: PUSH
77071: EMPTY
77072: LIST
77073: LIST
77074: PUSH
77075: LD_INT 1
77077: PUSH
77078: LD_INT 1
77080: PUSH
77081: EMPTY
77082: LIST
77083: LIST
77084: PUSH
77085: LD_INT 0
77087: PUSH
77088: LD_INT 1
77090: PUSH
77091: EMPTY
77092: LIST
77093: LIST
77094: PUSH
77095: LD_INT 1
77097: NEG
77098: PUSH
77099: LD_INT 0
77101: PUSH
77102: EMPTY
77103: LIST
77104: LIST
77105: PUSH
77106: LD_INT 1
77108: NEG
77109: PUSH
77110: LD_INT 1
77112: NEG
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: PUSH
77118: LD_INT 1
77120: NEG
77121: PUSH
77122: LD_INT 2
77124: NEG
77125: PUSH
77126: EMPTY
77127: LIST
77128: LIST
77129: PUSH
77130: LD_INT 1
77132: PUSH
77133: LD_INT 1
77135: NEG
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: PUSH
77141: LD_INT 2
77143: PUSH
77144: LD_INT 0
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PUSH
77151: LD_INT 2
77153: PUSH
77154: LD_INT 1
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PUSH
77161: LD_INT 1
77163: PUSH
77164: LD_INT 2
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: PUSH
77171: LD_INT 0
77173: PUSH
77174: LD_INT 2
77176: PUSH
77177: EMPTY
77178: LIST
77179: LIST
77180: PUSH
77181: LD_INT 1
77183: NEG
77184: PUSH
77185: LD_INT 1
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: PUSH
77192: LD_INT 2
77194: NEG
77195: PUSH
77196: LD_INT 0
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PUSH
77203: LD_INT 2
77205: NEG
77206: PUSH
77207: LD_INT 1
77209: NEG
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: PUSH
77215: LD_INT 2
77217: NEG
77218: PUSH
77219: LD_INT 2
77221: NEG
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: PUSH
77227: LD_INT 2
77229: NEG
77230: PUSH
77231: LD_INT 3
77233: NEG
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: PUSH
77239: LD_INT 2
77241: PUSH
77242: LD_INT 1
77244: NEG
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: PUSH
77250: LD_INT 3
77252: PUSH
77253: LD_INT 1
77255: PUSH
77256: EMPTY
77257: LIST
77258: LIST
77259: PUSH
77260: LD_INT 1
77262: PUSH
77263: LD_INT 3
77265: PUSH
77266: EMPTY
77267: LIST
77268: LIST
77269: PUSH
77270: LD_INT 1
77272: NEG
77273: PUSH
77274: LD_INT 2
77276: PUSH
77277: EMPTY
77278: LIST
77279: LIST
77280: PUSH
77281: LD_INT 3
77283: NEG
77284: PUSH
77285: LD_INT 2
77287: NEG
77288: PUSH
77289: EMPTY
77290: LIST
77291: LIST
77292: PUSH
77293: EMPTY
77294: LIST
77295: LIST
77296: LIST
77297: LIST
77298: LIST
77299: LIST
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
77318: LD_ADDR_VAR 0 34
77322: PUSH
77323: LD_INT 0
77325: PUSH
77326: LD_INT 0
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: PUSH
77333: LD_INT 0
77335: PUSH
77336: LD_INT 1
77338: NEG
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: PUSH
77344: LD_INT 1
77346: PUSH
77347: LD_INT 0
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: PUSH
77354: LD_INT 1
77356: PUSH
77357: LD_INT 1
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: PUSH
77364: LD_INT 0
77366: PUSH
77367: LD_INT 1
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: PUSH
77374: LD_INT 1
77376: NEG
77377: PUSH
77378: LD_INT 0
77380: PUSH
77381: EMPTY
77382: LIST
77383: LIST
77384: PUSH
77385: LD_INT 1
77387: NEG
77388: PUSH
77389: LD_INT 1
77391: NEG
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: LD_INT 1
77399: NEG
77400: PUSH
77401: LD_INT 2
77403: NEG
77404: PUSH
77405: EMPTY
77406: LIST
77407: LIST
77408: PUSH
77409: LD_INT 0
77411: PUSH
77412: LD_INT 2
77414: NEG
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: PUSH
77420: LD_INT 1
77422: PUSH
77423: LD_INT 1
77425: NEG
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: PUSH
77431: LD_INT 2
77433: PUSH
77434: LD_INT 1
77436: PUSH
77437: EMPTY
77438: LIST
77439: LIST
77440: PUSH
77441: LD_INT 2
77443: PUSH
77444: LD_INT 2
77446: PUSH
77447: EMPTY
77448: LIST
77449: LIST
77450: PUSH
77451: LD_INT 1
77453: PUSH
77454: LD_INT 2
77456: PUSH
77457: EMPTY
77458: LIST
77459: LIST
77460: PUSH
77461: LD_INT 1
77463: NEG
77464: PUSH
77465: LD_INT 1
77467: PUSH
77468: EMPTY
77469: LIST
77470: LIST
77471: PUSH
77472: LD_INT 2
77474: NEG
77475: PUSH
77476: LD_INT 0
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: PUSH
77483: LD_INT 2
77485: NEG
77486: PUSH
77487: LD_INT 1
77489: NEG
77490: PUSH
77491: EMPTY
77492: LIST
77493: LIST
77494: PUSH
77495: LD_INT 2
77497: NEG
77498: PUSH
77499: LD_INT 2
77501: NEG
77502: PUSH
77503: EMPTY
77504: LIST
77505: LIST
77506: PUSH
77507: LD_INT 1
77509: NEG
77510: PUSH
77511: LD_INT 3
77513: NEG
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: LD_INT 1
77521: PUSH
77522: LD_INT 2
77524: NEG
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: LD_INT 3
77532: PUSH
77533: LD_INT 2
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: PUSH
77540: LD_INT 2
77542: PUSH
77543: LD_INT 3
77545: PUSH
77546: EMPTY
77547: LIST
77548: LIST
77549: PUSH
77550: LD_INT 2
77552: NEG
77553: PUSH
77554: LD_INT 1
77556: PUSH
77557: EMPTY
77558: LIST
77559: LIST
77560: PUSH
77561: LD_INT 3
77563: NEG
77564: PUSH
77565: LD_INT 1
77567: NEG
77568: PUSH
77569: EMPTY
77570: LIST
77571: LIST
77572: PUSH
77573: EMPTY
77574: LIST
77575: LIST
77576: LIST
77577: LIST
77578: LIST
77579: LIST
77580: LIST
77581: LIST
77582: LIST
77583: LIST
77584: LIST
77585: LIST
77586: LIST
77587: LIST
77588: LIST
77589: LIST
77590: LIST
77591: LIST
77592: LIST
77593: LIST
77594: LIST
77595: LIST
77596: LIST
77597: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
77598: LD_ADDR_VAR 0 35
77602: PUSH
77603: LD_INT 0
77605: PUSH
77606: LD_INT 0
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: LD_INT 0
77615: PUSH
77616: LD_INT 1
77618: NEG
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: PUSH
77624: LD_INT 1
77626: PUSH
77627: LD_INT 0
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PUSH
77634: LD_INT 1
77636: PUSH
77637: LD_INT 1
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: PUSH
77644: LD_INT 0
77646: PUSH
77647: LD_INT 1
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: PUSH
77654: LD_INT 1
77656: NEG
77657: PUSH
77658: LD_INT 0
77660: PUSH
77661: EMPTY
77662: LIST
77663: LIST
77664: PUSH
77665: LD_INT 1
77667: NEG
77668: PUSH
77669: LD_INT 1
77671: NEG
77672: PUSH
77673: EMPTY
77674: LIST
77675: LIST
77676: PUSH
77677: LD_INT 2
77679: PUSH
77680: LD_INT 1
77682: PUSH
77683: EMPTY
77684: LIST
77685: LIST
77686: PUSH
77687: LD_INT 2
77689: NEG
77690: PUSH
77691: LD_INT 1
77693: NEG
77694: PUSH
77695: EMPTY
77696: LIST
77697: LIST
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: LIST
77703: LIST
77704: LIST
77705: LIST
77706: LIST
77707: LIST
77708: LIST
77709: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
77710: LD_ADDR_VAR 0 36
77714: PUSH
77715: LD_INT 0
77717: PUSH
77718: LD_INT 0
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: PUSH
77725: LD_INT 0
77727: PUSH
77728: LD_INT 1
77730: NEG
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: PUSH
77736: LD_INT 1
77738: PUSH
77739: LD_INT 0
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: LD_INT 1
77748: PUSH
77749: LD_INT 1
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: PUSH
77756: LD_INT 0
77758: PUSH
77759: LD_INT 1
77761: PUSH
77762: EMPTY
77763: LIST
77764: LIST
77765: PUSH
77766: LD_INT 1
77768: NEG
77769: PUSH
77770: LD_INT 0
77772: PUSH
77773: EMPTY
77774: LIST
77775: LIST
77776: PUSH
77777: LD_INT 1
77779: NEG
77780: PUSH
77781: LD_INT 1
77783: NEG
77784: PUSH
77785: EMPTY
77786: LIST
77787: LIST
77788: PUSH
77789: LD_INT 1
77791: NEG
77792: PUSH
77793: LD_INT 2
77795: NEG
77796: PUSH
77797: EMPTY
77798: LIST
77799: LIST
77800: PUSH
77801: LD_INT 1
77803: PUSH
77804: LD_INT 2
77806: PUSH
77807: EMPTY
77808: LIST
77809: LIST
77810: PUSH
77811: EMPTY
77812: LIST
77813: LIST
77814: LIST
77815: LIST
77816: LIST
77817: LIST
77818: LIST
77819: LIST
77820: LIST
77821: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
77822: LD_ADDR_VAR 0 37
77826: PUSH
77827: LD_INT 0
77829: PUSH
77830: LD_INT 0
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PUSH
77837: LD_INT 0
77839: PUSH
77840: LD_INT 1
77842: NEG
77843: PUSH
77844: EMPTY
77845: LIST
77846: LIST
77847: PUSH
77848: LD_INT 1
77850: PUSH
77851: LD_INT 0
77853: PUSH
77854: EMPTY
77855: LIST
77856: LIST
77857: PUSH
77858: LD_INT 1
77860: PUSH
77861: LD_INT 1
77863: PUSH
77864: EMPTY
77865: LIST
77866: LIST
77867: PUSH
77868: LD_INT 0
77870: PUSH
77871: LD_INT 1
77873: PUSH
77874: EMPTY
77875: LIST
77876: LIST
77877: PUSH
77878: LD_INT 1
77880: NEG
77881: PUSH
77882: LD_INT 0
77884: PUSH
77885: EMPTY
77886: LIST
77887: LIST
77888: PUSH
77889: LD_INT 1
77891: NEG
77892: PUSH
77893: LD_INT 1
77895: NEG
77896: PUSH
77897: EMPTY
77898: LIST
77899: LIST
77900: PUSH
77901: LD_INT 1
77903: PUSH
77904: LD_INT 1
77906: NEG
77907: PUSH
77908: EMPTY
77909: LIST
77910: LIST
77911: PUSH
77912: LD_INT 1
77914: NEG
77915: PUSH
77916: LD_INT 1
77918: PUSH
77919: EMPTY
77920: LIST
77921: LIST
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: LIST
77927: LIST
77928: LIST
77929: LIST
77930: LIST
77931: LIST
77932: LIST
77933: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
77934: LD_ADDR_VAR 0 38
77938: PUSH
77939: LD_INT 0
77941: PUSH
77942: LD_INT 0
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: PUSH
77949: LD_INT 0
77951: PUSH
77952: LD_INT 1
77954: NEG
77955: PUSH
77956: EMPTY
77957: LIST
77958: LIST
77959: PUSH
77960: LD_INT 1
77962: PUSH
77963: LD_INT 0
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: PUSH
77970: LD_INT 1
77972: PUSH
77973: LD_INT 1
77975: PUSH
77976: EMPTY
77977: LIST
77978: LIST
77979: PUSH
77980: LD_INT 0
77982: PUSH
77983: LD_INT 1
77985: PUSH
77986: EMPTY
77987: LIST
77988: LIST
77989: PUSH
77990: LD_INT 1
77992: NEG
77993: PUSH
77994: LD_INT 0
77996: PUSH
77997: EMPTY
77998: LIST
77999: LIST
78000: PUSH
78001: LD_INT 1
78003: NEG
78004: PUSH
78005: LD_INT 1
78007: NEG
78008: PUSH
78009: EMPTY
78010: LIST
78011: LIST
78012: PUSH
78013: LD_INT 2
78015: PUSH
78016: LD_INT 1
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: PUSH
78023: LD_INT 2
78025: NEG
78026: PUSH
78027: LD_INT 1
78029: NEG
78030: PUSH
78031: EMPTY
78032: LIST
78033: LIST
78034: PUSH
78035: EMPTY
78036: LIST
78037: LIST
78038: LIST
78039: LIST
78040: LIST
78041: LIST
78042: LIST
78043: LIST
78044: LIST
78045: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
78046: LD_ADDR_VAR 0 39
78050: PUSH
78051: LD_INT 0
78053: PUSH
78054: LD_INT 0
78056: PUSH
78057: EMPTY
78058: LIST
78059: LIST
78060: PUSH
78061: LD_INT 0
78063: PUSH
78064: LD_INT 1
78066: NEG
78067: PUSH
78068: EMPTY
78069: LIST
78070: LIST
78071: PUSH
78072: LD_INT 1
78074: PUSH
78075: LD_INT 0
78077: PUSH
78078: EMPTY
78079: LIST
78080: LIST
78081: PUSH
78082: LD_INT 1
78084: PUSH
78085: LD_INT 1
78087: PUSH
78088: EMPTY
78089: LIST
78090: LIST
78091: PUSH
78092: LD_INT 0
78094: PUSH
78095: LD_INT 1
78097: PUSH
78098: EMPTY
78099: LIST
78100: LIST
78101: PUSH
78102: LD_INT 1
78104: NEG
78105: PUSH
78106: LD_INT 0
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: PUSH
78113: LD_INT 1
78115: NEG
78116: PUSH
78117: LD_INT 1
78119: NEG
78120: PUSH
78121: EMPTY
78122: LIST
78123: LIST
78124: PUSH
78125: LD_INT 1
78127: NEG
78128: PUSH
78129: LD_INT 2
78131: NEG
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PUSH
78137: LD_INT 1
78139: PUSH
78140: LD_INT 2
78142: PUSH
78143: EMPTY
78144: LIST
78145: LIST
78146: PUSH
78147: EMPTY
78148: LIST
78149: LIST
78150: LIST
78151: LIST
78152: LIST
78153: LIST
78154: LIST
78155: LIST
78156: LIST
78157: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
78158: LD_ADDR_VAR 0 40
78162: PUSH
78163: LD_INT 0
78165: PUSH
78166: LD_INT 0
78168: PUSH
78169: EMPTY
78170: LIST
78171: LIST
78172: PUSH
78173: LD_INT 0
78175: PUSH
78176: LD_INT 1
78178: NEG
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: PUSH
78184: LD_INT 1
78186: PUSH
78187: LD_INT 0
78189: PUSH
78190: EMPTY
78191: LIST
78192: LIST
78193: PUSH
78194: LD_INT 1
78196: PUSH
78197: LD_INT 1
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: PUSH
78204: LD_INT 0
78206: PUSH
78207: LD_INT 1
78209: PUSH
78210: EMPTY
78211: LIST
78212: LIST
78213: PUSH
78214: LD_INT 1
78216: NEG
78217: PUSH
78218: LD_INT 0
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: PUSH
78225: LD_INT 1
78227: NEG
78228: PUSH
78229: LD_INT 1
78231: NEG
78232: PUSH
78233: EMPTY
78234: LIST
78235: LIST
78236: PUSH
78237: LD_INT 1
78239: PUSH
78240: LD_INT 1
78242: NEG
78243: PUSH
78244: EMPTY
78245: LIST
78246: LIST
78247: PUSH
78248: LD_INT 1
78250: NEG
78251: PUSH
78252: LD_INT 1
78254: PUSH
78255: EMPTY
78256: LIST
78257: LIST
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: LIST
78263: LIST
78264: LIST
78265: LIST
78266: LIST
78267: LIST
78268: LIST
78269: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78270: LD_ADDR_VAR 0 41
78274: PUSH
78275: LD_INT 0
78277: PUSH
78278: LD_INT 0
78280: PUSH
78281: EMPTY
78282: LIST
78283: LIST
78284: PUSH
78285: LD_INT 0
78287: PUSH
78288: LD_INT 1
78290: NEG
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: PUSH
78296: LD_INT 1
78298: PUSH
78299: LD_INT 0
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: PUSH
78306: LD_INT 1
78308: PUSH
78309: LD_INT 1
78311: PUSH
78312: EMPTY
78313: LIST
78314: LIST
78315: PUSH
78316: LD_INT 0
78318: PUSH
78319: LD_INT 1
78321: PUSH
78322: EMPTY
78323: LIST
78324: LIST
78325: PUSH
78326: LD_INT 1
78328: NEG
78329: PUSH
78330: LD_INT 0
78332: PUSH
78333: EMPTY
78334: LIST
78335: LIST
78336: PUSH
78337: LD_INT 1
78339: NEG
78340: PUSH
78341: LD_INT 1
78343: NEG
78344: PUSH
78345: EMPTY
78346: LIST
78347: LIST
78348: PUSH
78349: LD_INT 1
78351: NEG
78352: PUSH
78353: LD_INT 2
78355: NEG
78356: PUSH
78357: EMPTY
78358: LIST
78359: LIST
78360: PUSH
78361: LD_INT 1
78363: PUSH
78364: LD_INT 1
78366: NEG
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: PUSH
78372: LD_INT 2
78374: PUSH
78375: LD_INT 0
78377: PUSH
78378: EMPTY
78379: LIST
78380: LIST
78381: PUSH
78382: LD_INT 2
78384: PUSH
78385: LD_INT 1
78387: PUSH
78388: EMPTY
78389: LIST
78390: LIST
78391: PUSH
78392: LD_INT 2
78394: PUSH
78395: LD_INT 2
78397: PUSH
78398: EMPTY
78399: LIST
78400: LIST
78401: PUSH
78402: LD_INT 1
78404: PUSH
78405: LD_INT 2
78407: PUSH
78408: EMPTY
78409: LIST
78410: LIST
78411: PUSH
78412: LD_INT 1
78414: NEG
78415: PUSH
78416: LD_INT 1
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: PUSH
78423: LD_INT 2
78425: NEG
78426: PUSH
78427: LD_INT 0
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: PUSH
78434: LD_INT 2
78436: NEG
78437: PUSH
78438: LD_INT 1
78440: NEG
78441: PUSH
78442: EMPTY
78443: LIST
78444: LIST
78445: PUSH
78446: LD_INT 2
78448: NEG
78449: PUSH
78450: LD_INT 2
78452: NEG
78453: PUSH
78454: EMPTY
78455: LIST
78456: LIST
78457: PUSH
78458: LD_INT 2
78460: NEG
78461: PUSH
78462: LD_INT 3
78464: NEG
78465: PUSH
78466: EMPTY
78467: LIST
78468: LIST
78469: PUSH
78470: LD_INT 2
78472: PUSH
78473: LD_INT 1
78475: NEG
78476: PUSH
78477: EMPTY
78478: LIST
78479: LIST
78480: PUSH
78481: LD_INT 3
78483: PUSH
78484: LD_INT 0
78486: PUSH
78487: EMPTY
78488: LIST
78489: LIST
78490: PUSH
78491: LD_INT 3
78493: PUSH
78494: LD_INT 1
78496: PUSH
78497: EMPTY
78498: LIST
78499: LIST
78500: PUSH
78501: LD_INT 3
78503: PUSH
78504: LD_INT 2
78506: PUSH
78507: EMPTY
78508: LIST
78509: LIST
78510: PUSH
78511: LD_INT 3
78513: PUSH
78514: LD_INT 3
78516: PUSH
78517: EMPTY
78518: LIST
78519: LIST
78520: PUSH
78521: LD_INT 2
78523: PUSH
78524: LD_INT 3
78526: PUSH
78527: EMPTY
78528: LIST
78529: LIST
78530: PUSH
78531: LD_INT 2
78533: NEG
78534: PUSH
78535: LD_INT 1
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: PUSH
78542: LD_INT 3
78544: NEG
78545: PUSH
78546: LD_INT 0
78548: PUSH
78549: EMPTY
78550: LIST
78551: LIST
78552: PUSH
78553: LD_INT 3
78555: NEG
78556: PUSH
78557: LD_INT 1
78559: NEG
78560: PUSH
78561: EMPTY
78562: LIST
78563: LIST
78564: PUSH
78565: LD_INT 3
78567: NEG
78568: PUSH
78569: LD_INT 2
78571: NEG
78572: PUSH
78573: EMPTY
78574: LIST
78575: LIST
78576: PUSH
78577: LD_INT 3
78579: NEG
78580: PUSH
78581: LD_INT 3
78583: NEG
78584: PUSH
78585: EMPTY
78586: LIST
78587: LIST
78588: PUSH
78589: EMPTY
78590: LIST
78591: LIST
78592: LIST
78593: LIST
78594: LIST
78595: LIST
78596: LIST
78597: LIST
78598: LIST
78599: LIST
78600: LIST
78601: LIST
78602: LIST
78603: LIST
78604: LIST
78605: LIST
78606: LIST
78607: LIST
78608: LIST
78609: LIST
78610: LIST
78611: LIST
78612: LIST
78613: LIST
78614: LIST
78615: LIST
78616: LIST
78617: LIST
78618: LIST
78619: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78620: LD_ADDR_VAR 0 42
78624: PUSH
78625: LD_INT 0
78627: PUSH
78628: LD_INT 0
78630: PUSH
78631: EMPTY
78632: LIST
78633: LIST
78634: PUSH
78635: LD_INT 0
78637: PUSH
78638: LD_INT 1
78640: NEG
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: PUSH
78646: LD_INT 1
78648: PUSH
78649: LD_INT 0
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: PUSH
78656: LD_INT 1
78658: PUSH
78659: LD_INT 1
78661: PUSH
78662: EMPTY
78663: LIST
78664: LIST
78665: PUSH
78666: LD_INT 0
78668: PUSH
78669: LD_INT 1
78671: PUSH
78672: EMPTY
78673: LIST
78674: LIST
78675: PUSH
78676: LD_INT 1
78678: NEG
78679: PUSH
78680: LD_INT 0
78682: PUSH
78683: EMPTY
78684: LIST
78685: LIST
78686: PUSH
78687: LD_INT 1
78689: NEG
78690: PUSH
78691: LD_INT 1
78693: NEG
78694: PUSH
78695: EMPTY
78696: LIST
78697: LIST
78698: PUSH
78699: LD_INT 1
78701: NEG
78702: PUSH
78703: LD_INT 2
78705: NEG
78706: PUSH
78707: EMPTY
78708: LIST
78709: LIST
78710: PUSH
78711: LD_INT 0
78713: PUSH
78714: LD_INT 2
78716: NEG
78717: PUSH
78718: EMPTY
78719: LIST
78720: LIST
78721: PUSH
78722: LD_INT 1
78724: PUSH
78725: LD_INT 1
78727: NEG
78728: PUSH
78729: EMPTY
78730: LIST
78731: LIST
78732: PUSH
78733: LD_INT 2
78735: PUSH
78736: LD_INT 1
78738: PUSH
78739: EMPTY
78740: LIST
78741: LIST
78742: PUSH
78743: LD_INT 2
78745: PUSH
78746: LD_INT 2
78748: PUSH
78749: EMPTY
78750: LIST
78751: LIST
78752: PUSH
78753: LD_INT 1
78755: PUSH
78756: LD_INT 2
78758: PUSH
78759: EMPTY
78760: LIST
78761: LIST
78762: PUSH
78763: LD_INT 0
78765: PUSH
78766: LD_INT 2
78768: PUSH
78769: EMPTY
78770: LIST
78771: LIST
78772: PUSH
78773: LD_INT 1
78775: NEG
78776: PUSH
78777: LD_INT 1
78779: PUSH
78780: EMPTY
78781: LIST
78782: LIST
78783: PUSH
78784: LD_INT 2
78786: NEG
78787: PUSH
78788: LD_INT 1
78790: NEG
78791: PUSH
78792: EMPTY
78793: LIST
78794: LIST
78795: PUSH
78796: LD_INT 2
78798: NEG
78799: PUSH
78800: LD_INT 2
78802: NEG
78803: PUSH
78804: EMPTY
78805: LIST
78806: LIST
78807: PUSH
78808: LD_INT 2
78810: NEG
78811: PUSH
78812: LD_INT 3
78814: NEG
78815: PUSH
78816: EMPTY
78817: LIST
78818: LIST
78819: PUSH
78820: LD_INT 1
78822: NEG
78823: PUSH
78824: LD_INT 3
78826: NEG
78827: PUSH
78828: EMPTY
78829: LIST
78830: LIST
78831: PUSH
78832: LD_INT 0
78834: PUSH
78835: LD_INT 3
78837: NEG
78838: PUSH
78839: EMPTY
78840: LIST
78841: LIST
78842: PUSH
78843: LD_INT 1
78845: PUSH
78846: LD_INT 2
78848: NEG
78849: PUSH
78850: EMPTY
78851: LIST
78852: LIST
78853: PUSH
78854: LD_INT 3
78856: PUSH
78857: LD_INT 2
78859: PUSH
78860: EMPTY
78861: LIST
78862: LIST
78863: PUSH
78864: LD_INT 3
78866: PUSH
78867: LD_INT 3
78869: PUSH
78870: EMPTY
78871: LIST
78872: LIST
78873: PUSH
78874: LD_INT 2
78876: PUSH
78877: LD_INT 3
78879: PUSH
78880: EMPTY
78881: LIST
78882: LIST
78883: PUSH
78884: LD_INT 1
78886: PUSH
78887: LD_INT 3
78889: PUSH
78890: EMPTY
78891: LIST
78892: LIST
78893: PUSH
78894: LD_INT 0
78896: PUSH
78897: LD_INT 3
78899: PUSH
78900: EMPTY
78901: LIST
78902: LIST
78903: PUSH
78904: LD_INT 1
78906: NEG
78907: PUSH
78908: LD_INT 2
78910: PUSH
78911: EMPTY
78912: LIST
78913: LIST
78914: PUSH
78915: LD_INT 3
78917: NEG
78918: PUSH
78919: LD_INT 2
78921: NEG
78922: PUSH
78923: EMPTY
78924: LIST
78925: LIST
78926: PUSH
78927: LD_INT 3
78929: NEG
78930: PUSH
78931: LD_INT 3
78933: NEG
78934: PUSH
78935: EMPTY
78936: LIST
78937: LIST
78938: PUSH
78939: EMPTY
78940: LIST
78941: LIST
78942: LIST
78943: LIST
78944: LIST
78945: LIST
78946: LIST
78947: LIST
78948: LIST
78949: LIST
78950: LIST
78951: LIST
78952: LIST
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: LIST
78958: LIST
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: LIST
78966: LIST
78967: LIST
78968: LIST
78969: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78970: LD_ADDR_VAR 0 43
78974: PUSH
78975: LD_INT 0
78977: PUSH
78978: LD_INT 0
78980: PUSH
78981: EMPTY
78982: LIST
78983: LIST
78984: PUSH
78985: LD_INT 0
78987: PUSH
78988: LD_INT 1
78990: NEG
78991: PUSH
78992: EMPTY
78993: LIST
78994: LIST
78995: PUSH
78996: LD_INT 1
78998: PUSH
78999: LD_INT 0
79001: PUSH
79002: EMPTY
79003: LIST
79004: LIST
79005: PUSH
79006: LD_INT 1
79008: PUSH
79009: LD_INT 1
79011: PUSH
79012: EMPTY
79013: LIST
79014: LIST
79015: PUSH
79016: LD_INT 0
79018: PUSH
79019: LD_INT 1
79021: PUSH
79022: EMPTY
79023: LIST
79024: LIST
79025: PUSH
79026: LD_INT 1
79028: NEG
79029: PUSH
79030: LD_INT 0
79032: PUSH
79033: EMPTY
79034: LIST
79035: LIST
79036: PUSH
79037: LD_INT 1
79039: NEG
79040: PUSH
79041: LD_INT 1
79043: NEG
79044: PUSH
79045: EMPTY
79046: LIST
79047: LIST
79048: PUSH
79049: LD_INT 1
79051: NEG
79052: PUSH
79053: LD_INT 2
79055: NEG
79056: PUSH
79057: EMPTY
79058: LIST
79059: LIST
79060: PUSH
79061: LD_INT 0
79063: PUSH
79064: LD_INT 2
79066: NEG
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: PUSH
79072: LD_INT 1
79074: PUSH
79075: LD_INT 1
79077: NEG
79078: PUSH
79079: EMPTY
79080: LIST
79081: LIST
79082: PUSH
79083: LD_INT 2
79085: PUSH
79086: LD_INT 0
79088: PUSH
79089: EMPTY
79090: LIST
79091: LIST
79092: PUSH
79093: LD_INT 2
79095: PUSH
79096: LD_INT 1
79098: PUSH
79099: EMPTY
79100: LIST
79101: LIST
79102: PUSH
79103: LD_INT 1
79105: PUSH
79106: LD_INT 2
79108: PUSH
79109: EMPTY
79110: LIST
79111: LIST
79112: PUSH
79113: LD_INT 0
79115: PUSH
79116: LD_INT 2
79118: PUSH
79119: EMPTY
79120: LIST
79121: LIST
79122: PUSH
79123: LD_INT 1
79125: NEG
79126: PUSH
79127: LD_INT 1
79129: PUSH
79130: EMPTY
79131: LIST
79132: LIST
79133: PUSH
79134: LD_INT 2
79136: NEG
79137: PUSH
79138: LD_INT 0
79140: PUSH
79141: EMPTY
79142: LIST
79143: LIST
79144: PUSH
79145: LD_INT 2
79147: NEG
79148: PUSH
79149: LD_INT 1
79151: NEG
79152: PUSH
79153: EMPTY
79154: LIST
79155: LIST
79156: PUSH
79157: LD_INT 1
79159: NEG
79160: PUSH
79161: LD_INT 3
79163: NEG
79164: PUSH
79165: EMPTY
79166: LIST
79167: LIST
79168: PUSH
79169: LD_INT 0
79171: PUSH
79172: LD_INT 3
79174: NEG
79175: PUSH
79176: EMPTY
79177: LIST
79178: LIST
79179: PUSH
79180: LD_INT 1
79182: PUSH
79183: LD_INT 2
79185: NEG
79186: PUSH
79187: EMPTY
79188: LIST
79189: LIST
79190: PUSH
79191: LD_INT 2
79193: PUSH
79194: LD_INT 1
79196: NEG
79197: PUSH
79198: EMPTY
79199: LIST
79200: LIST
79201: PUSH
79202: LD_INT 3
79204: PUSH
79205: LD_INT 0
79207: PUSH
79208: EMPTY
79209: LIST
79210: LIST
79211: PUSH
79212: LD_INT 3
79214: PUSH
79215: LD_INT 1
79217: PUSH
79218: EMPTY
79219: LIST
79220: LIST
79221: PUSH
79222: LD_INT 1
79224: PUSH
79225: LD_INT 3
79227: PUSH
79228: EMPTY
79229: LIST
79230: LIST
79231: PUSH
79232: LD_INT 0
79234: PUSH
79235: LD_INT 3
79237: PUSH
79238: EMPTY
79239: LIST
79240: LIST
79241: PUSH
79242: LD_INT 1
79244: NEG
79245: PUSH
79246: LD_INT 2
79248: PUSH
79249: EMPTY
79250: LIST
79251: LIST
79252: PUSH
79253: LD_INT 2
79255: NEG
79256: PUSH
79257: LD_INT 1
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: PUSH
79264: LD_INT 3
79266: NEG
79267: PUSH
79268: LD_INT 0
79270: PUSH
79271: EMPTY
79272: LIST
79273: LIST
79274: PUSH
79275: LD_INT 3
79277: NEG
79278: PUSH
79279: LD_INT 1
79281: NEG
79282: PUSH
79283: EMPTY
79284: LIST
79285: LIST
79286: PUSH
79287: EMPTY
79288: LIST
79289: LIST
79290: LIST
79291: LIST
79292: LIST
79293: LIST
79294: LIST
79295: LIST
79296: LIST
79297: LIST
79298: LIST
79299: LIST
79300: LIST
79301: LIST
79302: LIST
79303: LIST
79304: LIST
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
79318: LD_ADDR_VAR 0 44
79322: PUSH
79323: LD_INT 0
79325: PUSH
79326: LD_INT 0
79328: PUSH
79329: EMPTY
79330: LIST
79331: LIST
79332: PUSH
79333: LD_INT 0
79335: PUSH
79336: LD_INT 1
79338: NEG
79339: PUSH
79340: EMPTY
79341: LIST
79342: LIST
79343: PUSH
79344: LD_INT 1
79346: PUSH
79347: LD_INT 0
79349: PUSH
79350: EMPTY
79351: LIST
79352: LIST
79353: PUSH
79354: LD_INT 1
79356: PUSH
79357: LD_INT 1
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: PUSH
79364: LD_INT 0
79366: PUSH
79367: LD_INT 1
79369: PUSH
79370: EMPTY
79371: LIST
79372: LIST
79373: PUSH
79374: LD_INT 1
79376: NEG
79377: PUSH
79378: LD_INT 0
79380: PUSH
79381: EMPTY
79382: LIST
79383: LIST
79384: PUSH
79385: LD_INT 1
79387: NEG
79388: PUSH
79389: LD_INT 1
79391: NEG
79392: PUSH
79393: EMPTY
79394: LIST
79395: LIST
79396: PUSH
79397: LD_INT 1
79399: NEG
79400: PUSH
79401: LD_INT 2
79403: NEG
79404: PUSH
79405: EMPTY
79406: LIST
79407: LIST
79408: PUSH
79409: LD_INT 1
79411: PUSH
79412: LD_INT 1
79414: NEG
79415: PUSH
79416: EMPTY
79417: LIST
79418: LIST
79419: PUSH
79420: LD_INT 2
79422: PUSH
79423: LD_INT 0
79425: PUSH
79426: EMPTY
79427: LIST
79428: LIST
79429: PUSH
79430: LD_INT 2
79432: PUSH
79433: LD_INT 1
79435: PUSH
79436: EMPTY
79437: LIST
79438: LIST
79439: PUSH
79440: LD_INT 2
79442: PUSH
79443: LD_INT 2
79445: PUSH
79446: EMPTY
79447: LIST
79448: LIST
79449: PUSH
79450: LD_INT 1
79452: PUSH
79453: LD_INT 2
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: PUSH
79460: LD_INT 1
79462: NEG
79463: PUSH
79464: LD_INT 1
79466: PUSH
79467: EMPTY
79468: LIST
79469: LIST
79470: PUSH
79471: LD_INT 2
79473: NEG
79474: PUSH
79475: LD_INT 0
79477: PUSH
79478: EMPTY
79479: LIST
79480: LIST
79481: PUSH
79482: LD_INT 2
79484: NEG
79485: PUSH
79486: LD_INT 1
79488: NEG
79489: PUSH
79490: EMPTY
79491: LIST
79492: LIST
79493: PUSH
79494: LD_INT 2
79496: NEG
79497: PUSH
79498: LD_INT 2
79500: NEG
79501: PUSH
79502: EMPTY
79503: LIST
79504: LIST
79505: PUSH
79506: LD_INT 2
79508: NEG
79509: PUSH
79510: LD_INT 3
79512: NEG
79513: PUSH
79514: EMPTY
79515: LIST
79516: LIST
79517: PUSH
79518: LD_INT 2
79520: PUSH
79521: LD_INT 1
79523: NEG
79524: PUSH
79525: EMPTY
79526: LIST
79527: LIST
79528: PUSH
79529: LD_INT 3
79531: PUSH
79532: LD_INT 0
79534: PUSH
79535: EMPTY
79536: LIST
79537: LIST
79538: PUSH
79539: LD_INT 3
79541: PUSH
79542: LD_INT 1
79544: PUSH
79545: EMPTY
79546: LIST
79547: LIST
79548: PUSH
79549: LD_INT 3
79551: PUSH
79552: LD_INT 2
79554: PUSH
79555: EMPTY
79556: LIST
79557: LIST
79558: PUSH
79559: LD_INT 3
79561: PUSH
79562: LD_INT 3
79564: PUSH
79565: EMPTY
79566: LIST
79567: LIST
79568: PUSH
79569: LD_INT 2
79571: PUSH
79572: LD_INT 3
79574: PUSH
79575: EMPTY
79576: LIST
79577: LIST
79578: PUSH
79579: LD_INT 2
79581: NEG
79582: PUSH
79583: LD_INT 1
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: PUSH
79590: LD_INT 3
79592: NEG
79593: PUSH
79594: LD_INT 0
79596: PUSH
79597: EMPTY
79598: LIST
79599: LIST
79600: PUSH
79601: LD_INT 3
79603: NEG
79604: PUSH
79605: LD_INT 1
79607: NEG
79608: PUSH
79609: EMPTY
79610: LIST
79611: LIST
79612: PUSH
79613: LD_INT 3
79615: NEG
79616: PUSH
79617: LD_INT 2
79619: NEG
79620: PUSH
79621: EMPTY
79622: LIST
79623: LIST
79624: PUSH
79625: LD_INT 3
79627: NEG
79628: PUSH
79629: LD_INT 3
79631: NEG
79632: PUSH
79633: EMPTY
79634: LIST
79635: LIST
79636: PUSH
79637: EMPTY
79638: LIST
79639: LIST
79640: LIST
79641: LIST
79642: LIST
79643: LIST
79644: LIST
79645: LIST
79646: LIST
79647: LIST
79648: LIST
79649: LIST
79650: LIST
79651: LIST
79652: LIST
79653: LIST
79654: LIST
79655: LIST
79656: LIST
79657: LIST
79658: LIST
79659: LIST
79660: LIST
79661: LIST
79662: LIST
79663: LIST
79664: LIST
79665: LIST
79666: LIST
79667: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
79668: LD_ADDR_VAR 0 45
79672: PUSH
79673: LD_INT 0
79675: PUSH
79676: LD_INT 0
79678: PUSH
79679: EMPTY
79680: LIST
79681: LIST
79682: PUSH
79683: LD_INT 0
79685: PUSH
79686: LD_INT 1
79688: NEG
79689: PUSH
79690: EMPTY
79691: LIST
79692: LIST
79693: PUSH
79694: LD_INT 1
79696: PUSH
79697: LD_INT 0
79699: PUSH
79700: EMPTY
79701: LIST
79702: LIST
79703: PUSH
79704: LD_INT 1
79706: PUSH
79707: LD_INT 1
79709: PUSH
79710: EMPTY
79711: LIST
79712: LIST
79713: PUSH
79714: LD_INT 0
79716: PUSH
79717: LD_INT 1
79719: PUSH
79720: EMPTY
79721: LIST
79722: LIST
79723: PUSH
79724: LD_INT 1
79726: NEG
79727: PUSH
79728: LD_INT 0
79730: PUSH
79731: EMPTY
79732: LIST
79733: LIST
79734: PUSH
79735: LD_INT 1
79737: NEG
79738: PUSH
79739: LD_INT 1
79741: NEG
79742: PUSH
79743: EMPTY
79744: LIST
79745: LIST
79746: PUSH
79747: LD_INT 1
79749: NEG
79750: PUSH
79751: LD_INT 2
79753: NEG
79754: PUSH
79755: EMPTY
79756: LIST
79757: LIST
79758: PUSH
79759: LD_INT 0
79761: PUSH
79762: LD_INT 2
79764: NEG
79765: PUSH
79766: EMPTY
79767: LIST
79768: LIST
79769: PUSH
79770: LD_INT 1
79772: PUSH
79773: LD_INT 1
79775: NEG
79776: PUSH
79777: EMPTY
79778: LIST
79779: LIST
79780: PUSH
79781: LD_INT 2
79783: PUSH
79784: LD_INT 1
79786: PUSH
79787: EMPTY
79788: LIST
79789: LIST
79790: PUSH
79791: LD_INT 2
79793: PUSH
79794: LD_INT 2
79796: PUSH
79797: EMPTY
79798: LIST
79799: LIST
79800: PUSH
79801: LD_INT 1
79803: PUSH
79804: LD_INT 2
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: PUSH
79811: LD_INT 0
79813: PUSH
79814: LD_INT 2
79816: PUSH
79817: EMPTY
79818: LIST
79819: LIST
79820: PUSH
79821: LD_INT 1
79823: NEG
79824: PUSH
79825: LD_INT 1
79827: PUSH
79828: EMPTY
79829: LIST
79830: LIST
79831: PUSH
79832: LD_INT 2
79834: NEG
79835: PUSH
79836: LD_INT 1
79838: NEG
79839: PUSH
79840: EMPTY
79841: LIST
79842: LIST
79843: PUSH
79844: LD_INT 2
79846: NEG
79847: PUSH
79848: LD_INT 2
79850: NEG
79851: PUSH
79852: EMPTY
79853: LIST
79854: LIST
79855: PUSH
79856: LD_INT 2
79858: NEG
79859: PUSH
79860: LD_INT 3
79862: NEG
79863: PUSH
79864: EMPTY
79865: LIST
79866: LIST
79867: PUSH
79868: LD_INT 1
79870: NEG
79871: PUSH
79872: LD_INT 3
79874: NEG
79875: PUSH
79876: EMPTY
79877: LIST
79878: LIST
79879: PUSH
79880: LD_INT 0
79882: PUSH
79883: LD_INT 3
79885: NEG
79886: PUSH
79887: EMPTY
79888: LIST
79889: LIST
79890: PUSH
79891: LD_INT 1
79893: PUSH
79894: LD_INT 2
79896: NEG
79897: PUSH
79898: EMPTY
79899: LIST
79900: LIST
79901: PUSH
79902: LD_INT 3
79904: PUSH
79905: LD_INT 2
79907: PUSH
79908: EMPTY
79909: LIST
79910: LIST
79911: PUSH
79912: LD_INT 3
79914: PUSH
79915: LD_INT 3
79917: PUSH
79918: EMPTY
79919: LIST
79920: LIST
79921: PUSH
79922: LD_INT 2
79924: PUSH
79925: LD_INT 3
79927: PUSH
79928: EMPTY
79929: LIST
79930: LIST
79931: PUSH
79932: LD_INT 1
79934: PUSH
79935: LD_INT 3
79937: PUSH
79938: EMPTY
79939: LIST
79940: LIST
79941: PUSH
79942: LD_INT 0
79944: PUSH
79945: LD_INT 3
79947: PUSH
79948: EMPTY
79949: LIST
79950: LIST
79951: PUSH
79952: LD_INT 1
79954: NEG
79955: PUSH
79956: LD_INT 2
79958: PUSH
79959: EMPTY
79960: LIST
79961: LIST
79962: PUSH
79963: LD_INT 3
79965: NEG
79966: PUSH
79967: LD_INT 2
79969: NEG
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: PUSH
79975: LD_INT 3
79977: NEG
79978: PUSH
79979: LD_INT 3
79981: NEG
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: EMPTY
79988: LIST
79989: LIST
79990: LIST
79991: LIST
79992: LIST
79993: LIST
79994: LIST
79995: LIST
79996: LIST
79997: LIST
79998: LIST
79999: LIST
80000: LIST
80001: LIST
80002: LIST
80003: LIST
80004: LIST
80005: LIST
80006: LIST
80007: LIST
80008: LIST
80009: LIST
80010: LIST
80011: LIST
80012: LIST
80013: LIST
80014: LIST
80015: LIST
80016: LIST
80017: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
80018: LD_ADDR_VAR 0 46
80022: PUSH
80023: LD_INT 0
80025: PUSH
80026: LD_INT 0
80028: PUSH
80029: EMPTY
80030: LIST
80031: LIST
80032: PUSH
80033: LD_INT 0
80035: PUSH
80036: LD_INT 1
80038: NEG
80039: PUSH
80040: EMPTY
80041: LIST
80042: LIST
80043: PUSH
80044: LD_INT 1
80046: PUSH
80047: LD_INT 0
80049: PUSH
80050: EMPTY
80051: LIST
80052: LIST
80053: PUSH
80054: LD_INT 1
80056: PUSH
80057: LD_INT 1
80059: PUSH
80060: EMPTY
80061: LIST
80062: LIST
80063: PUSH
80064: LD_INT 0
80066: PUSH
80067: LD_INT 1
80069: PUSH
80070: EMPTY
80071: LIST
80072: LIST
80073: PUSH
80074: LD_INT 1
80076: NEG
80077: PUSH
80078: LD_INT 0
80080: PUSH
80081: EMPTY
80082: LIST
80083: LIST
80084: PUSH
80085: LD_INT 1
80087: NEG
80088: PUSH
80089: LD_INT 1
80091: NEG
80092: PUSH
80093: EMPTY
80094: LIST
80095: LIST
80096: PUSH
80097: LD_INT 1
80099: NEG
80100: PUSH
80101: LD_INT 2
80103: NEG
80104: PUSH
80105: EMPTY
80106: LIST
80107: LIST
80108: PUSH
80109: LD_INT 0
80111: PUSH
80112: LD_INT 2
80114: NEG
80115: PUSH
80116: EMPTY
80117: LIST
80118: LIST
80119: PUSH
80120: LD_INT 1
80122: PUSH
80123: LD_INT 1
80125: NEG
80126: PUSH
80127: EMPTY
80128: LIST
80129: LIST
80130: PUSH
80131: LD_INT 2
80133: PUSH
80134: LD_INT 0
80136: PUSH
80137: EMPTY
80138: LIST
80139: LIST
80140: PUSH
80141: LD_INT 2
80143: PUSH
80144: LD_INT 1
80146: PUSH
80147: EMPTY
80148: LIST
80149: LIST
80150: PUSH
80151: LD_INT 1
80153: PUSH
80154: LD_INT 2
80156: PUSH
80157: EMPTY
80158: LIST
80159: LIST
80160: PUSH
80161: LD_INT 0
80163: PUSH
80164: LD_INT 2
80166: PUSH
80167: EMPTY
80168: LIST
80169: LIST
80170: PUSH
80171: LD_INT 1
80173: NEG
80174: PUSH
80175: LD_INT 1
80177: PUSH
80178: EMPTY
80179: LIST
80180: LIST
80181: PUSH
80182: LD_INT 2
80184: NEG
80185: PUSH
80186: LD_INT 0
80188: PUSH
80189: EMPTY
80190: LIST
80191: LIST
80192: PUSH
80193: LD_INT 2
80195: NEG
80196: PUSH
80197: LD_INT 1
80199: NEG
80200: PUSH
80201: EMPTY
80202: LIST
80203: LIST
80204: PUSH
80205: LD_INT 1
80207: NEG
80208: PUSH
80209: LD_INT 3
80211: NEG
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: PUSH
80217: LD_INT 0
80219: PUSH
80220: LD_INT 3
80222: NEG
80223: PUSH
80224: EMPTY
80225: LIST
80226: LIST
80227: PUSH
80228: LD_INT 1
80230: PUSH
80231: LD_INT 2
80233: NEG
80234: PUSH
80235: EMPTY
80236: LIST
80237: LIST
80238: PUSH
80239: LD_INT 2
80241: PUSH
80242: LD_INT 1
80244: NEG
80245: PUSH
80246: EMPTY
80247: LIST
80248: LIST
80249: PUSH
80250: LD_INT 3
80252: PUSH
80253: LD_INT 0
80255: PUSH
80256: EMPTY
80257: LIST
80258: LIST
80259: PUSH
80260: LD_INT 3
80262: PUSH
80263: LD_INT 1
80265: PUSH
80266: EMPTY
80267: LIST
80268: LIST
80269: PUSH
80270: LD_INT 1
80272: PUSH
80273: LD_INT 3
80275: PUSH
80276: EMPTY
80277: LIST
80278: LIST
80279: PUSH
80280: LD_INT 0
80282: PUSH
80283: LD_INT 3
80285: PUSH
80286: EMPTY
80287: LIST
80288: LIST
80289: PUSH
80290: LD_INT 1
80292: NEG
80293: PUSH
80294: LD_INT 2
80296: PUSH
80297: EMPTY
80298: LIST
80299: LIST
80300: PUSH
80301: LD_INT 2
80303: NEG
80304: PUSH
80305: LD_INT 1
80307: PUSH
80308: EMPTY
80309: LIST
80310: LIST
80311: PUSH
80312: LD_INT 3
80314: NEG
80315: PUSH
80316: LD_INT 0
80318: PUSH
80319: EMPTY
80320: LIST
80321: LIST
80322: PUSH
80323: LD_INT 3
80325: NEG
80326: PUSH
80327: LD_INT 1
80329: NEG
80330: PUSH
80331: EMPTY
80332: LIST
80333: LIST
80334: PUSH
80335: EMPTY
80336: LIST
80337: LIST
80338: LIST
80339: LIST
80340: LIST
80341: LIST
80342: LIST
80343: LIST
80344: LIST
80345: LIST
80346: LIST
80347: LIST
80348: LIST
80349: LIST
80350: LIST
80351: LIST
80352: LIST
80353: LIST
80354: LIST
80355: LIST
80356: LIST
80357: LIST
80358: LIST
80359: LIST
80360: LIST
80361: LIST
80362: LIST
80363: LIST
80364: LIST
80365: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80366: LD_ADDR_VAR 0 47
80370: PUSH
80371: LD_INT 0
80373: PUSH
80374: LD_INT 0
80376: PUSH
80377: EMPTY
80378: LIST
80379: LIST
80380: PUSH
80381: LD_INT 0
80383: PUSH
80384: LD_INT 1
80386: NEG
80387: PUSH
80388: EMPTY
80389: LIST
80390: LIST
80391: PUSH
80392: LD_INT 1
80394: PUSH
80395: LD_INT 0
80397: PUSH
80398: EMPTY
80399: LIST
80400: LIST
80401: PUSH
80402: LD_INT 1
80404: PUSH
80405: LD_INT 1
80407: PUSH
80408: EMPTY
80409: LIST
80410: LIST
80411: PUSH
80412: LD_INT 0
80414: PUSH
80415: LD_INT 1
80417: PUSH
80418: EMPTY
80419: LIST
80420: LIST
80421: PUSH
80422: LD_INT 1
80424: NEG
80425: PUSH
80426: LD_INT 0
80428: PUSH
80429: EMPTY
80430: LIST
80431: LIST
80432: PUSH
80433: LD_INT 1
80435: NEG
80436: PUSH
80437: LD_INT 1
80439: NEG
80440: PUSH
80441: EMPTY
80442: LIST
80443: LIST
80444: PUSH
80445: LD_INT 1
80447: NEG
80448: PUSH
80449: LD_INT 2
80451: NEG
80452: PUSH
80453: EMPTY
80454: LIST
80455: LIST
80456: PUSH
80457: LD_INT 0
80459: PUSH
80460: LD_INT 2
80462: NEG
80463: PUSH
80464: EMPTY
80465: LIST
80466: LIST
80467: PUSH
80468: LD_INT 1
80470: PUSH
80471: LD_INT 1
80473: NEG
80474: PUSH
80475: EMPTY
80476: LIST
80477: LIST
80478: PUSH
80479: LD_INT 2
80481: NEG
80482: PUSH
80483: LD_INT 1
80485: NEG
80486: PUSH
80487: EMPTY
80488: LIST
80489: LIST
80490: PUSH
80491: LD_INT 2
80493: NEG
80494: PUSH
80495: LD_INT 2
80497: NEG
80498: PUSH
80499: EMPTY
80500: LIST
80501: LIST
80502: PUSH
80503: EMPTY
80504: LIST
80505: LIST
80506: LIST
80507: LIST
80508: LIST
80509: LIST
80510: LIST
80511: LIST
80512: LIST
80513: LIST
80514: LIST
80515: LIST
80516: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
80517: LD_ADDR_VAR 0 48
80521: PUSH
80522: LD_INT 0
80524: PUSH
80525: LD_INT 0
80527: PUSH
80528: EMPTY
80529: LIST
80530: LIST
80531: PUSH
80532: LD_INT 0
80534: PUSH
80535: LD_INT 1
80537: NEG
80538: PUSH
80539: EMPTY
80540: LIST
80541: LIST
80542: PUSH
80543: LD_INT 1
80545: PUSH
80546: LD_INT 0
80548: PUSH
80549: EMPTY
80550: LIST
80551: LIST
80552: PUSH
80553: LD_INT 1
80555: PUSH
80556: LD_INT 1
80558: PUSH
80559: EMPTY
80560: LIST
80561: LIST
80562: PUSH
80563: LD_INT 0
80565: PUSH
80566: LD_INT 1
80568: PUSH
80569: EMPTY
80570: LIST
80571: LIST
80572: PUSH
80573: LD_INT 1
80575: NEG
80576: PUSH
80577: LD_INT 0
80579: PUSH
80580: EMPTY
80581: LIST
80582: LIST
80583: PUSH
80584: LD_INT 1
80586: NEG
80587: PUSH
80588: LD_INT 1
80590: NEG
80591: PUSH
80592: EMPTY
80593: LIST
80594: LIST
80595: PUSH
80596: LD_INT 1
80598: NEG
80599: PUSH
80600: LD_INT 2
80602: NEG
80603: PUSH
80604: EMPTY
80605: LIST
80606: LIST
80607: PUSH
80608: LD_INT 0
80610: PUSH
80611: LD_INT 2
80613: NEG
80614: PUSH
80615: EMPTY
80616: LIST
80617: LIST
80618: PUSH
80619: LD_INT 1
80621: PUSH
80622: LD_INT 1
80624: NEG
80625: PUSH
80626: EMPTY
80627: LIST
80628: LIST
80629: PUSH
80630: LD_INT 2
80632: PUSH
80633: LD_INT 0
80635: PUSH
80636: EMPTY
80637: LIST
80638: LIST
80639: PUSH
80640: LD_INT 2
80642: PUSH
80643: LD_INT 1
80645: PUSH
80646: EMPTY
80647: LIST
80648: LIST
80649: PUSH
80650: EMPTY
80651: LIST
80652: LIST
80653: LIST
80654: LIST
80655: LIST
80656: LIST
80657: LIST
80658: LIST
80659: LIST
80660: LIST
80661: LIST
80662: LIST
80663: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
80664: LD_ADDR_VAR 0 49
80668: PUSH
80669: LD_INT 0
80671: PUSH
80672: LD_INT 0
80674: PUSH
80675: EMPTY
80676: LIST
80677: LIST
80678: PUSH
80679: LD_INT 0
80681: PUSH
80682: LD_INT 1
80684: NEG
80685: PUSH
80686: EMPTY
80687: LIST
80688: LIST
80689: PUSH
80690: LD_INT 1
80692: PUSH
80693: LD_INT 0
80695: PUSH
80696: EMPTY
80697: LIST
80698: LIST
80699: PUSH
80700: LD_INT 1
80702: PUSH
80703: LD_INT 1
80705: PUSH
80706: EMPTY
80707: LIST
80708: LIST
80709: PUSH
80710: LD_INT 0
80712: PUSH
80713: LD_INT 1
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: PUSH
80720: LD_INT 1
80722: NEG
80723: PUSH
80724: LD_INT 0
80726: PUSH
80727: EMPTY
80728: LIST
80729: LIST
80730: PUSH
80731: LD_INT 1
80733: NEG
80734: PUSH
80735: LD_INT 1
80737: NEG
80738: PUSH
80739: EMPTY
80740: LIST
80741: LIST
80742: PUSH
80743: LD_INT 1
80745: PUSH
80746: LD_INT 1
80748: NEG
80749: PUSH
80750: EMPTY
80751: LIST
80752: LIST
80753: PUSH
80754: LD_INT 2
80756: PUSH
80757: LD_INT 0
80759: PUSH
80760: EMPTY
80761: LIST
80762: LIST
80763: PUSH
80764: LD_INT 2
80766: PUSH
80767: LD_INT 1
80769: PUSH
80770: EMPTY
80771: LIST
80772: LIST
80773: PUSH
80774: LD_INT 2
80776: PUSH
80777: LD_INT 2
80779: PUSH
80780: EMPTY
80781: LIST
80782: LIST
80783: PUSH
80784: LD_INT 1
80786: PUSH
80787: LD_INT 2
80789: PUSH
80790: EMPTY
80791: LIST
80792: LIST
80793: PUSH
80794: EMPTY
80795: LIST
80796: LIST
80797: LIST
80798: LIST
80799: LIST
80800: LIST
80801: LIST
80802: LIST
80803: LIST
80804: LIST
80805: LIST
80806: LIST
80807: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
80808: LD_ADDR_VAR 0 50
80812: PUSH
80813: LD_INT 0
80815: PUSH
80816: LD_INT 0
80818: PUSH
80819: EMPTY
80820: LIST
80821: LIST
80822: PUSH
80823: LD_INT 0
80825: PUSH
80826: LD_INT 1
80828: NEG
80829: PUSH
80830: EMPTY
80831: LIST
80832: LIST
80833: PUSH
80834: LD_INT 1
80836: PUSH
80837: LD_INT 0
80839: PUSH
80840: EMPTY
80841: LIST
80842: LIST
80843: PUSH
80844: LD_INT 1
80846: PUSH
80847: LD_INT 1
80849: PUSH
80850: EMPTY
80851: LIST
80852: LIST
80853: PUSH
80854: LD_INT 0
80856: PUSH
80857: LD_INT 1
80859: PUSH
80860: EMPTY
80861: LIST
80862: LIST
80863: PUSH
80864: LD_INT 1
80866: NEG
80867: PUSH
80868: LD_INT 0
80870: PUSH
80871: EMPTY
80872: LIST
80873: LIST
80874: PUSH
80875: LD_INT 1
80877: NEG
80878: PUSH
80879: LD_INT 1
80881: NEG
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: PUSH
80887: LD_INT 2
80889: PUSH
80890: LD_INT 1
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: PUSH
80897: LD_INT 2
80899: PUSH
80900: LD_INT 2
80902: PUSH
80903: EMPTY
80904: LIST
80905: LIST
80906: PUSH
80907: LD_INT 1
80909: PUSH
80910: LD_INT 2
80912: PUSH
80913: EMPTY
80914: LIST
80915: LIST
80916: PUSH
80917: LD_INT 0
80919: PUSH
80920: LD_INT 2
80922: PUSH
80923: EMPTY
80924: LIST
80925: LIST
80926: PUSH
80927: LD_INT 1
80929: NEG
80930: PUSH
80931: LD_INT 1
80933: PUSH
80934: EMPTY
80935: LIST
80936: LIST
80937: PUSH
80938: EMPTY
80939: LIST
80940: LIST
80941: LIST
80942: LIST
80943: LIST
80944: LIST
80945: LIST
80946: LIST
80947: LIST
80948: LIST
80949: LIST
80950: LIST
80951: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
80952: LD_ADDR_VAR 0 51
80956: PUSH
80957: LD_INT 0
80959: PUSH
80960: LD_INT 0
80962: PUSH
80963: EMPTY
80964: LIST
80965: LIST
80966: PUSH
80967: LD_INT 0
80969: PUSH
80970: LD_INT 1
80972: NEG
80973: PUSH
80974: EMPTY
80975: LIST
80976: LIST
80977: PUSH
80978: LD_INT 1
80980: PUSH
80981: LD_INT 0
80983: PUSH
80984: EMPTY
80985: LIST
80986: LIST
80987: PUSH
80988: LD_INT 1
80990: PUSH
80991: LD_INT 1
80993: PUSH
80994: EMPTY
80995: LIST
80996: LIST
80997: PUSH
80998: LD_INT 0
81000: PUSH
81001: LD_INT 1
81003: PUSH
81004: EMPTY
81005: LIST
81006: LIST
81007: PUSH
81008: LD_INT 1
81010: NEG
81011: PUSH
81012: LD_INT 0
81014: PUSH
81015: EMPTY
81016: LIST
81017: LIST
81018: PUSH
81019: LD_INT 1
81021: NEG
81022: PUSH
81023: LD_INT 1
81025: NEG
81026: PUSH
81027: EMPTY
81028: LIST
81029: LIST
81030: PUSH
81031: LD_INT 1
81033: PUSH
81034: LD_INT 2
81036: PUSH
81037: EMPTY
81038: LIST
81039: LIST
81040: PUSH
81041: LD_INT 0
81043: PUSH
81044: LD_INT 2
81046: PUSH
81047: EMPTY
81048: LIST
81049: LIST
81050: PUSH
81051: LD_INT 1
81053: NEG
81054: PUSH
81055: LD_INT 1
81057: PUSH
81058: EMPTY
81059: LIST
81060: LIST
81061: PUSH
81062: LD_INT 2
81064: NEG
81065: PUSH
81066: LD_INT 0
81068: PUSH
81069: EMPTY
81070: LIST
81071: LIST
81072: PUSH
81073: LD_INT 2
81075: NEG
81076: PUSH
81077: LD_INT 1
81079: NEG
81080: PUSH
81081: EMPTY
81082: LIST
81083: LIST
81084: PUSH
81085: EMPTY
81086: LIST
81087: LIST
81088: LIST
81089: LIST
81090: LIST
81091: LIST
81092: LIST
81093: LIST
81094: LIST
81095: LIST
81096: LIST
81097: LIST
81098: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81099: LD_ADDR_VAR 0 52
81103: PUSH
81104: LD_INT 0
81106: PUSH
81107: LD_INT 0
81109: PUSH
81110: EMPTY
81111: LIST
81112: LIST
81113: PUSH
81114: LD_INT 0
81116: PUSH
81117: LD_INT 1
81119: NEG
81120: PUSH
81121: EMPTY
81122: LIST
81123: LIST
81124: PUSH
81125: LD_INT 1
81127: PUSH
81128: LD_INT 0
81130: PUSH
81131: EMPTY
81132: LIST
81133: LIST
81134: PUSH
81135: LD_INT 1
81137: PUSH
81138: LD_INT 1
81140: PUSH
81141: EMPTY
81142: LIST
81143: LIST
81144: PUSH
81145: LD_INT 0
81147: PUSH
81148: LD_INT 1
81150: PUSH
81151: EMPTY
81152: LIST
81153: LIST
81154: PUSH
81155: LD_INT 1
81157: NEG
81158: PUSH
81159: LD_INT 0
81161: PUSH
81162: EMPTY
81163: LIST
81164: LIST
81165: PUSH
81166: LD_INT 1
81168: NEG
81169: PUSH
81170: LD_INT 1
81172: NEG
81173: PUSH
81174: EMPTY
81175: LIST
81176: LIST
81177: PUSH
81178: LD_INT 1
81180: NEG
81181: PUSH
81182: LD_INT 2
81184: NEG
81185: PUSH
81186: EMPTY
81187: LIST
81188: LIST
81189: PUSH
81190: LD_INT 1
81192: NEG
81193: PUSH
81194: LD_INT 1
81196: PUSH
81197: EMPTY
81198: LIST
81199: LIST
81200: PUSH
81201: LD_INT 2
81203: NEG
81204: PUSH
81205: LD_INT 0
81207: PUSH
81208: EMPTY
81209: LIST
81210: LIST
81211: PUSH
81212: LD_INT 2
81214: NEG
81215: PUSH
81216: LD_INT 1
81218: NEG
81219: PUSH
81220: EMPTY
81221: LIST
81222: LIST
81223: PUSH
81224: LD_INT 2
81226: NEG
81227: PUSH
81228: LD_INT 2
81230: NEG
81231: PUSH
81232: EMPTY
81233: LIST
81234: LIST
81235: PUSH
81236: EMPTY
81237: LIST
81238: LIST
81239: LIST
81240: LIST
81241: LIST
81242: LIST
81243: LIST
81244: LIST
81245: LIST
81246: LIST
81247: LIST
81248: LIST
81249: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81250: LD_ADDR_VAR 0 53
81254: PUSH
81255: LD_INT 0
81257: PUSH
81258: LD_INT 0
81260: PUSH
81261: EMPTY
81262: LIST
81263: LIST
81264: PUSH
81265: LD_INT 0
81267: PUSH
81268: LD_INT 1
81270: NEG
81271: PUSH
81272: EMPTY
81273: LIST
81274: LIST
81275: PUSH
81276: LD_INT 1
81278: PUSH
81279: LD_INT 0
81281: PUSH
81282: EMPTY
81283: LIST
81284: LIST
81285: PUSH
81286: LD_INT 1
81288: PUSH
81289: LD_INT 1
81291: PUSH
81292: EMPTY
81293: LIST
81294: LIST
81295: PUSH
81296: LD_INT 0
81298: PUSH
81299: LD_INT 1
81301: PUSH
81302: EMPTY
81303: LIST
81304: LIST
81305: PUSH
81306: LD_INT 1
81308: NEG
81309: PUSH
81310: LD_INT 0
81312: PUSH
81313: EMPTY
81314: LIST
81315: LIST
81316: PUSH
81317: LD_INT 1
81319: NEG
81320: PUSH
81321: LD_INT 1
81323: NEG
81324: PUSH
81325: EMPTY
81326: LIST
81327: LIST
81328: PUSH
81329: LD_INT 1
81331: NEG
81332: PUSH
81333: LD_INT 2
81335: NEG
81336: PUSH
81337: EMPTY
81338: LIST
81339: LIST
81340: PUSH
81341: LD_INT 0
81343: PUSH
81344: LD_INT 2
81346: NEG
81347: PUSH
81348: EMPTY
81349: LIST
81350: LIST
81351: PUSH
81352: LD_INT 1
81354: PUSH
81355: LD_INT 1
81357: NEG
81358: PUSH
81359: EMPTY
81360: LIST
81361: LIST
81362: PUSH
81363: LD_INT 2
81365: PUSH
81366: LD_INT 0
81368: PUSH
81369: EMPTY
81370: LIST
81371: LIST
81372: PUSH
81373: LD_INT 2
81375: PUSH
81376: LD_INT 1
81378: PUSH
81379: EMPTY
81380: LIST
81381: LIST
81382: PUSH
81383: LD_INT 2
81385: PUSH
81386: LD_INT 2
81388: PUSH
81389: EMPTY
81390: LIST
81391: LIST
81392: PUSH
81393: LD_INT 1
81395: PUSH
81396: LD_INT 2
81398: PUSH
81399: EMPTY
81400: LIST
81401: LIST
81402: PUSH
81403: LD_INT 0
81405: PUSH
81406: LD_INT 2
81408: PUSH
81409: EMPTY
81410: LIST
81411: LIST
81412: PUSH
81413: LD_INT 1
81415: NEG
81416: PUSH
81417: LD_INT 1
81419: PUSH
81420: EMPTY
81421: LIST
81422: LIST
81423: PUSH
81424: LD_INT 2
81426: NEG
81427: PUSH
81428: LD_INT 0
81430: PUSH
81431: EMPTY
81432: LIST
81433: LIST
81434: PUSH
81435: LD_INT 2
81437: NEG
81438: PUSH
81439: LD_INT 1
81441: NEG
81442: PUSH
81443: EMPTY
81444: LIST
81445: LIST
81446: PUSH
81447: LD_INT 2
81449: NEG
81450: PUSH
81451: LD_INT 2
81453: NEG
81454: PUSH
81455: EMPTY
81456: LIST
81457: LIST
81458: PUSH
81459: EMPTY
81460: LIST
81461: LIST
81462: LIST
81463: LIST
81464: LIST
81465: LIST
81466: LIST
81467: LIST
81468: LIST
81469: LIST
81470: LIST
81471: LIST
81472: LIST
81473: LIST
81474: LIST
81475: LIST
81476: LIST
81477: LIST
81478: LIST
81479: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81480: LD_ADDR_VAR 0 54
81484: PUSH
81485: LD_INT 0
81487: PUSH
81488: LD_INT 0
81490: PUSH
81491: EMPTY
81492: LIST
81493: LIST
81494: PUSH
81495: LD_INT 0
81497: PUSH
81498: LD_INT 1
81500: NEG
81501: PUSH
81502: EMPTY
81503: LIST
81504: LIST
81505: PUSH
81506: LD_INT 1
81508: PUSH
81509: LD_INT 0
81511: PUSH
81512: EMPTY
81513: LIST
81514: LIST
81515: PUSH
81516: LD_INT 1
81518: PUSH
81519: LD_INT 1
81521: PUSH
81522: EMPTY
81523: LIST
81524: LIST
81525: PUSH
81526: LD_INT 0
81528: PUSH
81529: LD_INT 1
81531: PUSH
81532: EMPTY
81533: LIST
81534: LIST
81535: PUSH
81536: LD_INT 1
81538: NEG
81539: PUSH
81540: LD_INT 0
81542: PUSH
81543: EMPTY
81544: LIST
81545: LIST
81546: PUSH
81547: LD_INT 1
81549: NEG
81550: PUSH
81551: LD_INT 1
81553: NEG
81554: PUSH
81555: EMPTY
81556: LIST
81557: LIST
81558: PUSH
81559: LD_INT 1
81561: NEG
81562: PUSH
81563: LD_INT 2
81565: NEG
81566: PUSH
81567: EMPTY
81568: LIST
81569: LIST
81570: PUSH
81571: LD_INT 0
81573: PUSH
81574: LD_INT 2
81576: NEG
81577: PUSH
81578: EMPTY
81579: LIST
81580: LIST
81581: PUSH
81582: LD_INT 1
81584: PUSH
81585: LD_INT 1
81587: NEG
81588: PUSH
81589: EMPTY
81590: LIST
81591: LIST
81592: PUSH
81593: LD_INT 2
81595: PUSH
81596: LD_INT 0
81598: PUSH
81599: EMPTY
81600: LIST
81601: LIST
81602: PUSH
81603: LD_INT 2
81605: PUSH
81606: LD_INT 1
81608: PUSH
81609: EMPTY
81610: LIST
81611: LIST
81612: PUSH
81613: LD_INT 2
81615: PUSH
81616: LD_INT 2
81618: PUSH
81619: EMPTY
81620: LIST
81621: LIST
81622: PUSH
81623: LD_INT 1
81625: PUSH
81626: LD_INT 2
81628: PUSH
81629: EMPTY
81630: LIST
81631: LIST
81632: PUSH
81633: LD_INT 0
81635: PUSH
81636: LD_INT 2
81638: PUSH
81639: EMPTY
81640: LIST
81641: LIST
81642: PUSH
81643: LD_INT 1
81645: NEG
81646: PUSH
81647: LD_INT 1
81649: PUSH
81650: EMPTY
81651: LIST
81652: LIST
81653: PUSH
81654: LD_INT 2
81656: NEG
81657: PUSH
81658: LD_INT 0
81660: PUSH
81661: EMPTY
81662: LIST
81663: LIST
81664: PUSH
81665: LD_INT 2
81667: NEG
81668: PUSH
81669: LD_INT 1
81671: NEG
81672: PUSH
81673: EMPTY
81674: LIST
81675: LIST
81676: PUSH
81677: LD_INT 2
81679: NEG
81680: PUSH
81681: LD_INT 2
81683: NEG
81684: PUSH
81685: EMPTY
81686: LIST
81687: LIST
81688: PUSH
81689: EMPTY
81690: LIST
81691: LIST
81692: LIST
81693: LIST
81694: LIST
81695: LIST
81696: LIST
81697: LIST
81698: LIST
81699: LIST
81700: LIST
81701: LIST
81702: LIST
81703: LIST
81704: LIST
81705: LIST
81706: LIST
81707: LIST
81708: LIST
81709: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81710: LD_ADDR_VAR 0 55
81714: PUSH
81715: LD_INT 0
81717: PUSH
81718: LD_INT 0
81720: PUSH
81721: EMPTY
81722: LIST
81723: LIST
81724: PUSH
81725: LD_INT 0
81727: PUSH
81728: LD_INT 1
81730: NEG
81731: PUSH
81732: EMPTY
81733: LIST
81734: LIST
81735: PUSH
81736: LD_INT 1
81738: PUSH
81739: LD_INT 0
81741: PUSH
81742: EMPTY
81743: LIST
81744: LIST
81745: PUSH
81746: LD_INT 1
81748: PUSH
81749: LD_INT 1
81751: PUSH
81752: EMPTY
81753: LIST
81754: LIST
81755: PUSH
81756: LD_INT 0
81758: PUSH
81759: LD_INT 1
81761: PUSH
81762: EMPTY
81763: LIST
81764: LIST
81765: PUSH
81766: LD_INT 1
81768: NEG
81769: PUSH
81770: LD_INT 0
81772: PUSH
81773: EMPTY
81774: LIST
81775: LIST
81776: PUSH
81777: LD_INT 1
81779: NEG
81780: PUSH
81781: LD_INT 1
81783: NEG
81784: PUSH
81785: EMPTY
81786: LIST
81787: LIST
81788: PUSH
81789: LD_INT 1
81791: NEG
81792: PUSH
81793: LD_INT 2
81795: NEG
81796: PUSH
81797: EMPTY
81798: LIST
81799: LIST
81800: PUSH
81801: LD_INT 0
81803: PUSH
81804: LD_INT 2
81806: NEG
81807: PUSH
81808: EMPTY
81809: LIST
81810: LIST
81811: PUSH
81812: LD_INT 1
81814: PUSH
81815: LD_INT 1
81817: NEG
81818: PUSH
81819: EMPTY
81820: LIST
81821: LIST
81822: PUSH
81823: LD_INT 2
81825: PUSH
81826: LD_INT 0
81828: PUSH
81829: EMPTY
81830: LIST
81831: LIST
81832: PUSH
81833: LD_INT 2
81835: PUSH
81836: LD_INT 1
81838: PUSH
81839: EMPTY
81840: LIST
81841: LIST
81842: PUSH
81843: LD_INT 2
81845: PUSH
81846: LD_INT 2
81848: PUSH
81849: EMPTY
81850: LIST
81851: LIST
81852: PUSH
81853: LD_INT 1
81855: PUSH
81856: LD_INT 2
81858: PUSH
81859: EMPTY
81860: LIST
81861: LIST
81862: PUSH
81863: LD_INT 0
81865: PUSH
81866: LD_INT 2
81868: PUSH
81869: EMPTY
81870: LIST
81871: LIST
81872: PUSH
81873: LD_INT 1
81875: NEG
81876: PUSH
81877: LD_INT 1
81879: PUSH
81880: EMPTY
81881: LIST
81882: LIST
81883: PUSH
81884: LD_INT 2
81886: NEG
81887: PUSH
81888: LD_INT 0
81890: PUSH
81891: EMPTY
81892: LIST
81893: LIST
81894: PUSH
81895: LD_INT 2
81897: NEG
81898: PUSH
81899: LD_INT 1
81901: NEG
81902: PUSH
81903: EMPTY
81904: LIST
81905: LIST
81906: PUSH
81907: LD_INT 2
81909: NEG
81910: PUSH
81911: LD_INT 2
81913: NEG
81914: PUSH
81915: EMPTY
81916: LIST
81917: LIST
81918: PUSH
81919: EMPTY
81920: LIST
81921: LIST
81922: LIST
81923: LIST
81924: LIST
81925: LIST
81926: LIST
81927: LIST
81928: LIST
81929: LIST
81930: LIST
81931: LIST
81932: LIST
81933: LIST
81934: LIST
81935: LIST
81936: LIST
81937: LIST
81938: LIST
81939: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
81940: LD_ADDR_VAR 0 56
81944: PUSH
81945: LD_INT 0
81947: PUSH
81948: LD_INT 0
81950: PUSH
81951: EMPTY
81952: LIST
81953: LIST
81954: PUSH
81955: LD_INT 0
81957: PUSH
81958: LD_INT 1
81960: NEG
81961: PUSH
81962: EMPTY
81963: LIST
81964: LIST
81965: PUSH
81966: LD_INT 1
81968: PUSH
81969: LD_INT 0
81971: PUSH
81972: EMPTY
81973: LIST
81974: LIST
81975: PUSH
81976: LD_INT 1
81978: PUSH
81979: LD_INT 1
81981: PUSH
81982: EMPTY
81983: LIST
81984: LIST
81985: PUSH
81986: LD_INT 0
81988: PUSH
81989: LD_INT 1
81991: PUSH
81992: EMPTY
81993: LIST
81994: LIST
81995: PUSH
81996: LD_INT 1
81998: NEG
81999: PUSH
82000: LD_INT 0
82002: PUSH
82003: EMPTY
82004: LIST
82005: LIST
82006: PUSH
82007: LD_INT 1
82009: NEG
82010: PUSH
82011: LD_INT 1
82013: NEG
82014: PUSH
82015: EMPTY
82016: LIST
82017: LIST
82018: PUSH
82019: LD_INT 1
82021: NEG
82022: PUSH
82023: LD_INT 2
82025: NEG
82026: PUSH
82027: EMPTY
82028: LIST
82029: LIST
82030: PUSH
82031: LD_INT 0
82033: PUSH
82034: LD_INT 2
82036: NEG
82037: PUSH
82038: EMPTY
82039: LIST
82040: LIST
82041: PUSH
82042: LD_INT 1
82044: PUSH
82045: LD_INT 1
82047: NEG
82048: PUSH
82049: EMPTY
82050: LIST
82051: LIST
82052: PUSH
82053: LD_INT 2
82055: PUSH
82056: LD_INT 0
82058: PUSH
82059: EMPTY
82060: LIST
82061: LIST
82062: PUSH
82063: LD_INT 2
82065: PUSH
82066: LD_INT 1
82068: PUSH
82069: EMPTY
82070: LIST
82071: LIST
82072: PUSH
82073: LD_INT 2
82075: PUSH
82076: LD_INT 2
82078: PUSH
82079: EMPTY
82080: LIST
82081: LIST
82082: PUSH
82083: LD_INT 1
82085: PUSH
82086: LD_INT 2
82088: PUSH
82089: EMPTY
82090: LIST
82091: LIST
82092: PUSH
82093: LD_INT 0
82095: PUSH
82096: LD_INT 2
82098: PUSH
82099: EMPTY
82100: LIST
82101: LIST
82102: PUSH
82103: LD_INT 1
82105: NEG
82106: PUSH
82107: LD_INT 1
82109: PUSH
82110: EMPTY
82111: LIST
82112: LIST
82113: PUSH
82114: LD_INT 2
82116: NEG
82117: PUSH
82118: LD_INT 0
82120: PUSH
82121: EMPTY
82122: LIST
82123: LIST
82124: PUSH
82125: LD_INT 2
82127: NEG
82128: PUSH
82129: LD_INT 1
82131: NEG
82132: PUSH
82133: EMPTY
82134: LIST
82135: LIST
82136: PUSH
82137: LD_INT 2
82139: NEG
82140: PUSH
82141: LD_INT 2
82143: NEG
82144: PUSH
82145: EMPTY
82146: LIST
82147: LIST
82148: PUSH
82149: EMPTY
82150: LIST
82151: LIST
82152: LIST
82153: LIST
82154: LIST
82155: LIST
82156: LIST
82157: LIST
82158: LIST
82159: LIST
82160: LIST
82161: LIST
82162: LIST
82163: LIST
82164: LIST
82165: LIST
82166: LIST
82167: LIST
82168: LIST
82169: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
82170: LD_ADDR_VAR 0 57
82174: PUSH
82175: LD_INT 0
82177: PUSH
82178: LD_INT 0
82180: PUSH
82181: EMPTY
82182: LIST
82183: LIST
82184: PUSH
82185: LD_INT 0
82187: PUSH
82188: LD_INT 1
82190: NEG
82191: PUSH
82192: EMPTY
82193: LIST
82194: LIST
82195: PUSH
82196: LD_INT 1
82198: PUSH
82199: LD_INT 0
82201: PUSH
82202: EMPTY
82203: LIST
82204: LIST
82205: PUSH
82206: LD_INT 1
82208: PUSH
82209: LD_INT 1
82211: PUSH
82212: EMPTY
82213: LIST
82214: LIST
82215: PUSH
82216: LD_INT 0
82218: PUSH
82219: LD_INT 1
82221: PUSH
82222: EMPTY
82223: LIST
82224: LIST
82225: PUSH
82226: LD_INT 1
82228: NEG
82229: PUSH
82230: LD_INT 0
82232: PUSH
82233: EMPTY
82234: LIST
82235: LIST
82236: PUSH
82237: LD_INT 1
82239: NEG
82240: PUSH
82241: LD_INT 1
82243: NEG
82244: PUSH
82245: EMPTY
82246: LIST
82247: LIST
82248: PUSH
82249: LD_INT 1
82251: NEG
82252: PUSH
82253: LD_INT 2
82255: NEG
82256: PUSH
82257: EMPTY
82258: LIST
82259: LIST
82260: PUSH
82261: LD_INT 0
82263: PUSH
82264: LD_INT 2
82266: NEG
82267: PUSH
82268: EMPTY
82269: LIST
82270: LIST
82271: PUSH
82272: LD_INT 1
82274: PUSH
82275: LD_INT 1
82277: NEG
82278: PUSH
82279: EMPTY
82280: LIST
82281: LIST
82282: PUSH
82283: LD_INT 2
82285: PUSH
82286: LD_INT 0
82288: PUSH
82289: EMPTY
82290: LIST
82291: LIST
82292: PUSH
82293: LD_INT 2
82295: PUSH
82296: LD_INT 1
82298: PUSH
82299: EMPTY
82300: LIST
82301: LIST
82302: PUSH
82303: LD_INT 2
82305: PUSH
82306: LD_INT 2
82308: PUSH
82309: EMPTY
82310: LIST
82311: LIST
82312: PUSH
82313: LD_INT 1
82315: PUSH
82316: LD_INT 2
82318: PUSH
82319: EMPTY
82320: LIST
82321: LIST
82322: PUSH
82323: LD_INT 0
82325: PUSH
82326: LD_INT 2
82328: PUSH
82329: EMPTY
82330: LIST
82331: LIST
82332: PUSH
82333: LD_INT 1
82335: NEG
82336: PUSH
82337: LD_INT 1
82339: PUSH
82340: EMPTY
82341: LIST
82342: LIST
82343: PUSH
82344: LD_INT 2
82346: NEG
82347: PUSH
82348: LD_INT 0
82350: PUSH
82351: EMPTY
82352: LIST
82353: LIST
82354: PUSH
82355: LD_INT 2
82357: NEG
82358: PUSH
82359: LD_INT 1
82361: NEG
82362: PUSH
82363: EMPTY
82364: LIST
82365: LIST
82366: PUSH
82367: LD_INT 2
82369: NEG
82370: PUSH
82371: LD_INT 2
82373: NEG
82374: PUSH
82375: EMPTY
82376: LIST
82377: LIST
82378: PUSH
82379: EMPTY
82380: LIST
82381: LIST
82382: LIST
82383: LIST
82384: LIST
82385: LIST
82386: LIST
82387: LIST
82388: LIST
82389: LIST
82390: LIST
82391: LIST
82392: LIST
82393: LIST
82394: LIST
82395: LIST
82396: LIST
82397: LIST
82398: LIST
82399: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
82400: LD_ADDR_VAR 0 58
82404: PUSH
82405: LD_INT 0
82407: PUSH
82408: LD_INT 0
82410: PUSH
82411: EMPTY
82412: LIST
82413: LIST
82414: PUSH
82415: LD_INT 0
82417: PUSH
82418: LD_INT 1
82420: NEG
82421: PUSH
82422: EMPTY
82423: LIST
82424: LIST
82425: PUSH
82426: LD_INT 1
82428: PUSH
82429: LD_INT 0
82431: PUSH
82432: EMPTY
82433: LIST
82434: LIST
82435: PUSH
82436: LD_INT 1
82438: PUSH
82439: LD_INT 1
82441: PUSH
82442: EMPTY
82443: LIST
82444: LIST
82445: PUSH
82446: LD_INT 0
82448: PUSH
82449: LD_INT 1
82451: PUSH
82452: EMPTY
82453: LIST
82454: LIST
82455: PUSH
82456: LD_INT 1
82458: NEG
82459: PUSH
82460: LD_INT 0
82462: PUSH
82463: EMPTY
82464: LIST
82465: LIST
82466: PUSH
82467: LD_INT 1
82469: NEG
82470: PUSH
82471: LD_INT 1
82473: NEG
82474: PUSH
82475: EMPTY
82476: LIST
82477: LIST
82478: PUSH
82479: LD_INT 1
82481: NEG
82482: PUSH
82483: LD_INT 2
82485: NEG
82486: PUSH
82487: EMPTY
82488: LIST
82489: LIST
82490: PUSH
82491: LD_INT 0
82493: PUSH
82494: LD_INT 2
82496: NEG
82497: PUSH
82498: EMPTY
82499: LIST
82500: LIST
82501: PUSH
82502: LD_INT 1
82504: PUSH
82505: LD_INT 1
82507: NEG
82508: PUSH
82509: EMPTY
82510: LIST
82511: LIST
82512: PUSH
82513: LD_INT 2
82515: PUSH
82516: LD_INT 0
82518: PUSH
82519: EMPTY
82520: LIST
82521: LIST
82522: PUSH
82523: LD_INT 2
82525: PUSH
82526: LD_INT 1
82528: PUSH
82529: EMPTY
82530: LIST
82531: LIST
82532: PUSH
82533: LD_INT 2
82535: PUSH
82536: LD_INT 2
82538: PUSH
82539: EMPTY
82540: LIST
82541: LIST
82542: PUSH
82543: LD_INT 1
82545: PUSH
82546: LD_INT 2
82548: PUSH
82549: EMPTY
82550: LIST
82551: LIST
82552: PUSH
82553: LD_INT 0
82555: PUSH
82556: LD_INT 2
82558: PUSH
82559: EMPTY
82560: LIST
82561: LIST
82562: PUSH
82563: LD_INT 1
82565: NEG
82566: PUSH
82567: LD_INT 1
82569: PUSH
82570: EMPTY
82571: LIST
82572: LIST
82573: PUSH
82574: LD_INT 2
82576: NEG
82577: PUSH
82578: LD_INT 0
82580: PUSH
82581: EMPTY
82582: LIST
82583: LIST
82584: PUSH
82585: LD_INT 2
82587: NEG
82588: PUSH
82589: LD_INT 1
82591: NEG
82592: PUSH
82593: EMPTY
82594: LIST
82595: LIST
82596: PUSH
82597: LD_INT 2
82599: NEG
82600: PUSH
82601: LD_INT 2
82603: NEG
82604: PUSH
82605: EMPTY
82606: LIST
82607: LIST
82608: PUSH
82609: EMPTY
82610: LIST
82611: LIST
82612: LIST
82613: LIST
82614: LIST
82615: LIST
82616: LIST
82617: LIST
82618: LIST
82619: LIST
82620: LIST
82621: LIST
82622: LIST
82623: LIST
82624: LIST
82625: LIST
82626: LIST
82627: LIST
82628: LIST
82629: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
82630: LD_ADDR_VAR 0 59
82634: PUSH
82635: LD_INT 0
82637: PUSH
82638: LD_INT 0
82640: PUSH
82641: EMPTY
82642: LIST
82643: LIST
82644: PUSH
82645: LD_INT 0
82647: PUSH
82648: LD_INT 1
82650: NEG
82651: PUSH
82652: EMPTY
82653: LIST
82654: LIST
82655: PUSH
82656: LD_INT 1
82658: PUSH
82659: LD_INT 0
82661: PUSH
82662: EMPTY
82663: LIST
82664: LIST
82665: PUSH
82666: LD_INT 1
82668: PUSH
82669: LD_INT 1
82671: PUSH
82672: EMPTY
82673: LIST
82674: LIST
82675: PUSH
82676: LD_INT 0
82678: PUSH
82679: LD_INT 1
82681: PUSH
82682: EMPTY
82683: LIST
82684: LIST
82685: PUSH
82686: LD_INT 1
82688: NEG
82689: PUSH
82690: LD_INT 0
82692: PUSH
82693: EMPTY
82694: LIST
82695: LIST
82696: PUSH
82697: LD_INT 1
82699: NEG
82700: PUSH
82701: LD_INT 1
82703: NEG
82704: PUSH
82705: EMPTY
82706: LIST
82707: LIST
82708: PUSH
82709: EMPTY
82710: LIST
82711: LIST
82712: LIST
82713: LIST
82714: LIST
82715: LIST
82716: LIST
82717: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
82718: LD_ADDR_VAR 0 60
82722: PUSH
82723: LD_INT 0
82725: PUSH
82726: LD_INT 0
82728: PUSH
82729: EMPTY
82730: LIST
82731: LIST
82732: PUSH
82733: LD_INT 0
82735: PUSH
82736: LD_INT 1
82738: NEG
82739: PUSH
82740: EMPTY
82741: LIST
82742: LIST
82743: PUSH
82744: LD_INT 1
82746: PUSH
82747: LD_INT 0
82749: PUSH
82750: EMPTY
82751: LIST
82752: LIST
82753: PUSH
82754: LD_INT 1
82756: PUSH
82757: LD_INT 1
82759: PUSH
82760: EMPTY
82761: LIST
82762: LIST
82763: PUSH
82764: LD_INT 0
82766: PUSH
82767: LD_INT 1
82769: PUSH
82770: EMPTY
82771: LIST
82772: LIST
82773: PUSH
82774: LD_INT 1
82776: NEG
82777: PUSH
82778: LD_INT 0
82780: PUSH
82781: EMPTY
82782: LIST
82783: LIST
82784: PUSH
82785: LD_INT 1
82787: NEG
82788: PUSH
82789: LD_INT 1
82791: NEG
82792: PUSH
82793: EMPTY
82794: LIST
82795: LIST
82796: PUSH
82797: EMPTY
82798: LIST
82799: LIST
82800: LIST
82801: LIST
82802: LIST
82803: LIST
82804: LIST
82805: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
82806: LD_ADDR_VAR 0 61
82810: PUSH
82811: LD_INT 0
82813: PUSH
82814: LD_INT 0
82816: PUSH
82817: EMPTY
82818: LIST
82819: LIST
82820: PUSH
82821: LD_INT 0
82823: PUSH
82824: LD_INT 1
82826: NEG
82827: PUSH
82828: EMPTY
82829: LIST
82830: LIST
82831: PUSH
82832: LD_INT 1
82834: PUSH
82835: LD_INT 0
82837: PUSH
82838: EMPTY
82839: LIST
82840: LIST
82841: PUSH
82842: LD_INT 1
82844: PUSH
82845: LD_INT 1
82847: PUSH
82848: EMPTY
82849: LIST
82850: LIST
82851: PUSH
82852: LD_INT 0
82854: PUSH
82855: LD_INT 1
82857: PUSH
82858: EMPTY
82859: LIST
82860: LIST
82861: PUSH
82862: LD_INT 1
82864: NEG
82865: PUSH
82866: LD_INT 0
82868: PUSH
82869: EMPTY
82870: LIST
82871: LIST
82872: PUSH
82873: LD_INT 1
82875: NEG
82876: PUSH
82877: LD_INT 1
82879: NEG
82880: PUSH
82881: EMPTY
82882: LIST
82883: LIST
82884: PUSH
82885: EMPTY
82886: LIST
82887: LIST
82888: LIST
82889: LIST
82890: LIST
82891: LIST
82892: LIST
82893: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
82894: LD_ADDR_VAR 0 62
82898: PUSH
82899: LD_INT 0
82901: PUSH
82902: LD_INT 0
82904: PUSH
82905: EMPTY
82906: LIST
82907: LIST
82908: PUSH
82909: LD_INT 0
82911: PUSH
82912: LD_INT 1
82914: NEG
82915: PUSH
82916: EMPTY
82917: LIST
82918: LIST
82919: PUSH
82920: LD_INT 1
82922: PUSH
82923: LD_INT 0
82925: PUSH
82926: EMPTY
82927: LIST
82928: LIST
82929: PUSH
82930: LD_INT 1
82932: PUSH
82933: LD_INT 1
82935: PUSH
82936: EMPTY
82937: LIST
82938: LIST
82939: PUSH
82940: LD_INT 0
82942: PUSH
82943: LD_INT 1
82945: PUSH
82946: EMPTY
82947: LIST
82948: LIST
82949: PUSH
82950: LD_INT 1
82952: NEG
82953: PUSH
82954: LD_INT 0
82956: PUSH
82957: EMPTY
82958: LIST
82959: LIST
82960: PUSH
82961: LD_INT 1
82963: NEG
82964: PUSH
82965: LD_INT 1
82967: NEG
82968: PUSH
82969: EMPTY
82970: LIST
82971: LIST
82972: PUSH
82973: EMPTY
82974: LIST
82975: LIST
82976: LIST
82977: LIST
82978: LIST
82979: LIST
82980: LIST
82981: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
82982: LD_ADDR_VAR 0 63
82986: PUSH
82987: LD_INT 0
82989: PUSH
82990: LD_INT 0
82992: PUSH
82993: EMPTY
82994: LIST
82995: LIST
82996: PUSH
82997: LD_INT 0
82999: PUSH
83000: LD_INT 1
83002: NEG
83003: PUSH
83004: EMPTY
83005: LIST
83006: LIST
83007: PUSH
83008: LD_INT 1
83010: PUSH
83011: LD_INT 0
83013: PUSH
83014: EMPTY
83015: LIST
83016: LIST
83017: PUSH
83018: LD_INT 1
83020: PUSH
83021: LD_INT 1
83023: PUSH
83024: EMPTY
83025: LIST
83026: LIST
83027: PUSH
83028: LD_INT 0
83030: PUSH
83031: LD_INT 1
83033: PUSH
83034: EMPTY
83035: LIST
83036: LIST
83037: PUSH
83038: LD_INT 1
83040: NEG
83041: PUSH
83042: LD_INT 0
83044: PUSH
83045: EMPTY
83046: LIST
83047: LIST
83048: PUSH
83049: LD_INT 1
83051: NEG
83052: PUSH
83053: LD_INT 1
83055: NEG
83056: PUSH
83057: EMPTY
83058: LIST
83059: LIST
83060: PUSH
83061: EMPTY
83062: LIST
83063: LIST
83064: LIST
83065: LIST
83066: LIST
83067: LIST
83068: LIST
83069: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
83070: LD_ADDR_VAR 0 64
83074: PUSH
83075: LD_INT 0
83077: PUSH
83078: LD_INT 0
83080: PUSH
83081: EMPTY
83082: LIST
83083: LIST
83084: PUSH
83085: LD_INT 0
83087: PUSH
83088: LD_INT 1
83090: NEG
83091: PUSH
83092: EMPTY
83093: LIST
83094: LIST
83095: PUSH
83096: LD_INT 1
83098: PUSH
83099: LD_INT 0
83101: PUSH
83102: EMPTY
83103: LIST
83104: LIST
83105: PUSH
83106: LD_INT 1
83108: PUSH
83109: LD_INT 1
83111: PUSH
83112: EMPTY
83113: LIST
83114: LIST
83115: PUSH
83116: LD_INT 0
83118: PUSH
83119: LD_INT 1
83121: PUSH
83122: EMPTY
83123: LIST
83124: LIST
83125: PUSH
83126: LD_INT 1
83128: NEG
83129: PUSH
83130: LD_INT 0
83132: PUSH
83133: EMPTY
83134: LIST
83135: LIST
83136: PUSH
83137: LD_INT 1
83139: NEG
83140: PUSH
83141: LD_INT 1
83143: NEG
83144: PUSH
83145: EMPTY
83146: LIST
83147: LIST
83148: PUSH
83149: EMPTY
83150: LIST
83151: LIST
83152: LIST
83153: LIST
83154: LIST
83155: LIST
83156: LIST
83157: ST_TO_ADDR
// end ; 1 :
83158: GO 89055
83160: LD_INT 1
83162: DOUBLE
83163: EQUAL
83164: IFTRUE 83168
83166: GO 85791
83168: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
83169: LD_ADDR_VAR 0 11
83173: PUSH
83174: LD_INT 1
83176: NEG
83177: PUSH
83178: LD_INT 3
83180: NEG
83181: PUSH
83182: EMPTY
83183: LIST
83184: LIST
83185: PUSH
83186: LD_INT 0
83188: PUSH
83189: LD_INT 3
83191: NEG
83192: PUSH
83193: EMPTY
83194: LIST
83195: LIST
83196: PUSH
83197: LD_INT 1
83199: PUSH
83200: LD_INT 2
83202: NEG
83203: PUSH
83204: EMPTY
83205: LIST
83206: LIST
83207: PUSH
83208: EMPTY
83209: LIST
83210: LIST
83211: LIST
83212: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
83213: LD_ADDR_VAR 0 12
83217: PUSH
83218: LD_INT 2
83220: PUSH
83221: LD_INT 1
83223: NEG
83224: PUSH
83225: EMPTY
83226: LIST
83227: LIST
83228: PUSH
83229: LD_INT 3
83231: PUSH
83232: LD_INT 0
83234: PUSH
83235: EMPTY
83236: LIST
83237: LIST
83238: PUSH
83239: LD_INT 3
83241: PUSH
83242: LD_INT 1
83244: PUSH
83245: EMPTY
83246: LIST
83247: LIST
83248: PUSH
83249: EMPTY
83250: LIST
83251: LIST
83252: LIST
83253: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
83254: LD_ADDR_VAR 0 13
83258: PUSH
83259: LD_INT 3
83261: PUSH
83262: LD_INT 2
83264: PUSH
83265: EMPTY
83266: LIST
83267: LIST
83268: PUSH
83269: LD_INT 3
83271: PUSH
83272: LD_INT 3
83274: PUSH
83275: EMPTY
83276: LIST
83277: LIST
83278: PUSH
83279: LD_INT 2
83281: PUSH
83282: LD_INT 3
83284: PUSH
83285: EMPTY
83286: LIST
83287: LIST
83288: PUSH
83289: EMPTY
83290: LIST
83291: LIST
83292: LIST
83293: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
83294: LD_ADDR_VAR 0 14
83298: PUSH
83299: LD_INT 1
83301: PUSH
83302: LD_INT 3
83304: PUSH
83305: EMPTY
83306: LIST
83307: LIST
83308: PUSH
83309: LD_INT 0
83311: PUSH
83312: LD_INT 3
83314: PUSH
83315: EMPTY
83316: LIST
83317: LIST
83318: PUSH
83319: LD_INT 1
83321: NEG
83322: PUSH
83323: LD_INT 2
83325: PUSH
83326: EMPTY
83327: LIST
83328: LIST
83329: PUSH
83330: EMPTY
83331: LIST
83332: LIST
83333: LIST
83334: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
83335: LD_ADDR_VAR 0 15
83339: PUSH
83340: LD_INT 2
83342: NEG
83343: PUSH
83344: LD_INT 1
83346: PUSH
83347: EMPTY
83348: LIST
83349: LIST
83350: PUSH
83351: LD_INT 3
83353: NEG
83354: PUSH
83355: LD_INT 0
83357: PUSH
83358: EMPTY
83359: LIST
83360: LIST
83361: PUSH
83362: LD_INT 3
83364: NEG
83365: PUSH
83366: LD_INT 1
83368: NEG
83369: PUSH
83370: EMPTY
83371: LIST
83372: LIST
83373: PUSH
83374: EMPTY
83375: LIST
83376: LIST
83377: LIST
83378: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83379: LD_ADDR_VAR 0 16
83383: PUSH
83384: LD_INT 2
83386: NEG
83387: PUSH
83388: LD_INT 3
83390: NEG
83391: PUSH
83392: EMPTY
83393: LIST
83394: LIST
83395: PUSH
83396: LD_INT 3
83398: NEG
83399: PUSH
83400: LD_INT 2
83402: NEG
83403: PUSH
83404: EMPTY
83405: LIST
83406: LIST
83407: PUSH
83408: LD_INT 3
83410: NEG
83411: PUSH
83412: LD_INT 3
83414: NEG
83415: PUSH
83416: EMPTY
83417: LIST
83418: LIST
83419: PUSH
83420: EMPTY
83421: LIST
83422: LIST
83423: LIST
83424: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
83425: LD_ADDR_VAR 0 17
83429: PUSH
83430: LD_INT 1
83432: NEG
83433: PUSH
83434: LD_INT 3
83436: NEG
83437: PUSH
83438: EMPTY
83439: LIST
83440: LIST
83441: PUSH
83442: LD_INT 0
83444: PUSH
83445: LD_INT 3
83447: NEG
83448: PUSH
83449: EMPTY
83450: LIST
83451: LIST
83452: PUSH
83453: LD_INT 1
83455: PUSH
83456: LD_INT 2
83458: NEG
83459: PUSH
83460: EMPTY
83461: LIST
83462: LIST
83463: PUSH
83464: EMPTY
83465: LIST
83466: LIST
83467: LIST
83468: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
83469: LD_ADDR_VAR 0 18
83473: PUSH
83474: LD_INT 2
83476: PUSH
83477: LD_INT 1
83479: NEG
83480: PUSH
83481: EMPTY
83482: LIST
83483: LIST
83484: PUSH
83485: LD_INT 3
83487: PUSH
83488: LD_INT 0
83490: PUSH
83491: EMPTY
83492: LIST
83493: LIST
83494: PUSH
83495: LD_INT 3
83497: PUSH
83498: LD_INT 1
83500: PUSH
83501: EMPTY
83502: LIST
83503: LIST
83504: PUSH
83505: EMPTY
83506: LIST
83507: LIST
83508: LIST
83509: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
83510: LD_ADDR_VAR 0 19
83514: PUSH
83515: LD_INT 3
83517: PUSH
83518: LD_INT 2
83520: PUSH
83521: EMPTY
83522: LIST
83523: LIST
83524: PUSH
83525: LD_INT 3
83527: PUSH
83528: LD_INT 3
83530: PUSH
83531: EMPTY
83532: LIST
83533: LIST
83534: PUSH
83535: LD_INT 2
83537: PUSH
83538: LD_INT 3
83540: PUSH
83541: EMPTY
83542: LIST
83543: LIST
83544: PUSH
83545: EMPTY
83546: LIST
83547: LIST
83548: LIST
83549: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
83550: LD_ADDR_VAR 0 20
83554: PUSH
83555: LD_INT 1
83557: PUSH
83558: LD_INT 3
83560: PUSH
83561: EMPTY
83562: LIST
83563: LIST
83564: PUSH
83565: LD_INT 0
83567: PUSH
83568: LD_INT 3
83570: PUSH
83571: EMPTY
83572: LIST
83573: LIST
83574: PUSH
83575: LD_INT 1
83577: NEG
83578: PUSH
83579: LD_INT 2
83581: PUSH
83582: EMPTY
83583: LIST
83584: LIST
83585: PUSH
83586: EMPTY
83587: LIST
83588: LIST
83589: LIST
83590: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
83591: LD_ADDR_VAR 0 21
83595: PUSH
83596: LD_INT 2
83598: NEG
83599: PUSH
83600: LD_INT 1
83602: PUSH
83603: EMPTY
83604: LIST
83605: LIST
83606: PUSH
83607: LD_INT 3
83609: NEG
83610: PUSH
83611: LD_INT 0
83613: PUSH
83614: EMPTY
83615: LIST
83616: LIST
83617: PUSH
83618: LD_INT 3
83620: NEG
83621: PUSH
83622: LD_INT 1
83624: NEG
83625: PUSH
83626: EMPTY
83627: LIST
83628: LIST
83629: PUSH
83630: EMPTY
83631: LIST
83632: LIST
83633: LIST
83634: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83635: LD_ADDR_VAR 0 22
83639: PUSH
83640: LD_INT 2
83642: NEG
83643: PUSH
83644: LD_INT 3
83646: NEG
83647: PUSH
83648: EMPTY
83649: LIST
83650: LIST
83651: PUSH
83652: LD_INT 3
83654: NEG
83655: PUSH
83656: LD_INT 2
83658: NEG
83659: PUSH
83660: EMPTY
83661: LIST
83662: LIST
83663: PUSH
83664: LD_INT 3
83666: NEG
83667: PUSH
83668: LD_INT 3
83670: NEG
83671: PUSH
83672: EMPTY
83673: LIST
83674: LIST
83675: PUSH
83676: EMPTY
83677: LIST
83678: LIST
83679: LIST
83680: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
83681: LD_ADDR_VAR 0 23
83685: PUSH
83686: LD_INT 0
83688: PUSH
83689: LD_INT 3
83691: NEG
83692: PUSH
83693: EMPTY
83694: LIST
83695: LIST
83696: PUSH
83697: LD_INT 1
83699: NEG
83700: PUSH
83701: LD_INT 4
83703: NEG
83704: PUSH
83705: EMPTY
83706: LIST
83707: LIST
83708: PUSH
83709: LD_INT 1
83711: PUSH
83712: LD_INT 3
83714: NEG
83715: PUSH
83716: EMPTY
83717: LIST
83718: LIST
83719: PUSH
83720: EMPTY
83721: LIST
83722: LIST
83723: LIST
83724: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
83725: LD_ADDR_VAR 0 24
83729: PUSH
83730: LD_INT 3
83732: PUSH
83733: LD_INT 0
83735: PUSH
83736: EMPTY
83737: LIST
83738: LIST
83739: PUSH
83740: LD_INT 3
83742: PUSH
83743: LD_INT 1
83745: NEG
83746: PUSH
83747: EMPTY
83748: LIST
83749: LIST
83750: PUSH
83751: LD_INT 4
83753: PUSH
83754: LD_INT 1
83756: PUSH
83757: EMPTY
83758: LIST
83759: LIST
83760: PUSH
83761: EMPTY
83762: LIST
83763: LIST
83764: LIST
83765: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
83766: LD_ADDR_VAR 0 25
83770: PUSH
83771: LD_INT 3
83773: PUSH
83774: LD_INT 3
83776: PUSH
83777: EMPTY
83778: LIST
83779: LIST
83780: PUSH
83781: LD_INT 4
83783: PUSH
83784: LD_INT 3
83786: PUSH
83787: EMPTY
83788: LIST
83789: LIST
83790: PUSH
83791: LD_INT 3
83793: PUSH
83794: LD_INT 4
83796: PUSH
83797: EMPTY
83798: LIST
83799: LIST
83800: PUSH
83801: EMPTY
83802: LIST
83803: LIST
83804: LIST
83805: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
83806: LD_ADDR_VAR 0 26
83810: PUSH
83811: LD_INT 0
83813: PUSH
83814: LD_INT 3
83816: PUSH
83817: EMPTY
83818: LIST
83819: LIST
83820: PUSH
83821: LD_INT 1
83823: PUSH
83824: LD_INT 4
83826: PUSH
83827: EMPTY
83828: LIST
83829: LIST
83830: PUSH
83831: LD_INT 1
83833: NEG
83834: PUSH
83835: LD_INT 3
83837: PUSH
83838: EMPTY
83839: LIST
83840: LIST
83841: PUSH
83842: EMPTY
83843: LIST
83844: LIST
83845: LIST
83846: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
83847: LD_ADDR_VAR 0 27
83851: PUSH
83852: LD_INT 3
83854: NEG
83855: PUSH
83856: LD_INT 0
83858: PUSH
83859: EMPTY
83860: LIST
83861: LIST
83862: PUSH
83863: LD_INT 3
83865: NEG
83866: PUSH
83867: LD_INT 1
83869: PUSH
83870: EMPTY
83871: LIST
83872: LIST
83873: PUSH
83874: LD_INT 4
83876: NEG
83877: PUSH
83878: LD_INT 1
83880: NEG
83881: PUSH
83882: EMPTY
83883: LIST
83884: LIST
83885: PUSH
83886: EMPTY
83887: LIST
83888: LIST
83889: LIST
83890: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
83891: LD_ADDR_VAR 0 28
83895: PUSH
83896: LD_INT 3
83898: NEG
83899: PUSH
83900: LD_INT 3
83902: NEG
83903: PUSH
83904: EMPTY
83905: LIST
83906: LIST
83907: PUSH
83908: LD_INT 3
83910: NEG
83911: PUSH
83912: LD_INT 4
83914: NEG
83915: PUSH
83916: EMPTY
83917: LIST
83918: LIST
83919: PUSH
83920: LD_INT 4
83922: NEG
83923: PUSH
83924: LD_INT 3
83926: NEG
83927: PUSH
83928: EMPTY
83929: LIST
83930: LIST
83931: PUSH
83932: EMPTY
83933: LIST
83934: LIST
83935: LIST
83936: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
83937: LD_ADDR_VAR 0 29
83941: PUSH
83942: LD_INT 1
83944: NEG
83945: PUSH
83946: LD_INT 3
83948: NEG
83949: PUSH
83950: EMPTY
83951: LIST
83952: LIST
83953: PUSH
83954: LD_INT 0
83956: PUSH
83957: LD_INT 3
83959: NEG
83960: PUSH
83961: EMPTY
83962: LIST
83963: LIST
83964: PUSH
83965: LD_INT 1
83967: PUSH
83968: LD_INT 2
83970: NEG
83971: PUSH
83972: EMPTY
83973: LIST
83974: LIST
83975: PUSH
83976: LD_INT 1
83978: NEG
83979: PUSH
83980: LD_INT 4
83982: NEG
83983: PUSH
83984: EMPTY
83985: LIST
83986: LIST
83987: PUSH
83988: LD_INT 0
83990: PUSH
83991: LD_INT 4
83993: NEG
83994: PUSH
83995: EMPTY
83996: LIST
83997: LIST
83998: PUSH
83999: LD_INT 1
84001: PUSH
84002: LD_INT 3
84004: NEG
84005: PUSH
84006: EMPTY
84007: LIST
84008: LIST
84009: PUSH
84010: LD_INT 1
84012: NEG
84013: PUSH
84014: LD_INT 5
84016: NEG
84017: PUSH
84018: EMPTY
84019: LIST
84020: LIST
84021: PUSH
84022: LD_INT 0
84024: PUSH
84025: LD_INT 5
84027: NEG
84028: PUSH
84029: EMPTY
84030: LIST
84031: LIST
84032: PUSH
84033: LD_INT 1
84035: PUSH
84036: LD_INT 4
84038: NEG
84039: PUSH
84040: EMPTY
84041: LIST
84042: LIST
84043: PUSH
84044: LD_INT 1
84046: NEG
84047: PUSH
84048: LD_INT 6
84050: NEG
84051: PUSH
84052: EMPTY
84053: LIST
84054: LIST
84055: PUSH
84056: LD_INT 0
84058: PUSH
84059: LD_INT 6
84061: NEG
84062: PUSH
84063: EMPTY
84064: LIST
84065: LIST
84066: PUSH
84067: LD_INT 1
84069: PUSH
84070: LD_INT 5
84072: NEG
84073: PUSH
84074: EMPTY
84075: LIST
84076: LIST
84077: PUSH
84078: EMPTY
84079: LIST
84080: LIST
84081: LIST
84082: LIST
84083: LIST
84084: LIST
84085: LIST
84086: LIST
84087: LIST
84088: LIST
84089: LIST
84090: LIST
84091: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
84092: LD_ADDR_VAR 0 30
84096: PUSH
84097: LD_INT 2
84099: PUSH
84100: LD_INT 1
84102: NEG
84103: PUSH
84104: EMPTY
84105: LIST
84106: LIST
84107: PUSH
84108: LD_INT 3
84110: PUSH
84111: LD_INT 0
84113: PUSH
84114: EMPTY
84115: LIST
84116: LIST
84117: PUSH
84118: LD_INT 3
84120: PUSH
84121: LD_INT 1
84123: PUSH
84124: EMPTY
84125: LIST
84126: LIST
84127: PUSH
84128: LD_INT 3
84130: PUSH
84131: LD_INT 1
84133: NEG
84134: PUSH
84135: EMPTY
84136: LIST
84137: LIST
84138: PUSH
84139: LD_INT 4
84141: PUSH
84142: LD_INT 0
84144: PUSH
84145: EMPTY
84146: LIST
84147: LIST
84148: PUSH
84149: LD_INT 4
84151: PUSH
84152: LD_INT 1
84154: PUSH
84155: EMPTY
84156: LIST
84157: LIST
84158: PUSH
84159: LD_INT 4
84161: PUSH
84162: LD_INT 1
84164: NEG
84165: PUSH
84166: EMPTY
84167: LIST
84168: LIST
84169: PUSH
84170: LD_INT 5
84172: PUSH
84173: LD_INT 0
84175: PUSH
84176: EMPTY
84177: LIST
84178: LIST
84179: PUSH
84180: LD_INT 5
84182: PUSH
84183: LD_INT 1
84185: PUSH
84186: EMPTY
84187: LIST
84188: LIST
84189: PUSH
84190: LD_INT 5
84192: PUSH
84193: LD_INT 1
84195: NEG
84196: PUSH
84197: EMPTY
84198: LIST
84199: LIST
84200: PUSH
84201: LD_INT 6
84203: PUSH
84204: LD_INT 0
84206: PUSH
84207: EMPTY
84208: LIST
84209: LIST
84210: PUSH
84211: LD_INT 6
84213: PUSH
84214: LD_INT 1
84216: PUSH
84217: EMPTY
84218: LIST
84219: LIST
84220: PUSH
84221: EMPTY
84222: LIST
84223: LIST
84224: LIST
84225: LIST
84226: LIST
84227: LIST
84228: LIST
84229: LIST
84230: LIST
84231: LIST
84232: LIST
84233: LIST
84234: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
84235: LD_ADDR_VAR 0 31
84239: PUSH
84240: LD_INT 3
84242: PUSH
84243: LD_INT 2
84245: PUSH
84246: EMPTY
84247: LIST
84248: LIST
84249: PUSH
84250: LD_INT 3
84252: PUSH
84253: LD_INT 3
84255: PUSH
84256: EMPTY
84257: LIST
84258: LIST
84259: PUSH
84260: LD_INT 2
84262: PUSH
84263: LD_INT 3
84265: PUSH
84266: EMPTY
84267: LIST
84268: LIST
84269: PUSH
84270: LD_INT 4
84272: PUSH
84273: LD_INT 3
84275: PUSH
84276: EMPTY
84277: LIST
84278: LIST
84279: PUSH
84280: LD_INT 4
84282: PUSH
84283: LD_INT 4
84285: PUSH
84286: EMPTY
84287: LIST
84288: LIST
84289: PUSH
84290: LD_INT 3
84292: PUSH
84293: LD_INT 4
84295: PUSH
84296: EMPTY
84297: LIST
84298: LIST
84299: PUSH
84300: LD_INT 5
84302: PUSH
84303: LD_INT 4
84305: PUSH
84306: EMPTY
84307: LIST
84308: LIST
84309: PUSH
84310: LD_INT 5
84312: PUSH
84313: LD_INT 5
84315: PUSH
84316: EMPTY
84317: LIST
84318: LIST
84319: PUSH
84320: LD_INT 4
84322: PUSH
84323: LD_INT 5
84325: PUSH
84326: EMPTY
84327: LIST
84328: LIST
84329: PUSH
84330: LD_INT 6
84332: PUSH
84333: LD_INT 5
84335: PUSH
84336: EMPTY
84337: LIST
84338: LIST
84339: PUSH
84340: LD_INT 6
84342: PUSH
84343: LD_INT 6
84345: PUSH
84346: EMPTY
84347: LIST
84348: LIST
84349: PUSH
84350: LD_INT 5
84352: PUSH
84353: LD_INT 6
84355: PUSH
84356: EMPTY
84357: LIST
84358: LIST
84359: PUSH
84360: EMPTY
84361: LIST
84362: LIST
84363: LIST
84364: LIST
84365: LIST
84366: LIST
84367: LIST
84368: LIST
84369: LIST
84370: LIST
84371: LIST
84372: LIST
84373: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
84374: LD_ADDR_VAR 0 32
84378: PUSH
84379: LD_INT 1
84381: PUSH
84382: LD_INT 3
84384: PUSH
84385: EMPTY
84386: LIST
84387: LIST
84388: PUSH
84389: LD_INT 0
84391: PUSH
84392: LD_INT 3
84394: PUSH
84395: EMPTY
84396: LIST
84397: LIST
84398: PUSH
84399: LD_INT 1
84401: NEG
84402: PUSH
84403: LD_INT 2
84405: PUSH
84406: EMPTY
84407: LIST
84408: LIST
84409: PUSH
84410: LD_INT 1
84412: PUSH
84413: LD_INT 4
84415: PUSH
84416: EMPTY
84417: LIST
84418: LIST
84419: PUSH
84420: LD_INT 0
84422: PUSH
84423: LD_INT 4
84425: PUSH
84426: EMPTY
84427: LIST
84428: LIST
84429: PUSH
84430: LD_INT 1
84432: NEG
84433: PUSH
84434: LD_INT 3
84436: PUSH
84437: EMPTY
84438: LIST
84439: LIST
84440: PUSH
84441: LD_INT 1
84443: PUSH
84444: LD_INT 5
84446: PUSH
84447: EMPTY
84448: LIST
84449: LIST
84450: PUSH
84451: LD_INT 0
84453: PUSH
84454: LD_INT 5
84456: PUSH
84457: EMPTY
84458: LIST
84459: LIST
84460: PUSH
84461: LD_INT 1
84463: NEG
84464: PUSH
84465: LD_INT 4
84467: PUSH
84468: EMPTY
84469: LIST
84470: LIST
84471: PUSH
84472: LD_INT 1
84474: PUSH
84475: LD_INT 6
84477: PUSH
84478: EMPTY
84479: LIST
84480: LIST
84481: PUSH
84482: LD_INT 0
84484: PUSH
84485: LD_INT 6
84487: PUSH
84488: EMPTY
84489: LIST
84490: LIST
84491: PUSH
84492: LD_INT 1
84494: NEG
84495: PUSH
84496: LD_INT 5
84498: PUSH
84499: EMPTY
84500: LIST
84501: LIST
84502: PUSH
84503: EMPTY
84504: LIST
84505: LIST
84506: LIST
84507: LIST
84508: LIST
84509: LIST
84510: LIST
84511: LIST
84512: LIST
84513: LIST
84514: LIST
84515: LIST
84516: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
84517: LD_ADDR_VAR 0 33
84521: PUSH
84522: LD_INT 2
84524: NEG
84525: PUSH
84526: LD_INT 1
84528: PUSH
84529: EMPTY
84530: LIST
84531: LIST
84532: PUSH
84533: LD_INT 3
84535: NEG
84536: PUSH
84537: LD_INT 0
84539: PUSH
84540: EMPTY
84541: LIST
84542: LIST
84543: PUSH
84544: LD_INT 3
84546: NEG
84547: PUSH
84548: LD_INT 1
84550: NEG
84551: PUSH
84552: EMPTY
84553: LIST
84554: LIST
84555: PUSH
84556: LD_INT 3
84558: NEG
84559: PUSH
84560: LD_INT 1
84562: PUSH
84563: EMPTY
84564: LIST
84565: LIST
84566: PUSH
84567: LD_INT 4
84569: NEG
84570: PUSH
84571: LD_INT 0
84573: PUSH
84574: EMPTY
84575: LIST
84576: LIST
84577: PUSH
84578: LD_INT 4
84580: NEG
84581: PUSH
84582: LD_INT 1
84584: NEG
84585: PUSH
84586: EMPTY
84587: LIST
84588: LIST
84589: PUSH
84590: LD_INT 4
84592: NEG
84593: PUSH
84594: LD_INT 1
84596: PUSH
84597: EMPTY
84598: LIST
84599: LIST
84600: PUSH
84601: LD_INT 5
84603: NEG
84604: PUSH
84605: LD_INT 0
84607: PUSH
84608: EMPTY
84609: LIST
84610: LIST
84611: PUSH
84612: LD_INT 5
84614: NEG
84615: PUSH
84616: LD_INT 1
84618: NEG
84619: PUSH
84620: EMPTY
84621: LIST
84622: LIST
84623: PUSH
84624: LD_INT 5
84626: NEG
84627: PUSH
84628: LD_INT 1
84630: PUSH
84631: EMPTY
84632: LIST
84633: LIST
84634: PUSH
84635: LD_INT 6
84637: NEG
84638: PUSH
84639: LD_INT 0
84641: PUSH
84642: EMPTY
84643: LIST
84644: LIST
84645: PUSH
84646: LD_INT 6
84648: NEG
84649: PUSH
84650: LD_INT 1
84652: NEG
84653: PUSH
84654: EMPTY
84655: LIST
84656: LIST
84657: PUSH
84658: EMPTY
84659: LIST
84660: LIST
84661: LIST
84662: LIST
84663: LIST
84664: LIST
84665: LIST
84666: LIST
84667: LIST
84668: LIST
84669: LIST
84670: LIST
84671: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
84672: LD_ADDR_VAR 0 34
84676: PUSH
84677: LD_INT 2
84679: NEG
84680: PUSH
84681: LD_INT 3
84683: NEG
84684: PUSH
84685: EMPTY
84686: LIST
84687: LIST
84688: PUSH
84689: LD_INT 3
84691: NEG
84692: PUSH
84693: LD_INT 2
84695: NEG
84696: PUSH
84697: EMPTY
84698: LIST
84699: LIST
84700: PUSH
84701: LD_INT 3
84703: NEG
84704: PUSH
84705: LD_INT 3
84707: NEG
84708: PUSH
84709: EMPTY
84710: LIST
84711: LIST
84712: PUSH
84713: LD_INT 3
84715: NEG
84716: PUSH
84717: LD_INT 4
84719: NEG
84720: PUSH
84721: EMPTY
84722: LIST
84723: LIST
84724: PUSH
84725: LD_INT 4
84727: NEG
84728: PUSH
84729: LD_INT 3
84731: NEG
84732: PUSH
84733: EMPTY
84734: LIST
84735: LIST
84736: PUSH
84737: LD_INT 4
84739: NEG
84740: PUSH
84741: LD_INT 4
84743: NEG
84744: PUSH
84745: EMPTY
84746: LIST
84747: LIST
84748: PUSH
84749: LD_INT 4
84751: NEG
84752: PUSH
84753: LD_INT 5
84755: NEG
84756: PUSH
84757: EMPTY
84758: LIST
84759: LIST
84760: PUSH
84761: LD_INT 5
84763: NEG
84764: PUSH
84765: LD_INT 4
84767: NEG
84768: PUSH
84769: EMPTY
84770: LIST
84771: LIST
84772: PUSH
84773: LD_INT 5
84775: NEG
84776: PUSH
84777: LD_INT 5
84779: NEG
84780: PUSH
84781: EMPTY
84782: LIST
84783: LIST
84784: PUSH
84785: LD_INT 5
84787: NEG
84788: PUSH
84789: LD_INT 6
84791: NEG
84792: PUSH
84793: EMPTY
84794: LIST
84795: LIST
84796: PUSH
84797: LD_INT 6
84799: NEG
84800: PUSH
84801: LD_INT 5
84803: NEG
84804: PUSH
84805: EMPTY
84806: LIST
84807: LIST
84808: PUSH
84809: LD_INT 6
84811: NEG
84812: PUSH
84813: LD_INT 6
84815: NEG
84816: PUSH
84817: EMPTY
84818: LIST
84819: LIST
84820: PUSH
84821: EMPTY
84822: LIST
84823: LIST
84824: LIST
84825: LIST
84826: LIST
84827: LIST
84828: LIST
84829: LIST
84830: LIST
84831: LIST
84832: LIST
84833: LIST
84834: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
84835: LD_ADDR_VAR 0 41
84839: PUSH
84840: LD_INT 0
84842: PUSH
84843: LD_INT 2
84845: NEG
84846: PUSH
84847: EMPTY
84848: LIST
84849: LIST
84850: PUSH
84851: LD_INT 1
84853: NEG
84854: PUSH
84855: LD_INT 3
84857: NEG
84858: PUSH
84859: EMPTY
84860: LIST
84861: LIST
84862: PUSH
84863: LD_INT 1
84865: PUSH
84866: LD_INT 2
84868: NEG
84869: PUSH
84870: EMPTY
84871: LIST
84872: LIST
84873: PUSH
84874: EMPTY
84875: LIST
84876: LIST
84877: LIST
84878: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
84879: LD_ADDR_VAR 0 42
84883: PUSH
84884: LD_INT 2
84886: PUSH
84887: LD_INT 0
84889: PUSH
84890: EMPTY
84891: LIST
84892: LIST
84893: PUSH
84894: LD_INT 2
84896: PUSH
84897: LD_INT 1
84899: NEG
84900: PUSH
84901: EMPTY
84902: LIST
84903: LIST
84904: PUSH
84905: LD_INT 3
84907: PUSH
84908: LD_INT 1
84910: PUSH
84911: EMPTY
84912: LIST
84913: LIST
84914: PUSH
84915: EMPTY
84916: LIST
84917: LIST
84918: LIST
84919: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
84920: LD_ADDR_VAR 0 43
84924: PUSH
84925: LD_INT 2
84927: PUSH
84928: LD_INT 2
84930: PUSH
84931: EMPTY
84932: LIST
84933: LIST
84934: PUSH
84935: LD_INT 3
84937: PUSH
84938: LD_INT 2
84940: PUSH
84941: EMPTY
84942: LIST
84943: LIST
84944: PUSH
84945: LD_INT 2
84947: PUSH
84948: LD_INT 3
84950: PUSH
84951: EMPTY
84952: LIST
84953: LIST
84954: PUSH
84955: EMPTY
84956: LIST
84957: LIST
84958: LIST
84959: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
84960: LD_ADDR_VAR 0 44
84964: PUSH
84965: LD_INT 0
84967: PUSH
84968: LD_INT 2
84970: PUSH
84971: EMPTY
84972: LIST
84973: LIST
84974: PUSH
84975: LD_INT 1
84977: PUSH
84978: LD_INT 3
84980: PUSH
84981: EMPTY
84982: LIST
84983: LIST
84984: PUSH
84985: LD_INT 1
84987: NEG
84988: PUSH
84989: LD_INT 2
84991: PUSH
84992: EMPTY
84993: LIST
84994: LIST
84995: PUSH
84996: EMPTY
84997: LIST
84998: LIST
84999: LIST
85000: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
85001: LD_ADDR_VAR 0 45
85005: PUSH
85006: LD_INT 2
85008: NEG
85009: PUSH
85010: LD_INT 0
85012: PUSH
85013: EMPTY
85014: LIST
85015: LIST
85016: PUSH
85017: LD_INT 2
85019: NEG
85020: PUSH
85021: LD_INT 1
85023: PUSH
85024: EMPTY
85025: LIST
85026: LIST
85027: PUSH
85028: LD_INT 3
85030: NEG
85031: PUSH
85032: LD_INT 1
85034: NEG
85035: PUSH
85036: EMPTY
85037: LIST
85038: LIST
85039: PUSH
85040: EMPTY
85041: LIST
85042: LIST
85043: LIST
85044: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
85045: LD_ADDR_VAR 0 46
85049: PUSH
85050: LD_INT 2
85052: NEG
85053: PUSH
85054: LD_INT 2
85056: NEG
85057: PUSH
85058: EMPTY
85059: LIST
85060: LIST
85061: PUSH
85062: LD_INT 2
85064: NEG
85065: PUSH
85066: LD_INT 3
85068: NEG
85069: PUSH
85070: EMPTY
85071: LIST
85072: LIST
85073: PUSH
85074: LD_INT 3
85076: NEG
85077: PUSH
85078: LD_INT 2
85080: NEG
85081: PUSH
85082: EMPTY
85083: LIST
85084: LIST
85085: PUSH
85086: EMPTY
85087: LIST
85088: LIST
85089: LIST
85090: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
85091: LD_ADDR_VAR 0 47
85095: PUSH
85096: LD_INT 2
85098: NEG
85099: PUSH
85100: LD_INT 3
85102: NEG
85103: PUSH
85104: EMPTY
85105: LIST
85106: LIST
85107: PUSH
85108: LD_INT 1
85110: NEG
85111: PUSH
85112: LD_INT 3
85114: NEG
85115: PUSH
85116: EMPTY
85117: LIST
85118: LIST
85119: PUSH
85120: EMPTY
85121: LIST
85122: LIST
85123: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
85124: LD_ADDR_VAR 0 48
85128: PUSH
85129: LD_INT 1
85131: PUSH
85132: LD_INT 2
85134: NEG
85135: PUSH
85136: EMPTY
85137: LIST
85138: LIST
85139: PUSH
85140: LD_INT 2
85142: PUSH
85143: LD_INT 1
85145: NEG
85146: PUSH
85147: EMPTY
85148: LIST
85149: LIST
85150: PUSH
85151: EMPTY
85152: LIST
85153: LIST
85154: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
85155: LD_ADDR_VAR 0 49
85159: PUSH
85160: LD_INT 3
85162: PUSH
85163: LD_INT 1
85165: PUSH
85166: EMPTY
85167: LIST
85168: LIST
85169: PUSH
85170: LD_INT 3
85172: PUSH
85173: LD_INT 2
85175: PUSH
85176: EMPTY
85177: LIST
85178: LIST
85179: PUSH
85180: EMPTY
85181: LIST
85182: LIST
85183: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
85184: LD_ADDR_VAR 0 50
85188: PUSH
85189: LD_INT 2
85191: PUSH
85192: LD_INT 3
85194: PUSH
85195: EMPTY
85196: LIST
85197: LIST
85198: PUSH
85199: LD_INT 1
85201: PUSH
85202: LD_INT 3
85204: PUSH
85205: EMPTY
85206: LIST
85207: LIST
85208: PUSH
85209: EMPTY
85210: LIST
85211: LIST
85212: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
85213: LD_ADDR_VAR 0 51
85217: PUSH
85218: LD_INT 1
85220: NEG
85221: PUSH
85222: LD_INT 2
85224: PUSH
85225: EMPTY
85226: LIST
85227: LIST
85228: PUSH
85229: LD_INT 2
85231: NEG
85232: PUSH
85233: LD_INT 1
85235: PUSH
85236: EMPTY
85237: LIST
85238: LIST
85239: PUSH
85240: EMPTY
85241: LIST
85242: LIST
85243: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
85244: LD_ADDR_VAR 0 52
85248: PUSH
85249: LD_INT 3
85251: NEG
85252: PUSH
85253: LD_INT 1
85255: NEG
85256: PUSH
85257: EMPTY
85258: LIST
85259: LIST
85260: PUSH
85261: LD_INT 3
85263: NEG
85264: PUSH
85265: LD_INT 2
85267: NEG
85268: PUSH
85269: EMPTY
85270: LIST
85271: LIST
85272: PUSH
85273: EMPTY
85274: LIST
85275: LIST
85276: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
85277: LD_ADDR_VAR 0 53
85281: PUSH
85282: LD_INT 1
85284: NEG
85285: PUSH
85286: LD_INT 3
85288: NEG
85289: PUSH
85290: EMPTY
85291: LIST
85292: LIST
85293: PUSH
85294: LD_INT 0
85296: PUSH
85297: LD_INT 3
85299: NEG
85300: PUSH
85301: EMPTY
85302: LIST
85303: LIST
85304: PUSH
85305: LD_INT 1
85307: PUSH
85308: LD_INT 2
85310: NEG
85311: PUSH
85312: EMPTY
85313: LIST
85314: LIST
85315: PUSH
85316: EMPTY
85317: LIST
85318: LIST
85319: LIST
85320: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
85321: LD_ADDR_VAR 0 54
85325: PUSH
85326: LD_INT 2
85328: PUSH
85329: LD_INT 1
85331: NEG
85332: PUSH
85333: EMPTY
85334: LIST
85335: LIST
85336: PUSH
85337: LD_INT 3
85339: PUSH
85340: LD_INT 0
85342: PUSH
85343: EMPTY
85344: LIST
85345: LIST
85346: PUSH
85347: LD_INT 3
85349: PUSH
85350: LD_INT 1
85352: PUSH
85353: EMPTY
85354: LIST
85355: LIST
85356: PUSH
85357: EMPTY
85358: LIST
85359: LIST
85360: LIST
85361: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
85362: LD_ADDR_VAR 0 55
85366: PUSH
85367: LD_INT 3
85369: PUSH
85370: LD_INT 2
85372: PUSH
85373: EMPTY
85374: LIST
85375: LIST
85376: PUSH
85377: LD_INT 3
85379: PUSH
85380: LD_INT 3
85382: PUSH
85383: EMPTY
85384: LIST
85385: LIST
85386: PUSH
85387: LD_INT 2
85389: PUSH
85390: LD_INT 3
85392: PUSH
85393: EMPTY
85394: LIST
85395: LIST
85396: PUSH
85397: EMPTY
85398: LIST
85399: LIST
85400: LIST
85401: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
85402: LD_ADDR_VAR 0 56
85406: PUSH
85407: LD_INT 1
85409: PUSH
85410: LD_INT 3
85412: PUSH
85413: EMPTY
85414: LIST
85415: LIST
85416: PUSH
85417: LD_INT 0
85419: PUSH
85420: LD_INT 3
85422: PUSH
85423: EMPTY
85424: LIST
85425: LIST
85426: PUSH
85427: LD_INT 1
85429: NEG
85430: PUSH
85431: LD_INT 2
85433: PUSH
85434: EMPTY
85435: LIST
85436: LIST
85437: PUSH
85438: EMPTY
85439: LIST
85440: LIST
85441: LIST
85442: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
85443: LD_ADDR_VAR 0 57
85447: PUSH
85448: LD_INT 2
85450: NEG
85451: PUSH
85452: LD_INT 1
85454: PUSH
85455: EMPTY
85456: LIST
85457: LIST
85458: PUSH
85459: LD_INT 3
85461: NEG
85462: PUSH
85463: LD_INT 0
85465: PUSH
85466: EMPTY
85467: LIST
85468: LIST
85469: PUSH
85470: LD_INT 3
85472: NEG
85473: PUSH
85474: LD_INT 1
85476: NEG
85477: PUSH
85478: EMPTY
85479: LIST
85480: LIST
85481: PUSH
85482: EMPTY
85483: LIST
85484: LIST
85485: LIST
85486: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
85487: LD_ADDR_VAR 0 58
85491: PUSH
85492: LD_INT 2
85494: NEG
85495: PUSH
85496: LD_INT 3
85498: NEG
85499: PUSH
85500: EMPTY
85501: LIST
85502: LIST
85503: PUSH
85504: LD_INT 3
85506: NEG
85507: PUSH
85508: LD_INT 2
85510: NEG
85511: PUSH
85512: EMPTY
85513: LIST
85514: LIST
85515: PUSH
85516: LD_INT 3
85518: NEG
85519: PUSH
85520: LD_INT 3
85522: NEG
85523: PUSH
85524: EMPTY
85525: LIST
85526: LIST
85527: PUSH
85528: EMPTY
85529: LIST
85530: LIST
85531: LIST
85532: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
85533: LD_ADDR_VAR 0 59
85537: PUSH
85538: LD_INT 1
85540: NEG
85541: PUSH
85542: LD_INT 2
85544: NEG
85545: PUSH
85546: EMPTY
85547: LIST
85548: LIST
85549: PUSH
85550: LD_INT 0
85552: PUSH
85553: LD_INT 2
85555: NEG
85556: PUSH
85557: EMPTY
85558: LIST
85559: LIST
85560: PUSH
85561: LD_INT 1
85563: PUSH
85564: LD_INT 1
85566: NEG
85567: PUSH
85568: EMPTY
85569: LIST
85570: LIST
85571: PUSH
85572: EMPTY
85573: LIST
85574: LIST
85575: LIST
85576: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
85577: LD_ADDR_VAR 0 60
85581: PUSH
85582: LD_INT 1
85584: PUSH
85585: LD_INT 1
85587: NEG
85588: PUSH
85589: EMPTY
85590: LIST
85591: LIST
85592: PUSH
85593: LD_INT 2
85595: PUSH
85596: LD_INT 0
85598: PUSH
85599: EMPTY
85600: LIST
85601: LIST
85602: PUSH
85603: LD_INT 2
85605: PUSH
85606: LD_INT 1
85608: PUSH
85609: EMPTY
85610: LIST
85611: LIST
85612: PUSH
85613: EMPTY
85614: LIST
85615: LIST
85616: LIST
85617: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
85618: LD_ADDR_VAR 0 61
85622: PUSH
85623: LD_INT 2
85625: PUSH
85626: LD_INT 1
85628: PUSH
85629: EMPTY
85630: LIST
85631: LIST
85632: PUSH
85633: LD_INT 2
85635: PUSH
85636: LD_INT 2
85638: PUSH
85639: EMPTY
85640: LIST
85641: LIST
85642: PUSH
85643: LD_INT 1
85645: PUSH
85646: LD_INT 2
85648: PUSH
85649: EMPTY
85650: LIST
85651: LIST
85652: PUSH
85653: EMPTY
85654: LIST
85655: LIST
85656: LIST
85657: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
85658: LD_ADDR_VAR 0 62
85662: PUSH
85663: LD_INT 1
85665: PUSH
85666: LD_INT 2
85668: PUSH
85669: EMPTY
85670: LIST
85671: LIST
85672: PUSH
85673: LD_INT 0
85675: PUSH
85676: LD_INT 2
85678: PUSH
85679: EMPTY
85680: LIST
85681: LIST
85682: PUSH
85683: LD_INT 1
85685: NEG
85686: PUSH
85687: LD_INT 1
85689: PUSH
85690: EMPTY
85691: LIST
85692: LIST
85693: PUSH
85694: EMPTY
85695: LIST
85696: LIST
85697: LIST
85698: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
85699: LD_ADDR_VAR 0 63
85703: PUSH
85704: LD_INT 1
85706: NEG
85707: PUSH
85708: LD_INT 1
85710: PUSH
85711: EMPTY
85712: LIST
85713: LIST
85714: PUSH
85715: LD_INT 2
85717: NEG
85718: PUSH
85719: LD_INT 0
85721: PUSH
85722: EMPTY
85723: LIST
85724: LIST
85725: PUSH
85726: LD_INT 2
85728: NEG
85729: PUSH
85730: LD_INT 1
85732: NEG
85733: PUSH
85734: EMPTY
85735: LIST
85736: LIST
85737: PUSH
85738: EMPTY
85739: LIST
85740: LIST
85741: LIST
85742: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
85743: LD_ADDR_VAR 0 64
85747: PUSH
85748: LD_INT 1
85750: NEG
85751: PUSH
85752: LD_INT 2
85754: NEG
85755: PUSH
85756: EMPTY
85757: LIST
85758: LIST
85759: PUSH
85760: LD_INT 2
85762: NEG
85763: PUSH
85764: LD_INT 1
85766: NEG
85767: PUSH
85768: EMPTY
85769: LIST
85770: LIST
85771: PUSH
85772: LD_INT 2
85774: NEG
85775: PUSH
85776: LD_INT 2
85778: NEG
85779: PUSH
85780: EMPTY
85781: LIST
85782: LIST
85783: PUSH
85784: EMPTY
85785: LIST
85786: LIST
85787: LIST
85788: ST_TO_ADDR
// end ; 2 :
85789: GO 89055
85791: LD_INT 2
85793: DOUBLE
85794: EQUAL
85795: IFTRUE 85799
85797: GO 89054
85799: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
85800: LD_ADDR_VAR 0 29
85804: PUSH
85805: LD_INT 4
85807: PUSH
85808: LD_INT 0
85810: PUSH
85811: EMPTY
85812: LIST
85813: LIST
85814: PUSH
85815: LD_INT 4
85817: PUSH
85818: LD_INT 1
85820: NEG
85821: PUSH
85822: EMPTY
85823: LIST
85824: LIST
85825: PUSH
85826: LD_INT 5
85828: PUSH
85829: LD_INT 0
85831: PUSH
85832: EMPTY
85833: LIST
85834: LIST
85835: PUSH
85836: LD_INT 5
85838: PUSH
85839: LD_INT 1
85841: PUSH
85842: EMPTY
85843: LIST
85844: LIST
85845: PUSH
85846: LD_INT 4
85848: PUSH
85849: LD_INT 1
85851: PUSH
85852: EMPTY
85853: LIST
85854: LIST
85855: PUSH
85856: LD_INT 3
85858: PUSH
85859: LD_INT 0
85861: PUSH
85862: EMPTY
85863: LIST
85864: LIST
85865: PUSH
85866: LD_INT 3
85868: PUSH
85869: LD_INT 1
85871: NEG
85872: PUSH
85873: EMPTY
85874: LIST
85875: LIST
85876: PUSH
85877: LD_INT 3
85879: PUSH
85880: LD_INT 2
85882: NEG
85883: PUSH
85884: EMPTY
85885: LIST
85886: LIST
85887: PUSH
85888: LD_INT 5
85890: PUSH
85891: LD_INT 2
85893: PUSH
85894: EMPTY
85895: LIST
85896: LIST
85897: PUSH
85898: LD_INT 3
85900: PUSH
85901: LD_INT 3
85903: PUSH
85904: EMPTY
85905: LIST
85906: LIST
85907: PUSH
85908: LD_INT 3
85910: PUSH
85911: LD_INT 2
85913: PUSH
85914: EMPTY
85915: LIST
85916: LIST
85917: PUSH
85918: LD_INT 4
85920: PUSH
85921: LD_INT 3
85923: PUSH
85924: EMPTY
85925: LIST
85926: LIST
85927: PUSH
85928: LD_INT 4
85930: PUSH
85931: LD_INT 4
85933: PUSH
85934: EMPTY
85935: LIST
85936: LIST
85937: PUSH
85938: LD_INT 3
85940: PUSH
85941: LD_INT 4
85943: PUSH
85944: EMPTY
85945: LIST
85946: LIST
85947: PUSH
85948: LD_INT 2
85950: PUSH
85951: LD_INT 3
85953: PUSH
85954: EMPTY
85955: LIST
85956: LIST
85957: PUSH
85958: LD_INT 2
85960: PUSH
85961: LD_INT 2
85963: PUSH
85964: EMPTY
85965: LIST
85966: LIST
85967: PUSH
85968: LD_INT 4
85970: PUSH
85971: LD_INT 2
85973: PUSH
85974: EMPTY
85975: LIST
85976: LIST
85977: PUSH
85978: LD_INT 2
85980: PUSH
85981: LD_INT 4
85983: PUSH
85984: EMPTY
85985: LIST
85986: LIST
85987: PUSH
85988: LD_INT 0
85990: PUSH
85991: LD_INT 4
85993: PUSH
85994: EMPTY
85995: LIST
85996: LIST
85997: PUSH
85998: LD_INT 0
86000: PUSH
86001: LD_INT 3
86003: PUSH
86004: EMPTY
86005: LIST
86006: LIST
86007: PUSH
86008: LD_INT 1
86010: PUSH
86011: LD_INT 4
86013: PUSH
86014: EMPTY
86015: LIST
86016: LIST
86017: PUSH
86018: LD_INT 1
86020: PUSH
86021: LD_INT 5
86023: PUSH
86024: EMPTY
86025: LIST
86026: LIST
86027: PUSH
86028: LD_INT 0
86030: PUSH
86031: LD_INT 5
86033: PUSH
86034: EMPTY
86035: LIST
86036: LIST
86037: PUSH
86038: LD_INT 1
86040: NEG
86041: PUSH
86042: LD_INT 4
86044: PUSH
86045: EMPTY
86046: LIST
86047: LIST
86048: PUSH
86049: LD_INT 1
86051: NEG
86052: PUSH
86053: LD_INT 3
86055: PUSH
86056: EMPTY
86057: LIST
86058: LIST
86059: PUSH
86060: LD_INT 2
86062: PUSH
86063: LD_INT 5
86065: PUSH
86066: EMPTY
86067: LIST
86068: LIST
86069: PUSH
86070: LD_INT 2
86072: NEG
86073: PUSH
86074: LD_INT 3
86076: PUSH
86077: EMPTY
86078: LIST
86079: LIST
86080: PUSH
86081: LD_INT 3
86083: NEG
86084: PUSH
86085: LD_INT 0
86087: PUSH
86088: EMPTY
86089: LIST
86090: LIST
86091: PUSH
86092: LD_INT 3
86094: NEG
86095: PUSH
86096: LD_INT 1
86098: NEG
86099: PUSH
86100: EMPTY
86101: LIST
86102: LIST
86103: PUSH
86104: LD_INT 2
86106: NEG
86107: PUSH
86108: LD_INT 0
86110: PUSH
86111: EMPTY
86112: LIST
86113: LIST
86114: PUSH
86115: LD_INT 2
86117: NEG
86118: PUSH
86119: LD_INT 1
86121: PUSH
86122: EMPTY
86123: LIST
86124: LIST
86125: PUSH
86126: LD_INT 3
86128: NEG
86129: PUSH
86130: LD_INT 1
86132: PUSH
86133: EMPTY
86134: LIST
86135: LIST
86136: PUSH
86137: LD_INT 4
86139: NEG
86140: PUSH
86141: LD_INT 0
86143: PUSH
86144: EMPTY
86145: LIST
86146: LIST
86147: PUSH
86148: LD_INT 4
86150: NEG
86151: PUSH
86152: LD_INT 1
86154: NEG
86155: PUSH
86156: EMPTY
86157: LIST
86158: LIST
86159: PUSH
86160: LD_INT 4
86162: NEG
86163: PUSH
86164: LD_INT 2
86166: NEG
86167: PUSH
86168: EMPTY
86169: LIST
86170: LIST
86171: PUSH
86172: LD_INT 2
86174: NEG
86175: PUSH
86176: LD_INT 2
86178: PUSH
86179: EMPTY
86180: LIST
86181: LIST
86182: PUSH
86183: LD_INT 4
86185: NEG
86186: PUSH
86187: LD_INT 4
86189: NEG
86190: PUSH
86191: EMPTY
86192: LIST
86193: LIST
86194: PUSH
86195: LD_INT 4
86197: NEG
86198: PUSH
86199: LD_INT 5
86201: NEG
86202: PUSH
86203: EMPTY
86204: LIST
86205: LIST
86206: PUSH
86207: LD_INT 3
86209: NEG
86210: PUSH
86211: LD_INT 4
86213: NEG
86214: PUSH
86215: EMPTY
86216: LIST
86217: LIST
86218: PUSH
86219: LD_INT 3
86221: NEG
86222: PUSH
86223: LD_INT 3
86225: NEG
86226: PUSH
86227: EMPTY
86228: LIST
86229: LIST
86230: PUSH
86231: LD_INT 4
86233: NEG
86234: PUSH
86235: LD_INT 3
86237: NEG
86238: PUSH
86239: EMPTY
86240: LIST
86241: LIST
86242: PUSH
86243: LD_INT 5
86245: NEG
86246: PUSH
86247: LD_INT 4
86249: NEG
86250: PUSH
86251: EMPTY
86252: LIST
86253: LIST
86254: PUSH
86255: LD_INT 5
86257: NEG
86258: PUSH
86259: LD_INT 5
86261: NEG
86262: PUSH
86263: EMPTY
86264: LIST
86265: LIST
86266: PUSH
86267: LD_INT 3
86269: NEG
86270: PUSH
86271: LD_INT 5
86273: NEG
86274: PUSH
86275: EMPTY
86276: LIST
86277: LIST
86278: PUSH
86279: LD_INT 5
86281: NEG
86282: PUSH
86283: LD_INT 3
86285: NEG
86286: PUSH
86287: EMPTY
86288: LIST
86289: LIST
86290: PUSH
86291: EMPTY
86292: LIST
86293: LIST
86294: LIST
86295: LIST
86296: LIST
86297: LIST
86298: LIST
86299: LIST
86300: LIST
86301: LIST
86302: LIST
86303: LIST
86304: LIST
86305: LIST
86306: LIST
86307: LIST
86308: LIST
86309: LIST
86310: LIST
86311: LIST
86312: LIST
86313: LIST
86314: LIST
86315: LIST
86316: LIST
86317: LIST
86318: LIST
86319: LIST
86320: LIST
86321: LIST
86322: LIST
86323: LIST
86324: LIST
86325: LIST
86326: LIST
86327: LIST
86328: LIST
86329: LIST
86330: LIST
86331: LIST
86332: LIST
86333: LIST
86334: LIST
86335: LIST
86336: LIST
86337: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
86338: LD_ADDR_VAR 0 30
86342: PUSH
86343: LD_INT 4
86345: PUSH
86346: LD_INT 4
86348: PUSH
86349: EMPTY
86350: LIST
86351: LIST
86352: PUSH
86353: LD_INT 4
86355: PUSH
86356: LD_INT 3
86358: PUSH
86359: EMPTY
86360: LIST
86361: LIST
86362: PUSH
86363: LD_INT 5
86365: PUSH
86366: LD_INT 4
86368: PUSH
86369: EMPTY
86370: LIST
86371: LIST
86372: PUSH
86373: LD_INT 5
86375: PUSH
86376: LD_INT 5
86378: PUSH
86379: EMPTY
86380: LIST
86381: LIST
86382: PUSH
86383: LD_INT 4
86385: PUSH
86386: LD_INT 5
86388: PUSH
86389: EMPTY
86390: LIST
86391: LIST
86392: PUSH
86393: LD_INT 3
86395: PUSH
86396: LD_INT 4
86398: PUSH
86399: EMPTY
86400: LIST
86401: LIST
86402: PUSH
86403: LD_INT 3
86405: PUSH
86406: LD_INT 3
86408: PUSH
86409: EMPTY
86410: LIST
86411: LIST
86412: PUSH
86413: LD_INT 5
86415: PUSH
86416: LD_INT 3
86418: PUSH
86419: EMPTY
86420: LIST
86421: LIST
86422: PUSH
86423: LD_INT 3
86425: PUSH
86426: LD_INT 5
86428: PUSH
86429: EMPTY
86430: LIST
86431: LIST
86432: PUSH
86433: LD_INT 0
86435: PUSH
86436: LD_INT 3
86438: PUSH
86439: EMPTY
86440: LIST
86441: LIST
86442: PUSH
86443: LD_INT 0
86445: PUSH
86446: LD_INT 2
86448: PUSH
86449: EMPTY
86450: LIST
86451: LIST
86452: PUSH
86453: LD_INT 1
86455: PUSH
86456: LD_INT 3
86458: PUSH
86459: EMPTY
86460: LIST
86461: LIST
86462: PUSH
86463: LD_INT 1
86465: PUSH
86466: LD_INT 4
86468: PUSH
86469: EMPTY
86470: LIST
86471: LIST
86472: PUSH
86473: LD_INT 0
86475: PUSH
86476: LD_INT 4
86478: PUSH
86479: EMPTY
86480: LIST
86481: LIST
86482: PUSH
86483: LD_INT 1
86485: NEG
86486: PUSH
86487: LD_INT 3
86489: PUSH
86490: EMPTY
86491: LIST
86492: LIST
86493: PUSH
86494: LD_INT 1
86496: NEG
86497: PUSH
86498: LD_INT 2
86500: PUSH
86501: EMPTY
86502: LIST
86503: LIST
86504: PUSH
86505: LD_INT 2
86507: PUSH
86508: LD_INT 4
86510: PUSH
86511: EMPTY
86512: LIST
86513: LIST
86514: PUSH
86515: LD_INT 2
86517: NEG
86518: PUSH
86519: LD_INT 2
86521: PUSH
86522: EMPTY
86523: LIST
86524: LIST
86525: PUSH
86526: LD_INT 4
86528: NEG
86529: PUSH
86530: LD_INT 0
86532: PUSH
86533: EMPTY
86534: LIST
86535: LIST
86536: PUSH
86537: LD_INT 4
86539: NEG
86540: PUSH
86541: LD_INT 1
86543: NEG
86544: PUSH
86545: EMPTY
86546: LIST
86547: LIST
86548: PUSH
86549: LD_INT 3
86551: NEG
86552: PUSH
86553: LD_INT 0
86555: PUSH
86556: EMPTY
86557: LIST
86558: LIST
86559: PUSH
86560: LD_INT 3
86562: NEG
86563: PUSH
86564: LD_INT 1
86566: PUSH
86567: EMPTY
86568: LIST
86569: LIST
86570: PUSH
86571: LD_INT 4
86573: NEG
86574: PUSH
86575: LD_INT 1
86577: PUSH
86578: EMPTY
86579: LIST
86580: LIST
86581: PUSH
86582: LD_INT 5
86584: NEG
86585: PUSH
86586: LD_INT 0
86588: PUSH
86589: EMPTY
86590: LIST
86591: LIST
86592: PUSH
86593: LD_INT 5
86595: NEG
86596: PUSH
86597: LD_INT 1
86599: NEG
86600: PUSH
86601: EMPTY
86602: LIST
86603: LIST
86604: PUSH
86605: LD_INT 5
86607: NEG
86608: PUSH
86609: LD_INT 2
86611: NEG
86612: PUSH
86613: EMPTY
86614: LIST
86615: LIST
86616: PUSH
86617: LD_INT 3
86619: NEG
86620: PUSH
86621: LD_INT 2
86623: PUSH
86624: EMPTY
86625: LIST
86626: LIST
86627: PUSH
86628: LD_INT 3
86630: NEG
86631: PUSH
86632: LD_INT 3
86634: NEG
86635: PUSH
86636: EMPTY
86637: LIST
86638: LIST
86639: PUSH
86640: LD_INT 3
86642: NEG
86643: PUSH
86644: LD_INT 4
86646: NEG
86647: PUSH
86648: EMPTY
86649: LIST
86650: LIST
86651: PUSH
86652: LD_INT 2
86654: NEG
86655: PUSH
86656: LD_INT 3
86658: NEG
86659: PUSH
86660: EMPTY
86661: LIST
86662: LIST
86663: PUSH
86664: LD_INT 2
86666: NEG
86667: PUSH
86668: LD_INT 2
86670: NEG
86671: PUSH
86672: EMPTY
86673: LIST
86674: LIST
86675: PUSH
86676: LD_INT 3
86678: NEG
86679: PUSH
86680: LD_INT 2
86682: NEG
86683: PUSH
86684: EMPTY
86685: LIST
86686: LIST
86687: PUSH
86688: LD_INT 4
86690: NEG
86691: PUSH
86692: LD_INT 3
86694: NEG
86695: PUSH
86696: EMPTY
86697: LIST
86698: LIST
86699: PUSH
86700: LD_INT 4
86702: NEG
86703: PUSH
86704: LD_INT 4
86706: NEG
86707: PUSH
86708: EMPTY
86709: LIST
86710: LIST
86711: PUSH
86712: LD_INT 2
86714: NEG
86715: PUSH
86716: LD_INT 4
86718: NEG
86719: PUSH
86720: EMPTY
86721: LIST
86722: LIST
86723: PUSH
86724: LD_INT 4
86726: NEG
86727: PUSH
86728: LD_INT 2
86730: NEG
86731: PUSH
86732: EMPTY
86733: LIST
86734: LIST
86735: PUSH
86736: LD_INT 0
86738: PUSH
86739: LD_INT 4
86741: NEG
86742: PUSH
86743: EMPTY
86744: LIST
86745: LIST
86746: PUSH
86747: LD_INT 0
86749: PUSH
86750: LD_INT 5
86752: NEG
86753: PUSH
86754: EMPTY
86755: LIST
86756: LIST
86757: PUSH
86758: LD_INT 1
86760: PUSH
86761: LD_INT 4
86763: NEG
86764: PUSH
86765: EMPTY
86766: LIST
86767: LIST
86768: PUSH
86769: LD_INT 1
86771: PUSH
86772: LD_INT 3
86774: NEG
86775: PUSH
86776: EMPTY
86777: LIST
86778: LIST
86779: PUSH
86780: LD_INT 0
86782: PUSH
86783: LD_INT 3
86785: NEG
86786: PUSH
86787: EMPTY
86788: LIST
86789: LIST
86790: PUSH
86791: LD_INT 1
86793: NEG
86794: PUSH
86795: LD_INT 4
86797: NEG
86798: PUSH
86799: EMPTY
86800: LIST
86801: LIST
86802: PUSH
86803: LD_INT 1
86805: NEG
86806: PUSH
86807: LD_INT 5
86809: NEG
86810: PUSH
86811: EMPTY
86812: LIST
86813: LIST
86814: PUSH
86815: LD_INT 2
86817: PUSH
86818: LD_INT 3
86820: NEG
86821: PUSH
86822: EMPTY
86823: LIST
86824: LIST
86825: PUSH
86826: LD_INT 2
86828: NEG
86829: PUSH
86830: LD_INT 5
86832: NEG
86833: PUSH
86834: EMPTY
86835: LIST
86836: LIST
86837: PUSH
86838: EMPTY
86839: LIST
86840: LIST
86841: LIST
86842: LIST
86843: LIST
86844: LIST
86845: LIST
86846: LIST
86847: LIST
86848: LIST
86849: LIST
86850: LIST
86851: LIST
86852: LIST
86853: LIST
86854: LIST
86855: LIST
86856: LIST
86857: LIST
86858: LIST
86859: LIST
86860: LIST
86861: LIST
86862: LIST
86863: LIST
86864: LIST
86865: LIST
86866: LIST
86867: LIST
86868: LIST
86869: LIST
86870: LIST
86871: LIST
86872: LIST
86873: LIST
86874: LIST
86875: LIST
86876: LIST
86877: LIST
86878: LIST
86879: LIST
86880: LIST
86881: LIST
86882: LIST
86883: LIST
86884: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
86885: LD_ADDR_VAR 0 31
86889: PUSH
86890: LD_INT 0
86892: PUSH
86893: LD_INT 4
86895: PUSH
86896: EMPTY
86897: LIST
86898: LIST
86899: PUSH
86900: LD_INT 0
86902: PUSH
86903: LD_INT 3
86905: PUSH
86906: EMPTY
86907: LIST
86908: LIST
86909: PUSH
86910: LD_INT 1
86912: PUSH
86913: LD_INT 4
86915: PUSH
86916: EMPTY
86917: LIST
86918: LIST
86919: PUSH
86920: LD_INT 1
86922: PUSH
86923: LD_INT 5
86925: PUSH
86926: EMPTY
86927: LIST
86928: LIST
86929: PUSH
86930: LD_INT 0
86932: PUSH
86933: LD_INT 5
86935: PUSH
86936: EMPTY
86937: LIST
86938: LIST
86939: PUSH
86940: LD_INT 1
86942: NEG
86943: PUSH
86944: LD_INT 4
86946: PUSH
86947: EMPTY
86948: LIST
86949: LIST
86950: PUSH
86951: LD_INT 1
86953: NEG
86954: PUSH
86955: LD_INT 3
86957: PUSH
86958: EMPTY
86959: LIST
86960: LIST
86961: PUSH
86962: LD_INT 2
86964: PUSH
86965: LD_INT 5
86967: PUSH
86968: EMPTY
86969: LIST
86970: LIST
86971: PUSH
86972: LD_INT 2
86974: NEG
86975: PUSH
86976: LD_INT 3
86978: PUSH
86979: EMPTY
86980: LIST
86981: LIST
86982: PUSH
86983: LD_INT 3
86985: NEG
86986: PUSH
86987: LD_INT 0
86989: PUSH
86990: EMPTY
86991: LIST
86992: LIST
86993: PUSH
86994: LD_INT 3
86996: NEG
86997: PUSH
86998: LD_INT 1
87000: NEG
87001: PUSH
87002: EMPTY
87003: LIST
87004: LIST
87005: PUSH
87006: LD_INT 2
87008: NEG
87009: PUSH
87010: LD_INT 0
87012: PUSH
87013: EMPTY
87014: LIST
87015: LIST
87016: PUSH
87017: LD_INT 2
87019: NEG
87020: PUSH
87021: LD_INT 1
87023: PUSH
87024: EMPTY
87025: LIST
87026: LIST
87027: PUSH
87028: LD_INT 3
87030: NEG
87031: PUSH
87032: LD_INT 1
87034: PUSH
87035: EMPTY
87036: LIST
87037: LIST
87038: PUSH
87039: LD_INT 4
87041: NEG
87042: PUSH
87043: LD_INT 0
87045: PUSH
87046: EMPTY
87047: LIST
87048: LIST
87049: PUSH
87050: LD_INT 4
87052: NEG
87053: PUSH
87054: LD_INT 1
87056: NEG
87057: PUSH
87058: EMPTY
87059: LIST
87060: LIST
87061: PUSH
87062: LD_INT 4
87064: NEG
87065: PUSH
87066: LD_INT 2
87068: NEG
87069: PUSH
87070: EMPTY
87071: LIST
87072: LIST
87073: PUSH
87074: LD_INT 2
87076: NEG
87077: PUSH
87078: LD_INT 2
87080: PUSH
87081: EMPTY
87082: LIST
87083: LIST
87084: PUSH
87085: LD_INT 4
87087: NEG
87088: PUSH
87089: LD_INT 4
87091: NEG
87092: PUSH
87093: EMPTY
87094: LIST
87095: LIST
87096: PUSH
87097: LD_INT 4
87099: NEG
87100: PUSH
87101: LD_INT 5
87103: NEG
87104: PUSH
87105: EMPTY
87106: LIST
87107: LIST
87108: PUSH
87109: LD_INT 3
87111: NEG
87112: PUSH
87113: LD_INT 4
87115: NEG
87116: PUSH
87117: EMPTY
87118: LIST
87119: LIST
87120: PUSH
87121: LD_INT 3
87123: NEG
87124: PUSH
87125: LD_INT 3
87127: NEG
87128: PUSH
87129: EMPTY
87130: LIST
87131: LIST
87132: PUSH
87133: LD_INT 4
87135: NEG
87136: PUSH
87137: LD_INT 3
87139: NEG
87140: PUSH
87141: EMPTY
87142: LIST
87143: LIST
87144: PUSH
87145: LD_INT 5
87147: NEG
87148: PUSH
87149: LD_INT 4
87151: NEG
87152: PUSH
87153: EMPTY
87154: LIST
87155: LIST
87156: PUSH
87157: LD_INT 5
87159: NEG
87160: PUSH
87161: LD_INT 5
87163: NEG
87164: PUSH
87165: EMPTY
87166: LIST
87167: LIST
87168: PUSH
87169: LD_INT 3
87171: NEG
87172: PUSH
87173: LD_INT 5
87175: NEG
87176: PUSH
87177: EMPTY
87178: LIST
87179: LIST
87180: PUSH
87181: LD_INT 5
87183: NEG
87184: PUSH
87185: LD_INT 3
87187: NEG
87188: PUSH
87189: EMPTY
87190: LIST
87191: LIST
87192: PUSH
87193: LD_INT 0
87195: PUSH
87196: LD_INT 3
87198: NEG
87199: PUSH
87200: EMPTY
87201: LIST
87202: LIST
87203: PUSH
87204: LD_INT 0
87206: PUSH
87207: LD_INT 4
87209: NEG
87210: PUSH
87211: EMPTY
87212: LIST
87213: LIST
87214: PUSH
87215: LD_INT 1
87217: PUSH
87218: LD_INT 3
87220: NEG
87221: PUSH
87222: EMPTY
87223: LIST
87224: LIST
87225: PUSH
87226: LD_INT 1
87228: PUSH
87229: LD_INT 2
87231: NEG
87232: PUSH
87233: EMPTY
87234: LIST
87235: LIST
87236: PUSH
87237: LD_INT 0
87239: PUSH
87240: LD_INT 2
87242: NEG
87243: PUSH
87244: EMPTY
87245: LIST
87246: LIST
87247: PUSH
87248: LD_INT 1
87250: NEG
87251: PUSH
87252: LD_INT 3
87254: NEG
87255: PUSH
87256: EMPTY
87257: LIST
87258: LIST
87259: PUSH
87260: LD_INT 1
87262: NEG
87263: PUSH
87264: LD_INT 4
87266: NEG
87267: PUSH
87268: EMPTY
87269: LIST
87270: LIST
87271: PUSH
87272: LD_INT 2
87274: PUSH
87275: LD_INT 2
87277: NEG
87278: PUSH
87279: EMPTY
87280: LIST
87281: LIST
87282: PUSH
87283: LD_INT 2
87285: NEG
87286: PUSH
87287: LD_INT 4
87289: NEG
87290: PUSH
87291: EMPTY
87292: LIST
87293: LIST
87294: PUSH
87295: LD_INT 4
87297: PUSH
87298: LD_INT 0
87300: PUSH
87301: EMPTY
87302: LIST
87303: LIST
87304: PUSH
87305: LD_INT 4
87307: PUSH
87308: LD_INT 1
87310: NEG
87311: PUSH
87312: EMPTY
87313: LIST
87314: LIST
87315: PUSH
87316: LD_INT 5
87318: PUSH
87319: LD_INT 0
87321: PUSH
87322: EMPTY
87323: LIST
87324: LIST
87325: PUSH
87326: LD_INT 5
87328: PUSH
87329: LD_INT 1
87331: PUSH
87332: EMPTY
87333: LIST
87334: LIST
87335: PUSH
87336: LD_INT 4
87338: PUSH
87339: LD_INT 1
87341: PUSH
87342: EMPTY
87343: LIST
87344: LIST
87345: PUSH
87346: LD_INT 3
87348: PUSH
87349: LD_INT 0
87351: PUSH
87352: EMPTY
87353: LIST
87354: LIST
87355: PUSH
87356: LD_INT 3
87358: PUSH
87359: LD_INT 1
87361: NEG
87362: PUSH
87363: EMPTY
87364: LIST
87365: LIST
87366: PUSH
87367: LD_INT 3
87369: PUSH
87370: LD_INT 2
87372: NEG
87373: PUSH
87374: EMPTY
87375: LIST
87376: LIST
87377: PUSH
87378: LD_INT 5
87380: PUSH
87381: LD_INT 2
87383: PUSH
87384: EMPTY
87385: LIST
87386: LIST
87387: PUSH
87388: EMPTY
87389: LIST
87390: LIST
87391: LIST
87392: LIST
87393: LIST
87394: LIST
87395: LIST
87396: LIST
87397: LIST
87398: LIST
87399: LIST
87400: LIST
87401: LIST
87402: LIST
87403: LIST
87404: LIST
87405: LIST
87406: LIST
87407: LIST
87408: LIST
87409: LIST
87410: LIST
87411: LIST
87412: LIST
87413: LIST
87414: LIST
87415: LIST
87416: LIST
87417: LIST
87418: LIST
87419: LIST
87420: LIST
87421: LIST
87422: LIST
87423: LIST
87424: LIST
87425: LIST
87426: LIST
87427: LIST
87428: LIST
87429: LIST
87430: LIST
87431: LIST
87432: LIST
87433: LIST
87434: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
87435: LD_ADDR_VAR 0 32
87439: PUSH
87440: LD_INT 4
87442: NEG
87443: PUSH
87444: LD_INT 0
87446: PUSH
87447: EMPTY
87448: LIST
87449: LIST
87450: PUSH
87451: LD_INT 4
87453: NEG
87454: PUSH
87455: LD_INT 1
87457: NEG
87458: PUSH
87459: EMPTY
87460: LIST
87461: LIST
87462: PUSH
87463: LD_INT 3
87465: NEG
87466: PUSH
87467: LD_INT 0
87469: PUSH
87470: EMPTY
87471: LIST
87472: LIST
87473: PUSH
87474: LD_INT 3
87476: NEG
87477: PUSH
87478: LD_INT 1
87480: PUSH
87481: EMPTY
87482: LIST
87483: LIST
87484: PUSH
87485: LD_INT 4
87487: NEG
87488: PUSH
87489: LD_INT 1
87491: PUSH
87492: EMPTY
87493: LIST
87494: LIST
87495: PUSH
87496: LD_INT 5
87498: NEG
87499: PUSH
87500: LD_INT 0
87502: PUSH
87503: EMPTY
87504: LIST
87505: LIST
87506: PUSH
87507: LD_INT 5
87509: NEG
87510: PUSH
87511: LD_INT 1
87513: NEG
87514: PUSH
87515: EMPTY
87516: LIST
87517: LIST
87518: PUSH
87519: LD_INT 5
87521: NEG
87522: PUSH
87523: LD_INT 2
87525: NEG
87526: PUSH
87527: EMPTY
87528: LIST
87529: LIST
87530: PUSH
87531: LD_INT 3
87533: NEG
87534: PUSH
87535: LD_INT 2
87537: PUSH
87538: EMPTY
87539: LIST
87540: LIST
87541: PUSH
87542: LD_INT 3
87544: NEG
87545: PUSH
87546: LD_INT 3
87548: NEG
87549: PUSH
87550: EMPTY
87551: LIST
87552: LIST
87553: PUSH
87554: LD_INT 3
87556: NEG
87557: PUSH
87558: LD_INT 4
87560: NEG
87561: PUSH
87562: EMPTY
87563: LIST
87564: LIST
87565: PUSH
87566: LD_INT 2
87568: NEG
87569: PUSH
87570: LD_INT 3
87572: NEG
87573: PUSH
87574: EMPTY
87575: LIST
87576: LIST
87577: PUSH
87578: LD_INT 2
87580: NEG
87581: PUSH
87582: LD_INT 2
87584: NEG
87585: PUSH
87586: EMPTY
87587: LIST
87588: LIST
87589: PUSH
87590: LD_INT 3
87592: NEG
87593: PUSH
87594: LD_INT 2
87596: NEG
87597: PUSH
87598: EMPTY
87599: LIST
87600: LIST
87601: PUSH
87602: LD_INT 4
87604: NEG
87605: PUSH
87606: LD_INT 3
87608: NEG
87609: PUSH
87610: EMPTY
87611: LIST
87612: LIST
87613: PUSH
87614: LD_INT 4
87616: NEG
87617: PUSH
87618: LD_INT 4
87620: NEG
87621: PUSH
87622: EMPTY
87623: LIST
87624: LIST
87625: PUSH
87626: LD_INT 2
87628: NEG
87629: PUSH
87630: LD_INT 4
87632: NEG
87633: PUSH
87634: EMPTY
87635: LIST
87636: LIST
87637: PUSH
87638: LD_INT 4
87640: NEG
87641: PUSH
87642: LD_INT 2
87644: NEG
87645: PUSH
87646: EMPTY
87647: LIST
87648: LIST
87649: PUSH
87650: LD_INT 0
87652: PUSH
87653: LD_INT 4
87655: NEG
87656: PUSH
87657: EMPTY
87658: LIST
87659: LIST
87660: PUSH
87661: LD_INT 0
87663: PUSH
87664: LD_INT 5
87666: NEG
87667: PUSH
87668: EMPTY
87669: LIST
87670: LIST
87671: PUSH
87672: LD_INT 1
87674: PUSH
87675: LD_INT 4
87677: NEG
87678: PUSH
87679: EMPTY
87680: LIST
87681: LIST
87682: PUSH
87683: LD_INT 1
87685: PUSH
87686: LD_INT 3
87688: NEG
87689: PUSH
87690: EMPTY
87691: LIST
87692: LIST
87693: PUSH
87694: LD_INT 0
87696: PUSH
87697: LD_INT 3
87699: NEG
87700: PUSH
87701: EMPTY
87702: LIST
87703: LIST
87704: PUSH
87705: LD_INT 1
87707: NEG
87708: PUSH
87709: LD_INT 4
87711: NEG
87712: PUSH
87713: EMPTY
87714: LIST
87715: LIST
87716: PUSH
87717: LD_INT 1
87719: NEG
87720: PUSH
87721: LD_INT 5
87723: NEG
87724: PUSH
87725: EMPTY
87726: LIST
87727: LIST
87728: PUSH
87729: LD_INT 2
87731: PUSH
87732: LD_INT 3
87734: NEG
87735: PUSH
87736: EMPTY
87737: LIST
87738: LIST
87739: PUSH
87740: LD_INT 2
87742: NEG
87743: PUSH
87744: LD_INT 5
87746: NEG
87747: PUSH
87748: EMPTY
87749: LIST
87750: LIST
87751: PUSH
87752: LD_INT 3
87754: PUSH
87755: LD_INT 0
87757: PUSH
87758: EMPTY
87759: LIST
87760: LIST
87761: PUSH
87762: LD_INT 3
87764: PUSH
87765: LD_INT 1
87767: NEG
87768: PUSH
87769: EMPTY
87770: LIST
87771: LIST
87772: PUSH
87773: LD_INT 4
87775: PUSH
87776: LD_INT 0
87778: PUSH
87779: EMPTY
87780: LIST
87781: LIST
87782: PUSH
87783: LD_INT 4
87785: PUSH
87786: LD_INT 1
87788: PUSH
87789: EMPTY
87790: LIST
87791: LIST
87792: PUSH
87793: LD_INT 3
87795: PUSH
87796: LD_INT 1
87798: PUSH
87799: EMPTY
87800: LIST
87801: LIST
87802: PUSH
87803: LD_INT 2
87805: PUSH
87806: LD_INT 0
87808: PUSH
87809: EMPTY
87810: LIST
87811: LIST
87812: PUSH
87813: LD_INT 2
87815: PUSH
87816: LD_INT 1
87818: NEG
87819: PUSH
87820: EMPTY
87821: LIST
87822: LIST
87823: PUSH
87824: LD_INT 2
87826: PUSH
87827: LD_INT 2
87829: NEG
87830: PUSH
87831: EMPTY
87832: LIST
87833: LIST
87834: PUSH
87835: LD_INT 4
87837: PUSH
87838: LD_INT 2
87840: PUSH
87841: EMPTY
87842: LIST
87843: LIST
87844: PUSH
87845: LD_INT 4
87847: PUSH
87848: LD_INT 4
87850: PUSH
87851: EMPTY
87852: LIST
87853: LIST
87854: PUSH
87855: LD_INT 4
87857: PUSH
87858: LD_INT 3
87860: PUSH
87861: EMPTY
87862: LIST
87863: LIST
87864: PUSH
87865: LD_INT 5
87867: PUSH
87868: LD_INT 4
87870: PUSH
87871: EMPTY
87872: LIST
87873: LIST
87874: PUSH
87875: LD_INT 5
87877: PUSH
87878: LD_INT 5
87880: PUSH
87881: EMPTY
87882: LIST
87883: LIST
87884: PUSH
87885: LD_INT 4
87887: PUSH
87888: LD_INT 5
87890: PUSH
87891: EMPTY
87892: LIST
87893: LIST
87894: PUSH
87895: LD_INT 3
87897: PUSH
87898: LD_INT 4
87900: PUSH
87901: EMPTY
87902: LIST
87903: LIST
87904: PUSH
87905: LD_INT 3
87907: PUSH
87908: LD_INT 3
87910: PUSH
87911: EMPTY
87912: LIST
87913: LIST
87914: PUSH
87915: LD_INT 5
87917: PUSH
87918: LD_INT 3
87920: PUSH
87921: EMPTY
87922: LIST
87923: LIST
87924: PUSH
87925: LD_INT 3
87927: PUSH
87928: LD_INT 5
87930: PUSH
87931: EMPTY
87932: LIST
87933: LIST
87934: PUSH
87935: EMPTY
87936: LIST
87937: LIST
87938: LIST
87939: LIST
87940: LIST
87941: LIST
87942: LIST
87943: LIST
87944: LIST
87945: LIST
87946: LIST
87947: LIST
87948: LIST
87949: LIST
87950: LIST
87951: LIST
87952: LIST
87953: LIST
87954: LIST
87955: LIST
87956: LIST
87957: LIST
87958: LIST
87959: LIST
87960: LIST
87961: LIST
87962: LIST
87963: LIST
87964: LIST
87965: LIST
87966: LIST
87967: LIST
87968: LIST
87969: LIST
87970: LIST
87971: LIST
87972: LIST
87973: LIST
87974: LIST
87975: LIST
87976: LIST
87977: LIST
87978: LIST
87979: LIST
87980: LIST
87981: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
87982: LD_ADDR_VAR 0 33
87986: PUSH
87987: LD_INT 4
87989: NEG
87990: PUSH
87991: LD_INT 4
87993: NEG
87994: PUSH
87995: EMPTY
87996: LIST
87997: LIST
87998: PUSH
87999: LD_INT 4
88001: NEG
88002: PUSH
88003: LD_INT 5
88005: NEG
88006: PUSH
88007: EMPTY
88008: LIST
88009: LIST
88010: PUSH
88011: LD_INT 3
88013: NEG
88014: PUSH
88015: LD_INT 4
88017: NEG
88018: PUSH
88019: EMPTY
88020: LIST
88021: LIST
88022: PUSH
88023: LD_INT 3
88025: NEG
88026: PUSH
88027: LD_INT 3
88029: NEG
88030: PUSH
88031: EMPTY
88032: LIST
88033: LIST
88034: PUSH
88035: LD_INT 4
88037: NEG
88038: PUSH
88039: LD_INT 3
88041: NEG
88042: PUSH
88043: EMPTY
88044: LIST
88045: LIST
88046: PUSH
88047: LD_INT 5
88049: NEG
88050: PUSH
88051: LD_INT 4
88053: NEG
88054: PUSH
88055: EMPTY
88056: LIST
88057: LIST
88058: PUSH
88059: LD_INT 5
88061: NEG
88062: PUSH
88063: LD_INT 5
88065: NEG
88066: PUSH
88067: EMPTY
88068: LIST
88069: LIST
88070: PUSH
88071: LD_INT 3
88073: NEG
88074: PUSH
88075: LD_INT 5
88077: NEG
88078: PUSH
88079: EMPTY
88080: LIST
88081: LIST
88082: PUSH
88083: LD_INT 5
88085: NEG
88086: PUSH
88087: LD_INT 3
88089: NEG
88090: PUSH
88091: EMPTY
88092: LIST
88093: LIST
88094: PUSH
88095: LD_INT 0
88097: PUSH
88098: LD_INT 3
88100: NEG
88101: PUSH
88102: EMPTY
88103: LIST
88104: LIST
88105: PUSH
88106: LD_INT 0
88108: PUSH
88109: LD_INT 4
88111: NEG
88112: PUSH
88113: EMPTY
88114: LIST
88115: LIST
88116: PUSH
88117: LD_INT 1
88119: PUSH
88120: LD_INT 3
88122: NEG
88123: PUSH
88124: EMPTY
88125: LIST
88126: LIST
88127: PUSH
88128: LD_INT 1
88130: PUSH
88131: LD_INT 2
88133: NEG
88134: PUSH
88135: EMPTY
88136: LIST
88137: LIST
88138: PUSH
88139: LD_INT 0
88141: PUSH
88142: LD_INT 2
88144: NEG
88145: PUSH
88146: EMPTY
88147: LIST
88148: LIST
88149: PUSH
88150: LD_INT 1
88152: NEG
88153: PUSH
88154: LD_INT 3
88156: NEG
88157: PUSH
88158: EMPTY
88159: LIST
88160: LIST
88161: PUSH
88162: LD_INT 1
88164: NEG
88165: PUSH
88166: LD_INT 4
88168: NEG
88169: PUSH
88170: EMPTY
88171: LIST
88172: LIST
88173: PUSH
88174: LD_INT 2
88176: PUSH
88177: LD_INT 2
88179: NEG
88180: PUSH
88181: EMPTY
88182: LIST
88183: LIST
88184: PUSH
88185: LD_INT 2
88187: NEG
88188: PUSH
88189: LD_INT 4
88191: NEG
88192: PUSH
88193: EMPTY
88194: LIST
88195: LIST
88196: PUSH
88197: LD_INT 4
88199: PUSH
88200: LD_INT 0
88202: PUSH
88203: EMPTY
88204: LIST
88205: LIST
88206: PUSH
88207: LD_INT 4
88209: PUSH
88210: LD_INT 1
88212: NEG
88213: PUSH
88214: EMPTY
88215: LIST
88216: LIST
88217: PUSH
88218: LD_INT 5
88220: PUSH
88221: LD_INT 0
88223: PUSH
88224: EMPTY
88225: LIST
88226: LIST
88227: PUSH
88228: LD_INT 5
88230: PUSH
88231: LD_INT 1
88233: PUSH
88234: EMPTY
88235: LIST
88236: LIST
88237: PUSH
88238: LD_INT 4
88240: PUSH
88241: LD_INT 1
88243: PUSH
88244: EMPTY
88245: LIST
88246: LIST
88247: PUSH
88248: LD_INT 3
88250: PUSH
88251: LD_INT 0
88253: PUSH
88254: EMPTY
88255: LIST
88256: LIST
88257: PUSH
88258: LD_INT 3
88260: PUSH
88261: LD_INT 1
88263: NEG
88264: PUSH
88265: EMPTY
88266: LIST
88267: LIST
88268: PUSH
88269: LD_INT 3
88271: PUSH
88272: LD_INT 2
88274: NEG
88275: PUSH
88276: EMPTY
88277: LIST
88278: LIST
88279: PUSH
88280: LD_INT 5
88282: PUSH
88283: LD_INT 2
88285: PUSH
88286: EMPTY
88287: LIST
88288: LIST
88289: PUSH
88290: LD_INT 3
88292: PUSH
88293: LD_INT 3
88295: PUSH
88296: EMPTY
88297: LIST
88298: LIST
88299: PUSH
88300: LD_INT 3
88302: PUSH
88303: LD_INT 2
88305: PUSH
88306: EMPTY
88307: LIST
88308: LIST
88309: PUSH
88310: LD_INT 4
88312: PUSH
88313: LD_INT 3
88315: PUSH
88316: EMPTY
88317: LIST
88318: LIST
88319: PUSH
88320: LD_INT 4
88322: PUSH
88323: LD_INT 4
88325: PUSH
88326: EMPTY
88327: LIST
88328: LIST
88329: PUSH
88330: LD_INT 3
88332: PUSH
88333: LD_INT 4
88335: PUSH
88336: EMPTY
88337: LIST
88338: LIST
88339: PUSH
88340: LD_INT 2
88342: PUSH
88343: LD_INT 3
88345: PUSH
88346: EMPTY
88347: LIST
88348: LIST
88349: PUSH
88350: LD_INT 2
88352: PUSH
88353: LD_INT 2
88355: PUSH
88356: EMPTY
88357: LIST
88358: LIST
88359: PUSH
88360: LD_INT 4
88362: PUSH
88363: LD_INT 2
88365: PUSH
88366: EMPTY
88367: LIST
88368: LIST
88369: PUSH
88370: LD_INT 2
88372: PUSH
88373: LD_INT 4
88375: PUSH
88376: EMPTY
88377: LIST
88378: LIST
88379: PUSH
88380: LD_INT 0
88382: PUSH
88383: LD_INT 4
88385: PUSH
88386: EMPTY
88387: LIST
88388: LIST
88389: PUSH
88390: LD_INT 0
88392: PUSH
88393: LD_INT 3
88395: PUSH
88396: EMPTY
88397: LIST
88398: LIST
88399: PUSH
88400: LD_INT 1
88402: PUSH
88403: LD_INT 4
88405: PUSH
88406: EMPTY
88407: LIST
88408: LIST
88409: PUSH
88410: LD_INT 1
88412: PUSH
88413: LD_INT 5
88415: PUSH
88416: EMPTY
88417: LIST
88418: LIST
88419: PUSH
88420: LD_INT 0
88422: PUSH
88423: LD_INT 5
88425: PUSH
88426: EMPTY
88427: LIST
88428: LIST
88429: PUSH
88430: LD_INT 1
88432: NEG
88433: PUSH
88434: LD_INT 4
88436: PUSH
88437: EMPTY
88438: LIST
88439: LIST
88440: PUSH
88441: LD_INT 1
88443: NEG
88444: PUSH
88445: LD_INT 3
88447: PUSH
88448: EMPTY
88449: LIST
88450: LIST
88451: PUSH
88452: LD_INT 2
88454: PUSH
88455: LD_INT 5
88457: PUSH
88458: EMPTY
88459: LIST
88460: LIST
88461: PUSH
88462: LD_INT 2
88464: NEG
88465: PUSH
88466: LD_INT 3
88468: PUSH
88469: EMPTY
88470: LIST
88471: LIST
88472: PUSH
88473: EMPTY
88474: LIST
88475: LIST
88476: LIST
88477: LIST
88478: LIST
88479: LIST
88480: LIST
88481: LIST
88482: LIST
88483: LIST
88484: LIST
88485: LIST
88486: LIST
88487: LIST
88488: LIST
88489: LIST
88490: LIST
88491: LIST
88492: LIST
88493: LIST
88494: LIST
88495: LIST
88496: LIST
88497: LIST
88498: LIST
88499: LIST
88500: LIST
88501: LIST
88502: LIST
88503: LIST
88504: LIST
88505: LIST
88506: LIST
88507: LIST
88508: LIST
88509: LIST
88510: LIST
88511: LIST
88512: LIST
88513: LIST
88514: LIST
88515: LIST
88516: LIST
88517: LIST
88518: LIST
88519: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
88520: LD_ADDR_VAR 0 34
88524: PUSH
88525: LD_INT 0
88527: PUSH
88528: LD_INT 4
88530: NEG
88531: PUSH
88532: EMPTY
88533: LIST
88534: LIST
88535: PUSH
88536: LD_INT 0
88538: PUSH
88539: LD_INT 5
88541: NEG
88542: PUSH
88543: EMPTY
88544: LIST
88545: LIST
88546: PUSH
88547: LD_INT 1
88549: PUSH
88550: LD_INT 4
88552: NEG
88553: PUSH
88554: EMPTY
88555: LIST
88556: LIST
88557: PUSH
88558: LD_INT 1
88560: PUSH
88561: LD_INT 3
88563: NEG
88564: PUSH
88565: EMPTY
88566: LIST
88567: LIST
88568: PUSH
88569: LD_INT 0
88571: PUSH
88572: LD_INT 3
88574: NEG
88575: PUSH
88576: EMPTY
88577: LIST
88578: LIST
88579: PUSH
88580: LD_INT 1
88582: NEG
88583: PUSH
88584: LD_INT 4
88586: NEG
88587: PUSH
88588: EMPTY
88589: LIST
88590: LIST
88591: PUSH
88592: LD_INT 1
88594: NEG
88595: PUSH
88596: LD_INT 5
88598: NEG
88599: PUSH
88600: EMPTY
88601: LIST
88602: LIST
88603: PUSH
88604: LD_INT 2
88606: PUSH
88607: LD_INT 3
88609: NEG
88610: PUSH
88611: EMPTY
88612: LIST
88613: LIST
88614: PUSH
88615: LD_INT 2
88617: NEG
88618: PUSH
88619: LD_INT 5
88621: NEG
88622: PUSH
88623: EMPTY
88624: LIST
88625: LIST
88626: PUSH
88627: LD_INT 3
88629: PUSH
88630: LD_INT 0
88632: PUSH
88633: EMPTY
88634: LIST
88635: LIST
88636: PUSH
88637: LD_INT 3
88639: PUSH
88640: LD_INT 1
88642: NEG
88643: PUSH
88644: EMPTY
88645: LIST
88646: LIST
88647: PUSH
88648: LD_INT 4
88650: PUSH
88651: LD_INT 0
88653: PUSH
88654: EMPTY
88655: LIST
88656: LIST
88657: PUSH
88658: LD_INT 4
88660: PUSH
88661: LD_INT 1
88663: PUSH
88664: EMPTY
88665: LIST
88666: LIST
88667: PUSH
88668: LD_INT 3
88670: PUSH
88671: LD_INT 1
88673: PUSH
88674: EMPTY
88675: LIST
88676: LIST
88677: PUSH
88678: LD_INT 2
88680: PUSH
88681: LD_INT 0
88683: PUSH
88684: EMPTY
88685: LIST
88686: LIST
88687: PUSH
88688: LD_INT 2
88690: PUSH
88691: LD_INT 1
88693: NEG
88694: PUSH
88695: EMPTY
88696: LIST
88697: LIST
88698: PUSH
88699: LD_INT 2
88701: PUSH
88702: LD_INT 2
88704: NEG
88705: PUSH
88706: EMPTY
88707: LIST
88708: LIST
88709: PUSH
88710: LD_INT 4
88712: PUSH
88713: LD_INT 2
88715: PUSH
88716: EMPTY
88717: LIST
88718: LIST
88719: PUSH
88720: LD_INT 4
88722: PUSH
88723: LD_INT 4
88725: PUSH
88726: EMPTY
88727: LIST
88728: LIST
88729: PUSH
88730: LD_INT 4
88732: PUSH
88733: LD_INT 3
88735: PUSH
88736: EMPTY
88737: LIST
88738: LIST
88739: PUSH
88740: LD_INT 5
88742: PUSH
88743: LD_INT 4
88745: PUSH
88746: EMPTY
88747: LIST
88748: LIST
88749: PUSH
88750: LD_INT 5
88752: PUSH
88753: LD_INT 5
88755: PUSH
88756: EMPTY
88757: LIST
88758: LIST
88759: PUSH
88760: LD_INT 4
88762: PUSH
88763: LD_INT 5
88765: PUSH
88766: EMPTY
88767: LIST
88768: LIST
88769: PUSH
88770: LD_INT 3
88772: PUSH
88773: LD_INT 4
88775: PUSH
88776: EMPTY
88777: LIST
88778: LIST
88779: PUSH
88780: LD_INT 3
88782: PUSH
88783: LD_INT 3
88785: PUSH
88786: EMPTY
88787: LIST
88788: LIST
88789: PUSH
88790: LD_INT 5
88792: PUSH
88793: LD_INT 3
88795: PUSH
88796: EMPTY
88797: LIST
88798: LIST
88799: PUSH
88800: LD_INT 3
88802: PUSH
88803: LD_INT 5
88805: PUSH
88806: EMPTY
88807: LIST
88808: LIST
88809: PUSH
88810: LD_INT 0
88812: PUSH
88813: LD_INT 3
88815: PUSH
88816: EMPTY
88817: LIST
88818: LIST
88819: PUSH
88820: LD_INT 0
88822: PUSH
88823: LD_INT 2
88825: PUSH
88826: EMPTY
88827: LIST
88828: LIST
88829: PUSH
88830: LD_INT 1
88832: PUSH
88833: LD_INT 3
88835: PUSH
88836: EMPTY
88837: LIST
88838: LIST
88839: PUSH
88840: LD_INT 1
88842: PUSH
88843: LD_INT 4
88845: PUSH
88846: EMPTY
88847: LIST
88848: LIST
88849: PUSH
88850: LD_INT 0
88852: PUSH
88853: LD_INT 4
88855: PUSH
88856: EMPTY
88857: LIST
88858: LIST
88859: PUSH
88860: LD_INT 1
88862: NEG
88863: PUSH
88864: LD_INT 3
88866: PUSH
88867: EMPTY
88868: LIST
88869: LIST
88870: PUSH
88871: LD_INT 1
88873: NEG
88874: PUSH
88875: LD_INT 2
88877: PUSH
88878: EMPTY
88879: LIST
88880: LIST
88881: PUSH
88882: LD_INT 2
88884: PUSH
88885: LD_INT 4
88887: PUSH
88888: EMPTY
88889: LIST
88890: LIST
88891: PUSH
88892: LD_INT 2
88894: NEG
88895: PUSH
88896: LD_INT 2
88898: PUSH
88899: EMPTY
88900: LIST
88901: LIST
88902: PUSH
88903: LD_INT 4
88905: NEG
88906: PUSH
88907: LD_INT 0
88909: PUSH
88910: EMPTY
88911: LIST
88912: LIST
88913: PUSH
88914: LD_INT 4
88916: NEG
88917: PUSH
88918: LD_INT 1
88920: NEG
88921: PUSH
88922: EMPTY
88923: LIST
88924: LIST
88925: PUSH
88926: LD_INT 3
88928: NEG
88929: PUSH
88930: LD_INT 0
88932: PUSH
88933: EMPTY
88934: LIST
88935: LIST
88936: PUSH
88937: LD_INT 3
88939: NEG
88940: PUSH
88941: LD_INT 1
88943: PUSH
88944: EMPTY
88945: LIST
88946: LIST
88947: PUSH
88948: LD_INT 4
88950: NEG
88951: PUSH
88952: LD_INT 1
88954: PUSH
88955: EMPTY
88956: LIST
88957: LIST
88958: PUSH
88959: LD_INT 5
88961: NEG
88962: PUSH
88963: LD_INT 0
88965: PUSH
88966: EMPTY
88967: LIST
88968: LIST
88969: PUSH
88970: LD_INT 5
88972: NEG
88973: PUSH
88974: LD_INT 1
88976: NEG
88977: PUSH
88978: EMPTY
88979: LIST
88980: LIST
88981: PUSH
88982: LD_INT 5
88984: NEG
88985: PUSH
88986: LD_INT 2
88988: NEG
88989: PUSH
88990: EMPTY
88991: LIST
88992: LIST
88993: PUSH
88994: LD_INT 3
88996: NEG
88997: PUSH
88998: LD_INT 2
89000: PUSH
89001: EMPTY
89002: LIST
89003: LIST
89004: PUSH
89005: EMPTY
89006: LIST
89007: LIST
89008: LIST
89009: LIST
89010: LIST
89011: LIST
89012: LIST
89013: LIST
89014: LIST
89015: LIST
89016: LIST
89017: LIST
89018: LIST
89019: LIST
89020: LIST
89021: LIST
89022: LIST
89023: LIST
89024: LIST
89025: LIST
89026: LIST
89027: LIST
89028: LIST
89029: LIST
89030: LIST
89031: LIST
89032: LIST
89033: LIST
89034: LIST
89035: LIST
89036: LIST
89037: LIST
89038: LIST
89039: LIST
89040: LIST
89041: LIST
89042: LIST
89043: LIST
89044: LIST
89045: LIST
89046: LIST
89047: LIST
89048: LIST
89049: LIST
89050: LIST
89051: ST_TO_ADDR
// end ; end ;
89052: GO 89055
89054: POP
// case btype of b_depot , b_warehouse :
89055: LD_VAR 0 1
89059: PUSH
89060: LD_INT 0
89062: DOUBLE
89063: EQUAL
89064: IFTRUE 89074
89066: LD_INT 1
89068: DOUBLE
89069: EQUAL
89070: IFTRUE 89074
89072: GO 89275
89074: POP
// case nation of nation_american :
89075: LD_VAR 0 5
89079: PUSH
89080: LD_INT 1
89082: DOUBLE
89083: EQUAL
89084: IFTRUE 89088
89086: GO 89144
89088: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
89089: LD_ADDR_VAR 0 9
89093: PUSH
89094: LD_VAR 0 11
89098: PUSH
89099: LD_VAR 0 12
89103: PUSH
89104: LD_VAR 0 13
89108: PUSH
89109: LD_VAR 0 14
89113: PUSH
89114: LD_VAR 0 15
89118: PUSH
89119: LD_VAR 0 16
89123: PUSH
89124: EMPTY
89125: LIST
89126: LIST
89127: LIST
89128: LIST
89129: LIST
89130: LIST
89131: PUSH
89132: LD_VAR 0 4
89136: PUSH
89137: LD_INT 1
89139: PLUS
89140: ARRAY
89141: ST_TO_ADDR
89142: GO 89273
89144: LD_INT 2
89146: DOUBLE
89147: EQUAL
89148: IFTRUE 89152
89150: GO 89208
89152: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
89153: LD_ADDR_VAR 0 9
89157: PUSH
89158: LD_VAR 0 17
89162: PUSH
89163: LD_VAR 0 18
89167: PUSH
89168: LD_VAR 0 19
89172: PUSH
89173: LD_VAR 0 20
89177: PUSH
89178: LD_VAR 0 21
89182: PUSH
89183: LD_VAR 0 22
89187: PUSH
89188: EMPTY
89189: LIST
89190: LIST
89191: LIST
89192: LIST
89193: LIST
89194: LIST
89195: PUSH
89196: LD_VAR 0 4
89200: PUSH
89201: LD_INT 1
89203: PLUS
89204: ARRAY
89205: ST_TO_ADDR
89206: GO 89273
89208: LD_INT 3
89210: DOUBLE
89211: EQUAL
89212: IFTRUE 89216
89214: GO 89272
89216: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
89217: LD_ADDR_VAR 0 9
89221: PUSH
89222: LD_VAR 0 23
89226: PUSH
89227: LD_VAR 0 24
89231: PUSH
89232: LD_VAR 0 25
89236: PUSH
89237: LD_VAR 0 26
89241: PUSH
89242: LD_VAR 0 27
89246: PUSH
89247: LD_VAR 0 28
89251: PUSH
89252: EMPTY
89253: LIST
89254: LIST
89255: LIST
89256: LIST
89257: LIST
89258: LIST
89259: PUSH
89260: LD_VAR 0 4
89264: PUSH
89265: LD_INT 1
89267: PLUS
89268: ARRAY
89269: ST_TO_ADDR
89270: GO 89273
89272: POP
89273: GO 89828
89275: LD_INT 2
89277: DOUBLE
89278: EQUAL
89279: IFTRUE 89289
89281: LD_INT 3
89283: DOUBLE
89284: EQUAL
89285: IFTRUE 89289
89287: GO 89345
89289: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
89290: LD_ADDR_VAR 0 9
89294: PUSH
89295: LD_VAR 0 29
89299: PUSH
89300: LD_VAR 0 30
89304: PUSH
89305: LD_VAR 0 31
89309: PUSH
89310: LD_VAR 0 32
89314: PUSH
89315: LD_VAR 0 33
89319: PUSH
89320: LD_VAR 0 34
89324: PUSH
89325: EMPTY
89326: LIST
89327: LIST
89328: LIST
89329: LIST
89330: LIST
89331: LIST
89332: PUSH
89333: LD_VAR 0 4
89337: PUSH
89338: LD_INT 1
89340: PLUS
89341: ARRAY
89342: ST_TO_ADDR
89343: GO 89828
89345: LD_INT 16
89347: DOUBLE
89348: EQUAL
89349: IFTRUE 89407
89351: LD_INT 17
89353: DOUBLE
89354: EQUAL
89355: IFTRUE 89407
89357: LD_INT 18
89359: DOUBLE
89360: EQUAL
89361: IFTRUE 89407
89363: LD_INT 19
89365: DOUBLE
89366: EQUAL
89367: IFTRUE 89407
89369: LD_INT 22
89371: DOUBLE
89372: EQUAL
89373: IFTRUE 89407
89375: LD_INT 20
89377: DOUBLE
89378: EQUAL
89379: IFTRUE 89407
89381: LD_INT 21
89383: DOUBLE
89384: EQUAL
89385: IFTRUE 89407
89387: LD_INT 23
89389: DOUBLE
89390: EQUAL
89391: IFTRUE 89407
89393: LD_INT 24
89395: DOUBLE
89396: EQUAL
89397: IFTRUE 89407
89399: LD_INT 25
89401: DOUBLE
89402: EQUAL
89403: IFTRUE 89407
89405: GO 89463
89407: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
89408: LD_ADDR_VAR 0 9
89412: PUSH
89413: LD_VAR 0 35
89417: PUSH
89418: LD_VAR 0 36
89422: PUSH
89423: LD_VAR 0 37
89427: PUSH
89428: LD_VAR 0 38
89432: PUSH
89433: LD_VAR 0 39
89437: PUSH
89438: LD_VAR 0 40
89442: PUSH
89443: EMPTY
89444: LIST
89445: LIST
89446: LIST
89447: LIST
89448: LIST
89449: LIST
89450: PUSH
89451: LD_VAR 0 4
89455: PUSH
89456: LD_INT 1
89458: PLUS
89459: ARRAY
89460: ST_TO_ADDR
89461: GO 89828
89463: LD_INT 6
89465: DOUBLE
89466: EQUAL
89467: IFTRUE 89519
89469: LD_INT 7
89471: DOUBLE
89472: EQUAL
89473: IFTRUE 89519
89475: LD_INT 8
89477: DOUBLE
89478: EQUAL
89479: IFTRUE 89519
89481: LD_INT 13
89483: DOUBLE
89484: EQUAL
89485: IFTRUE 89519
89487: LD_INT 12
89489: DOUBLE
89490: EQUAL
89491: IFTRUE 89519
89493: LD_INT 15
89495: DOUBLE
89496: EQUAL
89497: IFTRUE 89519
89499: LD_INT 11
89501: DOUBLE
89502: EQUAL
89503: IFTRUE 89519
89505: LD_INT 14
89507: DOUBLE
89508: EQUAL
89509: IFTRUE 89519
89511: LD_INT 10
89513: DOUBLE
89514: EQUAL
89515: IFTRUE 89519
89517: GO 89575
89519: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
89520: LD_ADDR_VAR 0 9
89524: PUSH
89525: LD_VAR 0 41
89529: PUSH
89530: LD_VAR 0 42
89534: PUSH
89535: LD_VAR 0 43
89539: PUSH
89540: LD_VAR 0 44
89544: PUSH
89545: LD_VAR 0 45
89549: PUSH
89550: LD_VAR 0 46
89554: PUSH
89555: EMPTY
89556: LIST
89557: LIST
89558: LIST
89559: LIST
89560: LIST
89561: LIST
89562: PUSH
89563: LD_VAR 0 4
89567: PUSH
89568: LD_INT 1
89570: PLUS
89571: ARRAY
89572: ST_TO_ADDR
89573: GO 89828
89575: LD_INT 36
89577: DOUBLE
89578: EQUAL
89579: IFTRUE 89583
89581: GO 89639
89583: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
89584: LD_ADDR_VAR 0 9
89588: PUSH
89589: LD_VAR 0 47
89593: PUSH
89594: LD_VAR 0 48
89598: PUSH
89599: LD_VAR 0 49
89603: PUSH
89604: LD_VAR 0 50
89608: PUSH
89609: LD_VAR 0 51
89613: PUSH
89614: LD_VAR 0 52
89618: PUSH
89619: EMPTY
89620: LIST
89621: LIST
89622: LIST
89623: LIST
89624: LIST
89625: LIST
89626: PUSH
89627: LD_VAR 0 4
89631: PUSH
89632: LD_INT 1
89634: PLUS
89635: ARRAY
89636: ST_TO_ADDR
89637: GO 89828
89639: LD_INT 4
89641: DOUBLE
89642: EQUAL
89643: IFTRUE 89665
89645: LD_INT 5
89647: DOUBLE
89648: EQUAL
89649: IFTRUE 89665
89651: LD_INT 34
89653: DOUBLE
89654: EQUAL
89655: IFTRUE 89665
89657: LD_INT 37
89659: DOUBLE
89660: EQUAL
89661: IFTRUE 89665
89663: GO 89721
89665: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
89666: LD_ADDR_VAR 0 9
89670: PUSH
89671: LD_VAR 0 53
89675: PUSH
89676: LD_VAR 0 54
89680: PUSH
89681: LD_VAR 0 55
89685: PUSH
89686: LD_VAR 0 56
89690: PUSH
89691: LD_VAR 0 57
89695: PUSH
89696: LD_VAR 0 58
89700: PUSH
89701: EMPTY
89702: LIST
89703: LIST
89704: LIST
89705: LIST
89706: LIST
89707: LIST
89708: PUSH
89709: LD_VAR 0 4
89713: PUSH
89714: LD_INT 1
89716: PLUS
89717: ARRAY
89718: ST_TO_ADDR
89719: GO 89828
89721: LD_INT 31
89723: DOUBLE
89724: EQUAL
89725: IFTRUE 89771
89727: LD_INT 32
89729: DOUBLE
89730: EQUAL
89731: IFTRUE 89771
89733: LD_INT 33
89735: DOUBLE
89736: EQUAL
89737: IFTRUE 89771
89739: LD_INT 27
89741: DOUBLE
89742: EQUAL
89743: IFTRUE 89771
89745: LD_INT 26
89747: DOUBLE
89748: EQUAL
89749: IFTRUE 89771
89751: LD_INT 28
89753: DOUBLE
89754: EQUAL
89755: IFTRUE 89771
89757: LD_INT 29
89759: DOUBLE
89760: EQUAL
89761: IFTRUE 89771
89763: LD_INT 30
89765: DOUBLE
89766: EQUAL
89767: IFTRUE 89771
89769: GO 89827
89771: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
89772: LD_ADDR_VAR 0 9
89776: PUSH
89777: LD_VAR 0 59
89781: PUSH
89782: LD_VAR 0 60
89786: PUSH
89787: LD_VAR 0 61
89791: PUSH
89792: LD_VAR 0 62
89796: PUSH
89797: LD_VAR 0 63
89801: PUSH
89802: LD_VAR 0 64
89806: PUSH
89807: EMPTY
89808: LIST
89809: LIST
89810: LIST
89811: LIST
89812: LIST
89813: LIST
89814: PUSH
89815: LD_VAR 0 4
89819: PUSH
89820: LD_INT 1
89822: PLUS
89823: ARRAY
89824: ST_TO_ADDR
89825: GO 89828
89827: POP
// temp_list2 = [ ] ;
89828: LD_ADDR_VAR 0 10
89832: PUSH
89833: EMPTY
89834: ST_TO_ADDR
// for i in temp_list do
89835: LD_ADDR_VAR 0 8
89839: PUSH
89840: LD_VAR 0 9
89844: PUSH
89845: FOR_IN
89846: IFFALSE 89898
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
89848: LD_ADDR_VAR 0 10
89852: PUSH
89853: LD_VAR 0 10
89857: PUSH
89858: LD_VAR 0 8
89862: PUSH
89863: LD_INT 1
89865: ARRAY
89866: PUSH
89867: LD_VAR 0 2
89871: PLUS
89872: PUSH
89873: LD_VAR 0 8
89877: PUSH
89878: LD_INT 2
89880: ARRAY
89881: PUSH
89882: LD_VAR 0 3
89886: PLUS
89887: PUSH
89888: EMPTY
89889: LIST
89890: LIST
89891: PUSH
89892: EMPTY
89893: LIST
89894: ADD
89895: ST_TO_ADDR
89896: GO 89845
89898: POP
89899: POP
// result = temp_list2 ;
89900: LD_ADDR_VAR 0 7
89904: PUSH
89905: LD_VAR 0 10
89909: ST_TO_ADDR
// end ;
89910: LD_VAR 0 7
89914: RET
// export function EnemyInRange ( unit , dist ) ; begin
89915: LD_INT 0
89917: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
89918: LD_ADDR_VAR 0 3
89922: PUSH
89923: LD_VAR 0 1
89927: PPUSH
89928: CALL_OW 255
89932: PPUSH
89933: LD_VAR 0 1
89937: PPUSH
89938: CALL_OW 250
89942: PPUSH
89943: LD_VAR 0 1
89947: PPUSH
89948: CALL_OW 251
89952: PPUSH
89953: LD_VAR 0 2
89957: PPUSH
89958: CALL 63172 0 4
89962: PUSH
89963: LD_INT 4
89965: ARRAY
89966: ST_TO_ADDR
// end ;
89967: LD_VAR 0 3
89971: RET
// export function PlayerSeeMe ( unit ) ; begin
89972: LD_INT 0
89974: PPUSH
// result := See ( your_side , unit ) ;
89975: LD_ADDR_VAR 0 2
89979: PUSH
89980: LD_OWVAR 2
89984: PPUSH
89985: LD_VAR 0 1
89989: PPUSH
89990: CALL_OW 292
89994: ST_TO_ADDR
// end ;
89995: LD_VAR 0 2
89999: RET
// export function ReverseDir ( unit ) ; begin
90000: LD_INT 0
90002: PPUSH
// if not unit then
90003: LD_VAR 0 1
90007: NOT
90008: IFFALSE 90012
// exit ;
90010: GO 90035
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
90012: LD_ADDR_VAR 0 2
90016: PUSH
90017: LD_VAR 0 1
90021: PPUSH
90022: CALL_OW 254
90026: PUSH
90027: LD_INT 3
90029: PLUS
90030: PUSH
90031: LD_INT 6
90033: MOD
90034: ST_TO_ADDR
// end ;
90035: LD_VAR 0 2
90039: RET
// export function ReverseArray ( array ) ; var i ; begin
90040: LD_INT 0
90042: PPUSH
90043: PPUSH
// if not array then
90044: LD_VAR 0 1
90048: NOT
90049: IFFALSE 90053
// exit ;
90051: GO 90108
// result := [ ] ;
90053: LD_ADDR_VAR 0 2
90057: PUSH
90058: EMPTY
90059: ST_TO_ADDR
// for i := array downto 1 do
90060: LD_ADDR_VAR 0 3
90064: PUSH
90065: DOUBLE
90066: LD_VAR 0 1
90070: INC
90071: ST_TO_ADDR
90072: LD_INT 1
90074: PUSH
90075: FOR_DOWNTO
90076: IFFALSE 90106
// result := Join ( result , array [ i ] ) ;
90078: LD_ADDR_VAR 0 2
90082: PUSH
90083: LD_VAR 0 2
90087: PPUSH
90088: LD_VAR 0 1
90092: PUSH
90093: LD_VAR 0 3
90097: ARRAY
90098: PPUSH
90099: CALL 94960 0 2
90103: ST_TO_ADDR
90104: GO 90075
90106: POP
90107: POP
// end ;
90108: LD_VAR 0 2
90112: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
90113: LD_INT 0
90115: PPUSH
90116: PPUSH
90117: PPUSH
90118: PPUSH
90119: PPUSH
90120: PPUSH
// if not unit or not hexes then
90121: LD_VAR 0 1
90125: NOT
90126: IFTRUE 90135
90128: PUSH
90129: LD_VAR 0 2
90133: NOT
90134: OR
90135: IFFALSE 90139
// exit ;
90137: GO 90262
// dist := 9999 ;
90139: LD_ADDR_VAR 0 5
90143: PUSH
90144: LD_INT 9999
90146: ST_TO_ADDR
// for i = 1 to hexes do
90147: LD_ADDR_VAR 0 4
90151: PUSH
90152: DOUBLE
90153: LD_INT 1
90155: DEC
90156: ST_TO_ADDR
90157: LD_VAR 0 2
90161: PUSH
90162: FOR_TO
90163: IFFALSE 90250
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
90165: LD_ADDR_VAR 0 6
90169: PUSH
90170: LD_VAR 0 1
90174: PPUSH
90175: LD_VAR 0 2
90179: PUSH
90180: LD_VAR 0 4
90184: ARRAY
90185: PUSH
90186: LD_INT 1
90188: ARRAY
90189: PPUSH
90190: LD_VAR 0 2
90194: PUSH
90195: LD_VAR 0 4
90199: ARRAY
90200: PUSH
90201: LD_INT 2
90203: ARRAY
90204: PPUSH
90205: CALL_OW 297
90209: ST_TO_ADDR
// if tdist < dist then
90210: LD_VAR 0 6
90214: PUSH
90215: LD_VAR 0 5
90219: LESS
90220: IFFALSE 90248
// begin hex := hexes [ i ] ;
90222: LD_ADDR_VAR 0 8
90226: PUSH
90227: LD_VAR 0 2
90231: PUSH
90232: LD_VAR 0 4
90236: ARRAY
90237: ST_TO_ADDR
// dist := tdist ;
90238: LD_ADDR_VAR 0 5
90242: PUSH
90243: LD_VAR 0 6
90247: ST_TO_ADDR
// end ; end ;
90248: GO 90162
90250: POP
90251: POP
// result := hex ;
90252: LD_ADDR_VAR 0 3
90256: PUSH
90257: LD_VAR 0 8
90261: ST_TO_ADDR
// end ;
90262: LD_VAR 0 3
90266: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
90267: LD_INT 0
90269: PPUSH
90270: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
90271: LD_VAR 0 1
90275: NOT
90276: IFTRUE 90315
90278: PUSH
90279: LD_VAR 0 1
90283: PUSH
90284: LD_INT 21
90286: PUSH
90287: LD_INT 2
90289: PUSH
90290: EMPTY
90291: LIST
90292: LIST
90293: PUSH
90294: LD_INT 23
90296: PUSH
90297: LD_INT 2
90299: PUSH
90300: EMPTY
90301: LIST
90302: LIST
90303: PUSH
90304: EMPTY
90305: LIST
90306: LIST
90307: PPUSH
90308: CALL_OW 69
90312: IN
90313: NOT
90314: OR
90315: IFFALSE 90319
// exit ;
90317: GO 90366
// for i = 1 to 3 do
90319: LD_ADDR_VAR 0 3
90323: PUSH
90324: DOUBLE
90325: LD_INT 1
90327: DEC
90328: ST_TO_ADDR
90329: LD_INT 3
90331: PUSH
90332: FOR_TO
90333: IFFALSE 90364
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
90335: LD_VAR 0 1
90339: PPUSH
90340: CALL_OW 250
90344: PPUSH
90345: LD_VAR 0 1
90349: PPUSH
90350: CALL_OW 251
90354: PPUSH
90355: LD_INT 1
90357: PPUSH
90358: CALL_OW 453
90362: GO 90332
90364: POP
90365: POP
// end ;
90366: LD_VAR 0 2
90370: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
90371: LD_INT 0
90373: PPUSH
90374: PPUSH
90375: PPUSH
90376: PPUSH
90377: PPUSH
90378: PPUSH
// if not unit or not enemy_unit then
90379: LD_VAR 0 1
90383: NOT
90384: IFTRUE 90393
90386: PUSH
90387: LD_VAR 0 2
90391: NOT
90392: OR
90393: IFFALSE 90397
// exit ;
90395: GO 90878
// if GetLives ( i ) < 250 then
90397: LD_VAR 0 4
90401: PPUSH
90402: CALL_OW 256
90406: PUSH
90407: LD_INT 250
90409: LESS
90410: IFFALSE 90423
// begin ComAutodestruct ( i ) ;
90412: LD_VAR 0 4
90416: PPUSH
90417: CALL 90267 0 1
// exit ;
90421: GO 90878
// end ; x := GetX ( enemy_unit ) ;
90423: LD_ADDR_VAR 0 7
90427: PUSH
90428: LD_VAR 0 2
90432: PPUSH
90433: CALL_OW 250
90437: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
90438: LD_ADDR_VAR 0 8
90442: PUSH
90443: LD_VAR 0 2
90447: PPUSH
90448: CALL_OW 251
90452: ST_TO_ADDR
// if not x or not y then
90453: LD_VAR 0 7
90457: NOT
90458: IFTRUE 90467
90460: PUSH
90461: LD_VAR 0 8
90465: NOT
90466: OR
90467: IFFALSE 90471
// exit ;
90469: GO 90878
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
90471: LD_ADDR_VAR 0 6
90475: PUSH
90476: LD_VAR 0 7
90480: PPUSH
90481: LD_INT 0
90483: PPUSH
90484: LD_INT 4
90486: PPUSH
90487: CALL_OW 272
90491: PUSH
90492: LD_VAR 0 8
90496: PPUSH
90497: LD_INT 0
90499: PPUSH
90500: LD_INT 4
90502: PPUSH
90503: CALL_OW 273
90507: PUSH
90508: EMPTY
90509: LIST
90510: LIST
90511: PUSH
90512: LD_VAR 0 7
90516: PPUSH
90517: LD_INT 1
90519: PPUSH
90520: LD_INT 4
90522: PPUSH
90523: CALL_OW 272
90527: PUSH
90528: LD_VAR 0 8
90532: PPUSH
90533: LD_INT 1
90535: PPUSH
90536: LD_INT 4
90538: PPUSH
90539: CALL_OW 273
90543: PUSH
90544: EMPTY
90545: LIST
90546: LIST
90547: PUSH
90548: LD_VAR 0 7
90552: PPUSH
90553: LD_INT 2
90555: PPUSH
90556: LD_INT 4
90558: PPUSH
90559: CALL_OW 272
90563: PUSH
90564: LD_VAR 0 8
90568: PPUSH
90569: LD_INT 2
90571: PPUSH
90572: LD_INT 4
90574: PPUSH
90575: CALL_OW 273
90579: PUSH
90580: EMPTY
90581: LIST
90582: LIST
90583: PUSH
90584: LD_VAR 0 7
90588: PPUSH
90589: LD_INT 3
90591: PPUSH
90592: LD_INT 4
90594: PPUSH
90595: CALL_OW 272
90599: PUSH
90600: LD_VAR 0 8
90604: PPUSH
90605: LD_INT 3
90607: PPUSH
90608: LD_INT 4
90610: PPUSH
90611: CALL_OW 273
90615: PUSH
90616: EMPTY
90617: LIST
90618: LIST
90619: PUSH
90620: LD_VAR 0 7
90624: PPUSH
90625: LD_INT 4
90627: PPUSH
90628: LD_INT 4
90630: PPUSH
90631: CALL_OW 272
90635: PUSH
90636: LD_VAR 0 8
90640: PPUSH
90641: LD_INT 4
90643: PPUSH
90644: LD_INT 4
90646: PPUSH
90647: CALL_OW 273
90651: PUSH
90652: EMPTY
90653: LIST
90654: LIST
90655: PUSH
90656: LD_VAR 0 7
90660: PPUSH
90661: LD_INT 5
90663: PPUSH
90664: LD_INT 4
90666: PPUSH
90667: CALL_OW 272
90671: PUSH
90672: LD_VAR 0 8
90676: PPUSH
90677: LD_INT 5
90679: PPUSH
90680: LD_INT 4
90682: PPUSH
90683: CALL_OW 273
90687: PUSH
90688: EMPTY
90689: LIST
90690: LIST
90691: PUSH
90692: EMPTY
90693: LIST
90694: LIST
90695: LIST
90696: LIST
90697: LIST
90698: LIST
90699: ST_TO_ADDR
// for i = tmp downto 1 do
90700: LD_ADDR_VAR 0 4
90704: PUSH
90705: DOUBLE
90706: LD_VAR 0 6
90710: INC
90711: ST_TO_ADDR
90712: LD_INT 1
90714: PUSH
90715: FOR_DOWNTO
90716: IFFALSE 90819
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
90718: LD_VAR 0 6
90722: PUSH
90723: LD_VAR 0 4
90727: ARRAY
90728: PUSH
90729: LD_INT 1
90731: ARRAY
90732: PPUSH
90733: LD_VAR 0 6
90737: PUSH
90738: LD_VAR 0 4
90742: ARRAY
90743: PUSH
90744: LD_INT 2
90746: ARRAY
90747: PPUSH
90748: CALL_OW 488
90752: NOT
90753: IFTRUE 90795
90755: PUSH
90756: LD_VAR 0 6
90760: PUSH
90761: LD_VAR 0 4
90765: ARRAY
90766: PUSH
90767: LD_INT 1
90769: ARRAY
90770: PPUSH
90771: LD_VAR 0 6
90775: PUSH
90776: LD_VAR 0 4
90780: ARRAY
90781: PUSH
90782: LD_INT 2
90784: ARRAY
90785: PPUSH
90786: CALL_OW 428
90790: PUSH
90791: LD_INT 0
90793: NONEQUAL
90794: OR
90795: IFFALSE 90817
// tmp := Delete ( tmp , i ) ;
90797: LD_ADDR_VAR 0 6
90801: PUSH
90802: LD_VAR 0 6
90806: PPUSH
90807: LD_VAR 0 4
90811: PPUSH
90812: CALL_OW 3
90816: ST_TO_ADDR
90817: GO 90715
90819: POP
90820: POP
// j := GetClosestHex ( unit , tmp ) ;
90821: LD_ADDR_VAR 0 5
90825: PUSH
90826: LD_VAR 0 1
90830: PPUSH
90831: LD_VAR 0 6
90835: PPUSH
90836: CALL 90113 0 2
90840: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
90841: LD_VAR 0 1
90845: PPUSH
90846: LD_VAR 0 5
90850: PUSH
90851: LD_INT 1
90853: ARRAY
90854: PPUSH
90855: LD_VAR 0 5
90859: PUSH
90860: LD_INT 2
90862: ARRAY
90863: PPUSH
90864: CALL_OW 111
// result := j ;
90868: LD_ADDR_VAR 0 3
90872: PUSH
90873: LD_VAR 0 5
90877: ST_TO_ADDR
// end ;
90878: LD_VAR 0 3
90882: RET
// export function PrepareApemanSoldier ( ) ; begin
90883: LD_INT 0
90885: PPUSH
// uc_nation := 0 ;
90886: LD_ADDR_OWVAR 21
90890: PUSH
90891: LD_INT 0
90893: ST_TO_ADDR
// hc_sex := sex_male ;
90894: LD_ADDR_OWVAR 27
90898: PUSH
90899: LD_INT 1
90901: ST_TO_ADDR
// hc_name :=  ;
90902: LD_ADDR_OWVAR 26
90906: PUSH
90907: LD_STRING 
90909: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
90910: LD_ADDR_OWVAR 28
90914: PUSH
90915: LD_INT 15
90917: ST_TO_ADDR
// hc_gallery :=  ;
90918: LD_ADDR_OWVAR 33
90922: PUSH
90923: LD_STRING 
90925: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
90926: LD_ADDR_OWVAR 31
90930: PUSH
90931: LD_INT 0
90933: PPUSH
90934: LD_INT 3
90936: PPUSH
90937: CALL_OW 12
90941: PUSH
90942: LD_INT 0
90944: PPUSH
90945: LD_INT 3
90947: PPUSH
90948: CALL_OW 12
90952: PUSH
90953: LD_INT 0
90955: PUSH
90956: LD_INT 0
90958: PUSH
90959: EMPTY
90960: LIST
90961: LIST
90962: LIST
90963: LIST
90964: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
90965: LD_ADDR_OWVAR 29
90969: PUSH
90970: LD_INT 10
90972: PUSH
90973: LD_INT 12
90975: PUSH
90976: EMPTY
90977: LIST
90978: LIST
90979: ST_TO_ADDR
// end ;
90980: LD_VAR 0 1
90984: RET
// export function PrepareApemanEngineer ( ) ; begin
90985: LD_INT 0
90987: PPUSH
// uc_nation := 0 ;
90988: LD_ADDR_OWVAR 21
90992: PUSH
90993: LD_INT 0
90995: ST_TO_ADDR
// hc_sex := sex_male ;
90996: LD_ADDR_OWVAR 27
91000: PUSH
91001: LD_INT 1
91003: ST_TO_ADDR
// hc_name :=  ;
91004: LD_ADDR_OWVAR 26
91008: PUSH
91009: LD_STRING 
91011: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
91012: LD_ADDR_OWVAR 28
91016: PUSH
91017: LD_INT 16
91019: ST_TO_ADDR
// hc_gallery :=  ;
91020: LD_ADDR_OWVAR 33
91024: PUSH
91025: LD_STRING 
91027: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
91028: LD_ADDR_OWVAR 31
91032: PUSH
91033: LD_INT 0
91035: PPUSH
91036: LD_INT 3
91038: PPUSH
91039: CALL_OW 12
91043: PUSH
91044: LD_INT 0
91046: PPUSH
91047: LD_INT 3
91049: PPUSH
91050: CALL_OW 12
91054: PUSH
91055: LD_INT 0
91057: PUSH
91058: LD_INT 0
91060: PUSH
91061: EMPTY
91062: LIST
91063: LIST
91064: LIST
91065: LIST
91066: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
91067: LD_ADDR_OWVAR 29
91071: PUSH
91072: LD_INT 10
91074: PUSH
91075: LD_INT 12
91077: PUSH
91078: EMPTY
91079: LIST
91080: LIST
91081: ST_TO_ADDR
// end ;
91082: LD_VAR 0 1
91086: RET
// export function PrepareApeman ( agressivity ) ; begin
91087: LD_INT 0
91089: PPUSH
// uc_side := 0 ;
91090: LD_ADDR_OWVAR 20
91094: PUSH
91095: LD_INT 0
91097: ST_TO_ADDR
// uc_nation := 0 ;
91098: LD_ADDR_OWVAR 21
91102: PUSH
91103: LD_INT 0
91105: ST_TO_ADDR
// hc_sex := sex_male ;
91106: LD_ADDR_OWVAR 27
91110: PUSH
91111: LD_INT 1
91113: ST_TO_ADDR
// hc_class := class_apeman ;
91114: LD_ADDR_OWVAR 28
91118: PUSH
91119: LD_INT 12
91121: ST_TO_ADDR
// hc_gallery :=  ;
91122: LD_ADDR_OWVAR 33
91126: PUSH
91127: LD_STRING 
91129: ST_TO_ADDR
// hc_name :=  ;
91130: LD_ADDR_OWVAR 26
91134: PUSH
91135: LD_STRING 
91137: ST_TO_ADDR
// hc_attr := [ 10 , 12 ] ;
91138: LD_ADDR_OWVAR 29
91142: PUSH
91143: LD_INT 10
91145: PUSH
91146: LD_INT 12
91148: PUSH
91149: EMPTY
91150: LIST
91151: LIST
91152: ST_TO_ADDR
// if agressivity = 0 then
91153: LD_VAR 0 1
91157: PUSH
91158: LD_INT 0
91160: EQUAL
91161: IFFALSE 91173
// hc_agressivity := 0 else
91163: LD_ADDR_OWVAR 35
91167: PUSH
91168: LD_INT 0
91170: ST_TO_ADDR
91171: GO 91194
// hc_agressivity := rand ( - agressivity , agressivity ) ;
91173: LD_ADDR_OWVAR 35
91177: PUSH
91178: LD_VAR 0 1
91182: NEG
91183: PPUSH
91184: LD_VAR 0 1
91188: PPUSH
91189: CALL_OW 12
91193: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
91194: LD_ADDR_OWVAR 31
91198: PUSH
91199: LD_INT 0
91201: PPUSH
91202: LD_INT 3
91204: PPUSH
91205: CALL_OW 12
91209: PUSH
91210: LD_INT 0
91212: PPUSH
91213: LD_INT 3
91215: PPUSH
91216: CALL_OW 12
91220: PUSH
91221: LD_INT 0
91223: PUSH
91224: LD_INT 0
91226: PUSH
91227: EMPTY
91228: LIST
91229: LIST
91230: LIST
91231: LIST
91232: ST_TO_ADDR
// end ;
91233: LD_VAR 0 2
91237: RET
// export function PrepareTiger ( agressivity ) ; begin
91238: LD_INT 0
91240: PPUSH
// uc_side := 0 ;
91241: LD_ADDR_OWVAR 20
91245: PUSH
91246: LD_INT 0
91248: ST_TO_ADDR
// uc_nation := 0 ;
91249: LD_ADDR_OWVAR 21
91253: PUSH
91254: LD_INT 0
91256: ST_TO_ADDR
// InitHc ;
91257: CALL_OW 19
// hc_class := class_tiger ;
91261: LD_ADDR_OWVAR 28
91265: PUSH
91266: LD_INT 14
91268: ST_TO_ADDR
// hc_gallery :=  ;
91269: LD_ADDR_OWVAR 33
91273: PUSH
91274: LD_STRING 
91276: ST_TO_ADDR
// hc_name :=  ;
91277: LD_ADDR_OWVAR 26
91281: PUSH
91282: LD_STRING 
91284: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
91285: LD_ADDR_OWVAR 35
91289: PUSH
91290: LD_VAR 0 1
91294: NEG
91295: PPUSH
91296: LD_VAR 0 1
91300: PPUSH
91301: CALL_OW 12
91305: ST_TO_ADDR
// end ;
91306: LD_VAR 0 2
91310: RET
// export function PrepareEnchidna ( ) ; begin
91311: LD_INT 0
91313: PPUSH
// uc_side := 0 ;
91314: LD_ADDR_OWVAR 20
91318: PUSH
91319: LD_INT 0
91321: ST_TO_ADDR
// uc_nation := 0 ;
91322: LD_ADDR_OWVAR 21
91326: PUSH
91327: LD_INT 0
91329: ST_TO_ADDR
// InitHc ;
91330: CALL_OW 19
// hc_class := class_baggie ;
91334: LD_ADDR_OWVAR 28
91338: PUSH
91339: LD_INT 13
91341: ST_TO_ADDR
// hc_gallery :=  ;
91342: LD_ADDR_OWVAR 33
91346: PUSH
91347: LD_STRING 
91349: ST_TO_ADDR
// hc_name :=  ;
91350: LD_ADDR_OWVAR 26
91354: PUSH
91355: LD_STRING 
91357: ST_TO_ADDR
// end ;
91358: LD_VAR 0 1
91362: RET
// export function PrepareFrog ( ) ; begin
91363: LD_INT 0
91365: PPUSH
// uc_side := 0 ;
91366: LD_ADDR_OWVAR 20
91370: PUSH
91371: LD_INT 0
91373: ST_TO_ADDR
// uc_nation := 0 ;
91374: LD_ADDR_OWVAR 21
91378: PUSH
91379: LD_INT 0
91381: ST_TO_ADDR
// InitHc ;
91382: CALL_OW 19
// hc_class := class_frog ;
91386: LD_ADDR_OWVAR 28
91390: PUSH
91391: LD_INT 19
91393: ST_TO_ADDR
// hc_gallery :=  ;
91394: LD_ADDR_OWVAR 33
91398: PUSH
91399: LD_STRING 
91401: ST_TO_ADDR
// hc_name :=  ;
91402: LD_ADDR_OWVAR 26
91406: PUSH
91407: LD_STRING 
91409: ST_TO_ADDR
// end ;
91410: LD_VAR 0 1
91414: RET
// export function PrepareFish ( ) ; begin
91415: LD_INT 0
91417: PPUSH
// uc_side := 0 ;
91418: LD_ADDR_OWVAR 20
91422: PUSH
91423: LD_INT 0
91425: ST_TO_ADDR
// uc_nation := 0 ;
91426: LD_ADDR_OWVAR 21
91430: PUSH
91431: LD_INT 0
91433: ST_TO_ADDR
// InitHc ;
91434: CALL_OW 19
// hc_class := class_fish ;
91438: LD_ADDR_OWVAR 28
91442: PUSH
91443: LD_INT 20
91445: ST_TO_ADDR
// hc_gallery :=  ;
91446: LD_ADDR_OWVAR 33
91450: PUSH
91451: LD_STRING 
91453: ST_TO_ADDR
// hc_name :=  ;
91454: LD_ADDR_OWVAR 26
91458: PUSH
91459: LD_STRING 
91461: ST_TO_ADDR
// end ;
91462: LD_VAR 0 1
91466: RET
// export function PrepareBird ( ) ; begin
91467: LD_INT 0
91469: PPUSH
// uc_side := 0 ;
91470: LD_ADDR_OWVAR 20
91474: PUSH
91475: LD_INT 0
91477: ST_TO_ADDR
// uc_nation := 0 ;
91478: LD_ADDR_OWVAR 21
91482: PUSH
91483: LD_INT 0
91485: ST_TO_ADDR
// InitHc ;
91486: CALL_OW 19
// hc_class := class_phororhacos ;
91490: LD_ADDR_OWVAR 28
91494: PUSH
91495: LD_INT 18
91497: ST_TO_ADDR
// hc_gallery :=  ;
91498: LD_ADDR_OWVAR 33
91502: PUSH
91503: LD_STRING 
91505: ST_TO_ADDR
// hc_name :=  ;
91506: LD_ADDR_OWVAR 26
91510: PUSH
91511: LD_STRING 
91513: ST_TO_ADDR
// end ;
91514: LD_VAR 0 1
91518: RET
// export function PrepareHorse ( ) ; begin
91519: LD_INT 0
91521: PPUSH
// uc_side := 0 ;
91522: LD_ADDR_OWVAR 20
91526: PUSH
91527: LD_INT 0
91529: ST_TO_ADDR
// uc_nation := 0 ;
91530: LD_ADDR_OWVAR 21
91534: PUSH
91535: LD_INT 0
91537: ST_TO_ADDR
// InitHc ;
91538: CALL_OW 19
// hc_class := class_horse ;
91542: LD_ADDR_OWVAR 28
91546: PUSH
91547: LD_INT 21
91549: ST_TO_ADDR
// hc_gallery :=  ;
91550: LD_ADDR_OWVAR 33
91554: PUSH
91555: LD_STRING 
91557: ST_TO_ADDR
// hc_name :=  ;
91558: LD_ADDR_OWVAR 26
91562: PUSH
91563: LD_STRING 
91565: ST_TO_ADDR
// end ;
91566: LD_VAR 0 1
91570: RET
// export function PrepareMastodont ( ) ; begin
91571: LD_INT 0
91573: PPUSH
// uc_side := 0 ;
91574: LD_ADDR_OWVAR 20
91578: PUSH
91579: LD_INT 0
91581: ST_TO_ADDR
// uc_nation := 0 ;
91582: LD_ADDR_OWVAR 21
91586: PUSH
91587: LD_INT 0
91589: ST_TO_ADDR
// vc_chassis := class_mastodont ;
91590: LD_ADDR_OWVAR 37
91594: PUSH
91595: LD_INT 31
91597: ST_TO_ADDR
// vc_control := control_rider ;
91598: LD_ADDR_OWVAR 38
91602: PUSH
91603: LD_INT 4
91605: ST_TO_ADDR
// end ;
91606: LD_VAR 0 1
91610: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
91611: LD_INT 0
91613: PPUSH
91614: PPUSH
91615: PPUSH
// uc_side = 0 ;
91616: LD_ADDR_OWVAR 20
91620: PUSH
91621: LD_INT 0
91623: ST_TO_ADDR
// uc_nation = 0 ;
91624: LD_ADDR_OWVAR 21
91628: PUSH
91629: LD_INT 0
91631: ST_TO_ADDR
// InitHc_All ( ) ;
91632: CALL_OW 584
// InitVc ;
91636: CALL_OW 20
// if mastodonts then
91640: LD_VAR 0 6
91644: IFFALSE 91711
// for i = 1 to mastodonts do
91646: LD_ADDR_VAR 0 11
91650: PUSH
91651: DOUBLE
91652: LD_INT 1
91654: DEC
91655: ST_TO_ADDR
91656: LD_VAR 0 6
91660: PUSH
91661: FOR_TO
91662: IFFALSE 91709
// begin vc_chassis := 31 ;
91664: LD_ADDR_OWVAR 37
91668: PUSH
91669: LD_INT 31
91671: ST_TO_ADDR
// vc_control := control_rider ;
91672: LD_ADDR_OWVAR 38
91676: PUSH
91677: LD_INT 4
91679: ST_TO_ADDR
// animal := CreateVehicle ;
91680: LD_ADDR_VAR 0 12
91684: PUSH
91685: CALL_OW 45
91689: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
91690: LD_VAR 0 12
91694: PPUSH
91695: LD_VAR 0 8
91699: PPUSH
91700: LD_INT 0
91702: PPUSH
91703: CALL 93853 0 3
// end ;
91707: GO 91661
91709: POP
91710: POP
// if horses then
91711: LD_VAR 0 5
91715: IFFALSE 91782
// for i = 1 to horses do
91717: LD_ADDR_VAR 0 11
91721: PUSH
91722: DOUBLE
91723: LD_INT 1
91725: DEC
91726: ST_TO_ADDR
91727: LD_VAR 0 5
91731: PUSH
91732: FOR_TO
91733: IFFALSE 91780
// begin hc_class := 21 ;
91735: LD_ADDR_OWVAR 28
91739: PUSH
91740: LD_INT 21
91742: ST_TO_ADDR
// hc_gallery :=  ;
91743: LD_ADDR_OWVAR 33
91747: PUSH
91748: LD_STRING 
91750: ST_TO_ADDR
// animal := CreateHuman ;
91751: LD_ADDR_VAR 0 12
91755: PUSH
91756: CALL_OW 44
91760: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
91761: LD_VAR 0 12
91765: PPUSH
91766: LD_VAR 0 8
91770: PPUSH
91771: LD_INT 0
91773: PPUSH
91774: CALL 93853 0 3
// end ;
91778: GO 91732
91780: POP
91781: POP
// if birds then
91782: LD_VAR 0 1
91786: IFFALSE 91853
// for i = 1 to birds do
91788: LD_ADDR_VAR 0 11
91792: PUSH
91793: DOUBLE
91794: LD_INT 1
91796: DEC
91797: ST_TO_ADDR
91798: LD_VAR 0 1
91802: PUSH
91803: FOR_TO
91804: IFFALSE 91851
// begin hc_class := 18 ;
91806: LD_ADDR_OWVAR 28
91810: PUSH
91811: LD_INT 18
91813: ST_TO_ADDR
// hc_gallery =  ;
91814: LD_ADDR_OWVAR 33
91818: PUSH
91819: LD_STRING 
91821: ST_TO_ADDR
// animal := CreateHuman ;
91822: LD_ADDR_VAR 0 12
91826: PUSH
91827: CALL_OW 44
91831: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
91832: LD_VAR 0 12
91836: PPUSH
91837: LD_VAR 0 8
91841: PPUSH
91842: LD_INT 0
91844: PPUSH
91845: CALL 93853 0 3
// end ;
91849: GO 91803
91851: POP
91852: POP
// if tigers then
91853: LD_VAR 0 2
91857: IFFALSE 91941
// for i = 1 to tigers do
91859: LD_ADDR_VAR 0 11
91863: PUSH
91864: DOUBLE
91865: LD_INT 1
91867: DEC
91868: ST_TO_ADDR
91869: LD_VAR 0 2
91873: PUSH
91874: FOR_TO
91875: IFFALSE 91939
// begin hc_class = class_tiger ;
91877: LD_ADDR_OWVAR 28
91881: PUSH
91882: LD_INT 14
91884: ST_TO_ADDR
// hc_gallery =  ;
91885: LD_ADDR_OWVAR 33
91889: PUSH
91890: LD_STRING 
91892: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
91893: LD_ADDR_OWVAR 35
91897: PUSH
91898: LD_INT 7
91900: NEG
91901: PPUSH
91902: LD_INT 7
91904: PPUSH
91905: CALL_OW 12
91909: ST_TO_ADDR
// animal := CreateHuman ;
91910: LD_ADDR_VAR 0 12
91914: PUSH
91915: CALL_OW 44
91919: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
91920: LD_VAR 0 12
91924: PPUSH
91925: LD_VAR 0 8
91929: PPUSH
91930: LD_INT 0
91932: PPUSH
91933: CALL 93853 0 3
// end ;
91937: GO 91874
91939: POP
91940: POP
// if apemans then
91941: LD_VAR 0 3
91945: IFFALSE 92068
// for i = 1 to apemans do
91947: LD_ADDR_VAR 0 11
91951: PUSH
91952: DOUBLE
91953: LD_INT 1
91955: DEC
91956: ST_TO_ADDR
91957: LD_VAR 0 3
91961: PUSH
91962: FOR_TO
91963: IFFALSE 92066
// begin hc_class = class_apeman ;
91965: LD_ADDR_OWVAR 28
91969: PUSH
91970: LD_INT 12
91972: ST_TO_ADDR
// hc_gallery =  ;
91973: LD_ADDR_OWVAR 33
91977: PUSH
91978: LD_STRING 
91980: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
91981: LD_ADDR_OWVAR 35
91985: PUSH
91986: LD_INT 2
91988: NEG
91989: PPUSH
91990: LD_INT 2
91992: PPUSH
91993: CALL_OW 12
91997: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
91998: LD_ADDR_OWVAR 31
92002: PUSH
92003: LD_INT 1
92005: PPUSH
92006: LD_INT 3
92008: PPUSH
92009: CALL_OW 12
92013: PUSH
92014: LD_INT 1
92016: PPUSH
92017: LD_INT 3
92019: PPUSH
92020: CALL_OW 12
92024: PUSH
92025: LD_INT 0
92027: PUSH
92028: LD_INT 0
92030: PUSH
92031: EMPTY
92032: LIST
92033: LIST
92034: LIST
92035: LIST
92036: ST_TO_ADDR
// animal := CreateHuman ;
92037: LD_ADDR_VAR 0 12
92041: PUSH
92042: CALL_OW 44
92046: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
92047: LD_VAR 0 12
92051: PPUSH
92052: LD_VAR 0 8
92056: PPUSH
92057: LD_INT 0
92059: PPUSH
92060: CALL 93853 0 3
// end ;
92064: GO 91962
92066: POP
92067: POP
// if enchidnas then
92068: LD_VAR 0 4
92072: IFFALSE 92139
// for i = 1 to enchidnas do
92074: LD_ADDR_VAR 0 11
92078: PUSH
92079: DOUBLE
92080: LD_INT 1
92082: DEC
92083: ST_TO_ADDR
92084: LD_VAR 0 4
92088: PUSH
92089: FOR_TO
92090: IFFALSE 92137
// begin hc_class = 13 ;
92092: LD_ADDR_OWVAR 28
92096: PUSH
92097: LD_INT 13
92099: ST_TO_ADDR
// hc_gallery =  ;
92100: LD_ADDR_OWVAR 33
92104: PUSH
92105: LD_STRING 
92107: ST_TO_ADDR
// animal := CreateHuman ;
92108: LD_ADDR_VAR 0 12
92112: PUSH
92113: CALL_OW 44
92117: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
92118: LD_VAR 0 12
92122: PPUSH
92123: LD_VAR 0 8
92127: PPUSH
92128: LD_INT 0
92130: PPUSH
92131: CALL 93853 0 3
// end ;
92135: GO 92089
92137: POP
92138: POP
// if fishes then
92139: LD_VAR 0 7
92143: IFFALSE 92210
// for i = 1 to fishes do
92145: LD_ADDR_VAR 0 11
92149: PUSH
92150: DOUBLE
92151: LD_INT 1
92153: DEC
92154: ST_TO_ADDR
92155: LD_VAR 0 7
92159: PUSH
92160: FOR_TO
92161: IFFALSE 92208
// begin hc_class = 20 ;
92163: LD_ADDR_OWVAR 28
92167: PUSH
92168: LD_INT 20
92170: ST_TO_ADDR
// hc_gallery =  ;
92171: LD_ADDR_OWVAR 33
92175: PUSH
92176: LD_STRING 
92178: ST_TO_ADDR
// animal := CreateHuman ;
92179: LD_ADDR_VAR 0 12
92183: PUSH
92184: CALL_OW 44
92188: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
92189: LD_VAR 0 12
92193: PPUSH
92194: LD_VAR 0 9
92198: PPUSH
92199: LD_INT 0
92201: PPUSH
92202: CALL 93853 0 3
// end ;
92206: GO 92160
92208: POP
92209: POP
// end ;
92210: LD_VAR 0 10
92214: RET
// export function WantHeal ( sci , unit ) ; begin
92215: LD_INT 0
92217: PPUSH
// if GetTaskList ( sci ) > 0 then
92218: LD_VAR 0 1
92222: PPUSH
92223: CALL_OW 437
92227: PUSH
92228: LD_INT 0
92230: GREATER
92231: IFFALSE 92303
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
92233: LD_VAR 0 1
92237: PPUSH
92238: CALL_OW 437
92242: PUSH
92243: LD_INT 1
92245: ARRAY
92246: PUSH
92247: LD_INT 1
92249: ARRAY
92250: PUSH
92251: LD_STRING l
92253: EQUAL
92254: IFFALSE 92281
92256: PUSH
92257: LD_VAR 0 1
92261: PPUSH
92262: CALL_OW 437
92266: PUSH
92267: LD_INT 1
92269: ARRAY
92270: PUSH
92271: LD_INT 4
92273: ARRAY
92274: PUSH
92275: LD_VAR 0 2
92279: EQUAL
92280: AND
92281: IFFALSE 92293
// result := true else
92283: LD_ADDR_VAR 0 3
92287: PUSH
92288: LD_INT 1
92290: ST_TO_ADDR
92291: GO 92301
// result := false ;
92293: LD_ADDR_VAR 0 3
92297: PUSH
92298: LD_INT 0
92300: ST_TO_ADDR
// end else
92301: GO 92311
// result := false ;
92303: LD_ADDR_VAR 0 3
92307: PUSH
92308: LD_INT 0
92310: ST_TO_ADDR
// end ;
92311: LD_VAR 0 3
92315: RET
// export function HealTarget ( sci ) ; begin
92316: LD_INT 0
92318: PPUSH
// if not sci then
92319: LD_VAR 0 1
92323: NOT
92324: IFFALSE 92328
// exit ;
92326: GO 92393
// result := 0 ;
92328: LD_ADDR_VAR 0 2
92332: PUSH
92333: LD_INT 0
92335: ST_TO_ADDR
// if GetTaskList ( sci ) then
92336: LD_VAR 0 1
92340: PPUSH
92341: CALL_OW 437
92345: IFFALSE 92393
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
92347: LD_VAR 0 1
92351: PPUSH
92352: CALL_OW 437
92356: PUSH
92357: LD_INT 1
92359: ARRAY
92360: PUSH
92361: LD_INT 1
92363: ARRAY
92364: PUSH
92365: LD_STRING l
92367: EQUAL
92368: IFFALSE 92393
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
92370: LD_ADDR_VAR 0 2
92374: PUSH
92375: LD_VAR 0 1
92379: PPUSH
92380: CALL_OW 437
92384: PUSH
92385: LD_INT 1
92387: ARRAY
92388: PUSH
92389: LD_INT 4
92391: ARRAY
92392: ST_TO_ADDR
// end ;
92393: LD_VAR 0 2
92397: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
92398: LD_INT 0
92400: PPUSH
92401: PPUSH
92402: PPUSH
92403: PPUSH
// if not base_units then
92404: LD_VAR 0 1
92408: NOT
92409: IFFALSE 92413
// exit ;
92411: GO 92500
// result := false ;
92413: LD_ADDR_VAR 0 2
92417: PUSH
92418: LD_INT 0
92420: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
92421: LD_ADDR_VAR 0 5
92425: PUSH
92426: LD_VAR 0 1
92430: PPUSH
92431: LD_INT 21
92433: PUSH
92434: LD_INT 3
92436: PUSH
92437: EMPTY
92438: LIST
92439: LIST
92440: PPUSH
92441: CALL_OW 72
92445: ST_TO_ADDR
// if not tmp then
92446: LD_VAR 0 5
92450: NOT
92451: IFFALSE 92455
// exit ;
92453: GO 92500
// for i in tmp do
92455: LD_ADDR_VAR 0 3
92459: PUSH
92460: LD_VAR 0 5
92464: PUSH
92465: FOR_IN
92466: IFFALSE 92498
// begin result := EnemyInRange ( i , 22 ) ;
92468: LD_ADDR_VAR 0 2
92472: PUSH
92473: LD_VAR 0 3
92477: PPUSH
92478: LD_INT 22
92480: PPUSH
92481: CALL 89915 0 2
92485: ST_TO_ADDR
// if result then
92486: LD_VAR 0 2
92490: IFFALSE 92496
// exit ;
92492: POP
92493: POP
92494: GO 92500
// end ;
92496: GO 92465
92498: POP
92499: POP
// end ;
92500: LD_VAR 0 2
92504: RET
// export function FilterByTag ( units , tag ) ; begin
92505: LD_INT 0
92507: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
92508: LD_ADDR_VAR 0 3
92512: PUSH
92513: LD_VAR 0 1
92517: PPUSH
92518: LD_INT 120
92520: PUSH
92521: LD_VAR 0 2
92525: PUSH
92526: EMPTY
92527: LIST
92528: LIST
92529: PPUSH
92530: CALL_OW 72
92534: ST_TO_ADDR
// end ;
92535: LD_VAR 0 3
92539: RET
// export function IsDriver ( un ) ; begin
92540: LD_INT 0
92542: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
92543: LD_ADDR_VAR 0 2
92547: PUSH
92548: LD_VAR 0 1
92552: PUSH
92553: LD_INT 55
92555: PUSH
92556: EMPTY
92557: LIST
92558: PPUSH
92559: CALL_OW 69
92563: IN
92564: ST_TO_ADDR
// end ;
92565: LD_VAR 0 2
92569: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
92570: LD_INT 0
92572: PPUSH
92573: PPUSH
// list := [ ] ;
92574: LD_ADDR_VAR 0 5
92578: PUSH
92579: EMPTY
92580: ST_TO_ADDR
// case d of 0 :
92581: LD_VAR 0 3
92585: PUSH
92586: LD_INT 0
92588: DOUBLE
92589: EQUAL
92590: IFTRUE 92594
92592: GO 92727
92594: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
92595: LD_ADDR_VAR 0 5
92599: PUSH
92600: LD_VAR 0 1
92604: PUSH
92605: LD_INT 4
92607: MINUS
92608: PUSH
92609: LD_VAR 0 2
92613: PUSH
92614: LD_INT 4
92616: MINUS
92617: PUSH
92618: LD_INT 2
92620: PUSH
92621: EMPTY
92622: LIST
92623: LIST
92624: LIST
92625: PUSH
92626: LD_VAR 0 1
92630: PUSH
92631: LD_INT 3
92633: MINUS
92634: PUSH
92635: LD_VAR 0 2
92639: PUSH
92640: LD_INT 1
92642: PUSH
92643: EMPTY
92644: LIST
92645: LIST
92646: LIST
92647: PUSH
92648: LD_VAR 0 1
92652: PUSH
92653: LD_INT 4
92655: PLUS
92656: PUSH
92657: LD_VAR 0 2
92661: PUSH
92662: LD_INT 4
92664: PUSH
92665: EMPTY
92666: LIST
92667: LIST
92668: LIST
92669: PUSH
92670: LD_VAR 0 1
92674: PUSH
92675: LD_INT 3
92677: PLUS
92678: PUSH
92679: LD_VAR 0 2
92683: PUSH
92684: LD_INT 3
92686: PLUS
92687: PUSH
92688: LD_INT 5
92690: PUSH
92691: EMPTY
92692: LIST
92693: LIST
92694: LIST
92695: PUSH
92696: LD_VAR 0 1
92700: PUSH
92701: LD_VAR 0 2
92705: PUSH
92706: LD_INT 4
92708: PLUS
92709: PUSH
92710: LD_INT 0
92712: PUSH
92713: EMPTY
92714: LIST
92715: LIST
92716: LIST
92717: PUSH
92718: EMPTY
92719: LIST
92720: LIST
92721: LIST
92722: LIST
92723: LIST
92724: ST_TO_ADDR
// end ; 1 :
92725: GO 93425
92727: LD_INT 1
92729: DOUBLE
92730: EQUAL
92731: IFTRUE 92735
92733: GO 92868
92735: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
92736: LD_ADDR_VAR 0 5
92740: PUSH
92741: LD_VAR 0 1
92745: PUSH
92746: LD_VAR 0 2
92750: PUSH
92751: LD_INT 4
92753: MINUS
92754: PUSH
92755: LD_INT 3
92757: PUSH
92758: EMPTY
92759: LIST
92760: LIST
92761: LIST
92762: PUSH
92763: LD_VAR 0 1
92767: PUSH
92768: LD_INT 3
92770: MINUS
92771: PUSH
92772: LD_VAR 0 2
92776: PUSH
92777: LD_INT 3
92779: MINUS
92780: PUSH
92781: LD_INT 2
92783: PUSH
92784: EMPTY
92785: LIST
92786: LIST
92787: LIST
92788: PUSH
92789: LD_VAR 0 1
92793: PUSH
92794: LD_INT 4
92796: MINUS
92797: PUSH
92798: LD_VAR 0 2
92802: PUSH
92803: LD_INT 1
92805: PUSH
92806: EMPTY
92807: LIST
92808: LIST
92809: LIST
92810: PUSH
92811: LD_VAR 0 1
92815: PUSH
92816: LD_VAR 0 2
92820: PUSH
92821: LD_INT 3
92823: PLUS
92824: PUSH
92825: LD_INT 0
92827: PUSH
92828: EMPTY
92829: LIST
92830: LIST
92831: LIST
92832: PUSH
92833: LD_VAR 0 1
92837: PUSH
92838: LD_INT 4
92840: PLUS
92841: PUSH
92842: LD_VAR 0 2
92846: PUSH
92847: LD_INT 4
92849: PLUS
92850: PUSH
92851: LD_INT 5
92853: PUSH
92854: EMPTY
92855: LIST
92856: LIST
92857: LIST
92858: PUSH
92859: EMPTY
92860: LIST
92861: LIST
92862: LIST
92863: LIST
92864: LIST
92865: ST_TO_ADDR
// end ; 2 :
92866: GO 93425
92868: LD_INT 2
92870: DOUBLE
92871: EQUAL
92872: IFTRUE 92876
92874: GO 93005
92876: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
92877: LD_ADDR_VAR 0 5
92881: PUSH
92882: LD_VAR 0 1
92886: PUSH
92887: LD_VAR 0 2
92891: PUSH
92892: LD_INT 3
92894: MINUS
92895: PUSH
92896: LD_INT 3
92898: PUSH
92899: EMPTY
92900: LIST
92901: LIST
92902: LIST
92903: PUSH
92904: LD_VAR 0 1
92908: PUSH
92909: LD_INT 4
92911: PLUS
92912: PUSH
92913: LD_VAR 0 2
92917: PUSH
92918: LD_INT 4
92920: PUSH
92921: EMPTY
92922: LIST
92923: LIST
92924: LIST
92925: PUSH
92926: LD_VAR 0 1
92930: PUSH
92931: LD_VAR 0 2
92935: PUSH
92936: LD_INT 4
92938: PLUS
92939: PUSH
92940: LD_INT 0
92942: PUSH
92943: EMPTY
92944: LIST
92945: LIST
92946: LIST
92947: PUSH
92948: LD_VAR 0 1
92952: PUSH
92953: LD_INT 3
92955: MINUS
92956: PUSH
92957: LD_VAR 0 2
92961: PUSH
92962: LD_INT 1
92964: PUSH
92965: EMPTY
92966: LIST
92967: LIST
92968: LIST
92969: PUSH
92970: LD_VAR 0 1
92974: PUSH
92975: LD_INT 4
92977: MINUS
92978: PUSH
92979: LD_VAR 0 2
92983: PUSH
92984: LD_INT 4
92986: MINUS
92987: PUSH
92988: LD_INT 2
92990: PUSH
92991: EMPTY
92992: LIST
92993: LIST
92994: LIST
92995: PUSH
92996: EMPTY
92997: LIST
92998: LIST
92999: LIST
93000: LIST
93001: LIST
93002: ST_TO_ADDR
// end ; 3 :
93003: GO 93425
93005: LD_INT 3
93007: DOUBLE
93008: EQUAL
93009: IFTRUE 93013
93011: GO 93146
93013: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
93014: LD_ADDR_VAR 0 5
93018: PUSH
93019: LD_VAR 0 1
93023: PUSH
93024: LD_INT 3
93026: PLUS
93027: PUSH
93028: LD_VAR 0 2
93032: PUSH
93033: LD_INT 4
93035: PUSH
93036: EMPTY
93037: LIST
93038: LIST
93039: LIST
93040: PUSH
93041: LD_VAR 0 1
93045: PUSH
93046: LD_INT 4
93048: PLUS
93049: PUSH
93050: LD_VAR 0 2
93054: PUSH
93055: LD_INT 4
93057: PLUS
93058: PUSH
93059: LD_INT 5
93061: PUSH
93062: EMPTY
93063: LIST
93064: LIST
93065: LIST
93066: PUSH
93067: LD_VAR 0 1
93071: PUSH
93072: LD_INT 4
93074: MINUS
93075: PUSH
93076: LD_VAR 0 2
93080: PUSH
93081: LD_INT 1
93083: PUSH
93084: EMPTY
93085: LIST
93086: LIST
93087: LIST
93088: PUSH
93089: LD_VAR 0 1
93093: PUSH
93094: LD_VAR 0 2
93098: PUSH
93099: LD_INT 4
93101: MINUS
93102: PUSH
93103: LD_INT 3
93105: PUSH
93106: EMPTY
93107: LIST
93108: LIST
93109: LIST
93110: PUSH
93111: LD_VAR 0 1
93115: PUSH
93116: LD_INT 3
93118: MINUS
93119: PUSH
93120: LD_VAR 0 2
93124: PUSH
93125: LD_INT 3
93127: MINUS
93128: PUSH
93129: LD_INT 2
93131: PUSH
93132: EMPTY
93133: LIST
93134: LIST
93135: LIST
93136: PUSH
93137: EMPTY
93138: LIST
93139: LIST
93140: LIST
93141: LIST
93142: LIST
93143: ST_TO_ADDR
// end ; 4 :
93144: GO 93425
93146: LD_INT 4
93148: DOUBLE
93149: EQUAL
93150: IFTRUE 93154
93152: GO 93287
93154: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
93155: LD_ADDR_VAR 0 5
93159: PUSH
93160: LD_VAR 0 1
93164: PUSH
93165: LD_VAR 0 2
93169: PUSH
93170: LD_INT 4
93172: PLUS
93173: PUSH
93174: LD_INT 0
93176: PUSH
93177: EMPTY
93178: LIST
93179: LIST
93180: LIST
93181: PUSH
93182: LD_VAR 0 1
93186: PUSH
93187: LD_INT 3
93189: PLUS
93190: PUSH
93191: LD_VAR 0 2
93195: PUSH
93196: LD_INT 3
93198: PLUS
93199: PUSH
93200: LD_INT 5
93202: PUSH
93203: EMPTY
93204: LIST
93205: LIST
93206: LIST
93207: PUSH
93208: LD_VAR 0 1
93212: PUSH
93213: LD_INT 4
93215: PLUS
93216: PUSH
93217: LD_VAR 0 2
93221: PUSH
93222: LD_INT 4
93224: PUSH
93225: EMPTY
93226: LIST
93227: LIST
93228: LIST
93229: PUSH
93230: LD_VAR 0 1
93234: PUSH
93235: LD_VAR 0 2
93239: PUSH
93240: LD_INT 3
93242: MINUS
93243: PUSH
93244: LD_INT 3
93246: PUSH
93247: EMPTY
93248: LIST
93249: LIST
93250: LIST
93251: PUSH
93252: LD_VAR 0 1
93256: PUSH
93257: LD_INT 4
93259: MINUS
93260: PUSH
93261: LD_VAR 0 2
93265: PUSH
93266: LD_INT 4
93268: MINUS
93269: PUSH
93270: LD_INT 2
93272: PUSH
93273: EMPTY
93274: LIST
93275: LIST
93276: LIST
93277: PUSH
93278: EMPTY
93279: LIST
93280: LIST
93281: LIST
93282: LIST
93283: LIST
93284: ST_TO_ADDR
// end ; 5 :
93285: GO 93425
93287: LD_INT 5
93289: DOUBLE
93290: EQUAL
93291: IFTRUE 93295
93293: GO 93424
93295: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
93296: LD_ADDR_VAR 0 5
93300: PUSH
93301: LD_VAR 0 1
93305: PUSH
93306: LD_INT 4
93308: MINUS
93309: PUSH
93310: LD_VAR 0 2
93314: PUSH
93315: LD_INT 1
93317: PUSH
93318: EMPTY
93319: LIST
93320: LIST
93321: LIST
93322: PUSH
93323: LD_VAR 0 1
93327: PUSH
93328: LD_VAR 0 2
93332: PUSH
93333: LD_INT 4
93335: MINUS
93336: PUSH
93337: LD_INT 3
93339: PUSH
93340: EMPTY
93341: LIST
93342: LIST
93343: LIST
93344: PUSH
93345: LD_VAR 0 1
93349: PUSH
93350: LD_INT 4
93352: PLUS
93353: PUSH
93354: LD_VAR 0 2
93358: PUSH
93359: LD_INT 4
93361: PLUS
93362: PUSH
93363: LD_INT 5
93365: PUSH
93366: EMPTY
93367: LIST
93368: LIST
93369: LIST
93370: PUSH
93371: LD_VAR 0 1
93375: PUSH
93376: LD_INT 3
93378: PLUS
93379: PUSH
93380: LD_VAR 0 2
93384: PUSH
93385: LD_INT 4
93387: PUSH
93388: EMPTY
93389: LIST
93390: LIST
93391: LIST
93392: PUSH
93393: LD_VAR 0 1
93397: PUSH
93398: LD_VAR 0 2
93402: PUSH
93403: LD_INT 3
93405: PLUS
93406: PUSH
93407: LD_INT 0
93409: PUSH
93410: EMPTY
93411: LIST
93412: LIST
93413: LIST
93414: PUSH
93415: EMPTY
93416: LIST
93417: LIST
93418: LIST
93419: LIST
93420: LIST
93421: ST_TO_ADDR
// end ; end ;
93422: GO 93425
93424: POP
// result := list ;
93425: LD_ADDR_VAR 0 4
93429: PUSH
93430: LD_VAR 0 5
93434: ST_TO_ADDR
// end ;
93435: LD_VAR 0 4
93439: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
93440: LD_INT 0
93442: PPUSH
93443: PPUSH
93444: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
93445: LD_VAR 0 1
93449: NOT
93450: IFTRUE 93478
93452: PUSH
93453: LD_VAR 0 2
93457: PUSH
93458: LD_INT 1
93460: PUSH
93461: LD_INT 2
93463: PUSH
93464: LD_INT 3
93466: PUSH
93467: LD_INT 4
93469: PUSH
93470: EMPTY
93471: LIST
93472: LIST
93473: LIST
93474: LIST
93475: IN
93476: NOT
93477: OR
93478: IFFALSE 93482
// exit ;
93480: GO 93565
// tmp := [ ] ;
93482: LD_ADDR_VAR 0 5
93486: PUSH
93487: EMPTY
93488: ST_TO_ADDR
// for i in units do
93489: LD_ADDR_VAR 0 4
93493: PUSH
93494: LD_VAR 0 1
93498: PUSH
93499: FOR_IN
93500: IFFALSE 93534
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
93502: LD_ADDR_VAR 0 5
93506: PUSH
93507: LD_VAR 0 5
93511: PPUSH
93512: LD_VAR 0 4
93516: PPUSH
93517: LD_VAR 0 2
93521: PPUSH
93522: CALL_OW 259
93526: PPUSH
93527: CALL 94960 0 2
93531: ST_TO_ADDR
93532: GO 93499
93534: POP
93535: POP
// if not tmp then
93536: LD_VAR 0 5
93540: NOT
93541: IFFALSE 93545
// exit ;
93543: GO 93565
// result := SortListByListDesc ( units , tmp ) ;
93545: LD_ADDR_VAR 0 3
93549: PUSH
93550: LD_VAR 0 1
93554: PPUSH
93555: LD_VAR 0 5
93559: PPUSH
93560: CALL_OW 77
93564: ST_TO_ADDR
// end ;
93565: LD_VAR 0 3
93569: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
93570: LD_INT 0
93572: PPUSH
93573: PPUSH
93574: PPUSH
// result := false ;
93575: LD_ADDR_VAR 0 3
93579: PUSH
93580: LD_INT 0
93582: ST_TO_ADDR
// if not building then
93583: LD_VAR 0 2
93587: NOT
93588: IFFALSE 93592
// exit ;
93590: GO 93736
// x := GetX ( building ) ;
93592: LD_ADDR_VAR 0 4
93596: PUSH
93597: LD_VAR 0 2
93601: PPUSH
93602: CALL_OW 250
93606: ST_TO_ADDR
// y := GetY ( building ) ;
93607: LD_ADDR_VAR 0 5
93611: PUSH
93612: LD_VAR 0 2
93616: PPUSH
93617: CALL_OW 251
93621: ST_TO_ADDR
// if not x or not y then
93622: LD_VAR 0 4
93626: NOT
93627: IFTRUE 93636
93629: PUSH
93630: LD_VAR 0 5
93634: NOT
93635: OR
93636: IFFALSE 93640
// exit ;
93638: GO 93736
// if GetTaskList ( unit ) then
93640: LD_VAR 0 1
93644: PPUSH
93645: CALL_OW 437
93649: IFFALSE 93736
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
93651: LD_STRING e
93653: PUSH
93654: LD_VAR 0 1
93658: PPUSH
93659: CALL_OW 437
93663: PUSH
93664: LD_INT 1
93666: ARRAY
93667: PUSH
93668: LD_INT 1
93670: ARRAY
93671: EQUAL
93672: IFFALSE 93699
93674: PUSH
93675: LD_VAR 0 4
93679: PUSH
93680: LD_VAR 0 1
93684: PPUSH
93685: CALL_OW 437
93689: PUSH
93690: LD_INT 1
93692: ARRAY
93693: PUSH
93694: LD_INT 2
93696: ARRAY
93697: EQUAL
93698: AND
93699: IFFALSE 93726
93701: PUSH
93702: LD_VAR 0 5
93706: PUSH
93707: LD_VAR 0 1
93711: PPUSH
93712: CALL_OW 437
93716: PUSH
93717: LD_INT 1
93719: ARRAY
93720: PUSH
93721: LD_INT 3
93723: ARRAY
93724: EQUAL
93725: AND
93726: IFFALSE 93736
// result := true end ;
93728: LD_ADDR_VAR 0 3
93732: PUSH
93733: LD_INT 1
93735: ST_TO_ADDR
// end ;
93736: LD_VAR 0 3
93740: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
93741: LD_INT 0
93743: PPUSH
// result := false ;
93744: LD_ADDR_VAR 0 4
93748: PUSH
93749: LD_INT 0
93751: ST_TO_ADDR
// if GetTaskList ( unit ) then
93752: LD_VAR 0 1
93756: PPUSH
93757: CALL_OW 437
93761: IFFALSE 93848
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
93763: LD_STRING M
93765: PUSH
93766: LD_VAR 0 1
93770: PPUSH
93771: CALL_OW 437
93775: PUSH
93776: LD_INT 1
93778: ARRAY
93779: PUSH
93780: LD_INT 1
93782: ARRAY
93783: EQUAL
93784: IFFALSE 93811
93786: PUSH
93787: LD_VAR 0 2
93791: PUSH
93792: LD_VAR 0 1
93796: PPUSH
93797: CALL_OW 437
93801: PUSH
93802: LD_INT 1
93804: ARRAY
93805: PUSH
93806: LD_INT 2
93808: ARRAY
93809: EQUAL
93810: AND
93811: IFFALSE 93838
93813: PUSH
93814: LD_VAR 0 3
93818: PUSH
93819: LD_VAR 0 1
93823: PPUSH
93824: CALL_OW 437
93828: PUSH
93829: LD_INT 1
93831: ARRAY
93832: PUSH
93833: LD_INT 3
93835: ARRAY
93836: EQUAL
93837: AND
93838: IFFALSE 93848
// result := true ;
93840: LD_ADDR_VAR 0 4
93844: PUSH
93845: LD_INT 1
93847: ST_TO_ADDR
// end ; end ;
93848: LD_VAR 0 4
93852: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
93853: LD_INT 0
93855: PPUSH
93856: PPUSH
93857: PPUSH
93858: PPUSH
// if not unit or not area then
93859: LD_VAR 0 1
93863: NOT
93864: IFTRUE 93873
93866: PUSH
93867: LD_VAR 0 2
93871: NOT
93872: OR
93873: IFFALSE 93877
// exit ;
93875: GO 94053
// tmp := AreaToList ( area , i ) ;
93877: LD_ADDR_VAR 0 6
93881: PUSH
93882: LD_VAR 0 2
93886: PPUSH
93887: LD_VAR 0 5
93891: PPUSH
93892: CALL_OW 517
93896: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
93897: LD_ADDR_VAR 0 5
93901: PUSH
93902: DOUBLE
93903: LD_INT 1
93905: DEC
93906: ST_TO_ADDR
93907: LD_VAR 0 6
93911: PUSH
93912: LD_INT 1
93914: ARRAY
93915: PUSH
93916: FOR_TO
93917: IFFALSE 94051
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
93919: LD_ADDR_VAR 0 7
93923: PUSH
93924: LD_VAR 0 6
93928: PUSH
93929: LD_INT 1
93931: ARRAY
93932: PUSH
93933: LD_VAR 0 5
93937: ARRAY
93938: PUSH
93939: LD_VAR 0 6
93943: PUSH
93944: LD_INT 2
93946: ARRAY
93947: PUSH
93948: LD_VAR 0 5
93952: ARRAY
93953: PUSH
93954: EMPTY
93955: LIST
93956: LIST
93957: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
93958: LD_INT 92
93960: PUSH
93961: LD_VAR 0 7
93965: PUSH
93966: LD_INT 1
93968: ARRAY
93969: PUSH
93970: LD_VAR 0 7
93974: PUSH
93975: LD_INT 2
93977: ARRAY
93978: PUSH
93979: LD_INT 2
93981: PUSH
93982: EMPTY
93983: LIST
93984: LIST
93985: LIST
93986: LIST
93987: PPUSH
93988: CALL_OW 69
93992: PUSH
93993: LD_INT 0
93995: EQUAL
93996: IFFALSE 94049
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
93998: LD_VAR 0 1
94002: PPUSH
94003: LD_VAR 0 7
94007: PUSH
94008: LD_INT 1
94010: ARRAY
94011: PPUSH
94012: LD_VAR 0 7
94016: PUSH
94017: LD_INT 2
94019: ARRAY
94020: PPUSH
94021: LD_VAR 0 3
94025: PPUSH
94026: CALL_OW 48
// result := IsPlaced ( unit ) ;
94030: LD_ADDR_VAR 0 4
94034: PUSH
94035: LD_VAR 0 1
94039: PPUSH
94040: CALL_OW 305
94044: ST_TO_ADDR
// exit ;
94045: POP
94046: POP
94047: GO 94053
// end ; end ;
94049: GO 93916
94051: POP
94052: POP
// end ;
94053: LD_VAR 0 4
94057: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
94058: LD_INT 0
94060: PPUSH
94061: PPUSH
94062: PPUSH
// if not side or side > 8 then
94063: LD_VAR 0 1
94067: NOT
94068: IFTRUE 94080
94070: PUSH
94071: LD_VAR 0 1
94075: PUSH
94076: LD_INT 8
94078: GREATER
94079: OR
94080: IFFALSE 94084
// exit ;
94082: GO 94271
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
94084: LD_ADDR_VAR 0 4
94088: PUSH
94089: LD_INT 22
94091: PUSH
94092: LD_VAR 0 1
94096: PUSH
94097: EMPTY
94098: LIST
94099: LIST
94100: PUSH
94101: LD_INT 21
94103: PUSH
94104: LD_INT 3
94106: PUSH
94107: EMPTY
94108: LIST
94109: LIST
94110: PUSH
94111: EMPTY
94112: LIST
94113: LIST
94114: PPUSH
94115: CALL_OW 69
94119: ST_TO_ADDR
// if not tmp then
94120: LD_VAR 0 4
94124: NOT
94125: IFFALSE 94129
// exit ;
94127: GO 94271
// enable_addtolog := true ;
94129: LD_ADDR_OWVAR 81
94133: PUSH
94134: LD_INT 1
94136: ST_TO_ADDR
// AddToLog ( [ ) ;
94137: LD_STRING [
94139: PPUSH
94140: CALL_OW 561
// for i in tmp do
94144: LD_ADDR_VAR 0 3
94148: PUSH
94149: LD_VAR 0 4
94153: PUSH
94154: FOR_IN
94155: IFFALSE 94262
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
94157: LD_STRING [
94159: PUSH
94160: LD_VAR 0 3
94164: PPUSH
94165: CALL_OW 266
94169: STR
94170: PUSH
94171: LD_STRING , 
94173: STR
94174: PUSH
94175: LD_VAR 0 3
94179: PPUSH
94180: CALL_OW 250
94184: STR
94185: PUSH
94186: LD_STRING , 
94188: STR
94189: PUSH
94190: LD_VAR 0 3
94194: PPUSH
94195: CALL_OW 251
94199: STR
94200: PUSH
94201: LD_STRING , 
94203: STR
94204: PUSH
94205: LD_VAR 0 3
94209: PPUSH
94210: CALL_OW 254
94214: STR
94215: PUSH
94216: LD_STRING , 
94218: STR
94219: PUSH
94220: LD_VAR 0 3
94224: PPUSH
94225: LD_INT 1
94227: PPUSH
94228: CALL_OW 268
94232: STR
94233: PUSH
94234: LD_STRING , 
94236: STR
94237: PUSH
94238: LD_VAR 0 3
94242: PPUSH
94243: LD_INT 2
94245: PPUSH
94246: CALL_OW 268
94250: STR
94251: PUSH
94252: LD_STRING ],
94254: STR
94255: PPUSH
94256: CALL_OW 561
// end ;
94260: GO 94154
94262: POP
94263: POP
// AddToLog ( ]; ) ;
94264: LD_STRING ];
94266: PPUSH
94267: CALL_OW 561
// end ;
94271: LD_VAR 0 2
94275: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
94276: LD_INT 0
94278: PPUSH
94279: PPUSH
94280: PPUSH
94281: PPUSH
94282: PPUSH
// if not area or not rate or not max then
94283: LD_VAR 0 1
94287: NOT
94288: IFTRUE 94297
94290: PUSH
94291: LD_VAR 0 2
94295: NOT
94296: OR
94297: IFTRUE 94306
94299: PUSH
94300: LD_VAR 0 4
94304: NOT
94305: OR
94306: IFFALSE 94310
// exit ;
94308: GO 94499
// while 1 do
94310: LD_INT 1
94312: IFFALSE 94499
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
94314: LD_ADDR_VAR 0 9
94318: PUSH
94319: LD_VAR 0 1
94323: PPUSH
94324: LD_INT 1
94326: PPUSH
94327: CALL_OW 287
94331: PUSH
94332: LD_INT 10
94334: MUL
94335: ST_TO_ADDR
// r := rate / 10 ;
94336: LD_ADDR_VAR 0 7
94340: PUSH
94341: LD_VAR 0 2
94345: PUSH
94346: LD_INT 10
94348: DIVREAL
94349: ST_TO_ADDR
// time := 1 1$00 ;
94350: LD_ADDR_VAR 0 8
94354: PUSH
94355: LD_INT 2100
94357: ST_TO_ADDR
// if amount < min then
94358: LD_VAR 0 9
94362: PUSH
94363: LD_VAR 0 3
94367: LESS
94368: IFFALSE 94386
// r := r * 2 else
94370: LD_ADDR_VAR 0 7
94374: PUSH
94375: LD_VAR 0 7
94379: PUSH
94380: LD_INT 2
94382: MUL
94383: ST_TO_ADDR
94384: GO 94412
// if amount > max then
94386: LD_VAR 0 9
94390: PUSH
94391: LD_VAR 0 4
94395: GREATER
94396: IFFALSE 94412
// r := r / 2 ;
94398: LD_ADDR_VAR 0 7
94402: PUSH
94403: LD_VAR 0 7
94407: PUSH
94408: LD_INT 2
94410: DIVREAL
94411: ST_TO_ADDR
// time := time / r ;
94412: LD_ADDR_VAR 0 8
94416: PUSH
94417: LD_VAR 0 8
94421: PUSH
94422: LD_VAR 0 7
94426: DIVREAL
94427: ST_TO_ADDR
// if time < 0 then
94428: LD_VAR 0 8
94432: PUSH
94433: LD_INT 0
94435: LESS
94436: IFFALSE 94453
// time := time * - 1 ;
94438: LD_ADDR_VAR 0 8
94442: PUSH
94443: LD_VAR 0 8
94447: PUSH
94448: LD_INT 1
94450: NEG
94451: MUL
94452: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
94453: LD_VAR 0 8
94457: PUSH
94458: LD_INT 35
94460: PPUSH
94461: LD_INT 875
94463: PPUSH
94464: CALL_OW 12
94468: PLUS
94469: PPUSH
94470: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
94474: LD_INT 1
94476: PPUSH
94477: LD_INT 5
94479: PPUSH
94480: CALL_OW 12
94484: PPUSH
94485: LD_VAR 0 1
94489: PPUSH
94490: LD_INT 1
94492: PPUSH
94493: CALL_OW 55
// end ;
94497: GO 94310
// end ;
94499: LD_VAR 0 5
94503: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
94504: LD_INT 0
94506: PPUSH
94507: PPUSH
94508: PPUSH
94509: PPUSH
94510: PPUSH
94511: PPUSH
94512: PPUSH
94513: PPUSH
// if not turrets or not factories then
94514: LD_VAR 0 1
94518: NOT
94519: IFTRUE 94528
94521: PUSH
94522: LD_VAR 0 2
94526: NOT
94527: OR
94528: IFFALSE 94532
// exit ;
94530: GO 94839
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
94532: LD_ADDR_VAR 0 10
94536: PUSH
94537: LD_INT 5
94539: PUSH
94540: LD_INT 6
94542: PUSH
94543: EMPTY
94544: LIST
94545: LIST
94546: PUSH
94547: LD_INT 2
94549: PUSH
94550: LD_INT 4
94552: PUSH
94553: EMPTY
94554: LIST
94555: LIST
94556: PUSH
94557: LD_INT 3
94559: PUSH
94560: LD_INT 5
94562: PUSH
94563: EMPTY
94564: LIST
94565: LIST
94566: PUSH
94567: EMPTY
94568: LIST
94569: LIST
94570: LIST
94571: PUSH
94572: LD_INT 24
94574: PUSH
94575: LD_INT 25
94577: PUSH
94578: EMPTY
94579: LIST
94580: LIST
94581: PUSH
94582: LD_INT 23
94584: PUSH
94585: LD_INT 27
94587: PUSH
94588: EMPTY
94589: LIST
94590: LIST
94591: PUSH
94592: EMPTY
94593: LIST
94594: LIST
94595: PUSH
94596: LD_INT 42
94598: PUSH
94599: LD_INT 43
94601: PUSH
94602: EMPTY
94603: LIST
94604: LIST
94605: PUSH
94606: LD_INT 44
94608: PUSH
94609: LD_INT 46
94611: PUSH
94612: EMPTY
94613: LIST
94614: LIST
94615: PUSH
94616: LD_INT 45
94618: PUSH
94619: LD_INT 47
94621: PUSH
94622: EMPTY
94623: LIST
94624: LIST
94625: PUSH
94626: EMPTY
94627: LIST
94628: LIST
94629: LIST
94630: PUSH
94631: EMPTY
94632: LIST
94633: LIST
94634: LIST
94635: ST_TO_ADDR
// result := [ ] ;
94636: LD_ADDR_VAR 0 3
94640: PUSH
94641: EMPTY
94642: ST_TO_ADDR
// for i in turrets do
94643: LD_ADDR_VAR 0 4
94647: PUSH
94648: LD_VAR 0 1
94652: PUSH
94653: FOR_IN
94654: IFFALSE 94837
// begin nat := GetNation ( i ) ;
94656: LD_ADDR_VAR 0 7
94660: PUSH
94661: LD_VAR 0 4
94665: PPUSH
94666: CALL_OW 248
94670: ST_TO_ADDR
// weapon := 0 ;
94671: LD_ADDR_VAR 0 8
94675: PUSH
94676: LD_INT 0
94678: ST_TO_ADDR
// if not nat then
94679: LD_VAR 0 7
94683: NOT
94684: IFFALSE 94688
// continue ;
94686: GO 94653
// for j in list [ nat ] do
94688: LD_ADDR_VAR 0 5
94692: PUSH
94693: LD_VAR 0 10
94697: PUSH
94698: LD_VAR 0 7
94702: ARRAY
94703: PUSH
94704: FOR_IN
94705: IFFALSE 94746
// if GetBWeapon ( i ) = j [ 1 ] then
94707: LD_VAR 0 4
94711: PPUSH
94712: CALL_OW 269
94716: PUSH
94717: LD_VAR 0 5
94721: PUSH
94722: LD_INT 1
94724: ARRAY
94725: EQUAL
94726: IFFALSE 94744
// begin weapon := j [ 2 ] ;
94728: LD_ADDR_VAR 0 8
94732: PUSH
94733: LD_VAR 0 5
94737: PUSH
94738: LD_INT 2
94740: ARRAY
94741: ST_TO_ADDR
// break ;
94742: GO 94746
// end ;
94744: GO 94704
94746: POP
94747: POP
// if not weapon then
94748: LD_VAR 0 8
94752: NOT
94753: IFFALSE 94757
// continue ;
94755: GO 94653
// for k in factories do
94757: LD_ADDR_VAR 0 6
94761: PUSH
94762: LD_VAR 0 2
94766: PUSH
94767: FOR_IN
94768: IFFALSE 94833
// begin weapons := AvailableWeaponList ( k ) ;
94770: LD_ADDR_VAR 0 9
94774: PUSH
94775: LD_VAR 0 6
94779: PPUSH
94780: CALL_OW 478
94784: ST_TO_ADDR
// if not weapons then
94785: LD_VAR 0 9
94789: NOT
94790: IFFALSE 94794
// continue ;
94792: GO 94767
// if weapon in weapons then
94794: LD_VAR 0 8
94798: PUSH
94799: LD_VAR 0 9
94803: IN
94804: IFFALSE 94831
// begin result := [ i , weapon ] ;
94806: LD_ADDR_VAR 0 3
94810: PUSH
94811: LD_VAR 0 4
94815: PUSH
94816: LD_VAR 0 8
94820: PUSH
94821: EMPTY
94822: LIST
94823: LIST
94824: ST_TO_ADDR
// exit ;
94825: POP
94826: POP
94827: POP
94828: POP
94829: GO 94839
// end ; end ;
94831: GO 94767
94833: POP
94834: POP
// end ;
94835: GO 94653
94837: POP
94838: POP
// end ;
94839: LD_VAR 0 3
94843: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
94844: LD_INT 0
94846: PPUSH
// if not side or side > 8 then
94847: LD_VAR 0 3
94851: NOT
94852: IFTRUE 94864
94854: PUSH
94855: LD_VAR 0 3
94859: PUSH
94860: LD_INT 8
94862: GREATER
94863: OR
94864: IFFALSE 94868
// exit ;
94866: GO 94927
// if not range then
94868: LD_VAR 0 4
94872: NOT
94873: IFFALSE 94884
// range := - 12 ;
94875: LD_ADDR_VAR 0 4
94879: PUSH
94880: LD_INT 12
94882: NEG
94883: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
94884: LD_VAR 0 1
94888: PPUSH
94889: LD_VAR 0 2
94893: PPUSH
94894: LD_VAR 0 3
94898: PPUSH
94899: LD_VAR 0 4
94903: PPUSH
94904: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
94908: LD_VAR 0 1
94912: PPUSH
94913: LD_VAR 0 2
94917: PPUSH
94918: LD_VAR 0 3
94922: PPUSH
94923: CALL_OW 331
// end ;
94927: LD_VAR 0 5
94931: RET
// export function Video ( mode ) ; begin
94932: LD_INT 0
94934: PPUSH
// ingame_video = mode ;
94935: LD_ADDR_OWVAR 52
94939: PUSH
94940: LD_VAR 0 1
94944: ST_TO_ADDR
// interface_hidden = mode ;
94945: LD_ADDR_OWVAR 54
94949: PUSH
94950: LD_VAR 0 1
94954: ST_TO_ADDR
// end ;
94955: LD_VAR 0 2
94959: RET
// export function Join ( array , element ) ; begin
94960: LD_INT 0
94962: PPUSH
// result := Replace ( array , array + 1 , element ) ;
94963: LD_ADDR_VAR 0 3
94967: PUSH
94968: LD_VAR 0 1
94972: PPUSH
94973: LD_VAR 0 1
94977: PUSH
94978: LD_INT 1
94980: PLUS
94981: PPUSH
94982: LD_VAR 0 2
94986: PPUSH
94987: CALL_OW 1
94991: ST_TO_ADDR
// end ;
94992: LD_VAR 0 3
94996: RET
// export function JoinUnion ( array , element ) ; begin
94997: LD_INT 0
94999: PPUSH
// result := array union element ;
95000: LD_ADDR_VAR 0 3
95004: PUSH
95005: LD_VAR 0 1
95009: PUSH
95010: LD_VAR 0 2
95014: UNION
95015: ST_TO_ADDR
// end ;
95016: LD_VAR 0 3
95020: RET
// export function GetBehemoths ( side ) ; begin
95021: LD_INT 0
95023: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
95024: LD_ADDR_VAR 0 2
95028: PUSH
95029: LD_INT 22
95031: PUSH
95032: LD_VAR 0 1
95036: PUSH
95037: EMPTY
95038: LIST
95039: LIST
95040: PUSH
95041: LD_INT 31
95043: PUSH
95044: LD_INT 25
95046: PUSH
95047: EMPTY
95048: LIST
95049: LIST
95050: PUSH
95051: EMPTY
95052: LIST
95053: LIST
95054: PPUSH
95055: CALL_OW 69
95059: ST_TO_ADDR
// end ;
95060: LD_VAR 0 2
95064: RET
// export function Shuffle ( array ) ; var i , index ; begin
95065: LD_INT 0
95067: PPUSH
95068: PPUSH
95069: PPUSH
// result := [ ] ;
95070: LD_ADDR_VAR 0 2
95074: PUSH
95075: EMPTY
95076: ST_TO_ADDR
// if not array then
95077: LD_VAR 0 1
95081: NOT
95082: IFFALSE 95086
// exit ;
95084: GO 95185
// Randomize ;
95086: CALL_OW 10
// for i = array downto 1 do
95090: LD_ADDR_VAR 0 3
95094: PUSH
95095: DOUBLE
95096: LD_VAR 0 1
95100: INC
95101: ST_TO_ADDR
95102: LD_INT 1
95104: PUSH
95105: FOR_DOWNTO
95106: IFFALSE 95183
// begin index := rand ( 1 , array ) ;
95108: LD_ADDR_VAR 0 4
95112: PUSH
95113: LD_INT 1
95115: PPUSH
95116: LD_VAR 0 1
95120: PPUSH
95121: CALL_OW 12
95125: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
95126: LD_ADDR_VAR 0 2
95130: PUSH
95131: LD_VAR 0 2
95135: PPUSH
95136: LD_VAR 0 2
95140: PUSH
95141: LD_INT 1
95143: PLUS
95144: PPUSH
95145: LD_VAR 0 1
95149: PUSH
95150: LD_VAR 0 4
95154: ARRAY
95155: PPUSH
95156: CALL_OW 2
95160: ST_TO_ADDR
// array := Delete ( array , index ) ;
95161: LD_ADDR_VAR 0 1
95165: PUSH
95166: LD_VAR 0 1
95170: PPUSH
95171: LD_VAR 0 4
95175: PPUSH
95176: CALL_OW 3
95180: ST_TO_ADDR
// end ;
95181: GO 95105
95183: POP
95184: POP
// end ;
95185: LD_VAR 0 2
95189: RET
// export function GetBaseMaterials ( base ) ; begin
95190: LD_INT 0
95192: PPUSH
// result := [ 0 , 0 , 0 ] ;
95193: LD_ADDR_VAR 0 2
95197: PUSH
95198: LD_INT 0
95200: PUSH
95201: LD_INT 0
95203: PUSH
95204: LD_INT 0
95206: PUSH
95207: EMPTY
95208: LIST
95209: LIST
95210: LIST
95211: ST_TO_ADDR
// if not base then
95212: LD_VAR 0 1
95216: NOT
95217: IFFALSE 95221
// exit ;
95219: GO 95270
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
95221: LD_ADDR_VAR 0 2
95225: PUSH
95226: LD_VAR 0 1
95230: PPUSH
95231: LD_INT 1
95233: PPUSH
95234: CALL_OW 275
95238: PUSH
95239: LD_VAR 0 1
95243: PPUSH
95244: LD_INT 2
95246: PPUSH
95247: CALL_OW 275
95251: PUSH
95252: LD_VAR 0 1
95256: PPUSH
95257: LD_INT 3
95259: PPUSH
95260: CALL_OW 275
95264: PUSH
95265: EMPTY
95266: LIST
95267: LIST
95268: LIST
95269: ST_TO_ADDR
// end ;
95270: LD_VAR 0 2
95274: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
95275: LD_INT 0
95277: PPUSH
95278: PPUSH
// result := array ;
95279: LD_ADDR_VAR 0 3
95283: PUSH
95284: LD_VAR 0 1
95288: ST_TO_ADDR
// if size >= result then
95289: LD_VAR 0 2
95293: PUSH
95294: LD_VAR 0 3
95298: GREATEREQUAL
95299: IFFALSE 95303
// exit ;
95301: GO 95353
// if size then
95303: LD_VAR 0 2
95307: IFFALSE 95353
// for i := array downto size do
95309: LD_ADDR_VAR 0 4
95313: PUSH
95314: DOUBLE
95315: LD_VAR 0 1
95319: INC
95320: ST_TO_ADDR
95321: LD_VAR 0 2
95325: PUSH
95326: FOR_DOWNTO
95327: IFFALSE 95351
// result := Delete ( result , result ) ;
95329: LD_ADDR_VAR 0 3
95333: PUSH
95334: LD_VAR 0 3
95338: PPUSH
95339: LD_VAR 0 3
95343: PPUSH
95344: CALL_OW 3
95348: ST_TO_ADDR
95349: GO 95326
95351: POP
95352: POP
// end ;
95353: LD_VAR 0 3
95357: RET
// export function ComExit ( unit ) ; var tmp ; begin
95358: LD_INT 0
95360: PPUSH
95361: PPUSH
// if not IsInUnit ( unit ) then
95362: LD_VAR 0 1
95366: PPUSH
95367: CALL_OW 310
95371: NOT
95372: IFFALSE 95376
// exit ;
95374: GO 95436
// tmp := IsInUnit ( unit ) ;
95376: LD_ADDR_VAR 0 3
95380: PUSH
95381: LD_VAR 0 1
95385: PPUSH
95386: CALL_OW 310
95390: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
95391: LD_VAR 0 3
95395: PPUSH
95396: CALL_OW 247
95400: PUSH
95401: LD_INT 2
95403: EQUAL
95404: IFFALSE 95417
// ComExitVehicle ( unit ) else
95406: LD_VAR 0 1
95410: PPUSH
95411: CALL_OW 121
95415: GO 95426
// ComExitBuilding ( unit ) ;
95417: LD_VAR 0 1
95421: PPUSH
95422: CALL_OW 122
// result := tmp ;
95426: LD_ADDR_VAR 0 2
95430: PUSH
95431: LD_VAR 0 3
95435: ST_TO_ADDR
// end ;
95436: LD_VAR 0 2
95440: RET
// export function ComExitAll ( units ) ; var i ; begin
95441: LD_INT 0
95443: PPUSH
95444: PPUSH
// if not units then
95445: LD_VAR 0 1
95449: NOT
95450: IFFALSE 95454
// exit ;
95452: GO 95480
// for i in units do
95454: LD_ADDR_VAR 0 3
95458: PUSH
95459: LD_VAR 0 1
95463: PUSH
95464: FOR_IN
95465: IFFALSE 95478
// ComExit ( i ) ;
95467: LD_VAR 0 3
95471: PPUSH
95472: CALL 95358 0 1
95476: GO 95464
95478: POP
95479: POP
// end ;
95480: LD_VAR 0 2
95484: RET
// export function ResetHc ; begin
95485: LD_INT 0
95487: PPUSH
// InitHc ;
95488: CALL_OW 19
// hc_importance := 0 ;
95492: LD_ADDR_OWVAR 32
95496: PUSH
95497: LD_INT 0
95499: ST_TO_ADDR
// end ;
95500: LD_VAR 0 1
95504: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
95505: LD_INT 0
95507: PPUSH
95508: PPUSH
95509: PPUSH
// _x := ( x1 + x2 ) div 2 ;
95510: LD_ADDR_VAR 0 6
95514: PUSH
95515: LD_VAR 0 1
95519: PUSH
95520: LD_VAR 0 3
95524: PLUS
95525: PUSH
95526: LD_INT 2
95528: DIV
95529: ST_TO_ADDR
// if _x < 0 then
95530: LD_VAR 0 6
95534: PUSH
95535: LD_INT 0
95537: LESS
95538: IFFALSE 95555
// _x := _x * - 1 ;
95540: LD_ADDR_VAR 0 6
95544: PUSH
95545: LD_VAR 0 6
95549: PUSH
95550: LD_INT 1
95552: NEG
95553: MUL
95554: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
95555: LD_ADDR_VAR 0 7
95559: PUSH
95560: LD_VAR 0 2
95564: PUSH
95565: LD_VAR 0 4
95569: PLUS
95570: PUSH
95571: LD_INT 2
95573: DIV
95574: ST_TO_ADDR
// if _y < 0 then
95575: LD_VAR 0 7
95579: PUSH
95580: LD_INT 0
95582: LESS
95583: IFFALSE 95600
// _y := _y * - 1 ;
95585: LD_ADDR_VAR 0 7
95589: PUSH
95590: LD_VAR 0 7
95594: PUSH
95595: LD_INT 1
95597: NEG
95598: MUL
95599: ST_TO_ADDR
// result := [ _x , _y ] ;
95600: LD_ADDR_VAR 0 5
95604: PUSH
95605: LD_VAR 0 6
95609: PUSH
95610: LD_VAR 0 7
95614: PUSH
95615: EMPTY
95616: LIST
95617: LIST
95618: ST_TO_ADDR
// end ;
95619: LD_VAR 0 5
95623: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
95624: LD_INT 0
95626: PPUSH
95627: PPUSH
95628: PPUSH
95629: PPUSH
// task := GetTaskList ( unit ) ;
95630: LD_ADDR_VAR 0 7
95634: PUSH
95635: LD_VAR 0 1
95639: PPUSH
95640: CALL_OW 437
95644: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
95645: LD_VAR 0 7
95649: NOT
95650: IFFALSE 95669
95652: PUSH
95653: LD_VAR 0 1
95657: PPUSH
95658: LD_VAR 0 2
95662: PPUSH
95663: CALL_OW 308
95667: NOT
95668: AND
95669: IFFALSE 95673
// exit ;
95671: GO 95791
// if IsInArea ( unit , area ) then
95673: LD_VAR 0 1
95677: PPUSH
95678: LD_VAR 0 2
95682: PPUSH
95683: CALL_OW 308
95687: IFFALSE 95705
// begin ComMoveToArea ( unit , goAway ) ;
95689: LD_VAR 0 1
95693: PPUSH
95694: LD_VAR 0 3
95698: PPUSH
95699: CALL_OW 113
// exit ;
95703: GO 95791
// end ; if task [ 1 ] [ 1 ] <> M then
95705: LD_VAR 0 7
95709: PUSH
95710: LD_INT 1
95712: ARRAY
95713: PUSH
95714: LD_INT 1
95716: ARRAY
95717: PUSH
95718: LD_STRING M
95720: NONEQUAL
95721: IFFALSE 95725
// exit ;
95723: GO 95791
// x := task [ 1 ] [ 2 ] ;
95725: LD_ADDR_VAR 0 5
95729: PUSH
95730: LD_VAR 0 7
95734: PUSH
95735: LD_INT 1
95737: ARRAY
95738: PUSH
95739: LD_INT 2
95741: ARRAY
95742: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
95743: LD_ADDR_VAR 0 6
95747: PUSH
95748: LD_VAR 0 7
95752: PUSH
95753: LD_INT 1
95755: ARRAY
95756: PUSH
95757: LD_INT 3
95759: ARRAY
95760: ST_TO_ADDR
// if InArea ( x , y , area ) then
95761: LD_VAR 0 5
95765: PPUSH
95766: LD_VAR 0 6
95770: PPUSH
95771: LD_VAR 0 2
95775: PPUSH
95776: CALL_OW 309
95780: IFFALSE 95791
// ComStop ( unit ) ;
95782: LD_VAR 0 1
95786: PPUSH
95787: CALL_OW 141
// end ;
95791: LD_VAR 0 4
95795: RET
// export function Abs ( value ) ; begin
95796: LD_INT 0
95798: PPUSH
// result := value ;
95799: LD_ADDR_VAR 0 2
95803: PUSH
95804: LD_VAR 0 1
95808: ST_TO_ADDR
// if value < 0 then
95809: LD_VAR 0 1
95813: PUSH
95814: LD_INT 0
95816: LESS
95817: IFFALSE 95834
// result := value * - 1 ;
95819: LD_ADDR_VAR 0 2
95823: PUSH
95824: LD_VAR 0 1
95828: PUSH
95829: LD_INT 1
95831: NEG
95832: MUL
95833: ST_TO_ADDR
// end ;
95834: LD_VAR 0 2
95838: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
95839: LD_INT 0
95841: PPUSH
95842: PPUSH
95843: PPUSH
95844: PPUSH
95845: PPUSH
95846: PPUSH
95847: PPUSH
95848: PPUSH
// if not unit or not building then
95849: LD_VAR 0 1
95853: NOT
95854: IFTRUE 95863
95856: PUSH
95857: LD_VAR 0 2
95861: NOT
95862: OR
95863: IFFALSE 95867
// exit ;
95865: GO 96095
// x := GetX ( building ) ;
95867: LD_ADDR_VAR 0 4
95871: PUSH
95872: LD_VAR 0 2
95876: PPUSH
95877: CALL_OW 250
95881: ST_TO_ADDR
// y := GetY ( building ) ;
95882: LD_ADDR_VAR 0 6
95886: PUSH
95887: LD_VAR 0 2
95891: PPUSH
95892: CALL_OW 251
95896: ST_TO_ADDR
// d := GetDir ( building ) ;
95897: LD_ADDR_VAR 0 8
95901: PUSH
95902: LD_VAR 0 2
95906: PPUSH
95907: CALL_OW 254
95911: ST_TO_ADDR
// r := 4 ;
95912: LD_ADDR_VAR 0 9
95916: PUSH
95917: LD_INT 4
95919: ST_TO_ADDR
// for i := 1 to 5 do
95920: LD_ADDR_VAR 0 10
95924: PUSH
95925: DOUBLE
95926: LD_INT 1
95928: DEC
95929: ST_TO_ADDR
95930: LD_INT 5
95932: PUSH
95933: FOR_TO
95934: IFFALSE 96093
// begin _x := ShiftX ( x , d , r + i ) ;
95936: LD_ADDR_VAR 0 5
95940: PUSH
95941: LD_VAR 0 4
95945: PPUSH
95946: LD_VAR 0 8
95950: PPUSH
95951: LD_VAR 0 9
95955: PUSH
95956: LD_VAR 0 10
95960: PLUS
95961: PPUSH
95962: CALL_OW 272
95966: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
95967: LD_ADDR_VAR 0 7
95971: PUSH
95972: LD_VAR 0 6
95976: PPUSH
95977: LD_VAR 0 8
95981: PPUSH
95982: LD_VAR 0 9
95986: PUSH
95987: LD_VAR 0 10
95991: PLUS
95992: PPUSH
95993: CALL_OW 273
95997: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
95998: LD_VAR 0 5
96002: PPUSH
96003: LD_VAR 0 7
96007: PPUSH
96008: CALL_OW 488
96012: IFFALSE 96047
96014: PUSH
96015: LD_VAR 0 5
96019: PPUSH
96020: LD_VAR 0 7
96024: PPUSH
96025: CALL_OW 428
96029: PPUSH
96030: CALL_OW 247
96034: PUSH
96035: LD_INT 3
96037: PUSH
96038: LD_INT 2
96040: PUSH
96041: EMPTY
96042: LIST
96043: LIST
96044: IN
96045: NOT
96046: AND
96047: IFFALSE 96091
// begin ComMoveXY ( unit , _x , _y ) ;
96049: LD_VAR 0 1
96053: PPUSH
96054: LD_VAR 0 5
96058: PPUSH
96059: LD_VAR 0 7
96063: PPUSH
96064: CALL_OW 111
// result := [ _x , _y ] ;
96068: LD_ADDR_VAR 0 3
96072: PUSH
96073: LD_VAR 0 5
96077: PUSH
96078: LD_VAR 0 7
96082: PUSH
96083: EMPTY
96084: LIST
96085: LIST
96086: ST_TO_ADDR
// exit ;
96087: POP
96088: POP
96089: GO 96095
// end ; end ;
96091: GO 95933
96093: POP
96094: POP
// end ;
96095: LD_VAR 0 3
96099: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
96100: LD_INT 0
96102: PPUSH
96103: PPUSH
96104: PPUSH
// result := 0 ;
96105: LD_ADDR_VAR 0 3
96109: PUSH
96110: LD_INT 0
96112: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
96113: LD_VAR 0 1
96117: PUSH
96118: LD_INT 0
96120: LESS
96121: IFTRUE 96133
96123: PUSH
96124: LD_VAR 0 1
96128: PUSH
96129: LD_INT 8
96131: GREATER
96132: OR
96133: IFTRUE 96145
96135: PUSH
96136: LD_VAR 0 2
96140: PUSH
96141: LD_INT 0
96143: LESS
96144: OR
96145: IFTRUE 96157
96147: PUSH
96148: LD_VAR 0 2
96152: PUSH
96153: LD_INT 8
96155: GREATER
96156: OR
96157: IFFALSE 96161
// exit ;
96159: GO 96236
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
96161: LD_ADDR_VAR 0 4
96165: PUSH
96166: LD_INT 22
96168: PUSH
96169: LD_VAR 0 2
96173: PUSH
96174: EMPTY
96175: LIST
96176: LIST
96177: PPUSH
96178: CALL_OW 69
96182: PUSH
96183: FOR_IN
96184: IFFALSE 96234
// begin un := UnitShoot ( i ) ;
96186: LD_ADDR_VAR 0 5
96190: PUSH
96191: LD_VAR 0 4
96195: PPUSH
96196: CALL_OW 504
96200: ST_TO_ADDR
// if GetSide ( un ) = side1 then
96201: LD_VAR 0 5
96205: PPUSH
96206: CALL_OW 255
96210: PUSH
96211: LD_VAR 0 1
96215: EQUAL
96216: IFFALSE 96232
// begin result := un ;
96218: LD_ADDR_VAR 0 3
96222: PUSH
96223: LD_VAR 0 5
96227: ST_TO_ADDR
// exit ;
96228: POP
96229: POP
96230: GO 96236
// end ; end ;
96232: GO 96183
96234: POP
96235: POP
// end ;
96236: LD_VAR 0 3
96240: RET
// export function GetCargoBay ( units ) ; begin
96241: LD_INT 0
96243: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
96244: LD_ADDR_VAR 0 2
96248: PUSH
96249: LD_VAR 0 1
96253: PPUSH
96254: LD_INT 2
96256: PUSH
96257: LD_INT 34
96259: PUSH
96260: LD_INT 12
96262: PUSH
96263: EMPTY
96264: LIST
96265: LIST
96266: PUSH
96267: LD_INT 34
96269: PUSH
96270: LD_INT 51
96272: PUSH
96273: EMPTY
96274: LIST
96275: LIST
96276: PUSH
96277: LD_INT 34
96279: PUSH
96280: LD_INT 32
96282: PUSH
96283: EMPTY
96284: LIST
96285: LIST
96286: PUSH
96287: LD_INT 34
96289: PUSH
96290: LD_INT 89
96292: PUSH
96293: EMPTY
96294: LIST
96295: LIST
96296: PUSH
96297: EMPTY
96298: LIST
96299: LIST
96300: LIST
96301: LIST
96302: LIST
96303: PPUSH
96304: CALL_OW 72
96308: ST_TO_ADDR
// end ;
96309: LD_VAR 0 2
96313: RET
// export function Negate ( value ) ; begin
96314: LD_INT 0
96316: PPUSH
// result := not value ;
96317: LD_ADDR_VAR 0 2
96321: PUSH
96322: LD_VAR 0 1
96326: NOT
96327: ST_TO_ADDR
// end ;
96328: LD_VAR 0 2
96332: RET
// export function Inc ( value ) ; begin
96333: LD_INT 0
96335: PPUSH
// result := value + 1 ;
96336: LD_ADDR_VAR 0 2
96340: PUSH
96341: LD_VAR 0 1
96345: PUSH
96346: LD_INT 1
96348: PLUS
96349: ST_TO_ADDR
// end ;
96350: LD_VAR 0 2
96354: RET
// export function Dec ( value ) ; begin
96355: LD_INT 0
96357: PPUSH
// result := value - 1 ;
96358: LD_ADDR_VAR 0 2
96362: PUSH
96363: LD_VAR 0 1
96367: PUSH
96368: LD_INT 1
96370: MINUS
96371: ST_TO_ADDR
// end ;
96372: LD_VAR 0 2
96376: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
96377: LD_INT 0
96379: PPUSH
96380: PPUSH
96381: PPUSH
96382: PPUSH
96383: PPUSH
96384: PPUSH
96385: PPUSH
96386: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
96387: LD_VAR 0 1
96391: PPUSH
96392: LD_VAR 0 2
96396: PPUSH
96397: CALL_OW 488
96401: NOT
96402: IFTRUE 96421
96404: PUSH
96405: LD_VAR 0 3
96409: PPUSH
96410: LD_VAR 0 4
96414: PPUSH
96415: CALL_OW 488
96419: NOT
96420: OR
96421: IFFALSE 96434
// begin result := - 1 ;
96423: LD_ADDR_VAR 0 5
96427: PUSH
96428: LD_INT 1
96430: NEG
96431: ST_TO_ADDR
// exit ;
96432: GO 96669
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
96434: LD_ADDR_VAR 0 12
96438: PUSH
96439: LD_VAR 0 1
96443: PPUSH
96444: LD_VAR 0 2
96448: PPUSH
96449: LD_VAR 0 3
96453: PPUSH
96454: LD_VAR 0 4
96458: PPUSH
96459: CALL 95505 0 4
96463: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
96464: LD_ADDR_VAR 0 11
96468: PUSH
96469: LD_VAR 0 1
96473: PPUSH
96474: LD_VAR 0 2
96478: PPUSH
96479: LD_VAR 0 12
96483: PUSH
96484: LD_INT 1
96486: ARRAY
96487: PPUSH
96488: LD_VAR 0 12
96492: PUSH
96493: LD_INT 2
96495: ARRAY
96496: PPUSH
96497: CALL_OW 298
96501: ST_TO_ADDR
// distance := 9999 ;
96502: LD_ADDR_VAR 0 10
96506: PUSH
96507: LD_INT 9999
96509: ST_TO_ADDR
// for i := 0 to 5 do
96510: LD_ADDR_VAR 0 6
96514: PUSH
96515: DOUBLE
96516: LD_INT 0
96518: DEC
96519: ST_TO_ADDR
96520: LD_INT 5
96522: PUSH
96523: FOR_TO
96524: IFFALSE 96667
// begin _x := ShiftX ( x1 , i , centerDist ) ;
96526: LD_ADDR_VAR 0 7
96530: PUSH
96531: LD_VAR 0 1
96535: PPUSH
96536: LD_VAR 0 6
96540: PPUSH
96541: LD_VAR 0 11
96545: PPUSH
96546: CALL_OW 272
96550: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
96551: LD_ADDR_VAR 0 8
96555: PUSH
96556: LD_VAR 0 2
96560: PPUSH
96561: LD_VAR 0 6
96565: PPUSH
96566: LD_VAR 0 11
96570: PPUSH
96571: CALL_OW 273
96575: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
96576: LD_VAR 0 7
96580: PPUSH
96581: LD_VAR 0 8
96585: PPUSH
96586: CALL_OW 488
96590: NOT
96591: IFFALSE 96595
// continue ;
96593: GO 96523
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
96595: LD_ADDR_VAR 0 9
96599: PUSH
96600: LD_VAR 0 12
96604: PUSH
96605: LD_INT 1
96607: ARRAY
96608: PPUSH
96609: LD_VAR 0 12
96613: PUSH
96614: LD_INT 2
96616: ARRAY
96617: PPUSH
96618: LD_VAR 0 7
96622: PPUSH
96623: LD_VAR 0 8
96627: PPUSH
96628: CALL_OW 298
96632: ST_TO_ADDR
// if tmp < distance then
96633: LD_VAR 0 9
96637: PUSH
96638: LD_VAR 0 10
96642: LESS
96643: IFFALSE 96665
// begin result := i ;
96645: LD_ADDR_VAR 0 5
96649: PUSH
96650: LD_VAR 0 6
96654: ST_TO_ADDR
// distance := tmp ;
96655: LD_ADDR_VAR 0 10
96659: PUSH
96660: LD_VAR 0 9
96664: ST_TO_ADDR
// end ; end ;
96665: GO 96523
96667: POP
96668: POP
// end ;
96669: LD_VAR 0 5
96673: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
96674: LD_INT 0
96676: PPUSH
96677: PPUSH
// if not driver or not IsInUnit ( driver ) then
96678: LD_VAR 0 1
96682: NOT
96683: IFTRUE 96697
96685: PUSH
96686: LD_VAR 0 1
96690: PPUSH
96691: CALL_OW 310
96695: NOT
96696: OR
96697: IFFALSE 96701
// exit ;
96699: GO 96791
// vehicle := IsInUnit ( driver ) ;
96701: LD_ADDR_VAR 0 3
96705: PUSH
96706: LD_VAR 0 1
96710: PPUSH
96711: CALL_OW 310
96715: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
96716: LD_VAR 0 1
96720: PPUSH
96721: LD_STRING \
96723: PUSH
96724: LD_INT 0
96726: PUSH
96727: LD_INT 0
96729: PUSH
96730: LD_INT 0
96732: PUSH
96733: LD_INT 0
96735: PUSH
96736: LD_INT 0
96738: PUSH
96739: LD_INT 0
96741: PUSH
96742: EMPTY
96743: LIST
96744: LIST
96745: LIST
96746: LIST
96747: LIST
96748: LIST
96749: LIST
96750: PUSH
96751: LD_STRING E
96753: PUSH
96754: LD_INT 0
96756: PUSH
96757: LD_INT 0
96759: PUSH
96760: LD_VAR 0 3
96764: PUSH
96765: LD_INT 0
96767: PUSH
96768: LD_INT 0
96770: PUSH
96771: LD_INT 0
96773: PUSH
96774: EMPTY
96775: LIST
96776: LIST
96777: LIST
96778: LIST
96779: LIST
96780: LIST
96781: LIST
96782: PUSH
96783: EMPTY
96784: LIST
96785: LIST
96786: PPUSH
96787: CALL_OW 446
// end ;
96791: LD_VAR 0 2
96795: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
96796: LD_INT 0
96798: PPUSH
96799: PPUSH
// if not driver or not IsInUnit ( driver ) then
96800: LD_VAR 0 1
96804: NOT
96805: IFTRUE 96819
96807: PUSH
96808: LD_VAR 0 1
96812: PPUSH
96813: CALL_OW 310
96817: NOT
96818: OR
96819: IFFALSE 96823
// exit ;
96821: GO 96913
// vehicle := IsInUnit ( driver ) ;
96823: LD_ADDR_VAR 0 3
96827: PUSH
96828: LD_VAR 0 1
96832: PPUSH
96833: CALL_OW 310
96837: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
96838: LD_VAR 0 1
96842: PPUSH
96843: LD_STRING \
96845: PUSH
96846: LD_INT 0
96848: PUSH
96849: LD_INT 0
96851: PUSH
96852: LD_INT 0
96854: PUSH
96855: LD_INT 0
96857: PUSH
96858: LD_INT 0
96860: PUSH
96861: LD_INT 0
96863: PUSH
96864: EMPTY
96865: LIST
96866: LIST
96867: LIST
96868: LIST
96869: LIST
96870: LIST
96871: LIST
96872: PUSH
96873: LD_STRING E
96875: PUSH
96876: LD_INT 0
96878: PUSH
96879: LD_INT 0
96881: PUSH
96882: LD_VAR 0 3
96886: PUSH
96887: LD_INT 0
96889: PUSH
96890: LD_INT 0
96892: PUSH
96893: LD_INT 0
96895: PUSH
96896: EMPTY
96897: LIST
96898: LIST
96899: LIST
96900: LIST
96901: LIST
96902: LIST
96903: LIST
96904: PUSH
96905: EMPTY
96906: LIST
96907: LIST
96908: PPUSH
96909: CALL_OW 447
// end ;
96913: LD_VAR 0 2
96917: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
96918: LD_INT 0
96920: PPUSH
96921: PPUSH
96922: PPUSH
// tmp := [ ] ;
96923: LD_ADDR_VAR 0 5
96927: PUSH
96928: EMPTY
96929: ST_TO_ADDR
// for i in units do
96930: LD_ADDR_VAR 0 4
96934: PUSH
96935: LD_VAR 0 1
96939: PUSH
96940: FOR_IN
96941: IFFALSE 96979
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
96943: LD_ADDR_VAR 0 5
96947: PUSH
96948: LD_VAR 0 5
96952: PPUSH
96953: LD_VAR 0 5
96957: PUSH
96958: LD_INT 1
96960: PLUS
96961: PPUSH
96962: LD_VAR 0 4
96966: PPUSH
96967: CALL_OW 256
96971: PPUSH
96972: CALL_OW 2
96976: ST_TO_ADDR
96977: GO 96940
96979: POP
96980: POP
// if not tmp then
96981: LD_VAR 0 5
96985: NOT
96986: IFFALSE 96990
// exit ;
96988: GO 97038
// if asc then
96990: LD_VAR 0 2
96994: IFFALSE 97018
// result := SortListByListAsc ( units , tmp ) else
96996: LD_ADDR_VAR 0 3
97000: PUSH
97001: LD_VAR 0 1
97005: PPUSH
97006: LD_VAR 0 5
97010: PPUSH
97011: CALL_OW 76
97015: ST_TO_ADDR
97016: GO 97038
// result := SortListByListDesc ( units , tmp ) ;
97018: LD_ADDR_VAR 0 3
97022: PUSH
97023: LD_VAR 0 1
97027: PPUSH
97028: LD_VAR 0 5
97032: PPUSH
97033: CALL_OW 77
97037: ST_TO_ADDR
// end ;
97038: LD_VAR 0 3
97042: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
97043: LD_INT 0
97045: PPUSH
97046: PPUSH
// task := GetTaskList ( mech ) ;
97047: LD_ADDR_VAR 0 4
97051: PUSH
97052: LD_VAR 0 1
97056: PPUSH
97057: CALL_OW 437
97061: ST_TO_ADDR
// if not task then
97062: LD_VAR 0 4
97066: NOT
97067: IFFALSE 97071
// exit ;
97069: GO 97115
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
97071: LD_ADDR_VAR 0 3
97075: PUSH
97076: LD_VAR 0 4
97080: PUSH
97081: LD_INT 1
97083: ARRAY
97084: PUSH
97085: LD_INT 1
97087: ARRAY
97088: PUSH
97089: LD_STRING r
97091: EQUAL
97092: IFFALSE 97114
97094: PUSH
97095: LD_VAR 0 4
97099: PUSH
97100: LD_INT 1
97102: ARRAY
97103: PUSH
97104: LD_INT 4
97106: ARRAY
97107: PUSH
97108: LD_VAR 0 2
97112: EQUAL
97113: AND
97114: ST_TO_ADDR
// end ;
97115: LD_VAR 0 3
97119: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
97120: LD_INT 0
97122: PPUSH
// SetDir ( unit , d ) ;
97123: LD_VAR 0 1
97127: PPUSH
97128: LD_VAR 0 4
97132: PPUSH
97133: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
97137: LD_ADDR_VAR 0 6
97141: PUSH
97142: LD_VAR 0 1
97146: PPUSH
97147: LD_VAR 0 2
97151: PPUSH
97152: LD_VAR 0 3
97156: PPUSH
97157: LD_VAR 0 5
97161: PPUSH
97162: CALL_OW 48
97166: ST_TO_ADDR
// end ;
97167: LD_VAR 0 6
97171: RET
// export function ToNaturalNumber ( number ) ; begin
97172: LD_INT 0
97174: PPUSH
// result := number div 1 ;
97175: LD_ADDR_VAR 0 2
97179: PUSH
97180: LD_VAR 0 1
97184: PUSH
97185: LD_INT 1
97187: DIV
97188: ST_TO_ADDR
// if number < 0 then
97189: LD_VAR 0 1
97193: PUSH
97194: LD_INT 0
97196: LESS
97197: IFFALSE 97207
// result := 0 ;
97199: LD_ADDR_VAR 0 2
97203: PUSH
97204: LD_INT 0
97206: ST_TO_ADDR
// end ;
97207: LD_VAR 0 2
97211: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
97212: LD_INT 0
97214: PPUSH
97215: PPUSH
97216: PPUSH
// if not buildings then
97217: LD_VAR 0 1
97221: NOT
97222: IFFALSE 97226
// exit ;
97224: GO 97341
// tmp := [ ] ;
97226: LD_ADDR_VAR 0 5
97230: PUSH
97231: EMPTY
97232: ST_TO_ADDR
// for b in buildings do
97233: LD_ADDR_VAR 0 4
97237: PUSH
97238: LD_VAR 0 1
97242: PUSH
97243: FOR_IN
97244: IFFALSE 97282
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
97246: LD_ADDR_VAR 0 5
97250: PUSH
97251: LD_VAR 0 5
97255: PPUSH
97256: LD_VAR 0 5
97260: PUSH
97261: LD_INT 1
97263: PLUS
97264: PPUSH
97265: LD_VAR 0 4
97269: PPUSH
97270: CALL_OW 266
97274: PPUSH
97275: CALL_OW 1
97279: ST_TO_ADDR
97280: GO 97243
97282: POP
97283: POP
// if not tmp then
97284: LD_VAR 0 5
97288: NOT
97289: IFFALSE 97293
// exit ;
97291: GO 97341
// if asc then
97293: LD_VAR 0 2
97297: IFFALSE 97321
// result := SortListByListAsc ( buildings , tmp ) else
97299: LD_ADDR_VAR 0 3
97303: PUSH
97304: LD_VAR 0 1
97308: PPUSH
97309: LD_VAR 0 5
97313: PPUSH
97314: CALL_OW 76
97318: ST_TO_ADDR
97319: GO 97341
// result := SortListByListDesc ( buildings , tmp ) ;
97321: LD_ADDR_VAR 0 3
97325: PUSH
97326: LD_VAR 0 1
97330: PPUSH
97331: LD_VAR 0 5
97335: PPUSH
97336: CALL_OW 77
97340: ST_TO_ADDR
// end ;
97341: LD_VAR 0 3
97345: RET
// export function SortByClass ( units , class ) ; var un ; begin
97346: LD_INT 0
97348: PPUSH
97349: PPUSH
// if not units or not class then
97350: LD_VAR 0 1
97354: NOT
97355: IFTRUE 97364
97357: PUSH
97358: LD_VAR 0 2
97362: NOT
97363: OR
97364: IFFALSE 97368
// exit ;
97366: GO 97463
// result := [ ] ;
97368: LD_ADDR_VAR 0 3
97372: PUSH
97373: EMPTY
97374: ST_TO_ADDR
// for un in units do
97375: LD_ADDR_VAR 0 4
97379: PUSH
97380: LD_VAR 0 1
97384: PUSH
97385: FOR_IN
97386: IFFALSE 97461
// if GetClass ( un ) = class then
97388: LD_VAR 0 4
97392: PPUSH
97393: CALL_OW 257
97397: PUSH
97398: LD_VAR 0 2
97402: EQUAL
97403: IFFALSE 97430
// result := Insert ( result , 1 , un ) else
97405: LD_ADDR_VAR 0 3
97409: PUSH
97410: LD_VAR 0 3
97414: PPUSH
97415: LD_INT 1
97417: PPUSH
97418: LD_VAR 0 4
97422: PPUSH
97423: CALL_OW 2
97427: ST_TO_ADDR
97428: GO 97459
// result := Replace ( result , result + 1 , un ) ;
97430: LD_ADDR_VAR 0 3
97434: PUSH
97435: LD_VAR 0 3
97439: PPUSH
97440: LD_VAR 0 3
97444: PUSH
97445: LD_INT 1
97447: PLUS
97448: PPUSH
97449: LD_VAR 0 4
97453: PPUSH
97454: CALL_OW 1
97458: ST_TO_ADDR
97459: GO 97385
97461: POP
97462: POP
// end ;
97463: LD_VAR 0 3
97467: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
97468: LD_INT 0
97470: PPUSH
97471: PPUSH
97472: PPUSH
97473: PPUSH
97474: PPUSH
97475: PPUSH
97476: PPUSH
// result := [ ] ;
97477: LD_ADDR_VAR 0 4
97481: PUSH
97482: EMPTY
97483: ST_TO_ADDR
// if x - r < 0 then
97484: LD_VAR 0 1
97488: PUSH
97489: LD_VAR 0 3
97493: MINUS
97494: PUSH
97495: LD_INT 0
97497: LESS
97498: IFFALSE 97510
// min_x := 0 else
97500: LD_ADDR_VAR 0 8
97504: PUSH
97505: LD_INT 0
97507: ST_TO_ADDR
97508: GO 97526
// min_x := x - r ;
97510: LD_ADDR_VAR 0 8
97514: PUSH
97515: LD_VAR 0 1
97519: PUSH
97520: LD_VAR 0 3
97524: MINUS
97525: ST_TO_ADDR
// if y - r < 0 then
97526: LD_VAR 0 2
97530: PUSH
97531: LD_VAR 0 3
97535: MINUS
97536: PUSH
97537: LD_INT 0
97539: LESS
97540: IFFALSE 97552
// min_y := 0 else
97542: LD_ADDR_VAR 0 7
97546: PUSH
97547: LD_INT 0
97549: ST_TO_ADDR
97550: GO 97568
// min_y := y - r ;
97552: LD_ADDR_VAR 0 7
97556: PUSH
97557: LD_VAR 0 2
97561: PUSH
97562: LD_VAR 0 3
97566: MINUS
97567: ST_TO_ADDR
// max_x := x + r ;
97568: LD_ADDR_VAR 0 9
97572: PUSH
97573: LD_VAR 0 1
97577: PUSH
97578: LD_VAR 0 3
97582: PLUS
97583: ST_TO_ADDR
// max_y := y + r ;
97584: LD_ADDR_VAR 0 10
97588: PUSH
97589: LD_VAR 0 2
97593: PUSH
97594: LD_VAR 0 3
97598: PLUS
97599: ST_TO_ADDR
// for _x = min_x to max_x do
97600: LD_ADDR_VAR 0 5
97604: PUSH
97605: DOUBLE
97606: LD_VAR 0 8
97610: DEC
97611: ST_TO_ADDR
97612: LD_VAR 0 9
97616: PUSH
97617: FOR_TO
97618: IFFALSE 97719
// for _y = min_y to max_y do
97620: LD_ADDR_VAR 0 6
97624: PUSH
97625: DOUBLE
97626: LD_VAR 0 7
97630: DEC
97631: ST_TO_ADDR
97632: LD_VAR 0 10
97636: PUSH
97637: FOR_TO
97638: IFFALSE 97715
// begin if not ValidHex ( _x , _y ) then
97640: LD_VAR 0 5
97644: PPUSH
97645: LD_VAR 0 6
97649: PPUSH
97650: CALL_OW 488
97654: NOT
97655: IFFALSE 97659
// continue ;
97657: GO 97637
// if GetResourceTypeXY ( _x , _y ) then
97659: LD_VAR 0 5
97663: PPUSH
97664: LD_VAR 0 6
97668: PPUSH
97669: CALL_OW 283
97673: IFFALSE 97713
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
97675: LD_ADDR_VAR 0 4
97679: PUSH
97680: LD_VAR 0 4
97684: PPUSH
97685: LD_VAR 0 4
97689: PUSH
97690: LD_INT 1
97692: PLUS
97693: PPUSH
97694: LD_VAR 0 5
97698: PUSH
97699: LD_VAR 0 6
97703: PUSH
97704: EMPTY
97705: LIST
97706: LIST
97707: PPUSH
97708: CALL_OW 1
97712: ST_TO_ADDR
// end ;
97713: GO 97637
97715: POP
97716: POP
97717: GO 97617
97719: POP
97720: POP
// end ;
97721: LD_VAR 0 4
97725: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
97726: LD_INT 0
97728: PPUSH
97729: PPUSH
97730: PPUSH
97731: PPUSH
97732: PPUSH
97733: PPUSH
97734: PPUSH
97735: PPUSH
// if not units then
97736: LD_VAR 0 1
97740: NOT
97741: IFFALSE 97745
// exit ;
97743: GO 98277
// result := UnitFilter ( units , [ f_ok ] ) ;
97745: LD_ADDR_VAR 0 3
97749: PUSH
97750: LD_VAR 0 1
97754: PPUSH
97755: LD_INT 50
97757: PUSH
97758: EMPTY
97759: LIST
97760: PPUSH
97761: CALL_OW 72
97765: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
97766: LD_ADDR_VAR 0 8
97770: PUSH
97771: LD_VAR 0 1
97775: PUSH
97776: LD_INT 1
97778: ARRAY
97779: PPUSH
97780: CALL_OW 255
97784: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
97785: LD_ADDR_VAR 0 10
97789: PUSH
97790: LD_INT 29
97792: PUSH
97793: LD_INT 91
97795: PUSH
97796: LD_INT 49
97798: PUSH
97799: EMPTY
97800: LIST
97801: LIST
97802: LIST
97803: ST_TO_ADDR
// if not result then
97804: LD_VAR 0 3
97808: NOT
97809: IFFALSE 97813
// exit ;
97811: GO 98277
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
97813: LD_ADDR_VAR 0 5
97817: PUSH
97818: LD_INT 81
97820: PUSH
97821: LD_VAR 0 8
97825: PUSH
97826: EMPTY
97827: LIST
97828: LIST
97829: PPUSH
97830: CALL_OW 69
97834: ST_TO_ADDR
// for i in result do
97835: LD_ADDR_VAR 0 4
97839: PUSH
97840: LD_VAR 0 3
97844: PUSH
97845: FOR_IN
97846: IFFALSE 98275
// begin tag := GetTag ( i ) + 1 ;
97848: LD_ADDR_VAR 0 9
97852: PUSH
97853: LD_VAR 0 4
97857: PPUSH
97858: CALL_OW 110
97862: PUSH
97863: LD_INT 1
97865: PLUS
97866: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
97867: LD_ADDR_VAR 0 7
97871: PUSH
97872: LD_VAR 0 4
97876: PPUSH
97877: CALL_OW 250
97881: PPUSH
97882: LD_VAR 0 4
97886: PPUSH
97887: CALL_OW 251
97891: PPUSH
97892: LD_INT 4
97894: PPUSH
97895: CALL 97468 0 3
97899: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
97900: LD_VAR 0 4
97904: PPUSH
97905: CALL_OW 247
97909: PUSH
97910: LD_INT 2
97912: EQUAL
97913: IFFALSE 97925
97915: PUSH
97916: LD_VAR 0 7
97920: PUSH
97921: LD_INT 2
97923: GREATER
97924: AND
97925: IFFALSE 97945
97927: PUSH
97928: LD_VAR 0 4
97932: PPUSH
97933: CALL_OW 264
97937: PUSH
97938: LD_VAR 0 10
97942: IN
97943: NOT
97944: AND
97945: IFFALSE 97984
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
97947: LD_VAR 0 4
97951: PPUSH
97952: LD_VAR 0 7
97956: PUSH
97957: LD_INT 1
97959: ARRAY
97960: PUSH
97961: LD_INT 1
97963: ARRAY
97964: PPUSH
97965: LD_VAR 0 7
97969: PUSH
97970: LD_INT 1
97972: ARRAY
97973: PUSH
97974: LD_INT 2
97976: ARRAY
97977: PPUSH
97978: CALL_OW 116
97982: GO 98273
// if path > tag then
97984: LD_VAR 0 2
97988: PUSH
97989: LD_VAR 0 9
97993: GREATER
97994: IFFALSE 98202
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
97996: LD_ADDR_VAR 0 6
98000: PUSH
98001: LD_VAR 0 5
98005: PPUSH
98006: LD_INT 91
98008: PUSH
98009: LD_VAR 0 4
98013: PUSH
98014: LD_INT 8
98016: PUSH
98017: EMPTY
98018: LIST
98019: LIST
98020: LIST
98021: PPUSH
98022: CALL_OW 72
98026: ST_TO_ADDR
// if nearEnemy then
98027: LD_VAR 0 6
98031: IFFALSE 98100
// begin if GetWeapon ( i ) = ru_time_lapser then
98033: LD_VAR 0 4
98037: PPUSH
98038: CALL_OW 264
98042: PUSH
98043: LD_INT 49
98045: EQUAL
98046: IFFALSE 98074
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
98048: LD_VAR 0 4
98052: PPUSH
98053: LD_VAR 0 6
98057: PPUSH
98058: LD_VAR 0 4
98062: PPUSH
98063: CALL_OW 74
98067: PPUSH
98068: CALL_OW 112
98072: GO 98098
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
98074: LD_VAR 0 4
98078: PPUSH
98079: LD_VAR 0 6
98083: PPUSH
98084: LD_VAR 0 4
98088: PPUSH
98089: CALL_OW 74
98093: PPUSH
98094: CALL 99358 0 2
// end else
98098: GO 98200
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
98100: LD_VAR 0 4
98104: PPUSH
98105: LD_VAR 0 2
98109: PUSH
98110: LD_VAR 0 9
98114: ARRAY
98115: PUSH
98116: LD_INT 1
98118: ARRAY
98119: PPUSH
98120: LD_VAR 0 2
98124: PUSH
98125: LD_VAR 0 9
98129: ARRAY
98130: PUSH
98131: LD_INT 2
98133: ARRAY
98134: PPUSH
98135: CALL_OW 297
98139: PUSH
98140: LD_INT 6
98142: GREATER
98143: IFFALSE 98186
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
98145: LD_VAR 0 4
98149: PPUSH
98150: LD_VAR 0 2
98154: PUSH
98155: LD_VAR 0 9
98159: ARRAY
98160: PUSH
98161: LD_INT 1
98163: ARRAY
98164: PPUSH
98165: LD_VAR 0 2
98169: PUSH
98170: LD_VAR 0 9
98174: ARRAY
98175: PUSH
98176: LD_INT 2
98178: ARRAY
98179: PPUSH
98180: CALL_OW 114
98184: GO 98200
// SetTag ( i , tag ) ;
98186: LD_VAR 0 4
98190: PPUSH
98191: LD_VAR 0 9
98195: PPUSH
98196: CALL_OW 109
// end else
98200: GO 98273
// if enemy then
98202: LD_VAR 0 5
98206: IFFALSE 98273
// begin if GetWeapon ( i ) = ru_time_lapser then
98208: LD_VAR 0 4
98212: PPUSH
98213: CALL_OW 264
98217: PUSH
98218: LD_INT 49
98220: EQUAL
98221: IFFALSE 98249
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
98223: LD_VAR 0 4
98227: PPUSH
98228: LD_VAR 0 5
98232: PPUSH
98233: LD_VAR 0 4
98237: PPUSH
98238: CALL_OW 74
98242: PPUSH
98243: CALL_OW 112
98247: GO 98273
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
98249: LD_VAR 0 4
98253: PPUSH
98254: LD_VAR 0 5
98258: PPUSH
98259: LD_VAR 0 4
98263: PPUSH
98264: CALL_OW 74
98268: PPUSH
98269: CALL 99358 0 2
// end ; end ;
98273: GO 97845
98275: POP
98276: POP
// end ;
98277: LD_VAR 0 3
98281: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
98282: LD_INT 0
98284: PPUSH
98285: PPUSH
98286: PPUSH
// if not unit or IsInUnit ( unit ) then
98287: LD_VAR 0 1
98291: NOT
98292: IFTRUE 98305
98294: PUSH
98295: LD_VAR 0 1
98299: PPUSH
98300: CALL_OW 310
98304: OR
98305: IFFALSE 98309
// exit ;
98307: GO 98400
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
98309: LD_ADDR_VAR 0 4
98313: PUSH
98314: LD_VAR 0 1
98318: PPUSH
98319: CALL_OW 250
98323: PPUSH
98324: LD_VAR 0 2
98328: PPUSH
98329: LD_INT 1
98331: PPUSH
98332: CALL_OW 272
98336: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
98337: LD_ADDR_VAR 0 5
98341: PUSH
98342: LD_VAR 0 1
98346: PPUSH
98347: CALL_OW 251
98351: PPUSH
98352: LD_VAR 0 2
98356: PPUSH
98357: LD_INT 1
98359: PPUSH
98360: CALL_OW 273
98364: ST_TO_ADDR
// if ValidHex ( x , y ) then
98365: LD_VAR 0 4
98369: PPUSH
98370: LD_VAR 0 5
98374: PPUSH
98375: CALL_OW 488
98379: IFFALSE 98400
// ComTurnXY ( unit , x , y ) ;
98381: LD_VAR 0 1
98385: PPUSH
98386: LD_VAR 0 4
98390: PPUSH
98391: LD_VAR 0 5
98395: PPUSH
98396: CALL_OW 118
// end ;
98400: LD_VAR 0 3
98404: RET
// export function SeeUnits ( side , units ) ; var i ; begin
98405: LD_INT 0
98407: PPUSH
98408: PPUSH
// result := false ;
98409: LD_ADDR_VAR 0 3
98413: PUSH
98414: LD_INT 0
98416: ST_TO_ADDR
// if not units then
98417: LD_VAR 0 2
98421: NOT
98422: IFFALSE 98426
// exit ;
98424: GO 98471
// for i in units do
98426: LD_ADDR_VAR 0 4
98430: PUSH
98431: LD_VAR 0 2
98435: PUSH
98436: FOR_IN
98437: IFFALSE 98469
// if See ( side , i ) then
98439: LD_VAR 0 1
98443: PPUSH
98444: LD_VAR 0 4
98448: PPUSH
98449: CALL_OW 292
98453: IFFALSE 98467
// begin result := true ;
98455: LD_ADDR_VAR 0 3
98459: PUSH
98460: LD_INT 1
98462: ST_TO_ADDR
// exit ;
98463: POP
98464: POP
98465: GO 98471
// end ;
98467: GO 98436
98469: POP
98470: POP
// end ;
98471: LD_VAR 0 3
98475: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
98476: LD_INT 0
98478: PPUSH
98479: PPUSH
98480: PPUSH
98481: PPUSH
// if not unit or not points then
98482: LD_VAR 0 1
98486: NOT
98487: IFTRUE 98496
98489: PUSH
98490: LD_VAR 0 2
98494: NOT
98495: OR
98496: IFFALSE 98500
// exit ;
98498: GO 98590
// dist := 99999 ;
98500: LD_ADDR_VAR 0 5
98504: PUSH
98505: LD_INT 99999
98507: ST_TO_ADDR
// for i in points do
98508: LD_ADDR_VAR 0 4
98512: PUSH
98513: LD_VAR 0 2
98517: PUSH
98518: FOR_IN
98519: IFFALSE 98588
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
98521: LD_ADDR_VAR 0 6
98525: PUSH
98526: LD_VAR 0 1
98530: PPUSH
98531: LD_VAR 0 4
98535: PUSH
98536: LD_INT 1
98538: ARRAY
98539: PPUSH
98540: LD_VAR 0 4
98544: PUSH
98545: LD_INT 2
98547: ARRAY
98548: PPUSH
98549: CALL_OW 297
98553: ST_TO_ADDR
// if tmpDist < dist then
98554: LD_VAR 0 6
98558: PUSH
98559: LD_VAR 0 5
98563: LESS
98564: IFFALSE 98586
// begin result := i ;
98566: LD_ADDR_VAR 0 3
98570: PUSH
98571: LD_VAR 0 4
98575: ST_TO_ADDR
// dist := tmpDist ;
98576: LD_ADDR_VAR 0 5
98580: PUSH
98581: LD_VAR 0 6
98585: ST_TO_ADDR
// end ; end ;
98586: GO 98518
98588: POP
98589: POP
// end ;
98590: LD_VAR 0 3
98594: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
98595: LD_INT 0
98597: PPUSH
// uc_side := side ;
98598: LD_ADDR_OWVAR 20
98602: PUSH
98603: LD_VAR 0 1
98607: ST_TO_ADDR
// uc_nation := 3 ;
98608: LD_ADDR_OWVAR 21
98612: PUSH
98613: LD_INT 3
98615: ST_TO_ADDR
// vc_chassis := 25 ;
98616: LD_ADDR_OWVAR 37
98620: PUSH
98621: LD_INT 25
98623: ST_TO_ADDR
// vc_engine := engine_siberite ;
98624: LD_ADDR_OWVAR 39
98628: PUSH
98629: LD_INT 3
98631: ST_TO_ADDR
// vc_control := control_computer ;
98632: LD_ADDR_OWVAR 38
98636: PUSH
98637: LD_INT 3
98639: ST_TO_ADDR
// vc_weapon := 59 ;
98640: LD_ADDR_OWVAR 40
98644: PUSH
98645: LD_INT 59
98647: ST_TO_ADDR
// result := CreateVehicle ;
98648: LD_ADDR_VAR 0 5
98652: PUSH
98653: CALL_OW 45
98657: ST_TO_ADDR
// SetDir ( result , d ) ;
98658: LD_VAR 0 5
98662: PPUSH
98663: LD_VAR 0 4
98667: PPUSH
98668: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
98672: LD_VAR 0 5
98676: PPUSH
98677: LD_VAR 0 2
98681: PPUSH
98682: LD_VAR 0 3
98686: PPUSH
98687: LD_INT 0
98689: PPUSH
98690: CALL_OW 48
// end ;
98694: LD_VAR 0 5
98698: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
98699: LD_INT 0
98701: PPUSH
98702: PPUSH
98703: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
98704: LD_ADDR_VAR 0 2
98708: PUSH
98709: LD_INT 0
98711: PUSH
98712: LD_INT 0
98714: PUSH
98715: LD_INT 0
98717: PUSH
98718: LD_INT 0
98720: PUSH
98721: EMPTY
98722: LIST
98723: LIST
98724: LIST
98725: LIST
98726: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
98727: LD_VAR 0 1
98731: NOT
98732: IFTRUE 98765
98734: PUSH
98735: LD_VAR 0 1
98739: PPUSH
98740: CALL_OW 264
98744: PUSH
98745: LD_INT 12
98747: PUSH
98748: LD_INT 51
98750: PUSH
98751: LD_INT 32
98753: PUSH
98754: LD_INT 89
98756: PUSH
98757: EMPTY
98758: LIST
98759: LIST
98760: LIST
98761: LIST
98762: IN
98763: NOT
98764: OR
98765: IFFALSE 98769
// exit ;
98767: GO 98867
// for i := 1 to 3 do
98769: LD_ADDR_VAR 0 3
98773: PUSH
98774: DOUBLE
98775: LD_INT 1
98777: DEC
98778: ST_TO_ADDR
98779: LD_INT 3
98781: PUSH
98782: FOR_TO
98783: IFFALSE 98865
// begin tmp := GetCargo ( cargo , i ) ;
98785: LD_ADDR_VAR 0 4
98789: PUSH
98790: LD_VAR 0 1
98794: PPUSH
98795: LD_VAR 0 3
98799: PPUSH
98800: CALL_OW 289
98804: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
98805: LD_ADDR_VAR 0 2
98809: PUSH
98810: LD_VAR 0 2
98814: PPUSH
98815: LD_VAR 0 3
98819: PPUSH
98820: LD_VAR 0 4
98824: PPUSH
98825: CALL_OW 1
98829: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
98830: LD_ADDR_VAR 0 2
98834: PUSH
98835: LD_VAR 0 2
98839: PPUSH
98840: LD_INT 4
98842: PPUSH
98843: LD_VAR 0 2
98847: PUSH
98848: LD_INT 4
98850: ARRAY
98851: PUSH
98852: LD_VAR 0 4
98856: PLUS
98857: PPUSH
98858: CALL_OW 1
98862: ST_TO_ADDR
// end ;
98863: GO 98782
98865: POP
98866: POP
// end ;
98867: LD_VAR 0 2
98871: RET
// export function Length ( array ) ; begin
98872: LD_INT 0
98874: PPUSH
// result := array + 0 ;
98875: LD_ADDR_VAR 0 2
98879: PUSH
98880: LD_VAR 0 1
98884: PUSH
98885: LD_INT 0
98887: PLUS
98888: ST_TO_ADDR
// end ;
98889: LD_VAR 0 2
98893: RET
// export function PrepareArray ( array ) ; begin
98894: LD_INT 0
98896: PPUSH
// result := array diff 0 ;
98897: LD_ADDR_VAR 0 2
98901: PUSH
98902: LD_VAR 0 1
98906: PUSH
98907: LD_INT 0
98909: DIFF
98910: ST_TO_ADDR
// if not result [ 1 ] then
98911: LD_VAR 0 2
98915: PUSH
98916: LD_INT 1
98918: ARRAY
98919: NOT
98920: IFFALSE 98940
// result := Delete ( result , 1 ) ;
98922: LD_ADDR_VAR 0 2
98926: PUSH
98927: LD_VAR 0 2
98931: PPUSH
98932: LD_INT 1
98934: PPUSH
98935: CALL_OW 3
98939: ST_TO_ADDR
// end ;
98940: LD_VAR 0 2
98944: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
98945: LD_INT 0
98947: PPUSH
98948: PPUSH
98949: PPUSH
98950: PPUSH
// sibRocketRange := 25 ;
98951: LD_ADDR_VAR 0 6
98955: PUSH
98956: LD_INT 25
98958: ST_TO_ADDR
// result := false ;
98959: LD_ADDR_VAR 0 4
98963: PUSH
98964: LD_INT 0
98966: ST_TO_ADDR
// for i := 0 to 5 do
98967: LD_ADDR_VAR 0 5
98971: PUSH
98972: DOUBLE
98973: LD_INT 0
98975: DEC
98976: ST_TO_ADDR
98977: LD_INT 5
98979: PUSH
98980: FOR_TO
98981: IFFALSE 99048
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
98983: LD_VAR 0 1
98987: PPUSH
98988: LD_VAR 0 5
98992: PPUSH
98993: LD_VAR 0 6
98997: PPUSH
98998: CALL_OW 272
99002: PPUSH
99003: LD_VAR 0 2
99007: PPUSH
99008: LD_VAR 0 5
99012: PPUSH
99013: LD_VAR 0 6
99017: PPUSH
99018: CALL_OW 273
99022: PPUSH
99023: LD_VAR 0 3
99027: PPUSH
99028: CALL_OW 309
99032: IFFALSE 99046
// begin result := true ;
99034: LD_ADDR_VAR 0 4
99038: PUSH
99039: LD_INT 1
99041: ST_TO_ADDR
// exit ;
99042: POP
99043: POP
99044: GO 99050
// end ;
99046: GO 98980
99048: POP
99049: POP
// end ;
99050: LD_VAR 0 4
99054: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
99055: LD_INT 0
99057: PPUSH
99058: PPUSH
99059: PPUSH
// if btype = b_depot then
99060: LD_VAR 0 2
99064: PUSH
99065: LD_INT 0
99067: EQUAL
99068: IFFALSE 99080
// begin result := true ;
99070: LD_ADDR_VAR 0 3
99074: PUSH
99075: LD_INT 1
99077: ST_TO_ADDR
// exit ;
99078: GO 99200
// end ; pom := GetBase ( depot ) ;
99080: LD_ADDR_VAR 0 4
99084: PUSH
99085: LD_VAR 0 1
99089: PPUSH
99090: CALL_OW 274
99094: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
99095: LD_ADDR_VAR 0 5
99099: PUSH
99100: LD_VAR 0 2
99104: PPUSH
99105: LD_VAR 0 1
99109: PPUSH
99110: CALL_OW 248
99114: PPUSH
99115: CALL_OW 450
99119: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
99120: LD_ADDR_VAR 0 3
99124: PUSH
99125: LD_VAR 0 4
99129: PPUSH
99130: LD_INT 1
99132: PPUSH
99133: CALL_OW 275
99137: PUSH
99138: LD_VAR 0 5
99142: PUSH
99143: LD_INT 1
99145: ARRAY
99146: GREATEREQUAL
99147: IFFALSE 99173
99149: PUSH
99150: LD_VAR 0 4
99154: PPUSH
99155: LD_INT 2
99157: PPUSH
99158: CALL_OW 275
99162: PUSH
99163: LD_VAR 0 5
99167: PUSH
99168: LD_INT 2
99170: ARRAY
99171: GREATEREQUAL
99172: AND
99173: IFFALSE 99199
99175: PUSH
99176: LD_VAR 0 4
99180: PPUSH
99181: LD_INT 3
99183: PPUSH
99184: CALL_OW 275
99188: PUSH
99189: LD_VAR 0 5
99193: PUSH
99194: LD_INT 3
99196: ARRAY
99197: GREATEREQUAL
99198: AND
99199: ST_TO_ADDR
// end ;
99200: LD_VAR 0 3
99204: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
99205: LD_INT 0
99207: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
99208: LD_VAR 0 1
99212: PPUSH
99213: LD_VAR 0 2
99217: PPUSH
99218: LD_INT 0
99220: PPUSH
99221: LD_INT 0
99223: PPUSH
99224: LD_INT 1
99226: PPUSH
99227: LD_INT 0
99229: PPUSH
99230: CALL_OW 587
// end ;
99234: LD_VAR 0 3
99238: RET
// export function CenterOnNow ( unit ) ; begin
99239: LD_INT 0
99241: PPUSH
// result := IsInUnit ( unit ) ;
99242: LD_ADDR_VAR 0 2
99246: PUSH
99247: LD_VAR 0 1
99251: PPUSH
99252: CALL_OW 310
99256: ST_TO_ADDR
// if not result then
99257: LD_VAR 0 2
99261: NOT
99262: IFFALSE 99274
// result := unit ;
99264: LD_ADDR_VAR 0 2
99268: PUSH
99269: LD_VAR 0 1
99273: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
99274: LD_VAR 0 1
99278: PPUSH
99279: CALL_OW 87
// end ;
99283: LD_VAR 0 2
99287: RET
// export function ComMoveHex ( unit , hex ) ; begin
99288: LD_INT 0
99290: PPUSH
// if not hex then
99291: LD_VAR 0 2
99295: NOT
99296: IFFALSE 99300
// exit ;
99298: GO 99353
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
99300: LD_VAR 0 2
99304: PUSH
99305: LD_INT 1
99307: ARRAY
99308: PPUSH
99309: LD_VAR 0 2
99313: PUSH
99314: LD_INT 2
99316: ARRAY
99317: PPUSH
99318: CALL_OW 428
99322: IFFALSE 99326
// exit ;
99324: GO 99353
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
99326: LD_VAR 0 1
99330: PPUSH
99331: LD_VAR 0 2
99335: PUSH
99336: LD_INT 1
99338: ARRAY
99339: PPUSH
99340: LD_VAR 0 2
99344: PUSH
99345: LD_INT 2
99347: ARRAY
99348: PPUSH
99349: CALL_OW 111
// end ;
99353: LD_VAR 0 3
99357: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
99358: LD_INT 0
99360: PPUSH
99361: PPUSH
99362: PPUSH
// if not unit or not enemy then
99363: LD_VAR 0 1
99367: NOT
99368: IFTRUE 99377
99370: PUSH
99371: LD_VAR 0 2
99375: NOT
99376: OR
99377: IFFALSE 99381
// exit ;
99379: GO 99507
// x := GetX ( enemy ) ;
99381: LD_ADDR_VAR 0 4
99385: PUSH
99386: LD_VAR 0 2
99390: PPUSH
99391: CALL_OW 250
99395: ST_TO_ADDR
// y := GetY ( enemy ) ;
99396: LD_ADDR_VAR 0 5
99400: PUSH
99401: LD_VAR 0 2
99405: PPUSH
99406: CALL_OW 251
99410: ST_TO_ADDR
// if ValidHex ( x , y ) then
99411: LD_VAR 0 4
99415: PPUSH
99416: LD_VAR 0 5
99420: PPUSH
99421: CALL_OW 488
99425: IFFALSE 99507
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
99427: LD_VAR 0 2
99431: PPUSH
99432: CALL_OW 247
99436: PUSH
99437: LD_INT 3
99439: PUSH
99440: LD_INT 2
99442: PUSH
99443: EMPTY
99444: LIST
99445: LIST
99446: IN
99447: IFTRUE 99470
99449: PUSH
99450: LD_VAR 0 1
99454: PPUSH
99455: CALL_OW 255
99459: PPUSH
99460: LD_VAR 0 2
99464: PPUSH
99465: CALL_OW 292
99469: OR
99470: IFFALSE 99488
// ComAttackUnit ( unit , enemy ) else
99472: LD_VAR 0 1
99476: PPUSH
99477: LD_VAR 0 2
99481: PPUSH
99482: CALL_OW 115
99486: GO 99507
// ComAgressiveMove ( unit , x , y ) ;
99488: LD_VAR 0 1
99492: PPUSH
99493: LD_VAR 0 4
99497: PPUSH
99498: LD_VAR 0 5
99502: PPUSH
99503: CALL_OW 114
// end ;
99507: LD_VAR 0 3
99511: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
99512: LD_INT 0
99514: PPUSH
99515: PPUSH
99516: PPUSH
// list := AreaToList ( area , 0 ) ;
99517: LD_ADDR_VAR 0 5
99521: PUSH
99522: LD_VAR 0 1
99526: PPUSH
99527: LD_INT 0
99529: PPUSH
99530: CALL_OW 517
99534: ST_TO_ADDR
// if not list then
99535: LD_VAR 0 5
99539: NOT
99540: IFFALSE 99544
// exit ;
99542: GO 99674
// if all then
99544: LD_VAR 0 2
99548: IFFALSE 99636
// begin for i := 1 to list [ 1 ] do
99550: LD_ADDR_VAR 0 4
99554: PUSH
99555: DOUBLE
99556: LD_INT 1
99558: DEC
99559: ST_TO_ADDR
99560: LD_VAR 0 5
99564: PUSH
99565: LD_INT 1
99567: ARRAY
99568: PUSH
99569: FOR_TO
99570: IFFALSE 99632
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
99572: LD_ADDR_VAR 0 3
99576: PUSH
99577: LD_VAR 0 3
99581: PPUSH
99582: LD_VAR 0 3
99586: PUSH
99587: LD_INT 1
99589: PLUS
99590: PPUSH
99591: LD_VAR 0 5
99595: PUSH
99596: LD_INT 1
99598: ARRAY
99599: PUSH
99600: LD_VAR 0 4
99604: ARRAY
99605: PUSH
99606: LD_VAR 0 5
99610: PUSH
99611: LD_INT 2
99613: ARRAY
99614: PUSH
99615: LD_VAR 0 4
99619: ARRAY
99620: PUSH
99621: EMPTY
99622: LIST
99623: LIST
99624: PPUSH
99625: CALL_OW 1
99629: ST_TO_ADDR
99630: GO 99569
99632: POP
99633: POP
// exit ;
99634: GO 99674
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
99636: LD_ADDR_VAR 0 3
99640: PUSH
99641: LD_VAR 0 5
99645: PUSH
99646: LD_INT 1
99648: ARRAY
99649: PUSH
99650: LD_INT 1
99652: ARRAY
99653: PUSH
99654: LD_VAR 0 5
99658: PUSH
99659: LD_INT 2
99661: ARRAY
99662: PUSH
99663: LD_INT 1
99665: ARRAY
99666: PUSH
99667: EMPTY
99668: LIST
99669: LIST
99670: PUSH
99671: EMPTY
99672: LIST
99673: ST_TO_ADDR
// end ;
99674: LD_VAR 0 3
99678: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
99679: LD_INT 0
99681: PPUSH
99682: PPUSH
// list := AreaToList ( area , 0 ) ;
99683: LD_ADDR_VAR 0 4
99687: PUSH
99688: LD_VAR 0 1
99692: PPUSH
99693: LD_INT 0
99695: PPUSH
99696: CALL_OW 517
99700: ST_TO_ADDR
// if not list then
99701: LD_VAR 0 4
99705: NOT
99706: IFFALSE 99710
// exit ;
99708: GO 99751
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
99710: LD_ADDR_VAR 0 3
99714: PUSH
99715: LD_VAR 0 4
99719: PUSH
99720: LD_INT 1
99722: ARRAY
99723: PUSH
99724: LD_INT 1
99726: ARRAY
99727: PUSH
99728: LD_VAR 0 4
99732: PUSH
99733: LD_INT 2
99735: ARRAY
99736: PUSH
99737: LD_INT 1
99739: ARRAY
99740: PUSH
99741: LD_VAR 0 2
99745: PUSH
99746: EMPTY
99747: LIST
99748: LIST
99749: LIST
99750: ST_TO_ADDR
// end ;
99751: LD_VAR 0 3
99755: RET
// export function First ( array ) ; begin
99756: LD_INT 0
99758: PPUSH
// if not array then
99759: LD_VAR 0 1
99763: NOT
99764: IFFALSE 99768
// exit ;
99766: GO 99782
// result := array [ 1 ] ;
99768: LD_ADDR_VAR 0 2
99772: PUSH
99773: LD_VAR 0 1
99777: PUSH
99778: LD_INT 1
99780: ARRAY
99781: ST_TO_ADDR
// end ;
99782: LD_VAR 0 2
99786: RET
// export function Last ( array ) ; begin
99787: LD_INT 0
99789: PPUSH
// if not array then
99790: LD_VAR 0 1
99794: NOT
99795: IFFALSE 99799
// exit ;
99797: GO 99815
// result := array [ array ] ;
99799: LD_ADDR_VAR 0 2
99803: PUSH
99804: LD_VAR 0 1
99808: PUSH
99809: LD_VAR 0 1
99813: ARRAY
99814: ST_TO_ADDR
// end ;
99815: LD_VAR 0 2
99819: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
99820: LD_INT 0
99822: PPUSH
99823: PPUSH
// result := [ ] ;
99824: LD_ADDR_VAR 0 5
99828: PUSH
99829: EMPTY
99830: ST_TO_ADDR
// if not array then
99831: LD_VAR 0 1
99835: NOT
99836: IFFALSE 99840
// exit ;
99838: GO 99952
// for i := 1 to array do
99840: LD_ADDR_VAR 0 6
99844: PUSH
99845: DOUBLE
99846: LD_INT 1
99848: DEC
99849: ST_TO_ADDR
99850: LD_VAR 0 1
99854: PUSH
99855: FOR_TO
99856: IFFALSE 99950
// if array [ i ] [ index ] = value then
99858: LD_VAR 0 1
99862: PUSH
99863: LD_VAR 0 6
99867: ARRAY
99868: PUSH
99869: LD_VAR 0 2
99873: ARRAY
99874: PUSH
99875: LD_VAR 0 3
99879: EQUAL
99880: IFFALSE 99948
// begin if indexColumn then
99882: LD_VAR 0 4
99886: IFFALSE 99922
// result := Join ( result , array [ i ] [ indexColumn ] ) else
99888: LD_ADDR_VAR 0 5
99892: PUSH
99893: LD_VAR 0 5
99897: PPUSH
99898: LD_VAR 0 1
99902: PUSH
99903: LD_VAR 0 6
99907: ARRAY
99908: PUSH
99909: LD_VAR 0 4
99913: ARRAY
99914: PPUSH
99915: CALL 94960 0 2
99919: ST_TO_ADDR
99920: GO 99948
// result := Join ( result , array [ i ] ) ;
99922: LD_ADDR_VAR 0 5
99926: PUSH
99927: LD_VAR 0 5
99931: PPUSH
99932: LD_VAR 0 1
99936: PUSH
99937: LD_VAR 0 6
99941: ARRAY
99942: PPUSH
99943: CALL 94960 0 2
99947: ST_TO_ADDR
// end ;
99948: GO 99855
99950: POP
99951: POP
// end ;
99952: LD_VAR 0 5
99956: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
99957: LD_INT 0
99959: PPUSH
// if not vehicles or not parkingPoint then
99960: LD_VAR 0 1
99964: NOT
99965: IFTRUE 99974
99967: PUSH
99968: LD_VAR 0 2
99972: NOT
99973: OR
99974: IFFALSE 99978
// exit ;
99976: GO 100076
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
99978: LD_ADDR_VAR 0 1
99982: PUSH
99983: LD_VAR 0 1
99987: PPUSH
99988: LD_INT 50
99990: PUSH
99991: EMPTY
99992: LIST
99993: PUSH
99994: LD_INT 3
99996: PUSH
99997: LD_INT 92
99999: PUSH
100000: LD_VAR 0 2
100004: PUSH
100005: LD_INT 1
100007: ARRAY
100008: PUSH
100009: LD_VAR 0 2
100013: PUSH
100014: LD_INT 2
100016: ARRAY
100017: PUSH
100018: LD_INT 8
100020: PUSH
100021: EMPTY
100022: LIST
100023: LIST
100024: LIST
100025: LIST
100026: PUSH
100027: EMPTY
100028: LIST
100029: LIST
100030: PUSH
100031: EMPTY
100032: LIST
100033: LIST
100034: PPUSH
100035: CALL_OW 72
100039: ST_TO_ADDR
// if not vehicles then
100040: LD_VAR 0 1
100044: NOT
100045: IFFALSE 100049
// exit ;
100047: GO 100076
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
100049: LD_VAR 0 1
100053: PPUSH
100054: LD_VAR 0 2
100058: PUSH
100059: LD_INT 1
100061: ARRAY
100062: PPUSH
100063: LD_VAR 0 2
100067: PUSH
100068: LD_INT 2
100070: ARRAY
100071: PPUSH
100072: CALL_OW 111
// end ;
100076: LD_VAR 0 3
100080: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
100081: LD_INT 0
100083: PPUSH
100084: PPUSH
100085: PPUSH
// if not side or not area then
100086: LD_VAR 0 1
100090: NOT
100091: IFTRUE 100100
100093: PUSH
100094: LD_VAR 0 2
100098: NOT
100099: OR
100100: IFFALSE 100104
// exit ;
100102: GO 100223
// tmp := AreaToList ( area , 0 ) ;
100104: LD_ADDR_VAR 0 5
100108: PUSH
100109: LD_VAR 0 2
100113: PPUSH
100114: LD_INT 0
100116: PPUSH
100117: CALL_OW 517
100121: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
100122: LD_ADDR_VAR 0 4
100126: PUSH
100127: DOUBLE
100128: LD_INT 1
100130: DEC
100131: ST_TO_ADDR
100132: LD_VAR 0 5
100136: PUSH
100137: LD_INT 1
100139: ARRAY
100140: PUSH
100141: FOR_TO
100142: IFFALSE 100221
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
100144: LD_VAR 0 5
100148: PUSH
100149: LD_INT 1
100151: ARRAY
100152: PUSH
100153: LD_VAR 0 4
100157: ARRAY
100158: PPUSH
100159: LD_VAR 0 5
100163: PUSH
100164: LD_INT 2
100166: ARRAY
100167: PUSH
100168: LD_VAR 0 4
100172: ARRAY
100173: PPUSH
100174: CALL_OW 351
100178: IFFALSE 100219
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
100180: LD_VAR 0 5
100184: PUSH
100185: LD_INT 1
100187: ARRAY
100188: PUSH
100189: LD_VAR 0 4
100193: ARRAY
100194: PPUSH
100195: LD_VAR 0 5
100199: PUSH
100200: LD_INT 2
100202: ARRAY
100203: PUSH
100204: LD_VAR 0 4
100208: ARRAY
100209: PPUSH
100210: LD_VAR 0 1
100214: PPUSH
100215: CALL_OW 244
// end ;
100219: GO 100141
100221: POP
100222: POP
// end ;
100223: LD_VAR 0 3
100227: RET
// export function UniqueArray ( array ) ; var i ; begin
100228: LD_INT 0
100230: PPUSH
100231: PPUSH
// result := [ ] ;
100232: LD_ADDR_VAR 0 2
100236: PUSH
100237: EMPTY
100238: ST_TO_ADDR
// if not array then
100239: LD_VAR 0 1
100243: NOT
100244: IFFALSE 100248
// exit ;
100246: GO 100309
// for i := 1 to array do
100248: LD_ADDR_VAR 0 3
100252: PUSH
100253: DOUBLE
100254: LD_INT 1
100256: DEC
100257: ST_TO_ADDR
100258: LD_VAR 0 1
100262: PUSH
100263: FOR_TO
100264: IFFALSE 100307
// if not array [ i ] in result then
100266: LD_VAR 0 1
100270: PUSH
100271: LD_VAR 0 3
100275: ARRAY
100276: PUSH
100277: LD_VAR 0 2
100281: IN
100282: NOT
100283: IFFALSE 100305
// result := Join ( result , i ) ;
100285: LD_ADDR_VAR 0 2
100289: PUSH
100290: LD_VAR 0 2
100294: PPUSH
100295: LD_VAR 0 3
100299: PPUSH
100300: CALL 94960 0 2
100304: ST_TO_ADDR
100305: GO 100263
100307: POP
100308: POP
// end ; end_of_file
100309: LD_VAR 0 2
100313: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
100314: LD_VAR 0 1
100318: PUSH
100319: LD_INT 200
100321: DOUBLE
100322: GREATEREQUAL
100323: IFFALSE 100331
100325: LD_INT 299
100327: DOUBLE
100328: LESSEQUAL
100329: IFTRUE 100333
100331: GO 100365
100333: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
100334: LD_VAR 0 1
100338: PPUSH
100339: LD_VAR 0 2
100343: PPUSH
100344: LD_VAR 0 3
100348: PPUSH
100349: LD_VAR 0 4
100353: PPUSH
100354: LD_VAR 0 5
100358: PPUSH
100359: CALL 51036 0 5
100363: GO 100442
100365: LD_INT 300
100367: DOUBLE
100368: GREATEREQUAL
100369: IFFALSE 100377
100371: LD_INT 399
100373: DOUBLE
100374: LESSEQUAL
100375: IFTRUE 100379
100377: GO 100441
100379: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
100380: LD_VAR 0 1
100384: PPUSH
100385: LD_VAR 0 2
100389: PPUSH
100390: LD_VAR 0 3
100394: PPUSH
100395: LD_VAR 0 4
100399: PPUSH
100400: LD_VAR 0 5
100404: PPUSH
100405: LD_VAR 0 6
100409: PPUSH
100410: LD_VAR 0 7
100414: PPUSH
100415: LD_VAR 0 8
100419: PPUSH
100420: LD_VAR 0 9
100424: PPUSH
100425: LD_VAR 0 10
100429: PPUSH
100430: LD_VAR 0 11
100434: PPUSH
100435: CALL 46839 0 11
100439: GO 100442
100441: POP
// end ;
100442: PPOPN 11
100444: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
100445: LD_VAR 0 1
100449: PPUSH
100450: LD_VAR 0 2
100454: PPUSH
100455: LD_VAR 0 3
100459: PPUSH
100460: LD_VAR 0 4
100464: PPUSH
100465: LD_VAR 0 5
100469: PPUSH
100470: CALL 50336 0 5
// end ; end_of_file
100474: PPOPN 5
100476: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
100477: LD_VAR 0 1
100481: PPUSH
100482: LD_VAR 0 2
100486: PPUSH
100487: LD_VAR 0 3
100491: PPUSH
100492: LD_VAR 0 4
100496: PPUSH
100497: LD_VAR 0 5
100501: PPUSH
100502: LD_VAR 0 6
100506: PPUSH
100507: CALL 34379 0 6
// end ;
100511: PPOPN 6
100513: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
100514: LD_INT 0
100516: PPUSH
// begin if not units then
100517: LD_VAR 0 1
100521: NOT
100522: IFFALSE 100526
// exit ;
100524: GO 100560
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
100526: LD_VAR 0 1
100530: PPUSH
100531: LD_VAR 0 2
100535: PPUSH
100536: LD_VAR 0 3
100540: PPUSH
100541: LD_VAR 0 4
100545: PPUSH
100546: LD_VAR 0 5
100550: PPUSH
100551: LD_VAR 0 6
100555: PPUSH
100556: CALL 56733 0 6
// end ;
100560: PPOPN 7
100562: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
100563: CALL 34259 0 0
// end ;
100567: PPOPN 1
100569: END
