// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export Truman ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 29
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 21
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 30
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 39
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 40
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 41
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 42
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 43
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 51
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 48
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 47
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 49
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 50
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 62
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 52
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 66
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 67
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 64
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 54
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 53
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 57
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 60
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 61
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 63
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 58
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 59
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 65
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 55
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 56
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 68
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// Video ( true ) ;
 314: LD_INT 1
 316: PPUSH
 317: CALL 87490 0 1
// CreateNature ;
 321: CALL 27123 0 0
// PrepareDifficulty ;
 325: CALL 11747 0 0
// PrepareJMMTeam ;
 329: CALL 1363 0 0
// PrepareCathyTeam ;
 333: CALL 2599 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 337: LD_INT 24
 339: PPUSH
 340: LD_INT 1
 342: PUSH
 343: LD_OWVAR 67
 347: PLUS
 348: PPUSH
 349: CALL 21607 0 2
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 375
// PlaceMines ( MineField2 , Difficulty ) ;
 363: LD_INT 25
 365: PPUSH
 366: LD_OWVAR 67
 370: PPUSH
 371: CALL 21607 0 2
// if Difficulty > 2 then
 375: LD_OWVAR 67
 379: PUSH
 380: LD_INT 2
 382: GREATER
 383: IFFALSE 397
// PlaceMines ( MineField3 , Difficulty ) ;
 385: LD_INT 26
 387: PPUSH
 388: LD_OWVAR 67
 392: PPUSH
 393: CALL 21607 0 2
// PrepareArabianCommander ;
 397: CALL 4218 0 0
// PrepareArabian ;
 401: CALL 4270 0 0
// BuildArabianBase ;
 405: CALL 14562 0 0
// TameApemans ;
 409: CALL 20412 0 0
// end ;
 413: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 414: LD_EXP 68
 418: PUSH
 419: LD_INT 1
 421: EQUAL
 422: IFFALSE 728
 424: GO 426
 426: DISABLE
 427: LD_INT 0
 429: PPUSH
// begin enable ;
 430: ENABLE
// fogoff ( true ) ;
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 438: LD_ADDR_VAR 0 1
 442: PUSH
 443: LD_INT 22
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 21
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PPUSH
 467: CALL_OW 69
 471: PUSH
 472: FOR_IN
 473: IFFALSE 489
// SetLives ( i , 1000 ) ;
 475: LD_VAR 0 1
 479: PPUSH
 480: LD_INT 1000
 482: PPUSH
 483: CALL_OW 234
 487: GO 472
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 570: LD_ADDR_VAR 0 1
 574: PUSH
 575: LD_INT 22
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 2
 587: PUSH
 588: LD_INT 30
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 30
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PPUSH
 617: CALL_OW 69
 621: PUSH
 622: FOR_IN
 623: IFFALSE 647
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 274
 634: PPUSH
 635: LD_INT 2
 637: PPUSH
 638: LD_INT 9999
 640: PPUSH
 641: CALL_OW 277
 645: GO 622
 647: POP
 648: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 30
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PPUSH
 696: CALL_OW 69
 700: PUSH
 701: FOR_IN
 702: IFFALSE 726
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 704: LD_VAR 0 1
 708: PPUSH
 709: CALL_OW 274
 713: PPUSH
 714: LD_INT 3
 716: PPUSH
 717: LD_INT 9999
 719: PPUSH
 720: CALL_OW 277
 724: GO 701
 726: POP
 727: POP
// end ;
 728: PPOPN 1
 730: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 731: LD_INT 25
 733: PUSH
 734: LD_INT 5
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: IFFALSE 758
 747: GO 749
 749: DISABLE
// snipersTrained := true ;
 750: LD_ADDR_EXP 63
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
 758: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and spawnRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 759: LD_INT 1
 761: PPUSH
 762: LD_INT 2
 764: PPUSH
 765: CALL_OW 81
 769: PUSH
 770: LD_INT 1
 772: EQUAL
 773: PUSH
 774: LD_EXP 59
 778: AND
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PPUSH
 790: CALL_OW 69
 794: PUSH
 795: LD_INT 0
 797: EQUAL
 798: AND
 799: IFFALSE 811
 801: GO 803
 803: DISABLE
// SetAchievement ( ACH_POWER ) ;
 804: LD_STRING ACH_POWER
 806: PPUSH
 807: CALL_OW 543
 811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 812: LD_INT 22
 814: PUSH
 815: LD_INT 1
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PPUSH
 836: CALL_OW 69
 840: PUSH
 841: LD_INT 22
 843: PUSH
 844: LD_INT 1
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 30
 853: PUSH
 854: LD_INT 32
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: AND
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 33
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PPUSH
 895: CALL_OW 69
 899: AND
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 30
 913: PUSH
 914: LD_INT 5
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PPUSH
 925: CALL_OW 69
 929: AND
 930: PUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 30
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: AND
 960: PUSH
 961: LD_INT 22
 963: PUSH
 964: LD_INT 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 36
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 69
 989: AND
 990: PUSH
 991: LD_INT 22
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 31
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PPUSH
1015: CALL_OW 69
1019: AND
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 22
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 69
1049: AND
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 20
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: AND
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 30
1093: PUSH
1094: LD_INT 19
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PPUSH
1105: CALL_OW 69
1109: AND
1110: PUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 30
1123: PUSH
1124: LD_INT 16
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 69
1139: AND
1140: PUSH
1141: LD_INT 22
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 30
1153: PUSH
1154: LD_INT 17
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PPUSH
1165: CALL_OW 69
1169: AND
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 30
1183: PUSH
1184: LD_INT 21
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: AND
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 30
1213: PUSH
1214: LD_INT 29
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: AND
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PPUSH
1255: CALL_OW 69
1259: AND
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 30
1273: PUSH
1274: LD_INT 27
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: AND
1290: PUSH
1291: LD_INT 22
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 26
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: AND
1320: PUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 30
1333: PUSH
1334: LD_INT 28
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL_OW 69
1349: AND
1350: IFFALSE 1362
1352: GO 1354
1354: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1355: LD_STRING ACH_ARCH
1357: PPUSH
1358: CALL_OW 543
1362: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// count = 0 ;
1387: LD_ADDR_VAR 0 6
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_STRING JMM
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_STRING 10_
1408: PPUSH
1409: CALL 50117 0 3
1413: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1414: LD_ADDR_EXP 21
1418: PUSH
1419: LD_EXP 21
1423: PUSH
1424: LD_EXP 1
1428: ADD
1429: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1430: LD_ADDR_EXP 10
1434: PUSH
1435: LD_STRING Gary
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_STRING 10_
1443: PPUSH
1444: CALL 50117 0 3
1448: ST_TO_ADDR
// if Gary then
1449: LD_EXP 10
1453: IFFALSE 1471
// JMMSquad = JMMSquad ^ Gary ;
1455: LD_ADDR_EXP 21
1459: PUSH
1460: LD_EXP 21
1464: PUSH
1465: LD_EXP 10
1469: ADD
1470: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1471: LD_ADDR_EXP 5
1475: PUSH
1476: LD_STRING Cyrus
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_STRING 10_
1484: PPUSH
1485: CALL 50117 0 3
1489: ST_TO_ADDR
// if Cyrus then
1490: LD_EXP 5
1494: IFFALSE 1512
// JMMSquad = JMMSquad ^ Cyrus ;
1496: LD_ADDR_EXP 21
1500: PUSH
1501: LD_EXP 21
1505: PUSH
1506: LD_EXP 5
1510: ADD
1511: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_STRING Bobby
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 10_
1525: PPUSH
1526: CALL 50117 0 3
1530: ST_TO_ADDR
// if Bobby then
1531: LD_EXP 4
1535: IFFALSE 1553
// JMMSquad = JMMSquad ^ Bobby ;
1537: LD_ADDR_EXP 21
1541: PUSH
1542: LD_EXP 21
1546: PUSH
1547: LD_EXP 4
1551: ADD
1552: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1553: LD_ADDR_EXP 6
1557: PUSH
1558: LD_STRING Lisa
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_STRING 10_
1566: PPUSH
1567: CALL 50117 0 3
1571: ST_TO_ADDR
// if Lisa then
1572: LD_EXP 6
1576: IFFALSE 1594
// JMMSquad = JMMSquad ^ Lisa ;
1578: LD_ADDR_EXP 21
1582: PUSH
1583: LD_EXP 21
1587: PUSH
1588: LD_EXP 6
1592: ADD
1593: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1594: LD_ADDR_EXP 2
1598: PUSH
1599: LD_STRING Brown
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_STRING 10_
1607: PPUSH
1608: CALL 50117 0 3
1612: ST_TO_ADDR
// if Brown then
1613: LD_EXP 2
1617: IFFALSE 1635
// JMMSquad = JMMSquad ^ Brown ;
1619: LD_ADDR_EXP 21
1623: PUSH
1624: LD_EXP 21
1628: PUSH
1629: LD_EXP 2
1633: ADD
1634: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1635: LD_ADDR_EXP 3
1639: PUSH
1640: LD_STRING Donaldson
1642: PPUSH
1643: LD_INT 1
1645: PPUSH
1646: LD_STRING 10_
1648: PPUSH
1649: CALL 50117 0 3
1653: ST_TO_ADDR
// if Donaldson then
1654: LD_EXP 3
1658: IFFALSE 1676
// JMMSquad = JMMSquad ^ Donaldson ;
1660: LD_ADDR_EXP 21
1664: PUSH
1665: LD_EXP 21
1669: PUSH
1670: LD_EXP 3
1674: ADD
1675: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1676: LD_ADDR_EXP 7
1680: PUSH
1681: LD_STRING Frank
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_STRING 10_
1689: PPUSH
1690: CALL 50117 0 3
1694: ST_TO_ADDR
// if Frank then
1695: LD_EXP 7
1699: IFFALSE 1717
// JMMSquad = JMMSquad ^ Frank ;
1701: LD_ADDR_EXP 21
1705: PUSH
1706: LD_EXP 21
1710: PUSH
1711: LD_EXP 7
1715: ADD
1716: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1717: LD_ADDR_EXP 9
1721: PUSH
1722: LD_STRING Houten
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_STRING 10_
1730: PPUSH
1731: CALL 50117 0 3
1735: ST_TO_ADDR
// if Houten then
1736: LD_EXP 9
1740: IFFALSE 1758
// JMMSquad = JMMSquad ^ Houten ;
1742: LD_ADDR_EXP 21
1746: PUSH
1747: LD_EXP 21
1751: PUSH
1752: LD_EXP 9
1756: ADD
1757: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1758: LD_ADDR_EXP 22
1762: PUSH
1763: LD_STRING OthersIn10
1765: PPUSH
1766: CALL_OW 31
1770: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1771: LD_ADDR_EXP 25
1775: PUSH
1776: LD_STRING Powell
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: LD_STRING 
1784: PPUSH
1785: CALL 50117 0 3
1789: ST_TO_ADDR
// for i in JMMSquad do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_EXP 21
1799: PUSH
1800: FOR_IN
1801: IFFALSE 2081
// begin if count < 3 then
1803: LD_VAR 0 6
1807: PUSH
1808: LD_INT 3
1810: LESS
1811: IFFALSE 1928
// begin vc_engine = 1 ;
1813: LD_ADDR_OWVAR 39
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// vc_control = 1 ;
1821: LD_ADDR_OWVAR 38
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_weapon = 12 ;
1829: LD_ADDR_OWVAR 40
1833: PUSH
1834: LD_INT 12
1836: ST_TO_ADDR
// vc_chassis = 3 ;
1837: LD_ADDR_OWVAR 37
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// veh = CreateVehicle ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: CALL_OW 45
1854: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1855: LD_VAR 0 4
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1867: LD_VAR 0 4
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
// if count mod 2 = 0 then
1882: LD_VAR 0 6
1886: PUSH
1887: LD_INT 2
1889: MOD
1890: PUSH
1891: LD_INT 0
1893: EQUAL
1894: IFFALSE 1913
// AddCargo ( veh , 1 , 100 ) else
1896: LD_VAR 0 4
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 291
1911: GO 1928
// AddCargo ( veh , 3 , 100 ) end ;
1913: LD_VAR 0 4
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 100
1923: PPUSH
1924: CALL_OW 291
// if count >= 3 then
1928: LD_VAR 0 6
1932: PUSH
1933: LD_INT 3
1935: GREATEREQUAL
1936: IFFALSE 2051
// begin vc_engine = 1 ;
1938: LD_ADDR_OWVAR 39
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// vc_control = 1 ;
1946: LD_ADDR_OWVAR 38
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1954: LD_ADDR_OWVAR 40
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 4
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 12
1983: ARRAY
1984: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: MOD
2008: PUSH
2009: LD_INT 1
2011: PLUS
2012: ARRAY
2013: ST_TO_ADDR
// veh = CreateVehicle ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
// end ; count = count + 1 ;
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_VAR 0 4
2074: PPUSH
2075: CALL_OW 52
// end ;
2079: GO 1800
2081: POP
2082: POP
// for i := 1 to others10 do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 1
2091: DEC
2092: ST_TO_ADDR
2093: LD_EXP 22
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2330
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2101: LD_VAR 0 2
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 3
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_OWVAR 67
2128: ARRAY
2129: LESS
2130: IFFALSE 2283
// begin vc_engine = 1 ;
2132: LD_ADDR_OWVAR 39
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// vc_control = 1 ;
2140: LD_ADDR_OWVAR 38
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2148: LD_ADDR_OWVAR 40
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 4
2158: PUSH
2159: LD_INT 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 12
2177: ARRAY
2178: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2179: LD_ADDR_OWVAR 37
2183: PUSH
2184: LD_INT 2
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_VAR 0 2
2198: PUSH
2199: LD_INT 2
2201: MOD
2202: PUSH
2203: LD_INT 1
2205: PLUS
2206: ARRAY
2207: ST_TO_ADDR
// veh = CreateVehicle ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2218: LD_VAR 0 4
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 4
2234: PPUSH
2235: LD_INT 2
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2245: LD_ADDR_EXP 29
2249: PUSH
2250: LD_EXP 29
2254: PUSH
2255: LD_VAR 0 4
2259: ADD
2260: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2261: LD_EXP 22
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PPUSH
2272: LD_VAR 0 4
2276: PPUSH
2277: CALL_OW 52
// end else
2281: GO 2328
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2283: LD_EXP 22
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 106
2296: PPUSH
2297: LD_INT 33
2299: PPUSH
2300: LD_INT 6
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2310: LD_EXP 22
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_INT 4
2323: PPUSH
2324: CALL_OW 235
// end ; end ;
2328: GO 2098
2330: POP
2331: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2332: LD_INT 22
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 21
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: CALL_OW 336
// end ;
2368: LD_VAR 0 1
2372: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
// uc_side = 1 ;
2380: LD_ADDR_OWVAR 20
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// uc_nation = 1 ;
2388: LD_ADDR_OWVAR 21
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// for i := 1 to 10 do
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: DOUBLE
2402: LD_INT 1
2404: DEC
2405: ST_TO_ADDR
2406: LD_INT 10
2408: PUSH
2409: FOR_TO
2410: IFFALSE 2592
// begin vc_engine = 1 ;
2412: LD_ADDR_OWVAR 39
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_control = 1 ;
2420: LD_ADDR_OWVAR 38
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 12
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 4
2456: PPUSH
2457: CALL_OW 12
2461: ARRAY
2462: ST_TO_ADDR
// vc_chassis = 3 ;
2463: LD_ADDR_OWVAR 37
2467: PUSH
2468: LD_INT 3
2470: ST_TO_ADDR
// veh = CreateVehicle ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2481: LD_VAR 0 3
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2493: LD_VAR 0 3
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2508: LD_ADDR_EXP 29
2512: PUSH
2513: LD_EXP 29
2517: PUSH
2518: LD_VAR 0 3
2522: ADD
2523: ST_TO_ADDR
// if vc_weapon = 12 then
2524: LD_OWVAR 40
2528: PUSH
2529: LD_INT 12
2531: EQUAL
2532: IFFALSE 2590
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_INT 5
2541: PPUSH
2542: LD_INT 10
2544: PPUSH
2545: CALL_OW 12
2549: PUSH
2550: LD_INT 10
2552: MUL
2553: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 1
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 291
// end ; end ;
2590: GO 2409
2592: POP
2593: POP
// end ;
2594: LD_VAR 0 1
2598: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2599: LD_INT 0
2601: PPUSH
2602: PPUSH
2603: PPUSH
// uc_side = 4 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 4
2611: ST_TO_ADDR
// uc_nation = 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debugMode ) then
2620: LD_STRING 08_SikorskiStatus
2622: PPUSH
2623: LD_EXP 68
2627: PPUSH
2628: CALL_OW 30
2632: IFFALSE 2653
// Truman := PrepareUnit ( Truman , false ,  ) ;
2634: LD_ADDR_EXP 20
2638: PUSH
2639: LD_STRING Truman
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: LD_STRING 
2647: PPUSH
2648: CALL 50117 0 3
2652: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2653: LD_ADDR_EXP 11
2657: PUSH
2658: LD_STRING Simms
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: LD_STRING 
2666: PPUSH
2667: CALL 50117 0 3
2671: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2672: LD_ADDR_EXP 12
2676: PUSH
2677: LD_STRING Denis
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: LD_STRING 08_
2685: PPUSH
2686: CALL 50117 0 3
2690: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2691: LD_ADDR_EXP 13
2695: PUSH
2696: LD_STRING Joan
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: LD_STRING 08_
2704: PPUSH
2705: CALL 50117 0 3
2709: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2710: LD_STRING 08_Khatam
2712: PPUSH
2713: CALL_OW 28
2717: IFFALSE 2740
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2719: LD_ADDR_EXP 14
2723: PUSH
2724: LD_STRING Khatam
2726: PPUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_STRING 08_
2732: PPUSH
2733: CALL 50117 0 3
2737: ST_TO_ADDR
2738: GO 2768
// if TestCharacters ( 03_Khatam ) then
2740: LD_STRING 03_Khatam
2742: PPUSH
2743: CALL_OW 28
2747: IFFALSE 2768
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2749: LD_ADDR_EXP 14
2753: PUSH
2754: LD_STRING Khatam
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: LD_STRING 03_
2762: PPUSH
2763: CALL 50117 0 3
2767: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2768: LD_ADDR_EXP 15
2772: PUSH
2773: LD_STRING Gladstone
2775: PPUSH
2776: LD_INT 1
2778: PPUSH
2779: LD_STRING 08_
2781: PPUSH
2782: CALL 50117 0 3
2786: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2787: LD_ADDR_EXP 17
2791: PUSH
2792: LD_STRING DeltaDoctor
2794: PPUSH
2795: LD_INT 1
2797: PPUSH
2798: LD_STRING 
2800: PPUSH
2801: CALL 50117 0 3
2805: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2806: LD_ADDR_EXP 7
2810: PUSH
2811: LD_STRING Frank
2813: PPUSH
2814: LD_INT 1
2816: PPUSH
2817: LD_STRING 08_
2819: PPUSH
2820: CALL 50117 0 3
2824: ST_TO_ADDR
// if Frank then
2825: LD_EXP 7
2829: IFFALSE 2852
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2831: LD_ADDR_EXP 8
2835: PUSH
2836: LD_STRING Yamoko
2838: PPUSH
2839: LD_INT 0
2841: PPUSH
2842: LD_STRING 
2844: PPUSH
2845: CALL 50117 0 3
2849: ST_TO_ADDR
2850: GO 2871
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2852: LD_ADDR_EXP 8
2856: PUSH
2857: LD_STRING Kikuchi
2859: PPUSH
2860: LD_INT 1
2862: PPUSH
2863: LD_STRING 08_
2865: PPUSH
2866: CALL 50117 0 3
2870: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2871: LD_ADDR_EXP 23
2875: PUSH
2876: LD_STRING 09_others
2878: PPUSH
2879: CALL_OW 31
2883: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2884: LD_ADDR_EXP 24
2888: PUSH
2889: LD_STRING 09_apes
2891: PPUSH
2892: CALL_OW 31
2896: ST_TO_ADDR
// if Truman then
2897: LD_EXP 20
2901: IFFALSE 2918
// PlaceUnitArea ( Truman , CathyTeamSpawn , false ) ;
2903: LD_EXP 20
2907: PPUSH
2908: LD_INT 1
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 49
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2918: LD_EXP 11
2922: PPUSH
2923: LD_INT 1
2925: PPUSH
2926: LD_INT 0
2928: PPUSH
2929: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2933: LD_EXP 12
2937: PPUSH
2938: LD_INT 1
2940: PPUSH
2941: LD_INT 0
2943: PPUSH
2944: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2948: LD_EXP 13
2952: PPUSH
2953: LD_INT 1
2955: PPUSH
2956: LD_INT 0
2958: PPUSH
2959: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2963: LD_EXP 14
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 0
2973: PPUSH
2974: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2978: LD_EXP 15
2982: PPUSH
2983: LD_INT 1
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2993: LD_EXP 17
2997: PPUSH
2998: LD_INT 1
3000: PPUSH
3001: LD_INT 0
3003: PPUSH
3004: CALL_OW 49
// if Kikuchi then
3008: LD_EXP 8
3012: IFFALSE 3029
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
3014: LD_EXP 8
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 0
3024: PPUSH
3025: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3029: LD_EXP 11
3033: PUSH
3034: LD_EXP 14
3038: PUSH
3039: LD_EXP 12
3043: PUSH
3044: LD_EXP 15
3048: PUSH
3049: LD_EXP 17
3053: PUSH
3054: LD_EXP 13
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 336
// if others09 > 2 then
3074: LD_EXP 23
3078: PUSH
3079: LD_INT 2
3081: GREATER
3082: IFFALSE 3163
// begin for i := 1 to 3 do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: DOUBLE
3090: LD_INT 1
3092: DEC
3093: ST_TO_ADDR
3094: LD_INT 3
3096: PUSH
3097: FOR_TO
3098: IFFALSE 3159
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3100: LD_EXP 23
3104: PUSH
3105: LD_VAR 0 2
3109: ARRAY
3110: PPUSH
3111: LD_INT 1
3113: PPUSH
3114: LD_INT 0
3116: PPUSH
3117: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3121: LD_ADDR_EXP 23
3125: PUSH
3126: LD_EXP 23
3130: PPUSH
3131: LD_INT 1
3133: PPUSH
3134: CALL_OW 3
3138: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3139: LD_EXP 23
3143: PUSH
3144: LD_VAR 0 2
3148: ARRAY
3149: PPUSH
3150: LD_INT 2
3152: PPUSH
3153: CALL_OW 336
// end ;
3157: GO 3097
3159: POP
3160: POP
// end else
3161: GO 3223
// begin for i in others09 do
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 23
3172: PUSH
3173: FOR_IN
3174: IFFALSE 3221
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3176: LD_VAR 0 2
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: LD_INT 0
3186: PPUSH
3187: CALL_OW 49
// others09 = others09 diff i ;
3191: LD_ADDR_EXP 23
3195: PUSH
3196: LD_EXP 23
3200: PUSH
3201: LD_VAR 0 2
3205: DIFF
3206: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: CALL_OW 336
// end ;
3219: GO 3173
3221: POP
3222: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3223: LD_INT 22
3225: PUSH
3226: LD_INT 4
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: LD_INT 25
3235: PUSH
3236: LD_INT 2
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: PUSH
3252: LD_INT 0
3254: EQUAL
3255: IFFALSE 3387
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3257: LD_ADDR_VAR 0 3
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 25
3274: PUSH
3275: LD_INT 2
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: LD_EXP 11
3295: PUSH
3296: LD_EXP 14
3300: PUSH
3301: LD_EXP 12
3305: PUSH
3306: LD_EXP 15
3310: PUSH
3311: LD_EXP 17
3315: PUSH
3316: LD_EXP 13
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: DIFF
3329: ST_TO_ADDR
// if not tmp then
3330: LD_VAR 0 3
3334: NOT
3335: IFFALSE 3371
// begin if Denis then
3337: LD_EXP 12
3341: IFFALSE 3357
// SetClass ( Denis , 2 ) else
3343: LD_EXP 12
3347: PPUSH
3348: LD_INT 2
3350: PPUSH
3351: CALL_OW 336
3355: GO 3369
// SetClass ( DeltaDoctor , 2 ) ;
3357: LD_EXP 17
3361: PPUSH
3362: LD_INT 2
3364: PPUSH
3365: CALL_OW 336
// end else
3369: GO 3387
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3371: LD_VAR 0 3
3375: PUSH
3376: LD_INT 1
3378: ARRAY
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 336
// end ; end ; for i in ape09 do
3387: LD_ADDR_VAR 0 2
3391: PUSH
3392: LD_EXP 24
3396: PUSH
3397: FOR_IN
3398: IFFALSE 3417
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3400: LD_VAR 0 2
3404: PPUSH
3405: LD_INT 1
3407: PPUSH
3408: LD_INT 0
3410: PPUSH
3411: CALL_OW 49
3415: GO 3397
3417: POP
3418: POP
// uc_side = 4 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 4
3426: ST_TO_ADDR
// hc_class := 1 ;
3427: LD_ADDR_OWVAR 28
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// hc_sex := sex_female ;
3435: LD_ADDR_OWVAR 27
3439: PUSH
3440: LD_INT 2
3442: ST_TO_ADDR
// hc_gallery :=  ;
3443: LD_ADDR_OWVAR 33
3447: PUSH
3448: LD_STRING 
3450: ST_TO_ADDR
// hc_name :=  ;
3451: LD_ADDR_OWVAR 26
3455: PUSH
3456: LD_STRING 
3458: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3459: LD_ADDR_OWVAR 31
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: LD_INT 7
3469: PUSH
3470: LD_INT 1
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: ST_TO_ADDR
// AmScout = CreateHuman ;
3482: LD_ADDR_EXP 18
3486: PUSH
3487: CALL_OW 44
3491: ST_TO_ADDR
// end ;
3492: LD_VAR 0 1
3496: RET
// export function PrepareCornell ; begin
3497: LD_INT 0
3499: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 4
3505: PPUSH
3506: CALL_OW 343
// uc_side = 4 ;
3510: LD_ADDR_OWVAR 20
3514: PUSH
3515: LD_INT 4
3517: ST_TO_ADDR
// uc_nation = 1 ;
3518: LD_ADDR_OWVAR 21
3522: PUSH
3523: LD_INT 1
3525: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3526: LD_ADDR_EXP 19
3530: PUSH
3531: LD_STRING Cornel
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: LD_STRING 03_
3539: PPUSH
3540: CALL 50117 0 3
3544: ST_TO_ADDR
// if not Cornell then
3545: LD_EXP 19
3549: NOT
3550: IFFALSE 3554
// exit ;
3552: GO 3662
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3554: LD_EXP 19
3558: PPUSH
3559: LD_INT 8
3561: PPUSH
3562: LD_INT 0
3564: PPUSH
3565: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3569: LD_EXP 19
3573: PPUSH
3574: LD_INT 350
3576: PPUSH
3577: CALL_OW 234
// if IsInUnit ( JMM ) then
3581: LD_EXP 1
3585: PPUSH
3586: CALL_OW 310
3590: IFFALSE 3633
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3592: LD_EXP 19
3596: PPUSH
3597: LD_EXP 1
3601: PPUSH
3602: CALL_OW 310
3606: PPUSH
3607: CALL_OW 250
3611: PPUSH
3612: LD_EXP 1
3616: PPUSH
3617: CALL_OW 310
3621: PPUSH
3622: CALL_OW 251
3626: PPUSH
3627: CALL_OW 111
3631: GO 3662
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3633: LD_EXP 19
3637: PPUSH
3638: LD_EXP 1
3642: PPUSH
3643: CALL_OW 250
3647: PPUSH
3648: LD_EXP 1
3652: PPUSH
3653: CALL_OW 251
3657: PPUSH
3658: CALL_OW 111
// end ;
3662: LD_VAR 0 1
3666: RET
// every 0 0$1 trigger IsAt ( Truman , 17 , 31 ) do
3667: LD_EXP 20
3671: PPUSH
3672: LD_INT 17
3674: PPUSH
3675: LD_INT 31
3677: PPUSH
3678: CALL_OW 307
3682: IFFALSE 3696
3684: GO 3686
3686: DISABLE
// RemoveUnit ( Truman ) ;
3687: LD_EXP 20
3691: PPUSH
3692: CALL_OW 64
3696: END
// every 0 0$2 trigger joinEpsilon = 1 and IsOk ( Truman ) and not HasTask ( Truman ) do
3697: LD_EXP 30
3701: PUSH
3702: LD_INT 1
3704: EQUAL
3705: PUSH
3706: LD_EXP 20
3710: PPUSH
3711: CALL_OW 302
3715: AND
3716: PUSH
3717: LD_EXP 20
3721: PPUSH
3722: CALL_OW 314
3726: NOT
3727: AND
3728: IFFALSE 3749
3730: GO 3732
3732: DISABLE
// begin enable ;
3733: ENABLE
// ComMoveXY ( Truman , 17 , 31 ) ;
3734: LD_EXP 20
3738: PPUSH
3739: LD_INT 17
3741: PPUSH
3742: LD_INT 31
3744: PPUSH
3745: CALL_OW 111
// end ; end_of_file
3749: END
// export function PrepareRussians ; var i , un ; begin
3750: LD_INT 0
3752: PPUSH
3753: PPUSH
3754: PPUSH
// uc_side = 3 ;
3755: LD_ADDR_OWVAR 20
3759: PUSH
3760: LD_INT 3
3762: ST_TO_ADDR
// uc_nation = 3 ;
3763: LD_ADDR_OWVAR 21
3767: PUSH
3768: LD_INT 3
3770: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3771: LD_ADDR_EXP 26
3775: PUSH
3776: LD_STRING Tsaritsyn
3778: PPUSH
3779: LD_INT 0
3781: PPUSH
3782: LD_STRING 
3784: PPUSH
3785: CALL 50117 0 3
3789: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3790: LD_EXP 26
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: LD_INT 0
3800: PPUSH
3801: CALL_OW 49
// for i = 1 to 14 do
3805: LD_ADDR_VAR 0 2
3809: PUSH
3810: DOUBLE
3811: LD_INT 1
3813: DEC
3814: ST_TO_ADDR
3815: LD_INT 14
3817: PUSH
3818: FOR_TO
3819: IFFALSE 3905
// begin uc_side = 3 ;
3821: LD_ADDR_OWVAR 20
3825: PUSH
3826: LD_INT 3
3828: ST_TO_ADDR
// uc_nation = 3 ;
3829: LD_ADDR_OWVAR 21
3833: PUSH
3834: LD_INT 3
3836: ST_TO_ADDR
// hc_gallery =  ;
3837: LD_ADDR_OWVAR 33
3841: PUSH
3842: LD_STRING 
3844: ST_TO_ADDR
// hc_name =  ;
3845: LD_ADDR_OWVAR 26
3849: PUSH
3850: LD_STRING 
3852: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3853: LD_INT 0
3855: PPUSH
3856: LD_INT 1
3858: PPUSH
3859: LD_EXP 37
3863: PPUSH
3864: LD_EXP 38
3868: PPUSH
3869: CALL_OW 12
3873: PPUSH
3874: CALL_OW 380
// un = CreateHuman ;
3878: LD_ADDR_VAR 0 3
3882: PUSH
3883: CALL_OW 44
3887: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3888: LD_VAR 0 3
3892: PPUSH
3893: LD_INT 3
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 49
// end ;
3903: GO 3818
3905: POP
3906: POP
// for i = 1 to 6 do
3907: LD_ADDR_VAR 0 2
3911: PUSH
3912: DOUBLE
3913: LD_INT 1
3915: DEC
3916: ST_TO_ADDR
3917: LD_INT 6
3919: PUSH
3920: FOR_TO
3921: IFFALSE 4007
// begin uc_side = 3 ;
3923: LD_ADDR_OWVAR 20
3927: PUSH
3928: LD_INT 3
3930: ST_TO_ADDR
// uc_nation = 3 ;
3931: LD_ADDR_OWVAR 21
3935: PUSH
3936: LD_INT 3
3938: ST_TO_ADDR
// hc_gallery =  ;
3939: LD_ADDR_OWVAR 33
3943: PUSH
3944: LD_STRING 
3946: ST_TO_ADDR
// hc_name =  ;
3947: LD_ADDR_OWVAR 26
3951: PUSH
3952: LD_STRING 
3954: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3955: LD_INT 0
3957: PPUSH
3958: LD_INT 2
3960: PPUSH
3961: LD_EXP 37
3965: PPUSH
3966: LD_EXP 38
3970: PPUSH
3971: CALL_OW 12
3975: PPUSH
3976: CALL_OW 380
// un = CreateHuman ;
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: CALL_OW 44
3989: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3990: LD_VAR 0 3
3994: PPUSH
3995: LD_INT 3
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 49
// end ;
4005: GO 3920
4007: POP
4008: POP
// for i = 1 to 6 do
4009: LD_ADDR_VAR 0 2
4013: PUSH
4014: DOUBLE
4015: LD_INT 1
4017: DEC
4018: ST_TO_ADDR
4019: LD_INT 6
4021: PUSH
4022: FOR_TO
4023: IFFALSE 4109
// begin uc_side = 3 ;
4025: LD_ADDR_OWVAR 20
4029: PUSH
4030: LD_INT 3
4032: ST_TO_ADDR
// uc_nation = 3 ;
4033: LD_ADDR_OWVAR 21
4037: PUSH
4038: LD_INT 3
4040: ST_TO_ADDR
// hc_gallery =  ;
4041: LD_ADDR_OWVAR 33
4045: PUSH
4046: LD_STRING 
4048: ST_TO_ADDR
// hc_name =  ;
4049: LD_ADDR_OWVAR 26
4053: PUSH
4054: LD_STRING 
4056: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4057: LD_INT 0
4059: PPUSH
4060: LD_INT 3
4062: PPUSH
4063: LD_EXP 37
4067: PPUSH
4068: LD_EXP 38
4072: PPUSH
4073: CALL_OW 12
4077: PPUSH
4078: CALL_OW 380
// un = CreateHuman ;
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: CALL_OW 44
4091: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 3
4099: PPUSH
4100: LD_INT 0
4102: PPUSH
4103: CALL_OW 49
// end ;
4107: GO 4022
4109: POP
4110: POP
// for i = 1 to 4 do
4111: LD_ADDR_VAR 0 2
4115: PUSH
4116: DOUBLE
4117: LD_INT 1
4119: DEC
4120: ST_TO_ADDR
4121: LD_INT 4
4123: PUSH
4124: FOR_TO
4125: IFFALSE 4211
// begin uc_side = 3 ;
4127: LD_ADDR_OWVAR 20
4131: PUSH
4132: LD_INT 3
4134: ST_TO_ADDR
// uc_nation = 3 ;
4135: LD_ADDR_OWVAR 21
4139: PUSH
4140: LD_INT 3
4142: ST_TO_ADDR
// hc_gallery =  ;
4143: LD_ADDR_OWVAR 33
4147: PUSH
4148: LD_STRING 
4150: ST_TO_ADDR
// hc_name =  ;
4151: LD_ADDR_OWVAR 26
4155: PUSH
4156: LD_STRING 
4158: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4159: LD_INT 0
4161: PPUSH
4162: LD_INT 4
4164: PPUSH
4165: LD_EXP 37
4169: PPUSH
4170: LD_EXP 38
4174: PPUSH
4175: CALL_OW 12
4179: PPUSH
4180: CALL_OW 380
// un = CreateHuman ;
4184: LD_ADDR_VAR 0 3
4188: PUSH
4189: CALL_OW 44
4193: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4194: LD_VAR 0 3
4198: PPUSH
4199: LD_INT 3
4201: PPUSH
4202: LD_INT 0
4204: PPUSH
4205: CALL_OW 49
// end ;
4209: GO 4124
4211: POP
4212: POP
// end ; end_of_file
4213: LD_VAR 0 1
4217: RET
// export function PrepareArabianCommander ; begin
4218: LD_INT 0
4220: PPUSH
// uc_side = 2 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 2
4228: ST_TO_ADDR
// uc_nation = 2 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 2
4236: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4237: LD_ADDR_EXP 27
4241: PUSH
4242: LD_STRING Dietrich
4244: PPUSH
4245: CALL_OW 25
4249: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4250: LD_EXP 27
4254: PPUSH
4255: LD_INT 4
4257: PPUSH
4258: LD_INT 0
4260: PPUSH
4261: CALL_OW 49
// end ;
4265: LD_VAR 0 1
4269: RET
// export function PrepareArabian ; var i , un , veh ; begin
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
4275: PPUSH
// uc_side := 2 ;
4276: LD_ADDR_OWVAR 20
4280: PUSH
4281: LD_INT 2
4283: ST_TO_ADDR
// uc_nation := 2 ;
4284: LD_ADDR_OWVAR 21
4288: PUSH
4289: LD_INT 2
4291: ST_TO_ADDR
// if not Ahmed then
4292: LD_EXP 28
4296: NOT
4297: IFFALSE 4365
// begin InitHc ;
4299: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4303: LD_INT 1
4305: PPUSH
4306: LD_INT 1
4308: PPUSH
4309: LD_EXP 37
4313: PPUSH
4314: LD_EXP 38
4318: PUSH
4319: LD_INT 1
4321: PLUS
4322: PPUSH
4323: CALL_OW 12
4327: PPUSH
4328: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4332: LD_ADDR_OWVAR 26
4336: PUSH
4337: LD_STRING Ahmed Abbasid
4339: ST_TO_ADDR
// Ahmed := CreateHuman ;
4340: LD_ADDR_EXP 28
4344: PUSH
4345: CALL_OW 44
4349: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4350: LD_EXP 28
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: CALL_OW 49
// end ; for i = 1 to 4 do
4365: LD_ADDR_VAR 0 2
4369: PUSH
4370: DOUBLE
4371: LD_INT 1
4373: DEC
4374: ST_TO_ADDR
4375: LD_INT 4
4377: PUSH
4378: FOR_TO
4379: IFFALSE 4465
// begin uc_side = 2 ;
4381: LD_ADDR_OWVAR 20
4385: PUSH
4386: LD_INT 2
4388: ST_TO_ADDR
// uc_nation = 2 ;
4389: LD_ADDR_OWVAR 21
4393: PUSH
4394: LD_INT 2
4396: ST_TO_ADDR
// hc_gallery =  ;
4397: LD_ADDR_OWVAR 33
4401: PUSH
4402: LD_STRING 
4404: ST_TO_ADDR
// hc_name =  ;
4405: LD_ADDR_OWVAR 26
4409: PUSH
4410: LD_STRING 
4412: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4413: LD_INT 0
4415: PPUSH
4416: LD_INT 2
4418: PPUSH
4419: LD_EXP 37
4423: PPUSH
4424: LD_EXP 38
4428: PPUSH
4429: CALL_OW 12
4433: PPUSH
4434: CALL_OW 380
// un = CreateHuman ;
4438: LD_ADDR_VAR 0 3
4442: PUSH
4443: CALL_OW 44
4447: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4448: LD_VAR 0 3
4452: PPUSH
4453: LD_INT 4
4455: PPUSH
4456: LD_INT 0
4458: PPUSH
4459: CALL_OW 49
// end ;
4463: GO 4378
4465: POP
4466: POP
// for i = 1 to 5 do
4467: LD_ADDR_VAR 0 2
4471: PUSH
4472: DOUBLE
4473: LD_INT 1
4475: DEC
4476: ST_TO_ADDR
4477: LD_INT 5
4479: PUSH
4480: FOR_TO
4481: IFFALSE 4567
// begin uc_side = 2 ;
4483: LD_ADDR_OWVAR 20
4487: PUSH
4488: LD_INT 2
4490: ST_TO_ADDR
// uc_nation = 2 ;
4491: LD_ADDR_OWVAR 21
4495: PUSH
4496: LD_INT 2
4498: ST_TO_ADDR
// hc_gallery =  ;
4499: LD_ADDR_OWVAR 33
4503: PUSH
4504: LD_STRING 
4506: ST_TO_ADDR
// hc_name =  ;
4507: LD_ADDR_OWVAR 26
4511: PUSH
4512: LD_STRING 
4514: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4515: LD_INT 0
4517: PPUSH
4518: LD_INT 1
4520: PPUSH
4521: LD_EXP 37
4525: PPUSH
4526: LD_EXP 38
4530: PPUSH
4531: CALL_OW 12
4535: PPUSH
4536: CALL_OW 380
// un = CreateHuman ;
4540: LD_ADDR_VAR 0 3
4544: PUSH
4545: CALL_OW 44
4549: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4550: LD_VAR 0 3
4554: PPUSH
4555: LD_INT 4
4557: PPUSH
4558: LD_INT 0
4560: PPUSH
4561: CALL_OW 49
// end ;
4565: GO 4480
4567: POP
4568: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4569: LD_ADDR_VAR 0 2
4573: PUSH
4574: DOUBLE
4575: LD_INT 1
4577: DEC
4578: ST_TO_ADDR
4579: LD_INT 3
4581: PUSH
4582: LD_INT 4
4584: PUSH
4585: LD_INT 4
4587: PUSH
4588: LD_INT 4
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: LD_OWVAR 67
4601: ARRAY
4602: PUSH
4603: FOR_TO
4604: IFFALSE 4690
// begin uc_side = 2 ;
4606: LD_ADDR_OWVAR 20
4610: PUSH
4611: LD_INT 2
4613: ST_TO_ADDR
// uc_nation = 2 ;
4614: LD_ADDR_OWVAR 21
4618: PUSH
4619: LD_INT 2
4621: ST_TO_ADDR
// hc_gallery =  ;
4622: LD_ADDR_OWVAR 33
4626: PUSH
4627: LD_STRING 
4629: ST_TO_ADDR
// hc_name =  ;
4630: LD_ADDR_OWVAR 26
4634: PUSH
4635: LD_STRING 
4637: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4638: LD_INT 0
4640: PPUSH
4641: LD_INT 4
4643: PPUSH
4644: LD_EXP 37
4648: PPUSH
4649: LD_EXP 38
4653: PPUSH
4654: CALL_OW 12
4658: PPUSH
4659: CALL_OW 380
// un = CreateHuman ;
4663: LD_ADDR_VAR 0 3
4667: PUSH
4668: CALL_OW 44
4672: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4673: LD_VAR 0 3
4677: PPUSH
4678: LD_INT 4
4680: PPUSH
4681: LD_INT 0
4683: PPUSH
4684: CALL_OW 49
// end ;
4688: GO 4603
4690: POP
4691: POP
// for i = 1 to 2 do
4692: LD_ADDR_VAR 0 2
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_INT 2
4704: PUSH
4705: FOR_TO
4706: IFFALSE 4836
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_INT 2
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 21
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: LD_INT 58
4735: PUSH
4736: EMPTY
4737: LIST
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: PPUSH
4744: CALL_OW 69
4748: ST_TO_ADDR
// uc_side = 2 ;
4749: LD_ADDR_OWVAR 20
4753: PUSH
4754: LD_INT 2
4756: ST_TO_ADDR
// uc_nation = 2 ;
4757: LD_ADDR_OWVAR 21
4761: PUSH
4762: LD_INT 2
4764: ST_TO_ADDR
// hc_gallery =  ;
4765: LD_ADDR_OWVAR 33
4769: PUSH
4770: LD_STRING 
4772: ST_TO_ADDR
// hc_name =  ;
4773: LD_ADDR_OWVAR 26
4777: PUSH
4778: LD_STRING 
4780: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 3
4786: PPUSH
4787: LD_EXP 37
4791: PPUSH
4792: LD_EXP 38
4796: PPUSH
4797: CALL_OW 12
4801: PPUSH
4802: CALL_OW 380
// un = CreateHuman ;
4806: LD_ADDR_VAR 0 3
4810: PUSH
4811: CALL_OW 44
4815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_VAR 0 4
4825: PUSH
4826: LD_INT 1
4828: ARRAY
4829: PPUSH
4830: CALL_OW 52
// end ;
4834: GO 4705
4836: POP
4837: POP
// end ;
4838: LD_VAR 0 1
4842: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4843: LD_INT 0
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
// for i := 1 to 2 do
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: DOUBLE
4857: LD_INT 1
4859: DEC
4860: ST_TO_ADDR
4861: LD_INT 2
4863: PUSH
4864: FOR_TO
4865: IFFALSE 4991
// begin uc_side = 5 ;
4867: LD_ADDR_OWVAR 20
4871: PUSH
4872: LD_INT 5
4874: ST_TO_ADDR
// uc_nation = 2 ;
4875: LD_ADDR_OWVAR 21
4879: PUSH
4880: LD_INT 2
4882: ST_TO_ADDR
// vc_chassis := 31 ;
4883: LD_ADDR_OWVAR 37
4887: PUSH
4888: LD_INT 31
4890: ST_TO_ADDR
// vc_control := control_rider ;
4891: LD_ADDR_OWVAR 38
4895: PUSH
4896: LD_INT 4
4898: ST_TO_ADDR
// animal := CreateVehicle ;
4899: LD_ADDR_VAR 0 3
4903: PUSH
4904: CALL_OW 45
4908: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4909: LD_VAR 0 3
4913: PPUSH
4914: LD_INT 7
4916: PPUSH
4917: LD_INT 0
4919: PPUSH
4920: CALL_OW 49
// hc_gallery =  ;
4924: LD_ADDR_OWVAR 33
4928: PUSH
4929: LD_STRING 
4931: ST_TO_ADDR
// hc_name =  ;
4932: LD_ADDR_OWVAR 26
4936: PUSH
4937: LD_STRING 
4939: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4940: LD_INT 0
4942: PPUSH
4943: LD_INT 11
4945: PPUSH
4946: LD_EXP 37
4950: PPUSH
4951: LD_EXP 38
4955: PPUSH
4956: CALL_OW 12
4960: PPUSH
4961: CALL_OW 380
// un = CreateHuman ;
4965: LD_ADDR_VAR 0 4
4969: PUSH
4970: CALL_OW 44
4974: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4975: LD_VAR 0 4
4979: PPUSH
4980: LD_VAR 0 3
4984: PPUSH
4985: CALL_OW 52
// end ;
4989: GO 4864
4991: POP
4992: POP
// repeat wait ( 0 0$1 ) ;
4993: LD_INT 35
4995: PPUSH
4996: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
5000: LD_ADDR_VAR 0 5
5004: PUSH
5005: LD_INT 22
5007: PUSH
5008: LD_INT 1
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PPUSH
5015: CALL_OW 69
5019: PPUSH
5020: LD_VAR 0 2
5024: PPUSH
5025: CALL_OW 74
5029: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5030: LD_ADDR_VAR 0 6
5034: PUSH
5035: LD_INT 22
5037: PUSH
5038: LD_INT 1
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: PUSH
5045: LD_INT 2
5047: PUSH
5048: LD_INT 59
5050: PUSH
5051: EMPTY
5052: LIST
5053: PUSH
5054: LD_INT 21
5056: PUSH
5057: LD_INT 1
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: PUSH
5064: LD_INT 21
5066: PUSH
5067: LD_INT 2
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: EMPTY
5085: LIST
5086: PPUSH
5087: CALL_OW 69
5091: PPUSH
5092: LD_VAR 0 2
5096: PPUSH
5097: CALL_OW 74
5101: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_INT 22
5109: PUSH
5110: LD_INT 5
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 25
5119: PUSH
5120: LD_INT 11
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL_OW 69
5135: PUSH
5136: FOR_IN
5137: IFFALSE 5207
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5139: LD_VAR 0 2
5143: PPUSH
5144: LD_VAR 0 5
5148: PPUSH
5149: CALL_OW 296
5153: PUSH
5154: LD_INT 8
5156: PLUS
5157: PUSH
5158: LD_VAR 0 2
5162: PPUSH
5163: LD_VAR 0 6
5167: PPUSH
5168: CALL_OW 296
5172: LESS
5173: IFFALSE 5191
// ComAttackUnit ( i , target1 ) else
5175: LD_VAR 0 2
5179: PPUSH
5180: LD_VAR 0 5
5184: PPUSH
5185: CALL_OW 115
5189: GO 5205
// ComAttackUnit ( i , target2 ) ;
5191: LD_VAR 0 2
5195: PPUSH
5196: LD_VAR 0 6
5200: PPUSH
5201: CALL_OW 115
// end ;
5205: GO 5136
5207: POP
5208: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5209: LD_INT 22
5211: PUSH
5212: LD_INT 5
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: LD_INT 25
5221: PUSH
5222: LD_INT 11
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PPUSH
5233: CALL_OW 69
5237: PUSH
5238: LD_INT 0
5240: EQUAL
5241: PUSH
5242: LD_INT 22
5244: PUSH
5245: LD_INT 1
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PPUSH
5252: CALL_OW 69
5256: PUSH
5257: LD_INT 0
5259: EQUAL
5260: OR
5261: IFFALSE 4993
// end ; end_of_file
5263: LD_VAR 0 1
5267: RET
// every 0 0$1 do
5268: GO 5270
5270: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
5271: LD_INT 1
5273: PPUSH
5274: LD_INT 19
5276: PPUSH
5277: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5281: LD_EXP 11
5285: PPUSH
5286: CALL_OW 87
// wait ( 0 0$3 ) ;
5290: LD_INT 105
5292: PPUSH
5293: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5297: LD_EXP 1
5301: PPUSH
5302: CALL_OW 310
5306: PPUSH
5307: CALL_OW 85
// Wait ( 0 0$1 ) ;
5311: LD_INT 35
5313: PPUSH
5314: CALL_OW 67
// if IsOk ( Gary ) then
5318: LD_EXP 10
5322: PPUSH
5323: CALL_OW 302
5327: IFFALSE 5365
// begin Say ( Gary , D2-Gary-1 ) ;
5329: LD_EXP 10
5333: PPUSH
5334: LD_STRING D2-Gary-1
5336: PPUSH
5337: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5341: LD_EXP 1
5345: PPUSH
5346: LD_STRING D2-JMM-1
5348: PPUSH
5349: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5353: LD_EXP 10
5357: PPUSH
5358: LD_STRING D2-Gary-2
5360: PPUSH
5361: CALL_OW 88
// end ; Video ( false ) ;
5365: LD_INT 0
5367: PPUSH
5368: CALL 87490 0 1
// ChangeMissionObjectives ( M1 ) ;
5372: LD_STRING M1
5374: PPUSH
5375: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5379: LD_INT 38
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: LD_INT 100
5387: PPUSH
5388: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5392: LD_INT 47
5394: PPUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_INT 50
5400: PPUSH
5401: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5405: LD_INT 47
5407: PPUSH
5408: LD_INT 3
5410: PPUSH
5411: LD_INT 50
5413: PPUSH
5414: CALL_OW 291
// SaveForQuickRestart ;
5418: CALL_OW 22
// end ;
5422: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5423: LD_EXP 1
5427: PPUSH
5428: LD_EXP 11
5432: PPUSH
5433: CALL_OW 296
5437: PUSH
5438: LD_INT 15
5440: LESS
5441: IFFALSE 6269
5443: GO 5445
5445: DISABLE
5446: LD_INT 0
5448: PPUSH
// begin wait ( 0 0$3 ) ;
5449: LD_INT 105
5451: PPUSH
5452: CALL_OW 67
// Video ( true ) ;
5456: LD_INT 1
5458: PPUSH
5459: CALL 87490 0 1
// ComExitVehicle ( JMM ) ;
5463: LD_EXP 1
5467: PPUSH
5468: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5472: LD_EXP 1
5476: PPUSH
5477: CALL_OW 87
// if Truman then
5481: LD_EXP 20
5485: IFFALSE 5622
// begin ComMoveUnit ( Truman , JMM ) ;
5487: LD_EXP 20
5491: PPUSH
5492: LD_EXP 1
5496: PPUSH
5497: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5501: LD_INT 35
5503: PPUSH
5504: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
5508: LD_EXP 20
5512: PPUSH
5513: LD_EXP 1
5517: PPUSH
5518: CALL_OW 296
5522: PUSH
5523: LD_INT 6
5525: LESS
5526: IFFALSE 5501
// ComTurnUnit ( Truman , JMM ) ;
5528: LD_EXP 20
5532: PPUSH
5533: LD_EXP 1
5537: PPUSH
5538: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
5542: LD_EXP 1
5546: PPUSH
5547: LD_EXP 20
5551: PPUSH
5552: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
5556: LD_EXP 20
5560: PPUSH
5561: LD_STRING D2-Tru-1
5563: PPUSH
5564: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_STRING D2-JMM-Tru-1
5575: PPUSH
5576: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
5580: LD_EXP 20
5584: PPUSH
5585: LD_STRING D2-Tru-2
5587: PPUSH
5588: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
5592: LD_EXP 20
5596: PPUSH
5597: LD_INT 79
5599: PPUSH
5600: LD_INT 41
5602: PPUSH
5603: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
5607: LD_EXP 20
5611: PPUSH
5612: LD_INT 17
5614: PPUSH
5615: LD_INT 31
5617: PPUSH
5618: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
5622: LD_EXP 1
5626: PPUSH
5627: LD_EXP 11
5631: PPUSH
5632: CALL_OW 179
// p := 15 ;
5636: LD_ADDR_VAR 0 1
5640: PUSH
5641: LD_INT 15
5643: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5651: LD_EXP 11
5655: PUSH
5656: LD_EXP 13
5660: PUSH
5661: LD_EXP 12
5665: PUSH
5666: LD_EXP 14
5670: PUSH
5671: LD_EXP 8
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: PPUSH
5683: LD_EXP 1
5687: PPUSH
5688: CALL_OW 112
// p := p - 1 ;
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 1
5701: PUSH
5702: LD_INT 1
5704: MINUS
5705: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5706: LD_EXP 1
5710: PPUSH
5711: LD_EXP 11
5715: PPUSH
5716: CALL_OW 296
5720: PUSH
5721: LD_INT 5
5723: LESS
5724: PUSH
5725: LD_VAR 0 1
5729: PUSH
5730: LD_INT 0
5732: LESSEQUAL
5733: OR
5734: IFFALSE 5644
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5736: LD_EXP 11
5740: PUSH
5741: LD_EXP 13
5745: PUSH
5746: LD_EXP 12
5750: PUSH
5751: LD_EXP 14
5755: PUSH
5756: LD_EXP 8
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: PPUSH
5768: LD_EXP 1
5772: PPUSH
5773: CALL_OW 119
// if not IsInUnit ( JMM ) then
5777: LD_EXP 1
5781: PPUSH
5782: CALL_OW 310
5786: NOT
5787: IFFALSE 5803
// ComTurnUnit ( JMM , Simms ) ;
5789: LD_EXP 1
5793: PPUSH
5794: LD_EXP 11
5798: PPUSH
5799: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5803: LD_EXP 11
5807: PUSH
5808: LD_EXP 13
5812: PUSH
5813: LD_EXP 12
5817: PUSH
5818: LD_EXP 14
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PPUSH
5829: LD_EXP 1
5833: PPUSH
5834: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5838: LD_EXP 1
5842: PUSH
5843: LD_EXP 11
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5856: LD_EXP 11
5860: PPUSH
5861: LD_STRING D2a-Sim-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D2a-JMM-1
5875: PPUSH
5876: CALL_OW 88
// if IsOk ( Joan ) then
5880: LD_EXP 13
5884: PPUSH
5885: CALL_OW 302
5889: IFFALSE 5967
// begin if not IsInUnit ( JMM ) then
5891: LD_EXP 1
5895: PPUSH
5896: CALL_OW 310
5900: NOT
5901: IFFALSE 5917
// ComTurnUnit ( JMM , Joan ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_EXP 13
5912: PPUSH
5913: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5917: LD_EXP 13
5921: PPUSH
5922: LD_EXP 1
5926: PPUSH
5927: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5931: LD_EXP 13
5935: PPUSH
5936: LD_STRING D2b-Joan-1
5938: PPUSH
5939: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5943: LD_EXP 1
5947: PPUSH
5948: LD_STRING D2b-JMM-1
5950: PPUSH
5951: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5955: LD_EXP 13
5959: PPUSH
5960: LD_STRING D2b-Joan-2
5962: PPUSH
5963: CALL_OW 88
// end ; if IsOk ( Denis ) then
5967: LD_EXP 12
5971: PPUSH
5972: CALL_OW 302
5976: IFFALSE 6030
// begin if not IsInUnit ( JMM ) then
5978: LD_EXP 1
5982: PPUSH
5983: CALL_OW 310
5987: NOT
5988: IFFALSE 6004
// ComTurnUnit ( JMM , Denis ) ;
5990: LD_EXP 1
5994: PPUSH
5995: LD_EXP 12
5999: PPUSH
6000: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
6004: LD_EXP 12
6008: PPUSH
6009: LD_EXP 1
6013: PPUSH
6014: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
6018: LD_EXP 12
6022: PPUSH
6023: LD_STRING D2c-Den-1
6025: PPUSH
6026: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
6030: LD_EXP 8
6034: PPUSH
6035: CALL_OW 302
6039: PUSH
6040: LD_STRING 08_Kikuchi
6042: PPUSH
6043: CALL_OW 28
6047: NOT
6048: AND
6049: IFFALSE 6144
// begin repeat wait ( 0 0$1 ) ;
6051: LD_INT 35
6053: PPUSH
6054: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
6058: LD_EXP 8
6062: PPUSH
6063: LD_EXP 1
6067: PPUSH
6068: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
6072: LD_EXP 1
6076: PPUSH
6077: LD_EXP 8
6081: PPUSH
6082: CALL_OW 296
6086: PUSH
6087: LD_INT 5
6089: LESS
6090: IFFALSE 6051
// ComTurnUnit ( Kikuchi , JMM ) ;
6092: LD_EXP 8
6096: PPUSH
6097: LD_EXP 1
6101: PPUSH
6102: CALL_OW 119
// if not IsInUnit ( JMM ) then
6106: LD_EXP 1
6110: PPUSH
6111: CALL_OW 310
6115: NOT
6116: IFFALSE 6132
// ComTurnUnit ( JMM , Kikuchi ) ;
6118: LD_EXP 1
6122: PPUSH
6123: LD_EXP 8
6127: PPUSH
6128: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
6132: LD_EXP 8
6136: PPUSH
6137: LD_STRING D3b-Yam-1
6139: PPUSH
6140: CALL_OW 88
// end ; if IsOk ( Khatam ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 302
6153: IFFALSE 6219
// begin if not IsInUnit ( JMM ) then
6155: LD_EXP 1
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: IFFALSE 6181
// ComTurnUnit ( JMM , Khatam ) ;
6167: LD_EXP 1
6171: PPUSH
6172: LD_EXP 14
6176: PPUSH
6177: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
6181: LD_EXP 14
6185: PPUSH
6186: LD_EXP 1
6190: PPUSH
6191: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
6195: LD_EXP 1
6199: PPUSH
6200: LD_STRING D2c-JMM-1
6202: PPUSH
6203: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
6207: LD_EXP 14
6211: PPUSH
6212: LD_STRING D2c-Khat-1
6214: PPUSH
6215: CALL_OW 88
// end ; Video ( false ) ;
6219: LD_INT 0
6221: PPUSH
6222: CALL 87490 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
6226: LD_INT 22
6228: PUSH
6229: LD_INT 4
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 69
6240: PUSH
6241: LD_EXP 20
6245: DIFF
6246: PPUSH
6247: LD_INT 1
6249: PPUSH
6250: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
6254: LD_STRING M1a
6256: PPUSH
6257: CALL_OW 337
// joinEpsilon := 1 ;
6261: LD_ADDR_EXP 30
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// end ;
6269: PPOPN 1
6271: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6272: LD_INT 38
6274: PPUSH
6275: LD_INT 1
6277: PPUSH
6278: CALL_OW 289
6282: PUSH
6283: LD_INT 0
6285: EQUAL
6286: PUSH
6287: LD_INT 47
6289: PPUSH
6290: LD_INT 1
6292: PPUSH
6293: CALL_OW 289
6297: PUSH
6298: LD_INT 0
6300: EQUAL
6301: AND
6302: PUSH
6303: LD_INT 47
6305: PPUSH
6306: LD_INT 2
6308: PPUSH
6309: CALL_OW 289
6313: PUSH
6314: LD_INT 0
6316: EQUAL
6317: AND
6318: IFFALSE 6443
6320: GO 6322
6322: DISABLE
6323: LD_INT 0
6325: PPUSH
// begin p := 0 ;
6326: LD_ADDR_VAR 0 1
6330: PUSH
6331: LD_INT 0
6333: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6334: LD_INT 38
6336: PUSH
6337: LD_INT 47
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PPUSH
6344: LD_INT 56
6346: PPUSH
6347: LD_INT 0
6349: PPUSH
6350: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6354: LD_INT 35
6356: PPUSH
6357: CALL_OW 67
// p := p + 1 ;
6361: LD_ADDR_VAR 0 1
6365: PUSH
6366: LD_VAR 0 1
6370: PUSH
6371: LD_INT 1
6373: PLUS
6374: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6375: LD_INT 38
6377: PUSH
6378: LD_INT 47
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PPUSH
6385: LD_INT 56
6387: PPUSH
6388: LD_INT 0
6390: PPUSH
6391: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6395: LD_INT 38
6397: PPUSH
6398: LD_INT 27
6400: PPUSH
6401: CALL_OW 308
6405: IFFALSE 6414
// RemoveUnit ( cargo1 ) ;
6407: LD_INT 38
6409: PPUSH
6410: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6414: LD_INT 47
6416: PPUSH
6417: LD_INT 27
6419: PPUSH
6420: CALL_OW 308
6424: IFFALSE 6433
// RemoveUnit ( cargo2 ) ;
6426: LD_INT 47
6428: PPUSH
6429: CALL_OW 64
// until p > 30 ;
6433: LD_VAR 0 1
6437: PUSH
6438: LD_INT 30
6440: GREATER
6441: IFFALSE 6354
// end ;
6443: PPOPN 1
6445: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6446: LD_EXP 66
6450: PUSH
6451: LD_INT 1
6453: EQUAL
6454: IFFALSE 7615
6456: GO 6458
6458: DISABLE
6459: LD_INT 0
6461: PPUSH
6462: PPUSH
6463: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6464: LD_ADDR_VAR 0 1
6468: PUSH
6469: LD_INT 22
6471: PUSH
6472: LD_INT 1
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 25
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 26
6491: PUSH
6492: LD_INT 1
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: PPUSH
6504: CALL_OW 69
6508: PUSH
6509: LD_EXP 1
6513: PUSH
6514: LD_EXP 2
6518: PUSH
6519: LD_EXP 3
6523: PUSH
6524: LD_EXP 4
6528: PUSH
6529: LD_EXP 5
6533: PUSH
6534: LD_EXP 6
6538: PUSH
6539: LD_EXP 7
6543: PUSH
6544: LD_EXP 8
6548: PUSH
6549: LD_EXP 9
6553: PUSH
6554: LD_EXP 10
6558: PUSH
6559: LD_EXP 11
6563: PUSH
6564: LD_EXP 12
6568: PUSH
6569: LD_EXP 13
6573: PUSH
6574: LD_EXP 14
6578: PUSH
6579: LD_EXP 15
6583: PUSH
6584: LD_EXP 16
6588: PUSH
6589: LD_EXP 17
6593: PUSH
6594: LD_EXP 18
6598: PUSH
6599: LD_EXP 19
6603: PUSH
6604: LD_EXP 25
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: DIFF
6631: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6632: LD_ADDR_VAR 0 2
6636: PUSH
6637: LD_INT 22
6639: PUSH
6640: LD_INT 1
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 26
6649: PUSH
6650: LD_INT 1
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: LD_INT 25
6662: PUSH
6663: LD_INT 1
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 25
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 25
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: PPUSH
6701: CALL_OW 69
6705: PUSH
6706: LD_EXP 1
6710: PUSH
6711: LD_EXP 2
6715: PUSH
6716: LD_EXP 3
6720: PUSH
6721: LD_EXP 4
6725: PUSH
6726: LD_EXP 5
6730: PUSH
6731: LD_EXP 6
6735: PUSH
6736: LD_EXP 7
6740: PUSH
6741: LD_EXP 8
6745: PUSH
6746: LD_EXP 9
6750: PUSH
6751: LD_EXP 10
6755: PUSH
6756: LD_EXP 11
6760: PUSH
6761: LD_EXP 12
6765: PUSH
6766: LD_EXP 13
6770: PUSH
6771: LD_EXP 14
6775: PUSH
6776: LD_EXP 15
6780: PUSH
6781: LD_EXP 16
6785: PUSH
6786: LD_EXP 17
6790: PUSH
6791: LD_EXP 18
6795: PUSH
6796: LD_EXP 19
6800: PUSH
6801: LD_EXP 25
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: DIFF
6828: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6829: LD_EXP 10
6833: PUSH
6834: LD_VAR 0 2
6838: OR
6839: PUSH
6840: LD_EXP 17
6844: PUSH
6845: LD_VAR 0 1
6849: OR
6850: AND
6851: IFFALSE 7070
// begin DialogueOn ;
6853: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6857: LD_EXP 17
6861: PPUSH
6862: CALL_OW 302
6866: IFFALSE 6882
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6868: LD_EXP 17
6872: PPUSH
6873: LD_STRING D3-Sci1-1
6875: PPUSH
6876: CALL_OW 88
6880: GO 6894
// Say ( tmp1 , D3-Sci1-1 ) ;
6882: LD_VAR 0 1
6886: PPUSH
6887: LD_STRING D3-Sci1-1
6889: PPUSH
6890: CALL_OW 88
// if IsOk ( Gary ) then
6894: LD_EXP 10
6898: PPUSH
6899: CALL_OW 302
6903: IFFALSE 6919
// Say ( Gary , D3-Gary-1 ) else
6905: LD_EXP 10
6909: PPUSH
6910: LD_STRING D3-Gary-1
6912: PPUSH
6913: CALL_OW 88
6917: GO 6931
// Say ( tmp2 , D3-Gary-1 ) ;
6919: LD_VAR 0 2
6923: PPUSH
6924: LD_STRING D3-Gary-1
6926: PPUSH
6927: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6931: LD_EXP 17
6935: PPUSH
6936: CALL_OW 302
6940: IFFALSE 6956
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6942: LD_EXP 17
6946: PPUSH
6947: LD_STRING D3-Sci1-2
6949: PPUSH
6950: CALL_OW 88
6954: GO 6968
// Say ( tmp1 , D3-Sci1-2 ) ;
6956: LD_VAR 0 1
6960: PPUSH
6961: LD_STRING D3-Sci1-2
6963: PPUSH
6964: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6968: LD_EXP 1
6972: PPUSH
6973: LD_STRING D3-JMM-2
6975: PPUSH
6976: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6980: LD_EXP 17
6984: PPUSH
6985: CALL_OW 302
6989: IFFALSE 7005
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6991: LD_EXP 17
6995: PPUSH
6996: LD_STRING D3-Sci1-3
6998: PPUSH
6999: CALL_OW 88
7003: GO 7017
// Say ( tmp1 , D3-Sci1-3 ) ;
7005: LD_VAR 0 1
7009: PPUSH
7010: LD_STRING D3-Sci1-3
7012: PPUSH
7013: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7017: LD_EXP 1
7021: PPUSH
7022: LD_STRING D3-JMM-3
7024: PPUSH
7025: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
7029: LD_EXP 17
7033: PPUSH
7034: CALL_OW 302
7038: IFFALSE 7054
// Say ( DeltaDoctor , D3-Sci1-4 ) else
7040: LD_EXP 17
7044: PPUSH
7045: LD_STRING D3-Sci1-4
7047: PPUSH
7048: CALL_OW 88
7052: GO 7066
// Say ( tmp1 , D3-Sci1-4 ) ;
7054: LD_VAR 0 1
7058: PPUSH
7059: LD_STRING D3-Sci1-4
7061: PPUSH
7062: CALL_OW 88
// DialogueOff ;
7066: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
7070: LD_INT 12
7072: PPUSH
7073: LD_INT 1
7075: PPUSH
7076: LD_INT 1
7078: PPUSH
7079: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
7083: LD_INT 32
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 1
7091: PPUSH
7092: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
7096: LD_INT 12
7098: PPUSH
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 1
7104: PPUSH
7105: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
7109: LD_INT 33
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: LD_INT 1
7117: PPUSH
7118: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
7122: LD_STRING M2
7124: PPUSH
7125: CALL_OW 337
// wait ( 3 3$0 ) ;
7129: LD_INT 6300
7131: PPUSH
7132: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7136: LD_INT 35
7138: PPUSH
7139: CALL_OW 67
// until not InBattle ( 1 ) ;
7143: LD_INT 1
7145: PPUSH
7146: CALL_OW 463
7150: NOT
7151: IFFALSE 7136
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
7153: LD_EXP 11
7157: PPUSH
7158: CALL_OW 302
7162: PUSH
7163: LD_EXP 17
7167: PPUSH
7168: CALL_OW 302
7172: AND
7173: IFFALSE 7342
// begin DialogueOn ;
7175: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7179: LD_EXP 11
7183: PPUSH
7184: LD_STRING D3a-Sim-1
7186: PPUSH
7187: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
7191: LD_EXP 17
7195: PPUSH
7196: LD_STRING D3a-Sci1-1
7198: PPUSH
7199: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7203: LD_EXP 11
7207: PPUSH
7208: LD_STRING D3a-Sim-2
7210: PPUSH
7211: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
7215: LD_EXP 17
7219: PPUSH
7220: LD_STRING D3a-Sci1-2
7222: PPUSH
7223: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7227: LD_EXP 11
7231: PPUSH
7232: LD_STRING D3a-Sim-3
7234: PPUSH
7235: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
7239: LD_EXP 17
7243: PPUSH
7244: LD_STRING D3a-Sci1-3
7246: PPUSH
7247: CALL_OW 88
// if IsOK ( Joan ) then
7251: LD_EXP 13
7255: PPUSH
7256: CALL_OW 302
7260: IFFALSE 7276
// Say ( Simms , D3a-Sim-4 ) else
7262: LD_EXP 11
7266: PPUSH
7267: LD_STRING D3a-Sim-4
7269: PPUSH
7270: CALL_OW 88
7274: GO 7288
// Say ( Simms , D3a-Sim-4a ) ;
7276: LD_EXP 11
7280: PPUSH
7281: LD_STRING D3a-Sim-4a
7283: PPUSH
7284: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7288: LD_EXP 17
7292: PPUSH
7293: LD_STRING D3a-Sci1-4
7295: PPUSH
7296: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7300: LD_EXP 11
7304: PPUSH
7305: LD_STRING D3a-Sim-5
7307: PPUSH
7308: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7312: LD_EXP 17
7316: PPUSH
7317: LD_STRING D3a-Sci1-5
7319: PPUSH
7320: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7324: LD_EXP 11
7328: PPUSH
7329: LD_STRING D3a-Sim-6
7331: PPUSH
7332: CALL_OW 88
// DialogueOff ;
7336: CALL_OW 7
// end else
7340: GO 7615
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
7342: LD_ADDR_VAR 0 3
7346: PUSH
7347: LD_INT 22
7349: PUSH
7350: LD_INT 1
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 26
7359: PUSH
7360: LD_INT 1
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 25
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: PPUSH
7382: CALL_OW 69
7386: PUSH
7387: LD_EXP 1
7391: PUSH
7392: LD_EXP 7
7396: PUSH
7397: LD_EXP 6
7401: PUSH
7402: LD_EXP 11
7406: PUSH
7407: LD_EXP 14
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: DIFF
7419: ST_TO_ADDR
// if tmp3 > 0 then
7420: LD_VAR 0 3
7424: PUSH
7425: LD_INT 0
7427: GREATER
7428: IFFALSE 7615
// begin DialogueOn ;
7430: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7434: LD_EXP 11
7438: PPUSH
7439: LD_STRING D3a-Sim-1
7441: PPUSH
7442: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7446: LD_VAR 0 3
7450: PUSH
7451: LD_INT 1
7453: ARRAY
7454: PPUSH
7455: LD_STRING D3a-Sci1-1
7457: PPUSH
7458: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7462: LD_EXP 11
7466: PPUSH
7467: LD_STRING D3a-Sim-2
7469: PPUSH
7470: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7474: LD_VAR 0 3
7478: PUSH
7479: LD_INT 1
7481: ARRAY
7482: PPUSH
7483: LD_STRING D3a-Sci1-2
7485: PPUSH
7486: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7490: LD_EXP 11
7494: PPUSH
7495: LD_STRING D3a-Sim-3
7497: PPUSH
7498: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7502: LD_VAR 0 3
7506: PUSH
7507: LD_INT 1
7509: ARRAY
7510: PPUSH
7511: LD_STRING D3a-Sci1-3
7513: PPUSH
7514: CALL_OW 88
// if IsOK ( Joan ) then
7518: LD_EXP 13
7522: PPUSH
7523: CALL_OW 302
7527: IFFALSE 7543
// Say ( Simms , D3a-Sim-4 ) else
7529: LD_EXP 11
7533: PPUSH
7534: LD_STRING D3a-Sim-4
7536: PPUSH
7537: CALL_OW 88
7541: GO 7555
// Say ( Simms , D3a-Sim-4a ) ;
7543: LD_EXP 11
7547: PPUSH
7548: LD_STRING D3a-Sim-4a
7550: PPUSH
7551: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7555: LD_VAR 0 3
7559: PUSH
7560: LD_INT 1
7562: ARRAY
7563: PPUSH
7564: LD_STRING D3a-Sci1-4
7566: PPUSH
7567: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7571: LD_EXP 11
7575: PPUSH
7576: LD_STRING D3a-Sim-5
7578: PPUSH
7579: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 1
7590: ARRAY
7591: PPUSH
7592: LD_STRING D3a-Sci1-5
7594: PPUSH
7595: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7599: LD_EXP 11
7603: PPUSH
7604: LD_STRING D3a-Sim-6
7606: PPUSH
7607: CALL_OW 88
// DialogueOff ;
7611: CALL_OW 7
// end ; end ; end ;
7615: PPOPN 3
7617: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7618: LD_EXP 30
7622: PUSH
7623: LD_INT 1
7625: EQUAL
7626: IFFALSE 7961
7628: GO 7630
7630: DISABLE
7631: LD_INT 0
7633: PPUSH
// begin wait ( 2 2$00 ) ;
7634: LD_INT 4200
7636: PPUSH
7637: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7641: LD_EXP 18
7645: PPUSH
7646: LD_STRING D4-FSol1-1
7648: PPUSH
7649: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7653: LD_STRING M3
7655: PPUSH
7656: CALL_OW 337
// PrepareRussians ;
7660: CALL 3750 0 0
// spawnRussians := true ;
7664: LD_ADDR_EXP 59
7668: PUSH
7669: LD_INT 1
7671: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: LD_INT 1
7679: PPUSH
7680: LD_INT 100
7682: PPUSH
7683: CALL_OW 12
7687: ST_TO_ADDR
// if difficulty = 1 then
7688: LD_OWVAR 67
7692: PUSH
7693: LD_INT 1
7695: EQUAL
7696: IFFALSE 7779
// begin if rnd > 0 and rnd < 51 then
7698: LD_VAR 0 1
7702: PUSH
7703: LD_INT 0
7705: GREATER
7706: PUSH
7707: LD_VAR 0 1
7711: PUSH
7712: LD_INT 51
7714: LESS
7715: AND
7716: IFFALSE 7725
// BuildRussianBase ( 2 ) ;
7718: LD_INT 2
7720: PPUSH
7721: CALL 12067 0 1
// if rnd > 50 and rnd < 81 then
7725: LD_VAR 0 1
7729: PUSH
7730: LD_INT 50
7732: GREATER
7733: PUSH
7734: LD_VAR 0 1
7738: PUSH
7739: LD_INT 81
7741: LESS
7742: AND
7743: IFFALSE 7752
// BuildRussianBase ( 1 ) ;
7745: LD_INT 1
7747: PPUSH
7748: CALL 12067 0 1
// if rnd > 80 and rnd < 101 then
7752: LD_VAR 0 1
7756: PUSH
7757: LD_INT 80
7759: GREATER
7760: PUSH
7761: LD_VAR 0 1
7765: PUSH
7766: LD_INT 101
7768: LESS
7769: AND
7770: IFFALSE 7779
// BuildRussianBase ( 3 ) ;
7772: LD_INT 3
7774: PPUSH
7775: CALL 12067 0 1
// end ; if difficulty = 2 then
7779: LD_OWVAR 67
7783: PUSH
7784: LD_INT 2
7786: EQUAL
7787: IFFALSE 7870
// begin if rnd > 0 and rnd < 61 then
7789: LD_VAR 0 1
7793: PUSH
7794: LD_INT 0
7796: GREATER
7797: PUSH
7798: LD_VAR 0 1
7802: PUSH
7803: LD_INT 61
7805: LESS
7806: AND
7807: IFFALSE 7816
// BuildRussianBase ( 2 ) ;
7809: LD_INT 2
7811: PPUSH
7812: CALL 12067 0 1
// if rnd > 60 and rnd < 81 then
7816: LD_VAR 0 1
7820: PUSH
7821: LD_INT 60
7823: GREATER
7824: PUSH
7825: LD_VAR 0 1
7829: PUSH
7830: LD_INT 81
7832: LESS
7833: AND
7834: IFFALSE 7843
// BuildRussianBase ( 1 ) ;
7836: LD_INT 1
7838: PPUSH
7839: CALL 12067 0 1
// if rnd > 80 and rnd < 101 then
7843: LD_VAR 0 1
7847: PUSH
7848: LD_INT 80
7850: GREATER
7851: PUSH
7852: LD_VAR 0 1
7856: PUSH
7857: LD_INT 101
7859: LESS
7860: AND
7861: IFFALSE 7870
// BuildRussianBase ( 3 ) ;
7863: LD_INT 3
7865: PPUSH
7866: CALL 12067 0 1
// end ; if difficulty >= 3 then
7870: LD_OWVAR 67
7874: PUSH
7875: LD_INT 3
7877: GREATEREQUAL
7878: IFFALSE 7961
// begin if rnd > 0 and rnd < 71 then
7880: LD_VAR 0 1
7884: PUSH
7885: LD_INT 0
7887: GREATER
7888: PUSH
7889: LD_VAR 0 1
7893: PUSH
7894: LD_INT 71
7896: LESS
7897: AND
7898: IFFALSE 7907
// BuildRussianBase ( 3 ) ;
7900: LD_INT 3
7902: PPUSH
7903: CALL 12067 0 1
// if rnd > 70 and rnd < 81 then
7907: LD_VAR 0 1
7911: PUSH
7912: LD_INT 70
7914: GREATER
7915: PUSH
7916: LD_VAR 0 1
7920: PUSH
7921: LD_INT 81
7923: LESS
7924: AND
7925: IFFALSE 7934
// BuildRussianBase ( 2 ) ;
7927: LD_INT 2
7929: PPUSH
7930: CALL 12067 0 1
// if rnd > 80 and rnd < 101 then
7934: LD_VAR 0 1
7938: PUSH
7939: LD_INT 80
7941: GREATER
7942: PUSH
7943: LD_VAR 0 1
7947: PUSH
7948: LD_INT 101
7950: LESS
7951: AND
7952: IFFALSE 7961
// BuildRussianBase ( 1 ) ;
7954: LD_INT 1
7956: PPUSH
7957: CALL 12067 0 1
// end ; end ;
7961: PPOPN 1
7963: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7964: LD_INT 54
7966: PPUSH
7967: LD_INT 1
7969: PPUSH
7970: CALL_OW 321
7974: PUSH
7975: LD_INT 2
7977: EQUAL
7978: PUSH
7979: LD_INT 21
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 321
7989: PUSH
7990: LD_INT 2
7992: EQUAL
7993: OR
7994: PUSH
7995: LD_INT 22
7997: PPUSH
7998: LD_INT 1
8000: PPUSH
8001: CALL_OW 321
8005: PUSH
8006: LD_INT 2
8008: EQUAL
8009: OR
8010: IFFALSE 8312
8012: GO 8014
8014: DISABLE
8015: LD_INT 0
8017: PPUSH
8018: PPUSH
// begin if IsOk ( DeltaDoctor ) then
8019: LD_EXP 17
8023: PPUSH
8024: CALL_OW 302
8028: IFFALSE 8042
// tmp := DeltaDoctor else
8030: LD_ADDR_VAR 0 2
8034: PUSH
8035: LD_EXP 17
8039: ST_TO_ADDR
8040: GO 8052
// tmp := Denis ;
8042: LD_ADDR_VAR 0 2
8046: PUSH
8047: LD_EXP 12
8051: ST_TO_ADDR
// if tmp then
8052: LD_VAR 0 2
8056: IFFALSE 8150
// begin DialogueOn ;
8058: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
8062: LD_EXP 1
8066: PPUSH
8067: LD_STRING D6-JMM-1
8069: PPUSH
8070: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
8074: LD_VAR 0 2
8078: PPUSH
8079: LD_STRING D6-Sci1-1
8081: PPUSH
8082: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
8086: LD_EXP 1
8090: PPUSH
8091: LD_STRING D6-JMM-2
8093: PPUSH
8094: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: LD_STRING D6-Sci1-2
8105: PPUSH
8106: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
8110: LD_EXP 1
8114: PPUSH
8115: LD_STRING D6-JMM-3
8117: PPUSH
8118: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
8122: LD_VAR 0 2
8126: PPUSH
8127: LD_STRING D6-Sci1-3
8129: PPUSH
8130: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
8134: LD_EXP 1
8138: PPUSH
8139: LD_STRING D6-JMM-4
8141: PPUSH
8142: CALL_OW 88
// DialogueOff ;
8146: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
8150: LD_INT 1050
8152: PPUSH
8153: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
8157: LD_EXP 50
8161: PUSH
8162: LD_INT 0
8164: EQUAL
8165: PUSH
8166: LD_EXP 14
8170: PPUSH
8171: CALL_OW 302
8175: AND
8176: IFFALSE 8234
// begin DialogueOn ;
8178: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
8182: LD_EXP 28
8186: PPUSH
8187: LD_STRING D5-Ar1-1
8189: PPUSH
8190: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
8194: LD_EXP 27
8198: PPUSH
8199: LD_STRING D5-Diet-1
8201: PPUSH
8202: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
8206: LD_EXP 28
8210: PPUSH
8211: LD_STRING D5-Ar1-2
8213: PPUSH
8214: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
8218: LD_EXP 27
8222: PPUSH
8223: LD_STRING D5-Diet-2
8225: PPUSH
8226: CALL_OW 88
// DialogueOff ;
8230: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
8234: LD_INT 35
8236: PPUSH
8237: CALL_OW 67
// until tick > 10 10$00 ;
8241: LD_OWVAR 1
8245: PUSH
8246: LD_INT 21000
8248: GREATER
8249: IFFALSE 8234
// wait ( 1 1$30 ) ;
8251: LD_INT 3150
8253: PPUSH
8254: CALL_OW 67
// if arabianTrait = 0 then
8258: LD_EXP 50
8262: PUSH
8263: LD_INT 0
8265: EQUAL
8266: IFFALSE 8312
// begin arabianTrait = 1 ;
8268: LD_ADDR_EXP 50
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
8276: LD_INT 2
8278: PPUSH
8279: LD_INT 3
8281: PPUSH
8282: LD_INT 1
8284: PPUSH
8285: LD_INT 1
8287: PPUSH
8288: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
8292: LD_INT 2
8294: PPUSH
8295: LD_INT 6
8297: PPUSH
8298: LD_INT 1
8300: PPUSH
8301: LD_INT 1
8303: PPUSH
8304: CALL_OW 80
// PrepareArabianTrait ;
8308: CALL 8315 0 0
// end ; end ;
8312: PPOPN 2
8314: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8315: LD_INT 0
8317: PPUSH
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
8322: PPUSH
8323: PPUSH
8324: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8325: LD_ADDR_VAR 0 6
8329: PUSH
8330: LD_INT 22
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 2
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 4
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 2
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 25
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PPUSH
8383: CALL_OW 69
8387: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8388: LD_ADDR_VAR 0 5
8392: PUSH
8393: LD_INT 22
8395: PUSH
8396: LD_INT 2
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PUSH
8403: LD_INT 21
8405: PUSH
8406: LD_INT 1
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: LD_INT 25
8418: PUSH
8419: LD_INT 1
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 25
8428: PUSH
8429: LD_INT 8
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 25
8438: PUSH
8439: LD_INT 15
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: PUSH
8462: LD_EXP 27
8466: PUSH
8467: EMPTY
8468: LIST
8469: DIFF
8470: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8471: LD_ADDR_VAR 0 7
8475: PUSH
8476: LD_INT 22
8478: PUSH
8479: LD_INT 2
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: LD_INT 30
8488: PUSH
8489: LD_INT 5
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PPUSH
8500: CALL_OW 69
8504: PUSH
8505: LD_INT 1
8507: ARRAY
8508: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8509: LD_VAR 0 6
8513: PPUSH
8514: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8518: LD_VAR 0 5
8522: PPUSH
8523: CALL_OW 122
// wait ( 0 0$3 ) ;
8527: LD_INT 105
8529: PPUSH
8530: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8534: LD_VAR 0 6
8538: PPUSH
8539: LD_VAR 0 7
8543: PPUSH
8544: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8548: LD_VAR 0 6
8552: PPUSH
8553: LD_INT 1
8555: PUSH
8556: LD_INT 8
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: LD_INT 1
8565: PPUSH
8566: LD_INT 2
8568: PPUSH
8569: CALL_OW 12
8573: ARRAY
8574: PPUSH
8575: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8579: LD_VAR 0 6
8583: PPUSH
8584: CALL_OW 182
// wait ( 0 0$1 ) ;
8588: LD_INT 35
8590: PPUSH
8591: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8595: LD_INT 76
8597: PPUSH
8598: LD_INT 19
8600: PPUSH
8601: CALL_OW 84
// DialogueOn ;
8605: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8609: LD_INT 22
8611: PUSH
8612: LD_INT 1
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 26
8621: PUSH
8622: LD_INT 1
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 2
8631: PUSH
8632: LD_INT 25
8634: PUSH
8635: LD_INT 1
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 25
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 25
8654: PUSH
8655: LD_INT 3
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 25
8664: PUSH
8665: LD_INT 4
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 25
8674: PUSH
8675: LD_INT 5
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL_OW 69
8699: PPUSH
8700: LD_STRING D8-Sol1-1
8702: PPUSH
8703: LD_STRING D8-Sol1-1
8705: PPUSH
8706: CALL 11409 0 3
// if IsOK ( DeltaDoctor ) then
8710: LD_EXP 17
8714: PPUSH
8715: CALL_OW 302
8719: IFFALSE 8735
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8721: LD_EXP 17
8725: PPUSH
8726: LD_STRING D8-Sci1-1
8728: PPUSH
8729: CALL_OW 88
8733: GO 8836
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8735: LD_INT 22
8737: PUSH
8738: LD_INT 1
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 26
8747: PUSH
8748: LD_INT 1
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 2
8757: PUSH
8758: LD_INT 25
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 25
8770: PUSH
8771: LD_INT 2
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 25
8780: PUSH
8781: LD_INT 3
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 25
8790: PUSH
8791: LD_INT 4
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 25
8800: PUSH
8801: LD_INT 5
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 69
8825: PPUSH
8826: LD_STRING D8-Sol1-1
8828: PPUSH
8829: LD_STRING D8-Sol1-1
8831: PPUSH
8832: CALL 11409 0 3
// Say ( JMM , D8-JMM-1 ) ;
8836: LD_EXP 1
8840: PPUSH
8841: LD_STRING D8-JMM-1
8843: PPUSH
8844: CALL_OW 88
// DialogueOff ;
8848: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8852: LD_INT 2
8854: PPUSH
8855: LD_INT 2
8857: PPUSH
8858: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8862: LD_INT 1
8864: PPUSH
8865: LD_INT 2
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: LD_INT 1
8873: PPUSH
8874: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8878: LD_INT 3
8880: PPUSH
8881: LD_INT 2
8883: PPUSH
8884: LD_INT 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8894: LD_STRING M4
8896: PPUSH
8897: CALL_OW 337
// wait ( 0 0$1 ) ;
8901: LD_INT 35
8903: PPUSH
8904: CALL_OW 67
// if IsLive ( Khatam ) then
8908: LD_EXP 14
8912: PPUSH
8913: CALL_OW 300
8917: IFFALSE 8931
// DoNotAttack ( 2 , Khatam ) ;
8919: LD_INT 2
8921: PPUSH
8922: LD_EXP 14
8926: PPUSH
8927: CALL_OW 471
// wait ( 0 0$1 ) ;
8931: LD_INT 35
8933: PPUSH
8934: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8938: LD_ADDR_VAR 0 8
8942: PUSH
8943: LD_INT 22
8945: PUSH
8946: LD_INT 1
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 21
8955: PUSH
8956: LD_INT 3
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 69
8971: PPUSH
8972: LD_VAR 0 5
8976: PUSH
8977: LD_INT 1
8979: ARRAY
8980: PPUSH
8981: CALL_OW 74
8985: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8986: LD_VAR 0 5
8990: PPUSH
8991: LD_INT 25
8993: PUSH
8994: LD_INT 1
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PPUSH
9001: CALL_OW 72
9005: PUSH
9006: LD_INT 1
9008: ARRAY
9009: PPUSH
9010: LD_VAR 0 8
9014: PPUSH
9015: CALL_OW 250
9019: PPUSH
9020: LD_VAR 0 8
9024: PPUSH
9025: CALL_OW 251
9029: PPUSH
9030: LD_VAR 0 8
9034: PPUSH
9035: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
9039: LD_VAR 0 5
9043: PPUSH
9044: LD_INT 84
9046: PPUSH
9047: LD_INT 22
9049: PPUSH
9050: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
9054: LD_VAR 0 5
9058: PPUSH
9059: LD_INT 82
9061: PPUSH
9062: LD_INT 5
9064: PPUSH
9065: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
9069: LD_VAR 0 5
9073: PPUSH
9074: LD_INT 95
9076: PPUSH
9077: LD_INT 12
9079: PPUSH
9080: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
9084: LD_VAR 0 5
9088: PPUSH
9089: LD_INT 102
9091: PPUSH
9092: LD_INT 11
9094: PPUSH
9095: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
9099: LD_VAR 0 5
9103: PPUSH
9104: LD_INT 116
9106: PPUSH
9107: LD_INT 15
9109: PPUSH
9110: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
9114: LD_VAR 0 5
9118: PPUSH
9119: LD_INT 140
9121: PPUSH
9122: LD_INT 25
9124: PPUSH
9125: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
9129: LD_VAR 0 5
9133: PPUSH
9134: LD_INT 160
9136: PPUSH
9137: LD_INT 56
9139: PPUSH
9140: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
9144: LD_ADDR_VAR 0 5
9148: PUSH
9149: LD_INT 22
9151: PUSH
9152: LD_INT 2
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 21
9161: PUSH
9162: LD_INT 1
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 2
9171: PUSH
9172: LD_INT 25
9174: PUSH
9175: LD_INT 1
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 25
9184: PUSH
9185: LD_INT 8
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PUSH
9192: LD_INT 25
9194: PUSH
9195: LD_INT 15
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: PPUSH
9213: CALL_OW 69
9217: PUSH
9218: LD_EXP 27
9222: PUSH
9223: EMPTY
9224: LIST
9225: DIFF
9226: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
9227: LD_ADDR_VAR 0 6
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 21
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 2
9254: PUSH
9255: LD_INT 25
9257: PUSH
9258: LD_INT 2
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 25
9267: PUSH
9268: LD_INT 3
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 25
9277: PUSH
9278: LD_INT 4
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: LD_INT 25
9287: PUSH
9288: LD_INT 12
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 25
9297: PUSH
9298: LD_INT 16
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: PPUSH
9318: CALL_OW 69
9322: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9323: LD_ADDR_VAR 0 6
9327: PUSH
9328: LD_VAR 0 6
9332: PUSH
9333: LD_EXP 27
9337: ADD
9338: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9339: LD_VAR 0 5
9343: PPUSH
9344: LD_INT 189
9346: PPUSH
9347: LD_INT 79
9349: PPUSH
9350: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9354: LD_VAR 0 5
9358: PPUSH
9359: LD_INT 25
9361: PUSH
9362: LD_INT 15
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PPUSH
9369: CALL_OW 72
9373: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9375: LD_VAR 0 5
9379: PPUSH
9380: LD_INT 25
9382: PUSH
9383: LD_INT 15
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 72
9394: PUSH
9395: LD_INT 1
9397: ARRAY
9398: PPUSH
9399: LD_INT 84
9401: PPUSH
9402: LD_INT 21
9404: PPUSH
9405: CALL_OW 428
9409: PPUSH
9410: CALL_OW 120
// wait ( 0 0$4 ) ;
9414: LD_INT 140
9416: PPUSH
9417: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9421: LD_VAR 0 6
9425: PPUSH
9426: LD_INT 88
9428: PPUSH
9429: LD_INT 8
9431: PPUSH
9432: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9436: LD_VAR 0 6
9440: PPUSH
9441: LD_INT 102
9443: PPUSH
9444: LD_INT 10
9446: PPUSH
9447: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9451: LD_VAR 0 6
9455: PPUSH
9456: LD_INT 116
9458: PPUSH
9459: LD_INT 15
9461: PPUSH
9462: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9466: LD_VAR 0 6
9470: PPUSH
9471: LD_INT 140
9473: PPUSH
9474: LD_INT 25
9476: PPUSH
9477: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9481: LD_VAR 0 6
9485: PPUSH
9486: LD_INT 160
9488: PPUSH
9489: LD_INT 56
9491: PPUSH
9492: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 189
9503: PPUSH
9504: LD_INT 79
9506: PPUSH
9507: CALL_OW 171
// arabianAttackersAI = 1 ;
9511: LD_ADDR_EXP 47
9515: PUSH
9516: LD_INT 1
9518: ST_TO_ADDR
// if IsOk ( Gary ) then
9519: LD_EXP 10
9523: PPUSH
9524: CALL_OW 302
9528: IFFALSE 9542
// Say ( Gary , D8a-Gary-1 ) ;
9530: LD_EXP 10
9534: PPUSH
9535: LD_STRING D8a-Gary-1
9537: PPUSH
9538: CALL_OW 88
// wait ( 0 0$5 ) ;
9542: LD_INT 175
9544: PPUSH
9545: CALL_OW 67
// if IsOK ( Khatam ) then
9549: LD_EXP 14
9553: PPUSH
9554: CALL_OW 302
9558: IFFALSE 10094
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9560: LD_ADDR_VAR 0 3
9564: PUSH
9565: LD_INT 22
9567: PUSH
9568: LD_INT 1
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: LD_INT 25
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 25
9590: PUSH
9591: LD_INT 2
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 25
9600: PUSH
9601: LD_INT 3
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 25
9610: PUSH
9611: LD_INT 4
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 25
9620: PUSH
9621: LD_INT 5
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 25
9630: PUSH
9631: LD_INT 8
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 69
9655: PUSH
9656: LD_EXP 1
9660: PUSH
9661: LD_EXP 2
9665: PUSH
9666: LD_EXP 3
9670: PUSH
9671: LD_EXP 4
9675: PUSH
9676: LD_EXP 5
9680: PUSH
9681: LD_EXP 6
9685: PUSH
9686: LD_EXP 7
9690: PUSH
9691: LD_EXP 8
9695: PUSH
9696: LD_EXP 9
9700: PUSH
9701: LD_EXP 10
9705: PUSH
9706: LD_EXP 11
9710: PUSH
9711: LD_EXP 12
9715: PUSH
9716: LD_EXP 13
9720: PUSH
9721: LD_EXP 14
9725: PUSH
9726: LD_EXP 15
9730: PUSH
9731: LD_EXP 16
9735: PUSH
9736: LD_EXP 17
9740: PUSH
9741: LD_EXP 19
9745: PUSH
9746: LD_EXP 25
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: DIFF
9772: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9773: LD_EXP 14
9777: PPUSH
9778: LD_INT 8
9780: PPUSH
9781: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9785: LD_EXP 14
9789: PPUSH
9790: CALL_OW 122
// wait ( 0 0$1 ) ;
9794: LD_INT 35
9796: PPUSH
9797: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9801: LD_EXP 14
9805: PPUSH
9806: CALL_OW 121
// wait ( 0 0$1 ) ;
9810: LD_INT 35
9812: PPUSH
9813: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9817: LD_EXP 14
9821: PPUSH
9822: LD_INT 7
9824: PPUSH
9825: CALL_OW 113
// if not tmp then
9829: LD_VAR 0 3
9833: NOT
9834: IFFALSE 9838
// exit ;
9836: GO 10094
// DialogueOn ;
9838: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9842: LD_VAR 0 3
9846: PUSH
9847: LD_INT 1
9849: ARRAY
9850: PPUSH
9851: CALL_OW 258
9855: PUSH
9856: LD_INT 1
9858: EQUAL
9859: IFFALSE 9879
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9861: LD_VAR 0 3
9865: PUSH
9866: LD_INT 1
9868: ARRAY
9869: PPUSH
9870: LD_STRING D8b-Sol1-1
9872: PPUSH
9873: CALL_OW 88
9877: GO 9895
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9879: LD_VAR 0 3
9883: PUSH
9884: LD_INT 1
9886: ARRAY
9887: PPUSH
9888: LD_STRING D8b-FSol1-1
9890: PPUSH
9891: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9895: LD_EXP 14
9899: PPUSH
9900: LD_STRING D8b-Khat-1
9902: PPUSH
9903: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9907: LD_VAR 0 3
9911: PUSH
9912: LD_INT 1
9914: ARRAY
9915: PPUSH
9916: CALL_OW 258
9920: PUSH
9921: LD_INT 1
9923: EQUAL
9924: IFFALSE 9944
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9926: LD_VAR 0 3
9930: PUSH
9931: LD_INT 1
9933: ARRAY
9934: PPUSH
9935: LD_STRING D8b-Sol1-2
9937: PPUSH
9938: CALL_OW 88
9942: GO 9960
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9944: LD_VAR 0 3
9948: PUSH
9949: LD_INT 1
9951: ARRAY
9952: PPUSH
9953: LD_STRING D8b-FSol1-2
9955: PPUSH
9956: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9960: LD_EXP 14
9964: PPUSH
9965: LD_STRING D8b-Khat-2
9967: PPUSH
9968: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9972: LD_VAR 0 3
9976: PUSH
9977: LD_INT 1
9979: ARRAY
9980: PPUSH
9981: CALL_OW 258
9985: PUSH
9986: LD_INT 1
9988: EQUAL
9989: IFFALSE 10009
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9991: LD_VAR 0 3
9995: PUSH
9996: LD_INT 1
9998: ARRAY
9999: PPUSH
10000: LD_STRING D8b-Sol1-3
10002: PPUSH
10003: CALL_OW 88
10007: GO 10025
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
10009: LD_VAR 0 3
10013: PUSH
10014: LD_INT 1
10016: ARRAY
10017: PPUSH
10018: LD_STRING D8b-FSol1-3
10020: PPUSH
10021: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
10025: LD_EXP 14
10029: PPUSH
10030: LD_STRING D8b-Khat-3
10032: PPUSH
10033: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
10037: LD_VAR 0 3
10041: PUSH
10042: LD_INT 1
10044: ARRAY
10045: PPUSH
10046: CALL_OW 258
10050: PUSH
10051: LD_INT 1
10053: EQUAL
10054: IFFALSE 10074
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
10056: LD_VAR 0 3
10060: PUSH
10061: LD_INT 1
10063: ARRAY
10064: PPUSH
10065: LD_STRING D8b-Sol1-4
10067: PPUSH
10068: CALL_OW 88
10072: GO 10090
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: PPUSH
10083: LD_STRING D8b-FSol1-4
10085: PPUSH
10086: CALL_OW 88
// DialogueOff ;
10090: CALL_OW 7
// end ; end ;
10094: LD_VAR 0 1
10098: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
10099: LD_INT 7
10101: PPUSH
10102: LD_INT 22
10104: PUSH
10105: LD_INT 2
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PPUSH
10112: CALL_OW 70
10116: PUSH
10117: LD_INT 0
10119: GREATER
10120: PUSH
10121: LD_EXP 14
10125: PPUSH
10126: LD_INT 7
10128: PPUSH
10129: CALL_OW 308
10133: OR
10134: IFFALSE 10341
10136: GO 10138
10138: DISABLE
10139: LD_INT 0
10141: PPUSH
// begin enable ;
10142: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
10143: LD_ADDR_VAR 0 1
10147: PUSH
10148: LD_INT 7
10150: PPUSH
10151: LD_INT 22
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PPUSH
10161: CALL_OW 70
10165: PUSH
10166: FOR_IN
10167: IFFALSE 10308
// begin if GetClass ( i ) = 4 then
10169: LD_VAR 0 1
10173: PPUSH
10174: CALL_OW 257
10178: PUSH
10179: LD_INT 4
10181: EQUAL
10182: IFFALSE 10194
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
10184: LD_INT 1
10186: PPUSH
10187: LD_STRING 10_ScientistsEscape_1
10189: PPUSH
10190: CALL_OW 39
// if i = Dietrich then
10194: LD_VAR 0 1
10198: PUSH
10199: LD_EXP 27
10203: EQUAL
10204: IFFALSE 10214
// GensherStatus = 1 ;
10206: LD_ADDR_EXP 53
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
10214: LD_VAR 0 1
10218: PPUSH
10219: CALL_OW 257
10223: PUSH
10224: LD_INT 1
10226: EQUAL
10227: PUSH
10228: LD_VAR 0 1
10232: PPUSH
10233: CALL_OW 257
10237: PUSH
10238: LD_INT 2
10240: EQUAL
10241: OR
10242: PUSH
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 257
10252: PUSH
10253: LD_INT 3
10255: EQUAL
10256: OR
10257: PUSH
10258: LD_VAR 0 1
10262: PPUSH
10263: CALL_OW 257
10267: PUSH
10268: LD_INT 4
10270: EQUAL
10271: OR
10272: PUSH
10273: LD_VAR 0 1
10277: PPUSH
10278: CALL_OW 257
10282: PUSH
10283: LD_INT 8
10285: EQUAL
10286: OR
10287: IFFALSE 10297
// arabianEscape = 1 ;
10289: LD_ADDR_EXP 48
10293: PUSH
10294: LD_INT 1
10296: ST_TO_ADDR
// RemoveUnit ( i ) ;
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 64
// end ;
10306: GO 10166
10308: POP
10309: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10310: LD_EXP 14
10314: PPUSH
10315: LD_INT 7
10317: PPUSH
10318: CALL_OW 308
10322: IFFALSE 10341
// begin KhatamStatus = 1 ;
10324: LD_ADDR_EXP 54
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10332: LD_EXP 14
10336: PPUSH
10337: CALL_OW 64
// end ; end ;
10341: PPOPN 1
10343: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10344: LD_INT 22
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 21
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: CALL_OW 69
10372: PUSH
10373: LD_INT 0
10375: EQUAL
10376: PUSH
10377: LD_INT 22
10379: PUSH
10380: LD_INT 4
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 21
10389: PUSH
10390: LD_INT 1
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PPUSH
10401: CALL_OW 69
10405: PUSH
10406: LD_INT 0
10408: EQUAL
10409: AND
10410: IFFALSE 10423
10412: GO 10414
10414: DISABLE
// arabianDefeated = 1 ;
10415: LD_ADDR_EXP 49
10419: PUSH
10420: LD_INT 1
10422: ST_TO_ADDR
10423: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10424: LD_INT 54
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 321
10434: PUSH
10435: LD_INT 2
10437: EQUAL
10438: PUSH
10439: LD_INT 55
10441: PPUSH
10442: LD_INT 1
10444: PPUSH
10445: CALL_OW 321
10449: PUSH
10450: LD_INT 2
10452: EQUAL
10453: AND
10454: PUSH
10455: LD_INT 21
10457: PPUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 321
10465: PUSH
10466: LD_INT 2
10468: EQUAL
10469: AND
10470: PUSH
10471: LD_INT 22
10473: PPUSH
10474: LD_INT 1
10476: PPUSH
10477: CALL_OW 321
10481: PUSH
10482: LD_INT 2
10484: EQUAL
10485: AND
10486: PUSH
10487: LD_INT 12
10489: PPUSH
10490: LD_INT 1
10492: PPUSH
10493: CALL_OW 321
10497: PUSH
10498: LD_INT 2
10500: EQUAL
10501: AND
10502: PUSH
10503: LD_INT 32
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: CALL_OW 321
10513: PUSH
10514: LD_INT 2
10516: EQUAL
10517: AND
10518: PUSH
10519: LD_EXP 64
10523: PUSH
10524: LD_INT 0
10526: EQUAL
10527: AND
10528: PUSH
10529: LD_EXP 50
10533: PUSH
10534: LD_INT 0
10536: EQUAL
10537: AND
10538: PUSH
10539: LD_OWVAR 1
10543: PUSH
10544: LD_INT 31500
10546: GREATEREQUAL
10547: AND
10548: IFFALSE 10565
10550: GO 10552
10552: DISABLE
// begin arabianTrait = 1 ;
10553: LD_ADDR_EXP 50
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// PrepareArabianTrait ;
10561: CALL 8315 0 0
// end ;
10565: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10566: LD_EXP 30
10570: PUSH
10571: LD_STRING 02_mikhailStatus_1
10573: PPUSH
10574: LD_INT 0
10576: PPUSH
10577: CALL_OW 30
10581: PUSH
10582: LD_INT 1
10584: EQUAL
10585: AND
10586: PUSH
10587: LD_INT 22
10589: PUSH
10590: LD_INT 5
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: PUSH
10602: LD_INT 0
10604: EQUAL
10605: AND
10606: PUSH
10607: LD_INT 22
10609: PUSH
10610: LD_INT 2
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 1
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: PUSH
10636: LD_INT 0
10638: EQUAL
10639: PUSH
10640: LD_EXP 50
10644: PUSH
10645: LD_INT 0
10647: EQUAL
10648: OR
10649: AND
10650: IFFALSE 10659
10652: GO 10654
10654: DISABLE
// PrepareCornell ;
10655: CALL 3497 0 0
10659: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10660: LD_INT 22
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: PPUSH
10675: LD_EXP 19
10679: PPUSH
10680: CALL_OW 74
10684: PPUSH
10685: LD_EXP 19
10689: PPUSH
10690: CALL_OW 296
10694: PUSH
10695: LD_INT 9
10697: LESS
10698: IFFALSE 10919
10700: GO 10702
10702: DISABLE
// begin InGameOn ;
10703: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10707: LD_EXP 19
10711: PPUSH
10712: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10716: LD_EXP 19
10720: PPUSH
10721: LD_STRING D7-Corn-1
10723: PPUSH
10724: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10728: LD_INT 22
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 2
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 25
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 4
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 5
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PPUSH
10803: CALL_OW 69
10807: PPUSH
10808: LD_STRING D7-Sol1-1
10810: PPUSH
10811: LD_STRING D7-FSol1-1
10813: PPUSH
10814: CALL 11409 0 3
// CenterNowOnUnits ( Cornell ) ;
10818: LD_EXP 19
10822: PPUSH
10823: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10827: LD_EXP 19
10831: PPUSH
10832: LD_STRING D7-Corn-2
10834: PPUSH
10835: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10839: LD_EXP 1
10843: PPUSH
10844: LD_STRING D7-JMM-2
10846: PPUSH
10847: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10851: LD_EXP 19
10855: PPUSH
10856: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10860: LD_EXP 19
10864: PPUSH
10865: LD_STRING D7-Corn-3
10867: PPUSH
10868: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10872: LD_EXP 19
10876: PPUSH
10877: LD_INT 250
10879: PPUSH
10880: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10884: LD_EXP 19
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: CALL_OW 235
// wait ( 0 0$1 ) ;
10896: LD_INT 35
10898: PPUSH
10899: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10903: LD_EXP 1
10907: PPUSH
10908: LD_STRING D7-JMM-3
10910: PPUSH
10911: CALL_OW 88
// InGameOff ;
10915: CALL_OW 9
// end ;
10919: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10920: LD_EXP 19
10924: PPUSH
10925: CALL_OW 255
10929: PUSH
10930: LD_INT 1
10932: EQUAL
10933: PUSH
10934: LD_EXP 19
10938: PPUSH
10939: CALL_OW 256
10943: PUSH
10944: LD_INT 350
10946: GREATER
10947: AND
10948: IFFALSE 11141
10950: GO 10952
10952: DISABLE
// begin DialogueOn ;
10953: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10957: LD_EXP 1
10961: PPUSH
10962: LD_STRING D7a-JMM-1
10964: PPUSH
10965: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10969: LD_EXP 19
10973: PPUSH
10974: LD_STRING D7a-Corn-1
10976: PPUSH
10977: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10981: LD_EXP 1
10985: PPUSH
10986: LD_STRING D7a-JMM-2
10988: PPUSH
10989: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10993: LD_EXP 19
10997: PPUSH
10998: LD_STRING D7a-Corn-2
11000: PPUSH
11001: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
11005: LD_EXP 1
11009: PPUSH
11010: LD_STRING D7a-JMM-3
11012: PPUSH
11013: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
11017: LD_EXP 19
11021: PPUSH
11022: LD_STRING D7a-Corn-3
11024: PPUSH
11025: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
11029: LD_EXP 1
11033: PPUSH
11034: LD_STRING D7a-JMM-4
11036: PPUSH
11037: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
11041: LD_EXP 19
11045: PPUSH
11046: LD_STRING D7a-Corn-4
11048: PPUSH
11049: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
11053: LD_EXP 1
11057: PPUSH
11058: LD_STRING D7a-JMM-5
11060: PPUSH
11061: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
11065: LD_EXP 19
11069: PPUSH
11070: LD_STRING D7a-Corn-5
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
11077: LD_EXP 1
11081: PPUSH
11082: LD_STRING D7a-JMM-6
11084: PPUSH
11085: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
11089: LD_EXP 19
11093: PPUSH
11094: LD_STRING D7a-Corn-6
11096: PPUSH
11097: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
11101: LD_EXP 1
11105: PPUSH
11106: LD_STRING D7a-JMM-7
11108: PPUSH
11109: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
11113: LD_EXP 19
11117: PPUSH
11118: LD_STRING D7a-Corn-7
11120: PPUSH
11121: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
11125: LD_EXP 1
11129: PPUSH
11130: LD_STRING D7a-JMM-8
11132: PPUSH
11133: CALL_OW 88
// DialogueOff ;
11137: CALL_OW 7
// end ;
11141: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
11142: LD_EXP 62
11146: PUSH
11147: LD_EXP 1
11151: PPUSH
11152: CALL_OW 302
11156: PUSH
11157: LD_EXP 5
11161: PPUSH
11162: CALL_OW 302
11166: OR
11167: AND
11168: IFFALSE 11258
11170: GO 11172
11172: DISABLE
// begin Wait ( 0 0$2 ) ;
11173: LD_INT 70
11175: PPUSH
11176: CALL_OW 67
// DialogueOn ;
11180: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
11184: LD_EXP 62
11188: PUSH
11189: LD_INT 1
11191: ARRAY
11192: PPUSH
11193: LD_EXP 62
11197: PUSH
11198: LD_INT 2
11200: ARRAY
11201: PPUSH
11202: CALL_OW 86
// if IsOk ( Cyrus ) then
11206: LD_EXP 5
11210: PPUSH
11211: CALL_OW 302
11215: IFFALSE 11231
// Say ( Cyrus , D10-Cyrus-1 ) else
11217: LD_EXP 5
11221: PPUSH
11222: LD_STRING D10-Cyrus-1
11224: PPUSH
11225: CALL_OW 88
11229: GO 11254
// if IsOk ( JMM ) then
11231: LD_EXP 1
11235: PPUSH
11236: CALL_OW 302
11240: IFFALSE 11254
// Say ( JMM , D10-JMM-1 ) ;
11242: LD_EXP 1
11246: PPUSH
11247: LD_STRING D10-JMM-1
11249: PPUSH
11250: CALL_OW 88
// DialogueOff ;
11254: CALL_OW 7
// end ;
11258: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
11259: LD_INT 12
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: CALL_OW 321
11269: PUSH
11270: LD_INT 2
11272: EQUAL
11273: IFFALSE 11285
11275: GO 11277
11277: DISABLE
// ChangeMissionObjectives ( M2b ) ;
11278: LD_STRING M2b
11280: PPUSH
11281: CALL_OW 337
11285: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
11286: LD_INT 32
11288: PPUSH
11289: LD_INT 1
11291: PPUSH
11292: CALL_OW 321
11296: PUSH
11297: LD_INT 2
11299: EQUAL
11300: IFFALSE 11312
11302: GO 11304
11304: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11305: LD_STRING M2c
11307: PPUSH
11308: CALL_OW 337
11312: END
// every 0 0$1 trigger arabianDefeated = 1 do
11313: LD_EXP 49
11317: PUSH
11318: LD_INT 1
11320: EQUAL
11321: IFFALSE 11333
11323: GO 11325
11325: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11326: LD_STRING M4a
11328: PPUSH
11329: CALL_OW 337
11333: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11334: LD_INT 54
11336: PPUSH
11337: LD_INT 1
11339: PPUSH
11340: CALL_OW 321
11344: PUSH
11345: LD_INT 2
11347: EQUAL
11348: PUSH
11349: LD_INT 55
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: CALL_OW 321
11359: PUSH
11360: LD_INT 2
11362: EQUAL
11363: AND
11364: PUSH
11365: LD_INT 21
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: CALL_OW 321
11375: PUSH
11376: LD_INT 2
11378: EQUAL
11379: AND
11380: PUSH
11381: LD_INT 22
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL_OW 321
11391: PUSH
11392: LD_INT 2
11394: EQUAL
11395: AND
11396: IFFALSE 11408
11398: GO 11400
11400: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11401: LD_STRING M2a
11403: PPUSH
11404: CALL_OW 337
11408: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11409: LD_INT 0
11411: PPUSH
11412: PPUSH
11413: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11414: LD_ADDR_VAR 0 1
11418: PUSH
11419: LD_VAR 0 1
11423: PUSH
11424: LD_EXP 1
11428: PUSH
11429: LD_EXP 2
11433: PUSH
11434: LD_EXP 3
11438: PUSH
11439: LD_EXP 4
11443: PUSH
11444: LD_EXP 5
11448: PUSH
11449: LD_EXP 6
11453: PUSH
11454: LD_EXP 7
11458: PUSH
11459: LD_EXP 8
11463: PUSH
11464: LD_EXP 9
11468: PUSH
11469: LD_EXP 10
11473: PUSH
11474: LD_EXP 11
11478: PUSH
11479: LD_EXP 12
11483: PUSH
11484: LD_EXP 13
11488: PUSH
11489: LD_EXP 14
11493: PUSH
11494: LD_EXP 15
11498: PUSH
11499: LD_EXP 16
11503: PUSH
11504: LD_EXP 17
11508: PUSH
11509: LD_EXP 18
11513: PUSH
11514: LD_EXP 19
11518: PUSH
11519: LD_EXP 25
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: DIFF
11546: ST_TO_ADDR
// if not characters then
11547: LD_VAR 0 1
11551: NOT
11552: IFFALSE 11556
// exit ;
11554: GO 11702
// rnd = rand ( 1 , characters ) ;
11556: LD_ADDR_VAR 0 6
11560: PUSH
11561: LD_INT 1
11563: PPUSH
11564: LD_VAR 0 1
11568: PPUSH
11569: CALL_OW 12
11573: ST_TO_ADDR
// for i = 1 to characters do
11574: LD_ADDR_VAR 0 5
11578: PUSH
11579: DOUBLE
11580: LD_INT 1
11582: DEC
11583: ST_TO_ADDR
11584: LD_VAR 0 1
11588: PUSH
11589: FOR_TO
11590: IFFALSE 11700
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11592: LD_VAR 0 5
11596: PUSH
11597: LD_VAR 0 6
11601: EQUAL
11602: PUSH
11603: LD_VAR 0 1
11607: PUSH
11608: LD_VAR 0 5
11612: ARRAY
11613: PPUSH
11614: CALL_OW 258
11618: PUSH
11619: LD_INT 1
11621: EQUAL
11622: AND
11623: IFFALSE 11645
// Say ( characters [ i ] , dialogMID ) ;
11625: LD_VAR 0 1
11629: PUSH
11630: LD_VAR 0 5
11634: ARRAY
11635: PPUSH
11636: LD_VAR 0 2
11640: PPUSH
11641: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11645: LD_VAR 0 5
11649: PUSH
11650: LD_VAR 0 6
11654: EQUAL
11655: PUSH
11656: LD_VAR 0 1
11660: PUSH
11661: LD_VAR 0 5
11665: ARRAY
11666: PPUSH
11667: CALL_OW 258
11671: PUSH
11672: LD_INT 2
11674: EQUAL
11675: AND
11676: IFFALSE 11698
// Say ( characters [ i ] , dialogFID ) ;
11678: LD_VAR 0 1
11682: PUSH
11683: LD_VAR 0 5
11687: ARRAY
11688: PPUSH
11689: LD_VAR 0 3
11693: PPUSH
11694: CALL_OW 88
// end ;
11698: GO 11589
11700: POP
11701: POP
// end ;
11702: LD_VAR 0 4
11706: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11707: LD_INT 0
11709: PPUSH
11710: PPUSH
// for i in charactersList do
11711: LD_ADDR_VAR 0 4
11715: PUSH
11716: LD_VAR 0 1
11720: PUSH
11721: FOR_IN
11722: IFFALSE 11740
// SaveCharacters ( i , ident ) ;
11724: LD_VAR 0 4
11728: PPUSH
11729: LD_VAR 0 2
11733: PPUSH
11734: CALL_OW 38
11738: GO 11721
11740: POP
11741: POP
// end ;
11742: LD_VAR 0 3
11746: RET
// export function PrepareDifficulty ; begin
11747: LD_INT 0
11749: PPUSH
// if difficulty = 1 then
11750: LD_OWVAR 67
11754: PUSH
11755: LD_INT 1
11757: EQUAL
11758: IFFALSE 11802
// begin RuSolMinLevel = 3 ;
11760: LD_ADDR_EXP 37
11764: PUSH
11765: LD_INT 3
11767: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11768: LD_ADDR_EXP 38
11772: PUSH
11773: LD_INT 5
11775: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11776: LD_INT 51
11778: PPUSH
11779: LD_INT 6
11781: PPUSH
11782: LD_INT 2
11784: PPUSH
11785: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11789: LD_INT 51
11791: PPUSH
11792: LD_INT 5
11794: PPUSH
11795: LD_INT 2
11797: PPUSH
11798: CALL_OW 322
// end ; if difficulty = 2 then
11802: LD_OWVAR 67
11806: PUSH
11807: LD_INT 2
11809: EQUAL
11810: IFFALSE 11906
// begin RuSolMinLevel = 5 ;
11812: LD_ADDR_EXP 37
11816: PUSH
11817: LD_INT 5
11819: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11820: LD_ADDR_EXP 38
11824: PUSH
11825: LD_INT 7
11827: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11828: LD_INT 51
11830: PPUSH
11831: LD_INT 6
11833: PPUSH
11834: LD_INT 2
11836: PPUSH
11837: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11841: LD_INT 57
11843: PPUSH
11844: LD_INT 6
11846: PPUSH
11847: LD_INT 2
11849: PPUSH
11850: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11854: LD_INT 63
11856: PPUSH
11857: LD_INT 6
11859: PPUSH
11860: LD_INT 2
11862: PPUSH
11863: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11867: LD_INT 51
11869: PPUSH
11870: LD_INT 5
11872: PPUSH
11873: LD_INT 2
11875: PPUSH
11876: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11880: LD_INT 5
11882: PPUSH
11883: LD_INT 2
11885: PPUSH
11886: LD_INT 2
11888: PPUSH
11889: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11893: LD_INT 5
11895: PPUSH
11896: LD_INT 5
11898: PPUSH
11899: LD_INT 2
11901: PPUSH
11902: CALL_OW 322
// end ; if difficulty >= 3 then
11906: LD_OWVAR 67
11910: PUSH
11911: LD_INT 3
11913: GREATEREQUAL
11914: IFFALSE 12062
// begin RuSolMinLevel = 6 ;
11916: LD_ADDR_EXP 37
11920: PUSH
11921: LD_INT 6
11923: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11924: LD_ADDR_EXP 38
11928: PUSH
11929: LD_INT 8
11931: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11932: LD_INT 51
11934: PPUSH
11935: LD_INT 6
11937: PPUSH
11938: LD_INT 2
11940: PPUSH
11941: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11945: LD_INT 57
11947: PPUSH
11948: LD_INT 6
11950: PPUSH
11951: LD_INT 2
11953: PPUSH
11954: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11958: LD_INT 52
11960: PPUSH
11961: LD_INT 6
11963: PPUSH
11964: LD_INT 2
11966: PPUSH
11967: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11971: LD_INT 58
11973: PPUSH
11974: LD_INT 6
11976: PPUSH
11977: LD_INT 2
11979: PPUSH
11980: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11984: LD_INT 63
11986: PPUSH
11987: LD_INT 6
11989: PPUSH
11990: LD_INT 2
11992: PPUSH
11993: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11997: LD_INT 64
11999: PPUSH
12000: LD_INT 6
12002: PPUSH
12003: LD_INT 2
12005: PPUSH
12006: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
12010: LD_INT 51
12012: PPUSH
12013: LD_INT 5
12015: PPUSH
12016: LD_INT 2
12018: PPUSH
12019: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
12023: LD_INT 52
12025: PPUSH
12026: LD_INT 5
12028: PPUSH
12029: LD_INT 2
12031: PPUSH
12032: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
12036: LD_INT 66
12038: PPUSH
12039: LD_INT 2
12041: PPUSH
12042: LD_INT 2
12044: PPUSH
12045: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
12049: LD_INT 66
12051: PPUSH
12052: LD_INT 5
12054: PPUSH
12055: LD_INT 2
12057: PPUSH
12058: CALL_OW 322
// end ; end ;
12062: LD_VAR 0 1
12066: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
12067: LD_INT 0
12069: PPUSH
12070: PPUSH
12071: PPUSH
12072: PPUSH
12073: PPUSH
12074: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
12075: LD_ADDR_VAR 0 7
12079: PUSH
12080: LD_INT 43
12082: PUSH
12083: LD_INT 68
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 43
12092: PUSH
12093: LD_INT 79
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 99
12102: PUSH
12103: LD_INT 114
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 103
12112: PUSH
12113: LD_INT 114
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 156
12122: PUSH
12123: LD_INT 92
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 152
12132: PUSH
12133: LD_INT 85
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: ST_TO_ADDR
// for i in sources do
12148: LD_ADDR_VAR 0 3
12152: PUSH
12153: LD_VAR 0 7
12157: PUSH
12158: FOR_IN
12159: IFFALSE 12188
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
12161: LD_VAR 0 3
12165: PUSH
12166: LD_INT 1
12168: ARRAY
12169: PPUSH
12170: LD_VAR 0 3
12174: PUSH
12175: LD_INT 2
12177: ARRAY
12178: PPUSH
12179: LD_INT 3
12181: PPUSH
12182: CALL_OW 441
12186: GO 12158
12188: POP
12189: POP
// case position of 1 :
12190: LD_VAR 0 1
12194: PUSH
12195: LD_INT 1
12197: DOUBLE
12198: EQUAL
12199: IFTRUE 12203
12201: GO 12214
12203: POP
// area := westConv ; 2 :
12204: LD_ADDR_VAR 0 6
12208: PUSH
12209: LD_INT 20
12211: ST_TO_ADDR
12212: GO 12253
12214: LD_INT 2
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12233
12222: POP
// area := midConv ; 3 :
12223: LD_ADDR_VAR 0 6
12227: PUSH
12228: LD_INT 21
12230: ST_TO_ADDR
12231: GO 12253
12233: LD_INT 3
12235: DOUBLE
12236: EQUAL
12237: IFTRUE 12241
12239: GO 12252
12241: POP
// area := eastConv ; end ;
12242: LD_ADDR_VAR 0 6
12246: PUSH
12247: LD_INT 22
12249: ST_TO_ADDR
12250: GO 12253
12252: POP
// area := AreaToList ( area , 0 ) ;
12253: LD_ADDR_VAR 0 6
12257: PUSH
12258: LD_VAR 0 6
12262: PPUSH
12263: LD_INT 0
12265: PPUSH
12266: CALL_OW 517
12270: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
12271: LD_ADDR_VAR 0 3
12275: PUSH
12276: DOUBLE
12277: LD_INT 1
12279: DEC
12280: ST_TO_ADDR
12281: LD_VAR 0 6
12285: PUSH
12286: LD_INT 1
12288: ARRAY
12289: PUSH
12290: FOR_TO
12291: IFFALSE 12372
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
12293: LD_VAR 0 6
12297: PUSH
12298: LD_INT 1
12300: ARRAY
12301: PUSH
12302: LD_VAR 0 3
12306: ARRAY
12307: PPUSH
12308: LD_VAR 0 6
12312: PUSH
12313: LD_INT 2
12315: ARRAY
12316: PUSH
12317: LD_VAR 0 3
12321: ARRAY
12322: PPUSH
12323: LD_INT 1
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12333: LD_VAR 0 6
12337: PUSH
12338: LD_INT 1
12340: ARRAY
12341: PUSH
12342: LD_VAR 0 3
12346: ARRAY
12347: PPUSH
12348: LD_VAR 0 6
12352: PUSH
12353: LD_INT 2
12355: ARRAY
12356: PUSH
12357: LD_VAR 0 3
12361: ARRAY
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 331
// end ;
12370: GO 12290
12372: POP
12373: POP
// ruPossition = position ;
12374: LD_ADDR_EXP 42
12378: PUSH
12379: LD_VAR 0 1
12383: ST_TO_ADDR
// if position = 1 then
12384: LD_VAR 0 1
12388: PUSH
12389: LD_INT 1
12391: EQUAL
12392: IFFALSE 13140
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12394: LD_ADDR_VAR 0 4
12398: PUSH
12399: LD_INT 22
12401: PUSH
12402: LD_INT 3
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 25
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PPUSH
12423: CALL_OW 69
12427: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12428: LD_ADDR_VAR 0 5
12432: PUSH
12433: LD_INT 0
12435: PUSH
12436: LD_INT 49
12438: PUSH
12439: LD_INT 74
12441: PUSH
12442: LD_INT 3
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 4
12453: PUSH
12454: LD_INT 73
12456: PUSH
12457: LD_INT 88
12459: PUSH
12460: LD_INT 5
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 4
12471: PUSH
12472: LD_INT 56
12474: PUSH
12475: LD_INT 62
12477: PUSH
12478: LD_INT 3
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 29
12489: PUSH
12490: LD_INT 43
12492: PUSH
12493: LD_INT 68
12495: PUSH
12496: LD_INT 2
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_INT 43
12510: PUSH
12511: LD_INT 79
12513: PUSH
12514: LD_INT 5
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 28
12525: PUSH
12526: LD_INT 60
12528: PUSH
12529: LD_INT 75
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 50
12546: PUSH
12547: LD_INT 87
12549: PUSH
12550: LD_INT 1
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 28
12561: PUSH
12562: LD_INT 45
12564: PUSH
12565: LD_INT 67
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 17
12579: PUSH
12580: LD_INT 47
12582: PUSH
12583: LD_INT 84
12585: PUSH
12586: LD_INT 2
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 18
12597: PUSH
12598: LD_INT 46
12600: PUSH
12601: LD_INT 87
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 28
12615: PUSH
12616: LD_INT 41
12618: PUSH
12619: LD_INT 64
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 32
12633: PUSH
12634: LD_INT 75
12636: PUSH
12637: LD_INT 76
12639: PUSH
12640: LD_INT 5
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 32
12651: PUSH
12652: LD_INT 77
12654: PUSH
12655: LD_INT 75
12657: PUSH
12658: LD_INT 5
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 32
12669: PUSH
12670: LD_INT 69
12672: PUSH
12673: LD_INT 68
12675: PUSH
12676: LD_INT 3
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 32
12687: PUSH
12688: LD_INT 59
12690: PUSH
12691: LD_INT 96
12693: PUSH
12694: LD_INT 5
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 32
12705: PUSH
12706: LD_INT 56
12708: PUSH
12709: LD_INT 96
12711: PUSH
12712: LD_INT 0
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 32
12723: PUSH
12724: LD_INT 51
12726: PUSH
12727: LD_INT 61
12729: PUSH
12730: LD_INT 3
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 32
12741: PUSH
12742: LD_INT 42
12744: PUSH
12745: LD_INT 60
12747: PUSH
12748: LD_INT 3
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 32
12759: PUSH
12760: LD_INT 36
12762: PUSH
12763: LD_INT 58
12765: PUSH
12766: LD_INT 3
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 32
12777: PUSH
12778: LD_INT 39
12780: PUSH
12781: LD_INT 59
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 32
12795: PUSH
12796: LD_INT 61
12798: PUSH
12799: LD_INT 64
12801: PUSH
12802: LD_INT 3
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 33
12813: PUSH
12814: LD_INT 63
12816: PUSH
12817: LD_INT 90
12819: PUSH
12820: LD_INT 5
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 33
12831: PUSH
12832: LD_INT 64
12834: PUSH
12835: LD_INT 88
12837: PUSH
12838: LD_INT 5
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 33
12849: PUSH
12850: LD_INT 72
12852: PUSH
12853: LD_INT 82
12855: PUSH
12856: LD_INT 5
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 6
12867: PUSH
12868: LD_INT 42
12870: PUSH
12871: LD_INT 74
12873: PUSH
12874: LD_INT 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: LD_INT 56
12888: PUSH
12889: LD_INT 77
12891: PUSH
12892: LD_INT 2
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 21
12903: PUSH
12904: LD_INT 54
12906: PUSH
12907: LD_INT 91
12909: PUSH
12910: LD_INT 5
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 16
12921: PUSH
12922: LD_INT 50
12924: PUSH
12925: LD_INT 83
12927: PUSH
12928: LD_INT 3
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 24
12939: PUSH
12940: LD_INT 50
12942: PUSH
12943: LD_INT 90
12945: PUSH
12946: LD_INT 0
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12986: LD_ADDR_VAR 0 3
12990: PUSH
12991: LD_INT 22
12993: PUSH
12994: LD_INT 3
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 3
13003: PUSH
13004: LD_INT 25
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PPUSH
13022: CALL_OW 69
13026: PUSH
13027: FOR_IN
13028: IFFALSE 13047
// AddComAgressiveMove ( i , 53 , 82 ) ;
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_INT 53
13037: PPUSH
13038: LD_INT 82
13040: PPUSH
13041: CALL_OW 174
13045: GO 13027
13047: POP
13048: POP
// for i := 1 to buildingsTab do
13049: LD_ADDR_VAR 0 3
13053: PUSH
13054: DOUBLE
13055: LD_INT 1
13057: DEC
13058: ST_TO_ADDR
13059: LD_VAR 0 5
13063: PUSH
13064: FOR_TO
13065: IFFALSE 13138
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13067: LD_VAR 0 4
13071: PPUSH
13072: LD_VAR 0 5
13076: PUSH
13077: LD_VAR 0 3
13081: ARRAY
13082: PUSH
13083: LD_INT 1
13085: ARRAY
13086: PPUSH
13087: LD_VAR 0 5
13091: PUSH
13092: LD_VAR 0 3
13096: ARRAY
13097: PUSH
13098: LD_INT 2
13100: ARRAY
13101: PPUSH
13102: LD_VAR 0 5
13106: PUSH
13107: LD_VAR 0 3
13111: ARRAY
13112: PUSH
13113: LD_INT 3
13115: ARRAY
13116: PPUSH
13117: LD_VAR 0 5
13121: PUSH
13122: LD_VAR 0 3
13126: ARRAY
13127: PUSH
13128: LD_INT 4
13130: ARRAY
13131: PPUSH
13132: CALL_OW 205
13136: GO 13064
13138: POP
13139: POP
// end ; if position = 2 then
13140: LD_VAR 0 1
13144: PUSH
13145: LD_INT 2
13147: EQUAL
13148: IFFALSE 13763
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13150: LD_ADDR_VAR 0 4
13154: PUSH
13155: LD_INT 22
13157: PUSH
13158: LD_INT 3
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 25
13167: PUSH
13168: LD_INT 2
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PPUSH
13179: CALL_OW 69
13183: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
13184: LD_ADDR_VAR 0 5
13188: PUSH
13189: LD_INT 0
13191: PUSH
13192: LD_INT 104
13194: PUSH
13195: LD_INT 110
13197: PUSH
13198: LD_INT 5
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: LD_INT 98
13212: PUSH
13213: LD_INT 90
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 29
13227: PUSH
13228: LD_INT 103
13230: PUSH
13231: LD_INT 114
13233: PUSH
13234: LD_INT 2
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: LD_INT 30
13245: PUSH
13246: LD_INT 99
13248: PUSH
13249: LD_INT 114
13251: PUSH
13252: LD_INT 3
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 28
13263: PUSH
13264: LD_INT 100
13266: PUSH
13267: LD_INT 112
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: LD_INT 92
13284: PUSH
13285: LD_INT 101
13287: PUSH
13288: LD_INT 0
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 28
13299: PUSH
13300: LD_INT 97
13302: PUSH
13303: LD_INT 116
13305: PUSH
13306: LD_INT 5
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 17
13317: PUSH
13318: LD_INT 96
13320: PUSH
13321: LD_INT 101
13323: PUSH
13324: LD_INT 4
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 18
13335: PUSH
13336: LD_INT 88
13338: PUSH
13339: LD_INT 97
13341: PUSH
13342: LD_INT 2
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 28
13353: PUSH
13354: LD_INT 106
13356: PUSH
13357: LD_INT 92
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 32
13371: PUSH
13372: LD_INT 88
13374: PUSH
13375: LD_INT 89
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 32
13389: PUSH
13390: LD_INT 86
13392: PUSH
13393: LD_INT 90
13395: PUSH
13396: LD_INT 2
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 32
13407: PUSH
13408: LD_INT 85
13410: PUSH
13411: LD_INT 99
13413: PUSH
13414: LD_INT 2
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 32
13425: PUSH
13426: LD_INT 85
13428: PUSH
13429: LD_INT 107
13431: PUSH
13432: LD_INT 1
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 33
13443: PUSH
13444: LD_INT 105
13446: PUSH
13447: LD_INT 99
13449: PUSH
13450: LD_INT 1
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 33
13461: PUSH
13462: LD_INT 102
13464: PUSH
13465: LD_INT 92
13467: PUSH
13468: LD_INT 3
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 33
13479: PUSH
13480: LD_INT 105
13482: PUSH
13483: LD_INT 92
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 6
13497: PUSH
13498: LD_INT 92
13500: PUSH
13501: LD_INT 110
13503: PUSH
13504: LD_INT 0
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 6
13515: PUSH
13516: LD_INT 103
13518: PUSH
13519: LD_INT 103
13521: PUSH
13522: LD_INT 5
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 21
13533: PUSH
13534: LD_INT 89
13536: PUSH
13537: LD_INT 101
13539: PUSH
13540: LD_INT 1
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 16
13551: PUSH
13552: LD_INT 95
13554: PUSH
13555: LD_INT 104
13557: PUSH
13558: LD_INT 4
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 24
13569: PUSH
13570: LD_INT 92
13572: PUSH
13573: LD_INT 105
13575: PUSH
13576: LD_INT 0
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13609: LD_ADDR_VAR 0 3
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_INT 3
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 3
13626: PUSH
13627: LD_INT 25
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PPUSH
13645: CALL_OW 69
13649: PUSH
13650: FOR_IN
13651: IFFALSE 13670
// AddComAgressiveMove ( i , 96 , 99 ) ;
13653: LD_VAR 0 3
13657: PPUSH
13658: LD_INT 96
13660: PPUSH
13661: LD_INT 99
13663: PPUSH
13664: CALL_OW 174
13668: GO 13650
13670: POP
13671: POP
// for i := 1 to buildingsTab do
13672: LD_ADDR_VAR 0 3
13676: PUSH
13677: DOUBLE
13678: LD_INT 1
13680: DEC
13681: ST_TO_ADDR
13682: LD_VAR 0 5
13686: PUSH
13687: FOR_TO
13688: IFFALSE 13761
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13690: LD_VAR 0 4
13694: PPUSH
13695: LD_VAR 0 5
13699: PUSH
13700: LD_VAR 0 3
13704: ARRAY
13705: PUSH
13706: LD_INT 1
13708: ARRAY
13709: PPUSH
13710: LD_VAR 0 5
13714: PUSH
13715: LD_VAR 0 3
13719: ARRAY
13720: PUSH
13721: LD_INT 2
13723: ARRAY
13724: PPUSH
13725: LD_VAR 0 5
13729: PUSH
13730: LD_VAR 0 3
13734: ARRAY
13735: PUSH
13736: LD_INT 3
13738: ARRAY
13739: PPUSH
13740: LD_VAR 0 5
13744: PUSH
13745: LD_VAR 0 3
13749: ARRAY
13750: PUSH
13751: LD_INT 4
13753: ARRAY
13754: PPUSH
13755: CALL_OW 205
13759: GO 13687
13761: POP
13762: POP
// end ; if position = 3 then
13763: LD_VAR 0 1
13767: PUSH
13768: LD_INT 3
13770: EQUAL
13771: IFFALSE 14557
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13773: LD_ADDR_VAR 0 4
13777: PUSH
13778: LD_INT 22
13780: PUSH
13781: LD_INT 3
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 25
13790: PUSH
13791: LD_INT 2
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13807: LD_ADDR_VAR 0 5
13811: PUSH
13812: LD_INT 0
13814: PUSH
13815: LD_INT 151
13817: PUSH
13818: LD_INT 71
13820: PUSH
13821: LD_INT 4
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 4
13832: PUSH
13833: LD_INT 145
13835: PUSH
13836: LD_INT 53
13838: PUSH
13839: LD_INT 3
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 4
13850: PUSH
13851: LD_INT 172
13853: PUSH
13854: LD_INT 102
13856: PUSH
13857: LD_INT 5
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 29
13868: PUSH
13869: LD_INT 152
13871: PUSH
13872: LD_INT 85
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 30
13886: PUSH
13887: LD_INT 156
13889: PUSH
13890: LD_INT 92
13892: PUSH
13893: LD_INT 3
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 28
13904: PUSH
13905: LD_INT 151
13907: PUSH
13908: LD_INT 66
13910: PUSH
13911: LD_INT 4
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 2
13922: PUSH
13923: LD_INT 163
13925: PUSH
13926: LD_INT 95
13928: PUSH
13929: LD_INT 5
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 28
13940: PUSH
13941: LD_INT 149
13943: PUSH
13944: LD_INT 63
13946: PUSH
13947: LD_INT 4
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 17
13958: PUSH
13959: LD_INT 167
13961: PUSH
13962: LD_INT 99
13964: PUSH
13965: LD_INT 5
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 18
13976: PUSH
13977: LD_INT 163
13979: PUSH
13980: LD_INT 98
13982: PUSH
13983: LD_INT 0
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 28
13994: PUSH
13995: LD_INT 154
13997: PUSH
13998: LD_INT 70
14000: PUSH
14001: LD_INT 4
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 32
14012: PUSH
14013: LD_INT 155
14015: PUSH
14016: LD_INT 62
14018: PUSH
14019: LD_INT 4
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 32
14030: PUSH
14031: LD_INT 161
14033: PUSH
14034: LD_INT 69
14036: PUSH
14037: LD_INT 4
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 32
14048: PUSH
14049: LD_INT 168
14051: PUSH
14052: LD_INT 78
14054: PUSH
14055: LD_INT 4
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 32
14066: PUSH
14067: LD_INT 163
14069: PUSH
14070: LD_INT 80
14072: PUSH
14073: LD_INT 5
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 32
14084: PUSH
14085: LD_INT 136
14087: PUSH
14088: LD_INT 73
14090: PUSH
14091: LD_INT 0
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 32
14102: PUSH
14103: LD_INT 157
14105: PUSH
14106: LD_INT 98
14108: PUSH
14109: LD_INT 0
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 32
14120: PUSH
14121: LD_INT 150
14123: PUSH
14124: LD_INT 87
14126: PUSH
14127: LD_INT 1
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 33
14138: PUSH
14139: LD_INT 171
14141: PUSH
14142: LD_INT 97
14144: PUSH
14145: LD_INT 4
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 33
14156: PUSH
14157: LD_INT 168
14159: PUSH
14160: LD_INT 92
14162: PUSH
14163: LD_INT 4
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 33
14174: PUSH
14175: LD_INT 166
14177: PUSH
14178: LD_INT 80
14180: PUSH
14181: LD_INT 5
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 33
14192: PUSH
14193: LD_INT 141
14195: PUSH
14196: LD_INT 54
14198: PUSH
14199: LD_INT 2
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 33
14210: PUSH
14211: LD_INT 133
14213: PUSH
14214: LD_INT 57
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 33
14228: PUSH
14229: LD_INT 132
14231: PUSH
14232: LD_INT 61
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 33
14246: PUSH
14247: LD_INT 150
14249: PUSH
14250: LD_INT 82
14252: PUSH
14253: LD_INT 0
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 33
14264: PUSH
14265: LD_INT 132
14267: PUSH
14268: LD_INT 72
14270: PUSH
14271: LD_INT 0
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 6
14282: PUSH
14283: LD_INT 146
14285: PUSH
14286: LD_INT 64
14288: PUSH
14289: LD_INT 4
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 6
14300: PUSH
14301: LD_INT 159
14303: PUSH
14304: LD_INT 85
14306: PUSH
14307: LD_INT 4
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 163
14321: PUSH
14322: LD_INT 91
14324: PUSH
14325: LD_INT 3
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 16
14336: PUSH
14337: LD_INT 166
14339: PUSH
14340: LD_INT 95
14342: PUSH
14343: LD_INT 4
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 24
14354: PUSH
14355: LD_INT 159
14357: PUSH
14358: LD_INT 95
14360: PUSH
14361: LD_INT 1
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14403: LD_ADDR_VAR 0 3
14407: PUSH
14408: LD_INT 22
14410: PUSH
14411: LD_INT 3
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 3
14420: PUSH
14421: LD_INT 25
14423: PUSH
14424: LD_INT 2
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL_OW 69
14443: PUSH
14444: FOR_IN
14445: IFFALSE 14464
// AddComAgressiveMove ( i , 141 , 65 ) ;
14447: LD_VAR 0 3
14451: PPUSH
14452: LD_INT 141
14454: PPUSH
14455: LD_INT 65
14457: PPUSH
14458: CALL_OW 174
14462: GO 14444
14464: POP
14465: POP
// for i := 1 to buildingsTab do
14466: LD_ADDR_VAR 0 3
14470: PUSH
14471: DOUBLE
14472: LD_INT 1
14474: DEC
14475: ST_TO_ADDR
14476: LD_VAR 0 5
14480: PUSH
14481: FOR_TO
14482: IFFALSE 14555
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14484: LD_VAR 0 4
14488: PPUSH
14489: LD_VAR 0 5
14493: PUSH
14494: LD_VAR 0 3
14498: ARRAY
14499: PUSH
14500: LD_INT 1
14502: ARRAY
14503: PPUSH
14504: LD_VAR 0 5
14508: PUSH
14509: LD_VAR 0 3
14513: ARRAY
14514: PUSH
14515: LD_INT 2
14517: ARRAY
14518: PPUSH
14519: LD_VAR 0 5
14523: PUSH
14524: LD_VAR 0 3
14528: ARRAY
14529: PUSH
14530: LD_INT 3
14532: ARRAY
14533: PPUSH
14534: LD_VAR 0 5
14538: PUSH
14539: LD_VAR 0 3
14543: ARRAY
14544: PUSH
14545: LD_INT 4
14547: ARRAY
14548: PPUSH
14549: CALL_OW 205
14553: GO 14481
14555: POP
14556: POP
// end ; end ;
14557: LD_VAR 0 2
14561: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14562: LD_INT 0
14564: PPUSH
14565: PPUSH
14566: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14567: LD_ADDR_EXP 69
14571: PUSH
14572: LD_INT 0
14574: PUSH
14575: LD_INT 71
14577: PUSH
14578: LD_INT 15
14580: PUSH
14581: LD_INT 3
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 6
14592: PUSH
14593: LD_INT 77
14595: PUSH
14596: LD_INT 18
14598: PUSH
14599: LD_INT 3
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 4
14610: PUSH
14611: LD_INT 77
14613: PUSH
14614: LD_INT 26
14616: PUSH
14617: LD_INT 0
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 31
14628: PUSH
14629: LD_INT 72
14631: PUSH
14632: LD_INT 24
14634: PUSH
14635: LD_INT 0
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 31
14646: PUSH
14647: LD_INT 82
14649: PUSH
14650: LD_INT 28
14652: PUSH
14653: LD_INT 0
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 31
14664: PUSH
14665: LD_INT 84
14667: PUSH
14668: LD_INT 21
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 31
14682: PUSH
14683: LD_INT 66
14685: PUSH
14686: LD_INT 14
14688: PUSH
14689: LD_INT 2
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 27
14700: PUSH
14701: LD_INT 67
14703: PUSH
14704: LD_INT 18
14706: PUSH
14707: LD_INT 5
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 27
14718: PUSH
14719: LD_INT 69
14721: PUSH
14722: LD_INT 23
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14745: LD_ADDR_VAR 0 3
14749: PUSH
14750: LD_INT 22
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 25
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14779: LD_VAR 0 3
14783: PPUSH
14784: LD_EXP 69
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: LD_EXP 69
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PUSH
14806: LD_INT 2
14808: ARRAY
14809: PPUSH
14810: LD_EXP 69
14814: PUSH
14815: LD_INT 1
14817: ARRAY
14818: PUSH
14819: LD_INT 3
14821: ARRAY
14822: PPUSH
14823: LD_EXP 69
14827: PUSH
14828: LD_INT 1
14830: ARRAY
14831: PUSH
14832: LD_INT 4
14834: ARRAY
14835: PPUSH
14836: CALL_OW 205
// end ;
14840: LD_VAR 0 1
14844: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14845: LD_INT 0
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
14851: PPUSH
14852: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14853: LD_ADDR_VAR 0 7
14857: PUSH
14858: LD_INT 22
14860: PUSH
14861: LD_VAR 0 1
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 25
14872: PUSH
14873: LD_INT 9
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14889: LD_ADDR_VAR 0 8
14893: PUSH
14894: LD_INT 22
14896: PUSH
14897: LD_VAR 0 2
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 3
14908: PUSH
14909: LD_INT 21
14911: PUSH
14912: LD_INT 3
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PPUSH
14927: CALL_OW 69
14931: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14932: LD_ADDR_VAR 0 5
14936: PUSH
14937: LD_INT 1
14939: PPUSH
14940: LD_INT 3
14942: PPUSH
14943: CALL_OW 12
14947: ST_TO_ADDR
// for i = 1 to list do
14948: LD_ADDR_VAR 0 6
14952: PUSH
14953: DOUBLE
14954: LD_INT 1
14956: DEC
14957: ST_TO_ADDR
14958: LD_VAR 0 7
14962: PUSH
14963: FOR_TO
14964: IFFALSE 15954
// for ta in filter do
14966: LD_ADDR_VAR 0 4
14970: PUSH
14971: LD_VAR 0 8
14975: PUSH
14976: FOR_IN
14977: IFFALSE 15950
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14979: LD_VAR 0 7
14983: PUSH
14984: LD_VAR 0 6
14988: ARRAY
14989: PPUSH
14990: LD_VAR 0 4
14994: PPUSH
14995: CALL_OW 296
14999: PUSH
15000: LD_INT 15
15002: LESSEQUAL
15003: IFFALSE 15948
// begin case c of 1 :
15005: LD_VAR 0 5
15009: PUSH
15010: LD_INT 1
15012: DOUBLE
15013: EQUAL
15014: IFTRUE 15018
15016: GO 15450
15018: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
15019: LD_VAR 0 7
15023: PUSH
15024: LD_VAR 0 6
15028: ARRAY
15029: PPUSH
15030: LD_VAR 0 4
15034: PPUSH
15035: CALL_OW 250
15039: PPUSH
15040: LD_VAR 0 4
15044: PPUSH
15045: CALL_OW 251
15049: PPUSH
15050: CALL_OW 154
// if eventVar2 = 0 then
15054: LD_EXP 67
15058: PUSH
15059: LD_INT 0
15061: EQUAL
15062: IFFALSE 15448
// begin eventVar2 = 1 ;
15064: LD_ADDR_EXP 67
15068: PUSH
15069: LD_INT 1
15071: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15072: LD_INT 245
15074: PPUSH
15075: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15079: LD_VAR 0 4
15083: PPUSH
15084: CALL_OW 250
15088: PPUSH
15089: LD_VAR 0 4
15093: PPUSH
15094: CALL_OW 251
15098: PPUSH
15099: CALL_OW 84
// DialogueOn ;
15103: CALL_OW 6
// if IsOK ( Cyrus ) then
15107: LD_EXP 5
15111: PPUSH
15112: CALL_OW 302
15116: IFFALSE 15132
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15118: LD_EXP 5
15122: PPUSH
15123: LD_STRING D9a-Cyrus-1
15125: PPUSH
15126: CALL_OW 88
// end else
15130: GO 15254
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15132: LD_INT 22
15134: PUSH
15135: LD_INT 1
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 26
15144: PUSH
15145: LD_INT 1
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 2
15154: PUSH
15155: LD_INT 25
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 25
15167: PUSH
15168: LD_INT 2
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 25
15177: PUSH
15178: LD_INT 3
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 25
15187: PUSH
15188: LD_INT 4
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 5
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: PPUSH
15218: CALL_OW 69
15222: PUSH
15223: LD_EXP 1
15227: PUSH
15228: LD_EXP 14
15232: PUSH
15233: LD_EXP 5
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: DIFF
15243: PPUSH
15244: LD_STRING D9a-Sol1-1
15246: PPUSH
15247: LD_STRING D9a-Sol1-1
15249: PPUSH
15250: CALL 11409 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15254: LD_INT 22
15256: PUSH
15257: LD_INT 1
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 26
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 2
15276: PUSH
15277: LD_INT 25
15279: PUSH
15280: LD_INT 1
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: LD_INT 25
15289: PUSH
15290: LD_INT 2
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 25
15299: PUSH
15300: LD_INT 3
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 25
15309: PUSH
15310: LD_INT 4
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 25
15319: PUSH
15320: LD_INT 5
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 69
15344: PUSH
15345: LD_EXP 1
15349: PUSH
15350: LD_EXP 14
15354: PUSH
15355: LD_EXP 5
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: DIFF
15365: PPUSH
15366: LD_STRING D9b-Sol1-1
15368: PPUSH
15369: LD_STRING D9b-Sol1-1
15371: PPUSH
15372: CALL 11409 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15376: LD_STRING 09_arInfo
15378: PPUSH
15379: LD_INT 0
15381: PPUSH
15382: CALL_OW 30
15386: PUSH
15387: LD_INT 1
15389: EQUAL
15390: IFFALSE 15404
// Say ( JMM , D9a-JMM-1 ) ;
15392: LD_EXP 1
15396: PPUSH
15397: LD_STRING D9a-JMM-1
15399: PPUSH
15400: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15404: LD_EXP 1
15408: PPUSH
15409: LD_STRING D9c-JMM-1
15411: PPUSH
15412: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15416: LD_INT 12
15418: PPUSH
15419: LD_INT 1
15421: PPUSH
15422: CALL_OW 321
15426: PUSH
15427: LD_INT 2
15429: EQUAL
15430: IFFALSE 15444
// Say ( JMM , D9c-JMM-1a ) ;
15432: LD_EXP 1
15436: PPUSH
15437: LD_STRING D9c-JMM-1a
15439: PPUSH
15440: CALL_OW 88
// DialogueOff ;
15444: CALL_OW 7
// end ; end ; 2 :
15448: GO 15948
15450: LD_INT 2
15452: DOUBLE
15453: EQUAL
15454: IFTRUE 15458
15456: GO 15916
15458: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15459: LD_VAR 0 7
15463: PUSH
15464: LD_VAR 0 6
15468: ARRAY
15469: PPUSH
15470: LD_VAR 0 4
15474: PPUSH
15475: CALL_OW 250
15479: PUSH
15480: LD_INT 1
15482: NEG
15483: PPUSH
15484: LD_INT 1
15486: PPUSH
15487: CALL_OW 12
15491: PLUS
15492: PPUSH
15493: LD_VAR 0 4
15497: PPUSH
15498: CALL_OW 251
15502: PUSH
15503: LD_INT 1
15505: NEG
15506: PPUSH
15507: LD_INT 1
15509: PPUSH
15510: CALL_OW 12
15514: PLUS
15515: PPUSH
15516: CALL_OW 153
// if eventVar2 = 0 then
15520: LD_EXP 67
15524: PUSH
15525: LD_INT 0
15527: EQUAL
15528: IFFALSE 15914
// begin eventVar2 = 1 ;
15530: LD_ADDR_EXP 67
15534: PUSH
15535: LD_INT 1
15537: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15538: LD_INT 245
15540: PPUSH
15541: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15545: LD_VAR 0 4
15549: PPUSH
15550: CALL_OW 250
15554: PPUSH
15555: LD_VAR 0 4
15559: PPUSH
15560: CALL_OW 251
15564: PPUSH
15565: CALL_OW 84
// DialogueOn ;
15569: CALL_OW 6
// if IsOK ( Cyrus ) then
15573: LD_EXP 5
15577: PPUSH
15578: CALL_OW 302
15582: IFFALSE 15598
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15584: LD_EXP 5
15588: PPUSH
15589: LD_STRING D9a-Cyrus-1
15591: PPUSH
15592: CALL_OW 88
// end else
15596: GO 15720
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15598: LD_INT 22
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 26
15610: PUSH
15611: LD_INT 1
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 2
15620: PUSH
15621: LD_INT 25
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 25
15633: PUSH
15634: LD_INT 2
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 25
15643: PUSH
15644: LD_INT 3
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 25
15653: PUSH
15654: LD_INT 4
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 25
15663: PUSH
15664: LD_INT 5
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: PUSH
15689: LD_EXP 1
15693: PUSH
15694: LD_EXP 14
15698: PUSH
15699: LD_EXP 5
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: LIST
15708: DIFF
15709: PPUSH
15710: LD_STRING D9a-Sol1-1
15712: PPUSH
15713: LD_STRING D9a-Sol1-1
15715: PPUSH
15716: CALL 11409 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15720: LD_INT 22
15722: PUSH
15723: LD_INT 1
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 26
15732: PUSH
15733: LD_INT 1
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 2
15742: PUSH
15743: LD_INT 25
15745: PUSH
15746: LD_INT 1
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 25
15755: PUSH
15756: LD_INT 2
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 25
15765: PUSH
15766: LD_INT 3
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 25
15775: PUSH
15776: LD_INT 4
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 25
15785: PUSH
15786: LD_INT 5
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: PUSH
15811: LD_EXP 1
15815: PUSH
15816: LD_EXP 14
15820: PUSH
15821: LD_EXP 5
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: DIFF
15831: PPUSH
15832: LD_STRING D9b-Sol1-1
15834: PPUSH
15835: LD_STRING D9b-Sol1-1
15837: PPUSH
15838: CALL 11409 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15842: LD_STRING 09_arInfo
15844: PPUSH
15845: LD_INT 0
15847: PPUSH
15848: CALL_OW 30
15852: PUSH
15853: LD_INT 1
15855: EQUAL
15856: IFFALSE 15870
// Say ( JMM , D9a-JMM-1 ) ;
15858: LD_EXP 1
15862: PPUSH
15863: LD_STRING D9a-JMM-1
15865: PPUSH
15866: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15870: LD_EXP 1
15874: PPUSH
15875: LD_STRING D9c-JMM-1
15877: PPUSH
15878: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15882: LD_INT 12
15884: PPUSH
15885: LD_INT 1
15887: PPUSH
15888: CALL_OW 321
15892: PUSH
15893: LD_INT 2
15895: EQUAL
15896: IFFALSE 15910
// Say ( JMM , D9c-JMM-1a ) ;
15898: LD_EXP 1
15902: PPUSH
15903: LD_STRING D9c-JMM-1a
15905: PPUSH
15906: CALL_OW 88
// DialogueOff ;
15910: CALL_OW 7
// end ; end ; 3 :
15914: GO 15948
15916: LD_INT 3
15918: DOUBLE
15919: EQUAL
15920: IFTRUE 15924
15922: GO 15947
15924: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15925: LD_VAR 0 7
15929: PUSH
15930: LD_VAR 0 6
15934: ARRAY
15935: PPUSH
15936: LD_VAR 0 4
15940: PPUSH
15941: CALL_OW 115
15945: GO 15948
15947: POP
// end ; end ;
15948: GO 14976
15950: POP
15951: POP
15952: GO 14963
15954: POP
15955: POP
// end ;
15956: LD_VAR 0 3
15960: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
15965: PPUSH
15966: PPUSH
// for i = 1 to 72 do
15967: LD_ADDR_VAR 0 5
15971: PUSH
15972: DOUBLE
15973: LD_INT 1
15975: DEC
15976: ST_TO_ADDR
15977: LD_INT 72
15979: PUSH
15980: FOR_TO
15981: IFFALSE 16039
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15983: LD_VAR 0 5
15987: PPUSH
15988: LD_VAR 0 1
15992: PPUSH
15993: CALL_OW 321
15997: PUSH
15998: LD_INT 1
16000: EQUAL
16001: PUSH
16002: LD_VAR 0 5
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: CALL_OW 482
16016: PUSH
16017: LD_INT 1
16019: EQUAL
16020: AND
16021: IFFALSE 16037
// AddComResearch ( lab , i ) ;
16023: LD_VAR 0 2
16027: PPUSH
16028: LD_VAR 0 5
16032: PPUSH
16033: CALL_OW 184
16037: GO 15980
16039: POP
16040: POP
// end ;
16041: LD_VAR 0 4
16045: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
16046: LD_INT 0
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
16056: LD_ADDR_VAR 0 6
16060: PUSH
16061: LD_INT 22
16063: PUSH
16064: LD_VAR 0 1
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 56
16075: PUSH
16076: EMPTY
16077: LIST
16078: PUSH
16079: LD_INT 24
16081: PUSH
16082: LD_INT 700
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 3
16091: PUSH
16092: LD_INT 60
16094: PUSH
16095: EMPTY
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 2
16104: PUSH
16105: LD_INT 25
16107: PUSH
16108: LD_INT 1
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 25
16117: PUSH
16118: LD_INT 9
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: PPUSH
16137: CALL_OW 69
16141: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
16142: LD_ADDR_VAR 0 7
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_VAR 0 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 30
16161: PUSH
16162: LD_INT 32
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 58
16171: PUSH
16172: EMPTY
16173: LIST
16174: PUSH
16175: LD_INT 24
16177: PUSH
16178: LD_INT 251
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: PPUSH
16191: CALL_OW 69
16195: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
16196: LD_ADDR_VAR 0 9
16200: PUSH
16201: LD_INT 22
16203: PUSH
16204: LD_VAR 0 1
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 2
16215: PUSH
16216: LD_INT 30
16218: PUSH
16219: LD_INT 4
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 30
16228: PUSH
16229: LD_INT 5
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 24
16243: PUSH
16244: LD_INT 251
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: PPUSH
16256: CALL_OW 69
16260: ST_TO_ADDR
// if barrackList > 0 then
16261: LD_VAR 0 9
16265: PUSH
16266: LD_INT 0
16268: GREATER
16269: IFFALSE 16404
// begin if turretList = 0 then
16271: LD_VAR 0 7
16275: PUSH
16276: LD_INT 0
16278: EQUAL
16279: IFFALSE 16328
// begin for i in soldiers_list do
16281: LD_ADDR_VAR 0 4
16285: PUSH
16286: LD_VAR 0 6
16290: PUSH
16291: FOR_IN
16292: IFFALSE 16324
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
16294: LD_VAR 0 4
16298: PPUSH
16299: LD_VAR 0 9
16303: PUSH
16304: LD_INT 1
16306: PPUSH
16307: LD_VAR 0 9
16311: PPUSH
16312: CALL_OW 12
16316: ARRAY
16317: PPUSH
16318: CALL_OW 120
16322: GO 16291
16324: POP
16325: POP
// end else
16326: GO 16404
// begin for i in barrackList do
16328: LD_ADDR_VAR 0 4
16332: PUSH
16333: LD_VAR 0 9
16337: PUSH
16338: FOR_IN
16339: IFFALSE 16402
// begin insideUnits = UnitsInside ( i ) ;
16341: LD_ADDR_VAR 0 10
16345: PUSH
16346: LD_VAR 0 4
16350: PPUSH
16351: CALL_OW 313
16355: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16356: LD_VAR 0 10
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: LD_VAR 0 7
16369: PUSH
16370: LD_INT 1
16372: ARRAY
16373: PPUSH
16374: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16378: LD_VAR 0 6
16382: PUSH
16383: LD_INT 1
16385: ARRAY
16386: PPUSH
16387: LD_VAR 0 7
16391: PUSH
16392: LD_INT 1
16394: ARRAY
16395: PPUSH
16396: CALL_OW 120
// end ;
16400: GO 16338
16402: POP
16403: POP
// end ; end ; end ;
16404: LD_VAR 0 3
16408: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16409: LD_INT 0
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16417: LD_ADDR_VAR 0 6
16421: PUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL_OW 313
16431: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16432: LD_ADDR_VAR 0 7
16436: PUSH
16437: LD_INT 22
16439: PUSH
16440: LD_VAR 0 1
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 25
16451: PUSH
16452: LD_INT 2
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 24
16461: PUSH
16462: LD_INT 1000
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: LD_INT 54
16474: PUSH
16475: EMPTY
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: PPUSH
16488: CALL_OW 69
16492: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16493: LD_ADDR_VAR 0 4
16497: PUSH
16498: LD_INT 22
16500: PUSH
16501: LD_VAR 0 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 21
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 3
16522: PUSH
16523: LD_INT 24
16525: PUSH
16526: LD_INT 1000
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: PPUSH
16545: CALL_OW 69
16549: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16550: LD_VAR 0 4
16554: NOT
16555: PUSH
16556: LD_VAR 0 7
16560: NOT
16561: AND
16562: PUSH
16563: LD_EXP 43
16567: NOT
16568: AND
16569: IFFALSE 16573
// exit ;
16571: GO 16764
// if buildings_list > 0 and engineerOkInside then
16573: LD_VAR 0 4
16577: PUSH
16578: LD_INT 0
16580: GREATER
16581: PUSH
16582: LD_VAR 0 6
16586: AND
16587: IFFALSE 16641
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16589: LD_ADDR_VAR 0 5
16593: PUSH
16594: LD_INT 22
16596: PUSH
16597: LD_VAR 0 1
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 25
16608: PUSH
16609: LD_INT 2
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PPUSH
16620: CALL_OW 69
16624: PUSH
16625: FOR_IN
16626: IFFALSE 16639
// ComExitBuilding ( i ) ;
16628: LD_VAR 0 5
16632: PPUSH
16633: CALL_OW 122
16637: GO 16625
16639: POP
16640: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16641: LD_VAR 0 4
16645: PUSH
16646: LD_INT 0
16648: GREATER
16649: PUSH
16650: LD_VAR 0 7
16654: PUSH
16655: LD_INT 0
16657: GREATER
16658: AND
16659: IFFALSE 16713
// begin for i in engineerOkOutside do
16661: LD_ADDR_VAR 0 5
16665: PUSH
16666: LD_VAR 0 7
16670: PUSH
16671: FOR_IN
16672: IFFALSE 16711
// for j in buildings_list do
16674: LD_ADDR_VAR 0 8
16678: PUSH
16679: LD_VAR 0 4
16683: PUSH
16684: FOR_IN
16685: IFFALSE 16707
// ComRepairBuilding ( i , j [ 1 ] ) ;
16687: LD_VAR 0 5
16691: PPUSH
16692: LD_VAR 0 8
16696: PUSH
16697: LD_INT 1
16699: ARRAY
16700: PPUSH
16701: CALL_OW 130
16705: GO 16684
16707: POP
16708: POP
16709: GO 16671
16711: POP
16712: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16713: LD_VAR 0 4
16717: PUSH
16718: LD_INT 0
16720: EQUAL
16721: PUSH
16722: LD_VAR 0 7
16726: PUSH
16727: LD_INT 0
16729: GREATER
16730: AND
16731: IFFALSE 16764
// for i in engineerOkOutside do
16733: LD_ADDR_VAR 0 5
16737: PUSH
16738: LD_VAR 0 7
16742: PUSH
16743: FOR_IN
16744: IFFALSE 16762
// ComEnterUnit ( i , building ) ;
16746: LD_VAR 0 5
16750: PPUSH
16751: LD_VAR 0 2
16755: PPUSH
16756: CALL_OW 120
16760: GO 16743
16762: POP
16763: POP
// end ;
16764: LD_VAR 0 3
16768: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16769: LD_INT 0
16771: PPUSH
16772: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16773: LD_INT 22
16775: PUSH
16776: LD_VAR 0 1
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 25
16787: PUSH
16788: LD_INT 2
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PPUSH
16799: CALL_OW 69
16803: PUSH
16804: LD_INT 0
16806: GREATER
16807: PUSH
16808: LD_INT 22
16810: PUSH
16811: LD_VAR 0 1
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 21
16822: PUSH
16823: LD_INT 3
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 3
16832: PUSH
16833: LD_INT 24
16835: PUSH
16836: LD_INT 1000
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: LIST
16851: PPUSH
16852: CALL_OW 69
16856: PUSH
16857: LD_INT 0
16859: EQUAL
16860: AND
16861: PUSH
16862: LD_VAR 0 2
16866: PUSH
16867: LD_INT 0
16869: GREATER
16870: AND
16871: IFFALSE 16970
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16873: LD_ADDR_VAR 0 4
16877: PUSH
16878: LD_INT 22
16880: PUSH
16881: LD_VAR 0 1
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 25
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL_OW 69
16908: PUSH
16909: FOR_IN
16910: IFFALSE 16968
// begin AddComExitBuilding ( i ) ;
16912: LD_VAR 0 4
16916: PPUSH
16917: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16921: LD_VAR 0 4
16925: PPUSH
16926: LD_VAR 0 2
16930: PUSH
16931: LD_INT 1
16933: ARRAY
16934: PPUSH
16935: LD_VAR 0 2
16939: PUSH
16940: LD_INT 2
16942: ARRAY
16943: PPUSH
16944: LD_VAR 0 2
16948: PUSH
16949: LD_INT 3
16951: ARRAY
16952: PPUSH
16953: LD_VAR 0 2
16957: PUSH
16958: LD_INT 4
16960: ARRAY
16961: PPUSH
16962: CALL_OW 205
// end ;
16966: GO 16909
16968: POP
16969: POP
// end ; end ;
16970: LD_VAR 0 3
16974: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16975: LD_INT 0
16977: PPUSH
16978: PPUSH
16979: PPUSH
16980: PPUSH
16981: PPUSH
16982: PPUSH
16983: PPUSH
16984: PPUSH
16985: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16986: LD_ADDR_VAR 0 6
16990: PUSH
16991: LD_INT 22
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 25
17005: PUSH
17006: LD_INT 4
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 24
17015: PUSH
17016: LD_INT 251
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
17033: LD_ADDR_VAR 0 7
17037: PUSH
17038: LD_VAR 0 3
17042: PPUSH
17043: LD_INT 22
17045: PUSH
17046: LD_VAR 0 1
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 25
17057: PUSH
17058: LD_INT 4
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 50
17067: PUSH
17068: EMPTY
17069: LIST
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: PPUSH
17076: CALL_OW 70
17080: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
17081: LD_ADDR_VAR 0 10
17085: PUSH
17086: LD_VAR 0 3
17090: PPUSH
17091: LD_INT 22
17093: PUSH
17094: LD_VAR 0 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 21
17105: PUSH
17106: LD_INT 1
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 3
17115: PUSH
17116: LD_INT 25
17118: PUSH
17119: LD_INT 3
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: LD_INT 24
17135: PUSH
17136: LD_INT 750
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: PPUSH
17153: CALL_OW 70
17157: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17158: LD_ADDR_VAR 0 11
17162: PUSH
17163: LD_VAR 0 2
17167: PPUSH
17168: LD_INT 22
17170: PUSH
17171: LD_VAR 0 1
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 21
17182: PUSH
17183: LD_INT 1
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 3
17192: PUSH
17193: LD_INT 25
17195: PUSH
17196: LD_INT 3
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: LD_INT 24
17212: PUSH
17213: LD_INT 1000
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: PPUSH
17230: CALL_OW 70
17234: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
17235: LD_VAR 0 10
17239: NOT
17240: PUSH
17241: LD_VAR 0 7
17245: NOT
17246: AND
17247: PUSH
17248: LD_VAR 0 11
17252: NOT
17253: AND
17254: IFFALSE 17258
// exit ;
17256: GO 17518
// if damageUnits > 0 and sci_list > 0 then
17258: LD_VAR 0 10
17262: PUSH
17263: LD_INT 0
17265: GREATER
17266: PUSH
17267: LD_VAR 0 6
17271: PUSH
17272: LD_INT 0
17274: GREATER
17275: AND
17276: IFFALSE 17309
// for i in damageUnits do
17278: LD_ADDR_VAR 0 8
17282: PUSH
17283: LD_VAR 0 10
17287: PUSH
17288: FOR_IN
17289: IFFALSE 17307
// ComMoveToArea ( i , healArea ) ;
17291: LD_VAR 0 8
17295: PPUSH
17296: LD_VAR 0 2
17300: PPUSH
17301: CALL_OW 113
17305: GO 17288
17307: POP
17308: POP
// if unitsToHeal > 0 and sci_list > 0 then
17309: LD_VAR 0 11
17313: PUSH
17314: LD_INT 0
17316: GREATER
17317: PUSH
17318: LD_VAR 0 6
17322: PUSH
17323: LD_INT 0
17325: GREATER
17326: AND
17327: IFFALSE 17386
// begin for i in sci_list do
17329: LD_ADDR_VAR 0 8
17333: PUSH
17334: LD_VAR 0 6
17338: PUSH
17339: FOR_IN
17340: IFFALSE 17384
// begin ComExitBuilding ( i ) ;
17342: LD_VAR 0 8
17346: PPUSH
17347: CALL_OW 122
// for j in unitsToHeal do
17351: LD_ADDR_VAR 0 9
17355: PUSH
17356: LD_VAR 0 11
17360: PUSH
17361: FOR_IN
17362: IFFALSE 17380
// AddComHeal ( i , j ) ;
17364: LD_VAR 0 8
17368: PPUSH
17369: LD_VAR 0 9
17373: PPUSH
17374: CALL_OW 188
17378: GO 17361
17380: POP
17381: POP
// end ;
17382: GO 17339
17384: POP
17385: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17386: LD_VAR 0 10
17390: PUSH
17391: LD_INT 0
17393: EQUAL
17394: PUSH
17395: LD_VAR 0 11
17399: PUSH
17400: LD_INT 0
17402: EQUAL
17403: AND
17404: PUSH
17405: LD_VAR 0 7
17409: PUSH
17410: LD_INT 0
17412: GREATER
17413: AND
17414: IFFALSE 17518
// for i in sci_listOutside do
17416: LD_ADDR_VAR 0 8
17420: PUSH
17421: LD_VAR 0 7
17425: PUSH
17426: FOR_IN
17427: IFFALSE 17516
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17429: LD_ADDR_VAR 0 12
17433: PUSH
17434: LD_INT 22
17436: PUSH
17437: LD_VAR 0 1
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 21
17448: PUSH
17449: LD_INT 3
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 30
17458: PUSH
17459: LD_INT 8
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: PPUSH
17471: CALL_OW 69
17475: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17476: LD_ADDR_VAR 0 13
17480: PUSH
17481: LD_INT 1
17483: PPUSH
17484: LD_VAR 0 12
17488: PPUSH
17489: CALL_OW 12
17493: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17494: LD_VAR 0 8
17498: PPUSH
17499: LD_VAR 0 12
17503: PUSH
17504: LD_VAR 0 13
17508: ARRAY
17509: PPUSH
17510: CALL_OW 120
// end ;
17514: GO 17426
17516: POP
17517: POP
// end ;
17518: LD_VAR 0 5
17522: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17523: LD_INT 0
17525: PPUSH
17526: PPUSH
17527: PPUSH
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
17533: PPUSH
17534: PPUSH
17535: PPUSH
// amChassisTab = [ ] ;
17536: LD_ADDR_VAR 0 19
17540: PUSH
17541: EMPTY
17542: ST_TO_ADDR
// arChassisTab = [ ] ;
17543: LD_ADDR_VAR 0 18
17547: PUSH
17548: EMPTY
17549: ST_TO_ADDR
// ruChassisTab = [ ] ;
17550: LD_ADDR_VAR 0 17
17554: PUSH
17555: EMPTY
17556: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17557: LD_INT 35
17559: PPUSH
17560: CALL_OW 67
// if nation = 1 then
17564: LD_VAR 0 5
17568: PUSH
17569: LD_INT 1
17571: EQUAL
17572: IFFALSE 18077
// begin uc_side = side ;
17574: LD_ADDR_OWVAR 20
17578: PUSH
17579: LD_VAR 0 2
17583: ST_TO_ADDR
// uc_nation = nation ;
17584: LD_ADDR_OWVAR 21
17588: PUSH
17589: LD_VAR 0 5
17593: ST_TO_ADDR
// vc_engine = vehengine ;
17594: LD_ADDR_OWVAR 39
17598: PUSH
17599: LD_VAR 0 6
17603: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17604: LD_ADDR_OWVAR 38
17608: PUSH
17609: LD_VAR 0 7
17613: PUSH
17614: LD_INT 1
17616: PPUSH
17617: LD_VAR 0 7
17621: PPUSH
17622: CALL_OW 12
17626: ARRAY
17627: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17628: LD_ADDR_OWVAR 40
17632: PUSH
17633: LD_VAR 0 10
17637: PUSH
17638: LD_INT 1
17640: PPUSH
17641: LD_VAR 0 10
17645: PPUSH
17646: CALL_OW 12
17650: ARRAY
17651: ST_TO_ADDR
// for j = 1 to AMWeapon do
17652: LD_ADDR_VAR 0 14
17656: PUSH
17657: DOUBLE
17658: LD_INT 1
17660: DEC
17661: ST_TO_ADDR
17662: LD_VAR 0 10
17666: PUSH
17667: FOR_TO
17668: IFFALSE 17969
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17670: LD_VAR 0 10
17674: PUSH
17675: LD_VAR 0 14
17679: ARRAY
17680: PUSH
17681: LD_INT 2
17683: EQUAL
17684: PUSH
17685: LD_VAR 0 10
17689: PUSH
17690: LD_VAR 0 14
17694: ARRAY
17695: PUSH
17696: LD_INT 3
17698: EQUAL
17699: OR
17700: IFFALSE 17753
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17702: LD_ADDR_VAR 0 19
17706: PUSH
17707: LD_INT 1
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: LD_INT 3
17715: PUSH
17716: LD_INT 4
17718: PUSH
17719: LD_INT 5
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17729: LD_ADDR_OWVAR 37
17733: PUSH
17734: LD_VAR 0 19
17738: PUSH
17739: LD_INT 1
17741: PPUSH
17742: LD_VAR 0 19
17746: PPUSH
17747: CALL_OW 12
17751: ARRAY
17752: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17753: LD_VAR 0 10
17757: PUSH
17758: LD_VAR 0 14
17762: ARRAY
17763: PUSH
17764: LD_INT 4
17766: EQUAL
17767: PUSH
17768: LD_VAR 0 10
17772: PUSH
17773: LD_VAR 0 14
17777: ARRAY
17778: PUSH
17779: LD_INT 5
17781: EQUAL
17782: OR
17783: PUSH
17784: LD_VAR 0 10
17788: PUSH
17789: LD_VAR 0 14
17793: ARRAY
17794: PUSH
17795: LD_INT 9
17797: EQUAL
17798: OR
17799: PUSH
17800: LD_VAR 0 10
17804: PUSH
17805: LD_VAR 0 14
17809: ARRAY
17810: PUSH
17811: LD_INT 11
17813: EQUAL
17814: OR
17815: PUSH
17816: LD_VAR 0 10
17820: PUSH
17821: LD_VAR 0 14
17825: ARRAY
17826: PUSH
17827: LD_INT 7
17829: EQUAL
17830: OR
17831: IFFALSE 17880
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17833: LD_ADDR_VAR 0 19
17837: PUSH
17838: LD_INT 2
17840: PUSH
17841: LD_INT 3
17843: PUSH
17844: LD_INT 4
17846: PUSH
17847: LD_INT 5
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17856: LD_ADDR_OWVAR 37
17860: PUSH
17861: LD_VAR 0 19
17865: PUSH
17866: LD_INT 1
17868: PPUSH
17869: LD_VAR 0 19
17873: PPUSH
17874: CALL_OW 12
17878: ARRAY
17879: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17880: LD_VAR 0 10
17884: PUSH
17885: LD_VAR 0 14
17889: ARRAY
17890: PUSH
17891: LD_INT 8
17893: EQUAL
17894: PUSH
17895: LD_VAR 0 10
17899: PUSH
17900: LD_VAR 0 14
17904: ARRAY
17905: PUSH
17906: LD_INT 6
17908: EQUAL
17909: OR
17910: PUSH
17911: LD_VAR 0 10
17915: PUSH
17916: LD_VAR 0 14
17920: ARRAY
17921: PUSH
17922: LD_INT 10
17924: EQUAL
17925: OR
17926: IFFALSE 17967
// begin amChassisTab = [ 4 , 5 ] ;
17928: LD_ADDR_VAR 0 19
17932: PUSH
17933: LD_INT 4
17935: PUSH
17936: LD_INT 5
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17943: LD_ADDR_OWVAR 37
17947: PUSH
17948: LD_VAR 0 19
17952: PUSH
17953: LD_INT 1
17955: PPUSH
17956: LD_VAR 0 19
17960: PPUSH
17961: CALL_OW 12
17965: ARRAY
17966: ST_TO_ADDR
// end ; end ;
17967: GO 17667
17969: POP
17970: POP
// veh = CreateVehicle ;
17971: LD_ADDR_VAR 0 16
17975: PUSH
17976: CALL_OW 45
17980: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17981: LD_VAR 0 16
17985: PPUSH
17986: LD_VAR 0 1
17990: PPUSH
17991: LD_INT 0
17993: PPUSH
17994: CALL_OW 49
// if vc_control = 1 then
17998: LD_OWVAR 38
18002: PUSH
18003: LD_INT 1
18005: EQUAL
18006: IFFALSE 18063
// begin hc_gallery =  ;
18008: LD_ADDR_OWVAR 33
18012: PUSH
18013: LD_STRING 
18015: ST_TO_ADDR
// hc_name =  ;
18016: LD_ADDR_OWVAR 26
18020: PUSH
18021: LD_STRING 
18023: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18024: LD_INT 0
18026: PPUSH
18027: LD_INT 3
18029: PPUSH
18030: LD_VAR 0 4
18034: PPUSH
18035: CALL_OW 380
// un = CreateHuman ;
18039: LD_ADDR_VAR 0 15
18043: PUSH
18044: CALL_OW 44
18048: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18049: LD_VAR 0 15
18053: PPUSH
18054: LD_VAR 0 16
18058: PPUSH
18059: CALL_OW 52
// end ; i = i + 1 ;
18063: LD_ADDR_VAR 0 13
18067: PUSH
18068: LD_VAR 0 13
18072: PUSH
18073: LD_INT 1
18075: PLUS
18076: ST_TO_ADDR
// end ; if nation = 2 then
18077: LD_VAR 0 5
18081: PUSH
18082: LD_INT 2
18084: EQUAL
18085: IFFALSE 18507
// begin uc_side = side ;
18087: LD_ADDR_OWVAR 20
18091: PUSH
18092: LD_VAR 0 2
18096: ST_TO_ADDR
// uc_nation = nation ;
18097: LD_ADDR_OWVAR 21
18101: PUSH
18102: LD_VAR 0 5
18106: ST_TO_ADDR
// vc_engine = vehengine ;
18107: LD_ADDR_OWVAR 39
18111: PUSH
18112: LD_VAR 0 6
18116: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18117: LD_ADDR_OWVAR 38
18121: PUSH
18122: LD_VAR 0 7
18126: PUSH
18127: LD_INT 1
18129: PPUSH
18130: LD_VAR 0 7
18134: PPUSH
18135: CALL_OW 12
18139: ARRAY
18140: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
18141: LD_ADDR_OWVAR 40
18145: PUSH
18146: LD_VAR 0 9
18150: PUSH
18151: LD_INT 1
18153: PPUSH
18154: LD_VAR 0 9
18158: PPUSH
18159: CALL_OW 12
18163: ARRAY
18164: ST_TO_ADDR
// for j = 1 to ARWeapons do
18165: LD_ADDR_VAR 0 14
18169: PUSH
18170: DOUBLE
18171: LD_INT 1
18173: DEC
18174: ST_TO_ADDR
18175: LD_VAR 0 9
18179: PUSH
18180: FOR_TO
18181: IFFALSE 18399
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
18183: LD_VAR 0 9
18187: PUSH
18188: LD_VAR 0 14
18192: ARRAY
18193: PUSH
18194: LD_INT 24
18196: EQUAL
18197: PUSH
18198: LD_VAR 0 9
18202: PUSH
18203: LD_VAR 0 14
18207: ARRAY
18208: PUSH
18209: LD_INT 22
18211: EQUAL
18212: OR
18213: PUSH
18214: LD_VAR 0 9
18218: PUSH
18219: LD_VAR 0 14
18223: ARRAY
18224: PUSH
18225: LD_INT 23
18227: EQUAL
18228: OR
18229: PUSH
18230: LD_VAR 0 9
18234: PUSH
18235: LD_VAR 0 14
18239: ARRAY
18240: PUSH
18241: LD_INT 30
18243: EQUAL
18244: OR
18245: IFFALSE 18282
// begin arChassisTab = [ 14 ] ;
18247: LD_ADDR_VAR 0 18
18251: PUSH
18252: LD_INT 14
18254: PUSH
18255: EMPTY
18256: LIST
18257: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18258: LD_ADDR_OWVAR 37
18262: PUSH
18263: LD_VAR 0 18
18267: PUSH
18268: LD_INT 1
18270: PPUSH
18271: LD_VAR 0 18
18275: PPUSH
18276: CALL_OW 12
18280: ARRAY
18281: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
18282: LD_VAR 0 9
18286: PUSH
18287: LD_VAR 0 14
18291: ARRAY
18292: PUSH
18293: LD_INT 29
18295: EQUAL
18296: PUSH
18297: LD_VAR 0 9
18301: PUSH
18302: LD_VAR 0 14
18306: ARRAY
18307: PUSH
18308: LD_INT 28
18310: EQUAL
18311: OR
18312: PUSH
18313: LD_VAR 0 9
18317: PUSH
18318: LD_VAR 0 14
18322: ARRAY
18323: PUSH
18324: LD_INT 27
18326: EQUAL
18327: OR
18328: PUSH
18329: LD_VAR 0 9
18333: PUSH
18334: LD_VAR 0 14
18338: ARRAY
18339: PUSH
18340: LD_INT 26
18342: EQUAL
18343: OR
18344: PUSH
18345: LD_VAR 0 9
18349: PUSH
18350: LD_VAR 0 14
18354: ARRAY
18355: PUSH
18356: LD_INT 25
18358: EQUAL
18359: OR
18360: IFFALSE 18397
// begin arChassisTab = [ 14 ] ;
18362: LD_ADDR_VAR 0 18
18366: PUSH
18367: LD_INT 14
18369: PUSH
18370: EMPTY
18371: LIST
18372: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18373: LD_ADDR_OWVAR 37
18377: PUSH
18378: LD_VAR 0 18
18382: PUSH
18383: LD_INT 1
18385: PPUSH
18386: LD_VAR 0 18
18390: PPUSH
18391: CALL_OW 12
18395: ARRAY
18396: ST_TO_ADDR
// end ; end ;
18397: GO 18180
18399: POP
18400: POP
// veh = CreateVehicle ;
18401: LD_ADDR_VAR 0 16
18405: PUSH
18406: CALL_OW 45
18410: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18411: LD_VAR 0 16
18415: PPUSH
18416: LD_VAR 0 1
18420: PPUSH
18421: LD_INT 0
18423: PPUSH
18424: CALL_OW 49
// if vc_control = 1 then
18428: LD_OWVAR 38
18432: PUSH
18433: LD_INT 1
18435: EQUAL
18436: IFFALSE 18493
// begin hc_gallery =  ;
18438: LD_ADDR_OWVAR 33
18442: PUSH
18443: LD_STRING 
18445: ST_TO_ADDR
// hc_name =  ;
18446: LD_ADDR_OWVAR 26
18450: PUSH
18451: LD_STRING 
18453: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18454: LD_INT 0
18456: PPUSH
18457: LD_INT 3
18459: PPUSH
18460: LD_VAR 0 4
18464: PPUSH
18465: CALL_OW 380
// un = CreateHuman ;
18469: LD_ADDR_VAR 0 15
18473: PUSH
18474: CALL_OW 44
18478: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18479: LD_VAR 0 15
18483: PPUSH
18484: LD_VAR 0 16
18488: PPUSH
18489: CALL_OW 52
// end ; i = i + 1 ;
18493: LD_ADDR_VAR 0 13
18497: PUSH
18498: LD_VAR 0 13
18502: PUSH
18503: LD_INT 1
18505: PLUS
18506: ST_TO_ADDR
// end ; if nation = 3 then
18507: LD_VAR 0 5
18511: PUSH
18512: LD_INT 3
18514: EQUAL
18515: IFFALSE 18921
// begin uc_side = side ;
18517: LD_ADDR_OWVAR 20
18521: PUSH
18522: LD_VAR 0 2
18526: ST_TO_ADDR
// uc_nation = nation ;
18527: LD_ADDR_OWVAR 21
18531: PUSH
18532: LD_VAR 0 5
18536: ST_TO_ADDR
// vc_engine = vehengine ;
18537: LD_ADDR_OWVAR 39
18541: PUSH
18542: LD_VAR 0 6
18546: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18547: LD_ADDR_OWVAR 38
18551: PUSH
18552: LD_VAR 0 7
18556: PUSH
18557: LD_INT 1
18559: PPUSH
18560: LD_VAR 0 7
18564: PPUSH
18565: CALL_OW 12
18569: ARRAY
18570: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18571: LD_ADDR_OWVAR 40
18575: PUSH
18576: LD_VAR 0 8
18580: PUSH
18581: LD_INT 1
18583: PPUSH
18584: LD_VAR 0 8
18588: PPUSH
18589: CALL_OW 12
18593: ARRAY
18594: ST_TO_ADDR
// for j = 1 to RuWeapons do
18595: LD_ADDR_VAR 0 14
18599: PUSH
18600: DOUBLE
18601: LD_INT 1
18603: DEC
18604: ST_TO_ADDR
18605: LD_VAR 0 8
18609: PUSH
18610: FOR_TO
18611: IFFALSE 18813
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18613: LD_VAR 0 8
18617: PUSH
18618: LD_VAR 0 14
18622: ARRAY
18623: PUSH
18624: LD_INT 42
18626: EQUAL
18627: PUSH
18628: LD_VAR 0 8
18632: PUSH
18633: LD_VAR 0 14
18637: ARRAY
18638: PUSH
18639: LD_INT 43
18641: EQUAL
18642: OR
18643: PUSH
18644: LD_VAR 0 8
18648: PUSH
18649: LD_VAR 0 14
18653: ARRAY
18654: PUSH
18655: LD_INT 44
18657: EQUAL
18658: OR
18659: PUSH
18660: LD_VAR 0 8
18664: PUSH
18665: LD_VAR 0 14
18669: ARRAY
18670: PUSH
18671: LD_INT 45
18673: EQUAL
18674: OR
18675: PUSH
18676: LD_VAR 0 8
18680: PUSH
18681: LD_VAR 0 14
18685: ARRAY
18686: PUSH
18687: LD_INT 49
18689: EQUAL
18690: OR
18691: IFFALSE 18740
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18693: LD_ADDR_VAR 0 17
18697: PUSH
18698: LD_INT 21
18700: PUSH
18701: LD_INT 22
18703: PUSH
18704: LD_INT 23
18706: PUSH
18707: LD_INT 24
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18716: LD_ADDR_OWVAR 37
18720: PUSH
18721: LD_VAR 0 17
18725: PUSH
18726: LD_INT 1
18728: PPUSH
18729: LD_VAR 0 17
18733: PPUSH
18734: CALL_OW 12
18738: ARRAY
18739: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18740: LD_VAR 0 8
18744: PUSH
18745: LD_VAR 0 14
18749: ARRAY
18750: PUSH
18751: LD_INT 46
18753: EQUAL
18754: PUSH
18755: LD_VAR 0 8
18759: PUSH
18760: LD_VAR 0 14
18764: ARRAY
18765: PUSH
18766: LD_INT 47
18768: EQUAL
18769: OR
18770: IFFALSE 18811
// begin ruChassisTab = [ 23 , 24 ] ;
18772: LD_ADDR_VAR 0 17
18776: PUSH
18777: LD_INT 23
18779: PUSH
18780: LD_INT 24
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18787: LD_ADDR_OWVAR 37
18791: PUSH
18792: LD_VAR 0 17
18796: PUSH
18797: LD_INT 1
18799: PPUSH
18800: LD_VAR 0 17
18804: PPUSH
18805: CALL_OW 12
18809: ARRAY
18810: ST_TO_ADDR
// end ; end ;
18811: GO 18610
18813: POP
18814: POP
// veh = CreateVehicle ;
18815: LD_ADDR_VAR 0 16
18819: PUSH
18820: CALL_OW 45
18824: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18825: LD_VAR 0 16
18829: PPUSH
18830: LD_VAR 0 1
18834: PPUSH
18835: LD_INT 0
18837: PPUSH
18838: CALL_OW 49
// if vc_control = 1 then
18842: LD_OWVAR 38
18846: PUSH
18847: LD_INT 1
18849: EQUAL
18850: IFFALSE 18907
// begin hc_gallery =  ;
18852: LD_ADDR_OWVAR 33
18856: PUSH
18857: LD_STRING 
18859: ST_TO_ADDR
// hc_name =  ;
18860: LD_ADDR_OWVAR 26
18864: PUSH
18865: LD_STRING 
18867: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18868: LD_INT 0
18870: PPUSH
18871: LD_INT 3
18873: PPUSH
18874: LD_VAR 0 4
18878: PPUSH
18879: CALL_OW 380
// un = CreateHuman ;
18883: LD_ADDR_VAR 0 15
18887: PUSH
18888: CALL_OW 44
18892: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18893: LD_VAR 0 15
18897: PPUSH
18898: LD_VAR 0 16
18902: PPUSH
18903: CALL_OW 52
// end ; i = i + 1 ;
18907: LD_ADDR_VAR 0 13
18911: PUSH
18912: LD_VAR 0 13
18916: PUSH
18917: LD_INT 1
18919: PLUS
18920: ST_TO_ADDR
// end ; until i = vehCount ;
18921: LD_VAR 0 13
18925: PUSH
18926: LD_VAR 0 3
18930: EQUAL
18931: IFFALSE 17557
// repeat wait ( 0 0$1 ) ;
18933: LD_INT 35
18935: PPUSH
18936: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18940: LD_ADDR_VAR 0 20
18944: PUSH
18945: LD_INT 22
18947: PUSH
18948: LD_VAR 0 2
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 21
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 24
18969: PUSH
18970: LD_INT 650
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: ST_TO_ADDR
// if vehicleOK_list > 0 then
18987: LD_VAR 0 20
18991: PUSH
18992: LD_INT 0
18994: GREATER
18995: IFFALSE 19186
// begin for i in vehicleOK_list do
18997: LD_ADDR_VAR 0 13
19001: PUSH
19002: LD_VAR 0 20
19006: PUSH
19007: FOR_IN
19008: IFFALSE 19184
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19010: LD_ADDR_VAR 0 21
19014: PUSH
19015: LD_INT 22
19017: PUSH
19018: LD_VAR 0 11
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 69
19031: PPUSH
19032: LD_VAR 0 13
19036: PPUSH
19037: CALL_OW 74
19041: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19042: LD_ADDR_VAR 0 22
19046: PUSH
19047: LD_INT 22
19049: PUSH
19050: LD_VAR 0 11
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 59
19064: PUSH
19065: EMPTY
19066: LIST
19067: PUSH
19068: LD_INT 21
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 21
19080: PUSH
19081: LD_INT 2
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: EMPTY
19099: LIST
19100: PPUSH
19101: CALL_OW 69
19105: PPUSH
19106: LD_VAR 0 13
19110: PPUSH
19111: CALL_OW 74
19115: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19116: LD_VAR 0 13
19120: PPUSH
19121: LD_VAR 0 21
19125: PPUSH
19126: CALL_OW 296
19130: PUSH
19131: LD_INT 8
19133: PLUS
19134: PUSH
19135: LD_VAR 0 13
19139: PPUSH
19140: LD_VAR 0 22
19144: PPUSH
19145: CALL_OW 296
19149: LESS
19150: IFFALSE 19168
// begin ComAttackUnit ( i , target1 ) ;
19152: LD_VAR 0 13
19156: PPUSH
19157: LD_VAR 0 21
19161: PPUSH
19162: CALL_OW 115
// end else
19166: GO 19182
// begin ComAttackUnit ( i , target2 ) ;
19168: LD_VAR 0 13
19172: PPUSH
19173: LD_VAR 0 22
19177: PPUSH
19178: CALL_OW 115
// end ; end ;
19182: GO 19007
19184: POP
19185: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
19186: LD_INT 22
19188: PUSH
19189: LD_VAR 0 2
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 21
19200: PUSH
19201: LD_INT 2
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: PUSH
19217: LD_INT 0
19219: EQUAL
19220: IFFALSE 18933
// end ;
19222: LD_VAR 0 12
19226: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
19227: LD_INT 0
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
19238: PPUSH
19239: PPUSH
// for i = 1 to soldierCount do
19240: LD_ADDR_VAR 0 13
19244: PUSH
19245: DOUBLE
19246: LD_INT 1
19248: DEC
19249: ST_TO_ADDR
19250: LD_VAR 0 3
19254: PUSH
19255: FOR_TO
19256: IFFALSE 19338
// begin uc_side = side ;
19258: LD_ADDR_OWVAR 20
19262: PUSH
19263: LD_VAR 0 1
19267: ST_TO_ADDR
// uc_nation = nation ;
19268: LD_ADDR_OWVAR 21
19272: PUSH
19273: LD_VAR 0 2
19277: ST_TO_ADDR
// hc_name =  ;
19278: LD_ADDR_OWVAR 26
19282: PUSH
19283: LD_STRING 
19285: ST_TO_ADDR
// hc_gallery =  ;
19286: LD_ADDR_OWVAR 33
19290: PUSH
19291: LD_STRING 
19293: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
19294: LD_INT 0
19296: PPUSH
19297: LD_INT 1
19299: PPUSH
19300: LD_VAR 0 8
19304: PPUSH
19305: CALL_OW 380
// un = CreateHuman ;
19309: LD_ADDR_VAR 0 15
19313: PUSH
19314: CALL_OW 44
19318: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19319: LD_VAR 0 15
19323: PPUSH
19324: LD_VAR 0 9
19328: PPUSH
19329: LD_INT 0
19331: PPUSH
19332: CALL_OW 49
// end ;
19336: GO 19255
19338: POP
19339: POP
// for i = 1 to sniperCount do
19340: LD_ADDR_VAR 0 13
19344: PUSH
19345: DOUBLE
19346: LD_INT 1
19348: DEC
19349: ST_TO_ADDR
19350: LD_VAR 0 4
19354: PUSH
19355: FOR_TO
19356: IFFALSE 19438
// begin uc_side = side ;
19358: LD_ADDR_OWVAR 20
19362: PUSH
19363: LD_VAR 0 1
19367: ST_TO_ADDR
// uc_nation = nation ;
19368: LD_ADDR_OWVAR 21
19372: PUSH
19373: LD_VAR 0 2
19377: ST_TO_ADDR
// hc_name =  ;
19378: LD_ADDR_OWVAR 26
19382: PUSH
19383: LD_STRING 
19385: ST_TO_ADDR
// hc_gallery =  ;
19386: LD_ADDR_OWVAR 33
19390: PUSH
19391: LD_STRING 
19393: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19394: LD_INT 0
19396: PPUSH
19397: LD_INT 5
19399: PPUSH
19400: LD_VAR 0 8
19404: PPUSH
19405: CALL_OW 380
// un = CreateHuman ;
19409: LD_ADDR_VAR 0 15
19413: PUSH
19414: CALL_OW 44
19418: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19419: LD_VAR 0 15
19423: PPUSH
19424: LD_VAR 0 9
19428: PPUSH
19429: LD_INT 0
19431: PPUSH
19432: CALL_OW 49
// end ;
19436: GO 19355
19438: POP
19439: POP
// for i = 1 to bazookCount do
19440: LD_ADDR_VAR 0 13
19444: PUSH
19445: DOUBLE
19446: LD_INT 1
19448: DEC
19449: ST_TO_ADDR
19450: LD_VAR 0 5
19454: PUSH
19455: FOR_TO
19456: IFFALSE 19538
// begin uc_side = side ;
19458: LD_ADDR_OWVAR 20
19462: PUSH
19463: LD_VAR 0 1
19467: ST_TO_ADDR
// uc_nation = nation ;
19468: LD_ADDR_OWVAR 21
19472: PUSH
19473: LD_VAR 0 2
19477: ST_TO_ADDR
// hc_name =  ;
19478: LD_ADDR_OWVAR 26
19482: PUSH
19483: LD_STRING 
19485: ST_TO_ADDR
// hc_gallery =  ;
19486: LD_ADDR_OWVAR 33
19490: PUSH
19491: LD_STRING 
19493: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19494: LD_INT 0
19496: PPUSH
19497: LD_INT 9
19499: PPUSH
19500: LD_VAR 0 8
19504: PPUSH
19505: CALL_OW 380
// un = CreateHuman ;
19509: LD_ADDR_VAR 0 15
19513: PUSH
19514: CALL_OW 44
19518: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19519: LD_VAR 0 15
19523: PPUSH
19524: LD_VAR 0 9
19528: PPUSH
19529: LD_INT 0
19531: PPUSH
19532: CALL_OW 49
// end ;
19536: GO 19455
19538: POP
19539: POP
// for i = 1 to mortalCount do
19540: LD_ADDR_VAR 0 13
19544: PUSH
19545: DOUBLE
19546: LD_INT 1
19548: DEC
19549: ST_TO_ADDR
19550: LD_VAR 0 6
19554: PUSH
19555: FOR_TO
19556: IFFALSE 19638
// begin uc_side = side ;
19558: LD_ADDR_OWVAR 20
19562: PUSH
19563: LD_VAR 0 1
19567: ST_TO_ADDR
// uc_nation = nation ;
19568: LD_ADDR_OWVAR 21
19572: PUSH
19573: LD_VAR 0 2
19577: ST_TO_ADDR
// hc_name =  ;
19578: LD_ADDR_OWVAR 26
19582: PUSH
19583: LD_STRING 
19585: ST_TO_ADDR
// hc_gallery =  ;
19586: LD_ADDR_OWVAR 33
19590: PUSH
19591: LD_STRING 
19593: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19594: LD_INT 0
19596: PPUSH
19597: LD_INT 8
19599: PPUSH
19600: LD_VAR 0 8
19604: PPUSH
19605: CALL_OW 380
// un = CreateHuman ;
19609: LD_ADDR_VAR 0 15
19613: PUSH
19614: CALL_OW 44
19618: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19619: LD_VAR 0 15
19623: PPUSH
19624: LD_VAR 0 9
19628: PPUSH
19629: LD_INT 0
19631: PPUSH
19632: CALL_OW 49
// end ;
19636: GO 19555
19638: POP
19639: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19640: LD_ADDR_VAR 0 18
19644: PUSH
19645: LD_INT 22
19647: PUSH
19648: LD_VAR 0 1
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: LD_INT 25
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 25
19672: PUSH
19673: LD_INT 5
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 25
19682: PUSH
19683: LD_INT 8
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 25
19692: PUSH
19693: LD_INT 9
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PPUSH
19711: CALL_OW 69
19715: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19716: LD_ADDR_VAR 0 17
19720: PUSH
19721: LD_INT 22
19723: PUSH
19724: LD_VAR 0 1
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 25
19735: PUSH
19736: LD_INT 4
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL_OW 69
19751: ST_TO_ADDR
// for i in medic_list do
19752: LD_ADDR_VAR 0 13
19756: PUSH
19757: LD_VAR 0 17
19761: PUSH
19762: FOR_IN
19763: IFFALSE 19781
// ComMoveToArea ( i , healArea ) ;
19765: LD_VAR 0 13
19769: PPUSH
19770: LD_VAR 0 10
19774: PPUSH
19775: CALL_OW 113
19779: GO 19762
19781: POP
19782: POP
// repeat wait ( 0 0$1 ) ;
19783: LD_INT 35
19785: PPUSH
19786: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19790: LD_ADDR_VAR 0 16
19794: PUSH
19795: LD_INT 22
19797: PUSH
19798: LD_VAR 0 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: LD_INT 3
19812: PUSH
19813: LD_INT 24
19815: PUSH
19816: LD_INT 550
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 24
19829: PUSH
19830: LD_INT 250
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PPUSH
19846: CALL_OW 69
19850: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19851: LD_ADDR_VAR 0 18
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_VAR 0 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: LD_INT 25
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 25
19883: PUSH
19884: LD_INT 5
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 25
19893: PUSH
19894: LD_INT 8
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 25
19903: PUSH
19904: LD_INT 9
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 24
19920: PUSH
19921: LD_INT 1000
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: LIST
19932: PPUSH
19933: CALL_OW 69
19937: ST_TO_ADDR
// if medicCount > 0 then
19938: LD_VAR 0 7
19942: PUSH
19943: LD_INT 0
19945: GREATER
19946: IFFALSE 20020
// begin if damageUnit_list > 0 then
19948: LD_VAR 0 16
19952: PUSH
19953: LD_INT 0
19955: GREATER
19956: IFFALSE 20020
// begin for i in damageUnit_list do
19958: LD_ADDR_VAR 0 13
19962: PUSH
19963: LD_VAR 0 16
19967: PUSH
19968: FOR_IN
19969: IFFALSE 20018
// begin ComMoveToArea ( i , healArea ) ;
19971: LD_VAR 0 13
19975: PPUSH
19976: LD_VAR 0 10
19980: PPUSH
19981: CALL_OW 113
// for j in medic_list do
19985: LD_ADDR_VAR 0 14
19989: PUSH
19990: LD_VAR 0 17
19994: PUSH
19995: FOR_IN
19996: IFFALSE 20014
// AddComHeal ( j , i ) ;
19998: LD_VAR 0 14
20002: PPUSH
20003: LD_VAR 0 13
20007: PPUSH
20008: CALL_OW 188
20012: GO 19995
20014: POP
20015: POP
// end ;
20016: GO 19968
20018: POP
20019: POP
// end ; end ; for i in soldiersOK_list do
20020: LD_ADDR_VAR 0 13
20024: PUSH
20025: LD_VAR 0 18
20029: PUSH
20030: FOR_IN
20031: IFFALSE 20207
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20033: LD_ADDR_VAR 0 21
20037: PUSH
20038: LD_INT 22
20040: PUSH
20041: LD_VAR 0 11
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PPUSH
20050: CALL_OW 69
20054: PPUSH
20055: LD_VAR 0 13
20059: PPUSH
20060: CALL_OW 74
20064: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20065: LD_ADDR_VAR 0 22
20069: PUSH
20070: LD_INT 22
20072: PUSH
20073: LD_VAR 0 11
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 2
20084: PUSH
20085: LD_INT 59
20087: PUSH
20088: EMPTY
20089: LIST
20090: PUSH
20091: LD_INT 21
20093: PUSH
20094: LD_INT 1
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 21
20103: PUSH
20104: LD_INT 2
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: PPUSH
20124: CALL_OW 69
20128: PPUSH
20129: LD_VAR 0 13
20133: PPUSH
20134: CALL_OW 74
20138: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20139: LD_VAR 0 13
20143: PPUSH
20144: LD_VAR 0 21
20148: PPUSH
20149: CALL_OW 296
20153: PUSH
20154: LD_INT 8
20156: PLUS
20157: PUSH
20158: LD_VAR 0 13
20162: PPUSH
20163: LD_VAR 0 22
20167: PPUSH
20168: CALL_OW 296
20172: LESS
20173: IFFALSE 20191
// begin ComAttackUnit ( i , target1 ) ;
20175: LD_VAR 0 13
20179: PPUSH
20180: LD_VAR 0 21
20184: PPUSH
20185: CALL_OW 115
// end else
20189: GO 20205
// begin ComAttackUnit ( i , target2 ) ;
20191: LD_VAR 0 13
20195: PPUSH
20196: LD_VAR 0 22
20200: PPUSH
20201: CALL_OW 115
// end ; end ;
20205: GO 20030
20207: POP
20208: POP
// for i in soldiersOK_list do
20209: LD_ADDR_VAR 0 13
20213: PUSH
20214: LD_VAR 0 18
20218: PUSH
20219: FOR_IN
20220: IFFALSE 20396
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20222: LD_ADDR_VAR 0 21
20226: PUSH
20227: LD_INT 22
20229: PUSH
20230: LD_VAR 0 11
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PPUSH
20239: CALL_OW 69
20243: PPUSH
20244: LD_VAR 0 13
20248: PPUSH
20249: CALL_OW 74
20253: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20254: LD_ADDR_VAR 0 22
20258: PUSH
20259: LD_INT 22
20261: PUSH
20262: LD_VAR 0 11
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: LD_INT 59
20276: PUSH
20277: EMPTY
20278: LIST
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 21
20292: PUSH
20293: LD_INT 2
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: EMPTY
20311: LIST
20312: PPUSH
20313: CALL_OW 69
20317: PPUSH
20318: LD_VAR 0 13
20322: PPUSH
20323: CALL_OW 74
20327: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20328: LD_VAR 0 13
20332: PPUSH
20333: LD_VAR 0 21
20337: PPUSH
20338: CALL_OW 296
20342: PUSH
20343: LD_INT 8
20345: PLUS
20346: PUSH
20347: LD_VAR 0 13
20351: PPUSH
20352: LD_VAR 0 22
20356: PPUSH
20357: CALL_OW 296
20361: LESS
20362: IFFALSE 20380
// begin ComAttackUnit ( i , target1 ) ;
20364: LD_VAR 0 13
20368: PPUSH
20369: LD_VAR 0 21
20373: PPUSH
20374: CALL_OW 115
// end else
20378: GO 20394
// begin ComAttackUnit ( i , target2 ) ;
20380: LD_VAR 0 13
20384: PPUSH
20385: LD_VAR 0 22
20389: PPUSH
20390: CALL_OW 115
// end ; end ;
20394: GO 20219
20396: POP
20397: POP
// until soldiersOK_list = [ ] ;
20398: LD_VAR 0 18
20402: PUSH
20403: EMPTY
20404: EQUAL
20405: IFFALSE 19783
// end ;
20407: LD_VAR 0 12
20411: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20412: LD_INT 0
20414: PPUSH
20415: PPUSH
20416: PPUSH
20417: PPUSH
20418: PPUSH
20419: PPUSH
20420: PPUSH
// repeat wait ( 0 0$1 ) ;
20421: LD_INT 35
20423: PPUSH
20424: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20428: LD_ADDR_VAR 0 7
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 25
20445: PUSH
20446: LD_INT 4
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 3
20455: PUSH
20456: LD_INT 60
20458: PUSH
20459: EMPTY
20460: LIST
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: LIST
20470: PPUSH
20471: CALL_OW 69
20475: ST_TO_ADDR
// if not tmp then
20476: LD_VAR 0 7
20480: NOT
20481: IFFALSE 20485
// continue ;
20483: GO 20421
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: LD_INT 5
20492: PPUSH
20493: LD_INT 22
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 25
20505: PUSH
20506: LD_INT 12
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PPUSH
20517: CALL_OW 70
20521: PUSH
20522: FOR_IN
20523: IFFALSE 20556
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20525: LD_VAR 0 7
20529: PPUSH
20530: LD_VAR 0 3
20534: PPUSH
20535: CALL_OW 250
20539: PPUSH
20540: LD_VAR 0 3
20544: PPUSH
20545: CALL_OW 251
20549: PPUSH
20550: CALL_OW 131
20554: GO 20522
20556: POP
20557: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20558: LD_INT 22
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 25
20570: PUSH
20571: LD_INT 4
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PPUSH
20582: CALL_OW 69
20586: PUSH
20587: LD_INT 0
20589: EQUAL
20590: PUSH
20591: LD_INT 5
20593: PPUSH
20594: LD_INT 22
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 25
20606: PUSH
20607: LD_INT 12
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PPUSH
20618: CALL_OW 70
20622: PUSH
20623: LD_INT 2
20625: LESS
20626: OR
20627: PUSH
20628: LD_OWVAR 1
20632: PUSH
20633: LD_INT 7000
20635: GREATEREQUAL
20636: OR
20637: IFFALSE 20421
// repeat wait ( 0 0$1 ) ;
20639: LD_INT 35
20641: PPUSH
20642: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20646: LD_ADDR_VAR 0 5
20650: PUSH
20651: LD_INT 22
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 5
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PPUSH
20675: CALL_OW 69
20679: ST_TO_ADDR
// until arm ;
20680: LD_VAR 0 5
20684: IFFALSE 20639
// wait ( 0 0$25 ) ;
20686: LD_INT 875
20688: PPUSH
20689: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20693: LD_ADDR_VAR 0 6
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: PUSH
20711: LD_INT 30
20713: PUSH
20714: LD_INT 0
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 30
20723: PUSH
20724: LD_INT 1
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PPUSH
20740: CALL_OW 69
20744: ST_TO_ADDR
// j := 0 ;
20745: LD_ADDR_VAR 0 3
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20753: LD_ADDR_VAR 0 2
20757: PUSH
20758: LD_INT 22
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 25
20770: PUSH
20771: LD_INT 12
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PPUSH
20782: CALL_OW 69
20786: PUSH
20787: FOR_IN
20788: IFFALSE 20875
// begin ComMoveXY ( i , 63 , 16 ) ;
20790: LD_VAR 0 2
20794: PPUSH
20795: LD_INT 63
20797: PPUSH
20798: LD_INT 16
20800: PPUSH
20801: CALL_OW 111
// j := j + 1 ;
20805: LD_ADDR_VAR 0 3
20809: PUSH
20810: LD_VAR 0 3
20814: PUSH
20815: LD_INT 1
20817: PLUS
20818: ST_TO_ADDR
// if j < 5 then
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 5
20826: LESS
20827: IFFALSE 20845
// b := arm [ 1 ] else
20829: LD_ADDR_VAR 0 4
20833: PUSH
20834: LD_VAR 0 5
20838: PUSH
20839: LD_INT 1
20841: ARRAY
20842: ST_TO_ADDR
20843: GO 20859
// b := dep [ 1 ] ;
20845: LD_ADDR_VAR 0 4
20849: PUSH
20850: LD_VAR 0 6
20854: PUSH
20855: LD_INT 1
20857: ARRAY
20858: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20859: LD_VAR 0 2
20863: PPUSH
20864: LD_VAR 0 4
20868: PPUSH
20869: CALL_OW 180
// end ;
20873: GO 20787
20875: POP
20876: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20877: LD_ADDR_VAR 0 2
20881: PUSH
20882: LD_INT 22
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 25
20894: PUSH
20895: LD_INT 4
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PPUSH
20906: CALL_OW 69
20910: PUSH
20911: FOR_IN
20912: IFFALSE 20958
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20914: LD_VAR 0 2
20918: PPUSH
20919: LD_INT 22
20921: PUSH
20922: LD_INT 2
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 30
20931: PUSH
20932: LD_INT 8
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PPUSH
20943: CALL_OW 69
20947: PUSH
20948: LD_INT 1
20950: ARRAY
20951: PPUSH
20952: CALL_OW 120
20956: GO 20911
20958: POP
20959: POP
// end ;
20960: LD_VAR 0 1
20964: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20965: LD_INT 0
20967: PPUSH
20968: PPUSH
20969: PPUSH
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
20974: PPUSH
20975: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20976: LD_INT 22
20978: PUSH
20979: LD_VAR 0 1
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 21
20990: PUSH
20991: LD_INT 2
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PPUSH
21002: CALL_OW 69
21006: PUSH
21007: LD_VAR 0 3
21011: LESSEQUAL
21012: IFFALSE 21156
// for i = 1 to vehCount do
21014: LD_ADDR_VAR 0 10
21018: PUSH
21019: DOUBLE
21020: LD_INT 1
21022: DEC
21023: ST_TO_ADDR
21024: LD_VAR 0 3
21028: PUSH
21029: FOR_TO
21030: IFFALSE 21154
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
21032: LD_ADDR_VAR 0 12
21036: PUSH
21037: LD_VAR 0 5
21041: PUSH
21042: LD_INT 1
21044: PPUSH
21045: LD_VAR 0 5
21049: PPUSH
21050: CALL_OW 12
21054: ARRAY
21055: ST_TO_ADDR
// if randWeapon = 46 then
21056: LD_VAR 0 12
21060: PUSH
21061: LD_INT 46
21063: EQUAL
21064: IFFALSE 21109
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
21066: LD_VAR 0 2
21070: PPUSH
21071: LD_INT 24
21073: PPUSH
21074: LD_VAR 0 6
21078: PPUSH
21079: LD_VAR 0 7
21083: PUSH
21084: LD_INT 1
21086: PPUSH
21087: LD_VAR 0 7
21091: PPUSH
21092: CALL_OW 12
21096: ARRAY
21097: PPUSH
21098: LD_VAR 0 12
21102: PPUSH
21103: CALL_OW 185
21107: GO 21152
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
21109: LD_VAR 0 2
21113: PPUSH
21114: LD_VAR 0 8
21118: PPUSH
21119: LD_VAR 0 6
21123: PPUSH
21124: LD_VAR 0 7
21128: PUSH
21129: LD_INT 1
21131: PPUSH
21132: LD_VAR 0 7
21136: PPUSH
21137: CALL_OW 12
21141: ARRAY
21142: PPUSH
21143: LD_VAR 0 12
21147: PPUSH
21148: CALL_OW 185
// end ;
21152: GO 21029
21154: POP
21155: POP
// repeat wait ( 0 0$1 ) ;
21156: LD_INT 35
21158: PPUSH
21159: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
21163: LD_INT 22
21165: PUSH
21166: LD_VAR 0 1
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 21
21177: PUSH
21178: LD_INT 2
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 24
21187: PUSH
21188: LD_INT 250
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: LIST
21199: PPUSH
21200: CALL_OW 69
21204: PUSH
21205: LD_VAR 0 3
21209: GREATEREQUAL
21210: IFFALSE 21156
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
21212: LD_INT 22
21214: PUSH
21215: LD_VAR 0 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 21
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 24
21236: PUSH
21237: LD_INT 250
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: PPUSH
21249: CALL_OW 69
21253: PUSH
21254: LD_VAR 0 3
21258: GREATEREQUAL
21259: IFFALSE 21602
// begin repeat begin wait ( 0 0$1 ) ;
21261: LD_INT 35
21263: PPUSH
21264: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
21268: LD_INT 22
21270: PUSH
21271: LD_VAR 0 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 21
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 24
21292: PUSH
21293: LD_INT 651
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: LIST
21304: PPUSH
21305: CALL_OW 69
21309: PUSH
21310: LD_INT 0
21312: GREATER
21313: IFFALSE 21541
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21315: LD_ADDR_VAR 0 10
21319: PUSH
21320: LD_INT 22
21322: PUSH
21323: LD_VAR 0 1
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 21
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 24
21344: PUSH
21345: LD_INT 651
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: PPUSH
21357: CALL_OW 69
21361: PUSH
21362: FOR_IN
21363: IFFALSE 21539
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21365: LD_ADDR_VAR 0 16
21369: PUSH
21370: LD_INT 22
21372: PUSH
21373: LD_VAR 0 4
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PPUSH
21382: CALL_OW 69
21386: PPUSH
21387: LD_VAR 0 10
21391: PPUSH
21392: CALL_OW 74
21396: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21397: LD_ADDR_VAR 0 17
21401: PUSH
21402: LD_INT 22
21404: PUSH
21405: LD_VAR 0 4
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 2
21416: PUSH
21417: LD_INT 59
21419: PUSH
21420: EMPTY
21421: LIST
21422: PUSH
21423: LD_INT 21
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 21
21435: PUSH
21436: LD_INT 2
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: EMPTY
21454: LIST
21455: PPUSH
21456: CALL_OW 69
21460: PPUSH
21461: LD_VAR 0 10
21465: PPUSH
21466: CALL_OW 74
21470: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21471: LD_VAR 0 10
21475: PPUSH
21476: LD_VAR 0 16
21480: PPUSH
21481: CALL_OW 296
21485: PUSH
21486: LD_INT 8
21488: PLUS
21489: PUSH
21490: LD_VAR 0 10
21494: PPUSH
21495: LD_VAR 0 17
21499: PPUSH
21500: CALL_OW 296
21504: LESS
21505: IFFALSE 21523
// begin ComAttackUnit ( i , target1 ) ;
21507: LD_VAR 0 10
21511: PPUSH
21512: LD_VAR 0 16
21516: PPUSH
21517: CALL_OW 115
// end else
21521: GO 21537
// begin ComAttackUnit ( i , target2 ) ;
21523: LD_VAR 0 10
21527: PPUSH
21528: LD_VAR 0 17
21532: PPUSH
21533: CALL_OW 115
// end ; end ;
21537: GO 21362
21539: POP
21540: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21541: LD_INT 22
21543: PUSH
21544: LD_VAR 0 1
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 21
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PPUSH
21567: CALL_OW 69
21571: PUSH
21572: LD_INT 0
21574: EQUAL
21575: PUSH
21576: LD_INT 22
21578: PUSH
21579: LD_VAR 0 4
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: PPUSH
21591: CALL_OW 69
21595: PUSH
21596: LD_INT 0
21598: EQUAL
21599: OR
21600: IFFALSE 21261
// end ; end ;
21602: LD_VAR 0 9
21606: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21607: LD_INT 0
21609: PPUSH
21610: PPUSH
21611: PPUSH
21612: PPUSH
// r := 100 ;
21613: LD_ADDR_VAR 0 5
21617: PUSH
21618: LD_INT 100
21620: ST_TO_ADDR
// x := 0 ;
21621: LD_ADDR_VAR 0 6
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// while ( x < n ) do
21629: LD_VAR 0 6
21633: PUSH
21634: LD_VAR 0 2
21638: LESS
21639: IFFALSE 21926
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21641: LD_ADDR_VAR 0 4
21645: PUSH
21646: DOUBLE
21647: LD_INT 1
21649: DEC
21650: ST_TO_ADDR
21651: LD_VAR 0 1
21655: PPUSH
21656: LD_INT 0
21658: PPUSH
21659: CALL_OW 517
21663: PUSH
21664: LD_INT 1
21666: ARRAY
21667: PUSH
21668: FOR_TO
21669: IFFALSE 21922
// begin if r > 50 then
21671: LD_VAR 0 5
21675: PUSH
21676: LD_INT 50
21678: GREATER
21679: IFFALSE 21898
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21681: LD_VAR 0 1
21685: PPUSH
21686: LD_INT 0
21688: PPUSH
21689: CALL_OW 517
21693: PUSH
21694: LD_INT 1
21696: ARRAY
21697: PUSH
21698: LD_VAR 0 4
21702: ARRAY
21703: PPUSH
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_INT 0
21711: PPUSH
21712: CALL_OW 517
21716: PUSH
21717: LD_INT 2
21719: ARRAY
21720: PUSH
21721: LD_VAR 0 4
21725: ARRAY
21726: PPUSH
21727: CALL_OW 458
21731: NOT
21732: IFFALSE 21882
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: LD_INT 0
21741: PPUSH
21742: CALL_OW 517
21746: PUSH
21747: LD_INT 1
21749: ARRAY
21750: PUSH
21751: LD_VAR 0 4
21755: ARRAY
21756: PPUSH
21757: LD_VAR 0 1
21761: PPUSH
21762: LD_INT 0
21764: PPUSH
21765: CALL_OW 517
21769: PUSH
21770: LD_INT 2
21772: ARRAY
21773: PUSH
21774: LD_VAR 0 4
21778: ARRAY
21779: PPUSH
21780: LD_INT 5
21782: PPUSH
21783: LD_INT 0
21785: PPUSH
21786: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21790: LD_ADDR_EXP 51
21794: PUSH
21795: LD_EXP 51
21799: PPUSH
21800: LD_INT 1
21802: PPUSH
21803: LD_VAR 0 1
21807: PPUSH
21808: LD_INT 0
21810: PPUSH
21811: CALL_OW 517
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: PUSH
21820: LD_VAR 0 4
21824: ARRAY
21825: PUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: LD_INT 0
21833: PPUSH
21834: CALL_OW 517
21838: PUSH
21839: LD_INT 2
21841: ARRAY
21842: PUSH
21843: LD_VAR 0 4
21847: ARRAY
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PPUSH
21853: CALL_OW 2
21857: ST_TO_ADDR
// r := 0 ;
21858: LD_ADDR_VAR 0 5
21862: PUSH
21863: LD_INT 0
21865: ST_TO_ADDR
// x := x + 1 ;
21866: LD_ADDR_VAR 0 6
21870: PUSH
21871: LD_VAR 0 6
21875: PUSH
21876: LD_INT 1
21878: PLUS
21879: ST_TO_ADDR
// end else
21880: GO 21896
// r := r + 35 ;
21882: LD_ADDR_VAR 0 5
21886: PUSH
21887: LD_VAR 0 5
21891: PUSH
21892: LD_INT 35
21894: PLUS
21895: ST_TO_ADDR
// end else
21896: GO 21920
// r := r + rand ( 10 , 25 ) ;
21898: LD_ADDR_VAR 0 5
21902: PUSH
21903: LD_VAR 0 5
21907: PUSH
21908: LD_INT 10
21910: PPUSH
21911: LD_INT 25
21913: PPUSH
21914: CALL_OW 12
21918: PLUS
21919: ST_TO_ADDR
// end ;
21920: GO 21668
21922: POP
21923: POP
21924: GO 21629
// end ; end_of_file
21926: LD_VAR 0 3
21930: RET
// every 0 0$1 trigger russianAI = 1 do
21931: LD_EXP 40
21935: PUSH
21936: LD_INT 1
21938: EQUAL
21939: IFFALSE 22158
21941: GO 21943
21943: DISABLE
// begin enable ;
21944: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21945: LD_INT 3
21947: PPUSH
21948: LD_EXP 31
21952: PPUSH
21953: CALL 16409 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21957: LD_INT 3
21959: PPUSH
21960: LD_EXP 43
21964: PPUSH
21965: CALL 16769 0 2
// if ruPossition = 1 then
21969: LD_EXP 42
21973: PUSH
21974: LD_INT 1
21976: EQUAL
21977: IFFALSE 22032
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21979: LD_INT 3
21981: PPUSH
21982: LD_INT 13
21984: PPUSH
21985: LD_INT 10
21987: PPUSH
21988: LD_INT 22
21990: PUSH
21991: LD_INT 3
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 21
22000: PUSH
22001: LD_INT 3
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 8
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: LIST
22022: PPUSH
22023: CALL_OW 69
22027: PPUSH
22028: CALL 16975 0 4
// if ruPossition = 2 then
22032: LD_EXP 42
22036: PUSH
22037: LD_INT 2
22039: EQUAL
22040: IFFALSE 22095
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22042: LD_INT 3
22044: PPUSH
22045: LD_INT 14
22047: PPUSH
22048: LD_INT 11
22050: PPUSH
22051: LD_INT 22
22053: PUSH
22054: LD_INT 3
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 21
22063: PUSH
22064: LD_INT 3
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_INT 8
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: LIST
22085: PPUSH
22086: CALL_OW 69
22090: PPUSH
22091: CALL 16975 0 4
// if ruPossition = 3 then
22095: LD_EXP 42
22099: PUSH
22100: LD_INT 3
22102: EQUAL
22103: IFFALSE 22158
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22105: LD_INT 3
22107: PPUSH
22108: LD_INT 15
22110: PPUSH
22111: LD_INT 12
22113: PPUSH
22114: LD_INT 22
22116: PUSH
22117: LD_INT 3
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 21
22126: PUSH
22127: LD_INT 3
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 30
22136: PUSH
22137: LD_INT 8
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: PPUSH
22149: CALL_OW 69
22153: PPUSH
22154: CALL 16975 0 4
// end ;
22158: END
// every 0 0$1 do
22159: GO 22161
22161: DISABLE
// begin enable ;
22162: ENABLE
// if ruPossition = 1 then
22163: LD_EXP 42
22167: PUSH
22168: LD_INT 1
22170: EQUAL
22171: IFFALSE 22183
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
22173: LD_INT 3
22175: PPUSH
22176: LD_INT 10
22178: PPUSH
22179: CALL 16046 0 2
// if ruPossition = 2 then
22183: LD_EXP 42
22187: PUSH
22188: LD_INT 2
22190: EQUAL
22191: IFFALSE 22203
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
22193: LD_INT 3
22195: PPUSH
22196: LD_INT 11
22198: PPUSH
22199: CALL 16046 0 2
// if ruPossition = 3 then
22203: LD_EXP 42
22207: PUSH
22208: LD_INT 3
22210: EQUAL
22211: IFFALSE 22223
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
22213: LD_INT 3
22215: PPUSH
22216: LD_INT 12
22218: PPUSH
22219: CALL 16046 0 2
// IntBazooka ( 3 , 1 ) ;
22223: LD_INT 3
22225: PPUSH
22226: LD_INT 1
22228: PPUSH
22229: CALL 14845 0 2
// IntBazooka ( 6 , 1 ) ;
22233: LD_INT 6
22235: PPUSH
22236: LD_INT 1
22238: PPUSH
22239: CALL 14845 0 2
// end ;
22243: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22244: LD_EXP 40
22248: PUSH
22249: LD_INT 1
22251: EQUAL
22252: PUSH
22253: LD_EXP 36
22257: PPUSH
22258: CALL_OW 302
22262: AND
22263: PUSH
22264: LD_EXP 36
22268: PPUSH
22269: CALL_OW 255
22273: PUSH
22274: LD_INT 3
22276: EQUAL
22277: AND
22278: PUSH
22279: LD_INT 22
22281: PUSH
22282: LD_INT 3
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 21
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 33
22301: PUSH
22302: LD_INT 3
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: LIST
22313: PPUSH
22314: CALL_OW 69
22318: PUSH
22319: LD_INT 0
22321: EQUAL
22322: AND
22323: IFFALSE 22531
22325: GO 22327
22327: DISABLE
// begin enable ;
22328: ENABLE
// if Difficulty = 1 then
22329: LD_OWVAR 67
22333: PUSH
22334: LD_INT 1
22336: EQUAL
22337: IFFALSE 22399
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22339: LD_INT 3
22341: PPUSH
22342: LD_EXP 36
22346: PPUSH
22347: LD_INT 5
22349: PPUSH
22350: LD_INT 8
22352: PPUSH
22353: CALL_OW 12
22357: PPUSH
22358: LD_INT 1
22360: PPUSH
22361: LD_INT 43
22363: PUSH
22364: LD_INT 44
22366: PUSH
22367: LD_INT 45
22369: PUSH
22370: LD_INT 46
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: PPUSH
22379: LD_INT 1
22381: PPUSH
22382: LD_INT 3
22384: PUSH
22385: LD_INT 3
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PPUSH
22392: LD_INT 22
22394: PPUSH
22395: CALL 20965 0 8
// if Difficulty = 2 then
22399: LD_OWVAR 67
22403: PUSH
22404: LD_INT 2
22406: EQUAL
22407: IFFALSE 22465
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22409: LD_INT 3
22411: PPUSH
22412: LD_EXP 36
22416: PPUSH
22417: LD_INT 6
22419: PPUSH
22420: LD_INT 8
22422: PPUSH
22423: CALL_OW 12
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: LD_INT 44
22433: PUSH
22434: LD_INT 45
22436: PUSH
22437: LD_INT 46
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: PPUSH
22445: LD_INT 1
22447: PPUSH
22448: LD_INT 3
22450: PUSH
22451: LD_INT 3
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PPUSH
22458: LD_INT 22
22460: PPUSH
22461: CALL 20965 0 8
// if Difficulty >= 3 then
22465: LD_OWVAR 67
22469: PUSH
22470: LD_INT 3
22472: GREATEREQUAL
22473: IFFALSE 22531
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22475: LD_INT 3
22477: PPUSH
22478: LD_EXP 36
22482: PPUSH
22483: LD_INT 7
22485: PPUSH
22486: LD_INT 8
22488: PPUSH
22489: CALL_OW 12
22493: PPUSH
22494: LD_INT 1
22496: PPUSH
22497: LD_INT 44
22499: PUSH
22500: LD_INT 45
22502: PUSH
22503: LD_INT 46
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: PPUSH
22511: LD_INT 1
22513: PPUSH
22514: LD_INT 3
22516: PUSH
22517: LD_INT 3
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PPUSH
22524: LD_INT 22
22526: PPUSH
22527: CALL 20965 0 8
// end ;
22531: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22532: LD_EXP 51
22536: PUSH
22537: LD_EXP 50
22541: AND
22542: IFFALSE 22663
22544: GO 22546
22546: DISABLE
22547: LD_INT 0
22549: PPUSH
// begin enable ;
22550: ENABLE
// for i in arabianMines do
22551: LD_ADDR_VAR 0 1
22555: PUSH
22556: LD_EXP 51
22560: PUSH
22561: FOR_IN
22562: IFFALSE 22661
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22564: LD_INT 22
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 92
22576: PUSH
22577: LD_VAR 0 1
22581: PUSH
22582: LD_INT 1
22584: ARRAY
22585: PUSH
22586: LD_VAR 0 1
22590: PUSH
22591: LD_INT 2
22593: ARRAY
22594: PUSH
22595: LD_INT 3
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PPUSH
22608: CALL_OW 69
22612: IFFALSE 22659
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22614: LD_VAR 0 1
22618: PUSH
22619: LD_INT 1
22621: ARRAY
22622: PPUSH
22623: LD_VAR 0 1
22627: PUSH
22628: LD_INT 2
22630: ARRAY
22631: PPUSH
22632: LD_INT 5
22634: PPUSH
22635: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22639: LD_ADDR_EXP 51
22643: PUSH
22644: LD_EXP 51
22648: PPUSH
22649: LD_VAR 0 1
22653: PPUSH
22654: CALL_OW 3
22658: ST_TO_ADDR
// end ; end ;
22659: GO 22561
22661: POP
22662: POP
// end ; end_of_file
22663: PPOPN 1
22665: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22666: LD_VAR 0 1
22670: PPUSH
22671: CALL_OW 255
22675: PUSH
22676: LD_INT 4
22678: EQUAL
22679: IFFALSE 22693
// SetBName ( building , epsilon ) ;
22681: LD_VAR 0 1
22685: PPUSH
22686: LD_STRING epsilon
22688: PPUSH
22689: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22693: LD_VAR 0 1
22697: PPUSH
22698: CALL_OW 255
22702: PUSH
22703: LD_INT 1
22705: EQUAL
22706: PUSH
22707: LD_VAR 0 1
22711: PPUSH
22712: CALL_OW 266
22716: PUSH
22717: LD_INT 0
22719: EQUAL
22720: AND
22721: IFFALSE 22735
// SetBName ( building , epsilon ) ;
22723: LD_VAR 0 1
22727: PPUSH
22728: LD_STRING epsilon
22730: PPUSH
22731: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22735: LD_VAR 0 1
22739: PPUSH
22740: CALL_OW 255
22744: PUSH
22745: LD_INT 3
22747: EQUAL
22748: PUSH
22749: LD_VAR 0 1
22753: PPUSH
22754: CALL_OW 266
22758: PUSH
22759: LD_INT 0
22761: EQUAL
22762: AND
22763: IFFALSE 22777
// SetBName ( building , chuikov ) ;
22765: LD_VAR 0 1
22769: PPUSH
22770: LD_STRING chuikov
22772: PPUSH
22773: CALL_OW 500
// if GetSide ( building ) = 2 then
22777: LD_VAR 0 1
22781: PPUSH
22782: CALL_OW 255
22786: PUSH
22787: LD_INT 2
22789: EQUAL
22790: IFFALSE 22846
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22792: LD_VAR 0 1
22796: PPUSH
22797: CALL_OW 266
22801: PUSH
22802: LD_INT 6
22804: EQUAL
22805: PUSH
22806: LD_VAR 0 1
22810: PPUSH
22811: CALL_OW 266
22815: PUSH
22816: LD_INT 9
22818: EQUAL
22819: OR
22820: IFFALSE 22846
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22822: LD_VAR 0 1
22826: PPUSH
22827: LD_INT 10
22829: PPUSH
22830: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22834: LD_VAR 0 1
22838: PPUSH
22839: LD_INT 11
22841: PPUSH
22842: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22846: LD_VAR 0 1
22850: PPUSH
22851: CALL_OW 255
22855: PUSH
22856: LD_INT 3
22858: EQUAL
22859: IFFALSE 22893
// begin ruDepotConstructed := true ;
22861: LD_ADDR_EXP 58
22865: PUSH
22866: LD_INT 1
22868: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 266
22878: PUSH
22879: LD_INT 2
22881: EQUAL
22882: IFFALSE 22893
// AddComUpgrade ( building ) ;
22884: LD_VAR 0 1
22888: PPUSH
22889: CALL_OW 206
// end ; end ;
22893: PPOPN 2
22895: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22896: LD_INT 0
22898: PPUSH
22899: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22900: LD_VAR 0 1
22904: PUSH
22905: LD_INT 22
22907: PUSH
22908: LD_INT 3
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 23
22917: PUSH
22918: LD_INT 3
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 21
22927: PUSH
22928: LD_INT 2
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: PPUSH
22940: CALL_OW 69
22944: IN
22945: PUSH
22946: LD_EXP 62
22950: NOT
22951: AND
22952: IFFALSE 22983
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22954: LD_ADDR_EXP 62
22958: PUSH
22959: LD_VAR 0 1
22963: PPUSH
22964: CALL_OW 250
22968: PUSH
22969: LD_VAR 0 1
22973: PPUSH
22974: CALL_OW 251
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: ST_TO_ADDR
// end ;
22983: PPOPN 3
22985: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22986: LD_VAR 0 2
22990: PPUSH
22991: CALL_OW 255
22995: PUSH
22996: LD_INT 3
22998: EQUAL
22999: PUSH
23000: LD_EXP 36
23004: PPUSH
23005: CALL_OW 255
23009: PUSH
23010: LD_INT 3
23012: EQUAL
23013: AND
23014: PUSH
23015: LD_EXP 36
23019: PPUSH
23020: CALL_OW 302
23024: AND
23025: IFFALSE 23041
// ComEnterUnit ( human , ruFab ) ;
23027: LD_VAR 0 2
23031: PPUSH
23032: LD_EXP 36
23036: PPUSH
23037: CALL_OW 120
// end ;
23041: PPOPN 2
23043: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
23044: LD_INT 0
23046: PPUSH
23047: PPUSH
23048: PPUSH
23049: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23050: LD_VAR 0 1
23054: PPUSH
23055: CALL_OW 255
23059: PUSH
23060: LD_INT 1
23062: EQUAL
23063: PUSH
23064: LD_EXP 66
23068: PUSH
23069: LD_INT 0
23071: EQUAL
23072: AND
23073: IFFALSE 23275
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL_OW 266
23084: PUSH
23085: LD_INT 26
23087: EQUAL
23088: PUSH
23089: LD_VAR 0 1
23093: PPUSH
23094: CALL_OW 266
23098: PUSH
23099: LD_INT 27
23101: EQUAL
23102: OR
23103: PUSH
23104: LD_VAR 0 1
23108: PPUSH
23109: CALL_OW 266
23113: PUSH
23114: LD_INT 28
23116: EQUAL
23117: OR
23118: IFFALSE 23275
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
23120: LD_INT 22
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: LD_INT 30
23135: PUSH
23136: LD_INT 7
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 30
23145: PUSH
23146: LD_INT 8
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PPUSH
23162: CALL_OW 69
23166: PUSH
23167: LD_INT 0
23169: GREATER
23170: IFFALSE 23275
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23172: LD_ADDR_VAR 0 2
23176: PUSH
23177: LD_INT 22
23179: PUSH
23180: LD_INT 1
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: LD_INT 30
23192: PUSH
23193: LD_INT 7
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 30
23202: PUSH
23203: LD_INT 8
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PPUSH
23219: CALL_OW 69
23223: PUSH
23224: FOR_IN
23225: IFFALSE 23273
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23227: LD_VAR 0 2
23231: PPUSH
23232: LD_INT 1
23234: PPUSH
23235: CALL_OW 268
23239: PUSH
23240: LD_INT 11
23242: EQUAL
23243: PUSH
23244: LD_VAR 0 2
23248: PPUSH
23249: LD_INT 2
23251: PPUSH
23252: CALL_OW 268
23256: PUSH
23257: LD_INT 11
23259: EQUAL
23260: OR
23261: IFFALSE 23271
// eventVar1 = 1 ;
23263: LD_ADDR_EXP 66
23267: PUSH
23268: LD_INT 1
23270: ST_TO_ADDR
23271: GO 23224
23273: POP
23274: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
23275: LD_VAR 0 1
23279: PPUSH
23280: CALL_OW 255
23284: PUSH
23285: LD_INT 3
23287: EQUAL
23288: IFFALSE 23768
// begin if GetBType ( building ) = b_depot then
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 266
23299: PUSH
23300: LD_INT 0
23302: EQUAL
23303: IFFALSE 23375
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23305: LD_VAR 0 1
23309: PPUSH
23310: CALL_OW 274
23314: PPUSH
23315: LD_INT 1
23317: PPUSH
23318: LD_INT 5000
23320: PPUSH
23321: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23325: LD_VAR 0 1
23329: PPUSH
23330: CALL_OW 274
23334: PPUSH
23335: LD_INT 2
23337: PPUSH
23338: LD_INT 300
23340: PPUSH
23341: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL_OW 274
23354: PPUSH
23355: LD_INT 3
23357: PPUSH
23358: LD_INT 100
23360: PPUSH
23361: CALL_OW 277
// ruDepot = building ;
23365: LD_ADDR_EXP 31
23369: PUSH
23370: LD_VAR 0 1
23374: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23375: LD_VAR 0 1
23379: PPUSH
23380: CALL_OW 266
23384: PUSH
23385: LD_INT 0
23387: EQUAL
23388: PUSH
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL_OW 266
23398: PUSH
23399: LD_INT 2
23401: EQUAL
23402: OR
23403: PUSH
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 266
23413: PUSH
23414: LD_INT 4
23416: EQUAL
23417: OR
23418: IFFALSE 23429
// ComUpgrade ( building ) ;
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 146
// if GetBType ( building ) = b_lab then
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL_OW 266
23438: PUSH
23439: LD_INT 6
23441: EQUAL
23442: IFFALSE 23645
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23444: LD_INT 22
23446: PUSH
23447: LD_INT 3
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 30
23456: PUSH
23457: LD_INT 8
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PPUSH
23468: CALL_OW 69
23472: PUSH
23473: LD_INT 0
23475: EQUAL
23476: IFFALSE 23514
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23478: LD_VAR 0 1
23482: PPUSH
23483: LD_INT 10
23485: PPUSH
23486: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_INT 12
23497: PPUSH
23498: CALL_OW 207
// ruLab1 = building ;
23502: LD_ADDR_EXP 32
23506: PUSH
23507: LD_VAR 0 1
23511: ST_TO_ADDR
// end else
23512: GO 23548
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23514: LD_VAR 0 1
23518: PPUSH
23519: LD_INT 11
23521: PPUSH
23522: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23526: LD_VAR 0 1
23530: PPUSH
23531: LD_INT 14
23533: PPUSH
23534: CALL_OW 207
// ruLab2 = building ;
23538: LD_ADDR_EXP 33
23542: PUSH
23543: LD_VAR 0 1
23547: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23548: LD_INT 3
23550: PPUSH
23551: LD_VAR 0 1
23555: PPUSH
23556: LD_INT 3
23558: PPUSH
23559: CALL 15961 0 3
// if ruDestroyedBuildings > 0 then
23563: LD_EXP 43
23567: PUSH
23568: LD_INT 0
23570: GREATER
23571: IFFALSE 23645
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23573: LD_ADDR_EXP 43
23577: PUSH
23578: LD_EXP 43
23582: PPUSH
23583: LD_INT 1
23585: PPUSH
23586: CALL_OW 3
23590: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23591: LD_ADDR_EXP 43
23595: PUSH
23596: LD_EXP 43
23600: PPUSH
23601: LD_INT 1
23603: PPUSH
23604: CALL_OW 3
23608: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23609: LD_ADDR_EXP 43
23613: PUSH
23614: LD_EXP 43
23618: PPUSH
23619: LD_INT 1
23621: PPUSH
23622: CALL_OW 3
23626: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23627: LD_ADDR_EXP 43
23631: PUSH
23632: LD_EXP 43
23636: PPUSH
23637: LD_INT 1
23639: PPUSH
23640: CALL_OW 3
23644: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL_OW 266
23654: PUSH
23655: LD_INT 32
23657: EQUAL
23658: IFFALSE 23695
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23660: LD_VAR 0 1
23664: PPUSH
23665: LD_INT 44
23667: PUSH
23668: LD_INT 45
23670: PUSH
23671: LD_INT 46
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: PPUSH
23682: LD_INT 3
23684: PPUSH
23685: CALL_OW 12
23689: ARRAY
23690: PPUSH
23691: CALL_OW 208
// if GetBType ( building ) = b_turret then
23695: LD_VAR 0 1
23699: PPUSH
23700: CALL_OW 266
23704: PUSH
23705: LD_INT 33
23707: EQUAL
23708: IFFALSE 23745
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23710: LD_VAR 0 1
23714: PPUSH
23715: LD_INT 44
23717: PUSH
23718: LD_INT 45
23720: PUSH
23721: LD_INT 46
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PPUSH
23732: LD_INT 3
23734: PPUSH
23735: CALL_OW 12
23739: ARRAY
23740: PPUSH
23741: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 266
23754: PUSH
23755: LD_INT 24
23757: EQUAL
23758: IFFALSE 23768
// russianAI = 1 ;
23760: LD_ADDR_EXP 40
23764: PUSH
23765: LD_INT 1
23767: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23768: LD_VAR 0 1
23772: PPUSH
23773: CALL_OW 255
23777: PUSH
23778: LD_INT 2
23780: EQUAL
23781: IFFALSE 24660
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23783: LD_VAR 0 1
23787: PPUSH
23788: CALL_OW 266
23792: PUSH
23793: LD_EXP 69
23797: PUSH
23798: LD_INT 1
23800: ARRAY
23801: PUSH
23802: LD_INT 1
23804: ARRAY
23805: EQUAL
23806: IFFALSE 23933
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23808: LD_ADDR_EXP 69
23812: PUSH
23813: LD_EXP 69
23817: PPUSH
23818: LD_INT 1
23820: PPUSH
23821: CALL_OW 3
23825: ST_TO_ADDR
// if arBuildingsTab then
23826: LD_EXP 69
23830: IFFALSE 23933
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23832: LD_ADDR_VAR 0 3
23836: PUSH
23837: LD_INT 22
23839: PUSH
23840: LD_INT 2
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 25
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PPUSH
23861: CALL_OW 69
23865: ST_TO_ADDR
// if engineers then
23866: LD_VAR 0 3
23870: IFFALSE 23933
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23872: LD_VAR 0 3
23876: PPUSH
23877: LD_EXP 69
23881: PUSH
23882: LD_INT 1
23884: ARRAY
23885: PUSH
23886: LD_INT 1
23888: ARRAY
23889: PPUSH
23890: LD_EXP 69
23894: PUSH
23895: LD_INT 1
23897: ARRAY
23898: PUSH
23899: LD_INT 2
23901: ARRAY
23902: PPUSH
23903: LD_EXP 69
23907: PUSH
23908: LD_INT 1
23910: ARRAY
23911: PUSH
23912: LD_INT 3
23914: ARRAY
23915: PPUSH
23916: LD_EXP 69
23920: PUSH
23921: LD_INT 1
23923: ARRAY
23924: PUSH
23925: LD_INT 4
23927: ARRAY
23928: PPUSH
23929: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL_OW 266
23942: PUSH
23943: LD_INT 31
23945: EQUAL
23946: IFFALSE 24092
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23948: LD_ADDR_VAR 0 4
23952: PUSH
23953: LD_INT 22
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 2
23965: PUSH
23966: LD_INT 25
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 25
23978: PUSH
23979: LD_INT 8
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PPUSH
23995: CALL_OW 69
23999: PUSH
24000: LD_EXP 27
24004: DIFF
24005: ST_TO_ADDR
// if not sol then
24006: LD_VAR 0 4
24010: NOT
24011: IFFALSE 24015
// exit ;
24013: GO 24660
// for i in sol do
24015: LD_ADDR_VAR 0 2
24019: PUSH
24020: LD_VAR 0 4
24024: PUSH
24025: FOR_IN
24026: IFFALSE 24090
// if not GetTag ( i ) then
24028: LD_VAR 0 2
24032: PPUSH
24033: CALL_OW 110
24037: NOT
24038: IFFALSE 24088
// begin if IsInUnit ( i ) then
24040: LD_VAR 0 2
24044: PPUSH
24045: CALL_OW 310
24049: IFFALSE 24060
// ComExitBuilding ( i ) ;
24051: LD_VAR 0 2
24055: PPUSH
24056: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
24060: LD_VAR 0 2
24064: PPUSH
24065: LD_VAR 0 1
24069: PPUSH
24070: CALL_OW 180
// SetTag ( i , 11 ) ;
24074: LD_VAR 0 2
24078: PPUSH
24079: LD_INT 11
24081: PPUSH
24082: CALL_OW 109
// break ;
24086: GO 24090
// end ;
24088: GO 24025
24090: POP
24091: POP
// end ; if GetBType ( building ) = b_depot then
24092: LD_VAR 0 1
24096: PPUSH
24097: CALL_OW 266
24101: PUSH
24102: LD_INT 0
24104: EQUAL
24105: IFFALSE 24191
// begin arDepot = building ;
24107: LD_ADDR_EXP 44
24111: PUSH
24112: LD_VAR 0 1
24116: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
24117: LD_INT 38
24119: PUSH
24120: LD_INT 47
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PPUSH
24127: LD_INT 71
24129: PPUSH
24130: LD_INT 19
24132: PPUSH
24133: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 274
24146: PPUSH
24147: LD_INT 1
24149: PPUSH
24150: LD_INT 500
24152: PPUSH
24153: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
24157: LD_VAR 0 1
24161: PPUSH
24162: CALL_OW 274
24166: PPUSH
24167: LD_INT 3
24169: PPUSH
24170: LD_INT 30
24172: PPUSH
24173: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
24177: LD_EXP 27
24181: PPUSH
24182: LD_VAR 0 1
24186: PPUSH
24187: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
24191: LD_VAR 0 1
24195: PPUSH
24196: CALL_OW 266
24200: PUSH
24201: LD_INT 6
24203: EQUAL
24204: PUSH
24205: LD_VAR 0 1
24209: PPUSH
24210: CALL_OW 266
24214: PUSH
24215: LD_INT 9
24217: EQUAL
24218: OR
24219: IFFALSE 24270
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
24221: LD_VAR 0 1
24225: PPUSH
24226: LD_INT 10
24228: PPUSH
24229: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
24233: LD_VAR 0 1
24237: PPUSH
24238: LD_INT 11
24240: PPUSH
24241: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
24245: LD_INT 2
24247: PPUSH
24248: LD_VAR 0 1
24252: PPUSH
24253: LD_INT 2
24255: PPUSH
24256: CALL 15961 0 3
// arLab = building ;
24260: LD_ADDR_EXP 45
24264: PUSH
24265: LD_VAR 0 1
24269: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
24270: LD_VAR 0 1
24274: PPUSH
24275: CALL_OW 266
24279: PUSH
24280: LD_INT 2
24282: EQUAL
24283: PUSH
24284: LD_VAR 0 1
24288: PPUSH
24289: CALL_OW 266
24293: PUSH
24294: LD_INT 4
24296: EQUAL
24297: OR
24298: IFFALSE 24369
// begin ComUpgrade ( building ) ;
24300: LD_VAR 0 1
24304: PPUSH
24305: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24309: LD_VAR 0 1
24313: PPUSH
24314: CALL_OW 266
24318: PUSH
24319: LD_INT 4
24321: EQUAL
24322: IFFALSE 24369
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24324: LD_INT 22
24326: PUSH
24327: LD_INT 2
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 25
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PPUSH
24348: CALL_OW 69
24352: PUSH
24353: LD_EXP 27
24357: DIFF
24358: PPUSH
24359: LD_INT 75
24361: PPUSH
24362: LD_INT 21
24364: PPUSH
24365: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24369: LD_VAR 0 1
24373: PPUSH
24374: CALL_OW 266
24378: PUSH
24379: LD_INT 27
24381: EQUAL
24382: IFFALSE 24660
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24384: LD_INT 22
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 30
24396: PUSH
24397: LD_INT 27
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PPUSH
24408: CALL_OW 69
24412: PUSH
24413: LD_INT 2
24415: EQUAL
24416: IFFALSE 24660
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24418: LD_ADDR_VAR 0 2
24422: PUSH
24423: LD_INT 22
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 21
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 25
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: LIST
24457: PPUSH
24458: CALL_OW 69
24462: PUSH
24463: LD_INT 1
24465: ARRAY
24466: ST_TO_ADDR
// if not i then
24467: LD_VAR 0 2
24471: NOT
24472: IFFALSE 24476
// exit ;
24474: GO 24660
// AddComMoveXY ( i , 92 , 34 ) ;
24476: LD_VAR 0 2
24480: PPUSH
24481: LD_INT 92
24483: PPUSH
24484: LD_INT 34
24486: PPUSH
24487: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24491: LD_VAR 0 2
24495: PPUSH
24496: LD_INT 35
24498: PPUSH
24499: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24503: LD_VAR 0 2
24507: PPUSH
24508: LD_INT 101
24510: PPUSH
24511: LD_INT 20
24513: PPUSH
24514: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24518: LD_VAR 0 2
24522: PPUSH
24523: LD_INT 35
24525: PPUSH
24526: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24530: LD_VAR 0 2
24534: PPUSH
24535: LD_INT 115
24537: PPUSH
24538: LD_INT 30
24540: PPUSH
24541: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24545: LD_VAR 0 2
24549: PPUSH
24550: LD_INT 35
24552: PPUSH
24553: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24557: LD_VAR 0 2
24561: PPUSH
24562: LD_INT 82
24564: PPUSH
24565: LD_INT 57
24567: PPUSH
24568: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24572: LD_VAR 0 2
24576: PPUSH
24577: LD_INT 35
24579: PPUSH
24580: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24584: LD_VAR 0 2
24588: PPUSH
24589: LD_INT 36
24591: PPUSH
24592: LD_INT 28
24594: PPUSH
24595: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24599: LD_VAR 0 2
24603: PPUSH
24604: LD_INT 70
24606: PPUSH
24607: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24611: LD_INT 22
24613: PUSH
24614: LD_INT 2
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 21
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 25
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: PPUSH
24646: CALL_OW 69
24650: PPUSH
24651: LD_EXP 44
24655: PPUSH
24656: CALL_OW 180
// end ; end ; end ;
24660: PPOPN 5
24662: END
// on UpgradeComplete ( building ) do var i ;
24663: LD_INT 0
24665: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 255
24675: PUSH
24676: LD_INT 1
24678: EQUAL
24679: PUSH
24680: LD_EXP 66
24684: PUSH
24685: LD_INT 0
24687: EQUAL
24688: AND
24689: IFFALSE 24887
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24691: LD_VAR 0 1
24695: PPUSH
24696: CALL_OW 266
24700: PUSH
24701: LD_INT 7
24703: EQUAL
24704: PUSH
24705: LD_VAR 0 1
24709: PPUSH
24710: CALL_OW 266
24714: PUSH
24715: LD_INT 8
24717: EQUAL
24718: OR
24719: IFFALSE 24887
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24721: LD_INT 22
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 2
24733: PUSH
24734: LD_INT 30
24736: PUSH
24737: LD_INT 26
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 30
24746: PUSH
24747: LD_INT 27
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 30
24756: PUSH
24757: LD_INT 28
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PPUSH
24774: CALL_OW 69
24778: PUSH
24779: LD_INT 0
24781: GREATER
24782: IFFALSE 24887
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24784: LD_ADDR_VAR 0 2
24788: PUSH
24789: LD_INT 22
24791: PUSH
24792: LD_INT 1
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 2
24801: PUSH
24802: LD_INT 30
24804: PUSH
24805: LD_INT 7
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 30
24814: PUSH
24815: LD_INT 8
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PPUSH
24831: CALL_OW 69
24835: PUSH
24836: FOR_IN
24837: IFFALSE 24885
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24839: LD_VAR 0 2
24843: PPUSH
24844: LD_INT 1
24846: PPUSH
24847: CALL_OW 268
24851: PUSH
24852: LD_INT 11
24854: EQUAL
24855: PUSH
24856: LD_VAR 0 2
24860: PPUSH
24861: LD_INT 2
24863: PPUSH
24864: CALL_OW 268
24868: PUSH
24869: LD_INT 11
24871: EQUAL
24872: OR
24873: IFFALSE 24883
// eventVar1 = 1 ;
24875: LD_ADDR_EXP 66
24879: PUSH
24880: LD_INT 1
24882: ST_TO_ADDR
24883: GO 24836
24885: POP
24886: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24887: LD_VAR 0 1
24891: PPUSH
24892: CALL_OW 255
24896: PUSH
24897: LD_INT 2
24899: EQUAL
24900: IFFALSE 25005
// begin if GetBType ( building ) = b_barracks then
24902: LD_VAR 0 1
24906: PPUSH
24907: CALL_OW 266
24911: PUSH
24912: LD_INT 5
24914: EQUAL
24915: IFFALSE 25005
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24917: LD_ADDR_VAR 0 2
24921: PUSH
24922: LD_INT 22
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 25
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 3
24944: PUSH
24945: LD_INT 54
24947: PUSH
24948: EMPTY
24949: LIST
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: PPUSH
24960: CALL_OW 69
24964: PUSH
24965: LD_EXP 27
24969: PUSH
24970: EMPTY
24971: LIST
24972: DIFF
24973: PUSH
24974: FOR_IN
24975: IFFALSE 24993
// ComEnterUnit ( i , building ) ;
24977: LD_VAR 0 2
24981: PPUSH
24982: LD_VAR 0 1
24986: PPUSH
24987: CALL_OW 120
24991: GO 24974
24993: POP
24994: POP
// arArm = building ;
24995: LD_ADDR_EXP 46
24999: PUSH
25000: LD_VAR 0 1
25004: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
25005: LD_VAR 0 1
25009: PPUSH
25010: CALL_OW 255
25014: PUSH
25015: LD_INT 3
25017: EQUAL
25018: IFFALSE 25491
// begin if GetBType ( building ) = b_factory then
25020: LD_VAR 0 1
25024: PPUSH
25025: CALL_OW 266
25029: PUSH
25030: LD_INT 3
25032: EQUAL
25033: IFFALSE 25100
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
25035: LD_ADDR_VAR 0 2
25039: PUSH
25040: LD_INT 22
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 25
25052: PUSH
25053: LD_INT 3
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PPUSH
25064: CALL_OW 69
25068: PUSH
25069: FOR_IN
25070: IFFALSE 25088
// ComEnterUnit ( i , building ) ;
25072: LD_VAR 0 2
25076: PPUSH
25077: LD_VAR 0 1
25081: PPUSH
25082: CALL_OW 120
25086: GO 25069
25088: POP
25089: POP
// ruFab = building ;
25090: LD_ADDR_EXP 36
25094: PUSH
25095: LD_VAR 0 1
25099: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
25100: LD_INT 22
25102: PUSH
25103: LD_INT 3
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 21
25112: PUSH
25113: LD_INT 3
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 30
25122: PUSH
25123: LD_INT 8
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: PPUSH
25135: CALL_OW 69
25139: PUSH
25140: LD_INT 2
25142: EQUAL
25143: IFFALSE 25351
// begin for i = 1 to 2 do
25145: LD_ADDR_VAR 0 2
25149: PUSH
25150: DOUBLE
25151: LD_INT 1
25153: DEC
25154: ST_TO_ADDR
25155: LD_INT 2
25157: PUSH
25158: FOR_TO
25159: IFFALSE 25246
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
25161: LD_INT 22
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 25
25173: PUSH
25174: LD_INT 4
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PPUSH
25185: CALL_OW 69
25189: PUSH
25190: LD_VAR 0 2
25194: ARRAY
25195: PPUSH
25196: LD_INT 22
25198: PUSH
25199: LD_INT 3
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 21
25208: PUSH
25209: LD_INT 3
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 30
25218: PUSH
25219: LD_INT 8
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: PUSH
25236: LD_INT 1
25238: ARRAY
25239: PPUSH
25240: CALL_OW 120
25244: GO 25158
25246: POP
25247: POP
// for i = 3 to 4 do
25248: LD_ADDR_VAR 0 2
25252: PUSH
25253: DOUBLE
25254: LD_INT 3
25256: DEC
25257: ST_TO_ADDR
25258: LD_INT 4
25260: PUSH
25261: FOR_TO
25262: IFFALSE 25349
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
25264: LD_INT 22
25266: PUSH
25267: LD_INT 3
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 25
25276: PUSH
25277: LD_INT 4
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PPUSH
25288: CALL_OW 69
25292: PUSH
25293: LD_VAR 0 2
25297: ARRAY
25298: PPUSH
25299: LD_INT 22
25301: PUSH
25302: LD_INT 3
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 21
25311: PUSH
25312: LD_INT 3
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 30
25321: PUSH
25322: LD_INT 8
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: PPUSH
25334: CALL_OW 69
25338: PUSH
25339: LD_INT 2
25341: ARRAY
25342: PPUSH
25343: CALL_OW 120
25347: GO 25261
25349: POP
25350: POP
// end ; if GetBType ( building ) = b_barracks then
25351: LD_VAR 0 1
25355: PPUSH
25356: CALL_OW 266
25360: PUSH
25361: LD_INT 5
25363: EQUAL
25364: IFFALSE 25491
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25366: LD_ADDR_VAR 0 2
25370: PUSH
25371: LD_INT 22
25373: PUSH
25374: LD_INT 3
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 25
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 3
25393: PUSH
25394: LD_INT 54
25396: PUSH
25397: EMPTY
25398: LIST
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 69
25413: PUSH
25414: FOR_IN
25415: IFFALSE 25433
// ComEnterUnit ( i , building ) ;
25417: LD_VAR 0 2
25421: PPUSH
25422: LD_VAR 0 1
25426: PPUSH
25427: CALL_OW 120
25431: GO 25414
25433: POP
25434: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25435: LD_INT 22
25437: PUSH
25438: LD_INT 3
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 30
25447: PUSH
25448: LD_INT 5
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PPUSH
25459: CALL_OW 69
25463: PUSH
25464: LD_INT 0
25466: EQUAL
25467: IFFALSE 25481
// ruArm1 = building else
25469: LD_ADDR_EXP 34
25473: PUSH
25474: LD_VAR 0 1
25478: ST_TO_ADDR
25479: GO 25491
// ruArm2 = building ;
25481: LD_ADDR_EXP 35
25485: PUSH
25486: LD_VAR 0 1
25490: ST_TO_ADDR
// end ; end ; end ;
25491: PPOPN 2
25493: END
// on EnterBuilding ( building , human ) do var rnd ;
25494: LD_INT 0
25496: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25497: LD_VAR 0 2
25501: PPUSH
25502: CALL_OW 255
25506: PUSH
25507: LD_INT 2
25509: EQUAL
25510: PUSH
25511: LD_VAR 0 2
25515: PPUSH
25516: CALL_OW 257
25520: PUSH
25521: LD_INT 1
25523: EQUAL
25524: AND
25525: PUSH
25526: LD_VAR 0 1
25530: PUSH
25531: LD_EXP 46
25535: EQUAL
25536: AND
25537: IFFALSE 25584
// begin wait ( 0 0$1 ) ;
25539: LD_INT 35
25541: PPUSH
25542: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25546: LD_ADDR_VAR 0 3
25550: PUSH
25551: LD_INT 1
25553: PPUSH
25554: LD_INT 100
25556: PPUSH
25557: CALL_OW 12
25561: ST_TO_ADDR
// if rnd > 50 then
25562: LD_VAR 0 3
25566: PUSH
25567: LD_INT 50
25569: GREATER
25570: IFFALSE 25584
// SetClass ( human , class_mortar ) ;
25572: LD_VAR 0 2
25576: PPUSH
25577: LD_INT 8
25579: PPUSH
25580: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25584: LD_VAR 0 2
25588: PUSH
25589: LD_INT 22
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 25
25601: PUSH
25602: LD_INT 12
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PPUSH
25613: CALL_OW 69
25617: IN
25618: IFFALSE 25668
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25620: LD_VAR 0 1
25624: PPUSH
25625: CALL_OW 266
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: IN
25640: IFFALSE 25656
// SetClass ( human , class_apeman_engineer ) else
25642: LD_VAR 0 2
25646: PPUSH
25647: LD_INT 16
25649: PPUSH
25650: CALL_OW 336
25654: GO 25668
// SetClass ( human , class_apeman_soldier ) ;
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_INT 15
25663: PPUSH
25664: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25668: LD_VAR 0 2
25672: PPUSH
25673: CALL_OW 255
25677: PUSH
25678: LD_INT 3
25680: EQUAL
25681: PUSH
25682: LD_VAR 0 2
25686: PPUSH
25687: CALL_OW 257
25691: PUSH
25692: LD_INT 1
25694: EQUAL
25695: AND
25696: PUSH
25697: LD_VAR 0 1
25701: PUSH
25702: LD_EXP 34
25706: EQUAL
25707: PUSH
25708: LD_VAR 0 1
25712: PUSH
25713: LD_EXP 35
25717: EQUAL
25718: OR
25719: PUSH
25720: EMPTY
25721: LIST
25722: AND
25723: IFFALSE 25744
// begin wait ( 0 0$1 ) ;
25725: LD_INT 35
25727: PPUSH
25728: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25732: LD_VAR 0 2
25736: PPUSH
25737: LD_INT 9
25739: PPUSH
25740: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25744: LD_VAR 0 2
25748: PPUSH
25749: CALL_OW 255
25753: PUSH
25754: LD_INT 3
25756: EQUAL
25757: PUSH
25758: LD_VAR 0 2
25762: PPUSH
25763: CALL_OW 257
25767: PUSH
25768: LD_INT 9
25770: EQUAL
25771: AND
25772: PUSH
25773: LD_VAR 0 1
25777: PPUSH
25778: CALL_OW 266
25782: PUSH
25783: LD_INT 32
25785: EQUAL
25786: AND
25787: IFFALSE 25808
// begin wait ( 0 0$1 ) ;
25789: LD_INT 35
25791: PPUSH
25792: CALL_OW 67
// SetClass ( human , 1 ) ;
25796: LD_VAR 0 2
25800: PPUSH
25801: LD_INT 1
25803: PPUSH
25804: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25808: LD_VAR 0 2
25812: PPUSH
25813: CALL_OW 255
25817: PUSH
25818: LD_INT 3
25820: EQUAL
25821: PUSH
25822: LD_VAR 0 2
25826: PPUSH
25827: CALL_OW 257
25831: PUSH
25832: LD_INT 3
25834: EQUAL
25835: AND
25836: PUSH
25837: LD_VAR 0 1
25841: PUSH
25842: LD_EXP 36
25846: EQUAL
25847: AND
25848: IFFALSE 25862
// SetLives ( human , 1000 ) ;
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_INT 1000
25857: PPUSH
25858: CALL_OW 234
// end ;
25862: PPOPN 3
25864: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25865: LD_VAR 0 1
25869: PUSH
25870: LD_INT 1
25872: EQUAL
25873: PUSH
25874: LD_VAR 0 2
25878: PUSH
25879: LD_INT 2
25881: EQUAL
25882: AND
25883: PUSH
25884: LD_INT 1
25886: PPUSH
25887: LD_INT 2
25889: PPUSH
25890: CALL_OW 81
25894: PUSH
25895: LD_INT 1
25897: EQUAL
25898: AND
25899: IFFALSE 25920
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25901: LD_EXP 25
25905: PPUSH
25906: LD_STRING D6b-Pow-1
25908: PPUSH
25909: CALL_OW 94
// YouLost ( Powell ) ;
25913: LD_STRING Powell
25915: PPUSH
25916: CALL_OW 104
// end ; end ;
25920: PPOPN 2
25922: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25923: LD_INT 23
25925: PPUSH
25926: LD_INT 22
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 21
25938: PUSH
25939: LD_INT 3
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PPUSH
25950: CALL_OW 70
25954: PUSH
25955: LD_INT 23
25957: PPUSH
25958: LD_INT 22
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 21
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PPUSH
25982: CALL_OW 70
25986: OR
25987: PUSH
25988: LD_INT 1
25990: PPUSH
25991: LD_INT 2
25993: PPUSH
25994: CALL_OW 81
25998: PUSH
25999: LD_INT 1
26001: EQUAL
26002: AND
26003: IFFALSE 26136
26005: GO 26007
26007: DISABLE
// begin enable ;
26008: ENABLE
// wait ( 0 0$10 ) ;
26009: LD_INT 350
26011: PPUSH
26012: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26016: LD_INT 23
26018: PPUSH
26019: LD_INT 22
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 21
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 70
26047: PUSH
26048: LD_INT 23
26050: PPUSH
26051: LD_INT 22
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 21
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 70
26079: OR
26080: PUSH
26081: LD_INT 1
26083: PPUSH
26084: LD_INT 2
26086: PPUSH
26087: CALL_OW 81
26091: PUSH
26092: LD_INT 1
26094: EQUAL
26095: AND
26096: IFFALSE 26136
// begin disable ;
26098: DISABLE
// InGameOn ;
26099: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26103: LD_INT 73
26105: PPUSH
26106: LD_INT 18
26108: PPUSH
26109: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26113: LD_EXP 25
26117: PPUSH
26118: LD_STRING D6b-Pow-1
26120: PPUSH
26121: CALL_OW 94
// YouLost ( Powell ) ;
26125: LD_STRING Powell
26127: PPUSH
26128: CALL_OW 104
// InGameOff ;
26132: CALL_OW 9
// end ; end ;
26136: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
26137: LD_VAR 0 1
26141: PPUSH
26142: CALL 45806 0 1
// if unit = Truman then
26146: LD_VAR 0 1
26150: PUSH
26151: LD_EXP 20
26155: EQUAL
26156: IFFALSE 26165
// YouLost ( Powell ) ;
26158: LD_STRING Powell
26160: PPUSH
26161: CALL_OW 104
// if unit = JMM then
26165: LD_VAR 0 1
26169: PUSH
26170: LD_EXP 1
26174: EQUAL
26175: IFFALSE 26184
// YouLost ( JMM ) ;
26177: LD_STRING JMM
26179: PPUSH
26180: CALL_OW 104
// if unit = Khatam then
26184: LD_VAR 0 1
26188: PUSH
26189: LD_EXP 14
26193: EQUAL
26194: IFFALSE 26204
// KhatamStatus = 0 ;
26196: LD_ADDR_EXP 54
26200: PUSH
26201: LD_INT 0
26203: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
26204: LD_VAR 0 1
26208: PPUSH
26209: CALL_OW 255
26213: PUSH
26214: LD_INT 3
26216: EQUAL
26217: PUSH
26218: LD_VAR 0 1
26222: PPUSH
26223: CALL_OW 247
26227: PUSH
26228: LD_INT 3
26230: EQUAL
26231: AND
26232: IFFALSE 26924
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 266
26243: PUSH
26244: LD_INT 31
26246: EQUAL
26247: PUSH
26248: LD_VAR 0 1
26252: PPUSH
26253: CALL_OW 266
26257: PUSH
26258: LD_INT 32
26260: EQUAL
26261: OR
26262: PUSH
26263: LD_VAR 0 1
26267: PPUSH
26268: CALL_OW 266
26272: PUSH
26273: LD_INT 36
26275: EQUAL
26276: OR
26277: PUSH
26278: LD_VAR 0 1
26282: PPUSH
26283: CALL_OW 266
26287: PUSH
26288: LD_INT 0
26290: EQUAL
26291: OR
26292: PUSH
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 266
26302: PUSH
26303: LD_INT 24
26305: EQUAL
26306: OR
26307: PUSH
26308: LD_VAR 0 1
26312: PPUSH
26313: CALL_OW 266
26317: PUSH
26318: LD_INT 17
26320: EQUAL
26321: OR
26322: PUSH
26323: LD_VAR 0 1
26327: PPUSH
26328: CALL_OW 266
26332: PUSH
26333: LD_INT 25
26335: EQUAL
26336: OR
26337: PUSH
26338: LD_VAR 0 1
26342: PPUSH
26343: CALL_OW 266
26347: PUSH
26348: LD_INT 19
26350: EQUAL
26351: OR
26352: PUSH
26353: LD_VAR 0 1
26357: PPUSH
26358: CALL_OW 266
26362: PUSH
26363: LD_INT 20
26365: EQUAL
26366: OR
26367: PUSH
26368: LD_VAR 0 1
26372: PPUSH
26373: CALL_OW 266
26377: PUSH
26378: LD_INT 18
26380: EQUAL
26381: OR
26382: PUSH
26383: LD_VAR 0 1
26387: PPUSH
26388: CALL_OW 266
26392: PUSH
26393: LD_INT 21
26395: EQUAL
26396: OR
26397: PUSH
26398: LD_VAR 0 1
26402: PPUSH
26403: CALL_OW 266
26407: PUSH
26408: LD_INT 23
26410: EQUAL
26411: OR
26412: PUSH
26413: LD_VAR 0 1
26417: PPUSH
26418: CALL_OW 266
26422: PUSH
26423: LD_INT 16
26425: EQUAL
26426: OR
26427: PUSH
26428: LD_VAR 0 1
26432: PPUSH
26433: CALL_OW 266
26437: PUSH
26438: LD_INT 6
26440: EQUAL
26441: OR
26442: PUSH
26443: LD_VAR 0 1
26447: PPUSH
26448: CALL_OW 266
26452: PUSH
26453: LD_INT 29
26455: EQUAL
26456: OR
26457: PUSH
26458: LD_VAR 0 1
26462: PPUSH
26463: CALL_OW 266
26467: PUSH
26468: LD_INT 26
26470: EQUAL
26471: OR
26472: PUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: CALL_OW 266
26482: PUSH
26483: LD_INT 30
26485: EQUAL
26486: OR
26487: PUSH
26488: LD_VAR 0 1
26492: PPUSH
26493: CALL_OW 266
26497: PUSH
26498: LD_INT 28
26500: EQUAL
26501: OR
26502: PUSH
26503: LD_VAR 0 1
26507: PPUSH
26508: CALL_OW 266
26512: PUSH
26513: LD_INT 27
26515: EQUAL
26516: OR
26517: PUSH
26518: LD_VAR 0 1
26522: PPUSH
26523: CALL_OW 266
26527: PUSH
26528: LD_INT 33
26530: EQUAL
26531: OR
26532: PUSH
26533: LD_VAR 0 1
26537: PPUSH
26538: CALL_OW 266
26542: PUSH
26543: LD_INT 2
26545: EQUAL
26546: OR
26547: PUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL_OW 266
26557: PUSH
26558: LD_INT 4
26560: EQUAL
26561: OR
26562: IFFALSE 26648
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26564: LD_ADDR_EXP 43
26568: PUSH
26569: LD_EXP 43
26573: PUSH
26574: LD_VAR 0 1
26578: PPUSH
26579: CALL_OW 266
26583: ADD
26584: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26585: LD_ADDR_EXP 43
26589: PUSH
26590: LD_EXP 43
26594: PUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 250
26604: ADD
26605: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26606: LD_ADDR_EXP 43
26610: PUSH
26611: LD_EXP 43
26615: PUSH
26616: LD_VAR 0 1
26620: PPUSH
26621: CALL_OW 251
26625: ADD
26626: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26627: LD_ADDR_EXP 43
26631: PUSH
26632: LD_EXP 43
26636: PUSH
26637: LD_VAR 0 1
26641: PPUSH
26642: CALL_OW 254
26646: ADD
26647: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26648: LD_VAR 0 1
26652: PPUSH
26653: CALL_OW 266
26657: PUSH
26658: LD_INT 1
26660: EQUAL
26661: IFFALSE 26740
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26663: LD_ADDR_EXP 43
26667: PUSH
26668: LD_EXP 43
26672: PUSH
26673: LD_INT 0
26675: ADD
26676: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26677: LD_ADDR_EXP 43
26681: PUSH
26682: LD_EXP 43
26686: PUSH
26687: LD_VAR 0 1
26691: PPUSH
26692: CALL_OW 250
26696: ADD
26697: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26698: LD_ADDR_EXP 43
26702: PUSH
26703: LD_EXP 43
26707: PUSH
26708: LD_VAR 0 1
26712: PPUSH
26713: CALL_OW 251
26717: ADD
26718: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26719: LD_ADDR_EXP 43
26723: PUSH
26724: LD_EXP 43
26728: PUSH
26729: LD_VAR 0 1
26733: PPUSH
26734: CALL_OW 254
26738: ADD
26739: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26740: LD_VAR 0 1
26744: PPUSH
26745: CALL_OW 266
26749: PUSH
26750: LD_INT 3
26752: EQUAL
26753: IFFALSE 26832
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26755: LD_ADDR_EXP 43
26759: PUSH
26760: LD_EXP 43
26764: PUSH
26765: LD_INT 2
26767: ADD
26768: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26769: LD_ADDR_EXP 43
26773: PUSH
26774: LD_EXP 43
26778: PUSH
26779: LD_VAR 0 1
26783: PPUSH
26784: CALL_OW 250
26788: ADD
26789: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26790: LD_ADDR_EXP 43
26794: PUSH
26795: LD_EXP 43
26799: PUSH
26800: LD_VAR 0 1
26804: PPUSH
26805: CALL_OW 251
26809: ADD
26810: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26811: LD_ADDR_EXP 43
26815: PUSH
26816: LD_EXP 43
26820: PUSH
26821: LD_VAR 0 1
26825: PPUSH
26826: CALL_OW 254
26830: ADD
26831: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26832: LD_VAR 0 1
26836: PPUSH
26837: CALL_OW 266
26841: PUSH
26842: LD_INT 5
26844: EQUAL
26845: IFFALSE 26924
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26847: LD_ADDR_EXP 43
26851: PUSH
26852: LD_EXP 43
26856: PUSH
26857: LD_INT 4
26859: ADD
26860: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26861: LD_ADDR_EXP 43
26865: PUSH
26866: LD_EXP 43
26870: PUSH
26871: LD_VAR 0 1
26875: PPUSH
26876: CALL_OW 250
26880: ADD
26881: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26882: LD_ADDR_EXP 43
26886: PUSH
26887: LD_EXP 43
26891: PUSH
26892: LD_VAR 0 1
26896: PPUSH
26897: CALL_OW 251
26901: ADD
26902: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26903: LD_ADDR_EXP 43
26907: PUSH
26908: LD_EXP 43
26912: PUSH
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL_OW 254
26922: ADD
26923: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26924: LD_EXP 52
26928: PUSH
26929: LD_VAR 0 1
26933: PPUSH
26934: CALL_OW 257
26938: PUSH
26939: LD_INT 3
26941: EQUAL
26942: AND
26943: PUSH
26944: LD_VAR 0 1
26948: PPUSH
26949: CALL_OW 255
26953: PUSH
26954: LD_INT 3
26956: EQUAL
26957: AND
26958: PUSH
26959: LD_EXP 36
26963: PPUSH
26964: CALL_OW 302
26968: AND
26969: PUSH
26970: LD_EXP 36
26974: PPUSH
26975: CALL_OW 255
26979: PUSH
26980: LD_INT 3
26982: EQUAL
26983: AND
26984: IFFALSE 27068
// begin ruMech := ruMech - 1 ;
26986: LD_ADDR_EXP 52
26990: PUSH
26991: LD_EXP 52
26995: PUSH
26996: LD_INT 1
26998: MINUS
26999: ST_TO_ADDR
// uc_side = 3 ;
27000: LD_ADDR_OWVAR 20
27004: PUSH
27005: LD_INT 3
27007: ST_TO_ADDR
// uc_nation = 3 ;
27008: LD_ADDR_OWVAR 21
27012: PUSH
27013: LD_INT 3
27015: ST_TO_ADDR
// hc_gallery :=  ;
27016: LD_ADDR_OWVAR 33
27020: PUSH
27021: LD_STRING 
27023: ST_TO_ADDR
// hc_name :=  ;
27024: LD_ADDR_OWVAR 26
27028: PUSH
27029: LD_STRING 
27031: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
27032: LD_INT 0
27034: PPUSH
27035: LD_EXP 37
27039: PPUSH
27040: LD_EXP 38
27044: PPUSH
27045: CALL_OW 12
27049: PPUSH
27050: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
27054: CALL_OW 44
27058: PPUSH
27059: LD_EXP 36
27063: PPUSH
27064: CALL_OW 52
// end ; end ;
27068: PPOPN 1
27070: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
27071: LD_VAR 0 1
27075: PPUSH
27076: LD_VAR 0 2
27080: PPUSH
27081: CALL 45928 0 2
// end ;
27085: PPOPN 2
27087: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
27088: LD_ADDR_OWVAR 57
27092: PUSH
27093: LD_INT 0
27095: ST_TO_ADDR
// fastEnd = 1 ;
27096: LD_ADDR_EXP 64
27100: PUSH
27101: LD_INT 1
27103: ST_TO_ADDR
// FinishMission ;
27104: CALL 28272 0 0
// end ;
27108: PPOPN 1
27110: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL 45912 0 1
// end ; end_of_file
27120: PPOPN 1
27122: END
// export function CreateNature ; var i , un ; begin
27123: LD_INT 0
27125: PPUSH
27126: PPUSH
27127: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
27128: LD_ADDR_VAR 0 2
27132: PUSH
27133: DOUBLE
27134: LD_INT 1
27136: DEC
27137: ST_TO_ADDR
27138: LD_OWVAR 67
27142: PUSH
27143: LD_INT 1
27145: PPUSH
27146: LD_INT 5
27148: PPUSH
27149: CALL_OW 12
27153: PLUS
27154: PUSH
27155: FOR_TO
27156: IFFALSE 27301
// begin hc_sex = sex_male ;
27158: LD_ADDR_OWVAR 27
27162: PUSH
27163: LD_INT 1
27165: ST_TO_ADDR
// uc_side = 0 ;
27166: LD_ADDR_OWVAR 20
27170: PUSH
27171: LD_INT 0
27173: ST_TO_ADDR
// uc_nation = nation_nature ;
27174: LD_ADDR_OWVAR 21
27178: PUSH
27179: LD_INT 0
27181: ST_TO_ADDR
// hc_class = class_apeman ;
27182: LD_ADDR_OWVAR 28
27186: PUSH
27187: LD_INT 12
27189: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
27190: LD_ADDR_OWVAR 31
27194: PUSH
27195: LD_INT 2
27197: PPUSH
27198: LD_INT 7
27200: PPUSH
27201: CALL_OW 12
27205: PUSH
27206: LD_OWVAR 67
27210: PLUS
27211: PUSH
27212: LD_INT 2
27214: PPUSH
27215: LD_INT 10
27217: PPUSH
27218: CALL_OW 12
27222: PUSH
27223: LD_INT 2
27225: PPUSH
27226: LD_INT 10
27228: PPUSH
27229: CALL_OW 12
27233: PUSH
27234: LD_INT 2
27236: PPUSH
27237: LD_INT 10
27239: PPUSH
27240: CALL_OW 12
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27251: LD_ADDR_OWVAR 35
27255: PUSH
27256: LD_INT 5
27258: NEG
27259: PPUSH
27260: LD_INT 5
27262: PPUSH
27263: CALL_OW 12
27267: PUSH
27268: LD_OWVAR 67
27272: MUL
27273: ST_TO_ADDR
// un = CreateHuman ;
27274: LD_ADDR_VAR 0 3
27278: PUSH
27279: CALL_OW 44
27283: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
27284: LD_VAR 0 3
27288: PPUSH
27289: LD_INT 5
27291: PPUSH
27292: LD_INT 0
27294: PPUSH
27295: CALL_OW 49
// end ;
27299: GO 27155
27301: POP
27302: POP
// for i = 1 to Difficulty + 2 do
27303: LD_ADDR_VAR 0 2
27307: PUSH
27308: DOUBLE
27309: LD_INT 1
27311: DEC
27312: ST_TO_ADDR
27313: LD_OWVAR 67
27317: PUSH
27318: LD_INT 2
27320: PLUS
27321: PUSH
27322: FOR_TO
27323: IFFALSE 27432
// begin hc_sex = sex_male ;
27325: LD_ADDR_OWVAR 27
27329: PUSH
27330: LD_INT 1
27332: ST_TO_ADDR
// uc_side = 0 ;
27333: LD_ADDR_OWVAR 20
27337: PUSH
27338: LD_INT 0
27340: ST_TO_ADDR
// uc_nation = nation_nature ;
27341: LD_ADDR_OWVAR 21
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// hc_class = class_tiger ;
27349: LD_ADDR_OWVAR 28
27353: PUSH
27354: LD_INT 14
27356: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27357: LD_ADDR_OWVAR 31
27361: PUSH
27362: LD_EXP 38
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27382: LD_ADDR_OWVAR 35
27386: PUSH
27387: LD_INT 5
27389: NEG
27390: PPUSH
27391: LD_INT 5
27393: PPUSH
27394: CALL_OW 12
27398: PUSH
27399: LD_OWVAR 67
27403: MUL
27404: ST_TO_ADDR
// un = CreateHuman ;
27405: LD_ADDR_VAR 0 3
27409: PUSH
27410: CALL_OW 44
27414: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27415: LD_VAR 0 3
27419: PPUSH
27420: LD_INT 6
27422: PPUSH
27423: LD_INT 0
27425: PPUSH
27426: CALL_OW 49
// end ;
27430: GO 27322
27432: POP
27433: POP
// for i = 1 to rand ( 3 , 4 ) do
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: DOUBLE
27440: LD_INT 1
27442: DEC
27443: ST_TO_ADDR
27444: LD_INT 3
27446: PPUSH
27447: LD_INT 4
27449: PPUSH
27450: CALL_OW 12
27454: PUSH
27455: FOR_TO
27456: IFFALSE 27550
// begin hc_sex = sex_male ;
27458: LD_ADDR_OWVAR 27
27462: PUSH
27463: LD_INT 1
27465: ST_TO_ADDR
// uc_side = 0 ;
27466: LD_ADDR_OWVAR 20
27470: PUSH
27471: LD_INT 0
27473: ST_TO_ADDR
// uc_nation = nation_nature ;
27474: LD_ADDR_OWVAR 21
27478: PUSH
27479: LD_INT 0
27481: ST_TO_ADDR
// hc_class = 18 ;
27482: LD_ADDR_OWVAR 28
27486: PUSH
27487: LD_INT 18
27489: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27490: LD_ADDR_OWVAR 31
27494: PUSH
27495: LD_EXP 38
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: ST_TO_ADDR
// hc_agressivity = 0 ;
27515: LD_ADDR_OWVAR 35
27519: PUSH
27520: LD_INT 0
27522: ST_TO_ADDR
// un = CreateHuman ;
27523: LD_ADDR_VAR 0 3
27527: PUSH
27528: CALL_OW 44
27532: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27533: LD_VAR 0 3
27537: PPUSH
27538: LD_INT 6
27540: PPUSH
27541: LD_INT 0
27543: PPUSH
27544: CALL_OW 49
// end ;
27548: GO 27455
27550: POP
27551: POP
// end ; end_of_file
27552: LD_VAR 0 1
27556: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27557: LD_EXP 47
27561: PUSH
27562: LD_INT 1
27564: EQUAL
27565: IFFALSE 27653
27567: GO 27569
27569: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27570: LD_INT 7
27572: PPUSH
27573: LD_INT 5
27575: PPUSH
27576: LD_INT 4
27578: PUSH
27579: LD_INT 5
27581: PUSH
27582: LD_INT 6
27584: PUSH
27585: LD_INT 6
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: PUSH
27594: LD_OWVAR 67
27598: ARRAY
27599: PPUSH
27600: LD_EXP 37
27604: PPUSH
27605: LD_EXP 38
27609: PPUSH
27610: CALL_OW 12
27614: PPUSH
27615: LD_INT 2
27617: PPUSH
27618: LD_INT 1
27620: PPUSH
27621: LD_INT 1
27623: PPUSH
27624: EMPTY
27625: PPUSH
27626: LD_INT 25
27628: PUSH
27629: LD_INT 26
27631: PUSH
27632: LD_INT 27
27634: PUSH
27635: LD_INT 28
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: PPUSH
27644: EMPTY
27645: PPUSH
27646: LD_INT 1
27648: PPUSH
27649: CALL 17523 0 11
27653: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27654: LD_EXP 47
27658: PUSH
27659: LD_INT 1
27661: EQUAL
27662: IFFALSE 27754
27664: GO 27666
27666: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27667: LD_INT 5
27669: PPUSH
27670: LD_INT 2
27672: PPUSH
27673: LD_INT 5
27675: PUSH
27676: LD_INT 6
27678: PUSH
27679: LD_INT 8
27681: PUSH
27682: LD_INT 9
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: PUSH
27691: LD_OWVAR 67
27695: ARRAY
27696: PPUSH
27697: LD_INT 0
27699: PPUSH
27700: LD_INT 0
27702: PPUSH
27703: LD_INT 2
27705: PUSH
27706: LD_INT 4
27708: PUSH
27709: LD_INT 5
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: LIST
27716: PUSH
27717: LD_OWVAR 67
27721: ARRAY
27722: PPUSH
27723: LD_INT 0
27725: PPUSH
27726: LD_EXP 37
27730: PPUSH
27731: LD_EXP 38
27735: PPUSH
27736: CALL_OW 12
27740: PPUSH
27741: LD_INT 7
27743: PPUSH
27744: LD_INT 9
27746: PPUSH
27747: LD_INT 1
27749: PPUSH
27750: CALL 19227 0 11
27754: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27755: LD_EXP 47
27759: PUSH
27760: LD_INT 1
27762: EQUAL
27763: IFFALSE 27772
27765: GO 27767
27767: DISABLE
// PrepareArabianSheik ;
27768: CALL 4843 0 0
27772: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27773: LD_EXP 30
27777: PUSH
27778: LD_EXP 65
27782: PUSH
27783: LD_INT 1
27785: EQUAL
27786: AND
27787: IFFALSE 27856
27789: GO 27791
27791: DISABLE
// begin enable ;
27792: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27793: LD_INT 6
27795: PPUSH
27796: LD_INT 3
27798: PPUSH
27799: LD_EXP 61
27803: PPUSH
27804: LD_INT 0
27806: PPUSH
27807: LD_OWVAR 67
27811: PPUSH
27812: LD_INT 0
27814: PPUSH
27815: LD_EXP 61
27819: PUSH
27820: LD_INT 3
27822: DIV
27823: PUSH
27824: LD_INT 1
27826: PLUS
27827: PPUSH
27828: LD_EXP 37
27832: PPUSH
27833: LD_EXP 38
27837: PPUSH
27838: CALL_OW 12
27842: PPUSH
27843: LD_INT 17
27845: PPUSH
27846: LD_INT 18
27848: PPUSH
27849: LD_INT 1
27851: PPUSH
27852: CALL 19227 0 11
// end ;
27856: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27857: LD_EXP 30
27861: PUSH
27862: LD_EXP 65
27866: PUSH
27867: LD_INT 1
27869: EQUAL
27870: AND
27871: IFFALSE 27948
27873: GO 27875
27875: DISABLE
// begin enable ;
27876: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27877: LD_INT 17
27879: PPUSH
27880: LD_INT 6
27882: PPUSH
27883: LD_EXP 60
27887: PPUSH
27888: LD_EXP 37
27892: PPUSH
27893: LD_EXP 38
27897: PPUSH
27898: CALL_OW 12
27902: PPUSH
27903: LD_INT 3
27905: PPUSH
27906: LD_INT 1
27908: PPUSH
27909: LD_INT 3
27911: PUSH
27912: LD_INT 3
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PPUSH
27919: LD_INT 43
27921: PUSH
27922: LD_INT 44
27924: PUSH
27925: LD_INT 45
27927: PUSH
27928: LD_INT 46
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: PPUSH
27937: EMPTY
27938: PPUSH
27939: EMPTY
27940: PPUSH
27941: LD_INT 1
27943: PPUSH
27944: CALL 17523 0 11
// end ;
27948: END
// every 10 10$00 trigger joinEpsilon do
27949: LD_EXP 30
27953: IFFALSE 28007
27955: GO 27957
27957: DISABLE
// begin enable ;
27958: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27959: LD_ADDR_EXP 60
27963: PUSH
27964: LD_EXP 60
27968: PUSH
27969: LD_INT 1
27971: PPUSH
27972: LD_OWVAR 67
27976: PPUSH
27977: CALL_OW 12
27981: PLUS
27982: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27983: LD_ADDR_EXP 61
27987: PUSH
27988: LD_EXP 61
27992: PUSH
27993: LD_INT 1
27995: PPUSH
27996: LD_OWVAR 67
28000: PPUSH
28001: CALL_OW 12
28005: PLUS
28006: ST_TO_ADDR
// end ;
28007: END
// every 21 21$0 trigger attackAvalaible = 1 do
28008: LD_EXP 65
28012: PUSH
28013: LD_INT 1
28015: EQUAL
28016: IFFALSE 28029
28018: GO 28020
28020: DISABLE
// attackAvalaible = 0 ; end_of_file
28021: LD_ADDR_EXP 65
28025: PUSH
28026: LD_INT 0
28028: ST_TO_ADDR
28029: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
28030: LD_INT 54
28032: PPUSH
28033: LD_INT 1
28035: PPUSH
28036: CALL_OW 321
28040: PUSH
28041: LD_INT 2
28043: EQUAL
28044: PUSH
28045: LD_INT 55
28047: PPUSH
28048: LD_INT 1
28050: PPUSH
28051: CALL_OW 321
28055: PUSH
28056: LD_INT 2
28058: EQUAL
28059: AND
28060: PUSH
28061: LD_INT 21
28063: PPUSH
28064: LD_INT 1
28066: PPUSH
28067: CALL_OW 321
28071: PUSH
28072: LD_INT 2
28074: EQUAL
28075: AND
28076: PUSH
28077: LD_INT 22
28079: PPUSH
28080: LD_INT 1
28082: PPUSH
28083: CALL_OW 321
28087: PUSH
28088: LD_INT 2
28090: EQUAL
28091: AND
28092: PUSH
28093: LD_INT 12
28095: PPUSH
28096: LD_INT 1
28098: PPUSH
28099: CALL_OW 321
28103: PUSH
28104: LD_INT 1
28106: EQUAL
28107: PUSH
28108: LD_INT 32
28110: PPUSH
28111: LD_INT 1
28113: PPUSH
28114: CALL_OW 321
28118: PUSH
28119: LD_INT 1
28121: EQUAL
28122: OR
28123: PUSH
28124: EMPTY
28125: LIST
28126: AND
28127: PUSH
28128: LD_EXP 49
28132: PUSH
28133: LD_INT 1
28135: EQUAL
28136: AND
28137: PUSH
28138: LD_INT 22
28140: PUSH
28141: LD_INT 3
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 21
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PPUSH
28162: CALL_OW 69
28166: PUSH
28167: LD_INT 0
28169: EQUAL
28170: AND
28171: IFFALSE 28227
28173: GO 28175
28175: DISABLE
// begin case query ( QEndMission ) of 1 :
28176: LD_STRING QEndMission
28178: PPUSH
28179: CALL_OW 97
28183: PUSH
28184: LD_INT 1
28186: DOUBLE
28187: EQUAL
28188: IFTRUE 28192
28190: GO 28203
28192: POP
// begin end_the_mission_allowed = true ;
28193: LD_ADDR_OWVAR 57
28197: PUSH
28198: LD_INT 1
28200: ST_TO_ADDR
// end ; 2 :
28201: GO 28227
28203: LD_INT 2
28205: DOUBLE
28206: EQUAL
28207: IFTRUE 28211
28209: GO 28226
28211: POP
// begin fastEnd = 1 ;
28212: LD_ADDR_EXP 64
28216: PUSH
28217: LD_INT 1
28219: ST_TO_ADDR
// FinishMission ;
28220: CALL 28272 0 0
// end ; end ;
28224: GO 28227
28226: POP
// end ;
28227: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
28228: LD_EXP 59
28232: PUSH
28233: LD_EXP 58
28237: NOT
28238: AND
28239: PUSH
28240: LD_INT 22
28242: PUSH
28243: LD_INT 3
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PPUSH
28250: CALL_OW 69
28254: PUSH
28255: LD_INT 0
28257: EQUAL
28258: AND
28259: IFFALSE 28271
28261: GO 28263
28263: DISABLE
// SetAchievement ( ACH_TACT ) ;
28264: LD_STRING ACH_TACT
28266: PPUSH
28267: CALL_OW 543
28271: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
28272: LD_INT 0
28274: PPUSH
28275: PPUSH
28276: PPUSH
28277: PPUSH
// if not snipersTrained then
28278: LD_EXP 63
28282: NOT
28283: IFFALSE 28292
// SetAchievement ( ACH_SNIPER ) ;
28285: LD_STRING ACH_SNIPER
28287: PPUSH
28288: CALL_OW 543
// m1 := false ;
28292: LD_ADDR_VAR 0 2
28296: PUSH
28297: LD_INT 0
28299: ST_TO_ADDR
// m2 := false ;
28300: LD_ADDR_VAR 0 3
28304: PUSH
28305: LD_INT 0
28307: ST_TO_ADDR
// m3 := false ;
28308: LD_ADDR_VAR 0 4
28312: PUSH
28313: LD_INT 0
28315: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
28316: LD_EXP 54
28320: PPUSH
28321: LD_STRING 10_KhatamStatus_1
28323: PPUSH
28324: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
28328: LD_EXP 53
28332: PPUSH
28333: LD_STRING 10_GensherEscape_1
28335: PPUSH
28336: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
28340: LD_INT 12
28342: PPUSH
28343: LD_INT 1
28345: PPUSH
28346: CALL_OW 321
28350: PUSH
28351: LD_INT 2
28353: EQUAL
28354: IFFALSE 28376
// begin AddMedal ( sights , 1 ) ;
28356: LD_STRING sights
28358: PPUSH
28359: LD_INT 1
28361: PPUSH
28362: CALL_OW 101
// m1 := true ;
28366: LD_ADDR_VAR 0 2
28370: PUSH
28371: LD_INT 1
28373: ST_TO_ADDR
// end else
28374: GO 28387
// begin AddMedal ( sights , - 1 ) ;
28376: LD_STRING sights
28378: PPUSH
28379: LD_INT 1
28381: NEG
28382: PPUSH
28383: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28387: LD_INT 32
28389: PPUSH
28390: LD_INT 1
28392: PPUSH
28393: CALL_OW 321
28397: PUSH
28398: LD_INT 2
28400: EQUAL
28401: IFFALSE 28423
// begin AddMedal ( computers , 1 ) ;
28403: LD_STRING computers
28405: PPUSH
28406: LD_INT 1
28408: PPUSH
28409: CALL_OW 101
// m2 := true ;
28413: LD_ADDR_VAR 0 3
28417: PUSH
28418: LD_INT 1
28420: ST_TO_ADDR
// end else
28421: GO 28434
// begin AddMedal ( computers , - 1 ) ;
28423: LD_STRING computers
28425: PPUSH
28426: LD_INT 1
28428: NEG
28429: PPUSH
28430: CALL_OW 101
// end ; if arabianEscape = 0 then
28434: LD_EXP 48
28438: PUSH
28439: LD_INT 0
28441: EQUAL
28442: IFFALSE 28474
// begin AddMedal ( renegades , 2 ) ;
28444: LD_STRING renegades
28446: PPUSH
28447: LD_INT 2
28449: PPUSH
28450: CALL_OW 101
// m3 := true ;
28454: LD_ADDR_VAR 0 4
28458: PUSH
28459: LD_INT 1
28461: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28462: LD_INT 0
28464: PPUSH
28465: LD_STRING 10_ScientistsEscape_1
28467: PPUSH
28468: CALL_OW 39
// end else
28472: GO 28485
// begin AddMedal ( renegades , - 1 ) ;
28474: LD_STRING renegades
28476: PPUSH
28477: LD_INT 1
28479: NEG
28480: PPUSH
28481: CALL_OW 101
// end ; SaveEpsilonBase ;
28485: CALL 29271 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28489: LD_VAR 0 2
28493: PUSH
28494: LD_VAR 0 3
28498: AND
28499: PUSH
28500: LD_VAR 0 4
28504: AND
28505: PUSH
28506: LD_OWVAR 67
28510: PUSH
28511: LD_INT 3
28513: GREATEREQUAL
28514: AND
28515: IFFALSE 28527
// SetAchievementEX ( ACH_AMER , 10 ) ;
28517: LD_STRING ACH_AMER
28519: PPUSH
28520: LD_INT 10
28522: PPUSH
28523: CALL_OW 564
// if tick <= 40 40$00 then
28527: LD_OWVAR 1
28531: PUSH
28532: LD_INT 84000
28534: LESSEQUAL
28535: IFFALSE 28551
// begin wait ( 3 ) ;
28537: LD_INT 3
28539: PPUSH
28540: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28544: LD_STRING ACH_ASPEED_10
28546: PPUSH
28547: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28551: LD_STRING Main
28553: PPUSH
28554: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28558: LD_INT 22
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 23
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 21
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 2
28590: PUSH
28591: LD_INT 25
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 25
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 25
28613: PUSH
28614: LD_INT 3
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 25
28623: PUSH
28624: LD_INT 4
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 25
28633: PUSH
28634: LD_INT 5
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 25
28643: PUSH
28644: LD_INT 8
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: PPUSH
28666: CALL_OW 69
28670: PPUSH
28671: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28675: LD_EXP 1
28679: PPUSH
28680: LD_EXP 55
28684: PUSH
28685: LD_STRING JMM
28687: STR
28688: PPUSH
28689: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28693: LD_EXP 2
28697: PPUSH
28698: LD_EXP 55
28702: PUSH
28703: LD_STRING Brown
28705: STR
28706: PPUSH
28707: CALL 11707 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28711: LD_EXP 3
28715: PPUSH
28716: LD_EXP 55
28720: PUSH
28721: LD_STRING Donaldson
28723: STR
28724: PPUSH
28725: CALL 11707 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28729: LD_EXP 4
28733: PPUSH
28734: LD_EXP 55
28738: PUSH
28739: LD_STRING Bobby
28741: STR
28742: PPUSH
28743: CALL 11707 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28747: LD_EXP 5
28751: PPUSH
28752: LD_EXP 55
28756: PUSH
28757: LD_STRING Cyrus
28759: STR
28760: PPUSH
28761: CALL 11707 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28765: LD_EXP 6
28769: PPUSH
28770: LD_EXP 55
28774: PUSH
28775: LD_STRING Lisa
28777: STR
28778: PPUSH
28779: CALL 11707 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28783: LD_EXP 7
28787: PPUSH
28788: LD_EXP 55
28792: PUSH
28793: LD_STRING Frank
28795: STR
28796: PPUSH
28797: CALL 11707 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28801: LD_EXP 8
28805: PPUSH
28806: LD_EXP 55
28810: PUSH
28811: LD_STRING Kikuchi
28813: STR
28814: PPUSH
28815: CALL 11707 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28819: LD_EXP 9
28823: PPUSH
28824: LD_EXP 55
28828: PUSH
28829: LD_STRING Houten
28831: STR
28832: PPUSH
28833: CALL 11707 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28837: LD_EXP 10
28841: PPUSH
28842: LD_EXP 55
28846: PUSH
28847: LD_STRING Gary
28849: STR
28850: PPUSH
28851: CALL 11707 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28855: LD_EXP 19
28859: PPUSH
28860: LD_EXP 55
28864: PUSH
28865: LD_STRING Cornell
28867: STR
28868: PPUSH
28869: CALL 11707 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28873: LD_EXP 11
28877: PPUSH
28878: LD_EXP 55
28882: PUSH
28883: LD_STRING Simms
28885: STR
28886: PPUSH
28887: CALL 11707 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28891: LD_EXP 12
28895: PPUSH
28896: LD_EXP 55
28900: PUSH
28901: LD_STRING Denis
28903: STR
28904: PPUSH
28905: CALL 11707 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28909: LD_EXP 13
28913: PPUSH
28914: LD_EXP 55
28918: PUSH
28919: LD_STRING Joan
28921: STR
28922: PPUSH
28923: CALL 11707 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28927: LD_EXP 15
28931: PPUSH
28932: LD_EXP 55
28936: PUSH
28937: LD_STRING Gladstone
28939: STR
28940: PPUSH
28941: CALL 11707 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28945: LD_EXP 17
28949: PPUSH
28950: LD_EXP 55
28954: PUSH
28955: LD_STRING DeltaDoctor
28957: STR
28958: PPUSH
28959: CALL 11707 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28963: LD_EXP 23
28967: PPUSH
28968: LD_STRING 10c_lock
28970: PPUSH
28971: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28975: LD_INT 50
28977: PUSH
28978: EMPTY
28979: LIST
28980: PUSH
28981: LD_INT 22
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 21
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: LD_INT 25
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 25
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 25
29026: PUSH
29027: LD_INT 3
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 25
29036: PUSH
29037: LD_INT 4
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 25
29046: PUSH
29047: LD_INT 5
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 25
29056: PUSH
29057: LD_INT 8
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: PPUSH
29079: CALL_OW 69
29083: PUSH
29084: LD_EXP 1
29088: PUSH
29089: LD_EXP 2
29093: PUSH
29094: LD_EXP 3
29098: PUSH
29099: LD_EXP 4
29103: PUSH
29104: LD_EXP 5
29108: PUSH
29109: LD_EXP 6
29113: PUSH
29114: LD_EXP 7
29118: PUSH
29119: LD_EXP 15
29123: PUSH
29124: LD_EXP 8
29128: PUSH
29129: LD_EXP 12
29133: PUSH
29134: LD_EXP 13
29138: PUSH
29139: LD_EXP 9
29143: PUSH
29144: LD_EXP 11
29148: PUSH
29149: LD_EXP 10
29153: PUSH
29154: LD_EXP 17
29158: PUSH
29159: LD_EXP 19
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: DIFF
29182: PPUSH
29183: LD_STRING 10_other_survivors
29185: PPUSH
29186: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
29190: LD_INT 50
29192: PUSH
29193: EMPTY
29194: LIST
29195: PUSH
29196: LD_INT 22
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 21
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 25
29221: PUSH
29222: LD_INT 16
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 25
29231: PUSH
29232: LD_INT 12
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: PPUSH
29250: CALL_OW 69
29254: PPUSH
29255: LD_STRING 10_ape
29257: PPUSH
29258: CALL_OW 38
// YouWin ;
29262: CALL_OW 103
// end ;
29266: LD_VAR 0 1
29270: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
29271: LD_INT 0
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
// epsilonBase = [ ] ;
29277: LD_ADDR_VAR 0 2
29281: PUSH
29282: EMPTY
29283: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
29284: LD_ADDR_VAR 0 3
29288: PUSH
29289: LD_INT 22
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 21
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 50
29311: PUSH
29312: EMPTY
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: PPUSH
29320: CALL_OW 69
29324: ST_TO_ADDR
// for i in buildings do
29325: LD_ADDR_VAR 0 4
29329: PUSH
29330: LD_VAR 0 3
29334: PUSH
29335: FOR_IN
29336: IFFALSE 29788
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
29338: LD_VAR 0 4
29342: PPUSH
29343: CALL_OW 266
29347: PUSH
29348: LD_INT 6
29350: PUSH
29351: LD_INT 7
29353: PUSH
29354: LD_INT 8
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: IN
29362: IFFALSE 29476
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29364: LD_ADDR_VAR 0 2
29368: PUSH
29369: LD_VAR 0 2
29373: PUSH
29374: LD_VAR 0 4
29378: PPUSH
29379: CALL_OW 266
29383: PUSH
29384: LD_VAR 0 4
29388: PPUSH
29389: CALL_OW 250
29393: PUSH
29394: LD_VAR 0 4
29398: PPUSH
29399: CALL_OW 251
29403: PUSH
29404: LD_VAR 0 4
29408: PPUSH
29409: CALL_OW 254
29413: PUSH
29414: LD_VAR 0 4
29418: PPUSH
29419: CALL_OW 267
29423: PUSH
29424: LD_VAR 0 4
29428: PPUSH
29429: CALL_OW 248
29433: PUSH
29434: LD_VAR 0 4
29438: PPUSH
29439: LD_INT 1
29441: PPUSH
29442: CALL_OW 268
29446: PUSH
29447: LD_VAR 0 4
29451: PPUSH
29452: LD_INT 2
29454: PPUSH
29455: CALL_OW 268
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: PUSH
29470: EMPTY
29471: LIST
29472: ADD
29473: ST_TO_ADDR
29474: GO 29786
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29476: LD_VAR 0 4
29480: PPUSH
29481: CALL_OW 266
29485: PUSH
29486: LD_INT 32
29488: EQUAL
29489: PUSH
29490: LD_VAR 0 4
29494: PPUSH
29495: CALL_OW 266
29499: PUSH
29500: LD_INT 33
29502: EQUAL
29503: OR
29504: IFFALSE 29601
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29506: LD_ADDR_VAR 0 2
29510: PUSH
29511: LD_VAR 0 2
29515: PUSH
29516: LD_VAR 0 4
29520: PPUSH
29521: CALL_OW 266
29525: PUSH
29526: LD_VAR 0 4
29530: PPUSH
29531: CALL_OW 250
29535: PUSH
29536: LD_VAR 0 4
29540: PPUSH
29541: CALL_OW 251
29545: PUSH
29546: LD_VAR 0 4
29550: PPUSH
29551: CALL_OW 254
29555: PUSH
29556: LD_VAR 0 4
29560: PPUSH
29561: CALL_OW 267
29565: PUSH
29566: LD_VAR 0 4
29570: PPUSH
29571: CALL_OW 248
29575: PUSH
29576: LD_VAR 0 4
29580: PPUSH
29581: CALL_OW 269
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: ADD
29598: ST_TO_ADDR
29599: GO 29786
// if GetBType ( i ) = b_factory then
29601: LD_VAR 0 4
29605: PPUSH
29606: CALL_OW 266
29610: PUSH
29611: LD_INT 3
29613: EQUAL
29614: IFFALSE 29704
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29616: LD_ADDR_VAR 0 2
29620: PUSH
29621: LD_VAR 0 2
29625: PPUSH
29626: LD_INT 1
29628: PPUSH
29629: LD_VAR 0 4
29633: PPUSH
29634: CALL_OW 266
29638: PUSH
29639: LD_VAR 0 4
29643: PPUSH
29644: CALL_OW 250
29648: PUSH
29649: LD_VAR 0 4
29653: PPUSH
29654: CALL_OW 251
29658: PUSH
29659: LD_VAR 0 4
29663: PPUSH
29664: CALL_OW 254
29668: PUSH
29669: LD_VAR 0 4
29673: PPUSH
29674: CALL_OW 267
29678: PUSH
29679: LD_VAR 0 4
29683: PPUSH
29684: CALL_OW 248
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: PPUSH
29697: CALL_OW 2
29701: ST_TO_ADDR
29702: GO 29786
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29704: LD_ADDR_VAR 0 2
29708: PUSH
29709: LD_VAR 0 2
29713: PUSH
29714: LD_VAR 0 4
29718: PPUSH
29719: CALL_OW 266
29723: PUSH
29724: LD_VAR 0 4
29728: PPUSH
29729: CALL_OW 250
29733: PUSH
29734: LD_VAR 0 4
29738: PPUSH
29739: CALL_OW 251
29743: PUSH
29744: LD_VAR 0 4
29748: PPUSH
29749: CALL_OW 254
29753: PUSH
29754: LD_VAR 0 4
29758: PPUSH
29759: CALL_OW 267
29763: PUSH
29764: LD_VAR 0 4
29768: PPUSH
29769: CALL_OW 248
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: PUSH
29782: EMPTY
29783: LIST
29784: ADD
29785: ST_TO_ADDR
// end ;
29786: GO 29335
29788: POP
29789: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29790: LD_VAR 0 2
29794: PPUSH
29795: LD_STRING 10_EpsilonBase
29797: PPUSH
29798: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29802: LD_INT 19
29804: PPUSH
29805: LD_STRING 10_EpsilonEnv
29807: PPUSH
29808: CALL 29817 0 2
// end ;
29812: LD_VAR 0 1
29816: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29817: LD_INT 0
29819: PPUSH
// result := ListEnvironmentArea ( area ) ;
29820: LD_ADDR_VAR 0 3
29824: PUSH
29825: LD_VAR 0 1
29829: PPUSH
29830: CALL_OW 353
29834: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29835: LD_VAR 0 3
29839: PPUSH
29840: LD_VAR 0 2
29844: PPUSH
29845: CALL_OW 39
// end ; end_of_file
29849: LD_VAR 0 3
29853: RET
// every 0 0$01 do var timer ;
29854: GO 29856
29856: DISABLE
29857: LD_INT 0
29859: PPUSH
// begin timer := 0 0$20 ;
29860: LD_ADDR_VAR 0 1
29864: PUSH
29865: LD_INT 700
29867: ST_TO_ADDR
// repeat wait ( timer ) ;
29868: LD_VAR 0 1
29872: PPUSH
29873: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29877: LD_EXP 57
29881: PUSH
29882: LD_INT 6
29884: GREATEREQUAL
29885: PUSH
29886: LD_EXP 57
29890: PUSH
29891: LD_INT 14
29893: LESS
29894: AND
29895: IFFALSE 29911
// timer := timer + 0 0$3 ;
29897: LD_ADDR_VAR 0 1
29901: PUSH
29902: LD_VAR 0 1
29906: PUSH
29907: LD_INT 105
29909: PLUS
29910: ST_TO_ADDR
// if cratesSpawned >= 14 then
29911: LD_EXP 57
29915: PUSH
29916: LD_INT 14
29918: GREATEREQUAL
29919: IFFALSE 29935
// timer := timer + 0 0$6 ;
29921: LD_ADDR_VAR 0 1
29925: PUSH
29926: LD_VAR 0 1
29930: PUSH
29931: LD_INT 210
29933: PLUS
29934: ST_TO_ADDR
// if timer > 2 2$00 then
29935: LD_VAR 0 1
29939: PUSH
29940: LD_INT 4200
29942: GREATER
29943: IFFALSE 29953
// timer := 0 0$45 ;
29945: LD_ADDR_VAR 0 1
29949: PUSH
29950: LD_INT 1575
29952: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29953: LD_INT 1
29955: PPUSH
29956: LD_INT 5
29958: PPUSH
29959: CALL_OW 12
29963: PPUSH
29964: LD_INT 16
29966: PPUSH
29967: LD_INT 1
29969: PPUSH
29970: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29974: LD_ADDR_EXP 57
29978: PUSH
29979: LD_EXP 57
29983: PUSH
29984: LD_INT 1
29986: PLUS
29987: ST_TO_ADDR
// until false ;
29988: LD_INT 0
29990: IFFALSE 29868
// end ; end_of_file
29992: PPOPN 1
29994: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export function InitGlobalVariables ; begin
29995: LD_INT 0
29997: PPUSH
// ar_miner := 81 ;
29998: LD_ADDR_EXP 77
30002: PUSH
30003: LD_INT 81
30005: ST_TO_ADDR
// ar_crane := 88 ;
30006: LD_ADDR_EXP 76
30010: PUSH
30011: LD_INT 88
30013: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
30014: LD_ADDR_EXP 71
30018: PUSH
30019: LD_INT 89
30021: ST_TO_ADDR
// us_hack := 99 ;
30022: LD_ADDR_EXP 72
30026: PUSH
30027: LD_INT 99
30029: ST_TO_ADDR
// us_artillery := 97 ;
30030: LD_ADDR_EXP 73
30034: PUSH
30035: LD_INT 97
30037: ST_TO_ADDR
// ar_bio_bomb := 91 ;
30038: LD_ADDR_EXP 74
30042: PUSH
30043: LD_INT 91
30045: ST_TO_ADDR
// ar_mortar := 92 ;
30046: LD_ADDR_EXP 75
30050: PUSH
30051: LD_INT 92
30053: ST_TO_ADDR
// ru_flamethrower := 93 ;
30054: LD_ADDR_EXP 78
30058: PUSH
30059: LD_INT 93
30061: ST_TO_ADDR
// ru_radar := 98 ;
30062: LD_ADDR_EXP 70
30066: PUSH
30067: LD_INT 98
30069: ST_TO_ADDR
// tech_Artillery := 80 ;
30070: LD_ADDR_EXP 79
30074: PUSH
30075: LD_INT 80
30077: ST_TO_ADDR
// tech_RadMat := 81 ;
30078: LD_ADDR_EXP 80
30082: PUSH
30083: LD_INT 81
30085: ST_TO_ADDR
// tech_BasicTools := 82 ;
30086: LD_ADDR_EXP 81
30090: PUSH
30091: LD_INT 82
30093: ST_TO_ADDR
// tech_Cargo := 83 ;
30094: LD_ADDR_EXP 82
30098: PUSH
30099: LD_INT 83
30101: ST_TO_ADDR
// tech_Track := 84 ;
30102: LD_ADDR_EXP 83
30106: PUSH
30107: LD_INT 84
30109: ST_TO_ADDR
// tech_Crane := 85 ;
30110: LD_ADDR_EXP 84
30114: PUSH
30115: LD_INT 85
30117: ST_TO_ADDR
// tech_Bulldozer := 86 ;
30118: LD_ADDR_EXP 85
30122: PUSH
30123: LD_INT 86
30125: ST_TO_ADDR
// tech_Hovercraft := 87 ;
30126: LD_ADDR_EXP 86
30130: PUSH
30131: LD_INT 87
30133: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
30134: LD_ADDR_EXP 87
30138: PUSH
30139: LD_INT 88
30141: ST_TO_ADDR
// end ;
30142: LD_VAR 0 1
30146: RET
// every 1 do
30147: GO 30149
30149: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
30150: CALL 29995 0 0
30154: END
// every 0 0$1 do
30155: GO 30157
30157: DISABLE
// begin enable ;
30158: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
30159: LD_STRING updateTimer(
30161: PUSH
30162: LD_OWVAR 1
30166: STR
30167: PUSH
30168: LD_STRING );
30170: STR
30171: PPUSH
30172: CALL_OW 559
// end ;
30176: END
// export function SOS_MapStart ( ) ; begin
30177: LD_INT 0
30179: PPUSH
// if streamModeActive then
30180: LD_EXP 88
30184: IFFALSE 30193
// DefineStreamItems ( true ) ;
30186: LD_INT 1
30188: PPUSH
30189: CALL 31847 0 1
// UpdateFactoryWaypoints ( ) ;
30193: CALL 44708 0 0
// UpdateWarehouseGatheringPoints ( ) ;
30197: CALL 44965 0 0
// end ;
30201: LD_VAR 0 1
30205: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30206: LD_INT 0
30208: PPUSH
// if p2 = 100 then
30209: LD_VAR 0 2
30213: PUSH
30214: LD_INT 100
30216: EQUAL
30217: IFFALSE 31220
// begin if not StreamModeActive then
30219: LD_EXP 88
30223: NOT
30224: IFFALSE 30234
// StreamModeActive := true ;
30226: LD_ADDR_EXP 88
30230: PUSH
30231: LD_INT 1
30233: ST_TO_ADDR
// if p3 = 0 then
30234: LD_VAR 0 3
30238: PUSH
30239: LD_INT 0
30241: EQUAL
30242: IFFALSE 30248
// InitStreamMode ;
30244: CALL 31383 0 0
// if p3 = 1 then
30248: LD_VAR 0 3
30252: PUSH
30253: LD_INT 1
30255: EQUAL
30256: IFFALSE 30266
// sRocket := true ;
30258: LD_ADDR_EXP 93
30262: PUSH
30263: LD_INT 1
30265: ST_TO_ADDR
// if p3 = 2 then
30266: LD_VAR 0 3
30270: PUSH
30271: LD_INT 2
30273: EQUAL
30274: IFFALSE 30284
// sSpeed := true ;
30276: LD_ADDR_EXP 92
30280: PUSH
30281: LD_INT 1
30283: ST_TO_ADDR
// if p3 = 3 then
30284: LD_VAR 0 3
30288: PUSH
30289: LD_INT 3
30291: EQUAL
30292: IFFALSE 30302
// sEngine := true ;
30294: LD_ADDR_EXP 94
30298: PUSH
30299: LD_INT 1
30301: ST_TO_ADDR
// if p3 = 4 then
30302: LD_VAR 0 3
30306: PUSH
30307: LD_INT 4
30309: EQUAL
30310: IFFALSE 30320
// sSpec := true ;
30312: LD_ADDR_EXP 91
30316: PUSH
30317: LD_INT 1
30319: ST_TO_ADDR
// if p3 = 5 then
30320: LD_VAR 0 3
30324: PUSH
30325: LD_INT 5
30327: EQUAL
30328: IFFALSE 30338
// sLevel := true ;
30330: LD_ADDR_EXP 95
30334: PUSH
30335: LD_INT 1
30337: ST_TO_ADDR
// if p3 = 6 then
30338: LD_VAR 0 3
30342: PUSH
30343: LD_INT 6
30345: EQUAL
30346: IFFALSE 30356
// sArmoury := true ;
30348: LD_ADDR_EXP 96
30352: PUSH
30353: LD_INT 1
30355: ST_TO_ADDR
// if p3 = 7 then
30356: LD_VAR 0 3
30360: PUSH
30361: LD_INT 7
30363: EQUAL
30364: IFFALSE 30374
// sRadar := true ;
30366: LD_ADDR_EXP 97
30370: PUSH
30371: LD_INT 1
30373: ST_TO_ADDR
// if p3 = 8 then
30374: LD_VAR 0 3
30378: PUSH
30379: LD_INT 8
30381: EQUAL
30382: IFFALSE 30392
// sBunker := true ;
30384: LD_ADDR_EXP 98
30388: PUSH
30389: LD_INT 1
30391: ST_TO_ADDR
// if p3 = 9 then
30392: LD_VAR 0 3
30396: PUSH
30397: LD_INT 9
30399: EQUAL
30400: IFFALSE 30410
// sHack := true ;
30402: LD_ADDR_EXP 99
30406: PUSH
30407: LD_INT 1
30409: ST_TO_ADDR
// if p3 = 10 then
30410: LD_VAR 0 3
30414: PUSH
30415: LD_INT 10
30417: EQUAL
30418: IFFALSE 30428
// sFire := true ;
30420: LD_ADDR_EXP 100
30424: PUSH
30425: LD_INT 1
30427: ST_TO_ADDR
// if p3 = 11 then
30428: LD_VAR 0 3
30432: PUSH
30433: LD_INT 11
30435: EQUAL
30436: IFFALSE 30446
// sRefresh := true ;
30438: LD_ADDR_EXP 101
30442: PUSH
30443: LD_INT 1
30445: ST_TO_ADDR
// if p3 = 12 then
30446: LD_VAR 0 3
30450: PUSH
30451: LD_INT 12
30453: EQUAL
30454: IFFALSE 30464
// sExp := true ;
30456: LD_ADDR_EXP 102
30460: PUSH
30461: LD_INT 1
30463: ST_TO_ADDR
// if p3 = 13 then
30464: LD_VAR 0 3
30468: PUSH
30469: LD_INT 13
30471: EQUAL
30472: IFFALSE 30482
// sDepot := true ;
30474: LD_ADDR_EXP 103
30478: PUSH
30479: LD_INT 1
30481: ST_TO_ADDR
// if p3 = 14 then
30482: LD_VAR 0 3
30486: PUSH
30487: LD_INT 14
30489: EQUAL
30490: IFFALSE 30500
// sFlag := true ;
30492: LD_ADDR_EXP 104
30496: PUSH
30497: LD_INT 1
30499: ST_TO_ADDR
// if p3 = 15 then
30500: LD_VAR 0 3
30504: PUSH
30505: LD_INT 15
30507: EQUAL
30508: IFFALSE 30518
// sKamikadze := true ;
30510: LD_ADDR_EXP 112
30514: PUSH
30515: LD_INT 1
30517: ST_TO_ADDR
// if p3 = 16 then
30518: LD_VAR 0 3
30522: PUSH
30523: LD_INT 16
30525: EQUAL
30526: IFFALSE 30536
// sTroll := true ;
30528: LD_ADDR_EXP 113
30532: PUSH
30533: LD_INT 1
30535: ST_TO_ADDR
// if p3 = 17 then
30536: LD_VAR 0 3
30540: PUSH
30541: LD_INT 17
30543: EQUAL
30544: IFFALSE 30554
// sSlow := true ;
30546: LD_ADDR_EXP 114
30550: PUSH
30551: LD_INT 1
30553: ST_TO_ADDR
// if p3 = 18 then
30554: LD_VAR 0 3
30558: PUSH
30559: LD_INT 18
30561: EQUAL
30562: IFFALSE 30572
// sLack := true ;
30564: LD_ADDR_EXP 115
30568: PUSH
30569: LD_INT 1
30571: ST_TO_ADDR
// if p3 = 19 then
30572: LD_VAR 0 3
30576: PUSH
30577: LD_INT 19
30579: EQUAL
30580: IFFALSE 30590
// sTank := true ;
30582: LD_ADDR_EXP 117
30586: PUSH
30587: LD_INT 1
30589: ST_TO_ADDR
// if p3 = 20 then
30590: LD_VAR 0 3
30594: PUSH
30595: LD_INT 20
30597: EQUAL
30598: IFFALSE 30608
// sRemote := true ;
30600: LD_ADDR_EXP 118
30604: PUSH
30605: LD_INT 1
30607: ST_TO_ADDR
// if p3 = 21 then
30608: LD_VAR 0 3
30612: PUSH
30613: LD_INT 21
30615: EQUAL
30616: IFFALSE 30626
// sPowell := true ;
30618: LD_ADDR_EXP 119
30622: PUSH
30623: LD_INT 1
30625: ST_TO_ADDR
// if p3 = 22 then
30626: LD_VAR 0 3
30630: PUSH
30631: LD_INT 22
30633: EQUAL
30634: IFFALSE 30644
// sTeleport := true ;
30636: LD_ADDR_EXP 122
30640: PUSH
30641: LD_INT 1
30643: ST_TO_ADDR
// if p3 = 23 then
30644: LD_VAR 0 3
30648: PUSH
30649: LD_INT 23
30651: EQUAL
30652: IFFALSE 30662
// sOilTower := true ;
30654: LD_ADDR_EXP 124
30658: PUSH
30659: LD_INT 1
30661: ST_TO_ADDR
// if p3 = 24 then
30662: LD_VAR 0 3
30666: PUSH
30667: LD_INT 24
30669: EQUAL
30670: IFFALSE 30680
// sShovel := true ;
30672: LD_ADDR_EXP 125
30676: PUSH
30677: LD_INT 1
30679: ST_TO_ADDR
// if p3 = 25 then
30680: LD_VAR 0 3
30684: PUSH
30685: LD_INT 25
30687: EQUAL
30688: IFFALSE 30698
// sSheik := true ;
30690: LD_ADDR_EXP 126
30694: PUSH
30695: LD_INT 1
30697: ST_TO_ADDR
// if p3 = 26 then
30698: LD_VAR 0 3
30702: PUSH
30703: LD_INT 26
30705: EQUAL
30706: IFFALSE 30716
// sEarthquake := true ;
30708: LD_ADDR_EXP 128
30712: PUSH
30713: LD_INT 1
30715: ST_TO_ADDR
// if p3 = 27 then
30716: LD_VAR 0 3
30720: PUSH
30721: LD_INT 27
30723: EQUAL
30724: IFFALSE 30734
// sAI := true ;
30726: LD_ADDR_EXP 129
30730: PUSH
30731: LD_INT 1
30733: ST_TO_ADDR
// if p3 = 28 then
30734: LD_VAR 0 3
30738: PUSH
30739: LD_INT 28
30741: EQUAL
30742: IFFALSE 30752
// sCargo := true ;
30744: LD_ADDR_EXP 132
30748: PUSH
30749: LD_INT 1
30751: ST_TO_ADDR
// if p3 = 29 then
30752: LD_VAR 0 3
30756: PUSH
30757: LD_INT 29
30759: EQUAL
30760: IFFALSE 30770
// sDLaser := true ;
30762: LD_ADDR_EXP 133
30766: PUSH
30767: LD_INT 1
30769: ST_TO_ADDR
// if p3 = 30 then
30770: LD_VAR 0 3
30774: PUSH
30775: LD_INT 30
30777: EQUAL
30778: IFFALSE 30788
// sExchange := true ;
30780: LD_ADDR_EXP 134
30784: PUSH
30785: LD_INT 1
30787: ST_TO_ADDR
// if p3 = 31 then
30788: LD_VAR 0 3
30792: PUSH
30793: LD_INT 31
30795: EQUAL
30796: IFFALSE 30806
// sFac := true ;
30798: LD_ADDR_EXP 135
30802: PUSH
30803: LD_INT 1
30805: ST_TO_ADDR
// if p3 = 32 then
30806: LD_VAR 0 3
30810: PUSH
30811: LD_INT 32
30813: EQUAL
30814: IFFALSE 30824
// sPower := true ;
30816: LD_ADDR_EXP 136
30820: PUSH
30821: LD_INT 1
30823: ST_TO_ADDR
// if p3 = 33 then
30824: LD_VAR 0 3
30828: PUSH
30829: LD_INT 33
30831: EQUAL
30832: IFFALSE 30842
// sRandom := true ;
30834: LD_ADDR_EXP 137
30838: PUSH
30839: LD_INT 1
30841: ST_TO_ADDR
// if p3 = 34 then
30842: LD_VAR 0 3
30846: PUSH
30847: LD_INT 34
30849: EQUAL
30850: IFFALSE 30860
// sShield := true ;
30852: LD_ADDR_EXP 138
30856: PUSH
30857: LD_INT 1
30859: ST_TO_ADDR
// if p3 = 35 then
30860: LD_VAR 0 3
30864: PUSH
30865: LD_INT 35
30867: EQUAL
30868: IFFALSE 30878
// sTime := true ;
30870: LD_ADDR_EXP 139
30874: PUSH
30875: LD_INT 1
30877: ST_TO_ADDR
// if p3 = 36 then
30878: LD_VAR 0 3
30882: PUSH
30883: LD_INT 36
30885: EQUAL
30886: IFFALSE 30896
// sTools := true ;
30888: LD_ADDR_EXP 140
30892: PUSH
30893: LD_INT 1
30895: ST_TO_ADDR
// if p3 = 101 then
30896: LD_VAR 0 3
30900: PUSH
30901: LD_INT 101
30903: EQUAL
30904: IFFALSE 30914
// sSold := true ;
30906: LD_ADDR_EXP 105
30910: PUSH
30911: LD_INT 1
30913: ST_TO_ADDR
// if p3 = 102 then
30914: LD_VAR 0 3
30918: PUSH
30919: LD_INT 102
30921: EQUAL
30922: IFFALSE 30932
// sDiff := true ;
30924: LD_ADDR_EXP 106
30928: PUSH
30929: LD_INT 1
30931: ST_TO_ADDR
// if p3 = 103 then
30932: LD_VAR 0 3
30936: PUSH
30937: LD_INT 103
30939: EQUAL
30940: IFFALSE 30950
// sFog := true ;
30942: LD_ADDR_EXP 109
30946: PUSH
30947: LD_INT 1
30949: ST_TO_ADDR
// if p3 = 104 then
30950: LD_VAR 0 3
30954: PUSH
30955: LD_INT 104
30957: EQUAL
30958: IFFALSE 30968
// sReset := true ;
30960: LD_ADDR_EXP 110
30964: PUSH
30965: LD_INT 1
30967: ST_TO_ADDR
// if p3 = 105 then
30968: LD_VAR 0 3
30972: PUSH
30973: LD_INT 105
30975: EQUAL
30976: IFFALSE 30986
// sSun := true ;
30978: LD_ADDR_EXP 111
30982: PUSH
30983: LD_INT 1
30985: ST_TO_ADDR
// if p3 = 106 then
30986: LD_VAR 0 3
30990: PUSH
30991: LD_INT 106
30993: EQUAL
30994: IFFALSE 31004
// sTiger := true ;
30996: LD_ADDR_EXP 107
31000: PUSH
31001: LD_INT 1
31003: ST_TO_ADDR
// if p3 = 107 then
31004: LD_VAR 0 3
31008: PUSH
31009: LD_INT 107
31011: EQUAL
31012: IFFALSE 31022
// sBomb := true ;
31014: LD_ADDR_EXP 108
31018: PUSH
31019: LD_INT 1
31021: ST_TO_ADDR
// if p3 = 108 then
31022: LD_VAR 0 3
31026: PUSH
31027: LD_INT 108
31029: EQUAL
31030: IFFALSE 31040
// sWound := true ;
31032: LD_ADDR_EXP 116
31036: PUSH
31037: LD_INT 1
31039: ST_TO_ADDR
// if p3 = 109 then
31040: LD_VAR 0 3
31044: PUSH
31045: LD_INT 109
31047: EQUAL
31048: IFFALSE 31058
// sBetray := true ;
31050: LD_ADDR_EXP 120
31054: PUSH
31055: LD_INT 1
31057: ST_TO_ADDR
// if p3 = 110 then
31058: LD_VAR 0 3
31062: PUSH
31063: LD_INT 110
31065: EQUAL
31066: IFFALSE 31076
// sContamin := true ;
31068: LD_ADDR_EXP 121
31072: PUSH
31073: LD_INT 1
31075: ST_TO_ADDR
// if p3 = 111 then
31076: LD_VAR 0 3
31080: PUSH
31081: LD_INT 111
31083: EQUAL
31084: IFFALSE 31094
// sOil := true ;
31086: LD_ADDR_EXP 123
31090: PUSH
31091: LD_INT 1
31093: ST_TO_ADDR
// if p3 = 112 then
31094: LD_VAR 0 3
31098: PUSH
31099: LD_INT 112
31101: EQUAL
31102: IFFALSE 31112
// sStu := true ;
31104: LD_ADDR_EXP 127
31108: PUSH
31109: LD_INT 1
31111: ST_TO_ADDR
// if p3 = 113 then
31112: LD_VAR 0 3
31116: PUSH
31117: LD_INT 113
31119: EQUAL
31120: IFFALSE 31130
// sBazooka := true ;
31122: LD_ADDR_EXP 130
31126: PUSH
31127: LD_INT 1
31129: ST_TO_ADDR
// if p3 = 114 then
31130: LD_VAR 0 3
31134: PUSH
31135: LD_INT 114
31137: EQUAL
31138: IFFALSE 31148
// sMortar := true ;
31140: LD_ADDR_EXP 131
31144: PUSH
31145: LD_INT 1
31147: ST_TO_ADDR
// if p3 = 115 then
31148: LD_VAR 0 3
31152: PUSH
31153: LD_INT 115
31155: EQUAL
31156: IFFALSE 31166
// sRanger := true ;
31158: LD_ADDR_EXP 141
31162: PUSH
31163: LD_INT 1
31165: ST_TO_ADDR
// if p3 = 116 then
31166: LD_VAR 0 3
31170: PUSH
31171: LD_INT 116
31173: EQUAL
31174: IFFALSE 31184
// sComputer := true ;
31176: LD_ADDR_EXP 142
31180: PUSH
31181: LD_INT 1
31183: ST_TO_ADDR
// if p3 = 117 then
31184: LD_VAR 0 3
31188: PUSH
31189: LD_INT 117
31191: EQUAL
31192: IFFALSE 31202
// s30 := true ;
31194: LD_ADDR_EXP 143
31198: PUSH
31199: LD_INT 1
31201: ST_TO_ADDR
// if p3 = 118 then
31202: LD_VAR 0 3
31206: PUSH
31207: LD_INT 118
31209: EQUAL
31210: IFFALSE 31220
// s60 := true ;
31212: LD_ADDR_EXP 144
31216: PUSH
31217: LD_INT 1
31219: ST_TO_ADDR
// end ; if p2 = 101 then
31220: LD_VAR 0 2
31224: PUSH
31225: LD_INT 101
31227: EQUAL
31228: IFFALSE 31356
// begin case p3 of 1 :
31230: LD_VAR 0 3
31234: PUSH
31235: LD_INT 1
31237: DOUBLE
31238: EQUAL
31239: IFTRUE 31243
31241: GO 31250
31243: POP
// hHackUnlimitedResources ; 2 :
31244: CALL 43454 0 0
31248: GO 31356
31250: LD_INT 2
31252: DOUBLE
31253: EQUAL
31254: IFTRUE 31258
31256: GO 31265
31258: POP
// hHackSetLevel10 ; 3 :
31259: CALL 43587 0 0
31263: GO 31356
31265: LD_INT 3
31267: DOUBLE
31268: EQUAL
31269: IFTRUE 31273
31271: GO 31280
31273: POP
// hHackSetLevel10YourUnits ; 4 :
31274: CALL 43672 0 0
31278: GO 31356
31280: LD_INT 4
31282: DOUBLE
31283: EQUAL
31284: IFTRUE 31288
31286: GO 31295
31288: POP
// hHackInvincible ; 5 :
31289: CALL 44120 0 0
31293: GO 31356
31295: LD_INT 5
31297: DOUBLE
31298: EQUAL
31299: IFTRUE 31303
31301: GO 31310
31303: POP
// hHackInvisible ; 6 :
31304: CALL 44231 0 0
31308: GO 31356
31310: LD_INT 6
31312: DOUBLE
31313: EQUAL
31314: IFTRUE 31318
31316: GO 31325
31318: POP
// hHackChangeYourSide ; 7 :
31319: CALL 44288 0 0
31323: GO 31356
31325: LD_INT 7
31327: DOUBLE
31328: EQUAL
31329: IFTRUE 31333
31331: GO 31340
31333: POP
// hHackChangeUnitSide ; 8 :
31334: CALL 44330 0 0
31338: GO 31356
31340: LD_INT 8
31342: DOUBLE
31343: EQUAL
31344: IFTRUE 31348
31346: GO 31355
31348: POP
// hHackFog ; end ;
31349: CALL 44431 0 0
31353: GO 31356
31355: POP
// end ; end ;
31356: LD_VAR 0 7
31360: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
31361: GO 31363
31363: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
31364: LD_STRING initStreamRollete();
31366: PPUSH
31367: CALL_OW 559
// InitStreamMode ;
31371: CALL 31383 0 0
// DefineStreamItems ( false ) ;
31375: LD_INT 0
31377: PPUSH
31378: CALL 31847 0 1
// end ;
31382: END
// function InitStreamMode ; begin
31383: LD_INT 0
31385: PPUSH
// streamModeActive := false ;
31386: LD_ADDR_EXP 88
31390: PUSH
31391: LD_INT 0
31393: ST_TO_ADDR
// normalCounter := 36 ;
31394: LD_ADDR_EXP 89
31398: PUSH
31399: LD_INT 36
31401: ST_TO_ADDR
// hardcoreCounter := 18 ;
31402: LD_ADDR_EXP 90
31406: PUSH
31407: LD_INT 18
31409: ST_TO_ADDR
// sRocket := false ;
31410: LD_ADDR_EXP 93
31414: PUSH
31415: LD_INT 0
31417: ST_TO_ADDR
// sSpeed := false ;
31418: LD_ADDR_EXP 92
31422: PUSH
31423: LD_INT 0
31425: ST_TO_ADDR
// sEngine := false ;
31426: LD_ADDR_EXP 94
31430: PUSH
31431: LD_INT 0
31433: ST_TO_ADDR
// sSpec := false ;
31434: LD_ADDR_EXP 91
31438: PUSH
31439: LD_INT 0
31441: ST_TO_ADDR
// sLevel := false ;
31442: LD_ADDR_EXP 95
31446: PUSH
31447: LD_INT 0
31449: ST_TO_ADDR
// sArmoury := false ;
31450: LD_ADDR_EXP 96
31454: PUSH
31455: LD_INT 0
31457: ST_TO_ADDR
// sRadar := false ;
31458: LD_ADDR_EXP 97
31462: PUSH
31463: LD_INT 0
31465: ST_TO_ADDR
// sBunker := false ;
31466: LD_ADDR_EXP 98
31470: PUSH
31471: LD_INT 0
31473: ST_TO_ADDR
// sHack := false ;
31474: LD_ADDR_EXP 99
31478: PUSH
31479: LD_INT 0
31481: ST_TO_ADDR
// sFire := false ;
31482: LD_ADDR_EXP 100
31486: PUSH
31487: LD_INT 0
31489: ST_TO_ADDR
// sRefresh := false ;
31490: LD_ADDR_EXP 101
31494: PUSH
31495: LD_INT 0
31497: ST_TO_ADDR
// sExp := false ;
31498: LD_ADDR_EXP 102
31502: PUSH
31503: LD_INT 0
31505: ST_TO_ADDR
// sDepot := false ;
31506: LD_ADDR_EXP 103
31510: PUSH
31511: LD_INT 0
31513: ST_TO_ADDR
// sFlag := false ;
31514: LD_ADDR_EXP 104
31518: PUSH
31519: LD_INT 0
31521: ST_TO_ADDR
// sKamikadze := false ;
31522: LD_ADDR_EXP 112
31526: PUSH
31527: LD_INT 0
31529: ST_TO_ADDR
// sTroll := false ;
31530: LD_ADDR_EXP 113
31534: PUSH
31535: LD_INT 0
31537: ST_TO_ADDR
// sSlow := false ;
31538: LD_ADDR_EXP 114
31542: PUSH
31543: LD_INT 0
31545: ST_TO_ADDR
// sLack := false ;
31546: LD_ADDR_EXP 115
31550: PUSH
31551: LD_INT 0
31553: ST_TO_ADDR
// sTank := false ;
31554: LD_ADDR_EXP 117
31558: PUSH
31559: LD_INT 0
31561: ST_TO_ADDR
// sRemote := false ;
31562: LD_ADDR_EXP 118
31566: PUSH
31567: LD_INT 0
31569: ST_TO_ADDR
// sPowell := false ;
31570: LD_ADDR_EXP 119
31574: PUSH
31575: LD_INT 0
31577: ST_TO_ADDR
// sTeleport := false ;
31578: LD_ADDR_EXP 122
31582: PUSH
31583: LD_INT 0
31585: ST_TO_ADDR
// sOilTower := false ;
31586: LD_ADDR_EXP 124
31590: PUSH
31591: LD_INT 0
31593: ST_TO_ADDR
// sShovel := false ;
31594: LD_ADDR_EXP 125
31598: PUSH
31599: LD_INT 0
31601: ST_TO_ADDR
// sSheik := false ;
31602: LD_ADDR_EXP 126
31606: PUSH
31607: LD_INT 0
31609: ST_TO_ADDR
// sEarthquake := false ;
31610: LD_ADDR_EXP 128
31614: PUSH
31615: LD_INT 0
31617: ST_TO_ADDR
// sAI := false ;
31618: LD_ADDR_EXP 129
31622: PUSH
31623: LD_INT 0
31625: ST_TO_ADDR
// sCargo := false ;
31626: LD_ADDR_EXP 132
31630: PUSH
31631: LD_INT 0
31633: ST_TO_ADDR
// sDLaser := false ;
31634: LD_ADDR_EXP 133
31638: PUSH
31639: LD_INT 0
31641: ST_TO_ADDR
// sExchange := false ;
31642: LD_ADDR_EXP 134
31646: PUSH
31647: LD_INT 0
31649: ST_TO_ADDR
// sFac := false ;
31650: LD_ADDR_EXP 135
31654: PUSH
31655: LD_INT 0
31657: ST_TO_ADDR
// sPower := false ;
31658: LD_ADDR_EXP 136
31662: PUSH
31663: LD_INT 0
31665: ST_TO_ADDR
// sRandom := false ;
31666: LD_ADDR_EXP 137
31670: PUSH
31671: LD_INT 0
31673: ST_TO_ADDR
// sShield := false ;
31674: LD_ADDR_EXP 138
31678: PUSH
31679: LD_INT 0
31681: ST_TO_ADDR
// sTime := false ;
31682: LD_ADDR_EXP 139
31686: PUSH
31687: LD_INT 0
31689: ST_TO_ADDR
// sTools := false ;
31690: LD_ADDR_EXP 140
31694: PUSH
31695: LD_INT 0
31697: ST_TO_ADDR
// sSold := false ;
31698: LD_ADDR_EXP 105
31702: PUSH
31703: LD_INT 0
31705: ST_TO_ADDR
// sDiff := false ;
31706: LD_ADDR_EXP 106
31710: PUSH
31711: LD_INT 0
31713: ST_TO_ADDR
// sFog := false ;
31714: LD_ADDR_EXP 109
31718: PUSH
31719: LD_INT 0
31721: ST_TO_ADDR
// sReset := false ;
31722: LD_ADDR_EXP 110
31726: PUSH
31727: LD_INT 0
31729: ST_TO_ADDR
// sSun := false ;
31730: LD_ADDR_EXP 111
31734: PUSH
31735: LD_INT 0
31737: ST_TO_ADDR
// sTiger := false ;
31738: LD_ADDR_EXP 107
31742: PUSH
31743: LD_INT 0
31745: ST_TO_ADDR
// sBomb := false ;
31746: LD_ADDR_EXP 108
31750: PUSH
31751: LD_INT 0
31753: ST_TO_ADDR
// sWound := false ;
31754: LD_ADDR_EXP 116
31758: PUSH
31759: LD_INT 0
31761: ST_TO_ADDR
// sBetray := false ;
31762: LD_ADDR_EXP 120
31766: PUSH
31767: LD_INT 0
31769: ST_TO_ADDR
// sContamin := false ;
31770: LD_ADDR_EXP 121
31774: PUSH
31775: LD_INT 0
31777: ST_TO_ADDR
// sOil := false ;
31778: LD_ADDR_EXP 123
31782: PUSH
31783: LD_INT 0
31785: ST_TO_ADDR
// sStu := false ;
31786: LD_ADDR_EXP 127
31790: PUSH
31791: LD_INT 0
31793: ST_TO_ADDR
// sBazooka := false ;
31794: LD_ADDR_EXP 130
31798: PUSH
31799: LD_INT 0
31801: ST_TO_ADDR
// sMortar := false ;
31802: LD_ADDR_EXP 131
31806: PUSH
31807: LD_INT 0
31809: ST_TO_ADDR
// sRanger := false ;
31810: LD_ADDR_EXP 141
31814: PUSH
31815: LD_INT 0
31817: ST_TO_ADDR
// sComputer := false ;
31818: LD_ADDR_EXP 142
31822: PUSH
31823: LD_INT 0
31825: ST_TO_ADDR
// s30 := false ;
31826: LD_ADDR_EXP 143
31830: PUSH
31831: LD_INT 0
31833: ST_TO_ADDR
// s60 := false ;
31834: LD_ADDR_EXP 144
31838: PUSH
31839: LD_INT 0
31841: ST_TO_ADDR
// end ;
31842: LD_VAR 0 1
31846: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
31847: LD_INT 0
31849: PPUSH
31850: PPUSH
31851: PPUSH
31852: PPUSH
31853: PPUSH
31854: PPUSH
31855: PPUSH
// result := [ ] ;
31856: LD_ADDR_VAR 0 2
31860: PUSH
31861: EMPTY
31862: ST_TO_ADDR
// if campaign_id = 1 then
31863: LD_OWVAR 69
31867: PUSH
31868: LD_INT 1
31870: EQUAL
31871: IFFALSE 35037
// begin case mission_number of 1 :
31873: LD_OWVAR 70
31877: PUSH
31878: LD_INT 1
31880: DOUBLE
31881: EQUAL
31882: IFTRUE 31886
31884: GO 31962
31886: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
31887: LD_ADDR_VAR 0 2
31891: PUSH
31892: LD_INT 2
31894: PUSH
31895: LD_INT 4
31897: PUSH
31898: LD_INT 11
31900: PUSH
31901: LD_INT 12
31903: PUSH
31904: LD_INT 15
31906: PUSH
31907: LD_INT 16
31909: PUSH
31910: LD_INT 22
31912: PUSH
31913: LD_INT 23
31915: PUSH
31916: LD_INT 26
31918: PUSH
31919: EMPTY
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: PUSH
31930: LD_INT 101
31932: PUSH
31933: LD_INT 102
31935: PUSH
31936: LD_INT 106
31938: PUSH
31939: LD_INT 116
31941: PUSH
31942: LD_INT 117
31944: PUSH
31945: LD_INT 118
31947: PUSH
31948: EMPTY
31949: LIST
31950: LIST
31951: LIST
31952: LIST
31953: LIST
31954: LIST
31955: PUSH
31956: EMPTY
31957: LIST
31958: LIST
31959: ST_TO_ADDR
31960: GO 35035
31962: LD_INT 2
31964: DOUBLE
31965: EQUAL
31966: IFTRUE 31970
31968: GO 32054
31970: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
31971: LD_ADDR_VAR 0 2
31975: PUSH
31976: LD_INT 2
31978: PUSH
31979: LD_INT 4
31981: PUSH
31982: LD_INT 11
31984: PUSH
31985: LD_INT 12
31987: PUSH
31988: LD_INT 15
31990: PUSH
31991: LD_INT 16
31993: PUSH
31994: LD_INT 22
31996: PUSH
31997: LD_INT 23
31999: PUSH
32000: LD_INT 26
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 101
32016: PUSH
32017: LD_INT 102
32019: PUSH
32020: LD_INT 105
32022: PUSH
32023: LD_INT 106
32025: PUSH
32026: LD_INT 108
32028: PUSH
32029: LD_INT 116
32031: PUSH
32032: LD_INT 117
32034: PUSH
32035: LD_INT 118
32037: PUSH
32038: EMPTY
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: PUSH
32048: EMPTY
32049: LIST
32050: LIST
32051: ST_TO_ADDR
32052: GO 35035
32054: LD_INT 3
32056: DOUBLE
32057: EQUAL
32058: IFTRUE 32062
32060: GO 32150
32062: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
32063: LD_ADDR_VAR 0 2
32067: PUSH
32068: LD_INT 2
32070: PUSH
32071: LD_INT 4
32073: PUSH
32074: LD_INT 5
32076: PUSH
32077: LD_INT 11
32079: PUSH
32080: LD_INT 12
32082: PUSH
32083: LD_INT 15
32085: PUSH
32086: LD_INT 16
32088: PUSH
32089: LD_INT 22
32091: PUSH
32092: LD_INT 26
32094: PUSH
32095: LD_INT 36
32097: PUSH
32098: EMPTY
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: PUSH
32110: LD_INT 101
32112: PUSH
32113: LD_INT 102
32115: PUSH
32116: LD_INT 105
32118: PUSH
32119: LD_INT 106
32121: PUSH
32122: LD_INT 108
32124: PUSH
32125: LD_INT 116
32127: PUSH
32128: LD_INT 117
32130: PUSH
32131: LD_INT 118
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: LIST
32138: LIST
32139: LIST
32140: LIST
32141: LIST
32142: LIST
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: ST_TO_ADDR
32148: GO 35035
32150: LD_INT 4
32152: DOUBLE
32153: EQUAL
32154: IFTRUE 32158
32156: GO 32254
32158: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
32159: LD_ADDR_VAR 0 2
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: LD_INT 4
32169: PUSH
32170: LD_INT 5
32172: PUSH
32173: LD_INT 8
32175: PUSH
32176: LD_INT 11
32178: PUSH
32179: LD_INT 12
32181: PUSH
32182: LD_INT 15
32184: PUSH
32185: LD_INT 16
32187: PUSH
32188: LD_INT 22
32190: PUSH
32191: LD_INT 23
32193: PUSH
32194: LD_INT 26
32196: PUSH
32197: LD_INT 36
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: PUSH
32214: LD_INT 101
32216: PUSH
32217: LD_INT 102
32219: PUSH
32220: LD_INT 105
32222: PUSH
32223: LD_INT 106
32225: PUSH
32226: LD_INT 108
32228: PUSH
32229: LD_INT 116
32231: PUSH
32232: LD_INT 117
32234: PUSH
32235: LD_INT 118
32237: PUSH
32238: EMPTY
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: PUSH
32248: EMPTY
32249: LIST
32250: LIST
32251: ST_TO_ADDR
32252: GO 35035
32254: LD_INT 5
32256: DOUBLE
32257: EQUAL
32258: IFTRUE 32262
32260: GO 32374
32262: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
32263: LD_ADDR_VAR 0 2
32267: PUSH
32268: LD_INT 2
32270: PUSH
32271: LD_INT 4
32273: PUSH
32274: LD_INT 5
32276: PUSH
32277: LD_INT 6
32279: PUSH
32280: LD_INT 8
32282: PUSH
32283: LD_INT 11
32285: PUSH
32286: LD_INT 12
32288: PUSH
32289: LD_INT 15
32291: PUSH
32292: LD_INT 16
32294: PUSH
32295: LD_INT 22
32297: PUSH
32298: LD_INT 23
32300: PUSH
32301: LD_INT 25
32303: PUSH
32304: LD_INT 26
32306: PUSH
32307: LD_INT 36
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: PUSH
32326: LD_INT 101
32328: PUSH
32329: LD_INT 102
32331: PUSH
32332: LD_INT 105
32334: PUSH
32335: LD_INT 106
32337: PUSH
32338: LD_INT 108
32340: PUSH
32341: LD_INT 109
32343: PUSH
32344: LD_INT 112
32346: PUSH
32347: LD_INT 116
32349: PUSH
32350: LD_INT 117
32352: PUSH
32353: LD_INT 118
32355: PUSH
32356: EMPTY
32357: LIST
32358: LIST
32359: LIST
32360: LIST
32361: LIST
32362: LIST
32363: LIST
32364: LIST
32365: LIST
32366: LIST
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: ST_TO_ADDR
32372: GO 35035
32374: LD_INT 6
32376: DOUBLE
32377: EQUAL
32378: IFTRUE 32382
32380: GO 32514
32382: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32383: LD_ADDR_VAR 0 2
32387: PUSH
32388: LD_INT 2
32390: PUSH
32391: LD_INT 4
32393: PUSH
32394: LD_INT 5
32396: PUSH
32397: LD_INT 6
32399: PUSH
32400: LD_INT 8
32402: PUSH
32403: LD_INT 11
32405: PUSH
32406: LD_INT 12
32408: PUSH
32409: LD_INT 15
32411: PUSH
32412: LD_INT 16
32414: PUSH
32415: LD_INT 20
32417: PUSH
32418: LD_INT 21
32420: PUSH
32421: LD_INT 22
32423: PUSH
32424: LD_INT 23
32426: PUSH
32427: LD_INT 25
32429: PUSH
32430: LD_INT 26
32432: PUSH
32433: LD_INT 30
32435: PUSH
32436: LD_INT 31
32438: PUSH
32439: LD_INT 32
32441: PUSH
32442: LD_INT 36
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: PUSH
32466: LD_INT 101
32468: PUSH
32469: LD_INT 102
32471: PUSH
32472: LD_INT 105
32474: PUSH
32475: LD_INT 106
32477: PUSH
32478: LD_INT 108
32480: PUSH
32481: LD_INT 109
32483: PUSH
32484: LD_INT 112
32486: PUSH
32487: LD_INT 116
32489: PUSH
32490: LD_INT 117
32492: PUSH
32493: LD_INT 118
32495: PUSH
32496: EMPTY
32497: LIST
32498: LIST
32499: LIST
32500: LIST
32501: LIST
32502: LIST
32503: LIST
32504: LIST
32505: LIST
32506: LIST
32507: PUSH
32508: EMPTY
32509: LIST
32510: LIST
32511: ST_TO_ADDR
32512: GO 35035
32514: LD_INT 7
32516: DOUBLE
32517: EQUAL
32518: IFTRUE 32522
32520: GO 32634
32522: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32523: LD_ADDR_VAR 0 2
32527: PUSH
32528: LD_INT 2
32530: PUSH
32531: LD_INT 4
32533: PUSH
32534: LD_INT 5
32536: PUSH
32537: LD_INT 7
32539: PUSH
32540: LD_INT 11
32542: PUSH
32543: LD_INT 12
32545: PUSH
32546: LD_INT 15
32548: PUSH
32549: LD_INT 16
32551: PUSH
32552: LD_INT 20
32554: PUSH
32555: LD_INT 21
32557: PUSH
32558: LD_INT 22
32560: PUSH
32561: LD_INT 23
32563: PUSH
32564: LD_INT 25
32566: PUSH
32567: LD_INT 26
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: LIST
32574: LIST
32575: LIST
32576: LIST
32577: LIST
32578: LIST
32579: LIST
32580: LIST
32581: LIST
32582: LIST
32583: LIST
32584: LIST
32585: PUSH
32586: LD_INT 101
32588: PUSH
32589: LD_INT 102
32591: PUSH
32592: LD_INT 103
32594: PUSH
32595: LD_INT 105
32597: PUSH
32598: LD_INT 106
32600: PUSH
32601: LD_INT 108
32603: PUSH
32604: LD_INT 112
32606: PUSH
32607: LD_INT 116
32609: PUSH
32610: LD_INT 117
32612: PUSH
32613: LD_INT 118
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: ST_TO_ADDR
32632: GO 35035
32634: LD_INT 8
32636: DOUBLE
32637: EQUAL
32638: IFTRUE 32642
32640: GO 32782
32642: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32643: LD_ADDR_VAR 0 2
32647: PUSH
32648: LD_INT 2
32650: PUSH
32651: LD_INT 4
32653: PUSH
32654: LD_INT 5
32656: PUSH
32657: LD_INT 6
32659: PUSH
32660: LD_INT 7
32662: PUSH
32663: LD_INT 8
32665: PUSH
32666: LD_INT 11
32668: PUSH
32669: LD_INT 12
32671: PUSH
32672: LD_INT 15
32674: PUSH
32675: LD_INT 16
32677: PUSH
32678: LD_INT 20
32680: PUSH
32681: LD_INT 21
32683: PUSH
32684: LD_INT 22
32686: PUSH
32687: LD_INT 23
32689: PUSH
32690: LD_INT 25
32692: PUSH
32693: LD_INT 26
32695: PUSH
32696: LD_INT 30
32698: PUSH
32699: LD_INT 31
32701: PUSH
32702: LD_INT 32
32704: PUSH
32705: LD_INT 36
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: LIST
32722: LIST
32723: LIST
32724: LIST
32725: LIST
32726: LIST
32727: LIST
32728: LIST
32729: PUSH
32730: LD_INT 101
32732: PUSH
32733: LD_INT 102
32735: PUSH
32736: LD_INT 103
32738: PUSH
32739: LD_INT 105
32741: PUSH
32742: LD_INT 106
32744: PUSH
32745: LD_INT 108
32747: PUSH
32748: LD_INT 109
32750: PUSH
32751: LD_INT 112
32753: PUSH
32754: LD_INT 116
32756: PUSH
32757: LD_INT 117
32759: PUSH
32760: LD_INT 118
32762: PUSH
32763: EMPTY
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: LIST
32772: LIST
32773: LIST
32774: LIST
32775: PUSH
32776: EMPTY
32777: LIST
32778: LIST
32779: ST_TO_ADDR
32780: GO 35035
32782: LD_INT 9
32784: DOUBLE
32785: EQUAL
32786: IFTRUE 32790
32788: GO 32938
32790: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32791: LD_ADDR_VAR 0 2
32795: PUSH
32796: LD_INT 2
32798: PUSH
32799: LD_INT 4
32801: PUSH
32802: LD_INT 5
32804: PUSH
32805: LD_INT 6
32807: PUSH
32808: LD_INT 7
32810: PUSH
32811: LD_INT 8
32813: PUSH
32814: LD_INT 11
32816: PUSH
32817: LD_INT 12
32819: PUSH
32820: LD_INT 15
32822: PUSH
32823: LD_INT 16
32825: PUSH
32826: LD_INT 20
32828: PUSH
32829: LD_INT 21
32831: PUSH
32832: LD_INT 22
32834: PUSH
32835: LD_INT 23
32837: PUSH
32838: LD_INT 25
32840: PUSH
32841: LD_INT 26
32843: PUSH
32844: LD_INT 28
32846: PUSH
32847: LD_INT 30
32849: PUSH
32850: LD_INT 31
32852: PUSH
32853: LD_INT 32
32855: PUSH
32856: LD_INT 36
32858: PUSH
32859: EMPTY
32860: LIST
32861: LIST
32862: LIST
32863: LIST
32864: LIST
32865: LIST
32866: LIST
32867: LIST
32868: LIST
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: PUSH
32882: LD_INT 101
32884: PUSH
32885: LD_INT 102
32887: PUSH
32888: LD_INT 103
32890: PUSH
32891: LD_INT 105
32893: PUSH
32894: LD_INT 106
32896: PUSH
32897: LD_INT 108
32899: PUSH
32900: LD_INT 109
32902: PUSH
32903: LD_INT 112
32905: PUSH
32906: LD_INT 114
32908: PUSH
32909: LD_INT 116
32911: PUSH
32912: LD_INT 117
32914: PUSH
32915: LD_INT 118
32917: PUSH
32918: EMPTY
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: PUSH
32932: EMPTY
32933: LIST
32934: LIST
32935: ST_TO_ADDR
32936: GO 35035
32938: LD_INT 10
32940: DOUBLE
32941: EQUAL
32942: IFTRUE 32946
32944: GO 33142
32946: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
32947: LD_ADDR_VAR 0 2
32951: PUSH
32952: LD_INT 2
32954: PUSH
32955: LD_INT 4
32957: PUSH
32958: LD_INT 5
32960: PUSH
32961: LD_INT 6
32963: PUSH
32964: LD_INT 7
32966: PUSH
32967: LD_INT 8
32969: PUSH
32970: LD_INT 9
32972: PUSH
32973: LD_INT 10
32975: PUSH
32976: LD_INT 11
32978: PUSH
32979: LD_INT 12
32981: PUSH
32982: LD_INT 13
32984: PUSH
32985: LD_INT 14
32987: PUSH
32988: LD_INT 15
32990: PUSH
32991: LD_INT 16
32993: PUSH
32994: LD_INT 17
32996: PUSH
32997: LD_INT 18
32999: PUSH
33000: LD_INT 19
33002: PUSH
33003: LD_INT 20
33005: PUSH
33006: LD_INT 21
33008: PUSH
33009: LD_INT 22
33011: PUSH
33012: LD_INT 23
33014: PUSH
33015: LD_INT 24
33017: PUSH
33018: LD_INT 25
33020: PUSH
33021: LD_INT 26
33023: PUSH
33024: LD_INT 28
33026: PUSH
33027: LD_INT 30
33029: PUSH
33030: LD_INT 31
33032: PUSH
33033: LD_INT 32
33035: PUSH
33036: LD_INT 36
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: PUSH
33070: LD_INT 101
33072: PUSH
33073: LD_INT 102
33075: PUSH
33076: LD_INT 103
33078: PUSH
33079: LD_INT 104
33081: PUSH
33082: LD_INT 105
33084: PUSH
33085: LD_INT 106
33087: PUSH
33088: LD_INT 107
33090: PUSH
33091: LD_INT 108
33093: PUSH
33094: LD_INT 109
33096: PUSH
33097: LD_INT 110
33099: PUSH
33100: LD_INT 111
33102: PUSH
33103: LD_INT 112
33105: PUSH
33106: LD_INT 114
33108: PUSH
33109: LD_INT 116
33111: PUSH
33112: LD_INT 117
33114: PUSH
33115: LD_INT 118
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: ST_TO_ADDR
33140: GO 35035
33142: LD_INT 11
33144: DOUBLE
33145: EQUAL
33146: IFTRUE 33150
33148: GO 33354
33150: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
33151: LD_ADDR_VAR 0 2
33155: PUSH
33156: LD_INT 2
33158: PUSH
33159: LD_INT 3
33161: PUSH
33162: LD_INT 4
33164: PUSH
33165: LD_INT 5
33167: PUSH
33168: LD_INT 6
33170: PUSH
33171: LD_INT 7
33173: PUSH
33174: LD_INT 8
33176: PUSH
33177: LD_INT 9
33179: PUSH
33180: LD_INT 10
33182: PUSH
33183: LD_INT 11
33185: PUSH
33186: LD_INT 12
33188: PUSH
33189: LD_INT 13
33191: PUSH
33192: LD_INT 14
33194: PUSH
33195: LD_INT 15
33197: PUSH
33198: LD_INT 16
33200: PUSH
33201: LD_INT 17
33203: PUSH
33204: LD_INT 18
33206: PUSH
33207: LD_INT 19
33209: PUSH
33210: LD_INT 20
33212: PUSH
33213: LD_INT 21
33215: PUSH
33216: LD_INT 22
33218: PUSH
33219: LD_INT 23
33221: PUSH
33222: LD_INT 24
33224: PUSH
33225: LD_INT 25
33227: PUSH
33228: LD_INT 26
33230: PUSH
33231: LD_INT 28
33233: PUSH
33234: LD_INT 30
33236: PUSH
33237: LD_INT 31
33239: PUSH
33240: LD_INT 32
33242: PUSH
33243: LD_INT 34
33245: PUSH
33246: LD_INT 36
33248: PUSH
33249: EMPTY
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: PUSH
33282: LD_INT 101
33284: PUSH
33285: LD_INT 102
33287: PUSH
33288: LD_INT 103
33290: PUSH
33291: LD_INT 104
33293: PUSH
33294: LD_INT 105
33296: PUSH
33297: LD_INT 106
33299: PUSH
33300: LD_INT 107
33302: PUSH
33303: LD_INT 108
33305: PUSH
33306: LD_INT 109
33308: PUSH
33309: LD_INT 110
33311: PUSH
33312: LD_INT 111
33314: PUSH
33315: LD_INT 112
33317: PUSH
33318: LD_INT 114
33320: PUSH
33321: LD_INT 116
33323: PUSH
33324: LD_INT 117
33326: PUSH
33327: LD_INT 118
33329: PUSH
33330: EMPTY
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: PUSH
33348: EMPTY
33349: LIST
33350: LIST
33351: ST_TO_ADDR
33352: GO 35035
33354: LD_INT 12
33356: DOUBLE
33357: EQUAL
33358: IFTRUE 33362
33360: GO 33582
33362: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33363: LD_ADDR_VAR 0 2
33367: PUSH
33368: LD_INT 1
33370: PUSH
33371: LD_INT 2
33373: PUSH
33374: LD_INT 3
33376: PUSH
33377: LD_INT 4
33379: PUSH
33380: LD_INT 5
33382: PUSH
33383: LD_INT 6
33385: PUSH
33386: LD_INT 7
33388: PUSH
33389: LD_INT 8
33391: PUSH
33392: LD_INT 9
33394: PUSH
33395: LD_INT 10
33397: PUSH
33398: LD_INT 11
33400: PUSH
33401: LD_INT 12
33403: PUSH
33404: LD_INT 13
33406: PUSH
33407: LD_INT 14
33409: PUSH
33410: LD_INT 15
33412: PUSH
33413: LD_INT 16
33415: PUSH
33416: LD_INT 17
33418: PUSH
33419: LD_INT 18
33421: PUSH
33422: LD_INT 19
33424: PUSH
33425: LD_INT 20
33427: PUSH
33428: LD_INT 21
33430: PUSH
33431: LD_INT 22
33433: PUSH
33434: LD_INT 23
33436: PUSH
33437: LD_INT 24
33439: PUSH
33440: LD_INT 25
33442: PUSH
33443: LD_INT 26
33445: PUSH
33446: LD_INT 27
33448: PUSH
33449: LD_INT 28
33451: PUSH
33452: LD_INT 30
33454: PUSH
33455: LD_INT 31
33457: PUSH
33458: LD_INT 32
33460: PUSH
33461: LD_INT 33
33463: PUSH
33464: LD_INT 34
33466: PUSH
33467: LD_INT 36
33469: PUSH
33470: EMPTY
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: LIST
33491: LIST
33492: LIST
33493: LIST
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: PUSH
33506: LD_INT 101
33508: PUSH
33509: LD_INT 102
33511: PUSH
33512: LD_INT 103
33514: PUSH
33515: LD_INT 104
33517: PUSH
33518: LD_INT 105
33520: PUSH
33521: LD_INT 106
33523: PUSH
33524: LD_INT 107
33526: PUSH
33527: LD_INT 108
33529: PUSH
33530: LD_INT 109
33532: PUSH
33533: LD_INT 110
33535: PUSH
33536: LD_INT 111
33538: PUSH
33539: LD_INT 112
33541: PUSH
33542: LD_INT 113
33544: PUSH
33545: LD_INT 114
33547: PUSH
33548: LD_INT 116
33550: PUSH
33551: LD_INT 117
33553: PUSH
33554: LD_INT 118
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: PUSH
33576: EMPTY
33577: LIST
33578: LIST
33579: ST_TO_ADDR
33580: GO 35035
33582: LD_INT 13
33584: DOUBLE
33585: EQUAL
33586: IFTRUE 33590
33588: GO 33798
33590: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33591: LD_ADDR_VAR 0 2
33595: PUSH
33596: LD_INT 1
33598: PUSH
33599: LD_INT 2
33601: PUSH
33602: LD_INT 3
33604: PUSH
33605: LD_INT 4
33607: PUSH
33608: LD_INT 5
33610: PUSH
33611: LD_INT 8
33613: PUSH
33614: LD_INT 9
33616: PUSH
33617: LD_INT 10
33619: PUSH
33620: LD_INT 11
33622: PUSH
33623: LD_INT 12
33625: PUSH
33626: LD_INT 14
33628: PUSH
33629: LD_INT 15
33631: PUSH
33632: LD_INT 16
33634: PUSH
33635: LD_INT 17
33637: PUSH
33638: LD_INT 18
33640: PUSH
33641: LD_INT 19
33643: PUSH
33644: LD_INT 20
33646: PUSH
33647: LD_INT 21
33649: PUSH
33650: LD_INT 22
33652: PUSH
33653: LD_INT 23
33655: PUSH
33656: LD_INT 24
33658: PUSH
33659: LD_INT 25
33661: PUSH
33662: LD_INT 26
33664: PUSH
33665: LD_INT 27
33667: PUSH
33668: LD_INT 28
33670: PUSH
33671: LD_INT 30
33673: PUSH
33674: LD_INT 31
33676: PUSH
33677: LD_INT 32
33679: PUSH
33680: LD_INT 33
33682: PUSH
33683: LD_INT 34
33685: PUSH
33686: LD_INT 36
33688: PUSH
33689: EMPTY
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: LIST
33711: LIST
33712: LIST
33713: LIST
33714: LIST
33715: LIST
33716: LIST
33717: LIST
33718: LIST
33719: LIST
33720: LIST
33721: PUSH
33722: LD_INT 101
33724: PUSH
33725: LD_INT 102
33727: PUSH
33728: LD_INT 103
33730: PUSH
33731: LD_INT 104
33733: PUSH
33734: LD_INT 105
33736: PUSH
33737: LD_INT 106
33739: PUSH
33740: LD_INT 107
33742: PUSH
33743: LD_INT 108
33745: PUSH
33746: LD_INT 109
33748: PUSH
33749: LD_INT 110
33751: PUSH
33752: LD_INT 111
33754: PUSH
33755: LD_INT 112
33757: PUSH
33758: LD_INT 113
33760: PUSH
33761: LD_INT 114
33763: PUSH
33764: LD_INT 116
33766: PUSH
33767: LD_INT 117
33769: PUSH
33770: LD_INT 118
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: PUSH
33792: EMPTY
33793: LIST
33794: LIST
33795: ST_TO_ADDR
33796: GO 35035
33798: LD_INT 14
33800: DOUBLE
33801: EQUAL
33802: IFTRUE 33806
33804: GO 34030
33806: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
33807: LD_ADDR_VAR 0 2
33811: PUSH
33812: LD_INT 1
33814: PUSH
33815: LD_INT 2
33817: PUSH
33818: LD_INT 3
33820: PUSH
33821: LD_INT 4
33823: PUSH
33824: LD_INT 5
33826: PUSH
33827: LD_INT 6
33829: PUSH
33830: LD_INT 7
33832: PUSH
33833: LD_INT 8
33835: PUSH
33836: LD_INT 9
33838: PUSH
33839: LD_INT 10
33841: PUSH
33842: LD_INT 11
33844: PUSH
33845: LD_INT 12
33847: PUSH
33848: LD_INT 13
33850: PUSH
33851: LD_INT 14
33853: PUSH
33854: LD_INT 15
33856: PUSH
33857: LD_INT 16
33859: PUSH
33860: LD_INT 17
33862: PUSH
33863: LD_INT 18
33865: PUSH
33866: LD_INT 19
33868: PUSH
33869: LD_INT 20
33871: PUSH
33872: LD_INT 21
33874: PUSH
33875: LD_INT 22
33877: PUSH
33878: LD_INT 23
33880: PUSH
33881: LD_INT 24
33883: PUSH
33884: LD_INT 25
33886: PUSH
33887: LD_INT 26
33889: PUSH
33890: LD_INT 27
33892: PUSH
33893: LD_INT 28
33895: PUSH
33896: LD_INT 29
33898: PUSH
33899: LD_INT 30
33901: PUSH
33902: LD_INT 31
33904: PUSH
33905: LD_INT 32
33907: PUSH
33908: LD_INT 33
33910: PUSH
33911: LD_INT 34
33913: PUSH
33914: LD_INT 36
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: LIST
33934: LIST
33935: LIST
33936: LIST
33937: LIST
33938: LIST
33939: LIST
33940: LIST
33941: LIST
33942: LIST
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: PUSH
33954: LD_INT 101
33956: PUSH
33957: LD_INT 102
33959: PUSH
33960: LD_INT 103
33962: PUSH
33963: LD_INT 104
33965: PUSH
33966: LD_INT 105
33968: PUSH
33969: LD_INT 106
33971: PUSH
33972: LD_INT 107
33974: PUSH
33975: LD_INT 108
33977: PUSH
33978: LD_INT 109
33980: PUSH
33981: LD_INT 110
33983: PUSH
33984: LD_INT 111
33986: PUSH
33987: LD_INT 112
33989: PUSH
33990: LD_INT 113
33992: PUSH
33993: LD_INT 114
33995: PUSH
33996: LD_INT 116
33998: PUSH
33999: LD_INT 117
34001: PUSH
34002: LD_INT 118
34004: PUSH
34005: EMPTY
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: PUSH
34024: EMPTY
34025: LIST
34026: LIST
34027: ST_TO_ADDR
34028: GO 35035
34030: LD_INT 15
34032: DOUBLE
34033: EQUAL
34034: IFTRUE 34038
34036: GO 34262
34038: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
34039: LD_ADDR_VAR 0 2
34043: PUSH
34044: LD_INT 1
34046: PUSH
34047: LD_INT 2
34049: PUSH
34050: LD_INT 3
34052: PUSH
34053: LD_INT 4
34055: PUSH
34056: LD_INT 5
34058: PUSH
34059: LD_INT 6
34061: PUSH
34062: LD_INT 7
34064: PUSH
34065: LD_INT 8
34067: PUSH
34068: LD_INT 9
34070: PUSH
34071: LD_INT 10
34073: PUSH
34074: LD_INT 11
34076: PUSH
34077: LD_INT 12
34079: PUSH
34080: LD_INT 13
34082: PUSH
34083: LD_INT 14
34085: PUSH
34086: LD_INT 15
34088: PUSH
34089: LD_INT 16
34091: PUSH
34092: LD_INT 17
34094: PUSH
34095: LD_INT 18
34097: PUSH
34098: LD_INT 19
34100: PUSH
34101: LD_INT 20
34103: PUSH
34104: LD_INT 21
34106: PUSH
34107: LD_INT 22
34109: PUSH
34110: LD_INT 23
34112: PUSH
34113: LD_INT 24
34115: PUSH
34116: LD_INT 25
34118: PUSH
34119: LD_INT 26
34121: PUSH
34122: LD_INT 27
34124: PUSH
34125: LD_INT 28
34127: PUSH
34128: LD_INT 29
34130: PUSH
34131: LD_INT 30
34133: PUSH
34134: LD_INT 31
34136: PUSH
34137: LD_INT 32
34139: PUSH
34140: LD_INT 33
34142: PUSH
34143: LD_INT 34
34145: PUSH
34146: LD_INT 36
34148: PUSH
34149: EMPTY
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: LIST
34166: LIST
34167: LIST
34168: LIST
34169: LIST
34170: LIST
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: PUSH
34186: LD_INT 101
34188: PUSH
34189: LD_INT 102
34191: PUSH
34192: LD_INT 103
34194: PUSH
34195: LD_INT 104
34197: PUSH
34198: LD_INT 105
34200: PUSH
34201: LD_INT 106
34203: PUSH
34204: LD_INT 107
34206: PUSH
34207: LD_INT 108
34209: PUSH
34210: LD_INT 109
34212: PUSH
34213: LD_INT 110
34215: PUSH
34216: LD_INT 111
34218: PUSH
34219: LD_INT 112
34221: PUSH
34222: LD_INT 113
34224: PUSH
34225: LD_INT 114
34227: PUSH
34228: LD_INT 116
34230: PUSH
34231: LD_INT 117
34233: PUSH
34234: LD_INT 118
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: ST_TO_ADDR
34260: GO 35035
34262: LD_INT 16
34264: DOUBLE
34265: EQUAL
34266: IFTRUE 34270
34268: GO 34406
34270: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
34271: LD_ADDR_VAR 0 2
34275: PUSH
34276: LD_INT 2
34278: PUSH
34279: LD_INT 4
34281: PUSH
34282: LD_INT 5
34284: PUSH
34285: LD_INT 7
34287: PUSH
34288: LD_INT 11
34290: PUSH
34291: LD_INT 12
34293: PUSH
34294: LD_INT 15
34296: PUSH
34297: LD_INT 16
34299: PUSH
34300: LD_INT 20
34302: PUSH
34303: LD_INT 21
34305: PUSH
34306: LD_INT 22
34308: PUSH
34309: LD_INT 23
34311: PUSH
34312: LD_INT 25
34314: PUSH
34315: LD_INT 26
34317: PUSH
34318: LD_INT 30
34320: PUSH
34321: LD_INT 31
34323: PUSH
34324: LD_INT 32
34326: PUSH
34327: LD_INT 33
34329: PUSH
34330: LD_INT 34
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: LIST
34337: LIST
34338: LIST
34339: LIST
34340: LIST
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: PUSH
34354: LD_INT 101
34356: PUSH
34357: LD_INT 102
34359: PUSH
34360: LD_INT 103
34362: PUSH
34363: LD_INT 106
34365: PUSH
34366: LD_INT 108
34368: PUSH
34369: LD_INT 112
34371: PUSH
34372: LD_INT 113
34374: PUSH
34375: LD_INT 114
34377: PUSH
34378: LD_INT 116
34380: PUSH
34381: LD_INT 117
34383: PUSH
34384: LD_INT 118
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: ST_TO_ADDR
34404: GO 35035
34406: LD_INT 17
34408: DOUBLE
34409: EQUAL
34410: IFTRUE 34414
34412: GO 34638
34414: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34415: LD_ADDR_VAR 0 2
34419: PUSH
34420: LD_INT 1
34422: PUSH
34423: LD_INT 2
34425: PUSH
34426: LD_INT 3
34428: PUSH
34429: LD_INT 4
34431: PUSH
34432: LD_INT 5
34434: PUSH
34435: LD_INT 6
34437: PUSH
34438: LD_INT 7
34440: PUSH
34441: LD_INT 8
34443: PUSH
34444: LD_INT 9
34446: PUSH
34447: LD_INT 10
34449: PUSH
34450: LD_INT 11
34452: PUSH
34453: LD_INT 12
34455: PUSH
34456: LD_INT 13
34458: PUSH
34459: LD_INT 14
34461: PUSH
34462: LD_INT 15
34464: PUSH
34465: LD_INT 16
34467: PUSH
34468: LD_INT 17
34470: PUSH
34471: LD_INT 18
34473: PUSH
34474: LD_INT 19
34476: PUSH
34477: LD_INT 20
34479: PUSH
34480: LD_INT 21
34482: PUSH
34483: LD_INT 22
34485: PUSH
34486: LD_INT 23
34488: PUSH
34489: LD_INT 24
34491: PUSH
34492: LD_INT 25
34494: PUSH
34495: LD_INT 26
34497: PUSH
34498: LD_INT 27
34500: PUSH
34501: LD_INT 28
34503: PUSH
34504: LD_INT 29
34506: PUSH
34507: LD_INT 30
34509: PUSH
34510: LD_INT 31
34512: PUSH
34513: LD_INT 32
34515: PUSH
34516: LD_INT 33
34518: PUSH
34519: LD_INT 34
34521: PUSH
34522: LD_INT 36
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: LIST
34534: LIST
34535: LIST
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: PUSH
34562: LD_INT 101
34564: PUSH
34565: LD_INT 102
34567: PUSH
34568: LD_INT 103
34570: PUSH
34571: LD_INT 104
34573: PUSH
34574: LD_INT 105
34576: PUSH
34577: LD_INT 106
34579: PUSH
34580: LD_INT 107
34582: PUSH
34583: LD_INT 108
34585: PUSH
34586: LD_INT 109
34588: PUSH
34589: LD_INT 110
34591: PUSH
34592: LD_INT 111
34594: PUSH
34595: LD_INT 112
34597: PUSH
34598: LD_INT 113
34600: PUSH
34601: LD_INT 114
34603: PUSH
34604: LD_INT 116
34606: PUSH
34607: LD_INT 117
34609: PUSH
34610: LD_INT 118
34612: PUSH
34613: EMPTY
34614: LIST
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: ST_TO_ADDR
34636: GO 35035
34638: LD_INT 18
34640: DOUBLE
34641: EQUAL
34642: IFTRUE 34646
34644: GO 34794
34646: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34647: LD_ADDR_VAR 0 2
34651: PUSH
34652: LD_INT 2
34654: PUSH
34655: LD_INT 4
34657: PUSH
34658: LD_INT 5
34660: PUSH
34661: LD_INT 7
34663: PUSH
34664: LD_INT 11
34666: PUSH
34667: LD_INT 12
34669: PUSH
34670: LD_INT 15
34672: PUSH
34673: LD_INT 16
34675: PUSH
34676: LD_INT 20
34678: PUSH
34679: LD_INT 21
34681: PUSH
34682: LD_INT 22
34684: PUSH
34685: LD_INT 23
34687: PUSH
34688: LD_INT 25
34690: PUSH
34691: LD_INT 26
34693: PUSH
34694: LD_INT 30
34696: PUSH
34697: LD_INT 31
34699: PUSH
34700: LD_INT 32
34702: PUSH
34703: LD_INT 33
34705: PUSH
34706: LD_INT 34
34708: PUSH
34709: LD_INT 35
34711: PUSH
34712: LD_INT 36
34714: PUSH
34715: EMPTY
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: PUSH
34738: LD_INT 101
34740: PUSH
34741: LD_INT 102
34743: PUSH
34744: LD_INT 103
34746: PUSH
34747: LD_INT 106
34749: PUSH
34750: LD_INT 108
34752: PUSH
34753: LD_INT 112
34755: PUSH
34756: LD_INT 113
34758: PUSH
34759: LD_INT 114
34761: PUSH
34762: LD_INT 115
34764: PUSH
34765: LD_INT 116
34767: PUSH
34768: LD_INT 117
34770: PUSH
34771: LD_INT 118
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: ST_TO_ADDR
34792: GO 35035
34794: LD_INT 19
34796: DOUBLE
34797: EQUAL
34798: IFTRUE 34802
34800: GO 35034
34802: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
34803: LD_ADDR_VAR 0 2
34807: PUSH
34808: LD_INT 1
34810: PUSH
34811: LD_INT 2
34813: PUSH
34814: LD_INT 3
34816: PUSH
34817: LD_INT 4
34819: PUSH
34820: LD_INT 5
34822: PUSH
34823: LD_INT 6
34825: PUSH
34826: LD_INT 7
34828: PUSH
34829: LD_INT 8
34831: PUSH
34832: LD_INT 9
34834: PUSH
34835: LD_INT 10
34837: PUSH
34838: LD_INT 11
34840: PUSH
34841: LD_INT 12
34843: PUSH
34844: LD_INT 13
34846: PUSH
34847: LD_INT 14
34849: PUSH
34850: LD_INT 15
34852: PUSH
34853: LD_INT 16
34855: PUSH
34856: LD_INT 17
34858: PUSH
34859: LD_INT 18
34861: PUSH
34862: LD_INT 19
34864: PUSH
34865: LD_INT 20
34867: PUSH
34868: LD_INT 21
34870: PUSH
34871: LD_INT 22
34873: PUSH
34874: LD_INT 23
34876: PUSH
34877: LD_INT 24
34879: PUSH
34880: LD_INT 25
34882: PUSH
34883: LD_INT 26
34885: PUSH
34886: LD_INT 27
34888: PUSH
34889: LD_INT 28
34891: PUSH
34892: LD_INT 29
34894: PUSH
34895: LD_INT 30
34897: PUSH
34898: LD_INT 31
34900: PUSH
34901: LD_INT 32
34903: PUSH
34904: LD_INT 33
34906: PUSH
34907: LD_INT 34
34909: PUSH
34910: LD_INT 35
34912: PUSH
34913: LD_INT 36
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: LIST
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 101
34956: PUSH
34957: LD_INT 102
34959: PUSH
34960: LD_INT 103
34962: PUSH
34963: LD_INT 104
34965: PUSH
34966: LD_INT 105
34968: PUSH
34969: LD_INT 106
34971: PUSH
34972: LD_INT 107
34974: PUSH
34975: LD_INT 108
34977: PUSH
34978: LD_INT 109
34980: PUSH
34981: LD_INT 110
34983: PUSH
34984: LD_INT 111
34986: PUSH
34987: LD_INT 112
34989: PUSH
34990: LD_INT 113
34992: PUSH
34993: LD_INT 114
34995: PUSH
34996: LD_INT 115
34998: PUSH
34999: LD_INT 116
35001: PUSH
35002: LD_INT 117
35004: PUSH
35005: LD_INT 118
35007: PUSH
35008: EMPTY
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: ST_TO_ADDR
35032: GO 35035
35034: POP
// end else
35035: GO 35266
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
35037: LD_ADDR_VAR 0 2
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: LD_INT 2
35047: PUSH
35048: LD_INT 3
35050: PUSH
35051: LD_INT 4
35053: PUSH
35054: LD_INT 5
35056: PUSH
35057: LD_INT 6
35059: PUSH
35060: LD_INT 7
35062: PUSH
35063: LD_INT 8
35065: PUSH
35066: LD_INT 9
35068: PUSH
35069: LD_INT 10
35071: PUSH
35072: LD_INT 11
35074: PUSH
35075: LD_INT 12
35077: PUSH
35078: LD_INT 13
35080: PUSH
35081: LD_INT 14
35083: PUSH
35084: LD_INT 15
35086: PUSH
35087: LD_INT 16
35089: PUSH
35090: LD_INT 17
35092: PUSH
35093: LD_INT 18
35095: PUSH
35096: LD_INT 19
35098: PUSH
35099: LD_INT 20
35101: PUSH
35102: LD_INT 21
35104: PUSH
35105: LD_INT 22
35107: PUSH
35108: LD_INT 23
35110: PUSH
35111: LD_INT 24
35113: PUSH
35114: LD_INT 25
35116: PUSH
35117: LD_INT 26
35119: PUSH
35120: LD_INT 27
35122: PUSH
35123: LD_INT 28
35125: PUSH
35126: LD_INT 29
35128: PUSH
35129: LD_INT 30
35131: PUSH
35132: LD_INT 31
35134: PUSH
35135: LD_INT 32
35137: PUSH
35138: LD_INT 33
35140: PUSH
35141: LD_INT 34
35143: PUSH
35144: LD_INT 35
35146: PUSH
35147: LD_INT 36
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 101
35190: PUSH
35191: LD_INT 102
35193: PUSH
35194: LD_INT 103
35196: PUSH
35197: LD_INT 104
35199: PUSH
35200: LD_INT 105
35202: PUSH
35203: LD_INT 106
35205: PUSH
35206: LD_INT 107
35208: PUSH
35209: LD_INT 108
35211: PUSH
35212: LD_INT 109
35214: PUSH
35215: LD_INT 110
35217: PUSH
35218: LD_INT 111
35220: PUSH
35221: LD_INT 112
35223: PUSH
35224: LD_INT 113
35226: PUSH
35227: LD_INT 114
35229: PUSH
35230: LD_INT 115
35232: PUSH
35233: LD_INT 116
35235: PUSH
35236: LD_INT 117
35238: PUSH
35239: LD_INT 118
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: LIST
35258: LIST
35259: LIST
35260: LIST
35261: PUSH
35262: EMPTY
35263: LIST
35264: LIST
35265: ST_TO_ADDR
// if result then
35266: LD_VAR 0 2
35270: IFFALSE 36056
// begin normal :=  ;
35272: LD_ADDR_VAR 0 5
35276: PUSH
35277: LD_STRING 
35279: ST_TO_ADDR
// hardcore :=  ;
35280: LD_ADDR_VAR 0 6
35284: PUSH
35285: LD_STRING 
35287: ST_TO_ADDR
// active :=  ;
35288: LD_ADDR_VAR 0 7
35292: PUSH
35293: LD_STRING 
35295: ST_TO_ADDR
// for i = 1 to normalCounter do
35296: LD_ADDR_VAR 0 8
35300: PUSH
35301: DOUBLE
35302: LD_INT 1
35304: DEC
35305: ST_TO_ADDR
35306: LD_EXP 89
35310: PUSH
35311: FOR_TO
35312: IFFALSE 35413
// begin tmp := 0 ;
35314: LD_ADDR_VAR 0 3
35318: PUSH
35319: LD_STRING 0
35321: ST_TO_ADDR
// if result [ 1 ] then
35322: LD_VAR 0 2
35326: PUSH
35327: LD_INT 1
35329: ARRAY
35330: IFFALSE 35395
// if result [ 1 ] [ 1 ] = i then
35332: LD_VAR 0 2
35336: PUSH
35337: LD_INT 1
35339: ARRAY
35340: PUSH
35341: LD_INT 1
35343: ARRAY
35344: PUSH
35345: LD_VAR 0 8
35349: EQUAL
35350: IFFALSE 35395
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35352: LD_ADDR_VAR 0 2
35356: PUSH
35357: LD_VAR 0 2
35361: PPUSH
35362: LD_INT 1
35364: PPUSH
35365: LD_VAR 0 2
35369: PUSH
35370: LD_INT 1
35372: ARRAY
35373: PPUSH
35374: LD_INT 1
35376: PPUSH
35377: CALL_OW 3
35381: PPUSH
35382: CALL_OW 1
35386: ST_TO_ADDR
// tmp := 1 ;
35387: LD_ADDR_VAR 0 3
35391: PUSH
35392: LD_STRING 1
35394: ST_TO_ADDR
// end ; normal := normal & tmp ;
35395: LD_ADDR_VAR 0 5
35399: PUSH
35400: LD_VAR 0 5
35404: PUSH
35405: LD_VAR 0 3
35409: STR
35410: ST_TO_ADDR
// end ;
35411: GO 35311
35413: POP
35414: POP
// for i = 1 to hardcoreCounter do
35415: LD_ADDR_VAR 0 8
35419: PUSH
35420: DOUBLE
35421: LD_INT 1
35423: DEC
35424: ST_TO_ADDR
35425: LD_EXP 90
35429: PUSH
35430: FOR_TO
35431: IFFALSE 35536
// begin tmp := 0 ;
35433: LD_ADDR_VAR 0 3
35437: PUSH
35438: LD_STRING 0
35440: ST_TO_ADDR
// if result [ 2 ] then
35441: LD_VAR 0 2
35445: PUSH
35446: LD_INT 2
35448: ARRAY
35449: IFFALSE 35518
// if result [ 2 ] [ 1 ] = 100 + i then
35451: LD_VAR 0 2
35455: PUSH
35456: LD_INT 2
35458: ARRAY
35459: PUSH
35460: LD_INT 1
35462: ARRAY
35463: PUSH
35464: LD_INT 100
35466: PUSH
35467: LD_VAR 0 8
35471: PLUS
35472: EQUAL
35473: IFFALSE 35518
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35475: LD_ADDR_VAR 0 2
35479: PUSH
35480: LD_VAR 0 2
35484: PPUSH
35485: LD_INT 2
35487: PPUSH
35488: LD_VAR 0 2
35492: PUSH
35493: LD_INT 2
35495: ARRAY
35496: PPUSH
35497: LD_INT 1
35499: PPUSH
35500: CALL_OW 3
35504: PPUSH
35505: CALL_OW 1
35509: ST_TO_ADDR
// tmp := 1 ;
35510: LD_ADDR_VAR 0 3
35514: PUSH
35515: LD_STRING 1
35517: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35518: LD_ADDR_VAR 0 6
35522: PUSH
35523: LD_VAR 0 6
35527: PUSH
35528: LD_VAR 0 3
35532: STR
35533: ST_TO_ADDR
// end ;
35534: GO 35430
35536: POP
35537: POP
// if isGameLoad then
35538: LD_VAR 0 1
35542: IFFALSE 36017
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35544: LD_ADDR_VAR 0 4
35548: PUSH
35549: LD_EXP 93
35553: PUSH
35554: LD_EXP 92
35558: PUSH
35559: LD_EXP 94
35563: PUSH
35564: LD_EXP 91
35568: PUSH
35569: LD_EXP 95
35573: PUSH
35574: LD_EXP 96
35578: PUSH
35579: LD_EXP 97
35583: PUSH
35584: LD_EXP 98
35588: PUSH
35589: LD_EXP 99
35593: PUSH
35594: LD_EXP 100
35598: PUSH
35599: LD_EXP 101
35603: PUSH
35604: LD_EXP 102
35608: PUSH
35609: LD_EXP 103
35613: PUSH
35614: LD_EXP 104
35618: PUSH
35619: LD_EXP 112
35623: PUSH
35624: LD_EXP 113
35628: PUSH
35629: LD_EXP 114
35633: PUSH
35634: LD_EXP 115
35638: PUSH
35639: LD_EXP 117
35643: PUSH
35644: LD_EXP 118
35648: PUSH
35649: LD_EXP 119
35653: PUSH
35654: LD_EXP 122
35658: PUSH
35659: LD_EXP 124
35663: PUSH
35664: LD_EXP 125
35668: PUSH
35669: LD_EXP 126
35673: PUSH
35674: LD_EXP 128
35678: PUSH
35679: LD_EXP 129
35683: PUSH
35684: LD_EXP 132
35688: PUSH
35689: LD_EXP 133
35693: PUSH
35694: LD_EXP 134
35698: PUSH
35699: LD_EXP 135
35703: PUSH
35704: LD_EXP 136
35708: PUSH
35709: LD_EXP 137
35713: PUSH
35714: LD_EXP 138
35718: PUSH
35719: LD_EXP 139
35723: PUSH
35724: LD_EXP 140
35728: PUSH
35729: LD_EXP 105
35733: PUSH
35734: LD_EXP 106
35738: PUSH
35739: LD_EXP 109
35743: PUSH
35744: LD_EXP 110
35748: PUSH
35749: LD_EXP 111
35753: PUSH
35754: LD_EXP 107
35758: PUSH
35759: LD_EXP 108
35763: PUSH
35764: LD_EXP 116
35768: PUSH
35769: LD_EXP 120
35773: PUSH
35774: LD_EXP 121
35778: PUSH
35779: LD_EXP 123
35783: PUSH
35784: LD_EXP 127
35788: PUSH
35789: LD_EXP 130
35793: PUSH
35794: LD_EXP 131
35798: PUSH
35799: LD_EXP 141
35803: PUSH
35804: LD_EXP 142
35808: PUSH
35809: LD_EXP 143
35813: PUSH
35814: LD_EXP 144
35818: PUSH
35819: EMPTY
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: LIST
35826: LIST
35827: LIST
35828: LIST
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: LIST
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: LIST
35866: LIST
35867: LIST
35868: LIST
35869: LIST
35870: LIST
35871: LIST
35872: LIST
35873: LIST
35874: ST_TO_ADDR
// tmp :=  ;
35875: LD_ADDR_VAR 0 3
35879: PUSH
35880: LD_STRING 
35882: ST_TO_ADDR
// for i = 1 to normalCounter do
35883: LD_ADDR_VAR 0 8
35887: PUSH
35888: DOUBLE
35889: LD_INT 1
35891: DEC
35892: ST_TO_ADDR
35893: LD_EXP 89
35897: PUSH
35898: FOR_TO
35899: IFFALSE 35935
// begin if flags [ i ] then
35901: LD_VAR 0 4
35905: PUSH
35906: LD_VAR 0 8
35910: ARRAY
35911: IFFALSE 35933
// tmp := tmp & i & ; ;
35913: LD_ADDR_VAR 0 3
35917: PUSH
35918: LD_VAR 0 3
35922: PUSH
35923: LD_VAR 0 8
35927: STR
35928: PUSH
35929: LD_STRING ;
35931: STR
35932: ST_TO_ADDR
// end ;
35933: GO 35898
35935: POP
35936: POP
// for i = 1 to hardcoreCounter do
35937: LD_ADDR_VAR 0 8
35941: PUSH
35942: DOUBLE
35943: LD_INT 1
35945: DEC
35946: ST_TO_ADDR
35947: LD_EXP 90
35951: PUSH
35952: FOR_TO
35953: IFFALSE 35999
// begin if flags [ normalCounter + i ] then
35955: LD_VAR 0 4
35959: PUSH
35960: LD_EXP 89
35964: PUSH
35965: LD_VAR 0 8
35969: PLUS
35970: ARRAY
35971: IFFALSE 35997
// tmp := tmp & ( 100 + i ) & ; ;
35973: LD_ADDR_VAR 0 3
35977: PUSH
35978: LD_VAR 0 3
35982: PUSH
35983: LD_INT 100
35985: PUSH
35986: LD_VAR 0 8
35990: PLUS
35991: STR
35992: PUSH
35993: LD_STRING ;
35995: STR
35996: ST_TO_ADDR
// end ;
35997: GO 35952
35999: POP
36000: POP
// if tmp then
36001: LD_VAR 0 3
36005: IFFALSE 36017
// active := tmp ;
36007: LD_ADDR_VAR 0 7
36011: PUSH
36012: LD_VAR 0 3
36016: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
36017: LD_STRING getStreamItemsFromMission("
36019: PUSH
36020: LD_VAR 0 5
36024: STR
36025: PUSH
36026: LD_STRING ","
36028: STR
36029: PUSH
36030: LD_VAR 0 6
36034: STR
36035: PUSH
36036: LD_STRING ","
36038: STR
36039: PUSH
36040: LD_VAR 0 7
36044: STR
36045: PUSH
36046: LD_STRING ")
36048: STR
36049: PPUSH
36050: CALL_OW 559
// end else
36054: GO 36063
// ToLua ( getStreamItemsFromMission("","","") ) ;
36056: LD_STRING getStreamItemsFromMission("","","")
36058: PPUSH
36059: CALL_OW 559
// end ;
36063: LD_VAR 0 2
36067: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
36068: LD_EXP 88
36072: PUSH
36073: LD_EXP 93
36077: AND
36078: IFFALSE 36202
36080: GO 36082
36082: DISABLE
36083: LD_INT 0
36085: PPUSH
36086: PPUSH
// begin enable ;
36087: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
36088: LD_ADDR_VAR 0 2
36092: PUSH
36093: LD_INT 22
36095: PUSH
36096: LD_OWVAR 2
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: PUSH
36105: LD_INT 2
36107: PUSH
36108: LD_INT 34
36110: PUSH
36111: LD_INT 7
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 34
36120: PUSH
36121: LD_INT 45
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 34
36130: PUSH
36131: LD_INT 28
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 34
36140: PUSH
36141: LD_INT 47
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: PUSH
36155: EMPTY
36156: LIST
36157: LIST
36158: PPUSH
36159: CALL_OW 69
36163: ST_TO_ADDR
// if not tmp then
36164: LD_VAR 0 2
36168: NOT
36169: IFFALSE 36173
// exit ;
36171: GO 36202
// for i in tmp do
36173: LD_ADDR_VAR 0 1
36177: PUSH
36178: LD_VAR 0 2
36182: PUSH
36183: FOR_IN
36184: IFFALSE 36200
// begin SetLives ( i , 0 ) ;
36186: LD_VAR 0 1
36190: PPUSH
36191: LD_INT 0
36193: PPUSH
36194: CALL_OW 234
// end ;
36198: GO 36183
36200: POP
36201: POP
// end ;
36202: PPOPN 2
36204: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
36205: LD_EXP 88
36209: PUSH
36210: LD_EXP 94
36214: AND
36215: IFFALSE 36299
36217: GO 36219
36219: DISABLE
36220: LD_INT 0
36222: PPUSH
36223: PPUSH
// begin enable ;
36224: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
36225: LD_ADDR_VAR 0 2
36229: PUSH
36230: LD_INT 22
36232: PUSH
36233: LD_OWVAR 2
36237: PUSH
36238: EMPTY
36239: LIST
36240: LIST
36241: PUSH
36242: LD_INT 32
36244: PUSH
36245: LD_INT 3
36247: PUSH
36248: EMPTY
36249: LIST
36250: LIST
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: PPUSH
36256: CALL_OW 69
36260: ST_TO_ADDR
// if not tmp then
36261: LD_VAR 0 2
36265: NOT
36266: IFFALSE 36270
// exit ;
36268: GO 36299
// for i in tmp do
36270: LD_ADDR_VAR 0 1
36274: PUSH
36275: LD_VAR 0 2
36279: PUSH
36280: FOR_IN
36281: IFFALSE 36297
// begin SetLives ( i , 0 ) ;
36283: LD_VAR 0 1
36287: PPUSH
36288: LD_INT 0
36290: PPUSH
36291: CALL_OW 234
// end ;
36295: GO 36280
36297: POP
36298: POP
// end ;
36299: PPOPN 2
36301: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
36302: LD_EXP 88
36306: PUSH
36307: LD_EXP 91
36311: AND
36312: IFFALSE 36405
36314: GO 36316
36316: DISABLE
36317: LD_INT 0
36319: PPUSH
// begin enable ;
36320: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
36321: LD_ADDR_VAR 0 1
36325: PUSH
36326: LD_INT 22
36328: PUSH
36329: LD_OWVAR 2
36333: PUSH
36334: EMPTY
36335: LIST
36336: LIST
36337: PUSH
36338: LD_INT 2
36340: PUSH
36341: LD_INT 25
36343: PUSH
36344: LD_INT 5
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 25
36353: PUSH
36354: LD_INT 9
36356: PUSH
36357: EMPTY
36358: LIST
36359: LIST
36360: PUSH
36361: LD_INT 25
36363: PUSH
36364: LD_INT 8
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: PPUSH
36381: CALL_OW 69
36385: PUSH
36386: FOR_IN
36387: IFFALSE 36403
// begin SetClass ( i , 1 ) ;
36389: LD_VAR 0 1
36393: PPUSH
36394: LD_INT 1
36396: PPUSH
36397: CALL_OW 336
// end ;
36401: GO 36386
36403: POP
36404: POP
// end ;
36405: PPOPN 1
36407: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36408: LD_EXP 88
36412: PUSH
36413: LD_EXP 92
36417: AND
36418: PUSH
36419: LD_OWVAR 65
36423: PUSH
36424: LD_INT 7
36426: LESS
36427: AND
36428: IFFALSE 36442
36430: GO 36432
36432: DISABLE
// begin enable ;
36433: ENABLE
// game_speed := 7 ;
36434: LD_ADDR_OWVAR 65
36438: PUSH
36439: LD_INT 7
36441: ST_TO_ADDR
// end ;
36442: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36443: LD_EXP 88
36447: PUSH
36448: LD_EXP 95
36452: AND
36453: IFFALSE 36655
36455: GO 36457
36457: DISABLE
36458: LD_INT 0
36460: PPUSH
36461: PPUSH
36462: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36463: LD_ADDR_VAR 0 3
36467: PUSH
36468: LD_INT 81
36470: PUSH
36471: LD_OWVAR 2
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 21
36482: PUSH
36483: LD_INT 1
36485: PUSH
36486: EMPTY
36487: LIST
36488: LIST
36489: PUSH
36490: EMPTY
36491: LIST
36492: LIST
36493: PPUSH
36494: CALL_OW 69
36498: ST_TO_ADDR
// if not tmp then
36499: LD_VAR 0 3
36503: NOT
36504: IFFALSE 36508
// exit ;
36506: GO 36655
// if tmp > 5 then
36508: LD_VAR 0 3
36512: PUSH
36513: LD_INT 5
36515: GREATER
36516: IFFALSE 36528
// k := 5 else
36518: LD_ADDR_VAR 0 2
36522: PUSH
36523: LD_INT 5
36525: ST_TO_ADDR
36526: GO 36538
// k := tmp ;
36528: LD_ADDR_VAR 0 2
36532: PUSH
36533: LD_VAR 0 3
36537: ST_TO_ADDR
// for i := 1 to k do
36538: LD_ADDR_VAR 0 1
36542: PUSH
36543: DOUBLE
36544: LD_INT 1
36546: DEC
36547: ST_TO_ADDR
36548: LD_VAR 0 2
36552: PUSH
36553: FOR_TO
36554: IFFALSE 36653
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36556: LD_VAR 0 3
36560: PUSH
36561: LD_VAR 0 1
36565: ARRAY
36566: PPUSH
36567: LD_VAR 0 1
36571: PUSH
36572: LD_INT 4
36574: MOD
36575: PUSH
36576: LD_INT 1
36578: PLUS
36579: PPUSH
36580: CALL_OW 259
36584: PUSH
36585: LD_INT 10
36587: LESS
36588: IFFALSE 36651
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36590: LD_VAR 0 3
36594: PUSH
36595: LD_VAR 0 1
36599: ARRAY
36600: PPUSH
36601: LD_VAR 0 1
36605: PUSH
36606: LD_INT 4
36608: MOD
36609: PUSH
36610: LD_INT 1
36612: PLUS
36613: PPUSH
36614: LD_VAR 0 3
36618: PUSH
36619: LD_VAR 0 1
36623: ARRAY
36624: PPUSH
36625: LD_VAR 0 1
36629: PUSH
36630: LD_INT 4
36632: MOD
36633: PUSH
36634: LD_INT 1
36636: PLUS
36637: PPUSH
36638: CALL_OW 259
36642: PUSH
36643: LD_INT 1
36645: PLUS
36646: PPUSH
36647: CALL_OW 237
36651: GO 36553
36653: POP
36654: POP
// end ;
36655: PPOPN 3
36657: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36658: LD_EXP 88
36662: PUSH
36663: LD_EXP 96
36667: AND
36668: IFFALSE 36688
36670: GO 36672
36672: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36673: LD_INT 4
36675: PPUSH
36676: LD_OWVAR 2
36680: PPUSH
36681: LD_INT 0
36683: PPUSH
36684: CALL_OW 324
36688: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36689: LD_EXP 88
36693: PUSH
36694: LD_EXP 125
36698: AND
36699: IFFALSE 36719
36701: GO 36703
36703: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36704: LD_INT 19
36706: PPUSH
36707: LD_OWVAR 2
36711: PPUSH
36712: LD_INT 0
36714: PPUSH
36715: CALL_OW 324
36719: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36720: LD_EXP 88
36724: PUSH
36725: LD_EXP 97
36729: AND
36730: IFFALSE 36832
36732: GO 36734
36734: DISABLE
36735: LD_INT 0
36737: PPUSH
36738: PPUSH
// begin enable ;
36739: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36740: LD_ADDR_VAR 0 2
36744: PUSH
36745: LD_INT 22
36747: PUSH
36748: LD_OWVAR 2
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 2
36759: PUSH
36760: LD_INT 34
36762: PUSH
36763: LD_INT 11
36765: PUSH
36766: EMPTY
36767: LIST
36768: LIST
36769: PUSH
36770: LD_INT 34
36772: PUSH
36773: LD_INT 30
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: LIST
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PPUSH
36789: CALL_OW 69
36793: ST_TO_ADDR
// if not tmp then
36794: LD_VAR 0 2
36798: NOT
36799: IFFALSE 36803
// exit ;
36801: GO 36832
// for i in tmp do
36803: LD_ADDR_VAR 0 1
36807: PUSH
36808: LD_VAR 0 2
36812: PUSH
36813: FOR_IN
36814: IFFALSE 36830
// begin SetLives ( i , 0 ) ;
36816: LD_VAR 0 1
36820: PPUSH
36821: LD_INT 0
36823: PPUSH
36824: CALL_OW 234
// end ;
36828: GO 36813
36830: POP
36831: POP
// end ;
36832: PPOPN 2
36834: END
// every 0 0$1 trigger StreamModeActive and sBunker do
36835: LD_EXP 88
36839: PUSH
36840: LD_EXP 98
36844: AND
36845: IFFALSE 36865
36847: GO 36849
36849: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
36850: LD_INT 32
36852: PPUSH
36853: LD_OWVAR 2
36857: PPUSH
36858: LD_INT 0
36860: PPUSH
36861: CALL_OW 324
36865: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
36866: LD_EXP 88
36870: PUSH
36871: LD_EXP 99
36875: AND
36876: IFFALSE 37057
36878: GO 36880
36880: DISABLE
36881: LD_INT 0
36883: PPUSH
36884: PPUSH
36885: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
36886: LD_ADDR_VAR 0 2
36890: PUSH
36891: LD_INT 22
36893: PUSH
36894: LD_OWVAR 2
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 33
36905: PUSH
36906: LD_INT 3
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PPUSH
36917: CALL_OW 69
36921: ST_TO_ADDR
// if not tmp then
36922: LD_VAR 0 2
36926: NOT
36927: IFFALSE 36931
// exit ;
36929: GO 37057
// side := 0 ;
36931: LD_ADDR_VAR 0 3
36935: PUSH
36936: LD_INT 0
36938: ST_TO_ADDR
// for i := 1 to 8 do
36939: LD_ADDR_VAR 0 1
36943: PUSH
36944: DOUBLE
36945: LD_INT 1
36947: DEC
36948: ST_TO_ADDR
36949: LD_INT 8
36951: PUSH
36952: FOR_TO
36953: IFFALSE 37001
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
36955: LD_OWVAR 2
36959: PUSH
36960: LD_VAR 0 1
36964: NONEQUAL
36965: PUSH
36966: LD_OWVAR 2
36970: PPUSH
36971: LD_VAR 0 1
36975: PPUSH
36976: CALL_OW 81
36980: PUSH
36981: LD_INT 2
36983: EQUAL
36984: AND
36985: IFFALSE 36999
// begin side := i ;
36987: LD_ADDR_VAR 0 3
36991: PUSH
36992: LD_VAR 0 1
36996: ST_TO_ADDR
// break ;
36997: GO 37001
// end ;
36999: GO 36952
37001: POP
37002: POP
// if not side then
37003: LD_VAR 0 3
37007: NOT
37008: IFFALSE 37012
// exit ;
37010: GO 37057
// for i := 1 to tmp do
37012: LD_ADDR_VAR 0 1
37016: PUSH
37017: DOUBLE
37018: LD_INT 1
37020: DEC
37021: ST_TO_ADDR
37022: LD_VAR 0 2
37026: PUSH
37027: FOR_TO
37028: IFFALSE 37055
// if Prob ( 60 ) then
37030: LD_INT 60
37032: PPUSH
37033: CALL_OW 13
37037: IFFALSE 37053
// SetSide ( i , side ) ;
37039: LD_VAR 0 1
37043: PPUSH
37044: LD_VAR 0 3
37048: PPUSH
37049: CALL_OW 235
37053: GO 37027
37055: POP
37056: POP
// end ;
37057: PPOPN 3
37059: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
37060: LD_EXP 88
37064: PUSH
37065: LD_EXP 101
37069: AND
37070: IFFALSE 37189
37072: GO 37074
37074: DISABLE
37075: LD_INT 0
37077: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
37078: LD_ADDR_VAR 0 1
37082: PUSH
37083: LD_INT 22
37085: PUSH
37086: LD_OWVAR 2
37090: PUSH
37091: EMPTY
37092: LIST
37093: LIST
37094: PUSH
37095: LD_INT 21
37097: PUSH
37098: LD_INT 1
37100: PUSH
37101: EMPTY
37102: LIST
37103: LIST
37104: PUSH
37105: LD_INT 3
37107: PUSH
37108: LD_INT 23
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PUSH
37122: EMPTY
37123: LIST
37124: LIST
37125: LIST
37126: PPUSH
37127: CALL_OW 69
37131: PUSH
37132: FOR_IN
37133: IFFALSE 37187
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
37135: LD_VAR 0 1
37139: PPUSH
37140: CALL_OW 257
37144: PUSH
37145: LD_INT 1
37147: PUSH
37148: LD_INT 2
37150: PUSH
37151: LD_INT 3
37153: PUSH
37154: LD_INT 4
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: IN
37163: IFFALSE 37185
// SetClass ( un , rand ( 1 , 4 ) ) ;
37165: LD_VAR 0 1
37169: PPUSH
37170: LD_INT 1
37172: PPUSH
37173: LD_INT 4
37175: PPUSH
37176: CALL_OW 12
37180: PPUSH
37181: CALL_OW 336
37185: GO 37132
37187: POP
37188: POP
// end ;
37189: PPOPN 1
37191: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
37192: LD_EXP 88
37196: PUSH
37197: LD_EXP 100
37201: AND
37202: IFFALSE 37281
37204: GO 37206
37206: DISABLE
37207: LD_INT 0
37209: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37210: LD_ADDR_VAR 0 1
37214: PUSH
37215: LD_INT 22
37217: PUSH
37218: LD_OWVAR 2
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 21
37229: PUSH
37230: LD_INT 3
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PPUSH
37241: CALL_OW 69
37245: ST_TO_ADDR
// if not tmp then
37246: LD_VAR 0 1
37250: NOT
37251: IFFALSE 37255
// exit ;
37253: GO 37281
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
37255: LD_VAR 0 1
37259: PUSH
37260: LD_INT 1
37262: PPUSH
37263: LD_VAR 0 1
37267: PPUSH
37268: CALL_OW 12
37272: ARRAY
37273: PPUSH
37274: LD_INT 100
37276: PPUSH
37277: CALL_OW 234
// end ;
37281: PPOPN 1
37283: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
37284: LD_EXP 88
37288: PUSH
37289: LD_EXP 102
37293: AND
37294: IFFALSE 37392
37296: GO 37298
37298: DISABLE
37299: LD_INT 0
37301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37302: LD_ADDR_VAR 0 1
37306: PUSH
37307: LD_INT 22
37309: PUSH
37310: LD_OWVAR 2
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 21
37321: PUSH
37322: LD_INT 1
37324: PUSH
37325: EMPTY
37326: LIST
37327: LIST
37328: PUSH
37329: EMPTY
37330: LIST
37331: LIST
37332: PPUSH
37333: CALL_OW 69
37337: ST_TO_ADDR
// if not tmp then
37338: LD_VAR 0 1
37342: NOT
37343: IFFALSE 37347
// exit ;
37345: GO 37392
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37347: LD_VAR 0 1
37351: PUSH
37352: LD_INT 1
37354: PPUSH
37355: LD_VAR 0 1
37359: PPUSH
37360: CALL_OW 12
37364: ARRAY
37365: PPUSH
37366: LD_INT 1
37368: PPUSH
37369: LD_INT 4
37371: PPUSH
37372: CALL_OW 12
37376: PPUSH
37377: LD_INT 3000
37379: PPUSH
37380: LD_INT 9000
37382: PPUSH
37383: CALL_OW 12
37387: PPUSH
37388: CALL_OW 492
// end ;
37392: PPOPN 1
37394: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37395: LD_EXP 88
37399: PUSH
37400: LD_EXP 103
37404: AND
37405: IFFALSE 37425
37407: GO 37409
37409: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37410: LD_INT 1
37412: PPUSH
37413: LD_OWVAR 2
37417: PPUSH
37418: LD_INT 0
37420: PPUSH
37421: CALL_OW 324
37425: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37426: LD_EXP 88
37430: PUSH
37431: LD_EXP 104
37435: AND
37436: IFFALSE 37519
37438: GO 37440
37440: DISABLE
37441: LD_INT 0
37443: PPUSH
37444: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37445: LD_ADDR_VAR 0 2
37449: PUSH
37450: LD_INT 22
37452: PUSH
37453: LD_OWVAR 2
37457: PUSH
37458: EMPTY
37459: LIST
37460: LIST
37461: PUSH
37462: LD_INT 21
37464: PUSH
37465: LD_INT 3
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PPUSH
37476: CALL_OW 69
37480: ST_TO_ADDR
// if not tmp then
37481: LD_VAR 0 2
37485: NOT
37486: IFFALSE 37490
// exit ;
37488: GO 37519
// for i in tmp do
37490: LD_ADDR_VAR 0 1
37494: PUSH
37495: LD_VAR 0 2
37499: PUSH
37500: FOR_IN
37501: IFFALSE 37517
// SetBLevel ( i , 10 ) ;
37503: LD_VAR 0 1
37507: PPUSH
37508: LD_INT 10
37510: PPUSH
37511: CALL_OW 241
37515: GO 37500
37517: POP
37518: POP
// end ;
37519: PPOPN 2
37521: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37522: LD_EXP 88
37526: PUSH
37527: LD_EXP 105
37531: AND
37532: IFFALSE 37643
37534: GO 37536
37536: DISABLE
37537: LD_INT 0
37539: PPUSH
37540: PPUSH
37541: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37542: LD_ADDR_VAR 0 3
37546: PUSH
37547: LD_INT 22
37549: PUSH
37550: LD_OWVAR 2
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 25
37561: PUSH
37562: LD_INT 1
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PPUSH
37573: CALL_OW 69
37577: ST_TO_ADDR
// if not tmp then
37578: LD_VAR 0 3
37582: NOT
37583: IFFALSE 37587
// exit ;
37585: GO 37643
// un := tmp [ rand ( 1 , tmp ) ] ;
37587: LD_ADDR_VAR 0 2
37591: PUSH
37592: LD_VAR 0 3
37596: PUSH
37597: LD_INT 1
37599: PPUSH
37600: LD_VAR 0 3
37604: PPUSH
37605: CALL_OW 12
37609: ARRAY
37610: ST_TO_ADDR
// if Crawls ( un ) then
37611: LD_VAR 0 2
37615: PPUSH
37616: CALL_OW 318
37620: IFFALSE 37631
// ComWalk ( un ) ;
37622: LD_VAR 0 2
37626: PPUSH
37627: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37631: LD_VAR 0 2
37635: PPUSH
37636: LD_INT 5
37638: PPUSH
37639: CALL_OW 336
// end ;
37643: PPOPN 3
37645: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37646: LD_EXP 88
37650: PUSH
37651: LD_EXP 106
37655: AND
37656: PUSH
37657: LD_OWVAR 67
37661: PUSH
37662: LD_INT 4
37664: LESS
37665: AND
37666: IFFALSE 37685
37668: GO 37670
37670: DISABLE
// begin Difficulty := Difficulty + 1 ;
37671: LD_ADDR_OWVAR 67
37675: PUSH
37676: LD_OWVAR 67
37680: PUSH
37681: LD_INT 1
37683: PLUS
37684: ST_TO_ADDR
// end ;
37685: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37686: LD_EXP 88
37690: PUSH
37691: LD_EXP 107
37695: AND
37696: IFFALSE 37799
37698: GO 37700
37700: DISABLE
37701: LD_INT 0
37703: PPUSH
// begin for i := 1 to 5 do
37704: LD_ADDR_VAR 0 1
37708: PUSH
37709: DOUBLE
37710: LD_INT 1
37712: DEC
37713: ST_TO_ADDR
37714: LD_INT 5
37716: PUSH
37717: FOR_TO
37718: IFFALSE 37797
// begin uc_nation := nation_nature ;
37720: LD_ADDR_OWVAR 21
37724: PUSH
37725: LD_INT 0
37727: ST_TO_ADDR
// uc_side := 0 ;
37728: LD_ADDR_OWVAR 20
37732: PUSH
37733: LD_INT 0
37735: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37736: LD_ADDR_OWVAR 29
37740: PUSH
37741: LD_INT 12
37743: PUSH
37744: LD_INT 12
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: ST_TO_ADDR
// hc_agressivity := 20 ;
37751: LD_ADDR_OWVAR 35
37755: PUSH
37756: LD_INT 20
37758: ST_TO_ADDR
// hc_class := class_tiger ;
37759: LD_ADDR_OWVAR 28
37763: PUSH
37764: LD_INT 14
37766: ST_TO_ADDR
// hc_gallery :=  ;
37767: LD_ADDR_OWVAR 33
37771: PUSH
37772: LD_STRING 
37774: ST_TO_ADDR
// hc_name :=  ;
37775: LD_ADDR_OWVAR 26
37779: PUSH
37780: LD_STRING 
37782: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37783: CALL_OW 44
37787: PPUSH
37788: LD_INT 0
37790: PPUSH
37791: CALL_OW 51
// end ;
37795: GO 37717
37797: POP
37798: POP
// end ;
37799: PPOPN 1
37801: END
// every 0 0$1 trigger StreamModeActive and sBomb do
37802: LD_EXP 88
37806: PUSH
37807: LD_EXP 108
37811: AND
37812: IFFALSE 37821
37814: GO 37816
37816: DISABLE
// StreamSibBomb ;
37817: CALL 37822 0 0
37821: END
// export function StreamSibBomb ; var i , x , y ; begin
37822: LD_INT 0
37824: PPUSH
37825: PPUSH
37826: PPUSH
37827: PPUSH
// result := false ;
37828: LD_ADDR_VAR 0 1
37832: PUSH
37833: LD_INT 0
37835: ST_TO_ADDR
// for i := 1 to 16 do
37836: LD_ADDR_VAR 0 2
37840: PUSH
37841: DOUBLE
37842: LD_INT 1
37844: DEC
37845: ST_TO_ADDR
37846: LD_INT 16
37848: PUSH
37849: FOR_TO
37850: IFFALSE 38049
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37852: LD_ADDR_VAR 0 3
37856: PUSH
37857: LD_INT 10
37859: PUSH
37860: LD_INT 20
37862: PUSH
37863: LD_INT 30
37865: PUSH
37866: LD_INT 40
37868: PUSH
37869: LD_INT 50
37871: PUSH
37872: LD_INT 60
37874: PUSH
37875: LD_INT 70
37877: PUSH
37878: LD_INT 80
37880: PUSH
37881: LD_INT 90
37883: PUSH
37884: LD_INT 100
37886: PUSH
37887: LD_INT 110
37889: PUSH
37890: LD_INT 120
37892: PUSH
37893: LD_INT 130
37895: PUSH
37896: LD_INT 140
37898: PUSH
37899: LD_INT 150
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: PUSH
37919: LD_INT 1
37921: PPUSH
37922: LD_INT 15
37924: PPUSH
37925: CALL_OW 12
37929: ARRAY
37930: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37931: LD_ADDR_VAR 0 4
37935: PUSH
37936: LD_INT 10
37938: PUSH
37939: LD_INT 20
37941: PUSH
37942: LD_INT 30
37944: PUSH
37945: LD_INT 40
37947: PUSH
37948: LD_INT 50
37950: PUSH
37951: LD_INT 60
37953: PUSH
37954: LD_INT 70
37956: PUSH
37957: LD_INT 80
37959: PUSH
37960: LD_INT 90
37962: PUSH
37963: LD_INT 100
37965: PUSH
37966: LD_INT 110
37968: PUSH
37969: LD_INT 120
37971: PUSH
37972: LD_INT 130
37974: PUSH
37975: LD_INT 140
37977: PUSH
37978: LD_INT 150
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: PPUSH
38001: LD_INT 15
38003: PPUSH
38004: CALL_OW 12
38008: ARRAY
38009: ST_TO_ADDR
// if ValidHex ( x , y ) then
38010: LD_VAR 0 3
38014: PPUSH
38015: LD_VAR 0 4
38019: PPUSH
38020: CALL_OW 488
38024: IFFALSE 38047
// begin result := [ x , y ] ;
38026: LD_ADDR_VAR 0 1
38030: PUSH
38031: LD_VAR 0 3
38035: PUSH
38036: LD_VAR 0 4
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: ST_TO_ADDR
// break ;
38045: GO 38049
// end ; end ;
38047: GO 37849
38049: POP
38050: POP
// if result then
38051: LD_VAR 0 1
38055: IFFALSE 38115
// begin ToLua ( playSibBomb() ) ;
38057: LD_STRING playSibBomb()
38059: PPUSH
38060: CALL_OW 559
// wait ( 0 0$14 ) ;
38064: LD_INT 490
38066: PPUSH
38067: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
38071: LD_VAR 0 1
38075: PUSH
38076: LD_INT 1
38078: ARRAY
38079: PPUSH
38080: LD_VAR 0 1
38084: PUSH
38085: LD_INT 2
38087: ARRAY
38088: PPUSH
38089: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
38093: LD_VAR 0 1
38097: PUSH
38098: LD_INT 1
38100: ARRAY
38101: PPUSH
38102: LD_VAR 0 1
38106: PUSH
38107: LD_INT 2
38109: ARRAY
38110: PPUSH
38111: CALL_OW 429
// end ; end ;
38115: LD_VAR 0 1
38119: RET
// every 0 0$1 trigger StreamModeActive and sReset do
38120: LD_EXP 88
38124: PUSH
38125: LD_EXP 110
38129: AND
38130: IFFALSE 38142
38132: GO 38134
38134: DISABLE
// YouLost (  ) ;
38135: LD_STRING 
38137: PPUSH
38138: CALL_OW 104
38142: END
// every 0 0$1 trigger StreamModeActive and sFog do
38143: LD_EXP 88
38147: PUSH
38148: LD_EXP 109
38152: AND
38153: IFFALSE 38167
38155: GO 38157
38157: DISABLE
// FogOff ( your_side ) ;
38158: LD_OWVAR 2
38162: PPUSH
38163: CALL_OW 344
38167: END
// every 0 0$1 trigger StreamModeActive and sSun do
38168: LD_EXP 88
38172: PUSH
38173: LD_EXP 111
38177: AND
38178: IFFALSE 38206
38180: GO 38182
38182: DISABLE
// begin solar_recharge_percent := 0 ;
38183: LD_ADDR_OWVAR 79
38187: PUSH
38188: LD_INT 0
38190: ST_TO_ADDR
// wait ( 5 5$00 ) ;
38191: LD_INT 10500
38193: PPUSH
38194: CALL_OW 67
// solar_recharge_percent := 100 ;
38198: LD_ADDR_OWVAR 79
38202: PUSH
38203: LD_INT 100
38205: ST_TO_ADDR
// end ;
38206: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
38207: LD_EXP 88
38211: PUSH
38212: LD_EXP 112
38216: AND
38217: IFFALSE 38456
38219: GO 38221
38221: DISABLE
38222: LD_INT 0
38224: PPUSH
38225: PPUSH
38226: PPUSH
// begin tmp := [ ] ;
38227: LD_ADDR_VAR 0 3
38231: PUSH
38232: EMPTY
38233: ST_TO_ADDR
// for i := 1 to 6 do
38234: LD_ADDR_VAR 0 1
38238: PUSH
38239: DOUBLE
38240: LD_INT 1
38242: DEC
38243: ST_TO_ADDR
38244: LD_INT 6
38246: PUSH
38247: FOR_TO
38248: IFFALSE 38353
// begin uc_nation := nation_nature ;
38250: LD_ADDR_OWVAR 21
38254: PUSH
38255: LD_INT 0
38257: ST_TO_ADDR
// uc_side := 0 ;
38258: LD_ADDR_OWVAR 20
38262: PUSH
38263: LD_INT 0
38265: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38266: LD_ADDR_OWVAR 29
38270: PUSH
38271: LD_INT 12
38273: PUSH
38274: LD_INT 12
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: ST_TO_ADDR
// hc_agressivity := 20 ;
38281: LD_ADDR_OWVAR 35
38285: PUSH
38286: LD_INT 20
38288: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
38289: LD_ADDR_OWVAR 28
38293: PUSH
38294: LD_INT 17
38296: ST_TO_ADDR
// hc_gallery :=  ;
38297: LD_ADDR_OWVAR 33
38301: PUSH
38302: LD_STRING 
38304: ST_TO_ADDR
// hc_name :=  ;
38305: LD_ADDR_OWVAR 26
38309: PUSH
38310: LD_STRING 
38312: ST_TO_ADDR
// un := CreateHuman ;
38313: LD_ADDR_VAR 0 2
38317: PUSH
38318: CALL_OW 44
38322: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
38323: LD_VAR 0 2
38327: PPUSH
38328: LD_INT 1
38330: PPUSH
38331: CALL_OW 51
// tmp := tmp ^ un ;
38335: LD_ADDR_VAR 0 3
38339: PUSH
38340: LD_VAR 0 3
38344: PUSH
38345: LD_VAR 0 2
38349: ADD
38350: ST_TO_ADDR
// end ;
38351: GO 38247
38353: POP
38354: POP
// repeat wait ( 0 0$1 ) ;
38355: LD_INT 35
38357: PPUSH
38358: CALL_OW 67
// for un in tmp do
38362: LD_ADDR_VAR 0 2
38366: PUSH
38367: LD_VAR 0 3
38371: PUSH
38372: FOR_IN
38373: IFFALSE 38447
// begin if IsDead ( un ) then
38375: LD_VAR 0 2
38379: PPUSH
38380: CALL_OW 301
38384: IFFALSE 38404
// begin tmp := tmp diff un ;
38386: LD_ADDR_VAR 0 3
38390: PUSH
38391: LD_VAR 0 3
38395: PUSH
38396: LD_VAR 0 2
38400: DIFF
38401: ST_TO_ADDR
// continue ;
38402: GO 38372
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38404: LD_VAR 0 2
38408: PPUSH
38409: LD_INT 3
38411: PUSH
38412: LD_INT 22
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PPUSH
38426: CALL_OW 69
38430: PPUSH
38431: LD_VAR 0 2
38435: PPUSH
38436: CALL_OW 74
38440: PPUSH
38441: CALL_OW 115
// end ;
38445: GO 38372
38447: POP
38448: POP
// until not tmp ;
38449: LD_VAR 0 3
38453: NOT
38454: IFFALSE 38355
// end ;
38456: PPOPN 3
38458: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38459: LD_EXP 88
38463: PUSH
38464: LD_EXP 113
38468: AND
38469: IFFALSE 38523
38471: GO 38473
38473: DISABLE
// begin ToLua ( displayTroll(); ) ;
38474: LD_STRING displayTroll();
38476: PPUSH
38477: CALL_OW 559
// wait ( 3 3$00 ) ;
38481: LD_INT 6300
38483: PPUSH
38484: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38488: LD_STRING hideTroll();
38490: PPUSH
38491: CALL_OW 559
// wait ( 1 1$00 ) ;
38495: LD_INT 2100
38497: PPUSH
38498: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38502: LD_STRING displayTroll();
38504: PPUSH
38505: CALL_OW 559
// wait ( 1 1$00 ) ;
38509: LD_INT 2100
38511: PPUSH
38512: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38516: LD_STRING hideTroll();
38518: PPUSH
38519: CALL_OW 559
// end ;
38523: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38524: LD_EXP 88
38528: PUSH
38529: LD_EXP 114
38533: AND
38534: IFFALSE 38597
38536: GO 38538
38538: DISABLE
38539: LD_INT 0
38541: PPUSH
// begin p := 0 ;
38542: LD_ADDR_VAR 0 1
38546: PUSH
38547: LD_INT 0
38549: ST_TO_ADDR
// repeat game_speed := 1 ;
38550: LD_ADDR_OWVAR 65
38554: PUSH
38555: LD_INT 1
38557: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38558: LD_INT 35
38560: PPUSH
38561: CALL_OW 67
// p := p + 1 ;
38565: LD_ADDR_VAR 0 1
38569: PUSH
38570: LD_VAR 0 1
38574: PUSH
38575: LD_INT 1
38577: PLUS
38578: ST_TO_ADDR
// until p >= 60 ;
38579: LD_VAR 0 1
38583: PUSH
38584: LD_INT 60
38586: GREATEREQUAL
38587: IFFALSE 38550
// game_speed := 4 ;
38589: LD_ADDR_OWVAR 65
38593: PUSH
38594: LD_INT 4
38596: ST_TO_ADDR
// end ;
38597: PPOPN 1
38599: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38600: LD_EXP 88
38604: PUSH
38605: LD_EXP 115
38609: AND
38610: IFFALSE 38756
38612: GO 38614
38614: DISABLE
38615: LD_INT 0
38617: PPUSH
38618: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38619: LD_ADDR_VAR 0 1
38623: PUSH
38624: LD_INT 22
38626: PUSH
38627: LD_OWVAR 2
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: LD_INT 30
38641: PUSH
38642: LD_INT 0
38644: PUSH
38645: EMPTY
38646: LIST
38647: LIST
38648: PUSH
38649: LD_INT 30
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: LIST
38663: PUSH
38664: EMPTY
38665: LIST
38666: LIST
38667: PPUSH
38668: CALL_OW 69
38672: ST_TO_ADDR
// if not depot then
38673: LD_VAR 0 1
38677: NOT
38678: IFFALSE 38682
// exit ;
38680: GO 38756
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38682: LD_ADDR_VAR 0 2
38686: PUSH
38687: LD_VAR 0 1
38691: PUSH
38692: LD_INT 1
38694: PPUSH
38695: LD_VAR 0 1
38699: PPUSH
38700: CALL_OW 12
38704: ARRAY
38705: PPUSH
38706: CALL_OW 274
38710: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38711: LD_VAR 0 2
38715: PPUSH
38716: LD_INT 1
38718: PPUSH
38719: LD_INT 0
38721: PPUSH
38722: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38726: LD_VAR 0 2
38730: PPUSH
38731: LD_INT 2
38733: PPUSH
38734: LD_INT 0
38736: PPUSH
38737: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38741: LD_VAR 0 2
38745: PPUSH
38746: LD_INT 3
38748: PPUSH
38749: LD_INT 0
38751: PPUSH
38752: CALL_OW 277
// end ;
38756: PPOPN 2
38758: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38759: LD_EXP 88
38763: PUSH
38764: LD_EXP 116
38768: AND
38769: IFFALSE 38866
38771: GO 38773
38773: DISABLE
38774: LD_INT 0
38776: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38777: LD_ADDR_VAR 0 1
38781: PUSH
38782: LD_INT 22
38784: PUSH
38785: LD_OWVAR 2
38789: PUSH
38790: EMPTY
38791: LIST
38792: LIST
38793: PUSH
38794: LD_INT 21
38796: PUSH
38797: LD_INT 1
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 3
38806: PUSH
38807: LD_INT 23
38809: PUSH
38810: LD_INT 0
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: LIST
38825: PPUSH
38826: CALL_OW 69
38830: ST_TO_ADDR
// if not tmp then
38831: LD_VAR 0 1
38835: NOT
38836: IFFALSE 38840
// exit ;
38838: GO 38866
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
38840: LD_VAR 0 1
38844: PUSH
38845: LD_INT 1
38847: PPUSH
38848: LD_VAR 0 1
38852: PPUSH
38853: CALL_OW 12
38857: ARRAY
38858: PPUSH
38859: LD_INT 200
38861: PPUSH
38862: CALL_OW 234
// end ;
38866: PPOPN 1
38868: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
38869: LD_EXP 88
38873: PUSH
38874: LD_EXP 117
38878: AND
38879: IFFALSE 38958
38881: GO 38883
38883: DISABLE
38884: LD_INT 0
38886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
38887: LD_ADDR_VAR 0 1
38891: PUSH
38892: LD_INT 22
38894: PUSH
38895: LD_OWVAR 2
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 21
38906: PUSH
38907: LD_INT 2
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PPUSH
38918: CALL_OW 69
38922: ST_TO_ADDR
// if not tmp then
38923: LD_VAR 0 1
38927: NOT
38928: IFFALSE 38932
// exit ;
38930: GO 38958
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
38932: LD_VAR 0 1
38936: PUSH
38937: LD_INT 1
38939: PPUSH
38940: LD_VAR 0 1
38944: PPUSH
38945: CALL_OW 12
38949: ARRAY
38950: PPUSH
38951: LD_INT 60
38953: PPUSH
38954: CALL_OW 234
// end ;
38958: PPOPN 1
38960: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
38961: LD_EXP 88
38965: PUSH
38966: LD_EXP 118
38970: AND
38971: IFFALSE 39070
38973: GO 38975
38975: DISABLE
38976: LD_INT 0
38978: PPUSH
38979: PPUSH
// begin enable ;
38980: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
38981: LD_ADDR_VAR 0 1
38985: PUSH
38986: LD_INT 22
38988: PUSH
38989: LD_OWVAR 2
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 61
39000: PUSH
39001: EMPTY
39002: LIST
39003: PUSH
39004: LD_INT 33
39006: PUSH
39007: LD_INT 2
39009: PUSH
39010: EMPTY
39011: LIST
39012: LIST
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: LIST
39018: PPUSH
39019: CALL_OW 69
39023: ST_TO_ADDR
// if not tmp then
39024: LD_VAR 0 1
39028: NOT
39029: IFFALSE 39033
// exit ;
39031: GO 39070
// for i in tmp do
39033: LD_ADDR_VAR 0 2
39037: PUSH
39038: LD_VAR 0 1
39042: PUSH
39043: FOR_IN
39044: IFFALSE 39068
// if IsControledBy ( i ) then
39046: LD_VAR 0 2
39050: PPUSH
39051: CALL_OW 312
39055: IFFALSE 39066
// ComUnlink ( i ) ;
39057: LD_VAR 0 2
39061: PPUSH
39062: CALL_OW 136
39066: GO 39043
39068: POP
39069: POP
// end ;
39070: PPOPN 2
39072: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
39073: LD_EXP 88
39077: PUSH
39078: LD_EXP 119
39082: AND
39083: IFFALSE 39223
39085: GO 39087
39087: DISABLE
39088: LD_INT 0
39090: PPUSH
39091: PPUSH
// begin ToLua ( displayPowell(); ) ;
39092: LD_STRING displayPowell();
39094: PPUSH
39095: CALL_OW 559
// uc_side := 0 ;
39099: LD_ADDR_OWVAR 20
39103: PUSH
39104: LD_INT 0
39106: ST_TO_ADDR
// uc_nation := 2 ;
39107: LD_ADDR_OWVAR 21
39111: PUSH
39112: LD_INT 2
39114: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
39115: LD_ADDR_OWVAR 37
39119: PUSH
39120: LD_INT 14
39122: ST_TO_ADDR
// vc_engine := engine_siberite ;
39123: LD_ADDR_OWVAR 39
39127: PUSH
39128: LD_INT 3
39130: ST_TO_ADDR
// vc_control := control_apeman ;
39131: LD_ADDR_OWVAR 38
39135: PUSH
39136: LD_INT 5
39138: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
39139: LD_ADDR_OWVAR 40
39143: PUSH
39144: LD_INT 29
39146: ST_TO_ADDR
// un := CreateVehicle ;
39147: LD_ADDR_VAR 0 2
39151: PUSH
39152: CALL_OW 45
39156: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39157: LD_VAR 0 2
39161: PPUSH
39162: LD_INT 1
39164: PPUSH
39165: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39169: LD_INT 35
39171: PPUSH
39172: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39176: LD_VAR 0 2
39180: PPUSH
39181: LD_INT 22
39183: PUSH
39184: LD_OWVAR 2
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PPUSH
39193: CALL_OW 69
39197: PPUSH
39198: LD_VAR 0 2
39202: PPUSH
39203: CALL_OW 74
39207: PPUSH
39208: CALL_OW 115
// until IsDead ( un ) ;
39212: LD_VAR 0 2
39216: PPUSH
39217: CALL_OW 301
39221: IFFALSE 39169
// end ;
39223: PPOPN 2
39225: END
// every 0 0$1 trigger StreamModeActive and sStu do
39226: LD_EXP 88
39230: PUSH
39231: LD_EXP 127
39235: AND
39236: IFFALSE 39252
39238: GO 39240
39240: DISABLE
// begin ToLua ( displayStucuk(); ) ;
39241: LD_STRING displayStucuk();
39243: PPUSH
39244: CALL_OW 559
// ResetFog ;
39248: CALL_OW 335
// end ;
39252: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
39253: LD_EXP 88
39257: PUSH
39258: LD_EXP 120
39262: AND
39263: IFFALSE 39404
39265: GO 39267
39267: DISABLE
39268: LD_INT 0
39270: PPUSH
39271: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39272: LD_ADDR_VAR 0 2
39276: PUSH
39277: LD_INT 22
39279: PUSH
39280: LD_OWVAR 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 21
39291: PUSH
39292: LD_INT 1
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PPUSH
39303: CALL_OW 69
39307: ST_TO_ADDR
// if not tmp then
39308: LD_VAR 0 2
39312: NOT
39313: IFFALSE 39317
// exit ;
39315: GO 39404
// un := tmp [ rand ( 1 , tmp ) ] ;
39317: LD_ADDR_VAR 0 1
39321: PUSH
39322: LD_VAR 0 2
39326: PUSH
39327: LD_INT 1
39329: PPUSH
39330: LD_VAR 0 2
39334: PPUSH
39335: CALL_OW 12
39339: ARRAY
39340: ST_TO_ADDR
// SetSide ( un , 0 ) ;
39341: LD_VAR 0 1
39345: PPUSH
39346: LD_INT 0
39348: PPUSH
39349: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39353: LD_VAR 0 1
39357: PPUSH
39358: LD_OWVAR 3
39362: PUSH
39363: LD_VAR 0 1
39367: DIFF
39368: PPUSH
39369: LD_VAR 0 1
39373: PPUSH
39374: CALL_OW 74
39378: PPUSH
39379: CALL_OW 115
// wait ( 0 0$20 ) ;
39383: LD_INT 700
39385: PPUSH
39386: CALL_OW 67
// SetSide ( un , your_side ) ;
39390: LD_VAR 0 1
39394: PPUSH
39395: LD_OWVAR 2
39399: PPUSH
39400: CALL_OW 235
// end ;
39404: PPOPN 2
39406: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39407: LD_EXP 88
39411: PUSH
39412: LD_EXP 121
39416: AND
39417: IFFALSE 39523
39419: GO 39421
39421: DISABLE
39422: LD_INT 0
39424: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39425: LD_ADDR_VAR 0 1
39429: PUSH
39430: LD_INT 22
39432: PUSH
39433: LD_OWVAR 2
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: LD_INT 30
39447: PUSH
39448: LD_INT 0
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 30
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: EMPTY
39462: LIST
39463: LIST
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: LIST
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PPUSH
39474: CALL_OW 69
39478: ST_TO_ADDR
// if not depot then
39479: LD_VAR 0 1
39483: NOT
39484: IFFALSE 39488
// exit ;
39486: GO 39523
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39488: LD_VAR 0 1
39492: PUSH
39493: LD_INT 1
39495: ARRAY
39496: PPUSH
39497: CALL_OW 250
39501: PPUSH
39502: LD_VAR 0 1
39506: PUSH
39507: LD_INT 1
39509: ARRAY
39510: PPUSH
39511: CALL_OW 251
39515: PPUSH
39516: LD_INT 70
39518: PPUSH
39519: CALL_OW 495
// end ;
39523: PPOPN 1
39525: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39526: LD_EXP 88
39530: PUSH
39531: LD_EXP 122
39535: AND
39536: IFFALSE 39747
39538: GO 39540
39540: DISABLE
39541: LD_INT 0
39543: PPUSH
39544: PPUSH
39545: PPUSH
39546: PPUSH
39547: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39548: LD_ADDR_VAR 0 5
39552: PUSH
39553: LD_INT 22
39555: PUSH
39556: LD_OWVAR 2
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 21
39567: PUSH
39568: LD_INT 1
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PPUSH
39579: CALL_OW 69
39583: ST_TO_ADDR
// if not tmp then
39584: LD_VAR 0 5
39588: NOT
39589: IFFALSE 39593
// exit ;
39591: GO 39747
// for i in tmp do
39593: LD_ADDR_VAR 0 1
39597: PUSH
39598: LD_VAR 0 5
39602: PUSH
39603: FOR_IN
39604: IFFALSE 39745
// begin d := rand ( 0 , 5 ) ;
39606: LD_ADDR_VAR 0 4
39610: PUSH
39611: LD_INT 0
39613: PPUSH
39614: LD_INT 5
39616: PPUSH
39617: CALL_OW 12
39621: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39622: LD_ADDR_VAR 0 2
39626: PUSH
39627: LD_VAR 0 1
39631: PPUSH
39632: CALL_OW 250
39636: PPUSH
39637: LD_VAR 0 4
39641: PPUSH
39642: LD_INT 3
39644: PPUSH
39645: LD_INT 12
39647: PPUSH
39648: CALL_OW 12
39652: PPUSH
39653: CALL_OW 272
39657: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39658: LD_ADDR_VAR 0 3
39662: PUSH
39663: LD_VAR 0 1
39667: PPUSH
39668: CALL_OW 251
39672: PPUSH
39673: LD_VAR 0 4
39677: PPUSH
39678: LD_INT 3
39680: PPUSH
39681: LD_INT 12
39683: PPUSH
39684: CALL_OW 12
39688: PPUSH
39689: CALL_OW 273
39693: ST_TO_ADDR
// if ValidHex ( x , y ) then
39694: LD_VAR 0 2
39698: PPUSH
39699: LD_VAR 0 3
39703: PPUSH
39704: CALL_OW 488
39708: IFFALSE 39743
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39710: LD_VAR 0 1
39714: PPUSH
39715: LD_VAR 0 2
39719: PPUSH
39720: LD_VAR 0 3
39724: PPUSH
39725: LD_INT 3
39727: PPUSH
39728: LD_INT 6
39730: PPUSH
39731: CALL_OW 12
39735: PPUSH
39736: LD_INT 1
39738: PPUSH
39739: CALL_OW 483
// end ;
39743: GO 39603
39745: POP
39746: POP
// end ;
39747: PPOPN 5
39749: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39750: LD_EXP 88
39754: PUSH
39755: LD_EXP 123
39759: AND
39760: IFFALSE 39854
39762: GO 39764
39764: DISABLE
39765: LD_INT 0
39767: PPUSH
39768: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39769: LD_ADDR_VAR 0 2
39773: PUSH
39774: LD_INT 22
39776: PUSH
39777: LD_OWVAR 2
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 32
39788: PUSH
39789: LD_INT 1
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 21
39798: PUSH
39799: LD_INT 2
39801: PUSH
39802: EMPTY
39803: LIST
39804: LIST
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: LIST
39810: PPUSH
39811: CALL_OW 69
39815: ST_TO_ADDR
// if not tmp then
39816: LD_VAR 0 2
39820: NOT
39821: IFFALSE 39825
// exit ;
39823: GO 39854
// for i in tmp do
39825: LD_ADDR_VAR 0 1
39829: PUSH
39830: LD_VAR 0 2
39834: PUSH
39835: FOR_IN
39836: IFFALSE 39852
// SetFuel ( i , 0 ) ;
39838: LD_VAR 0 1
39842: PPUSH
39843: LD_INT 0
39845: PPUSH
39846: CALL_OW 240
39850: GO 39835
39852: POP
39853: POP
// end ;
39854: PPOPN 2
39856: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
39857: LD_EXP 88
39861: PUSH
39862: LD_EXP 124
39866: AND
39867: IFFALSE 39933
39869: GO 39871
39871: DISABLE
39872: LD_INT 0
39874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39875: LD_ADDR_VAR 0 1
39879: PUSH
39880: LD_INT 22
39882: PUSH
39883: LD_OWVAR 2
39887: PUSH
39888: EMPTY
39889: LIST
39890: LIST
39891: PUSH
39892: LD_INT 30
39894: PUSH
39895: LD_INT 29
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PUSH
39902: EMPTY
39903: LIST
39904: LIST
39905: PPUSH
39906: CALL_OW 69
39910: ST_TO_ADDR
// if not tmp then
39911: LD_VAR 0 1
39915: NOT
39916: IFFALSE 39920
// exit ;
39918: GO 39933
// DestroyUnit ( tmp [ 1 ] ) ;
39920: LD_VAR 0 1
39924: PUSH
39925: LD_INT 1
39927: ARRAY
39928: PPUSH
39929: CALL_OW 65
// end ;
39933: PPOPN 1
39935: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
39936: LD_EXP 88
39940: PUSH
39941: LD_EXP 126
39945: AND
39946: IFFALSE 40075
39948: GO 39950
39950: DISABLE
39951: LD_INT 0
39953: PPUSH
// begin uc_side := 0 ;
39954: LD_ADDR_OWVAR 20
39958: PUSH
39959: LD_INT 0
39961: ST_TO_ADDR
// uc_nation := nation_arabian ;
39962: LD_ADDR_OWVAR 21
39966: PUSH
39967: LD_INT 2
39969: ST_TO_ADDR
// hc_gallery :=  ;
39970: LD_ADDR_OWVAR 33
39974: PUSH
39975: LD_STRING 
39977: ST_TO_ADDR
// hc_name :=  ;
39978: LD_ADDR_OWVAR 26
39982: PUSH
39983: LD_STRING 
39985: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
39986: LD_INT 1
39988: PPUSH
39989: LD_INT 11
39991: PPUSH
39992: LD_INT 10
39994: PPUSH
39995: CALL_OW 380
// un := CreateHuman ;
39999: LD_ADDR_VAR 0 1
40003: PUSH
40004: CALL_OW 44
40008: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40009: LD_VAR 0 1
40013: PPUSH
40014: LD_INT 1
40016: PPUSH
40017: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
40021: LD_INT 35
40023: PPUSH
40024: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
40028: LD_VAR 0 1
40032: PPUSH
40033: LD_INT 22
40035: PUSH
40036: LD_OWVAR 2
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PPUSH
40045: CALL_OW 69
40049: PPUSH
40050: LD_VAR 0 1
40054: PPUSH
40055: CALL_OW 74
40059: PPUSH
40060: CALL_OW 115
// until IsDead ( un ) ;
40064: LD_VAR 0 1
40068: PPUSH
40069: CALL_OW 301
40073: IFFALSE 40021
// end ;
40075: PPOPN 1
40077: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
40078: LD_EXP 88
40082: PUSH
40083: LD_EXP 128
40087: AND
40088: IFFALSE 40100
40090: GO 40092
40092: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
40093: LD_STRING earthquake(getX(game), 0, 32)
40095: PPUSH
40096: CALL_OW 559
40100: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
40101: LD_EXP 88
40105: PUSH
40106: LD_EXP 129
40110: AND
40111: IFFALSE 40202
40113: GO 40115
40115: DISABLE
40116: LD_INT 0
40118: PPUSH
// begin enable ;
40119: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
40120: LD_ADDR_VAR 0 1
40124: PUSH
40125: LD_INT 22
40127: PUSH
40128: LD_OWVAR 2
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 21
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 33
40149: PUSH
40150: LD_INT 3
40152: PUSH
40153: EMPTY
40154: LIST
40155: LIST
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: LIST
40161: PPUSH
40162: CALL_OW 69
40166: ST_TO_ADDR
// if not tmp then
40167: LD_VAR 0 1
40171: NOT
40172: IFFALSE 40176
// exit ;
40174: GO 40202
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40176: LD_VAR 0 1
40180: PUSH
40181: LD_INT 1
40183: PPUSH
40184: LD_VAR 0 1
40188: PPUSH
40189: CALL_OW 12
40193: ARRAY
40194: PPUSH
40195: LD_INT 1
40197: PPUSH
40198: CALL_OW 234
// end ;
40202: PPOPN 1
40204: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
40205: LD_EXP 88
40209: PUSH
40210: LD_EXP 130
40214: AND
40215: IFFALSE 40356
40217: GO 40219
40219: DISABLE
40220: LD_INT 0
40222: PPUSH
40223: PPUSH
40224: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40225: LD_ADDR_VAR 0 3
40229: PUSH
40230: LD_INT 22
40232: PUSH
40233: LD_OWVAR 2
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 25
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: EMPTY
40253: LIST
40254: LIST
40255: PPUSH
40256: CALL_OW 69
40260: ST_TO_ADDR
// if not tmp then
40261: LD_VAR 0 3
40265: NOT
40266: IFFALSE 40270
// exit ;
40268: GO 40356
// un := tmp [ rand ( 1 , tmp ) ] ;
40270: LD_ADDR_VAR 0 2
40274: PUSH
40275: LD_VAR 0 3
40279: PUSH
40280: LD_INT 1
40282: PPUSH
40283: LD_VAR 0 3
40287: PPUSH
40288: CALL_OW 12
40292: ARRAY
40293: ST_TO_ADDR
// if Crawls ( un ) then
40294: LD_VAR 0 2
40298: PPUSH
40299: CALL_OW 318
40303: IFFALSE 40314
// ComWalk ( un ) ;
40305: LD_VAR 0 2
40309: PPUSH
40310: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
40314: LD_VAR 0 2
40318: PPUSH
40319: LD_INT 9
40321: PPUSH
40322: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
40326: LD_INT 28
40328: PPUSH
40329: LD_OWVAR 2
40333: PPUSH
40334: LD_INT 2
40336: PPUSH
40337: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
40341: LD_INT 29
40343: PPUSH
40344: LD_OWVAR 2
40348: PPUSH
40349: LD_INT 2
40351: PPUSH
40352: CALL_OW 322
// end ;
40356: PPOPN 3
40358: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40359: LD_EXP 88
40363: PUSH
40364: LD_EXP 131
40368: AND
40369: IFFALSE 40480
40371: GO 40373
40373: DISABLE
40374: LD_INT 0
40376: PPUSH
40377: PPUSH
40378: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40379: LD_ADDR_VAR 0 3
40383: PUSH
40384: LD_INT 22
40386: PUSH
40387: LD_OWVAR 2
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 25
40398: PUSH
40399: LD_INT 1
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PPUSH
40410: CALL_OW 69
40414: ST_TO_ADDR
// if not tmp then
40415: LD_VAR 0 3
40419: NOT
40420: IFFALSE 40424
// exit ;
40422: GO 40480
// un := tmp [ rand ( 1 , tmp ) ] ;
40424: LD_ADDR_VAR 0 2
40428: PUSH
40429: LD_VAR 0 3
40433: PUSH
40434: LD_INT 1
40436: PPUSH
40437: LD_VAR 0 3
40441: PPUSH
40442: CALL_OW 12
40446: ARRAY
40447: ST_TO_ADDR
// if Crawls ( un ) then
40448: LD_VAR 0 2
40452: PPUSH
40453: CALL_OW 318
40457: IFFALSE 40468
// ComWalk ( un ) ;
40459: LD_VAR 0 2
40463: PPUSH
40464: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40468: LD_VAR 0 2
40472: PPUSH
40473: LD_INT 8
40475: PPUSH
40476: CALL_OW 336
// end ;
40480: PPOPN 3
40482: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40483: LD_EXP 88
40487: PUSH
40488: LD_EXP 132
40492: AND
40493: IFFALSE 40637
40495: GO 40497
40497: DISABLE
40498: LD_INT 0
40500: PPUSH
40501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40502: LD_ADDR_VAR 0 2
40506: PUSH
40507: LD_INT 22
40509: PUSH
40510: LD_OWVAR 2
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 21
40521: PUSH
40522: LD_INT 2
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 2
40531: PUSH
40532: LD_INT 34
40534: PUSH
40535: LD_INT 12
40537: PUSH
40538: EMPTY
40539: LIST
40540: LIST
40541: PUSH
40542: LD_INT 34
40544: PUSH
40545: LD_INT 51
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: PUSH
40552: LD_INT 34
40554: PUSH
40555: LD_INT 32
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: EMPTY
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: LIST
40572: PPUSH
40573: CALL_OW 69
40577: ST_TO_ADDR
// if not tmp then
40578: LD_VAR 0 2
40582: NOT
40583: IFFALSE 40587
// exit ;
40585: GO 40637
// for i in tmp do
40587: LD_ADDR_VAR 0 1
40591: PUSH
40592: LD_VAR 0 2
40596: PUSH
40597: FOR_IN
40598: IFFALSE 40635
// if GetCargo ( i , mat_artifact ) = 0 then
40600: LD_VAR 0 1
40604: PPUSH
40605: LD_INT 4
40607: PPUSH
40608: CALL_OW 289
40612: PUSH
40613: LD_INT 0
40615: EQUAL
40616: IFFALSE 40633
// SetCargo ( i , mat_siberit , 100 ) ;
40618: LD_VAR 0 1
40622: PPUSH
40623: LD_INT 3
40625: PPUSH
40626: LD_INT 100
40628: PPUSH
40629: CALL_OW 290
40633: GO 40597
40635: POP
40636: POP
// end ;
40637: PPOPN 2
40639: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40640: LD_EXP 88
40644: PUSH
40645: LD_EXP 133
40649: AND
40650: IFFALSE 40833
40652: GO 40654
40654: DISABLE
40655: LD_INT 0
40657: PPUSH
40658: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40659: LD_ADDR_VAR 0 2
40663: PUSH
40664: LD_INT 22
40666: PUSH
40667: LD_OWVAR 2
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PPUSH
40676: CALL_OW 69
40680: ST_TO_ADDR
// if not tmp then
40681: LD_VAR 0 2
40685: NOT
40686: IFFALSE 40690
// exit ;
40688: GO 40833
// for i := 1 to 2 do
40690: LD_ADDR_VAR 0 1
40694: PUSH
40695: DOUBLE
40696: LD_INT 1
40698: DEC
40699: ST_TO_ADDR
40700: LD_INT 2
40702: PUSH
40703: FOR_TO
40704: IFFALSE 40831
// begin uc_side := your_side ;
40706: LD_ADDR_OWVAR 20
40710: PUSH
40711: LD_OWVAR 2
40715: ST_TO_ADDR
// uc_nation := nation_american ;
40716: LD_ADDR_OWVAR 21
40720: PUSH
40721: LD_INT 1
40723: ST_TO_ADDR
// vc_chassis := us_morphling ;
40724: LD_ADDR_OWVAR 37
40728: PUSH
40729: LD_INT 5
40731: ST_TO_ADDR
// vc_engine := engine_siberite ;
40732: LD_ADDR_OWVAR 39
40736: PUSH
40737: LD_INT 3
40739: ST_TO_ADDR
// vc_control := control_computer ;
40740: LD_ADDR_OWVAR 38
40744: PUSH
40745: LD_INT 3
40747: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40748: LD_ADDR_OWVAR 40
40752: PUSH
40753: LD_INT 10
40755: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40756: LD_VAR 0 2
40760: PUSH
40761: LD_INT 1
40763: ARRAY
40764: PPUSH
40765: CALL_OW 310
40769: NOT
40770: IFFALSE 40817
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40772: CALL_OW 45
40776: PPUSH
40777: LD_VAR 0 2
40781: PUSH
40782: LD_INT 1
40784: ARRAY
40785: PPUSH
40786: CALL_OW 250
40790: PPUSH
40791: LD_VAR 0 2
40795: PUSH
40796: LD_INT 1
40798: ARRAY
40799: PPUSH
40800: CALL_OW 251
40804: PPUSH
40805: LD_INT 12
40807: PPUSH
40808: LD_INT 1
40810: PPUSH
40811: CALL_OW 50
40815: GO 40829
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
40817: CALL_OW 45
40821: PPUSH
40822: LD_INT 1
40824: PPUSH
40825: CALL_OW 51
// end ;
40829: GO 40703
40831: POP
40832: POP
// end ;
40833: PPOPN 2
40835: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
40836: LD_EXP 88
40840: PUSH
40841: LD_EXP 134
40845: AND
40846: IFFALSE 41068
40848: GO 40850
40850: DISABLE
40851: LD_INT 0
40853: PPUSH
40854: PPUSH
40855: PPUSH
40856: PPUSH
40857: PPUSH
40858: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40859: LD_ADDR_VAR 0 6
40863: PUSH
40864: LD_INT 22
40866: PUSH
40867: LD_OWVAR 2
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 21
40878: PUSH
40879: LD_INT 1
40881: PUSH
40882: EMPTY
40883: LIST
40884: LIST
40885: PUSH
40886: LD_INT 3
40888: PUSH
40889: LD_INT 23
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: EMPTY
40904: LIST
40905: LIST
40906: LIST
40907: PPUSH
40908: CALL_OW 69
40912: ST_TO_ADDR
// if not tmp then
40913: LD_VAR 0 6
40917: NOT
40918: IFFALSE 40922
// exit ;
40920: GO 41068
// s1 := rand ( 1 , 4 ) ;
40922: LD_ADDR_VAR 0 2
40926: PUSH
40927: LD_INT 1
40929: PPUSH
40930: LD_INT 4
40932: PPUSH
40933: CALL_OW 12
40937: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
40938: LD_ADDR_VAR 0 4
40942: PUSH
40943: LD_VAR 0 6
40947: PUSH
40948: LD_INT 1
40950: ARRAY
40951: PPUSH
40952: LD_VAR 0 2
40956: PPUSH
40957: CALL_OW 259
40961: ST_TO_ADDR
// if s1 = 1 then
40962: LD_VAR 0 2
40966: PUSH
40967: LD_INT 1
40969: EQUAL
40970: IFFALSE 40990
// s2 := rand ( 2 , 4 ) else
40972: LD_ADDR_VAR 0 3
40976: PUSH
40977: LD_INT 2
40979: PPUSH
40980: LD_INT 4
40982: PPUSH
40983: CALL_OW 12
40987: ST_TO_ADDR
40988: GO 40998
// s2 := 1 ;
40990: LD_ADDR_VAR 0 3
40994: PUSH
40995: LD_INT 1
40997: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
40998: LD_ADDR_VAR 0 5
41002: PUSH
41003: LD_VAR 0 6
41007: PUSH
41008: LD_INT 1
41010: ARRAY
41011: PPUSH
41012: LD_VAR 0 3
41016: PPUSH
41017: CALL_OW 259
41021: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
41022: LD_VAR 0 6
41026: PUSH
41027: LD_INT 1
41029: ARRAY
41030: PPUSH
41031: LD_VAR 0 2
41035: PPUSH
41036: LD_VAR 0 5
41040: PPUSH
41041: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
41045: LD_VAR 0 6
41049: PUSH
41050: LD_INT 1
41052: ARRAY
41053: PPUSH
41054: LD_VAR 0 3
41058: PPUSH
41059: LD_VAR 0 4
41063: PPUSH
41064: CALL_OW 237
// end ;
41068: PPOPN 6
41070: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
41071: LD_EXP 88
41075: PUSH
41076: LD_EXP 135
41080: AND
41081: IFFALSE 41160
41083: GO 41085
41085: DISABLE
41086: LD_INT 0
41088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
41089: LD_ADDR_VAR 0 1
41093: PUSH
41094: LD_INT 22
41096: PUSH
41097: LD_OWVAR 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 30
41108: PUSH
41109: LD_INT 3
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PPUSH
41120: CALL_OW 69
41124: ST_TO_ADDR
// if not tmp then
41125: LD_VAR 0 1
41129: NOT
41130: IFFALSE 41134
// exit ;
41132: GO 41160
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
41134: LD_VAR 0 1
41138: PUSH
41139: LD_INT 1
41141: PPUSH
41142: LD_VAR 0 1
41146: PPUSH
41147: CALL_OW 12
41151: ARRAY
41152: PPUSH
41153: LD_INT 1
41155: PPUSH
41156: CALL_OW 234
// end ;
41160: PPOPN 1
41162: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
41163: LD_EXP 88
41167: PUSH
41168: LD_EXP 136
41172: AND
41173: IFFALSE 41285
41175: GO 41177
41177: DISABLE
41178: LD_INT 0
41180: PPUSH
41181: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
41182: LD_ADDR_VAR 0 2
41186: PUSH
41187: LD_INT 22
41189: PUSH
41190: LD_OWVAR 2
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: LD_INT 30
41204: PUSH
41205: LD_INT 27
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 30
41214: PUSH
41215: LD_INT 26
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: PUSH
41222: LD_INT 30
41224: PUSH
41225: LD_INT 28
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PPUSH
41242: CALL_OW 69
41246: ST_TO_ADDR
// if not tmp then
41247: LD_VAR 0 2
41251: NOT
41252: IFFALSE 41256
// exit ;
41254: GO 41285
// for i in tmp do
41256: LD_ADDR_VAR 0 1
41260: PUSH
41261: LD_VAR 0 2
41265: PUSH
41266: FOR_IN
41267: IFFALSE 41283
// SetLives ( i , 1 ) ;
41269: LD_VAR 0 1
41273: PPUSH
41274: LD_INT 1
41276: PPUSH
41277: CALL_OW 234
41281: GO 41266
41283: POP
41284: POP
// end ;
41285: PPOPN 2
41287: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
41288: LD_EXP 88
41292: PUSH
41293: LD_EXP 137
41297: AND
41298: IFFALSE 41585
41300: GO 41302
41302: DISABLE
41303: LD_INT 0
41305: PPUSH
41306: PPUSH
41307: PPUSH
// begin i := rand ( 1 , 7 ) ;
41308: LD_ADDR_VAR 0 1
41312: PUSH
41313: LD_INT 1
41315: PPUSH
41316: LD_INT 7
41318: PPUSH
41319: CALL_OW 12
41323: ST_TO_ADDR
// case i of 1 :
41324: LD_VAR 0 1
41328: PUSH
41329: LD_INT 1
41331: DOUBLE
41332: EQUAL
41333: IFTRUE 41337
41335: GO 41347
41337: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
41338: LD_STRING earthquake(getX(game), 0, 32)
41340: PPUSH
41341: CALL_OW 559
41345: GO 41585
41347: LD_INT 2
41349: DOUBLE
41350: EQUAL
41351: IFTRUE 41355
41353: GO 41369
41355: POP
// begin ToLua ( displayStucuk(); ) ;
41356: LD_STRING displayStucuk();
41358: PPUSH
41359: CALL_OW 559
// ResetFog ;
41363: CALL_OW 335
// end ; 3 :
41367: GO 41585
41369: LD_INT 3
41371: DOUBLE
41372: EQUAL
41373: IFTRUE 41377
41375: GO 41481
41377: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41378: LD_ADDR_VAR 0 2
41382: PUSH
41383: LD_INT 22
41385: PUSH
41386: LD_OWVAR 2
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 25
41397: PUSH
41398: LD_INT 1
41400: PUSH
41401: EMPTY
41402: LIST
41403: LIST
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PPUSH
41409: CALL_OW 69
41413: ST_TO_ADDR
// if not tmp then
41414: LD_VAR 0 2
41418: NOT
41419: IFFALSE 41423
// exit ;
41421: GO 41585
// un := tmp [ rand ( 1 , tmp ) ] ;
41423: LD_ADDR_VAR 0 3
41427: PUSH
41428: LD_VAR 0 2
41432: PUSH
41433: LD_INT 1
41435: PPUSH
41436: LD_VAR 0 2
41440: PPUSH
41441: CALL_OW 12
41445: ARRAY
41446: ST_TO_ADDR
// if Crawls ( un ) then
41447: LD_VAR 0 3
41451: PPUSH
41452: CALL_OW 318
41456: IFFALSE 41467
// ComWalk ( un ) ;
41458: LD_VAR 0 3
41462: PPUSH
41463: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41467: LD_VAR 0 3
41471: PPUSH
41472: LD_INT 8
41474: PPUSH
41475: CALL_OW 336
// end ; 4 :
41479: GO 41585
41481: LD_INT 4
41483: DOUBLE
41484: EQUAL
41485: IFTRUE 41489
41487: GO 41563
41489: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41490: LD_ADDR_VAR 0 2
41494: PUSH
41495: LD_INT 22
41497: PUSH
41498: LD_OWVAR 2
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 30
41509: PUSH
41510: LD_INT 29
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: PPUSH
41521: CALL_OW 69
41525: ST_TO_ADDR
// if not tmp then
41526: LD_VAR 0 2
41530: NOT
41531: IFFALSE 41535
// exit ;
41533: GO 41585
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41535: LD_VAR 0 2
41539: PUSH
41540: LD_INT 1
41542: ARRAY
41543: PPUSH
41544: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41548: LD_VAR 0 2
41552: PUSH
41553: LD_INT 1
41555: ARRAY
41556: PPUSH
41557: CALL_OW 65
// end ; 5 .. 7 :
41561: GO 41585
41563: LD_INT 5
41565: DOUBLE
41566: GREATEREQUAL
41567: IFFALSE 41575
41569: LD_INT 7
41571: DOUBLE
41572: LESSEQUAL
41573: IFTRUE 41577
41575: GO 41584
41577: POP
// StreamSibBomb ; end ;
41578: CALL 37822 0 0
41582: GO 41585
41584: POP
// end ;
41585: PPOPN 3
41587: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41588: LD_EXP 88
41592: PUSH
41593: LD_EXP 138
41597: AND
41598: IFFALSE 41754
41600: GO 41602
41602: DISABLE
41603: LD_INT 0
41605: PPUSH
41606: PPUSH
41607: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41608: LD_ADDR_VAR 0 2
41612: PUSH
41613: LD_INT 81
41615: PUSH
41616: LD_OWVAR 2
41620: PUSH
41621: EMPTY
41622: LIST
41623: LIST
41624: PUSH
41625: LD_INT 2
41627: PUSH
41628: LD_INT 21
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: PUSH
41638: LD_INT 21
41640: PUSH
41641: LD_INT 2
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: LIST
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: PPUSH
41657: CALL_OW 69
41661: ST_TO_ADDR
// if not tmp then
41662: LD_VAR 0 2
41666: NOT
41667: IFFALSE 41671
// exit ;
41669: GO 41754
// p := 0 ;
41671: LD_ADDR_VAR 0 3
41675: PUSH
41676: LD_INT 0
41678: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41679: LD_INT 35
41681: PPUSH
41682: CALL_OW 67
// p := p + 1 ;
41686: LD_ADDR_VAR 0 3
41690: PUSH
41691: LD_VAR 0 3
41695: PUSH
41696: LD_INT 1
41698: PLUS
41699: ST_TO_ADDR
// for i in tmp do
41700: LD_ADDR_VAR 0 1
41704: PUSH
41705: LD_VAR 0 2
41709: PUSH
41710: FOR_IN
41711: IFFALSE 41742
// if GetLives ( i ) < 1000 then
41713: LD_VAR 0 1
41717: PPUSH
41718: CALL_OW 256
41722: PUSH
41723: LD_INT 1000
41725: LESS
41726: IFFALSE 41740
// SetLives ( i , 1000 ) ;
41728: LD_VAR 0 1
41732: PPUSH
41733: LD_INT 1000
41735: PPUSH
41736: CALL_OW 234
41740: GO 41710
41742: POP
41743: POP
// until p > 20 ;
41744: LD_VAR 0 3
41748: PUSH
41749: LD_INT 20
41751: GREATER
41752: IFFALSE 41679
// end ;
41754: PPOPN 3
41756: END
// every 0 0$1 trigger StreamModeActive and sTime do
41757: LD_EXP 88
41761: PUSH
41762: LD_EXP 139
41766: AND
41767: IFFALSE 41802
41769: GO 41771
41771: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41772: LD_INT 28
41774: PPUSH
41775: LD_OWVAR 2
41779: PPUSH
41780: LD_INT 2
41782: PPUSH
41783: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
41787: LD_INT 30
41789: PPUSH
41790: LD_OWVAR 2
41794: PPUSH
41795: LD_INT 2
41797: PPUSH
41798: CALL_OW 322
// end ;
41802: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
41803: LD_EXP 88
41807: PUSH
41808: LD_EXP 140
41812: AND
41813: IFFALSE 41934
41815: GO 41817
41817: DISABLE
41818: LD_INT 0
41820: PPUSH
41821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41822: LD_ADDR_VAR 0 2
41826: PUSH
41827: LD_INT 22
41829: PUSH
41830: LD_OWVAR 2
41834: PUSH
41835: EMPTY
41836: LIST
41837: LIST
41838: PUSH
41839: LD_INT 21
41841: PUSH
41842: LD_INT 1
41844: PUSH
41845: EMPTY
41846: LIST
41847: LIST
41848: PUSH
41849: LD_INT 3
41851: PUSH
41852: LD_INT 23
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: LIST
41870: PPUSH
41871: CALL_OW 69
41875: ST_TO_ADDR
// if not tmp then
41876: LD_VAR 0 2
41880: NOT
41881: IFFALSE 41885
// exit ;
41883: GO 41934
// for i in tmp do
41885: LD_ADDR_VAR 0 1
41889: PUSH
41890: LD_VAR 0 2
41894: PUSH
41895: FOR_IN
41896: IFFALSE 41932
// begin if Crawls ( i ) then
41898: LD_VAR 0 1
41902: PPUSH
41903: CALL_OW 318
41907: IFFALSE 41918
// ComWalk ( i ) ;
41909: LD_VAR 0 1
41913: PPUSH
41914: CALL_OW 138
// SetClass ( i , 2 ) ;
41918: LD_VAR 0 1
41922: PPUSH
41923: LD_INT 2
41925: PPUSH
41926: CALL_OW 336
// end ;
41930: GO 41895
41932: POP
41933: POP
// end ;
41934: PPOPN 2
41936: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
41937: LD_EXP 88
41941: PUSH
41942: LD_EXP 141
41946: AND
41947: IFFALSE 42235
41949: GO 41951
41951: DISABLE
41952: LD_INT 0
41954: PPUSH
41955: PPUSH
41956: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
41957: LD_OWVAR 2
41961: PPUSH
41962: LD_INT 9
41964: PPUSH
41965: LD_INT 1
41967: PPUSH
41968: LD_INT 1
41970: PPUSH
41971: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
41975: LD_INT 9
41977: PPUSH
41978: LD_OWVAR 2
41982: PPUSH
41983: CALL_OW 343
// uc_side := 9 ;
41987: LD_ADDR_OWVAR 20
41991: PUSH
41992: LD_INT 9
41994: ST_TO_ADDR
// uc_nation := 2 ;
41995: LD_ADDR_OWVAR 21
41999: PUSH
42000: LD_INT 2
42002: ST_TO_ADDR
// hc_name := Dark Warrior ;
42003: LD_ADDR_OWVAR 26
42007: PUSH
42008: LD_STRING Dark Warrior
42010: ST_TO_ADDR
// hc_gallery :=  ;
42011: LD_ADDR_OWVAR 33
42015: PUSH
42016: LD_STRING 
42018: ST_TO_ADDR
// hc_noskilllimit := true ;
42019: LD_ADDR_OWVAR 76
42023: PUSH
42024: LD_INT 1
42026: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
42027: LD_ADDR_OWVAR 31
42031: PUSH
42032: LD_INT 30
42034: PUSH
42035: LD_INT 30
42037: PUSH
42038: LD_INT 30
42040: PUSH
42041: LD_INT 30
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: LIST
42048: LIST
42049: ST_TO_ADDR
// un := CreateHuman ;
42050: LD_ADDR_VAR 0 3
42054: PUSH
42055: CALL_OW 44
42059: ST_TO_ADDR
// hc_noskilllimit := false ;
42060: LD_ADDR_OWVAR 76
42064: PUSH
42065: LD_INT 0
42067: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
42068: LD_VAR 0 3
42072: PPUSH
42073: LD_INT 1
42075: PPUSH
42076: CALL_OW 51
// ToLua ( playRanger() ) ;
42080: LD_STRING playRanger()
42082: PPUSH
42083: CALL_OW 559
// p := 0 ;
42087: LD_ADDR_VAR 0 2
42091: PUSH
42092: LD_INT 0
42094: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42095: LD_INT 35
42097: PPUSH
42098: CALL_OW 67
// p := p + 1 ;
42102: LD_ADDR_VAR 0 2
42106: PUSH
42107: LD_VAR 0 2
42111: PUSH
42112: LD_INT 1
42114: PLUS
42115: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
42116: LD_VAR 0 3
42120: PPUSH
42121: CALL_OW 256
42125: PUSH
42126: LD_INT 1000
42128: LESS
42129: IFFALSE 42143
// SetLives ( un , 1000 ) ;
42131: LD_VAR 0 3
42135: PPUSH
42136: LD_INT 1000
42138: PPUSH
42139: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
42143: LD_VAR 0 3
42147: PPUSH
42148: LD_INT 81
42150: PUSH
42151: LD_OWVAR 2
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 91
42162: PUSH
42163: LD_VAR 0 3
42167: PUSH
42168: LD_INT 30
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: LIST
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PPUSH
42180: CALL_OW 69
42184: PPUSH
42185: LD_VAR 0 3
42189: PPUSH
42190: CALL_OW 74
42194: PPUSH
42195: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
42199: LD_VAR 0 2
42203: PUSH
42204: LD_INT 80
42206: GREATER
42207: PUSH
42208: LD_VAR 0 3
42212: PPUSH
42213: CALL_OW 301
42217: OR
42218: IFFALSE 42095
// if un then
42220: LD_VAR 0 3
42224: IFFALSE 42235
// RemoveUnit ( un ) ;
42226: LD_VAR 0 3
42230: PPUSH
42231: CALL_OW 64
// end ;
42235: PPOPN 3
42237: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
42238: LD_EXP 142
42242: IFFALSE 42358
42244: GO 42246
42246: DISABLE
42247: LD_INT 0
42249: PPUSH
42250: PPUSH
42251: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
42252: LD_ADDR_VAR 0 2
42256: PUSH
42257: LD_INT 81
42259: PUSH
42260: LD_OWVAR 2
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 21
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: EMPTY
42280: LIST
42281: LIST
42282: PPUSH
42283: CALL_OW 69
42287: ST_TO_ADDR
// ToLua ( playComputer() ) ;
42288: LD_STRING playComputer()
42290: PPUSH
42291: CALL_OW 559
// if not tmp then
42295: LD_VAR 0 2
42299: NOT
42300: IFFALSE 42304
// exit ;
42302: GO 42358
// for i in tmp do
42304: LD_ADDR_VAR 0 1
42308: PUSH
42309: LD_VAR 0 2
42313: PUSH
42314: FOR_IN
42315: IFFALSE 42356
// for j := 1 to 4 do
42317: LD_ADDR_VAR 0 3
42321: PUSH
42322: DOUBLE
42323: LD_INT 1
42325: DEC
42326: ST_TO_ADDR
42327: LD_INT 4
42329: PUSH
42330: FOR_TO
42331: IFFALSE 42352
// SetSkill ( i , j , 10 ) ;
42333: LD_VAR 0 1
42337: PPUSH
42338: LD_VAR 0 3
42342: PPUSH
42343: LD_INT 10
42345: PPUSH
42346: CALL_OW 237
42350: GO 42330
42352: POP
42353: POP
42354: GO 42314
42356: POP
42357: POP
// end ;
42358: PPOPN 3
42360: END
// every 0 0$1 trigger s30 do var i , tmp ;
42361: LD_EXP 143
42365: IFFALSE 42434
42367: GO 42369
42369: DISABLE
42370: LD_INT 0
42372: PPUSH
42373: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42374: LD_ADDR_VAR 0 2
42378: PUSH
42379: LD_INT 22
42381: PUSH
42382: LD_OWVAR 2
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PPUSH
42391: CALL_OW 69
42395: ST_TO_ADDR
// if not tmp then
42396: LD_VAR 0 2
42400: NOT
42401: IFFALSE 42405
// exit ;
42403: GO 42434
// for i in tmp do
42405: LD_ADDR_VAR 0 1
42409: PUSH
42410: LD_VAR 0 2
42414: PUSH
42415: FOR_IN
42416: IFFALSE 42432
// SetLives ( i , 300 ) ;
42418: LD_VAR 0 1
42422: PPUSH
42423: LD_INT 300
42425: PPUSH
42426: CALL_OW 234
42430: GO 42415
42432: POP
42433: POP
// end ;
42434: PPOPN 2
42436: END
// every 0 0$1 trigger s60 do var i , tmp ;
42437: LD_EXP 144
42441: IFFALSE 42510
42443: GO 42445
42445: DISABLE
42446: LD_INT 0
42448: PPUSH
42449: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42450: LD_ADDR_VAR 0 2
42454: PUSH
42455: LD_INT 22
42457: PUSH
42458: LD_OWVAR 2
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PPUSH
42467: CALL_OW 69
42471: ST_TO_ADDR
// if not tmp then
42472: LD_VAR 0 2
42476: NOT
42477: IFFALSE 42481
// exit ;
42479: GO 42510
// for i in tmp do
42481: LD_ADDR_VAR 0 1
42485: PUSH
42486: LD_VAR 0 2
42490: PUSH
42491: FOR_IN
42492: IFFALSE 42508
// SetLives ( i , 600 ) ;
42494: LD_VAR 0 1
42498: PPUSH
42499: LD_INT 600
42501: PPUSH
42502: CALL_OW 234
42506: GO 42491
42508: POP
42509: POP
// end ;
42510: PPOPN 2
42512: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42513: LD_INT 0
42515: PPUSH
// case cmd of 301 :
42516: LD_VAR 0 1
42520: PUSH
42521: LD_INT 301
42523: DOUBLE
42524: EQUAL
42525: IFTRUE 42529
42527: GO 42561
42529: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42530: LD_VAR 0 6
42534: PPUSH
42535: LD_VAR 0 7
42539: PPUSH
42540: LD_VAR 0 8
42544: PPUSH
42545: LD_VAR 0 4
42549: PPUSH
42550: LD_VAR 0 5
42554: PPUSH
42555: CALL 43762 0 5
42559: GO 42682
42561: LD_INT 302
42563: DOUBLE
42564: EQUAL
42565: IFTRUE 42569
42567: GO 42606
42569: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42570: LD_VAR 0 6
42574: PPUSH
42575: LD_VAR 0 7
42579: PPUSH
42580: LD_VAR 0 8
42584: PPUSH
42585: LD_VAR 0 9
42589: PPUSH
42590: LD_VAR 0 4
42594: PPUSH
42595: LD_VAR 0 5
42599: PPUSH
42600: CALL 43853 0 6
42604: GO 42682
42606: LD_INT 303
42608: DOUBLE
42609: EQUAL
42610: IFTRUE 42614
42612: GO 42651
42614: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42615: LD_VAR 0 6
42619: PPUSH
42620: LD_VAR 0 7
42624: PPUSH
42625: LD_VAR 0 8
42629: PPUSH
42630: LD_VAR 0 9
42634: PPUSH
42635: LD_VAR 0 4
42639: PPUSH
42640: LD_VAR 0 5
42644: PPUSH
42645: CALL 42687 0 6
42649: GO 42682
42651: LD_INT 304
42653: DOUBLE
42654: EQUAL
42655: IFTRUE 42659
42657: GO 42681
42659: POP
// hHackTeleport ( unit , x , y ) ; end ;
42660: LD_VAR 0 2
42664: PPUSH
42665: LD_VAR 0 4
42669: PPUSH
42670: LD_VAR 0 5
42674: PPUSH
42675: CALL 44446 0 3
42679: GO 42682
42681: POP
// end ;
42682: LD_VAR 0 12
42686: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42687: LD_INT 0
42689: PPUSH
42690: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42691: LD_VAR 0 1
42695: PUSH
42696: LD_INT 1
42698: LESS
42699: PUSH
42700: LD_VAR 0 1
42704: PUSH
42705: LD_INT 3
42707: GREATER
42708: OR
42709: PUSH
42710: LD_VAR 0 5
42714: PPUSH
42715: LD_VAR 0 6
42719: PPUSH
42720: CALL_OW 428
42724: OR
42725: IFFALSE 42729
// exit ;
42727: GO 43449
// uc_side := your_side ;
42729: LD_ADDR_OWVAR 20
42733: PUSH
42734: LD_OWVAR 2
42738: ST_TO_ADDR
// uc_nation := nation ;
42739: LD_ADDR_OWVAR 21
42743: PUSH
42744: LD_VAR 0 1
42748: ST_TO_ADDR
// bc_level = 1 ;
42749: LD_ADDR_OWVAR 43
42753: PUSH
42754: LD_INT 1
42756: ST_TO_ADDR
// case btype of 1 :
42757: LD_VAR 0 2
42761: PUSH
42762: LD_INT 1
42764: DOUBLE
42765: EQUAL
42766: IFTRUE 42770
42768: GO 42781
42770: POP
// bc_type := b_depot ; 2 :
42771: LD_ADDR_OWVAR 42
42775: PUSH
42776: LD_INT 0
42778: ST_TO_ADDR
42779: GO 43393
42781: LD_INT 2
42783: DOUBLE
42784: EQUAL
42785: IFTRUE 42789
42787: GO 42800
42789: POP
// bc_type := b_warehouse ; 3 :
42790: LD_ADDR_OWVAR 42
42794: PUSH
42795: LD_INT 1
42797: ST_TO_ADDR
42798: GO 43393
42800: LD_INT 3
42802: DOUBLE
42803: EQUAL
42804: IFTRUE 42808
42806: GO 42819
42808: POP
// bc_type := b_lab ; 4 .. 9 :
42809: LD_ADDR_OWVAR 42
42813: PUSH
42814: LD_INT 6
42816: ST_TO_ADDR
42817: GO 43393
42819: LD_INT 4
42821: DOUBLE
42822: GREATEREQUAL
42823: IFFALSE 42831
42825: LD_INT 9
42827: DOUBLE
42828: LESSEQUAL
42829: IFTRUE 42833
42831: GO 42885
42833: POP
// begin bc_type := b_lab_half ;
42834: LD_ADDR_OWVAR 42
42838: PUSH
42839: LD_INT 7
42841: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
42842: LD_ADDR_OWVAR 44
42846: PUSH
42847: LD_INT 10
42849: PUSH
42850: LD_INT 11
42852: PUSH
42853: LD_INT 12
42855: PUSH
42856: LD_INT 15
42858: PUSH
42859: LD_INT 14
42861: PUSH
42862: LD_INT 13
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: PUSH
42873: LD_VAR 0 2
42877: PUSH
42878: LD_INT 3
42880: MINUS
42881: ARRAY
42882: ST_TO_ADDR
// end ; 10 .. 13 :
42883: GO 43393
42885: LD_INT 10
42887: DOUBLE
42888: GREATEREQUAL
42889: IFFALSE 42897
42891: LD_INT 13
42893: DOUBLE
42894: LESSEQUAL
42895: IFTRUE 42899
42897: GO 42976
42899: POP
// begin bc_type := b_lab_full ;
42900: LD_ADDR_OWVAR 42
42904: PUSH
42905: LD_INT 8
42907: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
42908: LD_ADDR_OWVAR 44
42912: PUSH
42913: LD_INT 10
42915: PUSH
42916: LD_INT 12
42918: PUSH
42919: LD_INT 14
42921: PUSH
42922: LD_INT 13
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: PUSH
42931: LD_VAR 0 2
42935: PUSH
42936: LD_INT 9
42938: MINUS
42939: ARRAY
42940: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
42941: LD_ADDR_OWVAR 45
42945: PUSH
42946: LD_INT 11
42948: PUSH
42949: LD_INT 15
42951: PUSH
42952: LD_INT 12
42954: PUSH
42955: LD_INT 15
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: PUSH
42964: LD_VAR 0 2
42968: PUSH
42969: LD_INT 9
42971: MINUS
42972: ARRAY
42973: ST_TO_ADDR
// end ; 14 :
42974: GO 43393
42976: LD_INT 14
42978: DOUBLE
42979: EQUAL
42980: IFTRUE 42984
42982: GO 42995
42984: POP
// bc_type := b_workshop ; 15 :
42985: LD_ADDR_OWVAR 42
42989: PUSH
42990: LD_INT 2
42992: ST_TO_ADDR
42993: GO 43393
42995: LD_INT 15
42997: DOUBLE
42998: EQUAL
42999: IFTRUE 43003
43001: GO 43014
43003: POP
// bc_type := b_factory ; 16 :
43004: LD_ADDR_OWVAR 42
43008: PUSH
43009: LD_INT 3
43011: ST_TO_ADDR
43012: GO 43393
43014: LD_INT 16
43016: DOUBLE
43017: EQUAL
43018: IFTRUE 43022
43020: GO 43033
43022: POP
// bc_type := b_ext_gun ; 17 :
43023: LD_ADDR_OWVAR 42
43027: PUSH
43028: LD_INT 17
43030: ST_TO_ADDR
43031: GO 43393
43033: LD_INT 17
43035: DOUBLE
43036: EQUAL
43037: IFTRUE 43041
43039: GO 43069
43041: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
43042: LD_ADDR_OWVAR 42
43046: PUSH
43047: LD_INT 19
43049: PUSH
43050: LD_INT 23
43052: PUSH
43053: LD_INT 19
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: LIST
43060: PUSH
43061: LD_VAR 0 1
43065: ARRAY
43066: ST_TO_ADDR
43067: GO 43393
43069: LD_INT 18
43071: DOUBLE
43072: EQUAL
43073: IFTRUE 43077
43075: GO 43088
43077: POP
// bc_type := b_ext_radar ; 19 :
43078: LD_ADDR_OWVAR 42
43082: PUSH
43083: LD_INT 20
43085: ST_TO_ADDR
43086: GO 43393
43088: LD_INT 19
43090: DOUBLE
43091: EQUAL
43092: IFTRUE 43096
43094: GO 43107
43096: POP
// bc_type := b_ext_radio ; 20 :
43097: LD_ADDR_OWVAR 42
43101: PUSH
43102: LD_INT 22
43104: ST_TO_ADDR
43105: GO 43393
43107: LD_INT 20
43109: DOUBLE
43110: EQUAL
43111: IFTRUE 43115
43113: GO 43126
43115: POP
// bc_type := b_ext_siberium ; 21 :
43116: LD_ADDR_OWVAR 42
43120: PUSH
43121: LD_INT 21
43123: ST_TO_ADDR
43124: GO 43393
43126: LD_INT 21
43128: DOUBLE
43129: EQUAL
43130: IFTRUE 43134
43132: GO 43145
43134: POP
// bc_type := b_ext_computer ; 22 :
43135: LD_ADDR_OWVAR 42
43139: PUSH
43140: LD_INT 24
43142: ST_TO_ADDR
43143: GO 43393
43145: LD_INT 22
43147: DOUBLE
43148: EQUAL
43149: IFTRUE 43153
43151: GO 43164
43153: POP
// bc_type := b_ext_track ; 23 :
43154: LD_ADDR_OWVAR 42
43158: PUSH
43159: LD_INT 16
43161: ST_TO_ADDR
43162: GO 43393
43164: LD_INT 23
43166: DOUBLE
43167: EQUAL
43168: IFTRUE 43172
43170: GO 43183
43172: POP
// bc_type := b_ext_laser ; 24 :
43173: LD_ADDR_OWVAR 42
43177: PUSH
43178: LD_INT 25
43180: ST_TO_ADDR
43181: GO 43393
43183: LD_INT 24
43185: DOUBLE
43186: EQUAL
43187: IFTRUE 43191
43189: GO 43202
43191: POP
// bc_type := b_control_tower ; 25 :
43192: LD_ADDR_OWVAR 42
43196: PUSH
43197: LD_INT 36
43199: ST_TO_ADDR
43200: GO 43393
43202: LD_INT 25
43204: DOUBLE
43205: EQUAL
43206: IFTRUE 43210
43208: GO 43221
43210: POP
// bc_type := b_breastwork ; 26 :
43211: LD_ADDR_OWVAR 42
43215: PUSH
43216: LD_INT 31
43218: ST_TO_ADDR
43219: GO 43393
43221: LD_INT 26
43223: DOUBLE
43224: EQUAL
43225: IFTRUE 43229
43227: GO 43240
43229: POP
// bc_type := b_bunker ; 27 :
43230: LD_ADDR_OWVAR 42
43234: PUSH
43235: LD_INT 32
43237: ST_TO_ADDR
43238: GO 43393
43240: LD_INT 27
43242: DOUBLE
43243: EQUAL
43244: IFTRUE 43248
43246: GO 43259
43248: POP
// bc_type := b_turret ; 28 :
43249: LD_ADDR_OWVAR 42
43253: PUSH
43254: LD_INT 33
43256: ST_TO_ADDR
43257: GO 43393
43259: LD_INT 28
43261: DOUBLE
43262: EQUAL
43263: IFTRUE 43267
43265: GO 43278
43267: POP
// bc_type := b_armoury ; 29 :
43268: LD_ADDR_OWVAR 42
43272: PUSH
43273: LD_INT 4
43275: ST_TO_ADDR
43276: GO 43393
43278: LD_INT 29
43280: DOUBLE
43281: EQUAL
43282: IFTRUE 43286
43284: GO 43297
43286: POP
// bc_type := b_barracks ; 30 :
43287: LD_ADDR_OWVAR 42
43291: PUSH
43292: LD_INT 5
43294: ST_TO_ADDR
43295: GO 43393
43297: LD_INT 30
43299: DOUBLE
43300: EQUAL
43301: IFTRUE 43305
43303: GO 43316
43305: POP
// bc_type := b_solar_power ; 31 :
43306: LD_ADDR_OWVAR 42
43310: PUSH
43311: LD_INT 27
43313: ST_TO_ADDR
43314: GO 43393
43316: LD_INT 31
43318: DOUBLE
43319: EQUAL
43320: IFTRUE 43324
43322: GO 43335
43324: POP
// bc_type := b_oil_power ; 32 :
43325: LD_ADDR_OWVAR 42
43329: PUSH
43330: LD_INT 26
43332: ST_TO_ADDR
43333: GO 43393
43335: LD_INT 32
43337: DOUBLE
43338: EQUAL
43339: IFTRUE 43343
43341: GO 43354
43343: POP
// bc_type := b_siberite_power ; 33 :
43344: LD_ADDR_OWVAR 42
43348: PUSH
43349: LD_INT 28
43351: ST_TO_ADDR
43352: GO 43393
43354: LD_INT 33
43356: DOUBLE
43357: EQUAL
43358: IFTRUE 43362
43360: GO 43373
43362: POP
// bc_type := b_oil_mine ; 34 :
43363: LD_ADDR_OWVAR 42
43367: PUSH
43368: LD_INT 29
43370: ST_TO_ADDR
43371: GO 43393
43373: LD_INT 34
43375: DOUBLE
43376: EQUAL
43377: IFTRUE 43381
43379: GO 43392
43381: POP
// bc_type := b_siberite_mine ; end ;
43382: LD_ADDR_OWVAR 42
43386: PUSH
43387: LD_INT 30
43389: ST_TO_ADDR
43390: GO 43393
43392: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43393: LD_ADDR_VAR 0 8
43397: PUSH
43398: LD_VAR 0 5
43402: PPUSH
43403: LD_VAR 0 6
43407: PPUSH
43408: LD_VAR 0 3
43412: PPUSH
43413: CALL_OW 47
43417: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43418: LD_OWVAR 42
43422: PUSH
43423: LD_INT 32
43425: PUSH
43426: LD_INT 33
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: IN
43433: IFFALSE 43449
// PlaceWeaponTurret ( b , weapon ) ;
43435: LD_VAR 0 8
43439: PPUSH
43440: LD_VAR 0 4
43444: PPUSH
43445: CALL_OW 431
// end ;
43449: LD_VAR 0 7
43453: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43454: LD_INT 0
43456: PPUSH
43457: PPUSH
43458: PPUSH
43459: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43460: LD_ADDR_VAR 0 4
43464: PUSH
43465: LD_INT 22
43467: PUSH
43468: LD_OWVAR 2
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: LD_INT 30
43482: PUSH
43483: LD_INT 0
43485: PUSH
43486: EMPTY
43487: LIST
43488: LIST
43489: PUSH
43490: LD_INT 30
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: LIST
43504: PUSH
43505: EMPTY
43506: LIST
43507: LIST
43508: PPUSH
43509: CALL_OW 69
43513: ST_TO_ADDR
// if not tmp then
43514: LD_VAR 0 4
43518: NOT
43519: IFFALSE 43523
// exit ;
43521: GO 43582
// for i in tmp do
43523: LD_ADDR_VAR 0 2
43527: PUSH
43528: LD_VAR 0 4
43532: PUSH
43533: FOR_IN
43534: IFFALSE 43580
// for j = 1 to 3 do
43536: LD_ADDR_VAR 0 3
43540: PUSH
43541: DOUBLE
43542: LD_INT 1
43544: DEC
43545: ST_TO_ADDR
43546: LD_INT 3
43548: PUSH
43549: FOR_TO
43550: IFFALSE 43576
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43552: LD_VAR 0 2
43556: PPUSH
43557: CALL_OW 274
43561: PPUSH
43562: LD_VAR 0 3
43566: PPUSH
43567: LD_INT 99999
43569: PPUSH
43570: CALL_OW 277
43574: GO 43549
43576: POP
43577: POP
43578: GO 43533
43580: POP
43581: POP
// end ;
43582: LD_VAR 0 1
43586: RET
// export function hHackSetLevel10 ; var i , j ; begin
43587: LD_INT 0
43589: PPUSH
43590: PPUSH
43591: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43592: LD_ADDR_VAR 0 2
43596: PUSH
43597: LD_INT 21
43599: PUSH
43600: LD_INT 1
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PPUSH
43607: CALL_OW 69
43611: PUSH
43612: FOR_IN
43613: IFFALSE 43665
// if IsSelected ( i ) then
43615: LD_VAR 0 2
43619: PPUSH
43620: CALL_OW 306
43624: IFFALSE 43663
// begin for j := 1 to 4 do
43626: LD_ADDR_VAR 0 3
43630: PUSH
43631: DOUBLE
43632: LD_INT 1
43634: DEC
43635: ST_TO_ADDR
43636: LD_INT 4
43638: PUSH
43639: FOR_TO
43640: IFFALSE 43661
// SetSkill ( i , j , 10 ) ;
43642: LD_VAR 0 2
43646: PPUSH
43647: LD_VAR 0 3
43651: PPUSH
43652: LD_INT 10
43654: PPUSH
43655: CALL_OW 237
43659: GO 43639
43661: POP
43662: POP
// end ;
43663: GO 43612
43665: POP
43666: POP
// end ;
43667: LD_VAR 0 1
43671: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43672: LD_INT 0
43674: PPUSH
43675: PPUSH
43676: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43677: LD_ADDR_VAR 0 2
43681: PUSH
43682: LD_INT 22
43684: PUSH
43685: LD_OWVAR 2
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 21
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PPUSH
43708: CALL_OW 69
43712: PUSH
43713: FOR_IN
43714: IFFALSE 43755
// begin for j := 1 to 4 do
43716: LD_ADDR_VAR 0 3
43720: PUSH
43721: DOUBLE
43722: LD_INT 1
43724: DEC
43725: ST_TO_ADDR
43726: LD_INT 4
43728: PUSH
43729: FOR_TO
43730: IFFALSE 43751
// SetSkill ( i , j , 10 ) ;
43732: LD_VAR 0 2
43736: PPUSH
43737: LD_VAR 0 3
43741: PPUSH
43742: LD_INT 10
43744: PPUSH
43745: CALL_OW 237
43749: GO 43729
43751: POP
43752: POP
// end ;
43753: GO 43713
43755: POP
43756: POP
// end ;
43757: LD_VAR 0 1
43761: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43762: LD_INT 0
43764: PPUSH
// uc_side := your_side ;
43765: LD_ADDR_OWVAR 20
43769: PUSH
43770: LD_OWVAR 2
43774: ST_TO_ADDR
// uc_nation := nation ;
43775: LD_ADDR_OWVAR 21
43779: PUSH
43780: LD_VAR 0 1
43784: ST_TO_ADDR
// InitHc ;
43785: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
43789: LD_INT 0
43791: PPUSH
43792: LD_VAR 0 2
43796: PPUSH
43797: LD_VAR 0 3
43801: PPUSH
43802: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
43806: LD_VAR 0 4
43810: PPUSH
43811: LD_VAR 0 5
43815: PPUSH
43816: CALL_OW 428
43820: PUSH
43821: LD_INT 0
43823: EQUAL
43824: IFFALSE 43848
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
43826: CALL_OW 44
43830: PPUSH
43831: LD_VAR 0 4
43835: PPUSH
43836: LD_VAR 0 5
43840: PPUSH
43841: LD_INT 1
43843: PPUSH
43844: CALL_OW 48
// end ;
43848: LD_VAR 0 6
43852: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
43853: LD_INT 0
43855: PPUSH
43856: PPUSH
// uc_side := your_side ;
43857: LD_ADDR_OWVAR 20
43861: PUSH
43862: LD_OWVAR 2
43866: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
43867: LD_VAR 0 1
43871: PUSH
43872: LD_INT 1
43874: PUSH
43875: LD_INT 2
43877: PUSH
43878: LD_INT 3
43880: PUSH
43881: LD_INT 4
43883: PUSH
43884: LD_INT 5
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: LIST
43891: LIST
43892: LIST
43893: IN
43894: IFFALSE 43906
// uc_nation := nation_american else
43896: LD_ADDR_OWVAR 21
43900: PUSH
43901: LD_INT 1
43903: ST_TO_ADDR
43904: GO 43949
// if chassis in [ 11 , 12 , 13 , 14 ] then
43906: LD_VAR 0 1
43910: PUSH
43911: LD_INT 11
43913: PUSH
43914: LD_INT 12
43916: PUSH
43917: LD_INT 13
43919: PUSH
43920: LD_INT 14
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: IN
43929: IFFALSE 43941
// uc_nation := nation_arabian else
43931: LD_ADDR_OWVAR 21
43935: PUSH
43936: LD_INT 2
43938: ST_TO_ADDR
43939: GO 43949
// uc_nation := nation_russian ;
43941: LD_ADDR_OWVAR 21
43945: PUSH
43946: LD_INT 3
43948: ST_TO_ADDR
// vc_chassis := chassis ;
43949: LD_ADDR_OWVAR 37
43953: PUSH
43954: LD_VAR 0 1
43958: ST_TO_ADDR
// vc_engine := engine ;
43959: LD_ADDR_OWVAR 39
43963: PUSH
43964: LD_VAR 0 2
43968: ST_TO_ADDR
// vc_control := control ;
43969: LD_ADDR_OWVAR 38
43973: PUSH
43974: LD_VAR 0 3
43978: ST_TO_ADDR
// vc_weapon := weapon ;
43979: LD_ADDR_OWVAR 40
43983: PUSH
43984: LD_VAR 0 4
43988: ST_TO_ADDR
// un := CreateVehicle ;
43989: LD_ADDR_VAR 0 8
43993: PUSH
43994: CALL_OW 45
43998: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
43999: LD_VAR 0 8
44003: PPUSH
44004: LD_INT 0
44006: PPUSH
44007: LD_INT 5
44009: PPUSH
44010: CALL_OW 12
44014: PPUSH
44015: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
44019: LD_VAR 0 8
44023: PPUSH
44024: LD_VAR 0 5
44028: PPUSH
44029: LD_VAR 0 6
44033: PPUSH
44034: LD_INT 1
44036: PPUSH
44037: CALL_OW 48
// end ;
44041: LD_VAR 0 7
44045: RET
// export hInvincible ; every 1 do
44046: GO 44048
44048: DISABLE
// hInvincible := [ ] ;
44049: LD_ADDR_EXP 145
44053: PUSH
44054: EMPTY
44055: ST_TO_ADDR
44056: END
// every 10 do var i ;
44057: GO 44059
44059: DISABLE
44060: LD_INT 0
44062: PPUSH
// begin enable ;
44063: ENABLE
// if not hInvincible then
44064: LD_EXP 145
44068: NOT
44069: IFFALSE 44073
// exit ;
44071: GO 44117
// for i in hInvincible do
44073: LD_ADDR_VAR 0 1
44077: PUSH
44078: LD_EXP 145
44082: PUSH
44083: FOR_IN
44084: IFFALSE 44115
// if GetLives ( i ) < 1000 then
44086: LD_VAR 0 1
44090: PPUSH
44091: CALL_OW 256
44095: PUSH
44096: LD_INT 1000
44098: LESS
44099: IFFALSE 44113
// SetLives ( i , 1000 ) ;
44101: LD_VAR 0 1
44105: PPUSH
44106: LD_INT 1000
44108: PPUSH
44109: CALL_OW 234
44113: GO 44083
44115: POP
44116: POP
// end ;
44117: PPOPN 1
44119: END
// export function hHackInvincible ; var i ; begin
44120: LD_INT 0
44122: PPUSH
44123: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
44124: LD_ADDR_VAR 0 2
44128: PUSH
44129: LD_INT 2
44131: PUSH
44132: LD_INT 21
44134: PUSH
44135: LD_INT 1
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 21
44144: PUSH
44145: LD_INT 2
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: EMPTY
44153: LIST
44154: LIST
44155: LIST
44156: PPUSH
44157: CALL_OW 69
44161: PUSH
44162: FOR_IN
44163: IFFALSE 44224
// if IsSelected ( i ) then
44165: LD_VAR 0 2
44169: PPUSH
44170: CALL_OW 306
44174: IFFALSE 44222
// begin if i in hInvincible then
44176: LD_VAR 0 2
44180: PUSH
44181: LD_EXP 145
44185: IN
44186: IFFALSE 44206
// hInvincible := hInvincible diff i else
44188: LD_ADDR_EXP 145
44192: PUSH
44193: LD_EXP 145
44197: PUSH
44198: LD_VAR 0 2
44202: DIFF
44203: ST_TO_ADDR
44204: GO 44222
// hInvincible := hInvincible union i ;
44206: LD_ADDR_EXP 145
44210: PUSH
44211: LD_EXP 145
44215: PUSH
44216: LD_VAR 0 2
44220: UNION
44221: ST_TO_ADDR
// end ;
44222: GO 44162
44224: POP
44225: POP
// end ;
44226: LD_VAR 0 1
44230: RET
// export function hHackInvisible ; var i , j ; begin
44231: LD_INT 0
44233: PPUSH
44234: PPUSH
44235: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
44236: LD_ADDR_VAR 0 2
44240: PUSH
44241: LD_INT 21
44243: PUSH
44244: LD_INT 1
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PPUSH
44251: CALL_OW 69
44255: PUSH
44256: FOR_IN
44257: IFFALSE 44281
// if IsSelected ( i ) then
44259: LD_VAR 0 2
44263: PPUSH
44264: CALL_OW 306
44268: IFFALSE 44279
// ComForceInvisible ( i ) ;
44270: LD_VAR 0 2
44274: PPUSH
44275: CALL_OW 496
44279: GO 44256
44281: POP
44282: POP
// end ;
44283: LD_VAR 0 1
44287: RET
// export function hHackChangeYourSide ; begin
44288: LD_INT 0
44290: PPUSH
// if your_side = 8 then
44291: LD_OWVAR 2
44295: PUSH
44296: LD_INT 8
44298: EQUAL
44299: IFFALSE 44311
// your_side := 0 else
44301: LD_ADDR_OWVAR 2
44305: PUSH
44306: LD_INT 0
44308: ST_TO_ADDR
44309: GO 44325
// your_side := your_side + 1 ;
44311: LD_ADDR_OWVAR 2
44315: PUSH
44316: LD_OWVAR 2
44320: PUSH
44321: LD_INT 1
44323: PLUS
44324: ST_TO_ADDR
// end ;
44325: LD_VAR 0 1
44329: RET
// export function hHackChangeUnitSide ; var i , j ; begin
44330: LD_INT 0
44332: PPUSH
44333: PPUSH
44334: PPUSH
// for i in all_units do
44335: LD_ADDR_VAR 0 2
44339: PUSH
44340: LD_OWVAR 3
44344: PUSH
44345: FOR_IN
44346: IFFALSE 44424
// if IsSelected ( i ) then
44348: LD_VAR 0 2
44352: PPUSH
44353: CALL_OW 306
44357: IFFALSE 44422
// begin j := GetSide ( i ) ;
44359: LD_ADDR_VAR 0 3
44363: PUSH
44364: LD_VAR 0 2
44368: PPUSH
44369: CALL_OW 255
44373: ST_TO_ADDR
// if j = 8 then
44374: LD_VAR 0 3
44378: PUSH
44379: LD_INT 8
44381: EQUAL
44382: IFFALSE 44394
// j := 0 else
44384: LD_ADDR_VAR 0 3
44388: PUSH
44389: LD_INT 0
44391: ST_TO_ADDR
44392: GO 44408
// j := j + 1 ;
44394: LD_ADDR_VAR 0 3
44398: PUSH
44399: LD_VAR 0 3
44403: PUSH
44404: LD_INT 1
44406: PLUS
44407: ST_TO_ADDR
// SetSide ( i , j ) ;
44408: LD_VAR 0 2
44412: PPUSH
44413: LD_VAR 0 3
44417: PPUSH
44418: CALL_OW 235
// end ;
44422: GO 44345
44424: POP
44425: POP
// end ;
44426: LD_VAR 0 1
44430: RET
// export function hHackFog ; begin
44431: LD_INT 0
44433: PPUSH
// FogOff ( true ) ;
44434: LD_INT 1
44436: PPUSH
44437: CALL_OW 344
// end ;
44441: LD_VAR 0 1
44445: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44446: LD_INT 0
44448: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44449: LD_VAR 0 1
44453: PPUSH
44454: LD_VAR 0 2
44458: PPUSH
44459: LD_VAR 0 3
44463: PPUSH
44464: LD_INT 1
44466: PPUSH
44467: LD_INT 1
44469: PPUSH
44470: CALL_OW 483
// CenterOnXY ( x , y ) ;
44474: LD_VAR 0 2
44478: PPUSH
44479: LD_VAR 0 3
44483: PPUSH
44484: CALL_OW 84
// end ;
44488: LD_VAR 0 4
44492: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
44493: LD_INT 0
44495: PPUSH
44496: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
44497: LD_VAR 0 1
44501: NOT
44502: PUSH
44503: LD_VAR 0 2
44507: PPUSH
44508: LD_VAR 0 3
44512: PPUSH
44513: CALL_OW 488
44517: NOT
44518: OR
44519: PUSH
44520: LD_VAR 0 1
44524: PPUSH
44525: CALL_OW 266
44529: PUSH
44530: LD_INT 3
44532: NONEQUAL
44533: PUSH
44534: LD_VAR 0 1
44538: PPUSH
44539: CALL_OW 247
44543: PUSH
44544: LD_INT 1
44546: EQUAL
44547: NOT
44548: AND
44549: OR
44550: IFFALSE 44554
// exit ;
44552: GO 44703
// if GetType ( factory ) = unit_human then
44554: LD_VAR 0 1
44558: PPUSH
44559: CALL_OW 247
44563: PUSH
44564: LD_INT 1
44566: EQUAL
44567: IFFALSE 44584
// factory := IsInUnit ( factory ) ;
44569: LD_ADDR_VAR 0 1
44573: PUSH
44574: LD_VAR 0 1
44578: PPUSH
44579: CALL_OW 310
44583: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
44584: LD_VAR 0 1
44588: PPUSH
44589: CALL_OW 266
44593: PUSH
44594: LD_INT 3
44596: NONEQUAL
44597: IFFALSE 44601
// exit ;
44599: GO 44703
// if HexInfo ( x , y ) = factory then
44601: LD_VAR 0 2
44605: PPUSH
44606: LD_VAR 0 3
44610: PPUSH
44611: CALL_OW 428
44615: PUSH
44616: LD_VAR 0 1
44620: EQUAL
44621: IFFALSE 44648
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
44623: LD_ADDR_EXP 146
44627: PUSH
44628: LD_EXP 146
44632: PPUSH
44633: LD_VAR 0 1
44637: PPUSH
44638: LD_INT 0
44640: PPUSH
44641: CALL_OW 1
44645: ST_TO_ADDR
44646: GO 44699
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
44648: LD_ADDR_EXP 146
44652: PUSH
44653: LD_EXP 146
44657: PPUSH
44658: LD_VAR 0 1
44662: PPUSH
44663: LD_VAR 0 1
44667: PPUSH
44668: CALL_OW 255
44672: PUSH
44673: LD_VAR 0 1
44677: PUSH
44678: LD_VAR 0 2
44682: PUSH
44683: LD_VAR 0 3
44687: PUSH
44688: EMPTY
44689: LIST
44690: LIST
44691: LIST
44692: LIST
44693: PPUSH
44694: CALL_OW 1
44698: ST_TO_ADDR
// UpdateFactoryWaypoints ;
44699: CALL 44708 0 0
// end ;
44703: LD_VAR 0 4
44707: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
44708: LD_INT 0
44710: PPUSH
44711: PPUSH
44712: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
44713: LD_STRING resetFactoryWaypoint();
44715: PPUSH
44716: CALL_OW 559
// if factoryWaypoints then
44720: LD_EXP 146
44724: IFFALSE 44850
// begin list := PrepareArray ( factoryWaypoints ) ;
44726: LD_ADDR_VAR 0 3
44730: PUSH
44731: LD_EXP 146
44735: PPUSH
44736: CALL 91282 0 1
44740: ST_TO_ADDR
// for i := 1 to list do
44741: LD_ADDR_VAR 0 2
44745: PUSH
44746: DOUBLE
44747: LD_INT 1
44749: DEC
44750: ST_TO_ADDR
44751: LD_VAR 0 3
44755: PUSH
44756: FOR_TO
44757: IFFALSE 44848
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44759: LD_STRING setFactoryWaypointXY(
44761: PUSH
44762: LD_VAR 0 3
44766: PUSH
44767: LD_VAR 0 2
44771: ARRAY
44772: PUSH
44773: LD_INT 1
44775: ARRAY
44776: STR
44777: PUSH
44778: LD_STRING ,
44780: STR
44781: PUSH
44782: LD_VAR 0 3
44786: PUSH
44787: LD_VAR 0 2
44791: ARRAY
44792: PUSH
44793: LD_INT 2
44795: ARRAY
44796: STR
44797: PUSH
44798: LD_STRING ,
44800: STR
44801: PUSH
44802: LD_VAR 0 3
44806: PUSH
44807: LD_VAR 0 2
44811: ARRAY
44812: PUSH
44813: LD_INT 3
44815: ARRAY
44816: STR
44817: PUSH
44818: LD_STRING ,
44820: STR
44821: PUSH
44822: LD_VAR 0 3
44826: PUSH
44827: LD_VAR 0 2
44831: ARRAY
44832: PUSH
44833: LD_INT 4
44835: ARRAY
44836: STR
44837: PUSH
44838: LD_STRING )
44840: STR
44841: PPUSH
44842: CALL_OW 559
44846: GO 44756
44848: POP
44849: POP
// end ; end ;
44850: LD_VAR 0 1
44854: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
44855: LD_INT 0
44857: PPUSH
// if HexInfo ( x , y ) = warehouse then
44858: LD_VAR 0 2
44862: PPUSH
44863: LD_VAR 0 3
44867: PPUSH
44868: CALL_OW 428
44872: PUSH
44873: LD_VAR 0 1
44877: EQUAL
44878: IFFALSE 44905
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
44880: LD_ADDR_EXP 147
44884: PUSH
44885: LD_EXP 147
44889: PPUSH
44890: LD_VAR 0 1
44894: PPUSH
44895: LD_INT 0
44897: PPUSH
44898: CALL_OW 1
44902: ST_TO_ADDR
44903: GO 44956
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
44905: LD_ADDR_EXP 147
44909: PUSH
44910: LD_EXP 147
44914: PPUSH
44915: LD_VAR 0 1
44919: PPUSH
44920: LD_VAR 0 1
44924: PPUSH
44925: CALL_OW 255
44929: PUSH
44930: LD_VAR 0 1
44934: PUSH
44935: LD_VAR 0 2
44939: PUSH
44940: LD_VAR 0 3
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: LIST
44949: LIST
44950: PPUSH
44951: CALL_OW 1
44955: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
44956: CALL 44965 0 0
// end ;
44960: LD_VAR 0 4
44964: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
44965: LD_INT 0
44967: PPUSH
44968: PPUSH
44969: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
44970: LD_STRING resetWarehouseGatheringPoints();
44972: PPUSH
44973: CALL_OW 559
// if warehouseGatheringPoints then
44977: LD_EXP 147
44981: IFFALSE 45107
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
44983: LD_ADDR_VAR 0 3
44987: PUSH
44988: LD_EXP 147
44992: PPUSH
44993: CALL 91282 0 1
44997: ST_TO_ADDR
// for i := 1 to list do
44998: LD_ADDR_VAR 0 2
45002: PUSH
45003: DOUBLE
45004: LD_INT 1
45006: DEC
45007: ST_TO_ADDR
45008: LD_VAR 0 3
45012: PUSH
45013: FOR_TO
45014: IFFALSE 45105
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
45016: LD_STRING setWarehouseGatheringPointXY(
45018: PUSH
45019: LD_VAR 0 3
45023: PUSH
45024: LD_VAR 0 2
45028: ARRAY
45029: PUSH
45030: LD_INT 1
45032: ARRAY
45033: STR
45034: PUSH
45035: LD_STRING ,
45037: STR
45038: PUSH
45039: LD_VAR 0 3
45043: PUSH
45044: LD_VAR 0 2
45048: ARRAY
45049: PUSH
45050: LD_INT 2
45052: ARRAY
45053: STR
45054: PUSH
45055: LD_STRING ,
45057: STR
45058: PUSH
45059: LD_VAR 0 3
45063: PUSH
45064: LD_VAR 0 2
45068: ARRAY
45069: PUSH
45070: LD_INT 3
45072: ARRAY
45073: STR
45074: PUSH
45075: LD_STRING ,
45077: STR
45078: PUSH
45079: LD_VAR 0 3
45083: PUSH
45084: LD_VAR 0 2
45088: ARRAY
45089: PUSH
45090: LD_INT 4
45092: ARRAY
45093: STR
45094: PUSH
45095: LD_STRING )
45097: STR
45098: PPUSH
45099: CALL_OW 559
45103: GO 45013
45105: POP
45106: POP
// end ; end ;
45107: LD_VAR 0 1
45111: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
45112: LD_EXP 147
45116: IFFALSE 45803
45118: GO 45120
45120: DISABLE
45121: LD_INT 0
45123: PPUSH
45124: PPUSH
45125: PPUSH
45126: PPUSH
45127: PPUSH
45128: PPUSH
45129: PPUSH
45130: PPUSH
45131: PPUSH
// begin enable ;
45132: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
45133: LD_ADDR_VAR 0 3
45137: PUSH
45138: LD_EXP 147
45142: PPUSH
45143: CALL 91282 0 1
45147: ST_TO_ADDR
// if not list then
45148: LD_VAR 0 3
45152: NOT
45153: IFFALSE 45157
// exit ;
45155: GO 45803
// for i := 1 to list do
45157: LD_ADDR_VAR 0 1
45161: PUSH
45162: DOUBLE
45163: LD_INT 1
45165: DEC
45166: ST_TO_ADDR
45167: LD_VAR 0 3
45171: PUSH
45172: FOR_TO
45173: IFFALSE 45801
// begin depot := list [ i ] [ 2 ] ;
45175: LD_ADDR_VAR 0 8
45179: PUSH
45180: LD_VAR 0 3
45184: PUSH
45185: LD_VAR 0 1
45189: ARRAY
45190: PUSH
45191: LD_INT 2
45193: ARRAY
45194: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
45195: LD_ADDR_VAR 0 5
45199: PUSH
45200: LD_VAR 0 3
45204: PUSH
45205: LD_VAR 0 1
45209: ARRAY
45210: PUSH
45211: LD_INT 1
45213: ARRAY
45214: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
45215: LD_VAR 0 8
45219: PPUSH
45220: CALL_OW 301
45224: PUSH
45225: LD_VAR 0 5
45229: PUSH
45230: LD_VAR 0 8
45234: PPUSH
45235: CALL_OW 255
45239: NONEQUAL
45240: OR
45241: IFFALSE 45270
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
45243: LD_ADDR_EXP 147
45247: PUSH
45248: LD_EXP 147
45252: PPUSH
45253: LD_VAR 0 8
45257: PPUSH
45258: LD_INT 0
45260: PPUSH
45261: CALL_OW 1
45265: ST_TO_ADDR
// exit ;
45266: POP
45267: POP
45268: GO 45803
// end ; x := list [ i ] [ 3 ] ;
45270: LD_ADDR_VAR 0 6
45274: PUSH
45275: LD_VAR 0 3
45279: PUSH
45280: LD_VAR 0 1
45284: ARRAY
45285: PUSH
45286: LD_INT 3
45288: ARRAY
45289: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
45290: LD_ADDR_VAR 0 7
45294: PUSH
45295: LD_VAR 0 3
45299: PUSH
45300: LD_VAR 0 1
45304: ARRAY
45305: PUSH
45306: LD_INT 4
45308: ARRAY
45309: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
45310: LD_ADDR_VAR 0 9
45314: PUSH
45315: LD_VAR 0 6
45319: PPUSH
45320: LD_VAR 0 7
45324: PPUSH
45325: LD_INT 16
45327: PPUSH
45328: CALL 89866 0 3
45332: ST_TO_ADDR
// if not cratesNearbyPoint then
45333: LD_VAR 0 9
45337: NOT
45338: IFFALSE 45344
// exit ;
45340: POP
45341: POP
45342: GO 45803
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
45344: LD_ADDR_VAR 0 4
45348: PUSH
45349: LD_INT 22
45351: PUSH
45352: LD_VAR 0 5
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 3
45363: PUSH
45364: LD_INT 60
45366: PUSH
45367: EMPTY
45368: LIST
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 91
45376: PUSH
45377: LD_VAR 0 8
45381: PUSH
45382: LD_INT 6
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 25
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 25
45405: PUSH
45406: LD_INT 16
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: LIST
45417: PUSH
45418: EMPTY
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: PPUSH
45424: CALL_OW 69
45428: PUSH
45429: LD_VAR 0 8
45433: PPUSH
45434: CALL_OW 313
45438: PPUSH
45439: LD_INT 3
45441: PUSH
45442: LD_INT 60
45444: PUSH
45445: EMPTY
45446: LIST
45447: PUSH
45448: EMPTY
45449: LIST
45450: LIST
45451: PUSH
45452: LD_INT 2
45454: PUSH
45455: LD_INT 25
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 25
45467: PUSH
45468: LD_INT 16
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: EMPTY
45476: LIST
45477: LIST
45478: LIST
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PPUSH
45484: CALL_OW 72
45488: UNION
45489: ST_TO_ADDR
// if tmp then
45490: LD_VAR 0 4
45494: IFFALSE 45574
// begin tmp := ShrinkArray ( tmp , 3 ) ;
45496: LD_ADDR_VAR 0 4
45500: PUSH
45501: LD_VAR 0 4
45505: PPUSH
45506: LD_INT 3
45508: PPUSH
45509: CALL 87833 0 2
45513: ST_TO_ADDR
// for j in tmp do
45514: LD_ADDR_VAR 0 2
45518: PUSH
45519: LD_VAR 0 4
45523: PUSH
45524: FOR_IN
45525: IFFALSE 45568
// begin if IsInUnit ( j ) then
45527: LD_VAR 0 2
45531: PPUSH
45532: CALL_OW 310
45536: IFFALSE 45547
// ComExit ( j ) ;
45538: LD_VAR 0 2
45542: PPUSH
45543: CALL 87916 0 1
// AddComCollect ( j , x , y ) ;
45547: LD_VAR 0 2
45551: PPUSH
45552: LD_VAR 0 6
45556: PPUSH
45557: LD_VAR 0 7
45561: PPUSH
45562: CALL_OW 177
// end ;
45566: GO 45524
45568: POP
45569: POP
// exit ;
45570: POP
45571: POP
45572: GO 45803
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
45574: LD_ADDR_VAR 0 4
45578: PUSH
45579: LD_INT 22
45581: PUSH
45582: LD_VAR 0 5
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: PUSH
45591: LD_INT 91
45593: PUSH
45594: LD_VAR 0 8
45598: PUSH
45599: LD_INT 8
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: PUSH
45610: LD_INT 34
45612: PUSH
45613: LD_INT 12
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 34
45622: PUSH
45623: LD_INT 51
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 34
45632: PUSH
45633: LD_INT 32
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 34
45642: PUSH
45643: LD_EXP 71
45647: PUSH
45648: EMPTY
45649: LIST
45650: LIST
45651: PUSH
45652: EMPTY
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: LIST
45663: PPUSH
45664: CALL_OW 69
45668: ST_TO_ADDR
// if tmp then
45669: LD_VAR 0 4
45673: IFFALSE 45799
// begin for j in tmp do
45675: LD_ADDR_VAR 0 2
45679: PUSH
45680: LD_VAR 0 4
45684: PUSH
45685: FOR_IN
45686: IFFALSE 45797
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
45688: LD_VAR 0 2
45692: PPUSH
45693: CALL_OW 262
45697: PUSH
45698: LD_INT 3
45700: EQUAL
45701: PUSH
45702: LD_VAR 0 2
45706: PPUSH
45707: CALL_OW 261
45711: PUSH
45712: LD_INT 20
45714: GREATER
45715: OR
45716: PUSH
45717: LD_VAR 0 2
45721: PPUSH
45722: CALL_OW 314
45726: NOT
45727: AND
45728: PUSH
45729: LD_VAR 0 2
45733: PPUSH
45734: CALL_OW 263
45738: PUSH
45739: LD_INT 1
45741: NONEQUAL
45742: PUSH
45743: LD_VAR 0 2
45747: PPUSH
45748: CALL_OW 311
45752: OR
45753: AND
45754: IFFALSE 45795
// begin ComCollect ( j , x , y ) ;
45756: LD_VAR 0 2
45760: PPUSH
45761: LD_VAR 0 6
45765: PPUSH
45766: LD_VAR 0 7
45770: PPUSH
45771: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
45775: LD_VAR 0 2
45779: PPUSH
45780: LD_VAR 0 8
45784: PPUSH
45785: CALL_OW 172
// exit ;
45789: POP
45790: POP
45791: POP
45792: POP
45793: GO 45803
// end ;
45795: GO 45685
45797: POP
45798: POP
// end ; end ;
45799: GO 45172
45801: POP
45802: POP
// end ; end_of_file
45803: PPOPN 9
45805: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
45806: LD_INT 0
45808: PPUSH
45809: PPUSH
45810: PPUSH
45811: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
45812: LD_VAR 0 1
45816: PPUSH
45817: CALL_OW 264
45821: PUSH
45822: LD_EXP 74
45826: EQUAL
45827: IFFALSE 45899
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
45829: LD_INT 68
45831: PPUSH
45832: LD_VAR 0 1
45836: PPUSH
45837: CALL_OW 255
45841: PPUSH
45842: CALL_OW 321
45846: PUSH
45847: LD_INT 2
45849: EQUAL
45850: IFFALSE 45862
// eff := 70 else
45852: LD_ADDR_VAR 0 4
45856: PUSH
45857: LD_INT 70
45859: ST_TO_ADDR
45860: GO 45870
// eff := 30 ;
45862: LD_ADDR_VAR 0 4
45866: PUSH
45867: LD_INT 30
45869: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
45870: LD_VAR 0 1
45874: PPUSH
45875: CALL_OW 250
45879: PPUSH
45880: LD_VAR 0 1
45884: PPUSH
45885: CALL_OW 251
45889: PPUSH
45890: LD_VAR 0 4
45894: PPUSH
45895: CALL_OW 495
// end ; end ;
45899: LD_VAR 0 2
45903: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
45904: LD_INT 0
45906: PPUSH
// end ;
45907: LD_VAR 0 4
45911: RET
// export function SOS_Command ( cmd ) ; begin
45912: LD_INT 0
45914: PPUSH
// end ;
45915: LD_VAR 0 2
45919: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
45920: LD_INT 0
45922: PPUSH
// end ;
45923: LD_VAR 0 6
45927: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
45928: LD_INT 0
45930: PPUSH
45931: PPUSH
// if not vehicle or not factory then
45932: LD_VAR 0 1
45936: NOT
45937: PUSH
45938: LD_VAR 0 2
45942: NOT
45943: OR
45944: IFFALSE 45948
// exit ;
45946: GO 46179
// if factoryWaypoints >= factory then
45948: LD_EXP 146
45952: PUSH
45953: LD_VAR 0 2
45957: GREATEREQUAL
45958: IFFALSE 46179
// if factoryWaypoints [ factory ] then
45960: LD_EXP 146
45964: PUSH
45965: LD_VAR 0 2
45969: ARRAY
45970: IFFALSE 46179
// begin if GetControl ( vehicle ) = control_manual then
45972: LD_VAR 0 1
45976: PPUSH
45977: CALL_OW 263
45981: PUSH
45982: LD_INT 1
45984: EQUAL
45985: IFFALSE 46066
// begin driver := IsDrivenBy ( vehicle ) ;
45987: LD_ADDR_VAR 0 4
45991: PUSH
45992: LD_VAR 0 1
45996: PPUSH
45997: CALL_OW 311
46001: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46002: LD_VAR 0 4
46006: PPUSH
46007: LD_EXP 146
46011: PUSH
46012: LD_VAR 0 2
46016: ARRAY
46017: PUSH
46018: LD_INT 3
46020: ARRAY
46021: PPUSH
46022: LD_EXP 146
46026: PUSH
46027: LD_VAR 0 2
46031: ARRAY
46032: PUSH
46033: LD_INT 4
46035: ARRAY
46036: PPUSH
46037: CALL_OW 171
// AddComExitVehicle ( driver ) ;
46041: LD_VAR 0 4
46045: PPUSH
46046: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
46050: LD_VAR 0 4
46054: PPUSH
46055: LD_VAR 0 2
46059: PPUSH
46060: CALL_OW 180
// end else
46064: GO 46179
// if GetControl ( vehicle ) = control_remote then
46066: LD_VAR 0 1
46070: PPUSH
46071: CALL_OW 263
46075: PUSH
46076: LD_INT 2
46078: EQUAL
46079: IFFALSE 46140
// begin wait ( 0 0$2 ) ;
46081: LD_INT 70
46083: PPUSH
46084: CALL_OW 67
// if Connect ( vehicle ) then
46088: LD_VAR 0 1
46092: PPUSH
46093: CALL 58227 0 1
46097: IFFALSE 46138
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46099: LD_VAR 0 1
46103: PPUSH
46104: LD_EXP 146
46108: PUSH
46109: LD_VAR 0 2
46113: ARRAY
46114: PUSH
46115: LD_INT 3
46117: ARRAY
46118: PPUSH
46119: LD_EXP 146
46123: PUSH
46124: LD_VAR 0 2
46128: ARRAY
46129: PUSH
46130: LD_INT 4
46132: ARRAY
46133: PPUSH
46134: CALL_OW 171
// end else
46138: GO 46179
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46140: LD_VAR 0 1
46144: PPUSH
46145: LD_EXP 146
46149: PUSH
46150: LD_VAR 0 2
46154: ARRAY
46155: PUSH
46156: LD_INT 3
46158: ARRAY
46159: PPUSH
46160: LD_EXP 146
46164: PUSH
46165: LD_VAR 0 2
46169: ARRAY
46170: PUSH
46171: LD_INT 4
46173: ARRAY
46174: PPUSH
46175: CALL_OW 171
// end ; end ;
46179: LD_VAR 0 3
46183: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
46184: LD_INT 0
46186: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
46187: LD_VAR 0 1
46191: PUSH
46192: LD_INT 250
46194: EQUAL
46195: PUSH
46196: LD_VAR 0 2
46200: PPUSH
46201: CALL_OW 264
46205: PUSH
46206: LD_EXP 77
46210: EQUAL
46211: AND
46212: IFFALSE 46233
// MinerPlaceMine ( unit , x , y ) ;
46214: LD_VAR 0 2
46218: PPUSH
46219: LD_VAR 0 4
46223: PPUSH
46224: LD_VAR 0 5
46228: PPUSH
46229: CALL 48632 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
46233: LD_VAR 0 1
46237: PUSH
46238: LD_INT 251
46240: EQUAL
46241: PUSH
46242: LD_VAR 0 2
46246: PPUSH
46247: CALL_OW 264
46251: PUSH
46252: LD_EXP 77
46256: EQUAL
46257: AND
46258: IFFALSE 46279
// MinerDetonateMine ( unit , x , y ) ;
46260: LD_VAR 0 2
46264: PPUSH
46265: LD_VAR 0 4
46269: PPUSH
46270: LD_VAR 0 5
46274: PPUSH
46275: CALL 48909 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
46279: LD_VAR 0 1
46283: PUSH
46284: LD_INT 252
46286: EQUAL
46287: PUSH
46288: LD_VAR 0 2
46292: PPUSH
46293: CALL_OW 264
46297: PUSH
46298: LD_EXP 77
46302: EQUAL
46303: AND
46304: IFFALSE 46325
// MinerCreateMinefield ( unit , x , y ) ;
46306: LD_VAR 0 2
46310: PPUSH
46311: LD_VAR 0 4
46315: PPUSH
46316: LD_VAR 0 5
46320: PPUSH
46321: CALL 49326 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
46325: LD_VAR 0 1
46329: PUSH
46330: LD_INT 253
46332: EQUAL
46333: PUSH
46334: LD_VAR 0 2
46338: PPUSH
46339: CALL_OW 257
46343: PUSH
46344: LD_INT 5
46346: EQUAL
46347: AND
46348: IFFALSE 46369
// ComBinocular ( unit , x , y ) ;
46350: LD_VAR 0 2
46354: PPUSH
46355: LD_VAR 0 4
46359: PPUSH
46360: LD_VAR 0 5
46364: PPUSH
46365: CALL 49697 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
46369: LD_VAR 0 1
46373: PUSH
46374: LD_INT 254
46376: EQUAL
46377: PUSH
46378: LD_VAR 0 2
46382: PPUSH
46383: CALL_OW 264
46387: PUSH
46388: LD_EXP 72
46392: EQUAL
46393: AND
46394: PUSH
46395: LD_VAR 0 3
46399: PPUSH
46400: CALL_OW 263
46404: PUSH
46405: LD_INT 3
46407: EQUAL
46408: AND
46409: IFFALSE 46425
// HackDestroyVehicle ( unit , selectedUnit ) ;
46411: LD_VAR 0 2
46415: PPUSH
46416: LD_VAR 0 3
46420: PPUSH
46421: CALL 47992 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
46425: LD_VAR 0 1
46429: PUSH
46430: LD_INT 255
46432: EQUAL
46433: PUSH
46434: LD_VAR 0 2
46438: PPUSH
46439: CALL_OW 264
46443: PUSH
46444: LD_INT 14
46446: PUSH
46447: LD_INT 53
46449: PUSH
46450: EMPTY
46451: LIST
46452: LIST
46453: IN
46454: AND
46455: PUSH
46456: LD_VAR 0 4
46460: PPUSH
46461: LD_VAR 0 5
46465: PPUSH
46466: CALL_OW 488
46470: AND
46471: IFFALSE 46495
// CutTreeXYR ( unit , x , y , 12 ) ;
46473: LD_VAR 0 2
46477: PPUSH
46478: LD_VAR 0 4
46482: PPUSH
46483: LD_VAR 0 5
46487: PPUSH
46488: LD_INT 12
46490: PPUSH
46491: CALL 46558 0 4
// if cmd = 256 then
46495: LD_VAR 0 1
46499: PUSH
46500: LD_INT 256
46502: EQUAL
46503: IFFALSE 46524
// SetFactoryWaypoint ( unit , x , y ) ;
46505: LD_VAR 0 2
46509: PPUSH
46510: LD_VAR 0 4
46514: PPUSH
46515: LD_VAR 0 5
46519: PPUSH
46520: CALL 44493 0 3
// if cmd = 257 then
46524: LD_VAR 0 1
46528: PUSH
46529: LD_INT 257
46531: EQUAL
46532: IFFALSE 46553
// SetWarehouseGatheringPoint ( unit , x , y ) ;
46534: LD_VAR 0 2
46538: PPUSH
46539: LD_VAR 0 4
46543: PPUSH
46544: LD_VAR 0 5
46548: PPUSH
46549: CALL 44855 0 3
// end ;
46553: LD_VAR 0 6
46557: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46558: LD_INT 0
46560: PPUSH
46561: PPUSH
46562: PPUSH
46563: PPUSH
46564: PPUSH
46565: PPUSH
46566: PPUSH
46567: PPUSH
46568: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
46569: LD_VAR 0 1
46573: NOT
46574: PUSH
46575: LD_VAR 0 2
46579: PPUSH
46580: LD_VAR 0 3
46584: PPUSH
46585: CALL_OW 488
46589: NOT
46590: OR
46591: PUSH
46592: LD_VAR 0 4
46596: NOT
46597: OR
46598: IFFALSE 46602
// exit ;
46600: GO 46942
// list := [ ] ;
46602: LD_ADDR_VAR 0 13
46606: PUSH
46607: EMPTY
46608: ST_TO_ADDR
// if x - r < 0 then
46609: LD_VAR 0 2
46613: PUSH
46614: LD_VAR 0 4
46618: MINUS
46619: PUSH
46620: LD_INT 0
46622: LESS
46623: IFFALSE 46635
// min_x := 0 else
46625: LD_ADDR_VAR 0 7
46629: PUSH
46630: LD_INT 0
46632: ST_TO_ADDR
46633: GO 46651
// min_x := x - r ;
46635: LD_ADDR_VAR 0 7
46639: PUSH
46640: LD_VAR 0 2
46644: PUSH
46645: LD_VAR 0 4
46649: MINUS
46650: ST_TO_ADDR
// if y - r < 0 then
46651: LD_VAR 0 3
46655: PUSH
46656: LD_VAR 0 4
46660: MINUS
46661: PUSH
46662: LD_INT 0
46664: LESS
46665: IFFALSE 46677
// min_y := 0 else
46667: LD_ADDR_VAR 0 8
46671: PUSH
46672: LD_INT 0
46674: ST_TO_ADDR
46675: GO 46693
// min_y := y - r ;
46677: LD_ADDR_VAR 0 8
46681: PUSH
46682: LD_VAR 0 3
46686: PUSH
46687: LD_VAR 0 4
46691: MINUS
46692: ST_TO_ADDR
// max_x := x + r ;
46693: LD_ADDR_VAR 0 9
46697: PUSH
46698: LD_VAR 0 2
46702: PUSH
46703: LD_VAR 0 4
46707: PLUS
46708: ST_TO_ADDR
// max_y := y + r ;
46709: LD_ADDR_VAR 0 10
46713: PUSH
46714: LD_VAR 0 3
46718: PUSH
46719: LD_VAR 0 4
46723: PLUS
46724: ST_TO_ADDR
// for _x = min_x to max_x do
46725: LD_ADDR_VAR 0 11
46729: PUSH
46730: DOUBLE
46731: LD_VAR 0 7
46735: DEC
46736: ST_TO_ADDR
46737: LD_VAR 0 9
46741: PUSH
46742: FOR_TO
46743: IFFALSE 46860
// for _y = min_y to max_y do
46745: LD_ADDR_VAR 0 12
46749: PUSH
46750: DOUBLE
46751: LD_VAR 0 8
46755: DEC
46756: ST_TO_ADDR
46757: LD_VAR 0 10
46761: PUSH
46762: FOR_TO
46763: IFFALSE 46856
// begin if not ValidHex ( _x , _y ) then
46765: LD_VAR 0 11
46769: PPUSH
46770: LD_VAR 0 12
46774: PPUSH
46775: CALL_OW 488
46779: NOT
46780: IFFALSE 46784
// continue ;
46782: GO 46762
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46784: LD_VAR 0 11
46788: PPUSH
46789: LD_VAR 0 12
46793: PPUSH
46794: CALL_OW 351
46798: PUSH
46799: LD_VAR 0 11
46803: PPUSH
46804: LD_VAR 0 12
46808: PPUSH
46809: CALL_OW 554
46813: AND
46814: IFFALSE 46854
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46816: LD_ADDR_VAR 0 13
46820: PUSH
46821: LD_VAR 0 13
46825: PPUSH
46826: LD_VAR 0 13
46830: PUSH
46831: LD_INT 1
46833: PLUS
46834: PPUSH
46835: LD_VAR 0 11
46839: PUSH
46840: LD_VAR 0 12
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: PPUSH
46849: CALL_OW 2
46853: ST_TO_ADDR
// end ;
46854: GO 46762
46856: POP
46857: POP
46858: GO 46742
46860: POP
46861: POP
// if not list then
46862: LD_VAR 0 13
46866: NOT
46867: IFFALSE 46871
// exit ;
46869: GO 46942
// for i in list do
46871: LD_ADDR_VAR 0 6
46875: PUSH
46876: LD_VAR 0 13
46880: PUSH
46881: FOR_IN
46882: IFFALSE 46940
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
46884: LD_VAR 0 1
46888: PPUSH
46889: LD_STRING M
46891: PUSH
46892: LD_VAR 0 6
46896: PUSH
46897: LD_INT 1
46899: ARRAY
46900: PUSH
46901: LD_VAR 0 6
46905: PUSH
46906: LD_INT 2
46908: ARRAY
46909: PUSH
46910: LD_INT 0
46912: PUSH
46913: LD_INT 0
46915: PUSH
46916: LD_INT 0
46918: PUSH
46919: LD_INT 0
46921: PUSH
46922: EMPTY
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: PUSH
46931: EMPTY
46932: LIST
46933: PPUSH
46934: CALL_OW 447
46938: GO 46881
46940: POP
46941: POP
// end ;
46942: LD_VAR 0 5
46946: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
46947: LD_EXP 149
46951: NOT
46952: IFFALSE 47002
46954: GO 46956
46956: DISABLE
// begin initHack := true ;
46957: LD_ADDR_EXP 149
46961: PUSH
46962: LD_INT 1
46964: ST_TO_ADDR
// hackTanks := [ ] ;
46965: LD_ADDR_EXP 150
46969: PUSH
46970: EMPTY
46971: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
46972: LD_ADDR_EXP 151
46976: PUSH
46977: EMPTY
46978: ST_TO_ADDR
// hackLimit := 3 ;
46979: LD_ADDR_EXP 152
46983: PUSH
46984: LD_INT 3
46986: ST_TO_ADDR
// hackDist := 12 ;
46987: LD_ADDR_EXP 153
46991: PUSH
46992: LD_INT 12
46994: ST_TO_ADDR
// hackCounter := [ ] ;
46995: LD_ADDR_EXP 154
46999: PUSH
47000: EMPTY
47001: ST_TO_ADDR
// end ;
47002: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
47003: LD_EXP 149
47007: PUSH
47008: LD_INT 34
47010: PUSH
47011: LD_EXP 72
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PPUSH
47020: CALL_OW 69
47024: AND
47025: IFFALSE 47280
47027: GO 47029
47029: DISABLE
47030: LD_INT 0
47032: PPUSH
47033: PPUSH
// begin enable ;
47034: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
47035: LD_ADDR_VAR 0 1
47039: PUSH
47040: LD_INT 34
47042: PUSH
47043: LD_EXP 72
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PPUSH
47052: CALL_OW 69
47056: PUSH
47057: FOR_IN
47058: IFFALSE 47278
// begin if not i in hackTanks then
47060: LD_VAR 0 1
47064: PUSH
47065: LD_EXP 150
47069: IN
47070: NOT
47071: IFFALSE 47154
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
47073: LD_ADDR_EXP 150
47077: PUSH
47078: LD_EXP 150
47082: PPUSH
47083: LD_EXP 150
47087: PUSH
47088: LD_INT 1
47090: PLUS
47091: PPUSH
47092: LD_VAR 0 1
47096: PPUSH
47097: CALL_OW 1
47101: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
47102: LD_ADDR_EXP 151
47106: PUSH
47107: LD_EXP 151
47111: PPUSH
47112: LD_EXP 151
47116: PUSH
47117: LD_INT 1
47119: PLUS
47120: PPUSH
47121: EMPTY
47122: PPUSH
47123: CALL_OW 1
47127: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
47128: LD_ADDR_EXP 154
47132: PUSH
47133: LD_EXP 154
47137: PPUSH
47138: LD_EXP 154
47142: PUSH
47143: LD_INT 1
47145: PLUS
47146: PPUSH
47147: EMPTY
47148: PPUSH
47149: CALL_OW 1
47153: ST_TO_ADDR
// end ; if not IsOk ( i ) then
47154: LD_VAR 0 1
47158: PPUSH
47159: CALL_OW 302
47163: NOT
47164: IFFALSE 47177
// begin HackUnlinkAll ( i ) ;
47166: LD_VAR 0 1
47170: PPUSH
47171: CALL 47283 0 1
// continue ;
47175: GO 47057
// end ; HackCheckCapturedStatus ( i ) ;
47177: LD_VAR 0 1
47181: PPUSH
47182: CALL 47726 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
47186: LD_ADDR_VAR 0 2
47190: PUSH
47191: LD_INT 81
47193: PUSH
47194: LD_VAR 0 1
47198: PPUSH
47199: CALL_OW 255
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 33
47210: PUSH
47211: LD_INT 3
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 91
47220: PUSH
47221: LD_VAR 0 1
47225: PUSH
47226: LD_EXP 153
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 50
47238: PUSH
47239: EMPTY
47240: LIST
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: PPUSH
47248: CALL_OW 69
47252: ST_TO_ADDR
// if not tmp then
47253: LD_VAR 0 2
47257: NOT
47258: IFFALSE 47262
// continue ;
47260: GO 47057
// HackLink ( i , tmp ) ;
47262: LD_VAR 0 1
47266: PPUSH
47267: LD_VAR 0 2
47271: PPUSH
47272: CALL 47419 0 2
// end ;
47276: GO 47057
47278: POP
47279: POP
// end ;
47280: PPOPN 2
47282: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
47283: LD_INT 0
47285: PPUSH
47286: PPUSH
47287: PPUSH
// if not hack in hackTanks then
47288: LD_VAR 0 1
47292: PUSH
47293: LD_EXP 150
47297: IN
47298: NOT
47299: IFFALSE 47303
// exit ;
47301: GO 47414
// index := GetElementIndex ( hackTanks , hack ) ;
47303: LD_ADDR_VAR 0 4
47307: PUSH
47308: LD_EXP 150
47312: PPUSH
47313: LD_VAR 0 1
47317: PPUSH
47318: CALL 55041 0 2
47322: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
47323: LD_EXP 151
47327: PUSH
47328: LD_VAR 0 4
47332: ARRAY
47333: IFFALSE 47414
// begin for i in hackTanksCaptured [ index ] do
47335: LD_ADDR_VAR 0 3
47339: PUSH
47340: LD_EXP 151
47344: PUSH
47345: LD_VAR 0 4
47349: ARRAY
47350: PUSH
47351: FOR_IN
47352: IFFALSE 47378
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
47354: LD_VAR 0 3
47358: PUSH
47359: LD_INT 1
47361: ARRAY
47362: PPUSH
47363: LD_VAR 0 3
47367: PUSH
47368: LD_INT 2
47370: ARRAY
47371: PPUSH
47372: CALL_OW 235
47376: GO 47351
47378: POP
47379: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
47380: LD_ADDR_EXP 151
47384: PUSH
47385: LD_EXP 151
47389: PPUSH
47390: LD_VAR 0 4
47394: PPUSH
47395: EMPTY
47396: PPUSH
47397: CALL_OW 1
47401: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
47402: LD_VAR 0 1
47406: PPUSH
47407: LD_INT 0
47409: PPUSH
47410: CALL_OW 505
// end ; end ;
47414: LD_VAR 0 2
47418: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
47419: LD_INT 0
47421: PPUSH
47422: PPUSH
47423: PPUSH
// if not hack in hackTanks or not vehicles then
47424: LD_VAR 0 1
47428: PUSH
47429: LD_EXP 150
47433: IN
47434: NOT
47435: PUSH
47436: LD_VAR 0 2
47440: NOT
47441: OR
47442: IFFALSE 47446
// exit ;
47444: GO 47721
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
47446: LD_ADDR_VAR 0 2
47450: PUSH
47451: LD_VAR 0 1
47455: PPUSH
47456: LD_VAR 0 2
47460: PPUSH
47461: LD_INT 1
47463: PPUSH
47464: LD_INT 1
47466: PPUSH
47467: CALL 55691 0 4
47471: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
47472: LD_ADDR_VAR 0 5
47476: PUSH
47477: LD_EXP 150
47481: PPUSH
47482: LD_VAR 0 1
47486: PPUSH
47487: CALL 55041 0 2
47491: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
47492: LD_EXP 151
47496: PUSH
47497: LD_VAR 0 5
47501: ARRAY
47502: PUSH
47503: LD_EXP 152
47507: LESS
47508: IFFALSE 47697
// begin for i := 1 to vehicles do
47510: LD_ADDR_VAR 0 4
47514: PUSH
47515: DOUBLE
47516: LD_INT 1
47518: DEC
47519: ST_TO_ADDR
47520: LD_VAR 0 2
47524: PUSH
47525: FOR_TO
47526: IFFALSE 47695
// begin if hackTanksCaptured [ index ] = hackLimit then
47528: LD_EXP 151
47532: PUSH
47533: LD_VAR 0 5
47537: ARRAY
47538: PUSH
47539: LD_EXP 152
47543: EQUAL
47544: IFFALSE 47548
// break ;
47546: GO 47695
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47548: LD_ADDR_EXP 154
47552: PUSH
47553: LD_EXP 154
47557: PPUSH
47558: LD_VAR 0 5
47562: PPUSH
47563: LD_EXP 154
47567: PUSH
47568: LD_VAR 0 5
47572: ARRAY
47573: PUSH
47574: LD_INT 1
47576: PLUS
47577: PPUSH
47578: CALL_OW 1
47582: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47583: LD_ADDR_EXP 151
47587: PUSH
47588: LD_EXP 151
47592: PPUSH
47593: LD_VAR 0 5
47597: PUSH
47598: LD_EXP 151
47602: PUSH
47603: LD_VAR 0 5
47607: ARRAY
47608: PUSH
47609: LD_INT 1
47611: PLUS
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PPUSH
47617: LD_VAR 0 2
47621: PUSH
47622: LD_VAR 0 4
47626: ARRAY
47627: PUSH
47628: LD_VAR 0 2
47632: PUSH
47633: LD_VAR 0 4
47637: ARRAY
47638: PPUSH
47639: CALL_OW 255
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PPUSH
47648: CALL 55256 0 3
47652: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47653: LD_VAR 0 2
47657: PUSH
47658: LD_VAR 0 4
47662: ARRAY
47663: PPUSH
47664: LD_VAR 0 1
47668: PPUSH
47669: CALL_OW 255
47673: PPUSH
47674: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47678: LD_VAR 0 2
47682: PUSH
47683: LD_VAR 0 4
47687: ARRAY
47688: PPUSH
47689: CALL_OW 141
// end ;
47693: GO 47525
47695: POP
47696: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47697: LD_VAR 0 1
47701: PPUSH
47702: LD_EXP 151
47706: PUSH
47707: LD_VAR 0 5
47711: ARRAY
47712: PUSH
47713: LD_INT 0
47715: PLUS
47716: PPUSH
47717: CALL_OW 505
// end ;
47721: LD_VAR 0 3
47725: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47726: LD_INT 0
47728: PPUSH
47729: PPUSH
47730: PPUSH
47731: PPUSH
// if not hack in hackTanks then
47732: LD_VAR 0 1
47736: PUSH
47737: LD_EXP 150
47741: IN
47742: NOT
47743: IFFALSE 47747
// exit ;
47745: GO 47987
// index := GetElementIndex ( hackTanks , hack ) ;
47747: LD_ADDR_VAR 0 4
47751: PUSH
47752: LD_EXP 150
47756: PPUSH
47757: LD_VAR 0 1
47761: PPUSH
47762: CALL 55041 0 2
47766: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47767: LD_ADDR_VAR 0 3
47771: PUSH
47772: DOUBLE
47773: LD_EXP 151
47777: PUSH
47778: LD_VAR 0 4
47782: ARRAY
47783: INC
47784: ST_TO_ADDR
47785: LD_INT 1
47787: PUSH
47788: FOR_DOWNTO
47789: IFFALSE 47961
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47791: LD_ADDR_VAR 0 5
47795: PUSH
47796: LD_EXP 151
47800: PUSH
47801: LD_VAR 0 4
47805: ARRAY
47806: PUSH
47807: LD_VAR 0 3
47811: ARRAY
47812: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
47813: LD_VAR 0 5
47817: PUSH
47818: LD_INT 1
47820: ARRAY
47821: PPUSH
47822: CALL_OW 302
47826: NOT
47827: PUSH
47828: LD_VAR 0 5
47832: PUSH
47833: LD_INT 1
47835: ARRAY
47836: PPUSH
47837: CALL_OW 255
47841: PUSH
47842: LD_VAR 0 1
47846: PPUSH
47847: CALL_OW 255
47851: NONEQUAL
47852: OR
47853: IFFALSE 47959
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
47855: LD_VAR 0 5
47859: PUSH
47860: LD_INT 1
47862: ARRAY
47863: PPUSH
47864: CALL_OW 305
47868: PUSH
47869: LD_VAR 0 5
47873: PUSH
47874: LD_INT 1
47876: ARRAY
47877: PPUSH
47878: CALL_OW 255
47882: PUSH
47883: LD_VAR 0 1
47887: PPUSH
47888: CALL_OW 255
47892: EQUAL
47893: AND
47894: IFFALSE 47918
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
47896: LD_VAR 0 5
47900: PUSH
47901: LD_INT 1
47903: ARRAY
47904: PPUSH
47905: LD_VAR 0 5
47909: PUSH
47910: LD_INT 2
47912: ARRAY
47913: PPUSH
47914: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
47918: LD_ADDR_EXP 151
47922: PUSH
47923: LD_EXP 151
47927: PPUSH
47928: LD_VAR 0 4
47932: PPUSH
47933: LD_EXP 151
47937: PUSH
47938: LD_VAR 0 4
47942: ARRAY
47943: PPUSH
47944: LD_VAR 0 3
47948: PPUSH
47949: CALL_OW 3
47953: PPUSH
47954: CALL_OW 1
47958: ST_TO_ADDR
// end ; end ;
47959: GO 47788
47961: POP
47962: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47963: LD_VAR 0 1
47967: PPUSH
47968: LD_EXP 151
47972: PUSH
47973: LD_VAR 0 4
47977: ARRAY
47978: PUSH
47979: LD_INT 0
47981: PLUS
47982: PPUSH
47983: CALL_OW 505
// end ;
47987: LD_VAR 0 2
47991: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
47992: LD_INT 0
47994: PPUSH
47995: PPUSH
47996: PPUSH
47997: PPUSH
// if not hack in hackTanks then
47998: LD_VAR 0 1
48002: PUSH
48003: LD_EXP 150
48007: IN
48008: NOT
48009: IFFALSE 48013
// exit ;
48011: GO 48098
// index := GetElementIndex ( hackTanks , hack ) ;
48013: LD_ADDR_VAR 0 5
48017: PUSH
48018: LD_EXP 150
48022: PPUSH
48023: LD_VAR 0 1
48027: PPUSH
48028: CALL 55041 0 2
48032: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
48033: LD_ADDR_VAR 0 4
48037: PUSH
48038: DOUBLE
48039: LD_INT 1
48041: DEC
48042: ST_TO_ADDR
48043: LD_EXP 151
48047: PUSH
48048: LD_VAR 0 5
48052: ARRAY
48053: PUSH
48054: FOR_TO
48055: IFFALSE 48096
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
48057: LD_EXP 151
48061: PUSH
48062: LD_VAR 0 5
48066: ARRAY
48067: PUSH
48068: LD_VAR 0 4
48072: ARRAY
48073: PUSH
48074: LD_INT 1
48076: ARRAY
48077: PUSH
48078: LD_VAR 0 2
48082: EQUAL
48083: IFFALSE 48094
// KillUnit ( vehicle ) ;
48085: LD_VAR 0 2
48089: PPUSH
48090: CALL_OW 66
48094: GO 48054
48096: POP
48097: POP
// end ;
48098: LD_VAR 0 3
48102: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
48103: LD_EXP 155
48107: NOT
48108: IFFALSE 48143
48110: GO 48112
48112: DISABLE
// begin initMiner := true ;
48113: LD_ADDR_EXP 155
48117: PUSH
48118: LD_INT 1
48120: ST_TO_ADDR
// minersList := [ ] ;
48121: LD_ADDR_EXP 156
48125: PUSH
48126: EMPTY
48127: ST_TO_ADDR
// minerMinesList := [ ] ;
48128: LD_ADDR_EXP 157
48132: PUSH
48133: EMPTY
48134: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
48135: LD_ADDR_EXP 158
48139: PUSH
48140: LD_INT 5
48142: ST_TO_ADDR
// end ;
48143: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
48144: LD_EXP 155
48148: PUSH
48149: LD_INT 34
48151: PUSH
48152: LD_EXP 77
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PPUSH
48161: CALL_OW 69
48165: AND
48166: IFFALSE 48629
48168: GO 48170
48170: DISABLE
48171: LD_INT 0
48173: PPUSH
48174: PPUSH
48175: PPUSH
48176: PPUSH
// begin enable ;
48177: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
48178: LD_ADDR_VAR 0 1
48182: PUSH
48183: LD_INT 34
48185: PUSH
48186: LD_EXP 77
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PPUSH
48195: CALL_OW 69
48199: PUSH
48200: FOR_IN
48201: IFFALSE 48273
// begin if not i in minersList then
48203: LD_VAR 0 1
48207: PUSH
48208: LD_EXP 156
48212: IN
48213: NOT
48214: IFFALSE 48271
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
48216: LD_ADDR_EXP 156
48220: PUSH
48221: LD_EXP 156
48225: PPUSH
48226: LD_EXP 156
48230: PUSH
48231: LD_INT 1
48233: PLUS
48234: PPUSH
48235: LD_VAR 0 1
48239: PPUSH
48240: CALL_OW 1
48244: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
48245: LD_ADDR_EXP 157
48249: PUSH
48250: LD_EXP 157
48254: PPUSH
48255: LD_EXP 157
48259: PUSH
48260: LD_INT 1
48262: PLUS
48263: PPUSH
48264: EMPTY
48265: PPUSH
48266: CALL_OW 1
48270: ST_TO_ADDR
// end end ;
48271: GO 48200
48273: POP
48274: POP
// for i := minerMinesList downto 1 do
48275: LD_ADDR_VAR 0 1
48279: PUSH
48280: DOUBLE
48281: LD_EXP 157
48285: INC
48286: ST_TO_ADDR
48287: LD_INT 1
48289: PUSH
48290: FOR_DOWNTO
48291: IFFALSE 48627
// begin if IsLive ( minersList [ i ] ) then
48293: LD_EXP 156
48297: PUSH
48298: LD_VAR 0 1
48302: ARRAY
48303: PPUSH
48304: CALL_OW 300
48308: IFFALSE 48336
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
48310: LD_EXP 156
48314: PUSH
48315: LD_VAR 0 1
48319: ARRAY
48320: PPUSH
48321: LD_EXP 157
48325: PUSH
48326: LD_VAR 0 1
48330: ARRAY
48331: PPUSH
48332: CALL_OW 505
// if not minerMinesList [ i ] then
48336: LD_EXP 157
48340: PUSH
48341: LD_VAR 0 1
48345: ARRAY
48346: NOT
48347: IFFALSE 48351
// continue ;
48349: GO 48290
// for j := minerMinesList [ i ] downto 1 do
48351: LD_ADDR_VAR 0 2
48355: PUSH
48356: DOUBLE
48357: LD_EXP 157
48361: PUSH
48362: LD_VAR 0 1
48366: ARRAY
48367: INC
48368: ST_TO_ADDR
48369: LD_INT 1
48371: PUSH
48372: FOR_DOWNTO
48373: IFFALSE 48623
// begin side := GetSide ( minersList [ i ] ) ;
48375: LD_ADDR_VAR 0 3
48379: PUSH
48380: LD_EXP 156
48384: PUSH
48385: LD_VAR 0 1
48389: ARRAY
48390: PPUSH
48391: CALL_OW 255
48395: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48396: LD_ADDR_VAR 0 4
48400: PUSH
48401: LD_EXP 157
48405: PUSH
48406: LD_VAR 0 1
48410: ARRAY
48411: PUSH
48412: LD_VAR 0 2
48416: ARRAY
48417: PUSH
48418: LD_INT 1
48420: ARRAY
48421: PPUSH
48422: LD_EXP 157
48426: PUSH
48427: LD_VAR 0 1
48431: ARRAY
48432: PUSH
48433: LD_VAR 0 2
48437: ARRAY
48438: PUSH
48439: LD_INT 2
48441: ARRAY
48442: PPUSH
48443: CALL_OW 428
48447: ST_TO_ADDR
// if not tmp then
48448: LD_VAR 0 4
48452: NOT
48453: IFFALSE 48457
// continue ;
48455: GO 48372
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
48457: LD_VAR 0 4
48461: PUSH
48462: LD_INT 81
48464: PUSH
48465: LD_VAR 0 3
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PPUSH
48474: CALL_OW 69
48478: IN
48479: PUSH
48480: LD_EXP 157
48484: PUSH
48485: LD_VAR 0 1
48489: ARRAY
48490: PUSH
48491: LD_VAR 0 2
48495: ARRAY
48496: PUSH
48497: LD_INT 1
48499: ARRAY
48500: PPUSH
48501: LD_EXP 157
48505: PUSH
48506: LD_VAR 0 1
48510: ARRAY
48511: PUSH
48512: LD_VAR 0 2
48516: ARRAY
48517: PUSH
48518: LD_INT 2
48520: ARRAY
48521: PPUSH
48522: CALL_OW 458
48526: AND
48527: IFFALSE 48621
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48529: LD_EXP 157
48533: PUSH
48534: LD_VAR 0 1
48538: ARRAY
48539: PUSH
48540: LD_VAR 0 2
48544: ARRAY
48545: PUSH
48546: LD_INT 1
48548: ARRAY
48549: PPUSH
48550: LD_EXP 157
48554: PUSH
48555: LD_VAR 0 1
48559: ARRAY
48560: PUSH
48561: LD_VAR 0 2
48565: ARRAY
48566: PUSH
48567: LD_INT 2
48569: ARRAY
48570: PPUSH
48571: LD_VAR 0 3
48575: PPUSH
48576: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48580: LD_ADDR_EXP 157
48584: PUSH
48585: LD_EXP 157
48589: PPUSH
48590: LD_VAR 0 1
48594: PPUSH
48595: LD_EXP 157
48599: PUSH
48600: LD_VAR 0 1
48604: ARRAY
48605: PPUSH
48606: LD_VAR 0 2
48610: PPUSH
48611: CALL_OW 3
48615: PPUSH
48616: CALL_OW 1
48620: ST_TO_ADDR
// end ; end ;
48621: GO 48372
48623: POP
48624: POP
// end ;
48625: GO 48290
48627: POP
48628: POP
// end ;
48629: PPOPN 4
48631: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48632: LD_INT 0
48634: PPUSH
48635: PPUSH
// result := false ;
48636: LD_ADDR_VAR 0 4
48640: PUSH
48641: LD_INT 0
48643: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48644: LD_VAR 0 1
48648: PPUSH
48649: CALL_OW 264
48653: PUSH
48654: LD_EXP 77
48658: EQUAL
48659: NOT
48660: IFFALSE 48664
// exit ;
48662: GO 48904
// index := GetElementIndex ( minersList , unit ) ;
48664: LD_ADDR_VAR 0 5
48668: PUSH
48669: LD_EXP 156
48673: PPUSH
48674: LD_VAR 0 1
48678: PPUSH
48679: CALL 55041 0 2
48683: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48684: LD_EXP 157
48688: PUSH
48689: LD_VAR 0 5
48693: ARRAY
48694: PUSH
48695: LD_EXP 158
48699: GREATEREQUAL
48700: IFFALSE 48704
// exit ;
48702: GO 48904
// ComMoveXY ( unit , x , y ) ;
48704: LD_VAR 0 1
48708: PPUSH
48709: LD_VAR 0 2
48713: PPUSH
48714: LD_VAR 0 3
48718: PPUSH
48719: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48723: LD_INT 35
48725: PPUSH
48726: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48730: LD_VAR 0 1
48734: PPUSH
48735: LD_VAR 0 2
48739: PPUSH
48740: LD_VAR 0 3
48744: PPUSH
48745: CALL 86327 0 3
48749: NOT
48750: PUSH
48751: LD_VAR 0 1
48755: PPUSH
48756: CALL_OW 314
48760: AND
48761: IFFALSE 48765
// exit ;
48763: GO 48904
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48765: LD_VAR 0 2
48769: PPUSH
48770: LD_VAR 0 3
48774: PPUSH
48775: CALL_OW 428
48779: PUSH
48780: LD_VAR 0 1
48784: EQUAL
48785: PUSH
48786: LD_VAR 0 1
48790: PPUSH
48791: CALL_OW 314
48795: NOT
48796: AND
48797: IFFALSE 48723
// PlaySoundXY ( x , y , PlantMine ) ;
48799: LD_VAR 0 2
48803: PPUSH
48804: LD_VAR 0 3
48808: PPUSH
48809: LD_STRING PlantMine
48811: PPUSH
48812: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
48816: LD_VAR 0 2
48820: PPUSH
48821: LD_VAR 0 3
48825: PPUSH
48826: LD_VAR 0 1
48830: PPUSH
48831: CALL_OW 255
48835: PPUSH
48836: LD_INT 0
48838: PPUSH
48839: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
48843: LD_ADDR_EXP 157
48847: PUSH
48848: LD_EXP 157
48852: PPUSH
48853: LD_VAR 0 5
48857: PUSH
48858: LD_EXP 157
48862: PUSH
48863: LD_VAR 0 5
48867: ARRAY
48868: PUSH
48869: LD_INT 1
48871: PLUS
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PPUSH
48877: LD_VAR 0 2
48881: PUSH
48882: LD_VAR 0 3
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: PPUSH
48891: CALL 55256 0 3
48895: ST_TO_ADDR
// result := true ;
48896: LD_ADDR_VAR 0 4
48900: PUSH
48901: LD_INT 1
48903: ST_TO_ADDR
// end ;
48904: LD_VAR 0 4
48908: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
48909: LD_INT 0
48911: PPUSH
48912: PPUSH
48913: PPUSH
// if not unit in minersList then
48914: LD_VAR 0 1
48918: PUSH
48919: LD_EXP 156
48923: IN
48924: NOT
48925: IFFALSE 48929
// exit ;
48927: GO 49321
// index := GetElementIndex ( minersList , unit ) ;
48929: LD_ADDR_VAR 0 6
48933: PUSH
48934: LD_EXP 156
48938: PPUSH
48939: LD_VAR 0 1
48943: PPUSH
48944: CALL 55041 0 2
48948: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
48949: LD_ADDR_VAR 0 5
48953: PUSH
48954: DOUBLE
48955: LD_EXP 157
48959: PUSH
48960: LD_VAR 0 6
48964: ARRAY
48965: INC
48966: ST_TO_ADDR
48967: LD_INT 1
48969: PUSH
48970: FOR_DOWNTO
48971: IFFALSE 49132
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
48973: LD_EXP 157
48977: PUSH
48978: LD_VAR 0 6
48982: ARRAY
48983: PUSH
48984: LD_VAR 0 5
48988: ARRAY
48989: PUSH
48990: LD_INT 1
48992: ARRAY
48993: PUSH
48994: LD_VAR 0 2
48998: EQUAL
48999: PUSH
49000: LD_EXP 157
49004: PUSH
49005: LD_VAR 0 6
49009: ARRAY
49010: PUSH
49011: LD_VAR 0 5
49015: ARRAY
49016: PUSH
49017: LD_INT 2
49019: ARRAY
49020: PUSH
49021: LD_VAR 0 3
49025: EQUAL
49026: AND
49027: IFFALSE 49130
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49029: LD_EXP 157
49033: PUSH
49034: LD_VAR 0 6
49038: ARRAY
49039: PUSH
49040: LD_VAR 0 5
49044: ARRAY
49045: PUSH
49046: LD_INT 1
49048: ARRAY
49049: PPUSH
49050: LD_EXP 157
49054: PUSH
49055: LD_VAR 0 6
49059: ARRAY
49060: PUSH
49061: LD_VAR 0 5
49065: ARRAY
49066: PUSH
49067: LD_INT 2
49069: ARRAY
49070: PPUSH
49071: LD_VAR 0 1
49075: PPUSH
49076: CALL_OW 255
49080: PPUSH
49081: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49085: LD_ADDR_EXP 157
49089: PUSH
49090: LD_EXP 157
49094: PPUSH
49095: LD_VAR 0 6
49099: PPUSH
49100: LD_EXP 157
49104: PUSH
49105: LD_VAR 0 6
49109: ARRAY
49110: PPUSH
49111: LD_VAR 0 5
49115: PPUSH
49116: CALL_OW 3
49120: PPUSH
49121: CALL_OW 1
49125: ST_TO_ADDR
// exit ;
49126: POP
49127: POP
49128: GO 49321
// end ; end ;
49130: GO 48970
49132: POP
49133: POP
// for i := minerMinesList [ index ] downto 1 do
49134: LD_ADDR_VAR 0 5
49138: PUSH
49139: DOUBLE
49140: LD_EXP 157
49144: PUSH
49145: LD_VAR 0 6
49149: ARRAY
49150: INC
49151: ST_TO_ADDR
49152: LD_INT 1
49154: PUSH
49155: FOR_DOWNTO
49156: IFFALSE 49319
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
49158: LD_EXP 157
49162: PUSH
49163: LD_VAR 0 6
49167: ARRAY
49168: PUSH
49169: LD_VAR 0 5
49173: ARRAY
49174: PUSH
49175: LD_INT 1
49177: ARRAY
49178: PPUSH
49179: LD_EXP 157
49183: PUSH
49184: LD_VAR 0 6
49188: ARRAY
49189: PUSH
49190: LD_VAR 0 5
49194: ARRAY
49195: PUSH
49196: LD_INT 2
49198: ARRAY
49199: PPUSH
49200: LD_VAR 0 2
49204: PPUSH
49205: LD_VAR 0 3
49209: PPUSH
49210: CALL_OW 298
49214: PUSH
49215: LD_INT 6
49217: LESS
49218: IFFALSE 49317
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49220: LD_EXP 157
49224: PUSH
49225: LD_VAR 0 6
49229: ARRAY
49230: PUSH
49231: LD_VAR 0 5
49235: ARRAY
49236: PUSH
49237: LD_INT 1
49239: ARRAY
49240: PPUSH
49241: LD_EXP 157
49245: PUSH
49246: LD_VAR 0 6
49250: ARRAY
49251: PUSH
49252: LD_VAR 0 5
49256: ARRAY
49257: PUSH
49258: LD_INT 2
49260: ARRAY
49261: PPUSH
49262: LD_VAR 0 1
49266: PPUSH
49267: CALL_OW 255
49271: PPUSH
49272: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49276: LD_ADDR_EXP 157
49280: PUSH
49281: LD_EXP 157
49285: PPUSH
49286: LD_VAR 0 6
49290: PPUSH
49291: LD_EXP 157
49295: PUSH
49296: LD_VAR 0 6
49300: ARRAY
49301: PPUSH
49302: LD_VAR 0 5
49306: PPUSH
49307: CALL_OW 3
49311: PPUSH
49312: CALL_OW 1
49316: ST_TO_ADDR
// end ; end ;
49317: GO 49155
49319: POP
49320: POP
// end ;
49321: LD_VAR 0 4
49325: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
49326: LD_INT 0
49328: PPUSH
49329: PPUSH
49330: PPUSH
49331: PPUSH
49332: PPUSH
49333: PPUSH
49334: PPUSH
49335: PPUSH
49336: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
49337: LD_VAR 0 1
49341: PPUSH
49342: CALL_OW 264
49346: PUSH
49347: LD_EXP 77
49351: EQUAL
49352: NOT
49353: PUSH
49354: LD_VAR 0 1
49358: PUSH
49359: LD_EXP 156
49363: IN
49364: NOT
49365: OR
49366: IFFALSE 49370
// exit ;
49368: GO 49692
// index := GetElementIndex ( minersList , unit ) ;
49370: LD_ADDR_VAR 0 6
49374: PUSH
49375: LD_EXP 156
49379: PPUSH
49380: LD_VAR 0 1
49384: PPUSH
49385: CALL 55041 0 2
49389: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
49390: LD_ADDR_VAR 0 8
49394: PUSH
49395: LD_EXP 158
49399: PUSH
49400: LD_EXP 157
49404: PUSH
49405: LD_VAR 0 6
49409: ARRAY
49410: MINUS
49411: ST_TO_ADDR
// if not minesFreeAmount then
49412: LD_VAR 0 8
49416: NOT
49417: IFFALSE 49421
// exit ;
49419: GO 49692
// tmp := [ ] ;
49421: LD_ADDR_VAR 0 7
49425: PUSH
49426: EMPTY
49427: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
49428: LD_ADDR_VAR 0 5
49432: PUSH
49433: DOUBLE
49434: LD_INT 1
49436: DEC
49437: ST_TO_ADDR
49438: LD_VAR 0 8
49442: PUSH
49443: FOR_TO
49444: IFFALSE 49639
// begin _d := rand ( 0 , 5 ) ;
49446: LD_ADDR_VAR 0 11
49450: PUSH
49451: LD_INT 0
49453: PPUSH
49454: LD_INT 5
49456: PPUSH
49457: CALL_OW 12
49461: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
49462: LD_ADDR_VAR 0 12
49466: PUSH
49467: LD_INT 2
49469: PPUSH
49470: LD_INT 6
49472: PPUSH
49473: CALL_OW 12
49477: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
49478: LD_ADDR_VAR 0 9
49482: PUSH
49483: LD_VAR 0 2
49487: PPUSH
49488: LD_VAR 0 11
49492: PPUSH
49493: LD_VAR 0 12
49497: PPUSH
49498: CALL_OW 272
49502: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49503: LD_ADDR_VAR 0 10
49507: PUSH
49508: LD_VAR 0 3
49512: PPUSH
49513: LD_VAR 0 11
49517: PPUSH
49518: LD_VAR 0 12
49522: PPUSH
49523: CALL_OW 273
49527: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49528: LD_VAR 0 9
49532: PPUSH
49533: LD_VAR 0 10
49537: PPUSH
49538: CALL_OW 488
49542: PUSH
49543: LD_VAR 0 9
49547: PUSH
49548: LD_VAR 0 10
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_VAR 0 7
49561: IN
49562: NOT
49563: AND
49564: PUSH
49565: LD_VAR 0 9
49569: PPUSH
49570: LD_VAR 0 10
49574: PPUSH
49575: CALL_OW 458
49579: NOT
49580: AND
49581: IFFALSE 49623
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49583: LD_ADDR_VAR 0 7
49587: PUSH
49588: LD_VAR 0 7
49592: PPUSH
49593: LD_VAR 0 7
49597: PUSH
49598: LD_INT 1
49600: PLUS
49601: PPUSH
49602: LD_VAR 0 9
49606: PUSH
49607: LD_VAR 0 10
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PPUSH
49616: CALL_OW 1
49620: ST_TO_ADDR
49621: GO 49637
// i := i - 1 ;
49623: LD_ADDR_VAR 0 5
49627: PUSH
49628: LD_VAR 0 5
49632: PUSH
49633: LD_INT 1
49635: MINUS
49636: ST_TO_ADDR
// end ;
49637: GO 49443
49639: POP
49640: POP
// for i in tmp do
49641: LD_ADDR_VAR 0 5
49645: PUSH
49646: LD_VAR 0 7
49650: PUSH
49651: FOR_IN
49652: IFFALSE 49690
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49654: LD_VAR 0 1
49658: PPUSH
49659: LD_VAR 0 5
49663: PUSH
49664: LD_INT 1
49666: ARRAY
49667: PPUSH
49668: LD_VAR 0 5
49672: PUSH
49673: LD_INT 2
49675: ARRAY
49676: PPUSH
49677: CALL 48632 0 3
49681: NOT
49682: IFFALSE 49688
// exit ;
49684: POP
49685: POP
49686: GO 49692
49688: GO 49651
49690: POP
49691: POP
// end ;
49692: LD_VAR 0 4
49696: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
49697: LD_INT 0
49699: PPUSH
49700: PPUSH
49701: PPUSH
49702: PPUSH
49703: PPUSH
49704: PPUSH
49705: PPUSH
// if not GetClass ( unit ) = class_sniper then
49706: LD_VAR 0 1
49710: PPUSH
49711: CALL_OW 257
49715: PUSH
49716: LD_INT 5
49718: EQUAL
49719: NOT
49720: IFFALSE 49724
// exit ;
49722: GO 50112
// dist := 8 ;
49724: LD_ADDR_VAR 0 5
49728: PUSH
49729: LD_INT 8
49731: ST_TO_ADDR
// viewRange := 12 ;
49732: LD_ADDR_VAR 0 7
49736: PUSH
49737: LD_INT 12
49739: ST_TO_ADDR
// side := GetSide ( unit ) ;
49740: LD_ADDR_VAR 0 6
49744: PUSH
49745: LD_VAR 0 1
49749: PPUSH
49750: CALL_OW 255
49754: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49755: LD_INT 61
49757: PPUSH
49758: LD_VAR 0 6
49762: PPUSH
49763: CALL_OW 321
49767: PUSH
49768: LD_INT 2
49770: EQUAL
49771: IFFALSE 49781
// viewRange := 16 ;
49773: LD_ADDR_VAR 0 7
49777: PUSH
49778: LD_INT 16
49780: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49781: LD_VAR 0 1
49785: PPUSH
49786: LD_VAR 0 2
49790: PPUSH
49791: LD_VAR 0 3
49795: PPUSH
49796: CALL_OW 297
49800: PUSH
49801: LD_VAR 0 5
49805: GREATER
49806: IFFALSE 49885
// begin ComMoveXY ( unit , x , y ) ;
49808: LD_VAR 0 1
49812: PPUSH
49813: LD_VAR 0 2
49817: PPUSH
49818: LD_VAR 0 3
49822: PPUSH
49823: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49827: LD_INT 35
49829: PPUSH
49830: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
49834: LD_VAR 0 1
49838: PPUSH
49839: LD_VAR 0 2
49843: PPUSH
49844: LD_VAR 0 3
49848: PPUSH
49849: CALL 86327 0 3
49853: NOT
49854: IFFALSE 49858
// exit ;
49856: GO 50112
// until GetDistUnitXY ( unit , x , y ) < dist ;
49858: LD_VAR 0 1
49862: PPUSH
49863: LD_VAR 0 2
49867: PPUSH
49868: LD_VAR 0 3
49872: PPUSH
49873: CALL_OW 297
49877: PUSH
49878: LD_VAR 0 5
49882: LESS
49883: IFFALSE 49827
// end ; ComTurnXY ( unit , x , y ) ;
49885: LD_VAR 0 1
49889: PPUSH
49890: LD_VAR 0 2
49894: PPUSH
49895: LD_VAR 0 3
49899: PPUSH
49900: CALL_OW 118
// wait ( 5 ) ;
49904: LD_INT 5
49906: PPUSH
49907: CALL_OW 67
// _d := GetDir ( unit ) ;
49911: LD_ADDR_VAR 0 10
49915: PUSH
49916: LD_VAR 0 1
49920: PPUSH
49921: CALL_OW 254
49925: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
49926: LD_ADDR_VAR 0 8
49930: PUSH
49931: LD_VAR 0 1
49935: PPUSH
49936: CALL_OW 250
49940: PPUSH
49941: LD_VAR 0 10
49945: PPUSH
49946: LD_VAR 0 5
49950: PPUSH
49951: CALL_OW 272
49955: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
49956: LD_ADDR_VAR 0 9
49960: PUSH
49961: LD_VAR 0 1
49965: PPUSH
49966: CALL_OW 251
49970: PPUSH
49971: LD_VAR 0 10
49975: PPUSH
49976: LD_VAR 0 5
49980: PPUSH
49981: CALL_OW 273
49985: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49986: LD_VAR 0 8
49990: PPUSH
49991: LD_VAR 0 9
49995: PPUSH
49996: CALL_OW 488
50000: NOT
50001: IFFALSE 50005
// exit ;
50003: GO 50112
// ComAnimCustom ( unit , 1 ) ;
50005: LD_VAR 0 1
50009: PPUSH
50010: LD_INT 1
50012: PPUSH
50013: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
50017: LD_VAR 0 8
50021: PPUSH
50022: LD_VAR 0 9
50026: PPUSH
50027: LD_VAR 0 6
50031: PPUSH
50032: LD_VAR 0 7
50036: PPUSH
50037: CALL_OW 330
// repeat wait ( 1 ) ;
50041: LD_INT 1
50043: PPUSH
50044: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
50048: LD_VAR 0 1
50052: PPUSH
50053: CALL_OW 316
50057: PUSH
50058: LD_VAR 0 1
50062: PPUSH
50063: CALL_OW 314
50067: OR
50068: PUSH
50069: LD_VAR 0 1
50073: PPUSH
50074: CALL_OW 302
50078: NOT
50079: OR
50080: PUSH
50081: LD_VAR 0 1
50085: PPUSH
50086: CALL_OW 301
50090: OR
50091: IFFALSE 50041
// RemoveSeeing ( _x , _y , side ) ;
50093: LD_VAR 0 8
50097: PPUSH
50098: LD_VAR 0 9
50102: PPUSH
50103: LD_VAR 0 6
50107: PPUSH
50108: CALL_OW 331
// end ; end_of_file
50112: LD_VAR 0 4
50116: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
50117: LD_INT 0
50119: PPUSH
50120: PPUSH
// if exist_mode then
50121: LD_VAR 0 2
50125: IFFALSE 50150
// unit := CreateCharacter ( prefix & ident ) else
50127: LD_ADDR_VAR 0 5
50131: PUSH
50132: LD_VAR 0 3
50136: PUSH
50137: LD_VAR 0 1
50141: STR
50142: PPUSH
50143: CALL_OW 34
50147: ST_TO_ADDR
50148: GO 50165
// unit := NewCharacter ( ident ) ;
50150: LD_ADDR_VAR 0 5
50154: PUSH
50155: LD_VAR 0 1
50159: PPUSH
50160: CALL_OW 25
50164: ST_TO_ADDR
// result := unit ;
50165: LD_ADDR_VAR 0 4
50169: PUSH
50170: LD_VAR 0 5
50174: ST_TO_ADDR
// end ;
50175: LD_VAR 0 4
50179: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
50180: LD_INT 0
50182: PPUSH
50183: PPUSH
// if not side or not nation then
50184: LD_VAR 0 1
50188: NOT
50189: PUSH
50190: LD_VAR 0 2
50194: NOT
50195: OR
50196: IFFALSE 50200
// exit ;
50198: GO 50968
// case nation of nation_american :
50200: LD_VAR 0 2
50204: PUSH
50205: LD_INT 1
50207: DOUBLE
50208: EQUAL
50209: IFTRUE 50213
50211: GO 50427
50213: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
50214: LD_ADDR_VAR 0 4
50218: PUSH
50219: LD_INT 35
50221: PUSH
50222: LD_INT 45
50224: PUSH
50225: LD_INT 46
50227: PUSH
50228: LD_INT 47
50230: PUSH
50231: LD_INT 82
50233: PUSH
50234: LD_INT 83
50236: PUSH
50237: LD_INT 84
50239: PUSH
50240: LD_INT 85
50242: PUSH
50243: LD_INT 86
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: LD_INT 2
50251: PUSH
50252: LD_INT 6
50254: PUSH
50255: LD_INT 15
50257: PUSH
50258: LD_INT 16
50260: PUSH
50261: LD_INT 7
50263: PUSH
50264: LD_INT 12
50266: PUSH
50267: LD_INT 13
50269: PUSH
50270: LD_INT 10
50272: PUSH
50273: LD_INT 14
50275: PUSH
50276: LD_INT 20
50278: PUSH
50279: LD_INT 21
50281: PUSH
50282: LD_INT 22
50284: PUSH
50285: LD_INT 25
50287: PUSH
50288: LD_INT 32
50290: PUSH
50291: LD_INT 27
50293: PUSH
50294: LD_INT 36
50296: PUSH
50297: LD_INT 69
50299: PUSH
50300: LD_INT 39
50302: PUSH
50303: LD_INT 34
50305: PUSH
50306: LD_INT 40
50308: PUSH
50309: LD_INT 48
50311: PUSH
50312: LD_INT 49
50314: PUSH
50315: LD_INT 50
50317: PUSH
50318: LD_INT 51
50320: PUSH
50321: LD_INT 52
50323: PUSH
50324: LD_INT 53
50326: PUSH
50327: LD_INT 54
50329: PUSH
50330: LD_INT 55
50332: PUSH
50333: LD_INT 56
50335: PUSH
50336: LD_INT 57
50338: PUSH
50339: LD_INT 58
50341: PUSH
50342: LD_INT 59
50344: PUSH
50345: LD_INT 60
50347: PUSH
50348: LD_INT 61
50350: PUSH
50351: LD_INT 62
50353: PUSH
50354: LD_INT 80
50356: PUSH
50357: LD_INT 82
50359: PUSH
50360: LD_INT 83
50362: PUSH
50363: LD_INT 84
50365: PUSH
50366: LD_INT 85
50368: PUSH
50369: LD_INT 86
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: LIST
50387: LIST
50388: LIST
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: ST_TO_ADDR
50425: GO 50892
50427: LD_INT 2
50429: DOUBLE
50430: EQUAL
50431: IFTRUE 50435
50433: GO 50661
50435: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
50436: LD_ADDR_VAR 0 4
50440: PUSH
50441: LD_INT 35
50443: PUSH
50444: LD_INT 45
50446: PUSH
50447: LD_INT 46
50449: PUSH
50450: LD_INT 47
50452: PUSH
50453: LD_INT 82
50455: PUSH
50456: LD_INT 83
50458: PUSH
50459: LD_INT 84
50461: PUSH
50462: LD_INT 85
50464: PUSH
50465: LD_INT 87
50467: PUSH
50468: LD_INT 70
50470: PUSH
50471: LD_INT 1
50473: PUSH
50474: LD_INT 11
50476: PUSH
50477: LD_INT 3
50479: PUSH
50480: LD_INT 4
50482: PUSH
50483: LD_INT 5
50485: PUSH
50486: LD_INT 6
50488: PUSH
50489: LD_INT 15
50491: PUSH
50492: LD_INT 18
50494: PUSH
50495: LD_INT 7
50497: PUSH
50498: LD_INT 17
50500: PUSH
50501: LD_INT 8
50503: PUSH
50504: LD_INT 20
50506: PUSH
50507: LD_INT 21
50509: PUSH
50510: LD_INT 22
50512: PUSH
50513: LD_INT 72
50515: PUSH
50516: LD_INT 26
50518: PUSH
50519: LD_INT 69
50521: PUSH
50522: LD_INT 39
50524: PUSH
50525: LD_INT 40
50527: PUSH
50528: LD_INT 41
50530: PUSH
50531: LD_INT 42
50533: PUSH
50534: LD_INT 43
50536: PUSH
50537: LD_INT 48
50539: PUSH
50540: LD_INT 49
50542: PUSH
50543: LD_INT 50
50545: PUSH
50546: LD_INT 51
50548: PUSH
50549: LD_INT 52
50551: PUSH
50552: LD_INT 53
50554: PUSH
50555: LD_INT 54
50557: PUSH
50558: LD_INT 55
50560: PUSH
50561: LD_INT 56
50563: PUSH
50564: LD_INT 60
50566: PUSH
50567: LD_INT 61
50569: PUSH
50570: LD_INT 62
50572: PUSH
50573: LD_INT 66
50575: PUSH
50576: LD_INT 67
50578: PUSH
50579: LD_INT 68
50581: PUSH
50582: LD_INT 81
50584: PUSH
50585: LD_INT 82
50587: PUSH
50588: LD_INT 83
50590: PUSH
50591: LD_INT 84
50593: PUSH
50594: LD_INT 85
50596: PUSH
50597: LD_INT 87
50599: PUSH
50600: LD_INT 88
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: LIST
50608: LIST
50609: LIST
50610: LIST
50611: LIST
50612: LIST
50613: LIST
50614: LIST
50615: LIST
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: LIST
50630: LIST
50631: LIST
50632: LIST
50633: LIST
50634: LIST
50635: LIST
50636: LIST
50637: LIST
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: LIST
50644: LIST
50645: LIST
50646: LIST
50647: LIST
50648: LIST
50649: LIST
50650: LIST
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: ST_TO_ADDR
50659: GO 50892
50661: LD_INT 3
50663: DOUBLE
50664: EQUAL
50665: IFTRUE 50669
50667: GO 50891
50669: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
50670: LD_ADDR_VAR 0 4
50674: PUSH
50675: LD_INT 46
50677: PUSH
50678: LD_INT 47
50680: PUSH
50681: LD_INT 1
50683: PUSH
50684: LD_INT 2
50686: PUSH
50687: LD_INT 82
50689: PUSH
50690: LD_INT 83
50692: PUSH
50693: LD_INT 84
50695: PUSH
50696: LD_INT 85
50698: PUSH
50699: LD_INT 86
50701: PUSH
50702: LD_INT 11
50704: PUSH
50705: LD_INT 9
50707: PUSH
50708: LD_INT 20
50710: PUSH
50711: LD_INT 19
50713: PUSH
50714: LD_INT 21
50716: PUSH
50717: LD_INT 24
50719: PUSH
50720: LD_INT 22
50722: PUSH
50723: LD_INT 25
50725: PUSH
50726: LD_INT 28
50728: PUSH
50729: LD_INT 29
50731: PUSH
50732: LD_INT 30
50734: PUSH
50735: LD_INT 31
50737: PUSH
50738: LD_INT 37
50740: PUSH
50741: LD_INT 38
50743: PUSH
50744: LD_INT 32
50746: PUSH
50747: LD_INT 27
50749: PUSH
50750: LD_INT 33
50752: PUSH
50753: LD_INT 69
50755: PUSH
50756: LD_INT 39
50758: PUSH
50759: LD_INT 34
50761: PUSH
50762: LD_INT 40
50764: PUSH
50765: LD_INT 71
50767: PUSH
50768: LD_INT 23
50770: PUSH
50771: LD_INT 44
50773: PUSH
50774: LD_INT 48
50776: PUSH
50777: LD_INT 49
50779: PUSH
50780: LD_INT 50
50782: PUSH
50783: LD_INT 51
50785: PUSH
50786: LD_INT 52
50788: PUSH
50789: LD_INT 53
50791: PUSH
50792: LD_INT 54
50794: PUSH
50795: LD_INT 55
50797: PUSH
50798: LD_INT 56
50800: PUSH
50801: LD_INT 57
50803: PUSH
50804: LD_INT 58
50806: PUSH
50807: LD_INT 59
50809: PUSH
50810: LD_INT 63
50812: PUSH
50813: LD_INT 64
50815: PUSH
50816: LD_INT 65
50818: PUSH
50819: LD_INT 82
50821: PUSH
50822: LD_INT 83
50824: PUSH
50825: LD_INT 84
50827: PUSH
50828: LD_INT 85
50830: PUSH
50831: LD_INT 86
50833: PUSH
50834: EMPTY
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: LIST
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: LIST
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: LIST
50878: LIST
50879: LIST
50880: LIST
50881: LIST
50882: LIST
50883: LIST
50884: LIST
50885: LIST
50886: LIST
50887: LIST
50888: ST_TO_ADDR
50889: GO 50892
50891: POP
// if state > - 1 and state < 3 then
50892: LD_VAR 0 3
50896: PUSH
50897: LD_INT 1
50899: NEG
50900: GREATER
50901: PUSH
50902: LD_VAR 0 3
50906: PUSH
50907: LD_INT 3
50909: LESS
50910: AND
50911: IFFALSE 50968
// for i in result do
50913: LD_ADDR_VAR 0 5
50917: PUSH
50918: LD_VAR 0 4
50922: PUSH
50923: FOR_IN
50924: IFFALSE 50966
// if GetTech ( i , side ) <> state then
50926: LD_VAR 0 5
50930: PPUSH
50931: LD_VAR 0 1
50935: PPUSH
50936: CALL_OW 321
50940: PUSH
50941: LD_VAR 0 3
50945: NONEQUAL
50946: IFFALSE 50964
// result := result diff i ;
50948: LD_ADDR_VAR 0 4
50952: PUSH
50953: LD_VAR 0 4
50957: PUSH
50958: LD_VAR 0 5
50962: DIFF
50963: ST_TO_ADDR
50964: GO 50923
50966: POP
50967: POP
// end ;
50968: LD_VAR 0 4
50972: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
50973: LD_INT 0
50975: PPUSH
50976: PPUSH
50977: PPUSH
// result := true ;
50978: LD_ADDR_VAR 0 3
50982: PUSH
50983: LD_INT 1
50985: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
50986: LD_ADDR_VAR 0 5
50990: PUSH
50991: LD_VAR 0 2
50995: PPUSH
50996: CALL_OW 480
51000: ST_TO_ADDR
// if not tmp then
51001: LD_VAR 0 5
51005: NOT
51006: IFFALSE 51010
// exit ;
51008: GO 51059
// for i in tmp do
51010: LD_ADDR_VAR 0 4
51014: PUSH
51015: LD_VAR 0 5
51019: PUSH
51020: FOR_IN
51021: IFFALSE 51057
// if GetTech ( i , side ) <> state_researched then
51023: LD_VAR 0 4
51027: PPUSH
51028: LD_VAR 0 1
51032: PPUSH
51033: CALL_OW 321
51037: PUSH
51038: LD_INT 2
51040: NONEQUAL
51041: IFFALSE 51055
// begin result := false ;
51043: LD_ADDR_VAR 0 3
51047: PUSH
51048: LD_INT 0
51050: ST_TO_ADDR
// exit ;
51051: POP
51052: POP
51053: GO 51059
// end ;
51055: GO 51020
51057: POP
51058: POP
// end ;
51059: LD_VAR 0 3
51063: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
51064: LD_INT 0
51066: PPUSH
51067: PPUSH
51068: PPUSH
51069: PPUSH
51070: PPUSH
51071: PPUSH
51072: PPUSH
51073: PPUSH
51074: PPUSH
51075: PPUSH
51076: PPUSH
51077: PPUSH
51078: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
51079: LD_VAR 0 1
51083: NOT
51084: PUSH
51085: LD_VAR 0 1
51089: PPUSH
51090: CALL_OW 257
51094: PUSH
51095: LD_INT 9
51097: NONEQUAL
51098: OR
51099: IFFALSE 51103
// exit ;
51101: GO 51676
// side := GetSide ( unit ) ;
51103: LD_ADDR_VAR 0 9
51107: PUSH
51108: LD_VAR 0 1
51112: PPUSH
51113: CALL_OW 255
51117: ST_TO_ADDR
// tech_space := tech_spacanom ;
51118: LD_ADDR_VAR 0 12
51122: PUSH
51123: LD_INT 29
51125: ST_TO_ADDR
// tech_time := tech_taurad ;
51126: LD_ADDR_VAR 0 13
51130: PUSH
51131: LD_INT 28
51133: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
51134: LD_ADDR_VAR 0 11
51138: PUSH
51139: LD_VAR 0 1
51143: PPUSH
51144: CALL_OW 310
51148: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
51149: LD_VAR 0 11
51153: PPUSH
51154: CALL_OW 247
51158: PUSH
51159: LD_INT 2
51161: EQUAL
51162: IFFALSE 51166
// exit ;
51164: GO 51676
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51166: LD_ADDR_VAR 0 8
51170: PUSH
51171: LD_INT 81
51173: PUSH
51174: LD_VAR 0 9
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: LD_INT 21
51188: PUSH
51189: LD_INT 3
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PPUSH
51204: CALL_OW 69
51208: ST_TO_ADDR
// if not tmp then
51209: LD_VAR 0 8
51213: NOT
51214: IFFALSE 51218
// exit ;
51216: GO 51676
// if in_unit then
51218: LD_VAR 0 11
51222: IFFALSE 51246
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51224: LD_ADDR_VAR 0 10
51228: PUSH
51229: LD_VAR 0 8
51233: PPUSH
51234: LD_VAR 0 11
51238: PPUSH
51239: CALL_OW 74
51243: ST_TO_ADDR
51244: GO 51266
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51246: LD_ADDR_VAR 0 10
51250: PUSH
51251: LD_VAR 0 8
51255: PPUSH
51256: LD_VAR 0 1
51260: PPUSH
51261: CALL_OW 74
51265: ST_TO_ADDR
// if not enemy then
51266: LD_VAR 0 10
51270: NOT
51271: IFFALSE 51275
// exit ;
51273: GO 51676
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51275: LD_VAR 0 11
51279: PUSH
51280: LD_VAR 0 11
51284: PPUSH
51285: LD_VAR 0 10
51289: PPUSH
51290: CALL_OW 296
51294: PUSH
51295: LD_INT 13
51297: GREATER
51298: AND
51299: PUSH
51300: LD_VAR 0 1
51304: PPUSH
51305: LD_VAR 0 10
51309: PPUSH
51310: CALL_OW 296
51314: PUSH
51315: LD_INT 12
51317: GREATER
51318: OR
51319: IFFALSE 51323
// exit ;
51321: GO 51676
// missile := [ 1 ] ;
51323: LD_ADDR_VAR 0 14
51327: PUSH
51328: LD_INT 1
51330: PUSH
51331: EMPTY
51332: LIST
51333: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51334: LD_VAR 0 9
51338: PPUSH
51339: LD_VAR 0 12
51343: PPUSH
51344: CALL_OW 325
51348: IFFALSE 51377
// missile := Replace ( missile , missile + 1 , 2 ) ;
51350: LD_ADDR_VAR 0 14
51354: PUSH
51355: LD_VAR 0 14
51359: PPUSH
51360: LD_VAR 0 14
51364: PUSH
51365: LD_INT 1
51367: PLUS
51368: PPUSH
51369: LD_INT 2
51371: PPUSH
51372: CALL_OW 1
51376: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51377: LD_VAR 0 9
51381: PPUSH
51382: LD_VAR 0 13
51386: PPUSH
51387: CALL_OW 325
51391: PUSH
51392: LD_VAR 0 10
51396: PPUSH
51397: CALL_OW 255
51401: PPUSH
51402: LD_VAR 0 13
51406: PPUSH
51407: CALL_OW 325
51411: NOT
51412: AND
51413: IFFALSE 51442
// missile := Replace ( missile , missile + 1 , 3 ) ;
51415: LD_ADDR_VAR 0 14
51419: PUSH
51420: LD_VAR 0 14
51424: PPUSH
51425: LD_VAR 0 14
51429: PUSH
51430: LD_INT 1
51432: PLUS
51433: PPUSH
51434: LD_INT 3
51436: PPUSH
51437: CALL_OW 1
51441: ST_TO_ADDR
// if missile < 2 then
51442: LD_VAR 0 14
51446: PUSH
51447: LD_INT 2
51449: LESS
51450: IFFALSE 51454
// exit ;
51452: GO 51676
// x := GetX ( enemy ) ;
51454: LD_ADDR_VAR 0 4
51458: PUSH
51459: LD_VAR 0 10
51463: PPUSH
51464: CALL_OW 250
51468: ST_TO_ADDR
// y := GetY ( enemy ) ;
51469: LD_ADDR_VAR 0 5
51473: PUSH
51474: LD_VAR 0 10
51478: PPUSH
51479: CALL_OW 251
51483: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
51484: LD_ADDR_VAR 0 6
51488: PUSH
51489: LD_VAR 0 4
51493: PUSH
51494: LD_INT 1
51496: NEG
51497: PPUSH
51498: LD_INT 1
51500: PPUSH
51501: CALL_OW 12
51505: PLUS
51506: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
51507: LD_ADDR_VAR 0 7
51511: PUSH
51512: LD_VAR 0 5
51516: PUSH
51517: LD_INT 1
51519: NEG
51520: PPUSH
51521: LD_INT 1
51523: PPUSH
51524: CALL_OW 12
51528: PLUS
51529: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51530: LD_VAR 0 6
51534: PPUSH
51535: LD_VAR 0 7
51539: PPUSH
51540: CALL_OW 488
51544: NOT
51545: IFFALSE 51567
// begin _x := x ;
51547: LD_ADDR_VAR 0 6
51551: PUSH
51552: LD_VAR 0 4
51556: ST_TO_ADDR
// _y := y ;
51557: LD_ADDR_VAR 0 7
51561: PUSH
51562: LD_VAR 0 5
51566: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
51567: LD_ADDR_VAR 0 3
51571: PUSH
51572: LD_INT 1
51574: PPUSH
51575: LD_VAR 0 14
51579: PPUSH
51580: CALL_OW 12
51584: ST_TO_ADDR
// case i of 1 :
51585: LD_VAR 0 3
51589: PUSH
51590: LD_INT 1
51592: DOUBLE
51593: EQUAL
51594: IFTRUE 51598
51596: GO 51615
51598: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
51599: LD_VAR 0 1
51603: PPUSH
51604: LD_VAR 0 10
51608: PPUSH
51609: CALL_OW 115
51613: GO 51676
51615: LD_INT 2
51617: DOUBLE
51618: EQUAL
51619: IFTRUE 51623
51621: GO 51645
51623: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
51624: LD_VAR 0 1
51628: PPUSH
51629: LD_VAR 0 6
51633: PPUSH
51634: LD_VAR 0 7
51638: PPUSH
51639: CALL_OW 153
51643: GO 51676
51645: LD_INT 3
51647: DOUBLE
51648: EQUAL
51649: IFTRUE 51653
51651: GO 51675
51653: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
51654: LD_VAR 0 1
51658: PPUSH
51659: LD_VAR 0 6
51663: PPUSH
51664: LD_VAR 0 7
51668: PPUSH
51669: CALL_OW 154
51673: GO 51676
51675: POP
// end ;
51676: LD_VAR 0 2
51680: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
51681: LD_INT 0
51683: PPUSH
51684: PPUSH
51685: PPUSH
51686: PPUSH
51687: PPUSH
51688: PPUSH
// if not unit or not building then
51689: LD_VAR 0 1
51693: NOT
51694: PUSH
51695: LD_VAR 0 2
51699: NOT
51700: OR
51701: IFFALSE 51705
// exit ;
51703: GO 51863
// x := GetX ( building ) ;
51705: LD_ADDR_VAR 0 5
51709: PUSH
51710: LD_VAR 0 2
51714: PPUSH
51715: CALL_OW 250
51719: ST_TO_ADDR
// y := GetY ( building ) ;
51720: LD_ADDR_VAR 0 6
51724: PUSH
51725: LD_VAR 0 2
51729: PPUSH
51730: CALL_OW 251
51734: ST_TO_ADDR
// for i = 0 to 5 do
51735: LD_ADDR_VAR 0 4
51739: PUSH
51740: DOUBLE
51741: LD_INT 0
51743: DEC
51744: ST_TO_ADDR
51745: LD_INT 5
51747: PUSH
51748: FOR_TO
51749: IFFALSE 51861
// begin _x := ShiftX ( x , i , 3 ) ;
51751: LD_ADDR_VAR 0 7
51755: PUSH
51756: LD_VAR 0 5
51760: PPUSH
51761: LD_VAR 0 4
51765: PPUSH
51766: LD_INT 3
51768: PPUSH
51769: CALL_OW 272
51773: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
51774: LD_ADDR_VAR 0 8
51778: PUSH
51779: LD_VAR 0 6
51783: PPUSH
51784: LD_VAR 0 4
51788: PPUSH
51789: LD_INT 3
51791: PPUSH
51792: CALL_OW 273
51796: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51797: LD_VAR 0 7
51801: PPUSH
51802: LD_VAR 0 8
51806: PPUSH
51807: CALL_OW 488
51811: NOT
51812: IFFALSE 51816
// continue ;
51814: GO 51748
// if HexInfo ( _x , _y ) = 0 then
51816: LD_VAR 0 7
51820: PPUSH
51821: LD_VAR 0 8
51825: PPUSH
51826: CALL_OW 428
51830: PUSH
51831: LD_INT 0
51833: EQUAL
51834: IFFALSE 51859
// begin ComMoveXY ( unit , _x , _y ) ;
51836: LD_VAR 0 1
51840: PPUSH
51841: LD_VAR 0 7
51845: PPUSH
51846: LD_VAR 0 8
51850: PPUSH
51851: CALL_OW 111
// exit ;
51855: POP
51856: POP
51857: GO 51863
// end ; end ;
51859: GO 51748
51861: POP
51862: POP
// end ;
51863: LD_VAR 0 3
51867: RET
// export function ScanBase ( side , base_area ) ; begin
51868: LD_INT 0
51870: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
51871: LD_ADDR_VAR 0 3
51875: PUSH
51876: LD_VAR 0 2
51880: PPUSH
51881: LD_INT 81
51883: PUSH
51884: LD_VAR 0 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PPUSH
51893: CALL_OW 70
51897: ST_TO_ADDR
// end ;
51898: LD_VAR 0 3
51902: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
51903: LD_INT 0
51905: PPUSH
51906: PPUSH
51907: PPUSH
51908: PPUSH
// result := false ;
51909: LD_ADDR_VAR 0 2
51913: PUSH
51914: LD_INT 0
51916: ST_TO_ADDR
// side := GetSide ( unit ) ;
51917: LD_ADDR_VAR 0 3
51921: PUSH
51922: LD_VAR 0 1
51926: PPUSH
51927: CALL_OW 255
51931: ST_TO_ADDR
// nat := GetNation ( unit ) ;
51932: LD_ADDR_VAR 0 4
51936: PUSH
51937: LD_VAR 0 1
51941: PPUSH
51942: CALL_OW 248
51946: ST_TO_ADDR
// case nat of 1 :
51947: LD_VAR 0 4
51951: PUSH
51952: LD_INT 1
51954: DOUBLE
51955: EQUAL
51956: IFTRUE 51960
51958: GO 51971
51960: POP
// tech := tech_lassight ; 2 :
51961: LD_ADDR_VAR 0 5
51965: PUSH
51966: LD_INT 12
51968: ST_TO_ADDR
51969: GO 52010
51971: LD_INT 2
51973: DOUBLE
51974: EQUAL
51975: IFTRUE 51979
51977: GO 51990
51979: POP
// tech := tech_mortar ; 3 :
51980: LD_ADDR_VAR 0 5
51984: PUSH
51985: LD_INT 41
51987: ST_TO_ADDR
51988: GO 52010
51990: LD_INT 3
51992: DOUBLE
51993: EQUAL
51994: IFTRUE 51998
51996: GO 52009
51998: POP
// tech := tech_bazooka ; end ;
51999: LD_ADDR_VAR 0 5
52003: PUSH
52004: LD_INT 44
52006: ST_TO_ADDR
52007: GO 52010
52009: POP
// if Researched ( side , tech ) then
52010: LD_VAR 0 3
52014: PPUSH
52015: LD_VAR 0 5
52019: PPUSH
52020: CALL_OW 325
52024: IFFALSE 52051
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
52026: LD_ADDR_VAR 0 2
52030: PUSH
52031: LD_INT 5
52033: PUSH
52034: LD_INT 8
52036: PUSH
52037: LD_INT 9
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: LIST
52044: PUSH
52045: LD_VAR 0 4
52049: ARRAY
52050: ST_TO_ADDR
// end ;
52051: LD_VAR 0 2
52055: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
52056: LD_INT 0
52058: PPUSH
52059: PPUSH
52060: PPUSH
// if not mines then
52061: LD_VAR 0 2
52065: NOT
52066: IFFALSE 52070
// exit ;
52068: GO 52214
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52070: LD_ADDR_VAR 0 5
52074: PUSH
52075: LD_INT 81
52077: PUSH
52078: LD_VAR 0 1
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 3
52089: PUSH
52090: LD_INT 21
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: EMPTY
52105: LIST
52106: LIST
52107: PPUSH
52108: CALL_OW 69
52112: ST_TO_ADDR
// for i in mines do
52113: LD_ADDR_VAR 0 4
52117: PUSH
52118: LD_VAR 0 2
52122: PUSH
52123: FOR_IN
52124: IFFALSE 52212
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
52126: LD_VAR 0 4
52130: PUSH
52131: LD_INT 1
52133: ARRAY
52134: PPUSH
52135: LD_VAR 0 4
52139: PUSH
52140: LD_INT 2
52142: ARRAY
52143: PPUSH
52144: CALL_OW 458
52148: NOT
52149: IFFALSE 52153
// continue ;
52151: GO 52123
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
52153: LD_VAR 0 4
52157: PUSH
52158: LD_INT 1
52160: ARRAY
52161: PPUSH
52162: LD_VAR 0 4
52166: PUSH
52167: LD_INT 2
52169: ARRAY
52170: PPUSH
52171: CALL_OW 428
52175: PUSH
52176: LD_VAR 0 5
52180: IN
52181: IFFALSE 52210
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
52183: LD_VAR 0 4
52187: PUSH
52188: LD_INT 1
52190: ARRAY
52191: PPUSH
52192: LD_VAR 0 4
52196: PUSH
52197: LD_INT 2
52199: ARRAY
52200: PPUSH
52201: LD_VAR 0 1
52205: PPUSH
52206: CALL_OW 456
// end ;
52210: GO 52123
52212: POP
52213: POP
// end ;
52214: LD_VAR 0 3
52218: RET
// export function Count ( array ) ; var i ; begin
52219: LD_INT 0
52221: PPUSH
52222: PPUSH
// result := 0 ;
52223: LD_ADDR_VAR 0 2
52227: PUSH
52228: LD_INT 0
52230: ST_TO_ADDR
// for i in array do
52231: LD_ADDR_VAR 0 3
52235: PUSH
52236: LD_VAR 0 1
52240: PUSH
52241: FOR_IN
52242: IFFALSE 52266
// if i then
52244: LD_VAR 0 3
52248: IFFALSE 52264
// result := result + 1 ;
52250: LD_ADDR_VAR 0 2
52254: PUSH
52255: LD_VAR 0 2
52259: PUSH
52260: LD_INT 1
52262: PLUS
52263: ST_TO_ADDR
52264: GO 52241
52266: POP
52267: POP
// end ;
52268: LD_VAR 0 2
52272: RET
// export function IsEmpty ( building ) ; begin
52273: LD_INT 0
52275: PPUSH
// if not building then
52276: LD_VAR 0 1
52280: NOT
52281: IFFALSE 52285
// exit ;
52283: GO 52328
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
52285: LD_ADDR_VAR 0 2
52289: PUSH
52290: LD_VAR 0 1
52294: PUSH
52295: LD_INT 22
52297: PUSH
52298: LD_VAR 0 1
52302: PPUSH
52303: CALL_OW 255
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 58
52314: PUSH
52315: EMPTY
52316: LIST
52317: PUSH
52318: EMPTY
52319: LIST
52320: LIST
52321: PPUSH
52322: CALL_OW 69
52326: IN
52327: ST_TO_ADDR
// end ;
52328: LD_VAR 0 2
52332: RET
// export function IsNotFull ( building ) ; var places ; begin
52333: LD_INT 0
52335: PPUSH
52336: PPUSH
// if not building then
52337: LD_VAR 0 1
52341: NOT
52342: IFFALSE 52346
// exit ;
52344: GO 52517
// result := false ;
52346: LD_ADDR_VAR 0 2
52350: PUSH
52351: LD_INT 0
52353: ST_TO_ADDR
// places := 0 ;
52354: LD_ADDR_VAR 0 3
52358: PUSH
52359: LD_INT 0
52361: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
52362: LD_VAR 0 1
52366: PPUSH
52367: CALL_OW 266
52371: PUSH
52372: LD_INT 0
52374: DOUBLE
52375: EQUAL
52376: IFTRUE 52434
52378: LD_INT 1
52380: DOUBLE
52381: EQUAL
52382: IFTRUE 52434
52384: LD_INT 6
52386: DOUBLE
52387: EQUAL
52388: IFTRUE 52434
52390: LD_INT 7
52392: DOUBLE
52393: EQUAL
52394: IFTRUE 52434
52396: LD_INT 8
52398: DOUBLE
52399: EQUAL
52400: IFTRUE 52434
52402: LD_INT 4
52404: DOUBLE
52405: EQUAL
52406: IFTRUE 52434
52408: LD_INT 5
52410: DOUBLE
52411: EQUAL
52412: IFTRUE 52434
52414: LD_INT 2
52416: DOUBLE
52417: EQUAL
52418: IFTRUE 52434
52420: LD_INT 3
52422: DOUBLE
52423: EQUAL
52424: IFTRUE 52434
52426: LD_INT 35
52428: DOUBLE
52429: EQUAL
52430: IFTRUE 52434
52432: GO 52445
52434: POP
// places := 6 ; b_bunker , b_breastwork :
52435: LD_ADDR_VAR 0 3
52439: PUSH
52440: LD_INT 6
52442: ST_TO_ADDR
52443: GO 52490
52445: LD_INT 32
52447: DOUBLE
52448: EQUAL
52449: IFTRUE 52459
52451: LD_INT 31
52453: DOUBLE
52454: EQUAL
52455: IFTRUE 52459
52457: GO 52470
52459: POP
// places := 1 ; b_control_tower :
52460: LD_ADDR_VAR 0 3
52464: PUSH
52465: LD_INT 1
52467: ST_TO_ADDR
52468: GO 52490
52470: LD_INT 36
52472: DOUBLE
52473: EQUAL
52474: IFTRUE 52478
52476: GO 52489
52478: POP
// places := 3 ; end ;
52479: LD_ADDR_VAR 0 3
52483: PUSH
52484: LD_INT 3
52486: ST_TO_ADDR
52487: GO 52490
52489: POP
// if places then
52490: LD_VAR 0 3
52494: IFFALSE 52517
// result := UnitsInside ( building ) < places ;
52496: LD_ADDR_VAR 0 2
52500: PUSH
52501: LD_VAR 0 1
52505: PPUSH
52506: CALL_OW 313
52510: PUSH
52511: LD_VAR 0 3
52515: LESS
52516: ST_TO_ADDR
// end ;
52517: LD_VAR 0 2
52521: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52522: LD_INT 0
52524: PPUSH
52525: PPUSH
52526: PPUSH
52527: PPUSH
// tmp := [ ] ;
52528: LD_ADDR_VAR 0 3
52532: PUSH
52533: EMPTY
52534: ST_TO_ADDR
// list := [ ] ;
52535: LD_ADDR_VAR 0 5
52539: PUSH
52540: EMPTY
52541: ST_TO_ADDR
// for i = 16 to 25 do
52542: LD_ADDR_VAR 0 4
52546: PUSH
52547: DOUBLE
52548: LD_INT 16
52550: DEC
52551: ST_TO_ADDR
52552: LD_INT 25
52554: PUSH
52555: FOR_TO
52556: IFFALSE 52629
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52558: LD_ADDR_VAR 0 3
52562: PUSH
52563: LD_VAR 0 3
52567: PUSH
52568: LD_INT 22
52570: PUSH
52571: LD_VAR 0 1
52575: PPUSH
52576: CALL_OW 255
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 91
52587: PUSH
52588: LD_VAR 0 1
52592: PUSH
52593: LD_INT 6
52595: PUSH
52596: EMPTY
52597: LIST
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 30
52603: PUSH
52604: LD_VAR 0 4
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: PPUSH
52621: CALL_OW 69
52625: ADD
52626: ST_TO_ADDR
52627: GO 52555
52629: POP
52630: POP
// for i = 1 to tmp do
52631: LD_ADDR_VAR 0 4
52635: PUSH
52636: DOUBLE
52637: LD_INT 1
52639: DEC
52640: ST_TO_ADDR
52641: LD_VAR 0 3
52645: PUSH
52646: FOR_TO
52647: IFFALSE 52735
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52649: LD_ADDR_VAR 0 5
52653: PUSH
52654: LD_VAR 0 5
52658: PUSH
52659: LD_VAR 0 3
52663: PUSH
52664: LD_VAR 0 4
52668: ARRAY
52669: PPUSH
52670: CALL_OW 266
52674: PUSH
52675: LD_VAR 0 3
52679: PUSH
52680: LD_VAR 0 4
52684: ARRAY
52685: PPUSH
52686: CALL_OW 250
52690: PUSH
52691: LD_VAR 0 3
52695: PUSH
52696: LD_VAR 0 4
52700: ARRAY
52701: PPUSH
52702: CALL_OW 251
52706: PUSH
52707: LD_VAR 0 3
52711: PUSH
52712: LD_VAR 0 4
52716: ARRAY
52717: PPUSH
52718: CALL_OW 254
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: LIST
52727: LIST
52728: PUSH
52729: EMPTY
52730: LIST
52731: ADD
52732: ST_TO_ADDR
52733: GO 52646
52735: POP
52736: POP
// result := list ;
52737: LD_ADDR_VAR 0 2
52741: PUSH
52742: LD_VAR 0 5
52746: ST_TO_ADDR
// end ;
52747: LD_VAR 0 2
52751: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52752: LD_INT 0
52754: PPUSH
52755: PPUSH
52756: PPUSH
52757: PPUSH
52758: PPUSH
52759: PPUSH
52760: PPUSH
// if not factory then
52761: LD_VAR 0 1
52765: NOT
52766: IFFALSE 52770
// exit ;
52768: GO 53363
// if control = control_apeman then
52770: LD_VAR 0 4
52774: PUSH
52775: LD_INT 5
52777: EQUAL
52778: IFFALSE 52887
// begin tmp := UnitsInside ( factory ) ;
52780: LD_ADDR_VAR 0 8
52784: PUSH
52785: LD_VAR 0 1
52789: PPUSH
52790: CALL_OW 313
52794: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52795: LD_VAR 0 8
52799: PPUSH
52800: LD_INT 25
52802: PUSH
52803: LD_INT 12
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PPUSH
52810: CALL_OW 72
52814: NOT
52815: IFFALSE 52825
// control := control_manual ;
52817: LD_ADDR_VAR 0 4
52821: PUSH
52822: LD_INT 1
52824: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
52825: LD_ADDR_VAR 0 8
52829: PUSH
52830: LD_VAR 0 1
52834: PPUSH
52835: CALL 52522 0 1
52839: ST_TO_ADDR
// if tmp then
52840: LD_VAR 0 8
52844: IFFALSE 52887
// begin for i in tmp do
52846: LD_ADDR_VAR 0 7
52850: PUSH
52851: LD_VAR 0 8
52855: PUSH
52856: FOR_IN
52857: IFFALSE 52885
// if i [ 1 ] = b_ext_radio then
52859: LD_VAR 0 7
52863: PUSH
52864: LD_INT 1
52866: ARRAY
52867: PUSH
52868: LD_INT 22
52870: EQUAL
52871: IFFALSE 52883
// begin control := control_remote ;
52873: LD_ADDR_VAR 0 4
52877: PUSH
52878: LD_INT 2
52880: ST_TO_ADDR
// break ;
52881: GO 52885
// end ;
52883: GO 52856
52885: POP
52886: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52887: LD_VAR 0 1
52891: PPUSH
52892: LD_VAR 0 2
52896: PPUSH
52897: LD_VAR 0 3
52901: PPUSH
52902: LD_VAR 0 4
52906: PPUSH
52907: LD_VAR 0 5
52911: PPUSH
52912: CALL_OW 448
52916: IFFALSE 52951
// begin result := [ chassis , engine , control , weapon ] ;
52918: LD_ADDR_VAR 0 6
52922: PUSH
52923: LD_VAR 0 2
52927: PUSH
52928: LD_VAR 0 3
52932: PUSH
52933: LD_VAR 0 4
52937: PUSH
52938: LD_VAR 0 5
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: ST_TO_ADDR
// exit ;
52949: GO 53363
// end ; _chassis := AvailableChassisList ( factory ) ;
52951: LD_ADDR_VAR 0 9
52955: PUSH
52956: LD_VAR 0 1
52960: PPUSH
52961: CALL_OW 475
52965: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
52966: LD_ADDR_VAR 0 11
52970: PUSH
52971: LD_VAR 0 1
52975: PPUSH
52976: CALL_OW 476
52980: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
52981: LD_ADDR_VAR 0 12
52985: PUSH
52986: LD_VAR 0 1
52990: PPUSH
52991: CALL_OW 477
52995: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
52996: LD_ADDR_VAR 0 10
53000: PUSH
53001: LD_VAR 0 1
53005: PPUSH
53006: CALL_OW 478
53010: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
53011: LD_VAR 0 9
53015: NOT
53016: PUSH
53017: LD_VAR 0 11
53021: NOT
53022: OR
53023: PUSH
53024: LD_VAR 0 12
53028: NOT
53029: OR
53030: PUSH
53031: LD_VAR 0 10
53035: NOT
53036: OR
53037: IFFALSE 53072
// begin result := [ chassis , engine , control , weapon ] ;
53039: LD_ADDR_VAR 0 6
53043: PUSH
53044: LD_VAR 0 2
53048: PUSH
53049: LD_VAR 0 3
53053: PUSH
53054: LD_VAR 0 4
53058: PUSH
53059: LD_VAR 0 5
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: LIST
53068: LIST
53069: ST_TO_ADDR
// exit ;
53070: GO 53363
// end ; if not chassis in _chassis then
53072: LD_VAR 0 2
53076: PUSH
53077: LD_VAR 0 9
53081: IN
53082: NOT
53083: IFFALSE 53109
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
53085: LD_ADDR_VAR 0 2
53089: PUSH
53090: LD_VAR 0 9
53094: PUSH
53095: LD_INT 1
53097: PPUSH
53098: LD_VAR 0 9
53102: PPUSH
53103: CALL_OW 12
53107: ARRAY
53108: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
53109: LD_VAR 0 2
53113: PPUSH
53114: LD_VAR 0 3
53118: PPUSH
53119: CALL 53368 0 2
53123: NOT
53124: IFFALSE 53183
// repeat engine := _engine [ 1 ] ;
53126: LD_ADDR_VAR 0 3
53130: PUSH
53131: LD_VAR 0 11
53135: PUSH
53136: LD_INT 1
53138: ARRAY
53139: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
53140: LD_ADDR_VAR 0 11
53144: PUSH
53145: LD_VAR 0 11
53149: PPUSH
53150: LD_INT 1
53152: PPUSH
53153: CALL_OW 3
53157: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
53158: LD_VAR 0 2
53162: PPUSH
53163: LD_VAR 0 3
53167: PPUSH
53168: CALL 53368 0 2
53172: PUSH
53173: LD_VAR 0 11
53177: PUSH
53178: EMPTY
53179: EQUAL
53180: OR
53181: IFFALSE 53126
// if not control in _control then
53183: LD_VAR 0 4
53187: PUSH
53188: LD_VAR 0 12
53192: IN
53193: NOT
53194: IFFALSE 53220
// control := _control [ rand ( 1 , _control ) ] ;
53196: LD_ADDR_VAR 0 4
53200: PUSH
53201: LD_VAR 0 12
53205: PUSH
53206: LD_INT 1
53208: PPUSH
53209: LD_VAR 0 12
53213: PPUSH
53214: CALL_OW 12
53218: ARRAY
53219: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
53220: LD_VAR 0 2
53224: PPUSH
53225: LD_VAR 0 5
53229: PPUSH
53230: CALL 53588 0 2
53234: NOT
53235: IFFALSE 53294
// repeat weapon := _weapon [ 1 ] ;
53237: LD_ADDR_VAR 0 5
53241: PUSH
53242: LD_VAR 0 10
53246: PUSH
53247: LD_INT 1
53249: ARRAY
53250: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
53251: LD_ADDR_VAR 0 10
53255: PUSH
53256: LD_VAR 0 10
53260: PPUSH
53261: LD_INT 1
53263: PPUSH
53264: CALL_OW 3
53268: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
53269: LD_VAR 0 2
53273: PPUSH
53274: LD_VAR 0 5
53278: PPUSH
53279: CALL 53588 0 2
53283: PUSH
53284: LD_VAR 0 10
53288: PUSH
53289: EMPTY
53290: EQUAL
53291: OR
53292: IFFALSE 53237
// result := [ ] ;
53294: LD_ADDR_VAR 0 6
53298: PUSH
53299: EMPTY
53300: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53301: LD_VAR 0 1
53305: PPUSH
53306: LD_VAR 0 2
53310: PPUSH
53311: LD_VAR 0 3
53315: PPUSH
53316: LD_VAR 0 4
53320: PPUSH
53321: LD_VAR 0 5
53325: PPUSH
53326: CALL_OW 448
53330: IFFALSE 53363
// result := [ chassis , engine , control , weapon ] ;
53332: LD_ADDR_VAR 0 6
53336: PUSH
53337: LD_VAR 0 2
53341: PUSH
53342: LD_VAR 0 3
53346: PUSH
53347: LD_VAR 0 4
53351: PUSH
53352: LD_VAR 0 5
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: LIST
53361: LIST
53362: ST_TO_ADDR
// end ;
53363: LD_VAR 0 6
53367: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
53368: LD_INT 0
53370: PPUSH
// if not chassis or not engine then
53371: LD_VAR 0 1
53375: NOT
53376: PUSH
53377: LD_VAR 0 2
53381: NOT
53382: OR
53383: IFFALSE 53387
// exit ;
53385: GO 53583
// case engine of engine_solar :
53387: LD_VAR 0 2
53391: PUSH
53392: LD_INT 2
53394: DOUBLE
53395: EQUAL
53396: IFTRUE 53400
53398: GO 53438
53400: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
53401: LD_ADDR_VAR 0 3
53405: PUSH
53406: LD_INT 11
53408: PUSH
53409: LD_INT 12
53411: PUSH
53412: LD_INT 13
53414: PUSH
53415: LD_INT 14
53417: PUSH
53418: LD_INT 1
53420: PUSH
53421: LD_INT 2
53423: PUSH
53424: LD_INT 3
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: ST_TO_ADDR
53436: GO 53567
53438: LD_INT 1
53440: DOUBLE
53441: EQUAL
53442: IFTRUE 53446
53444: GO 53508
53446: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53447: LD_ADDR_VAR 0 3
53451: PUSH
53452: LD_INT 11
53454: PUSH
53455: LD_INT 12
53457: PUSH
53458: LD_INT 13
53460: PUSH
53461: LD_INT 14
53463: PUSH
53464: LD_INT 1
53466: PUSH
53467: LD_INT 2
53469: PUSH
53470: LD_INT 3
53472: PUSH
53473: LD_INT 4
53475: PUSH
53476: LD_INT 5
53478: PUSH
53479: LD_INT 21
53481: PUSH
53482: LD_INT 23
53484: PUSH
53485: LD_INT 22
53487: PUSH
53488: LD_INT 24
53490: PUSH
53491: EMPTY
53492: LIST
53493: LIST
53494: LIST
53495: LIST
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: LIST
53504: LIST
53505: ST_TO_ADDR
53506: GO 53567
53508: LD_INT 3
53510: DOUBLE
53511: EQUAL
53512: IFTRUE 53516
53514: GO 53566
53516: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53517: LD_ADDR_VAR 0 3
53521: PUSH
53522: LD_INT 13
53524: PUSH
53525: LD_INT 14
53527: PUSH
53528: LD_INT 2
53530: PUSH
53531: LD_INT 3
53533: PUSH
53534: LD_INT 4
53536: PUSH
53537: LD_INT 5
53539: PUSH
53540: LD_INT 21
53542: PUSH
53543: LD_INT 22
53545: PUSH
53546: LD_INT 23
53548: PUSH
53549: LD_INT 24
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: LIST
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: ST_TO_ADDR
53564: GO 53567
53566: POP
// result := ( chassis in result ) ;
53567: LD_ADDR_VAR 0 3
53571: PUSH
53572: LD_VAR 0 1
53576: PUSH
53577: LD_VAR 0 3
53581: IN
53582: ST_TO_ADDR
// end ;
53583: LD_VAR 0 3
53587: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53588: LD_INT 0
53590: PPUSH
// if not chassis or not weapon then
53591: LD_VAR 0 1
53595: NOT
53596: PUSH
53597: LD_VAR 0 2
53601: NOT
53602: OR
53603: IFFALSE 53607
// exit ;
53605: GO 54669
// case weapon of us_machine_gun :
53607: LD_VAR 0 2
53611: PUSH
53612: LD_INT 2
53614: DOUBLE
53615: EQUAL
53616: IFTRUE 53620
53618: GO 53650
53620: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53621: LD_ADDR_VAR 0 3
53625: PUSH
53626: LD_INT 1
53628: PUSH
53629: LD_INT 2
53631: PUSH
53632: LD_INT 3
53634: PUSH
53635: LD_INT 4
53637: PUSH
53638: LD_INT 5
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: ST_TO_ADDR
53648: GO 54653
53650: LD_INT 3
53652: DOUBLE
53653: EQUAL
53654: IFTRUE 53658
53656: GO 53688
53658: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53659: LD_ADDR_VAR 0 3
53663: PUSH
53664: LD_INT 1
53666: PUSH
53667: LD_INT 2
53669: PUSH
53670: LD_INT 3
53672: PUSH
53673: LD_INT 4
53675: PUSH
53676: LD_INT 5
53678: PUSH
53679: EMPTY
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: ST_TO_ADDR
53686: GO 54653
53688: LD_INT 11
53690: DOUBLE
53691: EQUAL
53692: IFTRUE 53696
53694: GO 53726
53696: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53697: LD_ADDR_VAR 0 3
53701: PUSH
53702: LD_INT 1
53704: PUSH
53705: LD_INT 2
53707: PUSH
53708: LD_INT 3
53710: PUSH
53711: LD_INT 4
53713: PUSH
53714: LD_INT 5
53716: PUSH
53717: EMPTY
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: ST_TO_ADDR
53724: GO 54653
53726: LD_INT 4
53728: DOUBLE
53729: EQUAL
53730: IFTRUE 53734
53732: GO 53760
53734: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53735: LD_ADDR_VAR 0 3
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: LD_INT 3
53745: PUSH
53746: LD_INT 4
53748: PUSH
53749: LD_INT 5
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
53758: GO 54653
53760: LD_INT 5
53762: DOUBLE
53763: EQUAL
53764: IFTRUE 53768
53766: GO 53794
53768: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53769: LD_ADDR_VAR 0 3
53773: PUSH
53774: LD_INT 2
53776: PUSH
53777: LD_INT 3
53779: PUSH
53780: LD_INT 4
53782: PUSH
53783: LD_INT 5
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: ST_TO_ADDR
53792: GO 54653
53794: LD_INT 9
53796: DOUBLE
53797: EQUAL
53798: IFTRUE 53802
53800: GO 53828
53802: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53803: LD_ADDR_VAR 0 3
53807: PUSH
53808: LD_INT 2
53810: PUSH
53811: LD_INT 3
53813: PUSH
53814: LD_INT 4
53816: PUSH
53817: LD_INT 5
53819: PUSH
53820: EMPTY
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: ST_TO_ADDR
53826: GO 54653
53828: LD_INT 7
53830: DOUBLE
53831: EQUAL
53832: IFTRUE 53836
53834: GO 53862
53836: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
53837: LD_ADDR_VAR 0 3
53841: PUSH
53842: LD_INT 2
53844: PUSH
53845: LD_INT 3
53847: PUSH
53848: LD_INT 4
53850: PUSH
53851: LD_INT 5
53853: PUSH
53854: EMPTY
53855: LIST
53856: LIST
53857: LIST
53858: LIST
53859: ST_TO_ADDR
53860: GO 54653
53862: LD_INT 12
53864: DOUBLE
53865: EQUAL
53866: IFTRUE 53870
53868: GO 53896
53870: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
53871: LD_ADDR_VAR 0 3
53875: PUSH
53876: LD_INT 2
53878: PUSH
53879: LD_INT 3
53881: PUSH
53882: LD_INT 4
53884: PUSH
53885: LD_INT 5
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: ST_TO_ADDR
53894: GO 54653
53896: LD_INT 13
53898: DOUBLE
53899: EQUAL
53900: IFTRUE 53904
53902: GO 53930
53904: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
53905: LD_ADDR_VAR 0 3
53909: PUSH
53910: LD_INT 2
53912: PUSH
53913: LD_INT 3
53915: PUSH
53916: LD_INT 4
53918: PUSH
53919: LD_INT 5
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: LIST
53926: LIST
53927: ST_TO_ADDR
53928: GO 54653
53930: LD_INT 14
53932: DOUBLE
53933: EQUAL
53934: IFTRUE 53938
53936: GO 53956
53938: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
53939: LD_ADDR_VAR 0 3
53943: PUSH
53944: LD_INT 4
53946: PUSH
53947: LD_INT 5
53949: PUSH
53950: EMPTY
53951: LIST
53952: LIST
53953: ST_TO_ADDR
53954: GO 54653
53956: LD_INT 6
53958: DOUBLE
53959: EQUAL
53960: IFTRUE 53964
53962: GO 53982
53964: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
53965: LD_ADDR_VAR 0 3
53969: PUSH
53970: LD_INT 4
53972: PUSH
53973: LD_INT 5
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: ST_TO_ADDR
53980: GO 54653
53982: LD_INT 10
53984: DOUBLE
53985: EQUAL
53986: IFTRUE 53990
53988: GO 54008
53990: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
53991: LD_ADDR_VAR 0 3
53995: PUSH
53996: LD_INT 4
53998: PUSH
53999: LD_INT 5
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: ST_TO_ADDR
54006: GO 54653
54008: LD_INT 22
54010: DOUBLE
54011: EQUAL
54012: IFTRUE 54016
54014: GO 54042
54016: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
54017: LD_ADDR_VAR 0 3
54021: PUSH
54022: LD_INT 11
54024: PUSH
54025: LD_INT 12
54027: PUSH
54028: LD_INT 13
54030: PUSH
54031: LD_INT 14
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: ST_TO_ADDR
54040: GO 54653
54042: LD_INT 23
54044: DOUBLE
54045: EQUAL
54046: IFTRUE 54050
54048: GO 54076
54050: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
54051: LD_ADDR_VAR 0 3
54055: PUSH
54056: LD_INT 11
54058: PUSH
54059: LD_INT 12
54061: PUSH
54062: LD_INT 13
54064: PUSH
54065: LD_INT 14
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: ST_TO_ADDR
54074: GO 54653
54076: LD_INT 24
54078: DOUBLE
54079: EQUAL
54080: IFTRUE 54084
54082: GO 54110
54084: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
54085: LD_ADDR_VAR 0 3
54089: PUSH
54090: LD_INT 11
54092: PUSH
54093: LD_INT 12
54095: PUSH
54096: LD_INT 13
54098: PUSH
54099: LD_INT 14
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: ST_TO_ADDR
54108: GO 54653
54110: LD_INT 30
54112: DOUBLE
54113: EQUAL
54114: IFTRUE 54118
54116: GO 54144
54118: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
54119: LD_ADDR_VAR 0 3
54123: PUSH
54124: LD_INT 11
54126: PUSH
54127: LD_INT 12
54129: PUSH
54130: LD_INT 13
54132: PUSH
54133: LD_INT 14
54135: PUSH
54136: EMPTY
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: ST_TO_ADDR
54142: GO 54653
54144: LD_INT 25
54146: DOUBLE
54147: EQUAL
54148: IFTRUE 54152
54150: GO 54170
54152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
54153: LD_ADDR_VAR 0 3
54157: PUSH
54158: LD_INT 13
54160: PUSH
54161: LD_INT 14
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: ST_TO_ADDR
54168: GO 54653
54170: LD_INT 27
54172: DOUBLE
54173: EQUAL
54174: IFTRUE 54178
54176: GO 54196
54178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
54179: LD_ADDR_VAR 0 3
54183: PUSH
54184: LD_INT 13
54186: PUSH
54187: LD_INT 14
54189: PUSH
54190: EMPTY
54191: LIST
54192: LIST
54193: ST_TO_ADDR
54194: GO 54653
54196: LD_EXP 75
54200: DOUBLE
54201: EQUAL
54202: IFTRUE 54206
54204: GO 54232
54206: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
54207: LD_ADDR_VAR 0 3
54211: PUSH
54212: LD_INT 11
54214: PUSH
54215: LD_INT 12
54217: PUSH
54218: LD_INT 13
54220: PUSH
54221: LD_INT 14
54223: PUSH
54224: EMPTY
54225: LIST
54226: LIST
54227: LIST
54228: LIST
54229: ST_TO_ADDR
54230: GO 54653
54232: LD_INT 28
54234: DOUBLE
54235: EQUAL
54236: IFTRUE 54240
54238: GO 54258
54240: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
54241: LD_ADDR_VAR 0 3
54245: PUSH
54246: LD_INT 13
54248: PUSH
54249: LD_INT 14
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: ST_TO_ADDR
54256: GO 54653
54258: LD_INT 29
54260: DOUBLE
54261: EQUAL
54262: IFTRUE 54266
54264: GO 54284
54266: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
54267: LD_ADDR_VAR 0 3
54271: PUSH
54272: LD_INT 13
54274: PUSH
54275: LD_INT 14
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: ST_TO_ADDR
54282: GO 54653
54284: LD_INT 31
54286: DOUBLE
54287: EQUAL
54288: IFTRUE 54292
54290: GO 54310
54292: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
54293: LD_ADDR_VAR 0 3
54297: PUSH
54298: LD_INT 13
54300: PUSH
54301: LD_INT 14
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: ST_TO_ADDR
54308: GO 54653
54310: LD_INT 26
54312: DOUBLE
54313: EQUAL
54314: IFTRUE 54318
54316: GO 54336
54318: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
54319: LD_ADDR_VAR 0 3
54323: PUSH
54324: LD_INT 13
54326: PUSH
54327: LD_INT 14
54329: PUSH
54330: EMPTY
54331: LIST
54332: LIST
54333: ST_TO_ADDR
54334: GO 54653
54336: LD_INT 42
54338: DOUBLE
54339: EQUAL
54340: IFTRUE 54344
54342: GO 54370
54344: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
54345: LD_ADDR_VAR 0 3
54349: PUSH
54350: LD_INT 21
54352: PUSH
54353: LD_INT 22
54355: PUSH
54356: LD_INT 23
54358: PUSH
54359: LD_INT 24
54361: PUSH
54362: EMPTY
54363: LIST
54364: LIST
54365: LIST
54366: LIST
54367: ST_TO_ADDR
54368: GO 54653
54370: LD_INT 43
54372: DOUBLE
54373: EQUAL
54374: IFTRUE 54378
54376: GO 54404
54378: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
54379: LD_ADDR_VAR 0 3
54383: PUSH
54384: LD_INT 21
54386: PUSH
54387: LD_INT 22
54389: PUSH
54390: LD_INT 23
54392: PUSH
54393: LD_INT 24
54395: PUSH
54396: EMPTY
54397: LIST
54398: LIST
54399: LIST
54400: LIST
54401: ST_TO_ADDR
54402: GO 54653
54404: LD_INT 44
54406: DOUBLE
54407: EQUAL
54408: IFTRUE 54412
54410: GO 54438
54412: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
54413: LD_ADDR_VAR 0 3
54417: PUSH
54418: LD_INT 21
54420: PUSH
54421: LD_INT 22
54423: PUSH
54424: LD_INT 23
54426: PUSH
54427: LD_INT 24
54429: PUSH
54430: EMPTY
54431: LIST
54432: LIST
54433: LIST
54434: LIST
54435: ST_TO_ADDR
54436: GO 54653
54438: LD_INT 45
54440: DOUBLE
54441: EQUAL
54442: IFTRUE 54446
54444: GO 54472
54446: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
54447: LD_ADDR_VAR 0 3
54451: PUSH
54452: LD_INT 21
54454: PUSH
54455: LD_INT 22
54457: PUSH
54458: LD_INT 23
54460: PUSH
54461: LD_INT 24
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: LIST
54469: ST_TO_ADDR
54470: GO 54653
54472: LD_INT 49
54474: DOUBLE
54475: EQUAL
54476: IFTRUE 54480
54478: GO 54506
54480: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54481: LD_ADDR_VAR 0 3
54485: PUSH
54486: LD_INT 21
54488: PUSH
54489: LD_INT 22
54491: PUSH
54492: LD_INT 23
54494: PUSH
54495: LD_INT 24
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: ST_TO_ADDR
54504: GO 54653
54506: LD_INT 51
54508: DOUBLE
54509: EQUAL
54510: IFTRUE 54514
54512: GO 54540
54514: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54515: LD_ADDR_VAR 0 3
54519: PUSH
54520: LD_INT 21
54522: PUSH
54523: LD_INT 22
54525: PUSH
54526: LD_INT 23
54528: PUSH
54529: LD_INT 24
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: ST_TO_ADDR
54538: GO 54653
54540: LD_INT 52
54542: DOUBLE
54543: EQUAL
54544: IFTRUE 54548
54546: GO 54574
54548: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54549: LD_ADDR_VAR 0 3
54553: PUSH
54554: LD_INT 21
54556: PUSH
54557: LD_INT 22
54559: PUSH
54560: LD_INT 23
54562: PUSH
54563: LD_INT 24
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: ST_TO_ADDR
54572: GO 54653
54574: LD_INT 53
54576: DOUBLE
54577: EQUAL
54578: IFTRUE 54582
54580: GO 54600
54582: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54583: LD_ADDR_VAR 0 3
54587: PUSH
54588: LD_INT 23
54590: PUSH
54591: LD_INT 24
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: ST_TO_ADDR
54598: GO 54653
54600: LD_INT 46
54602: DOUBLE
54603: EQUAL
54604: IFTRUE 54608
54606: GO 54626
54608: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54609: LD_ADDR_VAR 0 3
54613: PUSH
54614: LD_INT 23
54616: PUSH
54617: LD_INT 24
54619: PUSH
54620: EMPTY
54621: LIST
54622: LIST
54623: ST_TO_ADDR
54624: GO 54653
54626: LD_INT 47
54628: DOUBLE
54629: EQUAL
54630: IFTRUE 54634
54632: GO 54652
54634: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54635: LD_ADDR_VAR 0 3
54639: PUSH
54640: LD_INT 23
54642: PUSH
54643: LD_INT 24
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: ST_TO_ADDR
54650: GO 54653
54652: POP
// result := ( chassis in result ) ;
54653: LD_ADDR_VAR 0 3
54657: PUSH
54658: LD_VAR 0 1
54662: PUSH
54663: LD_VAR 0 3
54667: IN
54668: ST_TO_ADDR
// end ;
54669: LD_VAR 0 3
54673: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54674: LD_INT 0
54676: PPUSH
54677: PPUSH
54678: PPUSH
54679: PPUSH
54680: PPUSH
54681: PPUSH
54682: PPUSH
// result := array ;
54683: LD_ADDR_VAR 0 5
54687: PUSH
54688: LD_VAR 0 1
54692: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54693: LD_VAR 0 1
54697: NOT
54698: PUSH
54699: LD_VAR 0 2
54703: NOT
54704: OR
54705: PUSH
54706: LD_VAR 0 3
54710: NOT
54711: OR
54712: PUSH
54713: LD_VAR 0 2
54717: PUSH
54718: LD_VAR 0 1
54722: GREATER
54723: OR
54724: PUSH
54725: LD_VAR 0 3
54729: PUSH
54730: LD_VAR 0 1
54734: GREATER
54735: OR
54736: IFFALSE 54740
// exit ;
54738: GO 55036
// if direction then
54740: LD_VAR 0 4
54744: IFFALSE 54808
// begin d := 1 ;
54746: LD_ADDR_VAR 0 9
54750: PUSH
54751: LD_INT 1
54753: ST_TO_ADDR
// if i_from > i_to then
54754: LD_VAR 0 2
54758: PUSH
54759: LD_VAR 0 3
54763: GREATER
54764: IFFALSE 54790
// length := ( array - i_from ) + i_to else
54766: LD_ADDR_VAR 0 11
54770: PUSH
54771: LD_VAR 0 1
54775: PUSH
54776: LD_VAR 0 2
54780: MINUS
54781: PUSH
54782: LD_VAR 0 3
54786: PLUS
54787: ST_TO_ADDR
54788: GO 54806
// length := i_to - i_from ;
54790: LD_ADDR_VAR 0 11
54794: PUSH
54795: LD_VAR 0 3
54799: PUSH
54800: LD_VAR 0 2
54804: MINUS
54805: ST_TO_ADDR
// end else
54806: GO 54869
// begin d := - 1 ;
54808: LD_ADDR_VAR 0 9
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: ST_TO_ADDR
// if i_from > i_to then
54817: LD_VAR 0 2
54821: PUSH
54822: LD_VAR 0 3
54826: GREATER
54827: IFFALSE 54847
// length := i_from - i_to else
54829: LD_ADDR_VAR 0 11
54833: PUSH
54834: LD_VAR 0 2
54838: PUSH
54839: LD_VAR 0 3
54843: MINUS
54844: ST_TO_ADDR
54845: GO 54869
// length := ( array - i_to ) + i_from ;
54847: LD_ADDR_VAR 0 11
54851: PUSH
54852: LD_VAR 0 1
54856: PUSH
54857: LD_VAR 0 3
54861: MINUS
54862: PUSH
54863: LD_VAR 0 2
54867: PLUS
54868: ST_TO_ADDR
// end ; if not length then
54869: LD_VAR 0 11
54873: NOT
54874: IFFALSE 54878
// exit ;
54876: GO 55036
// tmp := array ;
54878: LD_ADDR_VAR 0 10
54882: PUSH
54883: LD_VAR 0 1
54887: ST_TO_ADDR
// for i = 1 to length do
54888: LD_ADDR_VAR 0 6
54892: PUSH
54893: DOUBLE
54894: LD_INT 1
54896: DEC
54897: ST_TO_ADDR
54898: LD_VAR 0 11
54902: PUSH
54903: FOR_TO
54904: IFFALSE 55024
// begin for j = 1 to array do
54906: LD_ADDR_VAR 0 7
54910: PUSH
54911: DOUBLE
54912: LD_INT 1
54914: DEC
54915: ST_TO_ADDR
54916: LD_VAR 0 1
54920: PUSH
54921: FOR_TO
54922: IFFALSE 55010
// begin k := j + d ;
54924: LD_ADDR_VAR 0 8
54928: PUSH
54929: LD_VAR 0 7
54933: PUSH
54934: LD_VAR 0 9
54938: PLUS
54939: ST_TO_ADDR
// if k > array then
54940: LD_VAR 0 8
54944: PUSH
54945: LD_VAR 0 1
54949: GREATER
54950: IFFALSE 54960
// k := 1 ;
54952: LD_ADDR_VAR 0 8
54956: PUSH
54957: LD_INT 1
54959: ST_TO_ADDR
// if not k then
54960: LD_VAR 0 8
54964: NOT
54965: IFFALSE 54977
// k := array ;
54967: LD_ADDR_VAR 0 8
54971: PUSH
54972: LD_VAR 0 1
54976: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
54977: LD_ADDR_VAR 0 10
54981: PUSH
54982: LD_VAR 0 10
54986: PPUSH
54987: LD_VAR 0 8
54991: PPUSH
54992: LD_VAR 0 1
54996: PUSH
54997: LD_VAR 0 7
55001: ARRAY
55002: PPUSH
55003: CALL_OW 1
55007: ST_TO_ADDR
// end ;
55008: GO 54921
55010: POP
55011: POP
// array := tmp ;
55012: LD_ADDR_VAR 0 1
55016: PUSH
55017: LD_VAR 0 10
55021: ST_TO_ADDR
// end ;
55022: GO 54903
55024: POP
55025: POP
// result := array ;
55026: LD_ADDR_VAR 0 5
55030: PUSH
55031: LD_VAR 0 1
55035: ST_TO_ADDR
// end ;
55036: LD_VAR 0 5
55040: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
55041: LD_INT 0
55043: PPUSH
55044: PPUSH
// result := 0 ;
55045: LD_ADDR_VAR 0 3
55049: PUSH
55050: LD_INT 0
55052: ST_TO_ADDR
// if not array or not value in array then
55053: LD_VAR 0 1
55057: NOT
55058: PUSH
55059: LD_VAR 0 2
55063: PUSH
55064: LD_VAR 0 1
55068: IN
55069: NOT
55070: OR
55071: IFFALSE 55075
// exit ;
55073: GO 55129
// for i = 1 to array do
55075: LD_ADDR_VAR 0 4
55079: PUSH
55080: DOUBLE
55081: LD_INT 1
55083: DEC
55084: ST_TO_ADDR
55085: LD_VAR 0 1
55089: PUSH
55090: FOR_TO
55091: IFFALSE 55127
// if value = array [ i ] then
55093: LD_VAR 0 2
55097: PUSH
55098: LD_VAR 0 1
55102: PUSH
55103: LD_VAR 0 4
55107: ARRAY
55108: EQUAL
55109: IFFALSE 55125
// begin result := i ;
55111: LD_ADDR_VAR 0 3
55115: PUSH
55116: LD_VAR 0 4
55120: ST_TO_ADDR
// exit ;
55121: POP
55122: POP
55123: GO 55129
// end ;
55125: GO 55090
55127: POP
55128: POP
// end ;
55129: LD_VAR 0 3
55133: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
55134: LD_INT 0
55136: PPUSH
// vc_chassis := chassis ;
55137: LD_ADDR_OWVAR 37
55141: PUSH
55142: LD_VAR 0 1
55146: ST_TO_ADDR
// vc_engine := engine ;
55147: LD_ADDR_OWVAR 39
55151: PUSH
55152: LD_VAR 0 2
55156: ST_TO_ADDR
// vc_control := control ;
55157: LD_ADDR_OWVAR 38
55161: PUSH
55162: LD_VAR 0 3
55166: ST_TO_ADDR
// vc_weapon := weapon ;
55167: LD_ADDR_OWVAR 40
55171: PUSH
55172: LD_VAR 0 4
55176: ST_TO_ADDR
// vc_fuel_battery := fuel ;
55177: LD_ADDR_OWVAR 41
55181: PUSH
55182: LD_VAR 0 5
55186: ST_TO_ADDR
// end ;
55187: LD_VAR 0 6
55191: RET
// export function WantPlant ( unit ) ; var task ; begin
55192: LD_INT 0
55194: PPUSH
55195: PPUSH
// result := false ;
55196: LD_ADDR_VAR 0 2
55200: PUSH
55201: LD_INT 0
55203: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
55204: LD_ADDR_VAR 0 3
55208: PUSH
55209: LD_VAR 0 1
55213: PPUSH
55214: CALL_OW 437
55218: ST_TO_ADDR
// if task then
55219: LD_VAR 0 3
55223: IFFALSE 55251
// if task [ 1 ] [ 1 ] = p then
55225: LD_VAR 0 3
55229: PUSH
55230: LD_INT 1
55232: ARRAY
55233: PUSH
55234: LD_INT 1
55236: ARRAY
55237: PUSH
55238: LD_STRING p
55240: EQUAL
55241: IFFALSE 55251
// result := true ;
55243: LD_ADDR_VAR 0 2
55247: PUSH
55248: LD_INT 1
55250: ST_TO_ADDR
// end ;
55251: LD_VAR 0 2
55255: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
55256: LD_INT 0
55258: PPUSH
55259: PPUSH
55260: PPUSH
55261: PPUSH
// if pos < 1 then
55262: LD_VAR 0 2
55266: PUSH
55267: LD_INT 1
55269: LESS
55270: IFFALSE 55274
// exit ;
55272: GO 55577
// if pos = 1 then
55274: LD_VAR 0 2
55278: PUSH
55279: LD_INT 1
55281: EQUAL
55282: IFFALSE 55315
// result := Replace ( arr , pos [ 1 ] , value ) else
55284: LD_ADDR_VAR 0 4
55288: PUSH
55289: LD_VAR 0 1
55293: PPUSH
55294: LD_VAR 0 2
55298: PUSH
55299: LD_INT 1
55301: ARRAY
55302: PPUSH
55303: LD_VAR 0 3
55307: PPUSH
55308: CALL_OW 1
55312: ST_TO_ADDR
55313: GO 55577
// begin tmp := arr ;
55315: LD_ADDR_VAR 0 6
55319: PUSH
55320: LD_VAR 0 1
55324: ST_TO_ADDR
// s_arr := [ tmp ] ;
55325: LD_ADDR_VAR 0 7
55329: PUSH
55330: LD_VAR 0 6
55334: PUSH
55335: EMPTY
55336: LIST
55337: ST_TO_ADDR
// for i = 1 to pos - 1 do
55338: LD_ADDR_VAR 0 5
55342: PUSH
55343: DOUBLE
55344: LD_INT 1
55346: DEC
55347: ST_TO_ADDR
55348: LD_VAR 0 2
55352: PUSH
55353: LD_INT 1
55355: MINUS
55356: PUSH
55357: FOR_TO
55358: IFFALSE 55403
// begin tmp := tmp [ pos [ i ] ] ;
55360: LD_ADDR_VAR 0 6
55364: PUSH
55365: LD_VAR 0 6
55369: PUSH
55370: LD_VAR 0 2
55374: PUSH
55375: LD_VAR 0 5
55379: ARRAY
55380: ARRAY
55381: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
55382: LD_ADDR_VAR 0 7
55386: PUSH
55387: LD_VAR 0 7
55391: PUSH
55392: LD_VAR 0 6
55396: PUSH
55397: EMPTY
55398: LIST
55399: ADD
55400: ST_TO_ADDR
// end ;
55401: GO 55357
55403: POP
55404: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
55405: LD_ADDR_VAR 0 6
55409: PUSH
55410: LD_VAR 0 6
55414: PPUSH
55415: LD_VAR 0 2
55419: PUSH
55420: LD_VAR 0 2
55424: ARRAY
55425: PPUSH
55426: LD_VAR 0 3
55430: PPUSH
55431: CALL_OW 1
55435: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
55436: LD_ADDR_VAR 0 7
55440: PUSH
55441: LD_VAR 0 7
55445: PPUSH
55446: LD_VAR 0 7
55450: PPUSH
55451: LD_VAR 0 6
55455: PPUSH
55456: CALL_OW 1
55460: ST_TO_ADDR
// for i = s_arr downto 2 do
55461: LD_ADDR_VAR 0 5
55465: PUSH
55466: DOUBLE
55467: LD_VAR 0 7
55471: INC
55472: ST_TO_ADDR
55473: LD_INT 2
55475: PUSH
55476: FOR_DOWNTO
55477: IFFALSE 55561
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55479: LD_ADDR_VAR 0 6
55483: PUSH
55484: LD_VAR 0 7
55488: PUSH
55489: LD_VAR 0 5
55493: PUSH
55494: LD_INT 1
55496: MINUS
55497: ARRAY
55498: PPUSH
55499: LD_VAR 0 2
55503: PUSH
55504: LD_VAR 0 5
55508: PUSH
55509: LD_INT 1
55511: MINUS
55512: ARRAY
55513: PPUSH
55514: LD_VAR 0 7
55518: PUSH
55519: LD_VAR 0 5
55523: ARRAY
55524: PPUSH
55525: CALL_OW 1
55529: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55530: LD_ADDR_VAR 0 7
55534: PUSH
55535: LD_VAR 0 7
55539: PPUSH
55540: LD_VAR 0 5
55544: PUSH
55545: LD_INT 1
55547: MINUS
55548: PPUSH
55549: LD_VAR 0 6
55553: PPUSH
55554: CALL_OW 1
55558: ST_TO_ADDR
// end ;
55559: GO 55476
55561: POP
55562: POP
// result := s_arr [ 1 ] ;
55563: LD_ADDR_VAR 0 4
55567: PUSH
55568: LD_VAR 0 7
55572: PUSH
55573: LD_INT 1
55575: ARRAY
55576: ST_TO_ADDR
// end ; end ;
55577: LD_VAR 0 4
55581: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55582: LD_INT 0
55584: PPUSH
55585: PPUSH
// if not list then
55586: LD_VAR 0 1
55590: NOT
55591: IFFALSE 55595
// exit ;
55593: GO 55686
// i := list [ pos1 ] ;
55595: LD_ADDR_VAR 0 5
55599: PUSH
55600: LD_VAR 0 1
55604: PUSH
55605: LD_VAR 0 2
55609: ARRAY
55610: ST_TO_ADDR
// if not i then
55611: LD_VAR 0 5
55615: NOT
55616: IFFALSE 55620
// exit ;
55618: GO 55686
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55620: LD_ADDR_VAR 0 1
55624: PUSH
55625: LD_VAR 0 1
55629: PPUSH
55630: LD_VAR 0 2
55634: PPUSH
55635: LD_VAR 0 1
55639: PUSH
55640: LD_VAR 0 3
55644: ARRAY
55645: PPUSH
55646: CALL_OW 1
55650: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55651: LD_ADDR_VAR 0 1
55655: PUSH
55656: LD_VAR 0 1
55660: PPUSH
55661: LD_VAR 0 3
55665: PPUSH
55666: LD_VAR 0 5
55670: PPUSH
55671: CALL_OW 1
55675: ST_TO_ADDR
// result := list ;
55676: LD_ADDR_VAR 0 4
55680: PUSH
55681: LD_VAR 0 1
55685: ST_TO_ADDR
// end ;
55686: LD_VAR 0 4
55690: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55691: LD_INT 0
55693: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55694: LD_ADDR_VAR 0 5
55698: PUSH
55699: LD_VAR 0 1
55703: PPUSH
55704: CALL_OW 250
55708: PPUSH
55709: LD_VAR 0 1
55713: PPUSH
55714: CALL_OW 251
55718: PPUSH
55719: LD_VAR 0 2
55723: PPUSH
55724: LD_VAR 0 3
55728: PPUSH
55729: LD_VAR 0 4
55733: PPUSH
55734: CALL 55744 0 5
55738: ST_TO_ADDR
// end ;
55739: LD_VAR 0 5
55743: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55744: LD_INT 0
55746: PPUSH
55747: PPUSH
55748: PPUSH
55749: PPUSH
// if not list then
55750: LD_VAR 0 3
55754: NOT
55755: IFFALSE 55759
// exit ;
55757: GO 56147
// result := [ ] ;
55759: LD_ADDR_VAR 0 6
55763: PUSH
55764: EMPTY
55765: ST_TO_ADDR
// for i in list do
55766: LD_ADDR_VAR 0 7
55770: PUSH
55771: LD_VAR 0 3
55775: PUSH
55776: FOR_IN
55777: IFFALSE 55979
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55779: LD_ADDR_VAR 0 9
55783: PUSH
55784: LD_VAR 0 7
55788: PPUSH
55789: LD_VAR 0 1
55793: PPUSH
55794: LD_VAR 0 2
55798: PPUSH
55799: CALL_OW 297
55803: ST_TO_ADDR
// if not result then
55804: LD_VAR 0 6
55808: NOT
55809: IFFALSE 55835
// result := [ [ i , tmp ] ] else
55811: LD_ADDR_VAR 0 6
55815: PUSH
55816: LD_VAR 0 7
55820: PUSH
55821: LD_VAR 0 9
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: PUSH
55830: EMPTY
55831: LIST
55832: ST_TO_ADDR
55833: GO 55977
// begin if result [ result ] [ 2 ] < tmp then
55835: LD_VAR 0 6
55839: PUSH
55840: LD_VAR 0 6
55844: ARRAY
55845: PUSH
55846: LD_INT 2
55848: ARRAY
55849: PUSH
55850: LD_VAR 0 9
55854: LESS
55855: IFFALSE 55897
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
55857: LD_ADDR_VAR 0 6
55861: PUSH
55862: LD_VAR 0 6
55866: PPUSH
55867: LD_VAR 0 6
55871: PUSH
55872: LD_INT 1
55874: PLUS
55875: PPUSH
55876: LD_VAR 0 7
55880: PUSH
55881: LD_VAR 0 9
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PPUSH
55890: CALL_OW 2
55894: ST_TO_ADDR
55895: GO 55977
// for j = 1 to result do
55897: LD_ADDR_VAR 0 8
55901: PUSH
55902: DOUBLE
55903: LD_INT 1
55905: DEC
55906: ST_TO_ADDR
55907: LD_VAR 0 6
55911: PUSH
55912: FOR_TO
55913: IFFALSE 55975
// begin if tmp < result [ j ] [ 2 ] then
55915: LD_VAR 0 9
55919: PUSH
55920: LD_VAR 0 6
55924: PUSH
55925: LD_VAR 0 8
55929: ARRAY
55930: PUSH
55931: LD_INT 2
55933: ARRAY
55934: LESS
55935: IFFALSE 55973
// begin result := Insert ( result , j , [ i , tmp ] ) ;
55937: LD_ADDR_VAR 0 6
55941: PUSH
55942: LD_VAR 0 6
55946: PPUSH
55947: LD_VAR 0 8
55951: PPUSH
55952: LD_VAR 0 7
55956: PUSH
55957: LD_VAR 0 9
55961: PUSH
55962: EMPTY
55963: LIST
55964: LIST
55965: PPUSH
55966: CALL_OW 2
55970: ST_TO_ADDR
// break ;
55971: GO 55975
// end ; end ;
55973: GO 55912
55975: POP
55976: POP
// end ; end ;
55977: GO 55776
55979: POP
55980: POP
// if result and not asc then
55981: LD_VAR 0 6
55985: PUSH
55986: LD_VAR 0 4
55990: NOT
55991: AND
55992: IFFALSE 56067
// begin tmp := result ;
55994: LD_ADDR_VAR 0 9
55998: PUSH
55999: LD_VAR 0 6
56003: ST_TO_ADDR
// for i = tmp downto 1 do
56004: LD_ADDR_VAR 0 7
56008: PUSH
56009: DOUBLE
56010: LD_VAR 0 9
56014: INC
56015: ST_TO_ADDR
56016: LD_INT 1
56018: PUSH
56019: FOR_DOWNTO
56020: IFFALSE 56065
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
56022: LD_ADDR_VAR 0 6
56026: PUSH
56027: LD_VAR 0 6
56031: PPUSH
56032: LD_VAR 0 9
56036: PUSH
56037: LD_VAR 0 7
56041: MINUS
56042: PUSH
56043: LD_INT 1
56045: PLUS
56046: PPUSH
56047: LD_VAR 0 9
56051: PUSH
56052: LD_VAR 0 7
56056: ARRAY
56057: PPUSH
56058: CALL_OW 1
56062: ST_TO_ADDR
56063: GO 56019
56065: POP
56066: POP
// end ; tmp := [ ] ;
56067: LD_ADDR_VAR 0 9
56071: PUSH
56072: EMPTY
56073: ST_TO_ADDR
// if mode then
56074: LD_VAR 0 5
56078: IFFALSE 56147
// begin for i = 1 to result do
56080: LD_ADDR_VAR 0 7
56084: PUSH
56085: DOUBLE
56086: LD_INT 1
56088: DEC
56089: ST_TO_ADDR
56090: LD_VAR 0 6
56094: PUSH
56095: FOR_TO
56096: IFFALSE 56135
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
56098: LD_ADDR_VAR 0 9
56102: PUSH
56103: LD_VAR 0 9
56107: PPUSH
56108: LD_VAR 0 7
56112: PPUSH
56113: LD_VAR 0 6
56117: PUSH
56118: LD_VAR 0 7
56122: ARRAY
56123: PUSH
56124: LD_INT 1
56126: ARRAY
56127: PPUSH
56128: CALL_OW 1
56132: ST_TO_ADDR
56133: GO 56095
56135: POP
56136: POP
// result := tmp ;
56137: LD_ADDR_VAR 0 6
56141: PUSH
56142: LD_VAR 0 9
56146: ST_TO_ADDR
// end ; end ;
56147: LD_VAR 0 6
56151: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
56152: LD_INT 0
56154: PPUSH
56155: PPUSH
56156: PPUSH
56157: PPUSH
56158: PPUSH
56159: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
56160: LD_ADDR_VAR 0 5
56164: PUSH
56165: LD_INT 0
56167: PUSH
56168: LD_INT 0
56170: PUSH
56171: LD_INT 0
56173: PUSH
56174: EMPTY
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: ST_TO_ADDR
// if not x or not y then
56182: LD_VAR 0 2
56186: NOT
56187: PUSH
56188: LD_VAR 0 3
56192: NOT
56193: OR
56194: IFFALSE 56198
// exit ;
56196: GO 57850
// if not range then
56198: LD_VAR 0 4
56202: NOT
56203: IFFALSE 56213
// range := 10 ;
56205: LD_ADDR_VAR 0 4
56209: PUSH
56210: LD_INT 10
56212: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56213: LD_ADDR_VAR 0 8
56217: PUSH
56218: LD_INT 81
56220: PUSH
56221: LD_VAR 0 1
56225: PUSH
56226: EMPTY
56227: LIST
56228: LIST
56229: PUSH
56230: LD_INT 92
56232: PUSH
56233: LD_VAR 0 2
56237: PUSH
56238: LD_VAR 0 3
56242: PUSH
56243: LD_VAR 0 4
56247: PUSH
56248: EMPTY
56249: LIST
56250: LIST
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 3
56256: PUSH
56257: LD_INT 21
56259: PUSH
56260: LD_INT 3
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: PPUSH
56276: CALL_OW 69
56280: ST_TO_ADDR
// if not tmp then
56281: LD_VAR 0 8
56285: NOT
56286: IFFALSE 56290
// exit ;
56288: GO 57850
// for i in tmp do
56290: LD_ADDR_VAR 0 6
56294: PUSH
56295: LD_VAR 0 8
56299: PUSH
56300: FOR_IN
56301: IFFALSE 57825
// begin points := [ 0 , 0 , 0 ] ;
56303: LD_ADDR_VAR 0 9
56307: PUSH
56308: LD_INT 0
56310: PUSH
56311: LD_INT 0
56313: PUSH
56314: LD_INT 0
56316: PUSH
56317: EMPTY
56318: LIST
56319: LIST
56320: LIST
56321: ST_TO_ADDR
// bpoints := 1 ;
56322: LD_ADDR_VAR 0 10
56326: PUSH
56327: LD_INT 1
56329: ST_TO_ADDR
// case GetType ( i ) of unit_human :
56330: LD_VAR 0 6
56334: PPUSH
56335: CALL_OW 247
56339: PUSH
56340: LD_INT 1
56342: DOUBLE
56343: EQUAL
56344: IFTRUE 56348
56346: GO 56926
56348: POP
// begin if GetClass ( i ) = 1 then
56349: LD_VAR 0 6
56353: PPUSH
56354: CALL_OW 257
56358: PUSH
56359: LD_INT 1
56361: EQUAL
56362: IFFALSE 56383
// points := [ 10 , 5 , 3 ] ;
56364: LD_ADDR_VAR 0 9
56368: PUSH
56369: LD_INT 10
56371: PUSH
56372: LD_INT 5
56374: PUSH
56375: LD_INT 3
56377: PUSH
56378: EMPTY
56379: LIST
56380: LIST
56381: LIST
56382: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
56383: LD_VAR 0 6
56387: PPUSH
56388: CALL_OW 257
56392: PUSH
56393: LD_INT 2
56395: PUSH
56396: LD_INT 3
56398: PUSH
56399: LD_INT 4
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: LIST
56406: IN
56407: IFFALSE 56428
// points := [ 3 , 2 , 1 ] ;
56409: LD_ADDR_VAR 0 9
56413: PUSH
56414: LD_INT 3
56416: PUSH
56417: LD_INT 2
56419: PUSH
56420: LD_INT 1
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: LIST
56427: ST_TO_ADDR
// if GetClass ( i ) = 5 then
56428: LD_VAR 0 6
56432: PPUSH
56433: CALL_OW 257
56437: PUSH
56438: LD_INT 5
56440: EQUAL
56441: IFFALSE 56462
// points := [ 130 , 5 , 2 ] ;
56443: LD_ADDR_VAR 0 9
56447: PUSH
56448: LD_INT 130
56450: PUSH
56451: LD_INT 5
56453: PUSH
56454: LD_INT 2
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: LIST
56461: ST_TO_ADDR
// if GetClass ( i ) = 8 then
56462: LD_VAR 0 6
56466: PPUSH
56467: CALL_OW 257
56471: PUSH
56472: LD_INT 8
56474: EQUAL
56475: IFFALSE 56496
// points := [ 35 , 35 , 30 ] ;
56477: LD_ADDR_VAR 0 9
56481: PUSH
56482: LD_INT 35
56484: PUSH
56485: LD_INT 35
56487: PUSH
56488: LD_INT 30
56490: PUSH
56491: EMPTY
56492: LIST
56493: LIST
56494: LIST
56495: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56496: LD_VAR 0 6
56500: PPUSH
56501: CALL_OW 257
56505: PUSH
56506: LD_INT 9
56508: EQUAL
56509: IFFALSE 56530
// points := [ 20 , 55 , 40 ] ;
56511: LD_ADDR_VAR 0 9
56515: PUSH
56516: LD_INT 20
56518: PUSH
56519: LD_INT 55
56521: PUSH
56522: LD_INT 40
56524: PUSH
56525: EMPTY
56526: LIST
56527: LIST
56528: LIST
56529: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56530: LD_VAR 0 6
56534: PPUSH
56535: CALL_OW 257
56539: PUSH
56540: LD_INT 12
56542: PUSH
56543: LD_INT 16
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: IN
56550: IFFALSE 56571
// points := [ 5 , 3 , 2 ] ;
56552: LD_ADDR_VAR 0 9
56556: PUSH
56557: LD_INT 5
56559: PUSH
56560: LD_INT 3
56562: PUSH
56563: LD_INT 2
56565: PUSH
56566: EMPTY
56567: LIST
56568: LIST
56569: LIST
56570: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56571: LD_VAR 0 6
56575: PPUSH
56576: CALL_OW 257
56580: PUSH
56581: LD_INT 17
56583: EQUAL
56584: IFFALSE 56605
// points := [ 100 , 50 , 75 ] ;
56586: LD_ADDR_VAR 0 9
56590: PUSH
56591: LD_INT 100
56593: PUSH
56594: LD_INT 50
56596: PUSH
56597: LD_INT 75
56599: PUSH
56600: EMPTY
56601: LIST
56602: LIST
56603: LIST
56604: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56605: LD_VAR 0 6
56609: PPUSH
56610: CALL_OW 257
56614: PUSH
56615: LD_INT 15
56617: EQUAL
56618: IFFALSE 56639
// points := [ 10 , 5 , 3 ] ;
56620: LD_ADDR_VAR 0 9
56624: PUSH
56625: LD_INT 10
56627: PUSH
56628: LD_INT 5
56630: PUSH
56631: LD_INT 3
56633: PUSH
56634: EMPTY
56635: LIST
56636: LIST
56637: LIST
56638: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56639: LD_VAR 0 6
56643: PPUSH
56644: CALL_OW 257
56648: PUSH
56649: LD_INT 14
56651: EQUAL
56652: IFFALSE 56673
// points := [ 10 , 0 , 0 ] ;
56654: LD_ADDR_VAR 0 9
56658: PUSH
56659: LD_INT 10
56661: PUSH
56662: LD_INT 0
56664: PUSH
56665: LD_INT 0
56667: PUSH
56668: EMPTY
56669: LIST
56670: LIST
56671: LIST
56672: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56673: LD_VAR 0 6
56677: PPUSH
56678: CALL_OW 257
56682: PUSH
56683: LD_INT 11
56685: EQUAL
56686: IFFALSE 56707
// points := [ 30 , 10 , 5 ] ;
56688: LD_ADDR_VAR 0 9
56692: PUSH
56693: LD_INT 30
56695: PUSH
56696: LD_INT 10
56698: PUSH
56699: LD_INT 5
56701: PUSH
56702: EMPTY
56703: LIST
56704: LIST
56705: LIST
56706: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56707: LD_VAR 0 1
56711: PPUSH
56712: LD_INT 5
56714: PPUSH
56715: CALL_OW 321
56719: PUSH
56720: LD_INT 2
56722: EQUAL
56723: IFFALSE 56740
// bpoints := bpoints * 1.8 ;
56725: LD_ADDR_VAR 0 10
56729: PUSH
56730: LD_VAR 0 10
56734: PUSH
56735: LD_REAL  1.80000000000000E+0000
56738: MUL
56739: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56740: LD_VAR 0 6
56744: PPUSH
56745: CALL_OW 257
56749: PUSH
56750: LD_INT 1
56752: PUSH
56753: LD_INT 2
56755: PUSH
56756: LD_INT 3
56758: PUSH
56759: LD_INT 4
56761: PUSH
56762: EMPTY
56763: LIST
56764: LIST
56765: LIST
56766: LIST
56767: IN
56768: PUSH
56769: LD_VAR 0 1
56773: PPUSH
56774: LD_INT 51
56776: PPUSH
56777: CALL_OW 321
56781: PUSH
56782: LD_INT 2
56784: EQUAL
56785: AND
56786: IFFALSE 56803
// bpoints := bpoints * 1.2 ;
56788: LD_ADDR_VAR 0 10
56792: PUSH
56793: LD_VAR 0 10
56797: PUSH
56798: LD_REAL  1.20000000000000E+0000
56801: MUL
56802: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56803: LD_VAR 0 6
56807: PPUSH
56808: CALL_OW 257
56812: PUSH
56813: LD_INT 5
56815: PUSH
56816: LD_INT 7
56818: PUSH
56819: LD_INT 9
56821: PUSH
56822: EMPTY
56823: LIST
56824: LIST
56825: LIST
56826: IN
56827: PUSH
56828: LD_VAR 0 1
56832: PPUSH
56833: LD_INT 52
56835: PPUSH
56836: CALL_OW 321
56840: PUSH
56841: LD_INT 2
56843: EQUAL
56844: AND
56845: IFFALSE 56862
// bpoints := bpoints * 1.5 ;
56847: LD_ADDR_VAR 0 10
56851: PUSH
56852: LD_VAR 0 10
56856: PUSH
56857: LD_REAL  1.50000000000000E+0000
56860: MUL
56861: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
56862: LD_VAR 0 1
56866: PPUSH
56867: LD_INT 66
56869: PPUSH
56870: CALL_OW 321
56874: PUSH
56875: LD_INT 2
56877: EQUAL
56878: IFFALSE 56895
// bpoints := bpoints * 1.1 ;
56880: LD_ADDR_VAR 0 10
56884: PUSH
56885: LD_VAR 0 10
56889: PUSH
56890: LD_REAL  1.10000000000000E+0000
56893: MUL
56894: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
56895: LD_ADDR_VAR 0 10
56899: PUSH
56900: LD_VAR 0 10
56904: PUSH
56905: LD_VAR 0 6
56909: PPUSH
56910: LD_INT 1
56912: PPUSH
56913: CALL_OW 259
56917: PUSH
56918: LD_REAL  1.15000000000000E+0000
56921: MUL
56922: MUL
56923: ST_TO_ADDR
// end ; unit_vehicle :
56924: GO 57754
56926: LD_INT 2
56928: DOUBLE
56929: EQUAL
56930: IFTRUE 56934
56932: GO 57742
56934: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
56935: LD_VAR 0 6
56939: PPUSH
56940: CALL_OW 264
56944: PUSH
56945: LD_INT 2
56947: PUSH
56948: LD_INT 42
56950: PUSH
56951: LD_INT 24
56953: PUSH
56954: EMPTY
56955: LIST
56956: LIST
56957: LIST
56958: IN
56959: IFFALSE 56980
// points := [ 25 , 5 , 3 ] ;
56961: LD_ADDR_VAR 0 9
56965: PUSH
56966: LD_INT 25
56968: PUSH
56969: LD_INT 5
56971: PUSH
56972: LD_INT 3
56974: PUSH
56975: EMPTY
56976: LIST
56977: LIST
56978: LIST
56979: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
56980: LD_VAR 0 6
56984: PPUSH
56985: CALL_OW 264
56989: PUSH
56990: LD_INT 4
56992: PUSH
56993: LD_INT 43
56995: PUSH
56996: LD_INT 25
56998: PUSH
56999: EMPTY
57000: LIST
57001: LIST
57002: LIST
57003: IN
57004: IFFALSE 57025
// points := [ 40 , 15 , 5 ] ;
57006: LD_ADDR_VAR 0 9
57010: PUSH
57011: LD_INT 40
57013: PUSH
57014: LD_INT 15
57016: PUSH
57017: LD_INT 5
57019: PUSH
57020: EMPTY
57021: LIST
57022: LIST
57023: LIST
57024: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
57025: LD_VAR 0 6
57029: PPUSH
57030: CALL_OW 264
57034: PUSH
57035: LD_INT 3
57037: PUSH
57038: LD_INT 23
57040: PUSH
57041: EMPTY
57042: LIST
57043: LIST
57044: IN
57045: IFFALSE 57066
// points := [ 7 , 25 , 8 ] ;
57047: LD_ADDR_VAR 0 9
57051: PUSH
57052: LD_INT 7
57054: PUSH
57055: LD_INT 25
57057: PUSH
57058: LD_INT 8
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: LIST
57065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
57066: LD_VAR 0 6
57070: PPUSH
57071: CALL_OW 264
57075: PUSH
57076: LD_INT 5
57078: PUSH
57079: LD_INT 27
57081: PUSH
57082: LD_INT 44
57084: PUSH
57085: EMPTY
57086: LIST
57087: LIST
57088: LIST
57089: IN
57090: IFFALSE 57111
// points := [ 14 , 50 , 16 ] ;
57092: LD_ADDR_VAR 0 9
57096: PUSH
57097: LD_INT 14
57099: PUSH
57100: LD_INT 50
57102: PUSH
57103: LD_INT 16
57105: PUSH
57106: EMPTY
57107: LIST
57108: LIST
57109: LIST
57110: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
57111: LD_VAR 0 6
57115: PPUSH
57116: CALL_OW 264
57120: PUSH
57121: LD_INT 6
57123: PUSH
57124: LD_INT 46
57126: PUSH
57127: EMPTY
57128: LIST
57129: LIST
57130: IN
57131: IFFALSE 57152
// points := [ 32 , 120 , 70 ] ;
57133: LD_ADDR_VAR 0 9
57137: PUSH
57138: LD_INT 32
57140: PUSH
57141: LD_INT 120
57143: PUSH
57144: LD_INT 70
57146: PUSH
57147: EMPTY
57148: LIST
57149: LIST
57150: LIST
57151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
57152: LD_VAR 0 6
57156: PPUSH
57157: CALL_OW 264
57161: PUSH
57162: LD_INT 7
57164: PUSH
57165: LD_INT 28
57167: PUSH
57168: LD_INT 45
57170: PUSH
57171: LD_EXP 75
57175: PUSH
57176: EMPTY
57177: LIST
57178: LIST
57179: LIST
57180: LIST
57181: IN
57182: IFFALSE 57203
// points := [ 35 , 20 , 45 ] ;
57184: LD_ADDR_VAR 0 9
57188: PUSH
57189: LD_INT 35
57191: PUSH
57192: LD_INT 20
57194: PUSH
57195: LD_INT 45
57197: PUSH
57198: EMPTY
57199: LIST
57200: LIST
57201: LIST
57202: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
57203: LD_VAR 0 6
57207: PPUSH
57208: CALL_OW 264
57212: PUSH
57213: LD_INT 47
57215: PUSH
57216: EMPTY
57217: LIST
57218: IN
57219: IFFALSE 57240
// points := [ 67 , 45 , 75 ] ;
57221: LD_ADDR_VAR 0 9
57225: PUSH
57226: LD_INT 67
57228: PUSH
57229: LD_INT 45
57231: PUSH
57232: LD_INT 75
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: LIST
57239: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
57240: LD_VAR 0 6
57244: PPUSH
57245: CALL_OW 264
57249: PUSH
57250: LD_INT 26
57252: PUSH
57253: EMPTY
57254: LIST
57255: IN
57256: IFFALSE 57277
// points := [ 120 , 30 , 80 ] ;
57258: LD_ADDR_VAR 0 9
57262: PUSH
57263: LD_INT 120
57265: PUSH
57266: LD_INT 30
57268: PUSH
57269: LD_INT 80
57271: PUSH
57272: EMPTY
57273: LIST
57274: LIST
57275: LIST
57276: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
57277: LD_VAR 0 6
57281: PPUSH
57282: CALL_OW 264
57286: PUSH
57287: LD_INT 22
57289: PUSH
57290: EMPTY
57291: LIST
57292: IN
57293: IFFALSE 57314
// points := [ 40 , 1 , 1 ] ;
57295: LD_ADDR_VAR 0 9
57299: PUSH
57300: LD_INT 40
57302: PUSH
57303: LD_INT 1
57305: PUSH
57306: LD_INT 1
57308: PUSH
57309: EMPTY
57310: LIST
57311: LIST
57312: LIST
57313: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
57314: LD_VAR 0 6
57318: PPUSH
57319: CALL_OW 264
57323: PUSH
57324: LD_INT 29
57326: PUSH
57327: EMPTY
57328: LIST
57329: IN
57330: IFFALSE 57351
// points := [ 70 , 200 , 400 ] ;
57332: LD_ADDR_VAR 0 9
57336: PUSH
57337: LD_INT 70
57339: PUSH
57340: LD_INT 200
57342: PUSH
57343: LD_INT 400
57345: PUSH
57346: EMPTY
57347: LIST
57348: LIST
57349: LIST
57350: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
57351: LD_VAR 0 6
57355: PPUSH
57356: CALL_OW 264
57360: PUSH
57361: LD_INT 14
57363: PUSH
57364: LD_INT 53
57366: PUSH
57367: EMPTY
57368: LIST
57369: LIST
57370: IN
57371: IFFALSE 57392
// points := [ 40 , 10 , 20 ] ;
57373: LD_ADDR_VAR 0 9
57377: PUSH
57378: LD_INT 40
57380: PUSH
57381: LD_INT 10
57383: PUSH
57384: LD_INT 20
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
57392: LD_VAR 0 6
57396: PPUSH
57397: CALL_OW 264
57401: PUSH
57402: LD_INT 9
57404: PUSH
57405: EMPTY
57406: LIST
57407: IN
57408: IFFALSE 57429
// points := [ 5 , 70 , 20 ] ;
57410: LD_ADDR_VAR 0 9
57414: PUSH
57415: LD_INT 5
57417: PUSH
57418: LD_INT 70
57420: PUSH
57421: LD_INT 20
57423: PUSH
57424: EMPTY
57425: LIST
57426: LIST
57427: LIST
57428: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
57429: LD_VAR 0 6
57433: PPUSH
57434: CALL_OW 264
57438: PUSH
57439: LD_INT 10
57441: PUSH
57442: EMPTY
57443: LIST
57444: IN
57445: IFFALSE 57466
// points := [ 35 , 110 , 70 ] ;
57447: LD_ADDR_VAR 0 9
57451: PUSH
57452: LD_INT 35
57454: PUSH
57455: LD_INT 110
57457: PUSH
57458: LD_INT 70
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: LIST
57465: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
57466: LD_VAR 0 6
57470: PPUSH
57471: CALL_OW 265
57475: PUSH
57476: LD_INT 25
57478: EQUAL
57479: IFFALSE 57500
// points := [ 80 , 65 , 100 ] ;
57481: LD_ADDR_VAR 0 9
57485: PUSH
57486: LD_INT 80
57488: PUSH
57489: LD_INT 65
57491: PUSH
57492: LD_INT 100
57494: PUSH
57495: EMPTY
57496: LIST
57497: LIST
57498: LIST
57499: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57500: LD_VAR 0 6
57504: PPUSH
57505: CALL_OW 263
57509: PUSH
57510: LD_INT 1
57512: EQUAL
57513: IFFALSE 57548
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57515: LD_ADDR_VAR 0 10
57519: PUSH
57520: LD_VAR 0 10
57524: PUSH
57525: LD_VAR 0 6
57529: PPUSH
57530: CALL_OW 311
57534: PPUSH
57535: LD_INT 3
57537: PPUSH
57538: CALL_OW 259
57542: PUSH
57543: LD_INT 4
57545: MUL
57546: MUL
57547: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57548: LD_VAR 0 6
57552: PPUSH
57553: CALL_OW 263
57557: PUSH
57558: LD_INT 2
57560: EQUAL
57561: IFFALSE 57612
// begin j := IsControledBy ( i ) ;
57563: LD_ADDR_VAR 0 7
57567: PUSH
57568: LD_VAR 0 6
57572: PPUSH
57573: CALL_OW 312
57577: ST_TO_ADDR
// if j then
57578: LD_VAR 0 7
57582: IFFALSE 57612
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57584: LD_ADDR_VAR 0 10
57588: PUSH
57589: LD_VAR 0 10
57593: PUSH
57594: LD_VAR 0 7
57598: PPUSH
57599: LD_INT 3
57601: PPUSH
57602: CALL_OW 259
57606: PUSH
57607: LD_INT 3
57609: MUL
57610: MUL
57611: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57612: LD_VAR 0 6
57616: PPUSH
57617: CALL_OW 264
57621: PUSH
57622: LD_INT 5
57624: PUSH
57625: LD_INT 6
57627: PUSH
57628: LD_INT 46
57630: PUSH
57631: LD_INT 44
57633: PUSH
57634: LD_INT 47
57636: PUSH
57637: LD_INT 45
57639: PUSH
57640: LD_INT 28
57642: PUSH
57643: LD_INT 7
57645: PUSH
57646: LD_INT 27
57648: PUSH
57649: LD_INT 29
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: LIST
57656: LIST
57657: LIST
57658: LIST
57659: LIST
57660: LIST
57661: LIST
57662: LIST
57663: IN
57664: PUSH
57665: LD_VAR 0 1
57669: PPUSH
57670: LD_INT 52
57672: PPUSH
57673: CALL_OW 321
57677: PUSH
57678: LD_INT 2
57680: EQUAL
57681: AND
57682: IFFALSE 57699
// bpoints := bpoints * 1.2 ;
57684: LD_ADDR_VAR 0 10
57688: PUSH
57689: LD_VAR 0 10
57693: PUSH
57694: LD_REAL  1.20000000000000E+0000
57697: MUL
57698: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57699: LD_VAR 0 6
57703: PPUSH
57704: CALL_OW 264
57708: PUSH
57709: LD_INT 6
57711: PUSH
57712: LD_INT 46
57714: PUSH
57715: LD_INT 47
57717: PUSH
57718: EMPTY
57719: LIST
57720: LIST
57721: LIST
57722: IN
57723: IFFALSE 57740
// bpoints := bpoints * 1.2 ;
57725: LD_ADDR_VAR 0 10
57729: PUSH
57730: LD_VAR 0 10
57734: PUSH
57735: LD_REAL  1.20000000000000E+0000
57738: MUL
57739: ST_TO_ADDR
// end ; unit_building :
57740: GO 57754
57742: LD_INT 3
57744: DOUBLE
57745: EQUAL
57746: IFTRUE 57750
57748: GO 57753
57750: POP
// ; end ;
57751: GO 57754
57753: POP
// for j = 1 to 3 do
57754: LD_ADDR_VAR 0 7
57758: PUSH
57759: DOUBLE
57760: LD_INT 1
57762: DEC
57763: ST_TO_ADDR
57764: LD_INT 3
57766: PUSH
57767: FOR_TO
57768: IFFALSE 57821
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57770: LD_ADDR_VAR 0 5
57774: PUSH
57775: LD_VAR 0 5
57779: PPUSH
57780: LD_VAR 0 7
57784: PPUSH
57785: LD_VAR 0 5
57789: PUSH
57790: LD_VAR 0 7
57794: ARRAY
57795: PUSH
57796: LD_VAR 0 9
57800: PUSH
57801: LD_VAR 0 7
57805: ARRAY
57806: PUSH
57807: LD_VAR 0 10
57811: MUL
57812: PLUS
57813: PPUSH
57814: CALL_OW 1
57818: ST_TO_ADDR
57819: GO 57767
57821: POP
57822: POP
// end ;
57823: GO 56300
57825: POP
57826: POP
// result := Replace ( result , 4 , tmp ) ;
57827: LD_ADDR_VAR 0 5
57831: PUSH
57832: LD_VAR 0 5
57836: PPUSH
57837: LD_INT 4
57839: PPUSH
57840: LD_VAR 0 8
57844: PPUSH
57845: CALL_OW 1
57849: ST_TO_ADDR
// end ;
57850: LD_VAR 0 5
57854: RET
// export function DangerAtRange ( unit , range ) ; begin
57855: LD_INT 0
57857: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
57858: LD_ADDR_VAR 0 3
57862: PUSH
57863: LD_VAR 0 1
57867: PPUSH
57868: CALL_OW 255
57872: PPUSH
57873: LD_VAR 0 1
57877: PPUSH
57878: CALL_OW 250
57882: PPUSH
57883: LD_VAR 0 1
57887: PPUSH
57888: CALL_OW 251
57892: PPUSH
57893: LD_VAR 0 2
57897: PPUSH
57898: CALL 56152 0 4
57902: ST_TO_ADDR
// end ;
57903: LD_VAR 0 3
57907: RET
// export function DangerInArea ( side , area ) ; begin
57908: LD_INT 0
57910: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
57911: LD_ADDR_VAR 0 3
57915: PUSH
57916: LD_VAR 0 2
57920: PPUSH
57921: LD_INT 81
57923: PUSH
57924: LD_VAR 0 1
57928: PUSH
57929: EMPTY
57930: LIST
57931: LIST
57932: PPUSH
57933: CALL_OW 70
57937: ST_TO_ADDR
// end ;
57938: LD_VAR 0 3
57942: RET
// export function IsExtension ( b ) ; begin
57943: LD_INT 0
57945: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
57946: LD_ADDR_VAR 0 2
57950: PUSH
57951: LD_VAR 0 1
57955: PUSH
57956: LD_INT 23
57958: PUSH
57959: LD_INT 20
57961: PUSH
57962: LD_INT 22
57964: PUSH
57965: LD_INT 17
57967: PUSH
57968: LD_INT 24
57970: PUSH
57971: LD_INT 21
57973: PUSH
57974: LD_INT 19
57976: PUSH
57977: LD_INT 16
57979: PUSH
57980: LD_INT 25
57982: PUSH
57983: LD_INT 18
57985: PUSH
57986: EMPTY
57987: LIST
57988: LIST
57989: LIST
57990: LIST
57991: LIST
57992: LIST
57993: LIST
57994: LIST
57995: LIST
57996: LIST
57997: IN
57998: ST_TO_ADDR
// end ;
57999: LD_VAR 0 2
58003: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
58004: LD_INT 0
58006: PPUSH
58007: PPUSH
58008: PPUSH
// result := [ ] ;
58009: LD_ADDR_VAR 0 4
58013: PUSH
58014: EMPTY
58015: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
58016: LD_ADDR_VAR 0 5
58020: PUSH
58021: LD_VAR 0 2
58025: PPUSH
58026: LD_INT 21
58028: PUSH
58029: LD_INT 3
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: PPUSH
58036: CALL_OW 70
58040: ST_TO_ADDR
// if not tmp then
58041: LD_VAR 0 5
58045: NOT
58046: IFFALSE 58050
// exit ;
58048: GO 58114
// if checkLink then
58050: LD_VAR 0 3
58054: IFFALSE 58104
// begin for i in tmp do
58056: LD_ADDR_VAR 0 6
58060: PUSH
58061: LD_VAR 0 5
58065: PUSH
58066: FOR_IN
58067: IFFALSE 58102
// if GetBase ( i ) <> base then
58069: LD_VAR 0 6
58073: PPUSH
58074: CALL_OW 274
58078: PUSH
58079: LD_VAR 0 1
58083: NONEQUAL
58084: IFFALSE 58100
// ComLinkToBase ( base , i ) ;
58086: LD_VAR 0 1
58090: PPUSH
58091: LD_VAR 0 6
58095: PPUSH
58096: CALL_OW 169
58100: GO 58066
58102: POP
58103: POP
// end ; result := tmp ;
58104: LD_ADDR_VAR 0 4
58108: PUSH
58109: LD_VAR 0 5
58113: ST_TO_ADDR
// end ;
58114: LD_VAR 0 4
58118: RET
// export function ComComplete ( units , b ) ; var i ; begin
58119: LD_INT 0
58121: PPUSH
58122: PPUSH
// if not units then
58123: LD_VAR 0 1
58127: NOT
58128: IFFALSE 58132
// exit ;
58130: GO 58222
// for i in units do
58132: LD_ADDR_VAR 0 4
58136: PUSH
58137: LD_VAR 0 1
58141: PUSH
58142: FOR_IN
58143: IFFALSE 58220
// if BuildingStatus ( b ) = bs_build then
58145: LD_VAR 0 2
58149: PPUSH
58150: CALL_OW 461
58154: PUSH
58155: LD_INT 1
58157: EQUAL
58158: IFFALSE 58218
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
58160: LD_VAR 0 4
58164: PPUSH
58165: LD_STRING h
58167: PUSH
58168: LD_VAR 0 2
58172: PPUSH
58173: CALL_OW 250
58177: PUSH
58178: LD_VAR 0 2
58182: PPUSH
58183: CALL_OW 251
58187: PUSH
58188: LD_VAR 0 2
58192: PUSH
58193: LD_INT 0
58195: PUSH
58196: LD_INT 0
58198: PUSH
58199: LD_INT 0
58201: PUSH
58202: EMPTY
58203: LIST
58204: LIST
58205: LIST
58206: LIST
58207: LIST
58208: LIST
58209: LIST
58210: PUSH
58211: EMPTY
58212: LIST
58213: PPUSH
58214: CALL_OW 446
58218: GO 58142
58220: POP
58221: POP
// end ;
58222: LD_VAR 0 3
58226: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
58227: LD_INT 0
58229: PPUSH
58230: PPUSH
58231: PPUSH
58232: PPUSH
58233: PPUSH
58234: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
58235: LD_VAR 0 1
58239: NOT
58240: PUSH
58241: LD_VAR 0 1
58245: PPUSH
58246: CALL_OW 263
58250: PUSH
58251: LD_INT 2
58253: NONEQUAL
58254: OR
58255: IFFALSE 58259
// exit ;
58257: GO 58575
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
58259: LD_ADDR_VAR 0 6
58263: PUSH
58264: LD_INT 22
58266: PUSH
58267: LD_VAR 0 1
58271: PPUSH
58272: CALL_OW 255
58276: PUSH
58277: EMPTY
58278: LIST
58279: LIST
58280: PUSH
58281: LD_INT 2
58283: PUSH
58284: LD_INT 30
58286: PUSH
58287: LD_INT 36
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: LD_INT 34
58296: PUSH
58297: LD_INT 31
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PUSH
58304: EMPTY
58305: LIST
58306: LIST
58307: LIST
58308: PUSH
58309: EMPTY
58310: LIST
58311: LIST
58312: PPUSH
58313: CALL_OW 69
58317: ST_TO_ADDR
// if not tmp then
58318: LD_VAR 0 6
58322: NOT
58323: IFFALSE 58327
// exit ;
58325: GO 58575
// result := [ ] ;
58327: LD_ADDR_VAR 0 2
58331: PUSH
58332: EMPTY
58333: ST_TO_ADDR
// for i in tmp do
58334: LD_ADDR_VAR 0 3
58338: PUSH
58339: LD_VAR 0 6
58343: PUSH
58344: FOR_IN
58345: IFFALSE 58416
// begin t := UnitsInside ( i ) ;
58347: LD_ADDR_VAR 0 4
58351: PUSH
58352: LD_VAR 0 3
58356: PPUSH
58357: CALL_OW 313
58361: ST_TO_ADDR
// if t then
58362: LD_VAR 0 4
58366: IFFALSE 58414
// for j in t do
58368: LD_ADDR_VAR 0 7
58372: PUSH
58373: LD_VAR 0 4
58377: PUSH
58378: FOR_IN
58379: IFFALSE 58412
// result := Replace ( result , result + 1 , j ) ;
58381: LD_ADDR_VAR 0 2
58385: PUSH
58386: LD_VAR 0 2
58390: PPUSH
58391: LD_VAR 0 2
58395: PUSH
58396: LD_INT 1
58398: PLUS
58399: PPUSH
58400: LD_VAR 0 7
58404: PPUSH
58405: CALL_OW 1
58409: ST_TO_ADDR
58410: GO 58378
58412: POP
58413: POP
// end ;
58414: GO 58344
58416: POP
58417: POP
// if not result then
58418: LD_VAR 0 2
58422: NOT
58423: IFFALSE 58427
// exit ;
58425: GO 58575
// mech := result [ 1 ] ;
58427: LD_ADDR_VAR 0 5
58431: PUSH
58432: LD_VAR 0 2
58436: PUSH
58437: LD_INT 1
58439: ARRAY
58440: ST_TO_ADDR
// if result > 1 then
58441: LD_VAR 0 2
58445: PUSH
58446: LD_INT 1
58448: GREATER
58449: IFFALSE 58561
// begin for i = 2 to result do
58451: LD_ADDR_VAR 0 3
58455: PUSH
58456: DOUBLE
58457: LD_INT 2
58459: DEC
58460: ST_TO_ADDR
58461: LD_VAR 0 2
58465: PUSH
58466: FOR_TO
58467: IFFALSE 58559
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
58469: LD_ADDR_VAR 0 4
58473: PUSH
58474: LD_VAR 0 2
58478: PUSH
58479: LD_VAR 0 3
58483: ARRAY
58484: PPUSH
58485: LD_INT 3
58487: PPUSH
58488: CALL_OW 259
58492: PUSH
58493: LD_VAR 0 2
58497: PUSH
58498: LD_VAR 0 3
58502: ARRAY
58503: PPUSH
58504: CALL_OW 432
58508: MINUS
58509: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
58510: LD_VAR 0 4
58514: PUSH
58515: LD_VAR 0 5
58519: PPUSH
58520: LD_INT 3
58522: PPUSH
58523: CALL_OW 259
58527: PUSH
58528: LD_VAR 0 5
58532: PPUSH
58533: CALL_OW 432
58537: MINUS
58538: GREATEREQUAL
58539: IFFALSE 58557
// mech := result [ i ] ;
58541: LD_ADDR_VAR 0 5
58545: PUSH
58546: LD_VAR 0 2
58550: PUSH
58551: LD_VAR 0 3
58555: ARRAY
58556: ST_TO_ADDR
// end ;
58557: GO 58466
58559: POP
58560: POP
// end ; ComLinkTo ( vehicle , mech ) ;
58561: LD_VAR 0 1
58565: PPUSH
58566: LD_VAR 0 5
58570: PPUSH
58571: CALL_OW 135
// end ;
58575: LD_VAR 0 2
58579: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58580: LD_INT 0
58582: PPUSH
58583: PPUSH
58584: PPUSH
58585: PPUSH
58586: PPUSH
58587: PPUSH
58588: PPUSH
58589: PPUSH
58590: PPUSH
58591: PPUSH
58592: PPUSH
58593: PPUSH
58594: PPUSH
// result := [ ] ;
58595: LD_ADDR_VAR 0 7
58599: PUSH
58600: EMPTY
58601: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58602: LD_VAR 0 1
58606: PPUSH
58607: CALL_OW 266
58611: PUSH
58612: LD_INT 0
58614: PUSH
58615: LD_INT 1
58617: PUSH
58618: EMPTY
58619: LIST
58620: LIST
58621: IN
58622: NOT
58623: IFFALSE 58627
// exit ;
58625: GO 60261
// if name then
58627: LD_VAR 0 3
58631: IFFALSE 58647
// SetBName ( base_dep , name ) ;
58633: LD_VAR 0 1
58637: PPUSH
58638: LD_VAR 0 3
58642: PPUSH
58643: CALL_OW 500
// base := GetBase ( base_dep ) ;
58647: LD_ADDR_VAR 0 15
58651: PUSH
58652: LD_VAR 0 1
58656: PPUSH
58657: CALL_OW 274
58661: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58662: LD_ADDR_VAR 0 16
58666: PUSH
58667: LD_VAR 0 1
58671: PPUSH
58672: CALL_OW 255
58676: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58677: LD_ADDR_VAR 0 17
58681: PUSH
58682: LD_VAR 0 1
58686: PPUSH
58687: CALL_OW 248
58691: ST_TO_ADDR
// if sources then
58692: LD_VAR 0 5
58696: IFFALSE 58743
// for i = 1 to 3 do
58698: LD_ADDR_VAR 0 8
58702: PUSH
58703: DOUBLE
58704: LD_INT 1
58706: DEC
58707: ST_TO_ADDR
58708: LD_INT 3
58710: PUSH
58711: FOR_TO
58712: IFFALSE 58741
// AddResourceType ( base , i , sources [ i ] ) ;
58714: LD_VAR 0 15
58718: PPUSH
58719: LD_VAR 0 8
58723: PPUSH
58724: LD_VAR 0 5
58728: PUSH
58729: LD_VAR 0 8
58733: ARRAY
58734: PPUSH
58735: CALL_OW 276
58739: GO 58711
58741: POP
58742: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
58743: LD_ADDR_VAR 0 18
58747: PUSH
58748: LD_VAR 0 15
58752: PPUSH
58753: LD_VAR 0 2
58757: PPUSH
58758: LD_INT 1
58760: PPUSH
58761: CALL 58004 0 3
58765: ST_TO_ADDR
// InitHc ;
58766: CALL_OW 19
// InitUc ;
58770: CALL_OW 18
// uc_side := side ;
58774: LD_ADDR_OWVAR 20
58778: PUSH
58779: LD_VAR 0 16
58783: ST_TO_ADDR
// uc_nation := nation ;
58784: LD_ADDR_OWVAR 21
58788: PUSH
58789: LD_VAR 0 17
58793: ST_TO_ADDR
// if buildings then
58794: LD_VAR 0 18
58798: IFFALSE 60120
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58800: LD_ADDR_VAR 0 19
58804: PUSH
58805: LD_VAR 0 18
58809: PPUSH
58810: LD_INT 2
58812: PUSH
58813: LD_INT 30
58815: PUSH
58816: LD_INT 29
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: PUSH
58823: LD_INT 30
58825: PUSH
58826: LD_INT 30
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: LIST
58837: PPUSH
58838: CALL_OW 72
58842: ST_TO_ADDR
// if tmp then
58843: LD_VAR 0 19
58847: IFFALSE 58895
// for i in tmp do
58849: LD_ADDR_VAR 0 8
58853: PUSH
58854: LD_VAR 0 19
58858: PUSH
58859: FOR_IN
58860: IFFALSE 58893
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
58862: LD_VAR 0 8
58866: PPUSH
58867: CALL_OW 250
58871: PPUSH
58872: LD_VAR 0 8
58876: PPUSH
58877: CALL_OW 251
58881: PPUSH
58882: LD_VAR 0 16
58886: PPUSH
58887: CALL_OW 441
58891: GO 58859
58893: POP
58894: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
58895: LD_VAR 0 18
58899: PPUSH
58900: LD_INT 2
58902: PUSH
58903: LD_INT 30
58905: PUSH
58906: LD_INT 32
58908: PUSH
58909: EMPTY
58910: LIST
58911: LIST
58912: PUSH
58913: LD_INT 30
58915: PUSH
58916: LD_INT 33
58918: PUSH
58919: EMPTY
58920: LIST
58921: LIST
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: LIST
58927: PPUSH
58928: CALL_OW 72
58932: IFFALSE 59020
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
58934: LD_ADDR_VAR 0 8
58938: PUSH
58939: LD_VAR 0 18
58943: PPUSH
58944: LD_INT 2
58946: PUSH
58947: LD_INT 30
58949: PUSH
58950: LD_INT 32
58952: PUSH
58953: EMPTY
58954: LIST
58955: LIST
58956: PUSH
58957: LD_INT 30
58959: PUSH
58960: LD_INT 33
58962: PUSH
58963: EMPTY
58964: LIST
58965: LIST
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: LIST
58971: PPUSH
58972: CALL_OW 72
58976: PUSH
58977: FOR_IN
58978: IFFALSE 59018
// begin if not GetBWeapon ( i ) then
58980: LD_VAR 0 8
58984: PPUSH
58985: CALL_OW 269
58989: NOT
58990: IFFALSE 59016
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
58992: LD_VAR 0 8
58996: PPUSH
58997: LD_VAR 0 8
59001: PPUSH
59002: LD_VAR 0 2
59006: PPUSH
59007: CALL 60266 0 2
59011: PPUSH
59012: CALL_OW 431
// end ;
59016: GO 58977
59018: POP
59019: POP
// end ; for i = 1 to personel do
59020: LD_ADDR_VAR 0 8
59024: PUSH
59025: DOUBLE
59026: LD_INT 1
59028: DEC
59029: ST_TO_ADDR
59030: LD_VAR 0 6
59034: PUSH
59035: FOR_TO
59036: IFFALSE 60100
// begin if i > 4 then
59038: LD_VAR 0 8
59042: PUSH
59043: LD_INT 4
59045: GREATER
59046: IFFALSE 59050
// break ;
59048: GO 60100
// case i of 1 :
59050: LD_VAR 0 8
59054: PUSH
59055: LD_INT 1
59057: DOUBLE
59058: EQUAL
59059: IFTRUE 59063
59061: GO 59143
59063: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
59064: LD_ADDR_VAR 0 12
59068: PUSH
59069: LD_VAR 0 18
59073: PPUSH
59074: LD_INT 22
59076: PUSH
59077: LD_VAR 0 16
59081: PUSH
59082: EMPTY
59083: LIST
59084: LIST
59085: PUSH
59086: LD_INT 58
59088: PUSH
59089: EMPTY
59090: LIST
59091: PUSH
59092: LD_INT 2
59094: PUSH
59095: LD_INT 30
59097: PUSH
59098: LD_INT 32
59100: PUSH
59101: EMPTY
59102: LIST
59103: LIST
59104: PUSH
59105: LD_INT 30
59107: PUSH
59108: LD_INT 4
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: PUSH
59115: LD_INT 30
59117: PUSH
59118: LD_INT 5
59120: PUSH
59121: EMPTY
59122: LIST
59123: LIST
59124: PUSH
59125: EMPTY
59126: LIST
59127: LIST
59128: LIST
59129: LIST
59130: PUSH
59131: EMPTY
59132: LIST
59133: LIST
59134: LIST
59135: PPUSH
59136: CALL_OW 72
59140: ST_TO_ADDR
59141: GO 59365
59143: LD_INT 2
59145: DOUBLE
59146: EQUAL
59147: IFTRUE 59151
59149: GO 59213
59151: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
59152: LD_ADDR_VAR 0 12
59156: PUSH
59157: LD_VAR 0 18
59161: PPUSH
59162: LD_INT 22
59164: PUSH
59165: LD_VAR 0 16
59169: PUSH
59170: EMPTY
59171: LIST
59172: LIST
59173: PUSH
59174: LD_INT 2
59176: PUSH
59177: LD_INT 30
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: PUSH
59187: LD_INT 30
59189: PUSH
59190: LD_INT 1
59192: PUSH
59193: EMPTY
59194: LIST
59195: LIST
59196: PUSH
59197: EMPTY
59198: LIST
59199: LIST
59200: LIST
59201: PUSH
59202: EMPTY
59203: LIST
59204: LIST
59205: PPUSH
59206: CALL_OW 72
59210: ST_TO_ADDR
59211: GO 59365
59213: LD_INT 3
59215: DOUBLE
59216: EQUAL
59217: IFTRUE 59221
59219: GO 59283
59221: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
59222: LD_ADDR_VAR 0 12
59226: PUSH
59227: LD_VAR 0 18
59231: PPUSH
59232: LD_INT 22
59234: PUSH
59235: LD_VAR 0 16
59239: PUSH
59240: EMPTY
59241: LIST
59242: LIST
59243: PUSH
59244: LD_INT 2
59246: PUSH
59247: LD_INT 30
59249: PUSH
59250: LD_INT 2
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: PUSH
59257: LD_INT 30
59259: PUSH
59260: LD_INT 3
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PUSH
59267: EMPTY
59268: LIST
59269: LIST
59270: LIST
59271: PUSH
59272: EMPTY
59273: LIST
59274: LIST
59275: PPUSH
59276: CALL_OW 72
59280: ST_TO_ADDR
59281: GO 59365
59283: LD_INT 4
59285: DOUBLE
59286: EQUAL
59287: IFTRUE 59291
59289: GO 59364
59291: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
59292: LD_ADDR_VAR 0 12
59296: PUSH
59297: LD_VAR 0 18
59301: PPUSH
59302: LD_INT 22
59304: PUSH
59305: LD_VAR 0 16
59309: PUSH
59310: EMPTY
59311: LIST
59312: LIST
59313: PUSH
59314: LD_INT 2
59316: PUSH
59317: LD_INT 30
59319: PUSH
59320: LD_INT 6
59322: PUSH
59323: EMPTY
59324: LIST
59325: LIST
59326: PUSH
59327: LD_INT 30
59329: PUSH
59330: LD_INT 7
59332: PUSH
59333: EMPTY
59334: LIST
59335: LIST
59336: PUSH
59337: LD_INT 30
59339: PUSH
59340: LD_INT 8
59342: PUSH
59343: EMPTY
59344: LIST
59345: LIST
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: LIST
59351: LIST
59352: PUSH
59353: EMPTY
59354: LIST
59355: LIST
59356: PPUSH
59357: CALL_OW 72
59361: ST_TO_ADDR
59362: GO 59365
59364: POP
// if i = 1 then
59365: LD_VAR 0 8
59369: PUSH
59370: LD_INT 1
59372: EQUAL
59373: IFFALSE 59484
// begin tmp := [ ] ;
59375: LD_ADDR_VAR 0 19
59379: PUSH
59380: EMPTY
59381: ST_TO_ADDR
// for j in f do
59382: LD_ADDR_VAR 0 9
59386: PUSH
59387: LD_VAR 0 12
59391: PUSH
59392: FOR_IN
59393: IFFALSE 59466
// if GetBType ( j ) = b_bunker then
59395: LD_VAR 0 9
59399: PPUSH
59400: CALL_OW 266
59404: PUSH
59405: LD_INT 32
59407: EQUAL
59408: IFFALSE 59435
// tmp := Insert ( tmp , 1 , j ) else
59410: LD_ADDR_VAR 0 19
59414: PUSH
59415: LD_VAR 0 19
59419: PPUSH
59420: LD_INT 1
59422: PPUSH
59423: LD_VAR 0 9
59427: PPUSH
59428: CALL_OW 2
59432: ST_TO_ADDR
59433: GO 59464
// tmp := Insert ( tmp , tmp + 1 , j ) ;
59435: LD_ADDR_VAR 0 19
59439: PUSH
59440: LD_VAR 0 19
59444: PPUSH
59445: LD_VAR 0 19
59449: PUSH
59450: LD_INT 1
59452: PLUS
59453: PPUSH
59454: LD_VAR 0 9
59458: PPUSH
59459: CALL_OW 2
59463: ST_TO_ADDR
59464: GO 59392
59466: POP
59467: POP
// if tmp then
59468: LD_VAR 0 19
59472: IFFALSE 59484
// f := tmp ;
59474: LD_ADDR_VAR 0 12
59478: PUSH
59479: LD_VAR 0 19
59483: ST_TO_ADDR
// end ; x := personel [ i ] ;
59484: LD_ADDR_VAR 0 13
59488: PUSH
59489: LD_VAR 0 6
59493: PUSH
59494: LD_VAR 0 8
59498: ARRAY
59499: ST_TO_ADDR
// if x = - 1 then
59500: LD_VAR 0 13
59504: PUSH
59505: LD_INT 1
59507: NEG
59508: EQUAL
59509: IFFALSE 59718
// begin for j in f do
59511: LD_ADDR_VAR 0 9
59515: PUSH
59516: LD_VAR 0 12
59520: PUSH
59521: FOR_IN
59522: IFFALSE 59714
// repeat InitHc ;
59524: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59528: LD_VAR 0 9
59532: PPUSH
59533: CALL_OW 266
59537: PUSH
59538: LD_INT 5
59540: EQUAL
59541: IFFALSE 59611
// begin if UnitsInside ( j ) < 3 then
59543: LD_VAR 0 9
59547: PPUSH
59548: CALL_OW 313
59552: PUSH
59553: LD_INT 3
59555: LESS
59556: IFFALSE 59592
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59558: LD_INT 0
59560: PPUSH
59561: LD_INT 5
59563: PUSH
59564: LD_INT 8
59566: PUSH
59567: LD_INT 9
59569: PUSH
59570: EMPTY
59571: LIST
59572: LIST
59573: LIST
59574: PUSH
59575: LD_VAR 0 17
59579: ARRAY
59580: PPUSH
59581: LD_VAR 0 4
59585: PPUSH
59586: CALL_OW 380
59590: GO 59609
// PrepareHuman ( false , i , skill ) ;
59592: LD_INT 0
59594: PPUSH
59595: LD_VAR 0 8
59599: PPUSH
59600: LD_VAR 0 4
59604: PPUSH
59605: CALL_OW 380
// end else
59609: GO 59628
// PrepareHuman ( false , i , skill ) ;
59611: LD_INT 0
59613: PPUSH
59614: LD_VAR 0 8
59618: PPUSH
59619: LD_VAR 0 4
59623: PPUSH
59624: CALL_OW 380
// un := CreateHuman ;
59628: LD_ADDR_VAR 0 14
59632: PUSH
59633: CALL_OW 44
59637: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59638: LD_ADDR_VAR 0 7
59642: PUSH
59643: LD_VAR 0 7
59647: PPUSH
59648: LD_INT 1
59650: PPUSH
59651: LD_VAR 0 14
59655: PPUSH
59656: CALL_OW 2
59660: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59661: LD_VAR 0 14
59665: PPUSH
59666: LD_VAR 0 9
59670: PPUSH
59671: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59675: LD_VAR 0 9
59679: PPUSH
59680: CALL_OW 313
59684: PUSH
59685: LD_INT 6
59687: EQUAL
59688: PUSH
59689: LD_VAR 0 9
59693: PPUSH
59694: CALL_OW 266
59698: PUSH
59699: LD_INT 32
59701: PUSH
59702: LD_INT 31
59704: PUSH
59705: EMPTY
59706: LIST
59707: LIST
59708: IN
59709: OR
59710: IFFALSE 59524
59712: GO 59521
59714: POP
59715: POP
// end else
59716: GO 60098
// for j = 1 to x do
59718: LD_ADDR_VAR 0 9
59722: PUSH
59723: DOUBLE
59724: LD_INT 1
59726: DEC
59727: ST_TO_ADDR
59728: LD_VAR 0 13
59732: PUSH
59733: FOR_TO
59734: IFFALSE 60096
// begin InitHc ;
59736: CALL_OW 19
// if not f then
59740: LD_VAR 0 12
59744: NOT
59745: IFFALSE 59834
// begin PrepareHuman ( false , i , skill ) ;
59747: LD_INT 0
59749: PPUSH
59750: LD_VAR 0 8
59754: PPUSH
59755: LD_VAR 0 4
59759: PPUSH
59760: CALL_OW 380
// un := CreateHuman ;
59764: LD_ADDR_VAR 0 14
59768: PUSH
59769: CALL_OW 44
59773: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59774: LD_ADDR_VAR 0 7
59778: PUSH
59779: LD_VAR 0 7
59783: PPUSH
59784: LD_INT 1
59786: PPUSH
59787: LD_VAR 0 14
59791: PPUSH
59792: CALL_OW 2
59796: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59797: LD_VAR 0 14
59801: PPUSH
59802: LD_VAR 0 1
59806: PPUSH
59807: CALL_OW 250
59811: PPUSH
59812: LD_VAR 0 1
59816: PPUSH
59817: CALL_OW 251
59821: PPUSH
59822: LD_INT 10
59824: PPUSH
59825: LD_INT 0
59827: PPUSH
59828: CALL_OW 50
// continue ;
59832: GO 59733
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
59834: LD_VAR 0 12
59838: PUSH
59839: LD_INT 1
59841: ARRAY
59842: PPUSH
59843: CALL_OW 313
59847: PUSH
59848: LD_VAR 0 12
59852: PUSH
59853: LD_INT 1
59855: ARRAY
59856: PPUSH
59857: CALL_OW 266
59861: PUSH
59862: LD_INT 32
59864: PUSH
59865: LD_INT 31
59867: PUSH
59868: EMPTY
59869: LIST
59870: LIST
59871: IN
59872: AND
59873: PUSH
59874: LD_VAR 0 12
59878: PUSH
59879: LD_INT 1
59881: ARRAY
59882: PPUSH
59883: CALL_OW 313
59887: PUSH
59888: LD_INT 6
59890: EQUAL
59891: OR
59892: IFFALSE 59912
// f := Delete ( f , 1 ) ;
59894: LD_ADDR_VAR 0 12
59898: PUSH
59899: LD_VAR 0 12
59903: PPUSH
59904: LD_INT 1
59906: PPUSH
59907: CALL_OW 3
59911: ST_TO_ADDR
// if not f then
59912: LD_VAR 0 12
59916: NOT
59917: IFFALSE 59935
// begin x := x + 2 ;
59919: LD_ADDR_VAR 0 13
59923: PUSH
59924: LD_VAR 0 13
59928: PUSH
59929: LD_INT 2
59931: PLUS
59932: ST_TO_ADDR
// continue ;
59933: GO 59733
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
59935: LD_VAR 0 12
59939: PUSH
59940: LD_INT 1
59942: ARRAY
59943: PPUSH
59944: CALL_OW 266
59948: PUSH
59949: LD_INT 5
59951: EQUAL
59952: IFFALSE 60026
// begin if UnitsInside ( f [ 1 ] ) < 3 then
59954: LD_VAR 0 12
59958: PUSH
59959: LD_INT 1
59961: ARRAY
59962: PPUSH
59963: CALL_OW 313
59967: PUSH
59968: LD_INT 3
59970: LESS
59971: IFFALSE 60007
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59973: LD_INT 0
59975: PPUSH
59976: LD_INT 5
59978: PUSH
59979: LD_INT 8
59981: PUSH
59982: LD_INT 9
59984: PUSH
59985: EMPTY
59986: LIST
59987: LIST
59988: LIST
59989: PUSH
59990: LD_VAR 0 17
59994: ARRAY
59995: PPUSH
59996: LD_VAR 0 4
60000: PPUSH
60001: CALL_OW 380
60005: GO 60024
// PrepareHuman ( false , i , skill ) ;
60007: LD_INT 0
60009: PPUSH
60010: LD_VAR 0 8
60014: PPUSH
60015: LD_VAR 0 4
60019: PPUSH
60020: CALL_OW 380
// end else
60024: GO 60043
// PrepareHuman ( false , i , skill ) ;
60026: LD_INT 0
60028: PPUSH
60029: LD_VAR 0 8
60033: PPUSH
60034: LD_VAR 0 4
60038: PPUSH
60039: CALL_OW 380
// un := CreateHuman ;
60043: LD_ADDR_VAR 0 14
60047: PUSH
60048: CALL_OW 44
60052: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60053: LD_ADDR_VAR 0 7
60057: PUSH
60058: LD_VAR 0 7
60062: PPUSH
60063: LD_INT 1
60065: PPUSH
60066: LD_VAR 0 14
60070: PPUSH
60071: CALL_OW 2
60075: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
60076: LD_VAR 0 14
60080: PPUSH
60081: LD_VAR 0 12
60085: PUSH
60086: LD_INT 1
60088: ARRAY
60089: PPUSH
60090: CALL_OW 52
// end ;
60094: GO 59733
60096: POP
60097: POP
// end ;
60098: GO 59035
60100: POP
60101: POP
// result := result ^ buildings ;
60102: LD_ADDR_VAR 0 7
60106: PUSH
60107: LD_VAR 0 7
60111: PUSH
60112: LD_VAR 0 18
60116: ADD
60117: ST_TO_ADDR
// end else
60118: GO 60261
// begin for i = 1 to personel do
60120: LD_ADDR_VAR 0 8
60124: PUSH
60125: DOUBLE
60126: LD_INT 1
60128: DEC
60129: ST_TO_ADDR
60130: LD_VAR 0 6
60134: PUSH
60135: FOR_TO
60136: IFFALSE 60259
// begin if i > 4 then
60138: LD_VAR 0 8
60142: PUSH
60143: LD_INT 4
60145: GREATER
60146: IFFALSE 60150
// break ;
60148: GO 60259
// x := personel [ i ] ;
60150: LD_ADDR_VAR 0 13
60154: PUSH
60155: LD_VAR 0 6
60159: PUSH
60160: LD_VAR 0 8
60164: ARRAY
60165: ST_TO_ADDR
// if x = - 1 then
60166: LD_VAR 0 13
60170: PUSH
60171: LD_INT 1
60173: NEG
60174: EQUAL
60175: IFFALSE 60179
// continue ;
60177: GO 60135
// PrepareHuman ( false , i , skill ) ;
60179: LD_INT 0
60181: PPUSH
60182: LD_VAR 0 8
60186: PPUSH
60187: LD_VAR 0 4
60191: PPUSH
60192: CALL_OW 380
// un := CreateHuman ;
60196: LD_ADDR_VAR 0 14
60200: PUSH
60201: CALL_OW 44
60205: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60206: LD_VAR 0 14
60210: PPUSH
60211: LD_VAR 0 1
60215: PPUSH
60216: CALL_OW 250
60220: PPUSH
60221: LD_VAR 0 1
60225: PPUSH
60226: CALL_OW 251
60230: PPUSH
60231: LD_INT 10
60233: PPUSH
60234: LD_INT 0
60236: PPUSH
60237: CALL_OW 50
// result := result ^ un ;
60241: LD_ADDR_VAR 0 7
60245: PUSH
60246: LD_VAR 0 7
60250: PUSH
60251: LD_VAR 0 14
60255: ADD
60256: ST_TO_ADDR
// end ;
60257: GO 60135
60259: POP
60260: POP
// end ; end ;
60261: LD_VAR 0 7
60265: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
60266: LD_INT 0
60268: PPUSH
60269: PPUSH
60270: PPUSH
60271: PPUSH
60272: PPUSH
60273: PPUSH
60274: PPUSH
60275: PPUSH
60276: PPUSH
60277: PPUSH
60278: PPUSH
60279: PPUSH
60280: PPUSH
60281: PPUSH
60282: PPUSH
60283: PPUSH
// result := false ;
60284: LD_ADDR_VAR 0 3
60288: PUSH
60289: LD_INT 0
60291: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
60292: LD_VAR 0 1
60296: NOT
60297: PUSH
60298: LD_VAR 0 1
60302: PPUSH
60303: CALL_OW 266
60307: PUSH
60308: LD_INT 32
60310: PUSH
60311: LD_INT 33
60313: PUSH
60314: EMPTY
60315: LIST
60316: LIST
60317: IN
60318: NOT
60319: OR
60320: IFFALSE 60324
// exit ;
60322: GO 61433
// nat := GetNation ( tower ) ;
60324: LD_ADDR_VAR 0 12
60328: PUSH
60329: LD_VAR 0 1
60333: PPUSH
60334: CALL_OW 248
60338: ST_TO_ADDR
// side := GetSide ( tower ) ;
60339: LD_ADDR_VAR 0 16
60343: PUSH
60344: LD_VAR 0 1
60348: PPUSH
60349: CALL_OW 255
60353: ST_TO_ADDR
// x := GetX ( tower ) ;
60354: LD_ADDR_VAR 0 10
60358: PUSH
60359: LD_VAR 0 1
60363: PPUSH
60364: CALL_OW 250
60368: ST_TO_ADDR
// y := GetY ( tower ) ;
60369: LD_ADDR_VAR 0 11
60373: PUSH
60374: LD_VAR 0 1
60378: PPUSH
60379: CALL_OW 251
60383: ST_TO_ADDR
// if not x or not y then
60384: LD_VAR 0 10
60388: NOT
60389: PUSH
60390: LD_VAR 0 11
60394: NOT
60395: OR
60396: IFFALSE 60400
// exit ;
60398: GO 61433
// weapon := 0 ;
60400: LD_ADDR_VAR 0 18
60404: PUSH
60405: LD_INT 0
60407: ST_TO_ADDR
// fac_list := [ ] ;
60408: LD_ADDR_VAR 0 17
60412: PUSH
60413: EMPTY
60414: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
60415: LD_ADDR_VAR 0 6
60419: PUSH
60420: LD_VAR 0 1
60424: PPUSH
60425: CALL_OW 274
60429: PPUSH
60430: LD_VAR 0 2
60434: PPUSH
60435: LD_INT 0
60437: PPUSH
60438: CALL 58004 0 3
60442: PPUSH
60443: LD_INT 30
60445: PUSH
60446: LD_INT 3
60448: PUSH
60449: EMPTY
60450: LIST
60451: LIST
60452: PPUSH
60453: CALL_OW 72
60457: ST_TO_ADDR
// if not factories then
60458: LD_VAR 0 6
60462: NOT
60463: IFFALSE 60467
// exit ;
60465: GO 61433
// for i in factories do
60467: LD_ADDR_VAR 0 8
60471: PUSH
60472: LD_VAR 0 6
60476: PUSH
60477: FOR_IN
60478: IFFALSE 60503
// fac_list := fac_list union AvailableWeaponList ( i ) ;
60480: LD_ADDR_VAR 0 17
60484: PUSH
60485: LD_VAR 0 17
60489: PUSH
60490: LD_VAR 0 8
60494: PPUSH
60495: CALL_OW 478
60499: UNION
60500: ST_TO_ADDR
60501: GO 60477
60503: POP
60504: POP
// if not fac_list then
60505: LD_VAR 0 17
60509: NOT
60510: IFFALSE 60514
// exit ;
60512: GO 61433
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
60514: LD_ADDR_VAR 0 5
60518: PUSH
60519: LD_INT 4
60521: PUSH
60522: LD_INT 5
60524: PUSH
60525: LD_INT 9
60527: PUSH
60528: LD_INT 10
60530: PUSH
60531: LD_INT 6
60533: PUSH
60534: LD_INT 7
60536: PUSH
60537: LD_INT 11
60539: PUSH
60540: EMPTY
60541: LIST
60542: LIST
60543: LIST
60544: LIST
60545: LIST
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 27
60551: PUSH
60552: LD_INT 28
60554: PUSH
60555: LD_INT 26
60557: PUSH
60558: LD_INT 30
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: LIST
60565: LIST
60566: PUSH
60567: LD_INT 43
60569: PUSH
60570: LD_INT 44
60572: PUSH
60573: LD_INT 46
60575: PUSH
60576: LD_INT 45
60578: PUSH
60579: LD_INT 47
60581: PUSH
60582: LD_INT 49
60584: PUSH
60585: EMPTY
60586: LIST
60587: LIST
60588: LIST
60589: LIST
60590: LIST
60591: LIST
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: LIST
60597: PUSH
60598: LD_VAR 0 12
60602: ARRAY
60603: ST_TO_ADDR
// list := list isect fac_list ;
60604: LD_ADDR_VAR 0 5
60608: PUSH
60609: LD_VAR 0 5
60613: PUSH
60614: LD_VAR 0 17
60618: ISECT
60619: ST_TO_ADDR
// if not list then
60620: LD_VAR 0 5
60624: NOT
60625: IFFALSE 60629
// exit ;
60627: GO 61433
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60629: LD_VAR 0 12
60633: PUSH
60634: LD_INT 3
60636: EQUAL
60637: PUSH
60638: LD_INT 49
60640: PUSH
60641: LD_VAR 0 5
60645: IN
60646: AND
60647: PUSH
60648: LD_INT 31
60650: PPUSH
60651: LD_VAR 0 16
60655: PPUSH
60656: CALL_OW 321
60660: PUSH
60661: LD_INT 2
60663: EQUAL
60664: AND
60665: IFFALSE 60725
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60667: LD_INT 22
60669: PUSH
60670: LD_VAR 0 16
60674: PUSH
60675: EMPTY
60676: LIST
60677: LIST
60678: PUSH
60679: LD_INT 35
60681: PUSH
60682: LD_INT 49
60684: PUSH
60685: EMPTY
60686: LIST
60687: LIST
60688: PUSH
60689: LD_INT 91
60691: PUSH
60692: LD_VAR 0 1
60696: PUSH
60697: LD_INT 10
60699: PUSH
60700: EMPTY
60701: LIST
60702: LIST
60703: LIST
60704: PUSH
60705: EMPTY
60706: LIST
60707: LIST
60708: LIST
60709: PPUSH
60710: CALL_OW 69
60714: NOT
60715: IFFALSE 60725
// weapon := ru_time_lapser ;
60717: LD_ADDR_VAR 0 18
60721: PUSH
60722: LD_INT 49
60724: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60725: LD_VAR 0 12
60729: PUSH
60730: LD_INT 1
60732: PUSH
60733: LD_INT 2
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: IN
60740: PUSH
60741: LD_INT 11
60743: PUSH
60744: LD_VAR 0 5
60748: IN
60749: PUSH
60750: LD_INT 30
60752: PUSH
60753: LD_VAR 0 5
60757: IN
60758: OR
60759: AND
60760: PUSH
60761: LD_INT 6
60763: PPUSH
60764: LD_VAR 0 16
60768: PPUSH
60769: CALL_OW 321
60773: PUSH
60774: LD_INT 2
60776: EQUAL
60777: AND
60778: IFFALSE 60943
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60780: LD_INT 22
60782: PUSH
60783: LD_VAR 0 16
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: PUSH
60792: LD_INT 2
60794: PUSH
60795: LD_INT 35
60797: PUSH
60798: LD_INT 11
60800: PUSH
60801: EMPTY
60802: LIST
60803: LIST
60804: PUSH
60805: LD_INT 35
60807: PUSH
60808: LD_INT 30
60810: PUSH
60811: EMPTY
60812: LIST
60813: LIST
60814: PUSH
60815: EMPTY
60816: LIST
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 91
60822: PUSH
60823: LD_VAR 0 1
60827: PUSH
60828: LD_INT 18
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: LIST
60840: PPUSH
60841: CALL_OW 69
60845: NOT
60846: PUSH
60847: LD_INT 22
60849: PUSH
60850: LD_VAR 0 16
60854: PUSH
60855: EMPTY
60856: LIST
60857: LIST
60858: PUSH
60859: LD_INT 2
60861: PUSH
60862: LD_INT 30
60864: PUSH
60865: LD_INT 32
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 30
60874: PUSH
60875: LD_INT 33
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: LIST
60886: PUSH
60887: LD_INT 91
60889: PUSH
60890: LD_VAR 0 1
60894: PUSH
60895: LD_INT 12
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: PUSH
60903: EMPTY
60904: LIST
60905: LIST
60906: LIST
60907: PUSH
60908: EMPTY
60909: LIST
60910: PPUSH
60911: CALL_OW 69
60915: PUSH
60916: LD_INT 2
60918: GREATER
60919: AND
60920: IFFALSE 60943
// weapon := [ us_radar , ar_radar ] [ nat ] ;
60922: LD_ADDR_VAR 0 18
60926: PUSH
60927: LD_INT 11
60929: PUSH
60930: LD_INT 30
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: PUSH
60937: LD_VAR 0 12
60941: ARRAY
60942: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
60943: LD_VAR 0 18
60947: NOT
60948: PUSH
60949: LD_INT 40
60951: PPUSH
60952: LD_VAR 0 16
60956: PPUSH
60957: CALL_OW 321
60961: PUSH
60962: LD_INT 2
60964: EQUAL
60965: AND
60966: PUSH
60967: LD_INT 7
60969: PUSH
60970: LD_VAR 0 5
60974: IN
60975: PUSH
60976: LD_INT 28
60978: PUSH
60979: LD_VAR 0 5
60983: IN
60984: OR
60985: PUSH
60986: LD_INT 45
60988: PUSH
60989: LD_VAR 0 5
60993: IN
60994: OR
60995: AND
60996: IFFALSE 61250
// begin hex := GetHexInfo ( x , y ) ;
60998: LD_ADDR_VAR 0 4
61002: PUSH
61003: LD_VAR 0 10
61007: PPUSH
61008: LD_VAR 0 11
61012: PPUSH
61013: CALL_OW 546
61017: ST_TO_ADDR
// if hex [ 1 ] then
61018: LD_VAR 0 4
61022: PUSH
61023: LD_INT 1
61025: ARRAY
61026: IFFALSE 61030
// exit ;
61028: GO 61433
// height := hex [ 2 ] ;
61030: LD_ADDR_VAR 0 15
61034: PUSH
61035: LD_VAR 0 4
61039: PUSH
61040: LD_INT 2
61042: ARRAY
61043: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
61044: LD_ADDR_VAR 0 14
61048: PUSH
61049: LD_INT 0
61051: PUSH
61052: LD_INT 2
61054: PUSH
61055: LD_INT 3
61057: PUSH
61058: LD_INT 5
61060: PUSH
61061: EMPTY
61062: LIST
61063: LIST
61064: LIST
61065: LIST
61066: ST_TO_ADDR
// for i in tmp do
61067: LD_ADDR_VAR 0 8
61071: PUSH
61072: LD_VAR 0 14
61076: PUSH
61077: FOR_IN
61078: IFFALSE 61248
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
61080: LD_ADDR_VAR 0 9
61084: PUSH
61085: LD_VAR 0 10
61089: PPUSH
61090: LD_VAR 0 8
61094: PPUSH
61095: LD_INT 5
61097: PPUSH
61098: CALL_OW 272
61102: PUSH
61103: LD_VAR 0 11
61107: PPUSH
61108: LD_VAR 0 8
61112: PPUSH
61113: LD_INT 5
61115: PPUSH
61116: CALL_OW 273
61120: PUSH
61121: EMPTY
61122: LIST
61123: LIST
61124: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
61125: LD_VAR 0 9
61129: PUSH
61130: LD_INT 1
61132: ARRAY
61133: PPUSH
61134: LD_VAR 0 9
61138: PUSH
61139: LD_INT 2
61141: ARRAY
61142: PPUSH
61143: CALL_OW 488
61147: IFFALSE 61246
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
61149: LD_ADDR_VAR 0 4
61153: PUSH
61154: LD_VAR 0 9
61158: PUSH
61159: LD_INT 1
61161: ARRAY
61162: PPUSH
61163: LD_VAR 0 9
61167: PUSH
61168: LD_INT 2
61170: ARRAY
61171: PPUSH
61172: CALL_OW 546
61176: ST_TO_ADDR
// if hex [ 1 ] then
61177: LD_VAR 0 4
61181: PUSH
61182: LD_INT 1
61184: ARRAY
61185: IFFALSE 61189
// continue ;
61187: GO 61077
// h := hex [ 2 ] ;
61189: LD_ADDR_VAR 0 13
61193: PUSH
61194: LD_VAR 0 4
61198: PUSH
61199: LD_INT 2
61201: ARRAY
61202: ST_TO_ADDR
// if h + 7 < height then
61203: LD_VAR 0 13
61207: PUSH
61208: LD_INT 7
61210: PLUS
61211: PUSH
61212: LD_VAR 0 15
61216: LESS
61217: IFFALSE 61246
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
61219: LD_ADDR_VAR 0 18
61223: PUSH
61224: LD_INT 7
61226: PUSH
61227: LD_INT 28
61229: PUSH
61230: LD_INT 45
61232: PUSH
61233: EMPTY
61234: LIST
61235: LIST
61236: LIST
61237: PUSH
61238: LD_VAR 0 12
61242: ARRAY
61243: ST_TO_ADDR
// break ;
61244: GO 61248
// end ; end ; end ;
61246: GO 61077
61248: POP
61249: POP
// end ; if not weapon then
61250: LD_VAR 0 18
61254: NOT
61255: IFFALSE 61315
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
61257: LD_ADDR_VAR 0 5
61261: PUSH
61262: LD_VAR 0 5
61266: PUSH
61267: LD_INT 11
61269: PUSH
61270: LD_INT 30
61272: PUSH
61273: LD_INT 49
61275: PUSH
61276: EMPTY
61277: LIST
61278: LIST
61279: LIST
61280: DIFF
61281: ST_TO_ADDR
// if not list then
61282: LD_VAR 0 5
61286: NOT
61287: IFFALSE 61291
// exit ;
61289: GO 61433
// weapon := list [ rand ( 1 , list ) ] ;
61291: LD_ADDR_VAR 0 18
61295: PUSH
61296: LD_VAR 0 5
61300: PUSH
61301: LD_INT 1
61303: PPUSH
61304: LD_VAR 0 5
61308: PPUSH
61309: CALL_OW 12
61313: ARRAY
61314: ST_TO_ADDR
// end ; if weapon then
61315: LD_VAR 0 18
61319: IFFALSE 61433
// begin tmp := CostOfWeapon ( weapon ) ;
61321: LD_ADDR_VAR 0 14
61325: PUSH
61326: LD_VAR 0 18
61330: PPUSH
61331: CALL_OW 451
61335: ST_TO_ADDR
// j := GetBase ( tower ) ;
61336: LD_ADDR_VAR 0 9
61340: PUSH
61341: LD_VAR 0 1
61345: PPUSH
61346: CALL_OW 274
61350: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
61351: LD_VAR 0 9
61355: PPUSH
61356: LD_INT 1
61358: PPUSH
61359: CALL_OW 275
61363: PUSH
61364: LD_VAR 0 14
61368: PUSH
61369: LD_INT 1
61371: ARRAY
61372: GREATEREQUAL
61373: PUSH
61374: LD_VAR 0 9
61378: PPUSH
61379: LD_INT 2
61381: PPUSH
61382: CALL_OW 275
61386: PUSH
61387: LD_VAR 0 14
61391: PUSH
61392: LD_INT 2
61394: ARRAY
61395: GREATEREQUAL
61396: AND
61397: PUSH
61398: LD_VAR 0 9
61402: PPUSH
61403: LD_INT 3
61405: PPUSH
61406: CALL_OW 275
61410: PUSH
61411: LD_VAR 0 14
61415: PUSH
61416: LD_INT 3
61418: ARRAY
61419: GREATEREQUAL
61420: AND
61421: IFFALSE 61433
// result := weapon ;
61423: LD_ADDR_VAR 0 3
61427: PUSH
61428: LD_VAR 0 18
61432: ST_TO_ADDR
// end ; end ;
61433: LD_VAR 0 3
61437: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
61438: LD_INT 0
61440: PPUSH
61441: PPUSH
// result := true ;
61442: LD_ADDR_VAR 0 3
61446: PUSH
61447: LD_INT 1
61449: ST_TO_ADDR
// if array1 = array2 then
61450: LD_VAR 0 1
61454: PUSH
61455: LD_VAR 0 2
61459: EQUAL
61460: IFFALSE 61520
// begin for i = 1 to array1 do
61462: LD_ADDR_VAR 0 4
61466: PUSH
61467: DOUBLE
61468: LD_INT 1
61470: DEC
61471: ST_TO_ADDR
61472: LD_VAR 0 1
61476: PUSH
61477: FOR_TO
61478: IFFALSE 61516
// if array1 [ i ] <> array2 [ i ] then
61480: LD_VAR 0 1
61484: PUSH
61485: LD_VAR 0 4
61489: ARRAY
61490: PUSH
61491: LD_VAR 0 2
61495: PUSH
61496: LD_VAR 0 4
61500: ARRAY
61501: NONEQUAL
61502: IFFALSE 61514
// begin result := false ;
61504: LD_ADDR_VAR 0 3
61508: PUSH
61509: LD_INT 0
61511: ST_TO_ADDR
// break ;
61512: GO 61516
// end ;
61514: GO 61477
61516: POP
61517: POP
// end else
61518: GO 61528
// result := false ;
61520: LD_ADDR_VAR 0 3
61524: PUSH
61525: LD_INT 0
61527: ST_TO_ADDR
// end ;
61528: LD_VAR 0 3
61532: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
61533: LD_INT 0
61535: PPUSH
61536: PPUSH
// if not array1 or not array2 then
61537: LD_VAR 0 1
61541: NOT
61542: PUSH
61543: LD_VAR 0 2
61547: NOT
61548: OR
61549: IFFALSE 61553
// exit ;
61551: GO 61617
// result := true ;
61553: LD_ADDR_VAR 0 3
61557: PUSH
61558: LD_INT 1
61560: ST_TO_ADDR
// for i = 1 to array1 do
61561: LD_ADDR_VAR 0 4
61565: PUSH
61566: DOUBLE
61567: LD_INT 1
61569: DEC
61570: ST_TO_ADDR
61571: LD_VAR 0 1
61575: PUSH
61576: FOR_TO
61577: IFFALSE 61615
// if array1 [ i ] <> array2 [ i ] then
61579: LD_VAR 0 1
61583: PUSH
61584: LD_VAR 0 4
61588: ARRAY
61589: PUSH
61590: LD_VAR 0 2
61594: PUSH
61595: LD_VAR 0 4
61599: ARRAY
61600: NONEQUAL
61601: IFFALSE 61613
// begin result := false ;
61603: LD_ADDR_VAR 0 3
61607: PUSH
61608: LD_INT 0
61610: ST_TO_ADDR
// break ;
61611: GO 61615
// end ;
61613: GO 61576
61615: POP
61616: POP
// end ;
61617: LD_VAR 0 3
61621: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61622: LD_INT 0
61624: PPUSH
61625: PPUSH
61626: PPUSH
// pom := GetBase ( fac ) ;
61627: LD_ADDR_VAR 0 5
61631: PUSH
61632: LD_VAR 0 1
61636: PPUSH
61637: CALL_OW 274
61641: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61642: LD_ADDR_VAR 0 4
61646: PUSH
61647: LD_VAR 0 2
61651: PUSH
61652: LD_INT 1
61654: ARRAY
61655: PPUSH
61656: LD_VAR 0 2
61660: PUSH
61661: LD_INT 2
61663: ARRAY
61664: PPUSH
61665: LD_VAR 0 2
61669: PUSH
61670: LD_INT 3
61672: ARRAY
61673: PPUSH
61674: LD_VAR 0 2
61678: PUSH
61679: LD_INT 4
61681: ARRAY
61682: PPUSH
61683: CALL_OW 449
61687: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61688: LD_ADDR_VAR 0 3
61692: PUSH
61693: LD_VAR 0 5
61697: PPUSH
61698: LD_INT 1
61700: PPUSH
61701: CALL_OW 275
61705: PUSH
61706: LD_VAR 0 4
61710: PUSH
61711: LD_INT 1
61713: ARRAY
61714: GREATEREQUAL
61715: PUSH
61716: LD_VAR 0 5
61720: PPUSH
61721: LD_INT 2
61723: PPUSH
61724: CALL_OW 275
61728: PUSH
61729: LD_VAR 0 4
61733: PUSH
61734: LD_INT 2
61736: ARRAY
61737: GREATEREQUAL
61738: AND
61739: PUSH
61740: LD_VAR 0 5
61744: PPUSH
61745: LD_INT 3
61747: PPUSH
61748: CALL_OW 275
61752: PUSH
61753: LD_VAR 0 4
61757: PUSH
61758: LD_INT 3
61760: ARRAY
61761: GREATEREQUAL
61762: AND
61763: ST_TO_ADDR
// end ;
61764: LD_VAR 0 3
61768: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61769: LD_INT 0
61771: PPUSH
61772: PPUSH
61773: PPUSH
61774: PPUSH
// pom := GetBase ( building ) ;
61775: LD_ADDR_VAR 0 3
61779: PUSH
61780: LD_VAR 0 1
61784: PPUSH
61785: CALL_OW 274
61789: ST_TO_ADDR
// if not pom then
61790: LD_VAR 0 3
61794: NOT
61795: IFFALSE 61799
// exit ;
61797: GO 61969
// btype := GetBType ( building ) ;
61799: LD_ADDR_VAR 0 5
61803: PUSH
61804: LD_VAR 0 1
61808: PPUSH
61809: CALL_OW 266
61813: ST_TO_ADDR
// if btype = b_armoury then
61814: LD_VAR 0 5
61818: PUSH
61819: LD_INT 4
61821: EQUAL
61822: IFFALSE 61832
// btype := b_barracks ;
61824: LD_ADDR_VAR 0 5
61828: PUSH
61829: LD_INT 5
61831: ST_TO_ADDR
// if btype = b_depot then
61832: LD_VAR 0 5
61836: PUSH
61837: LD_INT 0
61839: EQUAL
61840: IFFALSE 61850
// btype := b_warehouse ;
61842: LD_ADDR_VAR 0 5
61846: PUSH
61847: LD_INT 1
61849: ST_TO_ADDR
// if btype = b_workshop then
61850: LD_VAR 0 5
61854: PUSH
61855: LD_INT 2
61857: EQUAL
61858: IFFALSE 61868
// btype := b_factory ;
61860: LD_ADDR_VAR 0 5
61864: PUSH
61865: LD_INT 3
61867: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61868: LD_ADDR_VAR 0 4
61872: PUSH
61873: LD_VAR 0 5
61877: PPUSH
61878: LD_VAR 0 1
61882: PPUSH
61883: CALL_OW 248
61887: PPUSH
61888: CALL_OW 450
61892: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61893: LD_ADDR_VAR 0 2
61897: PUSH
61898: LD_VAR 0 3
61902: PPUSH
61903: LD_INT 1
61905: PPUSH
61906: CALL_OW 275
61910: PUSH
61911: LD_VAR 0 4
61915: PUSH
61916: LD_INT 1
61918: ARRAY
61919: GREATEREQUAL
61920: PUSH
61921: LD_VAR 0 3
61925: PPUSH
61926: LD_INT 2
61928: PPUSH
61929: CALL_OW 275
61933: PUSH
61934: LD_VAR 0 4
61938: PUSH
61939: LD_INT 2
61941: ARRAY
61942: GREATEREQUAL
61943: AND
61944: PUSH
61945: LD_VAR 0 3
61949: PPUSH
61950: LD_INT 3
61952: PPUSH
61953: CALL_OW 275
61957: PUSH
61958: LD_VAR 0 4
61962: PUSH
61963: LD_INT 3
61965: ARRAY
61966: GREATEREQUAL
61967: AND
61968: ST_TO_ADDR
// end ;
61969: LD_VAR 0 2
61973: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
61974: LD_INT 0
61976: PPUSH
61977: PPUSH
61978: PPUSH
// pom := GetBase ( building ) ;
61979: LD_ADDR_VAR 0 4
61983: PUSH
61984: LD_VAR 0 1
61988: PPUSH
61989: CALL_OW 274
61993: ST_TO_ADDR
// if not pom then
61994: LD_VAR 0 4
61998: NOT
61999: IFFALSE 62003
// exit ;
62001: GO 62104
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62003: LD_ADDR_VAR 0 5
62007: PUSH
62008: LD_VAR 0 2
62012: PPUSH
62013: LD_VAR 0 1
62017: PPUSH
62018: CALL_OW 248
62022: PPUSH
62023: CALL_OW 450
62027: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62028: LD_ADDR_VAR 0 3
62032: PUSH
62033: LD_VAR 0 4
62037: PPUSH
62038: LD_INT 1
62040: PPUSH
62041: CALL_OW 275
62045: PUSH
62046: LD_VAR 0 5
62050: PUSH
62051: LD_INT 1
62053: ARRAY
62054: GREATEREQUAL
62055: PUSH
62056: LD_VAR 0 4
62060: PPUSH
62061: LD_INT 2
62063: PPUSH
62064: CALL_OW 275
62068: PUSH
62069: LD_VAR 0 5
62073: PUSH
62074: LD_INT 2
62076: ARRAY
62077: GREATEREQUAL
62078: AND
62079: PUSH
62080: LD_VAR 0 4
62084: PPUSH
62085: LD_INT 3
62087: PPUSH
62088: CALL_OW 275
62092: PUSH
62093: LD_VAR 0 5
62097: PUSH
62098: LD_INT 3
62100: ARRAY
62101: GREATEREQUAL
62102: AND
62103: ST_TO_ADDR
// end ;
62104: LD_VAR 0 3
62108: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
62109: LD_INT 0
62111: PPUSH
62112: PPUSH
62113: PPUSH
62114: PPUSH
62115: PPUSH
62116: PPUSH
62117: PPUSH
62118: PPUSH
62119: PPUSH
62120: PPUSH
62121: PPUSH
// result := false ;
62122: LD_ADDR_VAR 0 8
62126: PUSH
62127: LD_INT 0
62129: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
62130: LD_VAR 0 5
62134: NOT
62135: PUSH
62136: LD_VAR 0 1
62140: NOT
62141: OR
62142: PUSH
62143: LD_VAR 0 2
62147: NOT
62148: OR
62149: PUSH
62150: LD_VAR 0 3
62154: NOT
62155: OR
62156: IFFALSE 62160
// exit ;
62158: GO 62974
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
62160: LD_ADDR_VAR 0 14
62164: PUSH
62165: LD_VAR 0 1
62169: PPUSH
62170: LD_VAR 0 2
62174: PPUSH
62175: LD_VAR 0 3
62179: PPUSH
62180: LD_VAR 0 4
62184: PPUSH
62185: LD_VAR 0 5
62189: PUSH
62190: LD_INT 1
62192: ARRAY
62193: PPUSH
62194: CALL_OW 248
62198: PPUSH
62199: LD_INT 0
62201: PPUSH
62202: CALL 64211 0 6
62206: ST_TO_ADDR
// if not hexes then
62207: LD_VAR 0 14
62211: NOT
62212: IFFALSE 62216
// exit ;
62214: GO 62974
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62216: LD_ADDR_VAR 0 17
62220: PUSH
62221: LD_VAR 0 5
62225: PPUSH
62226: LD_INT 22
62228: PUSH
62229: LD_VAR 0 13
62233: PPUSH
62234: CALL_OW 255
62238: PUSH
62239: EMPTY
62240: LIST
62241: LIST
62242: PUSH
62243: LD_INT 2
62245: PUSH
62246: LD_INT 30
62248: PUSH
62249: LD_INT 0
62251: PUSH
62252: EMPTY
62253: LIST
62254: LIST
62255: PUSH
62256: LD_INT 30
62258: PUSH
62259: LD_INT 1
62261: PUSH
62262: EMPTY
62263: LIST
62264: LIST
62265: PUSH
62266: EMPTY
62267: LIST
62268: LIST
62269: LIST
62270: PUSH
62271: EMPTY
62272: LIST
62273: LIST
62274: PPUSH
62275: CALL_OW 72
62279: ST_TO_ADDR
// for i = 1 to hexes do
62280: LD_ADDR_VAR 0 9
62284: PUSH
62285: DOUBLE
62286: LD_INT 1
62288: DEC
62289: ST_TO_ADDR
62290: LD_VAR 0 14
62294: PUSH
62295: FOR_TO
62296: IFFALSE 62972
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62298: LD_ADDR_VAR 0 13
62302: PUSH
62303: LD_VAR 0 14
62307: PUSH
62308: LD_VAR 0 9
62312: ARRAY
62313: PUSH
62314: LD_INT 1
62316: ARRAY
62317: PPUSH
62318: LD_VAR 0 14
62322: PUSH
62323: LD_VAR 0 9
62327: ARRAY
62328: PUSH
62329: LD_INT 2
62331: ARRAY
62332: PPUSH
62333: CALL_OW 428
62337: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
62338: LD_VAR 0 14
62342: PUSH
62343: LD_VAR 0 9
62347: ARRAY
62348: PUSH
62349: LD_INT 1
62351: ARRAY
62352: PPUSH
62353: LD_VAR 0 14
62357: PUSH
62358: LD_VAR 0 9
62362: ARRAY
62363: PUSH
62364: LD_INT 2
62366: ARRAY
62367: PPUSH
62368: CALL_OW 351
62372: PUSH
62373: LD_VAR 0 14
62377: PUSH
62378: LD_VAR 0 9
62382: ARRAY
62383: PUSH
62384: LD_INT 1
62386: ARRAY
62387: PPUSH
62388: LD_VAR 0 14
62392: PUSH
62393: LD_VAR 0 9
62397: ARRAY
62398: PUSH
62399: LD_INT 2
62401: ARRAY
62402: PPUSH
62403: CALL_OW 488
62407: NOT
62408: OR
62409: PUSH
62410: LD_VAR 0 13
62414: PPUSH
62415: CALL_OW 247
62419: PUSH
62420: LD_INT 3
62422: EQUAL
62423: OR
62424: IFFALSE 62430
// exit ;
62426: POP
62427: POP
62428: GO 62974
// if not tmp then
62430: LD_VAR 0 13
62434: NOT
62435: IFFALSE 62439
// continue ;
62437: GO 62295
// result := true ;
62439: LD_ADDR_VAR 0 8
62443: PUSH
62444: LD_INT 1
62446: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
62447: LD_VAR 0 6
62451: PUSH
62452: LD_VAR 0 13
62456: PPUSH
62457: CALL_OW 247
62461: PUSH
62462: LD_INT 2
62464: EQUAL
62465: AND
62466: PUSH
62467: LD_VAR 0 13
62471: PPUSH
62472: CALL_OW 263
62476: PUSH
62477: LD_INT 1
62479: EQUAL
62480: AND
62481: IFFALSE 62645
// begin if IsDrivenBy ( tmp ) then
62483: LD_VAR 0 13
62487: PPUSH
62488: CALL_OW 311
62492: IFFALSE 62496
// continue ;
62494: GO 62295
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
62496: LD_VAR 0 6
62500: PPUSH
62501: LD_INT 3
62503: PUSH
62504: LD_INT 60
62506: PUSH
62507: EMPTY
62508: LIST
62509: PUSH
62510: EMPTY
62511: LIST
62512: LIST
62513: PUSH
62514: LD_INT 3
62516: PUSH
62517: LD_INT 55
62519: PUSH
62520: EMPTY
62521: LIST
62522: PUSH
62523: EMPTY
62524: LIST
62525: LIST
62526: PUSH
62527: EMPTY
62528: LIST
62529: LIST
62530: PPUSH
62531: CALL_OW 72
62535: IFFALSE 62643
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
62537: LD_ADDR_VAR 0 18
62541: PUSH
62542: LD_VAR 0 6
62546: PPUSH
62547: LD_INT 3
62549: PUSH
62550: LD_INT 60
62552: PUSH
62553: EMPTY
62554: LIST
62555: PUSH
62556: EMPTY
62557: LIST
62558: LIST
62559: PUSH
62560: LD_INT 3
62562: PUSH
62563: LD_INT 55
62565: PUSH
62566: EMPTY
62567: LIST
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: PUSH
62573: EMPTY
62574: LIST
62575: LIST
62576: PPUSH
62577: CALL_OW 72
62581: PUSH
62582: LD_INT 1
62584: ARRAY
62585: ST_TO_ADDR
// if IsInUnit ( driver ) then
62586: LD_VAR 0 18
62590: PPUSH
62591: CALL_OW 310
62595: IFFALSE 62606
// ComExit ( driver ) ;
62597: LD_VAR 0 18
62601: PPUSH
62602: CALL 87916 0 1
// AddComEnterUnit ( driver , tmp ) ;
62606: LD_VAR 0 18
62610: PPUSH
62611: LD_VAR 0 13
62615: PPUSH
62616: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
62620: LD_VAR 0 18
62624: PPUSH
62625: LD_VAR 0 7
62629: PPUSH
62630: CALL_OW 173
// AddComExitVehicle ( driver ) ;
62634: LD_VAR 0 18
62638: PPUSH
62639: CALL_OW 181
// end ; continue ;
62643: GO 62295
// end ; if not cleaners or not tmp in cleaners then
62645: LD_VAR 0 6
62649: NOT
62650: PUSH
62651: LD_VAR 0 13
62655: PUSH
62656: LD_VAR 0 6
62660: IN
62661: NOT
62662: OR
62663: IFFALSE 62970
// begin if dep then
62665: LD_VAR 0 17
62669: IFFALSE 62805
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
62671: LD_ADDR_VAR 0 16
62675: PUSH
62676: LD_VAR 0 17
62680: PUSH
62681: LD_INT 1
62683: ARRAY
62684: PPUSH
62685: CALL_OW 250
62689: PPUSH
62690: LD_VAR 0 17
62694: PUSH
62695: LD_INT 1
62697: ARRAY
62698: PPUSH
62699: CALL_OW 254
62703: PPUSH
62704: LD_INT 5
62706: PPUSH
62707: CALL_OW 272
62711: PUSH
62712: LD_VAR 0 17
62716: PUSH
62717: LD_INT 1
62719: ARRAY
62720: PPUSH
62721: CALL_OW 251
62725: PPUSH
62726: LD_VAR 0 17
62730: PUSH
62731: LD_INT 1
62733: ARRAY
62734: PPUSH
62735: CALL_OW 254
62739: PPUSH
62740: LD_INT 5
62742: PPUSH
62743: CALL_OW 273
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
62752: LD_VAR 0 16
62756: PUSH
62757: LD_INT 1
62759: ARRAY
62760: PPUSH
62761: LD_VAR 0 16
62765: PUSH
62766: LD_INT 2
62768: ARRAY
62769: PPUSH
62770: CALL_OW 488
62774: IFFALSE 62805
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
62776: LD_VAR 0 13
62780: PPUSH
62781: LD_VAR 0 16
62785: PUSH
62786: LD_INT 1
62788: ARRAY
62789: PPUSH
62790: LD_VAR 0 16
62794: PUSH
62795: LD_INT 2
62797: ARRAY
62798: PPUSH
62799: CALL_OW 111
// continue ;
62803: GO 62295
// end ; end ; r := GetDir ( tmp ) ;
62805: LD_ADDR_VAR 0 15
62809: PUSH
62810: LD_VAR 0 13
62814: PPUSH
62815: CALL_OW 254
62819: ST_TO_ADDR
// if r = 5 then
62820: LD_VAR 0 15
62824: PUSH
62825: LD_INT 5
62827: EQUAL
62828: IFFALSE 62838
// r := 0 ;
62830: LD_ADDR_VAR 0 15
62834: PUSH
62835: LD_INT 0
62837: ST_TO_ADDR
// for j = r to 5 do
62838: LD_ADDR_VAR 0 10
62842: PUSH
62843: DOUBLE
62844: LD_VAR 0 15
62848: DEC
62849: ST_TO_ADDR
62850: LD_INT 5
62852: PUSH
62853: FOR_TO
62854: IFFALSE 62968
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
62856: LD_ADDR_VAR 0 11
62860: PUSH
62861: LD_VAR 0 13
62865: PPUSH
62866: CALL_OW 250
62870: PPUSH
62871: LD_VAR 0 10
62875: PPUSH
62876: LD_INT 2
62878: PPUSH
62879: CALL_OW 272
62883: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
62884: LD_ADDR_VAR 0 12
62888: PUSH
62889: LD_VAR 0 13
62893: PPUSH
62894: CALL_OW 251
62898: PPUSH
62899: LD_VAR 0 10
62903: PPUSH
62904: LD_INT 2
62906: PPUSH
62907: CALL_OW 273
62911: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
62912: LD_VAR 0 11
62916: PPUSH
62917: LD_VAR 0 12
62921: PPUSH
62922: CALL_OW 488
62926: PUSH
62927: LD_VAR 0 11
62931: PPUSH
62932: LD_VAR 0 12
62936: PPUSH
62937: CALL_OW 428
62941: NOT
62942: AND
62943: IFFALSE 62966
// begin ComMoveXY ( tmp , _x , _y ) ;
62945: LD_VAR 0 13
62949: PPUSH
62950: LD_VAR 0 11
62954: PPUSH
62955: LD_VAR 0 12
62959: PPUSH
62960: CALL_OW 111
// break ;
62964: GO 62968
// end ; end ;
62966: GO 62853
62968: POP
62969: POP
// end ; end ;
62970: GO 62295
62972: POP
62973: POP
// end ;
62974: LD_VAR 0 8
62978: RET
// export function BuildingTechInvented ( side , btype ) ; begin
62979: LD_INT 0
62981: PPUSH
// result := true ;
62982: LD_ADDR_VAR 0 3
62986: PUSH
62987: LD_INT 1
62989: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
62990: LD_VAR 0 2
62994: PUSH
62995: LD_INT 24
62997: DOUBLE
62998: EQUAL
62999: IFTRUE 63009
63001: LD_INT 33
63003: DOUBLE
63004: EQUAL
63005: IFTRUE 63009
63007: GO 63034
63009: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
63010: LD_ADDR_VAR 0 3
63014: PUSH
63015: LD_INT 32
63017: PPUSH
63018: LD_VAR 0 1
63022: PPUSH
63023: CALL_OW 321
63027: PUSH
63028: LD_INT 2
63030: EQUAL
63031: ST_TO_ADDR
63032: GO 63354
63034: LD_INT 20
63036: DOUBLE
63037: EQUAL
63038: IFTRUE 63042
63040: GO 63067
63042: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
63043: LD_ADDR_VAR 0 3
63047: PUSH
63048: LD_INT 6
63050: PPUSH
63051: LD_VAR 0 1
63055: PPUSH
63056: CALL_OW 321
63060: PUSH
63061: LD_INT 2
63063: EQUAL
63064: ST_TO_ADDR
63065: GO 63354
63067: LD_INT 22
63069: DOUBLE
63070: EQUAL
63071: IFTRUE 63081
63073: LD_INT 36
63075: DOUBLE
63076: EQUAL
63077: IFTRUE 63081
63079: GO 63106
63081: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
63082: LD_ADDR_VAR 0 3
63086: PUSH
63087: LD_INT 15
63089: PPUSH
63090: LD_VAR 0 1
63094: PPUSH
63095: CALL_OW 321
63099: PUSH
63100: LD_INT 2
63102: EQUAL
63103: ST_TO_ADDR
63104: GO 63354
63106: LD_INT 30
63108: DOUBLE
63109: EQUAL
63110: IFTRUE 63114
63112: GO 63139
63114: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
63115: LD_ADDR_VAR 0 3
63119: PUSH
63120: LD_INT 20
63122: PPUSH
63123: LD_VAR 0 1
63127: PPUSH
63128: CALL_OW 321
63132: PUSH
63133: LD_INT 2
63135: EQUAL
63136: ST_TO_ADDR
63137: GO 63354
63139: LD_INT 28
63141: DOUBLE
63142: EQUAL
63143: IFTRUE 63153
63145: LD_INT 21
63147: DOUBLE
63148: EQUAL
63149: IFTRUE 63153
63151: GO 63178
63153: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
63154: LD_ADDR_VAR 0 3
63158: PUSH
63159: LD_INT 21
63161: PPUSH
63162: LD_VAR 0 1
63166: PPUSH
63167: CALL_OW 321
63171: PUSH
63172: LD_INT 2
63174: EQUAL
63175: ST_TO_ADDR
63176: GO 63354
63178: LD_INT 16
63180: DOUBLE
63181: EQUAL
63182: IFTRUE 63186
63184: GO 63213
63186: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
63187: LD_ADDR_VAR 0 3
63191: PUSH
63192: LD_EXP 83
63196: PPUSH
63197: LD_VAR 0 1
63201: PPUSH
63202: CALL_OW 321
63206: PUSH
63207: LD_INT 2
63209: EQUAL
63210: ST_TO_ADDR
63211: GO 63354
63213: LD_INT 19
63215: DOUBLE
63216: EQUAL
63217: IFTRUE 63227
63219: LD_INT 23
63221: DOUBLE
63222: EQUAL
63223: IFTRUE 63227
63225: GO 63254
63227: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
63228: LD_ADDR_VAR 0 3
63232: PUSH
63233: LD_EXP 82
63237: PPUSH
63238: LD_VAR 0 1
63242: PPUSH
63243: CALL_OW 321
63247: PUSH
63248: LD_INT 2
63250: EQUAL
63251: ST_TO_ADDR
63252: GO 63354
63254: LD_INT 17
63256: DOUBLE
63257: EQUAL
63258: IFTRUE 63262
63260: GO 63287
63262: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
63263: LD_ADDR_VAR 0 3
63267: PUSH
63268: LD_INT 39
63270: PPUSH
63271: LD_VAR 0 1
63275: PPUSH
63276: CALL_OW 321
63280: PUSH
63281: LD_INT 2
63283: EQUAL
63284: ST_TO_ADDR
63285: GO 63354
63287: LD_INT 18
63289: DOUBLE
63290: EQUAL
63291: IFTRUE 63295
63293: GO 63320
63295: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
63296: LD_ADDR_VAR 0 3
63300: PUSH
63301: LD_INT 40
63303: PPUSH
63304: LD_VAR 0 1
63308: PPUSH
63309: CALL_OW 321
63313: PUSH
63314: LD_INT 2
63316: EQUAL
63317: ST_TO_ADDR
63318: GO 63354
63320: LD_INT 27
63322: DOUBLE
63323: EQUAL
63324: IFTRUE 63328
63326: GO 63353
63328: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
63329: LD_ADDR_VAR 0 3
63333: PUSH
63334: LD_INT 35
63336: PPUSH
63337: LD_VAR 0 1
63341: PPUSH
63342: CALL_OW 321
63346: PUSH
63347: LD_INT 2
63349: EQUAL
63350: ST_TO_ADDR
63351: GO 63354
63353: POP
// end ;
63354: LD_VAR 0 3
63358: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
63359: LD_INT 0
63361: PPUSH
63362: PPUSH
63363: PPUSH
63364: PPUSH
63365: PPUSH
63366: PPUSH
63367: PPUSH
63368: PPUSH
63369: PPUSH
63370: PPUSH
63371: PPUSH
// result := false ;
63372: LD_ADDR_VAR 0 6
63376: PUSH
63377: LD_INT 0
63379: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
63380: LD_VAR 0 1
63384: NOT
63385: PUSH
63386: LD_VAR 0 1
63390: PPUSH
63391: CALL_OW 266
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: LD_INT 1
63401: PUSH
63402: EMPTY
63403: LIST
63404: LIST
63405: IN
63406: NOT
63407: OR
63408: PUSH
63409: LD_VAR 0 2
63413: NOT
63414: OR
63415: PUSH
63416: LD_VAR 0 5
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: LD_INT 2
63429: PUSH
63430: LD_INT 3
63432: PUSH
63433: LD_INT 4
63435: PUSH
63436: LD_INT 5
63438: PUSH
63439: EMPTY
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: IN
63447: NOT
63448: OR
63449: PUSH
63450: LD_VAR 0 3
63454: PPUSH
63455: LD_VAR 0 4
63459: PPUSH
63460: CALL_OW 488
63464: NOT
63465: OR
63466: IFFALSE 63470
// exit ;
63468: GO 64206
// side := GetSide ( depot ) ;
63470: LD_ADDR_VAR 0 9
63474: PUSH
63475: LD_VAR 0 1
63479: PPUSH
63480: CALL_OW 255
63484: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
63485: LD_VAR 0 9
63489: PPUSH
63490: LD_VAR 0 2
63494: PPUSH
63495: CALL 62979 0 2
63499: NOT
63500: IFFALSE 63504
// exit ;
63502: GO 64206
// pom := GetBase ( depot ) ;
63504: LD_ADDR_VAR 0 10
63508: PUSH
63509: LD_VAR 0 1
63513: PPUSH
63514: CALL_OW 274
63518: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63519: LD_ADDR_VAR 0 11
63523: PUSH
63524: LD_VAR 0 2
63528: PPUSH
63529: LD_VAR 0 1
63533: PPUSH
63534: CALL_OW 248
63538: PPUSH
63539: CALL_OW 450
63543: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
63544: LD_VAR 0 10
63548: PPUSH
63549: LD_INT 1
63551: PPUSH
63552: CALL_OW 275
63556: PUSH
63557: LD_VAR 0 11
63561: PUSH
63562: LD_INT 1
63564: ARRAY
63565: GREATEREQUAL
63566: PUSH
63567: LD_VAR 0 10
63571: PPUSH
63572: LD_INT 2
63574: PPUSH
63575: CALL_OW 275
63579: PUSH
63580: LD_VAR 0 11
63584: PUSH
63585: LD_INT 2
63587: ARRAY
63588: GREATEREQUAL
63589: AND
63590: PUSH
63591: LD_VAR 0 10
63595: PPUSH
63596: LD_INT 3
63598: PPUSH
63599: CALL_OW 275
63603: PUSH
63604: LD_VAR 0 11
63608: PUSH
63609: LD_INT 3
63611: ARRAY
63612: GREATEREQUAL
63613: AND
63614: NOT
63615: IFFALSE 63619
// exit ;
63617: GO 64206
// if GetBType ( depot ) = b_depot then
63619: LD_VAR 0 1
63623: PPUSH
63624: CALL_OW 266
63628: PUSH
63629: LD_INT 0
63631: EQUAL
63632: IFFALSE 63644
// dist := 28 else
63634: LD_ADDR_VAR 0 14
63638: PUSH
63639: LD_INT 28
63641: ST_TO_ADDR
63642: GO 63652
// dist := 36 ;
63644: LD_ADDR_VAR 0 14
63648: PUSH
63649: LD_INT 36
63651: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
63652: LD_VAR 0 1
63656: PPUSH
63657: LD_VAR 0 3
63661: PPUSH
63662: LD_VAR 0 4
63666: PPUSH
63667: CALL_OW 297
63671: PUSH
63672: LD_VAR 0 14
63676: GREATER
63677: IFFALSE 63681
// exit ;
63679: GO 64206
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
63681: LD_ADDR_VAR 0 12
63685: PUSH
63686: LD_VAR 0 2
63690: PPUSH
63691: LD_VAR 0 3
63695: PPUSH
63696: LD_VAR 0 4
63700: PPUSH
63701: LD_VAR 0 5
63705: PPUSH
63706: LD_VAR 0 1
63710: PPUSH
63711: CALL_OW 248
63715: PPUSH
63716: LD_INT 0
63718: PPUSH
63719: CALL 64211 0 6
63723: ST_TO_ADDR
// if not hexes then
63724: LD_VAR 0 12
63728: NOT
63729: IFFALSE 63733
// exit ;
63731: GO 64206
// hex := GetHexInfo ( x , y ) ;
63733: LD_ADDR_VAR 0 15
63737: PUSH
63738: LD_VAR 0 3
63742: PPUSH
63743: LD_VAR 0 4
63747: PPUSH
63748: CALL_OW 546
63752: ST_TO_ADDR
// if hex [ 1 ] then
63753: LD_VAR 0 15
63757: PUSH
63758: LD_INT 1
63760: ARRAY
63761: IFFALSE 63765
// exit ;
63763: GO 64206
// height := hex [ 2 ] ;
63765: LD_ADDR_VAR 0 13
63769: PUSH
63770: LD_VAR 0 15
63774: PUSH
63775: LD_INT 2
63777: ARRAY
63778: ST_TO_ADDR
// for i = 1 to hexes do
63779: LD_ADDR_VAR 0 7
63783: PUSH
63784: DOUBLE
63785: LD_INT 1
63787: DEC
63788: ST_TO_ADDR
63789: LD_VAR 0 12
63793: PUSH
63794: FOR_TO
63795: IFFALSE 64125
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
63797: LD_VAR 0 12
63801: PUSH
63802: LD_VAR 0 7
63806: ARRAY
63807: PUSH
63808: LD_INT 1
63810: ARRAY
63811: PPUSH
63812: LD_VAR 0 12
63816: PUSH
63817: LD_VAR 0 7
63821: ARRAY
63822: PUSH
63823: LD_INT 2
63825: ARRAY
63826: PPUSH
63827: CALL_OW 488
63831: NOT
63832: PUSH
63833: LD_VAR 0 12
63837: PUSH
63838: LD_VAR 0 7
63842: ARRAY
63843: PUSH
63844: LD_INT 1
63846: ARRAY
63847: PPUSH
63848: LD_VAR 0 12
63852: PUSH
63853: LD_VAR 0 7
63857: ARRAY
63858: PUSH
63859: LD_INT 2
63861: ARRAY
63862: PPUSH
63863: CALL_OW 428
63867: PUSH
63868: LD_INT 0
63870: GREATER
63871: OR
63872: PUSH
63873: LD_VAR 0 12
63877: PUSH
63878: LD_VAR 0 7
63882: ARRAY
63883: PUSH
63884: LD_INT 1
63886: ARRAY
63887: PPUSH
63888: LD_VAR 0 12
63892: PUSH
63893: LD_VAR 0 7
63897: ARRAY
63898: PUSH
63899: LD_INT 2
63901: ARRAY
63902: PPUSH
63903: CALL_OW 351
63907: OR
63908: IFFALSE 63914
// exit ;
63910: POP
63911: POP
63912: GO 64206
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63914: LD_ADDR_VAR 0 8
63918: PUSH
63919: LD_VAR 0 12
63923: PUSH
63924: LD_VAR 0 7
63928: ARRAY
63929: PUSH
63930: LD_INT 1
63932: ARRAY
63933: PPUSH
63934: LD_VAR 0 12
63938: PUSH
63939: LD_VAR 0 7
63943: ARRAY
63944: PUSH
63945: LD_INT 2
63947: ARRAY
63948: PPUSH
63949: CALL_OW 546
63953: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
63954: LD_VAR 0 8
63958: PUSH
63959: LD_INT 1
63961: ARRAY
63962: PUSH
63963: LD_VAR 0 8
63967: PUSH
63968: LD_INT 2
63970: ARRAY
63971: PUSH
63972: LD_VAR 0 13
63976: PUSH
63977: LD_INT 2
63979: PLUS
63980: GREATER
63981: OR
63982: PUSH
63983: LD_VAR 0 8
63987: PUSH
63988: LD_INT 2
63990: ARRAY
63991: PUSH
63992: LD_VAR 0 13
63996: PUSH
63997: LD_INT 2
63999: MINUS
64000: LESS
64001: OR
64002: PUSH
64003: LD_VAR 0 8
64007: PUSH
64008: LD_INT 3
64010: ARRAY
64011: PUSH
64012: LD_INT 0
64014: PUSH
64015: LD_INT 8
64017: PUSH
64018: LD_INT 9
64020: PUSH
64021: LD_INT 10
64023: PUSH
64024: LD_INT 11
64026: PUSH
64027: LD_INT 12
64029: PUSH
64030: LD_INT 13
64032: PUSH
64033: LD_INT 16
64035: PUSH
64036: LD_INT 17
64038: PUSH
64039: LD_INT 18
64041: PUSH
64042: LD_INT 19
64044: PUSH
64045: LD_INT 20
64047: PUSH
64048: LD_INT 21
64050: PUSH
64051: EMPTY
64052: LIST
64053: LIST
64054: LIST
64055: LIST
64056: LIST
64057: LIST
64058: LIST
64059: LIST
64060: LIST
64061: LIST
64062: LIST
64063: LIST
64064: LIST
64065: IN
64066: NOT
64067: OR
64068: PUSH
64069: LD_VAR 0 8
64073: PUSH
64074: LD_INT 5
64076: ARRAY
64077: NOT
64078: OR
64079: PUSH
64080: LD_VAR 0 8
64084: PUSH
64085: LD_INT 6
64087: ARRAY
64088: PUSH
64089: LD_INT 1
64091: PUSH
64092: LD_INT 2
64094: PUSH
64095: LD_INT 7
64097: PUSH
64098: LD_INT 9
64100: PUSH
64101: LD_INT 10
64103: PUSH
64104: LD_INT 11
64106: PUSH
64107: EMPTY
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: IN
64115: NOT
64116: OR
64117: IFFALSE 64123
// exit ;
64119: POP
64120: POP
64121: GO 64206
// end ;
64123: GO 63794
64125: POP
64126: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
64127: LD_VAR 0 9
64131: PPUSH
64132: LD_VAR 0 3
64136: PPUSH
64137: LD_VAR 0 4
64141: PPUSH
64142: LD_INT 20
64144: PPUSH
64145: CALL 56152 0 4
64149: PUSH
64150: LD_INT 4
64152: ARRAY
64153: IFFALSE 64157
// exit ;
64155: GO 64206
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
64157: LD_VAR 0 2
64161: PUSH
64162: LD_INT 29
64164: PUSH
64165: LD_INT 30
64167: PUSH
64168: EMPTY
64169: LIST
64170: LIST
64171: IN
64172: PUSH
64173: LD_VAR 0 3
64177: PPUSH
64178: LD_VAR 0 4
64182: PPUSH
64183: LD_VAR 0 9
64187: PPUSH
64188: CALL_OW 440
64192: NOT
64193: AND
64194: IFFALSE 64198
// exit ;
64196: GO 64206
// result := true ;
64198: LD_ADDR_VAR 0 6
64202: PUSH
64203: LD_INT 1
64205: ST_TO_ADDR
// end ;
64206: LD_VAR 0 6
64210: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
64211: LD_INT 0
64213: PPUSH
64214: PPUSH
64215: PPUSH
64216: PPUSH
64217: PPUSH
64218: PPUSH
64219: PPUSH
64220: PPUSH
64221: PPUSH
64222: PPUSH
64223: PPUSH
64224: PPUSH
64225: PPUSH
64226: PPUSH
64227: PPUSH
64228: PPUSH
64229: PPUSH
64230: PPUSH
64231: PPUSH
64232: PPUSH
64233: PPUSH
64234: PPUSH
64235: PPUSH
64236: PPUSH
64237: PPUSH
64238: PPUSH
64239: PPUSH
64240: PPUSH
64241: PPUSH
64242: PPUSH
64243: PPUSH
64244: PPUSH
64245: PPUSH
64246: PPUSH
64247: PPUSH
64248: PPUSH
64249: PPUSH
64250: PPUSH
64251: PPUSH
64252: PPUSH
64253: PPUSH
64254: PPUSH
64255: PPUSH
64256: PPUSH
64257: PPUSH
64258: PPUSH
64259: PPUSH
64260: PPUSH
64261: PPUSH
64262: PPUSH
64263: PPUSH
64264: PPUSH
64265: PPUSH
64266: PPUSH
64267: PPUSH
64268: PPUSH
64269: PPUSH
64270: PPUSH
// result = [ ] ;
64271: LD_ADDR_VAR 0 7
64275: PUSH
64276: EMPTY
64277: ST_TO_ADDR
// temp_list = [ ] ;
64278: LD_ADDR_VAR 0 9
64282: PUSH
64283: EMPTY
64284: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
64285: LD_VAR 0 4
64289: PUSH
64290: LD_INT 0
64292: PUSH
64293: LD_INT 1
64295: PUSH
64296: LD_INT 2
64298: PUSH
64299: LD_INT 3
64301: PUSH
64302: LD_INT 4
64304: PUSH
64305: LD_INT 5
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: LIST
64315: IN
64316: NOT
64317: PUSH
64318: LD_VAR 0 1
64322: PUSH
64323: LD_INT 0
64325: PUSH
64326: LD_INT 1
64328: PUSH
64329: EMPTY
64330: LIST
64331: LIST
64332: IN
64333: PUSH
64334: LD_VAR 0 5
64338: PUSH
64339: LD_INT 1
64341: PUSH
64342: LD_INT 2
64344: PUSH
64345: LD_INT 3
64347: PUSH
64348: EMPTY
64349: LIST
64350: LIST
64351: LIST
64352: IN
64353: NOT
64354: AND
64355: OR
64356: IFFALSE 64360
// exit ;
64358: GO 82751
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
64360: LD_VAR 0 1
64364: PUSH
64365: LD_INT 6
64367: PUSH
64368: LD_INT 7
64370: PUSH
64371: LD_INT 8
64373: PUSH
64374: LD_INT 13
64376: PUSH
64377: LD_INT 12
64379: PUSH
64380: LD_INT 15
64382: PUSH
64383: LD_INT 11
64385: PUSH
64386: LD_INT 14
64388: PUSH
64389: LD_INT 10
64391: PUSH
64392: EMPTY
64393: LIST
64394: LIST
64395: LIST
64396: LIST
64397: LIST
64398: LIST
64399: LIST
64400: LIST
64401: LIST
64402: IN
64403: IFFALSE 64413
// btype = b_lab ;
64405: LD_ADDR_VAR 0 1
64409: PUSH
64410: LD_INT 6
64412: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
64413: LD_VAR 0 6
64417: PUSH
64418: LD_INT 0
64420: PUSH
64421: LD_INT 1
64423: PUSH
64424: LD_INT 2
64426: PUSH
64427: EMPTY
64428: LIST
64429: LIST
64430: LIST
64431: IN
64432: NOT
64433: PUSH
64434: LD_VAR 0 1
64438: PUSH
64439: LD_INT 0
64441: PUSH
64442: LD_INT 1
64444: PUSH
64445: LD_INT 2
64447: PUSH
64448: LD_INT 3
64450: PUSH
64451: LD_INT 6
64453: PUSH
64454: LD_INT 36
64456: PUSH
64457: LD_INT 4
64459: PUSH
64460: LD_INT 5
64462: PUSH
64463: LD_INT 31
64465: PUSH
64466: LD_INT 32
64468: PUSH
64469: LD_INT 33
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: LIST
64477: LIST
64478: LIST
64479: LIST
64480: LIST
64481: LIST
64482: LIST
64483: LIST
64484: IN
64485: NOT
64486: PUSH
64487: LD_VAR 0 6
64491: PUSH
64492: LD_INT 1
64494: EQUAL
64495: AND
64496: OR
64497: PUSH
64498: LD_VAR 0 1
64502: PUSH
64503: LD_INT 2
64505: PUSH
64506: LD_INT 3
64508: PUSH
64509: EMPTY
64510: LIST
64511: LIST
64512: IN
64513: NOT
64514: PUSH
64515: LD_VAR 0 6
64519: PUSH
64520: LD_INT 2
64522: EQUAL
64523: AND
64524: OR
64525: IFFALSE 64535
// mode = 0 ;
64527: LD_ADDR_VAR 0 6
64531: PUSH
64532: LD_INT 0
64534: ST_TO_ADDR
// case mode of 0 :
64535: LD_VAR 0 6
64539: PUSH
64540: LD_INT 0
64542: DOUBLE
64543: EQUAL
64544: IFTRUE 64548
64546: GO 76001
64548: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64549: LD_ADDR_VAR 0 11
64553: PUSH
64554: LD_INT 0
64556: PUSH
64557: LD_INT 0
64559: PUSH
64560: EMPTY
64561: LIST
64562: LIST
64563: PUSH
64564: LD_INT 0
64566: PUSH
64567: LD_INT 1
64569: NEG
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 1
64577: PUSH
64578: LD_INT 0
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 1
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: LD_INT 1
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: LD_INT 0
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 1
64618: NEG
64619: PUSH
64620: LD_INT 1
64622: NEG
64623: PUSH
64624: EMPTY
64625: LIST
64626: LIST
64627: PUSH
64628: LD_INT 1
64630: NEG
64631: PUSH
64632: LD_INT 2
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 0
64642: PUSH
64643: LD_INT 2
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 1
64653: PUSH
64654: LD_INT 1
64656: NEG
64657: PUSH
64658: EMPTY
64659: LIST
64660: LIST
64661: PUSH
64662: LD_INT 1
64664: PUSH
64665: LD_INT 2
64667: PUSH
64668: EMPTY
64669: LIST
64670: LIST
64671: PUSH
64672: LD_INT 0
64674: PUSH
64675: LD_INT 2
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 1
64684: NEG
64685: PUSH
64686: LD_INT 1
64688: PUSH
64689: EMPTY
64690: LIST
64691: LIST
64692: PUSH
64693: LD_INT 1
64695: PUSH
64696: LD_INT 3
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: PUSH
64703: LD_INT 0
64705: PUSH
64706: LD_INT 3
64708: PUSH
64709: EMPTY
64710: LIST
64711: LIST
64712: PUSH
64713: LD_INT 1
64715: NEG
64716: PUSH
64717: LD_INT 2
64719: PUSH
64720: EMPTY
64721: LIST
64722: LIST
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: LIST
64728: LIST
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64742: LD_ADDR_VAR 0 12
64746: PUSH
64747: LD_INT 0
64749: PUSH
64750: LD_INT 0
64752: PUSH
64753: EMPTY
64754: LIST
64755: LIST
64756: PUSH
64757: LD_INT 0
64759: PUSH
64760: LD_INT 1
64762: NEG
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 1
64770: PUSH
64771: LD_INT 0
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: PUSH
64781: LD_INT 1
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 0
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 1
64800: NEG
64801: PUSH
64802: LD_INT 0
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: PUSH
64809: LD_INT 1
64811: NEG
64812: PUSH
64813: LD_INT 1
64815: NEG
64816: PUSH
64817: EMPTY
64818: LIST
64819: LIST
64820: PUSH
64821: LD_INT 1
64823: PUSH
64824: LD_INT 1
64826: NEG
64827: PUSH
64828: EMPTY
64829: LIST
64830: LIST
64831: PUSH
64832: LD_INT 2
64834: PUSH
64835: LD_INT 0
64837: PUSH
64838: EMPTY
64839: LIST
64840: LIST
64841: PUSH
64842: LD_INT 2
64844: PUSH
64845: LD_INT 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 1
64854: NEG
64855: PUSH
64856: LD_INT 1
64858: PUSH
64859: EMPTY
64860: LIST
64861: LIST
64862: PUSH
64863: LD_INT 2
64865: NEG
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 2
64876: NEG
64877: PUSH
64878: LD_INT 1
64880: NEG
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 2
64888: NEG
64889: PUSH
64890: LD_INT 1
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: LD_INT 3
64899: NEG
64900: PUSH
64901: LD_INT 0
64903: PUSH
64904: EMPTY
64905: LIST
64906: LIST
64907: PUSH
64908: LD_INT 3
64910: NEG
64911: PUSH
64912: LD_INT 1
64914: NEG
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64938: LD_ADDR_VAR 0 13
64942: PUSH
64943: LD_INT 0
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: EMPTY
64950: LIST
64951: LIST
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: LD_INT 1
64958: NEG
64959: PUSH
64960: EMPTY
64961: LIST
64962: LIST
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: LD_INT 0
64969: PUSH
64970: EMPTY
64971: LIST
64972: LIST
64973: PUSH
64974: LD_INT 1
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: EMPTY
64981: LIST
64982: LIST
64983: PUSH
64984: LD_INT 0
64986: PUSH
64987: LD_INT 1
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: NEG
64997: PUSH
64998: LD_INT 0
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 1
65007: NEG
65008: PUSH
65009: LD_INT 1
65011: NEG
65012: PUSH
65013: EMPTY
65014: LIST
65015: LIST
65016: PUSH
65017: LD_INT 1
65019: NEG
65020: PUSH
65021: LD_INT 2
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 2
65031: PUSH
65032: LD_INT 1
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 2
65041: PUSH
65042: LD_INT 2
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 1
65051: PUSH
65052: LD_INT 2
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 2
65061: NEG
65062: PUSH
65063: LD_INT 1
65065: NEG
65066: PUSH
65067: EMPTY
65068: LIST
65069: LIST
65070: PUSH
65071: LD_INT 2
65073: NEG
65074: PUSH
65075: LD_INT 2
65077: NEG
65078: PUSH
65079: EMPTY
65080: LIST
65081: LIST
65082: PUSH
65083: LD_INT 2
65085: NEG
65086: PUSH
65087: LD_INT 3
65089: NEG
65090: PUSH
65091: EMPTY
65092: LIST
65093: LIST
65094: PUSH
65095: LD_INT 3
65097: NEG
65098: PUSH
65099: LD_INT 2
65101: NEG
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 3
65109: NEG
65110: PUSH
65111: LD_INT 3
65113: NEG
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65137: LD_ADDR_VAR 0 14
65141: PUSH
65142: LD_INT 0
65144: PUSH
65145: LD_INT 0
65147: PUSH
65148: EMPTY
65149: LIST
65150: LIST
65151: PUSH
65152: LD_INT 0
65154: PUSH
65155: LD_INT 1
65157: NEG
65158: PUSH
65159: EMPTY
65160: LIST
65161: LIST
65162: PUSH
65163: LD_INT 1
65165: PUSH
65166: LD_INT 0
65168: PUSH
65169: EMPTY
65170: LIST
65171: LIST
65172: PUSH
65173: LD_INT 1
65175: PUSH
65176: LD_INT 1
65178: PUSH
65179: EMPTY
65180: LIST
65181: LIST
65182: PUSH
65183: LD_INT 0
65185: PUSH
65186: LD_INT 1
65188: PUSH
65189: EMPTY
65190: LIST
65191: LIST
65192: PUSH
65193: LD_INT 1
65195: NEG
65196: PUSH
65197: LD_INT 0
65199: PUSH
65200: EMPTY
65201: LIST
65202: LIST
65203: PUSH
65204: LD_INT 1
65206: NEG
65207: PUSH
65208: LD_INT 1
65210: NEG
65211: PUSH
65212: EMPTY
65213: LIST
65214: LIST
65215: PUSH
65216: LD_INT 1
65218: NEG
65219: PUSH
65220: LD_INT 2
65222: NEG
65223: PUSH
65224: EMPTY
65225: LIST
65226: LIST
65227: PUSH
65228: LD_INT 0
65230: PUSH
65231: LD_INT 2
65233: NEG
65234: PUSH
65235: EMPTY
65236: LIST
65237: LIST
65238: PUSH
65239: LD_INT 1
65241: PUSH
65242: LD_INT 1
65244: NEG
65245: PUSH
65246: EMPTY
65247: LIST
65248: LIST
65249: PUSH
65250: LD_INT 1
65252: PUSH
65253: LD_INT 2
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: PUSH
65260: LD_INT 0
65262: PUSH
65263: LD_INT 2
65265: PUSH
65266: EMPTY
65267: LIST
65268: LIST
65269: PUSH
65270: LD_INT 1
65272: NEG
65273: PUSH
65274: LD_INT 1
65276: PUSH
65277: EMPTY
65278: LIST
65279: LIST
65280: PUSH
65281: LD_INT 1
65283: NEG
65284: PUSH
65285: LD_INT 3
65287: NEG
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: PUSH
65293: LD_INT 0
65295: PUSH
65296: LD_INT 3
65298: NEG
65299: PUSH
65300: EMPTY
65301: LIST
65302: LIST
65303: PUSH
65304: LD_INT 1
65306: PUSH
65307: LD_INT 2
65309: NEG
65310: PUSH
65311: EMPTY
65312: LIST
65313: LIST
65314: PUSH
65315: EMPTY
65316: LIST
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65333: LD_ADDR_VAR 0 15
65337: PUSH
65338: LD_INT 0
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 0
65350: PUSH
65351: LD_INT 1
65353: NEG
65354: PUSH
65355: EMPTY
65356: LIST
65357: LIST
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: LD_INT 0
65364: PUSH
65365: EMPTY
65366: LIST
65367: LIST
65368: PUSH
65369: LD_INT 1
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: EMPTY
65376: LIST
65377: LIST
65378: PUSH
65379: LD_INT 0
65381: PUSH
65382: LD_INT 1
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: LD_INT 0
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: PUSH
65400: LD_INT 1
65402: NEG
65403: PUSH
65404: LD_INT 1
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: PUSH
65415: LD_INT 1
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 2
65425: PUSH
65426: LD_INT 0
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 2
65435: PUSH
65436: LD_INT 1
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 1
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 2
65456: NEG
65457: PUSH
65458: LD_INT 0
65460: PUSH
65461: EMPTY
65462: LIST
65463: LIST
65464: PUSH
65465: LD_INT 2
65467: NEG
65468: PUSH
65469: LD_INT 1
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 2
65479: PUSH
65480: LD_INT 1
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 3
65490: PUSH
65491: LD_INT 0
65493: PUSH
65494: EMPTY
65495: LIST
65496: LIST
65497: PUSH
65498: LD_INT 3
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: EMPTY
65505: LIST
65506: LIST
65507: PUSH
65508: EMPTY
65509: LIST
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65526: LD_ADDR_VAR 0 16
65530: PUSH
65531: LD_INT 0
65533: PUSH
65534: LD_INT 0
65536: PUSH
65537: EMPTY
65538: LIST
65539: LIST
65540: PUSH
65541: LD_INT 0
65543: PUSH
65544: LD_INT 1
65546: NEG
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 1
65554: PUSH
65555: LD_INT 0
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 1
65564: PUSH
65565: LD_INT 1
65567: PUSH
65568: EMPTY
65569: LIST
65570: LIST
65571: PUSH
65572: LD_INT 0
65574: PUSH
65575: LD_INT 1
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: LD_INT 0
65588: PUSH
65589: EMPTY
65590: LIST
65591: LIST
65592: PUSH
65593: LD_INT 1
65595: NEG
65596: PUSH
65597: LD_INT 1
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 1
65607: NEG
65608: PUSH
65609: LD_INT 2
65611: NEG
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: LD_INT 2
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 2
65629: PUSH
65630: LD_INT 2
65632: PUSH
65633: EMPTY
65634: LIST
65635: LIST
65636: PUSH
65637: LD_INT 1
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: EMPTY
65644: LIST
65645: LIST
65646: PUSH
65647: LD_INT 2
65649: NEG
65650: PUSH
65651: LD_INT 1
65653: NEG
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 2
65661: NEG
65662: PUSH
65663: LD_INT 2
65665: NEG
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 3
65673: PUSH
65674: LD_INT 2
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: LD_INT 3
65683: PUSH
65684: LD_INT 3
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 2
65693: PUSH
65694: LD_INT 3
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: EMPTY
65702: LIST
65703: LIST
65704: LIST
65705: LIST
65706: LIST
65707: LIST
65708: LIST
65709: LIST
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: LIST
65715: LIST
65716: LIST
65717: LIST
65718: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65719: LD_ADDR_VAR 0 17
65723: PUSH
65724: LD_INT 0
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 0
65736: PUSH
65737: LD_INT 1
65739: NEG
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 1
65747: PUSH
65748: LD_INT 0
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 1
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: LD_INT 1
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: LD_INT 1
65777: NEG
65778: PUSH
65779: LD_INT 0
65781: PUSH
65782: EMPTY
65783: LIST
65784: LIST
65785: PUSH
65786: LD_INT 1
65788: NEG
65789: PUSH
65790: LD_INT 1
65792: NEG
65793: PUSH
65794: EMPTY
65795: LIST
65796: LIST
65797: PUSH
65798: LD_INT 1
65800: NEG
65801: PUSH
65802: LD_INT 2
65804: NEG
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 0
65812: PUSH
65813: LD_INT 2
65815: NEG
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 2
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 2
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 2
65854: PUSH
65855: LD_INT 2
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: PUSH
65865: LD_INT 2
65867: PUSH
65868: EMPTY
65869: LIST
65870: LIST
65871: PUSH
65872: LD_INT 0
65874: PUSH
65875: LD_INT 2
65877: PUSH
65878: EMPTY
65879: LIST
65880: LIST
65881: PUSH
65882: LD_INT 1
65884: NEG
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 2
65895: NEG
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 2
65906: NEG
65907: PUSH
65908: LD_INT 1
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 2
65918: NEG
65919: PUSH
65920: LD_INT 2
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: EMPTY
65929: LIST
65930: LIST
65931: LIST
65932: LIST
65933: LIST
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: LIST
65943: LIST
65944: LIST
65945: LIST
65946: LIST
65947: LIST
65948: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65949: LD_ADDR_VAR 0 18
65953: PUSH
65954: LD_INT 0
65956: PUSH
65957: LD_INT 0
65959: PUSH
65960: EMPTY
65961: LIST
65962: LIST
65963: PUSH
65964: LD_INT 0
65966: PUSH
65967: LD_INT 1
65969: NEG
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: PUSH
65975: LD_INT 1
65977: PUSH
65978: LD_INT 0
65980: PUSH
65981: EMPTY
65982: LIST
65983: LIST
65984: PUSH
65985: LD_INT 1
65987: PUSH
65988: LD_INT 1
65990: PUSH
65991: EMPTY
65992: LIST
65993: LIST
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: LD_INT 1
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: LD_INT 0
66011: PUSH
66012: EMPTY
66013: LIST
66014: LIST
66015: PUSH
66016: LD_INT 1
66018: NEG
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 1
66030: NEG
66031: PUSH
66032: LD_INT 2
66034: NEG
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 0
66042: PUSH
66043: LD_INT 2
66045: NEG
66046: PUSH
66047: EMPTY
66048: LIST
66049: LIST
66050: PUSH
66051: LD_INT 1
66053: PUSH
66054: LD_INT 1
66056: NEG
66057: PUSH
66058: EMPTY
66059: LIST
66060: LIST
66061: PUSH
66062: LD_INT 2
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: EMPTY
66069: LIST
66070: LIST
66071: PUSH
66072: LD_INT 2
66074: PUSH
66075: LD_INT 1
66077: PUSH
66078: EMPTY
66079: LIST
66080: LIST
66081: PUSH
66082: LD_INT 2
66084: PUSH
66085: LD_INT 2
66087: PUSH
66088: EMPTY
66089: LIST
66090: LIST
66091: PUSH
66092: LD_INT 1
66094: PUSH
66095: LD_INT 2
66097: PUSH
66098: EMPTY
66099: LIST
66100: LIST
66101: PUSH
66102: LD_INT 0
66104: PUSH
66105: LD_INT 2
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: PUSH
66112: LD_INT 1
66114: NEG
66115: PUSH
66116: LD_INT 1
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 2
66125: NEG
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: EMPTY
66131: LIST
66132: LIST
66133: PUSH
66134: LD_INT 2
66136: NEG
66137: PUSH
66138: LD_INT 1
66140: NEG
66141: PUSH
66142: EMPTY
66143: LIST
66144: LIST
66145: PUSH
66146: LD_INT 2
66148: NEG
66149: PUSH
66150: LD_INT 2
66152: NEG
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: LIST
66162: LIST
66163: LIST
66164: LIST
66165: LIST
66166: LIST
66167: LIST
66168: LIST
66169: LIST
66170: LIST
66171: LIST
66172: LIST
66173: LIST
66174: LIST
66175: LIST
66176: LIST
66177: LIST
66178: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66179: LD_ADDR_VAR 0 19
66183: PUSH
66184: LD_INT 0
66186: PUSH
66187: LD_INT 0
66189: PUSH
66190: EMPTY
66191: LIST
66192: LIST
66193: PUSH
66194: LD_INT 0
66196: PUSH
66197: LD_INT 1
66199: NEG
66200: PUSH
66201: EMPTY
66202: LIST
66203: LIST
66204: PUSH
66205: LD_INT 1
66207: PUSH
66208: LD_INT 0
66210: PUSH
66211: EMPTY
66212: LIST
66213: LIST
66214: PUSH
66215: LD_INT 1
66217: PUSH
66218: LD_INT 1
66220: PUSH
66221: EMPTY
66222: LIST
66223: LIST
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: LD_INT 1
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: LD_INT 0
66241: PUSH
66242: EMPTY
66243: LIST
66244: LIST
66245: PUSH
66246: LD_INT 1
66248: NEG
66249: PUSH
66250: LD_INT 1
66252: NEG
66253: PUSH
66254: EMPTY
66255: LIST
66256: LIST
66257: PUSH
66258: LD_INT 1
66260: NEG
66261: PUSH
66262: LD_INT 2
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 0
66272: PUSH
66273: LD_INT 2
66275: NEG
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 1
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 2
66294: PUSH
66295: LD_INT 0
66297: PUSH
66298: EMPTY
66299: LIST
66300: LIST
66301: PUSH
66302: LD_INT 2
66304: PUSH
66305: LD_INT 1
66307: PUSH
66308: EMPTY
66309: LIST
66310: LIST
66311: PUSH
66312: LD_INT 2
66314: PUSH
66315: LD_INT 2
66317: PUSH
66318: EMPTY
66319: LIST
66320: LIST
66321: PUSH
66322: LD_INT 1
66324: PUSH
66325: LD_INT 2
66327: PUSH
66328: EMPTY
66329: LIST
66330: LIST
66331: PUSH
66332: LD_INT 0
66334: PUSH
66335: LD_INT 2
66337: PUSH
66338: EMPTY
66339: LIST
66340: LIST
66341: PUSH
66342: LD_INT 1
66344: NEG
66345: PUSH
66346: LD_INT 1
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 2
66355: NEG
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 2
66366: NEG
66367: PUSH
66368: LD_INT 1
66370: NEG
66371: PUSH
66372: EMPTY
66373: LIST
66374: LIST
66375: PUSH
66376: LD_INT 2
66378: NEG
66379: PUSH
66380: LD_INT 2
66382: NEG
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: EMPTY
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: LIST
66397: LIST
66398: LIST
66399: LIST
66400: LIST
66401: LIST
66402: LIST
66403: LIST
66404: LIST
66405: LIST
66406: LIST
66407: LIST
66408: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66409: LD_ADDR_VAR 0 20
66413: PUSH
66414: LD_INT 0
66416: PUSH
66417: LD_INT 0
66419: PUSH
66420: EMPTY
66421: LIST
66422: LIST
66423: PUSH
66424: LD_INT 0
66426: PUSH
66427: LD_INT 1
66429: NEG
66430: PUSH
66431: EMPTY
66432: LIST
66433: LIST
66434: PUSH
66435: LD_INT 1
66437: PUSH
66438: LD_INT 0
66440: PUSH
66441: EMPTY
66442: LIST
66443: LIST
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: LD_INT 1
66450: PUSH
66451: EMPTY
66452: LIST
66453: LIST
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: LD_INT 1
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: LD_INT 0
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: NEG
66479: PUSH
66480: LD_INT 1
66482: NEG
66483: PUSH
66484: EMPTY
66485: LIST
66486: LIST
66487: PUSH
66488: LD_INT 1
66490: NEG
66491: PUSH
66492: LD_INT 2
66494: NEG
66495: PUSH
66496: EMPTY
66497: LIST
66498: LIST
66499: PUSH
66500: LD_INT 0
66502: PUSH
66503: LD_INT 2
66505: NEG
66506: PUSH
66507: EMPTY
66508: LIST
66509: LIST
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: EMPTY
66519: LIST
66520: LIST
66521: PUSH
66522: LD_INT 2
66524: PUSH
66525: LD_INT 0
66527: PUSH
66528: EMPTY
66529: LIST
66530: LIST
66531: PUSH
66532: LD_INT 2
66534: PUSH
66535: LD_INT 1
66537: PUSH
66538: EMPTY
66539: LIST
66540: LIST
66541: PUSH
66542: LD_INT 2
66544: PUSH
66545: LD_INT 2
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 1
66554: PUSH
66555: LD_INT 2
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 0
66564: PUSH
66565: LD_INT 2
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: LD_INT 1
66574: NEG
66575: PUSH
66576: LD_INT 1
66578: PUSH
66579: EMPTY
66580: LIST
66581: LIST
66582: PUSH
66583: LD_INT 2
66585: NEG
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: EMPTY
66591: LIST
66592: LIST
66593: PUSH
66594: LD_INT 2
66596: NEG
66597: PUSH
66598: LD_INT 1
66600: NEG
66601: PUSH
66602: EMPTY
66603: LIST
66604: LIST
66605: PUSH
66606: LD_INT 2
66608: NEG
66609: PUSH
66610: LD_INT 2
66612: NEG
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: EMPTY
66619: LIST
66620: LIST
66621: LIST
66622: LIST
66623: LIST
66624: LIST
66625: LIST
66626: LIST
66627: LIST
66628: LIST
66629: LIST
66630: LIST
66631: LIST
66632: LIST
66633: LIST
66634: LIST
66635: LIST
66636: LIST
66637: LIST
66638: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66639: LD_ADDR_VAR 0 21
66643: PUSH
66644: LD_INT 0
66646: PUSH
66647: LD_INT 0
66649: PUSH
66650: EMPTY
66651: LIST
66652: LIST
66653: PUSH
66654: LD_INT 0
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: EMPTY
66662: LIST
66663: LIST
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: LD_INT 0
66670: PUSH
66671: EMPTY
66672: LIST
66673: LIST
66674: PUSH
66675: LD_INT 1
66677: PUSH
66678: LD_INT 1
66680: PUSH
66681: EMPTY
66682: LIST
66683: LIST
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: LD_INT 1
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: LD_INT 0
66701: PUSH
66702: EMPTY
66703: LIST
66704: LIST
66705: PUSH
66706: LD_INT 1
66708: NEG
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 1
66720: NEG
66721: PUSH
66722: LD_INT 2
66724: NEG
66725: PUSH
66726: EMPTY
66727: LIST
66728: LIST
66729: PUSH
66730: LD_INT 0
66732: PUSH
66733: LD_INT 2
66735: NEG
66736: PUSH
66737: EMPTY
66738: LIST
66739: LIST
66740: PUSH
66741: LD_INT 1
66743: PUSH
66744: LD_INT 1
66746: NEG
66747: PUSH
66748: EMPTY
66749: LIST
66750: LIST
66751: PUSH
66752: LD_INT 2
66754: PUSH
66755: LD_INT 0
66757: PUSH
66758: EMPTY
66759: LIST
66760: LIST
66761: PUSH
66762: LD_INT 2
66764: PUSH
66765: LD_INT 1
66767: PUSH
66768: EMPTY
66769: LIST
66770: LIST
66771: PUSH
66772: LD_INT 2
66774: PUSH
66775: LD_INT 2
66777: PUSH
66778: EMPTY
66779: LIST
66780: LIST
66781: PUSH
66782: LD_INT 1
66784: PUSH
66785: LD_INT 2
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: LD_INT 2
66797: PUSH
66798: EMPTY
66799: LIST
66800: LIST
66801: PUSH
66802: LD_INT 1
66804: NEG
66805: PUSH
66806: LD_INT 1
66808: PUSH
66809: EMPTY
66810: LIST
66811: LIST
66812: PUSH
66813: LD_INT 2
66815: NEG
66816: PUSH
66817: LD_INT 0
66819: PUSH
66820: EMPTY
66821: LIST
66822: LIST
66823: PUSH
66824: LD_INT 2
66826: NEG
66827: PUSH
66828: LD_INT 1
66830: NEG
66831: PUSH
66832: EMPTY
66833: LIST
66834: LIST
66835: PUSH
66836: LD_INT 2
66838: NEG
66839: PUSH
66840: LD_INT 2
66842: NEG
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: EMPTY
66849: LIST
66850: LIST
66851: LIST
66852: LIST
66853: LIST
66854: LIST
66855: LIST
66856: LIST
66857: LIST
66858: LIST
66859: LIST
66860: LIST
66861: LIST
66862: LIST
66863: LIST
66864: LIST
66865: LIST
66866: LIST
66867: LIST
66868: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66869: LD_ADDR_VAR 0 22
66873: PUSH
66874: LD_INT 0
66876: PUSH
66877: LD_INT 0
66879: PUSH
66880: EMPTY
66881: LIST
66882: LIST
66883: PUSH
66884: LD_INT 0
66886: PUSH
66887: LD_INT 1
66889: NEG
66890: PUSH
66891: EMPTY
66892: LIST
66893: LIST
66894: PUSH
66895: LD_INT 1
66897: PUSH
66898: LD_INT 0
66900: PUSH
66901: EMPTY
66902: LIST
66903: LIST
66904: PUSH
66905: LD_INT 1
66907: PUSH
66908: LD_INT 1
66910: PUSH
66911: EMPTY
66912: LIST
66913: LIST
66914: PUSH
66915: LD_INT 0
66917: PUSH
66918: LD_INT 1
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 1
66927: NEG
66928: PUSH
66929: LD_INT 0
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 1
66938: NEG
66939: PUSH
66940: LD_INT 1
66942: NEG
66943: PUSH
66944: EMPTY
66945: LIST
66946: LIST
66947: PUSH
66948: LD_INT 1
66950: NEG
66951: PUSH
66952: LD_INT 2
66954: NEG
66955: PUSH
66956: EMPTY
66957: LIST
66958: LIST
66959: PUSH
66960: LD_INT 0
66962: PUSH
66963: LD_INT 2
66965: NEG
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 1
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 2
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 2
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 2
67004: PUSH
67005: LD_INT 2
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: PUSH
67015: LD_INT 2
67017: PUSH
67018: EMPTY
67019: LIST
67020: LIST
67021: PUSH
67022: LD_INT 0
67024: PUSH
67025: LD_INT 2
67027: PUSH
67028: EMPTY
67029: LIST
67030: LIST
67031: PUSH
67032: LD_INT 1
67034: NEG
67035: PUSH
67036: LD_INT 1
67038: PUSH
67039: EMPTY
67040: LIST
67041: LIST
67042: PUSH
67043: LD_INT 2
67045: NEG
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: EMPTY
67051: LIST
67052: LIST
67053: PUSH
67054: LD_INT 2
67056: NEG
67057: PUSH
67058: LD_INT 1
67060: NEG
67061: PUSH
67062: EMPTY
67063: LIST
67064: LIST
67065: PUSH
67066: LD_INT 2
67068: NEG
67069: PUSH
67070: LD_INT 2
67072: NEG
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: EMPTY
67079: LIST
67080: LIST
67081: LIST
67082: LIST
67083: LIST
67084: LIST
67085: LIST
67086: LIST
67087: LIST
67088: LIST
67089: LIST
67090: LIST
67091: LIST
67092: LIST
67093: LIST
67094: LIST
67095: LIST
67096: LIST
67097: LIST
67098: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67099: LD_ADDR_VAR 0 23
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: LD_INT 0
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: LD_INT 1
67119: NEG
67120: PUSH
67121: EMPTY
67122: LIST
67123: LIST
67124: PUSH
67125: LD_INT 1
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: PUSH
67138: LD_INT 1
67140: PUSH
67141: EMPTY
67142: LIST
67143: LIST
67144: PUSH
67145: LD_INT 0
67147: PUSH
67148: LD_INT 1
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 1
67157: NEG
67158: PUSH
67159: LD_INT 0
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 1
67168: NEG
67169: PUSH
67170: LD_INT 1
67172: NEG
67173: PUSH
67174: EMPTY
67175: LIST
67176: LIST
67177: PUSH
67178: LD_INT 1
67180: NEG
67181: PUSH
67182: LD_INT 2
67184: NEG
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: LD_INT 2
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 1
67203: PUSH
67204: LD_INT 1
67206: NEG
67207: PUSH
67208: EMPTY
67209: LIST
67210: LIST
67211: PUSH
67212: LD_INT 2
67214: PUSH
67215: LD_INT 0
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: LD_INT 2
67224: PUSH
67225: LD_INT 1
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 2
67234: PUSH
67235: LD_INT 2
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 1
67244: PUSH
67245: LD_INT 2
67247: PUSH
67248: EMPTY
67249: LIST
67250: LIST
67251: PUSH
67252: LD_INT 0
67254: PUSH
67255: LD_INT 2
67257: PUSH
67258: EMPTY
67259: LIST
67260: LIST
67261: PUSH
67262: LD_INT 1
67264: NEG
67265: PUSH
67266: LD_INT 1
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 2
67275: NEG
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: EMPTY
67281: LIST
67282: LIST
67283: PUSH
67284: LD_INT 2
67286: NEG
67287: PUSH
67288: LD_INT 1
67290: NEG
67291: PUSH
67292: EMPTY
67293: LIST
67294: LIST
67295: PUSH
67296: LD_INT 2
67298: NEG
67299: PUSH
67300: LD_INT 2
67302: NEG
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 2
67310: NEG
67311: PUSH
67312: LD_INT 3
67314: NEG
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 1
67322: NEG
67323: PUSH
67324: LD_INT 3
67326: NEG
67327: PUSH
67328: EMPTY
67329: LIST
67330: LIST
67331: PUSH
67332: LD_INT 1
67334: PUSH
67335: LD_INT 2
67337: NEG
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 2
67345: PUSH
67346: LD_INT 1
67348: NEG
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: EMPTY
67355: LIST
67356: LIST
67357: LIST
67358: LIST
67359: LIST
67360: LIST
67361: LIST
67362: LIST
67363: LIST
67364: LIST
67365: LIST
67366: LIST
67367: LIST
67368: LIST
67369: LIST
67370: LIST
67371: LIST
67372: LIST
67373: LIST
67374: LIST
67375: LIST
67376: LIST
67377: LIST
67378: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
67379: LD_ADDR_VAR 0 24
67383: PUSH
67384: LD_INT 0
67386: PUSH
67387: LD_INT 0
67389: PUSH
67390: EMPTY
67391: LIST
67392: LIST
67393: PUSH
67394: LD_INT 0
67396: PUSH
67397: LD_INT 1
67399: NEG
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 1
67407: PUSH
67408: LD_INT 0
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 1
67417: PUSH
67418: LD_INT 1
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: LD_INT 1
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 1
67437: NEG
67438: PUSH
67439: LD_INT 0
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 1
67448: NEG
67449: PUSH
67450: LD_INT 1
67452: NEG
67453: PUSH
67454: EMPTY
67455: LIST
67456: LIST
67457: PUSH
67458: LD_INT 1
67460: NEG
67461: PUSH
67462: LD_INT 2
67464: NEG
67465: PUSH
67466: EMPTY
67467: LIST
67468: LIST
67469: PUSH
67470: LD_INT 0
67472: PUSH
67473: LD_INT 2
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 1
67483: PUSH
67484: LD_INT 1
67486: NEG
67487: PUSH
67488: EMPTY
67489: LIST
67490: LIST
67491: PUSH
67492: LD_INT 2
67494: PUSH
67495: LD_INT 0
67497: PUSH
67498: EMPTY
67499: LIST
67500: LIST
67501: PUSH
67502: LD_INT 2
67504: PUSH
67505: LD_INT 1
67507: PUSH
67508: EMPTY
67509: LIST
67510: LIST
67511: PUSH
67512: LD_INT 2
67514: PUSH
67515: LD_INT 2
67517: PUSH
67518: EMPTY
67519: LIST
67520: LIST
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: LD_INT 2
67527: PUSH
67528: EMPTY
67529: LIST
67530: LIST
67531: PUSH
67532: LD_INT 0
67534: PUSH
67535: LD_INT 2
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: LD_INT 1
67548: PUSH
67549: EMPTY
67550: LIST
67551: LIST
67552: PUSH
67553: LD_INT 2
67555: NEG
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 2
67566: NEG
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 2
67578: NEG
67579: PUSH
67580: LD_INT 2
67582: NEG
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 1
67590: PUSH
67591: LD_INT 2
67593: NEG
67594: PUSH
67595: EMPTY
67596: LIST
67597: LIST
67598: PUSH
67599: LD_INT 2
67601: PUSH
67602: LD_INT 1
67604: NEG
67605: PUSH
67606: EMPTY
67607: LIST
67608: LIST
67609: PUSH
67610: LD_INT 3
67612: PUSH
67613: LD_INT 1
67615: PUSH
67616: EMPTY
67617: LIST
67618: LIST
67619: PUSH
67620: LD_INT 3
67622: PUSH
67623: LD_INT 2
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: EMPTY
67631: LIST
67632: LIST
67633: LIST
67634: LIST
67635: LIST
67636: LIST
67637: LIST
67638: LIST
67639: LIST
67640: LIST
67641: LIST
67642: LIST
67643: LIST
67644: LIST
67645: LIST
67646: LIST
67647: LIST
67648: LIST
67649: LIST
67650: LIST
67651: LIST
67652: LIST
67653: LIST
67654: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
67655: LD_ADDR_VAR 0 25
67659: PUSH
67660: LD_INT 0
67662: PUSH
67663: LD_INT 0
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 0
67672: PUSH
67673: LD_INT 1
67675: NEG
67676: PUSH
67677: EMPTY
67678: LIST
67679: LIST
67680: PUSH
67681: LD_INT 1
67683: PUSH
67684: LD_INT 0
67686: PUSH
67687: EMPTY
67688: LIST
67689: LIST
67690: PUSH
67691: LD_INT 1
67693: PUSH
67694: LD_INT 1
67696: PUSH
67697: EMPTY
67698: LIST
67699: LIST
67700: PUSH
67701: LD_INT 0
67703: PUSH
67704: LD_INT 1
67706: PUSH
67707: EMPTY
67708: LIST
67709: LIST
67710: PUSH
67711: LD_INT 1
67713: NEG
67714: PUSH
67715: LD_INT 0
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PUSH
67722: LD_INT 1
67724: NEG
67725: PUSH
67726: LD_INT 1
67728: NEG
67729: PUSH
67730: EMPTY
67731: LIST
67732: LIST
67733: PUSH
67734: LD_INT 1
67736: NEG
67737: PUSH
67738: LD_INT 2
67740: NEG
67741: PUSH
67742: EMPTY
67743: LIST
67744: LIST
67745: PUSH
67746: LD_INT 0
67748: PUSH
67749: LD_INT 2
67751: NEG
67752: PUSH
67753: EMPTY
67754: LIST
67755: LIST
67756: PUSH
67757: LD_INT 1
67759: PUSH
67760: LD_INT 1
67762: NEG
67763: PUSH
67764: EMPTY
67765: LIST
67766: LIST
67767: PUSH
67768: LD_INT 2
67770: PUSH
67771: LD_INT 0
67773: PUSH
67774: EMPTY
67775: LIST
67776: LIST
67777: PUSH
67778: LD_INT 2
67780: PUSH
67781: LD_INT 1
67783: PUSH
67784: EMPTY
67785: LIST
67786: LIST
67787: PUSH
67788: LD_INT 2
67790: PUSH
67791: LD_INT 2
67793: PUSH
67794: EMPTY
67795: LIST
67796: LIST
67797: PUSH
67798: LD_INT 1
67800: PUSH
67801: LD_INT 2
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: LD_INT 0
67810: PUSH
67811: LD_INT 2
67813: PUSH
67814: EMPTY
67815: LIST
67816: LIST
67817: PUSH
67818: LD_INT 1
67820: NEG
67821: PUSH
67822: LD_INT 1
67824: PUSH
67825: EMPTY
67826: LIST
67827: LIST
67828: PUSH
67829: LD_INT 2
67831: NEG
67832: PUSH
67833: LD_INT 0
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: PUSH
67840: LD_INT 2
67842: NEG
67843: PUSH
67844: LD_INT 1
67846: NEG
67847: PUSH
67848: EMPTY
67849: LIST
67850: LIST
67851: PUSH
67852: LD_INT 2
67854: NEG
67855: PUSH
67856: LD_INT 2
67858: NEG
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 3
67866: PUSH
67867: LD_INT 1
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 3
67876: PUSH
67877: LD_INT 2
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 2
67886: PUSH
67887: LD_INT 3
67889: PUSH
67890: EMPTY
67891: LIST
67892: LIST
67893: PUSH
67894: LD_INT 1
67896: PUSH
67897: LD_INT 3
67899: PUSH
67900: EMPTY
67901: LIST
67902: LIST
67903: PUSH
67904: EMPTY
67905: LIST
67906: LIST
67907: LIST
67908: LIST
67909: LIST
67910: LIST
67911: LIST
67912: LIST
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67929: LD_ADDR_VAR 0 26
67933: PUSH
67934: LD_INT 0
67936: PUSH
67937: LD_INT 0
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 1
67957: PUSH
67958: LD_INT 0
67960: PUSH
67961: EMPTY
67962: LIST
67963: LIST
67964: PUSH
67965: LD_INT 1
67967: PUSH
67968: LD_INT 1
67970: PUSH
67971: EMPTY
67972: LIST
67973: LIST
67974: PUSH
67975: LD_INT 0
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: EMPTY
67982: LIST
67983: LIST
67984: PUSH
67985: LD_INT 1
67987: NEG
67988: PUSH
67989: LD_INT 0
67991: PUSH
67992: EMPTY
67993: LIST
67994: LIST
67995: PUSH
67996: LD_INT 1
67998: NEG
67999: PUSH
68000: LD_INT 1
68002: NEG
68003: PUSH
68004: EMPTY
68005: LIST
68006: LIST
68007: PUSH
68008: LD_INT 1
68010: NEG
68011: PUSH
68012: LD_INT 2
68014: NEG
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 0
68022: PUSH
68023: LD_INT 2
68025: NEG
68026: PUSH
68027: EMPTY
68028: LIST
68029: LIST
68030: PUSH
68031: LD_INT 1
68033: PUSH
68034: LD_INT 1
68036: NEG
68037: PUSH
68038: EMPTY
68039: LIST
68040: LIST
68041: PUSH
68042: LD_INT 2
68044: PUSH
68045: LD_INT 0
68047: PUSH
68048: EMPTY
68049: LIST
68050: LIST
68051: PUSH
68052: LD_INT 2
68054: PUSH
68055: LD_INT 1
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 2
68064: PUSH
68065: LD_INT 2
68067: PUSH
68068: EMPTY
68069: LIST
68070: LIST
68071: PUSH
68072: LD_INT 1
68074: PUSH
68075: LD_INT 2
68077: PUSH
68078: EMPTY
68079: LIST
68080: LIST
68081: PUSH
68082: LD_INT 0
68084: PUSH
68085: LD_INT 2
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 1
68094: NEG
68095: PUSH
68096: LD_INT 1
68098: PUSH
68099: EMPTY
68100: LIST
68101: LIST
68102: PUSH
68103: LD_INT 2
68105: NEG
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: EMPTY
68111: LIST
68112: LIST
68113: PUSH
68114: LD_INT 2
68116: NEG
68117: PUSH
68118: LD_INT 1
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 2
68128: NEG
68129: PUSH
68130: LD_INT 2
68132: NEG
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 2
68140: PUSH
68141: LD_INT 3
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 1
68150: PUSH
68151: LD_INT 3
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 1
68160: NEG
68161: PUSH
68162: LD_INT 2
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 2
68171: NEG
68172: PUSH
68173: LD_INT 1
68175: PUSH
68176: EMPTY
68177: LIST
68178: LIST
68179: PUSH
68180: EMPTY
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: LIST
68197: LIST
68198: LIST
68199: LIST
68200: LIST
68201: LIST
68202: LIST
68203: LIST
68204: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68205: LD_ADDR_VAR 0 27
68209: PUSH
68210: LD_INT 0
68212: PUSH
68213: LD_INT 0
68215: PUSH
68216: EMPTY
68217: LIST
68218: LIST
68219: PUSH
68220: LD_INT 0
68222: PUSH
68223: LD_INT 1
68225: NEG
68226: PUSH
68227: EMPTY
68228: LIST
68229: LIST
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: LD_INT 0
68236: PUSH
68237: EMPTY
68238: LIST
68239: LIST
68240: PUSH
68241: LD_INT 1
68243: PUSH
68244: LD_INT 1
68246: PUSH
68247: EMPTY
68248: LIST
68249: LIST
68250: PUSH
68251: LD_INT 0
68253: PUSH
68254: LD_INT 1
68256: PUSH
68257: EMPTY
68258: LIST
68259: LIST
68260: PUSH
68261: LD_INT 1
68263: NEG
68264: PUSH
68265: LD_INT 0
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: PUSH
68272: LD_INT 1
68274: NEG
68275: PUSH
68276: LD_INT 1
68278: NEG
68279: PUSH
68280: EMPTY
68281: LIST
68282: LIST
68283: PUSH
68284: LD_INT 1
68286: NEG
68287: PUSH
68288: LD_INT 2
68290: NEG
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 0
68298: PUSH
68299: LD_INT 2
68301: NEG
68302: PUSH
68303: EMPTY
68304: LIST
68305: LIST
68306: PUSH
68307: LD_INT 1
68309: PUSH
68310: LD_INT 1
68312: NEG
68313: PUSH
68314: EMPTY
68315: LIST
68316: LIST
68317: PUSH
68318: LD_INT 2
68320: PUSH
68321: LD_INT 0
68323: PUSH
68324: EMPTY
68325: LIST
68326: LIST
68327: PUSH
68328: LD_INT 2
68330: PUSH
68331: LD_INT 1
68333: PUSH
68334: EMPTY
68335: LIST
68336: LIST
68337: PUSH
68338: LD_INT 2
68340: PUSH
68341: LD_INT 2
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 1
68350: PUSH
68351: LD_INT 2
68353: PUSH
68354: EMPTY
68355: LIST
68356: LIST
68357: PUSH
68358: LD_INT 0
68360: PUSH
68361: LD_INT 2
68363: PUSH
68364: EMPTY
68365: LIST
68366: LIST
68367: PUSH
68368: LD_INT 1
68370: NEG
68371: PUSH
68372: LD_INT 1
68374: PUSH
68375: EMPTY
68376: LIST
68377: LIST
68378: PUSH
68379: LD_INT 2
68381: NEG
68382: PUSH
68383: LD_INT 0
68385: PUSH
68386: EMPTY
68387: LIST
68388: LIST
68389: PUSH
68390: LD_INT 2
68392: NEG
68393: PUSH
68394: LD_INT 1
68396: NEG
68397: PUSH
68398: EMPTY
68399: LIST
68400: LIST
68401: PUSH
68402: LD_INT 2
68404: NEG
68405: PUSH
68406: LD_INT 2
68408: NEG
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 1
68416: NEG
68417: PUSH
68418: LD_INT 2
68420: PUSH
68421: EMPTY
68422: LIST
68423: LIST
68424: PUSH
68425: LD_INT 2
68427: NEG
68428: PUSH
68429: LD_INT 1
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 3
68438: NEG
68439: PUSH
68440: LD_INT 1
68442: NEG
68443: PUSH
68444: EMPTY
68445: LIST
68446: LIST
68447: PUSH
68448: LD_INT 3
68450: NEG
68451: PUSH
68452: LD_INT 2
68454: NEG
68455: PUSH
68456: EMPTY
68457: LIST
68458: LIST
68459: PUSH
68460: EMPTY
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: LIST
68466: LIST
68467: LIST
68468: LIST
68469: LIST
68470: LIST
68471: LIST
68472: LIST
68473: LIST
68474: LIST
68475: LIST
68476: LIST
68477: LIST
68478: LIST
68479: LIST
68480: LIST
68481: LIST
68482: LIST
68483: LIST
68484: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68485: LD_ADDR_VAR 0 28
68489: PUSH
68490: LD_INT 0
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: EMPTY
68497: LIST
68498: LIST
68499: PUSH
68500: LD_INT 0
68502: PUSH
68503: LD_INT 1
68505: NEG
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 1
68513: PUSH
68514: LD_INT 0
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 1
68523: PUSH
68524: LD_INT 1
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: LD_INT 1
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 1
68543: NEG
68544: PUSH
68545: LD_INT 0
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 1
68554: NEG
68555: PUSH
68556: LD_INT 1
68558: NEG
68559: PUSH
68560: EMPTY
68561: LIST
68562: LIST
68563: PUSH
68564: LD_INT 1
68566: NEG
68567: PUSH
68568: LD_INT 2
68570: NEG
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 0
68578: PUSH
68579: LD_INT 2
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 1
68589: PUSH
68590: LD_INT 1
68592: NEG
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 2
68600: PUSH
68601: LD_INT 0
68603: PUSH
68604: EMPTY
68605: LIST
68606: LIST
68607: PUSH
68608: LD_INT 2
68610: PUSH
68611: LD_INT 1
68613: PUSH
68614: EMPTY
68615: LIST
68616: LIST
68617: PUSH
68618: LD_INT 2
68620: PUSH
68621: LD_INT 2
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 1
68630: PUSH
68631: LD_INT 2
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: LD_INT 2
68643: PUSH
68644: EMPTY
68645: LIST
68646: LIST
68647: PUSH
68648: LD_INT 1
68650: NEG
68651: PUSH
68652: LD_INT 1
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: PUSH
68659: LD_INT 2
68661: NEG
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 2
68672: NEG
68673: PUSH
68674: LD_INT 1
68676: NEG
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: PUSH
68682: LD_INT 2
68684: NEG
68685: PUSH
68686: LD_INT 2
68688: NEG
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 2
68696: NEG
68697: PUSH
68698: LD_INT 3
68700: NEG
68701: PUSH
68702: EMPTY
68703: LIST
68704: LIST
68705: PUSH
68706: LD_INT 1
68708: NEG
68709: PUSH
68710: LD_INT 3
68712: NEG
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 3
68720: NEG
68721: PUSH
68722: LD_INT 1
68724: NEG
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 3
68732: NEG
68733: PUSH
68734: LD_INT 2
68736: NEG
68737: PUSH
68738: EMPTY
68739: LIST
68740: LIST
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: LIST
68746: LIST
68747: LIST
68748: LIST
68749: LIST
68750: LIST
68751: LIST
68752: LIST
68753: LIST
68754: LIST
68755: LIST
68756: LIST
68757: LIST
68758: LIST
68759: LIST
68760: LIST
68761: LIST
68762: LIST
68763: LIST
68764: LIST
68765: LIST
68766: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68767: LD_ADDR_VAR 0 29
68771: PUSH
68772: LD_INT 0
68774: PUSH
68775: LD_INT 0
68777: PUSH
68778: EMPTY
68779: LIST
68780: LIST
68781: PUSH
68782: LD_INT 0
68784: PUSH
68785: LD_INT 1
68787: NEG
68788: PUSH
68789: EMPTY
68790: LIST
68791: LIST
68792: PUSH
68793: LD_INT 1
68795: PUSH
68796: LD_INT 0
68798: PUSH
68799: EMPTY
68800: LIST
68801: LIST
68802: PUSH
68803: LD_INT 1
68805: PUSH
68806: LD_INT 1
68808: PUSH
68809: EMPTY
68810: LIST
68811: LIST
68812: PUSH
68813: LD_INT 0
68815: PUSH
68816: LD_INT 1
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: PUSH
68823: LD_INT 1
68825: NEG
68826: PUSH
68827: LD_INT 0
68829: PUSH
68830: EMPTY
68831: LIST
68832: LIST
68833: PUSH
68834: LD_INT 1
68836: NEG
68837: PUSH
68838: LD_INT 1
68840: NEG
68841: PUSH
68842: EMPTY
68843: LIST
68844: LIST
68845: PUSH
68846: LD_INT 1
68848: NEG
68849: PUSH
68850: LD_INT 2
68852: NEG
68853: PUSH
68854: EMPTY
68855: LIST
68856: LIST
68857: PUSH
68858: LD_INT 0
68860: PUSH
68861: LD_INT 2
68863: NEG
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 1
68871: PUSH
68872: LD_INT 1
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 2
68882: PUSH
68883: LD_INT 0
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 2
68892: PUSH
68893: LD_INT 1
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 1
68902: PUSH
68903: LD_INT 2
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: LD_INT 2
68915: PUSH
68916: EMPTY
68917: LIST
68918: LIST
68919: PUSH
68920: LD_INT 1
68922: NEG
68923: PUSH
68924: LD_INT 1
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 2
68933: NEG
68934: PUSH
68935: LD_INT 1
68937: NEG
68938: PUSH
68939: EMPTY
68940: LIST
68941: LIST
68942: PUSH
68943: LD_INT 2
68945: NEG
68946: PUSH
68947: LD_INT 2
68949: NEG
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 2
68957: NEG
68958: PUSH
68959: LD_INT 3
68961: NEG
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 2
68969: PUSH
68970: LD_INT 1
68972: NEG
68973: PUSH
68974: EMPTY
68975: LIST
68976: LIST
68977: PUSH
68978: LD_INT 3
68980: PUSH
68981: LD_INT 1
68983: PUSH
68984: EMPTY
68985: LIST
68986: LIST
68987: PUSH
68988: LD_INT 1
68990: PUSH
68991: LD_INT 3
68993: PUSH
68994: EMPTY
68995: LIST
68996: LIST
68997: PUSH
68998: LD_INT 1
69000: NEG
69001: PUSH
69002: LD_INT 2
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: PUSH
69009: LD_INT 3
69011: NEG
69012: PUSH
69013: LD_INT 2
69015: NEG
69016: PUSH
69017: EMPTY
69018: LIST
69019: LIST
69020: PUSH
69021: EMPTY
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: LIST
69028: LIST
69029: LIST
69030: LIST
69031: LIST
69032: LIST
69033: LIST
69034: LIST
69035: LIST
69036: LIST
69037: LIST
69038: LIST
69039: LIST
69040: LIST
69041: LIST
69042: LIST
69043: LIST
69044: LIST
69045: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69046: LD_ADDR_VAR 0 30
69050: PUSH
69051: LD_INT 0
69053: PUSH
69054: LD_INT 0
69056: PUSH
69057: EMPTY
69058: LIST
69059: LIST
69060: PUSH
69061: LD_INT 0
69063: PUSH
69064: LD_INT 1
69066: NEG
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 1
69074: PUSH
69075: LD_INT 0
69077: PUSH
69078: EMPTY
69079: LIST
69080: LIST
69081: PUSH
69082: LD_INT 1
69084: PUSH
69085: LD_INT 1
69087: PUSH
69088: EMPTY
69089: LIST
69090: LIST
69091: PUSH
69092: LD_INT 0
69094: PUSH
69095: LD_INT 1
69097: PUSH
69098: EMPTY
69099: LIST
69100: LIST
69101: PUSH
69102: LD_INT 1
69104: NEG
69105: PUSH
69106: LD_INT 0
69108: PUSH
69109: EMPTY
69110: LIST
69111: LIST
69112: PUSH
69113: LD_INT 1
69115: NEG
69116: PUSH
69117: LD_INT 1
69119: NEG
69120: PUSH
69121: EMPTY
69122: LIST
69123: LIST
69124: PUSH
69125: LD_INT 1
69127: NEG
69128: PUSH
69129: LD_INT 2
69131: NEG
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: PUSH
69137: LD_INT 0
69139: PUSH
69140: LD_INT 2
69142: NEG
69143: PUSH
69144: EMPTY
69145: LIST
69146: LIST
69147: PUSH
69148: LD_INT 1
69150: PUSH
69151: LD_INT 1
69153: NEG
69154: PUSH
69155: EMPTY
69156: LIST
69157: LIST
69158: PUSH
69159: LD_INT 2
69161: PUSH
69162: LD_INT 0
69164: PUSH
69165: EMPTY
69166: LIST
69167: LIST
69168: PUSH
69169: LD_INT 2
69171: PUSH
69172: LD_INT 1
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 2
69181: PUSH
69182: LD_INT 2
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 1
69191: PUSH
69192: LD_INT 2
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 1
69201: NEG
69202: PUSH
69203: LD_INT 1
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 2
69212: NEG
69213: PUSH
69214: LD_INT 0
69216: PUSH
69217: EMPTY
69218: LIST
69219: LIST
69220: PUSH
69221: LD_INT 2
69223: NEG
69224: PUSH
69225: LD_INT 1
69227: NEG
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 1
69235: NEG
69236: PUSH
69237: LD_INT 3
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: LD_INT 2
69250: NEG
69251: PUSH
69252: EMPTY
69253: LIST
69254: LIST
69255: PUSH
69256: LD_INT 3
69258: PUSH
69259: LD_INT 2
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 2
69268: PUSH
69269: LD_INT 3
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 2
69278: NEG
69279: PUSH
69280: LD_INT 1
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 3
69289: NEG
69290: PUSH
69291: LD_INT 1
69293: NEG
69294: PUSH
69295: EMPTY
69296: LIST
69297: LIST
69298: PUSH
69299: EMPTY
69300: LIST
69301: LIST
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: LIST
69317: LIST
69318: LIST
69319: LIST
69320: LIST
69321: LIST
69322: LIST
69323: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69324: LD_ADDR_VAR 0 31
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: LD_INT 0
69334: PUSH
69335: EMPTY
69336: LIST
69337: LIST
69338: PUSH
69339: LD_INT 0
69341: PUSH
69342: LD_INT 1
69344: NEG
69345: PUSH
69346: EMPTY
69347: LIST
69348: LIST
69349: PUSH
69350: LD_INT 1
69352: PUSH
69353: LD_INT 0
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 1
69362: PUSH
69363: LD_INT 1
69365: PUSH
69366: EMPTY
69367: LIST
69368: LIST
69369: PUSH
69370: LD_INT 0
69372: PUSH
69373: LD_INT 1
69375: PUSH
69376: EMPTY
69377: LIST
69378: LIST
69379: PUSH
69380: LD_INT 1
69382: NEG
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: EMPTY
69388: LIST
69389: LIST
69390: PUSH
69391: LD_INT 1
69393: NEG
69394: PUSH
69395: LD_INT 1
69397: NEG
69398: PUSH
69399: EMPTY
69400: LIST
69401: LIST
69402: PUSH
69403: LD_INT 1
69405: NEG
69406: PUSH
69407: LD_INT 2
69409: NEG
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 1
69417: PUSH
69418: LD_INT 1
69420: NEG
69421: PUSH
69422: EMPTY
69423: LIST
69424: LIST
69425: PUSH
69426: LD_INT 2
69428: PUSH
69429: LD_INT 0
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 2
69438: PUSH
69439: LD_INT 1
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 2
69448: PUSH
69449: LD_INT 2
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 1
69458: PUSH
69459: LD_INT 2
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 0
69468: PUSH
69469: LD_INT 2
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: LD_INT 1
69478: NEG
69479: PUSH
69480: LD_INT 1
69482: PUSH
69483: EMPTY
69484: LIST
69485: LIST
69486: PUSH
69487: LD_INT 2
69489: NEG
69490: PUSH
69491: LD_INT 1
69493: NEG
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 2
69501: NEG
69502: PUSH
69503: LD_INT 2
69505: NEG
69506: PUSH
69507: EMPTY
69508: LIST
69509: LIST
69510: PUSH
69511: LD_INT 2
69513: NEG
69514: PUSH
69515: LD_INT 3
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 2
69525: PUSH
69526: LD_INT 1
69528: NEG
69529: PUSH
69530: EMPTY
69531: LIST
69532: LIST
69533: PUSH
69534: LD_INT 3
69536: PUSH
69537: LD_INT 1
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 1
69546: PUSH
69547: LD_INT 3
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 1
69556: NEG
69557: PUSH
69558: LD_INT 2
69560: PUSH
69561: EMPTY
69562: LIST
69563: LIST
69564: PUSH
69565: LD_INT 3
69567: NEG
69568: PUSH
69569: LD_INT 2
69571: NEG
69572: PUSH
69573: EMPTY
69574: LIST
69575: LIST
69576: PUSH
69577: EMPTY
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69602: LD_ADDR_VAR 0 32
69606: PUSH
69607: LD_INT 0
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: EMPTY
69614: LIST
69615: LIST
69616: PUSH
69617: LD_INT 0
69619: PUSH
69620: LD_INT 1
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 1
69630: PUSH
69631: LD_INT 0
69633: PUSH
69634: EMPTY
69635: LIST
69636: LIST
69637: PUSH
69638: LD_INT 1
69640: PUSH
69641: LD_INT 1
69643: PUSH
69644: EMPTY
69645: LIST
69646: LIST
69647: PUSH
69648: LD_INT 0
69650: PUSH
69651: LD_INT 1
69653: PUSH
69654: EMPTY
69655: LIST
69656: LIST
69657: PUSH
69658: LD_INT 1
69660: NEG
69661: PUSH
69662: LD_INT 0
69664: PUSH
69665: EMPTY
69666: LIST
69667: LIST
69668: PUSH
69669: LD_INT 1
69671: NEG
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: PUSH
69677: EMPTY
69678: LIST
69679: LIST
69680: PUSH
69681: LD_INT 1
69683: NEG
69684: PUSH
69685: LD_INT 2
69687: NEG
69688: PUSH
69689: EMPTY
69690: LIST
69691: LIST
69692: PUSH
69693: LD_INT 0
69695: PUSH
69696: LD_INT 2
69698: NEG
69699: PUSH
69700: EMPTY
69701: LIST
69702: LIST
69703: PUSH
69704: LD_INT 1
69706: PUSH
69707: LD_INT 1
69709: NEG
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 2
69717: PUSH
69718: LD_INT 1
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 2
69727: PUSH
69728: LD_INT 2
69730: PUSH
69731: EMPTY
69732: LIST
69733: LIST
69734: PUSH
69735: LD_INT 1
69737: PUSH
69738: LD_INT 2
69740: PUSH
69741: EMPTY
69742: LIST
69743: LIST
69744: PUSH
69745: LD_INT 0
69747: PUSH
69748: LD_INT 2
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 1
69757: NEG
69758: PUSH
69759: LD_INT 1
69761: PUSH
69762: EMPTY
69763: LIST
69764: LIST
69765: PUSH
69766: LD_INT 2
69768: NEG
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 2
69779: NEG
69780: PUSH
69781: LD_INT 1
69783: NEG
69784: PUSH
69785: EMPTY
69786: LIST
69787: LIST
69788: PUSH
69789: LD_INT 1
69791: NEG
69792: PUSH
69793: LD_INT 3
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 1
69803: PUSH
69804: LD_INT 2
69806: NEG
69807: PUSH
69808: EMPTY
69809: LIST
69810: LIST
69811: PUSH
69812: LD_INT 3
69814: PUSH
69815: LD_INT 2
69817: PUSH
69818: EMPTY
69819: LIST
69820: LIST
69821: PUSH
69822: LD_INT 2
69824: PUSH
69825: LD_INT 3
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 2
69834: NEG
69835: PUSH
69836: LD_INT 1
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 3
69845: NEG
69846: PUSH
69847: LD_INT 1
69849: NEG
69850: PUSH
69851: EMPTY
69852: LIST
69853: LIST
69854: PUSH
69855: EMPTY
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: LIST
69866: LIST
69867: LIST
69868: LIST
69869: LIST
69870: LIST
69871: LIST
69872: LIST
69873: LIST
69874: LIST
69875: LIST
69876: LIST
69877: LIST
69878: LIST
69879: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69880: LD_ADDR_VAR 0 33
69884: PUSH
69885: LD_INT 0
69887: PUSH
69888: LD_INT 0
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 0
69897: PUSH
69898: LD_INT 1
69900: NEG
69901: PUSH
69902: EMPTY
69903: LIST
69904: LIST
69905: PUSH
69906: LD_INT 1
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 1
69918: PUSH
69919: LD_INT 1
69921: PUSH
69922: EMPTY
69923: LIST
69924: LIST
69925: PUSH
69926: LD_INT 0
69928: PUSH
69929: LD_INT 1
69931: PUSH
69932: EMPTY
69933: LIST
69934: LIST
69935: PUSH
69936: LD_INT 1
69938: NEG
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: EMPTY
69944: LIST
69945: LIST
69946: PUSH
69947: LD_INT 1
69949: NEG
69950: PUSH
69951: LD_INT 1
69953: NEG
69954: PUSH
69955: EMPTY
69956: LIST
69957: LIST
69958: PUSH
69959: LD_INT 1
69961: NEG
69962: PUSH
69963: LD_INT 2
69965: NEG
69966: PUSH
69967: EMPTY
69968: LIST
69969: LIST
69970: PUSH
69971: LD_INT 1
69973: PUSH
69974: LD_INT 1
69976: NEG
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 2
69984: PUSH
69985: LD_INT 0
69987: PUSH
69988: EMPTY
69989: LIST
69990: LIST
69991: PUSH
69992: LD_INT 2
69994: PUSH
69995: LD_INT 1
69997: PUSH
69998: EMPTY
69999: LIST
70000: LIST
70001: PUSH
70002: LD_INT 1
70004: PUSH
70005: LD_INT 2
70007: PUSH
70008: EMPTY
70009: LIST
70010: LIST
70011: PUSH
70012: LD_INT 0
70014: PUSH
70015: LD_INT 2
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 1
70024: NEG
70025: PUSH
70026: LD_INT 1
70028: PUSH
70029: EMPTY
70030: LIST
70031: LIST
70032: PUSH
70033: LD_INT 2
70035: NEG
70036: PUSH
70037: LD_INT 0
70039: PUSH
70040: EMPTY
70041: LIST
70042: LIST
70043: PUSH
70044: LD_INT 2
70046: NEG
70047: PUSH
70048: LD_INT 1
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 2
70058: NEG
70059: PUSH
70060: LD_INT 2
70062: NEG
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 2
70070: NEG
70071: PUSH
70072: LD_INT 3
70074: NEG
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 2
70082: PUSH
70083: LD_INT 1
70085: NEG
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 3
70093: PUSH
70094: LD_INT 1
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 1
70103: PUSH
70104: LD_INT 3
70106: PUSH
70107: EMPTY
70108: LIST
70109: LIST
70110: PUSH
70111: LD_INT 1
70113: NEG
70114: PUSH
70115: LD_INT 2
70117: PUSH
70118: EMPTY
70119: LIST
70120: LIST
70121: PUSH
70122: LD_INT 3
70124: NEG
70125: PUSH
70126: LD_INT 2
70128: NEG
70129: PUSH
70130: EMPTY
70131: LIST
70132: LIST
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: LIST
70138: LIST
70139: LIST
70140: LIST
70141: LIST
70142: LIST
70143: LIST
70144: LIST
70145: LIST
70146: LIST
70147: LIST
70148: LIST
70149: LIST
70150: LIST
70151: LIST
70152: LIST
70153: LIST
70154: LIST
70155: LIST
70156: LIST
70157: LIST
70158: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70159: LD_ADDR_VAR 0 34
70163: PUSH
70164: LD_INT 0
70166: PUSH
70167: LD_INT 0
70169: PUSH
70170: EMPTY
70171: LIST
70172: LIST
70173: PUSH
70174: LD_INT 0
70176: PUSH
70177: LD_INT 1
70179: NEG
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 1
70187: PUSH
70188: LD_INT 0
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 1
70197: PUSH
70198: LD_INT 1
70200: PUSH
70201: EMPTY
70202: LIST
70203: LIST
70204: PUSH
70205: LD_INT 0
70207: PUSH
70208: LD_INT 1
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 1
70217: NEG
70218: PUSH
70219: LD_INT 0
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: PUSH
70226: LD_INT 1
70228: NEG
70229: PUSH
70230: LD_INT 1
70232: NEG
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: PUSH
70238: LD_INT 1
70240: NEG
70241: PUSH
70242: LD_INT 2
70244: NEG
70245: PUSH
70246: EMPTY
70247: LIST
70248: LIST
70249: PUSH
70250: LD_INT 0
70252: PUSH
70253: LD_INT 2
70255: NEG
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: PUSH
70261: LD_INT 1
70263: PUSH
70264: LD_INT 1
70266: NEG
70267: PUSH
70268: EMPTY
70269: LIST
70270: LIST
70271: PUSH
70272: LD_INT 2
70274: PUSH
70275: LD_INT 1
70277: PUSH
70278: EMPTY
70279: LIST
70280: LIST
70281: PUSH
70282: LD_INT 2
70284: PUSH
70285: LD_INT 2
70287: PUSH
70288: EMPTY
70289: LIST
70290: LIST
70291: PUSH
70292: LD_INT 1
70294: PUSH
70295: LD_INT 2
70297: PUSH
70298: EMPTY
70299: LIST
70300: LIST
70301: PUSH
70302: LD_INT 1
70304: NEG
70305: PUSH
70306: LD_INT 1
70308: PUSH
70309: EMPTY
70310: LIST
70311: LIST
70312: PUSH
70313: LD_INT 2
70315: NEG
70316: PUSH
70317: LD_INT 0
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 2
70326: NEG
70327: PUSH
70328: LD_INT 1
70330: NEG
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 2
70338: NEG
70339: PUSH
70340: LD_INT 2
70342: NEG
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: LD_INT 1
70350: NEG
70351: PUSH
70352: LD_INT 3
70354: NEG
70355: PUSH
70356: EMPTY
70357: LIST
70358: LIST
70359: PUSH
70360: LD_INT 1
70362: PUSH
70363: LD_INT 2
70365: NEG
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 3
70373: PUSH
70374: LD_INT 2
70376: PUSH
70377: EMPTY
70378: LIST
70379: LIST
70380: PUSH
70381: LD_INT 2
70383: PUSH
70384: LD_INT 3
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 2
70393: NEG
70394: PUSH
70395: LD_INT 1
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 3
70404: NEG
70405: PUSH
70406: LD_INT 1
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: EMPTY
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: LIST
70431: LIST
70432: LIST
70433: LIST
70434: LIST
70435: LIST
70436: LIST
70437: LIST
70438: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70439: LD_ADDR_VAR 0 35
70443: PUSH
70444: LD_INT 0
70446: PUSH
70447: LD_INT 0
70449: PUSH
70450: EMPTY
70451: LIST
70452: LIST
70453: PUSH
70454: LD_INT 0
70456: PUSH
70457: LD_INT 1
70459: NEG
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 1
70467: PUSH
70468: LD_INT 0
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 1
70477: PUSH
70478: LD_INT 1
70480: PUSH
70481: EMPTY
70482: LIST
70483: LIST
70484: PUSH
70485: LD_INT 0
70487: PUSH
70488: LD_INT 1
70490: PUSH
70491: EMPTY
70492: LIST
70493: LIST
70494: PUSH
70495: LD_INT 1
70497: NEG
70498: PUSH
70499: LD_INT 0
70501: PUSH
70502: EMPTY
70503: LIST
70504: LIST
70505: PUSH
70506: LD_INT 1
70508: NEG
70509: PUSH
70510: LD_INT 1
70512: NEG
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 2
70520: PUSH
70521: LD_INT 1
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 2
70530: NEG
70531: PUSH
70532: LD_INT 1
70534: NEG
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70551: LD_ADDR_VAR 0 36
70555: PUSH
70556: LD_INT 0
70558: PUSH
70559: LD_INT 0
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: LD_INT 0
70568: PUSH
70569: LD_INT 1
70571: NEG
70572: PUSH
70573: EMPTY
70574: LIST
70575: LIST
70576: PUSH
70577: LD_INT 1
70579: PUSH
70580: LD_INT 0
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 1
70589: PUSH
70590: LD_INT 1
70592: PUSH
70593: EMPTY
70594: LIST
70595: LIST
70596: PUSH
70597: LD_INT 0
70599: PUSH
70600: LD_INT 1
70602: PUSH
70603: EMPTY
70604: LIST
70605: LIST
70606: PUSH
70607: LD_INT 1
70609: NEG
70610: PUSH
70611: LD_INT 0
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 1
70620: NEG
70621: PUSH
70622: LD_INT 1
70624: NEG
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 1
70632: NEG
70633: PUSH
70634: LD_INT 2
70636: NEG
70637: PUSH
70638: EMPTY
70639: LIST
70640: LIST
70641: PUSH
70642: LD_INT 1
70644: PUSH
70645: LD_INT 2
70647: PUSH
70648: EMPTY
70649: LIST
70650: LIST
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70663: LD_ADDR_VAR 0 37
70667: PUSH
70668: LD_INT 0
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: EMPTY
70675: LIST
70676: LIST
70677: PUSH
70678: LD_INT 0
70680: PUSH
70681: LD_INT 1
70683: NEG
70684: PUSH
70685: EMPTY
70686: LIST
70687: LIST
70688: PUSH
70689: LD_INT 1
70691: PUSH
70692: LD_INT 0
70694: PUSH
70695: EMPTY
70696: LIST
70697: LIST
70698: PUSH
70699: LD_INT 1
70701: PUSH
70702: LD_INT 1
70704: PUSH
70705: EMPTY
70706: LIST
70707: LIST
70708: PUSH
70709: LD_INT 0
70711: PUSH
70712: LD_INT 1
70714: PUSH
70715: EMPTY
70716: LIST
70717: LIST
70718: PUSH
70719: LD_INT 1
70721: NEG
70722: PUSH
70723: LD_INT 0
70725: PUSH
70726: EMPTY
70727: LIST
70728: LIST
70729: PUSH
70730: LD_INT 1
70732: NEG
70733: PUSH
70734: LD_INT 1
70736: NEG
70737: PUSH
70738: EMPTY
70739: LIST
70740: LIST
70741: PUSH
70742: LD_INT 1
70744: PUSH
70745: LD_INT 1
70747: NEG
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 1
70755: NEG
70756: PUSH
70757: LD_INT 1
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70775: LD_ADDR_VAR 0 38
70779: PUSH
70780: LD_INT 0
70782: PUSH
70783: LD_INT 0
70785: PUSH
70786: EMPTY
70787: LIST
70788: LIST
70789: PUSH
70790: LD_INT 0
70792: PUSH
70793: LD_INT 1
70795: NEG
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 1
70803: PUSH
70804: LD_INT 0
70806: PUSH
70807: EMPTY
70808: LIST
70809: LIST
70810: PUSH
70811: LD_INT 1
70813: PUSH
70814: LD_INT 1
70816: PUSH
70817: EMPTY
70818: LIST
70819: LIST
70820: PUSH
70821: LD_INT 0
70823: PUSH
70824: LD_INT 1
70826: PUSH
70827: EMPTY
70828: LIST
70829: LIST
70830: PUSH
70831: LD_INT 1
70833: NEG
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 1
70844: NEG
70845: PUSH
70846: LD_INT 1
70848: NEG
70849: PUSH
70850: EMPTY
70851: LIST
70852: LIST
70853: PUSH
70854: LD_INT 2
70856: PUSH
70857: LD_INT 1
70859: PUSH
70860: EMPTY
70861: LIST
70862: LIST
70863: PUSH
70864: LD_INT 2
70866: NEG
70867: PUSH
70868: LD_INT 1
70870: NEG
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: EMPTY
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70887: LD_ADDR_VAR 0 39
70891: PUSH
70892: LD_INT 0
70894: PUSH
70895: LD_INT 0
70897: PUSH
70898: EMPTY
70899: LIST
70900: LIST
70901: PUSH
70902: LD_INT 0
70904: PUSH
70905: LD_INT 1
70907: NEG
70908: PUSH
70909: EMPTY
70910: LIST
70911: LIST
70912: PUSH
70913: LD_INT 1
70915: PUSH
70916: LD_INT 0
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 1
70925: PUSH
70926: LD_INT 1
70928: PUSH
70929: EMPTY
70930: LIST
70931: LIST
70932: PUSH
70933: LD_INT 0
70935: PUSH
70936: LD_INT 1
70938: PUSH
70939: EMPTY
70940: LIST
70941: LIST
70942: PUSH
70943: LD_INT 1
70945: NEG
70946: PUSH
70947: LD_INT 0
70949: PUSH
70950: EMPTY
70951: LIST
70952: LIST
70953: PUSH
70954: LD_INT 1
70956: NEG
70957: PUSH
70958: LD_INT 1
70960: NEG
70961: PUSH
70962: EMPTY
70963: LIST
70964: LIST
70965: PUSH
70966: LD_INT 1
70968: NEG
70969: PUSH
70970: LD_INT 2
70972: NEG
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 1
70980: PUSH
70981: LD_INT 2
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: LIST
70992: LIST
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70999: LD_ADDR_VAR 0 40
71003: PUSH
71004: LD_INT 0
71006: PUSH
71007: LD_INT 0
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 0
71016: PUSH
71017: LD_INT 1
71019: NEG
71020: PUSH
71021: EMPTY
71022: LIST
71023: LIST
71024: PUSH
71025: LD_INT 1
71027: PUSH
71028: LD_INT 0
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: LD_INT 1
71040: PUSH
71041: EMPTY
71042: LIST
71043: LIST
71044: PUSH
71045: LD_INT 0
71047: PUSH
71048: LD_INT 1
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 1
71057: NEG
71058: PUSH
71059: LD_INT 0
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 1
71068: NEG
71069: PUSH
71070: LD_INT 1
71072: NEG
71073: PUSH
71074: EMPTY
71075: LIST
71076: LIST
71077: PUSH
71078: LD_INT 1
71080: PUSH
71081: LD_INT 1
71083: NEG
71084: PUSH
71085: EMPTY
71086: LIST
71087: LIST
71088: PUSH
71089: LD_INT 1
71091: NEG
71092: PUSH
71093: LD_INT 1
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71111: LD_ADDR_VAR 0 41
71115: PUSH
71116: LD_INT 0
71118: PUSH
71119: LD_INT 0
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 0
71128: PUSH
71129: LD_INT 1
71131: NEG
71132: PUSH
71133: EMPTY
71134: LIST
71135: LIST
71136: PUSH
71137: LD_INT 1
71139: PUSH
71140: LD_INT 0
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 1
71149: PUSH
71150: LD_INT 1
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 0
71159: PUSH
71160: LD_INT 1
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 1
71169: NEG
71170: PUSH
71171: LD_INT 0
71173: PUSH
71174: EMPTY
71175: LIST
71176: LIST
71177: PUSH
71178: LD_INT 1
71180: NEG
71181: PUSH
71182: LD_INT 1
71184: NEG
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 1
71192: NEG
71193: PUSH
71194: LD_INT 2
71196: NEG
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 1
71204: PUSH
71205: LD_INT 1
71207: NEG
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 2
71215: PUSH
71216: LD_INT 0
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 2
71225: PUSH
71226: LD_INT 1
71228: PUSH
71229: EMPTY
71230: LIST
71231: LIST
71232: PUSH
71233: LD_INT 2
71235: PUSH
71236: LD_INT 2
71238: PUSH
71239: EMPTY
71240: LIST
71241: LIST
71242: PUSH
71243: LD_INT 1
71245: PUSH
71246: LD_INT 2
71248: PUSH
71249: EMPTY
71250: LIST
71251: LIST
71252: PUSH
71253: LD_INT 1
71255: NEG
71256: PUSH
71257: LD_INT 1
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 2
71266: NEG
71267: PUSH
71268: LD_INT 0
71270: PUSH
71271: EMPTY
71272: LIST
71273: LIST
71274: PUSH
71275: LD_INT 2
71277: NEG
71278: PUSH
71279: LD_INT 1
71281: NEG
71282: PUSH
71283: EMPTY
71284: LIST
71285: LIST
71286: PUSH
71287: LD_INT 2
71289: NEG
71290: PUSH
71291: LD_INT 2
71293: NEG
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 2
71301: NEG
71302: PUSH
71303: LD_INT 3
71305: NEG
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 2
71313: PUSH
71314: LD_INT 1
71316: NEG
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 3
71324: PUSH
71325: LD_INT 0
71327: PUSH
71328: EMPTY
71329: LIST
71330: LIST
71331: PUSH
71332: LD_INT 3
71334: PUSH
71335: LD_INT 1
71337: PUSH
71338: EMPTY
71339: LIST
71340: LIST
71341: PUSH
71342: LD_INT 3
71344: PUSH
71345: LD_INT 2
71347: PUSH
71348: EMPTY
71349: LIST
71350: LIST
71351: PUSH
71352: LD_INT 3
71354: PUSH
71355: LD_INT 3
71357: PUSH
71358: EMPTY
71359: LIST
71360: LIST
71361: PUSH
71362: LD_INT 2
71364: PUSH
71365: LD_INT 3
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 2
71374: NEG
71375: PUSH
71376: LD_INT 1
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 3
71385: NEG
71386: PUSH
71387: LD_INT 0
71389: PUSH
71390: EMPTY
71391: LIST
71392: LIST
71393: PUSH
71394: LD_INT 3
71396: NEG
71397: PUSH
71398: LD_INT 1
71400: NEG
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 3
71408: NEG
71409: PUSH
71410: LD_INT 2
71412: NEG
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 3
71420: NEG
71421: PUSH
71422: LD_INT 3
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: EMPTY
71431: LIST
71432: LIST
71433: LIST
71434: LIST
71435: LIST
71436: LIST
71437: LIST
71438: LIST
71439: LIST
71440: LIST
71441: LIST
71442: LIST
71443: LIST
71444: LIST
71445: LIST
71446: LIST
71447: LIST
71448: LIST
71449: LIST
71450: LIST
71451: LIST
71452: LIST
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71461: LD_ADDR_VAR 0 42
71465: PUSH
71466: LD_INT 0
71468: PUSH
71469: LD_INT 0
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 0
71478: PUSH
71479: LD_INT 1
71481: NEG
71482: PUSH
71483: EMPTY
71484: LIST
71485: LIST
71486: PUSH
71487: LD_INT 1
71489: PUSH
71490: LD_INT 0
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 1
71499: PUSH
71500: LD_INT 1
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: LD_INT 0
71509: PUSH
71510: LD_INT 1
71512: PUSH
71513: EMPTY
71514: LIST
71515: LIST
71516: PUSH
71517: LD_INT 1
71519: NEG
71520: PUSH
71521: LD_INT 0
71523: PUSH
71524: EMPTY
71525: LIST
71526: LIST
71527: PUSH
71528: LD_INT 1
71530: NEG
71531: PUSH
71532: LD_INT 1
71534: NEG
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 1
71542: NEG
71543: PUSH
71544: LD_INT 2
71546: NEG
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 0
71554: PUSH
71555: LD_INT 2
71557: NEG
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 1
71565: PUSH
71566: LD_INT 1
71568: NEG
71569: PUSH
71570: EMPTY
71571: LIST
71572: LIST
71573: PUSH
71574: LD_INT 2
71576: PUSH
71577: LD_INT 1
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 2
71586: PUSH
71587: LD_INT 2
71589: PUSH
71590: EMPTY
71591: LIST
71592: LIST
71593: PUSH
71594: LD_INT 1
71596: PUSH
71597: LD_INT 2
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 0
71606: PUSH
71607: LD_INT 2
71609: PUSH
71610: EMPTY
71611: LIST
71612: LIST
71613: PUSH
71614: LD_INT 1
71616: NEG
71617: PUSH
71618: LD_INT 1
71620: PUSH
71621: EMPTY
71622: LIST
71623: LIST
71624: PUSH
71625: LD_INT 2
71627: NEG
71628: PUSH
71629: LD_INT 1
71631: NEG
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 2
71639: NEG
71640: PUSH
71641: LD_INT 2
71643: NEG
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 2
71651: NEG
71652: PUSH
71653: LD_INT 3
71655: NEG
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 1
71663: NEG
71664: PUSH
71665: LD_INT 3
71667: NEG
71668: PUSH
71669: EMPTY
71670: LIST
71671: LIST
71672: PUSH
71673: LD_INT 0
71675: PUSH
71676: LD_INT 3
71678: NEG
71679: PUSH
71680: EMPTY
71681: LIST
71682: LIST
71683: PUSH
71684: LD_INT 1
71686: PUSH
71687: LD_INT 2
71689: NEG
71690: PUSH
71691: EMPTY
71692: LIST
71693: LIST
71694: PUSH
71695: LD_INT 3
71697: PUSH
71698: LD_INT 2
71700: PUSH
71701: EMPTY
71702: LIST
71703: LIST
71704: PUSH
71705: LD_INT 3
71707: PUSH
71708: LD_INT 3
71710: PUSH
71711: EMPTY
71712: LIST
71713: LIST
71714: PUSH
71715: LD_INT 2
71717: PUSH
71718: LD_INT 3
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 1
71727: PUSH
71728: LD_INT 3
71730: PUSH
71731: EMPTY
71732: LIST
71733: LIST
71734: PUSH
71735: LD_INT 0
71737: PUSH
71738: LD_INT 3
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PUSH
71745: LD_INT 1
71747: NEG
71748: PUSH
71749: LD_INT 2
71751: PUSH
71752: EMPTY
71753: LIST
71754: LIST
71755: PUSH
71756: LD_INT 3
71758: NEG
71759: PUSH
71760: LD_INT 2
71762: NEG
71763: PUSH
71764: EMPTY
71765: LIST
71766: LIST
71767: PUSH
71768: LD_INT 3
71770: NEG
71771: PUSH
71772: LD_INT 3
71774: NEG
71775: PUSH
71776: EMPTY
71777: LIST
71778: LIST
71779: PUSH
71780: EMPTY
71781: LIST
71782: LIST
71783: LIST
71784: LIST
71785: LIST
71786: LIST
71787: LIST
71788: LIST
71789: LIST
71790: LIST
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71811: LD_ADDR_VAR 0 43
71815: PUSH
71816: LD_INT 0
71818: PUSH
71819: LD_INT 0
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 0
71828: PUSH
71829: LD_INT 1
71831: NEG
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 1
71839: PUSH
71840: LD_INT 0
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 1
71849: PUSH
71850: LD_INT 1
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: LD_INT 1
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 1
71869: NEG
71870: PUSH
71871: LD_INT 0
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 1
71880: NEG
71881: PUSH
71882: LD_INT 1
71884: NEG
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 1
71892: NEG
71893: PUSH
71894: LD_INT 2
71896: NEG
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 0
71904: PUSH
71905: LD_INT 2
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 1
71915: PUSH
71916: LD_INT 1
71918: NEG
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 2
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: LD_INT 2
71936: PUSH
71937: LD_INT 1
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 1
71946: PUSH
71947: LD_INT 2
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 0
71956: PUSH
71957: LD_INT 2
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 1
71966: NEG
71967: PUSH
71968: LD_INT 1
71970: PUSH
71971: EMPTY
71972: LIST
71973: LIST
71974: PUSH
71975: LD_INT 2
71977: NEG
71978: PUSH
71979: LD_INT 0
71981: PUSH
71982: EMPTY
71983: LIST
71984: LIST
71985: PUSH
71986: LD_INT 2
71988: NEG
71989: PUSH
71990: LD_INT 1
71992: NEG
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 1
72000: NEG
72001: PUSH
72002: LD_INT 3
72004: NEG
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 0
72012: PUSH
72013: LD_INT 3
72015: NEG
72016: PUSH
72017: EMPTY
72018: LIST
72019: LIST
72020: PUSH
72021: LD_INT 1
72023: PUSH
72024: LD_INT 2
72026: NEG
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 2
72034: PUSH
72035: LD_INT 1
72037: NEG
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 3
72045: PUSH
72046: LD_INT 0
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 3
72055: PUSH
72056: LD_INT 1
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 1
72065: PUSH
72066: LD_INT 3
72068: PUSH
72069: EMPTY
72070: LIST
72071: LIST
72072: PUSH
72073: LD_INT 0
72075: PUSH
72076: LD_INT 3
72078: PUSH
72079: EMPTY
72080: LIST
72081: LIST
72082: PUSH
72083: LD_INT 1
72085: NEG
72086: PUSH
72087: LD_INT 2
72089: PUSH
72090: EMPTY
72091: LIST
72092: LIST
72093: PUSH
72094: LD_INT 2
72096: NEG
72097: PUSH
72098: LD_INT 1
72100: PUSH
72101: EMPTY
72102: LIST
72103: LIST
72104: PUSH
72105: LD_INT 3
72107: NEG
72108: PUSH
72109: LD_INT 0
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 3
72118: NEG
72119: PUSH
72120: LD_INT 1
72122: NEG
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: LIST
72132: LIST
72133: LIST
72134: LIST
72135: LIST
72136: LIST
72137: LIST
72138: LIST
72139: LIST
72140: LIST
72141: LIST
72142: LIST
72143: LIST
72144: LIST
72145: LIST
72146: LIST
72147: LIST
72148: LIST
72149: LIST
72150: LIST
72151: LIST
72152: LIST
72153: LIST
72154: LIST
72155: LIST
72156: LIST
72157: LIST
72158: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72159: LD_ADDR_VAR 0 44
72163: PUSH
72164: LD_INT 0
72166: PUSH
72167: LD_INT 0
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 0
72176: PUSH
72177: LD_INT 1
72179: NEG
72180: PUSH
72181: EMPTY
72182: LIST
72183: LIST
72184: PUSH
72185: LD_INT 1
72187: PUSH
72188: LD_INT 0
72190: PUSH
72191: EMPTY
72192: LIST
72193: LIST
72194: PUSH
72195: LD_INT 1
72197: PUSH
72198: LD_INT 1
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 0
72207: PUSH
72208: LD_INT 1
72210: PUSH
72211: EMPTY
72212: LIST
72213: LIST
72214: PUSH
72215: LD_INT 1
72217: NEG
72218: PUSH
72219: LD_INT 0
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 1
72228: NEG
72229: PUSH
72230: LD_INT 1
72232: NEG
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: PUSH
72238: LD_INT 1
72240: NEG
72241: PUSH
72242: LD_INT 2
72244: NEG
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 1
72252: PUSH
72253: LD_INT 1
72255: NEG
72256: PUSH
72257: EMPTY
72258: LIST
72259: LIST
72260: PUSH
72261: LD_INT 2
72263: PUSH
72264: LD_INT 0
72266: PUSH
72267: EMPTY
72268: LIST
72269: LIST
72270: PUSH
72271: LD_INT 2
72273: PUSH
72274: LD_INT 1
72276: PUSH
72277: EMPTY
72278: LIST
72279: LIST
72280: PUSH
72281: LD_INT 2
72283: PUSH
72284: LD_INT 2
72286: PUSH
72287: EMPTY
72288: LIST
72289: LIST
72290: PUSH
72291: LD_INT 1
72293: PUSH
72294: LD_INT 2
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: LD_INT 1
72303: NEG
72304: PUSH
72305: LD_INT 1
72307: PUSH
72308: EMPTY
72309: LIST
72310: LIST
72311: PUSH
72312: LD_INT 2
72314: NEG
72315: PUSH
72316: LD_INT 0
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 2
72325: NEG
72326: PUSH
72327: LD_INT 1
72329: NEG
72330: PUSH
72331: EMPTY
72332: LIST
72333: LIST
72334: PUSH
72335: LD_INT 2
72337: NEG
72338: PUSH
72339: LD_INT 2
72341: NEG
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: PUSH
72347: LD_INT 2
72349: NEG
72350: PUSH
72351: LD_INT 3
72353: NEG
72354: PUSH
72355: EMPTY
72356: LIST
72357: LIST
72358: PUSH
72359: LD_INT 2
72361: PUSH
72362: LD_INT 1
72364: NEG
72365: PUSH
72366: EMPTY
72367: LIST
72368: LIST
72369: PUSH
72370: LD_INT 3
72372: PUSH
72373: LD_INT 0
72375: PUSH
72376: EMPTY
72377: LIST
72378: LIST
72379: PUSH
72380: LD_INT 3
72382: PUSH
72383: LD_INT 1
72385: PUSH
72386: EMPTY
72387: LIST
72388: LIST
72389: PUSH
72390: LD_INT 3
72392: PUSH
72393: LD_INT 2
72395: PUSH
72396: EMPTY
72397: LIST
72398: LIST
72399: PUSH
72400: LD_INT 3
72402: PUSH
72403: LD_INT 3
72405: PUSH
72406: EMPTY
72407: LIST
72408: LIST
72409: PUSH
72410: LD_INT 2
72412: PUSH
72413: LD_INT 3
72415: PUSH
72416: EMPTY
72417: LIST
72418: LIST
72419: PUSH
72420: LD_INT 2
72422: NEG
72423: PUSH
72424: LD_INT 1
72426: PUSH
72427: EMPTY
72428: LIST
72429: LIST
72430: PUSH
72431: LD_INT 3
72433: NEG
72434: PUSH
72435: LD_INT 0
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PUSH
72442: LD_INT 3
72444: NEG
72445: PUSH
72446: LD_INT 1
72448: NEG
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 3
72456: NEG
72457: PUSH
72458: LD_INT 2
72460: NEG
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: PUSH
72466: LD_INT 3
72468: NEG
72469: PUSH
72470: LD_INT 3
72472: NEG
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: LIST
72482: LIST
72483: LIST
72484: LIST
72485: LIST
72486: LIST
72487: LIST
72488: LIST
72489: LIST
72490: LIST
72491: LIST
72492: LIST
72493: LIST
72494: LIST
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72509: LD_ADDR_VAR 0 45
72513: PUSH
72514: LD_INT 0
72516: PUSH
72517: LD_INT 0
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 0
72526: PUSH
72527: LD_INT 1
72529: NEG
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 1
72537: PUSH
72538: LD_INT 0
72540: PUSH
72541: EMPTY
72542: LIST
72543: LIST
72544: PUSH
72545: LD_INT 1
72547: PUSH
72548: LD_INT 1
72550: PUSH
72551: EMPTY
72552: LIST
72553: LIST
72554: PUSH
72555: LD_INT 0
72557: PUSH
72558: LD_INT 1
72560: PUSH
72561: EMPTY
72562: LIST
72563: LIST
72564: PUSH
72565: LD_INT 1
72567: NEG
72568: PUSH
72569: LD_INT 0
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 1
72578: NEG
72579: PUSH
72580: LD_INT 1
72582: NEG
72583: PUSH
72584: EMPTY
72585: LIST
72586: LIST
72587: PUSH
72588: LD_INT 1
72590: NEG
72591: PUSH
72592: LD_INT 2
72594: NEG
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 0
72602: PUSH
72603: LD_INT 2
72605: NEG
72606: PUSH
72607: EMPTY
72608: LIST
72609: LIST
72610: PUSH
72611: LD_INT 1
72613: PUSH
72614: LD_INT 1
72616: NEG
72617: PUSH
72618: EMPTY
72619: LIST
72620: LIST
72621: PUSH
72622: LD_INT 2
72624: PUSH
72625: LD_INT 1
72627: PUSH
72628: EMPTY
72629: LIST
72630: LIST
72631: PUSH
72632: LD_INT 2
72634: PUSH
72635: LD_INT 2
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: PUSH
72642: LD_INT 1
72644: PUSH
72645: LD_INT 2
72647: PUSH
72648: EMPTY
72649: LIST
72650: LIST
72651: PUSH
72652: LD_INT 0
72654: PUSH
72655: LD_INT 2
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: LD_INT 1
72664: NEG
72665: PUSH
72666: LD_INT 1
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 2
72675: NEG
72676: PUSH
72677: LD_INT 1
72679: NEG
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: LD_INT 2
72687: NEG
72688: PUSH
72689: LD_INT 2
72691: NEG
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 2
72699: NEG
72700: PUSH
72701: LD_INT 3
72703: NEG
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 1
72711: NEG
72712: PUSH
72713: LD_INT 3
72715: NEG
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 0
72723: PUSH
72724: LD_INT 3
72726: NEG
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 1
72734: PUSH
72735: LD_INT 2
72737: NEG
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 3
72745: PUSH
72746: LD_INT 2
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PUSH
72753: LD_INT 3
72755: PUSH
72756: LD_INT 3
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 2
72765: PUSH
72766: LD_INT 3
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 1
72775: PUSH
72776: LD_INT 3
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 0
72785: PUSH
72786: LD_INT 3
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 1
72795: NEG
72796: PUSH
72797: LD_INT 2
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: LD_INT 3
72806: NEG
72807: PUSH
72808: LD_INT 2
72810: NEG
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PUSH
72816: LD_INT 3
72818: NEG
72819: PUSH
72820: LD_INT 3
72822: NEG
72823: PUSH
72824: EMPTY
72825: LIST
72826: LIST
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: LIST
72832: LIST
72833: LIST
72834: LIST
72835: LIST
72836: LIST
72837: LIST
72838: LIST
72839: LIST
72840: LIST
72841: LIST
72842: LIST
72843: LIST
72844: LIST
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72859: LD_ADDR_VAR 0 46
72863: PUSH
72864: LD_INT 0
72866: PUSH
72867: LD_INT 0
72869: PUSH
72870: EMPTY
72871: LIST
72872: LIST
72873: PUSH
72874: LD_INT 0
72876: PUSH
72877: LD_INT 1
72879: NEG
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: PUSH
72885: LD_INT 1
72887: PUSH
72888: LD_INT 0
72890: PUSH
72891: EMPTY
72892: LIST
72893: LIST
72894: PUSH
72895: LD_INT 1
72897: PUSH
72898: LD_INT 1
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 0
72907: PUSH
72908: LD_INT 1
72910: PUSH
72911: EMPTY
72912: LIST
72913: LIST
72914: PUSH
72915: LD_INT 1
72917: NEG
72918: PUSH
72919: LD_INT 0
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 1
72928: NEG
72929: PUSH
72930: LD_INT 1
72932: NEG
72933: PUSH
72934: EMPTY
72935: LIST
72936: LIST
72937: PUSH
72938: LD_INT 1
72940: NEG
72941: PUSH
72942: LD_INT 2
72944: NEG
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: LD_INT 0
72952: PUSH
72953: LD_INT 2
72955: NEG
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 1
72963: PUSH
72964: LD_INT 1
72966: NEG
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 2
72974: PUSH
72975: LD_INT 0
72977: PUSH
72978: EMPTY
72979: LIST
72980: LIST
72981: PUSH
72982: LD_INT 2
72984: PUSH
72985: LD_INT 1
72987: PUSH
72988: EMPTY
72989: LIST
72990: LIST
72991: PUSH
72992: LD_INT 1
72994: PUSH
72995: LD_INT 2
72997: PUSH
72998: EMPTY
72999: LIST
73000: LIST
73001: PUSH
73002: LD_INT 0
73004: PUSH
73005: LD_INT 2
73007: PUSH
73008: EMPTY
73009: LIST
73010: LIST
73011: PUSH
73012: LD_INT 1
73014: NEG
73015: PUSH
73016: LD_INT 1
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: PUSH
73023: LD_INT 2
73025: NEG
73026: PUSH
73027: LD_INT 0
73029: PUSH
73030: EMPTY
73031: LIST
73032: LIST
73033: PUSH
73034: LD_INT 2
73036: NEG
73037: PUSH
73038: LD_INT 1
73040: NEG
73041: PUSH
73042: EMPTY
73043: LIST
73044: LIST
73045: PUSH
73046: LD_INT 1
73048: NEG
73049: PUSH
73050: LD_INT 3
73052: NEG
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 0
73060: PUSH
73061: LD_INT 3
73063: NEG
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 1
73071: PUSH
73072: LD_INT 2
73074: NEG
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 2
73082: PUSH
73083: LD_INT 1
73085: NEG
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 3
73093: PUSH
73094: LD_INT 0
73096: PUSH
73097: EMPTY
73098: LIST
73099: LIST
73100: PUSH
73101: LD_INT 3
73103: PUSH
73104: LD_INT 1
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 1
73113: PUSH
73114: LD_INT 3
73116: PUSH
73117: EMPTY
73118: LIST
73119: LIST
73120: PUSH
73121: LD_INT 0
73123: PUSH
73124: LD_INT 3
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: LD_INT 1
73133: NEG
73134: PUSH
73135: LD_INT 2
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: LD_INT 2
73144: NEG
73145: PUSH
73146: LD_INT 1
73148: PUSH
73149: EMPTY
73150: LIST
73151: LIST
73152: PUSH
73153: LD_INT 3
73155: NEG
73156: PUSH
73157: LD_INT 0
73159: PUSH
73160: EMPTY
73161: LIST
73162: LIST
73163: PUSH
73164: LD_INT 3
73166: NEG
73167: PUSH
73168: LD_INT 1
73170: NEG
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73207: LD_ADDR_VAR 0 47
73211: PUSH
73212: LD_INT 0
73214: PUSH
73215: LD_INT 0
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PUSH
73222: LD_INT 0
73224: PUSH
73225: LD_INT 1
73227: NEG
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: LD_INT 1
73235: PUSH
73236: LD_INT 0
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 1
73245: PUSH
73246: LD_INT 1
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 0
73255: PUSH
73256: LD_INT 1
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 1
73265: NEG
73266: PUSH
73267: LD_INT 0
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 1
73276: NEG
73277: PUSH
73278: LD_INT 1
73280: NEG
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 1
73288: NEG
73289: PUSH
73290: LD_INT 2
73292: NEG
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 0
73300: PUSH
73301: LD_INT 2
73303: NEG
73304: PUSH
73305: EMPTY
73306: LIST
73307: LIST
73308: PUSH
73309: LD_INT 1
73311: PUSH
73312: LD_INT 1
73314: NEG
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 2
73322: NEG
73323: PUSH
73324: LD_INT 1
73326: NEG
73327: PUSH
73328: EMPTY
73329: LIST
73330: LIST
73331: PUSH
73332: LD_INT 2
73334: NEG
73335: PUSH
73336: LD_INT 2
73338: NEG
73339: PUSH
73340: EMPTY
73341: LIST
73342: LIST
73343: PUSH
73344: EMPTY
73345: LIST
73346: LIST
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73358: LD_ADDR_VAR 0 48
73362: PUSH
73363: LD_INT 0
73365: PUSH
73366: LD_INT 0
73368: PUSH
73369: EMPTY
73370: LIST
73371: LIST
73372: PUSH
73373: LD_INT 0
73375: PUSH
73376: LD_INT 1
73378: NEG
73379: PUSH
73380: EMPTY
73381: LIST
73382: LIST
73383: PUSH
73384: LD_INT 1
73386: PUSH
73387: LD_INT 0
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PUSH
73394: LD_INT 1
73396: PUSH
73397: LD_INT 1
73399: PUSH
73400: EMPTY
73401: LIST
73402: LIST
73403: PUSH
73404: LD_INT 0
73406: PUSH
73407: LD_INT 1
73409: PUSH
73410: EMPTY
73411: LIST
73412: LIST
73413: PUSH
73414: LD_INT 1
73416: NEG
73417: PUSH
73418: LD_INT 0
73420: PUSH
73421: EMPTY
73422: LIST
73423: LIST
73424: PUSH
73425: LD_INT 1
73427: NEG
73428: PUSH
73429: LD_INT 1
73431: NEG
73432: PUSH
73433: EMPTY
73434: LIST
73435: LIST
73436: PUSH
73437: LD_INT 1
73439: NEG
73440: PUSH
73441: LD_INT 2
73443: NEG
73444: PUSH
73445: EMPTY
73446: LIST
73447: LIST
73448: PUSH
73449: LD_INT 0
73451: PUSH
73452: LD_INT 2
73454: NEG
73455: PUSH
73456: EMPTY
73457: LIST
73458: LIST
73459: PUSH
73460: LD_INT 1
73462: PUSH
73463: LD_INT 1
73465: NEG
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 2
73473: PUSH
73474: LD_INT 0
73476: PUSH
73477: EMPTY
73478: LIST
73479: LIST
73480: PUSH
73481: LD_INT 2
73483: PUSH
73484: LD_INT 1
73486: PUSH
73487: EMPTY
73488: LIST
73489: LIST
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: LIST
73495: LIST
73496: LIST
73497: LIST
73498: LIST
73499: LIST
73500: LIST
73501: LIST
73502: LIST
73503: LIST
73504: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73505: LD_ADDR_VAR 0 49
73509: PUSH
73510: LD_INT 0
73512: PUSH
73513: LD_INT 0
73515: PUSH
73516: EMPTY
73517: LIST
73518: LIST
73519: PUSH
73520: LD_INT 0
73522: PUSH
73523: LD_INT 1
73525: NEG
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 1
73533: PUSH
73534: LD_INT 0
73536: PUSH
73537: EMPTY
73538: LIST
73539: LIST
73540: PUSH
73541: LD_INT 1
73543: PUSH
73544: LD_INT 1
73546: PUSH
73547: EMPTY
73548: LIST
73549: LIST
73550: PUSH
73551: LD_INT 0
73553: PUSH
73554: LD_INT 1
73556: PUSH
73557: EMPTY
73558: LIST
73559: LIST
73560: PUSH
73561: LD_INT 1
73563: NEG
73564: PUSH
73565: LD_INT 0
73567: PUSH
73568: EMPTY
73569: LIST
73570: LIST
73571: PUSH
73572: LD_INT 1
73574: NEG
73575: PUSH
73576: LD_INT 1
73578: NEG
73579: PUSH
73580: EMPTY
73581: LIST
73582: LIST
73583: PUSH
73584: LD_INT 1
73586: PUSH
73587: LD_INT 1
73589: NEG
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 2
73597: PUSH
73598: LD_INT 0
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PUSH
73605: LD_INT 2
73607: PUSH
73608: LD_INT 1
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: PUSH
73615: LD_INT 2
73617: PUSH
73618: LD_INT 2
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 1
73627: PUSH
73628: LD_INT 2
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: EMPTY
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73649: LD_ADDR_VAR 0 50
73653: PUSH
73654: LD_INT 0
73656: PUSH
73657: LD_INT 0
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 0
73666: PUSH
73667: LD_INT 1
73669: NEG
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PUSH
73675: LD_INT 1
73677: PUSH
73678: LD_INT 0
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 1
73687: PUSH
73688: LD_INT 1
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: LD_INT 0
73697: PUSH
73698: LD_INT 1
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 1
73707: NEG
73708: PUSH
73709: LD_INT 0
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 1
73718: NEG
73719: PUSH
73720: LD_INT 1
73722: NEG
73723: PUSH
73724: EMPTY
73725: LIST
73726: LIST
73727: PUSH
73728: LD_INT 2
73730: PUSH
73731: LD_INT 1
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: PUSH
73738: LD_INT 2
73740: PUSH
73741: LD_INT 2
73743: PUSH
73744: EMPTY
73745: LIST
73746: LIST
73747: PUSH
73748: LD_INT 1
73750: PUSH
73751: LD_INT 2
73753: PUSH
73754: EMPTY
73755: LIST
73756: LIST
73757: PUSH
73758: LD_INT 0
73760: PUSH
73761: LD_INT 2
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 1
73770: NEG
73771: PUSH
73772: LD_INT 1
73774: PUSH
73775: EMPTY
73776: LIST
73777: LIST
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: LIST
73783: LIST
73784: LIST
73785: LIST
73786: LIST
73787: LIST
73788: LIST
73789: LIST
73790: LIST
73791: LIST
73792: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73793: LD_ADDR_VAR 0 51
73797: PUSH
73798: LD_INT 0
73800: PUSH
73801: LD_INT 0
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: LD_INT 0
73810: PUSH
73811: LD_INT 1
73813: NEG
73814: PUSH
73815: EMPTY
73816: LIST
73817: LIST
73818: PUSH
73819: LD_INT 1
73821: PUSH
73822: LD_INT 0
73824: PUSH
73825: EMPTY
73826: LIST
73827: LIST
73828: PUSH
73829: LD_INT 1
73831: PUSH
73832: LD_INT 1
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: LD_INT 0
73841: PUSH
73842: LD_INT 1
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PUSH
73849: LD_INT 1
73851: NEG
73852: PUSH
73853: LD_INT 0
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 1
73862: NEG
73863: PUSH
73864: LD_INT 1
73866: NEG
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 1
73874: PUSH
73875: LD_INT 2
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: PUSH
73882: LD_INT 0
73884: PUSH
73885: LD_INT 2
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: LD_INT 1
73894: NEG
73895: PUSH
73896: LD_INT 1
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: PUSH
73903: LD_INT 2
73905: NEG
73906: PUSH
73907: LD_INT 0
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: LD_INT 2
73916: NEG
73917: PUSH
73918: LD_INT 1
73920: NEG
73921: PUSH
73922: EMPTY
73923: LIST
73924: LIST
73925: PUSH
73926: EMPTY
73927: LIST
73928: LIST
73929: LIST
73930: LIST
73931: LIST
73932: LIST
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: LIST
73938: LIST
73939: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73940: LD_ADDR_VAR 0 52
73944: PUSH
73945: LD_INT 0
73947: PUSH
73948: LD_INT 0
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: PUSH
73955: LD_INT 0
73957: PUSH
73958: LD_INT 1
73960: NEG
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 1
73968: PUSH
73969: LD_INT 0
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: LD_INT 1
73978: PUSH
73979: LD_INT 1
73981: PUSH
73982: EMPTY
73983: LIST
73984: LIST
73985: PUSH
73986: LD_INT 0
73988: PUSH
73989: LD_INT 1
73991: PUSH
73992: EMPTY
73993: LIST
73994: LIST
73995: PUSH
73996: LD_INT 1
73998: NEG
73999: PUSH
74000: LD_INT 0
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 1
74009: NEG
74010: PUSH
74011: LD_INT 1
74013: NEG
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 1
74021: NEG
74022: PUSH
74023: LD_INT 2
74025: NEG
74026: PUSH
74027: EMPTY
74028: LIST
74029: LIST
74030: PUSH
74031: LD_INT 1
74033: NEG
74034: PUSH
74035: LD_INT 1
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: PUSH
74042: LD_INT 2
74044: NEG
74045: PUSH
74046: LD_INT 0
74048: PUSH
74049: EMPTY
74050: LIST
74051: LIST
74052: PUSH
74053: LD_INT 2
74055: NEG
74056: PUSH
74057: LD_INT 1
74059: NEG
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 2
74067: NEG
74068: PUSH
74069: LD_INT 2
74071: NEG
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: EMPTY
74078: LIST
74079: LIST
74080: LIST
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: LIST
74089: LIST
74090: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74091: LD_ADDR_VAR 0 53
74095: PUSH
74096: LD_INT 0
74098: PUSH
74099: LD_INT 0
74101: PUSH
74102: EMPTY
74103: LIST
74104: LIST
74105: PUSH
74106: LD_INT 0
74108: PUSH
74109: LD_INT 1
74111: NEG
74112: PUSH
74113: EMPTY
74114: LIST
74115: LIST
74116: PUSH
74117: LD_INT 1
74119: PUSH
74120: LD_INT 0
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 1
74129: PUSH
74130: LD_INT 1
74132: PUSH
74133: EMPTY
74134: LIST
74135: LIST
74136: PUSH
74137: LD_INT 0
74139: PUSH
74140: LD_INT 1
74142: PUSH
74143: EMPTY
74144: LIST
74145: LIST
74146: PUSH
74147: LD_INT 1
74149: NEG
74150: PUSH
74151: LD_INT 0
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 1
74160: NEG
74161: PUSH
74162: LD_INT 1
74164: NEG
74165: PUSH
74166: EMPTY
74167: LIST
74168: LIST
74169: PUSH
74170: LD_INT 1
74172: NEG
74173: PUSH
74174: LD_INT 2
74176: NEG
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: PUSH
74182: LD_INT 0
74184: PUSH
74185: LD_INT 2
74187: NEG
74188: PUSH
74189: EMPTY
74190: LIST
74191: LIST
74192: PUSH
74193: LD_INT 1
74195: PUSH
74196: LD_INT 1
74198: NEG
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: LD_INT 2
74206: PUSH
74207: LD_INT 0
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: LD_INT 2
74216: PUSH
74217: LD_INT 1
74219: PUSH
74220: EMPTY
74221: LIST
74222: LIST
74223: PUSH
74224: LD_INT 2
74226: PUSH
74227: LD_INT 2
74229: PUSH
74230: EMPTY
74231: LIST
74232: LIST
74233: PUSH
74234: LD_INT 1
74236: PUSH
74237: LD_INT 2
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: PUSH
74244: LD_INT 0
74246: PUSH
74247: LD_INT 2
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: PUSH
74254: LD_INT 1
74256: NEG
74257: PUSH
74258: LD_INT 1
74260: PUSH
74261: EMPTY
74262: LIST
74263: LIST
74264: PUSH
74265: LD_INT 2
74267: NEG
74268: PUSH
74269: LD_INT 0
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: PUSH
74276: LD_INT 2
74278: NEG
74279: PUSH
74280: LD_INT 1
74282: NEG
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: PUSH
74288: LD_INT 2
74290: NEG
74291: PUSH
74292: LD_INT 2
74294: NEG
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: PUSH
74300: EMPTY
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: LIST
74314: LIST
74315: LIST
74316: LIST
74317: LIST
74318: LIST
74319: LIST
74320: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74321: LD_ADDR_VAR 0 54
74325: PUSH
74326: LD_INT 0
74328: PUSH
74329: LD_INT 0
74331: PUSH
74332: EMPTY
74333: LIST
74334: LIST
74335: PUSH
74336: LD_INT 0
74338: PUSH
74339: LD_INT 1
74341: NEG
74342: PUSH
74343: EMPTY
74344: LIST
74345: LIST
74346: PUSH
74347: LD_INT 1
74349: PUSH
74350: LD_INT 0
74352: PUSH
74353: EMPTY
74354: LIST
74355: LIST
74356: PUSH
74357: LD_INT 1
74359: PUSH
74360: LD_INT 1
74362: PUSH
74363: EMPTY
74364: LIST
74365: LIST
74366: PUSH
74367: LD_INT 0
74369: PUSH
74370: LD_INT 1
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PUSH
74377: LD_INT 1
74379: NEG
74380: PUSH
74381: LD_INT 0
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: LD_INT 1
74390: NEG
74391: PUSH
74392: LD_INT 1
74394: NEG
74395: PUSH
74396: EMPTY
74397: LIST
74398: LIST
74399: PUSH
74400: LD_INT 1
74402: NEG
74403: PUSH
74404: LD_INT 2
74406: NEG
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: PUSH
74412: LD_INT 0
74414: PUSH
74415: LD_INT 2
74417: NEG
74418: PUSH
74419: EMPTY
74420: LIST
74421: LIST
74422: PUSH
74423: LD_INT 1
74425: PUSH
74426: LD_INT 1
74428: NEG
74429: PUSH
74430: EMPTY
74431: LIST
74432: LIST
74433: PUSH
74434: LD_INT 2
74436: PUSH
74437: LD_INT 0
74439: PUSH
74440: EMPTY
74441: LIST
74442: LIST
74443: PUSH
74444: LD_INT 2
74446: PUSH
74447: LD_INT 1
74449: PUSH
74450: EMPTY
74451: LIST
74452: LIST
74453: PUSH
74454: LD_INT 2
74456: PUSH
74457: LD_INT 2
74459: PUSH
74460: EMPTY
74461: LIST
74462: LIST
74463: PUSH
74464: LD_INT 1
74466: PUSH
74467: LD_INT 2
74469: PUSH
74470: EMPTY
74471: LIST
74472: LIST
74473: PUSH
74474: LD_INT 0
74476: PUSH
74477: LD_INT 2
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: PUSH
74484: LD_INT 1
74486: NEG
74487: PUSH
74488: LD_INT 1
74490: PUSH
74491: EMPTY
74492: LIST
74493: LIST
74494: PUSH
74495: LD_INT 2
74497: NEG
74498: PUSH
74499: LD_INT 0
74501: PUSH
74502: EMPTY
74503: LIST
74504: LIST
74505: PUSH
74506: LD_INT 2
74508: NEG
74509: PUSH
74510: LD_INT 1
74512: NEG
74513: PUSH
74514: EMPTY
74515: LIST
74516: LIST
74517: PUSH
74518: LD_INT 2
74520: NEG
74521: PUSH
74522: LD_INT 2
74524: NEG
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: PUSH
74530: EMPTY
74531: LIST
74532: LIST
74533: LIST
74534: LIST
74535: LIST
74536: LIST
74537: LIST
74538: LIST
74539: LIST
74540: LIST
74541: LIST
74542: LIST
74543: LIST
74544: LIST
74545: LIST
74546: LIST
74547: LIST
74548: LIST
74549: LIST
74550: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74551: LD_ADDR_VAR 0 55
74555: PUSH
74556: LD_INT 0
74558: PUSH
74559: LD_INT 0
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: PUSH
74566: LD_INT 0
74568: PUSH
74569: LD_INT 1
74571: NEG
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 1
74579: PUSH
74580: LD_INT 0
74582: PUSH
74583: EMPTY
74584: LIST
74585: LIST
74586: PUSH
74587: LD_INT 1
74589: PUSH
74590: LD_INT 1
74592: PUSH
74593: EMPTY
74594: LIST
74595: LIST
74596: PUSH
74597: LD_INT 0
74599: PUSH
74600: LD_INT 1
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 1
74609: NEG
74610: PUSH
74611: LD_INT 0
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PUSH
74618: LD_INT 1
74620: NEG
74621: PUSH
74622: LD_INT 1
74624: NEG
74625: PUSH
74626: EMPTY
74627: LIST
74628: LIST
74629: PUSH
74630: LD_INT 1
74632: NEG
74633: PUSH
74634: LD_INT 2
74636: NEG
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: PUSH
74642: LD_INT 0
74644: PUSH
74645: LD_INT 2
74647: NEG
74648: PUSH
74649: EMPTY
74650: LIST
74651: LIST
74652: PUSH
74653: LD_INT 1
74655: PUSH
74656: LD_INT 1
74658: NEG
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PUSH
74664: LD_INT 2
74666: PUSH
74667: LD_INT 0
74669: PUSH
74670: EMPTY
74671: LIST
74672: LIST
74673: PUSH
74674: LD_INT 2
74676: PUSH
74677: LD_INT 1
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: PUSH
74684: LD_INT 2
74686: PUSH
74687: LD_INT 2
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 1
74696: PUSH
74697: LD_INT 2
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: PUSH
74704: LD_INT 0
74706: PUSH
74707: LD_INT 2
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: PUSH
74714: LD_INT 1
74716: NEG
74717: PUSH
74718: LD_INT 1
74720: PUSH
74721: EMPTY
74722: LIST
74723: LIST
74724: PUSH
74725: LD_INT 2
74727: NEG
74728: PUSH
74729: LD_INT 0
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: LD_INT 2
74738: NEG
74739: PUSH
74740: LD_INT 1
74742: NEG
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_INT 2
74750: NEG
74751: PUSH
74752: LD_INT 2
74754: NEG
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: EMPTY
74761: LIST
74762: LIST
74763: LIST
74764: LIST
74765: LIST
74766: LIST
74767: LIST
74768: LIST
74769: LIST
74770: LIST
74771: LIST
74772: LIST
74773: LIST
74774: LIST
74775: LIST
74776: LIST
74777: LIST
74778: LIST
74779: LIST
74780: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74781: LD_ADDR_VAR 0 56
74785: PUSH
74786: LD_INT 0
74788: PUSH
74789: LD_INT 0
74791: PUSH
74792: EMPTY
74793: LIST
74794: LIST
74795: PUSH
74796: LD_INT 0
74798: PUSH
74799: LD_INT 1
74801: NEG
74802: PUSH
74803: EMPTY
74804: LIST
74805: LIST
74806: PUSH
74807: LD_INT 1
74809: PUSH
74810: LD_INT 0
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: PUSH
74817: LD_INT 1
74819: PUSH
74820: LD_INT 1
74822: PUSH
74823: EMPTY
74824: LIST
74825: LIST
74826: PUSH
74827: LD_INT 0
74829: PUSH
74830: LD_INT 1
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: PUSH
74837: LD_INT 1
74839: NEG
74840: PUSH
74841: LD_INT 0
74843: PUSH
74844: EMPTY
74845: LIST
74846: LIST
74847: PUSH
74848: LD_INT 1
74850: NEG
74851: PUSH
74852: LD_INT 1
74854: NEG
74855: PUSH
74856: EMPTY
74857: LIST
74858: LIST
74859: PUSH
74860: LD_INT 1
74862: NEG
74863: PUSH
74864: LD_INT 2
74866: NEG
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: PUSH
74872: LD_INT 0
74874: PUSH
74875: LD_INT 2
74877: NEG
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: PUSH
74883: LD_INT 1
74885: PUSH
74886: LD_INT 1
74888: NEG
74889: PUSH
74890: EMPTY
74891: LIST
74892: LIST
74893: PUSH
74894: LD_INT 2
74896: PUSH
74897: LD_INT 0
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: PUSH
74904: LD_INT 2
74906: PUSH
74907: LD_INT 1
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: PUSH
74914: LD_INT 2
74916: PUSH
74917: LD_INT 2
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 1
74926: PUSH
74927: LD_INT 2
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: PUSH
74934: LD_INT 0
74936: PUSH
74937: LD_INT 2
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: PUSH
74944: LD_INT 1
74946: NEG
74947: PUSH
74948: LD_INT 1
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: LD_INT 2
74957: NEG
74958: PUSH
74959: LD_INT 0
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: PUSH
74966: LD_INT 2
74968: NEG
74969: PUSH
74970: LD_INT 1
74972: NEG
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: PUSH
74978: LD_INT 2
74980: NEG
74981: PUSH
74982: LD_INT 2
74984: NEG
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: LIST
75004: LIST
75005: LIST
75006: LIST
75007: LIST
75008: LIST
75009: LIST
75010: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75011: LD_ADDR_VAR 0 57
75015: PUSH
75016: LD_INT 0
75018: PUSH
75019: LD_INT 0
75021: PUSH
75022: EMPTY
75023: LIST
75024: LIST
75025: PUSH
75026: LD_INT 0
75028: PUSH
75029: LD_INT 1
75031: NEG
75032: PUSH
75033: EMPTY
75034: LIST
75035: LIST
75036: PUSH
75037: LD_INT 1
75039: PUSH
75040: LD_INT 0
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PUSH
75047: LD_INT 1
75049: PUSH
75050: LD_INT 1
75052: PUSH
75053: EMPTY
75054: LIST
75055: LIST
75056: PUSH
75057: LD_INT 0
75059: PUSH
75060: LD_INT 1
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: LD_INT 1
75069: NEG
75070: PUSH
75071: LD_INT 0
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PUSH
75078: LD_INT 1
75080: NEG
75081: PUSH
75082: LD_INT 1
75084: NEG
75085: PUSH
75086: EMPTY
75087: LIST
75088: LIST
75089: PUSH
75090: LD_INT 1
75092: NEG
75093: PUSH
75094: LD_INT 2
75096: NEG
75097: PUSH
75098: EMPTY
75099: LIST
75100: LIST
75101: PUSH
75102: LD_INT 0
75104: PUSH
75105: LD_INT 2
75107: NEG
75108: PUSH
75109: EMPTY
75110: LIST
75111: LIST
75112: PUSH
75113: LD_INT 1
75115: PUSH
75116: LD_INT 1
75118: NEG
75119: PUSH
75120: EMPTY
75121: LIST
75122: LIST
75123: PUSH
75124: LD_INT 2
75126: PUSH
75127: LD_INT 0
75129: PUSH
75130: EMPTY
75131: LIST
75132: LIST
75133: PUSH
75134: LD_INT 2
75136: PUSH
75137: LD_INT 1
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: PUSH
75144: LD_INT 2
75146: PUSH
75147: LD_INT 2
75149: PUSH
75150: EMPTY
75151: LIST
75152: LIST
75153: PUSH
75154: LD_INT 1
75156: PUSH
75157: LD_INT 2
75159: PUSH
75160: EMPTY
75161: LIST
75162: LIST
75163: PUSH
75164: LD_INT 0
75166: PUSH
75167: LD_INT 2
75169: PUSH
75170: EMPTY
75171: LIST
75172: LIST
75173: PUSH
75174: LD_INT 1
75176: NEG
75177: PUSH
75178: LD_INT 1
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: LD_INT 2
75187: NEG
75188: PUSH
75189: LD_INT 0
75191: PUSH
75192: EMPTY
75193: LIST
75194: LIST
75195: PUSH
75196: LD_INT 2
75198: NEG
75199: PUSH
75200: LD_INT 1
75202: NEG
75203: PUSH
75204: EMPTY
75205: LIST
75206: LIST
75207: PUSH
75208: LD_INT 2
75210: NEG
75211: PUSH
75212: LD_INT 2
75214: NEG
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: EMPTY
75221: LIST
75222: LIST
75223: LIST
75224: LIST
75225: LIST
75226: LIST
75227: LIST
75228: LIST
75229: LIST
75230: LIST
75231: LIST
75232: LIST
75233: LIST
75234: LIST
75235: LIST
75236: LIST
75237: LIST
75238: LIST
75239: LIST
75240: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75241: LD_ADDR_VAR 0 58
75245: PUSH
75246: LD_INT 0
75248: PUSH
75249: LD_INT 0
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: LD_INT 0
75258: PUSH
75259: LD_INT 1
75261: NEG
75262: PUSH
75263: EMPTY
75264: LIST
75265: LIST
75266: PUSH
75267: LD_INT 1
75269: PUSH
75270: LD_INT 0
75272: PUSH
75273: EMPTY
75274: LIST
75275: LIST
75276: PUSH
75277: LD_INT 1
75279: PUSH
75280: LD_INT 1
75282: PUSH
75283: EMPTY
75284: LIST
75285: LIST
75286: PUSH
75287: LD_INT 0
75289: PUSH
75290: LD_INT 1
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PUSH
75297: LD_INT 1
75299: NEG
75300: PUSH
75301: LD_INT 0
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: PUSH
75308: LD_INT 1
75310: NEG
75311: PUSH
75312: LD_INT 1
75314: NEG
75315: PUSH
75316: EMPTY
75317: LIST
75318: LIST
75319: PUSH
75320: LD_INT 1
75322: NEG
75323: PUSH
75324: LD_INT 2
75326: NEG
75327: PUSH
75328: EMPTY
75329: LIST
75330: LIST
75331: PUSH
75332: LD_INT 0
75334: PUSH
75335: LD_INT 2
75337: NEG
75338: PUSH
75339: EMPTY
75340: LIST
75341: LIST
75342: PUSH
75343: LD_INT 1
75345: PUSH
75346: LD_INT 1
75348: NEG
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PUSH
75354: LD_INT 2
75356: PUSH
75357: LD_INT 0
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 2
75366: PUSH
75367: LD_INT 1
75369: PUSH
75370: EMPTY
75371: LIST
75372: LIST
75373: PUSH
75374: LD_INT 2
75376: PUSH
75377: LD_INT 2
75379: PUSH
75380: EMPTY
75381: LIST
75382: LIST
75383: PUSH
75384: LD_INT 1
75386: PUSH
75387: LD_INT 2
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: PUSH
75394: LD_INT 0
75396: PUSH
75397: LD_INT 2
75399: PUSH
75400: EMPTY
75401: LIST
75402: LIST
75403: PUSH
75404: LD_INT 1
75406: NEG
75407: PUSH
75408: LD_INT 1
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: PUSH
75415: LD_INT 2
75417: NEG
75418: PUSH
75419: LD_INT 0
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 2
75428: NEG
75429: PUSH
75430: LD_INT 1
75432: NEG
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: LD_INT 2
75440: NEG
75441: PUSH
75442: LD_INT 2
75444: NEG
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: LIST
75454: LIST
75455: LIST
75456: LIST
75457: LIST
75458: LIST
75459: LIST
75460: LIST
75461: LIST
75462: LIST
75463: LIST
75464: LIST
75465: LIST
75466: LIST
75467: LIST
75468: LIST
75469: LIST
75470: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75471: LD_ADDR_VAR 0 59
75475: PUSH
75476: LD_INT 0
75478: PUSH
75479: LD_INT 0
75481: PUSH
75482: EMPTY
75483: LIST
75484: LIST
75485: PUSH
75486: LD_INT 0
75488: PUSH
75489: LD_INT 1
75491: NEG
75492: PUSH
75493: EMPTY
75494: LIST
75495: LIST
75496: PUSH
75497: LD_INT 1
75499: PUSH
75500: LD_INT 0
75502: PUSH
75503: EMPTY
75504: LIST
75505: LIST
75506: PUSH
75507: LD_INT 1
75509: PUSH
75510: LD_INT 1
75512: PUSH
75513: EMPTY
75514: LIST
75515: LIST
75516: PUSH
75517: LD_INT 0
75519: PUSH
75520: LD_INT 1
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: PUSH
75527: LD_INT 1
75529: NEG
75530: PUSH
75531: LD_INT 0
75533: PUSH
75534: EMPTY
75535: LIST
75536: LIST
75537: PUSH
75538: LD_INT 1
75540: NEG
75541: PUSH
75542: LD_INT 1
75544: NEG
75545: PUSH
75546: EMPTY
75547: LIST
75548: LIST
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: LIST
75554: LIST
75555: LIST
75556: LIST
75557: LIST
75558: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75559: LD_ADDR_VAR 0 60
75563: PUSH
75564: LD_INT 0
75566: PUSH
75567: LD_INT 0
75569: PUSH
75570: EMPTY
75571: LIST
75572: LIST
75573: PUSH
75574: LD_INT 0
75576: PUSH
75577: LD_INT 1
75579: NEG
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PUSH
75585: LD_INT 1
75587: PUSH
75588: LD_INT 0
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: LD_INT 1
75597: PUSH
75598: LD_INT 1
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: PUSH
75605: LD_INT 0
75607: PUSH
75608: LD_INT 1
75610: PUSH
75611: EMPTY
75612: LIST
75613: LIST
75614: PUSH
75615: LD_INT 1
75617: NEG
75618: PUSH
75619: LD_INT 0
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PUSH
75626: LD_INT 1
75628: NEG
75629: PUSH
75630: LD_INT 1
75632: NEG
75633: PUSH
75634: EMPTY
75635: LIST
75636: LIST
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75647: LD_ADDR_VAR 0 61
75651: PUSH
75652: LD_INT 0
75654: PUSH
75655: LD_INT 0
75657: PUSH
75658: EMPTY
75659: LIST
75660: LIST
75661: PUSH
75662: LD_INT 0
75664: PUSH
75665: LD_INT 1
75667: NEG
75668: PUSH
75669: EMPTY
75670: LIST
75671: LIST
75672: PUSH
75673: LD_INT 1
75675: PUSH
75676: LD_INT 0
75678: PUSH
75679: EMPTY
75680: LIST
75681: LIST
75682: PUSH
75683: LD_INT 1
75685: PUSH
75686: LD_INT 1
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: PUSH
75693: LD_INT 0
75695: PUSH
75696: LD_INT 1
75698: PUSH
75699: EMPTY
75700: LIST
75701: LIST
75702: PUSH
75703: LD_INT 1
75705: NEG
75706: PUSH
75707: LD_INT 0
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: PUSH
75714: LD_INT 1
75716: NEG
75717: PUSH
75718: LD_INT 1
75720: NEG
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: LIST
75732: LIST
75733: LIST
75734: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75735: LD_ADDR_VAR 0 62
75739: PUSH
75740: LD_INT 0
75742: PUSH
75743: LD_INT 0
75745: PUSH
75746: EMPTY
75747: LIST
75748: LIST
75749: PUSH
75750: LD_INT 0
75752: PUSH
75753: LD_INT 1
75755: NEG
75756: PUSH
75757: EMPTY
75758: LIST
75759: LIST
75760: PUSH
75761: LD_INT 1
75763: PUSH
75764: LD_INT 0
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 1
75773: PUSH
75774: LD_INT 1
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: PUSH
75781: LD_INT 0
75783: PUSH
75784: LD_INT 1
75786: PUSH
75787: EMPTY
75788: LIST
75789: LIST
75790: PUSH
75791: LD_INT 1
75793: NEG
75794: PUSH
75795: LD_INT 0
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: PUSH
75802: LD_INT 1
75804: NEG
75805: PUSH
75806: LD_INT 1
75808: NEG
75809: PUSH
75810: EMPTY
75811: LIST
75812: LIST
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75823: LD_ADDR_VAR 0 63
75827: PUSH
75828: LD_INT 0
75830: PUSH
75831: LD_INT 0
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 0
75840: PUSH
75841: LD_INT 1
75843: NEG
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: PUSH
75849: LD_INT 1
75851: PUSH
75852: LD_INT 0
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PUSH
75859: LD_INT 1
75861: PUSH
75862: LD_INT 1
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: PUSH
75869: LD_INT 0
75871: PUSH
75872: LD_INT 1
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: PUSH
75879: LD_INT 1
75881: NEG
75882: PUSH
75883: LD_INT 0
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: PUSH
75890: LD_INT 1
75892: NEG
75893: PUSH
75894: LD_INT 1
75896: NEG
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: PUSH
75902: EMPTY
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75911: LD_ADDR_VAR 0 64
75915: PUSH
75916: LD_INT 0
75918: PUSH
75919: LD_INT 0
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: PUSH
75926: LD_INT 0
75928: PUSH
75929: LD_INT 1
75931: NEG
75932: PUSH
75933: EMPTY
75934: LIST
75935: LIST
75936: PUSH
75937: LD_INT 1
75939: PUSH
75940: LD_INT 0
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: PUSH
75947: LD_INT 1
75949: PUSH
75950: LD_INT 1
75952: PUSH
75953: EMPTY
75954: LIST
75955: LIST
75956: PUSH
75957: LD_INT 0
75959: PUSH
75960: LD_INT 1
75962: PUSH
75963: EMPTY
75964: LIST
75965: LIST
75966: PUSH
75967: LD_INT 1
75969: NEG
75970: PUSH
75971: LD_INT 0
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: PUSH
75978: LD_INT 1
75980: NEG
75981: PUSH
75982: LD_INT 1
75984: NEG
75985: PUSH
75986: EMPTY
75987: LIST
75988: LIST
75989: PUSH
75990: EMPTY
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: LIST
75996: LIST
75997: LIST
75998: ST_TO_ADDR
// end ; 1 :
75999: GO 81896
76001: LD_INT 1
76003: DOUBLE
76004: EQUAL
76005: IFTRUE 76009
76007: GO 78632
76009: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76010: LD_ADDR_VAR 0 11
76014: PUSH
76015: LD_INT 1
76017: NEG
76018: PUSH
76019: LD_INT 3
76021: NEG
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: PUSH
76027: LD_INT 0
76029: PUSH
76030: LD_INT 3
76032: NEG
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: PUSH
76038: LD_INT 1
76040: PUSH
76041: LD_INT 2
76043: NEG
76044: PUSH
76045: EMPTY
76046: LIST
76047: LIST
76048: PUSH
76049: EMPTY
76050: LIST
76051: LIST
76052: LIST
76053: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76054: LD_ADDR_VAR 0 12
76058: PUSH
76059: LD_INT 2
76061: PUSH
76062: LD_INT 1
76064: NEG
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: PUSH
76070: LD_INT 3
76072: PUSH
76073: LD_INT 0
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: PUSH
76080: LD_INT 3
76082: PUSH
76083: LD_INT 1
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: PUSH
76090: EMPTY
76091: LIST
76092: LIST
76093: LIST
76094: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76095: LD_ADDR_VAR 0 13
76099: PUSH
76100: LD_INT 3
76102: PUSH
76103: LD_INT 2
76105: PUSH
76106: EMPTY
76107: LIST
76108: LIST
76109: PUSH
76110: LD_INT 3
76112: PUSH
76113: LD_INT 3
76115: PUSH
76116: EMPTY
76117: LIST
76118: LIST
76119: PUSH
76120: LD_INT 2
76122: PUSH
76123: LD_INT 3
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: LIST
76134: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76135: LD_ADDR_VAR 0 14
76139: PUSH
76140: LD_INT 1
76142: PUSH
76143: LD_INT 3
76145: PUSH
76146: EMPTY
76147: LIST
76148: LIST
76149: PUSH
76150: LD_INT 0
76152: PUSH
76153: LD_INT 3
76155: PUSH
76156: EMPTY
76157: LIST
76158: LIST
76159: PUSH
76160: LD_INT 1
76162: NEG
76163: PUSH
76164: LD_INT 2
76166: PUSH
76167: EMPTY
76168: LIST
76169: LIST
76170: PUSH
76171: EMPTY
76172: LIST
76173: LIST
76174: LIST
76175: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76176: LD_ADDR_VAR 0 15
76180: PUSH
76181: LD_INT 2
76183: NEG
76184: PUSH
76185: LD_INT 1
76187: PUSH
76188: EMPTY
76189: LIST
76190: LIST
76191: PUSH
76192: LD_INT 3
76194: NEG
76195: PUSH
76196: LD_INT 0
76198: PUSH
76199: EMPTY
76200: LIST
76201: LIST
76202: PUSH
76203: LD_INT 3
76205: NEG
76206: PUSH
76207: LD_INT 1
76209: NEG
76210: PUSH
76211: EMPTY
76212: LIST
76213: LIST
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: LIST
76219: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76220: LD_ADDR_VAR 0 16
76224: PUSH
76225: LD_INT 2
76227: NEG
76228: PUSH
76229: LD_INT 3
76231: NEG
76232: PUSH
76233: EMPTY
76234: LIST
76235: LIST
76236: PUSH
76237: LD_INT 3
76239: NEG
76240: PUSH
76241: LD_INT 2
76243: NEG
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: PUSH
76249: LD_INT 3
76251: NEG
76252: PUSH
76253: LD_INT 3
76255: NEG
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: LIST
76265: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76266: LD_ADDR_VAR 0 17
76270: PUSH
76271: LD_INT 1
76273: NEG
76274: PUSH
76275: LD_INT 3
76277: NEG
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: PUSH
76283: LD_INT 0
76285: PUSH
76286: LD_INT 3
76288: NEG
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: PUSH
76294: LD_INT 1
76296: PUSH
76297: LD_INT 2
76299: NEG
76300: PUSH
76301: EMPTY
76302: LIST
76303: LIST
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: LIST
76309: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76310: LD_ADDR_VAR 0 18
76314: PUSH
76315: LD_INT 2
76317: PUSH
76318: LD_INT 1
76320: NEG
76321: PUSH
76322: EMPTY
76323: LIST
76324: LIST
76325: PUSH
76326: LD_INT 3
76328: PUSH
76329: LD_INT 0
76331: PUSH
76332: EMPTY
76333: LIST
76334: LIST
76335: PUSH
76336: LD_INT 3
76338: PUSH
76339: LD_INT 1
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: LIST
76350: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76351: LD_ADDR_VAR 0 19
76355: PUSH
76356: LD_INT 3
76358: PUSH
76359: LD_INT 2
76361: PUSH
76362: EMPTY
76363: LIST
76364: LIST
76365: PUSH
76366: LD_INT 3
76368: PUSH
76369: LD_INT 3
76371: PUSH
76372: EMPTY
76373: LIST
76374: LIST
76375: PUSH
76376: LD_INT 2
76378: PUSH
76379: LD_INT 3
76381: PUSH
76382: EMPTY
76383: LIST
76384: LIST
76385: PUSH
76386: EMPTY
76387: LIST
76388: LIST
76389: LIST
76390: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76391: LD_ADDR_VAR 0 20
76395: PUSH
76396: LD_INT 1
76398: PUSH
76399: LD_INT 3
76401: PUSH
76402: EMPTY
76403: LIST
76404: LIST
76405: PUSH
76406: LD_INT 0
76408: PUSH
76409: LD_INT 3
76411: PUSH
76412: EMPTY
76413: LIST
76414: LIST
76415: PUSH
76416: LD_INT 1
76418: NEG
76419: PUSH
76420: LD_INT 2
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: LIST
76431: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76432: LD_ADDR_VAR 0 21
76436: PUSH
76437: LD_INT 2
76439: NEG
76440: PUSH
76441: LD_INT 1
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: PUSH
76448: LD_INT 3
76450: NEG
76451: PUSH
76452: LD_INT 0
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: PUSH
76459: LD_INT 3
76461: NEG
76462: PUSH
76463: LD_INT 1
76465: NEG
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: PUSH
76471: EMPTY
76472: LIST
76473: LIST
76474: LIST
76475: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76476: LD_ADDR_VAR 0 22
76480: PUSH
76481: LD_INT 2
76483: NEG
76484: PUSH
76485: LD_INT 3
76487: NEG
76488: PUSH
76489: EMPTY
76490: LIST
76491: LIST
76492: PUSH
76493: LD_INT 3
76495: NEG
76496: PUSH
76497: LD_INT 2
76499: NEG
76500: PUSH
76501: EMPTY
76502: LIST
76503: LIST
76504: PUSH
76505: LD_INT 3
76507: NEG
76508: PUSH
76509: LD_INT 3
76511: NEG
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: PUSH
76517: EMPTY
76518: LIST
76519: LIST
76520: LIST
76521: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
76522: LD_ADDR_VAR 0 23
76526: PUSH
76527: LD_INT 0
76529: PUSH
76530: LD_INT 3
76532: NEG
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PUSH
76538: LD_INT 1
76540: NEG
76541: PUSH
76542: LD_INT 4
76544: NEG
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: PUSH
76550: LD_INT 1
76552: PUSH
76553: LD_INT 3
76555: NEG
76556: PUSH
76557: EMPTY
76558: LIST
76559: LIST
76560: PUSH
76561: EMPTY
76562: LIST
76563: LIST
76564: LIST
76565: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
76566: LD_ADDR_VAR 0 24
76570: PUSH
76571: LD_INT 3
76573: PUSH
76574: LD_INT 0
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: LD_INT 3
76583: PUSH
76584: LD_INT 1
76586: NEG
76587: PUSH
76588: EMPTY
76589: LIST
76590: LIST
76591: PUSH
76592: LD_INT 4
76594: PUSH
76595: LD_INT 1
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: LIST
76606: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
76607: LD_ADDR_VAR 0 25
76611: PUSH
76612: LD_INT 3
76614: PUSH
76615: LD_INT 3
76617: PUSH
76618: EMPTY
76619: LIST
76620: LIST
76621: PUSH
76622: LD_INT 4
76624: PUSH
76625: LD_INT 3
76627: PUSH
76628: EMPTY
76629: LIST
76630: LIST
76631: PUSH
76632: LD_INT 3
76634: PUSH
76635: LD_INT 4
76637: PUSH
76638: EMPTY
76639: LIST
76640: LIST
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: LIST
76646: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
76647: LD_ADDR_VAR 0 26
76651: PUSH
76652: LD_INT 0
76654: PUSH
76655: LD_INT 3
76657: PUSH
76658: EMPTY
76659: LIST
76660: LIST
76661: PUSH
76662: LD_INT 1
76664: PUSH
76665: LD_INT 4
76667: PUSH
76668: EMPTY
76669: LIST
76670: LIST
76671: PUSH
76672: LD_INT 1
76674: NEG
76675: PUSH
76676: LD_INT 3
76678: PUSH
76679: EMPTY
76680: LIST
76681: LIST
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: LIST
76687: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
76688: LD_ADDR_VAR 0 27
76692: PUSH
76693: LD_INT 3
76695: NEG
76696: PUSH
76697: LD_INT 0
76699: PUSH
76700: EMPTY
76701: LIST
76702: LIST
76703: PUSH
76704: LD_INT 3
76706: NEG
76707: PUSH
76708: LD_INT 1
76710: PUSH
76711: EMPTY
76712: LIST
76713: LIST
76714: PUSH
76715: LD_INT 4
76717: NEG
76718: PUSH
76719: LD_INT 1
76721: NEG
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: LIST
76731: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
76732: LD_ADDR_VAR 0 28
76736: PUSH
76737: LD_INT 3
76739: NEG
76740: PUSH
76741: LD_INT 3
76743: NEG
76744: PUSH
76745: EMPTY
76746: LIST
76747: LIST
76748: PUSH
76749: LD_INT 3
76751: NEG
76752: PUSH
76753: LD_INT 4
76755: NEG
76756: PUSH
76757: EMPTY
76758: LIST
76759: LIST
76760: PUSH
76761: LD_INT 4
76763: NEG
76764: PUSH
76765: LD_INT 3
76767: NEG
76768: PUSH
76769: EMPTY
76770: LIST
76771: LIST
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: LIST
76777: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
76778: LD_ADDR_VAR 0 29
76782: PUSH
76783: LD_INT 1
76785: NEG
76786: PUSH
76787: LD_INT 3
76789: NEG
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: PUSH
76795: LD_INT 0
76797: PUSH
76798: LD_INT 3
76800: NEG
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: LD_INT 1
76808: PUSH
76809: LD_INT 2
76811: NEG
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: PUSH
76817: LD_INT 1
76819: NEG
76820: PUSH
76821: LD_INT 4
76823: NEG
76824: PUSH
76825: EMPTY
76826: LIST
76827: LIST
76828: PUSH
76829: LD_INT 0
76831: PUSH
76832: LD_INT 4
76834: NEG
76835: PUSH
76836: EMPTY
76837: LIST
76838: LIST
76839: PUSH
76840: LD_INT 1
76842: PUSH
76843: LD_INT 3
76845: NEG
76846: PUSH
76847: EMPTY
76848: LIST
76849: LIST
76850: PUSH
76851: LD_INT 1
76853: NEG
76854: PUSH
76855: LD_INT 5
76857: NEG
76858: PUSH
76859: EMPTY
76860: LIST
76861: LIST
76862: PUSH
76863: LD_INT 0
76865: PUSH
76866: LD_INT 5
76868: NEG
76869: PUSH
76870: EMPTY
76871: LIST
76872: LIST
76873: PUSH
76874: LD_INT 1
76876: PUSH
76877: LD_INT 4
76879: NEG
76880: PUSH
76881: EMPTY
76882: LIST
76883: LIST
76884: PUSH
76885: LD_INT 1
76887: NEG
76888: PUSH
76889: LD_INT 6
76891: NEG
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 0
76899: PUSH
76900: LD_INT 6
76902: NEG
76903: PUSH
76904: EMPTY
76905: LIST
76906: LIST
76907: PUSH
76908: LD_INT 1
76910: PUSH
76911: LD_INT 5
76913: NEG
76914: PUSH
76915: EMPTY
76916: LIST
76917: LIST
76918: PUSH
76919: EMPTY
76920: LIST
76921: LIST
76922: LIST
76923: LIST
76924: LIST
76925: LIST
76926: LIST
76927: LIST
76928: LIST
76929: LIST
76930: LIST
76931: LIST
76932: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
76933: LD_ADDR_VAR 0 30
76937: PUSH
76938: LD_INT 2
76940: PUSH
76941: LD_INT 1
76943: NEG
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_INT 3
76951: PUSH
76952: LD_INT 0
76954: PUSH
76955: EMPTY
76956: LIST
76957: LIST
76958: PUSH
76959: LD_INT 3
76961: PUSH
76962: LD_INT 1
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: LD_INT 3
76971: PUSH
76972: LD_INT 1
76974: NEG
76975: PUSH
76976: EMPTY
76977: LIST
76978: LIST
76979: PUSH
76980: LD_INT 4
76982: PUSH
76983: LD_INT 0
76985: PUSH
76986: EMPTY
76987: LIST
76988: LIST
76989: PUSH
76990: LD_INT 4
76992: PUSH
76993: LD_INT 1
76995: PUSH
76996: EMPTY
76997: LIST
76998: LIST
76999: PUSH
77000: LD_INT 4
77002: PUSH
77003: LD_INT 1
77005: NEG
77006: PUSH
77007: EMPTY
77008: LIST
77009: LIST
77010: PUSH
77011: LD_INT 5
77013: PUSH
77014: LD_INT 0
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: PUSH
77021: LD_INT 5
77023: PUSH
77024: LD_INT 1
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: PUSH
77031: LD_INT 5
77033: PUSH
77034: LD_INT 1
77036: NEG
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: PUSH
77042: LD_INT 6
77044: PUSH
77045: LD_INT 0
77047: PUSH
77048: EMPTY
77049: LIST
77050: LIST
77051: PUSH
77052: LD_INT 6
77054: PUSH
77055: LD_INT 1
77057: PUSH
77058: EMPTY
77059: LIST
77060: LIST
77061: PUSH
77062: EMPTY
77063: LIST
77064: LIST
77065: LIST
77066: LIST
77067: LIST
77068: LIST
77069: LIST
77070: LIST
77071: LIST
77072: LIST
77073: LIST
77074: LIST
77075: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
77076: LD_ADDR_VAR 0 31
77080: PUSH
77081: LD_INT 3
77083: PUSH
77084: LD_INT 2
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: PUSH
77091: LD_INT 3
77093: PUSH
77094: LD_INT 3
77096: PUSH
77097: EMPTY
77098: LIST
77099: LIST
77100: PUSH
77101: LD_INT 2
77103: PUSH
77104: LD_INT 3
77106: PUSH
77107: EMPTY
77108: LIST
77109: LIST
77110: PUSH
77111: LD_INT 4
77113: PUSH
77114: LD_INT 3
77116: PUSH
77117: EMPTY
77118: LIST
77119: LIST
77120: PUSH
77121: LD_INT 4
77123: PUSH
77124: LD_INT 4
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: PUSH
77131: LD_INT 3
77133: PUSH
77134: LD_INT 4
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: PUSH
77141: LD_INT 5
77143: PUSH
77144: LD_INT 4
77146: PUSH
77147: EMPTY
77148: LIST
77149: LIST
77150: PUSH
77151: LD_INT 5
77153: PUSH
77154: LD_INT 5
77156: PUSH
77157: EMPTY
77158: LIST
77159: LIST
77160: PUSH
77161: LD_INT 4
77163: PUSH
77164: LD_INT 5
77166: PUSH
77167: EMPTY
77168: LIST
77169: LIST
77170: PUSH
77171: LD_INT 6
77173: PUSH
77174: LD_INT 5
77176: PUSH
77177: EMPTY
77178: LIST
77179: LIST
77180: PUSH
77181: LD_INT 6
77183: PUSH
77184: LD_INT 6
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: PUSH
77191: LD_INT 5
77193: PUSH
77194: LD_INT 6
77196: PUSH
77197: EMPTY
77198: LIST
77199: LIST
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: LIST
77207: LIST
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
77215: LD_ADDR_VAR 0 32
77219: PUSH
77220: LD_INT 1
77222: PUSH
77223: LD_INT 3
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: LD_INT 0
77232: PUSH
77233: LD_INT 3
77235: PUSH
77236: EMPTY
77237: LIST
77238: LIST
77239: PUSH
77240: LD_INT 1
77242: NEG
77243: PUSH
77244: LD_INT 2
77246: PUSH
77247: EMPTY
77248: LIST
77249: LIST
77250: PUSH
77251: LD_INT 1
77253: PUSH
77254: LD_INT 4
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: PUSH
77261: LD_INT 0
77263: PUSH
77264: LD_INT 4
77266: PUSH
77267: EMPTY
77268: LIST
77269: LIST
77270: PUSH
77271: LD_INT 1
77273: NEG
77274: PUSH
77275: LD_INT 3
77277: PUSH
77278: EMPTY
77279: LIST
77280: LIST
77281: PUSH
77282: LD_INT 1
77284: PUSH
77285: LD_INT 5
77287: PUSH
77288: EMPTY
77289: LIST
77290: LIST
77291: PUSH
77292: LD_INT 0
77294: PUSH
77295: LD_INT 5
77297: PUSH
77298: EMPTY
77299: LIST
77300: LIST
77301: PUSH
77302: LD_INT 1
77304: NEG
77305: PUSH
77306: LD_INT 4
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: PUSH
77313: LD_INT 1
77315: PUSH
77316: LD_INT 6
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: PUSH
77323: LD_INT 0
77325: PUSH
77326: LD_INT 6
77328: PUSH
77329: EMPTY
77330: LIST
77331: LIST
77332: PUSH
77333: LD_INT 1
77335: NEG
77336: PUSH
77337: LD_INT 5
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: PUSH
77344: EMPTY
77345: LIST
77346: LIST
77347: LIST
77348: LIST
77349: LIST
77350: LIST
77351: LIST
77352: LIST
77353: LIST
77354: LIST
77355: LIST
77356: LIST
77357: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
77358: LD_ADDR_VAR 0 33
77362: PUSH
77363: LD_INT 2
77365: NEG
77366: PUSH
77367: LD_INT 1
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: PUSH
77374: LD_INT 3
77376: NEG
77377: PUSH
77378: LD_INT 0
77380: PUSH
77381: EMPTY
77382: LIST
77383: LIST
77384: PUSH
77385: LD_INT 3
77387: NEG
77388: PUSH
77389: LD_INT 1
77391: NEG
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: LD_INT 3
77399: NEG
77400: PUSH
77401: LD_INT 1
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PUSH
77408: LD_INT 4
77410: NEG
77411: PUSH
77412: LD_INT 0
77414: PUSH
77415: EMPTY
77416: LIST
77417: LIST
77418: PUSH
77419: LD_INT 4
77421: NEG
77422: PUSH
77423: LD_INT 1
77425: NEG
77426: PUSH
77427: EMPTY
77428: LIST
77429: LIST
77430: PUSH
77431: LD_INT 4
77433: NEG
77434: PUSH
77435: LD_INT 1
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: PUSH
77442: LD_INT 5
77444: NEG
77445: PUSH
77446: LD_INT 0
77448: PUSH
77449: EMPTY
77450: LIST
77451: LIST
77452: PUSH
77453: LD_INT 5
77455: NEG
77456: PUSH
77457: LD_INT 1
77459: NEG
77460: PUSH
77461: EMPTY
77462: LIST
77463: LIST
77464: PUSH
77465: LD_INT 5
77467: NEG
77468: PUSH
77469: LD_INT 1
77471: PUSH
77472: EMPTY
77473: LIST
77474: LIST
77475: PUSH
77476: LD_INT 6
77478: NEG
77479: PUSH
77480: LD_INT 0
77482: PUSH
77483: EMPTY
77484: LIST
77485: LIST
77486: PUSH
77487: LD_INT 6
77489: NEG
77490: PUSH
77491: LD_INT 1
77493: NEG
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PUSH
77499: EMPTY
77500: LIST
77501: LIST
77502: LIST
77503: LIST
77504: LIST
77505: LIST
77506: LIST
77507: LIST
77508: LIST
77509: LIST
77510: LIST
77511: LIST
77512: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
77513: LD_ADDR_VAR 0 34
77517: PUSH
77518: LD_INT 2
77520: NEG
77521: PUSH
77522: LD_INT 3
77524: NEG
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: LD_INT 3
77532: NEG
77533: PUSH
77534: LD_INT 2
77536: NEG
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PUSH
77542: LD_INT 3
77544: NEG
77545: PUSH
77546: LD_INT 3
77548: NEG
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: PUSH
77554: LD_INT 3
77556: NEG
77557: PUSH
77558: LD_INT 4
77560: NEG
77561: PUSH
77562: EMPTY
77563: LIST
77564: LIST
77565: PUSH
77566: LD_INT 4
77568: NEG
77569: PUSH
77570: LD_INT 3
77572: NEG
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: PUSH
77578: LD_INT 4
77580: NEG
77581: PUSH
77582: LD_INT 4
77584: NEG
77585: PUSH
77586: EMPTY
77587: LIST
77588: LIST
77589: PUSH
77590: LD_INT 4
77592: NEG
77593: PUSH
77594: LD_INT 5
77596: NEG
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PUSH
77602: LD_INT 5
77604: NEG
77605: PUSH
77606: LD_INT 4
77608: NEG
77609: PUSH
77610: EMPTY
77611: LIST
77612: LIST
77613: PUSH
77614: LD_INT 5
77616: NEG
77617: PUSH
77618: LD_INT 5
77620: NEG
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: PUSH
77626: LD_INT 5
77628: NEG
77629: PUSH
77630: LD_INT 6
77632: NEG
77633: PUSH
77634: EMPTY
77635: LIST
77636: LIST
77637: PUSH
77638: LD_INT 6
77640: NEG
77641: PUSH
77642: LD_INT 5
77644: NEG
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PUSH
77650: LD_INT 6
77652: NEG
77653: PUSH
77654: LD_INT 6
77656: NEG
77657: PUSH
77658: EMPTY
77659: LIST
77660: LIST
77661: PUSH
77662: EMPTY
77663: LIST
77664: LIST
77665: LIST
77666: LIST
77667: LIST
77668: LIST
77669: LIST
77670: LIST
77671: LIST
77672: LIST
77673: LIST
77674: LIST
77675: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
77676: LD_ADDR_VAR 0 41
77680: PUSH
77681: LD_INT 0
77683: PUSH
77684: LD_INT 2
77686: NEG
77687: PUSH
77688: EMPTY
77689: LIST
77690: LIST
77691: PUSH
77692: LD_INT 1
77694: NEG
77695: PUSH
77696: LD_INT 3
77698: NEG
77699: PUSH
77700: EMPTY
77701: LIST
77702: LIST
77703: PUSH
77704: LD_INT 1
77706: PUSH
77707: LD_INT 2
77709: NEG
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: PUSH
77715: EMPTY
77716: LIST
77717: LIST
77718: LIST
77719: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
77720: LD_ADDR_VAR 0 42
77724: PUSH
77725: LD_INT 2
77727: PUSH
77728: LD_INT 0
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: PUSH
77735: LD_INT 2
77737: PUSH
77738: LD_INT 1
77740: NEG
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: LD_INT 3
77748: PUSH
77749: LD_INT 1
77751: PUSH
77752: EMPTY
77753: LIST
77754: LIST
77755: PUSH
77756: EMPTY
77757: LIST
77758: LIST
77759: LIST
77760: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
77761: LD_ADDR_VAR 0 43
77765: PUSH
77766: LD_INT 2
77768: PUSH
77769: LD_INT 2
77771: PUSH
77772: EMPTY
77773: LIST
77774: LIST
77775: PUSH
77776: LD_INT 3
77778: PUSH
77779: LD_INT 2
77781: PUSH
77782: EMPTY
77783: LIST
77784: LIST
77785: PUSH
77786: LD_INT 2
77788: PUSH
77789: LD_INT 3
77791: PUSH
77792: EMPTY
77793: LIST
77794: LIST
77795: PUSH
77796: EMPTY
77797: LIST
77798: LIST
77799: LIST
77800: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
77801: LD_ADDR_VAR 0 44
77805: PUSH
77806: LD_INT 0
77808: PUSH
77809: LD_INT 2
77811: PUSH
77812: EMPTY
77813: LIST
77814: LIST
77815: PUSH
77816: LD_INT 1
77818: PUSH
77819: LD_INT 3
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: PUSH
77826: LD_INT 1
77828: NEG
77829: PUSH
77830: LD_INT 2
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: LIST
77841: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
77842: LD_ADDR_VAR 0 45
77846: PUSH
77847: LD_INT 2
77849: NEG
77850: PUSH
77851: LD_INT 0
77853: PUSH
77854: EMPTY
77855: LIST
77856: LIST
77857: PUSH
77858: LD_INT 2
77860: NEG
77861: PUSH
77862: LD_INT 1
77864: PUSH
77865: EMPTY
77866: LIST
77867: LIST
77868: PUSH
77869: LD_INT 3
77871: NEG
77872: PUSH
77873: LD_INT 1
77875: NEG
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: PUSH
77881: EMPTY
77882: LIST
77883: LIST
77884: LIST
77885: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
77886: LD_ADDR_VAR 0 46
77890: PUSH
77891: LD_INT 2
77893: NEG
77894: PUSH
77895: LD_INT 2
77897: NEG
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: PUSH
77903: LD_INT 2
77905: NEG
77906: PUSH
77907: LD_INT 3
77909: NEG
77910: PUSH
77911: EMPTY
77912: LIST
77913: LIST
77914: PUSH
77915: LD_INT 3
77917: NEG
77918: PUSH
77919: LD_INT 2
77921: NEG
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: PUSH
77927: EMPTY
77928: LIST
77929: LIST
77930: LIST
77931: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
77932: LD_ADDR_VAR 0 47
77936: PUSH
77937: LD_INT 2
77939: NEG
77940: PUSH
77941: LD_INT 3
77943: NEG
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: PUSH
77949: LD_INT 1
77951: NEG
77952: PUSH
77953: LD_INT 3
77955: NEG
77956: PUSH
77957: EMPTY
77958: LIST
77959: LIST
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
77965: LD_ADDR_VAR 0 48
77969: PUSH
77970: LD_INT 1
77972: PUSH
77973: LD_INT 2
77975: NEG
77976: PUSH
77977: EMPTY
77978: LIST
77979: LIST
77980: PUSH
77981: LD_INT 2
77983: PUSH
77984: LD_INT 1
77986: NEG
77987: PUSH
77988: EMPTY
77989: LIST
77990: LIST
77991: PUSH
77992: EMPTY
77993: LIST
77994: LIST
77995: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
77996: LD_ADDR_VAR 0 49
78000: PUSH
78001: LD_INT 3
78003: PUSH
78004: LD_INT 1
78006: PUSH
78007: EMPTY
78008: LIST
78009: LIST
78010: PUSH
78011: LD_INT 3
78013: PUSH
78014: LD_INT 2
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: PUSH
78021: EMPTY
78022: LIST
78023: LIST
78024: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
78025: LD_ADDR_VAR 0 50
78029: PUSH
78030: LD_INT 2
78032: PUSH
78033: LD_INT 3
78035: PUSH
78036: EMPTY
78037: LIST
78038: LIST
78039: PUSH
78040: LD_INT 1
78042: PUSH
78043: LD_INT 3
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
78054: LD_ADDR_VAR 0 51
78058: PUSH
78059: LD_INT 1
78061: NEG
78062: PUSH
78063: LD_INT 2
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: PUSH
78070: LD_INT 2
78072: NEG
78073: PUSH
78074: LD_INT 1
78076: PUSH
78077: EMPTY
78078: LIST
78079: LIST
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
78085: LD_ADDR_VAR 0 52
78089: PUSH
78090: LD_INT 3
78092: NEG
78093: PUSH
78094: LD_INT 1
78096: NEG
78097: PUSH
78098: EMPTY
78099: LIST
78100: LIST
78101: PUSH
78102: LD_INT 3
78104: NEG
78105: PUSH
78106: LD_INT 2
78108: NEG
78109: PUSH
78110: EMPTY
78111: LIST
78112: LIST
78113: PUSH
78114: EMPTY
78115: LIST
78116: LIST
78117: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
78118: LD_ADDR_VAR 0 53
78122: PUSH
78123: LD_INT 1
78125: NEG
78126: PUSH
78127: LD_INT 3
78129: NEG
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: PUSH
78135: LD_INT 0
78137: PUSH
78138: LD_INT 3
78140: NEG
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: PUSH
78146: LD_INT 1
78148: PUSH
78149: LD_INT 2
78151: NEG
78152: PUSH
78153: EMPTY
78154: LIST
78155: LIST
78156: PUSH
78157: EMPTY
78158: LIST
78159: LIST
78160: LIST
78161: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
78162: LD_ADDR_VAR 0 54
78166: PUSH
78167: LD_INT 2
78169: PUSH
78170: LD_INT 1
78172: NEG
78173: PUSH
78174: EMPTY
78175: LIST
78176: LIST
78177: PUSH
78178: LD_INT 3
78180: PUSH
78181: LD_INT 0
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: PUSH
78188: LD_INT 3
78190: PUSH
78191: LD_INT 1
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: PUSH
78198: EMPTY
78199: LIST
78200: LIST
78201: LIST
78202: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
78203: LD_ADDR_VAR 0 55
78207: PUSH
78208: LD_INT 3
78210: PUSH
78211: LD_INT 2
78213: PUSH
78214: EMPTY
78215: LIST
78216: LIST
78217: PUSH
78218: LD_INT 3
78220: PUSH
78221: LD_INT 3
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: PUSH
78228: LD_INT 2
78230: PUSH
78231: LD_INT 3
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: PUSH
78238: EMPTY
78239: LIST
78240: LIST
78241: LIST
78242: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
78243: LD_ADDR_VAR 0 56
78247: PUSH
78248: LD_INT 1
78250: PUSH
78251: LD_INT 3
78253: PUSH
78254: EMPTY
78255: LIST
78256: LIST
78257: PUSH
78258: LD_INT 0
78260: PUSH
78261: LD_INT 3
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: PUSH
78268: LD_INT 1
78270: NEG
78271: PUSH
78272: LD_INT 2
78274: PUSH
78275: EMPTY
78276: LIST
78277: LIST
78278: PUSH
78279: EMPTY
78280: LIST
78281: LIST
78282: LIST
78283: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78284: LD_ADDR_VAR 0 57
78288: PUSH
78289: LD_INT 2
78291: NEG
78292: PUSH
78293: LD_INT 1
78295: PUSH
78296: EMPTY
78297: LIST
78298: LIST
78299: PUSH
78300: LD_INT 3
78302: NEG
78303: PUSH
78304: LD_INT 0
78306: PUSH
78307: EMPTY
78308: LIST
78309: LIST
78310: PUSH
78311: LD_INT 3
78313: NEG
78314: PUSH
78315: LD_INT 1
78317: NEG
78318: PUSH
78319: EMPTY
78320: LIST
78321: LIST
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: LIST
78327: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78328: LD_ADDR_VAR 0 58
78332: PUSH
78333: LD_INT 2
78335: NEG
78336: PUSH
78337: LD_INT 3
78339: NEG
78340: PUSH
78341: EMPTY
78342: LIST
78343: LIST
78344: PUSH
78345: LD_INT 3
78347: NEG
78348: PUSH
78349: LD_INT 2
78351: NEG
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: PUSH
78357: LD_INT 3
78359: NEG
78360: PUSH
78361: LD_INT 3
78363: NEG
78364: PUSH
78365: EMPTY
78366: LIST
78367: LIST
78368: PUSH
78369: EMPTY
78370: LIST
78371: LIST
78372: LIST
78373: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
78374: LD_ADDR_VAR 0 59
78378: PUSH
78379: LD_INT 1
78381: NEG
78382: PUSH
78383: LD_INT 2
78385: NEG
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: PUSH
78391: LD_INT 0
78393: PUSH
78394: LD_INT 2
78396: NEG
78397: PUSH
78398: EMPTY
78399: LIST
78400: LIST
78401: PUSH
78402: LD_INT 1
78404: PUSH
78405: LD_INT 1
78407: NEG
78408: PUSH
78409: EMPTY
78410: LIST
78411: LIST
78412: PUSH
78413: EMPTY
78414: LIST
78415: LIST
78416: LIST
78417: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78418: LD_ADDR_VAR 0 60
78422: PUSH
78423: LD_INT 1
78425: PUSH
78426: LD_INT 1
78428: NEG
78429: PUSH
78430: EMPTY
78431: LIST
78432: LIST
78433: PUSH
78434: LD_INT 2
78436: PUSH
78437: LD_INT 0
78439: PUSH
78440: EMPTY
78441: LIST
78442: LIST
78443: PUSH
78444: LD_INT 2
78446: PUSH
78447: LD_INT 1
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PUSH
78454: EMPTY
78455: LIST
78456: LIST
78457: LIST
78458: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78459: LD_ADDR_VAR 0 61
78463: PUSH
78464: LD_INT 2
78466: PUSH
78467: LD_INT 1
78469: PUSH
78470: EMPTY
78471: LIST
78472: LIST
78473: PUSH
78474: LD_INT 2
78476: PUSH
78477: LD_INT 2
78479: PUSH
78480: EMPTY
78481: LIST
78482: LIST
78483: PUSH
78484: LD_INT 1
78486: PUSH
78487: LD_INT 2
78489: PUSH
78490: EMPTY
78491: LIST
78492: LIST
78493: PUSH
78494: EMPTY
78495: LIST
78496: LIST
78497: LIST
78498: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78499: LD_ADDR_VAR 0 62
78503: PUSH
78504: LD_INT 1
78506: PUSH
78507: LD_INT 2
78509: PUSH
78510: EMPTY
78511: LIST
78512: LIST
78513: PUSH
78514: LD_INT 0
78516: PUSH
78517: LD_INT 2
78519: PUSH
78520: EMPTY
78521: LIST
78522: LIST
78523: PUSH
78524: LD_INT 1
78526: NEG
78527: PUSH
78528: LD_INT 1
78530: PUSH
78531: EMPTY
78532: LIST
78533: LIST
78534: PUSH
78535: EMPTY
78536: LIST
78537: LIST
78538: LIST
78539: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78540: LD_ADDR_VAR 0 63
78544: PUSH
78545: LD_INT 1
78547: NEG
78548: PUSH
78549: LD_INT 1
78551: PUSH
78552: EMPTY
78553: LIST
78554: LIST
78555: PUSH
78556: LD_INT 2
78558: NEG
78559: PUSH
78560: LD_INT 0
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: PUSH
78567: LD_INT 2
78569: NEG
78570: PUSH
78571: LD_INT 1
78573: NEG
78574: PUSH
78575: EMPTY
78576: LIST
78577: LIST
78578: PUSH
78579: EMPTY
78580: LIST
78581: LIST
78582: LIST
78583: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78584: LD_ADDR_VAR 0 64
78588: PUSH
78589: LD_INT 1
78591: NEG
78592: PUSH
78593: LD_INT 2
78595: NEG
78596: PUSH
78597: EMPTY
78598: LIST
78599: LIST
78600: PUSH
78601: LD_INT 2
78603: NEG
78604: PUSH
78605: LD_INT 1
78607: NEG
78608: PUSH
78609: EMPTY
78610: LIST
78611: LIST
78612: PUSH
78613: LD_INT 2
78615: NEG
78616: PUSH
78617: LD_INT 2
78619: NEG
78620: PUSH
78621: EMPTY
78622: LIST
78623: LIST
78624: PUSH
78625: EMPTY
78626: LIST
78627: LIST
78628: LIST
78629: ST_TO_ADDR
// end ; 2 :
78630: GO 81896
78632: LD_INT 2
78634: DOUBLE
78635: EQUAL
78636: IFTRUE 78640
78638: GO 81895
78640: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
78641: LD_ADDR_VAR 0 29
78645: PUSH
78646: LD_INT 4
78648: PUSH
78649: LD_INT 0
78651: PUSH
78652: EMPTY
78653: LIST
78654: LIST
78655: PUSH
78656: LD_INT 4
78658: PUSH
78659: LD_INT 1
78661: NEG
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: PUSH
78667: LD_INT 5
78669: PUSH
78670: LD_INT 0
78672: PUSH
78673: EMPTY
78674: LIST
78675: LIST
78676: PUSH
78677: LD_INT 5
78679: PUSH
78680: LD_INT 1
78682: PUSH
78683: EMPTY
78684: LIST
78685: LIST
78686: PUSH
78687: LD_INT 4
78689: PUSH
78690: LD_INT 1
78692: PUSH
78693: EMPTY
78694: LIST
78695: LIST
78696: PUSH
78697: LD_INT 3
78699: PUSH
78700: LD_INT 0
78702: PUSH
78703: EMPTY
78704: LIST
78705: LIST
78706: PUSH
78707: LD_INT 3
78709: PUSH
78710: LD_INT 1
78712: NEG
78713: PUSH
78714: EMPTY
78715: LIST
78716: LIST
78717: PUSH
78718: LD_INT 3
78720: PUSH
78721: LD_INT 2
78723: NEG
78724: PUSH
78725: EMPTY
78726: LIST
78727: LIST
78728: PUSH
78729: LD_INT 5
78731: PUSH
78732: LD_INT 2
78734: PUSH
78735: EMPTY
78736: LIST
78737: LIST
78738: PUSH
78739: LD_INT 3
78741: PUSH
78742: LD_INT 3
78744: PUSH
78745: EMPTY
78746: LIST
78747: LIST
78748: PUSH
78749: LD_INT 3
78751: PUSH
78752: LD_INT 2
78754: PUSH
78755: EMPTY
78756: LIST
78757: LIST
78758: PUSH
78759: LD_INT 4
78761: PUSH
78762: LD_INT 3
78764: PUSH
78765: EMPTY
78766: LIST
78767: LIST
78768: PUSH
78769: LD_INT 4
78771: PUSH
78772: LD_INT 4
78774: PUSH
78775: EMPTY
78776: LIST
78777: LIST
78778: PUSH
78779: LD_INT 3
78781: PUSH
78782: LD_INT 4
78784: PUSH
78785: EMPTY
78786: LIST
78787: LIST
78788: PUSH
78789: LD_INT 2
78791: PUSH
78792: LD_INT 3
78794: PUSH
78795: EMPTY
78796: LIST
78797: LIST
78798: PUSH
78799: LD_INT 2
78801: PUSH
78802: LD_INT 2
78804: PUSH
78805: EMPTY
78806: LIST
78807: LIST
78808: PUSH
78809: LD_INT 4
78811: PUSH
78812: LD_INT 2
78814: PUSH
78815: EMPTY
78816: LIST
78817: LIST
78818: PUSH
78819: LD_INT 2
78821: PUSH
78822: LD_INT 4
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: PUSH
78829: LD_INT 0
78831: PUSH
78832: LD_INT 4
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PUSH
78839: LD_INT 0
78841: PUSH
78842: LD_INT 3
78844: PUSH
78845: EMPTY
78846: LIST
78847: LIST
78848: PUSH
78849: LD_INT 1
78851: PUSH
78852: LD_INT 4
78854: PUSH
78855: EMPTY
78856: LIST
78857: LIST
78858: PUSH
78859: LD_INT 1
78861: PUSH
78862: LD_INT 5
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: PUSH
78869: LD_INT 0
78871: PUSH
78872: LD_INT 5
78874: PUSH
78875: EMPTY
78876: LIST
78877: LIST
78878: PUSH
78879: LD_INT 1
78881: NEG
78882: PUSH
78883: LD_INT 4
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 1
78892: NEG
78893: PUSH
78894: LD_INT 3
78896: PUSH
78897: EMPTY
78898: LIST
78899: LIST
78900: PUSH
78901: LD_INT 2
78903: PUSH
78904: LD_INT 5
78906: PUSH
78907: EMPTY
78908: LIST
78909: LIST
78910: PUSH
78911: LD_INT 2
78913: NEG
78914: PUSH
78915: LD_INT 3
78917: PUSH
78918: EMPTY
78919: LIST
78920: LIST
78921: PUSH
78922: LD_INT 3
78924: NEG
78925: PUSH
78926: LD_INT 0
78928: PUSH
78929: EMPTY
78930: LIST
78931: LIST
78932: PUSH
78933: LD_INT 3
78935: NEG
78936: PUSH
78937: LD_INT 1
78939: NEG
78940: PUSH
78941: EMPTY
78942: LIST
78943: LIST
78944: PUSH
78945: LD_INT 2
78947: NEG
78948: PUSH
78949: LD_INT 0
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: PUSH
78956: LD_INT 2
78958: NEG
78959: PUSH
78960: LD_INT 1
78962: PUSH
78963: EMPTY
78964: LIST
78965: LIST
78966: PUSH
78967: LD_INT 3
78969: NEG
78970: PUSH
78971: LD_INT 1
78973: PUSH
78974: EMPTY
78975: LIST
78976: LIST
78977: PUSH
78978: LD_INT 4
78980: NEG
78981: PUSH
78982: LD_INT 0
78984: PUSH
78985: EMPTY
78986: LIST
78987: LIST
78988: PUSH
78989: LD_INT 4
78991: NEG
78992: PUSH
78993: LD_INT 1
78995: NEG
78996: PUSH
78997: EMPTY
78998: LIST
78999: LIST
79000: PUSH
79001: LD_INT 4
79003: NEG
79004: PUSH
79005: LD_INT 2
79007: NEG
79008: PUSH
79009: EMPTY
79010: LIST
79011: LIST
79012: PUSH
79013: LD_INT 2
79015: NEG
79016: PUSH
79017: LD_INT 2
79019: PUSH
79020: EMPTY
79021: LIST
79022: LIST
79023: PUSH
79024: LD_INT 4
79026: NEG
79027: PUSH
79028: LD_INT 4
79030: NEG
79031: PUSH
79032: EMPTY
79033: LIST
79034: LIST
79035: PUSH
79036: LD_INT 4
79038: NEG
79039: PUSH
79040: LD_INT 5
79042: NEG
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: PUSH
79048: LD_INT 3
79050: NEG
79051: PUSH
79052: LD_INT 4
79054: NEG
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: PUSH
79060: LD_INT 3
79062: NEG
79063: PUSH
79064: LD_INT 3
79066: NEG
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: PUSH
79072: LD_INT 4
79074: NEG
79075: PUSH
79076: LD_INT 3
79078: NEG
79079: PUSH
79080: EMPTY
79081: LIST
79082: LIST
79083: PUSH
79084: LD_INT 5
79086: NEG
79087: PUSH
79088: LD_INT 4
79090: NEG
79091: PUSH
79092: EMPTY
79093: LIST
79094: LIST
79095: PUSH
79096: LD_INT 5
79098: NEG
79099: PUSH
79100: LD_INT 5
79102: NEG
79103: PUSH
79104: EMPTY
79105: LIST
79106: LIST
79107: PUSH
79108: LD_INT 3
79110: NEG
79111: PUSH
79112: LD_INT 5
79114: NEG
79115: PUSH
79116: EMPTY
79117: LIST
79118: LIST
79119: PUSH
79120: LD_INT 5
79122: NEG
79123: PUSH
79124: LD_INT 3
79126: NEG
79127: PUSH
79128: EMPTY
79129: LIST
79130: LIST
79131: PUSH
79132: EMPTY
79133: LIST
79134: LIST
79135: LIST
79136: LIST
79137: LIST
79138: LIST
79139: LIST
79140: LIST
79141: LIST
79142: LIST
79143: LIST
79144: LIST
79145: LIST
79146: LIST
79147: LIST
79148: LIST
79149: LIST
79150: LIST
79151: LIST
79152: LIST
79153: LIST
79154: LIST
79155: LIST
79156: LIST
79157: LIST
79158: LIST
79159: LIST
79160: LIST
79161: LIST
79162: LIST
79163: LIST
79164: LIST
79165: LIST
79166: LIST
79167: LIST
79168: LIST
79169: LIST
79170: LIST
79171: LIST
79172: LIST
79173: LIST
79174: LIST
79175: LIST
79176: LIST
79177: LIST
79178: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
79179: LD_ADDR_VAR 0 30
79183: PUSH
79184: LD_INT 4
79186: PUSH
79187: LD_INT 4
79189: PUSH
79190: EMPTY
79191: LIST
79192: LIST
79193: PUSH
79194: LD_INT 4
79196: PUSH
79197: LD_INT 3
79199: PUSH
79200: EMPTY
79201: LIST
79202: LIST
79203: PUSH
79204: LD_INT 5
79206: PUSH
79207: LD_INT 4
79209: PUSH
79210: EMPTY
79211: LIST
79212: LIST
79213: PUSH
79214: LD_INT 5
79216: PUSH
79217: LD_INT 5
79219: PUSH
79220: EMPTY
79221: LIST
79222: LIST
79223: PUSH
79224: LD_INT 4
79226: PUSH
79227: LD_INT 5
79229: PUSH
79230: EMPTY
79231: LIST
79232: LIST
79233: PUSH
79234: LD_INT 3
79236: PUSH
79237: LD_INT 4
79239: PUSH
79240: EMPTY
79241: LIST
79242: LIST
79243: PUSH
79244: LD_INT 3
79246: PUSH
79247: LD_INT 3
79249: PUSH
79250: EMPTY
79251: LIST
79252: LIST
79253: PUSH
79254: LD_INT 5
79256: PUSH
79257: LD_INT 3
79259: PUSH
79260: EMPTY
79261: LIST
79262: LIST
79263: PUSH
79264: LD_INT 3
79266: PUSH
79267: LD_INT 5
79269: PUSH
79270: EMPTY
79271: LIST
79272: LIST
79273: PUSH
79274: LD_INT 0
79276: PUSH
79277: LD_INT 3
79279: PUSH
79280: EMPTY
79281: LIST
79282: LIST
79283: PUSH
79284: LD_INT 0
79286: PUSH
79287: LD_INT 2
79289: PUSH
79290: EMPTY
79291: LIST
79292: LIST
79293: PUSH
79294: LD_INT 1
79296: PUSH
79297: LD_INT 3
79299: PUSH
79300: EMPTY
79301: LIST
79302: LIST
79303: PUSH
79304: LD_INT 1
79306: PUSH
79307: LD_INT 4
79309: PUSH
79310: EMPTY
79311: LIST
79312: LIST
79313: PUSH
79314: LD_INT 0
79316: PUSH
79317: LD_INT 4
79319: PUSH
79320: EMPTY
79321: LIST
79322: LIST
79323: PUSH
79324: LD_INT 1
79326: NEG
79327: PUSH
79328: LD_INT 3
79330: PUSH
79331: EMPTY
79332: LIST
79333: LIST
79334: PUSH
79335: LD_INT 1
79337: NEG
79338: PUSH
79339: LD_INT 2
79341: PUSH
79342: EMPTY
79343: LIST
79344: LIST
79345: PUSH
79346: LD_INT 2
79348: PUSH
79349: LD_INT 4
79351: PUSH
79352: EMPTY
79353: LIST
79354: LIST
79355: PUSH
79356: LD_INT 2
79358: NEG
79359: PUSH
79360: LD_INT 2
79362: PUSH
79363: EMPTY
79364: LIST
79365: LIST
79366: PUSH
79367: LD_INT 4
79369: NEG
79370: PUSH
79371: LD_INT 0
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: PUSH
79378: LD_INT 4
79380: NEG
79381: PUSH
79382: LD_INT 1
79384: NEG
79385: PUSH
79386: EMPTY
79387: LIST
79388: LIST
79389: PUSH
79390: LD_INT 3
79392: NEG
79393: PUSH
79394: LD_INT 0
79396: PUSH
79397: EMPTY
79398: LIST
79399: LIST
79400: PUSH
79401: LD_INT 3
79403: NEG
79404: PUSH
79405: LD_INT 1
79407: PUSH
79408: EMPTY
79409: LIST
79410: LIST
79411: PUSH
79412: LD_INT 4
79414: NEG
79415: PUSH
79416: LD_INT 1
79418: PUSH
79419: EMPTY
79420: LIST
79421: LIST
79422: PUSH
79423: LD_INT 5
79425: NEG
79426: PUSH
79427: LD_INT 0
79429: PUSH
79430: EMPTY
79431: LIST
79432: LIST
79433: PUSH
79434: LD_INT 5
79436: NEG
79437: PUSH
79438: LD_INT 1
79440: NEG
79441: PUSH
79442: EMPTY
79443: LIST
79444: LIST
79445: PUSH
79446: LD_INT 5
79448: NEG
79449: PUSH
79450: LD_INT 2
79452: NEG
79453: PUSH
79454: EMPTY
79455: LIST
79456: LIST
79457: PUSH
79458: LD_INT 3
79460: NEG
79461: PUSH
79462: LD_INT 2
79464: PUSH
79465: EMPTY
79466: LIST
79467: LIST
79468: PUSH
79469: LD_INT 3
79471: NEG
79472: PUSH
79473: LD_INT 3
79475: NEG
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: PUSH
79481: LD_INT 3
79483: NEG
79484: PUSH
79485: LD_INT 4
79487: NEG
79488: PUSH
79489: EMPTY
79490: LIST
79491: LIST
79492: PUSH
79493: LD_INT 2
79495: NEG
79496: PUSH
79497: LD_INT 3
79499: NEG
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: PUSH
79505: LD_INT 2
79507: NEG
79508: PUSH
79509: LD_INT 2
79511: NEG
79512: PUSH
79513: EMPTY
79514: LIST
79515: LIST
79516: PUSH
79517: LD_INT 3
79519: NEG
79520: PUSH
79521: LD_INT 2
79523: NEG
79524: PUSH
79525: EMPTY
79526: LIST
79527: LIST
79528: PUSH
79529: LD_INT 4
79531: NEG
79532: PUSH
79533: LD_INT 3
79535: NEG
79536: PUSH
79537: EMPTY
79538: LIST
79539: LIST
79540: PUSH
79541: LD_INT 4
79543: NEG
79544: PUSH
79545: LD_INT 4
79547: NEG
79548: PUSH
79549: EMPTY
79550: LIST
79551: LIST
79552: PUSH
79553: LD_INT 2
79555: NEG
79556: PUSH
79557: LD_INT 4
79559: NEG
79560: PUSH
79561: EMPTY
79562: LIST
79563: LIST
79564: PUSH
79565: LD_INT 4
79567: NEG
79568: PUSH
79569: LD_INT 2
79571: NEG
79572: PUSH
79573: EMPTY
79574: LIST
79575: LIST
79576: PUSH
79577: LD_INT 0
79579: PUSH
79580: LD_INT 4
79582: NEG
79583: PUSH
79584: EMPTY
79585: LIST
79586: LIST
79587: PUSH
79588: LD_INT 0
79590: PUSH
79591: LD_INT 5
79593: NEG
79594: PUSH
79595: EMPTY
79596: LIST
79597: LIST
79598: PUSH
79599: LD_INT 1
79601: PUSH
79602: LD_INT 4
79604: NEG
79605: PUSH
79606: EMPTY
79607: LIST
79608: LIST
79609: PUSH
79610: LD_INT 1
79612: PUSH
79613: LD_INT 3
79615: NEG
79616: PUSH
79617: EMPTY
79618: LIST
79619: LIST
79620: PUSH
79621: LD_INT 0
79623: PUSH
79624: LD_INT 3
79626: NEG
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: PUSH
79632: LD_INT 1
79634: NEG
79635: PUSH
79636: LD_INT 4
79638: NEG
79639: PUSH
79640: EMPTY
79641: LIST
79642: LIST
79643: PUSH
79644: LD_INT 1
79646: NEG
79647: PUSH
79648: LD_INT 5
79650: NEG
79651: PUSH
79652: EMPTY
79653: LIST
79654: LIST
79655: PUSH
79656: LD_INT 2
79658: PUSH
79659: LD_INT 3
79661: NEG
79662: PUSH
79663: EMPTY
79664: LIST
79665: LIST
79666: PUSH
79667: LD_INT 2
79669: NEG
79670: PUSH
79671: LD_INT 5
79673: NEG
79674: PUSH
79675: EMPTY
79676: LIST
79677: LIST
79678: PUSH
79679: EMPTY
79680: LIST
79681: LIST
79682: LIST
79683: LIST
79684: LIST
79685: LIST
79686: LIST
79687: LIST
79688: LIST
79689: LIST
79690: LIST
79691: LIST
79692: LIST
79693: LIST
79694: LIST
79695: LIST
79696: LIST
79697: LIST
79698: LIST
79699: LIST
79700: LIST
79701: LIST
79702: LIST
79703: LIST
79704: LIST
79705: LIST
79706: LIST
79707: LIST
79708: LIST
79709: LIST
79710: LIST
79711: LIST
79712: LIST
79713: LIST
79714: LIST
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: LIST
79720: LIST
79721: LIST
79722: LIST
79723: LIST
79724: LIST
79725: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
79726: LD_ADDR_VAR 0 31
79730: PUSH
79731: LD_INT 0
79733: PUSH
79734: LD_INT 4
79736: PUSH
79737: EMPTY
79738: LIST
79739: LIST
79740: PUSH
79741: LD_INT 0
79743: PUSH
79744: LD_INT 3
79746: PUSH
79747: EMPTY
79748: LIST
79749: LIST
79750: PUSH
79751: LD_INT 1
79753: PUSH
79754: LD_INT 4
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: PUSH
79761: LD_INT 1
79763: PUSH
79764: LD_INT 5
79766: PUSH
79767: EMPTY
79768: LIST
79769: LIST
79770: PUSH
79771: LD_INT 0
79773: PUSH
79774: LD_INT 5
79776: PUSH
79777: EMPTY
79778: LIST
79779: LIST
79780: PUSH
79781: LD_INT 1
79783: NEG
79784: PUSH
79785: LD_INT 4
79787: PUSH
79788: EMPTY
79789: LIST
79790: LIST
79791: PUSH
79792: LD_INT 1
79794: NEG
79795: PUSH
79796: LD_INT 3
79798: PUSH
79799: EMPTY
79800: LIST
79801: LIST
79802: PUSH
79803: LD_INT 2
79805: PUSH
79806: LD_INT 5
79808: PUSH
79809: EMPTY
79810: LIST
79811: LIST
79812: PUSH
79813: LD_INT 2
79815: NEG
79816: PUSH
79817: LD_INT 3
79819: PUSH
79820: EMPTY
79821: LIST
79822: LIST
79823: PUSH
79824: LD_INT 3
79826: NEG
79827: PUSH
79828: LD_INT 0
79830: PUSH
79831: EMPTY
79832: LIST
79833: LIST
79834: PUSH
79835: LD_INT 3
79837: NEG
79838: PUSH
79839: LD_INT 1
79841: NEG
79842: PUSH
79843: EMPTY
79844: LIST
79845: LIST
79846: PUSH
79847: LD_INT 2
79849: NEG
79850: PUSH
79851: LD_INT 0
79853: PUSH
79854: EMPTY
79855: LIST
79856: LIST
79857: PUSH
79858: LD_INT 2
79860: NEG
79861: PUSH
79862: LD_INT 1
79864: PUSH
79865: EMPTY
79866: LIST
79867: LIST
79868: PUSH
79869: LD_INT 3
79871: NEG
79872: PUSH
79873: LD_INT 1
79875: PUSH
79876: EMPTY
79877: LIST
79878: LIST
79879: PUSH
79880: LD_INT 4
79882: NEG
79883: PUSH
79884: LD_INT 0
79886: PUSH
79887: EMPTY
79888: LIST
79889: LIST
79890: PUSH
79891: LD_INT 4
79893: NEG
79894: PUSH
79895: LD_INT 1
79897: NEG
79898: PUSH
79899: EMPTY
79900: LIST
79901: LIST
79902: PUSH
79903: LD_INT 4
79905: NEG
79906: PUSH
79907: LD_INT 2
79909: NEG
79910: PUSH
79911: EMPTY
79912: LIST
79913: LIST
79914: PUSH
79915: LD_INT 2
79917: NEG
79918: PUSH
79919: LD_INT 2
79921: PUSH
79922: EMPTY
79923: LIST
79924: LIST
79925: PUSH
79926: LD_INT 4
79928: NEG
79929: PUSH
79930: LD_INT 4
79932: NEG
79933: PUSH
79934: EMPTY
79935: LIST
79936: LIST
79937: PUSH
79938: LD_INT 4
79940: NEG
79941: PUSH
79942: LD_INT 5
79944: NEG
79945: PUSH
79946: EMPTY
79947: LIST
79948: LIST
79949: PUSH
79950: LD_INT 3
79952: NEG
79953: PUSH
79954: LD_INT 4
79956: NEG
79957: PUSH
79958: EMPTY
79959: LIST
79960: LIST
79961: PUSH
79962: LD_INT 3
79964: NEG
79965: PUSH
79966: LD_INT 3
79968: NEG
79969: PUSH
79970: EMPTY
79971: LIST
79972: LIST
79973: PUSH
79974: LD_INT 4
79976: NEG
79977: PUSH
79978: LD_INT 3
79980: NEG
79981: PUSH
79982: EMPTY
79983: LIST
79984: LIST
79985: PUSH
79986: LD_INT 5
79988: NEG
79989: PUSH
79990: LD_INT 4
79992: NEG
79993: PUSH
79994: EMPTY
79995: LIST
79996: LIST
79997: PUSH
79998: LD_INT 5
80000: NEG
80001: PUSH
80002: LD_INT 5
80004: NEG
80005: PUSH
80006: EMPTY
80007: LIST
80008: LIST
80009: PUSH
80010: LD_INT 3
80012: NEG
80013: PUSH
80014: LD_INT 5
80016: NEG
80017: PUSH
80018: EMPTY
80019: LIST
80020: LIST
80021: PUSH
80022: LD_INT 5
80024: NEG
80025: PUSH
80026: LD_INT 3
80028: NEG
80029: PUSH
80030: EMPTY
80031: LIST
80032: LIST
80033: PUSH
80034: LD_INT 0
80036: PUSH
80037: LD_INT 3
80039: NEG
80040: PUSH
80041: EMPTY
80042: LIST
80043: LIST
80044: PUSH
80045: LD_INT 0
80047: PUSH
80048: LD_INT 4
80050: NEG
80051: PUSH
80052: EMPTY
80053: LIST
80054: LIST
80055: PUSH
80056: LD_INT 1
80058: PUSH
80059: LD_INT 3
80061: NEG
80062: PUSH
80063: EMPTY
80064: LIST
80065: LIST
80066: PUSH
80067: LD_INT 1
80069: PUSH
80070: LD_INT 2
80072: NEG
80073: PUSH
80074: EMPTY
80075: LIST
80076: LIST
80077: PUSH
80078: LD_INT 0
80080: PUSH
80081: LD_INT 2
80083: NEG
80084: PUSH
80085: EMPTY
80086: LIST
80087: LIST
80088: PUSH
80089: LD_INT 1
80091: NEG
80092: PUSH
80093: LD_INT 3
80095: NEG
80096: PUSH
80097: EMPTY
80098: LIST
80099: LIST
80100: PUSH
80101: LD_INT 1
80103: NEG
80104: PUSH
80105: LD_INT 4
80107: NEG
80108: PUSH
80109: EMPTY
80110: LIST
80111: LIST
80112: PUSH
80113: LD_INT 2
80115: PUSH
80116: LD_INT 2
80118: NEG
80119: PUSH
80120: EMPTY
80121: LIST
80122: LIST
80123: PUSH
80124: LD_INT 2
80126: NEG
80127: PUSH
80128: LD_INT 4
80130: NEG
80131: PUSH
80132: EMPTY
80133: LIST
80134: LIST
80135: PUSH
80136: LD_INT 4
80138: PUSH
80139: LD_INT 0
80141: PUSH
80142: EMPTY
80143: LIST
80144: LIST
80145: PUSH
80146: LD_INT 4
80148: PUSH
80149: LD_INT 1
80151: NEG
80152: PUSH
80153: EMPTY
80154: LIST
80155: LIST
80156: PUSH
80157: LD_INT 5
80159: PUSH
80160: LD_INT 0
80162: PUSH
80163: EMPTY
80164: LIST
80165: LIST
80166: PUSH
80167: LD_INT 5
80169: PUSH
80170: LD_INT 1
80172: PUSH
80173: EMPTY
80174: LIST
80175: LIST
80176: PUSH
80177: LD_INT 4
80179: PUSH
80180: LD_INT 1
80182: PUSH
80183: EMPTY
80184: LIST
80185: LIST
80186: PUSH
80187: LD_INT 3
80189: PUSH
80190: LD_INT 0
80192: PUSH
80193: EMPTY
80194: LIST
80195: LIST
80196: PUSH
80197: LD_INT 3
80199: PUSH
80200: LD_INT 1
80202: NEG
80203: PUSH
80204: EMPTY
80205: LIST
80206: LIST
80207: PUSH
80208: LD_INT 3
80210: PUSH
80211: LD_INT 2
80213: NEG
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: PUSH
80219: LD_INT 5
80221: PUSH
80222: LD_INT 2
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: PUSH
80229: EMPTY
80230: LIST
80231: LIST
80232: LIST
80233: LIST
80234: LIST
80235: LIST
80236: LIST
80237: LIST
80238: LIST
80239: LIST
80240: LIST
80241: LIST
80242: LIST
80243: LIST
80244: LIST
80245: LIST
80246: LIST
80247: LIST
80248: LIST
80249: LIST
80250: LIST
80251: LIST
80252: LIST
80253: LIST
80254: LIST
80255: LIST
80256: LIST
80257: LIST
80258: LIST
80259: LIST
80260: LIST
80261: LIST
80262: LIST
80263: LIST
80264: LIST
80265: LIST
80266: LIST
80267: LIST
80268: LIST
80269: LIST
80270: LIST
80271: LIST
80272: LIST
80273: LIST
80274: LIST
80275: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
80276: LD_ADDR_VAR 0 32
80280: PUSH
80281: LD_INT 4
80283: NEG
80284: PUSH
80285: LD_INT 0
80287: PUSH
80288: EMPTY
80289: LIST
80290: LIST
80291: PUSH
80292: LD_INT 4
80294: NEG
80295: PUSH
80296: LD_INT 1
80298: NEG
80299: PUSH
80300: EMPTY
80301: LIST
80302: LIST
80303: PUSH
80304: LD_INT 3
80306: NEG
80307: PUSH
80308: LD_INT 0
80310: PUSH
80311: EMPTY
80312: LIST
80313: LIST
80314: PUSH
80315: LD_INT 3
80317: NEG
80318: PUSH
80319: LD_INT 1
80321: PUSH
80322: EMPTY
80323: LIST
80324: LIST
80325: PUSH
80326: LD_INT 4
80328: NEG
80329: PUSH
80330: LD_INT 1
80332: PUSH
80333: EMPTY
80334: LIST
80335: LIST
80336: PUSH
80337: LD_INT 5
80339: NEG
80340: PUSH
80341: LD_INT 0
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PUSH
80348: LD_INT 5
80350: NEG
80351: PUSH
80352: LD_INT 1
80354: NEG
80355: PUSH
80356: EMPTY
80357: LIST
80358: LIST
80359: PUSH
80360: LD_INT 5
80362: NEG
80363: PUSH
80364: LD_INT 2
80366: NEG
80367: PUSH
80368: EMPTY
80369: LIST
80370: LIST
80371: PUSH
80372: LD_INT 3
80374: NEG
80375: PUSH
80376: LD_INT 2
80378: PUSH
80379: EMPTY
80380: LIST
80381: LIST
80382: PUSH
80383: LD_INT 3
80385: NEG
80386: PUSH
80387: LD_INT 3
80389: NEG
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 3
80397: NEG
80398: PUSH
80399: LD_INT 4
80401: NEG
80402: PUSH
80403: EMPTY
80404: LIST
80405: LIST
80406: PUSH
80407: LD_INT 2
80409: NEG
80410: PUSH
80411: LD_INT 3
80413: NEG
80414: PUSH
80415: EMPTY
80416: LIST
80417: LIST
80418: PUSH
80419: LD_INT 2
80421: NEG
80422: PUSH
80423: LD_INT 2
80425: NEG
80426: PUSH
80427: EMPTY
80428: LIST
80429: LIST
80430: PUSH
80431: LD_INT 3
80433: NEG
80434: PUSH
80435: LD_INT 2
80437: NEG
80438: PUSH
80439: EMPTY
80440: LIST
80441: LIST
80442: PUSH
80443: LD_INT 4
80445: NEG
80446: PUSH
80447: LD_INT 3
80449: NEG
80450: PUSH
80451: EMPTY
80452: LIST
80453: LIST
80454: PUSH
80455: LD_INT 4
80457: NEG
80458: PUSH
80459: LD_INT 4
80461: NEG
80462: PUSH
80463: EMPTY
80464: LIST
80465: LIST
80466: PUSH
80467: LD_INT 2
80469: NEG
80470: PUSH
80471: LD_INT 4
80473: NEG
80474: PUSH
80475: EMPTY
80476: LIST
80477: LIST
80478: PUSH
80479: LD_INT 4
80481: NEG
80482: PUSH
80483: LD_INT 2
80485: NEG
80486: PUSH
80487: EMPTY
80488: LIST
80489: LIST
80490: PUSH
80491: LD_INT 0
80493: PUSH
80494: LD_INT 4
80496: NEG
80497: PUSH
80498: EMPTY
80499: LIST
80500: LIST
80501: PUSH
80502: LD_INT 0
80504: PUSH
80505: LD_INT 5
80507: NEG
80508: PUSH
80509: EMPTY
80510: LIST
80511: LIST
80512: PUSH
80513: LD_INT 1
80515: PUSH
80516: LD_INT 4
80518: NEG
80519: PUSH
80520: EMPTY
80521: LIST
80522: LIST
80523: PUSH
80524: LD_INT 1
80526: PUSH
80527: LD_INT 3
80529: NEG
80530: PUSH
80531: EMPTY
80532: LIST
80533: LIST
80534: PUSH
80535: LD_INT 0
80537: PUSH
80538: LD_INT 3
80540: NEG
80541: PUSH
80542: EMPTY
80543: LIST
80544: LIST
80545: PUSH
80546: LD_INT 1
80548: NEG
80549: PUSH
80550: LD_INT 4
80552: NEG
80553: PUSH
80554: EMPTY
80555: LIST
80556: LIST
80557: PUSH
80558: LD_INT 1
80560: NEG
80561: PUSH
80562: LD_INT 5
80564: NEG
80565: PUSH
80566: EMPTY
80567: LIST
80568: LIST
80569: PUSH
80570: LD_INT 2
80572: PUSH
80573: LD_INT 3
80575: NEG
80576: PUSH
80577: EMPTY
80578: LIST
80579: LIST
80580: PUSH
80581: LD_INT 2
80583: NEG
80584: PUSH
80585: LD_INT 5
80587: NEG
80588: PUSH
80589: EMPTY
80590: LIST
80591: LIST
80592: PUSH
80593: LD_INT 3
80595: PUSH
80596: LD_INT 0
80598: PUSH
80599: EMPTY
80600: LIST
80601: LIST
80602: PUSH
80603: LD_INT 3
80605: PUSH
80606: LD_INT 1
80608: NEG
80609: PUSH
80610: EMPTY
80611: LIST
80612: LIST
80613: PUSH
80614: LD_INT 4
80616: PUSH
80617: LD_INT 0
80619: PUSH
80620: EMPTY
80621: LIST
80622: LIST
80623: PUSH
80624: LD_INT 4
80626: PUSH
80627: LD_INT 1
80629: PUSH
80630: EMPTY
80631: LIST
80632: LIST
80633: PUSH
80634: LD_INT 3
80636: PUSH
80637: LD_INT 1
80639: PUSH
80640: EMPTY
80641: LIST
80642: LIST
80643: PUSH
80644: LD_INT 2
80646: PUSH
80647: LD_INT 0
80649: PUSH
80650: EMPTY
80651: LIST
80652: LIST
80653: PUSH
80654: LD_INT 2
80656: PUSH
80657: LD_INT 1
80659: NEG
80660: PUSH
80661: EMPTY
80662: LIST
80663: LIST
80664: PUSH
80665: LD_INT 2
80667: PUSH
80668: LD_INT 2
80670: NEG
80671: PUSH
80672: EMPTY
80673: LIST
80674: LIST
80675: PUSH
80676: LD_INT 4
80678: PUSH
80679: LD_INT 2
80681: PUSH
80682: EMPTY
80683: LIST
80684: LIST
80685: PUSH
80686: LD_INT 4
80688: PUSH
80689: LD_INT 4
80691: PUSH
80692: EMPTY
80693: LIST
80694: LIST
80695: PUSH
80696: LD_INT 4
80698: PUSH
80699: LD_INT 3
80701: PUSH
80702: EMPTY
80703: LIST
80704: LIST
80705: PUSH
80706: LD_INT 5
80708: PUSH
80709: LD_INT 4
80711: PUSH
80712: EMPTY
80713: LIST
80714: LIST
80715: PUSH
80716: LD_INT 5
80718: PUSH
80719: LD_INT 5
80721: PUSH
80722: EMPTY
80723: LIST
80724: LIST
80725: PUSH
80726: LD_INT 4
80728: PUSH
80729: LD_INT 5
80731: PUSH
80732: EMPTY
80733: LIST
80734: LIST
80735: PUSH
80736: LD_INT 3
80738: PUSH
80739: LD_INT 4
80741: PUSH
80742: EMPTY
80743: LIST
80744: LIST
80745: PUSH
80746: LD_INT 3
80748: PUSH
80749: LD_INT 3
80751: PUSH
80752: EMPTY
80753: LIST
80754: LIST
80755: PUSH
80756: LD_INT 5
80758: PUSH
80759: LD_INT 3
80761: PUSH
80762: EMPTY
80763: LIST
80764: LIST
80765: PUSH
80766: LD_INT 3
80768: PUSH
80769: LD_INT 5
80771: PUSH
80772: EMPTY
80773: LIST
80774: LIST
80775: PUSH
80776: EMPTY
80777: LIST
80778: LIST
80779: LIST
80780: LIST
80781: LIST
80782: LIST
80783: LIST
80784: LIST
80785: LIST
80786: LIST
80787: LIST
80788: LIST
80789: LIST
80790: LIST
80791: LIST
80792: LIST
80793: LIST
80794: LIST
80795: LIST
80796: LIST
80797: LIST
80798: LIST
80799: LIST
80800: LIST
80801: LIST
80802: LIST
80803: LIST
80804: LIST
80805: LIST
80806: LIST
80807: LIST
80808: LIST
80809: LIST
80810: LIST
80811: LIST
80812: LIST
80813: LIST
80814: LIST
80815: LIST
80816: LIST
80817: LIST
80818: LIST
80819: LIST
80820: LIST
80821: LIST
80822: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
80823: LD_ADDR_VAR 0 33
80827: PUSH
80828: LD_INT 4
80830: NEG
80831: PUSH
80832: LD_INT 4
80834: NEG
80835: PUSH
80836: EMPTY
80837: LIST
80838: LIST
80839: PUSH
80840: LD_INT 4
80842: NEG
80843: PUSH
80844: LD_INT 5
80846: NEG
80847: PUSH
80848: EMPTY
80849: LIST
80850: LIST
80851: PUSH
80852: LD_INT 3
80854: NEG
80855: PUSH
80856: LD_INT 4
80858: NEG
80859: PUSH
80860: EMPTY
80861: LIST
80862: LIST
80863: PUSH
80864: LD_INT 3
80866: NEG
80867: PUSH
80868: LD_INT 3
80870: NEG
80871: PUSH
80872: EMPTY
80873: LIST
80874: LIST
80875: PUSH
80876: LD_INT 4
80878: NEG
80879: PUSH
80880: LD_INT 3
80882: NEG
80883: PUSH
80884: EMPTY
80885: LIST
80886: LIST
80887: PUSH
80888: LD_INT 5
80890: NEG
80891: PUSH
80892: LD_INT 4
80894: NEG
80895: PUSH
80896: EMPTY
80897: LIST
80898: LIST
80899: PUSH
80900: LD_INT 5
80902: NEG
80903: PUSH
80904: LD_INT 5
80906: NEG
80907: PUSH
80908: EMPTY
80909: LIST
80910: LIST
80911: PUSH
80912: LD_INT 3
80914: NEG
80915: PUSH
80916: LD_INT 5
80918: NEG
80919: PUSH
80920: EMPTY
80921: LIST
80922: LIST
80923: PUSH
80924: LD_INT 5
80926: NEG
80927: PUSH
80928: LD_INT 3
80930: NEG
80931: PUSH
80932: EMPTY
80933: LIST
80934: LIST
80935: PUSH
80936: LD_INT 0
80938: PUSH
80939: LD_INT 3
80941: NEG
80942: PUSH
80943: EMPTY
80944: LIST
80945: LIST
80946: PUSH
80947: LD_INT 0
80949: PUSH
80950: LD_INT 4
80952: NEG
80953: PUSH
80954: EMPTY
80955: LIST
80956: LIST
80957: PUSH
80958: LD_INT 1
80960: PUSH
80961: LD_INT 3
80963: NEG
80964: PUSH
80965: EMPTY
80966: LIST
80967: LIST
80968: PUSH
80969: LD_INT 1
80971: PUSH
80972: LD_INT 2
80974: NEG
80975: PUSH
80976: EMPTY
80977: LIST
80978: LIST
80979: PUSH
80980: LD_INT 0
80982: PUSH
80983: LD_INT 2
80985: NEG
80986: PUSH
80987: EMPTY
80988: LIST
80989: LIST
80990: PUSH
80991: LD_INT 1
80993: NEG
80994: PUSH
80995: LD_INT 3
80997: NEG
80998: PUSH
80999: EMPTY
81000: LIST
81001: LIST
81002: PUSH
81003: LD_INT 1
81005: NEG
81006: PUSH
81007: LD_INT 4
81009: NEG
81010: PUSH
81011: EMPTY
81012: LIST
81013: LIST
81014: PUSH
81015: LD_INT 2
81017: PUSH
81018: LD_INT 2
81020: NEG
81021: PUSH
81022: EMPTY
81023: LIST
81024: LIST
81025: PUSH
81026: LD_INT 2
81028: NEG
81029: PUSH
81030: LD_INT 4
81032: NEG
81033: PUSH
81034: EMPTY
81035: LIST
81036: LIST
81037: PUSH
81038: LD_INT 4
81040: PUSH
81041: LD_INT 0
81043: PUSH
81044: EMPTY
81045: LIST
81046: LIST
81047: PUSH
81048: LD_INT 4
81050: PUSH
81051: LD_INT 1
81053: NEG
81054: PUSH
81055: EMPTY
81056: LIST
81057: LIST
81058: PUSH
81059: LD_INT 5
81061: PUSH
81062: LD_INT 0
81064: PUSH
81065: EMPTY
81066: LIST
81067: LIST
81068: PUSH
81069: LD_INT 5
81071: PUSH
81072: LD_INT 1
81074: PUSH
81075: EMPTY
81076: LIST
81077: LIST
81078: PUSH
81079: LD_INT 4
81081: PUSH
81082: LD_INT 1
81084: PUSH
81085: EMPTY
81086: LIST
81087: LIST
81088: PUSH
81089: LD_INT 3
81091: PUSH
81092: LD_INT 0
81094: PUSH
81095: EMPTY
81096: LIST
81097: LIST
81098: PUSH
81099: LD_INT 3
81101: PUSH
81102: LD_INT 1
81104: NEG
81105: PUSH
81106: EMPTY
81107: LIST
81108: LIST
81109: PUSH
81110: LD_INT 3
81112: PUSH
81113: LD_INT 2
81115: NEG
81116: PUSH
81117: EMPTY
81118: LIST
81119: LIST
81120: PUSH
81121: LD_INT 5
81123: PUSH
81124: LD_INT 2
81126: PUSH
81127: EMPTY
81128: LIST
81129: LIST
81130: PUSH
81131: LD_INT 3
81133: PUSH
81134: LD_INT 3
81136: PUSH
81137: EMPTY
81138: LIST
81139: LIST
81140: PUSH
81141: LD_INT 3
81143: PUSH
81144: LD_INT 2
81146: PUSH
81147: EMPTY
81148: LIST
81149: LIST
81150: PUSH
81151: LD_INT 4
81153: PUSH
81154: LD_INT 3
81156: PUSH
81157: EMPTY
81158: LIST
81159: LIST
81160: PUSH
81161: LD_INT 4
81163: PUSH
81164: LD_INT 4
81166: PUSH
81167: EMPTY
81168: LIST
81169: LIST
81170: PUSH
81171: LD_INT 3
81173: PUSH
81174: LD_INT 4
81176: PUSH
81177: EMPTY
81178: LIST
81179: LIST
81180: PUSH
81181: LD_INT 2
81183: PUSH
81184: LD_INT 3
81186: PUSH
81187: EMPTY
81188: LIST
81189: LIST
81190: PUSH
81191: LD_INT 2
81193: PUSH
81194: LD_INT 2
81196: PUSH
81197: EMPTY
81198: LIST
81199: LIST
81200: PUSH
81201: LD_INT 4
81203: PUSH
81204: LD_INT 2
81206: PUSH
81207: EMPTY
81208: LIST
81209: LIST
81210: PUSH
81211: LD_INT 2
81213: PUSH
81214: LD_INT 4
81216: PUSH
81217: EMPTY
81218: LIST
81219: LIST
81220: PUSH
81221: LD_INT 0
81223: PUSH
81224: LD_INT 4
81226: PUSH
81227: EMPTY
81228: LIST
81229: LIST
81230: PUSH
81231: LD_INT 0
81233: PUSH
81234: LD_INT 3
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: PUSH
81241: LD_INT 1
81243: PUSH
81244: LD_INT 4
81246: PUSH
81247: EMPTY
81248: LIST
81249: LIST
81250: PUSH
81251: LD_INT 1
81253: PUSH
81254: LD_INT 5
81256: PUSH
81257: EMPTY
81258: LIST
81259: LIST
81260: PUSH
81261: LD_INT 0
81263: PUSH
81264: LD_INT 5
81266: PUSH
81267: EMPTY
81268: LIST
81269: LIST
81270: PUSH
81271: LD_INT 1
81273: NEG
81274: PUSH
81275: LD_INT 4
81277: PUSH
81278: EMPTY
81279: LIST
81280: LIST
81281: PUSH
81282: LD_INT 1
81284: NEG
81285: PUSH
81286: LD_INT 3
81288: PUSH
81289: EMPTY
81290: LIST
81291: LIST
81292: PUSH
81293: LD_INT 2
81295: PUSH
81296: LD_INT 5
81298: PUSH
81299: EMPTY
81300: LIST
81301: LIST
81302: PUSH
81303: LD_INT 2
81305: NEG
81306: PUSH
81307: LD_INT 3
81309: PUSH
81310: EMPTY
81311: LIST
81312: LIST
81313: PUSH
81314: EMPTY
81315: LIST
81316: LIST
81317: LIST
81318: LIST
81319: LIST
81320: LIST
81321: LIST
81322: LIST
81323: LIST
81324: LIST
81325: LIST
81326: LIST
81327: LIST
81328: LIST
81329: LIST
81330: LIST
81331: LIST
81332: LIST
81333: LIST
81334: LIST
81335: LIST
81336: LIST
81337: LIST
81338: LIST
81339: LIST
81340: LIST
81341: LIST
81342: LIST
81343: LIST
81344: LIST
81345: LIST
81346: LIST
81347: LIST
81348: LIST
81349: LIST
81350: LIST
81351: LIST
81352: LIST
81353: LIST
81354: LIST
81355: LIST
81356: LIST
81357: LIST
81358: LIST
81359: LIST
81360: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
81361: LD_ADDR_VAR 0 34
81365: PUSH
81366: LD_INT 0
81368: PUSH
81369: LD_INT 4
81371: NEG
81372: PUSH
81373: EMPTY
81374: LIST
81375: LIST
81376: PUSH
81377: LD_INT 0
81379: PUSH
81380: LD_INT 5
81382: NEG
81383: PUSH
81384: EMPTY
81385: LIST
81386: LIST
81387: PUSH
81388: LD_INT 1
81390: PUSH
81391: LD_INT 4
81393: NEG
81394: PUSH
81395: EMPTY
81396: LIST
81397: LIST
81398: PUSH
81399: LD_INT 1
81401: PUSH
81402: LD_INT 3
81404: NEG
81405: PUSH
81406: EMPTY
81407: LIST
81408: LIST
81409: PUSH
81410: LD_INT 0
81412: PUSH
81413: LD_INT 3
81415: NEG
81416: PUSH
81417: EMPTY
81418: LIST
81419: LIST
81420: PUSH
81421: LD_INT 1
81423: NEG
81424: PUSH
81425: LD_INT 4
81427: NEG
81428: PUSH
81429: EMPTY
81430: LIST
81431: LIST
81432: PUSH
81433: LD_INT 1
81435: NEG
81436: PUSH
81437: LD_INT 5
81439: NEG
81440: PUSH
81441: EMPTY
81442: LIST
81443: LIST
81444: PUSH
81445: LD_INT 2
81447: PUSH
81448: LD_INT 3
81450: NEG
81451: PUSH
81452: EMPTY
81453: LIST
81454: LIST
81455: PUSH
81456: LD_INT 2
81458: NEG
81459: PUSH
81460: LD_INT 5
81462: NEG
81463: PUSH
81464: EMPTY
81465: LIST
81466: LIST
81467: PUSH
81468: LD_INT 3
81470: PUSH
81471: LD_INT 0
81473: PUSH
81474: EMPTY
81475: LIST
81476: LIST
81477: PUSH
81478: LD_INT 3
81480: PUSH
81481: LD_INT 1
81483: NEG
81484: PUSH
81485: EMPTY
81486: LIST
81487: LIST
81488: PUSH
81489: LD_INT 4
81491: PUSH
81492: LD_INT 0
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: PUSH
81499: LD_INT 4
81501: PUSH
81502: LD_INT 1
81504: PUSH
81505: EMPTY
81506: LIST
81507: LIST
81508: PUSH
81509: LD_INT 3
81511: PUSH
81512: LD_INT 1
81514: PUSH
81515: EMPTY
81516: LIST
81517: LIST
81518: PUSH
81519: LD_INT 2
81521: PUSH
81522: LD_INT 0
81524: PUSH
81525: EMPTY
81526: LIST
81527: LIST
81528: PUSH
81529: LD_INT 2
81531: PUSH
81532: LD_INT 1
81534: NEG
81535: PUSH
81536: EMPTY
81537: LIST
81538: LIST
81539: PUSH
81540: LD_INT 2
81542: PUSH
81543: LD_INT 2
81545: NEG
81546: PUSH
81547: EMPTY
81548: LIST
81549: LIST
81550: PUSH
81551: LD_INT 4
81553: PUSH
81554: LD_INT 2
81556: PUSH
81557: EMPTY
81558: LIST
81559: LIST
81560: PUSH
81561: LD_INT 4
81563: PUSH
81564: LD_INT 4
81566: PUSH
81567: EMPTY
81568: LIST
81569: LIST
81570: PUSH
81571: LD_INT 4
81573: PUSH
81574: LD_INT 3
81576: PUSH
81577: EMPTY
81578: LIST
81579: LIST
81580: PUSH
81581: LD_INT 5
81583: PUSH
81584: LD_INT 4
81586: PUSH
81587: EMPTY
81588: LIST
81589: LIST
81590: PUSH
81591: LD_INT 5
81593: PUSH
81594: LD_INT 5
81596: PUSH
81597: EMPTY
81598: LIST
81599: LIST
81600: PUSH
81601: LD_INT 4
81603: PUSH
81604: LD_INT 5
81606: PUSH
81607: EMPTY
81608: LIST
81609: LIST
81610: PUSH
81611: LD_INT 3
81613: PUSH
81614: LD_INT 4
81616: PUSH
81617: EMPTY
81618: LIST
81619: LIST
81620: PUSH
81621: LD_INT 3
81623: PUSH
81624: LD_INT 3
81626: PUSH
81627: EMPTY
81628: LIST
81629: LIST
81630: PUSH
81631: LD_INT 5
81633: PUSH
81634: LD_INT 3
81636: PUSH
81637: EMPTY
81638: LIST
81639: LIST
81640: PUSH
81641: LD_INT 3
81643: PUSH
81644: LD_INT 5
81646: PUSH
81647: EMPTY
81648: LIST
81649: LIST
81650: PUSH
81651: LD_INT 0
81653: PUSH
81654: LD_INT 3
81656: PUSH
81657: EMPTY
81658: LIST
81659: LIST
81660: PUSH
81661: LD_INT 0
81663: PUSH
81664: LD_INT 2
81666: PUSH
81667: EMPTY
81668: LIST
81669: LIST
81670: PUSH
81671: LD_INT 1
81673: PUSH
81674: LD_INT 3
81676: PUSH
81677: EMPTY
81678: LIST
81679: LIST
81680: PUSH
81681: LD_INT 1
81683: PUSH
81684: LD_INT 4
81686: PUSH
81687: EMPTY
81688: LIST
81689: LIST
81690: PUSH
81691: LD_INT 0
81693: PUSH
81694: LD_INT 4
81696: PUSH
81697: EMPTY
81698: LIST
81699: LIST
81700: PUSH
81701: LD_INT 1
81703: NEG
81704: PUSH
81705: LD_INT 3
81707: PUSH
81708: EMPTY
81709: LIST
81710: LIST
81711: PUSH
81712: LD_INT 1
81714: NEG
81715: PUSH
81716: LD_INT 2
81718: PUSH
81719: EMPTY
81720: LIST
81721: LIST
81722: PUSH
81723: LD_INT 2
81725: PUSH
81726: LD_INT 4
81728: PUSH
81729: EMPTY
81730: LIST
81731: LIST
81732: PUSH
81733: LD_INT 2
81735: NEG
81736: PUSH
81737: LD_INT 2
81739: PUSH
81740: EMPTY
81741: LIST
81742: LIST
81743: PUSH
81744: LD_INT 4
81746: NEG
81747: PUSH
81748: LD_INT 0
81750: PUSH
81751: EMPTY
81752: LIST
81753: LIST
81754: PUSH
81755: LD_INT 4
81757: NEG
81758: PUSH
81759: LD_INT 1
81761: NEG
81762: PUSH
81763: EMPTY
81764: LIST
81765: LIST
81766: PUSH
81767: LD_INT 3
81769: NEG
81770: PUSH
81771: LD_INT 0
81773: PUSH
81774: EMPTY
81775: LIST
81776: LIST
81777: PUSH
81778: LD_INT 3
81780: NEG
81781: PUSH
81782: LD_INT 1
81784: PUSH
81785: EMPTY
81786: LIST
81787: LIST
81788: PUSH
81789: LD_INT 4
81791: NEG
81792: PUSH
81793: LD_INT 1
81795: PUSH
81796: EMPTY
81797: LIST
81798: LIST
81799: PUSH
81800: LD_INT 5
81802: NEG
81803: PUSH
81804: LD_INT 0
81806: PUSH
81807: EMPTY
81808: LIST
81809: LIST
81810: PUSH
81811: LD_INT 5
81813: NEG
81814: PUSH
81815: LD_INT 1
81817: NEG
81818: PUSH
81819: EMPTY
81820: LIST
81821: LIST
81822: PUSH
81823: LD_INT 5
81825: NEG
81826: PUSH
81827: LD_INT 2
81829: NEG
81830: PUSH
81831: EMPTY
81832: LIST
81833: LIST
81834: PUSH
81835: LD_INT 3
81837: NEG
81838: PUSH
81839: LD_INT 2
81841: PUSH
81842: EMPTY
81843: LIST
81844: LIST
81845: PUSH
81846: EMPTY
81847: LIST
81848: LIST
81849: LIST
81850: LIST
81851: LIST
81852: LIST
81853: LIST
81854: LIST
81855: LIST
81856: LIST
81857: LIST
81858: LIST
81859: LIST
81860: LIST
81861: LIST
81862: LIST
81863: LIST
81864: LIST
81865: LIST
81866: LIST
81867: LIST
81868: LIST
81869: LIST
81870: LIST
81871: LIST
81872: LIST
81873: LIST
81874: LIST
81875: LIST
81876: LIST
81877: LIST
81878: LIST
81879: LIST
81880: LIST
81881: LIST
81882: LIST
81883: LIST
81884: LIST
81885: LIST
81886: LIST
81887: LIST
81888: LIST
81889: LIST
81890: LIST
81891: LIST
81892: ST_TO_ADDR
// end ; end ;
81893: GO 81896
81895: POP
// case btype of b_depot , b_warehouse :
81896: LD_VAR 0 1
81900: PUSH
81901: LD_INT 0
81903: DOUBLE
81904: EQUAL
81905: IFTRUE 81915
81907: LD_INT 1
81909: DOUBLE
81910: EQUAL
81911: IFTRUE 81915
81913: GO 82116
81915: POP
// case nation of nation_american :
81916: LD_VAR 0 5
81920: PUSH
81921: LD_INT 1
81923: DOUBLE
81924: EQUAL
81925: IFTRUE 81929
81927: GO 81985
81929: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
81930: LD_ADDR_VAR 0 9
81934: PUSH
81935: LD_VAR 0 11
81939: PUSH
81940: LD_VAR 0 12
81944: PUSH
81945: LD_VAR 0 13
81949: PUSH
81950: LD_VAR 0 14
81954: PUSH
81955: LD_VAR 0 15
81959: PUSH
81960: LD_VAR 0 16
81964: PUSH
81965: EMPTY
81966: LIST
81967: LIST
81968: LIST
81969: LIST
81970: LIST
81971: LIST
81972: PUSH
81973: LD_VAR 0 4
81977: PUSH
81978: LD_INT 1
81980: PLUS
81981: ARRAY
81982: ST_TO_ADDR
81983: GO 82114
81985: LD_INT 2
81987: DOUBLE
81988: EQUAL
81989: IFTRUE 81993
81991: GO 82049
81993: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
81994: LD_ADDR_VAR 0 9
81998: PUSH
81999: LD_VAR 0 17
82003: PUSH
82004: LD_VAR 0 18
82008: PUSH
82009: LD_VAR 0 19
82013: PUSH
82014: LD_VAR 0 20
82018: PUSH
82019: LD_VAR 0 21
82023: PUSH
82024: LD_VAR 0 22
82028: PUSH
82029: EMPTY
82030: LIST
82031: LIST
82032: LIST
82033: LIST
82034: LIST
82035: LIST
82036: PUSH
82037: LD_VAR 0 4
82041: PUSH
82042: LD_INT 1
82044: PLUS
82045: ARRAY
82046: ST_TO_ADDR
82047: GO 82114
82049: LD_INT 3
82051: DOUBLE
82052: EQUAL
82053: IFTRUE 82057
82055: GO 82113
82057: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
82058: LD_ADDR_VAR 0 9
82062: PUSH
82063: LD_VAR 0 23
82067: PUSH
82068: LD_VAR 0 24
82072: PUSH
82073: LD_VAR 0 25
82077: PUSH
82078: LD_VAR 0 26
82082: PUSH
82083: LD_VAR 0 27
82087: PUSH
82088: LD_VAR 0 28
82092: PUSH
82093: EMPTY
82094: LIST
82095: LIST
82096: LIST
82097: LIST
82098: LIST
82099: LIST
82100: PUSH
82101: LD_VAR 0 4
82105: PUSH
82106: LD_INT 1
82108: PLUS
82109: ARRAY
82110: ST_TO_ADDR
82111: GO 82114
82113: POP
82114: GO 82669
82116: LD_INT 2
82118: DOUBLE
82119: EQUAL
82120: IFTRUE 82130
82122: LD_INT 3
82124: DOUBLE
82125: EQUAL
82126: IFTRUE 82130
82128: GO 82186
82130: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
82131: LD_ADDR_VAR 0 9
82135: PUSH
82136: LD_VAR 0 29
82140: PUSH
82141: LD_VAR 0 30
82145: PUSH
82146: LD_VAR 0 31
82150: PUSH
82151: LD_VAR 0 32
82155: PUSH
82156: LD_VAR 0 33
82160: PUSH
82161: LD_VAR 0 34
82165: PUSH
82166: EMPTY
82167: LIST
82168: LIST
82169: LIST
82170: LIST
82171: LIST
82172: LIST
82173: PUSH
82174: LD_VAR 0 4
82178: PUSH
82179: LD_INT 1
82181: PLUS
82182: ARRAY
82183: ST_TO_ADDR
82184: GO 82669
82186: LD_INT 16
82188: DOUBLE
82189: EQUAL
82190: IFTRUE 82248
82192: LD_INT 17
82194: DOUBLE
82195: EQUAL
82196: IFTRUE 82248
82198: LD_INT 18
82200: DOUBLE
82201: EQUAL
82202: IFTRUE 82248
82204: LD_INT 19
82206: DOUBLE
82207: EQUAL
82208: IFTRUE 82248
82210: LD_INT 22
82212: DOUBLE
82213: EQUAL
82214: IFTRUE 82248
82216: LD_INT 20
82218: DOUBLE
82219: EQUAL
82220: IFTRUE 82248
82222: LD_INT 21
82224: DOUBLE
82225: EQUAL
82226: IFTRUE 82248
82228: LD_INT 23
82230: DOUBLE
82231: EQUAL
82232: IFTRUE 82248
82234: LD_INT 24
82236: DOUBLE
82237: EQUAL
82238: IFTRUE 82248
82240: LD_INT 25
82242: DOUBLE
82243: EQUAL
82244: IFTRUE 82248
82246: GO 82304
82248: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
82249: LD_ADDR_VAR 0 9
82253: PUSH
82254: LD_VAR 0 35
82258: PUSH
82259: LD_VAR 0 36
82263: PUSH
82264: LD_VAR 0 37
82268: PUSH
82269: LD_VAR 0 38
82273: PUSH
82274: LD_VAR 0 39
82278: PUSH
82279: LD_VAR 0 40
82283: PUSH
82284: EMPTY
82285: LIST
82286: LIST
82287: LIST
82288: LIST
82289: LIST
82290: LIST
82291: PUSH
82292: LD_VAR 0 4
82296: PUSH
82297: LD_INT 1
82299: PLUS
82300: ARRAY
82301: ST_TO_ADDR
82302: GO 82669
82304: LD_INT 6
82306: DOUBLE
82307: EQUAL
82308: IFTRUE 82360
82310: LD_INT 7
82312: DOUBLE
82313: EQUAL
82314: IFTRUE 82360
82316: LD_INT 8
82318: DOUBLE
82319: EQUAL
82320: IFTRUE 82360
82322: LD_INT 13
82324: DOUBLE
82325: EQUAL
82326: IFTRUE 82360
82328: LD_INT 12
82330: DOUBLE
82331: EQUAL
82332: IFTRUE 82360
82334: LD_INT 15
82336: DOUBLE
82337: EQUAL
82338: IFTRUE 82360
82340: LD_INT 11
82342: DOUBLE
82343: EQUAL
82344: IFTRUE 82360
82346: LD_INT 14
82348: DOUBLE
82349: EQUAL
82350: IFTRUE 82360
82352: LD_INT 10
82354: DOUBLE
82355: EQUAL
82356: IFTRUE 82360
82358: GO 82416
82360: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
82361: LD_ADDR_VAR 0 9
82365: PUSH
82366: LD_VAR 0 41
82370: PUSH
82371: LD_VAR 0 42
82375: PUSH
82376: LD_VAR 0 43
82380: PUSH
82381: LD_VAR 0 44
82385: PUSH
82386: LD_VAR 0 45
82390: PUSH
82391: LD_VAR 0 46
82395: PUSH
82396: EMPTY
82397: LIST
82398: LIST
82399: LIST
82400: LIST
82401: LIST
82402: LIST
82403: PUSH
82404: LD_VAR 0 4
82408: PUSH
82409: LD_INT 1
82411: PLUS
82412: ARRAY
82413: ST_TO_ADDR
82414: GO 82669
82416: LD_INT 36
82418: DOUBLE
82419: EQUAL
82420: IFTRUE 82424
82422: GO 82480
82424: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
82425: LD_ADDR_VAR 0 9
82429: PUSH
82430: LD_VAR 0 47
82434: PUSH
82435: LD_VAR 0 48
82439: PUSH
82440: LD_VAR 0 49
82444: PUSH
82445: LD_VAR 0 50
82449: PUSH
82450: LD_VAR 0 51
82454: PUSH
82455: LD_VAR 0 52
82459: PUSH
82460: EMPTY
82461: LIST
82462: LIST
82463: LIST
82464: LIST
82465: LIST
82466: LIST
82467: PUSH
82468: LD_VAR 0 4
82472: PUSH
82473: LD_INT 1
82475: PLUS
82476: ARRAY
82477: ST_TO_ADDR
82478: GO 82669
82480: LD_INT 4
82482: DOUBLE
82483: EQUAL
82484: IFTRUE 82506
82486: LD_INT 5
82488: DOUBLE
82489: EQUAL
82490: IFTRUE 82506
82492: LD_INT 34
82494: DOUBLE
82495: EQUAL
82496: IFTRUE 82506
82498: LD_INT 37
82500: DOUBLE
82501: EQUAL
82502: IFTRUE 82506
82504: GO 82562
82506: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
82507: LD_ADDR_VAR 0 9
82511: PUSH
82512: LD_VAR 0 53
82516: PUSH
82517: LD_VAR 0 54
82521: PUSH
82522: LD_VAR 0 55
82526: PUSH
82527: LD_VAR 0 56
82531: PUSH
82532: LD_VAR 0 57
82536: PUSH
82537: LD_VAR 0 58
82541: PUSH
82542: EMPTY
82543: LIST
82544: LIST
82545: LIST
82546: LIST
82547: LIST
82548: LIST
82549: PUSH
82550: LD_VAR 0 4
82554: PUSH
82555: LD_INT 1
82557: PLUS
82558: ARRAY
82559: ST_TO_ADDR
82560: GO 82669
82562: LD_INT 31
82564: DOUBLE
82565: EQUAL
82566: IFTRUE 82612
82568: LD_INT 32
82570: DOUBLE
82571: EQUAL
82572: IFTRUE 82612
82574: LD_INT 33
82576: DOUBLE
82577: EQUAL
82578: IFTRUE 82612
82580: LD_INT 27
82582: DOUBLE
82583: EQUAL
82584: IFTRUE 82612
82586: LD_INT 26
82588: DOUBLE
82589: EQUAL
82590: IFTRUE 82612
82592: LD_INT 28
82594: DOUBLE
82595: EQUAL
82596: IFTRUE 82612
82598: LD_INT 29
82600: DOUBLE
82601: EQUAL
82602: IFTRUE 82612
82604: LD_INT 30
82606: DOUBLE
82607: EQUAL
82608: IFTRUE 82612
82610: GO 82668
82612: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
82613: LD_ADDR_VAR 0 9
82617: PUSH
82618: LD_VAR 0 59
82622: PUSH
82623: LD_VAR 0 60
82627: PUSH
82628: LD_VAR 0 61
82632: PUSH
82633: LD_VAR 0 62
82637: PUSH
82638: LD_VAR 0 63
82642: PUSH
82643: LD_VAR 0 64
82647: PUSH
82648: EMPTY
82649: LIST
82650: LIST
82651: LIST
82652: LIST
82653: LIST
82654: LIST
82655: PUSH
82656: LD_VAR 0 4
82660: PUSH
82661: LD_INT 1
82663: PLUS
82664: ARRAY
82665: ST_TO_ADDR
82666: GO 82669
82668: POP
// temp_list2 = [ ] ;
82669: LD_ADDR_VAR 0 10
82673: PUSH
82674: EMPTY
82675: ST_TO_ADDR
// for i in temp_list do
82676: LD_ADDR_VAR 0 8
82680: PUSH
82681: LD_VAR 0 9
82685: PUSH
82686: FOR_IN
82687: IFFALSE 82739
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
82689: LD_ADDR_VAR 0 10
82693: PUSH
82694: LD_VAR 0 10
82698: PUSH
82699: LD_VAR 0 8
82703: PUSH
82704: LD_INT 1
82706: ARRAY
82707: PUSH
82708: LD_VAR 0 2
82712: PLUS
82713: PUSH
82714: LD_VAR 0 8
82718: PUSH
82719: LD_INT 2
82721: ARRAY
82722: PUSH
82723: LD_VAR 0 3
82727: PLUS
82728: PUSH
82729: EMPTY
82730: LIST
82731: LIST
82732: PUSH
82733: EMPTY
82734: LIST
82735: ADD
82736: ST_TO_ADDR
82737: GO 82686
82739: POP
82740: POP
// result = temp_list2 ;
82741: LD_ADDR_VAR 0 7
82745: PUSH
82746: LD_VAR 0 10
82750: ST_TO_ADDR
// end ;
82751: LD_VAR 0 7
82755: RET
// export function EnemyInRange ( unit , dist ) ; begin
82756: LD_INT 0
82758: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
82759: LD_ADDR_VAR 0 3
82763: PUSH
82764: LD_VAR 0 1
82768: PPUSH
82769: CALL_OW 255
82773: PPUSH
82774: LD_VAR 0 1
82778: PPUSH
82779: CALL_OW 250
82783: PPUSH
82784: LD_VAR 0 1
82788: PPUSH
82789: CALL_OW 251
82793: PPUSH
82794: LD_VAR 0 2
82798: PPUSH
82799: CALL 56152 0 4
82803: PUSH
82804: LD_INT 4
82806: ARRAY
82807: ST_TO_ADDR
// end ;
82808: LD_VAR 0 3
82812: RET
// export function PlayerSeeMe ( unit ) ; begin
82813: LD_INT 0
82815: PPUSH
// result := See ( your_side , unit ) ;
82816: LD_ADDR_VAR 0 2
82820: PUSH
82821: LD_OWVAR 2
82825: PPUSH
82826: LD_VAR 0 1
82830: PPUSH
82831: CALL_OW 292
82835: ST_TO_ADDR
// end ;
82836: LD_VAR 0 2
82840: RET
// export function ReverseDir ( unit ) ; begin
82841: LD_INT 0
82843: PPUSH
// if not unit then
82844: LD_VAR 0 1
82848: NOT
82849: IFFALSE 82853
// exit ;
82851: GO 82876
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
82853: LD_ADDR_VAR 0 2
82857: PUSH
82858: LD_VAR 0 1
82862: PPUSH
82863: CALL_OW 254
82867: PUSH
82868: LD_INT 3
82870: PLUS
82871: PUSH
82872: LD_INT 6
82874: MOD
82875: ST_TO_ADDR
// end ;
82876: LD_VAR 0 2
82880: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
82881: LD_INT 0
82883: PPUSH
82884: PPUSH
82885: PPUSH
82886: PPUSH
82887: PPUSH
// if not hexes then
82888: LD_VAR 0 2
82892: NOT
82893: IFFALSE 82897
// exit ;
82895: GO 83045
// dist := 9999 ;
82897: LD_ADDR_VAR 0 5
82901: PUSH
82902: LD_INT 9999
82904: ST_TO_ADDR
// for i = 1 to hexes do
82905: LD_ADDR_VAR 0 4
82909: PUSH
82910: DOUBLE
82911: LD_INT 1
82913: DEC
82914: ST_TO_ADDR
82915: LD_VAR 0 2
82919: PUSH
82920: FOR_TO
82921: IFFALSE 83033
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
82923: LD_VAR 0 1
82927: PPUSH
82928: LD_VAR 0 2
82932: PUSH
82933: LD_VAR 0 4
82937: ARRAY
82938: PUSH
82939: LD_INT 1
82941: ARRAY
82942: PPUSH
82943: LD_VAR 0 2
82947: PUSH
82948: LD_VAR 0 4
82952: ARRAY
82953: PUSH
82954: LD_INT 2
82956: ARRAY
82957: PPUSH
82958: CALL_OW 297
82962: PUSH
82963: LD_VAR 0 5
82967: LESS
82968: IFFALSE 83031
// begin hex := hexes [ i ] ;
82970: LD_ADDR_VAR 0 7
82974: PUSH
82975: LD_VAR 0 2
82979: PUSH
82980: LD_VAR 0 4
82984: ARRAY
82985: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
82986: LD_ADDR_VAR 0 5
82990: PUSH
82991: LD_VAR 0 1
82995: PPUSH
82996: LD_VAR 0 2
83000: PUSH
83001: LD_VAR 0 4
83005: ARRAY
83006: PUSH
83007: LD_INT 1
83009: ARRAY
83010: PPUSH
83011: LD_VAR 0 2
83015: PUSH
83016: LD_VAR 0 4
83020: ARRAY
83021: PUSH
83022: LD_INT 2
83024: ARRAY
83025: PPUSH
83026: CALL_OW 297
83030: ST_TO_ADDR
// end ; end ;
83031: GO 82920
83033: POP
83034: POP
// result := hex ;
83035: LD_ADDR_VAR 0 3
83039: PUSH
83040: LD_VAR 0 7
83044: ST_TO_ADDR
// end ;
83045: LD_VAR 0 3
83049: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
83050: LD_INT 0
83052: PPUSH
83053: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
83054: LD_VAR 0 1
83058: NOT
83059: PUSH
83060: LD_VAR 0 1
83064: PUSH
83065: LD_INT 21
83067: PUSH
83068: LD_INT 2
83070: PUSH
83071: EMPTY
83072: LIST
83073: LIST
83074: PUSH
83075: LD_INT 23
83077: PUSH
83078: LD_INT 2
83080: PUSH
83081: EMPTY
83082: LIST
83083: LIST
83084: PUSH
83085: EMPTY
83086: LIST
83087: LIST
83088: PPUSH
83089: CALL_OW 69
83093: IN
83094: NOT
83095: OR
83096: IFFALSE 83100
// exit ;
83098: GO 83147
// for i = 1 to 3 do
83100: LD_ADDR_VAR 0 3
83104: PUSH
83105: DOUBLE
83106: LD_INT 1
83108: DEC
83109: ST_TO_ADDR
83110: LD_INT 3
83112: PUSH
83113: FOR_TO
83114: IFFALSE 83145
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
83116: LD_VAR 0 1
83120: PPUSH
83121: CALL_OW 250
83125: PPUSH
83126: LD_VAR 0 1
83130: PPUSH
83131: CALL_OW 251
83135: PPUSH
83136: LD_INT 1
83138: PPUSH
83139: CALL_OW 453
83143: GO 83113
83145: POP
83146: POP
// end ;
83147: LD_VAR 0 2
83151: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
83152: LD_INT 0
83154: PPUSH
83155: PPUSH
83156: PPUSH
83157: PPUSH
83158: PPUSH
83159: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
83160: LD_VAR 0 1
83164: NOT
83165: PUSH
83166: LD_VAR 0 2
83170: NOT
83171: OR
83172: PUSH
83173: LD_VAR 0 1
83177: PPUSH
83178: CALL_OW 314
83182: OR
83183: IFFALSE 83187
// exit ;
83185: GO 83628
// x := GetX ( enemy_unit ) ;
83187: LD_ADDR_VAR 0 7
83191: PUSH
83192: LD_VAR 0 2
83196: PPUSH
83197: CALL_OW 250
83201: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
83202: LD_ADDR_VAR 0 8
83206: PUSH
83207: LD_VAR 0 2
83211: PPUSH
83212: CALL_OW 251
83216: ST_TO_ADDR
// if not x or not y then
83217: LD_VAR 0 7
83221: NOT
83222: PUSH
83223: LD_VAR 0 8
83227: NOT
83228: OR
83229: IFFALSE 83233
// exit ;
83231: GO 83628
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
83233: LD_ADDR_VAR 0 6
83237: PUSH
83238: LD_VAR 0 7
83242: PPUSH
83243: LD_INT 0
83245: PPUSH
83246: LD_INT 4
83248: PPUSH
83249: CALL_OW 272
83253: PUSH
83254: LD_VAR 0 8
83258: PPUSH
83259: LD_INT 0
83261: PPUSH
83262: LD_INT 4
83264: PPUSH
83265: CALL_OW 273
83269: PUSH
83270: EMPTY
83271: LIST
83272: LIST
83273: PUSH
83274: LD_VAR 0 7
83278: PPUSH
83279: LD_INT 1
83281: PPUSH
83282: LD_INT 4
83284: PPUSH
83285: CALL_OW 272
83289: PUSH
83290: LD_VAR 0 8
83294: PPUSH
83295: LD_INT 1
83297: PPUSH
83298: LD_INT 4
83300: PPUSH
83301: CALL_OW 273
83305: PUSH
83306: EMPTY
83307: LIST
83308: LIST
83309: PUSH
83310: LD_VAR 0 7
83314: PPUSH
83315: LD_INT 2
83317: PPUSH
83318: LD_INT 4
83320: PPUSH
83321: CALL_OW 272
83325: PUSH
83326: LD_VAR 0 8
83330: PPUSH
83331: LD_INT 2
83333: PPUSH
83334: LD_INT 4
83336: PPUSH
83337: CALL_OW 273
83341: PUSH
83342: EMPTY
83343: LIST
83344: LIST
83345: PUSH
83346: LD_VAR 0 7
83350: PPUSH
83351: LD_INT 3
83353: PPUSH
83354: LD_INT 4
83356: PPUSH
83357: CALL_OW 272
83361: PUSH
83362: LD_VAR 0 8
83366: PPUSH
83367: LD_INT 3
83369: PPUSH
83370: LD_INT 4
83372: PPUSH
83373: CALL_OW 273
83377: PUSH
83378: EMPTY
83379: LIST
83380: LIST
83381: PUSH
83382: LD_VAR 0 7
83386: PPUSH
83387: LD_INT 4
83389: PPUSH
83390: LD_INT 4
83392: PPUSH
83393: CALL_OW 272
83397: PUSH
83398: LD_VAR 0 8
83402: PPUSH
83403: LD_INT 4
83405: PPUSH
83406: LD_INT 4
83408: PPUSH
83409: CALL_OW 273
83413: PUSH
83414: EMPTY
83415: LIST
83416: LIST
83417: PUSH
83418: LD_VAR 0 7
83422: PPUSH
83423: LD_INT 5
83425: PPUSH
83426: LD_INT 4
83428: PPUSH
83429: CALL_OW 272
83433: PUSH
83434: LD_VAR 0 8
83438: PPUSH
83439: LD_INT 5
83441: PPUSH
83442: LD_INT 4
83444: PPUSH
83445: CALL_OW 273
83449: PUSH
83450: EMPTY
83451: LIST
83452: LIST
83453: PUSH
83454: EMPTY
83455: LIST
83456: LIST
83457: LIST
83458: LIST
83459: LIST
83460: LIST
83461: ST_TO_ADDR
// for i = tmp downto 1 do
83462: LD_ADDR_VAR 0 4
83466: PUSH
83467: DOUBLE
83468: LD_VAR 0 6
83472: INC
83473: ST_TO_ADDR
83474: LD_INT 1
83476: PUSH
83477: FOR_DOWNTO
83478: IFFALSE 83579
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
83480: LD_VAR 0 6
83484: PUSH
83485: LD_VAR 0 4
83489: ARRAY
83490: PUSH
83491: LD_INT 1
83493: ARRAY
83494: PPUSH
83495: LD_VAR 0 6
83499: PUSH
83500: LD_VAR 0 4
83504: ARRAY
83505: PUSH
83506: LD_INT 2
83508: ARRAY
83509: PPUSH
83510: CALL_OW 488
83514: NOT
83515: PUSH
83516: LD_VAR 0 6
83520: PUSH
83521: LD_VAR 0 4
83525: ARRAY
83526: PUSH
83527: LD_INT 1
83529: ARRAY
83530: PPUSH
83531: LD_VAR 0 6
83535: PUSH
83536: LD_VAR 0 4
83540: ARRAY
83541: PUSH
83542: LD_INT 2
83544: ARRAY
83545: PPUSH
83546: CALL_OW 428
83550: PUSH
83551: LD_INT 0
83553: NONEQUAL
83554: OR
83555: IFFALSE 83577
// tmp := Delete ( tmp , i ) ;
83557: LD_ADDR_VAR 0 6
83561: PUSH
83562: LD_VAR 0 6
83566: PPUSH
83567: LD_VAR 0 4
83571: PPUSH
83572: CALL_OW 3
83576: ST_TO_ADDR
83577: GO 83477
83579: POP
83580: POP
// j := GetClosestHex ( unit , tmp ) ;
83581: LD_ADDR_VAR 0 5
83585: PUSH
83586: LD_VAR 0 1
83590: PPUSH
83591: LD_VAR 0 6
83595: PPUSH
83596: CALL 82881 0 2
83600: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
83601: LD_VAR 0 1
83605: PPUSH
83606: LD_VAR 0 5
83610: PUSH
83611: LD_INT 1
83613: ARRAY
83614: PPUSH
83615: LD_VAR 0 5
83619: PUSH
83620: LD_INT 2
83622: ARRAY
83623: PPUSH
83624: CALL_OW 111
// end ;
83628: LD_VAR 0 3
83632: RET
// export function PrepareApemanSoldier ( ) ; begin
83633: LD_INT 0
83635: PPUSH
// uc_nation := 0 ;
83636: LD_ADDR_OWVAR 21
83640: PUSH
83641: LD_INT 0
83643: ST_TO_ADDR
// hc_sex := sex_male ;
83644: LD_ADDR_OWVAR 27
83648: PUSH
83649: LD_INT 1
83651: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
83652: LD_ADDR_OWVAR 28
83656: PUSH
83657: LD_INT 15
83659: ST_TO_ADDR
// hc_gallery :=  ;
83660: LD_ADDR_OWVAR 33
83664: PUSH
83665: LD_STRING 
83667: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83668: LD_ADDR_OWVAR 31
83672: PUSH
83673: LD_INT 0
83675: PPUSH
83676: LD_INT 3
83678: PPUSH
83679: CALL_OW 12
83683: PUSH
83684: LD_INT 0
83686: PPUSH
83687: LD_INT 3
83689: PPUSH
83690: CALL_OW 12
83694: PUSH
83695: LD_INT 0
83697: PUSH
83698: LD_INT 0
83700: PUSH
83701: EMPTY
83702: LIST
83703: LIST
83704: LIST
83705: LIST
83706: ST_TO_ADDR
// end ;
83707: LD_VAR 0 1
83711: RET
// export function PrepareApemanEngineer ( ) ; begin
83712: LD_INT 0
83714: PPUSH
// uc_nation := 0 ;
83715: LD_ADDR_OWVAR 21
83719: PUSH
83720: LD_INT 0
83722: ST_TO_ADDR
// hc_sex := sex_male ;
83723: LD_ADDR_OWVAR 27
83727: PUSH
83728: LD_INT 1
83730: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
83731: LD_ADDR_OWVAR 28
83735: PUSH
83736: LD_INT 16
83738: ST_TO_ADDR
// hc_gallery :=  ;
83739: LD_ADDR_OWVAR 33
83743: PUSH
83744: LD_STRING 
83746: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83747: LD_ADDR_OWVAR 31
83751: PUSH
83752: LD_INT 0
83754: PPUSH
83755: LD_INT 3
83757: PPUSH
83758: CALL_OW 12
83762: PUSH
83763: LD_INT 0
83765: PPUSH
83766: LD_INT 3
83768: PPUSH
83769: CALL_OW 12
83773: PUSH
83774: LD_INT 0
83776: PUSH
83777: LD_INT 0
83779: PUSH
83780: EMPTY
83781: LIST
83782: LIST
83783: LIST
83784: LIST
83785: ST_TO_ADDR
// end ;
83786: LD_VAR 0 1
83790: RET
// export function PrepareApeman ( agressivity ) ; begin
83791: LD_INT 0
83793: PPUSH
// uc_side := 0 ;
83794: LD_ADDR_OWVAR 20
83798: PUSH
83799: LD_INT 0
83801: ST_TO_ADDR
// uc_nation := 0 ;
83802: LD_ADDR_OWVAR 21
83806: PUSH
83807: LD_INT 0
83809: ST_TO_ADDR
// hc_sex := sex_male ;
83810: LD_ADDR_OWVAR 27
83814: PUSH
83815: LD_INT 1
83817: ST_TO_ADDR
// hc_class := class_apeman ;
83818: LD_ADDR_OWVAR 28
83822: PUSH
83823: LD_INT 12
83825: ST_TO_ADDR
// hc_gallery :=  ;
83826: LD_ADDR_OWVAR 33
83830: PUSH
83831: LD_STRING 
83833: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
83834: LD_ADDR_OWVAR 35
83838: PUSH
83839: LD_VAR 0 1
83843: NEG
83844: PPUSH
83845: LD_VAR 0 1
83849: PPUSH
83850: CALL_OW 12
83854: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83855: LD_ADDR_OWVAR 31
83859: PUSH
83860: LD_INT 0
83862: PPUSH
83863: LD_INT 3
83865: PPUSH
83866: CALL_OW 12
83870: PUSH
83871: LD_INT 0
83873: PPUSH
83874: LD_INT 3
83876: PPUSH
83877: CALL_OW 12
83881: PUSH
83882: LD_INT 0
83884: PUSH
83885: LD_INT 0
83887: PUSH
83888: EMPTY
83889: LIST
83890: LIST
83891: LIST
83892: LIST
83893: ST_TO_ADDR
// end ;
83894: LD_VAR 0 2
83898: RET
// export function PrepareTiger ( agressivity ) ; begin
83899: LD_INT 0
83901: PPUSH
// uc_side := 0 ;
83902: LD_ADDR_OWVAR 20
83906: PUSH
83907: LD_INT 0
83909: ST_TO_ADDR
// uc_nation := 0 ;
83910: LD_ADDR_OWVAR 21
83914: PUSH
83915: LD_INT 0
83917: ST_TO_ADDR
// hc_class := class_tiger ;
83918: LD_ADDR_OWVAR 28
83922: PUSH
83923: LD_INT 14
83925: ST_TO_ADDR
// hc_gallery :=  ;
83926: LD_ADDR_OWVAR 33
83930: PUSH
83931: LD_STRING 
83933: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
83934: LD_ADDR_OWVAR 35
83938: PUSH
83939: LD_VAR 0 1
83943: NEG
83944: PPUSH
83945: LD_VAR 0 1
83949: PPUSH
83950: CALL_OW 12
83954: ST_TO_ADDR
// end ;
83955: LD_VAR 0 2
83959: RET
// export function PrepareEnchidna ( ) ; begin
83960: LD_INT 0
83962: PPUSH
// uc_side := 0 ;
83963: LD_ADDR_OWVAR 20
83967: PUSH
83968: LD_INT 0
83970: ST_TO_ADDR
// uc_nation := 0 ;
83971: LD_ADDR_OWVAR 21
83975: PUSH
83976: LD_INT 0
83978: ST_TO_ADDR
// hc_class := class_baggie ;
83979: LD_ADDR_OWVAR 28
83983: PUSH
83984: LD_INT 13
83986: ST_TO_ADDR
// hc_gallery :=  ;
83987: LD_ADDR_OWVAR 33
83991: PUSH
83992: LD_STRING 
83994: ST_TO_ADDR
// end ;
83995: LD_VAR 0 1
83999: RET
// export function PrepareFrog ( ) ; begin
84000: LD_INT 0
84002: PPUSH
// uc_side := 0 ;
84003: LD_ADDR_OWVAR 20
84007: PUSH
84008: LD_INT 0
84010: ST_TO_ADDR
// uc_nation := 0 ;
84011: LD_ADDR_OWVAR 21
84015: PUSH
84016: LD_INT 0
84018: ST_TO_ADDR
// hc_class := class_frog ;
84019: LD_ADDR_OWVAR 28
84023: PUSH
84024: LD_INT 19
84026: ST_TO_ADDR
// hc_gallery :=  ;
84027: LD_ADDR_OWVAR 33
84031: PUSH
84032: LD_STRING 
84034: ST_TO_ADDR
// end ;
84035: LD_VAR 0 1
84039: RET
// export function PrepareFish ( ) ; begin
84040: LD_INT 0
84042: PPUSH
// uc_side := 0 ;
84043: LD_ADDR_OWVAR 20
84047: PUSH
84048: LD_INT 0
84050: ST_TO_ADDR
// uc_nation := 0 ;
84051: LD_ADDR_OWVAR 21
84055: PUSH
84056: LD_INT 0
84058: ST_TO_ADDR
// hc_class := class_fish ;
84059: LD_ADDR_OWVAR 28
84063: PUSH
84064: LD_INT 20
84066: ST_TO_ADDR
// hc_gallery :=  ;
84067: LD_ADDR_OWVAR 33
84071: PUSH
84072: LD_STRING 
84074: ST_TO_ADDR
// end ;
84075: LD_VAR 0 1
84079: RET
// export function PrepareBird ( ) ; begin
84080: LD_INT 0
84082: PPUSH
// uc_side := 0 ;
84083: LD_ADDR_OWVAR 20
84087: PUSH
84088: LD_INT 0
84090: ST_TO_ADDR
// uc_nation := 0 ;
84091: LD_ADDR_OWVAR 21
84095: PUSH
84096: LD_INT 0
84098: ST_TO_ADDR
// hc_class := class_phororhacos ;
84099: LD_ADDR_OWVAR 28
84103: PUSH
84104: LD_INT 18
84106: ST_TO_ADDR
// hc_gallery :=  ;
84107: LD_ADDR_OWVAR 33
84111: PUSH
84112: LD_STRING 
84114: ST_TO_ADDR
// end ;
84115: LD_VAR 0 1
84119: RET
// export function PrepareHorse ( ) ; begin
84120: LD_INT 0
84122: PPUSH
// uc_side := 0 ;
84123: LD_ADDR_OWVAR 20
84127: PUSH
84128: LD_INT 0
84130: ST_TO_ADDR
// uc_nation := 0 ;
84131: LD_ADDR_OWVAR 21
84135: PUSH
84136: LD_INT 0
84138: ST_TO_ADDR
// hc_class := class_horse ;
84139: LD_ADDR_OWVAR 28
84143: PUSH
84144: LD_INT 21
84146: ST_TO_ADDR
// hc_gallery :=  ;
84147: LD_ADDR_OWVAR 33
84151: PUSH
84152: LD_STRING 
84154: ST_TO_ADDR
// end ;
84155: LD_VAR 0 1
84159: RET
// export function PrepareMastodont ( ) ; begin
84160: LD_INT 0
84162: PPUSH
// uc_side := 0 ;
84163: LD_ADDR_OWVAR 20
84167: PUSH
84168: LD_INT 0
84170: ST_TO_ADDR
// uc_nation := 0 ;
84171: LD_ADDR_OWVAR 21
84175: PUSH
84176: LD_INT 0
84178: ST_TO_ADDR
// vc_chassis := class_mastodont ;
84179: LD_ADDR_OWVAR 37
84183: PUSH
84184: LD_INT 31
84186: ST_TO_ADDR
// vc_control := control_rider ;
84187: LD_ADDR_OWVAR 38
84191: PUSH
84192: LD_INT 4
84194: ST_TO_ADDR
// end ;
84195: LD_VAR 0 1
84199: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
84200: LD_INT 0
84202: PPUSH
84203: PPUSH
84204: PPUSH
// uc_side = 0 ;
84205: LD_ADDR_OWVAR 20
84209: PUSH
84210: LD_INT 0
84212: ST_TO_ADDR
// uc_nation = 0 ;
84213: LD_ADDR_OWVAR 21
84217: PUSH
84218: LD_INT 0
84220: ST_TO_ADDR
// InitHc_All ( ) ;
84221: CALL_OW 584
// InitVc ;
84225: CALL_OW 20
// if mastodonts then
84229: LD_VAR 0 6
84233: IFFALSE 84300
// for i = 1 to mastodonts do
84235: LD_ADDR_VAR 0 11
84239: PUSH
84240: DOUBLE
84241: LD_INT 1
84243: DEC
84244: ST_TO_ADDR
84245: LD_VAR 0 6
84249: PUSH
84250: FOR_TO
84251: IFFALSE 84298
// begin vc_chassis := 31 ;
84253: LD_ADDR_OWVAR 37
84257: PUSH
84258: LD_INT 31
84260: ST_TO_ADDR
// vc_control := control_rider ;
84261: LD_ADDR_OWVAR 38
84265: PUSH
84266: LD_INT 4
84268: ST_TO_ADDR
// animal := CreateVehicle ;
84269: LD_ADDR_VAR 0 12
84273: PUSH
84274: CALL_OW 45
84278: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84279: LD_VAR 0 12
84283: PPUSH
84284: LD_VAR 0 8
84288: PPUSH
84289: LD_INT 0
84291: PPUSH
84292: CALL 86435 0 3
// end ;
84296: GO 84250
84298: POP
84299: POP
// if horses then
84300: LD_VAR 0 5
84304: IFFALSE 84371
// for i = 1 to horses do
84306: LD_ADDR_VAR 0 11
84310: PUSH
84311: DOUBLE
84312: LD_INT 1
84314: DEC
84315: ST_TO_ADDR
84316: LD_VAR 0 5
84320: PUSH
84321: FOR_TO
84322: IFFALSE 84369
// begin hc_class := 21 ;
84324: LD_ADDR_OWVAR 28
84328: PUSH
84329: LD_INT 21
84331: ST_TO_ADDR
// hc_gallery :=  ;
84332: LD_ADDR_OWVAR 33
84336: PUSH
84337: LD_STRING 
84339: ST_TO_ADDR
// animal := CreateHuman ;
84340: LD_ADDR_VAR 0 12
84344: PUSH
84345: CALL_OW 44
84349: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84350: LD_VAR 0 12
84354: PPUSH
84355: LD_VAR 0 8
84359: PPUSH
84360: LD_INT 0
84362: PPUSH
84363: CALL 86435 0 3
// end ;
84367: GO 84321
84369: POP
84370: POP
// if birds then
84371: LD_VAR 0 1
84375: IFFALSE 84442
// for i = 1 to birds do
84377: LD_ADDR_VAR 0 11
84381: PUSH
84382: DOUBLE
84383: LD_INT 1
84385: DEC
84386: ST_TO_ADDR
84387: LD_VAR 0 1
84391: PUSH
84392: FOR_TO
84393: IFFALSE 84440
// begin hc_class = 18 ;
84395: LD_ADDR_OWVAR 28
84399: PUSH
84400: LD_INT 18
84402: ST_TO_ADDR
// hc_gallery =  ;
84403: LD_ADDR_OWVAR 33
84407: PUSH
84408: LD_STRING 
84410: ST_TO_ADDR
// animal := CreateHuman ;
84411: LD_ADDR_VAR 0 12
84415: PUSH
84416: CALL_OW 44
84420: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84421: LD_VAR 0 12
84425: PPUSH
84426: LD_VAR 0 8
84430: PPUSH
84431: LD_INT 0
84433: PPUSH
84434: CALL 86435 0 3
// end ;
84438: GO 84392
84440: POP
84441: POP
// if tigers then
84442: LD_VAR 0 2
84446: IFFALSE 84530
// for i = 1 to tigers do
84448: LD_ADDR_VAR 0 11
84452: PUSH
84453: DOUBLE
84454: LD_INT 1
84456: DEC
84457: ST_TO_ADDR
84458: LD_VAR 0 2
84462: PUSH
84463: FOR_TO
84464: IFFALSE 84528
// begin hc_class = class_tiger ;
84466: LD_ADDR_OWVAR 28
84470: PUSH
84471: LD_INT 14
84473: ST_TO_ADDR
// hc_gallery =  ;
84474: LD_ADDR_OWVAR 33
84478: PUSH
84479: LD_STRING 
84481: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
84482: LD_ADDR_OWVAR 35
84486: PUSH
84487: LD_INT 7
84489: NEG
84490: PPUSH
84491: LD_INT 7
84493: PPUSH
84494: CALL_OW 12
84498: ST_TO_ADDR
// animal := CreateHuman ;
84499: LD_ADDR_VAR 0 12
84503: PUSH
84504: CALL_OW 44
84508: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84509: LD_VAR 0 12
84513: PPUSH
84514: LD_VAR 0 8
84518: PPUSH
84519: LD_INT 0
84521: PPUSH
84522: CALL 86435 0 3
// end ;
84526: GO 84463
84528: POP
84529: POP
// if apemans then
84530: LD_VAR 0 3
84534: IFFALSE 84657
// for i = 1 to apemans do
84536: LD_ADDR_VAR 0 11
84540: PUSH
84541: DOUBLE
84542: LD_INT 1
84544: DEC
84545: ST_TO_ADDR
84546: LD_VAR 0 3
84550: PUSH
84551: FOR_TO
84552: IFFALSE 84655
// begin hc_class = class_apeman ;
84554: LD_ADDR_OWVAR 28
84558: PUSH
84559: LD_INT 12
84561: ST_TO_ADDR
// hc_gallery =  ;
84562: LD_ADDR_OWVAR 33
84566: PUSH
84567: LD_STRING 
84569: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
84570: LD_ADDR_OWVAR 35
84574: PUSH
84575: LD_INT 2
84577: NEG
84578: PPUSH
84579: LD_INT 2
84581: PPUSH
84582: CALL_OW 12
84586: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
84587: LD_ADDR_OWVAR 31
84591: PUSH
84592: LD_INT 1
84594: PPUSH
84595: LD_INT 3
84597: PPUSH
84598: CALL_OW 12
84602: PUSH
84603: LD_INT 1
84605: PPUSH
84606: LD_INT 3
84608: PPUSH
84609: CALL_OW 12
84613: PUSH
84614: LD_INT 0
84616: PUSH
84617: LD_INT 0
84619: PUSH
84620: EMPTY
84621: LIST
84622: LIST
84623: LIST
84624: LIST
84625: ST_TO_ADDR
// animal := CreateHuman ;
84626: LD_ADDR_VAR 0 12
84630: PUSH
84631: CALL_OW 44
84635: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84636: LD_VAR 0 12
84640: PPUSH
84641: LD_VAR 0 8
84645: PPUSH
84646: LD_INT 0
84648: PPUSH
84649: CALL 86435 0 3
// end ;
84653: GO 84551
84655: POP
84656: POP
// if enchidnas then
84657: LD_VAR 0 4
84661: IFFALSE 84728
// for i = 1 to enchidnas do
84663: LD_ADDR_VAR 0 11
84667: PUSH
84668: DOUBLE
84669: LD_INT 1
84671: DEC
84672: ST_TO_ADDR
84673: LD_VAR 0 4
84677: PUSH
84678: FOR_TO
84679: IFFALSE 84726
// begin hc_class = 13 ;
84681: LD_ADDR_OWVAR 28
84685: PUSH
84686: LD_INT 13
84688: ST_TO_ADDR
// hc_gallery =  ;
84689: LD_ADDR_OWVAR 33
84693: PUSH
84694: LD_STRING 
84696: ST_TO_ADDR
// animal := CreateHuman ;
84697: LD_ADDR_VAR 0 12
84701: PUSH
84702: CALL_OW 44
84706: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84707: LD_VAR 0 12
84711: PPUSH
84712: LD_VAR 0 8
84716: PPUSH
84717: LD_INT 0
84719: PPUSH
84720: CALL 86435 0 3
// end ;
84724: GO 84678
84726: POP
84727: POP
// if fishes then
84728: LD_VAR 0 7
84732: IFFALSE 84799
// for i = 1 to fishes do
84734: LD_ADDR_VAR 0 11
84738: PUSH
84739: DOUBLE
84740: LD_INT 1
84742: DEC
84743: ST_TO_ADDR
84744: LD_VAR 0 7
84748: PUSH
84749: FOR_TO
84750: IFFALSE 84797
// begin hc_class = 20 ;
84752: LD_ADDR_OWVAR 28
84756: PUSH
84757: LD_INT 20
84759: ST_TO_ADDR
// hc_gallery =  ;
84760: LD_ADDR_OWVAR 33
84764: PUSH
84765: LD_STRING 
84767: ST_TO_ADDR
// animal := CreateHuman ;
84768: LD_ADDR_VAR 0 12
84772: PUSH
84773: CALL_OW 44
84777: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
84778: LD_VAR 0 12
84782: PPUSH
84783: LD_VAR 0 9
84787: PPUSH
84788: LD_INT 0
84790: PPUSH
84791: CALL 86435 0 3
// end ;
84795: GO 84749
84797: POP
84798: POP
// end ;
84799: LD_VAR 0 10
84803: RET
// export function WantHeal ( sci , unit ) ; begin
84804: LD_INT 0
84806: PPUSH
// if GetTaskList ( sci ) > 0 then
84807: LD_VAR 0 1
84811: PPUSH
84812: CALL_OW 437
84816: PUSH
84817: LD_INT 0
84819: GREATER
84820: IFFALSE 84890
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
84822: LD_VAR 0 1
84826: PPUSH
84827: CALL_OW 437
84831: PUSH
84832: LD_INT 1
84834: ARRAY
84835: PUSH
84836: LD_INT 1
84838: ARRAY
84839: PUSH
84840: LD_STRING l
84842: EQUAL
84843: PUSH
84844: LD_VAR 0 1
84848: PPUSH
84849: CALL_OW 437
84853: PUSH
84854: LD_INT 1
84856: ARRAY
84857: PUSH
84858: LD_INT 4
84860: ARRAY
84861: PUSH
84862: LD_VAR 0 2
84866: EQUAL
84867: AND
84868: IFFALSE 84880
// result := true else
84870: LD_ADDR_VAR 0 3
84874: PUSH
84875: LD_INT 1
84877: ST_TO_ADDR
84878: GO 84888
// result := false ;
84880: LD_ADDR_VAR 0 3
84884: PUSH
84885: LD_INT 0
84887: ST_TO_ADDR
// end else
84888: GO 84898
// result := false ;
84890: LD_ADDR_VAR 0 3
84894: PUSH
84895: LD_INT 0
84897: ST_TO_ADDR
// end ;
84898: LD_VAR 0 3
84902: RET
// export function HealTarget ( sci ) ; begin
84903: LD_INT 0
84905: PPUSH
// if not sci then
84906: LD_VAR 0 1
84910: NOT
84911: IFFALSE 84915
// exit ;
84913: GO 84980
// result := 0 ;
84915: LD_ADDR_VAR 0 2
84919: PUSH
84920: LD_INT 0
84922: ST_TO_ADDR
// if GetTaskList ( sci ) then
84923: LD_VAR 0 1
84927: PPUSH
84928: CALL_OW 437
84932: IFFALSE 84980
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
84934: LD_VAR 0 1
84938: PPUSH
84939: CALL_OW 437
84943: PUSH
84944: LD_INT 1
84946: ARRAY
84947: PUSH
84948: LD_INT 1
84950: ARRAY
84951: PUSH
84952: LD_STRING l
84954: EQUAL
84955: IFFALSE 84980
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
84957: LD_ADDR_VAR 0 2
84961: PUSH
84962: LD_VAR 0 1
84966: PPUSH
84967: CALL_OW 437
84971: PUSH
84972: LD_INT 1
84974: ARRAY
84975: PUSH
84976: LD_INT 4
84978: ARRAY
84979: ST_TO_ADDR
// end ;
84980: LD_VAR 0 2
84984: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
84985: LD_INT 0
84987: PPUSH
84988: PPUSH
84989: PPUSH
84990: PPUSH
// if not base_units then
84991: LD_VAR 0 1
84995: NOT
84996: IFFALSE 85000
// exit ;
84998: GO 85087
// result := false ;
85000: LD_ADDR_VAR 0 2
85004: PUSH
85005: LD_INT 0
85007: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
85008: LD_ADDR_VAR 0 5
85012: PUSH
85013: LD_VAR 0 1
85017: PPUSH
85018: LD_INT 21
85020: PUSH
85021: LD_INT 3
85023: PUSH
85024: EMPTY
85025: LIST
85026: LIST
85027: PPUSH
85028: CALL_OW 72
85032: ST_TO_ADDR
// if not tmp then
85033: LD_VAR 0 5
85037: NOT
85038: IFFALSE 85042
// exit ;
85040: GO 85087
// for i in tmp do
85042: LD_ADDR_VAR 0 3
85046: PUSH
85047: LD_VAR 0 5
85051: PUSH
85052: FOR_IN
85053: IFFALSE 85085
// begin result := EnemyInRange ( i , 22 ) ;
85055: LD_ADDR_VAR 0 2
85059: PUSH
85060: LD_VAR 0 3
85064: PPUSH
85065: LD_INT 22
85067: PPUSH
85068: CALL 82756 0 2
85072: ST_TO_ADDR
// if result then
85073: LD_VAR 0 2
85077: IFFALSE 85083
// exit ;
85079: POP
85080: POP
85081: GO 85087
// end ;
85083: GO 85052
85085: POP
85086: POP
// end ;
85087: LD_VAR 0 2
85091: RET
// export function FilterByTag ( units , tag ) ; begin
85092: LD_INT 0
85094: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
85095: LD_ADDR_VAR 0 3
85099: PUSH
85100: LD_VAR 0 1
85104: PPUSH
85105: LD_INT 120
85107: PUSH
85108: LD_VAR 0 2
85112: PUSH
85113: EMPTY
85114: LIST
85115: LIST
85116: PPUSH
85117: CALL_OW 72
85121: ST_TO_ADDR
// end ;
85122: LD_VAR 0 3
85126: RET
// export function IsDriver ( un ) ; begin
85127: LD_INT 0
85129: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
85130: LD_ADDR_VAR 0 2
85134: PUSH
85135: LD_VAR 0 1
85139: PUSH
85140: LD_INT 55
85142: PUSH
85143: EMPTY
85144: LIST
85145: PPUSH
85146: CALL_OW 69
85150: IN
85151: ST_TO_ADDR
// end ;
85152: LD_VAR 0 2
85156: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
85157: LD_INT 0
85159: PPUSH
85160: PPUSH
// list := [ ] ;
85161: LD_ADDR_VAR 0 5
85165: PUSH
85166: EMPTY
85167: ST_TO_ADDR
// case d of 0 :
85168: LD_VAR 0 3
85172: PUSH
85173: LD_INT 0
85175: DOUBLE
85176: EQUAL
85177: IFTRUE 85181
85179: GO 85314
85181: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
85182: LD_ADDR_VAR 0 5
85186: PUSH
85187: LD_VAR 0 1
85191: PUSH
85192: LD_INT 4
85194: MINUS
85195: PUSH
85196: LD_VAR 0 2
85200: PUSH
85201: LD_INT 4
85203: MINUS
85204: PUSH
85205: LD_INT 2
85207: PUSH
85208: EMPTY
85209: LIST
85210: LIST
85211: LIST
85212: PUSH
85213: LD_VAR 0 1
85217: PUSH
85218: LD_INT 3
85220: MINUS
85221: PUSH
85222: LD_VAR 0 2
85226: PUSH
85227: LD_INT 1
85229: PUSH
85230: EMPTY
85231: LIST
85232: LIST
85233: LIST
85234: PUSH
85235: LD_VAR 0 1
85239: PUSH
85240: LD_INT 4
85242: PLUS
85243: PUSH
85244: LD_VAR 0 2
85248: PUSH
85249: LD_INT 4
85251: PUSH
85252: EMPTY
85253: LIST
85254: LIST
85255: LIST
85256: PUSH
85257: LD_VAR 0 1
85261: PUSH
85262: LD_INT 3
85264: PLUS
85265: PUSH
85266: LD_VAR 0 2
85270: PUSH
85271: LD_INT 3
85273: PLUS
85274: PUSH
85275: LD_INT 5
85277: PUSH
85278: EMPTY
85279: LIST
85280: LIST
85281: LIST
85282: PUSH
85283: LD_VAR 0 1
85287: PUSH
85288: LD_VAR 0 2
85292: PUSH
85293: LD_INT 4
85295: PLUS
85296: PUSH
85297: LD_INT 0
85299: PUSH
85300: EMPTY
85301: LIST
85302: LIST
85303: LIST
85304: PUSH
85305: EMPTY
85306: LIST
85307: LIST
85308: LIST
85309: LIST
85310: LIST
85311: ST_TO_ADDR
// end ; 1 :
85312: GO 86012
85314: LD_INT 1
85316: DOUBLE
85317: EQUAL
85318: IFTRUE 85322
85320: GO 85455
85322: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
85323: LD_ADDR_VAR 0 5
85327: PUSH
85328: LD_VAR 0 1
85332: PUSH
85333: LD_VAR 0 2
85337: PUSH
85338: LD_INT 4
85340: MINUS
85341: PUSH
85342: LD_INT 3
85344: PUSH
85345: EMPTY
85346: LIST
85347: LIST
85348: LIST
85349: PUSH
85350: LD_VAR 0 1
85354: PUSH
85355: LD_INT 3
85357: MINUS
85358: PUSH
85359: LD_VAR 0 2
85363: PUSH
85364: LD_INT 3
85366: MINUS
85367: PUSH
85368: LD_INT 2
85370: PUSH
85371: EMPTY
85372: LIST
85373: LIST
85374: LIST
85375: PUSH
85376: LD_VAR 0 1
85380: PUSH
85381: LD_INT 4
85383: MINUS
85384: PUSH
85385: LD_VAR 0 2
85389: PUSH
85390: LD_INT 1
85392: PUSH
85393: EMPTY
85394: LIST
85395: LIST
85396: LIST
85397: PUSH
85398: LD_VAR 0 1
85402: PUSH
85403: LD_VAR 0 2
85407: PUSH
85408: LD_INT 3
85410: PLUS
85411: PUSH
85412: LD_INT 0
85414: PUSH
85415: EMPTY
85416: LIST
85417: LIST
85418: LIST
85419: PUSH
85420: LD_VAR 0 1
85424: PUSH
85425: LD_INT 4
85427: PLUS
85428: PUSH
85429: LD_VAR 0 2
85433: PUSH
85434: LD_INT 4
85436: PLUS
85437: PUSH
85438: LD_INT 5
85440: PUSH
85441: EMPTY
85442: LIST
85443: LIST
85444: LIST
85445: PUSH
85446: EMPTY
85447: LIST
85448: LIST
85449: LIST
85450: LIST
85451: LIST
85452: ST_TO_ADDR
// end ; 2 :
85453: GO 86012
85455: LD_INT 2
85457: DOUBLE
85458: EQUAL
85459: IFTRUE 85463
85461: GO 85592
85463: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
85464: LD_ADDR_VAR 0 5
85468: PUSH
85469: LD_VAR 0 1
85473: PUSH
85474: LD_VAR 0 2
85478: PUSH
85479: LD_INT 3
85481: MINUS
85482: PUSH
85483: LD_INT 3
85485: PUSH
85486: EMPTY
85487: LIST
85488: LIST
85489: LIST
85490: PUSH
85491: LD_VAR 0 1
85495: PUSH
85496: LD_INT 4
85498: PLUS
85499: PUSH
85500: LD_VAR 0 2
85504: PUSH
85505: LD_INT 4
85507: PUSH
85508: EMPTY
85509: LIST
85510: LIST
85511: LIST
85512: PUSH
85513: LD_VAR 0 1
85517: PUSH
85518: LD_VAR 0 2
85522: PUSH
85523: LD_INT 4
85525: PLUS
85526: PUSH
85527: LD_INT 0
85529: PUSH
85530: EMPTY
85531: LIST
85532: LIST
85533: LIST
85534: PUSH
85535: LD_VAR 0 1
85539: PUSH
85540: LD_INT 3
85542: MINUS
85543: PUSH
85544: LD_VAR 0 2
85548: PUSH
85549: LD_INT 1
85551: PUSH
85552: EMPTY
85553: LIST
85554: LIST
85555: LIST
85556: PUSH
85557: LD_VAR 0 1
85561: PUSH
85562: LD_INT 4
85564: MINUS
85565: PUSH
85566: LD_VAR 0 2
85570: PUSH
85571: LD_INT 4
85573: MINUS
85574: PUSH
85575: LD_INT 2
85577: PUSH
85578: EMPTY
85579: LIST
85580: LIST
85581: LIST
85582: PUSH
85583: EMPTY
85584: LIST
85585: LIST
85586: LIST
85587: LIST
85588: LIST
85589: ST_TO_ADDR
// end ; 3 :
85590: GO 86012
85592: LD_INT 3
85594: DOUBLE
85595: EQUAL
85596: IFTRUE 85600
85598: GO 85733
85600: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
85601: LD_ADDR_VAR 0 5
85605: PUSH
85606: LD_VAR 0 1
85610: PUSH
85611: LD_INT 3
85613: PLUS
85614: PUSH
85615: LD_VAR 0 2
85619: PUSH
85620: LD_INT 4
85622: PUSH
85623: EMPTY
85624: LIST
85625: LIST
85626: LIST
85627: PUSH
85628: LD_VAR 0 1
85632: PUSH
85633: LD_INT 4
85635: PLUS
85636: PUSH
85637: LD_VAR 0 2
85641: PUSH
85642: LD_INT 4
85644: PLUS
85645: PUSH
85646: LD_INT 5
85648: PUSH
85649: EMPTY
85650: LIST
85651: LIST
85652: LIST
85653: PUSH
85654: LD_VAR 0 1
85658: PUSH
85659: LD_INT 4
85661: MINUS
85662: PUSH
85663: LD_VAR 0 2
85667: PUSH
85668: LD_INT 1
85670: PUSH
85671: EMPTY
85672: LIST
85673: LIST
85674: LIST
85675: PUSH
85676: LD_VAR 0 1
85680: PUSH
85681: LD_VAR 0 2
85685: PUSH
85686: LD_INT 4
85688: MINUS
85689: PUSH
85690: LD_INT 3
85692: PUSH
85693: EMPTY
85694: LIST
85695: LIST
85696: LIST
85697: PUSH
85698: LD_VAR 0 1
85702: PUSH
85703: LD_INT 3
85705: MINUS
85706: PUSH
85707: LD_VAR 0 2
85711: PUSH
85712: LD_INT 3
85714: MINUS
85715: PUSH
85716: LD_INT 2
85718: PUSH
85719: EMPTY
85720: LIST
85721: LIST
85722: LIST
85723: PUSH
85724: EMPTY
85725: LIST
85726: LIST
85727: LIST
85728: LIST
85729: LIST
85730: ST_TO_ADDR
// end ; 4 :
85731: GO 86012
85733: LD_INT 4
85735: DOUBLE
85736: EQUAL
85737: IFTRUE 85741
85739: GO 85874
85741: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
85742: LD_ADDR_VAR 0 5
85746: PUSH
85747: LD_VAR 0 1
85751: PUSH
85752: LD_VAR 0 2
85756: PUSH
85757: LD_INT 4
85759: PLUS
85760: PUSH
85761: LD_INT 0
85763: PUSH
85764: EMPTY
85765: LIST
85766: LIST
85767: LIST
85768: PUSH
85769: LD_VAR 0 1
85773: PUSH
85774: LD_INT 3
85776: PLUS
85777: PUSH
85778: LD_VAR 0 2
85782: PUSH
85783: LD_INT 3
85785: PLUS
85786: PUSH
85787: LD_INT 5
85789: PUSH
85790: EMPTY
85791: LIST
85792: LIST
85793: LIST
85794: PUSH
85795: LD_VAR 0 1
85799: PUSH
85800: LD_INT 4
85802: PLUS
85803: PUSH
85804: LD_VAR 0 2
85808: PUSH
85809: LD_INT 4
85811: PUSH
85812: EMPTY
85813: LIST
85814: LIST
85815: LIST
85816: PUSH
85817: LD_VAR 0 1
85821: PUSH
85822: LD_VAR 0 2
85826: PUSH
85827: LD_INT 3
85829: MINUS
85830: PUSH
85831: LD_INT 3
85833: PUSH
85834: EMPTY
85835: LIST
85836: LIST
85837: LIST
85838: PUSH
85839: LD_VAR 0 1
85843: PUSH
85844: LD_INT 4
85846: MINUS
85847: PUSH
85848: LD_VAR 0 2
85852: PUSH
85853: LD_INT 4
85855: MINUS
85856: PUSH
85857: LD_INT 2
85859: PUSH
85860: EMPTY
85861: LIST
85862: LIST
85863: LIST
85864: PUSH
85865: EMPTY
85866: LIST
85867: LIST
85868: LIST
85869: LIST
85870: LIST
85871: ST_TO_ADDR
// end ; 5 :
85872: GO 86012
85874: LD_INT 5
85876: DOUBLE
85877: EQUAL
85878: IFTRUE 85882
85880: GO 86011
85882: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
85883: LD_ADDR_VAR 0 5
85887: PUSH
85888: LD_VAR 0 1
85892: PUSH
85893: LD_INT 4
85895: MINUS
85896: PUSH
85897: LD_VAR 0 2
85901: PUSH
85902: LD_INT 1
85904: PUSH
85905: EMPTY
85906: LIST
85907: LIST
85908: LIST
85909: PUSH
85910: LD_VAR 0 1
85914: PUSH
85915: LD_VAR 0 2
85919: PUSH
85920: LD_INT 4
85922: MINUS
85923: PUSH
85924: LD_INT 3
85926: PUSH
85927: EMPTY
85928: LIST
85929: LIST
85930: LIST
85931: PUSH
85932: LD_VAR 0 1
85936: PUSH
85937: LD_INT 4
85939: PLUS
85940: PUSH
85941: LD_VAR 0 2
85945: PUSH
85946: LD_INT 4
85948: PLUS
85949: PUSH
85950: LD_INT 5
85952: PUSH
85953: EMPTY
85954: LIST
85955: LIST
85956: LIST
85957: PUSH
85958: LD_VAR 0 1
85962: PUSH
85963: LD_INT 3
85965: PLUS
85966: PUSH
85967: LD_VAR 0 2
85971: PUSH
85972: LD_INT 4
85974: PUSH
85975: EMPTY
85976: LIST
85977: LIST
85978: LIST
85979: PUSH
85980: LD_VAR 0 1
85984: PUSH
85985: LD_VAR 0 2
85989: PUSH
85990: LD_INT 3
85992: PLUS
85993: PUSH
85994: LD_INT 0
85996: PUSH
85997: EMPTY
85998: LIST
85999: LIST
86000: LIST
86001: PUSH
86002: EMPTY
86003: LIST
86004: LIST
86005: LIST
86006: LIST
86007: LIST
86008: ST_TO_ADDR
// end ; end ;
86009: GO 86012
86011: POP
// result := list ;
86012: LD_ADDR_VAR 0 4
86016: PUSH
86017: LD_VAR 0 5
86021: ST_TO_ADDR
// end ;
86022: LD_VAR 0 4
86026: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
86027: LD_INT 0
86029: PPUSH
86030: PPUSH
86031: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
86032: LD_VAR 0 1
86036: NOT
86037: PUSH
86038: LD_VAR 0 2
86042: PUSH
86043: LD_INT 1
86045: PUSH
86046: LD_INT 2
86048: PUSH
86049: LD_INT 3
86051: PUSH
86052: LD_INT 4
86054: PUSH
86055: EMPTY
86056: LIST
86057: LIST
86058: LIST
86059: LIST
86060: IN
86061: NOT
86062: OR
86063: IFFALSE 86067
// exit ;
86065: GO 86159
// tmp := [ ] ;
86067: LD_ADDR_VAR 0 5
86071: PUSH
86072: EMPTY
86073: ST_TO_ADDR
// for i in units do
86074: LD_ADDR_VAR 0 4
86078: PUSH
86079: LD_VAR 0 1
86083: PUSH
86084: FOR_IN
86085: IFFALSE 86128
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
86087: LD_ADDR_VAR 0 5
86091: PUSH
86092: LD_VAR 0 5
86096: PPUSH
86097: LD_VAR 0 5
86101: PUSH
86102: LD_INT 1
86104: PLUS
86105: PPUSH
86106: LD_VAR 0 4
86110: PPUSH
86111: LD_VAR 0 2
86115: PPUSH
86116: CALL_OW 259
86120: PPUSH
86121: CALL_OW 2
86125: ST_TO_ADDR
86126: GO 86084
86128: POP
86129: POP
// if not tmp then
86130: LD_VAR 0 5
86134: NOT
86135: IFFALSE 86139
// exit ;
86137: GO 86159
// result := SortListByListDesc ( units , tmp ) ;
86139: LD_ADDR_VAR 0 3
86143: PUSH
86144: LD_VAR 0 1
86148: PPUSH
86149: LD_VAR 0 5
86153: PPUSH
86154: CALL_OW 77
86158: ST_TO_ADDR
// end ;
86159: LD_VAR 0 3
86163: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
86164: LD_INT 0
86166: PPUSH
86167: PPUSH
86168: PPUSH
// result := false ;
86169: LD_ADDR_VAR 0 3
86173: PUSH
86174: LD_INT 0
86176: ST_TO_ADDR
// x := GetX ( building ) ;
86177: LD_ADDR_VAR 0 4
86181: PUSH
86182: LD_VAR 0 2
86186: PPUSH
86187: CALL_OW 250
86191: ST_TO_ADDR
// y := GetY ( building ) ;
86192: LD_ADDR_VAR 0 5
86196: PUSH
86197: LD_VAR 0 2
86201: PPUSH
86202: CALL_OW 251
86206: ST_TO_ADDR
// if not building or not x or not y then
86207: LD_VAR 0 2
86211: NOT
86212: PUSH
86213: LD_VAR 0 4
86217: NOT
86218: OR
86219: PUSH
86220: LD_VAR 0 5
86224: NOT
86225: OR
86226: IFFALSE 86230
// exit ;
86228: GO 86322
// if GetTaskList ( unit ) then
86230: LD_VAR 0 1
86234: PPUSH
86235: CALL_OW 437
86239: IFFALSE 86322
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86241: LD_STRING e
86243: PUSH
86244: LD_VAR 0 1
86248: PPUSH
86249: CALL_OW 437
86253: PUSH
86254: LD_INT 1
86256: ARRAY
86257: PUSH
86258: LD_INT 1
86260: ARRAY
86261: EQUAL
86262: PUSH
86263: LD_VAR 0 4
86267: PUSH
86268: LD_VAR 0 1
86272: PPUSH
86273: CALL_OW 437
86277: PUSH
86278: LD_INT 1
86280: ARRAY
86281: PUSH
86282: LD_INT 2
86284: ARRAY
86285: EQUAL
86286: AND
86287: PUSH
86288: LD_VAR 0 5
86292: PUSH
86293: LD_VAR 0 1
86297: PPUSH
86298: CALL_OW 437
86302: PUSH
86303: LD_INT 1
86305: ARRAY
86306: PUSH
86307: LD_INT 3
86309: ARRAY
86310: EQUAL
86311: AND
86312: IFFALSE 86322
// result := true end ;
86314: LD_ADDR_VAR 0 3
86318: PUSH
86319: LD_INT 1
86321: ST_TO_ADDR
// end ;
86322: LD_VAR 0 3
86326: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
86327: LD_INT 0
86329: PPUSH
// result := false ;
86330: LD_ADDR_VAR 0 4
86334: PUSH
86335: LD_INT 0
86337: ST_TO_ADDR
// if GetTaskList ( unit ) then
86338: LD_VAR 0 1
86342: PPUSH
86343: CALL_OW 437
86347: IFFALSE 86430
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86349: LD_STRING M
86351: PUSH
86352: LD_VAR 0 1
86356: PPUSH
86357: CALL_OW 437
86361: PUSH
86362: LD_INT 1
86364: ARRAY
86365: PUSH
86366: LD_INT 1
86368: ARRAY
86369: EQUAL
86370: PUSH
86371: LD_VAR 0 2
86375: PUSH
86376: LD_VAR 0 1
86380: PPUSH
86381: CALL_OW 437
86385: PUSH
86386: LD_INT 1
86388: ARRAY
86389: PUSH
86390: LD_INT 2
86392: ARRAY
86393: EQUAL
86394: AND
86395: PUSH
86396: LD_VAR 0 3
86400: PUSH
86401: LD_VAR 0 1
86405: PPUSH
86406: CALL_OW 437
86410: PUSH
86411: LD_INT 1
86413: ARRAY
86414: PUSH
86415: LD_INT 3
86417: ARRAY
86418: EQUAL
86419: AND
86420: IFFALSE 86430
// result := true ;
86422: LD_ADDR_VAR 0 4
86426: PUSH
86427: LD_INT 1
86429: ST_TO_ADDR
// end ; end ;
86430: LD_VAR 0 4
86434: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
86435: LD_INT 0
86437: PPUSH
86438: PPUSH
86439: PPUSH
86440: PPUSH
// if not unit or not area then
86441: LD_VAR 0 1
86445: NOT
86446: PUSH
86447: LD_VAR 0 2
86451: NOT
86452: OR
86453: IFFALSE 86457
// exit ;
86455: GO 86621
// tmp := AreaToList ( area , i ) ;
86457: LD_ADDR_VAR 0 6
86461: PUSH
86462: LD_VAR 0 2
86466: PPUSH
86467: LD_VAR 0 5
86471: PPUSH
86472: CALL_OW 517
86476: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
86477: LD_ADDR_VAR 0 5
86481: PUSH
86482: DOUBLE
86483: LD_INT 1
86485: DEC
86486: ST_TO_ADDR
86487: LD_VAR 0 6
86491: PUSH
86492: LD_INT 1
86494: ARRAY
86495: PUSH
86496: FOR_TO
86497: IFFALSE 86619
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
86499: LD_ADDR_VAR 0 7
86503: PUSH
86504: LD_VAR 0 6
86508: PUSH
86509: LD_INT 1
86511: ARRAY
86512: PUSH
86513: LD_VAR 0 5
86517: ARRAY
86518: PUSH
86519: LD_VAR 0 6
86523: PUSH
86524: LD_INT 2
86526: ARRAY
86527: PUSH
86528: LD_VAR 0 5
86532: ARRAY
86533: PUSH
86534: EMPTY
86535: LIST
86536: LIST
86537: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
86538: LD_VAR 0 7
86542: PUSH
86543: LD_INT 1
86545: ARRAY
86546: PPUSH
86547: LD_VAR 0 7
86551: PUSH
86552: LD_INT 2
86554: ARRAY
86555: PPUSH
86556: CALL_OW 428
86560: PUSH
86561: LD_INT 0
86563: EQUAL
86564: IFFALSE 86617
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
86566: LD_VAR 0 1
86570: PPUSH
86571: LD_VAR 0 7
86575: PUSH
86576: LD_INT 1
86578: ARRAY
86579: PPUSH
86580: LD_VAR 0 7
86584: PUSH
86585: LD_INT 2
86587: ARRAY
86588: PPUSH
86589: LD_VAR 0 3
86593: PPUSH
86594: CALL_OW 48
// result := IsPlaced ( unit ) ;
86598: LD_ADDR_VAR 0 4
86602: PUSH
86603: LD_VAR 0 1
86607: PPUSH
86608: CALL_OW 305
86612: ST_TO_ADDR
// exit ;
86613: POP
86614: POP
86615: GO 86621
// end ; end ;
86617: GO 86496
86619: POP
86620: POP
// end ;
86621: LD_VAR 0 4
86625: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
86626: LD_INT 0
86628: PPUSH
86629: PPUSH
86630: PPUSH
// if not side or side > 8 then
86631: LD_VAR 0 1
86635: NOT
86636: PUSH
86637: LD_VAR 0 1
86641: PUSH
86642: LD_INT 8
86644: GREATER
86645: OR
86646: IFFALSE 86650
// exit ;
86648: GO 86837
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
86650: LD_ADDR_VAR 0 4
86654: PUSH
86655: LD_INT 22
86657: PUSH
86658: LD_VAR 0 1
86662: PUSH
86663: EMPTY
86664: LIST
86665: LIST
86666: PUSH
86667: LD_INT 21
86669: PUSH
86670: LD_INT 3
86672: PUSH
86673: EMPTY
86674: LIST
86675: LIST
86676: PUSH
86677: EMPTY
86678: LIST
86679: LIST
86680: PPUSH
86681: CALL_OW 69
86685: ST_TO_ADDR
// if not tmp then
86686: LD_VAR 0 4
86690: NOT
86691: IFFALSE 86695
// exit ;
86693: GO 86837
// enable_addtolog := true ;
86695: LD_ADDR_OWVAR 81
86699: PUSH
86700: LD_INT 1
86702: ST_TO_ADDR
// AddToLog ( [ ) ;
86703: LD_STRING [
86705: PPUSH
86706: CALL_OW 561
// for i in tmp do
86710: LD_ADDR_VAR 0 3
86714: PUSH
86715: LD_VAR 0 4
86719: PUSH
86720: FOR_IN
86721: IFFALSE 86828
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
86723: LD_STRING [
86725: PUSH
86726: LD_VAR 0 3
86730: PPUSH
86731: CALL_OW 266
86735: STR
86736: PUSH
86737: LD_STRING , 
86739: STR
86740: PUSH
86741: LD_VAR 0 3
86745: PPUSH
86746: CALL_OW 250
86750: STR
86751: PUSH
86752: LD_STRING , 
86754: STR
86755: PUSH
86756: LD_VAR 0 3
86760: PPUSH
86761: CALL_OW 251
86765: STR
86766: PUSH
86767: LD_STRING , 
86769: STR
86770: PUSH
86771: LD_VAR 0 3
86775: PPUSH
86776: CALL_OW 254
86780: STR
86781: PUSH
86782: LD_STRING , 
86784: STR
86785: PUSH
86786: LD_VAR 0 3
86790: PPUSH
86791: LD_INT 1
86793: PPUSH
86794: CALL_OW 268
86798: STR
86799: PUSH
86800: LD_STRING , 
86802: STR
86803: PUSH
86804: LD_VAR 0 3
86808: PPUSH
86809: LD_INT 2
86811: PPUSH
86812: CALL_OW 268
86816: STR
86817: PUSH
86818: LD_STRING ],
86820: STR
86821: PPUSH
86822: CALL_OW 561
// end ;
86826: GO 86720
86828: POP
86829: POP
// AddToLog ( ]; ) ;
86830: LD_STRING ];
86832: PPUSH
86833: CALL_OW 561
// end ;
86837: LD_VAR 0 2
86841: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
86842: LD_INT 0
86844: PPUSH
86845: PPUSH
86846: PPUSH
86847: PPUSH
86848: PPUSH
// if not area or not rate or not max then
86849: LD_VAR 0 1
86853: NOT
86854: PUSH
86855: LD_VAR 0 2
86859: NOT
86860: OR
86861: PUSH
86862: LD_VAR 0 4
86866: NOT
86867: OR
86868: IFFALSE 86872
// exit ;
86870: GO 87061
// while 1 do
86872: LD_INT 1
86874: IFFALSE 87061
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
86876: LD_ADDR_VAR 0 9
86880: PUSH
86881: LD_VAR 0 1
86885: PPUSH
86886: LD_INT 1
86888: PPUSH
86889: CALL_OW 287
86893: PUSH
86894: LD_INT 10
86896: MUL
86897: ST_TO_ADDR
// r := rate / 10 ;
86898: LD_ADDR_VAR 0 7
86902: PUSH
86903: LD_VAR 0 2
86907: PUSH
86908: LD_INT 10
86910: DIVREAL
86911: ST_TO_ADDR
// time := 1 1$00 ;
86912: LD_ADDR_VAR 0 8
86916: PUSH
86917: LD_INT 2100
86919: ST_TO_ADDR
// if amount < min then
86920: LD_VAR 0 9
86924: PUSH
86925: LD_VAR 0 3
86929: LESS
86930: IFFALSE 86948
// r := r * 2 else
86932: LD_ADDR_VAR 0 7
86936: PUSH
86937: LD_VAR 0 7
86941: PUSH
86942: LD_INT 2
86944: MUL
86945: ST_TO_ADDR
86946: GO 86974
// if amount > max then
86948: LD_VAR 0 9
86952: PUSH
86953: LD_VAR 0 4
86957: GREATER
86958: IFFALSE 86974
// r := r / 2 ;
86960: LD_ADDR_VAR 0 7
86964: PUSH
86965: LD_VAR 0 7
86969: PUSH
86970: LD_INT 2
86972: DIVREAL
86973: ST_TO_ADDR
// time := time / r ;
86974: LD_ADDR_VAR 0 8
86978: PUSH
86979: LD_VAR 0 8
86983: PUSH
86984: LD_VAR 0 7
86988: DIVREAL
86989: ST_TO_ADDR
// if time < 0 then
86990: LD_VAR 0 8
86994: PUSH
86995: LD_INT 0
86997: LESS
86998: IFFALSE 87015
// time := time * - 1 ;
87000: LD_ADDR_VAR 0 8
87004: PUSH
87005: LD_VAR 0 8
87009: PUSH
87010: LD_INT 1
87012: NEG
87013: MUL
87014: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
87015: LD_VAR 0 8
87019: PUSH
87020: LD_INT 35
87022: PPUSH
87023: LD_INT 875
87025: PPUSH
87026: CALL_OW 12
87030: PLUS
87031: PPUSH
87032: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
87036: LD_INT 1
87038: PPUSH
87039: LD_INT 5
87041: PPUSH
87042: CALL_OW 12
87046: PPUSH
87047: LD_VAR 0 1
87051: PPUSH
87052: LD_INT 1
87054: PPUSH
87055: CALL_OW 55
// end ;
87059: GO 86872
// end ;
87061: LD_VAR 0 5
87065: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
87066: LD_INT 0
87068: PPUSH
87069: PPUSH
87070: PPUSH
87071: PPUSH
87072: PPUSH
87073: PPUSH
87074: PPUSH
87075: PPUSH
// if not turrets or not factories then
87076: LD_VAR 0 1
87080: NOT
87081: PUSH
87082: LD_VAR 0 2
87086: NOT
87087: OR
87088: IFFALSE 87092
// exit ;
87090: GO 87399
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
87092: LD_ADDR_VAR 0 10
87096: PUSH
87097: LD_INT 5
87099: PUSH
87100: LD_INT 6
87102: PUSH
87103: EMPTY
87104: LIST
87105: LIST
87106: PUSH
87107: LD_INT 2
87109: PUSH
87110: LD_INT 4
87112: PUSH
87113: EMPTY
87114: LIST
87115: LIST
87116: PUSH
87117: LD_INT 3
87119: PUSH
87120: LD_INT 5
87122: PUSH
87123: EMPTY
87124: LIST
87125: LIST
87126: PUSH
87127: EMPTY
87128: LIST
87129: LIST
87130: LIST
87131: PUSH
87132: LD_INT 24
87134: PUSH
87135: LD_INT 25
87137: PUSH
87138: EMPTY
87139: LIST
87140: LIST
87141: PUSH
87142: LD_INT 23
87144: PUSH
87145: LD_INT 27
87147: PUSH
87148: EMPTY
87149: LIST
87150: LIST
87151: PUSH
87152: EMPTY
87153: LIST
87154: LIST
87155: PUSH
87156: LD_INT 42
87158: PUSH
87159: LD_INT 43
87161: PUSH
87162: EMPTY
87163: LIST
87164: LIST
87165: PUSH
87166: LD_INT 44
87168: PUSH
87169: LD_INT 46
87171: PUSH
87172: EMPTY
87173: LIST
87174: LIST
87175: PUSH
87176: LD_INT 45
87178: PUSH
87179: LD_INT 47
87181: PUSH
87182: EMPTY
87183: LIST
87184: LIST
87185: PUSH
87186: EMPTY
87187: LIST
87188: LIST
87189: LIST
87190: PUSH
87191: EMPTY
87192: LIST
87193: LIST
87194: LIST
87195: ST_TO_ADDR
// result := [ ] ;
87196: LD_ADDR_VAR 0 3
87200: PUSH
87201: EMPTY
87202: ST_TO_ADDR
// for i in turrets do
87203: LD_ADDR_VAR 0 4
87207: PUSH
87208: LD_VAR 0 1
87212: PUSH
87213: FOR_IN
87214: IFFALSE 87397
// begin nat := GetNation ( i ) ;
87216: LD_ADDR_VAR 0 7
87220: PUSH
87221: LD_VAR 0 4
87225: PPUSH
87226: CALL_OW 248
87230: ST_TO_ADDR
// weapon := 0 ;
87231: LD_ADDR_VAR 0 8
87235: PUSH
87236: LD_INT 0
87238: ST_TO_ADDR
// if not nat then
87239: LD_VAR 0 7
87243: NOT
87244: IFFALSE 87248
// continue ;
87246: GO 87213
// for j in list [ nat ] do
87248: LD_ADDR_VAR 0 5
87252: PUSH
87253: LD_VAR 0 10
87257: PUSH
87258: LD_VAR 0 7
87262: ARRAY
87263: PUSH
87264: FOR_IN
87265: IFFALSE 87306
// if GetBWeapon ( i ) = j [ 1 ] then
87267: LD_VAR 0 4
87271: PPUSH
87272: CALL_OW 269
87276: PUSH
87277: LD_VAR 0 5
87281: PUSH
87282: LD_INT 1
87284: ARRAY
87285: EQUAL
87286: IFFALSE 87304
// begin weapon := j [ 2 ] ;
87288: LD_ADDR_VAR 0 8
87292: PUSH
87293: LD_VAR 0 5
87297: PUSH
87298: LD_INT 2
87300: ARRAY
87301: ST_TO_ADDR
// break ;
87302: GO 87306
// end ;
87304: GO 87264
87306: POP
87307: POP
// if not weapon then
87308: LD_VAR 0 8
87312: NOT
87313: IFFALSE 87317
// continue ;
87315: GO 87213
// for k in factories do
87317: LD_ADDR_VAR 0 6
87321: PUSH
87322: LD_VAR 0 2
87326: PUSH
87327: FOR_IN
87328: IFFALSE 87393
// begin weapons := AvailableWeaponList ( k ) ;
87330: LD_ADDR_VAR 0 9
87334: PUSH
87335: LD_VAR 0 6
87339: PPUSH
87340: CALL_OW 478
87344: ST_TO_ADDR
// if not weapons then
87345: LD_VAR 0 9
87349: NOT
87350: IFFALSE 87354
// continue ;
87352: GO 87327
// if weapon in weapons then
87354: LD_VAR 0 8
87358: PUSH
87359: LD_VAR 0 9
87363: IN
87364: IFFALSE 87391
// begin result := [ i , weapon ] ;
87366: LD_ADDR_VAR 0 3
87370: PUSH
87371: LD_VAR 0 4
87375: PUSH
87376: LD_VAR 0 8
87380: PUSH
87381: EMPTY
87382: LIST
87383: LIST
87384: ST_TO_ADDR
// exit ;
87385: POP
87386: POP
87387: POP
87388: POP
87389: GO 87399
// end ; end ;
87391: GO 87327
87393: POP
87394: POP
// end ;
87395: GO 87213
87397: POP
87398: POP
// end ;
87399: LD_VAR 0 3
87403: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
87404: LD_INT 0
87406: PPUSH
// if not side or side > 8 then
87407: LD_VAR 0 3
87411: NOT
87412: PUSH
87413: LD_VAR 0 3
87417: PUSH
87418: LD_INT 8
87420: GREATER
87421: OR
87422: IFFALSE 87426
// exit ;
87424: GO 87485
// if not range then
87426: LD_VAR 0 4
87430: NOT
87431: IFFALSE 87442
// range := - 12 ;
87433: LD_ADDR_VAR 0 4
87437: PUSH
87438: LD_INT 12
87440: NEG
87441: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
87442: LD_VAR 0 1
87446: PPUSH
87447: LD_VAR 0 2
87451: PPUSH
87452: LD_VAR 0 3
87456: PPUSH
87457: LD_VAR 0 4
87461: PPUSH
87462: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
87466: LD_VAR 0 1
87470: PPUSH
87471: LD_VAR 0 2
87475: PPUSH
87476: LD_VAR 0 3
87480: PPUSH
87481: CALL_OW 331
// end ;
87485: LD_VAR 0 5
87489: RET
// export function Video ( mode ) ; begin
87490: LD_INT 0
87492: PPUSH
// ingame_video = mode ;
87493: LD_ADDR_OWVAR 52
87497: PUSH
87498: LD_VAR 0 1
87502: ST_TO_ADDR
// interface_hidden = mode ;
87503: LD_ADDR_OWVAR 54
87507: PUSH
87508: LD_VAR 0 1
87512: ST_TO_ADDR
// end ;
87513: LD_VAR 0 2
87517: RET
// export function Join ( array , element ) ; begin
87518: LD_INT 0
87520: PPUSH
// result := Replace ( array , array + 1 , element ) ;
87521: LD_ADDR_VAR 0 3
87525: PUSH
87526: LD_VAR 0 1
87530: PPUSH
87531: LD_VAR 0 1
87535: PUSH
87536: LD_INT 1
87538: PLUS
87539: PPUSH
87540: LD_VAR 0 2
87544: PPUSH
87545: CALL_OW 1
87549: ST_TO_ADDR
// end ;
87550: LD_VAR 0 3
87554: RET
// export function JoinUnion ( array , element ) ; begin
87555: LD_INT 0
87557: PPUSH
// result := array union element ;
87558: LD_ADDR_VAR 0 3
87562: PUSH
87563: LD_VAR 0 1
87567: PUSH
87568: LD_VAR 0 2
87572: UNION
87573: ST_TO_ADDR
// end ;
87574: LD_VAR 0 3
87578: RET
// export function GetBehemoths ( side ) ; begin
87579: LD_INT 0
87581: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
87582: LD_ADDR_VAR 0 2
87586: PUSH
87587: LD_INT 22
87589: PUSH
87590: LD_VAR 0 1
87594: PUSH
87595: EMPTY
87596: LIST
87597: LIST
87598: PUSH
87599: LD_INT 31
87601: PUSH
87602: LD_INT 25
87604: PUSH
87605: EMPTY
87606: LIST
87607: LIST
87608: PUSH
87609: EMPTY
87610: LIST
87611: LIST
87612: PPUSH
87613: CALL_OW 69
87617: ST_TO_ADDR
// end ;
87618: LD_VAR 0 2
87622: RET
// export function Shuffle ( array ) ; var i , index ; begin
87623: LD_INT 0
87625: PPUSH
87626: PPUSH
87627: PPUSH
// result := [ ] ;
87628: LD_ADDR_VAR 0 2
87632: PUSH
87633: EMPTY
87634: ST_TO_ADDR
// if not array then
87635: LD_VAR 0 1
87639: NOT
87640: IFFALSE 87644
// exit ;
87642: GO 87743
// Randomize ;
87644: CALL_OW 10
// for i = array downto 1 do
87648: LD_ADDR_VAR 0 3
87652: PUSH
87653: DOUBLE
87654: LD_VAR 0 1
87658: INC
87659: ST_TO_ADDR
87660: LD_INT 1
87662: PUSH
87663: FOR_DOWNTO
87664: IFFALSE 87741
// begin index := rand ( 1 , array ) ;
87666: LD_ADDR_VAR 0 4
87670: PUSH
87671: LD_INT 1
87673: PPUSH
87674: LD_VAR 0 1
87678: PPUSH
87679: CALL_OW 12
87683: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
87684: LD_ADDR_VAR 0 2
87688: PUSH
87689: LD_VAR 0 2
87693: PPUSH
87694: LD_VAR 0 2
87698: PUSH
87699: LD_INT 1
87701: PLUS
87702: PPUSH
87703: LD_VAR 0 1
87707: PUSH
87708: LD_VAR 0 4
87712: ARRAY
87713: PPUSH
87714: CALL_OW 2
87718: ST_TO_ADDR
// array := Delete ( array , index ) ;
87719: LD_ADDR_VAR 0 1
87723: PUSH
87724: LD_VAR 0 1
87728: PPUSH
87729: LD_VAR 0 4
87733: PPUSH
87734: CALL_OW 3
87738: ST_TO_ADDR
// end ;
87739: GO 87663
87741: POP
87742: POP
// end ;
87743: LD_VAR 0 2
87747: RET
// export function GetBaseMaterials ( base ) ; begin
87748: LD_INT 0
87750: PPUSH
// result := [ 0 , 0 , 0 ] ;
87751: LD_ADDR_VAR 0 2
87755: PUSH
87756: LD_INT 0
87758: PUSH
87759: LD_INT 0
87761: PUSH
87762: LD_INT 0
87764: PUSH
87765: EMPTY
87766: LIST
87767: LIST
87768: LIST
87769: ST_TO_ADDR
// if not base then
87770: LD_VAR 0 1
87774: NOT
87775: IFFALSE 87779
// exit ;
87777: GO 87828
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
87779: LD_ADDR_VAR 0 2
87783: PUSH
87784: LD_VAR 0 1
87788: PPUSH
87789: LD_INT 1
87791: PPUSH
87792: CALL_OW 275
87796: PUSH
87797: LD_VAR 0 1
87801: PPUSH
87802: LD_INT 2
87804: PPUSH
87805: CALL_OW 275
87809: PUSH
87810: LD_VAR 0 1
87814: PPUSH
87815: LD_INT 3
87817: PPUSH
87818: CALL_OW 275
87822: PUSH
87823: EMPTY
87824: LIST
87825: LIST
87826: LIST
87827: ST_TO_ADDR
// end ;
87828: LD_VAR 0 2
87832: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
87833: LD_INT 0
87835: PPUSH
87836: PPUSH
// result := array ;
87837: LD_ADDR_VAR 0 3
87841: PUSH
87842: LD_VAR 0 1
87846: ST_TO_ADDR
// if size >= result then
87847: LD_VAR 0 2
87851: PUSH
87852: LD_VAR 0 3
87856: GREATEREQUAL
87857: IFFALSE 87861
// exit ;
87859: GO 87911
// if size then
87861: LD_VAR 0 2
87865: IFFALSE 87911
// for i := array downto size do
87867: LD_ADDR_VAR 0 4
87871: PUSH
87872: DOUBLE
87873: LD_VAR 0 1
87877: INC
87878: ST_TO_ADDR
87879: LD_VAR 0 2
87883: PUSH
87884: FOR_DOWNTO
87885: IFFALSE 87909
// result := Delete ( result , result ) ;
87887: LD_ADDR_VAR 0 3
87891: PUSH
87892: LD_VAR 0 3
87896: PPUSH
87897: LD_VAR 0 3
87901: PPUSH
87902: CALL_OW 3
87906: ST_TO_ADDR
87907: GO 87884
87909: POP
87910: POP
// end ;
87911: LD_VAR 0 3
87915: RET
// export function ComExit ( unit ) ; var tmp ; begin
87916: LD_INT 0
87918: PPUSH
87919: PPUSH
// if not IsInUnit ( unit ) then
87920: LD_VAR 0 1
87924: PPUSH
87925: CALL_OW 310
87929: NOT
87930: IFFALSE 87934
// exit ;
87932: GO 87994
// tmp := IsInUnit ( unit ) ;
87934: LD_ADDR_VAR 0 3
87938: PUSH
87939: LD_VAR 0 1
87943: PPUSH
87944: CALL_OW 310
87948: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
87949: LD_VAR 0 3
87953: PPUSH
87954: CALL_OW 247
87958: PUSH
87959: LD_INT 2
87961: EQUAL
87962: IFFALSE 87975
// ComExitVehicle ( unit ) else
87964: LD_VAR 0 1
87968: PPUSH
87969: CALL_OW 121
87973: GO 87984
// ComExitBuilding ( unit ) ;
87975: LD_VAR 0 1
87979: PPUSH
87980: CALL_OW 122
// result := tmp ;
87984: LD_ADDR_VAR 0 2
87988: PUSH
87989: LD_VAR 0 3
87993: ST_TO_ADDR
// end ;
87994: LD_VAR 0 2
87998: RET
// export function ComExitAll ( units ) ; var i ; begin
87999: LD_INT 0
88001: PPUSH
88002: PPUSH
// if not units then
88003: LD_VAR 0 1
88007: NOT
88008: IFFALSE 88012
// exit ;
88010: GO 88038
// for i in units do
88012: LD_ADDR_VAR 0 3
88016: PUSH
88017: LD_VAR 0 1
88021: PUSH
88022: FOR_IN
88023: IFFALSE 88036
// ComExit ( i ) ;
88025: LD_VAR 0 3
88029: PPUSH
88030: CALL 87916 0 1
88034: GO 88022
88036: POP
88037: POP
// end ;
88038: LD_VAR 0 2
88042: RET
// export function ResetHc ; begin
88043: LD_INT 0
88045: PPUSH
// InitHc ;
88046: CALL_OW 19
// hc_importance := 0 ;
88050: LD_ADDR_OWVAR 32
88054: PUSH
88055: LD_INT 0
88057: ST_TO_ADDR
// end ;
88058: LD_VAR 0 1
88062: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
88063: LD_INT 0
88065: PPUSH
88066: PPUSH
88067: PPUSH
// _x := ( x1 + x2 ) div 2 ;
88068: LD_ADDR_VAR 0 6
88072: PUSH
88073: LD_VAR 0 1
88077: PUSH
88078: LD_VAR 0 3
88082: PLUS
88083: PUSH
88084: LD_INT 2
88086: DIV
88087: ST_TO_ADDR
// if _x < 0 then
88088: LD_VAR 0 6
88092: PUSH
88093: LD_INT 0
88095: LESS
88096: IFFALSE 88113
// _x := _x * - 1 ;
88098: LD_ADDR_VAR 0 6
88102: PUSH
88103: LD_VAR 0 6
88107: PUSH
88108: LD_INT 1
88110: NEG
88111: MUL
88112: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
88113: LD_ADDR_VAR 0 7
88117: PUSH
88118: LD_VAR 0 2
88122: PUSH
88123: LD_VAR 0 4
88127: PLUS
88128: PUSH
88129: LD_INT 2
88131: DIV
88132: ST_TO_ADDR
// if _y < 0 then
88133: LD_VAR 0 7
88137: PUSH
88138: LD_INT 0
88140: LESS
88141: IFFALSE 88158
// _y := _y * - 1 ;
88143: LD_ADDR_VAR 0 7
88147: PUSH
88148: LD_VAR 0 7
88152: PUSH
88153: LD_INT 1
88155: NEG
88156: MUL
88157: ST_TO_ADDR
// result := [ _x , _y ] ;
88158: LD_ADDR_VAR 0 5
88162: PUSH
88163: LD_VAR 0 6
88167: PUSH
88168: LD_VAR 0 7
88172: PUSH
88173: EMPTY
88174: LIST
88175: LIST
88176: ST_TO_ADDR
// end ;
88177: LD_VAR 0 5
88181: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
88182: LD_INT 0
88184: PPUSH
88185: PPUSH
88186: PPUSH
88187: PPUSH
// task := GetTaskList ( unit ) ;
88188: LD_ADDR_VAR 0 7
88192: PUSH
88193: LD_VAR 0 1
88197: PPUSH
88198: CALL_OW 437
88202: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
88203: LD_VAR 0 7
88207: NOT
88208: PUSH
88209: LD_VAR 0 1
88213: PPUSH
88214: LD_VAR 0 2
88218: PPUSH
88219: CALL_OW 308
88223: NOT
88224: AND
88225: IFFALSE 88229
// exit ;
88227: GO 88347
// if IsInArea ( unit , area ) then
88229: LD_VAR 0 1
88233: PPUSH
88234: LD_VAR 0 2
88238: PPUSH
88239: CALL_OW 308
88243: IFFALSE 88261
// begin ComMoveToArea ( unit , goAway ) ;
88245: LD_VAR 0 1
88249: PPUSH
88250: LD_VAR 0 3
88254: PPUSH
88255: CALL_OW 113
// exit ;
88259: GO 88347
// end ; if task [ 1 ] [ 1 ] <> M then
88261: LD_VAR 0 7
88265: PUSH
88266: LD_INT 1
88268: ARRAY
88269: PUSH
88270: LD_INT 1
88272: ARRAY
88273: PUSH
88274: LD_STRING M
88276: NONEQUAL
88277: IFFALSE 88281
// exit ;
88279: GO 88347
// x := task [ 1 ] [ 2 ] ;
88281: LD_ADDR_VAR 0 5
88285: PUSH
88286: LD_VAR 0 7
88290: PUSH
88291: LD_INT 1
88293: ARRAY
88294: PUSH
88295: LD_INT 2
88297: ARRAY
88298: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
88299: LD_ADDR_VAR 0 6
88303: PUSH
88304: LD_VAR 0 7
88308: PUSH
88309: LD_INT 1
88311: ARRAY
88312: PUSH
88313: LD_INT 3
88315: ARRAY
88316: ST_TO_ADDR
// if InArea ( x , y , area ) then
88317: LD_VAR 0 5
88321: PPUSH
88322: LD_VAR 0 6
88326: PPUSH
88327: LD_VAR 0 2
88331: PPUSH
88332: CALL_OW 309
88336: IFFALSE 88347
// ComStop ( unit ) ;
88338: LD_VAR 0 1
88342: PPUSH
88343: CALL_OW 141
// end ;
88347: LD_VAR 0 4
88351: RET
// export function Abs ( value ) ; begin
88352: LD_INT 0
88354: PPUSH
// result := value ;
88355: LD_ADDR_VAR 0 2
88359: PUSH
88360: LD_VAR 0 1
88364: ST_TO_ADDR
// if value < 0 then
88365: LD_VAR 0 1
88369: PUSH
88370: LD_INT 0
88372: LESS
88373: IFFALSE 88390
// result := value * - 1 ;
88375: LD_ADDR_VAR 0 2
88379: PUSH
88380: LD_VAR 0 1
88384: PUSH
88385: LD_INT 1
88387: NEG
88388: MUL
88389: ST_TO_ADDR
// end ;
88390: LD_VAR 0 2
88394: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
88395: LD_INT 0
88397: PPUSH
88398: PPUSH
88399: PPUSH
88400: PPUSH
88401: PPUSH
88402: PPUSH
88403: PPUSH
88404: PPUSH
// if not unit or not building then
88405: LD_VAR 0 1
88409: NOT
88410: PUSH
88411: LD_VAR 0 2
88415: NOT
88416: OR
88417: IFFALSE 88421
// exit ;
88419: GO 88647
// x := GetX ( building ) ;
88421: LD_ADDR_VAR 0 4
88425: PUSH
88426: LD_VAR 0 2
88430: PPUSH
88431: CALL_OW 250
88435: ST_TO_ADDR
// y := GetY ( building ) ;
88436: LD_ADDR_VAR 0 6
88440: PUSH
88441: LD_VAR 0 2
88445: PPUSH
88446: CALL_OW 251
88450: ST_TO_ADDR
// d := GetDir ( building ) ;
88451: LD_ADDR_VAR 0 8
88455: PUSH
88456: LD_VAR 0 2
88460: PPUSH
88461: CALL_OW 254
88465: ST_TO_ADDR
// r := 4 ;
88466: LD_ADDR_VAR 0 9
88470: PUSH
88471: LD_INT 4
88473: ST_TO_ADDR
// for i := 1 to 5 do
88474: LD_ADDR_VAR 0 10
88478: PUSH
88479: DOUBLE
88480: LD_INT 1
88482: DEC
88483: ST_TO_ADDR
88484: LD_INT 5
88486: PUSH
88487: FOR_TO
88488: IFFALSE 88645
// begin _x := ShiftX ( x , d , r + i ) ;
88490: LD_ADDR_VAR 0 5
88494: PUSH
88495: LD_VAR 0 4
88499: PPUSH
88500: LD_VAR 0 8
88504: PPUSH
88505: LD_VAR 0 9
88509: PUSH
88510: LD_VAR 0 10
88514: PLUS
88515: PPUSH
88516: CALL_OW 272
88520: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
88521: LD_ADDR_VAR 0 7
88525: PUSH
88526: LD_VAR 0 6
88530: PPUSH
88531: LD_VAR 0 8
88535: PPUSH
88536: LD_VAR 0 9
88540: PUSH
88541: LD_VAR 0 10
88545: PLUS
88546: PPUSH
88547: CALL_OW 273
88551: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
88552: LD_VAR 0 5
88556: PPUSH
88557: LD_VAR 0 7
88561: PPUSH
88562: CALL_OW 488
88566: PUSH
88567: LD_VAR 0 5
88571: PPUSH
88572: LD_VAR 0 7
88576: PPUSH
88577: CALL_OW 428
88581: PPUSH
88582: CALL_OW 247
88586: PUSH
88587: LD_INT 3
88589: PUSH
88590: LD_INT 2
88592: PUSH
88593: EMPTY
88594: LIST
88595: LIST
88596: IN
88597: NOT
88598: AND
88599: IFFALSE 88643
// begin ComMoveXY ( unit , _x , _y ) ;
88601: LD_VAR 0 1
88605: PPUSH
88606: LD_VAR 0 5
88610: PPUSH
88611: LD_VAR 0 7
88615: PPUSH
88616: CALL_OW 111
// result := [ _x , _y ] ;
88620: LD_ADDR_VAR 0 3
88624: PUSH
88625: LD_VAR 0 5
88629: PUSH
88630: LD_VAR 0 7
88634: PUSH
88635: EMPTY
88636: LIST
88637: LIST
88638: ST_TO_ADDR
// exit ;
88639: POP
88640: POP
88641: GO 88647
// end ; end ;
88643: GO 88487
88645: POP
88646: POP
// end ;
88647: LD_VAR 0 3
88651: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
88652: LD_INT 0
88654: PPUSH
88655: PPUSH
88656: PPUSH
// result := 0 ;
88657: LD_ADDR_VAR 0 3
88661: PUSH
88662: LD_INT 0
88664: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
88665: LD_VAR 0 1
88669: PUSH
88670: LD_INT 0
88672: LESS
88673: PUSH
88674: LD_VAR 0 1
88678: PUSH
88679: LD_INT 8
88681: GREATER
88682: OR
88683: PUSH
88684: LD_VAR 0 2
88688: PUSH
88689: LD_INT 0
88691: LESS
88692: OR
88693: PUSH
88694: LD_VAR 0 2
88698: PUSH
88699: LD_INT 8
88701: GREATER
88702: OR
88703: IFFALSE 88707
// exit ;
88705: GO 88782
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
88707: LD_ADDR_VAR 0 4
88711: PUSH
88712: LD_INT 22
88714: PUSH
88715: LD_VAR 0 2
88719: PUSH
88720: EMPTY
88721: LIST
88722: LIST
88723: PPUSH
88724: CALL_OW 69
88728: PUSH
88729: FOR_IN
88730: IFFALSE 88780
// begin un := UnitShoot ( i ) ;
88732: LD_ADDR_VAR 0 5
88736: PUSH
88737: LD_VAR 0 4
88741: PPUSH
88742: CALL_OW 504
88746: ST_TO_ADDR
// if GetSide ( un ) = side1 then
88747: LD_VAR 0 5
88751: PPUSH
88752: CALL_OW 255
88756: PUSH
88757: LD_VAR 0 1
88761: EQUAL
88762: IFFALSE 88778
// begin result := un ;
88764: LD_ADDR_VAR 0 3
88768: PUSH
88769: LD_VAR 0 5
88773: ST_TO_ADDR
// exit ;
88774: POP
88775: POP
88776: GO 88782
// end ; end ;
88778: GO 88729
88780: POP
88781: POP
// end ;
88782: LD_VAR 0 3
88786: RET
// export function GetCargoBay ( units ) ; begin
88787: LD_INT 0
88789: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
88790: LD_ADDR_VAR 0 2
88794: PUSH
88795: LD_VAR 0 1
88799: PPUSH
88800: LD_INT 2
88802: PUSH
88803: LD_INT 34
88805: PUSH
88806: LD_INT 12
88808: PUSH
88809: EMPTY
88810: LIST
88811: LIST
88812: PUSH
88813: LD_INT 34
88815: PUSH
88816: LD_INT 51
88818: PUSH
88819: EMPTY
88820: LIST
88821: LIST
88822: PUSH
88823: LD_INT 34
88825: PUSH
88826: LD_INT 32
88828: PUSH
88829: EMPTY
88830: LIST
88831: LIST
88832: PUSH
88833: LD_INT 34
88835: PUSH
88836: LD_EXP 71
88840: PUSH
88841: EMPTY
88842: LIST
88843: LIST
88844: PUSH
88845: EMPTY
88846: LIST
88847: LIST
88848: LIST
88849: LIST
88850: LIST
88851: PPUSH
88852: CALL_OW 72
88856: ST_TO_ADDR
// end ;
88857: LD_VAR 0 2
88861: RET
// export function Negate ( value ) ; begin
88862: LD_INT 0
88864: PPUSH
// result := not value ;
88865: LD_ADDR_VAR 0 2
88869: PUSH
88870: LD_VAR 0 1
88874: NOT
88875: ST_TO_ADDR
// end ;
88876: LD_VAR 0 2
88880: RET
// export function Inc ( value ) ; begin
88881: LD_INT 0
88883: PPUSH
// result := value + 1 ;
88884: LD_ADDR_VAR 0 2
88888: PUSH
88889: LD_VAR 0 1
88893: PUSH
88894: LD_INT 1
88896: PLUS
88897: ST_TO_ADDR
// end ;
88898: LD_VAR 0 2
88902: RET
// export function Dec ( value ) ; begin
88903: LD_INT 0
88905: PPUSH
// result := value - 1 ;
88906: LD_ADDR_VAR 0 2
88910: PUSH
88911: LD_VAR 0 1
88915: PUSH
88916: LD_INT 1
88918: MINUS
88919: ST_TO_ADDR
// end ;
88920: LD_VAR 0 2
88924: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
88925: LD_INT 0
88927: PPUSH
88928: PPUSH
88929: PPUSH
88930: PPUSH
88931: PPUSH
88932: PPUSH
88933: PPUSH
88934: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
88935: LD_VAR 0 1
88939: PPUSH
88940: LD_VAR 0 2
88944: PPUSH
88945: CALL_OW 488
88949: NOT
88950: PUSH
88951: LD_VAR 0 3
88955: PPUSH
88956: LD_VAR 0 4
88960: PPUSH
88961: CALL_OW 488
88965: NOT
88966: OR
88967: IFFALSE 88980
// begin result := - 1 ;
88969: LD_ADDR_VAR 0 5
88973: PUSH
88974: LD_INT 1
88976: NEG
88977: ST_TO_ADDR
// exit ;
88978: GO 89215
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
88980: LD_ADDR_VAR 0 12
88984: PUSH
88985: LD_VAR 0 1
88989: PPUSH
88990: LD_VAR 0 2
88994: PPUSH
88995: LD_VAR 0 3
88999: PPUSH
89000: LD_VAR 0 4
89004: PPUSH
89005: CALL 88063 0 4
89009: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
89010: LD_ADDR_VAR 0 11
89014: PUSH
89015: LD_VAR 0 1
89019: PPUSH
89020: LD_VAR 0 2
89024: PPUSH
89025: LD_VAR 0 12
89029: PUSH
89030: LD_INT 1
89032: ARRAY
89033: PPUSH
89034: LD_VAR 0 12
89038: PUSH
89039: LD_INT 2
89041: ARRAY
89042: PPUSH
89043: CALL_OW 298
89047: ST_TO_ADDR
// distance := 9999 ;
89048: LD_ADDR_VAR 0 10
89052: PUSH
89053: LD_INT 9999
89055: ST_TO_ADDR
// for i := 0 to 5 do
89056: LD_ADDR_VAR 0 6
89060: PUSH
89061: DOUBLE
89062: LD_INT 0
89064: DEC
89065: ST_TO_ADDR
89066: LD_INT 5
89068: PUSH
89069: FOR_TO
89070: IFFALSE 89213
// begin _x := ShiftX ( x1 , i , centerDist ) ;
89072: LD_ADDR_VAR 0 7
89076: PUSH
89077: LD_VAR 0 1
89081: PPUSH
89082: LD_VAR 0 6
89086: PPUSH
89087: LD_VAR 0 11
89091: PPUSH
89092: CALL_OW 272
89096: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
89097: LD_ADDR_VAR 0 8
89101: PUSH
89102: LD_VAR 0 2
89106: PPUSH
89107: LD_VAR 0 6
89111: PPUSH
89112: LD_VAR 0 11
89116: PPUSH
89117: CALL_OW 273
89121: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
89122: LD_VAR 0 7
89126: PPUSH
89127: LD_VAR 0 8
89131: PPUSH
89132: CALL_OW 488
89136: NOT
89137: IFFALSE 89141
// continue ;
89139: GO 89069
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
89141: LD_ADDR_VAR 0 9
89145: PUSH
89146: LD_VAR 0 12
89150: PUSH
89151: LD_INT 1
89153: ARRAY
89154: PPUSH
89155: LD_VAR 0 12
89159: PUSH
89160: LD_INT 2
89162: ARRAY
89163: PPUSH
89164: LD_VAR 0 7
89168: PPUSH
89169: LD_VAR 0 8
89173: PPUSH
89174: CALL_OW 298
89178: ST_TO_ADDR
// if tmp < distance then
89179: LD_VAR 0 9
89183: PUSH
89184: LD_VAR 0 10
89188: LESS
89189: IFFALSE 89211
// begin result := i ;
89191: LD_ADDR_VAR 0 5
89195: PUSH
89196: LD_VAR 0 6
89200: ST_TO_ADDR
// distance := tmp ;
89201: LD_ADDR_VAR 0 10
89205: PUSH
89206: LD_VAR 0 9
89210: ST_TO_ADDR
// end ; end ;
89211: GO 89069
89213: POP
89214: POP
// end ;
89215: LD_VAR 0 5
89219: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89220: LD_INT 0
89222: PPUSH
89223: PPUSH
// if not driver or not IsInUnit ( driver ) then
89224: LD_VAR 0 1
89228: NOT
89229: PUSH
89230: LD_VAR 0 1
89234: PPUSH
89235: CALL_OW 310
89239: NOT
89240: OR
89241: IFFALSE 89245
// exit ;
89243: GO 89335
// vehicle := IsInUnit ( driver ) ;
89245: LD_ADDR_VAR 0 3
89249: PUSH
89250: LD_VAR 0 1
89254: PPUSH
89255: CALL_OW 310
89259: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89260: LD_VAR 0 1
89264: PPUSH
89265: LD_STRING \
89267: PUSH
89268: LD_INT 0
89270: PUSH
89271: LD_INT 0
89273: PUSH
89274: LD_INT 0
89276: PUSH
89277: LD_INT 0
89279: PUSH
89280: LD_INT 0
89282: PUSH
89283: LD_INT 0
89285: PUSH
89286: EMPTY
89287: LIST
89288: LIST
89289: LIST
89290: LIST
89291: LIST
89292: LIST
89293: LIST
89294: PUSH
89295: LD_STRING E
89297: PUSH
89298: LD_INT 0
89300: PUSH
89301: LD_INT 0
89303: PUSH
89304: LD_VAR 0 3
89308: PUSH
89309: LD_INT 0
89311: PUSH
89312: LD_INT 0
89314: PUSH
89315: LD_INT 0
89317: PUSH
89318: EMPTY
89319: LIST
89320: LIST
89321: LIST
89322: LIST
89323: LIST
89324: LIST
89325: LIST
89326: PUSH
89327: EMPTY
89328: LIST
89329: LIST
89330: PPUSH
89331: CALL_OW 446
// end ;
89335: LD_VAR 0 2
89339: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89340: LD_INT 0
89342: PPUSH
89343: PPUSH
// if not driver or not IsInUnit ( driver ) then
89344: LD_VAR 0 1
89348: NOT
89349: PUSH
89350: LD_VAR 0 1
89354: PPUSH
89355: CALL_OW 310
89359: NOT
89360: OR
89361: IFFALSE 89365
// exit ;
89363: GO 89455
// vehicle := IsInUnit ( driver ) ;
89365: LD_ADDR_VAR 0 3
89369: PUSH
89370: LD_VAR 0 1
89374: PPUSH
89375: CALL_OW 310
89379: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89380: LD_VAR 0 1
89384: PPUSH
89385: LD_STRING \
89387: PUSH
89388: LD_INT 0
89390: PUSH
89391: LD_INT 0
89393: PUSH
89394: LD_INT 0
89396: PUSH
89397: LD_INT 0
89399: PUSH
89400: LD_INT 0
89402: PUSH
89403: LD_INT 0
89405: PUSH
89406: EMPTY
89407: LIST
89408: LIST
89409: LIST
89410: LIST
89411: LIST
89412: LIST
89413: LIST
89414: PUSH
89415: LD_STRING E
89417: PUSH
89418: LD_INT 0
89420: PUSH
89421: LD_INT 0
89423: PUSH
89424: LD_VAR 0 3
89428: PUSH
89429: LD_INT 0
89431: PUSH
89432: LD_INT 0
89434: PUSH
89435: LD_INT 0
89437: PUSH
89438: EMPTY
89439: LIST
89440: LIST
89441: LIST
89442: LIST
89443: LIST
89444: LIST
89445: LIST
89446: PUSH
89447: EMPTY
89448: LIST
89449: LIST
89450: PPUSH
89451: CALL_OW 447
// end ;
89455: LD_VAR 0 2
89459: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
89460: LD_INT 0
89462: PPUSH
89463: PPUSH
89464: PPUSH
// tmp := [ ] ;
89465: LD_ADDR_VAR 0 5
89469: PUSH
89470: EMPTY
89471: ST_TO_ADDR
// for i in units do
89472: LD_ADDR_VAR 0 4
89476: PUSH
89477: LD_VAR 0 1
89481: PUSH
89482: FOR_IN
89483: IFFALSE 89521
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
89485: LD_ADDR_VAR 0 5
89489: PUSH
89490: LD_VAR 0 5
89494: PPUSH
89495: LD_VAR 0 5
89499: PUSH
89500: LD_INT 1
89502: PLUS
89503: PPUSH
89504: LD_VAR 0 4
89508: PPUSH
89509: CALL_OW 256
89513: PPUSH
89514: CALL_OW 2
89518: ST_TO_ADDR
89519: GO 89482
89521: POP
89522: POP
// if not tmp then
89523: LD_VAR 0 5
89527: NOT
89528: IFFALSE 89532
// exit ;
89530: GO 89580
// if asc then
89532: LD_VAR 0 2
89536: IFFALSE 89560
// result := SortListByListAsc ( units , tmp ) else
89538: LD_ADDR_VAR 0 3
89542: PUSH
89543: LD_VAR 0 1
89547: PPUSH
89548: LD_VAR 0 5
89552: PPUSH
89553: CALL_OW 76
89557: ST_TO_ADDR
89558: GO 89580
// result := SortListByListDesc ( units , tmp ) ;
89560: LD_ADDR_VAR 0 3
89564: PUSH
89565: LD_VAR 0 1
89569: PPUSH
89570: LD_VAR 0 5
89574: PPUSH
89575: CALL_OW 77
89579: ST_TO_ADDR
// end ;
89580: LD_VAR 0 3
89584: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
89585: LD_INT 0
89587: PPUSH
89588: PPUSH
// task := GetTaskList ( mech ) ;
89589: LD_ADDR_VAR 0 4
89593: PUSH
89594: LD_VAR 0 1
89598: PPUSH
89599: CALL_OW 437
89603: ST_TO_ADDR
// if not task then
89604: LD_VAR 0 4
89608: NOT
89609: IFFALSE 89613
// exit ;
89611: GO 89655
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
89613: LD_ADDR_VAR 0 3
89617: PUSH
89618: LD_VAR 0 4
89622: PUSH
89623: LD_INT 1
89625: ARRAY
89626: PUSH
89627: LD_INT 1
89629: ARRAY
89630: PUSH
89631: LD_STRING r
89633: EQUAL
89634: PUSH
89635: LD_VAR 0 4
89639: PUSH
89640: LD_INT 1
89642: ARRAY
89643: PUSH
89644: LD_INT 4
89646: ARRAY
89647: PUSH
89648: LD_VAR 0 2
89652: EQUAL
89653: AND
89654: ST_TO_ADDR
// end ;
89655: LD_VAR 0 3
89659: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
89660: LD_INT 0
89662: PPUSH
// SetDir ( unit , d ) ;
89663: LD_VAR 0 1
89667: PPUSH
89668: LD_VAR 0 4
89672: PPUSH
89673: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
89677: LD_VAR 0 1
89681: PPUSH
89682: LD_VAR 0 2
89686: PPUSH
89687: LD_VAR 0 3
89691: PPUSH
89692: LD_VAR 0 5
89696: PPUSH
89697: CALL_OW 48
// end ;
89701: LD_VAR 0 6
89705: RET
// export function ToNaturalNumber ( number ) ; begin
89706: LD_INT 0
89708: PPUSH
// result := number div 1 ;
89709: LD_ADDR_VAR 0 2
89713: PUSH
89714: LD_VAR 0 1
89718: PUSH
89719: LD_INT 1
89721: DIV
89722: ST_TO_ADDR
// if number < 0 then
89723: LD_VAR 0 1
89727: PUSH
89728: LD_INT 0
89730: LESS
89731: IFFALSE 89741
// result := 0 ;
89733: LD_ADDR_VAR 0 2
89737: PUSH
89738: LD_INT 0
89740: ST_TO_ADDR
// end ;
89741: LD_VAR 0 2
89745: RET
// export function SortByClass ( units , class ) ; var un ; begin
89746: LD_INT 0
89748: PPUSH
89749: PPUSH
// if not units or not class then
89750: LD_VAR 0 1
89754: NOT
89755: PUSH
89756: LD_VAR 0 2
89760: NOT
89761: OR
89762: IFFALSE 89766
// exit ;
89764: GO 89861
// result := [ ] ;
89766: LD_ADDR_VAR 0 3
89770: PUSH
89771: EMPTY
89772: ST_TO_ADDR
// for un in units do
89773: LD_ADDR_VAR 0 4
89777: PUSH
89778: LD_VAR 0 1
89782: PUSH
89783: FOR_IN
89784: IFFALSE 89859
// if GetClass ( un ) = class then
89786: LD_VAR 0 4
89790: PPUSH
89791: CALL_OW 257
89795: PUSH
89796: LD_VAR 0 2
89800: EQUAL
89801: IFFALSE 89828
// result := Insert ( result , 1 , un ) else
89803: LD_ADDR_VAR 0 3
89807: PUSH
89808: LD_VAR 0 3
89812: PPUSH
89813: LD_INT 1
89815: PPUSH
89816: LD_VAR 0 4
89820: PPUSH
89821: CALL_OW 2
89825: ST_TO_ADDR
89826: GO 89857
// result := Replace ( result , result + 1 , un ) ;
89828: LD_ADDR_VAR 0 3
89832: PUSH
89833: LD_VAR 0 3
89837: PPUSH
89838: LD_VAR 0 3
89842: PUSH
89843: LD_INT 1
89845: PLUS
89846: PPUSH
89847: LD_VAR 0 4
89851: PPUSH
89852: CALL_OW 1
89856: ST_TO_ADDR
89857: GO 89783
89859: POP
89860: POP
// end ;
89861: LD_VAR 0 3
89865: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
89866: LD_INT 0
89868: PPUSH
89869: PPUSH
89870: PPUSH
89871: PPUSH
89872: PPUSH
89873: PPUSH
89874: PPUSH
// result := [ ] ;
89875: LD_ADDR_VAR 0 4
89879: PUSH
89880: EMPTY
89881: ST_TO_ADDR
// if x - r < 0 then
89882: LD_VAR 0 1
89886: PUSH
89887: LD_VAR 0 3
89891: MINUS
89892: PUSH
89893: LD_INT 0
89895: LESS
89896: IFFALSE 89908
// min_x := 0 else
89898: LD_ADDR_VAR 0 8
89902: PUSH
89903: LD_INT 0
89905: ST_TO_ADDR
89906: GO 89924
// min_x := x - r ;
89908: LD_ADDR_VAR 0 8
89912: PUSH
89913: LD_VAR 0 1
89917: PUSH
89918: LD_VAR 0 3
89922: MINUS
89923: ST_TO_ADDR
// if y - r < 0 then
89924: LD_VAR 0 2
89928: PUSH
89929: LD_VAR 0 3
89933: MINUS
89934: PUSH
89935: LD_INT 0
89937: LESS
89938: IFFALSE 89950
// min_y := 0 else
89940: LD_ADDR_VAR 0 7
89944: PUSH
89945: LD_INT 0
89947: ST_TO_ADDR
89948: GO 89966
// min_y := y - r ;
89950: LD_ADDR_VAR 0 7
89954: PUSH
89955: LD_VAR 0 2
89959: PUSH
89960: LD_VAR 0 3
89964: MINUS
89965: ST_TO_ADDR
// max_x := x + r ;
89966: LD_ADDR_VAR 0 9
89970: PUSH
89971: LD_VAR 0 1
89975: PUSH
89976: LD_VAR 0 3
89980: PLUS
89981: ST_TO_ADDR
// max_y := y + r ;
89982: LD_ADDR_VAR 0 10
89986: PUSH
89987: LD_VAR 0 2
89991: PUSH
89992: LD_VAR 0 3
89996: PLUS
89997: ST_TO_ADDR
// for _x = min_x to max_x do
89998: LD_ADDR_VAR 0 5
90002: PUSH
90003: DOUBLE
90004: LD_VAR 0 8
90008: DEC
90009: ST_TO_ADDR
90010: LD_VAR 0 9
90014: PUSH
90015: FOR_TO
90016: IFFALSE 90117
// for _y = min_y to max_y do
90018: LD_ADDR_VAR 0 6
90022: PUSH
90023: DOUBLE
90024: LD_VAR 0 7
90028: DEC
90029: ST_TO_ADDR
90030: LD_VAR 0 10
90034: PUSH
90035: FOR_TO
90036: IFFALSE 90113
// begin if not ValidHex ( _x , _y ) then
90038: LD_VAR 0 5
90042: PPUSH
90043: LD_VAR 0 6
90047: PPUSH
90048: CALL_OW 488
90052: NOT
90053: IFFALSE 90057
// continue ;
90055: GO 90035
// if GetResourceTypeXY ( _x , _y ) then
90057: LD_VAR 0 5
90061: PPUSH
90062: LD_VAR 0 6
90066: PPUSH
90067: CALL_OW 283
90071: IFFALSE 90111
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
90073: LD_ADDR_VAR 0 4
90077: PUSH
90078: LD_VAR 0 4
90082: PPUSH
90083: LD_VAR 0 4
90087: PUSH
90088: LD_INT 1
90090: PLUS
90091: PPUSH
90092: LD_VAR 0 5
90096: PUSH
90097: LD_VAR 0 6
90101: PUSH
90102: EMPTY
90103: LIST
90104: LIST
90105: PPUSH
90106: CALL_OW 1
90110: ST_TO_ADDR
// end ;
90111: GO 90035
90113: POP
90114: POP
90115: GO 90015
90117: POP
90118: POP
// end ;
90119: LD_VAR 0 4
90123: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
90124: LD_INT 0
90126: PPUSH
90127: PPUSH
90128: PPUSH
90129: PPUSH
90130: PPUSH
90131: PPUSH
90132: PPUSH
90133: PPUSH
// if not units then
90134: LD_VAR 0 1
90138: NOT
90139: IFFALSE 90143
// exit ;
90141: GO 90669
// result := UnitFilter ( units , [ f_ok ] ) ;
90143: LD_ADDR_VAR 0 3
90147: PUSH
90148: LD_VAR 0 1
90152: PPUSH
90153: LD_INT 50
90155: PUSH
90156: EMPTY
90157: LIST
90158: PPUSH
90159: CALL_OW 72
90163: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
90164: LD_ADDR_VAR 0 8
90168: PUSH
90169: LD_VAR 0 1
90173: PUSH
90174: LD_INT 1
90176: ARRAY
90177: PPUSH
90178: CALL_OW 255
90182: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
90183: LD_ADDR_VAR 0 10
90187: PUSH
90188: LD_INT 29
90190: PUSH
90191: LD_EXP 74
90195: PUSH
90196: LD_INT 49
90198: PUSH
90199: EMPTY
90200: LIST
90201: LIST
90202: LIST
90203: ST_TO_ADDR
// if not result then
90204: LD_VAR 0 3
90208: NOT
90209: IFFALSE 90213
// exit ;
90211: GO 90669
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
90213: LD_ADDR_VAR 0 5
90217: PUSH
90218: LD_INT 81
90220: PUSH
90221: LD_VAR 0 8
90225: PUSH
90226: EMPTY
90227: LIST
90228: LIST
90229: PPUSH
90230: CALL_OW 69
90234: ST_TO_ADDR
// for i in result do
90235: LD_ADDR_VAR 0 4
90239: PUSH
90240: LD_VAR 0 3
90244: PUSH
90245: FOR_IN
90246: IFFALSE 90667
// begin tag := GetTag ( i ) + 1 ;
90248: LD_ADDR_VAR 0 9
90252: PUSH
90253: LD_VAR 0 4
90257: PPUSH
90258: CALL_OW 110
90262: PUSH
90263: LD_INT 1
90265: PLUS
90266: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
90267: LD_ADDR_VAR 0 7
90271: PUSH
90272: LD_VAR 0 4
90276: PPUSH
90277: CALL_OW 250
90281: PPUSH
90282: LD_VAR 0 4
90286: PPUSH
90287: CALL_OW 251
90291: PPUSH
90292: LD_INT 6
90294: PPUSH
90295: CALL 89866 0 3
90299: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
90300: LD_VAR 0 4
90304: PPUSH
90305: CALL_OW 247
90309: PUSH
90310: LD_INT 2
90312: EQUAL
90313: PUSH
90314: LD_VAR 0 7
90318: AND
90319: PUSH
90320: LD_VAR 0 4
90324: PPUSH
90325: CALL_OW 264
90329: PUSH
90330: LD_VAR 0 10
90334: IN
90335: NOT
90336: AND
90337: IFFALSE 90376
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
90339: LD_VAR 0 4
90343: PPUSH
90344: LD_VAR 0 7
90348: PUSH
90349: LD_INT 1
90351: ARRAY
90352: PUSH
90353: LD_INT 1
90355: ARRAY
90356: PPUSH
90357: LD_VAR 0 7
90361: PUSH
90362: LD_INT 1
90364: ARRAY
90365: PUSH
90366: LD_INT 2
90368: ARRAY
90369: PPUSH
90370: CALL_OW 116
90374: GO 90665
// if path > tag then
90376: LD_VAR 0 2
90380: PUSH
90381: LD_VAR 0 9
90385: GREATER
90386: IFFALSE 90594
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
90388: LD_ADDR_VAR 0 6
90392: PUSH
90393: LD_VAR 0 5
90397: PPUSH
90398: LD_INT 91
90400: PUSH
90401: LD_VAR 0 4
90405: PUSH
90406: LD_INT 8
90408: PUSH
90409: EMPTY
90410: LIST
90411: LIST
90412: LIST
90413: PPUSH
90414: CALL_OW 72
90418: ST_TO_ADDR
// if nearEnemy then
90419: LD_VAR 0 6
90423: IFFALSE 90492
// begin if GetWeapon ( i ) = ru_time_lapser then
90425: LD_VAR 0 4
90429: PPUSH
90430: CALL_OW 264
90434: PUSH
90435: LD_INT 49
90437: EQUAL
90438: IFFALSE 90466
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
90440: LD_VAR 0 4
90444: PPUSH
90445: LD_VAR 0 6
90449: PPUSH
90450: LD_VAR 0 4
90454: PPUSH
90455: CALL_OW 74
90459: PPUSH
90460: CALL_OW 112
90464: GO 90490
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
90466: LD_VAR 0 4
90470: PPUSH
90471: LD_VAR 0 6
90475: PPUSH
90476: LD_VAR 0 4
90480: PPUSH
90481: CALL_OW 74
90485: PPUSH
90486: CALL_OW 115
// end else
90490: GO 90592
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
90492: LD_VAR 0 4
90496: PPUSH
90497: LD_VAR 0 2
90501: PUSH
90502: LD_VAR 0 9
90506: ARRAY
90507: PUSH
90508: LD_INT 1
90510: ARRAY
90511: PPUSH
90512: LD_VAR 0 2
90516: PUSH
90517: LD_VAR 0 9
90521: ARRAY
90522: PUSH
90523: LD_INT 2
90525: ARRAY
90526: PPUSH
90527: CALL_OW 297
90531: PUSH
90532: LD_INT 6
90534: GREATER
90535: IFFALSE 90578
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
90537: LD_VAR 0 4
90541: PPUSH
90542: LD_VAR 0 2
90546: PUSH
90547: LD_VAR 0 9
90551: ARRAY
90552: PUSH
90553: LD_INT 1
90555: ARRAY
90556: PPUSH
90557: LD_VAR 0 2
90561: PUSH
90562: LD_VAR 0 9
90566: ARRAY
90567: PUSH
90568: LD_INT 2
90570: ARRAY
90571: PPUSH
90572: CALL_OW 114
90576: GO 90592
// SetTag ( i , tag ) ;
90578: LD_VAR 0 4
90582: PPUSH
90583: LD_VAR 0 9
90587: PPUSH
90588: CALL_OW 109
// end else
90592: GO 90665
// if enemy then
90594: LD_VAR 0 5
90598: IFFALSE 90665
// begin if GetWeapon ( i ) = ru_time_lapser then
90600: LD_VAR 0 4
90604: PPUSH
90605: CALL_OW 264
90609: PUSH
90610: LD_INT 49
90612: EQUAL
90613: IFFALSE 90641
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
90615: LD_VAR 0 4
90619: PPUSH
90620: LD_VAR 0 5
90624: PPUSH
90625: LD_VAR 0 4
90629: PPUSH
90630: CALL_OW 74
90634: PPUSH
90635: CALL_OW 112
90639: GO 90665
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
90641: LD_VAR 0 4
90645: PPUSH
90646: LD_VAR 0 5
90650: PPUSH
90651: LD_VAR 0 4
90655: PPUSH
90656: CALL_OW 74
90660: PPUSH
90661: CALL_OW 115
// end ; end ;
90665: GO 90245
90667: POP
90668: POP
// end ;
90669: LD_VAR 0 3
90673: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
90674: LD_INT 0
90676: PPUSH
90677: PPUSH
90678: PPUSH
// if not unit or IsInUnit ( unit ) then
90679: LD_VAR 0 1
90683: NOT
90684: PUSH
90685: LD_VAR 0 1
90689: PPUSH
90690: CALL_OW 310
90694: OR
90695: IFFALSE 90699
// exit ;
90697: GO 90790
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
90699: LD_ADDR_VAR 0 4
90703: PUSH
90704: LD_VAR 0 1
90708: PPUSH
90709: CALL_OW 250
90713: PPUSH
90714: LD_VAR 0 2
90718: PPUSH
90719: LD_INT 1
90721: PPUSH
90722: CALL_OW 272
90726: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
90727: LD_ADDR_VAR 0 5
90731: PUSH
90732: LD_VAR 0 1
90736: PPUSH
90737: CALL_OW 251
90741: PPUSH
90742: LD_VAR 0 2
90746: PPUSH
90747: LD_INT 1
90749: PPUSH
90750: CALL_OW 273
90754: ST_TO_ADDR
// if ValidHex ( x , y ) then
90755: LD_VAR 0 4
90759: PPUSH
90760: LD_VAR 0 5
90764: PPUSH
90765: CALL_OW 488
90769: IFFALSE 90790
// ComTurnXY ( unit , x , y ) ;
90771: LD_VAR 0 1
90775: PPUSH
90776: LD_VAR 0 4
90780: PPUSH
90781: LD_VAR 0 5
90785: PPUSH
90786: CALL_OW 118
// end ;
90790: LD_VAR 0 3
90794: RET
// export function SeeUnits ( side , units ) ; var i ; begin
90795: LD_INT 0
90797: PPUSH
90798: PPUSH
// result := false ;
90799: LD_ADDR_VAR 0 3
90803: PUSH
90804: LD_INT 0
90806: ST_TO_ADDR
// if not units then
90807: LD_VAR 0 2
90811: NOT
90812: IFFALSE 90816
// exit ;
90814: GO 90861
// for i in units do
90816: LD_ADDR_VAR 0 4
90820: PUSH
90821: LD_VAR 0 2
90825: PUSH
90826: FOR_IN
90827: IFFALSE 90859
// if See ( side , i ) then
90829: LD_VAR 0 1
90833: PPUSH
90834: LD_VAR 0 4
90838: PPUSH
90839: CALL_OW 292
90843: IFFALSE 90857
// begin result := true ;
90845: LD_ADDR_VAR 0 3
90849: PUSH
90850: LD_INT 1
90852: ST_TO_ADDR
// exit ;
90853: POP
90854: POP
90855: GO 90861
// end ;
90857: GO 90826
90859: POP
90860: POP
// end ;
90861: LD_VAR 0 3
90865: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
90866: LD_INT 0
90868: PPUSH
90869: PPUSH
90870: PPUSH
90871: PPUSH
// if not unit or not points then
90872: LD_VAR 0 1
90876: NOT
90877: PUSH
90878: LD_VAR 0 2
90882: NOT
90883: OR
90884: IFFALSE 90888
// exit ;
90886: GO 90978
// dist := 99999 ;
90888: LD_ADDR_VAR 0 5
90892: PUSH
90893: LD_INT 99999
90895: ST_TO_ADDR
// for i in points do
90896: LD_ADDR_VAR 0 4
90900: PUSH
90901: LD_VAR 0 2
90905: PUSH
90906: FOR_IN
90907: IFFALSE 90976
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
90909: LD_ADDR_VAR 0 6
90913: PUSH
90914: LD_VAR 0 1
90918: PPUSH
90919: LD_VAR 0 4
90923: PUSH
90924: LD_INT 1
90926: ARRAY
90927: PPUSH
90928: LD_VAR 0 4
90932: PUSH
90933: LD_INT 2
90935: ARRAY
90936: PPUSH
90937: CALL_OW 297
90941: ST_TO_ADDR
// if tmpDist < dist then
90942: LD_VAR 0 6
90946: PUSH
90947: LD_VAR 0 5
90951: LESS
90952: IFFALSE 90974
// begin result := i ;
90954: LD_ADDR_VAR 0 3
90958: PUSH
90959: LD_VAR 0 4
90963: ST_TO_ADDR
// dist := tmpDist ;
90964: LD_ADDR_VAR 0 5
90968: PUSH
90969: LD_VAR 0 6
90973: ST_TO_ADDR
// end ; end ;
90974: GO 90906
90976: POP
90977: POP
// end ;
90978: LD_VAR 0 3
90982: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
90983: LD_INT 0
90985: PPUSH
// uc_side := side ;
90986: LD_ADDR_OWVAR 20
90990: PUSH
90991: LD_VAR 0 1
90995: ST_TO_ADDR
// uc_nation := 3 ;
90996: LD_ADDR_OWVAR 21
91000: PUSH
91001: LD_INT 3
91003: ST_TO_ADDR
// vc_chassis := 25 ;
91004: LD_ADDR_OWVAR 37
91008: PUSH
91009: LD_INT 25
91011: ST_TO_ADDR
// vc_engine := engine_siberite ;
91012: LD_ADDR_OWVAR 39
91016: PUSH
91017: LD_INT 3
91019: ST_TO_ADDR
// vc_control := control_computer ;
91020: LD_ADDR_OWVAR 38
91024: PUSH
91025: LD_INT 3
91027: ST_TO_ADDR
// vc_weapon := 59 ;
91028: LD_ADDR_OWVAR 40
91032: PUSH
91033: LD_INT 59
91035: ST_TO_ADDR
// result := CreateVehicle ;
91036: LD_ADDR_VAR 0 5
91040: PUSH
91041: CALL_OW 45
91045: ST_TO_ADDR
// SetDir ( result , d ) ;
91046: LD_VAR 0 5
91050: PPUSH
91051: LD_VAR 0 4
91055: PPUSH
91056: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
91060: LD_VAR 0 5
91064: PPUSH
91065: LD_VAR 0 2
91069: PPUSH
91070: LD_VAR 0 3
91074: PPUSH
91075: LD_INT 0
91077: PPUSH
91078: CALL_OW 48
// end ;
91082: LD_VAR 0 5
91086: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
91087: LD_INT 0
91089: PPUSH
91090: PPUSH
91091: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
91092: LD_ADDR_VAR 0 2
91096: PUSH
91097: LD_INT 0
91099: PUSH
91100: LD_INT 0
91102: PUSH
91103: LD_INT 0
91105: PUSH
91106: LD_INT 0
91108: PUSH
91109: EMPTY
91110: LIST
91111: LIST
91112: LIST
91113: LIST
91114: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
91115: LD_VAR 0 1
91119: NOT
91120: PUSH
91121: LD_VAR 0 1
91125: PPUSH
91126: CALL_OW 264
91130: PUSH
91131: LD_INT 12
91133: PUSH
91134: LD_INT 51
91136: PUSH
91137: LD_INT 32
91139: PUSH
91140: LD_EXP 71
91144: PUSH
91145: EMPTY
91146: LIST
91147: LIST
91148: LIST
91149: LIST
91150: IN
91151: NOT
91152: OR
91153: IFFALSE 91157
// exit ;
91155: GO 91255
// for i := 1 to 3 do
91157: LD_ADDR_VAR 0 3
91161: PUSH
91162: DOUBLE
91163: LD_INT 1
91165: DEC
91166: ST_TO_ADDR
91167: LD_INT 3
91169: PUSH
91170: FOR_TO
91171: IFFALSE 91253
// begin tmp := GetCargo ( cargo , i ) ;
91173: LD_ADDR_VAR 0 4
91177: PUSH
91178: LD_VAR 0 1
91182: PPUSH
91183: LD_VAR 0 3
91187: PPUSH
91188: CALL_OW 289
91192: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
91193: LD_ADDR_VAR 0 2
91197: PUSH
91198: LD_VAR 0 2
91202: PPUSH
91203: LD_VAR 0 3
91207: PPUSH
91208: LD_VAR 0 4
91212: PPUSH
91213: CALL_OW 1
91217: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
91218: LD_ADDR_VAR 0 2
91222: PUSH
91223: LD_VAR 0 2
91227: PPUSH
91228: LD_INT 4
91230: PPUSH
91231: LD_VAR 0 2
91235: PUSH
91236: LD_INT 4
91238: ARRAY
91239: PUSH
91240: LD_VAR 0 4
91244: PLUS
91245: PPUSH
91246: CALL_OW 1
91250: ST_TO_ADDR
// end ;
91251: GO 91170
91253: POP
91254: POP
// end ;
91255: LD_VAR 0 2
91259: RET
// export function Length ( array ) ; begin
91260: LD_INT 0
91262: PPUSH
// result := array + 0 ;
91263: LD_ADDR_VAR 0 2
91267: PUSH
91268: LD_VAR 0 1
91272: PUSH
91273: LD_INT 0
91275: PLUS
91276: ST_TO_ADDR
// end ;
91277: LD_VAR 0 2
91281: RET
// export function PrepareArray ( array ) ; begin
91282: LD_INT 0
91284: PPUSH
// result := array diff 0 ;
91285: LD_ADDR_VAR 0 2
91289: PUSH
91290: LD_VAR 0 1
91294: PUSH
91295: LD_INT 0
91297: DIFF
91298: ST_TO_ADDR
// if not result [ 1 ] then
91299: LD_VAR 0 2
91303: PUSH
91304: LD_INT 1
91306: ARRAY
91307: NOT
91308: IFFALSE 91328
// result := Delete ( result , 1 ) ;
91310: LD_ADDR_VAR 0 2
91314: PUSH
91315: LD_VAR 0 2
91319: PPUSH
91320: LD_INT 1
91322: PPUSH
91323: CALL_OW 3
91327: ST_TO_ADDR
// end ; end_of_file
91328: LD_VAR 0 2
91332: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
91333: LD_VAR 0 1
91337: PUSH
91338: LD_INT 200
91340: DOUBLE
91341: GREATEREQUAL
91342: IFFALSE 91350
91344: LD_INT 299
91346: DOUBLE
91347: LESSEQUAL
91348: IFTRUE 91352
91350: GO 91384
91352: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
91353: LD_VAR 0 1
91357: PPUSH
91358: LD_VAR 0 2
91362: PPUSH
91363: LD_VAR 0 3
91367: PPUSH
91368: LD_VAR 0 4
91372: PPUSH
91373: LD_VAR 0 5
91377: PPUSH
91378: CALL 46184 0 5
91382: GO 91461
91384: LD_INT 300
91386: DOUBLE
91387: GREATEREQUAL
91388: IFFALSE 91396
91390: LD_INT 399
91392: DOUBLE
91393: LESSEQUAL
91394: IFTRUE 91398
91396: GO 91460
91398: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
91399: LD_VAR 0 1
91403: PPUSH
91404: LD_VAR 0 2
91408: PPUSH
91409: LD_VAR 0 3
91413: PPUSH
91414: LD_VAR 0 4
91418: PPUSH
91419: LD_VAR 0 5
91423: PPUSH
91424: LD_VAR 0 6
91428: PPUSH
91429: LD_VAR 0 7
91433: PPUSH
91434: LD_VAR 0 8
91438: PPUSH
91439: LD_VAR 0 9
91443: PPUSH
91444: LD_VAR 0 10
91448: PPUSH
91449: LD_VAR 0 11
91453: PPUSH
91454: CALL 42513 0 11
91458: GO 91461
91460: POP
// end ;
91461: PPOPN 11
91463: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
91464: LD_VAR 0 1
91468: PPUSH
91469: LD_VAR 0 2
91473: PPUSH
91474: LD_VAR 0 3
91478: PPUSH
91479: LD_VAR 0 4
91483: PPUSH
91484: LD_VAR 0 5
91488: PPUSH
91489: CALL 45920 0 5
// end ; end_of_file
91493: PPOPN 5
91495: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91496: LD_VAR 0 1
91500: PPUSH
91501: LD_VAR 0 2
91505: PPUSH
91506: LD_VAR 0 3
91510: PPUSH
91511: LD_VAR 0 4
91515: PPUSH
91516: LD_VAR 0 5
91520: PPUSH
91521: LD_VAR 0 6
91525: PPUSH
91526: CALL 30206 0 6
// end ;
91530: PPOPN 6
91532: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91533: LD_INT 0
91535: PPUSH
// begin if not units then
91536: LD_VAR 0 1
91540: NOT
91541: IFFALSE 91545
// exit ;
91543: GO 91545
// end ;
91545: PPOPN 7
91547: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91548: CALL 30177 0 0
// end ;
91552: PPOPN 1
91554: END
