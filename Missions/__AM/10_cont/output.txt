// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 59
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: PUSH
 142: LD_OWVAR 67
 146: ARRAY
 147: ST_TO_ADDR
// eventVar1 = 0 ;
 148: LD_ADDR_EXP 63
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// eventVar2 = 0 ;
 156: LD_ADDR_EXP 64
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// fastEnd = 0 ;
 164: LD_ADDR_EXP 61
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// KhatamStatus = 0 ;
 172: LD_ADDR_EXP 53
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// GensherStatus = 0 ;
 180: LD_ADDR_EXP 52
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// cratesSpawned = 0 ;
 188: LD_ADDR_EXP 56
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 57
 200: PUSH
 201: LD_INT 1
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 2
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 58
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: LD_INT 4
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// snipersTrained := false ;
 246: LD_ADDR_EXP 60
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// attackAvalaible = 1 ;
 254: LD_ADDR_EXP 62
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// mission_prefix := 10c_ ;
 262: LD_ADDR_EXP 54
 266: PUSH
 267: LD_STRING 10c_
 269: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 270: LD_ADDR_EXP 55
 274: PUSH
 275: LD_STRING 10_
 277: ST_TO_ADDR
// debugMode = 0 ;
 278: LD_ADDR_EXP 65
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// PrepareNature ;
 286: CALL 26557 0 0
// PrepareDifficulty ;
 290: CALL 11234 0 0
// PrepareJMMTeam ;
 294: CALL 1342 0 0
// PrepareCathyTeam ;
 298: CALL 2459 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 302: LD_INT 24
 304: PPUSH
 305: LD_INT 1
 307: PUSH
 308: LD_OWVAR 67
 312: PLUS
 313: PPUSH
 314: CALL 21094 0 2
// if Difficulty > 1 then
 318: LD_OWVAR 67
 322: PUSH
 323: LD_INT 1
 325: GREATER
 326: IFFALSE 340
// PlaceMines ( MineField2 , Difficulty ) ;
 328: LD_INT 25
 330: PPUSH
 331: LD_OWVAR 67
 335: PPUSH
 336: CALL 21094 0 2
// if Difficulty > 2 then
 340: LD_OWVAR 67
 344: PUSH
 345: LD_INT 2
 347: GREATER
 348: IFFALSE 362
// PlaceMines ( MineField3 , Difficulty ) ;
 350: LD_INT 26
 352: PPUSH
 353: LD_OWVAR 67
 357: PPUSH
 358: CALL 21094 0 2
// PrepareArabianCommander ;
 362: CALL 3905 0 0
// PrepareArabian ;
 366: CALL 3957 0 0
// BuildArabianBase ;
 370: CALL 14049 0 0
// TameApemans ;
 374: CALL 19899 0 0
// end ;
 378: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 379: LD_EXP 65
 383: PUSH
 384: LD_INT 1
 386: EQUAL
 387: IFFALSE 693
 389: GO 391
 391: DISABLE
 392: LD_INT 0
 394: PPUSH
// begin enable ;
 395: ENABLE
// fogoff ( true ) ;
 396: LD_INT 1
 398: PPUSH
 399: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 403: LD_ADDR_VAR 0 1
 407: PUSH
 408: LD_INT 22
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: LD_INT 21
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: PPUSH
 432: CALL_OW 69
 436: PUSH
 437: FOR_IN
 438: IFFALSE 454
// SetLives ( i , 1000 ) ;
 440: LD_VAR 0 1
 444: PPUSH
 445: LD_INT 1000
 447: PPUSH
 448: CALL_OW 234
 452: GO 437
 454: POP
 455: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 456: LD_ADDR_VAR 0 1
 460: PUSH
 461: LD_INT 22
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PPUSH
 503: CALL_OW 69
 507: PUSH
 508: FOR_IN
 509: IFFALSE 533
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 511: LD_VAR 0 1
 515: PPUSH
 516: CALL_OW 274
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: LD_INT 9999
 526: PPUSH
 527: CALL_OW 277
 531: GO 508
 533: POP
 534: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 2
 552: PUSH
 553: LD_INT 30
 555: PUSH
 556: LD_INT 0
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: PUSH
 563: LD_INT 30
 565: PUSH
 566: LD_INT 1
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: FOR_IN
 588: IFFALSE 612
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 590: LD_VAR 0 1
 594: PPUSH
 595: CALL_OW 274
 599: PPUSH
 600: LD_INT 2
 602: PPUSH
 603: LD_INT 9999
 605: PPUSH
 606: CALL_OW 277
 610: GO 587
 612: POP
 613: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 614: LD_ADDR_VAR 0 1
 618: PUSH
 619: LD_INT 22
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 2
 631: PUSH
 632: LD_INT 30
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PUSH
 642: LD_INT 30
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: LIST
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PPUSH
 661: CALL_OW 69
 665: PUSH
 666: FOR_IN
 667: IFFALSE 691
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 669: LD_VAR 0 1
 673: PPUSH
 674: CALL_OW 274
 678: PPUSH
 679: LD_INT 3
 681: PPUSH
 682: LD_INT 9999
 684: PPUSH
 685: CALL_OW 277
 689: GO 666
 691: POP
 692: POP
// end ;
 693: PPOPN 1
 695: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 696: LD_INT 25
 698: PUSH
 699: LD_INT 5
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: IFFALSE 723
 712: GO 714
 714: DISABLE
// snipersTrained := true ;
 715: LD_ADDR_EXP 60
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
 723: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: CALL_OW 81
 734: PUSH
 735: LD_INT 1
 737: EQUAL
 738: PUSH
 739: LD_EXP 42
 743: AND
 744: PUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PPUSH
 769: CALL_OW 69
 773: PUSH
 774: LD_INT 0
 776: EQUAL
 777: AND
 778: IFFALSE 790
 780: GO 782
 782: DISABLE
// SetAchievement ( ACH_POWER ) ;
 783: LD_STRING ACH_POWER
 785: PPUSH
 786: CALL_OW 543
 790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 791: LD_INT 22
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 30
 803: PUSH
 804: LD_INT 1
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PPUSH
 815: CALL_OW 69
 819: PUSH
 820: LD_INT 22
 822: PUSH
 823: LD_INT 1
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 30
 832: PUSH
 833: LD_INT 32
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PPUSH
 844: CALL_OW 69
 848: AND
 849: PUSH
 850: LD_INT 22
 852: PUSH
 853: LD_INT 1
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: LD_INT 30
 862: PUSH
 863: LD_INT 33
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PPUSH
 874: CALL_OW 69
 878: AND
 879: PUSH
 880: LD_INT 22
 882: PUSH
 883: LD_INT 1
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 30
 892: PUSH
 893: LD_INT 5
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: AND
 909: PUSH
 910: LD_INT 22
 912: PUSH
 913: LD_INT 1
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PUSH
 920: LD_INT 30
 922: PUSH
 923: LD_INT 3
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PPUSH
 934: CALL_OW 69
 938: AND
 939: PUSH
 940: LD_INT 22
 942: PUSH
 943: LD_INT 1
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PUSH
 950: LD_INT 30
 952: PUSH
 953: LD_INT 36
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PPUSH
 964: CALL_OW 69
 968: AND
 969: PUSH
 970: LD_INT 22
 972: PUSH
 973: LD_INT 1
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 30
 982: PUSH
 983: LD_INT 31
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PPUSH
 994: CALL_OW 69
 998: AND
 999: PUSH
1000: LD_INT 22
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 30
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PPUSH
1024: CALL_OW 69
1028: AND
1029: PUSH
1030: LD_INT 22
1032: PUSH
1033: LD_INT 1
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 30
1042: PUSH
1043: LD_INT 20
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PPUSH
1054: CALL_OW 69
1058: AND
1059: PUSH
1060: LD_INT 22
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: PUSH
1070: LD_INT 30
1072: PUSH
1073: LD_INT 19
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PPUSH
1084: CALL_OW 69
1088: AND
1089: PUSH
1090: LD_INT 22
1092: PUSH
1093: LD_INT 1
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 30
1102: PUSH
1103: LD_INT 16
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: PPUSH
1114: CALL_OW 69
1118: AND
1119: PUSH
1120: LD_INT 22
1122: PUSH
1123: LD_INT 1
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 30
1132: PUSH
1133: LD_INT 17
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PPUSH
1144: CALL_OW 69
1148: AND
1149: PUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 30
1162: PUSH
1163: LD_INT 21
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: AND
1179: PUSH
1180: LD_INT 22
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 30
1192: PUSH
1193: LD_INT 29
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PPUSH
1204: CALL_OW 69
1208: AND
1209: PUSH
1210: LD_INT 22
1212: PUSH
1213: LD_INT 1
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 30
1222: PUSH
1223: LD_INT 30
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 69
1238: AND
1239: PUSH
1240: LD_INT 22
1242: PUSH
1243: LD_INT 1
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 30
1252: PUSH
1253: LD_INT 27
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PPUSH
1264: CALL_OW 69
1268: AND
1269: PUSH
1270: LD_INT 22
1272: PUSH
1273: LD_INT 1
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 30
1282: PUSH
1283: LD_INT 26
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PPUSH
1294: CALL_OW 69
1298: AND
1299: PUSH
1300: LD_INT 22
1302: PUSH
1303: LD_INT 1
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PUSH
1310: LD_INT 30
1312: PUSH
1313: LD_INT 28
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: AND
1329: IFFALSE 1341
1331: GO 1333
1333: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1334: LD_STRING ACH_ARCH
1336: PPUSH
1337: CALL_OW 543
1341: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1342: LD_INT 0
1344: PPUSH
1345: PPUSH
1346: PPUSH
1347: PPUSH
1348: PPUSH
1349: PPUSH
// uc_side = 1 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 1
1357: ST_TO_ADDR
// uc_nation = 1 ;
1358: LD_ADDR_OWVAR 21
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
// count = 0 ;
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: LD_INT 0
1373: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
1374: LD_ADDR_EXP 1
1378: PUSH
1379: LD_STRING 10_JMM
1381: PPUSH
1382: LD_INT 1
1384: PPUSH
1385: CALL 10811 0 2
1389: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1390: LD_ADDR_EXP 20
1394: PUSH
1395: LD_EXP 20
1399: PUSH
1400: LD_EXP 1
1404: ADD
1405: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
1406: LD_ADDR_EXP 10
1410: PUSH
1411: LD_STRING 10_Gary
1413: PPUSH
1414: LD_INT 1
1416: PPUSH
1417: CALL 10811 0 2
1421: ST_TO_ADDR
// if Gary then
1422: LD_EXP 10
1426: IFFALSE 1444
// JMMSquad = JMMSquad ^ Gary ;
1428: LD_ADDR_EXP 20
1432: PUSH
1433: LD_EXP 20
1437: PUSH
1438: LD_EXP 10
1442: ADD
1443: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
1444: LD_ADDR_EXP 5
1448: PUSH
1449: LD_STRING 10_Cyrus
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: CALL 10811 0 2
1459: ST_TO_ADDR
// if Cyrus then
1460: LD_EXP 5
1464: IFFALSE 1482
// JMMSquad = JMMSquad ^ Cyrus ;
1466: LD_ADDR_EXP 20
1470: PUSH
1471: LD_EXP 20
1475: PUSH
1476: LD_EXP 5
1480: ADD
1481: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
1482: LD_ADDR_EXP 4
1486: PUSH
1487: LD_STRING 10_Bobby
1489: PPUSH
1490: LD_INT 1
1492: PPUSH
1493: CALL 10811 0 2
1497: ST_TO_ADDR
// if Bobby then
1498: LD_EXP 4
1502: IFFALSE 1520
// JMMSquad = JMMSquad ^ Bobby ;
1504: LD_ADDR_EXP 20
1508: PUSH
1509: LD_EXP 20
1513: PUSH
1514: LD_EXP 4
1518: ADD
1519: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
1520: LD_ADDR_EXP 6
1524: PUSH
1525: LD_STRING 10_Lisa
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: CALL 10811 0 2
1535: ST_TO_ADDR
// if Lisa then
1536: LD_EXP 6
1540: IFFALSE 1558
// JMMSquad = JMMSquad ^ Lisa ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_EXP 6
1556: ADD
1557: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
1558: LD_ADDR_EXP 2
1562: PUSH
1563: LD_STRING 10_Brown
1565: PPUSH
1566: LD_INT 1
1568: PPUSH
1569: CALL 10811 0 2
1573: ST_TO_ADDR
// if Brown then
1574: LD_EXP 2
1578: IFFALSE 1596
// JMMSquad = JMMSquad ^ Brown ;
1580: LD_ADDR_EXP 20
1584: PUSH
1585: LD_EXP 20
1589: PUSH
1590: LD_EXP 2
1594: ADD
1595: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
1596: LD_ADDR_EXP 3
1600: PUSH
1601: LD_STRING 10_Donaldson
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: CALL 10811 0 2
1611: ST_TO_ADDR
// if Donaldson then
1612: LD_EXP 3
1616: IFFALSE 1634
// JMMSquad = JMMSquad ^ Donaldson ;
1618: LD_ADDR_EXP 20
1622: PUSH
1623: LD_EXP 20
1627: PUSH
1628: LD_EXP 3
1632: ADD
1633: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
1634: LD_ADDR_EXP 7
1638: PUSH
1639: LD_STRING 10_Frank
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL 10811 0 2
1649: ST_TO_ADDR
// if Frank then
1650: LD_EXP 7
1654: IFFALSE 1672
// JMMSquad = JMMSquad ^ Frank ;
1656: LD_ADDR_EXP 20
1660: PUSH
1661: LD_EXP 20
1665: PUSH
1666: LD_EXP 7
1670: ADD
1671: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1672: LD_ADDR_EXP 9
1676: PUSH
1677: LD_STRING 10_Houten
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: CALL 10811 0 2
1687: ST_TO_ADDR
// if Houten then
1688: LD_EXP 9
1692: IFFALSE 1710
// JMMSquad = JMMSquad ^ Houten ;
1694: LD_ADDR_EXP 20
1698: PUSH
1699: LD_EXP 20
1703: PUSH
1704: LD_EXP 9
1708: ADD
1709: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1710: LD_ADDR_EXP 21
1714: PUSH
1715: LD_STRING OthersIn10
1717: PPUSH
1718: CALL_OW 31
1722: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1723: LD_ADDR_EXP 24
1727: PUSH
1728: LD_STRING Powell
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL 10811 0 2
1738: ST_TO_ADDR
// for i in JMMSquad do
1739: LD_ADDR_VAR 0 2
1743: PUSH
1744: LD_EXP 20
1748: PUSH
1749: FOR_IN
1750: IFFALSE 2030
// begin if count < 3 then
1752: LD_VAR 0 6
1756: PUSH
1757: LD_INT 3
1759: LESS
1760: IFFALSE 1877
// begin vc_engine = 1 ;
1762: LD_ADDR_OWVAR 39
1766: PUSH
1767: LD_INT 1
1769: ST_TO_ADDR
// vc_control = 1 ;
1770: LD_ADDR_OWVAR 38
1774: PUSH
1775: LD_INT 1
1777: ST_TO_ADDR
// vc_weapon = 12 ;
1778: LD_ADDR_OWVAR 40
1782: PUSH
1783: LD_INT 12
1785: ST_TO_ADDR
// vc_chassis = 3 ;
1786: LD_ADDR_OWVAR 37
1790: PUSH
1791: LD_INT 3
1793: ST_TO_ADDR
// veh = CreateVehicle ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: CALL_OW 45
1803: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1804: LD_VAR 0 4
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_INT 2
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 49
// if count mod 2 = 0 then
1831: LD_VAR 0 6
1835: PUSH
1836: LD_INT 2
1838: MOD
1839: PUSH
1840: LD_INT 0
1842: EQUAL
1843: IFFALSE 1862
// AddCargo ( veh , 1 , 100 ) else
1845: LD_VAR 0 4
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: LD_INT 100
1855: PPUSH
1856: CALL_OW 291
1860: GO 1877
// AddCargo ( veh , 3 , 100 ) end ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_INT 3
1869: PPUSH
1870: LD_INT 100
1872: PPUSH
1873: CALL_OW 291
// if count >= 3 then
1877: LD_VAR 0 6
1881: PUSH
1882: LD_INT 3
1884: GREATEREQUAL
1885: IFFALSE 2000
// begin vc_engine = 1 ;
1887: LD_ADDR_OWVAR 39
1891: PUSH
1892: LD_INT 1
1894: ST_TO_ADDR
// vc_control = 1 ;
1895: LD_ADDR_OWVAR 38
1899: PUSH
1900: LD_INT 1
1902: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1903: LD_ADDR_OWVAR 40
1907: PUSH
1908: LD_INT 3
1910: PUSH
1911: LD_INT 4
1913: PUSH
1914: LD_INT 5
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: PUSH
1922: LD_INT 1
1924: PPUSH
1925: LD_INT 3
1927: PPUSH
1928: CALL_OW 12
1932: ARRAY
1933: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1934: LD_ADDR_OWVAR 37
1938: PUSH
1939: LD_INT 2
1941: PUSH
1942: LD_INT 3
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_VAR 0 2
1953: PUSH
1954: LD_INT 2
1956: MOD
1957: PUSH
1958: LD_INT 1
1960: PLUS
1961: ARRAY
1962: ST_TO_ADDR
// veh = CreateVehicle ;
1963: LD_ADDR_VAR 0 4
1967: PUSH
1968: CALL_OW 45
1972: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1973: LD_VAR 0 4
1977: PPUSH
1978: LD_INT 1
1980: PPUSH
1981: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1985: LD_VAR 0 4
1989: PPUSH
1990: LD_INT 2
1992: PPUSH
1993: LD_INT 0
1995: PPUSH
1996: CALL_OW 49
// end ; count = count + 1 ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_VAR 0 6
2009: PUSH
2010: LD_INT 1
2012: PLUS
2013: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2014: LD_VAR 0 2
2018: PPUSH
2019: LD_VAR 0 4
2023: PPUSH
2024: CALL_OW 52
// end ;
2028: GO 1749
2030: POP
2031: POP
// for i in others10 do
2032: LD_ADDR_VAR 0 2
2036: PUSH
2037: LD_EXP 21
2041: PUSH
2042: FOR_IN
2043: IFFALSE 2190
// begin vc_engine = 1 ;
2045: LD_ADDR_OWVAR 39
2049: PUSH
2050: LD_INT 1
2052: ST_TO_ADDR
// vc_control = 1 ;
2053: LD_ADDR_OWVAR 38
2057: PUSH
2058: LD_INT 1
2060: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2061: LD_ADDR_OWVAR 40
2065: PUSH
2066: LD_INT 3
2068: PUSH
2069: LD_INT 4
2071: PUSH
2072: LD_INT 5
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 1
2082: PPUSH
2083: LD_INT 3
2085: PPUSH
2086: CALL_OW 12
2090: ARRAY
2091: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2092: LD_ADDR_OWVAR 37
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_VAR 0 2
2111: PUSH
2112: LD_INT 2
2114: MOD
2115: PUSH
2116: LD_INT 1
2118: PLUS
2119: ARRAY
2120: ST_TO_ADDR
// veh = CreateVehicle ;
2121: LD_ADDR_VAR 0 4
2125: PUSH
2126: CALL_OW 45
2130: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2131: LD_VAR 0 4
2135: PPUSH
2136: LD_INT 1
2138: PPUSH
2139: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2143: LD_VAR 0 4
2147: PPUSH
2148: LD_INT 2
2150: PPUSH
2151: LD_INT 0
2153: PPUSH
2154: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2158: LD_ADDR_EXP 28
2162: PUSH
2163: LD_EXP 28
2167: PUSH
2168: LD_VAR 0 4
2172: ADD
2173: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_VAR 0 4
2183: PPUSH
2184: CALL_OW 52
// end ;
2188: GO 2042
2190: POP
2191: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2192: LD_INT 22
2194: PUSH
2195: LD_INT 1
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: PUSH
2202: LD_INT 21
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PPUSH
2216: CALL_OW 69
2220: PPUSH
2221: LD_INT 1
2223: PPUSH
2224: CALL_OW 336
// end ;
2228: LD_VAR 0 1
2232: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2233: LD_INT 0
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
// uc_side = 1 ;
2240: LD_ADDR_OWVAR 20
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// uc_nation = 1 ;
2248: LD_ADDR_OWVAR 21
2252: PUSH
2253: LD_INT 1
2255: ST_TO_ADDR
// for i := 1 to 10 do
2256: LD_ADDR_VAR 0 2
2260: PUSH
2261: DOUBLE
2262: LD_INT 1
2264: DEC
2265: ST_TO_ADDR
2266: LD_INT 10
2268: PUSH
2269: FOR_TO
2270: IFFALSE 2452
// begin vc_engine = 1 ;
2272: LD_ADDR_OWVAR 39
2276: PUSH
2277: LD_INT 1
2279: ST_TO_ADDR
// vc_control = 1 ;
2280: LD_ADDR_OWVAR 38
2284: PUSH
2285: LD_INT 1
2287: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2288: LD_ADDR_OWVAR 40
2292: PUSH
2293: LD_INT 3
2295: PUSH
2296: LD_INT 4
2298: PUSH
2299: LD_INT 5
2301: PUSH
2302: LD_INT 12
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 4
2316: PPUSH
2317: CALL_OW 12
2321: ARRAY
2322: ST_TO_ADDR
// vc_chassis = 3 ;
2323: LD_ADDR_OWVAR 37
2327: PUSH
2328: LD_INT 3
2330: ST_TO_ADDR
// veh = CreateVehicle ;
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: CALL_OW 45
2340: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2341: LD_VAR 0 3
2345: PPUSH
2346: LD_INT 1
2348: PPUSH
2349: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2353: LD_VAR 0 3
2357: PPUSH
2358: LD_INT 2
2360: PPUSH
2361: LD_INT 0
2363: PPUSH
2364: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2368: LD_ADDR_EXP 28
2372: PUSH
2373: LD_EXP 28
2377: PUSH
2378: LD_VAR 0 3
2382: ADD
2383: ST_TO_ADDR
// if vc_weapon = 12 then
2384: LD_OWVAR 40
2388: PUSH
2389: LD_INT 12
2391: EQUAL
2392: IFFALSE 2450
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 10
2404: PPUSH
2405: CALL_OW 12
2409: PUSH
2410: LD_INT 10
2412: MUL
2413: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2414: LD_VAR 0 3
2418: PPUSH
2419: LD_INT 1
2421: PUSH
2422: LD_INT 3
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: LD_INT 1
2431: PPUSH
2432: LD_INT 2
2434: PPUSH
2435: CALL_OW 12
2439: ARRAY
2440: PPUSH
2441: LD_VAR 0 4
2445: PPUSH
2446: CALL_OW 291
// end ; end ;
2450: GO 2269
2452: POP
2453: POP
// end ;
2454: LD_VAR 0 1
2458: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2459: LD_INT 0
2461: PPUSH
2462: PPUSH
2463: PPUSH
// uc_side = 4 ;
2464: LD_ADDR_OWVAR 20
2468: PUSH
2469: LD_INT 4
2471: ST_TO_ADDR
// uc_nation = 1 ;
2472: LD_ADDR_OWVAR 21
2476: PUSH
2477: LD_INT 1
2479: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
2480: LD_ADDR_EXP 11
2484: PUSH
2485: LD_STRING Simms
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL 10811 0 2
2495: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
2496: LD_ADDR_EXP 12
2500: PUSH
2501: LD_STRING 08_Denis
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL 10811 0 2
2511: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
2512: LD_ADDR_EXP 13
2516: PUSH
2517: LD_STRING 08_Joan
2519: PPUSH
2520: LD_INT 1
2522: PPUSH
2523: CALL 10811 0 2
2527: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2528: LD_STRING 08_Khatam
2530: PPUSH
2531: CALL_OW 28
2535: IFFALSE 2555
// Khatam = PrepareUnit ( 08_Khatam , true ) else
2537: LD_ADDR_EXP 14
2541: PUSH
2542: LD_STRING 08_Khatam
2544: PPUSH
2545: LD_INT 1
2547: PPUSH
2548: CALL 10811 0 2
2552: ST_TO_ADDR
2553: GO 2580
// if TestCharacters ( 03_Khatam ) then
2555: LD_STRING 03_Khatam
2557: PPUSH
2558: CALL_OW 28
2562: IFFALSE 2580
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
2564: LD_ADDR_EXP 14
2568: PUSH
2569: LD_STRING 03_Khatam
2571: PPUSH
2572: LD_INT 1
2574: PPUSH
2575: CALL 10811 0 2
2579: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
2580: LD_ADDR_EXP 15
2584: PUSH
2585: LD_STRING 08_Gladstone
2587: PPUSH
2588: LD_INT 1
2590: PPUSH
2591: CALL 10811 0 2
2595: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
2596: LD_ADDR_EXP 17
2600: PUSH
2601: LD_STRING DeltaDoctor
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL 10811 0 2
2611: ST_TO_ADDR
// Frank := PrepareUnit ( 08_Frank , true ) ;
2612: LD_ADDR_EXP 7
2616: PUSH
2617: LD_STRING 08_Frank
2619: PPUSH
2620: LD_INT 1
2622: PPUSH
2623: CALL 10811 0 2
2627: ST_TO_ADDR
// if Frank then
2628: LD_EXP 7
2632: IFFALSE 2652
// Kikuchi = PrepareUnit ( Yamoko , true ) else
2634: LD_ADDR_EXP 8
2638: PUSH
2639: LD_STRING Yamoko
2641: PPUSH
2642: LD_INT 1
2644: PPUSH
2645: CALL 10811 0 2
2649: ST_TO_ADDR
2650: GO 2668
// Kikuchi = PrepareUnit ( 08_Kikuchi , true ) ;
2652: LD_ADDR_EXP 8
2656: PUSH
2657: LD_STRING 08_Kikuchi
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: CALL 10811 0 2
2667: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2668: LD_ADDR_EXP 22
2672: PUSH
2673: LD_STRING 09_others
2675: PPUSH
2676: CALL_OW 31
2680: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2681: LD_ADDR_EXP 23
2685: PUSH
2686: LD_STRING 09_apes
2688: PPUSH
2689: CALL_OW 31
2693: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2694: LD_EXP 11
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2709: LD_EXP 12
2713: PPUSH
2714: LD_INT 1
2716: PPUSH
2717: LD_INT 0
2719: PPUSH
2720: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2724: LD_EXP 13
2728: PPUSH
2729: LD_INT 1
2731: PPUSH
2732: LD_INT 0
2734: PPUSH
2735: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2739: LD_EXP 14
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2754: LD_EXP 15
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: LD_INT 0
2764: PPUSH
2765: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2769: LD_EXP 17
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: LD_INT 0
2779: PPUSH
2780: CALL_OW 49
// if Kikuchi then
2784: LD_EXP 8
2788: IFFALSE 2805
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2790: LD_EXP 8
2794: PPUSH
2795: LD_INT 1
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2805: LD_EXP 11
2809: PUSH
2810: LD_EXP 14
2814: PUSH
2815: LD_EXP 12
2819: PUSH
2820: LD_EXP 15
2824: PUSH
2825: LD_EXP 17
2829: PUSH
2830: LD_EXP 13
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: PPUSH
2843: LD_INT 4
2845: PPUSH
2846: CALL_OW 336
// if others09 > 2 then
2850: LD_EXP 22
2854: PUSH
2855: LD_INT 2
2857: GREATER
2858: IFFALSE 2939
// begin for i := 1 to 3 do
2860: LD_ADDR_VAR 0 2
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_INT 3
2872: PUSH
2873: FOR_TO
2874: IFFALSE 2935
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2876: LD_EXP 22
2880: PUSH
2881: LD_VAR 0 2
2885: ARRAY
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2897: LD_ADDR_EXP 22
2901: PUSH
2902: LD_EXP 22
2906: PPUSH
2907: LD_INT 1
2909: PPUSH
2910: CALL_OW 3
2914: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2915: LD_EXP 22
2919: PUSH
2920: LD_VAR 0 2
2924: ARRAY
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: CALL_OW 336
// end ;
2933: GO 2873
2935: POP
2936: POP
// end else
2937: GO 2999
// begin for i in others09 do
2939: LD_ADDR_VAR 0 2
2943: PUSH
2944: LD_EXP 22
2948: PUSH
2949: FOR_IN
2950: IFFALSE 2997
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2952: LD_VAR 0 2
2956: PPUSH
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 0
2962: PPUSH
2963: CALL_OW 49
// others09 = others09 diff i ;
2967: LD_ADDR_EXP 22
2971: PUSH
2972: LD_EXP 22
2976: PUSH
2977: LD_VAR 0 2
2981: DIFF
2982: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2983: LD_VAR 0 2
2987: PPUSH
2988: LD_INT 2
2990: PPUSH
2991: CALL_OW 336
// end ;
2995: GO 2949
2997: POP
2998: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2999: LD_INT 22
3001: PUSH
3002: LD_INT 4
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 25
3011: PUSH
3012: LD_INT 2
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: PUSH
3028: LD_INT 0
3030: EQUAL
3031: IFFALSE 3163
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3033: LD_ADDR_VAR 0 3
3037: PUSH
3038: LD_INT 22
3040: PUSH
3041: LD_INT 4
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 25
3050: PUSH
3051: LD_INT 2
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PPUSH
3062: CALL_OW 69
3066: PUSH
3067: LD_EXP 11
3071: PUSH
3072: LD_EXP 14
3076: PUSH
3077: LD_EXP 12
3081: PUSH
3082: LD_EXP 15
3086: PUSH
3087: LD_EXP 17
3091: PUSH
3092: LD_EXP 13
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: DIFF
3105: ST_TO_ADDR
// if not tmp then
3106: LD_VAR 0 3
3110: NOT
3111: IFFALSE 3147
// begin if Denis then
3113: LD_EXP 12
3117: IFFALSE 3133
// SetClass ( Denis , 2 ) else
3119: LD_EXP 12
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: CALL_OW 336
3131: GO 3145
// SetClass ( DeltaDoctor , 2 ) ;
3133: LD_EXP 17
3137: PPUSH
3138: LD_INT 2
3140: PPUSH
3141: CALL_OW 336
// end else
3145: GO 3163
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3147: LD_VAR 0 3
3151: PUSH
3152: LD_INT 1
3154: ARRAY
3155: PPUSH
3156: LD_INT 2
3158: PPUSH
3159: CALL_OW 336
// end ; end ; for i in ape09 do
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 23
3172: PUSH
3173: FOR_IN
3174: IFFALSE 3193
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3176: LD_VAR 0 2
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: LD_INT 0
3186: PPUSH
3187: CALL_OW 49
3191: GO 3173
3193: POP
3194: POP
// uc_side = 4 ;
3195: LD_ADDR_OWVAR 20
3199: PUSH
3200: LD_INT 4
3202: ST_TO_ADDR
// hc_class := 1 ;
3203: LD_ADDR_OWVAR 28
3207: PUSH
3208: LD_INT 1
3210: ST_TO_ADDR
// hc_sex := sex_female ;
3211: LD_ADDR_OWVAR 27
3215: PUSH
3216: LD_INT 2
3218: ST_TO_ADDR
// hc_gallery :=  ;
3219: LD_ADDR_OWVAR 33
3223: PUSH
3224: LD_STRING 
3226: ST_TO_ADDR
// hc_name :=  ;
3227: LD_ADDR_OWVAR 26
3231: PUSH
3232: LD_STRING 
3234: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3235: LD_ADDR_OWVAR 31
3239: PUSH
3240: LD_INT 1
3242: PUSH
3243: LD_INT 7
3245: PUSH
3246: LD_INT 1
3248: PUSH
3249: LD_INT 0
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: ST_TO_ADDR
// AmScout = CreateHuman ;
3258: LD_ADDR_EXP 18
3262: PUSH
3263: CALL_OW 44
3267: ST_TO_ADDR
// end ;
3268: LD_VAR 0 1
3272: RET
// export function PrepareCornell ; begin
3273: LD_INT 0
3275: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3276: LD_INT 4
3278: PPUSH
3279: LD_INT 4
3281: PPUSH
3282: CALL_OW 343
// uc_side = 4 ;
3286: LD_ADDR_OWVAR 20
3290: PUSH
3291: LD_INT 4
3293: ST_TO_ADDR
// uc_nation = 1 ;
3294: LD_ADDR_OWVAR 21
3298: PUSH
3299: LD_INT 1
3301: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
3302: LD_ADDR_EXP 19
3306: PUSH
3307: LD_STRING 03_Cornel
3309: PPUSH
3310: LD_INT 1
3312: PPUSH
3313: CALL 10811 0 2
3317: ST_TO_ADDR
// if not Cornell then
3318: LD_EXP 19
3322: NOT
3323: IFFALSE 3327
// exit ;
3325: GO 3435
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3327: LD_EXP 19
3331: PPUSH
3332: LD_INT 8
3334: PPUSH
3335: LD_INT 0
3337: PPUSH
3338: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3342: LD_EXP 19
3346: PPUSH
3347: LD_INT 350
3349: PPUSH
3350: CALL_OW 234
// if IsInUnit ( JMM ) then
3354: LD_EXP 1
3358: PPUSH
3359: CALL_OW 310
3363: IFFALSE 3406
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3365: LD_EXP 19
3369: PPUSH
3370: LD_EXP 1
3374: PPUSH
3375: CALL_OW 310
3379: PPUSH
3380: CALL_OW 250
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 310
3394: PPUSH
3395: CALL_OW 251
3399: PPUSH
3400: CALL_OW 111
3404: GO 3435
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3406: LD_EXP 19
3410: PPUSH
3411: LD_EXP 1
3415: PPUSH
3416: CALL_OW 250
3420: PPUSH
3421: LD_EXP 1
3425: PPUSH
3426: CALL_OW 251
3430: PPUSH
3431: CALL_OW 111
// end ; end_of_file
3435: LD_VAR 0 1
3439: RET
// export function PrepareRussians ; var i , un ; begin
3440: LD_INT 0
3442: PPUSH
3443: PPUSH
3444: PPUSH
// uc_side = 3 ;
3445: LD_ADDR_OWVAR 20
3449: PUSH
3450: LD_INT 3
3452: ST_TO_ADDR
// uc_nation = 3 ;
3453: LD_ADDR_OWVAR 21
3457: PUSH
3458: LD_INT 3
3460: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
3461: LD_ADDR_EXP 25
3465: PUSH
3466: LD_STRING Tsaritsyn
3468: PPUSH
3469: LD_INT 0
3471: PPUSH
3472: CALL 10811 0 2
3476: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3477: LD_EXP 25
3481: PPUSH
3482: LD_INT 3
3484: PPUSH
3485: LD_INT 0
3487: PPUSH
3488: CALL_OW 49
// for i = 1 to 14 do
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: DOUBLE
3498: LD_INT 1
3500: DEC
3501: ST_TO_ADDR
3502: LD_INT 14
3504: PUSH
3505: FOR_TO
3506: IFFALSE 3592
// begin uc_side = 3 ;
3508: LD_ADDR_OWVAR 20
3512: PUSH
3513: LD_INT 3
3515: ST_TO_ADDR
// uc_nation = 3 ;
3516: LD_ADDR_OWVAR 21
3520: PUSH
3521: LD_INT 3
3523: ST_TO_ADDR
// hc_gallery =  ;
3524: LD_ADDR_OWVAR 33
3528: PUSH
3529: LD_STRING 
3531: ST_TO_ADDR
// hc_name =  ;
3532: LD_ADDR_OWVAR 26
3536: PUSH
3537: LD_STRING 
3539: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: LD_EXP 36
3550: PPUSH
3551: LD_EXP 37
3555: PPUSH
3556: CALL_OW 12
3560: PPUSH
3561: CALL_OW 380
// un = CreateHuman ;
3565: LD_ADDR_VAR 0 3
3569: PUSH
3570: CALL_OW 44
3574: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3575: LD_VAR 0 3
3579: PPUSH
3580: LD_INT 3
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 49
// end ;
3590: GO 3505
3592: POP
3593: POP
// for i = 1 to 6 do
3594: LD_ADDR_VAR 0 2
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_INT 6
3606: PUSH
3607: FOR_TO
3608: IFFALSE 3694
// begin uc_side = 3 ;
3610: LD_ADDR_OWVAR 20
3614: PUSH
3615: LD_INT 3
3617: ST_TO_ADDR
// uc_nation = 3 ;
3618: LD_ADDR_OWVAR 21
3622: PUSH
3623: LD_INT 3
3625: ST_TO_ADDR
// hc_gallery =  ;
3626: LD_ADDR_OWVAR 33
3630: PUSH
3631: LD_STRING 
3633: ST_TO_ADDR
// hc_name =  ;
3634: LD_ADDR_OWVAR 26
3638: PUSH
3639: LD_STRING 
3641: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3642: LD_INT 0
3644: PPUSH
3645: LD_INT 2
3647: PPUSH
3648: LD_EXP 36
3652: PPUSH
3653: LD_EXP 37
3657: PPUSH
3658: CALL_OW 12
3662: PPUSH
3663: CALL_OW 380
// un = CreateHuman ;
3667: LD_ADDR_VAR 0 3
3671: PUSH
3672: CALL_OW 44
3676: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3677: LD_VAR 0 3
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 0
3687: PPUSH
3688: CALL_OW 49
// end ;
3692: GO 3607
3694: POP
3695: POP
// for i = 1 to 6 do
3696: LD_ADDR_VAR 0 2
3700: PUSH
3701: DOUBLE
3702: LD_INT 1
3704: DEC
3705: ST_TO_ADDR
3706: LD_INT 6
3708: PUSH
3709: FOR_TO
3710: IFFALSE 3796
// begin uc_side = 3 ;
3712: LD_ADDR_OWVAR 20
3716: PUSH
3717: LD_INT 3
3719: ST_TO_ADDR
// uc_nation = 3 ;
3720: LD_ADDR_OWVAR 21
3724: PUSH
3725: LD_INT 3
3727: ST_TO_ADDR
// hc_gallery =  ;
3728: LD_ADDR_OWVAR 33
3732: PUSH
3733: LD_STRING 
3735: ST_TO_ADDR
// hc_name =  ;
3736: LD_ADDR_OWVAR 26
3740: PUSH
3741: LD_STRING 
3743: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3744: LD_INT 0
3746: PPUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_EXP 36
3754: PPUSH
3755: LD_EXP 37
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: CALL_OW 380
// un = CreateHuman ;
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: CALL_OW 44
3778: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3779: LD_VAR 0 3
3783: PPUSH
3784: LD_INT 3
3786: PPUSH
3787: LD_INT 0
3789: PPUSH
3790: CALL_OW 49
// end ;
3794: GO 3709
3796: POP
3797: POP
// for i = 1 to 4 do
3798: LD_ADDR_VAR 0 2
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_INT 4
3810: PUSH
3811: FOR_TO
3812: IFFALSE 3898
// begin uc_side = 3 ;
3814: LD_ADDR_OWVAR 20
3818: PUSH
3819: LD_INT 3
3821: ST_TO_ADDR
// uc_nation = 3 ;
3822: LD_ADDR_OWVAR 21
3826: PUSH
3827: LD_INT 3
3829: ST_TO_ADDR
// hc_gallery =  ;
3830: LD_ADDR_OWVAR 33
3834: PUSH
3835: LD_STRING 
3837: ST_TO_ADDR
// hc_name =  ;
3838: LD_ADDR_OWVAR 26
3842: PUSH
3843: LD_STRING 
3845: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3846: LD_INT 0
3848: PPUSH
3849: LD_INT 4
3851: PPUSH
3852: LD_EXP 36
3856: PPUSH
3857: LD_EXP 37
3861: PPUSH
3862: CALL_OW 12
3866: PPUSH
3867: CALL_OW 380
// un = CreateHuman ;
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: CALL_OW 44
3880: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3881: LD_VAR 0 3
3885: PPUSH
3886: LD_INT 3
3888: PPUSH
3889: LD_INT 0
3891: PPUSH
3892: CALL_OW 49
// end ;
3896: GO 3811
3898: POP
3899: POP
// end ; end_of_file
3900: LD_VAR 0 1
3904: RET
// export function PrepareArabianCommander ; begin
3905: LD_INT 0
3907: PPUSH
// uc_side = 2 ;
3908: LD_ADDR_OWVAR 20
3912: PUSH
3913: LD_INT 2
3915: ST_TO_ADDR
// uc_nation = 2 ;
3916: LD_ADDR_OWVAR 21
3920: PUSH
3921: LD_INT 2
3923: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3924: LD_ADDR_EXP 26
3928: PUSH
3929: LD_STRING Dietrich
3931: PPUSH
3932: CALL_OW 25
3936: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3937: LD_EXP 26
3941: PPUSH
3942: LD_INT 4
3944: PPUSH
3945: LD_INT 0
3947: PPUSH
3948: CALL_OW 49
// end ;
3952: LD_VAR 0 1
3956: RET
// export function PrepareArabian ; var i , un , veh ; begin
3957: LD_INT 0
3959: PPUSH
3960: PPUSH
3961: PPUSH
3962: PPUSH
// uc_side := 2 ;
3963: LD_ADDR_OWVAR 20
3967: PUSH
3968: LD_INT 2
3970: ST_TO_ADDR
// uc_nation := 2 ;
3971: LD_ADDR_OWVAR 21
3975: PUSH
3976: LD_INT 2
3978: ST_TO_ADDR
// if not Ahmed then
3979: LD_EXP 27
3983: NOT
3984: IFFALSE 4052
// begin InitHc ;
3986: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_EXP 36
4000: PPUSH
4001: LD_EXP 37
4005: PUSH
4006: LD_INT 1
4008: PLUS
4009: PPUSH
4010: CALL_OW 12
4014: PPUSH
4015: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4019: LD_ADDR_OWVAR 26
4023: PUSH
4024: LD_STRING Ahmed Abbasid
4026: ST_TO_ADDR
// Ahmed := CreateHuman ;
4027: LD_ADDR_EXP 27
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4037: LD_EXP 27
4041: PPUSH
4042: LD_INT 4
4044: PPUSH
4045: LD_INT 0
4047: PPUSH
4048: CALL_OW 49
// end ; for i = 1 to 4 do
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 4
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4152
// begin uc_side = 2 ;
4068: LD_ADDR_OWVAR 20
4072: PUSH
4073: LD_INT 2
4075: ST_TO_ADDR
// uc_nation = 2 ;
4076: LD_ADDR_OWVAR 21
4080: PUSH
4081: LD_INT 2
4083: ST_TO_ADDR
// hc_gallery =  ;
4084: LD_ADDR_OWVAR 33
4088: PUSH
4089: LD_STRING 
4091: ST_TO_ADDR
// hc_name =  ;
4092: LD_ADDR_OWVAR 26
4096: PUSH
4097: LD_STRING 
4099: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4100: LD_INT 0
4102: PPUSH
4103: LD_INT 2
4105: PPUSH
4106: LD_EXP 36
4110: PPUSH
4111: LD_EXP 37
4115: PPUSH
4116: CALL_OW 12
4120: PPUSH
4121: CALL_OW 380
// un = CreateHuman ;
4125: LD_ADDR_VAR 0 3
4129: PUSH
4130: CALL_OW 44
4134: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4135: LD_VAR 0 3
4139: PPUSH
4140: LD_INT 4
4142: PPUSH
4143: LD_INT 0
4145: PPUSH
4146: CALL_OW 49
// end ;
4150: GO 4065
4152: POP
4153: POP
// for i = 1 to 5 do
4154: LD_ADDR_VAR 0 2
4158: PUSH
4159: DOUBLE
4160: LD_INT 1
4162: DEC
4163: ST_TO_ADDR
4164: LD_INT 5
4166: PUSH
4167: FOR_TO
4168: IFFALSE 4254
// begin uc_side = 2 ;
4170: LD_ADDR_OWVAR 20
4174: PUSH
4175: LD_INT 2
4177: ST_TO_ADDR
// uc_nation = 2 ;
4178: LD_ADDR_OWVAR 21
4182: PUSH
4183: LD_INT 2
4185: ST_TO_ADDR
// hc_gallery =  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// hc_name =  ;
4194: LD_ADDR_OWVAR 26
4198: PUSH
4199: LD_STRING 
4201: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4202: LD_INT 0
4204: PPUSH
4205: LD_INT 1
4207: PPUSH
4208: LD_EXP 36
4212: PPUSH
4213: LD_EXP 37
4217: PPUSH
4218: CALL_OW 12
4222: PPUSH
4223: CALL_OW 380
// un = CreateHuman ;
4227: LD_ADDR_VAR 0 3
4231: PUSH
4232: CALL_OW 44
4236: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: LD_INT 4
4244: PPUSH
4245: LD_INT 0
4247: PPUSH
4248: CALL_OW 49
// end ;
4252: GO 4167
4254: POP
4255: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: DOUBLE
4262: LD_INT 1
4264: DEC
4265: ST_TO_ADDR
4266: LD_INT 3
4268: PUSH
4269: LD_INT 4
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: PUSH
4280: LD_OWVAR 67
4284: ARRAY
4285: PUSH
4286: FOR_TO
4287: IFFALSE 4373
// begin uc_side = 2 ;
4289: LD_ADDR_OWVAR 20
4293: PUSH
4294: LD_INT 2
4296: ST_TO_ADDR
// uc_nation = 2 ;
4297: LD_ADDR_OWVAR 21
4301: PUSH
4302: LD_INT 2
4304: ST_TO_ADDR
// hc_gallery =  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name =  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 4
4326: PPUSH
4327: LD_EXP 36
4331: PPUSH
4332: LD_EXP 37
4336: PPUSH
4337: CALL_OW 12
4341: PPUSH
4342: CALL_OW 380
// un = CreateHuman ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: CALL_OW 44
4355: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4356: LD_VAR 0 3
4360: PPUSH
4361: LD_INT 4
4363: PPUSH
4364: LD_INT 0
4366: PPUSH
4367: CALL_OW 49
// end ;
4371: GO 4286
4373: POP
4374: POP
// for i = 1 to 2 do
4375: LD_ADDR_VAR 0 2
4379: PUSH
4380: DOUBLE
4381: LD_INT 1
4383: DEC
4384: ST_TO_ADDR
4385: LD_INT 2
4387: PUSH
4388: FOR_TO
4389: IFFALSE 4519
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4391: LD_ADDR_VAR 0 4
4395: PUSH
4396: LD_INT 22
4398: PUSH
4399: LD_INT 2
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 21
4408: PUSH
4409: LD_INT 2
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 58
4418: PUSH
4419: EMPTY
4420: LIST
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 69
4431: ST_TO_ADDR
// uc_side = 2 ;
4432: LD_ADDR_OWVAR 20
4436: PUSH
4437: LD_INT 2
4439: ST_TO_ADDR
// uc_nation = 2 ;
4440: LD_ADDR_OWVAR 21
4444: PUSH
4445: LD_INT 2
4447: ST_TO_ADDR
// hc_gallery =  ;
4448: LD_ADDR_OWVAR 33
4452: PUSH
4453: LD_STRING 
4455: ST_TO_ADDR
// hc_name =  ;
4456: LD_ADDR_OWVAR 26
4460: PUSH
4461: LD_STRING 
4463: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4464: LD_INT 0
4466: PPUSH
4467: LD_INT 3
4469: PPUSH
4470: LD_EXP 36
4474: PPUSH
4475: LD_EXP 37
4479: PPUSH
4480: CALL_OW 12
4484: PPUSH
4485: CALL_OW 380
// un = CreateHuman ;
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: CALL_OW 44
4498: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_VAR 0 4
4508: PUSH
4509: LD_INT 1
4511: ARRAY
4512: PPUSH
4513: CALL_OW 52
// end ;
4517: GO 4388
4519: POP
4520: POP
// end ;
4521: LD_VAR 0 1
4525: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4526: LD_INT 0
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
4532: PPUSH
4533: PPUSH
// for i := 1 to 2 do
4534: LD_ADDR_VAR 0 2
4538: PUSH
4539: DOUBLE
4540: LD_INT 1
4542: DEC
4543: ST_TO_ADDR
4544: LD_INT 2
4546: PUSH
4547: FOR_TO
4548: IFFALSE 4674
// begin uc_side = 5 ;
4550: LD_ADDR_OWVAR 20
4554: PUSH
4555: LD_INT 5
4557: ST_TO_ADDR
// uc_nation = 2 ;
4558: LD_ADDR_OWVAR 21
4562: PUSH
4563: LD_INT 2
4565: ST_TO_ADDR
// vc_chassis := 31 ;
4566: LD_ADDR_OWVAR 37
4570: PUSH
4571: LD_INT 31
4573: ST_TO_ADDR
// vc_control := control_rider ;
4574: LD_ADDR_OWVAR 38
4578: PUSH
4579: LD_INT 4
4581: ST_TO_ADDR
// animal := CreateVehicle ;
4582: LD_ADDR_VAR 0 3
4586: PUSH
4587: CALL_OW 45
4591: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4592: LD_VAR 0 3
4596: PPUSH
4597: LD_INT 7
4599: PPUSH
4600: LD_INT 0
4602: PPUSH
4603: CALL_OW 49
// hc_gallery =  ;
4607: LD_ADDR_OWVAR 33
4611: PUSH
4612: LD_STRING 
4614: ST_TO_ADDR
// hc_name =  ;
4615: LD_ADDR_OWVAR 26
4619: PUSH
4620: LD_STRING 
4622: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4623: LD_INT 0
4625: PPUSH
4626: LD_INT 11
4628: PPUSH
4629: LD_EXP 36
4633: PPUSH
4634: LD_EXP 37
4638: PPUSH
4639: CALL_OW 12
4643: PPUSH
4644: CALL_OW 380
// un = CreateHuman ;
4648: LD_ADDR_VAR 0 4
4652: PUSH
4653: CALL_OW 44
4657: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4658: LD_VAR 0 4
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 52
// end ;
4672: GO 4547
4674: POP
4675: POP
// repeat wait ( 0 0$1 ) ;
4676: LD_INT 35
4678: PPUSH
4679: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4683: LD_ADDR_VAR 0 5
4687: PUSH
4688: LD_INT 22
4690: PUSH
4691: LD_INT 1
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PPUSH
4698: CALL_OW 69
4702: PPUSH
4703: LD_VAR 0 2
4707: PPUSH
4708: CALL_OW 74
4712: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4713: LD_ADDR_VAR 0 6
4717: PUSH
4718: LD_INT 22
4720: PUSH
4721: LD_INT 1
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 59
4733: PUSH
4734: EMPTY
4735: LIST
4736: PUSH
4737: LD_INT 21
4739: PUSH
4740: LD_INT 1
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 21
4749: PUSH
4750: LD_INT 2
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: PPUSH
4770: CALL_OW 69
4774: PPUSH
4775: LD_VAR 0 2
4779: PPUSH
4780: CALL_OW 74
4784: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4785: LD_ADDR_VAR 0 2
4789: PUSH
4790: LD_INT 22
4792: PUSH
4793: LD_INT 5
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 25
4802: PUSH
4803: LD_INT 11
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PPUSH
4814: CALL_OW 69
4818: PUSH
4819: FOR_IN
4820: IFFALSE 4890
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4822: LD_VAR 0 2
4826: PPUSH
4827: LD_VAR 0 5
4831: PPUSH
4832: CALL_OW 296
4836: PUSH
4837: LD_INT 8
4839: PLUS
4840: PUSH
4841: LD_VAR 0 2
4845: PPUSH
4846: LD_VAR 0 6
4850: PPUSH
4851: CALL_OW 296
4855: LESS
4856: IFFALSE 4874
// ComAttackUnit ( i , target1 ) else
4858: LD_VAR 0 2
4862: PPUSH
4863: LD_VAR 0 5
4867: PPUSH
4868: CALL_OW 115
4872: GO 4888
// ComAttackUnit ( i , target2 ) ;
4874: LD_VAR 0 2
4878: PPUSH
4879: LD_VAR 0 6
4883: PPUSH
4884: CALL_OW 115
// end ;
4888: GO 4819
4890: POP
4891: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4892: LD_INT 22
4894: PUSH
4895: LD_INT 5
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: LD_INT 25
4904: PUSH
4905: LD_INT 11
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PPUSH
4916: CALL_OW 69
4920: PUSH
4921: LD_INT 0
4923: EQUAL
4924: PUSH
4925: LD_INT 22
4927: PUSH
4928: LD_INT 1
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PPUSH
4935: CALL_OW 69
4939: PUSH
4940: LD_INT 0
4942: EQUAL
4943: OR
4944: IFFALSE 4676
// end ; end_of_file
4946: LD_VAR 0 1
4950: RET
// every 1 do
4951: GO 4953
4953: DISABLE
// begin Video ( true ) ;
4954: LD_INT 1
4956: PPUSH
4957: CALL 10868 0 1
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4961: LD_INT 1
4963: PPUSH
4964: LD_INT 19
4966: PPUSH
4967: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4971: LD_EXP 11
4975: PPUSH
4976: CALL_OW 87
// wait ( 0 0$3 ) ;
4980: LD_INT 105
4982: PPUSH
4983: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4987: LD_EXP 1
4991: PPUSH
4992: CALL_OW 310
4996: PPUSH
4997: CALL_OW 85
// Wait ( 0 0$1 ) ;
5001: LD_INT 35
5003: PPUSH
5004: CALL_OW 67
// if IsOk ( Gary ) then
5008: LD_EXP 10
5012: PPUSH
5013: CALL_OW 302
5017: IFFALSE 5055
// begin Say ( Gary , D2-Gary-1 ) ;
5019: LD_EXP 10
5023: PPUSH
5024: LD_STRING D2-Gary-1
5026: PPUSH
5027: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5031: LD_EXP 1
5035: PPUSH
5036: LD_STRING D2-JMM-1
5038: PPUSH
5039: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5043: LD_EXP 10
5047: PPUSH
5048: LD_STRING D2-Gary-2
5050: PPUSH
5051: CALL_OW 88
// end ; Video ( false ) ;
5055: LD_INT 0
5057: PPUSH
5058: CALL 10868 0 1
// ChangeMissionObjectives ( M1 ) ;
5062: LD_STRING M1
5064: PPUSH
5065: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5069: LD_INT 38
5071: PPUSH
5072: LD_INT 1
5074: PPUSH
5075: LD_INT 100
5077: PPUSH
5078: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5082: LD_INT 47
5084: PPUSH
5085: LD_INT 1
5087: PPUSH
5088: LD_INT 50
5090: PPUSH
5091: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5095: LD_INT 47
5097: PPUSH
5098: LD_INT 3
5100: PPUSH
5101: LD_INT 50
5103: PPUSH
5104: CALL_OW 291
// SaveForQuickRestart ;
5108: CALL_OW 22
// end ;
5112: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5113: LD_EXP 1
5117: PPUSH
5118: LD_EXP 11
5122: PPUSH
5123: CALL_OW 296
5127: PUSH
5128: LD_INT 15
5130: LESS
5131: IFFALSE 5715
5133: GO 5135
5135: DISABLE
5136: LD_INT 0
5138: PPUSH
// begin wait ( 0 0$3 ) ;
5139: LD_INT 105
5141: PPUSH
5142: CALL_OW 67
// Video ( true ) ;
5146: LD_INT 1
5148: PPUSH
5149: CALL 10868 0 1
// ComExitVehicle ( JMM ) ;
5153: LD_EXP 1
5157: PPUSH
5158: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5162: LD_EXP 1
5166: PPUSH
5167: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5171: LD_EXP 1
5175: PPUSH
5176: LD_EXP 11
5180: PPUSH
5181: CALL_OW 179
// p := 15 ;
5185: LD_ADDR_VAR 0 1
5189: PUSH
5190: LD_INT 15
5192: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5193: LD_INT 35
5195: PPUSH
5196: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5200: LD_EXP 11
5204: PUSH
5205: LD_EXP 13
5209: PUSH
5210: LD_EXP 12
5214: PUSH
5215: LD_EXP 14
5219: PUSH
5220: LD_EXP 8
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: LIST
5229: LIST
5230: LIST
5231: PPUSH
5232: LD_EXP 1
5236: PPUSH
5237: CALL_OW 112
// p := p - 1 ;
5241: LD_ADDR_VAR 0 1
5245: PUSH
5246: LD_VAR 0 1
5250: PUSH
5251: LD_INT 1
5253: MINUS
5254: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5255: LD_EXP 1
5259: PPUSH
5260: LD_EXP 11
5264: PPUSH
5265: CALL_OW 296
5269: PUSH
5270: LD_INT 5
5272: LESS
5273: PUSH
5274: LD_VAR 0 1
5278: PUSH
5279: LD_INT 0
5281: LESSEQUAL
5282: OR
5283: IFFALSE 5193
// if not IsInUnit ( JMM ) then
5285: LD_EXP 1
5289: PPUSH
5290: CALL_OW 310
5294: NOT
5295: IFFALSE 5311
// ComTurnUnit ( JMM , Simms ) ;
5297: LD_EXP 1
5301: PPUSH
5302: LD_EXP 11
5306: PPUSH
5307: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5311: LD_EXP 11
5315: PUSH
5316: LD_EXP 13
5320: PUSH
5321: LD_EXP 12
5325: PUSH
5326: LD_EXP 14
5330: PUSH
5331: EMPTY
5332: LIST
5333: LIST
5334: LIST
5335: LIST
5336: PPUSH
5337: LD_EXP 1
5341: PPUSH
5342: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5346: LD_EXP 1
5350: PUSH
5351: LD_EXP 11
5355: PUSH
5356: EMPTY
5357: LIST
5358: LIST
5359: PPUSH
5360: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5364: LD_EXP 11
5368: PPUSH
5369: LD_STRING D2a-Sim-1
5371: PPUSH
5372: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5376: LD_EXP 1
5380: PPUSH
5381: LD_STRING D2a-JMM-1
5383: PPUSH
5384: CALL_OW 88
// if IsOk ( Joan ) then
5388: LD_EXP 13
5392: PPUSH
5393: CALL_OW 302
5397: IFFALSE 5461
// begin if not IsInUnit ( JMM ) then
5399: LD_EXP 1
5403: PPUSH
5404: CALL_OW 310
5408: NOT
5409: IFFALSE 5425
// ComTurnUnit ( JMM , Joan ) ;
5411: LD_EXP 1
5415: PPUSH
5416: LD_EXP 13
5420: PPUSH
5421: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5425: LD_EXP 13
5429: PPUSH
5430: LD_STRING D2b-Joan-1
5432: PPUSH
5433: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5437: LD_EXP 1
5441: PPUSH
5442: LD_STRING D2b-JMM-1
5444: PPUSH
5445: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5449: LD_EXP 13
5453: PPUSH
5454: LD_STRING D2b-Joan-2
5456: PPUSH
5457: CALL_OW 88
// end ; if IsOk ( Denis ) then
5461: LD_EXP 12
5465: PPUSH
5466: CALL_OW 302
5470: IFFALSE 5510
// begin if not IsInUnit ( JMM ) then
5472: LD_EXP 1
5476: PPUSH
5477: CALL_OW 310
5481: NOT
5482: IFFALSE 5498
// ComTurnUnit ( JMM , Denis ) ;
5484: LD_EXP 1
5488: PPUSH
5489: LD_EXP 12
5493: PPUSH
5494: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5498: LD_EXP 12
5502: PPUSH
5503: LD_STRING D2c-Den-1
5505: PPUSH
5506: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5510: LD_EXP 8
5514: PPUSH
5515: CALL_OW 302
5519: PUSH
5520: LD_STRING 08_Kikuchi
5522: PPUSH
5523: CALL_OW 28
5527: NOT
5528: AND
5529: IFFALSE 5610
// begin repeat wait ( 0 0$1 ) ;
5531: LD_INT 35
5533: PPUSH
5534: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5538: LD_EXP 8
5542: PPUSH
5543: LD_EXP 1
5547: PPUSH
5548: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5552: LD_EXP 1
5556: PPUSH
5557: LD_EXP 8
5561: PPUSH
5562: CALL_OW 296
5566: PUSH
5567: LD_INT 5
5569: LESS
5570: IFFALSE 5531
// if not IsInUnit ( JMM ) then
5572: LD_EXP 1
5576: PPUSH
5577: CALL_OW 310
5581: NOT
5582: IFFALSE 5598
// ComTurnUnit ( JMM , Kikuchi ) ;
5584: LD_EXP 1
5588: PPUSH
5589: LD_EXP 8
5593: PPUSH
5594: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5598: LD_EXP 8
5602: PPUSH
5603: LD_STRING D3b-Yam-1
5605: PPUSH
5606: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5610: LD_EXP 14
5614: PPUSH
5615: CALL_OW 302
5619: IFFALSE 5671
// begin if not IsInUnit ( JMM ) then
5621: LD_EXP 1
5625: PPUSH
5626: CALL_OW 310
5630: NOT
5631: IFFALSE 5647
// ComTurnUnit ( JMM , Khatam ) ;
5633: LD_EXP 1
5637: PPUSH
5638: LD_EXP 14
5642: PPUSH
5643: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5647: LD_EXP 1
5651: PPUSH
5652: LD_STRING D2c-JMM-1
5654: PPUSH
5655: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5659: LD_EXP 14
5663: PPUSH
5664: LD_STRING D2c-Khat-1
5666: PPUSH
5667: CALL_OW 88
// end ; Video ( false ) ;
5671: LD_INT 0
5673: PPUSH
5674: CALL 10868 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5678: LD_INT 22
5680: PUSH
5681: LD_INT 4
5683: PUSH
5684: EMPTY
5685: LIST
5686: LIST
5687: PPUSH
5688: CALL_OW 69
5692: PPUSH
5693: LD_INT 1
5695: PPUSH
5696: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5700: LD_STRING M1a
5702: PPUSH
5703: CALL_OW 337
// joinEpsilon = 1 ;
5707: LD_ADDR_EXP 29
5711: PUSH
5712: LD_INT 1
5714: ST_TO_ADDR
// end ;
5715: PPOPN 1
5717: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
5718: LD_INT 38
5720: PPUSH
5721: LD_INT 1
5723: PPUSH
5724: CALL_OW 289
5728: PUSH
5729: LD_INT 0
5731: EQUAL
5732: PUSH
5733: LD_INT 47
5735: PPUSH
5736: LD_INT 1
5738: PPUSH
5739: CALL_OW 289
5743: PUSH
5744: LD_INT 0
5746: EQUAL
5747: AND
5748: PUSH
5749: LD_INT 47
5751: PPUSH
5752: LD_INT 2
5754: PPUSH
5755: CALL_OW 289
5759: PUSH
5760: LD_INT 0
5762: EQUAL
5763: AND
5764: IFFALSE 5889
5766: GO 5768
5768: DISABLE
5769: LD_INT 0
5771: PPUSH
// begin p := 0 ;
5772: LD_ADDR_VAR 0 1
5776: PUSH
5777: LD_INT 0
5779: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
5780: LD_INT 38
5782: PUSH
5783: LD_INT 47
5785: PUSH
5786: EMPTY
5787: LIST
5788: LIST
5789: PPUSH
5790: LD_INT 56
5792: PPUSH
5793: LD_INT 0
5795: PPUSH
5796: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5800: LD_INT 35
5802: PPUSH
5803: CALL_OW 67
// p := p + 1 ;
5807: LD_ADDR_VAR 0 1
5811: PUSH
5812: LD_VAR 0 1
5816: PUSH
5817: LD_INT 1
5819: PLUS
5820: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
5821: LD_INT 38
5823: PUSH
5824: LD_INT 47
5826: PUSH
5827: EMPTY
5828: LIST
5829: LIST
5830: PPUSH
5831: LD_INT 56
5833: PPUSH
5834: LD_INT 0
5836: PPUSH
5837: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
5841: LD_INT 38
5843: PPUSH
5844: LD_INT 27
5846: PPUSH
5847: CALL_OW 308
5851: IFFALSE 5860
// RemoveUnit ( cargo1 ) ;
5853: LD_INT 38
5855: PPUSH
5856: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
5860: LD_INT 47
5862: PPUSH
5863: LD_INT 27
5865: PPUSH
5866: CALL_OW 308
5870: IFFALSE 5879
// RemoveUnit ( cargo2 ) ;
5872: LD_INT 47
5874: PPUSH
5875: CALL_OW 64
// until p > 30 ;
5879: LD_VAR 0 1
5883: PUSH
5884: LD_INT 30
5886: GREATER
5887: IFFALSE 5800
// end ;
5889: PPOPN 1
5891: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5892: LD_EXP 63
5896: PUSH
5897: LD_INT 1
5899: EQUAL
5900: IFFALSE 7032
5902: GO 5904
5904: DISABLE
5905: LD_INT 0
5907: PPUSH
5908: PPUSH
5909: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5910: LD_ADDR_VAR 0 1
5914: PUSH
5915: LD_INT 22
5917: PUSH
5918: LD_INT 1
5920: PUSH
5921: EMPTY
5922: LIST
5923: LIST
5924: PUSH
5925: LD_INT 25
5927: PUSH
5928: LD_INT 4
5930: PUSH
5931: EMPTY
5932: LIST
5933: LIST
5934: PUSH
5935: LD_INT 26
5937: PUSH
5938: LD_INT 1
5940: PUSH
5941: EMPTY
5942: LIST
5943: LIST
5944: PUSH
5945: EMPTY
5946: LIST
5947: LIST
5948: LIST
5949: PPUSH
5950: CALL_OW 69
5954: PUSH
5955: LD_EXP 1
5959: PUSH
5960: LD_EXP 2
5964: PUSH
5965: LD_EXP 3
5969: PUSH
5970: LD_EXP 4
5974: PUSH
5975: LD_EXP 5
5979: PUSH
5980: LD_EXP 6
5984: PUSH
5985: LD_EXP 7
5989: PUSH
5990: LD_EXP 8
5994: PUSH
5995: LD_EXP 9
5999: PUSH
6000: LD_EXP 10
6004: PUSH
6005: LD_EXP 11
6009: PUSH
6010: LD_EXP 12
6014: PUSH
6015: LD_EXP 13
6019: PUSH
6020: LD_EXP 14
6024: PUSH
6025: LD_EXP 15
6029: PUSH
6030: LD_EXP 16
6034: PUSH
6035: LD_EXP 17
6039: PUSH
6040: LD_EXP 18
6044: PUSH
6045: LD_EXP 19
6049: PUSH
6050: LD_EXP 24
6054: PUSH
6055: EMPTY
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: LIST
6067: LIST
6068: LIST
6069: LIST
6070: LIST
6071: LIST
6072: LIST
6073: LIST
6074: LIST
6075: LIST
6076: DIFF
6077: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6078: LD_ADDR_VAR 0 2
6082: PUSH
6083: LD_INT 22
6085: PUSH
6086: LD_INT 1
6088: PUSH
6089: EMPTY
6090: LIST
6091: LIST
6092: PUSH
6093: LD_INT 26
6095: PUSH
6096: LD_INT 1
6098: PUSH
6099: EMPTY
6100: LIST
6101: LIST
6102: PUSH
6103: LD_INT 2
6105: PUSH
6106: LD_INT 25
6108: PUSH
6109: LD_INT 1
6111: PUSH
6112: EMPTY
6113: LIST
6114: LIST
6115: PUSH
6116: LD_INT 25
6118: PUSH
6119: LD_INT 2
6121: PUSH
6122: EMPTY
6123: LIST
6124: LIST
6125: PUSH
6126: LD_INT 25
6128: PUSH
6129: LD_INT 3
6131: PUSH
6132: EMPTY
6133: LIST
6134: LIST
6135: PUSH
6136: EMPTY
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: LIST
6146: PPUSH
6147: CALL_OW 69
6151: PUSH
6152: LD_EXP 1
6156: PUSH
6157: LD_EXP 2
6161: PUSH
6162: LD_EXP 3
6166: PUSH
6167: LD_EXP 4
6171: PUSH
6172: LD_EXP 5
6176: PUSH
6177: LD_EXP 6
6181: PUSH
6182: LD_EXP 7
6186: PUSH
6187: LD_EXP 8
6191: PUSH
6192: LD_EXP 9
6196: PUSH
6197: LD_EXP 10
6201: PUSH
6202: LD_EXP 11
6206: PUSH
6207: LD_EXP 12
6211: PUSH
6212: LD_EXP 13
6216: PUSH
6217: LD_EXP 14
6221: PUSH
6222: LD_EXP 15
6226: PUSH
6227: LD_EXP 16
6231: PUSH
6232: LD_EXP 17
6236: PUSH
6237: LD_EXP 18
6241: PUSH
6242: LD_EXP 19
6246: PUSH
6247: LD_EXP 24
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: LIST
6266: LIST
6267: LIST
6268: LIST
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: DIFF
6274: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6275: LD_EXP 10
6279: PUSH
6280: LD_VAR 0 2
6284: OR
6285: PUSH
6286: LD_EXP 17
6290: PUSH
6291: LD_VAR 0 1
6295: OR
6296: AND
6297: IFFALSE 6516
// begin DialogueOn ;
6299: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6303: LD_EXP 17
6307: PPUSH
6308: CALL_OW 302
6312: IFFALSE 6328
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6314: LD_EXP 17
6318: PPUSH
6319: LD_STRING D3-Sci1-1
6321: PPUSH
6322: CALL_OW 88
6326: GO 6340
// Say ( tmp1 , D3-Sci1-1 ) ;
6328: LD_VAR 0 1
6332: PPUSH
6333: LD_STRING D3-Sci1-1
6335: PPUSH
6336: CALL_OW 88
// if IsOk ( Gary ) then
6340: LD_EXP 10
6344: PPUSH
6345: CALL_OW 302
6349: IFFALSE 6365
// Say ( Gary , D3-Gary-1 ) else
6351: LD_EXP 10
6355: PPUSH
6356: LD_STRING D3-Gary-1
6358: PPUSH
6359: CALL_OW 88
6363: GO 6377
// Say ( tmp2 , D3-Gary-1 ) ;
6365: LD_VAR 0 2
6369: PPUSH
6370: LD_STRING D3-Gary-1
6372: PPUSH
6373: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6377: LD_EXP 17
6381: PPUSH
6382: CALL_OW 302
6386: IFFALSE 6402
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6388: LD_EXP 17
6392: PPUSH
6393: LD_STRING D3-Sci1-2
6395: PPUSH
6396: CALL_OW 88
6400: GO 6414
// Say ( tmp1 , D3-Sci1-2 ) ;
6402: LD_VAR 0 1
6406: PPUSH
6407: LD_STRING D3-Sci1-2
6409: PPUSH
6410: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6414: LD_EXP 1
6418: PPUSH
6419: LD_STRING D3-JMM-2
6421: PPUSH
6422: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6426: LD_EXP 17
6430: PPUSH
6431: CALL_OW 302
6435: IFFALSE 6451
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6437: LD_EXP 17
6441: PPUSH
6442: LD_STRING D3-Sci1-3
6444: PPUSH
6445: CALL_OW 88
6449: GO 6463
// Say ( tmp1 , D3-Sci1-3 ) ;
6451: LD_VAR 0 1
6455: PPUSH
6456: LD_STRING D3-Sci1-3
6458: PPUSH
6459: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6463: LD_EXP 1
6467: PPUSH
6468: LD_STRING D3-JMM-3
6470: PPUSH
6471: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6475: LD_EXP 17
6479: PPUSH
6480: CALL_OW 302
6484: IFFALSE 6500
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6486: LD_EXP 17
6490: PPUSH
6491: LD_STRING D3-Sci1-4
6493: PPUSH
6494: CALL_OW 88
6498: GO 6512
// Say ( tmp1 , D3-Sci1-4 ) ;
6500: LD_VAR 0 1
6504: PPUSH
6505: LD_STRING D3-Sci1-4
6507: PPUSH
6508: CALL_OW 88
// DialogueOff ;
6512: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6516: LD_INT 12
6518: PPUSH
6519: LD_INT 1
6521: PPUSH
6522: LD_INT 1
6524: PPUSH
6525: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6529: LD_INT 32
6531: PPUSH
6532: LD_INT 1
6534: PPUSH
6535: LD_INT 1
6537: PPUSH
6538: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6542: LD_INT 12
6544: PPUSH
6545: LD_INT 1
6547: PPUSH
6548: LD_INT 1
6550: PPUSH
6551: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6555: LD_INT 33
6557: PPUSH
6558: LD_INT 1
6560: PPUSH
6561: LD_INT 1
6563: PPUSH
6564: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6568: LD_STRING M2
6570: PPUSH
6571: CALL_OW 337
// wait ( 3 3$0 ) ;
6575: LD_INT 6300
6577: PPUSH
6578: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6582: LD_INT 35
6584: PPUSH
6585: CALL_OW 67
// until not InBattle ( 1 ) ;
6589: LD_INT 1
6591: PPUSH
6592: CALL_OW 463
6596: NOT
6597: IFFALSE 6582
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6599: LD_EXP 11
6603: PPUSH
6604: CALL_OW 302
6608: PUSH
6609: LD_EXP 17
6613: PPUSH
6614: CALL_OW 302
6618: AND
6619: IFFALSE 6788
// begin DialogueOn ;
6621: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6625: LD_EXP 11
6629: PPUSH
6630: LD_STRING D3a-Sim-1
6632: PPUSH
6633: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6637: LD_EXP 17
6641: PPUSH
6642: LD_STRING D3a-Sci1-1
6644: PPUSH
6645: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6649: LD_EXP 11
6653: PPUSH
6654: LD_STRING D3a-Sim-2
6656: PPUSH
6657: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6661: LD_EXP 17
6665: PPUSH
6666: LD_STRING D3a-Sci1-2
6668: PPUSH
6669: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6673: LD_EXP 11
6677: PPUSH
6678: LD_STRING D3a-Sim-3
6680: PPUSH
6681: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6685: LD_EXP 17
6689: PPUSH
6690: LD_STRING D3a-Sci1-3
6692: PPUSH
6693: CALL_OW 88
// if IsOK ( Joan ) then
6697: LD_EXP 13
6701: PPUSH
6702: CALL_OW 302
6706: IFFALSE 6722
// Say ( Simms , D3a-Sim-4 ) else
6708: LD_EXP 11
6712: PPUSH
6713: LD_STRING D3a-Sim-4
6715: PPUSH
6716: CALL_OW 88
6720: GO 6734
// Say ( Simms , D3a-Sim-4a ) ;
6722: LD_EXP 11
6726: PPUSH
6727: LD_STRING D3a-Sim-4a
6729: PPUSH
6730: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
6734: LD_EXP 17
6738: PPUSH
6739: LD_STRING D3a-Sci1-4
6741: PPUSH
6742: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6746: LD_EXP 11
6750: PPUSH
6751: LD_STRING D3a-Sim-5
6753: PPUSH
6754: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
6758: LD_EXP 17
6762: PPUSH
6763: LD_STRING D3a-Sci1-5
6765: PPUSH
6766: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6770: LD_EXP 11
6774: PPUSH
6775: LD_STRING D3a-Sim-6
6777: PPUSH
6778: CALL_OW 88
// DialogueOff ;
6782: CALL_OW 7
// end else
6786: GO 7032
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
6788: LD_ADDR_VAR 0 3
6792: PUSH
6793: LD_INT 22
6795: PUSH
6796: LD_INT 1
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PUSH
6803: LD_INT 25
6805: PUSH
6806: LD_INT 4
6808: PUSH
6809: EMPTY
6810: LIST
6811: LIST
6812: PUSH
6813: EMPTY
6814: LIST
6815: LIST
6816: PPUSH
6817: CALL_OW 69
6821: PUSH
6822: LD_EXP 11
6826: PUSH
6827: LD_EXP 14
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: DIFF
6836: ST_TO_ADDR
// if tmp3 > 0 then
6837: LD_VAR 0 3
6841: PUSH
6842: LD_INT 0
6844: GREATER
6845: IFFALSE 7032
// begin DialogueOn ;
6847: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6851: LD_EXP 11
6855: PPUSH
6856: LD_STRING D3a-Sim-1
6858: PPUSH
6859: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6863: LD_VAR 0 3
6867: PUSH
6868: LD_INT 1
6870: ARRAY
6871: PPUSH
6872: LD_STRING D3a-Sci1-1
6874: PPUSH
6875: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6879: LD_EXP 11
6883: PPUSH
6884: LD_STRING D3a-Sim-2
6886: PPUSH
6887: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6891: LD_VAR 0 3
6895: PUSH
6896: LD_INT 1
6898: ARRAY
6899: PPUSH
6900: LD_STRING D3a-Sci1-2
6902: PPUSH
6903: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6907: LD_EXP 11
6911: PPUSH
6912: LD_STRING D3a-Sim-3
6914: PPUSH
6915: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6919: LD_VAR 0 3
6923: PUSH
6924: LD_INT 1
6926: ARRAY
6927: PPUSH
6928: LD_STRING D3a-Sci1-3
6930: PPUSH
6931: CALL_OW 88
// if IsOK ( Joan ) then
6935: LD_EXP 13
6939: PPUSH
6940: CALL_OW 302
6944: IFFALSE 6960
// Say ( Simms , D3a-Sim-4 ) else
6946: LD_EXP 11
6950: PPUSH
6951: LD_STRING D3a-Sim-4
6953: PPUSH
6954: CALL_OW 88
6958: GO 6972
// Say ( Simms , D3a-Sim-4a ) ;
6960: LD_EXP 11
6964: PPUSH
6965: LD_STRING D3a-Sim-4a
6967: PPUSH
6968: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6972: LD_VAR 0 3
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: PPUSH
6981: LD_STRING D3a-Sci1-4
6983: PPUSH
6984: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6988: LD_EXP 11
6992: PPUSH
6993: LD_STRING D3a-Sim-5
6995: PPUSH
6996: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7000: LD_VAR 0 3
7004: PUSH
7005: LD_INT 1
7007: ARRAY
7008: PPUSH
7009: LD_STRING D3a-Sci1-5
7011: PPUSH
7012: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7016: LD_EXP 11
7020: PPUSH
7021: LD_STRING D3a-Sim-6
7023: PPUSH
7024: CALL_OW 88
// DialogueOff ;
7028: CALL_OW 7
// end ; end ; end ;
7032: PPOPN 3
7034: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
7035: LD_EXP 29
7039: PUSH
7040: LD_INT 1
7042: EQUAL
7043: IFFALSE 7363
7045: GO 7047
7047: DISABLE
7048: LD_INT 0
7050: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
7051: LD_EXP 18
7055: PPUSH
7056: LD_STRING D4-FSol1-1
7058: PPUSH
7059: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7063: LD_STRING M3
7065: PPUSH
7066: CALL_OW 337
// PrepareRussians ;
7070: CALL 3440 0 0
// rnd = Rand ( 1 , 100 ) ;
7074: LD_ADDR_VAR 0 1
7078: PUSH
7079: LD_INT 1
7081: PPUSH
7082: LD_INT 100
7084: PPUSH
7085: CALL_OW 12
7089: ST_TO_ADDR
// if difficulty = 1 then
7090: LD_OWVAR 67
7094: PUSH
7095: LD_INT 1
7097: EQUAL
7098: IFFALSE 7181
// begin if rnd > 0 and rnd < 51 then
7100: LD_VAR 0 1
7104: PUSH
7105: LD_INT 0
7107: GREATER
7108: PUSH
7109: LD_VAR 0 1
7113: PUSH
7114: LD_INT 51
7116: LESS
7117: AND
7118: IFFALSE 7127
// BuildRussianBase ( 2 ) ;
7120: LD_INT 2
7122: PPUSH
7123: CALL 11554 0 1
// if rnd > 50 and rnd < 81 then
7127: LD_VAR 0 1
7131: PUSH
7132: LD_INT 50
7134: GREATER
7135: PUSH
7136: LD_VAR 0 1
7140: PUSH
7141: LD_INT 81
7143: LESS
7144: AND
7145: IFFALSE 7154
// BuildRussianBase ( 1 ) ;
7147: LD_INT 1
7149: PPUSH
7150: CALL 11554 0 1
// if rnd > 80 and rnd < 101 then
7154: LD_VAR 0 1
7158: PUSH
7159: LD_INT 80
7161: GREATER
7162: PUSH
7163: LD_VAR 0 1
7167: PUSH
7168: LD_INT 101
7170: LESS
7171: AND
7172: IFFALSE 7181
// BuildRussianBase ( 3 ) ;
7174: LD_INT 3
7176: PPUSH
7177: CALL 11554 0 1
// end ; if difficulty = 2 then
7181: LD_OWVAR 67
7185: PUSH
7186: LD_INT 2
7188: EQUAL
7189: IFFALSE 7272
// begin if rnd > 0 and rnd < 61 then
7191: LD_VAR 0 1
7195: PUSH
7196: LD_INT 0
7198: GREATER
7199: PUSH
7200: LD_VAR 0 1
7204: PUSH
7205: LD_INT 61
7207: LESS
7208: AND
7209: IFFALSE 7218
// BuildRussianBase ( 2 ) ;
7211: LD_INT 2
7213: PPUSH
7214: CALL 11554 0 1
// if rnd > 60 and rnd < 81 then
7218: LD_VAR 0 1
7222: PUSH
7223: LD_INT 60
7225: GREATER
7226: PUSH
7227: LD_VAR 0 1
7231: PUSH
7232: LD_INT 81
7234: LESS
7235: AND
7236: IFFALSE 7245
// BuildRussianBase ( 1 ) ;
7238: LD_INT 1
7240: PPUSH
7241: CALL 11554 0 1
// if rnd > 80 and rnd < 101 then
7245: LD_VAR 0 1
7249: PUSH
7250: LD_INT 80
7252: GREATER
7253: PUSH
7254: LD_VAR 0 1
7258: PUSH
7259: LD_INT 101
7261: LESS
7262: AND
7263: IFFALSE 7272
// BuildRussianBase ( 3 ) ;
7265: LD_INT 3
7267: PPUSH
7268: CALL 11554 0 1
// end ; if difficulty = 3 then
7272: LD_OWVAR 67
7276: PUSH
7277: LD_INT 3
7279: EQUAL
7280: IFFALSE 7363
// begin if rnd > 0 and rnd < 71 then
7282: LD_VAR 0 1
7286: PUSH
7287: LD_INT 0
7289: GREATER
7290: PUSH
7291: LD_VAR 0 1
7295: PUSH
7296: LD_INT 71
7298: LESS
7299: AND
7300: IFFALSE 7309
// BuildRussianBase ( 3 ) ;
7302: LD_INT 3
7304: PPUSH
7305: CALL 11554 0 1
// if rnd > 70 and rnd < 81 then
7309: LD_VAR 0 1
7313: PUSH
7314: LD_INT 70
7316: GREATER
7317: PUSH
7318: LD_VAR 0 1
7322: PUSH
7323: LD_INT 81
7325: LESS
7326: AND
7327: IFFALSE 7336
// BuildRussianBase ( 2 ) ;
7329: LD_INT 2
7331: PPUSH
7332: CALL 11554 0 1
// if rnd > 80 and rnd < 101 then
7336: LD_VAR 0 1
7340: PUSH
7341: LD_INT 80
7343: GREATER
7344: PUSH
7345: LD_VAR 0 1
7349: PUSH
7350: LD_INT 101
7352: LESS
7353: AND
7354: IFFALSE 7363
// BuildRussianBase ( 1 ) ;
7356: LD_INT 1
7358: PPUSH
7359: CALL 11554 0 1
// end ; end ;
7363: PPOPN 1
7365: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7366: LD_INT 54
7368: PPUSH
7369: LD_INT 1
7371: PPUSH
7372: CALL_OW 321
7376: PUSH
7377: LD_INT 2
7379: EQUAL
7380: PUSH
7381: LD_INT 21
7383: PPUSH
7384: LD_INT 1
7386: PPUSH
7387: CALL_OW 321
7391: PUSH
7392: LD_INT 2
7394: EQUAL
7395: OR
7396: PUSH
7397: LD_INT 22
7399: PPUSH
7400: LD_INT 1
7402: PPUSH
7403: CALL_OW 321
7407: PUSH
7408: LD_INT 2
7410: EQUAL
7411: OR
7412: IFFALSE 7714
7414: GO 7416
7416: DISABLE
7417: LD_INT 0
7419: PPUSH
7420: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7421: LD_EXP 17
7425: PPUSH
7426: CALL_OW 302
7430: IFFALSE 7444
// tmp := DeltaDoctor else
7432: LD_ADDR_VAR 0 2
7436: PUSH
7437: LD_EXP 17
7441: ST_TO_ADDR
7442: GO 7454
// tmp := Denis ;
7444: LD_ADDR_VAR 0 2
7448: PUSH
7449: LD_EXP 12
7453: ST_TO_ADDR
// if tmp then
7454: LD_VAR 0 2
7458: IFFALSE 7552
// begin DialogueOn ;
7460: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7464: LD_EXP 1
7468: PPUSH
7469: LD_STRING D6-JMM-1
7471: PPUSH
7472: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7476: LD_VAR 0 2
7480: PPUSH
7481: LD_STRING D6-Sci1-1
7483: PPUSH
7484: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7488: LD_EXP 1
7492: PPUSH
7493: LD_STRING D6-JMM-2
7495: PPUSH
7496: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7500: LD_VAR 0 2
7504: PPUSH
7505: LD_STRING D6-Sci1-2
7507: PPUSH
7508: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7512: LD_EXP 1
7516: PPUSH
7517: LD_STRING D6-JMM-3
7519: PPUSH
7520: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7524: LD_VAR 0 2
7528: PPUSH
7529: LD_STRING D6-Sci1-3
7531: PPUSH
7532: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7536: LD_EXP 1
7540: PPUSH
7541: LD_STRING D6-JMM-4
7543: PPUSH
7544: CALL_OW 88
// DialogueOff ;
7548: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7552: LD_INT 1050
7554: PPUSH
7555: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7559: LD_EXP 49
7563: PUSH
7564: LD_INT 0
7566: EQUAL
7567: PUSH
7568: LD_EXP 14
7572: PPUSH
7573: CALL_OW 302
7577: AND
7578: IFFALSE 7636
// begin DialogueOn ;
7580: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7584: LD_EXP 27
7588: PPUSH
7589: LD_STRING D5-Ar1-1
7591: PPUSH
7592: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7596: LD_EXP 26
7600: PPUSH
7601: LD_STRING D5-Diet-1
7603: PPUSH
7604: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7608: LD_EXP 27
7612: PPUSH
7613: LD_STRING D5-Ar1-2
7615: PPUSH
7616: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7620: LD_EXP 26
7624: PPUSH
7625: LD_STRING D5-Diet-2
7627: PPUSH
7628: CALL_OW 88
// DialogueOff ;
7632: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7636: LD_INT 35
7638: PPUSH
7639: CALL_OW 67
// until tick > 10 10$00 ;
7643: LD_OWVAR 1
7647: PUSH
7648: LD_INT 21000
7650: GREATER
7651: IFFALSE 7636
// wait ( 1 1$30 ) ;
7653: LD_INT 3150
7655: PPUSH
7656: CALL_OW 67
// if arabianTrait = 0 then
7660: LD_EXP 49
7664: PUSH
7665: LD_INT 0
7667: EQUAL
7668: IFFALSE 7714
// begin arabianTrait = 1 ;
7670: LD_ADDR_EXP 49
7674: PUSH
7675: LD_INT 1
7677: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7678: LD_INT 2
7680: PPUSH
7681: LD_INT 3
7683: PPUSH
7684: LD_INT 1
7686: PPUSH
7687: LD_INT 1
7689: PPUSH
7690: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7694: LD_INT 2
7696: PPUSH
7697: LD_INT 6
7699: PPUSH
7700: LD_INT 1
7702: PPUSH
7703: LD_INT 1
7705: PPUSH
7706: CALL_OW 80
// PrepareArabianTrait ;
7710: CALL 7717 0 0
// end ; end ;
7714: PPOPN 2
7716: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
7717: LD_INT 0
7719: PPUSH
7720: PPUSH
7721: PPUSH
7722: PPUSH
7723: PPUSH
7724: PPUSH
7725: PPUSH
7726: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
7727: LD_ADDR_VAR 0 6
7731: PUSH
7732: LD_INT 22
7734: PUSH
7735: LD_INT 2
7737: PUSH
7738: EMPTY
7739: LIST
7740: LIST
7741: PUSH
7742: LD_INT 2
7744: PUSH
7745: LD_INT 25
7747: PUSH
7748: LD_INT 4
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: PUSH
7755: LD_INT 25
7757: PUSH
7758: LD_INT 2
7760: PUSH
7761: EMPTY
7762: LIST
7763: LIST
7764: PUSH
7765: LD_INT 25
7767: PUSH
7768: LD_INT 3
7770: PUSH
7771: EMPTY
7772: LIST
7773: LIST
7774: PUSH
7775: EMPTY
7776: LIST
7777: LIST
7778: LIST
7779: LIST
7780: PUSH
7781: EMPTY
7782: LIST
7783: LIST
7784: PPUSH
7785: CALL_OW 69
7789: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7790: LD_ADDR_VAR 0 5
7794: PUSH
7795: LD_INT 22
7797: PUSH
7798: LD_INT 2
7800: PUSH
7801: EMPTY
7802: LIST
7803: LIST
7804: PUSH
7805: LD_INT 21
7807: PUSH
7808: LD_INT 1
7810: PUSH
7811: EMPTY
7812: LIST
7813: LIST
7814: PUSH
7815: LD_INT 2
7817: PUSH
7818: LD_INT 25
7820: PUSH
7821: LD_INT 1
7823: PUSH
7824: EMPTY
7825: LIST
7826: LIST
7827: PUSH
7828: LD_INT 25
7830: PUSH
7831: LD_INT 8
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: PUSH
7838: LD_INT 25
7840: PUSH
7841: LD_INT 15
7843: PUSH
7844: EMPTY
7845: LIST
7846: LIST
7847: PUSH
7848: EMPTY
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: PUSH
7854: EMPTY
7855: LIST
7856: LIST
7857: LIST
7858: PPUSH
7859: CALL_OW 69
7863: PUSH
7864: LD_EXP 26
7868: PUSH
7869: EMPTY
7870: LIST
7871: DIFF
7872: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
7873: LD_ADDR_VAR 0 7
7877: PUSH
7878: LD_INT 22
7880: PUSH
7881: LD_INT 2
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: PUSH
7888: LD_INT 30
7890: PUSH
7891: LD_INT 5
7893: PUSH
7894: EMPTY
7895: LIST
7896: LIST
7897: PUSH
7898: EMPTY
7899: LIST
7900: LIST
7901: PPUSH
7902: CALL_OW 69
7906: PUSH
7907: LD_INT 1
7909: ARRAY
7910: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
7911: LD_VAR 0 6
7915: PPUSH
7916: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
7920: LD_VAR 0 5
7924: PPUSH
7925: CALL_OW 122
// wait ( 0 0$3 ) ;
7929: LD_INT 105
7931: PPUSH
7932: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
7936: LD_VAR 0 6
7940: PPUSH
7941: LD_VAR 0 7
7945: PPUSH
7946: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
7950: LD_VAR 0 6
7954: PPUSH
7955: LD_INT 1
7957: PUSH
7958: LD_INT 8
7960: PUSH
7961: EMPTY
7962: LIST
7963: LIST
7964: PUSH
7965: LD_INT 1
7967: PPUSH
7968: LD_INT 2
7970: PPUSH
7971: CALL_OW 12
7975: ARRAY
7976: PPUSH
7977: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
7981: LD_VAR 0 6
7985: PPUSH
7986: CALL_OW 182
// wait ( 0 0$1 ) ;
7990: LD_INT 35
7992: PPUSH
7993: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
7997: LD_INT 76
7999: PPUSH
8000: LD_INT 19
8002: PPUSH
8003: CALL_OW 84
// DialogueOn ;
8007: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8011: LD_INT 22
8013: PUSH
8014: LD_INT 1
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 26
8023: PUSH
8024: LD_INT 1
8026: PUSH
8027: EMPTY
8028: LIST
8029: LIST
8030: PUSH
8031: LD_INT 2
8033: PUSH
8034: LD_INT 25
8036: PUSH
8037: LD_INT 1
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_INT 25
8046: PUSH
8047: LD_INT 2
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 25
8056: PUSH
8057: LD_INT 3
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 25
8066: PUSH
8067: LD_INT 4
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: LD_INT 25
8076: PUSH
8077: LD_INT 5
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PUSH
8084: EMPTY
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: LIST
8096: PPUSH
8097: CALL_OW 69
8101: PPUSH
8102: LD_STRING D8-Sol1-1
8104: PPUSH
8105: LD_STRING D8-Sol1-1
8107: PPUSH
8108: CALL 10896 0 3
// if IsOK ( DeltaDoctor ) then
8112: LD_EXP 17
8116: PPUSH
8117: CALL_OW 302
8121: IFFALSE 8137
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8123: LD_EXP 17
8127: PPUSH
8128: LD_STRING D8-Sci1-1
8130: PPUSH
8131: CALL_OW 88
8135: GO 8238
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8137: LD_INT 22
8139: PUSH
8140: LD_INT 1
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: LD_INT 26
8149: PUSH
8150: LD_INT 1
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: PUSH
8157: LD_INT 2
8159: PUSH
8160: LD_INT 25
8162: PUSH
8163: LD_INT 1
8165: PUSH
8166: EMPTY
8167: LIST
8168: LIST
8169: PUSH
8170: LD_INT 25
8172: PUSH
8173: LD_INT 2
8175: PUSH
8176: EMPTY
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 25
8182: PUSH
8183: LD_INT 3
8185: PUSH
8186: EMPTY
8187: LIST
8188: LIST
8189: PUSH
8190: LD_INT 25
8192: PUSH
8193: LD_INT 4
8195: PUSH
8196: EMPTY
8197: LIST
8198: LIST
8199: PUSH
8200: LD_INT 25
8202: PUSH
8203: LD_INT 5
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: PUSH
8210: EMPTY
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: PUSH
8218: EMPTY
8219: LIST
8220: LIST
8221: LIST
8222: PPUSH
8223: CALL_OW 69
8227: PPUSH
8228: LD_STRING D8-Sol1-1
8230: PPUSH
8231: LD_STRING D8-Sol1-1
8233: PPUSH
8234: CALL 10896 0 3
// Say ( JMM , D8-JMM-1 ) ;
8238: LD_EXP 1
8242: PPUSH
8243: LD_STRING D8-JMM-1
8245: PPUSH
8246: CALL_OW 88
// DialogueOff ;
8250: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8254: LD_INT 2
8256: PPUSH
8257: LD_INT 2
8259: PPUSH
8260: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8264: LD_INT 1
8266: PPUSH
8267: LD_INT 2
8269: PPUSH
8270: LD_INT 2
8272: PPUSH
8273: LD_INT 1
8275: PPUSH
8276: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8280: LD_INT 3
8282: PPUSH
8283: LD_INT 2
8285: PPUSH
8286: LD_INT 1
8288: PPUSH
8289: LD_INT 1
8291: PPUSH
8292: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8296: LD_STRING M4
8298: PPUSH
8299: CALL_OW 337
// wait ( 0 0$1 ) ;
8303: LD_INT 35
8305: PPUSH
8306: CALL_OW 67
// if IsLive ( Khatam ) then
8310: LD_EXP 14
8314: PPUSH
8315: CALL_OW 300
8319: IFFALSE 8333
// DoNotAttack ( 2 , Khatam ) ;
8321: LD_INT 2
8323: PPUSH
8324: LD_EXP 14
8328: PPUSH
8329: CALL_OW 471
// wait ( 0 0$1 ) ;
8333: LD_INT 35
8335: PPUSH
8336: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8340: LD_ADDR_VAR 0 8
8344: PUSH
8345: LD_INT 22
8347: PUSH
8348: LD_INT 1
8350: PUSH
8351: EMPTY
8352: LIST
8353: LIST
8354: PUSH
8355: LD_INT 21
8357: PUSH
8358: LD_INT 3
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: EMPTY
8366: LIST
8367: LIST
8368: PPUSH
8369: CALL_OW 69
8373: PPUSH
8374: LD_VAR 0 5
8378: PUSH
8379: LD_INT 1
8381: ARRAY
8382: PPUSH
8383: CALL_OW 74
8387: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8388: LD_VAR 0 5
8392: PPUSH
8393: LD_INT 25
8395: PUSH
8396: LD_INT 1
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PPUSH
8403: CALL_OW 72
8407: PUSH
8408: LD_INT 1
8410: ARRAY
8411: PPUSH
8412: LD_VAR 0 8
8416: PPUSH
8417: CALL_OW 250
8421: PPUSH
8422: LD_VAR 0 8
8426: PPUSH
8427: CALL_OW 251
8431: PPUSH
8432: LD_VAR 0 8
8436: PPUSH
8437: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8441: LD_VAR 0 5
8445: PPUSH
8446: LD_INT 84
8448: PPUSH
8449: LD_INT 22
8451: PPUSH
8452: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8456: LD_VAR 0 5
8460: PPUSH
8461: LD_INT 82
8463: PPUSH
8464: LD_INT 5
8466: PPUSH
8467: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8471: LD_VAR 0 5
8475: PPUSH
8476: LD_INT 95
8478: PPUSH
8479: LD_INT 12
8481: PPUSH
8482: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8486: LD_VAR 0 5
8490: PPUSH
8491: LD_INT 102
8493: PPUSH
8494: LD_INT 11
8496: PPUSH
8497: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8501: LD_VAR 0 5
8505: PPUSH
8506: LD_INT 116
8508: PPUSH
8509: LD_INT 15
8511: PPUSH
8512: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8516: LD_VAR 0 5
8520: PPUSH
8521: LD_INT 140
8523: PPUSH
8524: LD_INT 25
8526: PPUSH
8527: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8531: LD_VAR 0 5
8535: PPUSH
8536: LD_INT 160
8538: PPUSH
8539: LD_INT 56
8541: PPUSH
8542: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8546: LD_ADDR_VAR 0 5
8550: PUSH
8551: LD_INT 22
8553: PUSH
8554: LD_INT 2
8556: PUSH
8557: EMPTY
8558: LIST
8559: LIST
8560: PUSH
8561: LD_INT 21
8563: PUSH
8564: LD_INT 1
8566: PUSH
8567: EMPTY
8568: LIST
8569: LIST
8570: PUSH
8571: LD_INT 2
8573: PUSH
8574: LD_INT 25
8576: PUSH
8577: LD_INT 1
8579: PUSH
8580: EMPTY
8581: LIST
8582: LIST
8583: PUSH
8584: LD_INT 25
8586: PUSH
8587: LD_INT 8
8589: PUSH
8590: EMPTY
8591: LIST
8592: LIST
8593: PUSH
8594: LD_INT 25
8596: PUSH
8597: LD_INT 15
8599: PUSH
8600: EMPTY
8601: LIST
8602: LIST
8603: PUSH
8604: EMPTY
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: PUSH
8610: EMPTY
8611: LIST
8612: LIST
8613: LIST
8614: PPUSH
8615: CALL_OW 69
8619: PUSH
8620: LD_EXP 26
8624: PUSH
8625: EMPTY
8626: LIST
8627: DIFF
8628: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8629: LD_ADDR_VAR 0 6
8633: PUSH
8634: LD_INT 22
8636: PUSH
8637: LD_INT 2
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 21
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 2
8656: PUSH
8657: LD_INT 25
8659: PUSH
8660: LD_INT 2
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 25
8669: PUSH
8670: LD_INT 3
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 25
8679: PUSH
8680: LD_INT 4
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 25
8689: PUSH
8690: LD_INT 12
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 25
8699: PUSH
8700: LD_INT 16
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 69
8724: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
8725: LD_ADDR_VAR 0 6
8729: PUSH
8730: LD_VAR 0 6
8734: PUSH
8735: LD_EXP 26
8739: ADD
8740: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
8741: LD_VAR 0 5
8745: PPUSH
8746: LD_INT 189
8748: PPUSH
8749: LD_INT 79
8751: PPUSH
8752: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
8756: LD_VAR 0 5
8760: PPUSH
8761: LD_INT 25
8763: PUSH
8764: LD_INT 15
8766: PUSH
8767: EMPTY
8768: LIST
8769: LIST
8770: PPUSH
8771: CALL_OW 72
8775: IFFALSE 8816
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
8777: LD_VAR 0 5
8781: PPUSH
8782: LD_INT 25
8784: PUSH
8785: LD_INT 15
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PPUSH
8792: CALL_OW 72
8796: PUSH
8797: LD_INT 1
8799: ARRAY
8800: PPUSH
8801: LD_INT 84
8803: PPUSH
8804: LD_INT 21
8806: PPUSH
8807: CALL_OW 428
8811: PPUSH
8812: CALL_OW 120
// wait ( 0 0$4 ) ;
8816: LD_INT 140
8818: PPUSH
8819: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
8823: LD_VAR 0 6
8827: PPUSH
8828: LD_INT 88
8830: PPUSH
8831: LD_INT 8
8833: PPUSH
8834: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
8838: LD_VAR 0 6
8842: PPUSH
8843: LD_INT 102
8845: PPUSH
8846: LD_INT 10
8848: PPUSH
8849: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
8853: LD_VAR 0 6
8857: PPUSH
8858: LD_INT 116
8860: PPUSH
8861: LD_INT 15
8863: PPUSH
8864: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
8868: LD_VAR 0 6
8872: PPUSH
8873: LD_INT 140
8875: PPUSH
8876: LD_INT 25
8878: PPUSH
8879: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
8883: LD_VAR 0 6
8887: PPUSH
8888: LD_INT 160
8890: PPUSH
8891: LD_INT 56
8893: PPUSH
8894: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
8898: LD_VAR 0 6
8902: PPUSH
8903: LD_INT 189
8905: PPUSH
8906: LD_INT 79
8908: PPUSH
8909: CALL_OW 171
// arabianAttackersAI = 1 ;
8913: LD_ADDR_EXP 46
8917: PUSH
8918: LD_INT 1
8920: ST_TO_ADDR
// if IsOk ( Gary ) then
8921: LD_EXP 10
8925: PPUSH
8926: CALL_OW 302
8930: IFFALSE 8944
// Say ( Gary , D8a-Gary-1 ) ;
8932: LD_EXP 10
8936: PPUSH
8937: LD_STRING D8a-Gary-1
8939: PPUSH
8940: CALL_OW 88
// wait ( 0 0$5 ) ;
8944: LD_INT 175
8946: PPUSH
8947: CALL_OW 67
// if IsOK ( Khatam ) then
8951: LD_EXP 14
8955: PPUSH
8956: CALL_OW 302
8960: IFFALSE 9496
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
8962: LD_ADDR_VAR 0 3
8966: PUSH
8967: LD_INT 22
8969: PUSH
8970: LD_INT 1
8972: PUSH
8973: EMPTY
8974: LIST
8975: LIST
8976: PUSH
8977: LD_INT 2
8979: PUSH
8980: LD_INT 25
8982: PUSH
8983: LD_INT 1
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: PUSH
8990: LD_INT 25
8992: PUSH
8993: LD_INT 2
8995: PUSH
8996: EMPTY
8997: LIST
8998: LIST
8999: PUSH
9000: LD_INT 25
9002: PUSH
9003: LD_INT 3
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 25
9012: PUSH
9013: LD_INT 4
9015: PUSH
9016: EMPTY
9017: LIST
9018: LIST
9019: PUSH
9020: LD_INT 25
9022: PUSH
9023: LD_INT 5
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 25
9032: PUSH
9033: LD_INT 8
9035: PUSH
9036: EMPTY
9037: LIST
9038: LIST
9039: PUSH
9040: EMPTY
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: PPUSH
9053: CALL_OW 69
9057: PUSH
9058: LD_EXP 1
9062: PUSH
9063: LD_EXP 2
9067: PUSH
9068: LD_EXP 3
9072: PUSH
9073: LD_EXP 4
9077: PUSH
9078: LD_EXP 5
9082: PUSH
9083: LD_EXP 6
9087: PUSH
9088: LD_EXP 7
9092: PUSH
9093: LD_EXP 8
9097: PUSH
9098: LD_EXP 9
9102: PUSH
9103: LD_EXP 10
9107: PUSH
9108: LD_EXP 11
9112: PUSH
9113: LD_EXP 12
9117: PUSH
9118: LD_EXP 13
9122: PUSH
9123: LD_EXP 14
9127: PUSH
9128: LD_EXP 15
9132: PUSH
9133: LD_EXP 16
9137: PUSH
9138: LD_EXP 17
9142: PUSH
9143: LD_EXP 19
9147: PUSH
9148: LD_EXP 24
9152: PUSH
9153: EMPTY
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: LIST
9165: LIST
9166: LIST
9167: LIST
9168: LIST
9169: LIST
9170: LIST
9171: LIST
9172: LIST
9173: DIFF
9174: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9175: LD_EXP 14
9179: PPUSH
9180: LD_INT 8
9182: PPUSH
9183: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9187: LD_EXP 14
9191: PPUSH
9192: CALL_OW 122
// wait ( 0 0$1 ) ;
9196: LD_INT 35
9198: PPUSH
9199: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9203: LD_EXP 14
9207: PPUSH
9208: CALL_OW 121
// wait ( 0 0$1 ) ;
9212: LD_INT 35
9214: PPUSH
9215: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9219: LD_EXP 14
9223: PPUSH
9224: LD_INT 7
9226: PPUSH
9227: CALL_OW 113
// if not tmp then
9231: LD_VAR 0 3
9235: NOT
9236: IFFALSE 9240
// exit ;
9238: GO 9496
// DialogueOn ;
9240: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9244: LD_VAR 0 3
9248: PUSH
9249: LD_INT 1
9251: ARRAY
9252: PPUSH
9253: CALL_OW 258
9257: PUSH
9258: LD_INT 1
9260: EQUAL
9261: IFFALSE 9281
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9263: LD_VAR 0 3
9267: PUSH
9268: LD_INT 1
9270: ARRAY
9271: PPUSH
9272: LD_STRING D8b-Sol1-1
9274: PPUSH
9275: CALL_OW 88
9279: GO 9297
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9281: LD_VAR 0 3
9285: PUSH
9286: LD_INT 1
9288: ARRAY
9289: PPUSH
9290: LD_STRING D8b-FSol1-1
9292: PPUSH
9293: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9297: LD_EXP 14
9301: PPUSH
9302: LD_STRING D8b-Khat-1
9304: PPUSH
9305: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9309: LD_VAR 0 3
9313: PUSH
9314: LD_INT 1
9316: ARRAY
9317: PPUSH
9318: CALL_OW 258
9322: PUSH
9323: LD_INT 1
9325: EQUAL
9326: IFFALSE 9346
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9328: LD_VAR 0 3
9332: PUSH
9333: LD_INT 1
9335: ARRAY
9336: PPUSH
9337: LD_STRING D8b-Sol1-2
9339: PPUSH
9340: CALL_OW 88
9344: GO 9362
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9346: LD_VAR 0 3
9350: PUSH
9351: LD_INT 1
9353: ARRAY
9354: PPUSH
9355: LD_STRING D8b-FSol1-2
9357: PPUSH
9358: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9362: LD_EXP 14
9366: PPUSH
9367: LD_STRING D8b-Khat-2
9369: PPUSH
9370: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9374: LD_VAR 0 3
9378: PUSH
9379: LD_INT 1
9381: ARRAY
9382: PPUSH
9383: CALL_OW 258
9387: PUSH
9388: LD_INT 1
9390: EQUAL
9391: IFFALSE 9411
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9393: LD_VAR 0 3
9397: PUSH
9398: LD_INT 1
9400: ARRAY
9401: PPUSH
9402: LD_STRING D8b-Sol1-3
9404: PPUSH
9405: CALL_OW 88
9409: GO 9427
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9411: LD_VAR 0 3
9415: PUSH
9416: LD_INT 1
9418: ARRAY
9419: PPUSH
9420: LD_STRING D8b-FSol1-3
9422: PPUSH
9423: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9427: LD_EXP 14
9431: PPUSH
9432: LD_STRING D8b-Khat-3
9434: PPUSH
9435: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9439: LD_VAR 0 3
9443: PUSH
9444: LD_INT 1
9446: ARRAY
9447: PPUSH
9448: CALL_OW 258
9452: PUSH
9453: LD_INT 1
9455: EQUAL
9456: IFFALSE 9476
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9458: LD_VAR 0 3
9462: PUSH
9463: LD_INT 1
9465: ARRAY
9466: PPUSH
9467: LD_STRING D8b-Sol1-4
9469: PPUSH
9470: CALL_OW 88
9474: GO 9492
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9476: LD_VAR 0 3
9480: PUSH
9481: LD_INT 1
9483: ARRAY
9484: PPUSH
9485: LD_STRING D8b-FSol1-4
9487: PPUSH
9488: CALL_OW 88
// DialogueOff ;
9492: CALL_OW 7
// end ; end ;
9496: LD_VAR 0 1
9500: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9501: LD_INT 7
9503: PPUSH
9504: LD_INT 22
9506: PUSH
9507: LD_INT 2
9509: PUSH
9510: EMPTY
9511: LIST
9512: LIST
9513: PPUSH
9514: CALL_OW 70
9518: PUSH
9519: LD_INT 0
9521: GREATER
9522: PUSH
9523: LD_EXP 14
9527: PPUSH
9528: LD_INT 7
9530: PPUSH
9531: CALL_OW 308
9535: OR
9536: IFFALSE 9743
9538: GO 9540
9540: DISABLE
9541: LD_INT 0
9543: PPUSH
// begin enable ;
9544: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9545: LD_ADDR_VAR 0 1
9549: PUSH
9550: LD_INT 7
9552: PPUSH
9553: LD_INT 22
9555: PUSH
9556: LD_INT 2
9558: PUSH
9559: EMPTY
9560: LIST
9561: LIST
9562: PPUSH
9563: CALL_OW 70
9567: PUSH
9568: FOR_IN
9569: IFFALSE 9710
// begin if GetClass ( i ) = 4 then
9571: LD_VAR 0 1
9575: PPUSH
9576: CALL_OW 257
9580: PUSH
9581: LD_INT 4
9583: EQUAL
9584: IFFALSE 9596
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9586: LD_INT 1
9588: PPUSH
9589: LD_STRING 10_ScientistsEscape_1
9591: PPUSH
9592: CALL_OW 39
// if i = Dietrich then
9596: LD_VAR 0 1
9600: PUSH
9601: LD_EXP 26
9605: EQUAL
9606: IFFALSE 9616
// GensherStatus = 1 ;
9608: LD_ADDR_EXP 52
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 257
9625: PUSH
9626: LD_INT 1
9628: EQUAL
9629: PUSH
9630: LD_VAR 0 1
9634: PPUSH
9635: CALL_OW 257
9639: PUSH
9640: LD_INT 2
9642: EQUAL
9643: OR
9644: PUSH
9645: LD_VAR 0 1
9649: PPUSH
9650: CALL_OW 257
9654: PUSH
9655: LD_INT 3
9657: EQUAL
9658: OR
9659: PUSH
9660: LD_VAR 0 1
9664: PPUSH
9665: CALL_OW 257
9669: PUSH
9670: LD_INT 4
9672: EQUAL
9673: OR
9674: PUSH
9675: LD_VAR 0 1
9679: PPUSH
9680: CALL_OW 257
9684: PUSH
9685: LD_INT 8
9687: EQUAL
9688: OR
9689: IFFALSE 9699
// arabianEscape = 1 ;
9691: LD_ADDR_EXP 47
9695: PUSH
9696: LD_INT 1
9698: ST_TO_ADDR
// RemoveUnit ( i ) ;
9699: LD_VAR 0 1
9703: PPUSH
9704: CALL_OW 64
// end ;
9708: GO 9568
9710: POP
9711: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
9712: LD_EXP 14
9716: PPUSH
9717: LD_INT 7
9719: PPUSH
9720: CALL_OW 308
9724: IFFALSE 9743
// begin KhatamStatus = 1 ;
9726: LD_ADDR_EXP 53
9730: PUSH
9731: LD_INT 1
9733: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
9734: LD_EXP 14
9738: PPUSH
9739: CALL_OW 64
// end ; end ;
9743: PPOPN 1
9745: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
9746: LD_INT 22
9748: PUSH
9749: LD_INT 2
9751: PUSH
9752: EMPTY
9753: LIST
9754: LIST
9755: PUSH
9756: LD_INT 21
9758: PUSH
9759: LD_INT 1
9761: PUSH
9762: EMPTY
9763: LIST
9764: LIST
9765: PUSH
9766: EMPTY
9767: LIST
9768: LIST
9769: PPUSH
9770: CALL_OW 69
9774: PUSH
9775: LD_INT 0
9777: EQUAL
9778: PUSH
9779: LD_INT 22
9781: PUSH
9782: LD_INT 4
9784: PUSH
9785: EMPTY
9786: LIST
9787: LIST
9788: PUSH
9789: LD_INT 21
9791: PUSH
9792: LD_INT 1
9794: PUSH
9795: EMPTY
9796: LIST
9797: LIST
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PPUSH
9803: CALL_OW 69
9807: PUSH
9808: LD_INT 0
9810: EQUAL
9811: AND
9812: IFFALSE 9825
9814: GO 9816
9816: DISABLE
// arabianDefeated = 1 ;
9817: LD_ADDR_EXP 48
9821: PUSH
9822: LD_INT 1
9824: ST_TO_ADDR
9825: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
9826: LD_INT 54
9828: PPUSH
9829: LD_INT 1
9831: PPUSH
9832: CALL_OW 321
9836: PUSH
9837: LD_INT 2
9839: EQUAL
9840: PUSH
9841: LD_INT 55
9843: PPUSH
9844: LD_INT 1
9846: PPUSH
9847: CALL_OW 321
9851: PUSH
9852: LD_INT 2
9854: EQUAL
9855: AND
9856: PUSH
9857: LD_INT 21
9859: PPUSH
9860: LD_INT 1
9862: PPUSH
9863: CALL_OW 321
9867: PUSH
9868: LD_INT 2
9870: EQUAL
9871: AND
9872: PUSH
9873: LD_INT 22
9875: PPUSH
9876: LD_INT 1
9878: PPUSH
9879: CALL_OW 321
9883: PUSH
9884: LD_INT 2
9886: EQUAL
9887: AND
9888: PUSH
9889: LD_INT 12
9891: PPUSH
9892: LD_INT 1
9894: PPUSH
9895: CALL_OW 321
9899: PUSH
9900: LD_INT 2
9902: EQUAL
9903: AND
9904: PUSH
9905: LD_INT 32
9907: PPUSH
9908: LD_INT 1
9910: PPUSH
9911: CALL_OW 321
9915: PUSH
9916: LD_INT 2
9918: EQUAL
9919: AND
9920: PUSH
9921: LD_EXP 61
9925: PUSH
9926: LD_INT 0
9928: EQUAL
9929: AND
9930: PUSH
9931: LD_EXP 49
9935: PUSH
9936: LD_INT 0
9938: EQUAL
9939: AND
9940: PUSH
9941: LD_OWVAR 1
9945: PUSH
9946: LD_INT 31500
9948: GREATEREQUAL
9949: AND
9950: IFFALSE 9967
9952: GO 9954
9954: DISABLE
// begin arabianTrait = 1 ;
9955: LD_ADDR_EXP 49
9959: PUSH
9960: LD_INT 1
9962: ST_TO_ADDR
// PrepareArabianTrait ;
9963: CALL 7717 0 0
// end ;
9967: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
9968: LD_EXP 29
9972: PUSH
9973: LD_STRING 02_mikhailStatus_1
9975: PPUSH
9976: LD_INT 0
9978: PPUSH
9979: CALL_OW 30
9983: PUSH
9984: LD_INT 1
9986: EQUAL
9987: AND
9988: PUSH
9989: LD_INT 22
9991: PUSH
9992: LD_INT 5
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: PPUSH
9999: CALL_OW 69
10003: PUSH
10004: LD_INT 0
10006: EQUAL
10007: AND
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_INT 2
10014: PUSH
10015: EMPTY
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 21
10021: PUSH
10022: LD_INT 1
10024: PUSH
10025: EMPTY
10026: LIST
10027: LIST
10028: PUSH
10029: EMPTY
10030: LIST
10031: LIST
10032: PPUSH
10033: CALL_OW 69
10037: PUSH
10038: LD_INT 0
10040: EQUAL
10041: PUSH
10042: LD_EXP 49
10046: PUSH
10047: LD_INT 0
10049: EQUAL
10050: OR
10051: AND
10052: IFFALSE 10061
10054: GO 10056
10056: DISABLE
// PrepareCornell ;
10057: CALL 3273 0 0
10061: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10062: LD_INT 22
10064: PUSH
10065: LD_INT 1
10067: PUSH
10068: EMPTY
10069: LIST
10070: LIST
10071: PPUSH
10072: CALL_OW 69
10076: PPUSH
10077: LD_EXP 19
10081: PPUSH
10082: CALL_OW 74
10086: PPUSH
10087: LD_EXP 19
10091: PPUSH
10092: CALL_OW 296
10096: PUSH
10097: LD_INT 9
10099: LESS
10100: IFFALSE 10321
10102: GO 10104
10104: DISABLE
// begin InGameOn ;
10105: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10109: LD_EXP 19
10113: PPUSH
10114: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10118: LD_EXP 19
10122: PPUSH
10123: LD_STRING D7-Corn-1
10125: PPUSH
10126: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10130: LD_INT 22
10132: PUSH
10133: LD_INT 1
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: PUSH
10140: LD_INT 2
10142: PUSH
10143: LD_INT 25
10145: PUSH
10146: LD_INT 1
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: PUSH
10153: LD_INT 25
10155: PUSH
10156: LD_INT 2
10158: PUSH
10159: EMPTY
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 25
10165: PUSH
10166: LD_INT 3
10168: PUSH
10169: EMPTY
10170: LIST
10171: LIST
10172: PUSH
10173: LD_INT 25
10175: PUSH
10176: LD_INT 4
10178: PUSH
10179: EMPTY
10180: LIST
10181: LIST
10182: PUSH
10183: LD_INT 25
10185: PUSH
10186: LD_INT 5
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: PUSH
10201: EMPTY
10202: LIST
10203: LIST
10204: PPUSH
10205: CALL_OW 69
10209: PPUSH
10210: LD_STRING D7-Sol1-1
10212: PPUSH
10213: LD_STRING D7-FSol1-1
10215: PPUSH
10216: CALL 10896 0 3
// CenterNowOnUnits ( Cornell ) ;
10220: LD_EXP 19
10224: PPUSH
10225: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10229: LD_EXP 19
10233: PPUSH
10234: LD_STRING D7-Corn-2
10236: PPUSH
10237: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10241: LD_EXP 1
10245: PPUSH
10246: LD_STRING D7-JMM-2
10248: PPUSH
10249: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10253: LD_EXP 19
10257: PPUSH
10258: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10262: LD_EXP 19
10266: PPUSH
10267: LD_STRING D7-Corn-3
10269: PPUSH
10270: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10274: LD_EXP 19
10278: PPUSH
10279: LD_INT 250
10281: PPUSH
10282: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10286: LD_EXP 19
10290: PPUSH
10291: LD_INT 1
10293: PPUSH
10294: CALL_OW 235
// wait ( 0 0$1 ) ;
10298: LD_INT 35
10300: PPUSH
10301: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10305: LD_EXP 1
10309: PPUSH
10310: LD_STRING D7-JMM-3
10312: PPUSH
10313: CALL_OW 88
// InGameOff ;
10317: CALL_OW 9
// end ;
10321: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10322: LD_EXP 19
10326: PPUSH
10327: CALL_OW 255
10331: PUSH
10332: LD_INT 1
10334: EQUAL
10335: PUSH
10336: LD_EXP 19
10340: PPUSH
10341: CALL_OW 256
10345: PUSH
10346: LD_INT 350
10348: GREATER
10349: AND
10350: IFFALSE 10543
10352: GO 10354
10354: DISABLE
// begin DialogueOn ;
10355: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10359: LD_EXP 1
10363: PPUSH
10364: LD_STRING D7a-JMM-1
10366: PPUSH
10367: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10371: LD_EXP 19
10375: PPUSH
10376: LD_STRING D7a-Corn-1
10378: PPUSH
10379: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10383: LD_EXP 1
10387: PPUSH
10388: LD_STRING D7a-JMM-2
10390: PPUSH
10391: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10395: LD_EXP 19
10399: PPUSH
10400: LD_STRING D7a-Corn-2
10402: PPUSH
10403: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10407: LD_EXP 1
10411: PPUSH
10412: LD_STRING D7a-JMM-3
10414: PPUSH
10415: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10419: LD_EXP 19
10423: PPUSH
10424: LD_STRING D7a-Corn-3
10426: PPUSH
10427: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10431: LD_EXP 1
10435: PPUSH
10436: LD_STRING D7a-JMM-4
10438: PPUSH
10439: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10443: LD_EXP 19
10447: PPUSH
10448: LD_STRING D7a-Corn-4
10450: PPUSH
10451: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10455: LD_EXP 1
10459: PPUSH
10460: LD_STRING D7a-JMM-5
10462: PPUSH
10463: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10467: LD_EXP 19
10471: PPUSH
10472: LD_STRING D7a-Corn-5
10474: PPUSH
10475: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10479: LD_EXP 1
10483: PPUSH
10484: LD_STRING D7a-JMM-6
10486: PPUSH
10487: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10491: LD_EXP 19
10495: PPUSH
10496: LD_STRING D7a-Corn-6
10498: PPUSH
10499: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10503: LD_EXP 1
10507: PPUSH
10508: LD_STRING D7a-JMM-7
10510: PPUSH
10511: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10515: LD_EXP 19
10519: PPUSH
10520: LD_STRING D7a-Corn-7
10522: PPUSH
10523: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10527: LD_EXP 1
10531: PPUSH
10532: LD_STRING D7a-JMM-8
10534: PPUSH
10535: CALL_OW 88
// DialogueOff ;
10539: CALL_OW 7
// end ;
10543: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10544: LD_EXP 59
10548: PUSH
10549: LD_EXP 1
10553: PPUSH
10554: CALL_OW 302
10558: PUSH
10559: LD_EXP 5
10563: PPUSH
10564: CALL_OW 302
10568: OR
10569: AND
10570: IFFALSE 10660
10572: GO 10574
10574: DISABLE
// begin Wait ( 0 0$2 ) ;
10575: LD_INT 70
10577: PPUSH
10578: CALL_OW 67
// DialogueOn ;
10582: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10586: LD_EXP 59
10590: PUSH
10591: LD_INT 1
10593: ARRAY
10594: PPUSH
10595: LD_EXP 59
10599: PUSH
10600: LD_INT 2
10602: ARRAY
10603: PPUSH
10604: CALL_OW 86
// if IsOk ( Cyrus ) then
10608: LD_EXP 5
10612: PPUSH
10613: CALL_OW 302
10617: IFFALSE 10633
// Say ( Cyrus , D10-Cyrus-1 ) else
10619: LD_EXP 5
10623: PPUSH
10624: LD_STRING D10-Cyrus-1
10626: PPUSH
10627: CALL_OW 88
10631: GO 10656
// if IsOk ( JMM ) then
10633: LD_EXP 1
10637: PPUSH
10638: CALL_OW 302
10642: IFFALSE 10656
// Say ( JMM , D10-JMM-1 ) ;
10644: LD_EXP 1
10648: PPUSH
10649: LD_STRING D10-JMM-1
10651: PPUSH
10652: CALL_OW 88
// DialogueOff ;
10656: CALL_OW 7
// end ;
10660: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10661: LD_INT 12
10663: PPUSH
10664: LD_INT 1
10666: PPUSH
10667: CALL_OW 321
10671: PUSH
10672: LD_INT 2
10674: EQUAL
10675: IFFALSE 10687
10677: GO 10679
10679: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10680: LD_STRING M2b
10682: PPUSH
10683: CALL_OW 337
10687: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10688: LD_INT 32
10690: PPUSH
10691: LD_INT 1
10693: PPUSH
10694: CALL_OW 321
10698: PUSH
10699: LD_INT 2
10701: EQUAL
10702: IFFALSE 10714
10704: GO 10706
10706: DISABLE
// ChangeMissionObjectives ( M2c ) ;
10707: LD_STRING M2c
10709: PPUSH
10710: CALL_OW 337
10714: END
// every 0 0$1 trigger arabianDefeated = 1 do
10715: LD_EXP 48
10719: PUSH
10720: LD_INT 1
10722: EQUAL
10723: IFFALSE 10735
10725: GO 10727
10727: DISABLE
// ChangeMissionObjectives ( M4a ) ;
10728: LD_STRING M4a
10730: PPUSH
10731: CALL_OW 337
10735: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
10736: LD_INT 54
10738: PPUSH
10739: LD_INT 1
10741: PPUSH
10742: CALL_OW 321
10746: PUSH
10747: LD_INT 2
10749: EQUAL
10750: PUSH
10751: LD_INT 55
10753: PPUSH
10754: LD_INT 1
10756: PPUSH
10757: CALL_OW 321
10761: PUSH
10762: LD_INT 2
10764: EQUAL
10765: AND
10766: PUSH
10767: LD_INT 21
10769: PPUSH
10770: LD_INT 1
10772: PPUSH
10773: CALL_OW 321
10777: PUSH
10778: LD_INT 2
10780: EQUAL
10781: AND
10782: PUSH
10783: LD_INT 22
10785: PPUSH
10786: LD_INT 1
10788: PPUSH
10789: CALL_OW 321
10793: PUSH
10794: LD_INT 2
10796: EQUAL
10797: AND
10798: IFFALSE 10810
10800: GO 10802
10802: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
10803: LD_STRING M2a
10805: PPUSH
10806: CALL_OW 337
10810: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
10811: LD_INT 0
10813: PPUSH
10814: PPUSH
// if exist_mode then
10815: LD_VAR 0 2
10819: IFFALSE 10838
// unit := CreateCharacter ( ident ) else
10821: LD_ADDR_VAR 0 4
10825: PUSH
10826: LD_VAR 0 1
10830: PPUSH
10831: CALL_OW 34
10835: ST_TO_ADDR
10836: GO 10853
// unit := NewCharacter ( ident ) ;
10838: LD_ADDR_VAR 0 4
10842: PUSH
10843: LD_VAR 0 1
10847: PPUSH
10848: CALL_OW 25
10852: ST_TO_ADDR
// result := unit ;
10853: LD_ADDR_VAR 0 3
10857: PUSH
10858: LD_VAR 0 4
10862: ST_TO_ADDR
// end ;
10863: LD_VAR 0 3
10867: RET
// export function Video ( mode ) ; begin
10868: LD_INT 0
10870: PPUSH
// ingame_video = mode ;
10871: LD_ADDR_OWVAR 52
10875: PUSH
10876: LD_VAR 0 1
10880: ST_TO_ADDR
// interface_hidden = mode ;
10881: LD_ADDR_OWVAR 54
10885: PUSH
10886: LD_VAR 0 1
10890: ST_TO_ADDR
// end ;
10891: LD_VAR 0 2
10895: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
10896: LD_INT 0
10898: PPUSH
10899: PPUSH
10900: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
10901: LD_ADDR_VAR 0 1
10905: PUSH
10906: LD_VAR 0 1
10910: PUSH
10911: LD_EXP 1
10915: PUSH
10916: LD_EXP 2
10920: PUSH
10921: LD_EXP 3
10925: PUSH
10926: LD_EXP 4
10930: PUSH
10931: LD_EXP 5
10935: PUSH
10936: LD_EXP 6
10940: PUSH
10941: LD_EXP 7
10945: PUSH
10946: LD_EXP 8
10950: PUSH
10951: LD_EXP 9
10955: PUSH
10956: LD_EXP 10
10960: PUSH
10961: LD_EXP 11
10965: PUSH
10966: LD_EXP 12
10970: PUSH
10971: LD_EXP 13
10975: PUSH
10976: LD_EXP 14
10980: PUSH
10981: LD_EXP 15
10985: PUSH
10986: LD_EXP 16
10990: PUSH
10991: LD_EXP 17
10995: PUSH
10996: LD_EXP 18
11000: PUSH
11001: LD_EXP 19
11005: PUSH
11006: LD_EXP 24
11010: PUSH
11011: EMPTY
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: LIST
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: DIFF
11033: ST_TO_ADDR
// if not characters then
11034: LD_VAR 0 1
11038: NOT
11039: IFFALSE 11043
// exit ;
11041: GO 11189
// rnd = rand ( 1 , characters ) ;
11043: LD_ADDR_VAR 0 6
11047: PUSH
11048: LD_INT 1
11050: PPUSH
11051: LD_VAR 0 1
11055: PPUSH
11056: CALL_OW 12
11060: ST_TO_ADDR
// for i = 1 to characters do
11061: LD_ADDR_VAR 0 5
11065: PUSH
11066: DOUBLE
11067: LD_INT 1
11069: DEC
11070: ST_TO_ADDR
11071: LD_VAR 0 1
11075: PUSH
11076: FOR_TO
11077: IFFALSE 11187
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11079: LD_VAR 0 5
11083: PUSH
11084: LD_VAR 0 6
11088: EQUAL
11089: PUSH
11090: LD_VAR 0 1
11094: PUSH
11095: LD_VAR 0 5
11099: ARRAY
11100: PPUSH
11101: CALL_OW 258
11105: PUSH
11106: LD_INT 1
11108: EQUAL
11109: AND
11110: IFFALSE 11132
// Say ( characters [ i ] , dialogMID ) ;
11112: LD_VAR 0 1
11116: PUSH
11117: LD_VAR 0 5
11121: ARRAY
11122: PPUSH
11123: LD_VAR 0 2
11127: PPUSH
11128: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11132: LD_VAR 0 5
11136: PUSH
11137: LD_VAR 0 6
11141: EQUAL
11142: PUSH
11143: LD_VAR 0 1
11147: PUSH
11148: LD_VAR 0 5
11152: ARRAY
11153: PPUSH
11154: CALL_OW 258
11158: PUSH
11159: LD_INT 2
11161: EQUAL
11162: AND
11163: IFFALSE 11185
// Say ( characters [ i ] , dialogFID ) ;
11165: LD_VAR 0 1
11169: PUSH
11170: LD_VAR 0 5
11174: ARRAY
11175: PPUSH
11176: LD_VAR 0 3
11180: PPUSH
11181: CALL_OW 88
// end ;
11185: GO 11076
11187: POP
11188: POP
// end ;
11189: LD_VAR 0 4
11193: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11194: LD_INT 0
11196: PPUSH
11197: PPUSH
// for i in charactersList do
11198: LD_ADDR_VAR 0 4
11202: PUSH
11203: LD_VAR 0 1
11207: PUSH
11208: FOR_IN
11209: IFFALSE 11227
// SaveCharacters ( i , ident ) ;
11211: LD_VAR 0 4
11215: PPUSH
11216: LD_VAR 0 2
11220: PPUSH
11221: CALL_OW 38
11225: GO 11208
11227: POP
11228: POP
// end ;
11229: LD_VAR 0 3
11233: RET
// export function PrepareDifficulty ; begin
11234: LD_INT 0
11236: PPUSH
// if difficulty = 1 then
11237: LD_OWVAR 67
11241: PUSH
11242: LD_INT 1
11244: EQUAL
11245: IFFALSE 11289
// begin RuSolMinLevel = 3 ;
11247: LD_ADDR_EXP 36
11251: PUSH
11252: LD_INT 3
11254: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11255: LD_ADDR_EXP 37
11259: PUSH
11260: LD_INT 5
11262: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11263: LD_INT 51
11265: PPUSH
11266: LD_INT 6
11268: PPUSH
11269: LD_INT 2
11271: PPUSH
11272: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11276: LD_INT 51
11278: PPUSH
11279: LD_INT 5
11281: PPUSH
11282: LD_INT 2
11284: PPUSH
11285: CALL_OW 322
// end ; if difficulty = 2 then
11289: LD_OWVAR 67
11293: PUSH
11294: LD_INT 2
11296: EQUAL
11297: IFFALSE 11393
// begin RuSolMinLevel = 5 ;
11299: LD_ADDR_EXP 36
11303: PUSH
11304: LD_INT 5
11306: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11307: LD_ADDR_EXP 37
11311: PUSH
11312: LD_INT 7
11314: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11315: LD_INT 51
11317: PPUSH
11318: LD_INT 6
11320: PPUSH
11321: LD_INT 2
11323: PPUSH
11324: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11328: LD_INT 57
11330: PPUSH
11331: LD_INT 6
11333: PPUSH
11334: LD_INT 2
11336: PPUSH
11337: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11341: LD_INT 63
11343: PPUSH
11344: LD_INT 6
11346: PPUSH
11347: LD_INT 2
11349: PPUSH
11350: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11354: LD_INT 51
11356: PPUSH
11357: LD_INT 5
11359: PPUSH
11360: LD_INT 2
11362: PPUSH
11363: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11367: LD_INT 5
11369: PPUSH
11370: LD_INT 2
11372: PPUSH
11373: LD_INT 2
11375: PPUSH
11376: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11380: LD_INT 5
11382: PPUSH
11383: LD_INT 5
11385: PPUSH
11386: LD_INT 2
11388: PPUSH
11389: CALL_OW 322
// end ; if difficulty = 3 then
11393: LD_OWVAR 67
11397: PUSH
11398: LD_INT 3
11400: EQUAL
11401: IFFALSE 11549
// begin RuSolMinLevel = 6 ;
11403: LD_ADDR_EXP 36
11407: PUSH
11408: LD_INT 6
11410: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11411: LD_ADDR_EXP 37
11415: PUSH
11416: LD_INT 8
11418: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11419: LD_INT 51
11421: PPUSH
11422: LD_INT 6
11424: PPUSH
11425: LD_INT 2
11427: PPUSH
11428: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11432: LD_INT 57
11434: PPUSH
11435: LD_INT 6
11437: PPUSH
11438: LD_INT 2
11440: PPUSH
11441: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11445: LD_INT 52
11447: PPUSH
11448: LD_INT 6
11450: PPUSH
11451: LD_INT 2
11453: PPUSH
11454: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11458: LD_INT 58
11460: PPUSH
11461: LD_INT 6
11463: PPUSH
11464: LD_INT 2
11466: PPUSH
11467: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11471: LD_INT 63
11473: PPUSH
11474: LD_INT 6
11476: PPUSH
11477: LD_INT 2
11479: PPUSH
11480: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11484: LD_INT 64
11486: PPUSH
11487: LD_INT 6
11489: PPUSH
11490: LD_INT 2
11492: PPUSH
11493: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11497: LD_INT 51
11499: PPUSH
11500: LD_INT 5
11502: PPUSH
11503: LD_INT 2
11505: PPUSH
11506: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11510: LD_INT 52
11512: PPUSH
11513: LD_INT 5
11515: PPUSH
11516: LD_INT 2
11518: PPUSH
11519: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11523: LD_INT 66
11525: PPUSH
11526: LD_INT 2
11528: PPUSH
11529: LD_INT 2
11531: PPUSH
11532: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11536: LD_INT 66
11538: PPUSH
11539: LD_INT 5
11541: PPUSH
11542: LD_INT 2
11544: PPUSH
11545: CALL_OW 322
// end ; end ;
11549: LD_VAR 0 1
11553: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11554: LD_INT 0
11556: PPUSH
11557: PPUSH
11558: PPUSH
11559: PPUSH
11560: PPUSH
11561: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11562: LD_ADDR_VAR 0 7
11566: PUSH
11567: LD_INT 43
11569: PUSH
11570: LD_INT 68
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 43
11579: PUSH
11580: LD_INT 79
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: LD_INT 99
11589: PUSH
11590: LD_INT 114
11592: PUSH
11593: EMPTY
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 103
11599: PUSH
11600: LD_INT 114
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 156
11609: PUSH
11610: LD_INT 92
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: PUSH
11617: LD_INT 152
11619: PUSH
11620: LD_INT 85
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: ST_TO_ADDR
// for i in sources do
11635: LD_ADDR_VAR 0 3
11639: PUSH
11640: LD_VAR 0 7
11644: PUSH
11645: FOR_IN
11646: IFFALSE 11675
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11648: LD_VAR 0 3
11652: PUSH
11653: LD_INT 1
11655: ARRAY
11656: PPUSH
11657: LD_VAR 0 3
11661: PUSH
11662: LD_INT 2
11664: ARRAY
11665: PPUSH
11666: LD_INT 3
11668: PPUSH
11669: CALL_OW 441
11673: GO 11645
11675: POP
11676: POP
// case position of 1 :
11677: LD_VAR 0 1
11681: PUSH
11682: LD_INT 1
11684: DOUBLE
11685: EQUAL
11686: IFTRUE 11690
11688: GO 11701
11690: POP
// area := westConv ; 2 :
11691: LD_ADDR_VAR 0 6
11695: PUSH
11696: LD_INT 20
11698: ST_TO_ADDR
11699: GO 11740
11701: LD_INT 2
11703: DOUBLE
11704: EQUAL
11705: IFTRUE 11709
11707: GO 11720
11709: POP
// area := midConv ; 3 :
11710: LD_ADDR_VAR 0 6
11714: PUSH
11715: LD_INT 21
11717: ST_TO_ADDR
11718: GO 11740
11720: LD_INT 3
11722: DOUBLE
11723: EQUAL
11724: IFTRUE 11728
11726: GO 11739
11728: POP
// area := eastConv ; end ;
11729: LD_ADDR_VAR 0 6
11733: PUSH
11734: LD_INT 22
11736: ST_TO_ADDR
11737: GO 11740
11739: POP
// area := AreaToList ( area , 0 ) ;
11740: LD_ADDR_VAR 0 6
11744: PUSH
11745: LD_VAR 0 6
11749: PPUSH
11750: LD_INT 0
11752: PPUSH
11753: CALL_OW 517
11757: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11758: LD_ADDR_VAR 0 3
11762: PUSH
11763: DOUBLE
11764: LD_INT 1
11766: DEC
11767: ST_TO_ADDR
11768: LD_VAR 0 6
11772: PUSH
11773: LD_INT 1
11775: ARRAY
11776: PUSH
11777: FOR_TO
11778: IFFALSE 11859
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11780: LD_VAR 0 6
11784: PUSH
11785: LD_INT 1
11787: ARRAY
11788: PUSH
11789: LD_VAR 0 3
11793: ARRAY
11794: PPUSH
11795: LD_VAR 0 6
11799: PUSH
11800: LD_INT 2
11802: ARRAY
11803: PUSH
11804: LD_VAR 0 3
11808: ARRAY
11809: PPUSH
11810: LD_INT 1
11812: PPUSH
11813: LD_INT 1
11815: PPUSH
11816: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
11820: LD_VAR 0 6
11824: PUSH
11825: LD_INT 1
11827: ARRAY
11828: PUSH
11829: LD_VAR 0 3
11833: ARRAY
11834: PPUSH
11835: LD_VAR 0 6
11839: PUSH
11840: LD_INT 2
11842: ARRAY
11843: PUSH
11844: LD_VAR 0 3
11848: ARRAY
11849: PPUSH
11850: LD_INT 1
11852: PPUSH
11853: CALL_OW 331
// end ;
11857: GO 11777
11859: POP
11860: POP
// ruPossition = position ;
11861: LD_ADDR_EXP 41
11865: PUSH
11866: LD_VAR 0 1
11870: ST_TO_ADDR
// if position = 1 then
11871: LD_VAR 0 1
11875: PUSH
11876: LD_INT 1
11878: EQUAL
11879: IFFALSE 12627
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11881: LD_ADDR_VAR 0 4
11885: PUSH
11886: LD_INT 22
11888: PUSH
11889: LD_INT 3
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: PUSH
11896: LD_INT 25
11898: PUSH
11899: LD_INT 2
11901: PUSH
11902: EMPTY
11903: LIST
11904: LIST
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PPUSH
11910: CALL_OW 69
11914: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
11915: LD_ADDR_VAR 0 5
11919: PUSH
11920: LD_INT 0
11922: PUSH
11923: LD_INT 49
11925: PUSH
11926: LD_INT 74
11928: PUSH
11929: LD_INT 3
11931: PUSH
11932: EMPTY
11933: LIST
11934: LIST
11935: LIST
11936: LIST
11937: PUSH
11938: LD_INT 4
11940: PUSH
11941: LD_INT 73
11943: PUSH
11944: LD_INT 88
11946: PUSH
11947: LD_INT 5
11949: PUSH
11950: EMPTY
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: PUSH
11956: LD_INT 4
11958: PUSH
11959: LD_INT 56
11961: PUSH
11962: LD_INT 62
11964: PUSH
11965: LD_INT 3
11967: PUSH
11968: EMPTY
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: PUSH
11974: LD_INT 29
11976: PUSH
11977: LD_INT 43
11979: PUSH
11980: LD_INT 68
11982: PUSH
11983: LD_INT 2
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: PUSH
11992: LD_INT 30
11994: PUSH
11995: LD_INT 43
11997: PUSH
11998: LD_INT 79
12000: PUSH
12001: LD_INT 5
12003: PUSH
12004: EMPTY
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: PUSH
12010: LD_INT 28
12012: PUSH
12013: LD_INT 60
12015: PUSH
12016: LD_INT 75
12018: PUSH
12019: LD_INT 1
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: PUSH
12028: LD_INT 2
12030: PUSH
12031: LD_INT 50
12033: PUSH
12034: LD_INT 87
12036: PUSH
12037: LD_INT 1
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 28
12048: PUSH
12049: LD_INT 45
12051: PUSH
12052: LD_INT 67
12054: PUSH
12055: LD_INT 2
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: PUSH
12064: LD_INT 17
12066: PUSH
12067: LD_INT 47
12069: PUSH
12070: LD_INT 84
12072: PUSH
12073: LD_INT 2
12075: PUSH
12076: EMPTY
12077: LIST
12078: LIST
12079: LIST
12080: LIST
12081: PUSH
12082: LD_INT 18
12084: PUSH
12085: LD_INT 46
12087: PUSH
12088: LD_INT 87
12090: PUSH
12091: LD_INT 1
12093: PUSH
12094: EMPTY
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 28
12102: PUSH
12103: LD_INT 41
12105: PUSH
12106: LD_INT 64
12108: PUSH
12109: LD_INT 5
12111: PUSH
12112: EMPTY
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: PUSH
12118: LD_INT 32
12120: PUSH
12121: LD_INT 75
12123: PUSH
12124: LD_INT 76
12126: PUSH
12127: LD_INT 5
12129: PUSH
12130: EMPTY
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: PUSH
12136: LD_INT 32
12138: PUSH
12139: LD_INT 77
12141: PUSH
12142: LD_INT 75
12144: PUSH
12145: LD_INT 5
12147: PUSH
12148: EMPTY
12149: LIST
12150: LIST
12151: LIST
12152: LIST
12153: PUSH
12154: LD_INT 32
12156: PUSH
12157: LD_INT 69
12159: PUSH
12160: LD_INT 68
12162: PUSH
12163: LD_INT 3
12165: PUSH
12166: EMPTY
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: PUSH
12172: LD_INT 32
12174: PUSH
12175: LD_INT 59
12177: PUSH
12178: LD_INT 96
12180: PUSH
12181: LD_INT 5
12183: PUSH
12184: EMPTY
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: PUSH
12190: LD_INT 32
12192: PUSH
12193: LD_INT 56
12195: PUSH
12196: LD_INT 96
12198: PUSH
12199: LD_INT 0
12201: PUSH
12202: EMPTY
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: PUSH
12208: LD_INT 32
12210: PUSH
12211: LD_INT 51
12213: PUSH
12214: LD_INT 61
12216: PUSH
12217: LD_INT 3
12219: PUSH
12220: EMPTY
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: PUSH
12226: LD_INT 32
12228: PUSH
12229: LD_INT 42
12231: PUSH
12232: LD_INT 60
12234: PUSH
12235: LD_INT 3
12237: PUSH
12238: EMPTY
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: PUSH
12244: LD_INT 32
12246: PUSH
12247: LD_INT 36
12249: PUSH
12250: LD_INT 58
12252: PUSH
12253: LD_INT 3
12255: PUSH
12256: EMPTY
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: PUSH
12262: LD_INT 32
12264: PUSH
12265: LD_INT 39
12267: PUSH
12268: LD_INT 59
12270: PUSH
12271: LD_INT 3
12273: PUSH
12274: EMPTY
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: PUSH
12280: LD_INT 32
12282: PUSH
12283: LD_INT 61
12285: PUSH
12286: LD_INT 64
12288: PUSH
12289: LD_INT 3
12291: PUSH
12292: EMPTY
12293: LIST
12294: LIST
12295: LIST
12296: LIST
12297: PUSH
12298: LD_INT 33
12300: PUSH
12301: LD_INT 63
12303: PUSH
12304: LD_INT 90
12306: PUSH
12307: LD_INT 5
12309: PUSH
12310: EMPTY
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: PUSH
12316: LD_INT 33
12318: PUSH
12319: LD_INT 64
12321: PUSH
12322: LD_INT 88
12324: PUSH
12325: LD_INT 5
12327: PUSH
12328: EMPTY
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: PUSH
12334: LD_INT 33
12336: PUSH
12337: LD_INT 72
12339: PUSH
12340: LD_INT 82
12342: PUSH
12343: LD_INT 5
12345: PUSH
12346: EMPTY
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: PUSH
12352: LD_INT 6
12354: PUSH
12355: LD_INT 42
12357: PUSH
12358: LD_INT 74
12360: PUSH
12361: LD_INT 1
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: PUSH
12370: LD_INT 6
12372: PUSH
12373: LD_INT 56
12375: PUSH
12376: LD_INT 77
12378: PUSH
12379: LD_INT 2
12381: PUSH
12382: EMPTY
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: PUSH
12388: LD_INT 21
12390: PUSH
12391: LD_INT 54
12393: PUSH
12394: LD_INT 91
12396: PUSH
12397: LD_INT 5
12399: PUSH
12400: EMPTY
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: PUSH
12406: LD_INT 16
12408: PUSH
12409: LD_INT 50
12411: PUSH
12412: LD_INT 83
12414: PUSH
12415: LD_INT 3
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: PUSH
12424: LD_INT 24
12426: PUSH
12427: LD_INT 50
12429: PUSH
12430: LD_INT 90
12432: PUSH
12433: LD_INT 0
12435: PUSH
12436: EMPTY
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: PUSH
12442: EMPTY
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12473: LD_ADDR_VAR 0 3
12477: PUSH
12478: LD_INT 22
12480: PUSH
12481: LD_INT 3
12483: PUSH
12484: EMPTY
12485: LIST
12486: LIST
12487: PUSH
12488: LD_INT 3
12490: PUSH
12491: LD_INT 25
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: PUSH
12505: EMPTY
12506: LIST
12507: LIST
12508: PPUSH
12509: CALL_OW 69
12513: PUSH
12514: FOR_IN
12515: IFFALSE 12534
// AddComAgressiveMove ( i , 53 , 82 ) ;
12517: LD_VAR 0 3
12521: PPUSH
12522: LD_INT 53
12524: PPUSH
12525: LD_INT 82
12527: PPUSH
12528: CALL_OW 174
12532: GO 12514
12534: POP
12535: POP
// for i := 1 to buildingsTab do
12536: LD_ADDR_VAR 0 3
12540: PUSH
12541: DOUBLE
12542: LD_INT 1
12544: DEC
12545: ST_TO_ADDR
12546: LD_VAR 0 5
12550: PUSH
12551: FOR_TO
12552: IFFALSE 12625
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12554: LD_VAR 0 4
12558: PPUSH
12559: LD_VAR 0 5
12563: PUSH
12564: LD_VAR 0 3
12568: ARRAY
12569: PUSH
12570: LD_INT 1
12572: ARRAY
12573: PPUSH
12574: LD_VAR 0 5
12578: PUSH
12579: LD_VAR 0 3
12583: ARRAY
12584: PUSH
12585: LD_INT 2
12587: ARRAY
12588: PPUSH
12589: LD_VAR 0 5
12593: PUSH
12594: LD_VAR 0 3
12598: ARRAY
12599: PUSH
12600: LD_INT 3
12602: ARRAY
12603: PPUSH
12604: LD_VAR 0 5
12608: PUSH
12609: LD_VAR 0 3
12613: ARRAY
12614: PUSH
12615: LD_INT 4
12617: ARRAY
12618: PPUSH
12619: CALL_OW 205
12623: GO 12551
12625: POP
12626: POP
// end ; if position = 2 then
12627: LD_VAR 0 1
12631: PUSH
12632: LD_INT 2
12634: EQUAL
12635: IFFALSE 13250
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12637: LD_ADDR_VAR 0 4
12641: PUSH
12642: LD_INT 22
12644: PUSH
12645: LD_INT 3
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: PUSH
12652: LD_INT 25
12654: PUSH
12655: LD_INT 2
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: PUSH
12662: EMPTY
12663: LIST
12664: LIST
12665: PPUSH
12666: CALL_OW 69
12670: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12671: LD_ADDR_VAR 0 5
12675: PUSH
12676: LD_INT 0
12678: PUSH
12679: LD_INT 104
12681: PUSH
12682: LD_INT 110
12684: PUSH
12685: LD_INT 5
12687: PUSH
12688: EMPTY
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: PUSH
12694: LD_INT 4
12696: PUSH
12697: LD_INT 98
12699: PUSH
12700: LD_INT 90
12702: PUSH
12703: LD_INT 3
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: PUSH
12712: LD_INT 29
12714: PUSH
12715: LD_INT 103
12717: PUSH
12718: LD_INT 114
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: PUSH
12730: LD_INT 30
12732: PUSH
12733: LD_INT 99
12735: PUSH
12736: LD_INT 114
12738: PUSH
12739: LD_INT 3
12741: PUSH
12742: EMPTY
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: PUSH
12748: LD_INT 28
12750: PUSH
12751: LD_INT 100
12753: PUSH
12754: LD_INT 112
12756: PUSH
12757: LD_INT 1
12759: PUSH
12760: EMPTY
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: PUSH
12766: LD_INT 2
12768: PUSH
12769: LD_INT 92
12771: PUSH
12772: LD_INT 101
12774: PUSH
12775: LD_INT 0
12777: PUSH
12778: EMPTY
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: PUSH
12784: LD_INT 28
12786: PUSH
12787: LD_INT 97
12789: PUSH
12790: LD_INT 116
12792: PUSH
12793: LD_INT 5
12795: PUSH
12796: EMPTY
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 17
12804: PUSH
12805: LD_INT 96
12807: PUSH
12808: LD_INT 101
12810: PUSH
12811: LD_INT 4
12813: PUSH
12814: EMPTY
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: PUSH
12820: LD_INT 18
12822: PUSH
12823: LD_INT 88
12825: PUSH
12826: LD_INT 97
12828: PUSH
12829: LD_INT 2
12831: PUSH
12832: EMPTY
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 28
12840: PUSH
12841: LD_INT 106
12843: PUSH
12844: LD_INT 92
12846: PUSH
12847: LD_INT 2
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: LIST
12854: LIST
12855: PUSH
12856: LD_INT 32
12858: PUSH
12859: LD_INT 88
12861: PUSH
12862: LD_INT 89
12864: PUSH
12865: LD_INT 2
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: PUSH
12874: LD_INT 32
12876: PUSH
12877: LD_INT 86
12879: PUSH
12880: LD_INT 90
12882: PUSH
12883: LD_INT 2
12885: PUSH
12886: EMPTY
12887: LIST
12888: LIST
12889: LIST
12890: LIST
12891: PUSH
12892: LD_INT 32
12894: PUSH
12895: LD_INT 85
12897: PUSH
12898: LD_INT 99
12900: PUSH
12901: LD_INT 2
12903: PUSH
12904: EMPTY
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: LD_INT 32
12912: PUSH
12913: LD_INT 85
12915: PUSH
12916: LD_INT 107
12918: PUSH
12919: LD_INT 1
12921: PUSH
12922: EMPTY
12923: LIST
12924: LIST
12925: LIST
12926: LIST
12927: PUSH
12928: LD_INT 33
12930: PUSH
12931: LD_INT 105
12933: PUSH
12934: LD_INT 99
12936: PUSH
12937: LD_INT 1
12939: PUSH
12940: EMPTY
12941: LIST
12942: LIST
12943: LIST
12944: LIST
12945: PUSH
12946: LD_INT 33
12948: PUSH
12949: LD_INT 102
12951: PUSH
12952: LD_INT 92
12954: PUSH
12955: LD_INT 3
12957: PUSH
12958: EMPTY
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: PUSH
12964: LD_INT 33
12966: PUSH
12967: LD_INT 105
12969: PUSH
12970: LD_INT 92
12972: PUSH
12973: LD_INT 2
12975: PUSH
12976: EMPTY
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: PUSH
12982: LD_INT 6
12984: PUSH
12985: LD_INT 92
12987: PUSH
12988: LD_INT 110
12990: PUSH
12991: LD_INT 0
12993: PUSH
12994: EMPTY
12995: LIST
12996: LIST
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 6
13002: PUSH
13003: LD_INT 103
13005: PUSH
13006: LD_INT 103
13008: PUSH
13009: LD_INT 5
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: PUSH
13018: LD_INT 21
13020: PUSH
13021: LD_INT 89
13023: PUSH
13024: LD_INT 101
13026: PUSH
13027: LD_INT 1
13029: PUSH
13030: EMPTY
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: PUSH
13036: LD_INT 16
13038: PUSH
13039: LD_INT 95
13041: PUSH
13042: LD_INT 104
13044: PUSH
13045: LD_INT 4
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 24
13056: PUSH
13057: LD_INT 92
13059: PUSH
13060: LD_INT 105
13062: PUSH
13063: LD_INT 0
13065: PUSH
13066: EMPTY
13067: LIST
13068: LIST
13069: LIST
13070: LIST
13071: PUSH
13072: EMPTY
13073: LIST
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: LIST
13079: LIST
13080: LIST
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: LIST
13091: LIST
13092: LIST
13093: LIST
13094: LIST
13095: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13096: LD_ADDR_VAR 0 3
13100: PUSH
13101: LD_INT 22
13103: PUSH
13104: LD_INT 3
13106: PUSH
13107: EMPTY
13108: LIST
13109: LIST
13110: PUSH
13111: LD_INT 3
13113: PUSH
13114: LD_INT 25
13116: PUSH
13117: LD_INT 2
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: EMPTY
13129: LIST
13130: LIST
13131: PPUSH
13132: CALL_OW 69
13136: PUSH
13137: FOR_IN
13138: IFFALSE 13157
// AddComAgressiveMove ( i , 96 , 99 ) ;
13140: LD_VAR 0 3
13144: PPUSH
13145: LD_INT 96
13147: PPUSH
13148: LD_INT 99
13150: PPUSH
13151: CALL_OW 174
13155: GO 13137
13157: POP
13158: POP
// for i := 1 to buildingsTab do
13159: LD_ADDR_VAR 0 3
13163: PUSH
13164: DOUBLE
13165: LD_INT 1
13167: DEC
13168: ST_TO_ADDR
13169: LD_VAR 0 5
13173: PUSH
13174: FOR_TO
13175: IFFALSE 13248
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13177: LD_VAR 0 4
13181: PPUSH
13182: LD_VAR 0 5
13186: PUSH
13187: LD_VAR 0 3
13191: ARRAY
13192: PUSH
13193: LD_INT 1
13195: ARRAY
13196: PPUSH
13197: LD_VAR 0 5
13201: PUSH
13202: LD_VAR 0 3
13206: ARRAY
13207: PUSH
13208: LD_INT 2
13210: ARRAY
13211: PPUSH
13212: LD_VAR 0 5
13216: PUSH
13217: LD_VAR 0 3
13221: ARRAY
13222: PUSH
13223: LD_INT 3
13225: ARRAY
13226: PPUSH
13227: LD_VAR 0 5
13231: PUSH
13232: LD_VAR 0 3
13236: ARRAY
13237: PUSH
13238: LD_INT 4
13240: ARRAY
13241: PPUSH
13242: CALL_OW 205
13246: GO 13174
13248: POP
13249: POP
// end ; if position = 3 then
13250: LD_VAR 0 1
13254: PUSH
13255: LD_INT 3
13257: EQUAL
13258: IFFALSE 14044
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13260: LD_ADDR_VAR 0 4
13264: PUSH
13265: LD_INT 22
13267: PUSH
13268: LD_INT 3
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PUSH
13275: LD_INT 25
13277: PUSH
13278: LD_INT 2
13280: PUSH
13281: EMPTY
13282: LIST
13283: LIST
13284: PUSH
13285: EMPTY
13286: LIST
13287: LIST
13288: PPUSH
13289: CALL_OW 69
13293: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13294: LD_ADDR_VAR 0 5
13298: PUSH
13299: LD_INT 0
13301: PUSH
13302: LD_INT 151
13304: PUSH
13305: LD_INT 71
13307: PUSH
13308: LD_INT 4
13310: PUSH
13311: EMPTY
13312: LIST
13313: LIST
13314: LIST
13315: LIST
13316: PUSH
13317: LD_INT 4
13319: PUSH
13320: LD_INT 145
13322: PUSH
13323: LD_INT 53
13325: PUSH
13326: LD_INT 3
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: PUSH
13335: LD_INT 4
13337: PUSH
13338: LD_INT 172
13340: PUSH
13341: LD_INT 102
13343: PUSH
13344: LD_INT 5
13346: PUSH
13347: EMPTY
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: PUSH
13353: LD_INT 29
13355: PUSH
13356: LD_INT 152
13358: PUSH
13359: LD_INT 85
13361: PUSH
13362: LD_INT 3
13364: PUSH
13365: EMPTY
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: PUSH
13371: LD_INT 30
13373: PUSH
13374: LD_INT 156
13376: PUSH
13377: LD_INT 92
13379: PUSH
13380: LD_INT 3
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: LIST
13387: LIST
13388: PUSH
13389: LD_INT 28
13391: PUSH
13392: LD_INT 151
13394: PUSH
13395: LD_INT 66
13397: PUSH
13398: LD_INT 4
13400: PUSH
13401: EMPTY
13402: LIST
13403: LIST
13404: LIST
13405: LIST
13406: PUSH
13407: LD_INT 2
13409: PUSH
13410: LD_INT 163
13412: PUSH
13413: LD_INT 95
13415: PUSH
13416: LD_INT 5
13418: PUSH
13419: EMPTY
13420: LIST
13421: LIST
13422: LIST
13423: LIST
13424: PUSH
13425: LD_INT 28
13427: PUSH
13428: LD_INT 149
13430: PUSH
13431: LD_INT 63
13433: PUSH
13434: LD_INT 4
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 17
13445: PUSH
13446: LD_INT 167
13448: PUSH
13449: LD_INT 99
13451: PUSH
13452: LD_INT 5
13454: PUSH
13455: EMPTY
13456: LIST
13457: LIST
13458: LIST
13459: LIST
13460: PUSH
13461: LD_INT 18
13463: PUSH
13464: LD_INT 163
13466: PUSH
13467: LD_INT 98
13469: PUSH
13470: LD_INT 0
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: PUSH
13479: LD_INT 28
13481: PUSH
13482: LD_INT 154
13484: PUSH
13485: LD_INT 70
13487: PUSH
13488: LD_INT 4
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: PUSH
13497: LD_INT 32
13499: PUSH
13500: LD_INT 155
13502: PUSH
13503: LD_INT 62
13505: PUSH
13506: LD_INT 4
13508: PUSH
13509: EMPTY
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: PUSH
13515: LD_INT 32
13517: PUSH
13518: LD_INT 161
13520: PUSH
13521: LD_INT 69
13523: PUSH
13524: LD_INT 4
13526: PUSH
13527: EMPTY
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 32
13535: PUSH
13536: LD_INT 168
13538: PUSH
13539: LD_INT 78
13541: PUSH
13542: LD_INT 4
13544: PUSH
13545: EMPTY
13546: LIST
13547: LIST
13548: LIST
13549: LIST
13550: PUSH
13551: LD_INT 32
13553: PUSH
13554: LD_INT 163
13556: PUSH
13557: LD_INT 80
13559: PUSH
13560: LD_INT 5
13562: PUSH
13563: EMPTY
13564: LIST
13565: LIST
13566: LIST
13567: LIST
13568: PUSH
13569: LD_INT 32
13571: PUSH
13572: LD_INT 136
13574: PUSH
13575: LD_INT 73
13577: PUSH
13578: LD_INT 0
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: LIST
13585: LIST
13586: PUSH
13587: LD_INT 32
13589: PUSH
13590: LD_INT 157
13592: PUSH
13593: LD_INT 98
13595: PUSH
13596: LD_INT 0
13598: PUSH
13599: EMPTY
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: PUSH
13605: LD_INT 32
13607: PUSH
13608: LD_INT 150
13610: PUSH
13611: LD_INT 87
13613: PUSH
13614: LD_INT 1
13616: PUSH
13617: EMPTY
13618: LIST
13619: LIST
13620: LIST
13621: LIST
13622: PUSH
13623: LD_INT 33
13625: PUSH
13626: LD_INT 171
13628: PUSH
13629: LD_INT 97
13631: PUSH
13632: LD_INT 4
13634: PUSH
13635: EMPTY
13636: LIST
13637: LIST
13638: LIST
13639: LIST
13640: PUSH
13641: LD_INT 33
13643: PUSH
13644: LD_INT 168
13646: PUSH
13647: LD_INT 92
13649: PUSH
13650: LD_INT 4
13652: PUSH
13653: EMPTY
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: PUSH
13659: LD_INT 33
13661: PUSH
13662: LD_INT 166
13664: PUSH
13665: LD_INT 80
13667: PUSH
13668: LD_INT 5
13670: PUSH
13671: EMPTY
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 33
13679: PUSH
13680: LD_INT 141
13682: PUSH
13683: LD_INT 54
13685: PUSH
13686: LD_INT 2
13688: PUSH
13689: EMPTY
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: PUSH
13695: LD_INT 33
13697: PUSH
13698: LD_INT 133
13700: PUSH
13701: LD_INT 57
13703: PUSH
13704: LD_INT 2
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 33
13715: PUSH
13716: LD_INT 132
13718: PUSH
13719: LD_INT 61
13721: PUSH
13722: LD_INT 2
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: PUSH
13731: LD_INT 33
13733: PUSH
13734: LD_INT 150
13736: PUSH
13737: LD_INT 82
13739: PUSH
13740: LD_INT 0
13742: PUSH
13743: EMPTY
13744: LIST
13745: LIST
13746: LIST
13747: LIST
13748: PUSH
13749: LD_INT 33
13751: PUSH
13752: LD_INT 132
13754: PUSH
13755: LD_INT 72
13757: PUSH
13758: LD_INT 0
13760: PUSH
13761: EMPTY
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: PUSH
13767: LD_INT 6
13769: PUSH
13770: LD_INT 146
13772: PUSH
13773: LD_INT 64
13775: PUSH
13776: LD_INT 4
13778: PUSH
13779: EMPTY
13780: LIST
13781: LIST
13782: LIST
13783: LIST
13784: PUSH
13785: LD_INT 6
13787: PUSH
13788: LD_INT 159
13790: PUSH
13791: LD_INT 85
13793: PUSH
13794: LD_INT 4
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: LIST
13801: LIST
13802: PUSH
13803: LD_INT 21
13805: PUSH
13806: LD_INT 163
13808: PUSH
13809: LD_INT 91
13811: PUSH
13812: LD_INT 3
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: LIST
13819: LIST
13820: PUSH
13821: LD_INT 16
13823: PUSH
13824: LD_INT 166
13826: PUSH
13827: LD_INT 95
13829: PUSH
13830: LD_INT 4
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: PUSH
13839: LD_INT 24
13841: PUSH
13842: LD_INT 159
13844: PUSH
13845: LD_INT 95
13847: PUSH
13848: LD_INT 1
13850: PUSH
13851: EMPTY
13852: LIST
13853: LIST
13854: LIST
13855: LIST
13856: PUSH
13857: EMPTY
13858: LIST
13859: LIST
13860: LIST
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: LIST
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: LIST
13873: LIST
13874: LIST
13875: LIST
13876: LIST
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: LIST
13889: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13890: LD_ADDR_VAR 0 3
13894: PUSH
13895: LD_INT 22
13897: PUSH
13898: LD_INT 3
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: LD_INT 3
13907: PUSH
13908: LD_INT 25
13910: PUSH
13911: LD_INT 2
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: EMPTY
13923: LIST
13924: LIST
13925: PPUSH
13926: CALL_OW 69
13930: PUSH
13931: FOR_IN
13932: IFFALSE 13951
// AddComAgressiveMove ( i , 141 , 65 ) ;
13934: LD_VAR 0 3
13938: PPUSH
13939: LD_INT 141
13941: PPUSH
13942: LD_INT 65
13944: PPUSH
13945: CALL_OW 174
13949: GO 13931
13951: POP
13952: POP
// for i := 1 to buildingsTab do
13953: LD_ADDR_VAR 0 3
13957: PUSH
13958: DOUBLE
13959: LD_INT 1
13961: DEC
13962: ST_TO_ADDR
13963: LD_VAR 0 5
13967: PUSH
13968: FOR_TO
13969: IFFALSE 14042
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13971: LD_VAR 0 4
13975: PPUSH
13976: LD_VAR 0 5
13980: PUSH
13981: LD_VAR 0 3
13985: ARRAY
13986: PUSH
13987: LD_INT 1
13989: ARRAY
13990: PPUSH
13991: LD_VAR 0 5
13995: PUSH
13996: LD_VAR 0 3
14000: ARRAY
14001: PUSH
14002: LD_INT 2
14004: ARRAY
14005: PPUSH
14006: LD_VAR 0 5
14010: PUSH
14011: LD_VAR 0 3
14015: ARRAY
14016: PUSH
14017: LD_INT 3
14019: ARRAY
14020: PPUSH
14021: LD_VAR 0 5
14025: PUSH
14026: LD_VAR 0 3
14030: ARRAY
14031: PUSH
14032: LD_INT 4
14034: ARRAY
14035: PPUSH
14036: CALL_OW 205
14040: GO 13968
14042: POP
14043: POP
// end ; end ;
14044: LD_VAR 0 2
14048: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14049: LD_INT 0
14051: PPUSH
14052: PPUSH
14053: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14054: LD_ADDR_EXP 66
14058: PUSH
14059: LD_INT 0
14061: PUSH
14062: LD_INT 71
14064: PUSH
14065: LD_INT 15
14067: PUSH
14068: LD_INT 3
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: PUSH
14077: LD_INT 6
14079: PUSH
14080: LD_INT 77
14082: PUSH
14083: LD_INT 18
14085: PUSH
14086: LD_INT 3
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: PUSH
14095: LD_INT 4
14097: PUSH
14098: LD_INT 77
14100: PUSH
14101: LD_INT 26
14103: PUSH
14104: LD_INT 0
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: LIST
14112: PUSH
14113: LD_INT 31
14115: PUSH
14116: LD_INT 72
14118: PUSH
14119: LD_INT 24
14121: PUSH
14122: LD_INT 0
14124: PUSH
14125: EMPTY
14126: LIST
14127: LIST
14128: LIST
14129: LIST
14130: PUSH
14131: LD_INT 31
14133: PUSH
14134: LD_INT 82
14136: PUSH
14137: LD_INT 28
14139: PUSH
14140: LD_INT 0
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: LIST
14147: LIST
14148: PUSH
14149: LD_INT 31
14151: PUSH
14152: LD_INT 84
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 3
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: LIST
14165: LIST
14166: PUSH
14167: LD_INT 31
14169: PUSH
14170: LD_INT 66
14172: PUSH
14173: LD_INT 14
14175: PUSH
14176: LD_INT 2
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: LIST
14183: LIST
14184: PUSH
14185: LD_INT 27
14187: PUSH
14188: LD_INT 67
14190: PUSH
14191: LD_INT 18
14193: PUSH
14194: LD_INT 5
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: LIST
14201: LIST
14202: PUSH
14203: LD_INT 27
14205: PUSH
14206: LD_INT 69
14208: PUSH
14209: LD_INT 23
14211: PUSH
14212: LD_INT 2
14214: PUSH
14215: EMPTY
14216: LIST
14217: LIST
14218: LIST
14219: LIST
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: LIST
14227: LIST
14228: LIST
14229: LIST
14230: LIST
14231: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14232: LD_ADDR_VAR 0 3
14236: PUSH
14237: LD_INT 22
14239: PUSH
14240: LD_INT 2
14242: PUSH
14243: EMPTY
14244: LIST
14245: LIST
14246: PUSH
14247: LD_INT 25
14249: PUSH
14250: LD_INT 2
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: EMPTY
14258: LIST
14259: LIST
14260: PPUSH
14261: CALL_OW 69
14265: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14266: LD_VAR 0 3
14270: PPUSH
14271: LD_EXP 66
14275: PUSH
14276: LD_INT 1
14278: ARRAY
14279: PUSH
14280: LD_INT 1
14282: ARRAY
14283: PPUSH
14284: LD_EXP 66
14288: PUSH
14289: LD_INT 1
14291: ARRAY
14292: PUSH
14293: LD_INT 2
14295: ARRAY
14296: PPUSH
14297: LD_EXP 66
14301: PUSH
14302: LD_INT 1
14304: ARRAY
14305: PUSH
14306: LD_INT 3
14308: ARRAY
14309: PPUSH
14310: LD_EXP 66
14314: PUSH
14315: LD_INT 1
14317: ARRAY
14318: PUSH
14319: LD_INT 4
14321: ARRAY
14322: PPUSH
14323: CALL_OW 205
// end ;
14327: LD_VAR 0 1
14331: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14332: LD_INT 0
14334: PPUSH
14335: PPUSH
14336: PPUSH
14337: PPUSH
14338: PPUSH
14339: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14340: LD_ADDR_VAR 0 7
14344: PUSH
14345: LD_INT 22
14347: PUSH
14348: LD_VAR 0 1
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: PUSH
14357: LD_INT 25
14359: PUSH
14360: LD_INT 9
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PPUSH
14371: CALL_OW 69
14375: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14376: LD_ADDR_VAR 0 8
14380: PUSH
14381: LD_INT 22
14383: PUSH
14384: LD_VAR 0 2
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 3
14395: PUSH
14396: LD_INT 21
14398: PUSH
14399: LD_INT 3
14401: PUSH
14402: EMPTY
14403: LIST
14404: LIST
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: EMPTY
14411: LIST
14412: LIST
14413: PPUSH
14414: CALL_OW 69
14418: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14419: LD_ADDR_VAR 0 5
14423: PUSH
14424: LD_INT 1
14426: PPUSH
14427: LD_INT 3
14429: PPUSH
14430: CALL_OW 12
14434: ST_TO_ADDR
// for i = 1 to list do
14435: LD_ADDR_VAR 0 6
14439: PUSH
14440: DOUBLE
14441: LD_INT 1
14443: DEC
14444: ST_TO_ADDR
14445: LD_VAR 0 7
14449: PUSH
14450: FOR_TO
14451: IFFALSE 15441
// for ta in filter do
14453: LD_ADDR_VAR 0 4
14457: PUSH
14458: LD_VAR 0 8
14462: PUSH
14463: FOR_IN
14464: IFFALSE 15437
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14466: LD_VAR 0 7
14470: PUSH
14471: LD_VAR 0 6
14475: ARRAY
14476: PPUSH
14477: LD_VAR 0 4
14481: PPUSH
14482: CALL_OW 296
14486: PUSH
14487: LD_INT 15
14489: LESSEQUAL
14490: IFFALSE 15435
// begin case c of 1 :
14492: LD_VAR 0 5
14496: PUSH
14497: LD_INT 1
14499: DOUBLE
14500: EQUAL
14501: IFTRUE 14505
14503: GO 14937
14505: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14506: LD_VAR 0 7
14510: PUSH
14511: LD_VAR 0 6
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 4
14521: PPUSH
14522: CALL_OW 250
14526: PPUSH
14527: LD_VAR 0 4
14531: PPUSH
14532: CALL_OW 251
14536: PPUSH
14537: CALL_OW 154
// if eventVar2 = 0 then
14541: LD_EXP 64
14545: PUSH
14546: LD_INT 0
14548: EQUAL
14549: IFFALSE 14935
// begin eventVar2 = 1 ;
14551: LD_ADDR_EXP 64
14555: PUSH
14556: LD_INT 1
14558: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14559: LD_INT 245
14561: PPUSH
14562: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14566: LD_VAR 0 4
14570: PPUSH
14571: CALL_OW 250
14575: PPUSH
14576: LD_VAR 0 4
14580: PPUSH
14581: CALL_OW 251
14585: PPUSH
14586: CALL_OW 84
// DialogueOn ;
14590: CALL_OW 6
// if IsOK ( Cyrus ) then
14594: LD_EXP 5
14598: PPUSH
14599: CALL_OW 302
14603: IFFALSE 14619
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14605: LD_EXP 5
14609: PPUSH
14610: LD_STRING D9a-Cyrus-1
14612: PPUSH
14613: CALL_OW 88
// end else
14617: GO 14741
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14619: LD_INT 22
14621: PUSH
14622: LD_INT 1
14624: PUSH
14625: EMPTY
14626: LIST
14627: LIST
14628: PUSH
14629: LD_INT 26
14631: PUSH
14632: LD_INT 1
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 2
14641: PUSH
14642: LD_INT 25
14644: PUSH
14645: LD_INT 1
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: LD_INT 25
14654: PUSH
14655: LD_INT 2
14657: PUSH
14658: EMPTY
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 25
14664: PUSH
14665: LD_INT 3
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 25
14674: PUSH
14675: LD_INT 4
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PUSH
14682: LD_INT 25
14684: PUSH
14685: LD_INT 5
14687: PUSH
14688: EMPTY
14689: LIST
14690: LIST
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: LIST
14698: LIST
14699: PUSH
14700: EMPTY
14701: LIST
14702: LIST
14703: LIST
14704: PPUSH
14705: CALL_OW 69
14709: PUSH
14710: LD_EXP 1
14714: PUSH
14715: LD_EXP 14
14719: PUSH
14720: LD_EXP 5
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: LIST
14729: DIFF
14730: PPUSH
14731: LD_STRING D9a-Sol1-1
14733: PPUSH
14734: LD_STRING D9a-Sol1-1
14736: PPUSH
14737: CALL 10896 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14741: LD_INT 22
14743: PUSH
14744: LD_INT 1
14746: PUSH
14747: EMPTY
14748: LIST
14749: LIST
14750: PUSH
14751: LD_INT 26
14753: PUSH
14754: LD_INT 1
14756: PUSH
14757: EMPTY
14758: LIST
14759: LIST
14760: PUSH
14761: LD_INT 2
14763: PUSH
14764: LD_INT 25
14766: PUSH
14767: LD_INT 1
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: LD_INT 25
14776: PUSH
14777: LD_INT 2
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PUSH
14784: LD_INT 25
14786: PUSH
14787: LD_INT 3
14789: PUSH
14790: EMPTY
14791: LIST
14792: LIST
14793: PUSH
14794: LD_INT 25
14796: PUSH
14797: LD_INT 4
14799: PUSH
14800: EMPTY
14801: LIST
14802: LIST
14803: PUSH
14804: LD_INT 25
14806: PUSH
14807: LD_INT 5
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: PUSH
14814: EMPTY
14815: LIST
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: LIST
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: LIST
14826: PPUSH
14827: CALL_OW 69
14831: PUSH
14832: LD_EXP 1
14836: PUSH
14837: LD_EXP 14
14841: PUSH
14842: LD_EXP 5
14846: PUSH
14847: EMPTY
14848: LIST
14849: LIST
14850: LIST
14851: DIFF
14852: PPUSH
14853: LD_STRING D9b-Sol1-1
14855: PPUSH
14856: LD_STRING D9b-Sol1-1
14858: PPUSH
14859: CALL 10896 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14863: LD_STRING 09_arInfo
14865: PPUSH
14866: LD_INT 0
14868: PPUSH
14869: CALL_OW 30
14873: PUSH
14874: LD_INT 1
14876: EQUAL
14877: IFFALSE 14891
// Say ( JMM , D9a-JMM-1 ) ;
14879: LD_EXP 1
14883: PPUSH
14884: LD_STRING D9a-JMM-1
14886: PPUSH
14887: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14891: LD_EXP 1
14895: PPUSH
14896: LD_STRING D9c-JMM-1
14898: PPUSH
14899: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14903: LD_INT 12
14905: PPUSH
14906: LD_INT 1
14908: PPUSH
14909: CALL_OW 321
14913: PUSH
14914: LD_INT 2
14916: EQUAL
14917: IFFALSE 14931
// Say ( JMM , D9c-JMM-1a ) ;
14919: LD_EXP 1
14923: PPUSH
14924: LD_STRING D9c-JMM-1a
14926: PPUSH
14927: CALL_OW 88
// DialogueOff ;
14931: CALL_OW 7
// end ; end ; 2 :
14935: GO 15435
14937: LD_INT 2
14939: DOUBLE
14940: EQUAL
14941: IFTRUE 14945
14943: GO 15403
14945: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
14946: LD_VAR 0 7
14950: PUSH
14951: LD_VAR 0 6
14955: ARRAY
14956: PPUSH
14957: LD_VAR 0 4
14961: PPUSH
14962: CALL_OW 250
14966: PUSH
14967: LD_INT 1
14969: NEG
14970: PPUSH
14971: LD_INT 1
14973: PPUSH
14974: CALL_OW 12
14978: PLUS
14979: PPUSH
14980: LD_VAR 0 4
14984: PPUSH
14985: CALL_OW 251
14989: PUSH
14990: LD_INT 1
14992: NEG
14993: PPUSH
14994: LD_INT 1
14996: PPUSH
14997: CALL_OW 12
15001: PLUS
15002: PPUSH
15003: CALL_OW 153
// if eventVar2 = 0 then
15007: LD_EXP 64
15011: PUSH
15012: LD_INT 0
15014: EQUAL
15015: IFFALSE 15401
// begin eventVar2 = 1 ;
15017: LD_ADDR_EXP 64
15021: PUSH
15022: LD_INT 1
15024: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15025: LD_INT 245
15027: PPUSH
15028: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15032: LD_VAR 0 4
15036: PPUSH
15037: CALL_OW 250
15041: PPUSH
15042: LD_VAR 0 4
15046: PPUSH
15047: CALL_OW 251
15051: PPUSH
15052: CALL_OW 84
// DialogueOn ;
15056: CALL_OW 6
// if IsOK ( Cyrus ) then
15060: LD_EXP 5
15064: PPUSH
15065: CALL_OW 302
15069: IFFALSE 15085
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15071: LD_EXP 5
15075: PPUSH
15076: LD_STRING D9a-Cyrus-1
15078: PPUSH
15079: CALL_OW 88
// end else
15083: GO 15207
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15085: LD_INT 22
15087: PUSH
15088: LD_INT 1
15090: PUSH
15091: EMPTY
15092: LIST
15093: LIST
15094: PUSH
15095: LD_INT 26
15097: PUSH
15098: LD_INT 1
15100: PUSH
15101: EMPTY
15102: LIST
15103: LIST
15104: PUSH
15105: LD_INT 2
15107: PUSH
15108: LD_INT 25
15110: PUSH
15111: LD_INT 1
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 25
15120: PUSH
15121: LD_INT 2
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: LD_INT 25
15130: PUSH
15131: LD_INT 3
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: PUSH
15138: LD_INT 25
15140: PUSH
15141: LD_INT 4
15143: PUSH
15144: EMPTY
15145: LIST
15146: LIST
15147: PUSH
15148: LD_INT 25
15150: PUSH
15151: LD_INT 5
15153: PUSH
15154: EMPTY
15155: LIST
15156: LIST
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: LIST
15162: LIST
15163: LIST
15164: LIST
15165: PUSH
15166: EMPTY
15167: LIST
15168: LIST
15169: LIST
15170: PPUSH
15171: CALL_OW 69
15175: PUSH
15176: LD_EXP 1
15180: PUSH
15181: LD_EXP 14
15185: PUSH
15186: LD_EXP 5
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: LIST
15195: DIFF
15196: PPUSH
15197: LD_STRING D9a-Sol1-1
15199: PPUSH
15200: LD_STRING D9a-Sol1-1
15202: PPUSH
15203: CALL 10896 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15207: LD_INT 22
15209: PUSH
15210: LD_INT 1
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 26
15219: PUSH
15220: LD_INT 1
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: LD_INT 2
15229: PUSH
15230: LD_INT 25
15232: PUSH
15233: LD_INT 1
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: LD_INT 25
15242: PUSH
15243: LD_INT 2
15245: PUSH
15246: EMPTY
15247: LIST
15248: LIST
15249: PUSH
15250: LD_INT 25
15252: PUSH
15253: LD_INT 3
15255: PUSH
15256: EMPTY
15257: LIST
15258: LIST
15259: PUSH
15260: LD_INT 25
15262: PUSH
15263: LD_INT 4
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: PUSH
15270: LD_INT 25
15272: PUSH
15273: LD_INT 5
15275: PUSH
15276: EMPTY
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: LIST
15283: LIST
15284: LIST
15285: LIST
15286: LIST
15287: PUSH
15288: EMPTY
15289: LIST
15290: LIST
15291: LIST
15292: PPUSH
15293: CALL_OW 69
15297: PUSH
15298: LD_EXP 1
15302: PUSH
15303: LD_EXP 14
15307: PUSH
15308: LD_EXP 5
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: LIST
15317: DIFF
15318: PPUSH
15319: LD_STRING D9b-Sol1-1
15321: PPUSH
15322: LD_STRING D9b-Sol1-1
15324: PPUSH
15325: CALL 10896 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15329: LD_STRING 09_arInfo
15331: PPUSH
15332: LD_INT 0
15334: PPUSH
15335: CALL_OW 30
15339: PUSH
15340: LD_INT 1
15342: EQUAL
15343: IFFALSE 15357
// Say ( JMM , D9a-JMM-1 ) ;
15345: LD_EXP 1
15349: PPUSH
15350: LD_STRING D9a-JMM-1
15352: PPUSH
15353: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15357: LD_EXP 1
15361: PPUSH
15362: LD_STRING D9c-JMM-1
15364: PPUSH
15365: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15369: LD_INT 12
15371: PPUSH
15372: LD_INT 1
15374: PPUSH
15375: CALL_OW 321
15379: PUSH
15380: LD_INT 2
15382: EQUAL
15383: IFFALSE 15397
// Say ( JMM , D9c-JMM-1a ) ;
15385: LD_EXP 1
15389: PPUSH
15390: LD_STRING D9c-JMM-1a
15392: PPUSH
15393: CALL_OW 88
// DialogueOff ;
15397: CALL_OW 7
// end ; end ; 3 :
15401: GO 15435
15403: LD_INT 3
15405: DOUBLE
15406: EQUAL
15407: IFTRUE 15411
15409: GO 15434
15411: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15412: LD_VAR 0 7
15416: PUSH
15417: LD_VAR 0 6
15421: ARRAY
15422: PPUSH
15423: LD_VAR 0 4
15427: PPUSH
15428: CALL_OW 115
15432: GO 15435
15434: POP
// end ; end ;
15435: GO 14463
15437: POP
15438: POP
15439: GO 14450
15441: POP
15442: POP
// end ;
15443: LD_VAR 0 3
15447: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15448: LD_INT 0
15450: PPUSH
15451: PPUSH
15452: PPUSH
15453: PPUSH
// for i = 1 to 72 do
15454: LD_ADDR_VAR 0 5
15458: PUSH
15459: DOUBLE
15460: LD_INT 1
15462: DEC
15463: ST_TO_ADDR
15464: LD_INT 72
15466: PUSH
15467: FOR_TO
15468: IFFALSE 15526
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15470: LD_VAR 0 5
15474: PPUSH
15475: LD_VAR 0 1
15479: PPUSH
15480: CALL_OW 321
15484: PUSH
15485: LD_INT 1
15487: EQUAL
15488: PUSH
15489: LD_VAR 0 5
15493: PPUSH
15494: LD_VAR 0 3
15498: PPUSH
15499: CALL_OW 482
15503: PUSH
15504: LD_INT 1
15506: EQUAL
15507: AND
15508: IFFALSE 15524
// AddComResearch ( lab , i ) ;
15510: LD_VAR 0 2
15514: PPUSH
15515: LD_VAR 0 5
15519: PPUSH
15520: CALL_OW 184
15524: GO 15467
15526: POP
15527: POP
// end ;
15528: LD_VAR 0 4
15532: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15533: LD_INT 0
15535: PPUSH
15536: PPUSH
15537: PPUSH
15538: PPUSH
15539: PPUSH
15540: PPUSH
15541: PPUSH
15542: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15543: LD_ADDR_VAR 0 6
15547: PUSH
15548: LD_INT 22
15550: PUSH
15551: LD_VAR 0 1
15555: PUSH
15556: EMPTY
15557: LIST
15558: LIST
15559: PUSH
15560: LD_INT 56
15562: PUSH
15563: EMPTY
15564: LIST
15565: PUSH
15566: LD_INT 24
15568: PUSH
15569: LD_INT 700
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: PUSH
15576: LD_INT 3
15578: PUSH
15579: LD_INT 60
15581: PUSH
15582: EMPTY
15583: LIST
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PUSH
15589: LD_INT 2
15591: PUSH
15592: LD_INT 25
15594: PUSH
15595: LD_INT 1
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PUSH
15602: LD_INT 25
15604: PUSH
15605: LD_INT 9
15607: PUSH
15608: EMPTY
15609: LIST
15610: LIST
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: LIST
15616: PUSH
15617: EMPTY
15618: LIST
15619: LIST
15620: LIST
15621: LIST
15622: LIST
15623: PPUSH
15624: CALL_OW 69
15628: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15629: LD_ADDR_VAR 0 7
15633: PUSH
15634: LD_INT 22
15636: PUSH
15637: LD_VAR 0 1
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PUSH
15646: LD_INT 30
15648: PUSH
15649: LD_INT 32
15651: PUSH
15652: EMPTY
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 58
15658: PUSH
15659: EMPTY
15660: LIST
15661: PUSH
15662: LD_INT 24
15664: PUSH
15665: LD_INT 251
15667: PUSH
15668: EMPTY
15669: LIST
15670: LIST
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: PPUSH
15678: CALL_OW 69
15682: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15683: LD_ADDR_VAR 0 9
15687: PUSH
15688: LD_INT 22
15690: PUSH
15691: LD_VAR 0 1
15695: PUSH
15696: EMPTY
15697: LIST
15698: LIST
15699: PUSH
15700: LD_INT 2
15702: PUSH
15703: LD_INT 30
15705: PUSH
15706: LD_INT 4
15708: PUSH
15709: EMPTY
15710: LIST
15711: LIST
15712: PUSH
15713: LD_INT 30
15715: PUSH
15716: LD_INT 5
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PUSH
15723: EMPTY
15724: LIST
15725: LIST
15726: LIST
15727: PUSH
15728: LD_INT 24
15730: PUSH
15731: LD_INT 251
15733: PUSH
15734: EMPTY
15735: LIST
15736: LIST
15737: PUSH
15738: EMPTY
15739: LIST
15740: LIST
15741: LIST
15742: PPUSH
15743: CALL_OW 69
15747: ST_TO_ADDR
// if barrackList > 0 then
15748: LD_VAR 0 9
15752: PUSH
15753: LD_INT 0
15755: GREATER
15756: IFFALSE 15891
// begin if turretList = 0 then
15758: LD_VAR 0 7
15762: PUSH
15763: LD_INT 0
15765: EQUAL
15766: IFFALSE 15815
// begin for i in soldiers_list do
15768: LD_ADDR_VAR 0 4
15772: PUSH
15773: LD_VAR 0 6
15777: PUSH
15778: FOR_IN
15779: IFFALSE 15811
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15781: LD_VAR 0 4
15785: PPUSH
15786: LD_VAR 0 9
15790: PUSH
15791: LD_INT 1
15793: PPUSH
15794: LD_VAR 0 9
15798: PPUSH
15799: CALL_OW 12
15803: ARRAY
15804: PPUSH
15805: CALL_OW 120
15809: GO 15778
15811: POP
15812: POP
// end else
15813: GO 15891
// begin for i in barrackList do
15815: LD_ADDR_VAR 0 4
15819: PUSH
15820: LD_VAR 0 9
15824: PUSH
15825: FOR_IN
15826: IFFALSE 15889
// begin insideUnits = UnitsInside ( i ) ;
15828: LD_ADDR_VAR 0 10
15832: PUSH
15833: LD_VAR 0 4
15837: PPUSH
15838: CALL_OW 313
15842: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
15843: LD_VAR 0 10
15847: PUSH
15848: LD_INT 1
15850: ARRAY
15851: PPUSH
15852: LD_VAR 0 7
15856: PUSH
15857: LD_INT 1
15859: ARRAY
15860: PPUSH
15861: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
15865: LD_VAR 0 6
15869: PUSH
15870: LD_INT 1
15872: ARRAY
15873: PPUSH
15874: LD_VAR 0 7
15878: PUSH
15879: LD_INT 1
15881: ARRAY
15882: PPUSH
15883: CALL_OW 120
// end ;
15887: GO 15825
15889: POP
15890: POP
// end ; end ; end ;
15891: LD_VAR 0 3
15895: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
15896: LD_INT 0
15898: PPUSH
15899: PPUSH
15900: PPUSH
15901: PPUSH
15902: PPUSH
15903: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
15904: LD_ADDR_VAR 0 6
15908: PUSH
15909: LD_VAR 0 2
15913: PPUSH
15914: CALL_OW 313
15918: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
15919: LD_ADDR_VAR 0 7
15923: PUSH
15924: LD_INT 22
15926: PUSH
15927: LD_VAR 0 1
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: PUSH
15936: LD_INT 25
15938: PUSH
15939: LD_INT 2
15941: PUSH
15942: EMPTY
15943: LIST
15944: LIST
15945: PUSH
15946: LD_INT 24
15948: PUSH
15949: LD_INT 1000
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: PUSH
15956: LD_INT 3
15958: PUSH
15959: LD_INT 54
15961: PUSH
15962: EMPTY
15963: LIST
15964: PUSH
15965: EMPTY
15966: LIST
15967: LIST
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: PPUSH
15975: CALL_OW 69
15979: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15980: LD_ADDR_VAR 0 4
15984: PUSH
15985: LD_INT 22
15987: PUSH
15988: LD_VAR 0 1
15992: PUSH
15993: EMPTY
15994: LIST
15995: LIST
15996: PUSH
15997: LD_INT 21
15999: PUSH
16000: LD_INT 3
16002: PUSH
16003: EMPTY
16004: LIST
16005: LIST
16006: PUSH
16007: LD_INT 3
16009: PUSH
16010: LD_INT 24
16012: PUSH
16013: LD_INT 1000
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: EMPTY
16021: LIST
16022: LIST
16023: PUSH
16024: EMPTY
16025: LIST
16026: LIST
16027: LIST
16028: PUSH
16029: EMPTY
16030: LIST
16031: PPUSH
16032: CALL_OW 69
16036: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16037: LD_VAR 0 4
16041: NOT
16042: PUSH
16043: LD_VAR 0 7
16047: NOT
16048: AND
16049: PUSH
16050: LD_EXP 42
16054: NOT
16055: AND
16056: IFFALSE 16060
// exit ;
16058: GO 16251
// if buildings_list > 0 and engineerOkInside then
16060: LD_VAR 0 4
16064: PUSH
16065: LD_INT 0
16067: GREATER
16068: PUSH
16069: LD_VAR 0 6
16073: AND
16074: IFFALSE 16128
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16076: LD_ADDR_VAR 0 5
16080: PUSH
16081: LD_INT 22
16083: PUSH
16084: LD_VAR 0 1
16088: PUSH
16089: EMPTY
16090: LIST
16091: LIST
16092: PUSH
16093: LD_INT 25
16095: PUSH
16096: LD_INT 2
16098: PUSH
16099: EMPTY
16100: LIST
16101: LIST
16102: PUSH
16103: EMPTY
16104: LIST
16105: LIST
16106: PPUSH
16107: CALL_OW 69
16111: PUSH
16112: FOR_IN
16113: IFFALSE 16126
// ComExitBuilding ( i ) ;
16115: LD_VAR 0 5
16119: PPUSH
16120: CALL_OW 122
16124: GO 16112
16126: POP
16127: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16128: LD_VAR 0 4
16132: PUSH
16133: LD_INT 0
16135: GREATER
16136: PUSH
16137: LD_VAR 0 7
16141: PUSH
16142: LD_INT 0
16144: GREATER
16145: AND
16146: IFFALSE 16200
// begin for i in engineerOkOutside do
16148: LD_ADDR_VAR 0 5
16152: PUSH
16153: LD_VAR 0 7
16157: PUSH
16158: FOR_IN
16159: IFFALSE 16198
// for j in buildings_list do
16161: LD_ADDR_VAR 0 8
16165: PUSH
16166: LD_VAR 0 4
16170: PUSH
16171: FOR_IN
16172: IFFALSE 16194
// ComRepairBuilding ( i , j [ 1 ] ) ;
16174: LD_VAR 0 5
16178: PPUSH
16179: LD_VAR 0 8
16183: PUSH
16184: LD_INT 1
16186: ARRAY
16187: PPUSH
16188: CALL_OW 130
16192: GO 16171
16194: POP
16195: POP
16196: GO 16158
16198: POP
16199: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16200: LD_VAR 0 4
16204: PUSH
16205: LD_INT 0
16207: EQUAL
16208: PUSH
16209: LD_VAR 0 7
16213: PUSH
16214: LD_INT 0
16216: GREATER
16217: AND
16218: IFFALSE 16251
// for i in engineerOkOutside do
16220: LD_ADDR_VAR 0 5
16224: PUSH
16225: LD_VAR 0 7
16229: PUSH
16230: FOR_IN
16231: IFFALSE 16249
// ComEnterUnit ( i , building ) ;
16233: LD_VAR 0 5
16237: PPUSH
16238: LD_VAR 0 2
16242: PPUSH
16243: CALL_OW 120
16247: GO 16230
16249: POP
16250: POP
// end ;
16251: LD_VAR 0 3
16255: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16256: LD_INT 0
16258: PPUSH
16259: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16260: LD_INT 22
16262: PUSH
16263: LD_VAR 0 1
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: LD_INT 25
16274: PUSH
16275: LD_INT 2
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: PPUSH
16286: CALL_OW 69
16290: PUSH
16291: LD_INT 0
16293: GREATER
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_VAR 0 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 21
16309: PUSH
16310: LD_INT 3
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: LD_INT 3
16319: PUSH
16320: LD_INT 24
16322: PUSH
16323: LD_INT 1000
16325: PUSH
16326: EMPTY
16327: LIST
16328: LIST
16329: PUSH
16330: EMPTY
16331: LIST
16332: LIST
16333: PUSH
16334: EMPTY
16335: LIST
16336: LIST
16337: LIST
16338: PPUSH
16339: CALL_OW 69
16343: PUSH
16344: LD_INT 0
16346: EQUAL
16347: AND
16348: PUSH
16349: LD_VAR 0 2
16353: PUSH
16354: LD_INT 0
16356: GREATER
16357: AND
16358: IFFALSE 16457
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16360: LD_ADDR_VAR 0 4
16364: PUSH
16365: LD_INT 22
16367: PUSH
16368: LD_VAR 0 1
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: PUSH
16377: LD_INT 25
16379: PUSH
16380: LD_INT 2
16382: PUSH
16383: EMPTY
16384: LIST
16385: LIST
16386: PUSH
16387: EMPTY
16388: LIST
16389: LIST
16390: PPUSH
16391: CALL_OW 69
16395: PUSH
16396: FOR_IN
16397: IFFALSE 16455
// begin AddComExitBuilding ( i ) ;
16399: LD_VAR 0 4
16403: PPUSH
16404: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16408: LD_VAR 0 4
16412: PPUSH
16413: LD_VAR 0 2
16417: PUSH
16418: LD_INT 1
16420: ARRAY
16421: PPUSH
16422: LD_VAR 0 2
16426: PUSH
16427: LD_INT 2
16429: ARRAY
16430: PPUSH
16431: LD_VAR 0 2
16435: PUSH
16436: LD_INT 3
16438: ARRAY
16439: PPUSH
16440: LD_VAR 0 2
16444: PUSH
16445: LD_INT 4
16447: ARRAY
16448: PPUSH
16449: CALL_OW 205
// end ;
16453: GO 16396
16455: POP
16456: POP
// end ; end ;
16457: LD_VAR 0 3
16461: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16462: LD_INT 0
16464: PPUSH
16465: PPUSH
16466: PPUSH
16467: PPUSH
16468: PPUSH
16469: PPUSH
16470: PPUSH
16471: PPUSH
16472: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16473: LD_ADDR_VAR 0 6
16477: PUSH
16478: LD_INT 22
16480: PUSH
16481: LD_VAR 0 1
16485: PUSH
16486: EMPTY
16487: LIST
16488: LIST
16489: PUSH
16490: LD_INT 25
16492: PUSH
16493: LD_INT 4
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 24
16502: PUSH
16503: LD_INT 251
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: LIST
16514: PPUSH
16515: CALL_OW 69
16519: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16520: LD_ADDR_VAR 0 7
16524: PUSH
16525: LD_VAR 0 3
16529: PPUSH
16530: LD_INT 22
16532: PUSH
16533: LD_VAR 0 1
16537: PUSH
16538: EMPTY
16539: LIST
16540: LIST
16541: PUSH
16542: LD_INT 25
16544: PUSH
16545: LD_INT 4
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 50
16554: PUSH
16555: EMPTY
16556: LIST
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: LIST
16562: PPUSH
16563: CALL_OW 70
16567: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16568: LD_ADDR_VAR 0 10
16572: PUSH
16573: LD_VAR 0 3
16577: PPUSH
16578: LD_INT 22
16580: PUSH
16581: LD_VAR 0 1
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: LD_INT 21
16592: PUSH
16593: LD_INT 1
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 3
16602: PUSH
16603: LD_INT 25
16605: PUSH
16606: LD_INT 3
16608: PUSH
16609: EMPTY
16610: LIST
16611: LIST
16612: PUSH
16613: EMPTY
16614: LIST
16615: LIST
16616: PUSH
16617: LD_INT 3
16619: PUSH
16620: LD_INT 24
16622: PUSH
16623: LD_INT 750
16625: PUSH
16626: EMPTY
16627: LIST
16628: LIST
16629: PUSH
16630: EMPTY
16631: LIST
16632: LIST
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: LIST
16638: LIST
16639: PPUSH
16640: CALL_OW 70
16644: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16645: LD_ADDR_VAR 0 11
16649: PUSH
16650: LD_VAR 0 2
16654: PPUSH
16655: LD_INT 22
16657: PUSH
16658: LD_VAR 0 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 21
16669: PUSH
16670: LD_INT 1
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: LD_INT 3
16679: PUSH
16680: LD_INT 25
16682: PUSH
16683: LD_INT 3
16685: PUSH
16686: EMPTY
16687: LIST
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 3
16696: PUSH
16697: LD_INT 24
16699: PUSH
16700: LD_INT 1000
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: LIST
16715: LIST
16716: PPUSH
16717: CALL_OW 70
16721: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16722: LD_VAR 0 10
16726: NOT
16727: PUSH
16728: LD_VAR 0 7
16732: NOT
16733: AND
16734: PUSH
16735: LD_VAR 0 11
16739: NOT
16740: AND
16741: IFFALSE 16745
// exit ;
16743: GO 17005
// if damageUnits > 0 and sci_list > 0 then
16745: LD_VAR 0 10
16749: PUSH
16750: LD_INT 0
16752: GREATER
16753: PUSH
16754: LD_VAR 0 6
16758: PUSH
16759: LD_INT 0
16761: GREATER
16762: AND
16763: IFFALSE 16796
// for i in damageUnits do
16765: LD_ADDR_VAR 0 8
16769: PUSH
16770: LD_VAR 0 10
16774: PUSH
16775: FOR_IN
16776: IFFALSE 16794
// ComMoveToArea ( i , healArea ) ;
16778: LD_VAR 0 8
16782: PPUSH
16783: LD_VAR 0 2
16787: PPUSH
16788: CALL_OW 113
16792: GO 16775
16794: POP
16795: POP
// if unitsToHeal > 0 and sci_list > 0 then
16796: LD_VAR 0 11
16800: PUSH
16801: LD_INT 0
16803: GREATER
16804: PUSH
16805: LD_VAR 0 6
16809: PUSH
16810: LD_INT 0
16812: GREATER
16813: AND
16814: IFFALSE 16873
// begin for i in sci_list do
16816: LD_ADDR_VAR 0 8
16820: PUSH
16821: LD_VAR 0 6
16825: PUSH
16826: FOR_IN
16827: IFFALSE 16871
// begin ComExitBuilding ( i ) ;
16829: LD_VAR 0 8
16833: PPUSH
16834: CALL_OW 122
// for j in unitsToHeal do
16838: LD_ADDR_VAR 0 9
16842: PUSH
16843: LD_VAR 0 11
16847: PUSH
16848: FOR_IN
16849: IFFALSE 16867
// AddComHeal ( i , j ) ;
16851: LD_VAR 0 8
16855: PPUSH
16856: LD_VAR 0 9
16860: PPUSH
16861: CALL_OW 188
16865: GO 16848
16867: POP
16868: POP
// end ;
16869: GO 16826
16871: POP
16872: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
16873: LD_VAR 0 10
16877: PUSH
16878: LD_INT 0
16880: EQUAL
16881: PUSH
16882: LD_VAR 0 11
16886: PUSH
16887: LD_INT 0
16889: EQUAL
16890: AND
16891: PUSH
16892: LD_VAR 0 7
16896: PUSH
16897: LD_INT 0
16899: GREATER
16900: AND
16901: IFFALSE 17005
// for i in sci_listOutside do
16903: LD_ADDR_VAR 0 8
16907: PUSH
16908: LD_VAR 0 7
16912: PUSH
16913: FOR_IN
16914: IFFALSE 17003
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
16916: LD_ADDR_VAR 0 12
16920: PUSH
16921: LD_INT 22
16923: PUSH
16924: LD_VAR 0 1
16928: PUSH
16929: EMPTY
16930: LIST
16931: LIST
16932: PUSH
16933: LD_INT 21
16935: PUSH
16936: LD_INT 3
16938: PUSH
16939: EMPTY
16940: LIST
16941: LIST
16942: PUSH
16943: LD_INT 30
16945: PUSH
16946: LD_INT 8
16948: PUSH
16949: EMPTY
16950: LIST
16951: LIST
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: PPUSH
16958: CALL_OW 69
16962: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
16963: LD_ADDR_VAR 0 13
16967: PUSH
16968: LD_INT 1
16970: PPUSH
16971: LD_VAR 0 12
16975: PPUSH
16976: CALL_OW 12
16980: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
16981: LD_VAR 0 8
16985: PPUSH
16986: LD_VAR 0 12
16990: PUSH
16991: LD_VAR 0 13
16995: ARRAY
16996: PPUSH
16997: CALL_OW 120
// end ;
17001: GO 16913
17003: POP
17004: POP
// end ;
17005: LD_VAR 0 5
17009: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17010: LD_INT 0
17012: PPUSH
17013: PPUSH
17014: PPUSH
17015: PPUSH
17016: PPUSH
17017: PPUSH
17018: PPUSH
17019: PPUSH
17020: PPUSH
17021: PPUSH
17022: PPUSH
// amChassisTab = [ ] ;
17023: LD_ADDR_VAR 0 19
17027: PUSH
17028: EMPTY
17029: ST_TO_ADDR
// arChassisTab = [ ] ;
17030: LD_ADDR_VAR 0 18
17034: PUSH
17035: EMPTY
17036: ST_TO_ADDR
// ruChassisTab = [ ] ;
17037: LD_ADDR_VAR 0 17
17041: PUSH
17042: EMPTY
17043: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17044: LD_INT 35
17046: PPUSH
17047: CALL_OW 67
// if nation = 1 then
17051: LD_VAR 0 5
17055: PUSH
17056: LD_INT 1
17058: EQUAL
17059: IFFALSE 17564
// begin uc_side = side ;
17061: LD_ADDR_OWVAR 20
17065: PUSH
17066: LD_VAR 0 2
17070: ST_TO_ADDR
// uc_nation = nation ;
17071: LD_ADDR_OWVAR 21
17075: PUSH
17076: LD_VAR 0 5
17080: ST_TO_ADDR
// vc_engine = vehengine ;
17081: LD_ADDR_OWVAR 39
17085: PUSH
17086: LD_VAR 0 6
17090: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17091: LD_ADDR_OWVAR 38
17095: PUSH
17096: LD_VAR 0 7
17100: PUSH
17101: LD_INT 1
17103: PPUSH
17104: LD_VAR 0 7
17108: PPUSH
17109: CALL_OW 12
17113: ARRAY
17114: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17115: LD_ADDR_OWVAR 40
17119: PUSH
17120: LD_VAR 0 10
17124: PUSH
17125: LD_INT 1
17127: PPUSH
17128: LD_VAR 0 10
17132: PPUSH
17133: CALL_OW 12
17137: ARRAY
17138: ST_TO_ADDR
// for j = 1 to AMWeapon do
17139: LD_ADDR_VAR 0 14
17143: PUSH
17144: DOUBLE
17145: LD_INT 1
17147: DEC
17148: ST_TO_ADDR
17149: LD_VAR 0 10
17153: PUSH
17154: FOR_TO
17155: IFFALSE 17456
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17157: LD_VAR 0 10
17161: PUSH
17162: LD_VAR 0 14
17166: ARRAY
17167: PUSH
17168: LD_INT 2
17170: EQUAL
17171: PUSH
17172: LD_VAR 0 10
17176: PUSH
17177: LD_VAR 0 14
17181: ARRAY
17182: PUSH
17183: LD_INT 3
17185: EQUAL
17186: OR
17187: IFFALSE 17240
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17189: LD_ADDR_VAR 0 19
17193: PUSH
17194: LD_INT 1
17196: PUSH
17197: LD_INT 2
17199: PUSH
17200: LD_INT 3
17202: PUSH
17203: LD_INT 4
17205: PUSH
17206: LD_INT 5
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: LIST
17213: LIST
17214: LIST
17215: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17216: LD_ADDR_OWVAR 37
17220: PUSH
17221: LD_VAR 0 19
17225: PUSH
17226: LD_INT 1
17228: PPUSH
17229: LD_VAR 0 19
17233: PPUSH
17234: CALL_OW 12
17238: ARRAY
17239: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17240: LD_VAR 0 10
17244: PUSH
17245: LD_VAR 0 14
17249: ARRAY
17250: PUSH
17251: LD_INT 4
17253: EQUAL
17254: PUSH
17255: LD_VAR 0 10
17259: PUSH
17260: LD_VAR 0 14
17264: ARRAY
17265: PUSH
17266: LD_INT 5
17268: EQUAL
17269: OR
17270: PUSH
17271: LD_VAR 0 10
17275: PUSH
17276: LD_VAR 0 14
17280: ARRAY
17281: PUSH
17282: LD_INT 9
17284: EQUAL
17285: OR
17286: PUSH
17287: LD_VAR 0 10
17291: PUSH
17292: LD_VAR 0 14
17296: ARRAY
17297: PUSH
17298: LD_INT 11
17300: EQUAL
17301: OR
17302: PUSH
17303: LD_VAR 0 10
17307: PUSH
17308: LD_VAR 0 14
17312: ARRAY
17313: PUSH
17314: LD_INT 7
17316: EQUAL
17317: OR
17318: IFFALSE 17367
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17320: LD_ADDR_VAR 0 19
17324: PUSH
17325: LD_INT 2
17327: PUSH
17328: LD_INT 3
17330: PUSH
17331: LD_INT 4
17333: PUSH
17334: LD_INT 5
17336: PUSH
17337: EMPTY
17338: LIST
17339: LIST
17340: LIST
17341: LIST
17342: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17343: LD_ADDR_OWVAR 37
17347: PUSH
17348: LD_VAR 0 19
17352: PUSH
17353: LD_INT 1
17355: PPUSH
17356: LD_VAR 0 19
17360: PPUSH
17361: CALL_OW 12
17365: ARRAY
17366: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17367: LD_VAR 0 10
17371: PUSH
17372: LD_VAR 0 14
17376: ARRAY
17377: PUSH
17378: LD_INT 8
17380: EQUAL
17381: PUSH
17382: LD_VAR 0 10
17386: PUSH
17387: LD_VAR 0 14
17391: ARRAY
17392: PUSH
17393: LD_INT 6
17395: EQUAL
17396: OR
17397: PUSH
17398: LD_VAR 0 10
17402: PUSH
17403: LD_VAR 0 14
17407: ARRAY
17408: PUSH
17409: LD_INT 10
17411: EQUAL
17412: OR
17413: IFFALSE 17454
// begin amChassisTab = [ 4 , 5 ] ;
17415: LD_ADDR_VAR 0 19
17419: PUSH
17420: LD_INT 4
17422: PUSH
17423: LD_INT 5
17425: PUSH
17426: EMPTY
17427: LIST
17428: LIST
17429: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17430: LD_ADDR_OWVAR 37
17434: PUSH
17435: LD_VAR 0 19
17439: PUSH
17440: LD_INT 1
17442: PPUSH
17443: LD_VAR 0 19
17447: PPUSH
17448: CALL_OW 12
17452: ARRAY
17453: ST_TO_ADDR
// end ; end ;
17454: GO 17154
17456: POP
17457: POP
// veh = CreateVehicle ;
17458: LD_ADDR_VAR 0 16
17462: PUSH
17463: CALL_OW 45
17467: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17468: LD_VAR 0 16
17472: PPUSH
17473: LD_VAR 0 1
17477: PPUSH
17478: LD_INT 0
17480: PPUSH
17481: CALL_OW 49
// if vc_control = 1 then
17485: LD_OWVAR 38
17489: PUSH
17490: LD_INT 1
17492: EQUAL
17493: IFFALSE 17550
// begin hc_gallery =  ;
17495: LD_ADDR_OWVAR 33
17499: PUSH
17500: LD_STRING 
17502: ST_TO_ADDR
// hc_name =  ;
17503: LD_ADDR_OWVAR 26
17507: PUSH
17508: LD_STRING 
17510: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17511: LD_INT 0
17513: PPUSH
17514: LD_INT 3
17516: PPUSH
17517: LD_VAR 0 4
17521: PPUSH
17522: CALL_OW 380
// un = CreateHuman ;
17526: LD_ADDR_VAR 0 15
17530: PUSH
17531: CALL_OW 44
17535: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17536: LD_VAR 0 15
17540: PPUSH
17541: LD_VAR 0 16
17545: PPUSH
17546: CALL_OW 52
// end ; i = i + 1 ;
17550: LD_ADDR_VAR 0 13
17554: PUSH
17555: LD_VAR 0 13
17559: PUSH
17560: LD_INT 1
17562: PLUS
17563: ST_TO_ADDR
// end ; if nation = 2 then
17564: LD_VAR 0 5
17568: PUSH
17569: LD_INT 2
17571: EQUAL
17572: IFFALSE 17994
// begin uc_side = side ;
17574: LD_ADDR_OWVAR 20
17578: PUSH
17579: LD_VAR 0 2
17583: ST_TO_ADDR
// uc_nation = nation ;
17584: LD_ADDR_OWVAR 21
17588: PUSH
17589: LD_VAR 0 5
17593: ST_TO_ADDR
// vc_engine = vehengine ;
17594: LD_ADDR_OWVAR 39
17598: PUSH
17599: LD_VAR 0 6
17603: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17604: LD_ADDR_OWVAR 38
17608: PUSH
17609: LD_VAR 0 7
17613: PUSH
17614: LD_INT 1
17616: PPUSH
17617: LD_VAR 0 7
17621: PPUSH
17622: CALL_OW 12
17626: ARRAY
17627: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17628: LD_ADDR_OWVAR 40
17632: PUSH
17633: LD_VAR 0 9
17637: PUSH
17638: LD_INT 1
17640: PPUSH
17641: LD_VAR 0 9
17645: PPUSH
17646: CALL_OW 12
17650: ARRAY
17651: ST_TO_ADDR
// for j = 1 to ARWeapons do
17652: LD_ADDR_VAR 0 14
17656: PUSH
17657: DOUBLE
17658: LD_INT 1
17660: DEC
17661: ST_TO_ADDR
17662: LD_VAR 0 9
17666: PUSH
17667: FOR_TO
17668: IFFALSE 17886
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17670: LD_VAR 0 9
17674: PUSH
17675: LD_VAR 0 14
17679: ARRAY
17680: PUSH
17681: LD_INT 24
17683: EQUAL
17684: PUSH
17685: LD_VAR 0 9
17689: PUSH
17690: LD_VAR 0 14
17694: ARRAY
17695: PUSH
17696: LD_INT 22
17698: EQUAL
17699: OR
17700: PUSH
17701: LD_VAR 0 9
17705: PUSH
17706: LD_VAR 0 14
17710: ARRAY
17711: PUSH
17712: LD_INT 23
17714: EQUAL
17715: OR
17716: PUSH
17717: LD_VAR 0 9
17721: PUSH
17722: LD_VAR 0 14
17726: ARRAY
17727: PUSH
17728: LD_INT 30
17730: EQUAL
17731: OR
17732: IFFALSE 17769
// begin arChassisTab = [ 14 ] ;
17734: LD_ADDR_VAR 0 18
17738: PUSH
17739: LD_INT 14
17741: PUSH
17742: EMPTY
17743: LIST
17744: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17745: LD_ADDR_OWVAR 37
17749: PUSH
17750: LD_VAR 0 18
17754: PUSH
17755: LD_INT 1
17757: PPUSH
17758: LD_VAR 0 18
17762: PPUSH
17763: CALL_OW 12
17767: ARRAY
17768: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17769: LD_VAR 0 9
17773: PUSH
17774: LD_VAR 0 14
17778: ARRAY
17779: PUSH
17780: LD_INT 29
17782: EQUAL
17783: PUSH
17784: LD_VAR 0 9
17788: PUSH
17789: LD_VAR 0 14
17793: ARRAY
17794: PUSH
17795: LD_INT 28
17797: EQUAL
17798: OR
17799: PUSH
17800: LD_VAR 0 9
17804: PUSH
17805: LD_VAR 0 14
17809: ARRAY
17810: PUSH
17811: LD_INT 27
17813: EQUAL
17814: OR
17815: PUSH
17816: LD_VAR 0 9
17820: PUSH
17821: LD_VAR 0 14
17825: ARRAY
17826: PUSH
17827: LD_INT 26
17829: EQUAL
17830: OR
17831: PUSH
17832: LD_VAR 0 9
17836: PUSH
17837: LD_VAR 0 14
17841: ARRAY
17842: PUSH
17843: LD_INT 25
17845: EQUAL
17846: OR
17847: IFFALSE 17884
// begin arChassisTab = [ 14 ] ;
17849: LD_ADDR_VAR 0 18
17853: PUSH
17854: LD_INT 14
17856: PUSH
17857: EMPTY
17858: LIST
17859: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17860: LD_ADDR_OWVAR 37
17864: PUSH
17865: LD_VAR 0 18
17869: PUSH
17870: LD_INT 1
17872: PPUSH
17873: LD_VAR 0 18
17877: PPUSH
17878: CALL_OW 12
17882: ARRAY
17883: ST_TO_ADDR
// end ; end ;
17884: GO 17667
17886: POP
17887: POP
// veh = CreateVehicle ;
17888: LD_ADDR_VAR 0 16
17892: PUSH
17893: CALL_OW 45
17897: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17898: LD_VAR 0 16
17902: PPUSH
17903: LD_VAR 0 1
17907: PPUSH
17908: LD_INT 0
17910: PPUSH
17911: CALL_OW 49
// if vc_control = 1 then
17915: LD_OWVAR 38
17919: PUSH
17920: LD_INT 1
17922: EQUAL
17923: IFFALSE 17980
// begin hc_gallery =  ;
17925: LD_ADDR_OWVAR 33
17929: PUSH
17930: LD_STRING 
17932: ST_TO_ADDR
// hc_name =  ;
17933: LD_ADDR_OWVAR 26
17937: PUSH
17938: LD_STRING 
17940: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17941: LD_INT 0
17943: PPUSH
17944: LD_INT 3
17946: PPUSH
17947: LD_VAR 0 4
17951: PPUSH
17952: CALL_OW 380
// un = CreateHuman ;
17956: LD_ADDR_VAR 0 15
17960: PUSH
17961: CALL_OW 44
17965: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17966: LD_VAR 0 15
17970: PPUSH
17971: LD_VAR 0 16
17975: PPUSH
17976: CALL_OW 52
// end ; i = i + 1 ;
17980: LD_ADDR_VAR 0 13
17984: PUSH
17985: LD_VAR 0 13
17989: PUSH
17990: LD_INT 1
17992: PLUS
17993: ST_TO_ADDR
// end ; if nation = 3 then
17994: LD_VAR 0 5
17998: PUSH
17999: LD_INT 3
18001: EQUAL
18002: IFFALSE 18408
// begin uc_side = side ;
18004: LD_ADDR_OWVAR 20
18008: PUSH
18009: LD_VAR 0 2
18013: ST_TO_ADDR
// uc_nation = nation ;
18014: LD_ADDR_OWVAR 21
18018: PUSH
18019: LD_VAR 0 5
18023: ST_TO_ADDR
// vc_engine = vehengine ;
18024: LD_ADDR_OWVAR 39
18028: PUSH
18029: LD_VAR 0 6
18033: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18034: LD_ADDR_OWVAR 38
18038: PUSH
18039: LD_VAR 0 7
18043: PUSH
18044: LD_INT 1
18046: PPUSH
18047: LD_VAR 0 7
18051: PPUSH
18052: CALL_OW 12
18056: ARRAY
18057: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18058: LD_ADDR_OWVAR 40
18062: PUSH
18063: LD_VAR 0 8
18067: PUSH
18068: LD_INT 1
18070: PPUSH
18071: LD_VAR 0 8
18075: PPUSH
18076: CALL_OW 12
18080: ARRAY
18081: ST_TO_ADDR
// for j = 1 to RuWeapons do
18082: LD_ADDR_VAR 0 14
18086: PUSH
18087: DOUBLE
18088: LD_INT 1
18090: DEC
18091: ST_TO_ADDR
18092: LD_VAR 0 8
18096: PUSH
18097: FOR_TO
18098: IFFALSE 18300
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18100: LD_VAR 0 8
18104: PUSH
18105: LD_VAR 0 14
18109: ARRAY
18110: PUSH
18111: LD_INT 42
18113: EQUAL
18114: PUSH
18115: LD_VAR 0 8
18119: PUSH
18120: LD_VAR 0 14
18124: ARRAY
18125: PUSH
18126: LD_INT 43
18128: EQUAL
18129: OR
18130: PUSH
18131: LD_VAR 0 8
18135: PUSH
18136: LD_VAR 0 14
18140: ARRAY
18141: PUSH
18142: LD_INT 44
18144: EQUAL
18145: OR
18146: PUSH
18147: LD_VAR 0 8
18151: PUSH
18152: LD_VAR 0 14
18156: ARRAY
18157: PUSH
18158: LD_INT 45
18160: EQUAL
18161: OR
18162: PUSH
18163: LD_VAR 0 8
18167: PUSH
18168: LD_VAR 0 14
18172: ARRAY
18173: PUSH
18174: LD_INT 49
18176: EQUAL
18177: OR
18178: IFFALSE 18227
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18180: LD_ADDR_VAR 0 17
18184: PUSH
18185: LD_INT 21
18187: PUSH
18188: LD_INT 22
18190: PUSH
18191: LD_INT 23
18193: PUSH
18194: LD_INT 24
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: LIST
18201: LIST
18202: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18203: LD_ADDR_OWVAR 37
18207: PUSH
18208: LD_VAR 0 17
18212: PUSH
18213: LD_INT 1
18215: PPUSH
18216: LD_VAR 0 17
18220: PPUSH
18221: CALL_OW 12
18225: ARRAY
18226: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18227: LD_VAR 0 8
18231: PUSH
18232: LD_VAR 0 14
18236: ARRAY
18237: PUSH
18238: LD_INT 46
18240: EQUAL
18241: PUSH
18242: LD_VAR 0 8
18246: PUSH
18247: LD_VAR 0 14
18251: ARRAY
18252: PUSH
18253: LD_INT 47
18255: EQUAL
18256: OR
18257: IFFALSE 18298
// begin ruChassisTab = [ 23 , 24 ] ;
18259: LD_ADDR_VAR 0 17
18263: PUSH
18264: LD_INT 23
18266: PUSH
18267: LD_INT 24
18269: PUSH
18270: EMPTY
18271: LIST
18272: LIST
18273: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18274: LD_ADDR_OWVAR 37
18278: PUSH
18279: LD_VAR 0 17
18283: PUSH
18284: LD_INT 1
18286: PPUSH
18287: LD_VAR 0 17
18291: PPUSH
18292: CALL_OW 12
18296: ARRAY
18297: ST_TO_ADDR
// end ; end ;
18298: GO 18097
18300: POP
18301: POP
// veh = CreateVehicle ;
18302: LD_ADDR_VAR 0 16
18306: PUSH
18307: CALL_OW 45
18311: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18312: LD_VAR 0 16
18316: PPUSH
18317: LD_VAR 0 1
18321: PPUSH
18322: LD_INT 0
18324: PPUSH
18325: CALL_OW 49
// if vc_control = 1 then
18329: LD_OWVAR 38
18333: PUSH
18334: LD_INT 1
18336: EQUAL
18337: IFFALSE 18394
// begin hc_gallery =  ;
18339: LD_ADDR_OWVAR 33
18343: PUSH
18344: LD_STRING 
18346: ST_TO_ADDR
// hc_name =  ;
18347: LD_ADDR_OWVAR 26
18351: PUSH
18352: LD_STRING 
18354: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18355: LD_INT 0
18357: PPUSH
18358: LD_INT 3
18360: PPUSH
18361: LD_VAR 0 4
18365: PPUSH
18366: CALL_OW 380
// un = CreateHuman ;
18370: LD_ADDR_VAR 0 15
18374: PUSH
18375: CALL_OW 44
18379: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18380: LD_VAR 0 15
18384: PPUSH
18385: LD_VAR 0 16
18389: PPUSH
18390: CALL_OW 52
// end ; i = i + 1 ;
18394: LD_ADDR_VAR 0 13
18398: PUSH
18399: LD_VAR 0 13
18403: PUSH
18404: LD_INT 1
18406: PLUS
18407: ST_TO_ADDR
// end ; until i = vehCount ;
18408: LD_VAR 0 13
18412: PUSH
18413: LD_VAR 0 3
18417: EQUAL
18418: IFFALSE 17044
// repeat wait ( 0 0$1 ) ;
18420: LD_INT 35
18422: PPUSH
18423: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18427: LD_ADDR_VAR 0 20
18431: PUSH
18432: LD_INT 22
18434: PUSH
18435: LD_VAR 0 2
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: PUSH
18444: LD_INT 21
18446: PUSH
18447: LD_INT 2
18449: PUSH
18450: EMPTY
18451: LIST
18452: LIST
18453: PUSH
18454: LD_INT 24
18456: PUSH
18457: LD_INT 650
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: LIST
18468: PPUSH
18469: CALL_OW 69
18473: ST_TO_ADDR
// if vehicleOK_list > 0 then
18474: LD_VAR 0 20
18478: PUSH
18479: LD_INT 0
18481: GREATER
18482: IFFALSE 18673
// begin for i in vehicleOK_list do
18484: LD_ADDR_VAR 0 13
18488: PUSH
18489: LD_VAR 0 20
18493: PUSH
18494: FOR_IN
18495: IFFALSE 18671
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18497: LD_ADDR_VAR 0 21
18501: PUSH
18502: LD_INT 22
18504: PUSH
18505: LD_VAR 0 11
18509: PUSH
18510: EMPTY
18511: LIST
18512: LIST
18513: PPUSH
18514: CALL_OW 69
18518: PPUSH
18519: LD_VAR 0 13
18523: PPUSH
18524: CALL_OW 74
18528: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18529: LD_ADDR_VAR 0 22
18533: PUSH
18534: LD_INT 22
18536: PUSH
18537: LD_VAR 0 11
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: LD_INT 2
18548: PUSH
18549: LD_INT 59
18551: PUSH
18552: EMPTY
18553: LIST
18554: PUSH
18555: LD_INT 21
18557: PUSH
18558: LD_INT 1
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: PUSH
18565: LD_INT 21
18567: PUSH
18568: LD_INT 2
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: EMPTY
18576: LIST
18577: LIST
18578: LIST
18579: LIST
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: PPUSH
18588: CALL_OW 69
18592: PPUSH
18593: LD_VAR 0 13
18597: PPUSH
18598: CALL_OW 74
18602: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18603: LD_VAR 0 13
18607: PPUSH
18608: LD_VAR 0 21
18612: PPUSH
18613: CALL_OW 296
18617: PUSH
18618: LD_INT 8
18620: PLUS
18621: PUSH
18622: LD_VAR 0 13
18626: PPUSH
18627: LD_VAR 0 22
18631: PPUSH
18632: CALL_OW 296
18636: LESS
18637: IFFALSE 18655
// begin ComAttackUnit ( i , target1 ) ;
18639: LD_VAR 0 13
18643: PPUSH
18644: LD_VAR 0 21
18648: PPUSH
18649: CALL_OW 115
// end else
18653: GO 18669
// begin ComAttackUnit ( i , target2 ) ;
18655: LD_VAR 0 13
18659: PPUSH
18660: LD_VAR 0 22
18664: PPUSH
18665: CALL_OW 115
// end ; end ;
18669: GO 18494
18671: POP
18672: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18673: LD_INT 22
18675: PUSH
18676: LD_VAR 0 2
18680: PUSH
18681: EMPTY
18682: LIST
18683: LIST
18684: PUSH
18685: LD_INT 21
18687: PUSH
18688: LD_INT 2
18690: PUSH
18691: EMPTY
18692: LIST
18693: LIST
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PPUSH
18699: CALL_OW 69
18703: PUSH
18704: LD_INT 0
18706: EQUAL
18707: IFFALSE 18420
// end ;
18709: LD_VAR 0 12
18713: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18714: LD_INT 0
18716: PPUSH
18717: PPUSH
18718: PPUSH
18719: PPUSH
18720: PPUSH
18721: PPUSH
18722: PPUSH
18723: PPUSH
18724: PPUSH
18725: PPUSH
18726: PPUSH
// for i = 1 to soldierCount do
18727: LD_ADDR_VAR 0 13
18731: PUSH
18732: DOUBLE
18733: LD_INT 1
18735: DEC
18736: ST_TO_ADDR
18737: LD_VAR 0 3
18741: PUSH
18742: FOR_TO
18743: IFFALSE 18825
// begin uc_side = side ;
18745: LD_ADDR_OWVAR 20
18749: PUSH
18750: LD_VAR 0 1
18754: ST_TO_ADDR
// uc_nation = nation ;
18755: LD_ADDR_OWVAR 21
18759: PUSH
18760: LD_VAR 0 2
18764: ST_TO_ADDR
// hc_name =  ;
18765: LD_ADDR_OWVAR 26
18769: PUSH
18770: LD_STRING 
18772: ST_TO_ADDR
// hc_gallery =  ;
18773: LD_ADDR_OWVAR 33
18777: PUSH
18778: LD_STRING 
18780: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18781: LD_INT 0
18783: PPUSH
18784: LD_INT 1
18786: PPUSH
18787: LD_VAR 0 8
18791: PPUSH
18792: CALL_OW 380
// un = CreateHuman ;
18796: LD_ADDR_VAR 0 15
18800: PUSH
18801: CALL_OW 44
18805: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18806: LD_VAR 0 15
18810: PPUSH
18811: LD_VAR 0 9
18815: PPUSH
18816: LD_INT 0
18818: PPUSH
18819: CALL_OW 49
// end ;
18823: GO 18742
18825: POP
18826: POP
// for i = 1 to sniperCount do
18827: LD_ADDR_VAR 0 13
18831: PUSH
18832: DOUBLE
18833: LD_INT 1
18835: DEC
18836: ST_TO_ADDR
18837: LD_VAR 0 4
18841: PUSH
18842: FOR_TO
18843: IFFALSE 18925
// begin uc_side = side ;
18845: LD_ADDR_OWVAR 20
18849: PUSH
18850: LD_VAR 0 1
18854: ST_TO_ADDR
// uc_nation = nation ;
18855: LD_ADDR_OWVAR 21
18859: PUSH
18860: LD_VAR 0 2
18864: ST_TO_ADDR
// hc_name =  ;
18865: LD_ADDR_OWVAR 26
18869: PUSH
18870: LD_STRING 
18872: ST_TO_ADDR
// hc_gallery =  ;
18873: LD_ADDR_OWVAR 33
18877: PUSH
18878: LD_STRING 
18880: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
18881: LD_INT 0
18883: PPUSH
18884: LD_INT 5
18886: PPUSH
18887: LD_VAR 0 8
18891: PPUSH
18892: CALL_OW 380
// un = CreateHuman ;
18896: LD_ADDR_VAR 0 15
18900: PUSH
18901: CALL_OW 44
18905: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18906: LD_VAR 0 15
18910: PPUSH
18911: LD_VAR 0 9
18915: PPUSH
18916: LD_INT 0
18918: PPUSH
18919: CALL_OW 49
// end ;
18923: GO 18842
18925: POP
18926: POP
// for i = 1 to bazookCount do
18927: LD_ADDR_VAR 0 13
18931: PUSH
18932: DOUBLE
18933: LD_INT 1
18935: DEC
18936: ST_TO_ADDR
18937: LD_VAR 0 5
18941: PUSH
18942: FOR_TO
18943: IFFALSE 19025
// begin uc_side = side ;
18945: LD_ADDR_OWVAR 20
18949: PUSH
18950: LD_VAR 0 1
18954: ST_TO_ADDR
// uc_nation = nation ;
18955: LD_ADDR_OWVAR 21
18959: PUSH
18960: LD_VAR 0 2
18964: ST_TO_ADDR
// hc_name =  ;
18965: LD_ADDR_OWVAR 26
18969: PUSH
18970: LD_STRING 
18972: ST_TO_ADDR
// hc_gallery =  ;
18973: LD_ADDR_OWVAR 33
18977: PUSH
18978: LD_STRING 
18980: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
18981: LD_INT 0
18983: PPUSH
18984: LD_INT 9
18986: PPUSH
18987: LD_VAR 0 8
18991: PPUSH
18992: CALL_OW 380
// un = CreateHuman ;
18996: LD_ADDR_VAR 0 15
19000: PUSH
19001: CALL_OW 44
19005: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19006: LD_VAR 0 15
19010: PPUSH
19011: LD_VAR 0 9
19015: PPUSH
19016: LD_INT 0
19018: PPUSH
19019: CALL_OW 49
// end ;
19023: GO 18942
19025: POP
19026: POP
// for i = 1 to mortalCount do
19027: LD_ADDR_VAR 0 13
19031: PUSH
19032: DOUBLE
19033: LD_INT 1
19035: DEC
19036: ST_TO_ADDR
19037: LD_VAR 0 6
19041: PUSH
19042: FOR_TO
19043: IFFALSE 19125
// begin uc_side = side ;
19045: LD_ADDR_OWVAR 20
19049: PUSH
19050: LD_VAR 0 1
19054: ST_TO_ADDR
// uc_nation = nation ;
19055: LD_ADDR_OWVAR 21
19059: PUSH
19060: LD_VAR 0 2
19064: ST_TO_ADDR
// hc_name =  ;
19065: LD_ADDR_OWVAR 26
19069: PUSH
19070: LD_STRING 
19072: ST_TO_ADDR
// hc_gallery =  ;
19073: LD_ADDR_OWVAR 33
19077: PUSH
19078: LD_STRING 
19080: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19081: LD_INT 0
19083: PPUSH
19084: LD_INT 8
19086: PPUSH
19087: LD_VAR 0 8
19091: PPUSH
19092: CALL_OW 380
// un = CreateHuman ;
19096: LD_ADDR_VAR 0 15
19100: PUSH
19101: CALL_OW 44
19105: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19106: LD_VAR 0 15
19110: PPUSH
19111: LD_VAR 0 9
19115: PPUSH
19116: LD_INT 0
19118: PPUSH
19119: CALL_OW 49
// end ;
19123: GO 19042
19125: POP
19126: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19127: LD_ADDR_VAR 0 18
19131: PUSH
19132: LD_INT 22
19134: PUSH
19135: LD_VAR 0 1
19139: PUSH
19140: EMPTY
19141: LIST
19142: LIST
19143: PUSH
19144: LD_INT 2
19146: PUSH
19147: LD_INT 25
19149: PUSH
19150: LD_INT 1
19152: PUSH
19153: EMPTY
19154: LIST
19155: LIST
19156: PUSH
19157: LD_INT 25
19159: PUSH
19160: LD_INT 5
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: PUSH
19167: LD_INT 25
19169: PUSH
19170: LD_INT 8
19172: PUSH
19173: EMPTY
19174: LIST
19175: LIST
19176: PUSH
19177: LD_INT 25
19179: PUSH
19180: LD_INT 9
19182: PUSH
19183: EMPTY
19184: LIST
19185: LIST
19186: PUSH
19187: EMPTY
19188: LIST
19189: LIST
19190: LIST
19191: LIST
19192: LIST
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PPUSH
19198: CALL_OW 69
19202: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19203: LD_ADDR_VAR 0 17
19207: PUSH
19208: LD_INT 22
19210: PUSH
19211: LD_VAR 0 1
19215: PUSH
19216: EMPTY
19217: LIST
19218: LIST
19219: PUSH
19220: LD_INT 25
19222: PUSH
19223: LD_INT 4
19225: PUSH
19226: EMPTY
19227: LIST
19228: LIST
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PPUSH
19234: CALL_OW 69
19238: ST_TO_ADDR
// for i in medic_list do
19239: LD_ADDR_VAR 0 13
19243: PUSH
19244: LD_VAR 0 17
19248: PUSH
19249: FOR_IN
19250: IFFALSE 19268
// ComMoveToArea ( i , healArea ) ;
19252: LD_VAR 0 13
19256: PPUSH
19257: LD_VAR 0 10
19261: PPUSH
19262: CALL_OW 113
19266: GO 19249
19268: POP
19269: POP
// repeat wait ( 0 0$1 ) ;
19270: LD_INT 35
19272: PPUSH
19273: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19277: LD_ADDR_VAR 0 16
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_VAR 0 1
19289: PUSH
19290: EMPTY
19291: LIST
19292: LIST
19293: PUSH
19294: LD_INT 1
19296: PUSH
19297: LD_INT 3
19299: PUSH
19300: LD_INT 24
19302: PUSH
19303: LD_INT 550
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 24
19316: PUSH
19317: LD_INT 250
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PPUSH
19333: CALL_OW 69
19337: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19338: LD_ADDR_VAR 0 18
19342: PUSH
19343: LD_INT 22
19345: PUSH
19346: LD_VAR 0 1
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: LD_INT 2
19357: PUSH
19358: LD_INT 25
19360: PUSH
19361: LD_INT 1
19363: PUSH
19364: EMPTY
19365: LIST
19366: LIST
19367: PUSH
19368: LD_INT 25
19370: PUSH
19371: LD_INT 5
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: PUSH
19378: LD_INT 25
19380: PUSH
19381: LD_INT 8
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: PUSH
19388: LD_INT 25
19390: PUSH
19391: LD_INT 9
19393: PUSH
19394: EMPTY
19395: LIST
19396: LIST
19397: PUSH
19398: EMPTY
19399: LIST
19400: LIST
19401: LIST
19402: LIST
19403: LIST
19404: PUSH
19405: LD_INT 24
19407: PUSH
19408: LD_INT 1000
19410: PUSH
19411: EMPTY
19412: LIST
19413: LIST
19414: PUSH
19415: EMPTY
19416: LIST
19417: LIST
19418: LIST
19419: PPUSH
19420: CALL_OW 69
19424: ST_TO_ADDR
// if medicCount > 0 then
19425: LD_VAR 0 7
19429: PUSH
19430: LD_INT 0
19432: GREATER
19433: IFFALSE 19507
// begin if damageUnit_list > 0 then
19435: LD_VAR 0 16
19439: PUSH
19440: LD_INT 0
19442: GREATER
19443: IFFALSE 19507
// begin for i in damageUnit_list do
19445: LD_ADDR_VAR 0 13
19449: PUSH
19450: LD_VAR 0 16
19454: PUSH
19455: FOR_IN
19456: IFFALSE 19505
// begin ComMoveToArea ( i , healArea ) ;
19458: LD_VAR 0 13
19462: PPUSH
19463: LD_VAR 0 10
19467: PPUSH
19468: CALL_OW 113
// for j in medic_list do
19472: LD_ADDR_VAR 0 14
19476: PUSH
19477: LD_VAR 0 17
19481: PUSH
19482: FOR_IN
19483: IFFALSE 19501
// AddComHeal ( j , i ) ;
19485: LD_VAR 0 14
19489: PPUSH
19490: LD_VAR 0 13
19494: PPUSH
19495: CALL_OW 188
19499: GO 19482
19501: POP
19502: POP
// end ;
19503: GO 19455
19505: POP
19506: POP
// end ; end ; for i in soldiersOK_list do
19507: LD_ADDR_VAR 0 13
19511: PUSH
19512: LD_VAR 0 18
19516: PUSH
19517: FOR_IN
19518: IFFALSE 19694
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19520: LD_ADDR_VAR 0 21
19524: PUSH
19525: LD_INT 22
19527: PUSH
19528: LD_VAR 0 11
19532: PUSH
19533: EMPTY
19534: LIST
19535: LIST
19536: PPUSH
19537: CALL_OW 69
19541: PPUSH
19542: LD_VAR 0 13
19546: PPUSH
19547: CALL_OW 74
19551: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19552: LD_ADDR_VAR 0 22
19556: PUSH
19557: LD_INT 22
19559: PUSH
19560: LD_VAR 0 11
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 59
19574: PUSH
19575: EMPTY
19576: LIST
19577: PUSH
19578: LD_INT 21
19580: PUSH
19581: LD_INT 1
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 21
19590: PUSH
19591: LD_INT 2
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: LIST
19603: PUSH
19604: EMPTY
19605: LIST
19606: LIST
19607: PUSH
19608: EMPTY
19609: LIST
19610: PPUSH
19611: CALL_OW 69
19615: PPUSH
19616: LD_VAR 0 13
19620: PPUSH
19621: CALL_OW 74
19625: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19626: LD_VAR 0 13
19630: PPUSH
19631: LD_VAR 0 21
19635: PPUSH
19636: CALL_OW 296
19640: PUSH
19641: LD_INT 8
19643: PLUS
19644: PUSH
19645: LD_VAR 0 13
19649: PPUSH
19650: LD_VAR 0 22
19654: PPUSH
19655: CALL_OW 296
19659: LESS
19660: IFFALSE 19678
// begin ComAttackUnit ( i , target1 ) ;
19662: LD_VAR 0 13
19666: PPUSH
19667: LD_VAR 0 21
19671: PPUSH
19672: CALL_OW 115
// end else
19676: GO 19692
// begin ComAttackUnit ( i , target2 ) ;
19678: LD_VAR 0 13
19682: PPUSH
19683: LD_VAR 0 22
19687: PPUSH
19688: CALL_OW 115
// end ; end ;
19692: GO 19517
19694: POP
19695: POP
// for i in soldiersOK_list do
19696: LD_ADDR_VAR 0 13
19700: PUSH
19701: LD_VAR 0 18
19705: PUSH
19706: FOR_IN
19707: IFFALSE 19883
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19709: LD_ADDR_VAR 0 21
19713: PUSH
19714: LD_INT 22
19716: PUSH
19717: LD_VAR 0 11
19721: PUSH
19722: EMPTY
19723: LIST
19724: LIST
19725: PPUSH
19726: CALL_OW 69
19730: PPUSH
19731: LD_VAR 0 13
19735: PPUSH
19736: CALL_OW 74
19740: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19741: LD_ADDR_VAR 0 22
19745: PUSH
19746: LD_INT 22
19748: PUSH
19749: LD_VAR 0 11
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: PUSH
19758: LD_INT 2
19760: PUSH
19761: LD_INT 59
19763: PUSH
19764: EMPTY
19765: LIST
19766: PUSH
19767: LD_INT 21
19769: PUSH
19770: LD_INT 1
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 2
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: LIST
19791: LIST
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: PUSH
19797: EMPTY
19798: LIST
19799: PPUSH
19800: CALL_OW 69
19804: PPUSH
19805: LD_VAR 0 13
19809: PPUSH
19810: CALL_OW 74
19814: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19815: LD_VAR 0 13
19819: PPUSH
19820: LD_VAR 0 21
19824: PPUSH
19825: CALL_OW 296
19829: PUSH
19830: LD_INT 8
19832: PLUS
19833: PUSH
19834: LD_VAR 0 13
19838: PPUSH
19839: LD_VAR 0 22
19843: PPUSH
19844: CALL_OW 296
19848: LESS
19849: IFFALSE 19867
// begin ComAttackUnit ( i , target1 ) ;
19851: LD_VAR 0 13
19855: PPUSH
19856: LD_VAR 0 21
19860: PPUSH
19861: CALL_OW 115
// end else
19865: GO 19881
// begin ComAttackUnit ( i , target2 ) ;
19867: LD_VAR 0 13
19871: PPUSH
19872: LD_VAR 0 22
19876: PPUSH
19877: CALL_OW 115
// end ; end ;
19881: GO 19706
19883: POP
19884: POP
// until soldiersOK_list = [ ] ;
19885: LD_VAR 0 18
19889: PUSH
19890: EMPTY
19891: EQUAL
19892: IFFALSE 19270
// end ;
19894: LD_VAR 0 12
19898: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
19899: LD_INT 0
19901: PPUSH
19902: PPUSH
19903: PPUSH
19904: PPUSH
19905: PPUSH
19906: PPUSH
19907: PPUSH
// repeat wait ( 0 0$1 ) ;
19908: LD_INT 35
19910: PPUSH
19911: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
19915: LD_ADDR_VAR 0 7
19919: PUSH
19920: LD_INT 22
19922: PUSH
19923: LD_INT 2
19925: PUSH
19926: EMPTY
19927: LIST
19928: LIST
19929: PUSH
19930: LD_INT 25
19932: PUSH
19933: LD_INT 4
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PUSH
19940: LD_INT 3
19942: PUSH
19943: LD_INT 60
19945: PUSH
19946: EMPTY
19947: LIST
19948: PUSH
19949: EMPTY
19950: LIST
19951: LIST
19952: PUSH
19953: EMPTY
19954: LIST
19955: LIST
19956: LIST
19957: PPUSH
19958: CALL_OW 69
19962: ST_TO_ADDR
// if not tmp then
19963: LD_VAR 0 7
19967: NOT
19968: IFFALSE 19972
// continue ;
19970: GO 19908
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19972: LD_ADDR_VAR 0 3
19976: PUSH
19977: LD_INT 5
19979: PPUSH
19980: LD_INT 22
19982: PUSH
19983: LD_INT 0
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: PUSH
19990: LD_INT 25
19992: PUSH
19993: LD_INT 12
19995: PUSH
19996: EMPTY
19997: LIST
19998: LIST
19999: PUSH
20000: EMPTY
20001: LIST
20002: LIST
20003: PPUSH
20004: CALL_OW 70
20008: PUSH
20009: FOR_IN
20010: IFFALSE 20043
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20012: LD_VAR 0 7
20016: PPUSH
20017: LD_VAR 0 3
20021: PPUSH
20022: CALL_OW 250
20026: PPUSH
20027: LD_VAR 0 3
20031: PPUSH
20032: CALL_OW 251
20036: PPUSH
20037: CALL_OW 131
20041: GO 20009
20043: POP
20044: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20045: LD_INT 22
20047: PUSH
20048: LD_INT 2
20050: PUSH
20051: EMPTY
20052: LIST
20053: LIST
20054: PUSH
20055: LD_INT 25
20057: PUSH
20058: LD_INT 4
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: EMPTY
20066: LIST
20067: LIST
20068: PPUSH
20069: CALL_OW 69
20073: PUSH
20074: LD_INT 0
20076: EQUAL
20077: PUSH
20078: LD_INT 5
20080: PPUSH
20081: LD_INT 22
20083: PUSH
20084: LD_INT 0
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PUSH
20091: LD_INT 25
20093: PUSH
20094: LD_INT 12
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: LIST
20104: PPUSH
20105: CALL_OW 70
20109: PUSH
20110: LD_INT 2
20112: LESS
20113: OR
20114: PUSH
20115: LD_OWVAR 1
20119: PUSH
20120: LD_INT 7000
20122: GREATEREQUAL
20123: OR
20124: IFFALSE 19908
// repeat wait ( 0 0$1 ) ;
20126: LD_INT 35
20128: PPUSH
20129: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20133: LD_ADDR_VAR 0 5
20137: PUSH
20138: LD_INT 22
20140: PUSH
20141: LD_INT 2
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 30
20150: PUSH
20151: LD_INT 5
20153: PUSH
20154: EMPTY
20155: LIST
20156: LIST
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PPUSH
20162: CALL_OW 69
20166: ST_TO_ADDR
// until arm ;
20167: LD_VAR 0 5
20171: IFFALSE 20126
// wait ( 0 0$25 ) ;
20173: LD_INT 875
20175: PPUSH
20176: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20180: LD_ADDR_VAR 0 6
20184: PUSH
20185: LD_INT 22
20187: PUSH
20188: LD_INT 2
20190: PUSH
20191: EMPTY
20192: LIST
20193: LIST
20194: PUSH
20195: LD_INT 2
20197: PUSH
20198: LD_INT 30
20200: PUSH
20201: LD_INT 0
20203: PUSH
20204: EMPTY
20205: LIST
20206: LIST
20207: PUSH
20208: LD_INT 30
20210: PUSH
20211: LD_INT 1
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PUSH
20218: EMPTY
20219: LIST
20220: LIST
20221: LIST
20222: PUSH
20223: EMPTY
20224: LIST
20225: LIST
20226: PPUSH
20227: CALL_OW 69
20231: ST_TO_ADDR
// j := 0 ;
20232: LD_ADDR_VAR 0 3
20236: PUSH
20237: LD_INT 0
20239: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20240: LD_ADDR_VAR 0 2
20244: PUSH
20245: LD_INT 22
20247: PUSH
20248: LD_INT 2
20250: PUSH
20251: EMPTY
20252: LIST
20253: LIST
20254: PUSH
20255: LD_INT 25
20257: PUSH
20258: LD_INT 12
20260: PUSH
20261: EMPTY
20262: LIST
20263: LIST
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PPUSH
20269: CALL_OW 69
20273: PUSH
20274: FOR_IN
20275: IFFALSE 20362
// begin ComMoveXY ( i , 63 , 16 ) ;
20277: LD_VAR 0 2
20281: PPUSH
20282: LD_INT 63
20284: PPUSH
20285: LD_INT 16
20287: PPUSH
20288: CALL_OW 111
// j := j + 1 ;
20292: LD_ADDR_VAR 0 3
20296: PUSH
20297: LD_VAR 0 3
20301: PUSH
20302: LD_INT 1
20304: PLUS
20305: ST_TO_ADDR
// if j < 5 then
20306: LD_VAR 0 3
20310: PUSH
20311: LD_INT 5
20313: LESS
20314: IFFALSE 20332
// b := arm [ 1 ] else
20316: LD_ADDR_VAR 0 4
20320: PUSH
20321: LD_VAR 0 5
20325: PUSH
20326: LD_INT 1
20328: ARRAY
20329: ST_TO_ADDR
20330: GO 20346
// b := dep [ 1 ] ;
20332: LD_ADDR_VAR 0 4
20336: PUSH
20337: LD_VAR 0 6
20341: PUSH
20342: LD_INT 1
20344: ARRAY
20345: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20346: LD_VAR 0 2
20350: PPUSH
20351: LD_VAR 0 4
20355: PPUSH
20356: CALL_OW 180
// end ;
20360: GO 20274
20362: POP
20363: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20364: LD_ADDR_VAR 0 2
20368: PUSH
20369: LD_INT 22
20371: PUSH
20372: LD_INT 2
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PUSH
20379: LD_INT 25
20381: PUSH
20382: LD_INT 4
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: PPUSH
20393: CALL_OW 69
20397: PUSH
20398: FOR_IN
20399: IFFALSE 20445
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20401: LD_VAR 0 2
20405: PPUSH
20406: LD_INT 22
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: PUSH
20416: LD_INT 30
20418: PUSH
20419: LD_INT 8
20421: PUSH
20422: EMPTY
20423: LIST
20424: LIST
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: PPUSH
20430: CALL_OW 69
20434: PUSH
20435: LD_INT 1
20437: ARRAY
20438: PPUSH
20439: CALL_OW 120
20443: GO 20398
20445: POP
20446: POP
// end ;
20447: LD_VAR 0 1
20451: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20452: LD_INT 0
20454: PPUSH
20455: PPUSH
20456: PPUSH
20457: PPUSH
20458: PPUSH
20459: PPUSH
20460: PPUSH
20461: PPUSH
20462: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20463: LD_INT 22
20465: PUSH
20466: LD_VAR 0 1
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: LD_INT 21
20477: PUSH
20478: LD_INT 2
20480: PUSH
20481: EMPTY
20482: LIST
20483: LIST
20484: PUSH
20485: EMPTY
20486: LIST
20487: LIST
20488: PPUSH
20489: CALL_OW 69
20493: PUSH
20494: LD_VAR 0 3
20498: LESSEQUAL
20499: IFFALSE 20643
// for i = 1 to vehCount do
20501: LD_ADDR_VAR 0 10
20505: PUSH
20506: DOUBLE
20507: LD_INT 1
20509: DEC
20510: ST_TO_ADDR
20511: LD_VAR 0 3
20515: PUSH
20516: FOR_TO
20517: IFFALSE 20641
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20519: LD_ADDR_VAR 0 12
20523: PUSH
20524: LD_VAR 0 5
20528: PUSH
20529: LD_INT 1
20531: PPUSH
20532: LD_VAR 0 5
20536: PPUSH
20537: CALL_OW 12
20541: ARRAY
20542: ST_TO_ADDR
// if randWeapon = 46 then
20543: LD_VAR 0 12
20547: PUSH
20548: LD_INT 46
20550: EQUAL
20551: IFFALSE 20596
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20553: LD_VAR 0 2
20557: PPUSH
20558: LD_INT 24
20560: PPUSH
20561: LD_VAR 0 6
20565: PPUSH
20566: LD_VAR 0 7
20570: PUSH
20571: LD_INT 1
20573: PPUSH
20574: LD_VAR 0 7
20578: PPUSH
20579: CALL_OW 12
20583: ARRAY
20584: PPUSH
20585: LD_VAR 0 12
20589: PPUSH
20590: CALL_OW 185
20594: GO 20639
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20596: LD_VAR 0 2
20600: PPUSH
20601: LD_VAR 0 8
20605: PPUSH
20606: LD_VAR 0 6
20610: PPUSH
20611: LD_VAR 0 7
20615: PUSH
20616: LD_INT 1
20618: PPUSH
20619: LD_VAR 0 7
20623: PPUSH
20624: CALL_OW 12
20628: ARRAY
20629: PPUSH
20630: LD_VAR 0 12
20634: PPUSH
20635: CALL_OW 185
// end ;
20639: GO 20516
20641: POP
20642: POP
// repeat wait ( 0 0$1 ) ;
20643: LD_INT 35
20645: PPUSH
20646: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20650: LD_INT 22
20652: PUSH
20653: LD_VAR 0 1
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 21
20664: PUSH
20665: LD_INT 2
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: LD_INT 24
20674: PUSH
20675: LD_INT 250
20677: PUSH
20678: EMPTY
20679: LIST
20680: LIST
20681: PUSH
20682: EMPTY
20683: LIST
20684: LIST
20685: LIST
20686: PPUSH
20687: CALL_OW 69
20691: PUSH
20692: LD_VAR 0 3
20696: GREATEREQUAL
20697: IFFALSE 20643
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20699: LD_INT 22
20701: PUSH
20702: LD_VAR 0 1
20706: PUSH
20707: EMPTY
20708: LIST
20709: LIST
20710: PUSH
20711: LD_INT 21
20713: PUSH
20714: LD_INT 2
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 24
20723: PUSH
20724: LD_INT 250
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: PPUSH
20736: CALL_OW 69
20740: PUSH
20741: LD_VAR 0 3
20745: GREATEREQUAL
20746: IFFALSE 21089
// begin repeat begin wait ( 0 0$1 ) ;
20748: LD_INT 35
20750: PPUSH
20751: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20755: LD_INT 22
20757: PUSH
20758: LD_VAR 0 1
20762: PUSH
20763: EMPTY
20764: LIST
20765: LIST
20766: PUSH
20767: LD_INT 21
20769: PUSH
20770: LD_INT 2
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: PUSH
20777: LD_INT 24
20779: PUSH
20780: LD_INT 651
20782: PUSH
20783: EMPTY
20784: LIST
20785: LIST
20786: PUSH
20787: EMPTY
20788: LIST
20789: LIST
20790: LIST
20791: PPUSH
20792: CALL_OW 69
20796: PUSH
20797: LD_INT 0
20799: GREATER
20800: IFFALSE 21028
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
20802: LD_ADDR_VAR 0 10
20806: PUSH
20807: LD_INT 22
20809: PUSH
20810: LD_VAR 0 1
20814: PUSH
20815: EMPTY
20816: LIST
20817: LIST
20818: PUSH
20819: LD_INT 21
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 24
20831: PUSH
20832: LD_INT 651
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: LIST
20843: PPUSH
20844: CALL_OW 69
20848: PUSH
20849: FOR_IN
20850: IFFALSE 21026
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20852: LD_ADDR_VAR 0 16
20856: PUSH
20857: LD_INT 22
20859: PUSH
20860: LD_VAR 0 4
20864: PUSH
20865: EMPTY
20866: LIST
20867: LIST
20868: PPUSH
20869: CALL_OW 69
20873: PPUSH
20874: LD_VAR 0 10
20878: PPUSH
20879: CALL_OW 74
20883: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20884: LD_ADDR_VAR 0 17
20888: PUSH
20889: LD_INT 22
20891: PUSH
20892: LD_VAR 0 4
20896: PUSH
20897: EMPTY
20898: LIST
20899: LIST
20900: PUSH
20901: LD_INT 2
20903: PUSH
20904: LD_INT 59
20906: PUSH
20907: EMPTY
20908: LIST
20909: PUSH
20910: LD_INT 21
20912: PUSH
20913: LD_INT 1
20915: PUSH
20916: EMPTY
20917: LIST
20918: LIST
20919: PUSH
20920: LD_INT 21
20922: PUSH
20923: LD_INT 2
20925: PUSH
20926: EMPTY
20927: LIST
20928: LIST
20929: PUSH
20930: EMPTY
20931: LIST
20932: LIST
20933: LIST
20934: LIST
20935: PUSH
20936: EMPTY
20937: LIST
20938: LIST
20939: PUSH
20940: EMPTY
20941: LIST
20942: PPUSH
20943: CALL_OW 69
20947: PPUSH
20948: LD_VAR 0 10
20952: PPUSH
20953: CALL_OW 74
20957: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20958: LD_VAR 0 10
20962: PPUSH
20963: LD_VAR 0 16
20967: PPUSH
20968: CALL_OW 296
20972: PUSH
20973: LD_INT 8
20975: PLUS
20976: PUSH
20977: LD_VAR 0 10
20981: PPUSH
20982: LD_VAR 0 17
20986: PPUSH
20987: CALL_OW 296
20991: LESS
20992: IFFALSE 21010
// begin ComAttackUnit ( i , target1 ) ;
20994: LD_VAR 0 10
20998: PPUSH
20999: LD_VAR 0 16
21003: PPUSH
21004: CALL_OW 115
// end else
21008: GO 21024
// begin ComAttackUnit ( i , target2 ) ;
21010: LD_VAR 0 10
21014: PPUSH
21015: LD_VAR 0 17
21019: PPUSH
21020: CALL_OW 115
// end ; end ;
21024: GO 20849
21026: POP
21027: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21028: LD_INT 22
21030: PUSH
21031: LD_VAR 0 1
21035: PUSH
21036: EMPTY
21037: LIST
21038: LIST
21039: PUSH
21040: LD_INT 21
21042: PUSH
21043: LD_INT 2
21045: PUSH
21046: EMPTY
21047: LIST
21048: LIST
21049: PUSH
21050: EMPTY
21051: LIST
21052: LIST
21053: PPUSH
21054: CALL_OW 69
21058: PUSH
21059: LD_INT 0
21061: EQUAL
21062: PUSH
21063: LD_INT 22
21065: PUSH
21066: LD_VAR 0 4
21070: PUSH
21071: EMPTY
21072: LIST
21073: LIST
21074: PUSH
21075: EMPTY
21076: LIST
21077: PPUSH
21078: CALL_OW 69
21082: PUSH
21083: LD_INT 0
21085: EQUAL
21086: OR
21087: IFFALSE 20748
// end ; end ;
21089: LD_VAR 0 9
21093: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21094: LD_INT 0
21096: PPUSH
21097: PPUSH
21098: PPUSH
21099: PPUSH
// r := 100 ;
21100: LD_ADDR_VAR 0 5
21104: PUSH
21105: LD_INT 100
21107: ST_TO_ADDR
// x := 0 ;
21108: LD_ADDR_VAR 0 6
21112: PUSH
21113: LD_INT 0
21115: ST_TO_ADDR
// while ( x < n ) do
21116: LD_VAR 0 6
21120: PUSH
21121: LD_VAR 0 2
21125: LESS
21126: IFFALSE 21413
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21128: LD_ADDR_VAR 0 4
21132: PUSH
21133: DOUBLE
21134: LD_INT 1
21136: DEC
21137: ST_TO_ADDR
21138: LD_VAR 0 1
21142: PPUSH
21143: LD_INT 0
21145: PPUSH
21146: CALL_OW 517
21150: PUSH
21151: LD_INT 1
21153: ARRAY
21154: PUSH
21155: FOR_TO
21156: IFFALSE 21409
// begin if r > 50 then
21158: LD_VAR 0 5
21162: PUSH
21163: LD_INT 50
21165: GREATER
21166: IFFALSE 21385
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21168: LD_VAR 0 1
21172: PPUSH
21173: LD_INT 0
21175: PPUSH
21176: CALL_OW 517
21180: PUSH
21181: LD_INT 1
21183: ARRAY
21184: PUSH
21185: LD_VAR 0 4
21189: ARRAY
21190: PPUSH
21191: LD_VAR 0 1
21195: PPUSH
21196: LD_INT 0
21198: PPUSH
21199: CALL_OW 517
21203: PUSH
21204: LD_INT 2
21206: ARRAY
21207: PUSH
21208: LD_VAR 0 4
21212: ARRAY
21213: PPUSH
21214: CALL_OW 458
21218: NOT
21219: IFFALSE 21369
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21221: LD_VAR 0 1
21225: PPUSH
21226: LD_INT 0
21228: PPUSH
21229: CALL_OW 517
21233: PUSH
21234: LD_INT 1
21236: ARRAY
21237: PUSH
21238: LD_VAR 0 4
21242: ARRAY
21243: PPUSH
21244: LD_VAR 0 1
21248: PPUSH
21249: LD_INT 0
21251: PPUSH
21252: CALL_OW 517
21256: PUSH
21257: LD_INT 2
21259: ARRAY
21260: PUSH
21261: LD_VAR 0 4
21265: ARRAY
21266: PPUSH
21267: LD_INT 5
21269: PPUSH
21270: LD_INT 0
21272: PPUSH
21273: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21277: LD_ADDR_EXP 50
21281: PUSH
21282: LD_EXP 50
21286: PPUSH
21287: LD_INT 1
21289: PPUSH
21290: LD_VAR 0 1
21294: PPUSH
21295: LD_INT 0
21297: PPUSH
21298: CALL_OW 517
21302: PUSH
21303: LD_INT 1
21305: ARRAY
21306: PUSH
21307: LD_VAR 0 4
21311: ARRAY
21312: PUSH
21313: LD_VAR 0 1
21317: PPUSH
21318: LD_INT 0
21320: PPUSH
21321: CALL_OW 517
21325: PUSH
21326: LD_INT 2
21328: ARRAY
21329: PUSH
21330: LD_VAR 0 4
21334: ARRAY
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PPUSH
21340: CALL_OW 2
21344: ST_TO_ADDR
// r := 0 ;
21345: LD_ADDR_VAR 0 5
21349: PUSH
21350: LD_INT 0
21352: ST_TO_ADDR
// x := x + 1 ;
21353: LD_ADDR_VAR 0 6
21357: PUSH
21358: LD_VAR 0 6
21362: PUSH
21363: LD_INT 1
21365: PLUS
21366: ST_TO_ADDR
// end else
21367: GO 21383
// r := r + 35 ;
21369: LD_ADDR_VAR 0 5
21373: PUSH
21374: LD_VAR 0 5
21378: PUSH
21379: LD_INT 35
21381: PLUS
21382: ST_TO_ADDR
// end else
21383: GO 21407
// r := r + rand ( 10 , 25 ) ;
21385: LD_ADDR_VAR 0 5
21389: PUSH
21390: LD_VAR 0 5
21394: PUSH
21395: LD_INT 10
21397: PPUSH
21398: LD_INT 25
21400: PPUSH
21401: CALL_OW 12
21405: PLUS
21406: ST_TO_ADDR
// end ;
21407: GO 21155
21409: POP
21410: POP
21411: GO 21116
// end ; end_of_file
21413: LD_VAR 0 3
21417: RET
// every 0 0$1 trigger russianAI = 1 do
21418: LD_EXP 39
21422: PUSH
21423: LD_INT 1
21425: EQUAL
21426: IFFALSE 21645
21428: GO 21430
21430: DISABLE
// begin enable ;
21431: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21432: LD_INT 3
21434: PPUSH
21435: LD_EXP 30
21439: PPUSH
21440: CALL 15896 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21444: LD_INT 3
21446: PPUSH
21447: LD_EXP 42
21451: PPUSH
21452: CALL 16256 0 2
// if ruPossition = 1 then
21456: LD_EXP 41
21460: PUSH
21461: LD_INT 1
21463: EQUAL
21464: IFFALSE 21519
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21466: LD_INT 3
21468: PPUSH
21469: LD_INT 13
21471: PPUSH
21472: LD_INT 10
21474: PPUSH
21475: LD_INT 22
21477: PUSH
21478: LD_INT 3
21480: PUSH
21481: EMPTY
21482: LIST
21483: LIST
21484: PUSH
21485: LD_INT 21
21487: PUSH
21488: LD_INT 3
21490: PUSH
21491: EMPTY
21492: LIST
21493: LIST
21494: PUSH
21495: LD_INT 30
21497: PUSH
21498: LD_INT 8
21500: PUSH
21501: EMPTY
21502: LIST
21503: LIST
21504: PUSH
21505: EMPTY
21506: LIST
21507: LIST
21508: LIST
21509: PPUSH
21510: CALL_OW 69
21514: PPUSH
21515: CALL 16462 0 4
// if ruPossition = 2 then
21519: LD_EXP 41
21523: PUSH
21524: LD_INT 2
21526: EQUAL
21527: IFFALSE 21582
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21529: LD_INT 3
21531: PPUSH
21532: LD_INT 14
21534: PPUSH
21535: LD_INT 11
21537: PPUSH
21538: LD_INT 22
21540: PUSH
21541: LD_INT 3
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PUSH
21548: LD_INT 21
21550: PUSH
21551: LD_INT 3
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PUSH
21558: LD_INT 30
21560: PUSH
21561: LD_INT 8
21563: PUSH
21564: EMPTY
21565: LIST
21566: LIST
21567: PUSH
21568: EMPTY
21569: LIST
21570: LIST
21571: LIST
21572: PPUSH
21573: CALL_OW 69
21577: PPUSH
21578: CALL 16462 0 4
// if ruPossition = 3 then
21582: LD_EXP 41
21586: PUSH
21587: LD_INT 3
21589: EQUAL
21590: IFFALSE 21645
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21592: LD_INT 3
21594: PPUSH
21595: LD_INT 15
21597: PPUSH
21598: LD_INT 12
21600: PPUSH
21601: LD_INT 22
21603: PUSH
21604: LD_INT 3
21606: PUSH
21607: EMPTY
21608: LIST
21609: LIST
21610: PUSH
21611: LD_INT 21
21613: PUSH
21614: LD_INT 3
21616: PUSH
21617: EMPTY
21618: LIST
21619: LIST
21620: PUSH
21621: LD_INT 30
21623: PUSH
21624: LD_INT 8
21626: PUSH
21627: EMPTY
21628: LIST
21629: LIST
21630: PUSH
21631: EMPTY
21632: LIST
21633: LIST
21634: LIST
21635: PPUSH
21636: CALL_OW 69
21640: PPUSH
21641: CALL 16462 0 4
// end ;
21645: END
// every 0 0$1 do
21646: GO 21648
21648: DISABLE
// begin enable ;
21649: ENABLE
// if ruPossition = 1 then
21650: LD_EXP 41
21654: PUSH
21655: LD_INT 1
21657: EQUAL
21658: IFFALSE 21670
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21660: LD_INT 3
21662: PPUSH
21663: LD_INT 10
21665: PPUSH
21666: CALL 15533 0 2
// if ruPossition = 2 then
21670: LD_EXP 41
21674: PUSH
21675: LD_INT 2
21677: EQUAL
21678: IFFALSE 21690
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21680: LD_INT 3
21682: PPUSH
21683: LD_INT 11
21685: PPUSH
21686: CALL 15533 0 2
// if ruPossition = 3 then
21690: LD_EXP 41
21694: PUSH
21695: LD_INT 3
21697: EQUAL
21698: IFFALSE 21710
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21700: LD_INT 3
21702: PPUSH
21703: LD_INT 12
21705: PPUSH
21706: CALL 15533 0 2
// IntBazooka ( 3 , 1 ) ;
21710: LD_INT 3
21712: PPUSH
21713: LD_INT 1
21715: PPUSH
21716: CALL 14332 0 2
// IntBazooka ( 6 , 1 ) ;
21720: LD_INT 6
21722: PPUSH
21723: LD_INT 1
21725: PPUSH
21726: CALL 14332 0 2
// end ;
21730: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21731: LD_EXP 39
21735: PUSH
21736: LD_INT 1
21738: EQUAL
21739: PUSH
21740: LD_EXP 35
21744: PPUSH
21745: CALL_OW 302
21749: AND
21750: PUSH
21751: LD_EXP 35
21755: PPUSH
21756: CALL_OW 255
21760: PUSH
21761: LD_INT 3
21763: EQUAL
21764: AND
21765: PUSH
21766: LD_INT 22
21768: PUSH
21769: LD_INT 3
21771: PUSH
21772: EMPTY
21773: LIST
21774: LIST
21775: PUSH
21776: LD_INT 21
21778: PUSH
21779: LD_INT 2
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: PUSH
21786: LD_INT 33
21788: PUSH
21789: LD_INT 3
21791: PUSH
21792: EMPTY
21793: LIST
21794: LIST
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: LIST
21800: PPUSH
21801: CALL_OW 69
21805: PUSH
21806: LD_INT 0
21808: EQUAL
21809: AND
21810: IFFALSE 22018
21812: GO 21814
21814: DISABLE
// begin enable ;
21815: ENABLE
// if Difficulty = 1 then
21816: LD_OWVAR 67
21820: PUSH
21821: LD_INT 1
21823: EQUAL
21824: IFFALSE 21886
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21826: LD_INT 3
21828: PPUSH
21829: LD_EXP 35
21833: PPUSH
21834: LD_INT 5
21836: PPUSH
21837: LD_INT 8
21839: PPUSH
21840: CALL_OW 12
21844: PPUSH
21845: LD_INT 1
21847: PPUSH
21848: LD_INT 43
21850: PUSH
21851: LD_INT 44
21853: PUSH
21854: LD_INT 45
21856: PUSH
21857: LD_INT 46
21859: PUSH
21860: EMPTY
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: PPUSH
21866: LD_INT 1
21868: PPUSH
21869: LD_INT 3
21871: PUSH
21872: LD_INT 3
21874: PUSH
21875: EMPTY
21876: LIST
21877: LIST
21878: PPUSH
21879: LD_INT 22
21881: PPUSH
21882: CALL 20452 0 8
// if Difficulty = 2 then
21886: LD_OWVAR 67
21890: PUSH
21891: LD_INT 2
21893: EQUAL
21894: IFFALSE 21952
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21896: LD_INT 3
21898: PPUSH
21899: LD_EXP 35
21903: PPUSH
21904: LD_INT 6
21906: PPUSH
21907: LD_INT 8
21909: PPUSH
21910: CALL_OW 12
21914: PPUSH
21915: LD_INT 1
21917: PPUSH
21918: LD_INT 44
21920: PUSH
21921: LD_INT 45
21923: PUSH
21924: LD_INT 46
21926: PUSH
21927: EMPTY
21928: LIST
21929: LIST
21930: LIST
21931: PPUSH
21932: LD_INT 1
21934: PPUSH
21935: LD_INT 3
21937: PUSH
21938: LD_INT 3
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: PPUSH
21945: LD_INT 22
21947: PPUSH
21948: CALL 20452 0 8
// if Difficulty = 3 then
21952: LD_OWVAR 67
21956: PUSH
21957: LD_INT 3
21959: EQUAL
21960: IFFALSE 22018
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21962: LD_INT 3
21964: PPUSH
21965: LD_EXP 35
21969: PPUSH
21970: LD_INT 7
21972: PPUSH
21973: LD_INT 8
21975: PPUSH
21976: CALL_OW 12
21980: PPUSH
21981: LD_INT 1
21983: PPUSH
21984: LD_INT 44
21986: PUSH
21987: LD_INT 45
21989: PUSH
21990: LD_INT 46
21992: PUSH
21993: EMPTY
21994: LIST
21995: LIST
21996: LIST
21997: PPUSH
21998: LD_INT 1
22000: PPUSH
22001: LD_INT 3
22003: PUSH
22004: LD_INT 3
22006: PUSH
22007: EMPTY
22008: LIST
22009: LIST
22010: PPUSH
22011: LD_INT 22
22013: PPUSH
22014: CALL 20452 0 8
// end ;
22018: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22019: LD_EXP 50
22023: PUSH
22024: LD_EXP 49
22028: AND
22029: IFFALSE 22150
22031: GO 22033
22033: DISABLE
22034: LD_INT 0
22036: PPUSH
// begin enable ;
22037: ENABLE
// for i in arabianMines do
22038: LD_ADDR_VAR 0 1
22042: PUSH
22043: LD_EXP 50
22047: PUSH
22048: FOR_IN
22049: IFFALSE 22148
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22051: LD_INT 22
22053: PUSH
22054: LD_INT 1
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 92
22063: PUSH
22064: LD_VAR 0 1
22068: PUSH
22069: LD_INT 1
22071: ARRAY
22072: PUSH
22073: LD_VAR 0 1
22077: PUSH
22078: LD_INT 2
22080: ARRAY
22081: PUSH
22082: LD_INT 3
22084: PUSH
22085: EMPTY
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: PUSH
22091: EMPTY
22092: LIST
22093: LIST
22094: PPUSH
22095: CALL_OW 69
22099: IFFALSE 22146
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22101: LD_VAR 0 1
22105: PUSH
22106: LD_INT 1
22108: ARRAY
22109: PPUSH
22110: LD_VAR 0 1
22114: PUSH
22115: LD_INT 2
22117: ARRAY
22118: PPUSH
22119: LD_INT 5
22121: PPUSH
22122: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22126: LD_ADDR_EXP 50
22130: PUSH
22131: LD_EXP 50
22135: PPUSH
22136: LD_VAR 0 1
22140: PPUSH
22141: CALL_OW 3
22145: ST_TO_ADDR
// end ; end ;
22146: GO 22048
22148: POP
22149: POP
// end ; end_of_file
22150: PPOPN 1
22152: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22153: LD_VAR 0 1
22157: PPUSH
22158: CALL_OW 255
22162: PUSH
22163: LD_INT 4
22165: EQUAL
22166: IFFALSE 22180
// SetBName ( building , epsilon ) ;
22168: LD_VAR 0 1
22172: PPUSH
22173: LD_STRING epsilon
22175: PPUSH
22176: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22180: LD_VAR 0 1
22184: PPUSH
22185: CALL_OW 255
22189: PUSH
22190: LD_INT 1
22192: EQUAL
22193: PUSH
22194: LD_VAR 0 1
22198: PPUSH
22199: CALL_OW 266
22203: PUSH
22204: LD_INT 0
22206: EQUAL
22207: AND
22208: IFFALSE 22222
// SetBName ( building , epsilon ) ;
22210: LD_VAR 0 1
22214: PPUSH
22215: LD_STRING epsilon
22217: PPUSH
22218: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22222: LD_VAR 0 1
22226: PPUSH
22227: CALL_OW 255
22231: PUSH
22232: LD_INT 3
22234: EQUAL
22235: PUSH
22236: LD_VAR 0 1
22240: PPUSH
22241: CALL_OW 266
22245: PUSH
22246: LD_INT 0
22248: EQUAL
22249: AND
22250: IFFALSE 22264
// SetBName ( building , chuikov ) ;
22252: LD_VAR 0 1
22256: PPUSH
22257: LD_STRING chuikov
22259: PPUSH
22260: CALL_OW 500
// if GetSide ( building ) = 2 then
22264: LD_VAR 0 1
22268: PPUSH
22269: CALL_OW 255
22273: PUSH
22274: LD_INT 2
22276: EQUAL
22277: IFFALSE 22333
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22279: LD_VAR 0 1
22283: PPUSH
22284: CALL_OW 266
22288: PUSH
22289: LD_INT 6
22291: EQUAL
22292: PUSH
22293: LD_VAR 0 1
22297: PPUSH
22298: CALL_OW 266
22302: PUSH
22303: LD_INT 9
22305: EQUAL
22306: OR
22307: IFFALSE 22333
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22309: LD_VAR 0 1
22313: PPUSH
22314: LD_INT 10
22316: PPUSH
22317: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22321: LD_VAR 0 1
22325: PPUSH
22326: LD_INT 11
22328: PPUSH
22329: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22333: LD_VAR 0 1
22337: PPUSH
22338: CALL_OW 255
22342: PUSH
22343: LD_INT 3
22345: EQUAL
22346: IFFALSE 22372
// begin if GetBType ( building ) = 2 then
22348: LD_VAR 0 1
22352: PPUSH
22353: CALL_OW 266
22357: PUSH
22358: LD_INT 2
22360: EQUAL
22361: IFFALSE 22372
// AddComUpgrade ( building ) ;
22363: LD_VAR 0 1
22367: PPUSH
22368: CALL_OW 206
// end ; end ;
22372: PPOPN 2
22374: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22375: LD_INT 0
22377: PPUSH
22378: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22379: LD_VAR 0 1
22383: PUSH
22384: LD_INT 22
22386: PUSH
22387: LD_INT 3
22389: PUSH
22390: EMPTY
22391: LIST
22392: LIST
22393: PUSH
22394: LD_INT 23
22396: PUSH
22397: LD_INT 3
22399: PUSH
22400: EMPTY
22401: LIST
22402: LIST
22403: PUSH
22404: LD_INT 21
22406: PUSH
22407: LD_INT 2
22409: PUSH
22410: EMPTY
22411: LIST
22412: LIST
22413: PUSH
22414: EMPTY
22415: LIST
22416: LIST
22417: LIST
22418: PPUSH
22419: CALL_OW 69
22423: IN
22424: PUSH
22425: LD_EXP 59
22429: NOT
22430: AND
22431: IFFALSE 22462
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22433: LD_ADDR_EXP 59
22437: PUSH
22438: LD_VAR 0 1
22442: PPUSH
22443: CALL_OW 250
22447: PUSH
22448: LD_VAR 0 1
22452: PPUSH
22453: CALL_OW 251
22457: PUSH
22458: EMPTY
22459: LIST
22460: LIST
22461: ST_TO_ADDR
// end ;
22462: PPOPN 3
22464: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22465: LD_VAR 0 2
22469: PPUSH
22470: CALL_OW 255
22474: PUSH
22475: LD_INT 3
22477: EQUAL
22478: PUSH
22479: LD_EXP 35
22483: PPUSH
22484: CALL_OW 255
22488: PUSH
22489: LD_INT 3
22491: EQUAL
22492: AND
22493: PUSH
22494: LD_EXP 35
22498: PPUSH
22499: CALL_OW 302
22503: AND
22504: IFFALSE 22520
// ComEnterUnit ( human , ruFab ) ;
22506: LD_VAR 0 2
22510: PPUSH
22511: LD_EXP 35
22515: PPUSH
22516: CALL_OW 120
// end ;
22520: PPOPN 2
22522: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22523: LD_INT 0
22525: PPUSH
22526: PPUSH
22527: PPUSH
22528: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22529: LD_VAR 0 1
22533: PPUSH
22534: CALL_OW 255
22538: PUSH
22539: LD_INT 1
22541: EQUAL
22542: PUSH
22543: LD_EXP 63
22547: PUSH
22548: LD_INT 0
22550: EQUAL
22551: AND
22552: IFFALSE 22754
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22554: LD_VAR 0 1
22558: PPUSH
22559: CALL_OW 266
22563: PUSH
22564: LD_INT 26
22566: EQUAL
22567: PUSH
22568: LD_VAR 0 1
22572: PPUSH
22573: CALL_OW 266
22577: PUSH
22578: LD_INT 27
22580: EQUAL
22581: OR
22582: PUSH
22583: LD_VAR 0 1
22587: PPUSH
22588: CALL_OW 266
22592: PUSH
22593: LD_INT 28
22595: EQUAL
22596: OR
22597: IFFALSE 22754
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22599: LD_INT 22
22601: PUSH
22602: LD_INT 1
22604: PUSH
22605: EMPTY
22606: LIST
22607: LIST
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: LD_INT 30
22614: PUSH
22615: LD_INT 7
22617: PUSH
22618: EMPTY
22619: LIST
22620: LIST
22621: PUSH
22622: LD_INT 30
22624: PUSH
22625: LD_INT 8
22627: PUSH
22628: EMPTY
22629: LIST
22630: LIST
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: LIST
22636: PUSH
22637: EMPTY
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 69
22645: PUSH
22646: LD_INT 0
22648: GREATER
22649: IFFALSE 22754
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22651: LD_ADDR_VAR 0 2
22655: PUSH
22656: LD_INT 22
22658: PUSH
22659: LD_INT 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 2
22668: PUSH
22669: LD_INT 30
22671: PUSH
22672: LD_INT 7
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: LD_INT 30
22681: PUSH
22682: LD_INT 8
22684: PUSH
22685: EMPTY
22686: LIST
22687: LIST
22688: PUSH
22689: EMPTY
22690: LIST
22691: LIST
22692: LIST
22693: PUSH
22694: EMPTY
22695: LIST
22696: LIST
22697: PPUSH
22698: CALL_OW 69
22702: PUSH
22703: FOR_IN
22704: IFFALSE 22752
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22706: LD_VAR 0 2
22710: PPUSH
22711: LD_INT 1
22713: PPUSH
22714: CALL_OW 268
22718: PUSH
22719: LD_INT 11
22721: EQUAL
22722: PUSH
22723: LD_VAR 0 2
22727: PPUSH
22728: LD_INT 2
22730: PPUSH
22731: CALL_OW 268
22735: PUSH
22736: LD_INT 11
22738: EQUAL
22739: OR
22740: IFFALSE 22750
// eventVar1 = 1 ;
22742: LD_ADDR_EXP 63
22746: PUSH
22747: LD_INT 1
22749: ST_TO_ADDR
22750: GO 22703
22752: POP
22753: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 255
22763: PUSH
22764: LD_INT 3
22766: EQUAL
22767: IFFALSE 23247
// begin if GetBType ( building ) = b_depot then
22769: LD_VAR 0 1
22773: PPUSH
22774: CALL_OW 266
22778: PUSH
22779: LD_INT 0
22781: EQUAL
22782: IFFALSE 22854
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
22784: LD_VAR 0 1
22788: PPUSH
22789: CALL_OW 274
22793: PPUSH
22794: LD_INT 1
22796: PPUSH
22797: LD_INT 5000
22799: PPUSH
22800: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
22804: LD_VAR 0 1
22808: PPUSH
22809: CALL_OW 274
22813: PPUSH
22814: LD_INT 2
22816: PPUSH
22817: LD_INT 300
22819: PPUSH
22820: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
22824: LD_VAR 0 1
22828: PPUSH
22829: CALL_OW 274
22833: PPUSH
22834: LD_INT 3
22836: PPUSH
22837: LD_INT 100
22839: PPUSH
22840: CALL_OW 277
// ruDepot = building ;
22844: LD_ADDR_EXP 30
22848: PUSH
22849: LD_VAR 0 1
22853: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22854: LD_VAR 0 1
22858: PPUSH
22859: CALL_OW 266
22863: PUSH
22864: LD_INT 0
22866: EQUAL
22867: PUSH
22868: LD_VAR 0 1
22872: PPUSH
22873: CALL_OW 266
22877: PUSH
22878: LD_INT 2
22880: EQUAL
22881: OR
22882: PUSH
22883: LD_VAR 0 1
22887: PPUSH
22888: CALL_OW 266
22892: PUSH
22893: LD_INT 4
22895: EQUAL
22896: OR
22897: IFFALSE 22908
// ComUpgrade ( building ) ;
22899: LD_VAR 0 1
22903: PPUSH
22904: CALL_OW 146
// if GetBType ( building ) = b_lab then
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL_OW 266
22917: PUSH
22918: LD_INT 6
22920: EQUAL
22921: IFFALSE 23124
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
22923: LD_INT 22
22925: PUSH
22926: LD_INT 3
22928: PUSH
22929: EMPTY
22930: LIST
22931: LIST
22932: PUSH
22933: LD_INT 30
22935: PUSH
22936: LD_INT 8
22938: PUSH
22939: EMPTY
22940: LIST
22941: LIST
22942: PUSH
22943: EMPTY
22944: LIST
22945: LIST
22946: PPUSH
22947: CALL_OW 69
22951: PUSH
22952: LD_INT 0
22954: EQUAL
22955: IFFALSE 22993
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22957: LD_VAR 0 1
22961: PPUSH
22962: LD_INT 10
22964: PPUSH
22965: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
22969: LD_VAR 0 1
22973: PPUSH
22974: LD_INT 12
22976: PPUSH
22977: CALL_OW 207
// ruLab1 = building ;
22981: LD_ADDR_EXP 31
22985: PUSH
22986: LD_VAR 0 1
22990: ST_TO_ADDR
// end else
22991: GO 23027
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
22993: LD_VAR 0 1
22997: PPUSH
22998: LD_INT 11
23000: PPUSH
23001: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23005: LD_VAR 0 1
23009: PPUSH
23010: LD_INT 14
23012: PPUSH
23013: CALL_OW 207
// ruLab2 = building ;
23017: LD_ADDR_EXP 32
23021: PUSH
23022: LD_VAR 0 1
23026: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23027: LD_INT 3
23029: PPUSH
23030: LD_VAR 0 1
23034: PPUSH
23035: LD_INT 3
23037: PPUSH
23038: CALL 15448 0 3
// if ruDestroyedBuildings > 0 then
23042: LD_EXP 42
23046: PUSH
23047: LD_INT 0
23049: GREATER
23050: IFFALSE 23124
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23052: LD_ADDR_EXP 42
23056: PUSH
23057: LD_EXP 42
23061: PPUSH
23062: LD_INT 1
23064: PPUSH
23065: CALL_OW 3
23069: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23070: LD_ADDR_EXP 42
23074: PUSH
23075: LD_EXP 42
23079: PPUSH
23080: LD_INT 1
23082: PPUSH
23083: CALL_OW 3
23087: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23088: LD_ADDR_EXP 42
23092: PUSH
23093: LD_EXP 42
23097: PPUSH
23098: LD_INT 1
23100: PPUSH
23101: CALL_OW 3
23105: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23106: LD_ADDR_EXP 42
23110: PUSH
23111: LD_EXP 42
23115: PPUSH
23116: LD_INT 1
23118: PPUSH
23119: CALL_OW 3
23123: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23124: LD_VAR 0 1
23128: PPUSH
23129: CALL_OW 266
23133: PUSH
23134: LD_INT 32
23136: EQUAL
23137: IFFALSE 23174
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23139: LD_VAR 0 1
23143: PPUSH
23144: LD_INT 44
23146: PUSH
23147: LD_INT 45
23149: PUSH
23150: LD_INT 46
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: LD_INT 1
23160: PPUSH
23161: LD_INT 3
23163: PPUSH
23164: CALL_OW 12
23168: ARRAY
23169: PPUSH
23170: CALL_OW 208
// if GetBType ( building ) = b_turret then
23174: LD_VAR 0 1
23178: PPUSH
23179: CALL_OW 266
23183: PUSH
23184: LD_INT 33
23186: EQUAL
23187: IFFALSE 23224
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23189: LD_VAR 0 1
23193: PPUSH
23194: LD_INT 44
23196: PUSH
23197: LD_INT 45
23199: PUSH
23200: LD_INT 46
23202: PUSH
23203: EMPTY
23204: LIST
23205: LIST
23206: LIST
23207: PUSH
23208: LD_INT 1
23210: PPUSH
23211: LD_INT 3
23213: PPUSH
23214: CALL_OW 12
23218: ARRAY
23219: PPUSH
23220: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23224: LD_VAR 0 1
23228: PPUSH
23229: CALL_OW 266
23233: PUSH
23234: LD_INT 24
23236: EQUAL
23237: IFFALSE 23247
// russianAI = 1 ;
23239: LD_ADDR_EXP 39
23243: PUSH
23244: LD_INT 1
23246: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23247: LD_VAR 0 1
23251: PPUSH
23252: CALL_OW 255
23256: PUSH
23257: LD_INT 2
23259: EQUAL
23260: IFFALSE 24139
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23262: LD_VAR 0 1
23266: PPUSH
23267: CALL_OW 266
23271: PUSH
23272: LD_EXP 66
23276: PUSH
23277: LD_INT 1
23279: ARRAY
23280: PUSH
23281: LD_INT 1
23283: ARRAY
23284: EQUAL
23285: IFFALSE 23412
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23287: LD_ADDR_EXP 66
23291: PUSH
23292: LD_EXP 66
23296: PPUSH
23297: LD_INT 1
23299: PPUSH
23300: CALL_OW 3
23304: ST_TO_ADDR
// if arBuildingsTab then
23305: LD_EXP 66
23309: IFFALSE 23412
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23311: LD_ADDR_VAR 0 3
23315: PUSH
23316: LD_INT 22
23318: PUSH
23319: LD_INT 2
23321: PUSH
23322: EMPTY
23323: LIST
23324: LIST
23325: PUSH
23326: LD_INT 25
23328: PUSH
23329: LD_INT 2
23331: PUSH
23332: EMPTY
23333: LIST
23334: LIST
23335: PUSH
23336: EMPTY
23337: LIST
23338: LIST
23339: PPUSH
23340: CALL_OW 69
23344: ST_TO_ADDR
// if engineers then
23345: LD_VAR 0 3
23349: IFFALSE 23412
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23351: LD_VAR 0 3
23355: PPUSH
23356: LD_EXP 66
23360: PUSH
23361: LD_INT 1
23363: ARRAY
23364: PUSH
23365: LD_INT 1
23367: ARRAY
23368: PPUSH
23369: LD_EXP 66
23373: PUSH
23374: LD_INT 1
23376: ARRAY
23377: PUSH
23378: LD_INT 2
23380: ARRAY
23381: PPUSH
23382: LD_EXP 66
23386: PUSH
23387: LD_INT 1
23389: ARRAY
23390: PUSH
23391: LD_INT 3
23393: ARRAY
23394: PPUSH
23395: LD_EXP 66
23399: PUSH
23400: LD_INT 1
23402: ARRAY
23403: PUSH
23404: LD_INT 4
23406: ARRAY
23407: PPUSH
23408: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23412: LD_VAR 0 1
23416: PPUSH
23417: CALL_OW 266
23421: PUSH
23422: LD_INT 31
23424: EQUAL
23425: IFFALSE 23571
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23427: LD_ADDR_VAR 0 4
23431: PUSH
23432: LD_INT 22
23434: PUSH
23435: LD_INT 2
23437: PUSH
23438: EMPTY
23439: LIST
23440: LIST
23441: PUSH
23442: LD_INT 2
23444: PUSH
23445: LD_INT 25
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: EMPTY
23452: LIST
23453: LIST
23454: PUSH
23455: LD_INT 25
23457: PUSH
23458: LD_INT 8
23460: PUSH
23461: EMPTY
23462: LIST
23463: LIST
23464: PUSH
23465: EMPTY
23466: LIST
23467: LIST
23468: LIST
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PPUSH
23474: CALL_OW 69
23478: PUSH
23479: LD_EXP 26
23483: DIFF
23484: ST_TO_ADDR
// if not sol then
23485: LD_VAR 0 4
23489: NOT
23490: IFFALSE 23494
// exit ;
23492: GO 24139
// for i in sol do
23494: LD_ADDR_VAR 0 2
23498: PUSH
23499: LD_VAR 0 4
23503: PUSH
23504: FOR_IN
23505: IFFALSE 23569
// if not GetTag ( i ) then
23507: LD_VAR 0 2
23511: PPUSH
23512: CALL_OW 110
23516: NOT
23517: IFFALSE 23567
// begin if IsInUnit ( i ) then
23519: LD_VAR 0 2
23523: PPUSH
23524: CALL_OW 310
23528: IFFALSE 23539
// ComExitBuilding ( i ) ;
23530: LD_VAR 0 2
23534: PPUSH
23535: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23539: LD_VAR 0 2
23543: PPUSH
23544: LD_VAR 0 1
23548: PPUSH
23549: CALL_OW 180
// SetTag ( i , 11 ) ;
23553: LD_VAR 0 2
23557: PPUSH
23558: LD_INT 11
23560: PPUSH
23561: CALL_OW 109
// break ;
23565: GO 23569
// end ;
23567: GO 23504
23569: POP
23570: POP
// end ; if GetBType ( building ) = b_depot then
23571: LD_VAR 0 1
23575: PPUSH
23576: CALL_OW 266
23580: PUSH
23581: LD_INT 0
23583: EQUAL
23584: IFFALSE 23670
// begin arDepot = building ;
23586: LD_ADDR_EXP 43
23590: PUSH
23591: LD_VAR 0 1
23595: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23596: LD_INT 38
23598: PUSH
23599: LD_INT 47
23601: PUSH
23602: EMPTY
23603: LIST
23604: LIST
23605: PPUSH
23606: LD_INT 71
23608: PPUSH
23609: LD_INT 19
23611: PPUSH
23612: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23616: LD_VAR 0 1
23620: PPUSH
23621: CALL_OW 274
23625: PPUSH
23626: LD_INT 1
23628: PPUSH
23629: LD_INT 500
23631: PPUSH
23632: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23636: LD_VAR 0 1
23640: PPUSH
23641: CALL_OW 274
23645: PPUSH
23646: LD_INT 3
23648: PPUSH
23649: LD_INT 30
23651: PPUSH
23652: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23656: LD_EXP 26
23660: PPUSH
23661: LD_VAR 0 1
23665: PPUSH
23666: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23670: LD_VAR 0 1
23674: PPUSH
23675: CALL_OW 266
23679: PUSH
23680: LD_INT 6
23682: EQUAL
23683: PUSH
23684: LD_VAR 0 1
23688: PPUSH
23689: CALL_OW 266
23693: PUSH
23694: LD_INT 9
23696: EQUAL
23697: OR
23698: IFFALSE 23749
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23700: LD_VAR 0 1
23704: PPUSH
23705: LD_INT 10
23707: PPUSH
23708: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23712: LD_VAR 0 1
23716: PPUSH
23717: LD_INT 11
23719: PPUSH
23720: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23724: LD_INT 2
23726: PPUSH
23727: LD_VAR 0 1
23731: PPUSH
23732: LD_INT 2
23734: PPUSH
23735: CALL 15448 0 3
// arLab = building ;
23739: LD_ADDR_EXP 44
23743: PUSH
23744: LD_VAR 0 1
23748: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23749: LD_VAR 0 1
23753: PPUSH
23754: CALL_OW 266
23758: PUSH
23759: LD_INT 2
23761: EQUAL
23762: PUSH
23763: LD_VAR 0 1
23767: PPUSH
23768: CALL_OW 266
23772: PUSH
23773: LD_INT 4
23775: EQUAL
23776: OR
23777: IFFALSE 23848
// begin ComUpgrade ( building ) ;
23779: LD_VAR 0 1
23783: PPUSH
23784: CALL_OW 146
// if GetBType ( building ) = b_armoury then
23788: LD_VAR 0 1
23792: PPUSH
23793: CALL_OW 266
23797: PUSH
23798: LD_INT 4
23800: EQUAL
23801: IFFALSE 23848
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
23803: LD_INT 22
23805: PUSH
23806: LD_INT 2
23808: PUSH
23809: EMPTY
23810: LIST
23811: LIST
23812: PUSH
23813: LD_INT 25
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: EMPTY
23820: LIST
23821: LIST
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PPUSH
23827: CALL_OW 69
23831: PUSH
23832: LD_EXP 26
23836: DIFF
23837: PPUSH
23838: LD_INT 75
23840: PPUSH
23841: LD_INT 21
23843: PPUSH
23844: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
23848: LD_VAR 0 1
23852: PPUSH
23853: CALL_OW 266
23857: PUSH
23858: LD_INT 27
23860: EQUAL
23861: IFFALSE 24139
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
23863: LD_INT 22
23865: PUSH
23866: LD_INT 2
23868: PUSH
23869: EMPTY
23870: LIST
23871: LIST
23872: PUSH
23873: LD_INT 30
23875: PUSH
23876: LD_INT 27
23878: PUSH
23879: EMPTY
23880: LIST
23881: LIST
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PPUSH
23887: CALL_OW 69
23891: PUSH
23892: LD_INT 2
23894: EQUAL
23895: IFFALSE 24139
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
23897: LD_ADDR_VAR 0 2
23901: PUSH
23902: LD_INT 22
23904: PUSH
23905: LD_INT 2
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: LD_INT 21
23914: PUSH
23915: LD_INT 1
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PUSH
23922: LD_INT 25
23924: PUSH
23925: LD_INT 2
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PUSH
23932: EMPTY
23933: LIST
23934: LIST
23935: LIST
23936: PPUSH
23937: CALL_OW 69
23941: PUSH
23942: LD_INT 1
23944: ARRAY
23945: ST_TO_ADDR
// if not i then
23946: LD_VAR 0 2
23950: NOT
23951: IFFALSE 23955
// exit ;
23953: GO 24139
// AddComMoveXY ( i , 92 , 34 ) ;
23955: LD_VAR 0 2
23959: PPUSH
23960: LD_INT 92
23962: PPUSH
23963: LD_INT 34
23965: PPUSH
23966: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23970: LD_VAR 0 2
23974: PPUSH
23975: LD_INT 35
23977: PPUSH
23978: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
23982: LD_VAR 0 2
23986: PPUSH
23987: LD_INT 101
23989: PPUSH
23990: LD_INT 20
23992: PPUSH
23993: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23997: LD_VAR 0 2
24001: PPUSH
24002: LD_INT 35
24004: PPUSH
24005: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24009: LD_VAR 0 2
24013: PPUSH
24014: LD_INT 115
24016: PPUSH
24017: LD_INT 30
24019: PPUSH
24020: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24024: LD_VAR 0 2
24028: PPUSH
24029: LD_INT 35
24031: PPUSH
24032: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24036: LD_VAR 0 2
24040: PPUSH
24041: LD_INT 82
24043: PPUSH
24044: LD_INT 57
24046: PPUSH
24047: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24051: LD_VAR 0 2
24055: PPUSH
24056: LD_INT 35
24058: PPUSH
24059: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24063: LD_VAR 0 2
24067: PPUSH
24068: LD_INT 36
24070: PPUSH
24071: LD_INT 28
24073: PPUSH
24074: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24078: LD_VAR 0 2
24082: PPUSH
24083: LD_INT 70
24085: PPUSH
24086: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24090: LD_INT 22
24092: PUSH
24093: LD_INT 2
24095: PUSH
24096: EMPTY
24097: LIST
24098: LIST
24099: PUSH
24100: LD_INT 21
24102: PUSH
24103: LD_INT 1
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 25
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: EMPTY
24117: LIST
24118: LIST
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: LIST
24124: PPUSH
24125: CALL_OW 69
24129: PPUSH
24130: LD_EXP 43
24134: PPUSH
24135: CALL_OW 180
// end ; end ; end ;
24139: PPOPN 5
24141: END
// on UpgradeComplete ( building ) do var i ;
24142: LD_INT 0
24144: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24145: LD_VAR 0 1
24149: PPUSH
24150: CALL_OW 255
24154: PUSH
24155: LD_INT 1
24157: EQUAL
24158: PUSH
24159: LD_EXP 63
24163: PUSH
24164: LD_INT 0
24166: EQUAL
24167: AND
24168: IFFALSE 24366
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24170: LD_VAR 0 1
24174: PPUSH
24175: CALL_OW 266
24179: PUSH
24180: LD_INT 7
24182: EQUAL
24183: PUSH
24184: LD_VAR 0 1
24188: PPUSH
24189: CALL_OW 266
24193: PUSH
24194: LD_INT 8
24196: EQUAL
24197: OR
24198: IFFALSE 24366
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24200: LD_INT 22
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 2
24212: PUSH
24213: LD_INT 30
24215: PUSH
24216: LD_INT 26
24218: PUSH
24219: EMPTY
24220: LIST
24221: LIST
24222: PUSH
24223: LD_INT 30
24225: PUSH
24226: LD_INT 27
24228: PUSH
24229: EMPTY
24230: LIST
24231: LIST
24232: PUSH
24233: LD_INT 30
24235: PUSH
24236: LD_INT 28
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: EMPTY
24244: LIST
24245: LIST
24246: LIST
24247: LIST
24248: PUSH
24249: EMPTY
24250: LIST
24251: LIST
24252: PPUSH
24253: CALL_OW 69
24257: PUSH
24258: LD_INT 0
24260: GREATER
24261: IFFALSE 24366
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24263: LD_ADDR_VAR 0 2
24267: PUSH
24268: LD_INT 22
24270: PUSH
24271: LD_INT 1
24273: PUSH
24274: EMPTY
24275: LIST
24276: LIST
24277: PUSH
24278: LD_INT 2
24280: PUSH
24281: LD_INT 30
24283: PUSH
24284: LD_INT 7
24286: PUSH
24287: EMPTY
24288: LIST
24289: LIST
24290: PUSH
24291: LD_INT 30
24293: PUSH
24294: LD_INT 8
24296: PUSH
24297: EMPTY
24298: LIST
24299: LIST
24300: PUSH
24301: EMPTY
24302: LIST
24303: LIST
24304: LIST
24305: PUSH
24306: EMPTY
24307: LIST
24308: LIST
24309: PPUSH
24310: CALL_OW 69
24314: PUSH
24315: FOR_IN
24316: IFFALSE 24364
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24318: LD_VAR 0 2
24322: PPUSH
24323: LD_INT 1
24325: PPUSH
24326: CALL_OW 268
24330: PUSH
24331: LD_INT 11
24333: EQUAL
24334: PUSH
24335: LD_VAR 0 2
24339: PPUSH
24340: LD_INT 2
24342: PPUSH
24343: CALL_OW 268
24347: PUSH
24348: LD_INT 11
24350: EQUAL
24351: OR
24352: IFFALSE 24362
// eventVar1 = 1 ;
24354: LD_ADDR_EXP 63
24358: PUSH
24359: LD_INT 1
24361: ST_TO_ADDR
24362: GO 24315
24364: POP
24365: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24366: LD_VAR 0 1
24370: PPUSH
24371: CALL_OW 255
24375: PUSH
24376: LD_INT 2
24378: EQUAL
24379: IFFALSE 24484
// begin if GetBType ( building ) = b_barracks then
24381: LD_VAR 0 1
24385: PPUSH
24386: CALL_OW 266
24390: PUSH
24391: LD_INT 5
24393: EQUAL
24394: IFFALSE 24484
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24396: LD_ADDR_VAR 0 2
24400: PUSH
24401: LD_INT 22
24403: PUSH
24404: LD_INT 2
24406: PUSH
24407: EMPTY
24408: LIST
24409: LIST
24410: PUSH
24411: LD_INT 25
24413: PUSH
24414: LD_INT 1
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 3
24423: PUSH
24424: LD_INT 54
24426: PUSH
24427: EMPTY
24428: LIST
24429: PUSH
24430: EMPTY
24431: LIST
24432: LIST
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: PPUSH
24439: CALL_OW 69
24443: PUSH
24444: LD_EXP 26
24448: PUSH
24449: EMPTY
24450: LIST
24451: DIFF
24452: PUSH
24453: FOR_IN
24454: IFFALSE 24472
// ComEnterUnit ( i , building ) ;
24456: LD_VAR 0 2
24460: PPUSH
24461: LD_VAR 0 1
24465: PPUSH
24466: CALL_OW 120
24470: GO 24453
24472: POP
24473: POP
// arArm = building ;
24474: LD_ADDR_EXP 45
24478: PUSH
24479: LD_VAR 0 1
24483: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24484: LD_VAR 0 1
24488: PPUSH
24489: CALL_OW 255
24493: PUSH
24494: LD_INT 3
24496: EQUAL
24497: IFFALSE 24970
// begin if GetBType ( building ) = b_factory then
24499: LD_VAR 0 1
24503: PPUSH
24504: CALL_OW 266
24508: PUSH
24509: LD_INT 3
24511: EQUAL
24512: IFFALSE 24579
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24514: LD_ADDR_VAR 0 2
24518: PUSH
24519: LD_INT 22
24521: PUSH
24522: LD_INT 3
24524: PUSH
24525: EMPTY
24526: LIST
24527: LIST
24528: PUSH
24529: LD_INT 25
24531: PUSH
24532: LD_INT 3
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: PUSH
24539: EMPTY
24540: LIST
24541: LIST
24542: PPUSH
24543: CALL_OW 69
24547: PUSH
24548: FOR_IN
24549: IFFALSE 24567
// ComEnterUnit ( i , building ) ;
24551: LD_VAR 0 2
24555: PPUSH
24556: LD_VAR 0 1
24560: PPUSH
24561: CALL_OW 120
24565: GO 24548
24567: POP
24568: POP
// ruFab = building ;
24569: LD_ADDR_EXP 35
24573: PUSH
24574: LD_VAR 0 1
24578: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24579: LD_INT 22
24581: PUSH
24582: LD_INT 3
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 21
24591: PUSH
24592: LD_INT 3
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 30
24601: PUSH
24602: LD_INT 8
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: LIST
24613: PPUSH
24614: CALL_OW 69
24618: PUSH
24619: LD_INT 2
24621: EQUAL
24622: IFFALSE 24830
// begin for i = 1 to 2 do
24624: LD_ADDR_VAR 0 2
24628: PUSH
24629: DOUBLE
24630: LD_INT 1
24632: DEC
24633: ST_TO_ADDR
24634: LD_INT 2
24636: PUSH
24637: FOR_TO
24638: IFFALSE 24725
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24640: LD_INT 22
24642: PUSH
24643: LD_INT 3
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: LD_INT 25
24652: PUSH
24653: LD_INT 4
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PPUSH
24664: CALL_OW 69
24668: PUSH
24669: LD_VAR 0 2
24673: ARRAY
24674: PPUSH
24675: LD_INT 22
24677: PUSH
24678: LD_INT 3
24680: PUSH
24681: EMPTY
24682: LIST
24683: LIST
24684: PUSH
24685: LD_INT 21
24687: PUSH
24688: LD_INT 3
24690: PUSH
24691: EMPTY
24692: LIST
24693: LIST
24694: PUSH
24695: LD_INT 30
24697: PUSH
24698: LD_INT 8
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: PUSH
24705: EMPTY
24706: LIST
24707: LIST
24708: LIST
24709: PPUSH
24710: CALL_OW 69
24714: PUSH
24715: LD_INT 1
24717: ARRAY
24718: PPUSH
24719: CALL_OW 120
24723: GO 24637
24725: POP
24726: POP
// for i = 3 to 4 do
24727: LD_ADDR_VAR 0 2
24731: PUSH
24732: DOUBLE
24733: LD_INT 3
24735: DEC
24736: ST_TO_ADDR
24737: LD_INT 4
24739: PUSH
24740: FOR_TO
24741: IFFALSE 24828
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24743: LD_INT 22
24745: PUSH
24746: LD_INT 3
24748: PUSH
24749: EMPTY
24750: LIST
24751: LIST
24752: PUSH
24753: LD_INT 25
24755: PUSH
24756: LD_INT 4
24758: PUSH
24759: EMPTY
24760: LIST
24761: LIST
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: PPUSH
24767: CALL_OW 69
24771: PUSH
24772: LD_VAR 0 2
24776: ARRAY
24777: PPUSH
24778: LD_INT 22
24780: PUSH
24781: LD_INT 3
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: PUSH
24788: LD_INT 21
24790: PUSH
24791: LD_INT 3
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 30
24800: PUSH
24801: LD_INT 8
24803: PUSH
24804: EMPTY
24805: LIST
24806: LIST
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: LIST
24812: PPUSH
24813: CALL_OW 69
24817: PUSH
24818: LD_INT 2
24820: ARRAY
24821: PPUSH
24822: CALL_OW 120
24826: GO 24740
24828: POP
24829: POP
// end ; if GetBType ( building ) = b_barracks then
24830: LD_VAR 0 1
24834: PPUSH
24835: CALL_OW 266
24839: PUSH
24840: LD_INT 5
24842: EQUAL
24843: IFFALSE 24970
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: LD_INT 22
24852: PUSH
24853: LD_INT 3
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 25
24862: PUSH
24863: LD_INT 1
24865: PUSH
24866: EMPTY
24867: LIST
24868: LIST
24869: PUSH
24870: LD_INT 3
24872: PUSH
24873: LD_INT 54
24875: PUSH
24876: EMPTY
24877: LIST
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: PPUSH
24888: CALL_OW 69
24892: PUSH
24893: FOR_IN
24894: IFFALSE 24912
// ComEnterUnit ( i , building ) ;
24896: LD_VAR 0 2
24900: PPUSH
24901: LD_VAR 0 1
24905: PPUSH
24906: CALL_OW 120
24910: GO 24893
24912: POP
24913: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
24914: LD_INT 22
24916: PUSH
24917: LD_INT 3
24919: PUSH
24920: EMPTY
24921: LIST
24922: LIST
24923: PUSH
24924: LD_INT 30
24926: PUSH
24927: LD_INT 5
24929: PUSH
24930: EMPTY
24931: LIST
24932: LIST
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PPUSH
24938: CALL_OW 69
24942: PUSH
24943: LD_INT 0
24945: EQUAL
24946: IFFALSE 24960
// ruArm1 = building else
24948: LD_ADDR_EXP 33
24952: PUSH
24953: LD_VAR 0 1
24957: ST_TO_ADDR
24958: GO 24970
// ruArm2 = building ;
24960: LD_ADDR_EXP 34
24964: PUSH
24965: LD_VAR 0 1
24969: ST_TO_ADDR
// end ; end ; end ;
24970: PPOPN 2
24972: END
// on EnterBuilding ( building , human ) do var rnd ;
24973: LD_INT 0
24975: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
24976: LD_VAR 0 2
24980: PPUSH
24981: CALL_OW 255
24985: PUSH
24986: LD_INT 2
24988: EQUAL
24989: PUSH
24990: LD_VAR 0 2
24994: PPUSH
24995: CALL_OW 257
24999: PUSH
25000: LD_INT 1
25002: EQUAL
25003: AND
25004: PUSH
25005: LD_VAR 0 1
25009: PUSH
25010: LD_EXP 45
25014: EQUAL
25015: AND
25016: IFFALSE 25063
// begin wait ( 0 0$1 ) ;
25018: LD_INT 35
25020: PPUSH
25021: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25025: LD_ADDR_VAR 0 3
25029: PUSH
25030: LD_INT 1
25032: PPUSH
25033: LD_INT 100
25035: PPUSH
25036: CALL_OW 12
25040: ST_TO_ADDR
// if rnd > 50 then
25041: LD_VAR 0 3
25045: PUSH
25046: LD_INT 50
25048: GREATER
25049: IFFALSE 25063
// SetClass ( human , class_mortar ) ;
25051: LD_VAR 0 2
25055: PPUSH
25056: LD_INT 8
25058: PPUSH
25059: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25063: LD_VAR 0 2
25067: PUSH
25068: LD_INT 22
25070: PUSH
25071: LD_INT 2
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 25
25080: PUSH
25081: LD_INT 12
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PPUSH
25092: CALL_OW 69
25096: IN
25097: IFFALSE 25147
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25099: LD_VAR 0 1
25103: PPUSH
25104: CALL_OW 266
25108: PUSH
25109: LD_INT 0
25111: PUSH
25112: LD_INT 1
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: IN
25119: IFFALSE 25135
// SetClass ( human , class_apeman_engineer ) else
25121: LD_VAR 0 2
25125: PPUSH
25126: LD_INT 16
25128: PPUSH
25129: CALL_OW 336
25133: GO 25147
// SetClass ( human , class_apeman_soldier ) ;
25135: LD_VAR 0 2
25139: PPUSH
25140: LD_INT 15
25142: PPUSH
25143: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25147: LD_VAR 0 2
25151: PPUSH
25152: CALL_OW 255
25156: PUSH
25157: LD_INT 3
25159: EQUAL
25160: PUSH
25161: LD_VAR 0 2
25165: PPUSH
25166: CALL_OW 257
25170: PUSH
25171: LD_INT 1
25173: EQUAL
25174: AND
25175: PUSH
25176: LD_VAR 0 1
25180: PUSH
25181: LD_EXP 33
25185: EQUAL
25186: PUSH
25187: LD_VAR 0 1
25191: PUSH
25192: LD_EXP 34
25196: EQUAL
25197: OR
25198: PUSH
25199: EMPTY
25200: LIST
25201: AND
25202: IFFALSE 25223
// begin wait ( 0 0$1 ) ;
25204: LD_INT 35
25206: PPUSH
25207: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25211: LD_VAR 0 2
25215: PPUSH
25216: LD_INT 9
25218: PPUSH
25219: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25223: LD_VAR 0 2
25227: PPUSH
25228: CALL_OW 255
25232: PUSH
25233: LD_INT 3
25235: EQUAL
25236: PUSH
25237: LD_VAR 0 2
25241: PPUSH
25242: CALL_OW 257
25246: PUSH
25247: LD_INT 9
25249: EQUAL
25250: AND
25251: PUSH
25252: LD_VAR 0 1
25256: PPUSH
25257: CALL_OW 266
25261: PUSH
25262: LD_INT 32
25264: EQUAL
25265: AND
25266: IFFALSE 25287
// begin wait ( 0 0$1 ) ;
25268: LD_INT 35
25270: PPUSH
25271: CALL_OW 67
// SetClass ( human , 1 ) ;
25275: LD_VAR 0 2
25279: PPUSH
25280: LD_INT 1
25282: PPUSH
25283: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25287: LD_VAR 0 2
25291: PPUSH
25292: CALL_OW 255
25296: PUSH
25297: LD_INT 3
25299: EQUAL
25300: PUSH
25301: LD_VAR 0 2
25305: PPUSH
25306: CALL_OW 257
25310: PUSH
25311: LD_INT 3
25313: EQUAL
25314: AND
25315: PUSH
25316: LD_VAR 0 1
25320: PUSH
25321: LD_EXP 35
25325: EQUAL
25326: AND
25327: IFFALSE 25341
// SetLives ( human , 1000 ) ;
25329: LD_VAR 0 2
25333: PPUSH
25334: LD_INT 1000
25336: PPUSH
25337: CALL_OW 234
// end ;
25341: PPOPN 3
25343: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25344: LD_VAR 0 1
25348: PUSH
25349: LD_INT 1
25351: EQUAL
25352: PUSH
25353: LD_VAR 0 2
25357: PUSH
25358: LD_INT 2
25360: EQUAL
25361: AND
25362: PUSH
25363: LD_INT 1
25365: PPUSH
25366: LD_INT 2
25368: PPUSH
25369: CALL_OW 81
25373: PUSH
25374: LD_INT 1
25376: EQUAL
25377: AND
25378: IFFALSE 25399
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25380: LD_EXP 24
25384: PPUSH
25385: LD_STRING D6b-Pow-1
25387: PPUSH
25388: CALL_OW 94
// YouLost ( Powell ) ;
25392: LD_STRING Powell
25394: PPUSH
25395: CALL_OW 104
// end ; end ;
25399: PPOPN 2
25401: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25402: LD_INT 23
25404: PPUSH
25405: LD_INT 22
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: LD_INT 21
25417: PUSH
25418: LD_INT 3
25420: PUSH
25421: EMPTY
25422: LIST
25423: LIST
25424: PUSH
25425: EMPTY
25426: LIST
25427: LIST
25428: PPUSH
25429: CALL_OW 70
25433: PUSH
25434: LD_INT 23
25436: PPUSH
25437: LD_INT 22
25439: PUSH
25440: LD_INT 1
25442: PUSH
25443: EMPTY
25444: LIST
25445: LIST
25446: PUSH
25447: LD_INT 21
25449: PUSH
25450: LD_INT 2
25452: PUSH
25453: EMPTY
25454: LIST
25455: LIST
25456: PUSH
25457: EMPTY
25458: LIST
25459: LIST
25460: PPUSH
25461: CALL_OW 70
25465: OR
25466: PUSH
25467: LD_INT 1
25469: PPUSH
25470: LD_INT 2
25472: PPUSH
25473: CALL_OW 81
25477: PUSH
25478: LD_INT 1
25480: EQUAL
25481: AND
25482: IFFALSE 25615
25484: GO 25486
25486: DISABLE
// begin enable ;
25487: ENABLE
// wait ( 0 0$10 ) ;
25488: LD_INT 350
25490: PPUSH
25491: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25495: LD_INT 23
25497: PPUSH
25498: LD_INT 22
25500: PUSH
25501: LD_INT 1
25503: PUSH
25504: EMPTY
25505: LIST
25506: LIST
25507: PUSH
25508: LD_INT 21
25510: PUSH
25511: LD_INT 3
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: PUSH
25518: EMPTY
25519: LIST
25520: LIST
25521: PPUSH
25522: CALL_OW 70
25526: PUSH
25527: LD_INT 23
25529: PPUSH
25530: LD_INT 22
25532: PUSH
25533: LD_INT 1
25535: PUSH
25536: EMPTY
25537: LIST
25538: LIST
25539: PUSH
25540: LD_INT 21
25542: PUSH
25543: LD_INT 2
25545: PUSH
25546: EMPTY
25547: LIST
25548: LIST
25549: PUSH
25550: EMPTY
25551: LIST
25552: LIST
25553: PPUSH
25554: CALL_OW 70
25558: OR
25559: PUSH
25560: LD_INT 1
25562: PPUSH
25563: LD_INT 2
25565: PPUSH
25566: CALL_OW 81
25570: PUSH
25571: LD_INT 1
25573: EQUAL
25574: AND
25575: IFFALSE 25615
// begin disable ;
25577: DISABLE
// InGameOn ;
25578: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25582: LD_INT 73
25584: PPUSH
25585: LD_INT 18
25587: PPUSH
25588: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25592: LD_EXP 24
25596: PPUSH
25597: LD_STRING D6b-Pow-1
25599: PPUSH
25600: CALL_OW 94
// YouLost ( Powell ) ;
25604: LD_STRING Powell
25606: PPUSH
25607: CALL_OW 104
// InGameOff ;
25611: CALL_OW 9
// end ; end ;
25615: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
25616: LD_VAR 0 1
25620: PUSH
25621: LD_EXP 1
25625: EQUAL
25626: IFFALSE 25635
// YouLost ( JMM ) ;
25628: LD_STRING JMM
25630: PPUSH
25631: CALL_OW 104
// if unit = Khatam then
25635: LD_VAR 0 1
25639: PUSH
25640: LD_EXP 14
25644: EQUAL
25645: IFFALSE 25655
// KhatamStatus = 0 ;
25647: LD_ADDR_EXP 53
25651: PUSH
25652: LD_INT 0
25654: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25655: LD_VAR 0 1
25659: PPUSH
25660: CALL_OW 255
25664: PUSH
25665: LD_INT 3
25667: EQUAL
25668: PUSH
25669: LD_VAR 0 1
25673: PPUSH
25674: CALL_OW 247
25678: PUSH
25679: LD_INT 3
25681: EQUAL
25682: AND
25683: IFFALSE 26375
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25685: LD_VAR 0 1
25689: PPUSH
25690: CALL_OW 266
25694: PUSH
25695: LD_INT 31
25697: EQUAL
25698: PUSH
25699: LD_VAR 0 1
25703: PPUSH
25704: CALL_OW 266
25708: PUSH
25709: LD_INT 32
25711: EQUAL
25712: OR
25713: PUSH
25714: LD_VAR 0 1
25718: PPUSH
25719: CALL_OW 266
25723: PUSH
25724: LD_INT 36
25726: EQUAL
25727: OR
25728: PUSH
25729: LD_VAR 0 1
25733: PPUSH
25734: CALL_OW 266
25738: PUSH
25739: LD_INT 0
25741: EQUAL
25742: OR
25743: PUSH
25744: LD_VAR 0 1
25748: PPUSH
25749: CALL_OW 266
25753: PUSH
25754: LD_INT 24
25756: EQUAL
25757: OR
25758: PUSH
25759: LD_VAR 0 1
25763: PPUSH
25764: CALL_OW 266
25768: PUSH
25769: LD_INT 17
25771: EQUAL
25772: OR
25773: PUSH
25774: LD_VAR 0 1
25778: PPUSH
25779: CALL_OW 266
25783: PUSH
25784: LD_INT 25
25786: EQUAL
25787: OR
25788: PUSH
25789: LD_VAR 0 1
25793: PPUSH
25794: CALL_OW 266
25798: PUSH
25799: LD_INT 19
25801: EQUAL
25802: OR
25803: PUSH
25804: LD_VAR 0 1
25808: PPUSH
25809: CALL_OW 266
25813: PUSH
25814: LD_INT 20
25816: EQUAL
25817: OR
25818: PUSH
25819: LD_VAR 0 1
25823: PPUSH
25824: CALL_OW 266
25828: PUSH
25829: LD_INT 18
25831: EQUAL
25832: OR
25833: PUSH
25834: LD_VAR 0 1
25838: PPUSH
25839: CALL_OW 266
25843: PUSH
25844: LD_INT 21
25846: EQUAL
25847: OR
25848: PUSH
25849: LD_VAR 0 1
25853: PPUSH
25854: CALL_OW 266
25858: PUSH
25859: LD_INT 23
25861: EQUAL
25862: OR
25863: PUSH
25864: LD_VAR 0 1
25868: PPUSH
25869: CALL_OW 266
25873: PUSH
25874: LD_INT 16
25876: EQUAL
25877: OR
25878: PUSH
25879: LD_VAR 0 1
25883: PPUSH
25884: CALL_OW 266
25888: PUSH
25889: LD_INT 6
25891: EQUAL
25892: OR
25893: PUSH
25894: LD_VAR 0 1
25898: PPUSH
25899: CALL_OW 266
25903: PUSH
25904: LD_INT 29
25906: EQUAL
25907: OR
25908: PUSH
25909: LD_VAR 0 1
25913: PPUSH
25914: CALL_OW 266
25918: PUSH
25919: LD_INT 26
25921: EQUAL
25922: OR
25923: PUSH
25924: LD_VAR 0 1
25928: PPUSH
25929: CALL_OW 266
25933: PUSH
25934: LD_INT 30
25936: EQUAL
25937: OR
25938: PUSH
25939: LD_VAR 0 1
25943: PPUSH
25944: CALL_OW 266
25948: PUSH
25949: LD_INT 28
25951: EQUAL
25952: OR
25953: PUSH
25954: LD_VAR 0 1
25958: PPUSH
25959: CALL_OW 266
25963: PUSH
25964: LD_INT 27
25966: EQUAL
25967: OR
25968: PUSH
25969: LD_VAR 0 1
25973: PPUSH
25974: CALL_OW 266
25978: PUSH
25979: LD_INT 33
25981: EQUAL
25982: OR
25983: PUSH
25984: LD_VAR 0 1
25988: PPUSH
25989: CALL_OW 266
25993: PUSH
25994: LD_INT 2
25996: EQUAL
25997: OR
25998: PUSH
25999: LD_VAR 0 1
26003: PPUSH
26004: CALL_OW 266
26008: PUSH
26009: LD_INT 4
26011: EQUAL
26012: OR
26013: IFFALSE 26099
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26015: LD_ADDR_EXP 42
26019: PUSH
26020: LD_EXP 42
26024: PUSH
26025: LD_VAR 0 1
26029: PPUSH
26030: CALL_OW 266
26034: ADD
26035: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26036: LD_ADDR_EXP 42
26040: PUSH
26041: LD_EXP 42
26045: PUSH
26046: LD_VAR 0 1
26050: PPUSH
26051: CALL_OW 250
26055: ADD
26056: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26057: LD_ADDR_EXP 42
26061: PUSH
26062: LD_EXP 42
26066: PUSH
26067: LD_VAR 0 1
26071: PPUSH
26072: CALL_OW 251
26076: ADD
26077: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26078: LD_ADDR_EXP 42
26082: PUSH
26083: LD_EXP 42
26087: PUSH
26088: LD_VAR 0 1
26092: PPUSH
26093: CALL_OW 254
26097: ADD
26098: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26099: LD_VAR 0 1
26103: PPUSH
26104: CALL_OW 266
26108: PUSH
26109: LD_INT 1
26111: EQUAL
26112: IFFALSE 26191
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26114: LD_ADDR_EXP 42
26118: PUSH
26119: LD_EXP 42
26123: PUSH
26124: LD_INT 0
26126: ADD
26127: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26128: LD_ADDR_EXP 42
26132: PUSH
26133: LD_EXP 42
26137: PUSH
26138: LD_VAR 0 1
26142: PPUSH
26143: CALL_OW 250
26147: ADD
26148: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26149: LD_ADDR_EXP 42
26153: PUSH
26154: LD_EXP 42
26158: PUSH
26159: LD_VAR 0 1
26163: PPUSH
26164: CALL_OW 251
26168: ADD
26169: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26170: LD_ADDR_EXP 42
26174: PUSH
26175: LD_EXP 42
26179: PUSH
26180: LD_VAR 0 1
26184: PPUSH
26185: CALL_OW 254
26189: ADD
26190: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 266
26200: PUSH
26201: LD_INT 3
26203: EQUAL
26204: IFFALSE 26283
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26206: LD_ADDR_EXP 42
26210: PUSH
26211: LD_EXP 42
26215: PUSH
26216: LD_INT 2
26218: ADD
26219: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26220: LD_ADDR_EXP 42
26224: PUSH
26225: LD_EXP 42
26229: PUSH
26230: LD_VAR 0 1
26234: PPUSH
26235: CALL_OW 250
26239: ADD
26240: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26241: LD_ADDR_EXP 42
26245: PUSH
26246: LD_EXP 42
26250: PUSH
26251: LD_VAR 0 1
26255: PPUSH
26256: CALL_OW 251
26260: ADD
26261: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26262: LD_ADDR_EXP 42
26266: PUSH
26267: LD_EXP 42
26271: PUSH
26272: LD_VAR 0 1
26276: PPUSH
26277: CALL_OW 254
26281: ADD
26282: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26283: LD_VAR 0 1
26287: PPUSH
26288: CALL_OW 266
26292: PUSH
26293: LD_INT 5
26295: EQUAL
26296: IFFALSE 26375
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26298: LD_ADDR_EXP 42
26302: PUSH
26303: LD_EXP 42
26307: PUSH
26308: LD_INT 4
26310: ADD
26311: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26312: LD_ADDR_EXP 42
26316: PUSH
26317: LD_EXP 42
26321: PUSH
26322: LD_VAR 0 1
26326: PPUSH
26327: CALL_OW 250
26331: ADD
26332: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26333: LD_ADDR_EXP 42
26337: PUSH
26338: LD_EXP 42
26342: PUSH
26343: LD_VAR 0 1
26347: PPUSH
26348: CALL_OW 251
26352: ADD
26353: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26354: LD_ADDR_EXP 42
26358: PUSH
26359: LD_EXP 42
26363: PUSH
26364: LD_VAR 0 1
26368: PPUSH
26369: CALL_OW 254
26373: ADD
26374: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26375: LD_EXP 51
26379: PUSH
26380: LD_VAR 0 1
26384: PPUSH
26385: CALL_OW 257
26389: PUSH
26390: LD_INT 3
26392: EQUAL
26393: AND
26394: PUSH
26395: LD_VAR 0 1
26399: PPUSH
26400: CALL_OW 255
26404: PUSH
26405: LD_INT 3
26407: EQUAL
26408: AND
26409: PUSH
26410: LD_EXP 35
26414: PPUSH
26415: CALL_OW 302
26419: AND
26420: PUSH
26421: LD_EXP 35
26425: PPUSH
26426: CALL_OW 255
26430: PUSH
26431: LD_INT 3
26433: EQUAL
26434: AND
26435: IFFALSE 26519
// begin ruMech := ruMech - 1 ;
26437: LD_ADDR_EXP 51
26441: PUSH
26442: LD_EXP 51
26446: PUSH
26447: LD_INT 1
26449: MINUS
26450: ST_TO_ADDR
// uc_side = 3 ;
26451: LD_ADDR_OWVAR 20
26455: PUSH
26456: LD_INT 3
26458: ST_TO_ADDR
// uc_nation = 3 ;
26459: LD_ADDR_OWVAR 21
26463: PUSH
26464: LD_INT 3
26466: ST_TO_ADDR
// hc_gallery :=  ;
26467: LD_ADDR_OWVAR 33
26471: PUSH
26472: LD_STRING 
26474: ST_TO_ADDR
// hc_name :=  ;
26475: LD_ADDR_OWVAR 26
26479: PUSH
26480: LD_STRING 
26482: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26483: LD_INT 0
26485: PPUSH
26486: LD_EXP 36
26490: PPUSH
26491: LD_EXP 37
26495: PPUSH
26496: CALL_OW 12
26500: PPUSH
26501: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26505: CALL_OW 44
26509: PPUSH
26510: LD_EXP 35
26514: PPUSH
26515: CALL_OW 52
// end ; end ;
26519: PPOPN 1
26521: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26522: LD_ADDR_OWVAR 57
26526: PUSH
26527: LD_INT 0
26529: ST_TO_ADDR
// fastEnd = 1 ;
26530: LD_ADDR_EXP 61
26534: PUSH
26535: LD_INT 1
26537: ST_TO_ADDR
// FinishMission ;
26538: CALL 27654 0 0
// end ;
26542: PPOPN 1
26544: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26545: LD_VAR 0 1
26549: PPUSH
26550: CALL 40661 0 1
// end ; end_of_file
26554: PPOPN 1
26556: END
// export function PrepareNature ; var i , un ; begin
26557: LD_INT 0
26559: PPUSH
26560: PPUSH
26561: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26562: LD_ADDR_VAR 0 2
26566: PUSH
26567: DOUBLE
26568: LD_INT 1
26570: DEC
26571: ST_TO_ADDR
26572: LD_OWVAR 67
26576: PUSH
26577: LD_INT 1
26579: PPUSH
26580: LD_INT 5
26582: PPUSH
26583: CALL_OW 12
26587: PLUS
26588: PUSH
26589: FOR_TO
26590: IFFALSE 26735
// begin hc_sex = sex_male ;
26592: LD_ADDR_OWVAR 27
26596: PUSH
26597: LD_INT 1
26599: ST_TO_ADDR
// uc_side = 0 ;
26600: LD_ADDR_OWVAR 20
26604: PUSH
26605: LD_INT 0
26607: ST_TO_ADDR
// uc_nation = nation_nature ;
26608: LD_ADDR_OWVAR 21
26612: PUSH
26613: LD_INT 0
26615: ST_TO_ADDR
// hc_class = class_apeman ;
26616: LD_ADDR_OWVAR 28
26620: PUSH
26621: LD_INT 12
26623: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26624: LD_ADDR_OWVAR 31
26628: PUSH
26629: LD_INT 2
26631: PPUSH
26632: LD_INT 7
26634: PPUSH
26635: CALL_OW 12
26639: PUSH
26640: LD_OWVAR 67
26644: PLUS
26645: PUSH
26646: LD_INT 2
26648: PPUSH
26649: LD_INT 10
26651: PPUSH
26652: CALL_OW 12
26656: PUSH
26657: LD_INT 2
26659: PPUSH
26660: LD_INT 10
26662: PPUSH
26663: CALL_OW 12
26667: PUSH
26668: LD_INT 2
26670: PPUSH
26671: LD_INT 10
26673: PPUSH
26674: CALL_OW 12
26678: PUSH
26679: EMPTY
26680: LIST
26681: LIST
26682: LIST
26683: LIST
26684: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26685: LD_ADDR_OWVAR 35
26689: PUSH
26690: LD_INT 5
26692: NEG
26693: PPUSH
26694: LD_INT 5
26696: PPUSH
26697: CALL_OW 12
26701: PUSH
26702: LD_OWVAR 67
26706: MUL
26707: ST_TO_ADDR
// un = CreateHuman ;
26708: LD_ADDR_VAR 0 3
26712: PUSH
26713: CALL_OW 44
26717: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26718: LD_VAR 0 3
26722: PPUSH
26723: LD_INT 5
26725: PPUSH
26726: LD_INT 0
26728: PPUSH
26729: CALL_OW 49
// end ;
26733: GO 26589
26735: POP
26736: POP
// for i = 1 to Difficulty + 2 do
26737: LD_ADDR_VAR 0 2
26741: PUSH
26742: DOUBLE
26743: LD_INT 1
26745: DEC
26746: ST_TO_ADDR
26747: LD_OWVAR 67
26751: PUSH
26752: LD_INT 2
26754: PLUS
26755: PUSH
26756: FOR_TO
26757: IFFALSE 26866
// begin hc_sex = sex_male ;
26759: LD_ADDR_OWVAR 27
26763: PUSH
26764: LD_INT 1
26766: ST_TO_ADDR
// uc_side = 0 ;
26767: LD_ADDR_OWVAR 20
26771: PUSH
26772: LD_INT 0
26774: ST_TO_ADDR
// uc_nation = nation_nature ;
26775: LD_ADDR_OWVAR 21
26779: PUSH
26780: LD_INT 0
26782: ST_TO_ADDR
// hc_class = class_tiger ;
26783: LD_ADDR_OWVAR 28
26787: PUSH
26788: LD_INT 14
26790: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26791: LD_ADDR_OWVAR 31
26795: PUSH
26796: LD_EXP 37
26800: PUSH
26801: LD_INT 0
26803: PUSH
26804: LD_INT 0
26806: PUSH
26807: LD_INT 0
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26816: LD_ADDR_OWVAR 35
26820: PUSH
26821: LD_INT 5
26823: NEG
26824: PPUSH
26825: LD_INT 5
26827: PPUSH
26828: CALL_OW 12
26832: PUSH
26833: LD_OWVAR 67
26837: MUL
26838: ST_TO_ADDR
// un = CreateHuman ;
26839: LD_ADDR_VAR 0 3
26843: PUSH
26844: CALL_OW 44
26848: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26849: LD_VAR 0 3
26853: PPUSH
26854: LD_INT 6
26856: PPUSH
26857: LD_INT 0
26859: PPUSH
26860: CALL_OW 49
// end ;
26864: GO 26756
26866: POP
26867: POP
// for i = 1 to rand ( 3 , 4 ) do
26868: LD_ADDR_VAR 0 2
26872: PUSH
26873: DOUBLE
26874: LD_INT 1
26876: DEC
26877: ST_TO_ADDR
26878: LD_INT 3
26880: PPUSH
26881: LD_INT 4
26883: PPUSH
26884: CALL_OW 12
26888: PUSH
26889: FOR_TO
26890: IFFALSE 26984
// begin hc_sex = sex_male ;
26892: LD_ADDR_OWVAR 27
26896: PUSH
26897: LD_INT 1
26899: ST_TO_ADDR
// uc_side = 0 ;
26900: LD_ADDR_OWVAR 20
26904: PUSH
26905: LD_INT 0
26907: ST_TO_ADDR
// uc_nation = nation_nature ;
26908: LD_ADDR_OWVAR 21
26912: PUSH
26913: LD_INT 0
26915: ST_TO_ADDR
// hc_class = 18 ;
26916: LD_ADDR_OWVAR 28
26920: PUSH
26921: LD_INT 18
26923: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26924: LD_ADDR_OWVAR 31
26928: PUSH
26929: LD_EXP 37
26933: PUSH
26934: LD_INT 0
26936: PUSH
26937: LD_INT 0
26939: PUSH
26940: LD_INT 0
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: ST_TO_ADDR
// hc_agressivity = 0 ;
26949: LD_ADDR_OWVAR 35
26953: PUSH
26954: LD_INT 0
26956: ST_TO_ADDR
// un = CreateHuman ;
26957: LD_ADDR_VAR 0 3
26961: PUSH
26962: CALL_OW 44
26966: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26967: LD_VAR 0 3
26971: PPUSH
26972: LD_INT 6
26974: PPUSH
26975: LD_INT 0
26977: PPUSH
26978: CALL_OW 49
// end ;
26982: GO 26889
26984: POP
26985: POP
// end ; end_of_file
26986: LD_VAR 0 1
26990: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
26991: LD_EXP 46
26995: PUSH
26996: LD_INT 1
26998: EQUAL
26999: IFFALSE 27083
27001: GO 27003
27003: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27004: LD_INT 7
27006: PPUSH
27007: LD_INT 5
27009: PPUSH
27010: LD_INT 4
27012: PUSH
27013: LD_INT 5
27015: PUSH
27016: LD_INT 6
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: PUSH
27024: LD_OWVAR 67
27028: ARRAY
27029: PPUSH
27030: LD_EXP 36
27034: PPUSH
27035: LD_EXP 37
27039: PPUSH
27040: CALL_OW 12
27044: PPUSH
27045: LD_INT 2
27047: PPUSH
27048: LD_INT 1
27050: PPUSH
27051: LD_INT 1
27053: PPUSH
27054: EMPTY
27055: PPUSH
27056: LD_INT 25
27058: PUSH
27059: LD_INT 26
27061: PUSH
27062: LD_INT 27
27064: PUSH
27065: LD_INT 28
27067: PUSH
27068: EMPTY
27069: LIST
27070: LIST
27071: LIST
27072: LIST
27073: PPUSH
27074: EMPTY
27075: PPUSH
27076: LD_INT 1
27078: PPUSH
27079: CALL 17010 0 11
27083: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27084: LD_EXP 46
27088: PUSH
27089: LD_INT 1
27091: EQUAL
27092: IFFALSE 27180
27094: GO 27096
27096: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27097: LD_INT 5
27099: PPUSH
27100: LD_INT 2
27102: PPUSH
27103: LD_INT 5
27105: PUSH
27106: LD_INT 6
27108: PUSH
27109: LD_INT 8
27111: PUSH
27112: EMPTY
27113: LIST
27114: LIST
27115: LIST
27116: PUSH
27117: LD_OWVAR 67
27121: ARRAY
27122: PPUSH
27123: LD_INT 0
27125: PPUSH
27126: LD_INT 0
27128: PPUSH
27129: LD_INT 2
27131: PUSH
27132: LD_INT 4
27134: PUSH
27135: LD_INT 5
27137: PUSH
27138: EMPTY
27139: LIST
27140: LIST
27141: LIST
27142: PUSH
27143: LD_OWVAR 67
27147: ARRAY
27148: PPUSH
27149: LD_INT 0
27151: PPUSH
27152: LD_EXP 36
27156: PPUSH
27157: LD_EXP 37
27161: PPUSH
27162: CALL_OW 12
27166: PPUSH
27167: LD_INT 7
27169: PPUSH
27170: LD_INT 9
27172: PPUSH
27173: LD_INT 1
27175: PPUSH
27176: CALL 18714 0 11
27180: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27181: LD_EXP 46
27185: PUSH
27186: LD_INT 1
27188: EQUAL
27189: IFFALSE 27198
27191: GO 27193
27193: DISABLE
// PrepareArabianSheik ;
27194: CALL 4526 0 0
27198: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27199: LD_EXP 29
27203: PUSH
27204: LD_EXP 62
27208: PUSH
27209: LD_INT 1
27211: EQUAL
27212: AND
27213: IFFALSE 27282
27215: GO 27217
27217: DISABLE
// begin enable ;
27218: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27219: LD_INT 6
27221: PPUSH
27222: LD_INT 3
27224: PPUSH
27225: LD_EXP 58
27229: PPUSH
27230: LD_INT 0
27232: PPUSH
27233: LD_OWVAR 67
27237: PPUSH
27238: LD_INT 0
27240: PPUSH
27241: LD_EXP 58
27245: PUSH
27246: LD_INT 3
27248: DIV
27249: PUSH
27250: LD_INT 1
27252: PLUS
27253: PPUSH
27254: LD_EXP 36
27258: PPUSH
27259: LD_EXP 37
27263: PPUSH
27264: CALL_OW 12
27268: PPUSH
27269: LD_INT 17
27271: PPUSH
27272: LD_INT 18
27274: PPUSH
27275: LD_INT 1
27277: PPUSH
27278: CALL 18714 0 11
// end ;
27282: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27283: LD_EXP 29
27287: PUSH
27288: LD_EXP 62
27292: PUSH
27293: LD_INT 1
27295: EQUAL
27296: AND
27297: IFFALSE 27374
27299: GO 27301
27301: DISABLE
// begin enable ;
27302: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27303: LD_INT 17
27305: PPUSH
27306: LD_INT 6
27308: PPUSH
27309: LD_EXP 57
27313: PPUSH
27314: LD_EXP 36
27318: PPUSH
27319: LD_EXP 37
27323: PPUSH
27324: CALL_OW 12
27328: PPUSH
27329: LD_INT 3
27331: PPUSH
27332: LD_INT 1
27334: PPUSH
27335: LD_INT 3
27337: PUSH
27338: LD_INT 3
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PPUSH
27345: LD_INT 43
27347: PUSH
27348: LD_INT 44
27350: PUSH
27351: LD_INT 45
27353: PUSH
27354: LD_INT 46
27356: PUSH
27357: EMPTY
27358: LIST
27359: LIST
27360: LIST
27361: LIST
27362: PPUSH
27363: EMPTY
27364: PPUSH
27365: EMPTY
27366: PPUSH
27367: LD_INT 1
27369: PPUSH
27370: CALL 17010 0 11
// end ;
27374: END
// every 10 10$00 trigger joinEpsilon do
27375: LD_EXP 29
27379: IFFALSE 27433
27381: GO 27383
27383: DISABLE
// begin enable ;
27384: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27385: LD_ADDR_EXP 57
27389: PUSH
27390: LD_EXP 57
27394: PUSH
27395: LD_INT 1
27397: PPUSH
27398: LD_OWVAR 67
27402: PPUSH
27403: CALL_OW 12
27407: PLUS
27408: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27409: LD_ADDR_EXP 58
27413: PUSH
27414: LD_EXP 58
27418: PUSH
27419: LD_INT 1
27421: PPUSH
27422: LD_OWVAR 67
27426: PPUSH
27427: CALL_OW 12
27431: PLUS
27432: ST_TO_ADDR
// end ;
27433: END
// every 21 21$0 trigger attackAvalaible = 1 do
27434: LD_EXP 62
27438: PUSH
27439: LD_INT 1
27441: EQUAL
27442: IFFALSE 27455
27444: GO 27446
27446: DISABLE
// attackAvalaible = 0 ; end_of_file
27447: LD_ADDR_EXP 62
27451: PUSH
27452: LD_INT 0
27454: ST_TO_ADDR
27455: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27456: LD_INT 54
27458: PPUSH
27459: LD_INT 1
27461: PPUSH
27462: CALL_OW 321
27466: PUSH
27467: LD_INT 2
27469: EQUAL
27470: PUSH
27471: LD_INT 55
27473: PPUSH
27474: LD_INT 1
27476: PPUSH
27477: CALL_OW 321
27481: PUSH
27482: LD_INT 2
27484: EQUAL
27485: AND
27486: PUSH
27487: LD_INT 21
27489: PPUSH
27490: LD_INT 1
27492: PPUSH
27493: CALL_OW 321
27497: PUSH
27498: LD_INT 2
27500: EQUAL
27501: AND
27502: PUSH
27503: LD_INT 22
27505: PPUSH
27506: LD_INT 1
27508: PPUSH
27509: CALL_OW 321
27513: PUSH
27514: LD_INT 2
27516: EQUAL
27517: AND
27518: PUSH
27519: LD_INT 12
27521: PPUSH
27522: LD_INT 1
27524: PPUSH
27525: CALL_OW 321
27529: PUSH
27530: LD_INT 1
27532: EQUAL
27533: PUSH
27534: LD_INT 32
27536: PPUSH
27537: LD_INT 1
27539: PPUSH
27540: CALL_OW 321
27544: PUSH
27545: LD_INT 1
27547: EQUAL
27548: OR
27549: PUSH
27550: EMPTY
27551: LIST
27552: AND
27553: PUSH
27554: LD_EXP 48
27558: PUSH
27559: LD_INT 1
27561: EQUAL
27562: AND
27563: PUSH
27564: LD_INT 22
27566: PUSH
27567: LD_INT 3
27569: PUSH
27570: EMPTY
27571: LIST
27572: LIST
27573: PUSH
27574: LD_INT 21
27576: PUSH
27577: LD_INT 1
27579: PUSH
27580: EMPTY
27581: LIST
27582: LIST
27583: PUSH
27584: EMPTY
27585: LIST
27586: LIST
27587: PPUSH
27588: CALL_OW 69
27592: PUSH
27593: LD_INT 0
27595: EQUAL
27596: AND
27597: IFFALSE 27653
27599: GO 27601
27601: DISABLE
// begin case query ( QEndMission ) of 1 :
27602: LD_STRING QEndMission
27604: PPUSH
27605: CALL_OW 97
27609: PUSH
27610: LD_INT 1
27612: DOUBLE
27613: EQUAL
27614: IFTRUE 27618
27616: GO 27629
27618: POP
// begin end_the_mission_allowed = true ;
27619: LD_ADDR_OWVAR 57
27623: PUSH
27624: LD_INT 1
27626: ST_TO_ADDR
// end ; 2 :
27627: GO 27653
27629: LD_INT 2
27631: DOUBLE
27632: EQUAL
27633: IFTRUE 27637
27635: GO 27652
27637: POP
// begin fastEnd = 1 ;
27638: LD_ADDR_EXP 61
27642: PUSH
27643: LD_INT 1
27645: ST_TO_ADDR
// FinishMission ;
27646: CALL 27654 0 0
// end ; end ;
27650: GO 27653
27652: POP
// end ;
27653: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27654: LD_INT 0
27656: PPUSH
27657: PPUSH
27658: PPUSH
27659: PPUSH
// if not snipersTrained then
27660: LD_EXP 60
27664: NOT
27665: IFFALSE 27674
// SetAchievement ( ACH_SNIPER ) ;
27667: LD_STRING ACH_SNIPER
27669: PPUSH
27670: CALL_OW 543
// m1 := false ;
27674: LD_ADDR_VAR 0 2
27678: PUSH
27679: LD_INT 0
27681: ST_TO_ADDR
// m2 := false ;
27682: LD_ADDR_VAR 0 3
27686: PUSH
27687: LD_INT 0
27689: ST_TO_ADDR
// m3 := false ;
27690: LD_ADDR_VAR 0 4
27694: PUSH
27695: LD_INT 0
27697: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27698: LD_EXP 53
27702: PPUSH
27703: LD_STRING 10_KhatamStatus_1
27705: PPUSH
27706: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27710: LD_EXP 52
27714: PPUSH
27715: LD_STRING 10_GensherEscape_1
27717: PPUSH
27718: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27722: LD_INT 12
27724: PPUSH
27725: LD_INT 1
27727: PPUSH
27728: CALL_OW 321
27732: PUSH
27733: LD_INT 2
27735: EQUAL
27736: IFFALSE 27758
// begin AddMedal ( sights , 1 ) ;
27738: LD_STRING sights
27740: PPUSH
27741: LD_INT 1
27743: PPUSH
27744: CALL_OW 101
// m1 := true ;
27748: LD_ADDR_VAR 0 2
27752: PUSH
27753: LD_INT 1
27755: ST_TO_ADDR
// end else
27756: GO 27769
// begin AddMedal ( sights , - 1 ) ;
27758: LD_STRING sights
27760: PPUSH
27761: LD_INT 1
27763: NEG
27764: PPUSH
27765: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
27769: LD_INT 32
27771: PPUSH
27772: LD_INT 1
27774: PPUSH
27775: CALL_OW 321
27779: PUSH
27780: LD_INT 2
27782: EQUAL
27783: IFFALSE 27805
// begin AddMedal ( computers , 1 ) ;
27785: LD_STRING computers
27787: PPUSH
27788: LD_INT 1
27790: PPUSH
27791: CALL_OW 101
// m2 := true ;
27795: LD_ADDR_VAR 0 3
27799: PUSH
27800: LD_INT 1
27802: ST_TO_ADDR
// end else
27803: GO 27816
// begin AddMedal ( computers , - 1 ) ;
27805: LD_STRING computers
27807: PPUSH
27808: LD_INT 1
27810: NEG
27811: PPUSH
27812: CALL_OW 101
// end ; if arabianEscape = 0 then
27816: LD_EXP 47
27820: PUSH
27821: LD_INT 0
27823: EQUAL
27824: IFFALSE 27856
// begin AddMedal ( renegades , 2 ) ;
27826: LD_STRING renegades
27828: PPUSH
27829: LD_INT 2
27831: PPUSH
27832: CALL_OW 101
// m3 := true ;
27836: LD_ADDR_VAR 0 4
27840: PUSH
27841: LD_INT 1
27843: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
27844: LD_INT 0
27846: PPUSH
27847: LD_STRING 10_ScientistsEscape_1
27849: PPUSH
27850: CALL_OW 39
// end else
27854: GO 27867
// begin AddMedal ( renegades , - 1 ) ;
27856: LD_STRING renegades
27858: PPUSH
27859: LD_INT 1
27861: NEG
27862: PPUSH
27863: CALL_OW 101
// end ; SaveEpsilonBase ;
27867: CALL 28653 0 0
// if m1 and m2 and m3 and Difficulty = 3 then
27871: LD_VAR 0 2
27875: PUSH
27876: LD_VAR 0 3
27880: AND
27881: PUSH
27882: LD_VAR 0 4
27886: AND
27887: PUSH
27888: LD_OWVAR 67
27892: PUSH
27893: LD_INT 3
27895: EQUAL
27896: AND
27897: IFFALSE 27909
// SetAchievementEX ( ACH_AMER , 10 ) ;
27899: LD_STRING ACH_AMER
27901: PPUSH
27902: LD_INT 10
27904: PPUSH
27905: CALL_OW 564
// if tick <= 40 40$00 then
27909: LD_OWVAR 1
27913: PUSH
27914: LD_INT 84000
27916: LESSEQUAL
27917: IFFALSE 27933
// begin wait ( 3 ) ;
27919: LD_INT 3
27921: PPUSH
27922: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
27926: LD_STRING ACH_ASPEED_10
27928: PPUSH
27929: CALL_OW 543
// end ; GiveMedals ( Main ) ;
27933: LD_STRING Main
27935: PPUSH
27936: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
27940: LD_INT 22
27942: PUSH
27943: LD_INT 1
27945: PUSH
27946: EMPTY
27947: LIST
27948: LIST
27949: PUSH
27950: LD_INT 23
27952: PUSH
27953: LD_INT 1
27955: PUSH
27956: EMPTY
27957: LIST
27958: LIST
27959: PUSH
27960: LD_INT 21
27962: PUSH
27963: LD_INT 1
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 2
27972: PUSH
27973: LD_INT 25
27975: PUSH
27976: LD_INT 1
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 25
27985: PUSH
27986: LD_INT 2
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 25
27995: PUSH
27996: LD_INT 3
27998: PUSH
27999: EMPTY
28000: LIST
28001: LIST
28002: PUSH
28003: LD_INT 25
28005: PUSH
28006: LD_INT 4
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: PUSH
28013: LD_INT 25
28015: PUSH
28016: LD_INT 5
28018: PUSH
28019: EMPTY
28020: LIST
28021: LIST
28022: PUSH
28023: LD_INT 25
28025: PUSH
28026: LD_INT 8
28028: PUSH
28029: EMPTY
28030: LIST
28031: LIST
28032: PUSH
28033: EMPTY
28034: LIST
28035: LIST
28036: LIST
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: PPUSH
28048: CALL_OW 69
28052: PPUSH
28053: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28057: LD_EXP 1
28061: PPUSH
28062: LD_EXP 54
28066: PUSH
28067: LD_STRING JMM
28069: STR
28070: PPUSH
28071: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28075: LD_EXP 2
28079: PPUSH
28080: LD_EXP 54
28084: PUSH
28085: LD_STRING Brown
28087: STR
28088: PPUSH
28089: CALL 11194 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28093: LD_EXP 3
28097: PPUSH
28098: LD_EXP 54
28102: PUSH
28103: LD_STRING Donaldson
28105: STR
28106: PPUSH
28107: CALL 11194 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28111: LD_EXP 4
28115: PPUSH
28116: LD_EXP 54
28120: PUSH
28121: LD_STRING Bobby
28123: STR
28124: PPUSH
28125: CALL 11194 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28129: LD_EXP 5
28133: PPUSH
28134: LD_EXP 54
28138: PUSH
28139: LD_STRING Cyrus
28141: STR
28142: PPUSH
28143: CALL 11194 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28147: LD_EXP 6
28151: PPUSH
28152: LD_EXP 54
28156: PUSH
28157: LD_STRING Lisa
28159: STR
28160: PPUSH
28161: CALL 11194 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28165: LD_EXP 7
28169: PPUSH
28170: LD_EXP 54
28174: PUSH
28175: LD_STRING Frank
28177: STR
28178: PPUSH
28179: CALL 11194 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28183: LD_EXP 8
28187: PPUSH
28188: LD_EXP 54
28192: PUSH
28193: LD_STRING Kikuchi
28195: STR
28196: PPUSH
28197: CALL 11194 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28201: LD_EXP 9
28205: PPUSH
28206: LD_EXP 54
28210: PUSH
28211: LD_STRING Houten
28213: STR
28214: PPUSH
28215: CALL 11194 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28219: LD_EXP 10
28223: PPUSH
28224: LD_EXP 54
28228: PUSH
28229: LD_STRING Gary
28231: STR
28232: PPUSH
28233: CALL 11194 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28237: LD_EXP 19
28241: PPUSH
28242: LD_EXP 54
28246: PUSH
28247: LD_STRING Cornell
28249: STR
28250: PPUSH
28251: CALL 11194 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28255: LD_EXP 11
28259: PPUSH
28260: LD_EXP 54
28264: PUSH
28265: LD_STRING Simms
28267: STR
28268: PPUSH
28269: CALL 11194 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28273: LD_EXP 12
28277: PPUSH
28278: LD_EXP 54
28282: PUSH
28283: LD_STRING Denis
28285: STR
28286: PPUSH
28287: CALL 11194 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28291: LD_EXP 13
28295: PPUSH
28296: LD_EXP 54
28300: PUSH
28301: LD_STRING Joan
28303: STR
28304: PPUSH
28305: CALL 11194 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28309: LD_EXP 15
28313: PPUSH
28314: LD_EXP 54
28318: PUSH
28319: LD_STRING Gladstone
28321: STR
28322: PPUSH
28323: CALL 11194 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28327: LD_EXP 17
28331: PPUSH
28332: LD_EXP 54
28336: PUSH
28337: LD_STRING DeltaDoctor
28339: STR
28340: PPUSH
28341: CALL 11194 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28345: LD_EXP 22
28349: PPUSH
28350: LD_STRING 10c_lock
28352: PPUSH
28353: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28357: LD_INT 50
28359: PUSH
28360: EMPTY
28361: LIST
28362: PUSH
28363: LD_INT 22
28365: PUSH
28366: LD_INT 1
28368: PUSH
28369: EMPTY
28370: LIST
28371: LIST
28372: PUSH
28373: LD_INT 21
28375: PUSH
28376: LD_INT 1
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: PUSH
28383: LD_INT 2
28385: PUSH
28386: LD_INT 25
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 25
28398: PUSH
28399: LD_INT 2
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: LD_INT 25
28408: PUSH
28409: LD_INT 3
28411: PUSH
28412: EMPTY
28413: LIST
28414: LIST
28415: PUSH
28416: LD_INT 25
28418: PUSH
28419: LD_INT 4
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 25
28428: PUSH
28429: LD_INT 5
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PUSH
28436: LD_INT 25
28438: PUSH
28439: LD_INT 8
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: PUSH
28446: EMPTY
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: PPUSH
28461: CALL_OW 69
28465: PUSH
28466: LD_EXP 1
28470: PUSH
28471: LD_EXP 2
28475: PUSH
28476: LD_EXP 3
28480: PUSH
28481: LD_EXP 4
28485: PUSH
28486: LD_EXP 5
28490: PUSH
28491: LD_EXP 6
28495: PUSH
28496: LD_EXP 7
28500: PUSH
28501: LD_EXP 15
28505: PUSH
28506: LD_EXP 8
28510: PUSH
28511: LD_EXP 12
28515: PUSH
28516: LD_EXP 13
28520: PUSH
28521: LD_EXP 9
28525: PUSH
28526: LD_EXP 11
28530: PUSH
28531: LD_EXP 10
28535: PUSH
28536: LD_EXP 17
28540: PUSH
28541: LD_EXP 19
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: LIST
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: LIST
28555: LIST
28556: LIST
28557: LIST
28558: LIST
28559: LIST
28560: LIST
28561: LIST
28562: LIST
28563: DIFF
28564: PPUSH
28565: LD_STRING 10_other_survivors
28567: PPUSH
28568: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28572: LD_INT 50
28574: PUSH
28575: EMPTY
28576: LIST
28577: PUSH
28578: LD_INT 22
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 21
28590: PUSH
28591: LD_INT 1
28593: PUSH
28594: EMPTY
28595: LIST
28596: LIST
28597: PUSH
28598: LD_INT 2
28600: PUSH
28601: LD_INT 25
28603: PUSH
28604: LD_INT 16
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 25
28613: PUSH
28614: LD_INT 12
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: EMPTY
28622: LIST
28623: LIST
28624: LIST
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: LIST
28630: LIST
28631: PPUSH
28632: CALL_OW 69
28636: PPUSH
28637: LD_STRING 10_ape
28639: PPUSH
28640: CALL_OW 38
// YouWin ;
28644: CALL_OW 103
// end ;
28648: LD_VAR 0 1
28652: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28653: LD_INT 0
28655: PPUSH
28656: PPUSH
28657: PPUSH
28658: PPUSH
// epsilonBase = [ ] ;
28659: LD_ADDR_VAR 0 2
28663: PUSH
28664: EMPTY
28665: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28666: LD_ADDR_VAR 0 3
28670: PUSH
28671: LD_INT 22
28673: PUSH
28674: LD_INT 1
28676: PUSH
28677: EMPTY
28678: LIST
28679: LIST
28680: PUSH
28681: LD_INT 23
28683: PUSH
28684: LD_INT 1
28686: PUSH
28687: EMPTY
28688: LIST
28689: LIST
28690: PUSH
28691: LD_INT 21
28693: PUSH
28694: LD_INT 3
28696: PUSH
28697: EMPTY
28698: LIST
28699: LIST
28700: PUSH
28701: LD_INT 50
28703: PUSH
28704: EMPTY
28705: LIST
28706: PUSH
28707: EMPTY
28708: LIST
28709: LIST
28710: LIST
28711: LIST
28712: PPUSH
28713: CALL_OW 69
28717: ST_TO_ADDR
// for i in buildings do
28718: LD_ADDR_VAR 0 4
28722: PUSH
28723: LD_VAR 0 3
28727: PUSH
28728: FOR_IN
28729: IFFALSE 29181
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28731: LD_VAR 0 4
28735: PPUSH
28736: CALL_OW 266
28740: PUSH
28741: LD_INT 6
28743: PUSH
28744: LD_INT 7
28746: PUSH
28747: LD_INT 8
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: LIST
28754: IN
28755: IFFALSE 28869
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
28757: LD_ADDR_VAR 0 2
28761: PUSH
28762: LD_VAR 0 2
28766: PUSH
28767: LD_VAR 0 4
28771: PPUSH
28772: CALL_OW 266
28776: PUSH
28777: LD_VAR 0 4
28781: PPUSH
28782: CALL_OW 250
28786: PUSH
28787: LD_VAR 0 4
28791: PPUSH
28792: CALL_OW 251
28796: PUSH
28797: LD_VAR 0 4
28801: PPUSH
28802: CALL_OW 254
28806: PUSH
28807: LD_VAR 0 4
28811: PPUSH
28812: CALL_OW 267
28816: PUSH
28817: LD_VAR 0 4
28821: PPUSH
28822: CALL_OW 248
28826: PUSH
28827: LD_VAR 0 4
28831: PPUSH
28832: LD_INT 1
28834: PPUSH
28835: CALL_OW 268
28839: PUSH
28840: LD_VAR 0 4
28844: PPUSH
28845: LD_INT 2
28847: PPUSH
28848: CALL_OW 268
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: LIST
28857: LIST
28858: LIST
28859: LIST
28860: LIST
28861: LIST
28862: PUSH
28863: EMPTY
28864: LIST
28865: ADD
28866: ST_TO_ADDR
28867: GO 29179
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
28869: LD_VAR 0 4
28873: PPUSH
28874: CALL_OW 266
28878: PUSH
28879: LD_INT 32
28881: EQUAL
28882: PUSH
28883: LD_VAR 0 4
28887: PPUSH
28888: CALL_OW 266
28892: PUSH
28893: LD_INT 33
28895: EQUAL
28896: OR
28897: IFFALSE 28994
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
28899: LD_ADDR_VAR 0 2
28903: PUSH
28904: LD_VAR 0 2
28908: PUSH
28909: LD_VAR 0 4
28913: PPUSH
28914: CALL_OW 266
28918: PUSH
28919: LD_VAR 0 4
28923: PPUSH
28924: CALL_OW 250
28928: PUSH
28929: LD_VAR 0 4
28933: PPUSH
28934: CALL_OW 251
28938: PUSH
28939: LD_VAR 0 4
28943: PPUSH
28944: CALL_OW 254
28948: PUSH
28949: LD_VAR 0 4
28953: PPUSH
28954: CALL_OW 267
28958: PUSH
28959: LD_VAR 0 4
28963: PPUSH
28964: CALL_OW 248
28968: PUSH
28969: LD_VAR 0 4
28973: PPUSH
28974: CALL_OW 269
28978: PUSH
28979: EMPTY
28980: LIST
28981: LIST
28982: LIST
28983: LIST
28984: LIST
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: ADD
28991: ST_TO_ADDR
28992: GO 29179
// if GetBType ( i ) = b_factory then
28994: LD_VAR 0 4
28998: PPUSH
28999: CALL_OW 266
29003: PUSH
29004: LD_INT 3
29006: EQUAL
29007: IFFALSE 29097
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29009: LD_ADDR_VAR 0 2
29013: PUSH
29014: LD_VAR 0 2
29018: PPUSH
29019: LD_INT 1
29021: PPUSH
29022: LD_VAR 0 4
29026: PPUSH
29027: CALL_OW 266
29031: PUSH
29032: LD_VAR 0 4
29036: PPUSH
29037: CALL_OW 250
29041: PUSH
29042: LD_VAR 0 4
29046: PPUSH
29047: CALL_OW 251
29051: PUSH
29052: LD_VAR 0 4
29056: PPUSH
29057: CALL_OW 254
29061: PUSH
29062: LD_VAR 0 4
29066: PPUSH
29067: CALL_OW 267
29071: PUSH
29072: LD_VAR 0 4
29076: PPUSH
29077: CALL_OW 248
29081: PUSH
29082: EMPTY
29083: LIST
29084: LIST
29085: LIST
29086: LIST
29087: LIST
29088: LIST
29089: PPUSH
29090: CALL_OW 2
29094: ST_TO_ADDR
29095: GO 29179
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29097: LD_ADDR_VAR 0 2
29101: PUSH
29102: LD_VAR 0 2
29106: PUSH
29107: LD_VAR 0 4
29111: PPUSH
29112: CALL_OW 266
29116: PUSH
29117: LD_VAR 0 4
29121: PPUSH
29122: CALL_OW 250
29126: PUSH
29127: LD_VAR 0 4
29131: PPUSH
29132: CALL_OW 251
29136: PUSH
29137: LD_VAR 0 4
29141: PPUSH
29142: CALL_OW 254
29146: PUSH
29147: LD_VAR 0 4
29151: PPUSH
29152: CALL_OW 267
29156: PUSH
29157: LD_VAR 0 4
29161: PPUSH
29162: CALL_OW 248
29166: PUSH
29167: EMPTY
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: PUSH
29175: EMPTY
29176: LIST
29177: ADD
29178: ST_TO_ADDR
// end ;
29179: GO 28728
29181: POP
29182: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29183: LD_VAR 0 2
29187: PPUSH
29188: LD_STRING 10_EpsilonBase
29190: PPUSH
29191: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29195: LD_INT 19
29197: PPUSH
29198: LD_STRING 10_EpsilonEnv
29200: PPUSH
29201: CALL 29210 0 2
// end ;
29205: LD_VAR 0 1
29209: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29210: LD_INT 0
29212: PPUSH
// result := ListEnvironmentArea ( area ) ;
29213: LD_ADDR_VAR 0 3
29217: PUSH
29218: LD_VAR 0 1
29222: PPUSH
29223: CALL_OW 353
29227: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29228: LD_VAR 0 3
29232: PPUSH
29233: LD_VAR 0 2
29237: PPUSH
29238: CALL_OW 39
// end ; end_of_file
29242: LD_VAR 0 3
29246: RET
// every 0 0$01 do var timer ;
29247: GO 29249
29249: DISABLE
29250: LD_INT 0
29252: PPUSH
// begin timer := 0 0$30 ;
29253: LD_ADDR_VAR 0 1
29257: PUSH
29258: LD_INT 1050
29260: ST_TO_ADDR
// repeat wait ( timer ) ;
29261: LD_VAR 0 1
29265: PPUSH
29266: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
29270: LD_EXP 56
29274: PUSH
29275: LD_INT 6
29277: GREATEREQUAL
29278: PUSH
29279: LD_EXP 56
29283: PUSH
29284: LD_INT 12
29286: LESS
29287: AND
29288: IFFALSE 29304
// timer := timer + 0 0$3 ;
29290: LD_ADDR_VAR 0 1
29294: PUSH
29295: LD_VAR 0 1
29299: PUSH
29300: LD_INT 105
29302: PLUS
29303: ST_TO_ADDR
// if cratesSpawned >= 12 then
29304: LD_EXP 56
29308: PUSH
29309: LD_INT 12
29311: GREATEREQUAL
29312: IFFALSE 29328
// timer := timer + 0 0$9 ;
29314: LD_ADDR_VAR 0 1
29318: PUSH
29319: LD_VAR 0 1
29323: PUSH
29324: LD_INT 315
29326: PLUS
29327: ST_TO_ADDR
// if timer > 3 3$00 then
29328: LD_VAR 0 1
29332: PUSH
29333: LD_INT 6300
29335: GREATER
29336: IFFALSE 29346
// timer := 0 0$50 ;
29338: LD_ADDR_VAR 0 1
29342: PUSH
29343: LD_INT 1750
29345: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29346: LD_INT 1
29348: PPUSH
29349: LD_INT 5
29351: PPUSH
29352: CALL_OW 12
29356: PPUSH
29357: LD_INT 16
29359: PPUSH
29360: LD_INT 1
29362: PPUSH
29363: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29367: LD_ADDR_EXP 56
29371: PUSH
29372: LD_EXP 56
29376: PUSH
29377: LD_INT 1
29379: PLUS
29380: ST_TO_ADDR
// until false ;
29381: LD_INT 0
29383: IFFALSE 29261
// end ; end_of_file
29385: PPOPN 1
29387: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; every 1 do
29388: GO 29390
29390: DISABLE
// begin ru_radar := 98 ;
29391: LD_ADDR_EXP 67
29395: PUSH
29396: LD_INT 98
29398: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29399: LD_ADDR_EXP 68
29403: PUSH
29404: LD_INT 89
29406: ST_TO_ADDR
// us_hack := 99 ;
29407: LD_ADDR_EXP 69
29411: PUSH
29412: LD_INT 99
29414: ST_TO_ADDR
// us_artillery := 97 ;
29415: LD_ADDR_EXP 70
29419: PUSH
29420: LD_INT 97
29422: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29423: LD_ADDR_EXP 71
29427: PUSH
29428: LD_INT 91
29430: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
29431: LD_ADDR_EXP 72
29435: PUSH
29436: LD_INT 92
29438: ST_TO_ADDR
// tech_Artillery := 80 ;
29439: LD_ADDR_EXP 73
29443: PUSH
29444: LD_INT 80
29446: ST_TO_ADDR
// tech_RadMat := 81 ;
29447: LD_ADDR_EXP 74
29451: PUSH
29452: LD_INT 81
29454: ST_TO_ADDR
// tech_BasicTools := 82 ;
29455: LD_ADDR_EXP 75
29459: PUSH
29460: LD_INT 82
29462: ST_TO_ADDR
// tech_Cargo := 83 ;
29463: LD_ADDR_EXP 76
29467: PUSH
29468: LD_INT 83
29470: ST_TO_ADDR
// tech_Track := 84 ;
29471: LD_ADDR_EXP 77
29475: PUSH
29476: LD_INT 84
29478: ST_TO_ADDR
// tech_Crane := 85 ;
29479: LD_ADDR_EXP 78
29483: PUSH
29484: LD_INT 85
29486: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29487: LD_ADDR_EXP 79
29491: PUSH
29492: LD_INT 86
29494: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29495: LD_ADDR_EXP 80
29499: PUSH
29500: LD_INT 87
29502: ST_TO_ADDR
// end ; end_of_file end_of_file
29503: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
29504: GO 29506
29506: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
29507: LD_STRING initStreamRollete();
29509: PPUSH
29510: CALL_OW 559
// InitStreamMode ;
29514: CALL 29523 0 0
// DefineStreamItems ( ) ;
29518: CALL 29963 0 0
// end ;
29522: END
// function InitStreamMode ; begin
29523: LD_INT 0
29525: PPUSH
// streamModeActive := false ;
29526: LD_ADDR_EXP 81
29530: PUSH
29531: LD_INT 0
29533: ST_TO_ADDR
// normalCounter := 36 ;
29534: LD_ADDR_EXP 82
29538: PUSH
29539: LD_INT 36
29541: ST_TO_ADDR
// hardcoreCounter := 16 ;
29542: LD_ADDR_EXP 83
29546: PUSH
29547: LD_INT 16
29549: ST_TO_ADDR
// sRocket := false ;
29550: LD_ADDR_EXP 86
29554: PUSH
29555: LD_INT 0
29557: ST_TO_ADDR
// sSpeed := false ;
29558: LD_ADDR_EXP 85
29562: PUSH
29563: LD_INT 0
29565: ST_TO_ADDR
// sEngine := false ;
29566: LD_ADDR_EXP 87
29570: PUSH
29571: LD_INT 0
29573: ST_TO_ADDR
// sSpec := false ;
29574: LD_ADDR_EXP 84
29578: PUSH
29579: LD_INT 0
29581: ST_TO_ADDR
// sLevel := false ;
29582: LD_ADDR_EXP 88
29586: PUSH
29587: LD_INT 0
29589: ST_TO_ADDR
// sArmoury := false ;
29590: LD_ADDR_EXP 89
29594: PUSH
29595: LD_INT 0
29597: ST_TO_ADDR
// sRadar := false ;
29598: LD_ADDR_EXP 90
29602: PUSH
29603: LD_INT 0
29605: ST_TO_ADDR
// sBunker := false ;
29606: LD_ADDR_EXP 91
29610: PUSH
29611: LD_INT 0
29613: ST_TO_ADDR
// sHack := false ;
29614: LD_ADDR_EXP 92
29618: PUSH
29619: LD_INT 0
29621: ST_TO_ADDR
// sFire := false ;
29622: LD_ADDR_EXP 93
29626: PUSH
29627: LD_INT 0
29629: ST_TO_ADDR
// sRefresh := false ;
29630: LD_ADDR_EXP 94
29634: PUSH
29635: LD_INT 0
29637: ST_TO_ADDR
// sExp := false ;
29638: LD_ADDR_EXP 95
29642: PUSH
29643: LD_INT 0
29645: ST_TO_ADDR
// sDepot := false ;
29646: LD_ADDR_EXP 96
29650: PUSH
29651: LD_INT 0
29653: ST_TO_ADDR
// sFlag := false ;
29654: LD_ADDR_EXP 97
29658: PUSH
29659: LD_INT 0
29661: ST_TO_ADDR
// sKamikadze := false ;
29662: LD_ADDR_EXP 105
29666: PUSH
29667: LD_INT 0
29669: ST_TO_ADDR
// sTroll := false ;
29670: LD_ADDR_EXP 106
29674: PUSH
29675: LD_INT 0
29677: ST_TO_ADDR
// sSlow := false ;
29678: LD_ADDR_EXP 107
29682: PUSH
29683: LD_INT 0
29685: ST_TO_ADDR
// sLack := false ;
29686: LD_ADDR_EXP 108
29690: PUSH
29691: LD_INT 0
29693: ST_TO_ADDR
// sTank := false ;
29694: LD_ADDR_EXP 110
29698: PUSH
29699: LD_INT 0
29701: ST_TO_ADDR
// sRemote := false ;
29702: LD_ADDR_EXP 111
29706: PUSH
29707: LD_INT 0
29709: ST_TO_ADDR
// sPowell := false ;
29710: LD_ADDR_EXP 112
29714: PUSH
29715: LD_INT 0
29717: ST_TO_ADDR
// sTeleport := false ;
29718: LD_ADDR_EXP 115
29722: PUSH
29723: LD_INT 0
29725: ST_TO_ADDR
// sOilTower := false ;
29726: LD_ADDR_EXP 117
29730: PUSH
29731: LD_INT 0
29733: ST_TO_ADDR
// sShovel := false ;
29734: LD_ADDR_EXP 118
29738: PUSH
29739: LD_INT 0
29741: ST_TO_ADDR
// sSheik := false ;
29742: LD_ADDR_EXP 119
29746: PUSH
29747: LD_INT 0
29749: ST_TO_ADDR
// sEarthquake := false ;
29750: LD_ADDR_EXP 121
29754: PUSH
29755: LD_INT 0
29757: ST_TO_ADDR
// sAI := false ;
29758: LD_ADDR_EXP 122
29762: PUSH
29763: LD_INT 0
29765: ST_TO_ADDR
// sCargo := false ;
29766: LD_ADDR_EXP 125
29770: PUSH
29771: LD_INT 0
29773: ST_TO_ADDR
// sDLaser := false ;
29774: LD_ADDR_EXP 126
29778: PUSH
29779: LD_INT 0
29781: ST_TO_ADDR
// sExchange := false ;
29782: LD_ADDR_EXP 127
29786: PUSH
29787: LD_INT 0
29789: ST_TO_ADDR
// sFac := false ;
29790: LD_ADDR_EXP 128
29794: PUSH
29795: LD_INT 0
29797: ST_TO_ADDR
// sPower := false ;
29798: LD_ADDR_EXP 129
29802: PUSH
29803: LD_INT 0
29805: ST_TO_ADDR
// sRandom := false ;
29806: LD_ADDR_EXP 130
29810: PUSH
29811: LD_INT 0
29813: ST_TO_ADDR
// sShield := false ;
29814: LD_ADDR_EXP 131
29818: PUSH
29819: LD_INT 0
29821: ST_TO_ADDR
// sTime := false ;
29822: LD_ADDR_EXP 132
29826: PUSH
29827: LD_INT 0
29829: ST_TO_ADDR
// sTools := false ;
29830: LD_ADDR_EXP 133
29834: PUSH
29835: LD_INT 0
29837: ST_TO_ADDR
// sSold := false ;
29838: LD_ADDR_EXP 98
29842: PUSH
29843: LD_INT 0
29845: ST_TO_ADDR
// sDiff := false ;
29846: LD_ADDR_EXP 99
29850: PUSH
29851: LD_INT 0
29853: ST_TO_ADDR
// sFog := false ;
29854: LD_ADDR_EXP 102
29858: PUSH
29859: LD_INT 0
29861: ST_TO_ADDR
// sReset := false ;
29862: LD_ADDR_EXP 103
29866: PUSH
29867: LD_INT 0
29869: ST_TO_ADDR
// sSun := false ;
29870: LD_ADDR_EXP 104
29874: PUSH
29875: LD_INT 0
29877: ST_TO_ADDR
// sTiger := false ;
29878: LD_ADDR_EXP 100
29882: PUSH
29883: LD_INT 0
29885: ST_TO_ADDR
// sBomb := false ;
29886: LD_ADDR_EXP 101
29890: PUSH
29891: LD_INT 0
29893: ST_TO_ADDR
// sWound := false ;
29894: LD_ADDR_EXP 109
29898: PUSH
29899: LD_INT 0
29901: ST_TO_ADDR
// sBetray := false ;
29902: LD_ADDR_EXP 113
29906: PUSH
29907: LD_INT 0
29909: ST_TO_ADDR
// sContamin := false ;
29910: LD_ADDR_EXP 114
29914: PUSH
29915: LD_INT 0
29917: ST_TO_ADDR
// sOil := false ;
29918: LD_ADDR_EXP 116
29922: PUSH
29923: LD_INT 0
29925: ST_TO_ADDR
// sStu := false ;
29926: LD_ADDR_EXP 120
29930: PUSH
29931: LD_INT 0
29933: ST_TO_ADDR
// sBazooka := false ;
29934: LD_ADDR_EXP 123
29938: PUSH
29939: LD_INT 0
29941: ST_TO_ADDR
// sMortar := false ;
29942: LD_ADDR_EXP 124
29946: PUSH
29947: LD_INT 0
29949: ST_TO_ADDR
// sRanger := false ;
29950: LD_ADDR_EXP 134
29954: PUSH
29955: LD_INT 0
29957: ST_TO_ADDR
// end ;
29958: LD_VAR 0 1
29962: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
29963: LD_INT 0
29965: PPUSH
29966: PPUSH
29967: PPUSH
29968: PPUSH
29969: PPUSH
// result := [ ] ;
29970: LD_ADDR_VAR 0 1
29974: PUSH
29975: EMPTY
29976: ST_TO_ADDR
// if campaign_id = 1 then
29977: LD_OWVAR 69
29981: PUSH
29982: LD_INT 1
29984: EQUAL
29985: IFFALSE 32923
// begin case mission_number of 1 :
29987: LD_OWVAR 70
29991: PUSH
29992: LD_INT 1
29994: DOUBLE
29995: EQUAL
29996: IFTRUE 30000
29998: GO 30064
30000: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
30001: LD_ADDR_VAR 0 1
30005: PUSH
30006: LD_INT 2
30008: PUSH
30009: LD_INT 4
30011: PUSH
30012: LD_INT 11
30014: PUSH
30015: LD_INT 12
30017: PUSH
30018: LD_INT 15
30020: PUSH
30021: LD_INT 16
30023: PUSH
30024: LD_INT 22
30026: PUSH
30027: LD_INT 23
30029: PUSH
30030: LD_INT 26
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: LIST
30041: LIST
30042: LIST
30043: PUSH
30044: LD_INT 101
30046: PUSH
30047: LD_INT 102
30049: PUSH
30050: LD_INT 106
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: LIST
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: ST_TO_ADDR
30062: GO 32921
30064: LD_INT 2
30066: DOUBLE
30067: EQUAL
30068: IFTRUE 30072
30070: GO 30144
30072: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
30073: LD_ADDR_VAR 0 1
30077: PUSH
30078: LD_INT 2
30080: PUSH
30081: LD_INT 4
30083: PUSH
30084: LD_INT 11
30086: PUSH
30087: LD_INT 12
30089: PUSH
30090: LD_INT 15
30092: PUSH
30093: LD_INT 16
30095: PUSH
30096: LD_INT 22
30098: PUSH
30099: LD_INT 23
30101: PUSH
30102: LD_INT 26
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: LIST
30111: LIST
30112: LIST
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 101
30118: PUSH
30119: LD_INT 102
30121: PUSH
30122: LD_INT 105
30124: PUSH
30125: LD_INT 106
30127: PUSH
30128: LD_INT 108
30130: PUSH
30131: EMPTY
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: PUSH
30138: EMPTY
30139: LIST
30140: LIST
30141: ST_TO_ADDR
30142: GO 32921
30144: LD_INT 3
30146: DOUBLE
30147: EQUAL
30148: IFTRUE 30152
30150: GO 30228
30152: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
30153: LD_ADDR_VAR 0 1
30157: PUSH
30158: LD_INT 2
30160: PUSH
30161: LD_INT 4
30163: PUSH
30164: LD_INT 5
30166: PUSH
30167: LD_INT 11
30169: PUSH
30170: LD_INT 12
30172: PUSH
30173: LD_INT 15
30175: PUSH
30176: LD_INT 16
30178: PUSH
30179: LD_INT 22
30181: PUSH
30182: LD_INT 26
30184: PUSH
30185: LD_INT 36
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: LIST
30192: LIST
30193: LIST
30194: LIST
30195: LIST
30196: LIST
30197: LIST
30198: LIST
30199: PUSH
30200: LD_INT 101
30202: PUSH
30203: LD_INT 102
30205: PUSH
30206: LD_INT 105
30208: PUSH
30209: LD_INT 106
30211: PUSH
30212: LD_INT 108
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: LIST
30219: LIST
30220: LIST
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: ST_TO_ADDR
30226: GO 32921
30228: LD_INT 4
30230: DOUBLE
30231: EQUAL
30232: IFTRUE 30236
30234: GO 30320
30236: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
30237: LD_ADDR_VAR 0 1
30241: PUSH
30242: LD_INT 2
30244: PUSH
30245: LD_INT 4
30247: PUSH
30248: LD_INT 5
30250: PUSH
30251: LD_INT 8
30253: PUSH
30254: LD_INT 11
30256: PUSH
30257: LD_INT 12
30259: PUSH
30260: LD_INT 15
30262: PUSH
30263: LD_INT 16
30265: PUSH
30266: LD_INT 22
30268: PUSH
30269: LD_INT 23
30271: PUSH
30272: LD_INT 26
30274: PUSH
30275: LD_INT 36
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: LIST
30286: LIST
30287: LIST
30288: LIST
30289: LIST
30290: LIST
30291: PUSH
30292: LD_INT 101
30294: PUSH
30295: LD_INT 102
30297: PUSH
30298: LD_INT 105
30300: PUSH
30301: LD_INT 106
30303: PUSH
30304: LD_INT 108
30306: PUSH
30307: EMPTY
30308: LIST
30309: LIST
30310: LIST
30311: LIST
30312: LIST
30313: PUSH
30314: EMPTY
30315: LIST
30316: LIST
30317: ST_TO_ADDR
30318: GO 32921
30320: LD_INT 5
30322: DOUBLE
30323: EQUAL
30324: IFTRUE 30328
30326: GO 30428
30328: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
30329: LD_ADDR_VAR 0 1
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: LD_INT 4
30339: PUSH
30340: LD_INT 5
30342: PUSH
30343: LD_INT 6
30345: PUSH
30346: LD_INT 8
30348: PUSH
30349: LD_INT 11
30351: PUSH
30352: LD_INT 12
30354: PUSH
30355: LD_INT 15
30357: PUSH
30358: LD_INT 16
30360: PUSH
30361: LD_INT 22
30363: PUSH
30364: LD_INT 23
30366: PUSH
30367: LD_INT 25
30369: PUSH
30370: LD_INT 26
30372: PUSH
30373: LD_INT 36
30375: PUSH
30376: EMPTY
30377: LIST
30378: LIST
30379: LIST
30380: LIST
30381: LIST
30382: LIST
30383: LIST
30384: LIST
30385: LIST
30386: LIST
30387: LIST
30388: LIST
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 101
30394: PUSH
30395: LD_INT 102
30397: PUSH
30398: LD_INT 105
30400: PUSH
30401: LD_INT 106
30403: PUSH
30404: LD_INT 108
30406: PUSH
30407: LD_INT 109
30409: PUSH
30410: LD_INT 112
30412: PUSH
30413: EMPTY
30414: LIST
30415: LIST
30416: LIST
30417: LIST
30418: LIST
30419: LIST
30420: LIST
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: ST_TO_ADDR
30426: GO 32921
30428: LD_INT 6
30430: DOUBLE
30431: EQUAL
30432: IFTRUE 30436
30434: GO 30556
30436: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
30437: LD_ADDR_VAR 0 1
30441: PUSH
30442: LD_INT 2
30444: PUSH
30445: LD_INT 4
30447: PUSH
30448: LD_INT 5
30450: PUSH
30451: LD_INT 6
30453: PUSH
30454: LD_INT 8
30456: PUSH
30457: LD_INT 11
30459: PUSH
30460: LD_INT 12
30462: PUSH
30463: LD_INT 15
30465: PUSH
30466: LD_INT 16
30468: PUSH
30469: LD_INT 20
30471: PUSH
30472: LD_INT 21
30474: PUSH
30475: LD_INT 22
30477: PUSH
30478: LD_INT 23
30480: PUSH
30481: LD_INT 25
30483: PUSH
30484: LD_INT 26
30486: PUSH
30487: LD_INT 30
30489: PUSH
30490: LD_INT 31
30492: PUSH
30493: LD_INT 32
30495: PUSH
30496: LD_INT 36
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: LIST
30503: LIST
30504: LIST
30505: LIST
30506: LIST
30507: LIST
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 101
30522: PUSH
30523: LD_INT 102
30525: PUSH
30526: LD_INT 105
30528: PUSH
30529: LD_INT 106
30531: PUSH
30532: LD_INT 108
30534: PUSH
30535: LD_INT 109
30537: PUSH
30538: LD_INT 112
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: LIST
30545: LIST
30546: LIST
30547: LIST
30548: LIST
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: ST_TO_ADDR
30554: GO 32921
30556: LD_INT 7
30558: DOUBLE
30559: EQUAL
30560: IFTRUE 30564
30562: GO 30664
30564: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
30565: LD_ADDR_VAR 0 1
30569: PUSH
30570: LD_INT 2
30572: PUSH
30573: LD_INT 4
30575: PUSH
30576: LD_INT 5
30578: PUSH
30579: LD_INT 7
30581: PUSH
30582: LD_INT 11
30584: PUSH
30585: LD_INT 12
30587: PUSH
30588: LD_INT 15
30590: PUSH
30591: LD_INT 16
30593: PUSH
30594: LD_INT 20
30596: PUSH
30597: LD_INT 21
30599: PUSH
30600: LD_INT 22
30602: PUSH
30603: LD_INT 23
30605: PUSH
30606: LD_INT 25
30608: PUSH
30609: LD_INT 26
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: LIST
30616: LIST
30617: LIST
30618: LIST
30619: LIST
30620: LIST
30621: LIST
30622: LIST
30623: LIST
30624: LIST
30625: LIST
30626: LIST
30627: PUSH
30628: LD_INT 101
30630: PUSH
30631: LD_INT 102
30633: PUSH
30634: LD_INT 103
30636: PUSH
30637: LD_INT 105
30639: PUSH
30640: LD_INT 106
30642: PUSH
30643: LD_INT 108
30645: PUSH
30646: LD_INT 112
30648: PUSH
30649: EMPTY
30650: LIST
30651: LIST
30652: LIST
30653: LIST
30654: LIST
30655: LIST
30656: LIST
30657: PUSH
30658: EMPTY
30659: LIST
30660: LIST
30661: ST_TO_ADDR
30662: GO 32921
30664: LD_INT 8
30666: DOUBLE
30667: EQUAL
30668: IFTRUE 30672
30670: GO 30800
30672: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
30673: LD_ADDR_VAR 0 1
30677: PUSH
30678: LD_INT 2
30680: PUSH
30681: LD_INT 4
30683: PUSH
30684: LD_INT 5
30686: PUSH
30687: LD_INT 6
30689: PUSH
30690: LD_INT 7
30692: PUSH
30693: LD_INT 8
30695: PUSH
30696: LD_INT 11
30698: PUSH
30699: LD_INT 12
30701: PUSH
30702: LD_INT 15
30704: PUSH
30705: LD_INT 16
30707: PUSH
30708: LD_INT 20
30710: PUSH
30711: LD_INT 21
30713: PUSH
30714: LD_INT 22
30716: PUSH
30717: LD_INT 23
30719: PUSH
30720: LD_INT 25
30722: PUSH
30723: LD_INT 26
30725: PUSH
30726: LD_INT 30
30728: PUSH
30729: LD_INT 31
30731: PUSH
30732: LD_INT 32
30734: PUSH
30735: LD_INT 36
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: LIST
30753: LIST
30754: LIST
30755: LIST
30756: LIST
30757: LIST
30758: LIST
30759: PUSH
30760: LD_INT 101
30762: PUSH
30763: LD_INT 102
30765: PUSH
30766: LD_INT 103
30768: PUSH
30769: LD_INT 105
30771: PUSH
30772: LD_INT 106
30774: PUSH
30775: LD_INT 108
30777: PUSH
30778: LD_INT 109
30780: PUSH
30781: LD_INT 112
30783: PUSH
30784: EMPTY
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: PUSH
30794: EMPTY
30795: LIST
30796: LIST
30797: ST_TO_ADDR
30798: GO 32921
30800: LD_INT 9
30802: DOUBLE
30803: EQUAL
30804: IFTRUE 30808
30806: GO 30944
30808: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
30809: LD_ADDR_VAR 0 1
30813: PUSH
30814: LD_INT 2
30816: PUSH
30817: LD_INT 4
30819: PUSH
30820: LD_INT 5
30822: PUSH
30823: LD_INT 6
30825: PUSH
30826: LD_INT 7
30828: PUSH
30829: LD_INT 8
30831: PUSH
30832: LD_INT 11
30834: PUSH
30835: LD_INT 12
30837: PUSH
30838: LD_INT 15
30840: PUSH
30841: LD_INT 16
30843: PUSH
30844: LD_INT 20
30846: PUSH
30847: LD_INT 21
30849: PUSH
30850: LD_INT 22
30852: PUSH
30853: LD_INT 23
30855: PUSH
30856: LD_INT 25
30858: PUSH
30859: LD_INT 26
30861: PUSH
30862: LD_INT 28
30864: PUSH
30865: LD_INT 30
30867: PUSH
30868: LD_INT 31
30870: PUSH
30871: LD_INT 32
30873: PUSH
30874: LD_INT 36
30876: PUSH
30877: EMPTY
30878: LIST
30879: LIST
30880: LIST
30881: LIST
30882: LIST
30883: LIST
30884: LIST
30885: LIST
30886: LIST
30887: LIST
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: LIST
30898: LIST
30899: PUSH
30900: LD_INT 101
30902: PUSH
30903: LD_INT 102
30905: PUSH
30906: LD_INT 103
30908: PUSH
30909: LD_INT 105
30911: PUSH
30912: LD_INT 106
30914: PUSH
30915: LD_INT 108
30917: PUSH
30918: LD_INT 109
30920: PUSH
30921: LD_INT 112
30923: PUSH
30924: LD_INT 114
30926: PUSH
30927: EMPTY
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: LIST
30936: LIST
30937: PUSH
30938: EMPTY
30939: LIST
30940: LIST
30941: ST_TO_ADDR
30942: GO 32921
30944: LD_INT 10
30946: DOUBLE
30947: EQUAL
30948: IFTRUE 30952
30950: GO 31136
30952: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
30953: LD_ADDR_VAR 0 1
30957: PUSH
30958: LD_INT 2
30960: PUSH
30961: LD_INT 4
30963: PUSH
30964: LD_INT 5
30966: PUSH
30967: LD_INT 6
30969: PUSH
30970: LD_INT 7
30972: PUSH
30973: LD_INT 8
30975: PUSH
30976: LD_INT 9
30978: PUSH
30979: LD_INT 10
30981: PUSH
30982: LD_INT 11
30984: PUSH
30985: LD_INT 12
30987: PUSH
30988: LD_INT 13
30990: PUSH
30991: LD_INT 14
30993: PUSH
30994: LD_INT 15
30996: PUSH
30997: LD_INT 16
30999: PUSH
31000: LD_INT 17
31002: PUSH
31003: LD_INT 18
31005: PUSH
31006: LD_INT 19
31008: PUSH
31009: LD_INT 20
31011: PUSH
31012: LD_INT 21
31014: PUSH
31015: LD_INT 22
31017: PUSH
31018: LD_INT 23
31020: PUSH
31021: LD_INT 24
31023: PUSH
31024: LD_INT 25
31026: PUSH
31027: LD_INT 26
31029: PUSH
31030: LD_INT 28
31032: PUSH
31033: LD_INT 30
31035: PUSH
31036: LD_INT 31
31038: PUSH
31039: LD_INT 32
31041: PUSH
31042: LD_INT 36
31044: PUSH
31045: EMPTY
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: LIST
31052: LIST
31053: LIST
31054: LIST
31055: LIST
31056: LIST
31057: LIST
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: LIST
31064: LIST
31065: LIST
31066: LIST
31067: LIST
31068: LIST
31069: LIST
31070: LIST
31071: LIST
31072: LIST
31073: LIST
31074: LIST
31075: PUSH
31076: LD_INT 101
31078: PUSH
31079: LD_INT 102
31081: PUSH
31082: LD_INT 103
31084: PUSH
31085: LD_INT 104
31087: PUSH
31088: LD_INT 105
31090: PUSH
31091: LD_INT 106
31093: PUSH
31094: LD_INT 107
31096: PUSH
31097: LD_INT 108
31099: PUSH
31100: LD_INT 109
31102: PUSH
31103: LD_INT 110
31105: PUSH
31106: LD_INT 111
31108: PUSH
31109: LD_INT 112
31111: PUSH
31112: LD_INT 114
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: LIST
31119: LIST
31120: LIST
31121: LIST
31122: LIST
31123: LIST
31124: LIST
31125: LIST
31126: LIST
31127: LIST
31128: LIST
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: ST_TO_ADDR
31134: GO 32921
31136: LD_INT 11
31138: DOUBLE
31139: EQUAL
31140: IFTRUE 31144
31142: GO 31336
31144: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
31145: LD_ADDR_VAR 0 1
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: LD_INT 3
31155: PUSH
31156: LD_INT 4
31158: PUSH
31159: LD_INT 5
31161: PUSH
31162: LD_INT 6
31164: PUSH
31165: LD_INT 7
31167: PUSH
31168: LD_INT 8
31170: PUSH
31171: LD_INT 9
31173: PUSH
31174: LD_INT 10
31176: PUSH
31177: LD_INT 11
31179: PUSH
31180: LD_INT 12
31182: PUSH
31183: LD_INT 13
31185: PUSH
31186: LD_INT 14
31188: PUSH
31189: LD_INT 15
31191: PUSH
31192: LD_INT 16
31194: PUSH
31195: LD_INT 17
31197: PUSH
31198: LD_INT 18
31200: PUSH
31201: LD_INT 19
31203: PUSH
31204: LD_INT 20
31206: PUSH
31207: LD_INT 21
31209: PUSH
31210: LD_INT 22
31212: PUSH
31213: LD_INT 23
31215: PUSH
31216: LD_INT 24
31218: PUSH
31219: LD_INT 25
31221: PUSH
31222: LD_INT 26
31224: PUSH
31225: LD_INT 28
31227: PUSH
31228: LD_INT 30
31230: PUSH
31231: LD_INT 31
31233: PUSH
31234: LD_INT 32
31236: PUSH
31237: LD_INT 34
31239: PUSH
31240: LD_INT 36
31242: PUSH
31243: EMPTY
31244: LIST
31245: LIST
31246: LIST
31247: LIST
31248: LIST
31249: LIST
31250: LIST
31251: LIST
31252: LIST
31253: LIST
31254: LIST
31255: LIST
31256: LIST
31257: LIST
31258: LIST
31259: LIST
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: LIST
31265: LIST
31266: LIST
31267: LIST
31268: LIST
31269: LIST
31270: LIST
31271: LIST
31272: LIST
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 101
31278: PUSH
31279: LD_INT 102
31281: PUSH
31282: LD_INT 103
31284: PUSH
31285: LD_INT 104
31287: PUSH
31288: LD_INT 105
31290: PUSH
31291: LD_INT 106
31293: PUSH
31294: LD_INT 107
31296: PUSH
31297: LD_INT 108
31299: PUSH
31300: LD_INT 109
31302: PUSH
31303: LD_INT 110
31305: PUSH
31306: LD_INT 111
31308: PUSH
31309: LD_INT 112
31311: PUSH
31312: LD_INT 114
31314: PUSH
31315: EMPTY
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: PUSH
31330: EMPTY
31331: LIST
31332: LIST
31333: ST_TO_ADDR
31334: GO 32921
31336: LD_INT 12
31338: DOUBLE
31339: EQUAL
31340: IFTRUE 31344
31342: GO 31552
31344: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
31345: LD_ADDR_VAR 0 1
31349: PUSH
31350: LD_INT 1
31352: PUSH
31353: LD_INT 2
31355: PUSH
31356: LD_INT 3
31358: PUSH
31359: LD_INT 4
31361: PUSH
31362: LD_INT 5
31364: PUSH
31365: LD_INT 6
31367: PUSH
31368: LD_INT 7
31370: PUSH
31371: LD_INT 8
31373: PUSH
31374: LD_INT 9
31376: PUSH
31377: LD_INT 10
31379: PUSH
31380: LD_INT 11
31382: PUSH
31383: LD_INT 12
31385: PUSH
31386: LD_INT 13
31388: PUSH
31389: LD_INT 14
31391: PUSH
31392: LD_INT 15
31394: PUSH
31395: LD_INT 16
31397: PUSH
31398: LD_INT 17
31400: PUSH
31401: LD_INT 18
31403: PUSH
31404: LD_INT 19
31406: PUSH
31407: LD_INT 20
31409: PUSH
31410: LD_INT 21
31412: PUSH
31413: LD_INT 22
31415: PUSH
31416: LD_INT 23
31418: PUSH
31419: LD_INT 24
31421: PUSH
31422: LD_INT 25
31424: PUSH
31425: LD_INT 26
31427: PUSH
31428: LD_INT 27
31430: PUSH
31431: LD_INT 28
31433: PUSH
31434: LD_INT 30
31436: PUSH
31437: LD_INT 31
31439: PUSH
31440: LD_INT 32
31442: PUSH
31443: LD_INT 33
31445: PUSH
31446: LD_INT 34
31448: PUSH
31449: LD_INT 36
31451: PUSH
31452: EMPTY
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: LIST
31460: LIST
31461: LIST
31462: LIST
31463: LIST
31464: LIST
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: LIST
31475: LIST
31476: LIST
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: LIST
31482: LIST
31483: LIST
31484: LIST
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 101
31490: PUSH
31491: LD_INT 102
31493: PUSH
31494: LD_INT 103
31496: PUSH
31497: LD_INT 104
31499: PUSH
31500: LD_INT 105
31502: PUSH
31503: LD_INT 106
31505: PUSH
31506: LD_INT 107
31508: PUSH
31509: LD_INT 108
31511: PUSH
31512: LD_INT 109
31514: PUSH
31515: LD_INT 110
31517: PUSH
31518: LD_INT 111
31520: PUSH
31521: LD_INT 112
31523: PUSH
31524: LD_INT 113
31526: PUSH
31527: LD_INT 114
31529: PUSH
31530: EMPTY
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: LIST
31536: LIST
31537: LIST
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: PUSH
31546: EMPTY
31547: LIST
31548: LIST
31549: ST_TO_ADDR
31550: GO 32921
31552: LD_INT 13
31554: DOUBLE
31555: EQUAL
31556: IFTRUE 31560
31558: GO 31756
31560: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
31561: LD_ADDR_VAR 0 1
31565: PUSH
31566: LD_INT 1
31568: PUSH
31569: LD_INT 2
31571: PUSH
31572: LD_INT 3
31574: PUSH
31575: LD_INT 4
31577: PUSH
31578: LD_INT 5
31580: PUSH
31581: LD_INT 8
31583: PUSH
31584: LD_INT 9
31586: PUSH
31587: LD_INT 10
31589: PUSH
31590: LD_INT 11
31592: PUSH
31593: LD_INT 12
31595: PUSH
31596: LD_INT 14
31598: PUSH
31599: LD_INT 15
31601: PUSH
31602: LD_INT 16
31604: PUSH
31605: LD_INT 17
31607: PUSH
31608: LD_INT 18
31610: PUSH
31611: LD_INT 19
31613: PUSH
31614: LD_INT 20
31616: PUSH
31617: LD_INT 21
31619: PUSH
31620: LD_INT 22
31622: PUSH
31623: LD_INT 23
31625: PUSH
31626: LD_INT 24
31628: PUSH
31629: LD_INT 25
31631: PUSH
31632: LD_INT 26
31634: PUSH
31635: LD_INT 27
31637: PUSH
31638: LD_INT 28
31640: PUSH
31641: LD_INT 30
31643: PUSH
31644: LD_INT 31
31646: PUSH
31647: LD_INT 32
31649: PUSH
31650: LD_INT 33
31652: PUSH
31653: LD_INT 34
31655: PUSH
31656: LD_INT 36
31658: PUSH
31659: EMPTY
31660: LIST
31661: LIST
31662: LIST
31663: LIST
31664: LIST
31665: LIST
31666: LIST
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: PUSH
31692: LD_INT 101
31694: PUSH
31695: LD_INT 102
31697: PUSH
31698: LD_INT 103
31700: PUSH
31701: LD_INT 104
31703: PUSH
31704: LD_INT 105
31706: PUSH
31707: LD_INT 106
31709: PUSH
31710: LD_INT 107
31712: PUSH
31713: LD_INT 108
31715: PUSH
31716: LD_INT 109
31718: PUSH
31719: LD_INT 110
31721: PUSH
31722: LD_INT 111
31724: PUSH
31725: LD_INT 112
31727: PUSH
31728: LD_INT 113
31730: PUSH
31731: LD_INT 114
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: PUSH
31750: EMPTY
31751: LIST
31752: LIST
31753: ST_TO_ADDR
31754: GO 32921
31756: LD_INT 14
31758: DOUBLE
31759: EQUAL
31760: IFTRUE 31764
31762: GO 31976
31764: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
31765: LD_ADDR_VAR 0 1
31769: PUSH
31770: LD_INT 1
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: LD_INT 3
31778: PUSH
31779: LD_INT 4
31781: PUSH
31782: LD_INT 5
31784: PUSH
31785: LD_INT 6
31787: PUSH
31788: LD_INT 7
31790: PUSH
31791: LD_INT 8
31793: PUSH
31794: LD_INT 9
31796: PUSH
31797: LD_INT 10
31799: PUSH
31800: LD_INT 11
31802: PUSH
31803: LD_INT 12
31805: PUSH
31806: LD_INT 13
31808: PUSH
31809: LD_INT 14
31811: PUSH
31812: LD_INT 15
31814: PUSH
31815: LD_INT 16
31817: PUSH
31818: LD_INT 17
31820: PUSH
31821: LD_INT 18
31823: PUSH
31824: LD_INT 19
31826: PUSH
31827: LD_INT 20
31829: PUSH
31830: LD_INT 21
31832: PUSH
31833: LD_INT 22
31835: PUSH
31836: LD_INT 23
31838: PUSH
31839: LD_INT 24
31841: PUSH
31842: LD_INT 25
31844: PUSH
31845: LD_INT 26
31847: PUSH
31848: LD_INT 27
31850: PUSH
31851: LD_INT 28
31853: PUSH
31854: LD_INT 29
31856: PUSH
31857: LD_INT 30
31859: PUSH
31860: LD_INT 31
31862: PUSH
31863: LD_INT 32
31865: PUSH
31866: LD_INT 33
31868: PUSH
31869: LD_INT 34
31871: PUSH
31872: LD_INT 36
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: LIST
31888: LIST
31889: LIST
31890: LIST
31891: LIST
31892: LIST
31893: LIST
31894: LIST
31895: LIST
31896: LIST
31897: LIST
31898: LIST
31899: LIST
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: LIST
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 101
31914: PUSH
31915: LD_INT 102
31917: PUSH
31918: LD_INT 103
31920: PUSH
31921: LD_INT 104
31923: PUSH
31924: LD_INT 105
31926: PUSH
31927: LD_INT 106
31929: PUSH
31930: LD_INT 107
31932: PUSH
31933: LD_INT 108
31935: PUSH
31936: LD_INT 109
31938: PUSH
31939: LD_INT 110
31941: PUSH
31942: LD_INT 111
31944: PUSH
31945: LD_INT 112
31947: PUSH
31948: LD_INT 113
31950: PUSH
31951: LD_INT 114
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: LIST
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: LIST
31966: LIST
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: LIST
31973: ST_TO_ADDR
31974: GO 32921
31976: LD_INT 15
31978: DOUBLE
31979: EQUAL
31980: IFTRUE 31984
31982: GO 32196
31984: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
31985: LD_ADDR_VAR 0 1
31989: PUSH
31990: LD_INT 1
31992: PUSH
31993: LD_INT 2
31995: PUSH
31996: LD_INT 3
31998: PUSH
31999: LD_INT 4
32001: PUSH
32002: LD_INT 5
32004: PUSH
32005: LD_INT 6
32007: PUSH
32008: LD_INT 7
32010: PUSH
32011: LD_INT 8
32013: PUSH
32014: LD_INT 9
32016: PUSH
32017: LD_INT 10
32019: PUSH
32020: LD_INT 11
32022: PUSH
32023: LD_INT 12
32025: PUSH
32026: LD_INT 13
32028: PUSH
32029: LD_INT 14
32031: PUSH
32032: LD_INT 15
32034: PUSH
32035: LD_INT 16
32037: PUSH
32038: LD_INT 17
32040: PUSH
32041: LD_INT 18
32043: PUSH
32044: LD_INT 19
32046: PUSH
32047: LD_INT 20
32049: PUSH
32050: LD_INT 21
32052: PUSH
32053: LD_INT 22
32055: PUSH
32056: LD_INT 23
32058: PUSH
32059: LD_INT 24
32061: PUSH
32062: LD_INT 25
32064: PUSH
32065: LD_INT 26
32067: PUSH
32068: LD_INT 27
32070: PUSH
32071: LD_INT 28
32073: PUSH
32074: LD_INT 29
32076: PUSH
32077: LD_INT 30
32079: PUSH
32080: LD_INT 31
32082: PUSH
32083: LD_INT 32
32085: PUSH
32086: LD_INT 33
32088: PUSH
32089: LD_INT 34
32091: PUSH
32092: LD_INT 36
32094: PUSH
32095: EMPTY
32096: LIST
32097: LIST
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: LIST
32119: LIST
32120: LIST
32121: LIST
32122: LIST
32123: LIST
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: PUSH
32132: LD_INT 101
32134: PUSH
32135: LD_INT 102
32137: PUSH
32138: LD_INT 103
32140: PUSH
32141: LD_INT 104
32143: PUSH
32144: LD_INT 105
32146: PUSH
32147: LD_INT 106
32149: PUSH
32150: LD_INT 107
32152: PUSH
32153: LD_INT 108
32155: PUSH
32156: LD_INT 109
32158: PUSH
32159: LD_INT 110
32161: PUSH
32162: LD_INT 111
32164: PUSH
32165: LD_INT 112
32167: PUSH
32168: LD_INT 113
32170: PUSH
32171: LD_INT 114
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: LIST
32179: LIST
32180: LIST
32181: LIST
32182: LIST
32183: LIST
32184: LIST
32185: LIST
32186: LIST
32187: LIST
32188: LIST
32189: PUSH
32190: EMPTY
32191: LIST
32192: LIST
32193: ST_TO_ADDR
32194: GO 32921
32196: LD_INT 16
32198: DOUBLE
32199: EQUAL
32200: IFTRUE 32204
32202: GO 32328
32204: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
32205: LD_ADDR_VAR 0 1
32209: PUSH
32210: LD_INT 2
32212: PUSH
32213: LD_INT 4
32215: PUSH
32216: LD_INT 5
32218: PUSH
32219: LD_INT 7
32221: PUSH
32222: LD_INT 11
32224: PUSH
32225: LD_INT 12
32227: PUSH
32228: LD_INT 15
32230: PUSH
32231: LD_INT 16
32233: PUSH
32234: LD_INT 20
32236: PUSH
32237: LD_INT 21
32239: PUSH
32240: LD_INT 22
32242: PUSH
32243: LD_INT 23
32245: PUSH
32246: LD_INT 25
32248: PUSH
32249: LD_INT 26
32251: PUSH
32252: LD_INT 30
32254: PUSH
32255: LD_INT 31
32257: PUSH
32258: LD_INT 32
32260: PUSH
32261: LD_INT 33
32263: PUSH
32264: LD_INT 34
32266: PUSH
32267: EMPTY
32268: LIST
32269: LIST
32270: LIST
32271: LIST
32272: LIST
32273: LIST
32274: LIST
32275: LIST
32276: LIST
32277: LIST
32278: LIST
32279: LIST
32280: LIST
32281: LIST
32282: LIST
32283: LIST
32284: LIST
32285: LIST
32286: LIST
32287: PUSH
32288: LD_INT 101
32290: PUSH
32291: LD_INT 102
32293: PUSH
32294: LD_INT 103
32296: PUSH
32297: LD_INT 106
32299: PUSH
32300: LD_INT 108
32302: PUSH
32303: LD_INT 112
32305: PUSH
32306: LD_INT 113
32308: PUSH
32309: LD_INT 114
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: LIST
32316: LIST
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: ST_TO_ADDR
32326: GO 32921
32328: LD_INT 17
32330: DOUBLE
32331: EQUAL
32332: IFTRUE 32336
32334: GO 32548
32336: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
32337: LD_ADDR_VAR 0 1
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: LD_INT 2
32347: PUSH
32348: LD_INT 3
32350: PUSH
32351: LD_INT 4
32353: PUSH
32354: LD_INT 5
32356: PUSH
32357: LD_INT 6
32359: PUSH
32360: LD_INT 7
32362: PUSH
32363: LD_INT 8
32365: PUSH
32366: LD_INT 9
32368: PUSH
32369: LD_INT 10
32371: PUSH
32372: LD_INT 11
32374: PUSH
32375: LD_INT 12
32377: PUSH
32378: LD_INT 13
32380: PUSH
32381: LD_INT 14
32383: PUSH
32384: LD_INT 15
32386: PUSH
32387: LD_INT 16
32389: PUSH
32390: LD_INT 17
32392: PUSH
32393: LD_INT 18
32395: PUSH
32396: LD_INT 19
32398: PUSH
32399: LD_INT 20
32401: PUSH
32402: LD_INT 21
32404: PUSH
32405: LD_INT 22
32407: PUSH
32408: LD_INT 23
32410: PUSH
32411: LD_INT 24
32413: PUSH
32414: LD_INT 25
32416: PUSH
32417: LD_INT 26
32419: PUSH
32420: LD_INT 27
32422: PUSH
32423: LD_INT 28
32425: PUSH
32426: LD_INT 29
32428: PUSH
32429: LD_INT 30
32431: PUSH
32432: LD_INT 31
32434: PUSH
32435: LD_INT 32
32437: PUSH
32438: LD_INT 33
32440: PUSH
32441: LD_INT 34
32443: PUSH
32444: LD_INT 36
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: LIST
32453: LIST
32454: LIST
32455: LIST
32456: LIST
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: PUSH
32484: LD_INT 101
32486: PUSH
32487: LD_INT 102
32489: PUSH
32490: LD_INT 103
32492: PUSH
32493: LD_INT 104
32495: PUSH
32496: LD_INT 105
32498: PUSH
32499: LD_INT 106
32501: PUSH
32502: LD_INT 107
32504: PUSH
32505: LD_INT 108
32507: PUSH
32508: LD_INT 109
32510: PUSH
32511: LD_INT 110
32513: PUSH
32514: LD_INT 111
32516: PUSH
32517: LD_INT 112
32519: PUSH
32520: LD_INT 113
32522: PUSH
32523: LD_INT 114
32525: PUSH
32526: EMPTY
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: LIST
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: PUSH
32542: EMPTY
32543: LIST
32544: LIST
32545: ST_TO_ADDR
32546: GO 32921
32548: LD_INT 18
32550: DOUBLE
32551: EQUAL
32552: IFTRUE 32556
32554: GO 32692
32556: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
32557: LD_ADDR_VAR 0 1
32561: PUSH
32562: LD_INT 2
32564: PUSH
32565: LD_INT 4
32567: PUSH
32568: LD_INT 5
32570: PUSH
32571: LD_INT 7
32573: PUSH
32574: LD_INT 11
32576: PUSH
32577: LD_INT 12
32579: PUSH
32580: LD_INT 15
32582: PUSH
32583: LD_INT 16
32585: PUSH
32586: LD_INT 20
32588: PUSH
32589: LD_INT 21
32591: PUSH
32592: LD_INT 22
32594: PUSH
32595: LD_INT 23
32597: PUSH
32598: LD_INT 25
32600: PUSH
32601: LD_INT 26
32603: PUSH
32604: LD_INT 30
32606: PUSH
32607: LD_INT 31
32609: PUSH
32610: LD_INT 32
32612: PUSH
32613: LD_INT 33
32615: PUSH
32616: LD_INT 34
32618: PUSH
32619: LD_INT 35
32621: PUSH
32622: LD_INT 36
32624: PUSH
32625: EMPTY
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: LIST
32635: LIST
32636: LIST
32637: LIST
32638: LIST
32639: LIST
32640: LIST
32641: LIST
32642: LIST
32643: LIST
32644: LIST
32645: LIST
32646: LIST
32647: PUSH
32648: LD_INT 101
32650: PUSH
32651: LD_INT 102
32653: PUSH
32654: LD_INT 103
32656: PUSH
32657: LD_INT 106
32659: PUSH
32660: LD_INT 108
32662: PUSH
32663: LD_INT 112
32665: PUSH
32666: LD_INT 113
32668: PUSH
32669: LD_INT 114
32671: PUSH
32672: LD_INT 115
32674: PUSH
32675: EMPTY
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: ST_TO_ADDR
32690: GO 32921
32692: LD_INT 19
32694: DOUBLE
32695: EQUAL
32696: IFTRUE 32700
32698: GO 32920
32700: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
32701: LD_ADDR_VAR 0 1
32705: PUSH
32706: LD_INT 1
32708: PUSH
32709: LD_INT 2
32711: PUSH
32712: LD_INT 3
32714: PUSH
32715: LD_INT 4
32717: PUSH
32718: LD_INT 5
32720: PUSH
32721: LD_INT 6
32723: PUSH
32724: LD_INT 7
32726: PUSH
32727: LD_INT 8
32729: PUSH
32730: LD_INT 9
32732: PUSH
32733: LD_INT 10
32735: PUSH
32736: LD_INT 11
32738: PUSH
32739: LD_INT 12
32741: PUSH
32742: LD_INT 13
32744: PUSH
32745: LD_INT 14
32747: PUSH
32748: LD_INT 15
32750: PUSH
32751: LD_INT 16
32753: PUSH
32754: LD_INT 17
32756: PUSH
32757: LD_INT 18
32759: PUSH
32760: LD_INT 19
32762: PUSH
32763: LD_INT 20
32765: PUSH
32766: LD_INT 21
32768: PUSH
32769: LD_INT 22
32771: PUSH
32772: LD_INT 23
32774: PUSH
32775: LD_INT 24
32777: PUSH
32778: LD_INT 25
32780: PUSH
32781: LD_INT 26
32783: PUSH
32784: LD_INT 27
32786: PUSH
32787: LD_INT 28
32789: PUSH
32790: LD_INT 29
32792: PUSH
32793: LD_INT 30
32795: PUSH
32796: LD_INT 31
32798: PUSH
32799: LD_INT 32
32801: PUSH
32802: LD_INT 33
32804: PUSH
32805: LD_INT 34
32807: PUSH
32808: LD_INT 35
32810: PUSH
32811: LD_INT 36
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: LIST
32847: LIST
32848: LIST
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 101
32854: PUSH
32855: LD_INT 102
32857: PUSH
32858: LD_INT 103
32860: PUSH
32861: LD_INT 104
32863: PUSH
32864: LD_INT 105
32866: PUSH
32867: LD_INT 106
32869: PUSH
32870: LD_INT 107
32872: PUSH
32873: LD_INT 108
32875: PUSH
32876: LD_INT 109
32878: PUSH
32879: LD_INT 110
32881: PUSH
32882: LD_INT 111
32884: PUSH
32885: LD_INT 112
32887: PUSH
32888: LD_INT 113
32890: PUSH
32891: LD_INT 114
32893: PUSH
32894: LD_INT 115
32896: PUSH
32897: EMPTY
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: LIST
32910: LIST
32911: LIST
32912: LIST
32913: PUSH
32914: EMPTY
32915: LIST
32916: LIST
32917: ST_TO_ADDR
32918: GO 32921
32920: POP
// end else
32921: GO 33140
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
32923: LD_ADDR_VAR 0 1
32927: PUSH
32928: LD_INT 1
32930: PUSH
32931: LD_INT 2
32933: PUSH
32934: LD_INT 3
32936: PUSH
32937: LD_INT 4
32939: PUSH
32940: LD_INT 5
32942: PUSH
32943: LD_INT 6
32945: PUSH
32946: LD_INT 7
32948: PUSH
32949: LD_INT 8
32951: PUSH
32952: LD_INT 9
32954: PUSH
32955: LD_INT 10
32957: PUSH
32958: LD_INT 11
32960: PUSH
32961: LD_INT 12
32963: PUSH
32964: LD_INT 13
32966: PUSH
32967: LD_INT 14
32969: PUSH
32970: LD_INT 15
32972: PUSH
32973: LD_INT 16
32975: PUSH
32976: LD_INT 17
32978: PUSH
32979: LD_INT 18
32981: PUSH
32982: LD_INT 19
32984: PUSH
32985: LD_INT 20
32987: PUSH
32988: LD_INT 21
32990: PUSH
32991: LD_INT 22
32993: PUSH
32994: LD_INT 23
32996: PUSH
32997: LD_INT 24
32999: PUSH
33000: LD_INT 25
33002: PUSH
33003: LD_INT 26
33005: PUSH
33006: LD_INT 27
33008: PUSH
33009: LD_INT 28
33011: PUSH
33012: LD_INT 29
33014: PUSH
33015: LD_INT 30
33017: PUSH
33018: LD_INT 31
33020: PUSH
33021: LD_INT 32
33023: PUSH
33024: LD_INT 33
33026: PUSH
33027: LD_INT 34
33029: PUSH
33030: LD_INT 35
33032: PUSH
33033: LD_INT 36
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: PUSH
33074: LD_INT 101
33076: PUSH
33077: LD_INT 102
33079: PUSH
33080: LD_INT 103
33082: PUSH
33083: LD_INT 104
33085: PUSH
33086: LD_INT 105
33088: PUSH
33089: LD_INT 106
33091: PUSH
33092: LD_INT 107
33094: PUSH
33095: LD_INT 108
33097: PUSH
33098: LD_INT 109
33100: PUSH
33101: LD_INT 110
33103: PUSH
33104: LD_INT 111
33106: PUSH
33107: LD_INT 112
33109: PUSH
33110: LD_INT 113
33112: PUSH
33113: LD_INT 114
33115: PUSH
33116: LD_INT 115
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: PUSH
33136: EMPTY
33137: LIST
33138: LIST
33139: ST_TO_ADDR
// if result then
33140: LD_VAR 0 1
33144: IFFALSE 33433
// begin normal :=  ;
33146: LD_ADDR_VAR 0 3
33150: PUSH
33151: LD_STRING 
33153: ST_TO_ADDR
// hardcore :=  ;
33154: LD_ADDR_VAR 0 4
33158: PUSH
33159: LD_STRING 
33161: ST_TO_ADDR
// for i = 1 to normalCounter do
33162: LD_ADDR_VAR 0 5
33166: PUSH
33167: DOUBLE
33168: LD_INT 1
33170: DEC
33171: ST_TO_ADDR
33172: LD_EXP 82
33176: PUSH
33177: FOR_TO
33178: IFFALSE 33279
// begin tmp := 0 ;
33180: LD_ADDR_VAR 0 2
33184: PUSH
33185: LD_STRING 0
33187: ST_TO_ADDR
// if result [ 1 ] then
33188: LD_VAR 0 1
33192: PUSH
33193: LD_INT 1
33195: ARRAY
33196: IFFALSE 33261
// if result [ 1 ] [ 1 ] = i then
33198: LD_VAR 0 1
33202: PUSH
33203: LD_INT 1
33205: ARRAY
33206: PUSH
33207: LD_INT 1
33209: ARRAY
33210: PUSH
33211: LD_VAR 0 5
33215: EQUAL
33216: IFFALSE 33261
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
33218: LD_ADDR_VAR 0 1
33222: PUSH
33223: LD_VAR 0 1
33227: PPUSH
33228: LD_INT 1
33230: PPUSH
33231: LD_VAR 0 1
33235: PUSH
33236: LD_INT 1
33238: ARRAY
33239: PPUSH
33240: LD_INT 1
33242: PPUSH
33243: CALL_OW 3
33247: PPUSH
33248: CALL_OW 1
33252: ST_TO_ADDR
// tmp := 1 ;
33253: LD_ADDR_VAR 0 2
33257: PUSH
33258: LD_STRING 1
33260: ST_TO_ADDR
// end ; normal := normal & tmp ;
33261: LD_ADDR_VAR 0 3
33265: PUSH
33266: LD_VAR 0 3
33270: PUSH
33271: LD_VAR 0 2
33275: STR
33276: ST_TO_ADDR
// end ;
33277: GO 33177
33279: POP
33280: POP
// for i = 1 to hardcoreCounter do
33281: LD_ADDR_VAR 0 5
33285: PUSH
33286: DOUBLE
33287: LD_INT 1
33289: DEC
33290: ST_TO_ADDR
33291: LD_EXP 83
33295: PUSH
33296: FOR_TO
33297: IFFALSE 33402
// begin tmp := 0 ;
33299: LD_ADDR_VAR 0 2
33303: PUSH
33304: LD_STRING 0
33306: ST_TO_ADDR
// if result [ 2 ] then
33307: LD_VAR 0 1
33311: PUSH
33312: LD_INT 2
33314: ARRAY
33315: IFFALSE 33384
// if result [ 2 ] [ 1 ] = 100 + i then
33317: LD_VAR 0 1
33321: PUSH
33322: LD_INT 2
33324: ARRAY
33325: PUSH
33326: LD_INT 1
33328: ARRAY
33329: PUSH
33330: LD_INT 100
33332: PUSH
33333: LD_VAR 0 5
33337: PLUS
33338: EQUAL
33339: IFFALSE 33384
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
33341: LD_ADDR_VAR 0 1
33345: PUSH
33346: LD_VAR 0 1
33350: PPUSH
33351: LD_INT 2
33353: PPUSH
33354: LD_VAR 0 1
33358: PUSH
33359: LD_INT 2
33361: ARRAY
33362: PPUSH
33363: LD_INT 1
33365: PPUSH
33366: CALL_OW 3
33370: PPUSH
33371: CALL_OW 1
33375: ST_TO_ADDR
// tmp := 1 ;
33376: LD_ADDR_VAR 0 2
33380: PUSH
33381: LD_STRING 1
33383: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
33384: LD_ADDR_VAR 0 4
33388: PUSH
33389: LD_VAR 0 4
33393: PUSH
33394: LD_VAR 0 2
33398: STR
33399: ST_TO_ADDR
// end ;
33400: GO 33296
33402: POP
33403: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
33404: LD_STRING getStreamItemsFromMission("
33406: PUSH
33407: LD_VAR 0 3
33411: STR
33412: PUSH
33413: LD_STRING ","
33415: STR
33416: PUSH
33417: LD_VAR 0 4
33421: STR
33422: PUSH
33423: LD_STRING ")
33425: STR
33426: PPUSH
33427: CALL_OW 559
// end else
33431: GO 33440
// ToLua ( getStreamItemsFromMission("","") ) ;
33433: LD_STRING getStreamItemsFromMission("","")
33435: PPUSH
33436: CALL_OW 559
// end ;
33440: LD_VAR 0 1
33444: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
33445: LD_VAR 0 2
33449: PUSH
33450: LD_INT 100
33452: EQUAL
33453: IFFALSE 34402
// begin if not StreamModeActive then
33455: LD_EXP 81
33459: NOT
33460: IFFALSE 33470
// StreamModeActive := true ;
33462: LD_ADDR_EXP 81
33466: PUSH
33467: LD_INT 1
33469: ST_TO_ADDR
// if p3 = 0 then
33470: LD_VAR 0 3
33474: PUSH
33475: LD_INT 0
33477: EQUAL
33478: IFFALSE 33484
// InitStreamMode ;
33480: CALL 29523 0 0
// if p3 = 1 then
33484: LD_VAR 0 3
33488: PUSH
33489: LD_INT 1
33491: EQUAL
33492: IFFALSE 33502
// sRocket := true ;
33494: LD_ADDR_EXP 86
33498: PUSH
33499: LD_INT 1
33501: ST_TO_ADDR
// if p3 = 2 then
33502: LD_VAR 0 3
33506: PUSH
33507: LD_INT 2
33509: EQUAL
33510: IFFALSE 33520
// sSpeed := true ;
33512: LD_ADDR_EXP 85
33516: PUSH
33517: LD_INT 1
33519: ST_TO_ADDR
// if p3 = 3 then
33520: LD_VAR 0 3
33524: PUSH
33525: LD_INT 3
33527: EQUAL
33528: IFFALSE 33538
// sEngine := true ;
33530: LD_ADDR_EXP 87
33534: PUSH
33535: LD_INT 1
33537: ST_TO_ADDR
// if p3 = 4 then
33538: LD_VAR 0 3
33542: PUSH
33543: LD_INT 4
33545: EQUAL
33546: IFFALSE 33556
// sSpec := true ;
33548: LD_ADDR_EXP 84
33552: PUSH
33553: LD_INT 1
33555: ST_TO_ADDR
// if p3 = 5 then
33556: LD_VAR 0 3
33560: PUSH
33561: LD_INT 5
33563: EQUAL
33564: IFFALSE 33574
// sLevel := true ;
33566: LD_ADDR_EXP 88
33570: PUSH
33571: LD_INT 1
33573: ST_TO_ADDR
// if p3 = 6 then
33574: LD_VAR 0 3
33578: PUSH
33579: LD_INT 6
33581: EQUAL
33582: IFFALSE 33592
// sArmoury := true ;
33584: LD_ADDR_EXP 89
33588: PUSH
33589: LD_INT 1
33591: ST_TO_ADDR
// if p3 = 7 then
33592: LD_VAR 0 3
33596: PUSH
33597: LD_INT 7
33599: EQUAL
33600: IFFALSE 33610
// sRadar := true ;
33602: LD_ADDR_EXP 90
33606: PUSH
33607: LD_INT 1
33609: ST_TO_ADDR
// if p3 = 8 then
33610: LD_VAR 0 3
33614: PUSH
33615: LD_INT 8
33617: EQUAL
33618: IFFALSE 33628
// sBunker := true ;
33620: LD_ADDR_EXP 91
33624: PUSH
33625: LD_INT 1
33627: ST_TO_ADDR
// if p3 = 9 then
33628: LD_VAR 0 3
33632: PUSH
33633: LD_INT 9
33635: EQUAL
33636: IFFALSE 33646
// sHack := true ;
33638: LD_ADDR_EXP 92
33642: PUSH
33643: LD_INT 1
33645: ST_TO_ADDR
// if p3 = 10 then
33646: LD_VAR 0 3
33650: PUSH
33651: LD_INT 10
33653: EQUAL
33654: IFFALSE 33664
// sFire := true ;
33656: LD_ADDR_EXP 93
33660: PUSH
33661: LD_INT 1
33663: ST_TO_ADDR
// if p3 = 11 then
33664: LD_VAR 0 3
33668: PUSH
33669: LD_INT 11
33671: EQUAL
33672: IFFALSE 33682
// sRefresh := true ;
33674: LD_ADDR_EXP 94
33678: PUSH
33679: LD_INT 1
33681: ST_TO_ADDR
// if p3 = 12 then
33682: LD_VAR 0 3
33686: PUSH
33687: LD_INT 12
33689: EQUAL
33690: IFFALSE 33700
// sExp := true ;
33692: LD_ADDR_EXP 95
33696: PUSH
33697: LD_INT 1
33699: ST_TO_ADDR
// if p3 = 13 then
33700: LD_VAR 0 3
33704: PUSH
33705: LD_INT 13
33707: EQUAL
33708: IFFALSE 33718
// sDepot := true ;
33710: LD_ADDR_EXP 96
33714: PUSH
33715: LD_INT 1
33717: ST_TO_ADDR
// if p3 = 14 then
33718: LD_VAR 0 3
33722: PUSH
33723: LD_INT 14
33725: EQUAL
33726: IFFALSE 33736
// sFlag := true ;
33728: LD_ADDR_EXP 97
33732: PUSH
33733: LD_INT 1
33735: ST_TO_ADDR
// if p3 = 15 then
33736: LD_VAR 0 3
33740: PUSH
33741: LD_INT 15
33743: EQUAL
33744: IFFALSE 33754
// sKamikadze := true ;
33746: LD_ADDR_EXP 105
33750: PUSH
33751: LD_INT 1
33753: ST_TO_ADDR
// if p3 = 16 then
33754: LD_VAR 0 3
33758: PUSH
33759: LD_INT 16
33761: EQUAL
33762: IFFALSE 33772
// sTroll := true ;
33764: LD_ADDR_EXP 106
33768: PUSH
33769: LD_INT 1
33771: ST_TO_ADDR
// if p3 = 17 then
33772: LD_VAR 0 3
33776: PUSH
33777: LD_INT 17
33779: EQUAL
33780: IFFALSE 33790
// sSlow := true ;
33782: LD_ADDR_EXP 107
33786: PUSH
33787: LD_INT 1
33789: ST_TO_ADDR
// if p3 = 18 then
33790: LD_VAR 0 3
33794: PUSH
33795: LD_INT 18
33797: EQUAL
33798: IFFALSE 33808
// sLack := true ;
33800: LD_ADDR_EXP 108
33804: PUSH
33805: LD_INT 1
33807: ST_TO_ADDR
// if p3 = 19 then
33808: LD_VAR 0 3
33812: PUSH
33813: LD_INT 19
33815: EQUAL
33816: IFFALSE 33826
// sTank := true ;
33818: LD_ADDR_EXP 110
33822: PUSH
33823: LD_INT 1
33825: ST_TO_ADDR
// if p3 = 20 then
33826: LD_VAR 0 3
33830: PUSH
33831: LD_INT 20
33833: EQUAL
33834: IFFALSE 33844
// sRemote := true ;
33836: LD_ADDR_EXP 111
33840: PUSH
33841: LD_INT 1
33843: ST_TO_ADDR
// if p3 = 21 then
33844: LD_VAR 0 3
33848: PUSH
33849: LD_INT 21
33851: EQUAL
33852: IFFALSE 33862
// sPowell := true ;
33854: LD_ADDR_EXP 112
33858: PUSH
33859: LD_INT 1
33861: ST_TO_ADDR
// if p3 = 22 then
33862: LD_VAR 0 3
33866: PUSH
33867: LD_INT 22
33869: EQUAL
33870: IFFALSE 33880
// sTeleport := true ;
33872: LD_ADDR_EXP 115
33876: PUSH
33877: LD_INT 1
33879: ST_TO_ADDR
// if p3 = 23 then
33880: LD_VAR 0 3
33884: PUSH
33885: LD_INT 23
33887: EQUAL
33888: IFFALSE 33898
// sOilTower := true ;
33890: LD_ADDR_EXP 117
33894: PUSH
33895: LD_INT 1
33897: ST_TO_ADDR
// if p3 = 24 then
33898: LD_VAR 0 3
33902: PUSH
33903: LD_INT 24
33905: EQUAL
33906: IFFALSE 33916
// sShovel := true ;
33908: LD_ADDR_EXP 118
33912: PUSH
33913: LD_INT 1
33915: ST_TO_ADDR
// if p3 = 25 then
33916: LD_VAR 0 3
33920: PUSH
33921: LD_INT 25
33923: EQUAL
33924: IFFALSE 33934
// sSheik := true ;
33926: LD_ADDR_EXP 119
33930: PUSH
33931: LD_INT 1
33933: ST_TO_ADDR
// if p3 = 26 then
33934: LD_VAR 0 3
33938: PUSH
33939: LD_INT 26
33941: EQUAL
33942: IFFALSE 33952
// sEarthquake := true ;
33944: LD_ADDR_EXP 121
33948: PUSH
33949: LD_INT 1
33951: ST_TO_ADDR
// if p3 = 27 then
33952: LD_VAR 0 3
33956: PUSH
33957: LD_INT 27
33959: EQUAL
33960: IFFALSE 33970
// sAI := true ;
33962: LD_ADDR_EXP 122
33966: PUSH
33967: LD_INT 1
33969: ST_TO_ADDR
// if p3 = 28 then
33970: LD_VAR 0 3
33974: PUSH
33975: LD_INT 28
33977: EQUAL
33978: IFFALSE 33988
// sCargo := true ;
33980: LD_ADDR_EXP 125
33984: PUSH
33985: LD_INT 1
33987: ST_TO_ADDR
// if p3 = 29 then
33988: LD_VAR 0 3
33992: PUSH
33993: LD_INT 29
33995: EQUAL
33996: IFFALSE 34006
// sDLaser := true ;
33998: LD_ADDR_EXP 126
34002: PUSH
34003: LD_INT 1
34005: ST_TO_ADDR
// if p3 = 30 then
34006: LD_VAR 0 3
34010: PUSH
34011: LD_INT 30
34013: EQUAL
34014: IFFALSE 34024
// sExchange := true ;
34016: LD_ADDR_EXP 127
34020: PUSH
34021: LD_INT 1
34023: ST_TO_ADDR
// if p3 = 31 then
34024: LD_VAR 0 3
34028: PUSH
34029: LD_INT 31
34031: EQUAL
34032: IFFALSE 34042
// sFac := true ;
34034: LD_ADDR_EXP 128
34038: PUSH
34039: LD_INT 1
34041: ST_TO_ADDR
// if p3 = 32 then
34042: LD_VAR 0 3
34046: PUSH
34047: LD_INT 32
34049: EQUAL
34050: IFFALSE 34060
// sPower := true ;
34052: LD_ADDR_EXP 129
34056: PUSH
34057: LD_INT 1
34059: ST_TO_ADDR
// if p3 = 33 then
34060: LD_VAR 0 3
34064: PUSH
34065: LD_INT 33
34067: EQUAL
34068: IFFALSE 34078
// sRandom := true ;
34070: LD_ADDR_EXP 130
34074: PUSH
34075: LD_INT 1
34077: ST_TO_ADDR
// if p3 = 34 then
34078: LD_VAR 0 3
34082: PUSH
34083: LD_INT 34
34085: EQUAL
34086: IFFALSE 34096
// sShield := true ;
34088: LD_ADDR_EXP 131
34092: PUSH
34093: LD_INT 1
34095: ST_TO_ADDR
// if p3 = 35 then
34096: LD_VAR 0 3
34100: PUSH
34101: LD_INT 35
34103: EQUAL
34104: IFFALSE 34114
// sTime := true ;
34106: LD_ADDR_EXP 132
34110: PUSH
34111: LD_INT 1
34113: ST_TO_ADDR
// if p3 = 36 then
34114: LD_VAR 0 3
34118: PUSH
34119: LD_INT 36
34121: EQUAL
34122: IFFALSE 34132
// sTools := true ;
34124: LD_ADDR_EXP 133
34128: PUSH
34129: LD_INT 1
34131: ST_TO_ADDR
// if p3 = 101 then
34132: LD_VAR 0 3
34136: PUSH
34137: LD_INT 101
34139: EQUAL
34140: IFFALSE 34150
// sSold := true ;
34142: LD_ADDR_EXP 98
34146: PUSH
34147: LD_INT 1
34149: ST_TO_ADDR
// if p3 = 102 then
34150: LD_VAR 0 3
34154: PUSH
34155: LD_INT 102
34157: EQUAL
34158: IFFALSE 34168
// sDiff := true ;
34160: LD_ADDR_EXP 99
34164: PUSH
34165: LD_INT 1
34167: ST_TO_ADDR
// if p3 = 103 then
34168: LD_VAR 0 3
34172: PUSH
34173: LD_INT 103
34175: EQUAL
34176: IFFALSE 34186
// sFog := true ;
34178: LD_ADDR_EXP 102
34182: PUSH
34183: LD_INT 1
34185: ST_TO_ADDR
// if p3 = 104 then
34186: LD_VAR 0 3
34190: PUSH
34191: LD_INT 104
34193: EQUAL
34194: IFFALSE 34204
// sReset := true ;
34196: LD_ADDR_EXP 103
34200: PUSH
34201: LD_INT 1
34203: ST_TO_ADDR
// if p3 = 105 then
34204: LD_VAR 0 3
34208: PUSH
34209: LD_INT 105
34211: EQUAL
34212: IFFALSE 34222
// sSun := true ;
34214: LD_ADDR_EXP 104
34218: PUSH
34219: LD_INT 1
34221: ST_TO_ADDR
// if p3 = 106 then
34222: LD_VAR 0 3
34226: PUSH
34227: LD_INT 106
34229: EQUAL
34230: IFFALSE 34240
// sTiger := true ;
34232: LD_ADDR_EXP 100
34236: PUSH
34237: LD_INT 1
34239: ST_TO_ADDR
// if p3 = 107 then
34240: LD_VAR 0 3
34244: PUSH
34245: LD_INT 107
34247: EQUAL
34248: IFFALSE 34258
// sBomb := true ;
34250: LD_ADDR_EXP 101
34254: PUSH
34255: LD_INT 1
34257: ST_TO_ADDR
// if p3 = 108 then
34258: LD_VAR 0 3
34262: PUSH
34263: LD_INT 108
34265: EQUAL
34266: IFFALSE 34276
// sWound := true ;
34268: LD_ADDR_EXP 109
34272: PUSH
34273: LD_INT 1
34275: ST_TO_ADDR
// if p3 = 109 then
34276: LD_VAR 0 3
34280: PUSH
34281: LD_INT 109
34283: EQUAL
34284: IFFALSE 34294
// sBetray := true ;
34286: LD_ADDR_EXP 113
34290: PUSH
34291: LD_INT 1
34293: ST_TO_ADDR
// if p3 = 110 then
34294: LD_VAR 0 3
34298: PUSH
34299: LD_INT 110
34301: EQUAL
34302: IFFALSE 34312
// sContamin := true ;
34304: LD_ADDR_EXP 114
34308: PUSH
34309: LD_INT 1
34311: ST_TO_ADDR
// if p3 = 111 then
34312: LD_VAR 0 3
34316: PUSH
34317: LD_INT 111
34319: EQUAL
34320: IFFALSE 34330
// sOil := true ;
34322: LD_ADDR_EXP 116
34326: PUSH
34327: LD_INT 1
34329: ST_TO_ADDR
// if p3 = 112 then
34330: LD_VAR 0 3
34334: PUSH
34335: LD_INT 112
34337: EQUAL
34338: IFFALSE 34348
// sStu := true ;
34340: LD_ADDR_EXP 120
34344: PUSH
34345: LD_INT 1
34347: ST_TO_ADDR
// if p3 = 113 then
34348: LD_VAR 0 3
34352: PUSH
34353: LD_INT 113
34355: EQUAL
34356: IFFALSE 34366
// sBazooka := true ;
34358: LD_ADDR_EXP 123
34362: PUSH
34363: LD_INT 1
34365: ST_TO_ADDR
// if p3 = 114 then
34366: LD_VAR 0 3
34370: PUSH
34371: LD_INT 114
34373: EQUAL
34374: IFFALSE 34384
// sMortar := true ;
34376: LD_ADDR_EXP 124
34380: PUSH
34381: LD_INT 1
34383: ST_TO_ADDR
// if p3 = 115 then
34384: LD_VAR 0 3
34388: PUSH
34389: LD_INT 115
34391: EQUAL
34392: IFFALSE 34402
// sRanger := true ;
34394: LD_ADDR_EXP 134
34398: PUSH
34399: LD_INT 1
34401: ST_TO_ADDR
// end ; end ;
34402: PPOPN 6
34404: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
34405: LD_EXP 81
34409: PUSH
34410: LD_EXP 86
34414: AND
34415: IFFALSE 34539
34417: GO 34419
34419: DISABLE
34420: LD_INT 0
34422: PPUSH
34423: PPUSH
// begin enable ;
34424: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
34425: LD_ADDR_VAR 0 2
34429: PUSH
34430: LD_INT 22
34432: PUSH
34433: LD_OWVAR 2
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: PUSH
34445: LD_INT 34
34447: PUSH
34448: LD_INT 7
34450: PUSH
34451: EMPTY
34452: LIST
34453: LIST
34454: PUSH
34455: LD_INT 34
34457: PUSH
34458: LD_INT 45
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 34
34467: PUSH
34468: LD_INT 28
34470: PUSH
34471: EMPTY
34472: LIST
34473: LIST
34474: PUSH
34475: LD_INT 34
34477: PUSH
34478: LD_INT 47
34480: PUSH
34481: EMPTY
34482: LIST
34483: LIST
34484: PUSH
34485: EMPTY
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: PUSH
34492: EMPTY
34493: LIST
34494: LIST
34495: PPUSH
34496: CALL_OW 69
34500: ST_TO_ADDR
// if not tmp then
34501: LD_VAR 0 2
34505: NOT
34506: IFFALSE 34510
// exit ;
34508: GO 34539
// for i in tmp do
34510: LD_ADDR_VAR 0 1
34514: PUSH
34515: LD_VAR 0 2
34519: PUSH
34520: FOR_IN
34521: IFFALSE 34537
// begin SetLives ( i , 0 ) ;
34523: LD_VAR 0 1
34527: PPUSH
34528: LD_INT 0
34530: PPUSH
34531: CALL_OW 234
// end ;
34535: GO 34520
34537: POP
34538: POP
// end ;
34539: PPOPN 2
34541: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
34542: LD_EXP 81
34546: PUSH
34547: LD_EXP 87
34551: AND
34552: IFFALSE 34636
34554: GO 34556
34556: DISABLE
34557: LD_INT 0
34559: PPUSH
34560: PPUSH
// begin enable ;
34561: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
34562: LD_ADDR_VAR 0 2
34566: PUSH
34567: LD_INT 22
34569: PUSH
34570: LD_OWVAR 2
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 32
34581: PUSH
34582: LD_INT 3
34584: PUSH
34585: EMPTY
34586: LIST
34587: LIST
34588: PUSH
34589: EMPTY
34590: LIST
34591: LIST
34592: PPUSH
34593: CALL_OW 69
34597: ST_TO_ADDR
// if not tmp then
34598: LD_VAR 0 2
34602: NOT
34603: IFFALSE 34607
// exit ;
34605: GO 34636
// for i in tmp do
34607: LD_ADDR_VAR 0 1
34611: PUSH
34612: LD_VAR 0 2
34616: PUSH
34617: FOR_IN
34618: IFFALSE 34634
// begin SetLives ( i , 0 ) ;
34620: LD_VAR 0 1
34624: PPUSH
34625: LD_INT 0
34627: PPUSH
34628: CALL_OW 234
// end ;
34632: GO 34617
34634: POP
34635: POP
// end ;
34636: PPOPN 2
34638: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
34639: LD_EXP 81
34643: PUSH
34644: LD_EXP 84
34648: AND
34649: IFFALSE 34742
34651: GO 34653
34653: DISABLE
34654: LD_INT 0
34656: PPUSH
// begin enable ;
34657: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
34658: LD_ADDR_VAR 0 1
34662: PUSH
34663: LD_INT 22
34665: PUSH
34666: LD_OWVAR 2
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 2
34677: PUSH
34678: LD_INT 25
34680: PUSH
34681: LD_INT 5
34683: PUSH
34684: EMPTY
34685: LIST
34686: LIST
34687: PUSH
34688: LD_INT 25
34690: PUSH
34691: LD_INT 9
34693: PUSH
34694: EMPTY
34695: LIST
34696: LIST
34697: PUSH
34698: LD_INT 25
34700: PUSH
34701: LD_INT 8
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: EMPTY
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PPUSH
34718: CALL_OW 69
34722: PUSH
34723: FOR_IN
34724: IFFALSE 34740
// begin SetClass ( i , 1 ) ;
34726: LD_VAR 0 1
34730: PPUSH
34731: LD_INT 1
34733: PPUSH
34734: CALL_OW 336
// end ;
34738: GO 34723
34740: POP
34741: POP
// end ;
34742: PPOPN 1
34744: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
34745: LD_EXP 81
34749: PUSH
34750: LD_EXP 85
34754: AND
34755: PUSH
34756: LD_OWVAR 65
34760: PUSH
34761: LD_INT 7
34763: LESS
34764: AND
34765: IFFALSE 34779
34767: GO 34769
34769: DISABLE
// begin enable ;
34770: ENABLE
// game_speed := 7 ;
34771: LD_ADDR_OWVAR 65
34775: PUSH
34776: LD_INT 7
34778: ST_TO_ADDR
// end ;
34779: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
34780: LD_EXP 81
34784: PUSH
34785: LD_EXP 88
34789: AND
34790: IFFALSE 34992
34792: GO 34794
34794: DISABLE
34795: LD_INT 0
34797: PPUSH
34798: PPUSH
34799: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
34800: LD_ADDR_VAR 0 3
34804: PUSH
34805: LD_INT 81
34807: PUSH
34808: LD_OWVAR 2
34812: PUSH
34813: EMPTY
34814: LIST
34815: LIST
34816: PUSH
34817: LD_INT 21
34819: PUSH
34820: LD_INT 1
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PPUSH
34831: CALL_OW 69
34835: ST_TO_ADDR
// if not tmp then
34836: LD_VAR 0 3
34840: NOT
34841: IFFALSE 34845
// exit ;
34843: GO 34992
// if tmp > 5 then
34845: LD_VAR 0 3
34849: PUSH
34850: LD_INT 5
34852: GREATER
34853: IFFALSE 34865
// k := 5 else
34855: LD_ADDR_VAR 0 2
34859: PUSH
34860: LD_INT 5
34862: ST_TO_ADDR
34863: GO 34875
// k := tmp ;
34865: LD_ADDR_VAR 0 2
34869: PUSH
34870: LD_VAR 0 3
34874: ST_TO_ADDR
// for i := 1 to k do
34875: LD_ADDR_VAR 0 1
34879: PUSH
34880: DOUBLE
34881: LD_INT 1
34883: DEC
34884: ST_TO_ADDR
34885: LD_VAR 0 2
34889: PUSH
34890: FOR_TO
34891: IFFALSE 34990
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
34893: LD_VAR 0 3
34897: PUSH
34898: LD_VAR 0 1
34902: ARRAY
34903: PPUSH
34904: LD_VAR 0 1
34908: PUSH
34909: LD_INT 4
34911: MOD
34912: PUSH
34913: LD_INT 1
34915: PLUS
34916: PPUSH
34917: CALL_OW 259
34921: PUSH
34922: LD_INT 10
34924: LESS
34925: IFFALSE 34988
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
34927: LD_VAR 0 3
34931: PUSH
34932: LD_VAR 0 1
34936: ARRAY
34937: PPUSH
34938: LD_VAR 0 1
34942: PUSH
34943: LD_INT 4
34945: MOD
34946: PUSH
34947: LD_INT 1
34949: PLUS
34950: PPUSH
34951: LD_VAR 0 3
34955: PUSH
34956: LD_VAR 0 1
34960: ARRAY
34961: PPUSH
34962: LD_VAR 0 1
34966: PUSH
34967: LD_INT 4
34969: MOD
34970: PUSH
34971: LD_INT 1
34973: PLUS
34974: PPUSH
34975: CALL_OW 259
34979: PUSH
34980: LD_INT 1
34982: PLUS
34983: PPUSH
34984: CALL_OW 237
34988: GO 34890
34990: POP
34991: POP
// end ;
34992: PPOPN 3
34994: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
34995: LD_EXP 81
34999: PUSH
35000: LD_EXP 89
35004: AND
35005: IFFALSE 35025
35007: GO 35009
35009: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
35010: LD_INT 4
35012: PPUSH
35013: LD_OWVAR 2
35017: PPUSH
35018: LD_INT 0
35020: PPUSH
35021: CALL_OW 324
35025: END
// every 0 0$1 trigger StreamModeActive and sShovel do
35026: LD_EXP 81
35030: PUSH
35031: LD_EXP 118
35035: AND
35036: IFFALSE 35056
35038: GO 35040
35040: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
35041: LD_INT 19
35043: PPUSH
35044: LD_OWVAR 2
35048: PPUSH
35049: LD_INT 0
35051: PPUSH
35052: CALL_OW 324
35056: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
35057: LD_EXP 81
35061: PUSH
35062: LD_EXP 90
35066: AND
35067: IFFALSE 35169
35069: GO 35071
35071: DISABLE
35072: LD_INT 0
35074: PPUSH
35075: PPUSH
// begin enable ;
35076: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
35077: LD_ADDR_VAR 0 2
35081: PUSH
35082: LD_INT 22
35084: PUSH
35085: LD_OWVAR 2
35089: PUSH
35090: EMPTY
35091: LIST
35092: LIST
35093: PUSH
35094: LD_INT 2
35096: PUSH
35097: LD_INT 34
35099: PUSH
35100: LD_INT 11
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 34
35109: PUSH
35110: LD_INT 30
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: PUSH
35122: EMPTY
35123: LIST
35124: LIST
35125: PPUSH
35126: CALL_OW 69
35130: ST_TO_ADDR
// if not tmp then
35131: LD_VAR 0 2
35135: NOT
35136: IFFALSE 35140
// exit ;
35138: GO 35169
// for i in tmp do
35140: LD_ADDR_VAR 0 1
35144: PUSH
35145: LD_VAR 0 2
35149: PUSH
35150: FOR_IN
35151: IFFALSE 35167
// begin SetLives ( i , 0 ) ;
35153: LD_VAR 0 1
35157: PPUSH
35158: LD_INT 0
35160: PPUSH
35161: CALL_OW 234
// end ;
35165: GO 35150
35167: POP
35168: POP
// end ;
35169: PPOPN 2
35171: END
// every 0 0$1 trigger StreamModeActive and sBunker do
35172: LD_EXP 81
35176: PUSH
35177: LD_EXP 91
35181: AND
35182: IFFALSE 35202
35184: GO 35186
35186: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
35187: LD_INT 32
35189: PPUSH
35190: LD_OWVAR 2
35194: PPUSH
35195: LD_INT 0
35197: PPUSH
35198: CALL_OW 324
35202: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
35203: LD_EXP 81
35207: PUSH
35208: LD_EXP 92
35212: AND
35213: IFFALSE 35394
35215: GO 35217
35217: DISABLE
35218: LD_INT 0
35220: PPUSH
35221: PPUSH
35222: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
35223: LD_ADDR_VAR 0 2
35227: PUSH
35228: LD_INT 22
35230: PUSH
35231: LD_OWVAR 2
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 33
35242: PUSH
35243: LD_INT 3
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PPUSH
35254: CALL_OW 69
35258: ST_TO_ADDR
// if not tmp then
35259: LD_VAR 0 2
35263: NOT
35264: IFFALSE 35268
// exit ;
35266: GO 35394
// side := 0 ;
35268: LD_ADDR_VAR 0 3
35272: PUSH
35273: LD_INT 0
35275: ST_TO_ADDR
// for i := 1 to 8 do
35276: LD_ADDR_VAR 0 1
35280: PUSH
35281: DOUBLE
35282: LD_INT 1
35284: DEC
35285: ST_TO_ADDR
35286: LD_INT 8
35288: PUSH
35289: FOR_TO
35290: IFFALSE 35338
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
35292: LD_OWVAR 2
35296: PUSH
35297: LD_VAR 0 1
35301: NONEQUAL
35302: PUSH
35303: LD_OWVAR 2
35307: PPUSH
35308: LD_VAR 0 1
35312: PPUSH
35313: CALL_OW 81
35317: PUSH
35318: LD_INT 2
35320: EQUAL
35321: AND
35322: IFFALSE 35336
// begin side := i ;
35324: LD_ADDR_VAR 0 3
35328: PUSH
35329: LD_VAR 0 1
35333: ST_TO_ADDR
// break ;
35334: GO 35338
// end ;
35336: GO 35289
35338: POP
35339: POP
// if not side then
35340: LD_VAR 0 3
35344: NOT
35345: IFFALSE 35349
// exit ;
35347: GO 35394
// for i := 1 to tmp do
35349: LD_ADDR_VAR 0 1
35353: PUSH
35354: DOUBLE
35355: LD_INT 1
35357: DEC
35358: ST_TO_ADDR
35359: LD_VAR 0 2
35363: PUSH
35364: FOR_TO
35365: IFFALSE 35392
// if Prob ( 60 ) then
35367: LD_INT 60
35369: PPUSH
35370: CALL_OW 13
35374: IFFALSE 35390
// SetSide ( i , side ) ;
35376: LD_VAR 0 1
35380: PPUSH
35381: LD_VAR 0 3
35385: PPUSH
35386: CALL_OW 235
35390: GO 35364
35392: POP
35393: POP
// end ;
35394: PPOPN 3
35396: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
35397: LD_EXP 81
35401: PUSH
35402: LD_EXP 94
35406: AND
35407: IFFALSE 35526
35409: GO 35411
35411: DISABLE
35412: LD_INT 0
35414: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
35415: LD_ADDR_VAR 0 1
35419: PUSH
35420: LD_INT 22
35422: PUSH
35423: LD_OWVAR 2
35427: PUSH
35428: EMPTY
35429: LIST
35430: LIST
35431: PUSH
35432: LD_INT 21
35434: PUSH
35435: LD_INT 1
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 3
35444: PUSH
35445: LD_INT 23
35447: PUSH
35448: LD_INT 0
35450: PUSH
35451: EMPTY
35452: LIST
35453: LIST
35454: PUSH
35455: EMPTY
35456: LIST
35457: LIST
35458: PUSH
35459: EMPTY
35460: LIST
35461: LIST
35462: LIST
35463: PPUSH
35464: CALL_OW 69
35468: PUSH
35469: FOR_IN
35470: IFFALSE 35524
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
35472: LD_VAR 0 1
35476: PPUSH
35477: CALL_OW 257
35481: PUSH
35482: LD_INT 1
35484: PUSH
35485: LD_INT 2
35487: PUSH
35488: LD_INT 3
35490: PUSH
35491: LD_INT 4
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: LIST
35498: LIST
35499: IN
35500: IFFALSE 35522
// SetClass ( un , rand ( 1 , 4 ) ) ;
35502: LD_VAR 0 1
35506: PPUSH
35507: LD_INT 1
35509: PPUSH
35510: LD_INT 4
35512: PPUSH
35513: CALL_OW 12
35517: PPUSH
35518: CALL_OW 336
35522: GO 35469
35524: POP
35525: POP
// end ;
35526: PPOPN 1
35528: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
35529: LD_EXP 81
35533: PUSH
35534: LD_EXP 93
35538: AND
35539: IFFALSE 35618
35541: GO 35543
35543: DISABLE
35544: LD_INT 0
35546: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35547: LD_ADDR_VAR 0 1
35551: PUSH
35552: LD_INT 22
35554: PUSH
35555: LD_OWVAR 2
35559: PUSH
35560: EMPTY
35561: LIST
35562: LIST
35563: PUSH
35564: LD_INT 21
35566: PUSH
35567: LD_INT 3
35569: PUSH
35570: EMPTY
35571: LIST
35572: LIST
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PPUSH
35578: CALL_OW 69
35582: ST_TO_ADDR
// if not tmp then
35583: LD_VAR 0 1
35587: NOT
35588: IFFALSE 35592
// exit ;
35590: GO 35618
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
35592: LD_VAR 0 1
35596: PUSH
35597: LD_INT 1
35599: PPUSH
35600: LD_VAR 0 1
35604: PPUSH
35605: CALL_OW 12
35609: ARRAY
35610: PPUSH
35611: LD_INT 100
35613: PPUSH
35614: CALL_OW 234
// end ;
35618: PPOPN 1
35620: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
35621: LD_EXP 81
35625: PUSH
35626: LD_EXP 95
35630: AND
35631: IFFALSE 35729
35633: GO 35635
35635: DISABLE
35636: LD_INT 0
35638: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
35639: LD_ADDR_VAR 0 1
35643: PUSH
35644: LD_INT 22
35646: PUSH
35647: LD_OWVAR 2
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 21
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: EMPTY
35663: LIST
35664: LIST
35665: PUSH
35666: EMPTY
35667: LIST
35668: LIST
35669: PPUSH
35670: CALL_OW 69
35674: ST_TO_ADDR
// if not tmp then
35675: LD_VAR 0 1
35679: NOT
35680: IFFALSE 35684
// exit ;
35682: GO 35729
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
35684: LD_VAR 0 1
35688: PUSH
35689: LD_INT 1
35691: PPUSH
35692: LD_VAR 0 1
35696: PPUSH
35697: CALL_OW 12
35701: ARRAY
35702: PPUSH
35703: LD_INT 1
35705: PPUSH
35706: LD_INT 4
35708: PPUSH
35709: CALL_OW 12
35713: PPUSH
35714: LD_INT 3000
35716: PPUSH
35717: LD_INT 9000
35719: PPUSH
35720: CALL_OW 12
35724: PPUSH
35725: CALL_OW 492
// end ;
35729: PPOPN 1
35731: END
// every 0 0$1 trigger StreamModeActive and sDepot do
35732: LD_EXP 81
35736: PUSH
35737: LD_EXP 96
35741: AND
35742: IFFALSE 35762
35744: GO 35746
35746: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
35747: LD_INT 1
35749: PPUSH
35750: LD_OWVAR 2
35754: PPUSH
35755: LD_INT 0
35757: PPUSH
35758: CALL_OW 324
35762: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
35763: LD_EXP 81
35767: PUSH
35768: LD_EXP 97
35772: AND
35773: IFFALSE 35856
35775: GO 35777
35777: DISABLE
35778: LD_INT 0
35780: PPUSH
35781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35782: LD_ADDR_VAR 0 2
35786: PUSH
35787: LD_INT 22
35789: PUSH
35790: LD_OWVAR 2
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: PUSH
35799: LD_INT 21
35801: PUSH
35802: LD_INT 3
35804: PUSH
35805: EMPTY
35806: LIST
35807: LIST
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PPUSH
35813: CALL_OW 69
35817: ST_TO_ADDR
// if not tmp then
35818: LD_VAR 0 2
35822: NOT
35823: IFFALSE 35827
// exit ;
35825: GO 35856
// for i in tmp do
35827: LD_ADDR_VAR 0 1
35831: PUSH
35832: LD_VAR 0 2
35836: PUSH
35837: FOR_IN
35838: IFFALSE 35854
// SetBLevel ( i , 10 ) ;
35840: LD_VAR 0 1
35844: PPUSH
35845: LD_INT 10
35847: PPUSH
35848: CALL_OW 241
35852: GO 35837
35854: POP
35855: POP
// end ;
35856: PPOPN 2
35858: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
35859: LD_EXP 81
35863: PUSH
35864: LD_EXP 98
35868: AND
35869: IFFALSE 35980
35871: GO 35873
35873: DISABLE
35874: LD_INT 0
35876: PPUSH
35877: PPUSH
35878: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
35879: LD_ADDR_VAR 0 3
35883: PUSH
35884: LD_INT 22
35886: PUSH
35887: LD_OWVAR 2
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 25
35898: PUSH
35899: LD_INT 1
35901: PUSH
35902: EMPTY
35903: LIST
35904: LIST
35905: PUSH
35906: EMPTY
35907: LIST
35908: LIST
35909: PPUSH
35910: CALL_OW 69
35914: ST_TO_ADDR
// if not tmp then
35915: LD_VAR 0 3
35919: NOT
35920: IFFALSE 35924
// exit ;
35922: GO 35980
// un := tmp [ rand ( 1 , tmp ) ] ;
35924: LD_ADDR_VAR 0 2
35928: PUSH
35929: LD_VAR 0 3
35933: PUSH
35934: LD_INT 1
35936: PPUSH
35937: LD_VAR 0 3
35941: PPUSH
35942: CALL_OW 12
35946: ARRAY
35947: ST_TO_ADDR
// if Crawls ( un ) then
35948: LD_VAR 0 2
35952: PPUSH
35953: CALL_OW 318
35957: IFFALSE 35968
// ComWalk ( un ) ;
35959: LD_VAR 0 2
35963: PPUSH
35964: CALL_OW 138
// SetClass ( un , class_sniper ) ;
35968: LD_VAR 0 2
35972: PPUSH
35973: LD_INT 5
35975: PPUSH
35976: CALL_OW 336
// end ;
35980: PPOPN 3
35982: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
35983: LD_EXP 81
35987: PUSH
35988: LD_EXP 99
35992: AND
35993: PUSH
35994: LD_OWVAR 67
35998: PUSH
35999: LD_INT 3
36001: LESS
36002: AND
36003: IFFALSE 36022
36005: GO 36007
36007: DISABLE
// Difficulty := Difficulty + 1 ;
36008: LD_ADDR_OWVAR 67
36012: PUSH
36013: LD_OWVAR 67
36017: PUSH
36018: LD_INT 1
36020: PLUS
36021: ST_TO_ADDR
36022: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
36023: LD_EXP 81
36027: PUSH
36028: LD_EXP 100
36032: AND
36033: IFFALSE 36136
36035: GO 36037
36037: DISABLE
36038: LD_INT 0
36040: PPUSH
// begin for i := 1 to 5 do
36041: LD_ADDR_VAR 0 1
36045: PUSH
36046: DOUBLE
36047: LD_INT 1
36049: DEC
36050: ST_TO_ADDR
36051: LD_INT 5
36053: PUSH
36054: FOR_TO
36055: IFFALSE 36134
// begin uc_nation := nation_nature ;
36057: LD_ADDR_OWVAR 21
36061: PUSH
36062: LD_INT 0
36064: ST_TO_ADDR
// uc_side := 0 ;
36065: LD_ADDR_OWVAR 20
36069: PUSH
36070: LD_INT 0
36072: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36073: LD_ADDR_OWVAR 29
36077: PUSH
36078: LD_INT 12
36080: PUSH
36081: LD_INT 12
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: ST_TO_ADDR
// hc_agressivity := 20 ;
36088: LD_ADDR_OWVAR 35
36092: PUSH
36093: LD_INT 20
36095: ST_TO_ADDR
// hc_class := class_tiger ;
36096: LD_ADDR_OWVAR 28
36100: PUSH
36101: LD_INT 14
36103: ST_TO_ADDR
// hc_gallery :=  ;
36104: LD_ADDR_OWVAR 33
36108: PUSH
36109: LD_STRING 
36111: ST_TO_ADDR
// hc_name :=  ;
36112: LD_ADDR_OWVAR 26
36116: PUSH
36117: LD_STRING 
36119: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
36120: CALL_OW 44
36124: PPUSH
36125: LD_INT 0
36127: PPUSH
36128: CALL_OW 51
// end ;
36132: GO 36054
36134: POP
36135: POP
// end ;
36136: PPOPN 1
36138: END
// every 0 0$1 trigger StreamModeActive and sBomb do
36139: LD_EXP 81
36143: PUSH
36144: LD_EXP 101
36148: AND
36149: IFFALSE 36158
36151: GO 36153
36153: DISABLE
// StreamSibBomb ;
36154: CALL 36159 0 0
36158: END
// export function StreamSibBomb ; var i , x , y ; begin
36159: LD_INT 0
36161: PPUSH
36162: PPUSH
36163: PPUSH
36164: PPUSH
// result := false ;
36165: LD_ADDR_VAR 0 1
36169: PUSH
36170: LD_INT 0
36172: ST_TO_ADDR
// for i := 1 to 16 do
36173: LD_ADDR_VAR 0 2
36177: PUSH
36178: DOUBLE
36179: LD_INT 1
36181: DEC
36182: ST_TO_ADDR
36183: LD_INT 16
36185: PUSH
36186: FOR_TO
36187: IFFALSE 36386
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36189: LD_ADDR_VAR 0 3
36193: PUSH
36194: LD_INT 10
36196: PUSH
36197: LD_INT 20
36199: PUSH
36200: LD_INT 30
36202: PUSH
36203: LD_INT 40
36205: PUSH
36206: LD_INT 50
36208: PUSH
36209: LD_INT 60
36211: PUSH
36212: LD_INT 70
36214: PUSH
36215: LD_INT 80
36217: PUSH
36218: LD_INT 90
36220: PUSH
36221: LD_INT 100
36223: PUSH
36224: LD_INT 110
36226: PUSH
36227: LD_INT 120
36229: PUSH
36230: LD_INT 130
36232: PUSH
36233: LD_INT 140
36235: PUSH
36236: LD_INT 150
36238: PUSH
36239: EMPTY
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: PUSH
36256: LD_INT 1
36258: PPUSH
36259: LD_INT 15
36261: PPUSH
36262: CALL_OW 12
36266: ARRAY
36267: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36268: LD_ADDR_VAR 0 4
36272: PUSH
36273: LD_INT 10
36275: PUSH
36276: LD_INT 20
36278: PUSH
36279: LD_INT 30
36281: PUSH
36282: LD_INT 40
36284: PUSH
36285: LD_INT 50
36287: PUSH
36288: LD_INT 60
36290: PUSH
36291: LD_INT 70
36293: PUSH
36294: LD_INT 80
36296: PUSH
36297: LD_INT 90
36299: PUSH
36300: LD_INT 100
36302: PUSH
36303: LD_INT 110
36305: PUSH
36306: LD_INT 120
36308: PUSH
36309: LD_INT 130
36311: PUSH
36312: LD_INT 140
36314: PUSH
36315: LD_INT 150
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: LIST
36322: LIST
36323: LIST
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: PUSH
36335: LD_INT 1
36337: PPUSH
36338: LD_INT 15
36340: PPUSH
36341: CALL_OW 12
36345: ARRAY
36346: ST_TO_ADDR
// if ValidHex ( x , y ) then
36347: LD_VAR 0 3
36351: PPUSH
36352: LD_VAR 0 4
36356: PPUSH
36357: CALL_OW 488
36361: IFFALSE 36384
// begin result := [ x , y ] ;
36363: LD_ADDR_VAR 0 1
36367: PUSH
36368: LD_VAR 0 3
36372: PUSH
36373: LD_VAR 0 4
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: ST_TO_ADDR
// break ;
36382: GO 36386
// end ; end ;
36384: GO 36186
36386: POP
36387: POP
// if result then
36388: LD_VAR 0 1
36392: IFFALSE 36452
// begin ToLua ( playSibBomb() ) ;
36394: LD_STRING playSibBomb()
36396: PPUSH
36397: CALL_OW 559
// wait ( 0 0$14 ) ;
36401: LD_INT 490
36403: PPUSH
36404: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
36408: LD_VAR 0 1
36412: PUSH
36413: LD_INT 1
36415: ARRAY
36416: PPUSH
36417: LD_VAR 0 1
36421: PUSH
36422: LD_INT 2
36424: ARRAY
36425: PPUSH
36426: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
36430: LD_VAR 0 1
36434: PUSH
36435: LD_INT 1
36437: ARRAY
36438: PPUSH
36439: LD_VAR 0 1
36443: PUSH
36444: LD_INT 2
36446: ARRAY
36447: PPUSH
36448: CALL_OW 429
// end ; end ;
36452: LD_VAR 0 1
36456: RET
// every 0 0$1 trigger StreamModeActive and sReset do
36457: LD_EXP 81
36461: PUSH
36462: LD_EXP 103
36466: AND
36467: IFFALSE 36479
36469: GO 36471
36471: DISABLE
// YouLost (  ) ;
36472: LD_STRING 
36474: PPUSH
36475: CALL_OW 104
36479: END
// every 0 0$1 trigger StreamModeActive and sFog do
36480: LD_EXP 81
36484: PUSH
36485: LD_EXP 102
36489: AND
36490: IFFALSE 36504
36492: GO 36494
36494: DISABLE
// FogOff ( your_side ) ;
36495: LD_OWVAR 2
36499: PPUSH
36500: CALL_OW 344
36504: END
// every 0 0$1 trigger StreamModeActive and sSun do
36505: LD_EXP 81
36509: PUSH
36510: LD_EXP 104
36514: AND
36515: IFFALSE 36543
36517: GO 36519
36519: DISABLE
// begin solar_recharge_percent := 0 ;
36520: LD_ADDR_OWVAR 79
36524: PUSH
36525: LD_INT 0
36527: ST_TO_ADDR
// wait ( 5 5$00 ) ;
36528: LD_INT 10500
36530: PPUSH
36531: CALL_OW 67
// solar_recharge_percent := 100 ;
36535: LD_ADDR_OWVAR 79
36539: PUSH
36540: LD_INT 100
36542: ST_TO_ADDR
// end ;
36543: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
36544: LD_EXP 81
36548: PUSH
36549: LD_EXP 105
36553: AND
36554: IFFALSE 36793
36556: GO 36558
36558: DISABLE
36559: LD_INT 0
36561: PPUSH
36562: PPUSH
36563: PPUSH
// begin tmp := [ ] ;
36564: LD_ADDR_VAR 0 3
36568: PUSH
36569: EMPTY
36570: ST_TO_ADDR
// for i := 1 to 6 do
36571: LD_ADDR_VAR 0 1
36575: PUSH
36576: DOUBLE
36577: LD_INT 1
36579: DEC
36580: ST_TO_ADDR
36581: LD_INT 6
36583: PUSH
36584: FOR_TO
36585: IFFALSE 36690
// begin uc_nation := nation_nature ;
36587: LD_ADDR_OWVAR 21
36591: PUSH
36592: LD_INT 0
36594: ST_TO_ADDR
// uc_side := 0 ;
36595: LD_ADDR_OWVAR 20
36599: PUSH
36600: LD_INT 0
36602: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36603: LD_ADDR_OWVAR 29
36607: PUSH
36608: LD_INT 12
36610: PUSH
36611: LD_INT 12
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: ST_TO_ADDR
// hc_agressivity := 20 ;
36618: LD_ADDR_OWVAR 35
36622: PUSH
36623: LD_INT 20
36625: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
36626: LD_ADDR_OWVAR 28
36630: PUSH
36631: LD_INT 17
36633: ST_TO_ADDR
// hc_gallery :=  ;
36634: LD_ADDR_OWVAR 33
36638: PUSH
36639: LD_STRING 
36641: ST_TO_ADDR
// hc_name :=  ;
36642: LD_ADDR_OWVAR 26
36646: PUSH
36647: LD_STRING 
36649: ST_TO_ADDR
// un := CreateHuman ;
36650: LD_ADDR_VAR 0 2
36654: PUSH
36655: CALL_OW 44
36659: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
36660: LD_VAR 0 2
36664: PPUSH
36665: LD_INT 1
36667: PPUSH
36668: CALL_OW 51
// tmp := tmp ^ un ;
36672: LD_ADDR_VAR 0 3
36676: PUSH
36677: LD_VAR 0 3
36681: PUSH
36682: LD_VAR 0 2
36686: ADD
36687: ST_TO_ADDR
// end ;
36688: GO 36584
36690: POP
36691: POP
// repeat wait ( 0 0$1 ) ;
36692: LD_INT 35
36694: PPUSH
36695: CALL_OW 67
// for un in tmp do
36699: LD_ADDR_VAR 0 2
36703: PUSH
36704: LD_VAR 0 3
36708: PUSH
36709: FOR_IN
36710: IFFALSE 36784
// begin if IsDead ( un ) then
36712: LD_VAR 0 2
36716: PPUSH
36717: CALL_OW 301
36721: IFFALSE 36741
// begin tmp := tmp diff un ;
36723: LD_ADDR_VAR 0 3
36727: PUSH
36728: LD_VAR 0 3
36732: PUSH
36733: LD_VAR 0 2
36737: DIFF
36738: ST_TO_ADDR
// continue ;
36739: GO 36709
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
36741: LD_VAR 0 2
36745: PPUSH
36746: LD_INT 3
36748: PUSH
36749: LD_INT 22
36751: PUSH
36752: LD_INT 0
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PPUSH
36763: CALL_OW 69
36767: PPUSH
36768: LD_VAR 0 2
36772: PPUSH
36773: CALL_OW 74
36777: PPUSH
36778: CALL_OW 115
// end ;
36782: GO 36709
36784: POP
36785: POP
// until not tmp ;
36786: LD_VAR 0 3
36790: NOT
36791: IFFALSE 36692
// end ;
36793: PPOPN 3
36795: END
// every 0 0$1 trigger StreamModeActive and sTroll do
36796: LD_EXP 81
36800: PUSH
36801: LD_EXP 106
36805: AND
36806: IFFALSE 36860
36808: GO 36810
36810: DISABLE
// begin ToLua ( displayTroll(); ) ;
36811: LD_STRING displayTroll();
36813: PPUSH
36814: CALL_OW 559
// wait ( 3 3$00 ) ;
36818: LD_INT 6300
36820: PPUSH
36821: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36825: LD_STRING hideTroll();
36827: PPUSH
36828: CALL_OW 559
// wait ( 1 1$00 ) ;
36832: LD_INT 2100
36834: PPUSH
36835: CALL_OW 67
// ToLua ( displayTroll(); ) ;
36839: LD_STRING displayTroll();
36841: PPUSH
36842: CALL_OW 559
// wait ( 1 1$00 ) ;
36846: LD_INT 2100
36848: PPUSH
36849: CALL_OW 67
// ToLua ( hideTroll(); ) ;
36853: LD_STRING hideTroll();
36855: PPUSH
36856: CALL_OW 559
// end ;
36860: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
36861: LD_EXP 81
36865: PUSH
36866: LD_EXP 107
36870: AND
36871: IFFALSE 36934
36873: GO 36875
36875: DISABLE
36876: LD_INT 0
36878: PPUSH
// begin p := 0 ;
36879: LD_ADDR_VAR 0 1
36883: PUSH
36884: LD_INT 0
36886: ST_TO_ADDR
// repeat game_speed := 1 ;
36887: LD_ADDR_OWVAR 65
36891: PUSH
36892: LD_INT 1
36894: ST_TO_ADDR
// wait ( 0 0$1 ) ;
36895: LD_INT 35
36897: PPUSH
36898: CALL_OW 67
// p := p + 1 ;
36902: LD_ADDR_VAR 0 1
36906: PUSH
36907: LD_VAR 0 1
36911: PUSH
36912: LD_INT 1
36914: PLUS
36915: ST_TO_ADDR
// until p >= 60 ;
36916: LD_VAR 0 1
36920: PUSH
36921: LD_INT 60
36923: GREATEREQUAL
36924: IFFALSE 36887
// game_speed := 4 ;
36926: LD_ADDR_OWVAR 65
36930: PUSH
36931: LD_INT 4
36933: ST_TO_ADDR
// end ;
36934: PPOPN 1
36936: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
36937: LD_EXP 81
36941: PUSH
36942: LD_EXP 108
36946: AND
36947: IFFALSE 37093
36949: GO 36951
36951: DISABLE
36952: LD_INT 0
36954: PPUSH
36955: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36956: LD_ADDR_VAR 0 1
36960: PUSH
36961: LD_INT 22
36963: PUSH
36964: LD_OWVAR 2
36968: PUSH
36969: EMPTY
36970: LIST
36971: LIST
36972: PUSH
36973: LD_INT 2
36975: PUSH
36976: LD_INT 30
36978: PUSH
36979: LD_INT 0
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 30
36988: PUSH
36989: LD_INT 1
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: LIST
37000: PUSH
37001: EMPTY
37002: LIST
37003: LIST
37004: PPUSH
37005: CALL_OW 69
37009: ST_TO_ADDR
// if not depot then
37010: LD_VAR 0 1
37014: NOT
37015: IFFALSE 37019
// exit ;
37017: GO 37093
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
37019: LD_ADDR_VAR 0 2
37023: PUSH
37024: LD_VAR 0 1
37028: PUSH
37029: LD_INT 1
37031: PPUSH
37032: LD_VAR 0 1
37036: PPUSH
37037: CALL_OW 12
37041: ARRAY
37042: PPUSH
37043: CALL_OW 274
37047: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
37048: LD_VAR 0 2
37052: PPUSH
37053: LD_INT 1
37055: PPUSH
37056: LD_INT 0
37058: PPUSH
37059: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
37063: LD_VAR 0 2
37067: PPUSH
37068: LD_INT 2
37070: PPUSH
37071: LD_INT 0
37073: PPUSH
37074: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
37078: LD_VAR 0 2
37082: PPUSH
37083: LD_INT 3
37085: PPUSH
37086: LD_INT 0
37088: PPUSH
37089: CALL_OW 277
// end ;
37093: PPOPN 2
37095: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
37096: LD_EXP 81
37100: PUSH
37101: LD_EXP 109
37105: AND
37106: IFFALSE 37203
37108: GO 37110
37110: DISABLE
37111: LD_INT 0
37113: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37114: LD_ADDR_VAR 0 1
37118: PUSH
37119: LD_INT 22
37121: PUSH
37122: LD_OWVAR 2
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 21
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: LD_INT 3
37143: PUSH
37144: LD_INT 23
37146: PUSH
37147: LD_INT 0
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: PPUSH
37163: CALL_OW 69
37167: ST_TO_ADDR
// if not tmp then
37168: LD_VAR 0 1
37172: NOT
37173: IFFALSE 37177
// exit ;
37175: GO 37203
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
37177: LD_VAR 0 1
37181: PUSH
37182: LD_INT 1
37184: PPUSH
37185: LD_VAR 0 1
37189: PPUSH
37190: CALL_OW 12
37194: ARRAY
37195: PPUSH
37196: LD_INT 200
37198: PPUSH
37199: CALL_OW 234
// end ;
37203: PPOPN 1
37205: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
37206: LD_EXP 81
37210: PUSH
37211: LD_EXP 110
37215: AND
37216: IFFALSE 37295
37218: GO 37220
37220: DISABLE
37221: LD_INT 0
37223: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
37224: LD_ADDR_VAR 0 1
37228: PUSH
37229: LD_INT 22
37231: PUSH
37232: LD_OWVAR 2
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 21
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PPUSH
37255: CALL_OW 69
37259: ST_TO_ADDR
// if not tmp then
37260: LD_VAR 0 1
37264: NOT
37265: IFFALSE 37269
// exit ;
37267: GO 37295
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
37269: LD_VAR 0 1
37273: PUSH
37274: LD_INT 1
37276: PPUSH
37277: LD_VAR 0 1
37281: PPUSH
37282: CALL_OW 12
37286: ARRAY
37287: PPUSH
37288: LD_INT 60
37290: PPUSH
37291: CALL_OW 234
// end ;
37295: PPOPN 1
37297: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
37298: LD_EXP 81
37302: PUSH
37303: LD_EXP 111
37307: AND
37308: IFFALSE 37407
37310: GO 37312
37312: DISABLE
37313: LD_INT 0
37315: PPUSH
37316: PPUSH
// begin enable ;
37317: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
37318: LD_ADDR_VAR 0 1
37322: PUSH
37323: LD_INT 22
37325: PUSH
37326: LD_OWVAR 2
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 61
37337: PUSH
37338: EMPTY
37339: LIST
37340: PUSH
37341: LD_INT 33
37343: PUSH
37344: LD_INT 2
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: EMPTY
37352: LIST
37353: LIST
37354: LIST
37355: PPUSH
37356: CALL_OW 69
37360: ST_TO_ADDR
// if not tmp then
37361: LD_VAR 0 1
37365: NOT
37366: IFFALSE 37370
// exit ;
37368: GO 37407
// for i in tmp do
37370: LD_ADDR_VAR 0 2
37374: PUSH
37375: LD_VAR 0 1
37379: PUSH
37380: FOR_IN
37381: IFFALSE 37405
// if IsControledBy ( i ) then
37383: LD_VAR 0 2
37387: PPUSH
37388: CALL_OW 312
37392: IFFALSE 37403
// ComUnlink ( i ) ;
37394: LD_VAR 0 2
37398: PPUSH
37399: CALL_OW 136
37403: GO 37380
37405: POP
37406: POP
// end ;
37407: PPOPN 2
37409: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
37410: LD_EXP 81
37414: PUSH
37415: LD_EXP 112
37419: AND
37420: IFFALSE 37560
37422: GO 37424
37424: DISABLE
37425: LD_INT 0
37427: PPUSH
37428: PPUSH
// begin ToLua ( displayPowell(); ) ;
37429: LD_STRING displayPowell();
37431: PPUSH
37432: CALL_OW 559
// uc_side := 0 ;
37436: LD_ADDR_OWVAR 20
37440: PUSH
37441: LD_INT 0
37443: ST_TO_ADDR
// uc_nation := 2 ;
37444: LD_ADDR_OWVAR 21
37448: PUSH
37449: LD_INT 2
37451: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
37452: LD_ADDR_OWVAR 37
37456: PUSH
37457: LD_INT 14
37459: ST_TO_ADDR
// vc_engine := engine_siberite ;
37460: LD_ADDR_OWVAR 39
37464: PUSH
37465: LD_INT 3
37467: ST_TO_ADDR
// vc_control := control_apeman ;
37468: LD_ADDR_OWVAR 38
37472: PUSH
37473: LD_INT 5
37475: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
37476: LD_ADDR_OWVAR 40
37480: PUSH
37481: LD_INT 29
37483: ST_TO_ADDR
// un := CreateVehicle ;
37484: LD_ADDR_VAR 0 2
37488: PUSH
37489: CALL_OW 45
37493: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37494: LD_VAR 0 2
37498: PPUSH
37499: LD_INT 1
37501: PPUSH
37502: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37506: LD_INT 35
37508: PPUSH
37509: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37513: LD_VAR 0 2
37517: PPUSH
37518: LD_INT 22
37520: PUSH
37521: LD_OWVAR 2
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PPUSH
37530: CALL_OW 69
37534: PPUSH
37535: LD_VAR 0 2
37539: PPUSH
37540: CALL_OW 74
37544: PPUSH
37545: CALL_OW 115
// until IsDead ( un ) ;
37549: LD_VAR 0 2
37553: PPUSH
37554: CALL_OW 301
37558: IFFALSE 37506
// end ;
37560: PPOPN 2
37562: END
// every 0 0$1 trigger StreamModeActive and sStu do
37563: LD_EXP 81
37567: PUSH
37568: LD_EXP 120
37572: AND
37573: IFFALSE 37589
37575: GO 37577
37577: DISABLE
// begin ToLua ( displayStucuk(); ) ;
37578: LD_STRING displayStucuk();
37580: PPUSH
37581: CALL_OW 559
// ResetFog ;
37585: CALL_OW 335
// end ;
37589: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
37590: LD_EXP 81
37594: PUSH
37595: LD_EXP 113
37599: AND
37600: IFFALSE 37741
37602: GO 37604
37604: DISABLE
37605: LD_INT 0
37607: PPUSH
37608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37609: LD_ADDR_VAR 0 2
37613: PUSH
37614: LD_INT 22
37616: PUSH
37617: LD_OWVAR 2
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 21
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PPUSH
37640: CALL_OW 69
37644: ST_TO_ADDR
// if not tmp then
37645: LD_VAR 0 2
37649: NOT
37650: IFFALSE 37654
// exit ;
37652: GO 37741
// un := tmp [ rand ( 1 , tmp ) ] ;
37654: LD_ADDR_VAR 0 1
37658: PUSH
37659: LD_VAR 0 2
37663: PUSH
37664: LD_INT 1
37666: PPUSH
37667: LD_VAR 0 2
37671: PPUSH
37672: CALL_OW 12
37676: ARRAY
37677: ST_TO_ADDR
// SetSide ( un , 0 ) ;
37678: LD_VAR 0 1
37682: PPUSH
37683: LD_INT 0
37685: PPUSH
37686: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
37690: LD_VAR 0 1
37694: PPUSH
37695: LD_OWVAR 3
37699: PUSH
37700: LD_VAR 0 1
37704: DIFF
37705: PPUSH
37706: LD_VAR 0 1
37710: PPUSH
37711: CALL_OW 74
37715: PPUSH
37716: CALL_OW 115
// wait ( 0 0$20 ) ;
37720: LD_INT 700
37722: PPUSH
37723: CALL_OW 67
// SetSide ( un , your_side ) ;
37727: LD_VAR 0 1
37731: PPUSH
37732: LD_OWVAR 2
37736: PPUSH
37737: CALL_OW 235
// end ;
37741: PPOPN 2
37743: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
37744: LD_EXP 81
37748: PUSH
37749: LD_EXP 114
37753: AND
37754: IFFALSE 37860
37756: GO 37758
37758: DISABLE
37759: LD_INT 0
37761: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37762: LD_ADDR_VAR 0 1
37766: PUSH
37767: LD_INT 22
37769: PUSH
37770: LD_OWVAR 2
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: LD_INT 30
37784: PUSH
37785: LD_INT 0
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 30
37794: PUSH
37795: LD_INT 1
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: LIST
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PPUSH
37811: CALL_OW 69
37815: ST_TO_ADDR
// if not depot then
37816: LD_VAR 0 1
37820: NOT
37821: IFFALSE 37825
// exit ;
37823: GO 37860
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
37825: LD_VAR 0 1
37829: PUSH
37830: LD_INT 1
37832: ARRAY
37833: PPUSH
37834: CALL_OW 250
37838: PPUSH
37839: LD_VAR 0 1
37843: PUSH
37844: LD_INT 1
37846: ARRAY
37847: PPUSH
37848: CALL_OW 251
37852: PPUSH
37853: LD_INT 70
37855: PPUSH
37856: CALL_OW 495
// end ;
37860: PPOPN 1
37862: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
37863: LD_EXP 81
37867: PUSH
37868: LD_EXP 115
37872: AND
37873: IFFALSE 38084
37875: GO 37877
37877: DISABLE
37878: LD_INT 0
37880: PPUSH
37881: PPUSH
37882: PPUSH
37883: PPUSH
37884: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37885: LD_ADDR_VAR 0 5
37889: PUSH
37890: LD_INT 22
37892: PUSH
37893: LD_OWVAR 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 21
37904: PUSH
37905: LD_INT 1
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: EMPTY
37913: LIST
37914: LIST
37915: PPUSH
37916: CALL_OW 69
37920: ST_TO_ADDR
// if not tmp then
37921: LD_VAR 0 5
37925: NOT
37926: IFFALSE 37930
// exit ;
37928: GO 38084
// for i in tmp do
37930: LD_ADDR_VAR 0 1
37934: PUSH
37935: LD_VAR 0 5
37939: PUSH
37940: FOR_IN
37941: IFFALSE 38082
// begin d := rand ( 0 , 5 ) ;
37943: LD_ADDR_VAR 0 4
37947: PUSH
37948: LD_INT 0
37950: PPUSH
37951: LD_INT 5
37953: PPUSH
37954: CALL_OW 12
37958: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
37959: LD_ADDR_VAR 0 2
37963: PUSH
37964: LD_VAR 0 1
37968: PPUSH
37969: CALL_OW 250
37973: PPUSH
37974: LD_VAR 0 4
37978: PPUSH
37979: LD_INT 3
37981: PPUSH
37982: LD_INT 12
37984: PPUSH
37985: CALL_OW 12
37989: PPUSH
37990: CALL_OW 272
37994: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
37995: LD_ADDR_VAR 0 3
37999: PUSH
38000: LD_VAR 0 1
38004: PPUSH
38005: CALL_OW 251
38009: PPUSH
38010: LD_VAR 0 4
38014: PPUSH
38015: LD_INT 3
38017: PPUSH
38018: LD_INT 12
38020: PPUSH
38021: CALL_OW 12
38025: PPUSH
38026: CALL_OW 273
38030: ST_TO_ADDR
// if ValidHex ( x , y ) then
38031: LD_VAR 0 2
38035: PPUSH
38036: LD_VAR 0 3
38040: PPUSH
38041: CALL_OW 488
38045: IFFALSE 38080
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
38047: LD_VAR 0 1
38051: PPUSH
38052: LD_VAR 0 2
38056: PPUSH
38057: LD_VAR 0 3
38061: PPUSH
38062: LD_INT 3
38064: PPUSH
38065: LD_INT 6
38067: PPUSH
38068: CALL_OW 12
38072: PPUSH
38073: LD_INT 1
38075: PPUSH
38076: CALL_OW 483
// end ;
38080: GO 37940
38082: POP
38083: POP
// end ;
38084: PPOPN 5
38086: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
38087: LD_EXP 81
38091: PUSH
38092: LD_EXP 116
38096: AND
38097: IFFALSE 38191
38099: GO 38101
38101: DISABLE
38102: LD_INT 0
38104: PPUSH
38105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
38106: LD_ADDR_VAR 0 2
38110: PUSH
38111: LD_INT 22
38113: PUSH
38114: LD_OWVAR 2
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 32
38125: PUSH
38126: LD_INT 1
38128: PUSH
38129: EMPTY
38130: LIST
38131: LIST
38132: PUSH
38133: LD_INT 21
38135: PUSH
38136: LD_INT 2
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: LIST
38147: PPUSH
38148: CALL_OW 69
38152: ST_TO_ADDR
// if not tmp then
38153: LD_VAR 0 2
38157: NOT
38158: IFFALSE 38162
// exit ;
38160: GO 38191
// for i in tmp do
38162: LD_ADDR_VAR 0 1
38166: PUSH
38167: LD_VAR 0 2
38171: PUSH
38172: FOR_IN
38173: IFFALSE 38189
// SetFuel ( i , 0 ) ;
38175: LD_VAR 0 1
38179: PPUSH
38180: LD_INT 0
38182: PPUSH
38183: CALL_OW 240
38187: GO 38172
38189: POP
38190: POP
// end ;
38191: PPOPN 2
38193: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
38194: LD_EXP 81
38198: PUSH
38199: LD_EXP 117
38203: AND
38204: IFFALSE 38270
38206: GO 38208
38208: DISABLE
38209: LD_INT 0
38211: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38212: LD_ADDR_VAR 0 1
38216: PUSH
38217: LD_INT 22
38219: PUSH
38220: LD_OWVAR 2
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 30
38231: PUSH
38232: LD_INT 29
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PPUSH
38243: CALL_OW 69
38247: ST_TO_ADDR
// if not tmp then
38248: LD_VAR 0 1
38252: NOT
38253: IFFALSE 38257
// exit ;
38255: GO 38270
// DestroyUnit ( tmp [ 1 ] ) ;
38257: LD_VAR 0 1
38261: PUSH
38262: LD_INT 1
38264: ARRAY
38265: PPUSH
38266: CALL_OW 65
// end ;
38270: PPOPN 1
38272: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
38273: LD_EXP 81
38277: PUSH
38278: LD_EXP 119
38282: AND
38283: IFFALSE 38412
38285: GO 38287
38287: DISABLE
38288: LD_INT 0
38290: PPUSH
// begin uc_side := 0 ;
38291: LD_ADDR_OWVAR 20
38295: PUSH
38296: LD_INT 0
38298: ST_TO_ADDR
// uc_nation := nation_arabian ;
38299: LD_ADDR_OWVAR 21
38303: PUSH
38304: LD_INT 2
38306: ST_TO_ADDR
// hc_gallery :=  ;
38307: LD_ADDR_OWVAR 33
38311: PUSH
38312: LD_STRING 
38314: ST_TO_ADDR
// hc_name :=  ;
38315: LD_ADDR_OWVAR 26
38319: PUSH
38320: LD_STRING 
38322: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
38323: LD_INT 1
38325: PPUSH
38326: LD_INT 11
38328: PPUSH
38329: LD_INT 10
38331: PPUSH
38332: CALL_OW 380
// un := CreateHuman ;
38336: LD_ADDR_VAR 0 1
38340: PUSH
38341: CALL_OW 44
38345: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38346: LD_VAR 0 1
38350: PPUSH
38351: LD_INT 1
38353: PPUSH
38354: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
38358: LD_INT 35
38360: PPUSH
38361: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
38365: LD_VAR 0 1
38369: PPUSH
38370: LD_INT 22
38372: PUSH
38373: LD_OWVAR 2
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PPUSH
38382: CALL_OW 69
38386: PPUSH
38387: LD_VAR 0 1
38391: PPUSH
38392: CALL_OW 74
38396: PPUSH
38397: CALL_OW 115
// until IsDead ( un ) ;
38401: LD_VAR 0 1
38405: PPUSH
38406: CALL_OW 301
38410: IFFALSE 38358
// end ;
38412: PPOPN 1
38414: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
38415: LD_EXP 81
38419: PUSH
38420: LD_EXP 121
38424: AND
38425: IFFALSE 38437
38427: GO 38429
38429: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
38430: LD_STRING earthquake(getX(game), 0, 32)
38432: PPUSH
38433: CALL_OW 559
38437: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
38438: LD_EXP 81
38442: PUSH
38443: LD_EXP 122
38447: AND
38448: IFFALSE 38539
38450: GO 38452
38452: DISABLE
38453: LD_INT 0
38455: PPUSH
// begin enable ;
38456: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
38457: LD_ADDR_VAR 0 1
38461: PUSH
38462: LD_INT 22
38464: PUSH
38465: LD_OWVAR 2
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 21
38476: PUSH
38477: LD_INT 2
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 33
38486: PUSH
38487: LD_INT 3
38489: PUSH
38490: EMPTY
38491: LIST
38492: LIST
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: LIST
38498: PPUSH
38499: CALL_OW 69
38503: ST_TO_ADDR
// if not tmp then
38504: LD_VAR 0 1
38508: NOT
38509: IFFALSE 38513
// exit ;
38511: GO 38539
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38513: LD_VAR 0 1
38517: PUSH
38518: LD_INT 1
38520: PPUSH
38521: LD_VAR 0 1
38525: PPUSH
38526: CALL_OW 12
38530: ARRAY
38531: PPUSH
38532: LD_INT 1
38534: PPUSH
38535: CALL_OW 234
// end ;
38539: PPOPN 1
38541: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
38542: LD_EXP 81
38546: PUSH
38547: LD_EXP 123
38551: AND
38552: IFFALSE 38693
38554: GO 38556
38556: DISABLE
38557: LD_INT 0
38559: PPUSH
38560: PPUSH
38561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38562: LD_ADDR_VAR 0 3
38566: PUSH
38567: LD_INT 22
38569: PUSH
38570: LD_OWVAR 2
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 25
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: EMPTY
38590: LIST
38591: LIST
38592: PPUSH
38593: CALL_OW 69
38597: ST_TO_ADDR
// if not tmp then
38598: LD_VAR 0 3
38602: NOT
38603: IFFALSE 38607
// exit ;
38605: GO 38693
// un := tmp [ rand ( 1 , tmp ) ] ;
38607: LD_ADDR_VAR 0 2
38611: PUSH
38612: LD_VAR 0 3
38616: PUSH
38617: LD_INT 1
38619: PPUSH
38620: LD_VAR 0 3
38624: PPUSH
38625: CALL_OW 12
38629: ARRAY
38630: ST_TO_ADDR
// if Crawls ( un ) then
38631: LD_VAR 0 2
38635: PPUSH
38636: CALL_OW 318
38640: IFFALSE 38651
// ComWalk ( un ) ;
38642: LD_VAR 0 2
38646: PPUSH
38647: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
38651: LD_VAR 0 2
38655: PPUSH
38656: LD_INT 9
38658: PPUSH
38659: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
38663: LD_INT 28
38665: PPUSH
38666: LD_OWVAR 2
38670: PPUSH
38671: LD_INT 2
38673: PPUSH
38674: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
38678: LD_INT 29
38680: PPUSH
38681: LD_OWVAR 2
38685: PPUSH
38686: LD_INT 2
38688: PPUSH
38689: CALL_OW 322
// end ;
38693: PPOPN 3
38695: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
38696: LD_EXP 81
38700: PUSH
38701: LD_EXP 124
38705: AND
38706: IFFALSE 38817
38708: GO 38710
38710: DISABLE
38711: LD_INT 0
38713: PPUSH
38714: PPUSH
38715: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38716: LD_ADDR_VAR 0 3
38720: PUSH
38721: LD_INT 22
38723: PUSH
38724: LD_OWVAR 2
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 25
38735: PUSH
38736: LD_INT 1
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PPUSH
38747: CALL_OW 69
38751: ST_TO_ADDR
// if not tmp then
38752: LD_VAR 0 3
38756: NOT
38757: IFFALSE 38761
// exit ;
38759: GO 38817
// un := tmp [ rand ( 1 , tmp ) ] ;
38761: LD_ADDR_VAR 0 2
38765: PUSH
38766: LD_VAR 0 3
38770: PUSH
38771: LD_INT 1
38773: PPUSH
38774: LD_VAR 0 3
38778: PPUSH
38779: CALL_OW 12
38783: ARRAY
38784: ST_TO_ADDR
// if Crawls ( un ) then
38785: LD_VAR 0 2
38789: PPUSH
38790: CALL_OW 318
38794: IFFALSE 38805
// ComWalk ( un ) ;
38796: LD_VAR 0 2
38800: PPUSH
38801: CALL_OW 138
// SetClass ( un , class_mortar ) ;
38805: LD_VAR 0 2
38809: PPUSH
38810: LD_INT 8
38812: PPUSH
38813: CALL_OW 336
// end ;
38817: PPOPN 3
38819: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
38820: LD_EXP 81
38824: PUSH
38825: LD_EXP 125
38829: AND
38830: IFFALSE 38974
38832: GO 38834
38834: DISABLE
38835: LD_INT 0
38837: PPUSH
38838: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
38839: LD_ADDR_VAR 0 2
38843: PUSH
38844: LD_INT 22
38846: PUSH
38847: LD_OWVAR 2
38851: PUSH
38852: EMPTY
38853: LIST
38854: LIST
38855: PUSH
38856: LD_INT 21
38858: PUSH
38859: LD_INT 2
38861: PUSH
38862: EMPTY
38863: LIST
38864: LIST
38865: PUSH
38866: LD_INT 2
38868: PUSH
38869: LD_INT 34
38871: PUSH
38872: LD_INT 12
38874: PUSH
38875: EMPTY
38876: LIST
38877: LIST
38878: PUSH
38879: LD_INT 34
38881: PUSH
38882: LD_INT 51
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 34
38891: PUSH
38892: LD_INT 32
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: LIST
38909: PPUSH
38910: CALL_OW 69
38914: ST_TO_ADDR
// if not tmp then
38915: LD_VAR 0 2
38919: NOT
38920: IFFALSE 38924
// exit ;
38922: GO 38974
// for i in tmp do
38924: LD_ADDR_VAR 0 1
38928: PUSH
38929: LD_VAR 0 2
38933: PUSH
38934: FOR_IN
38935: IFFALSE 38972
// if GetCargo ( i , mat_artifact ) = 0 then
38937: LD_VAR 0 1
38941: PPUSH
38942: LD_INT 4
38944: PPUSH
38945: CALL_OW 289
38949: PUSH
38950: LD_INT 0
38952: EQUAL
38953: IFFALSE 38970
// SetCargo ( i , mat_siberit , 100 ) ;
38955: LD_VAR 0 1
38959: PPUSH
38960: LD_INT 3
38962: PPUSH
38963: LD_INT 100
38965: PPUSH
38966: CALL_OW 290
38970: GO 38934
38972: POP
38973: POP
// end ;
38974: PPOPN 2
38976: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
38977: LD_EXP 81
38981: PUSH
38982: LD_EXP 126
38986: AND
38987: IFFALSE 39170
38989: GO 38991
38991: DISABLE
38992: LD_INT 0
38994: PPUSH
38995: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
38996: LD_ADDR_VAR 0 2
39000: PUSH
39001: LD_INT 22
39003: PUSH
39004: LD_OWVAR 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PPUSH
39013: CALL_OW 69
39017: ST_TO_ADDR
// if not tmp then
39018: LD_VAR 0 2
39022: NOT
39023: IFFALSE 39027
// exit ;
39025: GO 39170
// for i := 1 to 2 do
39027: LD_ADDR_VAR 0 1
39031: PUSH
39032: DOUBLE
39033: LD_INT 1
39035: DEC
39036: ST_TO_ADDR
39037: LD_INT 2
39039: PUSH
39040: FOR_TO
39041: IFFALSE 39168
// begin uc_side := your_side ;
39043: LD_ADDR_OWVAR 20
39047: PUSH
39048: LD_OWVAR 2
39052: ST_TO_ADDR
// uc_nation := nation_american ;
39053: LD_ADDR_OWVAR 21
39057: PUSH
39058: LD_INT 1
39060: ST_TO_ADDR
// vc_chassis := us_morphling ;
39061: LD_ADDR_OWVAR 37
39065: PUSH
39066: LD_INT 5
39068: ST_TO_ADDR
// vc_engine := engine_siberite ;
39069: LD_ADDR_OWVAR 39
39073: PUSH
39074: LD_INT 3
39076: ST_TO_ADDR
// vc_control := control_computer ;
39077: LD_ADDR_OWVAR 38
39081: PUSH
39082: LD_INT 3
39084: ST_TO_ADDR
// vc_weapon := us_double_laser ;
39085: LD_ADDR_OWVAR 40
39089: PUSH
39090: LD_INT 10
39092: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
39093: LD_VAR 0 2
39097: PUSH
39098: LD_INT 1
39100: ARRAY
39101: PPUSH
39102: CALL_OW 310
39106: NOT
39107: IFFALSE 39154
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
39109: CALL_OW 45
39113: PPUSH
39114: LD_VAR 0 2
39118: PUSH
39119: LD_INT 1
39121: ARRAY
39122: PPUSH
39123: CALL_OW 250
39127: PPUSH
39128: LD_VAR 0 2
39132: PUSH
39133: LD_INT 1
39135: ARRAY
39136: PPUSH
39137: CALL_OW 251
39141: PPUSH
39142: LD_INT 12
39144: PPUSH
39145: LD_INT 1
39147: PPUSH
39148: CALL_OW 50
39152: GO 39166
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
39154: CALL_OW 45
39158: PPUSH
39159: LD_INT 1
39161: PPUSH
39162: CALL_OW 51
// end ;
39166: GO 39040
39168: POP
39169: POP
// end ;
39170: PPOPN 2
39172: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
39173: LD_EXP 81
39177: PUSH
39178: LD_EXP 127
39182: AND
39183: IFFALSE 39405
39185: GO 39187
39187: DISABLE
39188: LD_INT 0
39190: PPUSH
39191: PPUSH
39192: PPUSH
39193: PPUSH
39194: PPUSH
39195: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39196: LD_ADDR_VAR 0 6
39200: PUSH
39201: LD_INT 22
39203: PUSH
39204: LD_OWVAR 2
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: PUSH
39213: LD_INT 21
39215: PUSH
39216: LD_INT 1
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 3
39225: PUSH
39226: LD_INT 23
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: LIST
39244: PPUSH
39245: CALL_OW 69
39249: ST_TO_ADDR
// if not tmp then
39250: LD_VAR 0 6
39254: NOT
39255: IFFALSE 39259
// exit ;
39257: GO 39405
// s1 := rand ( 1 , 4 ) ;
39259: LD_ADDR_VAR 0 2
39263: PUSH
39264: LD_INT 1
39266: PPUSH
39267: LD_INT 4
39269: PPUSH
39270: CALL_OW 12
39274: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
39275: LD_ADDR_VAR 0 4
39279: PUSH
39280: LD_VAR 0 6
39284: PUSH
39285: LD_INT 1
39287: ARRAY
39288: PPUSH
39289: LD_VAR 0 2
39293: PPUSH
39294: CALL_OW 259
39298: ST_TO_ADDR
// if s1 = 1 then
39299: LD_VAR 0 2
39303: PUSH
39304: LD_INT 1
39306: EQUAL
39307: IFFALSE 39327
// s2 := rand ( 2 , 4 ) else
39309: LD_ADDR_VAR 0 3
39313: PUSH
39314: LD_INT 2
39316: PPUSH
39317: LD_INT 4
39319: PPUSH
39320: CALL_OW 12
39324: ST_TO_ADDR
39325: GO 39335
// s2 := 1 ;
39327: LD_ADDR_VAR 0 3
39331: PUSH
39332: LD_INT 1
39334: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
39335: LD_ADDR_VAR 0 5
39339: PUSH
39340: LD_VAR 0 6
39344: PUSH
39345: LD_INT 1
39347: ARRAY
39348: PPUSH
39349: LD_VAR 0 3
39353: PPUSH
39354: CALL_OW 259
39358: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
39359: LD_VAR 0 6
39363: PUSH
39364: LD_INT 1
39366: ARRAY
39367: PPUSH
39368: LD_VAR 0 2
39372: PPUSH
39373: LD_VAR 0 5
39377: PPUSH
39378: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
39382: LD_VAR 0 6
39386: PUSH
39387: LD_INT 1
39389: ARRAY
39390: PPUSH
39391: LD_VAR 0 3
39395: PPUSH
39396: LD_VAR 0 4
39400: PPUSH
39401: CALL_OW 237
// end ;
39405: PPOPN 6
39407: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
39408: LD_EXP 81
39412: PUSH
39413: LD_EXP 128
39417: AND
39418: IFFALSE 39497
39420: GO 39422
39422: DISABLE
39423: LD_INT 0
39425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
39426: LD_ADDR_VAR 0 1
39430: PUSH
39431: LD_INT 22
39433: PUSH
39434: LD_OWVAR 2
39438: PUSH
39439: EMPTY
39440: LIST
39441: LIST
39442: PUSH
39443: LD_INT 30
39445: PUSH
39446: LD_INT 3
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PPUSH
39457: CALL_OW 69
39461: ST_TO_ADDR
// if not tmp then
39462: LD_VAR 0 1
39466: NOT
39467: IFFALSE 39471
// exit ;
39469: GO 39497
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39471: LD_VAR 0 1
39475: PUSH
39476: LD_INT 1
39478: PPUSH
39479: LD_VAR 0 1
39483: PPUSH
39484: CALL_OW 12
39488: ARRAY
39489: PPUSH
39490: LD_INT 1
39492: PPUSH
39493: CALL_OW 234
// end ;
39497: PPOPN 1
39499: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
39500: LD_EXP 81
39504: PUSH
39505: LD_EXP 129
39509: AND
39510: IFFALSE 39622
39512: GO 39514
39514: DISABLE
39515: LD_INT 0
39517: PPUSH
39518: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
39519: LD_ADDR_VAR 0 2
39523: PUSH
39524: LD_INT 22
39526: PUSH
39527: LD_OWVAR 2
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 2
39538: PUSH
39539: LD_INT 30
39541: PUSH
39542: LD_INT 27
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 30
39551: PUSH
39552: LD_INT 26
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 30
39561: PUSH
39562: LD_INT 28
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: LIST
39573: LIST
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: PPUSH
39579: CALL_OW 69
39583: ST_TO_ADDR
// if not tmp then
39584: LD_VAR 0 2
39588: NOT
39589: IFFALSE 39593
// exit ;
39591: GO 39622
// for i in tmp do
39593: LD_ADDR_VAR 0 1
39597: PUSH
39598: LD_VAR 0 2
39602: PUSH
39603: FOR_IN
39604: IFFALSE 39620
// SetLives ( i , 1 ) ;
39606: LD_VAR 0 1
39610: PPUSH
39611: LD_INT 1
39613: PPUSH
39614: CALL_OW 234
39618: GO 39603
39620: POP
39621: POP
// end ;
39622: PPOPN 2
39624: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
39625: LD_EXP 81
39629: PUSH
39630: LD_EXP 130
39634: AND
39635: IFFALSE 39909
39637: GO 39639
39639: DISABLE
39640: LD_INT 0
39642: PPUSH
39643: PPUSH
39644: PPUSH
// begin i := rand ( 1 , 7 ) ;
39645: LD_ADDR_VAR 0 1
39649: PUSH
39650: LD_INT 1
39652: PPUSH
39653: LD_INT 7
39655: PPUSH
39656: CALL_OW 12
39660: ST_TO_ADDR
// case i of 1 :
39661: LD_VAR 0 1
39665: PUSH
39666: LD_INT 1
39668: DOUBLE
39669: EQUAL
39670: IFTRUE 39674
39672: GO 39684
39674: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
39675: LD_STRING earthquake(getX(game), 0, 32)
39677: PPUSH
39678: CALL_OW 559
39682: GO 39909
39684: LD_INT 2
39686: DOUBLE
39687: EQUAL
39688: IFTRUE 39692
39690: GO 39706
39692: POP
// begin ToLua ( displayStucuk(); ) ;
39693: LD_STRING displayStucuk();
39695: PPUSH
39696: CALL_OW 559
// ResetFog ;
39700: CALL_OW 335
// end ; 3 :
39704: GO 39909
39706: LD_INT 3
39708: DOUBLE
39709: EQUAL
39710: IFTRUE 39714
39712: GO 39818
39714: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39715: LD_ADDR_VAR 0 2
39719: PUSH
39720: LD_INT 22
39722: PUSH
39723: LD_OWVAR 2
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 25
39734: PUSH
39735: LD_INT 1
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PPUSH
39746: CALL_OW 69
39750: ST_TO_ADDR
// if not tmp then
39751: LD_VAR 0 2
39755: NOT
39756: IFFALSE 39760
// exit ;
39758: GO 39909
// un := tmp [ rand ( 1 , tmp ) ] ;
39760: LD_ADDR_VAR 0 3
39764: PUSH
39765: LD_VAR 0 2
39769: PUSH
39770: LD_INT 1
39772: PPUSH
39773: LD_VAR 0 2
39777: PPUSH
39778: CALL_OW 12
39782: ARRAY
39783: ST_TO_ADDR
// if Crawls ( un ) then
39784: LD_VAR 0 3
39788: PPUSH
39789: CALL_OW 318
39793: IFFALSE 39804
// ComWalk ( un ) ;
39795: LD_VAR 0 3
39799: PPUSH
39800: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39804: LD_VAR 0 3
39808: PPUSH
39809: LD_INT 8
39811: PPUSH
39812: CALL_OW 336
// end ; 4 :
39816: GO 39909
39818: LD_INT 4
39820: DOUBLE
39821: EQUAL
39822: IFTRUE 39826
39824: GO 39887
39826: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39827: LD_ADDR_VAR 0 2
39831: PUSH
39832: LD_INT 22
39834: PUSH
39835: LD_OWVAR 2
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 30
39846: PUSH
39847: LD_INT 29
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PPUSH
39858: CALL_OW 69
39862: ST_TO_ADDR
// if not tmp then
39863: LD_VAR 0 2
39867: NOT
39868: IFFALSE 39872
// exit ;
39870: GO 39909
// DestroyUnit ( tmp [ 1 ] ) ;
39872: LD_VAR 0 2
39876: PUSH
39877: LD_INT 1
39879: ARRAY
39880: PPUSH
39881: CALL_OW 65
// end ; 5 .. 7 :
39885: GO 39909
39887: LD_INT 5
39889: DOUBLE
39890: GREATEREQUAL
39891: IFFALSE 39899
39893: LD_INT 7
39895: DOUBLE
39896: LESSEQUAL
39897: IFTRUE 39901
39899: GO 39908
39901: POP
// StreamSibBomb ; end ;
39902: CALL 36159 0 0
39906: GO 39909
39908: POP
// end ;
39909: PPOPN 3
39911: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
39912: LD_EXP 81
39916: PUSH
39917: LD_EXP 131
39921: AND
39922: IFFALSE 40078
39924: GO 39926
39926: DISABLE
39927: LD_INT 0
39929: PPUSH
39930: PPUSH
39931: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
39932: LD_ADDR_VAR 0 2
39936: PUSH
39937: LD_INT 81
39939: PUSH
39940: LD_OWVAR 2
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: LD_INT 21
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 21
39964: PUSH
39965: LD_INT 2
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: LIST
39976: PUSH
39977: EMPTY
39978: LIST
39979: LIST
39980: PPUSH
39981: CALL_OW 69
39985: ST_TO_ADDR
// if not tmp then
39986: LD_VAR 0 2
39990: NOT
39991: IFFALSE 39995
// exit ;
39993: GO 40078
// p := 0 ;
39995: LD_ADDR_VAR 0 3
39999: PUSH
40000: LD_INT 0
40002: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40003: LD_INT 35
40005: PPUSH
40006: CALL_OW 67
// p := p + 1 ;
40010: LD_ADDR_VAR 0 3
40014: PUSH
40015: LD_VAR 0 3
40019: PUSH
40020: LD_INT 1
40022: PLUS
40023: ST_TO_ADDR
// for i in tmp do
40024: LD_ADDR_VAR 0 1
40028: PUSH
40029: LD_VAR 0 2
40033: PUSH
40034: FOR_IN
40035: IFFALSE 40066
// if GetLives ( i ) < 1000 then
40037: LD_VAR 0 1
40041: PPUSH
40042: CALL_OW 256
40046: PUSH
40047: LD_INT 1000
40049: LESS
40050: IFFALSE 40064
// SetLives ( i , 1000 ) ;
40052: LD_VAR 0 1
40056: PPUSH
40057: LD_INT 1000
40059: PPUSH
40060: CALL_OW 234
40064: GO 40034
40066: POP
40067: POP
// until p > 20 ;
40068: LD_VAR 0 3
40072: PUSH
40073: LD_INT 20
40075: GREATER
40076: IFFALSE 40003
// end ;
40078: PPOPN 3
40080: END
// every 0 0$1 trigger StreamModeActive and sTime do
40081: LD_EXP 81
40085: PUSH
40086: LD_EXP 132
40090: AND
40091: IFFALSE 40126
40093: GO 40095
40095: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
40096: LD_INT 28
40098: PPUSH
40099: LD_OWVAR 2
40103: PPUSH
40104: LD_INT 2
40106: PPUSH
40107: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
40111: LD_INT 30
40113: PPUSH
40114: LD_OWVAR 2
40118: PPUSH
40119: LD_INT 2
40121: PPUSH
40122: CALL_OW 322
// end ;
40126: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
40127: LD_EXP 81
40131: PUSH
40132: LD_EXP 133
40136: AND
40137: IFFALSE 40258
40139: GO 40141
40141: DISABLE
40142: LD_INT 0
40144: PPUSH
40145: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40146: LD_ADDR_VAR 0 2
40150: PUSH
40151: LD_INT 22
40153: PUSH
40154: LD_OWVAR 2
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 21
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 3
40175: PUSH
40176: LD_INT 23
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: EMPTY
40187: LIST
40188: LIST
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: LIST
40194: PPUSH
40195: CALL_OW 69
40199: ST_TO_ADDR
// if not tmp then
40200: LD_VAR 0 2
40204: NOT
40205: IFFALSE 40209
// exit ;
40207: GO 40258
// for i in tmp do
40209: LD_ADDR_VAR 0 1
40213: PUSH
40214: LD_VAR 0 2
40218: PUSH
40219: FOR_IN
40220: IFFALSE 40256
// begin if Crawls ( i ) then
40222: LD_VAR 0 1
40226: PPUSH
40227: CALL_OW 318
40231: IFFALSE 40242
// ComWalk ( i ) ;
40233: LD_VAR 0 1
40237: PPUSH
40238: CALL_OW 138
// SetClass ( i , 2 ) ;
40242: LD_VAR 0 1
40246: PPUSH
40247: LD_INT 2
40249: PPUSH
40250: CALL_OW 336
// end ;
40254: GO 40219
40256: POP
40257: POP
// end ;
40258: PPOPN 2
40260: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
40261: LD_EXP 81
40265: PUSH
40266: LD_EXP 134
40270: AND
40271: IFFALSE 40552
40273: GO 40275
40275: DISABLE
40276: LD_INT 0
40278: PPUSH
40279: PPUSH
40280: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
40281: LD_OWVAR 2
40285: PPUSH
40286: LD_INT 9
40288: PPUSH
40289: LD_INT 1
40291: PPUSH
40292: LD_INT 1
40294: PPUSH
40295: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
40299: LD_INT 9
40301: PPUSH
40302: LD_OWVAR 2
40306: PPUSH
40307: CALL_OW 343
// uc_side := 9 ;
40311: LD_ADDR_OWVAR 20
40315: PUSH
40316: LD_INT 9
40318: ST_TO_ADDR
// uc_nation := 2 ;
40319: LD_ADDR_OWVAR 21
40323: PUSH
40324: LD_INT 2
40326: ST_TO_ADDR
// hc_name := Dark Warrior ;
40327: LD_ADDR_OWVAR 26
40331: PUSH
40332: LD_STRING Dark Warrior
40334: ST_TO_ADDR
// hc_gallery :=  ;
40335: LD_ADDR_OWVAR 33
40339: PUSH
40340: LD_STRING 
40342: ST_TO_ADDR
// hc_noskilllimit := true ;
40343: LD_ADDR_OWVAR 76
40347: PUSH
40348: LD_INT 1
40350: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
40351: LD_ADDR_OWVAR 31
40355: PUSH
40356: LD_INT 30
40358: PUSH
40359: LD_INT 30
40361: PUSH
40362: LD_INT 30
40364: PUSH
40365: LD_INT 30
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: ST_TO_ADDR
// un := CreateHuman ;
40374: LD_ADDR_VAR 0 3
40378: PUSH
40379: CALL_OW 44
40383: ST_TO_ADDR
// hc_noskilllimit := false ;
40384: LD_ADDR_OWVAR 76
40388: PUSH
40389: LD_INT 0
40391: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40392: LD_VAR 0 3
40396: PPUSH
40397: LD_INT 1
40399: PPUSH
40400: CALL_OW 51
// p := 0 ;
40404: LD_ADDR_VAR 0 2
40408: PUSH
40409: LD_INT 0
40411: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40412: LD_INT 35
40414: PPUSH
40415: CALL_OW 67
// p := p + 1 ;
40419: LD_ADDR_VAR 0 2
40423: PUSH
40424: LD_VAR 0 2
40428: PUSH
40429: LD_INT 1
40431: PLUS
40432: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
40433: LD_VAR 0 3
40437: PPUSH
40438: CALL_OW 256
40442: PUSH
40443: LD_INT 1000
40445: LESS
40446: IFFALSE 40460
// SetLives ( un , 1000 ) ;
40448: LD_VAR 0 3
40452: PPUSH
40453: LD_INT 1000
40455: PPUSH
40456: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
40460: LD_VAR 0 3
40464: PPUSH
40465: LD_INT 81
40467: PUSH
40468: LD_OWVAR 2
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 91
40479: PUSH
40480: LD_VAR 0 3
40484: PUSH
40485: LD_INT 30
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: LIST
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PPUSH
40497: CALL_OW 69
40501: PPUSH
40502: LD_VAR 0 3
40506: PPUSH
40507: CALL_OW 74
40511: PPUSH
40512: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
40516: LD_VAR 0 2
40520: PUSH
40521: LD_INT 60
40523: GREATER
40524: PUSH
40525: LD_VAR 0 3
40529: PPUSH
40530: CALL_OW 301
40534: OR
40535: IFFALSE 40412
// if un then
40537: LD_VAR 0 3
40541: IFFALSE 40552
// RemoveUnit ( un ) ;
40543: LD_VAR 0 3
40547: PPUSH
40548: CALL_OW 64
// end ; end_of_file
40552: PPOPN 3
40554: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
40555: LD_INT 0
40557: PPUSH
40558: PPUSH
40559: PPUSH
40560: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
40561: LD_VAR 0 1
40565: PPUSH
40566: CALL_OW 264
40570: PUSH
40571: LD_EXP 71
40575: EQUAL
40576: IFFALSE 40648
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
40578: LD_INT 68
40580: PPUSH
40581: LD_VAR 0 1
40585: PPUSH
40586: CALL_OW 255
40590: PPUSH
40591: CALL_OW 321
40595: PUSH
40596: LD_INT 2
40598: EQUAL
40599: IFFALSE 40611
// eff := 70 else
40601: LD_ADDR_VAR 0 4
40605: PUSH
40606: LD_INT 70
40608: ST_TO_ADDR
40609: GO 40619
// eff := 30 ;
40611: LD_ADDR_VAR 0 4
40615: PUSH
40616: LD_INT 30
40618: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
40619: LD_VAR 0 1
40623: PPUSH
40624: CALL_OW 250
40628: PPUSH
40629: LD_VAR 0 1
40633: PPUSH
40634: CALL_OW 251
40638: PPUSH
40639: LD_VAR 0 4
40643: PPUSH
40644: CALL_OW 495
// end ; end ;
40648: LD_VAR 0 2
40652: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
40653: LD_INT 0
40655: PPUSH
// end ;
40656: LD_VAR 0 4
40660: RET
// export function SOS_Command ( cmd ) ; begin
40661: LD_INT 0
40663: PPUSH
// end ;
40664: LD_VAR 0 2
40668: RET
// on TargetableSAIL ( cmd , unit , selectedunit , x , y ) do begin if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
40669: LD_VAR 0 1
40673: PUSH
40674: LD_INT 255
40676: EQUAL
40677: PUSH
40678: LD_VAR 0 2
40682: PPUSH
40683: CALL_OW 264
40687: PUSH
40688: LD_INT 14
40690: PUSH
40691: LD_INT 53
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: IN
40698: AND
40699: PUSH
40700: LD_VAR 0 4
40704: PPUSH
40705: LD_VAR 0 5
40709: PPUSH
40710: CALL_OW 488
40714: AND
40715: IFFALSE 40739
// CutTreeXYR ( unit , x , y , 12 ) ;
40717: LD_VAR 0 2
40721: PPUSH
40722: LD_VAR 0 4
40726: PPUSH
40727: LD_VAR 0 5
40731: PPUSH
40732: LD_INT 12
40734: PPUSH
40735: CALL 40742 0 4
// end ;
40739: PPOPN 5
40741: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
40742: LD_INT 0
40744: PPUSH
40745: PPUSH
40746: PPUSH
40747: PPUSH
40748: PPUSH
40749: PPUSH
40750: PPUSH
40751: PPUSH
40752: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
40753: LD_VAR 0 1
40757: NOT
40758: PUSH
40759: LD_VAR 0 2
40763: PPUSH
40764: LD_VAR 0 3
40768: PPUSH
40769: CALL_OW 488
40773: NOT
40774: OR
40775: PUSH
40776: LD_VAR 0 4
40780: NOT
40781: OR
40782: IFFALSE 40786
// exit ;
40784: GO 41126
// list := [ ] ;
40786: LD_ADDR_VAR 0 13
40790: PUSH
40791: EMPTY
40792: ST_TO_ADDR
// if x - r < 0 then
40793: LD_VAR 0 2
40797: PUSH
40798: LD_VAR 0 4
40802: MINUS
40803: PUSH
40804: LD_INT 0
40806: LESS
40807: IFFALSE 40819
// min_x := 0 else
40809: LD_ADDR_VAR 0 7
40813: PUSH
40814: LD_INT 0
40816: ST_TO_ADDR
40817: GO 40835
// min_x := x - r ;
40819: LD_ADDR_VAR 0 7
40823: PUSH
40824: LD_VAR 0 2
40828: PUSH
40829: LD_VAR 0 4
40833: MINUS
40834: ST_TO_ADDR
// if y - r < 0 then
40835: LD_VAR 0 3
40839: PUSH
40840: LD_VAR 0 4
40844: MINUS
40845: PUSH
40846: LD_INT 0
40848: LESS
40849: IFFALSE 40861
// min_y := 0 else
40851: LD_ADDR_VAR 0 8
40855: PUSH
40856: LD_INT 0
40858: ST_TO_ADDR
40859: GO 40877
// min_y := y - r ;
40861: LD_ADDR_VAR 0 8
40865: PUSH
40866: LD_VAR 0 3
40870: PUSH
40871: LD_VAR 0 4
40875: MINUS
40876: ST_TO_ADDR
// max_x := x + r ;
40877: LD_ADDR_VAR 0 9
40881: PUSH
40882: LD_VAR 0 2
40886: PUSH
40887: LD_VAR 0 4
40891: PLUS
40892: ST_TO_ADDR
// max_y := y + r ;
40893: LD_ADDR_VAR 0 10
40897: PUSH
40898: LD_VAR 0 3
40902: PUSH
40903: LD_VAR 0 4
40907: PLUS
40908: ST_TO_ADDR
// for _x = min_x to max_x do
40909: LD_ADDR_VAR 0 11
40913: PUSH
40914: DOUBLE
40915: LD_VAR 0 7
40919: DEC
40920: ST_TO_ADDR
40921: LD_VAR 0 9
40925: PUSH
40926: FOR_TO
40927: IFFALSE 41044
// for _y = min_y to max_y do
40929: LD_ADDR_VAR 0 12
40933: PUSH
40934: DOUBLE
40935: LD_VAR 0 8
40939: DEC
40940: ST_TO_ADDR
40941: LD_VAR 0 10
40945: PUSH
40946: FOR_TO
40947: IFFALSE 41040
// begin if not ValidHex ( _x , _y ) then
40949: LD_VAR 0 11
40953: PPUSH
40954: LD_VAR 0 12
40958: PPUSH
40959: CALL_OW 488
40963: NOT
40964: IFFALSE 40968
// continue ;
40966: GO 40946
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
40968: LD_VAR 0 11
40972: PPUSH
40973: LD_VAR 0 12
40977: PPUSH
40978: CALL_OW 351
40982: PUSH
40983: LD_VAR 0 11
40987: PPUSH
40988: LD_VAR 0 12
40992: PPUSH
40993: CALL_OW 554
40997: AND
40998: IFFALSE 41038
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
41000: LD_ADDR_VAR 0 13
41004: PUSH
41005: LD_VAR 0 13
41009: PPUSH
41010: LD_VAR 0 13
41014: PUSH
41015: LD_INT 1
41017: PLUS
41018: PPUSH
41019: LD_VAR 0 11
41023: PUSH
41024: LD_VAR 0 12
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PPUSH
41033: CALL_OW 2
41037: ST_TO_ADDR
// end ;
41038: GO 40946
41040: POP
41041: POP
41042: GO 40926
41044: POP
41045: POP
// if not list then
41046: LD_VAR 0 13
41050: NOT
41051: IFFALSE 41055
// exit ;
41053: GO 41126
// for i in list do
41055: LD_ADDR_VAR 0 6
41059: PUSH
41060: LD_VAR 0 13
41064: PUSH
41065: FOR_IN
41066: IFFALSE 41124
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
41068: LD_VAR 0 1
41072: PPUSH
41073: LD_STRING M
41075: PUSH
41076: LD_VAR 0 6
41080: PUSH
41081: LD_INT 1
41083: ARRAY
41084: PUSH
41085: LD_VAR 0 6
41089: PUSH
41090: LD_INT 2
41092: ARRAY
41093: PUSH
41094: LD_INT 0
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: LD_INT 0
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: PUSH
41115: EMPTY
41116: LIST
41117: PPUSH
41118: CALL_OW 447
41122: GO 41065
41124: POP
41125: POP
// end ;
41126: LD_VAR 0 5
41130: RET
