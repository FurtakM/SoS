// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3401 0 0
// PrepareAmerican ;
  37: CALL 1011 0 0
// PrepareRussian ;
  41: CALL 8706 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 89542 0 9
// Action ;
  97: CALL 25319 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: PUSH
 364: LD_EXP 4
 368: NOT
 369: AND
 370: PUSH
 371: LD_EXP 19
 375: AND
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 3
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PPUSH
 387: CALL_OW 69
 391: PUSH
 392: LD_INT 0
 394: EQUAL
 395: AND
 396: IFFALSE 408
 398: GO 400
 400: DISABLE
// SetAchievement ( ACH_POWER ) ;
 401: LD_STRING ACH_POWER
 403: PPUSH
 404: CALL_OW 543
 408: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 409: LD_EXP 19
 413: PUSH
 414: LD_EXP 68
 418: NOT
 419: AND
 420: PUSH
 421: LD_EXP 69
 425: NOT
 426: AND
 427: PUSH
 428: LD_INT 22
 430: PUSH
 431: LD_INT 3
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PPUSH
 438: CALL_OW 69
 442: PUSH
 443: LD_INT 0
 445: EQUAL
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_TACT ) ;
 452: LD_STRING ACH_TACT
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 30
 501: PUSH
 502: LD_INT 32
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PPUSH
 513: CALL_OW 69
 517: AND
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 30
 531: PUSH
 532: LD_INT 33
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PPUSH
 543: CALL_OW 69
 547: AND
 548: PUSH
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 30
 561: PUSH
 562: LD_INT 5
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: AND
 578: PUSH
 579: LD_INT 22
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 30
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PPUSH
 603: CALL_OW 69
 607: AND
 608: PUSH
 609: LD_INT 22
 611: PUSH
 612: LD_INT 1
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 30
 621: PUSH
 622: LD_INT 36
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PPUSH
 633: CALL_OW 69
 637: AND
 638: PUSH
 639: LD_INT 22
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 30
 651: PUSH
 652: LD_INT 31
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PPUSH
 663: CALL_OW 69
 667: AND
 668: PUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 1
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 30
 681: PUSH
 682: LD_INT 22
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PPUSH
 693: CALL_OW 69
 697: AND
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: LD_INT 30
 711: PUSH
 712: LD_INT 20
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PPUSH
 723: CALL_OW 69
 727: AND
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 30
 741: PUSH
 742: LD_INT 19
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: AND
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 16
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: PUSH
 789: LD_INT 22
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 30
 801: PUSH
 802: LD_INT 17
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: AND
 818: PUSH
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: AND
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 30
 861: PUSH
 862: LD_INT 29
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: AND
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 30
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PPUSH
 903: CALL_OW 69
 907: AND
 908: PUSH
 909: LD_INT 22
 911: PUSH
 912: LD_INT 1
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 30
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PPUSH
 933: CALL_OW 69
 937: AND
 938: PUSH
 939: LD_INT 22
 941: PUSH
 942: LD_INT 1
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 30
 951: PUSH
 952: LD_INT 26
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PPUSH
 963: CALL_OW 69
 967: AND
 968: PUSH
 969: LD_INT 22
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 30
 981: PUSH
 982: LD_INT 28
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PPUSH
 993: CALL_OW 69
 997: AND
 998: IFFALSE 1010
1000: GO 1002
1002: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1003: LD_STRING ACH_ARCH
1005: PPUSH
1006: CALL_OW 543
1010: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1011: LD_INT 0
1013: PPUSH
1014: PPUSH
1015: PPUSH
1016: PPUSH
1017: PPUSH
1018: PPUSH
1019: PPUSH
1020: PPUSH
// uc_nation := nation_american ;
1021: LD_ADDR_OWVAR 21
1025: PUSH
1026: LD_INT 1
1028: ST_TO_ADDR
// uc_side := 4 ;
1029: LD_ADDR_OWVAR 20
1033: PUSH
1034: LD_INT 4
1036: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1037: LD_ADDR_EXP 44
1041: PUSH
1042: LD_STRING Powell
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_STRING 
1050: PPUSH
1051: CALL 55133 0 3
1055: ST_TO_ADDR
// uc_side := 1 ;
1056: LD_ADDR_OWVAR 20
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// JMMSquad := [ ] ;
1064: LD_ADDR_EXP 45
1068: PUSH
1069: EMPTY
1070: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1071: LD_ADDR_EXP 23
1075: PUSH
1076: LD_STRING JMM
1078: PPUSH
1079: LD_EXP 1
1083: NOT
1084: PPUSH
1085: LD_STRING 10_
1087: PPUSH
1088: CALL 55133 0 3
1092: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1093: LD_ADDR_EXP 32
1097: PUSH
1098: LD_STRING Gary
1100: PPUSH
1101: LD_EXP 1
1105: NOT
1106: PPUSH
1107: LD_STRING 10_
1109: PPUSH
1110: CALL 55133 0 3
1114: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1115: LD_ADDR_EXP 27
1119: PUSH
1120: LD_STRING Cyrus
1122: PPUSH
1123: LD_EXP 1
1127: NOT
1128: PPUSH
1129: LD_STRING 10_
1131: PPUSH
1132: CALL 55133 0 3
1136: ST_TO_ADDR
// if Cyrus then
1137: LD_EXP 27
1141: IFFALSE 1159
// JMMSquad := JMMSquad ^ Cyrus ;
1143: LD_ADDR_EXP 45
1147: PUSH
1148: LD_EXP 45
1152: PUSH
1153: LD_EXP 27
1157: ADD
1158: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1159: LD_ADDR_EXP 26
1163: PUSH
1164: LD_STRING Bobby
1166: PPUSH
1167: LD_EXP 1
1171: NOT
1172: PPUSH
1173: LD_STRING 10_
1175: PPUSH
1176: CALL 55133 0 3
1180: ST_TO_ADDR
// if Bobby then
1181: LD_EXP 26
1185: IFFALSE 1203
// JMMSquad := JMMSquad ^ Bobby ;
1187: LD_ADDR_EXP 45
1191: PUSH
1192: LD_EXP 45
1196: PUSH
1197: LD_EXP 26
1201: ADD
1202: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1203: LD_ADDR_EXP 28
1207: PUSH
1208: LD_STRING Lisa
1210: PPUSH
1211: LD_EXP 1
1215: NOT
1216: PPUSH
1217: LD_STRING 10_
1219: PPUSH
1220: CALL 55133 0 3
1224: ST_TO_ADDR
// if Lisa then
1225: LD_EXP 28
1229: IFFALSE 1247
// JMMSquad := JMMSquad ^ Lisa ;
1231: LD_ADDR_EXP 45
1235: PUSH
1236: LD_EXP 45
1240: PUSH
1241: LD_EXP 28
1245: ADD
1246: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1247: LD_ADDR_EXP 24
1251: PUSH
1252: LD_STRING Brown
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 10_
1263: PPUSH
1264: CALL 55133 0 3
1268: ST_TO_ADDR
// if Brown then
1269: LD_EXP 24
1273: IFFALSE 1291
// JMMSquad := JMMSquad ^ Brown ;
1275: LD_ADDR_EXP 45
1279: PUSH
1280: LD_EXP 45
1284: PUSH
1285: LD_EXP 24
1289: ADD
1290: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1291: LD_ADDR_EXP 25
1295: PUSH
1296: LD_STRING Donaldson
1298: PPUSH
1299: LD_EXP 1
1303: NOT
1304: PPUSH
1305: LD_STRING 10_
1307: PPUSH
1308: CALL 55133 0 3
1312: ST_TO_ADDR
// if Donaldson then
1313: LD_EXP 25
1317: IFFALSE 1335
// JMMSquad := JMMSquad ^ Donaldson ;
1319: LD_ADDR_EXP 45
1323: PUSH
1324: LD_EXP 45
1328: PUSH
1329: LD_EXP 25
1333: ADD
1334: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_STRING Frank
1342: PPUSH
1343: LD_EXP 1
1347: NOT
1348: PPUSH
1349: LD_STRING 10_
1351: PPUSH
1352: CALL 55133 0 3
1356: ST_TO_ADDR
// if Frank then
1357: LD_EXP 29
1361: IFFALSE 1379
// JMMSquad := JMMSquad ^ Frank ;
1363: LD_ADDR_EXP 45
1367: PUSH
1368: LD_EXP 45
1372: PUSH
1373: LD_EXP 29
1377: ADD
1378: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1379: LD_ADDR_EXP 31
1383: PUSH
1384: LD_STRING Houten
1386: PPUSH
1387: LD_EXP 1
1391: NOT
1392: PPUSH
1393: LD_STRING 10_
1395: PPUSH
1396: CALL 55133 0 3
1400: ST_TO_ADDR
// if Houten then
1401: LD_EXP 31
1405: IFFALSE 1423
// JMMSquad := JMMSquad ^ Houten ;
1407: LD_ADDR_EXP 45
1411: PUSH
1412: LD_EXP 45
1416: PUSH
1417: LD_EXP 31
1421: ADD
1422: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1423: LD_ADDR_EXP 46
1427: PUSH
1428: LD_STRING OthersIn10
1430: PPUSH
1431: CALL_OW 31
1435: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1436: LD_EXP 45
1440: PPUSH
1441: CALL 57256 0 1
1445: PUSH
1446: LD_EXP 46
1450: PPUSH
1451: CALL 57256 0 1
1455: PLUS
1456: PUSH
1457: LD_INT 9
1459: LESS
1460: IFFALSE 1547
// begin InitHC_All ( ) ;
1462: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1466: LD_ADDR_VAR 0 2
1470: PUSH
1471: DOUBLE
1472: LD_INT 9
1474: INC
1475: ST_TO_ADDR
1476: LD_EXP 45
1480: PPUSH
1481: CALL 57256 0 1
1485: PUSH
1486: LD_EXP 46
1490: PPUSH
1491: CALL 57256 0 1
1495: PLUS
1496: PUSH
1497: FOR_DOWNTO
1498: IFFALSE 1545
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1500: LD_INT 0
1502: PPUSH
1503: LD_VAR 0 2
1507: PUSH
1508: LD_INT 4
1510: MOD
1511: PUSH
1512: LD_INT 1
1514: PLUS
1515: PPUSH
1516: LD_INT 5
1518: PPUSH
1519: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1523: LD_ADDR_EXP 46
1527: PUSH
1528: LD_EXP 46
1532: PPUSH
1533: CALL_OW 44
1537: PPUSH
1538: CALL 92865 0 2
1542: ST_TO_ADDR
// end ;
1543: GO 1497
1545: POP
1546: POP
// end ; if debug then
1547: LD_EXP 1
1551: IFFALSE 1592
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1553: LD_ADDR_VAR 0 1
1557: PUSH
1558: LD_EXP 27
1562: PUSH
1563: LD_EXP 26
1567: PUSH
1568: LD_EXP 28
1572: PUSH
1573: LD_EXP 25
1577: PUSH
1578: LD_EXP 24
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: ST_TO_ADDR
1590: GO 1755
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1592: LD_ADDR_VAR 0 1
1596: PUSH
1597: LD_STRING 1
1599: PPUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 4
1608: PUSH
1609: LD_INT 4
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_OWVAR 67
1622: ARRAY
1623: PPUSH
1624: LD_INT 6
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 4
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_OWVAR 67
1646: ARRAY
1647: PPUSH
1648: LD_INT -4
1650: PUSH
1651: LD_INT -1
1653: PUSH
1654: LD_INT -5
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: PUSH
1662: LD_EXP 23
1666: ADD
1667: PUSH
1668: LD_EXP 32
1672: ADD
1673: PUSH
1674: LD_INT -2
1676: PUSH
1677: LD_INT -3
1679: PUSH
1680: LD_INT -5
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: ADD
1688: PUSH
1689: LD_EXP 45
1693: ADD
1694: PUSH
1695: LD_EXP 46
1699: ADD
1700: PUSH
1701: LD_INT -4
1703: PUSH
1704: LD_INT -2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: ADD
1711: PUSH
1712: LD_EXP 44
1716: ADD
1717: PPUSH
1718: LD_INT 1
1720: PUSH
1721: LD_INT 3
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 2
1733: PUSH
1734: LD_INT 1
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 4
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: PPUSH
1750: CALL_OW 42
1754: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1755: LD_ADDR_VAR 0 1
1759: PUSH
1760: LD_VAR 0 1
1764: PPUSH
1765: LD_EXP 23
1769: PPUSH
1770: CALL 92902 0 2
1774: ST_TO_ADDR
// if Gary then
1775: LD_EXP 32
1779: IFFALSE 1801
// result := JoinUnion ( result , Gary ) ;
1781: LD_ADDR_VAR 0 1
1785: PUSH
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_EXP 32
1795: PPUSH
1796: CALL 92902 0 2
1800: ST_TO_ADDR
// if Count ( others ) then
1801: LD_EXP 46
1805: PPUSH
1806: CALL 57256 0 1
1810: IFFALSE 1828
// others := others diff result ;
1812: LD_ADDR_EXP 46
1816: PUSH
1817: LD_EXP 46
1821: PUSH
1822: LD_VAR 0 1
1826: DIFF
1827: ST_TO_ADDR
// vehs := [ ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: EMPTY
1834: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1835: LD_INT 2
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: LD_INT 12
1846: PPUSH
1847: LD_INT 50
1849: PPUSH
1850: CALL 59994 0 5
// veh := CreateVehicle ;
1854: LD_ADDR_VAR 0 4
1858: PUSH
1859: CALL_OW 45
1863: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1864: LD_ADDR_VAR 0 5
1868: PUSH
1869: LD_VAR 0 5
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL 92865 0 2
1883: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1896: LD_ADDR_VAR 0 6
1900: PUSH
1901: LD_STRING 09_sibRes
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 30
1911: PUSH
1912: LD_INT 20
1914: MINUS
1915: ST_TO_ADDR
// if sibRes >= 100 then
1916: LD_VAR 0 6
1920: PUSH
1921: LD_INT 100
1923: GREATEREQUAL
1924: IFFALSE 1943
// SetCargo ( veh , mat_siberit , 100 ) else
1926: LD_VAR 0 4
1930: PPUSH
1931: LD_INT 3
1933: PPUSH
1934: LD_INT 100
1936: PPUSH
1937: CALL_OW 290
1941: GO 1960
// SetCargo ( veh , mat_siberit , sibRes ) ;
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_INT 3
1950: PPUSH
1951: LD_VAR 0 6
1955: PPUSH
1956: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1960: LD_INT 2
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 12
1971: PPUSH
1972: LD_INT 50
1974: PPUSH
1975: CALL 59994 0 5
// veh := CreateVehicle ;
1979: LD_ADDR_VAR 0 4
1983: PUSH
1984: CALL_OW 45
1988: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1989: LD_ADDR_VAR 0 5
1993: PUSH
1994: LD_VAR 0 5
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 92865 0 2
2008: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2009: LD_VAR 0 4
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2021: LD_VAR 0 4
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: LD_INT 100
2031: PPUSH
2032: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_INT 1
2044: DEC
2045: ST_TO_ADDR
2046: LD_VAR 0 1
2050: PPUSH
2051: CALL 57256 0 1
2055: PUSH
2056: LD_INT 2
2058: MINUS
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2167
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2063: LD_INT 2
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 3
2074: PUSH
2075: LD_INT 4
2077: PUSH
2078: LD_INT 5
2080: PUSH
2081: LD_INT 11
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 5
2101: MOD
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: ARRAY
2107: PPUSH
2108: LD_INT 45
2110: PPUSH
2111: LD_INT 55
2113: PPUSH
2114: CALL_OW 12
2118: PPUSH
2119: CALL 59994 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 4
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: LD_VAR 0 5
2142: PPUSH
2143: LD_VAR 0 4
2147: PPUSH
2148: CALL 92865 0 2
2152: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: CALL_OW 233
// end ;
2165: GO 2060
2167: POP
2168: POP
// for i in vehs do
2169: LD_ADDR_VAR 0 2
2173: PUSH
2174: LD_VAR 0 5
2178: PUSH
2179: FOR_IN
2180: IFFALSE 2235
// begin PlaceUnitArea ( i , startArea , false ) ;
2182: LD_VAR 0 2
2186: PPUSH
2187: LD_INT 3
2189: PPUSH
2190: LD_INT 0
2192: PPUSH
2193: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2197: LD_VAR 0 1
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: PPUSH
2206: LD_VAR 0 2
2210: PPUSH
2211: CALL_OW 52
// result := Delete ( result , 1 ) ;
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL_OW 3
2232: ST_TO_ADDR
// end ;
2233: GO 2179
2235: POP
2236: POP
// uc_side := 4 ;
2237: LD_ADDR_OWVAR 20
2241: PUSH
2242: LD_INT 4
2244: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2245: LD_STRING 08_SikorskiStatus
2247: PPUSH
2248: LD_EXP 1
2252: PPUSH
2253: CALL_OW 30
2257: IFFALSE 2278
// Truman := PrepareUnit ( Truman , false ,  ) ;
2259: LD_ADDR_EXP 43
2263: PUSH
2264: LD_STRING Truman
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: LD_STRING 
2272: PPUSH
2273: CALL 55133 0 3
2277: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2278: LD_ADDR_EXP 33
2282: PUSH
2283: LD_STRING Simms
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: LD_STRING 
2291: PPUSH
2292: CALL 55133 0 3
2296: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2297: LD_ADDR_EXP 34
2301: PUSH
2302: LD_STRING Denis
2304: PPUSH
2305: LD_EXP 1
2309: NOT
2310: PPUSH
2311: LD_STRING 08_
2313: PPUSH
2314: CALL 55133 0 3
2318: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2319: LD_ADDR_EXP 35
2323: PUSH
2324: LD_STRING Joan
2326: PPUSH
2327: LD_EXP 1
2331: NOT
2332: PPUSH
2333: LD_STRING 08_
2335: PPUSH
2336: CALL 55133 0 3
2340: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2341: LD_ADDR_EXP 41
2345: PUSH
2346: LD_STRING Mike
2348: PPUSH
2349: LD_EXP 1
2353: NOT
2354: PPUSH
2355: LD_STRING 08_
2357: PPUSH
2358: CALL 55133 0 3
2362: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2363: LD_STRING 08_Khatam
2365: PPUSH
2366: CALL_OW 28
2370: IFFALSE 2393
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2372: LD_ADDR_EXP 36
2376: PUSH
2377: LD_STRING Khatam
2379: PPUSH
2380: LD_INT 1
2382: PPUSH
2383: LD_STRING 08_
2385: PPUSH
2386: CALL 55133 0 3
2390: ST_TO_ADDR
2391: GO 2421
// if TestCharacters ( 03_Khatam ) then
2393: LD_STRING 03_Khatam
2395: PPUSH
2396: CALL_OW 28
2400: IFFALSE 2421
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2402: LD_ADDR_EXP 36
2406: PUSH
2407: LD_STRING Khatam
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: LD_STRING 03_
2415: PPUSH
2416: CALL 55133 0 3
2420: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2421: LD_ADDR_EXP 37
2425: PUSH
2426: LD_STRING Gladstone
2428: PPUSH
2429: LD_EXP 1
2433: NOT
2434: PPUSH
2435: LD_STRING 08_
2437: PPUSH
2438: CALL 55133 0 3
2442: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2443: LD_ADDR_EXP 39
2447: PUSH
2448: LD_STRING DeltaDoctor
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_STRING 
2459: PPUSH
2460: CALL 55133 0 3
2464: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 08_ ) ;
2465: LD_ADDR_EXP 29
2469: PUSH
2470: LD_STRING Frank
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_STRING 08_
2481: PPUSH
2482: CALL 55133 0 3
2486: ST_TO_ADDR
// if Frank then
2487: LD_EXP 29
2491: IFFALSE 2514
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2493: LD_ADDR_EXP 30
2497: PUSH
2498: LD_STRING Yamoko
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 55133 0 3
2511: ST_TO_ADDR
2512: GO 2536
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2514: LD_ADDR_EXP 30
2518: PUSH
2519: LD_STRING Kikuchi
2521: PPUSH
2522: LD_EXP 1
2526: NOT
2527: PPUSH
2528: LD_STRING 08_
2530: PPUSH
2531: CALL 55133 0 3
2535: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2536: LD_ADDR_EXP 47
2540: PUSH
2541: LD_STRING 09_others
2543: PPUSH
2544: CALL_OW 31
2548: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2549: LD_ADDR_EXP 48
2553: PUSH
2554: LD_STRING 09_apes
2556: PPUSH
2557: CALL_OW 31
2561: ST_TO_ADDR
// if Truman then
2562: LD_EXP 43
2566: IFFALSE 2583
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2568: LD_EXP 43
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// if Mike then
2583: LD_EXP 41
2587: IFFALSE 2604
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2589: LD_EXP 41
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// if Simms then
2604: LD_EXP 33
2608: IFFALSE 2625
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2610: LD_EXP 33
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
// if Denis then
2625: LD_EXP 34
2629: IFFALSE 2646
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2631: LD_EXP 34
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// if Joan then
2646: LD_EXP 35
2650: IFFALSE 2667
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2652: LD_EXP 35
2656: PPUSH
2657: LD_INT 4
2659: PPUSH
2660: LD_INT 0
2662: PPUSH
2663: CALL_OW 49
// if Khatam then
2667: LD_EXP 36
2671: IFFALSE 2688
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2673: LD_EXP 36
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// if Gladstone then
2688: LD_EXP 37
2692: IFFALSE 2709
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2694: LD_EXP 37
2698: PPUSH
2699: LD_INT 4
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// if DeltaDoctor then
2709: LD_EXP 39
2713: IFFALSE 2730
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2715: LD_EXP 39
2719: PPUSH
2720: LD_INT 4
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// if Kikuchi then
2730: LD_EXP 30
2734: IFFALSE 2751
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2736: LD_EXP 30
2740: PPUSH
2741: LD_INT 4
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2751: LD_EXP 33
2755: PUSH
2756: LD_EXP 36
2760: PUSH
2761: LD_EXP 34
2765: PUSH
2766: LD_EXP 37
2770: PUSH
2771: LD_EXP 39
2775: PUSH
2776: LD_EXP 35
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: CALL_OW 336
// amount := Count ( others09 ) ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_EXP 47
2805: PPUSH
2806: CALL 57256 0 1
2810: ST_TO_ADDR
// if amount then
2811: LD_VAR 0 8
2815: IFFALSE 2963
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2817: LD_VAR 0 8
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: LD_INT 4
2830: PUSH
2831: LD_INT 4
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_OWVAR 67
2844: ARRAY
2845: GREATER
2846: IFFALSE 2877
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2848: LD_ADDR_VAR 0 8
2852: PUSH
2853: LD_INT 6
2855: PUSH
2856: LD_INT 5
2858: PUSH
2859: LD_INT 4
2861: PUSH
2862: LD_INT 4
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: PUSH
2871: LD_OWVAR 67
2875: ARRAY
2876: ST_TO_ADDR
// for i := 1 to amount do
2877: LD_ADDR_VAR 0 2
2881: PUSH
2882: DOUBLE
2883: LD_INT 1
2885: DEC
2886: ST_TO_ADDR
2887: LD_VAR 0 8
2891: PUSH
2892: FOR_TO
2893: IFFALSE 2934
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2895: LD_EXP 47
2899: PUSH
2900: LD_INT 1
2902: ARRAY
2903: PPUSH
2904: LD_INT 4
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2914: LD_ADDR_EXP 47
2918: PUSH
2919: LD_EXP 47
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: CALL_OW 3
2931: ST_TO_ADDR
// end ;
2932: GO 2892
2934: POP
2935: POP
// if Count ( others09 ) then
2936: LD_EXP 47
2940: PPUSH
2941: CALL 57256 0 1
2945: IFFALSE 2963
// others := others union others09 ;
2947: LD_ADDR_EXP 46
2951: PUSH
2952: LD_EXP 46
2956: PUSH
2957: LD_EXP 47
2961: UNION
2962: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2963: LD_INT 22
2965: PUSH
2966: LD_INT 4
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 50
2975: PUSH
2976: EMPTY
2977: LIST
2978: PUSH
2979: LD_INT 25
2981: PUSH
2982: LD_INT 2
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: PPUSH
2994: CALL_OW 69
2998: PUSH
2999: LD_INT 0
3001: EQUAL
3002: IFFALSE 3141
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3004: LD_ADDR_VAR 0 7
3008: PUSH
3009: LD_INT 22
3011: PUSH
3012: LD_INT 4
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 50
3021: PUSH
3022: EMPTY
3023: LIST
3024: PUSH
3025: LD_INT 25
3027: PUSH
3028: LD_INT 2
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PPUSH
3040: CALL_OW 69
3044: PUSH
3045: LD_EXP 33
3049: PUSH
3050: LD_EXP 36
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_EXP 37
3064: PUSH
3065: LD_EXP 39
3069: PUSH
3070: LD_EXP 35
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: DIFF
3083: ST_TO_ADDR
// if not tmp then
3084: LD_VAR 0 7
3088: NOT
3089: IFFALSE 3125
// begin if Denis then
3091: LD_EXP 34
3095: IFFALSE 3111
// SetClass ( Denis , class_engineer ) else
3097: LD_EXP 34
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 336
3109: GO 3123
// SetClass ( DeltaDoctor , class_engineer ) ;
3111: LD_EXP 39
3115: PPUSH
3116: LD_INT 2
3118: PPUSH
3119: CALL_OW 336
// end else
3123: GO 3141
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3125: LD_VAR 0 7
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_INT 2
3136: PPUSH
3137: CALL_OW 336
// end ; for i in ape09 do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: LD_EXP 48
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3171
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3154: LD_VAR 0 2
3158: PPUSH
3159: LD_INT 4
3161: PPUSH
3162: LD_INT 0
3164: PPUSH
3165: CALL_OW 49
3169: GO 3151
3171: POP
3172: POP
// PrepareSoldier ( sex_female , 6 ) ;
3173: LD_INT 2
3175: PPUSH
3176: LD_INT 6
3178: PPUSH
3179: CALL_OW 381
// AmScout := CreateHuman ;
3183: LD_ADDR_EXP 40
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// end ;
3193: LD_VAR 0 1
3197: RET
// export function PrepareCornell ; begin
3198: LD_INT 0
3200: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3201: LD_INT 4
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: CALL_OW 343
// uc_side := 4 ;
3211: LD_ADDR_OWVAR 20
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// uc_nation := nation_american ;
3219: LD_ADDR_OWVAR 21
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3227: LD_ADDR_EXP 42
3231: PUSH
3232: LD_STRING Cornel
3234: PPUSH
3235: LD_EXP 1
3239: NOT
3240: PPUSH
3241: LD_STRING 03_
3243: PPUSH
3244: CALL 55133 0 3
3248: ST_TO_ADDR
// if not Cornell then
3249: LD_EXP 42
3253: NOT
3254: IFFALSE 3258
// exit ;
3256: GO 3396
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3258: LD_EXP 42
3262: PPUSH
3263: LD_INT 12
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3273: LD_EXP 42
3277: PPUSH
3278: LD_INT 350
3280: PPUSH
3281: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3285: LD_EXP 42
3289: PPUSH
3290: LD_INT 125
3292: PPUSH
3293: LD_INT 17
3295: PPUSH
3296: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3300: LD_EXP 42
3304: PPUSH
3305: LD_INT 112
3307: PPUSH
3308: LD_INT 19
3310: PPUSH
3311: CALL_OW 171
// if IsInUnit ( JMM ) then
3315: LD_EXP 23
3319: PPUSH
3320: CALL_OW 310
3324: IFFALSE 3367
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3326: LD_EXP 42
3330: PPUSH
3331: LD_EXP 23
3335: PPUSH
3336: CALL_OW 310
3340: PPUSH
3341: CALL_OW 250
3345: PPUSH
3346: LD_EXP 23
3350: PPUSH
3351: CALL_OW 310
3355: PPUSH
3356: CALL_OW 251
3360: PPUSH
3361: CALL_OW 171
3365: GO 3396
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3367: LD_EXP 42
3371: PPUSH
3372: LD_EXP 23
3376: PPUSH
3377: CALL_OW 250
3381: PPUSH
3382: LD_EXP 23
3386: PPUSH
3387: CALL_OW 251
3391: PPUSH
3392: CALL_OW 171
// end ; end_of_file
3396: LD_VAR 0 1
3400: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3401: LD_INT 0
3403: PPUSH
3404: PPUSH
3405: PPUSH
3406: PPUSH
3407: PPUSH
3408: PPUSH
// uc_side := 2 ;
3409: LD_ADDR_OWVAR 20
3413: PUSH
3414: LD_INT 2
3416: ST_TO_ADDR
// uc_nation := nation_arabian ;
3417: LD_ADDR_OWVAR 21
3421: PUSH
3422: LD_INT 2
3424: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3425: LD_ADDR_VAR 0 6
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: LD_INT 5
3435: PUSH
3436: LD_INT 6
3438: PUSH
3439: LD_INT 7
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: PUSH
3448: LD_OWVAR 67
3452: ARRAY
3453: ST_TO_ADDR
// arForces := [ ] ;
3454: LD_ADDR_EXP 49
3458: PUSH
3459: EMPTY
3460: ST_TO_ADDR
// arTech := [ ] ;
3461: LD_ADDR_EXP 52
3465: PUSH
3466: EMPTY
3467: ST_TO_ADDR
// arBuildings := [ ] ;
3468: LD_ADDR_EXP 53
3472: PUSH
3473: EMPTY
3474: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3475: LD_ADDR_EXP 55
3479: PUSH
3480: LD_INT 94
3482: PUSH
3483: LD_INT 19
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 92
3492: PUSH
3493: LD_INT 34
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 109
3502: PUSH
3503: LD_INT 67
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 120
3512: PUSH
3513: LD_INT 38
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 116
3522: PUSH
3523: LD_INT 30
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 102
3532: PUSH
3533: LD_INT 20
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3548: LD_ADDR_EXP 54
3552: PUSH
3553: LD_INT 73
3555: PUSH
3556: LD_INT 36
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 76
3565: PUSH
3566: LD_INT 38
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 79
3575: PUSH
3576: LD_INT 39
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: ST_TO_ADDR
// arEscapist := [ ] ;
3588: LD_ADDR_EXP 56
3592: PUSH
3593: EMPTY
3594: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3595: LD_INT 35
3597: PPUSH
3598: CALL_OW 274
3602: PPUSH
3603: LD_INT 1
3605: PPUSH
3606: LD_INT 150
3608: PPUSH
3609: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3613: LD_INT 35
3615: PPUSH
3616: CALL_OW 274
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_INT 60
3626: PPUSH
3627: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3631: LD_INT 35
3633: PPUSH
3634: CALL_OW 274
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 10
3644: PPUSH
3645: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3649: LD_INT 36
3651: PPUSH
3652: LD_INT 22
3654: PPUSH
3655: LD_INT 2
3657: PPUSH
3658: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PPUSH
3691: CALL_OW 69
3695: PUSH
3696: FOR_IN
3697: IFFALSE 3713
// SetBLevel ( i , 6 ) ;
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_INT 6
3706: PPUSH
3707: CALL_OW 241
3711: GO 3696
3713: POP
3714: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3715: LD_ADDR_EXP 50
3719: PUSH
3720: LD_STRING Dietrich
3722: PPUSH
3723: CALL_OW 25
3727: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3728: LD_EXP 50
3732: PPUSH
3733: LD_INT 35
3735: PPUSH
3736: CALL_OW 52
// InitHC_All ( ) ;
3740: CALL_OW 584
// for i := 1 to 3 do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_INT 3
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3864
// begin PrepareEngineer ( sex_male , skill ) ;
3760: LD_INT 1
3762: PPUSH
3763: LD_VAR 0 6
3767: PPUSH
3768: CALL_OW 382
// if i = 1 then
3772: LD_VAR 0 2
3776: PUSH
3777: LD_INT 1
3779: EQUAL
3780: IFFALSE 3792
// hc_name := Ahmed Abbasid else
3782: LD_ADDR_OWVAR 26
3786: PUSH
3787: LD_STRING Ahmed Abbasid
3789: ST_TO_ADDR
3790: GO 3800
// hc_name :=  ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// un := CreateHuman ;
3800: LD_ADDR_VAR 0 4
3804: PUSH
3805: CALL_OW 44
3809: ST_TO_ADDR
// if i = 1 then
3810: LD_VAR 0 2
3814: PUSH
3815: LD_INT 1
3817: EQUAL
3818: IFFALSE 3830
// Ahmed := un ;
3820: LD_ADDR_EXP 51
3824: PUSH
3825: LD_VAR 0 4
3829: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3830: LD_ADDR_EXP 49
3834: PUSH
3835: LD_EXP 49
3839: PPUSH
3840: LD_VAR 0 4
3844: PPUSH
3845: CALL 92865 0 2
3849: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_INT 35
3857: PPUSH
3858: CALL_OW 52
// end ;
3862: GO 3757
3864: POP
3865: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 2
3878: PUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_OWVAR 67
3898: ARRAY
3899: PUSH
3900: FOR_TO
3901: IFFALSE 3976
// begin PrepareScientist ( false , skill ) ;
3903: LD_INT 0
3905: PPUSH
3906: LD_VAR 0 6
3910: PPUSH
3911: CALL_OW 384
// un := CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_VAR 0 6
3937: PPUSH
3938: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3942: LD_ADDR_EXP 49
3946: PUSH
3947: LD_EXP 49
3951: PPUSH
3952: LD_VAR 0 4
3956: PPUSH
3957: CALL 92865 0 2
3961: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 36
3969: PPUSH
3970: CALL_OW 52
// end ;
3974: GO 3900
3976: POP
3977: POP
// for j in [ arBar1 , arBar2 ] do
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: LD_INT 37
3985: PUSH
3986: LD_INT 38
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4074
// for i := 1 to 4 do
3996: LD_ADDR_VAR 0 2
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_INT 4
4008: PUSH
4009: FOR_TO
4010: IFFALSE 4070
// begin PrepareSoldier ( false , skill ) ;
4012: LD_INT 0
4014: PPUSH
4015: LD_VAR 0 6
4019: PPUSH
4020: CALL_OW 381
// un := CreateHuman ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: CALL_OW 44
4033: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4034: LD_ADDR_EXP 49
4038: PUSH
4039: LD_EXP 49
4043: PPUSH
4044: LD_VAR 0 4
4048: PPUSH
4049: CALL 92865 0 2
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4054: LD_VAR 0 4
4058: PPUSH
4059: LD_VAR 0 3
4063: PPUSH
4064: CALL_OW 52
// end ;
4068: GO 4009
4070: POP
4071: POP
4072: GO 3993
4074: POP
4075: POP
// for i := 1 to 3 do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 3
4088: PUSH
4089: FOR_TO
4090: IFFALSE 4169
// begin un := arForces [ arForces - i ] ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_EXP 49
4106: PUSH
4107: LD_VAR 0 2
4111: MINUS
4112: ARRAY
4113: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4114: LD_VAR 0 4
4118: PPUSH
4119: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_INT 22
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 30
4140: PUSH
4141: LD_INT 31
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 69
4156: PUSH
4157: LD_VAR 0 2
4161: ARRAY
4162: PPUSH
4163: CALL_OW 180
// end ;
4167: GO 4089
4169: POP
4170: POP
// for i := 1 to 3 do
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_INT 3
4183: PUSH
4184: FOR_TO
4185: IFFALSE 4270
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4187: LD_ADDR_VAR 0 5
4191: PUSH
4192: LD_EXP 49
4196: PPUSH
4197: LD_INT 25
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 120
4212: PUSH
4213: LD_INT 6
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 72
4232: ST_TO_ADDR
// if not tmp then
4233: LD_VAR 0 5
4237: NOT
4238: IFFALSE 4242
// continue ;
4240: GO 4184
// un := tmp [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_VAR 0 5
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4256: LD_VAR 0 4
4260: PPUSH
4261: LD_INT 6
4263: PPUSH
4264: CALL_OW 109
// end ;
4268: GO 4184
4270: POP
4271: POP
// for i in UnitsInside ( arBar2 ) do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: LD_INT 38
4279: PPUSH
4280: CALL_OW 313
4284: PUSH
4285: FOR_IN
4286: IFFALSE 4302
// SetClass ( i , class_mortar ) ;
4288: LD_VAR 0 2
4292: PPUSH
4293: LD_INT 8
4295: PPUSH
4296: CALL_OW 336
4300: GO 4285
4302: POP
4303: POP
// end ;
4304: LD_VAR 0 1
4308: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4309: LD_EXP 7
4313: IFFALSE 4726
4315: GO 4317
4317: DISABLE
4318: LD_INT 0
4320: PPUSH
4321: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4322: LD_INT 36
4324: PPUSH
4325: LD_INT 11
4327: PPUSH
4328: CALL_OW 147
// wait ( 0 0$10 ) ;
4332: LD_INT 350
4334: PPUSH
4335: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4339: LD_ADDR_EXP 53
4343: PUSH
4344: LD_INT 27
4346: PUSH
4347: LD_INT 69
4349: PUSH
4350: LD_INT 4
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 27
4364: PUSH
4365: LD_INT 67
4367: PUSH
4368: LD_INT 6
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4384: LD_INT 35
4386: PPUSH
4387: CALL_OW 67
// until not arBuildings ;
4391: LD_EXP 53
4395: NOT
4396: IFFALSE 4384
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4398: LD_ADDR_VAR 0 2
4402: PUSH
4403: LD_EXP 49
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: ST_TO_ADDR
// if eng then
4423: LD_VAR 0 2
4427: IFFALSE 4564
// begin eng := eng [ 1 ] ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_VAR 0 2
4438: PUSH
4439: LD_INT 1
4441: ARRAY
4442: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4443: LD_VAR 0 2
4447: PPUSH
4448: LD_INT 4
4450: PPUSH
4451: CALL_OW 109
// for i in arCameras do
4455: LD_ADDR_VAR 0 1
4459: PUSH
4460: LD_EXP 55
4464: PUSH
4465: FOR_IN
4466: IFFALSE 4497
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4468: LD_VAR 0 2
4472: PPUSH
4473: LD_VAR 0 1
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_VAR 0 1
4486: PUSH
4487: LD_INT 2
4489: ARRAY
4490: PPUSH
4491: CALL_OW 217
4495: GO 4465
4497: POP
4498: POP
// repeat wait ( 0 0$1 ) ;
4499: LD_INT 35
4501: PPUSH
4502: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 314
4515: NOT
4516: PUSH
4517: LD_VAR 0 2
4521: PPUSH
4522: CALL_OW 301
4526: OR
4527: IFFALSE 4499
// if IsOk ( eng ) then
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 302
4538: IFFALSE 4564
// begin SetTag ( eng , 0 ) ;
4540: LD_VAR 0 2
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_INT 35
4559: PPUSH
4560: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4564: LD_INT 35
4566: PPUSH
4567: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4571: LD_OWVAR 1
4575: PUSH
4576: LD_INT 4200
4578: MOD
4579: PUSH
4580: LD_INT 0
4582: EQUAL
4583: PUSH
4584: LD_INT 9
4586: PPUSH
4587: CALL_OW 435
4591: PUSH
4592: LD_INT 3
4594: LESS
4595: AND
4596: IFFALSE 4619
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4598: LD_INT 1
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: CALL_OW 12
4608: PPUSH
4609: LD_INT 9
4611: PPUSH
4612: LD_INT 1
4614: PPUSH
4615: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4619: LD_INT 22
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 57
4634: PUSH
4635: EMPTY
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 63
4644: PUSH
4645: LD_INT 11
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: IFFALSE 4564
// wait ( 0 0$10 ) ;
4663: LD_INT 350
4665: PPUSH
4666: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4670: LD_ADDR_EXP 52
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 22
4680: PUSH
4681: LD_INT 54
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4689: LD_INT 35
4691: PPUSH
4692: CALL_OW 67
// until not arTech ;
4696: LD_EXP 52
4700: NOT
4701: IFFALSE 4689
// wait ( 0 0$30 ) ;
4703: LD_INT 1050
4705: PPUSH
4706: CALL_OW 67
// arabianAttack := true ;
4710: LD_ADDR_EXP 4
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// arBaseActive := false ;
4718: LD_ADDR_EXP 3
4722: PUSH
4723: LD_INT 0
4725: ST_TO_ADDR
// end ;
4726: PPOPN 2
4728: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4729: LD_EXP 3
4733: PUSH
4734: LD_EXP 54
4738: AND
4739: PUSH
4740: LD_INT 8
4742: PPUSH
4743: LD_INT 81
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 70
4757: AND
4758: IFFALSE 4869
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
4766: PPUSH
// begin enable ;
4767: ENABLE
// for i in arMines do
4768: LD_ADDR_VAR 0 1
4772: PUSH
4773: LD_EXP 54
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4867
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: LD_VAR 0 1
4790: PUSH
4791: LD_INT 1
4793: ARRAY
4794: PPUSH
4795: LD_VAR 0 1
4799: PUSH
4800: LD_INT 2
4802: ARRAY
4803: PPUSH
4804: CALL_OW 428
4808: ST_TO_ADDR
// if not e then
4809: LD_VAR 0 2
4813: NOT
4814: IFFALSE 4818
// continue ;
4816: GO 4778
// if GetSide ( e ) in [ 3 , 6 ] then
4818: LD_VAR 0 2
4822: PPUSH
4823: CALL_OW 255
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: LD_INT 6
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: IN
4838: IFFALSE 4865
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 1
4847: ARRAY
4848: PPUSH
4849: LD_VAR 0 1
4853: PUSH
4854: LD_INT 2
4856: ARRAY
4857: PPUSH
4858: LD_INT 2
4860: PPUSH
4861: CALL_OW 456
// end ;
4865: GO 4778
4867: POP
4868: POP
// end ;
4869: PPOPN 2
4871: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4872: LD_EXP 3
4876: IFFALSE 7064
4878: GO 4880
4880: DISABLE
4881: LD_INT 0
4883: PPUSH
4884: PPUSH
4885: PPUSH
4886: PPUSH
4887: PPUSH
4888: PPUSH
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
// begin enable ;
4899: ENABLE
// side := 2 ;
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: LD_INT 2
4907: ST_TO_ADDR
// if arTech then
4908: LD_EXP 52
4912: IFFALSE 5068
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_INT 22
4921: PUSH
4922: LD_VAR 0 4
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 50
4933: PUSH
4934: EMPTY
4935: LIST
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: LD_INT 30
4942: PUSH
4943: LD_INT 6
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 30
4952: PUSH
4953: LD_INT 7
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 30
4962: PUSH
4963: LD_INT 8
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: ST_TO_ADDR
// if lab then
4986: LD_VAR 0 6
4990: IFFALSE 5068
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
4992: LD_VAR 0 6
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: CALL_OW 461
5005: PUSH
5006: LD_INT 2
5008: EQUAL
5009: IFFALSE 5068
// begin for i in arTech do
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_EXP 52
5020: PUSH
5021: FOR_IN
5022: IFFALSE 5066
// if CanBeResearched ( lab [ 1 ] , i ) then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 1
5037: PPUSH
5038: CALL_OW 430
5042: IFFALSE 5064
// begin ComResearch ( lab [ 1 ] , i ) ;
5044: LD_VAR 0 6
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: LD_VAR 0 1
5057: PPUSH
5058: CALL_OW 124
// break ;
5062: GO 5066
// end ;
5064: GO 5021
5066: POP
5067: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5068: LD_ADDR_VAR 0 5
5072: PUSH
5073: LD_INT 5
5075: PPUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 24
5091: PUSH
5092: LD_INT 1000
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: CALL_OW 70
5111: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5112: LD_ADDR_VAR 0 9
5116: PUSH
5117: LD_INT 9
5119: PPUSH
5120: CALL_OW 435
5124: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5125: LD_ADDR_VAR 0 11
5129: PUSH
5130: LD_EXP 49
5134: PPUSH
5135: LD_INT 25
5137: PUSH
5138: LD_INT 4
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: LD_INT 50
5147: PUSH
5148: EMPTY
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 72
5159: ST_TO_ADDR
// if sci then
5160: LD_VAR 0 11
5164: IFFALSE 5528
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5166: LD_ADDR_VAR 0 13
5170: PUSH
5171: LD_EXP 49
5175: PPUSH
5176: LD_INT 95
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 54
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 120
5201: PUSH
5202: LD_INT 1
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 22
5226: PUSH
5227: LD_VAR 0 4
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 50
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: LD_INT 2
5244: PUSH
5245: LD_INT 30
5247: PUSH
5248: LD_INT 6
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 30
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 30
5267: PUSH
5268: LD_INT 8
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: PPUSH
5286: CALL_OW 69
5290: ST_TO_ADDR
// tag := GetTag ( i ) ;
5291: LD_ADDR_VAR 0 8
5295: PUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: CALL_OW 110
5305: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5306: LD_VAR 0 1
5310: PPUSH
5311: CALL_OW 256
5315: PUSH
5316: LD_INT 800
5318: LESS
5319: PUSH
5320: LD_VAR 0 8
5324: PUSH
5325: LD_INT 1
5327: NONEQUAL
5328: AND
5329: IFFALSE 5358
// begin ComMoveXY ( i , 72 , 15 ) ;
5331: LD_VAR 0 1
5335: PPUSH
5336: LD_INT 72
5338: PPUSH
5339: LD_INT 15
5341: PPUSH
5342: CALL_OW 111
// SetTag ( i , tHeal ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5358: LD_VAR 0 1
5362: PPUSH
5363: CALL_OW 256
5367: PUSH
5368: LD_INT 1000
5370: EQUAL
5371: PUSH
5372: LD_VAR 0 8
5376: PUSH
5377: LD_INT 1
5379: EQUAL
5380: AND
5381: IFFALSE 5395
// begin SetTag ( i , 0 ) ;
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_INT 0
5390: PPUSH
5391: CALL_OW 109
// end ; if hurtUnits then
5395: LD_VAR 0 13
5399: IFFALSE 5460
// begin for i in sci do
5401: LD_ADDR_VAR 0 1
5405: PUSH
5406: LD_VAR 0 11
5410: PUSH
5411: FOR_IN
5412: IFFALSE 5456
// if IsInUnit ( i ) then
5414: LD_VAR 0 1
5418: PPUSH
5419: CALL_OW 310
5423: IFFALSE 5436
// ComExitBuilding ( i ) else
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 122
5434: GO 5454
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5436: LD_VAR 0 1
5440: PPUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 128
5454: GO 5411
5456: POP
5457: POP
// end else
5458: GO 5528
// if lab then
5460: LD_VAR 0 6
5464: IFFALSE 5528
// begin for i in sci do
5466: LD_ADDR_VAR 0 1
5470: PUSH
5471: LD_VAR 0 11
5475: PUSH
5476: FOR_IN
5477: IFFALSE 5526
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 310
5488: NOT
5489: PUSH
5490: LD_VAR 0 1
5494: PPUSH
5495: CALL_OW 110
5499: PUSH
5500: LD_INT 1
5502: NONEQUAL
5503: AND
5504: IFFALSE 5524
// ComEnterUnit ( i , lab [ 1 ] ) ;
5506: LD_VAR 0 1
5510: PPUSH
5511: LD_VAR 0 6
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PPUSH
5520: CALL_OW 120
5524: GO 5476
5526: POP
5527: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5528: LD_ADDR_VAR 0 7
5532: PUSH
5533: LD_EXP 49
5537: PPUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 2
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 72
5552: ST_TO_ADDR
// if eng then
5553: LD_VAR 0 7
5557: IFFALSE 6226
// begin for i in eng do
5559: LD_ADDR_VAR 0 1
5563: PUSH
5564: LD_VAR 0 7
5568: PUSH
5569: FOR_IN
5570: IFFALSE 6224
// begin tag := GetTag ( i ) ;
5572: LD_ADDR_VAR 0 8
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 110
5586: ST_TO_ADDR
// if tag = tCamera then
5587: LD_VAR 0 8
5591: PUSH
5592: LD_INT 4
5594: EQUAL
5595: IFFALSE 5599
// continue ;
5597: GO 5569
// if GetLives ( i ) < 600 and tag <> tHeal then
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 256
5608: PUSH
5609: LD_INT 600
5611: LESS
5612: PUSH
5613: LD_VAR 0 8
5617: PUSH
5618: LD_INT 1
5620: NONEQUAL
5621: AND
5622: IFFALSE 5660
// begin SetTag ( i , tHeal ) ;
5624: LD_VAR 0 1
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5636: LD_VAR 0 1
5640: PPUSH
5641: LD_INT 72
5643: PPUSH
5644: LD_INT 15
5646: PPUSH
5647: CALL_OW 111
// AddComHold ( i ) ;
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5660: LD_VAR 0 8
5664: PUSH
5665: LD_INT 1
5667: EQUAL
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 256
5678: PUSH
5679: LD_INT 1000
5681: EQUAL
5682: AND
5683: IFFALSE 5697
// SetTag ( i , 0 ) ;
5685: LD_VAR 0 1
5689: PPUSH
5690: LD_INT 0
5692: PPUSH
5693: CALL_OW 109
// if not tag then
5697: LD_VAR 0 8
5701: NOT
5702: IFFALSE 5848
// begin if cr or tmp or Count ( arBuildings ) then
5704: LD_VAR 0 9
5708: PUSH
5709: LD_VAR 0 5
5713: OR
5714: PUSH
5715: LD_EXP 53
5719: PPUSH
5720: CALL 57256 0 1
5724: OR
5725: IFFALSE 5812
// begin if IsInUnit ( i ) then
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 310
5736: IFFALSE 5747
// ComExitBuilding ( i ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 122
// if tmp then
5747: LD_VAR 0 5
5751: IFFALSE 5767
// SetTag ( i , tRepair ) else
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_INT 3
5760: PPUSH
5761: CALL_OW 109
5765: GO 5810
// if cr then
5767: LD_VAR 0 9
5771: IFFALSE 5787
// SetTag ( i , tCrates ) else
5773: LD_VAR 0 1
5777: PPUSH
5778: LD_INT 2
5780: PPUSH
5781: CALL_OW 109
5785: GO 5810
// if Count ( arBuildings ) then
5787: LD_EXP 53
5791: PPUSH
5792: CALL 57256 0 1
5796: IFFALSE 5810
// SetTag ( i , tBuild ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_INT 5
5805: PPUSH
5806: CALL_OW 109
// end else
5810: GO 5848
// if not IsInUnit ( i ) then
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 310
5821: NOT
5822: IFFALSE 5848
// begin SetTag ( i , 0 ) ;
5824: LD_VAR 0 1
5828: PPUSH
5829: LD_INT 0
5831: PPUSH
5832: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_INT 35
5843: PPUSH
5844: CALL_OW 120
// end ; end ; if tag = tRepair then
5848: LD_VAR 0 8
5852: PUSH
5853: LD_INT 3
5855: EQUAL
5856: IFFALSE 5958
// begin if IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: IFFALSE 5880
// begin ComExitBuilding ( i ) ;
5869: LD_VAR 0 1
5873: PPUSH
5874: CALL_OW 122
// continue ;
5878: GO 5569
// end ; if not tmp then
5880: LD_VAR 0 5
5884: NOT
5885: IFFALSE 5901
// begin SetTag ( i , 0 ) ;
5887: LD_VAR 0 1
5891: PPUSH
5892: LD_INT 0
5894: PPUSH
5895: CALL_OW 109
// continue ;
5899: GO 5569
// end ; if not HasTask ( i ) then
5901: LD_VAR 0 1
5905: PPUSH
5906: CALL_OW 314
5910: NOT
5911: IFFALSE 5931
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_VAR 0 5
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 5
5938: PPUSH
5939: CALL_OW 308
5943: NOT
5944: IFFALSE 5958
// ComMoveToArea ( i , arBaseArea ) ;
5946: LD_VAR 0 1
5950: PPUSH
5951: LD_INT 5
5953: PPUSH
5954: CALL_OW 113
// end ; if tag = tBuild then
5958: LD_VAR 0 8
5962: PUSH
5963: LD_INT 5
5965: EQUAL
5966: IFFALSE 6077
// begin if IsInUnit ( i ) then
5968: LD_VAR 0 1
5972: PPUSH
5973: CALL_OW 310
5977: IFFALSE 5990
// begin ComExitBuilding ( i ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 122
// continue ;
5988: GO 5569
// end ; if not Count ( arBuildings ) then
5990: LD_EXP 53
5994: PPUSH
5995: CALL 57256 0 1
5999: NOT
6000: IFFALSE 6016
// begin SetTag ( i , 0 ) ;
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_INT 0
6009: PPUSH
6010: CALL_OW 109
// continue ;
6014: GO 5569
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_EXP 53
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: PUSH
6030: LD_INT 1
6032: ARRAY
6033: PPUSH
6034: LD_EXP 53
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PUSH
6043: LD_INT 2
6045: ARRAY
6046: PPUSH
6047: LD_EXP 53
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PUSH
6056: LD_INT 3
6058: ARRAY
6059: PPUSH
6060: LD_EXP 53
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PUSH
6069: LD_INT 4
6071: ARRAY
6072: PPUSH
6073: CALL_OW 145
// end ; if tag = tCrates then
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6222
// begin if IsInUnit ( i ) then
6087: LD_VAR 0 1
6091: PPUSH
6092: CALL_OW 310
6096: IFFALSE 6109
// begin ComExitBuilding ( i ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 122
// continue ;
6107: GO 5569
// end ; if not cr then
6109: LD_VAR 0 9
6113: NOT
6114: IFFALSE 6130
// begin SetTag ( i , 0 ) ;
6116: LD_VAR 0 1
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5569
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 314
6139: NOT
6140: PUSH
6141: LD_INT 81
6143: PUSH
6144: LD_VAR 0 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 92
6155: PUSH
6156: LD_VAR 0 9
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PUSH
6165: LD_VAR 0 9
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 12
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PPUSH
6187: CALL_OW 69
6191: NOT
6192: AND
6193: IFFALSE 6222
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6195: LD_VAR 0 1
6199: PPUSH
6200: LD_VAR 0 9
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: PPUSH
6209: LD_VAR 0 9
6213: PUSH
6214: LD_INT 2
6216: ARRAY
6217: PPUSH
6218: CALL_OW 117
// end ; end ;
6222: GO 5569
6224: POP
6225: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6226: LD_ADDR_VAR 0 12
6230: PUSH
6231: LD_EXP 49
6235: PPUSH
6236: LD_INT 25
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 50
6248: PUSH
6249: EMPTY
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6261: LD_ADDR_VAR 0 14
6265: PUSH
6266: LD_INT 5
6268: PPUSH
6269: LD_INT 81
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PPUSH
6281: CALL_OW 70
6285: ST_TO_ADDR
// if sol then
6286: LD_VAR 0 12
6290: IFFALSE 7064
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6292: LD_ADDR_VAR 0 5
6296: PUSH
6297: LD_VAR 0 12
6301: PPUSH
6302: LD_INT 50
6304: PUSH
6305: EMPTY
6306: LIST
6307: PUSH
6308: LD_INT 120
6310: PUSH
6311: LD_INT 6
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PPUSH
6322: CALL_OW 72
6326: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6327: LD_VAR 0 5
6331: PUSH
6332: LD_INT 81
6334: PUSH
6335: LD_VAR 0 4
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 92
6346: PUSH
6347: LD_INT 76
6349: PUSH
6350: LD_INT 38
6352: PUSH
6353: LD_INT 12
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PPUSH
6366: CALL_OW 69
6370: NOT
6371: AND
6372: IFFALSE 6542
// for i := 1 to Count ( tmp ) do
6374: LD_ADDR_VAR 0 1
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_VAR 0 5
6388: PPUSH
6389: CALL 57256 0 1
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6540
// begin un := tmp [ i ] ;
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: LD_VAR 0 5
6406: PUSH
6407: LD_VAR 0 1
6411: ARRAY
6412: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: LD_VAR 0 2
6422: PPUSH
6423: CALL_OW 310
6427: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6428: LD_VAR 0 2
6432: PPUSH
6433: CALL_OW 459
6437: NOT
6438: IFFALSE 6507
// begin ComExitBuilding ( un ) ;
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_EXP 54
6458: PUSH
6459: LD_VAR 0 1
6463: ARRAY
6464: PUSH
6465: LD_INT 1
6467: ARRAY
6468: PPUSH
6469: LD_EXP 54
6473: PUSH
6474: LD_VAR 0 1
6478: ARRAY
6479: PUSH
6480: LD_INT 2
6482: ARRAY
6483: PPUSH
6484: LD_INT 0
6486: PPUSH
6487: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6491: LD_VAR 0 2
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: CALL_OW 180
// end else
6505: GO 6538
// if not b and not HasTask ( un ) then
6507: LD_VAR 0 3
6511: NOT
6512: PUSH
6513: LD_VAR 0 2
6517: PPUSH
6518: CALL_OW 314
6522: NOT
6523: AND
6524: IFFALSE 6538
// ComEnterUnit ( un , arBar1 ) ;
6526: LD_VAR 0 2
6530: PPUSH
6531: LD_INT 37
6533: PPUSH
6534: CALL_OW 120
// end ;
6538: GO 6394
6540: POP
6541: POP
// if enemyInBase then
6542: LD_VAR 0 14
6546: IFFALSE 6691
// begin for i in sol do
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_VAR 0 12
6557: PUSH
6558: FOR_IN
6559: IFFALSE 6687
// begin tw := IsInUnit ( i ) ;
6561: LD_ADDR_VAR 0 10
6565: PUSH
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 310
6575: ST_TO_ADDR
// if tw then
6576: LD_VAR 0 10
6580: IFFALSE 6661
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6582: LD_VAR 0 10
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_VAR 0 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 30
6614: PUSH
6615: LD_INT 32
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 30
6624: PUSH
6625: LD_INT 31
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: IN
6647: NOT
6648: IFFALSE 6659
// ComExitBuilding ( i ) ;
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 122
// end else
6659: GO 6685
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6661: LD_VAR 0 1
6665: PPUSH
6666: LD_VAR 0 14
6670: PPUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 74
6680: PPUSH
6681: CALL_OW 115
// end ;
6685: GO 6558
6687: POP
6688: POP
// end else
6689: GO 7064
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6691: LD_ADDR_VAR 0 15
6695: PUSH
6696: LD_INT 5
6698: PPUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 62
6704: PUSH
6705: EMPTY
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 2
6714: PUSH
6715: LD_INT 30
6717: PUSH
6718: LD_INT 32
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 4
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 30
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 30
6747: PUSH
6748: LD_INT 31
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 70
6770: ST_TO_ADDR
// if empty then
6771: LD_VAR 0 15
6775: IFFALSE 6792
// empty := ReverseArray ( empty ) ;
6777: LD_ADDR_VAR 0 15
6781: PUSH
6782: LD_VAR 0 15
6786: PPUSH
6787: CALL 88132 0 1
6791: ST_TO_ADDR
// for i in sol do
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_VAR 0 12
6801: PUSH
6802: FOR_IN
6803: IFFALSE 7062
// begin tag := GetTag ( i ) ;
6805: LD_ADDR_VAR 0 8
6809: PUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 110
6819: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6820: LD_VAR 0 1
6824: PPUSH
6825: CALL_OW 256
6829: PUSH
6830: LD_INT 1000
6832: LESS
6833: PUSH
6834: LD_VAR 0 8
6838: PUSH
6839: LD_INT 1
6841: NONEQUAL
6842: AND
6843: IFFALSE 6883
// begin SetTag ( i , tHeal ) ;
6845: LD_VAR 0 1
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 72
6864: PPUSH
6865: LD_INT 15
6867: PPUSH
6868: CALL_OW 111
// AddComHold ( i ) ;
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 200
// continue ;
6881: GO 6802
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6883: LD_VAR 0 1
6887: PPUSH
6888: CALL_OW 256
6892: PUSH
6893: LD_INT 1000
6895: EQUAL
6896: PUSH
6897: LD_VAR 0 8
6901: PUSH
6902: LD_INT 1
6904: EQUAL
6905: AND
6906: IFFALSE 6987
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6908: LD_VAR 0 1
6912: PPUSH
6913: CALL_OW 459
6917: PUSH
6918: LD_VAR 0 12
6922: PPUSH
6923: LD_INT 50
6925: PUSH
6926: EMPTY
6927: LIST
6928: PUSH
6929: LD_INT 120
6931: PUSH
6932: LD_INT 6
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 72
6947: PPUSH
6948: CALL 57256 0 1
6952: PUSH
6953: LD_INT 3
6955: LESS
6956: OR
6957: IFFALSE 6973
// SetTag ( i , tMine ) else
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 6
6966: PPUSH
6967: CALL_OW 109
6971: GO 6985
// SetTag ( i , 0 ) ;
6973: LD_VAR 0 1
6977: PPUSH
6978: LD_INT 0
6980: PPUSH
6981: CALL_OW 109
// continue ;
6985: GO 6802
// end ; if tag = tMine then
6987: LD_VAR 0 8
6991: PUSH
6992: LD_INT 6
6994: EQUAL
6995: IFFALSE 6999
// continue ;
6997: GO 6802
// if not IsInUnit ( i ) and not tag and empty then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 310
7008: NOT
7009: PUSH
7010: LD_VAR 0 8
7014: NOT
7015: AND
7016: PUSH
7017: LD_VAR 0 15
7021: AND
7022: IFFALSE 7060
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_VAR 0 15
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7042: LD_ADDR_VAR 0 15
7046: PUSH
7047: LD_VAR 0 15
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 3
7059: ST_TO_ADDR
// end ; end ;
7060: GO 6802
7062: POP
7063: POP
// end ; end ; end ;
7064: PPOPN 16
7066: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7067: LD_EXP 56
7071: PPUSH
7072: CALL 57256 0 1
7076: IFFALSE 7221
7078: GO 7080
7080: DISABLE
7081: LD_INT 0
7083: PPUSH
// begin enable ;
7084: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_EXP 56
7094: PPUSH
7095: LD_INT 50
7097: PUSH
7098: EMPTY
7099: LIST
7100: PPUSH
7101: CALL_OW 72
7105: PUSH
7106: FOR_IN
7107: IFFALSE 7219
// begin if not HasTask ( i ) then
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 314
7118: NOT
7119: IFFALSE 7133
// AddComMoveToArea ( i , khatamArea ) ;
7121: LD_VAR 0 1
7125: PPUSH
7126: LD_INT 11
7128: PPUSH
7129: CALL_OW 173
// if IsInArea ( i , khatamArea ) then
7133: LD_VAR 0 1
7137: PPUSH
7138: LD_INT 11
7140: PPUSH
7141: CALL_OW 308
7145: IFFALSE 7217
// begin RemoveUnit ( i ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 64
// arEscapist := arEscapist diff i ;
7156: LD_ADDR_EXP 56
7160: PUSH
7161: LD_EXP 56
7165: PUSH
7166: LD_VAR 0 1
7170: DIFF
7171: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7172: LD_ADDR_EXP 21
7176: PUSH
7177: LD_EXP 21
7181: PPUSH
7182: CALL 94226 0 1
7186: ST_TO_ADDR
// if i = Dietrich then
7187: LD_VAR 0 1
7191: PUSH
7192: LD_EXP 50
7196: EQUAL
7197: IFFALSE 7217
// begin gensherEscaped := true ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7207: LD_INT 1
7209: PPUSH
7210: LD_STRING 10_GensherEscape_1
7212: PPUSH
7213: CALL_OW 39
// end ; end ; end ;
7217: GO 7106
7219: POP
7220: POP
// end ;
7221: PPOPN 1
7223: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// uc_side := 5 ;
7231: LD_ADDR_OWVAR 20
7235: PUSH
7236: LD_INT 5
7238: ST_TO_ADDR
// uc_nation := nation_arabian ;
7239: LD_ADDR_OWVAR 21
7243: PUSH
7244: LD_INT 2
7246: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 5
7254: PUSH
7255: LD_INT 6
7257: PUSH
7258: LD_INT 7
7260: PUSH
7261: LD_INT 8
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: LD_OWVAR 67
7274: ARRAY
7275: ST_TO_ADDR
// arAttackersInf := [ ] ;
7276: LD_ADDR_EXP 57
7280: PUSH
7281: EMPTY
7282: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7283: LD_ADDR_EXP 58
7287: PUSH
7288: EMPTY
7289: ST_TO_ADDR
// InitHC_All ( ) ;
7290: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_INT 3
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 5
7312: PUSH
7313: LD_INT 6
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: LD_OWVAR 67
7326: ARRAY
7327: PUSH
7328: FOR_TO
7329: IFFALSE 7431
// begin PrepareSoldier ( false , skill ) ;
7331: LD_INT 0
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: CALL_OW 381
// un := CreateHuman ;
7343: LD_ADDR_VAR 0 4
7347: PUSH
7348: CALL_OW 44
7352: ST_TO_ADDR
// if i mod 2 = 0 then
7353: LD_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: MOD
7361: PUSH
7362: LD_INT 0
7364: EQUAL
7365: IFFALSE 7379
// SetClass ( un , class_mortar ) ;
7367: LD_VAR 0 4
7371: PPUSH
7372: LD_INT 8
7374: PPUSH
7375: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7379: LD_VAR 0 4
7383: PPUSH
7384: LD_INT 19
7386: PPUSH
7387: LD_INT 0
7389: PPUSH
7390: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7394: LD_ADDR_EXP 57
7398: PUSH
7399: LD_EXP 57
7403: PPUSH
7404: LD_VAR 0 4
7408: PPUSH
7409: CALL 92865 0 2
7413: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7414: LD_VAR 0 4
7418: PPUSH
7419: LD_INT 104
7421: PPUSH
7422: LD_INT 60
7424: PPUSH
7425: CALL_OW 114
// end ;
7429: GO 7328
7431: POP
7432: POP
// for i := 1 to 3 do
7433: LD_ADDR_VAR 0 2
7437: PUSH
7438: DOUBLE
7439: LD_INT 1
7441: DEC
7442: ST_TO_ADDR
7443: LD_INT 3
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7599
// begin PrepareMechanic ( false , skill ) ;
7449: LD_INT 0
7451: PPUSH
7452: LD_VAR 0 3
7456: PPUSH
7457: CALL_OW 383
// un := CreateHuman ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: CALL_OW 44
7470: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7471: LD_INT 14
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_INT 27
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: LD_INT 2
7497: MOD
7498: PUSH
7499: LD_INT 1
7501: PLUS
7502: ARRAY
7503: PPUSH
7504: LD_INT 80
7506: PPUSH
7507: CALL 59994 0 5
// veh := CreateVehicle ;
7511: LD_ADDR_VAR 0 5
7515: PUSH
7516: CALL_OW 45
7520: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7521: LD_VAR 0 5
7525: PPUSH
7526: LD_INT 4
7528: PPUSH
7529: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7533: LD_VAR 0 5
7537: PPUSH
7538: LD_INT 18
7540: PPUSH
7541: LD_INT 0
7543: PPUSH
7544: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7548: LD_VAR 0 4
7552: PPUSH
7553: LD_VAR 0 5
7557: PPUSH
7558: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7562: LD_VAR 0 4
7566: PPUSH
7567: LD_INT 129
7569: PPUSH
7570: LD_INT 20
7572: PPUSH
7573: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7577: LD_ADDR_EXP 58
7581: PUSH
7582: LD_EXP 58
7586: PPUSH
7587: LD_VAR 0 5
7591: PPUSH
7592: CALL 92865 0 2
7596: ST_TO_ADDR
// end ;
7597: GO 7446
7599: POP
7600: POP
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: DOUBLE
7614: LD_INT 1
7616: DEC
7617: ST_TO_ADDR
7618: LD_INT 1
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_OWVAR 67
7640: ARRAY
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7774
// begin PrepareMechanic ( false , skill ) ;
7645: LD_INT 0
7647: PPUSH
7648: LD_VAR 0 3
7652: PPUSH
7653: CALL_OW 383
// un := CreateHuman ;
7657: LD_ADDR_VAR 0 4
7661: PUSH
7662: CALL_OW 44
7666: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7667: LD_INT 14
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 26
7678: PPUSH
7679: LD_INT 80
7681: PPUSH
7682: CALL 59994 0 5
// veh := CreateVehicle ;
7686: LD_ADDR_VAR 0 5
7690: PUSH
7691: CALL_OW 45
7695: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7696: LD_VAR 0 5
7700: PPUSH
7701: LD_INT 4
7703: PPUSH
7704: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 18
7715: PPUSH
7716: LD_INT 0
7718: PPUSH
7719: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7723: LD_VAR 0 4
7727: PPUSH
7728: LD_VAR 0 5
7732: PPUSH
7733: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7737: LD_VAR 0 4
7741: PPUSH
7742: LD_INT 133
7744: PPUSH
7745: LD_INT 40
7747: PPUSH
7748: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7752: LD_ADDR_EXP 58
7756: PUSH
7757: LD_EXP 58
7761: PPUSH
7762: LD_VAR 0 5
7766: PPUSH
7767: CALL 92865 0 2
7771: ST_TO_ADDR
// end ;
7772: GO 7642
7774: POP
7775: POP
// wait ( 0 0$2 ) ;
7776: LD_INT 70
7778: PPUSH
7779: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7783: LD_ADDR_VAR 0 2
7787: PUSH
7788: DOUBLE
7789: LD_INT 1
7791: DEC
7792: ST_TO_ADDR
7793: LD_INT 1
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: LD_INT 4
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: LD_OWVAR 67
7815: ARRAY
7816: PUSH
7817: FOR_TO
7818: IFFALSE 7980
// begin PrepareMechanic ( false , skill ) ;
7820: LD_INT 0
7822: PPUSH
7823: LD_VAR 0 3
7827: PPUSH
7828: CALL_OW 383
// un := CreateHuman ;
7832: LD_ADDR_VAR 0 4
7836: PUSH
7837: CALL_OW 44
7841: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7842: LD_INT 14
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: LD_INT 28
7853: PPUSH
7854: LD_INT 80
7856: PPUSH
7857: CALL 59994 0 5
// veh := CreateVehicle ;
7861: LD_ADDR_VAR 0 5
7865: PUSH
7866: CALL_OW 45
7870: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7871: LD_VAR 0 5
7875: PPUSH
7876: LD_INT 4
7878: PPUSH
7879: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7883: LD_VAR 0 5
7887: PPUSH
7888: LD_INT 18
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7898: LD_VAR 0 4
7902: PPUSH
7903: LD_VAR 0 5
7907: PPUSH
7908: CALL_OW 52
// if i mod 2 = 0 then
7912: LD_VAR 0 2
7916: PUSH
7917: LD_INT 2
7919: MOD
7920: PUSH
7921: LD_INT 0
7923: EQUAL
7924: IFFALSE 7943
// ComMoveXY ( un , 136 , 61 ) else
7926: LD_VAR 0 4
7930: PPUSH
7931: LD_INT 136
7933: PPUSH
7934: LD_INT 61
7936: PPUSH
7937: CALL_OW 111
7941: GO 7958
// ComMoveXY ( un , 137 , 41 ) ;
7943: LD_VAR 0 4
7947: PPUSH
7948: LD_INT 137
7950: PPUSH
7951: LD_INT 41
7953: PPUSH
7954: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7958: LD_ADDR_EXP 58
7962: PUSH
7963: LD_EXP 58
7967: PPUSH
7968: LD_VAR 0 5
7972: PPUSH
7973: CALL 92865 0 2
7977: ST_TO_ADDR
// end ;
7978: GO 7817
7980: POP
7981: POP
// arabianAttackSpawned := true ;
7982: LD_ADDR_EXP 12
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// end ;
7990: LD_VAR 0 1
7994: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
7995: LD_EXP 57
7999: IFFALSE 8412
8001: GO 8003
8003: DISABLE
8004: LD_INT 0
8006: PPUSH
8007: PPUSH
8008: PPUSH
// begin wait ( 0 0$10 ) ;
8009: LD_INT 350
8011: PPUSH
8012: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: LD_EXP 57
8025: PPUSH
8026: LD_INT 25
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 50
8038: PUSH
8039: EMPTY
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 72
8050: ST_TO_ADDR
// for i in tmp do
8051: LD_ADDR_VAR 0 1
8055: PUSH
8056: LD_VAR 0 2
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8187
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: LD_INT 120
8084: PUSH
8085: LD_INT 11
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 21
8101: PUSH
8102: LD_INT 2
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 21
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 69
8133: PPUSH
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 74
8143: ST_TO_ADDR
// if not nearest then
8144: LD_VAR 0 3
8148: NOT
8149: IFFALSE 8153
// break ;
8151: GO 8187
// SetTag ( nearest , tMined ) ;
8153: LD_VAR 0 3
8157: PPUSH
8158: LD_INT 11
8160: PPUSH
8161: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 0
8175: PPUSH
8176: LD_VAR 0 3
8180: PPUSH
8181: CALL_OW 132
// end ;
8185: GO 8061
8187: POP
8188: POP
// if hasBase and epsilon then
8189: LD_EXP 9
8193: PUSH
8194: LD_EXP 10
8198: AND
8199: IFFALSE 8223
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8201: LD_VAR 0 2
8205: PPUSH
8206: LD_INT 0
8208: PPUSH
8209: LD_INT 0
8211: PPUSH
8212: LD_EXP 10
8216: PPUSH
8217: CALL_OW 192
8221: GO 8238
// AddComMoveXY ( tmp , 107 , 59 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 107
8230: PPUSH
8231: LD_INT 59
8233: PPUSH
8234: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8245: LD_EXP 50
8249: PPUSH
8250: CALL_OW 301
8254: PUSH
8255: LD_EXP 13
8259: OR
8260: IFFALSE 8238
// if not gensherEscaped then
8262: LD_EXP 13
8266: NOT
8267: IFFALSE 8276
// wait ( 1 1$20 ) ;
8269: LD_INT 2800
8271: PPUSH
8272: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8276: LD_ADDR_VAR 0 2
8280: PUSH
8281: LD_EXP 57
8285: PPUSH
8286: LD_INT 50
8288: PUSH
8289: EMPTY
8290: LIST
8291: PPUSH
8292: CALL_OW 72
8296: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8297: LD_VAR 0 2
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 117
8307: PPUSH
8308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// for i in tmp do
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: LD_VAR 0 2
8328: PUSH
8329: FOR_IN
8330: IFFALSE 8403
// if IsInArea ( i , arAttackSpawn2Area ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: LD_INT 19
8339: PPUSH
8340: CALL_OW 308
8344: IFFALSE 8389
// begin tmp := tmp diff i ;
8346: LD_ADDR_VAR 0 2
8350: PUSH
8351: LD_VAR 0 2
8355: PUSH
8356: LD_VAR 0 1
8360: DIFF
8361: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8362: LD_ADDR_EXP 57
8366: PUSH
8367: LD_EXP 57
8371: PUSH
8372: LD_VAR 0 1
8376: DIFF
8377: ST_TO_ADDR
// RemoveUnit ( i ) ;
8378: LD_VAR 0 1
8382: PPUSH
8383: CALL_OW 64
// end else
8387: GO 8401
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8389: LD_VAR 0 1
8393: PPUSH
8394: LD_INT 19
8396: PPUSH
8397: CALL_OW 113
8401: GO 8329
8403: POP
8404: POP
// until not tmp ;
8405: LD_VAR 0 2
8409: NOT
8410: IFFALSE 8312
// end ;
8412: PPOPN 3
8414: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , p ;
8415: LD_EXP 58
8419: IFFALSE 8703
8421: GO 8423
8423: DISABLE
8424: LD_INT 0
8426: PPUSH
8427: PPUSH
8428: PPUSH
// begin p := 0 ;
8429: LD_ADDR_VAR 0 3
8433: PUSH
8434: LD_INT 0
8436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8437: LD_INT 35
8439: PPUSH
8440: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8444: LD_ADDR_VAR 0 2
8448: PUSH
8449: LD_EXP 58
8453: PPUSH
8454: LD_INT 50
8456: PUSH
8457: EMPTY
8458: LIST
8459: PPUSH
8460: CALL_OW 72
8464: ST_TO_ADDR
// for i in tmp do
8465: LD_ADDR_VAR 0 1
8469: PUSH
8470: LD_VAR 0 2
8474: PUSH
8475: FOR_IN
8476: IFFALSE 8513
// AgressiveMove ( i , [ [ 143 , 38 ] , [ 111 , 31 ] ] ) ;
8478: LD_VAR 0 1
8482: PPUSH
8483: LD_INT 143
8485: PUSH
8486: LD_INT 38
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 111
8495: PUSH
8496: LD_INT 31
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL 95469 0 2
8511: GO 8475
8513: POP
8514: POP
// if IsDead ( Dietrich ) then
8515: LD_EXP 50
8519: PPUSH
8520: CALL_OW 301
8524: IFFALSE 8541
// p := Inc ( p ) ;
8526: LD_ADDR_VAR 0 3
8530: PUSH
8531: LD_VAR 0 3
8535: PPUSH
8536: CALL 94226 0 1
8540: ST_TO_ADDR
// until not tmp or gensherEscaped or p > 40 ;
8541: LD_VAR 0 2
8545: NOT
8546: PUSH
8547: LD_EXP 13
8551: OR
8552: PUSH
8553: LD_VAR 0 3
8557: PUSH
8558: LD_INT 40
8560: GREATER
8561: OR
8562: IFFALSE 8437
// if not arAttackersVeh then
8564: LD_EXP 58
8568: NOT
8569: IFFALSE 8573
// exit ;
8571: GO 8703
// repeat wait ( 0 0$1 ) ;
8573: LD_INT 35
8575: PPUSH
8576: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8580: LD_ADDR_VAR 0 2
8584: PUSH
8585: LD_EXP 58
8589: PPUSH
8590: LD_INT 50
8592: PUSH
8593: EMPTY
8594: LIST
8595: PPUSH
8596: CALL_OW 72
8600: ST_TO_ADDR
// for i in tmp do
8601: LD_ADDR_VAR 0 1
8605: PUSH
8606: LD_VAR 0 2
8610: PUSH
8611: FOR_IN
8612: IFFALSE 8694
// if IsInArea ( i , arAttackSpawnArea ) then
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_INT 18
8621: PPUSH
8622: CALL_OW 308
8626: IFFALSE 8680
// begin if IsInUnit ( i ) then
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 310
8637: IFFALSE 8653
// RemoveUnit ( IsInUnit ( i ) ) ;
8639: LD_VAR 0 1
8643: PPUSH
8644: CALL_OW 310
8648: PPUSH
8649: CALL_OW 64
// RemoveUnit ( i ) ;
8653: LD_VAR 0 1
8657: PPUSH
8658: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8662: LD_ADDR_EXP 58
8666: PUSH
8667: LD_EXP 58
8671: PUSH
8672: LD_VAR 0 1
8676: DIFF
8677: ST_TO_ADDR
// end else
8678: GO 8692
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8680: LD_VAR 0 1
8684: PPUSH
8685: LD_INT 18
8687: PPUSH
8688: CALL_OW 113
8692: GO 8611
8694: POP
8695: POP
// until not tmp ;
8696: LD_VAR 0 2
8700: NOT
8701: IFFALSE 8573
// end ; end_of_file
8703: PPOPN 3
8705: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , skill , sources ; begin
8706: LD_INT 0
8708: PPUSH
8709: PPUSH
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
// uc_side := 3 ;
8714: LD_ADDR_OWVAR 20
8718: PUSH
8719: LD_INT 3
8721: ST_TO_ADDR
// uc_nation := nation_russian ;
8722: LD_ADDR_OWVAR 21
8726: PUSH
8727: LD_INT 3
8729: ST_TO_ADDR
// ruForces := [ ] ;
8730: LD_ADDR_EXP 59
8734: PUSH
8735: EMPTY
8736: ST_TO_ADDR
// ruForces2 := [ ] ;
8737: LD_ADDR_EXP 60
8741: PUSH
8742: EMPTY
8743: ST_TO_ADDR
// ruMech := [ ] ;
8744: LD_ADDR_EXP 63
8748: PUSH
8749: EMPTY
8750: ST_TO_ADDR
// ruMech2 := [ ] ;
8751: LD_ADDR_EXP 64
8755: PUSH
8756: EMPTY
8757: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8758: LD_ADDR_EXP 65
8762: PUSH
8763: LD_INT 37
8765: PUSH
8766: LD_INT 63
8768: PUSH
8769: LD_INT 52
8771: PUSH
8772: LD_INT 54
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: ST_TO_ADDR
// ruBaseArea := 0 ;
8781: LD_ADDR_EXP 66
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8789: LD_ADDR_EXP 67
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// ruBase := 0 ;
8797: LD_ADDR_EXP 68
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// ruBase2 := 0 ;
8805: LD_ADDR_EXP 69
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// ruConstructList := [ ] ;
8813: LD_ADDR_EXP 70
8817: PUSH
8818: EMPTY
8819: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8820: LD_ADDR_EXP 71
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 1
8833: PUSH
8834: LD_INT 43
8836: PUSH
8837: LD_INT 44
8839: PUSH
8840: LD_INT 45
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_INT 3
8853: PPUSH
8854: CALL_OW 12
8858: ARRAY
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 22
8868: PUSH
8869: LD_INT 3
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: LD_INT 43
8877: PUSH
8878: LD_INT 44
8880: PUSH
8881: LD_INT 45
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 1
8891: PPUSH
8892: LD_INT 3
8894: PPUSH
8895: CALL_OW 12
8899: ARRAY
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 3
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: LD_INT 43
8918: PUSH
8919: LD_INT 44
8921: PUSH
8922: LD_INT 45
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 1
8932: PPUSH
8933: LD_INT 3
8935: PPUSH
8936: CALL_OW 12
8940: ARRAY
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: ST_TO_ADDR
// ruCratesArea := 0 ;
8953: LD_ADDR_EXP 72
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// ruCratesArea2 := 0 ;
8961: LD_ADDR_EXP 73
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// ruHealPoint := [ ] ;
8969: LD_ADDR_EXP 74
8973: PUSH
8974: EMPTY
8975: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
8976: LD_ADDR_EXP 75
8980: PUSH
8981: EMPTY
8982: ST_TO_ADDR
// ruBuildings := [ ] ;
8983: LD_ADDR_EXP 76
8987: PUSH
8988: EMPTY
8989: ST_TO_ADDR
// ruBuildings2 := [ ] ;
8990: LD_ADDR_EXP 77
8994: PUSH
8995: EMPTY
8996: ST_TO_ADDR
// ruTanks := [ ] ;
8997: LD_ADDR_EXP 79
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// ruTanks2 := [ ] ;
9004: LD_ADDR_EXP 80
9008: PUSH
9009: EMPTY
9010: ST_TO_ADDR
// ruParkingArea := 0 ;
9011: LD_ADDR_EXP 82
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// ruParkingArea2 := 0 ;
9019: LD_ADDR_EXP 83
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: DOUBLE
9033: LD_INT 1
9035: DEC
9036: ST_TO_ADDR
9037: LD_INT 2
9039: PUSH
9040: LD_INT 3
9042: PUSH
9043: LD_INT 4
9045: PUSH
9046: LD_INT 4
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: PUSH
9055: LD_OWVAR 67
9059: ARRAY
9060: PUSH
9061: FOR_TO
9062: IFFALSE 9122
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9064: LD_ADDR_EXP 70
9068: PUSH
9069: LD_EXP 70
9073: PPUSH
9074: LD_INT 22
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: LD_INT 43
9085: PUSH
9086: LD_INT 44
9088: PUSH
9089: LD_INT 45
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 1
9099: PPUSH
9100: LD_INT 3
9102: PPUSH
9103: CALL_OW 12
9107: ARRAY
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL 92865 0 2
9119: ST_TO_ADDR
9120: GO 9061
9122: POP
9123: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9124: LD_ADDR_VAR 0 6
9128: PUSH
9129: LD_INT 43
9131: PUSH
9132: LD_INT 68
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 43
9141: PUSH
9142: LD_INT 79
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 99
9151: PUSH
9152: LD_INT 114
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 103
9161: PUSH
9162: LD_INT 114
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 156
9171: PUSH
9172: LD_INT 92
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: LD_INT 152
9181: PUSH
9182: LD_INT 85
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: ST_TO_ADDR
// for i in sources do
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_VAR 0 6
9206: PUSH
9207: FOR_IN
9208: IFFALSE 9237
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9210: LD_VAR 0 2
9214: PUSH
9215: LD_INT 1
9217: ARRAY
9218: PPUSH
9219: LD_VAR 0 2
9223: PUSH
9224: LD_INT 2
9226: ARRAY
9227: PPUSH
9228: LD_INT 3
9230: PPUSH
9231: CALL_OW 441
9235: GO 9207
9237: POP
9238: POP
// if Difficulty > 2 then
9239: LD_OWVAR 67
9243: PUSH
9244: LD_INT 2
9246: GREATER
9247: IFFALSE 9275
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9249: LD_INT 52
9251: PPUSH
9252: LD_INT 6
9254: PPUSH
9255: LD_INT 2
9257: PPUSH
9258: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9262: LD_INT 58
9264: PPUSH
9265: LD_INT 6
9267: PPUSH
9268: LD_INT 2
9270: PPUSH
9271: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9275: LD_ADDR_VAR 0 5
9279: PUSH
9280: LD_INT 5
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: LD_INT 7
9288: PUSH
9289: LD_INT 8
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: PUSH
9298: LD_OWVAR 67
9302: ARRAY
9303: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9304: LD_ADDR_EXP 61
9308: PUSH
9309: LD_STRING Tsaritsyn
9311: PPUSH
9312: LD_INT 0
9314: PPUSH
9315: LD_STRING 
9317: PPUSH
9318: CALL 55133 0 3
9322: ST_TO_ADDR
// for i := 1 to 4 do
9323: LD_ADDR_VAR 0 2
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_INT 4
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9555
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: DOUBLE
9345: LD_INT 1
9347: DEC
9348: ST_TO_ADDR
9349: LD_INT 5
9351: PUSH
9352: LD_INT 6
9354: PUSH
9355: LD_INT 8
9357: PUSH
9358: LD_INT 9
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: LD_OWVAR 67
9371: ARRAY
9372: PUSH
9373: LD_INT 3
9375: PUSH
9376: LD_INT 4
9378: PUSH
9379: LD_INT 5
9381: PUSH
9382: LD_INT 6
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_OWVAR 67
9395: ARRAY
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 4
9402: PUSH
9403: LD_INT 5
9405: PUSH
9406: LD_INT 6
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: LD_OWVAR 67
9419: ARRAY
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: LD_VAR 0 2
9455: ARRAY
9456: PUSH
9457: FOR_TO
9458: IFFALSE 9551
// begin PrepareHuman ( false , i , skill ) ;
9460: LD_INT 0
9462: PPUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: LD_VAR 0 5
9472: PPUSH
9473: CALL_OW 380
// un := CreateHuman ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: CALL_OW 44
9486: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9487: LD_ADDR_EXP 59
9491: PUSH
9492: LD_EXP 59
9496: PPUSH
9497: LD_VAR 0 4
9501: PPUSH
9502: CALL 92865 0 2
9506: ST_TO_ADDR
// if i = 3 then
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 3
9514: EQUAL
9515: IFFALSE 9549
// begin ruMech := Join ( ruMech , un ) ;
9517: LD_ADDR_EXP 63
9521: PUSH
9522: LD_EXP 63
9526: PPUSH
9527: LD_VAR 0 4
9531: PPUSH
9532: CALL 92865 0 2
9536: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9537: LD_VAR 0 4
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 336
// end ; end ;
9549: GO 9457
9551: POP
9552: POP
9553: GO 9336
9555: POP
9556: POP
// if Difficulty < 4 then
9557: LD_OWVAR 67
9561: PUSH
9562: LD_INT 4
9564: LESS
9565: IFFALSE 9569
// exit ;
9567: GO 9841
// PrepareSoldier ( sex_male , skill + 1 ) ;
9569: LD_INT 1
9571: PPUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 1
9579: PLUS
9580: PPUSH
9581: CALL_OW 381
// hc_importance := 100 ;
9585: LD_ADDR_OWVAR 32
9589: PUSH
9590: LD_INT 100
9592: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9593: LD_ADDR_EXP 62
9597: PUSH
9598: CALL_OW 44
9602: ST_TO_ADDR
// InitHc_All ( ) ;
9603: CALL_OW 584
// for i := 1 to 4 do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_INT 4
9619: PUSH
9620: FOR_TO
9621: IFFALSE 9839
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9623: LD_ADDR_VAR 0 3
9627: PUSH
9628: DOUBLE
9629: LD_INT 1
9631: DEC
9632: ST_TO_ADDR
9633: LD_INT 5
9635: PUSH
9636: LD_INT 6
9638: PUSH
9639: LD_INT 8
9641: PUSH
9642: LD_INT 9
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: PUSH
9651: LD_OWVAR 67
9655: ARRAY
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: LD_INT 4
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: LD_INT 6
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: PUSH
9675: LD_OWVAR 67
9679: ARRAY
9680: PUSH
9681: LD_INT 3
9683: PUSH
9684: LD_INT 4
9686: PUSH
9687: LD_INT 5
9689: PUSH
9690: LD_INT 6
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_OWVAR 67
9703: ARRAY
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 3
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 3
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_OWVAR 67
9727: ARRAY
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: LD_VAR 0 2
9739: ARRAY
9740: PUSH
9741: FOR_TO
9742: IFFALSE 9835
// begin PrepareHuman ( false , i , skill ) ;
9744: LD_INT 0
9746: PPUSH
9747: LD_VAR 0 2
9751: PPUSH
9752: LD_VAR 0 5
9756: PPUSH
9757: CALL_OW 380
// un := CreateHuman ;
9761: LD_ADDR_VAR 0 4
9765: PUSH
9766: CALL_OW 44
9770: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9771: LD_ADDR_EXP 60
9775: PUSH
9776: LD_EXP 60
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL 92865 0 2
9790: ST_TO_ADDR
// if i = 3 then
9791: LD_VAR 0 2
9795: PUSH
9796: LD_INT 3
9798: EQUAL
9799: IFFALSE 9833
// begin ruMech2 := Join ( ruMech2 , un ) ;
9801: LD_ADDR_EXP 64
9805: PUSH
9806: LD_EXP 64
9810: PPUSH
9811: LD_VAR 0 4
9815: PPUSH
9816: CALL 92865 0 2
9820: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9821: LD_VAR 0 4
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: CALL_OW 336
// end ; end ;
9833: GO 9741
9835: POP
9836: POP
9837: GO 9620
9839: POP
9840: POP
// end ;
9841: LD_VAR 0 1
9845: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9846: LD_EXP 66
9850: PPUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 50
9863: PUSH
9864: EMPTY
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 70
9875: PUSH
9876: LD_EXP 76
9880: PPUSH
9881: CALL 57256 0 1
9885: PUSH
9886: LD_INT 3
9888: LESS
9889: AND
9890: IFFALSE 10154
9892: GO 9894
9894: DISABLE
9895: LD_INT 0
9897: PPUSH
// begin enable ;
9898: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9899: LD_ADDR_EXP 70
9903: PUSH
9904: LD_EXP 70
9908: PUSH
9909: LD_INT 22
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_INT 24
9917: PUSH
9918: LD_INT 24
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_OWVAR 67
9931: ARRAY
9932: PUSH
9933: LD_INT 1
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: LD_INT 44
9941: PUSH
9942: LD_INT 45
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 1
9951: PPUSH
9952: LD_INT 2
9954: PPUSH
9955: CALL_OW 12
9959: ARRAY
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_INT 24
9975: PUSH
9976: LD_INT 24
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: LD_OWVAR 67
9989: ARRAY
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: LD_INT 3
9996: PUSH
9997: LD_INT 45
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_INT 24
10014: PUSH
10015: LD_INT 24
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: LD_OWVAR 67
10028: ARRAY
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 45
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: ADD
10050: ST_TO_ADDR
// for i := Difficulty downto 1 do
10051: LD_ADDR_VAR 0 1
10055: PUSH
10056: DOUBLE
10057: LD_OWVAR 67
10061: INC
10062: ST_TO_ADDR
10063: LD_INT 1
10065: PUSH
10066: FOR_DOWNTO
10067: IFFALSE 10152
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10069: LD_ADDR_EXP 70
10073: PUSH
10074: LD_EXP 70
10078: PPUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 22
10084: PUSH
10085: LD_INT 24
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: PUSH
10097: LD_OWVAR 67
10101: ARRAY
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: LD_INT 3
10108: PUSH
10109: LD_INT 44
10111: PUSH
10112: LD_INT 45
10114: PUSH
10115: LD_INT 45
10117: PUSH
10118: LD_INT 43
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 1
10129: PPUSH
10130: LD_INT 4
10132: PPUSH
10133: CALL_OW 12
10137: ARRAY
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL 92865 0 2
10149: ST_TO_ADDR
10150: GO 10066
10152: POP
10153: POP
// end ;
10154: PPOPN 1
10156: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10157: LD_EXP 67
10161: PPUSH
10162: LD_INT 30
10164: PUSH
10165: LD_INT 3
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 50
10174: PUSH
10175: EMPTY
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 70
10186: PUSH
10187: LD_EXP 77
10191: PPUSH
10192: CALL 57256 0 1
10196: PUSH
10197: LD_INT 3
10199: LESS
10200: AND
10201: IFFALSE 10396
10203: GO 10205
10205: DISABLE
// begin enable ;
10206: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10207: LD_ADDR_EXP 71
10211: PUSH
10212: LD_EXP 71
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_INT 22
10222: PUSH
10223: LD_INT 24
10225: PUSH
10226: LD_INT 24
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 1
10237: PPUSH
10238: LD_INT 4
10240: PPUSH
10241: CALL_OW 12
10245: ARRAY
10246: PUSH
10247: LD_INT 1
10249: PUSH
10250: LD_INT 3
10252: PUSH
10253: LD_INT 44
10255: PUSH
10256: LD_INT 45
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 1
10265: PPUSH
10266: LD_INT 2
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 24
10289: PUSH
10290: LD_INT 24
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_INT 4
10304: PPUSH
10305: CALL_OW 12
10309: ARRAY
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: LD_INT 45
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 22
10328: PUSH
10329: LD_INT 22
10331: PUSH
10332: LD_INT 24
10334: PUSH
10335: LD_INT 24
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_INT 4
10349: PPUSH
10350: CALL_OW 12
10354: ARRAY
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: LD_INT 3
10361: PUSH
10362: LD_INT 45
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 22
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: LD_INT 3
10379: PUSH
10380: LD_INT 43
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: ADD
10395: ST_TO_ADDR
// end ;
10396: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10397: LD_INT 0
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
10406: PPUSH
// case Difficulty of 1 :
10407: LD_OWVAR 67
10411: PUSH
10412: LD_INT 1
10414: DOUBLE
10415: EQUAL
10416: IFTRUE 10420
10418: GO 10439
10420: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10421: LD_ADDR_VAR 0 4
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 2
10431: PPUSH
10432: CALL_OW 12
10436: ST_TO_ADDR
10437: GO 10513
10439: LD_INT 2
10441: DOUBLE
10442: EQUAL
10443: IFTRUE 10447
10445: GO 10466
10447: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10448: LD_ADDR_VAR 0 4
10452: PUSH
10453: LD_INT 1
10455: PPUSH
10456: LD_INT 3
10458: PPUSH
10459: CALL_OW 12
10463: ST_TO_ADDR
10464: GO 10513
10466: LD_INT 3
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10493
10474: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10475: LD_ADDR_VAR 0 4
10479: PUSH
10480: LD_INT 2
10482: PPUSH
10483: LD_INT 3
10485: PPUSH
10486: CALL_OW 12
10490: ST_TO_ADDR
10491: GO 10513
10493: LD_INT 4
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10512
10501: POP
// spawn := 3 ; end ;
10502: LD_ADDR_VAR 0 4
10506: PUSH
10507: LD_INT 3
10509: ST_TO_ADDR
10510: GO 10513
10512: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10513: LD_ADDR_VAR 0 6
10517: PUSH
10518: LD_INT 24
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 23
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_VAR 0 4
10536: ARRAY
10537: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10538: LD_ADDR_VAR 0 5
10542: PUSH
10543: LD_INT 21
10545: PUSH
10546: LD_INT 22
10548: PUSH
10549: LD_INT 20
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 4
10561: ARRAY
10562: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10563: LD_ADDR_VAR 0 8
10567: PUSH
10568: LD_INT 96
10570: PUSH
10571: LD_INT 102
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 54
10580: PUSH
10581: LD_INT 85
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 146
10590: PUSH
10591: LD_INT 67
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: PUSH
10603: LD_VAR 0 4
10607: ARRAY
10608: ST_TO_ADDR
// for i in ruForces union ruCommander do
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_EXP 59
10618: PUSH
10619: LD_EXP 61
10623: UNION
10624: PUSH
10625: FOR_IN
10626: IFFALSE 10681
// begin PlaceUnitArea ( i , area , false ) ;
10628: LD_VAR 0 2
10632: PPUSH
10633: LD_VAR 0 5
10637: PPUSH
10638: LD_INT 0
10640: PPUSH
10641: CALL_OW 49
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10645: LD_VAR 0 2
10649: PPUSH
10650: LD_VAR 0 8
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 8
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10672: LD_INT 14
10674: PPUSH
10675: CALL_OW 67
// end ;
10679: GO 10625
10681: POP
10682: POP
// DRussianConvoy ;
10683: CALL 28498 0 0
// spawnedRussians := true ;
10687: LD_ADDR_EXP 19
10691: PUSH
10692: LD_INT 1
10694: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10695: LD_INT 1
10697: PPUSH
10698: LD_VAR 0 6
10702: PPUSH
10703: CALL_OW 332
// case spawn of 1 :
10707: LD_VAR 0 4
10711: PUSH
10712: LD_INT 1
10714: DOUBLE
10715: EQUAL
10716: IFTRUE 10720
10718: GO 10730
10720: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10721: LD_INT 102
10723: PPUSH
10724: CALL_OW 427
10728: GO 10767
10730: LD_INT 2
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10748
10738: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10739: LD_INT 103
10741: PPUSH
10742: CALL_OW 427
10746: GO 10767
10748: LD_INT 3
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 10766
10756: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10757: LD_INT 104
10759: PPUSH
10760: CALL_OW 427
10764: GO 10767
10766: POP
// if Difficulty < 4 then
10767: LD_OWVAR 67
10771: PUSH
10772: LD_INT 4
10774: LESS
10775: IFFALSE 10779
// exit ;
10777: GO 10856
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10779: LD_INT 1
10781: PPUSH
10782: LD_INT 22
10784: PPUSH
10785: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10789: LD_ADDR_VAR 0 2
10793: PUSH
10794: LD_EXP 60
10798: PUSH
10799: LD_EXP 62
10803: UNION
10804: PUSH
10805: FOR_IN
10806: IFFALSE 10847
// begin PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10808: LD_VAR 0 2
10812: PPUSH
10813: LD_INT 22
10815: PPUSH
10816: LD_INT 0
10818: PPUSH
10819: CALL_OW 49
// ComAgressiveMove ( i , 54 , 85 ) ;
10823: LD_VAR 0 2
10827: PPUSH
10828: LD_INT 54
10830: PPUSH
10831: LD_INT 85
10833: PPUSH
10834: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10838: LD_INT 28
10840: PPUSH
10841: CALL_OW 67
// end ;
10845: GO 10805
10847: POP
10848: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10849: LD_INT 105
10851: PPUSH
10852: CALL_OW 427
// end ;
10856: LD_VAR 0 1
10860: RET
// export function RussianBase ( group , option ) ; begin
10861: LD_INT 0
10863: PPUSH
// case option of 1 :
10864: LD_VAR 0 2
10868: PUSH
10869: LD_INT 1
10871: DOUBLE
10872: EQUAL
10873: IFTRUE 10877
10875: GO 11333
10877: POP
// begin ruBaseArea := ruBaseCenterArea ;
10878: LD_ADDR_EXP 66
10882: PUSH
10883: LD_INT 26
10885: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
10886: LD_ADDR_EXP 72
10890: PUSH
10891: LD_INT 26
10893: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
10894: LD_ADDR_EXP 76
10898: PUSH
10899: LD_INT 0
10901: PUSH
10902: LD_INT 104
10904: PUSH
10905: LD_INT 110
10907: PUSH
10908: LD_INT 5
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 4
10919: PUSH
10920: LD_INT 98
10922: PUSH
10923: LD_INT 90
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 29
10937: PUSH
10938: LD_INT 103
10940: PUSH
10941: LD_INT 114
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 30
10955: PUSH
10956: LD_INT 99
10958: PUSH
10959: LD_INT 114
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 28
10973: PUSH
10974: LD_INT 100
10976: PUSH
10977: LD_INT 112
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: LD_INT 92
10994: PUSH
10995: LD_INT 101
10997: PUSH
10998: LD_INT 0
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 26
11009: PUSH
11010: LD_INT 97
11012: PUSH
11013: LD_INT 116
11015: PUSH
11016: LD_INT 5
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 17
11027: PUSH
11028: LD_INT 96
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 18
11045: PUSH
11046: LD_INT 88
11048: PUSH
11049: LD_INT 97
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 26
11063: PUSH
11064: LD_INT 106
11066: PUSH
11067: LD_INT 92
11069: PUSH
11070: LD_INT 2
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 6
11081: PUSH
11082: LD_INT 93
11084: PUSH
11085: LD_INT 110
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 21
11099: PUSH
11100: LD_INT 89
11102: PUSH
11103: LD_INT 101
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 16
11117: PUSH
11118: LD_INT 95
11120: PUSH
11121: LD_INT 104
11123: PUSH
11124: LD_INT 4
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 24
11135: PUSH
11136: LD_INT 92
11138: PUSH
11139: LD_INT 105
11141: PUSH
11142: LD_INT 0
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 33
11153: PUSH
11154: LD_INT 88
11156: PUSH
11157: LD_INT 89
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 33
11171: PUSH
11172: LD_INT 86
11174: PUSH
11175: LD_INT 90
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 33
11189: PUSH
11190: LD_INT 85
11192: PUSH
11193: LD_INT 99
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 33
11207: PUSH
11208: LD_INT 85
11210: PUSH
11211: LD_INT 107
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 33
11225: PUSH
11226: LD_INT 105
11228: PUSH
11229: LD_INT 99
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 33
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 92
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 33
11261: PUSH
11262: LD_INT 105
11264: PUSH
11265: LD_INT 92
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11300: LD_ADDR_EXP 74
11304: PUSH
11305: LD_INT 98
11307: PUSH
11308: LD_INT 107
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11315: LD_ADDR_EXP 82
11319: PUSH
11320: LD_INT 30
11322: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11323: LD_ADDR_EXP 84
11327: PUSH
11328: LD_INT 36
11330: ST_TO_ADDR
// end ; 2 :
11331: GO 12357
11333: LD_INT 2
11335: DOUBLE
11336: EQUAL
11337: IFTRUE 11341
11339: GO 11835
11341: POP
// begin ruBaseArea := ruBaseWestArea ;
11342: LD_ADDR_EXP 66
11346: PUSH
11347: LD_INT 28
11349: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11350: LD_ADDR_EXP 72
11354: PUSH
11355: LD_INT 28
11357: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11358: LD_ADDR_EXP 76
11362: PUSH
11363: LD_INT 0
11365: PUSH
11366: LD_INT 49
11368: PUSH
11369: LD_INT 74
11371: PUSH
11372: LD_INT 3
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 4
11383: PUSH
11384: LD_INT 73
11386: PUSH
11387: LD_INT 88
11389: PUSH
11390: LD_INT 5
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 4
11401: PUSH
11402: LD_INT 56
11404: PUSH
11405: LD_INT 62
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 29
11419: PUSH
11420: LD_INT 43
11422: PUSH
11423: LD_INT 68
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 43
11440: PUSH
11441: LD_INT 79
11443: PUSH
11444: LD_INT 5
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 28
11455: PUSH
11456: LD_INT 60
11458: PUSH
11459: LD_INT 75
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: LD_INT 87
11479: PUSH
11480: LD_INT 1
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 26
11491: PUSH
11492: LD_INT 45
11494: PUSH
11495: LD_INT 67
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 17
11509: PUSH
11510: LD_INT 47
11512: PUSH
11513: LD_INT 84
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 18
11527: PUSH
11528: LD_INT 46
11530: PUSH
11531: LD_INT 87
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 26
11545: PUSH
11546: LD_INT 41
11548: PUSH
11549: LD_INT 64
11551: PUSH
11552: LD_INT 5
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 6
11563: PUSH
11564: LD_INT 42
11566: PUSH
11567: LD_INT 74
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 21
11581: PUSH
11582: LD_INT 54
11584: PUSH
11585: LD_INT 91
11587: PUSH
11588: LD_INT 5
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 50
11602: PUSH
11603: LD_INT 83
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 24
11617: PUSH
11618: LD_INT 50
11620: PUSH
11621: LD_INT 90
11623: PUSH
11624: LD_INT 0
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 33
11635: PUSH
11636: LD_INT 51
11638: PUSH
11639: LD_INT 61
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 33
11653: PUSH
11654: LD_INT 42
11656: PUSH
11657: LD_INT 60
11659: PUSH
11660: LD_INT 3
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 33
11671: PUSH
11672: LD_INT 36
11674: PUSH
11675: LD_INT 58
11677: PUSH
11678: LD_INT 3
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 33
11689: PUSH
11690: LD_INT 39
11692: PUSH
11693: LD_INT 59
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 33
11707: PUSH
11708: LD_INT 61
11710: PUSH
11711: LD_INT 64
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 33
11725: PUSH
11726: LD_INT 63
11728: PUSH
11729: LD_INT 90
11731: PUSH
11732: LD_INT 5
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 33
11743: PUSH
11744: LD_INT 64
11746: PUSH
11747: LD_INT 88
11749: PUSH
11750: LD_INT 5
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 33
11761: PUSH
11762: LD_INT 72
11764: PUSH
11765: LD_INT 82
11767: PUSH
11768: LD_INT 5
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11802: LD_ADDR_EXP 74
11806: PUSH
11807: LD_INT 45
11809: PUSH
11810: LD_INT 75
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11817: LD_ADDR_EXP 82
11821: PUSH
11822: LD_INT 31
11824: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11825: LD_ADDR_EXP 84
11829: PUSH
11830: LD_INT 37
11832: ST_TO_ADDR
// end ; 3 :
11833: GO 12357
11835: LD_INT 3
11837: DOUBLE
11838: EQUAL
11839: IFTRUE 11843
11841: GO 12356
11843: POP
// begin ruBaseArea := ruBaseEastArea ;
11844: LD_ADDR_EXP 66
11848: PUSH
11849: LD_INT 27
11851: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11852: LD_ADDR_EXP 72
11856: PUSH
11857: LD_INT 27
11859: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11860: LD_ADDR_EXP 76
11864: PUSH
11865: LD_INT 0
11867: PUSH
11868: LD_INT 152
11870: PUSH
11871: LD_INT 72
11873: PUSH
11874: LD_INT 4
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 4
11885: PUSH
11886: LD_INT 139
11888: PUSH
11889: LD_INT 69
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 4
11903: PUSH
11904: LD_INT 142
11906: PUSH
11907: LD_INT 56
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 29
11921: PUSH
11922: LD_INT 152
11924: PUSH
11925: LD_INT 85
11927: PUSH
11928: LD_INT 3
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 30
11939: PUSH
11940: LD_INT 156
11942: PUSH
11943: LD_INT 92
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 28
11957: PUSH
11958: LD_INT 157
11960: PUSH
11961: LD_INT 96
11963: PUSH
11964: LD_INT 4
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 161
11978: PUSH
11979: LD_INT 74
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 21
11993: PUSH
11994: LD_INT 157
11996: PUSH
11997: LD_INT 74
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 16
12011: PUSH
12012: LD_INT 161
12014: PUSH
12015: LD_INT 77
12017: PUSH
12018: LD_INT 0
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 24
12029: PUSH
12030: LD_INT 165
12032: PUSH
12033: LD_INT 78
12035: PUSH
12036: LD_INT 5
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 17
12047: PUSH
12048: LD_INT 164
12050: PUSH
12051: LD_INT 74
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 6
12065: PUSH
12066: LD_INT 164
12068: PUSH
12069: LD_INT 95
12071: PUSH
12072: LD_INT 5
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 18
12083: PUSH
12084: LD_INT 161
12086: PUSH
12087: LD_INT 70
12089: PUSH
12090: LD_INT 3
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 26
12101: PUSH
12102: LD_INT 155
12104: PUSH
12105: LD_INT 87
12107: PUSH
12108: LD_INT 0
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 26
12119: PUSH
12120: LD_INT 159
12122: PUSH
12123: LD_INT 95
12125: PUSH
12126: LD_INT 3
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 26
12137: PUSH
12138: LD_INT 167
12140: PUSH
12141: LD_INT 98
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 33
12155: PUSH
12156: LD_INT 152
12158: PUSH
12159: LD_INT 89
12161: PUSH
12162: LD_INT 1
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 33
12173: PUSH
12174: LD_INT 134
12176: PUSH
12177: LD_INT 61
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 33
12191: PUSH
12192: LD_INT 156
12194: PUSH
12195: LD_INT 62
12197: PUSH
12198: LD_INT 3
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 33
12209: PUSH
12210: LD_INT 171
12212: PUSH
12213: LD_INT 97
12215: PUSH
12216: LD_INT 5
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 33
12227: PUSH
12228: LD_INT 169
12230: PUSH
12231: LD_INT 103
12233: PUSH
12234: LD_INT 5
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 33
12245: PUSH
12246: LD_INT 158
12248: PUSH
12249: LD_INT 65
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 144
12266: PUSH
12267: LD_INT 53
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: LD_INT 150
12284: PUSH
12285: LD_INT 81
12287: PUSH
12288: LD_INT 1
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12323: LD_ADDR_EXP 74
12327: PUSH
12328: LD_INT 145
12330: PUSH
12331: LD_INT 71
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12338: LD_ADDR_EXP 82
12342: PUSH
12343: LD_INT 29
12345: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12346: LD_ADDR_EXP 84
12350: PUSH
12351: LD_INT 35
12353: ST_TO_ADDR
// end ; end ;
12354: GO 12357
12356: POP
// ruScriptActive := true ;
12357: LD_ADDR_EXP 14
12361: PUSH
12362: LD_INT 1
12364: ST_TO_ADDR
// end ;
12365: LD_VAR 0 3
12369: RET
// export function RussianBase2 ( group , option ) ; begin
12370: LD_INT 0
12372: PPUSH
// case option of 1 :
12373: LD_VAR 0 2
12377: PUSH
12378: LD_INT 1
12380: DOUBLE
12381: EQUAL
12382: IFTRUE 12386
12384: GO 12842
12386: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12387: LD_ADDR_EXP 67
12391: PUSH
12392: LD_INT 26
12394: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12395: LD_ADDR_EXP 73
12399: PUSH
12400: LD_INT 26
12402: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12403: LD_ADDR_EXP 77
12407: PUSH
12408: LD_INT 0
12410: PUSH
12411: LD_INT 104
12413: PUSH
12414: LD_INT 110
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 4
12428: PUSH
12429: LD_INT 98
12431: PUSH
12432: LD_INT 90
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 29
12446: PUSH
12447: LD_INT 103
12449: PUSH
12450: LD_INT 114
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 99
12467: PUSH
12468: LD_INT 114
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 28
12482: PUSH
12483: LD_INT 100
12485: PUSH
12486: LD_INT 112
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 92
12503: PUSH
12504: LD_INT 101
12506: PUSH
12507: LD_INT 0
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 26
12518: PUSH
12519: LD_INT 97
12521: PUSH
12522: LD_INT 116
12524: PUSH
12525: LD_INT 5
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 17
12536: PUSH
12537: LD_INT 96
12539: PUSH
12540: LD_INT 101
12542: PUSH
12543: LD_INT 4
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 18
12554: PUSH
12555: LD_INT 88
12557: PUSH
12558: LD_INT 97
12560: PUSH
12561: LD_INT 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 26
12572: PUSH
12573: LD_INT 106
12575: PUSH
12576: LD_INT 92
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 6
12590: PUSH
12591: LD_INT 93
12593: PUSH
12594: LD_INT 110
12596: PUSH
12597: LD_INT 0
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 89
12611: PUSH
12612: LD_INT 101
12614: PUSH
12615: LD_INT 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 16
12626: PUSH
12627: LD_INT 95
12629: PUSH
12630: LD_INT 104
12632: PUSH
12633: LD_INT 4
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 24
12644: PUSH
12645: LD_INT 92
12647: PUSH
12648: LD_INT 105
12650: PUSH
12651: LD_INT 0
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 33
12662: PUSH
12663: LD_INT 88
12665: PUSH
12666: LD_INT 89
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 33
12680: PUSH
12681: LD_INT 86
12683: PUSH
12684: LD_INT 90
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 33
12698: PUSH
12699: LD_INT 85
12701: PUSH
12702: LD_INT 99
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 33
12716: PUSH
12717: LD_INT 85
12719: PUSH
12720: LD_INT 107
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 33
12734: PUSH
12735: LD_INT 105
12737: PUSH
12738: LD_INT 99
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 33
12752: PUSH
12753: LD_INT 102
12755: PUSH
12756: LD_INT 92
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 33
12770: PUSH
12771: LD_INT 105
12773: PUSH
12774: LD_INT 92
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12809: LD_ADDR_EXP 75
12813: PUSH
12814: LD_INT 98
12816: PUSH
12817: LD_INT 107
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12824: LD_ADDR_EXP 83
12828: PUSH
12829: LD_INT 30
12831: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12832: LD_ADDR_EXP 85
12836: PUSH
12837: LD_INT 36
12839: ST_TO_ADDR
// end ; 2 :
12840: GO 13809
12842: LD_INT 2
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 13344
12850: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12851: LD_ADDR_EXP 67
12855: PUSH
12856: LD_INT 28
12858: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12859: LD_ADDR_EXP 73
12863: PUSH
12864: LD_INT 28
12866: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12867: LD_ADDR_EXP 77
12871: PUSH
12872: LD_INT 0
12874: PUSH
12875: LD_INT 49
12877: PUSH
12878: LD_INT 74
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 4
12892: PUSH
12893: LD_INT 73
12895: PUSH
12896: LD_INT 88
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 4
12910: PUSH
12911: LD_INT 56
12913: PUSH
12914: LD_INT 62
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: LD_INT 43
12931: PUSH
12932: LD_INT 68
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 43
12949: PUSH
12950: LD_INT 79
12952: PUSH
12953: LD_INT 5
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 60
12967: PUSH
12968: LD_INT 75
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 87
12988: PUSH
12989: LD_INT 1
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 26
13000: PUSH
13001: LD_INT 45
13003: PUSH
13004: LD_INT 67
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 17
13018: PUSH
13019: LD_INT 47
13021: PUSH
13022: LD_INT 84
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 46
13039: PUSH
13040: LD_INT 87
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 41
13057: PUSH
13058: LD_INT 64
13060: PUSH
13061: LD_INT 5
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 6
13072: PUSH
13073: LD_INT 42
13075: PUSH
13076: LD_INT 74
13078: PUSH
13079: LD_INT 1
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 54
13093: PUSH
13094: LD_INT 91
13096: PUSH
13097: LD_INT 5
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 16
13108: PUSH
13109: LD_INT 50
13111: PUSH
13112: LD_INT 83
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 24
13126: PUSH
13127: LD_INT 50
13129: PUSH
13130: LD_INT 90
13132: PUSH
13133: LD_INT 0
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 33
13144: PUSH
13145: LD_INT 51
13147: PUSH
13148: LD_INT 61
13150: PUSH
13151: LD_INT 3
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 33
13162: PUSH
13163: LD_INT 42
13165: PUSH
13166: LD_INT 60
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 36
13183: PUSH
13184: LD_INT 58
13186: PUSH
13187: LD_INT 3
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 33
13198: PUSH
13199: LD_INT 39
13201: PUSH
13202: LD_INT 59
13204: PUSH
13205: LD_INT 3
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 33
13216: PUSH
13217: LD_INT 61
13219: PUSH
13220: LD_INT 64
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 33
13234: PUSH
13235: LD_INT 63
13237: PUSH
13238: LD_INT 90
13240: PUSH
13241: LD_INT 5
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 33
13252: PUSH
13253: LD_INT 64
13255: PUSH
13256: LD_INT 88
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 33
13270: PUSH
13271: LD_INT 72
13273: PUSH
13274: LD_INT 82
13276: PUSH
13277: LD_INT 5
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13311: LD_ADDR_EXP 74
13315: PUSH
13316: LD_INT 45
13318: PUSH
13319: LD_INT 75
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13326: LD_ADDR_EXP 83
13330: PUSH
13331: LD_INT 31
13333: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13334: LD_ADDR_EXP 85
13338: PUSH
13339: LD_INT 37
13341: ST_TO_ADDR
// end ; 3 :
13342: GO 13809
13344: LD_INT 3
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13808
13352: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13353: LD_ADDR_EXP 67
13357: PUSH
13358: LD_INT 27
13360: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13361: LD_ADDR_EXP 73
13365: PUSH
13366: LD_INT 27
13368: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13369: LD_ADDR_EXP 77
13373: PUSH
13374: LD_INT 0
13376: PUSH
13377: LD_INT 152
13379: PUSH
13380: LD_INT 72
13382: PUSH
13383: LD_INT 4
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 4
13394: PUSH
13395: LD_INT 139
13397: PUSH
13398: LD_INT 69
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 4
13412: PUSH
13413: LD_INT 142
13415: PUSH
13416: LD_INT 56
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 29
13430: PUSH
13431: LD_INT 152
13433: PUSH
13434: LD_INT 85
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 30
13448: PUSH
13449: LD_INT 156
13451: PUSH
13452: LD_INT 92
13454: PUSH
13455: LD_INT 3
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 28
13466: PUSH
13467: LD_INT 157
13469: PUSH
13470: LD_INT 96
13472: PUSH
13473: LD_INT 4
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: LD_INT 161
13487: PUSH
13488: LD_INT 74
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 157
13505: PUSH
13506: LD_INT 74
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 16
13520: PUSH
13521: LD_INT 161
13523: PUSH
13524: LD_INT 77
13526: PUSH
13527: LD_INT 0
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 24
13538: PUSH
13539: LD_INT 165
13541: PUSH
13542: LD_INT 78
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 17
13556: PUSH
13557: LD_INT 164
13559: PUSH
13560: LD_INT 74
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 6
13574: PUSH
13575: LD_INT 164
13577: PUSH
13578: LD_INT 95
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 18
13592: PUSH
13593: LD_INT 161
13595: PUSH
13596: LD_INT 70
13598: PUSH
13599: LD_INT 3
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 26
13610: PUSH
13611: LD_INT 155
13613: PUSH
13614: LD_INT 87
13616: PUSH
13617: LD_INT 0
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 159
13631: PUSH
13632: LD_INT 95
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 26
13646: PUSH
13647: LD_INT 167
13649: PUSH
13650: LD_INT 98
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 33
13664: PUSH
13665: LD_INT 152
13667: PUSH
13668: LD_INT 89
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 33
13682: PUSH
13683: LD_INT 134
13685: PUSH
13686: LD_INT 61
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 33
13700: PUSH
13701: LD_INT 156
13703: PUSH
13704: LD_INT 62
13706: PUSH
13707: LD_INT 3
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 33
13718: PUSH
13719: LD_INT 171
13721: PUSH
13722: LD_INT 97
13724: PUSH
13725: LD_INT 5
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 33
13736: PUSH
13737: LD_INT 169
13739: PUSH
13740: LD_INT 103
13742: PUSH
13743: LD_INT 5
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13775: LD_ADDR_EXP 75
13779: PUSH
13780: LD_INT 145
13782: PUSH
13783: LD_INT 71
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13790: LD_ADDR_EXP 83
13794: PUSH
13795: LD_INT 29
13797: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13798: LD_ADDR_EXP 85
13802: PUSH
13803: LD_INT 35
13805: ST_TO_ADDR
// end ; end ;
13806: GO 13809
13808: POP
// ruScriptActive2 := true ;
13809: LD_ADDR_EXP 15
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// end ;
13817: LD_VAR 0 3
13821: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13822: LD_EXP 14
13826: PUSH
13827: LD_EXP 59
13831: PPUSH
13832: CALL 57256 0 1
13836: AND
13837: IFFALSE 16419
13839: GO 13841
13841: DISABLE
13842: LD_INT 0
13844: PPUSH
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
// begin enable ;
13860: ENABLE
// if ruTech then
13861: LD_EXP 65
13865: IFFALSE 14019
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13867: LD_ADDR_VAR 0 4
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 50
13884: PUSH
13885: EMPTY
13886: LIST
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 30
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 30
13903: PUSH
13904: LD_INT 7
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 30
13913: PUSH
13914: LD_INT 8
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: ST_TO_ADDR
// if lab then
13937: LD_VAR 0 4
13941: IFFALSE 14019
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
13943: LD_VAR 0 4
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PPUSH
13952: CALL_OW 461
13956: PUSH
13957: LD_INT 2
13959: EQUAL
13960: IFFALSE 14019
// begin for i in ruTech do
13962: LD_ADDR_VAR 0 1
13966: PUSH
13967: LD_EXP 65
13971: PUSH
13972: FOR_IN
13973: IFFALSE 14017
// if CanBeResearched ( lab [ 1 ] , i ) then
13975: LD_VAR 0 4
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 430
13993: IFFALSE 14015
// begin ComResearch ( lab [ 1 ] , i ) ;
13995: LD_VAR 0 4
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: LD_VAR 0 1
14008: PPUSH
14009: CALL_OW 124
// break ;
14013: GO 14017
// end ;
14015: GO 13972
14017: POP
14018: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
14019: LD_ADDR_VAR 0 14
14023: PUSH
14024: LD_EXP 66
14028: PPUSH
14029: LD_INT 22
14031: PUSH
14032: LD_INT 3
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 50
14051: PUSH
14052: EMPTY
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 70
14064: ST_TO_ADDR
// if fac then
14065: LD_VAR 0 14
14069: IFFALSE 14664
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14071: LD_EXP 63
14075: PPUSH
14076: LD_INT 3
14078: PUSH
14079: LD_INT 60
14081: PUSH
14082: EMPTY
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 3
14091: PUSH
14092: LD_INT 25
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 72
14114: IFFALSE 14255
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_EXP 63
14125: PPUSH
14126: LD_INT 3
14128: PUSH
14129: LD_INT 60
14131: PUSH
14132: EMPTY
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 3
14141: PUSH
14142: LD_INT 25
14144: PUSH
14145: LD_INT 3
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 72
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14253
// begin SetTag ( i , tMech ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 7
14175: PPUSH
14176: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 310
14189: PUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 310
14199: PUSH
14200: LD_VAR 0 14
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: NONEQUAL
14209: AND
14210: IFFALSE 14221
// ComExitBuilding ( i ) ;
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14221: LD_VAR 0 1
14225: PPUSH
14226: LD_VAR 0 14
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_INT 3
14246: PPUSH
14247: CALL_OW 183
// end ;
14251: GO 14165
14253: POP
14254: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14255: LD_EXP 63
14259: PPUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 120
14285: PUSH
14286: LD_INT 7
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 50
14295: PUSH
14296: EMPTY
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PPUSH
14305: CALL_OW 72
14309: IFFALSE 14396
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14311: LD_ADDR_VAR 0 1
14315: PUSH
14316: LD_EXP 63
14320: PPUSH
14321: LD_INT 25
14323: PUSH
14324: LD_INT 3
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: LD_INT 54
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 120
14346: PUSH
14347: LD_INT 7
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 50
14356: PUSH
14357: EMPTY
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 72
14370: PUSH
14371: FOR_IN
14372: IFFALSE 14394
// ComEnterUnit ( i , fac [ 1 ] ) ;
14374: LD_VAR 0 1
14378: PPUSH
14379: LD_VAR 0 14
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: PPUSH
14388: CALL_OW 120
14392: GO 14371
14394: POP
14395: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14396: LD_VAR 0 14
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: CALL_OW 461
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: IFFALSE 14664
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14415: LD_ADDR_VAR 0 15
14419: PUSH
14420: LD_EXP 66
14424: PPUSH
14425: LD_INT 2
14427: PUSH
14428: LD_INT 30
14430: PUSH
14431: LD_INT 32
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 30
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 35
14455: PUSH
14456: LD_INT 0
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 70
14471: ST_TO_ADDR
// if emptyTowers then
14472: LD_VAR 0 15
14476: IFFALSE 14526
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14478: LD_ADDR_VAR 0 16
14482: PUSH
14483: LD_VAR 0 15
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: LD_EXP 66
14496: PPUSH
14497: CALL 65501 0 2
14501: ST_TO_ADDR
// if weapon then
14502: LD_VAR 0 16
14506: IFFALSE 14526
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14508: LD_VAR 0 15
14512: PUSH
14513: LD_INT 1
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 16
14521: PPUSH
14522: CALL_OW 148
// end ; if ruConstructList then
14526: LD_EXP 70
14530: IFFALSE 14664
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14532: LD_VAR 0 14
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: LD_EXP 70
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PUSH
14550: LD_INT 1
14552: ARRAY
14553: PPUSH
14554: LD_EXP 70
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PUSH
14563: LD_INT 2
14565: ARRAY
14566: PPUSH
14567: LD_EXP 70
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PUSH
14576: LD_INT 3
14578: ARRAY
14579: PPUSH
14580: LD_EXP 70
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_INT 4
14591: ARRAY
14592: PPUSH
14593: CALL_OW 448
14597: IFFALSE 14664
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14599: LD_VAR 0 14
14603: PUSH
14604: LD_INT 1
14606: ARRAY
14607: PPUSH
14608: LD_EXP 70
14612: PUSH
14613: LD_INT 1
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PPUSH
14621: LD_EXP 70
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: PPUSH
14634: LD_EXP 70
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PUSH
14643: LD_INT 3
14645: ARRAY
14646: PPUSH
14647: LD_EXP 70
14651: PUSH
14652: LD_INT 1
14654: ARRAY
14655: PUSH
14656: LD_INT 4
14658: ARRAY
14659: PPUSH
14660: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_EXP 66
14673: PPUSH
14674: LD_INT 21
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 3
14686: PUSH
14687: LD_INT 57
14689: PUSH
14690: EMPTY
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 3
14699: PUSH
14700: LD_INT 24
14702: PUSH
14703: LD_INT 1000
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 70
14723: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14724: LD_ADDR_VAR 0 8
14728: PUSH
14729: LD_EXP 72
14733: PPUSH
14734: CALL_OW 435
14738: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14739: LD_ADDR_VAR 0 9
14743: PUSH
14744: LD_EXP 59
14748: PPUSH
14749: LD_INT 25
14751: PUSH
14752: LD_INT 4
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: EMPTY
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 72
14773: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14774: LD_ADDR_VAR 0 4
14778: PUSH
14779: LD_EXP 66
14783: PPUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 30
14789: PUSH
14790: LD_INT 6
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 30
14799: PUSH
14800: LD_INT 7
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 30
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PPUSH
14823: CALL_OW 70
14827: ST_TO_ADDR
// if sci then
14828: LD_VAR 0 9
14832: IFFALSE 14993
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14834: LD_ADDR_VAR 0 11
14838: PUSH
14839: LD_EXP 59
14843: PPUSH
14844: LD_INT 95
14846: PUSH
14847: LD_EXP 66
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 120
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 72
14874: ST_TO_ADDR
// if hurtUnits then
14875: LD_VAR 0 11
14879: IFFALSE 14940
// begin for i in sci do
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_VAR 0 9
14890: PUSH
14891: FOR_IN
14892: IFFALSE 14936
// if IsInUnit ( i ) then
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 310
14903: IFFALSE 14916
// ComExitBuilding ( i ) else
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 122
14914: GO 14934
// ComHeal ( i , hurtUnits [ 1 ] ) ;
14916: LD_VAR 0 1
14920: PPUSH
14921: LD_VAR 0 11
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: PPUSH
14930: CALL_OW 128
14934: GO 14891
14936: POP
14937: POP
// end else
14938: GO 14993
// if lab then
14940: LD_VAR 0 4
14944: IFFALSE 14993
// begin for i in sci do
14946: LD_ADDR_VAR 0 1
14950: PUSH
14951: LD_VAR 0 9
14955: PUSH
14956: FOR_IN
14957: IFFALSE 14991
// if not IsInUnit ( i ) then
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 310
14968: NOT
14969: IFFALSE 14989
// ComEnterUnit ( i , lab [ 1 ] ) ;
14971: LD_VAR 0 1
14975: PPUSH
14976: LD_VAR 0 4
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: PPUSH
14985: CALL_OW 120
14989: GO 14956
14991: POP
14992: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_EXP 59
15002: PPUSH
15003: LD_INT 25
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 72
15017: ST_TO_ADDR
// if eng then
15018: LD_VAR 0 5
15022: IFFALSE 15807
// begin for i in eng do
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: LD_VAR 0 5
15033: PUSH
15034: FOR_IN
15035: IFFALSE 15805
// begin tag := GetTag ( i ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: CALL_OW 110
15051: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 256
15061: PUSH
15062: LD_INT 800
15064: LESS
15065: PUSH
15066: LD_VAR 0 6
15070: PUSH
15071: LD_INT 1
15073: NONEQUAL
15074: AND
15075: IFFALSE 15125
// begin SetTag ( i , tHeal ) ;
15077: LD_VAR 0 1
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15089: LD_VAR 0 1
15093: PPUSH
15094: LD_EXP 74
15098: PUSH
15099: LD_INT 1
15101: ARRAY
15102: PPUSH
15103: LD_EXP 74
15107: PUSH
15108: LD_INT 2
15110: ARRAY
15111: PPUSH
15112: CALL_OW 111
// AddComHold ( i ) ;
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15125: LD_VAR 0 6
15129: PUSH
15130: LD_INT 1
15132: EQUAL
15133: PUSH
15134: LD_VAR 0 1
15138: PPUSH
15139: CALL_OW 256
15143: PUSH
15144: LD_INT 1000
15146: EQUAL
15147: AND
15148: IFFALSE 15162
// SetTag ( i , 0 ) ;
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_INT 0
15157: PPUSH
15158: CALL_OW 109
// if not tag then
15162: LD_VAR 0 6
15166: NOT
15167: IFFALSE 15339
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15169: LD_ADDR_VAR 0 3
15173: PUSH
15174: LD_EXP 66
15178: PPUSH
15179: LD_INT 57
15181: PUSH
15182: EMPTY
15183: LIST
15184: PPUSH
15185: CALL_OW 70
15189: ST_TO_ADDR
// if undone then
15190: LD_VAR 0 3
15194: IFFALSE 15216
// begin ComComplete ( i , undone [ 1 ] ) ;
15196: LD_VAR 0 1
15200: PPUSH
15201: LD_VAR 0 3
15205: PUSH
15206: LD_INT 1
15208: ARRAY
15209: PPUSH
15210: CALL 63354 0 2
// continue ;
15214: GO 15034
// end ; if cr or tmp or Count ( ruBuildings ) then
15216: LD_VAR 0 8
15220: PUSH
15221: LD_VAR 0 2
15225: OR
15226: PUSH
15227: LD_EXP 76
15231: PPUSH
15232: CALL 57256 0 1
15236: OR
15237: IFFALSE 15313
// begin if IsInUnit ( i ) then
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 310
15248: IFFALSE 15259
// ComExitBuilding ( i ) ;
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 122
// if tmp then
15259: LD_VAR 0 2
15263: IFFALSE 15279
// SetTag ( i , tRepair ) else
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 3
15272: PPUSH
15273: CALL_OW 109
15277: GO 15311
// if cr then
15279: LD_VAR 0 8
15283: IFFALSE 15299
// SetTag ( i , tCrates ) else
15285: LD_VAR 0 1
15289: PPUSH
15290: LD_INT 2
15292: PPUSH
15293: CALL_OW 109
15297: GO 15311
// SetTag ( i , tBuild ) ;
15299: LD_VAR 0 1
15303: PPUSH
15304: LD_INT 5
15306: PPUSH
15307: CALL_OW 109
// end else
15311: GO 15339
// if not IsInUnit ( i ) then
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 310
15322: NOT
15323: IFFALSE 15339
// ComEnterUnit ( i , ruBase ) ;
15325: LD_VAR 0 1
15329: PPUSH
15330: LD_EXP 68
15334: PPUSH
15335: CALL_OW 120
// end ; if tag = tRepair then
15339: LD_VAR 0 6
15343: PUSH
15344: LD_INT 3
15346: EQUAL
15347: IFFALSE 15453
// begin if IsInUnit ( i ) then
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 310
15358: IFFALSE 15371
// begin ComExitBuilding ( i ) ;
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 122
// continue ;
15369: GO 15034
// end ; if not tmp then
15371: LD_VAR 0 2
15375: NOT
15376: IFFALSE 15392
// begin SetTag ( i , 0 ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: LD_INT 0
15385: PPUSH
15386: CALL_OW 109
// continue ;
15390: GO 15034
// end ; if not HasTask ( i ) then
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 314
15401: NOT
15402: IFFALSE 15422
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15404: LD_VAR 0 1
15408: PPUSH
15409: LD_VAR 0 2
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: PPUSH
15418: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_EXP 66
15431: PPUSH
15432: CALL_OW 308
15436: NOT
15437: IFFALSE 15453
// ComMoveToArea ( i , ruBaseArea ) ;
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_EXP 66
15448: PPUSH
15449: CALL_OW 113
// end ; if tag = tBuild then
15453: LD_VAR 0 6
15457: PUSH
15458: LD_INT 5
15460: EQUAL
15461: IFFALSE 15660
// begin if IsInUnit ( i ) then
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 310
15472: IFFALSE 15485
// begin ComExitBuilding ( i ) ;
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 122
// continue ;
15483: GO 15034
// end ; if not Count ( ruBuildings ) then
15485: LD_EXP 76
15489: PPUSH
15490: CALL 57256 0 1
15494: NOT
15495: IFFALSE 15513
// begin SetTag ( i , 0 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 0
15504: PPUSH
15505: CALL_OW 109
// continue ;
15509: GO 15034
// end else
15511: GO 15552
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15513: LD_EXP 68
15517: PPUSH
15518: LD_EXP 76
15522: PUSH
15523: LD_INT 1
15525: ARRAY
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: CALL 96788 0 2
15535: NOT
15536: IFFALSE 15552
// begin SetTag ( i , 0 ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_INT 0
15545: PPUSH
15546: CALL_OW 109
// continue ;
15550: GO 15034
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15552: LD_ADDR_VAR 0 3
15556: PUSH
15557: LD_EXP 66
15561: PPUSH
15562: LD_INT 57
15564: PUSH
15565: EMPTY
15566: LIST
15567: PPUSH
15568: CALL_OW 70
15572: ST_TO_ADDR
// if undone then
15573: LD_VAR 0 3
15577: IFFALSE 15599
// begin ComComplete ( i , undone [ 1 ] ) ;
15579: LD_VAR 0 1
15583: PPUSH
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PPUSH
15593: CALL 63354 0 2
// continue ;
15597: GO 15034
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15599: LD_VAR 0 1
15603: PPUSH
15604: LD_EXP 76
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PUSH
15613: LD_INT 1
15615: ARRAY
15616: PPUSH
15617: LD_EXP 76
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PUSH
15626: LD_INT 2
15628: ARRAY
15629: PPUSH
15630: LD_EXP 76
15634: PUSH
15635: LD_INT 1
15637: ARRAY
15638: PUSH
15639: LD_INT 3
15641: ARRAY
15642: PPUSH
15643: LD_EXP 76
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PUSH
15652: LD_INT 4
15654: ARRAY
15655: PPUSH
15656: CALL_OW 145
// end ; if tag = tCrates then
15660: LD_VAR 0 6
15664: PUSH
15665: LD_INT 2
15667: EQUAL
15668: IFFALSE 15803
// begin if IsInUnit ( i ) then
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 310
15679: IFFALSE 15692
// begin ComExitBuilding ( i ) ;
15681: LD_VAR 0 1
15685: PPUSH
15686: CALL_OW 122
// continue ;
15690: GO 15034
// end ; if not cr then
15692: LD_VAR 0 8
15696: NOT
15697: IFFALSE 15713
// begin SetTag ( i , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 109
// continue ;
15711: GO 15034
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 314
15722: NOT
15723: PUSH
15724: LD_INT 81
15726: PUSH
15727: LD_INT 3
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 92
15736: PUSH
15737: LD_VAR 0 8
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PUSH
15746: LD_VAR 0 8
15750: PUSH
15751: LD_INT 2
15753: ARRAY
15754: PUSH
15755: LD_INT 12
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 69
15772: NOT
15773: AND
15774: IFFALSE 15803
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15776: LD_VAR 0 1
15780: PPUSH
15781: LD_VAR 0 8
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: LD_VAR 0 8
15794: PUSH
15795: LD_INT 2
15797: ARRAY
15798: PPUSH
15799: CALL_OW 117
// end ; end ;
15803: GO 15034
15805: POP
15806: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15807: LD_ADDR_VAR 0 10
15811: PUSH
15812: LD_EXP 59
15816: PPUSH
15817: LD_INT 2
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 9
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 50
15847: PUSH
15848: EMPTY
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 72
15859: PUSH
15860: LD_EXP 61
15864: UNION
15865: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15866: LD_ADDR_VAR 0 12
15870: PUSH
15871: LD_EXP 66
15875: PPUSH
15876: LD_INT 81
15878: PUSH
15879: LD_INT 3
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 70
15890: ST_TO_ADDR
// if sol then
15891: LD_VAR 0 10
15895: IFFALSE 16419
// begin if enemyInBase then
15897: LD_VAR 0 12
15901: IFFALSE 16044
// begin for i in sol do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 10
15912: PUSH
15913: FOR_IN
15914: IFFALSE 16040
// begin tw := IsInUnit ( i ) ;
15916: LD_ADDR_VAR 0 7
15920: PUSH
15921: LD_VAR 0 1
15925: PPUSH
15926: CALL_OW 310
15930: ST_TO_ADDR
// if tw then
15931: LD_VAR 0 7
15935: IFFALSE 16014
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15937: LD_VAR 0 7
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 101
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: LD_INT 30
15967: PUSH
15968: LD_INT 32
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 30
15977: PUSH
15978: LD_INT 31
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: IN
16000: NOT
16001: IFFALSE 16012
// ComExitBuilding ( i ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: CALL_OW 122
// end else
16012: GO 16038
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_VAR 0 12
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 74
16033: PPUSH
16034: CALL_OW 115
// end ;
16038: GO 15913
16040: POP
16041: POP
// end else
16042: GO 16419
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16044: LD_ADDR_VAR 0 13
16048: PUSH
16049: LD_EXP 66
16053: PPUSH
16054: LD_INT 3
16056: PUSH
16057: LD_INT 62
16059: PUSH
16060: EMPTY
16061: LIST
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 30
16072: PUSH
16073: LD_INT 32
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 4
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 30
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 30
16102: PUSH
16103: LD_INT 31
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 70
16125: ST_TO_ADDR
// if empty then
16126: LD_VAR 0 13
16130: IFFALSE 16147
// empty := ReverseArray ( empty ) ;
16132: LD_ADDR_VAR 0 13
16136: PUSH
16137: LD_VAR 0 13
16141: PPUSH
16142: CALL 88132 0 1
16146: ST_TO_ADDR
// for i in sol do
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_VAR 0 10
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16417
// begin tag := GetTag ( i ) ;
16160: LD_ADDR_VAR 0 6
16164: PUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: CALL_OW 110
16174: ST_TO_ADDR
// if tag = tMech then
16175: LD_VAR 0 6
16179: PUSH
16180: LD_INT 7
16182: EQUAL
16183: IFFALSE 16187
// continue ;
16185: GO 16157
// if GetLives ( i ) < 1000 and tag <> tHeal then
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 256
16196: PUSH
16197: LD_INT 1000
16199: LESS
16200: PUSH
16201: LD_VAR 0 6
16205: PUSH
16206: LD_INT 1
16208: NONEQUAL
16209: AND
16210: IFFALSE 16262
// begin SetTag ( i , tHeal ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16224: LD_VAR 0 1
16228: PPUSH
16229: LD_EXP 74
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PPUSH
16238: LD_EXP 74
16242: PUSH
16243: LD_INT 2
16245: ARRAY
16246: PPUSH
16247: CALL_OW 111
// AddComHold ( i ) ;
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 200
// continue ;
16260: GO 16157
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 256
16271: PUSH
16272: LD_INT 1000
16274: EQUAL
16275: PUSH
16276: LD_VAR 0 6
16280: PUSH
16281: LD_INT 1
16283: EQUAL
16284: AND
16285: IFFALSE 16301
// begin SetTag ( i , 0 ) ;
16287: LD_VAR 0 1
16291: PPUSH
16292: LD_INT 0
16294: PPUSH
16295: CALL_OW 109
// continue ;
16299: GO 16157
// end ; if HasTask ( i ) then
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 314
16310: IFFALSE 16314
// continue ;
16312: GO 16157
// if not IsInUnit ( i ) and not tag and empty then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 310
16323: NOT
16324: PUSH
16325: LD_VAR 0 6
16329: NOT
16330: AND
16331: PUSH
16332: LD_VAR 0 13
16336: AND
16337: IFFALSE 16415
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16339: LD_VAR 0 1
16343: PPUSH
16344: LD_VAR 0 13
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PPUSH
16353: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16357: LD_VAR 0 13
16361: PUSH
16362: LD_INT 1
16364: ARRAY
16365: PPUSH
16366: CALL_OW 266
16370: PUSH
16371: LD_INT 5
16373: EQUAL
16374: PUSH
16375: LD_INT 50
16377: PPUSH
16378: CALL_OW 13
16382: AND
16383: IFFALSE 16397
// AddComChangeProfession ( i , class_bazooker ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 9
16392: PPUSH
16393: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16397: LD_ADDR_VAR 0 13
16401: PUSH
16402: LD_VAR 0 13
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 3
16414: ST_TO_ADDR
// end ; end ;
16415: GO 16157
16417: POP
16418: POP
// end ; end ; end ;
16419: PPOPN 16
16421: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16422: LD_EXP 15
16426: PUSH
16427: LD_EXP 60
16431: PPUSH
16432: CALL 57256 0 1
16436: AND
16437: IFFALSE 19019
16439: GO 16441
16441: DISABLE
16442: LD_INT 0
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// begin enable ;
16460: ENABLE
// if ruTech then
16461: LD_EXP 65
16465: IFFALSE 16619
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16467: LD_ADDR_VAR 0 4
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 3
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 50
16484: PUSH
16485: EMPTY
16486: LIST
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 6
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 30
16503: PUSH
16504: LD_INT 7
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 30
16513: PUSH
16514: LD_INT 8
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 69
16536: ST_TO_ADDR
// if lab then
16537: LD_VAR 0 4
16541: IFFALSE 16619
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16543: LD_VAR 0 4
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: PPUSH
16552: CALL_OW 461
16556: PUSH
16557: LD_INT 2
16559: EQUAL
16560: IFFALSE 16619
// begin for i in ruTech do
16562: LD_ADDR_VAR 0 1
16566: PUSH
16567: LD_EXP 65
16571: PUSH
16572: FOR_IN
16573: IFFALSE 16617
// if CanBeResearched ( lab [ 1 ] , i ) then
16575: LD_VAR 0 4
16579: PUSH
16580: LD_INT 1
16582: ARRAY
16583: PPUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 430
16593: IFFALSE 16615
// begin ComResearch ( lab [ 1 ] , i ) ;
16595: LD_VAR 0 4
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 124
// break ;
16613: GO 16617
// end ;
16615: GO 16572
16617: POP
16618: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16619: LD_ADDR_VAR 0 14
16623: PUSH
16624: LD_EXP 67
16628: PPUSH
16629: LD_INT 22
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 30
16641: PUSH
16642: LD_INT 3
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 50
16651: PUSH
16652: EMPTY
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 70
16664: ST_TO_ADDR
// if fac then
16665: LD_VAR 0 14
16669: IFFALSE 17264
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16671: LD_EXP 64
16675: PPUSH
16676: LD_INT 3
16678: PUSH
16679: LD_INT 60
16681: PUSH
16682: EMPTY
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: LD_INT 25
16694: PUSH
16695: LD_INT 3
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PPUSH
16710: CALL_OW 72
16714: IFFALSE 16855
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16716: LD_ADDR_VAR 0 1
16720: PUSH
16721: LD_EXP 64
16725: PPUSH
16726: LD_INT 3
16728: PUSH
16729: LD_INT 60
16731: PUSH
16732: EMPTY
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: LD_INT 25
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 72
16764: PUSH
16765: FOR_IN
16766: IFFALSE 16853
// begin SetTag ( i , tMech ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_INT 7
16775: PPUSH
16776: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 310
16789: PUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 310
16799: PUSH
16800: LD_VAR 0 14
16804: PUSH
16805: LD_INT 1
16807: ARRAY
16808: NONEQUAL
16809: AND
16810: IFFALSE 16821
// ComExitBuilding ( i ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16821: LD_VAR 0 1
16825: PPUSH
16826: LD_VAR 0 14
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: LD_INT 3
16846: PPUSH
16847: CALL_OW 183
// end ;
16851: GO 16765
16853: POP
16854: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16855: LD_EXP 64
16859: PPUSH
16860: LD_INT 25
16862: PUSH
16863: LD_INT 3
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 3
16872: PUSH
16873: LD_INT 54
16875: PUSH
16876: EMPTY
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 120
16885: PUSH
16886: LD_INT 7
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 50
16895: PUSH
16896: EMPTY
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PPUSH
16905: CALL_OW 72
16909: IFFALSE 16996
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
16911: LD_ADDR_VAR 0 1
16915: PUSH
16916: LD_EXP 64
16920: PPUSH
16921: LD_INT 25
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: LD_INT 54
16936: PUSH
16937: EMPTY
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 120
16946: PUSH
16947: LD_INT 7
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 50
16956: PUSH
16957: EMPTY
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL_OW 72
16970: PUSH
16971: FOR_IN
16972: IFFALSE 16994
// ComEnterUnit ( i , fac [ 1 ] ) ;
16974: LD_VAR 0 1
16978: PPUSH
16979: LD_VAR 0 14
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: CALL_OW 120
16992: GO 16971
16994: POP
16995: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
16996: LD_VAR 0 14
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PPUSH
17005: CALL_OW 461
17009: PUSH
17010: LD_INT 2
17012: EQUAL
17013: IFFALSE 17264
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
17015: LD_ADDR_VAR 0 15
17019: PUSH
17020: LD_EXP 67
17024: PPUSH
17025: LD_INT 2
17027: PUSH
17028: LD_INT 30
17030: PUSH
17031: LD_INT 32
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 30
17040: PUSH
17041: LD_INT 33
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 35
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 70
17071: ST_TO_ADDR
// if emptyTowers then
17072: LD_VAR 0 15
17076: IFFALSE 17126
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17078: LD_ADDR_VAR 0 16
17082: PUSH
17083: LD_VAR 0 15
17087: PUSH
17088: LD_INT 1
17090: ARRAY
17091: PPUSH
17092: LD_EXP 67
17096: PPUSH
17097: CALL 65501 0 2
17101: ST_TO_ADDR
// if weapon then
17102: LD_VAR 0 16
17106: IFFALSE 17126
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17108: LD_VAR 0 15
17112: PUSH
17113: LD_INT 1
17115: ARRAY
17116: PPUSH
17117: LD_VAR 0 16
17121: PPUSH
17122: CALL_OW 148
// end ; if ruConstructList2 then
17126: LD_EXP 71
17130: IFFALSE 17264
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17132: LD_VAR 0 14
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: PPUSH
17141: LD_EXP 71
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PUSH
17150: LD_INT 1
17152: ARRAY
17153: PPUSH
17154: LD_EXP 71
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PUSH
17163: LD_INT 2
17165: ARRAY
17166: PPUSH
17167: LD_EXP 71
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PUSH
17176: LD_INT 3
17178: ARRAY
17179: PPUSH
17180: LD_EXP 71
17184: PUSH
17185: LD_INT 1
17187: ARRAY
17188: PUSH
17189: LD_INT 4
17191: ARRAY
17192: PPUSH
17193: CALL_OW 448
17197: IFFALSE 17264
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17199: LD_VAR 0 14
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: PPUSH
17208: LD_EXP 71
17212: PUSH
17213: LD_INT 1
17215: ARRAY
17216: PUSH
17217: LD_INT 1
17219: ARRAY
17220: PPUSH
17221: LD_EXP 71
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: PUSH
17230: LD_INT 2
17232: ARRAY
17233: PPUSH
17234: LD_EXP 71
17238: PUSH
17239: LD_INT 1
17241: ARRAY
17242: PUSH
17243: LD_INT 3
17245: ARRAY
17246: PPUSH
17247: LD_EXP 71
17251: PUSH
17252: LD_INT 1
17254: ARRAY
17255: PUSH
17256: LD_INT 4
17258: ARRAY
17259: PPUSH
17260: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17264: LD_ADDR_VAR 0 2
17268: PUSH
17269: LD_EXP 67
17273: PPUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 3
17286: PUSH
17287: LD_INT 57
17289: PUSH
17290: EMPTY
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 3
17299: PUSH
17300: LD_INT 24
17302: PUSH
17303: LD_INT 1000
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 70
17323: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17324: LD_ADDR_VAR 0 8
17328: PUSH
17329: LD_EXP 73
17333: PPUSH
17334: CALL_OW 435
17338: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17339: LD_ADDR_VAR 0 9
17343: PUSH
17344: LD_EXP 60
17348: PPUSH
17349: LD_INT 25
17351: PUSH
17352: LD_INT 4
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 50
17361: PUSH
17362: EMPTY
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 72
17373: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: LD_EXP 67
17383: PPUSH
17384: LD_INT 2
17386: PUSH
17387: LD_INT 30
17389: PUSH
17390: LD_INT 6
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 30
17399: PUSH
17400: LD_INT 7
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 30
17409: PUSH
17410: LD_INT 8
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 70
17427: ST_TO_ADDR
// if sci then
17428: LD_VAR 0 9
17432: IFFALSE 17593
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17434: LD_ADDR_VAR 0 11
17438: PUSH
17439: LD_EXP 60
17443: PPUSH
17444: LD_INT 95
17446: PUSH
17447: LD_EXP 67
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 120
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 72
17474: ST_TO_ADDR
// if hurtUnits then
17475: LD_VAR 0 11
17479: IFFALSE 17540
// begin for i in sci do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: LD_VAR 0 9
17490: PUSH
17491: FOR_IN
17492: IFFALSE 17536
// if IsInUnit ( i ) then
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 310
17503: IFFALSE 17516
// ComExitBuilding ( i ) else
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 122
17514: GO 17534
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17516: LD_VAR 0 1
17520: PPUSH
17521: LD_VAR 0 11
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: CALL_OW 128
17534: GO 17491
17536: POP
17537: POP
// end else
17538: GO 17593
// if lab then
17540: LD_VAR 0 4
17544: IFFALSE 17593
// begin for i in sci do
17546: LD_ADDR_VAR 0 1
17550: PUSH
17551: LD_VAR 0 9
17555: PUSH
17556: FOR_IN
17557: IFFALSE 17591
// if not IsInUnit ( i ) then
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 310
17568: NOT
17569: IFFALSE 17589
// ComEnterUnit ( i , lab [ 1 ] ) ;
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_VAR 0 4
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 120
17589: GO 17556
17591: POP
17592: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17593: LD_ADDR_VAR 0 5
17597: PUSH
17598: LD_EXP 60
17602: PPUSH
17603: LD_INT 25
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 72
17617: ST_TO_ADDR
// if eng then
17618: LD_VAR 0 5
17622: IFFALSE 18407
// begin for i in eng do
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_VAR 0 5
17633: PUSH
17634: FOR_IN
17635: IFFALSE 18405
// begin tag := GetTag ( i ) ;
17637: LD_ADDR_VAR 0 6
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 110
17651: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 256
17661: PUSH
17662: LD_INT 800
17664: LESS
17665: PUSH
17666: LD_VAR 0 6
17670: PUSH
17671: LD_INT 1
17673: NONEQUAL
17674: AND
17675: IFFALSE 17725
// begin SetTag ( i , tHeal ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17689: LD_VAR 0 1
17693: PPUSH
17694: LD_EXP 75
17698: PUSH
17699: LD_INT 1
17701: ARRAY
17702: PPUSH
17703: LD_EXP 75
17707: PUSH
17708: LD_INT 2
17710: ARRAY
17711: PPUSH
17712: CALL_OW 111
// AddComHold ( i ) ;
17716: LD_VAR 0 1
17720: PPUSH
17721: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17725: LD_VAR 0 6
17729: PUSH
17730: LD_INT 1
17732: EQUAL
17733: PUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 256
17743: PUSH
17744: LD_INT 1000
17746: EQUAL
17747: AND
17748: IFFALSE 17762
// SetTag ( i , 0 ) ;
17750: LD_VAR 0 1
17754: PPUSH
17755: LD_INT 0
17757: PPUSH
17758: CALL_OW 109
// if not tag then
17762: LD_VAR 0 6
17766: NOT
17767: IFFALSE 17939
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17769: LD_ADDR_VAR 0 3
17773: PUSH
17774: LD_EXP 67
17778: PPUSH
17779: LD_INT 57
17781: PUSH
17782: EMPTY
17783: LIST
17784: PPUSH
17785: CALL_OW 70
17789: ST_TO_ADDR
// if undone then
17790: LD_VAR 0 3
17794: IFFALSE 17816
// begin ComComplete ( i , undone [ 1 ] ) ;
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_VAR 0 3
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: CALL 63354 0 2
// continue ;
17814: GO 17634
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17816: LD_VAR 0 8
17820: PUSH
17821: LD_VAR 0 2
17825: OR
17826: PUSH
17827: LD_EXP 77
17831: PPUSH
17832: CALL 57256 0 1
17836: OR
17837: IFFALSE 17913
// begin if IsInUnit ( i ) then
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 310
17848: IFFALSE 17859
// ComExitBuilding ( i ) ;
17850: LD_VAR 0 1
17854: PPUSH
17855: CALL_OW 122
// if tmp then
17859: LD_VAR 0 2
17863: IFFALSE 17879
// SetTag ( i , tRepair ) else
17865: LD_VAR 0 1
17869: PPUSH
17870: LD_INT 3
17872: PPUSH
17873: CALL_OW 109
17877: GO 17911
// if cr then
17879: LD_VAR 0 8
17883: IFFALSE 17899
// SetTag ( i , tCrates ) else
17885: LD_VAR 0 1
17889: PPUSH
17890: LD_INT 2
17892: PPUSH
17893: CALL_OW 109
17897: GO 17911
// SetTag ( i , tBuild ) ;
17899: LD_VAR 0 1
17903: PPUSH
17904: LD_INT 5
17906: PPUSH
17907: CALL_OW 109
// end else
17911: GO 17939
// if not IsInUnit ( i ) then
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 310
17922: NOT
17923: IFFALSE 17939
// ComEnterUnit ( i , ruBase2 ) ;
17925: LD_VAR 0 1
17929: PPUSH
17930: LD_EXP 69
17934: PPUSH
17935: CALL_OW 120
// end ; if tag = tRepair then
17939: LD_VAR 0 6
17943: PUSH
17944: LD_INT 3
17946: EQUAL
17947: IFFALSE 18053
// begin if IsInUnit ( i ) then
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 310
17958: IFFALSE 17971
// begin ComExitBuilding ( i ) ;
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 122
// continue ;
17969: GO 17634
// end ; if not tmp then
17971: LD_VAR 0 2
17975: NOT
17976: IFFALSE 17992
// begin SetTag ( i , 0 ) ;
17978: LD_VAR 0 1
17982: PPUSH
17983: LD_INT 0
17985: PPUSH
17986: CALL_OW 109
// continue ;
17990: GO 17634
// end ; if not HasTask ( i ) then
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 314
18001: NOT
18002: IFFALSE 18022
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_VAR 0 2
18013: PUSH
18014: LD_INT 1
18016: ARRAY
18017: PPUSH
18018: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_EXP 67
18031: PPUSH
18032: CALL_OW 308
18036: NOT
18037: IFFALSE 18053
// ComMoveToArea ( i , ruBaseArea2 ) ;
18039: LD_VAR 0 1
18043: PPUSH
18044: LD_EXP 67
18048: PPUSH
18049: CALL_OW 113
// end ; if tag = tBuild then
18053: LD_VAR 0 6
18057: PUSH
18058: LD_INT 5
18060: EQUAL
18061: IFFALSE 18260
// begin if IsInUnit ( i ) then
18063: LD_VAR 0 1
18067: PPUSH
18068: CALL_OW 310
18072: IFFALSE 18085
// begin ComExitBuilding ( i ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: CALL_OW 122
// continue ;
18083: GO 17634
// end ; if not Count ( ruBuildings2 ) then
18085: LD_EXP 77
18089: PPUSH
18090: CALL 57256 0 1
18094: NOT
18095: IFFALSE 18113
// begin SetTag ( i , 0 ) ;
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_INT 0
18104: PPUSH
18105: CALL_OW 109
// continue ;
18109: GO 17634
// end else
18111: GO 18152
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18113: LD_EXP 69
18117: PPUSH
18118: LD_EXP 77
18122: PUSH
18123: LD_INT 1
18125: ARRAY
18126: PUSH
18127: LD_INT 1
18129: ARRAY
18130: PPUSH
18131: CALL 96788 0 2
18135: NOT
18136: IFFALSE 18152
// begin SetTag ( i , 0 ) ;
18138: LD_VAR 0 1
18142: PPUSH
18143: LD_INT 0
18145: PPUSH
18146: CALL_OW 109
// continue ;
18150: GO 17634
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18152: LD_ADDR_VAR 0 3
18156: PUSH
18157: LD_EXP 67
18161: PPUSH
18162: LD_INT 57
18164: PUSH
18165: EMPTY
18166: LIST
18167: PPUSH
18168: CALL_OW 70
18172: ST_TO_ADDR
// if undone then
18173: LD_VAR 0 3
18177: IFFALSE 18199
// begin ComComplete ( i , undone [ 1 ] ) ;
18179: LD_VAR 0 1
18183: PPUSH
18184: LD_VAR 0 3
18188: PUSH
18189: LD_INT 1
18191: ARRAY
18192: PPUSH
18193: CALL 63354 0 2
// continue ;
18197: GO 17634
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18199: LD_VAR 0 1
18203: PPUSH
18204: LD_EXP 77
18208: PUSH
18209: LD_INT 1
18211: ARRAY
18212: PUSH
18213: LD_INT 1
18215: ARRAY
18216: PPUSH
18217: LD_EXP 77
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PUSH
18226: LD_INT 2
18228: ARRAY
18229: PPUSH
18230: LD_EXP 77
18234: PUSH
18235: LD_INT 1
18237: ARRAY
18238: PUSH
18239: LD_INT 3
18241: ARRAY
18242: PPUSH
18243: LD_EXP 77
18247: PUSH
18248: LD_INT 1
18250: ARRAY
18251: PUSH
18252: LD_INT 4
18254: ARRAY
18255: PPUSH
18256: CALL_OW 145
// end ; if tag = tCrates then
18260: LD_VAR 0 6
18264: PUSH
18265: LD_INT 2
18267: EQUAL
18268: IFFALSE 18403
// begin if IsInUnit ( i ) then
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 310
18279: IFFALSE 18292
// begin ComExitBuilding ( i ) ;
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 122
// continue ;
18290: GO 17634
// end ; if not cr then
18292: LD_VAR 0 8
18296: NOT
18297: IFFALSE 18313
// begin SetTag ( i , 0 ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_INT 0
18306: PPUSH
18307: CALL_OW 109
// continue ;
18311: GO 17634
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 314
18322: NOT
18323: PUSH
18324: LD_INT 81
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 92
18336: PUSH
18337: LD_VAR 0 8
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PUSH
18346: LD_VAR 0 8
18350: PUSH
18351: LD_INT 2
18353: ARRAY
18354: PUSH
18355: LD_INT 12
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: NOT
18373: AND
18374: IFFALSE 18403
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18376: LD_VAR 0 1
18380: PPUSH
18381: LD_VAR 0 8
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PPUSH
18390: LD_VAR 0 8
18394: PUSH
18395: LD_INT 2
18397: ARRAY
18398: PPUSH
18399: CALL_OW 117
// end ; end ;
18403: GO 17634
18405: POP
18406: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18407: LD_ADDR_VAR 0 10
18411: PUSH
18412: LD_EXP 60
18416: PPUSH
18417: LD_INT 2
18419: PUSH
18420: LD_INT 25
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 25
18432: PUSH
18433: LD_INT 9
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 50
18447: PUSH
18448: EMPTY
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 72
18459: PUSH
18460: LD_EXP 62
18464: UNION
18465: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18466: LD_ADDR_VAR 0 12
18470: PUSH
18471: LD_EXP 67
18475: PPUSH
18476: LD_INT 81
18478: PUSH
18479: LD_INT 3
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 70
18490: ST_TO_ADDR
// if sol then
18491: LD_VAR 0 10
18495: IFFALSE 19019
// begin if enemyInBase then
18497: LD_VAR 0 12
18501: IFFALSE 18644
// begin for i in sol do
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_VAR 0 10
18512: PUSH
18513: FOR_IN
18514: IFFALSE 18640
// begin tw := IsInUnit ( i ) ;
18516: LD_ADDR_VAR 0 7
18520: PUSH
18521: LD_VAR 0 1
18525: PPUSH
18526: CALL_OW 310
18530: ST_TO_ADDR
// if tw then
18531: LD_VAR 0 7
18535: IFFALSE 18614
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18537: LD_VAR 0 7
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_INT 3
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 101
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 30
18567: PUSH
18568: LD_INT 32
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 30
18577: PUSH
18578: LD_INT 31
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: IN
18600: NOT
18601: IFFALSE 18612
// ComExitBuilding ( i ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 122
// end else
18612: GO 18638
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18614: LD_VAR 0 1
18618: PPUSH
18619: LD_VAR 0 12
18623: PPUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 74
18633: PPUSH
18634: CALL_OW 115
// end ;
18638: GO 18513
18640: POP
18641: POP
// end else
18642: GO 19019
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18644: LD_ADDR_VAR 0 13
18648: PUSH
18649: LD_EXP 67
18653: PPUSH
18654: LD_INT 3
18656: PUSH
18657: LD_INT 62
18659: PUSH
18660: EMPTY
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 30
18672: PUSH
18673: LD_INT 32
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 4
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 30
18692: PUSH
18693: LD_INT 5
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 30
18702: PUSH
18703: LD_INT 31
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PPUSH
18721: CALL_OW 70
18725: ST_TO_ADDR
// if empty then
18726: LD_VAR 0 13
18730: IFFALSE 18747
// empty := ReverseArray ( empty ) ;
18732: LD_ADDR_VAR 0 13
18736: PUSH
18737: LD_VAR 0 13
18741: PPUSH
18742: CALL 88132 0 1
18746: ST_TO_ADDR
// for i in sol do
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: LD_VAR 0 10
18756: PUSH
18757: FOR_IN
18758: IFFALSE 19017
// begin tag := GetTag ( i ) ;
18760: LD_ADDR_VAR 0 6
18764: PUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 110
18774: ST_TO_ADDR
// if tag = tMech then
18775: LD_VAR 0 6
18779: PUSH
18780: LD_INT 7
18782: EQUAL
18783: IFFALSE 18787
// continue ;
18785: GO 18757
// if GetLives ( i ) < 1000 and tag <> tHeal then
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 256
18796: PUSH
18797: LD_INT 1000
18799: LESS
18800: PUSH
18801: LD_VAR 0 6
18805: PUSH
18806: LD_INT 1
18808: NONEQUAL
18809: AND
18810: IFFALSE 18862
// begin SetTag ( i , tHeal ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18824: LD_VAR 0 1
18828: PPUSH
18829: LD_EXP 75
18833: PUSH
18834: LD_INT 1
18836: ARRAY
18837: PPUSH
18838: LD_EXP 75
18842: PUSH
18843: LD_INT 2
18845: ARRAY
18846: PPUSH
18847: CALL_OW 111
// AddComHold ( i ) ;
18851: LD_VAR 0 1
18855: PPUSH
18856: CALL_OW 200
// continue ;
18860: GO 18757
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
18862: LD_VAR 0 1
18866: PPUSH
18867: CALL_OW 256
18871: PUSH
18872: LD_INT 1000
18874: EQUAL
18875: PUSH
18876: LD_VAR 0 6
18880: PUSH
18881: LD_INT 1
18883: EQUAL
18884: AND
18885: IFFALSE 18901
// begin SetTag ( i , 0 ) ;
18887: LD_VAR 0 1
18891: PPUSH
18892: LD_INT 0
18894: PPUSH
18895: CALL_OW 109
// continue ;
18899: GO 18757
// end ; if HasTask ( i ) then
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 314
18910: IFFALSE 18914
// continue ;
18912: GO 18757
// if not IsInUnit ( i ) and not tag and empty then
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 310
18923: NOT
18924: PUSH
18925: LD_VAR 0 6
18929: NOT
18930: AND
18931: PUSH
18932: LD_VAR 0 13
18936: AND
18937: IFFALSE 19015
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_VAR 0 13
18948: PUSH
18949: LD_INT 1
18951: ARRAY
18952: PPUSH
18953: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
18957: LD_VAR 0 13
18961: PUSH
18962: LD_INT 1
18964: ARRAY
18965: PPUSH
18966: CALL_OW 266
18970: PUSH
18971: LD_INT 5
18973: EQUAL
18974: PUSH
18975: LD_INT 50
18977: PPUSH
18978: CALL_OW 13
18982: AND
18983: IFFALSE 18997
// AddComChangeProfession ( i , class_bazooker ) ;
18985: LD_VAR 0 1
18989: PPUSH
18990: LD_INT 9
18992: PPUSH
18993: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
18997: LD_ADDR_VAR 0 13
19001: PUSH
19002: LD_VAR 0 13
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: CALL_OW 3
19014: ST_TO_ADDR
// end ; end ;
19015: GO 18757
19017: POP
19018: POP
// end ; end ; end ;
19019: PPOPN 16
19021: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19022: LD_EXP 79
19026: PUSH
19027: LD_EXP 22
19031: AND
19032: IFFALSE 19599
19034: GO 19036
19036: DISABLE
19037: LD_INT 0
19039: PPUSH
19040: PPUSH
19041: PPUSH
// begin enable ;
19042: ENABLE
// if not ruTanks then
19043: LD_EXP 79
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19599
// for i in ruTanks do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_EXP 79
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19597
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 302
19074: NOT
19075: PUSH
19076: LD_VAR 0 1
19080: PPUSH
19081: CALL_OW 255
19085: PUSH
19086: LD_INT 3
19088: NONEQUAL
19089: OR
19090: IFFALSE 19110
// begin ruTanks := ruTanks diff i ;
19092: LD_ADDR_EXP 79
19096: PUSH
19097: LD_EXP 79
19101: PUSH
19102: LD_VAR 0 1
19106: DIFF
19107: ST_TO_ADDR
// continue ;
19108: GO 19062
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19110: LD_VAR 0 1
19114: PPUSH
19115: CALL_OW 110
19119: NOT
19120: PUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: CALL_OW 110
19130: PUSH
19131: LD_INT 0
19133: EQUAL
19134: OR
19135: IFFALSE 19308
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 262
19146: PUSH
19147: LD_INT 1
19149: EQUAL
19150: PUSH
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL_OW 261
19160: PUSH
19161: LD_INT 50
19163: LESS
19164: AND
19165: PUSH
19166: LD_EXP 68
19170: PPUSH
19171: CALL_OW 302
19175: AND
19176: IFFALSE 19263
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19178: LD_VAR 0 1
19182: PPUSH
19183: LD_EXP 68
19187: PPUSH
19188: CALL_OW 250
19192: PPUSH
19193: LD_EXP 68
19197: PPUSH
19198: CALL_OW 251
19202: PPUSH
19203: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19207: LD_INT 35
19209: PPUSH
19210: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_EXP 68
19223: PPUSH
19224: CALL_OW 250
19228: PPUSH
19229: LD_EXP 68
19233: PPUSH
19234: CALL_OW 251
19238: PPUSH
19239: CALL_OW 297
19243: PUSH
19244: LD_INT 6
19246: LESS
19247: IFFALSE 19207
// SetFuel ( i , 100 ) ;
19249: LD_VAR 0 1
19253: PPUSH
19254: LD_INT 100
19256: PPUSH
19257: CALL_OW 240
// end else
19261: GO 19308
// if not IsInArea ( i , ruParkingArea ) then
19263: LD_VAR 0 1
19267: PPUSH
19268: LD_EXP 82
19272: PPUSH
19273: CALL_OW 308
19277: NOT
19278: IFFALSE 19296
// ComMoveToArea ( i , ruParkingArea ) else
19280: LD_VAR 0 1
19284: PPUSH
19285: LD_EXP 82
19289: PPUSH
19290: CALL_OW 113
19294: GO 19308
// SetTag ( i , tParking ) ;
19296: LD_VAR 0 1
19300: PPUSH
19301: LD_INT 12
19303: PPUSH
19304: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 110
19317: PUSH
19318: LD_INT 12
19320: EQUAL
19321: IFFALSE 19451
// begin if GetLives ( i ) < 650 then
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 256
19332: PUSH
19333: LD_INT 650
19335: LESS
19336: IFFALSE 19428
// begin if not IsDrivenBy ( i ) then
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 311
19347: NOT
19348: IFFALSE 19352
// continue ;
19350: GO 19062
// mech := IsDrivenBy ( i ) ;
19352: LD_ADDR_VAR 0 2
19356: PUSH
19357: LD_VAR 0 1
19361: PPUSH
19362: CALL_OW 311
19366: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19367: LD_VAR 0 2
19371: PPUSH
19372: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19376: LD_VAR 0 2
19380: PPUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19390: LD_INT 35
19392: PPUSH
19393: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 256
19406: PUSH
19407: LD_INT 1000
19409: EQUAL
19410: IFFALSE 19390
// ComEnterUnit ( mech , i ) ;
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 120
// end else
19426: GO 19451
// if IsDrivenBy ( i ) then
19428: LD_VAR 0 1
19432: PPUSH
19433: CALL_OW 311
19437: IFFALSE 19451
// SetTag ( i , tAttack ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_INT 13
19446: PPUSH
19447: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL_OW 110
19460: PUSH
19461: LD_INT 13
19463: EQUAL
19464: IFFALSE 19595
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19466: LD_ADDR_VAR 0 3
19470: PUSH
19471: LD_EXP 66
19475: PPUSH
19476: LD_INT 81
19478: PUSH
19479: LD_INT 3
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 70
19490: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 256
19500: PUSH
19501: LD_INT 650
19503: LESS
19504: IFFALSE 19529
// begin ComStop ( i ) ;
19506: LD_VAR 0 1
19510: PPUSH
19511: CALL_OW 141
// SetTag ( i , 0 ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 0
19522: PPUSH
19523: CALL_OW 109
// continue ;
19527: GO 19062
// end ; if enemy then
19529: LD_VAR 0 3
19533: IFFALSE 19573
// begin if not HasTask ( i ) then
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 314
19544: NOT
19545: IFFALSE 19571
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19547: LD_VAR 0 1
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 74
19566: PPUSH
19567: CALL_OW 115
// end else
19571: GO 19595
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19573: LD_VAR 0 1
19577: PPUSH
19578: LD_INT 105
19580: PUSH
19581: LD_INT 35
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: EMPTY
19589: LIST
19590: PPUSH
19591: CALL 95469 0 2
// end ; end ;
19595: GO 19062
19597: POP
19598: POP
// end ;
19599: PPOPN 3
19601: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19602: LD_EXP 80
19606: PUSH
19607: LD_EXP 22
19611: AND
19612: IFFALSE 20179
19614: GO 19616
19616: DISABLE
19617: LD_INT 0
19619: PPUSH
19620: PPUSH
19621: PPUSH
// begin enable ;
19622: ENABLE
// if not ruTanks2 then
19623: LD_EXP 80
19627: NOT
19628: IFFALSE 19632
// exit ;
19630: GO 20179
// for i in ruTanks2 do
19632: LD_ADDR_VAR 0 1
19636: PUSH
19637: LD_EXP 80
19641: PUSH
19642: FOR_IN
19643: IFFALSE 20177
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19645: LD_VAR 0 1
19649: PPUSH
19650: CALL_OW 302
19654: NOT
19655: PUSH
19656: LD_VAR 0 1
19660: PPUSH
19661: CALL_OW 255
19665: PUSH
19666: LD_INT 3
19668: NONEQUAL
19669: OR
19670: IFFALSE 19690
// begin ruTanks := ruTanks diff i ;
19672: LD_ADDR_EXP 79
19676: PUSH
19677: LD_EXP 79
19681: PUSH
19682: LD_VAR 0 1
19686: DIFF
19687: ST_TO_ADDR
// continue ;
19688: GO 19642
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19690: LD_VAR 0 1
19694: PPUSH
19695: CALL_OW 110
19699: NOT
19700: PUSH
19701: LD_VAR 0 1
19705: PPUSH
19706: CALL_OW 110
19710: PUSH
19711: LD_INT 0
19713: EQUAL
19714: OR
19715: IFFALSE 19888
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 262
19726: PUSH
19727: LD_INT 1
19729: EQUAL
19730: PUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 261
19740: PUSH
19741: LD_INT 50
19743: LESS
19744: AND
19745: PUSH
19746: LD_EXP 69
19750: PPUSH
19751: CALL_OW 302
19755: AND
19756: IFFALSE 19843
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19758: LD_VAR 0 1
19762: PPUSH
19763: LD_EXP 69
19767: PPUSH
19768: CALL_OW 250
19772: PPUSH
19773: LD_EXP 69
19777: PPUSH
19778: CALL_OW 251
19782: PPUSH
19783: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19787: LD_INT 35
19789: PPUSH
19790: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19794: LD_VAR 0 1
19798: PPUSH
19799: LD_EXP 69
19803: PPUSH
19804: CALL_OW 250
19808: PPUSH
19809: LD_EXP 69
19813: PPUSH
19814: CALL_OW 251
19818: PPUSH
19819: CALL_OW 297
19823: PUSH
19824: LD_INT 6
19826: LESS
19827: IFFALSE 19787
// SetFuel ( i , 100 ) ;
19829: LD_VAR 0 1
19833: PPUSH
19834: LD_INT 100
19836: PPUSH
19837: CALL_OW 240
// end else
19841: GO 19888
// if not IsInArea ( i , ruParkingArea2 ) then
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_EXP 83
19852: PPUSH
19853: CALL_OW 308
19857: NOT
19858: IFFALSE 19876
// ComMoveToArea ( i , ruParkingArea2 ) else
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_EXP 83
19869: PPUSH
19870: CALL_OW 113
19874: GO 19888
// SetTag ( i , tParking ) ;
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_INT 12
19883: PPUSH
19884: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 110
19897: PUSH
19898: LD_INT 12
19900: EQUAL
19901: IFFALSE 20031
// begin if GetLives ( i ) < 650 then
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 256
19912: PUSH
19913: LD_INT 650
19915: LESS
19916: IFFALSE 20008
// begin if not IsDrivenBy ( i ) then
19918: LD_VAR 0 1
19922: PPUSH
19923: CALL_OW 311
19927: NOT
19928: IFFALSE 19932
// continue ;
19930: GO 19642
// mech := IsDrivenBy ( i ) ;
19932: LD_ADDR_VAR 0 2
19936: PUSH
19937: LD_VAR 0 1
19941: PPUSH
19942: CALL_OW 311
19946: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19947: LD_VAR 0 2
19951: PPUSH
19952: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19956: LD_VAR 0 2
19960: PPUSH
19961: LD_VAR 0 1
19965: PPUSH
19966: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19970: LD_INT 35
19972: PPUSH
19973: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 256
19986: PUSH
19987: LD_INT 1000
19989: EQUAL
19990: IFFALSE 19970
// ComEnterUnit ( mech , i ) ;
19992: LD_VAR 0 2
19996: PPUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 120
// end else
20006: GO 20031
// if IsDrivenBy ( i ) then
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 311
20017: IFFALSE 20031
// SetTag ( i , tAttack ) ;
20019: LD_VAR 0 1
20023: PPUSH
20024: LD_INT 13
20026: PPUSH
20027: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 110
20040: PUSH
20041: LD_INT 13
20043: EQUAL
20044: IFFALSE 20175
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_EXP 67
20055: PPUSH
20056: LD_INT 81
20058: PUSH
20059: LD_INT 3
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL_OW 70
20070: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 256
20080: PUSH
20081: LD_INT 650
20083: LESS
20084: IFFALSE 20109
// begin ComStop ( i ) ;
20086: LD_VAR 0 1
20090: PPUSH
20091: CALL_OW 141
// SetTag ( i , 0 ) ;
20095: LD_VAR 0 1
20099: PPUSH
20100: LD_INT 0
20102: PPUSH
20103: CALL_OW 109
// continue ;
20107: GO 19642
// end ; if enemy then
20109: LD_VAR 0 3
20113: IFFALSE 20153
// begin if not HasTask ( i ) then
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 314
20124: NOT
20125: IFFALSE 20151
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_VAR 0 3
20136: PPUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: CALL_OW 74
20146: PPUSH
20147: CALL_OW 115
// end else
20151: GO 20175
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20153: LD_VAR 0 1
20157: PPUSH
20158: LD_INT 105
20160: PUSH
20161: LD_INT 35
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: PPUSH
20171: CALL 95469 0 2
// end ; end ;
20175: GO 19642
20177: POP
20178: POP
// end ;
20179: PPOPN 3
20181: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20182: LD_EXP 81
20186: PPUSH
20187: CALL 57256 0 1
20191: IFFALSE 20204
20193: GO 20195
20195: DISABLE
// begin enable ;
20196: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20197: LD_INT 106
20199: PPUSH
20200: CALL_OW 427
// end ;
20204: END
// export function RussianExtraAttack ; var i , tmp ; begin
20205: LD_INT 0
20207: PPUSH
20208: PPUSH
20209: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20210: LD_ADDR_VAR 0 3
20214: PUSH
20215: LD_EXP 81
20219: PPUSH
20220: LD_INT 50
20222: PUSH
20223: EMPTY
20224: LIST
20225: PPUSH
20226: CALL_OW 72
20230: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20231: LD_ADDR_EXP 81
20235: PUSH
20236: LD_EXP 81
20240: PUSH
20241: LD_VAR 0 3
20245: DIFF
20246: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20247: LD_VAR 0 3
20251: PPUSH
20252: LD_INT 105
20254: PPUSH
20255: LD_INT 35
20257: PPUSH
20258: CALL_OW 114
// wait ( 0 0$5 ) ;
20262: LD_INT 175
20264: PPUSH
20265: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20269: LD_INT 35
20271: PPUSH
20272: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20276: LD_ADDR_VAR 0 3
20280: PUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_INT 50
20288: PUSH
20289: EMPTY
20290: LIST
20291: PPUSH
20292: CALL_OW 72
20296: ST_TO_ADDR
// for i in tmp do
20297: LD_ADDR_VAR 0 2
20301: PUSH
20302: LD_VAR 0 3
20306: PUSH
20307: FOR_IN
20308: IFFALSE 20334
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20310: LD_VAR 0 2
20314: PPUSH
20315: LD_INT 105
20317: PUSH
20318: LD_INT 35
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: PPUSH
20328: CALL 95469 0 2
20332: GO 20307
20334: POP
20335: POP
// until not tmp ;
20336: LD_VAR 0 3
20340: NOT
20341: IFFALSE 20269
// end ;
20343: LD_VAR 0 1
20347: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
20359: PPUSH
// result := [ ] ;
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: EMPTY
20366: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20367: LD_ADDR_VAR 0 7
20371: PUSH
20372: LD_INT 4
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: LD_INT 6
20380: PUSH
20381: LD_INT 7
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: PUSH
20390: LD_OWVAR 67
20394: ARRAY
20395: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20396: LD_ADDR_VAR 0 8
20400: PUSH
20401: LD_INT 19
20403: ST_TO_ADDR
// parking := ruGatPointArea ;
20404: LD_ADDR_VAR 0 9
20408: PUSH
20409: LD_INT 32
20411: ST_TO_ADDR
// dir := 5 ;
20412: LD_ADDR_VAR 0 10
20416: PUSH
20417: LD_INT 5
20419: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20420: LD_VAR 0 8
20424: PPUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_INT 6
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 70
20457: IFFALSE 20518
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20459: LD_ADDR_VAR 0 3
20463: PUSH
20464: LD_VAR 0 8
20468: PPUSH
20469: LD_INT 2
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_INT 6
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: PPUSH
20497: CALL_OW 70
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20516
// RemoveUnit ( i ) ;
20505: LD_VAR 0 3
20509: PPUSH
20510: CALL_OW 64
20514: GO 20502
20516: POP
20517: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20518: LD_VAR 0 8
20522: PPUSH
20523: LD_INT 3
20525: PUSH
20526: LD_INT 21
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 22
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 70
20558: IFFALSE 20622
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_VAR 0 8
20569: PPUSH
20570: LD_INT 3
20572: PUSH
20573: LD_INT 21
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 22
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PPUSH
20601: CALL_OW 70
20605: PUSH
20606: FOR_IN
20607: IFFALSE 20620
// KillUnit ( i ) ;
20609: LD_VAR 0 3
20613: PPUSH
20614: CALL_OW 66
20618: GO 20606
20620: POP
20621: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20622: LD_VAR 0 8
20626: PPUSH
20627: LD_INT 21
20629: PUSH
20630: LD_INT 1
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 22
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 70
20655: IFFALSE 20718
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_VAR 0 8
20666: PPUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 22
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PPUSH
20691: CALL_OW 70
20695: PUSH
20696: FOR_IN
20697: IFFALSE 20716
// ComMoveXY ( i , 92 , 92 ) ;
20699: LD_VAR 0 3
20703: PPUSH
20704: LD_INT 92
20706: PPUSH
20707: LD_INT 92
20709: PPUSH
20710: CALL_OW 111
20714: GO 20696
20716: POP
20717: POP
// repeat wait ( 0 0$1 ) ;
20718: LD_INT 35
20720: PPUSH
20721: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20725: LD_VAR 0 8
20729: PPUSH
20730: LD_INT 50
20732: PUSH
20733: EMPTY
20734: LIST
20735: PPUSH
20736: CALL_OW 70
20740: NOT
20741: IFFALSE 20718
// InitHC_All ( ) ;
20743: CALL_OW 584
// InitVc ;
20747: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20751: LD_ADDR_VAR 0 3
20755: PUSH
20756: DOUBLE
20757: LD_INT 1
20759: DEC
20760: ST_TO_ADDR
20761: LD_INT 3
20763: PUSH
20764: LD_INT 4
20766: PUSH
20767: LD_INT 4
20769: PUSH
20770: LD_INT 5
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: LD_OWVAR 67
20783: ARRAY
20784: PUSH
20785: LD_VAR 0 1
20789: PLUS
20790: PUSH
20791: FOR_TO
20792: IFFALSE 21099
// begin uc_side := 6 ;
20794: LD_ADDR_OWVAR 20
20798: PUSH
20799: LD_INT 6
20801: ST_TO_ADDR
// uc_nation := nation_russian ;
20802: LD_ADDR_OWVAR 21
20806: PUSH
20807: LD_INT 3
20809: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20810: LD_ADDR_VAR 0 11
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 3
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: LD_INT 3
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_INT 4
20838: PPUSH
20839: CALL_OW 12
20843: ARRAY
20844: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
20845: LD_INT 22
20847: PUSH
20848: LD_INT 24
20850: PUSH
20851: LD_INT 23
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 3
20866: MOD
20867: PUSH
20868: LD_INT 1
20870: PLUS
20871: ARRAY
20872: PPUSH
20873: LD_INT 3
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PPUSH
20886: LD_INT 2
20888: PPUSH
20889: CALL_OW 12
20893: ARRAY
20894: PPUSH
20895: LD_VAR 0 11
20899: PPUSH
20900: LD_INT 45
20902: PUSH
20903: LD_INT 46
20905: PUSH
20906: LD_INT 43
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 3
20921: MOD
20922: PUSH
20923: LD_INT 1
20925: PLUS
20926: ARRAY
20927: PPUSH
20928: LD_INT 100
20930: PPUSH
20931: CALL 59994 0 5
// veh := CreateVehicle ;
20935: LD_ADDR_VAR 0 6
20939: PUSH
20940: CALL_OW 45
20944: ST_TO_ADDR
// SetDir ( veh , dir ) ;
20945: LD_VAR 0 6
20949: PPUSH
20950: LD_VAR 0 10
20954: PPUSH
20955: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
20959: LD_VAR 0 6
20963: PPUSH
20964: LD_VAR 0 8
20968: PPUSH
20969: LD_INT 0
20971: PPUSH
20972: CALL_OW 49
// if control = control_manual then
20976: LD_VAR 0 11
20980: PUSH
20981: LD_INT 1
20983: EQUAL
20984: IFFALSE 21038
// begin uc_side := 6 ;
20986: LD_ADDR_OWVAR 20
20990: PUSH
20991: LD_INT 6
20993: ST_TO_ADDR
// uc_nation := nation_russian ;
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 3
21001: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21002: LD_INT 0
21004: PPUSH
21005: LD_VAR 0 7
21009: PPUSH
21010: CALL_OW 383
// un := CreateHuman ;
21014: LD_ADDR_VAR 0 5
21018: PUSH
21019: CALL_OW 44
21023: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21024: LD_VAR 0 5
21028: PPUSH
21029: LD_VAR 0 6
21033: PPUSH
21034: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21038: LD_VAR 0 6
21042: PPUSH
21043: LD_VAR 0 9
21047: PPUSH
21048: CALL_OW 113
// wait ( 0 0$3 ) ;
21052: LD_INT 105
21054: PPUSH
21055: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21059: LD_VAR 0 8
21063: PPUSH
21064: LD_INT 50
21066: PUSH
21067: EMPTY
21068: LIST
21069: PPUSH
21070: CALL_OW 70
21074: NOT
21075: IFFALSE 21038
// result := Join ( result , veh ) ;
21077: LD_ADDR_VAR 0 2
21081: PUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: LD_VAR 0 6
21091: PPUSH
21092: CALL 92865 0 2
21096: ST_TO_ADDR
// end ;
21097: GO 20791
21099: POP
21100: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: DOUBLE
21107: LD_INT 1
21109: DEC
21110: ST_TO_ADDR
21111: LD_INT 2
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: LD_INT 3
21119: PUSH
21120: LD_INT 4
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: PUSH
21129: LD_OWVAR 67
21133: ARRAY
21134: PUSH
21135: FOR_TO
21136: IFFALSE 21292
// begin uc_side := 6 ;
21138: LD_ADDR_OWVAR 20
21142: PUSH
21143: LD_INT 6
21145: ST_TO_ADDR
// uc_nation := nation_russian ;
21146: LD_ADDR_OWVAR 21
21150: PUSH
21151: LD_INT 3
21153: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21154: LD_INT 0
21156: PPUSH
21157: LD_VAR 0 7
21161: PPUSH
21162: CALL_OW 381
// un := CreateHuman ;
21166: LD_ADDR_VAR 0 5
21170: PUSH
21171: CALL_OW 44
21175: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21176: LD_INT 35
21178: PUSH
21179: LD_INT 60
21181: PUSH
21182: LD_INT 70
21184: PUSH
21185: LD_INT 80
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_OWVAR 67
21198: ARRAY
21199: PPUSH
21200: CALL_OW 13
21204: IFFALSE 21218
// SetClass ( un , class_bazooker ) ;
21206: LD_VAR 0 5
21210: PPUSH
21211: LD_INT 9
21213: PPUSH
21214: CALL_OW 336
// SetDir ( un , dir ) ;
21218: LD_VAR 0 5
21222: PPUSH
21223: LD_VAR 0 10
21227: PPUSH
21228: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21232: LD_VAR 0 5
21236: PPUSH
21237: LD_VAR 0 8
21241: PPUSH
21242: LD_INT 0
21244: PPUSH
21245: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21249: LD_VAR 0 5
21253: PPUSH
21254: LD_VAR 0 9
21258: PPUSH
21259: CALL_OW 113
// wait ( 0 0$1 ) ;
21263: LD_INT 35
21265: PPUSH
21266: CALL_OW 67
// result := Join ( result , un ) ;
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_VAR 0 2
21279: PPUSH
21280: LD_VAR 0 5
21284: PPUSH
21285: CALL 92865 0 2
21289: ST_TO_ADDR
// end ;
21290: GO 21135
21292: POP
21293: POP
// end ;
21294: LD_VAR 0 2
21298: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21299: LD_INT 0
21301: PPUSH
21302: PPUSH
21303: PPUSH
21304: PPUSH
21305: PPUSH
21306: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21307: LD_ADDR_EXP 18
21311: PUSH
21312: LD_EXP 18
21316: PPUSH
21317: CALL 94226 0 1
21321: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 99
21329: PUSH
21330: LD_INT 91
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 78
21339: PUSH
21340: LD_INT 50
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 91
21349: PUSH
21350: LD_INT 45
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21362: LD_ADDR_VAR 0 4
21366: PUSH
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL 20348 0 1
21376: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21377: LD_VAR 0 4
21381: PPUSH
21382: LD_INT 21
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PPUSH
21392: CALL_OW 72
21396: PPUSH
21397: LD_INT 108
21399: PPUSH
21400: LD_INT 60
21402: PPUSH
21403: CALL_OW 114
// DRussianNextAttack ;
21407: CALL 28478 0 0
// repeat wait ( 0 0$2 ) ;
21411: LD_INT 70
21413: PPUSH
21414: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21418: LD_ADDR_VAR 0 7
21422: PUSH
21423: LD_INT 81
21425: PUSH
21426: LD_INT 6
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PPUSH
21433: CALL_OW 69
21437: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21438: LD_ADDR_VAR 0 4
21442: PUSH
21443: LD_VAR 0 4
21447: PPUSH
21448: LD_INT 50
21450: PUSH
21451: EMPTY
21452: LIST
21453: PPUSH
21454: CALL_OW 72
21458: ST_TO_ADDR
// for i in attackers do
21459: LD_ADDR_VAR 0 6
21463: PUSH
21464: LD_VAR 0 4
21468: PUSH
21469: FOR_IN
21470: IFFALSE 21846
// begin if not IsOk ( i ) then
21472: LD_VAR 0 6
21476: PPUSH
21477: CALL_OW 302
21481: NOT
21482: IFFALSE 21502
// begin attackers := attackers diff i ;
21484: LD_ADDR_VAR 0 4
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: LD_VAR 0 6
21498: DIFF
21499: ST_TO_ADDR
// continue ;
21500: GO 21469
// end ; if GetType ( i ) = unit_vehicle then
21502: LD_VAR 0 6
21506: PPUSH
21507: CALL_OW 247
21511: PUSH
21512: LD_INT 2
21514: EQUAL
21515: IFFALSE 21533
// AgressiveMove ( i , path ) else
21517: LD_VAR 0 6
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: CALL 95469 0 2
21531: GO 21844
// begin if GetClass ( i ) = class_bazooker then
21533: LD_VAR 0 6
21537: PPUSH
21538: CALL_OW 257
21542: PUSH
21543: LD_INT 9
21545: EQUAL
21546: IFFALSE 21820
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21548: LD_VAR 0 6
21552: PPUSH
21553: LD_VAR 0 7
21557: PPUSH
21558: LD_VAR 0 6
21562: PPUSH
21563: CALL_OW 74
21567: PPUSH
21568: CALL_OW 296
21572: PUSH
21573: LD_INT 12
21575: GREATER
21576: IFFALSE 21604
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21578: LD_VAR 0 6
21582: PPUSH
21583: LD_VAR 0 7
21587: PPUSH
21588: LD_VAR 0 6
21592: PPUSH
21593: CALL_OW 74
21597: PPUSH
21598: CALL 97087 0 2
21602: GO 21818
// begin e := NearestUnitToUnit ( enemy , i ) ;
21604: LD_ADDR_VAR 0 5
21608: PUSH
21609: LD_VAR 0 7
21613: PPUSH
21614: LD_VAR 0 6
21618: PPUSH
21619: CALL_OW 74
21623: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21624: LD_INT 1
21626: PPUSH
21627: LD_INT 3
21629: PPUSH
21630: CALL_OW 12
21634: PUSH
21635: LD_INT 1
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21660
21643: POP
// ComAttackUnit ( i , e ) ; 2 :
21644: LD_VAR 0 6
21648: PPUSH
21649: LD_VAR 0 5
21653: PPUSH
21654: CALL_OW 115
21658: GO 21818
21660: LD_INT 2
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21746
21668: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21669: LD_VAR 0 6
21673: PPUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 250
21683: PPUSH
21684: LD_VAR 0 5
21688: PPUSH
21689: CALL_OW 251
21693: PPUSH
21694: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21698: LD_VAR 0 5
21702: PPUSH
21703: CALL_OW 247
21707: PUSH
21708: LD_INT 3
21710: NONEQUAL
21711: PUSH
21712: LD_EXP 17
21716: NOT
21717: AND
21718: IFFALSE 21744
// begin dialogRussianSpaceAmmo := true ;
21720: LD_ADDR_EXP 17
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21728: LD_INT 210
21730: PPUSH
21731: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21735: LD_VAR 0 5
21739: PPUSH
21740: CALL 28525 0 1
// end ; end ; 3 :
21744: GO 21818
21746: LD_INT 3
21748: DOUBLE
21749: EQUAL
21750: IFTRUE 21754
21752: GO 21817
21754: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21755: LD_VAR 0 6
21759: PPUSH
21760: LD_VAR 0 5
21764: PPUSH
21765: CALL_OW 250
21769: PPUSH
21770: LD_VAR 0 5
21774: PPUSH
21775: CALL_OW 251
21779: PPUSH
21780: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21784: LD_EXP 17
21788: NOT
21789: IFFALSE 21815
// begin dialogRussianSpaceAmmo := true ;
21791: LD_ADDR_EXP 17
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21799: LD_INT 210
21801: PPUSH
21802: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21806: LD_VAR 0 5
21810: PPUSH
21811: CALL 28525 0 1
// end ; end ; end ;
21815: GO 21818
21817: POP
// end ; end else
21818: GO 21844
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21820: LD_VAR 0 6
21824: PPUSH
21825: LD_VAR 0 7
21829: PPUSH
21830: LD_VAR 0 6
21834: PPUSH
21835: CALL_OW 74
21839: PPUSH
21840: CALL 97087 0 2
// end ; end ;
21844: GO 21469
21846: POP
21847: POP
// until not attackers ;
21848: LD_VAR 0 4
21852: NOT
21853: IFFALSE 21411
// end ;
21855: LD_VAR 0 2
21859: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
21860: LD_EXP 10
21864: PUSH
21865: LD_EXP 16
21869: AND
21870: IFFALSE 21982
21872: GO 21874
21874: DISABLE
21875: LD_INT 0
21877: PPUSH
21878: PPUSH
21879: PPUSH
// begin InitHC_All ( ) ;
21880: CALL_OW 584
// for i := 1 to 3 do
21884: LD_ADDR_VAR 0 1
21888: PUSH
21889: DOUBLE
21890: LD_INT 1
21892: DEC
21893: ST_TO_ADDR
21894: LD_INT 3
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21980
// begin uc_side := 6 ;
21900: LD_ADDR_OWVAR 20
21904: PUSH
21905: LD_INT 6
21907: ST_TO_ADDR
// uc_nation := nation_russian ;
21908: LD_ADDR_OWVAR 21
21912: PUSH
21913: LD_INT 3
21915: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
21916: LD_INT 0
21918: PPUSH
21919: LD_INT 3
21921: PPUSH
21922: CALL_OW 381
// un := CreateHuman ;
21926: LD_ADDR_VAR 0 2
21930: PUSH
21931: CALL_OW 44
21935: ST_TO_ADDR
// SetDir ( un , 2 ) ;
21936: LD_VAR 0 2
21940: PPUSH
21941: LD_INT 2
21943: PPUSH
21944: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
21948: LD_VAR 0 2
21952: PPUSH
21953: LD_INT 33
21955: PPUSH
21956: LD_INT 0
21958: PPUSH
21959: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
21963: LD_VAR 0 2
21967: PPUSH
21968: LD_INT 52
21970: PPUSH
21971: LD_INT 16
21973: PPUSH
21974: CALL_OW 114
// end ;
21978: GO 21897
21980: POP
21981: POP
// end ;
21982: PPOPN 3
21984: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
21985: LD_EXP 68
21989: PPUSH
21990: CALL_OW 302
21994: PUSH
21995: LD_EXP 78
21999: NOT
22000: AND
22001: IFFALSE 22238
22003: GO 22005
22005: DISABLE
22006: LD_INT 0
22008: PPUSH
// begin enable ;
22009: ENABLE
// uc_side := 3 ;
22010: LD_ADDR_OWVAR 20
22014: PUSH
22015: LD_INT 3
22017: ST_TO_ADDR
// uc_nation := nation_russian ;
22018: LD_ADDR_OWVAR 21
22022: PUSH
22023: LD_INT 3
22025: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22026: LD_INT 22
22028: PPUSH
22029: LD_INT 3
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 51
22037: PPUSH
22038: LD_INT 100
22040: PPUSH
22041: CALL 59994 0 5
// cargo := CreateVehicle ;
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: CALL_OW 45
22054: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_INT 5
22062: PPUSH
22063: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22067: LD_VAR 0 1
22071: PPUSH
22072: LD_INT 187
22074: PPUSH
22075: LD_INT 117
22077: PPUSH
22078: LD_INT 0
22080: PPUSH
22081: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22085: LD_VAR 0 1
22089: PPUSH
22090: LD_INT 1
22092: PPUSH
22093: LD_INT 100
22095: PPUSH
22096: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22100: LD_VAR 0 1
22104: PPUSH
22105: LD_EXP 68
22109: PPUSH
22110: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_EXP 68
22123: PPUSH
22124: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_INT 187
22135: PPUSH
22136: LD_INT 117
22138: PPUSH
22139: CALL_OW 171
// wait ( 0 0$10 ) ;
22143: LD_INT 350
22145: PPUSH
22146: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22150: LD_INT 35
22152: PPUSH
22153: CALL_OW 67
// if not HasTask ( cargo ) then
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 314
22166: NOT
22167: IFFALSE 22184
// ComMoveXY ( cargo , 187 , 117 ) ;
22169: LD_VAR 0 1
22173: PPUSH
22174: LD_INT 187
22176: PPUSH
22177: LD_INT 117
22179: PPUSH
22180: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22184: LD_VAR 0 1
22188: PPUSH
22189: CALL_OW 301
22193: PUSH
22194: LD_VAR 0 1
22198: PPUSH
22199: LD_INT 187
22201: PPUSH
22202: LD_INT 117
22204: PPUSH
22205: CALL_OW 307
22209: OR
22210: IFFALSE 22150
// if IsAt ( cargo , 187 , 117 ) then
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 187
22219: PPUSH
22220: LD_INT 117
22222: PPUSH
22223: CALL_OW 307
22227: IFFALSE 22238
// RemoveUnit ( cargo ) ;
22229: LD_VAR 0 1
22233: PPUSH
22234: CALL_OW 64
// end ; end_of_file
22238: PPOPN 1
22240: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL 49849 0 1
// if unit = Dietrich and not arabianAttack then
22250: LD_VAR 0 1
22254: PUSH
22255: LD_EXP 50
22259: EQUAL
22260: PUSH
22261: LD_EXP 4
22265: NOT
22266: AND
22267: IFFALSE 22276
// YouLost ( ArabDefeated ) ;
22269: LD_STRING ArabDefeated
22271: PPUSH
22272: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22276: LD_VAR 0 1
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 25
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 69
22309: IN
22310: PUSH
22311: LD_EXP 4
22315: NOT
22316: AND
22317: IFFALSE 22326
// YouLost ( ArabDefeated ) ;
22319: LD_STRING ArabDefeated
22321: PPUSH
22322: CALL_OW 104
// if unit in JMMSquad then
22326: LD_VAR 0 1
22330: PUSH
22331: LD_EXP 45
22335: IN
22336: IFFALSE 22354
// JMMSquad := JMMSquad diff unit ;
22338: LD_ADDR_EXP 45
22342: PUSH
22343: LD_EXP 45
22347: PUSH
22348: LD_VAR 0 1
22352: DIFF
22353: ST_TO_ADDR
// if unit = Truman then
22354: LD_VAR 0 1
22358: PUSH
22359: LD_EXP 43
22363: EQUAL
22364: IFFALSE 22373
// YouLost ( Powell ) ;
22366: LD_STRING Powell
22368: PPUSH
22369: CALL_OW 104
// if unit = JMM then
22373: LD_VAR 0 1
22377: PUSH
22378: LD_EXP 23
22382: EQUAL
22383: IFFALSE 22392
// YouLost ( JMM ) ;
22385: LD_STRING JMM
22387: PPUSH
22388: CALL_OW 104
// if unit in arEscapist then
22392: LD_VAR 0 1
22396: PUSH
22397: LD_EXP 56
22401: IN
22402: IFFALSE 22420
// arEscapist := arEscapist diff unit ;
22404: LD_ADDR_EXP 56
22408: PUSH
22409: LD_EXP 56
22413: PUSH
22414: LD_VAR 0 1
22418: DIFF
22419: ST_TO_ADDR
// if unit in arAttackersInf then
22420: LD_VAR 0 1
22424: PUSH
22425: LD_EXP 57
22429: IN
22430: IFFALSE 22448
// arAttackersInf := arAttackersInf diff unit ;
22432: LD_ADDR_EXP 57
22436: PUSH
22437: LD_EXP 57
22441: PUSH
22442: LD_VAR 0 1
22446: DIFF
22447: ST_TO_ADDR
// if unit in arAttackersVeh then
22448: LD_VAR 0 1
22452: PUSH
22453: LD_EXP 58
22457: IN
22458: IFFALSE 22476
// arAttackersVeh := arAttackersVeh diff unit ;
22460: LD_ADDR_EXP 58
22464: PUSH
22465: LD_EXP 58
22469: PUSH
22470: LD_VAR 0 1
22474: DIFF
22475: ST_TO_ADDR
// if unit = Khatam then
22476: LD_VAR 0 1
22480: PUSH
22481: LD_EXP 36
22485: EQUAL
22486: IFFALSE 22496
// khatamStatus := false ;
22488: LD_ADDR_EXP 5
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// if unit = epsilon then
22496: LD_VAR 0 1
22500: PUSH
22501: LD_EXP 10
22505: EQUAL
22506: IFFALSE 22537
// begin hasBase := false ;
22508: LD_ADDR_EXP 9
22512: PUSH
22513: LD_INT 0
22515: ST_TO_ADDR
// epsilon := 0 ;
22516: LD_ADDR_EXP 10
22520: PUSH
22521: LD_INT 0
22523: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22524: LD_INT 0
22526: PPUSH
22527: LD_INT 1
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 324
// end ; if unit = Khatam then
22537: LD_VAR 0 1
22541: PUSH
22542: LD_EXP 36
22546: EQUAL
22547: IFFALSE 22559
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22549: LD_INT 0
22551: PPUSH
22552: LD_STRING 10_KhatamStatus_1
22554: PPUSH
22555: CALL_OW 39
// if unit in ruForces then
22559: LD_VAR 0 1
22563: PUSH
22564: LD_EXP 59
22568: IN
22569: IFFALSE 22587
// ruForces := ruForces diff unit ;
22571: LD_ADDR_EXP 59
22575: PUSH
22576: LD_EXP 59
22580: PUSH
22581: LD_VAR 0 1
22585: DIFF
22586: ST_TO_ADDR
// if unit in ruForces2 then
22587: LD_VAR 0 1
22591: PUSH
22592: LD_EXP 60
22596: IN
22597: IFFALSE 22615
// ruForces2 := ruForces2 diff unit ;
22599: LD_ADDR_EXP 60
22603: PUSH
22604: LD_EXP 60
22608: PUSH
22609: LD_VAR 0 1
22613: DIFF
22614: ST_TO_ADDR
// if unit in ruTanks then
22615: LD_VAR 0 1
22619: PUSH
22620: LD_EXP 79
22624: IN
22625: IFFALSE 22643
// ruTanks := ruTanks diff unit ;
22627: LD_ADDR_EXP 79
22631: PUSH
22632: LD_EXP 79
22636: PUSH
22637: LD_VAR 0 1
22641: DIFF
22642: ST_TO_ADDR
// if unit in ruTanks2 then
22643: LD_VAR 0 1
22647: PUSH
22648: LD_EXP 80
22652: IN
22653: IFFALSE 22671
// ruTanks2 := ruTanks2 diff unit ;
22655: LD_ADDR_EXP 80
22659: PUSH
22660: LD_EXP 80
22664: PUSH
22665: LD_VAR 0 1
22669: DIFF
22670: ST_TO_ADDR
// if unit in ruExtraTanks then
22671: LD_VAR 0 1
22675: PUSH
22676: LD_EXP 81
22680: IN
22681: IFFALSE 22699
// ruExtraTanks := ruExtraTanks diff unit ;
22683: LD_ADDR_EXP 81
22687: PUSH
22688: LD_EXP 81
22692: PUSH
22693: LD_VAR 0 1
22697: DIFF
22698: ST_TO_ADDR
// if unit in ruMech then
22699: LD_VAR 0 1
22703: PUSH
22704: LD_EXP 63
22708: IN
22709: IFFALSE 22727
// ruMech := ruMech diff unit ;
22711: LD_ADDR_EXP 63
22715: PUSH
22716: LD_EXP 63
22720: PUSH
22721: LD_VAR 0 1
22725: DIFF
22726: ST_TO_ADDR
// if unit in ruMech2 then
22727: LD_VAR 0 1
22731: PUSH
22732: LD_EXP 64
22736: IN
22737: IFFALSE 22755
// ruMech2 := ruMech2 diff unit ;
22739: LD_ADDR_EXP 64
22743: PUSH
22744: LD_EXP 64
22748: PUSH
22749: LD_VAR 0 1
22753: DIFF
22754: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22755: LD_VAR 0 1
22759: PPUSH
22760: CALL_OW 266
22764: PUSH
22765: LD_INT 32
22767: PUSH
22768: LD_INT 33
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: IN
22775: PUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 255
22785: PUSH
22786: LD_INT 3
22788: EQUAL
22789: AND
22790: IFFALSE 22946
// begin if IsInArea ( unit , ruBaseArea ) then
22792: LD_VAR 0 1
22796: PPUSH
22797: LD_EXP 66
22801: PPUSH
22802: CALL_OW 308
22806: IFFALSE 22869
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22808: LD_ADDR_EXP 76
22812: PUSH
22813: LD_EXP 76
22817: PPUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL_OW 266
22827: PUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 250
22837: PUSH
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 251
22847: PUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 254
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PPUSH
22864: CALL 92865 0 2
22868: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_EXP 67
22878: PPUSH
22879: CALL_OW 308
22883: IFFALSE 22946
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22885: LD_ADDR_EXP 77
22889: PUSH
22890: LD_EXP 77
22894: PPUSH
22895: LD_VAR 0 1
22899: PPUSH
22900: CALL_OW 266
22904: PUSH
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 250
22914: PUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 251
22924: PUSH
22925: LD_VAR 0 1
22929: PPUSH
22930: CALL_OW 254
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: PPUSH
22941: CALL 92865 0 2
22945: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
22946: LD_VAR 0 1
22950: PUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 6
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 34
22963: PUSH
22964: LD_INT 51
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PPUSH
22975: CALL_OW 69
22979: IN
22980: IFFALSE 22990
// ruTransportDestroyed := true ;
22982: LD_ADDR_EXP 78
22986: PUSH
22987: LD_INT 1
22989: ST_TO_ADDR
// end ;
22990: PPOPN 1
22992: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
22993: LD_VAR 0 1
22997: PPUSH
22998: CALL_OW 110
23002: PUSH
23003: LD_INT 7
23005: EQUAL
23006: IFFALSE 23020
// SetTag ( un , 0 ) ;
23008: LD_VAR 0 1
23012: PPUSH
23013: LD_INT 0
23015: PPUSH
23016: CALL_OW 109
// end ;
23020: PPOPN 3
23022: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 22
23030: PUSH
23031: LD_INT 3
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 25
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PPUSH
23052: CALL_OW 69
23056: IN
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 266
23067: PUSH
23068: LD_INT 3
23070: EQUAL
23071: AND
23072: PUSH
23073: LD_VAR 0 2
23077: PPUSH
23078: CALL_OW 256
23082: PUSH
23083: LD_INT 1000
23085: LESS
23086: AND
23087: IFFALSE 23113
// begin SetTag ( un , 0 ) ;
23089: LD_VAR 0 2
23093: PPUSH
23094: LD_INT 0
23096: PPUSH
23097: CALL_OW 109
// SetLives ( un , 1000 ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_INT 1000
23108: PPUSH
23109: CALL_OW 234
// end ; end ;
23113: PPOPN 2
23115: END
// on UnitGoesToRed ( un ) do var i ;
23116: LD_INT 0
23118: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23119: LD_VAR 0 1
23123: PUSH
23124: LD_EXP 36
23128: EQUAL
23129: PUSH
23130: LD_EXP 36
23134: PPUSH
23135: CALL_OW 255
23139: PUSH
23140: LD_INT 8
23142: EQUAL
23143: AND
23144: IFFALSE 23155
// KillUnit ( Khatam ) ;
23146: LD_EXP 36
23150: PPUSH
23151: CALL_OW 66
// end ;
23155: PPOPN 2
23157: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23158: LD_EXP 6
23162: NOT
23163: IFFALSE 23197
// begin seenRussianTeleport := true ;
23165: LD_ADDR_EXP 6
23169: PUSH
23170: LD_INT 1
23172: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 250
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 251
23192: PPUSH
23193: CALL 26535 0 2
// end ; end ;
23197: PPOPN 1
23199: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23200: LD_INT 0
23202: PPUSH
23203: PPUSH
23204: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23205: LD_VAR 0 2
23209: PUSH
23210: LD_INT 2
23212: EQUAL
23213: PUSH
23214: LD_VAR 0 1
23218: PPUSH
23219: CALL_OW 266
23223: PUSH
23224: LD_INT 7
23226: PUSH
23227: LD_INT 6
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 5
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: IN
23242: AND
23243: IFFALSE 23362
// begin for i := 1 to rand ( 2 , 4 ) do
23245: LD_ADDR_VAR 0 4
23249: PUSH
23250: DOUBLE
23251: LD_INT 1
23253: DEC
23254: ST_TO_ADDR
23255: LD_INT 2
23257: PPUSH
23258: LD_INT 4
23260: PPUSH
23261: CALL_OW 12
23265: PUSH
23266: FOR_TO
23267: IFFALSE 23360
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23269: LD_ADDR_VAR 0 5
23273: PUSH
23274: LD_VAR 0 1
23278: PPUSH
23279: CALL_OW 250
23283: PUSH
23284: LD_INT 2
23286: NEG
23287: PPUSH
23288: LD_INT 2
23290: PPUSH
23291: CALL_OW 12
23295: MINUS
23296: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23297: LD_ADDR_VAR 0 6
23301: PUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: CALL_OW 251
23311: PUSH
23312: LD_INT 2
23314: NEG
23315: PPUSH
23316: LD_INT 2
23318: PPUSH
23319: CALL_OW 12
23323: PLUS
23324: ST_TO_ADDR
// if ValidHex ( x , y ) then
23325: LD_VAR 0 5
23329: PPUSH
23330: LD_VAR 0 6
23334: PPUSH
23335: CALL_OW 488
23339: IFFALSE 23358
// MineExplosion ( x , y , 10 ) ;
23341: LD_VAR 0 5
23345: PPUSH
23346: LD_VAR 0 6
23350: PPUSH
23351: LD_INT 10
23353: PPUSH
23354: CALL_OW 453
// end ;
23358: GO 23266
23360: POP
23361: POP
// end ; end ;
23362: PPOPN 6
23364: END
// on VehicleConstructed ( veh , fac ) do var side ;
23365: LD_INT 0
23367: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23368: LD_VAR 0 1
23372: PPUSH
23373: LD_VAR 0 2
23377: PPUSH
23378: CALL 49907 0 2
// side := GetSide ( fac ) ;
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_VAR 0 2
23391: PPUSH
23392: CALL_OW 255
23396: ST_TO_ADDR
// if side = 3 then
23397: LD_VAR 0 3
23401: PUSH
23402: LD_INT 3
23404: EQUAL
23405: IFFALSE 23589
// begin if IsInArea ( fac , ruBaseArea ) then
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_EXP 66
23416: PPUSH
23417: CALL_OW 308
23421: IFFALSE 23498
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23423: LD_ADDR_EXP 70
23427: PUSH
23428: LD_EXP 70
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 3
23440: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 263
23450: PUSH
23451: LD_INT 1
23453: EQUAL
23454: IFFALSE 23478
// ruTanks := Join ( ruTanks , veh ) else
23456: LD_ADDR_EXP 79
23460: PUSH
23461: LD_EXP 79
23465: PPUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL 92865 0 2
23475: ST_TO_ADDR
23476: GO 23498
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23478: LD_ADDR_EXP 81
23482: PUSH
23483: LD_EXP 81
23487: PPUSH
23488: LD_VAR 0 1
23492: PPUSH
23493: CALL 92865 0 2
23497: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_EXP 67
23507: PPUSH
23508: CALL_OW 308
23512: IFFALSE 23589
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23514: LD_ADDR_EXP 71
23518: PUSH
23519: LD_EXP 71
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 3
23531: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23532: LD_VAR 0 1
23536: PPUSH
23537: CALL_OW 263
23541: PUSH
23542: LD_INT 1
23544: EQUAL
23545: IFFALSE 23569
// ruTanks2 := Join ( ruTanks2 , veh ) else
23547: LD_ADDR_EXP 80
23551: PUSH
23552: LD_EXP 80
23556: PPUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL 92865 0 2
23566: ST_TO_ADDR
23567: GO 23589
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23569: LD_ADDR_EXP 81
23573: PUSH
23574: LD_EXP 81
23578: PPUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: CALL 92865 0 2
23588: ST_TO_ADDR
// end ; end ; end ;
23589: PPOPN 3
23591: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
23596: PPUSH
// begin side := GetSide ( driver ) ;
23597: LD_ADDR_VAR 0 7
23601: PUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 255
23611: ST_TO_ADDR
// if side = 5 then
23612: LD_VAR 0 7
23616: PUSH
23617: LD_INT 5
23619: EQUAL
23620: IFFALSE 23700
// begin arAttackersVeh := arAttackersVeh diff driver ;
23622: LD_ADDR_EXP 58
23626: PUSH
23627: LD_EXP 58
23631: PUSH
23632: LD_VAR 0 1
23636: DIFF
23637: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_INT 189
23645: PPUSH
23646: LD_INT 80
23648: PPUSH
23649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23653: LD_INT 35
23655: PPUSH
23656: CALL_OW 67
// if not IsOk ( driver ) then
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 302
23669: NOT
23670: IFFALSE 23674
// exit ;
23672: GO 24224
// until IsAt ( driver , 189 , 80 ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: LD_INT 189
23681: PPUSH
23682: LD_INT 80
23684: PPUSH
23685: CALL_OW 307
23689: IFFALSE 23653
// RemoveUnit ( driver ) ;
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL_OW 64
// end ; if side = 6 then
23700: LD_VAR 0 7
23704: PUSH
23705: LD_INT 6
23707: EQUAL
23708: IFFALSE 23766
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23710: LD_VAR 0 1
23714: PPUSH
23715: LD_INT 19
23717: PPUSH
23718: CALL_OW 113
// wait ( 0 0$3 ) ;
23722: LD_INT 105
23724: PPUSH
23725: CALL_OW 67
// if not IsOk ( driver ) then
23729: LD_VAR 0 1
23733: PPUSH
23734: CALL_OW 302
23738: NOT
23739: IFFALSE 23743
// exit ;
23741: GO 24224
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_INT 19
23750: PPUSH
23751: CALL_OW 308
23755: IFFALSE 23710
// RemoveUnit ( driver ) ;
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 64
// end ; if side = 3 then
23766: LD_VAR 0 7
23770: PUSH
23771: LD_INT 3
23773: EQUAL
23774: IFFALSE 24224
// begin if driver in ruMech then
23776: LD_VAR 0 1
23780: PUSH
23781: LD_EXP 63
23785: IN
23786: IFFALSE 24000
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23788: LD_VAR 0 1
23792: PPUSH
23793: LD_EXP 66
23797: PPUSH
23798: CALL_OW 113
// SetTag ( driver , tMech ) ;
23802: LD_VAR 0 1
23806: PPUSH
23807: LD_INT 7
23809: PPUSH
23810: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
23814: LD_ADDR_VAR 0 6
23818: PUSH
23819: LD_EXP 66
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 30
23836: PUSH
23837: LD_INT 3
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 50
23846: PUSH
23847: EMPTY
23848: LIST
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PPUSH
23855: CALL_OW 70
23859: ST_TO_ADDR
// if fac then
23860: LD_VAR 0 6
23864: IFFALSE 23886
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
23866: LD_VAR 0 1
23870: PPUSH
23871: LD_VAR 0 6
23875: PUSH
23876: LD_INT 1
23878: ARRAY
23879: PPUSH
23880: CALL_OW 180
// exit ;
23884: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
23886: LD_ADDR_VAR 0 5
23890: PUSH
23891: LD_EXP 66
23895: PPUSH
23896: LD_INT 22
23898: PUSH
23899: LD_INT 3
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 30
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 30
23921: PUSH
23922: LD_INT 5
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: LD_INT 62
23939: PUSH
23940: EMPTY
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 50
23949: PUSH
23950: EMPTY
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PPUSH
23959: CALL_OW 70
23963: ST_TO_ADDR
// if arm then
23964: LD_VAR 0 5
23968: IFFALSE 24000
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
23970: LD_VAR 0 1
23974: PPUSH
23975: LD_VAR 0 5
23979: PUSH
23980: LD_INT 1
23982: ARRAY
23983: PPUSH
23984: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
23988: LD_VAR 0 1
23992: PPUSH
23993: LD_INT 1
23995: PPUSH
23996: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24000: LD_VAR 0 1
24004: PUSH
24005: LD_EXP 64
24009: IN
24010: IFFALSE 24224
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_EXP 67
24021: PPUSH
24022: CALL_OW 113
// SetTag ( driver , tMech ) ;
24026: LD_VAR 0 1
24030: PPUSH
24031: LD_INT 7
24033: PPUSH
24034: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24038: LD_ADDR_VAR 0 6
24042: PUSH
24043: LD_EXP 67
24047: PPUSH
24048: LD_INT 22
24050: PUSH
24051: LD_INT 3
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 30
24060: PUSH
24061: LD_INT 3
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 50
24070: PUSH
24071: EMPTY
24072: LIST
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: PPUSH
24079: CALL_OW 70
24083: ST_TO_ADDR
// if fac then
24084: LD_VAR 0 6
24088: IFFALSE 24110
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_VAR 0 6
24099: PUSH
24100: LD_INT 1
24102: ARRAY
24103: PPUSH
24104: CALL_OW 180
// exit ;
24108: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: LD_EXP 67
24119: PPUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 3
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 30
24135: PUSH
24136: LD_INT 4
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 30
24145: PUSH
24146: LD_INT 5
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 3
24160: PUSH
24161: LD_INT 62
24163: PUSH
24164: EMPTY
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 50
24173: PUSH
24174: EMPTY
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 70
24187: ST_TO_ADDR
// if arm then
24188: LD_VAR 0 5
24192: IFFALSE 24224
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_VAR 0 5
24203: PUSH
24204: LD_INT 1
24206: ARRAY
24207: PPUSH
24208: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24212: LD_VAR 0 1
24216: PPUSH
24217: LD_INT 1
24219: PPUSH
24220: CALL_OW 183
// end ; end ; end ; end ;
24224: PPOPN 7
24226: END
// on EndTheMissionRaised ( ev ) do begin if end_the_mission_allowed then
24227: LD_OWVAR 57
24231: IFFALSE 24245
// begin end_the_mission_allowed := false ;
24233: LD_ADDR_OWVAR 57
24237: PUSH
24238: LD_INT 0
24240: ST_TO_ADDR
// FinishMission ;
24241: CALL 31983 0 0
// end ; end ;
24245: PPOPN 1
24247: END
// on BuildingComplete ( b ) do var side , type ;
24248: LD_INT 0
24250: PPUSH
24251: PPUSH
// begin side := GetSide ( b ) ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_VAR 0 1
24261: PPUSH
24262: CALL_OW 255
24266: ST_TO_ADDR
// type := GetBType ( b ) ;
24267: LD_ADDR_VAR 0 3
24271: PUSH
24272: LD_VAR 0 1
24276: PPUSH
24277: CALL_OW 266
24281: ST_TO_ADDR
// if side = 2 then
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 2
24289: EQUAL
24290: IFFALSE 24310
// arBuildings := Delete ( arBuildings , 1 ) ;
24292: LD_ADDR_EXP 53
24296: PUSH
24297: LD_EXP 53
24301: PPUSH
24302: LD_INT 1
24304: PPUSH
24305: CALL_OW 3
24309: ST_TO_ADDR
// if side = 1 then
24310: LD_VAR 0 2
24314: PUSH
24315: LD_INT 1
24317: EQUAL
24318: IFFALSE 24380
// if type = b_depot and not hasBase then
24320: LD_VAR 0 3
24324: PUSH
24325: LD_INT 0
24327: EQUAL
24328: PUSH
24329: LD_EXP 9
24333: NOT
24334: AND
24335: IFFALSE 24380
// begin hasBase := true ;
24337: LD_ADDR_EXP 9
24341: PUSH
24342: LD_INT 1
24344: ST_TO_ADDR
// epsilon := b ;
24345: LD_ADDR_EXP 10
24349: PUSH
24350: LD_VAR 0 1
24354: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24355: LD_VAR 0 1
24359: PPUSH
24360: LD_STRING epsilon
24362: PPUSH
24363: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24367: LD_INT 0
24369: PPUSH
24370: LD_INT 1
24372: PPUSH
24373: LD_INT 0
24375: PPUSH
24376: CALL_OW 324
// end ; if side = 3 then
24380: LD_VAR 0 2
24384: PUSH
24385: LD_INT 3
24387: EQUAL
24388: IFFALSE 24674
// begin if IsInArea ( b , ruBaseArea ) then
24390: LD_VAR 0 1
24394: PPUSH
24395: LD_EXP 66
24399: PPUSH
24400: CALL_OW 308
24404: IFFALSE 24424
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24406: LD_ADDR_EXP 76
24410: PUSH
24411: LD_EXP 76
24415: PPUSH
24416: LD_INT 1
24418: PPUSH
24419: CALL_OW 3
24423: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_EXP 67
24433: PPUSH
24434: CALL_OW 308
24438: IFFALSE 24458
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24440: LD_ADDR_EXP 77
24444: PUSH
24445: LD_EXP 77
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 3
24457: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24458: LD_VAR 0 3
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: IN
24477: IFFALSE 24488
// ComUpgrade ( b ) ;
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 146
// if type = b_lab then
24488: LD_VAR 0 3
24492: PUSH
24493: LD_INT 6
24495: EQUAL
24496: IFFALSE 24540
// if IsInArea ( b , ruBaseArea ) then
24498: LD_VAR 0 1
24502: PPUSH
24503: LD_EXP 66
24507: PPUSH
24508: CALL_OW 308
24512: IFFALSE 24528
// ComUpgradeLab ( b , b_lab_weapon ) else
24514: LD_VAR 0 1
24518: PPUSH
24519: LD_INT 10
24521: PPUSH
24522: CALL_OW 147
24526: GO 24540
// ComUpgradeLab ( b , b_lab_computer ) ;
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_INT 12
24535: PPUSH
24536: CALL_OW 147
// if type = b_depot then
24540: LD_VAR 0 3
24544: PUSH
24545: LD_INT 0
24547: EQUAL
24548: IFFALSE 24674
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24550: LD_VAR 0 1
24554: PPUSH
24555: CALL_OW 274
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: LD_INT 2550
24565: PPUSH
24566: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: CALL_OW 274
24579: PPUSH
24580: LD_INT 2
24582: PPUSH
24583: LD_INT 250
24585: PPUSH
24586: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 274
24599: PPUSH
24600: LD_INT 3
24602: PPUSH
24603: LD_INT 200
24605: PPUSH
24606: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24610: LD_VAR 0 1
24614: PPUSH
24615: LD_EXP 66
24619: PPUSH
24620: CALL_OW 308
24624: IFFALSE 24648
// begin ruBase := b ;
24626: LD_ADDR_EXP 68
24630: PUSH
24631: LD_VAR 0 1
24635: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24636: LD_VAR 0 1
24640: PPUSH
24641: LD_STRING chuikov
24643: PPUSH
24644: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_EXP 67
24657: PPUSH
24658: CALL_OW 308
24662: IFFALSE 24674
// begin ruBase2 := b ;
24664: LD_ADDR_EXP 69
24668: PUSH
24669: LD_VAR 0 1
24673: ST_TO_ADDR
// end ; end ; end ; end ;
24674: PPOPN 3
24676: END
// on UpgradeComplete ( b ) do var side , type ;
24677: LD_INT 0
24679: PPUSH
24680: PPUSH
// begin side := GetSide ( b ) ;
24681: LD_ADDR_VAR 0 2
24685: PUSH
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 255
24695: ST_TO_ADDR
// type := GetBType ( b ) ;
24696: LD_ADDR_VAR 0 3
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 266
24710: ST_TO_ADDR
// if side = 3 then
24711: LD_VAR 0 2
24715: PUSH
24716: LD_INT 3
24718: EQUAL
24719: IFFALSE 24773
// if type = b_lab_half then
24721: LD_VAR 0 3
24725: PUSH
24726: LD_INT 7
24728: EQUAL
24729: IFFALSE 24773
// if IsInArea ( b , ruBaseArea ) then
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_EXP 66
24740: PPUSH
24741: CALL_OW 308
24745: IFFALSE 24761
// ComUpgradeLab ( b , b_lab_spacetime ) else
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_INT 14
24754: PPUSH
24755: CALL_OW 147
24759: GO 24773
// ComUpgradeLab ( b , b_lab_siberium ) ;
24761: LD_VAR 0 1
24765: PPUSH
24766: LD_INT 11
24768: PPUSH
24769: CALL_OW 147
// end ;
24773: PPOPN 3
24775: END
// on ResearchComplete ( tech , lab ) do var side ;
24776: LD_INT 0
24778: PPUSH
// begin side := GetSide ( lab ) ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: CALL_OW 255
24793: ST_TO_ADDR
// if side = 2 then
24794: LD_VAR 0 3
24798: PUSH
24799: LD_INT 2
24801: EQUAL
24802: IFFALSE 24850
// begin arTech := Delete ( arTech , 1 ) ;
24804: LD_ADDR_EXP 52
24808: PUSH
24809: LD_EXP 52
24813: PPUSH
24814: LD_INT 1
24816: PPUSH
24817: CALL_OW 3
24821: ST_TO_ADDR
// if tech = tech_sibPow then
24822: LD_VAR 0 1
24826: PUSH
24827: LD_INT 21
24829: EQUAL
24830: IFFALSE 24836
// DArabTrait1 ;
24832: CALL 28897 0 0
// if tech = tech_sibEng then
24836: LD_VAR 0 1
24840: PUSH
24841: LD_INT 22
24843: EQUAL
24844: IFFALSE 24850
// DArabTrait2 ;
24846: CALL 29228 0 0
// end ; end ;
24850: PPOPN 3
24852: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL 49891 0 1
// end ;
24862: PPOPN 1
24864: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24865: LD_VAR 0 1
24869: PUSH
24870: LD_INT 1
24872: EQUAL
24873: PUSH
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 2
24881: EQUAL
24882: AND
24883: PUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 2
24889: PPUSH
24890: CALL_OW 81
24894: PUSH
24895: LD_INT 1
24897: EQUAL
24898: AND
24899: IFFALSE 24905
// DAttackOnAlly ;
24901: CALL 26613 0 0
// end ;
24905: PPOPN 2
24907: END
// on SailEvent ( event ) do begin case event of EArabAttack :
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 101
24915: DOUBLE
24916: EQUAL
24917: IFTRUE 24921
24919: GO 24928
24921: POP
// ArabAttack ; ERussianBaseC :
24922: CALL 7224 0 0
24926: GO 25080
24928: LD_INT 102
24930: DOUBLE
24931: EQUAL
24932: IFTRUE 24936
24934: GO 24957
24936: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
24937: LD_EXP 59
24941: PUSH
24942: LD_EXP 61
24946: UNION
24947: PPUSH
24948: LD_INT 1
24950: PPUSH
24951: CALL 10861 0 2
24955: GO 25080
24957: LD_INT 103
24959: DOUBLE
24960: EQUAL
24961: IFTRUE 24965
24963: GO 24986
24965: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
24966: LD_EXP 59
24970: PUSH
24971: LD_EXP 61
24975: UNION
24976: PPUSH
24977: LD_INT 2
24979: PPUSH
24980: CALL 10861 0 2
24984: GO 25080
24986: LD_INT 104
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25015
24994: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
24995: LD_EXP 59
24999: PUSH
25000: LD_EXP 61
25004: UNION
25005: PPUSH
25006: LD_INT 3
25008: PPUSH
25009: CALL 10861 0 2
25013: GO 25080
25015: LD_INT 105
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25044
25023: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25024: LD_EXP 60
25028: PUSH
25029: LD_EXP 62
25033: UNION
25034: PPUSH
25035: LD_INT 2
25037: PPUSH
25038: CALL 12370 0 2
25042: GO 25080
25044: LD_INT 106
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25059
25052: POP
// RussianExtraAttack ; ESendRussianAttack :
25053: CALL 20205 0 0
25057: GO 25080
25059: LD_INT 107
25061: DOUBLE
25062: EQUAL
25063: IFTRUE 25067
25065: GO 25079
25067: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25068: LD_EXP 18
25072: PPUSH
25073: CALL 21299 0 1
25077: GO 25080
25079: POP
// end ; end_of_file
25080: PPOPN 1
25082: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25083: LD_INT 0
25085: PPUSH
25086: PPUSH
25087: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25088: LD_ADDR_VAR 0 1
25092: PUSH
25093: LD_VAR 0 1
25097: PUSH
25098: LD_EXP 23
25102: PUSH
25103: LD_EXP 24
25107: PUSH
25108: LD_EXP 25
25112: PUSH
25113: LD_EXP 26
25117: PUSH
25118: LD_EXP 27
25122: PUSH
25123: LD_EXP 28
25127: PUSH
25128: LD_EXP 29
25132: PUSH
25133: LD_EXP 30
25137: PUSH
25138: LD_EXP 31
25142: PUSH
25143: LD_EXP 32
25147: PUSH
25148: LD_EXP 33
25152: PUSH
25153: LD_EXP 34
25157: PUSH
25158: LD_EXP 35
25162: PUSH
25163: LD_EXP 36
25167: PUSH
25168: LD_EXP 37
25172: PUSH
25173: LD_EXP 38
25177: PUSH
25178: LD_EXP 39
25182: PUSH
25183: LD_EXP 40
25187: PUSH
25188: LD_EXP 42
25192: PUSH
25193: LD_EXP 44
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: DIFF
25220: ST_TO_ADDR
// if not characters then
25221: LD_VAR 0 1
25225: NOT
25226: IFFALSE 25230
// exit ;
25228: GO 25314
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25230: LD_ADDR_VAR 0 6
25234: PUSH
25235: LD_VAR 0 1
25239: PUSH
25240: LD_INT 1
25242: PPUSH
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL 57256 0 1
25252: PPUSH
25253: CALL_OW 12
25257: ARRAY
25258: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25259: LD_VAR 0 6
25263: PPUSH
25264: CALL_OW 258
25268: PUSH
25269: LD_INT 1
25271: EQUAL
25272: IFFALSE 25290
// Say ( speaker , dialogMID ) else
25274: LD_VAR 0 6
25278: PPUSH
25279: LD_VAR 0 2
25283: PPUSH
25284: CALL_OW 88
25288: GO 25304
// Say ( speaker , dialogFID ) ;
25290: LD_VAR 0 6
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: CALL_OW 88
// result := speaker ;
25304: LD_ADDR_VAR 0 4
25308: PUSH
25309: LD_VAR 0 6
25313: ST_TO_ADDR
// end ; end_of_file
25314: LD_VAR 0 4
25318: RET
// export function Action ; begin
25319: LD_INT 0
25321: PPUSH
// InGameOn ;
25322: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25326: LD_INT 25
25328: PPUSH
25329: LD_INT 35
25331: PPUSH
25332: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25336: LD_INT 1
25338: PPUSH
25339: LD_INT 5
25341: PPUSH
25342: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25346: LD_INT 1
25348: PPUSH
25349: LD_INT 4
25351: PPUSH
25352: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25356: LD_INT 52
25358: PPUSH
25359: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25363: LD_EXP 33
25367: PPUSH
25368: CALL_OW 87
// wait ( 0 0$3 ) ;
25372: LD_INT 105
25374: PPUSH
25375: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25379: LD_EXP 23
25383: PPUSH
25384: CALL_OW 310
25388: PPUSH
25389: CALL_OW 85
// wait ( 0 0$1 ) ;
25393: LD_INT 35
25395: PPUSH
25396: CALL_OW 67
// if IsOk ( Gary ) then
25400: LD_EXP 32
25404: PPUSH
25405: CALL_OW 302
25409: IFFALSE 25447
// begin Say ( Gary , D2-Gary-1 ) ;
25411: LD_EXP 32
25415: PPUSH
25416: LD_STRING D2-Gary-1
25418: PPUSH
25419: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25423: LD_EXP 23
25427: PPUSH
25428: LD_STRING D2-JMM-1
25430: PPUSH
25431: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25435: LD_EXP 32
25439: PPUSH
25440: LD_STRING D2-Gary-2
25442: PPUSH
25443: CALL_OW 88
// end ; InGameOff ;
25447: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25451: LD_STRING M1
25453: PPUSH
25454: CALL_OW 337
// SaveForQuickRestart ;
25458: CALL_OW 22
// end ;
25462: LD_VAR 0 1
25466: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25467: LD_EXP 23
25471: PPUSH
25472: LD_EXP 33
25476: PPUSH
25477: CALL_OW 296
25481: PUSH
25482: LD_INT 15
25484: LESS
25485: IFFALSE 26445
25487: GO 25489
25489: DISABLE
25490: LD_INT 0
25492: PPUSH
25493: PPUSH
// begin wait ( 0 0$3 ) ;
25494: LD_INT 105
25496: PPUSH
25497: CALL_OW 67
// Video ( true ) ;
25501: LD_INT 1
25503: PPUSH
25504: CALL 92837 0 1
// ComExitVehicle ( JMM ) ;
25508: LD_EXP 23
25512: PPUSH
25513: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25517: LD_EXP 23
25521: PPUSH
25522: LD_EXP 33
25526: PPUSH
25527: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25531: LD_EXP 23
25535: PPUSH
25536: CALL_OW 87
// if Truman then
25540: LD_EXP 43
25544: IFFALSE 25681
// begin ComMoveUnit ( Truman , JMM ) ;
25546: LD_EXP 43
25550: PPUSH
25551: LD_EXP 23
25555: PPUSH
25556: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25560: LD_INT 35
25562: PPUSH
25563: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25567: LD_EXP 43
25571: PPUSH
25572: LD_EXP 23
25576: PPUSH
25577: CALL_OW 296
25581: PUSH
25582: LD_INT 6
25584: LESS
25585: IFFALSE 25560
// ComTurnUnit ( Truman , JMM ) ;
25587: LD_EXP 43
25591: PPUSH
25592: LD_EXP 23
25596: PPUSH
25597: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25601: LD_EXP 23
25605: PPUSH
25606: LD_EXP 43
25610: PPUSH
25611: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25615: LD_EXP 43
25619: PPUSH
25620: LD_STRING D2-Tru-1
25622: PPUSH
25623: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25627: LD_EXP 23
25631: PPUSH
25632: LD_STRING D2-JMM-Tru-1
25634: PPUSH
25635: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25639: LD_EXP 43
25643: PPUSH
25644: LD_STRING D2-Tru-2
25646: PPUSH
25647: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25651: LD_EXP 43
25655: PPUSH
25656: LD_INT 79
25658: PPUSH
25659: LD_INT 41
25661: PPUSH
25662: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25666: LD_EXP 43
25670: PPUSH
25671: LD_INT 17
25673: PPUSH
25674: LD_INT 31
25676: PPUSH
25677: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25681: LD_EXP 23
25685: PPUSH
25686: LD_EXP 33
25690: PPUSH
25691: CALL_OW 179
// p := 15 ;
25695: LD_ADDR_VAR 0 2
25699: PUSH
25700: LD_INT 15
25702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25703: LD_INT 35
25705: PPUSH
25706: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25710: LD_EXP 33
25714: PUSH
25715: LD_EXP 35
25719: PUSH
25720: LD_EXP 34
25724: PUSH
25725: LD_EXP 36
25729: PUSH
25730: LD_EXP 30
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: PPUSH
25742: LD_EXP 23
25746: PPUSH
25747: CALL_OW 112
// p := p - 1 ;
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_VAR 0 2
25760: PUSH
25761: LD_INT 1
25763: MINUS
25764: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25765: LD_EXP 23
25769: PPUSH
25770: LD_EXP 33
25774: PPUSH
25775: CALL_OW 296
25779: PUSH
25780: LD_INT 5
25782: LESS
25783: PUSH
25784: LD_VAR 0 2
25788: PUSH
25789: LD_INT 0
25791: LESSEQUAL
25792: OR
25793: IFFALSE 25703
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25795: LD_EXP 33
25799: PUSH
25800: LD_EXP 35
25804: PUSH
25805: LD_EXP 34
25809: PUSH
25810: LD_EXP 36
25814: PUSH
25815: LD_EXP 30
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: PPUSH
25827: LD_EXP 23
25831: PPUSH
25832: CALL_OW 119
// if not IsInUnit ( JMM ) then
25836: LD_EXP 23
25840: PPUSH
25841: CALL_OW 310
25845: NOT
25846: IFFALSE 25862
// ComTurnUnit ( JMM , Simms ) ;
25848: LD_EXP 23
25852: PPUSH
25853: LD_EXP 33
25857: PPUSH
25858: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
25862: LD_EXP 33
25866: PUSH
25867: LD_EXP 35
25871: PUSH
25872: LD_EXP 34
25876: PUSH
25877: LD_EXP 36
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: PPUSH
25888: LD_EXP 23
25892: PPUSH
25893: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
25897: LD_EXP 23
25901: PUSH
25902: LD_EXP 33
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PPUSH
25911: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
25915: LD_EXP 33
25919: PPUSH
25920: LD_STRING D2a-Sim-1
25922: PPUSH
25923: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
25927: LD_EXP 23
25931: PPUSH
25932: LD_STRING D2a-JMM-1
25934: PPUSH
25935: CALL_OW 88
// if IsOk ( Joan ) then
25939: LD_EXP 35
25943: PPUSH
25944: CALL_OW 302
25948: IFFALSE 26026
// begin if not IsInUnit ( JMM ) then
25950: LD_EXP 23
25954: PPUSH
25955: CALL_OW 310
25959: NOT
25960: IFFALSE 25976
// ComTurnUnit ( JMM , Joan ) ;
25962: LD_EXP 23
25966: PPUSH
25967: LD_EXP 35
25971: PPUSH
25972: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
25976: LD_EXP 35
25980: PPUSH
25981: LD_EXP 23
25985: PPUSH
25986: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
25990: LD_EXP 35
25994: PPUSH
25995: LD_STRING D2b-Joan-1
25997: PPUSH
25998: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26002: LD_EXP 23
26006: PPUSH
26007: LD_STRING D2b-JMM-1
26009: PPUSH
26010: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26014: LD_EXP 35
26018: PPUSH
26019: LD_STRING D2b-Joan-2
26021: PPUSH
26022: CALL_OW 88
// end ; if IsOk ( Denis ) then
26026: LD_EXP 34
26030: PPUSH
26031: CALL_OW 302
26035: IFFALSE 26089
// begin if not IsInUnit ( JMM ) then
26037: LD_EXP 23
26041: PPUSH
26042: CALL_OW 310
26046: NOT
26047: IFFALSE 26063
// ComTurnUnit ( JMM , Denis ) ;
26049: LD_EXP 23
26053: PPUSH
26054: LD_EXP 34
26058: PPUSH
26059: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26063: LD_EXP 34
26067: PPUSH
26068: LD_EXP 23
26072: PPUSH
26073: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26077: LD_EXP 34
26081: PPUSH
26082: LD_STRING D2c-Den-1
26084: PPUSH
26085: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26089: LD_EXP 30
26093: PPUSH
26094: CALL_OW 302
26098: PUSH
26099: LD_STRING 08_Kikuchi
26101: PPUSH
26102: CALL_OW 28
26106: NOT
26107: AND
26108: IFFALSE 26203
// begin repeat wait ( 0 0$1 ) ;
26110: LD_INT 35
26112: PPUSH
26113: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26117: LD_EXP 30
26121: PPUSH
26122: LD_EXP 23
26126: PPUSH
26127: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26131: LD_EXP 23
26135: PPUSH
26136: LD_EXP 30
26140: PPUSH
26141: CALL_OW 296
26145: PUSH
26146: LD_INT 5
26148: LESS
26149: IFFALSE 26110
// ComTurnUnit ( Kikuchi , JMM ) ;
26151: LD_EXP 30
26155: PPUSH
26156: LD_EXP 23
26160: PPUSH
26161: CALL_OW 119
// if not IsInUnit ( JMM ) then
26165: LD_EXP 23
26169: PPUSH
26170: CALL_OW 310
26174: NOT
26175: IFFALSE 26191
// ComTurnUnit ( JMM , Kikuchi ) ;
26177: LD_EXP 23
26181: PPUSH
26182: LD_EXP 30
26186: PPUSH
26187: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26191: LD_EXP 30
26195: PPUSH
26196: LD_STRING D3b-Yam-1
26198: PPUSH
26199: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26203: LD_EXP 36
26207: PPUSH
26208: CALL_OW 302
26212: IFFALSE 26278
// begin if not IsInUnit ( JMM ) then
26214: LD_EXP 23
26218: PPUSH
26219: CALL_OW 310
26223: NOT
26224: IFFALSE 26240
// ComTurnUnit ( JMM , Khatam ) ;
26226: LD_EXP 23
26230: PPUSH
26231: LD_EXP 36
26235: PPUSH
26236: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26240: LD_EXP 36
26244: PPUSH
26245: LD_EXP 23
26249: PPUSH
26250: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26254: LD_EXP 23
26258: PPUSH
26259: LD_STRING D2c-JMM-1
26261: PPUSH
26262: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26266: LD_EXP 36
26270: PPUSH
26271: LD_STRING D2c-Khat-1
26273: PPUSH
26274: CALL_OW 88
// end ; Video ( false ) ;
26278: LD_INT 0
26280: PPUSH
26281: CALL 92837 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26285: LD_INT 22
26287: PUSH
26288: LD_INT 4
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 69
26299: PUSH
26300: LD_EXP 43
26304: DIFF
26305: PPUSH
26306: LD_INT 1
26308: PPUSH
26309: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26313: LD_STRING M1a
26315: PPUSH
26316: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26320: LD_INT 0
26322: PPUSH
26323: LD_INT 1
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 324
// joinedToEpsilon := true ;
26333: LD_ADDR_EXP 7
26337: PUSH
26338: LD_INT 1
26340: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26341: LD_INT 1050
26343: PPUSH
26344: CALL_OW 67
// SpawnConvoy ;
26348: CALL 10397 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26352: LD_INT 25200
26354: PUSH
26355: LD_INT 2100
26357: PUSH
26358: LD_OWVAR 67
26362: MUL
26363: MINUS
26364: PPUSH
26365: CALL_OW 67
// firstAttack := true ;
26369: LD_ADDR_EXP 16
26373: PUSH
26374: LD_INT 1
26376: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26377: LD_INT 107
26379: PPUSH
26380: CALL_OW 427
// for i := 1 to Difficulty do
26384: LD_ADDR_VAR 0 1
26388: PUSH
26389: DOUBLE
26390: LD_INT 1
26392: DEC
26393: ST_TO_ADDR
26394: LD_OWVAR 67
26398: PUSH
26399: FOR_TO
26400: IFFALSE 26443
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26402: LD_INT 25200
26404: PUSH
26405: LD_INT 2100
26407: PUSH
26408: LD_OWVAR 67
26412: MUL
26413: MINUS
26414: PPUSH
26415: CALL_OW 67
// if not ruActiveAttacks then
26419: LD_EXP 22
26423: NOT
26424: IFFALSE 26434
// ruActiveAttacks := true ;
26426: LD_ADDR_EXP 22
26430: PUSH
26431: LD_INT 1
26433: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26434: LD_INT 107
26436: PPUSH
26437: CALL_OW 427
// end ;
26441: GO 26399
26443: POP
26444: POP
// end ;
26445: PPOPN 2
26447: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26448: LD_EXP 43
26452: PPUSH
26453: CALL_OW 302
26457: PUSH
26458: LD_EXP 7
26462: AND
26463: IFFALSE 26534
26465: GO 26467
26467: DISABLE
// begin enable ;
26468: ENABLE
// if not HasTask ( Truman ) then
26469: LD_EXP 43
26473: PPUSH
26474: CALL_OW 314
26478: NOT
26479: IFFALSE 26493
// ComMoveToArea ( Truman , removeArea ) ;
26481: LD_EXP 43
26485: PPUSH
26486: LD_INT 10
26488: PPUSH
26489: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26493: LD_EXP 43
26497: PPUSH
26498: LD_INT 17
26500: PPUSH
26501: LD_INT 32
26503: PPUSH
26504: CALL_OW 307
26508: PUSH
26509: LD_EXP 43
26513: PPUSH
26514: LD_INT 10
26516: PPUSH
26517: CALL_OW 308
26521: OR
26522: IFFALSE 26534
// begin RemoveUnit ( Truman ) ;
26524: LD_EXP 43
26528: PPUSH
26529: CALL_OW 64
// disable ;
26533: DISABLE
// end ; end ;
26534: END
// export function DTankTeleport ( x , y ) ; begin
26535: LD_INT 0
26537: PPUSH
// DialogueOn ;
26538: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26542: LD_VAR 0 1
26546: PPUSH
26547: LD_VAR 0 2
26551: PPUSH
26552: CALL_OW 86
// if IsOk ( Cyrus ) then
26556: LD_EXP 27
26560: PPUSH
26561: CALL_OW 302
26565: IFFALSE 26581
// Say ( Cyrus , D10-Cyrus-1 ) else
26567: LD_EXP 27
26571: PPUSH
26572: LD_STRING D10-Cyrus-1
26574: PPUSH
26575: CALL_OW 88
26579: GO 26604
// if IsOk ( JMM ) then
26581: LD_EXP 23
26585: PPUSH
26586: CALL_OW 302
26590: IFFALSE 26604
// Say ( JMM , D10-JMM-1 ) ;
26592: LD_EXP 23
26596: PPUSH
26597: LD_STRING D10-JMM-1
26599: PPUSH
26600: CALL_OW 88
// DialogueOff ;
26604: CALL_OW 7
// end ;
26608: LD_VAR 0 3
26612: RET
// export function DAttackOnAlly ; begin
26613: LD_INT 0
26615: PPUSH
// DialogueOn ;
26616: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26620: LD_INT 10
26622: PPUSH
26623: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26627: LD_EXP 44
26631: PPUSH
26632: LD_STRING D6b-Pow-1
26634: PPUSH
26635: CALL_OW 94
// YouLost ( Powell ) ;
26639: LD_STRING Powell
26641: PPUSH
26642: CALL_OW 104
// DialogueOff ;
26646: CALL_OW 7
// end ;
26650: LD_VAR 0 1
26654: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26655: LD_INT 5
26657: PPUSH
26658: LD_INT 22
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 21
26670: PUSH
26671: LD_INT 3
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 70
26686: PUSH
26687: LD_INT 5
26689: PPUSH
26690: LD_INT 22
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 21
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PPUSH
26714: CALL_OW 70
26718: OR
26719: PUSH
26720: LD_INT 1
26722: PPUSH
26723: LD_INT 2
26725: PPUSH
26726: CALL_OW 81
26730: PUSH
26731: LD_INT 1
26733: EQUAL
26734: AND
26735: IFFALSE 26970
26737: GO 26739
26739: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26740: LD_INT 5
26742: PPUSH
26743: LD_INT 22
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 21
26755: PUSH
26756: LD_INT 3
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PPUSH
26767: CALL_OW 70
26771: PUSH
26772: LD_INT 5
26774: PPUSH
26775: LD_INT 22
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 21
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PPUSH
26799: CALL_OW 70
26803: OR
26804: PUSH
26805: LD_INT 1
26807: PPUSH
26808: LD_INT 2
26810: PPUSH
26811: CALL_OW 81
26815: PUSH
26816: LD_INT 1
26818: EQUAL
26819: AND
26820: IFFALSE 26829
// Query ( QAttack ) ;
26822: LD_STRING QAttack
26824: PPUSH
26825: CALL_OW 97
// wait ( 0 0$20 ) ;
26829: LD_INT 700
26831: PPUSH
26832: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26836: LD_INT 350
26838: PPUSH
26839: CALL_OW 67
// if arabianAttack then
26843: LD_EXP 4
26847: IFFALSE 26851
// exit ;
26849: GO 26970
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26851: LD_INT 5
26853: PPUSH
26854: LD_INT 22
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 21
26866: PUSH
26867: LD_INT 3
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 70
26882: PUSH
26883: LD_INT 5
26885: PPUSH
26886: LD_INT 22
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 21
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PPUSH
26910: CALL_OW 70
26914: OR
26915: PUSH
26916: LD_INT 1
26918: PPUSH
26919: LD_INT 2
26921: PPUSH
26922: CALL_OW 81
26926: PUSH
26927: LD_INT 1
26929: EQUAL
26930: AND
26931: IFFALSE 26836
// InGameOn ;
26933: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26937: LD_INT 73
26939: PPUSH
26940: LD_INT 18
26942: PPUSH
26943: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26947: LD_EXP 44
26951: PPUSH
26952: LD_STRING D6b-Pow-1
26954: PPUSH
26955: CALL_OW 94
// YouLost ( Powell ) ;
26959: LD_STRING Powell
26961: PPUSH
26962: CALL_OW 104
// InGameOff ;
26966: CALL_OW 9
// end ;
26970: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
26971: LD_INT 12
26973: PPUSH
26974: LD_INT 1
26976: PPUSH
26977: CALL_OW 321
26981: PUSH
26982: LD_INT 2
26984: EQUAL
26985: IFFALSE 26997
26987: GO 26989
26989: DISABLE
// ChangeMissionObjectives ( M2b ) ;
26990: LD_STRING M2b
26992: PPUSH
26993: CALL_OW 337
26997: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
26998: LD_INT 32
27000: PPUSH
27001: LD_INT 1
27003: PPUSH
27004: CALL_OW 321
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: IFFALSE 27024
27014: GO 27016
27016: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27017: LD_STRING M2c
27019: PPUSH
27020: CALL_OW 337
27024: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27025: LD_EXP 4
27029: PUSH
27030: LD_EXP 12
27034: AND
27035: PUSH
27036: LD_INT 22
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 21
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PPUSH
27060: CALL_OW 69
27064: PUSH
27065: LD_INT 0
27067: EQUAL
27068: AND
27069: PUSH
27070: LD_EXP 58
27074: PPUSH
27075: LD_INT 50
27077: PUSH
27078: EMPTY
27079: LIST
27080: PPUSH
27081: CALL_OW 72
27085: PUSH
27086: LD_INT 0
27088: EQUAL
27089: AND
27090: PUSH
27091: LD_EXP 57
27095: PPUSH
27096: LD_INT 50
27098: PUSH
27099: EMPTY
27100: LIST
27101: PPUSH
27102: CALL_OW 72
27106: PUSH
27107: LD_INT 0
27109: EQUAL
27110: AND
27111: IFFALSE 27131
27113: GO 27115
27115: DISABLE
// begin arabianDefeated := true ;
27116: LD_ADDR_EXP 8
27120: PUSH
27121: LD_INT 1
27123: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27124: LD_STRING M4a
27126: PPUSH
27127: CALL_OW 337
// end ;
27131: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27132: LD_INT 54
27134: PPUSH
27135: LD_INT 1
27137: PPUSH
27138: CALL_OW 321
27142: PUSH
27143: LD_INT 2
27145: EQUAL
27146: PUSH
27147: LD_INT 55
27149: PPUSH
27150: LD_INT 1
27152: PPUSH
27153: CALL_OW 321
27157: PUSH
27158: LD_INT 2
27160: EQUAL
27161: AND
27162: PUSH
27163: LD_INT 21
27165: PPUSH
27166: LD_INT 1
27168: PPUSH
27169: CALL_OW 321
27173: PUSH
27174: LD_INT 2
27176: EQUAL
27177: AND
27178: PUSH
27179: LD_INT 22
27181: PPUSH
27182: LD_INT 1
27184: PPUSH
27185: CALL_OW 321
27189: PUSH
27190: LD_INT 2
27192: EQUAL
27193: AND
27194: IFFALSE 27206
27196: GO 27198
27198: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27199: LD_STRING M2a
27201: PPUSH
27202: CALL_OW 337
27206: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27207: LD_INT 22
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: LD_INT 57
27222: PUSH
27223: EMPTY
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 63
27232: PUSH
27233: LD_INT 11
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: PPUSH
27245: CALL_OW 69
27249: IFFALSE 28475
27251: GO 27253
27253: DISABLE
27254: LD_INT 0
27256: PPUSH
27257: PPUSH
27258: PPUSH
27259: PPUSH
27260: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_EXP 32
27270: PPUSH
27271: CALL_OW 302
27275: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_EXP 39
27285: PPUSH
27286: CALL_OW 302
27290: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27291: LD_ADDR_VAR 0 3
27295: PUSH
27296: LD_INT 22
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 50
27308: PUSH
27309: EMPTY
27310: LIST
27311: PUSH
27312: LD_INT 25
27314: PUSH
27315: LD_INT 4
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 26
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: PUSH
27343: LD_EXP 23
27347: PUSH
27348: LD_EXP 24
27352: PUSH
27353: LD_EXP 25
27357: PUSH
27358: LD_EXP 26
27362: PUSH
27363: LD_EXP 27
27367: PUSH
27368: LD_EXP 28
27372: PUSH
27373: LD_EXP 29
27377: PUSH
27378: LD_EXP 30
27382: PUSH
27383: LD_EXP 31
27387: PUSH
27388: LD_EXP 32
27392: PUSH
27393: LD_EXP 33
27397: PUSH
27398: LD_EXP 34
27402: PUSH
27403: LD_EXP 35
27407: PUSH
27408: LD_EXP 36
27412: PUSH
27413: LD_EXP 37
27417: PUSH
27418: LD_EXP 38
27422: PUSH
27423: LD_EXP 39
27427: PUSH
27428: LD_EXP 40
27432: PUSH
27433: LD_EXP 42
27437: PUSH
27438: LD_EXP 44
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: DIFF
27465: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27466: LD_ADDR_VAR 0 4
27470: PUSH
27471: LD_INT 22
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 50
27483: PUSH
27484: EMPTY
27485: LIST
27486: PUSH
27487: LD_INT 26
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 25
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 25
27512: PUSH
27513: LD_INT 2
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 25
27522: PUSH
27523: LD_INT 3
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 69
27546: PUSH
27547: LD_EXP 23
27551: PUSH
27552: LD_EXP 24
27556: PUSH
27557: LD_EXP 25
27561: PUSH
27562: LD_EXP 26
27566: PUSH
27567: LD_EXP 27
27571: PUSH
27572: LD_EXP 28
27576: PUSH
27577: LD_EXP 29
27581: PUSH
27582: LD_EXP 30
27586: PUSH
27587: LD_EXP 31
27591: PUSH
27592: LD_EXP 32
27596: PUSH
27597: LD_EXP 33
27601: PUSH
27602: LD_EXP 34
27606: PUSH
27607: LD_EXP 35
27611: PUSH
27612: LD_EXP 36
27616: PUSH
27617: LD_EXP 37
27621: PUSH
27622: LD_EXP 38
27626: PUSH
27627: LD_EXP 39
27631: PUSH
27632: LD_EXP 40
27636: PUSH
27637: LD_EXP 42
27641: PUSH
27642: LD_EXP 44
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: DIFF
27669: ST_TO_ADDR
// if tmp1 then
27670: LD_VAR 0 3
27674: IFFALSE 27690
// tmp1 := tmp1 [ 1 ] ;
27676: LD_ADDR_VAR 0 3
27680: PUSH
27681: LD_VAR 0 3
27685: PUSH
27686: LD_INT 1
27688: ARRAY
27689: ST_TO_ADDR
// if tmp2 then
27690: LD_VAR 0 4
27694: IFFALSE 27710
// tmp2 := tmp2 [ 1 ] ;
27696: LD_ADDR_VAR 0 4
27700: PUSH
27701: LD_VAR 0 4
27705: PUSH
27706: LD_INT 1
27708: ARRAY
27709: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27710: LD_VAR 0 1
27714: PUSH
27715: LD_VAR 0 4
27719: OR
27720: PUSH
27721: LD_VAR 0 2
27725: PUSH
27726: LD_VAR 0 3
27730: OR
27731: AND
27732: IFFALSE 27926
// begin DialogueOn ;
27734: CALL_OW 6
// if deltaSpeaker then
27738: LD_VAR 0 2
27742: IFFALSE 27758
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27744: LD_EXP 39
27748: PPUSH
27749: LD_STRING D3-Sci1-1
27751: PPUSH
27752: CALL_OW 88
27756: GO 27770
// Say ( tmp1 , D3-Sci1-1 ) ;
27758: LD_VAR 0 3
27762: PPUSH
27763: LD_STRING D3-Sci1-1
27765: PPUSH
27766: CALL_OW 88
// if garySpeaker then
27770: LD_VAR 0 1
27774: IFFALSE 27790
// Say ( Gary , D3-Gary-1 ) else
27776: LD_EXP 32
27780: PPUSH
27781: LD_STRING D3-Gary-1
27783: PPUSH
27784: CALL_OW 88
27788: GO 27802
// Say ( tmp2 , D3-Gary-1 ) ;
27790: LD_VAR 0 4
27794: PPUSH
27795: LD_STRING D3-Gary-1
27797: PPUSH
27798: CALL_OW 88
// if deltaSpeaker then
27802: LD_VAR 0 2
27806: IFFALSE 27822
// Say ( DeltaDoctor , D3-Sci1-2 ) else
27808: LD_EXP 39
27812: PPUSH
27813: LD_STRING D3-Sci1-2
27815: PPUSH
27816: CALL_OW 88
27820: GO 27834
// Say ( tmp1 , D3-Sci1-2 ) ;
27822: LD_VAR 0 3
27826: PPUSH
27827: LD_STRING D3-Sci1-2
27829: PPUSH
27830: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
27834: LD_EXP 23
27838: PPUSH
27839: LD_STRING D3-JMM-2
27841: PPUSH
27842: CALL_OW 88
// if deltaSpeaker then
27846: LD_VAR 0 2
27850: IFFALSE 27866
// Say ( DeltaDoctor , D3-Sci1-3 ) else
27852: LD_EXP 39
27856: PPUSH
27857: LD_STRING D3-Sci1-3
27859: PPUSH
27860: CALL_OW 88
27864: GO 27878
// Say ( tmp1 , D3-Sci1-3 ) ;
27866: LD_VAR 0 3
27870: PPUSH
27871: LD_STRING D3-Sci1-3
27873: PPUSH
27874: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
27878: LD_EXP 23
27882: PPUSH
27883: LD_STRING D3-JMM-3
27885: PPUSH
27886: CALL_OW 88
// if deltaSpeaker then
27890: LD_VAR 0 2
27894: IFFALSE 27910
// Say ( DeltaDoctor , D3-Sci1-4 ) else
27896: LD_EXP 39
27900: PPUSH
27901: LD_STRING D3-Sci1-4
27903: PPUSH
27904: CALL_OW 88
27908: GO 27922
// Say ( tmp1 , D3-Sci1-4 ) ;
27910: LD_VAR 0 3
27914: PPUSH
27915: LD_STRING D3-Sci1-4
27917: PPUSH
27918: CALL_OW 88
// DialogueOff ;
27922: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
27926: LD_INT 12
27928: PPUSH
27929: LD_INT 1
27931: PPUSH
27932: LD_INT 1
27934: PPUSH
27935: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
27939: LD_INT 40
27941: PPUSH
27942: LD_INT 1
27944: PPUSH
27945: LD_INT 1
27947: PPUSH
27948: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
27952: LD_INT 32
27954: PPUSH
27955: LD_INT 1
27957: PPUSH
27958: LD_INT 1
27960: PPUSH
27961: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
27965: LD_INT 33
27967: PPUSH
27968: LD_INT 1
27970: PPUSH
27971: LD_INT 1
27973: PPUSH
27974: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
27978: LD_INT 12
27980: PPUSH
27981: LD_INT 1
27983: PPUSH
27984: LD_INT 1
27986: PPUSH
27987: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
27991: LD_STRING M2
27993: PPUSH
27994: CALL_OW 337
// wait ( 3 3$0 ) ;
27998: LD_INT 6300
28000: PPUSH
28001: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28005: LD_INT 35
28007: PPUSH
28008: CALL_OW 67
// until not InBattle ( 1 ) ;
28012: LD_INT 1
28014: PPUSH
28015: CALL_OW 463
28019: NOT
28020: IFFALSE 28005
// if IsOk ( Simms ) and deltaSpeaker then
28022: LD_EXP 33
28026: PPUSH
28027: CALL_OW 302
28031: PUSH
28032: LD_VAR 0 2
28036: AND
28037: IFFALSE 28206
// begin DialogueOn ;
28039: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28043: LD_EXP 33
28047: PPUSH
28048: LD_STRING D3a-Sim-1
28050: PPUSH
28051: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28055: LD_EXP 39
28059: PPUSH
28060: LD_STRING D3a-Sci1-1
28062: PPUSH
28063: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28067: LD_EXP 33
28071: PPUSH
28072: LD_STRING D3a-Sim-2
28074: PPUSH
28075: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28079: LD_EXP 39
28083: PPUSH
28084: LD_STRING D3a-Sci1-2
28086: PPUSH
28087: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28091: LD_EXP 33
28095: PPUSH
28096: LD_STRING D3a-Sim-3
28098: PPUSH
28099: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28103: LD_EXP 39
28107: PPUSH
28108: LD_STRING D3a-Sci1-3
28110: PPUSH
28111: CALL_OW 88
// if IsOK ( Joan ) then
28115: LD_EXP 35
28119: PPUSH
28120: CALL_OW 302
28124: IFFALSE 28140
// Say ( Simms , D3a-Sim-4 ) else
28126: LD_EXP 33
28130: PPUSH
28131: LD_STRING D3a-Sim-4
28133: PPUSH
28134: CALL_OW 88
28138: GO 28152
// Say ( Simms , D3a-Sim-4a ) ;
28140: LD_EXP 33
28144: PPUSH
28145: LD_STRING D3a-Sim-4a
28147: PPUSH
28148: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28152: LD_EXP 39
28156: PPUSH
28157: LD_STRING D3a-Sci1-4
28159: PPUSH
28160: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28164: LD_EXP 33
28168: PPUSH
28169: LD_STRING D3a-Sim-5
28171: PPUSH
28172: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28176: LD_EXP 39
28180: PPUSH
28181: LD_STRING D3a-Sci1-5
28183: PPUSH
28184: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28188: LD_EXP 33
28192: PPUSH
28193: LD_STRING D3a-Sim-6
28195: PPUSH
28196: CALL_OW 88
// DialogueOff ;
28200: CALL_OW 7
// end else
28204: GO 28475
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28206: LD_ADDR_VAR 0 5
28210: PUSH
28211: LD_INT 22
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 26
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 25
28233: PUSH
28234: LD_INT 4
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: LIST
28245: PPUSH
28246: CALL_OW 69
28250: PUSH
28251: LD_EXP 23
28255: PUSH
28256: LD_EXP 29
28260: PUSH
28261: LD_EXP 28
28265: PUSH
28266: LD_EXP 33
28270: PUSH
28271: LD_EXP 36
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: DIFF
28283: ST_TO_ADDR
// if tmp3 then
28284: LD_VAR 0 5
28288: IFFALSE 28475
// begin DialogueOn ;
28290: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28294: LD_EXP 33
28298: PPUSH
28299: LD_STRING D3a-Sim-1
28301: PPUSH
28302: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28306: LD_VAR 0 5
28310: PUSH
28311: LD_INT 1
28313: ARRAY
28314: PPUSH
28315: LD_STRING D3a-Sci1-1
28317: PPUSH
28318: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28322: LD_EXP 33
28326: PPUSH
28327: LD_STRING D3a-Sim-2
28329: PPUSH
28330: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28334: LD_VAR 0 5
28338: PUSH
28339: LD_INT 1
28341: ARRAY
28342: PPUSH
28343: LD_STRING D3a-Sci1-2
28345: PPUSH
28346: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28350: LD_EXP 33
28354: PPUSH
28355: LD_STRING D3a-Sim-3
28357: PPUSH
28358: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28362: LD_VAR 0 5
28366: PUSH
28367: LD_INT 1
28369: ARRAY
28370: PPUSH
28371: LD_STRING D3a-Sci1-3
28373: PPUSH
28374: CALL_OW 88
// if IsOK ( Joan ) then
28378: LD_EXP 35
28382: PPUSH
28383: CALL_OW 302
28387: IFFALSE 28403
// Say ( Simms , D3a-Sim-4 ) else
28389: LD_EXP 33
28393: PPUSH
28394: LD_STRING D3a-Sim-4
28396: PPUSH
28397: CALL_OW 88
28401: GO 28415
// Say ( Simms , D3a-Sim-4a ) ;
28403: LD_EXP 33
28407: PPUSH
28408: LD_STRING D3a-Sim-4a
28410: PPUSH
28411: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28415: LD_VAR 0 5
28419: PUSH
28420: LD_INT 1
28422: ARRAY
28423: PPUSH
28424: LD_STRING D3a-Sci1-4
28426: PPUSH
28427: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28431: LD_EXP 33
28435: PPUSH
28436: LD_STRING D3a-Sim-5
28438: PPUSH
28439: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28443: LD_VAR 0 5
28447: PUSH
28448: LD_INT 1
28450: ARRAY
28451: PPUSH
28452: LD_STRING D3a-Sci1-5
28454: PPUSH
28455: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28459: LD_EXP 33
28463: PPUSH
28464: LD_STRING D3a-Sim-6
28466: PPUSH
28467: CALL_OW 88
// DialogueOff ;
28471: CALL_OW 7
// end ; end ; end ;
28475: PPOPN 5
28477: END
// export function DRussianNextAttack ; begin
28478: LD_INT 0
28480: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28481: LD_EXP 40
28485: PPUSH
28486: LD_STRING D4-FSol1-2
28488: PPUSH
28489: CALL_OW 94
// end ;
28493: LD_VAR 0 1
28497: RET
// export function DRussianConvoy ; begin
28498: LD_INT 0
28500: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28501: LD_EXP 40
28505: PPUSH
28506: LD_STRING D4-FSol1-1
28508: PPUSH
28509: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28513: LD_STRING M3
28515: PPUSH
28516: CALL_OW 337
// end ;
28520: LD_VAR 0 1
28524: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28525: LD_INT 0
28527: PPUSH
// CenterNowOnUnits ( unit ) ;
28528: LD_VAR 0 1
28532: PPUSH
28533: CALL_OW 87
// DialogueOn ;
28537: CALL_OW 6
// if IsOK ( Cyrus ) then
28541: LD_EXP 27
28545: PPUSH
28546: CALL_OW 302
28550: IFFALSE 28566
// Say ( Cyrus , D9a-Cyrus-1 ) else
28552: LD_EXP 27
28556: PPUSH
28557: LD_STRING D9a-Cyrus-1
28559: PPUSH
28560: CALL_OW 88
28564: GO 28688
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28566: LD_INT 22
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 26
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 25
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 25
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 25
28611: PUSH
28612: LD_INT 3
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 25
28621: PUSH
28622: LD_INT 4
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 25
28631: PUSH
28632: LD_INT 5
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: PUSH
28657: LD_EXP 23
28661: PUSH
28662: LD_EXP 36
28666: PUSH
28667: LD_EXP 27
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: DIFF
28677: PPUSH
28678: LD_STRING D9a-Sol1-1
28680: PPUSH
28681: LD_STRING D9a-Sol1-1
28683: PPUSH
28684: CALL 25083 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28688: LD_INT 22
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 26
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 25
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 25
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 25
28733: PUSH
28734: LD_INT 3
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 25
28743: PUSH
28744: LD_INT 4
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 25
28753: PUSH
28754: LD_INT 5
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 69
28778: PUSH
28779: LD_EXP 23
28783: PUSH
28784: LD_EXP 36
28788: PUSH
28789: LD_EXP 27
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: DIFF
28799: PPUSH
28800: LD_STRING D9b-Sol1-1
28802: PPUSH
28803: LD_STRING D9b-Sol1-1
28805: PPUSH
28806: CALL 25083 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
28810: LD_STRING 09_arInfo
28812: PPUSH
28813: LD_INT 0
28815: PPUSH
28816: CALL_OW 30
28820: IFFALSE 28834
// Say ( JMM , D9a-JMM-1 ) ;
28822: LD_EXP 23
28826: PPUSH
28827: LD_STRING D9a-JMM-1
28829: PPUSH
28830: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
28834: LD_EXP 23
28838: PPUSH
28839: LD_STRING D9c-JMM-1
28841: PPUSH
28842: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
28846: LD_INT 22
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 25
28858: PUSH
28859: LD_INT 5
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PPUSH
28870: CALL_OW 69
28874: IFFALSE 28888
// Say ( JMM , D9c-JMM-1a ) ;
28876: LD_EXP 23
28880: PPUSH
28881: LD_STRING D9c-JMM-1a
28883: PPUSH
28884: CALL_OW 88
// DialogueOff ;
28888: CALL_OW 7
// end ;
28892: LD_VAR 0 2
28896: RET
// export function DArabTrait1 ; var tmp ; begin
28897: LD_INT 0
28899: PPUSH
28900: PPUSH
// if IsOk ( DeltaDoctor ) then
28901: LD_EXP 39
28905: PPUSH
28906: CALL_OW 302
28910: IFFALSE 28924
// tmp := DeltaDoctor else
28912: LD_ADDR_VAR 0 2
28916: PUSH
28917: LD_EXP 39
28921: ST_TO_ADDR
28922: GO 29122
// if IsOk ( Denis ) then
28924: LD_EXP 34
28928: PPUSH
28929: CALL_OW 302
28933: IFFALSE 28947
// tmp := Denis else
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: LD_EXP 34
28944: ST_TO_ADDR
28945: GO 29122
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
28947: LD_ADDR_VAR 0 2
28951: PUSH
28952: LD_INT 22
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 50
28964: PUSH
28965: EMPTY
28966: LIST
28967: PUSH
28968: LD_INT 25
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 26
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 69
28998: PUSH
28999: LD_EXP 23
29003: PUSH
29004: LD_EXP 24
29008: PUSH
29009: LD_EXP 25
29013: PUSH
29014: LD_EXP 26
29018: PUSH
29019: LD_EXP 27
29023: PUSH
29024: LD_EXP 28
29028: PUSH
29029: LD_EXP 29
29033: PUSH
29034: LD_EXP 30
29038: PUSH
29039: LD_EXP 31
29043: PUSH
29044: LD_EXP 32
29048: PUSH
29049: LD_EXP 33
29053: PUSH
29054: LD_EXP 34
29058: PUSH
29059: LD_EXP 35
29063: PUSH
29064: LD_EXP 36
29068: PUSH
29069: LD_EXP 37
29073: PUSH
29074: LD_EXP 38
29078: PUSH
29079: LD_EXP 39
29083: PUSH
29084: LD_EXP 40
29088: PUSH
29089: LD_EXP 42
29093: PUSH
29094: LD_EXP 44
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: DIFF
29121: ST_TO_ADDR
// if not tmp then
29122: LD_VAR 0 2
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29223
// DialogueOn ;
29131: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29135: LD_EXP 23
29139: PPUSH
29140: LD_STRING D6-JMM-1
29142: PPUSH
29143: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29147: LD_VAR 0 2
29151: PPUSH
29152: LD_STRING D6-Sci1-1
29154: PPUSH
29155: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29159: LD_EXP 23
29163: PPUSH
29164: LD_STRING D6-JMM-2
29166: PPUSH
29167: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_STRING D6-Sci1-2
29178: PPUSH
29179: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29183: LD_EXP 23
29187: PPUSH
29188: LD_STRING D6-JMM-3
29190: PPUSH
29191: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29195: LD_VAR 0 2
29199: PPUSH
29200: LD_STRING D6-Sci1-3
29202: PPUSH
29203: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29207: LD_EXP 23
29211: PPUSH
29212: LD_STRING D6-JMM-4
29214: PPUSH
29215: CALL_OW 88
// DialogueOff ;
29219: CALL_OW 7
// end ;
29223: LD_VAR 0 1
29227: RET
// export function DArabTrait2 ; begin
29228: LD_INT 0
29230: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29231: LD_EXP 36
29235: PPUSH
29236: CALL_OW 305
29240: NOT
29241: PUSH
29242: LD_EXP 51
29246: PPUSH
29247: CALL_OW 302
29251: NOT
29252: OR
29253: PUSH
29254: LD_EXP 50
29258: PPUSH
29259: CALL_OW 302
29263: NOT
29264: OR
29265: IFFALSE 29269
// exit ;
29267: GO 29325
// DialogueOn ;
29269: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29273: LD_EXP 51
29277: PPUSH
29278: LD_STRING D5-Ar1-1
29280: PPUSH
29281: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29285: LD_EXP 50
29289: PPUSH
29290: LD_STRING D5-Diet-1
29292: PPUSH
29293: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29297: LD_EXP 51
29301: PPUSH
29302: LD_STRING D5-Ar1-2
29304: PPUSH
29305: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29309: LD_EXP 50
29313: PPUSH
29314: LD_STRING D5-Diet-2
29316: PPUSH
29317: CALL_OW 88
// DialogueOff ;
29321: CALL_OW 7
// end ;
29325: LD_VAR 0 1
29329: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29330: LD_EXP 4
29334: IFFALSE 31047
29336: GO 29338
29338: DISABLE
29339: LD_INT 0
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29349: LD_INT 2
29351: PPUSH
29352: LD_INT 3
29354: PPUSH
29355: LD_INT 1
29357: PPUSH
29358: LD_INT 1
29360: PPUSH
29361: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29365: LD_INT 2
29367: PPUSH
29368: LD_INT 6
29370: PPUSH
29371: LD_INT 1
29373: PPUSH
29374: LD_INT 1
29376: PPUSH
29377: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29381: LD_ADDR_VAR 0 5
29385: PUSH
29386: LD_INT 22
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 2
29398: PUSH
29399: LD_INT 25
29401: PUSH
29402: LD_INT 4
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 25
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 25
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PPUSH
29439: CALL_OW 69
29443: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
29444: LD_ADDR_VAR 0 4
29448: PUSH
29449: LD_INT 22
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 21
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 25
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 25
29484: PUSH
29485: LD_INT 8
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 25
29494: PUSH
29495: LD_INT 15
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: PPUSH
29513: CALL_OW 69
29517: PUSH
29518: LD_EXP 50
29522: DIFF
29523: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29524: LD_ADDR_VAR 0 6
29528: PUSH
29529: LD_INT 22
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 30
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PPUSH
29553: CALL_OW 69
29557: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29558: LD_VAR 0 5
29562: PPUSH
29563: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29567: LD_VAR 0 4
29571: PPUSH
29572: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29576: LD_INT 101
29578: PPUSH
29579: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29583: LD_EXP 40
29587: PPUSH
29588: LD_STRING D4-FSol1-3
29590: PPUSH
29591: CALL_OW 94
// for i in arCivilian do
29595: LD_ADDR_VAR 0 1
29599: PUSH
29600: LD_VAR 0 5
29604: PUSH
29605: FOR_IN
29606: IFFALSE 29685
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29608: LD_VAR 0 1
29612: PPUSH
29613: LD_VAR 0 6
29617: PUSH
29618: LD_VAR 0 1
29622: PUSH
29623: LD_INT 2
29625: MOD
29626: PUSH
29627: LD_INT 1
29629: PLUS
29630: ARRAY
29631: PPUSH
29632: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29636: LD_VAR 0 1
29640: PPUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 8
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PPUSH
29654: LD_INT 2
29656: PPUSH
29657: CALL_OW 12
29661: ARRAY
29662: PPUSH
29663: CALL_OW 183
// AddComExitBuilding ( i ) ;
29667: LD_VAR 0 1
29671: PPUSH
29672: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29676: LD_INT 18
29678: PPUSH
29679: CALL_OW 67
// end ;
29683: GO 29605
29685: POP
29686: POP
// wait ( 0 0$5 ) ;
29687: LD_INT 175
29689: PPUSH
29690: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29694: LD_INT 76
29696: PPUSH
29697: LD_INT 19
29699: PPUSH
29700: CALL_OW 84
// DialogueOn ;
29704: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29708: LD_INT 22
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 26
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 25
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 25
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 25
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 25
29763: PUSH
29764: LD_INT 4
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 25
29773: PUSH
29774: LD_INT 5
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: PPUSH
29794: CALL_OW 69
29798: PPUSH
29799: LD_STRING D8-Sol1-1
29801: PPUSH
29802: LD_STRING D8-Sol1-1
29804: PPUSH
29805: CALL 25083 0 3
// if IsOk ( DeltaDoctor ) then
29809: LD_EXP 39
29813: PPUSH
29814: CALL_OW 302
29818: IFFALSE 29834
// Say ( DeltaDoctor , D8-Sci1-1 ) else
29820: LD_EXP 39
29824: PPUSH
29825: LD_STRING D8-Sci1-1
29827: PPUSH
29828: CALL_OW 88
29832: GO 29935
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29834: LD_INT 22
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 26
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 25
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 25
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 25
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 69
29924: PPUSH
29925: LD_STRING D8-Sol1-1
29927: PPUSH
29928: LD_STRING D8-Sol1-1
29930: PPUSH
29931: CALL 25083 0 3
// Say ( JMM , D8-JMM-1 ) ;
29935: LD_EXP 23
29939: PPUSH
29940: LD_STRING D8-JMM-1
29942: PPUSH
29943: CALL_OW 88
// DialogueOff ;
29947: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
29951: LD_INT 2
29953: PPUSH
29954: LD_INT 2
29956: PPUSH
29957: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
29961: LD_INT 1
29963: PPUSH
29964: LD_INT 2
29966: PPUSH
29967: LD_INT 2
29969: PPUSH
29970: LD_INT 1
29972: PPUSH
29973: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
29977: LD_INT 3
29979: PPUSH
29980: LD_INT 2
29982: PPUSH
29983: LD_INT 1
29985: PPUSH
29986: LD_INT 1
29988: PPUSH
29989: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
29993: LD_INT 6
29995: PPUSH
29996: LD_INT 2
29998: PPUSH
29999: LD_INT 1
30001: PPUSH
30002: LD_INT 1
30004: PPUSH
30005: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30009: LD_STRING M4
30011: PPUSH
30012: CALL_OW 337
// wait ( 0 0$1 ) ;
30016: LD_INT 35
30018: PPUSH
30019: CALL_OW 67
// if IsLive ( Khatam ) then
30023: LD_EXP 36
30027: PPUSH
30028: CALL_OW 300
30032: IFFALSE 30046
// DoNotAttack ( 2 , Khatam ) ;
30034: LD_INT 2
30036: PPUSH
30037: LD_EXP 36
30041: PPUSH
30042: CALL_OW 471
// wait ( 0 0$1 ) ;
30046: LD_INT 35
30048: PPUSH
30049: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30053: LD_ADDR_VAR 0 7
30057: PUSH
30058: LD_INT 22
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 21
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PPUSH
30082: CALL_OW 69
30086: PPUSH
30087: LD_VAR 0 4
30091: PUSH
30092: LD_INT 1
30094: ARRAY
30095: PPUSH
30096: CALL_OW 74
30100: ST_TO_ADDR
// for i := 1 to 3 do
30101: LD_ADDR_VAR 0 1
30105: PUSH
30106: DOUBLE
30107: LD_INT 1
30109: DEC
30110: ST_TO_ADDR
30111: LD_INT 3
30113: PUSH
30114: FOR_TO
30115: IFFALSE 30174
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ i ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30117: LD_VAR 0 4
30121: PPUSH
30122: LD_INT 25
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PPUSH
30132: CALL_OW 72
30136: PUSH
30137: LD_VAR 0 1
30141: ARRAY
30142: PPUSH
30143: LD_VAR 0 7
30147: PPUSH
30148: CALL_OW 250
30152: PPUSH
30153: LD_VAR 0 7
30157: PPUSH
30158: CALL_OW 251
30162: PPUSH
30163: LD_VAR 0 7
30167: PPUSH
30168: CALL_OW 192
30172: GO 30114
30174: POP
30175: POP
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
30176: LD_VAR 0 4
30180: PPUSH
30181: LD_INT 84
30183: PPUSH
30184: LD_INT 22
30186: PPUSH
30187: CALL_OW 174
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30191: LD_VAR 0 4
30195: PPUSH
30196: LD_INT 95
30198: PPUSH
30199: LD_INT 12
30201: PPUSH
30202: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30206: LD_VAR 0 4
30210: PPUSH
30211: LD_INT 102
30213: PPUSH
30214: LD_INT 11
30216: PPUSH
30217: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30221: LD_VAR 0 4
30225: PPUSH
30226: LD_INT 116
30228: PPUSH
30229: LD_INT 15
30231: PPUSH
30232: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30236: LD_VAR 0 4
30240: PPUSH
30241: LD_INT 140
30243: PPUSH
30244: LD_INT 25
30246: PPUSH
30247: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
30251: LD_ADDR_VAR 0 4
30255: PUSH
30256: LD_INT 22
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 21
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 25
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 25
30291: PUSH
30292: LD_INT 8
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 25
30301: PUSH
30302: LD_INT 15
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: PPUSH
30320: CALL_OW 69
30324: PUSH
30325: LD_EXP 50
30329: DIFF
30330: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30331: LD_ADDR_VAR 0 5
30335: PUSH
30336: LD_INT 22
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 21
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 25
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 25
30381: PUSH
30382: LD_INT 4
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 25
30391: PUSH
30392: LD_INT 12
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 25
30401: PUSH
30402: LD_INT 16
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: PPUSH
30422: CALL_OW 69
30426: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30427: LD_ADDR_VAR 0 5
30431: PUSH
30432: LD_VAR 0 5
30436: PUSH
30437: LD_EXP 50
30441: ADD
30442: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 81 , 12 ) ;
30443: LD_VAR 0 5
30447: PPUSH
30448: LD_INT 81
30450: PPUSH
30451: LD_INT 12
30453: PPUSH
30454: CALL_OW 171
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30458: LD_VAR 0 5
30462: PPUSH
30463: LD_INT 88
30465: PPUSH
30466: LD_INT 8
30468: PPUSH
30469: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30473: LD_VAR 0 5
30477: PPUSH
30478: LD_INT 102
30480: PPUSH
30481: LD_INT 10
30483: PPUSH
30484: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30488: LD_VAR 0 5
30492: PPUSH
30493: LD_INT 116
30495: PPUSH
30496: LD_INT 15
30498: PPUSH
30499: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30503: LD_VAR 0 5
30507: PPUSH
30508: LD_INT 140
30510: PPUSH
30511: LD_INT 25
30513: PPUSH
30514: CALL_OW 171
// wait ( 3 ) ;
30518: LD_INT 3
30520: PPUSH
30521: CALL_OW 67
// arEscapist := arCivilian union arSoldiers ;
30525: LD_ADDR_EXP 56
30529: PUSH
30530: LD_VAR 0 5
30534: PUSH
30535: LD_VAR 0 4
30539: UNION
30540: ST_TO_ADDR
// if IsOk ( Gary ) then
30541: LD_EXP 32
30545: PPUSH
30546: CALL_OW 302
30550: IFFALSE 30564
// Say ( Gary , D8a-Gary-1 ) ;
30552: LD_EXP 32
30556: PPUSH
30557: LD_STRING D8a-Gary-1
30559: PPUSH
30560: CALL_OW 88
// wait ( 0 0$5 ) ;
30564: LD_INT 175
30566: PPUSH
30567: CALL_OW 67
// if IsOK ( Khatam ) then
30571: LD_EXP 36
30575: PPUSH
30576: CALL_OW 302
30580: IFFALSE 31047
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30582: LD_ADDR_VAR 0 2
30586: PUSH
30587: LD_INT 22
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 25
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 25
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 25
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 25
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 25
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 25
30652: PUSH
30653: LD_INT 8
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 69
30677: PUSH
30678: LD_EXP 23
30682: PUSH
30683: LD_EXP 24
30687: PUSH
30688: LD_EXP 25
30692: PUSH
30693: LD_EXP 26
30697: PUSH
30698: LD_EXP 27
30702: PUSH
30703: LD_EXP 28
30707: PUSH
30708: LD_EXP 29
30712: PUSH
30713: LD_EXP 30
30717: PUSH
30718: LD_EXP 31
30722: PUSH
30723: LD_EXP 32
30727: PUSH
30728: LD_EXP 33
30732: PUSH
30733: LD_EXP 34
30737: PUSH
30738: LD_EXP 35
30742: PUSH
30743: LD_EXP 36
30747: PUSH
30748: LD_EXP 37
30752: PUSH
30753: LD_EXP 38
30757: PUSH
30758: LD_EXP 39
30762: PUSH
30763: LD_EXP 42
30767: PUSH
30768: LD_EXP 44
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: DIFF
30794: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
30795: LD_EXP 36
30799: PPUSH
30800: LD_INT 8
30802: PPUSH
30803: CALL_OW 235
// ComExit ( Khatam ) ;
30807: LD_EXP 36
30811: PPUSH
30812: CALL 93263 0 1
// wait ( 0 0$1 ) ;
30816: LD_INT 35
30818: PPUSH
30819: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
30823: LD_EXP 36
30827: PPUSH
30828: LD_INT 11
30830: PPUSH
30831: CALL_OW 113
// escapeKhatam := true ;
30835: LD_ADDR_EXP 11
30839: PUSH
30840: LD_INT 1
30842: ST_TO_ADDR
// if not tmp then
30843: LD_VAR 0 2
30847: NOT
30848: IFFALSE 30852
// exit ;
30850: GO 31047
// wait ( 0 0$2 ) ;
30852: LD_INT 70
30854: PPUSH
30855: CALL_OW 67
// DialogueOn ;
30859: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
30863: LD_ADDR_VAR 0 8
30867: PUSH
30868: LD_VAR 0 2
30872: PPUSH
30873: LD_STRING D8b-Sol1-1
30875: PPUSH
30876: LD_STRING D8b-FSol1-1
30878: PPUSH
30879: CALL 25083 0 3
30883: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
30884: LD_EXP 36
30888: PPUSH
30889: LD_STRING D8b-Khat-1
30891: PPUSH
30892: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30896: LD_VAR 0 8
30900: PPUSH
30901: CALL_OW 258
30905: PUSH
30906: LD_INT 1
30908: EQUAL
30909: IFFALSE 30925
// Say ( speaker , D8b-Sol1-2 ) else
30911: LD_VAR 0 8
30915: PPUSH
30916: LD_STRING D8b-Sol1-2
30918: PPUSH
30919: CALL_OW 88
30923: GO 30937
// Say ( speaker , D8b-FSol1-2 ) ;
30925: LD_VAR 0 8
30929: PPUSH
30930: LD_STRING D8b-FSol1-2
30932: PPUSH
30933: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
30937: LD_EXP 36
30941: PPUSH
30942: LD_STRING D8b-Khat-2
30944: PPUSH
30945: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30949: LD_VAR 0 8
30953: PPUSH
30954: CALL_OW 258
30958: PUSH
30959: LD_INT 1
30961: EQUAL
30962: IFFALSE 30978
// Say ( speaker , D8b-Sol1-3 ) else
30964: LD_VAR 0 8
30968: PPUSH
30969: LD_STRING D8b-Sol1-3
30971: PPUSH
30972: CALL_OW 88
30976: GO 30990
// Say ( speaker , D8b-FSol1-3 ) ;
30978: LD_VAR 0 8
30982: PPUSH
30983: LD_STRING D8b-FSol1-3
30985: PPUSH
30986: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
30990: LD_EXP 36
30994: PPUSH
30995: LD_STRING D8b-Khat-3
30997: PPUSH
30998: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31002: LD_VAR 0 8
31006: PPUSH
31007: CALL_OW 258
31011: PUSH
31012: LD_INT 1
31014: EQUAL
31015: IFFALSE 31031
// Say ( speaker , D8b-Sol1-4 ) else
31017: LD_VAR 0 8
31021: PPUSH
31022: LD_STRING D8b-Sol1-4
31024: PPUSH
31025: CALL_OW 88
31029: GO 31043
// Say ( speaker , D8b-FSol1-4 ) ;
31031: LD_VAR 0 8
31035: PPUSH
31036: LD_STRING D8b-FSol1-4
31038: PPUSH
31039: CALL_OW 88
// DialogueOff ;
31043: CALL_OW 7
// end ; end ;
31047: PPOPN 8
31049: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31050: LD_EXP 11
31054: PUSH
31055: LD_EXP 36
31059: PPUSH
31060: CALL_OW 302
31064: AND
31065: IFFALSE 31140
31067: GO 31069
31069: DISABLE
// begin enable ;
31070: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31071: LD_EXP 36
31075: PPUSH
31076: CALL_OW 302
31080: PUSH
31081: LD_EXP 36
31085: PPUSH
31086: CALL_OW 314
31090: NOT
31091: AND
31092: IFFALSE 31106
// ComMoveToArea ( Khatam , khatamArea ) ;
31094: LD_EXP 36
31098: PPUSH
31099: LD_INT 11
31101: PPUSH
31102: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31106: LD_EXP 36
31110: PPUSH
31111: LD_INT 11
31113: PPUSH
31114: CALL_OW 308
31118: IFFALSE 31140
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31120: LD_INT 1
31122: PPUSH
31123: LD_STRING 10_KhatamStatus_1
31125: PPUSH
31126: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31130: LD_EXP 36
31134: PPUSH
31135: CALL_OW 64
// disable ;
31139: DISABLE
// end ; end ;
31140: END
// every 0 0$30 trigger joinedToEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31141: LD_EXP 7
31145: PUSH
31146: LD_STRING 02_mikhailStatus_1
31148: PPUSH
31149: LD_INT 0
31151: PPUSH
31152: CALL_OW 30
31156: AND
31157: PUSH
31158: LD_INT 22
31160: PUSH
31161: LD_INT 5
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 50
31170: PUSH
31171: EMPTY
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PPUSH
31178: CALL_OW 69
31182: PUSH
31183: LD_INT 0
31185: EQUAL
31186: AND
31187: PUSH
31188: LD_INT 22
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 50
31200: PUSH
31201: EMPTY
31202: LIST
31203: PUSH
31204: LD_INT 21
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: PPUSH
31219: CALL_OW 69
31223: PUSH
31224: LD_INT 0
31226: EQUAL
31227: PUSH
31228: LD_EXP 4
31232: NOT
31233: OR
31234: AND
31235: IFFALSE 31257
31237: GO 31239
31239: DISABLE
// begin wait ( 2 2$00 * Difficulty ) ;
31240: LD_INT 4200
31242: PUSH
31243: LD_OWVAR 67
31247: MUL
31248: PPUSH
31249: CALL_OW 67
// PrepareCornell ;
31253: CALL 3198 0 0
// end ;
31257: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31258: LD_INT 22
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: PPUSH
31273: LD_EXP 42
31277: PPUSH
31278: CALL_OW 74
31282: PPUSH
31283: LD_EXP 42
31287: PPUSH
31288: CALL_OW 296
31292: PUSH
31293: LD_INT 9
31295: LESS
31296: PUSH
31297: LD_EXP 42
31301: PPUSH
31302: CALL_OW 302
31306: AND
31307: IFFALSE 31751
31309: GO 31311
31311: DISABLE
// begin InGameOn ;
31312: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31316: LD_EXP 42
31320: PPUSH
31321: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31325: LD_EXP 42
31329: PPUSH
31330: LD_STRING D7-Corn-1
31332: PPUSH
31333: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31337: LD_INT 22
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 25
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 25
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 25
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 25
31382: PUSH
31383: LD_INT 4
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 25
31392: PUSH
31393: LD_INT 5
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PPUSH
31412: CALL_OW 69
31416: PPUSH
31417: LD_STRING D7-Sol1-1
31419: PPUSH
31420: LD_STRING D7-FSol1-1
31422: PPUSH
31423: CALL 25083 0 3
// CenterNowOnUnits ( Cornell ) ;
31427: LD_EXP 42
31431: PPUSH
31432: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31436: LD_EXP 42
31440: PPUSH
31441: LD_STRING D7-Corn-2
31443: PPUSH
31444: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31448: LD_EXP 23
31452: PPUSH
31453: LD_STRING D7-JMM-2
31455: PPUSH
31456: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31460: LD_EXP 42
31464: PPUSH
31465: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31469: LD_EXP 42
31473: PPUSH
31474: LD_STRING D7-Corn-3
31476: PPUSH
31477: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31481: LD_EXP 42
31485: PPUSH
31486: LD_INT 250
31488: PPUSH
31489: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31493: LD_EXP 42
31497: PPUSH
31498: LD_INT 1
31500: PPUSH
31501: CALL_OW 235
// wait ( 0 0$1 ) ;
31505: LD_INT 35
31507: PPUSH
31508: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31512: LD_EXP 23
31516: PPUSH
31517: LD_STRING D7-JMM-3
31519: PPUSH
31520: CALL_OW 88
// InGameOff ;
31524: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31528: LD_INT 35
31530: PPUSH
31531: CALL_OW 67
// if IsDead ( Cornell ) then
31535: LD_EXP 42
31539: PPUSH
31540: CALL_OW 301
31544: IFFALSE 31548
// exit ;
31546: GO 31751
// until GetLives ( Cornell ) > 350 ;
31548: LD_EXP 42
31552: PPUSH
31553: CALL_OW 256
31557: PUSH
31558: LD_INT 350
31560: GREATER
31561: IFFALSE 31528
// DialogueOn ;
31563: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31567: LD_EXP 23
31571: PPUSH
31572: LD_STRING D7a-JMM-1
31574: PPUSH
31575: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31579: LD_EXP 42
31583: PPUSH
31584: LD_STRING D7a-Corn-1
31586: PPUSH
31587: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31591: LD_EXP 23
31595: PPUSH
31596: LD_STRING D7a-JMM-2
31598: PPUSH
31599: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31603: LD_EXP 42
31607: PPUSH
31608: LD_STRING D7a-Corn-2
31610: PPUSH
31611: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31615: LD_EXP 23
31619: PPUSH
31620: LD_STRING D7a-JMM-3
31622: PPUSH
31623: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31627: LD_EXP 42
31631: PPUSH
31632: LD_STRING D7a-Corn-3
31634: PPUSH
31635: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31639: LD_EXP 23
31643: PPUSH
31644: LD_STRING D7a-JMM-4
31646: PPUSH
31647: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31651: LD_EXP 42
31655: PPUSH
31656: LD_STRING D7a-Corn-4
31658: PPUSH
31659: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31663: LD_EXP 23
31667: PPUSH
31668: LD_STRING D7a-JMM-5
31670: PPUSH
31671: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31675: LD_EXP 42
31679: PPUSH
31680: LD_STRING D7a-Corn-5
31682: PPUSH
31683: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31687: LD_EXP 23
31691: PPUSH
31692: LD_STRING D7a-JMM-6
31694: PPUSH
31695: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31699: LD_EXP 42
31703: PPUSH
31704: LD_STRING D7a-Corn-6
31706: PPUSH
31707: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31711: LD_EXP 23
31715: PPUSH
31716: LD_STRING D7a-JMM-7
31718: PPUSH
31719: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31723: LD_EXP 42
31727: PPUSH
31728: LD_STRING D7a-Corn-7
31730: PPUSH
31731: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
31735: LD_EXP 23
31739: PPUSH
31740: LD_STRING D7a-JMM-8
31742: PPUSH
31743: CALL_OW 88
// DialogueOff ;
31747: CALL_OW 7
// end ;
31751: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
31752: LD_INT 54
31754: PPUSH
31755: LD_INT 1
31757: PPUSH
31758: CALL_OW 321
31762: PUSH
31763: LD_INT 2
31765: EQUAL
31766: PUSH
31767: LD_INT 55
31769: PPUSH
31770: LD_INT 1
31772: PPUSH
31773: CALL_OW 321
31777: PUSH
31778: LD_INT 2
31780: EQUAL
31781: AND
31782: PUSH
31783: LD_INT 21
31785: PPUSH
31786: LD_INT 1
31788: PPUSH
31789: CALL_OW 321
31793: PUSH
31794: LD_INT 2
31796: EQUAL
31797: AND
31798: PUSH
31799: LD_INT 22
31801: PPUSH
31802: LD_INT 1
31804: PPUSH
31805: CALL_OW 321
31809: PUSH
31810: LD_INT 2
31812: EQUAL
31813: AND
31814: PUSH
31815: LD_INT 12
31817: PPUSH
31818: LD_INT 1
31820: PPUSH
31821: CALL_OW 321
31825: PUSH
31826: LD_INT 1
31828: EQUAL
31829: PUSH
31830: LD_INT 32
31832: PPUSH
31833: LD_INT 1
31835: PPUSH
31836: CALL_OW 321
31840: PUSH
31841: LD_INT 1
31843: EQUAL
31844: OR
31845: PUSH
31846: EMPTY
31847: LIST
31848: AND
31849: PUSH
31850: LD_EXP 8
31854: AND
31855: PUSH
31856: LD_INT 22
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 21
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PPUSH
31880: CALL_OW 69
31884: PUSH
31885: LD_INT 0
31887: EQUAL
31888: AND
31889: IFFALSE 31937
31891: GO 31893
31893: DISABLE
// begin case Query ( QEndMission ) of 1 :
31894: LD_STRING QEndMission
31896: PPUSH
31897: CALL_OW 97
31901: PUSH
31902: LD_INT 1
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31921
31910: POP
// end_the_mission_allowed = true ; 2 :
31911: LD_ADDR_OWVAR 57
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
31919: GO 31937
31921: LD_INT 2
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31936
31929: POP
// FinishMission ; end ;
31930: CALL 31983 0 0
31934: GO 31937
31936: POP
// end ;
31937: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
31938: LD_INT 0
31940: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 300
31950: PUSH
31951: LD_VAR 0 1
31955: PUSH
31956: LD_EXP 45
31960: IN
31961: OR
31962: IFFALSE 31978
// SaveCharacters ( unit , id ) ;
31964: LD_VAR 0 1
31968: PPUSH
31969: LD_VAR 0 2
31973: PPUSH
31974: CALL_OW 38
// end ;
31978: LD_VAR 0 3
31982: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
31983: LD_INT 0
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
31990: LD_INT 22
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 21
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 23
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 50
32022: PUSH
32023: EMPTY
32024: LIST
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: PPUSH
32032: CALL_OW 69
32036: PPUSH
32037: CALL 57256 0 1
32041: PUSH
32042: LD_INT 5
32044: LESS
32045: IFFALSE 32056
// begin YouLost ( Troops ) ;
32047: LD_STRING Troops
32049: PPUSH
32050: CALL_OW 104
// exit ;
32054: GO 33076
// end ; if not hasSniper then
32056: LD_EXP 20
32060: NOT
32061: IFFALSE 32070
// SetAchievement ( ACH_SNIPER ) ;
32063: LD_STRING ACH_SNIPER
32065: PPUSH
32066: CALL_OW 543
// m1 := false ;
32070: LD_ADDR_VAR 0 2
32074: PUSH
32075: LD_INT 0
32077: ST_TO_ADDR
// m2 := false ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: LD_INT 0
32085: ST_TO_ADDR
// m3 := false ;
32086: LD_ADDR_VAR 0 4
32090: PUSH
32091: LD_INT 0
32093: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32094: LD_INT 12
32096: PPUSH
32097: LD_INT 1
32099: PPUSH
32100: CALL_OW 321
32104: PUSH
32105: LD_INT 2
32107: EQUAL
32108: IFFALSE 32130
// begin AddMedal ( sights , 1 ) ;
32110: LD_STRING sights
32112: PPUSH
32113: LD_INT 1
32115: PPUSH
32116: CALL_OW 101
// m1 := true ;
32120: LD_ADDR_VAR 0 2
32124: PUSH
32125: LD_INT 1
32127: ST_TO_ADDR
// end else
32128: GO 32141
// AddMedal ( sights , - 1 ) ;
32130: LD_STRING sights
32132: PPUSH
32133: LD_INT 1
32135: NEG
32136: PPUSH
32137: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32141: LD_INT 32
32143: PPUSH
32144: LD_INT 1
32146: PPUSH
32147: CALL_OW 321
32151: PUSH
32152: LD_INT 2
32154: EQUAL
32155: IFFALSE 32177
// begin AddMedal ( computers , 1 ) ;
32157: LD_STRING computers
32159: PPUSH
32160: LD_INT 1
32162: PPUSH
32163: CALL_OW 101
// m2 := true ;
32167: LD_ADDR_VAR 0 3
32171: PUSH
32172: LD_INT 1
32174: ST_TO_ADDR
// end else
32175: GO 32188
// AddMedal ( computers , - 1 ) ;
32177: LD_STRING computers
32179: PPUSH
32180: LD_INT 1
32182: NEG
32183: PPUSH
32184: CALL_OW 101
// if arabianEscapedCounter = 0 then
32188: LD_EXP 21
32192: PUSH
32193: LD_INT 0
32195: EQUAL
32196: IFFALSE 32228
// begin AddMedal ( renegades , 2 ) ;
32198: LD_STRING renegades
32200: PPUSH
32201: LD_INT 2
32203: PPUSH
32204: CALL_OW 101
// m3 := true ;
32208: LD_ADDR_VAR 0 4
32212: PUSH
32213: LD_INT 1
32215: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32216: LD_INT 0
32218: PPUSH
32219: LD_STRING 10_ScientistsEscape_1
32221: PPUSH
32222: CALL_OW 39
// end else
32226: GO 32239
// AddMedal ( renegades , - 1 ) ;
32228: LD_STRING renegades
32230: PPUSH
32231: LD_INT 1
32233: NEG
32234: PPUSH
32235: CALL_OW 101
// SaveEpsilonBase ;
32239: CALL 33081 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32243: LD_VAR 0 2
32247: PUSH
32248: LD_VAR 0 3
32252: AND
32253: PUSH
32254: LD_VAR 0 4
32258: AND
32259: PUSH
32260: LD_OWVAR 67
32264: PUSH
32265: LD_INT 3
32267: GREATEREQUAL
32268: AND
32269: IFFALSE 32281
// SetAchievementEX ( ACH_AMER , 10 ) ;
32271: LD_STRING ACH_AMER
32273: PPUSH
32274: LD_INT 10
32276: PPUSH
32277: CALL_OW 564
// if tick <= 40 40$00 then
32281: LD_OWVAR 1
32285: PUSH
32286: LD_INT 84000
32288: LESSEQUAL
32289: IFFALSE 32305
// begin wait ( 3 ) ;
32291: LD_INT 3
32293: PPUSH
32294: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32298: LD_STRING ACH_ASPEED_10
32300: PPUSH
32301: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32305: LD_STRING Main
32307: PPUSH
32308: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32312: LD_INT 22
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 23
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 21
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 25
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 25
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 25
32367: PUSH
32368: LD_INT 3
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 25
32377: PUSH
32378: LD_INT 4
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 25
32387: PUSH
32388: LD_INT 5
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 25
32397: PUSH
32398: LD_INT 8
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: PPUSH
32420: CALL_OW 69
32424: PPUSH
32425: CALL_OW 43
// prefix := 10c_ ;
32429: LD_ADDR_VAR 0 5
32433: PUSH
32434: LD_STRING 10c_
32436: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32437: LD_EXP 23
32441: PPUSH
32442: LD_VAR 0 5
32446: PUSH
32447: LD_STRING JMM
32449: STR
32450: PPUSH
32451: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32455: LD_EXP 24
32459: PPUSH
32460: LD_VAR 0 5
32464: PUSH
32465: LD_STRING Brown
32467: STR
32468: PPUSH
32469: CALL 31938 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32473: LD_EXP 25
32477: PPUSH
32478: LD_VAR 0 5
32482: PUSH
32483: LD_STRING Donaldson
32485: STR
32486: PPUSH
32487: CALL 31938 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32491: LD_EXP 26
32495: PPUSH
32496: LD_VAR 0 5
32500: PUSH
32501: LD_STRING Bobby
32503: STR
32504: PPUSH
32505: CALL 31938 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32509: LD_EXP 27
32513: PPUSH
32514: LD_VAR 0 5
32518: PUSH
32519: LD_STRING Cyrus
32521: STR
32522: PPUSH
32523: CALL 31938 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32527: LD_EXP 28
32531: PPUSH
32532: LD_VAR 0 5
32536: PUSH
32537: LD_STRING Lisa
32539: STR
32540: PPUSH
32541: CALL 31938 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32545: LD_EXP 29
32549: PPUSH
32550: LD_VAR 0 5
32554: PUSH
32555: LD_STRING Frank
32557: STR
32558: PPUSH
32559: CALL 31938 0 2
// if Kikuchi then
32563: LD_EXP 30
32567: IFFALSE 32594
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32569: LD_STRING enableBioCharacter(BIO_YAMO)
32571: PPUSH
32572: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32576: LD_EXP 30
32580: PPUSH
32581: LD_VAR 0 5
32585: PUSH
32586: LD_STRING Kikuchi
32588: STR
32589: PPUSH
32590: CALL 31938 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32594: LD_EXP 31
32598: PPUSH
32599: LD_VAR 0 5
32603: PUSH
32604: LD_STRING Houten
32606: STR
32607: PPUSH
32608: CALL 31938 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32612: LD_EXP 32
32616: PPUSH
32617: LD_VAR 0 5
32621: PUSH
32622: LD_STRING Gary
32624: STR
32625: PPUSH
32626: CALL 31938 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32630: LD_EXP 42
32634: PPUSH
32635: LD_VAR 0 5
32639: PUSH
32640: LD_STRING Cornell
32642: STR
32643: PPUSH
32644: CALL 31938 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32648: LD_EXP 33
32652: PPUSH
32653: LD_VAR 0 5
32657: PUSH
32658: LD_STRING Simms
32660: STR
32661: PPUSH
32662: CALL 31938 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32666: LD_EXP 34
32670: PPUSH
32671: LD_VAR 0 5
32675: PUSH
32676: LD_STRING Denis
32678: STR
32679: PPUSH
32680: CALL 31938 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32684: LD_EXP 35
32688: PPUSH
32689: LD_VAR 0 5
32693: PUSH
32694: LD_STRING Joan
32696: STR
32697: PPUSH
32698: CALL 31938 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32702: LD_EXP 37
32706: PPUSH
32707: LD_VAR 0 5
32711: PUSH
32712: LD_STRING Gladstone
32714: STR
32715: PPUSH
32716: CALL 31938 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
32720: LD_EXP 39
32724: PPUSH
32725: LD_VAR 0 5
32729: PUSH
32730: LD_STRING DeltaDoctor
32732: STR
32733: PPUSH
32734: CALL 31938 0 2
// if IsLive ( Mike ) then
32738: LD_EXP 41
32742: PPUSH
32743: CALL_OW 300
32747: IFFALSE 32767
// SaveCharacters ( Mike , prefix & Mike ) ;
32749: LD_EXP 41
32753: PPUSH
32754: LD_VAR 0 5
32758: PUSH
32759: LD_STRING Mike
32761: STR
32762: PPUSH
32763: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
32767: LD_EXP 46
32771: PPUSH
32772: LD_STRING 10c_lock
32774: PPUSH
32775: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
32779: LD_INT 50
32781: PUSH
32782: EMPTY
32783: LIST
32784: PUSH
32785: LD_INT 22
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 21
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 2
32807: PUSH
32808: LD_INT 25
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 25
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 25
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 25
32840: PUSH
32841: LD_INT 4
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 25
32850: PUSH
32851: LD_INT 5
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 25
32860: PUSH
32861: LD_INT 8
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: PPUSH
32883: CALL_OW 69
32887: PUSH
32888: LD_EXP 23
32892: PUSH
32893: LD_EXP 24
32897: PUSH
32898: LD_EXP 25
32902: PUSH
32903: LD_EXP 26
32907: PUSH
32908: LD_EXP 27
32912: PUSH
32913: LD_EXP 28
32917: PUSH
32918: LD_EXP 29
32922: PUSH
32923: LD_EXP 37
32927: PUSH
32928: LD_EXP 30
32932: PUSH
32933: LD_EXP 34
32937: PUSH
32938: LD_EXP 35
32942: PUSH
32943: LD_EXP 31
32947: PUSH
32948: LD_EXP 33
32952: PUSH
32953: LD_EXP 32
32957: PUSH
32958: LD_EXP 39
32962: PUSH
32963: LD_EXP 42
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: DIFF
32986: PPUSH
32987: LD_STRING 10_other_survivors
32989: PPUSH
32990: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
32994: LD_INT 50
32996: PUSH
32997: EMPTY
32998: LIST
32999: PUSH
33000: LD_INT 22
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 21
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: LD_INT 25
33025: PUSH
33026: LD_INT 16
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 25
33035: PUSH
33036: LD_INT 12
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: PPUSH
33054: CALL_OW 69
33058: PUSH
33059: LD_EXP 41
33063: DIFF
33064: PPUSH
33065: LD_STRING 10_ape
33067: PPUSH
33068: CALL_OW 38
// YouWin ;
33072: CALL_OW 103
// end ;
33076: LD_VAR 0 1
33080: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33081: LD_INT 0
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
// epsilonBase := [ ] ;
33087: LD_ADDR_VAR 0 2
33091: PUSH
33092: EMPTY
33093: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_INT 22
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 21
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 50
33121: PUSH
33122: EMPTY
33123: LIST
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: LIST
33129: PPUSH
33130: CALL_OW 69
33134: ST_TO_ADDR
// for i in buildings do
33135: LD_ADDR_VAR 0 4
33139: PUSH
33140: LD_VAR 0 3
33144: PUSH
33145: FOR_IN
33146: IFFALSE 33598
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33148: LD_VAR 0 4
33152: PPUSH
33153: CALL_OW 266
33157: PUSH
33158: LD_INT 6
33160: PUSH
33161: LD_INT 7
33163: PUSH
33164: LD_INT 8
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: IN
33172: IFFALSE 33286
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33174: LD_ADDR_VAR 0 2
33178: PUSH
33179: LD_VAR 0 2
33183: PUSH
33184: LD_VAR 0 4
33188: PPUSH
33189: CALL_OW 266
33193: PUSH
33194: LD_VAR 0 4
33198: PPUSH
33199: CALL_OW 250
33203: PUSH
33204: LD_VAR 0 4
33208: PPUSH
33209: CALL_OW 251
33213: PUSH
33214: LD_VAR 0 4
33218: PPUSH
33219: CALL_OW 254
33223: PUSH
33224: LD_VAR 0 4
33228: PPUSH
33229: CALL_OW 267
33233: PUSH
33234: LD_VAR 0 4
33238: PPUSH
33239: CALL_OW 248
33243: PUSH
33244: LD_VAR 0 4
33248: PPUSH
33249: LD_INT 1
33251: PPUSH
33252: CALL_OW 268
33256: PUSH
33257: LD_VAR 0 4
33261: PPUSH
33262: LD_INT 2
33264: PPUSH
33265: CALL_OW 268
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: ADD
33283: ST_TO_ADDR
33284: GO 33596
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33286: LD_VAR 0 4
33290: PPUSH
33291: CALL_OW 266
33295: PUSH
33296: LD_INT 32
33298: EQUAL
33299: PUSH
33300: LD_VAR 0 4
33304: PPUSH
33305: CALL_OW 266
33309: PUSH
33310: LD_INT 33
33312: EQUAL
33313: OR
33314: IFFALSE 33411
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33316: LD_ADDR_VAR 0 2
33320: PUSH
33321: LD_VAR 0 2
33325: PUSH
33326: LD_VAR 0 4
33330: PPUSH
33331: CALL_OW 266
33335: PUSH
33336: LD_VAR 0 4
33340: PPUSH
33341: CALL_OW 250
33345: PUSH
33346: LD_VAR 0 4
33350: PPUSH
33351: CALL_OW 251
33355: PUSH
33356: LD_VAR 0 4
33360: PPUSH
33361: CALL_OW 254
33365: PUSH
33366: LD_VAR 0 4
33370: PPUSH
33371: CALL_OW 267
33375: PUSH
33376: LD_VAR 0 4
33380: PPUSH
33381: CALL_OW 248
33385: PUSH
33386: LD_VAR 0 4
33390: PPUSH
33391: CALL_OW 269
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: ADD
33408: ST_TO_ADDR
33409: GO 33596
// if GetBType ( i ) = b_factory then
33411: LD_VAR 0 4
33415: PPUSH
33416: CALL_OW 266
33420: PUSH
33421: LD_INT 3
33423: EQUAL
33424: IFFALSE 33514
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33426: LD_ADDR_VAR 0 2
33430: PUSH
33431: LD_VAR 0 2
33435: PPUSH
33436: LD_INT 1
33438: PPUSH
33439: LD_VAR 0 4
33443: PPUSH
33444: CALL_OW 266
33448: PUSH
33449: LD_VAR 0 4
33453: PPUSH
33454: CALL_OW 250
33458: PUSH
33459: LD_VAR 0 4
33463: PPUSH
33464: CALL_OW 251
33468: PUSH
33469: LD_VAR 0 4
33473: PPUSH
33474: CALL_OW 254
33478: PUSH
33479: LD_VAR 0 4
33483: PPUSH
33484: CALL_OW 267
33488: PUSH
33489: LD_VAR 0 4
33493: PPUSH
33494: CALL_OW 248
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: PPUSH
33507: CALL_OW 2
33511: ST_TO_ADDR
33512: GO 33596
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33514: LD_ADDR_VAR 0 2
33518: PUSH
33519: LD_VAR 0 2
33523: PUSH
33524: LD_VAR 0 4
33528: PPUSH
33529: CALL_OW 266
33533: PUSH
33534: LD_VAR 0 4
33538: PPUSH
33539: CALL_OW 250
33543: PUSH
33544: LD_VAR 0 4
33548: PPUSH
33549: CALL_OW 251
33553: PUSH
33554: LD_VAR 0 4
33558: PPUSH
33559: CALL_OW 254
33563: PUSH
33564: LD_VAR 0 4
33568: PPUSH
33569: CALL_OW 267
33573: PUSH
33574: LD_VAR 0 4
33578: PPUSH
33579: CALL_OW 248
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: ADD
33595: ST_TO_ADDR
// end ;
33596: GO 33145
33598: POP
33599: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33600: LD_VAR 0 2
33604: PPUSH
33605: LD_STRING 10_EpsilonBase
33607: PPUSH
33608: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33612: LD_INT 34
33614: PPUSH
33615: CALL_OW 353
33619: PPUSH
33620: LD_STRING 10_EpsilonEnv
33622: PPUSH
33623: CALL_OW 39
// end ; end_of_file
33627: LD_VAR 0 1
33631: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33632: LD_EXP 7
33636: IFFALSE 33759
33638: GO 33640
33640: DISABLE
33641: LD_INT 0
33643: PPUSH
33644: PPUSH
// begin enable ;
33645: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33646: LD_INT 35
33648: PPUSH
33649: LD_INT 385
33651: PPUSH
33652: CALL_OW 12
33656: PPUSH
33657: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33661: LD_ADDR_VAR 0 2
33665: PUSH
33666: LD_INT 13
33668: PUSH
33669: LD_INT 14
33671: PUSH
33672: LD_INT 15
33674: PUSH
33675: LD_INT 16
33677: PUSH
33678: LD_INT 17
33680: PUSH
33681: LD_INT 38
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33692: LD_ADDR_VAR 0 1
33696: PUSH
33697: LD_VAR 0 2
33701: PUSH
33702: LD_INT 1
33704: PPUSH
33705: LD_VAR 0 2
33709: PPUSH
33710: CALL 57256 0 1
33714: PPUSH
33715: CALL_OW 12
33719: ARRAY
33720: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
33721: LD_VAR 0 1
33725: PPUSH
33726: CALL_OW 435
33730: PUSH
33731: LD_INT 8
33733: LESS
33734: IFFALSE 33759
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
33736: LD_INT 1
33738: PPUSH
33739: LD_INT 5
33741: PPUSH
33742: CALL_OW 12
33746: PPUSH
33747: LD_VAR 0 1
33751: PPUSH
33752: LD_INT 1
33754: PPUSH
33755: CALL_OW 55
// end ;
33759: PPOPN 2
33761: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
33762: LD_OWVAR 1
33766: PUSH
33767: LD_INT 10500
33769: LESS
33770: PUSH
33771: LD_EXP 9
33775: AND
33776: IFFALSE 33803
33778: GO 33780
33780: DISABLE
// begin enable ;
33781: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
33782: LD_INT 1
33784: PPUSH
33785: LD_INT 5
33787: PPUSH
33788: CALL_OW 12
33792: PPUSH
33793: LD_INT 15
33795: PPUSH
33796: LD_INT 1
33798: PPUSH
33799: CALL_OW 55
// end ;
33803: END
// every 0 0$55 trigger ruBase do
33804: LD_EXP 68
33808: IFFALSE 33852
33810: GO 33812
33812: DISABLE
// begin enable ;
33813: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
33814: LD_EXP 84
33818: PPUSH
33819: CALL_OW 435
33823: PUSH
33824: LD_INT 3
33826: LESS
33827: IFFALSE 33852
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
33829: LD_INT 1
33831: PPUSH
33832: LD_INT 5
33834: PPUSH
33835: CALL_OW 12
33839: PPUSH
33840: LD_EXP 84
33844: PPUSH
33845: LD_INT 1
33847: PPUSH
33848: CALL_OW 55
// end ;
33852: END
// every 1 1$05 trigger ruBase2 do
33853: LD_EXP 69
33857: IFFALSE 33901
33859: GO 33861
33861: DISABLE
// begin enable ;
33862: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
33863: LD_EXP 85
33867: PPUSH
33868: CALL_OW 435
33872: PUSH
33873: LD_INT 3
33875: LESS
33876: IFFALSE 33901
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
33878: LD_INT 1
33880: PPUSH
33881: LD_INT 5
33883: PPUSH
33884: CALL_OW 12
33888: PPUSH
33889: LD_EXP 85
33893: PPUSH
33894: LD_INT 1
33896: PPUSH
33897: CALL_OW 55
// end ; end_of_file end_of_file
33901: END
// export globalGameSaveCounter ; every 0 0$1 do
33902: GO 33904
33904: DISABLE
// begin enable ;
33905: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
33906: LD_STRING updateTimer(
33908: PUSH
33909: LD_OWVAR 1
33913: STR
33914: PUSH
33915: LD_STRING );
33917: STR
33918: PPUSH
33919: CALL_OW 559
// end ;
33923: END
// every 0 0$1 do
33924: GO 33926
33926: DISABLE
// begin globalGameSaveCounter := 0 ;
33927: LD_ADDR_EXP 86
33931: PUSH
33932: LD_INT 0
33934: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
33935: LD_STRING setGameSaveCounter(0)
33937: PPUSH
33938: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
33942: LD_STRING initStreamRollete();
33944: PPUSH
33945: CALL_OW 559
// InitStreamMode ;
33949: CALL 35292 0 0
// DefineStreamItems ( false ) ;
33953: LD_INT 0
33955: PPUSH
33956: CALL 35756 0 1
// end ;
33960: END
// export function SOS_MapStart ( ) ; begin
33961: LD_INT 0
33963: PPUSH
// if streamModeActive then
33964: LD_EXP 87
33968: IFFALSE 33977
// DefineStreamItems ( true ) ;
33970: LD_INT 1
33972: PPUSH
33973: CALL 35756 0 1
// UpdateLuaVariables ( ) ;
33977: CALL 33994 0 0
// UpdateFactoryWaypoints ( ) ;
33981: CALL 48758 0 0
// UpdateWarehouseGatheringPoints ( ) ;
33985: CALL 49010 0 0
// end ;
33989: LD_VAR 0 1
33993: RET
// function UpdateLuaVariables ( ) ; begin
33994: LD_INT 0
33996: PPUSH
// if globalGameSaveCounter then
33997: LD_EXP 86
34001: IFFALSE 34035
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34003: LD_ADDR_EXP 86
34007: PUSH
34008: LD_EXP 86
34012: PPUSH
34013: CALL 94226 0 1
34017: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34018: LD_STRING setGameSaveCounter(
34020: PUSH
34021: LD_EXP 86
34025: STR
34026: PUSH
34027: LD_STRING )
34029: STR
34030: PPUSH
34031: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34035: LD_STRING setGameDifficulty(
34037: PUSH
34038: LD_OWVAR 67
34042: STR
34043: PUSH
34044: LD_STRING )
34046: STR
34047: PPUSH
34048: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
34052: LD_STRING displayDifficulty(
34054: PUSH
34055: LD_OWVAR 67
34059: STR
34060: PUSH
34061: LD_STRING )
34063: STR
34064: PPUSH
34065: CALL_OW 559
// end ;
34069: LD_VAR 0 1
34073: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34074: LD_INT 0
34076: PPUSH
// if p2 = stream_mode then
34077: LD_VAR 0 2
34081: PUSH
34082: LD_INT 100
34084: EQUAL
34085: IFFALSE 35088
// begin if not StreamModeActive then
34087: LD_EXP 87
34091: NOT
34092: IFFALSE 34102
// StreamModeActive := true ;
34094: LD_ADDR_EXP 87
34098: PUSH
34099: LD_INT 1
34101: ST_TO_ADDR
// if p3 = 0 then
34102: LD_VAR 0 3
34106: PUSH
34107: LD_INT 0
34109: EQUAL
34110: IFFALSE 34116
// InitStreamMode ;
34112: CALL 35292 0 0
// if p3 = 1 then
34116: LD_VAR 0 3
34120: PUSH
34121: LD_INT 1
34123: EQUAL
34124: IFFALSE 34134
// sRocket := true ;
34126: LD_ADDR_EXP 92
34130: PUSH
34131: LD_INT 1
34133: ST_TO_ADDR
// if p3 = 2 then
34134: LD_VAR 0 3
34138: PUSH
34139: LD_INT 2
34141: EQUAL
34142: IFFALSE 34152
// sSpeed := true ;
34144: LD_ADDR_EXP 91
34148: PUSH
34149: LD_INT 1
34151: ST_TO_ADDR
// if p3 = 3 then
34152: LD_VAR 0 3
34156: PUSH
34157: LD_INT 3
34159: EQUAL
34160: IFFALSE 34170
// sEngine := true ;
34162: LD_ADDR_EXP 93
34166: PUSH
34167: LD_INT 1
34169: ST_TO_ADDR
// if p3 = 4 then
34170: LD_VAR 0 3
34174: PUSH
34175: LD_INT 4
34177: EQUAL
34178: IFFALSE 34188
// sSpec := true ;
34180: LD_ADDR_EXP 90
34184: PUSH
34185: LD_INT 1
34187: ST_TO_ADDR
// if p3 = 5 then
34188: LD_VAR 0 3
34192: PUSH
34193: LD_INT 5
34195: EQUAL
34196: IFFALSE 34206
// sLevel := true ;
34198: LD_ADDR_EXP 94
34202: PUSH
34203: LD_INT 1
34205: ST_TO_ADDR
// if p3 = 6 then
34206: LD_VAR 0 3
34210: PUSH
34211: LD_INT 6
34213: EQUAL
34214: IFFALSE 34224
// sArmoury := true ;
34216: LD_ADDR_EXP 95
34220: PUSH
34221: LD_INT 1
34223: ST_TO_ADDR
// if p3 = 7 then
34224: LD_VAR 0 3
34228: PUSH
34229: LD_INT 7
34231: EQUAL
34232: IFFALSE 34242
// sRadar := true ;
34234: LD_ADDR_EXP 96
34238: PUSH
34239: LD_INT 1
34241: ST_TO_ADDR
// if p3 = 8 then
34242: LD_VAR 0 3
34246: PUSH
34247: LD_INT 8
34249: EQUAL
34250: IFFALSE 34260
// sBunker := true ;
34252: LD_ADDR_EXP 97
34256: PUSH
34257: LD_INT 1
34259: ST_TO_ADDR
// if p3 = 9 then
34260: LD_VAR 0 3
34264: PUSH
34265: LD_INT 9
34267: EQUAL
34268: IFFALSE 34278
// sHack := true ;
34270: LD_ADDR_EXP 98
34274: PUSH
34275: LD_INT 1
34277: ST_TO_ADDR
// if p3 = 10 then
34278: LD_VAR 0 3
34282: PUSH
34283: LD_INT 10
34285: EQUAL
34286: IFFALSE 34296
// sFire := true ;
34288: LD_ADDR_EXP 99
34292: PUSH
34293: LD_INT 1
34295: ST_TO_ADDR
// if p3 = 11 then
34296: LD_VAR 0 3
34300: PUSH
34301: LD_INT 11
34303: EQUAL
34304: IFFALSE 34314
// sRefresh := true ;
34306: LD_ADDR_EXP 100
34310: PUSH
34311: LD_INT 1
34313: ST_TO_ADDR
// if p3 = 12 then
34314: LD_VAR 0 3
34318: PUSH
34319: LD_INT 12
34321: EQUAL
34322: IFFALSE 34332
// sExp := true ;
34324: LD_ADDR_EXP 101
34328: PUSH
34329: LD_INT 1
34331: ST_TO_ADDR
// if p3 = 13 then
34332: LD_VAR 0 3
34336: PUSH
34337: LD_INT 13
34339: EQUAL
34340: IFFALSE 34350
// sDepot := true ;
34342: LD_ADDR_EXP 102
34346: PUSH
34347: LD_INT 1
34349: ST_TO_ADDR
// if p3 = 14 then
34350: LD_VAR 0 3
34354: PUSH
34355: LD_INT 14
34357: EQUAL
34358: IFFALSE 34368
// sFlag := true ;
34360: LD_ADDR_EXP 103
34364: PUSH
34365: LD_INT 1
34367: ST_TO_ADDR
// if p3 = 15 then
34368: LD_VAR 0 3
34372: PUSH
34373: LD_INT 15
34375: EQUAL
34376: IFFALSE 34386
// sKamikadze := true ;
34378: LD_ADDR_EXP 111
34382: PUSH
34383: LD_INT 1
34385: ST_TO_ADDR
// if p3 = 16 then
34386: LD_VAR 0 3
34390: PUSH
34391: LD_INT 16
34393: EQUAL
34394: IFFALSE 34404
// sTroll := true ;
34396: LD_ADDR_EXP 112
34400: PUSH
34401: LD_INT 1
34403: ST_TO_ADDR
// if p3 = 17 then
34404: LD_VAR 0 3
34408: PUSH
34409: LD_INT 17
34411: EQUAL
34412: IFFALSE 34422
// sSlow := true ;
34414: LD_ADDR_EXP 113
34418: PUSH
34419: LD_INT 1
34421: ST_TO_ADDR
// if p3 = 18 then
34422: LD_VAR 0 3
34426: PUSH
34427: LD_INT 18
34429: EQUAL
34430: IFFALSE 34440
// sLack := true ;
34432: LD_ADDR_EXP 114
34436: PUSH
34437: LD_INT 1
34439: ST_TO_ADDR
// if p3 = 19 then
34440: LD_VAR 0 3
34444: PUSH
34445: LD_INT 19
34447: EQUAL
34448: IFFALSE 34458
// sTank := true ;
34450: LD_ADDR_EXP 116
34454: PUSH
34455: LD_INT 1
34457: ST_TO_ADDR
// if p3 = 20 then
34458: LD_VAR 0 3
34462: PUSH
34463: LD_INT 20
34465: EQUAL
34466: IFFALSE 34476
// sRemote := true ;
34468: LD_ADDR_EXP 117
34472: PUSH
34473: LD_INT 1
34475: ST_TO_ADDR
// if p3 = 21 then
34476: LD_VAR 0 3
34480: PUSH
34481: LD_INT 21
34483: EQUAL
34484: IFFALSE 34494
// sPowell := true ;
34486: LD_ADDR_EXP 118
34490: PUSH
34491: LD_INT 1
34493: ST_TO_ADDR
// if p3 = 22 then
34494: LD_VAR 0 3
34498: PUSH
34499: LD_INT 22
34501: EQUAL
34502: IFFALSE 34512
// sTeleport := true ;
34504: LD_ADDR_EXP 121
34508: PUSH
34509: LD_INT 1
34511: ST_TO_ADDR
// if p3 = 23 then
34512: LD_VAR 0 3
34516: PUSH
34517: LD_INT 23
34519: EQUAL
34520: IFFALSE 34530
// sOilTower := true ;
34522: LD_ADDR_EXP 123
34526: PUSH
34527: LD_INT 1
34529: ST_TO_ADDR
// if p3 = 24 then
34530: LD_VAR 0 3
34534: PUSH
34535: LD_INT 24
34537: EQUAL
34538: IFFALSE 34548
// sShovel := true ;
34540: LD_ADDR_EXP 124
34544: PUSH
34545: LD_INT 1
34547: ST_TO_ADDR
// if p3 = 25 then
34548: LD_VAR 0 3
34552: PUSH
34553: LD_INT 25
34555: EQUAL
34556: IFFALSE 34566
// sSheik := true ;
34558: LD_ADDR_EXP 125
34562: PUSH
34563: LD_INT 1
34565: ST_TO_ADDR
// if p3 = 26 then
34566: LD_VAR 0 3
34570: PUSH
34571: LD_INT 26
34573: EQUAL
34574: IFFALSE 34584
// sEarthquake := true ;
34576: LD_ADDR_EXP 127
34580: PUSH
34581: LD_INT 1
34583: ST_TO_ADDR
// if p3 = 27 then
34584: LD_VAR 0 3
34588: PUSH
34589: LD_INT 27
34591: EQUAL
34592: IFFALSE 34602
// sAI := true ;
34594: LD_ADDR_EXP 128
34598: PUSH
34599: LD_INT 1
34601: ST_TO_ADDR
// if p3 = 28 then
34602: LD_VAR 0 3
34606: PUSH
34607: LD_INT 28
34609: EQUAL
34610: IFFALSE 34620
// sCargo := true ;
34612: LD_ADDR_EXP 131
34616: PUSH
34617: LD_INT 1
34619: ST_TO_ADDR
// if p3 = 29 then
34620: LD_VAR 0 3
34624: PUSH
34625: LD_INT 29
34627: EQUAL
34628: IFFALSE 34638
// sDLaser := true ;
34630: LD_ADDR_EXP 132
34634: PUSH
34635: LD_INT 1
34637: ST_TO_ADDR
// if p3 = 30 then
34638: LD_VAR 0 3
34642: PUSH
34643: LD_INT 30
34645: EQUAL
34646: IFFALSE 34656
// sExchange := true ;
34648: LD_ADDR_EXP 133
34652: PUSH
34653: LD_INT 1
34655: ST_TO_ADDR
// if p3 = 31 then
34656: LD_VAR 0 3
34660: PUSH
34661: LD_INT 31
34663: EQUAL
34664: IFFALSE 34674
// sFac := true ;
34666: LD_ADDR_EXP 134
34670: PUSH
34671: LD_INT 1
34673: ST_TO_ADDR
// if p3 = 32 then
34674: LD_VAR 0 3
34678: PUSH
34679: LD_INT 32
34681: EQUAL
34682: IFFALSE 34692
// sPower := true ;
34684: LD_ADDR_EXP 135
34688: PUSH
34689: LD_INT 1
34691: ST_TO_ADDR
// if p3 = 33 then
34692: LD_VAR 0 3
34696: PUSH
34697: LD_INT 33
34699: EQUAL
34700: IFFALSE 34710
// sRandom := true ;
34702: LD_ADDR_EXP 136
34706: PUSH
34707: LD_INT 1
34709: ST_TO_ADDR
// if p3 = 34 then
34710: LD_VAR 0 3
34714: PUSH
34715: LD_INT 34
34717: EQUAL
34718: IFFALSE 34728
// sShield := true ;
34720: LD_ADDR_EXP 137
34724: PUSH
34725: LD_INT 1
34727: ST_TO_ADDR
// if p3 = 35 then
34728: LD_VAR 0 3
34732: PUSH
34733: LD_INT 35
34735: EQUAL
34736: IFFALSE 34746
// sTime := true ;
34738: LD_ADDR_EXP 138
34742: PUSH
34743: LD_INT 1
34745: ST_TO_ADDR
// if p3 = 36 then
34746: LD_VAR 0 3
34750: PUSH
34751: LD_INT 36
34753: EQUAL
34754: IFFALSE 34764
// sTools := true ;
34756: LD_ADDR_EXP 139
34760: PUSH
34761: LD_INT 1
34763: ST_TO_ADDR
// if p3 = 101 then
34764: LD_VAR 0 3
34768: PUSH
34769: LD_INT 101
34771: EQUAL
34772: IFFALSE 34782
// sSold := true ;
34774: LD_ADDR_EXP 104
34778: PUSH
34779: LD_INT 1
34781: ST_TO_ADDR
// if p3 = 102 then
34782: LD_VAR 0 3
34786: PUSH
34787: LD_INT 102
34789: EQUAL
34790: IFFALSE 34800
// sDiff := true ;
34792: LD_ADDR_EXP 105
34796: PUSH
34797: LD_INT 1
34799: ST_TO_ADDR
// if p3 = 103 then
34800: LD_VAR 0 3
34804: PUSH
34805: LD_INT 103
34807: EQUAL
34808: IFFALSE 34818
// sFog := true ;
34810: LD_ADDR_EXP 108
34814: PUSH
34815: LD_INT 1
34817: ST_TO_ADDR
// if p3 = 104 then
34818: LD_VAR 0 3
34822: PUSH
34823: LD_INT 104
34825: EQUAL
34826: IFFALSE 34836
// sReset := true ;
34828: LD_ADDR_EXP 109
34832: PUSH
34833: LD_INT 1
34835: ST_TO_ADDR
// if p3 = 105 then
34836: LD_VAR 0 3
34840: PUSH
34841: LD_INT 105
34843: EQUAL
34844: IFFALSE 34854
// sSun := true ;
34846: LD_ADDR_EXP 110
34850: PUSH
34851: LD_INT 1
34853: ST_TO_ADDR
// if p3 = 106 then
34854: LD_VAR 0 3
34858: PUSH
34859: LD_INT 106
34861: EQUAL
34862: IFFALSE 34872
// sTiger := true ;
34864: LD_ADDR_EXP 106
34868: PUSH
34869: LD_INT 1
34871: ST_TO_ADDR
// if p3 = 107 then
34872: LD_VAR 0 3
34876: PUSH
34877: LD_INT 107
34879: EQUAL
34880: IFFALSE 34890
// sBomb := true ;
34882: LD_ADDR_EXP 107
34886: PUSH
34887: LD_INT 1
34889: ST_TO_ADDR
// if p3 = 108 then
34890: LD_VAR 0 3
34894: PUSH
34895: LD_INT 108
34897: EQUAL
34898: IFFALSE 34908
// sWound := true ;
34900: LD_ADDR_EXP 115
34904: PUSH
34905: LD_INT 1
34907: ST_TO_ADDR
// if p3 = 109 then
34908: LD_VAR 0 3
34912: PUSH
34913: LD_INT 109
34915: EQUAL
34916: IFFALSE 34926
// sBetray := true ;
34918: LD_ADDR_EXP 119
34922: PUSH
34923: LD_INT 1
34925: ST_TO_ADDR
// if p3 = 110 then
34926: LD_VAR 0 3
34930: PUSH
34931: LD_INT 110
34933: EQUAL
34934: IFFALSE 34944
// sContamin := true ;
34936: LD_ADDR_EXP 120
34940: PUSH
34941: LD_INT 1
34943: ST_TO_ADDR
// if p3 = 111 then
34944: LD_VAR 0 3
34948: PUSH
34949: LD_INT 111
34951: EQUAL
34952: IFFALSE 34962
// sOil := true ;
34954: LD_ADDR_EXP 122
34958: PUSH
34959: LD_INT 1
34961: ST_TO_ADDR
// if p3 = 112 then
34962: LD_VAR 0 3
34966: PUSH
34967: LD_INT 112
34969: EQUAL
34970: IFFALSE 34980
// sStu := true ;
34972: LD_ADDR_EXP 126
34976: PUSH
34977: LD_INT 1
34979: ST_TO_ADDR
// if p3 = 113 then
34980: LD_VAR 0 3
34984: PUSH
34985: LD_INT 113
34987: EQUAL
34988: IFFALSE 34998
// sBazooka := true ;
34990: LD_ADDR_EXP 129
34994: PUSH
34995: LD_INT 1
34997: ST_TO_ADDR
// if p3 = 114 then
34998: LD_VAR 0 3
35002: PUSH
35003: LD_INT 114
35005: EQUAL
35006: IFFALSE 35016
// sMortar := true ;
35008: LD_ADDR_EXP 130
35012: PUSH
35013: LD_INT 1
35015: ST_TO_ADDR
// if p3 = 115 then
35016: LD_VAR 0 3
35020: PUSH
35021: LD_INT 115
35023: EQUAL
35024: IFFALSE 35034
// sRanger := true ;
35026: LD_ADDR_EXP 140
35030: PUSH
35031: LD_INT 1
35033: ST_TO_ADDR
// if p3 = 116 then
35034: LD_VAR 0 3
35038: PUSH
35039: LD_INT 116
35041: EQUAL
35042: IFFALSE 35052
// sComputer := true ;
35044: LD_ADDR_EXP 141
35048: PUSH
35049: LD_INT 1
35051: ST_TO_ADDR
// if p3 = 117 then
35052: LD_VAR 0 3
35056: PUSH
35057: LD_INT 117
35059: EQUAL
35060: IFFALSE 35070
// s30 := true ;
35062: LD_ADDR_EXP 142
35066: PUSH
35067: LD_INT 1
35069: ST_TO_ADDR
// if p3 = 118 then
35070: LD_VAR 0 3
35074: PUSH
35075: LD_INT 118
35077: EQUAL
35078: IFFALSE 35088
// s60 := true ;
35080: LD_ADDR_EXP 143
35084: PUSH
35085: LD_INT 1
35087: ST_TO_ADDR
// end ; if p2 = hack_mode then
35088: LD_VAR 0 2
35092: PUSH
35093: LD_INT 101
35095: EQUAL
35096: IFFALSE 35224
// begin case p3 of 1 :
35098: LD_VAR 0 3
35102: PUSH
35103: LD_INT 1
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35111
35109: GO 35118
35111: POP
// hHackUnlimitedResources ; 2 :
35112: CALL 47371 0 0
35116: GO 35224
35118: LD_INT 2
35120: DOUBLE
35121: EQUAL
35122: IFTRUE 35126
35124: GO 35133
35126: POP
// hHackSetLevel10 ; 3 :
35127: CALL 47504 0 0
35131: GO 35224
35133: LD_INT 3
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35141
35139: GO 35148
35141: POP
// hHackSetLevel10YourUnits ; 4 :
35142: CALL 47589 0 0
35146: GO 35224
35148: LD_INT 4
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35163
35156: POP
// hHackInvincible ; 5 :
35157: CALL 48037 0 0
35161: GO 35224
35163: LD_INT 5
35165: DOUBLE
35166: EQUAL
35167: IFTRUE 35171
35169: GO 35178
35171: POP
// hHackInvisible ; 6 :
35172: CALL 48148 0 0
35176: GO 35224
35178: LD_INT 6
35180: DOUBLE
35181: EQUAL
35182: IFTRUE 35186
35184: GO 35193
35186: POP
// hHackChangeYourSide ; 7 :
35187: CALL 48205 0 0
35191: GO 35224
35193: LD_INT 7
35195: DOUBLE
35196: EQUAL
35197: IFTRUE 35201
35199: GO 35208
35201: POP
// hHackChangeUnitSide ; 8 :
35202: CALL 48247 0 0
35206: GO 35224
35208: LD_INT 8
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35223
35216: POP
// hHackFog ; end ;
35217: CALL 48348 0 0
35221: GO 35224
35223: POP
// end ; if p2 = game_save_mode then
35224: LD_VAR 0 2
35228: PUSH
35229: LD_INT 102
35231: EQUAL
35232: IFFALSE 35287
// begin if p3 = 1 then
35234: LD_VAR 0 3
35238: PUSH
35239: LD_INT 1
35241: EQUAL
35242: IFFALSE 35254
// globalGameSaveCounter := p4 ;
35244: LD_ADDR_EXP 86
35248: PUSH
35249: LD_VAR 0 4
35253: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35254: LD_VAR 0 3
35258: PUSH
35259: LD_INT 2
35261: EQUAL
35262: PUSH
35263: LD_EXP 86
35267: AND
35268: IFFALSE 35287
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35270: LD_STRING setGameSaveCounter(
35272: PUSH
35273: LD_EXP 86
35277: STR
35278: PUSH
35279: LD_STRING )
35281: STR
35282: PPUSH
35283: CALL_OW 559
// end ; end ;
35287: LD_VAR 0 7
35291: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35292: LD_INT 0
35294: PPUSH
// streamModeActive := false ;
35295: LD_ADDR_EXP 87
35299: PUSH
35300: LD_INT 0
35302: ST_TO_ADDR
// normalCounter := 36 ;
35303: LD_ADDR_EXP 88
35307: PUSH
35308: LD_INT 36
35310: ST_TO_ADDR
// hardcoreCounter := 18 ;
35311: LD_ADDR_EXP 89
35315: PUSH
35316: LD_INT 18
35318: ST_TO_ADDR
// sRocket := false ;
35319: LD_ADDR_EXP 92
35323: PUSH
35324: LD_INT 0
35326: ST_TO_ADDR
// sSpeed := false ;
35327: LD_ADDR_EXP 91
35331: PUSH
35332: LD_INT 0
35334: ST_TO_ADDR
// sEngine := false ;
35335: LD_ADDR_EXP 93
35339: PUSH
35340: LD_INT 0
35342: ST_TO_ADDR
// sSpec := false ;
35343: LD_ADDR_EXP 90
35347: PUSH
35348: LD_INT 0
35350: ST_TO_ADDR
// sLevel := false ;
35351: LD_ADDR_EXP 94
35355: PUSH
35356: LD_INT 0
35358: ST_TO_ADDR
// sArmoury := false ;
35359: LD_ADDR_EXP 95
35363: PUSH
35364: LD_INT 0
35366: ST_TO_ADDR
// sRadar := false ;
35367: LD_ADDR_EXP 96
35371: PUSH
35372: LD_INT 0
35374: ST_TO_ADDR
// sBunker := false ;
35375: LD_ADDR_EXP 97
35379: PUSH
35380: LD_INT 0
35382: ST_TO_ADDR
// sHack := false ;
35383: LD_ADDR_EXP 98
35387: PUSH
35388: LD_INT 0
35390: ST_TO_ADDR
// sFire := false ;
35391: LD_ADDR_EXP 99
35395: PUSH
35396: LD_INT 0
35398: ST_TO_ADDR
// sRefresh := false ;
35399: LD_ADDR_EXP 100
35403: PUSH
35404: LD_INT 0
35406: ST_TO_ADDR
// sExp := false ;
35407: LD_ADDR_EXP 101
35411: PUSH
35412: LD_INT 0
35414: ST_TO_ADDR
// sDepot := false ;
35415: LD_ADDR_EXP 102
35419: PUSH
35420: LD_INT 0
35422: ST_TO_ADDR
// sFlag := false ;
35423: LD_ADDR_EXP 103
35427: PUSH
35428: LD_INT 0
35430: ST_TO_ADDR
// sKamikadze := false ;
35431: LD_ADDR_EXP 111
35435: PUSH
35436: LD_INT 0
35438: ST_TO_ADDR
// sTroll := false ;
35439: LD_ADDR_EXP 112
35443: PUSH
35444: LD_INT 0
35446: ST_TO_ADDR
// sSlow := false ;
35447: LD_ADDR_EXP 113
35451: PUSH
35452: LD_INT 0
35454: ST_TO_ADDR
// sLack := false ;
35455: LD_ADDR_EXP 114
35459: PUSH
35460: LD_INT 0
35462: ST_TO_ADDR
// sTank := false ;
35463: LD_ADDR_EXP 116
35467: PUSH
35468: LD_INT 0
35470: ST_TO_ADDR
// sRemote := false ;
35471: LD_ADDR_EXP 117
35475: PUSH
35476: LD_INT 0
35478: ST_TO_ADDR
// sPowell := false ;
35479: LD_ADDR_EXP 118
35483: PUSH
35484: LD_INT 0
35486: ST_TO_ADDR
// sTeleport := false ;
35487: LD_ADDR_EXP 121
35491: PUSH
35492: LD_INT 0
35494: ST_TO_ADDR
// sOilTower := false ;
35495: LD_ADDR_EXP 123
35499: PUSH
35500: LD_INT 0
35502: ST_TO_ADDR
// sShovel := false ;
35503: LD_ADDR_EXP 124
35507: PUSH
35508: LD_INT 0
35510: ST_TO_ADDR
// sSheik := false ;
35511: LD_ADDR_EXP 125
35515: PUSH
35516: LD_INT 0
35518: ST_TO_ADDR
// sEarthquake := false ;
35519: LD_ADDR_EXP 127
35523: PUSH
35524: LD_INT 0
35526: ST_TO_ADDR
// sAI := false ;
35527: LD_ADDR_EXP 128
35531: PUSH
35532: LD_INT 0
35534: ST_TO_ADDR
// sCargo := false ;
35535: LD_ADDR_EXP 131
35539: PUSH
35540: LD_INT 0
35542: ST_TO_ADDR
// sDLaser := false ;
35543: LD_ADDR_EXP 132
35547: PUSH
35548: LD_INT 0
35550: ST_TO_ADDR
// sExchange := false ;
35551: LD_ADDR_EXP 133
35555: PUSH
35556: LD_INT 0
35558: ST_TO_ADDR
// sFac := false ;
35559: LD_ADDR_EXP 134
35563: PUSH
35564: LD_INT 0
35566: ST_TO_ADDR
// sPower := false ;
35567: LD_ADDR_EXP 135
35571: PUSH
35572: LD_INT 0
35574: ST_TO_ADDR
// sRandom := false ;
35575: LD_ADDR_EXP 136
35579: PUSH
35580: LD_INT 0
35582: ST_TO_ADDR
// sShield := false ;
35583: LD_ADDR_EXP 137
35587: PUSH
35588: LD_INT 0
35590: ST_TO_ADDR
// sTime := false ;
35591: LD_ADDR_EXP 138
35595: PUSH
35596: LD_INT 0
35598: ST_TO_ADDR
// sTools := false ;
35599: LD_ADDR_EXP 139
35603: PUSH
35604: LD_INT 0
35606: ST_TO_ADDR
// sSold := false ;
35607: LD_ADDR_EXP 104
35611: PUSH
35612: LD_INT 0
35614: ST_TO_ADDR
// sDiff := false ;
35615: LD_ADDR_EXP 105
35619: PUSH
35620: LD_INT 0
35622: ST_TO_ADDR
// sFog := false ;
35623: LD_ADDR_EXP 108
35627: PUSH
35628: LD_INT 0
35630: ST_TO_ADDR
// sReset := false ;
35631: LD_ADDR_EXP 109
35635: PUSH
35636: LD_INT 0
35638: ST_TO_ADDR
// sSun := false ;
35639: LD_ADDR_EXP 110
35643: PUSH
35644: LD_INT 0
35646: ST_TO_ADDR
// sTiger := false ;
35647: LD_ADDR_EXP 106
35651: PUSH
35652: LD_INT 0
35654: ST_TO_ADDR
// sBomb := false ;
35655: LD_ADDR_EXP 107
35659: PUSH
35660: LD_INT 0
35662: ST_TO_ADDR
// sWound := false ;
35663: LD_ADDR_EXP 115
35667: PUSH
35668: LD_INT 0
35670: ST_TO_ADDR
// sBetray := false ;
35671: LD_ADDR_EXP 119
35675: PUSH
35676: LD_INT 0
35678: ST_TO_ADDR
// sContamin := false ;
35679: LD_ADDR_EXP 120
35683: PUSH
35684: LD_INT 0
35686: ST_TO_ADDR
// sOil := false ;
35687: LD_ADDR_EXP 122
35691: PUSH
35692: LD_INT 0
35694: ST_TO_ADDR
// sStu := false ;
35695: LD_ADDR_EXP 126
35699: PUSH
35700: LD_INT 0
35702: ST_TO_ADDR
// sBazooka := false ;
35703: LD_ADDR_EXP 129
35707: PUSH
35708: LD_INT 0
35710: ST_TO_ADDR
// sMortar := false ;
35711: LD_ADDR_EXP 130
35715: PUSH
35716: LD_INT 0
35718: ST_TO_ADDR
// sRanger := false ;
35719: LD_ADDR_EXP 140
35723: PUSH
35724: LD_INT 0
35726: ST_TO_ADDR
// sComputer := false ;
35727: LD_ADDR_EXP 141
35731: PUSH
35732: LD_INT 0
35734: ST_TO_ADDR
// s30 := false ;
35735: LD_ADDR_EXP 142
35739: PUSH
35740: LD_INT 0
35742: ST_TO_ADDR
// s60 := false ;
35743: LD_ADDR_EXP 143
35747: PUSH
35748: LD_INT 0
35750: ST_TO_ADDR
// end ;
35751: LD_VAR 0 1
35755: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
35756: LD_INT 0
35758: PPUSH
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
35764: PPUSH
// result := [ ] ;
35765: LD_ADDR_VAR 0 2
35769: PUSH
35770: EMPTY
35771: ST_TO_ADDR
// if campaign_id = 1 then
35772: LD_OWVAR 69
35776: PUSH
35777: LD_INT 1
35779: EQUAL
35780: IFFALSE 38946
// begin case mission_number of 1 :
35782: LD_OWVAR 70
35786: PUSH
35787: LD_INT 1
35789: DOUBLE
35790: EQUAL
35791: IFTRUE 35795
35793: GO 35871
35795: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
35796: LD_ADDR_VAR 0 2
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: LD_INT 4
35806: PUSH
35807: LD_INT 11
35809: PUSH
35810: LD_INT 12
35812: PUSH
35813: LD_INT 15
35815: PUSH
35816: LD_INT 16
35818: PUSH
35819: LD_INT 22
35821: PUSH
35822: LD_INT 23
35824: PUSH
35825: LD_INT 26
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 101
35841: PUSH
35842: LD_INT 102
35844: PUSH
35845: LD_INT 106
35847: PUSH
35848: LD_INT 116
35850: PUSH
35851: LD_INT 117
35853: PUSH
35854: LD_INT 118
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: ST_TO_ADDR
35869: GO 38944
35871: LD_INT 2
35873: DOUBLE
35874: EQUAL
35875: IFTRUE 35879
35877: GO 35963
35879: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
35880: LD_ADDR_VAR 0 2
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: LD_INT 4
35890: PUSH
35891: LD_INT 11
35893: PUSH
35894: LD_INT 12
35896: PUSH
35897: LD_INT 15
35899: PUSH
35900: LD_INT 16
35902: PUSH
35903: LD_INT 22
35905: PUSH
35906: LD_INT 23
35908: PUSH
35909: LD_INT 26
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 101
35925: PUSH
35926: LD_INT 102
35928: PUSH
35929: LD_INT 105
35931: PUSH
35932: LD_INT 106
35934: PUSH
35935: LD_INT 108
35937: PUSH
35938: LD_INT 116
35940: PUSH
35941: LD_INT 117
35943: PUSH
35944: LD_INT 118
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: ST_TO_ADDR
35961: GO 38944
35963: LD_INT 3
35965: DOUBLE
35966: EQUAL
35967: IFTRUE 35971
35969: GO 36059
35971: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
35972: LD_ADDR_VAR 0 2
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: LD_INT 4
35982: PUSH
35983: LD_INT 5
35985: PUSH
35986: LD_INT 11
35988: PUSH
35989: LD_INT 12
35991: PUSH
35992: LD_INT 15
35994: PUSH
35995: LD_INT 16
35997: PUSH
35998: LD_INT 22
36000: PUSH
36001: LD_INT 26
36003: PUSH
36004: LD_INT 36
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 101
36021: PUSH
36022: LD_INT 102
36024: PUSH
36025: LD_INT 105
36027: PUSH
36028: LD_INT 106
36030: PUSH
36031: LD_INT 108
36033: PUSH
36034: LD_INT 116
36036: PUSH
36037: LD_INT 117
36039: PUSH
36040: LD_INT 118
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: ST_TO_ADDR
36057: GO 38944
36059: LD_INT 4
36061: DOUBLE
36062: EQUAL
36063: IFTRUE 36067
36065: GO 36163
36067: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36068: LD_ADDR_VAR 0 2
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: LD_INT 4
36078: PUSH
36079: LD_INT 5
36081: PUSH
36082: LD_INT 8
36084: PUSH
36085: LD_INT 11
36087: PUSH
36088: LD_INT 12
36090: PUSH
36091: LD_INT 15
36093: PUSH
36094: LD_INT 16
36096: PUSH
36097: LD_INT 22
36099: PUSH
36100: LD_INT 23
36102: PUSH
36103: LD_INT 26
36105: PUSH
36106: LD_INT 36
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 101
36125: PUSH
36126: LD_INT 102
36128: PUSH
36129: LD_INT 105
36131: PUSH
36132: LD_INT 106
36134: PUSH
36135: LD_INT 108
36137: PUSH
36138: LD_INT 116
36140: PUSH
36141: LD_INT 117
36143: PUSH
36144: LD_INT 118
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: ST_TO_ADDR
36161: GO 38944
36163: LD_INT 5
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36171
36169: GO 36283
36171: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36172: LD_ADDR_VAR 0 2
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: LD_INT 4
36182: PUSH
36183: LD_INT 5
36185: PUSH
36186: LD_INT 6
36188: PUSH
36189: LD_INT 8
36191: PUSH
36192: LD_INT 11
36194: PUSH
36195: LD_INT 12
36197: PUSH
36198: LD_INT 15
36200: PUSH
36201: LD_INT 16
36203: PUSH
36204: LD_INT 22
36206: PUSH
36207: LD_INT 23
36209: PUSH
36210: LD_INT 25
36212: PUSH
36213: LD_INT 26
36215: PUSH
36216: LD_INT 36
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 101
36237: PUSH
36238: LD_INT 102
36240: PUSH
36241: LD_INT 105
36243: PUSH
36244: LD_INT 106
36246: PUSH
36247: LD_INT 108
36249: PUSH
36250: LD_INT 109
36252: PUSH
36253: LD_INT 112
36255: PUSH
36256: LD_INT 116
36258: PUSH
36259: LD_INT 117
36261: PUSH
36262: LD_INT 118
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: ST_TO_ADDR
36281: GO 38944
36283: LD_INT 6
36285: DOUBLE
36286: EQUAL
36287: IFTRUE 36291
36289: GO 36423
36291: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36292: LD_ADDR_VAR 0 2
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: LD_INT 4
36302: PUSH
36303: LD_INT 5
36305: PUSH
36306: LD_INT 6
36308: PUSH
36309: LD_INT 8
36311: PUSH
36312: LD_INT 11
36314: PUSH
36315: LD_INT 12
36317: PUSH
36318: LD_INT 15
36320: PUSH
36321: LD_INT 16
36323: PUSH
36324: LD_INT 20
36326: PUSH
36327: LD_INT 21
36329: PUSH
36330: LD_INT 22
36332: PUSH
36333: LD_INT 23
36335: PUSH
36336: LD_INT 25
36338: PUSH
36339: LD_INT 26
36341: PUSH
36342: LD_INT 30
36344: PUSH
36345: LD_INT 31
36347: PUSH
36348: LD_INT 32
36350: PUSH
36351: LD_INT 36
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 101
36377: PUSH
36378: LD_INT 102
36380: PUSH
36381: LD_INT 105
36383: PUSH
36384: LD_INT 106
36386: PUSH
36387: LD_INT 108
36389: PUSH
36390: LD_INT 109
36392: PUSH
36393: LD_INT 112
36395: PUSH
36396: LD_INT 116
36398: PUSH
36399: LD_INT 117
36401: PUSH
36402: LD_INT 118
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: ST_TO_ADDR
36421: GO 38944
36423: LD_INT 7
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36431
36429: GO 36543
36431: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36432: LD_ADDR_VAR 0 2
36436: PUSH
36437: LD_INT 2
36439: PUSH
36440: LD_INT 4
36442: PUSH
36443: LD_INT 5
36445: PUSH
36446: LD_INT 7
36448: PUSH
36449: LD_INT 11
36451: PUSH
36452: LD_INT 12
36454: PUSH
36455: LD_INT 15
36457: PUSH
36458: LD_INT 16
36460: PUSH
36461: LD_INT 20
36463: PUSH
36464: LD_INT 21
36466: PUSH
36467: LD_INT 22
36469: PUSH
36470: LD_INT 23
36472: PUSH
36473: LD_INT 25
36475: PUSH
36476: LD_INT 26
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 101
36497: PUSH
36498: LD_INT 102
36500: PUSH
36501: LD_INT 103
36503: PUSH
36504: LD_INT 105
36506: PUSH
36507: LD_INT 106
36509: PUSH
36510: LD_INT 108
36512: PUSH
36513: LD_INT 112
36515: PUSH
36516: LD_INT 116
36518: PUSH
36519: LD_INT 117
36521: PUSH
36522: LD_INT 118
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: ST_TO_ADDR
36541: GO 38944
36543: LD_INT 8
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36551
36549: GO 36691
36551: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36552: LD_ADDR_VAR 0 2
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 4
36562: PUSH
36563: LD_INT 5
36565: PUSH
36566: LD_INT 6
36568: PUSH
36569: LD_INT 7
36571: PUSH
36572: LD_INT 8
36574: PUSH
36575: LD_INT 11
36577: PUSH
36578: LD_INT 12
36580: PUSH
36581: LD_INT 15
36583: PUSH
36584: LD_INT 16
36586: PUSH
36587: LD_INT 20
36589: PUSH
36590: LD_INT 21
36592: PUSH
36593: LD_INT 22
36595: PUSH
36596: LD_INT 23
36598: PUSH
36599: LD_INT 25
36601: PUSH
36602: LD_INT 26
36604: PUSH
36605: LD_INT 30
36607: PUSH
36608: LD_INT 31
36610: PUSH
36611: LD_INT 32
36613: PUSH
36614: LD_INT 36
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 101
36641: PUSH
36642: LD_INT 102
36644: PUSH
36645: LD_INT 103
36647: PUSH
36648: LD_INT 105
36650: PUSH
36651: LD_INT 106
36653: PUSH
36654: LD_INT 108
36656: PUSH
36657: LD_INT 109
36659: PUSH
36660: LD_INT 112
36662: PUSH
36663: LD_INT 116
36665: PUSH
36666: LD_INT 117
36668: PUSH
36669: LD_INT 118
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: ST_TO_ADDR
36689: GO 38944
36691: LD_INT 9
36693: DOUBLE
36694: EQUAL
36695: IFTRUE 36699
36697: GO 36847
36699: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
36700: LD_ADDR_VAR 0 2
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: LD_INT 4
36710: PUSH
36711: LD_INT 5
36713: PUSH
36714: LD_INT 6
36716: PUSH
36717: LD_INT 7
36719: PUSH
36720: LD_INT 8
36722: PUSH
36723: LD_INT 11
36725: PUSH
36726: LD_INT 12
36728: PUSH
36729: LD_INT 15
36731: PUSH
36732: LD_INT 16
36734: PUSH
36735: LD_INT 20
36737: PUSH
36738: LD_INT 21
36740: PUSH
36741: LD_INT 22
36743: PUSH
36744: LD_INT 23
36746: PUSH
36747: LD_INT 25
36749: PUSH
36750: LD_INT 26
36752: PUSH
36753: LD_INT 28
36755: PUSH
36756: LD_INT 30
36758: PUSH
36759: LD_INT 31
36761: PUSH
36762: LD_INT 32
36764: PUSH
36765: LD_INT 36
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 101
36793: PUSH
36794: LD_INT 102
36796: PUSH
36797: LD_INT 103
36799: PUSH
36800: LD_INT 105
36802: PUSH
36803: LD_INT 106
36805: PUSH
36806: LD_INT 108
36808: PUSH
36809: LD_INT 109
36811: PUSH
36812: LD_INT 112
36814: PUSH
36815: LD_INT 114
36817: PUSH
36818: LD_INT 116
36820: PUSH
36821: LD_INT 117
36823: PUSH
36824: LD_INT 118
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: ST_TO_ADDR
36845: GO 38944
36847: LD_INT 10
36849: DOUBLE
36850: EQUAL
36851: IFTRUE 36855
36853: GO 37051
36855: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
36856: LD_ADDR_VAR 0 2
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: LD_INT 4
36866: PUSH
36867: LD_INT 5
36869: PUSH
36870: LD_INT 6
36872: PUSH
36873: LD_INT 7
36875: PUSH
36876: LD_INT 8
36878: PUSH
36879: LD_INT 9
36881: PUSH
36882: LD_INT 10
36884: PUSH
36885: LD_INT 11
36887: PUSH
36888: LD_INT 12
36890: PUSH
36891: LD_INT 13
36893: PUSH
36894: LD_INT 14
36896: PUSH
36897: LD_INT 15
36899: PUSH
36900: LD_INT 16
36902: PUSH
36903: LD_INT 17
36905: PUSH
36906: LD_INT 18
36908: PUSH
36909: LD_INT 19
36911: PUSH
36912: LD_INT 20
36914: PUSH
36915: LD_INT 21
36917: PUSH
36918: LD_INT 22
36920: PUSH
36921: LD_INT 23
36923: PUSH
36924: LD_INT 24
36926: PUSH
36927: LD_INT 25
36929: PUSH
36930: LD_INT 26
36932: PUSH
36933: LD_INT 28
36935: PUSH
36936: LD_INT 30
36938: PUSH
36939: LD_INT 31
36941: PUSH
36942: LD_INT 32
36944: PUSH
36945: LD_INT 36
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 101
36981: PUSH
36982: LD_INT 102
36984: PUSH
36985: LD_INT 103
36987: PUSH
36988: LD_INT 104
36990: PUSH
36991: LD_INT 105
36993: PUSH
36994: LD_INT 106
36996: PUSH
36997: LD_INT 107
36999: PUSH
37000: LD_INT 108
37002: PUSH
37003: LD_INT 109
37005: PUSH
37006: LD_INT 110
37008: PUSH
37009: LD_INT 111
37011: PUSH
37012: LD_INT 112
37014: PUSH
37015: LD_INT 114
37017: PUSH
37018: LD_INT 116
37020: PUSH
37021: LD_INT 117
37023: PUSH
37024: LD_INT 118
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: ST_TO_ADDR
37049: GO 38944
37051: LD_INT 11
37053: DOUBLE
37054: EQUAL
37055: IFTRUE 37059
37057: GO 37263
37059: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37060: LD_ADDR_VAR 0 2
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: LD_INT 4
37073: PUSH
37074: LD_INT 5
37076: PUSH
37077: LD_INT 6
37079: PUSH
37080: LD_INT 7
37082: PUSH
37083: LD_INT 8
37085: PUSH
37086: LD_INT 9
37088: PUSH
37089: LD_INT 10
37091: PUSH
37092: LD_INT 11
37094: PUSH
37095: LD_INT 12
37097: PUSH
37098: LD_INT 13
37100: PUSH
37101: LD_INT 14
37103: PUSH
37104: LD_INT 15
37106: PUSH
37107: LD_INT 16
37109: PUSH
37110: LD_INT 17
37112: PUSH
37113: LD_INT 18
37115: PUSH
37116: LD_INT 19
37118: PUSH
37119: LD_INT 20
37121: PUSH
37122: LD_INT 21
37124: PUSH
37125: LD_INT 22
37127: PUSH
37128: LD_INT 23
37130: PUSH
37131: LD_INT 24
37133: PUSH
37134: LD_INT 25
37136: PUSH
37137: LD_INT 26
37139: PUSH
37140: LD_INT 28
37142: PUSH
37143: LD_INT 30
37145: PUSH
37146: LD_INT 31
37148: PUSH
37149: LD_INT 32
37151: PUSH
37152: LD_INT 34
37154: PUSH
37155: LD_INT 36
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 101
37193: PUSH
37194: LD_INT 102
37196: PUSH
37197: LD_INT 103
37199: PUSH
37200: LD_INT 104
37202: PUSH
37203: LD_INT 105
37205: PUSH
37206: LD_INT 106
37208: PUSH
37209: LD_INT 107
37211: PUSH
37212: LD_INT 108
37214: PUSH
37215: LD_INT 109
37217: PUSH
37218: LD_INT 110
37220: PUSH
37221: LD_INT 111
37223: PUSH
37224: LD_INT 112
37226: PUSH
37227: LD_INT 114
37229: PUSH
37230: LD_INT 116
37232: PUSH
37233: LD_INT 117
37235: PUSH
37236: LD_INT 118
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: ST_TO_ADDR
37261: GO 38944
37263: LD_INT 12
37265: DOUBLE
37266: EQUAL
37267: IFTRUE 37271
37269: GO 37491
37271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37272: LD_ADDR_VAR 0 2
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 3
37285: PUSH
37286: LD_INT 4
37288: PUSH
37289: LD_INT 5
37291: PUSH
37292: LD_INT 6
37294: PUSH
37295: LD_INT 7
37297: PUSH
37298: LD_INT 8
37300: PUSH
37301: LD_INT 9
37303: PUSH
37304: LD_INT 10
37306: PUSH
37307: LD_INT 11
37309: PUSH
37310: LD_INT 12
37312: PUSH
37313: LD_INT 13
37315: PUSH
37316: LD_INT 14
37318: PUSH
37319: LD_INT 15
37321: PUSH
37322: LD_INT 16
37324: PUSH
37325: LD_INT 17
37327: PUSH
37328: LD_INT 18
37330: PUSH
37331: LD_INT 19
37333: PUSH
37334: LD_INT 20
37336: PUSH
37337: LD_INT 21
37339: PUSH
37340: LD_INT 22
37342: PUSH
37343: LD_INT 23
37345: PUSH
37346: LD_INT 24
37348: PUSH
37349: LD_INT 25
37351: PUSH
37352: LD_INT 26
37354: PUSH
37355: LD_INT 27
37357: PUSH
37358: LD_INT 28
37360: PUSH
37361: LD_INT 30
37363: PUSH
37364: LD_INT 31
37366: PUSH
37367: LD_INT 32
37369: PUSH
37370: LD_INT 33
37372: PUSH
37373: LD_INT 34
37375: PUSH
37376: LD_INT 36
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 101
37417: PUSH
37418: LD_INT 102
37420: PUSH
37421: LD_INT 103
37423: PUSH
37424: LD_INT 104
37426: PUSH
37427: LD_INT 105
37429: PUSH
37430: LD_INT 106
37432: PUSH
37433: LD_INT 107
37435: PUSH
37436: LD_INT 108
37438: PUSH
37439: LD_INT 109
37441: PUSH
37442: LD_INT 110
37444: PUSH
37445: LD_INT 111
37447: PUSH
37448: LD_INT 112
37450: PUSH
37451: LD_INT 113
37453: PUSH
37454: LD_INT 114
37456: PUSH
37457: LD_INT 116
37459: PUSH
37460: LD_INT 117
37462: PUSH
37463: LD_INT 118
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: ST_TO_ADDR
37489: GO 38944
37491: LD_INT 13
37493: DOUBLE
37494: EQUAL
37495: IFTRUE 37499
37497: GO 37707
37499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37500: LD_ADDR_VAR 0 2
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: LD_INT 4
37516: PUSH
37517: LD_INT 5
37519: PUSH
37520: LD_INT 8
37522: PUSH
37523: LD_INT 9
37525: PUSH
37526: LD_INT 10
37528: PUSH
37529: LD_INT 11
37531: PUSH
37532: LD_INT 12
37534: PUSH
37535: LD_INT 14
37537: PUSH
37538: LD_INT 15
37540: PUSH
37541: LD_INT 16
37543: PUSH
37544: LD_INT 17
37546: PUSH
37547: LD_INT 18
37549: PUSH
37550: LD_INT 19
37552: PUSH
37553: LD_INT 20
37555: PUSH
37556: LD_INT 21
37558: PUSH
37559: LD_INT 22
37561: PUSH
37562: LD_INT 23
37564: PUSH
37565: LD_INT 24
37567: PUSH
37568: LD_INT 25
37570: PUSH
37571: LD_INT 26
37573: PUSH
37574: LD_INT 27
37576: PUSH
37577: LD_INT 28
37579: PUSH
37580: LD_INT 30
37582: PUSH
37583: LD_INT 31
37585: PUSH
37586: LD_INT 32
37588: PUSH
37589: LD_INT 33
37591: PUSH
37592: LD_INT 34
37594: PUSH
37595: LD_INT 36
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 101
37633: PUSH
37634: LD_INT 102
37636: PUSH
37637: LD_INT 103
37639: PUSH
37640: LD_INT 104
37642: PUSH
37643: LD_INT 105
37645: PUSH
37646: LD_INT 106
37648: PUSH
37649: LD_INT 107
37651: PUSH
37652: LD_INT 108
37654: PUSH
37655: LD_INT 109
37657: PUSH
37658: LD_INT 110
37660: PUSH
37661: LD_INT 111
37663: PUSH
37664: LD_INT 112
37666: PUSH
37667: LD_INT 113
37669: PUSH
37670: LD_INT 114
37672: PUSH
37673: LD_INT 116
37675: PUSH
37676: LD_INT 117
37678: PUSH
37679: LD_INT 118
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: ST_TO_ADDR
37705: GO 38944
37707: LD_INT 14
37709: DOUBLE
37710: EQUAL
37711: IFTRUE 37715
37713: GO 37939
37715: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
37716: LD_ADDR_VAR 0 2
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 3
37729: PUSH
37730: LD_INT 4
37732: PUSH
37733: LD_INT 5
37735: PUSH
37736: LD_INT 6
37738: PUSH
37739: LD_INT 7
37741: PUSH
37742: LD_INT 8
37744: PUSH
37745: LD_INT 9
37747: PUSH
37748: LD_INT 10
37750: PUSH
37751: LD_INT 11
37753: PUSH
37754: LD_INT 12
37756: PUSH
37757: LD_INT 13
37759: PUSH
37760: LD_INT 14
37762: PUSH
37763: LD_INT 15
37765: PUSH
37766: LD_INT 16
37768: PUSH
37769: LD_INT 17
37771: PUSH
37772: LD_INT 18
37774: PUSH
37775: LD_INT 19
37777: PUSH
37778: LD_INT 20
37780: PUSH
37781: LD_INT 21
37783: PUSH
37784: LD_INT 22
37786: PUSH
37787: LD_INT 23
37789: PUSH
37790: LD_INT 24
37792: PUSH
37793: LD_INT 25
37795: PUSH
37796: LD_INT 26
37798: PUSH
37799: LD_INT 27
37801: PUSH
37802: LD_INT 28
37804: PUSH
37805: LD_INT 29
37807: PUSH
37808: LD_INT 30
37810: PUSH
37811: LD_INT 31
37813: PUSH
37814: LD_INT 32
37816: PUSH
37817: LD_INT 33
37819: PUSH
37820: LD_INT 34
37822: PUSH
37823: LD_INT 36
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 101
37865: PUSH
37866: LD_INT 102
37868: PUSH
37869: LD_INT 103
37871: PUSH
37872: LD_INT 104
37874: PUSH
37875: LD_INT 105
37877: PUSH
37878: LD_INT 106
37880: PUSH
37881: LD_INT 107
37883: PUSH
37884: LD_INT 108
37886: PUSH
37887: LD_INT 109
37889: PUSH
37890: LD_INT 110
37892: PUSH
37893: LD_INT 111
37895: PUSH
37896: LD_INT 112
37898: PUSH
37899: LD_INT 113
37901: PUSH
37902: LD_INT 114
37904: PUSH
37905: LD_INT 116
37907: PUSH
37908: LD_INT 117
37910: PUSH
37911: LD_INT 118
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: ST_TO_ADDR
37937: GO 38944
37939: LD_INT 15
37941: DOUBLE
37942: EQUAL
37943: IFTRUE 37947
37945: GO 38171
37947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
37948: LD_ADDR_VAR 0 2
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: LD_INT 3
37961: PUSH
37962: LD_INT 4
37964: PUSH
37965: LD_INT 5
37967: PUSH
37968: LD_INT 6
37970: PUSH
37971: LD_INT 7
37973: PUSH
37974: LD_INT 8
37976: PUSH
37977: LD_INT 9
37979: PUSH
37980: LD_INT 10
37982: PUSH
37983: LD_INT 11
37985: PUSH
37986: LD_INT 12
37988: PUSH
37989: LD_INT 13
37991: PUSH
37992: LD_INT 14
37994: PUSH
37995: LD_INT 15
37997: PUSH
37998: LD_INT 16
38000: PUSH
38001: LD_INT 17
38003: PUSH
38004: LD_INT 18
38006: PUSH
38007: LD_INT 19
38009: PUSH
38010: LD_INT 20
38012: PUSH
38013: LD_INT 21
38015: PUSH
38016: LD_INT 22
38018: PUSH
38019: LD_INT 23
38021: PUSH
38022: LD_INT 24
38024: PUSH
38025: LD_INT 25
38027: PUSH
38028: LD_INT 26
38030: PUSH
38031: LD_INT 27
38033: PUSH
38034: LD_INT 28
38036: PUSH
38037: LD_INT 29
38039: PUSH
38040: LD_INT 30
38042: PUSH
38043: LD_INT 31
38045: PUSH
38046: LD_INT 32
38048: PUSH
38049: LD_INT 33
38051: PUSH
38052: LD_INT 34
38054: PUSH
38055: LD_INT 36
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 101
38097: PUSH
38098: LD_INT 102
38100: PUSH
38101: LD_INT 103
38103: PUSH
38104: LD_INT 104
38106: PUSH
38107: LD_INT 105
38109: PUSH
38110: LD_INT 106
38112: PUSH
38113: LD_INT 107
38115: PUSH
38116: LD_INT 108
38118: PUSH
38119: LD_INT 109
38121: PUSH
38122: LD_INT 110
38124: PUSH
38125: LD_INT 111
38127: PUSH
38128: LD_INT 112
38130: PUSH
38131: LD_INT 113
38133: PUSH
38134: LD_INT 114
38136: PUSH
38137: LD_INT 116
38139: PUSH
38140: LD_INT 117
38142: PUSH
38143: LD_INT 118
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: ST_TO_ADDR
38169: GO 38944
38171: LD_INT 16
38173: DOUBLE
38174: EQUAL
38175: IFTRUE 38179
38177: GO 38315
38179: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38180: LD_ADDR_VAR 0 2
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: LD_INT 4
38190: PUSH
38191: LD_INT 5
38193: PUSH
38194: LD_INT 7
38196: PUSH
38197: LD_INT 11
38199: PUSH
38200: LD_INT 12
38202: PUSH
38203: LD_INT 15
38205: PUSH
38206: LD_INT 16
38208: PUSH
38209: LD_INT 20
38211: PUSH
38212: LD_INT 21
38214: PUSH
38215: LD_INT 22
38217: PUSH
38218: LD_INT 23
38220: PUSH
38221: LD_INT 25
38223: PUSH
38224: LD_INT 26
38226: PUSH
38227: LD_INT 30
38229: PUSH
38230: LD_INT 31
38232: PUSH
38233: LD_INT 32
38235: PUSH
38236: LD_INT 33
38238: PUSH
38239: LD_INT 34
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 101
38265: PUSH
38266: LD_INT 102
38268: PUSH
38269: LD_INT 103
38271: PUSH
38272: LD_INT 106
38274: PUSH
38275: LD_INT 108
38277: PUSH
38278: LD_INT 112
38280: PUSH
38281: LD_INT 113
38283: PUSH
38284: LD_INT 114
38286: PUSH
38287: LD_INT 116
38289: PUSH
38290: LD_INT 117
38292: PUSH
38293: LD_INT 118
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: ST_TO_ADDR
38313: GO 38944
38315: LD_INT 17
38317: DOUBLE
38318: EQUAL
38319: IFTRUE 38323
38321: GO 38547
38323: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38324: LD_ADDR_VAR 0 2
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: LD_INT 4
38340: PUSH
38341: LD_INT 5
38343: PUSH
38344: LD_INT 6
38346: PUSH
38347: LD_INT 7
38349: PUSH
38350: LD_INT 8
38352: PUSH
38353: LD_INT 9
38355: PUSH
38356: LD_INT 10
38358: PUSH
38359: LD_INT 11
38361: PUSH
38362: LD_INT 12
38364: PUSH
38365: LD_INT 13
38367: PUSH
38368: LD_INT 14
38370: PUSH
38371: LD_INT 15
38373: PUSH
38374: LD_INT 16
38376: PUSH
38377: LD_INT 17
38379: PUSH
38380: LD_INT 18
38382: PUSH
38383: LD_INT 19
38385: PUSH
38386: LD_INT 20
38388: PUSH
38389: LD_INT 21
38391: PUSH
38392: LD_INT 22
38394: PUSH
38395: LD_INT 23
38397: PUSH
38398: LD_INT 24
38400: PUSH
38401: LD_INT 25
38403: PUSH
38404: LD_INT 26
38406: PUSH
38407: LD_INT 27
38409: PUSH
38410: LD_INT 28
38412: PUSH
38413: LD_INT 29
38415: PUSH
38416: LD_INT 30
38418: PUSH
38419: LD_INT 31
38421: PUSH
38422: LD_INT 32
38424: PUSH
38425: LD_INT 33
38427: PUSH
38428: LD_INT 34
38430: PUSH
38431: LD_INT 36
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 101
38473: PUSH
38474: LD_INT 102
38476: PUSH
38477: LD_INT 103
38479: PUSH
38480: LD_INT 104
38482: PUSH
38483: LD_INT 105
38485: PUSH
38486: LD_INT 106
38488: PUSH
38489: LD_INT 107
38491: PUSH
38492: LD_INT 108
38494: PUSH
38495: LD_INT 109
38497: PUSH
38498: LD_INT 110
38500: PUSH
38501: LD_INT 111
38503: PUSH
38504: LD_INT 112
38506: PUSH
38507: LD_INT 113
38509: PUSH
38510: LD_INT 114
38512: PUSH
38513: LD_INT 116
38515: PUSH
38516: LD_INT 117
38518: PUSH
38519: LD_INT 118
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: ST_TO_ADDR
38545: GO 38944
38547: LD_INT 18
38549: DOUBLE
38550: EQUAL
38551: IFTRUE 38555
38553: GO 38703
38555: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38556: LD_ADDR_VAR 0 2
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 4
38566: PUSH
38567: LD_INT 5
38569: PUSH
38570: LD_INT 7
38572: PUSH
38573: LD_INT 11
38575: PUSH
38576: LD_INT 12
38578: PUSH
38579: LD_INT 15
38581: PUSH
38582: LD_INT 16
38584: PUSH
38585: LD_INT 20
38587: PUSH
38588: LD_INT 21
38590: PUSH
38591: LD_INT 22
38593: PUSH
38594: LD_INT 23
38596: PUSH
38597: LD_INT 25
38599: PUSH
38600: LD_INT 26
38602: PUSH
38603: LD_INT 30
38605: PUSH
38606: LD_INT 31
38608: PUSH
38609: LD_INT 32
38611: PUSH
38612: LD_INT 33
38614: PUSH
38615: LD_INT 34
38617: PUSH
38618: LD_INT 35
38620: PUSH
38621: LD_INT 36
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 101
38649: PUSH
38650: LD_INT 102
38652: PUSH
38653: LD_INT 103
38655: PUSH
38656: LD_INT 106
38658: PUSH
38659: LD_INT 108
38661: PUSH
38662: LD_INT 112
38664: PUSH
38665: LD_INT 113
38667: PUSH
38668: LD_INT 114
38670: PUSH
38671: LD_INT 115
38673: PUSH
38674: LD_INT 116
38676: PUSH
38677: LD_INT 117
38679: PUSH
38680: LD_INT 118
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: ST_TO_ADDR
38701: GO 38944
38703: LD_INT 19
38705: DOUBLE
38706: EQUAL
38707: IFTRUE 38711
38709: GO 38943
38711: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
38712: LD_ADDR_VAR 0 2
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: LD_INT 3
38725: PUSH
38726: LD_INT 4
38728: PUSH
38729: LD_INT 5
38731: PUSH
38732: LD_INT 6
38734: PUSH
38735: LD_INT 7
38737: PUSH
38738: LD_INT 8
38740: PUSH
38741: LD_INT 9
38743: PUSH
38744: LD_INT 10
38746: PUSH
38747: LD_INT 11
38749: PUSH
38750: LD_INT 12
38752: PUSH
38753: LD_INT 13
38755: PUSH
38756: LD_INT 14
38758: PUSH
38759: LD_INT 15
38761: PUSH
38762: LD_INT 16
38764: PUSH
38765: LD_INT 17
38767: PUSH
38768: LD_INT 18
38770: PUSH
38771: LD_INT 19
38773: PUSH
38774: LD_INT 20
38776: PUSH
38777: LD_INT 21
38779: PUSH
38780: LD_INT 22
38782: PUSH
38783: LD_INT 23
38785: PUSH
38786: LD_INT 24
38788: PUSH
38789: LD_INT 25
38791: PUSH
38792: LD_INT 26
38794: PUSH
38795: LD_INT 27
38797: PUSH
38798: LD_INT 28
38800: PUSH
38801: LD_INT 29
38803: PUSH
38804: LD_INT 30
38806: PUSH
38807: LD_INT 31
38809: PUSH
38810: LD_INT 32
38812: PUSH
38813: LD_INT 33
38815: PUSH
38816: LD_INT 34
38818: PUSH
38819: LD_INT 35
38821: PUSH
38822: LD_INT 36
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 101
38865: PUSH
38866: LD_INT 102
38868: PUSH
38869: LD_INT 103
38871: PUSH
38872: LD_INT 104
38874: PUSH
38875: LD_INT 105
38877: PUSH
38878: LD_INT 106
38880: PUSH
38881: LD_INT 107
38883: PUSH
38884: LD_INT 108
38886: PUSH
38887: LD_INT 109
38889: PUSH
38890: LD_INT 110
38892: PUSH
38893: LD_INT 111
38895: PUSH
38896: LD_INT 112
38898: PUSH
38899: LD_INT 113
38901: PUSH
38902: LD_INT 114
38904: PUSH
38905: LD_INT 115
38907: PUSH
38908: LD_INT 116
38910: PUSH
38911: LD_INT 117
38913: PUSH
38914: LD_INT 118
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: ST_TO_ADDR
38941: GO 38944
38943: POP
// end else
38944: GO 39175
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
38946: LD_ADDR_VAR 0 2
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: LD_INT 3
38959: PUSH
38960: LD_INT 4
38962: PUSH
38963: LD_INT 5
38965: PUSH
38966: LD_INT 6
38968: PUSH
38969: LD_INT 7
38971: PUSH
38972: LD_INT 8
38974: PUSH
38975: LD_INT 9
38977: PUSH
38978: LD_INT 10
38980: PUSH
38981: LD_INT 11
38983: PUSH
38984: LD_INT 12
38986: PUSH
38987: LD_INT 13
38989: PUSH
38990: LD_INT 14
38992: PUSH
38993: LD_INT 15
38995: PUSH
38996: LD_INT 16
38998: PUSH
38999: LD_INT 17
39001: PUSH
39002: LD_INT 18
39004: PUSH
39005: LD_INT 19
39007: PUSH
39008: LD_INT 20
39010: PUSH
39011: LD_INT 21
39013: PUSH
39014: LD_INT 22
39016: PUSH
39017: LD_INT 23
39019: PUSH
39020: LD_INT 24
39022: PUSH
39023: LD_INT 25
39025: PUSH
39026: LD_INT 26
39028: PUSH
39029: LD_INT 27
39031: PUSH
39032: LD_INT 28
39034: PUSH
39035: LD_INT 29
39037: PUSH
39038: LD_INT 30
39040: PUSH
39041: LD_INT 31
39043: PUSH
39044: LD_INT 32
39046: PUSH
39047: LD_INT 33
39049: PUSH
39050: LD_INT 34
39052: PUSH
39053: LD_INT 35
39055: PUSH
39056: LD_INT 36
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 101
39099: PUSH
39100: LD_INT 102
39102: PUSH
39103: LD_INT 103
39105: PUSH
39106: LD_INT 104
39108: PUSH
39109: LD_INT 105
39111: PUSH
39112: LD_INT 106
39114: PUSH
39115: LD_INT 107
39117: PUSH
39118: LD_INT 108
39120: PUSH
39121: LD_INT 109
39123: PUSH
39124: LD_INT 110
39126: PUSH
39127: LD_INT 111
39129: PUSH
39130: LD_INT 112
39132: PUSH
39133: LD_INT 113
39135: PUSH
39136: LD_INT 114
39138: PUSH
39139: LD_INT 115
39141: PUSH
39142: LD_INT 116
39144: PUSH
39145: LD_INT 117
39147: PUSH
39148: LD_INT 118
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: ST_TO_ADDR
// if result then
39175: LD_VAR 0 2
39179: IFFALSE 39965
// begin normal :=  ;
39181: LD_ADDR_VAR 0 5
39185: PUSH
39186: LD_STRING 
39188: ST_TO_ADDR
// hardcore :=  ;
39189: LD_ADDR_VAR 0 6
39193: PUSH
39194: LD_STRING 
39196: ST_TO_ADDR
// active :=  ;
39197: LD_ADDR_VAR 0 7
39201: PUSH
39202: LD_STRING 
39204: ST_TO_ADDR
// for i = 1 to normalCounter do
39205: LD_ADDR_VAR 0 8
39209: PUSH
39210: DOUBLE
39211: LD_INT 1
39213: DEC
39214: ST_TO_ADDR
39215: LD_EXP 88
39219: PUSH
39220: FOR_TO
39221: IFFALSE 39322
// begin tmp := 0 ;
39223: LD_ADDR_VAR 0 3
39227: PUSH
39228: LD_STRING 0
39230: ST_TO_ADDR
// if result [ 1 ] then
39231: LD_VAR 0 2
39235: PUSH
39236: LD_INT 1
39238: ARRAY
39239: IFFALSE 39304
// if result [ 1 ] [ 1 ] = i then
39241: LD_VAR 0 2
39245: PUSH
39246: LD_INT 1
39248: ARRAY
39249: PUSH
39250: LD_INT 1
39252: ARRAY
39253: PUSH
39254: LD_VAR 0 8
39258: EQUAL
39259: IFFALSE 39304
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39261: LD_ADDR_VAR 0 2
39265: PUSH
39266: LD_VAR 0 2
39270: PPUSH
39271: LD_INT 1
39273: PPUSH
39274: LD_VAR 0 2
39278: PUSH
39279: LD_INT 1
39281: ARRAY
39282: PPUSH
39283: LD_INT 1
39285: PPUSH
39286: CALL_OW 3
39290: PPUSH
39291: CALL_OW 1
39295: ST_TO_ADDR
// tmp := 1 ;
39296: LD_ADDR_VAR 0 3
39300: PUSH
39301: LD_STRING 1
39303: ST_TO_ADDR
// end ; normal := normal & tmp ;
39304: LD_ADDR_VAR 0 5
39308: PUSH
39309: LD_VAR 0 5
39313: PUSH
39314: LD_VAR 0 3
39318: STR
39319: ST_TO_ADDR
// end ;
39320: GO 39220
39322: POP
39323: POP
// for i = 1 to hardcoreCounter do
39324: LD_ADDR_VAR 0 8
39328: PUSH
39329: DOUBLE
39330: LD_INT 1
39332: DEC
39333: ST_TO_ADDR
39334: LD_EXP 89
39338: PUSH
39339: FOR_TO
39340: IFFALSE 39445
// begin tmp := 0 ;
39342: LD_ADDR_VAR 0 3
39346: PUSH
39347: LD_STRING 0
39349: ST_TO_ADDR
// if result [ 2 ] then
39350: LD_VAR 0 2
39354: PUSH
39355: LD_INT 2
39357: ARRAY
39358: IFFALSE 39427
// if result [ 2 ] [ 1 ] = 100 + i then
39360: LD_VAR 0 2
39364: PUSH
39365: LD_INT 2
39367: ARRAY
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PUSH
39373: LD_INT 100
39375: PUSH
39376: LD_VAR 0 8
39380: PLUS
39381: EQUAL
39382: IFFALSE 39427
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39384: LD_ADDR_VAR 0 2
39388: PUSH
39389: LD_VAR 0 2
39393: PPUSH
39394: LD_INT 2
39396: PPUSH
39397: LD_VAR 0 2
39401: PUSH
39402: LD_INT 2
39404: ARRAY
39405: PPUSH
39406: LD_INT 1
39408: PPUSH
39409: CALL_OW 3
39413: PPUSH
39414: CALL_OW 1
39418: ST_TO_ADDR
// tmp := 1 ;
39419: LD_ADDR_VAR 0 3
39423: PUSH
39424: LD_STRING 1
39426: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39427: LD_ADDR_VAR 0 6
39431: PUSH
39432: LD_VAR 0 6
39436: PUSH
39437: LD_VAR 0 3
39441: STR
39442: ST_TO_ADDR
// end ;
39443: GO 39339
39445: POP
39446: POP
// if isGameLoad then
39447: LD_VAR 0 1
39451: IFFALSE 39926
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39453: LD_ADDR_VAR 0 4
39457: PUSH
39458: LD_EXP 92
39462: PUSH
39463: LD_EXP 91
39467: PUSH
39468: LD_EXP 93
39472: PUSH
39473: LD_EXP 90
39477: PUSH
39478: LD_EXP 94
39482: PUSH
39483: LD_EXP 95
39487: PUSH
39488: LD_EXP 96
39492: PUSH
39493: LD_EXP 97
39497: PUSH
39498: LD_EXP 98
39502: PUSH
39503: LD_EXP 99
39507: PUSH
39508: LD_EXP 100
39512: PUSH
39513: LD_EXP 101
39517: PUSH
39518: LD_EXP 102
39522: PUSH
39523: LD_EXP 103
39527: PUSH
39528: LD_EXP 111
39532: PUSH
39533: LD_EXP 112
39537: PUSH
39538: LD_EXP 113
39542: PUSH
39543: LD_EXP 114
39547: PUSH
39548: LD_EXP 116
39552: PUSH
39553: LD_EXP 117
39557: PUSH
39558: LD_EXP 118
39562: PUSH
39563: LD_EXP 121
39567: PUSH
39568: LD_EXP 123
39572: PUSH
39573: LD_EXP 124
39577: PUSH
39578: LD_EXP 125
39582: PUSH
39583: LD_EXP 127
39587: PUSH
39588: LD_EXP 128
39592: PUSH
39593: LD_EXP 131
39597: PUSH
39598: LD_EXP 132
39602: PUSH
39603: LD_EXP 133
39607: PUSH
39608: LD_EXP 134
39612: PUSH
39613: LD_EXP 135
39617: PUSH
39618: LD_EXP 136
39622: PUSH
39623: LD_EXP 137
39627: PUSH
39628: LD_EXP 138
39632: PUSH
39633: LD_EXP 139
39637: PUSH
39638: LD_EXP 104
39642: PUSH
39643: LD_EXP 105
39647: PUSH
39648: LD_EXP 108
39652: PUSH
39653: LD_EXP 109
39657: PUSH
39658: LD_EXP 110
39662: PUSH
39663: LD_EXP 106
39667: PUSH
39668: LD_EXP 107
39672: PUSH
39673: LD_EXP 115
39677: PUSH
39678: LD_EXP 119
39682: PUSH
39683: LD_EXP 120
39687: PUSH
39688: LD_EXP 122
39692: PUSH
39693: LD_EXP 126
39697: PUSH
39698: LD_EXP 129
39702: PUSH
39703: LD_EXP 130
39707: PUSH
39708: LD_EXP 140
39712: PUSH
39713: LD_EXP 141
39717: PUSH
39718: LD_EXP 142
39722: PUSH
39723: LD_EXP 143
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: ST_TO_ADDR
// tmp :=  ;
39784: LD_ADDR_VAR 0 3
39788: PUSH
39789: LD_STRING 
39791: ST_TO_ADDR
// for i = 1 to normalCounter do
39792: LD_ADDR_VAR 0 8
39796: PUSH
39797: DOUBLE
39798: LD_INT 1
39800: DEC
39801: ST_TO_ADDR
39802: LD_EXP 88
39806: PUSH
39807: FOR_TO
39808: IFFALSE 39844
// begin if flags [ i ] then
39810: LD_VAR 0 4
39814: PUSH
39815: LD_VAR 0 8
39819: ARRAY
39820: IFFALSE 39842
// tmp := tmp & i & ; ;
39822: LD_ADDR_VAR 0 3
39826: PUSH
39827: LD_VAR 0 3
39831: PUSH
39832: LD_VAR 0 8
39836: STR
39837: PUSH
39838: LD_STRING ;
39840: STR
39841: ST_TO_ADDR
// end ;
39842: GO 39807
39844: POP
39845: POP
// for i = 1 to hardcoreCounter do
39846: LD_ADDR_VAR 0 8
39850: PUSH
39851: DOUBLE
39852: LD_INT 1
39854: DEC
39855: ST_TO_ADDR
39856: LD_EXP 89
39860: PUSH
39861: FOR_TO
39862: IFFALSE 39908
// begin if flags [ normalCounter + i ] then
39864: LD_VAR 0 4
39868: PUSH
39869: LD_EXP 88
39873: PUSH
39874: LD_VAR 0 8
39878: PLUS
39879: ARRAY
39880: IFFALSE 39906
// tmp := tmp & ( 100 + i ) & ; ;
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_VAR 0 3
39891: PUSH
39892: LD_INT 100
39894: PUSH
39895: LD_VAR 0 8
39899: PLUS
39900: STR
39901: PUSH
39902: LD_STRING ;
39904: STR
39905: ST_TO_ADDR
// end ;
39906: GO 39861
39908: POP
39909: POP
// if tmp then
39910: LD_VAR 0 3
39914: IFFALSE 39926
// active := tmp ;
39916: LD_ADDR_VAR 0 7
39920: PUSH
39921: LD_VAR 0 3
39925: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
39926: LD_STRING getStreamItemsFromMission("
39928: PUSH
39929: LD_VAR 0 5
39933: STR
39934: PUSH
39935: LD_STRING ","
39937: STR
39938: PUSH
39939: LD_VAR 0 6
39943: STR
39944: PUSH
39945: LD_STRING ","
39947: STR
39948: PUSH
39949: LD_VAR 0 7
39953: STR
39954: PUSH
39955: LD_STRING ")
39957: STR
39958: PPUSH
39959: CALL_OW 559
// end else
39963: GO 39972
// ToLua ( getStreamItemsFromMission("","","") ) ;
39965: LD_STRING getStreamItemsFromMission("","","")
39967: PPUSH
39968: CALL_OW 559
// end ;
39972: LD_VAR 0 2
39976: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
39977: LD_EXP 87
39981: PUSH
39982: LD_EXP 92
39986: AND
39987: IFFALSE 40111
39989: GO 39991
39991: DISABLE
39992: LD_INT 0
39994: PPUSH
39995: PPUSH
// begin enable ;
39996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
39997: LD_ADDR_VAR 0 2
40001: PUSH
40002: LD_INT 22
40004: PUSH
40005: LD_OWVAR 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 34
40019: PUSH
40020: LD_INT 7
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 34
40029: PUSH
40030: LD_INT 45
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 34
40039: PUSH
40040: LD_INT 28
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 34
40049: PUSH
40050: LD_INT 47
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PPUSH
40068: CALL_OW 69
40072: ST_TO_ADDR
// if not tmp then
40073: LD_VAR 0 2
40077: NOT
40078: IFFALSE 40082
// exit ;
40080: GO 40111
// for i in tmp do
40082: LD_ADDR_VAR 0 1
40086: PUSH
40087: LD_VAR 0 2
40091: PUSH
40092: FOR_IN
40093: IFFALSE 40109
// begin SetLives ( i , 0 ) ;
40095: LD_VAR 0 1
40099: PPUSH
40100: LD_INT 0
40102: PPUSH
40103: CALL_OW 234
// end ;
40107: GO 40092
40109: POP
40110: POP
// end ;
40111: PPOPN 2
40113: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40114: LD_EXP 87
40118: PUSH
40119: LD_EXP 93
40123: AND
40124: IFFALSE 40208
40126: GO 40128
40128: DISABLE
40129: LD_INT 0
40131: PPUSH
40132: PPUSH
// begin enable ;
40133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40134: LD_ADDR_VAR 0 2
40138: PUSH
40139: LD_INT 22
40141: PUSH
40142: LD_OWVAR 2
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 32
40153: PUSH
40154: LD_INT 3
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PPUSH
40165: CALL_OW 69
40169: ST_TO_ADDR
// if not tmp then
40170: LD_VAR 0 2
40174: NOT
40175: IFFALSE 40179
// exit ;
40177: GO 40208
// for i in tmp do
40179: LD_ADDR_VAR 0 1
40183: PUSH
40184: LD_VAR 0 2
40188: PUSH
40189: FOR_IN
40190: IFFALSE 40206
// begin SetLives ( i , 0 ) ;
40192: LD_VAR 0 1
40196: PPUSH
40197: LD_INT 0
40199: PPUSH
40200: CALL_OW 234
// end ;
40204: GO 40189
40206: POP
40207: POP
// end ;
40208: PPOPN 2
40210: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40211: LD_EXP 87
40215: PUSH
40216: LD_EXP 90
40220: AND
40221: IFFALSE 40314
40223: GO 40225
40225: DISABLE
40226: LD_INT 0
40228: PPUSH
// begin enable ;
40229: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40230: LD_ADDR_VAR 0 1
40234: PUSH
40235: LD_INT 22
40237: PUSH
40238: LD_OWVAR 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 25
40252: PUSH
40253: LD_INT 5
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 25
40262: PUSH
40263: LD_INT 9
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 25
40272: PUSH
40273: LD_INT 8
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PPUSH
40290: CALL_OW 69
40294: PUSH
40295: FOR_IN
40296: IFFALSE 40312
// begin SetClass ( i , 1 ) ;
40298: LD_VAR 0 1
40302: PPUSH
40303: LD_INT 1
40305: PPUSH
40306: CALL_OW 336
// end ;
40310: GO 40295
40312: POP
40313: POP
// end ;
40314: PPOPN 1
40316: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40317: LD_EXP 87
40321: PUSH
40322: LD_EXP 91
40326: AND
40327: PUSH
40328: LD_OWVAR 65
40332: PUSH
40333: LD_INT 7
40335: LESS
40336: AND
40337: IFFALSE 40351
40339: GO 40341
40341: DISABLE
// begin enable ;
40342: ENABLE
// game_speed := 7 ;
40343: LD_ADDR_OWVAR 65
40347: PUSH
40348: LD_INT 7
40350: ST_TO_ADDR
// end ;
40351: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40352: LD_EXP 87
40356: PUSH
40357: LD_EXP 94
40361: AND
40362: IFFALSE 40564
40364: GO 40366
40366: DISABLE
40367: LD_INT 0
40369: PPUSH
40370: PPUSH
40371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40372: LD_ADDR_VAR 0 3
40376: PUSH
40377: LD_INT 81
40379: PUSH
40380: LD_OWVAR 2
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 21
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PPUSH
40403: CALL_OW 69
40407: ST_TO_ADDR
// if not tmp then
40408: LD_VAR 0 3
40412: NOT
40413: IFFALSE 40417
// exit ;
40415: GO 40564
// if tmp > 5 then
40417: LD_VAR 0 3
40421: PUSH
40422: LD_INT 5
40424: GREATER
40425: IFFALSE 40437
// k := 5 else
40427: LD_ADDR_VAR 0 2
40431: PUSH
40432: LD_INT 5
40434: ST_TO_ADDR
40435: GO 40447
// k := tmp ;
40437: LD_ADDR_VAR 0 2
40441: PUSH
40442: LD_VAR 0 3
40446: ST_TO_ADDR
// for i := 1 to k do
40447: LD_ADDR_VAR 0 1
40451: PUSH
40452: DOUBLE
40453: LD_INT 1
40455: DEC
40456: ST_TO_ADDR
40457: LD_VAR 0 2
40461: PUSH
40462: FOR_TO
40463: IFFALSE 40562
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40465: LD_VAR 0 3
40469: PUSH
40470: LD_VAR 0 1
40474: ARRAY
40475: PPUSH
40476: LD_VAR 0 1
40480: PUSH
40481: LD_INT 4
40483: MOD
40484: PUSH
40485: LD_INT 1
40487: PLUS
40488: PPUSH
40489: CALL_OW 259
40493: PUSH
40494: LD_INT 10
40496: LESS
40497: IFFALSE 40560
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40499: LD_VAR 0 3
40503: PUSH
40504: LD_VAR 0 1
40508: ARRAY
40509: PPUSH
40510: LD_VAR 0 1
40514: PUSH
40515: LD_INT 4
40517: MOD
40518: PUSH
40519: LD_INT 1
40521: PLUS
40522: PPUSH
40523: LD_VAR 0 3
40527: PUSH
40528: LD_VAR 0 1
40532: ARRAY
40533: PPUSH
40534: LD_VAR 0 1
40538: PUSH
40539: LD_INT 4
40541: MOD
40542: PUSH
40543: LD_INT 1
40545: PLUS
40546: PPUSH
40547: CALL_OW 259
40551: PUSH
40552: LD_INT 1
40554: PLUS
40555: PPUSH
40556: CALL_OW 237
40560: GO 40462
40562: POP
40563: POP
// end ;
40564: PPOPN 3
40566: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40567: LD_EXP 87
40571: PUSH
40572: LD_EXP 95
40576: AND
40577: IFFALSE 40597
40579: GO 40581
40581: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40582: LD_INT 4
40584: PPUSH
40585: LD_OWVAR 2
40589: PPUSH
40590: LD_INT 0
40592: PPUSH
40593: CALL_OW 324
40597: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40598: LD_EXP 87
40602: PUSH
40603: LD_EXP 124
40607: AND
40608: IFFALSE 40628
40610: GO 40612
40612: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40613: LD_INT 19
40615: PPUSH
40616: LD_OWVAR 2
40620: PPUSH
40621: LD_INT 0
40623: PPUSH
40624: CALL_OW 324
40628: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40629: LD_EXP 87
40633: PUSH
40634: LD_EXP 96
40638: AND
40639: IFFALSE 40741
40641: GO 40643
40643: DISABLE
40644: LD_INT 0
40646: PPUSH
40647: PPUSH
// begin enable ;
40648: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40649: LD_ADDR_VAR 0 2
40653: PUSH
40654: LD_INT 22
40656: PUSH
40657: LD_OWVAR 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 2
40668: PUSH
40669: LD_INT 34
40671: PUSH
40672: LD_INT 11
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 34
40681: PUSH
40682: LD_INT 30
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PPUSH
40698: CALL_OW 69
40702: ST_TO_ADDR
// if not tmp then
40703: LD_VAR 0 2
40707: NOT
40708: IFFALSE 40712
// exit ;
40710: GO 40741
// for i in tmp do
40712: LD_ADDR_VAR 0 1
40716: PUSH
40717: LD_VAR 0 2
40721: PUSH
40722: FOR_IN
40723: IFFALSE 40739
// begin SetLives ( i , 0 ) ;
40725: LD_VAR 0 1
40729: PPUSH
40730: LD_INT 0
40732: PPUSH
40733: CALL_OW 234
// end ;
40737: GO 40722
40739: POP
40740: POP
// end ;
40741: PPOPN 2
40743: END
// every 0 0$1 trigger StreamModeActive and sBunker do
40744: LD_EXP 87
40748: PUSH
40749: LD_EXP 97
40753: AND
40754: IFFALSE 40774
40756: GO 40758
40758: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
40759: LD_INT 32
40761: PPUSH
40762: LD_OWVAR 2
40766: PPUSH
40767: LD_INT 0
40769: PPUSH
40770: CALL_OW 324
40774: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
40775: LD_EXP 87
40779: PUSH
40780: LD_EXP 98
40784: AND
40785: IFFALSE 40966
40787: GO 40789
40789: DISABLE
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
40794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
40795: LD_ADDR_VAR 0 2
40799: PUSH
40800: LD_INT 22
40802: PUSH
40803: LD_OWVAR 2
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 33
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PPUSH
40826: CALL_OW 69
40830: ST_TO_ADDR
// if not tmp then
40831: LD_VAR 0 2
40835: NOT
40836: IFFALSE 40840
// exit ;
40838: GO 40966
// side := 0 ;
40840: LD_ADDR_VAR 0 3
40844: PUSH
40845: LD_INT 0
40847: ST_TO_ADDR
// for i := 1 to 8 do
40848: LD_ADDR_VAR 0 1
40852: PUSH
40853: DOUBLE
40854: LD_INT 1
40856: DEC
40857: ST_TO_ADDR
40858: LD_INT 8
40860: PUSH
40861: FOR_TO
40862: IFFALSE 40910
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
40864: LD_OWVAR 2
40868: PUSH
40869: LD_VAR 0 1
40873: NONEQUAL
40874: PUSH
40875: LD_OWVAR 2
40879: PPUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 81
40889: PUSH
40890: LD_INT 2
40892: EQUAL
40893: AND
40894: IFFALSE 40908
// begin side := i ;
40896: LD_ADDR_VAR 0 3
40900: PUSH
40901: LD_VAR 0 1
40905: ST_TO_ADDR
// break ;
40906: GO 40910
// end ;
40908: GO 40861
40910: POP
40911: POP
// if not side then
40912: LD_VAR 0 3
40916: NOT
40917: IFFALSE 40921
// exit ;
40919: GO 40966
// for i := 1 to tmp do
40921: LD_ADDR_VAR 0 1
40925: PUSH
40926: DOUBLE
40927: LD_INT 1
40929: DEC
40930: ST_TO_ADDR
40931: LD_VAR 0 2
40935: PUSH
40936: FOR_TO
40937: IFFALSE 40964
// if Prob ( 60 ) then
40939: LD_INT 60
40941: PPUSH
40942: CALL_OW 13
40946: IFFALSE 40962
// SetSide ( i , side ) ;
40948: LD_VAR 0 1
40952: PPUSH
40953: LD_VAR 0 3
40957: PPUSH
40958: CALL_OW 235
40962: GO 40936
40964: POP
40965: POP
// end ;
40966: PPOPN 3
40968: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
40969: LD_EXP 87
40973: PUSH
40974: LD_EXP 100
40978: AND
40979: IFFALSE 41098
40981: GO 40983
40983: DISABLE
40984: LD_INT 0
40986: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
40987: LD_ADDR_VAR 0 1
40991: PUSH
40992: LD_INT 22
40994: PUSH
40995: LD_OWVAR 2
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 21
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 3
41016: PUSH
41017: LD_INT 23
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: LIST
41035: PPUSH
41036: CALL_OW 69
41040: PUSH
41041: FOR_IN
41042: IFFALSE 41096
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41044: LD_VAR 0 1
41048: PPUSH
41049: CALL_OW 257
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 3
41062: PUSH
41063: LD_INT 4
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: IN
41072: IFFALSE 41094
// SetClass ( un , rand ( 1 , 4 ) ) ;
41074: LD_VAR 0 1
41078: PPUSH
41079: LD_INT 1
41081: PPUSH
41082: LD_INT 4
41084: PPUSH
41085: CALL_OW 12
41089: PPUSH
41090: CALL_OW 336
41094: GO 41041
41096: POP
41097: POP
// end ;
41098: PPOPN 1
41100: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41101: LD_EXP 87
41105: PUSH
41106: LD_EXP 99
41110: AND
41111: IFFALSE 41190
41113: GO 41115
41115: DISABLE
41116: LD_INT 0
41118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41119: LD_ADDR_VAR 0 1
41123: PUSH
41124: LD_INT 22
41126: PUSH
41127: LD_OWVAR 2
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 21
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PPUSH
41150: CALL_OW 69
41154: ST_TO_ADDR
// if not tmp then
41155: LD_VAR 0 1
41159: NOT
41160: IFFALSE 41164
// exit ;
41162: GO 41190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41164: LD_VAR 0 1
41168: PUSH
41169: LD_INT 1
41171: PPUSH
41172: LD_VAR 0 1
41176: PPUSH
41177: CALL_OW 12
41181: ARRAY
41182: PPUSH
41183: LD_INT 100
41185: PPUSH
41186: CALL_OW 234
// end ;
41190: PPOPN 1
41192: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41193: LD_EXP 87
41197: PUSH
41198: LD_EXP 101
41202: AND
41203: IFFALSE 41301
41205: GO 41207
41207: DISABLE
41208: LD_INT 0
41210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41211: LD_ADDR_VAR 0 1
41215: PUSH
41216: LD_INT 22
41218: PUSH
41219: LD_OWVAR 2
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 21
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PPUSH
41242: CALL_OW 69
41246: ST_TO_ADDR
// if not tmp then
41247: LD_VAR 0 1
41251: NOT
41252: IFFALSE 41256
// exit ;
41254: GO 41301
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41256: LD_VAR 0 1
41260: PUSH
41261: LD_INT 1
41263: PPUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: CALL_OW 12
41273: ARRAY
41274: PPUSH
41275: LD_INT 1
41277: PPUSH
41278: LD_INT 4
41280: PPUSH
41281: CALL_OW 12
41285: PPUSH
41286: LD_INT 3000
41288: PPUSH
41289: LD_INT 9000
41291: PPUSH
41292: CALL_OW 12
41296: PPUSH
41297: CALL_OW 492
// end ;
41301: PPOPN 1
41303: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41304: LD_EXP 87
41308: PUSH
41309: LD_EXP 102
41313: AND
41314: IFFALSE 41334
41316: GO 41318
41318: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41319: LD_INT 1
41321: PPUSH
41322: LD_OWVAR 2
41326: PPUSH
41327: LD_INT 0
41329: PPUSH
41330: CALL_OW 324
41334: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41335: LD_EXP 87
41339: PUSH
41340: LD_EXP 103
41344: AND
41345: IFFALSE 41428
41347: GO 41349
41349: DISABLE
41350: LD_INT 0
41352: PPUSH
41353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41354: LD_ADDR_VAR 0 2
41358: PUSH
41359: LD_INT 22
41361: PUSH
41362: LD_OWVAR 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 21
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PPUSH
41385: CALL_OW 69
41389: ST_TO_ADDR
// if not tmp then
41390: LD_VAR 0 2
41394: NOT
41395: IFFALSE 41399
// exit ;
41397: GO 41428
// for i in tmp do
41399: LD_ADDR_VAR 0 1
41403: PUSH
41404: LD_VAR 0 2
41408: PUSH
41409: FOR_IN
41410: IFFALSE 41426
// SetBLevel ( i , 10 ) ;
41412: LD_VAR 0 1
41416: PPUSH
41417: LD_INT 10
41419: PPUSH
41420: CALL_OW 241
41424: GO 41409
41426: POP
41427: POP
// end ;
41428: PPOPN 2
41430: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41431: LD_EXP 87
41435: PUSH
41436: LD_EXP 104
41440: AND
41441: IFFALSE 41552
41443: GO 41445
41445: DISABLE
41446: LD_INT 0
41448: PPUSH
41449: PPUSH
41450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41451: LD_ADDR_VAR 0 3
41455: PUSH
41456: LD_INT 22
41458: PUSH
41459: LD_OWVAR 2
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 25
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PPUSH
41482: CALL_OW 69
41486: ST_TO_ADDR
// if not tmp then
41487: LD_VAR 0 3
41491: NOT
41492: IFFALSE 41496
// exit ;
41494: GO 41552
// un := tmp [ rand ( 1 , tmp ) ] ;
41496: LD_ADDR_VAR 0 2
41500: PUSH
41501: LD_VAR 0 3
41505: PUSH
41506: LD_INT 1
41508: PPUSH
41509: LD_VAR 0 3
41513: PPUSH
41514: CALL_OW 12
41518: ARRAY
41519: ST_TO_ADDR
// if Crawls ( un ) then
41520: LD_VAR 0 2
41524: PPUSH
41525: CALL_OW 318
41529: IFFALSE 41540
// ComWalk ( un ) ;
41531: LD_VAR 0 2
41535: PPUSH
41536: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41540: LD_VAR 0 2
41544: PPUSH
41545: LD_INT 5
41547: PPUSH
41548: CALL_OW 336
// end ;
41552: PPOPN 3
41554: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41555: LD_EXP 87
41559: PUSH
41560: LD_EXP 105
41564: AND
41565: PUSH
41566: LD_OWVAR 67
41570: PUSH
41571: LD_INT 4
41573: LESS
41574: AND
41575: IFFALSE 41594
41577: GO 41579
41579: DISABLE
// begin Difficulty := Difficulty + 1 ;
41580: LD_ADDR_OWVAR 67
41584: PUSH
41585: LD_OWVAR 67
41589: PUSH
41590: LD_INT 1
41592: PLUS
41593: ST_TO_ADDR
// end ;
41594: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41595: LD_EXP 87
41599: PUSH
41600: LD_EXP 106
41604: AND
41605: IFFALSE 41708
41607: GO 41609
41609: DISABLE
41610: LD_INT 0
41612: PPUSH
// begin for i := 1 to 5 do
41613: LD_ADDR_VAR 0 1
41617: PUSH
41618: DOUBLE
41619: LD_INT 1
41621: DEC
41622: ST_TO_ADDR
41623: LD_INT 5
41625: PUSH
41626: FOR_TO
41627: IFFALSE 41706
// begin uc_nation := nation_nature ;
41629: LD_ADDR_OWVAR 21
41633: PUSH
41634: LD_INT 0
41636: ST_TO_ADDR
// uc_side := 0 ;
41637: LD_ADDR_OWVAR 20
41641: PUSH
41642: LD_INT 0
41644: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41645: LD_ADDR_OWVAR 29
41649: PUSH
41650: LD_INT 12
41652: PUSH
41653: LD_INT 12
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: ST_TO_ADDR
// hc_agressivity := 20 ;
41660: LD_ADDR_OWVAR 35
41664: PUSH
41665: LD_INT 20
41667: ST_TO_ADDR
// hc_class := class_tiger ;
41668: LD_ADDR_OWVAR 28
41672: PUSH
41673: LD_INT 14
41675: ST_TO_ADDR
// hc_gallery :=  ;
41676: LD_ADDR_OWVAR 33
41680: PUSH
41681: LD_STRING 
41683: ST_TO_ADDR
// hc_name :=  ;
41684: LD_ADDR_OWVAR 26
41688: PUSH
41689: LD_STRING 
41691: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
41692: CALL_OW 44
41696: PPUSH
41697: LD_INT 0
41699: PPUSH
41700: CALL_OW 51
// end ;
41704: GO 41626
41706: POP
41707: POP
// end ;
41708: PPOPN 1
41710: END
// every 0 0$1 trigger StreamModeActive and sBomb do
41711: LD_EXP 87
41715: PUSH
41716: LD_EXP 107
41720: AND
41721: IFFALSE 41730
41723: GO 41725
41725: DISABLE
// StreamSibBomb ;
41726: CALL 41731 0 0
41730: END
// export function StreamSibBomb ; var i , x , y ; begin
41731: LD_INT 0
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
// result := false ;
41737: LD_ADDR_VAR 0 1
41741: PUSH
41742: LD_INT 0
41744: ST_TO_ADDR
// for i := 1 to 16 do
41745: LD_ADDR_VAR 0 2
41749: PUSH
41750: DOUBLE
41751: LD_INT 1
41753: DEC
41754: ST_TO_ADDR
41755: LD_INT 16
41757: PUSH
41758: FOR_TO
41759: IFFALSE 41958
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41761: LD_ADDR_VAR 0 3
41765: PUSH
41766: LD_INT 10
41768: PUSH
41769: LD_INT 20
41771: PUSH
41772: LD_INT 30
41774: PUSH
41775: LD_INT 40
41777: PUSH
41778: LD_INT 50
41780: PUSH
41781: LD_INT 60
41783: PUSH
41784: LD_INT 70
41786: PUSH
41787: LD_INT 80
41789: PUSH
41790: LD_INT 90
41792: PUSH
41793: LD_INT 100
41795: PUSH
41796: LD_INT 110
41798: PUSH
41799: LD_INT 120
41801: PUSH
41802: LD_INT 130
41804: PUSH
41805: LD_INT 140
41807: PUSH
41808: LD_INT 150
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PPUSH
41831: LD_INT 15
41833: PPUSH
41834: CALL_OW 12
41838: ARRAY
41839: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41840: LD_ADDR_VAR 0 4
41844: PUSH
41845: LD_INT 10
41847: PUSH
41848: LD_INT 20
41850: PUSH
41851: LD_INT 30
41853: PUSH
41854: LD_INT 40
41856: PUSH
41857: LD_INT 50
41859: PUSH
41860: LD_INT 60
41862: PUSH
41863: LD_INT 70
41865: PUSH
41866: LD_INT 80
41868: PUSH
41869: LD_INT 90
41871: PUSH
41872: LD_INT 100
41874: PUSH
41875: LD_INT 110
41877: PUSH
41878: LD_INT 120
41880: PUSH
41881: LD_INT 130
41883: PUSH
41884: LD_INT 140
41886: PUSH
41887: LD_INT 150
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PPUSH
41910: LD_INT 15
41912: PPUSH
41913: CALL_OW 12
41917: ARRAY
41918: ST_TO_ADDR
// if ValidHex ( x , y ) then
41919: LD_VAR 0 3
41923: PPUSH
41924: LD_VAR 0 4
41928: PPUSH
41929: CALL_OW 488
41933: IFFALSE 41956
// begin result := [ x , y ] ;
41935: LD_ADDR_VAR 0 1
41939: PUSH
41940: LD_VAR 0 3
41944: PUSH
41945: LD_VAR 0 4
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: ST_TO_ADDR
// break ;
41954: GO 41958
// end ; end ;
41956: GO 41758
41958: POP
41959: POP
// if result then
41960: LD_VAR 0 1
41964: IFFALSE 42024
// begin ToLua ( playSibBomb() ) ;
41966: LD_STRING playSibBomb()
41968: PPUSH
41969: CALL_OW 559
// wait ( 0 0$14 ) ;
41973: LD_INT 490
41975: PPUSH
41976: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
41980: LD_VAR 0 1
41984: PUSH
41985: LD_INT 1
41987: ARRAY
41988: PPUSH
41989: LD_VAR 0 1
41993: PUSH
41994: LD_INT 2
41996: ARRAY
41997: PPUSH
41998: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
42002: LD_VAR 0 1
42006: PUSH
42007: LD_INT 1
42009: ARRAY
42010: PPUSH
42011: LD_VAR 0 1
42015: PUSH
42016: LD_INT 2
42018: ARRAY
42019: PPUSH
42020: CALL_OW 429
// end ; end ;
42024: LD_VAR 0 1
42028: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42029: LD_EXP 87
42033: PUSH
42034: LD_EXP 109
42038: AND
42039: IFFALSE 42051
42041: GO 42043
42043: DISABLE
// YouLost (  ) ;
42044: LD_STRING 
42046: PPUSH
42047: CALL_OW 104
42051: END
// every 0 0$1 trigger StreamModeActive and sFog do
42052: LD_EXP 87
42056: PUSH
42057: LD_EXP 108
42061: AND
42062: IFFALSE 42076
42064: GO 42066
42066: DISABLE
// FogOff ( your_side ) ;
42067: LD_OWVAR 2
42071: PPUSH
42072: CALL_OW 344
42076: END
// every 0 0$1 trigger StreamModeActive and sSun do
42077: LD_EXP 87
42081: PUSH
42082: LD_EXP 110
42086: AND
42087: IFFALSE 42115
42089: GO 42091
42091: DISABLE
// begin solar_recharge_percent := 0 ;
42092: LD_ADDR_OWVAR 79
42096: PUSH
42097: LD_INT 0
42099: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42100: LD_INT 10500
42102: PPUSH
42103: CALL_OW 67
// solar_recharge_percent := 100 ;
42107: LD_ADDR_OWVAR 79
42111: PUSH
42112: LD_INT 100
42114: ST_TO_ADDR
// end ;
42115: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42116: LD_EXP 87
42120: PUSH
42121: LD_EXP 111
42125: AND
42126: IFFALSE 42365
42128: GO 42130
42130: DISABLE
42131: LD_INT 0
42133: PPUSH
42134: PPUSH
42135: PPUSH
// begin tmp := [ ] ;
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: EMPTY
42142: ST_TO_ADDR
// for i := 1 to 6 do
42143: LD_ADDR_VAR 0 1
42147: PUSH
42148: DOUBLE
42149: LD_INT 1
42151: DEC
42152: ST_TO_ADDR
42153: LD_INT 6
42155: PUSH
42156: FOR_TO
42157: IFFALSE 42262
// begin uc_nation := nation_nature ;
42159: LD_ADDR_OWVAR 21
42163: PUSH
42164: LD_INT 0
42166: ST_TO_ADDR
// uc_side := 0 ;
42167: LD_ADDR_OWVAR 20
42171: PUSH
42172: LD_INT 0
42174: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42175: LD_ADDR_OWVAR 29
42179: PUSH
42180: LD_INT 12
42182: PUSH
42183: LD_INT 12
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: ST_TO_ADDR
// hc_agressivity := 20 ;
42190: LD_ADDR_OWVAR 35
42194: PUSH
42195: LD_INT 20
42197: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42198: LD_ADDR_OWVAR 28
42202: PUSH
42203: LD_INT 17
42205: ST_TO_ADDR
// hc_gallery :=  ;
42206: LD_ADDR_OWVAR 33
42210: PUSH
42211: LD_STRING 
42213: ST_TO_ADDR
// hc_name :=  ;
42214: LD_ADDR_OWVAR 26
42218: PUSH
42219: LD_STRING 
42221: ST_TO_ADDR
// un := CreateHuman ;
42222: LD_ADDR_VAR 0 2
42226: PUSH
42227: CALL_OW 44
42231: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42232: LD_VAR 0 2
42236: PPUSH
42237: LD_INT 1
42239: PPUSH
42240: CALL_OW 51
// tmp := tmp ^ un ;
42244: LD_ADDR_VAR 0 3
42248: PUSH
42249: LD_VAR 0 3
42253: PUSH
42254: LD_VAR 0 2
42258: ADD
42259: ST_TO_ADDR
// end ;
42260: GO 42156
42262: POP
42263: POP
// repeat wait ( 0 0$1 ) ;
42264: LD_INT 35
42266: PPUSH
42267: CALL_OW 67
// for un in tmp do
42271: LD_ADDR_VAR 0 2
42275: PUSH
42276: LD_VAR 0 3
42280: PUSH
42281: FOR_IN
42282: IFFALSE 42356
// begin if IsDead ( un ) then
42284: LD_VAR 0 2
42288: PPUSH
42289: CALL_OW 301
42293: IFFALSE 42313
// begin tmp := tmp diff un ;
42295: LD_ADDR_VAR 0 3
42299: PUSH
42300: LD_VAR 0 3
42304: PUSH
42305: LD_VAR 0 2
42309: DIFF
42310: ST_TO_ADDR
// continue ;
42311: GO 42281
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42313: LD_VAR 0 2
42317: PPUSH
42318: LD_INT 3
42320: PUSH
42321: LD_INT 22
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PPUSH
42335: CALL_OW 69
42339: PPUSH
42340: LD_VAR 0 2
42344: PPUSH
42345: CALL_OW 74
42349: PPUSH
42350: CALL_OW 115
// end ;
42354: GO 42281
42356: POP
42357: POP
// until not tmp ;
42358: LD_VAR 0 3
42362: NOT
42363: IFFALSE 42264
// end ;
42365: PPOPN 3
42367: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42368: LD_EXP 87
42372: PUSH
42373: LD_EXP 112
42377: AND
42378: IFFALSE 42432
42380: GO 42382
42382: DISABLE
// begin ToLua ( displayTroll(); ) ;
42383: LD_STRING displayTroll();
42385: PPUSH
42386: CALL_OW 559
// wait ( 3 3$00 ) ;
42390: LD_INT 6300
42392: PPUSH
42393: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42397: LD_STRING hideTroll();
42399: PPUSH
42400: CALL_OW 559
// wait ( 1 1$00 ) ;
42404: LD_INT 2100
42406: PPUSH
42407: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42411: LD_STRING displayTroll();
42413: PPUSH
42414: CALL_OW 559
// wait ( 1 1$00 ) ;
42418: LD_INT 2100
42420: PPUSH
42421: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42425: LD_STRING hideTroll();
42427: PPUSH
42428: CALL_OW 559
// end ;
42432: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42433: LD_EXP 87
42437: PUSH
42438: LD_EXP 113
42442: AND
42443: IFFALSE 42506
42445: GO 42447
42447: DISABLE
42448: LD_INT 0
42450: PPUSH
// begin p := 0 ;
42451: LD_ADDR_VAR 0 1
42455: PUSH
42456: LD_INT 0
42458: ST_TO_ADDR
// repeat game_speed := 1 ;
42459: LD_ADDR_OWVAR 65
42463: PUSH
42464: LD_INT 1
42466: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42467: LD_INT 35
42469: PPUSH
42470: CALL_OW 67
// p := p + 1 ;
42474: LD_ADDR_VAR 0 1
42478: PUSH
42479: LD_VAR 0 1
42483: PUSH
42484: LD_INT 1
42486: PLUS
42487: ST_TO_ADDR
// until p >= 60 ;
42488: LD_VAR 0 1
42492: PUSH
42493: LD_INT 60
42495: GREATEREQUAL
42496: IFFALSE 42459
// game_speed := 4 ;
42498: LD_ADDR_OWVAR 65
42502: PUSH
42503: LD_INT 4
42505: ST_TO_ADDR
// end ;
42506: PPOPN 1
42508: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42509: LD_EXP 87
42513: PUSH
42514: LD_EXP 114
42518: AND
42519: IFFALSE 42665
42521: GO 42523
42523: DISABLE
42524: LD_INT 0
42526: PPUSH
42527: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42528: LD_ADDR_VAR 0 1
42532: PUSH
42533: LD_INT 22
42535: PUSH
42536: LD_OWVAR 2
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 30
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 30
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PPUSH
42577: CALL_OW 69
42581: ST_TO_ADDR
// if not depot then
42582: LD_VAR 0 1
42586: NOT
42587: IFFALSE 42591
// exit ;
42589: GO 42665
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42591: LD_ADDR_VAR 0 2
42595: PUSH
42596: LD_VAR 0 1
42600: PUSH
42601: LD_INT 1
42603: PPUSH
42604: LD_VAR 0 1
42608: PPUSH
42609: CALL_OW 12
42613: ARRAY
42614: PPUSH
42615: CALL_OW 274
42619: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42620: LD_VAR 0 2
42624: PPUSH
42625: LD_INT 1
42627: PPUSH
42628: LD_INT 0
42630: PPUSH
42631: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42635: LD_VAR 0 2
42639: PPUSH
42640: LD_INT 2
42642: PPUSH
42643: LD_INT 0
42645: PPUSH
42646: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
42650: LD_VAR 0 2
42654: PPUSH
42655: LD_INT 3
42657: PPUSH
42658: LD_INT 0
42660: PPUSH
42661: CALL_OW 277
// end ;
42665: PPOPN 2
42667: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
42668: LD_EXP 87
42672: PUSH
42673: LD_EXP 115
42677: AND
42678: IFFALSE 42775
42680: GO 42682
42682: DISABLE
42683: LD_INT 0
42685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42686: LD_ADDR_VAR 0 1
42690: PUSH
42691: LD_INT 22
42693: PUSH
42694: LD_OWVAR 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 21
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 3
42715: PUSH
42716: LD_INT 23
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: PPUSH
42735: CALL_OW 69
42739: ST_TO_ADDR
// if not tmp then
42740: LD_VAR 0 1
42744: NOT
42745: IFFALSE 42749
// exit ;
42747: GO 42775
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
42749: LD_VAR 0 1
42753: PUSH
42754: LD_INT 1
42756: PPUSH
42757: LD_VAR 0 1
42761: PPUSH
42762: CALL_OW 12
42766: ARRAY
42767: PPUSH
42768: LD_INT 200
42770: PPUSH
42771: CALL_OW 234
// end ;
42775: PPOPN 1
42777: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
42778: LD_EXP 87
42782: PUSH
42783: LD_EXP 116
42787: AND
42788: IFFALSE 42867
42790: GO 42792
42792: DISABLE
42793: LD_INT 0
42795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
42796: LD_ADDR_VAR 0 1
42800: PUSH
42801: LD_INT 22
42803: PUSH
42804: LD_OWVAR 2
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 21
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PPUSH
42827: CALL_OW 69
42831: ST_TO_ADDR
// if not tmp then
42832: LD_VAR 0 1
42836: NOT
42837: IFFALSE 42841
// exit ;
42839: GO 42867
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
42841: LD_VAR 0 1
42845: PUSH
42846: LD_INT 1
42848: PPUSH
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL_OW 12
42858: ARRAY
42859: PPUSH
42860: LD_INT 60
42862: PPUSH
42863: CALL_OW 234
// end ;
42867: PPOPN 1
42869: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
42870: LD_EXP 87
42874: PUSH
42875: LD_EXP 117
42879: AND
42880: IFFALSE 42979
42882: GO 42884
42884: DISABLE
42885: LD_INT 0
42887: PPUSH
42888: PPUSH
// begin enable ;
42889: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
42890: LD_ADDR_VAR 0 1
42894: PUSH
42895: LD_INT 22
42897: PUSH
42898: LD_OWVAR 2
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 61
42909: PUSH
42910: EMPTY
42911: LIST
42912: PUSH
42913: LD_INT 33
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: PPUSH
42928: CALL_OW 69
42932: ST_TO_ADDR
// if not tmp then
42933: LD_VAR 0 1
42937: NOT
42938: IFFALSE 42942
// exit ;
42940: GO 42979
// for i in tmp do
42942: LD_ADDR_VAR 0 2
42946: PUSH
42947: LD_VAR 0 1
42951: PUSH
42952: FOR_IN
42953: IFFALSE 42977
// if IsControledBy ( i ) then
42955: LD_VAR 0 2
42959: PPUSH
42960: CALL_OW 312
42964: IFFALSE 42975
// ComUnlink ( i ) ;
42966: LD_VAR 0 2
42970: PPUSH
42971: CALL_OW 136
42975: GO 42952
42977: POP
42978: POP
// end ;
42979: PPOPN 2
42981: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
42982: LD_EXP 87
42986: PUSH
42987: LD_EXP 118
42991: AND
42992: IFFALSE 43132
42994: GO 42996
42996: DISABLE
42997: LD_INT 0
42999: PPUSH
43000: PPUSH
// begin ToLua ( displayPowell(); ) ;
43001: LD_STRING displayPowell();
43003: PPUSH
43004: CALL_OW 559
// uc_side := 0 ;
43008: LD_ADDR_OWVAR 20
43012: PUSH
43013: LD_INT 0
43015: ST_TO_ADDR
// uc_nation := 2 ;
43016: LD_ADDR_OWVAR 21
43020: PUSH
43021: LD_INT 2
43023: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43024: LD_ADDR_OWVAR 37
43028: PUSH
43029: LD_INT 14
43031: ST_TO_ADDR
// vc_engine := engine_siberite ;
43032: LD_ADDR_OWVAR 39
43036: PUSH
43037: LD_INT 3
43039: ST_TO_ADDR
// vc_control := control_apeman ;
43040: LD_ADDR_OWVAR 38
43044: PUSH
43045: LD_INT 5
43047: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43048: LD_ADDR_OWVAR 40
43052: PUSH
43053: LD_INT 29
43055: ST_TO_ADDR
// un := CreateVehicle ;
43056: LD_ADDR_VAR 0 2
43060: PUSH
43061: CALL_OW 45
43065: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43066: LD_VAR 0 2
43070: PPUSH
43071: LD_INT 1
43073: PPUSH
43074: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43078: LD_INT 35
43080: PPUSH
43081: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43085: LD_VAR 0 2
43089: PPUSH
43090: LD_INT 22
43092: PUSH
43093: LD_OWVAR 2
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PPUSH
43102: CALL_OW 69
43106: PPUSH
43107: LD_VAR 0 2
43111: PPUSH
43112: CALL_OW 74
43116: PPUSH
43117: CALL_OW 115
// until IsDead ( un ) ;
43121: LD_VAR 0 2
43125: PPUSH
43126: CALL_OW 301
43130: IFFALSE 43078
// end ;
43132: PPOPN 2
43134: END
// every 0 0$1 trigger StreamModeActive and sStu do
43135: LD_EXP 87
43139: PUSH
43140: LD_EXP 126
43144: AND
43145: IFFALSE 43161
43147: GO 43149
43149: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43150: LD_STRING displayStucuk();
43152: PPUSH
43153: CALL_OW 559
// ResetFog ;
43157: CALL_OW 335
// end ;
43161: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43162: LD_EXP 87
43166: PUSH
43167: LD_EXP 119
43171: AND
43172: IFFALSE 43313
43174: GO 43176
43176: DISABLE
43177: LD_INT 0
43179: PPUSH
43180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43181: LD_ADDR_VAR 0 2
43185: PUSH
43186: LD_INT 22
43188: PUSH
43189: LD_OWVAR 2
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 21
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PPUSH
43212: CALL_OW 69
43216: ST_TO_ADDR
// if not tmp then
43217: LD_VAR 0 2
43221: NOT
43222: IFFALSE 43226
// exit ;
43224: GO 43313
// un := tmp [ rand ( 1 , tmp ) ] ;
43226: LD_ADDR_VAR 0 1
43230: PUSH
43231: LD_VAR 0 2
43235: PUSH
43236: LD_INT 1
43238: PPUSH
43239: LD_VAR 0 2
43243: PPUSH
43244: CALL_OW 12
43248: ARRAY
43249: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43250: LD_VAR 0 1
43254: PPUSH
43255: LD_INT 0
43257: PPUSH
43258: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43262: LD_VAR 0 1
43266: PPUSH
43267: LD_OWVAR 3
43271: PUSH
43272: LD_VAR 0 1
43276: DIFF
43277: PPUSH
43278: LD_VAR 0 1
43282: PPUSH
43283: CALL_OW 74
43287: PPUSH
43288: CALL_OW 115
// wait ( 0 0$20 ) ;
43292: LD_INT 700
43294: PPUSH
43295: CALL_OW 67
// SetSide ( un , your_side ) ;
43299: LD_VAR 0 1
43303: PPUSH
43304: LD_OWVAR 2
43308: PPUSH
43309: CALL_OW 235
// end ;
43313: PPOPN 2
43315: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43316: LD_EXP 87
43320: PUSH
43321: LD_EXP 120
43325: AND
43326: IFFALSE 43432
43328: GO 43330
43330: DISABLE
43331: LD_INT 0
43333: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43334: LD_ADDR_VAR 0 1
43338: PUSH
43339: LD_INT 22
43341: PUSH
43342: LD_OWVAR 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: LD_INT 30
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 30
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: LIST
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PPUSH
43383: CALL_OW 69
43387: ST_TO_ADDR
// if not depot then
43388: LD_VAR 0 1
43392: NOT
43393: IFFALSE 43397
// exit ;
43395: GO 43432
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43397: LD_VAR 0 1
43401: PUSH
43402: LD_INT 1
43404: ARRAY
43405: PPUSH
43406: CALL_OW 250
43410: PPUSH
43411: LD_VAR 0 1
43415: PUSH
43416: LD_INT 1
43418: ARRAY
43419: PPUSH
43420: CALL_OW 251
43424: PPUSH
43425: LD_INT 70
43427: PPUSH
43428: CALL_OW 495
// end ;
43432: PPOPN 1
43434: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43435: LD_EXP 87
43439: PUSH
43440: LD_EXP 121
43444: AND
43445: IFFALSE 43656
43447: GO 43449
43449: DISABLE
43450: LD_INT 0
43452: PPUSH
43453: PPUSH
43454: PPUSH
43455: PPUSH
43456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43457: LD_ADDR_VAR 0 5
43461: PUSH
43462: LD_INT 22
43464: PUSH
43465: LD_OWVAR 2
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 21
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PPUSH
43488: CALL_OW 69
43492: ST_TO_ADDR
// if not tmp then
43493: LD_VAR 0 5
43497: NOT
43498: IFFALSE 43502
// exit ;
43500: GO 43656
// for i in tmp do
43502: LD_ADDR_VAR 0 1
43506: PUSH
43507: LD_VAR 0 5
43511: PUSH
43512: FOR_IN
43513: IFFALSE 43654
// begin d := rand ( 0 , 5 ) ;
43515: LD_ADDR_VAR 0 4
43519: PUSH
43520: LD_INT 0
43522: PPUSH
43523: LD_INT 5
43525: PPUSH
43526: CALL_OW 12
43530: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43531: LD_ADDR_VAR 0 2
43535: PUSH
43536: LD_VAR 0 1
43540: PPUSH
43541: CALL_OW 250
43545: PPUSH
43546: LD_VAR 0 4
43550: PPUSH
43551: LD_INT 3
43553: PPUSH
43554: LD_INT 12
43556: PPUSH
43557: CALL_OW 12
43561: PPUSH
43562: CALL_OW 272
43566: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43567: LD_ADDR_VAR 0 3
43571: PUSH
43572: LD_VAR 0 1
43576: PPUSH
43577: CALL_OW 251
43581: PPUSH
43582: LD_VAR 0 4
43586: PPUSH
43587: LD_INT 3
43589: PPUSH
43590: LD_INT 12
43592: PPUSH
43593: CALL_OW 12
43597: PPUSH
43598: CALL_OW 273
43602: ST_TO_ADDR
// if ValidHex ( x , y ) then
43603: LD_VAR 0 2
43607: PPUSH
43608: LD_VAR 0 3
43612: PPUSH
43613: CALL_OW 488
43617: IFFALSE 43652
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43619: LD_VAR 0 1
43623: PPUSH
43624: LD_VAR 0 2
43628: PPUSH
43629: LD_VAR 0 3
43633: PPUSH
43634: LD_INT 3
43636: PPUSH
43637: LD_INT 6
43639: PPUSH
43640: CALL_OW 12
43644: PPUSH
43645: LD_INT 1
43647: PPUSH
43648: CALL_OW 483
// end ;
43652: GO 43512
43654: POP
43655: POP
// end ;
43656: PPOPN 5
43658: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
43659: LD_EXP 87
43663: PUSH
43664: LD_EXP 122
43668: AND
43669: IFFALSE 43763
43671: GO 43673
43673: DISABLE
43674: LD_INT 0
43676: PPUSH
43677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
43678: LD_ADDR_VAR 0 2
43682: PUSH
43683: LD_INT 22
43685: PUSH
43686: LD_OWVAR 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 32
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 21
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: PPUSH
43720: CALL_OW 69
43724: ST_TO_ADDR
// if not tmp then
43725: LD_VAR 0 2
43729: NOT
43730: IFFALSE 43734
// exit ;
43732: GO 43763
// for i in tmp do
43734: LD_ADDR_VAR 0 1
43738: PUSH
43739: LD_VAR 0 2
43743: PUSH
43744: FOR_IN
43745: IFFALSE 43761
// SetFuel ( i , 0 ) ;
43747: LD_VAR 0 1
43751: PPUSH
43752: LD_INT 0
43754: PPUSH
43755: CALL_OW 240
43759: GO 43744
43761: POP
43762: POP
// end ;
43763: PPOPN 2
43765: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
43766: LD_EXP 87
43770: PUSH
43771: LD_EXP 123
43775: AND
43776: IFFALSE 43842
43778: GO 43780
43780: DISABLE
43781: LD_INT 0
43783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
43784: LD_ADDR_VAR 0 1
43788: PUSH
43789: LD_INT 22
43791: PUSH
43792: LD_OWVAR 2
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 30
43803: PUSH
43804: LD_INT 29
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PPUSH
43815: CALL_OW 69
43819: ST_TO_ADDR
// if not tmp then
43820: LD_VAR 0 1
43824: NOT
43825: IFFALSE 43829
// exit ;
43827: GO 43842
// DestroyUnit ( tmp [ 1 ] ) ;
43829: LD_VAR 0 1
43833: PUSH
43834: LD_INT 1
43836: ARRAY
43837: PPUSH
43838: CALL_OW 65
// end ;
43842: PPOPN 1
43844: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
43845: LD_EXP 87
43849: PUSH
43850: LD_EXP 125
43854: AND
43855: IFFALSE 43984
43857: GO 43859
43859: DISABLE
43860: LD_INT 0
43862: PPUSH
// begin uc_side := 0 ;
43863: LD_ADDR_OWVAR 20
43867: PUSH
43868: LD_INT 0
43870: ST_TO_ADDR
// uc_nation := nation_arabian ;
43871: LD_ADDR_OWVAR 21
43875: PUSH
43876: LD_INT 2
43878: ST_TO_ADDR
// hc_gallery :=  ;
43879: LD_ADDR_OWVAR 33
43883: PUSH
43884: LD_STRING 
43886: ST_TO_ADDR
// hc_name :=  ;
43887: LD_ADDR_OWVAR 26
43891: PUSH
43892: LD_STRING 
43894: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
43895: LD_INT 1
43897: PPUSH
43898: LD_INT 11
43900: PPUSH
43901: LD_INT 10
43903: PPUSH
43904: CALL_OW 380
// un := CreateHuman ;
43908: LD_ADDR_VAR 0 1
43912: PUSH
43913: CALL_OW 44
43917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43918: LD_VAR 0 1
43922: PPUSH
43923: LD_INT 1
43925: PPUSH
43926: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43930: LD_INT 35
43932: PPUSH
43933: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43937: LD_VAR 0 1
43941: PPUSH
43942: LD_INT 22
43944: PUSH
43945: LD_OWVAR 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PPUSH
43954: CALL_OW 69
43958: PPUSH
43959: LD_VAR 0 1
43963: PPUSH
43964: CALL_OW 74
43968: PPUSH
43969: CALL_OW 115
// until IsDead ( un ) ;
43973: LD_VAR 0 1
43977: PPUSH
43978: CALL_OW 301
43982: IFFALSE 43930
// end ;
43984: PPOPN 1
43986: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
43987: LD_EXP 87
43991: PUSH
43992: LD_EXP 127
43996: AND
43997: IFFALSE 44009
43999: GO 44001
44001: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
44002: LD_STRING earthquake(getX(game), 0, 32)
44004: PPUSH
44005: CALL_OW 559
44009: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
44010: LD_EXP 87
44014: PUSH
44015: LD_EXP 128
44019: AND
44020: IFFALSE 44111
44022: GO 44024
44024: DISABLE
44025: LD_INT 0
44027: PPUSH
// begin enable ;
44028: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44029: LD_ADDR_VAR 0 1
44033: PUSH
44034: LD_INT 22
44036: PUSH
44037: LD_OWVAR 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 21
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 33
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: PPUSH
44071: CALL_OW 69
44075: ST_TO_ADDR
// if not tmp then
44076: LD_VAR 0 1
44080: NOT
44081: IFFALSE 44085
// exit ;
44083: GO 44111
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44085: LD_VAR 0 1
44089: PUSH
44090: LD_INT 1
44092: PPUSH
44093: LD_VAR 0 1
44097: PPUSH
44098: CALL_OW 12
44102: ARRAY
44103: PPUSH
44104: LD_INT 1
44106: PPUSH
44107: CALL_OW 234
// end ;
44111: PPOPN 1
44113: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44114: LD_EXP 87
44118: PUSH
44119: LD_EXP 129
44123: AND
44124: IFFALSE 44265
44126: GO 44128
44128: DISABLE
44129: LD_INT 0
44131: PPUSH
44132: PPUSH
44133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44134: LD_ADDR_VAR 0 3
44138: PUSH
44139: LD_INT 22
44141: PUSH
44142: LD_OWVAR 2
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 25
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PPUSH
44165: CALL_OW 69
44169: ST_TO_ADDR
// if not tmp then
44170: LD_VAR 0 3
44174: NOT
44175: IFFALSE 44179
// exit ;
44177: GO 44265
// un := tmp [ rand ( 1 , tmp ) ] ;
44179: LD_ADDR_VAR 0 2
44183: PUSH
44184: LD_VAR 0 3
44188: PUSH
44189: LD_INT 1
44191: PPUSH
44192: LD_VAR 0 3
44196: PPUSH
44197: CALL_OW 12
44201: ARRAY
44202: ST_TO_ADDR
// if Crawls ( un ) then
44203: LD_VAR 0 2
44207: PPUSH
44208: CALL_OW 318
44212: IFFALSE 44223
// ComWalk ( un ) ;
44214: LD_VAR 0 2
44218: PPUSH
44219: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44223: LD_VAR 0 2
44227: PPUSH
44228: LD_INT 9
44230: PPUSH
44231: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44235: LD_INT 28
44237: PPUSH
44238: LD_OWVAR 2
44242: PPUSH
44243: LD_INT 2
44245: PPUSH
44246: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44250: LD_INT 29
44252: PPUSH
44253: LD_OWVAR 2
44257: PPUSH
44258: LD_INT 2
44260: PPUSH
44261: CALL_OW 322
// end ;
44265: PPOPN 3
44267: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44268: LD_EXP 87
44272: PUSH
44273: LD_EXP 130
44277: AND
44278: IFFALSE 44389
44280: GO 44282
44282: DISABLE
44283: LD_INT 0
44285: PPUSH
44286: PPUSH
44287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_INT 22
44295: PUSH
44296: LD_OWVAR 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 25
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PPUSH
44319: CALL_OW 69
44323: ST_TO_ADDR
// if not tmp then
44324: LD_VAR 0 3
44328: NOT
44329: IFFALSE 44333
// exit ;
44331: GO 44389
// un := tmp [ rand ( 1 , tmp ) ] ;
44333: LD_ADDR_VAR 0 2
44337: PUSH
44338: LD_VAR 0 3
44342: PUSH
44343: LD_INT 1
44345: PPUSH
44346: LD_VAR 0 3
44350: PPUSH
44351: CALL_OW 12
44355: ARRAY
44356: ST_TO_ADDR
// if Crawls ( un ) then
44357: LD_VAR 0 2
44361: PPUSH
44362: CALL_OW 318
44366: IFFALSE 44377
// ComWalk ( un ) ;
44368: LD_VAR 0 2
44372: PPUSH
44373: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44377: LD_VAR 0 2
44381: PPUSH
44382: LD_INT 8
44384: PPUSH
44385: CALL_OW 336
// end ;
44389: PPOPN 3
44391: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44392: LD_EXP 87
44396: PUSH
44397: LD_EXP 131
44401: AND
44402: IFFALSE 44546
44404: GO 44406
44406: DISABLE
44407: LD_INT 0
44409: PPUSH
44410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44411: LD_ADDR_VAR 0 2
44415: PUSH
44416: LD_INT 22
44418: PUSH
44419: LD_OWVAR 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 21
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 34
44443: PUSH
44444: LD_INT 12
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 34
44453: PUSH
44454: LD_INT 51
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 34
44463: PUSH
44464: LD_INT 32
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: PPUSH
44482: CALL_OW 69
44486: ST_TO_ADDR
// if not tmp then
44487: LD_VAR 0 2
44491: NOT
44492: IFFALSE 44496
// exit ;
44494: GO 44546
// for i in tmp do
44496: LD_ADDR_VAR 0 1
44500: PUSH
44501: LD_VAR 0 2
44505: PUSH
44506: FOR_IN
44507: IFFALSE 44544
// if GetCargo ( i , mat_artifact ) = 0 then
44509: LD_VAR 0 1
44513: PPUSH
44514: LD_INT 4
44516: PPUSH
44517: CALL_OW 289
44521: PUSH
44522: LD_INT 0
44524: EQUAL
44525: IFFALSE 44542
// SetCargo ( i , mat_siberit , 100 ) ;
44527: LD_VAR 0 1
44531: PPUSH
44532: LD_INT 3
44534: PPUSH
44535: LD_INT 100
44537: PPUSH
44538: CALL_OW 290
44542: GO 44506
44544: POP
44545: POP
// end ;
44546: PPOPN 2
44548: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44549: LD_EXP 87
44553: PUSH
44554: LD_EXP 132
44558: AND
44559: IFFALSE 44742
44561: GO 44563
44563: DISABLE
44564: LD_INT 0
44566: PPUSH
44567: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44568: LD_ADDR_VAR 0 2
44572: PUSH
44573: LD_INT 22
44575: PUSH
44576: LD_OWVAR 2
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PPUSH
44585: CALL_OW 69
44589: ST_TO_ADDR
// if not tmp then
44590: LD_VAR 0 2
44594: NOT
44595: IFFALSE 44599
// exit ;
44597: GO 44742
// for i := 1 to 2 do
44599: LD_ADDR_VAR 0 1
44603: PUSH
44604: DOUBLE
44605: LD_INT 1
44607: DEC
44608: ST_TO_ADDR
44609: LD_INT 2
44611: PUSH
44612: FOR_TO
44613: IFFALSE 44740
// begin uc_side := your_side ;
44615: LD_ADDR_OWVAR 20
44619: PUSH
44620: LD_OWVAR 2
44624: ST_TO_ADDR
// uc_nation := nation_american ;
44625: LD_ADDR_OWVAR 21
44629: PUSH
44630: LD_INT 1
44632: ST_TO_ADDR
// vc_chassis := us_morphling ;
44633: LD_ADDR_OWVAR 37
44637: PUSH
44638: LD_INT 5
44640: ST_TO_ADDR
// vc_engine := engine_siberite ;
44641: LD_ADDR_OWVAR 39
44645: PUSH
44646: LD_INT 3
44648: ST_TO_ADDR
// vc_control := control_computer ;
44649: LD_ADDR_OWVAR 38
44653: PUSH
44654: LD_INT 3
44656: ST_TO_ADDR
// vc_weapon := us_double_laser ;
44657: LD_ADDR_OWVAR 40
44661: PUSH
44662: LD_INT 10
44664: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
44665: LD_VAR 0 2
44669: PUSH
44670: LD_INT 1
44672: ARRAY
44673: PPUSH
44674: CALL_OW 310
44678: NOT
44679: IFFALSE 44726
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
44681: CALL_OW 45
44685: PPUSH
44686: LD_VAR 0 2
44690: PUSH
44691: LD_INT 1
44693: ARRAY
44694: PPUSH
44695: CALL_OW 250
44699: PPUSH
44700: LD_VAR 0 2
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: PPUSH
44709: CALL_OW 251
44713: PPUSH
44714: LD_INT 12
44716: PPUSH
44717: LD_INT 1
44719: PPUSH
44720: CALL_OW 50
44724: GO 44738
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
44726: CALL_OW 45
44730: PPUSH
44731: LD_INT 1
44733: PPUSH
44734: CALL_OW 51
// end ;
44738: GO 44612
44740: POP
44741: POP
// end ;
44742: PPOPN 2
44744: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
44745: LD_EXP 87
44749: PUSH
44750: LD_EXP 133
44754: AND
44755: IFFALSE 44977
44757: GO 44759
44759: DISABLE
44760: LD_INT 0
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
44768: LD_ADDR_VAR 0 6
44772: PUSH
44773: LD_INT 22
44775: PUSH
44776: LD_OWVAR 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 21
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: LD_INT 23
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: PPUSH
44817: CALL_OW 69
44821: ST_TO_ADDR
// if not tmp then
44822: LD_VAR 0 6
44826: NOT
44827: IFFALSE 44831
// exit ;
44829: GO 44977
// s1 := rand ( 1 , 4 ) ;
44831: LD_ADDR_VAR 0 2
44835: PUSH
44836: LD_INT 1
44838: PPUSH
44839: LD_INT 4
44841: PPUSH
44842: CALL_OW 12
44846: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
44847: LD_ADDR_VAR 0 4
44851: PUSH
44852: LD_VAR 0 6
44856: PUSH
44857: LD_INT 1
44859: ARRAY
44860: PPUSH
44861: LD_VAR 0 2
44865: PPUSH
44866: CALL_OW 259
44870: ST_TO_ADDR
// if s1 = 1 then
44871: LD_VAR 0 2
44875: PUSH
44876: LD_INT 1
44878: EQUAL
44879: IFFALSE 44899
// s2 := rand ( 2 , 4 ) else
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_INT 2
44888: PPUSH
44889: LD_INT 4
44891: PPUSH
44892: CALL_OW 12
44896: ST_TO_ADDR
44897: GO 44907
// s2 := 1 ;
44899: LD_ADDR_VAR 0 3
44903: PUSH
44904: LD_INT 1
44906: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
44907: LD_ADDR_VAR 0 5
44911: PUSH
44912: LD_VAR 0 6
44916: PUSH
44917: LD_INT 1
44919: ARRAY
44920: PPUSH
44921: LD_VAR 0 3
44925: PPUSH
44926: CALL_OW 259
44930: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
44931: LD_VAR 0 6
44935: PUSH
44936: LD_INT 1
44938: ARRAY
44939: PPUSH
44940: LD_VAR 0 2
44944: PPUSH
44945: LD_VAR 0 5
44949: PPUSH
44950: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
44954: LD_VAR 0 6
44958: PUSH
44959: LD_INT 1
44961: ARRAY
44962: PPUSH
44963: LD_VAR 0 3
44967: PPUSH
44968: LD_VAR 0 4
44972: PPUSH
44973: CALL_OW 237
// end ;
44977: PPOPN 6
44979: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
44980: LD_EXP 87
44984: PUSH
44985: LD_EXP 134
44989: AND
44990: IFFALSE 45069
44992: GO 44994
44994: DISABLE
44995: LD_INT 0
44997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
44998: LD_ADDR_VAR 0 1
45002: PUSH
45003: LD_INT 22
45005: PUSH
45006: LD_OWVAR 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 30
45017: PUSH
45018: LD_INT 3
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PPUSH
45029: CALL_OW 69
45033: ST_TO_ADDR
// if not tmp then
45034: LD_VAR 0 1
45038: NOT
45039: IFFALSE 45043
// exit ;
45041: GO 45069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45043: LD_VAR 0 1
45047: PUSH
45048: LD_INT 1
45050: PPUSH
45051: LD_VAR 0 1
45055: PPUSH
45056: CALL_OW 12
45060: ARRAY
45061: PPUSH
45062: LD_INT 1
45064: PPUSH
45065: CALL_OW 234
// end ;
45069: PPOPN 1
45071: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45072: LD_EXP 87
45076: PUSH
45077: LD_EXP 135
45081: AND
45082: IFFALSE 45194
45084: GO 45086
45086: DISABLE
45087: LD_INT 0
45089: PPUSH
45090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45091: LD_ADDR_VAR 0 2
45095: PUSH
45096: LD_INT 22
45098: PUSH
45099: LD_OWVAR 2
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 30
45113: PUSH
45114: LD_INT 27
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 30
45123: PUSH
45124: LD_INT 26
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 30
45133: PUSH
45134: LD_INT 28
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PPUSH
45151: CALL_OW 69
45155: ST_TO_ADDR
// if not tmp then
45156: LD_VAR 0 2
45160: NOT
45161: IFFALSE 45165
// exit ;
45163: GO 45194
// for i in tmp do
45165: LD_ADDR_VAR 0 1
45169: PUSH
45170: LD_VAR 0 2
45174: PUSH
45175: FOR_IN
45176: IFFALSE 45192
// SetLives ( i , 1 ) ;
45178: LD_VAR 0 1
45182: PPUSH
45183: LD_INT 1
45185: PPUSH
45186: CALL_OW 234
45190: GO 45175
45192: POP
45193: POP
// end ;
45194: PPOPN 2
45196: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45197: LD_EXP 87
45201: PUSH
45202: LD_EXP 136
45206: AND
45207: IFFALSE 45494
45209: GO 45211
45211: DISABLE
45212: LD_INT 0
45214: PPUSH
45215: PPUSH
45216: PPUSH
// begin i := rand ( 1 , 7 ) ;
45217: LD_ADDR_VAR 0 1
45221: PUSH
45222: LD_INT 1
45224: PPUSH
45225: LD_INT 7
45227: PPUSH
45228: CALL_OW 12
45232: ST_TO_ADDR
// case i of 1 :
45233: LD_VAR 0 1
45237: PUSH
45238: LD_INT 1
45240: DOUBLE
45241: EQUAL
45242: IFTRUE 45246
45244: GO 45256
45246: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45247: LD_STRING earthquake(getX(game), 0, 32)
45249: PPUSH
45250: CALL_OW 559
45254: GO 45494
45256: LD_INT 2
45258: DOUBLE
45259: EQUAL
45260: IFTRUE 45264
45262: GO 45278
45264: POP
// begin ToLua ( displayStucuk(); ) ;
45265: LD_STRING displayStucuk();
45267: PPUSH
45268: CALL_OW 559
// ResetFog ;
45272: CALL_OW 335
// end ; 3 :
45276: GO 45494
45278: LD_INT 3
45280: DOUBLE
45281: EQUAL
45282: IFTRUE 45286
45284: GO 45390
45286: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45287: LD_ADDR_VAR 0 2
45291: PUSH
45292: LD_INT 22
45294: PUSH
45295: LD_OWVAR 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 25
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PPUSH
45318: CALL_OW 69
45322: ST_TO_ADDR
// if not tmp then
45323: LD_VAR 0 2
45327: NOT
45328: IFFALSE 45332
// exit ;
45330: GO 45494
// un := tmp [ rand ( 1 , tmp ) ] ;
45332: LD_ADDR_VAR 0 3
45336: PUSH
45337: LD_VAR 0 2
45341: PUSH
45342: LD_INT 1
45344: PPUSH
45345: LD_VAR 0 2
45349: PPUSH
45350: CALL_OW 12
45354: ARRAY
45355: ST_TO_ADDR
// if Crawls ( un ) then
45356: LD_VAR 0 3
45360: PPUSH
45361: CALL_OW 318
45365: IFFALSE 45376
// ComWalk ( un ) ;
45367: LD_VAR 0 3
45371: PPUSH
45372: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45376: LD_VAR 0 3
45380: PPUSH
45381: LD_INT 8
45383: PPUSH
45384: CALL_OW 336
// end ; 4 :
45388: GO 45494
45390: LD_INT 4
45392: DOUBLE
45393: EQUAL
45394: IFTRUE 45398
45396: GO 45472
45398: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45399: LD_ADDR_VAR 0 2
45403: PUSH
45404: LD_INT 22
45406: PUSH
45407: LD_OWVAR 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 30
45418: PUSH
45419: LD_INT 29
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PPUSH
45430: CALL_OW 69
45434: ST_TO_ADDR
// if not tmp then
45435: LD_VAR 0 2
45439: NOT
45440: IFFALSE 45444
// exit ;
45442: GO 45494
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45444: LD_VAR 0 2
45448: PUSH
45449: LD_INT 1
45451: ARRAY
45452: PPUSH
45453: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45457: LD_VAR 0 2
45461: PUSH
45462: LD_INT 1
45464: ARRAY
45465: PPUSH
45466: CALL_OW 65
// end ; 5 .. 7 :
45470: GO 45494
45472: LD_INT 5
45474: DOUBLE
45475: GREATEREQUAL
45476: IFFALSE 45484
45478: LD_INT 7
45480: DOUBLE
45481: LESSEQUAL
45482: IFTRUE 45486
45484: GO 45493
45486: POP
// StreamSibBomb ; end ;
45487: CALL 41731 0 0
45491: GO 45494
45493: POP
// end ;
45494: PPOPN 3
45496: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45497: LD_EXP 87
45501: PUSH
45502: LD_EXP 137
45506: AND
45507: IFFALSE 45663
45509: GO 45511
45511: DISABLE
45512: LD_INT 0
45514: PPUSH
45515: PPUSH
45516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45517: LD_ADDR_VAR 0 2
45521: PUSH
45522: LD_INT 81
45524: PUSH
45525: LD_OWVAR 2
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 21
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 21
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PPUSH
45566: CALL_OW 69
45570: ST_TO_ADDR
// if not tmp then
45571: LD_VAR 0 2
45575: NOT
45576: IFFALSE 45580
// exit ;
45578: GO 45663
// p := 0 ;
45580: LD_ADDR_VAR 0 3
45584: PUSH
45585: LD_INT 0
45587: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45588: LD_INT 35
45590: PPUSH
45591: CALL_OW 67
// p := p + 1 ;
45595: LD_ADDR_VAR 0 3
45599: PUSH
45600: LD_VAR 0 3
45604: PUSH
45605: LD_INT 1
45607: PLUS
45608: ST_TO_ADDR
// for i in tmp do
45609: LD_ADDR_VAR 0 1
45613: PUSH
45614: LD_VAR 0 2
45618: PUSH
45619: FOR_IN
45620: IFFALSE 45651
// if GetLives ( i ) < 1000 then
45622: LD_VAR 0 1
45626: PPUSH
45627: CALL_OW 256
45631: PUSH
45632: LD_INT 1000
45634: LESS
45635: IFFALSE 45649
// SetLives ( i , 1000 ) ;
45637: LD_VAR 0 1
45641: PPUSH
45642: LD_INT 1000
45644: PPUSH
45645: CALL_OW 234
45649: GO 45619
45651: POP
45652: POP
// until p > 20 ;
45653: LD_VAR 0 3
45657: PUSH
45658: LD_INT 20
45660: GREATER
45661: IFFALSE 45588
// end ;
45663: PPOPN 3
45665: END
// every 0 0$1 trigger StreamModeActive and sTime do
45666: LD_EXP 87
45670: PUSH
45671: LD_EXP 138
45675: AND
45676: IFFALSE 45711
45678: GO 45680
45680: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
45681: LD_INT 28
45683: PPUSH
45684: LD_OWVAR 2
45688: PPUSH
45689: LD_INT 2
45691: PPUSH
45692: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
45696: LD_INT 30
45698: PPUSH
45699: LD_OWVAR 2
45703: PPUSH
45704: LD_INT 2
45706: PPUSH
45707: CALL_OW 322
// end ;
45711: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
45712: LD_EXP 87
45716: PUSH
45717: LD_EXP 139
45721: AND
45722: IFFALSE 45843
45724: GO 45726
45726: DISABLE
45727: LD_INT 0
45729: PPUSH
45730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45731: LD_ADDR_VAR 0 2
45735: PUSH
45736: LD_INT 22
45738: PUSH
45739: LD_OWVAR 2
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 21
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 23
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: PPUSH
45780: CALL_OW 69
45784: ST_TO_ADDR
// if not tmp then
45785: LD_VAR 0 2
45789: NOT
45790: IFFALSE 45794
// exit ;
45792: GO 45843
// for i in tmp do
45794: LD_ADDR_VAR 0 1
45798: PUSH
45799: LD_VAR 0 2
45803: PUSH
45804: FOR_IN
45805: IFFALSE 45841
// begin if Crawls ( i ) then
45807: LD_VAR 0 1
45811: PPUSH
45812: CALL_OW 318
45816: IFFALSE 45827
// ComWalk ( i ) ;
45818: LD_VAR 0 1
45822: PPUSH
45823: CALL_OW 138
// SetClass ( i , 2 ) ;
45827: LD_VAR 0 1
45831: PPUSH
45832: LD_INT 2
45834: PPUSH
45835: CALL_OW 336
// end ;
45839: GO 45804
45841: POP
45842: POP
// end ;
45843: PPOPN 2
45845: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
45846: LD_EXP 87
45850: PUSH
45851: LD_EXP 140
45855: AND
45856: IFFALSE 46144
45858: GO 45860
45860: DISABLE
45861: LD_INT 0
45863: PPUSH
45864: PPUSH
45865: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
45866: LD_OWVAR 2
45870: PPUSH
45871: LD_INT 9
45873: PPUSH
45874: LD_INT 1
45876: PPUSH
45877: LD_INT 1
45879: PPUSH
45880: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
45884: LD_INT 9
45886: PPUSH
45887: LD_OWVAR 2
45891: PPUSH
45892: CALL_OW 343
// uc_side := 9 ;
45896: LD_ADDR_OWVAR 20
45900: PUSH
45901: LD_INT 9
45903: ST_TO_ADDR
// uc_nation := 2 ;
45904: LD_ADDR_OWVAR 21
45908: PUSH
45909: LD_INT 2
45911: ST_TO_ADDR
// hc_name := Dark Warrior ;
45912: LD_ADDR_OWVAR 26
45916: PUSH
45917: LD_STRING Dark Warrior
45919: ST_TO_ADDR
// hc_gallery :=  ;
45920: LD_ADDR_OWVAR 33
45924: PUSH
45925: LD_STRING 
45927: ST_TO_ADDR
// hc_noskilllimit := true ;
45928: LD_ADDR_OWVAR 76
45932: PUSH
45933: LD_INT 1
45935: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
45936: LD_ADDR_OWVAR 31
45940: PUSH
45941: LD_INT 30
45943: PUSH
45944: LD_INT 30
45946: PUSH
45947: LD_INT 30
45949: PUSH
45950: LD_INT 30
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: ST_TO_ADDR
// un := CreateHuman ;
45959: LD_ADDR_VAR 0 3
45963: PUSH
45964: CALL_OW 44
45968: ST_TO_ADDR
// hc_noskilllimit := false ;
45969: LD_ADDR_OWVAR 76
45973: PUSH
45974: LD_INT 0
45976: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
45977: LD_VAR 0 3
45981: PPUSH
45982: LD_INT 1
45984: PPUSH
45985: CALL_OW 51
// ToLua ( playRanger() ) ;
45989: LD_STRING playRanger()
45991: PPUSH
45992: CALL_OW 559
// p := 0 ;
45996: LD_ADDR_VAR 0 2
46000: PUSH
46001: LD_INT 0
46003: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46004: LD_INT 35
46006: PPUSH
46007: CALL_OW 67
// p := p + 1 ;
46011: LD_ADDR_VAR 0 2
46015: PUSH
46016: LD_VAR 0 2
46020: PUSH
46021: LD_INT 1
46023: PLUS
46024: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46025: LD_VAR 0 3
46029: PPUSH
46030: CALL_OW 256
46034: PUSH
46035: LD_INT 1000
46037: LESS
46038: IFFALSE 46052
// SetLives ( un , 1000 ) ;
46040: LD_VAR 0 3
46044: PPUSH
46045: LD_INT 1000
46047: PPUSH
46048: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46052: LD_VAR 0 3
46056: PPUSH
46057: LD_INT 81
46059: PUSH
46060: LD_OWVAR 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 91
46071: PUSH
46072: LD_VAR 0 3
46076: PUSH
46077: LD_INT 30
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PPUSH
46089: CALL_OW 69
46093: PPUSH
46094: LD_VAR 0 3
46098: PPUSH
46099: CALL_OW 74
46103: PPUSH
46104: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46108: LD_VAR 0 2
46112: PUSH
46113: LD_INT 80
46115: GREATER
46116: PUSH
46117: LD_VAR 0 3
46121: PPUSH
46122: CALL_OW 301
46126: OR
46127: IFFALSE 46004
// if un then
46129: LD_VAR 0 3
46133: IFFALSE 46144
// RemoveUnit ( un ) ;
46135: LD_VAR 0 3
46139: PPUSH
46140: CALL_OW 64
// end ;
46144: PPOPN 3
46146: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46147: LD_EXP 141
46151: IFFALSE 46267
46153: GO 46155
46155: DISABLE
46156: LD_INT 0
46158: PPUSH
46159: PPUSH
46160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46161: LD_ADDR_VAR 0 2
46165: PUSH
46166: LD_INT 81
46168: PUSH
46169: LD_OWVAR 2
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 21
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PPUSH
46192: CALL_OW 69
46196: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46197: LD_STRING playComputer()
46199: PPUSH
46200: CALL_OW 559
// if not tmp then
46204: LD_VAR 0 2
46208: NOT
46209: IFFALSE 46213
// exit ;
46211: GO 46267
// for i in tmp do
46213: LD_ADDR_VAR 0 1
46217: PUSH
46218: LD_VAR 0 2
46222: PUSH
46223: FOR_IN
46224: IFFALSE 46265
// for j := 1 to 4 do
46226: LD_ADDR_VAR 0 3
46230: PUSH
46231: DOUBLE
46232: LD_INT 1
46234: DEC
46235: ST_TO_ADDR
46236: LD_INT 4
46238: PUSH
46239: FOR_TO
46240: IFFALSE 46261
// SetSkill ( i , j , 10 ) ;
46242: LD_VAR 0 1
46246: PPUSH
46247: LD_VAR 0 3
46251: PPUSH
46252: LD_INT 10
46254: PPUSH
46255: CALL_OW 237
46259: GO 46239
46261: POP
46262: POP
46263: GO 46223
46265: POP
46266: POP
// end ;
46267: PPOPN 3
46269: END
// every 0 0$1 trigger s30 do var i , tmp ;
46270: LD_EXP 142
46274: IFFALSE 46343
46276: GO 46278
46278: DISABLE
46279: LD_INT 0
46281: PPUSH
46282: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46283: LD_ADDR_VAR 0 2
46287: PUSH
46288: LD_INT 22
46290: PUSH
46291: LD_OWVAR 2
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PPUSH
46300: CALL_OW 69
46304: ST_TO_ADDR
// if not tmp then
46305: LD_VAR 0 2
46309: NOT
46310: IFFALSE 46314
// exit ;
46312: GO 46343
// for i in tmp do
46314: LD_ADDR_VAR 0 1
46318: PUSH
46319: LD_VAR 0 2
46323: PUSH
46324: FOR_IN
46325: IFFALSE 46341
// SetLives ( i , 300 ) ;
46327: LD_VAR 0 1
46331: PPUSH
46332: LD_INT 300
46334: PPUSH
46335: CALL_OW 234
46339: GO 46324
46341: POP
46342: POP
// end ;
46343: PPOPN 2
46345: END
// every 0 0$1 trigger s60 do var i , tmp ;
46346: LD_EXP 143
46350: IFFALSE 46419
46352: GO 46354
46354: DISABLE
46355: LD_INT 0
46357: PPUSH
46358: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46359: LD_ADDR_VAR 0 2
46363: PUSH
46364: LD_INT 22
46366: PUSH
46367: LD_OWVAR 2
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PPUSH
46376: CALL_OW 69
46380: ST_TO_ADDR
// if not tmp then
46381: LD_VAR 0 2
46385: NOT
46386: IFFALSE 46390
// exit ;
46388: GO 46419
// for i in tmp do
46390: LD_ADDR_VAR 0 1
46394: PUSH
46395: LD_VAR 0 2
46399: PUSH
46400: FOR_IN
46401: IFFALSE 46417
// SetLives ( i , 600 ) ;
46403: LD_VAR 0 1
46407: PPUSH
46408: LD_INT 600
46410: PPUSH
46411: CALL_OW 234
46415: GO 46400
46417: POP
46418: POP
// end ;
46419: PPOPN 2
46421: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46422: LD_INT 0
46424: PPUSH
// case cmd of 301 :
46425: LD_VAR 0 1
46429: PUSH
46430: LD_INT 301
46432: DOUBLE
46433: EQUAL
46434: IFTRUE 46438
46436: GO 46470
46438: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46439: LD_VAR 0 6
46443: PPUSH
46444: LD_VAR 0 7
46448: PPUSH
46449: LD_VAR 0 8
46453: PPUSH
46454: LD_VAR 0 4
46458: PPUSH
46459: LD_VAR 0 5
46463: PPUSH
46464: CALL 47679 0 5
46468: GO 46591
46470: LD_INT 302
46472: DOUBLE
46473: EQUAL
46474: IFTRUE 46478
46476: GO 46515
46478: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46479: LD_VAR 0 6
46483: PPUSH
46484: LD_VAR 0 7
46488: PPUSH
46489: LD_VAR 0 8
46493: PPUSH
46494: LD_VAR 0 9
46498: PPUSH
46499: LD_VAR 0 4
46503: PPUSH
46504: LD_VAR 0 5
46508: PPUSH
46509: CALL 47770 0 6
46513: GO 46591
46515: LD_INT 303
46517: DOUBLE
46518: EQUAL
46519: IFTRUE 46523
46521: GO 46560
46523: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46524: LD_VAR 0 6
46528: PPUSH
46529: LD_VAR 0 7
46533: PPUSH
46534: LD_VAR 0 8
46538: PPUSH
46539: LD_VAR 0 9
46543: PPUSH
46544: LD_VAR 0 4
46548: PPUSH
46549: LD_VAR 0 5
46553: PPUSH
46554: CALL 46596 0 6
46558: GO 46591
46560: LD_INT 304
46562: DOUBLE
46563: EQUAL
46564: IFTRUE 46568
46566: GO 46590
46568: POP
// hHackTeleport ( unit , x , y ) ; end ;
46569: LD_VAR 0 2
46573: PPUSH
46574: LD_VAR 0 4
46578: PPUSH
46579: LD_VAR 0 5
46583: PPUSH
46584: CALL 48363 0 3
46588: GO 46591
46590: POP
// end ;
46591: LD_VAR 0 12
46595: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
46596: LD_INT 0
46598: PPUSH
46599: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
46600: LD_VAR 0 1
46604: PUSH
46605: LD_INT 1
46607: LESS
46608: PUSH
46609: LD_VAR 0 1
46613: PUSH
46614: LD_INT 3
46616: GREATER
46617: OR
46618: PUSH
46619: LD_VAR 0 5
46623: PPUSH
46624: LD_VAR 0 6
46628: PPUSH
46629: CALL_OW 428
46633: OR
46634: IFFALSE 46638
// exit ;
46636: GO 47366
// uc_side := your_side ;
46638: LD_ADDR_OWVAR 20
46642: PUSH
46643: LD_OWVAR 2
46647: ST_TO_ADDR
// uc_nation := nation ;
46648: LD_ADDR_OWVAR 21
46652: PUSH
46653: LD_VAR 0 1
46657: ST_TO_ADDR
// bc_level = 1 ;
46658: LD_ADDR_OWVAR 43
46662: PUSH
46663: LD_INT 1
46665: ST_TO_ADDR
// case btype of 1 :
46666: LD_VAR 0 2
46670: PUSH
46671: LD_INT 1
46673: DOUBLE
46674: EQUAL
46675: IFTRUE 46679
46677: GO 46690
46679: POP
// bc_type := b_depot ; 2 :
46680: LD_ADDR_OWVAR 42
46684: PUSH
46685: LD_INT 0
46687: ST_TO_ADDR
46688: GO 47310
46690: LD_INT 2
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46709
46698: POP
// bc_type := b_warehouse ; 3 :
46699: LD_ADDR_OWVAR 42
46703: PUSH
46704: LD_INT 1
46706: ST_TO_ADDR
46707: GO 47310
46709: LD_INT 3
46711: DOUBLE
46712: EQUAL
46713: IFTRUE 46717
46715: GO 46728
46717: POP
// bc_type := b_lab ; 4 .. 9 :
46718: LD_ADDR_OWVAR 42
46722: PUSH
46723: LD_INT 6
46725: ST_TO_ADDR
46726: GO 47310
46728: LD_INT 4
46730: DOUBLE
46731: GREATEREQUAL
46732: IFFALSE 46740
46734: LD_INT 9
46736: DOUBLE
46737: LESSEQUAL
46738: IFTRUE 46742
46740: GO 46802
46742: POP
// begin bc_type := b_lab_half ;
46743: LD_ADDR_OWVAR 42
46747: PUSH
46748: LD_INT 7
46750: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
46751: LD_ADDR_OWVAR 44
46755: PUSH
46756: LD_INT 10
46758: PUSH
46759: LD_INT 11
46761: PUSH
46762: LD_INT 12
46764: PUSH
46765: LD_INT 15
46767: PUSH
46768: LD_INT 14
46770: PUSH
46771: LD_INT 13
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: PUSH
46782: LD_VAR 0 2
46786: PUSH
46787: LD_INT 3
46789: MINUS
46790: ARRAY
46791: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
46792: LD_ADDR_OWVAR 45
46796: PUSH
46797: LD_INT 9
46799: ST_TO_ADDR
// end ; 10 .. 13 :
46800: GO 47310
46802: LD_INT 10
46804: DOUBLE
46805: GREATEREQUAL
46806: IFFALSE 46814
46808: LD_INT 13
46810: DOUBLE
46811: LESSEQUAL
46812: IFTRUE 46816
46814: GO 46893
46816: POP
// begin bc_type := b_lab_full ;
46817: LD_ADDR_OWVAR 42
46821: PUSH
46822: LD_INT 8
46824: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
46825: LD_ADDR_OWVAR 44
46829: PUSH
46830: LD_INT 10
46832: PUSH
46833: LD_INT 12
46835: PUSH
46836: LD_INT 14
46838: PUSH
46839: LD_INT 13
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: PUSH
46848: LD_VAR 0 2
46852: PUSH
46853: LD_INT 9
46855: MINUS
46856: ARRAY
46857: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
46858: LD_ADDR_OWVAR 45
46862: PUSH
46863: LD_INT 11
46865: PUSH
46866: LD_INT 15
46868: PUSH
46869: LD_INT 12
46871: PUSH
46872: LD_INT 15
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: PUSH
46881: LD_VAR 0 2
46885: PUSH
46886: LD_INT 9
46888: MINUS
46889: ARRAY
46890: ST_TO_ADDR
// end ; 14 :
46891: GO 47310
46893: LD_INT 14
46895: DOUBLE
46896: EQUAL
46897: IFTRUE 46901
46899: GO 46912
46901: POP
// bc_type := b_workshop ; 15 :
46902: LD_ADDR_OWVAR 42
46906: PUSH
46907: LD_INT 2
46909: ST_TO_ADDR
46910: GO 47310
46912: LD_INT 15
46914: DOUBLE
46915: EQUAL
46916: IFTRUE 46920
46918: GO 46931
46920: POP
// bc_type := b_factory ; 16 :
46921: LD_ADDR_OWVAR 42
46925: PUSH
46926: LD_INT 3
46928: ST_TO_ADDR
46929: GO 47310
46931: LD_INT 16
46933: DOUBLE
46934: EQUAL
46935: IFTRUE 46939
46937: GO 46950
46939: POP
// bc_type := b_ext_gun ; 17 :
46940: LD_ADDR_OWVAR 42
46944: PUSH
46945: LD_INT 17
46947: ST_TO_ADDR
46948: GO 47310
46950: LD_INT 17
46952: DOUBLE
46953: EQUAL
46954: IFTRUE 46958
46956: GO 46986
46958: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
46959: LD_ADDR_OWVAR 42
46963: PUSH
46964: LD_INT 19
46966: PUSH
46967: LD_INT 23
46969: PUSH
46970: LD_INT 19
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: PUSH
46978: LD_VAR 0 1
46982: ARRAY
46983: ST_TO_ADDR
46984: GO 47310
46986: LD_INT 18
46988: DOUBLE
46989: EQUAL
46990: IFTRUE 46994
46992: GO 47005
46994: POP
// bc_type := b_ext_radar ; 19 :
46995: LD_ADDR_OWVAR 42
46999: PUSH
47000: LD_INT 20
47002: ST_TO_ADDR
47003: GO 47310
47005: LD_INT 19
47007: DOUBLE
47008: EQUAL
47009: IFTRUE 47013
47011: GO 47024
47013: POP
// bc_type := b_ext_radio ; 20 :
47014: LD_ADDR_OWVAR 42
47018: PUSH
47019: LD_INT 22
47021: ST_TO_ADDR
47022: GO 47310
47024: LD_INT 20
47026: DOUBLE
47027: EQUAL
47028: IFTRUE 47032
47030: GO 47043
47032: POP
// bc_type := b_ext_siberium ; 21 :
47033: LD_ADDR_OWVAR 42
47037: PUSH
47038: LD_INT 21
47040: ST_TO_ADDR
47041: GO 47310
47043: LD_INT 21
47045: DOUBLE
47046: EQUAL
47047: IFTRUE 47051
47049: GO 47062
47051: POP
// bc_type := b_ext_computer ; 22 :
47052: LD_ADDR_OWVAR 42
47056: PUSH
47057: LD_INT 24
47059: ST_TO_ADDR
47060: GO 47310
47062: LD_INT 22
47064: DOUBLE
47065: EQUAL
47066: IFTRUE 47070
47068: GO 47081
47070: POP
// bc_type := b_ext_track ; 23 :
47071: LD_ADDR_OWVAR 42
47075: PUSH
47076: LD_INT 16
47078: ST_TO_ADDR
47079: GO 47310
47081: LD_INT 23
47083: DOUBLE
47084: EQUAL
47085: IFTRUE 47089
47087: GO 47100
47089: POP
// bc_type := b_ext_laser ; 24 :
47090: LD_ADDR_OWVAR 42
47094: PUSH
47095: LD_INT 25
47097: ST_TO_ADDR
47098: GO 47310
47100: LD_INT 24
47102: DOUBLE
47103: EQUAL
47104: IFTRUE 47108
47106: GO 47119
47108: POP
// bc_type := b_control_tower ; 25 :
47109: LD_ADDR_OWVAR 42
47113: PUSH
47114: LD_INT 36
47116: ST_TO_ADDR
47117: GO 47310
47119: LD_INT 25
47121: DOUBLE
47122: EQUAL
47123: IFTRUE 47127
47125: GO 47138
47127: POP
// bc_type := b_breastwork ; 26 :
47128: LD_ADDR_OWVAR 42
47132: PUSH
47133: LD_INT 31
47135: ST_TO_ADDR
47136: GO 47310
47138: LD_INT 26
47140: DOUBLE
47141: EQUAL
47142: IFTRUE 47146
47144: GO 47157
47146: POP
// bc_type := b_bunker ; 27 :
47147: LD_ADDR_OWVAR 42
47151: PUSH
47152: LD_INT 32
47154: ST_TO_ADDR
47155: GO 47310
47157: LD_INT 27
47159: DOUBLE
47160: EQUAL
47161: IFTRUE 47165
47163: GO 47176
47165: POP
// bc_type := b_turret ; 28 :
47166: LD_ADDR_OWVAR 42
47170: PUSH
47171: LD_INT 33
47173: ST_TO_ADDR
47174: GO 47310
47176: LD_INT 28
47178: DOUBLE
47179: EQUAL
47180: IFTRUE 47184
47182: GO 47195
47184: POP
// bc_type := b_armoury ; 29 :
47185: LD_ADDR_OWVAR 42
47189: PUSH
47190: LD_INT 4
47192: ST_TO_ADDR
47193: GO 47310
47195: LD_INT 29
47197: DOUBLE
47198: EQUAL
47199: IFTRUE 47203
47201: GO 47214
47203: POP
// bc_type := b_barracks ; 30 :
47204: LD_ADDR_OWVAR 42
47208: PUSH
47209: LD_INT 5
47211: ST_TO_ADDR
47212: GO 47310
47214: LD_INT 30
47216: DOUBLE
47217: EQUAL
47218: IFTRUE 47222
47220: GO 47233
47222: POP
// bc_type := b_solar_power ; 31 :
47223: LD_ADDR_OWVAR 42
47227: PUSH
47228: LD_INT 27
47230: ST_TO_ADDR
47231: GO 47310
47233: LD_INT 31
47235: DOUBLE
47236: EQUAL
47237: IFTRUE 47241
47239: GO 47252
47241: POP
// bc_type := b_oil_power ; 32 :
47242: LD_ADDR_OWVAR 42
47246: PUSH
47247: LD_INT 26
47249: ST_TO_ADDR
47250: GO 47310
47252: LD_INT 32
47254: DOUBLE
47255: EQUAL
47256: IFTRUE 47260
47258: GO 47271
47260: POP
// bc_type := b_siberite_power ; 33 :
47261: LD_ADDR_OWVAR 42
47265: PUSH
47266: LD_INT 28
47268: ST_TO_ADDR
47269: GO 47310
47271: LD_INT 33
47273: DOUBLE
47274: EQUAL
47275: IFTRUE 47279
47277: GO 47290
47279: POP
// bc_type := b_oil_mine ; 34 :
47280: LD_ADDR_OWVAR 42
47284: PUSH
47285: LD_INT 29
47287: ST_TO_ADDR
47288: GO 47310
47290: LD_INT 34
47292: DOUBLE
47293: EQUAL
47294: IFTRUE 47298
47296: GO 47309
47298: POP
// bc_type := b_siberite_mine ; end ;
47299: LD_ADDR_OWVAR 42
47303: PUSH
47304: LD_INT 30
47306: ST_TO_ADDR
47307: GO 47310
47309: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47310: LD_ADDR_VAR 0 8
47314: PUSH
47315: LD_VAR 0 5
47319: PPUSH
47320: LD_VAR 0 6
47324: PPUSH
47325: LD_VAR 0 3
47329: PPUSH
47330: CALL_OW 47
47334: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47335: LD_OWVAR 42
47339: PUSH
47340: LD_INT 32
47342: PUSH
47343: LD_INT 33
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: IN
47350: IFFALSE 47366
// PlaceWeaponTurret ( b , weapon ) ;
47352: LD_VAR 0 8
47356: PPUSH
47357: LD_VAR 0 4
47361: PPUSH
47362: CALL_OW 431
// end ;
47366: LD_VAR 0 7
47370: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47371: LD_INT 0
47373: PPUSH
47374: PPUSH
47375: PPUSH
47376: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47377: LD_ADDR_VAR 0 4
47381: PUSH
47382: LD_INT 22
47384: PUSH
47385: LD_OWVAR 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 30
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 30
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PPUSH
47426: CALL_OW 69
47430: ST_TO_ADDR
// if not tmp then
47431: LD_VAR 0 4
47435: NOT
47436: IFFALSE 47440
// exit ;
47438: GO 47499
// for i in tmp do
47440: LD_ADDR_VAR 0 2
47444: PUSH
47445: LD_VAR 0 4
47449: PUSH
47450: FOR_IN
47451: IFFALSE 47497
// for j = 1 to 3 do
47453: LD_ADDR_VAR 0 3
47457: PUSH
47458: DOUBLE
47459: LD_INT 1
47461: DEC
47462: ST_TO_ADDR
47463: LD_INT 3
47465: PUSH
47466: FOR_TO
47467: IFFALSE 47493
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47469: LD_VAR 0 2
47473: PPUSH
47474: CALL_OW 274
47478: PPUSH
47479: LD_VAR 0 3
47483: PPUSH
47484: LD_INT 99999
47486: PPUSH
47487: CALL_OW 277
47491: GO 47466
47493: POP
47494: POP
47495: GO 47450
47497: POP
47498: POP
// end ;
47499: LD_VAR 0 1
47503: RET
// export function hHackSetLevel10 ; var i , j ; begin
47504: LD_INT 0
47506: PPUSH
47507: PPUSH
47508: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47509: LD_ADDR_VAR 0 2
47513: PUSH
47514: LD_INT 21
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PPUSH
47524: CALL_OW 69
47528: PUSH
47529: FOR_IN
47530: IFFALSE 47582
// if IsSelected ( i ) then
47532: LD_VAR 0 2
47536: PPUSH
47537: CALL_OW 306
47541: IFFALSE 47580
// begin for j := 1 to 4 do
47543: LD_ADDR_VAR 0 3
47547: PUSH
47548: DOUBLE
47549: LD_INT 1
47551: DEC
47552: ST_TO_ADDR
47553: LD_INT 4
47555: PUSH
47556: FOR_TO
47557: IFFALSE 47578
// SetSkill ( i , j , 10 ) ;
47559: LD_VAR 0 2
47563: PPUSH
47564: LD_VAR 0 3
47568: PPUSH
47569: LD_INT 10
47571: PPUSH
47572: CALL_OW 237
47576: GO 47556
47578: POP
47579: POP
// end ;
47580: GO 47529
47582: POP
47583: POP
// end ;
47584: LD_VAR 0 1
47588: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
47589: LD_INT 0
47591: PPUSH
47592: PPUSH
47593: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
47594: LD_ADDR_VAR 0 2
47598: PUSH
47599: LD_INT 22
47601: PUSH
47602: LD_OWVAR 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 21
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PPUSH
47625: CALL_OW 69
47629: PUSH
47630: FOR_IN
47631: IFFALSE 47672
// begin for j := 1 to 4 do
47633: LD_ADDR_VAR 0 3
47637: PUSH
47638: DOUBLE
47639: LD_INT 1
47641: DEC
47642: ST_TO_ADDR
47643: LD_INT 4
47645: PUSH
47646: FOR_TO
47647: IFFALSE 47668
// SetSkill ( i , j , 10 ) ;
47649: LD_VAR 0 2
47653: PPUSH
47654: LD_VAR 0 3
47658: PPUSH
47659: LD_INT 10
47661: PPUSH
47662: CALL_OW 237
47666: GO 47646
47668: POP
47669: POP
// end ;
47670: GO 47630
47672: POP
47673: POP
// end ;
47674: LD_VAR 0 1
47678: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
47679: LD_INT 0
47681: PPUSH
// uc_side := your_side ;
47682: LD_ADDR_OWVAR 20
47686: PUSH
47687: LD_OWVAR 2
47691: ST_TO_ADDR
// uc_nation := nation ;
47692: LD_ADDR_OWVAR 21
47696: PUSH
47697: LD_VAR 0 1
47701: ST_TO_ADDR
// InitHc ;
47702: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
47706: LD_INT 0
47708: PPUSH
47709: LD_VAR 0 2
47713: PPUSH
47714: LD_VAR 0 3
47718: PPUSH
47719: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
47723: LD_VAR 0 4
47727: PPUSH
47728: LD_VAR 0 5
47732: PPUSH
47733: CALL_OW 428
47737: PUSH
47738: LD_INT 0
47740: EQUAL
47741: IFFALSE 47765
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
47743: CALL_OW 44
47747: PPUSH
47748: LD_VAR 0 4
47752: PPUSH
47753: LD_VAR 0 5
47757: PPUSH
47758: LD_INT 1
47760: PPUSH
47761: CALL_OW 48
// end ;
47765: LD_VAR 0 6
47769: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
47770: LD_INT 0
47772: PPUSH
47773: PPUSH
// uc_side := your_side ;
47774: LD_ADDR_OWVAR 20
47778: PUSH
47779: LD_OWVAR 2
47783: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
47784: LD_VAR 0 1
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: LD_INT 4
47800: PUSH
47801: LD_INT 5
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: IN
47811: IFFALSE 47823
// uc_nation := nation_american else
47813: LD_ADDR_OWVAR 21
47817: PUSH
47818: LD_INT 1
47820: ST_TO_ADDR
47821: GO 47866
// if chassis in [ 11 , 12 , 13 , 14 ] then
47823: LD_VAR 0 1
47827: PUSH
47828: LD_INT 11
47830: PUSH
47831: LD_INT 12
47833: PUSH
47834: LD_INT 13
47836: PUSH
47837: LD_INT 14
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: IN
47846: IFFALSE 47858
// uc_nation := nation_arabian else
47848: LD_ADDR_OWVAR 21
47852: PUSH
47853: LD_INT 2
47855: ST_TO_ADDR
47856: GO 47866
// uc_nation := nation_russian ;
47858: LD_ADDR_OWVAR 21
47862: PUSH
47863: LD_INT 3
47865: ST_TO_ADDR
// vc_chassis := chassis ;
47866: LD_ADDR_OWVAR 37
47870: PUSH
47871: LD_VAR 0 1
47875: ST_TO_ADDR
// vc_engine := engine ;
47876: LD_ADDR_OWVAR 39
47880: PUSH
47881: LD_VAR 0 2
47885: ST_TO_ADDR
// vc_control := control ;
47886: LD_ADDR_OWVAR 38
47890: PUSH
47891: LD_VAR 0 3
47895: ST_TO_ADDR
// vc_weapon := weapon ;
47896: LD_ADDR_OWVAR 40
47900: PUSH
47901: LD_VAR 0 4
47905: ST_TO_ADDR
// un := CreateVehicle ;
47906: LD_ADDR_VAR 0 8
47910: PUSH
47911: CALL_OW 45
47915: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
47916: LD_VAR 0 8
47920: PPUSH
47921: LD_INT 0
47923: PPUSH
47924: LD_INT 5
47926: PPUSH
47927: CALL_OW 12
47931: PPUSH
47932: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
47936: LD_VAR 0 8
47940: PPUSH
47941: LD_VAR 0 5
47945: PPUSH
47946: LD_VAR 0 6
47950: PPUSH
47951: LD_INT 1
47953: PPUSH
47954: CALL_OW 48
// end ;
47958: LD_VAR 0 7
47962: RET
// export hInvincible ; every 1 do
47963: GO 47965
47965: DISABLE
// hInvincible := [ ] ;
47966: LD_ADDR_EXP 144
47970: PUSH
47971: EMPTY
47972: ST_TO_ADDR
47973: END
// every 10 do var i ;
47974: GO 47976
47976: DISABLE
47977: LD_INT 0
47979: PPUSH
// begin enable ;
47980: ENABLE
// if not hInvincible then
47981: LD_EXP 144
47985: NOT
47986: IFFALSE 47990
// exit ;
47988: GO 48034
// for i in hInvincible do
47990: LD_ADDR_VAR 0 1
47994: PUSH
47995: LD_EXP 144
47999: PUSH
48000: FOR_IN
48001: IFFALSE 48032
// if GetLives ( i ) < 1000 then
48003: LD_VAR 0 1
48007: PPUSH
48008: CALL_OW 256
48012: PUSH
48013: LD_INT 1000
48015: LESS
48016: IFFALSE 48030
// SetLives ( i , 1000 ) ;
48018: LD_VAR 0 1
48022: PPUSH
48023: LD_INT 1000
48025: PPUSH
48026: CALL_OW 234
48030: GO 48000
48032: POP
48033: POP
// end ;
48034: PPOPN 1
48036: END
// export function hHackInvincible ; var i ; begin
48037: LD_INT 0
48039: PPUSH
48040: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48041: LD_ADDR_VAR 0 2
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 21
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 21
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: PPUSH
48074: CALL_OW 69
48078: PUSH
48079: FOR_IN
48080: IFFALSE 48141
// if IsSelected ( i ) then
48082: LD_VAR 0 2
48086: PPUSH
48087: CALL_OW 306
48091: IFFALSE 48139
// begin if i in hInvincible then
48093: LD_VAR 0 2
48097: PUSH
48098: LD_EXP 144
48102: IN
48103: IFFALSE 48123
// hInvincible := hInvincible diff i else
48105: LD_ADDR_EXP 144
48109: PUSH
48110: LD_EXP 144
48114: PUSH
48115: LD_VAR 0 2
48119: DIFF
48120: ST_TO_ADDR
48121: GO 48139
// hInvincible := hInvincible union i ;
48123: LD_ADDR_EXP 144
48127: PUSH
48128: LD_EXP 144
48132: PUSH
48133: LD_VAR 0 2
48137: UNION
48138: ST_TO_ADDR
// end ;
48139: GO 48079
48141: POP
48142: POP
// end ;
48143: LD_VAR 0 1
48147: RET
// export function hHackInvisible ; var i , j ; begin
48148: LD_INT 0
48150: PPUSH
48151: PPUSH
48152: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48153: LD_ADDR_VAR 0 2
48157: PUSH
48158: LD_INT 21
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PPUSH
48168: CALL_OW 69
48172: PUSH
48173: FOR_IN
48174: IFFALSE 48198
// if IsSelected ( i ) then
48176: LD_VAR 0 2
48180: PPUSH
48181: CALL_OW 306
48185: IFFALSE 48196
// ComForceInvisible ( i ) ;
48187: LD_VAR 0 2
48191: PPUSH
48192: CALL_OW 496
48196: GO 48173
48198: POP
48199: POP
// end ;
48200: LD_VAR 0 1
48204: RET
// export function hHackChangeYourSide ; begin
48205: LD_INT 0
48207: PPUSH
// if your_side = 8 then
48208: LD_OWVAR 2
48212: PUSH
48213: LD_INT 8
48215: EQUAL
48216: IFFALSE 48228
// your_side := 0 else
48218: LD_ADDR_OWVAR 2
48222: PUSH
48223: LD_INT 0
48225: ST_TO_ADDR
48226: GO 48242
// your_side := your_side + 1 ;
48228: LD_ADDR_OWVAR 2
48232: PUSH
48233: LD_OWVAR 2
48237: PUSH
48238: LD_INT 1
48240: PLUS
48241: ST_TO_ADDR
// end ;
48242: LD_VAR 0 1
48246: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48247: LD_INT 0
48249: PPUSH
48250: PPUSH
48251: PPUSH
// for i in all_units do
48252: LD_ADDR_VAR 0 2
48256: PUSH
48257: LD_OWVAR 3
48261: PUSH
48262: FOR_IN
48263: IFFALSE 48341
// if IsSelected ( i ) then
48265: LD_VAR 0 2
48269: PPUSH
48270: CALL_OW 306
48274: IFFALSE 48339
// begin j := GetSide ( i ) ;
48276: LD_ADDR_VAR 0 3
48280: PUSH
48281: LD_VAR 0 2
48285: PPUSH
48286: CALL_OW 255
48290: ST_TO_ADDR
// if j = 8 then
48291: LD_VAR 0 3
48295: PUSH
48296: LD_INT 8
48298: EQUAL
48299: IFFALSE 48311
// j := 0 else
48301: LD_ADDR_VAR 0 3
48305: PUSH
48306: LD_INT 0
48308: ST_TO_ADDR
48309: GO 48325
// j := j + 1 ;
48311: LD_ADDR_VAR 0 3
48315: PUSH
48316: LD_VAR 0 3
48320: PUSH
48321: LD_INT 1
48323: PLUS
48324: ST_TO_ADDR
// SetSide ( i , j ) ;
48325: LD_VAR 0 2
48329: PPUSH
48330: LD_VAR 0 3
48334: PPUSH
48335: CALL_OW 235
// end ;
48339: GO 48262
48341: POP
48342: POP
// end ;
48343: LD_VAR 0 1
48347: RET
// export function hHackFog ; begin
48348: LD_INT 0
48350: PPUSH
// FogOff ( true ) ;
48351: LD_INT 1
48353: PPUSH
48354: CALL_OW 344
// end ;
48358: LD_VAR 0 1
48362: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48363: LD_INT 0
48365: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48366: LD_VAR 0 1
48370: PPUSH
48371: LD_VAR 0 2
48375: PPUSH
48376: LD_VAR 0 3
48380: PPUSH
48381: LD_INT 1
48383: PPUSH
48384: LD_INT 1
48386: PPUSH
48387: CALL_OW 483
// CenterOnXY ( x , y ) ;
48391: LD_VAR 0 2
48395: PPUSH
48396: LD_VAR 0 3
48400: PPUSH
48401: CALL_OW 84
// end ;
48405: LD_VAR 0 4
48409: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48410: LD_INT 0
48412: PPUSH
48413: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48414: LD_VAR 0 1
48418: NOT
48419: PUSH
48420: LD_VAR 0 2
48424: PPUSH
48425: LD_VAR 0 3
48429: PPUSH
48430: CALL_OW 488
48434: NOT
48435: OR
48436: PUSH
48437: LD_VAR 0 1
48441: PPUSH
48442: CALL_OW 266
48446: PUSH
48447: LD_INT 3
48449: NONEQUAL
48450: PUSH
48451: LD_VAR 0 1
48455: PPUSH
48456: CALL_OW 247
48460: PUSH
48461: LD_INT 1
48463: EQUAL
48464: NOT
48465: AND
48466: OR
48467: IFFALSE 48471
// exit ;
48469: GO 48753
// if GetType ( factory ) = unit_human then
48471: LD_VAR 0 1
48475: PPUSH
48476: CALL_OW 247
48480: PUSH
48481: LD_INT 1
48483: EQUAL
48484: IFFALSE 48501
// factory := IsInUnit ( factory ) ;
48486: LD_ADDR_VAR 0 1
48490: PUSH
48491: LD_VAR 0 1
48495: PPUSH
48496: CALL_OW 310
48500: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48501: LD_VAR 0 1
48505: PPUSH
48506: CALL_OW 266
48510: PUSH
48511: LD_INT 3
48513: NONEQUAL
48514: IFFALSE 48518
// exit ;
48516: GO 48753
// for i := 1 to Count ( factoryWaypoints ) do
48518: LD_ADDR_VAR 0 5
48522: PUSH
48523: DOUBLE
48524: LD_INT 1
48526: DEC
48527: ST_TO_ADDR
48528: LD_EXP 145
48532: PPUSH
48533: CALL 57256 0 1
48537: PUSH
48538: FOR_TO
48539: IFFALSE 48701
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
48541: LD_VAR 0 2
48545: PPUSH
48546: LD_VAR 0 3
48550: PPUSH
48551: CALL_OW 428
48555: PUSH
48556: LD_EXP 145
48560: PUSH
48561: LD_VAR 0 5
48565: ARRAY
48566: PUSH
48567: LD_INT 2
48569: ARRAY
48570: EQUAL
48571: IFFALSE 48603
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
48573: LD_ADDR_EXP 145
48577: PUSH
48578: LD_EXP 145
48582: PPUSH
48583: LD_VAR 0 5
48587: PPUSH
48588: CALL_OW 3
48592: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48593: CALL 48758 0 0
// exit ;
48597: POP
48598: POP
48599: GO 48753
// end else
48601: GO 48699
// if factory = factoryWaypoints [ i ] [ 2 ] then
48603: LD_VAR 0 1
48607: PUSH
48608: LD_EXP 145
48612: PUSH
48613: LD_VAR 0 5
48617: ARRAY
48618: PUSH
48619: LD_INT 2
48621: ARRAY
48622: EQUAL
48623: IFFALSE 48699
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
48625: LD_ADDR_EXP 145
48629: PUSH
48630: LD_EXP 145
48634: PPUSH
48635: LD_VAR 0 5
48639: PPUSH
48640: CALL_OW 3
48644: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
48645: LD_ADDR_EXP 145
48649: PUSH
48650: LD_EXP 145
48654: PPUSH
48655: LD_VAR 0 1
48659: PPUSH
48660: CALL_OW 255
48664: PUSH
48665: LD_VAR 0 1
48669: PUSH
48670: LD_VAR 0 2
48674: PUSH
48675: LD_VAR 0 3
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: LIST
48684: LIST
48685: PPUSH
48686: CALL 92865 0 2
48690: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48691: CALL 48758 0 0
// exit ;
48695: POP
48696: POP
48697: GO 48753
// end ; end ;
48699: GO 48538
48701: POP
48702: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
48703: LD_ADDR_EXP 145
48707: PUSH
48708: LD_EXP 145
48712: PPUSH
48713: LD_VAR 0 1
48717: PPUSH
48718: CALL_OW 255
48722: PUSH
48723: LD_VAR 0 1
48727: PUSH
48728: LD_VAR 0 2
48732: PUSH
48733: LD_VAR 0 3
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: PPUSH
48744: CALL 92865 0 2
48748: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48749: CALL 48758 0 0
// end ;
48753: LD_VAR 0 4
48757: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
48758: LD_INT 0
48760: PPUSH
48761: PPUSH
48762: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
48763: LD_STRING resetFactoryWaypoint();
48765: PPUSH
48766: CALL_OW 559
// if factoryWaypoints then
48770: LD_EXP 145
48774: IFFALSE 48895
// begin list := factoryWaypoints ;
48776: LD_ADDR_VAR 0 3
48780: PUSH
48781: LD_EXP 145
48785: ST_TO_ADDR
// for i := 1 to list do
48786: LD_ADDR_VAR 0 2
48790: PUSH
48791: DOUBLE
48792: LD_INT 1
48794: DEC
48795: ST_TO_ADDR
48796: LD_VAR 0 3
48800: PUSH
48801: FOR_TO
48802: IFFALSE 48893
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48804: LD_STRING setFactoryWaypointXY(
48806: PUSH
48807: LD_VAR 0 3
48811: PUSH
48812: LD_VAR 0 2
48816: ARRAY
48817: PUSH
48818: LD_INT 1
48820: ARRAY
48821: STR
48822: PUSH
48823: LD_STRING ,
48825: STR
48826: PUSH
48827: LD_VAR 0 3
48831: PUSH
48832: LD_VAR 0 2
48836: ARRAY
48837: PUSH
48838: LD_INT 2
48840: ARRAY
48841: STR
48842: PUSH
48843: LD_STRING ,
48845: STR
48846: PUSH
48847: LD_VAR 0 3
48851: PUSH
48852: LD_VAR 0 2
48856: ARRAY
48857: PUSH
48858: LD_INT 3
48860: ARRAY
48861: STR
48862: PUSH
48863: LD_STRING ,
48865: STR
48866: PUSH
48867: LD_VAR 0 3
48871: PUSH
48872: LD_VAR 0 2
48876: ARRAY
48877: PUSH
48878: LD_INT 4
48880: ARRAY
48881: STR
48882: PUSH
48883: LD_STRING )
48885: STR
48886: PPUSH
48887: CALL_OW 559
48891: GO 48801
48893: POP
48894: POP
// end ; end ;
48895: LD_VAR 0 1
48899: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
48900: LD_INT 0
48902: PPUSH
// if HexInfo ( x , y ) = warehouse then
48903: LD_VAR 0 2
48907: PPUSH
48908: LD_VAR 0 3
48912: PPUSH
48913: CALL_OW 428
48917: PUSH
48918: LD_VAR 0 1
48922: EQUAL
48923: IFFALSE 48950
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
48925: LD_ADDR_EXP 146
48929: PUSH
48930: LD_EXP 146
48934: PPUSH
48935: LD_VAR 0 1
48939: PPUSH
48940: LD_INT 0
48942: PPUSH
48943: CALL_OW 1
48947: ST_TO_ADDR
48948: GO 49001
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
48950: LD_ADDR_EXP 146
48954: PUSH
48955: LD_EXP 146
48959: PPUSH
48960: LD_VAR 0 1
48964: PPUSH
48965: LD_VAR 0 1
48969: PPUSH
48970: CALL_OW 255
48974: PUSH
48975: LD_VAR 0 1
48979: PUSH
48980: LD_VAR 0 2
48984: PUSH
48985: LD_VAR 0 3
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: LIST
48994: LIST
48995: PPUSH
48996: CALL_OW 1
49000: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
49001: CALL 49010 0 0
// end ;
49005: LD_VAR 0 4
49009: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
49010: LD_INT 0
49012: PPUSH
49013: PPUSH
49014: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
49015: LD_STRING resetWarehouseGatheringPoints();
49017: PPUSH
49018: CALL_OW 559
// if warehouseGatheringPoints then
49022: LD_EXP 146
49026: IFFALSE 49152
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
49028: LD_ADDR_VAR 0 3
49032: PUSH
49033: LD_EXP 146
49037: PPUSH
49038: CALL 96627 0 1
49042: ST_TO_ADDR
// for i := 1 to list do
49043: LD_ADDR_VAR 0 2
49047: PUSH
49048: DOUBLE
49049: LD_INT 1
49051: DEC
49052: ST_TO_ADDR
49053: LD_VAR 0 3
49057: PUSH
49058: FOR_TO
49059: IFFALSE 49150
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
49061: LD_STRING setWarehouseGatheringPointXY(
49063: PUSH
49064: LD_VAR 0 3
49068: PUSH
49069: LD_VAR 0 2
49073: ARRAY
49074: PUSH
49075: LD_INT 1
49077: ARRAY
49078: STR
49079: PUSH
49080: LD_STRING ,
49082: STR
49083: PUSH
49084: LD_VAR 0 3
49088: PUSH
49089: LD_VAR 0 2
49093: ARRAY
49094: PUSH
49095: LD_INT 2
49097: ARRAY
49098: STR
49099: PUSH
49100: LD_STRING ,
49102: STR
49103: PUSH
49104: LD_VAR 0 3
49108: PUSH
49109: LD_VAR 0 2
49113: ARRAY
49114: PUSH
49115: LD_INT 3
49117: ARRAY
49118: STR
49119: PUSH
49120: LD_STRING ,
49122: STR
49123: PUSH
49124: LD_VAR 0 3
49128: PUSH
49129: LD_VAR 0 2
49133: ARRAY
49134: PUSH
49135: LD_INT 4
49137: ARRAY
49138: STR
49139: PUSH
49140: LD_STRING )
49142: STR
49143: PPUSH
49144: CALL_OW 559
49148: GO 49058
49150: POP
49151: POP
// end ; end ;
49152: LD_VAR 0 1
49156: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49157: LD_EXP 146
49161: IFFALSE 49846
49163: GO 49165
49165: DISABLE
49166: LD_INT 0
49168: PPUSH
49169: PPUSH
49170: PPUSH
49171: PPUSH
49172: PPUSH
49173: PPUSH
49174: PPUSH
49175: PPUSH
49176: PPUSH
// begin enable ;
49177: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49178: LD_ADDR_VAR 0 3
49182: PUSH
49183: LD_EXP 146
49187: PPUSH
49188: CALL 96627 0 1
49192: ST_TO_ADDR
// if not list then
49193: LD_VAR 0 3
49197: NOT
49198: IFFALSE 49202
// exit ;
49200: GO 49846
// for i := 1 to list do
49202: LD_ADDR_VAR 0 1
49206: PUSH
49207: DOUBLE
49208: LD_INT 1
49210: DEC
49211: ST_TO_ADDR
49212: LD_VAR 0 3
49216: PUSH
49217: FOR_TO
49218: IFFALSE 49844
// begin depot := list [ i ] [ 2 ] ;
49220: LD_ADDR_VAR 0 8
49224: PUSH
49225: LD_VAR 0 3
49229: PUSH
49230: LD_VAR 0 1
49234: ARRAY
49235: PUSH
49236: LD_INT 2
49238: ARRAY
49239: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49240: LD_ADDR_VAR 0 5
49244: PUSH
49245: LD_VAR 0 3
49249: PUSH
49250: LD_VAR 0 1
49254: ARRAY
49255: PUSH
49256: LD_INT 1
49258: ARRAY
49259: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49260: LD_VAR 0 8
49264: PPUSH
49265: CALL_OW 301
49269: PUSH
49270: LD_VAR 0 5
49274: PUSH
49275: LD_VAR 0 8
49279: PPUSH
49280: CALL_OW 255
49284: NONEQUAL
49285: OR
49286: IFFALSE 49315
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49288: LD_ADDR_EXP 146
49292: PUSH
49293: LD_EXP 146
49297: PPUSH
49298: LD_VAR 0 8
49302: PPUSH
49303: LD_INT 0
49305: PPUSH
49306: CALL_OW 1
49310: ST_TO_ADDR
// exit ;
49311: POP
49312: POP
49313: GO 49846
// end ; x := list [ i ] [ 3 ] ;
49315: LD_ADDR_VAR 0 6
49319: PUSH
49320: LD_VAR 0 3
49324: PUSH
49325: LD_VAR 0 1
49329: ARRAY
49330: PUSH
49331: LD_INT 3
49333: ARRAY
49334: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49335: LD_ADDR_VAR 0 7
49339: PUSH
49340: LD_VAR 0 3
49344: PUSH
49345: LD_VAR 0 1
49349: ARRAY
49350: PUSH
49351: LD_INT 4
49353: ARRAY
49354: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49355: LD_ADDR_VAR 0 9
49359: PUSH
49360: LD_VAR 0 6
49364: PPUSH
49365: LD_VAR 0 7
49369: PPUSH
49370: LD_INT 16
49372: PPUSH
49373: CALL 95211 0 3
49377: ST_TO_ADDR
// if not cratesNearbyPoint then
49378: LD_VAR 0 9
49382: NOT
49383: IFFALSE 49389
// exit ;
49385: POP
49386: POP
49387: GO 49846
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49389: LD_ADDR_VAR 0 4
49393: PUSH
49394: LD_INT 22
49396: PUSH
49397: LD_VAR 0 5
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: PUSH
49406: LD_INT 3
49408: PUSH
49409: LD_INT 60
49411: PUSH
49412: EMPTY
49413: LIST
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 91
49421: PUSH
49422: LD_VAR 0 8
49426: PUSH
49427: LD_INT 6
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: LIST
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: LD_INT 25
49440: PUSH
49441: LD_INT 2
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 25
49450: PUSH
49451: LD_INT 16
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: LIST
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: PPUSH
49469: CALL_OW 69
49473: PUSH
49474: LD_VAR 0 8
49478: PPUSH
49479: CALL_OW 313
49483: PPUSH
49484: LD_INT 3
49486: PUSH
49487: LD_INT 60
49489: PUSH
49490: EMPTY
49491: LIST
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 2
49499: PUSH
49500: LD_INT 25
49502: PUSH
49503: LD_INT 2
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: PUSH
49510: LD_INT 25
49512: PUSH
49513: LD_INT 16
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: LIST
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PPUSH
49529: CALL_OW 72
49533: UNION
49534: ST_TO_ADDR
// if tmp then
49535: LD_VAR 0 4
49539: IFFALSE 49619
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49541: LD_ADDR_VAR 0 4
49545: PUSH
49546: LD_VAR 0 4
49550: PPUSH
49551: LD_INT 3
49553: PPUSH
49554: CALL 93180 0 2
49558: ST_TO_ADDR
// for j in tmp do
49559: LD_ADDR_VAR 0 2
49563: PUSH
49564: LD_VAR 0 4
49568: PUSH
49569: FOR_IN
49570: IFFALSE 49613
// begin if IsInUnit ( j ) then
49572: LD_VAR 0 2
49576: PPUSH
49577: CALL_OW 310
49581: IFFALSE 49592
// ComExit ( j ) ;
49583: LD_VAR 0 2
49587: PPUSH
49588: CALL 93263 0 1
// AddComCollect ( j , x , y ) ;
49592: LD_VAR 0 2
49596: PPUSH
49597: LD_VAR 0 6
49601: PPUSH
49602: LD_VAR 0 7
49606: PPUSH
49607: CALL_OW 177
// end ;
49611: GO 49569
49613: POP
49614: POP
// exit ;
49615: POP
49616: POP
49617: GO 49846
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
49619: LD_ADDR_VAR 0 4
49623: PUSH
49624: LD_INT 22
49626: PUSH
49627: LD_VAR 0 5
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 91
49638: PUSH
49639: LD_VAR 0 8
49643: PUSH
49644: LD_INT 8
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: LIST
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 34
49657: PUSH
49658: LD_INT 12
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 34
49667: PUSH
49668: LD_INT 51
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 34
49677: PUSH
49678: LD_INT 32
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 34
49687: PUSH
49688: LD_INT 89
49690: PUSH
49691: EMPTY
49692: LIST
49693: LIST
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: LIST
49706: PPUSH
49707: CALL_OW 69
49711: ST_TO_ADDR
// if tmp then
49712: LD_VAR 0 4
49716: IFFALSE 49842
// begin for j in tmp do
49718: LD_ADDR_VAR 0 2
49722: PUSH
49723: LD_VAR 0 4
49727: PUSH
49728: FOR_IN
49729: IFFALSE 49840
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
49731: LD_VAR 0 2
49735: PPUSH
49736: CALL_OW 262
49740: PUSH
49741: LD_INT 3
49743: EQUAL
49744: PUSH
49745: LD_VAR 0 2
49749: PPUSH
49750: CALL_OW 261
49754: PUSH
49755: LD_INT 20
49757: GREATER
49758: OR
49759: PUSH
49760: LD_VAR 0 2
49764: PPUSH
49765: CALL_OW 314
49769: NOT
49770: AND
49771: PUSH
49772: LD_VAR 0 2
49776: PPUSH
49777: CALL_OW 263
49781: PUSH
49782: LD_INT 1
49784: NONEQUAL
49785: PUSH
49786: LD_VAR 0 2
49790: PPUSH
49791: CALL_OW 311
49795: OR
49796: AND
49797: IFFALSE 49838
// begin ComCollect ( j , x , y ) ;
49799: LD_VAR 0 2
49803: PPUSH
49804: LD_VAR 0 6
49808: PPUSH
49809: LD_VAR 0 7
49813: PPUSH
49814: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
49818: LD_VAR 0 2
49822: PPUSH
49823: LD_VAR 0 8
49827: PPUSH
49828: CALL_OW 172
// exit ;
49832: POP
49833: POP
49834: POP
49835: POP
49836: GO 49846
// end ;
49838: GO 49728
49840: POP
49841: POP
// end ; end ;
49842: GO 49217
49844: POP
49845: POP
// end ; end_of_file
49846: PPOPN 9
49848: END
// export function SOS_UnitDestroyed ( un ) ; begin
49849: LD_INT 0
49851: PPUSH
// ComRadiation ( un ) ;
49852: LD_VAR 0 1
49856: PPUSH
49857: CALL 50838 0 1
// end ;
49861: LD_VAR 0 2
49865: RET
// export function SOS_UnitKamikazed ( un ) ; begin
49866: LD_INT 0
49868: PPUSH
// ComRadiation ( un ) ;
49869: LD_VAR 0 1
49873: PPUSH
49874: CALL 50838 0 1
// end ;
49878: LD_VAR 0 2
49882: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
49883: LD_INT 0
49885: PPUSH
// end ;
49886: LD_VAR 0 4
49890: RET
// export function SOS_Command ( cmd ) ; begin
49891: LD_INT 0
49893: PPUSH
// end ;
49894: LD_VAR 0 2
49898: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
49899: LD_INT 0
49901: PPUSH
// end ;
49902: LD_VAR 0 6
49906: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , tag , driver , hex ; begin
49907: LD_INT 0
49909: PPUSH
49910: PPUSH
49911: PPUSH
49912: PPUSH
49913: PPUSH
// if not vehicle or not factory then
49914: LD_VAR 0 1
49918: NOT
49919: PUSH
49920: LD_VAR 0 2
49924: NOT
49925: OR
49926: IFFALSE 49930
// exit ;
49928: GO 50429
// if not factoryWaypoints then
49930: LD_EXP 145
49934: NOT
49935: IFFALSE 49939
// exit ;
49937: GO 50429
// for i := 1 to Count ( factoryWaypoints ) do
49939: LD_ADDR_VAR 0 4
49943: PUSH
49944: DOUBLE
49945: LD_INT 1
49947: DEC
49948: ST_TO_ADDR
49949: LD_EXP 145
49953: PPUSH
49954: CALL 57256 0 1
49958: PUSH
49959: FOR_TO
49960: IFFALSE 50427
// if factoryWaypoints [ i ] [ 2 ] = factory then
49962: LD_EXP 145
49966: PUSH
49967: LD_VAR 0 4
49971: ARRAY
49972: PUSH
49973: LD_INT 2
49975: ARRAY
49976: PUSH
49977: LD_VAR 0 2
49981: EQUAL
49982: IFFALSE 50425
// begin if GetControl ( vehicle ) = control_manual then
49984: LD_VAR 0 1
49988: PPUSH
49989: CALL_OW 263
49993: PUSH
49994: LD_INT 1
49996: EQUAL
49997: IFFALSE 50308
// begin driver := IsDrivenBy ( vehicle ) ;
49999: LD_ADDR_VAR 0 6
50003: PUSH
50004: LD_VAR 0 1
50008: PPUSH
50009: CALL_OW 311
50013: ST_TO_ADDR
// tag := GetTag ( driver ) ;
50014: LD_ADDR_VAR 0 5
50018: PUSH
50019: LD_VAR 0 6
50023: PPUSH
50024: CALL_OW 110
50028: ST_TO_ADDR
// if tag = tDriver or GetTag ( vehicle ) = tDriver then
50029: LD_VAR 0 5
50033: PUSH
50034: LD_INT 501
50036: EQUAL
50037: PUSH
50038: LD_VAR 0 1
50042: PPUSH
50043: CALL_OW 110
50047: PUSH
50048: LD_INT 501
50050: EQUAL
50051: OR
50052: IFFALSE 50058
// exit ;
50054: POP
50055: POP
50056: GO 50429
// if not HasTask ( driver ) then
50058: LD_VAR 0 6
50062: PPUSH
50063: CALL_OW 314
50067: NOT
50068: IFFALSE 50306
// begin SetTag ( driver , tDriver ) ;
50070: LD_VAR 0 6
50074: PPUSH
50075: LD_INT 501
50077: PPUSH
50078: CALL_OW 109
// SetTag ( vehicle , tDriver ) ;
50082: LD_VAR 0 1
50086: PPUSH
50087: LD_INT 501
50089: PPUSH
50090: CALL_OW 109
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50094: LD_ADDR_VAR 0 7
50098: PUSH
50099: LD_EXP 145
50103: PUSH
50104: LD_VAR 0 4
50108: ARRAY
50109: PUSH
50110: LD_INT 3
50112: ARRAY
50113: PPUSH
50114: LD_EXP 145
50118: PUSH
50119: LD_VAR 0 4
50123: ARRAY
50124: PUSH
50125: LD_INT 4
50127: ARRAY
50128: PPUSH
50129: CALL_OW 428
50133: ST_TO_ADDR
// if hex then
50134: LD_VAR 0 7
50138: IFFALSE 50156
// ComMoveUnit ( driver , hex ) else
50140: LD_VAR 0 6
50144: PPUSH
50145: LD_VAR 0 7
50149: PPUSH
50150: CALL_OW 112
50154: GO 50195
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50156: LD_VAR 0 6
50160: PPUSH
50161: LD_EXP 145
50165: PUSH
50166: LD_VAR 0 4
50170: ARRAY
50171: PUSH
50172: LD_INT 3
50174: ARRAY
50175: PPUSH
50176: LD_EXP 145
50180: PUSH
50181: LD_VAR 0 4
50185: ARRAY
50186: PUSH
50187: LD_INT 4
50189: ARRAY
50190: PPUSH
50191: CALL_OW 111
// AddComExitVehicle ( driver ) ;
50195: LD_VAR 0 6
50199: PPUSH
50200: CALL_OW 181
// if Multiplayer then
50204: LD_OWVAR 4
50208: IFFALSE 50257
// begin repeat wait ( 10 ) ;
50210: LD_INT 10
50212: PPUSH
50213: CALL_OW 67
// until not IsInUnit ( driver ) ;
50217: LD_VAR 0 6
50221: PPUSH
50222: CALL_OW 310
50226: NOT
50227: IFFALSE 50210
// if not HasTask ( driver ) then
50229: LD_VAR 0 6
50233: PPUSH
50234: CALL_OW 314
50238: NOT
50239: IFFALSE 50255
// ComEnterUnit ( driver , factory ) ;
50241: LD_VAR 0 6
50245: PPUSH
50246: LD_VAR 0 2
50250: PPUSH
50251: CALL_OW 120
// end else
50255: GO 50271
// AddComEnterUnit ( driver , factory ) ;
50257: LD_VAR 0 6
50261: PPUSH
50262: LD_VAR 0 2
50266: PPUSH
50267: CALL_OW 180
// wait ( 0 0$1 ) ;
50271: LD_INT 35
50273: PPUSH
50274: CALL_OW 67
// SetTag ( driver , tag ) ;
50278: LD_VAR 0 6
50282: PPUSH
50283: LD_VAR 0 5
50287: PPUSH
50288: CALL_OW 109
// SetTag ( vehicle , 0 ) ;
50292: LD_VAR 0 1
50296: PPUSH
50297: LD_INT 0
50299: PPUSH
50300: CALL_OW 109
// break ;
50304: GO 50427
// end ; end else
50306: GO 50425
// if GetControl ( vehicle ) = control_remote then
50308: LD_VAR 0 1
50312: PPUSH
50313: CALL_OW 263
50317: PUSH
50318: LD_INT 2
50320: EQUAL
50321: IFFALSE 50384
// begin wait ( 0 0$2 ) ;
50323: LD_INT 70
50325: PPUSH
50326: CALL_OW 67
// if Connect ( vehicle ) then
50330: LD_VAR 0 1
50334: PPUSH
50335: CALL 63462 0 1
50339: IFFALSE 50380
// AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50341: LD_VAR 0 1
50345: PPUSH
50346: LD_EXP 145
50350: PUSH
50351: LD_VAR 0 4
50355: ARRAY
50356: PUSH
50357: LD_INT 3
50359: ARRAY
50360: PPUSH
50361: LD_EXP 145
50365: PUSH
50366: LD_VAR 0 4
50370: ARRAY
50371: PUSH
50372: LD_INT 4
50374: ARRAY
50375: PPUSH
50376: CALL_OW 171
// break ;
50380: GO 50427
// end else
50382: GO 50425
// begin AddComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
50384: LD_VAR 0 1
50388: PPUSH
50389: LD_EXP 145
50393: PUSH
50394: LD_VAR 0 4
50398: ARRAY
50399: PUSH
50400: LD_INT 3
50402: ARRAY
50403: PPUSH
50404: LD_EXP 145
50408: PUSH
50409: LD_VAR 0 4
50413: ARRAY
50414: PUSH
50415: LD_INT 4
50417: ARRAY
50418: PPUSH
50419: CALL_OW 171
// break ;
50423: GO 50427
// end ; end ;
50425: GO 49959
50427: POP
50428: POP
// end ;
50429: LD_VAR 0 3
50433: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50434: LD_INT 0
50436: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50437: LD_VAR 0 1
50441: PUSH
50442: LD_INT 250
50444: EQUAL
50445: PUSH
50446: LD_VAR 0 2
50450: PPUSH
50451: CALL_OW 264
50455: PUSH
50456: LD_INT 81
50458: EQUAL
50459: AND
50460: IFFALSE 50481
// MinerPlaceMine ( unit , x , y ) ;
50462: LD_VAR 0 2
50466: PPUSH
50467: LD_VAR 0 4
50471: PPUSH
50472: LD_VAR 0 5
50476: PPUSH
50477: CALL 53573 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50481: LD_VAR 0 1
50485: PUSH
50486: LD_INT 251
50488: EQUAL
50489: PUSH
50490: LD_VAR 0 2
50494: PPUSH
50495: CALL_OW 264
50499: PUSH
50500: LD_INT 81
50502: EQUAL
50503: AND
50504: IFFALSE 50525
// MinerDetonateMine ( unit , x , y ) ;
50506: LD_VAR 0 2
50510: PPUSH
50511: LD_VAR 0 4
50515: PPUSH
50516: LD_VAR 0 5
50520: PPUSH
50521: CALL 53848 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
50525: LD_VAR 0 1
50529: PUSH
50530: LD_INT 252
50532: EQUAL
50533: PUSH
50534: LD_VAR 0 2
50538: PPUSH
50539: CALL_OW 264
50543: PUSH
50544: LD_INT 81
50546: EQUAL
50547: AND
50548: IFFALSE 50569
// MinerCreateMinefield ( unit , x , y ) ;
50550: LD_VAR 0 2
50554: PPUSH
50555: LD_VAR 0 4
50559: PPUSH
50560: LD_VAR 0 5
50564: PPUSH
50565: CALL 54265 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
50569: LD_VAR 0 1
50573: PUSH
50574: LD_INT 253
50576: EQUAL
50577: PUSH
50578: LD_VAR 0 2
50582: PPUSH
50583: CALL_OW 257
50587: PUSH
50588: LD_INT 5
50590: EQUAL
50591: AND
50592: IFFALSE 50613
// ComBinocular ( unit , x , y ) ;
50594: LD_VAR 0 2
50598: PPUSH
50599: LD_VAR 0 4
50603: PPUSH
50604: LD_VAR 0 5
50608: PPUSH
50609: CALL 54634 0 3
// if selectedUnit then
50613: LD_VAR 0 3
50617: IFFALSE 50673
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
50619: LD_VAR 0 1
50623: PUSH
50624: LD_INT 254
50626: EQUAL
50627: PUSH
50628: LD_VAR 0 2
50632: PPUSH
50633: CALL_OW 264
50637: PUSH
50638: LD_INT 99
50640: EQUAL
50641: AND
50642: PUSH
50643: LD_VAR 0 3
50647: PPUSH
50648: CALL_OW 263
50652: PUSH
50653: LD_INT 3
50655: EQUAL
50656: AND
50657: IFFALSE 50673
// HackDestroyVehicle ( unit , selectedUnit ) ;
50659: LD_VAR 0 2
50663: PPUSH
50664: LD_VAR 0 3
50668: PPUSH
50669: CALL 52937 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
50673: LD_VAR 0 1
50677: PUSH
50678: LD_INT 255
50680: EQUAL
50681: PUSH
50682: LD_VAR 0 2
50686: PPUSH
50687: CALL_OW 264
50691: PUSH
50692: LD_INT 14
50694: PUSH
50695: LD_INT 53
50697: PUSH
50698: EMPTY
50699: LIST
50700: LIST
50701: IN
50702: AND
50703: PUSH
50704: LD_VAR 0 4
50708: PPUSH
50709: LD_VAR 0 5
50713: PPUSH
50714: CALL_OW 488
50718: AND
50719: IFFALSE 50743
// CutTreeXYR ( unit , x , y , 12 ) ;
50721: LD_VAR 0 2
50725: PPUSH
50726: LD_VAR 0 4
50730: PPUSH
50731: LD_VAR 0 5
50735: PPUSH
50736: LD_INT 12
50738: PPUSH
50739: CALL 50934 0 4
// if cmd = 256 then
50743: LD_VAR 0 1
50747: PUSH
50748: LD_INT 256
50750: EQUAL
50751: IFFALSE 50772
// SetFactoryWaypoint ( unit , x , y ) ;
50753: LD_VAR 0 2
50757: PPUSH
50758: LD_VAR 0 4
50762: PPUSH
50763: LD_VAR 0 5
50767: PPUSH
50768: CALL 48410 0 3
// if cmd = 257 then
50772: LD_VAR 0 1
50776: PUSH
50777: LD_INT 257
50779: EQUAL
50780: IFFALSE 50801
// SetWarehouseGatheringPoint ( unit , x , y ) ;
50782: LD_VAR 0 2
50786: PPUSH
50787: LD_VAR 0 4
50791: PPUSH
50792: LD_VAR 0 5
50796: PPUSH
50797: CALL 48900 0 3
// if cmd = 258 then
50801: LD_VAR 0 1
50805: PUSH
50806: LD_INT 258
50808: EQUAL
50809: IFFALSE 50833
// BurnTreeXYR ( unit , x , y , 8 ) ;
50811: LD_VAR 0 2
50815: PPUSH
50816: LD_VAR 0 4
50820: PPUSH
50821: LD_VAR 0 5
50825: PPUSH
50826: LD_INT 8
50828: PPUSH
50829: CALL 51328 0 4
// end ;
50833: LD_VAR 0 6
50837: RET
// export function ComRadiation ( un ) ; var eff ; begin
50838: LD_INT 0
50840: PPUSH
50841: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
50842: LD_VAR 0 1
50846: PPUSH
50847: CALL_OW 264
50851: PUSH
50852: LD_INT 91
50854: NONEQUAL
50855: IFFALSE 50859
// exit ;
50857: GO 50929
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
50859: LD_INT 68
50861: PPUSH
50862: LD_VAR 0 1
50866: PPUSH
50867: CALL_OW 255
50871: PPUSH
50872: CALL_OW 321
50876: PUSH
50877: LD_INT 2
50879: EQUAL
50880: IFFALSE 50892
// eff := 70 else
50882: LD_ADDR_VAR 0 3
50886: PUSH
50887: LD_INT 70
50889: ST_TO_ADDR
50890: GO 50900
// eff := 30 ;
50892: LD_ADDR_VAR 0 3
50896: PUSH
50897: LD_INT 30
50899: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
50900: LD_VAR 0 1
50904: PPUSH
50905: CALL_OW 250
50909: PPUSH
50910: LD_VAR 0 1
50914: PPUSH
50915: CALL_OW 251
50919: PPUSH
50920: LD_VAR 0 3
50924: PPUSH
50925: CALL_OW 495
// end ;
50929: LD_VAR 0 2
50933: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
50934: LD_INT 0
50936: PPUSH
50937: PPUSH
50938: PPUSH
50939: PPUSH
50940: PPUSH
50941: PPUSH
50942: PPUSH
50943: PPUSH
50944: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
50945: LD_VAR 0 1
50949: PPUSH
50950: CALL_OW 302
50954: NOT
50955: PUSH
50956: LD_VAR 0 2
50960: PPUSH
50961: LD_VAR 0 3
50965: PPUSH
50966: CALL_OW 488
50970: NOT
50971: OR
50972: PUSH
50973: LD_VAR 0 4
50977: NOT
50978: OR
50979: IFFALSE 50983
// exit ;
50981: GO 51323
// list := [ ] ;
50983: LD_ADDR_VAR 0 13
50987: PUSH
50988: EMPTY
50989: ST_TO_ADDR
// if x - r < 0 then
50990: LD_VAR 0 2
50994: PUSH
50995: LD_VAR 0 4
50999: MINUS
51000: PUSH
51001: LD_INT 0
51003: LESS
51004: IFFALSE 51016
// min_x := 0 else
51006: LD_ADDR_VAR 0 7
51010: PUSH
51011: LD_INT 0
51013: ST_TO_ADDR
51014: GO 51032
// min_x := x - r ;
51016: LD_ADDR_VAR 0 7
51020: PUSH
51021: LD_VAR 0 2
51025: PUSH
51026: LD_VAR 0 4
51030: MINUS
51031: ST_TO_ADDR
// if y - r < 0 then
51032: LD_VAR 0 3
51036: PUSH
51037: LD_VAR 0 4
51041: MINUS
51042: PUSH
51043: LD_INT 0
51045: LESS
51046: IFFALSE 51058
// min_y := 0 else
51048: LD_ADDR_VAR 0 8
51052: PUSH
51053: LD_INT 0
51055: ST_TO_ADDR
51056: GO 51074
// min_y := y - r ;
51058: LD_ADDR_VAR 0 8
51062: PUSH
51063: LD_VAR 0 3
51067: PUSH
51068: LD_VAR 0 4
51072: MINUS
51073: ST_TO_ADDR
// max_x := x + r ;
51074: LD_ADDR_VAR 0 9
51078: PUSH
51079: LD_VAR 0 2
51083: PUSH
51084: LD_VAR 0 4
51088: PLUS
51089: ST_TO_ADDR
// max_y := y + r ;
51090: LD_ADDR_VAR 0 10
51094: PUSH
51095: LD_VAR 0 3
51099: PUSH
51100: LD_VAR 0 4
51104: PLUS
51105: ST_TO_ADDR
// for _x = min_x to max_x do
51106: LD_ADDR_VAR 0 11
51110: PUSH
51111: DOUBLE
51112: LD_VAR 0 7
51116: DEC
51117: ST_TO_ADDR
51118: LD_VAR 0 9
51122: PUSH
51123: FOR_TO
51124: IFFALSE 51241
// for _y = min_y to max_y do
51126: LD_ADDR_VAR 0 12
51130: PUSH
51131: DOUBLE
51132: LD_VAR 0 8
51136: DEC
51137: ST_TO_ADDR
51138: LD_VAR 0 10
51142: PUSH
51143: FOR_TO
51144: IFFALSE 51237
// begin if not ValidHex ( _x , _y ) then
51146: LD_VAR 0 11
51150: PPUSH
51151: LD_VAR 0 12
51155: PPUSH
51156: CALL_OW 488
51160: NOT
51161: IFFALSE 51165
// continue ;
51163: GO 51143
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51165: LD_VAR 0 11
51169: PPUSH
51170: LD_VAR 0 12
51174: PPUSH
51175: CALL_OW 351
51179: PUSH
51180: LD_VAR 0 11
51184: PPUSH
51185: LD_VAR 0 12
51189: PPUSH
51190: CALL_OW 554
51194: AND
51195: IFFALSE 51235
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51197: LD_ADDR_VAR 0 13
51201: PUSH
51202: LD_VAR 0 13
51206: PPUSH
51207: LD_VAR 0 13
51211: PUSH
51212: LD_INT 1
51214: PLUS
51215: PPUSH
51216: LD_VAR 0 11
51220: PUSH
51221: LD_VAR 0 12
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PPUSH
51230: CALL_OW 2
51234: ST_TO_ADDR
// end ;
51235: GO 51143
51237: POP
51238: POP
51239: GO 51123
51241: POP
51242: POP
// if not list then
51243: LD_VAR 0 13
51247: NOT
51248: IFFALSE 51252
// exit ;
51250: GO 51323
// for i in list do
51252: LD_ADDR_VAR 0 6
51256: PUSH
51257: LD_VAR 0 13
51261: PUSH
51262: FOR_IN
51263: IFFALSE 51321
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
51265: LD_VAR 0 1
51269: PPUSH
51270: LD_STRING M
51272: PUSH
51273: LD_VAR 0 6
51277: PUSH
51278: LD_INT 1
51280: ARRAY
51281: PUSH
51282: LD_VAR 0 6
51286: PUSH
51287: LD_INT 2
51289: ARRAY
51290: PUSH
51291: LD_INT 0
51293: PUSH
51294: LD_INT 0
51296: PUSH
51297: LD_INT 0
51299: PUSH
51300: LD_INT 0
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: PUSH
51312: EMPTY
51313: LIST
51314: PPUSH
51315: CALL_OW 447
51319: GO 51262
51321: POP
51322: POP
// end ;
51323: LD_VAR 0 5
51327: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
51328: LD_INT 0
51330: PPUSH
51331: PPUSH
51332: PPUSH
51333: PPUSH
51334: PPUSH
51335: PPUSH
51336: PPUSH
51337: PPUSH
51338: PPUSH
51339: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
51340: LD_VAR 0 1
51344: PPUSH
51345: CALL_OW 302
51349: NOT
51350: PUSH
51351: LD_VAR 0 2
51355: PPUSH
51356: LD_VAR 0 3
51360: PPUSH
51361: CALL_OW 488
51365: NOT
51366: OR
51367: PUSH
51368: LD_VAR 0 4
51372: NOT
51373: OR
51374: IFFALSE 51378
// exit ;
51376: GO 51891
// list := [ ] ;
51378: LD_ADDR_VAR 0 13
51382: PUSH
51383: EMPTY
51384: ST_TO_ADDR
// if x - r < 0 then
51385: LD_VAR 0 2
51389: PUSH
51390: LD_VAR 0 4
51394: MINUS
51395: PUSH
51396: LD_INT 0
51398: LESS
51399: IFFALSE 51411
// min_x := 0 else
51401: LD_ADDR_VAR 0 7
51405: PUSH
51406: LD_INT 0
51408: ST_TO_ADDR
51409: GO 51427
// min_x := x - r ;
51411: LD_ADDR_VAR 0 7
51415: PUSH
51416: LD_VAR 0 2
51420: PUSH
51421: LD_VAR 0 4
51425: MINUS
51426: ST_TO_ADDR
// if y - r < 0 then
51427: LD_VAR 0 3
51431: PUSH
51432: LD_VAR 0 4
51436: MINUS
51437: PUSH
51438: LD_INT 0
51440: LESS
51441: IFFALSE 51453
// min_y := 0 else
51443: LD_ADDR_VAR 0 8
51447: PUSH
51448: LD_INT 0
51450: ST_TO_ADDR
51451: GO 51469
// min_y := y - r ;
51453: LD_ADDR_VAR 0 8
51457: PUSH
51458: LD_VAR 0 3
51462: PUSH
51463: LD_VAR 0 4
51467: MINUS
51468: ST_TO_ADDR
// max_x := x + r ;
51469: LD_ADDR_VAR 0 9
51473: PUSH
51474: LD_VAR 0 2
51478: PUSH
51479: LD_VAR 0 4
51483: PLUS
51484: ST_TO_ADDR
// max_y := y + r ;
51485: LD_ADDR_VAR 0 10
51489: PUSH
51490: LD_VAR 0 3
51494: PUSH
51495: LD_VAR 0 4
51499: PLUS
51500: ST_TO_ADDR
// for _x = min_x to max_x do
51501: LD_ADDR_VAR 0 11
51505: PUSH
51506: DOUBLE
51507: LD_VAR 0 7
51511: DEC
51512: ST_TO_ADDR
51513: LD_VAR 0 9
51517: PUSH
51518: FOR_TO
51519: IFFALSE 51636
// for _y = min_y to max_y do
51521: LD_ADDR_VAR 0 12
51525: PUSH
51526: DOUBLE
51527: LD_VAR 0 8
51531: DEC
51532: ST_TO_ADDR
51533: LD_VAR 0 10
51537: PUSH
51538: FOR_TO
51539: IFFALSE 51632
// begin if not ValidHex ( _x , _y ) then
51541: LD_VAR 0 11
51545: PPUSH
51546: LD_VAR 0 12
51550: PPUSH
51551: CALL_OW 488
51555: NOT
51556: IFFALSE 51560
// continue ;
51558: GO 51538
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51560: LD_VAR 0 11
51564: PPUSH
51565: LD_VAR 0 12
51569: PPUSH
51570: CALL_OW 351
51574: PUSH
51575: LD_VAR 0 11
51579: PPUSH
51580: LD_VAR 0 12
51584: PPUSH
51585: CALL_OW 554
51589: AND
51590: IFFALSE 51630
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51592: LD_ADDR_VAR 0 13
51596: PUSH
51597: LD_VAR 0 13
51601: PPUSH
51602: LD_VAR 0 13
51606: PUSH
51607: LD_INT 1
51609: PLUS
51610: PPUSH
51611: LD_VAR 0 11
51615: PUSH
51616: LD_VAR 0 12
51620: PUSH
51621: EMPTY
51622: LIST
51623: LIST
51624: PPUSH
51625: CALL_OW 2
51629: ST_TO_ADDR
// end ;
51630: GO 51538
51632: POP
51633: POP
51634: GO 51518
51636: POP
51637: POP
// if not list then
51638: LD_VAR 0 13
51642: NOT
51643: IFFALSE 51647
// exit ;
51645: GO 51891
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
51647: LD_ADDR_VAR 0 13
51651: PUSH
51652: LD_VAR 0 1
51656: PPUSH
51657: LD_VAR 0 13
51661: PPUSH
51662: LD_INT 1
51664: PPUSH
51665: LD_INT 1
51667: PPUSH
51668: CALL 60604 0 4
51672: ST_TO_ADDR
// ComStop ( flame ) ;
51673: LD_VAR 0 1
51677: PPUSH
51678: CALL_OW 141
// for i in list do
51682: LD_ADDR_VAR 0 6
51686: PUSH
51687: LD_VAR 0 13
51691: PUSH
51692: FOR_IN
51693: IFFALSE 51724
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
51695: LD_VAR 0 1
51699: PPUSH
51700: LD_VAR 0 6
51704: PUSH
51705: LD_INT 1
51707: ARRAY
51708: PPUSH
51709: LD_VAR 0 6
51713: PUSH
51714: LD_INT 2
51716: ARRAY
51717: PPUSH
51718: CALL_OW 176
51722: GO 51692
51724: POP
51725: POP
// repeat wait ( 0 0$1 ) ;
51726: LD_INT 35
51728: PPUSH
51729: CALL_OW 67
// task := GetTaskList ( flame ) ;
51733: LD_ADDR_VAR 0 14
51737: PUSH
51738: LD_VAR 0 1
51742: PPUSH
51743: CALL_OW 437
51747: ST_TO_ADDR
// if not task then
51748: LD_VAR 0 14
51752: NOT
51753: IFFALSE 51757
// exit ;
51755: GO 51891
// if task [ 1 ] [ 1 ] <> | then
51757: LD_VAR 0 14
51761: PUSH
51762: LD_INT 1
51764: ARRAY
51765: PUSH
51766: LD_INT 1
51768: ARRAY
51769: PUSH
51770: LD_STRING |
51772: NONEQUAL
51773: IFFALSE 51777
// exit ;
51775: GO 51891
// _x := task [ 1 ] [ 2 ] ;
51777: LD_ADDR_VAR 0 11
51781: PUSH
51782: LD_VAR 0 14
51786: PUSH
51787: LD_INT 1
51789: ARRAY
51790: PUSH
51791: LD_INT 2
51793: ARRAY
51794: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
51795: LD_ADDR_VAR 0 12
51799: PUSH
51800: LD_VAR 0 14
51804: PUSH
51805: LD_INT 1
51807: ARRAY
51808: PUSH
51809: LD_INT 3
51811: ARRAY
51812: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
51813: LD_VAR 0 11
51817: PPUSH
51818: LD_VAR 0 12
51822: PPUSH
51823: CALL_OW 351
51827: NOT
51828: PUSH
51829: LD_VAR 0 11
51833: PPUSH
51834: LD_VAR 0 12
51838: PPUSH
51839: CALL_OW 554
51843: NOT
51844: OR
51845: IFFALSE 51879
// begin task := Delete ( task , 1 ) ;
51847: LD_ADDR_VAR 0 14
51851: PUSH
51852: LD_VAR 0 14
51856: PPUSH
51857: LD_INT 1
51859: PPUSH
51860: CALL_OW 3
51864: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
51865: LD_VAR 0 1
51869: PPUSH
51870: LD_VAR 0 14
51874: PPUSH
51875: CALL_OW 446
// end ; until not HasTask ( flame ) ;
51879: LD_VAR 0 1
51883: PPUSH
51884: CALL_OW 314
51888: NOT
51889: IFFALSE 51726
// end ;
51891: LD_VAR 0 5
51895: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
51896: LD_EXP 148
51900: NOT
51901: IFFALSE 51951
51903: GO 51905
51905: DISABLE
// begin initHack := true ;
51906: LD_ADDR_EXP 148
51910: PUSH
51911: LD_INT 1
51913: ST_TO_ADDR
// hackTanks := [ ] ;
51914: LD_ADDR_EXP 149
51918: PUSH
51919: EMPTY
51920: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
51921: LD_ADDR_EXP 150
51925: PUSH
51926: EMPTY
51927: ST_TO_ADDR
// hackLimit := 3 ;
51928: LD_ADDR_EXP 151
51932: PUSH
51933: LD_INT 3
51935: ST_TO_ADDR
// hackDist := 12 ;
51936: LD_ADDR_EXP 152
51940: PUSH
51941: LD_INT 12
51943: ST_TO_ADDR
// hackCounter := [ ] ;
51944: LD_ADDR_EXP 153
51948: PUSH
51949: EMPTY
51950: ST_TO_ADDR
// end ;
51951: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
51952: LD_EXP 148
51956: PUSH
51957: LD_INT 34
51959: PUSH
51960: LD_INT 99
51962: PUSH
51963: EMPTY
51964: LIST
51965: LIST
51966: PPUSH
51967: CALL_OW 69
51971: AND
51972: IFFALSE 52225
51974: GO 51976
51976: DISABLE
51977: LD_INT 0
51979: PPUSH
51980: PPUSH
// begin enable ;
51981: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
51982: LD_ADDR_VAR 0 1
51986: PUSH
51987: LD_INT 34
51989: PUSH
51990: LD_INT 99
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: PPUSH
51997: CALL_OW 69
52001: PUSH
52002: FOR_IN
52003: IFFALSE 52223
// begin if not i in hackTanks then
52005: LD_VAR 0 1
52009: PUSH
52010: LD_EXP 149
52014: IN
52015: NOT
52016: IFFALSE 52099
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
52018: LD_ADDR_EXP 149
52022: PUSH
52023: LD_EXP 149
52027: PPUSH
52028: LD_EXP 149
52032: PUSH
52033: LD_INT 1
52035: PLUS
52036: PPUSH
52037: LD_VAR 0 1
52041: PPUSH
52042: CALL_OW 1
52046: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
52047: LD_ADDR_EXP 150
52051: PUSH
52052: LD_EXP 150
52056: PPUSH
52057: LD_EXP 150
52061: PUSH
52062: LD_INT 1
52064: PLUS
52065: PPUSH
52066: EMPTY
52067: PPUSH
52068: CALL_OW 1
52072: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
52073: LD_ADDR_EXP 153
52077: PUSH
52078: LD_EXP 153
52082: PPUSH
52083: LD_EXP 153
52087: PUSH
52088: LD_INT 1
52090: PLUS
52091: PPUSH
52092: EMPTY
52093: PPUSH
52094: CALL_OW 1
52098: ST_TO_ADDR
// end ; if not IsOk ( i ) then
52099: LD_VAR 0 1
52103: PPUSH
52104: CALL_OW 302
52108: NOT
52109: IFFALSE 52122
// begin HackUnlinkAll ( i ) ;
52111: LD_VAR 0 1
52115: PPUSH
52116: CALL 52228 0 1
// continue ;
52120: GO 52002
// end ; HackCheckCapturedStatus ( i ) ;
52122: LD_VAR 0 1
52126: PPUSH
52127: CALL 52671 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
52131: LD_ADDR_VAR 0 2
52135: PUSH
52136: LD_INT 81
52138: PUSH
52139: LD_VAR 0 1
52143: PPUSH
52144: CALL_OW 255
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 33
52155: PUSH
52156: LD_INT 3
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 91
52165: PUSH
52166: LD_VAR 0 1
52170: PUSH
52171: LD_EXP 152
52175: PUSH
52176: EMPTY
52177: LIST
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 50
52183: PUSH
52184: EMPTY
52185: LIST
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: LIST
52191: LIST
52192: PPUSH
52193: CALL_OW 69
52197: ST_TO_ADDR
// if not tmp then
52198: LD_VAR 0 2
52202: NOT
52203: IFFALSE 52207
// continue ;
52205: GO 52002
// HackLink ( i , tmp ) ;
52207: LD_VAR 0 1
52211: PPUSH
52212: LD_VAR 0 2
52216: PPUSH
52217: CALL 52364 0 2
// end ;
52221: GO 52002
52223: POP
52224: POP
// end ;
52225: PPOPN 2
52227: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
52228: LD_INT 0
52230: PPUSH
52231: PPUSH
52232: PPUSH
// if not hack in hackTanks then
52233: LD_VAR 0 1
52237: PUSH
52238: LD_EXP 149
52242: IN
52243: NOT
52244: IFFALSE 52248
// exit ;
52246: GO 52359
// index := GetElementIndex ( hackTanks , hack ) ;
52248: LD_ADDR_VAR 0 4
52252: PUSH
52253: LD_EXP 149
52257: PPUSH
52258: LD_VAR 0 1
52262: PPUSH
52263: CALL 59901 0 2
52267: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
52268: LD_EXP 150
52272: PUSH
52273: LD_VAR 0 4
52277: ARRAY
52278: IFFALSE 52359
// begin for i in hackTanksCaptured [ index ] do
52280: LD_ADDR_VAR 0 3
52284: PUSH
52285: LD_EXP 150
52289: PUSH
52290: LD_VAR 0 4
52294: ARRAY
52295: PUSH
52296: FOR_IN
52297: IFFALSE 52323
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
52299: LD_VAR 0 3
52303: PUSH
52304: LD_INT 1
52306: ARRAY
52307: PPUSH
52308: LD_VAR 0 3
52312: PUSH
52313: LD_INT 2
52315: ARRAY
52316: PPUSH
52317: CALL_OW 235
52321: GO 52296
52323: POP
52324: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
52325: LD_ADDR_EXP 150
52329: PUSH
52330: LD_EXP 150
52334: PPUSH
52335: LD_VAR 0 4
52339: PPUSH
52340: EMPTY
52341: PPUSH
52342: CALL_OW 1
52346: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
52347: LD_VAR 0 1
52351: PPUSH
52352: LD_INT 0
52354: PPUSH
52355: CALL_OW 505
// end ; end ;
52359: LD_VAR 0 2
52363: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
52364: LD_INT 0
52366: PPUSH
52367: PPUSH
52368: PPUSH
// if not hack in hackTanks or not vehicles then
52369: LD_VAR 0 1
52373: PUSH
52374: LD_EXP 149
52378: IN
52379: NOT
52380: PUSH
52381: LD_VAR 0 2
52385: NOT
52386: OR
52387: IFFALSE 52391
// exit ;
52389: GO 52666
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
52391: LD_ADDR_VAR 0 2
52395: PUSH
52396: LD_VAR 0 1
52400: PPUSH
52401: LD_VAR 0 2
52405: PPUSH
52406: LD_INT 1
52408: PPUSH
52409: LD_INT 1
52411: PPUSH
52412: CALL 60551 0 4
52416: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
52417: LD_ADDR_VAR 0 5
52421: PUSH
52422: LD_EXP 149
52426: PPUSH
52427: LD_VAR 0 1
52431: PPUSH
52432: CALL 59901 0 2
52436: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
52437: LD_EXP 150
52441: PUSH
52442: LD_VAR 0 5
52446: ARRAY
52447: PUSH
52448: LD_EXP 151
52452: LESS
52453: IFFALSE 52642
// begin for i := 1 to vehicles do
52455: LD_ADDR_VAR 0 4
52459: PUSH
52460: DOUBLE
52461: LD_INT 1
52463: DEC
52464: ST_TO_ADDR
52465: LD_VAR 0 2
52469: PUSH
52470: FOR_TO
52471: IFFALSE 52640
// begin if hackTanksCaptured [ index ] = hackLimit then
52473: LD_EXP 150
52477: PUSH
52478: LD_VAR 0 5
52482: ARRAY
52483: PUSH
52484: LD_EXP 151
52488: EQUAL
52489: IFFALSE 52493
// break ;
52491: GO 52640
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
52493: LD_ADDR_EXP 153
52497: PUSH
52498: LD_EXP 153
52502: PPUSH
52503: LD_VAR 0 5
52507: PPUSH
52508: LD_EXP 153
52512: PUSH
52513: LD_VAR 0 5
52517: ARRAY
52518: PUSH
52519: LD_INT 1
52521: PLUS
52522: PPUSH
52523: CALL_OW 1
52527: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
52528: LD_ADDR_EXP 150
52532: PUSH
52533: LD_EXP 150
52537: PPUSH
52538: LD_VAR 0 5
52542: PUSH
52543: LD_EXP 150
52547: PUSH
52548: LD_VAR 0 5
52552: ARRAY
52553: PUSH
52554: LD_INT 1
52556: PLUS
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PPUSH
52562: LD_VAR 0 2
52566: PUSH
52567: LD_VAR 0 4
52571: ARRAY
52572: PUSH
52573: LD_VAR 0 2
52577: PUSH
52578: LD_VAR 0 4
52582: ARRAY
52583: PPUSH
52584: CALL_OW 255
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PPUSH
52593: CALL 60116 0 3
52597: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
52598: LD_VAR 0 2
52602: PUSH
52603: LD_VAR 0 4
52607: ARRAY
52608: PPUSH
52609: LD_VAR 0 1
52613: PPUSH
52614: CALL_OW 255
52618: PPUSH
52619: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
52623: LD_VAR 0 2
52627: PUSH
52628: LD_VAR 0 4
52632: ARRAY
52633: PPUSH
52634: CALL_OW 141
// end ;
52638: GO 52470
52640: POP
52641: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52642: LD_VAR 0 1
52646: PPUSH
52647: LD_EXP 150
52651: PUSH
52652: LD_VAR 0 5
52656: ARRAY
52657: PUSH
52658: LD_INT 0
52660: PLUS
52661: PPUSH
52662: CALL_OW 505
// end ;
52666: LD_VAR 0 3
52670: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
52671: LD_INT 0
52673: PPUSH
52674: PPUSH
52675: PPUSH
52676: PPUSH
// if not hack in hackTanks then
52677: LD_VAR 0 1
52681: PUSH
52682: LD_EXP 149
52686: IN
52687: NOT
52688: IFFALSE 52692
// exit ;
52690: GO 52932
// index := GetElementIndex ( hackTanks , hack ) ;
52692: LD_ADDR_VAR 0 4
52696: PUSH
52697: LD_EXP 149
52701: PPUSH
52702: LD_VAR 0 1
52706: PPUSH
52707: CALL 59901 0 2
52711: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
52712: LD_ADDR_VAR 0 3
52716: PUSH
52717: DOUBLE
52718: LD_EXP 150
52722: PUSH
52723: LD_VAR 0 4
52727: ARRAY
52728: INC
52729: ST_TO_ADDR
52730: LD_INT 1
52732: PUSH
52733: FOR_DOWNTO
52734: IFFALSE 52906
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
52736: LD_ADDR_VAR 0 5
52740: PUSH
52741: LD_EXP 150
52745: PUSH
52746: LD_VAR 0 4
52750: ARRAY
52751: PUSH
52752: LD_VAR 0 3
52756: ARRAY
52757: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
52758: LD_VAR 0 5
52762: PUSH
52763: LD_INT 1
52765: ARRAY
52766: PPUSH
52767: CALL_OW 302
52771: NOT
52772: PUSH
52773: LD_VAR 0 5
52777: PUSH
52778: LD_INT 1
52780: ARRAY
52781: PPUSH
52782: CALL_OW 255
52786: PUSH
52787: LD_VAR 0 1
52791: PPUSH
52792: CALL_OW 255
52796: NONEQUAL
52797: OR
52798: IFFALSE 52904
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
52800: LD_VAR 0 5
52804: PUSH
52805: LD_INT 1
52807: ARRAY
52808: PPUSH
52809: CALL_OW 305
52813: PUSH
52814: LD_VAR 0 5
52818: PUSH
52819: LD_INT 1
52821: ARRAY
52822: PPUSH
52823: CALL_OW 255
52827: PUSH
52828: LD_VAR 0 1
52832: PPUSH
52833: CALL_OW 255
52837: EQUAL
52838: AND
52839: IFFALSE 52863
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
52841: LD_VAR 0 5
52845: PUSH
52846: LD_INT 1
52848: ARRAY
52849: PPUSH
52850: LD_VAR 0 5
52854: PUSH
52855: LD_INT 2
52857: ARRAY
52858: PPUSH
52859: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
52863: LD_ADDR_EXP 150
52867: PUSH
52868: LD_EXP 150
52872: PPUSH
52873: LD_VAR 0 4
52877: PPUSH
52878: LD_EXP 150
52882: PUSH
52883: LD_VAR 0 4
52887: ARRAY
52888: PPUSH
52889: LD_VAR 0 3
52893: PPUSH
52894: CALL_OW 3
52898: PPUSH
52899: CALL_OW 1
52903: ST_TO_ADDR
// end ; end ;
52904: GO 52733
52906: POP
52907: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52908: LD_VAR 0 1
52912: PPUSH
52913: LD_EXP 150
52917: PUSH
52918: LD_VAR 0 4
52922: ARRAY
52923: PUSH
52924: LD_INT 0
52926: PLUS
52927: PPUSH
52928: CALL_OW 505
// end ;
52932: LD_VAR 0 2
52936: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
52937: LD_INT 0
52939: PPUSH
52940: PPUSH
52941: PPUSH
52942: PPUSH
// if not hack in hackTanks then
52943: LD_VAR 0 1
52947: PUSH
52948: LD_EXP 149
52952: IN
52953: NOT
52954: IFFALSE 52958
// exit ;
52956: GO 53043
// index := GetElementIndex ( hackTanks , hack ) ;
52958: LD_ADDR_VAR 0 5
52962: PUSH
52963: LD_EXP 149
52967: PPUSH
52968: LD_VAR 0 1
52972: PPUSH
52973: CALL 59901 0 2
52977: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
52978: LD_ADDR_VAR 0 4
52982: PUSH
52983: DOUBLE
52984: LD_INT 1
52986: DEC
52987: ST_TO_ADDR
52988: LD_EXP 150
52992: PUSH
52993: LD_VAR 0 5
52997: ARRAY
52998: PUSH
52999: FOR_TO
53000: IFFALSE 53041
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
53002: LD_EXP 150
53006: PUSH
53007: LD_VAR 0 5
53011: ARRAY
53012: PUSH
53013: LD_VAR 0 4
53017: ARRAY
53018: PUSH
53019: LD_INT 1
53021: ARRAY
53022: PUSH
53023: LD_VAR 0 2
53027: EQUAL
53028: IFFALSE 53039
// KillUnit ( vehicle ) ;
53030: LD_VAR 0 2
53034: PPUSH
53035: CALL_OW 66
53039: GO 52999
53041: POP
53042: POP
// end ;
53043: LD_VAR 0 3
53047: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
53048: LD_EXP 154
53052: NOT
53053: IFFALSE 53088
53055: GO 53057
53057: DISABLE
// begin initMiner := true ;
53058: LD_ADDR_EXP 154
53062: PUSH
53063: LD_INT 1
53065: ST_TO_ADDR
// minersList := [ ] ;
53066: LD_ADDR_EXP 155
53070: PUSH
53071: EMPTY
53072: ST_TO_ADDR
// minerMinesList := [ ] ;
53073: LD_ADDR_EXP 156
53077: PUSH
53078: EMPTY
53079: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
53080: LD_ADDR_EXP 157
53084: PUSH
53085: LD_INT 5
53087: ST_TO_ADDR
// end ;
53088: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
53089: LD_EXP 154
53093: PUSH
53094: LD_INT 34
53096: PUSH
53097: LD_INT 81
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PPUSH
53104: CALL_OW 69
53108: AND
53109: IFFALSE 53570
53111: GO 53113
53113: DISABLE
53114: LD_INT 0
53116: PPUSH
53117: PPUSH
53118: PPUSH
53119: PPUSH
// begin enable ;
53120: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
53121: LD_ADDR_VAR 0 1
53125: PUSH
53126: LD_INT 34
53128: PUSH
53129: LD_INT 81
53131: PUSH
53132: EMPTY
53133: LIST
53134: LIST
53135: PPUSH
53136: CALL_OW 69
53140: PUSH
53141: FOR_IN
53142: IFFALSE 53214
// begin if not i in minersList then
53144: LD_VAR 0 1
53148: PUSH
53149: LD_EXP 155
53153: IN
53154: NOT
53155: IFFALSE 53212
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
53157: LD_ADDR_EXP 155
53161: PUSH
53162: LD_EXP 155
53166: PPUSH
53167: LD_EXP 155
53171: PUSH
53172: LD_INT 1
53174: PLUS
53175: PPUSH
53176: LD_VAR 0 1
53180: PPUSH
53181: CALL_OW 1
53185: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
53186: LD_ADDR_EXP 156
53190: PUSH
53191: LD_EXP 156
53195: PPUSH
53196: LD_EXP 156
53200: PUSH
53201: LD_INT 1
53203: PLUS
53204: PPUSH
53205: EMPTY
53206: PPUSH
53207: CALL_OW 1
53211: ST_TO_ADDR
// end end ;
53212: GO 53141
53214: POP
53215: POP
// for i := minerMinesList downto 1 do
53216: LD_ADDR_VAR 0 1
53220: PUSH
53221: DOUBLE
53222: LD_EXP 156
53226: INC
53227: ST_TO_ADDR
53228: LD_INT 1
53230: PUSH
53231: FOR_DOWNTO
53232: IFFALSE 53568
// begin if IsLive ( minersList [ i ] ) then
53234: LD_EXP 155
53238: PUSH
53239: LD_VAR 0 1
53243: ARRAY
53244: PPUSH
53245: CALL_OW 300
53249: IFFALSE 53277
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
53251: LD_EXP 155
53255: PUSH
53256: LD_VAR 0 1
53260: ARRAY
53261: PPUSH
53262: LD_EXP 156
53266: PUSH
53267: LD_VAR 0 1
53271: ARRAY
53272: PPUSH
53273: CALL_OW 505
// if not minerMinesList [ i ] then
53277: LD_EXP 156
53281: PUSH
53282: LD_VAR 0 1
53286: ARRAY
53287: NOT
53288: IFFALSE 53292
// continue ;
53290: GO 53231
// for j := minerMinesList [ i ] downto 1 do
53292: LD_ADDR_VAR 0 2
53296: PUSH
53297: DOUBLE
53298: LD_EXP 156
53302: PUSH
53303: LD_VAR 0 1
53307: ARRAY
53308: INC
53309: ST_TO_ADDR
53310: LD_INT 1
53312: PUSH
53313: FOR_DOWNTO
53314: IFFALSE 53564
// begin side := GetSide ( minersList [ i ] ) ;
53316: LD_ADDR_VAR 0 3
53320: PUSH
53321: LD_EXP 155
53325: PUSH
53326: LD_VAR 0 1
53330: ARRAY
53331: PPUSH
53332: CALL_OW 255
53336: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
53337: LD_ADDR_VAR 0 4
53341: PUSH
53342: LD_EXP 156
53346: PUSH
53347: LD_VAR 0 1
53351: ARRAY
53352: PUSH
53353: LD_VAR 0 2
53357: ARRAY
53358: PUSH
53359: LD_INT 1
53361: ARRAY
53362: PPUSH
53363: LD_EXP 156
53367: PUSH
53368: LD_VAR 0 1
53372: ARRAY
53373: PUSH
53374: LD_VAR 0 2
53378: ARRAY
53379: PUSH
53380: LD_INT 2
53382: ARRAY
53383: PPUSH
53384: CALL_OW 428
53388: ST_TO_ADDR
// if not tmp then
53389: LD_VAR 0 4
53393: NOT
53394: IFFALSE 53398
// continue ;
53396: GO 53313
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
53398: LD_VAR 0 4
53402: PUSH
53403: LD_INT 81
53405: PUSH
53406: LD_VAR 0 3
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PPUSH
53415: CALL_OW 69
53419: IN
53420: PUSH
53421: LD_EXP 156
53425: PUSH
53426: LD_VAR 0 1
53430: ARRAY
53431: PUSH
53432: LD_VAR 0 2
53436: ARRAY
53437: PUSH
53438: LD_INT 1
53440: ARRAY
53441: PPUSH
53442: LD_EXP 156
53446: PUSH
53447: LD_VAR 0 1
53451: ARRAY
53452: PUSH
53453: LD_VAR 0 2
53457: ARRAY
53458: PUSH
53459: LD_INT 2
53461: ARRAY
53462: PPUSH
53463: CALL_OW 458
53467: AND
53468: IFFALSE 53562
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
53470: LD_EXP 156
53474: PUSH
53475: LD_VAR 0 1
53479: ARRAY
53480: PUSH
53481: LD_VAR 0 2
53485: ARRAY
53486: PUSH
53487: LD_INT 1
53489: ARRAY
53490: PPUSH
53491: LD_EXP 156
53495: PUSH
53496: LD_VAR 0 1
53500: ARRAY
53501: PUSH
53502: LD_VAR 0 2
53506: ARRAY
53507: PUSH
53508: LD_INT 2
53510: ARRAY
53511: PPUSH
53512: LD_VAR 0 3
53516: PPUSH
53517: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
53521: LD_ADDR_EXP 156
53525: PUSH
53526: LD_EXP 156
53530: PPUSH
53531: LD_VAR 0 1
53535: PPUSH
53536: LD_EXP 156
53540: PUSH
53541: LD_VAR 0 1
53545: ARRAY
53546: PPUSH
53547: LD_VAR 0 2
53551: PPUSH
53552: CALL_OW 3
53556: PPUSH
53557: CALL_OW 1
53561: ST_TO_ADDR
// end ; end ;
53562: GO 53313
53564: POP
53565: POP
// end ;
53566: GO 53231
53568: POP
53569: POP
// end ;
53570: PPOPN 4
53572: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
53573: LD_INT 0
53575: PPUSH
53576: PPUSH
// result := false ;
53577: LD_ADDR_VAR 0 4
53581: PUSH
53582: LD_INT 0
53584: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
53585: LD_VAR 0 1
53589: PPUSH
53590: CALL_OW 264
53594: PUSH
53595: LD_INT 81
53597: EQUAL
53598: NOT
53599: IFFALSE 53603
// exit ;
53601: GO 53843
// index := GetElementIndex ( minersList , unit ) ;
53603: LD_ADDR_VAR 0 5
53607: PUSH
53608: LD_EXP 155
53612: PPUSH
53613: LD_VAR 0 1
53617: PPUSH
53618: CALL 59901 0 2
53622: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
53623: LD_EXP 156
53627: PUSH
53628: LD_VAR 0 5
53632: ARRAY
53633: PUSH
53634: LD_EXP 157
53638: GREATEREQUAL
53639: IFFALSE 53643
// exit ;
53641: GO 53843
// ComMoveXY ( unit , x , y ) ;
53643: LD_VAR 0 1
53647: PPUSH
53648: LD_VAR 0 2
53652: PPUSH
53653: LD_VAR 0 3
53657: PPUSH
53658: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
53662: LD_INT 35
53664: PPUSH
53665: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
53669: LD_VAR 0 1
53673: PPUSH
53674: LD_VAR 0 2
53678: PPUSH
53679: LD_VAR 0 3
53683: PPUSH
53684: CALL 91662 0 3
53688: NOT
53689: PUSH
53690: LD_VAR 0 1
53694: PPUSH
53695: CALL_OW 314
53699: AND
53700: IFFALSE 53704
// exit ;
53702: GO 53843
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
53704: LD_VAR 0 2
53708: PPUSH
53709: LD_VAR 0 3
53713: PPUSH
53714: CALL_OW 428
53718: PUSH
53719: LD_VAR 0 1
53723: EQUAL
53724: PUSH
53725: LD_VAR 0 1
53729: PPUSH
53730: CALL_OW 314
53734: NOT
53735: AND
53736: IFFALSE 53662
// PlaySoundXY ( x , y , PlantMine ) ;
53738: LD_VAR 0 2
53742: PPUSH
53743: LD_VAR 0 3
53747: PPUSH
53748: LD_STRING PlantMine
53750: PPUSH
53751: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
53755: LD_VAR 0 2
53759: PPUSH
53760: LD_VAR 0 3
53764: PPUSH
53765: LD_VAR 0 1
53769: PPUSH
53770: CALL_OW 255
53774: PPUSH
53775: LD_INT 0
53777: PPUSH
53778: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
53782: LD_ADDR_EXP 156
53786: PUSH
53787: LD_EXP 156
53791: PPUSH
53792: LD_VAR 0 5
53796: PUSH
53797: LD_EXP 156
53801: PUSH
53802: LD_VAR 0 5
53806: ARRAY
53807: PUSH
53808: LD_INT 1
53810: PLUS
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PPUSH
53816: LD_VAR 0 2
53820: PUSH
53821: LD_VAR 0 3
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PPUSH
53830: CALL 60116 0 3
53834: ST_TO_ADDR
// result := true ;
53835: LD_ADDR_VAR 0 4
53839: PUSH
53840: LD_INT 1
53842: ST_TO_ADDR
// end ;
53843: LD_VAR 0 4
53847: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
53848: LD_INT 0
53850: PPUSH
53851: PPUSH
53852: PPUSH
// if not unit in minersList then
53853: LD_VAR 0 1
53857: PUSH
53858: LD_EXP 155
53862: IN
53863: NOT
53864: IFFALSE 53868
// exit ;
53866: GO 54260
// index := GetElementIndex ( minersList , unit ) ;
53868: LD_ADDR_VAR 0 6
53872: PUSH
53873: LD_EXP 155
53877: PPUSH
53878: LD_VAR 0 1
53882: PPUSH
53883: CALL 59901 0 2
53887: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
53888: LD_ADDR_VAR 0 5
53892: PUSH
53893: DOUBLE
53894: LD_EXP 156
53898: PUSH
53899: LD_VAR 0 6
53903: ARRAY
53904: INC
53905: ST_TO_ADDR
53906: LD_INT 1
53908: PUSH
53909: FOR_DOWNTO
53910: IFFALSE 54071
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
53912: LD_EXP 156
53916: PUSH
53917: LD_VAR 0 6
53921: ARRAY
53922: PUSH
53923: LD_VAR 0 5
53927: ARRAY
53928: PUSH
53929: LD_INT 1
53931: ARRAY
53932: PUSH
53933: LD_VAR 0 2
53937: EQUAL
53938: PUSH
53939: LD_EXP 156
53943: PUSH
53944: LD_VAR 0 6
53948: ARRAY
53949: PUSH
53950: LD_VAR 0 5
53954: ARRAY
53955: PUSH
53956: LD_INT 2
53958: ARRAY
53959: PUSH
53960: LD_VAR 0 3
53964: EQUAL
53965: AND
53966: IFFALSE 54069
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53968: LD_EXP 156
53972: PUSH
53973: LD_VAR 0 6
53977: ARRAY
53978: PUSH
53979: LD_VAR 0 5
53983: ARRAY
53984: PUSH
53985: LD_INT 1
53987: ARRAY
53988: PPUSH
53989: LD_EXP 156
53993: PUSH
53994: LD_VAR 0 6
53998: ARRAY
53999: PUSH
54000: LD_VAR 0 5
54004: ARRAY
54005: PUSH
54006: LD_INT 2
54008: ARRAY
54009: PPUSH
54010: LD_VAR 0 1
54014: PPUSH
54015: CALL_OW 255
54019: PPUSH
54020: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54024: LD_ADDR_EXP 156
54028: PUSH
54029: LD_EXP 156
54033: PPUSH
54034: LD_VAR 0 6
54038: PPUSH
54039: LD_EXP 156
54043: PUSH
54044: LD_VAR 0 6
54048: ARRAY
54049: PPUSH
54050: LD_VAR 0 5
54054: PPUSH
54055: CALL_OW 3
54059: PPUSH
54060: CALL_OW 1
54064: ST_TO_ADDR
// exit ;
54065: POP
54066: POP
54067: GO 54260
// end ; end ;
54069: GO 53909
54071: POP
54072: POP
// for i := minerMinesList [ index ] downto 1 do
54073: LD_ADDR_VAR 0 5
54077: PUSH
54078: DOUBLE
54079: LD_EXP 156
54083: PUSH
54084: LD_VAR 0 6
54088: ARRAY
54089: INC
54090: ST_TO_ADDR
54091: LD_INT 1
54093: PUSH
54094: FOR_DOWNTO
54095: IFFALSE 54258
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
54097: LD_EXP 156
54101: PUSH
54102: LD_VAR 0 6
54106: ARRAY
54107: PUSH
54108: LD_VAR 0 5
54112: ARRAY
54113: PUSH
54114: LD_INT 1
54116: ARRAY
54117: PPUSH
54118: LD_EXP 156
54122: PUSH
54123: LD_VAR 0 6
54127: ARRAY
54128: PUSH
54129: LD_VAR 0 5
54133: ARRAY
54134: PUSH
54135: LD_INT 2
54137: ARRAY
54138: PPUSH
54139: LD_VAR 0 2
54143: PPUSH
54144: LD_VAR 0 3
54148: PPUSH
54149: CALL_OW 298
54153: PUSH
54154: LD_INT 6
54156: LESS
54157: IFFALSE 54256
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
54159: LD_EXP 156
54163: PUSH
54164: LD_VAR 0 6
54168: ARRAY
54169: PUSH
54170: LD_VAR 0 5
54174: ARRAY
54175: PUSH
54176: LD_INT 1
54178: ARRAY
54179: PPUSH
54180: LD_EXP 156
54184: PUSH
54185: LD_VAR 0 6
54189: ARRAY
54190: PUSH
54191: LD_VAR 0 5
54195: ARRAY
54196: PUSH
54197: LD_INT 2
54199: ARRAY
54200: PPUSH
54201: LD_VAR 0 1
54205: PPUSH
54206: CALL_OW 255
54210: PPUSH
54211: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
54215: LD_ADDR_EXP 156
54219: PUSH
54220: LD_EXP 156
54224: PPUSH
54225: LD_VAR 0 6
54229: PPUSH
54230: LD_EXP 156
54234: PUSH
54235: LD_VAR 0 6
54239: ARRAY
54240: PPUSH
54241: LD_VAR 0 5
54245: PPUSH
54246: CALL_OW 3
54250: PPUSH
54251: CALL_OW 1
54255: ST_TO_ADDR
// end ; end ;
54256: GO 54094
54258: POP
54259: POP
// end ;
54260: LD_VAR 0 4
54264: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
54265: LD_INT 0
54267: PPUSH
54268: PPUSH
54269: PPUSH
54270: PPUSH
54271: PPUSH
54272: PPUSH
54273: PPUSH
54274: PPUSH
54275: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
54276: LD_VAR 0 1
54280: PPUSH
54281: CALL_OW 264
54285: PUSH
54286: LD_INT 81
54288: EQUAL
54289: NOT
54290: PUSH
54291: LD_VAR 0 1
54295: PUSH
54296: LD_EXP 155
54300: IN
54301: NOT
54302: OR
54303: IFFALSE 54307
// exit ;
54305: GO 54629
// index := GetElementIndex ( minersList , unit ) ;
54307: LD_ADDR_VAR 0 6
54311: PUSH
54312: LD_EXP 155
54316: PPUSH
54317: LD_VAR 0 1
54321: PPUSH
54322: CALL 59901 0 2
54326: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
54327: LD_ADDR_VAR 0 8
54331: PUSH
54332: LD_EXP 157
54336: PUSH
54337: LD_EXP 156
54341: PUSH
54342: LD_VAR 0 6
54346: ARRAY
54347: MINUS
54348: ST_TO_ADDR
// if not minesFreeAmount then
54349: LD_VAR 0 8
54353: NOT
54354: IFFALSE 54358
// exit ;
54356: GO 54629
// tmp := [ ] ;
54358: LD_ADDR_VAR 0 7
54362: PUSH
54363: EMPTY
54364: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
54365: LD_ADDR_VAR 0 5
54369: PUSH
54370: DOUBLE
54371: LD_INT 1
54373: DEC
54374: ST_TO_ADDR
54375: LD_VAR 0 8
54379: PUSH
54380: FOR_TO
54381: IFFALSE 54576
// begin _d := rand ( 0 , 5 ) ;
54383: LD_ADDR_VAR 0 11
54387: PUSH
54388: LD_INT 0
54390: PPUSH
54391: LD_INT 5
54393: PPUSH
54394: CALL_OW 12
54398: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
54399: LD_ADDR_VAR 0 12
54403: PUSH
54404: LD_INT 2
54406: PPUSH
54407: LD_INT 6
54409: PPUSH
54410: CALL_OW 12
54414: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
54415: LD_ADDR_VAR 0 9
54419: PUSH
54420: LD_VAR 0 2
54424: PPUSH
54425: LD_VAR 0 11
54429: PPUSH
54430: LD_VAR 0 12
54434: PPUSH
54435: CALL_OW 272
54439: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
54440: LD_ADDR_VAR 0 10
54444: PUSH
54445: LD_VAR 0 3
54449: PPUSH
54450: LD_VAR 0 11
54454: PPUSH
54455: LD_VAR 0 12
54459: PPUSH
54460: CALL_OW 273
54464: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
54465: LD_VAR 0 9
54469: PPUSH
54470: LD_VAR 0 10
54474: PPUSH
54475: CALL_OW 488
54479: PUSH
54480: LD_VAR 0 9
54484: PUSH
54485: LD_VAR 0 10
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: PUSH
54494: LD_VAR 0 7
54498: IN
54499: NOT
54500: AND
54501: PUSH
54502: LD_VAR 0 9
54506: PPUSH
54507: LD_VAR 0 10
54511: PPUSH
54512: CALL_OW 458
54516: NOT
54517: AND
54518: IFFALSE 54560
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
54520: LD_ADDR_VAR 0 7
54524: PUSH
54525: LD_VAR 0 7
54529: PPUSH
54530: LD_VAR 0 7
54534: PUSH
54535: LD_INT 1
54537: PLUS
54538: PPUSH
54539: LD_VAR 0 9
54543: PUSH
54544: LD_VAR 0 10
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PPUSH
54553: CALL_OW 1
54557: ST_TO_ADDR
54558: GO 54574
// i := i - 1 ;
54560: LD_ADDR_VAR 0 5
54564: PUSH
54565: LD_VAR 0 5
54569: PUSH
54570: LD_INT 1
54572: MINUS
54573: ST_TO_ADDR
// end ;
54574: GO 54380
54576: POP
54577: POP
// for i in tmp do
54578: LD_ADDR_VAR 0 5
54582: PUSH
54583: LD_VAR 0 7
54587: PUSH
54588: FOR_IN
54589: IFFALSE 54627
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
54591: LD_VAR 0 1
54595: PPUSH
54596: LD_VAR 0 5
54600: PUSH
54601: LD_INT 1
54603: ARRAY
54604: PPUSH
54605: LD_VAR 0 5
54609: PUSH
54610: LD_INT 2
54612: ARRAY
54613: PPUSH
54614: CALL 53573 0 3
54618: NOT
54619: IFFALSE 54625
// exit ;
54621: POP
54622: POP
54623: GO 54629
54625: GO 54588
54627: POP
54628: POP
// end ;
54629: LD_VAR 0 4
54633: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
54634: LD_INT 0
54636: PPUSH
54637: PPUSH
54638: PPUSH
54639: PPUSH
54640: PPUSH
54641: PPUSH
54642: PPUSH
54643: PPUSH
54644: PPUSH
// if GetClass ( unit ) <> class_sniper then
54645: LD_VAR 0 1
54649: PPUSH
54650: CALL_OW 257
54654: PUSH
54655: LD_INT 5
54657: NONEQUAL
54658: IFFALSE 54662
// exit ;
54660: GO 55128
// dist := 8 ;
54662: LD_ADDR_VAR 0 5
54666: PUSH
54667: LD_INT 8
54669: ST_TO_ADDR
// viewRange := 12 ;
54670: LD_ADDR_VAR 0 8
54674: PUSH
54675: LD_INT 12
54677: ST_TO_ADDR
// side := GetSide ( unit ) ;
54678: LD_ADDR_VAR 0 6
54682: PUSH
54683: LD_VAR 0 1
54687: PPUSH
54688: CALL_OW 255
54692: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
54693: LD_INT 61
54695: PPUSH
54696: LD_VAR 0 6
54700: PPUSH
54701: CALL_OW 321
54705: PUSH
54706: LD_INT 2
54708: EQUAL
54709: IFFALSE 54719
// viewRange := 16 ;
54711: LD_ADDR_VAR 0 8
54715: PUSH
54716: LD_INT 16
54718: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
54719: LD_VAR 0 1
54723: PPUSH
54724: LD_VAR 0 2
54728: PPUSH
54729: LD_VAR 0 3
54733: PPUSH
54734: CALL_OW 297
54738: PUSH
54739: LD_VAR 0 5
54743: GREATER
54744: IFFALSE 54823
// begin ComMoveXY ( unit , x , y ) ;
54746: LD_VAR 0 1
54750: PPUSH
54751: LD_VAR 0 2
54755: PPUSH
54756: LD_VAR 0 3
54760: PPUSH
54761: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54765: LD_INT 35
54767: PPUSH
54768: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
54772: LD_VAR 0 1
54776: PPUSH
54777: LD_VAR 0 2
54781: PPUSH
54782: LD_VAR 0 3
54786: PPUSH
54787: CALL 91662 0 3
54791: NOT
54792: IFFALSE 54796
// exit ;
54794: GO 55128
// until GetDistUnitXY ( unit , x , y ) < dist ;
54796: LD_VAR 0 1
54800: PPUSH
54801: LD_VAR 0 2
54805: PPUSH
54806: LD_VAR 0 3
54810: PPUSH
54811: CALL_OW 297
54815: PUSH
54816: LD_VAR 0 5
54820: LESS
54821: IFFALSE 54765
// end ; ComTurnXY ( unit , x , y ) ;
54823: LD_VAR 0 1
54827: PPUSH
54828: LD_VAR 0 2
54832: PPUSH
54833: LD_VAR 0 3
54837: PPUSH
54838: CALL_OW 118
// repeat if Multiplayer then
54842: LD_OWVAR 4
54846: IFFALSE 54857
// wait ( 35 ) else
54848: LD_INT 35
54850: PPUSH
54851: CALL_OW 67
54855: GO 54864
// wait ( 5 ) ;
54857: LD_INT 5
54859: PPUSH
54860: CALL_OW 67
// _d := GetDir ( unit ) ;
54864: LD_ADDR_VAR 0 11
54868: PUSH
54869: LD_VAR 0 1
54873: PPUSH
54874: CALL_OW 254
54878: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
54879: LD_ADDR_VAR 0 7
54883: PUSH
54884: LD_VAR 0 1
54888: PPUSH
54889: CALL_OW 250
54893: PPUSH
54894: LD_VAR 0 1
54898: PPUSH
54899: CALL_OW 251
54903: PPUSH
54904: LD_VAR 0 2
54908: PPUSH
54909: LD_VAR 0 3
54913: PPUSH
54914: CALL 94270 0 4
54918: ST_TO_ADDR
// until dir = _d ;
54919: LD_VAR 0 7
54923: PUSH
54924: LD_VAR 0 11
54928: EQUAL
54929: IFFALSE 54842
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
54931: LD_ADDR_VAR 0 9
54935: PUSH
54936: LD_VAR 0 1
54940: PPUSH
54941: CALL_OW 250
54945: PPUSH
54946: LD_VAR 0 7
54950: PPUSH
54951: LD_VAR 0 5
54955: PPUSH
54956: CALL_OW 272
54960: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
54961: LD_ADDR_VAR 0 10
54965: PUSH
54966: LD_VAR 0 1
54970: PPUSH
54971: CALL_OW 251
54975: PPUSH
54976: LD_VAR 0 7
54980: PPUSH
54981: LD_VAR 0 5
54985: PPUSH
54986: CALL_OW 273
54990: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54991: LD_VAR 0 9
54995: PPUSH
54996: LD_VAR 0 10
55000: PPUSH
55001: CALL_OW 488
55005: NOT
55006: IFFALSE 55010
// exit ;
55008: GO 55128
// ComAnimCustom ( unit , 1 ) ;
55010: LD_VAR 0 1
55014: PPUSH
55015: LD_INT 1
55017: PPUSH
55018: CALL_OW 592
// p := 0 ;
55022: LD_ADDR_VAR 0 12
55026: PUSH
55027: LD_INT 0
55029: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
55030: LD_VAR 0 9
55034: PPUSH
55035: LD_VAR 0 10
55039: PPUSH
55040: LD_VAR 0 6
55044: PPUSH
55045: LD_VAR 0 8
55049: PPUSH
55050: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
55054: LD_INT 35
55056: PPUSH
55057: CALL_OW 67
// p := Inc ( p ) ;
55061: LD_ADDR_VAR 0 12
55065: PUSH
55066: LD_VAR 0 12
55070: PPUSH
55071: CALL 94226 0 1
55075: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
55076: LD_VAR 0 12
55080: PUSH
55081: LD_INT 3
55083: EQUAL
55084: PUSH
55085: LD_VAR 0 1
55089: PPUSH
55090: CALL_OW 302
55094: NOT
55095: OR
55096: PUSH
55097: LD_VAR 0 1
55101: PPUSH
55102: CALL_OW 301
55106: OR
55107: IFFALSE 55054
// RemoveSeeing ( _x , _y , side ) ;
55109: LD_VAR 0 9
55113: PPUSH
55114: LD_VAR 0 10
55118: PPUSH
55119: LD_VAR 0 6
55123: PPUSH
55124: CALL_OW 331
// end ; end_of_file
55128: LD_VAR 0 4
55132: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
55133: LD_INT 0
55135: PPUSH
55136: PPUSH
// if exist_mode then
55137: LD_VAR 0 2
55141: IFFALSE 55187
// begin unit := CreateCharacter ( prefix & ident ) ;
55143: LD_ADDR_VAR 0 5
55147: PUSH
55148: LD_VAR 0 3
55152: PUSH
55153: LD_VAR 0 1
55157: STR
55158: PPUSH
55159: CALL_OW 34
55163: ST_TO_ADDR
// if unit then
55164: LD_VAR 0 5
55168: IFFALSE 55185
// DeleteCharacters ( prefix & ident ) ;
55170: LD_VAR 0 3
55174: PUSH
55175: LD_VAR 0 1
55179: STR
55180: PPUSH
55181: CALL_OW 40
// end else
55185: GO 55202
// unit := NewCharacter ( ident ) ;
55187: LD_ADDR_VAR 0 5
55191: PUSH
55192: LD_VAR 0 1
55196: PPUSH
55197: CALL_OW 25
55201: ST_TO_ADDR
// result := unit ;
55202: LD_ADDR_VAR 0 4
55206: PUSH
55207: LD_VAR 0 5
55211: ST_TO_ADDR
// end ;
55212: LD_VAR 0 4
55216: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
55217: LD_INT 0
55219: PPUSH
55220: PPUSH
// if not side or not nation then
55221: LD_VAR 0 1
55225: NOT
55226: PUSH
55227: LD_VAR 0 2
55231: NOT
55232: OR
55233: IFFALSE 55237
// exit ;
55235: GO 56005
// case nation of nation_american :
55237: LD_VAR 0 2
55241: PUSH
55242: LD_INT 1
55244: DOUBLE
55245: EQUAL
55246: IFTRUE 55250
55248: GO 55464
55250: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
55251: LD_ADDR_VAR 0 4
55255: PUSH
55256: LD_INT 35
55258: PUSH
55259: LD_INT 45
55261: PUSH
55262: LD_INT 46
55264: PUSH
55265: LD_INT 47
55267: PUSH
55268: LD_INT 82
55270: PUSH
55271: LD_INT 83
55273: PUSH
55274: LD_INT 84
55276: PUSH
55277: LD_INT 85
55279: PUSH
55280: LD_INT 86
55282: PUSH
55283: LD_INT 1
55285: PUSH
55286: LD_INT 2
55288: PUSH
55289: LD_INT 6
55291: PUSH
55292: LD_INT 15
55294: PUSH
55295: LD_INT 16
55297: PUSH
55298: LD_INT 7
55300: PUSH
55301: LD_INT 12
55303: PUSH
55304: LD_INT 13
55306: PUSH
55307: LD_INT 10
55309: PUSH
55310: LD_INT 14
55312: PUSH
55313: LD_INT 20
55315: PUSH
55316: LD_INT 21
55318: PUSH
55319: LD_INT 22
55321: PUSH
55322: LD_INT 25
55324: PUSH
55325: LD_INT 32
55327: PUSH
55328: LD_INT 27
55330: PUSH
55331: LD_INT 36
55333: PUSH
55334: LD_INT 69
55336: PUSH
55337: LD_INT 39
55339: PUSH
55340: LD_INT 34
55342: PUSH
55343: LD_INT 40
55345: PUSH
55346: LD_INT 48
55348: PUSH
55349: LD_INT 49
55351: PUSH
55352: LD_INT 50
55354: PUSH
55355: LD_INT 51
55357: PUSH
55358: LD_INT 52
55360: PUSH
55361: LD_INT 53
55363: PUSH
55364: LD_INT 54
55366: PUSH
55367: LD_INT 55
55369: PUSH
55370: LD_INT 56
55372: PUSH
55373: LD_INT 57
55375: PUSH
55376: LD_INT 58
55378: PUSH
55379: LD_INT 59
55381: PUSH
55382: LD_INT 60
55384: PUSH
55385: LD_INT 61
55387: PUSH
55388: LD_INT 62
55390: PUSH
55391: LD_INT 80
55393: PUSH
55394: LD_INT 82
55396: PUSH
55397: LD_INT 83
55399: PUSH
55400: LD_INT 84
55402: PUSH
55403: LD_INT 85
55405: PUSH
55406: LD_INT 86
55408: PUSH
55409: EMPTY
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: LIST
55443: LIST
55444: LIST
55445: LIST
55446: LIST
55447: LIST
55448: LIST
55449: LIST
55450: LIST
55451: LIST
55452: LIST
55453: LIST
55454: LIST
55455: LIST
55456: LIST
55457: LIST
55458: LIST
55459: LIST
55460: LIST
55461: ST_TO_ADDR
55462: GO 55929
55464: LD_INT 2
55466: DOUBLE
55467: EQUAL
55468: IFTRUE 55472
55470: GO 55698
55472: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
55473: LD_ADDR_VAR 0 4
55477: PUSH
55478: LD_INT 35
55480: PUSH
55481: LD_INT 45
55483: PUSH
55484: LD_INT 46
55486: PUSH
55487: LD_INT 47
55489: PUSH
55490: LD_INT 82
55492: PUSH
55493: LD_INT 83
55495: PUSH
55496: LD_INT 84
55498: PUSH
55499: LD_INT 85
55501: PUSH
55502: LD_INT 87
55504: PUSH
55505: LD_INT 70
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: LD_INT 11
55513: PUSH
55514: LD_INT 3
55516: PUSH
55517: LD_INT 4
55519: PUSH
55520: LD_INT 5
55522: PUSH
55523: LD_INT 6
55525: PUSH
55526: LD_INT 15
55528: PUSH
55529: LD_INT 18
55531: PUSH
55532: LD_INT 7
55534: PUSH
55535: LD_INT 17
55537: PUSH
55538: LD_INT 8
55540: PUSH
55541: LD_INT 20
55543: PUSH
55544: LD_INT 21
55546: PUSH
55547: LD_INT 22
55549: PUSH
55550: LD_INT 72
55552: PUSH
55553: LD_INT 26
55555: PUSH
55556: LD_INT 69
55558: PUSH
55559: LD_INT 39
55561: PUSH
55562: LD_INT 40
55564: PUSH
55565: LD_INT 41
55567: PUSH
55568: LD_INT 42
55570: PUSH
55571: LD_INT 43
55573: PUSH
55574: LD_INT 48
55576: PUSH
55577: LD_INT 49
55579: PUSH
55580: LD_INT 50
55582: PUSH
55583: LD_INT 51
55585: PUSH
55586: LD_INT 52
55588: PUSH
55589: LD_INT 53
55591: PUSH
55592: LD_INT 54
55594: PUSH
55595: LD_INT 55
55597: PUSH
55598: LD_INT 56
55600: PUSH
55601: LD_INT 60
55603: PUSH
55604: LD_INT 61
55606: PUSH
55607: LD_INT 62
55609: PUSH
55610: LD_INT 66
55612: PUSH
55613: LD_INT 67
55615: PUSH
55616: LD_INT 68
55618: PUSH
55619: LD_INT 81
55621: PUSH
55622: LD_INT 82
55624: PUSH
55625: LD_INT 83
55627: PUSH
55628: LD_INT 84
55630: PUSH
55631: LD_INT 85
55633: PUSH
55634: LD_INT 87
55636: PUSH
55637: LD_INT 88
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: LIST
55644: LIST
55645: LIST
55646: LIST
55647: LIST
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: LIST
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: LIST
55662: LIST
55663: LIST
55664: LIST
55665: LIST
55666: LIST
55667: LIST
55668: LIST
55669: LIST
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: LIST
55676: LIST
55677: LIST
55678: LIST
55679: LIST
55680: LIST
55681: LIST
55682: LIST
55683: LIST
55684: LIST
55685: LIST
55686: LIST
55687: LIST
55688: LIST
55689: LIST
55690: LIST
55691: LIST
55692: LIST
55693: LIST
55694: LIST
55695: ST_TO_ADDR
55696: GO 55929
55698: LD_INT 3
55700: DOUBLE
55701: EQUAL
55702: IFTRUE 55706
55704: GO 55928
55706: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
55707: LD_ADDR_VAR 0 4
55711: PUSH
55712: LD_INT 46
55714: PUSH
55715: LD_INT 47
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: LD_INT 2
55723: PUSH
55724: LD_INT 82
55726: PUSH
55727: LD_INT 83
55729: PUSH
55730: LD_INT 84
55732: PUSH
55733: LD_INT 85
55735: PUSH
55736: LD_INT 86
55738: PUSH
55739: LD_INT 11
55741: PUSH
55742: LD_INT 9
55744: PUSH
55745: LD_INT 20
55747: PUSH
55748: LD_INT 19
55750: PUSH
55751: LD_INT 21
55753: PUSH
55754: LD_INT 24
55756: PUSH
55757: LD_INT 22
55759: PUSH
55760: LD_INT 25
55762: PUSH
55763: LD_INT 28
55765: PUSH
55766: LD_INT 29
55768: PUSH
55769: LD_INT 30
55771: PUSH
55772: LD_INT 31
55774: PUSH
55775: LD_INT 37
55777: PUSH
55778: LD_INT 38
55780: PUSH
55781: LD_INT 32
55783: PUSH
55784: LD_INT 27
55786: PUSH
55787: LD_INT 33
55789: PUSH
55790: LD_INT 69
55792: PUSH
55793: LD_INT 39
55795: PUSH
55796: LD_INT 34
55798: PUSH
55799: LD_INT 40
55801: PUSH
55802: LD_INT 71
55804: PUSH
55805: LD_INT 23
55807: PUSH
55808: LD_INT 44
55810: PUSH
55811: LD_INT 48
55813: PUSH
55814: LD_INT 49
55816: PUSH
55817: LD_INT 50
55819: PUSH
55820: LD_INT 51
55822: PUSH
55823: LD_INT 52
55825: PUSH
55826: LD_INT 53
55828: PUSH
55829: LD_INT 54
55831: PUSH
55832: LD_INT 55
55834: PUSH
55835: LD_INT 56
55837: PUSH
55838: LD_INT 57
55840: PUSH
55841: LD_INT 58
55843: PUSH
55844: LD_INT 59
55846: PUSH
55847: LD_INT 63
55849: PUSH
55850: LD_INT 64
55852: PUSH
55853: LD_INT 65
55855: PUSH
55856: LD_INT 82
55858: PUSH
55859: LD_INT 83
55861: PUSH
55862: LD_INT 84
55864: PUSH
55865: LD_INT 85
55867: PUSH
55868: LD_INT 86
55870: PUSH
55871: EMPTY
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: LIST
55894: LIST
55895: LIST
55896: LIST
55897: LIST
55898: LIST
55899: LIST
55900: LIST
55901: LIST
55902: LIST
55903: LIST
55904: LIST
55905: LIST
55906: LIST
55907: LIST
55908: LIST
55909: LIST
55910: LIST
55911: LIST
55912: LIST
55913: LIST
55914: LIST
55915: LIST
55916: LIST
55917: LIST
55918: LIST
55919: LIST
55920: LIST
55921: LIST
55922: LIST
55923: LIST
55924: LIST
55925: ST_TO_ADDR
55926: GO 55929
55928: POP
// if state > - 1 and state < 3 then
55929: LD_VAR 0 3
55933: PUSH
55934: LD_INT 1
55936: NEG
55937: GREATER
55938: PUSH
55939: LD_VAR 0 3
55943: PUSH
55944: LD_INT 3
55946: LESS
55947: AND
55948: IFFALSE 56005
// for i in result do
55950: LD_ADDR_VAR 0 5
55954: PUSH
55955: LD_VAR 0 4
55959: PUSH
55960: FOR_IN
55961: IFFALSE 56003
// if GetTech ( i , side ) <> state then
55963: LD_VAR 0 5
55967: PPUSH
55968: LD_VAR 0 1
55972: PPUSH
55973: CALL_OW 321
55977: PUSH
55978: LD_VAR 0 3
55982: NONEQUAL
55983: IFFALSE 56001
// result := result diff i ;
55985: LD_ADDR_VAR 0 4
55989: PUSH
55990: LD_VAR 0 4
55994: PUSH
55995: LD_VAR 0 5
55999: DIFF
56000: ST_TO_ADDR
56001: GO 55960
56003: POP
56004: POP
// end ;
56005: LD_VAR 0 4
56009: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
56010: LD_INT 0
56012: PPUSH
56013: PPUSH
56014: PPUSH
// result := true ;
56015: LD_ADDR_VAR 0 3
56019: PUSH
56020: LD_INT 1
56022: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
56023: LD_ADDR_VAR 0 5
56027: PUSH
56028: LD_VAR 0 2
56032: PPUSH
56033: CALL_OW 480
56037: ST_TO_ADDR
// if not tmp then
56038: LD_VAR 0 5
56042: NOT
56043: IFFALSE 56047
// exit ;
56045: GO 56096
// for i in tmp do
56047: LD_ADDR_VAR 0 4
56051: PUSH
56052: LD_VAR 0 5
56056: PUSH
56057: FOR_IN
56058: IFFALSE 56094
// if GetTech ( i , side ) <> state_researched then
56060: LD_VAR 0 4
56064: PPUSH
56065: LD_VAR 0 1
56069: PPUSH
56070: CALL_OW 321
56074: PUSH
56075: LD_INT 2
56077: NONEQUAL
56078: IFFALSE 56092
// begin result := false ;
56080: LD_ADDR_VAR 0 3
56084: PUSH
56085: LD_INT 0
56087: ST_TO_ADDR
// exit ;
56088: POP
56089: POP
56090: GO 56096
// end ;
56092: GO 56057
56094: POP
56095: POP
// end ;
56096: LD_VAR 0 3
56100: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
56101: LD_INT 0
56103: PPUSH
56104: PPUSH
56105: PPUSH
56106: PPUSH
56107: PPUSH
56108: PPUSH
56109: PPUSH
56110: PPUSH
56111: PPUSH
56112: PPUSH
56113: PPUSH
56114: PPUSH
56115: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
56116: LD_VAR 0 1
56120: NOT
56121: PUSH
56122: LD_VAR 0 1
56126: PPUSH
56127: CALL_OW 257
56131: PUSH
56132: LD_INT 9
56134: NONEQUAL
56135: OR
56136: IFFALSE 56140
// exit ;
56138: GO 56713
// side := GetSide ( unit ) ;
56140: LD_ADDR_VAR 0 9
56144: PUSH
56145: LD_VAR 0 1
56149: PPUSH
56150: CALL_OW 255
56154: ST_TO_ADDR
// tech_space := tech_spacanom ;
56155: LD_ADDR_VAR 0 12
56159: PUSH
56160: LD_INT 29
56162: ST_TO_ADDR
// tech_time := tech_taurad ;
56163: LD_ADDR_VAR 0 13
56167: PUSH
56168: LD_INT 28
56170: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
56171: LD_ADDR_VAR 0 11
56175: PUSH
56176: LD_VAR 0 1
56180: PPUSH
56181: CALL_OW 310
56185: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
56186: LD_VAR 0 11
56190: PPUSH
56191: CALL_OW 247
56195: PUSH
56196: LD_INT 2
56198: EQUAL
56199: IFFALSE 56203
// exit ;
56201: GO 56713
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56203: LD_ADDR_VAR 0 8
56207: PUSH
56208: LD_INT 81
56210: PUSH
56211: LD_VAR 0 9
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: PUSH
56220: LD_INT 3
56222: PUSH
56223: LD_INT 21
56225: PUSH
56226: LD_INT 3
56228: PUSH
56229: EMPTY
56230: LIST
56231: LIST
56232: PUSH
56233: EMPTY
56234: LIST
56235: LIST
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: PPUSH
56241: CALL_OW 69
56245: ST_TO_ADDR
// if not tmp then
56246: LD_VAR 0 8
56250: NOT
56251: IFFALSE 56255
// exit ;
56253: GO 56713
// if in_unit then
56255: LD_VAR 0 11
56259: IFFALSE 56283
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
56261: LD_ADDR_VAR 0 10
56265: PUSH
56266: LD_VAR 0 8
56270: PPUSH
56271: LD_VAR 0 11
56275: PPUSH
56276: CALL_OW 74
56280: ST_TO_ADDR
56281: GO 56303
// enemy := NearestUnitToUnit ( tmp , unit ) ;
56283: LD_ADDR_VAR 0 10
56287: PUSH
56288: LD_VAR 0 8
56292: PPUSH
56293: LD_VAR 0 1
56297: PPUSH
56298: CALL_OW 74
56302: ST_TO_ADDR
// if not enemy then
56303: LD_VAR 0 10
56307: NOT
56308: IFFALSE 56312
// exit ;
56310: GO 56713
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
56312: LD_VAR 0 11
56316: PUSH
56317: LD_VAR 0 11
56321: PPUSH
56322: LD_VAR 0 10
56326: PPUSH
56327: CALL_OW 296
56331: PUSH
56332: LD_INT 13
56334: GREATER
56335: AND
56336: PUSH
56337: LD_VAR 0 1
56341: PPUSH
56342: LD_VAR 0 10
56346: PPUSH
56347: CALL_OW 296
56351: PUSH
56352: LD_INT 12
56354: GREATER
56355: OR
56356: IFFALSE 56360
// exit ;
56358: GO 56713
// missile := [ 1 ] ;
56360: LD_ADDR_VAR 0 14
56364: PUSH
56365: LD_INT 1
56367: PUSH
56368: EMPTY
56369: LIST
56370: ST_TO_ADDR
// if Researched ( side , tech_space ) then
56371: LD_VAR 0 9
56375: PPUSH
56376: LD_VAR 0 12
56380: PPUSH
56381: CALL_OW 325
56385: IFFALSE 56414
// missile := Replace ( missile , missile + 1 , 2 ) ;
56387: LD_ADDR_VAR 0 14
56391: PUSH
56392: LD_VAR 0 14
56396: PPUSH
56397: LD_VAR 0 14
56401: PUSH
56402: LD_INT 1
56404: PLUS
56405: PPUSH
56406: LD_INT 2
56408: PPUSH
56409: CALL_OW 1
56413: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
56414: LD_VAR 0 9
56418: PPUSH
56419: LD_VAR 0 13
56423: PPUSH
56424: CALL_OW 325
56428: PUSH
56429: LD_VAR 0 10
56433: PPUSH
56434: CALL_OW 255
56438: PPUSH
56439: LD_VAR 0 13
56443: PPUSH
56444: CALL_OW 325
56448: NOT
56449: AND
56450: IFFALSE 56479
// missile := Replace ( missile , missile + 1 , 3 ) ;
56452: LD_ADDR_VAR 0 14
56456: PUSH
56457: LD_VAR 0 14
56461: PPUSH
56462: LD_VAR 0 14
56466: PUSH
56467: LD_INT 1
56469: PLUS
56470: PPUSH
56471: LD_INT 3
56473: PPUSH
56474: CALL_OW 1
56478: ST_TO_ADDR
// if missile < 2 then
56479: LD_VAR 0 14
56483: PUSH
56484: LD_INT 2
56486: LESS
56487: IFFALSE 56491
// exit ;
56489: GO 56713
// x := GetX ( enemy ) ;
56491: LD_ADDR_VAR 0 4
56495: PUSH
56496: LD_VAR 0 10
56500: PPUSH
56501: CALL_OW 250
56505: ST_TO_ADDR
// y := GetY ( enemy ) ;
56506: LD_ADDR_VAR 0 5
56510: PUSH
56511: LD_VAR 0 10
56515: PPUSH
56516: CALL_OW 251
56520: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
56521: LD_ADDR_VAR 0 6
56525: PUSH
56526: LD_VAR 0 4
56530: PUSH
56531: LD_INT 1
56533: NEG
56534: PPUSH
56535: LD_INT 1
56537: PPUSH
56538: CALL_OW 12
56542: PLUS
56543: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
56544: LD_ADDR_VAR 0 7
56548: PUSH
56549: LD_VAR 0 5
56553: PUSH
56554: LD_INT 1
56556: NEG
56557: PPUSH
56558: LD_INT 1
56560: PPUSH
56561: CALL_OW 12
56565: PLUS
56566: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56567: LD_VAR 0 6
56571: PPUSH
56572: LD_VAR 0 7
56576: PPUSH
56577: CALL_OW 488
56581: NOT
56582: IFFALSE 56604
// begin _x := x ;
56584: LD_ADDR_VAR 0 6
56588: PUSH
56589: LD_VAR 0 4
56593: ST_TO_ADDR
// _y := y ;
56594: LD_ADDR_VAR 0 7
56598: PUSH
56599: LD_VAR 0 5
56603: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
56604: LD_ADDR_VAR 0 3
56608: PUSH
56609: LD_INT 1
56611: PPUSH
56612: LD_VAR 0 14
56616: PPUSH
56617: CALL_OW 12
56621: ST_TO_ADDR
// case i of 1 :
56622: LD_VAR 0 3
56626: PUSH
56627: LD_INT 1
56629: DOUBLE
56630: EQUAL
56631: IFTRUE 56635
56633: GO 56652
56635: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
56636: LD_VAR 0 1
56640: PPUSH
56641: LD_VAR 0 10
56645: PPUSH
56646: CALL_OW 115
56650: GO 56713
56652: LD_INT 2
56654: DOUBLE
56655: EQUAL
56656: IFTRUE 56660
56658: GO 56682
56660: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
56661: LD_VAR 0 1
56665: PPUSH
56666: LD_VAR 0 6
56670: PPUSH
56671: LD_VAR 0 7
56675: PPUSH
56676: CALL_OW 153
56680: GO 56713
56682: LD_INT 3
56684: DOUBLE
56685: EQUAL
56686: IFTRUE 56690
56688: GO 56712
56690: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
56691: LD_VAR 0 1
56695: PPUSH
56696: LD_VAR 0 6
56700: PPUSH
56701: LD_VAR 0 7
56705: PPUSH
56706: CALL_OW 154
56710: GO 56713
56712: POP
// end ;
56713: LD_VAR 0 2
56717: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
56718: LD_INT 0
56720: PPUSH
56721: PPUSH
56722: PPUSH
56723: PPUSH
56724: PPUSH
56725: PPUSH
// if not unit or not building then
56726: LD_VAR 0 1
56730: NOT
56731: PUSH
56732: LD_VAR 0 2
56736: NOT
56737: OR
56738: IFFALSE 56742
// exit ;
56740: GO 56900
// x := GetX ( building ) ;
56742: LD_ADDR_VAR 0 5
56746: PUSH
56747: LD_VAR 0 2
56751: PPUSH
56752: CALL_OW 250
56756: ST_TO_ADDR
// y := GetY ( building ) ;
56757: LD_ADDR_VAR 0 6
56761: PUSH
56762: LD_VAR 0 2
56766: PPUSH
56767: CALL_OW 251
56771: ST_TO_ADDR
// for i = 0 to 5 do
56772: LD_ADDR_VAR 0 4
56776: PUSH
56777: DOUBLE
56778: LD_INT 0
56780: DEC
56781: ST_TO_ADDR
56782: LD_INT 5
56784: PUSH
56785: FOR_TO
56786: IFFALSE 56898
// begin _x := ShiftX ( x , i , 3 ) ;
56788: LD_ADDR_VAR 0 7
56792: PUSH
56793: LD_VAR 0 5
56797: PPUSH
56798: LD_VAR 0 4
56802: PPUSH
56803: LD_INT 3
56805: PPUSH
56806: CALL_OW 272
56810: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
56811: LD_ADDR_VAR 0 8
56815: PUSH
56816: LD_VAR 0 6
56820: PPUSH
56821: LD_VAR 0 4
56825: PPUSH
56826: LD_INT 3
56828: PPUSH
56829: CALL_OW 273
56833: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56834: LD_VAR 0 7
56838: PPUSH
56839: LD_VAR 0 8
56843: PPUSH
56844: CALL_OW 488
56848: NOT
56849: IFFALSE 56853
// continue ;
56851: GO 56785
// if HexInfo ( _x , _y ) = 0 then
56853: LD_VAR 0 7
56857: PPUSH
56858: LD_VAR 0 8
56862: PPUSH
56863: CALL_OW 428
56867: PUSH
56868: LD_INT 0
56870: EQUAL
56871: IFFALSE 56896
// begin ComMoveXY ( unit , _x , _y ) ;
56873: LD_VAR 0 1
56877: PPUSH
56878: LD_VAR 0 7
56882: PPUSH
56883: LD_VAR 0 8
56887: PPUSH
56888: CALL_OW 111
// exit ;
56892: POP
56893: POP
56894: GO 56900
// end ; end ;
56896: GO 56785
56898: POP
56899: POP
// end ;
56900: LD_VAR 0 3
56904: RET
// export function ScanBase ( side , base_area ) ; begin
56905: LD_INT 0
56907: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
56908: LD_ADDR_VAR 0 3
56912: PUSH
56913: LD_VAR 0 2
56917: PPUSH
56918: LD_INT 81
56920: PUSH
56921: LD_VAR 0 1
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PPUSH
56930: CALL_OW 70
56934: ST_TO_ADDR
// end ;
56935: LD_VAR 0 3
56939: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
56940: LD_INT 0
56942: PPUSH
56943: PPUSH
56944: PPUSH
56945: PPUSH
// result := false ;
56946: LD_ADDR_VAR 0 2
56950: PUSH
56951: LD_INT 0
56953: ST_TO_ADDR
// side := GetSide ( unit ) ;
56954: LD_ADDR_VAR 0 3
56958: PUSH
56959: LD_VAR 0 1
56963: PPUSH
56964: CALL_OW 255
56968: ST_TO_ADDR
// nat := GetNation ( unit ) ;
56969: LD_ADDR_VAR 0 4
56973: PUSH
56974: LD_VAR 0 1
56978: PPUSH
56979: CALL_OW 248
56983: ST_TO_ADDR
// case nat of 1 :
56984: LD_VAR 0 4
56988: PUSH
56989: LD_INT 1
56991: DOUBLE
56992: EQUAL
56993: IFTRUE 56997
56995: GO 57008
56997: POP
// tech := tech_lassight ; 2 :
56998: LD_ADDR_VAR 0 5
57002: PUSH
57003: LD_INT 12
57005: ST_TO_ADDR
57006: GO 57047
57008: LD_INT 2
57010: DOUBLE
57011: EQUAL
57012: IFTRUE 57016
57014: GO 57027
57016: POP
// tech := tech_mortar ; 3 :
57017: LD_ADDR_VAR 0 5
57021: PUSH
57022: LD_INT 41
57024: ST_TO_ADDR
57025: GO 57047
57027: LD_INT 3
57029: DOUBLE
57030: EQUAL
57031: IFTRUE 57035
57033: GO 57046
57035: POP
// tech := tech_bazooka ; end ;
57036: LD_ADDR_VAR 0 5
57040: PUSH
57041: LD_INT 44
57043: ST_TO_ADDR
57044: GO 57047
57046: POP
// if Researched ( side , tech ) then
57047: LD_VAR 0 3
57051: PPUSH
57052: LD_VAR 0 5
57056: PPUSH
57057: CALL_OW 325
57061: IFFALSE 57088
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
57063: LD_ADDR_VAR 0 2
57067: PUSH
57068: LD_INT 5
57070: PUSH
57071: LD_INT 8
57073: PUSH
57074: LD_INT 9
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: PUSH
57082: LD_VAR 0 4
57086: ARRAY
57087: ST_TO_ADDR
// end ;
57088: LD_VAR 0 2
57092: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
57093: LD_INT 0
57095: PPUSH
57096: PPUSH
57097: PPUSH
// if not mines then
57098: LD_VAR 0 2
57102: NOT
57103: IFFALSE 57107
// exit ;
57105: GO 57251
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
57107: LD_ADDR_VAR 0 5
57111: PUSH
57112: LD_INT 81
57114: PUSH
57115: LD_VAR 0 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 3
57126: PUSH
57127: LD_INT 21
57129: PUSH
57130: LD_INT 3
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: EMPTY
57138: LIST
57139: LIST
57140: PUSH
57141: EMPTY
57142: LIST
57143: LIST
57144: PPUSH
57145: CALL_OW 69
57149: ST_TO_ADDR
// for i in mines do
57150: LD_ADDR_VAR 0 4
57154: PUSH
57155: LD_VAR 0 2
57159: PUSH
57160: FOR_IN
57161: IFFALSE 57249
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
57163: LD_VAR 0 4
57167: PUSH
57168: LD_INT 1
57170: ARRAY
57171: PPUSH
57172: LD_VAR 0 4
57176: PUSH
57177: LD_INT 2
57179: ARRAY
57180: PPUSH
57181: CALL_OW 458
57185: NOT
57186: IFFALSE 57190
// continue ;
57188: GO 57160
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
57190: LD_VAR 0 4
57194: PUSH
57195: LD_INT 1
57197: ARRAY
57198: PPUSH
57199: LD_VAR 0 4
57203: PUSH
57204: LD_INT 2
57206: ARRAY
57207: PPUSH
57208: CALL_OW 428
57212: PUSH
57213: LD_VAR 0 5
57217: IN
57218: IFFALSE 57247
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
57220: LD_VAR 0 4
57224: PUSH
57225: LD_INT 1
57227: ARRAY
57228: PPUSH
57229: LD_VAR 0 4
57233: PUSH
57234: LD_INT 2
57236: ARRAY
57237: PPUSH
57238: LD_VAR 0 1
57242: PPUSH
57243: CALL_OW 456
// end ;
57247: GO 57160
57249: POP
57250: POP
// end ;
57251: LD_VAR 0 3
57255: RET
// export function Count ( array ) ; begin
57256: LD_INT 0
57258: PPUSH
// result := array + 0 ;
57259: LD_ADDR_VAR 0 2
57263: PUSH
57264: LD_VAR 0 1
57268: PUSH
57269: LD_INT 0
57271: PLUS
57272: ST_TO_ADDR
// end ;
57273: LD_VAR 0 2
57277: RET
// export function IsEmpty ( building ) ; begin
57278: LD_INT 0
57280: PPUSH
// if not building then
57281: LD_VAR 0 1
57285: NOT
57286: IFFALSE 57290
// exit ;
57288: GO 57333
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
57290: LD_ADDR_VAR 0 2
57294: PUSH
57295: LD_VAR 0 1
57299: PUSH
57300: LD_INT 22
57302: PUSH
57303: LD_VAR 0 1
57307: PPUSH
57308: CALL_OW 255
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 58
57319: PUSH
57320: EMPTY
57321: LIST
57322: PUSH
57323: EMPTY
57324: LIST
57325: LIST
57326: PPUSH
57327: CALL_OW 69
57331: IN
57332: ST_TO_ADDR
// end ;
57333: LD_VAR 0 2
57337: RET
// export function IsNotFull ( building ) ; var places ; begin
57338: LD_INT 0
57340: PPUSH
57341: PPUSH
// if not building then
57342: LD_VAR 0 1
57346: NOT
57347: IFFALSE 57351
// exit ;
57349: GO 57379
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
57351: LD_ADDR_VAR 0 2
57355: PUSH
57356: LD_VAR 0 1
57360: PPUSH
57361: LD_INT 3
57363: PUSH
57364: LD_INT 62
57366: PUSH
57367: EMPTY
57368: LIST
57369: PUSH
57370: EMPTY
57371: LIST
57372: LIST
57373: PPUSH
57374: CALL_OW 72
57378: ST_TO_ADDR
// end ;
57379: LD_VAR 0 2
57383: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
57384: LD_INT 0
57386: PPUSH
57387: PPUSH
57388: PPUSH
57389: PPUSH
// tmp := [ ] ;
57390: LD_ADDR_VAR 0 3
57394: PUSH
57395: EMPTY
57396: ST_TO_ADDR
// list := [ ] ;
57397: LD_ADDR_VAR 0 5
57401: PUSH
57402: EMPTY
57403: ST_TO_ADDR
// for i = 16 to 25 do
57404: LD_ADDR_VAR 0 4
57408: PUSH
57409: DOUBLE
57410: LD_INT 16
57412: DEC
57413: ST_TO_ADDR
57414: LD_INT 25
57416: PUSH
57417: FOR_TO
57418: IFFALSE 57491
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
57420: LD_ADDR_VAR 0 3
57424: PUSH
57425: LD_VAR 0 3
57429: PUSH
57430: LD_INT 22
57432: PUSH
57433: LD_VAR 0 1
57437: PPUSH
57438: CALL_OW 255
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 91
57449: PUSH
57450: LD_VAR 0 1
57454: PUSH
57455: LD_INT 6
57457: PUSH
57458: EMPTY
57459: LIST
57460: LIST
57461: LIST
57462: PUSH
57463: LD_INT 30
57465: PUSH
57466: LD_VAR 0 4
57470: PUSH
57471: EMPTY
57472: LIST
57473: LIST
57474: PUSH
57475: EMPTY
57476: LIST
57477: LIST
57478: LIST
57479: PUSH
57480: EMPTY
57481: LIST
57482: PPUSH
57483: CALL_OW 69
57487: ADD
57488: ST_TO_ADDR
57489: GO 57417
57491: POP
57492: POP
// for i = 1 to tmp do
57493: LD_ADDR_VAR 0 4
57497: PUSH
57498: DOUBLE
57499: LD_INT 1
57501: DEC
57502: ST_TO_ADDR
57503: LD_VAR 0 3
57507: PUSH
57508: FOR_TO
57509: IFFALSE 57597
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
57511: LD_ADDR_VAR 0 5
57515: PUSH
57516: LD_VAR 0 5
57520: PUSH
57521: LD_VAR 0 3
57525: PUSH
57526: LD_VAR 0 4
57530: ARRAY
57531: PPUSH
57532: CALL_OW 266
57536: PUSH
57537: LD_VAR 0 3
57541: PUSH
57542: LD_VAR 0 4
57546: ARRAY
57547: PPUSH
57548: CALL_OW 250
57552: PUSH
57553: LD_VAR 0 3
57557: PUSH
57558: LD_VAR 0 4
57562: ARRAY
57563: PPUSH
57564: CALL_OW 251
57568: PUSH
57569: LD_VAR 0 3
57573: PUSH
57574: LD_VAR 0 4
57578: ARRAY
57579: PPUSH
57580: CALL_OW 254
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: LIST
57589: LIST
57590: PUSH
57591: EMPTY
57592: LIST
57593: ADD
57594: ST_TO_ADDR
57595: GO 57508
57597: POP
57598: POP
// result := list ;
57599: LD_ADDR_VAR 0 2
57603: PUSH
57604: LD_VAR 0 5
57608: ST_TO_ADDR
// end ;
57609: LD_VAR 0 2
57613: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
57614: LD_INT 0
57616: PPUSH
57617: PPUSH
57618: PPUSH
57619: PPUSH
57620: PPUSH
57621: PPUSH
57622: PPUSH
// if not factory then
57623: LD_VAR 0 1
57627: NOT
57628: IFFALSE 57632
// exit ;
57630: GO 58225
// if control = control_apeman then
57632: LD_VAR 0 4
57636: PUSH
57637: LD_INT 5
57639: EQUAL
57640: IFFALSE 57749
// begin tmp := UnitsInside ( factory ) ;
57642: LD_ADDR_VAR 0 8
57646: PUSH
57647: LD_VAR 0 1
57651: PPUSH
57652: CALL_OW 313
57656: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
57657: LD_VAR 0 8
57661: PPUSH
57662: LD_INT 25
57664: PUSH
57665: LD_INT 12
57667: PUSH
57668: EMPTY
57669: LIST
57670: LIST
57671: PPUSH
57672: CALL_OW 72
57676: NOT
57677: IFFALSE 57687
// control := control_manual ;
57679: LD_ADDR_VAR 0 4
57683: PUSH
57684: LD_INT 1
57686: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
57687: LD_ADDR_VAR 0 8
57691: PUSH
57692: LD_VAR 0 1
57696: PPUSH
57697: CALL 57384 0 1
57701: ST_TO_ADDR
// if tmp then
57702: LD_VAR 0 8
57706: IFFALSE 57749
// begin for i in tmp do
57708: LD_ADDR_VAR 0 7
57712: PUSH
57713: LD_VAR 0 8
57717: PUSH
57718: FOR_IN
57719: IFFALSE 57747
// if i [ 1 ] = b_ext_radio then
57721: LD_VAR 0 7
57725: PUSH
57726: LD_INT 1
57728: ARRAY
57729: PUSH
57730: LD_INT 22
57732: EQUAL
57733: IFFALSE 57745
// begin control := control_remote ;
57735: LD_ADDR_VAR 0 4
57739: PUSH
57740: LD_INT 2
57742: ST_TO_ADDR
// break ;
57743: GO 57747
// end ;
57745: GO 57718
57747: POP
57748: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57749: LD_VAR 0 1
57753: PPUSH
57754: LD_VAR 0 2
57758: PPUSH
57759: LD_VAR 0 3
57763: PPUSH
57764: LD_VAR 0 4
57768: PPUSH
57769: LD_VAR 0 5
57773: PPUSH
57774: CALL_OW 448
57778: IFFALSE 57813
// begin result := [ chassis , engine , control , weapon ] ;
57780: LD_ADDR_VAR 0 6
57784: PUSH
57785: LD_VAR 0 2
57789: PUSH
57790: LD_VAR 0 3
57794: PUSH
57795: LD_VAR 0 4
57799: PUSH
57800: LD_VAR 0 5
57804: PUSH
57805: EMPTY
57806: LIST
57807: LIST
57808: LIST
57809: LIST
57810: ST_TO_ADDR
// exit ;
57811: GO 58225
// end ; _chassis := AvailableChassisList ( factory ) ;
57813: LD_ADDR_VAR 0 9
57817: PUSH
57818: LD_VAR 0 1
57822: PPUSH
57823: CALL_OW 475
57827: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
57828: LD_ADDR_VAR 0 11
57832: PUSH
57833: LD_VAR 0 1
57837: PPUSH
57838: CALL_OW 476
57842: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
57843: LD_ADDR_VAR 0 12
57847: PUSH
57848: LD_VAR 0 1
57852: PPUSH
57853: CALL_OW 477
57857: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
57858: LD_ADDR_VAR 0 10
57862: PUSH
57863: LD_VAR 0 1
57867: PPUSH
57868: CALL_OW 478
57872: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
57873: LD_VAR 0 9
57877: NOT
57878: PUSH
57879: LD_VAR 0 11
57883: NOT
57884: OR
57885: PUSH
57886: LD_VAR 0 12
57890: NOT
57891: OR
57892: PUSH
57893: LD_VAR 0 10
57897: NOT
57898: OR
57899: IFFALSE 57934
// begin result := [ chassis , engine , control , weapon ] ;
57901: LD_ADDR_VAR 0 6
57905: PUSH
57906: LD_VAR 0 2
57910: PUSH
57911: LD_VAR 0 3
57915: PUSH
57916: LD_VAR 0 4
57920: PUSH
57921: LD_VAR 0 5
57925: PUSH
57926: EMPTY
57927: LIST
57928: LIST
57929: LIST
57930: LIST
57931: ST_TO_ADDR
// exit ;
57932: GO 58225
// end ; if not chassis in _chassis then
57934: LD_VAR 0 2
57938: PUSH
57939: LD_VAR 0 9
57943: IN
57944: NOT
57945: IFFALSE 57971
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
57947: LD_ADDR_VAR 0 2
57951: PUSH
57952: LD_VAR 0 9
57956: PUSH
57957: LD_INT 1
57959: PPUSH
57960: LD_VAR 0 9
57964: PPUSH
57965: CALL_OW 12
57969: ARRAY
57970: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
57971: LD_VAR 0 2
57975: PPUSH
57976: LD_VAR 0 3
57980: PPUSH
57981: CALL 58230 0 2
57985: NOT
57986: IFFALSE 58045
// repeat engine := _engine [ 1 ] ;
57988: LD_ADDR_VAR 0 3
57992: PUSH
57993: LD_VAR 0 11
57997: PUSH
57998: LD_INT 1
58000: ARRAY
58001: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
58002: LD_ADDR_VAR 0 11
58006: PUSH
58007: LD_VAR 0 11
58011: PPUSH
58012: LD_INT 1
58014: PPUSH
58015: CALL_OW 3
58019: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
58020: LD_VAR 0 2
58024: PPUSH
58025: LD_VAR 0 3
58029: PPUSH
58030: CALL 58230 0 2
58034: PUSH
58035: LD_VAR 0 11
58039: PUSH
58040: EMPTY
58041: EQUAL
58042: OR
58043: IFFALSE 57988
// if not control in _control then
58045: LD_VAR 0 4
58049: PUSH
58050: LD_VAR 0 12
58054: IN
58055: NOT
58056: IFFALSE 58082
// control := _control [ rand ( 1 , _control ) ] ;
58058: LD_ADDR_VAR 0 4
58062: PUSH
58063: LD_VAR 0 12
58067: PUSH
58068: LD_INT 1
58070: PPUSH
58071: LD_VAR 0 12
58075: PPUSH
58076: CALL_OW 12
58080: ARRAY
58081: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
58082: LD_VAR 0 2
58086: PPUSH
58087: LD_VAR 0 5
58091: PPUSH
58092: CALL 58450 0 2
58096: NOT
58097: IFFALSE 58156
// repeat weapon := _weapon [ 1 ] ;
58099: LD_ADDR_VAR 0 5
58103: PUSH
58104: LD_VAR 0 10
58108: PUSH
58109: LD_INT 1
58111: ARRAY
58112: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
58113: LD_ADDR_VAR 0 10
58117: PUSH
58118: LD_VAR 0 10
58122: PPUSH
58123: LD_INT 1
58125: PPUSH
58126: CALL_OW 3
58130: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
58131: LD_VAR 0 2
58135: PPUSH
58136: LD_VAR 0 5
58140: PPUSH
58141: CALL 58450 0 2
58145: PUSH
58146: LD_VAR 0 10
58150: PUSH
58151: EMPTY
58152: EQUAL
58153: OR
58154: IFFALSE 58099
// result := [ ] ;
58156: LD_ADDR_VAR 0 6
58160: PUSH
58161: EMPTY
58162: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
58163: LD_VAR 0 1
58167: PPUSH
58168: LD_VAR 0 2
58172: PPUSH
58173: LD_VAR 0 3
58177: PPUSH
58178: LD_VAR 0 4
58182: PPUSH
58183: LD_VAR 0 5
58187: PPUSH
58188: CALL_OW 448
58192: IFFALSE 58225
// result := [ chassis , engine , control , weapon ] ;
58194: LD_ADDR_VAR 0 6
58198: PUSH
58199: LD_VAR 0 2
58203: PUSH
58204: LD_VAR 0 3
58208: PUSH
58209: LD_VAR 0 4
58213: PUSH
58214: LD_VAR 0 5
58218: PUSH
58219: EMPTY
58220: LIST
58221: LIST
58222: LIST
58223: LIST
58224: ST_TO_ADDR
// end ;
58225: LD_VAR 0 6
58229: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
58230: LD_INT 0
58232: PPUSH
// if not chassis or not engine then
58233: LD_VAR 0 1
58237: NOT
58238: PUSH
58239: LD_VAR 0 2
58243: NOT
58244: OR
58245: IFFALSE 58249
// exit ;
58247: GO 58445
// case engine of engine_solar :
58249: LD_VAR 0 2
58253: PUSH
58254: LD_INT 2
58256: DOUBLE
58257: EQUAL
58258: IFTRUE 58262
58260: GO 58300
58262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
58263: LD_ADDR_VAR 0 3
58267: PUSH
58268: LD_INT 11
58270: PUSH
58271: LD_INT 12
58273: PUSH
58274: LD_INT 13
58276: PUSH
58277: LD_INT 14
58279: PUSH
58280: LD_INT 1
58282: PUSH
58283: LD_INT 2
58285: PUSH
58286: LD_INT 3
58288: PUSH
58289: EMPTY
58290: LIST
58291: LIST
58292: LIST
58293: LIST
58294: LIST
58295: LIST
58296: LIST
58297: ST_TO_ADDR
58298: GO 58429
58300: LD_INT 1
58302: DOUBLE
58303: EQUAL
58304: IFTRUE 58308
58306: GO 58370
58308: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
58309: LD_ADDR_VAR 0 3
58313: PUSH
58314: LD_INT 11
58316: PUSH
58317: LD_INT 12
58319: PUSH
58320: LD_INT 13
58322: PUSH
58323: LD_INT 14
58325: PUSH
58326: LD_INT 1
58328: PUSH
58329: LD_INT 2
58331: PUSH
58332: LD_INT 3
58334: PUSH
58335: LD_INT 4
58337: PUSH
58338: LD_INT 5
58340: PUSH
58341: LD_INT 21
58343: PUSH
58344: LD_INT 23
58346: PUSH
58347: LD_INT 22
58349: PUSH
58350: LD_INT 24
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: LIST
58357: LIST
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: LIST
58366: LIST
58367: ST_TO_ADDR
58368: GO 58429
58370: LD_INT 3
58372: DOUBLE
58373: EQUAL
58374: IFTRUE 58378
58376: GO 58428
58378: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
58379: LD_ADDR_VAR 0 3
58383: PUSH
58384: LD_INT 13
58386: PUSH
58387: LD_INT 14
58389: PUSH
58390: LD_INT 2
58392: PUSH
58393: LD_INT 3
58395: PUSH
58396: LD_INT 4
58398: PUSH
58399: LD_INT 5
58401: PUSH
58402: LD_INT 21
58404: PUSH
58405: LD_INT 22
58407: PUSH
58408: LD_INT 23
58410: PUSH
58411: LD_INT 24
58413: PUSH
58414: EMPTY
58415: LIST
58416: LIST
58417: LIST
58418: LIST
58419: LIST
58420: LIST
58421: LIST
58422: LIST
58423: LIST
58424: LIST
58425: ST_TO_ADDR
58426: GO 58429
58428: POP
// result := ( chassis in result ) ;
58429: LD_ADDR_VAR 0 3
58433: PUSH
58434: LD_VAR 0 1
58438: PUSH
58439: LD_VAR 0 3
58443: IN
58444: ST_TO_ADDR
// end ;
58445: LD_VAR 0 3
58449: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
58450: LD_INT 0
58452: PPUSH
// if not chassis or not weapon then
58453: LD_VAR 0 1
58457: NOT
58458: PUSH
58459: LD_VAR 0 2
58463: NOT
58464: OR
58465: IFFALSE 58469
// exit ;
58467: GO 59529
// case weapon of us_machine_gun :
58469: LD_VAR 0 2
58473: PUSH
58474: LD_INT 2
58476: DOUBLE
58477: EQUAL
58478: IFTRUE 58482
58480: GO 58512
58482: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
58483: LD_ADDR_VAR 0 3
58487: PUSH
58488: LD_INT 1
58490: PUSH
58491: LD_INT 2
58493: PUSH
58494: LD_INT 3
58496: PUSH
58497: LD_INT 4
58499: PUSH
58500: LD_INT 5
58502: PUSH
58503: EMPTY
58504: LIST
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: ST_TO_ADDR
58510: GO 59513
58512: LD_INT 3
58514: DOUBLE
58515: EQUAL
58516: IFTRUE 58520
58518: GO 58550
58520: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
58521: LD_ADDR_VAR 0 3
58525: PUSH
58526: LD_INT 1
58528: PUSH
58529: LD_INT 2
58531: PUSH
58532: LD_INT 3
58534: PUSH
58535: LD_INT 4
58537: PUSH
58538: LD_INT 5
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: LIST
58545: LIST
58546: LIST
58547: ST_TO_ADDR
58548: GO 59513
58550: LD_INT 11
58552: DOUBLE
58553: EQUAL
58554: IFTRUE 58558
58556: GO 58588
58558: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
58559: LD_ADDR_VAR 0 3
58563: PUSH
58564: LD_INT 1
58566: PUSH
58567: LD_INT 2
58569: PUSH
58570: LD_INT 3
58572: PUSH
58573: LD_INT 4
58575: PUSH
58576: LD_INT 5
58578: PUSH
58579: EMPTY
58580: LIST
58581: LIST
58582: LIST
58583: LIST
58584: LIST
58585: ST_TO_ADDR
58586: GO 59513
58588: LD_INT 4
58590: DOUBLE
58591: EQUAL
58592: IFTRUE 58596
58594: GO 58622
58596: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
58597: LD_ADDR_VAR 0 3
58601: PUSH
58602: LD_INT 2
58604: PUSH
58605: LD_INT 3
58607: PUSH
58608: LD_INT 4
58610: PUSH
58611: LD_INT 5
58613: PUSH
58614: EMPTY
58615: LIST
58616: LIST
58617: LIST
58618: LIST
58619: ST_TO_ADDR
58620: GO 59513
58622: LD_INT 5
58624: DOUBLE
58625: EQUAL
58626: IFTRUE 58630
58628: GO 58656
58630: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
58631: LD_ADDR_VAR 0 3
58635: PUSH
58636: LD_INT 2
58638: PUSH
58639: LD_INT 3
58641: PUSH
58642: LD_INT 4
58644: PUSH
58645: LD_INT 5
58647: PUSH
58648: EMPTY
58649: LIST
58650: LIST
58651: LIST
58652: LIST
58653: ST_TO_ADDR
58654: GO 59513
58656: LD_INT 9
58658: DOUBLE
58659: EQUAL
58660: IFTRUE 58664
58662: GO 58690
58664: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
58665: LD_ADDR_VAR 0 3
58669: PUSH
58670: LD_INT 2
58672: PUSH
58673: LD_INT 3
58675: PUSH
58676: LD_INT 4
58678: PUSH
58679: LD_INT 5
58681: PUSH
58682: EMPTY
58683: LIST
58684: LIST
58685: LIST
58686: LIST
58687: ST_TO_ADDR
58688: GO 59513
58690: LD_INT 7
58692: DOUBLE
58693: EQUAL
58694: IFTRUE 58698
58696: GO 58724
58698: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
58699: LD_ADDR_VAR 0 3
58703: PUSH
58704: LD_INT 2
58706: PUSH
58707: LD_INT 3
58709: PUSH
58710: LD_INT 4
58712: PUSH
58713: LD_INT 5
58715: PUSH
58716: EMPTY
58717: LIST
58718: LIST
58719: LIST
58720: LIST
58721: ST_TO_ADDR
58722: GO 59513
58724: LD_INT 12
58726: DOUBLE
58727: EQUAL
58728: IFTRUE 58732
58730: GO 58758
58732: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
58733: LD_ADDR_VAR 0 3
58737: PUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 3
58743: PUSH
58744: LD_INT 4
58746: PUSH
58747: LD_INT 5
58749: PUSH
58750: EMPTY
58751: LIST
58752: LIST
58753: LIST
58754: LIST
58755: ST_TO_ADDR
58756: GO 59513
58758: LD_INT 13
58760: DOUBLE
58761: EQUAL
58762: IFTRUE 58766
58764: GO 58792
58766: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
58767: LD_ADDR_VAR 0 3
58771: PUSH
58772: LD_INT 2
58774: PUSH
58775: LD_INT 3
58777: PUSH
58778: LD_INT 4
58780: PUSH
58781: LD_INT 5
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: ST_TO_ADDR
58790: GO 59513
58792: LD_INT 14
58794: DOUBLE
58795: EQUAL
58796: IFTRUE 58800
58798: GO 58818
58800: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
58801: LD_ADDR_VAR 0 3
58805: PUSH
58806: LD_INT 4
58808: PUSH
58809: LD_INT 5
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: ST_TO_ADDR
58816: GO 59513
58818: LD_INT 6
58820: DOUBLE
58821: EQUAL
58822: IFTRUE 58826
58824: GO 58844
58826: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
58827: LD_ADDR_VAR 0 3
58831: PUSH
58832: LD_INT 4
58834: PUSH
58835: LD_INT 5
58837: PUSH
58838: EMPTY
58839: LIST
58840: LIST
58841: ST_TO_ADDR
58842: GO 59513
58844: LD_INT 10
58846: DOUBLE
58847: EQUAL
58848: IFTRUE 58852
58850: GO 58870
58852: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
58853: LD_ADDR_VAR 0 3
58857: PUSH
58858: LD_INT 4
58860: PUSH
58861: LD_INT 5
58863: PUSH
58864: EMPTY
58865: LIST
58866: LIST
58867: ST_TO_ADDR
58868: GO 59513
58870: LD_INT 22
58872: DOUBLE
58873: EQUAL
58874: IFTRUE 58878
58876: GO 58904
58878: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
58879: LD_ADDR_VAR 0 3
58883: PUSH
58884: LD_INT 11
58886: PUSH
58887: LD_INT 12
58889: PUSH
58890: LD_INT 13
58892: PUSH
58893: LD_INT 14
58895: PUSH
58896: EMPTY
58897: LIST
58898: LIST
58899: LIST
58900: LIST
58901: ST_TO_ADDR
58902: GO 59513
58904: LD_INT 23
58906: DOUBLE
58907: EQUAL
58908: IFTRUE 58912
58910: GO 58938
58912: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
58913: LD_ADDR_VAR 0 3
58917: PUSH
58918: LD_INT 11
58920: PUSH
58921: LD_INT 12
58923: PUSH
58924: LD_INT 13
58926: PUSH
58927: LD_INT 14
58929: PUSH
58930: EMPTY
58931: LIST
58932: LIST
58933: LIST
58934: LIST
58935: ST_TO_ADDR
58936: GO 59513
58938: LD_INT 24
58940: DOUBLE
58941: EQUAL
58942: IFTRUE 58946
58944: GO 58972
58946: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
58947: LD_ADDR_VAR 0 3
58951: PUSH
58952: LD_INT 11
58954: PUSH
58955: LD_INT 12
58957: PUSH
58958: LD_INT 13
58960: PUSH
58961: LD_INT 14
58963: PUSH
58964: EMPTY
58965: LIST
58966: LIST
58967: LIST
58968: LIST
58969: ST_TO_ADDR
58970: GO 59513
58972: LD_INT 30
58974: DOUBLE
58975: EQUAL
58976: IFTRUE 58980
58978: GO 59006
58980: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
58981: LD_ADDR_VAR 0 3
58985: PUSH
58986: LD_INT 11
58988: PUSH
58989: LD_INT 12
58991: PUSH
58992: LD_INT 13
58994: PUSH
58995: LD_INT 14
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: ST_TO_ADDR
59004: GO 59513
59006: LD_INT 25
59008: DOUBLE
59009: EQUAL
59010: IFTRUE 59014
59012: GO 59032
59014: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
59015: LD_ADDR_VAR 0 3
59019: PUSH
59020: LD_INT 13
59022: PUSH
59023: LD_INT 14
59025: PUSH
59026: EMPTY
59027: LIST
59028: LIST
59029: ST_TO_ADDR
59030: GO 59513
59032: LD_INT 27
59034: DOUBLE
59035: EQUAL
59036: IFTRUE 59040
59038: GO 59058
59040: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
59041: LD_ADDR_VAR 0 3
59045: PUSH
59046: LD_INT 13
59048: PUSH
59049: LD_INT 14
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: ST_TO_ADDR
59056: GO 59513
59058: LD_INT 92
59060: DOUBLE
59061: EQUAL
59062: IFTRUE 59066
59064: GO 59092
59066: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
59067: LD_ADDR_VAR 0 3
59071: PUSH
59072: LD_INT 11
59074: PUSH
59075: LD_INT 12
59077: PUSH
59078: LD_INT 13
59080: PUSH
59081: LD_INT 14
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: LIST
59088: LIST
59089: ST_TO_ADDR
59090: GO 59513
59092: LD_INT 28
59094: DOUBLE
59095: EQUAL
59096: IFTRUE 59100
59098: GO 59118
59100: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
59101: LD_ADDR_VAR 0 3
59105: PUSH
59106: LD_INT 13
59108: PUSH
59109: LD_INT 14
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: ST_TO_ADDR
59116: GO 59513
59118: LD_INT 29
59120: DOUBLE
59121: EQUAL
59122: IFTRUE 59126
59124: GO 59144
59126: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
59127: LD_ADDR_VAR 0 3
59131: PUSH
59132: LD_INT 13
59134: PUSH
59135: LD_INT 14
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: ST_TO_ADDR
59142: GO 59513
59144: LD_INT 31
59146: DOUBLE
59147: EQUAL
59148: IFTRUE 59152
59150: GO 59170
59152: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
59153: LD_ADDR_VAR 0 3
59157: PUSH
59158: LD_INT 13
59160: PUSH
59161: LD_INT 14
59163: PUSH
59164: EMPTY
59165: LIST
59166: LIST
59167: ST_TO_ADDR
59168: GO 59513
59170: LD_INT 26
59172: DOUBLE
59173: EQUAL
59174: IFTRUE 59178
59176: GO 59196
59178: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
59179: LD_ADDR_VAR 0 3
59183: PUSH
59184: LD_INT 13
59186: PUSH
59187: LD_INT 14
59189: PUSH
59190: EMPTY
59191: LIST
59192: LIST
59193: ST_TO_ADDR
59194: GO 59513
59196: LD_INT 42
59198: DOUBLE
59199: EQUAL
59200: IFTRUE 59204
59202: GO 59230
59204: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
59205: LD_ADDR_VAR 0 3
59209: PUSH
59210: LD_INT 21
59212: PUSH
59213: LD_INT 22
59215: PUSH
59216: LD_INT 23
59218: PUSH
59219: LD_INT 24
59221: PUSH
59222: EMPTY
59223: LIST
59224: LIST
59225: LIST
59226: LIST
59227: ST_TO_ADDR
59228: GO 59513
59230: LD_INT 43
59232: DOUBLE
59233: EQUAL
59234: IFTRUE 59238
59236: GO 59264
59238: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
59239: LD_ADDR_VAR 0 3
59243: PUSH
59244: LD_INT 21
59246: PUSH
59247: LD_INT 22
59249: PUSH
59250: LD_INT 23
59252: PUSH
59253: LD_INT 24
59255: PUSH
59256: EMPTY
59257: LIST
59258: LIST
59259: LIST
59260: LIST
59261: ST_TO_ADDR
59262: GO 59513
59264: LD_INT 44
59266: DOUBLE
59267: EQUAL
59268: IFTRUE 59272
59270: GO 59298
59272: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
59273: LD_ADDR_VAR 0 3
59277: PUSH
59278: LD_INT 21
59280: PUSH
59281: LD_INT 22
59283: PUSH
59284: LD_INT 23
59286: PUSH
59287: LD_INT 24
59289: PUSH
59290: EMPTY
59291: LIST
59292: LIST
59293: LIST
59294: LIST
59295: ST_TO_ADDR
59296: GO 59513
59298: LD_INT 45
59300: DOUBLE
59301: EQUAL
59302: IFTRUE 59306
59304: GO 59332
59306: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
59307: LD_ADDR_VAR 0 3
59311: PUSH
59312: LD_INT 21
59314: PUSH
59315: LD_INT 22
59317: PUSH
59318: LD_INT 23
59320: PUSH
59321: LD_INT 24
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: LIST
59329: ST_TO_ADDR
59330: GO 59513
59332: LD_INT 49
59334: DOUBLE
59335: EQUAL
59336: IFTRUE 59340
59338: GO 59366
59340: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
59341: LD_ADDR_VAR 0 3
59345: PUSH
59346: LD_INT 21
59348: PUSH
59349: LD_INT 22
59351: PUSH
59352: LD_INT 23
59354: PUSH
59355: LD_INT 24
59357: PUSH
59358: EMPTY
59359: LIST
59360: LIST
59361: LIST
59362: LIST
59363: ST_TO_ADDR
59364: GO 59513
59366: LD_INT 51
59368: DOUBLE
59369: EQUAL
59370: IFTRUE 59374
59372: GO 59400
59374: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
59375: LD_ADDR_VAR 0 3
59379: PUSH
59380: LD_INT 21
59382: PUSH
59383: LD_INT 22
59385: PUSH
59386: LD_INT 23
59388: PUSH
59389: LD_INT 24
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: LIST
59396: LIST
59397: ST_TO_ADDR
59398: GO 59513
59400: LD_INT 52
59402: DOUBLE
59403: EQUAL
59404: IFTRUE 59408
59406: GO 59434
59408: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
59409: LD_ADDR_VAR 0 3
59413: PUSH
59414: LD_INT 21
59416: PUSH
59417: LD_INT 22
59419: PUSH
59420: LD_INT 23
59422: PUSH
59423: LD_INT 24
59425: PUSH
59426: EMPTY
59427: LIST
59428: LIST
59429: LIST
59430: LIST
59431: ST_TO_ADDR
59432: GO 59513
59434: LD_INT 53
59436: DOUBLE
59437: EQUAL
59438: IFTRUE 59442
59440: GO 59460
59442: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
59443: LD_ADDR_VAR 0 3
59447: PUSH
59448: LD_INT 23
59450: PUSH
59451: LD_INT 24
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: ST_TO_ADDR
59458: GO 59513
59460: LD_INT 46
59462: DOUBLE
59463: EQUAL
59464: IFTRUE 59468
59466: GO 59486
59468: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
59469: LD_ADDR_VAR 0 3
59473: PUSH
59474: LD_INT 23
59476: PUSH
59477: LD_INT 24
59479: PUSH
59480: EMPTY
59481: LIST
59482: LIST
59483: ST_TO_ADDR
59484: GO 59513
59486: LD_INT 47
59488: DOUBLE
59489: EQUAL
59490: IFTRUE 59494
59492: GO 59512
59494: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
59495: LD_ADDR_VAR 0 3
59499: PUSH
59500: LD_INT 23
59502: PUSH
59503: LD_INT 24
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: ST_TO_ADDR
59510: GO 59513
59512: POP
// result := ( chassis in result ) ;
59513: LD_ADDR_VAR 0 3
59517: PUSH
59518: LD_VAR 0 1
59522: PUSH
59523: LD_VAR 0 3
59527: IN
59528: ST_TO_ADDR
// end ;
59529: LD_VAR 0 3
59533: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
59534: LD_INT 0
59536: PPUSH
59537: PPUSH
59538: PPUSH
59539: PPUSH
59540: PPUSH
59541: PPUSH
59542: PPUSH
// result := array ;
59543: LD_ADDR_VAR 0 5
59547: PUSH
59548: LD_VAR 0 1
59552: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
59553: LD_VAR 0 1
59557: NOT
59558: PUSH
59559: LD_VAR 0 2
59563: NOT
59564: OR
59565: PUSH
59566: LD_VAR 0 3
59570: NOT
59571: OR
59572: PUSH
59573: LD_VAR 0 2
59577: PUSH
59578: LD_VAR 0 1
59582: GREATER
59583: OR
59584: PUSH
59585: LD_VAR 0 3
59589: PUSH
59590: LD_VAR 0 1
59594: GREATER
59595: OR
59596: IFFALSE 59600
// exit ;
59598: GO 59896
// if direction then
59600: LD_VAR 0 4
59604: IFFALSE 59668
// begin d := 1 ;
59606: LD_ADDR_VAR 0 9
59610: PUSH
59611: LD_INT 1
59613: ST_TO_ADDR
// if i_from > i_to then
59614: LD_VAR 0 2
59618: PUSH
59619: LD_VAR 0 3
59623: GREATER
59624: IFFALSE 59650
// length := ( array - i_from ) + i_to else
59626: LD_ADDR_VAR 0 11
59630: PUSH
59631: LD_VAR 0 1
59635: PUSH
59636: LD_VAR 0 2
59640: MINUS
59641: PUSH
59642: LD_VAR 0 3
59646: PLUS
59647: ST_TO_ADDR
59648: GO 59666
// length := i_to - i_from ;
59650: LD_ADDR_VAR 0 11
59654: PUSH
59655: LD_VAR 0 3
59659: PUSH
59660: LD_VAR 0 2
59664: MINUS
59665: ST_TO_ADDR
// end else
59666: GO 59729
// begin d := - 1 ;
59668: LD_ADDR_VAR 0 9
59672: PUSH
59673: LD_INT 1
59675: NEG
59676: ST_TO_ADDR
// if i_from > i_to then
59677: LD_VAR 0 2
59681: PUSH
59682: LD_VAR 0 3
59686: GREATER
59687: IFFALSE 59707
// length := i_from - i_to else
59689: LD_ADDR_VAR 0 11
59693: PUSH
59694: LD_VAR 0 2
59698: PUSH
59699: LD_VAR 0 3
59703: MINUS
59704: ST_TO_ADDR
59705: GO 59729
// length := ( array - i_to ) + i_from ;
59707: LD_ADDR_VAR 0 11
59711: PUSH
59712: LD_VAR 0 1
59716: PUSH
59717: LD_VAR 0 3
59721: MINUS
59722: PUSH
59723: LD_VAR 0 2
59727: PLUS
59728: ST_TO_ADDR
// end ; if not length then
59729: LD_VAR 0 11
59733: NOT
59734: IFFALSE 59738
// exit ;
59736: GO 59896
// tmp := array ;
59738: LD_ADDR_VAR 0 10
59742: PUSH
59743: LD_VAR 0 1
59747: ST_TO_ADDR
// for i = 1 to length do
59748: LD_ADDR_VAR 0 6
59752: PUSH
59753: DOUBLE
59754: LD_INT 1
59756: DEC
59757: ST_TO_ADDR
59758: LD_VAR 0 11
59762: PUSH
59763: FOR_TO
59764: IFFALSE 59884
// begin for j = 1 to array do
59766: LD_ADDR_VAR 0 7
59770: PUSH
59771: DOUBLE
59772: LD_INT 1
59774: DEC
59775: ST_TO_ADDR
59776: LD_VAR 0 1
59780: PUSH
59781: FOR_TO
59782: IFFALSE 59870
// begin k := j + d ;
59784: LD_ADDR_VAR 0 8
59788: PUSH
59789: LD_VAR 0 7
59793: PUSH
59794: LD_VAR 0 9
59798: PLUS
59799: ST_TO_ADDR
// if k > array then
59800: LD_VAR 0 8
59804: PUSH
59805: LD_VAR 0 1
59809: GREATER
59810: IFFALSE 59820
// k := 1 ;
59812: LD_ADDR_VAR 0 8
59816: PUSH
59817: LD_INT 1
59819: ST_TO_ADDR
// if not k then
59820: LD_VAR 0 8
59824: NOT
59825: IFFALSE 59837
// k := array ;
59827: LD_ADDR_VAR 0 8
59831: PUSH
59832: LD_VAR 0 1
59836: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
59837: LD_ADDR_VAR 0 10
59841: PUSH
59842: LD_VAR 0 10
59846: PPUSH
59847: LD_VAR 0 8
59851: PPUSH
59852: LD_VAR 0 1
59856: PUSH
59857: LD_VAR 0 7
59861: ARRAY
59862: PPUSH
59863: CALL_OW 1
59867: ST_TO_ADDR
// end ;
59868: GO 59781
59870: POP
59871: POP
// array := tmp ;
59872: LD_ADDR_VAR 0 1
59876: PUSH
59877: LD_VAR 0 10
59881: ST_TO_ADDR
// end ;
59882: GO 59763
59884: POP
59885: POP
// result := array ;
59886: LD_ADDR_VAR 0 5
59890: PUSH
59891: LD_VAR 0 1
59895: ST_TO_ADDR
// end ;
59896: LD_VAR 0 5
59900: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
59901: LD_INT 0
59903: PPUSH
59904: PPUSH
// result := 0 ;
59905: LD_ADDR_VAR 0 3
59909: PUSH
59910: LD_INT 0
59912: ST_TO_ADDR
// if not array or not value in array then
59913: LD_VAR 0 1
59917: NOT
59918: PUSH
59919: LD_VAR 0 2
59923: PUSH
59924: LD_VAR 0 1
59928: IN
59929: NOT
59930: OR
59931: IFFALSE 59935
// exit ;
59933: GO 59989
// for i = 1 to array do
59935: LD_ADDR_VAR 0 4
59939: PUSH
59940: DOUBLE
59941: LD_INT 1
59943: DEC
59944: ST_TO_ADDR
59945: LD_VAR 0 1
59949: PUSH
59950: FOR_TO
59951: IFFALSE 59987
// if value = array [ i ] then
59953: LD_VAR 0 2
59957: PUSH
59958: LD_VAR 0 1
59962: PUSH
59963: LD_VAR 0 4
59967: ARRAY
59968: EQUAL
59969: IFFALSE 59985
// begin result := i ;
59971: LD_ADDR_VAR 0 3
59975: PUSH
59976: LD_VAR 0 4
59980: ST_TO_ADDR
// exit ;
59981: POP
59982: POP
59983: GO 59989
// end ;
59985: GO 59950
59987: POP
59988: POP
// end ;
59989: LD_VAR 0 3
59993: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
59994: LD_INT 0
59996: PPUSH
// vc_chassis := chassis ;
59997: LD_ADDR_OWVAR 37
60001: PUSH
60002: LD_VAR 0 1
60006: ST_TO_ADDR
// vc_engine := engine ;
60007: LD_ADDR_OWVAR 39
60011: PUSH
60012: LD_VAR 0 2
60016: ST_TO_ADDR
// vc_control := control ;
60017: LD_ADDR_OWVAR 38
60021: PUSH
60022: LD_VAR 0 3
60026: ST_TO_ADDR
// vc_weapon := weapon ;
60027: LD_ADDR_OWVAR 40
60031: PUSH
60032: LD_VAR 0 4
60036: ST_TO_ADDR
// vc_fuel_battery := fuel ;
60037: LD_ADDR_OWVAR 41
60041: PUSH
60042: LD_VAR 0 5
60046: ST_TO_ADDR
// end ;
60047: LD_VAR 0 6
60051: RET
// export function WantPlant ( unit ) ; var task ; begin
60052: LD_INT 0
60054: PPUSH
60055: PPUSH
// result := false ;
60056: LD_ADDR_VAR 0 2
60060: PUSH
60061: LD_INT 0
60063: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
60064: LD_ADDR_VAR 0 3
60068: PUSH
60069: LD_VAR 0 1
60073: PPUSH
60074: CALL_OW 437
60078: ST_TO_ADDR
// if task then
60079: LD_VAR 0 3
60083: IFFALSE 60111
// if task [ 1 ] [ 1 ] = p then
60085: LD_VAR 0 3
60089: PUSH
60090: LD_INT 1
60092: ARRAY
60093: PUSH
60094: LD_INT 1
60096: ARRAY
60097: PUSH
60098: LD_STRING p
60100: EQUAL
60101: IFFALSE 60111
// result := true ;
60103: LD_ADDR_VAR 0 2
60107: PUSH
60108: LD_INT 1
60110: ST_TO_ADDR
// end ;
60111: LD_VAR 0 2
60115: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
60116: LD_INT 0
60118: PPUSH
60119: PPUSH
60120: PPUSH
60121: PPUSH
// if pos < 1 then
60122: LD_VAR 0 2
60126: PUSH
60127: LD_INT 1
60129: LESS
60130: IFFALSE 60134
// exit ;
60132: GO 60437
// if pos = 1 then
60134: LD_VAR 0 2
60138: PUSH
60139: LD_INT 1
60141: EQUAL
60142: IFFALSE 60175
// result := Replace ( arr , pos [ 1 ] , value ) else
60144: LD_ADDR_VAR 0 4
60148: PUSH
60149: LD_VAR 0 1
60153: PPUSH
60154: LD_VAR 0 2
60158: PUSH
60159: LD_INT 1
60161: ARRAY
60162: PPUSH
60163: LD_VAR 0 3
60167: PPUSH
60168: CALL_OW 1
60172: ST_TO_ADDR
60173: GO 60437
// begin tmp := arr ;
60175: LD_ADDR_VAR 0 6
60179: PUSH
60180: LD_VAR 0 1
60184: ST_TO_ADDR
// s_arr := [ tmp ] ;
60185: LD_ADDR_VAR 0 7
60189: PUSH
60190: LD_VAR 0 6
60194: PUSH
60195: EMPTY
60196: LIST
60197: ST_TO_ADDR
// for i = 1 to pos - 1 do
60198: LD_ADDR_VAR 0 5
60202: PUSH
60203: DOUBLE
60204: LD_INT 1
60206: DEC
60207: ST_TO_ADDR
60208: LD_VAR 0 2
60212: PUSH
60213: LD_INT 1
60215: MINUS
60216: PUSH
60217: FOR_TO
60218: IFFALSE 60263
// begin tmp := tmp [ pos [ i ] ] ;
60220: LD_ADDR_VAR 0 6
60224: PUSH
60225: LD_VAR 0 6
60229: PUSH
60230: LD_VAR 0 2
60234: PUSH
60235: LD_VAR 0 5
60239: ARRAY
60240: ARRAY
60241: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
60242: LD_ADDR_VAR 0 7
60246: PUSH
60247: LD_VAR 0 7
60251: PUSH
60252: LD_VAR 0 6
60256: PUSH
60257: EMPTY
60258: LIST
60259: ADD
60260: ST_TO_ADDR
// end ;
60261: GO 60217
60263: POP
60264: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
60265: LD_ADDR_VAR 0 6
60269: PUSH
60270: LD_VAR 0 6
60274: PPUSH
60275: LD_VAR 0 2
60279: PUSH
60280: LD_VAR 0 2
60284: ARRAY
60285: PPUSH
60286: LD_VAR 0 3
60290: PPUSH
60291: CALL_OW 1
60295: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
60296: LD_ADDR_VAR 0 7
60300: PUSH
60301: LD_VAR 0 7
60305: PPUSH
60306: LD_VAR 0 7
60310: PPUSH
60311: LD_VAR 0 6
60315: PPUSH
60316: CALL_OW 1
60320: ST_TO_ADDR
// for i = s_arr downto 2 do
60321: LD_ADDR_VAR 0 5
60325: PUSH
60326: DOUBLE
60327: LD_VAR 0 7
60331: INC
60332: ST_TO_ADDR
60333: LD_INT 2
60335: PUSH
60336: FOR_DOWNTO
60337: IFFALSE 60421
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
60339: LD_ADDR_VAR 0 6
60343: PUSH
60344: LD_VAR 0 7
60348: PUSH
60349: LD_VAR 0 5
60353: PUSH
60354: LD_INT 1
60356: MINUS
60357: ARRAY
60358: PPUSH
60359: LD_VAR 0 2
60363: PUSH
60364: LD_VAR 0 5
60368: PUSH
60369: LD_INT 1
60371: MINUS
60372: ARRAY
60373: PPUSH
60374: LD_VAR 0 7
60378: PUSH
60379: LD_VAR 0 5
60383: ARRAY
60384: PPUSH
60385: CALL_OW 1
60389: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
60390: LD_ADDR_VAR 0 7
60394: PUSH
60395: LD_VAR 0 7
60399: PPUSH
60400: LD_VAR 0 5
60404: PUSH
60405: LD_INT 1
60407: MINUS
60408: PPUSH
60409: LD_VAR 0 6
60413: PPUSH
60414: CALL_OW 1
60418: ST_TO_ADDR
// end ;
60419: GO 60336
60421: POP
60422: POP
// result := s_arr [ 1 ] ;
60423: LD_ADDR_VAR 0 4
60427: PUSH
60428: LD_VAR 0 7
60432: PUSH
60433: LD_INT 1
60435: ARRAY
60436: ST_TO_ADDR
// end ; end ;
60437: LD_VAR 0 4
60441: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
60442: LD_INT 0
60444: PPUSH
60445: PPUSH
// if not list then
60446: LD_VAR 0 1
60450: NOT
60451: IFFALSE 60455
// exit ;
60453: GO 60546
// i := list [ pos1 ] ;
60455: LD_ADDR_VAR 0 5
60459: PUSH
60460: LD_VAR 0 1
60464: PUSH
60465: LD_VAR 0 2
60469: ARRAY
60470: ST_TO_ADDR
// if not i then
60471: LD_VAR 0 5
60475: NOT
60476: IFFALSE 60480
// exit ;
60478: GO 60546
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
60480: LD_ADDR_VAR 0 1
60484: PUSH
60485: LD_VAR 0 1
60489: PPUSH
60490: LD_VAR 0 2
60494: PPUSH
60495: LD_VAR 0 1
60499: PUSH
60500: LD_VAR 0 3
60504: ARRAY
60505: PPUSH
60506: CALL_OW 1
60510: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
60511: LD_ADDR_VAR 0 1
60515: PUSH
60516: LD_VAR 0 1
60520: PPUSH
60521: LD_VAR 0 3
60525: PPUSH
60526: LD_VAR 0 5
60530: PPUSH
60531: CALL_OW 1
60535: ST_TO_ADDR
// result := list ;
60536: LD_ADDR_VAR 0 4
60540: PUSH
60541: LD_VAR 0 1
60545: ST_TO_ADDR
// end ;
60546: LD_VAR 0 4
60550: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
60551: LD_INT 0
60553: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
60554: LD_ADDR_VAR 0 5
60558: PUSH
60559: LD_VAR 0 1
60563: PPUSH
60564: CALL_OW 250
60568: PPUSH
60569: LD_VAR 0 1
60573: PPUSH
60574: CALL_OW 251
60578: PPUSH
60579: LD_VAR 0 2
60583: PPUSH
60584: LD_VAR 0 3
60588: PPUSH
60589: LD_VAR 0 4
60593: PPUSH
60594: CALL 60972 0 5
60598: ST_TO_ADDR
// end ;
60599: LD_VAR 0 5
60603: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
60604: LD_INT 0
60606: PPUSH
60607: PPUSH
60608: PPUSH
60609: PPUSH
// if not list or not unit then
60610: LD_VAR 0 2
60614: NOT
60615: PUSH
60616: LD_VAR 0 1
60620: NOT
60621: OR
60622: IFFALSE 60626
// exit ;
60624: GO 60967
// result := [ ] ;
60626: LD_ADDR_VAR 0 5
60630: PUSH
60631: EMPTY
60632: ST_TO_ADDR
// for i in list do
60633: LD_ADDR_VAR 0 6
60637: PUSH
60638: LD_VAR 0 2
60642: PUSH
60643: FOR_IN
60644: IFFALSE 60862
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60646: LD_ADDR_VAR 0 8
60650: PUSH
60651: LD_VAR 0 1
60655: PPUSH
60656: LD_VAR 0 6
60660: PUSH
60661: LD_INT 1
60663: ARRAY
60664: PPUSH
60665: LD_VAR 0 6
60669: PUSH
60670: LD_INT 2
60672: ARRAY
60673: PPUSH
60674: CALL_OW 297
60678: ST_TO_ADDR
// if not Count ( result ) then
60679: LD_VAR 0 5
60683: PPUSH
60684: CALL 57256 0 1
60688: NOT
60689: IFFALSE 60722
// begin result := Join ( result , [ i , tmp ] ) ;
60691: LD_ADDR_VAR 0 5
60695: PUSH
60696: LD_VAR 0 5
60700: PPUSH
60701: LD_VAR 0 6
60705: PUSH
60706: LD_VAR 0 8
60710: PUSH
60711: EMPTY
60712: LIST
60713: LIST
60714: PPUSH
60715: CALL 92865 0 2
60719: ST_TO_ADDR
// continue ;
60720: GO 60643
// end ; if result [ result ] [ 2 ] <= tmp then
60722: LD_VAR 0 5
60726: PUSH
60727: LD_VAR 0 5
60731: ARRAY
60732: PUSH
60733: LD_INT 2
60735: ARRAY
60736: PUSH
60737: LD_VAR 0 8
60741: LESSEQUAL
60742: IFFALSE 60775
// result := Join ( result , [ i , tmp ] ) else
60744: LD_ADDR_VAR 0 5
60748: PUSH
60749: LD_VAR 0 5
60753: PPUSH
60754: LD_VAR 0 6
60758: PUSH
60759: LD_VAR 0 8
60763: PUSH
60764: EMPTY
60765: LIST
60766: LIST
60767: PPUSH
60768: CALL 92865 0 2
60772: ST_TO_ADDR
60773: GO 60860
// begin for j := 1 to Count ( result ) do
60775: LD_ADDR_VAR 0 7
60779: PUSH
60780: DOUBLE
60781: LD_INT 1
60783: DEC
60784: ST_TO_ADDR
60785: LD_VAR 0 5
60789: PPUSH
60790: CALL 57256 0 1
60794: PUSH
60795: FOR_TO
60796: IFFALSE 60858
// begin if tmp < result [ j ] [ 2 ] then
60798: LD_VAR 0 8
60802: PUSH
60803: LD_VAR 0 5
60807: PUSH
60808: LD_VAR 0 7
60812: ARRAY
60813: PUSH
60814: LD_INT 2
60816: ARRAY
60817: LESS
60818: IFFALSE 60856
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60820: LD_ADDR_VAR 0 5
60824: PUSH
60825: LD_VAR 0 5
60829: PPUSH
60830: LD_VAR 0 7
60834: PPUSH
60835: LD_VAR 0 6
60839: PUSH
60840: LD_VAR 0 8
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PPUSH
60849: CALL_OW 2
60853: ST_TO_ADDR
// break ;
60854: GO 60858
// end ; end ;
60856: GO 60795
60858: POP
60859: POP
// end ; end ;
60860: GO 60643
60862: POP
60863: POP
// if result and not asc then
60864: LD_VAR 0 5
60868: PUSH
60869: LD_VAR 0 3
60873: NOT
60874: AND
60875: IFFALSE 60892
// result := ReverseArray ( result ) ;
60877: LD_ADDR_VAR 0 5
60881: PUSH
60882: LD_VAR 0 5
60886: PPUSH
60887: CALL 88132 0 1
60891: ST_TO_ADDR
// tmp := [ ] ;
60892: LD_ADDR_VAR 0 8
60896: PUSH
60897: EMPTY
60898: ST_TO_ADDR
// if mode then
60899: LD_VAR 0 4
60903: IFFALSE 60967
// begin for i := 1 to result do
60905: LD_ADDR_VAR 0 6
60909: PUSH
60910: DOUBLE
60911: LD_INT 1
60913: DEC
60914: ST_TO_ADDR
60915: LD_VAR 0 5
60919: PUSH
60920: FOR_TO
60921: IFFALSE 60955
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
60923: LD_ADDR_VAR 0 8
60927: PUSH
60928: LD_VAR 0 8
60932: PPUSH
60933: LD_VAR 0 5
60937: PUSH
60938: LD_VAR 0 6
60942: ARRAY
60943: PUSH
60944: LD_INT 1
60946: ARRAY
60947: PPUSH
60948: CALL 92865 0 2
60952: ST_TO_ADDR
60953: GO 60920
60955: POP
60956: POP
// result := tmp ;
60957: LD_ADDR_VAR 0 5
60961: PUSH
60962: LD_VAR 0 8
60966: ST_TO_ADDR
// end ; end ;
60967: LD_VAR 0 5
60971: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
60972: LD_INT 0
60974: PPUSH
60975: PPUSH
60976: PPUSH
60977: PPUSH
// if not list then
60978: LD_VAR 0 3
60982: NOT
60983: IFFALSE 60987
// exit ;
60985: GO 61375
// result := [ ] ;
60987: LD_ADDR_VAR 0 6
60991: PUSH
60992: EMPTY
60993: ST_TO_ADDR
// for i in list do
60994: LD_ADDR_VAR 0 7
60998: PUSH
60999: LD_VAR 0 3
61003: PUSH
61004: FOR_IN
61005: IFFALSE 61207
// begin tmp := GetDistUnitXY ( i , x , y ) ;
61007: LD_ADDR_VAR 0 9
61011: PUSH
61012: LD_VAR 0 7
61016: PPUSH
61017: LD_VAR 0 1
61021: PPUSH
61022: LD_VAR 0 2
61026: PPUSH
61027: CALL_OW 297
61031: ST_TO_ADDR
// if not result then
61032: LD_VAR 0 6
61036: NOT
61037: IFFALSE 61063
// result := [ [ i , tmp ] ] else
61039: LD_ADDR_VAR 0 6
61043: PUSH
61044: LD_VAR 0 7
61048: PUSH
61049: LD_VAR 0 9
61053: PUSH
61054: EMPTY
61055: LIST
61056: LIST
61057: PUSH
61058: EMPTY
61059: LIST
61060: ST_TO_ADDR
61061: GO 61205
// begin if result [ result ] [ 2 ] <= tmp then
61063: LD_VAR 0 6
61067: PUSH
61068: LD_VAR 0 6
61072: ARRAY
61073: PUSH
61074: LD_INT 2
61076: ARRAY
61077: PUSH
61078: LD_VAR 0 9
61082: LESSEQUAL
61083: IFFALSE 61125
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
61085: LD_ADDR_VAR 0 6
61089: PUSH
61090: LD_VAR 0 6
61094: PPUSH
61095: LD_VAR 0 6
61099: PUSH
61100: LD_INT 1
61102: PLUS
61103: PPUSH
61104: LD_VAR 0 7
61108: PUSH
61109: LD_VAR 0 9
61113: PUSH
61114: EMPTY
61115: LIST
61116: LIST
61117: PPUSH
61118: CALL_OW 2
61122: ST_TO_ADDR
61123: GO 61205
// for j := 1 to result do
61125: LD_ADDR_VAR 0 8
61129: PUSH
61130: DOUBLE
61131: LD_INT 1
61133: DEC
61134: ST_TO_ADDR
61135: LD_VAR 0 6
61139: PUSH
61140: FOR_TO
61141: IFFALSE 61203
// begin if tmp < result [ j ] [ 2 ] then
61143: LD_VAR 0 9
61147: PUSH
61148: LD_VAR 0 6
61152: PUSH
61153: LD_VAR 0 8
61157: ARRAY
61158: PUSH
61159: LD_INT 2
61161: ARRAY
61162: LESS
61163: IFFALSE 61201
// begin result := Insert ( result , j , [ i , tmp ] ) ;
61165: LD_ADDR_VAR 0 6
61169: PUSH
61170: LD_VAR 0 6
61174: PPUSH
61175: LD_VAR 0 8
61179: PPUSH
61180: LD_VAR 0 7
61184: PUSH
61185: LD_VAR 0 9
61189: PUSH
61190: EMPTY
61191: LIST
61192: LIST
61193: PPUSH
61194: CALL_OW 2
61198: ST_TO_ADDR
// break ;
61199: GO 61203
// end ; end ;
61201: GO 61140
61203: POP
61204: POP
// end ; end ;
61205: GO 61004
61207: POP
61208: POP
// if result and not asc then
61209: LD_VAR 0 6
61213: PUSH
61214: LD_VAR 0 4
61218: NOT
61219: AND
61220: IFFALSE 61295
// begin tmp := result ;
61222: LD_ADDR_VAR 0 9
61226: PUSH
61227: LD_VAR 0 6
61231: ST_TO_ADDR
// for i = tmp downto 1 do
61232: LD_ADDR_VAR 0 7
61236: PUSH
61237: DOUBLE
61238: LD_VAR 0 9
61242: INC
61243: ST_TO_ADDR
61244: LD_INT 1
61246: PUSH
61247: FOR_DOWNTO
61248: IFFALSE 61293
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
61250: LD_ADDR_VAR 0 6
61254: PUSH
61255: LD_VAR 0 6
61259: PPUSH
61260: LD_VAR 0 9
61264: PUSH
61265: LD_VAR 0 7
61269: MINUS
61270: PUSH
61271: LD_INT 1
61273: PLUS
61274: PPUSH
61275: LD_VAR 0 9
61279: PUSH
61280: LD_VAR 0 7
61284: ARRAY
61285: PPUSH
61286: CALL_OW 1
61290: ST_TO_ADDR
61291: GO 61247
61293: POP
61294: POP
// end ; tmp := [ ] ;
61295: LD_ADDR_VAR 0 9
61299: PUSH
61300: EMPTY
61301: ST_TO_ADDR
// if mode then
61302: LD_VAR 0 5
61306: IFFALSE 61375
// begin for i = 1 to result do
61308: LD_ADDR_VAR 0 7
61312: PUSH
61313: DOUBLE
61314: LD_INT 1
61316: DEC
61317: ST_TO_ADDR
61318: LD_VAR 0 6
61322: PUSH
61323: FOR_TO
61324: IFFALSE 61363
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
61326: LD_ADDR_VAR 0 9
61330: PUSH
61331: LD_VAR 0 9
61335: PPUSH
61336: LD_VAR 0 7
61340: PPUSH
61341: LD_VAR 0 6
61345: PUSH
61346: LD_VAR 0 7
61350: ARRAY
61351: PUSH
61352: LD_INT 1
61354: ARRAY
61355: PPUSH
61356: CALL_OW 1
61360: ST_TO_ADDR
61361: GO 61323
61363: POP
61364: POP
// result := tmp ;
61365: LD_ADDR_VAR 0 6
61369: PUSH
61370: LD_VAR 0 9
61374: ST_TO_ADDR
// end ; end ;
61375: LD_VAR 0 6
61379: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
61380: LD_INT 0
61382: PPUSH
61383: PPUSH
61384: PPUSH
61385: PPUSH
61386: PPUSH
61387: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
61388: LD_ADDR_VAR 0 5
61392: PUSH
61393: LD_INT 0
61395: PUSH
61396: LD_INT 0
61398: PUSH
61399: LD_INT 0
61401: PUSH
61402: EMPTY
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: LIST
61408: LIST
61409: ST_TO_ADDR
// if not x or not y then
61410: LD_VAR 0 2
61414: NOT
61415: PUSH
61416: LD_VAR 0 3
61420: NOT
61421: OR
61422: IFFALSE 61426
// exit ;
61424: GO 63076
// if not range then
61426: LD_VAR 0 4
61430: NOT
61431: IFFALSE 61441
// range := 10 ;
61433: LD_ADDR_VAR 0 4
61437: PUSH
61438: LD_INT 10
61440: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
61441: LD_ADDR_VAR 0 8
61445: PUSH
61446: LD_INT 81
61448: PUSH
61449: LD_VAR 0 1
61453: PUSH
61454: EMPTY
61455: LIST
61456: LIST
61457: PUSH
61458: LD_INT 92
61460: PUSH
61461: LD_VAR 0 2
61465: PUSH
61466: LD_VAR 0 3
61470: PUSH
61471: LD_VAR 0 4
61475: PUSH
61476: EMPTY
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: LD_INT 21
61487: PUSH
61488: LD_INT 3
61490: PUSH
61491: EMPTY
61492: LIST
61493: LIST
61494: PUSH
61495: EMPTY
61496: LIST
61497: LIST
61498: PUSH
61499: EMPTY
61500: LIST
61501: LIST
61502: LIST
61503: PPUSH
61504: CALL_OW 69
61508: ST_TO_ADDR
// if not tmp then
61509: LD_VAR 0 8
61513: NOT
61514: IFFALSE 61518
// exit ;
61516: GO 63076
// for i in tmp do
61518: LD_ADDR_VAR 0 6
61522: PUSH
61523: LD_VAR 0 8
61527: PUSH
61528: FOR_IN
61529: IFFALSE 63051
// begin points := [ 0 , 0 , 0 ] ;
61531: LD_ADDR_VAR 0 9
61535: PUSH
61536: LD_INT 0
61538: PUSH
61539: LD_INT 0
61541: PUSH
61542: LD_INT 0
61544: PUSH
61545: EMPTY
61546: LIST
61547: LIST
61548: LIST
61549: ST_TO_ADDR
// bpoints := 1 ;
61550: LD_ADDR_VAR 0 10
61554: PUSH
61555: LD_INT 1
61557: ST_TO_ADDR
// case GetType ( i ) of unit_human :
61558: LD_VAR 0 6
61562: PPUSH
61563: CALL_OW 247
61567: PUSH
61568: LD_INT 1
61570: DOUBLE
61571: EQUAL
61572: IFTRUE 61576
61574: GO 62154
61576: POP
// begin if GetClass ( i ) = 1 then
61577: LD_VAR 0 6
61581: PPUSH
61582: CALL_OW 257
61586: PUSH
61587: LD_INT 1
61589: EQUAL
61590: IFFALSE 61611
// points := [ 10 , 5 , 3 ] ;
61592: LD_ADDR_VAR 0 9
61596: PUSH
61597: LD_INT 10
61599: PUSH
61600: LD_INT 5
61602: PUSH
61603: LD_INT 3
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: LIST
61610: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
61611: LD_VAR 0 6
61615: PPUSH
61616: CALL_OW 257
61620: PUSH
61621: LD_INT 2
61623: PUSH
61624: LD_INT 3
61626: PUSH
61627: LD_INT 4
61629: PUSH
61630: EMPTY
61631: LIST
61632: LIST
61633: LIST
61634: IN
61635: IFFALSE 61656
// points := [ 3 , 2 , 1 ] ;
61637: LD_ADDR_VAR 0 9
61641: PUSH
61642: LD_INT 3
61644: PUSH
61645: LD_INT 2
61647: PUSH
61648: LD_INT 1
61650: PUSH
61651: EMPTY
61652: LIST
61653: LIST
61654: LIST
61655: ST_TO_ADDR
// if GetClass ( i ) = 5 then
61656: LD_VAR 0 6
61660: PPUSH
61661: CALL_OW 257
61665: PUSH
61666: LD_INT 5
61668: EQUAL
61669: IFFALSE 61690
// points := [ 130 , 5 , 2 ] ;
61671: LD_ADDR_VAR 0 9
61675: PUSH
61676: LD_INT 130
61678: PUSH
61679: LD_INT 5
61681: PUSH
61682: LD_INT 2
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: LIST
61689: ST_TO_ADDR
// if GetClass ( i ) = 8 then
61690: LD_VAR 0 6
61694: PPUSH
61695: CALL_OW 257
61699: PUSH
61700: LD_INT 8
61702: EQUAL
61703: IFFALSE 61724
// points := [ 35 , 35 , 30 ] ;
61705: LD_ADDR_VAR 0 9
61709: PUSH
61710: LD_INT 35
61712: PUSH
61713: LD_INT 35
61715: PUSH
61716: LD_INT 30
61718: PUSH
61719: EMPTY
61720: LIST
61721: LIST
61722: LIST
61723: ST_TO_ADDR
// if GetClass ( i ) = 9 then
61724: LD_VAR 0 6
61728: PPUSH
61729: CALL_OW 257
61733: PUSH
61734: LD_INT 9
61736: EQUAL
61737: IFFALSE 61758
// points := [ 20 , 55 , 40 ] ;
61739: LD_ADDR_VAR 0 9
61743: PUSH
61744: LD_INT 20
61746: PUSH
61747: LD_INT 55
61749: PUSH
61750: LD_INT 40
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: LIST
61757: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
61758: LD_VAR 0 6
61762: PPUSH
61763: CALL_OW 257
61767: PUSH
61768: LD_INT 12
61770: PUSH
61771: LD_INT 16
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: IN
61778: IFFALSE 61799
// points := [ 5 , 3 , 2 ] ;
61780: LD_ADDR_VAR 0 9
61784: PUSH
61785: LD_INT 5
61787: PUSH
61788: LD_INT 3
61790: PUSH
61791: LD_INT 2
61793: PUSH
61794: EMPTY
61795: LIST
61796: LIST
61797: LIST
61798: ST_TO_ADDR
// if GetClass ( i ) = 17 then
61799: LD_VAR 0 6
61803: PPUSH
61804: CALL_OW 257
61808: PUSH
61809: LD_INT 17
61811: EQUAL
61812: IFFALSE 61833
// points := [ 100 , 50 , 75 ] ;
61814: LD_ADDR_VAR 0 9
61818: PUSH
61819: LD_INT 100
61821: PUSH
61822: LD_INT 50
61824: PUSH
61825: LD_INT 75
61827: PUSH
61828: EMPTY
61829: LIST
61830: LIST
61831: LIST
61832: ST_TO_ADDR
// if GetClass ( i ) = 15 then
61833: LD_VAR 0 6
61837: PPUSH
61838: CALL_OW 257
61842: PUSH
61843: LD_INT 15
61845: EQUAL
61846: IFFALSE 61867
// points := [ 10 , 5 , 3 ] ;
61848: LD_ADDR_VAR 0 9
61852: PUSH
61853: LD_INT 10
61855: PUSH
61856: LD_INT 5
61858: PUSH
61859: LD_INT 3
61861: PUSH
61862: EMPTY
61863: LIST
61864: LIST
61865: LIST
61866: ST_TO_ADDR
// if GetClass ( i ) = 14 then
61867: LD_VAR 0 6
61871: PPUSH
61872: CALL_OW 257
61876: PUSH
61877: LD_INT 14
61879: EQUAL
61880: IFFALSE 61901
// points := [ 10 , 0 , 0 ] ;
61882: LD_ADDR_VAR 0 9
61886: PUSH
61887: LD_INT 10
61889: PUSH
61890: LD_INT 0
61892: PUSH
61893: LD_INT 0
61895: PUSH
61896: EMPTY
61897: LIST
61898: LIST
61899: LIST
61900: ST_TO_ADDR
// if GetClass ( i ) = 11 then
61901: LD_VAR 0 6
61905: PPUSH
61906: CALL_OW 257
61910: PUSH
61911: LD_INT 11
61913: EQUAL
61914: IFFALSE 61935
// points := [ 30 , 10 , 5 ] ;
61916: LD_ADDR_VAR 0 9
61920: PUSH
61921: LD_INT 30
61923: PUSH
61924: LD_INT 10
61926: PUSH
61927: LD_INT 5
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
61935: LD_VAR 0 1
61939: PPUSH
61940: LD_INT 5
61942: PPUSH
61943: CALL_OW 321
61947: PUSH
61948: LD_INT 2
61950: EQUAL
61951: IFFALSE 61968
// bpoints := bpoints * 1.8 ;
61953: LD_ADDR_VAR 0 10
61957: PUSH
61958: LD_VAR 0 10
61962: PUSH
61963: LD_REAL  1.80000000000000E+0000
61966: MUL
61967: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
61968: LD_VAR 0 6
61972: PPUSH
61973: CALL_OW 257
61977: PUSH
61978: LD_INT 1
61980: PUSH
61981: LD_INT 2
61983: PUSH
61984: LD_INT 3
61986: PUSH
61987: LD_INT 4
61989: PUSH
61990: EMPTY
61991: LIST
61992: LIST
61993: LIST
61994: LIST
61995: IN
61996: PUSH
61997: LD_VAR 0 1
62001: PPUSH
62002: LD_INT 51
62004: PPUSH
62005: CALL_OW 321
62009: PUSH
62010: LD_INT 2
62012: EQUAL
62013: AND
62014: IFFALSE 62031
// bpoints := bpoints * 1.2 ;
62016: LD_ADDR_VAR 0 10
62020: PUSH
62021: LD_VAR 0 10
62025: PUSH
62026: LD_REAL  1.20000000000000E+0000
62029: MUL
62030: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
62031: LD_VAR 0 6
62035: PPUSH
62036: CALL_OW 257
62040: PUSH
62041: LD_INT 5
62043: PUSH
62044: LD_INT 7
62046: PUSH
62047: LD_INT 9
62049: PUSH
62050: EMPTY
62051: LIST
62052: LIST
62053: LIST
62054: IN
62055: PUSH
62056: LD_VAR 0 1
62060: PPUSH
62061: LD_INT 52
62063: PPUSH
62064: CALL_OW 321
62068: PUSH
62069: LD_INT 2
62071: EQUAL
62072: AND
62073: IFFALSE 62090
// bpoints := bpoints * 1.5 ;
62075: LD_ADDR_VAR 0 10
62079: PUSH
62080: LD_VAR 0 10
62084: PUSH
62085: LD_REAL  1.50000000000000E+0000
62088: MUL
62089: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
62090: LD_VAR 0 1
62094: PPUSH
62095: LD_INT 66
62097: PPUSH
62098: CALL_OW 321
62102: PUSH
62103: LD_INT 2
62105: EQUAL
62106: IFFALSE 62123
// bpoints := bpoints * 1.1 ;
62108: LD_ADDR_VAR 0 10
62112: PUSH
62113: LD_VAR 0 10
62117: PUSH
62118: LD_REAL  1.10000000000000E+0000
62121: MUL
62122: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
62123: LD_ADDR_VAR 0 10
62127: PUSH
62128: LD_VAR 0 10
62132: PUSH
62133: LD_VAR 0 6
62137: PPUSH
62138: LD_INT 1
62140: PPUSH
62141: CALL_OW 259
62145: PUSH
62146: LD_REAL  1.15000000000000E+0000
62149: MUL
62150: MUL
62151: ST_TO_ADDR
// end ; unit_vehicle :
62152: GO 62980
62154: LD_INT 2
62156: DOUBLE
62157: EQUAL
62158: IFTRUE 62162
62160: GO 62968
62162: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
62163: LD_VAR 0 6
62167: PPUSH
62168: CALL_OW 264
62172: PUSH
62173: LD_INT 2
62175: PUSH
62176: LD_INT 42
62178: PUSH
62179: LD_INT 24
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: LIST
62186: IN
62187: IFFALSE 62208
// points := [ 25 , 5 , 3 ] ;
62189: LD_ADDR_VAR 0 9
62193: PUSH
62194: LD_INT 25
62196: PUSH
62197: LD_INT 5
62199: PUSH
62200: LD_INT 3
62202: PUSH
62203: EMPTY
62204: LIST
62205: LIST
62206: LIST
62207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
62208: LD_VAR 0 6
62212: PPUSH
62213: CALL_OW 264
62217: PUSH
62218: LD_INT 4
62220: PUSH
62221: LD_INT 43
62223: PUSH
62224: LD_INT 25
62226: PUSH
62227: EMPTY
62228: LIST
62229: LIST
62230: LIST
62231: IN
62232: IFFALSE 62253
// points := [ 40 , 15 , 5 ] ;
62234: LD_ADDR_VAR 0 9
62238: PUSH
62239: LD_INT 40
62241: PUSH
62242: LD_INT 15
62244: PUSH
62245: LD_INT 5
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: LIST
62252: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
62253: LD_VAR 0 6
62257: PPUSH
62258: CALL_OW 264
62262: PUSH
62263: LD_INT 3
62265: PUSH
62266: LD_INT 23
62268: PUSH
62269: EMPTY
62270: LIST
62271: LIST
62272: IN
62273: IFFALSE 62294
// points := [ 7 , 25 , 8 ] ;
62275: LD_ADDR_VAR 0 9
62279: PUSH
62280: LD_INT 7
62282: PUSH
62283: LD_INT 25
62285: PUSH
62286: LD_INT 8
62288: PUSH
62289: EMPTY
62290: LIST
62291: LIST
62292: LIST
62293: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
62294: LD_VAR 0 6
62298: PPUSH
62299: CALL_OW 264
62303: PUSH
62304: LD_INT 5
62306: PUSH
62307: LD_INT 27
62309: PUSH
62310: LD_INT 44
62312: PUSH
62313: EMPTY
62314: LIST
62315: LIST
62316: LIST
62317: IN
62318: IFFALSE 62339
// points := [ 14 , 50 , 16 ] ;
62320: LD_ADDR_VAR 0 9
62324: PUSH
62325: LD_INT 14
62327: PUSH
62328: LD_INT 50
62330: PUSH
62331: LD_INT 16
62333: PUSH
62334: EMPTY
62335: LIST
62336: LIST
62337: LIST
62338: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
62339: LD_VAR 0 6
62343: PPUSH
62344: CALL_OW 264
62348: PUSH
62349: LD_INT 6
62351: PUSH
62352: LD_INT 46
62354: PUSH
62355: EMPTY
62356: LIST
62357: LIST
62358: IN
62359: IFFALSE 62380
// points := [ 32 , 120 , 70 ] ;
62361: LD_ADDR_VAR 0 9
62365: PUSH
62366: LD_INT 32
62368: PUSH
62369: LD_INT 120
62371: PUSH
62372: LD_INT 70
62374: PUSH
62375: EMPTY
62376: LIST
62377: LIST
62378: LIST
62379: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
62380: LD_VAR 0 6
62384: PPUSH
62385: CALL_OW 264
62389: PUSH
62390: LD_INT 7
62392: PUSH
62393: LD_INT 28
62395: PUSH
62396: LD_INT 45
62398: PUSH
62399: LD_INT 92
62401: PUSH
62402: EMPTY
62403: LIST
62404: LIST
62405: LIST
62406: LIST
62407: IN
62408: IFFALSE 62429
// points := [ 35 , 20 , 45 ] ;
62410: LD_ADDR_VAR 0 9
62414: PUSH
62415: LD_INT 35
62417: PUSH
62418: LD_INT 20
62420: PUSH
62421: LD_INT 45
62423: PUSH
62424: EMPTY
62425: LIST
62426: LIST
62427: LIST
62428: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
62429: LD_VAR 0 6
62433: PPUSH
62434: CALL_OW 264
62438: PUSH
62439: LD_INT 47
62441: PUSH
62442: EMPTY
62443: LIST
62444: IN
62445: IFFALSE 62466
// points := [ 67 , 45 , 75 ] ;
62447: LD_ADDR_VAR 0 9
62451: PUSH
62452: LD_INT 67
62454: PUSH
62455: LD_INT 45
62457: PUSH
62458: LD_INT 75
62460: PUSH
62461: EMPTY
62462: LIST
62463: LIST
62464: LIST
62465: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
62466: LD_VAR 0 6
62470: PPUSH
62471: CALL_OW 264
62475: PUSH
62476: LD_INT 26
62478: PUSH
62479: EMPTY
62480: LIST
62481: IN
62482: IFFALSE 62503
// points := [ 120 , 30 , 80 ] ;
62484: LD_ADDR_VAR 0 9
62488: PUSH
62489: LD_INT 120
62491: PUSH
62492: LD_INT 30
62494: PUSH
62495: LD_INT 80
62497: PUSH
62498: EMPTY
62499: LIST
62500: LIST
62501: LIST
62502: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
62503: LD_VAR 0 6
62507: PPUSH
62508: CALL_OW 264
62512: PUSH
62513: LD_INT 22
62515: PUSH
62516: EMPTY
62517: LIST
62518: IN
62519: IFFALSE 62540
// points := [ 40 , 1 , 1 ] ;
62521: LD_ADDR_VAR 0 9
62525: PUSH
62526: LD_INT 40
62528: PUSH
62529: LD_INT 1
62531: PUSH
62532: LD_INT 1
62534: PUSH
62535: EMPTY
62536: LIST
62537: LIST
62538: LIST
62539: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
62540: LD_VAR 0 6
62544: PPUSH
62545: CALL_OW 264
62549: PUSH
62550: LD_INT 29
62552: PUSH
62553: EMPTY
62554: LIST
62555: IN
62556: IFFALSE 62577
// points := [ 70 , 200 , 400 ] ;
62558: LD_ADDR_VAR 0 9
62562: PUSH
62563: LD_INT 70
62565: PUSH
62566: LD_INT 200
62568: PUSH
62569: LD_INT 400
62571: PUSH
62572: EMPTY
62573: LIST
62574: LIST
62575: LIST
62576: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
62577: LD_VAR 0 6
62581: PPUSH
62582: CALL_OW 264
62586: PUSH
62587: LD_INT 14
62589: PUSH
62590: LD_INT 53
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: IN
62597: IFFALSE 62618
// points := [ 40 , 10 , 20 ] ;
62599: LD_ADDR_VAR 0 9
62603: PUSH
62604: LD_INT 40
62606: PUSH
62607: LD_INT 10
62609: PUSH
62610: LD_INT 20
62612: PUSH
62613: EMPTY
62614: LIST
62615: LIST
62616: LIST
62617: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
62618: LD_VAR 0 6
62622: PPUSH
62623: CALL_OW 264
62627: PUSH
62628: LD_INT 9
62630: PUSH
62631: EMPTY
62632: LIST
62633: IN
62634: IFFALSE 62655
// points := [ 5 , 70 , 20 ] ;
62636: LD_ADDR_VAR 0 9
62640: PUSH
62641: LD_INT 5
62643: PUSH
62644: LD_INT 70
62646: PUSH
62647: LD_INT 20
62649: PUSH
62650: EMPTY
62651: LIST
62652: LIST
62653: LIST
62654: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
62655: LD_VAR 0 6
62659: PPUSH
62660: CALL_OW 264
62664: PUSH
62665: LD_INT 10
62667: PUSH
62668: EMPTY
62669: LIST
62670: IN
62671: IFFALSE 62692
// points := [ 35 , 110 , 70 ] ;
62673: LD_ADDR_VAR 0 9
62677: PUSH
62678: LD_INT 35
62680: PUSH
62681: LD_INT 110
62683: PUSH
62684: LD_INT 70
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: LIST
62691: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
62692: LD_VAR 0 6
62696: PPUSH
62697: CALL_OW 265
62701: PUSH
62702: LD_INT 25
62704: EQUAL
62705: IFFALSE 62726
// points := [ 80 , 65 , 100 ] ;
62707: LD_ADDR_VAR 0 9
62711: PUSH
62712: LD_INT 80
62714: PUSH
62715: LD_INT 65
62717: PUSH
62718: LD_INT 100
62720: PUSH
62721: EMPTY
62722: LIST
62723: LIST
62724: LIST
62725: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
62726: LD_VAR 0 6
62730: PPUSH
62731: CALL_OW 263
62735: PUSH
62736: LD_INT 1
62738: EQUAL
62739: IFFALSE 62774
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
62741: LD_ADDR_VAR 0 10
62745: PUSH
62746: LD_VAR 0 10
62750: PUSH
62751: LD_VAR 0 6
62755: PPUSH
62756: CALL_OW 311
62760: PPUSH
62761: LD_INT 3
62763: PPUSH
62764: CALL_OW 259
62768: PUSH
62769: LD_INT 4
62771: MUL
62772: MUL
62773: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
62774: LD_VAR 0 6
62778: PPUSH
62779: CALL_OW 263
62783: PUSH
62784: LD_INT 2
62786: EQUAL
62787: IFFALSE 62838
// begin j := IsControledBy ( i ) ;
62789: LD_ADDR_VAR 0 7
62793: PUSH
62794: LD_VAR 0 6
62798: PPUSH
62799: CALL_OW 312
62803: ST_TO_ADDR
// if j then
62804: LD_VAR 0 7
62808: IFFALSE 62838
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
62810: LD_ADDR_VAR 0 10
62814: PUSH
62815: LD_VAR 0 10
62819: PUSH
62820: LD_VAR 0 7
62824: PPUSH
62825: LD_INT 3
62827: PPUSH
62828: CALL_OW 259
62832: PUSH
62833: LD_INT 3
62835: MUL
62836: MUL
62837: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
62838: LD_VAR 0 6
62842: PPUSH
62843: CALL_OW 264
62847: PUSH
62848: LD_INT 5
62850: PUSH
62851: LD_INT 6
62853: PUSH
62854: LD_INT 46
62856: PUSH
62857: LD_INT 44
62859: PUSH
62860: LD_INT 47
62862: PUSH
62863: LD_INT 45
62865: PUSH
62866: LD_INT 28
62868: PUSH
62869: LD_INT 7
62871: PUSH
62872: LD_INT 27
62874: PUSH
62875: LD_INT 29
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: LIST
62882: LIST
62883: LIST
62884: LIST
62885: LIST
62886: LIST
62887: LIST
62888: LIST
62889: IN
62890: PUSH
62891: LD_VAR 0 1
62895: PPUSH
62896: LD_INT 52
62898: PPUSH
62899: CALL_OW 321
62903: PUSH
62904: LD_INT 2
62906: EQUAL
62907: AND
62908: IFFALSE 62925
// bpoints := bpoints * 1.2 ;
62910: LD_ADDR_VAR 0 10
62914: PUSH
62915: LD_VAR 0 10
62919: PUSH
62920: LD_REAL  1.20000000000000E+0000
62923: MUL
62924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
62925: LD_VAR 0 6
62929: PPUSH
62930: CALL_OW 264
62934: PUSH
62935: LD_INT 6
62937: PUSH
62938: LD_INT 46
62940: PUSH
62941: LD_INT 47
62943: PUSH
62944: EMPTY
62945: LIST
62946: LIST
62947: LIST
62948: IN
62949: IFFALSE 62966
// bpoints := bpoints * 1.2 ;
62951: LD_ADDR_VAR 0 10
62955: PUSH
62956: LD_VAR 0 10
62960: PUSH
62961: LD_REAL  1.20000000000000E+0000
62964: MUL
62965: ST_TO_ADDR
// end ; unit_building :
62966: GO 62980
62968: LD_INT 3
62970: DOUBLE
62971: EQUAL
62972: IFTRUE 62976
62974: GO 62979
62976: POP
// ; end ;
62977: GO 62980
62979: POP
// for j = 1 to 3 do
62980: LD_ADDR_VAR 0 7
62984: PUSH
62985: DOUBLE
62986: LD_INT 1
62988: DEC
62989: ST_TO_ADDR
62990: LD_INT 3
62992: PUSH
62993: FOR_TO
62994: IFFALSE 63047
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
62996: LD_ADDR_VAR 0 5
63000: PUSH
63001: LD_VAR 0 5
63005: PPUSH
63006: LD_VAR 0 7
63010: PPUSH
63011: LD_VAR 0 5
63015: PUSH
63016: LD_VAR 0 7
63020: ARRAY
63021: PUSH
63022: LD_VAR 0 9
63026: PUSH
63027: LD_VAR 0 7
63031: ARRAY
63032: PUSH
63033: LD_VAR 0 10
63037: MUL
63038: PLUS
63039: PPUSH
63040: CALL_OW 1
63044: ST_TO_ADDR
63045: GO 62993
63047: POP
63048: POP
// end ;
63049: GO 61528
63051: POP
63052: POP
// result := Replace ( result , 4 , tmp ) ;
63053: LD_ADDR_VAR 0 5
63057: PUSH
63058: LD_VAR 0 5
63062: PPUSH
63063: LD_INT 4
63065: PPUSH
63066: LD_VAR 0 8
63070: PPUSH
63071: CALL_OW 1
63075: ST_TO_ADDR
// end ;
63076: LD_VAR 0 5
63080: RET
// export function DangerAtRange ( unit , range ) ; begin
63081: LD_INT 0
63083: PPUSH
// if not unit then
63084: LD_VAR 0 1
63088: NOT
63089: IFFALSE 63093
// exit ;
63091: GO 63138
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
63093: LD_ADDR_VAR 0 3
63097: PUSH
63098: LD_VAR 0 1
63102: PPUSH
63103: CALL_OW 255
63107: PPUSH
63108: LD_VAR 0 1
63112: PPUSH
63113: CALL_OW 250
63117: PPUSH
63118: LD_VAR 0 1
63122: PPUSH
63123: CALL_OW 251
63127: PPUSH
63128: LD_VAR 0 2
63132: PPUSH
63133: CALL 61380 0 4
63137: ST_TO_ADDR
// end ;
63138: LD_VAR 0 3
63142: RET
// export function DangerInArea ( side , area ) ; begin
63143: LD_INT 0
63145: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
63146: LD_ADDR_VAR 0 3
63150: PUSH
63151: LD_VAR 0 2
63155: PPUSH
63156: LD_INT 81
63158: PUSH
63159: LD_VAR 0 1
63163: PUSH
63164: EMPTY
63165: LIST
63166: LIST
63167: PPUSH
63168: CALL_OW 70
63172: ST_TO_ADDR
// end ;
63173: LD_VAR 0 3
63177: RET
// export function IsExtension ( b ) ; begin
63178: LD_INT 0
63180: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
63181: LD_ADDR_VAR 0 2
63185: PUSH
63186: LD_VAR 0 1
63190: PUSH
63191: LD_INT 23
63193: PUSH
63194: LD_INT 20
63196: PUSH
63197: LD_INT 22
63199: PUSH
63200: LD_INT 17
63202: PUSH
63203: LD_INT 24
63205: PUSH
63206: LD_INT 21
63208: PUSH
63209: LD_INT 19
63211: PUSH
63212: LD_INT 16
63214: PUSH
63215: LD_INT 25
63217: PUSH
63218: LD_INT 18
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: LIST
63226: LIST
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: IN
63233: ST_TO_ADDR
// end ;
63234: LD_VAR 0 2
63238: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
63239: LD_INT 0
63241: PPUSH
63242: PPUSH
63243: PPUSH
// result := [ ] ;
63244: LD_ADDR_VAR 0 4
63248: PUSH
63249: EMPTY
63250: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
63251: LD_ADDR_VAR 0 5
63255: PUSH
63256: LD_VAR 0 2
63260: PPUSH
63261: LD_INT 21
63263: PUSH
63264: LD_INT 3
63266: PUSH
63267: EMPTY
63268: LIST
63269: LIST
63270: PPUSH
63271: CALL_OW 70
63275: ST_TO_ADDR
// if not tmp then
63276: LD_VAR 0 5
63280: NOT
63281: IFFALSE 63285
// exit ;
63283: GO 63349
// if checkLink then
63285: LD_VAR 0 3
63289: IFFALSE 63339
// begin for i in tmp do
63291: LD_ADDR_VAR 0 6
63295: PUSH
63296: LD_VAR 0 5
63300: PUSH
63301: FOR_IN
63302: IFFALSE 63337
// if GetBase ( i ) <> base then
63304: LD_VAR 0 6
63308: PPUSH
63309: CALL_OW 274
63313: PUSH
63314: LD_VAR 0 1
63318: NONEQUAL
63319: IFFALSE 63335
// ComLinkToBase ( base , i ) ;
63321: LD_VAR 0 1
63325: PPUSH
63326: LD_VAR 0 6
63330: PPUSH
63331: CALL_OW 169
63335: GO 63301
63337: POP
63338: POP
// end ; result := tmp ;
63339: LD_ADDR_VAR 0 4
63343: PUSH
63344: LD_VAR 0 5
63348: ST_TO_ADDR
// end ;
63349: LD_VAR 0 4
63353: RET
// export function ComComplete ( units , b ) ; var i ; begin
63354: LD_INT 0
63356: PPUSH
63357: PPUSH
// if not units then
63358: LD_VAR 0 1
63362: NOT
63363: IFFALSE 63367
// exit ;
63365: GO 63457
// for i in units do
63367: LD_ADDR_VAR 0 4
63371: PUSH
63372: LD_VAR 0 1
63376: PUSH
63377: FOR_IN
63378: IFFALSE 63455
// if BuildingStatus ( b ) = bs_build then
63380: LD_VAR 0 2
63384: PPUSH
63385: CALL_OW 461
63389: PUSH
63390: LD_INT 1
63392: EQUAL
63393: IFFALSE 63453
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
63395: LD_VAR 0 4
63399: PPUSH
63400: LD_STRING h
63402: PUSH
63403: LD_VAR 0 2
63407: PPUSH
63408: CALL_OW 250
63412: PUSH
63413: LD_VAR 0 2
63417: PPUSH
63418: CALL_OW 251
63422: PUSH
63423: LD_VAR 0 2
63427: PUSH
63428: LD_INT 0
63430: PUSH
63431: LD_INT 0
63433: PUSH
63434: LD_INT 0
63436: PUSH
63437: EMPTY
63438: LIST
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: PUSH
63446: EMPTY
63447: LIST
63448: PPUSH
63449: CALL_OW 446
63453: GO 63377
63455: POP
63456: POP
// end ;
63457: LD_VAR 0 3
63461: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
63462: LD_INT 0
63464: PPUSH
63465: PPUSH
63466: PPUSH
63467: PPUSH
63468: PPUSH
63469: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
63470: LD_VAR 0 1
63474: NOT
63475: PUSH
63476: LD_VAR 0 1
63480: PPUSH
63481: CALL_OW 263
63485: PUSH
63486: LD_INT 2
63488: NONEQUAL
63489: OR
63490: IFFALSE 63494
// exit ;
63492: GO 63810
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
63494: LD_ADDR_VAR 0 6
63498: PUSH
63499: LD_INT 22
63501: PUSH
63502: LD_VAR 0 1
63506: PPUSH
63507: CALL_OW 255
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PUSH
63516: LD_INT 2
63518: PUSH
63519: LD_INT 30
63521: PUSH
63522: LD_INT 36
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: LD_INT 34
63531: PUSH
63532: LD_INT 31
63534: PUSH
63535: EMPTY
63536: LIST
63537: LIST
63538: PUSH
63539: EMPTY
63540: LIST
63541: LIST
63542: LIST
63543: PUSH
63544: EMPTY
63545: LIST
63546: LIST
63547: PPUSH
63548: CALL_OW 69
63552: ST_TO_ADDR
// if not tmp then
63553: LD_VAR 0 6
63557: NOT
63558: IFFALSE 63562
// exit ;
63560: GO 63810
// result := [ ] ;
63562: LD_ADDR_VAR 0 2
63566: PUSH
63567: EMPTY
63568: ST_TO_ADDR
// for i in tmp do
63569: LD_ADDR_VAR 0 3
63573: PUSH
63574: LD_VAR 0 6
63578: PUSH
63579: FOR_IN
63580: IFFALSE 63651
// begin t := UnitsInside ( i ) ;
63582: LD_ADDR_VAR 0 4
63586: PUSH
63587: LD_VAR 0 3
63591: PPUSH
63592: CALL_OW 313
63596: ST_TO_ADDR
// if t then
63597: LD_VAR 0 4
63601: IFFALSE 63649
// for j in t do
63603: LD_ADDR_VAR 0 7
63607: PUSH
63608: LD_VAR 0 4
63612: PUSH
63613: FOR_IN
63614: IFFALSE 63647
// result := Replace ( result , result + 1 , j ) ;
63616: LD_ADDR_VAR 0 2
63620: PUSH
63621: LD_VAR 0 2
63625: PPUSH
63626: LD_VAR 0 2
63630: PUSH
63631: LD_INT 1
63633: PLUS
63634: PPUSH
63635: LD_VAR 0 7
63639: PPUSH
63640: CALL_OW 1
63644: ST_TO_ADDR
63645: GO 63613
63647: POP
63648: POP
// end ;
63649: GO 63579
63651: POP
63652: POP
// if not result then
63653: LD_VAR 0 2
63657: NOT
63658: IFFALSE 63662
// exit ;
63660: GO 63810
// mech := result [ 1 ] ;
63662: LD_ADDR_VAR 0 5
63666: PUSH
63667: LD_VAR 0 2
63671: PUSH
63672: LD_INT 1
63674: ARRAY
63675: ST_TO_ADDR
// if result > 1 then
63676: LD_VAR 0 2
63680: PUSH
63681: LD_INT 1
63683: GREATER
63684: IFFALSE 63796
// begin for i = 2 to result do
63686: LD_ADDR_VAR 0 3
63690: PUSH
63691: DOUBLE
63692: LD_INT 2
63694: DEC
63695: ST_TO_ADDR
63696: LD_VAR 0 2
63700: PUSH
63701: FOR_TO
63702: IFFALSE 63794
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
63704: LD_ADDR_VAR 0 4
63708: PUSH
63709: LD_VAR 0 2
63713: PUSH
63714: LD_VAR 0 3
63718: ARRAY
63719: PPUSH
63720: LD_INT 3
63722: PPUSH
63723: CALL_OW 259
63727: PUSH
63728: LD_VAR 0 2
63732: PUSH
63733: LD_VAR 0 3
63737: ARRAY
63738: PPUSH
63739: CALL_OW 432
63743: MINUS
63744: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
63745: LD_VAR 0 4
63749: PUSH
63750: LD_VAR 0 5
63754: PPUSH
63755: LD_INT 3
63757: PPUSH
63758: CALL_OW 259
63762: PUSH
63763: LD_VAR 0 5
63767: PPUSH
63768: CALL_OW 432
63772: MINUS
63773: GREATEREQUAL
63774: IFFALSE 63792
// mech := result [ i ] ;
63776: LD_ADDR_VAR 0 5
63780: PUSH
63781: LD_VAR 0 2
63785: PUSH
63786: LD_VAR 0 3
63790: ARRAY
63791: ST_TO_ADDR
// end ;
63792: GO 63701
63794: POP
63795: POP
// end ; ComLinkTo ( vehicle , mech ) ;
63796: LD_VAR 0 1
63800: PPUSH
63801: LD_VAR 0 5
63805: PPUSH
63806: CALL_OW 135
// end ;
63810: LD_VAR 0 2
63814: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
63815: LD_INT 0
63817: PPUSH
63818: PPUSH
63819: PPUSH
63820: PPUSH
63821: PPUSH
63822: PPUSH
63823: PPUSH
63824: PPUSH
63825: PPUSH
63826: PPUSH
63827: PPUSH
63828: PPUSH
63829: PPUSH
// result := [ ] ;
63830: LD_ADDR_VAR 0 7
63834: PUSH
63835: EMPTY
63836: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
63837: LD_VAR 0 1
63841: PPUSH
63842: CALL_OW 266
63846: PUSH
63847: LD_INT 0
63849: PUSH
63850: LD_INT 1
63852: PUSH
63853: EMPTY
63854: LIST
63855: LIST
63856: IN
63857: NOT
63858: IFFALSE 63862
// exit ;
63860: GO 65496
// if name then
63862: LD_VAR 0 3
63866: IFFALSE 63882
// SetBName ( base_dep , name ) ;
63868: LD_VAR 0 1
63872: PPUSH
63873: LD_VAR 0 3
63877: PPUSH
63878: CALL_OW 500
// base := GetBase ( base_dep ) ;
63882: LD_ADDR_VAR 0 15
63886: PUSH
63887: LD_VAR 0 1
63891: PPUSH
63892: CALL_OW 274
63896: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
63897: LD_ADDR_VAR 0 16
63901: PUSH
63902: LD_VAR 0 1
63906: PPUSH
63907: CALL_OW 255
63911: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
63912: LD_ADDR_VAR 0 17
63916: PUSH
63917: LD_VAR 0 1
63921: PPUSH
63922: CALL_OW 248
63926: ST_TO_ADDR
// if sources then
63927: LD_VAR 0 5
63931: IFFALSE 63978
// for i = 1 to 3 do
63933: LD_ADDR_VAR 0 8
63937: PUSH
63938: DOUBLE
63939: LD_INT 1
63941: DEC
63942: ST_TO_ADDR
63943: LD_INT 3
63945: PUSH
63946: FOR_TO
63947: IFFALSE 63976
// AddResourceType ( base , i , sources [ i ] ) ;
63949: LD_VAR 0 15
63953: PPUSH
63954: LD_VAR 0 8
63958: PPUSH
63959: LD_VAR 0 5
63963: PUSH
63964: LD_VAR 0 8
63968: ARRAY
63969: PPUSH
63970: CALL_OW 276
63974: GO 63946
63976: POP
63977: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
63978: LD_ADDR_VAR 0 18
63982: PUSH
63983: LD_VAR 0 15
63987: PPUSH
63988: LD_VAR 0 2
63992: PPUSH
63993: LD_INT 1
63995: PPUSH
63996: CALL 63239 0 3
64000: ST_TO_ADDR
// InitHc ;
64001: CALL_OW 19
// InitUc ;
64005: CALL_OW 18
// uc_side := side ;
64009: LD_ADDR_OWVAR 20
64013: PUSH
64014: LD_VAR 0 16
64018: ST_TO_ADDR
// uc_nation := nation ;
64019: LD_ADDR_OWVAR 21
64023: PUSH
64024: LD_VAR 0 17
64028: ST_TO_ADDR
// if buildings then
64029: LD_VAR 0 18
64033: IFFALSE 65355
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
64035: LD_ADDR_VAR 0 19
64039: PUSH
64040: LD_VAR 0 18
64044: PPUSH
64045: LD_INT 2
64047: PUSH
64048: LD_INT 30
64050: PUSH
64051: LD_INT 29
64053: PUSH
64054: EMPTY
64055: LIST
64056: LIST
64057: PUSH
64058: LD_INT 30
64060: PUSH
64061: LD_INT 30
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: EMPTY
64069: LIST
64070: LIST
64071: LIST
64072: PPUSH
64073: CALL_OW 72
64077: ST_TO_ADDR
// if tmp then
64078: LD_VAR 0 19
64082: IFFALSE 64130
// for i in tmp do
64084: LD_ADDR_VAR 0 8
64088: PUSH
64089: LD_VAR 0 19
64093: PUSH
64094: FOR_IN
64095: IFFALSE 64128
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
64097: LD_VAR 0 8
64101: PPUSH
64102: CALL_OW 250
64106: PPUSH
64107: LD_VAR 0 8
64111: PPUSH
64112: CALL_OW 251
64116: PPUSH
64117: LD_VAR 0 16
64121: PPUSH
64122: CALL_OW 441
64126: GO 64094
64128: POP
64129: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
64130: LD_VAR 0 18
64134: PPUSH
64135: LD_INT 2
64137: PUSH
64138: LD_INT 30
64140: PUSH
64141: LD_INT 32
64143: PUSH
64144: EMPTY
64145: LIST
64146: LIST
64147: PUSH
64148: LD_INT 30
64150: PUSH
64151: LD_INT 33
64153: PUSH
64154: EMPTY
64155: LIST
64156: LIST
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: LIST
64162: PPUSH
64163: CALL_OW 72
64167: IFFALSE 64255
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
64169: LD_ADDR_VAR 0 8
64173: PUSH
64174: LD_VAR 0 18
64178: PPUSH
64179: LD_INT 2
64181: PUSH
64182: LD_INT 30
64184: PUSH
64185: LD_INT 32
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PUSH
64192: LD_INT 30
64194: PUSH
64195: LD_INT 33
64197: PUSH
64198: EMPTY
64199: LIST
64200: LIST
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: LIST
64206: PPUSH
64207: CALL_OW 72
64211: PUSH
64212: FOR_IN
64213: IFFALSE 64253
// begin if not GetBWeapon ( i ) then
64215: LD_VAR 0 8
64219: PPUSH
64220: CALL_OW 269
64224: NOT
64225: IFFALSE 64251
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
64227: LD_VAR 0 8
64231: PPUSH
64232: LD_VAR 0 8
64236: PPUSH
64237: LD_VAR 0 2
64241: PPUSH
64242: CALL 65501 0 2
64246: PPUSH
64247: CALL_OW 431
// end ;
64251: GO 64212
64253: POP
64254: POP
// end ; for i = 1 to personel do
64255: LD_ADDR_VAR 0 8
64259: PUSH
64260: DOUBLE
64261: LD_INT 1
64263: DEC
64264: ST_TO_ADDR
64265: LD_VAR 0 6
64269: PUSH
64270: FOR_TO
64271: IFFALSE 65335
// begin if i > 4 then
64273: LD_VAR 0 8
64277: PUSH
64278: LD_INT 4
64280: GREATER
64281: IFFALSE 64285
// break ;
64283: GO 65335
// case i of 1 :
64285: LD_VAR 0 8
64289: PUSH
64290: LD_INT 1
64292: DOUBLE
64293: EQUAL
64294: IFTRUE 64298
64296: GO 64378
64298: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
64299: LD_ADDR_VAR 0 12
64303: PUSH
64304: LD_VAR 0 18
64308: PPUSH
64309: LD_INT 22
64311: PUSH
64312: LD_VAR 0 16
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: PUSH
64321: LD_INT 58
64323: PUSH
64324: EMPTY
64325: LIST
64326: PUSH
64327: LD_INT 2
64329: PUSH
64330: LD_INT 30
64332: PUSH
64333: LD_INT 32
64335: PUSH
64336: EMPTY
64337: LIST
64338: LIST
64339: PUSH
64340: LD_INT 30
64342: PUSH
64343: LD_INT 4
64345: PUSH
64346: EMPTY
64347: LIST
64348: LIST
64349: PUSH
64350: LD_INT 30
64352: PUSH
64353: LD_INT 5
64355: PUSH
64356: EMPTY
64357: LIST
64358: LIST
64359: PUSH
64360: EMPTY
64361: LIST
64362: LIST
64363: LIST
64364: LIST
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: LIST
64370: PPUSH
64371: CALL_OW 72
64375: ST_TO_ADDR
64376: GO 64600
64378: LD_INT 2
64380: DOUBLE
64381: EQUAL
64382: IFTRUE 64386
64384: GO 64448
64386: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
64387: LD_ADDR_VAR 0 12
64391: PUSH
64392: LD_VAR 0 18
64396: PPUSH
64397: LD_INT 22
64399: PUSH
64400: LD_VAR 0 16
64404: PUSH
64405: EMPTY
64406: LIST
64407: LIST
64408: PUSH
64409: LD_INT 2
64411: PUSH
64412: LD_INT 30
64414: PUSH
64415: LD_INT 0
64417: PUSH
64418: EMPTY
64419: LIST
64420: LIST
64421: PUSH
64422: LD_INT 30
64424: PUSH
64425: LD_INT 1
64427: PUSH
64428: EMPTY
64429: LIST
64430: LIST
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: LIST
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: PPUSH
64441: CALL_OW 72
64445: ST_TO_ADDR
64446: GO 64600
64448: LD_INT 3
64450: DOUBLE
64451: EQUAL
64452: IFTRUE 64456
64454: GO 64518
64456: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
64457: LD_ADDR_VAR 0 12
64461: PUSH
64462: LD_VAR 0 18
64466: PPUSH
64467: LD_INT 22
64469: PUSH
64470: LD_VAR 0 16
64474: PUSH
64475: EMPTY
64476: LIST
64477: LIST
64478: PUSH
64479: LD_INT 2
64481: PUSH
64482: LD_INT 30
64484: PUSH
64485: LD_INT 2
64487: PUSH
64488: EMPTY
64489: LIST
64490: LIST
64491: PUSH
64492: LD_INT 30
64494: PUSH
64495: LD_INT 3
64497: PUSH
64498: EMPTY
64499: LIST
64500: LIST
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: LIST
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PPUSH
64511: CALL_OW 72
64515: ST_TO_ADDR
64516: GO 64600
64518: LD_INT 4
64520: DOUBLE
64521: EQUAL
64522: IFTRUE 64526
64524: GO 64599
64526: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
64527: LD_ADDR_VAR 0 12
64531: PUSH
64532: LD_VAR 0 18
64536: PPUSH
64537: LD_INT 22
64539: PUSH
64540: LD_VAR 0 16
64544: PUSH
64545: EMPTY
64546: LIST
64547: LIST
64548: PUSH
64549: LD_INT 2
64551: PUSH
64552: LD_INT 30
64554: PUSH
64555: LD_INT 6
64557: PUSH
64558: EMPTY
64559: LIST
64560: LIST
64561: PUSH
64562: LD_INT 30
64564: PUSH
64565: LD_INT 7
64567: PUSH
64568: EMPTY
64569: LIST
64570: LIST
64571: PUSH
64572: LD_INT 30
64574: PUSH
64575: LD_INT 8
64577: PUSH
64578: EMPTY
64579: LIST
64580: LIST
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: LIST
64586: LIST
64587: PUSH
64588: EMPTY
64589: LIST
64590: LIST
64591: PPUSH
64592: CALL_OW 72
64596: ST_TO_ADDR
64597: GO 64600
64599: POP
// if i = 1 then
64600: LD_VAR 0 8
64604: PUSH
64605: LD_INT 1
64607: EQUAL
64608: IFFALSE 64719
// begin tmp := [ ] ;
64610: LD_ADDR_VAR 0 19
64614: PUSH
64615: EMPTY
64616: ST_TO_ADDR
// for j in f do
64617: LD_ADDR_VAR 0 9
64621: PUSH
64622: LD_VAR 0 12
64626: PUSH
64627: FOR_IN
64628: IFFALSE 64701
// if GetBType ( j ) = b_bunker then
64630: LD_VAR 0 9
64634: PPUSH
64635: CALL_OW 266
64639: PUSH
64640: LD_INT 32
64642: EQUAL
64643: IFFALSE 64670
// tmp := Insert ( tmp , 1 , j ) else
64645: LD_ADDR_VAR 0 19
64649: PUSH
64650: LD_VAR 0 19
64654: PPUSH
64655: LD_INT 1
64657: PPUSH
64658: LD_VAR 0 9
64662: PPUSH
64663: CALL_OW 2
64667: ST_TO_ADDR
64668: GO 64699
// tmp := Insert ( tmp , tmp + 1 , j ) ;
64670: LD_ADDR_VAR 0 19
64674: PUSH
64675: LD_VAR 0 19
64679: PPUSH
64680: LD_VAR 0 19
64684: PUSH
64685: LD_INT 1
64687: PLUS
64688: PPUSH
64689: LD_VAR 0 9
64693: PPUSH
64694: CALL_OW 2
64698: ST_TO_ADDR
64699: GO 64627
64701: POP
64702: POP
// if tmp then
64703: LD_VAR 0 19
64707: IFFALSE 64719
// f := tmp ;
64709: LD_ADDR_VAR 0 12
64713: PUSH
64714: LD_VAR 0 19
64718: ST_TO_ADDR
// end ; x := personel [ i ] ;
64719: LD_ADDR_VAR 0 13
64723: PUSH
64724: LD_VAR 0 6
64728: PUSH
64729: LD_VAR 0 8
64733: ARRAY
64734: ST_TO_ADDR
// if x = - 1 then
64735: LD_VAR 0 13
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: EQUAL
64744: IFFALSE 64953
// begin for j in f do
64746: LD_ADDR_VAR 0 9
64750: PUSH
64751: LD_VAR 0 12
64755: PUSH
64756: FOR_IN
64757: IFFALSE 64949
// repeat InitHc ;
64759: CALL_OW 19
// if GetBType ( j ) = b_barracks then
64763: LD_VAR 0 9
64767: PPUSH
64768: CALL_OW 266
64772: PUSH
64773: LD_INT 5
64775: EQUAL
64776: IFFALSE 64846
// begin if UnitsInside ( j ) < 3 then
64778: LD_VAR 0 9
64782: PPUSH
64783: CALL_OW 313
64787: PUSH
64788: LD_INT 3
64790: LESS
64791: IFFALSE 64827
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64793: LD_INT 0
64795: PPUSH
64796: LD_INT 5
64798: PUSH
64799: LD_INT 8
64801: PUSH
64802: LD_INT 9
64804: PUSH
64805: EMPTY
64806: LIST
64807: LIST
64808: LIST
64809: PUSH
64810: LD_VAR 0 17
64814: ARRAY
64815: PPUSH
64816: LD_VAR 0 4
64820: PPUSH
64821: CALL_OW 380
64825: GO 64844
// PrepareHuman ( false , i , skill ) ;
64827: LD_INT 0
64829: PPUSH
64830: LD_VAR 0 8
64834: PPUSH
64835: LD_VAR 0 4
64839: PPUSH
64840: CALL_OW 380
// end else
64844: GO 64863
// PrepareHuman ( false , i , skill ) ;
64846: LD_INT 0
64848: PPUSH
64849: LD_VAR 0 8
64853: PPUSH
64854: LD_VAR 0 4
64858: PPUSH
64859: CALL_OW 380
// un := CreateHuman ;
64863: LD_ADDR_VAR 0 14
64867: PUSH
64868: CALL_OW 44
64872: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64873: LD_ADDR_VAR 0 7
64877: PUSH
64878: LD_VAR 0 7
64882: PPUSH
64883: LD_INT 1
64885: PPUSH
64886: LD_VAR 0 14
64890: PPUSH
64891: CALL_OW 2
64895: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
64896: LD_VAR 0 14
64900: PPUSH
64901: LD_VAR 0 9
64905: PPUSH
64906: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
64910: LD_VAR 0 9
64914: PPUSH
64915: CALL_OW 313
64919: PUSH
64920: LD_INT 6
64922: EQUAL
64923: PUSH
64924: LD_VAR 0 9
64928: PPUSH
64929: CALL_OW 266
64933: PUSH
64934: LD_INT 32
64936: PUSH
64937: LD_INT 31
64939: PUSH
64940: EMPTY
64941: LIST
64942: LIST
64943: IN
64944: OR
64945: IFFALSE 64759
64947: GO 64756
64949: POP
64950: POP
// end else
64951: GO 65333
// for j = 1 to x do
64953: LD_ADDR_VAR 0 9
64957: PUSH
64958: DOUBLE
64959: LD_INT 1
64961: DEC
64962: ST_TO_ADDR
64963: LD_VAR 0 13
64967: PUSH
64968: FOR_TO
64969: IFFALSE 65331
// begin InitHc ;
64971: CALL_OW 19
// if not f then
64975: LD_VAR 0 12
64979: NOT
64980: IFFALSE 65069
// begin PrepareHuman ( false , i , skill ) ;
64982: LD_INT 0
64984: PPUSH
64985: LD_VAR 0 8
64989: PPUSH
64990: LD_VAR 0 4
64994: PPUSH
64995: CALL_OW 380
// un := CreateHuman ;
64999: LD_ADDR_VAR 0 14
65003: PUSH
65004: CALL_OW 44
65008: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65009: LD_ADDR_VAR 0 7
65013: PUSH
65014: LD_VAR 0 7
65018: PPUSH
65019: LD_INT 1
65021: PPUSH
65022: LD_VAR 0 14
65026: PPUSH
65027: CALL_OW 2
65031: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
65032: LD_VAR 0 14
65036: PPUSH
65037: LD_VAR 0 1
65041: PPUSH
65042: CALL_OW 250
65046: PPUSH
65047: LD_VAR 0 1
65051: PPUSH
65052: CALL_OW 251
65056: PPUSH
65057: LD_INT 10
65059: PPUSH
65060: LD_INT 0
65062: PPUSH
65063: CALL_OW 50
// continue ;
65067: GO 64968
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
65069: LD_VAR 0 12
65073: PUSH
65074: LD_INT 1
65076: ARRAY
65077: PPUSH
65078: CALL_OW 313
65082: PUSH
65083: LD_VAR 0 12
65087: PUSH
65088: LD_INT 1
65090: ARRAY
65091: PPUSH
65092: CALL_OW 266
65096: PUSH
65097: LD_INT 32
65099: PUSH
65100: LD_INT 31
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: IN
65107: AND
65108: PUSH
65109: LD_VAR 0 12
65113: PUSH
65114: LD_INT 1
65116: ARRAY
65117: PPUSH
65118: CALL_OW 313
65122: PUSH
65123: LD_INT 6
65125: EQUAL
65126: OR
65127: IFFALSE 65147
// f := Delete ( f , 1 ) ;
65129: LD_ADDR_VAR 0 12
65133: PUSH
65134: LD_VAR 0 12
65138: PPUSH
65139: LD_INT 1
65141: PPUSH
65142: CALL_OW 3
65146: ST_TO_ADDR
// if not f then
65147: LD_VAR 0 12
65151: NOT
65152: IFFALSE 65170
// begin x := x + 2 ;
65154: LD_ADDR_VAR 0 13
65158: PUSH
65159: LD_VAR 0 13
65163: PUSH
65164: LD_INT 2
65166: PLUS
65167: ST_TO_ADDR
// continue ;
65168: GO 64968
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
65170: LD_VAR 0 12
65174: PUSH
65175: LD_INT 1
65177: ARRAY
65178: PPUSH
65179: CALL_OW 266
65183: PUSH
65184: LD_INT 5
65186: EQUAL
65187: IFFALSE 65261
// begin if UnitsInside ( f [ 1 ] ) < 3 then
65189: LD_VAR 0 12
65193: PUSH
65194: LD_INT 1
65196: ARRAY
65197: PPUSH
65198: CALL_OW 313
65202: PUSH
65203: LD_INT 3
65205: LESS
65206: IFFALSE 65242
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
65208: LD_INT 0
65210: PPUSH
65211: LD_INT 5
65213: PUSH
65214: LD_INT 8
65216: PUSH
65217: LD_INT 9
65219: PUSH
65220: EMPTY
65221: LIST
65222: LIST
65223: LIST
65224: PUSH
65225: LD_VAR 0 17
65229: ARRAY
65230: PPUSH
65231: LD_VAR 0 4
65235: PPUSH
65236: CALL_OW 380
65240: GO 65259
// PrepareHuman ( false , i , skill ) ;
65242: LD_INT 0
65244: PPUSH
65245: LD_VAR 0 8
65249: PPUSH
65250: LD_VAR 0 4
65254: PPUSH
65255: CALL_OW 380
// end else
65259: GO 65278
// PrepareHuman ( false , i , skill ) ;
65261: LD_INT 0
65263: PPUSH
65264: LD_VAR 0 8
65268: PPUSH
65269: LD_VAR 0 4
65273: PPUSH
65274: CALL_OW 380
// un := CreateHuman ;
65278: LD_ADDR_VAR 0 14
65282: PUSH
65283: CALL_OW 44
65287: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
65288: LD_ADDR_VAR 0 7
65292: PUSH
65293: LD_VAR 0 7
65297: PPUSH
65298: LD_INT 1
65300: PPUSH
65301: LD_VAR 0 14
65305: PPUSH
65306: CALL_OW 2
65310: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
65311: LD_VAR 0 14
65315: PPUSH
65316: LD_VAR 0 12
65320: PUSH
65321: LD_INT 1
65323: ARRAY
65324: PPUSH
65325: CALL_OW 52
// end ;
65329: GO 64968
65331: POP
65332: POP
// end ;
65333: GO 64270
65335: POP
65336: POP
// result := result ^ buildings ;
65337: LD_ADDR_VAR 0 7
65341: PUSH
65342: LD_VAR 0 7
65346: PUSH
65347: LD_VAR 0 18
65351: ADD
65352: ST_TO_ADDR
// end else
65353: GO 65496
// begin for i = 1 to personel do
65355: LD_ADDR_VAR 0 8
65359: PUSH
65360: DOUBLE
65361: LD_INT 1
65363: DEC
65364: ST_TO_ADDR
65365: LD_VAR 0 6
65369: PUSH
65370: FOR_TO
65371: IFFALSE 65494
// begin if i > 4 then
65373: LD_VAR 0 8
65377: PUSH
65378: LD_INT 4
65380: GREATER
65381: IFFALSE 65385
// break ;
65383: GO 65494
// x := personel [ i ] ;
65385: LD_ADDR_VAR 0 13
65389: PUSH
65390: LD_VAR 0 6
65394: PUSH
65395: LD_VAR 0 8
65399: ARRAY
65400: ST_TO_ADDR
// if x = - 1 then
65401: LD_VAR 0 13
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: EQUAL
65410: IFFALSE 65414
// continue ;
65412: GO 65370
// PrepareHuman ( false , i , skill ) ;
65414: LD_INT 0
65416: PPUSH
65417: LD_VAR 0 8
65421: PPUSH
65422: LD_VAR 0 4
65426: PPUSH
65427: CALL_OW 380
// un := CreateHuman ;
65431: LD_ADDR_VAR 0 14
65435: PUSH
65436: CALL_OW 44
65440: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
65441: LD_VAR 0 14
65445: PPUSH
65446: LD_VAR 0 1
65450: PPUSH
65451: CALL_OW 250
65455: PPUSH
65456: LD_VAR 0 1
65460: PPUSH
65461: CALL_OW 251
65465: PPUSH
65466: LD_INT 10
65468: PPUSH
65469: LD_INT 0
65471: PPUSH
65472: CALL_OW 50
// result := result ^ un ;
65476: LD_ADDR_VAR 0 7
65480: PUSH
65481: LD_VAR 0 7
65485: PUSH
65486: LD_VAR 0 14
65490: ADD
65491: ST_TO_ADDR
// end ;
65492: GO 65370
65494: POP
65495: POP
// end ; end ;
65496: LD_VAR 0 7
65500: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
65501: LD_INT 0
65503: PPUSH
65504: PPUSH
65505: PPUSH
65506: PPUSH
65507: PPUSH
65508: PPUSH
65509: PPUSH
65510: PPUSH
65511: PPUSH
65512: PPUSH
65513: PPUSH
65514: PPUSH
65515: PPUSH
65516: PPUSH
65517: PPUSH
65518: PPUSH
// result := false ;
65519: LD_ADDR_VAR 0 3
65523: PUSH
65524: LD_INT 0
65526: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
65527: LD_VAR 0 1
65531: NOT
65532: PUSH
65533: LD_VAR 0 1
65537: PPUSH
65538: CALL_OW 266
65542: PUSH
65543: LD_INT 32
65545: PUSH
65546: LD_INT 33
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: IN
65553: NOT
65554: OR
65555: IFFALSE 65559
// exit ;
65557: GO 66668
// nat := GetNation ( tower ) ;
65559: LD_ADDR_VAR 0 12
65563: PUSH
65564: LD_VAR 0 1
65568: PPUSH
65569: CALL_OW 248
65573: ST_TO_ADDR
// side := GetSide ( tower ) ;
65574: LD_ADDR_VAR 0 16
65578: PUSH
65579: LD_VAR 0 1
65583: PPUSH
65584: CALL_OW 255
65588: ST_TO_ADDR
// x := GetX ( tower ) ;
65589: LD_ADDR_VAR 0 10
65593: PUSH
65594: LD_VAR 0 1
65598: PPUSH
65599: CALL_OW 250
65603: ST_TO_ADDR
// y := GetY ( tower ) ;
65604: LD_ADDR_VAR 0 11
65608: PUSH
65609: LD_VAR 0 1
65613: PPUSH
65614: CALL_OW 251
65618: ST_TO_ADDR
// if not x or not y then
65619: LD_VAR 0 10
65623: NOT
65624: PUSH
65625: LD_VAR 0 11
65629: NOT
65630: OR
65631: IFFALSE 65635
// exit ;
65633: GO 66668
// weapon := 0 ;
65635: LD_ADDR_VAR 0 18
65639: PUSH
65640: LD_INT 0
65642: ST_TO_ADDR
// fac_list := [ ] ;
65643: LD_ADDR_VAR 0 17
65647: PUSH
65648: EMPTY
65649: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
65650: LD_ADDR_VAR 0 6
65654: PUSH
65655: LD_VAR 0 1
65659: PPUSH
65660: CALL_OW 274
65664: PPUSH
65665: LD_VAR 0 2
65669: PPUSH
65670: LD_INT 0
65672: PPUSH
65673: CALL 63239 0 3
65677: PPUSH
65678: LD_INT 30
65680: PUSH
65681: LD_INT 3
65683: PUSH
65684: EMPTY
65685: LIST
65686: LIST
65687: PPUSH
65688: CALL_OW 72
65692: ST_TO_ADDR
// if not factories then
65693: LD_VAR 0 6
65697: NOT
65698: IFFALSE 65702
// exit ;
65700: GO 66668
// for i in factories do
65702: LD_ADDR_VAR 0 8
65706: PUSH
65707: LD_VAR 0 6
65711: PUSH
65712: FOR_IN
65713: IFFALSE 65738
// fac_list := fac_list union AvailableWeaponList ( i ) ;
65715: LD_ADDR_VAR 0 17
65719: PUSH
65720: LD_VAR 0 17
65724: PUSH
65725: LD_VAR 0 8
65729: PPUSH
65730: CALL_OW 478
65734: UNION
65735: ST_TO_ADDR
65736: GO 65712
65738: POP
65739: POP
// if not fac_list then
65740: LD_VAR 0 17
65744: NOT
65745: IFFALSE 65749
// exit ;
65747: GO 66668
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
65749: LD_ADDR_VAR 0 5
65753: PUSH
65754: LD_INT 4
65756: PUSH
65757: LD_INT 5
65759: PUSH
65760: LD_INT 9
65762: PUSH
65763: LD_INT 10
65765: PUSH
65766: LD_INT 6
65768: PUSH
65769: LD_INT 7
65771: PUSH
65772: LD_INT 11
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: LIST
65782: LIST
65783: PUSH
65784: LD_INT 27
65786: PUSH
65787: LD_INT 28
65789: PUSH
65790: LD_INT 26
65792: PUSH
65793: LD_INT 30
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: PUSH
65802: LD_INT 43
65804: PUSH
65805: LD_INT 44
65807: PUSH
65808: LD_INT 46
65810: PUSH
65811: LD_INT 45
65813: PUSH
65814: LD_INT 47
65816: PUSH
65817: LD_INT 49
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: LIST
65832: PUSH
65833: LD_VAR 0 12
65837: ARRAY
65838: ST_TO_ADDR
// list := list isect fac_list ;
65839: LD_ADDR_VAR 0 5
65843: PUSH
65844: LD_VAR 0 5
65848: PUSH
65849: LD_VAR 0 17
65853: ISECT
65854: ST_TO_ADDR
// if not list then
65855: LD_VAR 0 5
65859: NOT
65860: IFFALSE 65864
// exit ;
65862: GO 66668
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
65864: LD_VAR 0 12
65868: PUSH
65869: LD_INT 3
65871: EQUAL
65872: PUSH
65873: LD_INT 49
65875: PUSH
65876: LD_VAR 0 5
65880: IN
65881: AND
65882: PUSH
65883: LD_INT 31
65885: PPUSH
65886: LD_VAR 0 16
65890: PPUSH
65891: CALL_OW 321
65895: PUSH
65896: LD_INT 2
65898: EQUAL
65899: AND
65900: IFFALSE 65960
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
65902: LD_INT 22
65904: PUSH
65905: LD_VAR 0 16
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 35
65916: PUSH
65917: LD_INT 49
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 91
65926: PUSH
65927: LD_VAR 0 1
65931: PUSH
65932: LD_INT 10
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: LIST
65939: PUSH
65940: EMPTY
65941: LIST
65942: LIST
65943: LIST
65944: PPUSH
65945: CALL_OW 69
65949: NOT
65950: IFFALSE 65960
// weapon := ru_time_lapser ;
65952: LD_ADDR_VAR 0 18
65956: PUSH
65957: LD_INT 49
65959: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
65960: LD_VAR 0 12
65964: PUSH
65965: LD_INT 1
65967: PUSH
65968: LD_INT 2
65970: PUSH
65971: EMPTY
65972: LIST
65973: LIST
65974: IN
65975: PUSH
65976: LD_INT 11
65978: PUSH
65979: LD_VAR 0 5
65983: IN
65984: PUSH
65985: LD_INT 30
65987: PUSH
65988: LD_VAR 0 5
65992: IN
65993: OR
65994: AND
65995: PUSH
65996: LD_INT 6
65998: PPUSH
65999: LD_VAR 0 16
66003: PPUSH
66004: CALL_OW 321
66008: PUSH
66009: LD_INT 2
66011: EQUAL
66012: AND
66013: IFFALSE 66178
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
66015: LD_INT 22
66017: PUSH
66018: LD_VAR 0 16
66022: PUSH
66023: EMPTY
66024: LIST
66025: LIST
66026: PUSH
66027: LD_INT 2
66029: PUSH
66030: LD_INT 35
66032: PUSH
66033: LD_INT 11
66035: PUSH
66036: EMPTY
66037: LIST
66038: LIST
66039: PUSH
66040: LD_INT 35
66042: PUSH
66043: LD_INT 30
66045: PUSH
66046: EMPTY
66047: LIST
66048: LIST
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 91
66057: PUSH
66058: LD_VAR 0 1
66062: PUSH
66063: LD_INT 18
66065: PUSH
66066: EMPTY
66067: LIST
66068: LIST
66069: LIST
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: LIST
66075: PPUSH
66076: CALL_OW 69
66080: NOT
66081: PUSH
66082: LD_INT 22
66084: PUSH
66085: LD_VAR 0 16
66089: PUSH
66090: EMPTY
66091: LIST
66092: LIST
66093: PUSH
66094: LD_INT 2
66096: PUSH
66097: LD_INT 30
66099: PUSH
66100: LD_INT 32
66102: PUSH
66103: EMPTY
66104: LIST
66105: LIST
66106: PUSH
66107: LD_INT 30
66109: PUSH
66110: LD_INT 33
66112: PUSH
66113: EMPTY
66114: LIST
66115: LIST
66116: PUSH
66117: EMPTY
66118: LIST
66119: LIST
66120: LIST
66121: PUSH
66122: LD_INT 91
66124: PUSH
66125: LD_VAR 0 1
66129: PUSH
66130: LD_INT 12
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: LIST
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: LIST
66142: PUSH
66143: EMPTY
66144: LIST
66145: PPUSH
66146: CALL_OW 69
66150: PUSH
66151: LD_INT 2
66153: GREATER
66154: AND
66155: IFFALSE 66178
// weapon := [ us_radar , ar_radar ] [ nat ] ;
66157: LD_ADDR_VAR 0 18
66161: PUSH
66162: LD_INT 11
66164: PUSH
66165: LD_INT 30
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_VAR 0 12
66176: ARRAY
66177: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
66178: LD_VAR 0 18
66182: NOT
66183: PUSH
66184: LD_INT 40
66186: PPUSH
66187: LD_VAR 0 16
66191: PPUSH
66192: CALL_OW 321
66196: PUSH
66197: LD_INT 2
66199: EQUAL
66200: AND
66201: PUSH
66202: LD_INT 7
66204: PUSH
66205: LD_VAR 0 5
66209: IN
66210: PUSH
66211: LD_INT 28
66213: PUSH
66214: LD_VAR 0 5
66218: IN
66219: OR
66220: PUSH
66221: LD_INT 45
66223: PUSH
66224: LD_VAR 0 5
66228: IN
66229: OR
66230: AND
66231: IFFALSE 66485
// begin hex := GetHexInfo ( x , y ) ;
66233: LD_ADDR_VAR 0 4
66237: PUSH
66238: LD_VAR 0 10
66242: PPUSH
66243: LD_VAR 0 11
66247: PPUSH
66248: CALL_OW 546
66252: ST_TO_ADDR
// if hex [ 1 ] then
66253: LD_VAR 0 4
66257: PUSH
66258: LD_INT 1
66260: ARRAY
66261: IFFALSE 66265
// exit ;
66263: GO 66668
// height := hex [ 2 ] ;
66265: LD_ADDR_VAR 0 15
66269: PUSH
66270: LD_VAR 0 4
66274: PUSH
66275: LD_INT 2
66277: ARRAY
66278: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
66279: LD_ADDR_VAR 0 14
66283: PUSH
66284: LD_INT 0
66286: PUSH
66287: LD_INT 2
66289: PUSH
66290: LD_INT 3
66292: PUSH
66293: LD_INT 5
66295: PUSH
66296: EMPTY
66297: LIST
66298: LIST
66299: LIST
66300: LIST
66301: ST_TO_ADDR
// for i in tmp do
66302: LD_ADDR_VAR 0 8
66306: PUSH
66307: LD_VAR 0 14
66311: PUSH
66312: FOR_IN
66313: IFFALSE 66483
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
66315: LD_ADDR_VAR 0 9
66319: PUSH
66320: LD_VAR 0 10
66324: PPUSH
66325: LD_VAR 0 8
66329: PPUSH
66330: LD_INT 5
66332: PPUSH
66333: CALL_OW 272
66337: PUSH
66338: LD_VAR 0 11
66342: PPUSH
66343: LD_VAR 0 8
66347: PPUSH
66348: LD_INT 5
66350: PPUSH
66351: CALL_OW 273
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
66360: LD_VAR 0 9
66364: PUSH
66365: LD_INT 1
66367: ARRAY
66368: PPUSH
66369: LD_VAR 0 9
66373: PUSH
66374: LD_INT 2
66376: ARRAY
66377: PPUSH
66378: CALL_OW 488
66382: IFFALSE 66481
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
66384: LD_ADDR_VAR 0 4
66388: PUSH
66389: LD_VAR 0 9
66393: PUSH
66394: LD_INT 1
66396: ARRAY
66397: PPUSH
66398: LD_VAR 0 9
66402: PUSH
66403: LD_INT 2
66405: ARRAY
66406: PPUSH
66407: CALL_OW 546
66411: ST_TO_ADDR
// if hex [ 1 ] then
66412: LD_VAR 0 4
66416: PUSH
66417: LD_INT 1
66419: ARRAY
66420: IFFALSE 66424
// continue ;
66422: GO 66312
// h := hex [ 2 ] ;
66424: LD_ADDR_VAR 0 13
66428: PUSH
66429: LD_VAR 0 4
66433: PUSH
66434: LD_INT 2
66436: ARRAY
66437: ST_TO_ADDR
// if h + 7 < height then
66438: LD_VAR 0 13
66442: PUSH
66443: LD_INT 7
66445: PLUS
66446: PUSH
66447: LD_VAR 0 15
66451: LESS
66452: IFFALSE 66481
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
66454: LD_ADDR_VAR 0 18
66458: PUSH
66459: LD_INT 7
66461: PUSH
66462: LD_INT 28
66464: PUSH
66465: LD_INT 45
66467: PUSH
66468: EMPTY
66469: LIST
66470: LIST
66471: LIST
66472: PUSH
66473: LD_VAR 0 12
66477: ARRAY
66478: ST_TO_ADDR
// break ;
66479: GO 66483
// end ; end ; end ;
66481: GO 66312
66483: POP
66484: POP
// end ; if not weapon then
66485: LD_VAR 0 18
66489: NOT
66490: IFFALSE 66550
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
66492: LD_ADDR_VAR 0 5
66496: PUSH
66497: LD_VAR 0 5
66501: PUSH
66502: LD_INT 11
66504: PUSH
66505: LD_INT 30
66507: PUSH
66508: LD_INT 49
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: LIST
66515: DIFF
66516: ST_TO_ADDR
// if not list then
66517: LD_VAR 0 5
66521: NOT
66522: IFFALSE 66526
// exit ;
66524: GO 66668
// weapon := list [ rand ( 1 , list ) ] ;
66526: LD_ADDR_VAR 0 18
66530: PUSH
66531: LD_VAR 0 5
66535: PUSH
66536: LD_INT 1
66538: PPUSH
66539: LD_VAR 0 5
66543: PPUSH
66544: CALL_OW 12
66548: ARRAY
66549: ST_TO_ADDR
// end ; if weapon then
66550: LD_VAR 0 18
66554: IFFALSE 66668
// begin tmp := CostOfWeapon ( weapon ) ;
66556: LD_ADDR_VAR 0 14
66560: PUSH
66561: LD_VAR 0 18
66565: PPUSH
66566: CALL_OW 451
66570: ST_TO_ADDR
// j := GetBase ( tower ) ;
66571: LD_ADDR_VAR 0 9
66575: PUSH
66576: LD_VAR 0 1
66580: PPUSH
66581: CALL_OW 274
66585: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
66586: LD_VAR 0 9
66590: PPUSH
66591: LD_INT 1
66593: PPUSH
66594: CALL_OW 275
66598: PUSH
66599: LD_VAR 0 14
66603: PUSH
66604: LD_INT 1
66606: ARRAY
66607: GREATEREQUAL
66608: PUSH
66609: LD_VAR 0 9
66613: PPUSH
66614: LD_INT 2
66616: PPUSH
66617: CALL_OW 275
66621: PUSH
66622: LD_VAR 0 14
66626: PUSH
66627: LD_INT 2
66629: ARRAY
66630: GREATEREQUAL
66631: AND
66632: PUSH
66633: LD_VAR 0 9
66637: PPUSH
66638: LD_INT 3
66640: PPUSH
66641: CALL_OW 275
66645: PUSH
66646: LD_VAR 0 14
66650: PUSH
66651: LD_INT 3
66653: ARRAY
66654: GREATEREQUAL
66655: AND
66656: IFFALSE 66668
// result := weapon ;
66658: LD_ADDR_VAR 0 3
66662: PUSH
66663: LD_VAR 0 18
66667: ST_TO_ADDR
// end ; end ;
66668: LD_VAR 0 3
66672: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
66673: LD_INT 0
66675: PPUSH
66676: PPUSH
// result := true ;
66677: LD_ADDR_VAR 0 3
66681: PUSH
66682: LD_INT 1
66684: ST_TO_ADDR
// if array1 = array2 then
66685: LD_VAR 0 1
66689: PUSH
66690: LD_VAR 0 2
66694: EQUAL
66695: IFFALSE 66755
// begin for i = 1 to array1 do
66697: LD_ADDR_VAR 0 4
66701: PUSH
66702: DOUBLE
66703: LD_INT 1
66705: DEC
66706: ST_TO_ADDR
66707: LD_VAR 0 1
66711: PUSH
66712: FOR_TO
66713: IFFALSE 66751
// if array1 [ i ] <> array2 [ i ] then
66715: LD_VAR 0 1
66719: PUSH
66720: LD_VAR 0 4
66724: ARRAY
66725: PUSH
66726: LD_VAR 0 2
66730: PUSH
66731: LD_VAR 0 4
66735: ARRAY
66736: NONEQUAL
66737: IFFALSE 66749
// begin result := false ;
66739: LD_ADDR_VAR 0 3
66743: PUSH
66744: LD_INT 0
66746: ST_TO_ADDR
// break ;
66747: GO 66751
// end ;
66749: GO 66712
66751: POP
66752: POP
// end else
66753: GO 66763
// result := false ;
66755: LD_ADDR_VAR 0 3
66759: PUSH
66760: LD_INT 0
66762: ST_TO_ADDR
// end ;
66763: LD_VAR 0 3
66767: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
66768: LD_INT 0
66770: PPUSH
66771: PPUSH
// if not array1 or not array2 then
66772: LD_VAR 0 1
66776: NOT
66777: PUSH
66778: LD_VAR 0 2
66782: NOT
66783: OR
66784: IFFALSE 66788
// exit ;
66786: GO 66852
// result := true ;
66788: LD_ADDR_VAR 0 3
66792: PUSH
66793: LD_INT 1
66795: ST_TO_ADDR
// for i = 1 to array1 do
66796: LD_ADDR_VAR 0 4
66800: PUSH
66801: DOUBLE
66802: LD_INT 1
66804: DEC
66805: ST_TO_ADDR
66806: LD_VAR 0 1
66810: PUSH
66811: FOR_TO
66812: IFFALSE 66850
// if array1 [ i ] <> array2 [ i ] then
66814: LD_VAR 0 1
66818: PUSH
66819: LD_VAR 0 4
66823: ARRAY
66824: PUSH
66825: LD_VAR 0 2
66829: PUSH
66830: LD_VAR 0 4
66834: ARRAY
66835: NONEQUAL
66836: IFFALSE 66848
// begin result := false ;
66838: LD_ADDR_VAR 0 3
66842: PUSH
66843: LD_INT 0
66845: ST_TO_ADDR
// break ;
66846: GO 66850
// end ;
66848: GO 66811
66850: POP
66851: POP
// end ;
66852: LD_VAR 0 3
66856: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
66857: LD_INT 0
66859: PPUSH
66860: PPUSH
66861: PPUSH
// pom := GetBase ( fac ) ;
66862: LD_ADDR_VAR 0 5
66866: PUSH
66867: LD_VAR 0 1
66871: PPUSH
66872: CALL_OW 274
66876: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
66877: LD_ADDR_VAR 0 4
66881: PUSH
66882: LD_VAR 0 2
66886: PUSH
66887: LD_INT 1
66889: ARRAY
66890: PPUSH
66891: LD_VAR 0 2
66895: PUSH
66896: LD_INT 2
66898: ARRAY
66899: PPUSH
66900: LD_VAR 0 2
66904: PUSH
66905: LD_INT 3
66907: ARRAY
66908: PPUSH
66909: LD_VAR 0 2
66913: PUSH
66914: LD_INT 4
66916: ARRAY
66917: PPUSH
66918: CALL_OW 449
66922: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66923: LD_ADDR_VAR 0 3
66927: PUSH
66928: LD_VAR 0 5
66932: PPUSH
66933: LD_INT 1
66935: PPUSH
66936: CALL_OW 275
66940: PUSH
66941: LD_VAR 0 4
66945: PUSH
66946: LD_INT 1
66948: ARRAY
66949: GREATEREQUAL
66950: PUSH
66951: LD_VAR 0 5
66955: PPUSH
66956: LD_INT 2
66958: PPUSH
66959: CALL_OW 275
66963: PUSH
66964: LD_VAR 0 4
66968: PUSH
66969: LD_INT 2
66971: ARRAY
66972: GREATEREQUAL
66973: AND
66974: PUSH
66975: LD_VAR 0 5
66979: PPUSH
66980: LD_INT 3
66982: PPUSH
66983: CALL_OW 275
66987: PUSH
66988: LD_VAR 0 4
66992: PUSH
66993: LD_INT 3
66995: ARRAY
66996: GREATEREQUAL
66997: AND
66998: ST_TO_ADDR
// end ;
66999: LD_VAR 0 3
67003: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
67004: LD_INT 0
67006: PPUSH
67007: PPUSH
67008: PPUSH
67009: PPUSH
// pom := GetBase ( building ) ;
67010: LD_ADDR_VAR 0 3
67014: PUSH
67015: LD_VAR 0 1
67019: PPUSH
67020: CALL_OW 274
67024: ST_TO_ADDR
// if not pom then
67025: LD_VAR 0 3
67029: NOT
67030: IFFALSE 67034
// exit ;
67032: GO 67204
// btype := GetBType ( building ) ;
67034: LD_ADDR_VAR 0 5
67038: PUSH
67039: LD_VAR 0 1
67043: PPUSH
67044: CALL_OW 266
67048: ST_TO_ADDR
// if btype = b_armoury then
67049: LD_VAR 0 5
67053: PUSH
67054: LD_INT 4
67056: EQUAL
67057: IFFALSE 67067
// btype := b_barracks ;
67059: LD_ADDR_VAR 0 5
67063: PUSH
67064: LD_INT 5
67066: ST_TO_ADDR
// if btype = b_depot then
67067: LD_VAR 0 5
67071: PUSH
67072: LD_INT 0
67074: EQUAL
67075: IFFALSE 67085
// btype := b_warehouse ;
67077: LD_ADDR_VAR 0 5
67081: PUSH
67082: LD_INT 1
67084: ST_TO_ADDR
// if btype = b_workshop then
67085: LD_VAR 0 5
67089: PUSH
67090: LD_INT 2
67092: EQUAL
67093: IFFALSE 67103
// btype := b_factory ;
67095: LD_ADDR_VAR 0 5
67099: PUSH
67100: LD_INT 3
67102: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
67103: LD_ADDR_VAR 0 4
67107: PUSH
67108: LD_VAR 0 5
67112: PPUSH
67113: LD_VAR 0 1
67117: PPUSH
67118: CALL_OW 248
67122: PPUSH
67123: CALL_OW 450
67127: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67128: LD_ADDR_VAR 0 2
67132: PUSH
67133: LD_VAR 0 3
67137: PPUSH
67138: LD_INT 1
67140: PPUSH
67141: CALL_OW 275
67145: PUSH
67146: LD_VAR 0 4
67150: PUSH
67151: LD_INT 1
67153: ARRAY
67154: GREATEREQUAL
67155: PUSH
67156: LD_VAR 0 3
67160: PPUSH
67161: LD_INT 2
67163: PPUSH
67164: CALL_OW 275
67168: PUSH
67169: LD_VAR 0 4
67173: PUSH
67174: LD_INT 2
67176: ARRAY
67177: GREATEREQUAL
67178: AND
67179: PUSH
67180: LD_VAR 0 3
67184: PPUSH
67185: LD_INT 3
67187: PPUSH
67188: CALL_OW 275
67192: PUSH
67193: LD_VAR 0 4
67197: PUSH
67198: LD_INT 3
67200: ARRAY
67201: GREATEREQUAL
67202: AND
67203: ST_TO_ADDR
// end ;
67204: LD_VAR 0 2
67208: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
67209: LD_INT 0
67211: PPUSH
67212: PPUSH
67213: PPUSH
// pom := GetBase ( building ) ;
67214: LD_ADDR_VAR 0 4
67218: PUSH
67219: LD_VAR 0 1
67223: PPUSH
67224: CALL_OW 274
67228: ST_TO_ADDR
// if not pom then
67229: LD_VAR 0 4
67233: NOT
67234: IFFALSE 67238
// exit ;
67236: GO 67339
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
67238: LD_ADDR_VAR 0 5
67242: PUSH
67243: LD_VAR 0 2
67247: PPUSH
67248: LD_VAR 0 1
67252: PPUSH
67253: CALL_OW 248
67257: PPUSH
67258: CALL_OW 450
67262: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
67263: LD_ADDR_VAR 0 3
67267: PUSH
67268: LD_VAR 0 4
67272: PPUSH
67273: LD_INT 1
67275: PPUSH
67276: CALL_OW 275
67280: PUSH
67281: LD_VAR 0 5
67285: PUSH
67286: LD_INT 1
67288: ARRAY
67289: GREATEREQUAL
67290: PUSH
67291: LD_VAR 0 4
67295: PPUSH
67296: LD_INT 2
67298: PPUSH
67299: CALL_OW 275
67303: PUSH
67304: LD_VAR 0 5
67308: PUSH
67309: LD_INT 2
67311: ARRAY
67312: GREATEREQUAL
67313: AND
67314: PUSH
67315: LD_VAR 0 4
67319: PPUSH
67320: LD_INT 3
67322: PPUSH
67323: CALL_OW 275
67327: PUSH
67328: LD_VAR 0 5
67332: PUSH
67333: LD_INT 3
67335: ARRAY
67336: GREATEREQUAL
67337: AND
67338: ST_TO_ADDR
// end ;
67339: LD_VAR 0 3
67343: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
67344: LD_INT 0
67346: PPUSH
67347: PPUSH
67348: PPUSH
67349: PPUSH
67350: PPUSH
67351: PPUSH
67352: PPUSH
67353: PPUSH
67354: PPUSH
67355: PPUSH
67356: PPUSH
// result := false ;
67357: LD_ADDR_VAR 0 8
67361: PUSH
67362: LD_INT 0
67364: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
67365: LD_VAR 0 5
67369: NOT
67370: PUSH
67371: LD_VAR 0 1
67375: NOT
67376: OR
67377: PUSH
67378: LD_VAR 0 2
67382: NOT
67383: OR
67384: PUSH
67385: LD_VAR 0 3
67389: NOT
67390: OR
67391: IFFALSE 67395
// exit ;
67393: GO 68209
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
67395: LD_ADDR_VAR 0 14
67399: PUSH
67400: LD_VAR 0 1
67404: PPUSH
67405: LD_VAR 0 2
67409: PPUSH
67410: LD_VAR 0 3
67414: PPUSH
67415: LD_VAR 0 4
67419: PPUSH
67420: LD_VAR 0 5
67424: PUSH
67425: LD_INT 1
67427: ARRAY
67428: PPUSH
67429: CALL_OW 248
67433: PPUSH
67434: LD_INT 0
67436: PPUSH
67437: CALL 69462 0 6
67441: ST_TO_ADDR
// if not hexes then
67442: LD_VAR 0 14
67446: NOT
67447: IFFALSE 67451
// exit ;
67449: GO 68209
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
67451: LD_ADDR_VAR 0 17
67455: PUSH
67456: LD_VAR 0 5
67460: PPUSH
67461: LD_INT 22
67463: PUSH
67464: LD_VAR 0 13
67468: PPUSH
67469: CALL_OW 255
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 2
67480: PUSH
67481: LD_INT 30
67483: PUSH
67484: LD_INT 0
67486: PUSH
67487: EMPTY
67488: LIST
67489: LIST
67490: PUSH
67491: LD_INT 30
67493: PUSH
67494: LD_INT 1
67496: PUSH
67497: EMPTY
67498: LIST
67499: LIST
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: LIST
67505: PUSH
67506: EMPTY
67507: LIST
67508: LIST
67509: PPUSH
67510: CALL_OW 72
67514: ST_TO_ADDR
// for i = 1 to hexes do
67515: LD_ADDR_VAR 0 9
67519: PUSH
67520: DOUBLE
67521: LD_INT 1
67523: DEC
67524: ST_TO_ADDR
67525: LD_VAR 0 14
67529: PUSH
67530: FOR_TO
67531: IFFALSE 68207
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
67533: LD_ADDR_VAR 0 13
67537: PUSH
67538: LD_VAR 0 14
67542: PUSH
67543: LD_VAR 0 9
67547: ARRAY
67548: PUSH
67549: LD_INT 1
67551: ARRAY
67552: PPUSH
67553: LD_VAR 0 14
67557: PUSH
67558: LD_VAR 0 9
67562: ARRAY
67563: PUSH
67564: LD_INT 2
67566: ARRAY
67567: PPUSH
67568: CALL_OW 428
67572: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
67573: LD_VAR 0 14
67577: PUSH
67578: LD_VAR 0 9
67582: ARRAY
67583: PUSH
67584: LD_INT 1
67586: ARRAY
67587: PPUSH
67588: LD_VAR 0 14
67592: PUSH
67593: LD_VAR 0 9
67597: ARRAY
67598: PUSH
67599: LD_INT 2
67601: ARRAY
67602: PPUSH
67603: CALL_OW 351
67607: PUSH
67608: LD_VAR 0 14
67612: PUSH
67613: LD_VAR 0 9
67617: ARRAY
67618: PUSH
67619: LD_INT 1
67621: ARRAY
67622: PPUSH
67623: LD_VAR 0 14
67627: PUSH
67628: LD_VAR 0 9
67632: ARRAY
67633: PUSH
67634: LD_INT 2
67636: ARRAY
67637: PPUSH
67638: CALL_OW 488
67642: NOT
67643: OR
67644: PUSH
67645: LD_VAR 0 13
67649: PPUSH
67650: CALL_OW 247
67654: PUSH
67655: LD_INT 3
67657: EQUAL
67658: OR
67659: IFFALSE 67665
// exit ;
67661: POP
67662: POP
67663: GO 68209
// if not tmp then
67665: LD_VAR 0 13
67669: NOT
67670: IFFALSE 67674
// continue ;
67672: GO 67530
// result := true ;
67674: LD_ADDR_VAR 0 8
67678: PUSH
67679: LD_INT 1
67681: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
67682: LD_VAR 0 6
67686: PUSH
67687: LD_VAR 0 13
67691: PPUSH
67692: CALL_OW 247
67696: PUSH
67697: LD_INT 2
67699: EQUAL
67700: AND
67701: PUSH
67702: LD_VAR 0 13
67706: PPUSH
67707: CALL_OW 263
67711: PUSH
67712: LD_INT 1
67714: EQUAL
67715: AND
67716: IFFALSE 67880
// begin if IsDrivenBy ( tmp ) then
67718: LD_VAR 0 13
67722: PPUSH
67723: CALL_OW 311
67727: IFFALSE 67731
// continue ;
67729: GO 67530
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
67731: LD_VAR 0 6
67735: PPUSH
67736: LD_INT 3
67738: PUSH
67739: LD_INT 60
67741: PUSH
67742: EMPTY
67743: LIST
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 3
67751: PUSH
67752: LD_INT 55
67754: PUSH
67755: EMPTY
67756: LIST
67757: PUSH
67758: EMPTY
67759: LIST
67760: LIST
67761: PUSH
67762: EMPTY
67763: LIST
67764: LIST
67765: PPUSH
67766: CALL_OW 72
67770: IFFALSE 67878
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
67772: LD_ADDR_VAR 0 18
67776: PUSH
67777: LD_VAR 0 6
67781: PPUSH
67782: LD_INT 3
67784: PUSH
67785: LD_INT 60
67787: PUSH
67788: EMPTY
67789: LIST
67790: PUSH
67791: EMPTY
67792: LIST
67793: LIST
67794: PUSH
67795: LD_INT 3
67797: PUSH
67798: LD_INT 55
67800: PUSH
67801: EMPTY
67802: LIST
67803: PUSH
67804: EMPTY
67805: LIST
67806: LIST
67807: PUSH
67808: EMPTY
67809: LIST
67810: LIST
67811: PPUSH
67812: CALL_OW 72
67816: PUSH
67817: LD_INT 1
67819: ARRAY
67820: ST_TO_ADDR
// if IsInUnit ( driver ) then
67821: LD_VAR 0 18
67825: PPUSH
67826: CALL_OW 310
67830: IFFALSE 67841
// ComExit ( driver ) ;
67832: LD_VAR 0 18
67836: PPUSH
67837: CALL 93263 0 1
// AddComEnterUnit ( driver , tmp ) ;
67841: LD_VAR 0 18
67845: PPUSH
67846: LD_VAR 0 13
67850: PPUSH
67851: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
67855: LD_VAR 0 18
67859: PPUSH
67860: LD_VAR 0 7
67864: PPUSH
67865: CALL_OW 173
// AddComExitVehicle ( driver ) ;
67869: LD_VAR 0 18
67873: PPUSH
67874: CALL_OW 181
// end ; continue ;
67878: GO 67530
// end ; if not cleaners or not tmp in cleaners then
67880: LD_VAR 0 6
67884: NOT
67885: PUSH
67886: LD_VAR 0 13
67890: PUSH
67891: LD_VAR 0 6
67895: IN
67896: NOT
67897: OR
67898: IFFALSE 68205
// begin if dep then
67900: LD_VAR 0 17
67904: IFFALSE 68040
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
67906: LD_ADDR_VAR 0 16
67910: PUSH
67911: LD_VAR 0 17
67915: PUSH
67916: LD_INT 1
67918: ARRAY
67919: PPUSH
67920: CALL_OW 250
67924: PPUSH
67925: LD_VAR 0 17
67929: PUSH
67930: LD_INT 1
67932: ARRAY
67933: PPUSH
67934: CALL_OW 254
67938: PPUSH
67939: LD_INT 5
67941: PPUSH
67942: CALL_OW 272
67946: PUSH
67947: LD_VAR 0 17
67951: PUSH
67952: LD_INT 1
67954: ARRAY
67955: PPUSH
67956: CALL_OW 251
67960: PPUSH
67961: LD_VAR 0 17
67965: PUSH
67966: LD_INT 1
67968: ARRAY
67969: PPUSH
67970: CALL_OW 254
67974: PPUSH
67975: LD_INT 5
67977: PPUSH
67978: CALL_OW 273
67982: PUSH
67983: EMPTY
67984: LIST
67985: LIST
67986: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
67987: LD_VAR 0 16
67991: PUSH
67992: LD_INT 1
67994: ARRAY
67995: PPUSH
67996: LD_VAR 0 16
68000: PUSH
68001: LD_INT 2
68003: ARRAY
68004: PPUSH
68005: CALL_OW 488
68009: IFFALSE 68040
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
68011: LD_VAR 0 13
68015: PPUSH
68016: LD_VAR 0 16
68020: PUSH
68021: LD_INT 1
68023: ARRAY
68024: PPUSH
68025: LD_VAR 0 16
68029: PUSH
68030: LD_INT 2
68032: ARRAY
68033: PPUSH
68034: CALL_OW 111
// continue ;
68038: GO 67530
// end ; end ; r := GetDir ( tmp ) ;
68040: LD_ADDR_VAR 0 15
68044: PUSH
68045: LD_VAR 0 13
68049: PPUSH
68050: CALL_OW 254
68054: ST_TO_ADDR
// if r = 5 then
68055: LD_VAR 0 15
68059: PUSH
68060: LD_INT 5
68062: EQUAL
68063: IFFALSE 68073
// r := 0 ;
68065: LD_ADDR_VAR 0 15
68069: PUSH
68070: LD_INT 0
68072: ST_TO_ADDR
// for j = r to 5 do
68073: LD_ADDR_VAR 0 10
68077: PUSH
68078: DOUBLE
68079: LD_VAR 0 15
68083: DEC
68084: ST_TO_ADDR
68085: LD_INT 5
68087: PUSH
68088: FOR_TO
68089: IFFALSE 68203
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
68091: LD_ADDR_VAR 0 11
68095: PUSH
68096: LD_VAR 0 13
68100: PPUSH
68101: CALL_OW 250
68105: PPUSH
68106: LD_VAR 0 10
68110: PPUSH
68111: LD_INT 2
68113: PPUSH
68114: CALL_OW 272
68118: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
68119: LD_ADDR_VAR 0 12
68123: PUSH
68124: LD_VAR 0 13
68128: PPUSH
68129: CALL_OW 251
68133: PPUSH
68134: LD_VAR 0 10
68138: PPUSH
68139: LD_INT 2
68141: PPUSH
68142: CALL_OW 273
68146: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
68147: LD_VAR 0 11
68151: PPUSH
68152: LD_VAR 0 12
68156: PPUSH
68157: CALL_OW 488
68161: PUSH
68162: LD_VAR 0 11
68166: PPUSH
68167: LD_VAR 0 12
68171: PPUSH
68172: CALL_OW 428
68176: NOT
68177: AND
68178: IFFALSE 68201
// begin ComMoveXY ( tmp , _x , _y ) ;
68180: LD_VAR 0 13
68184: PPUSH
68185: LD_VAR 0 11
68189: PPUSH
68190: LD_VAR 0 12
68194: PPUSH
68195: CALL_OW 111
// break ;
68199: GO 68203
// end ; end ;
68201: GO 68088
68203: POP
68204: POP
// end ; end ;
68205: GO 67530
68207: POP
68208: POP
// end ;
68209: LD_VAR 0 8
68213: RET
// export function BuildingTechInvented ( side , btype ) ; begin
68214: LD_INT 0
68216: PPUSH
// result := true ;
68217: LD_ADDR_VAR 0 3
68221: PUSH
68222: LD_INT 1
68224: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
68225: LD_VAR 0 2
68229: PUSH
68230: LD_INT 24
68232: DOUBLE
68233: EQUAL
68234: IFTRUE 68244
68236: LD_INT 33
68238: DOUBLE
68239: EQUAL
68240: IFTRUE 68244
68242: GO 68269
68244: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
68245: LD_ADDR_VAR 0 3
68249: PUSH
68250: LD_INT 32
68252: PPUSH
68253: LD_VAR 0 1
68257: PPUSH
68258: CALL_OW 321
68262: PUSH
68263: LD_INT 2
68265: EQUAL
68266: ST_TO_ADDR
68267: GO 68585
68269: LD_INT 20
68271: DOUBLE
68272: EQUAL
68273: IFTRUE 68277
68275: GO 68302
68277: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
68278: LD_ADDR_VAR 0 3
68282: PUSH
68283: LD_INT 6
68285: PPUSH
68286: LD_VAR 0 1
68290: PPUSH
68291: CALL_OW 321
68295: PUSH
68296: LD_INT 2
68298: EQUAL
68299: ST_TO_ADDR
68300: GO 68585
68302: LD_INT 22
68304: DOUBLE
68305: EQUAL
68306: IFTRUE 68316
68308: LD_INT 36
68310: DOUBLE
68311: EQUAL
68312: IFTRUE 68316
68314: GO 68341
68316: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
68317: LD_ADDR_VAR 0 3
68321: PUSH
68322: LD_INT 15
68324: PPUSH
68325: LD_VAR 0 1
68329: PPUSH
68330: CALL_OW 321
68334: PUSH
68335: LD_INT 2
68337: EQUAL
68338: ST_TO_ADDR
68339: GO 68585
68341: LD_INT 30
68343: DOUBLE
68344: EQUAL
68345: IFTRUE 68349
68347: GO 68374
68349: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
68350: LD_ADDR_VAR 0 3
68354: PUSH
68355: LD_INT 20
68357: PPUSH
68358: LD_VAR 0 1
68362: PPUSH
68363: CALL_OW 321
68367: PUSH
68368: LD_INT 2
68370: EQUAL
68371: ST_TO_ADDR
68372: GO 68585
68374: LD_INT 28
68376: DOUBLE
68377: EQUAL
68378: IFTRUE 68388
68380: LD_INT 21
68382: DOUBLE
68383: EQUAL
68384: IFTRUE 68388
68386: GO 68413
68388: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
68389: LD_ADDR_VAR 0 3
68393: PUSH
68394: LD_INT 21
68396: PPUSH
68397: LD_VAR 0 1
68401: PPUSH
68402: CALL_OW 321
68406: PUSH
68407: LD_INT 2
68409: EQUAL
68410: ST_TO_ADDR
68411: GO 68585
68413: LD_INT 16
68415: DOUBLE
68416: EQUAL
68417: IFTRUE 68421
68419: GO 68446
68421: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
68422: LD_ADDR_VAR 0 3
68426: PUSH
68427: LD_INT 84
68429: PPUSH
68430: LD_VAR 0 1
68434: PPUSH
68435: CALL_OW 321
68439: PUSH
68440: LD_INT 2
68442: EQUAL
68443: ST_TO_ADDR
68444: GO 68585
68446: LD_INT 19
68448: DOUBLE
68449: EQUAL
68450: IFTRUE 68460
68452: LD_INT 23
68454: DOUBLE
68455: EQUAL
68456: IFTRUE 68460
68458: GO 68485
68460: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
68461: LD_ADDR_VAR 0 3
68465: PUSH
68466: LD_INT 83
68468: PPUSH
68469: LD_VAR 0 1
68473: PPUSH
68474: CALL_OW 321
68478: PUSH
68479: LD_INT 2
68481: EQUAL
68482: ST_TO_ADDR
68483: GO 68585
68485: LD_INT 17
68487: DOUBLE
68488: EQUAL
68489: IFTRUE 68493
68491: GO 68518
68493: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
68494: LD_ADDR_VAR 0 3
68498: PUSH
68499: LD_INT 39
68501: PPUSH
68502: LD_VAR 0 1
68506: PPUSH
68507: CALL_OW 321
68511: PUSH
68512: LD_INT 2
68514: EQUAL
68515: ST_TO_ADDR
68516: GO 68585
68518: LD_INT 18
68520: DOUBLE
68521: EQUAL
68522: IFTRUE 68526
68524: GO 68551
68526: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
68527: LD_ADDR_VAR 0 3
68531: PUSH
68532: LD_INT 40
68534: PPUSH
68535: LD_VAR 0 1
68539: PPUSH
68540: CALL_OW 321
68544: PUSH
68545: LD_INT 2
68547: EQUAL
68548: ST_TO_ADDR
68549: GO 68585
68551: LD_INT 27
68553: DOUBLE
68554: EQUAL
68555: IFTRUE 68559
68557: GO 68584
68559: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
68560: LD_ADDR_VAR 0 3
68564: PUSH
68565: LD_INT 35
68567: PPUSH
68568: LD_VAR 0 1
68572: PPUSH
68573: CALL_OW 321
68577: PUSH
68578: LD_INT 2
68580: EQUAL
68581: ST_TO_ADDR
68582: GO 68585
68584: POP
// end ;
68585: LD_VAR 0 3
68589: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
68590: LD_INT 0
68592: PPUSH
68593: PPUSH
68594: PPUSH
68595: PPUSH
68596: PPUSH
68597: PPUSH
68598: PPUSH
68599: PPUSH
68600: PPUSH
68601: PPUSH
68602: PPUSH
// result := false ;
68603: LD_ADDR_VAR 0 6
68607: PUSH
68608: LD_INT 0
68610: ST_TO_ADDR
// if btype = b_depot then
68611: LD_VAR 0 2
68615: PUSH
68616: LD_INT 0
68618: EQUAL
68619: IFFALSE 68631
// begin result := true ;
68621: LD_ADDR_VAR 0 6
68625: PUSH
68626: LD_INT 1
68628: ST_TO_ADDR
// exit ;
68629: GO 69457
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
68631: LD_VAR 0 1
68635: NOT
68636: PUSH
68637: LD_VAR 0 1
68641: PPUSH
68642: CALL_OW 266
68646: PUSH
68647: LD_INT 0
68649: PUSH
68650: LD_INT 1
68652: PUSH
68653: EMPTY
68654: LIST
68655: LIST
68656: IN
68657: NOT
68658: OR
68659: PUSH
68660: LD_VAR 0 2
68664: NOT
68665: OR
68666: PUSH
68667: LD_VAR 0 5
68671: PUSH
68672: LD_INT 0
68674: PUSH
68675: LD_INT 1
68677: PUSH
68678: LD_INT 2
68680: PUSH
68681: LD_INT 3
68683: PUSH
68684: LD_INT 4
68686: PUSH
68687: LD_INT 5
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: LIST
68694: LIST
68695: LIST
68696: LIST
68697: IN
68698: NOT
68699: OR
68700: PUSH
68701: LD_VAR 0 3
68705: PPUSH
68706: LD_VAR 0 4
68710: PPUSH
68711: CALL_OW 488
68715: NOT
68716: OR
68717: IFFALSE 68721
// exit ;
68719: GO 69457
// side := GetSide ( depot ) ;
68721: LD_ADDR_VAR 0 9
68725: PUSH
68726: LD_VAR 0 1
68730: PPUSH
68731: CALL_OW 255
68735: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
68736: LD_VAR 0 9
68740: PPUSH
68741: LD_VAR 0 2
68745: PPUSH
68746: CALL 68214 0 2
68750: NOT
68751: IFFALSE 68755
// exit ;
68753: GO 69457
// pom := GetBase ( depot ) ;
68755: LD_ADDR_VAR 0 10
68759: PUSH
68760: LD_VAR 0 1
68764: PPUSH
68765: CALL_OW 274
68769: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68770: LD_ADDR_VAR 0 11
68774: PUSH
68775: LD_VAR 0 2
68779: PPUSH
68780: LD_VAR 0 1
68784: PPUSH
68785: CALL_OW 248
68789: PPUSH
68790: CALL_OW 450
68794: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
68795: LD_VAR 0 10
68799: PPUSH
68800: LD_INT 1
68802: PPUSH
68803: CALL_OW 275
68807: PUSH
68808: LD_VAR 0 11
68812: PUSH
68813: LD_INT 1
68815: ARRAY
68816: GREATEREQUAL
68817: PUSH
68818: LD_VAR 0 10
68822: PPUSH
68823: LD_INT 2
68825: PPUSH
68826: CALL_OW 275
68830: PUSH
68831: LD_VAR 0 11
68835: PUSH
68836: LD_INT 2
68838: ARRAY
68839: GREATEREQUAL
68840: AND
68841: PUSH
68842: LD_VAR 0 10
68846: PPUSH
68847: LD_INT 3
68849: PPUSH
68850: CALL_OW 275
68854: PUSH
68855: LD_VAR 0 11
68859: PUSH
68860: LD_INT 3
68862: ARRAY
68863: GREATEREQUAL
68864: AND
68865: NOT
68866: IFFALSE 68870
// exit ;
68868: GO 69457
// if GetBType ( depot ) = b_depot then
68870: LD_VAR 0 1
68874: PPUSH
68875: CALL_OW 266
68879: PUSH
68880: LD_INT 0
68882: EQUAL
68883: IFFALSE 68895
// dist := 28 else
68885: LD_ADDR_VAR 0 14
68889: PUSH
68890: LD_INT 28
68892: ST_TO_ADDR
68893: GO 68903
// dist := 36 ;
68895: LD_ADDR_VAR 0 14
68899: PUSH
68900: LD_INT 36
68902: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
68903: LD_VAR 0 1
68907: PPUSH
68908: LD_VAR 0 3
68912: PPUSH
68913: LD_VAR 0 4
68917: PPUSH
68918: CALL_OW 297
68922: PUSH
68923: LD_VAR 0 14
68927: GREATER
68928: IFFALSE 68932
// exit ;
68930: GO 69457
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
68932: LD_ADDR_VAR 0 12
68936: PUSH
68937: LD_VAR 0 2
68941: PPUSH
68942: LD_VAR 0 3
68946: PPUSH
68947: LD_VAR 0 4
68951: PPUSH
68952: LD_VAR 0 5
68956: PPUSH
68957: LD_VAR 0 1
68961: PPUSH
68962: CALL_OW 248
68966: PPUSH
68967: LD_INT 0
68969: PPUSH
68970: CALL 69462 0 6
68974: ST_TO_ADDR
// if not hexes then
68975: LD_VAR 0 12
68979: NOT
68980: IFFALSE 68984
// exit ;
68982: GO 69457
// hex := GetHexInfo ( x , y ) ;
68984: LD_ADDR_VAR 0 15
68988: PUSH
68989: LD_VAR 0 3
68993: PPUSH
68994: LD_VAR 0 4
68998: PPUSH
68999: CALL_OW 546
69003: ST_TO_ADDR
// if hex [ 1 ] then
69004: LD_VAR 0 15
69008: PUSH
69009: LD_INT 1
69011: ARRAY
69012: IFFALSE 69016
// exit ;
69014: GO 69457
// height := hex [ 2 ] ;
69016: LD_ADDR_VAR 0 13
69020: PUSH
69021: LD_VAR 0 15
69025: PUSH
69026: LD_INT 2
69028: ARRAY
69029: ST_TO_ADDR
// for i = 1 to hexes do
69030: LD_ADDR_VAR 0 7
69034: PUSH
69035: DOUBLE
69036: LD_INT 1
69038: DEC
69039: ST_TO_ADDR
69040: LD_VAR 0 12
69044: PUSH
69045: FOR_TO
69046: IFFALSE 69376
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
69048: LD_VAR 0 12
69052: PUSH
69053: LD_VAR 0 7
69057: ARRAY
69058: PUSH
69059: LD_INT 1
69061: ARRAY
69062: PPUSH
69063: LD_VAR 0 12
69067: PUSH
69068: LD_VAR 0 7
69072: ARRAY
69073: PUSH
69074: LD_INT 2
69076: ARRAY
69077: PPUSH
69078: CALL_OW 488
69082: NOT
69083: PUSH
69084: LD_VAR 0 12
69088: PUSH
69089: LD_VAR 0 7
69093: ARRAY
69094: PUSH
69095: LD_INT 1
69097: ARRAY
69098: PPUSH
69099: LD_VAR 0 12
69103: PUSH
69104: LD_VAR 0 7
69108: ARRAY
69109: PUSH
69110: LD_INT 2
69112: ARRAY
69113: PPUSH
69114: CALL_OW 428
69118: PUSH
69119: LD_INT 0
69121: GREATER
69122: OR
69123: PUSH
69124: LD_VAR 0 12
69128: PUSH
69129: LD_VAR 0 7
69133: ARRAY
69134: PUSH
69135: LD_INT 1
69137: ARRAY
69138: PPUSH
69139: LD_VAR 0 12
69143: PUSH
69144: LD_VAR 0 7
69148: ARRAY
69149: PUSH
69150: LD_INT 2
69152: ARRAY
69153: PPUSH
69154: CALL_OW 351
69158: OR
69159: IFFALSE 69165
// exit ;
69161: POP
69162: POP
69163: GO 69457
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
69165: LD_ADDR_VAR 0 8
69169: PUSH
69170: LD_VAR 0 12
69174: PUSH
69175: LD_VAR 0 7
69179: ARRAY
69180: PUSH
69181: LD_INT 1
69183: ARRAY
69184: PPUSH
69185: LD_VAR 0 12
69189: PUSH
69190: LD_VAR 0 7
69194: ARRAY
69195: PUSH
69196: LD_INT 2
69198: ARRAY
69199: PPUSH
69200: CALL_OW 546
69204: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
69205: LD_VAR 0 8
69209: PUSH
69210: LD_INT 1
69212: ARRAY
69213: PUSH
69214: LD_VAR 0 8
69218: PUSH
69219: LD_INT 2
69221: ARRAY
69222: PUSH
69223: LD_VAR 0 13
69227: PUSH
69228: LD_INT 2
69230: PLUS
69231: GREATER
69232: OR
69233: PUSH
69234: LD_VAR 0 8
69238: PUSH
69239: LD_INT 2
69241: ARRAY
69242: PUSH
69243: LD_VAR 0 13
69247: PUSH
69248: LD_INT 2
69250: MINUS
69251: LESS
69252: OR
69253: PUSH
69254: LD_VAR 0 8
69258: PUSH
69259: LD_INT 3
69261: ARRAY
69262: PUSH
69263: LD_INT 0
69265: PUSH
69266: LD_INT 8
69268: PUSH
69269: LD_INT 9
69271: PUSH
69272: LD_INT 10
69274: PUSH
69275: LD_INT 11
69277: PUSH
69278: LD_INT 12
69280: PUSH
69281: LD_INT 13
69283: PUSH
69284: LD_INT 16
69286: PUSH
69287: LD_INT 17
69289: PUSH
69290: LD_INT 18
69292: PUSH
69293: LD_INT 19
69295: PUSH
69296: LD_INT 20
69298: PUSH
69299: LD_INT 21
69301: PUSH
69302: EMPTY
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: LIST
69315: LIST
69316: IN
69317: NOT
69318: OR
69319: PUSH
69320: LD_VAR 0 8
69324: PUSH
69325: LD_INT 5
69327: ARRAY
69328: NOT
69329: OR
69330: PUSH
69331: LD_VAR 0 8
69335: PUSH
69336: LD_INT 6
69338: ARRAY
69339: PUSH
69340: LD_INT 1
69342: PUSH
69343: LD_INT 2
69345: PUSH
69346: LD_INT 7
69348: PUSH
69349: LD_INT 9
69351: PUSH
69352: LD_INT 10
69354: PUSH
69355: LD_INT 11
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: LIST
69362: LIST
69363: LIST
69364: LIST
69365: IN
69366: NOT
69367: OR
69368: IFFALSE 69374
// exit ;
69370: POP
69371: POP
69372: GO 69457
// end ;
69374: GO 69045
69376: POP
69377: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
69378: LD_VAR 0 9
69382: PPUSH
69383: LD_VAR 0 3
69387: PPUSH
69388: LD_VAR 0 4
69392: PPUSH
69393: LD_INT 20
69395: PPUSH
69396: CALL 61380 0 4
69400: PUSH
69401: LD_INT 4
69403: ARRAY
69404: IFFALSE 69408
// exit ;
69406: GO 69457
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
69408: LD_VAR 0 2
69412: PUSH
69413: LD_INT 29
69415: PUSH
69416: LD_INT 30
69418: PUSH
69419: EMPTY
69420: LIST
69421: LIST
69422: IN
69423: PUSH
69424: LD_VAR 0 3
69428: PPUSH
69429: LD_VAR 0 4
69433: PPUSH
69434: LD_VAR 0 9
69438: PPUSH
69439: CALL_OW 440
69443: NOT
69444: AND
69445: IFFALSE 69449
// exit ;
69447: GO 69457
// result := true ;
69449: LD_ADDR_VAR 0 6
69453: PUSH
69454: LD_INT 1
69456: ST_TO_ADDR
// end ;
69457: LD_VAR 0 6
69461: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
69462: LD_INT 0
69464: PPUSH
69465: PPUSH
69466: PPUSH
69467: PPUSH
69468: PPUSH
69469: PPUSH
69470: PPUSH
69471: PPUSH
69472: PPUSH
69473: PPUSH
69474: PPUSH
69475: PPUSH
69476: PPUSH
69477: PPUSH
69478: PPUSH
69479: PPUSH
69480: PPUSH
69481: PPUSH
69482: PPUSH
69483: PPUSH
69484: PPUSH
69485: PPUSH
69486: PPUSH
69487: PPUSH
69488: PPUSH
69489: PPUSH
69490: PPUSH
69491: PPUSH
69492: PPUSH
69493: PPUSH
69494: PPUSH
69495: PPUSH
69496: PPUSH
69497: PPUSH
69498: PPUSH
69499: PPUSH
69500: PPUSH
69501: PPUSH
69502: PPUSH
69503: PPUSH
69504: PPUSH
69505: PPUSH
69506: PPUSH
69507: PPUSH
69508: PPUSH
69509: PPUSH
69510: PPUSH
69511: PPUSH
69512: PPUSH
69513: PPUSH
69514: PPUSH
69515: PPUSH
69516: PPUSH
69517: PPUSH
69518: PPUSH
69519: PPUSH
69520: PPUSH
69521: PPUSH
// result = [ ] ;
69522: LD_ADDR_VAR 0 7
69526: PUSH
69527: EMPTY
69528: ST_TO_ADDR
// temp_list = [ ] ;
69529: LD_ADDR_VAR 0 9
69533: PUSH
69534: EMPTY
69535: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
69536: LD_VAR 0 4
69540: PUSH
69541: LD_INT 0
69543: PUSH
69544: LD_INT 1
69546: PUSH
69547: LD_INT 2
69549: PUSH
69550: LD_INT 3
69552: PUSH
69553: LD_INT 4
69555: PUSH
69556: LD_INT 5
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: LIST
69563: LIST
69564: LIST
69565: LIST
69566: IN
69567: NOT
69568: PUSH
69569: LD_VAR 0 1
69573: PUSH
69574: LD_INT 0
69576: PUSH
69577: LD_INT 1
69579: PUSH
69580: EMPTY
69581: LIST
69582: LIST
69583: IN
69584: PUSH
69585: LD_VAR 0 5
69589: PUSH
69590: LD_INT 1
69592: PUSH
69593: LD_INT 2
69595: PUSH
69596: LD_INT 3
69598: PUSH
69599: EMPTY
69600: LIST
69601: LIST
69602: LIST
69603: IN
69604: NOT
69605: AND
69606: OR
69607: IFFALSE 69611
// exit ;
69609: GO 88002
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
69611: LD_VAR 0 1
69615: PUSH
69616: LD_INT 6
69618: PUSH
69619: LD_INT 7
69621: PUSH
69622: LD_INT 8
69624: PUSH
69625: LD_INT 13
69627: PUSH
69628: LD_INT 12
69630: PUSH
69631: LD_INT 15
69633: PUSH
69634: LD_INT 11
69636: PUSH
69637: LD_INT 14
69639: PUSH
69640: LD_INT 10
69642: PUSH
69643: EMPTY
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: LIST
69650: LIST
69651: LIST
69652: LIST
69653: IN
69654: IFFALSE 69664
// btype = b_lab ;
69656: LD_ADDR_VAR 0 1
69660: PUSH
69661: LD_INT 6
69663: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
69664: LD_VAR 0 6
69668: PUSH
69669: LD_INT 0
69671: PUSH
69672: LD_INT 1
69674: PUSH
69675: LD_INT 2
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: LIST
69682: IN
69683: NOT
69684: PUSH
69685: LD_VAR 0 1
69689: PUSH
69690: LD_INT 0
69692: PUSH
69693: LD_INT 1
69695: PUSH
69696: LD_INT 2
69698: PUSH
69699: LD_INT 3
69701: PUSH
69702: LD_INT 6
69704: PUSH
69705: LD_INT 36
69707: PUSH
69708: LD_INT 4
69710: PUSH
69711: LD_INT 5
69713: PUSH
69714: LD_INT 31
69716: PUSH
69717: LD_INT 32
69719: PUSH
69720: LD_INT 33
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: IN
69736: NOT
69737: PUSH
69738: LD_VAR 0 6
69742: PUSH
69743: LD_INT 1
69745: EQUAL
69746: AND
69747: OR
69748: PUSH
69749: LD_VAR 0 1
69753: PUSH
69754: LD_INT 2
69756: PUSH
69757: LD_INT 3
69759: PUSH
69760: EMPTY
69761: LIST
69762: LIST
69763: IN
69764: NOT
69765: PUSH
69766: LD_VAR 0 6
69770: PUSH
69771: LD_INT 2
69773: EQUAL
69774: AND
69775: OR
69776: IFFALSE 69786
// mode = 0 ;
69778: LD_ADDR_VAR 0 6
69782: PUSH
69783: LD_INT 0
69785: ST_TO_ADDR
// case mode of 0 :
69786: LD_VAR 0 6
69790: PUSH
69791: LD_INT 0
69793: DOUBLE
69794: EQUAL
69795: IFTRUE 69799
69797: GO 81252
69799: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69800: LD_ADDR_VAR 0 11
69804: PUSH
69805: LD_INT 0
69807: PUSH
69808: LD_INT 0
69810: PUSH
69811: EMPTY
69812: LIST
69813: LIST
69814: PUSH
69815: LD_INT 0
69817: PUSH
69818: LD_INT 1
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 1
69828: PUSH
69829: LD_INT 0
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: PUSH
69836: LD_INT 1
69838: PUSH
69839: LD_INT 1
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 0
69848: PUSH
69849: LD_INT 1
69851: PUSH
69852: EMPTY
69853: LIST
69854: LIST
69855: PUSH
69856: LD_INT 1
69858: NEG
69859: PUSH
69860: LD_INT 0
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 1
69869: NEG
69870: PUSH
69871: LD_INT 1
69873: NEG
69874: PUSH
69875: EMPTY
69876: LIST
69877: LIST
69878: PUSH
69879: LD_INT 1
69881: NEG
69882: PUSH
69883: LD_INT 2
69885: NEG
69886: PUSH
69887: EMPTY
69888: LIST
69889: LIST
69890: PUSH
69891: LD_INT 0
69893: PUSH
69894: LD_INT 2
69896: NEG
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 1
69904: PUSH
69905: LD_INT 1
69907: NEG
69908: PUSH
69909: EMPTY
69910: LIST
69911: LIST
69912: PUSH
69913: LD_INT 1
69915: PUSH
69916: LD_INT 2
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 0
69925: PUSH
69926: LD_INT 2
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 1
69935: NEG
69936: PUSH
69937: LD_INT 1
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 1
69946: PUSH
69947: LD_INT 3
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 0
69956: PUSH
69957: LD_INT 3
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 1
69966: NEG
69967: PUSH
69968: LD_INT 2
69970: PUSH
69971: EMPTY
69972: LIST
69973: LIST
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: LIST
69979: LIST
69980: LIST
69981: LIST
69982: LIST
69983: LIST
69984: LIST
69985: LIST
69986: LIST
69987: LIST
69988: LIST
69989: LIST
69990: LIST
69991: LIST
69992: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69993: LD_ADDR_VAR 0 12
69997: PUSH
69998: LD_INT 0
70000: PUSH
70001: LD_INT 0
70003: PUSH
70004: EMPTY
70005: LIST
70006: LIST
70007: PUSH
70008: LD_INT 0
70010: PUSH
70011: LD_INT 1
70013: NEG
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 1
70021: PUSH
70022: LD_INT 0
70024: PUSH
70025: EMPTY
70026: LIST
70027: LIST
70028: PUSH
70029: LD_INT 1
70031: PUSH
70032: LD_INT 1
70034: PUSH
70035: EMPTY
70036: LIST
70037: LIST
70038: PUSH
70039: LD_INT 0
70041: PUSH
70042: LD_INT 1
70044: PUSH
70045: EMPTY
70046: LIST
70047: LIST
70048: PUSH
70049: LD_INT 1
70051: NEG
70052: PUSH
70053: LD_INT 0
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 1
70062: NEG
70063: PUSH
70064: LD_INT 1
70066: NEG
70067: PUSH
70068: EMPTY
70069: LIST
70070: LIST
70071: PUSH
70072: LD_INT 1
70074: PUSH
70075: LD_INT 1
70077: NEG
70078: PUSH
70079: EMPTY
70080: LIST
70081: LIST
70082: PUSH
70083: LD_INT 2
70085: PUSH
70086: LD_INT 0
70088: PUSH
70089: EMPTY
70090: LIST
70091: LIST
70092: PUSH
70093: LD_INT 2
70095: PUSH
70096: LD_INT 1
70098: PUSH
70099: EMPTY
70100: LIST
70101: LIST
70102: PUSH
70103: LD_INT 1
70105: NEG
70106: PUSH
70107: LD_INT 1
70109: PUSH
70110: EMPTY
70111: LIST
70112: LIST
70113: PUSH
70114: LD_INT 2
70116: NEG
70117: PUSH
70118: LD_INT 0
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 2
70127: NEG
70128: PUSH
70129: LD_INT 1
70131: NEG
70132: PUSH
70133: EMPTY
70134: LIST
70135: LIST
70136: PUSH
70137: LD_INT 2
70139: NEG
70140: PUSH
70141: LD_INT 1
70143: PUSH
70144: EMPTY
70145: LIST
70146: LIST
70147: PUSH
70148: LD_INT 3
70150: NEG
70151: PUSH
70152: LD_INT 0
70154: PUSH
70155: EMPTY
70156: LIST
70157: LIST
70158: PUSH
70159: LD_INT 3
70161: NEG
70162: PUSH
70163: LD_INT 1
70165: NEG
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: LIST
70175: LIST
70176: LIST
70177: LIST
70178: LIST
70179: LIST
70180: LIST
70181: LIST
70182: LIST
70183: LIST
70184: LIST
70185: LIST
70186: LIST
70187: LIST
70188: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70189: LD_ADDR_VAR 0 13
70193: PUSH
70194: LD_INT 0
70196: PUSH
70197: LD_INT 0
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 0
70206: PUSH
70207: LD_INT 1
70209: NEG
70210: PUSH
70211: EMPTY
70212: LIST
70213: LIST
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: LD_INT 0
70220: PUSH
70221: EMPTY
70222: LIST
70223: LIST
70224: PUSH
70225: LD_INT 1
70227: PUSH
70228: LD_INT 1
70230: PUSH
70231: EMPTY
70232: LIST
70233: LIST
70234: PUSH
70235: LD_INT 0
70237: PUSH
70238: LD_INT 1
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 1
70247: NEG
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 1
70258: NEG
70259: PUSH
70260: LD_INT 1
70262: NEG
70263: PUSH
70264: EMPTY
70265: LIST
70266: LIST
70267: PUSH
70268: LD_INT 1
70270: NEG
70271: PUSH
70272: LD_INT 2
70274: NEG
70275: PUSH
70276: EMPTY
70277: LIST
70278: LIST
70279: PUSH
70280: LD_INT 2
70282: PUSH
70283: LD_INT 1
70285: PUSH
70286: EMPTY
70287: LIST
70288: LIST
70289: PUSH
70290: LD_INT 2
70292: PUSH
70293: LD_INT 2
70295: PUSH
70296: EMPTY
70297: LIST
70298: LIST
70299: PUSH
70300: LD_INT 1
70302: PUSH
70303: LD_INT 2
70305: PUSH
70306: EMPTY
70307: LIST
70308: LIST
70309: PUSH
70310: LD_INT 2
70312: NEG
70313: PUSH
70314: LD_INT 1
70316: NEG
70317: PUSH
70318: EMPTY
70319: LIST
70320: LIST
70321: PUSH
70322: LD_INT 2
70324: NEG
70325: PUSH
70326: LD_INT 2
70328: NEG
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 2
70336: NEG
70337: PUSH
70338: LD_INT 3
70340: NEG
70341: PUSH
70342: EMPTY
70343: LIST
70344: LIST
70345: PUSH
70346: LD_INT 3
70348: NEG
70349: PUSH
70350: LD_INT 2
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 3
70360: NEG
70361: PUSH
70362: LD_INT 3
70364: NEG
70365: PUSH
70366: EMPTY
70367: LIST
70368: LIST
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
70388: LD_ADDR_VAR 0 14
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 0
70405: PUSH
70406: LD_INT 1
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 1
70416: PUSH
70417: LD_INT 0
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 1
70426: PUSH
70427: LD_INT 1
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 0
70436: PUSH
70437: LD_INT 1
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 1
70446: NEG
70447: PUSH
70448: LD_INT 0
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 1
70457: NEG
70458: PUSH
70459: LD_INT 1
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 1
70469: NEG
70470: PUSH
70471: LD_INT 2
70473: NEG
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 0
70481: PUSH
70482: LD_INT 2
70484: NEG
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: LD_INT 1
70495: NEG
70496: PUSH
70497: EMPTY
70498: LIST
70499: LIST
70500: PUSH
70501: LD_INT 1
70503: PUSH
70504: LD_INT 2
70506: PUSH
70507: EMPTY
70508: LIST
70509: LIST
70510: PUSH
70511: LD_INT 0
70513: PUSH
70514: LD_INT 2
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 1
70523: NEG
70524: PUSH
70525: LD_INT 1
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: LD_INT 1
70534: NEG
70535: PUSH
70536: LD_INT 3
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 0
70546: PUSH
70547: LD_INT 3
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 1
70557: PUSH
70558: LD_INT 2
70560: NEG
70561: PUSH
70562: EMPTY
70563: LIST
70564: LIST
70565: PUSH
70566: EMPTY
70567: LIST
70568: LIST
70569: LIST
70570: LIST
70571: LIST
70572: LIST
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: LIST
70583: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70584: LD_ADDR_VAR 0 15
70588: PUSH
70589: LD_INT 0
70591: PUSH
70592: LD_INT 0
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 0
70601: PUSH
70602: LD_INT 1
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 1
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 1
70622: PUSH
70623: LD_INT 1
70625: PUSH
70626: EMPTY
70627: LIST
70628: LIST
70629: PUSH
70630: LD_INT 0
70632: PUSH
70633: LD_INT 1
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: LD_INT 1
70642: NEG
70643: PUSH
70644: LD_INT 0
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 1
70653: NEG
70654: PUSH
70655: LD_INT 1
70657: NEG
70658: PUSH
70659: EMPTY
70660: LIST
70661: LIST
70662: PUSH
70663: LD_INT 1
70665: PUSH
70666: LD_INT 1
70668: NEG
70669: PUSH
70670: EMPTY
70671: LIST
70672: LIST
70673: PUSH
70674: LD_INT 2
70676: PUSH
70677: LD_INT 0
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: LD_INT 2
70686: PUSH
70687: LD_INT 1
70689: PUSH
70690: EMPTY
70691: LIST
70692: LIST
70693: PUSH
70694: LD_INT 1
70696: NEG
70697: PUSH
70698: LD_INT 1
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 2
70707: NEG
70708: PUSH
70709: LD_INT 0
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 2
70718: NEG
70719: PUSH
70720: LD_INT 1
70722: NEG
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 2
70730: PUSH
70731: LD_INT 1
70733: NEG
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 3
70741: PUSH
70742: LD_INT 0
70744: PUSH
70745: EMPTY
70746: LIST
70747: LIST
70748: PUSH
70749: LD_INT 3
70751: PUSH
70752: LD_INT 1
70754: PUSH
70755: EMPTY
70756: LIST
70757: LIST
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: LIST
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70777: LD_ADDR_VAR 0 16
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: LD_INT 0
70787: PUSH
70788: EMPTY
70789: LIST
70790: LIST
70791: PUSH
70792: LD_INT 0
70794: PUSH
70795: LD_INT 1
70797: NEG
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 1
70805: PUSH
70806: LD_INT 0
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: LD_INT 1
70815: PUSH
70816: LD_INT 1
70818: PUSH
70819: EMPTY
70820: LIST
70821: LIST
70822: PUSH
70823: LD_INT 0
70825: PUSH
70826: LD_INT 1
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 1
70835: NEG
70836: PUSH
70837: LD_INT 0
70839: PUSH
70840: EMPTY
70841: LIST
70842: LIST
70843: PUSH
70844: LD_INT 1
70846: NEG
70847: PUSH
70848: LD_INT 1
70850: NEG
70851: PUSH
70852: EMPTY
70853: LIST
70854: LIST
70855: PUSH
70856: LD_INT 1
70858: NEG
70859: PUSH
70860: LD_INT 2
70862: NEG
70863: PUSH
70864: EMPTY
70865: LIST
70866: LIST
70867: PUSH
70868: LD_INT 2
70870: PUSH
70871: LD_INT 1
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 2
70880: PUSH
70881: LD_INT 2
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: LD_INT 1
70890: PUSH
70891: LD_INT 2
70893: PUSH
70894: EMPTY
70895: LIST
70896: LIST
70897: PUSH
70898: LD_INT 2
70900: NEG
70901: PUSH
70902: LD_INT 1
70904: NEG
70905: PUSH
70906: EMPTY
70907: LIST
70908: LIST
70909: PUSH
70910: LD_INT 2
70912: NEG
70913: PUSH
70914: LD_INT 2
70916: NEG
70917: PUSH
70918: EMPTY
70919: LIST
70920: LIST
70921: PUSH
70922: LD_INT 3
70924: PUSH
70925: LD_INT 2
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 3
70934: PUSH
70935: LD_INT 3
70937: PUSH
70938: EMPTY
70939: LIST
70940: LIST
70941: PUSH
70942: LD_INT 2
70944: PUSH
70945: LD_INT 3
70947: PUSH
70948: EMPTY
70949: LIST
70950: LIST
70951: PUSH
70952: EMPTY
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: LIST
70968: LIST
70969: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70970: LD_ADDR_VAR 0 17
70974: PUSH
70975: LD_INT 0
70977: PUSH
70978: LD_INT 0
70980: PUSH
70981: EMPTY
70982: LIST
70983: LIST
70984: PUSH
70985: LD_INT 0
70987: PUSH
70988: LD_INT 1
70990: NEG
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: PUSH
70996: LD_INT 1
70998: PUSH
70999: LD_INT 0
71001: PUSH
71002: EMPTY
71003: LIST
71004: LIST
71005: PUSH
71006: LD_INT 1
71008: PUSH
71009: LD_INT 1
71011: PUSH
71012: EMPTY
71013: LIST
71014: LIST
71015: PUSH
71016: LD_INT 0
71018: PUSH
71019: LD_INT 1
71021: PUSH
71022: EMPTY
71023: LIST
71024: LIST
71025: PUSH
71026: LD_INT 1
71028: NEG
71029: PUSH
71030: LD_INT 0
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 1
71039: NEG
71040: PUSH
71041: LD_INT 1
71043: NEG
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 1
71051: NEG
71052: PUSH
71053: LD_INT 2
71055: NEG
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 0
71063: PUSH
71064: LD_INT 2
71066: NEG
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 1
71074: PUSH
71075: LD_INT 1
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 2
71085: PUSH
71086: LD_INT 0
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 2
71095: PUSH
71096: LD_INT 1
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 2
71105: PUSH
71106: LD_INT 2
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 1
71115: PUSH
71116: LD_INT 2
71118: PUSH
71119: EMPTY
71120: LIST
71121: LIST
71122: PUSH
71123: LD_INT 0
71125: PUSH
71126: LD_INT 2
71128: PUSH
71129: EMPTY
71130: LIST
71131: LIST
71132: PUSH
71133: LD_INT 1
71135: NEG
71136: PUSH
71137: LD_INT 1
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 2
71146: NEG
71147: PUSH
71148: LD_INT 0
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 2
71157: NEG
71158: PUSH
71159: LD_INT 1
71161: NEG
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 2
71169: NEG
71170: PUSH
71171: LD_INT 2
71173: NEG
71174: PUSH
71175: EMPTY
71176: LIST
71177: LIST
71178: PUSH
71179: EMPTY
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: LIST
71198: LIST
71199: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71200: LD_ADDR_VAR 0 18
71204: PUSH
71205: LD_INT 0
71207: PUSH
71208: LD_INT 0
71210: PUSH
71211: EMPTY
71212: LIST
71213: LIST
71214: PUSH
71215: LD_INT 0
71217: PUSH
71218: LD_INT 1
71220: NEG
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 1
71228: PUSH
71229: LD_INT 0
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PUSH
71236: LD_INT 1
71238: PUSH
71239: LD_INT 1
71241: PUSH
71242: EMPTY
71243: LIST
71244: LIST
71245: PUSH
71246: LD_INT 0
71248: PUSH
71249: LD_INT 1
71251: PUSH
71252: EMPTY
71253: LIST
71254: LIST
71255: PUSH
71256: LD_INT 1
71258: NEG
71259: PUSH
71260: LD_INT 0
71262: PUSH
71263: EMPTY
71264: LIST
71265: LIST
71266: PUSH
71267: LD_INT 1
71269: NEG
71270: PUSH
71271: LD_INT 1
71273: NEG
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 1
71281: NEG
71282: PUSH
71283: LD_INT 2
71285: NEG
71286: PUSH
71287: EMPTY
71288: LIST
71289: LIST
71290: PUSH
71291: LD_INT 0
71293: PUSH
71294: LD_INT 2
71296: NEG
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 1
71304: PUSH
71305: LD_INT 1
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 2
71315: PUSH
71316: LD_INT 0
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 2
71325: PUSH
71326: LD_INT 1
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 2
71335: PUSH
71336: LD_INT 2
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 1
71345: PUSH
71346: LD_INT 2
71348: PUSH
71349: EMPTY
71350: LIST
71351: LIST
71352: PUSH
71353: LD_INT 0
71355: PUSH
71356: LD_INT 2
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 1
71365: NEG
71366: PUSH
71367: LD_INT 1
71369: PUSH
71370: EMPTY
71371: LIST
71372: LIST
71373: PUSH
71374: LD_INT 2
71376: NEG
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: PUSH
71385: LD_INT 2
71387: NEG
71388: PUSH
71389: LD_INT 1
71391: NEG
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 2
71399: NEG
71400: PUSH
71401: LD_INT 2
71403: NEG
71404: PUSH
71405: EMPTY
71406: LIST
71407: LIST
71408: PUSH
71409: EMPTY
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: LIST
71428: LIST
71429: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71430: LD_ADDR_VAR 0 19
71434: PUSH
71435: LD_INT 0
71437: PUSH
71438: LD_INT 0
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 0
71447: PUSH
71448: LD_INT 1
71450: NEG
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: PUSH
71456: LD_INT 1
71458: PUSH
71459: LD_INT 0
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 1
71468: PUSH
71469: LD_INT 1
71471: PUSH
71472: EMPTY
71473: LIST
71474: LIST
71475: PUSH
71476: LD_INT 0
71478: PUSH
71479: LD_INT 1
71481: PUSH
71482: EMPTY
71483: LIST
71484: LIST
71485: PUSH
71486: LD_INT 1
71488: NEG
71489: PUSH
71490: LD_INT 0
71492: PUSH
71493: EMPTY
71494: LIST
71495: LIST
71496: PUSH
71497: LD_INT 1
71499: NEG
71500: PUSH
71501: LD_INT 1
71503: NEG
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 1
71511: NEG
71512: PUSH
71513: LD_INT 2
71515: NEG
71516: PUSH
71517: EMPTY
71518: LIST
71519: LIST
71520: PUSH
71521: LD_INT 0
71523: PUSH
71524: LD_INT 2
71526: NEG
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 1
71534: PUSH
71535: LD_INT 1
71537: NEG
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 2
71545: PUSH
71546: LD_INT 0
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 2
71555: PUSH
71556: LD_INT 1
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 2
71565: PUSH
71566: LD_INT 2
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 1
71575: PUSH
71576: LD_INT 2
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 0
71585: PUSH
71586: LD_INT 2
71588: PUSH
71589: EMPTY
71590: LIST
71591: LIST
71592: PUSH
71593: LD_INT 1
71595: NEG
71596: PUSH
71597: LD_INT 1
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: LD_INT 2
71606: NEG
71607: PUSH
71608: LD_INT 0
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: PUSH
71615: LD_INT 2
71617: NEG
71618: PUSH
71619: LD_INT 1
71621: NEG
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 2
71629: NEG
71630: PUSH
71631: LD_INT 2
71633: NEG
71634: PUSH
71635: EMPTY
71636: LIST
71637: LIST
71638: PUSH
71639: EMPTY
71640: LIST
71641: LIST
71642: LIST
71643: LIST
71644: LIST
71645: LIST
71646: LIST
71647: LIST
71648: LIST
71649: LIST
71650: LIST
71651: LIST
71652: LIST
71653: LIST
71654: LIST
71655: LIST
71656: LIST
71657: LIST
71658: LIST
71659: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71660: LD_ADDR_VAR 0 20
71664: PUSH
71665: LD_INT 0
71667: PUSH
71668: LD_INT 0
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 0
71677: PUSH
71678: LD_INT 1
71680: NEG
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 1
71688: PUSH
71689: LD_INT 0
71691: PUSH
71692: EMPTY
71693: LIST
71694: LIST
71695: PUSH
71696: LD_INT 1
71698: PUSH
71699: LD_INT 1
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 0
71708: PUSH
71709: LD_INT 1
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: LD_INT 1
71718: NEG
71719: PUSH
71720: LD_INT 0
71722: PUSH
71723: EMPTY
71724: LIST
71725: LIST
71726: PUSH
71727: LD_INT 1
71729: NEG
71730: PUSH
71731: LD_INT 1
71733: NEG
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 1
71741: NEG
71742: PUSH
71743: LD_INT 2
71745: NEG
71746: PUSH
71747: EMPTY
71748: LIST
71749: LIST
71750: PUSH
71751: LD_INT 0
71753: PUSH
71754: LD_INT 2
71756: NEG
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 1
71764: PUSH
71765: LD_INT 1
71767: NEG
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 2
71775: PUSH
71776: LD_INT 0
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 2
71785: PUSH
71786: LD_INT 1
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 2
71795: PUSH
71796: LD_INT 2
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 1
71805: PUSH
71806: LD_INT 2
71808: PUSH
71809: EMPTY
71810: LIST
71811: LIST
71812: PUSH
71813: LD_INT 0
71815: PUSH
71816: LD_INT 2
71818: PUSH
71819: EMPTY
71820: LIST
71821: LIST
71822: PUSH
71823: LD_INT 1
71825: NEG
71826: PUSH
71827: LD_INT 1
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 2
71836: NEG
71837: PUSH
71838: LD_INT 0
71840: PUSH
71841: EMPTY
71842: LIST
71843: LIST
71844: PUSH
71845: LD_INT 2
71847: NEG
71848: PUSH
71849: LD_INT 1
71851: NEG
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 2
71859: NEG
71860: PUSH
71861: LD_INT 2
71863: NEG
71864: PUSH
71865: EMPTY
71866: LIST
71867: LIST
71868: PUSH
71869: EMPTY
71870: LIST
71871: LIST
71872: LIST
71873: LIST
71874: LIST
71875: LIST
71876: LIST
71877: LIST
71878: LIST
71879: LIST
71880: LIST
71881: LIST
71882: LIST
71883: LIST
71884: LIST
71885: LIST
71886: LIST
71887: LIST
71888: LIST
71889: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71890: LD_ADDR_VAR 0 21
71894: PUSH
71895: LD_INT 0
71897: PUSH
71898: LD_INT 0
71900: PUSH
71901: EMPTY
71902: LIST
71903: LIST
71904: PUSH
71905: LD_INT 0
71907: PUSH
71908: LD_INT 1
71910: NEG
71911: PUSH
71912: EMPTY
71913: LIST
71914: LIST
71915: PUSH
71916: LD_INT 1
71918: PUSH
71919: LD_INT 0
71921: PUSH
71922: EMPTY
71923: LIST
71924: LIST
71925: PUSH
71926: LD_INT 1
71928: PUSH
71929: LD_INT 1
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 0
71938: PUSH
71939: LD_INT 1
71941: PUSH
71942: EMPTY
71943: LIST
71944: LIST
71945: PUSH
71946: LD_INT 1
71948: NEG
71949: PUSH
71950: LD_INT 0
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: PUSH
71957: LD_INT 1
71959: NEG
71960: PUSH
71961: LD_INT 1
71963: NEG
71964: PUSH
71965: EMPTY
71966: LIST
71967: LIST
71968: PUSH
71969: LD_INT 1
71971: NEG
71972: PUSH
71973: LD_INT 2
71975: NEG
71976: PUSH
71977: EMPTY
71978: LIST
71979: LIST
71980: PUSH
71981: LD_INT 0
71983: PUSH
71984: LD_INT 2
71986: NEG
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 1
71994: PUSH
71995: LD_INT 1
71997: NEG
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 2
72005: PUSH
72006: LD_INT 0
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 2
72015: PUSH
72016: LD_INT 1
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 2
72025: PUSH
72026: LD_INT 2
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 1
72035: PUSH
72036: LD_INT 2
72038: PUSH
72039: EMPTY
72040: LIST
72041: LIST
72042: PUSH
72043: LD_INT 0
72045: PUSH
72046: LD_INT 2
72048: PUSH
72049: EMPTY
72050: LIST
72051: LIST
72052: PUSH
72053: LD_INT 1
72055: NEG
72056: PUSH
72057: LD_INT 1
72059: PUSH
72060: EMPTY
72061: LIST
72062: LIST
72063: PUSH
72064: LD_INT 2
72066: NEG
72067: PUSH
72068: LD_INT 0
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 2
72077: NEG
72078: PUSH
72079: LD_INT 1
72081: NEG
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: LD_INT 2
72089: NEG
72090: PUSH
72091: LD_INT 2
72093: NEG
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: EMPTY
72100: LIST
72101: LIST
72102: LIST
72103: LIST
72104: LIST
72105: LIST
72106: LIST
72107: LIST
72108: LIST
72109: LIST
72110: LIST
72111: LIST
72112: LIST
72113: LIST
72114: LIST
72115: LIST
72116: LIST
72117: LIST
72118: LIST
72119: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
72120: LD_ADDR_VAR 0 22
72124: PUSH
72125: LD_INT 0
72127: PUSH
72128: LD_INT 0
72130: PUSH
72131: EMPTY
72132: LIST
72133: LIST
72134: PUSH
72135: LD_INT 0
72137: PUSH
72138: LD_INT 1
72140: NEG
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 1
72148: PUSH
72149: LD_INT 0
72151: PUSH
72152: EMPTY
72153: LIST
72154: LIST
72155: PUSH
72156: LD_INT 1
72158: PUSH
72159: LD_INT 1
72161: PUSH
72162: EMPTY
72163: LIST
72164: LIST
72165: PUSH
72166: LD_INT 0
72168: PUSH
72169: LD_INT 1
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: PUSH
72176: LD_INT 1
72178: NEG
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: EMPTY
72184: LIST
72185: LIST
72186: PUSH
72187: LD_INT 1
72189: NEG
72190: PUSH
72191: LD_INT 1
72193: NEG
72194: PUSH
72195: EMPTY
72196: LIST
72197: LIST
72198: PUSH
72199: LD_INT 1
72201: NEG
72202: PUSH
72203: LD_INT 2
72205: NEG
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 0
72213: PUSH
72214: LD_INT 2
72216: NEG
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 1
72224: PUSH
72225: LD_INT 1
72227: NEG
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 2
72235: PUSH
72236: LD_INT 0
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 2
72245: PUSH
72246: LD_INT 1
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 2
72255: PUSH
72256: LD_INT 2
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 1
72265: PUSH
72266: LD_INT 2
72268: PUSH
72269: EMPTY
72270: LIST
72271: LIST
72272: PUSH
72273: LD_INT 0
72275: PUSH
72276: LD_INT 2
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: LD_INT 1
72285: NEG
72286: PUSH
72287: LD_INT 1
72289: PUSH
72290: EMPTY
72291: LIST
72292: LIST
72293: PUSH
72294: LD_INT 2
72296: NEG
72297: PUSH
72298: LD_INT 0
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 2
72307: NEG
72308: PUSH
72309: LD_INT 1
72311: NEG
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 2
72319: NEG
72320: PUSH
72321: LD_INT 2
72323: NEG
72324: PUSH
72325: EMPTY
72326: LIST
72327: LIST
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: LIST
72333: LIST
72334: LIST
72335: LIST
72336: LIST
72337: LIST
72338: LIST
72339: LIST
72340: LIST
72341: LIST
72342: LIST
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
72350: LD_ADDR_VAR 0 23
72354: PUSH
72355: LD_INT 0
72357: PUSH
72358: LD_INT 0
72360: PUSH
72361: EMPTY
72362: LIST
72363: LIST
72364: PUSH
72365: LD_INT 0
72367: PUSH
72368: LD_INT 1
72370: NEG
72371: PUSH
72372: EMPTY
72373: LIST
72374: LIST
72375: PUSH
72376: LD_INT 1
72378: PUSH
72379: LD_INT 0
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 1
72388: PUSH
72389: LD_INT 1
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 0
72398: PUSH
72399: LD_INT 1
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 1
72408: NEG
72409: PUSH
72410: LD_INT 0
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 1
72419: NEG
72420: PUSH
72421: LD_INT 1
72423: NEG
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 1
72431: NEG
72432: PUSH
72433: LD_INT 2
72435: NEG
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: PUSH
72441: LD_INT 0
72443: PUSH
72444: LD_INT 2
72446: NEG
72447: PUSH
72448: EMPTY
72449: LIST
72450: LIST
72451: PUSH
72452: LD_INT 1
72454: PUSH
72455: LD_INT 1
72457: NEG
72458: PUSH
72459: EMPTY
72460: LIST
72461: LIST
72462: PUSH
72463: LD_INT 2
72465: PUSH
72466: LD_INT 0
72468: PUSH
72469: EMPTY
72470: LIST
72471: LIST
72472: PUSH
72473: LD_INT 2
72475: PUSH
72476: LD_INT 1
72478: PUSH
72479: EMPTY
72480: LIST
72481: LIST
72482: PUSH
72483: LD_INT 2
72485: PUSH
72486: LD_INT 2
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: PUSH
72493: LD_INT 1
72495: PUSH
72496: LD_INT 2
72498: PUSH
72499: EMPTY
72500: LIST
72501: LIST
72502: PUSH
72503: LD_INT 0
72505: PUSH
72506: LD_INT 2
72508: PUSH
72509: EMPTY
72510: LIST
72511: LIST
72512: PUSH
72513: LD_INT 1
72515: NEG
72516: PUSH
72517: LD_INT 1
72519: PUSH
72520: EMPTY
72521: LIST
72522: LIST
72523: PUSH
72524: LD_INT 2
72526: NEG
72527: PUSH
72528: LD_INT 0
72530: PUSH
72531: EMPTY
72532: LIST
72533: LIST
72534: PUSH
72535: LD_INT 2
72537: NEG
72538: PUSH
72539: LD_INT 1
72541: NEG
72542: PUSH
72543: EMPTY
72544: LIST
72545: LIST
72546: PUSH
72547: LD_INT 2
72549: NEG
72550: PUSH
72551: LD_INT 2
72553: NEG
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 2
72561: NEG
72562: PUSH
72563: LD_INT 3
72565: NEG
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 1
72573: NEG
72574: PUSH
72575: LD_INT 3
72577: NEG
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 1
72585: PUSH
72586: LD_INT 2
72588: NEG
72589: PUSH
72590: EMPTY
72591: LIST
72592: LIST
72593: PUSH
72594: LD_INT 2
72596: PUSH
72597: LD_INT 1
72599: NEG
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: EMPTY
72606: LIST
72607: LIST
72608: LIST
72609: LIST
72610: LIST
72611: LIST
72612: LIST
72613: LIST
72614: LIST
72615: LIST
72616: LIST
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
72630: LD_ADDR_VAR 0 24
72634: PUSH
72635: LD_INT 0
72637: PUSH
72638: LD_INT 0
72640: PUSH
72641: EMPTY
72642: LIST
72643: LIST
72644: PUSH
72645: LD_INT 0
72647: PUSH
72648: LD_INT 1
72650: NEG
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 1
72658: PUSH
72659: LD_INT 0
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 1
72668: PUSH
72669: LD_INT 1
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 0
72678: PUSH
72679: LD_INT 1
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: PUSH
72686: LD_INT 1
72688: NEG
72689: PUSH
72690: LD_INT 0
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 1
72699: NEG
72700: PUSH
72701: LD_INT 1
72703: NEG
72704: PUSH
72705: EMPTY
72706: LIST
72707: LIST
72708: PUSH
72709: LD_INT 1
72711: NEG
72712: PUSH
72713: LD_INT 2
72715: NEG
72716: PUSH
72717: EMPTY
72718: LIST
72719: LIST
72720: PUSH
72721: LD_INT 0
72723: PUSH
72724: LD_INT 2
72726: NEG
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 1
72734: PUSH
72735: LD_INT 1
72737: NEG
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 2
72745: PUSH
72746: LD_INT 0
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PUSH
72753: LD_INT 2
72755: PUSH
72756: LD_INT 1
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 2
72765: PUSH
72766: LD_INT 2
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 1
72775: PUSH
72776: LD_INT 2
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: LD_INT 0
72785: PUSH
72786: LD_INT 2
72788: PUSH
72789: EMPTY
72790: LIST
72791: LIST
72792: PUSH
72793: LD_INT 1
72795: NEG
72796: PUSH
72797: LD_INT 1
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: LD_INT 2
72806: NEG
72807: PUSH
72808: LD_INT 0
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PUSH
72815: LD_INT 2
72817: NEG
72818: PUSH
72819: LD_INT 1
72821: NEG
72822: PUSH
72823: EMPTY
72824: LIST
72825: LIST
72826: PUSH
72827: LD_INT 2
72829: NEG
72830: PUSH
72831: LD_INT 2
72833: NEG
72834: PUSH
72835: EMPTY
72836: LIST
72837: LIST
72838: PUSH
72839: LD_INT 1
72841: PUSH
72842: LD_INT 2
72844: NEG
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 2
72852: PUSH
72853: LD_INT 1
72855: NEG
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 3
72863: PUSH
72864: LD_INT 1
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 3
72873: PUSH
72874: LD_INT 2
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: EMPTY
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: LIST
72890: LIST
72891: LIST
72892: LIST
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
72906: LD_ADDR_VAR 0 25
72910: PUSH
72911: LD_INT 0
72913: PUSH
72914: LD_INT 0
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 0
72923: PUSH
72924: LD_INT 1
72926: NEG
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 1
72934: PUSH
72935: LD_INT 0
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 1
72944: PUSH
72945: LD_INT 1
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: LD_INT 0
72954: PUSH
72955: LD_INT 1
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: PUSH
72962: LD_INT 1
72964: NEG
72965: PUSH
72966: LD_INT 0
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 1
72975: NEG
72976: PUSH
72977: LD_INT 1
72979: NEG
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: LD_INT 1
72987: NEG
72988: PUSH
72989: LD_INT 2
72991: NEG
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: LD_INT 0
72999: PUSH
73000: LD_INT 2
73002: NEG
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 1
73010: PUSH
73011: LD_INT 1
73013: NEG
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 2
73021: PUSH
73022: LD_INT 0
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 2
73031: PUSH
73032: LD_INT 1
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_INT 2
73041: PUSH
73042: LD_INT 2
73044: PUSH
73045: EMPTY
73046: LIST
73047: LIST
73048: PUSH
73049: LD_INT 1
73051: PUSH
73052: LD_INT 2
73054: PUSH
73055: EMPTY
73056: LIST
73057: LIST
73058: PUSH
73059: LD_INT 0
73061: PUSH
73062: LD_INT 2
73064: PUSH
73065: EMPTY
73066: LIST
73067: LIST
73068: PUSH
73069: LD_INT 1
73071: NEG
73072: PUSH
73073: LD_INT 1
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 2
73082: NEG
73083: PUSH
73084: LD_INT 0
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 2
73093: NEG
73094: PUSH
73095: LD_INT 1
73097: NEG
73098: PUSH
73099: EMPTY
73100: LIST
73101: LIST
73102: PUSH
73103: LD_INT 2
73105: NEG
73106: PUSH
73107: LD_INT 2
73109: NEG
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: PUSH
73115: LD_INT 3
73117: PUSH
73118: LD_INT 1
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: LD_INT 3
73127: PUSH
73128: LD_INT 2
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 2
73137: PUSH
73138: LD_INT 3
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 1
73147: PUSH
73148: LD_INT 3
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: EMPTY
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: LIST
73172: LIST
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
73180: LD_ADDR_VAR 0 26
73184: PUSH
73185: LD_INT 0
73187: PUSH
73188: LD_INT 0
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: PUSH
73195: LD_INT 0
73197: PUSH
73198: LD_INT 1
73200: NEG
73201: PUSH
73202: EMPTY
73203: LIST
73204: LIST
73205: PUSH
73206: LD_INT 1
73208: PUSH
73209: LD_INT 0
73211: PUSH
73212: EMPTY
73213: LIST
73214: LIST
73215: PUSH
73216: LD_INT 1
73218: PUSH
73219: LD_INT 1
73221: PUSH
73222: EMPTY
73223: LIST
73224: LIST
73225: PUSH
73226: LD_INT 0
73228: PUSH
73229: LD_INT 1
73231: PUSH
73232: EMPTY
73233: LIST
73234: LIST
73235: PUSH
73236: LD_INT 1
73238: NEG
73239: PUSH
73240: LD_INT 0
73242: PUSH
73243: EMPTY
73244: LIST
73245: LIST
73246: PUSH
73247: LD_INT 1
73249: NEG
73250: PUSH
73251: LD_INT 1
73253: NEG
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PUSH
73259: LD_INT 1
73261: NEG
73262: PUSH
73263: LD_INT 2
73265: NEG
73266: PUSH
73267: EMPTY
73268: LIST
73269: LIST
73270: PUSH
73271: LD_INT 0
73273: PUSH
73274: LD_INT 2
73276: NEG
73277: PUSH
73278: EMPTY
73279: LIST
73280: LIST
73281: PUSH
73282: LD_INT 1
73284: PUSH
73285: LD_INT 1
73287: NEG
73288: PUSH
73289: EMPTY
73290: LIST
73291: LIST
73292: PUSH
73293: LD_INT 2
73295: PUSH
73296: LD_INT 0
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: PUSH
73303: LD_INT 2
73305: PUSH
73306: LD_INT 1
73308: PUSH
73309: EMPTY
73310: LIST
73311: LIST
73312: PUSH
73313: LD_INT 2
73315: PUSH
73316: LD_INT 2
73318: PUSH
73319: EMPTY
73320: LIST
73321: LIST
73322: PUSH
73323: LD_INT 1
73325: PUSH
73326: LD_INT 2
73328: PUSH
73329: EMPTY
73330: LIST
73331: LIST
73332: PUSH
73333: LD_INT 0
73335: PUSH
73336: LD_INT 2
73338: PUSH
73339: EMPTY
73340: LIST
73341: LIST
73342: PUSH
73343: LD_INT 1
73345: NEG
73346: PUSH
73347: LD_INT 1
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 2
73356: NEG
73357: PUSH
73358: LD_INT 0
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 2
73367: NEG
73368: PUSH
73369: LD_INT 1
73371: NEG
73372: PUSH
73373: EMPTY
73374: LIST
73375: LIST
73376: PUSH
73377: LD_INT 2
73379: NEG
73380: PUSH
73381: LD_INT 2
73383: NEG
73384: PUSH
73385: EMPTY
73386: LIST
73387: LIST
73388: PUSH
73389: LD_INT 2
73391: PUSH
73392: LD_INT 3
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 1
73401: PUSH
73402: LD_INT 3
73404: PUSH
73405: EMPTY
73406: LIST
73407: LIST
73408: PUSH
73409: LD_INT 1
73411: NEG
73412: PUSH
73413: LD_INT 2
73415: PUSH
73416: EMPTY
73417: LIST
73418: LIST
73419: PUSH
73420: LD_INT 2
73422: NEG
73423: PUSH
73424: LD_INT 1
73426: PUSH
73427: EMPTY
73428: LIST
73429: LIST
73430: PUSH
73431: EMPTY
73432: LIST
73433: LIST
73434: LIST
73435: LIST
73436: LIST
73437: LIST
73438: LIST
73439: LIST
73440: LIST
73441: LIST
73442: LIST
73443: LIST
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73456: LD_ADDR_VAR 0 27
73460: PUSH
73461: LD_INT 0
73463: PUSH
73464: LD_INT 0
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 0
73473: PUSH
73474: LD_INT 1
73476: NEG
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 1
73484: PUSH
73485: LD_INT 0
73487: PUSH
73488: EMPTY
73489: LIST
73490: LIST
73491: PUSH
73492: LD_INT 1
73494: PUSH
73495: LD_INT 1
73497: PUSH
73498: EMPTY
73499: LIST
73500: LIST
73501: PUSH
73502: LD_INT 0
73504: PUSH
73505: LD_INT 1
73507: PUSH
73508: EMPTY
73509: LIST
73510: LIST
73511: PUSH
73512: LD_INT 1
73514: NEG
73515: PUSH
73516: LD_INT 0
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 1
73525: NEG
73526: PUSH
73527: LD_INT 1
73529: NEG
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 1
73537: NEG
73538: PUSH
73539: LD_INT 2
73541: NEG
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: LD_INT 0
73549: PUSH
73550: LD_INT 2
73552: NEG
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: LD_INT 1
73560: PUSH
73561: LD_INT 1
73563: NEG
73564: PUSH
73565: EMPTY
73566: LIST
73567: LIST
73568: PUSH
73569: LD_INT 2
73571: PUSH
73572: LD_INT 0
73574: PUSH
73575: EMPTY
73576: LIST
73577: LIST
73578: PUSH
73579: LD_INT 2
73581: PUSH
73582: LD_INT 1
73584: PUSH
73585: EMPTY
73586: LIST
73587: LIST
73588: PUSH
73589: LD_INT 2
73591: PUSH
73592: LD_INT 2
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 1
73601: PUSH
73602: LD_INT 2
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 0
73611: PUSH
73612: LD_INT 2
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: LD_INT 1
73621: NEG
73622: PUSH
73623: LD_INT 1
73625: PUSH
73626: EMPTY
73627: LIST
73628: LIST
73629: PUSH
73630: LD_INT 2
73632: NEG
73633: PUSH
73634: LD_INT 0
73636: PUSH
73637: EMPTY
73638: LIST
73639: LIST
73640: PUSH
73641: LD_INT 2
73643: NEG
73644: PUSH
73645: LD_INT 1
73647: NEG
73648: PUSH
73649: EMPTY
73650: LIST
73651: LIST
73652: PUSH
73653: LD_INT 2
73655: NEG
73656: PUSH
73657: LD_INT 2
73659: NEG
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 1
73667: NEG
73668: PUSH
73669: LD_INT 2
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: LD_INT 2
73678: NEG
73679: PUSH
73680: LD_INT 1
73682: PUSH
73683: EMPTY
73684: LIST
73685: LIST
73686: PUSH
73687: LD_INT 3
73689: NEG
73690: PUSH
73691: LD_INT 1
73693: NEG
73694: PUSH
73695: EMPTY
73696: LIST
73697: LIST
73698: PUSH
73699: LD_INT 3
73701: NEG
73702: PUSH
73703: LD_INT 2
73705: NEG
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: PUSH
73711: EMPTY
73712: LIST
73713: LIST
73714: LIST
73715: LIST
73716: LIST
73717: LIST
73718: LIST
73719: LIST
73720: LIST
73721: LIST
73722: LIST
73723: LIST
73724: LIST
73725: LIST
73726: LIST
73727: LIST
73728: LIST
73729: LIST
73730: LIST
73731: LIST
73732: LIST
73733: LIST
73734: LIST
73735: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73736: LD_ADDR_VAR 0 28
73740: PUSH
73741: LD_INT 0
73743: PUSH
73744: LD_INT 0
73746: PUSH
73747: EMPTY
73748: LIST
73749: LIST
73750: PUSH
73751: LD_INT 0
73753: PUSH
73754: LD_INT 1
73756: NEG
73757: PUSH
73758: EMPTY
73759: LIST
73760: LIST
73761: PUSH
73762: LD_INT 1
73764: PUSH
73765: LD_INT 0
73767: PUSH
73768: EMPTY
73769: LIST
73770: LIST
73771: PUSH
73772: LD_INT 1
73774: PUSH
73775: LD_INT 1
73777: PUSH
73778: EMPTY
73779: LIST
73780: LIST
73781: PUSH
73782: LD_INT 0
73784: PUSH
73785: LD_INT 1
73787: PUSH
73788: EMPTY
73789: LIST
73790: LIST
73791: PUSH
73792: LD_INT 1
73794: NEG
73795: PUSH
73796: LD_INT 0
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 1
73805: NEG
73806: PUSH
73807: LD_INT 1
73809: NEG
73810: PUSH
73811: EMPTY
73812: LIST
73813: LIST
73814: PUSH
73815: LD_INT 1
73817: NEG
73818: PUSH
73819: LD_INT 2
73821: NEG
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 0
73829: PUSH
73830: LD_INT 2
73832: NEG
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: LD_INT 1
73840: PUSH
73841: LD_INT 1
73843: NEG
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PUSH
73849: LD_INT 2
73851: PUSH
73852: LD_INT 0
73854: PUSH
73855: EMPTY
73856: LIST
73857: LIST
73858: PUSH
73859: LD_INT 2
73861: PUSH
73862: LD_INT 1
73864: PUSH
73865: EMPTY
73866: LIST
73867: LIST
73868: PUSH
73869: LD_INT 2
73871: PUSH
73872: LD_INT 2
73874: PUSH
73875: EMPTY
73876: LIST
73877: LIST
73878: PUSH
73879: LD_INT 1
73881: PUSH
73882: LD_INT 2
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PUSH
73889: LD_INT 0
73891: PUSH
73892: LD_INT 2
73894: PUSH
73895: EMPTY
73896: LIST
73897: LIST
73898: PUSH
73899: LD_INT 1
73901: NEG
73902: PUSH
73903: LD_INT 1
73905: PUSH
73906: EMPTY
73907: LIST
73908: LIST
73909: PUSH
73910: LD_INT 2
73912: NEG
73913: PUSH
73914: LD_INT 0
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PUSH
73921: LD_INT 2
73923: NEG
73924: PUSH
73925: LD_INT 1
73927: NEG
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PUSH
73933: LD_INT 2
73935: NEG
73936: PUSH
73937: LD_INT 2
73939: NEG
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: LD_INT 2
73947: NEG
73948: PUSH
73949: LD_INT 3
73951: NEG
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PUSH
73957: LD_INT 1
73959: NEG
73960: PUSH
73961: LD_INT 3
73963: NEG
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 3
73971: NEG
73972: PUSH
73973: LD_INT 1
73975: NEG
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: LD_INT 3
73983: NEG
73984: PUSH
73985: LD_INT 2
73987: NEG
73988: PUSH
73989: EMPTY
73990: LIST
73991: LIST
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: LIST
73997: LIST
73998: LIST
73999: LIST
74000: LIST
74001: LIST
74002: LIST
74003: LIST
74004: LIST
74005: LIST
74006: LIST
74007: LIST
74008: LIST
74009: LIST
74010: LIST
74011: LIST
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74018: LD_ADDR_VAR 0 29
74022: PUSH
74023: LD_INT 0
74025: PUSH
74026: LD_INT 0
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: PUSH
74033: LD_INT 0
74035: PUSH
74036: LD_INT 1
74038: NEG
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: LD_INT 1
74046: PUSH
74047: LD_INT 0
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: LD_INT 1
74056: PUSH
74057: LD_INT 1
74059: PUSH
74060: EMPTY
74061: LIST
74062: LIST
74063: PUSH
74064: LD_INT 0
74066: PUSH
74067: LD_INT 1
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PUSH
74074: LD_INT 1
74076: NEG
74077: PUSH
74078: LD_INT 0
74080: PUSH
74081: EMPTY
74082: LIST
74083: LIST
74084: PUSH
74085: LD_INT 1
74087: NEG
74088: PUSH
74089: LD_INT 1
74091: NEG
74092: PUSH
74093: EMPTY
74094: LIST
74095: LIST
74096: PUSH
74097: LD_INT 1
74099: NEG
74100: PUSH
74101: LD_INT 2
74103: NEG
74104: PUSH
74105: EMPTY
74106: LIST
74107: LIST
74108: PUSH
74109: LD_INT 0
74111: PUSH
74112: LD_INT 2
74114: NEG
74115: PUSH
74116: EMPTY
74117: LIST
74118: LIST
74119: PUSH
74120: LD_INT 1
74122: PUSH
74123: LD_INT 1
74125: NEG
74126: PUSH
74127: EMPTY
74128: LIST
74129: LIST
74130: PUSH
74131: LD_INT 2
74133: PUSH
74134: LD_INT 0
74136: PUSH
74137: EMPTY
74138: LIST
74139: LIST
74140: PUSH
74141: LD_INT 2
74143: PUSH
74144: LD_INT 1
74146: PUSH
74147: EMPTY
74148: LIST
74149: LIST
74150: PUSH
74151: LD_INT 1
74153: PUSH
74154: LD_INT 2
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PUSH
74161: LD_INT 0
74163: PUSH
74164: LD_INT 2
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: PUSH
74171: LD_INT 1
74173: NEG
74174: PUSH
74175: LD_INT 1
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: PUSH
74182: LD_INT 2
74184: NEG
74185: PUSH
74186: LD_INT 1
74188: NEG
74189: PUSH
74190: EMPTY
74191: LIST
74192: LIST
74193: PUSH
74194: LD_INT 2
74196: NEG
74197: PUSH
74198: LD_INT 2
74200: NEG
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 2
74208: NEG
74209: PUSH
74210: LD_INT 3
74212: NEG
74213: PUSH
74214: EMPTY
74215: LIST
74216: LIST
74217: PUSH
74218: LD_INT 2
74220: PUSH
74221: LD_INT 1
74223: NEG
74224: PUSH
74225: EMPTY
74226: LIST
74227: LIST
74228: PUSH
74229: LD_INT 3
74231: PUSH
74232: LD_INT 1
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: PUSH
74239: LD_INT 1
74241: PUSH
74242: LD_INT 3
74244: PUSH
74245: EMPTY
74246: LIST
74247: LIST
74248: PUSH
74249: LD_INT 1
74251: NEG
74252: PUSH
74253: LD_INT 2
74255: PUSH
74256: EMPTY
74257: LIST
74258: LIST
74259: PUSH
74260: LD_INT 3
74262: NEG
74263: PUSH
74264: LD_INT 2
74266: NEG
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: PUSH
74272: EMPTY
74273: LIST
74274: LIST
74275: LIST
74276: LIST
74277: LIST
74278: LIST
74279: LIST
74280: LIST
74281: LIST
74282: LIST
74283: LIST
74284: LIST
74285: LIST
74286: LIST
74287: LIST
74288: LIST
74289: LIST
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74297: LD_ADDR_VAR 0 30
74301: PUSH
74302: LD_INT 0
74304: PUSH
74305: LD_INT 0
74307: PUSH
74308: EMPTY
74309: LIST
74310: LIST
74311: PUSH
74312: LD_INT 0
74314: PUSH
74315: LD_INT 1
74317: NEG
74318: PUSH
74319: EMPTY
74320: LIST
74321: LIST
74322: PUSH
74323: LD_INT 1
74325: PUSH
74326: LD_INT 0
74328: PUSH
74329: EMPTY
74330: LIST
74331: LIST
74332: PUSH
74333: LD_INT 1
74335: PUSH
74336: LD_INT 1
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: PUSH
74343: LD_INT 0
74345: PUSH
74346: LD_INT 1
74348: PUSH
74349: EMPTY
74350: LIST
74351: LIST
74352: PUSH
74353: LD_INT 1
74355: NEG
74356: PUSH
74357: LD_INT 0
74359: PUSH
74360: EMPTY
74361: LIST
74362: LIST
74363: PUSH
74364: LD_INT 1
74366: NEG
74367: PUSH
74368: LD_INT 1
74370: NEG
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 1
74378: NEG
74379: PUSH
74380: LD_INT 2
74382: NEG
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: LD_INT 0
74390: PUSH
74391: LD_INT 2
74393: NEG
74394: PUSH
74395: EMPTY
74396: LIST
74397: LIST
74398: PUSH
74399: LD_INT 1
74401: PUSH
74402: LD_INT 1
74404: NEG
74405: PUSH
74406: EMPTY
74407: LIST
74408: LIST
74409: PUSH
74410: LD_INT 2
74412: PUSH
74413: LD_INT 0
74415: PUSH
74416: EMPTY
74417: LIST
74418: LIST
74419: PUSH
74420: LD_INT 2
74422: PUSH
74423: LD_INT 1
74425: PUSH
74426: EMPTY
74427: LIST
74428: LIST
74429: PUSH
74430: LD_INT 2
74432: PUSH
74433: LD_INT 2
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: PUSH
74440: LD_INT 1
74442: PUSH
74443: LD_INT 2
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: PUSH
74450: LD_INT 1
74452: NEG
74453: PUSH
74454: LD_INT 1
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PUSH
74461: LD_INT 2
74463: NEG
74464: PUSH
74465: LD_INT 0
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: PUSH
74472: LD_INT 2
74474: NEG
74475: PUSH
74476: LD_INT 1
74478: NEG
74479: PUSH
74480: EMPTY
74481: LIST
74482: LIST
74483: PUSH
74484: LD_INT 1
74486: NEG
74487: PUSH
74488: LD_INT 3
74490: NEG
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: PUSH
74496: LD_INT 1
74498: PUSH
74499: LD_INT 2
74501: NEG
74502: PUSH
74503: EMPTY
74504: LIST
74505: LIST
74506: PUSH
74507: LD_INT 3
74509: PUSH
74510: LD_INT 2
74512: PUSH
74513: EMPTY
74514: LIST
74515: LIST
74516: PUSH
74517: LD_INT 2
74519: PUSH
74520: LD_INT 3
74522: PUSH
74523: EMPTY
74524: LIST
74525: LIST
74526: PUSH
74527: LD_INT 2
74529: NEG
74530: PUSH
74531: LD_INT 1
74533: PUSH
74534: EMPTY
74535: LIST
74536: LIST
74537: PUSH
74538: LD_INT 3
74540: NEG
74541: PUSH
74542: LD_INT 1
74544: NEG
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PUSH
74550: EMPTY
74551: LIST
74552: LIST
74553: LIST
74554: LIST
74555: LIST
74556: LIST
74557: LIST
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: LIST
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74575: LD_ADDR_VAR 0 31
74579: PUSH
74580: LD_INT 0
74582: PUSH
74583: LD_INT 0
74585: PUSH
74586: EMPTY
74587: LIST
74588: LIST
74589: PUSH
74590: LD_INT 0
74592: PUSH
74593: LD_INT 1
74595: NEG
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: PUSH
74601: LD_INT 1
74603: PUSH
74604: LD_INT 0
74606: PUSH
74607: EMPTY
74608: LIST
74609: LIST
74610: PUSH
74611: LD_INT 1
74613: PUSH
74614: LD_INT 1
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: PUSH
74621: LD_INT 0
74623: PUSH
74624: LD_INT 1
74626: PUSH
74627: EMPTY
74628: LIST
74629: LIST
74630: PUSH
74631: LD_INT 1
74633: NEG
74634: PUSH
74635: LD_INT 0
74637: PUSH
74638: EMPTY
74639: LIST
74640: LIST
74641: PUSH
74642: LD_INT 1
74644: NEG
74645: PUSH
74646: LD_INT 1
74648: NEG
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PUSH
74654: LD_INT 1
74656: NEG
74657: PUSH
74658: LD_INT 2
74660: NEG
74661: PUSH
74662: EMPTY
74663: LIST
74664: LIST
74665: PUSH
74666: LD_INT 1
74668: PUSH
74669: LD_INT 1
74671: NEG
74672: PUSH
74673: EMPTY
74674: LIST
74675: LIST
74676: PUSH
74677: LD_INT 2
74679: PUSH
74680: LD_INT 0
74682: PUSH
74683: EMPTY
74684: LIST
74685: LIST
74686: PUSH
74687: LD_INT 2
74689: PUSH
74690: LD_INT 1
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: LD_INT 2
74699: PUSH
74700: LD_INT 2
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: LD_INT 1
74709: PUSH
74710: LD_INT 2
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PUSH
74717: LD_INT 0
74719: PUSH
74720: LD_INT 2
74722: PUSH
74723: EMPTY
74724: LIST
74725: LIST
74726: PUSH
74727: LD_INT 1
74729: NEG
74730: PUSH
74731: LD_INT 1
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: LD_INT 2
74740: NEG
74741: PUSH
74742: LD_INT 1
74744: NEG
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 2
74752: NEG
74753: PUSH
74754: LD_INT 2
74756: NEG
74757: PUSH
74758: EMPTY
74759: LIST
74760: LIST
74761: PUSH
74762: LD_INT 2
74764: NEG
74765: PUSH
74766: LD_INT 3
74768: NEG
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: LD_INT 2
74776: PUSH
74777: LD_INT 1
74779: NEG
74780: PUSH
74781: EMPTY
74782: LIST
74783: LIST
74784: PUSH
74785: LD_INT 3
74787: PUSH
74788: LD_INT 1
74790: PUSH
74791: EMPTY
74792: LIST
74793: LIST
74794: PUSH
74795: LD_INT 1
74797: PUSH
74798: LD_INT 3
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: LD_INT 1
74807: NEG
74808: PUSH
74809: LD_INT 2
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: PUSH
74816: LD_INT 3
74818: NEG
74819: PUSH
74820: LD_INT 2
74822: NEG
74823: PUSH
74824: EMPTY
74825: LIST
74826: LIST
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: LIST
74832: LIST
74833: LIST
74834: LIST
74835: LIST
74836: LIST
74837: LIST
74838: LIST
74839: LIST
74840: LIST
74841: LIST
74842: LIST
74843: LIST
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74853: LD_ADDR_VAR 0 32
74857: PUSH
74858: LD_INT 0
74860: PUSH
74861: LD_INT 0
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: PUSH
74868: LD_INT 0
74870: PUSH
74871: LD_INT 1
74873: NEG
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PUSH
74879: LD_INT 1
74881: PUSH
74882: LD_INT 0
74884: PUSH
74885: EMPTY
74886: LIST
74887: LIST
74888: PUSH
74889: LD_INT 1
74891: PUSH
74892: LD_INT 1
74894: PUSH
74895: EMPTY
74896: LIST
74897: LIST
74898: PUSH
74899: LD_INT 0
74901: PUSH
74902: LD_INT 1
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: PUSH
74909: LD_INT 1
74911: NEG
74912: PUSH
74913: LD_INT 0
74915: PUSH
74916: EMPTY
74917: LIST
74918: LIST
74919: PUSH
74920: LD_INT 1
74922: NEG
74923: PUSH
74924: LD_INT 1
74926: NEG
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: PUSH
74932: LD_INT 1
74934: NEG
74935: PUSH
74936: LD_INT 2
74938: NEG
74939: PUSH
74940: EMPTY
74941: LIST
74942: LIST
74943: PUSH
74944: LD_INT 0
74946: PUSH
74947: LD_INT 2
74949: NEG
74950: PUSH
74951: EMPTY
74952: LIST
74953: LIST
74954: PUSH
74955: LD_INT 1
74957: PUSH
74958: LD_INT 1
74960: NEG
74961: PUSH
74962: EMPTY
74963: LIST
74964: LIST
74965: PUSH
74966: LD_INT 2
74968: PUSH
74969: LD_INT 1
74971: PUSH
74972: EMPTY
74973: LIST
74974: LIST
74975: PUSH
74976: LD_INT 2
74978: PUSH
74979: LD_INT 2
74981: PUSH
74982: EMPTY
74983: LIST
74984: LIST
74985: PUSH
74986: LD_INT 1
74988: PUSH
74989: LD_INT 2
74991: PUSH
74992: EMPTY
74993: LIST
74994: LIST
74995: PUSH
74996: LD_INT 0
74998: PUSH
74999: LD_INT 2
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PUSH
75006: LD_INT 1
75008: NEG
75009: PUSH
75010: LD_INT 1
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: LD_INT 2
75019: NEG
75020: PUSH
75021: LD_INT 0
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: LD_INT 2
75030: NEG
75031: PUSH
75032: LD_INT 1
75034: NEG
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 1
75042: NEG
75043: PUSH
75044: LD_INT 3
75046: NEG
75047: PUSH
75048: EMPTY
75049: LIST
75050: LIST
75051: PUSH
75052: LD_INT 1
75054: PUSH
75055: LD_INT 2
75057: NEG
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: PUSH
75063: LD_INT 3
75065: PUSH
75066: LD_INT 2
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: PUSH
75073: LD_INT 2
75075: PUSH
75076: LD_INT 3
75078: PUSH
75079: EMPTY
75080: LIST
75081: LIST
75082: PUSH
75083: LD_INT 2
75085: NEG
75086: PUSH
75087: LD_INT 1
75089: PUSH
75090: EMPTY
75091: LIST
75092: LIST
75093: PUSH
75094: LD_INT 3
75096: NEG
75097: PUSH
75098: LD_INT 1
75100: NEG
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: LIST
75110: LIST
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
75131: LD_ADDR_VAR 0 33
75135: PUSH
75136: LD_INT 0
75138: PUSH
75139: LD_INT 0
75141: PUSH
75142: EMPTY
75143: LIST
75144: LIST
75145: PUSH
75146: LD_INT 0
75148: PUSH
75149: LD_INT 1
75151: NEG
75152: PUSH
75153: EMPTY
75154: LIST
75155: LIST
75156: PUSH
75157: LD_INT 1
75159: PUSH
75160: LD_INT 0
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: PUSH
75167: LD_INT 1
75169: PUSH
75170: LD_INT 1
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: PUSH
75177: LD_INT 0
75179: PUSH
75180: LD_INT 1
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: PUSH
75187: LD_INT 1
75189: NEG
75190: PUSH
75191: LD_INT 0
75193: PUSH
75194: EMPTY
75195: LIST
75196: LIST
75197: PUSH
75198: LD_INT 1
75200: NEG
75201: PUSH
75202: LD_INT 1
75204: NEG
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 1
75212: NEG
75213: PUSH
75214: LD_INT 2
75216: NEG
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_INT 1
75224: PUSH
75225: LD_INT 1
75227: NEG
75228: PUSH
75229: EMPTY
75230: LIST
75231: LIST
75232: PUSH
75233: LD_INT 2
75235: PUSH
75236: LD_INT 0
75238: PUSH
75239: EMPTY
75240: LIST
75241: LIST
75242: PUSH
75243: LD_INT 2
75245: PUSH
75246: LD_INT 1
75248: PUSH
75249: EMPTY
75250: LIST
75251: LIST
75252: PUSH
75253: LD_INT 1
75255: PUSH
75256: LD_INT 2
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PUSH
75263: LD_INT 0
75265: PUSH
75266: LD_INT 2
75268: PUSH
75269: EMPTY
75270: LIST
75271: LIST
75272: PUSH
75273: LD_INT 1
75275: NEG
75276: PUSH
75277: LD_INT 1
75279: PUSH
75280: EMPTY
75281: LIST
75282: LIST
75283: PUSH
75284: LD_INT 2
75286: NEG
75287: PUSH
75288: LD_INT 0
75290: PUSH
75291: EMPTY
75292: LIST
75293: LIST
75294: PUSH
75295: LD_INT 2
75297: NEG
75298: PUSH
75299: LD_INT 1
75301: NEG
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: LD_INT 2
75309: NEG
75310: PUSH
75311: LD_INT 2
75313: NEG
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: PUSH
75319: LD_INT 2
75321: NEG
75322: PUSH
75323: LD_INT 3
75325: NEG
75326: PUSH
75327: EMPTY
75328: LIST
75329: LIST
75330: PUSH
75331: LD_INT 2
75333: PUSH
75334: LD_INT 1
75336: NEG
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: LD_INT 3
75344: PUSH
75345: LD_INT 1
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PUSH
75352: LD_INT 1
75354: PUSH
75355: LD_INT 3
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: PUSH
75362: LD_INT 1
75364: NEG
75365: PUSH
75366: LD_INT 2
75368: PUSH
75369: EMPTY
75370: LIST
75371: LIST
75372: PUSH
75373: LD_INT 3
75375: NEG
75376: PUSH
75377: LD_INT 2
75379: NEG
75380: PUSH
75381: EMPTY
75382: LIST
75383: LIST
75384: PUSH
75385: EMPTY
75386: LIST
75387: LIST
75388: LIST
75389: LIST
75390: LIST
75391: LIST
75392: LIST
75393: LIST
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
75410: LD_ADDR_VAR 0 34
75414: PUSH
75415: LD_INT 0
75417: PUSH
75418: LD_INT 0
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: PUSH
75425: LD_INT 0
75427: PUSH
75428: LD_INT 1
75430: NEG
75431: PUSH
75432: EMPTY
75433: LIST
75434: LIST
75435: PUSH
75436: LD_INT 1
75438: PUSH
75439: LD_INT 0
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: LD_INT 1
75448: PUSH
75449: LD_INT 1
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: PUSH
75456: LD_INT 0
75458: PUSH
75459: LD_INT 1
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: PUSH
75466: LD_INT 1
75468: NEG
75469: PUSH
75470: LD_INT 0
75472: PUSH
75473: EMPTY
75474: LIST
75475: LIST
75476: PUSH
75477: LD_INT 1
75479: NEG
75480: PUSH
75481: LD_INT 1
75483: NEG
75484: PUSH
75485: EMPTY
75486: LIST
75487: LIST
75488: PUSH
75489: LD_INT 1
75491: NEG
75492: PUSH
75493: LD_INT 2
75495: NEG
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: PUSH
75501: LD_INT 0
75503: PUSH
75504: LD_INT 2
75506: NEG
75507: PUSH
75508: EMPTY
75509: LIST
75510: LIST
75511: PUSH
75512: LD_INT 1
75514: PUSH
75515: LD_INT 1
75517: NEG
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: PUSH
75523: LD_INT 2
75525: PUSH
75526: LD_INT 1
75528: PUSH
75529: EMPTY
75530: LIST
75531: LIST
75532: PUSH
75533: LD_INT 2
75535: PUSH
75536: LD_INT 2
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: LD_INT 1
75545: PUSH
75546: LD_INT 2
75548: PUSH
75549: EMPTY
75550: LIST
75551: LIST
75552: PUSH
75553: LD_INT 1
75555: NEG
75556: PUSH
75557: LD_INT 1
75559: PUSH
75560: EMPTY
75561: LIST
75562: LIST
75563: PUSH
75564: LD_INT 2
75566: NEG
75567: PUSH
75568: LD_INT 0
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 2
75577: NEG
75578: PUSH
75579: LD_INT 1
75581: NEG
75582: PUSH
75583: EMPTY
75584: LIST
75585: LIST
75586: PUSH
75587: LD_INT 2
75589: NEG
75590: PUSH
75591: LD_INT 2
75593: NEG
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: PUSH
75599: LD_INT 1
75601: NEG
75602: PUSH
75603: LD_INT 3
75605: NEG
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: PUSH
75611: LD_INT 1
75613: PUSH
75614: LD_INT 2
75616: NEG
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PUSH
75622: LD_INT 3
75624: PUSH
75625: LD_INT 2
75627: PUSH
75628: EMPTY
75629: LIST
75630: LIST
75631: PUSH
75632: LD_INT 2
75634: PUSH
75635: LD_INT 3
75637: PUSH
75638: EMPTY
75639: LIST
75640: LIST
75641: PUSH
75642: LD_INT 2
75644: NEG
75645: PUSH
75646: LD_INT 1
75648: PUSH
75649: EMPTY
75650: LIST
75651: LIST
75652: PUSH
75653: LD_INT 3
75655: NEG
75656: PUSH
75657: LD_INT 1
75659: NEG
75660: PUSH
75661: EMPTY
75662: LIST
75663: LIST
75664: PUSH
75665: EMPTY
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: LIST
75671: LIST
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: LIST
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: LIST
75688: LIST
75689: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75690: LD_ADDR_VAR 0 35
75694: PUSH
75695: LD_INT 0
75697: PUSH
75698: LD_INT 0
75700: PUSH
75701: EMPTY
75702: LIST
75703: LIST
75704: PUSH
75705: LD_INT 0
75707: PUSH
75708: LD_INT 1
75710: NEG
75711: PUSH
75712: EMPTY
75713: LIST
75714: LIST
75715: PUSH
75716: LD_INT 1
75718: PUSH
75719: LD_INT 0
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: PUSH
75726: LD_INT 1
75728: PUSH
75729: LD_INT 1
75731: PUSH
75732: EMPTY
75733: LIST
75734: LIST
75735: PUSH
75736: LD_INT 0
75738: PUSH
75739: LD_INT 1
75741: PUSH
75742: EMPTY
75743: LIST
75744: LIST
75745: PUSH
75746: LD_INT 1
75748: NEG
75749: PUSH
75750: LD_INT 0
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: PUSH
75757: LD_INT 1
75759: NEG
75760: PUSH
75761: LD_INT 1
75763: NEG
75764: PUSH
75765: EMPTY
75766: LIST
75767: LIST
75768: PUSH
75769: LD_INT 2
75771: PUSH
75772: LD_INT 1
75774: PUSH
75775: EMPTY
75776: LIST
75777: LIST
75778: PUSH
75779: LD_INT 2
75781: NEG
75782: PUSH
75783: LD_INT 1
75785: NEG
75786: PUSH
75787: EMPTY
75788: LIST
75789: LIST
75790: PUSH
75791: EMPTY
75792: LIST
75793: LIST
75794: LIST
75795: LIST
75796: LIST
75797: LIST
75798: LIST
75799: LIST
75800: LIST
75801: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75802: LD_ADDR_VAR 0 36
75806: PUSH
75807: LD_INT 0
75809: PUSH
75810: LD_INT 0
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PUSH
75817: LD_INT 0
75819: PUSH
75820: LD_INT 1
75822: NEG
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: PUSH
75828: LD_INT 1
75830: PUSH
75831: LD_INT 0
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 1
75840: PUSH
75841: LD_INT 1
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PUSH
75848: LD_INT 0
75850: PUSH
75851: LD_INT 1
75853: PUSH
75854: EMPTY
75855: LIST
75856: LIST
75857: PUSH
75858: LD_INT 1
75860: NEG
75861: PUSH
75862: LD_INT 0
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: PUSH
75869: LD_INT 1
75871: NEG
75872: PUSH
75873: LD_INT 1
75875: NEG
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: PUSH
75881: LD_INT 1
75883: NEG
75884: PUSH
75885: LD_INT 2
75887: NEG
75888: PUSH
75889: EMPTY
75890: LIST
75891: LIST
75892: PUSH
75893: LD_INT 1
75895: PUSH
75896: LD_INT 2
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: PUSH
75903: EMPTY
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75914: LD_ADDR_VAR 0 37
75918: PUSH
75919: LD_INT 0
75921: PUSH
75922: LD_INT 0
75924: PUSH
75925: EMPTY
75926: LIST
75927: LIST
75928: PUSH
75929: LD_INT 0
75931: PUSH
75932: LD_INT 1
75934: NEG
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PUSH
75940: LD_INT 1
75942: PUSH
75943: LD_INT 0
75945: PUSH
75946: EMPTY
75947: LIST
75948: LIST
75949: PUSH
75950: LD_INT 1
75952: PUSH
75953: LD_INT 1
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: PUSH
75960: LD_INT 0
75962: PUSH
75963: LD_INT 1
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: PUSH
75970: LD_INT 1
75972: NEG
75973: PUSH
75974: LD_INT 0
75976: PUSH
75977: EMPTY
75978: LIST
75979: LIST
75980: PUSH
75981: LD_INT 1
75983: NEG
75984: PUSH
75985: LD_INT 1
75987: NEG
75988: PUSH
75989: EMPTY
75990: LIST
75991: LIST
75992: PUSH
75993: LD_INT 1
75995: PUSH
75996: LD_INT 1
75998: NEG
75999: PUSH
76000: EMPTY
76001: LIST
76002: LIST
76003: PUSH
76004: LD_INT 1
76006: NEG
76007: PUSH
76008: LD_INT 1
76010: PUSH
76011: EMPTY
76012: LIST
76013: LIST
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: LIST
76019: LIST
76020: LIST
76021: LIST
76022: LIST
76023: LIST
76024: LIST
76025: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
76026: LD_ADDR_VAR 0 38
76030: PUSH
76031: LD_INT 0
76033: PUSH
76034: LD_INT 0
76036: PUSH
76037: EMPTY
76038: LIST
76039: LIST
76040: PUSH
76041: LD_INT 0
76043: PUSH
76044: LD_INT 1
76046: NEG
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: PUSH
76052: LD_INT 1
76054: PUSH
76055: LD_INT 0
76057: PUSH
76058: EMPTY
76059: LIST
76060: LIST
76061: PUSH
76062: LD_INT 1
76064: PUSH
76065: LD_INT 1
76067: PUSH
76068: EMPTY
76069: LIST
76070: LIST
76071: PUSH
76072: LD_INT 0
76074: PUSH
76075: LD_INT 1
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: PUSH
76082: LD_INT 1
76084: NEG
76085: PUSH
76086: LD_INT 0
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: LD_INT 1
76095: NEG
76096: PUSH
76097: LD_INT 1
76099: NEG
76100: PUSH
76101: EMPTY
76102: LIST
76103: LIST
76104: PUSH
76105: LD_INT 2
76107: PUSH
76108: LD_INT 1
76110: PUSH
76111: EMPTY
76112: LIST
76113: LIST
76114: PUSH
76115: LD_INT 2
76117: NEG
76118: PUSH
76119: LD_INT 1
76121: NEG
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: PUSH
76127: EMPTY
76128: LIST
76129: LIST
76130: LIST
76131: LIST
76132: LIST
76133: LIST
76134: LIST
76135: LIST
76136: LIST
76137: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
76138: LD_ADDR_VAR 0 39
76142: PUSH
76143: LD_INT 0
76145: PUSH
76146: LD_INT 0
76148: PUSH
76149: EMPTY
76150: LIST
76151: LIST
76152: PUSH
76153: LD_INT 0
76155: PUSH
76156: LD_INT 1
76158: NEG
76159: PUSH
76160: EMPTY
76161: LIST
76162: LIST
76163: PUSH
76164: LD_INT 1
76166: PUSH
76167: LD_INT 0
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: PUSH
76174: LD_INT 1
76176: PUSH
76177: LD_INT 1
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: PUSH
76184: LD_INT 0
76186: PUSH
76187: LD_INT 1
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PUSH
76194: LD_INT 1
76196: NEG
76197: PUSH
76198: LD_INT 0
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: LD_INT 1
76207: NEG
76208: PUSH
76209: LD_INT 1
76211: NEG
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: PUSH
76217: LD_INT 1
76219: NEG
76220: PUSH
76221: LD_INT 2
76223: NEG
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PUSH
76229: LD_INT 1
76231: PUSH
76232: LD_INT 2
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: PUSH
76239: EMPTY
76240: LIST
76241: LIST
76242: LIST
76243: LIST
76244: LIST
76245: LIST
76246: LIST
76247: LIST
76248: LIST
76249: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
76250: LD_ADDR_VAR 0 40
76254: PUSH
76255: LD_INT 0
76257: PUSH
76258: LD_INT 0
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: PUSH
76265: LD_INT 0
76267: PUSH
76268: LD_INT 1
76270: NEG
76271: PUSH
76272: EMPTY
76273: LIST
76274: LIST
76275: PUSH
76276: LD_INT 1
76278: PUSH
76279: LD_INT 0
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: PUSH
76286: LD_INT 1
76288: PUSH
76289: LD_INT 1
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 0
76298: PUSH
76299: LD_INT 1
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: LD_INT 1
76308: NEG
76309: PUSH
76310: LD_INT 0
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: LD_INT 1
76319: NEG
76320: PUSH
76321: LD_INT 1
76323: NEG
76324: PUSH
76325: EMPTY
76326: LIST
76327: LIST
76328: PUSH
76329: LD_INT 1
76331: PUSH
76332: LD_INT 1
76334: NEG
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: PUSH
76340: LD_INT 1
76342: NEG
76343: PUSH
76344: LD_INT 1
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: PUSH
76351: EMPTY
76352: LIST
76353: LIST
76354: LIST
76355: LIST
76356: LIST
76357: LIST
76358: LIST
76359: LIST
76360: LIST
76361: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76362: LD_ADDR_VAR 0 41
76366: PUSH
76367: LD_INT 0
76369: PUSH
76370: LD_INT 0
76372: PUSH
76373: EMPTY
76374: LIST
76375: LIST
76376: PUSH
76377: LD_INT 0
76379: PUSH
76380: LD_INT 1
76382: NEG
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: PUSH
76388: LD_INT 1
76390: PUSH
76391: LD_INT 0
76393: PUSH
76394: EMPTY
76395: LIST
76396: LIST
76397: PUSH
76398: LD_INT 1
76400: PUSH
76401: LD_INT 1
76403: PUSH
76404: EMPTY
76405: LIST
76406: LIST
76407: PUSH
76408: LD_INT 0
76410: PUSH
76411: LD_INT 1
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: PUSH
76418: LD_INT 1
76420: NEG
76421: PUSH
76422: LD_INT 0
76424: PUSH
76425: EMPTY
76426: LIST
76427: LIST
76428: PUSH
76429: LD_INT 1
76431: NEG
76432: PUSH
76433: LD_INT 1
76435: NEG
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PUSH
76441: LD_INT 1
76443: NEG
76444: PUSH
76445: LD_INT 2
76447: NEG
76448: PUSH
76449: EMPTY
76450: LIST
76451: LIST
76452: PUSH
76453: LD_INT 1
76455: PUSH
76456: LD_INT 1
76458: NEG
76459: PUSH
76460: EMPTY
76461: LIST
76462: LIST
76463: PUSH
76464: LD_INT 2
76466: PUSH
76467: LD_INT 0
76469: PUSH
76470: EMPTY
76471: LIST
76472: LIST
76473: PUSH
76474: LD_INT 2
76476: PUSH
76477: LD_INT 1
76479: PUSH
76480: EMPTY
76481: LIST
76482: LIST
76483: PUSH
76484: LD_INT 2
76486: PUSH
76487: LD_INT 2
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: PUSH
76494: LD_INT 1
76496: PUSH
76497: LD_INT 2
76499: PUSH
76500: EMPTY
76501: LIST
76502: LIST
76503: PUSH
76504: LD_INT 1
76506: NEG
76507: PUSH
76508: LD_INT 1
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: PUSH
76515: LD_INT 2
76517: NEG
76518: PUSH
76519: LD_INT 0
76521: PUSH
76522: EMPTY
76523: LIST
76524: LIST
76525: PUSH
76526: LD_INT 2
76528: NEG
76529: PUSH
76530: LD_INT 1
76532: NEG
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PUSH
76538: LD_INT 2
76540: NEG
76541: PUSH
76542: LD_INT 2
76544: NEG
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: PUSH
76550: LD_INT 2
76552: NEG
76553: PUSH
76554: LD_INT 3
76556: NEG
76557: PUSH
76558: EMPTY
76559: LIST
76560: LIST
76561: PUSH
76562: LD_INT 2
76564: PUSH
76565: LD_INT 1
76567: NEG
76568: PUSH
76569: EMPTY
76570: LIST
76571: LIST
76572: PUSH
76573: LD_INT 3
76575: PUSH
76576: LD_INT 0
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: PUSH
76583: LD_INT 3
76585: PUSH
76586: LD_INT 1
76588: PUSH
76589: EMPTY
76590: LIST
76591: LIST
76592: PUSH
76593: LD_INT 3
76595: PUSH
76596: LD_INT 2
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: PUSH
76603: LD_INT 3
76605: PUSH
76606: LD_INT 3
76608: PUSH
76609: EMPTY
76610: LIST
76611: LIST
76612: PUSH
76613: LD_INT 2
76615: PUSH
76616: LD_INT 3
76618: PUSH
76619: EMPTY
76620: LIST
76621: LIST
76622: PUSH
76623: LD_INT 2
76625: NEG
76626: PUSH
76627: LD_INT 1
76629: PUSH
76630: EMPTY
76631: LIST
76632: LIST
76633: PUSH
76634: LD_INT 3
76636: NEG
76637: PUSH
76638: LD_INT 0
76640: PUSH
76641: EMPTY
76642: LIST
76643: LIST
76644: PUSH
76645: LD_INT 3
76647: NEG
76648: PUSH
76649: LD_INT 1
76651: NEG
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: LD_INT 3
76659: NEG
76660: PUSH
76661: LD_INT 2
76663: NEG
76664: PUSH
76665: EMPTY
76666: LIST
76667: LIST
76668: PUSH
76669: LD_INT 3
76671: NEG
76672: PUSH
76673: LD_INT 3
76675: NEG
76676: PUSH
76677: EMPTY
76678: LIST
76679: LIST
76680: PUSH
76681: EMPTY
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: LIST
76692: LIST
76693: LIST
76694: LIST
76695: LIST
76696: LIST
76697: LIST
76698: LIST
76699: LIST
76700: LIST
76701: LIST
76702: LIST
76703: LIST
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: LIST
76709: LIST
76710: LIST
76711: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76712: LD_ADDR_VAR 0 42
76716: PUSH
76717: LD_INT 0
76719: PUSH
76720: LD_INT 0
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: PUSH
76727: LD_INT 0
76729: PUSH
76730: LD_INT 1
76732: NEG
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: LD_INT 1
76740: PUSH
76741: LD_INT 0
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: PUSH
76748: LD_INT 1
76750: PUSH
76751: LD_INT 1
76753: PUSH
76754: EMPTY
76755: LIST
76756: LIST
76757: PUSH
76758: LD_INT 0
76760: PUSH
76761: LD_INT 1
76763: PUSH
76764: EMPTY
76765: LIST
76766: LIST
76767: PUSH
76768: LD_INT 1
76770: NEG
76771: PUSH
76772: LD_INT 0
76774: PUSH
76775: EMPTY
76776: LIST
76777: LIST
76778: PUSH
76779: LD_INT 1
76781: NEG
76782: PUSH
76783: LD_INT 1
76785: NEG
76786: PUSH
76787: EMPTY
76788: LIST
76789: LIST
76790: PUSH
76791: LD_INT 1
76793: NEG
76794: PUSH
76795: LD_INT 2
76797: NEG
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: PUSH
76803: LD_INT 0
76805: PUSH
76806: LD_INT 2
76808: NEG
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PUSH
76814: LD_INT 1
76816: PUSH
76817: LD_INT 1
76819: NEG
76820: PUSH
76821: EMPTY
76822: LIST
76823: LIST
76824: PUSH
76825: LD_INT 2
76827: PUSH
76828: LD_INT 1
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PUSH
76835: LD_INT 2
76837: PUSH
76838: LD_INT 2
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: PUSH
76845: LD_INT 1
76847: PUSH
76848: LD_INT 2
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: PUSH
76855: LD_INT 0
76857: PUSH
76858: LD_INT 2
76860: PUSH
76861: EMPTY
76862: LIST
76863: LIST
76864: PUSH
76865: LD_INT 1
76867: NEG
76868: PUSH
76869: LD_INT 1
76871: PUSH
76872: EMPTY
76873: LIST
76874: LIST
76875: PUSH
76876: LD_INT 2
76878: NEG
76879: PUSH
76880: LD_INT 1
76882: NEG
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 2
76890: NEG
76891: PUSH
76892: LD_INT 2
76894: NEG
76895: PUSH
76896: EMPTY
76897: LIST
76898: LIST
76899: PUSH
76900: LD_INT 2
76902: NEG
76903: PUSH
76904: LD_INT 3
76906: NEG
76907: PUSH
76908: EMPTY
76909: LIST
76910: LIST
76911: PUSH
76912: LD_INT 1
76914: NEG
76915: PUSH
76916: LD_INT 3
76918: NEG
76919: PUSH
76920: EMPTY
76921: LIST
76922: LIST
76923: PUSH
76924: LD_INT 0
76926: PUSH
76927: LD_INT 3
76929: NEG
76930: PUSH
76931: EMPTY
76932: LIST
76933: LIST
76934: PUSH
76935: LD_INT 1
76937: PUSH
76938: LD_INT 2
76940: NEG
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: PUSH
76946: LD_INT 3
76948: PUSH
76949: LD_INT 2
76951: PUSH
76952: EMPTY
76953: LIST
76954: LIST
76955: PUSH
76956: LD_INT 3
76958: PUSH
76959: LD_INT 3
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: PUSH
76966: LD_INT 2
76968: PUSH
76969: LD_INT 3
76971: PUSH
76972: EMPTY
76973: LIST
76974: LIST
76975: PUSH
76976: LD_INT 1
76978: PUSH
76979: LD_INT 3
76981: PUSH
76982: EMPTY
76983: LIST
76984: LIST
76985: PUSH
76986: LD_INT 0
76988: PUSH
76989: LD_INT 3
76991: PUSH
76992: EMPTY
76993: LIST
76994: LIST
76995: PUSH
76996: LD_INT 1
76998: NEG
76999: PUSH
77000: LD_INT 2
77002: PUSH
77003: EMPTY
77004: LIST
77005: LIST
77006: PUSH
77007: LD_INT 3
77009: NEG
77010: PUSH
77011: LD_INT 2
77013: NEG
77014: PUSH
77015: EMPTY
77016: LIST
77017: LIST
77018: PUSH
77019: LD_INT 3
77021: NEG
77022: PUSH
77023: LD_INT 3
77025: NEG
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: PUSH
77031: EMPTY
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: LIST
77037: LIST
77038: LIST
77039: LIST
77040: LIST
77041: LIST
77042: LIST
77043: LIST
77044: LIST
77045: LIST
77046: LIST
77047: LIST
77048: LIST
77049: LIST
77050: LIST
77051: LIST
77052: LIST
77053: LIST
77054: LIST
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: LIST
77060: LIST
77061: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77062: LD_ADDR_VAR 0 43
77066: PUSH
77067: LD_INT 0
77069: PUSH
77070: LD_INT 0
77072: PUSH
77073: EMPTY
77074: LIST
77075: LIST
77076: PUSH
77077: LD_INT 0
77079: PUSH
77080: LD_INT 1
77082: NEG
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PUSH
77088: LD_INT 1
77090: PUSH
77091: LD_INT 0
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PUSH
77098: LD_INT 1
77100: PUSH
77101: LD_INT 1
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: PUSH
77108: LD_INT 0
77110: PUSH
77111: LD_INT 1
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: PUSH
77118: LD_INT 1
77120: NEG
77121: PUSH
77122: LD_INT 0
77124: PUSH
77125: EMPTY
77126: LIST
77127: LIST
77128: PUSH
77129: LD_INT 1
77131: NEG
77132: PUSH
77133: LD_INT 1
77135: NEG
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: PUSH
77141: LD_INT 1
77143: NEG
77144: PUSH
77145: LD_INT 2
77147: NEG
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: PUSH
77153: LD_INT 0
77155: PUSH
77156: LD_INT 2
77158: NEG
77159: PUSH
77160: EMPTY
77161: LIST
77162: LIST
77163: PUSH
77164: LD_INT 1
77166: PUSH
77167: LD_INT 1
77169: NEG
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: PUSH
77175: LD_INT 2
77177: PUSH
77178: LD_INT 0
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: PUSH
77185: LD_INT 2
77187: PUSH
77188: LD_INT 1
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: PUSH
77195: LD_INT 1
77197: PUSH
77198: LD_INT 2
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: PUSH
77205: LD_INT 0
77207: PUSH
77208: LD_INT 2
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: PUSH
77215: LD_INT 1
77217: NEG
77218: PUSH
77219: LD_INT 1
77221: PUSH
77222: EMPTY
77223: LIST
77224: LIST
77225: PUSH
77226: LD_INT 2
77228: NEG
77229: PUSH
77230: LD_INT 0
77232: PUSH
77233: EMPTY
77234: LIST
77235: LIST
77236: PUSH
77237: LD_INT 2
77239: NEG
77240: PUSH
77241: LD_INT 1
77243: NEG
77244: PUSH
77245: EMPTY
77246: LIST
77247: LIST
77248: PUSH
77249: LD_INT 1
77251: NEG
77252: PUSH
77253: LD_INT 3
77255: NEG
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: PUSH
77261: LD_INT 0
77263: PUSH
77264: LD_INT 3
77266: NEG
77267: PUSH
77268: EMPTY
77269: LIST
77270: LIST
77271: PUSH
77272: LD_INT 1
77274: PUSH
77275: LD_INT 2
77277: NEG
77278: PUSH
77279: EMPTY
77280: LIST
77281: LIST
77282: PUSH
77283: LD_INT 2
77285: PUSH
77286: LD_INT 1
77288: NEG
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: PUSH
77294: LD_INT 3
77296: PUSH
77297: LD_INT 0
77299: PUSH
77300: EMPTY
77301: LIST
77302: LIST
77303: PUSH
77304: LD_INT 3
77306: PUSH
77307: LD_INT 1
77309: PUSH
77310: EMPTY
77311: LIST
77312: LIST
77313: PUSH
77314: LD_INT 1
77316: PUSH
77317: LD_INT 3
77319: PUSH
77320: EMPTY
77321: LIST
77322: LIST
77323: PUSH
77324: LD_INT 0
77326: PUSH
77327: LD_INT 3
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: PUSH
77334: LD_INT 1
77336: NEG
77337: PUSH
77338: LD_INT 2
77340: PUSH
77341: EMPTY
77342: LIST
77343: LIST
77344: PUSH
77345: LD_INT 2
77347: NEG
77348: PUSH
77349: LD_INT 1
77351: PUSH
77352: EMPTY
77353: LIST
77354: LIST
77355: PUSH
77356: LD_INT 3
77358: NEG
77359: PUSH
77360: LD_INT 0
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 3
77369: NEG
77370: PUSH
77371: LD_INT 1
77373: NEG
77374: PUSH
77375: EMPTY
77376: LIST
77377: LIST
77378: PUSH
77379: EMPTY
77380: LIST
77381: LIST
77382: LIST
77383: LIST
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: LIST
77391: LIST
77392: LIST
77393: LIST
77394: LIST
77395: LIST
77396: LIST
77397: LIST
77398: LIST
77399: LIST
77400: LIST
77401: LIST
77402: LIST
77403: LIST
77404: LIST
77405: LIST
77406: LIST
77407: LIST
77408: LIST
77409: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77410: LD_ADDR_VAR 0 44
77414: PUSH
77415: LD_INT 0
77417: PUSH
77418: LD_INT 0
77420: PUSH
77421: EMPTY
77422: LIST
77423: LIST
77424: PUSH
77425: LD_INT 0
77427: PUSH
77428: LD_INT 1
77430: NEG
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: PUSH
77436: LD_INT 1
77438: PUSH
77439: LD_INT 0
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: PUSH
77446: LD_INT 1
77448: PUSH
77449: LD_INT 1
77451: PUSH
77452: EMPTY
77453: LIST
77454: LIST
77455: PUSH
77456: LD_INT 0
77458: PUSH
77459: LD_INT 1
77461: PUSH
77462: EMPTY
77463: LIST
77464: LIST
77465: PUSH
77466: LD_INT 1
77468: NEG
77469: PUSH
77470: LD_INT 0
77472: PUSH
77473: EMPTY
77474: LIST
77475: LIST
77476: PUSH
77477: LD_INT 1
77479: NEG
77480: PUSH
77481: LD_INT 1
77483: NEG
77484: PUSH
77485: EMPTY
77486: LIST
77487: LIST
77488: PUSH
77489: LD_INT 1
77491: NEG
77492: PUSH
77493: LD_INT 2
77495: NEG
77496: PUSH
77497: EMPTY
77498: LIST
77499: LIST
77500: PUSH
77501: LD_INT 1
77503: PUSH
77504: LD_INT 1
77506: NEG
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PUSH
77512: LD_INT 2
77514: PUSH
77515: LD_INT 0
77517: PUSH
77518: EMPTY
77519: LIST
77520: LIST
77521: PUSH
77522: LD_INT 2
77524: PUSH
77525: LD_INT 1
77527: PUSH
77528: EMPTY
77529: LIST
77530: LIST
77531: PUSH
77532: LD_INT 2
77534: PUSH
77535: LD_INT 2
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PUSH
77542: LD_INT 1
77544: PUSH
77545: LD_INT 2
77547: PUSH
77548: EMPTY
77549: LIST
77550: LIST
77551: PUSH
77552: LD_INT 1
77554: NEG
77555: PUSH
77556: LD_INT 1
77558: PUSH
77559: EMPTY
77560: LIST
77561: LIST
77562: PUSH
77563: LD_INT 2
77565: NEG
77566: PUSH
77567: LD_INT 0
77569: PUSH
77570: EMPTY
77571: LIST
77572: LIST
77573: PUSH
77574: LD_INT 2
77576: NEG
77577: PUSH
77578: LD_INT 1
77580: NEG
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: PUSH
77586: LD_INT 2
77588: NEG
77589: PUSH
77590: LD_INT 2
77592: NEG
77593: PUSH
77594: EMPTY
77595: LIST
77596: LIST
77597: PUSH
77598: LD_INT 2
77600: NEG
77601: PUSH
77602: LD_INT 3
77604: NEG
77605: PUSH
77606: EMPTY
77607: LIST
77608: LIST
77609: PUSH
77610: LD_INT 2
77612: PUSH
77613: LD_INT 1
77615: NEG
77616: PUSH
77617: EMPTY
77618: LIST
77619: LIST
77620: PUSH
77621: LD_INT 3
77623: PUSH
77624: LD_INT 0
77626: PUSH
77627: EMPTY
77628: LIST
77629: LIST
77630: PUSH
77631: LD_INT 3
77633: PUSH
77634: LD_INT 1
77636: PUSH
77637: EMPTY
77638: LIST
77639: LIST
77640: PUSH
77641: LD_INT 3
77643: PUSH
77644: LD_INT 2
77646: PUSH
77647: EMPTY
77648: LIST
77649: LIST
77650: PUSH
77651: LD_INT 3
77653: PUSH
77654: LD_INT 3
77656: PUSH
77657: EMPTY
77658: LIST
77659: LIST
77660: PUSH
77661: LD_INT 2
77663: PUSH
77664: LD_INT 3
77666: PUSH
77667: EMPTY
77668: LIST
77669: LIST
77670: PUSH
77671: LD_INT 2
77673: NEG
77674: PUSH
77675: LD_INT 1
77677: PUSH
77678: EMPTY
77679: LIST
77680: LIST
77681: PUSH
77682: LD_INT 3
77684: NEG
77685: PUSH
77686: LD_INT 0
77688: PUSH
77689: EMPTY
77690: LIST
77691: LIST
77692: PUSH
77693: LD_INT 3
77695: NEG
77696: PUSH
77697: LD_INT 1
77699: NEG
77700: PUSH
77701: EMPTY
77702: LIST
77703: LIST
77704: PUSH
77705: LD_INT 3
77707: NEG
77708: PUSH
77709: LD_INT 2
77711: NEG
77712: PUSH
77713: EMPTY
77714: LIST
77715: LIST
77716: PUSH
77717: LD_INT 3
77719: NEG
77720: PUSH
77721: LD_INT 3
77723: NEG
77724: PUSH
77725: EMPTY
77726: LIST
77727: LIST
77728: PUSH
77729: EMPTY
77730: LIST
77731: LIST
77732: LIST
77733: LIST
77734: LIST
77735: LIST
77736: LIST
77737: LIST
77738: LIST
77739: LIST
77740: LIST
77741: LIST
77742: LIST
77743: LIST
77744: LIST
77745: LIST
77746: LIST
77747: LIST
77748: LIST
77749: LIST
77750: LIST
77751: LIST
77752: LIST
77753: LIST
77754: LIST
77755: LIST
77756: LIST
77757: LIST
77758: LIST
77759: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77760: LD_ADDR_VAR 0 45
77764: PUSH
77765: LD_INT 0
77767: PUSH
77768: LD_INT 0
77770: PUSH
77771: EMPTY
77772: LIST
77773: LIST
77774: PUSH
77775: LD_INT 0
77777: PUSH
77778: LD_INT 1
77780: NEG
77781: PUSH
77782: EMPTY
77783: LIST
77784: LIST
77785: PUSH
77786: LD_INT 1
77788: PUSH
77789: LD_INT 0
77791: PUSH
77792: EMPTY
77793: LIST
77794: LIST
77795: PUSH
77796: LD_INT 1
77798: PUSH
77799: LD_INT 1
77801: PUSH
77802: EMPTY
77803: LIST
77804: LIST
77805: PUSH
77806: LD_INT 0
77808: PUSH
77809: LD_INT 1
77811: PUSH
77812: EMPTY
77813: LIST
77814: LIST
77815: PUSH
77816: LD_INT 1
77818: NEG
77819: PUSH
77820: LD_INT 0
77822: PUSH
77823: EMPTY
77824: LIST
77825: LIST
77826: PUSH
77827: LD_INT 1
77829: NEG
77830: PUSH
77831: LD_INT 1
77833: NEG
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: PUSH
77839: LD_INT 1
77841: NEG
77842: PUSH
77843: LD_INT 2
77845: NEG
77846: PUSH
77847: EMPTY
77848: LIST
77849: LIST
77850: PUSH
77851: LD_INT 0
77853: PUSH
77854: LD_INT 2
77856: NEG
77857: PUSH
77858: EMPTY
77859: LIST
77860: LIST
77861: PUSH
77862: LD_INT 1
77864: PUSH
77865: LD_INT 1
77867: NEG
77868: PUSH
77869: EMPTY
77870: LIST
77871: LIST
77872: PUSH
77873: LD_INT 2
77875: PUSH
77876: LD_INT 1
77878: PUSH
77879: EMPTY
77880: LIST
77881: LIST
77882: PUSH
77883: LD_INT 2
77885: PUSH
77886: LD_INT 2
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PUSH
77893: LD_INT 1
77895: PUSH
77896: LD_INT 2
77898: PUSH
77899: EMPTY
77900: LIST
77901: LIST
77902: PUSH
77903: LD_INT 0
77905: PUSH
77906: LD_INT 2
77908: PUSH
77909: EMPTY
77910: LIST
77911: LIST
77912: PUSH
77913: LD_INT 1
77915: NEG
77916: PUSH
77917: LD_INT 1
77919: PUSH
77920: EMPTY
77921: LIST
77922: LIST
77923: PUSH
77924: LD_INT 2
77926: NEG
77927: PUSH
77928: LD_INT 1
77930: NEG
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 2
77938: NEG
77939: PUSH
77940: LD_INT 2
77942: NEG
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: PUSH
77948: LD_INT 2
77950: NEG
77951: PUSH
77952: LD_INT 3
77954: NEG
77955: PUSH
77956: EMPTY
77957: LIST
77958: LIST
77959: PUSH
77960: LD_INT 1
77962: NEG
77963: PUSH
77964: LD_INT 3
77966: NEG
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: PUSH
77972: LD_INT 0
77974: PUSH
77975: LD_INT 3
77977: NEG
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: LD_INT 1
77985: PUSH
77986: LD_INT 2
77988: NEG
77989: PUSH
77990: EMPTY
77991: LIST
77992: LIST
77993: PUSH
77994: LD_INT 3
77996: PUSH
77997: LD_INT 2
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: PUSH
78004: LD_INT 3
78006: PUSH
78007: LD_INT 3
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: PUSH
78014: LD_INT 2
78016: PUSH
78017: LD_INT 3
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: PUSH
78024: LD_INT 1
78026: PUSH
78027: LD_INT 3
78029: PUSH
78030: EMPTY
78031: LIST
78032: LIST
78033: PUSH
78034: LD_INT 0
78036: PUSH
78037: LD_INT 3
78039: PUSH
78040: EMPTY
78041: LIST
78042: LIST
78043: PUSH
78044: LD_INT 1
78046: NEG
78047: PUSH
78048: LD_INT 2
78050: PUSH
78051: EMPTY
78052: LIST
78053: LIST
78054: PUSH
78055: LD_INT 3
78057: NEG
78058: PUSH
78059: LD_INT 2
78061: NEG
78062: PUSH
78063: EMPTY
78064: LIST
78065: LIST
78066: PUSH
78067: LD_INT 3
78069: NEG
78070: PUSH
78071: LD_INT 3
78073: NEG
78074: PUSH
78075: EMPTY
78076: LIST
78077: LIST
78078: PUSH
78079: EMPTY
78080: LIST
78081: LIST
78082: LIST
78083: LIST
78084: LIST
78085: LIST
78086: LIST
78087: LIST
78088: LIST
78089: LIST
78090: LIST
78091: LIST
78092: LIST
78093: LIST
78094: LIST
78095: LIST
78096: LIST
78097: LIST
78098: LIST
78099: LIST
78100: LIST
78101: LIST
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: LIST
78109: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78110: LD_ADDR_VAR 0 46
78114: PUSH
78115: LD_INT 0
78117: PUSH
78118: LD_INT 0
78120: PUSH
78121: EMPTY
78122: LIST
78123: LIST
78124: PUSH
78125: LD_INT 0
78127: PUSH
78128: LD_INT 1
78130: NEG
78131: PUSH
78132: EMPTY
78133: LIST
78134: LIST
78135: PUSH
78136: LD_INT 1
78138: PUSH
78139: LD_INT 0
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: PUSH
78146: LD_INT 1
78148: PUSH
78149: LD_INT 1
78151: PUSH
78152: EMPTY
78153: LIST
78154: LIST
78155: PUSH
78156: LD_INT 0
78158: PUSH
78159: LD_INT 1
78161: PUSH
78162: EMPTY
78163: LIST
78164: LIST
78165: PUSH
78166: LD_INT 1
78168: NEG
78169: PUSH
78170: LD_INT 0
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: PUSH
78177: LD_INT 1
78179: NEG
78180: PUSH
78181: LD_INT 1
78183: NEG
78184: PUSH
78185: EMPTY
78186: LIST
78187: LIST
78188: PUSH
78189: LD_INT 1
78191: NEG
78192: PUSH
78193: LD_INT 2
78195: NEG
78196: PUSH
78197: EMPTY
78198: LIST
78199: LIST
78200: PUSH
78201: LD_INT 0
78203: PUSH
78204: LD_INT 2
78206: NEG
78207: PUSH
78208: EMPTY
78209: LIST
78210: LIST
78211: PUSH
78212: LD_INT 1
78214: PUSH
78215: LD_INT 1
78217: NEG
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: PUSH
78223: LD_INT 2
78225: PUSH
78226: LD_INT 0
78228: PUSH
78229: EMPTY
78230: LIST
78231: LIST
78232: PUSH
78233: LD_INT 2
78235: PUSH
78236: LD_INT 1
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: PUSH
78243: LD_INT 1
78245: PUSH
78246: LD_INT 2
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: PUSH
78253: LD_INT 0
78255: PUSH
78256: LD_INT 2
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: PUSH
78263: LD_INT 1
78265: NEG
78266: PUSH
78267: LD_INT 1
78269: PUSH
78270: EMPTY
78271: LIST
78272: LIST
78273: PUSH
78274: LD_INT 2
78276: NEG
78277: PUSH
78278: LD_INT 0
78280: PUSH
78281: EMPTY
78282: LIST
78283: LIST
78284: PUSH
78285: LD_INT 2
78287: NEG
78288: PUSH
78289: LD_INT 1
78291: NEG
78292: PUSH
78293: EMPTY
78294: LIST
78295: LIST
78296: PUSH
78297: LD_INT 1
78299: NEG
78300: PUSH
78301: LD_INT 3
78303: NEG
78304: PUSH
78305: EMPTY
78306: LIST
78307: LIST
78308: PUSH
78309: LD_INT 0
78311: PUSH
78312: LD_INT 3
78314: NEG
78315: PUSH
78316: EMPTY
78317: LIST
78318: LIST
78319: PUSH
78320: LD_INT 1
78322: PUSH
78323: LD_INT 2
78325: NEG
78326: PUSH
78327: EMPTY
78328: LIST
78329: LIST
78330: PUSH
78331: LD_INT 2
78333: PUSH
78334: LD_INT 1
78336: NEG
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: PUSH
78342: LD_INT 3
78344: PUSH
78345: LD_INT 0
78347: PUSH
78348: EMPTY
78349: LIST
78350: LIST
78351: PUSH
78352: LD_INT 3
78354: PUSH
78355: LD_INT 1
78357: PUSH
78358: EMPTY
78359: LIST
78360: LIST
78361: PUSH
78362: LD_INT 1
78364: PUSH
78365: LD_INT 3
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: PUSH
78372: LD_INT 0
78374: PUSH
78375: LD_INT 3
78377: PUSH
78378: EMPTY
78379: LIST
78380: LIST
78381: PUSH
78382: LD_INT 1
78384: NEG
78385: PUSH
78386: LD_INT 2
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: PUSH
78393: LD_INT 2
78395: NEG
78396: PUSH
78397: LD_INT 1
78399: PUSH
78400: EMPTY
78401: LIST
78402: LIST
78403: PUSH
78404: LD_INT 3
78406: NEG
78407: PUSH
78408: LD_INT 0
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: PUSH
78415: LD_INT 3
78417: NEG
78418: PUSH
78419: LD_INT 1
78421: NEG
78422: PUSH
78423: EMPTY
78424: LIST
78425: LIST
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: LIST
78431: LIST
78432: LIST
78433: LIST
78434: LIST
78435: LIST
78436: LIST
78437: LIST
78438: LIST
78439: LIST
78440: LIST
78441: LIST
78442: LIST
78443: LIST
78444: LIST
78445: LIST
78446: LIST
78447: LIST
78448: LIST
78449: LIST
78450: LIST
78451: LIST
78452: LIST
78453: LIST
78454: LIST
78455: LIST
78456: LIST
78457: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78458: LD_ADDR_VAR 0 47
78462: PUSH
78463: LD_INT 0
78465: PUSH
78466: LD_INT 0
78468: PUSH
78469: EMPTY
78470: LIST
78471: LIST
78472: PUSH
78473: LD_INT 0
78475: PUSH
78476: LD_INT 1
78478: NEG
78479: PUSH
78480: EMPTY
78481: LIST
78482: LIST
78483: PUSH
78484: LD_INT 1
78486: PUSH
78487: LD_INT 0
78489: PUSH
78490: EMPTY
78491: LIST
78492: LIST
78493: PUSH
78494: LD_INT 1
78496: PUSH
78497: LD_INT 1
78499: PUSH
78500: EMPTY
78501: LIST
78502: LIST
78503: PUSH
78504: LD_INT 0
78506: PUSH
78507: LD_INT 1
78509: PUSH
78510: EMPTY
78511: LIST
78512: LIST
78513: PUSH
78514: LD_INT 1
78516: NEG
78517: PUSH
78518: LD_INT 0
78520: PUSH
78521: EMPTY
78522: LIST
78523: LIST
78524: PUSH
78525: LD_INT 1
78527: NEG
78528: PUSH
78529: LD_INT 1
78531: NEG
78532: PUSH
78533: EMPTY
78534: LIST
78535: LIST
78536: PUSH
78537: LD_INT 1
78539: NEG
78540: PUSH
78541: LD_INT 2
78543: NEG
78544: PUSH
78545: EMPTY
78546: LIST
78547: LIST
78548: PUSH
78549: LD_INT 0
78551: PUSH
78552: LD_INT 2
78554: NEG
78555: PUSH
78556: EMPTY
78557: LIST
78558: LIST
78559: PUSH
78560: LD_INT 1
78562: PUSH
78563: LD_INT 1
78565: NEG
78566: PUSH
78567: EMPTY
78568: LIST
78569: LIST
78570: PUSH
78571: LD_INT 2
78573: NEG
78574: PUSH
78575: LD_INT 1
78577: NEG
78578: PUSH
78579: EMPTY
78580: LIST
78581: LIST
78582: PUSH
78583: LD_INT 2
78585: NEG
78586: PUSH
78587: LD_INT 2
78589: NEG
78590: PUSH
78591: EMPTY
78592: LIST
78593: LIST
78594: PUSH
78595: EMPTY
78596: LIST
78597: LIST
78598: LIST
78599: LIST
78600: LIST
78601: LIST
78602: LIST
78603: LIST
78604: LIST
78605: LIST
78606: LIST
78607: LIST
78608: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78609: LD_ADDR_VAR 0 48
78613: PUSH
78614: LD_INT 0
78616: PUSH
78617: LD_INT 0
78619: PUSH
78620: EMPTY
78621: LIST
78622: LIST
78623: PUSH
78624: LD_INT 0
78626: PUSH
78627: LD_INT 1
78629: NEG
78630: PUSH
78631: EMPTY
78632: LIST
78633: LIST
78634: PUSH
78635: LD_INT 1
78637: PUSH
78638: LD_INT 0
78640: PUSH
78641: EMPTY
78642: LIST
78643: LIST
78644: PUSH
78645: LD_INT 1
78647: PUSH
78648: LD_INT 1
78650: PUSH
78651: EMPTY
78652: LIST
78653: LIST
78654: PUSH
78655: LD_INT 0
78657: PUSH
78658: LD_INT 1
78660: PUSH
78661: EMPTY
78662: LIST
78663: LIST
78664: PUSH
78665: LD_INT 1
78667: NEG
78668: PUSH
78669: LD_INT 0
78671: PUSH
78672: EMPTY
78673: LIST
78674: LIST
78675: PUSH
78676: LD_INT 1
78678: NEG
78679: PUSH
78680: LD_INT 1
78682: NEG
78683: PUSH
78684: EMPTY
78685: LIST
78686: LIST
78687: PUSH
78688: LD_INT 1
78690: NEG
78691: PUSH
78692: LD_INT 2
78694: NEG
78695: PUSH
78696: EMPTY
78697: LIST
78698: LIST
78699: PUSH
78700: LD_INT 0
78702: PUSH
78703: LD_INT 2
78705: NEG
78706: PUSH
78707: EMPTY
78708: LIST
78709: LIST
78710: PUSH
78711: LD_INT 1
78713: PUSH
78714: LD_INT 1
78716: NEG
78717: PUSH
78718: EMPTY
78719: LIST
78720: LIST
78721: PUSH
78722: LD_INT 2
78724: PUSH
78725: LD_INT 0
78727: PUSH
78728: EMPTY
78729: LIST
78730: LIST
78731: PUSH
78732: LD_INT 2
78734: PUSH
78735: LD_INT 1
78737: PUSH
78738: EMPTY
78739: LIST
78740: LIST
78741: PUSH
78742: EMPTY
78743: LIST
78744: LIST
78745: LIST
78746: LIST
78747: LIST
78748: LIST
78749: LIST
78750: LIST
78751: LIST
78752: LIST
78753: LIST
78754: LIST
78755: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78756: LD_ADDR_VAR 0 49
78760: PUSH
78761: LD_INT 0
78763: PUSH
78764: LD_INT 0
78766: PUSH
78767: EMPTY
78768: LIST
78769: LIST
78770: PUSH
78771: LD_INT 0
78773: PUSH
78774: LD_INT 1
78776: NEG
78777: PUSH
78778: EMPTY
78779: LIST
78780: LIST
78781: PUSH
78782: LD_INT 1
78784: PUSH
78785: LD_INT 0
78787: PUSH
78788: EMPTY
78789: LIST
78790: LIST
78791: PUSH
78792: LD_INT 1
78794: PUSH
78795: LD_INT 1
78797: PUSH
78798: EMPTY
78799: LIST
78800: LIST
78801: PUSH
78802: LD_INT 0
78804: PUSH
78805: LD_INT 1
78807: PUSH
78808: EMPTY
78809: LIST
78810: LIST
78811: PUSH
78812: LD_INT 1
78814: NEG
78815: PUSH
78816: LD_INT 0
78818: PUSH
78819: EMPTY
78820: LIST
78821: LIST
78822: PUSH
78823: LD_INT 1
78825: NEG
78826: PUSH
78827: LD_INT 1
78829: NEG
78830: PUSH
78831: EMPTY
78832: LIST
78833: LIST
78834: PUSH
78835: LD_INT 1
78837: PUSH
78838: LD_INT 1
78840: NEG
78841: PUSH
78842: EMPTY
78843: LIST
78844: LIST
78845: PUSH
78846: LD_INT 2
78848: PUSH
78849: LD_INT 0
78851: PUSH
78852: EMPTY
78853: LIST
78854: LIST
78855: PUSH
78856: LD_INT 2
78858: PUSH
78859: LD_INT 1
78861: PUSH
78862: EMPTY
78863: LIST
78864: LIST
78865: PUSH
78866: LD_INT 2
78868: PUSH
78869: LD_INT 2
78871: PUSH
78872: EMPTY
78873: LIST
78874: LIST
78875: PUSH
78876: LD_INT 1
78878: PUSH
78879: LD_INT 2
78881: PUSH
78882: EMPTY
78883: LIST
78884: LIST
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: LIST
78890: LIST
78891: LIST
78892: LIST
78893: LIST
78894: LIST
78895: LIST
78896: LIST
78897: LIST
78898: LIST
78899: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78900: LD_ADDR_VAR 0 50
78904: PUSH
78905: LD_INT 0
78907: PUSH
78908: LD_INT 0
78910: PUSH
78911: EMPTY
78912: LIST
78913: LIST
78914: PUSH
78915: LD_INT 0
78917: PUSH
78918: LD_INT 1
78920: NEG
78921: PUSH
78922: EMPTY
78923: LIST
78924: LIST
78925: PUSH
78926: LD_INT 1
78928: PUSH
78929: LD_INT 0
78931: PUSH
78932: EMPTY
78933: LIST
78934: LIST
78935: PUSH
78936: LD_INT 1
78938: PUSH
78939: LD_INT 1
78941: PUSH
78942: EMPTY
78943: LIST
78944: LIST
78945: PUSH
78946: LD_INT 0
78948: PUSH
78949: LD_INT 1
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: PUSH
78956: LD_INT 1
78958: NEG
78959: PUSH
78960: LD_INT 0
78962: PUSH
78963: EMPTY
78964: LIST
78965: LIST
78966: PUSH
78967: LD_INT 1
78969: NEG
78970: PUSH
78971: LD_INT 1
78973: NEG
78974: PUSH
78975: EMPTY
78976: LIST
78977: LIST
78978: PUSH
78979: LD_INT 2
78981: PUSH
78982: LD_INT 1
78984: PUSH
78985: EMPTY
78986: LIST
78987: LIST
78988: PUSH
78989: LD_INT 2
78991: PUSH
78992: LD_INT 2
78994: PUSH
78995: EMPTY
78996: LIST
78997: LIST
78998: PUSH
78999: LD_INT 1
79001: PUSH
79002: LD_INT 2
79004: PUSH
79005: EMPTY
79006: LIST
79007: LIST
79008: PUSH
79009: LD_INT 0
79011: PUSH
79012: LD_INT 2
79014: PUSH
79015: EMPTY
79016: LIST
79017: LIST
79018: PUSH
79019: LD_INT 1
79021: NEG
79022: PUSH
79023: LD_INT 1
79025: PUSH
79026: EMPTY
79027: LIST
79028: LIST
79029: PUSH
79030: EMPTY
79031: LIST
79032: LIST
79033: LIST
79034: LIST
79035: LIST
79036: LIST
79037: LIST
79038: LIST
79039: LIST
79040: LIST
79041: LIST
79042: LIST
79043: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
79044: LD_ADDR_VAR 0 51
79048: PUSH
79049: LD_INT 0
79051: PUSH
79052: LD_INT 0
79054: PUSH
79055: EMPTY
79056: LIST
79057: LIST
79058: PUSH
79059: LD_INT 0
79061: PUSH
79062: LD_INT 1
79064: NEG
79065: PUSH
79066: EMPTY
79067: LIST
79068: LIST
79069: PUSH
79070: LD_INT 1
79072: PUSH
79073: LD_INT 0
79075: PUSH
79076: EMPTY
79077: LIST
79078: LIST
79079: PUSH
79080: LD_INT 1
79082: PUSH
79083: LD_INT 1
79085: PUSH
79086: EMPTY
79087: LIST
79088: LIST
79089: PUSH
79090: LD_INT 0
79092: PUSH
79093: LD_INT 1
79095: PUSH
79096: EMPTY
79097: LIST
79098: LIST
79099: PUSH
79100: LD_INT 1
79102: NEG
79103: PUSH
79104: LD_INT 0
79106: PUSH
79107: EMPTY
79108: LIST
79109: LIST
79110: PUSH
79111: LD_INT 1
79113: NEG
79114: PUSH
79115: LD_INT 1
79117: NEG
79118: PUSH
79119: EMPTY
79120: LIST
79121: LIST
79122: PUSH
79123: LD_INT 1
79125: PUSH
79126: LD_INT 2
79128: PUSH
79129: EMPTY
79130: LIST
79131: LIST
79132: PUSH
79133: LD_INT 0
79135: PUSH
79136: LD_INT 2
79138: PUSH
79139: EMPTY
79140: LIST
79141: LIST
79142: PUSH
79143: LD_INT 1
79145: NEG
79146: PUSH
79147: LD_INT 1
79149: PUSH
79150: EMPTY
79151: LIST
79152: LIST
79153: PUSH
79154: LD_INT 2
79156: NEG
79157: PUSH
79158: LD_INT 0
79160: PUSH
79161: EMPTY
79162: LIST
79163: LIST
79164: PUSH
79165: LD_INT 2
79167: NEG
79168: PUSH
79169: LD_INT 1
79171: NEG
79172: PUSH
79173: EMPTY
79174: LIST
79175: LIST
79176: PUSH
79177: EMPTY
79178: LIST
79179: LIST
79180: LIST
79181: LIST
79182: LIST
79183: LIST
79184: LIST
79185: LIST
79186: LIST
79187: LIST
79188: LIST
79189: LIST
79190: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79191: LD_ADDR_VAR 0 52
79195: PUSH
79196: LD_INT 0
79198: PUSH
79199: LD_INT 0
79201: PUSH
79202: EMPTY
79203: LIST
79204: LIST
79205: PUSH
79206: LD_INT 0
79208: PUSH
79209: LD_INT 1
79211: NEG
79212: PUSH
79213: EMPTY
79214: LIST
79215: LIST
79216: PUSH
79217: LD_INT 1
79219: PUSH
79220: LD_INT 0
79222: PUSH
79223: EMPTY
79224: LIST
79225: LIST
79226: PUSH
79227: LD_INT 1
79229: PUSH
79230: LD_INT 1
79232: PUSH
79233: EMPTY
79234: LIST
79235: LIST
79236: PUSH
79237: LD_INT 0
79239: PUSH
79240: LD_INT 1
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: PUSH
79247: LD_INT 1
79249: NEG
79250: PUSH
79251: LD_INT 0
79253: PUSH
79254: EMPTY
79255: LIST
79256: LIST
79257: PUSH
79258: LD_INT 1
79260: NEG
79261: PUSH
79262: LD_INT 1
79264: NEG
79265: PUSH
79266: EMPTY
79267: LIST
79268: LIST
79269: PUSH
79270: LD_INT 1
79272: NEG
79273: PUSH
79274: LD_INT 2
79276: NEG
79277: PUSH
79278: EMPTY
79279: LIST
79280: LIST
79281: PUSH
79282: LD_INT 1
79284: NEG
79285: PUSH
79286: LD_INT 1
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: PUSH
79293: LD_INT 2
79295: NEG
79296: PUSH
79297: LD_INT 0
79299: PUSH
79300: EMPTY
79301: LIST
79302: LIST
79303: PUSH
79304: LD_INT 2
79306: NEG
79307: PUSH
79308: LD_INT 1
79310: NEG
79311: PUSH
79312: EMPTY
79313: LIST
79314: LIST
79315: PUSH
79316: LD_INT 2
79318: NEG
79319: PUSH
79320: LD_INT 2
79322: NEG
79323: PUSH
79324: EMPTY
79325: LIST
79326: LIST
79327: PUSH
79328: EMPTY
79329: LIST
79330: LIST
79331: LIST
79332: LIST
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79342: LD_ADDR_VAR 0 53
79346: PUSH
79347: LD_INT 0
79349: PUSH
79350: LD_INT 0
79352: PUSH
79353: EMPTY
79354: LIST
79355: LIST
79356: PUSH
79357: LD_INT 0
79359: PUSH
79360: LD_INT 1
79362: NEG
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: PUSH
79368: LD_INT 1
79370: PUSH
79371: LD_INT 0
79373: PUSH
79374: EMPTY
79375: LIST
79376: LIST
79377: PUSH
79378: LD_INT 1
79380: PUSH
79381: LD_INT 1
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: PUSH
79388: LD_INT 0
79390: PUSH
79391: LD_INT 1
79393: PUSH
79394: EMPTY
79395: LIST
79396: LIST
79397: PUSH
79398: LD_INT 1
79400: NEG
79401: PUSH
79402: LD_INT 0
79404: PUSH
79405: EMPTY
79406: LIST
79407: LIST
79408: PUSH
79409: LD_INT 1
79411: NEG
79412: PUSH
79413: LD_INT 1
79415: NEG
79416: PUSH
79417: EMPTY
79418: LIST
79419: LIST
79420: PUSH
79421: LD_INT 1
79423: NEG
79424: PUSH
79425: LD_INT 2
79427: NEG
79428: PUSH
79429: EMPTY
79430: LIST
79431: LIST
79432: PUSH
79433: LD_INT 0
79435: PUSH
79436: LD_INT 2
79438: NEG
79439: PUSH
79440: EMPTY
79441: LIST
79442: LIST
79443: PUSH
79444: LD_INT 1
79446: PUSH
79447: LD_INT 1
79449: NEG
79450: PUSH
79451: EMPTY
79452: LIST
79453: LIST
79454: PUSH
79455: LD_INT 2
79457: PUSH
79458: LD_INT 0
79460: PUSH
79461: EMPTY
79462: LIST
79463: LIST
79464: PUSH
79465: LD_INT 2
79467: PUSH
79468: LD_INT 1
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: PUSH
79475: LD_INT 2
79477: PUSH
79478: LD_INT 2
79480: PUSH
79481: EMPTY
79482: LIST
79483: LIST
79484: PUSH
79485: LD_INT 1
79487: PUSH
79488: LD_INT 2
79490: PUSH
79491: EMPTY
79492: LIST
79493: LIST
79494: PUSH
79495: LD_INT 0
79497: PUSH
79498: LD_INT 2
79500: PUSH
79501: EMPTY
79502: LIST
79503: LIST
79504: PUSH
79505: LD_INT 1
79507: NEG
79508: PUSH
79509: LD_INT 1
79511: PUSH
79512: EMPTY
79513: LIST
79514: LIST
79515: PUSH
79516: LD_INT 2
79518: NEG
79519: PUSH
79520: LD_INT 0
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: PUSH
79527: LD_INT 2
79529: NEG
79530: PUSH
79531: LD_INT 1
79533: NEG
79534: PUSH
79535: EMPTY
79536: LIST
79537: LIST
79538: PUSH
79539: LD_INT 2
79541: NEG
79542: PUSH
79543: LD_INT 2
79545: NEG
79546: PUSH
79547: EMPTY
79548: LIST
79549: LIST
79550: PUSH
79551: EMPTY
79552: LIST
79553: LIST
79554: LIST
79555: LIST
79556: LIST
79557: LIST
79558: LIST
79559: LIST
79560: LIST
79561: LIST
79562: LIST
79563: LIST
79564: LIST
79565: LIST
79566: LIST
79567: LIST
79568: LIST
79569: LIST
79570: LIST
79571: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79572: LD_ADDR_VAR 0 54
79576: PUSH
79577: LD_INT 0
79579: PUSH
79580: LD_INT 0
79582: PUSH
79583: EMPTY
79584: LIST
79585: LIST
79586: PUSH
79587: LD_INT 0
79589: PUSH
79590: LD_INT 1
79592: NEG
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: PUSH
79598: LD_INT 1
79600: PUSH
79601: LD_INT 0
79603: PUSH
79604: EMPTY
79605: LIST
79606: LIST
79607: PUSH
79608: LD_INT 1
79610: PUSH
79611: LD_INT 1
79613: PUSH
79614: EMPTY
79615: LIST
79616: LIST
79617: PUSH
79618: LD_INT 0
79620: PUSH
79621: LD_INT 1
79623: PUSH
79624: EMPTY
79625: LIST
79626: LIST
79627: PUSH
79628: LD_INT 1
79630: NEG
79631: PUSH
79632: LD_INT 0
79634: PUSH
79635: EMPTY
79636: LIST
79637: LIST
79638: PUSH
79639: LD_INT 1
79641: NEG
79642: PUSH
79643: LD_INT 1
79645: NEG
79646: PUSH
79647: EMPTY
79648: LIST
79649: LIST
79650: PUSH
79651: LD_INT 1
79653: NEG
79654: PUSH
79655: LD_INT 2
79657: NEG
79658: PUSH
79659: EMPTY
79660: LIST
79661: LIST
79662: PUSH
79663: LD_INT 0
79665: PUSH
79666: LD_INT 2
79668: NEG
79669: PUSH
79670: EMPTY
79671: LIST
79672: LIST
79673: PUSH
79674: LD_INT 1
79676: PUSH
79677: LD_INT 1
79679: NEG
79680: PUSH
79681: EMPTY
79682: LIST
79683: LIST
79684: PUSH
79685: LD_INT 2
79687: PUSH
79688: LD_INT 0
79690: PUSH
79691: EMPTY
79692: LIST
79693: LIST
79694: PUSH
79695: LD_INT 2
79697: PUSH
79698: LD_INT 1
79700: PUSH
79701: EMPTY
79702: LIST
79703: LIST
79704: PUSH
79705: LD_INT 2
79707: PUSH
79708: LD_INT 2
79710: PUSH
79711: EMPTY
79712: LIST
79713: LIST
79714: PUSH
79715: LD_INT 1
79717: PUSH
79718: LD_INT 2
79720: PUSH
79721: EMPTY
79722: LIST
79723: LIST
79724: PUSH
79725: LD_INT 0
79727: PUSH
79728: LD_INT 2
79730: PUSH
79731: EMPTY
79732: LIST
79733: LIST
79734: PUSH
79735: LD_INT 1
79737: NEG
79738: PUSH
79739: LD_INT 1
79741: PUSH
79742: EMPTY
79743: LIST
79744: LIST
79745: PUSH
79746: LD_INT 2
79748: NEG
79749: PUSH
79750: LD_INT 0
79752: PUSH
79753: EMPTY
79754: LIST
79755: LIST
79756: PUSH
79757: LD_INT 2
79759: NEG
79760: PUSH
79761: LD_INT 1
79763: NEG
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: PUSH
79769: LD_INT 2
79771: NEG
79772: PUSH
79773: LD_INT 2
79775: NEG
79776: PUSH
79777: EMPTY
79778: LIST
79779: LIST
79780: PUSH
79781: EMPTY
79782: LIST
79783: LIST
79784: LIST
79785: LIST
79786: LIST
79787: LIST
79788: LIST
79789: LIST
79790: LIST
79791: LIST
79792: LIST
79793: LIST
79794: LIST
79795: LIST
79796: LIST
79797: LIST
79798: LIST
79799: LIST
79800: LIST
79801: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79802: LD_ADDR_VAR 0 55
79806: PUSH
79807: LD_INT 0
79809: PUSH
79810: LD_INT 0
79812: PUSH
79813: EMPTY
79814: LIST
79815: LIST
79816: PUSH
79817: LD_INT 0
79819: PUSH
79820: LD_INT 1
79822: NEG
79823: PUSH
79824: EMPTY
79825: LIST
79826: LIST
79827: PUSH
79828: LD_INT 1
79830: PUSH
79831: LD_INT 0
79833: PUSH
79834: EMPTY
79835: LIST
79836: LIST
79837: PUSH
79838: LD_INT 1
79840: PUSH
79841: LD_INT 1
79843: PUSH
79844: EMPTY
79845: LIST
79846: LIST
79847: PUSH
79848: LD_INT 0
79850: PUSH
79851: LD_INT 1
79853: PUSH
79854: EMPTY
79855: LIST
79856: LIST
79857: PUSH
79858: LD_INT 1
79860: NEG
79861: PUSH
79862: LD_INT 0
79864: PUSH
79865: EMPTY
79866: LIST
79867: LIST
79868: PUSH
79869: LD_INT 1
79871: NEG
79872: PUSH
79873: LD_INT 1
79875: NEG
79876: PUSH
79877: EMPTY
79878: LIST
79879: LIST
79880: PUSH
79881: LD_INT 1
79883: NEG
79884: PUSH
79885: LD_INT 2
79887: NEG
79888: PUSH
79889: EMPTY
79890: LIST
79891: LIST
79892: PUSH
79893: LD_INT 0
79895: PUSH
79896: LD_INT 2
79898: NEG
79899: PUSH
79900: EMPTY
79901: LIST
79902: LIST
79903: PUSH
79904: LD_INT 1
79906: PUSH
79907: LD_INT 1
79909: NEG
79910: PUSH
79911: EMPTY
79912: LIST
79913: LIST
79914: PUSH
79915: LD_INT 2
79917: PUSH
79918: LD_INT 0
79920: PUSH
79921: EMPTY
79922: LIST
79923: LIST
79924: PUSH
79925: LD_INT 2
79927: PUSH
79928: LD_INT 1
79930: PUSH
79931: EMPTY
79932: LIST
79933: LIST
79934: PUSH
79935: LD_INT 2
79937: PUSH
79938: LD_INT 2
79940: PUSH
79941: EMPTY
79942: LIST
79943: LIST
79944: PUSH
79945: LD_INT 1
79947: PUSH
79948: LD_INT 2
79950: PUSH
79951: EMPTY
79952: LIST
79953: LIST
79954: PUSH
79955: LD_INT 0
79957: PUSH
79958: LD_INT 2
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PUSH
79965: LD_INT 1
79967: NEG
79968: PUSH
79969: LD_INT 1
79971: PUSH
79972: EMPTY
79973: LIST
79974: LIST
79975: PUSH
79976: LD_INT 2
79978: NEG
79979: PUSH
79980: LD_INT 0
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: PUSH
79987: LD_INT 2
79989: NEG
79990: PUSH
79991: LD_INT 1
79993: NEG
79994: PUSH
79995: EMPTY
79996: LIST
79997: LIST
79998: PUSH
79999: LD_INT 2
80001: NEG
80002: PUSH
80003: LD_INT 2
80005: NEG
80006: PUSH
80007: EMPTY
80008: LIST
80009: LIST
80010: PUSH
80011: EMPTY
80012: LIST
80013: LIST
80014: LIST
80015: LIST
80016: LIST
80017: LIST
80018: LIST
80019: LIST
80020: LIST
80021: LIST
80022: LIST
80023: LIST
80024: LIST
80025: LIST
80026: LIST
80027: LIST
80028: LIST
80029: LIST
80030: LIST
80031: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80032: LD_ADDR_VAR 0 56
80036: PUSH
80037: LD_INT 0
80039: PUSH
80040: LD_INT 0
80042: PUSH
80043: EMPTY
80044: LIST
80045: LIST
80046: PUSH
80047: LD_INT 0
80049: PUSH
80050: LD_INT 1
80052: NEG
80053: PUSH
80054: EMPTY
80055: LIST
80056: LIST
80057: PUSH
80058: LD_INT 1
80060: PUSH
80061: LD_INT 0
80063: PUSH
80064: EMPTY
80065: LIST
80066: LIST
80067: PUSH
80068: LD_INT 1
80070: PUSH
80071: LD_INT 1
80073: PUSH
80074: EMPTY
80075: LIST
80076: LIST
80077: PUSH
80078: LD_INT 0
80080: PUSH
80081: LD_INT 1
80083: PUSH
80084: EMPTY
80085: LIST
80086: LIST
80087: PUSH
80088: LD_INT 1
80090: NEG
80091: PUSH
80092: LD_INT 0
80094: PUSH
80095: EMPTY
80096: LIST
80097: LIST
80098: PUSH
80099: LD_INT 1
80101: NEG
80102: PUSH
80103: LD_INT 1
80105: NEG
80106: PUSH
80107: EMPTY
80108: LIST
80109: LIST
80110: PUSH
80111: LD_INT 1
80113: NEG
80114: PUSH
80115: LD_INT 2
80117: NEG
80118: PUSH
80119: EMPTY
80120: LIST
80121: LIST
80122: PUSH
80123: LD_INT 0
80125: PUSH
80126: LD_INT 2
80128: NEG
80129: PUSH
80130: EMPTY
80131: LIST
80132: LIST
80133: PUSH
80134: LD_INT 1
80136: PUSH
80137: LD_INT 1
80139: NEG
80140: PUSH
80141: EMPTY
80142: LIST
80143: LIST
80144: PUSH
80145: LD_INT 2
80147: PUSH
80148: LD_INT 0
80150: PUSH
80151: EMPTY
80152: LIST
80153: LIST
80154: PUSH
80155: LD_INT 2
80157: PUSH
80158: LD_INT 1
80160: PUSH
80161: EMPTY
80162: LIST
80163: LIST
80164: PUSH
80165: LD_INT 2
80167: PUSH
80168: LD_INT 2
80170: PUSH
80171: EMPTY
80172: LIST
80173: LIST
80174: PUSH
80175: LD_INT 1
80177: PUSH
80178: LD_INT 2
80180: PUSH
80181: EMPTY
80182: LIST
80183: LIST
80184: PUSH
80185: LD_INT 0
80187: PUSH
80188: LD_INT 2
80190: PUSH
80191: EMPTY
80192: LIST
80193: LIST
80194: PUSH
80195: LD_INT 1
80197: NEG
80198: PUSH
80199: LD_INT 1
80201: PUSH
80202: EMPTY
80203: LIST
80204: LIST
80205: PUSH
80206: LD_INT 2
80208: NEG
80209: PUSH
80210: LD_INT 0
80212: PUSH
80213: EMPTY
80214: LIST
80215: LIST
80216: PUSH
80217: LD_INT 2
80219: NEG
80220: PUSH
80221: LD_INT 1
80223: NEG
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: PUSH
80229: LD_INT 2
80231: NEG
80232: PUSH
80233: LD_INT 2
80235: NEG
80236: PUSH
80237: EMPTY
80238: LIST
80239: LIST
80240: PUSH
80241: EMPTY
80242: LIST
80243: LIST
80244: LIST
80245: LIST
80246: LIST
80247: LIST
80248: LIST
80249: LIST
80250: LIST
80251: LIST
80252: LIST
80253: LIST
80254: LIST
80255: LIST
80256: LIST
80257: LIST
80258: LIST
80259: LIST
80260: LIST
80261: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80262: LD_ADDR_VAR 0 57
80266: PUSH
80267: LD_INT 0
80269: PUSH
80270: LD_INT 0
80272: PUSH
80273: EMPTY
80274: LIST
80275: LIST
80276: PUSH
80277: LD_INT 0
80279: PUSH
80280: LD_INT 1
80282: NEG
80283: PUSH
80284: EMPTY
80285: LIST
80286: LIST
80287: PUSH
80288: LD_INT 1
80290: PUSH
80291: LD_INT 0
80293: PUSH
80294: EMPTY
80295: LIST
80296: LIST
80297: PUSH
80298: LD_INT 1
80300: PUSH
80301: LD_INT 1
80303: PUSH
80304: EMPTY
80305: LIST
80306: LIST
80307: PUSH
80308: LD_INT 0
80310: PUSH
80311: LD_INT 1
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PUSH
80318: LD_INT 1
80320: NEG
80321: PUSH
80322: LD_INT 0
80324: PUSH
80325: EMPTY
80326: LIST
80327: LIST
80328: PUSH
80329: LD_INT 1
80331: NEG
80332: PUSH
80333: LD_INT 1
80335: NEG
80336: PUSH
80337: EMPTY
80338: LIST
80339: LIST
80340: PUSH
80341: LD_INT 1
80343: NEG
80344: PUSH
80345: LD_INT 2
80347: NEG
80348: PUSH
80349: EMPTY
80350: LIST
80351: LIST
80352: PUSH
80353: LD_INT 0
80355: PUSH
80356: LD_INT 2
80358: NEG
80359: PUSH
80360: EMPTY
80361: LIST
80362: LIST
80363: PUSH
80364: LD_INT 1
80366: PUSH
80367: LD_INT 1
80369: NEG
80370: PUSH
80371: EMPTY
80372: LIST
80373: LIST
80374: PUSH
80375: LD_INT 2
80377: PUSH
80378: LD_INT 0
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: PUSH
80385: LD_INT 2
80387: PUSH
80388: LD_INT 1
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 2
80397: PUSH
80398: LD_INT 2
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: PUSH
80405: LD_INT 1
80407: PUSH
80408: LD_INT 2
80410: PUSH
80411: EMPTY
80412: LIST
80413: LIST
80414: PUSH
80415: LD_INT 0
80417: PUSH
80418: LD_INT 2
80420: PUSH
80421: EMPTY
80422: LIST
80423: LIST
80424: PUSH
80425: LD_INT 1
80427: NEG
80428: PUSH
80429: LD_INT 1
80431: PUSH
80432: EMPTY
80433: LIST
80434: LIST
80435: PUSH
80436: LD_INT 2
80438: NEG
80439: PUSH
80440: LD_INT 0
80442: PUSH
80443: EMPTY
80444: LIST
80445: LIST
80446: PUSH
80447: LD_INT 2
80449: NEG
80450: PUSH
80451: LD_INT 1
80453: NEG
80454: PUSH
80455: EMPTY
80456: LIST
80457: LIST
80458: PUSH
80459: LD_INT 2
80461: NEG
80462: PUSH
80463: LD_INT 2
80465: NEG
80466: PUSH
80467: EMPTY
80468: LIST
80469: LIST
80470: PUSH
80471: EMPTY
80472: LIST
80473: LIST
80474: LIST
80475: LIST
80476: LIST
80477: LIST
80478: LIST
80479: LIST
80480: LIST
80481: LIST
80482: LIST
80483: LIST
80484: LIST
80485: LIST
80486: LIST
80487: LIST
80488: LIST
80489: LIST
80490: LIST
80491: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
80492: LD_ADDR_VAR 0 58
80496: PUSH
80497: LD_INT 0
80499: PUSH
80500: LD_INT 0
80502: PUSH
80503: EMPTY
80504: LIST
80505: LIST
80506: PUSH
80507: LD_INT 0
80509: PUSH
80510: LD_INT 1
80512: NEG
80513: PUSH
80514: EMPTY
80515: LIST
80516: LIST
80517: PUSH
80518: LD_INT 1
80520: PUSH
80521: LD_INT 0
80523: PUSH
80524: EMPTY
80525: LIST
80526: LIST
80527: PUSH
80528: LD_INT 1
80530: PUSH
80531: LD_INT 1
80533: PUSH
80534: EMPTY
80535: LIST
80536: LIST
80537: PUSH
80538: LD_INT 0
80540: PUSH
80541: LD_INT 1
80543: PUSH
80544: EMPTY
80545: LIST
80546: LIST
80547: PUSH
80548: LD_INT 1
80550: NEG
80551: PUSH
80552: LD_INT 0
80554: PUSH
80555: EMPTY
80556: LIST
80557: LIST
80558: PUSH
80559: LD_INT 1
80561: NEG
80562: PUSH
80563: LD_INT 1
80565: NEG
80566: PUSH
80567: EMPTY
80568: LIST
80569: LIST
80570: PUSH
80571: LD_INT 1
80573: NEG
80574: PUSH
80575: LD_INT 2
80577: NEG
80578: PUSH
80579: EMPTY
80580: LIST
80581: LIST
80582: PUSH
80583: LD_INT 0
80585: PUSH
80586: LD_INT 2
80588: NEG
80589: PUSH
80590: EMPTY
80591: LIST
80592: LIST
80593: PUSH
80594: LD_INT 1
80596: PUSH
80597: LD_INT 1
80599: NEG
80600: PUSH
80601: EMPTY
80602: LIST
80603: LIST
80604: PUSH
80605: LD_INT 2
80607: PUSH
80608: LD_INT 0
80610: PUSH
80611: EMPTY
80612: LIST
80613: LIST
80614: PUSH
80615: LD_INT 2
80617: PUSH
80618: LD_INT 1
80620: PUSH
80621: EMPTY
80622: LIST
80623: LIST
80624: PUSH
80625: LD_INT 2
80627: PUSH
80628: LD_INT 2
80630: PUSH
80631: EMPTY
80632: LIST
80633: LIST
80634: PUSH
80635: LD_INT 1
80637: PUSH
80638: LD_INT 2
80640: PUSH
80641: EMPTY
80642: LIST
80643: LIST
80644: PUSH
80645: LD_INT 0
80647: PUSH
80648: LD_INT 2
80650: PUSH
80651: EMPTY
80652: LIST
80653: LIST
80654: PUSH
80655: LD_INT 1
80657: NEG
80658: PUSH
80659: LD_INT 1
80661: PUSH
80662: EMPTY
80663: LIST
80664: LIST
80665: PUSH
80666: LD_INT 2
80668: NEG
80669: PUSH
80670: LD_INT 0
80672: PUSH
80673: EMPTY
80674: LIST
80675: LIST
80676: PUSH
80677: LD_INT 2
80679: NEG
80680: PUSH
80681: LD_INT 1
80683: NEG
80684: PUSH
80685: EMPTY
80686: LIST
80687: LIST
80688: PUSH
80689: LD_INT 2
80691: NEG
80692: PUSH
80693: LD_INT 2
80695: NEG
80696: PUSH
80697: EMPTY
80698: LIST
80699: LIST
80700: PUSH
80701: EMPTY
80702: LIST
80703: LIST
80704: LIST
80705: LIST
80706: LIST
80707: LIST
80708: LIST
80709: LIST
80710: LIST
80711: LIST
80712: LIST
80713: LIST
80714: LIST
80715: LIST
80716: LIST
80717: LIST
80718: LIST
80719: LIST
80720: LIST
80721: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80722: LD_ADDR_VAR 0 59
80726: PUSH
80727: LD_INT 0
80729: PUSH
80730: LD_INT 0
80732: PUSH
80733: EMPTY
80734: LIST
80735: LIST
80736: PUSH
80737: LD_INT 0
80739: PUSH
80740: LD_INT 1
80742: NEG
80743: PUSH
80744: EMPTY
80745: LIST
80746: LIST
80747: PUSH
80748: LD_INT 1
80750: PUSH
80751: LD_INT 0
80753: PUSH
80754: EMPTY
80755: LIST
80756: LIST
80757: PUSH
80758: LD_INT 1
80760: PUSH
80761: LD_INT 1
80763: PUSH
80764: EMPTY
80765: LIST
80766: LIST
80767: PUSH
80768: LD_INT 0
80770: PUSH
80771: LD_INT 1
80773: PUSH
80774: EMPTY
80775: LIST
80776: LIST
80777: PUSH
80778: LD_INT 1
80780: NEG
80781: PUSH
80782: LD_INT 0
80784: PUSH
80785: EMPTY
80786: LIST
80787: LIST
80788: PUSH
80789: LD_INT 1
80791: NEG
80792: PUSH
80793: LD_INT 1
80795: NEG
80796: PUSH
80797: EMPTY
80798: LIST
80799: LIST
80800: PUSH
80801: EMPTY
80802: LIST
80803: LIST
80804: LIST
80805: LIST
80806: LIST
80807: LIST
80808: LIST
80809: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80810: LD_ADDR_VAR 0 60
80814: PUSH
80815: LD_INT 0
80817: PUSH
80818: LD_INT 0
80820: PUSH
80821: EMPTY
80822: LIST
80823: LIST
80824: PUSH
80825: LD_INT 0
80827: PUSH
80828: LD_INT 1
80830: NEG
80831: PUSH
80832: EMPTY
80833: LIST
80834: LIST
80835: PUSH
80836: LD_INT 1
80838: PUSH
80839: LD_INT 0
80841: PUSH
80842: EMPTY
80843: LIST
80844: LIST
80845: PUSH
80846: LD_INT 1
80848: PUSH
80849: LD_INT 1
80851: PUSH
80852: EMPTY
80853: LIST
80854: LIST
80855: PUSH
80856: LD_INT 0
80858: PUSH
80859: LD_INT 1
80861: PUSH
80862: EMPTY
80863: LIST
80864: LIST
80865: PUSH
80866: LD_INT 1
80868: NEG
80869: PUSH
80870: LD_INT 0
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: PUSH
80877: LD_INT 1
80879: NEG
80880: PUSH
80881: LD_INT 1
80883: NEG
80884: PUSH
80885: EMPTY
80886: LIST
80887: LIST
80888: PUSH
80889: EMPTY
80890: LIST
80891: LIST
80892: LIST
80893: LIST
80894: LIST
80895: LIST
80896: LIST
80897: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80898: LD_ADDR_VAR 0 61
80902: PUSH
80903: LD_INT 0
80905: PUSH
80906: LD_INT 0
80908: PUSH
80909: EMPTY
80910: LIST
80911: LIST
80912: PUSH
80913: LD_INT 0
80915: PUSH
80916: LD_INT 1
80918: NEG
80919: PUSH
80920: EMPTY
80921: LIST
80922: LIST
80923: PUSH
80924: LD_INT 1
80926: PUSH
80927: LD_INT 0
80929: PUSH
80930: EMPTY
80931: LIST
80932: LIST
80933: PUSH
80934: LD_INT 1
80936: PUSH
80937: LD_INT 1
80939: PUSH
80940: EMPTY
80941: LIST
80942: LIST
80943: PUSH
80944: LD_INT 0
80946: PUSH
80947: LD_INT 1
80949: PUSH
80950: EMPTY
80951: LIST
80952: LIST
80953: PUSH
80954: LD_INT 1
80956: NEG
80957: PUSH
80958: LD_INT 0
80960: PUSH
80961: EMPTY
80962: LIST
80963: LIST
80964: PUSH
80965: LD_INT 1
80967: NEG
80968: PUSH
80969: LD_INT 1
80971: NEG
80972: PUSH
80973: EMPTY
80974: LIST
80975: LIST
80976: PUSH
80977: EMPTY
80978: LIST
80979: LIST
80980: LIST
80981: LIST
80982: LIST
80983: LIST
80984: LIST
80985: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80986: LD_ADDR_VAR 0 62
80990: PUSH
80991: LD_INT 0
80993: PUSH
80994: LD_INT 0
80996: PUSH
80997: EMPTY
80998: LIST
80999: LIST
81000: PUSH
81001: LD_INT 0
81003: PUSH
81004: LD_INT 1
81006: NEG
81007: PUSH
81008: EMPTY
81009: LIST
81010: LIST
81011: PUSH
81012: LD_INT 1
81014: PUSH
81015: LD_INT 0
81017: PUSH
81018: EMPTY
81019: LIST
81020: LIST
81021: PUSH
81022: LD_INT 1
81024: PUSH
81025: LD_INT 1
81027: PUSH
81028: EMPTY
81029: LIST
81030: LIST
81031: PUSH
81032: LD_INT 0
81034: PUSH
81035: LD_INT 1
81037: PUSH
81038: EMPTY
81039: LIST
81040: LIST
81041: PUSH
81042: LD_INT 1
81044: NEG
81045: PUSH
81046: LD_INT 0
81048: PUSH
81049: EMPTY
81050: LIST
81051: LIST
81052: PUSH
81053: LD_INT 1
81055: NEG
81056: PUSH
81057: LD_INT 1
81059: NEG
81060: PUSH
81061: EMPTY
81062: LIST
81063: LIST
81064: PUSH
81065: EMPTY
81066: LIST
81067: LIST
81068: LIST
81069: LIST
81070: LIST
81071: LIST
81072: LIST
81073: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81074: LD_ADDR_VAR 0 63
81078: PUSH
81079: LD_INT 0
81081: PUSH
81082: LD_INT 0
81084: PUSH
81085: EMPTY
81086: LIST
81087: LIST
81088: PUSH
81089: LD_INT 0
81091: PUSH
81092: LD_INT 1
81094: NEG
81095: PUSH
81096: EMPTY
81097: LIST
81098: LIST
81099: PUSH
81100: LD_INT 1
81102: PUSH
81103: LD_INT 0
81105: PUSH
81106: EMPTY
81107: LIST
81108: LIST
81109: PUSH
81110: LD_INT 1
81112: PUSH
81113: LD_INT 1
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: PUSH
81120: LD_INT 0
81122: PUSH
81123: LD_INT 1
81125: PUSH
81126: EMPTY
81127: LIST
81128: LIST
81129: PUSH
81130: LD_INT 1
81132: NEG
81133: PUSH
81134: LD_INT 0
81136: PUSH
81137: EMPTY
81138: LIST
81139: LIST
81140: PUSH
81141: LD_INT 1
81143: NEG
81144: PUSH
81145: LD_INT 1
81147: NEG
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: PUSH
81153: EMPTY
81154: LIST
81155: LIST
81156: LIST
81157: LIST
81158: LIST
81159: LIST
81160: LIST
81161: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
81162: LD_ADDR_VAR 0 64
81166: PUSH
81167: LD_INT 0
81169: PUSH
81170: LD_INT 0
81172: PUSH
81173: EMPTY
81174: LIST
81175: LIST
81176: PUSH
81177: LD_INT 0
81179: PUSH
81180: LD_INT 1
81182: NEG
81183: PUSH
81184: EMPTY
81185: LIST
81186: LIST
81187: PUSH
81188: LD_INT 1
81190: PUSH
81191: LD_INT 0
81193: PUSH
81194: EMPTY
81195: LIST
81196: LIST
81197: PUSH
81198: LD_INT 1
81200: PUSH
81201: LD_INT 1
81203: PUSH
81204: EMPTY
81205: LIST
81206: LIST
81207: PUSH
81208: LD_INT 0
81210: PUSH
81211: LD_INT 1
81213: PUSH
81214: EMPTY
81215: LIST
81216: LIST
81217: PUSH
81218: LD_INT 1
81220: NEG
81221: PUSH
81222: LD_INT 0
81224: PUSH
81225: EMPTY
81226: LIST
81227: LIST
81228: PUSH
81229: LD_INT 1
81231: NEG
81232: PUSH
81233: LD_INT 1
81235: NEG
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: PUSH
81241: EMPTY
81242: LIST
81243: LIST
81244: LIST
81245: LIST
81246: LIST
81247: LIST
81248: LIST
81249: ST_TO_ADDR
// end ; 1 :
81250: GO 87147
81252: LD_INT 1
81254: DOUBLE
81255: EQUAL
81256: IFTRUE 81260
81258: GO 83883
81260: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
81261: LD_ADDR_VAR 0 11
81265: PUSH
81266: LD_INT 1
81268: NEG
81269: PUSH
81270: LD_INT 3
81272: NEG
81273: PUSH
81274: EMPTY
81275: LIST
81276: LIST
81277: PUSH
81278: LD_INT 0
81280: PUSH
81281: LD_INT 3
81283: NEG
81284: PUSH
81285: EMPTY
81286: LIST
81287: LIST
81288: PUSH
81289: LD_INT 1
81291: PUSH
81292: LD_INT 2
81294: NEG
81295: PUSH
81296: EMPTY
81297: LIST
81298: LIST
81299: PUSH
81300: EMPTY
81301: LIST
81302: LIST
81303: LIST
81304: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
81305: LD_ADDR_VAR 0 12
81309: PUSH
81310: LD_INT 2
81312: PUSH
81313: LD_INT 1
81315: NEG
81316: PUSH
81317: EMPTY
81318: LIST
81319: LIST
81320: PUSH
81321: LD_INT 3
81323: PUSH
81324: LD_INT 0
81326: PUSH
81327: EMPTY
81328: LIST
81329: LIST
81330: PUSH
81331: LD_INT 3
81333: PUSH
81334: LD_INT 1
81336: PUSH
81337: EMPTY
81338: LIST
81339: LIST
81340: PUSH
81341: EMPTY
81342: LIST
81343: LIST
81344: LIST
81345: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
81346: LD_ADDR_VAR 0 13
81350: PUSH
81351: LD_INT 3
81353: PUSH
81354: LD_INT 2
81356: PUSH
81357: EMPTY
81358: LIST
81359: LIST
81360: PUSH
81361: LD_INT 3
81363: PUSH
81364: LD_INT 3
81366: PUSH
81367: EMPTY
81368: LIST
81369: LIST
81370: PUSH
81371: LD_INT 2
81373: PUSH
81374: LD_INT 3
81376: PUSH
81377: EMPTY
81378: LIST
81379: LIST
81380: PUSH
81381: EMPTY
81382: LIST
81383: LIST
81384: LIST
81385: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
81386: LD_ADDR_VAR 0 14
81390: PUSH
81391: LD_INT 1
81393: PUSH
81394: LD_INT 3
81396: PUSH
81397: EMPTY
81398: LIST
81399: LIST
81400: PUSH
81401: LD_INT 0
81403: PUSH
81404: LD_INT 3
81406: PUSH
81407: EMPTY
81408: LIST
81409: LIST
81410: PUSH
81411: LD_INT 1
81413: NEG
81414: PUSH
81415: LD_INT 2
81417: PUSH
81418: EMPTY
81419: LIST
81420: LIST
81421: PUSH
81422: EMPTY
81423: LIST
81424: LIST
81425: LIST
81426: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81427: LD_ADDR_VAR 0 15
81431: PUSH
81432: LD_INT 2
81434: NEG
81435: PUSH
81436: LD_INT 1
81438: PUSH
81439: EMPTY
81440: LIST
81441: LIST
81442: PUSH
81443: LD_INT 3
81445: NEG
81446: PUSH
81447: LD_INT 0
81449: PUSH
81450: EMPTY
81451: LIST
81452: LIST
81453: PUSH
81454: LD_INT 3
81456: NEG
81457: PUSH
81458: LD_INT 1
81460: NEG
81461: PUSH
81462: EMPTY
81463: LIST
81464: LIST
81465: PUSH
81466: EMPTY
81467: LIST
81468: LIST
81469: LIST
81470: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81471: LD_ADDR_VAR 0 16
81475: PUSH
81476: LD_INT 2
81478: NEG
81479: PUSH
81480: LD_INT 3
81482: NEG
81483: PUSH
81484: EMPTY
81485: LIST
81486: LIST
81487: PUSH
81488: LD_INT 3
81490: NEG
81491: PUSH
81492: LD_INT 2
81494: NEG
81495: PUSH
81496: EMPTY
81497: LIST
81498: LIST
81499: PUSH
81500: LD_INT 3
81502: NEG
81503: PUSH
81504: LD_INT 3
81506: NEG
81507: PUSH
81508: EMPTY
81509: LIST
81510: LIST
81511: PUSH
81512: EMPTY
81513: LIST
81514: LIST
81515: LIST
81516: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
81517: LD_ADDR_VAR 0 17
81521: PUSH
81522: LD_INT 1
81524: NEG
81525: PUSH
81526: LD_INT 3
81528: NEG
81529: PUSH
81530: EMPTY
81531: LIST
81532: LIST
81533: PUSH
81534: LD_INT 0
81536: PUSH
81537: LD_INT 3
81539: NEG
81540: PUSH
81541: EMPTY
81542: LIST
81543: LIST
81544: PUSH
81545: LD_INT 1
81547: PUSH
81548: LD_INT 2
81550: NEG
81551: PUSH
81552: EMPTY
81553: LIST
81554: LIST
81555: PUSH
81556: EMPTY
81557: LIST
81558: LIST
81559: LIST
81560: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
81561: LD_ADDR_VAR 0 18
81565: PUSH
81566: LD_INT 2
81568: PUSH
81569: LD_INT 1
81571: NEG
81572: PUSH
81573: EMPTY
81574: LIST
81575: LIST
81576: PUSH
81577: LD_INT 3
81579: PUSH
81580: LD_INT 0
81582: PUSH
81583: EMPTY
81584: LIST
81585: LIST
81586: PUSH
81587: LD_INT 3
81589: PUSH
81590: LD_INT 1
81592: PUSH
81593: EMPTY
81594: LIST
81595: LIST
81596: PUSH
81597: EMPTY
81598: LIST
81599: LIST
81600: LIST
81601: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
81602: LD_ADDR_VAR 0 19
81606: PUSH
81607: LD_INT 3
81609: PUSH
81610: LD_INT 2
81612: PUSH
81613: EMPTY
81614: LIST
81615: LIST
81616: PUSH
81617: LD_INT 3
81619: PUSH
81620: LD_INT 3
81622: PUSH
81623: EMPTY
81624: LIST
81625: LIST
81626: PUSH
81627: LD_INT 2
81629: PUSH
81630: LD_INT 3
81632: PUSH
81633: EMPTY
81634: LIST
81635: LIST
81636: PUSH
81637: EMPTY
81638: LIST
81639: LIST
81640: LIST
81641: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
81642: LD_ADDR_VAR 0 20
81646: PUSH
81647: LD_INT 1
81649: PUSH
81650: LD_INT 3
81652: PUSH
81653: EMPTY
81654: LIST
81655: LIST
81656: PUSH
81657: LD_INT 0
81659: PUSH
81660: LD_INT 3
81662: PUSH
81663: EMPTY
81664: LIST
81665: LIST
81666: PUSH
81667: LD_INT 1
81669: NEG
81670: PUSH
81671: LD_INT 2
81673: PUSH
81674: EMPTY
81675: LIST
81676: LIST
81677: PUSH
81678: EMPTY
81679: LIST
81680: LIST
81681: LIST
81682: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81683: LD_ADDR_VAR 0 21
81687: PUSH
81688: LD_INT 2
81690: NEG
81691: PUSH
81692: LD_INT 1
81694: PUSH
81695: EMPTY
81696: LIST
81697: LIST
81698: PUSH
81699: LD_INT 3
81701: NEG
81702: PUSH
81703: LD_INT 0
81705: PUSH
81706: EMPTY
81707: LIST
81708: LIST
81709: PUSH
81710: LD_INT 3
81712: NEG
81713: PUSH
81714: LD_INT 1
81716: NEG
81717: PUSH
81718: EMPTY
81719: LIST
81720: LIST
81721: PUSH
81722: EMPTY
81723: LIST
81724: LIST
81725: LIST
81726: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81727: LD_ADDR_VAR 0 22
81731: PUSH
81732: LD_INT 2
81734: NEG
81735: PUSH
81736: LD_INT 3
81738: NEG
81739: PUSH
81740: EMPTY
81741: LIST
81742: LIST
81743: PUSH
81744: LD_INT 3
81746: NEG
81747: PUSH
81748: LD_INT 2
81750: NEG
81751: PUSH
81752: EMPTY
81753: LIST
81754: LIST
81755: PUSH
81756: LD_INT 3
81758: NEG
81759: PUSH
81760: LD_INT 3
81762: NEG
81763: PUSH
81764: EMPTY
81765: LIST
81766: LIST
81767: PUSH
81768: EMPTY
81769: LIST
81770: LIST
81771: LIST
81772: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
81773: LD_ADDR_VAR 0 23
81777: PUSH
81778: LD_INT 0
81780: PUSH
81781: LD_INT 3
81783: NEG
81784: PUSH
81785: EMPTY
81786: LIST
81787: LIST
81788: PUSH
81789: LD_INT 1
81791: NEG
81792: PUSH
81793: LD_INT 4
81795: NEG
81796: PUSH
81797: EMPTY
81798: LIST
81799: LIST
81800: PUSH
81801: LD_INT 1
81803: PUSH
81804: LD_INT 3
81806: NEG
81807: PUSH
81808: EMPTY
81809: LIST
81810: LIST
81811: PUSH
81812: EMPTY
81813: LIST
81814: LIST
81815: LIST
81816: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
81817: LD_ADDR_VAR 0 24
81821: PUSH
81822: LD_INT 3
81824: PUSH
81825: LD_INT 0
81827: PUSH
81828: EMPTY
81829: LIST
81830: LIST
81831: PUSH
81832: LD_INT 3
81834: PUSH
81835: LD_INT 1
81837: NEG
81838: PUSH
81839: EMPTY
81840: LIST
81841: LIST
81842: PUSH
81843: LD_INT 4
81845: PUSH
81846: LD_INT 1
81848: PUSH
81849: EMPTY
81850: LIST
81851: LIST
81852: PUSH
81853: EMPTY
81854: LIST
81855: LIST
81856: LIST
81857: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
81858: LD_ADDR_VAR 0 25
81862: PUSH
81863: LD_INT 3
81865: PUSH
81866: LD_INT 3
81868: PUSH
81869: EMPTY
81870: LIST
81871: LIST
81872: PUSH
81873: LD_INT 4
81875: PUSH
81876: LD_INT 3
81878: PUSH
81879: EMPTY
81880: LIST
81881: LIST
81882: PUSH
81883: LD_INT 3
81885: PUSH
81886: LD_INT 4
81888: PUSH
81889: EMPTY
81890: LIST
81891: LIST
81892: PUSH
81893: EMPTY
81894: LIST
81895: LIST
81896: LIST
81897: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
81898: LD_ADDR_VAR 0 26
81902: PUSH
81903: LD_INT 0
81905: PUSH
81906: LD_INT 3
81908: PUSH
81909: EMPTY
81910: LIST
81911: LIST
81912: PUSH
81913: LD_INT 1
81915: PUSH
81916: LD_INT 4
81918: PUSH
81919: EMPTY
81920: LIST
81921: LIST
81922: PUSH
81923: LD_INT 1
81925: NEG
81926: PUSH
81927: LD_INT 3
81929: PUSH
81930: EMPTY
81931: LIST
81932: LIST
81933: PUSH
81934: EMPTY
81935: LIST
81936: LIST
81937: LIST
81938: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
81939: LD_ADDR_VAR 0 27
81943: PUSH
81944: LD_INT 3
81946: NEG
81947: PUSH
81948: LD_INT 0
81950: PUSH
81951: EMPTY
81952: LIST
81953: LIST
81954: PUSH
81955: LD_INT 3
81957: NEG
81958: PUSH
81959: LD_INT 1
81961: PUSH
81962: EMPTY
81963: LIST
81964: LIST
81965: PUSH
81966: LD_INT 4
81968: NEG
81969: PUSH
81970: LD_INT 1
81972: NEG
81973: PUSH
81974: EMPTY
81975: LIST
81976: LIST
81977: PUSH
81978: EMPTY
81979: LIST
81980: LIST
81981: LIST
81982: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
81983: LD_ADDR_VAR 0 28
81987: PUSH
81988: LD_INT 3
81990: NEG
81991: PUSH
81992: LD_INT 3
81994: NEG
81995: PUSH
81996: EMPTY
81997: LIST
81998: LIST
81999: PUSH
82000: LD_INT 3
82002: NEG
82003: PUSH
82004: LD_INT 4
82006: NEG
82007: PUSH
82008: EMPTY
82009: LIST
82010: LIST
82011: PUSH
82012: LD_INT 4
82014: NEG
82015: PUSH
82016: LD_INT 3
82018: NEG
82019: PUSH
82020: EMPTY
82021: LIST
82022: LIST
82023: PUSH
82024: EMPTY
82025: LIST
82026: LIST
82027: LIST
82028: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
82029: LD_ADDR_VAR 0 29
82033: PUSH
82034: LD_INT 1
82036: NEG
82037: PUSH
82038: LD_INT 3
82040: NEG
82041: PUSH
82042: EMPTY
82043: LIST
82044: LIST
82045: PUSH
82046: LD_INT 0
82048: PUSH
82049: LD_INT 3
82051: NEG
82052: PUSH
82053: EMPTY
82054: LIST
82055: LIST
82056: PUSH
82057: LD_INT 1
82059: PUSH
82060: LD_INT 2
82062: NEG
82063: PUSH
82064: EMPTY
82065: LIST
82066: LIST
82067: PUSH
82068: LD_INT 1
82070: NEG
82071: PUSH
82072: LD_INT 4
82074: NEG
82075: PUSH
82076: EMPTY
82077: LIST
82078: LIST
82079: PUSH
82080: LD_INT 0
82082: PUSH
82083: LD_INT 4
82085: NEG
82086: PUSH
82087: EMPTY
82088: LIST
82089: LIST
82090: PUSH
82091: LD_INT 1
82093: PUSH
82094: LD_INT 3
82096: NEG
82097: PUSH
82098: EMPTY
82099: LIST
82100: LIST
82101: PUSH
82102: LD_INT 1
82104: NEG
82105: PUSH
82106: LD_INT 5
82108: NEG
82109: PUSH
82110: EMPTY
82111: LIST
82112: LIST
82113: PUSH
82114: LD_INT 0
82116: PUSH
82117: LD_INT 5
82119: NEG
82120: PUSH
82121: EMPTY
82122: LIST
82123: LIST
82124: PUSH
82125: LD_INT 1
82127: PUSH
82128: LD_INT 4
82130: NEG
82131: PUSH
82132: EMPTY
82133: LIST
82134: LIST
82135: PUSH
82136: LD_INT 1
82138: NEG
82139: PUSH
82140: LD_INT 6
82142: NEG
82143: PUSH
82144: EMPTY
82145: LIST
82146: LIST
82147: PUSH
82148: LD_INT 0
82150: PUSH
82151: LD_INT 6
82153: NEG
82154: PUSH
82155: EMPTY
82156: LIST
82157: LIST
82158: PUSH
82159: LD_INT 1
82161: PUSH
82162: LD_INT 5
82164: NEG
82165: PUSH
82166: EMPTY
82167: LIST
82168: LIST
82169: PUSH
82170: EMPTY
82171: LIST
82172: LIST
82173: LIST
82174: LIST
82175: LIST
82176: LIST
82177: LIST
82178: LIST
82179: LIST
82180: LIST
82181: LIST
82182: LIST
82183: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
82184: LD_ADDR_VAR 0 30
82188: PUSH
82189: LD_INT 2
82191: PUSH
82192: LD_INT 1
82194: NEG
82195: PUSH
82196: EMPTY
82197: LIST
82198: LIST
82199: PUSH
82200: LD_INT 3
82202: PUSH
82203: LD_INT 0
82205: PUSH
82206: EMPTY
82207: LIST
82208: LIST
82209: PUSH
82210: LD_INT 3
82212: PUSH
82213: LD_INT 1
82215: PUSH
82216: EMPTY
82217: LIST
82218: LIST
82219: PUSH
82220: LD_INT 3
82222: PUSH
82223: LD_INT 1
82225: NEG
82226: PUSH
82227: EMPTY
82228: LIST
82229: LIST
82230: PUSH
82231: LD_INT 4
82233: PUSH
82234: LD_INT 0
82236: PUSH
82237: EMPTY
82238: LIST
82239: LIST
82240: PUSH
82241: LD_INT 4
82243: PUSH
82244: LD_INT 1
82246: PUSH
82247: EMPTY
82248: LIST
82249: LIST
82250: PUSH
82251: LD_INT 4
82253: PUSH
82254: LD_INT 1
82256: NEG
82257: PUSH
82258: EMPTY
82259: LIST
82260: LIST
82261: PUSH
82262: LD_INT 5
82264: PUSH
82265: LD_INT 0
82267: PUSH
82268: EMPTY
82269: LIST
82270: LIST
82271: PUSH
82272: LD_INT 5
82274: PUSH
82275: LD_INT 1
82277: PUSH
82278: EMPTY
82279: LIST
82280: LIST
82281: PUSH
82282: LD_INT 5
82284: PUSH
82285: LD_INT 1
82287: NEG
82288: PUSH
82289: EMPTY
82290: LIST
82291: LIST
82292: PUSH
82293: LD_INT 6
82295: PUSH
82296: LD_INT 0
82298: PUSH
82299: EMPTY
82300: LIST
82301: LIST
82302: PUSH
82303: LD_INT 6
82305: PUSH
82306: LD_INT 1
82308: PUSH
82309: EMPTY
82310: LIST
82311: LIST
82312: PUSH
82313: EMPTY
82314: LIST
82315: LIST
82316: LIST
82317: LIST
82318: LIST
82319: LIST
82320: LIST
82321: LIST
82322: LIST
82323: LIST
82324: LIST
82325: LIST
82326: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
82327: LD_ADDR_VAR 0 31
82331: PUSH
82332: LD_INT 3
82334: PUSH
82335: LD_INT 2
82337: PUSH
82338: EMPTY
82339: LIST
82340: LIST
82341: PUSH
82342: LD_INT 3
82344: PUSH
82345: LD_INT 3
82347: PUSH
82348: EMPTY
82349: LIST
82350: LIST
82351: PUSH
82352: LD_INT 2
82354: PUSH
82355: LD_INT 3
82357: PUSH
82358: EMPTY
82359: LIST
82360: LIST
82361: PUSH
82362: LD_INT 4
82364: PUSH
82365: LD_INT 3
82367: PUSH
82368: EMPTY
82369: LIST
82370: LIST
82371: PUSH
82372: LD_INT 4
82374: PUSH
82375: LD_INT 4
82377: PUSH
82378: EMPTY
82379: LIST
82380: LIST
82381: PUSH
82382: LD_INT 3
82384: PUSH
82385: LD_INT 4
82387: PUSH
82388: EMPTY
82389: LIST
82390: LIST
82391: PUSH
82392: LD_INT 5
82394: PUSH
82395: LD_INT 4
82397: PUSH
82398: EMPTY
82399: LIST
82400: LIST
82401: PUSH
82402: LD_INT 5
82404: PUSH
82405: LD_INT 5
82407: PUSH
82408: EMPTY
82409: LIST
82410: LIST
82411: PUSH
82412: LD_INT 4
82414: PUSH
82415: LD_INT 5
82417: PUSH
82418: EMPTY
82419: LIST
82420: LIST
82421: PUSH
82422: LD_INT 6
82424: PUSH
82425: LD_INT 5
82427: PUSH
82428: EMPTY
82429: LIST
82430: LIST
82431: PUSH
82432: LD_INT 6
82434: PUSH
82435: LD_INT 6
82437: PUSH
82438: EMPTY
82439: LIST
82440: LIST
82441: PUSH
82442: LD_INT 5
82444: PUSH
82445: LD_INT 6
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: PUSH
82452: EMPTY
82453: LIST
82454: LIST
82455: LIST
82456: LIST
82457: LIST
82458: LIST
82459: LIST
82460: LIST
82461: LIST
82462: LIST
82463: LIST
82464: LIST
82465: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
82466: LD_ADDR_VAR 0 32
82470: PUSH
82471: LD_INT 1
82473: PUSH
82474: LD_INT 3
82476: PUSH
82477: EMPTY
82478: LIST
82479: LIST
82480: PUSH
82481: LD_INT 0
82483: PUSH
82484: LD_INT 3
82486: PUSH
82487: EMPTY
82488: LIST
82489: LIST
82490: PUSH
82491: LD_INT 1
82493: NEG
82494: PUSH
82495: LD_INT 2
82497: PUSH
82498: EMPTY
82499: LIST
82500: LIST
82501: PUSH
82502: LD_INT 1
82504: PUSH
82505: LD_INT 4
82507: PUSH
82508: EMPTY
82509: LIST
82510: LIST
82511: PUSH
82512: LD_INT 0
82514: PUSH
82515: LD_INT 4
82517: PUSH
82518: EMPTY
82519: LIST
82520: LIST
82521: PUSH
82522: LD_INT 1
82524: NEG
82525: PUSH
82526: LD_INT 3
82528: PUSH
82529: EMPTY
82530: LIST
82531: LIST
82532: PUSH
82533: LD_INT 1
82535: PUSH
82536: LD_INT 5
82538: PUSH
82539: EMPTY
82540: LIST
82541: LIST
82542: PUSH
82543: LD_INT 0
82545: PUSH
82546: LD_INT 5
82548: PUSH
82549: EMPTY
82550: LIST
82551: LIST
82552: PUSH
82553: LD_INT 1
82555: NEG
82556: PUSH
82557: LD_INT 4
82559: PUSH
82560: EMPTY
82561: LIST
82562: LIST
82563: PUSH
82564: LD_INT 1
82566: PUSH
82567: LD_INT 6
82569: PUSH
82570: EMPTY
82571: LIST
82572: LIST
82573: PUSH
82574: LD_INT 0
82576: PUSH
82577: LD_INT 6
82579: PUSH
82580: EMPTY
82581: LIST
82582: LIST
82583: PUSH
82584: LD_INT 1
82586: NEG
82587: PUSH
82588: LD_INT 5
82590: PUSH
82591: EMPTY
82592: LIST
82593: LIST
82594: PUSH
82595: EMPTY
82596: LIST
82597: LIST
82598: LIST
82599: LIST
82600: LIST
82601: LIST
82602: LIST
82603: LIST
82604: LIST
82605: LIST
82606: LIST
82607: LIST
82608: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
82609: LD_ADDR_VAR 0 33
82613: PUSH
82614: LD_INT 2
82616: NEG
82617: PUSH
82618: LD_INT 1
82620: PUSH
82621: EMPTY
82622: LIST
82623: LIST
82624: PUSH
82625: LD_INT 3
82627: NEG
82628: PUSH
82629: LD_INT 0
82631: PUSH
82632: EMPTY
82633: LIST
82634: LIST
82635: PUSH
82636: LD_INT 3
82638: NEG
82639: PUSH
82640: LD_INT 1
82642: NEG
82643: PUSH
82644: EMPTY
82645: LIST
82646: LIST
82647: PUSH
82648: LD_INT 3
82650: NEG
82651: PUSH
82652: LD_INT 1
82654: PUSH
82655: EMPTY
82656: LIST
82657: LIST
82658: PUSH
82659: LD_INT 4
82661: NEG
82662: PUSH
82663: LD_INT 0
82665: PUSH
82666: EMPTY
82667: LIST
82668: LIST
82669: PUSH
82670: LD_INT 4
82672: NEG
82673: PUSH
82674: LD_INT 1
82676: NEG
82677: PUSH
82678: EMPTY
82679: LIST
82680: LIST
82681: PUSH
82682: LD_INT 4
82684: NEG
82685: PUSH
82686: LD_INT 1
82688: PUSH
82689: EMPTY
82690: LIST
82691: LIST
82692: PUSH
82693: LD_INT 5
82695: NEG
82696: PUSH
82697: LD_INT 0
82699: PUSH
82700: EMPTY
82701: LIST
82702: LIST
82703: PUSH
82704: LD_INT 5
82706: NEG
82707: PUSH
82708: LD_INT 1
82710: NEG
82711: PUSH
82712: EMPTY
82713: LIST
82714: LIST
82715: PUSH
82716: LD_INT 5
82718: NEG
82719: PUSH
82720: LD_INT 1
82722: PUSH
82723: EMPTY
82724: LIST
82725: LIST
82726: PUSH
82727: LD_INT 6
82729: NEG
82730: PUSH
82731: LD_INT 0
82733: PUSH
82734: EMPTY
82735: LIST
82736: LIST
82737: PUSH
82738: LD_INT 6
82740: NEG
82741: PUSH
82742: LD_INT 1
82744: NEG
82745: PUSH
82746: EMPTY
82747: LIST
82748: LIST
82749: PUSH
82750: EMPTY
82751: LIST
82752: LIST
82753: LIST
82754: LIST
82755: LIST
82756: LIST
82757: LIST
82758: LIST
82759: LIST
82760: LIST
82761: LIST
82762: LIST
82763: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
82764: LD_ADDR_VAR 0 34
82768: PUSH
82769: LD_INT 2
82771: NEG
82772: PUSH
82773: LD_INT 3
82775: NEG
82776: PUSH
82777: EMPTY
82778: LIST
82779: LIST
82780: PUSH
82781: LD_INT 3
82783: NEG
82784: PUSH
82785: LD_INT 2
82787: NEG
82788: PUSH
82789: EMPTY
82790: LIST
82791: LIST
82792: PUSH
82793: LD_INT 3
82795: NEG
82796: PUSH
82797: LD_INT 3
82799: NEG
82800: PUSH
82801: EMPTY
82802: LIST
82803: LIST
82804: PUSH
82805: LD_INT 3
82807: NEG
82808: PUSH
82809: LD_INT 4
82811: NEG
82812: PUSH
82813: EMPTY
82814: LIST
82815: LIST
82816: PUSH
82817: LD_INT 4
82819: NEG
82820: PUSH
82821: LD_INT 3
82823: NEG
82824: PUSH
82825: EMPTY
82826: LIST
82827: LIST
82828: PUSH
82829: LD_INT 4
82831: NEG
82832: PUSH
82833: LD_INT 4
82835: NEG
82836: PUSH
82837: EMPTY
82838: LIST
82839: LIST
82840: PUSH
82841: LD_INT 4
82843: NEG
82844: PUSH
82845: LD_INT 5
82847: NEG
82848: PUSH
82849: EMPTY
82850: LIST
82851: LIST
82852: PUSH
82853: LD_INT 5
82855: NEG
82856: PUSH
82857: LD_INT 4
82859: NEG
82860: PUSH
82861: EMPTY
82862: LIST
82863: LIST
82864: PUSH
82865: LD_INT 5
82867: NEG
82868: PUSH
82869: LD_INT 5
82871: NEG
82872: PUSH
82873: EMPTY
82874: LIST
82875: LIST
82876: PUSH
82877: LD_INT 5
82879: NEG
82880: PUSH
82881: LD_INT 6
82883: NEG
82884: PUSH
82885: EMPTY
82886: LIST
82887: LIST
82888: PUSH
82889: LD_INT 6
82891: NEG
82892: PUSH
82893: LD_INT 5
82895: NEG
82896: PUSH
82897: EMPTY
82898: LIST
82899: LIST
82900: PUSH
82901: LD_INT 6
82903: NEG
82904: PUSH
82905: LD_INT 6
82907: NEG
82908: PUSH
82909: EMPTY
82910: LIST
82911: LIST
82912: PUSH
82913: EMPTY
82914: LIST
82915: LIST
82916: LIST
82917: LIST
82918: LIST
82919: LIST
82920: LIST
82921: LIST
82922: LIST
82923: LIST
82924: LIST
82925: LIST
82926: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
82927: LD_ADDR_VAR 0 41
82931: PUSH
82932: LD_INT 0
82934: PUSH
82935: LD_INT 2
82937: NEG
82938: PUSH
82939: EMPTY
82940: LIST
82941: LIST
82942: PUSH
82943: LD_INT 1
82945: NEG
82946: PUSH
82947: LD_INT 3
82949: NEG
82950: PUSH
82951: EMPTY
82952: LIST
82953: LIST
82954: PUSH
82955: LD_INT 1
82957: PUSH
82958: LD_INT 2
82960: NEG
82961: PUSH
82962: EMPTY
82963: LIST
82964: LIST
82965: PUSH
82966: EMPTY
82967: LIST
82968: LIST
82969: LIST
82970: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
82971: LD_ADDR_VAR 0 42
82975: PUSH
82976: LD_INT 2
82978: PUSH
82979: LD_INT 0
82981: PUSH
82982: EMPTY
82983: LIST
82984: LIST
82985: PUSH
82986: LD_INT 2
82988: PUSH
82989: LD_INT 1
82991: NEG
82992: PUSH
82993: EMPTY
82994: LIST
82995: LIST
82996: PUSH
82997: LD_INT 3
82999: PUSH
83000: LD_INT 1
83002: PUSH
83003: EMPTY
83004: LIST
83005: LIST
83006: PUSH
83007: EMPTY
83008: LIST
83009: LIST
83010: LIST
83011: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
83012: LD_ADDR_VAR 0 43
83016: PUSH
83017: LD_INT 2
83019: PUSH
83020: LD_INT 2
83022: PUSH
83023: EMPTY
83024: LIST
83025: LIST
83026: PUSH
83027: LD_INT 3
83029: PUSH
83030: LD_INT 2
83032: PUSH
83033: EMPTY
83034: LIST
83035: LIST
83036: PUSH
83037: LD_INT 2
83039: PUSH
83040: LD_INT 3
83042: PUSH
83043: EMPTY
83044: LIST
83045: LIST
83046: PUSH
83047: EMPTY
83048: LIST
83049: LIST
83050: LIST
83051: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
83052: LD_ADDR_VAR 0 44
83056: PUSH
83057: LD_INT 0
83059: PUSH
83060: LD_INT 2
83062: PUSH
83063: EMPTY
83064: LIST
83065: LIST
83066: PUSH
83067: LD_INT 1
83069: PUSH
83070: LD_INT 3
83072: PUSH
83073: EMPTY
83074: LIST
83075: LIST
83076: PUSH
83077: LD_INT 1
83079: NEG
83080: PUSH
83081: LD_INT 2
83083: PUSH
83084: EMPTY
83085: LIST
83086: LIST
83087: PUSH
83088: EMPTY
83089: LIST
83090: LIST
83091: LIST
83092: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
83093: LD_ADDR_VAR 0 45
83097: PUSH
83098: LD_INT 2
83100: NEG
83101: PUSH
83102: LD_INT 0
83104: PUSH
83105: EMPTY
83106: LIST
83107: LIST
83108: PUSH
83109: LD_INT 2
83111: NEG
83112: PUSH
83113: LD_INT 1
83115: PUSH
83116: EMPTY
83117: LIST
83118: LIST
83119: PUSH
83120: LD_INT 3
83122: NEG
83123: PUSH
83124: LD_INT 1
83126: NEG
83127: PUSH
83128: EMPTY
83129: LIST
83130: LIST
83131: PUSH
83132: EMPTY
83133: LIST
83134: LIST
83135: LIST
83136: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
83137: LD_ADDR_VAR 0 46
83141: PUSH
83142: LD_INT 2
83144: NEG
83145: PUSH
83146: LD_INT 2
83148: NEG
83149: PUSH
83150: EMPTY
83151: LIST
83152: LIST
83153: PUSH
83154: LD_INT 2
83156: NEG
83157: PUSH
83158: LD_INT 3
83160: NEG
83161: PUSH
83162: EMPTY
83163: LIST
83164: LIST
83165: PUSH
83166: LD_INT 3
83168: NEG
83169: PUSH
83170: LD_INT 2
83172: NEG
83173: PUSH
83174: EMPTY
83175: LIST
83176: LIST
83177: PUSH
83178: EMPTY
83179: LIST
83180: LIST
83181: LIST
83182: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
83183: LD_ADDR_VAR 0 47
83187: PUSH
83188: LD_INT 2
83190: NEG
83191: PUSH
83192: LD_INT 3
83194: NEG
83195: PUSH
83196: EMPTY
83197: LIST
83198: LIST
83199: PUSH
83200: LD_INT 1
83202: NEG
83203: PUSH
83204: LD_INT 3
83206: NEG
83207: PUSH
83208: EMPTY
83209: LIST
83210: LIST
83211: PUSH
83212: EMPTY
83213: LIST
83214: LIST
83215: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
83216: LD_ADDR_VAR 0 48
83220: PUSH
83221: LD_INT 1
83223: PUSH
83224: LD_INT 2
83226: NEG
83227: PUSH
83228: EMPTY
83229: LIST
83230: LIST
83231: PUSH
83232: LD_INT 2
83234: PUSH
83235: LD_INT 1
83237: NEG
83238: PUSH
83239: EMPTY
83240: LIST
83241: LIST
83242: PUSH
83243: EMPTY
83244: LIST
83245: LIST
83246: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
83247: LD_ADDR_VAR 0 49
83251: PUSH
83252: LD_INT 3
83254: PUSH
83255: LD_INT 1
83257: PUSH
83258: EMPTY
83259: LIST
83260: LIST
83261: PUSH
83262: LD_INT 3
83264: PUSH
83265: LD_INT 2
83267: PUSH
83268: EMPTY
83269: LIST
83270: LIST
83271: PUSH
83272: EMPTY
83273: LIST
83274: LIST
83275: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
83276: LD_ADDR_VAR 0 50
83280: PUSH
83281: LD_INT 2
83283: PUSH
83284: LD_INT 3
83286: PUSH
83287: EMPTY
83288: LIST
83289: LIST
83290: PUSH
83291: LD_INT 1
83293: PUSH
83294: LD_INT 3
83296: PUSH
83297: EMPTY
83298: LIST
83299: LIST
83300: PUSH
83301: EMPTY
83302: LIST
83303: LIST
83304: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
83305: LD_ADDR_VAR 0 51
83309: PUSH
83310: LD_INT 1
83312: NEG
83313: PUSH
83314: LD_INT 2
83316: PUSH
83317: EMPTY
83318: LIST
83319: LIST
83320: PUSH
83321: LD_INT 2
83323: NEG
83324: PUSH
83325: LD_INT 1
83327: PUSH
83328: EMPTY
83329: LIST
83330: LIST
83331: PUSH
83332: EMPTY
83333: LIST
83334: LIST
83335: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
83336: LD_ADDR_VAR 0 52
83340: PUSH
83341: LD_INT 3
83343: NEG
83344: PUSH
83345: LD_INT 1
83347: NEG
83348: PUSH
83349: EMPTY
83350: LIST
83351: LIST
83352: PUSH
83353: LD_INT 3
83355: NEG
83356: PUSH
83357: LD_INT 2
83359: NEG
83360: PUSH
83361: EMPTY
83362: LIST
83363: LIST
83364: PUSH
83365: EMPTY
83366: LIST
83367: LIST
83368: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
83369: LD_ADDR_VAR 0 53
83373: PUSH
83374: LD_INT 1
83376: NEG
83377: PUSH
83378: LD_INT 3
83380: NEG
83381: PUSH
83382: EMPTY
83383: LIST
83384: LIST
83385: PUSH
83386: LD_INT 0
83388: PUSH
83389: LD_INT 3
83391: NEG
83392: PUSH
83393: EMPTY
83394: LIST
83395: LIST
83396: PUSH
83397: LD_INT 1
83399: PUSH
83400: LD_INT 2
83402: NEG
83403: PUSH
83404: EMPTY
83405: LIST
83406: LIST
83407: PUSH
83408: EMPTY
83409: LIST
83410: LIST
83411: LIST
83412: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
83413: LD_ADDR_VAR 0 54
83417: PUSH
83418: LD_INT 2
83420: PUSH
83421: LD_INT 1
83423: NEG
83424: PUSH
83425: EMPTY
83426: LIST
83427: LIST
83428: PUSH
83429: LD_INT 3
83431: PUSH
83432: LD_INT 0
83434: PUSH
83435: EMPTY
83436: LIST
83437: LIST
83438: PUSH
83439: LD_INT 3
83441: PUSH
83442: LD_INT 1
83444: PUSH
83445: EMPTY
83446: LIST
83447: LIST
83448: PUSH
83449: EMPTY
83450: LIST
83451: LIST
83452: LIST
83453: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
83454: LD_ADDR_VAR 0 55
83458: PUSH
83459: LD_INT 3
83461: PUSH
83462: LD_INT 2
83464: PUSH
83465: EMPTY
83466: LIST
83467: LIST
83468: PUSH
83469: LD_INT 3
83471: PUSH
83472: LD_INT 3
83474: PUSH
83475: EMPTY
83476: LIST
83477: LIST
83478: PUSH
83479: LD_INT 2
83481: PUSH
83482: LD_INT 3
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: PUSH
83489: EMPTY
83490: LIST
83491: LIST
83492: LIST
83493: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
83494: LD_ADDR_VAR 0 56
83498: PUSH
83499: LD_INT 1
83501: PUSH
83502: LD_INT 3
83504: PUSH
83505: EMPTY
83506: LIST
83507: LIST
83508: PUSH
83509: LD_INT 0
83511: PUSH
83512: LD_INT 3
83514: PUSH
83515: EMPTY
83516: LIST
83517: LIST
83518: PUSH
83519: LD_INT 1
83521: NEG
83522: PUSH
83523: LD_INT 2
83525: PUSH
83526: EMPTY
83527: LIST
83528: LIST
83529: PUSH
83530: EMPTY
83531: LIST
83532: LIST
83533: LIST
83534: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
83535: LD_ADDR_VAR 0 57
83539: PUSH
83540: LD_INT 2
83542: NEG
83543: PUSH
83544: LD_INT 1
83546: PUSH
83547: EMPTY
83548: LIST
83549: LIST
83550: PUSH
83551: LD_INT 3
83553: NEG
83554: PUSH
83555: LD_INT 0
83557: PUSH
83558: EMPTY
83559: LIST
83560: LIST
83561: PUSH
83562: LD_INT 3
83564: NEG
83565: PUSH
83566: LD_INT 1
83568: NEG
83569: PUSH
83570: EMPTY
83571: LIST
83572: LIST
83573: PUSH
83574: EMPTY
83575: LIST
83576: LIST
83577: LIST
83578: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83579: LD_ADDR_VAR 0 58
83583: PUSH
83584: LD_INT 2
83586: NEG
83587: PUSH
83588: LD_INT 3
83590: NEG
83591: PUSH
83592: EMPTY
83593: LIST
83594: LIST
83595: PUSH
83596: LD_INT 3
83598: NEG
83599: PUSH
83600: LD_INT 2
83602: NEG
83603: PUSH
83604: EMPTY
83605: LIST
83606: LIST
83607: PUSH
83608: LD_INT 3
83610: NEG
83611: PUSH
83612: LD_INT 3
83614: NEG
83615: PUSH
83616: EMPTY
83617: LIST
83618: LIST
83619: PUSH
83620: EMPTY
83621: LIST
83622: LIST
83623: LIST
83624: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
83625: LD_ADDR_VAR 0 59
83629: PUSH
83630: LD_INT 1
83632: NEG
83633: PUSH
83634: LD_INT 2
83636: NEG
83637: PUSH
83638: EMPTY
83639: LIST
83640: LIST
83641: PUSH
83642: LD_INT 0
83644: PUSH
83645: LD_INT 2
83647: NEG
83648: PUSH
83649: EMPTY
83650: LIST
83651: LIST
83652: PUSH
83653: LD_INT 1
83655: PUSH
83656: LD_INT 1
83658: NEG
83659: PUSH
83660: EMPTY
83661: LIST
83662: LIST
83663: PUSH
83664: EMPTY
83665: LIST
83666: LIST
83667: LIST
83668: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
83669: LD_ADDR_VAR 0 60
83673: PUSH
83674: LD_INT 1
83676: PUSH
83677: LD_INT 1
83679: NEG
83680: PUSH
83681: EMPTY
83682: LIST
83683: LIST
83684: PUSH
83685: LD_INT 2
83687: PUSH
83688: LD_INT 0
83690: PUSH
83691: EMPTY
83692: LIST
83693: LIST
83694: PUSH
83695: LD_INT 2
83697: PUSH
83698: LD_INT 1
83700: PUSH
83701: EMPTY
83702: LIST
83703: LIST
83704: PUSH
83705: EMPTY
83706: LIST
83707: LIST
83708: LIST
83709: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
83710: LD_ADDR_VAR 0 61
83714: PUSH
83715: LD_INT 2
83717: PUSH
83718: LD_INT 1
83720: PUSH
83721: EMPTY
83722: LIST
83723: LIST
83724: PUSH
83725: LD_INT 2
83727: PUSH
83728: LD_INT 2
83730: PUSH
83731: EMPTY
83732: LIST
83733: LIST
83734: PUSH
83735: LD_INT 1
83737: PUSH
83738: LD_INT 2
83740: PUSH
83741: EMPTY
83742: LIST
83743: LIST
83744: PUSH
83745: EMPTY
83746: LIST
83747: LIST
83748: LIST
83749: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
83750: LD_ADDR_VAR 0 62
83754: PUSH
83755: LD_INT 1
83757: PUSH
83758: LD_INT 2
83760: PUSH
83761: EMPTY
83762: LIST
83763: LIST
83764: PUSH
83765: LD_INT 0
83767: PUSH
83768: LD_INT 2
83770: PUSH
83771: EMPTY
83772: LIST
83773: LIST
83774: PUSH
83775: LD_INT 1
83777: NEG
83778: PUSH
83779: LD_INT 1
83781: PUSH
83782: EMPTY
83783: LIST
83784: LIST
83785: PUSH
83786: EMPTY
83787: LIST
83788: LIST
83789: LIST
83790: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
83791: LD_ADDR_VAR 0 63
83795: PUSH
83796: LD_INT 1
83798: NEG
83799: PUSH
83800: LD_INT 1
83802: PUSH
83803: EMPTY
83804: LIST
83805: LIST
83806: PUSH
83807: LD_INT 2
83809: NEG
83810: PUSH
83811: LD_INT 0
83813: PUSH
83814: EMPTY
83815: LIST
83816: LIST
83817: PUSH
83818: LD_INT 2
83820: NEG
83821: PUSH
83822: LD_INT 1
83824: NEG
83825: PUSH
83826: EMPTY
83827: LIST
83828: LIST
83829: PUSH
83830: EMPTY
83831: LIST
83832: LIST
83833: LIST
83834: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
83835: LD_ADDR_VAR 0 64
83839: PUSH
83840: LD_INT 1
83842: NEG
83843: PUSH
83844: LD_INT 2
83846: NEG
83847: PUSH
83848: EMPTY
83849: LIST
83850: LIST
83851: PUSH
83852: LD_INT 2
83854: NEG
83855: PUSH
83856: LD_INT 1
83858: NEG
83859: PUSH
83860: EMPTY
83861: LIST
83862: LIST
83863: PUSH
83864: LD_INT 2
83866: NEG
83867: PUSH
83868: LD_INT 2
83870: NEG
83871: PUSH
83872: EMPTY
83873: LIST
83874: LIST
83875: PUSH
83876: EMPTY
83877: LIST
83878: LIST
83879: LIST
83880: ST_TO_ADDR
// end ; 2 :
83881: GO 87147
83883: LD_INT 2
83885: DOUBLE
83886: EQUAL
83887: IFTRUE 83891
83889: GO 87146
83891: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
83892: LD_ADDR_VAR 0 29
83896: PUSH
83897: LD_INT 4
83899: PUSH
83900: LD_INT 0
83902: PUSH
83903: EMPTY
83904: LIST
83905: LIST
83906: PUSH
83907: LD_INT 4
83909: PUSH
83910: LD_INT 1
83912: NEG
83913: PUSH
83914: EMPTY
83915: LIST
83916: LIST
83917: PUSH
83918: LD_INT 5
83920: PUSH
83921: LD_INT 0
83923: PUSH
83924: EMPTY
83925: LIST
83926: LIST
83927: PUSH
83928: LD_INT 5
83930: PUSH
83931: LD_INT 1
83933: PUSH
83934: EMPTY
83935: LIST
83936: LIST
83937: PUSH
83938: LD_INT 4
83940: PUSH
83941: LD_INT 1
83943: PUSH
83944: EMPTY
83945: LIST
83946: LIST
83947: PUSH
83948: LD_INT 3
83950: PUSH
83951: LD_INT 0
83953: PUSH
83954: EMPTY
83955: LIST
83956: LIST
83957: PUSH
83958: LD_INT 3
83960: PUSH
83961: LD_INT 1
83963: NEG
83964: PUSH
83965: EMPTY
83966: LIST
83967: LIST
83968: PUSH
83969: LD_INT 3
83971: PUSH
83972: LD_INT 2
83974: NEG
83975: PUSH
83976: EMPTY
83977: LIST
83978: LIST
83979: PUSH
83980: LD_INT 5
83982: PUSH
83983: LD_INT 2
83985: PUSH
83986: EMPTY
83987: LIST
83988: LIST
83989: PUSH
83990: LD_INT 3
83992: PUSH
83993: LD_INT 3
83995: PUSH
83996: EMPTY
83997: LIST
83998: LIST
83999: PUSH
84000: LD_INT 3
84002: PUSH
84003: LD_INT 2
84005: PUSH
84006: EMPTY
84007: LIST
84008: LIST
84009: PUSH
84010: LD_INT 4
84012: PUSH
84013: LD_INT 3
84015: PUSH
84016: EMPTY
84017: LIST
84018: LIST
84019: PUSH
84020: LD_INT 4
84022: PUSH
84023: LD_INT 4
84025: PUSH
84026: EMPTY
84027: LIST
84028: LIST
84029: PUSH
84030: LD_INT 3
84032: PUSH
84033: LD_INT 4
84035: PUSH
84036: EMPTY
84037: LIST
84038: LIST
84039: PUSH
84040: LD_INT 2
84042: PUSH
84043: LD_INT 3
84045: PUSH
84046: EMPTY
84047: LIST
84048: LIST
84049: PUSH
84050: LD_INT 2
84052: PUSH
84053: LD_INT 2
84055: PUSH
84056: EMPTY
84057: LIST
84058: LIST
84059: PUSH
84060: LD_INT 4
84062: PUSH
84063: LD_INT 2
84065: PUSH
84066: EMPTY
84067: LIST
84068: LIST
84069: PUSH
84070: LD_INT 2
84072: PUSH
84073: LD_INT 4
84075: PUSH
84076: EMPTY
84077: LIST
84078: LIST
84079: PUSH
84080: LD_INT 0
84082: PUSH
84083: LD_INT 4
84085: PUSH
84086: EMPTY
84087: LIST
84088: LIST
84089: PUSH
84090: LD_INT 0
84092: PUSH
84093: LD_INT 3
84095: PUSH
84096: EMPTY
84097: LIST
84098: LIST
84099: PUSH
84100: LD_INT 1
84102: PUSH
84103: LD_INT 4
84105: PUSH
84106: EMPTY
84107: LIST
84108: LIST
84109: PUSH
84110: LD_INT 1
84112: PUSH
84113: LD_INT 5
84115: PUSH
84116: EMPTY
84117: LIST
84118: LIST
84119: PUSH
84120: LD_INT 0
84122: PUSH
84123: LD_INT 5
84125: PUSH
84126: EMPTY
84127: LIST
84128: LIST
84129: PUSH
84130: LD_INT 1
84132: NEG
84133: PUSH
84134: LD_INT 4
84136: PUSH
84137: EMPTY
84138: LIST
84139: LIST
84140: PUSH
84141: LD_INT 1
84143: NEG
84144: PUSH
84145: LD_INT 3
84147: PUSH
84148: EMPTY
84149: LIST
84150: LIST
84151: PUSH
84152: LD_INT 2
84154: PUSH
84155: LD_INT 5
84157: PUSH
84158: EMPTY
84159: LIST
84160: LIST
84161: PUSH
84162: LD_INT 2
84164: NEG
84165: PUSH
84166: LD_INT 3
84168: PUSH
84169: EMPTY
84170: LIST
84171: LIST
84172: PUSH
84173: LD_INT 3
84175: NEG
84176: PUSH
84177: LD_INT 0
84179: PUSH
84180: EMPTY
84181: LIST
84182: LIST
84183: PUSH
84184: LD_INT 3
84186: NEG
84187: PUSH
84188: LD_INT 1
84190: NEG
84191: PUSH
84192: EMPTY
84193: LIST
84194: LIST
84195: PUSH
84196: LD_INT 2
84198: NEG
84199: PUSH
84200: LD_INT 0
84202: PUSH
84203: EMPTY
84204: LIST
84205: LIST
84206: PUSH
84207: LD_INT 2
84209: NEG
84210: PUSH
84211: LD_INT 1
84213: PUSH
84214: EMPTY
84215: LIST
84216: LIST
84217: PUSH
84218: LD_INT 3
84220: NEG
84221: PUSH
84222: LD_INT 1
84224: PUSH
84225: EMPTY
84226: LIST
84227: LIST
84228: PUSH
84229: LD_INT 4
84231: NEG
84232: PUSH
84233: LD_INT 0
84235: PUSH
84236: EMPTY
84237: LIST
84238: LIST
84239: PUSH
84240: LD_INT 4
84242: NEG
84243: PUSH
84244: LD_INT 1
84246: NEG
84247: PUSH
84248: EMPTY
84249: LIST
84250: LIST
84251: PUSH
84252: LD_INT 4
84254: NEG
84255: PUSH
84256: LD_INT 2
84258: NEG
84259: PUSH
84260: EMPTY
84261: LIST
84262: LIST
84263: PUSH
84264: LD_INT 2
84266: NEG
84267: PUSH
84268: LD_INT 2
84270: PUSH
84271: EMPTY
84272: LIST
84273: LIST
84274: PUSH
84275: LD_INT 4
84277: NEG
84278: PUSH
84279: LD_INT 4
84281: NEG
84282: PUSH
84283: EMPTY
84284: LIST
84285: LIST
84286: PUSH
84287: LD_INT 4
84289: NEG
84290: PUSH
84291: LD_INT 5
84293: NEG
84294: PUSH
84295: EMPTY
84296: LIST
84297: LIST
84298: PUSH
84299: LD_INT 3
84301: NEG
84302: PUSH
84303: LD_INT 4
84305: NEG
84306: PUSH
84307: EMPTY
84308: LIST
84309: LIST
84310: PUSH
84311: LD_INT 3
84313: NEG
84314: PUSH
84315: LD_INT 3
84317: NEG
84318: PUSH
84319: EMPTY
84320: LIST
84321: LIST
84322: PUSH
84323: LD_INT 4
84325: NEG
84326: PUSH
84327: LD_INT 3
84329: NEG
84330: PUSH
84331: EMPTY
84332: LIST
84333: LIST
84334: PUSH
84335: LD_INT 5
84337: NEG
84338: PUSH
84339: LD_INT 4
84341: NEG
84342: PUSH
84343: EMPTY
84344: LIST
84345: LIST
84346: PUSH
84347: LD_INT 5
84349: NEG
84350: PUSH
84351: LD_INT 5
84353: NEG
84354: PUSH
84355: EMPTY
84356: LIST
84357: LIST
84358: PUSH
84359: LD_INT 3
84361: NEG
84362: PUSH
84363: LD_INT 5
84365: NEG
84366: PUSH
84367: EMPTY
84368: LIST
84369: LIST
84370: PUSH
84371: LD_INT 5
84373: NEG
84374: PUSH
84375: LD_INT 3
84377: NEG
84378: PUSH
84379: EMPTY
84380: LIST
84381: LIST
84382: PUSH
84383: EMPTY
84384: LIST
84385: LIST
84386: LIST
84387: LIST
84388: LIST
84389: LIST
84390: LIST
84391: LIST
84392: LIST
84393: LIST
84394: LIST
84395: LIST
84396: LIST
84397: LIST
84398: LIST
84399: LIST
84400: LIST
84401: LIST
84402: LIST
84403: LIST
84404: LIST
84405: LIST
84406: LIST
84407: LIST
84408: LIST
84409: LIST
84410: LIST
84411: LIST
84412: LIST
84413: LIST
84414: LIST
84415: LIST
84416: LIST
84417: LIST
84418: LIST
84419: LIST
84420: LIST
84421: LIST
84422: LIST
84423: LIST
84424: LIST
84425: LIST
84426: LIST
84427: LIST
84428: LIST
84429: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
84430: LD_ADDR_VAR 0 30
84434: PUSH
84435: LD_INT 4
84437: PUSH
84438: LD_INT 4
84440: PUSH
84441: EMPTY
84442: LIST
84443: LIST
84444: PUSH
84445: LD_INT 4
84447: PUSH
84448: LD_INT 3
84450: PUSH
84451: EMPTY
84452: LIST
84453: LIST
84454: PUSH
84455: LD_INT 5
84457: PUSH
84458: LD_INT 4
84460: PUSH
84461: EMPTY
84462: LIST
84463: LIST
84464: PUSH
84465: LD_INT 5
84467: PUSH
84468: LD_INT 5
84470: PUSH
84471: EMPTY
84472: LIST
84473: LIST
84474: PUSH
84475: LD_INT 4
84477: PUSH
84478: LD_INT 5
84480: PUSH
84481: EMPTY
84482: LIST
84483: LIST
84484: PUSH
84485: LD_INT 3
84487: PUSH
84488: LD_INT 4
84490: PUSH
84491: EMPTY
84492: LIST
84493: LIST
84494: PUSH
84495: LD_INT 3
84497: PUSH
84498: LD_INT 3
84500: PUSH
84501: EMPTY
84502: LIST
84503: LIST
84504: PUSH
84505: LD_INT 5
84507: PUSH
84508: LD_INT 3
84510: PUSH
84511: EMPTY
84512: LIST
84513: LIST
84514: PUSH
84515: LD_INT 3
84517: PUSH
84518: LD_INT 5
84520: PUSH
84521: EMPTY
84522: LIST
84523: LIST
84524: PUSH
84525: LD_INT 0
84527: PUSH
84528: LD_INT 3
84530: PUSH
84531: EMPTY
84532: LIST
84533: LIST
84534: PUSH
84535: LD_INT 0
84537: PUSH
84538: LD_INT 2
84540: PUSH
84541: EMPTY
84542: LIST
84543: LIST
84544: PUSH
84545: LD_INT 1
84547: PUSH
84548: LD_INT 3
84550: PUSH
84551: EMPTY
84552: LIST
84553: LIST
84554: PUSH
84555: LD_INT 1
84557: PUSH
84558: LD_INT 4
84560: PUSH
84561: EMPTY
84562: LIST
84563: LIST
84564: PUSH
84565: LD_INT 0
84567: PUSH
84568: LD_INT 4
84570: PUSH
84571: EMPTY
84572: LIST
84573: LIST
84574: PUSH
84575: LD_INT 1
84577: NEG
84578: PUSH
84579: LD_INT 3
84581: PUSH
84582: EMPTY
84583: LIST
84584: LIST
84585: PUSH
84586: LD_INT 1
84588: NEG
84589: PUSH
84590: LD_INT 2
84592: PUSH
84593: EMPTY
84594: LIST
84595: LIST
84596: PUSH
84597: LD_INT 2
84599: PUSH
84600: LD_INT 4
84602: PUSH
84603: EMPTY
84604: LIST
84605: LIST
84606: PUSH
84607: LD_INT 2
84609: NEG
84610: PUSH
84611: LD_INT 2
84613: PUSH
84614: EMPTY
84615: LIST
84616: LIST
84617: PUSH
84618: LD_INT 4
84620: NEG
84621: PUSH
84622: LD_INT 0
84624: PUSH
84625: EMPTY
84626: LIST
84627: LIST
84628: PUSH
84629: LD_INT 4
84631: NEG
84632: PUSH
84633: LD_INT 1
84635: NEG
84636: PUSH
84637: EMPTY
84638: LIST
84639: LIST
84640: PUSH
84641: LD_INT 3
84643: NEG
84644: PUSH
84645: LD_INT 0
84647: PUSH
84648: EMPTY
84649: LIST
84650: LIST
84651: PUSH
84652: LD_INT 3
84654: NEG
84655: PUSH
84656: LD_INT 1
84658: PUSH
84659: EMPTY
84660: LIST
84661: LIST
84662: PUSH
84663: LD_INT 4
84665: NEG
84666: PUSH
84667: LD_INT 1
84669: PUSH
84670: EMPTY
84671: LIST
84672: LIST
84673: PUSH
84674: LD_INT 5
84676: NEG
84677: PUSH
84678: LD_INT 0
84680: PUSH
84681: EMPTY
84682: LIST
84683: LIST
84684: PUSH
84685: LD_INT 5
84687: NEG
84688: PUSH
84689: LD_INT 1
84691: NEG
84692: PUSH
84693: EMPTY
84694: LIST
84695: LIST
84696: PUSH
84697: LD_INT 5
84699: NEG
84700: PUSH
84701: LD_INT 2
84703: NEG
84704: PUSH
84705: EMPTY
84706: LIST
84707: LIST
84708: PUSH
84709: LD_INT 3
84711: NEG
84712: PUSH
84713: LD_INT 2
84715: PUSH
84716: EMPTY
84717: LIST
84718: LIST
84719: PUSH
84720: LD_INT 3
84722: NEG
84723: PUSH
84724: LD_INT 3
84726: NEG
84727: PUSH
84728: EMPTY
84729: LIST
84730: LIST
84731: PUSH
84732: LD_INT 3
84734: NEG
84735: PUSH
84736: LD_INT 4
84738: NEG
84739: PUSH
84740: EMPTY
84741: LIST
84742: LIST
84743: PUSH
84744: LD_INT 2
84746: NEG
84747: PUSH
84748: LD_INT 3
84750: NEG
84751: PUSH
84752: EMPTY
84753: LIST
84754: LIST
84755: PUSH
84756: LD_INT 2
84758: NEG
84759: PUSH
84760: LD_INT 2
84762: NEG
84763: PUSH
84764: EMPTY
84765: LIST
84766: LIST
84767: PUSH
84768: LD_INT 3
84770: NEG
84771: PUSH
84772: LD_INT 2
84774: NEG
84775: PUSH
84776: EMPTY
84777: LIST
84778: LIST
84779: PUSH
84780: LD_INT 4
84782: NEG
84783: PUSH
84784: LD_INT 3
84786: NEG
84787: PUSH
84788: EMPTY
84789: LIST
84790: LIST
84791: PUSH
84792: LD_INT 4
84794: NEG
84795: PUSH
84796: LD_INT 4
84798: NEG
84799: PUSH
84800: EMPTY
84801: LIST
84802: LIST
84803: PUSH
84804: LD_INT 2
84806: NEG
84807: PUSH
84808: LD_INT 4
84810: NEG
84811: PUSH
84812: EMPTY
84813: LIST
84814: LIST
84815: PUSH
84816: LD_INT 4
84818: NEG
84819: PUSH
84820: LD_INT 2
84822: NEG
84823: PUSH
84824: EMPTY
84825: LIST
84826: LIST
84827: PUSH
84828: LD_INT 0
84830: PUSH
84831: LD_INT 4
84833: NEG
84834: PUSH
84835: EMPTY
84836: LIST
84837: LIST
84838: PUSH
84839: LD_INT 0
84841: PUSH
84842: LD_INT 5
84844: NEG
84845: PUSH
84846: EMPTY
84847: LIST
84848: LIST
84849: PUSH
84850: LD_INT 1
84852: PUSH
84853: LD_INT 4
84855: NEG
84856: PUSH
84857: EMPTY
84858: LIST
84859: LIST
84860: PUSH
84861: LD_INT 1
84863: PUSH
84864: LD_INT 3
84866: NEG
84867: PUSH
84868: EMPTY
84869: LIST
84870: LIST
84871: PUSH
84872: LD_INT 0
84874: PUSH
84875: LD_INT 3
84877: NEG
84878: PUSH
84879: EMPTY
84880: LIST
84881: LIST
84882: PUSH
84883: LD_INT 1
84885: NEG
84886: PUSH
84887: LD_INT 4
84889: NEG
84890: PUSH
84891: EMPTY
84892: LIST
84893: LIST
84894: PUSH
84895: LD_INT 1
84897: NEG
84898: PUSH
84899: LD_INT 5
84901: NEG
84902: PUSH
84903: EMPTY
84904: LIST
84905: LIST
84906: PUSH
84907: LD_INT 2
84909: PUSH
84910: LD_INT 3
84912: NEG
84913: PUSH
84914: EMPTY
84915: LIST
84916: LIST
84917: PUSH
84918: LD_INT 2
84920: NEG
84921: PUSH
84922: LD_INT 5
84924: NEG
84925: PUSH
84926: EMPTY
84927: LIST
84928: LIST
84929: PUSH
84930: EMPTY
84931: LIST
84932: LIST
84933: LIST
84934: LIST
84935: LIST
84936: LIST
84937: LIST
84938: LIST
84939: LIST
84940: LIST
84941: LIST
84942: LIST
84943: LIST
84944: LIST
84945: LIST
84946: LIST
84947: LIST
84948: LIST
84949: LIST
84950: LIST
84951: LIST
84952: LIST
84953: LIST
84954: LIST
84955: LIST
84956: LIST
84957: LIST
84958: LIST
84959: LIST
84960: LIST
84961: LIST
84962: LIST
84963: LIST
84964: LIST
84965: LIST
84966: LIST
84967: LIST
84968: LIST
84969: LIST
84970: LIST
84971: LIST
84972: LIST
84973: LIST
84974: LIST
84975: LIST
84976: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
84977: LD_ADDR_VAR 0 31
84981: PUSH
84982: LD_INT 0
84984: PUSH
84985: LD_INT 4
84987: PUSH
84988: EMPTY
84989: LIST
84990: LIST
84991: PUSH
84992: LD_INT 0
84994: PUSH
84995: LD_INT 3
84997: PUSH
84998: EMPTY
84999: LIST
85000: LIST
85001: PUSH
85002: LD_INT 1
85004: PUSH
85005: LD_INT 4
85007: PUSH
85008: EMPTY
85009: LIST
85010: LIST
85011: PUSH
85012: LD_INT 1
85014: PUSH
85015: LD_INT 5
85017: PUSH
85018: EMPTY
85019: LIST
85020: LIST
85021: PUSH
85022: LD_INT 0
85024: PUSH
85025: LD_INT 5
85027: PUSH
85028: EMPTY
85029: LIST
85030: LIST
85031: PUSH
85032: LD_INT 1
85034: NEG
85035: PUSH
85036: LD_INT 4
85038: PUSH
85039: EMPTY
85040: LIST
85041: LIST
85042: PUSH
85043: LD_INT 1
85045: NEG
85046: PUSH
85047: LD_INT 3
85049: PUSH
85050: EMPTY
85051: LIST
85052: LIST
85053: PUSH
85054: LD_INT 2
85056: PUSH
85057: LD_INT 5
85059: PUSH
85060: EMPTY
85061: LIST
85062: LIST
85063: PUSH
85064: LD_INT 2
85066: NEG
85067: PUSH
85068: LD_INT 3
85070: PUSH
85071: EMPTY
85072: LIST
85073: LIST
85074: PUSH
85075: LD_INT 3
85077: NEG
85078: PUSH
85079: LD_INT 0
85081: PUSH
85082: EMPTY
85083: LIST
85084: LIST
85085: PUSH
85086: LD_INT 3
85088: NEG
85089: PUSH
85090: LD_INT 1
85092: NEG
85093: PUSH
85094: EMPTY
85095: LIST
85096: LIST
85097: PUSH
85098: LD_INT 2
85100: NEG
85101: PUSH
85102: LD_INT 0
85104: PUSH
85105: EMPTY
85106: LIST
85107: LIST
85108: PUSH
85109: LD_INT 2
85111: NEG
85112: PUSH
85113: LD_INT 1
85115: PUSH
85116: EMPTY
85117: LIST
85118: LIST
85119: PUSH
85120: LD_INT 3
85122: NEG
85123: PUSH
85124: LD_INT 1
85126: PUSH
85127: EMPTY
85128: LIST
85129: LIST
85130: PUSH
85131: LD_INT 4
85133: NEG
85134: PUSH
85135: LD_INT 0
85137: PUSH
85138: EMPTY
85139: LIST
85140: LIST
85141: PUSH
85142: LD_INT 4
85144: NEG
85145: PUSH
85146: LD_INT 1
85148: NEG
85149: PUSH
85150: EMPTY
85151: LIST
85152: LIST
85153: PUSH
85154: LD_INT 4
85156: NEG
85157: PUSH
85158: LD_INT 2
85160: NEG
85161: PUSH
85162: EMPTY
85163: LIST
85164: LIST
85165: PUSH
85166: LD_INT 2
85168: NEG
85169: PUSH
85170: LD_INT 2
85172: PUSH
85173: EMPTY
85174: LIST
85175: LIST
85176: PUSH
85177: LD_INT 4
85179: NEG
85180: PUSH
85181: LD_INT 4
85183: NEG
85184: PUSH
85185: EMPTY
85186: LIST
85187: LIST
85188: PUSH
85189: LD_INT 4
85191: NEG
85192: PUSH
85193: LD_INT 5
85195: NEG
85196: PUSH
85197: EMPTY
85198: LIST
85199: LIST
85200: PUSH
85201: LD_INT 3
85203: NEG
85204: PUSH
85205: LD_INT 4
85207: NEG
85208: PUSH
85209: EMPTY
85210: LIST
85211: LIST
85212: PUSH
85213: LD_INT 3
85215: NEG
85216: PUSH
85217: LD_INT 3
85219: NEG
85220: PUSH
85221: EMPTY
85222: LIST
85223: LIST
85224: PUSH
85225: LD_INT 4
85227: NEG
85228: PUSH
85229: LD_INT 3
85231: NEG
85232: PUSH
85233: EMPTY
85234: LIST
85235: LIST
85236: PUSH
85237: LD_INT 5
85239: NEG
85240: PUSH
85241: LD_INT 4
85243: NEG
85244: PUSH
85245: EMPTY
85246: LIST
85247: LIST
85248: PUSH
85249: LD_INT 5
85251: NEG
85252: PUSH
85253: LD_INT 5
85255: NEG
85256: PUSH
85257: EMPTY
85258: LIST
85259: LIST
85260: PUSH
85261: LD_INT 3
85263: NEG
85264: PUSH
85265: LD_INT 5
85267: NEG
85268: PUSH
85269: EMPTY
85270: LIST
85271: LIST
85272: PUSH
85273: LD_INT 5
85275: NEG
85276: PUSH
85277: LD_INT 3
85279: NEG
85280: PUSH
85281: EMPTY
85282: LIST
85283: LIST
85284: PUSH
85285: LD_INT 0
85287: PUSH
85288: LD_INT 3
85290: NEG
85291: PUSH
85292: EMPTY
85293: LIST
85294: LIST
85295: PUSH
85296: LD_INT 0
85298: PUSH
85299: LD_INT 4
85301: NEG
85302: PUSH
85303: EMPTY
85304: LIST
85305: LIST
85306: PUSH
85307: LD_INT 1
85309: PUSH
85310: LD_INT 3
85312: NEG
85313: PUSH
85314: EMPTY
85315: LIST
85316: LIST
85317: PUSH
85318: LD_INT 1
85320: PUSH
85321: LD_INT 2
85323: NEG
85324: PUSH
85325: EMPTY
85326: LIST
85327: LIST
85328: PUSH
85329: LD_INT 0
85331: PUSH
85332: LD_INT 2
85334: NEG
85335: PUSH
85336: EMPTY
85337: LIST
85338: LIST
85339: PUSH
85340: LD_INT 1
85342: NEG
85343: PUSH
85344: LD_INT 3
85346: NEG
85347: PUSH
85348: EMPTY
85349: LIST
85350: LIST
85351: PUSH
85352: LD_INT 1
85354: NEG
85355: PUSH
85356: LD_INT 4
85358: NEG
85359: PUSH
85360: EMPTY
85361: LIST
85362: LIST
85363: PUSH
85364: LD_INT 2
85366: PUSH
85367: LD_INT 2
85369: NEG
85370: PUSH
85371: EMPTY
85372: LIST
85373: LIST
85374: PUSH
85375: LD_INT 2
85377: NEG
85378: PUSH
85379: LD_INT 4
85381: NEG
85382: PUSH
85383: EMPTY
85384: LIST
85385: LIST
85386: PUSH
85387: LD_INT 4
85389: PUSH
85390: LD_INT 0
85392: PUSH
85393: EMPTY
85394: LIST
85395: LIST
85396: PUSH
85397: LD_INT 4
85399: PUSH
85400: LD_INT 1
85402: NEG
85403: PUSH
85404: EMPTY
85405: LIST
85406: LIST
85407: PUSH
85408: LD_INT 5
85410: PUSH
85411: LD_INT 0
85413: PUSH
85414: EMPTY
85415: LIST
85416: LIST
85417: PUSH
85418: LD_INT 5
85420: PUSH
85421: LD_INT 1
85423: PUSH
85424: EMPTY
85425: LIST
85426: LIST
85427: PUSH
85428: LD_INT 4
85430: PUSH
85431: LD_INT 1
85433: PUSH
85434: EMPTY
85435: LIST
85436: LIST
85437: PUSH
85438: LD_INT 3
85440: PUSH
85441: LD_INT 0
85443: PUSH
85444: EMPTY
85445: LIST
85446: LIST
85447: PUSH
85448: LD_INT 3
85450: PUSH
85451: LD_INT 1
85453: NEG
85454: PUSH
85455: EMPTY
85456: LIST
85457: LIST
85458: PUSH
85459: LD_INT 3
85461: PUSH
85462: LD_INT 2
85464: NEG
85465: PUSH
85466: EMPTY
85467: LIST
85468: LIST
85469: PUSH
85470: LD_INT 5
85472: PUSH
85473: LD_INT 2
85475: PUSH
85476: EMPTY
85477: LIST
85478: LIST
85479: PUSH
85480: EMPTY
85481: LIST
85482: LIST
85483: LIST
85484: LIST
85485: LIST
85486: LIST
85487: LIST
85488: LIST
85489: LIST
85490: LIST
85491: LIST
85492: LIST
85493: LIST
85494: LIST
85495: LIST
85496: LIST
85497: LIST
85498: LIST
85499: LIST
85500: LIST
85501: LIST
85502: LIST
85503: LIST
85504: LIST
85505: LIST
85506: LIST
85507: LIST
85508: LIST
85509: LIST
85510: LIST
85511: LIST
85512: LIST
85513: LIST
85514: LIST
85515: LIST
85516: LIST
85517: LIST
85518: LIST
85519: LIST
85520: LIST
85521: LIST
85522: LIST
85523: LIST
85524: LIST
85525: LIST
85526: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
85527: LD_ADDR_VAR 0 32
85531: PUSH
85532: LD_INT 4
85534: NEG
85535: PUSH
85536: LD_INT 0
85538: PUSH
85539: EMPTY
85540: LIST
85541: LIST
85542: PUSH
85543: LD_INT 4
85545: NEG
85546: PUSH
85547: LD_INT 1
85549: NEG
85550: PUSH
85551: EMPTY
85552: LIST
85553: LIST
85554: PUSH
85555: LD_INT 3
85557: NEG
85558: PUSH
85559: LD_INT 0
85561: PUSH
85562: EMPTY
85563: LIST
85564: LIST
85565: PUSH
85566: LD_INT 3
85568: NEG
85569: PUSH
85570: LD_INT 1
85572: PUSH
85573: EMPTY
85574: LIST
85575: LIST
85576: PUSH
85577: LD_INT 4
85579: NEG
85580: PUSH
85581: LD_INT 1
85583: PUSH
85584: EMPTY
85585: LIST
85586: LIST
85587: PUSH
85588: LD_INT 5
85590: NEG
85591: PUSH
85592: LD_INT 0
85594: PUSH
85595: EMPTY
85596: LIST
85597: LIST
85598: PUSH
85599: LD_INT 5
85601: NEG
85602: PUSH
85603: LD_INT 1
85605: NEG
85606: PUSH
85607: EMPTY
85608: LIST
85609: LIST
85610: PUSH
85611: LD_INT 5
85613: NEG
85614: PUSH
85615: LD_INT 2
85617: NEG
85618: PUSH
85619: EMPTY
85620: LIST
85621: LIST
85622: PUSH
85623: LD_INT 3
85625: NEG
85626: PUSH
85627: LD_INT 2
85629: PUSH
85630: EMPTY
85631: LIST
85632: LIST
85633: PUSH
85634: LD_INT 3
85636: NEG
85637: PUSH
85638: LD_INT 3
85640: NEG
85641: PUSH
85642: EMPTY
85643: LIST
85644: LIST
85645: PUSH
85646: LD_INT 3
85648: NEG
85649: PUSH
85650: LD_INT 4
85652: NEG
85653: PUSH
85654: EMPTY
85655: LIST
85656: LIST
85657: PUSH
85658: LD_INT 2
85660: NEG
85661: PUSH
85662: LD_INT 3
85664: NEG
85665: PUSH
85666: EMPTY
85667: LIST
85668: LIST
85669: PUSH
85670: LD_INT 2
85672: NEG
85673: PUSH
85674: LD_INT 2
85676: NEG
85677: PUSH
85678: EMPTY
85679: LIST
85680: LIST
85681: PUSH
85682: LD_INT 3
85684: NEG
85685: PUSH
85686: LD_INT 2
85688: NEG
85689: PUSH
85690: EMPTY
85691: LIST
85692: LIST
85693: PUSH
85694: LD_INT 4
85696: NEG
85697: PUSH
85698: LD_INT 3
85700: NEG
85701: PUSH
85702: EMPTY
85703: LIST
85704: LIST
85705: PUSH
85706: LD_INT 4
85708: NEG
85709: PUSH
85710: LD_INT 4
85712: NEG
85713: PUSH
85714: EMPTY
85715: LIST
85716: LIST
85717: PUSH
85718: LD_INT 2
85720: NEG
85721: PUSH
85722: LD_INT 4
85724: NEG
85725: PUSH
85726: EMPTY
85727: LIST
85728: LIST
85729: PUSH
85730: LD_INT 4
85732: NEG
85733: PUSH
85734: LD_INT 2
85736: NEG
85737: PUSH
85738: EMPTY
85739: LIST
85740: LIST
85741: PUSH
85742: LD_INT 0
85744: PUSH
85745: LD_INT 4
85747: NEG
85748: PUSH
85749: EMPTY
85750: LIST
85751: LIST
85752: PUSH
85753: LD_INT 0
85755: PUSH
85756: LD_INT 5
85758: NEG
85759: PUSH
85760: EMPTY
85761: LIST
85762: LIST
85763: PUSH
85764: LD_INT 1
85766: PUSH
85767: LD_INT 4
85769: NEG
85770: PUSH
85771: EMPTY
85772: LIST
85773: LIST
85774: PUSH
85775: LD_INT 1
85777: PUSH
85778: LD_INT 3
85780: NEG
85781: PUSH
85782: EMPTY
85783: LIST
85784: LIST
85785: PUSH
85786: LD_INT 0
85788: PUSH
85789: LD_INT 3
85791: NEG
85792: PUSH
85793: EMPTY
85794: LIST
85795: LIST
85796: PUSH
85797: LD_INT 1
85799: NEG
85800: PUSH
85801: LD_INT 4
85803: NEG
85804: PUSH
85805: EMPTY
85806: LIST
85807: LIST
85808: PUSH
85809: LD_INT 1
85811: NEG
85812: PUSH
85813: LD_INT 5
85815: NEG
85816: PUSH
85817: EMPTY
85818: LIST
85819: LIST
85820: PUSH
85821: LD_INT 2
85823: PUSH
85824: LD_INT 3
85826: NEG
85827: PUSH
85828: EMPTY
85829: LIST
85830: LIST
85831: PUSH
85832: LD_INT 2
85834: NEG
85835: PUSH
85836: LD_INT 5
85838: NEG
85839: PUSH
85840: EMPTY
85841: LIST
85842: LIST
85843: PUSH
85844: LD_INT 3
85846: PUSH
85847: LD_INT 0
85849: PUSH
85850: EMPTY
85851: LIST
85852: LIST
85853: PUSH
85854: LD_INT 3
85856: PUSH
85857: LD_INT 1
85859: NEG
85860: PUSH
85861: EMPTY
85862: LIST
85863: LIST
85864: PUSH
85865: LD_INT 4
85867: PUSH
85868: LD_INT 0
85870: PUSH
85871: EMPTY
85872: LIST
85873: LIST
85874: PUSH
85875: LD_INT 4
85877: PUSH
85878: LD_INT 1
85880: PUSH
85881: EMPTY
85882: LIST
85883: LIST
85884: PUSH
85885: LD_INT 3
85887: PUSH
85888: LD_INT 1
85890: PUSH
85891: EMPTY
85892: LIST
85893: LIST
85894: PUSH
85895: LD_INT 2
85897: PUSH
85898: LD_INT 0
85900: PUSH
85901: EMPTY
85902: LIST
85903: LIST
85904: PUSH
85905: LD_INT 2
85907: PUSH
85908: LD_INT 1
85910: NEG
85911: PUSH
85912: EMPTY
85913: LIST
85914: LIST
85915: PUSH
85916: LD_INT 2
85918: PUSH
85919: LD_INT 2
85921: NEG
85922: PUSH
85923: EMPTY
85924: LIST
85925: LIST
85926: PUSH
85927: LD_INT 4
85929: PUSH
85930: LD_INT 2
85932: PUSH
85933: EMPTY
85934: LIST
85935: LIST
85936: PUSH
85937: LD_INT 4
85939: PUSH
85940: LD_INT 4
85942: PUSH
85943: EMPTY
85944: LIST
85945: LIST
85946: PUSH
85947: LD_INT 4
85949: PUSH
85950: LD_INT 3
85952: PUSH
85953: EMPTY
85954: LIST
85955: LIST
85956: PUSH
85957: LD_INT 5
85959: PUSH
85960: LD_INT 4
85962: PUSH
85963: EMPTY
85964: LIST
85965: LIST
85966: PUSH
85967: LD_INT 5
85969: PUSH
85970: LD_INT 5
85972: PUSH
85973: EMPTY
85974: LIST
85975: LIST
85976: PUSH
85977: LD_INT 4
85979: PUSH
85980: LD_INT 5
85982: PUSH
85983: EMPTY
85984: LIST
85985: LIST
85986: PUSH
85987: LD_INT 3
85989: PUSH
85990: LD_INT 4
85992: PUSH
85993: EMPTY
85994: LIST
85995: LIST
85996: PUSH
85997: LD_INT 3
85999: PUSH
86000: LD_INT 3
86002: PUSH
86003: EMPTY
86004: LIST
86005: LIST
86006: PUSH
86007: LD_INT 5
86009: PUSH
86010: LD_INT 3
86012: PUSH
86013: EMPTY
86014: LIST
86015: LIST
86016: PUSH
86017: LD_INT 3
86019: PUSH
86020: LD_INT 5
86022: PUSH
86023: EMPTY
86024: LIST
86025: LIST
86026: PUSH
86027: EMPTY
86028: LIST
86029: LIST
86030: LIST
86031: LIST
86032: LIST
86033: LIST
86034: LIST
86035: LIST
86036: LIST
86037: LIST
86038: LIST
86039: LIST
86040: LIST
86041: LIST
86042: LIST
86043: LIST
86044: LIST
86045: LIST
86046: LIST
86047: LIST
86048: LIST
86049: LIST
86050: LIST
86051: LIST
86052: LIST
86053: LIST
86054: LIST
86055: LIST
86056: LIST
86057: LIST
86058: LIST
86059: LIST
86060: LIST
86061: LIST
86062: LIST
86063: LIST
86064: LIST
86065: LIST
86066: LIST
86067: LIST
86068: LIST
86069: LIST
86070: LIST
86071: LIST
86072: LIST
86073: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
86074: LD_ADDR_VAR 0 33
86078: PUSH
86079: LD_INT 4
86081: NEG
86082: PUSH
86083: LD_INT 4
86085: NEG
86086: PUSH
86087: EMPTY
86088: LIST
86089: LIST
86090: PUSH
86091: LD_INT 4
86093: NEG
86094: PUSH
86095: LD_INT 5
86097: NEG
86098: PUSH
86099: EMPTY
86100: LIST
86101: LIST
86102: PUSH
86103: LD_INT 3
86105: NEG
86106: PUSH
86107: LD_INT 4
86109: NEG
86110: PUSH
86111: EMPTY
86112: LIST
86113: LIST
86114: PUSH
86115: LD_INT 3
86117: NEG
86118: PUSH
86119: LD_INT 3
86121: NEG
86122: PUSH
86123: EMPTY
86124: LIST
86125: LIST
86126: PUSH
86127: LD_INT 4
86129: NEG
86130: PUSH
86131: LD_INT 3
86133: NEG
86134: PUSH
86135: EMPTY
86136: LIST
86137: LIST
86138: PUSH
86139: LD_INT 5
86141: NEG
86142: PUSH
86143: LD_INT 4
86145: NEG
86146: PUSH
86147: EMPTY
86148: LIST
86149: LIST
86150: PUSH
86151: LD_INT 5
86153: NEG
86154: PUSH
86155: LD_INT 5
86157: NEG
86158: PUSH
86159: EMPTY
86160: LIST
86161: LIST
86162: PUSH
86163: LD_INT 3
86165: NEG
86166: PUSH
86167: LD_INT 5
86169: NEG
86170: PUSH
86171: EMPTY
86172: LIST
86173: LIST
86174: PUSH
86175: LD_INT 5
86177: NEG
86178: PUSH
86179: LD_INT 3
86181: NEG
86182: PUSH
86183: EMPTY
86184: LIST
86185: LIST
86186: PUSH
86187: LD_INT 0
86189: PUSH
86190: LD_INT 3
86192: NEG
86193: PUSH
86194: EMPTY
86195: LIST
86196: LIST
86197: PUSH
86198: LD_INT 0
86200: PUSH
86201: LD_INT 4
86203: NEG
86204: PUSH
86205: EMPTY
86206: LIST
86207: LIST
86208: PUSH
86209: LD_INT 1
86211: PUSH
86212: LD_INT 3
86214: NEG
86215: PUSH
86216: EMPTY
86217: LIST
86218: LIST
86219: PUSH
86220: LD_INT 1
86222: PUSH
86223: LD_INT 2
86225: NEG
86226: PUSH
86227: EMPTY
86228: LIST
86229: LIST
86230: PUSH
86231: LD_INT 0
86233: PUSH
86234: LD_INT 2
86236: NEG
86237: PUSH
86238: EMPTY
86239: LIST
86240: LIST
86241: PUSH
86242: LD_INT 1
86244: NEG
86245: PUSH
86246: LD_INT 3
86248: NEG
86249: PUSH
86250: EMPTY
86251: LIST
86252: LIST
86253: PUSH
86254: LD_INT 1
86256: NEG
86257: PUSH
86258: LD_INT 4
86260: NEG
86261: PUSH
86262: EMPTY
86263: LIST
86264: LIST
86265: PUSH
86266: LD_INT 2
86268: PUSH
86269: LD_INT 2
86271: NEG
86272: PUSH
86273: EMPTY
86274: LIST
86275: LIST
86276: PUSH
86277: LD_INT 2
86279: NEG
86280: PUSH
86281: LD_INT 4
86283: NEG
86284: PUSH
86285: EMPTY
86286: LIST
86287: LIST
86288: PUSH
86289: LD_INT 4
86291: PUSH
86292: LD_INT 0
86294: PUSH
86295: EMPTY
86296: LIST
86297: LIST
86298: PUSH
86299: LD_INT 4
86301: PUSH
86302: LD_INT 1
86304: NEG
86305: PUSH
86306: EMPTY
86307: LIST
86308: LIST
86309: PUSH
86310: LD_INT 5
86312: PUSH
86313: LD_INT 0
86315: PUSH
86316: EMPTY
86317: LIST
86318: LIST
86319: PUSH
86320: LD_INT 5
86322: PUSH
86323: LD_INT 1
86325: PUSH
86326: EMPTY
86327: LIST
86328: LIST
86329: PUSH
86330: LD_INT 4
86332: PUSH
86333: LD_INT 1
86335: PUSH
86336: EMPTY
86337: LIST
86338: LIST
86339: PUSH
86340: LD_INT 3
86342: PUSH
86343: LD_INT 0
86345: PUSH
86346: EMPTY
86347: LIST
86348: LIST
86349: PUSH
86350: LD_INT 3
86352: PUSH
86353: LD_INT 1
86355: NEG
86356: PUSH
86357: EMPTY
86358: LIST
86359: LIST
86360: PUSH
86361: LD_INT 3
86363: PUSH
86364: LD_INT 2
86366: NEG
86367: PUSH
86368: EMPTY
86369: LIST
86370: LIST
86371: PUSH
86372: LD_INT 5
86374: PUSH
86375: LD_INT 2
86377: PUSH
86378: EMPTY
86379: LIST
86380: LIST
86381: PUSH
86382: LD_INT 3
86384: PUSH
86385: LD_INT 3
86387: PUSH
86388: EMPTY
86389: LIST
86390: LIST
86391: PUSH
86392: LD_INT 3
86394: PUSH
86395: LD_INT 2
86397: PUSH
86398: EMPTY
86399: LIST
86400: LIST
86401: PUSH
86402: LD_INT 4
86404: PUSH
86405: LD_INT 3
86407: PUSH
86408: EMPTY
86409: LIST
86410: LIST
86411: PUSH
86412: LD_INT 4
86414: PUSH
86415: LD_INT 4
86417: PUSH
86418: EMPTY
86419: LIST
86420: LIST
86421: PUSH
86422: LD_INT 3
86424: PUSH
86425: LD_INT 4
86427: PUSH
86428: EMPTY
86429: LIST
86430: LIST
86431: PUSH
86432: LD_INT 2
86434: PUSH
86435: LD_INT 3
86437: PUSH
86438: EMPTY
86439: LIST
86440: LIST
86441: PUSH
86442: LD_INT 2
86444: PUSH
86445: LD_INT 2
86447: PUSH
86448: EMPTY
86449: LIST
86450: LIST
86451: PUSH
86452: LD_INT 4
86454: PUSH
86455: LD_INT 2
86457: PUSH
86458: EMPTY
86459: LIST
86460: LIST
86461: PUSH
86462: LD_INT 2
86464: PUSH
86465: LD_INT 4
86467: PUSH
86468: EMPTY
86469: LIST
86470: LIST
86471: PUSH
86472: LD_INT 0
86474: PUSH
86475: LD_INT 4
86477: PUSH
86478: EMPTY
86479: LIST
86480: LIST
86481: PUSH
86482: LD_INT 0
86484: PUSH
86485: LD_INT 3
86487: PUSH
86488: EMPTY
86489: LIST
86490: LIST
86491: PUSH
86492: LD_INT 1
86494: PUSH
86495: LD_INT 4
86497: PUSH
86498: EMPTY
86499: LIST
86500: LIST
86501: PUSH
86502: LD_INT 1
86504: PUSH
86505: LD_INT 5
86507: PUSH
86508: EMPTY
86509: LIST
86510: LIST
86511: PUSH
86512: LD_INT 0
86514: PUSH
86515: LD_INT 5
86517: PUSH
86518: EMPTY
86519: LIST
86520: LIST
86521: PUSH
86522: LD_INT 1
86524: NEG
86525: PUSH
86526: LD_INT 4
86528: PUSH
86529: EMPTY
86530: LIST
86531: LIST
86532: PUSH
86533: LD_INT 1
86535: NEG
86536: PUSH
86537: LD_INT 3
86539: PUSH
86540: EMPTY
86541: LIST
86542: LIST
86543: PUSH
86544: LD_INT 2
86546: PUSH
86547: LD_INT 5
86549: PUSH
86550: EMPTY
86551: LIST
86552: LIST
86553: PUSH
86554: LD_INT 2
86556: NEG
86557: PUSH
86558: LD_INT 3
86560: PUSH
86561: EMPTY
86562: LIST
86563: LIST
86564: PUSH
86565: EMPTY
86566: LIST
86567: LIST
86568: LIST
86569: LIST
86570: LIST
86571: LIST
86572: LIST
86573: LIST
86574: LIST
86575: LIST
86576: LIST
86577: LIST
86578: LIST
86579: LIST
86580: LIST
86581: LIST
86582: LIST
86583: LIST
86584: LIST
86585: LIST
86586: LIST
86587: LIST
86588: LIST
86589: LIST
86590: LIST
86591: LIST
86592: LIST
86593: LIST
86594: LIST
86595: LIST
86596: LIST
86597: LIST
86598: LIST
86599: LIST
86600: LIST
86601: LIST
86602: LIST
86603: LIST
86604: LIST
86605: LIST
86606: LIST
86607: LIST
86608: LIST
86609: LIST
86610: LIST
86611: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
86612: LD_ADDR_VAR 0 34
86616: PUSH
86617: LD_INT 0
86619: PUSH
86620: LD_INT 4
86622: NEG
86623: PUSH
86624: EMPTY
86625: LIST
86626: LIST
86627: PUSH
86628: LD_INT 0
86630: PUSH
86631: LD_INT 5
86633: NEG
86634: PUSH
86635: EMPTY
86636: LIST
86637: LIST
86638: PUSH
86639: LD_INT 1
86641: PUSH
86642: LD_INT 4
86644: NEG
86645: PUSH
86646: EMPTY
86647: LIST
86648: LIST
86649: PUSH
86650: LD_INT 1
86652: PUSH
86653: LD_INT 3
86655: NEG
86656: PUSH
86657: EMPTY
86658: LIST
86659: LIST
86660: PUSH
86661: LD_INT 0
86663: PUSH
86664: LD_INT 3
86666: NEG
86667: PUSH
86668: EMPTY
86669: LIST
86670: LIST
86671: PUSH
86672: LD_INT 1
86674: NEG
86675: PUSH
86676: LD_INT 4
86678: NEG
86679: PUSH
86680: EMPTY
86681: LIST
86682: LIST
86683: PUSH
86684: LD_INT 1
86686: NEG
86687: PUSH
86688: LD_INT 5
86690: NEG
86691: PUSH
86692: EMPTY
86693: LIST
86694: LIST
86695: PUSH
86696: LD_INT 2
86698: PUSH
86699: LD_INT 3
86701: NEG
86702: PUSH
86703: EMPTY
86704: LIST
86705: LIST
86706: PUSH
86707: LD_INT 2
86709: NEG
86710: PUSH
86711: LD_INT 5
86713: NEG
86714: PUSH
86715: EMPTY
86716: LIST
86717: LIST
86718: PUSH
86719: LD_INT 3
86721: PUSH
86722: LD_INT 0
86724: PUSH
86725: EMPTY
86726: LIST
86727: LIST
86728: PUSH
86729: LD_INT 3
86731: PUSH
86732: LD_INT 1
86734: NEG
86735: PUSH
86736: EMPTY
86737: LIST
86738: LIST
86739: PUSH
86740: LD_INT 4
86742: PUSH
86743: LD_INT 0
86745: PUSH
86746: EMPTY
86747: LIST
86748: LIST
86749: PUSH
86750: LD_INT 4
86752: PUSH
86753: LD_INT 1
86755: PUSH
86756: EMPTY
86757: LIST
86758: LIST
86759: PUSH
86760: LD_INT 3
86762: PUSH
86763: LD_INT 1
86765: PUSH
86766: EMPTY
86767: LIST
86768: LIST
86769: PUSH
86770: LD_INT 2
86772: PUSH
86773: LD_INT 0
86775: PUSH
86776: EMPTY
86777: LIST
86778: LIST
86779: PUSH
86780: LD_INT 2
86782: PUSH
86783: LD_INT 1
86785: NEG
86786: PUSH
86787: EMPTY
86788: LIST
86789: LIST
86790: PUSH
86791: LD_INT 2
86793: PUSH
86794: LD_INT 2
86796: NEG
86797: PUSH
86798: EMPTY
86799: LIST
86800: LIST
86801: PUSH
86802: LD_INT 4
86804: PUSH
86805: LD_INT 2
86807: PUSH
86808: EMPTY
86809: LIST
86810: LIST
86811: PUSH
86812: LD_INT 4
86814: PUSH
86815: LD_INT 4
86817: PUSH
86818: EMPTY
86819: LIST
86820: LIST
86821: PUSH
86822: LD_INT 4
86824: PUSH
86825: LD_INT 3
86827: PUSH
86828: EMPTY
86829: LIST
86830: LIST
86831: PUSH
86832: LD_INT 5
86834: PUSH
86835: LD_INT 4
86837: PUSH
86838: EMPTY
86839: LIST
86840: LIST
86841: PUSH
86842: LD_INT 5
86844: PUSH
86845: LD_INT 5
86847: PUSH
86848: EMPTY
86849: LIST
86850: LIST
86851: PUSH
86852: LD_INT 4
86854: PUSH
86855: LD_INT 5
86857: PUSH
86858: EMPTY
86859: LIST
86860: LIST
86861: PUSH
86862: LD_INT 3
86864: PUSH
86865: LD_INT 4
86867: PUSH
86868: EMPTY
86869: LIST
86870: LIST
86871: PUSH
86872: LD_INT 3
86874: PUSH
86875: LD_INT 3
86877: PUSH
86878: EMPTY
86879: LIST
86880: LIST
86881: PUSH
86882: LD_INT 5
86884: PUSH
86885: LD_INT 3
86887: PUSH
86888: EMPTY
86889: LIST
86890: LIST
86891: PUSH
86892: LD_INT 3
86894: PUSH
86895: LD_INT 5
86897: PUSH
86898: EMPTY
86899: LIST
86900: LIST
86901: PUSH
86902: LD_INT 0
86904: PUSH
86905: LD_INT 3
86907: PUSH
86908: EMPTY
86909: LIST
86910: LIST
86911: PUSH
86912: LD_INT 0
86914: PUSH
86915: LD_INT 2
86917: PUSH
86918: EMPTY
86919: LIST
86920: LIST
86921: PUSH
86922: LD_INT 1
86924: PUSH
86925: LD_INT 3
86927: PUSH
86928: EMPTY
86929: LIST
86930: LIST
86931: PUSH
86932: LD_INT 1
86934: PUSH
86935: LD_INT 4
86937: PUSH
86938: EMPTY
86939: LIST
86940: LIST
86941: PUSH
86942: LD_INT 0
86944: PUSH
86945: LD_INT 4
86947: PUSH
86948: EMPTY
86949: LIST
86950: LIST
86951: PUSH
86952: LD_INT 1
86954: NEG
86955: PUSH
86956: LD_INT 3
86958: PUSH
86959: EMPTY
86960: LIST
86961: LIST
86962: PUSH
86963: LD_INT 1
86965: NEG
86966: PUSH
86967: LD_INT 2
86969: PUSH
86970: EMPTY
86971: LIST
86972: LIST
86973: PUSH
86974: LD_INT 2
86976: PUSH
86977: LD_INT 4
86979: PUSH
86980: EMPTY
86981: LIST
86982: LIST
86983: PUSH
86984: LD_INT 2
86986: NEG
86987: PUSH
86988: LD_INT 2
86990: PUSH
86991: EMPTY
86992: LIST
86993: LIST
86994: PUSH
86995: LD_INT 4
86997: NEG
86998: PUSH
86999: LD_INT 0
87001: PUSH
87002: EMPTY
87003: LIST
87004: LIST
87005: PUSH
87006: LD_INT 4
87008: NEG
87009: PUSH
87010: LD_INT 1
87012: NEG
87013: PUSH
87014: EMPTY
87015: LIST
87016: LIST
87017: PUSH
87018: LD_INT 3
87020: NEG
87021: PUSH
87022: LD_INT 0
87024: PUSH
87025: EMPTY
87026: LIST
87027: LIST
87028: PUSH
87029: LD_INT 3
87031: NEG
87032: PUSH
87033: LD_INT 1
87035: PUSH
87036: EMPTY
87037: LIST
87038: LIST
87039: PUSH
87040: LD_INT 4
87042: NEG
87043: PUSH
87044: LD_INT 1
87046: PUSH
87047: EMPTY
87048: LIST
87049: LIST
87050: PUSH
87051: LD_INT 5
87053: NEG
87054: PUSH
87055: LD_INT 0
87057: PUSH
87058: EMPTY
87059: LIST
87060: LIST
87061: PUSH
87062: LD_INT 5
87064: NEG
87065: PUSH
87066: LD_INT 1
87068: NEG
87069: PUSH
87070: EMPTY
87071: LIST
87072: LIST
87073: PUSH
87074: LD_INT 5
87076: NEG
87077: PUSH
87078: LD_INT 2
87080: NEG
87081: PUSH
87082: EMPTY
87083: LIST
87084: LIST
87085: PUSH
87086: LD_INT 3
87088: NEG
87089: PUSH
87090: LD_INT 2
87092: PUSH
87093: EMPTY
87094: LIST
87095: LIST
87096: PUSH
87097: EMPTY
87098: LIST
87099: LIST
87100: LIST
87101: LIST
87102: LIST
87103: LIST
87104: LIST
87105: LIST
87106: LIST
87107: LIST
87108: LIST
87109: LIST
87110: LIST
87111: LIST
87112: LIST
87113: LIST
87114: LIST
87115: LIST
87116: LIST
87117: LIST
87118: LIST
87119: LIST
87120: LIST
87121: LIST
87122: LIST
87123: LIST
87124: LIST
87125: LIST
87126: LIST
87127: LIST
87128: LIST
87129: LIST
87130: LIST
87131: LIST
87132: LIST
87133: LIST
87134: LIST
87135: LIST
87136: LIST
87137: LIST
87138: LIST
87139: LIST
87140: LIST
87141: LIST
87142: LIST
87143: ST_TO_ADDR
// end ; end ;
87144: GO 87147
87146: POP
// case btype of b_depot , b_warehouse :
87147: LD_VAR 0 1
87151: PUSH
87152: LD_INT 0
87154: DOUBLE
87155: EQUAL
87156: IFTRUE 87166
87158: LD_INT 1
87160: DOUBLE
87161: EQUAL
87162: IFTRUE 87166
87164: GO 87367
87166: POP
// case nation of nation_american :
87167: LD_VAR 0 5
87171: PUSH
87172: LD_INT 1
87174: DOUBLE
87175: EQUAL
87176: IFTRUE 87180
87178: GO 87236
87180: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
87181: LD_ADDR_VAR 0 9
87185: PUSH
87186: LD_VAR 0 11
87190: PUSH
87191: LD_VAR 0 12
87195: PUSH
87196: LD_VAR 0 13
87200: PUSH
87201: LD_VAR 0 14
87205: PUSH
87206: LD_VAR 0 15
87210: PUSH
87211: LD_VAR 0 16
87215: PUSH
87216: EMPTY
87217: LIST
87218: LIST
87219: LIST
87220: LIST
87221: LIST
87222: LIST
87223: PUSH
87224: LD_VAR 0 4
87228: PUSH
87229: LD_INT 1
87231: PLUS
87232: ARRAY
87233: ST_TO_ADDR
87234: GO 87365
87236: LD_INT 2
87238: DOUBLE
87239: EQUAL
87240: IFTRUE 87244
87242: GO 87300
87244: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
87245: LD_ADDR_VAR 0 9
87249: PUSH
87250: LD_VAR 0 17
87254: PUSH
87255: LD_VAR 0 18
87259: PUSH
87260: LD_VAR 0 19
87264: PUSH
87265: LD_VAR 0 20
87269: PUSH
87270: LD_VAR 0 21
87274: PUSH
87275: LD_VAR 0 22
87279: PUSH
87280: EMPTY
87281: LIST
87282: LIST
87283: LIST
87284: LIST
87285: LIST
87286: LIST
87287: PUSH
87288: LD_VAR 0 4
87292: PUSH
87293: LD_INT 1
87295: PLUS
87296: ARRAY
87297: ST_TO_ADDR
87298: GO 87365
87300: LD_INT 3
87302: DOUBLE
87303: EQUAL
87304: IFTRUE 87308
87306: GO 87364
87308: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
87309: LD_ADDR_VAR 0 9
87313: PUSH
87314: LD_VAR 0 23
87318: PUSH
87319: LD_VAR 0 24
87323: PUSH
87324: LD_VAR 0 25
87328: PUSH
87329: LD_VAR 0 26
87333: PUSH
87334: LD_VAR 0 27
87338: PUSH
87339: LD_VAR 0 28
87343: PUSH
87344: EMPTY
87345: LIST
87346: LIST
87347: LIST
87348: LIST
87349: LIST
87350: LIST
87351: PUSH
87352: LD_VAR 0 4
87356: PUSH
87357: LD_INT 1
87359: PLUS
87360: ARRAY
87361: ST_TO_ADDR
87362: GO 87365
87364: POP
87365: GO 87920
87367: LD_INT 2
87369: DOUBLE
87370: EQUAL
87371: IFTRUE 87381
87373: LD_INT 3
87375: DOUBLE
87376: EQUAL
87377: IFTRUE 87381
87379: GO 87437
87381: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
87382: LD_ADDR_VAR 0 9
87386: PUSH
87387: LD_VAR 0 29
87391: PUSH
87392: LD_VAR 0 30
87396: PUSH
87397: LD_VAR 0 31
87401: PUSH
87402: LD_VAR 0 32
87406: PUSH
87407: LD_VAR 0 33
87411: PUSH
87412: LD_VAR 0 34
87416: PUSH
87417: EMPTY
87418: LIST
87419: LIST
87420: LIST
87421: LIST
87422: LIST
87423: LIST
87424: PUSH
87425: LD_VAR 0 4
87429: PUSH
87430: LD_INT 1
87432: PLUS
87433: ARRAY
87434: ST_TO_ADDR
87435: GO 87920
87437: LD_INT 16
87439: DOUBLE
87440: EQUAL
87441: IFTRUE 87499
87443: LD_INT 17
87445: DOUBLE
87446: EQUAL
87447: IFTRUE 87499
87449: LD_INT 18
87451: DOUBLE
87452: EQUAL
87453: IFTRUE 87499
87455: LD_INT 19
87457: DOUBLE
87458: EQUAL
87459: IFTRUE 87499
87461: LD_INT 22
87463: DOUBLE
87464: EQUAL
87465: IFTRUE 87499
87467: LD_INT 20
87469: DOUBLE
87470: EQUAL
87471: IFTRUE 87499
87473: LD_INT 21
87475: DOUBLE
87476: EQUAL
87477: IFTRUE 87499
87479: LD_INT 23
87481: DOUBLE
87482: EQUAL
87483: IFTRUE 87499
87485: LD_INT 24
87487: DOUBLE
87488: EQUAL
87489: IFTRUE 87499
87491: LD_INT 25
87493: DOUBLE
87494: EQUAL
87495: IFTRUE 87499
87497: GO 87555
87499: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
87500: LD_ADDR_VAR 0 9
87504: PUSH
87505: LD_VAR 0 35
87509: PUSH
87510: LD_VAR 0 36
87514: PUSH
87515: LD_VAR 0 37
87519: PUSH
87520: LD_VAR 0 38
87524: PUSH
87525: LD_VAR 0 39
87529: PUSH
87530: LD_VAR 0 40
87534: PUSH
87535: EMPTY
87536: LIST
87537: LIST
87538: LIST
87539: LIST
87540: LIST
87541: LIST
87542: PUSH
87543: LD_VAR 0 4
87547: PUSH
87548: LD_INT 1
87550: PLUS
87551: ARRAY
87552: ST_TO_ADDR
87553: GO 87920
87555: LD_INT 6
87557: DOUBLE
87558: EQUAL
87559: IFTRUE 87611
87561: LD_INT 7
87563: DOUBLE
87564: EQUAL
87565: IFTRUE 87611
87567: LD_INT 8
87569: DOUBLE
87570: EQUAL
87571: IFTRUE 87611
87573: LD_INT 13
87575: DOUBLE
87576: EQUAL
87577: IFTRUE 87611
87579: LD_INT 12
87581: DOUBLE
87582: EQUAL
87583: IFTRUE 87611
87585: LD_INT 15
87587: DOUBLE
87588: EQUAL
87589: IFTRUE 87611
87591: LD_INT 11
87593: DOUBLE
87594: EQUAL
87595: IFTRUE 87611
87597: LD_INT 14
87599: DOUBLE
87600: EQUAL
87601: IFTRUE 87611
87603: LD_INT 10
87605: DOUBLE
87606: EQUAL
87607: IFTRUE 87611
87609: GO 87667
87611: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
87612: LD_ADDR_VAR 0 9
87616: PUSH
87617: LD_VAR 0 41
87621: PUSH
87622: LD_VAR 0 42
87626: PUSH
87627: LD_VAR 0 43
87631: PUSH
87632: LD_VAR 0 44
87636: PUSH
87637: LD_VAR 0 45
87641: PUSH
87642: LD_VAR 0 46
87646: PUSH
87647: EMPTY
87648: LIST
87649: LIST
87650: LIST
87651: LIST
87652: LIST
87653: LIST
87654: PUSH
87655: LD_VAR 0 4
87659: PUSH
87660: LD_INT 1
87662: PLUS
87663: ARRAY
87664: ST_TO_ADDR
87665: GO 87920
87667: LD_INT 36
87669: DOUBLE
87670: EQUAL
87671: IFTRUE 87675
87673: GO 87731
87675: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
87676: LD_ADDR_VAR 0 9
87680: PUSH
87681: LD_VAR 0 47
87685: PUSH
87686: LD_VAR 0 48
87690: PUSH
87691: LD_VAR 0 49
87695: PUSH
87696: LD_VAR 0 50
87700: PUSH
87701: LD_VAR 0 51
87705: PUSH
87706: LD_VAR 0 52
87710: PUSH
87711: EMPTY
87712: LIST
87713: LIST
87714: LIST
87715: LIST
87716: LIST
87717: LIST
87718: PUSH
87719: LD_VAR 0 4
87723: PUSH
87724: LD_INT 1
87726: PLUS
87727: ARRAY
87728: ST_TO_ADDR
87729: GO 87920
87731: LD_INT 4
87733: DOUBLE
87734: EQUAL
87735: IFTRUE 87757
87737: LD_INT 5
87739: DOUBLE
87740: EQUAL
87741: IFTRUE 87757
87743: LD_INT 34
87745: DOUBLE
87746: EQUAL
87747: IFTRUE 87757
87749: LD_INT 37
87751: DOUBLE
87752: EQUAL
87753: IFTRUE 87757
87755: GO 87813
87757: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
87758: LD_ADDR_VAR 0 9
87762: PUSH
87763: LD_VAR 0 53
87767: PUSH
87768: LD_VAR 0 54
87772: PUSH
87773: LD_VAR 0 55
87777: PUSH
87778: LD_VAR 0 56
87782: PUSH
87783: LD_VAR 0 57
87787: PUSH
87788: LD_VAR 0 58
87792: PUSH
87793: EMPTY
87794: LIST
87795: LIST
87796: LIST
87797: LIST
87798: LIST
87799: LIST
87800: PUSH
87801: LD_VAR 0 4
87805: PUSH
87806: LD_INT 1
87808: PLUS
87809: ARRAY
87810: ST_TO_ADDR
87811: GO 87920
87813: LD_INT 31
87815: DOUBLE
87816: EQUAL
87817: IFTRUE 87863
87819: LD_INT 32
87821: DOUBLE
87822: EQUAL
87823: IFTRUE 87863
87825: LD_INT 33
87827: DOUBLE
87828: EQUAL
87829: IFTRUE 87863
87831: LD_INT 27
87833: DOUBLE
87834: EQUAL
87835: IFTRUE 87863
87837: LD_INT 26
87839: DOUBLE
87840: EQUAL
87841: IFTRUE 87863
87843: LD_INT 28
87845: DOUBLE
87846: EQUAL
87847: IFTRUE 87863
87849: LD_INT 29
87851: DOUBLE
87852: EQUAL
87853: IFTRUE 87863
87855: LD_INT 30
87857: DOUBLE
87858: EQUAL
87859: IFTRUE 87863
87861: GO 87919
87863: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
87864: LD_ADDR_VAR 0 9
87868: PUSH
87869: LD_VAR 0 59
87873: PUSH
87874: LD_VAR 0 60
87878: PUSH
87879: LD_VAR 0 61
87883: PUSH
87884: LD_VAR 0 62
87888: PUSH
87889: LD_VAR 0 63
87893: PUSH
87894: LD_VAR 0 64
87898: PUSH
87899: EMPTY
87900: LIST
87901: LIST
87902: LIST
87903: LIST
87904: LIST
87905: LIST
87906: PUSH
87907: LD_VAR 0 4
87911: PUSH
87912: LD_INT 1
87914: PLUS
87915: ARRAY
87916: ST_TO_ADDR
87917: GO 87920
87919: POP
// temp_list2 = [ ] ;
87920: LD_ADDR_VAR 0 10
87924: PUSH
87925: EMPTY
87926: ST_TO_ADDR
// for i in temp_list do
87927: LD_ADDR_VAR 0 8
87931: PUSH
87932: LD_VAR 0 9
87936: PUSH
87937: FOR_IN
87938: IFFALSE 87990
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
87940: LD_ADDR_VAR 0 10
87944: PUSH
87945: LD_VAR 0 10
87949: PUSH
87950: LD_VAR 0 8
87954: PUSH
87955: LD_INT 1
87957: ARRAY
87958: PUSH
87959: LD_VAR 0 2
87963: PLUS
87964: PUSH
87965: LD_VAR 0 8
87969: PUSH
87970: LD_INT 2
87972: ARRAY
87973: PUSH
87974: LD_VAR 0 3
87978: PLUS
87979: PUSH
87980: EMPTY
87981: LIST
87982: LIST
87983: PUSH
87984: EMPTY
87985: LIST
87986: ADD
87987: ST_TO_ADDR
87988: GO 87937
87990: POP
87991: POP
// result = temp_list2 ;
87992: LD_ADDR_VAR 0 7
87996: PUSH
87997: LD_VAR 0 10
88001: ST_TO_ADDR
// end ;
88002: LD_VAR 0 7
88006: RET
// export function EnemyInRange ( unit , dist ) ; begin
88007: LD_INT 0
88009: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
88010: LD_ADDR_VAR 0 3
88014: PUSH
88015: LD_VAR 0 1
88019: PPUSH
88020: CALL_OW 255
88024: PPUSH
88025: LD_VAR 0 1
88029: PPUSH
88030: CALL_OW 250
88034: PPUSH
88035: LD_VAR 0 1
88039: PPUSH
88040: CALL_OW 251
88044: PPUSH
88045: LD_VAR 0 2
88049: PPUSH
88050: CALL 61380 0 4
88054: PUSH
88055: LD_INT 4
88057: ARRAY
88058: ST_TO_ADDR
// end ;
88059: LD_VAR 0 3
88063: RET
// export function PlayerSeeMe ( unit ) ; begin
88064: LD_INT 0
88066: PPUSH
// result := See ( your_side , unit ) ;
88067: LD_ADDR_VAR 0 2
88071: PUSH
88072: LD_OWVAR 2
88076: PPUSH
88077: LD_VAR 0 1
88081: PPUSH
88082: CALL_OW 292
88086: ST_TO_ADDR
// end ;
88087: LD_VAR 0 2
88091: RET
// export function ReverseDir ( unit ) ; begin
88092: LD_INT 0
88094: PPUSH
// if not unit then
88095: LD_VAR 0 1
88099: NOT
88100: IFFALSE 88104
// exit ;
88102: GO 88127
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
88104: LD_ADDR_VAR 0 2
88108: PUSH
88109: LD_VAR 0 1
88113: PPUSH
88114: CALL_OW 254
88118: PUSH
88119: LD_INT 3
88121: PLUS
88122: PUSH
88123: LD_INT 6
88125: MOD
88126: ST_TO_ADDR
// end ;
88127: LD_VAR 0 2
88131: RET
// export function ReverseArray ( array ) ; var i ; begin
88132: LD_INT 0
88134: PPUSH
88135: PPUSH
// if not array then
88136: LD_VAR 0 1
88140: NOT
88141: IFFALSE 88145
// exit ;
88143: GO 88200
// result := [ ] ;
88145: LD_ADDR_VAR 0 2
88149: PUSH
88150: EMPTY
88151: ST_TO_ADDR
// for i := array downto 1 do
88152: LD_ADDR_VAR 0 3
88156: PUSH
88157: DOUBLE
88158: LD_VAR 0 1
88162: INC
88163: ST_TO_ADDR
88164: LD_INT 1
88166: PUSH
88167: FOR_DOWNTO
88168: IFFALSE 88198
// result := Join ( result , array [ i ] ) ;
88170: LD_ADDR_VAR 0 2
88174: PUSH
88175: LD_VAR 0 2
88179: PPUSH
88180: LD_VAR 0 1
88184: PUSH
88185: LD_VAR 0 3
88189: ARRAY
88190: PPUSH
88191: CALL 92865 0 2
88195: ST_TO_ADDR
88196: GO 88167
88198: POP
88199: POP
// end ;
88200: LD_VAR 0 2
88204: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
88205: LD_INT 0
88207: PPUSH
88208: PPUSH
88209: PPUSH
88210: PPUSH
88211: PPUSH
88212: PPUSH
// if not unit or not hexes then
88213: LD_VAR 0 1
88217: NOT
88218: PUSH
88219: LD_VAR 0 2
88223: NOT
88224: OR
88225: IFFALSE 88229
// exit ;
88227: GO 88352
// dist := 9999 ;
88229: LD_ADDR_VAR 0 5
88233: PUSH
88234: LD_INT 9999
88236: ST_TO_ADDR
// for i = 1 to hexes do
88237: LD_ADDR_VAR 0 4
88241: PUSH
88242: DOUBLE
88243: LD_INT 1
88245: DEC
88246: ST_TO_ADDR
88247: LD_VAR 0 2
88251: PUSH
88252: FOR_TO
88253: IFFALSE 88340
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
88255: LD_ADDR_VAR 0 6
88259: PUSH
88260: LD_VAR 0 1
88264: PPUSH
88265: LD_VAR 0 2
88269: PUSH
88270: LD_VAR 0 4
88274: ARRAY
88275: PUSH
88276: LD_INT 1
88278: ARRAY
88279: PPUSH
88280: LD_VAR 0 2
88284: PUSH
88285: LD_VAR 0 4
88289: ARRAY
88290: PUSH
88291: LD_INT 2
88293: ARRAY
88294: PPUSH
88295: CALL_OW 297
88299: ST_TO_ADDR
// if tdist < dist then
88300: LD_VAR 0 6
88304: PUSH
88305: LD_VAR 0 5
88309: LESS
88310: IFFALSE 88338
// begin hex := hexes [ i ] ;
88312: LD_ADDR_VAR 0 8
88316: PUSH
88317: LD_VAR 0 2
88321: PUSH
88322: LD_VAR 0 4
88326: ARRAY
88327: ST_TO_ADDR
// dist := tdist ;
88328: LD_ADDR_VAR 0 5
88332: PUSH
88333: LD_VAR 0 6
88337: ST_TO_ADDR
// end ; end ;
88338: GO 88252
88340: POP
88341: POP
// result := hex ;
88342: LD_ADDR_VAR 0 3
88346: PUSH
88347: LD_VAR 0 8
88351: ST_TO_ADDR
// end ;
88352: LD_VAR 0 3
88356: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
88357: LD_INT 0
88359: PPUSH
88360: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
88361: LD_VAR 0 1
88365: NOT
88366: PUSH
88367: LD_VAR 0 1
88371: PUSH
88372: LD_INT 21
88374: PUSH
88375: LD_INT 2
88377: PUSH
88378: EMPTY
88379: LIST
88380: LIST
88381: PUSH
88382: LD_INT 23
88384: PUSH
88385: LD_INT 2
88387: PUSH
88388: EMPTY
88389: LIST
88390: LIST
88391: PUSH
88392: EMPTY
88393: LIST
88394: LIST
88395: PPUSH
88396: CALL_OW 69
88400: IN
88401: NOT
88402: OR
88403: IFFALSE 88407
// exit ;
88405: GO 88454
// for i = 1 to 3 do
88407: LD_ADDR_VAR 0 3
88411: PUSH
88412: DOUBLE
88413: LD_INT 1
88415: DEC
88416: ST_TO_ADDR
88417: LD_INT 3
88419: PUSH
88420: FOR_TO
88421: IFFALSE 88452
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
88423: LD_VAR 0 1
88427: PPUSH
88428: CALL_OW 250
88432: PPUSH
88433: LD_VAR 0 1
88437: PPUSH
88438: CALL_OW 251
88442: PPUSH
88443: LD_INT 1
88445: PPUSH
88446: CALL_OW 453
88450: GO 88420
88452: POP
88453: POP
// end ;
88454: LD_VAR 0 2
88458: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
88459: LD_INT 0
88461: PPUSH
88462: PPUSH
88463: PPUSH
88464: PPUSH
88465: PPUSH
88466: PPUSH
// if not unit or not enemy_unit then
88467: LD_VAR 0 1
88471: NOT
88472: PUSH
88473: LD_VAR 0 2
88477: NOT
88478: OR
88479: IFFALSE 88483
// exit ;
88481: GO 88950
// if GetLives ( i ) < 250 then
88483: LD_VAR 0 4
88487: PPUSH
88488: CALL_OW 256
88492: PUSH
88493: LD_INT 250
88495: LESS
88496: IFFALSE 88509
// begin ComAutodestruct ( i ) ;
88498: LD_VAR 0 4
88502: PPUSH
88503: CALL 88357 0 1
// exit ;
88507: GO 88950
// end ; x := GetX ( enemy_unit ) ;
88509: LD_ADDR_VAR 0 7
88513: PUSH
88514: LD_VAR 0 2
88518: PPUSH
88519: CALL_OW 250
88523: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
88524: LD_ADDR_VAR 0 8
88528: PUSH
88529: LD_VAR 0 2
88533: PPUSH
88534: CALL_OW 251
88538: ST_TO_ADDR
// if not x or not y then
88539: LD_VAR 0 7
88543: NOT
88544: PUSH
88545: LD_VAR 0 8
88549: NOT
88550: OR
88551: IFFALSE 88555
// exit ;
88553: GO 88950
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
88555: LD_ADDR_VAR 0 6
88559: PUSH
88560: LD_VAR 0 7
88564: PPUSH
88565: LD_INT 0
88567: PPUSH
88568: LD_INT 4
88570: PPUSH
88571: CALL_OW 272
88575: PUSH
88576: LD_VAR 0 8
88580: PPUSH
88581: LD_INT 0
88583: PPUSH
88584: LD_INT 4
88586: PPUSH
88587: CALL_OW 273
88591: PUSH
88592: EMPTY
88593: LIST
88594: LIST
88595: PUSH
88596: LD_VAR 0 7
88600: PPUSH
88601: LD_INT 1
88603: PPUSH
88604: LD_INT 4
88606: PPUSH
88607: CALL_OW 272
88611: PUSH
88612: LD_VAR 0 8
88616: PPUSH
88617: LD_INT 1
88619: PPUSH
88620: LD_INT 4
88622: PPUSH
88623: CALL_OW 273
88627: PUSH
88628: EMPTY
88629: LIST
88630: LIST
88631: PUSH
88632: LD_VAR 0 7
88636: PPUSH
88637: LD_INT 2
88639: PPUSH
88640: LD_INT 4
88642: PPUSH
88643: CALL_OW 272
88647: PUSH
88648: LD_VAR 0 8
88652: PPUSH
88653: LD_INT 2
88655: PPUSH
88656: LD_INT 4
88658: PPUSH
88659: CALL_OW 273
88663: PUSH
88664: EMPTY
88665: LIST
88666: LIST
88667: PUSH
88668: LD_VAR 0 7
88672: PPUSH
88673: LD_INT 3
88675: PPUSH
88676: LD_INT 4
88678: PPUSH
88679: CALL_OW 272
88683: PUSH
88684: LD_VAR 0 8
88688: PPUSH
88689: LD_INT 3
88691: PPUSH
88692: LD_INT 4
88694: PPUSH
88695: CALL_OW 273
88699: PUSH
88700: EMPTY
88701: LIST
88702: LIST
88703: PUSH
88704: LD_VAR 0 7
88708: PPUSH
88709: LD_INT 4
88711: PPUSH
88712: LD_INT 4
88714: PPUSH
88715: CALL_OW 272
88719: PUSH
88720: LD_VAR 0 8
88724: PPUSH
88725: LD_INT 4
88727: PPUSH
88728: LD_INT 4
88730: PPUSH
88731: CALL_OW 273
88735: PUSH
88736: EMPTY
88737: LIST
88738: LIST
88739: PUSH
88740: LD_VAR 0 7
88744: PPUSH
88745: LD_INT 5
88747: PPUSH
88748: LD_INT 4
88750: PPUSH
88751: CALL_OW 272
88755: PUSH
88756: LD_VAR 0 8
88760: PPUSH
88761: LD_INT 5
88763: PPUSH
88764: LD_INT 4
88766: PPUSH
88767: CALL_OW 273
88771: PUSH
88772: EMPTY
88773: LIST
88774: LIST
88775: PUSH
88776: EMPTY
88777: LIST
88778: LIST
88779: LIST
88780: LIST
88781: LIST
88782: LIST
88783: ST_TO_ADDR
// for i = tmp downto 1 do
88784: LD_ADDR_VAR 0 4
88788: PUSH
88789: DOUBLE
88790: LD_VAR 0 6
88794: INC
88795: ST_TO_ADDR
88796: LD_INT 1
88798: PUSH
88799: FOR_DOWNTO
88800: IFFALSE 88901
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
88802: LD_VAR 0 6
88806: PUSH
88807: LD_VAR 0 4
88811: ARRAY
88812: PUSH
88813: LD_INT 1
88815: ARRAY
88816: PPUSH
88817: LD_VAR 0 6
88821: PUSH
88822: LD_VAR 0 4
88826: ARRAY
88827: PUSH
88828: LD_INT 2
88830: ARRAY
88831: PPUSH
88832: CALL_OW 488
88836: NOT
88837: PUSH
88838: LD_VAR 0 6
88842: PUSH
88843: LD_VAR 0 4
88847: ARRAY
88848: PUSH
88849: LD_INT 1
88851: ARRAY
88852: PPUSH
88853: LD_VAR 0 6
88857: PUSH
88858: LD_VAR 0 4
88862: ARRAY
88863: PUSH
88864: LD_INT 2
88866: ARRAY
88867: PPUSH
88868: CALL_OW 428
88872: PUSH
88873: LD_INT 0
88875: NONEQUAL
88876: OR
88877: IFFALSE 88899
// tmp := Delete ( tmp , i ) ;
88879: LD_ADDR_VAR 0 6
88883: PUSH
88884: LD_VAR 0 6
88888: PPUSH
88889: LD_VAR 0 4
88893: PPUSH
88894: CALL_OW 3
88898: ST_TO_ADDR
88899: GO 88799
88901: POP
88902: POP
// j := GetClosestHex ( unit , tmp ) ;
88903: LD_ADDR_VAR 0 5
88907: PUSH
88908: LD_VAR 0 1
88912: PPUSH
88913: LD_VAR 0 6
88917: PPUSH
88918: CALL 88205 0 2
88922: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
88923: LD_VAR 0 1
88927: PPUSH
88928: LD_VAR 0 5
88932: PUSH
88933: LD_INT 1
88935: ARRAY
88936: PPUSH
88937: LD_VAR 0 5
88941: PUSH
88942: LD_INT 2
88944: ARRAY
88945: PPUSH
88946: CALL_OW 111
// end ;
88950: LD_VAR 0 3
88954: RET
// export function PrepareApemanSoldier ( ) ; begin
88955: LD_INT 0
88957: PPUSH
// uc_nation := 0 ;
88958: LD_ADDR_OWVAR 21
88962: PUSH
88963: LD_INT 0
88965: ST_TO_ADDR
// hc_sex := sex_male ;
88966: LD_ADDR_OWVAR 27
88970: PUSH
88971: LD_INT 1
88973: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
88974: LD_ADDR_OWVAR 28
88978: PUSH
88979: LD_INT 15
88981: ST_TO_ADDR
// hc_gallery :=  ;
88982: LD_ADDR_OWVAR 33
88986: PUSH
88987: LD_STRING 
88989: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88990: LD_ADDR_OWVAR 31
88994: PUSH
88995: LD_INT 0
88997: PPUSH
88998: LD_INT 3
89000: PPUSH
89001: CALL_OW 12
89005: PUSH
89006: LD_INT 0
89008: PPUSH
89009: LD_INT 3
89011: PPUSH
89012: CALL_OW 12
89016: PUSH
89017: LD_INT 0
89019: PUSH
89020: LD_INT 0
89022: PUSH
89023: EMPTY
89024: LIST
89025: LIST
89026: LIST
89027: LIST
89028: ST_TO_ADDR
// end ;
89029: LD_VAR 0 1
89033: RET
// export function PrepareApemanEngineer ( ) ; begin
89034: LD_INT 0
89036: PPUSH
// uc_nation := 0 ;
89037: LD_ADDR_OWVAR 21
89041: PUSH
89042: LD_INT 0
89044: ST_TO_ADDR
// hc_sex := sex_male ;
89045: LD_ADDR_OWVAR 27
89049: PUSH
89050: LD_INT 1
89052: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
89053: LD_ADDR_OWVAR 28
89057: PUSH
89058: LD_INT 16
89060: ST_TO_ADDR
// hc_gallery :=  ;
89061: LD_ADDR_OWVAR 33
89065: PUSH
89066: LD_STRING 
89068: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89069: LD_ADDR_OWVAR 31
89073: PUSH
89074: LD_INT 0
89076: PPUSH
89077: LD_INT 3
89079: PPUSH
89080: CALL_OW 12
89084: PUSH
89085: LD_INT 0
89087: PPUSH
89088: LD_INT 3
89090: PPUSH
89091: CALL_OW 12
89095: PUSH
89096: LD_INT 0
89098: PUSH
89099: LD_INT 0
89101: PUSH
89102: EMPTY
89103: LIST
89104: LIST
89105: LIST
89106: LIST
89107: ST_TO_ADDR
// end ;
89108: LD_VAR 0 1
89112: RET
// export function PrepareApeman ( agressivity ) ; begin
89113: LD_INT 0
89115: PPUSH
// uc_side := 0 ;
89116: LD_ADDR_OWVAR 20
89120: PUSH
89121: LD_INT 0
89123: ST_TO_ADDR
// uc_nation := 0 ;
89124: LD_ADDR_OWVAR 21
89128: PUSH
89129: LD_INT 0
89131: ST_TO_ADDR
// hc_sex := sex_male ;
89132: LD_ADDR_OWVAR 27
89136: PUSH
89137: LD_INT 1
89139: ST_TO_ADDR
// hc_class := class_apeman ;
89140: LD_ADDR_OWVAR 28
89144: PUSH
89145: LD_INT 12
89147: ST_TO_ADDR
// hc_gallery :=  ;
89148: LD_ADDR_OWVAR 33
89152: PUSH
89153: LD_STRING 
89155: ST_TO_ADDR
// if agressivity = 0 then
89156: LD_VAR 0 1
89160: PUSH
89161: LD_INT 0
89163: EQUAL
89164: IFFALSE 89176
// hc_agressivity := 0 else
89166: LD_ADDR_OWVAR 35
89170: PUSH
89171: LD_INT 0
89173: ST_TO_ADDR
89174: GO 89197
// hc_agressivity := rand ( - agressivity , agressivity ) ;
89176: LD_ADDR_OWVAR 35
89180: PUSH
89181: LD_VAR 0 1
89185: NEG
89186: PPUSH
89187: LD_VAR 0 1
89191: PPUSH
89192: CALL_OW 12
89196: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
89197: LD_ADDR_OWVAR 31
89201: PUSH
89202: LD_INT 0
89204: PPUSH
89205: LD_INT 3
89207: PPUSH
89208: CALL_OW 12
89212: PUSH
89213: LD_INT 0
89215: PPUSH
89216: LD_INT 3
89218: PPUSH
89219: CALL_OW 12
89223: PUSH
89224: LD_INT 0
89226: PUSH
89227: LD_INT 0
89229: PUSH
89230: EMPTY
89231: LIST
89232: LIST
89233: LIST
89234: LIST
89235: ST_TO_ADDR
// end ;
89236: LD_VAR 0 2
89240: RET
// export function PrepareTiger ( agressivity ) ; begin
89241: LD_INT 0
89243: PPUSH
// uc_side := 0 ;
89244: LD_ADDR_OWVAR 20
89248: PUSH
89249: LD_INT 0
89251: ST_TO_ADDR
// uc_nation := 0 ;
89252: LD_ADDR_OWVAR 21
89256: PUSH
89257: LD_INT 0
89259: ST_TO_ADDR
// hc_class := class_tiger ;
89260: LD_ADDR_OWVAR 28
89264: PUSH
89265: LD_INT 14
89267: ST_TO_ADDR
// hc_gallery :=  ;
89268: LD_ADDR_OWVAR 33
89272: PUSH
89273: LD_STRING 
89275: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
89276: LD_ADDR_OWVAR 35
89280: PUSH
89281: LD_VAR 0 1
89285: NEG
89286: PPUSH
89287: LD_VAR 0 1
89291: PPUSH
89292: CALL_OW 12
89296: ST_TO_ADDR
// end ;
89297: LD_VAR 0 2
89301: RET
// export function PrepareEnchidna ( ) ; begin
89302: LD_INT 0
89304: PPUSH
// uc_side := 0 ;
89305: LD_ADDR_OWVAR 20
89309: PUSH
89310: LD_INT 0
89312: ST_TO_ADDR
// uc_nation := 0 ;
89313: LD_ADDR_OWVAR 21
89317: PUSH
89318: LD_INT 0
89320: ST_TO_ADDR
// hc_class := class_baggie ;
89321: LD_ADDR_OWVAR 28
89325: PUSH
89326: LD_INT 13
89328: ST_TO_ADDR
// hc_gallery :=  ;
89329: LD_ADDR_OWVAR 33
89333: PUSH
89334: LD_STRING 
89336: ST_TO_ADDR
// end ;
89337: LD_VAR 0 1
89341: RET
// export function PrepareFrog ( ) ; begin
89342: LD_INT 0
89344: PPUSH
// uc_side := 0 ;
89345: LD_ADDR_OWVAR 20
89349: PUSH
89350: LD_INT 0
89352: ST_TO_ADDR
// uc_nation := 0 ;
89353: LD_ADDR_OWVAR 21
89357: PUSH
89358: LD_INT 0
89360: ST_TO_ADDR
// hc_class := class_frog ;
89361: LD_ADDR_OWVAR 28
89365: PUSH
89366: LD_INT 19
89368: ST_TO_ADDR
// hc_gallery :=  ;
89369: LD_ADDR_OWVAR 33
89373: PUSH
89374: LD_STRING 
89376: ST_TO_ADDR
// end ;
89377: LD_VAR 0 1
89381: RET
// export function PrepareFish ( ) ; begin
89382: LD_INT 0
89384: PPUSH
// uc_side := 0 ;
89385: LD_ADDR_OWVAR 20
89389: PUSH
89390: LD_INT 0
89392: ST_TO_ADDR
// uc_nation := 0 ;
89393: LD_ADDR_OWVAR 21
89397: PUSH
89398: LD_INT 0
89400: ST_TO_ADDR
// hc_class := class_fish ;
89401: LD_ADDR_OWVAR 28
89405: PUSH
89406: LD_INT 20
89408: ST_TO_ADDR
// hc_gallery :=  ;
89409: LD_ADDR_OWVAR 33
89413: PUSH
89414: LD_STRING 
89416: ST_TO_ADDR
// end ;
89417: LD_VAR 0 1
89421: RET
// export function PrepareBird ( ) ; begin
89422: LD_INT 0
89424: PPUSH
// uc_side := 0 ;
89425: LD_ADDR_OWVAR 20
89429: PUSH
89430: LD_INT 0
89432: ST_TO_ADDR
// uc_nation := 0 ;
89433: LD_ADDR_OWVAR 21
89437: PUSH
89438: LD_INT 0
89440: ST_TO_ADDR
// hc_class := class_phororhacos ;
89441: LD_ADDR_OWVAR 28
89445: PUSH
89446: LD_INT 18
89448: ST_TO_ADDR
// hc_gallery :=  ;
89449: LD_ADDR_OWVAR 33
89453: PUSH
89454: LD_STRING 
89456: ST_TO_ADDR
// end ;
89457: LD_VAR 0 1
89461: RET
// export function PrepareHorse ( ) ; begin
89462: LD_INT 0
89464: PPUSH
// uc_side := 0 ;
89465: LD_ADDR_OWVAR 20
89469: PUSH
89470: LD_INT 0
89472: ST_TO_ADDR
// uc_nation := 0 ;
89473: LD_ADDR_OWVAR 21
89477: PUSH
89478: LD_INT 0
89480: ST_TO_ADDR
// hc_class := class_horse ;
89481: LD_ADDR_OWVAR 28
89485: PUSH
89486: LD_INT 21
89488: ST_TO_ADDR
// hc_gallery :=  ;
89489: LD_ADDR_OWVAR 33
89493: PUSH
89494: LD_STRING 
89496: ST_TO_ADDR
// end ;
89497: LD_VAR 0 1
89501: RET
// export function PrepareMastodont ( ) ; begin
89502: LD_INT 0
89504: PPUSH
// uc_side := 0 ;
89505: LD_ADDR_OWVAR 20
89509: PUSH
89510: LD_INT 0
89512: ST_TO_ADDR
// uc_nation := 0 ;
89513: LD_ADDR_OWVAR 21
89517: PUSH
89518: LD_INT 0
89520: ST_TO_ADDR
// vc_chassis := class_mastodont ;
89521: LD_ADDR_OWVAR 37
89525: PUSH
89526: LD_INT 31
89528: ST_TO_ADDR
// vc_control := control_rider ;
89529: LD_ADDR_OWVAR 38
89533: PUSH
89534: LD_INT 4
89536: ST_TO_ADDR
// end ;
89537: LD_VAR 0 1
89541: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
89542: LD_INT 0
89544: PPUSH
89545: PPUSH
89546: PPUSH
// uc_side = 0 ;
89547: LD_ADDR_OWVAR 20
89551: PUSH
89552: LD_INT 0
89554: ST_TO_ADDR
// uc_nation = 0 ;
89555: LD_ADDR_OWVAR 21
89559: PUSH
89560: LD_INT 0
89562: ST_TO_ADDR
// InitHc_All ( ) ;
89563: CALL_OW 584
// InitVc ;
89567: CALL_OW 20
// if mastodonts then
89571: LD_VAR 0 6
89575: IFFALSE 89642
// for i = 1 to mastodonts do
89577: LD_ADDR_VAR 0 11
89581: PUSH
89582: DOUBLE
89583: LD_INT 1
89585: DEC
89586: ST_TO_ADDR
89587: LD_VAR 0 6
89591: PUSH
89592: FOR_TO
89593: IFFALSE 89640
// begin vc_chassis := 31 ;
89595: LD_ADDR_OWVAR 37
89599: PUSH
89600: LD_INT 31
89602: ST_TO_ADDR
// vc_control := control_rider ;
89603: LD_ADDR_OWVAR 38
89607: PUSH
89608: LD_INT 4
89610: ST_TO_ADDR
// animal := CreateVehicle ;
89611: LD_ADDR_VAR 0 12
89615: PUSH
89616: CALL_OW 45
89620: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89621: LD_VAR 0 12
89625: PPUSH
89626: LD_VAR 0 8
89630: PPUSH
89631: LD_INT 0
89633: PPUSH
89634: CALL 91770 0 3
// end ;
89638: GO 89592
89640: POP
89641: POP
// if horses then
89642: LD_VAR 0 5
89646: IFFALSE 89713
// for i = 1 to horses do
89648: LD_ADDR_VAR 0 11
89652: PUSH
89653: DOUBLE
89654: LD_INT 1
89656: DEC
89657: ST_TO_ADDR
89658: LD_VAR 0 5
89662: PUSH
89663: FOR_TO
89664: IFFALSE 89711
// begin hc_class := 21 ;
89666: LD_ADDR_OWVAR 28
89670: PUSH
89671: LD_INT 21
89673: ST_TO_ADDR
// hc_gallery :=  ;
89674: LD_ADDR_OWVAR 33
89678: PUSH
89679: LD_STRING 
89681: ST_TO_ADDR
// animal := CreateHuman ;
89682: LD_ADDR_VAR 0 12
89686: PUSH
89687: CALL_OW 44
89691: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89692: LD_VAR 0 12
89696: PPUSH
89697: LD_VAR 0 8
89701: PPUSH
89702: LD_INT 0
89704: PPUSH
89705: CALL 91770 0 3
// end ;
89709: GO 89663
89711: POP
89712: POP
// if birds then
89713: LD_VAR 0 1
89717: IFFALSE 89784
// for i = 1 to birds do
89719: LD_ADDR_VAR 0 11
89723: PUSH
89724: DOUBLE
89725: LD_INT 1
89727: DEC
89728: ST_TO_ADDR
89729: LD_VAR 0 1
89733: PUSH
89734: FOR_TO
89735: IFFALSE 89782
// begin hc_class := 18 ;
89737: LD_ADDR_OWVAR 28
89741: PUSH
89742: LD_INT 18
89744: ST_TO_ADDR
// hc_gallery =  ;
89745: LD_ADDR_OWVAR 33
89749: PUSH
89750: LD_STRING 
89752: ST_TO_ADDR
// animal := CreateHuman ;
89753: LD_ADDR_VAR 0 12
89757: PUSH
89758: CALL_OW 44
89762: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89763: LD_VAR 0 12
89767: PPUSH
89768: LD_VAR 0 8
89772: PPUSH
89773: LD_INT 0
89775: PPUSH
89776: CALL 91770 0 3
// end ;
89780: GO 89734
89782: POP
89783: POP
// if tigers then
89784: LD_VAR 0 2
89788: IFFALSE 89872
// for i = 1 to tigers do
89790: LD_ADDR_VAR 0 11
89794: PUSH
89795: DOUBLE
89796: LD_INT 1
89798: DEC
89799: ST_TO_ADDR
89800: LD_VAR 0 2
89804: PUSH
89805: FOR_TO
89806: IFFALSE 89870
// begin hc_class = class_tiger ;
89808: LD_ADDR_OWVAR 28
89812: PUSH
89813: LD_INT 14
89815: ST_TO_ADDR
// hc_gallery =  ;
89816: LD_ADDR_OWVAR 33
89820: PUSH
89821: LD_STRING 
89823: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
89824: LD_ADDR_OWVAR 35
89828: PUSH
89829: LD_INT 7
89831: NEG
89832: PPUSH
89833: LD_INT 7
89835: PPUSH
89836: CALL_OW 12
89840: ST_TO_ADDR
// animal := CreateHuman ;
89841: LD_ADDR_VAR 0 12
89845: PUSH
89846: CALL_OW 44
89850: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89851: LD_VAR 0 12
89855: PPUSH
89856: LD_VAR 0 8
89860: PPUSH
89861: LD_INT 0
89863: PPUSH
89864: CALL 91770 0 3
// end ;
89868: GO 89805
89870: POP
89871: POP
// if apemans then
89872: LD_VAR 0 3
89876: IFFALSE 89999
// for i = 1 to apemans do
89878: LD_ADDR_VAR 0 11
89882: PUSH
89883: DOUBLE
89884: LD_INT 1
89886: DEC
89887: ST_TO_ADDR
89888: LD_VAR 0 3
89892: PUSH
89893: FOR_TO
89894: IFFALSE 89997
// begin hc_class = class_apeman ;
89896: LD_ADDR_OWVAR 28
89900: PUSH
89901: LD_INT 12
89903: ST_TO_ADDR
// hc_gallery =  ;
89904: LD_ADDR_OWVAR 33
89908: PUSH
89909: LD_STRING 
89911: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
89912: LD_ADDR_OWVAR 35
89916: PUSH
89917: LD_INT 2
89919: NEG
89920: PPUSH
89921: LD_INT 2
89923: PPUSH
89924: CALL_OW 12
89928: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
89929: LD_ADDR_OWVAR 31
89933: PUSH
89934: LD_INT 1
89936: PPUSH
89937: LD_INT 3
89939: PPUSH
89940: CALL_OW 12
89944: PUSH
89945: LD_INT 1
89947: PPUSH
89948: LD_INT 3
89950: PPUSH
89951: CALL_OW 12
89955: PUSH
89956: LD_INT 0
89958: PUSH
89959: LD_INT 0
89961: PUSH
89962: EMPTY
89963: LIST
89964: LIST
89965: LIST
89966: LIST
89967: ST_TO_ADDR
// animal := CreateHuman ;
89968: LD_ADDR_VAR 0 12
89972: PUSH
89973: CALL_OW 44
89977: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89978: LD_VAR 0 12
89982: PPUSH
89983: LD_VAR 0 8
89987: PPUSH
89988: LD_INT 0
89990: PPUSH
89991: CALL 91770 0 3
// end ;
89995: GO 89893
89997: POP
89998: POP
// if enchidnas then
89999: LD_VAR 0 4
90003: IFFALSE 90070
// for i = 1 to enchidnas do
90005: LD_ADDR_VAR 0 11
90009: PUSH
90010: DOUBLE
90011: LD_INT 1
90013: DEC
90014: ST_TO_ADDR
90015: LD_VAR 0 4
90019: PUSH
90020: FOR_TO
90021: IFFALSE 90068
// begin hc_class = 13 ;
90023: LD_ADDR_OWVAR 28
90027: PUSH
90028: LD_INT 13
90030: ST_TO_ADDR
// hc_gallery =  ;
90031: LD_ADDR_OWVAR 33
90035: PUSH
90036: LD_STRING 
90038: ST_TO_ADDR
// animal := CreateHuman ;
90039: LD_ADDR_VAR 0 12
90043: PUSH
90044: CALL_OW 44
90048: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
90049: LD_VAR 0 12
90053: PPUSH
90054: LD_VAR 0 8
90058: PPUSH
90059: LD_INT 0
90061: PPUSH
90062: CALL 91770 0 3
// end ;
90066: GO 90020
90068: POP
90069: POP
// if fishes then
90070: LD_VAR 0 7
90074: IFFALSE 90141
// for i = 1 to fishes do
90076: LD_ADDR_VAR 0 11
90080: PUSH
90081: DOUBLE
90082: LD_INT 1
90084: DEC
90085: ST_TO_ADDR
90086: LD_VAR 0 7
90090: PUSH
90091: FOR_TO
90092: IFFALSE 90139
// begin hc_class = 20 ;
90094: LD_ADDR_OWVAR 28
90098: PUSH
90099: LD_INT 20
90101: ST_TO_ADDR
// hc_gallery =  ;
90102: LD_ADDR_OWVAR 33
90106: PUSH
90107: LD_STRING 
90109: ST_TO_ADDR
// animal := CreateHuman ;
90110: LD_ADDR_VAR 0 12
90114: PUSH
90115: CALL_OW 44
90119: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
90120: LD_VAR 0 12
90124: PPUSH
90125: LD_VAR 0 9
90129: PPUSH
90130: LD_INT 0
90132: PPUSH
90133: CALL 91770 0 3
// end ;
90137: GO 90091
90139: POP
90140: POP
// end ;
90141: LD_VAR 0 10
90145: RET
// export function WantHeal ( sci , unit ) ; begin
90146: LD_INT 0
90148: PPUSH
// if GetTaskList ( sci ) > 0 then
90149: LD_VAR 0 1
90153: PPUSH
90154: CALL_OW 437
90158: PUSH
90159: LD_INT 0
90161: GREATER
90162: IFFALSE 90232
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
90164: LD_VAR 0 1
90168: PPUSH
90169: CALL_OW 437
90173: PUSH
90174: LD_INT 1
90176: ARRAY
90177: PUSH
90178: LD_INT 1
90180: ARRAY
90181: PUSH
90182: LD_STRING l
90184: EQUAL
90185: PUSH
90186: LD_VAR 0 1
90190: PPUSH
90191: CALL_OW 437
90195: PUSH
90196: LD_INT 1
90198: ARRAY
90199: PUSH
90200: LD_INT 4
90202: ARRAY
90203: PUSH
90204: LD_VAR 0 2
90208: EQUAL
90209: AND
90210: IFFALSE 90222
// result := true else
90212: LD_ADDR_VAR 0 3
90216: PUSH
90217: LD_INT 1
90219: ST_TO_ADDR
90220: GO 90230
// result := false ;
90222: LD_ADDR_VAR 0 3
90226: PUSH
90227: LD_INT 0
90229: ST_TO_ADDR
// end else
90230: GO 90240
// result := false ;
90232: LD_ADDR_VAR 0 3
90236: PUSH
90237: LD_INT 0
90239: ST_TO_ADDR
// end ;
90240: LD_VAR 0 3
90244: RET
// export function HealTarget ( sci ) ; begin
90245: LD_INT 0
90247: PPUSH
// if not sci then
90248: LD_VAR 0 1
90252: NOT
90253: IFFALSE 90257
// exit ;
90255: GO 90322
// result := 0 ;
90257: LD_ADDR_VAR 0 2
90261: PUSH
90262: LD_INT 0
90264: ST_TO_ADDR
// if GetTaskList ( sci ) then
90265: LD_VAR 0 1
90269: PPUSH
90270: CALL_OW 437
90274: IFFALSE 90322
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
90276: LD_VAR 0 1
90280: PPUSH
90281: CALL_OW 437
90285: PUSH
90286: LD_INT 1
90288: ARRAY
90289: PUSH
90290: LD_INT 1
90292: ARRAY
90293: PUSH
90294: LD_STRING l
90296: EQUAL
90297: IFFALSE 90322
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
90299: LD_ADDR_VAR 0 2
90303: PUSH
90304: LD_VAR 0 1
90308: PPUSH
90309: CALL_OW 437
90313: PUSH
90314: LD_INT 1
90316: ARRAY
90317: PUSH
90318: LD_INT 4
90320: ARRAY
90321: ST_TO_ADDR
// end ;
90322: LD_VAR 0 2
90326: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
90327: LD_INT 0
90329: PPUSH
90330: PPUSH
90331: PPUSH
90332: PPUSH
// if not base_units then
90333: LD_VAR 0 1
90337: NOT
90338: IFFALSE 90342
// exit ;
90340: GO 90429
// result := false ;
90342: LD_ADDR_VAR 0 2
90346: PUSH
90347: LD_INT 0
90349: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
90350: LD_ADDR_VAR 0 5
90354: PUSH
90355: LD_VAR 0 1
90359: PPUSH
90360: LD_INT 21
90362: PUSH
90363: LD_INT 3
90365: PUSH
90366: EMPTY
90367: LIST
90368: LIST
90369: PPUSH
90370: CALL_OW 72
90374: ST_TO_ADDR
// if not tmp then
90375: LD_VAR 0 5
90379: NOT
90380: IFFALSE 90384
// exit ;
90382: GO 90429
// for i in tmp do
90384: LD_ADDR_VAR 0 3
90388: PUSH
90389: LD_VAR 0 5
90393: PUSH
90394: FOR_IN
90395: IFFALSE 90427
// begin result := EnemyInRange ( i , 22 ) ;
90397: LD_ADDR_VAR 0 2
90401: PUSH
90402: LD_VAR 0 3
90406: PPUSH
90407: LD_INT 22
90409: PPUSH
90410: CALL 88007 0 2
90414: ST_TO_ADDR
// if result then
90415: LD_VAR 0 2
90419: IFFALSE 90425
// exit ;
90421: POP
90422: POP
90423: GO 90429
// end ;
90425: GO 90394
90427: POP
90428: POP
// end ;
90429: LD_VAR 0 2
90433: RET
// export function FilterByTag ( units , tag ) ; begin
90434: LD_INT 0
90436: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
90437: LD_ADDR_VAR 0 3
90441: PUSH
90442: LD_VAR 0 1
90446: PPUSH
90447: LD_INT 120
90449: PUSH
90450: LD_VAR 0 2
90454: PUSH
90455: EMPTY
90456: LIST
90457: LIST
90458: PPUSH
90459: CALL_OW 72
90463: ST_TO_ADDR
// end ;
90464: LD_VAR 0 3
90468: RET
// export function IsDriver ( un ) ; begin
90469: LD_INT 0
90471: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
90472: LD_ADDR_VAR 0 2
90476: PUSH
90477: LD_VAR 0 1
90481: PUSH
90482: LD_INT 55
90484: PUSH
90485: EMPTY
90486: LIST
90487: PPUSH
90488: CALL_OW 69
90492: IN
90493: ST_TO_ADDR
// end ;
90494: LD_VAR 0 2
90498: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
90499: LD_INT 0
90501: PPUSH
90502: PPUSH
// list := [ ] ;
90503: LD_ADDR_VAR 0 5
90507: PUSH
90508: EMPTY
90509: ST_TO_ADDR
// case d of 0 :
90510: LD_VAR 0 3
90514: PUSH
90515: LD_INT 0
90517: DOUBLE
90518: EQUAL
90519: IFTRUE 90523
90521: GO 90656
90523: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
90524: LD_ADDR_VAR 0 5
90528: PUSH
90529: LD_VAR 0 1
90533: PUSH
90534: LD_INT 4
90536: MINUS
90537: PUSH
90538: LD_VAR 0 2
90542: PUSH
90543: LD_INT 4
90545: MINUS
90546: PUSH
90547: LD_INT 2
90549: PUSH
90550: EMPTY
90551: LIST
90552: LIST
90553: LIST
90554: PUSH
90555: LD_VAR 0 1
90559: PUSH
90560: LD_INT 3
90562: MINUS
90563: PUSH
90564: LD_VAR 0 2
90568: PUSH
90569: LD_INT 1
90571: PUSH
90572: EMPTY
90573: LIST
90574: LIST
90575: LIST
90576: PUSH
90577: LD_VAR 0 1
90581: PUSH
90582: LD_INT 4
90584: PLUS
90585: PUSH
90586: LD_VAR 0 2
90590: PUSH
90591: LD_INT 4
90593: PUSH
90594: EMPTY
90595: LIST
90596: LIST
90597: LIST
90598: PUSH
90599: LD_VAR 0 1
90603: PUSH
90604: LD_INT 3
90606: PLUS
90607: PUSH
90608: LD_VAR 0 2
90612: PUSH
90613: LD_INT 3
90615: PLUS
90616: PUSH
90617: LD_INT 5
90619: PUSH
90620: EMPTY
90621: LIST
90622: LIST
90623: LIST
90624: PUSH
90625: LD_VAR 0 1
90629: PUSH
90630: LD_VAR 0 2
90634: PUSH
90635: LD_INT 4
90637: PLUS
90638: PUSH
90639: LD_INT 0
90641: PUSH
90642: EMPTY
90643: LIST
90644: LIST
90645: LIST
90646: PUSH
90647: EMPTY
90648: LIST
90649: LIST
90650: LIST
90651: LIST
90652: LIST
90653: ST_TO_ADDR
// end ; 1 :
90654: GO 91354
90656: LD_INT 1
90658: DOUBLE
90659: EQUAL
90660: IFTRUE 90664
90662: GO 90797
90664: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
90665: LD_ADDR_VAR 0 5
90669: PUSH
90670: LD_VAR 0 1
90674: PUSH
90675: LD_VAR 0 2
90679: PUSH
90680: LD_INT 4
90682: MINUS
90683: PUSH
90684: LD_INT 3
90686: PUSH
90687: EMPTY
90688: LIST
90689: LIST
90690: LIST
90691: PUSH
90692: LD_VAR 0 1
90696: PUSH
90697: LD_INT 3
90699: MINUS
90700: PUSH
90701: LD_VAR 0 2
90705: PUSH
90706: LD_INT 3
90708: MINUS
90709: PUSH
90710: LD_INT 2
90712: PUSH
90713: EMPTY
90714: LIST
90715: LIST
90716: LIST
90717: PUSH
90718: LD_VAR 0 1
90722: PUSH
90723: LD_INT 4
90725: MINUS
90726: PUSH
90727: LD_VAR 0 2
90731: PUSH
90732: LD_INT 1
90734: PUSH
90735: EMPTY
90736: LIST
90737: LIST
90738: LIST
90739: PUSH
90740: LD_VAR 0 1
90744: PUSH
90745: LD_VAR 0 2
90749: PUSH
90750: LD_INT 3
90752: PLUS
90753: PUSH
90754: LD_INT 0
90756: PUSH
90757: EMPTY
90758: LIST
90759: LIST
90760: LIST
90761: PUSH
90762: LD_VAR 0 1
90766: PUSH
90767: LD_INT 4
90769: PLUS
90770: PUSH
90771: LD_VAR 0 2
90775: PUSH
90776: LD_INT 4
90778: PLUS
90779: PUSH
90780: LD_INT 5
90782: PUSH
90783: EMPTY
90784: LIST
90785: LIST
90786: LIST
90787: PUSH
90788: EMPTY
90789: LIST
90790: LIST
90791: LIST
90792: LIST
90793: LIST
90794: ST_TO_ADDR
// end ; 2 :
90795: GO 91354
90797: LD_INT 2
90799: DOUBLE
90800: EQUAL
90801: IFTRUE 90805
90803: GO 90934
90805: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
90806: LD_ADDR_VAR 0 5
90810: PUSH
90811: LD_VAR 0 1
90815: PUSH
90816: LD_VAR 0 2
90820: PUSH
90821: LD_INT 3
90823: MINUS
90824: PUSH
90825: LD_INT 3
90827: PUSH
90828: EMPTY
90829: LIST
90830: LIST
90831: LIST
90832: PUSH
90833: LD_VAR 0 1
90837: PUSH
90838: LD_INT 4
90840: PLUS
90841: PUSH
90842: LD_VAR 0 2
90846: PUSH
90847: LD_INT 4
90849: PUSH
90850: EMPTY
90851: LIST
90852: LIST
90853: LIST
90854: PUSH
90855: LD_VAR 0 1
90859: PUSH
90860: LD_VAR 0 2
90864: PUSH
90865: LD_INT 4
90867: PLUS
90868: PUSH
90869: LD_INT 0
90871: PUSH
90872: EMPTY
90873: LIST
90874: LIST
90875: LIST
90876: PUSH
90877: LD_VAR 0 1
90881: PUSH
90882: LD_INT 3
90884: MINUS
90885: PUSH
90886: LD_VAR 0 2
90890: PUSH
90891: LD_INT 1
90893: PUSH
90894: EMPTY
90895: LIST
90896: LIST
90897: LIST
90898: PUSH
90899: LD_VAR 0 1
90903: PUSH
90904: LD_INT 4
90906: MINUS
90907: PUSH
90908: LD_VAR 0 2
90912: PUSH
90913: LD_INT 4
90915: MINUS
90916: PUSH
90917: LD_INT 2
90919: PUSH
90920: EMPTY
90921: LIST
90922: LIST
90923: LIST
90924: PUSH
90925: EMPTY
90926: LIST
90927: LIST
90928: LIST
90929: LIST
90930: LIST
90931: ST_TO_ADDR
// end ; 3 :
90932: GO 91354
90934: LD_INT 3
90936: DOUBLE
90937: EQUAL
90938: IFTRUE 90942
90940: GO 91075
90942: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
90943: LD_ADDR_VAR 0 5
90947: PUSH
90948: LD_VAR 0 1
90952: PUSH
90953: LD_INT 3
90955: PLUS
90956: PUSH
90957: LD_VAR 0 2
90961: PUSH
90962: LD_INT 4
90964: PUSH
90965: EMPTY
90966: LIST
90967: LIST
90968: LIST
90969: PUSH
90970: LD_VAR 0 1
90974: PUSH
90975: LD_INT 4
90977: PLUS
90978: PUSH
90979: LD_VAR 0 2
90983: PUSH
90984: LD_INT 4
90986: PLUS
90987: PUSH
90988: LD_INT 5
90990: PUSH
90991: EMPTY
90992: LIST
90993: LIST
90994: LIST
90995: PUSH
90996: LD_VAR 0 1
91000: PUSH
91001: LD_INT 4
91003: MINUS
91004: PUSH
91005: LD_VAR 0 2
91009: PUSH
91010: LD_INT 1
91012: PUSH
91013: EMPTY
91014: LIST
91015: LIST
91016: LIST
91017: PUSH
91018: LD_VAR 0 1
91022: PUSH
91023: LD_VAR 0 2
91027: PUSH
91028: LD_INT 4
91030: MINUS
91031: PUSH
91032: LD_INT 3
91034: PUSH
91035: EMPTY
91036: LIST
91037: LIST
91038: LIST
91039: PUSH
91040: LD_VAR 0 1
91044: PUSH
91045: LD_INT 3
91047: MINUS
91048: PUSH
91049: LD_VAR 0 2
91053: PUSH
91054: LD_INT 3
91056: MINUS
91057: PUSH
91058: LD_INT 2
91060: PUSH
91061: EMPTY
91062: LIST
91063: LIST
91064: LIST
91065: PUSH
91066: EMPTY
91067: LIST
91068: LIST
91069: LIST
91070: LIST
91071: LIST
91072: ST_TO_ADDR
// end ; 4 :
91073: GO 91354
91075: LD_INT 4
91077: DOUBLE
91078: EQUAL
91079: IFTRUE 91083
91081: GO 91216
91083: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
91084: LD_ADDR_VAR 0 5
91088: PUSH
91089: LD_VAR 0 1
91093: PUSH
91094: LD_VAR 0 2
91098: PUSH
91099: LD_INT 4
91101: PLUS
91102: PUSH
91103: LD_INT 0
91105: PUSH
91106: EMPTY
91107: LIST
91108: LIST
91109: LIST
91110: PUSH
91111: LD_VAR 0 1
91115: PUSH
91116: LD_INT 3
91118: PLUS
91119: PUSH
91120: LD_VAR 0 2
91124: PUSH
91125: LD_INT 3
91127: PLUS
91128: PUSH
91129: LD_INT 5
91131: PUSH
91132: EMPTY
91133: LIST
91134: LIST
91135: LIST
91136: PUSH
91137: LD_VAR 0 1
91141: PUSH
91142: LD_INT 4
91144: PLUS
91145: PUSH
91146: LD_VAR 0 2
91150: PUSH
91151: LD_INT 4
91153: PUSH
91154: EMPTY
91155: LIST
91156: LIST
91157: LIST
91158: PUSH
91159: LD_VAR 0 1
91163: PUSH
91164: LD_VAR 0 2
91168: PUSH
91169: LD_INT 3
91171: MINUS
91172: PUSH
91173: LD_INT 3
91175: PUSH
91176: EMPTY
91177: LIST
91178: LIST
91179: LIST
91180: PUSH
91181: LD_VAR 0 1
91185: PUSH
91186: LD_INT 4
91188: MINUS
91189: PUSH
91190: LD_VAR 0 2
91194: PUSH
91195: LD_INT 4
91197: MINUS
91198: PUSH
91199: LD_INT 2
91201: PUSH
91202: EMPTY
91203: LIST
91204: LIST
91205: LIST
91206: PUSH
91207: EMPTY
91208: LIST
91209: LIST
91210: LIST
91211: LIST
91212: LIST
91213: ST_TO_ADDR
// end ; 5 :
91214: GO 91354
91216: LD_INT 5
91218: DOUBLE
91219: EQUAL
91220: IFTRUE 91224
91222: GO 91353
91224: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
91225: LD_ADDR_VAR 0 5
91229: PUSH
91230: LD_VAR 0 1
91234: PUSH
91235: LD_INT 4
91237: MINUS
91238: PUSH
91239: LD_VAR 0 2
91243: PUSH
91244: LD_INT 1
91246: PUSH
91247: EMPTY
91248: LIST
91249: LIST
91250: LIST
91251: PUSH
91252: LD_VAR 0 1
91256: PUSH
91257: LD_VAR 0 2
91261: PUSH
91262: LD_INT 4
91264: MINUS
91265: PUSH
91266: LD_INT 3
91268: PUSH
91269: EMPTY
91270: LIST
91271: LIST
91272: LIST
91273: PUSH
91274: LD_VAR 0 1
91278: PUSH
91279: LD_INT 4
91281: PLUS
91282: PUSH
91283: LD_VAR 0 2
91287: PUSH
91288: LD_INT 4
91290: PLUS
91291: PUSH
91292: LD_INT 5
91294: PUSH
91295: EMPTY
91296: LIST
91297: LIST
91298: LIST
91299: PUSH
91300: LD_VAR 0 1
91304: PUSH
91305: LD_INT 3
91307: PLUS
91308: PUSH
91309: LD_VAR 0 2
91313: PUSH
91314: LD_INT 4
91316: PUSH
91317: EMPTY
91318: LIST
91319: LIST
91320: LIST
91321: PUSH
91322: LD_VAR 0 1
91326: PUSH
91327: LD_VAR 0 2
91331: PUSH
91332: LD_INT 3
91334: PLUS
91335: PUSH
91336: LD_INT 0
91338: PUSH
91339: EMPTY
91340: LIST
91341: LIST
91342: LIST
91343: PUSH
91344: EMPTY
91345: LIST
91346: LIST
91347: LIST
91348: LIST
91349: LIST
91350: ST_TO_ADDR
// end ; end ;
91351: GO 91354
91353: POP
// result := list ;
91354: LD_ADDR_VAR 0 4
91358: PUSH
91359: LD_VAR 0 5
91363: ST_TO_ADDR
// end ;
91364: LD_VAR 0 4
91368: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
91369: LD_INT 0
91371: PPUSH
91372: PPUSH
91373: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
91374: LD_VAR 0 1
91378: NOT
91379: PUSH
91380: LD_VAR 0 2
91384: PUSH
91385: LD_INT 1
91387: PUSH
91388: LD_INT 2
91390: PUSH
91391: LD_INT 3
91393: PUSH
91394: LD_INT 4
91396: PUSH
91397: EMPTY
91398: LIST
91399: LIST
91400: LIST
91401: LIST
91402: IN
91403: NOT
91404: OR
91405: IFFALSE 91409
// exit ;
91407: GO 91492
// tmp := [ ] ;
91409: LD_ADDR_VAR 0 5
91413: PUSH
91414: EMPTY
91415: ST_TO_ADDR
// for i in units do
91416: LD_ADDR_VAR 0 4
91420: PUSH
91421: LD_VAR 0 1
91425: PUSH
91426: FOR_IN
91427: IFFALSE 91461
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
91429: LD_ADDR_VAR 0 5
91433: PUSH
91434: LD_VAR 0 5
91438: PPUSH
91439: LD_VAR 0 4
91443: PPUSH
91444: LD_VAR 0 2
91448: PPUSH
91449: CALL_OW 259
91453: PPUSH
91454: CALL 92865 0 2
91458: ST_TO_ADDR
91459: GO 91426
91461: POP
91462: POP
// if not tmp then
91463: LD_VAR 0 5
91467: NOT
91468: IFFALSE 91472
// exit ;
91470: GO 91492
// result := SortListByListDesc ( units , tmp ) ;
91472: LD_ADDR_VAR 0 3
91476: PUSH
91477: LD_VAR 0 1
91481: PPUSH
91482: LD_VAR 0 5
91486: PPUSH
91487: CALL_OW 77
91491: ST_TO_ADDR
// end ;
91492: LD_VAR 0 3
91496: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
91497: LD_INT 0
91499: PPUSH
91500: PPUSH
91501: PPUSH
// result := false ;
91502: LD_ADDR_VAR 0 3
91506: PUSH
91507: LD_INT 0
91509: ST_TO_ADDR
// if not building then
91510: LD_VAR 0 2
91514: NOT
91515: IFFALSE 91519
// exit ;
91517: GO 91657
// x := GetX ( building ) ;
91519: LD_ADDR_VAR 0 4
91523: PUSH
91524: LD_VAR 0 2
91528: PPUSH
91529: CALL_OW 250
91533: ST_TO_ADDR
// y := GetY ( building ) ;
91534: LD_ADDR_VAR 0 5
91538: PUSH
91539: LD_VAR 0 2
91543: PPUSH
91544: CALL_OW 251
91548: ST_TO_ADDR
// if not x or not y then
91549: LD_VAR 0 4
91553: NOT
91554: PUSH
91555: LD_VAR 0 5
91559: NOT
91560: OR
91561: IFFALSE 91565
// exit ;
91563: GO 91657
// if GetTaskList ( unit ) then
91565: LD_VAR 0 1
91569: PPUSH
91570: CALL_OW 437
91574: IFFALSE 91657
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91576: LD_STRING e
91578: PUSH
91579: LD_VAR 0 1
91583: PPUSH
91584: CALL_OW 437
91588: PUSH
91589: LD_INT 1
91591: ARRAY
91592: PUSH
91593: LD_INT 1
91595: ARRAY
91596: EQUAL
91597: PUSH
91598: LD_VAR 0 4
91602: PUSH
91603: LD_VAR 0 1
91607: PPUSH
91608: CALL_OW 437
91612: PUSH
91613: LD_INT 1
91615: ARRAY
91616: PUSH
91617: LD_INT 2
91619: ARRAY
91620: EQUAL
91621: AND
91622: PUSH
91623: LD_VAR 0 5
91627: PUSH
91628: LD_VAR 0 1
91632: PPUSH
91633: CALL_OW 437
91637: PUSH
91638: LD_INT 1
91640: ARRAY
91641: PUSH
91642: LD_INT 3
91644: ARRAY
91645: EQUAL
91646: AND
91647: IFFALSE 91657
// result := true end ;
91649: LD_ADDR_VAR 0 3
91653: PUSH
91654: LD_INT 1
91656: ST_TO_ADDR
// end ;
91657: LD_VAR 0 3
91661: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
91662: LD_INT 0
91664: PPUSH
// result := false ;
91665: LD_ADDR_VAR 0 4
91669: PUSH
91670: LD_INT 0
91672: ST_TO_ADDR
// if GetTaskList ( unit ) then
91673: LD_VAR 0 1
91677: PPUSH
91678: CALL_OW 437
91682: IFFALSE 91765
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91684: LD_STRING M
91686: PUSH
91687: LD_VAR 0 1
91691: PPUSH
91692: CALL_OW 437
91696: PUSH
91697: LD_INT 1
91699: ARRAY
91700: PUSH
91701: LD_INT 1
91703: ARRAY
91704: EQUAL
91705: PUSH
91706: LD_VAR 0 2
91710: PUSH
91711: LD_VAR 0 1
91715: PPUSH
91716: CALL_OW 437
91720: PUSH
91721: LD_INT 1
91723: ARRAY
91724: PUSH
91725: LD_INT 2
91727: ARRAY
91728: EQUAL
91729: AND
91730: PUSH
91731: LD_VAR 0 3
91735: PUSH
91736: LD_VAR 0 1
91740: PPUSH
91741: CALL_OW 437
91745: PUSH
91746: LD_INT 1
91748: ARRAY
91749: PUSH
91750: LD_INT 3
91752: ARRAY
91753: EQUAL
91754: AND
91755: IFFALSE 91765
// result := true ;
91757: LD_ADDR_VAR 0 4
91761: PUSH
91762: LD_INT 1
91764: ST_TO_ADDR
// end ; end ;
91765: LD_VAR 0 4
91769: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
91770: LD_INT 0
91772: PPUSH
91773: PPUSH
91774: PPUSH
91775: PPUSH
// if not unit or not area then
91776: LD_VAR 0 1
91780: NOT
91781: PUSH
91782: LD_VAR 0 2
91786: NOT
91787: OR
91788: IFFALSE 91792
// exit ;
91790: GO 91968
// tmp := AreaToList ( area , i ) ;
91792: LD_ADDR_VAR 0 6
91796: PUSH
91797: LD_VAR 0 2
91801: PPUSH
91802: LD_VAR 0 5
91806: PPUSH
91807: CALL_OW 517
91811: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
91812: LD_ADDR_VAR 0 5
91816: PUSH
91817: DOUBLE
91818: LD_INT 1
91820: DEC
91821: ST_TO_ADDR
91822: LD_VAR 0 6
91826: PUSH
91827: LD_INT 1
91829: ARRAY
91830: PUSH
91831: FOR_TO
91832: IFFALSE 91966
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
91834: LD_ADDR_VAR 0 7
91838: PUSH
91839: LD_VAR 0 6
91843: PUSH
91844: LD_INT 1
91846: ARRAY
91847: PUSH
91848: LD_VAR 0 5
91852: ARRAY
91853: PUSH
91854: LD_VAR 0 6
91858: PUSH
91859: LD_INT 2
91861: ARRAY
91862: PUSH
91863: LD_VAR 0 5
91867: ARRAY
91868: PUSH
91869: EMPTY
91870: LIST
91871: LIST
91872: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
91873: LD_INT 92
91875: PUSH
91876: LD_VAR 0 7
91880: PUSH
91881: LD_INT 1
91883: ARRAY
91884: PUSH
91885: LD_VAR 0 7
91889: PUSH
91890: LD_INT 2
91892: ARRAY
91893: PUSH
91894: LD_INT 2
91896: PUSH
91897: EMPTY
91898: LIST
91899: LIST
91900: LIST
91901: LIST
91902: PPUSH
91903: CALL_OW 69
91907: PUSH
91908: LD_INT 0
91910: EQUAL
91911: IFFALSE 91964
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
91913: LD_VAR 0 1
91917: PPUSH
91918: LD_VAR 0 7
91922: PUSH
91923: LD_INT 1
91925: ARRAY
91926: PPUSH
91927: LD_VAR 0 7
91931: PUSH
91932: LD_INT 2
91934: ARRAY
91935: PPUSH
91936: LD_VAR 0 3
91940: PPUSH
91941: CALL_OW 48
// result := IsPlaced ( unit ) ;
91945: LD_ADDR_VAR 0 4
91949: PUSH
91950: LD_VAR 0 1
91954: PPUSH
91955: CALL_OW 305
91959: ST_TO_ADDR
// exit ;
91960: POP
91961: POP
91962: GO 91968
// end ; end ;
91964: GO 91831
91966: POP
91967: POP
// end ;
91968: LD_VAR 0 4
91972: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
91973: LD_INT 0
91975: PPUSH
91976: PPUSH
91977: PPUSH
// if not side or side > 8 then
91978: LD_VAR 0 1
91982: NOT
91983: PUSH
91984: LD_VAR 0 1
91988: PUSH
91989: LD_INT 8
91991: GREATER
91992: OR
91993: IFFALSE 91997
// exit ;
91995: GO 92184
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
91997: LD_ADDR_VAR 0 4
92001: PUSH
92002: LD_INT 22
92004: PUSH
92005: LD_VAR 0 1
92009: PUSH
92010: EMPTY
92011: LIST
92012: LIST
92013: PUSH
92014: LD_INT 21
92016: PUSH
92017: LD_INT 3
92019: PUSH
92020: EMPTY
92021: LIST
92022: LIST
92023: PUSH
92024: EMPTY
92025: LIST
92026: LIST
92027: PPUSH
92028: CALL_OW 69
92032: ST_TO_ADDR
// if not tmp then
92033: LD_VAR 0 4
92037: NOT
92038: IFFALSE 92042
// exit ;
92040: GO 92184
// enable_addtolog := true ;
92042: LD_ADDR_OWVAR 81
92046: PUSH
92047: LD_INT 1
92049: ST_TO_ADDR
// AddToLog ( [ ) ;
92050: LD_STRING [
92052: PPUSH
92053: CALL_OW 561
// for i in tmp do
92057: LD_ADDR_VAR 0 3
92061: PUSH
92062: LD_VAR 0 4
92066: PUSH
92067: FOR_IN
92068: IFFALSE 92175
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
92070: LD_STRING [
92072: PUSH
92073: LD_VAR 0 3
92077: PPUSH
92078: CALL_OW 266
92082: STR
92083: PUSH
92084: LD_STRING , 
92086: STR
92087: PUSH
92088: LD_VAR 0 3
92092: PPUSH
92093: CALL_OW 250
92097: STR
92098: PUSH
92099: LD_STRING , 
92101: STR
92102: PUSH
92103: LD_VAR 0 3
92107: PPUSH
92108: CALL_OW 251
92112: STR
92113: PUSH
92114: LD_STRING , 
92116: STR
92117: PUSH
92118: LD_VAR 0 3
92122: PPUSH
92123: CALL_OW 254
92127: STR
92128: PUSH
92129: LD_STRING , 
92131: STR
92132: PUSH
92133: LD_VAR 0 3
92137: PPUSH
92138: LD_INT 1
92140: PPUSH
92141: CALL_OW 268
92145: STR
92146: PUSH
92147: LD_STRING , 
92149: STR
92150: PUSH
92151: LD_VAR 0 3
92155: PPUSH
92156: LD_INT 2
92158: PPUSH
92159: CALL_OW 268
92163: STR
92164: PUSH
92165: LD_STRING ],
92167: STR
92168: PPUSH
92169: CALL_OW 561
// end ;
92173: GO 92067
92175: POP
92176: POP
// AddToLog ( ]; ) ;
92177: LD_STRING ];
92179: PPUSH
92180: CALL_OW 561
// end ;
92184: LD_VAR 0 2
92188: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
92189: LD_INT 0
92191: PPUSH
92192: PPUSH
92193: PPUSH
92194: PPUSH
92195: PPUSH
// if not area or not rate or not max then
92196: LD_VAR 0 1
92200: NOT
92201: PUSH
92202: LD_VAR 0 2
92206: NOT
92207: OR
92208: PUSH
92209: LD_VAR 0 4
92213: NOT
92214: OR
92215: IFFALSE 92219
// exit ;
92217: GO 92408
// while 1 do
92219: LD_INT 1
92221: IFFALSE 92408
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
92223: LD_ADDR_VAR 0 9
92227: PUSH
92228: LD_VAR 0 1
92232: PPUSH
92233: LD_INT 1
92235: PPUSH
92236: CALL_OW 287
92240: PUSH
92241: LD_INT 10
92243: MUL
92244: ST_TO_ADDR
// r := rate / 10 ;
92245: LD_ADDR_VAR 0 7
92249: PUSH
92250: LD_VAR 0 2
92254: PUSH
92255: LD_INT 10
92257: DIVREAL
92258: ST_TO_ADDR
// time := 1 1$00 ;
92259: LD_ADDR_VAR 0 8
92263: PUSH
92264: LD_INT 2100
92266: ST_TO_ADDR
// if amount < min then
92267: LD_VAR 0 9
92271: PUSH
92272: LD_VAR 0 3
92276: LESS
92277: IFFALSE 92295
// r := r * 2 else
92279: LD_ADDR_VAR 0 7
92283: PUSH
92284: LD_VAR 0 7
92288: PUSH
92289: LD_INT 2
92291: MUL
92292: ST_TO_ADDR
92293: GO 92321
// if amount > max then
92295: LD_VAR 0 9
92299: PUSH
92300: LD_VAR 0 4
92304: GREATER
92305: IFFALSE 92321
// r := r / 2 ;
92307: LD_ADDR_VAR 0 7
92311: PUSH
92312: LD_VAR 0 7
92316: PUSH
92317: LD_INT 2
92319: DIVREAL
92320: ST_TO_ADDR
// time := time / r ;
92321: LD_ADDR_VAR 0 8
92325: PUSH
92326: LD_VAR 0 8
92330: PUSH
92331: LD_VAR 0 7
92335: DIVREAL
92336: ST_TO_ADDR
// if time < 0 then
92337: LD_VAR 0 8
92341: PUSH
92342: LD_INT 0
92344: LESS
92345: IFFALSE 92362
// time := time * - 1 ;
92347: LD_ADDR_VAR 0 8
92351: PUSH
92352: LD_VAR 0 8
92356: PUSH
92357: LD_INT 1
92359: NEG
92360: MUL
92361: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
92362: LD_VAR 0 8
92366: PUSH
92367: LD_INT 35
92369: PPUSH
92370: LD_INT 875
92372: PPUSH
92373: CALL_OW 12
92377: PLUS
92378: PPUSH
92379: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
92383: LD_INT 1
92385: PPUSH
92386: LD_INT 5
92388: PPUSH
92389: CALL_OW 12
92393: PPUSH
92394: LD_VAR 0 1
92398: PPUSH
92399: LD_INT 1
92401: PPUSH
92402: CALL_OW 55
// end ;
92406: GO 92219
// end ;
92408: LD_VAR 0 5
92412: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
92413: LD_INT 0
92415: PPUSH
92416: PPUSH
92417: PPUSH
92418: PPUSH
92419: PPUSH
92420: PPUSH
92421: PPUSH
92422: PPUSH
// if not turrets or not factories then
92423: LD_VAR 0 1
92427: NOT
92428: PUSH
92429: LD_VAR 0 2
92433: NOT
92434: OR
92435: IFFALSE 92439
// exit ;
92437: GO 92746
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
92439: LD_ADDR_VAR 0 10
92443: PUSH
92444: LD_INT 5
92446: PUSH
92447: LD_INT 6
92449: PUSH
92450: EMPTY
92451: LIST
92452: LIST
92453: PUSH
92454: LD_INT 2
92456: PUSH
92457: LD_INT 4
92459: PUSH
92460: EMPTY
92461: LIST
92462: LIST
92463: PUSH
92464: LD_INT 3
92466: PUSH
92467: LD_INT 5
92469: PUSH
92470: EMPTY
92471: LIST
92472: LIST
92473: PUSH
92474: EMPTY
92475: LIST
92476: LIST
92477: LIST
92478: PUSH
92479: LD_INT 24
92481: PUSH
92482: LD_INT 25
92484: PUSH
92485: EMPTY
92486: LIST
92487: LIST
92488: PUSH
92489: LD_INT 23
92491: PUSH
92492: LD_INT 27
92494: PUSH
92495: EMPTY
92496: LIST
92497: LIST
92498: PUSH
92499: EMPTY
92500: LIST
92501: LIST
92502: PUSH
92503: LD_INT 42
92505: PUSH
92506: LD_INT 43
92508: PUSH
92509: EMPTY
92510: LIST
92511: LIST
92512: PUSH
92513: LD_INT 44
92515: PUSH
92516: LD_INT 46
92518: PUSH
92519: EMPTY
92520: LIST
92521: LIST
92522: PUSH
92523: LD_INT 45
92525: PUSH
92526: LD_INT 47
92528: PUSH
92529: EMPTY
92530: LIST
92531: LIST
92532: PUSH
92533: EMPTY
92534: LIST
92535: LIST
92536: LIST
92537: PUSH
92538: EMPTY
92539: LIST
92540: LIST
92541: LIST
92542: ST_TO_ADDR
// result := [ ] ;
92543: LD_ADDR_VAR 0 3
92547: PUSH
92548: EMPTY
92549: ST_TO_ADDR
// for i in turrets do
92550: LD_ADDR_VAR 0 4
92554: PUSH
92555: LD_VAR 0 1
92559: PUSH
92560: FOR_IN
92561: IFFALSE 92744
// begin nat := GetNation ( i ) ;
92563: LD_ADDR_VAR 0 7
92567: PUSH
92568: LD_VAR 0 4
92572: PPUSH
92573: CALL_OW 248
92577: ST_TO_ADDR
// weapon := 0 ;
92578: LD_ADDR_VAR 0 8
92582: PUSH
92583: LD_INT 0
92585: ST_TO_ADDR
// if not nat then
92586: LD_VAR 0 7
92590: NOT
92591: IFFALSE 92595
// continue ;
92593: GO 92560
// for j in list [ nat ] do
92595: LD_ADDR_VAR 0 5
92599: PUSH
92600: LD_VAR 0 10
92604: PUSH
92605: LD_VAR 0 7
92609: ARRAY
92610: PUSH
92611: FOR_IN
92612: IFFALSE 92653
// if GetBWeapon ( i ) = j [ 1 ] then
92614: LD_VAR 0 4
92618: PPUSH
92619: CALL_OW 269
92623: PUSH
92624: LD_VAR 0 5
92628: PUSH
92629: LD_INT 1
92631: ARRAY
92632: EQUAL
92633: IFFALSE 92651
// begin weapon := j [ 2 ] ;
92635: LD_ADDR_VAR 0 8
92639: PUSH
92640: LD_VAR 0 5
92644: PUSH
92645: LD_INT 2
92647: ARRAY
92648: ST_TO_ADDR
// break ;
92649: GO 92653
// end ;
92651: GO 92611
92653: POP
92654: POP
// if not weapon then
92655: LD_VAR 0 8
92659: NOT
92660: IFFALSE 92664
// continue ;
92662: GO 92560
// for k in factories do
92664: LD_ADDR_VAR 0 6
92668: PUSH
92669: LD_VAR 0 2
92673: PUSH
92674: FOR_IN
92675: IFFALSE 92740
// begin weapons := AvailableWeaponList ( k ) ;
92677: LD_ADDR_VAR 0 9
92681: PUSH
92682: LD_VAR 0 6
92686: PPUSH
92687: CALL_OW 478
92691: ST_TO_ADDR
// if not weapons then
92692: LD_VAR 0 9
92696: NOT
92697: IFFALSE 92701
// continue ;
92699: GO 92674
// if weapon in weapons then
92701: LD_VAR 0 8
92705: PUSH
92706: LD_VAR 0 9
92710: IN
92711: IFFALSE 92738
// begin result := [ i , weapon ] ;
92713: LD_ADDR_VAR 0 3
92717: PUSH
92718: LD_VAR 0 4
92722: PUSH
92723: LD_VAR 0 8
92727: PUSH
92728: EMPTY
92729: LIST
92730: LIST
92731: ST_TO_ADDR
// exit ;
92732: POP
92733: POP
92734: POP
92735: POP
92736: GO 92746
// end ; end ;
92738: GO 92674
92740: POP
92741: POP
// end ;
92742: GO 92560
92744: POP
92745: POP
// end ;
92746: LD_VAR 0 3
92750: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
92751: LD_INT 0
92753: PPUSH
// if not side or side > 8 then
92754: LD_VAR 0 3
92758: NOT
92759: PUSH
92760: LD_VAR 0 3
92764: PUSH
92765: LD_INT 8
92767: GREATER
92768: OR
92769: IFFALSE 92773
// exit ;
92771: GO 92832
// if not range then
92773: LD_VAR 0 4
92777: NOT
92778: IFFALSE 92789
// range := - 12 ;
92780: LD_ADDR_VAR 0 4
92784: PUSH
92785: LD_INT 12
92787: NEG
92788: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
92789: LD_VAR 0 1
92793: PPUSH
92794: LD_VAR 0 2
92798: PPUSH
92799: LD_VAR 0 3
92803: PPUSH
92804: LD_VAR 0 4
92808: PPUSH
92809: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
92813: LD_VAR 0 1
92817: PPUSH
92818: LD_VAR 0 2
92822: PPUSH
92823: LD_VAR 0 3
92827: PPUSH
92828: CALL_OW 331
// end ;
92832: LD_VAR 0 5
92836: RET
// export function Video ( mode ) ; begin
92837: LD_INT 0
92839: PPUSH
// ingame_video = mode ;
92840: LD_ADDR_OWVAR 52
92844: PUSH
92845: LD_VAR 0 1
92849: ST_TO_ADDR
// interface_hidden = mode ;
92850: LD_ADDR_OWVAR 54
92854: PUSH
92855: LD_VAR 0 1
92859: ST_TO_ADDR
// end ;
92860: LD_VAR 0 2
92864: RET
// export function Join ( array , element ) ; begin
92865: LD_INT 0
92867: PPUSH
// result := Replace ( array , array + 1 , element ) ;
92868: LD_ADDR_VAR 0 3
92872: PUSH
92873: LD_VAR 0 1
92877: PPUSH
92878: LD_VAR 0 1
92882: PUSH
92883: LD_INT 1
92885: PLUS
92886: PPUSH
92887: LD_VAR 0 2
92891: PPUSH
92892: CALL_OW 1
92896: ST_TO_ADDR
// end ;
92897: LD_VAR 0 3
92901: RET
// export function JoinUnion ( array , element ) ; begin
92902: LD_INT 0
92904: PPUSH
// result := array union element ;
92905: LD_ADDR_VAR 0 3
92909: PUSH
92910: LD_VAR 0 1
92914: PUSH
92915: LD_VAR 0 2
92919: UNION
92920: ST_TO_ADDR
// end ;
92921: LD_VAR 0 3
92925: RET
// export function GetBehemoths ( side ) ; begin
92926: LD_INT 0
92928: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
92929: LD_ADDR_VAR 0 2
92933: PUSH
92934: LD_INT 22
92936: PUSH
92937: LD_VAR 0 1
92941: PUSH
92942: EMPTY
92943: LIST
92944: LIST
92945: PUSH
92946: LD_INT 31
92948: PUSH
92949: LD_INT 25
92951: PUSH
92952: EMPTY
92953: LIST
92954: LIST
92955: PUSH
92956: EMPTY
92957: LIST
92958: LIST
92959: PPUSH
92960: CALL_OW 69
92964: ST_TO_ADDR
// end ;
92965: LD_VAR 0 2
92969: RET
// export function Shuffle ( array ) ; var i , index ; begin
92970: LD_INT 0
92972: PPUSH
92973: PPUSH
92974: PPUSH
// result := [ ] ;
92975: LD_ADDR_VAR 0 2
92979: PUSH
92980: EMPTY
92981: ST_TO_ADDR
// if not array then
92982: LD_VAR 0 1
92986: NOT
92987: IFFALSE 92991
// exit ;
92989: GO 93090
// Randomize ;
92991: CALL_OW 10
// for i = array downto 1 do
92995: LD_ADDR_VAR 0 3
92999: PUSH
93000: DOUBLE
93001: LD_VAR 0 1
93005: INC
93006: ST_TO_ADDR
93007: LD_INT 1
93009: PUSH
93010: FOR_DOWNTO
93011: IFFALSE 93088
// begin index := rand ( 1 , array ) ;
93013: LD_ADDR_VAR 0 4
93017: PUSH
93018: LD_INT 1
93020: PPUSH
93021: LD_VAR 0 1
93025: PPUSH
93026: CALL_OW 12
93030: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
93031: LD_ADDR_VAR 0 2
93035: PUSH
93036: LD_VAR 0 2
93040: PPUSH
93041: LD_VAR 0 2
93045: PUSH
93046: LD_INT 1
93048: PLUS
93049: PPUSH
93050: LD_VAR 0 1
93054: PUSH
93055: LD_VAR 0 4
93059: ARRAY
93060: PPUSH
93061: CALL_OW 2
93065: ST_TO_ADDR
// array := Delete ( array , index ) ;
93066: LD_ADDR_VAR 0 1
93070: PUSH
93071: LD_VAR 0 1
93075: PPUSH
93076: LD_VAR 0 4
93080: PPUSH
93081: CALL_OW 3
93085: ST_TO_ADDR
// end ;
93086: GO 93010
93088: POP
93089: POP
// end ;
93090: LD_VAR 0 2
93094: RET
// export function GetBaseMaterials ( base ) ; begin
93095: LD_INT 0
93097: PPUSH
// result := [ 0 , 0 , 0 ] ;
93098: LD_ADDR_VAR 0 2
93102: PUSH
93103: LD_INT 0
93105: PUSH
93106: LD_INT 0
93108: PUSH
93109: LD_INT 0
93111: PUSH
93112: EMPTY
93113: LIST
93114: LIST
93115: LIST
93116: ST_TO_ADDR
// if not base then
93117: LD_VAR 0 1
93121: NOT
93122: IFFALSE 93126
// exit ;
93124: GO 93175
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
93126: LD_ADDR_VAR 0 2
93130: PUSH
93131: LD_VAR 0 1
93135: PPUSH
93136: LD_INT 1
93138: PPUSH
93139: CALL_OW 275
93143: PUSH
93144: LD_VAR 0 1
93148: PPUSH
93149: LD_INT 2
93151: PPUSH
93152: CALL_OW 275
93156: PUSH
93157: LD_VAR 0 1
93161: PPUSH
93162: LD_INT 3
93164: PPUSH
93165: CALL_OW 275
93169: PUSH
93170: EMPTY
93171: LIST
93172: LIST
93173: LIST
93174: ST_TO_ADDR
// end ;
93175: LD_VAR 0 2
93179: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
93180: LD_INT 0
93182: PPUSH
93183: PPUSH
// result := array ;
93184: LD_ADDR_VAR 0 3
93188: PUSH
93189: LD_VAR 0 1
93193: ST_TO_ADDR
// if size >= result then
93194: LD_VAR 0 2
93198: PUSH
93199: LD_VAR 0 3
93203: GREATEREQUAL
93204: IFFALSE 93208
// exit ;
93206: GO 93258
// if size then
93208: LD_VAR 0 2
93212: IFFALSE 93258
// for i := array downto size do
93214: LD_ADDR_VAR 0 4
93218: PUSH
93219: DOUBLE
93220: LD_VAR 0 1
93224: INC
93225: ST_TO_ADDR
93226: LD_VAR 0 2
93230: PUSH
93231: FOR_DOWNTO
93232: IFFALSE 93256
// result := Delete ( result , result ) ;
93234: LD_ADDR_VAR 0 3
93238: PUSH
93239: LD_VAR 0 3
93243: PPUSH
93244: LD_VAR 0 3
93248: PPUSH
93249: CALL_OW 3
93253: ST_TO_ADDR
93254: GO 93231
93256: POP
93257: POP
// end ;
93258: LD_VAR 0 3
93262: RET
// export function ComExit ( unit ) ; var tmp ; begin
93263: LD_INT 0
93265: PPUSH
93266: PPUSH
// if not IsInUnit ( unit ) then
93267: LD_VAR 0 1
93271: PPUSH
93272: CALL_OW 310
93276: NOT
93277: IFFALSE 93281
// exit ;
93279: GO 93341
// tmp := IsInUnit ( unit ) ;
93281: LD_ADDR_VAR 0 3
93285: PUSH
93286: LD_VAR 0 1
93290: PPUSH
93291: CALL_OW 310
93295: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
93296: LD_VAR 0 3
93300: PPUSH
93301: CALL_OW 247
93305: PUSH
93306: LD_INT 2
93308: EQUAL
93309: IFFALSE 93322
// ComExitVehicle ( unit ) else
93311: LD_VAR 0 1
93315: PPUSH
93316: CALL_OW 121
93320: GO 93331
// ComExitBuilding ( unit ) ;
93322: LD_VAR 0 1
93326: PPUSH
93327: CALL_OW 122
// result := tmp ;
93331: LD_ADDR_VAR 0 2
93335: PUSH
93336: LD_VAR 0 3
93340: ST_TO_ADDR
// end ;
93341: LD_VAR 0 2
93345: RET
// export function ComExitAll ( units ) ; var i ; begin
93346: LD_INT 0
93348: PPUSH
93349: PPUSH
// if not units then
93350: LD_VAR 0 1
93354: NOT
93355: IFFALSE 93359
// exit ;
93357: GO 93385
// for i in units do
93359: LD_ADDR_VAR 0 3
93363: PUSH
93364: LD_VAR 0 1
93368: PUSH
93369: FOR_IN
93370: IFFALSE 93383
// ComExit ( i ) ;
93372: LD_VAR 0 3
93376: PPUSH
93377: CALL 93263 0 1
93381: GO 93369
93383: POP
93384: POP
// end ;
93385: LD_VAR 0 2
93389: RET
// export function ResetHc ; begin
93390: LD_INT 0
93392: PPUSH
// InitHc ;
93393: CALL_OW 19
// hc_importance := 0 ;
93397: LD_ADDR_OWVAR 32
93401: PUSH
93402: LD_INT 0
93404: ST_TO_ADDR
// end ;
93405: LD_VAR 0 1
93409: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
93410: LD_INT 0
93412: PPUSH
93413: PPUSH
93414: PPUSH
// _x := ( x1 + x2 ) div 2 ;
93415: LD_ADDR_VAR 0 6
93419: PUSH
93420: LD_VAR 0 1
93424: PUSH
93425: LD_VAR 0 3
93429: PLUS
93430: PUSH
93431: LD_INT 2
93433: DIV
93434: ST_TO_ADDR
// if _x < 0 then
93435: LD_VAR 0 6
93439: PUSH
93440: LD_INT 0
93442: LESS
93443: IFFALSE 93460
// _x := _x * - 1 ;
93445: LD_ADDR_VAR 0 6
93449: PUSH
93450: LD_VAR 0 6
93454: PUSH
93455: LD_INT 1
93457: NEG
93458: MUL
93459: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
93460: LD_ADDR_VAR 0 7
93464: PUSH
93465: LD_VAR 0 2
93469: PUSH
93470: LD_VAR 0 4
93474: PLUS
93475: PUSH
93476: LD_INT 2
93478: DIV
93479: ST_TO_ADDR
// if _y < 0 then
93480: LD_VAR 0 7
93484: PUSH
93485: LD_INT 0
93487: LESS
93488: IFFALSE 93505
// _y := _y * - 1 ;
93490: LD_ADDR_VAR 0 7
93494: PUSH
93495: LD_VAR 0 7
93499: PUSH
93500: LD_INT 1
93502: NEG
93503: MUL
93504: ST_TO_ADDR
// result := [ _x , _y ] ;
93505: LD_ADDR_VAR 0 5
93509: PUSH
93510: LD_VAR 0 6
93514: PUSH
93515: LD_VAR 0 7
93519: PUSH
93520: EMPTY
93521: LIST
93522: LIST
93523: ST_TO_ADDR
// end ;
93524: LD_VAR 0 5
93528: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
93529: LD_INT 0
93531: PPUSH
93532: PPUSH
93533: PPUSH
93534: PPUSH
// task := GetTaskList ( unit ) ;
93535: LD_ADDR_VAR 0 7
93539: PUSH
93540: LD_VAR 0 1
93544: PPUSH
93545: CALL_OW 437
93549: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
93550: LD_VAR 0 7
93554: NOT
93555: PUSH
93556: LD_VAR 0 1
93560: PPUSH
93561: LD_VAR 0 2
93565: PPUSH
93566: CALL_OW 308
93570: NOT
93571: AND
93572: IFFALSE 93576
// exit ;
93574: GO 93694
// if IsInArea ( unit , area ) then
93576: LD_VAR 0 1
93580: PPUSH
93581: LD_VAR 0 2
93585: PPUSH
93586: CALL_OW 308
93590: IFFALSE 93608
// begin ComMoveToArea ( unit , goAway ) ;
93592: LD_VAR 0 1
93596: PPUSH
93597: LD_VAR 0 3
93601: PPUSH
93602: CALL_OW 113
// exit ;
93606: GO 93694
// end ; if task [ 1 ] [ 1 ] <> M then
93608: LD_VAR 0 7
93612: PUSH
93613: LD_INT 1
93615: ARRAY
93616: PUSH
93617: LD_INT 1
93619: ARRAY
93620: PUSH
93621: LD_STRING M
93623: NONEQUAL
93624: IFFALSE 93628
// exit ;
93626: GO 93694
// x := task [ 1 ] [ 2 ] ;
93628: LD_ADDR_VAR 0 5
93632: PUSH
93633: LD_VAR 0 7
93637: PUSH
93638: LD_INT 1
93640: ARRAY
93641: PUSH
93642: LD_INT 2
93644: ARRAY
93645: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
93646: LD_ADDR_VAR 0 6
93650: PUSH
93651: LD_VAR 0 7
93655: PUSH
93656: LD_INT 1
93658: ARRAY
93659: PUSH
93660: LD_INT 3
93662: ARRAY
93663: ST_TO_ADDR
// if InArea ( x , y , area ) then
93664: LD_VAR 0 5
93668: PPUSH
93669: LD_VAR 0 6
93673: PPUSH
93674: LD_VAR 0 2
93678: PPUSH
93679: CALL_OW 309
93683: IFFALSE 93694
// ComStop ( unit ) ;
93685: LD_VAR 0 1
93689: PPUSH
93690: CALL_OW 141
// end ;
93694: LD_VAR 0 4
93698: RET
// export function Abs ( value ) ; begin
93699: LD_INT 0
93701: PPUSH
// result := value ;
93702: LD_ADDR_VAR 0 2
93706: PUSH
93707: LD_VAR 0 1
93711: ST_TO_ADDR
// if value < 0 then
93712: LD_VAR 0 1
93716: PUSH
93717: LD_INT 0
93719: LESS
93720: IFFALSE 93737
// result := value * - 1 ;
93722: LD_ADDR_VAR 0 2
93726: PUSH
93727: LD_VAR 0 1
93731: PUSH
93732: LD_INT 1
93734: NEG
93735: MUL
93736: ST_TO_ADDR
// end ;
93737: LD_VAR 0 2
93741: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
93742: LD_INT 0
93744: PPUSH
93745: PPUSH
93746: PPUSH
93747: PPUSH
93748: PPUSH
93749: PPUSH
93750: PPUSH
93751: PPUSH
// if not unit or not building then
93752: LD_VAR 0 1
93756: NOT
93757: PUSH
93758: LD_VAR 0 2
93762: NOT
93763: OR
93764: IFFALSE 93768
// exit ;
93766: GO 93994
// x := GetX ( building ) ;
93768: LD_ADDR_VAR 0 4
93772: PUSH
93773: LD_VAR 0 2
93777: PPUSH
93778: CALL_OW 250
93782: ST_TO_ADDR
// y := GetY ( building ) ;
93783: LD_ADDR_VAR 0 6
93787: PUSH
93788: LD_VAR 0 2
93792: PPUSH
93793: CALL_OW 251
93797: ST_TO_ADDR
// d := GetDir ( building ) ;
93798: LD_ADDR_VAR 0 8
93802: PUSH
93803: LD_VAR 0 2
93807: PPUSH
93808: CALL_OW 254
93812: ST_TO_ADDR
// r := 4 ;
93813: LD_ADDR_VAR 0 9
93817: PUSH
93818: LD_INT 4
93820: ST_TO_ADDR
// for i := 1 to 5 do
93821: LD_ADDR_VAR 0 10
93825: PUSH
93826: DOUBLE
93827: LD_INT 1
93829: DEC
93830: ST_TO_ADDR
93831: LD_INT 5
93833: PUSH
93834: FOR_TO
93835: IFFALSE 93992
// begin _x := ShiftX ( x , d , r + i ) ;
93837: LD_ADDR_VAR 0 5
93841: PUSH
93842: LD_VAR 0 4
93846: PPUSH
93847: LD_VAR 0 8
93851: PPUSH
93852: LD_VAR 0 9
93856: PUSH
93857: LD_VAR 0 10
93861: PLUS
93862: PPUSH
93863: CALL_OW 272
93867: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
93868: LD_ADDR_VAR 0 7
93872: PUSH
93873: LD_VAR 0 6
93877: PPUSH
93878: LD_VAR 0 8
93882: PPUSH
93883: LD_VAR 0 9
93887: PUSH
93888: LD_VAR 0 10
93892: PLUS
93893: PPUSH
93894: CALL_OW 273
93898: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
93899: LD_VAR 0 5
93903: PPUSH
93904: LD_VAR 0 7
93908: PPUSH
93909: CALL_OW 488
93913: PUSH
93914: LD_VAR 0 5
93918: PPUSH
93919: LD_VAR 0 7
93923: PPUSH
93924: CALL_OW 428
93928: PPUSH
93929: CALL_OW 247
93933: PUSH
93934: LD_INT 3
93936: PUSH
93937: LD_INT 2
93939: PUSH
93940: EMPTY
93941: LIST
93942: LIST
93943: IN
93944: NOT
93945: AND
93946: IFFALSE 93990
// begin ComMoveXY ( unit , _x , _y ) ;
93948: LD_VAR 0 1
93952: PPUSH
93953: LD_VAR 0 5
93957: PPUSH
93958: LD_VAR 0 7
93962: PPUSH
93963: CALL_OW 111
// result := [ _x , _y ] ;
93967: LD_ADDR_VAR 0 3
93971: PUSH
93972: LD_VAR 0 5
93976: PUSH
93977: LD_VAR 0 7
93981: PUSH
93982: EMPTY
93983: LIST
93984: LIST
93985: ST_TO_ADDR
// exit ;
93986: POP
93987: POP
93988: GO 93994
// end ; end ;
93990: GO 93834
93992: POP
93993: POP
// end ;
93994: LD_VAR 0 3
93998: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
93999: LD_INT 0
94001: PPUSH
94002: PPUSH
94003: PPUSH
// result := 0 ;
94004: LD_ADDR_VAR 0 3
94008: PUSH
94009: LD_INT 0
94011: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
94012: LD_VAR 0 1
94016: PUSH
94017: LD_INT 0
94019: LESS
94020: PUSH
94021: LD_VAR 0 1
94025: PUSH
94026: LD_INT 8
94028: GREATER
94029: OR
94030: PUSH
94031: LD_VAR 0 2
94035: PUSH
94036: LD_INT 0
94038: LESS
94039: OR
94040: PUSH
94041: LD_VAR 0 2
94045: PUSH
94046: LD_INT 8
94048: GREATER
94049: OR
94050: IFFALSE 94054
// exit ;
94052: GO 94129
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
94054: LD_ADDR_VAR 0 4
94058: PUSH
94059: LD_INT 22
94061: PUSH
94062: LD_VAR 0 2
94066: PUSH
94067: EMPTY
94068: LIST
94069: LIST
94070: PPUSH
94071: CALL_OW 69
94075: PUSH
94076: FOR_IN
94077: IFFALSE 94127
// begin un := UnitShoot ( i ) ;
94079: LD_ADDR_VAR 0 5
94083: PUSH
94084: LD_VAR 0 4
94088: PPUSH
94089: CALL_OW 504
94093: ST_TO_ADDR
// if GetSide ( un ) = side1 then
94094: LD_VAR 0 5
94098: PPUSH
94099: CALL_OW 255
94103: PUSH
94104: LD_VAR 0 1
94108: EQUAL
94109: IFFALSE 94125
// begin result := un ;
94111: LD_ADDR_VAR 0 3
94115: PUSH
94116: LD_VAR 0 5
94120: ST_TO_ADDR
// exit ;
94121: POP
94122: POP
94123: GO 94129
// end ; end ;
94125: GO 94076
94127: POP
94128: POP
// end ;
94129: LD_VAR 0 3
94133: RET
// export function GetCargoBay ( units ) ; begin
94134: LD_INT 0
94136: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
94137: LD_ADDR_VAR 0 2
94141: PUSH
94142: LD_VAR 0 1
94146: PPUSH
94147: LD_INT 2
94149: PUSH
94150: LD_INT 34
94152: PUSH
94153: LD_INT 12
94155: PUSH
94156: EMPTY
94157: LIST
94158: LIST
94159: PUSH
94160: LD_INT 34
94162: PUSH
94163: LD_INT 51
94165: PUSH
94166: EMPTY
94167: LIST
94168: LIST
94169: PUSH
94170: LD_INT 34
94172: PUSH
94173: LD_INT 32
94175: PUSH
94176: EMPTY
94177: LIST
94178: LIST
94179: PUSH
94180: LD_INT 34
94182: PUSH
94183: LD_INT 89
94185: PUSH
94186: EMPTY
94187: LIST
94188: LIST
94189: PUSH
94190: EMPTY
94191: LIST
94192: LIST
94193: LIST
94194: LIST
94195: LIST
94196: PPUSH
94197: CALL_OW 72
94201: ST_TO_ADDR
// end ;
94202: LD_VAR 0 2
94206: RET
// export function Negate ( value ) ; begin
94207: LD_INT 0
94209: PPUSH
// result := not value ;
94210: LD_ADDR_VAR 0 2
94214: PUSH
94215: LD_VAR 0 1
94219: NOT
94220: ST_TO_ADDR
// end ;
94221: LD_VAR 0 2
94225: RET
// export function Inc ( value ) ; begin
94226: LD_INT 0
94228: PPUSH
// result := value + 1 ;
94229: LD_ADDR_VAR 0 2
94233: PUSH
94234: LD_VAR 0 1
94238: PUSH
94239: LD_INT 1
94241: PLUS
94242: ST_TO_ADDR
// end ;
94243: LD_VAR 0 2
94247: RET
// export function Dec ( value ) ; begin
94248: LD_INT 0
94250: PPUSH
// result := value - 1 ;
94251: LD_ADDR_VAR 0 2
94255: PUSH
94256: LD_VAR 0 1
94260: PUSH
94261: LD_INT 1
94263: MINUS
94264: ST_TO_ADDR
// end ;
94265: LD_VAR 0 2
94269: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
94270: LD_INT 0
94272: PPUSH
94273: PPUSH
94274: PPUSH
94275: PPUSH
94276: PPUSH
94277: PPUSH
94278: PPUSH
94279: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
94280: LD_VAR 0 1
94284: PPUSH
94285: LD_VAR 0 2
94289: PPUSH
94290: CALL_OW 488
94294: NOT
94295: PUSH
94296: LD_VAR 0 3
94300: PPUSH
94301: LD_VAR 0 4
94305: PPUSH
94306: CALL_OW 488
94310: NOT
94311: OR
94312: IFFALSE 94325
// begin result := - 1 ;
94314: LD_ADDR_VAR 0 5
94318: PUSH
94319: LD_INT 1
94321: NEG
94322: ST_TO_ADDR
// exit ;
94323: GO 94560
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
94325: LD_ADDR_VAR 0 12
94329: PUSH
94330: LD_VAR 0 1
94334: PPUSH
94335: LD_VAR 0 2
94339: PPUSH
94340: LD_VAR 0 3
94344: PPUSH
94345: LD_VAR 0 4
94349: PPUSH
94350: CALL 93410 0 4
94354: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
94355: LD_ADDR_VAR 0 11
94359: PUSH
94360: LD_VAR 0 1
94364: PPUSH
94365: LD_VAR 0 2
94369: PPUSH
94370: LD_VAR 0 12
94374: PUSH
94375: LD_INT 1
94377: ARRAY
94378: PPUSH
94379: LD_VAR 0 12
94383: PUSH
94384: LD_INT 2
94386: ARRAY
94387: PPUSH
94388: CALL_OW 298
94392: ST_TO_ADDR
// distance := 9999 ;
94393: LD_ADDR_VAR 0 10
94397: PUSH
94398: LD_INT 9999
94400: ST_TO_ADDR
// for i := 0 to 5 do
94401: LD_ADDR_VAR 0 6
94405: PUSH
94406: DOUBLE
94407: LD_INT 0
94409: DEC
94410: ST_TO_ADDR
94411: LD_INT 5
94413: PUSH
94414: FOR_TO
94415: IFFALSE 94558
// begin _x := ShiftX ( x1 , i , centerDist ) ;
94417: LD_ADDR_VAR 0 7
94421: PUSH
94422: LD_VAR 0 1
94426: PPUSH
94427: LD_VAR 0 6
94431: PPUSH
94432: LD_VAR 0 11
94436: PPUSH
94437: CALL_OW 272
94441: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
94442: LD_ADDR_VAR 0 8
94446: PUSH
94447: LD_VAR 0 2
94451: PPUSH
94452: LD_VAR 0 6
94456: PPUSH
94457: LD_VAR 0 11
94461: PPUSH
94462: CALL_OW 273
94466: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
94467: LD_VAR 0 7
94471: PPUSH
94472: LD_VAR 0 8
94476: PPUSH
94477: CALL_OW 488
94481: NOT
94482: IFFALSE 94486
// continue ;
94484: GO 94414
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
94486: LD_ADDR_VAR 0 9
94490: PUSH
94491: LD_VAR 0 12
94495: PUSH
94496: LD_INT 1
94498: ARRAY
94499: PPUSH
94500: LD_VAR 0 12
94504: PUSH
94505: LD_INT 2
94507: ARRAY
94508: PPUSH
94509: LD_VAR 0 7
94513: PPUSH
94514: LD_VAR 0 8
94518: PPUSH
94519: CALL_OW 298
94523: ST_TO_ADDR
// if tmp < distance then
94524: LD_VAR 0 9
94528: PUSH
94529: LD_VAR 0 10
94533: LESS
94534: IFFALSE 94556
// begin result := i ;
94536: LD_ADDR_VAR 0 5
94540: PUSH
94541: LD_VAR 0 6
94545: ST_TO_ADDR
// distance := tmp ;
94546: LD_ADDR_VAR 0 10
94550: PUSH
94551: LD_VAR 0 9
94555: ST_TO_ADDR
// end ; end ;
94556: GO 94414
94558: POP
94559: POP
// end ;
94560: LD_VAR 0 5
94564: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94565: LD_INT 0
94567: PPUSH
94568: PPUSH
// if not driver or not IsInUnit ( driver ) then
94569: LD_VAR 0 1
94573: NOT
94574: PUSH
94575: LD_VAR 0 1
94579: PPUSH
94580: CALL_OW 310
94584: NOT
94585: OR
94586: IFFALSE 94590
// exit ;
94588: GO 94680
// vehicle := IsInUnit ( driver ) ;
94590: LD_ADDR_VAR 0 3
94594: PUSH
94595: LD_VAR 0 1
94599: PPUSH
94600: CALL_OW 310
94604: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94605: LD_VAR 0 1
94609: PPUSH
94610: LD_STRING \
94612: PUSH
94613: LD_INT 0
94615: PUSH
94616: LD_INT 0
94618: PUSH
94619: LD_INT 0
94621: PUSH
94622: LD_INT 0
94624: PUSH
94625: LD_INT 0
94627: PUSH
94628: LD_INT 0
94630: PUSH
94631: EMPTY
94632: LIST
94633: LIST
94634: LIST
94635: LIST
94636: LIST
94637: LIST
94638: LIST
94639: PUSH
94640: LD_STRING E
94642: PUSH
94643: LD_INT 0
94645: PUSH
94646: LD_INT 0
94648: PUSH
94649: LD_VAR 0 3
94653: PUSH
94654: LD_INT 0
94656: PUSH
94657: LD_INT 0
94659: PUSH
94660: LD_INT 0
94662: PUSH
94663: EMPTY
94664: LIST
94665: LIST
94666: LIST
94667: LIST
94668: LIST
94669: LIST
94670: LIST
94671: PUSH
94672: EMPTY
94673: LIST
94674: LIST
94675: PPUSH
94676: CALL_OW 446
// end ;
94680: LD_VAR 0 2
94684: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94685: LD_INT 0
94687: PPUSH
94688: PPUSH
// if not driver or not IsInUnit ( driver ) then
94689: LD_VAR 0 1
94693: NOT
94694: PUSH
94695: LD_VAR 0 1
94699: PPUSH
94700: CALL_OW 310
94704: NOT
94705: OR
94706: IFFALSE 94710
// exit ;
94708: GO 94800
// vehicle := IsInUnit ( driver ) ;
94710: LD_ADDR_VAR 0 3
94714: PUSH
94715: LD_VAR 0 1
94719: PPUSH
94720: CALL_OW 310
94724: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94725: LD_VAR 0 1
94729: PPUSH
94730: LD_STRING \
94732: PUSH
94733: LD_INT 0
94735: PUSH
94736: LD_INT 0
94738: PUSH
94739: LD_INT 0
94741: PUSH
94742: LD_INT 0
94744: PUSH
94745: LD_INT 0
94747: PUSH
94748: LD_INT 0
94750: PUSH
94751: EMPTY
94752: LIST
94753: LIST
94754: LIST
94755: LIST
94756: LIST
94757: LIST
94758: LIST
94759: PUSH
94760: LD_STRING E
94762: PUSH
94763: LD_INT 0
94765: PUSH
94766: LD_INT 0
94768: PUSH
94769: LD_VAR 0 3
94773: PUSH
94774: LD_INT 0
94776: PUSH
94777: LD_INT 0
94779: PUSH
94780: LD_INT 0
94782: PUSH
94783: EMPTY
94784: LIST
94785: LIST
94786: LIST
94787: LIST
94788: LIST
94789: LIST
94790: LIST
94791: PUSH
94792: EMPTY
94793: LIST
94794: LIST
94795: PPUSH
94796: CALL_OW 447
// end ;
94800: LD_VAR 0 2
94804: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
94805: LD_INT 0
94807: PPUSH
94808: PPUSH
94809: PPUSH
// tmp := [ ] ;
94810: LD_ADDR_VAR 0 5
94814: PUSH
94815: EMPTY
94816: ST_TO_ADDR
// for i in units do
94817: LD_ADDR_VAR 0 4
94821: PUSH
94822: LD_VAR 0 1
94826: PUSH
94827: FOR_IN
94828: IFFALSE 94866
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
94830: LD_ADDR_VAR 0 5
94834: PUSH
94835: LD_VAR 0 5
94839: PPUSH
94840: LD_VAR 0 5
94844: PUSH
94845: LD_INT 1
94847: PLUS
94848: PPUSH
94849: LD_VAR 0 4
94853: PPUSH
94854: CALL_OW 256
94858: PPUSH
94859: CALL_OW 2
94863: ST_TO_ADDR
94864: GO 94827
94866: POP
94867: POP
// if not tmp then
94868: LD_VAR 0 5
94872: NOT
94873: IFFALSE 94877
// exit ;
94875: GO 94925
// if asc then
94877: LD_VAR 0 2
94881: IFFALSE 94905
// result := SortListByListAsc ( units , tmp ) else
94883: LD_ADDR_VAR 0 3
94887: PUSH
94888: LD_VAR 0 1
94892: PPUSH
94893: LD_VAR 0 5
94897: PPUSH
94898: CALL_OW 76
94902: ST_TO_ADDR
94903: GO 94925
// result := SortListByListDesc ( units , tmp ) ;
94905: LD_ADDR_VAR 0 3
94909: PUSH
94910: LD_VAR 0 1
94914: PPUSH
94915: LD_VAR 0 5
94919: PPUSH
94920: CALL_OW 77
94924: ST_TO_ADDR
// end ;
94925: LD_VAR 0 3
94929: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
94930: LD_INT 0
94932: PPUSH
94933: PPUSH
// task := GetTaskList ( mech ) ;
94934: LD_ADDR_VAR 0 4
94938: PUSH
94939: LD_VAR 0 1
94943: PPUSH
94944: CALL_OW 437
94948: ST_TO_ADDR
// if not task then
94949: LD_VAR 0 4
94953: NOT
94954: IFFALSE 94958
// exit ;
94956: GO 95000
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
94958: LD_ADDR_VAR 0 3
94962: PUSH
94963: LD_VAR 0 4
94967: PUSH
94968: LD_INT 1
94970: ARRAY
94971: PUSH
94972: LD_INT 1
94974: ARRAY
94975: PUSH
94976: LD_STRING r
94978: EQUAL
94979: PUSH
94980: LD_VAR 0 4
94984: PUSH
94985: LD_INT 1
94987: ARRAY
94988: PUSH
94989: LD_INT 4
94991: ARRAY
94992: PUSH
94993: LD_VAR 0 2
94997: EQUAL
94998: AND
94999: ST_TO_ADDR
// end ;
95000: LD_VAR 0 3
95004: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
95005: LD_INT 0
95007: PPUSH
// SetDir ( unit , d ) ;
95008: LD_VAR 0 1
95012: PPUSH
95013: LD_VAR 0 4
95017: PPUSH
95018: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
95022: LD_VAR 0 1
95026: PPUSH
95027: LD_VAR 0 2
95031: PPUSH
95032: LD_VAR 0 3
95036: PPUSH
95037: LD_VAR 0 5
95041: PPUSH
95042: CALL_OW 48
// end ;
95046: LD_VAR 0 6
95050: RET
// export function ToNaturalNumber ( number ) ; begin
95051: LD_INT 0
95053: PPUSH
// result := number div 1 ;
95054: LD_ADDR_VAR 0 2
95058: PUSH
95059: LD_VAR 0 1
95063: PUSH
95064: LD_INT 1
95066: DIV
95067: ST_TO_ADDR
// if number < 0 then
95068: LD_VAR 0 1
95072: PUSH
95073: LD_INT 0
95075: LESS
95076: IFFALSE 95086
// result := 0 ;
95078: LD_ADDR_VAR 0 2
95082: PUSH
95083: LD_INT 0
95085: ST_TO_ADDR
// end ;
95086: LD_VAR 0 2
95090: RET
// export function SortByClass ( units , class ) ; var un ; begin
95091: LD_INT 0
95093: PPUSH
95094: PPUSH
// if not units or not class then
95095: LD_VAR 0 1
95099: NOT
95100: PUSH
95101: LD_VAR 0 2
95105: NOT
95106: OR
95107: IFFALSE 95111
// exit ;
95109: GO 95206
// result := [ ] ;
95111: LD_ADDR_VAR 0 3
95115: PUSH
95116: EMPTY
95117: ST_TO_ADDR
// for un in units do
95118: LD_ADDR_VAR 0 4
95122: PUSH
95123: LD_VAR 0 1
95127: PUSH
95128: FOR_IN
95129: IFFALSE 95204
// if GetClass ( un ) = class then
95131: LD_VAR 0 4
95135: PPUSH
95136: CALL_OW 257
95140: PUSH
95141: LD_VAR 0 2
95145: EQUAL
95146: IFFALSE 95173
// result := Insert ( result , 1 , un ) else
95148: LD_ADDR_VAR 0 3
95152: PUSH
95153: LD_VAR 0 3
95157: PPUSH
95158: LD_INT 1
95160: PPUSH
95161: LD_VAR 0 4
95165: PPUSH
95166: CALL_OW 2
95170: ST_TO_ADDR
95171: GO 95202
// result := Replace ( result , result + 1 , un ) ;
95173: LD_ADDR_VAR 0 3
95177: PUSH
95178: LD_VAR 0 3
95182: PPUSH
95183: LD_VAR 0 3
95187: PUSH
95188: LD_INT 1
95190: PLUS
95191: PPUSH
95192: LD_VAR 0 4
95196: PPUSH
95197: CALL_OW 1
95201: ST_TO_ADDR
95202: GO 95128
95204: POP
95205: POP
// end ;
95206: LD_VAR 0 3
95210: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
95211: LD_INT 0
95213: PPUSH
95214: PPUSH
95215: PPUSH
95216: PPUSH
95217: PPUSH
95218: PPUSH
95219: PPUSH
// result := [ ] ;
95220: LD_ADDR_VAR 0 4
95224: PUSH
95225: EMPTY
95226: ST_TO_ADDR
// if x - r < 0 then
95227: LD_VAR 0 1
95231: PUSH
95232: LD_VAR 0 3
95236: MINUS
95237: PUSH
95238: LD_INT 0
95240: LESS
95241: IFFALSE 95253
// min_x := 0 else
95243: LD_ADDR_VAR 0 8
95247: PUSH
95248: LD_INT 0
95250: ST_TO_ADDR
95251: GO 95269
// min_x := x - r ;
95253: LD_ADDR_VAR 0 8
95257: PUSH
95258: LD_VAR 0 1
95262: PUSH
95263: LD_VAR 0 3
95267: MINUS
95268: ST_TO_ADDR
// if y - r < 0 then
95269: LD_VAR 0 2
95273: PUSH
95274: LD_VAR 0 3
95278: MINUS
95279: PUSH
95280: LD_INT 0
95282: LESS
95283: IFFALSE 95295
// min_y := 0 else
95285: LD_ADDR_VAR 0 7
95289: PUSH
95290: LD_INT 0
95292: ST_TO_ADDR
95293: GO 95311
// min_y := y - r ;
95295: LD_ADDR_VAR 0 7
95299: PUSH
95300: LD_VAR 0 2
95304: PUSH
95305: LD_VAR 0 3
95309: MINUS
95310: ST_TO_ADDR
// max_x := x + r ;
95311: LD_ADDR_VAR 0 9
95315: PUSH
95316: LD_VAR 0 1
95320: PUSH
95321: LD_VAR 0 3
95325: PLUS
95326: ST_TO_ADDR
// max_y := y + r ;
95327: LD_ADDR_VAR 0 10
95331: PUSH
95332: LD_VAR 0 2
95336: PUSH
95337: LD_VAR 0 3
95341: PLUS
95342: ST_TO_ADDR
// for _x = min_x to max_x do
95343: LD_ADDR_VAR 0 5
95347: PUSH
95348: DOUBLE
95349: LD_VAR 0 8
95353: DEC
95354: ST_TO_ADDR
95355: LD_VAR 0 9
95359: PUSH
95360: FOR_TO
95361: IFFALSE 95462
// for _y = min_y to max_y do
95363: LD_ADDR_VAR 0 6
95367: PUSH
95368: DOUBLE
95369: LD_VAR 0 7
95373: DEC
95374: ST_TO_ADDR
95375: LD_VAR 0 10
95379: PUSH
95380: FOR_TO
95381: IFFALSE 95458
// begin if not ValidHex ( _x , _y ) then
95383: LD_VAR 0 5
95387: PPUSH
95388: LD_VAR 0 6
95392: PPUSH
95393: CALL_OW 488
95397: NOT
95398: IFFALSE 95402
// continue ;
95400: GO 95380
// if GetResourceTypeXY ( _x , _y ) then
95402: LD_VAR 0 5
95406: PPUSH
95407: LD_VAR 0 6
95411: PPUSH
95412: CALL_OW 283
95416: IFFALSE 95456
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
95418: LD_ADDR_VAR 0 4
95422: PUSH
95423: LD_VAR 0 4
95427: PPUSH
95428: LD_VAR 0 4
95432: PUSH
95433: LD_INT 1
95435: PLUS
95436: PPUSH
95437: LD_VAR 0 5
95441: PUSH
95442: LD_VAR 0 6
95446: PUSH
95447: EMPTY
95448: LIST
95449: LIST
95450: PPUSH
95451: CALL_OW 1
95455: ST_TO_ADDR
// end ;
95456: GO 95380
95458: POP
95459: POP
95460: GO 95360
95462: POP
95463: POP
// end ;
95464: LD_VAR 0 4
95468: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
95469: LD_INT 0
95471: PPUSH
95472: PPUSH
95473: PPUSH
95474: PPUSH
95475: PPUSH
95476: PPUSH
95477: PPUSH
95478: PPUSH
// if not units then
95479: LD_VAR 0 1
95483: NOT
95484: IFFALSE 95488
// exit ;
95486: GO 96016
// result := UnitFilter ( units , [ f_ok ] ) ;
95488: LD_ADDR_VAR 0 3
95492: PUSH
95493: LD_VAR 0 1
95497: PPUSH
95498: LD_INT 50
95500: PUSH
95501: EMPTY
95502: LIST
95503: PPUSH
95504: CALL_OW 72
95508: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
95509: LD_ADDR_VAR 0 8
95513: PUSH
95514: LD_VAR 0 1
95518: PUSH
95519: LD_INT 1
95521: ARRAY
95522: PPUSH
95523: CALL_OW 255
95527: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
95528: LD_ADDR_VAR 0 10
95532: PUSH
95533: LD_INT 29
95535: PUSH
95536: LD_INT 91
95538: PUSH
95539: LD_INT 49
95541: PUSH
95542: EMPTY
95543: LIST
95544: LIST
95545: LIST
95546: ST_TO_ADDR
// if not result then
95547: LD_VAR 0 3
95551: NOT
95552: IFFALSE 95556
// exit ;
95554: GO 96016
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
95556: LD_ADDR_VAR 0 5
95560: PUSH
95561: LD_INT 81
95563: PUSH
95564: LD_VAR 0 8
95568: PUSH
95569: EMPTY
95570: LIST
95571: LIST
95572: PPUSH
95573: CALL_OW 69
95577: ST_TO_ADDR
// for i in result do
95578: LD_ADDR_VAR 0 4
95582: PUSH
95583: LD_VAR 0 3
95587: PUSH
95588: FOR_IN
95589: IFFALSE 96014
// begin tag := GetTag ( i ) + 1 ;
95591: LD_ADDR_VAR 0 9
95595: PUSH
95596: LD_VAR 0 4
95600: PPUSH
95601: CALL_OW 110
95605: PUSH
95606: LD_INT 1
95608: PLUS
95609: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
95610: LD_ADDR_VAR 0 7
95614: PUSH
95615: LD_VAR 0 4
95619: PPUSH
95620: CALL_OW 250
95624: PPUSH
95625: LD_VAR 0 4
95629: PPUSH
95630: CALL_OW 251
95634: PPUSH
95635: LD_INT 4
95637: PPUSH
95638: CALL 95211 0 3
95642: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
95643: LD_VAR 0 4
95647: PPUSH
95648: CALL_OW 247
95652: PUSH
95653: LD_INT 2
95655: EQUAL
95656: PUSH
95657: LD_VAR 0 7
95661: PUSH
95662: LD_INT 2
95664: GREATER
95665: AND
95666: PUSH
95667: LD_VAR 0 4
95671: PPUSH
95672: CALL_OW 264
95676: PUSH
95677: LD_VAR 0 10
95681: IN
95682: NOT
95683: AND
95684: IFFALSE 95723
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
95686: LD_VAR 0 4
95690: PPUSH
95691: LD_VAR 0 7
95695: PUSH
95696: LD_INT 1
95698: ARRAY
95699: PUSH
95700: LD_INT 1
95702: ARRAY
95703: PPUSH
95704: LD_VAR 0 7
95708: PUSH
95709: LD_INT 1
95711: ARRAY
95712: PUSH
95713: LD_INT 2
95715: ARRAY
95716: PPUSH
95717: CALL_OW 116
95721: GO 96012
// if path > tag then
95723: LD_VAR 0 2
95727: PUSH
95728: LD_VAR 0 9
95732: GREATER
95733: IFFALSE 95941
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
95735: LD_ADDR_VAR 0 6
95739: PUSH
95740: LD_VAR 0 5
95744: PPUSH
95745: LD_INT 91
95747: PUSH
95748: LD_VAR 0 4
95752: PUSH
95753: LD_INT 8
95755: PUSH
95756: EMPTY
95757: LIST
95758: LIST
95759: LIST
95760: PPUSH
95761: CALL_OW 72
95765: ST_TO_ADDR
// if nearEnemy then
95766: LD_VAR 0 6
95770: IFFALSE 95839
// begin if GetWeapon ( i ) = ru_time_lapser then
95772: LD_VAR 0 4
95776: PPUSH
95777: CALL_OW 264
95781: PUSH
95782: LD_INT 49
95784: EQUAL
95785: IFFALSE 95813
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
95787: LD_VAR 0 4
95791: PPUSH
95792: LD_VAR 0 6
95796: PPUSH
95797: LD_VAR 0 4
95801: PPUSH
95802: CALL_OW 74
95806: PPUSH
95807: CALL_OW 112
95811: GO 95837
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
95813: LD_VAR 0 4
95817: PPUSH
95818: LD_VAR 0 6
95822: PPUSH
95823: LD_VAR 0 4
95827: PPUSH
95828: CALL_OW 74
95832: PPUSH
95833: CALL 97087 0 2
// end else
95837: GO 95939
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
95839: LD_VAR 0 4
95843: PPUSH
95844: LD_VAR 0 2
95848: PUSH
95849: LD_VAR 0 9
95853: ARRAY
95854: PUSH
95855: LD_INT 1
95857: ARRAY
95858: PPUSH
95859: LD_VAR 0 2
95863: PUSH
95864: LD_VAR 0 9
95868: ARRAY
95869: PUSH
95870: LD_INT 2
95872: ARRAY
95873: PPUSH
95874: CALL_OW 297
95878: PUSH
95879: LD_INT 6
95881: GREATER
95882: IFFALSE 95925
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
95884: LD_VAR 0 4
95888: PPUSH
95889: LD_VAR 0 2
95893: PUSH
95894: LD_VAR 0 9
95898: ARRAY
95899: PUSH
95900: LD_INT 1
95902: ARRAY
95903: PPUSH
95904: LD_VAR 0 2
95908: PUSH
95909: LD_VAR 0 9
95913: ARRAY
95914: PUSH
95915: LD_INT 2
95917: ARRAY
95918: PPUSH
95919: CALL_OW 114
95923: GO 95939
// SetTag ( i , tag ) ;
95925: LD_VAR 0 4
95929: PPUSH
95930: LD_VAR 0 9
95934: PPUSH
95935: CALL_OW 109
// end else
95939: GO 96012
// if enemy then
95941: LD_VAR 0 5
95945: IFFALSE 96012
// begin if GetWeapon ( i ) = ru_time_lapser then
95947: LD_VAR 0 4
95951: PPUSH
95952: CALL_OW 264
95956: PUSH
95957: LD_INT 49
95959: EQUAL
95960: IFFALSE 95988
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
95962: LD_VAR 0 4
95966: PPUSH
95967: LD_VAR 0 5
95971: PPUSH
95972: LD_VAR 0 4
95976: PPUSH
95977: CALL_OW 74
95981: PPUSH
95982: CALL_OW 112
95986: GO 96012
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
95988: LD_VAR 0 4
95992: PPUSH
95993: LD_VAR 0 5
95997: PPUSH
95998: LD_VAR 0 4
96002: PPUSH
96003: CALL_OW 74
96007: PPUSH
96008: CALL 97087 0 2
// end ; end ;
96012: GO 95588
96014: POP
96015: POP
// end ;
96016: LD_VAR 0 3
96020: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
96021: LD_INT 0
96023: PPUSH
96024: PPUSH
96025: PPUSH
// if not unit or IsInUnit ( unit ) then
96026: LD_VAR 0 1
96030: NOT
96031: PUSH
96032: LD_VAR 0 1
96036: PPUSH
96037: CALL_OW 310
96041: OR
96042: IFFALSE 96046
// exit ;
96044: GO 96137
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
96046: LD_ADDR_VAR 0 4
96050: PUSH
96051: LD_VAR 0 1
96055: PPUSH
96056: CALL_OW 250
96060: PPUSH
96061: LD_VAR 0 2
96065: PPUSH
96066: LD_INT 1
96068: PPUSH
96069: CALL_OW 272
96073: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
96074: LD_ADDR_VAR 0 5
96078: PUSH
96079: LD_VAR 0 1
96083: PPUSH
96084: CALL_OW 251
96088: PPUSH
96089: LD_VAR 0 2
96093: PPUSH
96094: LD_INT 1
96096: PPUSH
96097: CALL_OW 273
96101: ST_TO_ADDR
// if ValidHex ( x , y ) then
96102: LD_VAR 0 4
96106: PPUSH
96107: LD_VAR 0 5
96111: PPUSH
96112: CALL_OW 488
96116: IFFALSE 96137
// ComTurnXY ( unit , x , y ) ;
96118: LD_VAR 0 1
96122: PPUSH
96123: LD_VAR 0 4
96127: PPUSH
96128: LD_VAR 0 5
96132: PPUSH
96133: CALL_OW 118
// end ;
96137: LD_VAR 0 3
96141: RET
// export function SeeUnits ( side , units ) ; var i ; begin
96142: LD_INT 0
96144: PPUSH
96145: PPUSH
// result := false ;
96146: LD_ADDR_VAR 0 3
96150: PUSH
96151: LD_INT 0
96153: ST_TO_ADDR
// if not units then
96154: LD_VAR 0 2
96158: NOT
96159: IFFALSE 96163
// exit ;
96161: GO 96208
// for i in units do
96163: LD_ADDR_VAR 0 4
96167: PUSH
96168: LD_VAR 0 2
96172: PUSH
96173: FOR_IN
96174: IFFALSE 96206
// if See ( side , i ) then
96176: LD_VAR 0 1
96180: PPUSH
96181: LD_VAR 0 4
96185: PPUSH
96186: CALL_OW 292
96190: IFFALSE 96204
// begin result := true ;
96192: LD_ADDR_VAR 0 3
96196: PUSH
96197: LD_INT 1
96199: ST_TO_ADDR
// exit ;
96200: POP
96201: POP
96202: GO 96208
// end ;
96204: GO 96173
96206: POP
96207: POP
// end ;
96208: LD_VAR 0 3
96212: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
96213: LD_INT 0
96215: PPUSH
96216: PPUSH
96217: PPUSH
96218: PPUSH
// if not unit or not points then
96219: LD_VAR 0 1
96223: NOT
96224: PUSH
96225: LD_VAR 0 2
96229: NOT
96230: OR
96231: IFFALSE 96235
// exit ;
96233: GO 96325
// dist := 99999 ;
96235: LD_ADDR_VAR 0 5
96239: PUSH
96240: LD_INT 99999
96242: ST_TO_ADDR
// for i in points do
96243: LD_ADDR_VAR 0 4
96247: PUSH
96248: LD_VAR 0 2
96252: PUSH
96253: FOR_IN
96254: IFFALSE 96323
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
96256: LD_ADDR_VAR 0 6
96260: PUSH
96261: LD_VAR 0 1
96265: PPUSH
96266: LD_VAR 0 4
96270: PUSH
96271: LD_INT 1
96273: ARRAY
96274: PPUSH
96275: LD_VAR 0 4
96279: PUSH
96280: LD_INT 2
96282: ARRAY
96283: PPUSH
96284: CALL_OW 297
96288: ST_TO_ADDR
// if tmpDist < dist then
96289: LD_VAR 0 6
96293: PUSH
96294: LD_VAR 0 5
96298: LESS
96299: IFFALSE 96321
// begin result := i ;
96301: LD_ADDR_VAR 0 3
96305: PUSH
96306: LD_VAR 0 4
96310: ST_TO_ADDR
// dist := tmpDist ;
96311: LD_ADDR_VAR 0 5
96315: PUSH
96316: LD_VAR 0 6
96320: ST_TO_ADDR
// end ; end ;
96321: GO 96253
96323: POP
96324: POP
// end ;
96325: LD_VAR 0 3
96329: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
96330: LD_INT 0
96332: PPUSH
// uc_side := side ;
96333: LD_ADDR_OWVAR 20
96337: PUSH
96338: LD_VAR 0 1
96342: ST_TO_ADDR
// uc_nation := 3 ;
96343: LD_ADDR_OWVAR 21
96347: PUSH
96348: LD_INT 3
96350: ST_TO_ADDR
// vc_chassis := 25 ;
96351: LD_ADDR_OWVAR 37
96355: PUSH
96356: LD_INT 25
96358: ST_TO_ADDR
// vc_engine := engine_siberite ;
96359: LD_ADDR_OWVAR 39
96363: PUSH
96364: LD_INT 3
96366: ST_TO_ADDR
// vc_control := control_computer ;
96367: LD_ADDR_OWVAR 38
96371: PUSH
96372: LD_INT 3
96374: ST_TO_ADDR
// vc_weapon := 59 ;
96375: LD_ADDR_OWVAR 40
96379: PUSH
96380: LD_INT 59
96382: ST_TO_ADDR
// result := CreateVehicle ;
96383: LD_ADDR_VAR 0 5
96387: PUSH
96388: CALL_OW 45
96392: ST_TO_ADDR
// SetDir ( result , d ) ;
96393: LD_VAR 0 5
96397: PPUSH
96398: LD_VAR 0 4
96402: PPUSH
96403: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
96407: LD_VAR 0 5
96411: PPUSH
96412: LD_VAR 0 2
96416: PPUSH
96417: LD_VAR 0 3
96421: PPUSH
96422: LD_INT 0
96424: PPUSH
96425: CALL_OW 48
// end ;
96429: LD_VAR 0 5
96433: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
96434: LD_INT 0
96436: PPUSH
96437: PPUSH
96438: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
96439: LD_ADDR_VAR 0 2
96443: PUSH
96444: LD_INT 0
96446: PUSH
96447: LD_INT 0
96449: PUSH
96450: LD_INT 0
96452: PUSH
96453: LD_INT 0
96455: PUSH
96456: EMPTY
96457: LIST
96458: LIST
96459: LIST
96460: LIST
96461: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
96462: LD_VAR 0 1
96466: NOT
96467: PUSH
96468: LD_VAR 0 1
96472: PPUSH
96473: CALL_OW 264
96477: PUSH
96478: LD_INT 12
96480: PUSH
96481: LD_INT 51
96483: PUSH
96484: LD_INT 32
96486: PUSH
96487: LD_INT 89
96489: PUSH
96490: EMPTY
96491: LIST
96492: LIST
96493: LIST
96494: LIST
96495: IN
96496: NOT
96497: OR
96498: IFFALSE 96502
// exit ;
96500: GO 96600
// for i := 1 to 3 do
96502: LD_ADDR_VAR 0 3
96506: PUSH
96507: DOUBLE
96508: LD_INT 1
96510: DEC
96511: ST_TO_ADDR
96512: LD_INT 3
96514: PUSH
96515: FOR_TO
96516: IFFALSE 96598
// begin tmp := GetCargo ( cargo , i ) ;
96518: LD_ADDR_VAR 0 4
96522: PUSH
96523: LD_VAR 0 1
96527: PPUSH
96528: LD_VAR 0 3
96532: PPUSH
96533: CALL_OW 289
96537: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
96538: LD_ADDR_VAR 0 2
96542: PUSH
96543: LD_VAR 0 2
96547: PPUSH
96548: LD_VAR 0 3
96552: PPUSH
96553: LD_VAR 0 4
96557: PPUSH
96558: CALL_OW 1
96562: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
96563: LD_ADDR_VAR 0 2
96567: PUSH
96568: LD_VAR 0 2
96572: PPUSH
96573: LD_INT 4
96575: PPUSH
96576: LD_VAR 0 2
96580: PUSH
96581: LD_INT 4
96583: ARRAY
96584: PUSH
96585: LD_VAR 0 4
96589: PLUS
96590: PPUSH
96591: CALL_OW 1
96595: ST_TO_ADDR
// end ;
96596: GO 96515
96598: POP
96599: POP
// end ;
96600: LD_VAR 0 2
96604: RET
// export function Length ( array ) ; begin
96605: LD_INT 0
96607: PPUSH
// result := array + 0 ;
96608: LD_ADDR_VAR 0 2
96612: PUSH
96613: LD_VAR 0 1
96617: PUSH
96618: LD_INT 0
96620: PLUS
96621: ST_TO_ADDR
// end ;
96622: LD_VAR 0 2
96626: RET
// export function PrepareArray ( array ) ; begin
96627: LD_INT 0
96629: PPUSH
// result := array diff 0 ;
96630: LD_ADDR_VAR 0 2
96634: PUSH
96635: LD_VAR 0 1
96639: PUSH
96640: LD_INT 0
96642: DIFF
96643: ST_TO_ADDR
// if not result [ 1 ] then
96644: LD_VAR 0 2
96648: PUSH
96649: LD_INT 1
96651: ARRAY
96652: NOT
96653: IFFALSE 96673
// result := Delete ( result , 1 ) ;
96655: LD_ADDR_VAR 0 2
96659: PUSH
96660: LD_VAR 0 2
96664: PPUSH
96665: LD_INT 1
96667: PPUSH
96668: CALL_OW 3
96672: ST_TO_ADDR
// end ;
96673: LD_VAR 0 2
96677: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
96678: LD_INT 0
96680: PPUSH
96681: PPUSH
96682: PPUSH
96683: PPUSH
// sibRocketRange := 25 ;
96684: LD_ADDR_VAR 0 6
96688: PUSH
96689: LD_INT 25
96691: ST_TO_ADDR
// result := false ;
96692: LD_ADDR_VAR 0 4
96696: PUSH
96697: LD_INT 0
96699: ST_TO_ADDR
// for i := 0 to 5 do
96700: LD_ADDR_VAR 0 5
96704: PUSH
96705: DOUBLE
96706: LD_INT 0
96708: DEC
96709: ST_TO_ADDR
96710: LD_INT 5
96712: PUSH
96713: FOR_TO
96714: IFFALSE 96781
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
96716: LD_VAR 0 1
96720: PPUSH
96721: LD_VAR 0 5
96725: PPUSH
96726: LD_VAR 0 6
96730: PPUSH
96731: CALL_OW 272
96735: PPUSH
96736: LD_VAR 0 2
96740: PPUSH
96741: LD_VAR 0 5
96745: PPUSH
96746: LD_VAR 0 6
96750: PPUSH
96751: CALL_OW 273
96755: PPUSH
96756: LD_VAR 0 3
96760: PPUSH
96761: CALL_OW 309
96765: IFFALSE 96779
// begin result := true ;
96767: LD_ADDR_VAR 0 4
96771: PUSH
96772: LD_INT 1
96774: ST_TO_ADDR
// exit ;
96775: POP
96776: POP
96777: GO 96783
// end ;
96779: GO 96713
96781: POP
96782: POP
// end ;
96783: LD_VAR 0 4
96787: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
96788: LD_INT 0
96790: PPUSH
96791: PPUSH
96792: PPUSH
// if btype = b_depot then
96793: LD_VAR 0 2
96797: PUSH
96798: LD_INT 0
96800: EQUAL
96801: IFFALSE 96813
// begin result := true ;
96803: LD_ADDR_VAR 0 3
96807: PUSH
96808: LD_INT 1
96810: ST_TO_ADDR
// exit ;
96811: GO 96929
// end ; pom := GetBase ( depot ) ;
96813: LD_ADDR_VAR 0 4
96817: PUSH
96818: LD_VAR 0 1
96822: PPUSH
96823: CALL_OW 274
96827: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
96828: LD_ADDR_VAR 0 5
96832: PUSH
96833: LD_VAR 0 2
96837: PPUSH
96838: LD_VAR 0 1
96842: PPUSH
96843: CALL_OW 248
96847: PPUSH
96848: CALL_OW 450
96852: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
96853: LD_ADDR_VAR 0 3
96857: PUSH
96858: LD_VAR 0 4
96862: PPUSH
96863: LD_INT 1
96865: PPUSH
96866: CALL_OW 275
96870: PUSH
96871: LD_VAR 0 5
96875: PUSH
96876: LD_INT 1
96878: ARRAY
96879: GREATEREQUAL
96880: PUSH
96881: LD_VAR 0 4
96885: PPUSH
96886: LD_INT 2
96888: PPUSH
96889: CALL_OW 275
96893: PUSH
96894: LD_VAR 0 5
96898: PUSH
96899: LD_INT 2
96901: ARRAY
96902: GREATEREQUAL
96903: AND
96904: PUSH
96905: LD_VAR 0 4
96909: PPUSH
96910: LD_INT 3
96912: PPUSH
96913: CALL_OW 275
96917: PUSH
96918: LD_VAR 0 5
96922: PUSH
96923: LD_INT 3
96925: ARRAY
96926: GREATEREQUAL
96927: AND
96928: ST_TO_ADDR
// end ;
96929: LD_VAR 0 3
96933: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
96934: LD_INT 0
96936: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
96937: LD_VAR 0 1
96941: PPUSH
96942: LD_VAR 0 2
96946: PPUSH
96947: LD_INT 0
96949: PPUSH
96950: LD_INT 0
96952: PPUSH
96953: LD_INT 1
96955: PPUSH
96956: LD_INT 0
96958: PPUSH
96959: CALL_OW 587
// end ;
96963: LD_VAR 0 3
96967: RET
// export function CenterOnNow ( unit ) ; begin
96968: LD_INT 0
96970: PPUSH
// result := IsInUnit ( unit ) ;
96971: LD_ADDR_VAR 0 2
96975: PUSH
96976: LD_VAR 0 1
96980: PPUSH
96981: CALL_OW 310
96985: ST_TO_ADDR
// if not result then
96986: LD_VAR 0 2
96990: NOT
96991: IFFALSE 97003
// result := unit ;
96993: LD_ADDR_VAR 0 2
96997: PUSH
96998: LD_VAR 0 1
97002: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
97003: LD_VAR 0 1
97007: PPUSH
97008: CALL_OW 87
// end ;
97012: LD_VAR 0 2
97016: RET
// export function ComMoveHex ( unit , hex ) ; begin
97017: LD_INT 0
97019: PPUSH
// if not hex then
97020: LD_VAR 0 2
97024: NOT
97025: IFFALSE 97029
// exit ;
97027: GO 97082
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
97029: LD_VAR 0 2
97033: PUSH
97034: LD_INT 1
97036: ARRAY
97037: PPUSH
97038: LD_VAR 0 2
97042: PUSH
97043: LD_INT 2
97045: ARRAY
97046: PPUSH
97047: CALL_OW 428
97051: IFFALSE 97055
// exit ;
97053: GO 97082
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
97055: LD_VAR 0 1
97059: PPUSH
97060: LD_VAR 0 2
97064: PUSH
97065: LD_INT 1
97067: ARRAY
97068: PPUSH
97069: LD_VAR 0 2
97073: PUSH
97074: LD_INT 2
97076: ARRAY
97077: PPUSH
97078: CALL_OW 111
// end ;
97082: LD_VAR 0 3
97086: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
97087: LD_INT 0
97089: PPUSH
97090: PPUSH
97091: PPUSH
// if not unit or not enemy then
97092: LD_VAR 0 1
97096: NOT
97097: PUSH
97098: LD_VAR 0 2
97102: NOT
97103: OR
97104: IFFALSE 97108
// exit ;
97106: GO 97232
// x := GetX ( enemy ) ;
97108: LD_ADDR_VAR 0 4
97112: PUSH
97113: LD_VAR 0 2
97117: PPUSH
97118: CALL_OW 250
97122: ST_TO_ADDR
// y := GetY ( enemy ) ;
97123: LD_ADDR_VAR 0 5
97127: PUSH
97128: LD_VAR 0 2
97132: PPUSH
97133: CALL_OW 251
97137: ST_TO_ADDR
// if ValidHex ( x , y ) then
97138: LD_VAR 0 4
97142: PPUSH
97143: LD_VAR 0 5
97147: PPUSH
97148: CALL_OW 488
97152: IFFALSE 97232
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
97154: LD_VAR 0 2
97158: PPUSH
97159: CALL_OW 247
97163: PUSH
97164: LD_INT 3
97166: PUSH
97167: LD_INT 2
97169: PUSH
97170: EMPTY
97171: LIST
97172: LIST
97173: IN
97174: PUSH
97175: LD_VAR 0 1
97179: PPUSH
97180: CALL_OW 255
97184: PPUSH
97185: LD_VAR 0 2
97189: PPUSH
97190: CALL_OW 292
97194: OR
97195: IFFALSE 97213
// ComAttackUnit ( unit , enemy ) else
97197: LD_VAR 0 1
97201: PPUSH
97202: LD_VAR 0 2
97206: PPUSH
97207: CALL_OW 115
97211: GO 97232
// ComAgressiveMove ( unit , x , y ) ;
97213: LD_VAR 0 1
97217: PPUSH
97218: LD_VAR 0 4
97222: PPUSH
97223: LD_VAR 0 5
97227: PPUSH
97228: CALL_OW 114
// end ;
97232: LD_VAR 0 3
97236: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
97237: LD_INT 0
97239: PPUSH
97240: PPUSH
97241: PPUSH
// list := AreaToList ( area , 0 ) ;
97242: LD_ADDR_VAR 0 5
97246: PUSH
97247: LD_VAR 0 1
97251: PPUSH
97252: LD_INT 0
97254: PPUSH
97255: CALL_OW 517
97259: ST_TO_ADDR
// if not list then
97260: LD_VAR 0 5
97264: NOT
97265: IFFALSE 97269
// exit ;
97267: GO 97399
// if all then
97269: LD_VAR 0 2
97273: IFFALSE 97361
// begin for i := 1 to list [ 1 ] do
97275: LD_ADDR_VAR 0 4
97279: PUSH
97280: DOUBLE
97281: LD_INT 1
97283: DEC
97284: ST_TO_ADDR
97285: LD_VAR 0 5
97289: PUSH
97290: LD_INT 1
97292: ARRAY
97293: PUSH
97294: FOR_TO
97295: IFFALSE 97357
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
97297: LD_ADDR_VAR 0 3
97301: PUSH
97302: LD_VAR 0 3
97306: PPUSH
97307: LD_VAR 0 3
97311: PUSH
97312: LD_INT 1
97314: PLUS
97315: PPUSH
97316: LD_VAR 0 5
97320: PUSH
97321: LD_INT 1
97323: ARRAY
97324: PUSH
97325: LD_VAR 0 4
97329: ARRAY
97330: PUSH
97331: LD_VAR 0 5
97335: PUSH
97336: LD_INT 2
97338: ARRAY
97339: PUSH
97340: LD_VAR 0 4
97344: ARRAY
97345: PUSH
97346: EMPTY
97347: LIST
97348: LIST
97349: PPUSH
97350: CALL_OW 1
97354: ST_TO_ADDR
97355: GO 97294
97357: POP
97358: POP
// exit ;
97359: GO 97399
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
97361: LD_ADDR_VAR 0 3
97365: PUSH
97366: LD_VAR 0 5
97370: PUSH
97371: LD_INT 1
97373: ARRAY
97374: PUSH
97375: LD_INT 1
97377: ARRAY
97378: PUSH
97379: LD_VAR 0 5
97383: PUSH
97384: LD_INT 2
97386: ARRAY
97387: PUSH
97388: LD_INT 1
97390: ARRAY
97391: PUSH
97392: EMPTY
97393: LIST
97394: LIST
97395: PUSH
97396: EMPTY
97397: LIST
97398: ST_TO_ADDR
// end ;
97399: LD_VAR 0 3
97403: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
97404: LD_INT 0
97406: PPUSH
97407: PPUSH
// list := AreaToList ( area , 0 ) ;
97408: LD_ADDR_VAR 0 4
97412: PUSH
97413: LD_VAR 0 1
97417: PPUSH
97418: LD_INT 0
97420: PPUSH
97421: CALL_OW 517
97425: ST_TO_ADDR
// if not list then
97426: LD_VAR 0 4
97430: NOT
97431: IFFALSE 97435
// exit ;
97433: GO 97476
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
97435: LD_ADDR_VAR 0 3
97439: PUSH
97440: LD_VAR 0 4
97444: PUSH
97445: LD_INT 1
97447: ARRAY
97448: PUSH
97449: LD_INT 1
97451: ARRAY
97452: PUSH
97453: LD_VAR 0 4
97457: PUSH
97458: LD_INT 2
97460: ARRAY
97461: PUSH
97462: LD_INT 1
97464: ARRAY
97465: PUSH
97466: LD_VAR 0 2
97470: PUSH
97471: EMPTY
97472: LIST
97473: LIST
97474: LIST
97475: ST_TO_ADDR
// end ;
97476: LD_VAR 0 3
97480: RET
// export function First ( array ) ; begin
97481: LD_INT 0
97483: PPUSH
// if not array then
97484: LD_VAR 0 1
97488: NOT
97489: IFFALSE 97493
// exit ;
97491: GO 97507
// result := array [ 1 ] ;
97493: LD_ADDR_VAR 0 2
97497: PUSH
97498: LD_VAR 0 1
97502: PUSH
97503: LD_INT 1
97505: ARRAY
97506: ST_TO_ADDR
// end ;
97507: LD_VAR 0 2
97511: RET
// export function Last ( array ) ; begin
97512: LD_INT 0
97514: PPUSH
// if not array then
97515: LD_VAR 0 1
97519: NOT
97520: IFFALSE 97524
// exit ;
97522: GO 97540
// result := array [ array ] ;
97524: LD_ADDR_VAR 0 2
97528: PUSH
97529: LD_VAR 0 1
97533: PUSH
97534: LD_VAR 0 1
97538: ARRAY
97539: ST_TO_ADDR
// end ;
97540: LD_VAR 0 2
97544: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
97545: LD_INT 0
97547: PPUSH
97548: PPUSH
// result := [ ] ;
97549: LD_ADDR_VAR 0 5
97553: PUSH
97554: EMPTY
97555: ST_TO_ADDR
// if not array then
97556: LD_VAR 0 1
97560: NOT
97561: IFFALSE 97565
// exit ;
97563: GO 97677
// for i := 1 to array do
97565: LD_ADDR_VAR 0 6
97569: PUSH
97570: DOUBLE
97571: LD_INT 1
97573: DEC
97574: ST_TO_ADDR
97575: LD_VAR 0 1
97579: PUSH
97580: FOR_TO
97581: IFFALSE 97675
// if array [ i ] [ index ] = value then
97583: LD_VAR 0 1
97587: PUSH
97588: LD_VAR 0 6
97592: ARRAY
97593: PUSH
97594: LD_VAR 0 2
97598: ARRAY
97599: PUSH
97600: LD_VAR 0 3
97604: EQUAL
97605: IFFALSE 97673
// begin if indexColumn then
97607: LD_VAR 0 4
97611: IFFALSE 97647
// result := Join ( result , array [ i ] [ indexColumn ] ) else
97613: LD_ADDR_VAR 0 5
97617: PUSH
97618: LD_VAR 0 5
97622: PPUSH
97623: LD_VAR 0 1
97627: PUSH
97628: LD_VAR 0 6
97632: ARRAY
97633: PUSH
97634: LD_VAR 0 4
97638: ARRAY
97639: PPUSH
97640: CALL 92865 0 2
97644: ST_TO_ADDR
97645: GO 97673
// result := Join ( result , array [ i ] ) ;
97647: LD_ADDR_VAR 0 5
97651: PUSH
97652: LD_VAR 0 5
97656: PPUSH
97657: LD_VAR 0 1
97661: PUSH
97662: LD_VAR 0 6
97666: ARRAY
97667: PPUSH
97668: CALL 92865 0 2
97672: ST_TO_ADDR
// end ;
97673: GO 97580
97675: POP
97676: POP
// end ;
97677: LD_VAR 0 5
97681: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
97682: LD_INT 0
97684: PPUSH
// if not vehicles or not parkingPoint then
97685: LD_VAR 0 1
97689: NOT
97690: PUSH
97691: LD_VAR 0 2
97695: NOT
97696: OR
97697: IFFALSE 97701
// exit ;
97699: GO 97799
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
97701: LD_ADDR_VAR 0 1
97705: PUSH
97706: LD_VAR 0 1
97710: PPUSH
97711: LD_INT 50
97713: PUSH
97714: EMPTY
97715: LIST
97716: PUSH
97717: LD_INT 3
97719: PUSH
97720: LD_INT 92
97722: PUSH
97723: LD_VAR 0 2
97727: PUSH
97728: LD_INT 1
97730: ARRAY
97731: PUSH
97732: LD_VAR 0 2
97736: PUSH
97737: LD_INT 2
97739: ARRAY
97740: PUSH
97741: LD_INT 8
97743: PUSH
97744: EMPTY
97745: LIST
97746: LIST
97747: LIST
97748: LIST
97749: PUSH
97750: EMPTY
97751: LIST
97752: LIST
97753: PUSH
97754: EMPTY
97755: LIST
97756: LIST
97757: PPUSH
97758: CALL_OW 72
97762: ST_TO_ADDR
// if not vehicles then
97763: LD_VAR 0 1
97767: NOT
97768: IFFALSE 97772
// exit ;
97770: GO 97799
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
97772: LD_VAR 0 1
97776: PPUSH
97777: LD_VAR 0 2
97781: PUSH
97782: LD_INT 1
97784: ARRAY
97785: PPUSH
97786: LD_VAR 0 2
97790: PUSH
97791: LD_INT 2
97793: ARRAY
97794: PPUSH
97795: CALL_OW 111
// end ;
97799: LD_VAR 0 3
97803: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
97804: LD_INT 0
97806: PPUSH
97807: PPUSH
97808: PPUSH
// if not side or not area then
97809: LD_VAR 0 1
97813: NOT
97814: PUSH
97815: LD_VAR 0 2
97819: NOT
97820: OR
97821: IFFALSE 97825
// exit ;
97823: GO 97944
// tmp := AreaToList ( area , 0 ) ;
97825: LD_ADDR_VAR 0 5
97829: PUSH
97830: LD_VAR 0 2
97834: PPUSH
97835: LD_INT 0
97837: PPUSH
97838: CALL_OW 517
97842: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
97843: LD_ADDR_VAR 0 4
97847: PUSH
97848: DOUBLE
97849: LD_INT 1
97851: DEC
97852: ST_TO_ADDR
97853: LD_VAR 0 5
97857: PUSH
97858: LD_INT 1
97860: ARRAY
97861: PUSH
97862: FOR_TO
97863: IFFALSE 97942
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
97865: LD_VAR 0 5
97869: PUSH
97870: LD_INT 1
97872: ARRAY
97873: PUSH
97874: LD_VAR 0 4
97878: ARRAY
97879: PPUSH
97880: LD_VAR 0 5
97884: PUSH
97885: LD_INT 2
97887: ARRAY
97888: PUSH
97889: LD_VAR 0 4
97893: ARRAY
97894: PPUSH
97895: CALL_OW 351
97899: IFFALSE 97940
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
97901: LD_VAR 0 5
97905: PUSH
97906: LD_INT 1
97908: ARRAY
97909: PUSH
97910: LD_VAR 0 4
97914: ARRAY
97915: PPUSH
97916: LD_VAR 0 5
97920: PUSH
97921: LD_INT 2
97923: ARRAY
97924: PUSH
97925: LD_VAR 0 4
97929: ARRAY
97930: PPUSH
97931: LD_VAR 0 1
97935: PPUSH
97936: CALL_OW 244
// end ;
97940: GO 97862
97942: POP
97943: POP
// end ; end_of_file
97944: LD_VAR 0 3
97948: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
97949: LD_VAR 0 1
97953: PUSH
97954: LD_INT 200
97956: DOUBLE
97957: GREATEREQUAL
97958: IFFALSE 97966
97960: LD_INT 299
97962: DOUBLE
97963: LESSEQUAL
97964: IFTRUE 97968
97966: GO 98000
97968: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
97969: LD_VAR 0 1
97973: PPUSH
97974: LD_VAR 0 2
97978: PPUSH
97979: LD_VAR 0 3
97983: PPUSH
97984: LD_VAR 0 4
97988: PPUSH
97989: LD_VAR 0 5
97993: PPUSH
97994: CALL 50434 0 5
97998: GO 98077
98000: LD_INT 300
98002: DOUBLE
98003: GREATEREQUAL
98004: IFFALSE 98012
98006: LD_INT 399
98008: DOUBLE
98009: LESSEQUAL
98010: IFTRUE 98014
98012: GO 98076
98014: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
98015: LD_VAR 0 1
98019: PPUSH
98020: LD_VAR 0 2
98024: PPUSH
98025: LD_VAR 0 3
98029: PPUSH
98030: LD_VAR 0 4
98034: PPUSH
98035: LD_VAR 0 5
98039: PPUSH
98040: LD_VAR 0 6
98044: PPUSH
98045: LD_VAR 0 7
98049: PPUSH
98050: LD_VAR 0 8
98054: PPUSH
98055: LD_VAR 0 9
98059: PPUSH
98060: LD_VAR 0 10
98064: PPUSH
98065: LD_VAR 0 11
98069: PPUSH
98070: CALL 46422 0 11
98074: GO 98077
98076: POP
// end ;
98077: PPOPN 11
98079: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
98080: LD_VAR 0 1
98084: PPUSH
98085: LD_VAR 0 2
98089: PPUSH
98090: LD_VAR 0 3
98094: PPUSH
98095: LD_VAR 0 4
98099: PPUSH
98100: LD_VAR 0 5
98104: PPUSH
98105: CALL 49899 0 5
// end ; end_of_file
98109: PPOPN 5
98111: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
98112: LD_VAR 0 1
98116: PPUSH
98117: LD_VAR 0 2
98121: PPUSH
98122: LD_VAR 0 3
98126: PPUSH
98127: LD_VAR 0 4
98131: PPUSH
98132: LD_VAR 0 5
98136: PPUSH
98137: LD_VAR 0 6
98141: PPUSH
98142: CALL 34074 0 6
// end ;
98146: PPOPN 6
98148: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
98149: LD_INT 0
98151: PPUSH
// begin if not units then
98152: LD_VAR 0 1
98156: NOT
98157: IFFALSE 98161
// exit ;
98159: GO 98161
// end ;
98161: PPOPN 7
98163: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
98164: CALL 33961 0 0
// end ;
98168: PPOPN 1
98170: END
