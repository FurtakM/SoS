// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 61
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: PUSH
 142: LD_OWVAR 67
 146: ARRAY
 147: ST_TO_ADDR
// eventVar1 = 0 ;
 148: LD_ADDR_EXP 65
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// eventVar2 = 0 ;
 156: LD_ADDR_EXP 66
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// fastEnd = 0 ;
 164: LD_ADDR_EXP 63
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// KhatamStatus = 0 ;
 172: LD_ADDR_EXP 53
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// GensherStatus = 0 ;
 180: LD_ADDR_EXP 52
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// cratesSpawned = 0 ;
 188: LD_ADDR_EXP 56
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 59
 200: PUSH
 201: LD_INT 1
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 2
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 60
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: LD_INT 4
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// snipersTrained := false ;
 246: LD_ADDR_EXP 62
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// ruDepotConstructed := false ;
 254: LD_ADDR_EXP 57
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnRussians := false ;
 262: LD_ADDR_EXP 58
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// attackAvalaible = 1 ;
 270: LD_ADDR_EXP 64
 274: PUSH
 275: LD_INT 1
 277: ST_TO_ADDR
// mission_prefix := 10c_ ;
 278: LD_ADDR_EXP 54
 282: PUSH
 283: LD_STRING 10c_
 285: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 286: LD_ADDR_EXP 55
 290: PUSH
 291: LD_STRING 10_
 293: ST_TO_ADDR
// debugMode = 0 ;
 294: LD_ADDR_EXP 67
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// CreateNature ;
 302: CALL 26759 0 0
// PrepareDifficulty ;
 306: CALL 11428 0 0
// PrepareJMMTeam ;
 310: CALL 1358 0 0
// PrepareCathyTeam ;
 314: CALL 2590 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 318: LD_INT 24
 320: PPUSH
 321: LD_INT 1
 323: PUSH
 324: LD_OWVAR 67
 328: PLUS
 329: PPUSH
 330: CALL 21288 0 2
// if Difficulty > 1 then
 334: LD_OWVAR 67
 338: PUSH
 339: LD_INT 1
 341: GREATER
 342: IFFALSE 356
// PlaceMines ( MineField2 , Difficulty ) ;
 344: LD_INT 25
 346: PPUSH
 347: LD_OWVAR 67
 351: PPUSH
 352: CALL 21288 0 2
// if Difficulty > 2 then
 356: LD_OWVAR 67
 360: PUSH
 361: LD_INT 2
 363: GREATER
 364: IFFALSE 378
// PlaceMines ( MineField3 , Difficulty ) ;
 366: LD_INT 26
 368: PPUSH
 369: LD_OWVAR 67
 373: PPUSH
 374: CALL 21288 0 2
// PrepareArabianCommander ;
 378: CALL 4072 0 0
// PrepareArabian ;
 382: CALL 4124 0 0
// BuildArabianBase ;
 386: CALL 14243 0 0
// TameApemans ;
 390: CALL 20093 0 0
// end ;
 394: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 395: LD_EXP 67
 399: PUSH
 400: LD_INT 1
 402: EQUAL
 403: IFFALSE 709
 405: GO 407
 407: DISABLE
 408: LD_INT 0
 410: PPUSH
// begin enable ;
 411: ENABLE
// fogoff ( true ) ;
 412: LD_INT 1
 414: PPUSH
 415: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 419: LD_ADDR_VAR 0 1
 423: PUSH
 424: LD_INT 22
 426: PUSH
 427: LD_INT 1
 429: PUSH
 430: EMPTY
 431: LIST
 432: LIST
 433: PUSH
 434: LD_INT 21
 436: PUSH
 437: LD_INT 1
 439: PUSH
 440: EMPTY
 441: LIST
 442: LIST
 443: PUSH
 444: EMPTY
 445: LIST
 446: LIST
 447: PPUSH
 448: CALL_OW 69
 452: PUSH
 453: FOR_IN
 454: IFFALSE 470
// SetLives ( i , 1000 ) ;
 456: LD_VAR 0 1
 460: PPUSH
 461: LD_INT 1000
 463: PPUSH
 464: CALL_OW 234
 468: GO 453
 470: POP
 471: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 472: LD_ADDR_VAR 0 1
 476: PUSH
 477: LD_INT 22
 479: PUSH
 480: LD_INT 1
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 2
 489: PUSH
 490: LD_INT 30
 492: PUSH
 493: LD_INT 0
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 30
 502: PUSH
 503: LD_INT 1
 505: PUSH
 506: EMPTY
 507: LIST
 508: LIST
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: LIST
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PPUSH
 519: CALL_OW 69
 523: PUSH
 524: FOR_IN
 525: IFFALSE 549
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 527: LD_VAR 0 1
 531: PPUSH
 532: CALL_OW 274
 536: PPUSH
 537: LD_INT 1
 539: PPUSH
 540: LD_INT 9999
 542: PPUSH
 543: CALL_OW 277
 547: GO 524
 549: POP
 550: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 551: LD_ADDR_VAR 0 1
 555: PUSH
 556: LD_INT 22
 558: PUSH
 559: LD_INT 1
 561: PUSH
 562: EMPTY
 563: LIST
 564: LIST
 565: PUSH
 566: LD_INT 2
 568: PUSH
 569: LD_INT 30
 571: PUSH
 572: LD_INT 0
 574: PUSH
 575: EMPTY
 576: LIST
 577: LIST
 578: PUSH
 579: LD_INT 30
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: EMPTY
 590: LIST
 591: LIST
 592: LIST
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PPUSH
 598: CALL_OW 69
 602: PUSH
 603: FOR_IN
 604: IFFALSE 628
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 606: LD_VAR 0 1
 610: PPUSH
 611: CALL_OW 274
 615: PPUSH
 616: LD_INT 2
 618: PPUSH
 619: LD_INT 9999
 621: PPUSH
 622: CALL_OW 277
 626: GO 603
 628: POP
 629: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 630: LD_ADDR_VAR 0 1
 634: PUSH
 635: LD_INT 22
 637: PUSH
 638: LD_INT 1
 640: PUSH
 641: EMPTY
 642: LIST
 643: LIST
 644: PUSH
 645: LD_INT 2
 647: PUSH
 648: LD_INT 30
 650: PUSH
 651: LD_INT 0
 653: PUSH
 654: EMPTY
 655: LIST
 656: LIST
 657: PUSH
 658: LD_INT 30
 660: PUSH
 661: LD_INT 1
 663: PUSH
 664: EMPTY
 665: LIST
 666: LIST
 667: PUSH
 668: EMPTY
 669: LIST
 670: LIST
 671: LIST
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PPUSH
 677: CALL_OW 69
 681: PUSH
 682: FOR_IN
 683: IFFALSE 707
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 685: LD_VAR 0 1
 689: PPUSH
 690: CALL_OW 274
 694: PPUSH
 695: LD_INT 3
 697: PPUSH
 698: LD_INT 9999
 700: PPUSH
 701: CALL_OW 277
 705: GO 682
 707: POP
 708: POP
// end ;
 709: PPOPN 1
 711: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 712: LD_INT 25
 714: PUSH
 715: LD_INT 5
 717: PUSH
 718: EMPTY
 719: LIST
 720: LIST
 721: PPUSH
 722: CALL_OW 69
 726: IFFALSE 739
 728: GO 730
 730: DISABLE
// snipersTrained := true ;
 731: LD_ADDR_EXP 62
 735: PUSH
 736: LD_INT 1
 738: ST_TO_ADDR
 739: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 740: LD_INT 1
 742: PPUSH
 743: LD_INT 2
 745: PPUSH
 746: CALL_OW 81
 750: PUSH
 751: LD_INT 1
 753: EQUAL
 754: PUSH
 755: LD_EXP 42
 759: AND
 760: PUSH
 761: LD_INT 22
 763: PUSH
 764: LD_INT 3
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 21
 773: PUSH
 774: LD_INT 3
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: PUSH
 790: LD_INT 0
 792: EQUAL
 793: AND
 794: IFFALSE 806
 796: GO 798
 798: DISABLE
// SetAchievement ( ACH_POWER ) ;
 799: LD_STRING ACH_POWER
 801: PPUSH
 802: CALL_OW 543
 806: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 807: LD_INT 22
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PPUSH
 831: CALL_OW 69
 835: PUSH
 836: LD_INT 22
 838: PUSH
 839: LD_INT 1
 841: PUSH
 842: EMPTY
 843: LIST
 844: LIST
 845: PUSH
 846: LD_INT 30
 848: PUSH
 849: LD_INT 32
 851: PUSH
 852: EMPTY
 853: LIST
 854: LIST
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PPUSH
 860: CALL_OW 69
 864: AND
 865: PUSH
 866: LD_INT 22
 868: PUSH
 869: LD_INT 1
 871: PUSH
 872: EMPTY
 873: LIST
 874: LIST
 875: PUSH
 876: LD_INT 30
 878: PUSH
 879: LD_INT 33
 881: PUSH
 882: EMPTY
 883: LIST
 884: LIST
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PPUSH
 890: CALL_OW 69
 894: AND
 895: PUSH
 896: LD_INT 22
 898: PUSH
 899: LD_INT 1
 901: PUSH
 902: EMPTY
 903: LIST
 904: LIST
 905: PUSH
 906: LD_INT 30
 908: PUSH
 909: LD_INT 5
 911: PUSH
 912: EMPTY
 913: LIST
 914: LIST
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PPUSH
 920: CALL_OW 69
 924: AND
 925: PUSH
 926: LD_INT 22
 928: PUSH
 929: LD_INT 1
 931: PUSH
 932: EMPTY
 933: LIST
 934: LIST
 935: PUSH
 936: LD_INT 30
 938: PUSH
 939: LD_INT 3
 941: PUSH
 942: EMPTY
 943: LIST
 944: LIST
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PPUSH
 950: CALL_OW 69
 954: AND
 955: PUSH
 956: LD_INT 22
 958: PUSH
 959: LD_INT 1
 961: PUSH
 962: EMPTY
 963: LIST
 964: LIST
 965: PUSH
 966: LD_INT 30
 968: PUSH
 969: LD_INT 36
 971: PUSH
 972: EMPTY
 973: LIST
 974: LIST
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PPUSH
 980: CALL_OW 69
 984: AND
 985: PUSH
 986: LD_INT 22
 988: PUSH
 989: LD_INT 1
 991: PUSH
 992: EMPTY
 993: LIST
 994: LIST
 995: PUSH
 996: LD_INT 30
 998: PUSH
 999: LD_INT 31
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PPUSH
1010: CALL_OW 69
1014: AND
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 1
1021: PUSH
1022: EMPTY
1023: LIST
1024: LIST
1025: PUSH
1026: LD_INT 30
1028: PUSH
1029: LD_INT 22
1031: PUSH
1032: EMPTY
1033: LIST
1034: LIST
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PPUSH
1040: CALL_OW 69
1044: AND
1045: PUSH
1046: LD_INT 22
1048: PUSH
1049: LD_INT 1
1051: PUSH
1052: EMPTY
1053: LIST
1054: LIST
1055: PUSH
1056: LD_INT 30
1058: PUSH
1059: LD_INT 20
1061: PUSH
1062: EMPTY
1063: LIST
1064: LIST
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: PPUSH
1070: CALL_OW 69
1074: AND
1075: PUSH
1076: LD_INT 22
1078: PUSH
1079: LD_INT 1
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: PUSH
1086: LD_INT 30
1088: PUSH
1089: LD_INT 19
1091: PUSH
1092: EMPTY
1093: LIST
1094: LIST
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PPUSH
1100: CALL_OW 69
1104: AND
1105: PUSH
1106: LD_INT 22
1108: PUSH
1109: LD_INT 1
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: PUSH
1116: LD_INT 30
1118: PUSH
1119: LD_INT 16
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PPUSH
1130: CALL_OW 69
1134: AND
1135: PUSH
1136: LD_INT 22
1138: PUSH
1139: LD_INT 1
1141: PUSH
1142: EMPTY
1143: LIST
1144: LIST
1145: PUSH
1146: LD_INT 30
1148: PUSH
1149: LD_INT 17
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PPUSH
1160: CALL_OW 69
1164: AND
1165: PUSH
1166: LD_INT 22
1168: PUSH
1169: LD_INT 1
1171: PUSH
1172: EMPTY
1173: LIST
1174: LIST
1175: PUSH
1176: LD_INT 30
1178: PUSH
1179: LD_INT 21
1181: PUSH
1182: EMPTY
1183: LIST
1184: LIST
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PPUSH
1190: CALL_OW 69
1194: AND
1195: PUSH
1196: LD_INT 22
1198: PUSH
1199: LD_INT 1
1201: PUSH
1202: EMPTY
1203: LIST
1204: LIST
1205: PUSH
1206: LD_INT 30
1208: PUSH
1209: LD_INT 29
1211: PUSH
1212: EMPTY
1213: LIST
1214: LIST
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PPUSH
1220: CALL_OW 69
1224: AND
1225: PUSH
1226: LD_INT 22
1228: PUSH
1229: LD_INT 1
1231: PUSH
1232: EMPTY
1233: LIST
1234: LIST
1235: PUSH
1236: LD_INT 30
1238: PUSH
1239: LD_INT 30
1241: PUSH
1242: EMPTY
1243: LIST
1244: LIST
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PPUSH
1250: CALL_OW 69
1254: AND
1255: PUSH
1256: LD_INT 22
1258: PUSH
1259: LD_INT 1
1261: PUSH
1262: EMPTY
1263: LIST
1264: LIST
1265: PUSH
1266: LD_INT 30
1268: PUSH
1269: LD_INT 27
1271: PUSH
1272: EMPTY
1273: LIST
1274: LIST
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PPUSH
1280: CALL_OW 69
1284: AND
1285: PUSH
1286: LD_INT 22
1288: PUSH
1289: LD_INT 1
1291: PUSH
1292: EMPTY
1293: LIST
1294: LIST
1295: PUSH
1296: LD_INT 30
1298: PUSH
1299: LD_INT 26
1301: PUSH
1302: EMPTY
1303: LIST
1304: LIST
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PPUSH
1310: CALL_OW 69
1314: AND
1315: PUSH
1316: LD_INT 22
1318: PUSH
1319: LD_INT 1
1321: PUSH
1322: EMPTY
1323: LIST
1324: LIST
1325: PUSH
1326: LD_INT 30
1328: PUSH
1329: LD_INT 28
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: PUSH
1336: EMPTY
1337: LIST
1338: LIST
1339: PPUSH
1340: CALL_OW 69
1344: AND
1345: IFFALSE 1357
1347: GO 1349
1349: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1350: LD_STRING ACH_ARCH
1352: PPUSH
1353: CALL_OW 543
1357: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1358: LD_INT 0
1360: PPUSH
1361: PPUSH
1362: PPUSH
1363: PPUSH
1364: PPUSH
1365: PPUSH
// uc_side = 1 ;
1366: LD_ADDR_OWVAR 20
1370: PUSH
1371: LD_INT 1
1373: ST_TO_ADDR
// uc_nation = 1 ;
1374: LD_ADDR_OWVAR 21
1378: PUSH
1379: LD_INT 1
1381: ST_TO_ADDR
// count = 0 ;
1382: LD_ADDR_VAR 0 6
1386: PUSH
1387: LD_INT 0
1389: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1390: LD_ADDR_EXP 1
1394: PUSH
1395: LD_STRING JMM
1397: PPUSH
1398: LD_INT 1
1400: PPUSH
1401: LD_STRING 10_
1403: PPUSH
1404: CALL 46975 0 3
1408: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1409: LD_ADDR_EXP 20
1413: PUSH
1414: LD_EXP 20
1418: PUSH
1419: LD_EXP 1
1423: ADD
1424: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1425: LD_ADDR_EXP 10
1429: PUSH
1430: LD_STRING Gary
1432: PPUSH
1433: LD_INT 1
1435: PPUSH
1436: LD_STRING 10_
1438: PPUSH
1439: CALL 46975 0 3
1443: ST_TO_ADDR
// if Gary then
1444: LD_EXP 10
1448: IFFALSE 1466
// JMMSquad = JMMSquad ^ Gary ;
1450: LD_ADDR_EXP 20
1454: PUSH
1455: LD_EXP 20
1459: PUSH
1460: LD_EXP 10
1464: ADD
1465: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1466: LD_ADDR_EXP 5
1470: PUSH
1471: LD_STRING Cyrus
1473: PPUSH
1474: LD_INT 1
1476: PPUSH
1477: LD_STRING 10_
1479: PPUSH
1480: CALL 46975 0 3
1484: ST_TO_ADDR
// if Cyrus then
1485: LD_EXP 5
1489: IFFALSE 1507
// JMMSquad = JMMSquad ^ Cyrus ;
1491: LD_ADDR_EXP 20
1495: PUSH
1496: LD_EXP 20
1500: PUSH
1501: LD_EXP 5
1505: ADD
1506: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1507: LD_ADDR_EXP 4
1511: PUSH
1512: LD_STRING Bobby
1514: PPUSH
1515: LD_INT 1
1517: PPUSH
1518: LD_STRING 10_
1520: PPUSH
1521: CALL 46975 0 3
1525: ST_TO_ADDR
// if Bobby then
1526: LD_EXP 4
1530: IFFALSE 1548
// JMMSquad = JMMSquad ^ Bobby ;
1532: LD_ADDR_EXP 20
1536: PUSH
1537: LD_EXP 20
1541: PUSH
1542: LD_EXP 4
1546: ADD
1547: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1548: LD_ADDR_EXP 6
1552: PUSH
1553: LD_STRING Lisa
1555: PPUSH
1556: LD_INT 1
1558: PPUSH
1559: LD_STRING 10_
1561: PPUSH
1562: CALL 46975 0 3
1566: ST_TO_ADDR
// if Lisa then
1567: LD_EXP 6
1571: IFFALSE 1589
// JMMSquad = JMMSquad ^ Lisa ;
1573: LD_ADDR_EXP 20
1577: PUSH
1578: LD_EXP 20
1582: PUSH
1583: LD_EXP 6
1587: ADD
1588: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1589: LD_ADDR_EXP 2
1593: PUSH
1594: LD_STRING Brown
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_STRING 10_
1602: PPUSH
1603: CALL 46975 0 3
1607: ST_TO_ADDR
// if Brown then
1608: LD_EXP 2
1612: IFFALSE 1630
// JMMSquad = JMMSquad ^ Brown ;
1614: LD_ADDR_EXP 20
1618: PUSH
1619: LD_EXP 20
1623: PUSH
1624: LD_EXP 2
1628: ADD
1629: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1630: LD_ADDR_EXP 3
1634: PUSH
1635: LD_STRING Donaldson
1637: PPUSH
1638: LD_INT 1
1640: PPUSH
1641: LD_STRING 10_
1643: PPUSH
1644: CALL 46975 0 3
1648: ST_TO_ADDR
// if Donaldson then
1649: LD_EXP 3
1653: IFFALSE 1671
// JMMSquad = JMMSquad ^ Donaldson ;
1655: LD_ADDR_EXP 20
1659: PUSH
1660: LD_EXP 20
1664: PUSH
1665: LD_EXP 3
1669: ADD
1670: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1671: LD_ADDR_EXP 7
1675: PUSH
1676: LD_STRING Frank
1678: PPUSH
1679: LD_INT 1
1681: PPUSH
1682: LD_STRING 10_
1684: PPUSH
1685: CALL 46975 0 3
1689: ST_TO_ADDR
// if Frank then
1690: LD_EXP 7
1694: IFFALSE 1712
// JMMSquad = JMMSquad ^ Frank ;
1696: LD_ADDR_EXP 20
1700: PUSH
1701: LD_EXP 20
1705: PUSH
1706: LD_EXP 7
1710: ADD
1711: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1712: LD_ADDR_EXP 9
1716: PUSH
1717: LD_STRING Houten
1719: PPUSH
1720: LD_INT 1
1722: PPUSH
1723: LD_STRING 10_
1725: PPUSH
1726: CALL 46975 0 3
1730: ST_TO_ADDR
// if Houten then
1731: LD_EXP 9
1735: IFFALSE 1753
// JMMSquad = JMMSquad ^ Houten ;
1737: LD_ADDR_EXP 20
1741: PUSH
1742: LD_EXP 20
1746: PUSH
1747: LD_EXP 9
1751: ADD
1752: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1753: LD_ADDR_EXP 21
1757: PUSH
1758: LD_STRING OthersIn10
1760: PPUSH
1761: CALL_OW 31
1765: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1766: LD_ADDR_EXP 24
1770: PUSH
1771: LD_STRING Powell
1773: PPUSH
1774: LD_INT 0
1776: PPUSH
1777: LD_STRING 
1779: PPUSH
1780: CALL 46975 0 3
1784: ST_TO_ADDR
// for i in JMMSquad do
1785: LD_ADDR_VAR 0 2
1789: PUSH
1790: LD_EXP 20
1794: PUSH
1795: FOR_IN
1796: IFFALSE 2076
// begin if count < 3 then
1798: LD_VAR 0 6
1802: PUSH
1803: LD_INT 3
1805: LESS
1806: IFFALSE 1923
// begin vc_engine = 1 ;
1808: LD_ADDR_OWVAR 39
1812: PUSH
1813: LD_INT 1
1815: ST_TO_ADDR
// vc_control = 1 ;
1816: LD_ADDR_OWVAR 38
1820: PUSH
1821: LD_INT 1
1823: ST_TO_ADDR
// vc_weapon = 12 ;
1824: LD_ADDR_OWVAR 40
1828: PUSH
1829: LD_INT 12
1831: ST_TO_ADDR
// vc_chassis = 3 ;
1832: LD_ADDR_OWVAR 37
1836: PUSH
1837: LD_INT 3
1839: ST_TO_ADDR
// veh = CreateVehicle ;
1840: LD_ADDR_VAR 0 4
1844: PUSH
1845: CALL_OW 45
1849: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1850: LD_VAR 0 4
1854: PPUSH
1855: LD_INT 1
1857: PPUSH
1858: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_INT 2
1869: PPUSH
1870: LD_INT 0
1872: PPUSH
1873: CALL_OW 49
// if count mod 2 = 0 then
1877: LD_VAR 0 6
1881: PUSH
1882: LD_INT 2
1884: MOD
1885: PUSH
1886: LD_INT 0
1888: EQUAL
1889: IFFALSE 1908
// AddCargo ( veh , 1 , 100 ) else
1891: LD_VAR 0 4
1895: PPUSH
1896: LD_INT 1
1898: PPUSH
1899: LD_INT 100
1901: PPUSH
1902: CALL_OW 291
1906: GO 1923
// AddCargo ( veh , 3 , 100 ) end ;
1908: LD_VAR 0 4
1912: PPUSH
1913: LD_INT 3
1915: PPUSH
1916: LD_INT 100
1918: PPUSH
1919: CALL_OW 291
// if count >= 3 then
1923: LD_VAR 0 6
1927: PUSH
1928: LD_INT 3
1930: GREATEREQUAL
1931: IFFALSE 2046
// begin vc_engine = 1 ;
1933: LD_ADDR_OWVAR 39
1937: PUSH
1938: LD_INT 1
1940: ST_TO_ADDR
// vc_control = 1 ;
1941: LD_ADDR_OWVAR 38
1945: PUSH
1946: LD_INT 1
1948: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1949: LD_ADDR_OWVAR 40
1953: PUSH
1954: LD_INT 3
1956: PUSH
1957: LD_INT 4
1959: PUSH
1960: LD_INT 5
1962: PUSH
1963: EMPTY
1964: LIST
1965: LIST
1966: LIST
1967: PUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 3
1973: PPUSH
1974: CALL_OW 12
1978: ARRAY
1979: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1980: LD_ADDR_OWVAR 37
1984: PUSH
1985: LD_INT 2
1987: PUSH
1988: LD_INT 3
1990: PUSH
1991: EMPTY
1992: LIST
1993: LIST
1994: PUSH
1995: LD_VAR 0 2
1999: PUSH
2000: LD_INT 2
2002: MOD
2003: PUSH
2004: LD_INT 1
2006: PLUS
2007: ARRAY
2008: ST_TO_ADDR
// veh = CreateVehicle ;
2009: LD_ADDR_VAR 0 4
2013: PUSH
2014: CALL_OW 45
2018: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2019: LD_VAR 0 4
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_INT 2
2038: PPUSH
2039: LD_INT 0
2041: PPUSH
2042: CALL_OW 49
// end ; count = count + 1 ;
2046: LD_ADDR_VAR 0 6
2050: PUSH
2051: LD_VAR 0 6
2055: PUSH
2056: LD_INT 1
2058: PLUS
2059: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2060: LD_VAR 0 2
2064: PPUSH
2065: LD_VAR 0 4
2069: PPUSH
2070: CALL_OW 52
// end ;
2074: GO 1795
2076: POP
2077: POP
// for i := 1 to others10 do
2078: LD_ADDR_VAR 0 2
2082: PUSH
2083: DOUBLE
2084: LD_INT 1
2086: DEC
2087: ST_TO_ADDR
2088: LD_EXP 21
2092: PUSH
2093: FOR_TO
2094: IFFALSE 2321
// begin if i < [ 5 , 4 , 3 ] [ Difficulty ] then
2096: LD_VAR 0 2
2100: PUSH
2101: LD_INT 5
2103: PUSH
2104: LD_INT 4
2106: PUSH
2107: LD_INT 3
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: PUSH
2115: LD_OWVAR 67
2119: ARRAY
2120: LESS
2121: IFFALSE 2274
// begin vc_engine = 1 ;
2123: LD_ADDR_OWVAR 39
2127: PUSH
2128: LD_INT 1
2130: ST_TO_ADDR
// vc_control = 1 ;
2131: LD_ADDR_OWVAR 38
2135: PUSH
2136: LD_INT 1
2138: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2139: LD_ADDR_OWVAR 40
2143: PUSH
2144: LD_INT 3
2146: PUSH
2147: LD_INT 4
2149: PUSH
2150: LD_INT 5
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: PUSH
2158: LD_INT 1
2160: PPUSH
2161: LD_INT 3
2163: PPUSH
2164: CALL_OW 12
2168: ARRAY
2169: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2170: LD_ADDR_OWVAR 37
2174: PUSH
2175: LD_INT 2
2177: PUSH
2178: LD_INT 3
2180: PUSH
2181: EMPTY
2182: LIST
2183: LIST
2184: PUSH
2185: LD_VAR 0 2
2189: PUSH
2190: LD_INT 2
2192: MOD
2193: PUSH
2194: LD_INT 1
2196: PLUS
2197: ARRAY
2198: ST_TO_ADDR
// veh = CreateVehicle ;
2199: LD_ADDR_VAR 0 4
2203: PUSH
2204: CALL_OW 45
2208: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2209: LD_VAR 0 4
2213: PPUSH
2214: LD_INT 1
2216: PPUSH
2217: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2221: LD_VAR 0 4
2225: PPUSH
2226: LD_INT 2
2228: PPUSH
2229: LD_INT 0
2231: PPUSH
2232: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2236: LD_ADDR_EXP 28
2240: PUSH
2241: LD_EXP 28
2245: PUSH
2246: LD_VAR 0 4
2250: ADD
2251: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2252: LD_EXP 21
2256: PUSH
2257: LD_VAR 0 2
2261: ARRAY
2262: PPUSH
2263: LD_VAR 0 4
2267: PPUSH
2268: CALL_OW 52
// end else
2272: GO 2319
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2274: LD_EXP 21
2278: PUSH
2279: LD_VAR 0 2
2283: ARRAY
2284: PPUSH
2285: LD_INT 106
2287: PPUSH
2288: LD_INT 33
2290: PPUSH
2291: LD_INT 6
2293: PPUSH
2294: LD_INT 0
2296: PPUSH
2297: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2301: LD_EXP 21
2305: PUSH
2306: LD_VAR 0 2
2310: ARRAY
2311: PPUSH
2312: LD_INT 4
2314: PPUSH
2315: CALL_OW 235
// end ; end ;
2319: GO 2093
2321: POP
2322: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2323: LD_INT 22
2325: PUSH
2326: LD_INT 1
2328: PUSH
2329: EMPTY
2330: LIST
2331: LIST
2332: PUSH
2333: LD_INT 21
2335: PUSH
2336: LD_INT 1
2338: PUSH
2339: EMPTY
2340: LIST
2341: LIST
2342: PUSH
2343: EMPTY
2344: LIST
2345: LIST
2346: PPUSH
2347: CALL_OW 69
2351: PPUSH
2352: LD_INT 1
2354: PPUSH
2355: CALL_OW 336
// end ;
2359: LD_VAR 0 1
2363: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2364: LD_INT 0
2366: PPUSH
2367: PPUSH
2368: PPUSH
2369: PPUSH
2370: PPUSH
// uc_side = 1 ;
2371: LD_ADDR_OWVAR 20
2375: PUSH
2376: LD_INT 1
2378: ST_TO_ADDR
// uc_nation = 1 ;
2379: LD_ADDR_OWVAR 21
2383: PUSH
2384: LD_INT 1
2386: ST_TO_ADDR
// for i := 1 to 10 do
2387: LD_ADDR_VAR 0 2
2391: PUSH
2392: DOUBLE
2393: LD_INT 1
2395: DEC
2396: ST_TO_ADDR
2397: LD_INT 10
2399: PUSH
2400: FOR_TO
2401: IFFALSE 2583
// begin vc_engine = 1 ;
2403: LD_ADDR_OWVAR 39
2407: PUSH
2408: LD_INT 1
2410: ST_TO_ADDR
// vc_control = 1 ;
2411: LD_ADDR_OWVAR 38
2415: PUSH
2416: LD_INT 1
2418: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2419: LD_ADDR_OWVAR 40
2423: PUSH
2424: LD_INT 3
2426: PUSH
2427: LD_INT 4
2429: PUSH
2430: LD_INT 5
2432: PUSH
2433: LD_INT 12
2435: PUSH
2436: EMPTY
2437: LIST
2438: LIST
2439: LIST
2440: LIST
2441: PUSH
2442: LD_INT 1
2444: PPUSH
2445: LD_INT 4
2447: PPUSH
2448: CALL_OW 12
2452: ARRAY
2453: ST_TO_ADDR
// vc_chassis = 3 ;
2454: LD_ADDR_OWVAR 37
2458: PUSH
2459: LD_INT 3
2461: ST_TO_ADDR
// veh = CreateVehicle ;
2462: LD_ADDR_VAR 0 3
2466: PUSH
2467: CALL_OW 45
2471: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2472: LD_VAR 0 3
2476: PPUSH
2477: LD_INT 1
2479: PPUSH
2480: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2484: LD_VAR 0 3
2488: PPUSH
2489: LD_INT 2
2491: PPUSH
2492: LD_INT 0
2494: PPUSH
2495: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2499: LD_ADDR_EXP 28
2503: PUSH
2504: LD_EXP 28
2508: PUSH
2509: LD_VAR 0 3
2513: ADD
2514: ST_TO_ADDR
// if vc_weapon = 12 then
2515: LD_OWVAR 40
2519: PUSH
2520: LD_INT 12
2522: EQUAL
2523: IFFALSE 2581
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2525: LD_ADDR_VAR 0 4
2529: PUSH
2530: LD_INT 5
2532: PPUSH
2533: LD_INT 10
2535: PPUSH
2536: CALL_OW 12
2540: PUSH
2541: LD_INT 10
2543: MUL
2544: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2545: LD_VAR 0 3
2549: PPUSH
2550: LD_INT 1
2552: PUSH
2553: LD_INT 3
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: PUSH
2560: LD_INT 1
2562: PPUSH
2563: LD_INT 2
2565: PPUSH
2566: CALL_OW 12
2570: ARRAY
2571: PPUSH
2572: LD_VAR 0 4
2576: PPUSH
2577: CALL_OW 291
// end ; end ;
2581: GO 2400
2583: POP
2584: POP
// end ;
2585: LD_VAR 0 1
2589: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2590: LD_INT 0
2592: PPUSH
2593: PPUSH
2594: PPUSH
// uc_side = 4 ;
2595: LD_ADDR_OWVAR 20
2599: PUSH
2600: LD_INT 4
2602: ST_TO_ADDR
// uc_nation = 1 ;
2603: LD_ADDR_OWVAR 21
2607: PUSH
2608: LD_INT 1
2610: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2611: LD_ADDR_EXP 11
2615: PUSH
2616: LD_STRING Simms
2618: PPUSH
2619: LD_INT 0
2621: PPUSH
2622: LD_STRING 
2624: PPUSH
2625: CALL 46975 0 3
2629: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2630: LD_ADDR_EXP 12
2634: PUSH
2635: LD_STRING Denis
2637: PPUSH
2638: LD_INT 1
2640: PPUSH
2641: LD_STRING 08_
2643: PPUSH
2644: CALL 46975 0 3
2648: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2649: LD_ADDR_EXP 13
2653: PUSH
2654: LD_STRING Joan
2656: PPUSH
2657: LD_INT 1
2659: PPUSH
2660: LD_STRING 08_
2662: PPUSH
2663: CALL 46975 0 3
2667: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2668: LD_STRING 08_Khatam
2670: PPUSH
2671: CALL_OW 28
2675: IFFALSE 2698
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2677: LD_ADDR_EXP 14
2681: PUSH
2682: LD_STRING Khatam
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: LD_STRING 08_
2690: PPUSH
2691: CALL 46975 0 3
2695: ST_TO_ADDR
2696: GO 2726
// if TestCharacters ( 03_Khatam ) then
2698: LD_STRING 03_Khatam
2700: PPUSH
2701: CALL_OW 28
2705: IFFALSE 2726
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2707: LD_ADDR_EXP 14
2711: PUSH
2712: LD_STRING Khatam
2714: PPUSH
2715: LD_INT 1
2717: PPUSH
2718: LD_STRING 03_
2720: PPUSH
2721: CALL 46975 0 3
2725: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2726: LD_ADDR_EXP 15
2730: PUSH
2731: LD_STRING Gladstone
2733: PPUSH
2734: LD_INT 1
2736: PPUSH
2737: LD_STRING 08_
2739: PPUSH
2740: CALL 46975 0 3
2744: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2745: LD_ADDR_EXP 17
2749: PUSH
2750: LD_STRING DeltaDoctor
2752: PPUSH
2753: LD_INT 1
2755: PPUSH
2756: LD_STRING 
2758: PPUSH
2759: CALL 46975 0 3
2763: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2764: LD_ADDR_EXP 7
2768: PUSH
2769: LD_STRING Frank
2771: PPUSH
2772: LD_INT 1
2774: PPUSH
2775: LD_STRING 08_
2777: PPUSH
2778: CALL 46975 0 3
2782: ST_TO_ADDR
// if Frank then
2783: LD_EXP 7
2787: IFFALSE 2810
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2789: LD_ADDR_EXP 8
2793: PUSH
2794: LD_STRING Yamoko
2796: PPUSH
2797: LD_INT 0
2799: PPUSH
2800: LD_STRING 
2802: PPUSH
2803: CALL 46975 0 3
2807: ST_TO_ADDR
2808: GO 2829
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2810: LD_ADDR_EXP 8
2814: PUSH
2815: LD_STRING Kikuchi
2817: PPUSH
2818: LD_INT 1
2820: PPUSH
2821: LD_STRING 08_
2823: PPUSH
2824: CALL 46975 0 3
2828: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2829: LD_ADDR_EXP 22
2833: PUSH
2834: LD_STRING 09_others
2836: PPUSH
2837: CALL_OW 31
2841: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2842: LD_ADDR_EXP 23
2846: PUSH
2847: LD_STRING 09_apes
2849: PPUSH
2850: CALL_OW 31
2854: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2855: LD_EXP 11
2859: PPUSH
2860: LD_INT 1
2862: PPUSH
2863: LD_INT 0
2865: PPUSH
2866: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2870: LD_EXP 12
2874: PPUSH
2875: LD_INT 1
2877: PPUSH
2878: LD_INT 0
2880: PPUSH
2881: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2885: LD_EXP 13
2889: PPUSH
2890: LD_INT 1
2892: PPUSH
2893: LD_INT 0
2895: PPUSH
2896: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2900: LD_EXP 14
2904: PPUSH
2905: LD_INT 1
2907: PPUSH
2908: LD_INT 0
2910: PPUSH
2911: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2915: LD_EXP 15
2919: PPUSH
2920: LD_INT 1
2922: PPUSH
2923: LD_INT 0
2925: PPUSH
2926: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2930: LD_EXP 17
2934: PPUSH
2935: LD_INT 1
2937: PPUSH
2938: LD_INT 0
2940: PPUSH
2941: CALL_OW 49
// if Kikuchi then
2945: LD_EXP 8
2949: IFFALSE 2966
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2951: LD_EXP 8
2955: PPUSH
2956: LD_INT 1
2958: PPUSH
2959: LD_INT 0
2961: PPUSH
2962: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2966: LD_EXP 11
2970: PUSH
2971: LD_EXP 14
2975: PUSH
2976: LD_EXP 12
2980: PUSH
2981: LD_EXP 15
2985: PUSH
2986: LD_EXP 17
2990: PUSH
2991: LD_EXP 13
2995: PUSH
2996: EMPTY
2997: LIST
2998: LIST
2999: LIST
3000: LIST
3001: LIST
3002: LIST
3003: PPUSH
3004: LD_INT 4
3006: PPUSH
3007: CALL_OW 336
// if others09 > 2 then
3011: LD_EXP 22
3015: PUSH
3016: LD_INT 2
3018: GREATER
3019: IFFALSE 3100
// begin for i := 1 to 3 do
3021: LD_ADDR_VAR 0 2
3025: PUSH
3026: DOUBLE
3027: LD_INT 1
3029: DEC
3030: ST_TO_ADDR
3031: LD_INT 3
3033: PUSH
3034: FOR_TO
3035: IFFALSE 3096
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3037: LD_EXP 22
3041: PUSH
3042: LD_VAR 0 2
3046: ARRAY
3047: PPUSH
3048: LD_INT 1
3050: PPUSH
3051: LD_INT 0
3053: PPUSH
3054: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3058: LD_ADDR_EXP 22
3062: PUSH
3063: LD_EXP 22
3067: PPUSH
3068: LD_INT 1
3070: PPUSH
3071: CALL_OW 3
3075: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3076: LD_EXP 22
3080: PUSH
3081: LD_VAR 0 2
3085: ARRAY
3086: PPUSH
3087: LD_INT 2
3089: PPUSH
3090: CALL_OW 336
// end ;
3094: GO 3034
3096: POP
3097: POP
// end else
3098: GO 3160
// begin for i in others09 do
3100: LD_ADDR_VAR 0 2
3104: PUSH
3105: LD_EXP 22
3109: PUSH
3110: FOR_IN
3111: IFFALSE 3158
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3113: LD_VAR 0 2
3117: PPUSH
3118: LD_INT 1
3120: PPUSH
3121: LD_INT 0
3123: PPUSH
3124: CALL_OW 49
// others09 = others09 diff i ;
3128: LD_ADDR_EXP 22
3132: PUSH
3133: LD_EXP 22
3137: PUSH
3138: LD_VAR 0 2
3142: DIFF
3143: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3144: LD_VAR 0 2
3148: PPUSH
3149: LD_INT 2
3151: PPUSH
3152: CALL_OW 336
// end ;
3156: GO 3110
3158: POP
3159: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3160: LD_INT 22
3162: PUSH
3163: LD_INT 4
3165: PUSH
3166: EMPTY
3167: LIST
3168: LIST
3169: PUSH
3170: LD_INT 25
3172: PUSH
3173: LD_INT 2
3175: PUSH
3176: EMPTY
3177: LIST
3178: LIST
3179: PUSH
3180: EMPTY
3181: LIST
3182: LIST
3183: PPUSH
3184: CALL_OW 69
3188: PUSH
3189: LD_INT 0
3191: EQUAL
3192: IFFALSE 3324
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3194: LD_ADDR_VAR 0 3
3198: PUSH
3199: LD_INT 22
3201: PUSH
3202: LD_INT 4
3204: PUSH
3205: EMPTY
3206: LIST
3207: LIST
3208: PUSH
3209: LD_INT 25
3211: PUSH
3212: LD_INT 2
3214: PUSH
3215: EMPTY
3216: LIST
3217: LIST
3218: PUSH
3219: EMPTY
3220: LIST
3221: LIST
3222: PPUSH
3223: CALL_OW 69
3227: PUSH
3228: LD_EXP 11
3232: PUSH
3233: LD_EXP 14
3237: PUSH
3238: LD_EXP 12
3242: PUSH
3243: LD_EXP 15
3247: PUSH
3248: LD_EXP 17
3252: PUSH
3253: LD_EXP 13
3257: PUSH
3258: EMPTY
3259: LIST
3260: LIST
3261: LIST
3262: LIST
3263: LIST
3264: LIST
3265: DIFF
3266: ST_TO_ADDR
// if not tmp then
3267: LD_VAR 0 3
3271: NOT
3272: IFFALSE 3308
// begin if Denis then
3274: LD_EXP 12
3278: IFFALSE 3294
// SetClass ( Denis , 2 ) else
3280: LD_EXP 12
3284: PPUSH
3285: LD_INT 2
3287: PPUSH
3288: CALL_OW 336
3292: GO 3306
// SetClass ( DeltaDoctor , 2 ) ;
3294: LD_EXP 17
3298: PPUSH
3299: LD_INT 2
3301: PPUSH
3302: CALL_OW 336
// end else
3306: GO 3324
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3308: LD_VAR 0 3
3312: PUSH
3313: LD_INT 1
3315: ARRAY
3316: PPUSH
3317: LD_INT 2
3319: PPUSH
3320: CALL_OW 336
// end ; end ; for i in ape09 do
3324: LD_ADDR_VAR 0 2
3328: PUSH
3329: LD_EXP 23
3333: PUSH
3334: FOR_IN
3335: IFFALSE 3354
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3337: LD_VAR 0 2
3341: PPUSH
3342: LD_INT 1
3344: PPUSH
3345: LD_INT 0
3347: PPUSH
3348: CALL_OW 49
3352: GO 3334
3354: POP
3355: POP
// uc_side = 4 ;
3356: LD_ADDR_OWVAR 20
3360: PUSH
3361: LD_INT 4
3363: ST_TO_ADDR
// hc_class := 1 ;
3364: LD_ADDR_OWVAR 28
3368: PUSH
3369: LD_INT 1
3371: ST_TO_ADDR
// hc_sex := sex_female ;
3372: LD_ADDR_OWVAR 27
3376: PUSH
3377: LD_INT 2
3379: ST_TO_ADDR
// hc_gallery :=  ;
3380: LD_ADDR_OWVAR 33
3384: PUSH
3385: LD_STRING 
3387: ST_TO_ADDR
// hc_name :=  ;
3388: LD_ADDR_OWVAR 26
3392: PUSH
3393: LD_STRING 
3395: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3396: LD_ADDR_OWVAR 31
3400: PUSH
3401: LD_INT 1
3403: PUSH
3404: LD_INT 7
3406: PUSH
3407: LD_INT 1
3409: PUSH
3410: LD_INT 0
3412: PUSH
3413: EMPTY
3414: LIST
3415: LIST
3416: LIST
3417: LIST
3418: ST_TO_ADDR
// AmScout = CreateHuman ;
3419: LD_ADDR_EXP 18
3423: PUSH
3424: CALL_OW 44
3428: ST_TO_ADDR
// end ;
3429: LD_VAR 0 1
3433: RET
// export function PrepareCornell ; begin
3434: LD_INT 0
3436: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3437: LD_INT 4
3439: PPUSH
3440: LD_INT 4
3442: PPUSH
3443: CALL_OW 343
// uc_side = 4 ;
3447: LD_ADDR_OWVAR 20
3451: PUSH
3452: LD_INT 4
3454: ST_TO_ADDR
// uc_nation = 1 ;
3455: LD_ADDR_OWVAR 21
3459: PUSH
3460: LD_INT 1
3462: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3463: LD_ADDR_EXP 19
3467: PUSH
3468: LD_STRING Cornel
3470: PPUSH
3471: LD_INT 1
3473: PPUSH
3474: LD_STRING 03_
3476: PPUSH
3477: CALL 46975 0 3
3481: ST_TO_ADDR
// if not Cornell then
3482: LD_EXP 19
3486: NOT
3487: IFFALSE 3491
// exit ;
3489: GO 3599
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3491: LD_EXP 19
3495: PPUSH
3496: LD_INT 8
3498: PPUSH
3499: LD_INT 0
3501: PPUSH
3502: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3506: LD_EXP 19
3510: PPUSH
3511: LD_INT 350
3513: PPUSH
3514: CALL_OW 234
// if IsInUnit ( JMM ) then
3518: LD_EXP 1
3522: PPUSH
3523: CALL_OW 310
3527: IFFALSE 3570
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3529: LD_EXP 19
3533: PPUSH
3534: LD_EXP 1
3538: PPUSH
3539: CALL_OW 310
3543: PPUSH
3544: CALL_OW 250
3548: PPUSH
3549: LD_EXP 1
3553: PPUSH
3554: CALL_OW 310
3558: PPUSH
3559: CALL_OW 251
3563: PPUSH
3564: CALL_OW 111
3568: GO 3599
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3570: LD_EXP 19
3574: PPUSH
3575: LD_EXP 1
3579: PPUSH
3580: CALL_OW 250
3584: PPUSH
3585: LD_EXP 1
3589: PPUSH
3590: CALL_OW 251
3594: PPUSH
3595: CALL_OW 111
// end ; end_of_file
3599: LD_VAR 0 1
3603: RET
// export function PrepareRussians ; var i , un ; begin
3604: LD_INT 0
3606: PPUSH
3607: PPUSH
3608: PPUSH
// uc_side = 3 ;
3609: LD_ADDR_OWVAR 20
3613: PUSH
3614: LD_INT 3
3616: ST_TO_ADDR
// uc_nation = 3 ;
3617: LD_ADDR_OWVAR 21
3621: PUSH
3622: LD_INT 3
3624: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3625: LD_ADDR_EXP 25
3629: PUSH
3630: LD_STRING Tsaritsyn
3632: PPUSH
3633: LD_INT 0
3635: PPUSH
3636: LD_STRING 
3638: PPUSH
3639: CALL 46975 0 3
3643: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3644: LD_EXP 25
3648: PPUSH
3649: LD_INT 3
3651: PPUSH
3652: LD_INT 0
3654: PPUSH
3655: CALL_OW 49
// for i = 1 to 14 do
3659: LD_ADDR_VAR 0 2
3663: PUSH
3664: DOUBLE
3665: LD_INT 1
3667: DEC
3668: ST_TO_ADDR
3669: LD_INT 14
3671: PUSH
3672: FOR_TO
3673: IFFALSE 3759
// begin uc_side = 3 ;
3675: LD_ADDR_OWVAR 20
3679: PUSH
3680: LD_INT 3
3682: ST_TO_ADDR
// uc_nation = 3 ;
3683: LD_ADDR_OWVAR 21
3687: PUSH
3688: LD_INT 3
3690: ST_TO_ADDR
// hc_gallery =  ;
3691: LD_ADDR_OWVAR 33
3695: PUSH
3696: LD_STRING 
3698: ST_TO_ADDR
// hc_name =  ;
3699: LD_ADDR_OWVAR 26
3703: PUSH
3704: LD_STRING 
3706: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3707: LD_INT 0
3709: PPUSH
3710: LD_INT 1
3712: PPUSH
3713: LD_EXP 36
3717: PPUSH
3718: LD_EXP 37
3722: PPUSH
3723: CALL_OW 12
3727: PPUSH
3728: CALL_OW 380
// un = CreateHuman ;
3732: LD_ADDR_VAR 0 3
3736: PUSH
3737: CALL_OW 44
3741: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3742: LD_VAR 0 3
3746: PPUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_INT 0
3752: PPUSH
3753: CALL_OW 49
// end ;
3757: GO 3672
3759: POP
3760: POP
// for i = 1 to 6 do
3761: LD_ADDR_VAR 0 2
3765: PUSH
3766: DOUBLE
3767: LD_INT 1
3769: DEC
3770: ST_TO_ADDR
3771: LD_INT 6
3773: PUSH
3774: FOR_TO
3775: IFFALSE 3861
// begin uc_side = 3 ;
3777: LD_ADDR_OWVAR 20
3781: PUSH
3782: LD_INT 3
3784: ST_TO_ADDR
// uc_nation = 3 ;
3785: LD_ADDR_OWVAR 21
3789: PUSH
3790: LD_INT 3
3792: ST_TO_ADDR
// hc_gallery =  ;
3793: LD_ADDR_OWVAR 33
3797: PUSH
3798: LD_STRING 
3800: ST_TO_ADDR
// hc_name =  ;
3801: LD_ADDR_OWVAR 26
3805: PUSH
3806: LD_STRING 
3808: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3809: LD_INT 0
3811: PPUSH
3812: LD_INT 2
3814: PPUSH
3815: LD_EXP 36
3819: PPUSH
3820: LD_EXP 37
3824: PPUSH
3825: CALL_OW 12
3829: PPUSH
3830: CALL_OW 380
// un = CreateHuman ;
3834: LD_ADDR_VAR 0 3
3838: PUSH
3839: CALL_OW 44
3843: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3844: LD_VAR 0 3
3848: PPUSH
3849: LD_INT 3
3851: PPUSH
3852: LD_INT 0
3854: PPUSH
3855: CALL_OW 49
// end ;
3859: GO 3774
3861: POP
3862: POP
// for i = 1 to 6 do
3863: LD_ADDR_VAR 0 2
3867: PUSH
3868: DOUBLE
3869: LD_INT 1
3871: DEC
3872: ST_TO_ADDR
3873: LD_INT 6
3875: PUSH
3876: FOR_TO
3877: IFFALSE 3963
// begin uc_side = 3 ;
3879: LD_ADDR_OWVAR 20
3883: PUSH
3884: LD_INT 3
3886: ST_TO_ADDR
// uc_nation = 3 ;
3887: LD_ADDR_OWVAR 21
3891: PUSH
3892: LD_INT 3
3894: ST_TO_ADDR
// hc_gallery =  ;
3895: LD_ADDR_OWVAR 33
3899: PUSH
3900: LD_STRING 
3902: ST_TO_ADDR
// hc_name =  ;
3903: LD_ADDR_OWVAR 26
3907: PUSH
3908: LD_STRING 
3910: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3911: LD_INT 0
3913: PPUSH
3914: LD_INT 3
3916: PPUSH
3917: LD_EXP 36
3921: PPUSH
3922: LD_EXP 37
3926: PPUSH
3927: CALL_OW 12
3931: PPUSH
3932: CALL_OW 380
// un = CreateHuman ;
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: CALL_OW 44
3945: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3946: LD_VAR 0 3
3950: PPUSH
3951: LD_INT 3
3953: PPUSH
3954: LD_INT 0
3956: PPUSH
3957: CALL_OW 49
// end ;
3961: GO 3876
3963: POP
3964: POP
// for i = 1 to 4 do
3965: LD_ADDR_VAR 0 2
3969: PUSH
3970: DOUBLE
3971: LD_INT 1
3973: DEC
3974: ST_TO_ADDR
3975: LD_INT 4
3977: PUSH
3978: FOR_TO
3979: IFFALSE 4065
// begin uc_side = 3 ;
3981: LD_ADDR_OWVAR 20
3985: PUSH
3986: LD_INT 3
3988: ST_TO_ADDR
// uc_nation = 3 ;
3989: LD_ADDR_OWVAR 21
3993: PUSH
3994: LD_INT 3
3996: ST_TO_ADDR
// hc_gallery =  ;
3997: LD_ADDR_OWVAR 33
4001: PUSH
4002: LD_STRING 
4004: ST_TO_ADDR
// hc_name =  ;
4005: LD_ADDR_OWVAR 26
4009: PUSH
4010: LD_STRING 
4012: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4013: LD_INT 0
4015: PPUSH
4016: LD_INT 4
4018: PPUSH
4019: LD_EXP 36
4023: PPUSH
4024: LD_EXP 37
4028: PPUSH
4029: CALL_OW 12
4033: PPUSH
4034: CALL_OW 380
// un = CreateHuman ;
4038: LD_ADDR_VAR 0 3
4042: PUSH
4043: CALL_OW 44
4047: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4048: LD_VAR 0 3
4052: PPUSH
4053: LD_INT 3
4055: PPUSH
4056: LD_INT 0
4058: PPUSH
4059: CALL_OW 49
// end ;
4063: GO 3978
4065: POP
4066: POP
// end ; end_of_file
4067: LD_VAR 0 1
4071: RET
// export function PrepareArabianCommander ; begin
4072: LD_INT 0
4074: PPUSH
// uc_side = 2 ;
4075: LD_ADDR_OWVAR 20
4079: PUSH
4080: LD_INT 2
4082: ST_TO_ADDR
// uc_nation = 2 ;
4083: LD_ADDR_OWVAR 21
4087: PUSH
4088: LD_INT 2
4090: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4091: LD_ADDR_EXP 26
4095: PUSH
4096: LD_STRING Dietrich
4098: PPUSH
4099: CALL_OW 25
4103: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4104: LD_EXP 26
4108: PPUSH
4109: LD_INT 4
4111: PPUSH
4112: LD_INT 0
4114: PPUSH
4115: CALL_OW 49
// end ;
4119: LD_VAR 0 1
4123: RET
// export function PrepareArabian ; var i , un , veh ; begin
4124: LD_INT 0
4126: PPUSH
4127: PPUSH
4128: PPUSH
4129: PPUSH
// uc_side := 2 ;
4130: LD_ADDR_OWVAR 20
4134: PUSH
4135: LD_INT 2
4137: ST_TO_ADDR
// uc_nation := 2 ;
4138: LD_ADDR_OWVAR 21
4142: PUSH
4143: LD_INT 2
4145: ST_TO_ADDR
// if not Ahmed then
4146: LD_EXP 27
4150: NOT
4151: IFFALSE 4219
// begin InitHc ;
4153: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4157: LD_INT 1
4159: PPUSH
4160: LD_INT 1
4162: PPUSH
4163: LD_EXP 36
4167: PPUSH
4168: LD_EXP 37
4172: PUSH
4173: LD_INT 1
4175: PLUS
4176: PPUSH
4177: CALL_OW 12
4181: PPUSH
4182: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4186: LD_ADDR_OWVAR 26
4190: PUSH
4191: LD_STRING Ahmed Abbasid
4193: ST_TO_ADDR
// Ahmed := CreateHuman ;
4194: LD_ADDR_EXP 27
4198: PUSH
4199: CALL_OW 44
4203: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4204: LD_EXP 27
4208: PPUSH
4209: LD_INT 4
4211: PPUSH
4212: LD_INT 0
4214: PPUSH
4215: CALL_OW 49
// end ; for i = 1 to 4 do
4219: LD_ADDR_VAR 0 2
4223: PUSH
4224: DOUBLE
4225: LD_INT 1
4227: DEC
4228: ST_TO_ADDR
4229: LD_INT 4
4231: PUSH
4232: FOR_TO
4233: IFFALSE 4319
// begin uc_side = 2 ;
4235: LD_ADDR_OWVAR 20
4239: PUSH
4240: LD_INT 2
4242: ST_TO_ADDR
// uc_nation = 2 ;
4243: LD_ADDR_OWVAR 21
4247: PUSH
4248: LD_INT 2
4250: ST_TO_ADDR
// hc_gallery =  ;
4251: LD_ADDR_OWVAR 33
4255: PUSH
4256: LD_STRING 
4258: ST_TO_ADDR
// hc_name =  ;
4259: LD_ADDR_OWVAR 26
4263: PUSH
4264: LD_STRING 
4266: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4267: LD_INT 0
4269: PPUSH
4270: LD_INT 2
4272: PPUSH
4273: LD_EXP 36
4277: PPUSH
4278: LD_EXP 37
4282: PPUSH
4283: CALL_OW 12
4287: PPUSH
4288: CALL_OW 380
// un = CreateHuman ;
4292: LD_ADDR_VAR 0 3
4296: PUSH
4297: CALL_OW 44
4301: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4302: LD_VAR 0 3
4306: PPUSH
4307: LD_INT 4
4309: PPUSH
4310: LD_INT 0
4312: PPUSH
4313: CALL_OW 49
// end ;
4317: GO 4232
4319: POP
4320: POP
// for i = 1 to 5 do
4321: LD_ADDR_VAR 0 2
4325: PUSH
4326: DOUBLE
4327: LD_INT 1
4329: DEC
4330: ST_TO_ADDR
4331: LD_INT 5
4333: PUSH
4334: FOR_TO
4335: IFFALSE 4421
// begin uc_side = 2 ;
4337: LD_ADDR_OWVAR 20
4341: PUSH
4342: LD_INT 2
4344: ST_TO_ADDR
// uc_nation = 2 ;
4345: LD_ADDR_OWVAR 21
4349: PUSH
4350: LD_INT 2
4352: ST_TO_ADDR
// hc_gallery =  ;
4353: LD_ADDR_OWVAR 33
4357: PUSH
4358: LD_STRING 
4360: ST_TO_ADDR
// hc_name =  ;
4361: LD_ADDR_OWVAR 26
4365: PUSH
4366: LD_STRING 
4368: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4369: LD_INT 0
4371: PPUSH
4372: LD_INT 1
4374: PPUSH
4375: LD_EXP 36
4379: PPUSH
4380: LD_EXP 37
4384: PPUSH
4385: CALL_OW 12
4389: PPUSH
4390: CALL_OW 380
// un = CreateHuman ;
4394: LD_ADDR_VAR 0 3
4398: PUSH
4399: CALL_OW 44
4403: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4404: LD_VAR 0 3
4408: PPUSH
4409: LD_INT 4
4411: PPUSH
4412: LD_INT 0
4414: PPUSH
4415: CALL_OW 49
// end ;
4419: GO 4334
4421: POP
4422: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
4423: LD_ADDR_VAR 0 2
4427: PUSH
4428: DOUBLE
4429: LD_INT 1
4431: DEC
4432: ST_TO_ADDR
4433: LD_INT 3
4435: PUSH
4436: LD_INT 4
4438: PUSH
4439: LD_INT 4
4441: PUSH
4442: EMPTY
4443: LIST
4444: LIST
4445: LIST
4446: PUSH
4447: LD_OWVAR 67
4451: ARRAY
4452: PUSH
4453: FOR_TO
4454: IFFALSE 4540
// begin uc_side = 2 ;
4456: LD_ADDR_OWVAR 20
4460: PUSH
4461: LD_INT 2
4463: ST_TO_ADDR
// uc_nation = 2 ;
4464: LD_ADDR_OWVAR 21
4468: PUSH
4469: LD_INT 2
4471: ST_TO_ADDR
// hc_gallery =  ;
4472: LD_ADDR_OWVAR 33
4476: PUSH
4477: LD_STRING 
4479: ST_TO_ADDR
// hc_name =  ;
4480: LD_ADDR_OWVAR 26
4484: PUSH
4485: LD_STRING 
4487: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4488: LD_INT 0
4490: PPUSH
4491: LD_INT 4
4493: PPUSH
4494: LD_EXP 36
4498: PPUSH
4499: LD_EXP 37
4503: PPUSH
4504: CALL_OW 12
4508: PPUSH
4509: CALL_OW 380
// un = CreateHuman ;
4513: LD_ADDR_VAR 0 3
4517: PUSH
4518: CALL_OW 44
4522: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4523: LD_VAR 0 3
4527: PPUSH
4528: LD_INT 4
4530: PPUSH
4531: LD_INT 0
4533: PPUSH
4534: CALL_OW 49
// end ;
4538: GO 4453
4540: POP
4541: POP
// for i = 1 to 2 do
4542: LD_ADDR_VAR 0 2
4546: PUSH
4547: DOUBLE
4548: LD_INT 1
4550: DEC
4551: ST_TO_ADDR
4552: LD_INT 2
4554: PUSH
4555: FOR_TO
4556: IFFALSE 4686
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4558: LD_ADDR_VAR 0 4
4562: PUSH
4563: LD_INT 22
4565: PUSH
4566: LD_INT 2
4568: PUSH
4569: EMPTY
4570: LIST
4571: LIST
4572: PUSH
4573: LD_INT 21
4575: PUSH
4576: LD_INT 2
4578: PUSH
4579: EMPTY
4580: LIST
4581: LIST
4582: PUSH
4583: LD_INT 58
4585: PUSH
4586: EMPTY
4587: LIST
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: LIST
4593: PPUSH
4594: CALL_OW 69
4598: ST_TO_ADDR
// uc_side = 2 ;
4599: LD_ADDR_OWVAR 20
4603: PUSH
4604: LD_INT 2
4606: ST_TO_ADDR
// uc_nation = 2 ;
4607: LD_ADDR_OWVAR 21
4611: PUSH
4612: LD_INT 2
4614: ST_TO_ADDR
// hc_gallery =  ;
4615: LD_ADDR_OWVAR 33
4619: PUSH
4620: LD_STRING 
4622: ST_TO_ADDR
// hc_name =  ;
4623: LD_ADDR_OWVAR 26
4627: PUSH
4628: LD_STRING 
4630: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4631: LD_INT 0
4633: PPUSH
4634: LD_INT 3
4636: PPUSH
4637: LD_EXP 36
4641: PPUSH
4642: LD_EXP 37
4646: PPUSH
4647: CALL_OW 12
4651: PPUSH
4652: CALL_OW 380
// un = CreateHuman ;
4656: LD_ADDR_VAR 0 3
4660: PUSH
4661: CALL_OW 44
4665: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4666: LD_VAR 0 3
4670: PPUSH
4671: LD_VAR 0 4
4675: PUSH
4676: LD_INT 1
4678: ARRAY
4679: PPUSH
4680: CALL_OW 52
// end ;
4684: GO 4555
4686: POP
4687: POP
// end ;
4688: LD_VAR 0 1
4692: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4693: LD_INT 0
4695: PPUSH
4696: PPUSH
4697: PPUSH
4698: PPUSH
4699: PPUSH
4700: PPUSH
// for i := 1 to 2 do
4701: LD_ADDR_VAR 0 2
4705: PUSH
4706: DOUBLE
4707: LD_INT 1
4709: DEC
4710: ST_TO_ADDR
4711: LD_INT 2
4713: PUSH
4714: FOR_TO
4715: IFFALSE 4841
// begin uc_side = 5 ;
4717: LD_ADDR_OWVAR 20
4721: PUSH
4722: LD_INT 5
4724: ST_TO_ADDR
// uc_nation = 2 ;
4725: LD_ADDR_OWVAR 21
4729: PUSH
4730: LD_INT 2
4732: ST_TO_ADDR
// vc_chassis := 31 ;
4733: LD_ADDR_OWVAR 37
4737: PUSH
4738: LD_INT 31
4740: ST_TO_ADDR
// vc_control := control_rider ;
4741: LD_ADDR_OWVAR 38
4745: PUSH
4746: LD_INT 4
4748: ST_TO_ADDR
// animal := CreateVehicle ;
4749: LD_ADDR_VAR 0 3
4753: PUSH
4754: CALL_OW 45
4758: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4759: LD_VAR 0 3
4763: PPUSH
4764: LD_INT 7
4766: PPUSH
4767: LD_INT 0
4769: PPUSH
4770: CALL_OW 49
// hc_gallery =  ;
4774: LD_ADDR_OWVAR 33
4778: PUSH
4779: LD_STRING 
4781: ST_TO_ADDR
// hc_name =  ;
4782: LD_ADDR_OWVAR 26
4786: PUSH
4787: LD_STRING 
4789: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4790: LD_INT 0
4792: PPUSH
4793: LD_INT 11
4795: PPUSH
4796: LD_EXP 36
4800: PPUSH
4801: LD_EXP 37
4805: PPUSH
4806: CALL_OW 12
4810: PPUSH
4811: CALL_OW 380
// un = CreateHuman ;
4815: LD_ADDR_VAR 0 4
4819: PUSH
4820: CALL_OW 44
4824: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4825: LD_VAR 0 4
4829: PPUSH
4830: LD_VAR 0 3
4834: PPUSH
4835: CALL_OW 52
// end ;
4839: GO 4714
4841: POP
4842: POP
// repeat wait ( 0 0$1 ) ;
4843: LD_INT 35
4845: PPUSH
4846: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4850: LD_ADDR_VAR 0 5
4854: PUSH
4855: LD_INT 22
4857: PUSH
4858: LD_INT 1
4860: PUSH
4861: EMPTY
4862: LIST
4863: LIST
4864: PPUSH
4865: CALL_OW 69
4869: PPUSH
4870: LD_VAR 0 2
4874: PPUSH
4875: CALL_OW 74
4879: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4880: LD_ADDR_VAR 0 6
4884: PUSH
4885: LD_INT 22
4887: PUSH
4888: LD_INT 1
4890: PUSH
4891: EMPTY
4892: LIST
4893: LIST
4894: PUSH
4895: LD_INT 2
4897: PUSH
4898: LD_INT 59
4900: PUSH
4901: EMPTY
4902: LIST
4903: PUSH
4904: LD_INT 21
4906: PUSH
4907: LD_INT 1
4909: PUSH
4910: EMPTY
4911: LIST
4912: LIST
4913: PUSH
4914: LD_INT 21
4916: PUSH
4917: LD_INT 2
4919: PUSH
4920: EMPTY
4921: LIST
4922: LIST
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: LIST
4928: LIST
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: PPUSH
4937: CALL_OW 69
4941: PPUSH
4942: LD_VAR 0 2
4946: PPUSH
4947: CALL_OW 74
4951: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4952: LD_ADDR_VAR 0 2
4956: PUSH
4957: LD_INT 22
4959: PUSH
4960: LD_INT 5
4962: PUSH
4963: EMPTY
4964: LIST
4965: LIST
4966: PUSH
4967: LD_INT 25
4969: PUSH
4970: LD_INT 11
4972: PUSH
4973: EMPTY
4974: LIST
4975: LIST
4976: PUSH
4977: EMPTY
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: PUSH
4986: FOR_IN
4987: IFFALSE 5057
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4989: LD_VAR 0 2
4993: PPUSH
4994: LD_VAR 0 5
4998: PPUSH
4999: CALL_OW 296
5003: PUSH
5004: LD_INT 8
5006: PLUS
5007: PUSH
5008: LD_VAR 0 2
5012: PPUSH
5013: LD_VAR 0 6
5017: PPUSH
5018: CALL_OW 296
5022: LESS
5023: IFFALSE 5041
// ComAttackUnit ( i , target1 ) else
5025: LD_VAR 0 2
5029: PPUSH
5030: LD_VAR 0 5
5034: PPUSH
5035: CALL_OW 115
5039: GO 5055
// ComAttackUnit ( i , target2 ) ;
5041: LD_VAR 0 2
5045: PPUSH
5046: LD_VAR 0 6
5050: PPUSH
5051: CALL_OW 115
// end ;
5055: GO 4986
5057: POP
5058: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5059: LD_INT 22
5061: PUSH
5062: LD_INT 5
5064: PUSH
5065: EMPTY
5066: LIST
5067: LIST
5068: PUSH
5069: LD_INT 25
5071: PUSH
5072: LD_INT 11
5074: PUSH
5075: EMPTY
5076: LIST
5077: LIST
5078: PUSH
5079: EMPTY
5080: LIST
5081: LIST
5082: PPUSH
5083: CALL_OW 69
5087: PUSH
5088: LD_INT 0
5090: EQUAL
5091: PUSH
5092: LD_INT 22
5094: PUSH
5095: LD_INT 1
5097: PUSH
5098: EMPTY
5099: LIST
5100: LIST
5101: PPUSH
5102: CALL_OW 69
5106: PUSH
5107: LD_INT 0
5109: EQUAL
5110: OR
5111: IFFALSE 4843
// end ; end_of_file
5113: LD_VAR 0 1
5117: RET
// every 1 do
5118: GO 5120
5120: DISABLE
// begin Video ( true ) ;
5121: LD_INT 1
5123: PPUSH
5124: CALL 82936 0 1
// RevealFogArea ( 1 , EpsilonTerrain ) ;
5128: LD_INT 1
5130: PPUSH
5131: LD_INT 19
5133: PPUSH
5134: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5138: LD_EXP 11
5142: PPUSH
5143: CALL_OW 87
// wait ( 0 0$3 ) ;
5147: LD_INT 105
5149: PPUSH
5150: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5154: LD_EXP 1
5158: PPUSH
5159: CALL_OW 310
5163: PPUSH
5164: CALL_OW 85
// Wait ( 0 0$1 ) ;
5168: LD_INT 35
5170: PPUSH
5171: CALL_OW 67
// if IsOk ( Gary ) then
5175: LD_EXP 10
5179: PPUSH
5180: CALL_OW 302
5184: IFFALSE 5222
// begin Say ( Gary , D2-Gary-1 ) ;
5186: LD_EXP 10
5190: PPUSH
5191: LD_STRING D2-Gary-1
5193: PPUSH
5194: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5198: LD_EXP 1
5202: PPUSH
5203: LD_STRING D2-JMM-1
5205: PPUSH
5206: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5210: LD_EXP 10
5214: PPUSH
5215: LD_STRING D2-Gary-2
5217: PPUSH
5218: CALL_OW 88
// end ; Video ( false ) ;
5222: LD_INT 0
5224: PPUSH
5225: CALL 82936 0 1
// ChangeMissionObjectives ( M1 ) ;
5229: LD_STRING M1
5231: PPUSH
5232: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5236: LD_INT 38
5238: PPUSH
5239: LD_INT 1
5241: PPUSH
5242: LD_INT 100
5244: PPUSH
5245: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5249: LD_INT 47
5251: PPUSH
5252: LD_INT 1
5254: PPUSH
5255: LD_INT 50
5257: PPUSH
5258: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5262: LD_INT 47
5264: PPUSH
5265: LD_INT 3
5267: PPUSH
5268: LD_INT 50
5270: PPUSH
5271: CALL_OW 291
// SaveForQuickRestart ;
5275: CALL_OW 22
// end ;
5279: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5280: LD_EXP 1
5284: PPUSH
5285: LD_EXP 11
5289: PPUSH
5290: CALL_OW 296
5294: PUSH
5295: LD_INT 15
5297: LESS
5298: IFFALSE 5979
5300: GO 5302
5302: DISABLE
5303: LD_INT 0
5305: PPUSH
// begin wait ( 0 0$3 ) ;
5306: LD_INT 105
5308: PPUSH
5309: CALL_OW 67
// Video ( true ) ;
5313: LD_INT 1
5315: PPUSH
5316: CALL 82936 0 1
// ComExitVehicle ( JMM ) ;
5320: LD_EXP 1
5324: PPUSH
5325: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5329: LD_EXP 1
5333: PPUSH
5334: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5338: LD_EXP 1
5342: PPUSH
5343: LD_EXP 11
5347: PPUSH
5348: CALL_OW 179
// p := 15 ;
5352: LD_ADDR_VAR 0 1
5356: PUSH
5357: LD_INT 15
5359: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5360: LD_INT 35
5362: PPUSH
5363: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5367: LD_EXP 11
5371: PUSH
5372: LD_EXP 13
5376: PUSH
5377: LD_EXP 12
5381: PUSH
5382: LD_EXP 14
5386: PUSH
5387: LD_EXP 8
5391: PUSH
5392: EMPTY
5393: LIST
5394: LIST
5395: LIST
5396: LIST
5397: LIST
5398: PPUSH
5399: LD_EXP 1
5403: PPUSH
5404: CALL_OW 112
// p := p - 1 ;
5408: LD_ADDR_VAR 0 1
5412: PUSH
5413: LD_VAR 0 1
5417: PUSH
5418: LD_INT 1
5420: MINUS
5421: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5422: LD_EXP 1
5426: PPUSH
5427: LD_EXP 11
5431: PPUSH
5432: CALL_OW 296
5436: PUSH
5437: LD_INT 5
5439: LESS
5440: PUSH
5441: LD_VAR 0 1
5445: PUSH
5446: LD_INT 0
5448: LESSEQUAL
5449: OR
5450: IFFALSE 5360
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5452: LD_EXP 11
5456: PUSH
5457: LD_EXP 13
5461: PUSH
5462: LD_EXP 12
5466: PUSH
5467: LD_EXP 14
5471: PUSH
5472: LD_EXP 8
5476: PUSH
5477: EMPTY
5478: LIST
5479: LIST
5480: LIST
5481: LIST
5482: LIST
5483: PPUSH
5484: LD_EXP 1
5488: PPUSH
5489: CALL_OW 119
// if not IsInUnit ( JMM ) then
5493: LD_EXP 1
5497: PPUSH
5498: CALL_OW 310
5502: NOT
5503: IFFALSE 5519
// ComTurnUnit ( JMM , Simms ) ;
5505: LD_EXP 1
5509: PPUSH
5510: LD_EXP 11
5514: PPUSH
5515: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5519: LD_EXP 11
5523: PUSH
5524: LD_EXP 13
5528: PUSH
5529: LD_EXP 12
5533: PUSH
5534: LD_EXP 14
5538: PUSH
5539: EMPTY
5540: LIST
5541: LIST
5542: LIST
5543: LIST
5544: PPUSH
5545: LD_EXP 1
5549: PPUSH
5550: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5554: LD_EXP 1
5558: PUSH
5559: LD_EXP 11
5563: PUSH
5564: EMPTY
5565: LIST
5566: LIST
5567: PPUSH
5568: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5572: LD_EXP 11
5576: PPUSH
5577: LD_STRING D2a-Sim-1
5579: PPUSH
5580: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5584: LD_EXP 1
5588: PPUSH
5589: LD_STRING D2a-JMM-1
5591: PPUSH
5592: CALL_OW 88
// if IsOk ( Joan ) then
5596: LD_EXP 13
5600: PPUSH
5601: CALL_OW 302
5605: IFFALSE 5683
// begin if not IsInUnit ( JMM ) then
5607: LD_EXP 1
5611: PPUSH
5612: CALL_OW 310
5616: NOT
5617: IFFALSE 5633
// ComTurnUnit ( JMM , Joan ) ;
5619: LD_EXP 1
5623: PPUSH
5624: LD_EXP 13
5628: PPUSH
5629: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5633: LD_EXP 13
5637: PPUSH
5638: LD_EXP 1
5642: PPUSH
5643: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5647: LD_EXP 13
5651: PPUSH
5652: LD_STRING D2b-Joan-1
5654: PPUSH
5655: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5659: LD_EXP 1
5663: PPUSH
5664: LD_STRING D2b-JMM-1
5666: PPUSH
5667: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5671: LD_EXP 13
5675: PPUSH
5676: LD_STRING D2b-Joan-2
5678: PPUSH
5679: CALL_OW 88
// end ; if IsOk ( Denis ) then
5683: LD_EXP 12
5687: PPUSH
5688: CALL_OW 302
5692: IFFALSE 5746
// begin if not IsInUnit ( JMM ) then
5694: LD_EXP 1
5698: PPUSH
5699: CALL_OW 310
5703: NOT
5704: IFFALSE 5720
// ComTurnUnit ( JMM , Denis ) ;
5706: LD_EXP 1
5710: PPUSH
5711: LD_EXP 12
5715: PPUSH
5716: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
5720: LD_EXP 12
5724: PPUSH
5725: LD_EXP 1
5729: PPUSH
5730: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5734: LD_EXP 12
5738: PPUSH
5739: LD_STRING D2c-Den-1
5741: PPUSH
5742: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5746: LD_EXP 8
5750: PPUSH
5751: CALL_OW 302
5755: PUSH
5756: LD_STRING 08_Kikuchi
5758: PPUSH
5759: CALL_OW 28
5763: NOT
5764: AND
5765: IFFALSE 5860
// begin repeat wait ( 0 0$1 ) ;
5767: LD_INT 35
5769: PPUSH
5770: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5774: LD_EXP 8
5778: PPUSH
5779: LD_EXP 1
5783: PPUSH
5784: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5788: LD_EXP 1
5792: PPUSH
5793: LD_EXP 8
5797: PPUSH
5798: CALL_OW 296
5802: PUSH
5803: LD_INT 5
5805: LESS
5806: IFFALSE 5767
// ComTurnUnit ( Kikuchi , JMM ) ;
5808: LD_EXP 8
5812: PPUSH
5813: LD_EXP 1
5817: PPUSH
5818: CALL_OW 119
// if not IsInUnit ( JMM ) then
5822: LD_EXP 1
5826: PPUSH
5827: CALL_OW 310
5831: NOT
5832: IFFALSE 5848
// ComTurnUnit ( JMM , Kikuchi ) ;
5834: LD_EXP 1
5838: PPUSH
5839: LD_EXP 8
5843: PPUSH
5844: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5848: LD_EXP 8
5852: PPUSH
5853: LD_STRING D3b-Yam-1
5855: PPUSH
5856: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5860: LD_EXP 14
5864: PPUSH
5865: CALL_OW 302
5869: IFFALSE 5935
// begin if not IsInUnit ( JMM ) then
5871: LD_EXP 1
5875: PPUSH
5876: CALL_OW 310
5880: NOT
5881: IFFALSE 5897
// ComTurnUnit ( JMM , Khatam ) ;
5883: LD_EXP 1
5887: PPUSH
5888: LD_EXP 14
5892: PPUSH
5893: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
5897: LD_EXP 14
5901: PPUSH
5902: LD_EXP 1
5906: PPUSH
5907: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5911: LD_EXP 1
5915: PPUSH
5916: LD_STRING D2c-JMM-1
5918: PPUSH
5919: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5923: LD_EXP 14
5927: PPUSH
5928: LD_STRING D2c-Khat-1
5930: PPUSH
5931: CALL_OW 88
// end ; Video ( false ) ;
5935: LD_INT 0
5937: PPUSH
5938: CALL 82936 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5942: LD_INT 22
5944: PUSH
5945: LD_INT 4
5947: PUSH
5948: EMPTY
5949: LIST
5950: LIST
5951: PPUSH
5952: CALL_OW 69
5956: PPUSH
5957: LD_INT 1
5959: PPUSH
5960: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5964: LD_STRING M1a
5966: PPUSH
5967: CALL_OW 337
// joinEpsilon = 1 ;
5971: LD_ADDR_EXP 29
5975: PUSH
5976: LD_INT 1
5978: ST_TO_ADDR
// end ;
5979: PPOPN 1
5981: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
5982: LD_INT 38
5984: PPUSH
5985: LD_INT 1
5987: PPUSH
5988: CALL_OW 289
5992: PUSH
5993: LD_INT 0
5995: EQUAL
5996: PUSH
5997: LD_INT 47
5999: PPUSH
6000: LD_INT 1
6002: PPUSH
6003: CALL_OW 289
6007: PUSH
6008: LD_INT 0
6010: EQUAL
6011: AND
6012: PUSH
6013: LD_INT 47
6015: PPUSH
6016: LD_INT 2
6018: PPUSH
6019: CALL_OW 289
6023: PUSH
6024: LD_INT 0
6026: EQUAL
6027: AND
6028: IFFALSE 6153
6030: GO 6032
6032: DISABLE
6033: LD_INT 0
6035: PPUSH
// begin p := 0 ;
6036: LD_ADDR_VAR 0 1
6040: PUSH
6041: LD_INT 0
6043: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6044: LD_INT 38
6046: PUSH
6047: LD_INT 47
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: PPUSH
6054: LD_INT 56
6056: PPUSH
6057: LD_INT 0
6059: PPUSH
6060: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6064: LD_INT 35
6066: PPUSH
6067: CALL_OW 67
// p := p + 1 ;
6071: LD_ADDR_VAR 0 1
6075: PUSH
6076: LD_VAR 0 1
6080: PUSH
6081: LD_INT 1
6083: PLUS
6084: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6085: LD_INT 38
6087: PUSH
6088: LD_INT 47
6090: PUSH
6091: EMPTY
6092: LIST
6093: LIST
6094: PPUSH
6095: LD_INT 56
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6105: LD_INT 38
6107: PPUSH
6108: LD_INT 27
6110: PPUSH
6111: CALL_OW 308
6115: IFFALSE 6124
// RemoveUnit ( cargo1 ) ;
6117: LD_INT 38
6119: PPUSH
6120: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6124: LD_INT 47
6126: PPUSH
6127: LD_INT 27
6129: PPUSH
6130: CALL_OW 308
6134: IFFALSE 6143
// RemoveUnit ( cargo2 ) ;
6136: LD_INT 47
6138: PPUSH
6139: CALL_OW 64
// until p > 30 ;
6143: LD_VAR 0 1
6147: PUSH
6148: LD_INT 30
6150: GREATER
6151: IFFALSE 6064
// end ;
6153: PPOPN 1
6155: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6156: LD_EXP 65
6160: PUSH
6161: LD_INT 1
6163: EQUAL
6164: IFFALSE 7296
6166: GO 6168
6168: DISABLE
6169: LD_INT 0
6171: PPUSH
6172: PPUSH
6173: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6174: LD_ADDR_VAR 0 1
6178: PUSH
6179: LD_INT 22
6181: PUSH
6182: LD_INT 1
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: PUSH
6189: LD_INT 25
6191: PUSH
6192: LD_INT 4
6194: PUSH
6195: EMPTY
6196: LIST
6197: LIST
6198: PUSH
6199: LD_INT 26
6201: PUSH
6202: LD_INT 1
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 69
6218: PUSH
6219: LD_EXP 1
6223: PUSH
6224: LD_EXP 2
6228: PUSH
6229: LD_EXP 3
6233: PUSH
6234: LD_EXP 4
6238: PUSH
6239: LD_EXP 5
6243: PUSH
6244: LD_EXP 6
6248: PUSH
6249: LD_EXP 7
6253: PUSH
6254: LD_EXP 8
6258: PUSH
6259: LD_EXP 9
6263: PUSH
6264: LD_EXP 10
6268: PUSH
6269: LD_EXP 11
6273: PUSH
6274: LD_EXP 12
6278: PUSH
6279: LD_EXP 13
6283: PUSH
6284: LD_EXP 14
6288: PUSH
6289: LD_EXP 15
6293: PUSH
6294: LD_EXP 16
6298: PUSH
6299: LD_EXP 17
6303: PUSH
6304: LD_EXP 18
6308: PUSH
6309: LD_EXP 19
6313: PUSH
6314: LD_EXP 24
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: LIST
6325: LIST
6326: LIST
6327: LIST
6328: LIST
6329: LIST
6330: LIST
6331: LIST
6332: LIST
6333: LIST
6334: LIST
6335: LIST
6336: LIST
6337: LIST
6338: LIST
6339: LIST
6340: DIFF
6341: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6342: LD_ADDR_VAR 0 2
6346: PUSH
6347: LD_INT 22
6349: PUSH
6350: LD_INT 1
6352: PUSH
6353: EMPTY
6354: LIST
6355: LIST
6356: PUSH
6357: LD_INT 26
6359: PUSH
6360: LD_INT 1
6362: PUSH
6363: EMPTY
6364: LIST
6365: LIST
6366: PUSH
6367: LD_INT 2
6369: PUSH
6370: LD_INT 25
6372: PUSH
6373: LD_INT 1
6375: PUSH
6376: EMPTY
6377: LIST
6378: LIST
6379: PUSH
6380: LD_INT 25
6382: PUSH
6383: LD_INT 2
6385: PUSH
6386: EMPTY
6387: LIST
6388: LIST
6389: PUSH
6390: LD_INT 25
6392: PUSH
6393: LD_INT 3
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: EMPTY
6401: LIST
6402: LIST
6403: LIST
6404: LIST
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: LIST
6410: PPUSH
6411: CALL_OW 69
6415: PUSH
6416: LD_EXP 1
6420: PUSH
6421: LD_EXP 2
6425: PUSH
6426: LD_EXP 3
6430: PUSH
6431: LD_EXP 4
6435: PUSH
6436: LD_EXP 5
6440: PUSH
6441: LD_EXP 6
6445: PUSH
6446: LD_EXP 7
6450: PUSH
6451: LD_EXP 8
6455: PUSH
6456: LD_EXP 9
6460: PUSH
6461: LD_EXP 10
6465: PUSH
6466: LD_EXP 11
6470: PUSH
6471: LD_EXP 12
6475: PUSH
6476: LD_EXP 13
6480: PUSH
6481: LD_EXP 14
6485: PUSH
6486: LD_EXP 15
6490: PUSH
6491: LD_EXP 16
6495: PUSH
6496: LD_EXP 17
6500: PUSH
6501: LD_EXP 18
6505: PUSH
6506: LD_EXP 19
6510: PUSH
6511: LD_EXP 24
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: LIST
6526: LIST
6527: LIST
6528: LIST
6529: LIST
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: DIFF
6538: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6539: LD_EXP 10
6543: PUSH
6544: LD_VAR 0 2
6548: OR
6549: PUSH
6550: LD_EXP 17
6554: PUSH
6555: LD_VAR 0 1
6559: OR
6560: AND
6561: IFFALSE 6780
// begin DialogueOn ;
6563: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6567: LD_EXP 17
6571: PPUSH
6572: CALL_OW 302
6576: IFFALSE 6592
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6578: LD_EXP 17
6582: PPUSH
6583: LD_STRING D3-Sci1-1
6585: PPUSH
6586: CALL_OW 88
6590: GO 6604
// Say ( tmp1 , D3-Sci1-1 ) ;
6592: LD_VAR 0 1
6596: PPUSH
6597: LD_STRING D3-Sci1-1
6599: PPUSH
6600: CALL_OW 88
// if IsOk ( Gary ) then
6604: LD_EXP 10
6608: PPUSH
6609: CALL_OW 302
6613: IFFALSE 6629
// Say ( Gary , D3-Gary-1 ) else
6615: LD_EXP 10
6619: PPUSH
6620: LD_STRING D3-Gary-1
6622: PPUSH
6623: CALL_OW 88
6627: GO 6641
// Say ( tmp2 , D3-Gary-1 ) ;
6629: LD_VAR 0 2
6633: PPUSH
6634: LD_STRING D3-Gary-1
6636: PPUSH
6637: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6641: LD_EXP 17
6645: PPUSH
6646: CALL_OW 302
6650: IFFALSE 6666
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6652: LD_EXP 17
6656: PPUSH
6657: LD_STRING D3-Sci1-2
6659: PPUSH
6660: CALL_OW 88
6664: GO 6678
// Say ( tmp1 , D3-Sci1-2 ) ;
6666: LD_VAR 0 1
6670: PPUSH
6671: LD_STRING D3-Sci1-2
6673: PPUSH
6674: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6678: LD_EXP 1
6682: PPUSH
6683: LD_STRING D3-JMM-2
6685: PPUSH
6686: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6690: LD_EXP 17
6694: PPUSH
6695: CALL_OW 302
6699: IFFALSE 6715
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6701: LD_EXP 17
6705: PPUSH
6706: LD_STRING D3-Sci1-3
6708: PPUSH
6709: CALL_OW 88
6713: GO 6727
// Say ( tmp1 , D3-Sci1-3 ) ;
6715: LD_VAR 0 1
6719: PPUSH
6720: LD_STRING D3-Sci1-3
6722: PPUSH
6723: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6727: LD_EXP 1
6731: PPUSH
6732: LD_STRING D3-JMM-3
6734: PPUSH
6735: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6739: LD_EXP 17
6743: PPUSH
6744: CALL_OW 302
6748: IFFALSE 6764
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6750: LD_EXP 17
6754: PPUSH
6755: LD_STRING D3-Sci1-4
6757: PPUSH
6758: CALL_OW 88
6762: GO 6776
// Say ( tmp1 , D3-Sci1-4 ) ;
6764: LD_VAR 0 1
6768: PPUSH
6769: LD_STRING D3-Sci1-4
6771: PPUSH
6772: CALL_OW 88
// DialogueOff ;
6776: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6780: LD_INT 12
6782: PPUSH
6783: LD_INT 1
6785: PPUSH
6786: LD_INT 1
6788: PPUSH
6789: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6793: LD_INT 32
6795: PPUSH
6796: LD_INT 1
6798: PPUSH
6799: LD_INT 1
6801: PPUSH
6802: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6806: LD_INT 12
6808: PPUSH
6809: LD_INT 1
6811: PPUSH
6812: LD_INT 1
6814: PPUSH
6815: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6819: LD_INT 33
6821: PPUSH
6822: LD_INT 1
6824: PPUSH
6825: LD_INT 1
6827: PPUSH
6828: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6832: LD_STRING M2
6834: PPUSH
6835: CALL_OW 337
// wait ( 3 3$0 ) ;
6839: LD_INT 6300
6841: PPUSH
6842: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6846: LD_INT 35
6848: PPUSH
6849: CALL_OW 67
// until not InBattle ( 1 ) ;
6853: LD_INT 1
6855: PPUSH
6856: CALL_OW 463
6860: NOT
6861: IFFALSE 6846
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6863: LD_EXP 11
6867: PPUSH
6868: CALL_OW 302
6872: PUSH
6873: LD_EXP 17
6877: PPUSH
6878: CALL_OW 302
6882: AND
6883: IFFALSE 7052
// begin DialogueOn ;
6885: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6889: LD_EXP 11
6893: PPUSH
6894: LD_STRING D3a-Sim-1
6896: PPUSH
6897: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6901: LD_EXP 17
6905: PPUSH
6906: LD_STRING D3a-Sci1-1
6908: PPUSH
6909: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6913: LD_EXP 11
6917: PPUSH
6918: LD_STRING D3a-Sim-2
6920: PPUSH
6921: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6925: LD_EXP 17
6929: PPUSH
6930: LD_STRING D3a-Sci1-2
6932: PPUSH
6933: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6937: LD_EXP 11
6941: PPUSH
6942: LD_STRING D3a-Sim-3
6944: PPUSH
6945: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6949: LD_EXP 17
6953: PPUSH
6954: LD_STRING D3a-Sci1-3
6956: PPUSH
6957: CALL_OW 88
// if IsOK ( Joan ) then
6961: LD_EXP 13
6965: PPUSH
6966: CALL_OW 302
6970: IFFALSE 6986
// Say ( Simms , D3a-Sim-4 ) else
6972: LD_EXP 11
6976: PPUSH
6977: LD_STRING D3a-Sim-4
6979: PPUSH
6980: CALL_OW 88
6984: GO 6998
// Say ( Simms , D3a-Sim-4a ) ;
6986: LD_EXP 11
6990: PPUSH
6991: LD_STRING D3a-Sim-4a
6993: PPUSH
6994: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
6998: LD_EXP 17
7002: PPUSH
7003: LD_STRING D3a-Sci1-4
7005: PPUSH
7006: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7010: LD_EXP 11
7014: PPUSH
7015: LD_STRING D3a-Sim-5
7017: PPUSH
7018: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7022: LD_EXP 17
7026: PPUSH
7027: LD_STRING D3a-Sci1-5
7029: PPUSH
7030: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7034: LD_EXP 11
7038: PPUSH
7039: LD_STRING D3a-Sim-6
7041: PPUSH
7042: CALL_OW 88
// DialogueOff ;
7046: CALL_OW 7
// end else
7050: GO 7296
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
7052: LD_ADDR_VAR 0 3
7056: PUSH
7057: LD_INT 22
7059: PUSH
7060: LD_INT 1
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 25
7069: PUSH
7070: LD_INT 4
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: PPUSH
7081: CALL_OW 69
7085: PUSH
7086: LD_EXP 11
7090: PUSH
7091: LD_EXP 14
7095: PUSH
7096: EMPTY
7097: LIST
7098: LIST
7099: DIFF
7100: ST_TO_ADDR
// if tmp3 > 0 then
7101: LD_VAR 0 3
7105: PUSH
7106: LD_INT 0
7108: GREATER
7109: IFFALSE 7296
// begin DialogueOn ;
7111: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7115: LD_EXP 11
7119: PPUSH
7120: LD_STRING D3a-Sim-1
7122: PPUSH
7123: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7127: LD_VAR 0 3
7131: PUSH
7132: LD_INT 1
7134: ARRAY
7135: PPUSH
7136: LD_STRING D3a-Sci1-1
7138: PPUSH
7139: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7143: LD_EXP 11
7147: PPUSH
7148: LD_STRING D3a-Sim-2
7150: PPUSH
7151: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7155: LD_VAR 0 3
7159: PUSH
7160: LD_INT 1
7162: ARRAY
7163: PPUSH
7164: LD_STRING D3a-Sci1-2
7166: PPUSH
7167: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7171: LD_EXP 11
7175: PPUSH
7176: LD_STRING D3a-Sim-3
7178: PPUSH
7179: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7183: LD_VAR 0 3
7187: PUSH
7188: LD_INT 1
7190: ARRAY
7191: PPUSH
7192: LD_STRING D3a-Sci1-3
7194: PPUSH
7195: CALL_OW 88
// if IsOK ( Joan ) then
7199: LD_EXP 13
7203: PPUSH
7204: CALL_OW 302
7208: IFFALSE 7224
// Say ( Simms , D3a-Sim-4 ) else
7210: LD_EXP 11
7214: PPUSH
7215: LD_STRING D3a-Sim-4
7217: PPUSH
7218: CALL_OW 88
7222: GO 7236
// Say ( Simms , D3a-Sim-4a ) ;
7224: LD_EXP 11
7228: PPUSH
7229: LD_STRING D3a-Sim-4a
7231: PPUSH
7232: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7236: LD_VAR 0 3
7240: PUSH
7241: LD_INT 1
7243: ARRAY
7244: PPUSH
7245: LD_STRING D3a-Sci1-4
7247: PPUSH
7248: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7252: LD_EXP 11
7256: PPUSH
7257: LD_STRING D3a-Sim-5
7259: PPUSH
7260: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7264: LD_VAR 0 3
7268: PUSH
7269: LD_INT 1
7271: ARRAY
7272: PPUSH
7273: LD_STRING D3a-Sci1-5
7275: PPUSH
7276: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7280: LD_EXP 11
7284: PPUSH
7285: LD_STRING D3a-Sim-6
7287: PPUSH
7288: CALL_OW 88
// DialogueOff ;
7292: CALL_OW 7
// end ; end ; end ;
7296: PPOPN 3
7298: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7299: LD_EXP 29
7303: PUSH
7304: LD_INT 1
7306: EQUAL
7307: IFFALSE 7642
7309: GO 7311
7311: DISABLE
7312: LD_INT 0
7314: PPUSH
// begin wait ( 2 2$00 ) ;
7315: LD_INT 4200
7317: PPUSH
7318: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7322: LD_EXP 18
7326: PPUSH
7327: LD_STRING D4-FSol1-1
7329: PPUSH
7330: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7334: LD_STRING M3
7336: PPUSH
7337: CALL_OW 337
// PrepareRussians ;
7341: CALL 3604 0 0
// spawnRussians := true ;
7345: LD_ADDR_EXP 58
7349: PUSH
7350: LD_INT 1
7352: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7353: LD_ADDR_VAR 0 1
7357: PUSH
7358: LD_INT 1
7360: PPUSH
7361: LD_INT 100
7363: PPUSH
7364: CALL_OW 12
7368: ST_TO_ADDR
// if difficulty = 1 then
7369: LD_OWVAR 67
7373: PUSH
7374: LD_INT 1
7376: EQUAL
7377: IFFALSE 7460
// begin if rnd > 0 and rnd < 51 then
7379: LD_VAR 0 1
7383: PUSH
7384: LD_INT 0
7386: GREATER
7387: PUSH
7388: LD_VAR 0 1
7392: PUSH
7393: LD_INT 51
7395: LESS
7396: AND
7397: IFFALSE 7406
// BuildRussianBase ( 2 ) ;
7399: LD_INT 2
7401: PPUSH
7402: CALL 11748 0 1
// if rnd > 50 and rnd < 81 then
7406: LD_VAR 0 1
7410: PUSH
7411: LD_INT 50
7413: GREATER
7414: PUSH
7415: LD_VAR 0 1
7419: PUSH
7420: LD_INT 81
7422: LESS
7423: AND
7424: IFFALSE 7433
// BuildRussianBase ( 1 ) ;
7426: LD_INT 1
7428: PPUSH
7429: CALL 11748 0 1
// if rnd > 80 and rnd < 101 then
7433: LD_VAR 0 1
7437: PUSH
7438: LD_INT 80
7440: GREATER
7441: PUSH
7442: LD_VAR 0 1
7446: PUSH
7447: LD_INT 101
7449: LESS
7450: AND
7451: IFFALSE 7460
// BuildRussianBase ( 3 ) ;
7453: LD_INT 3
7455: PPUSH
7456: CALL 11748 0 1
// end ; if difficulty = 2 then
7460: LD_OWVAR 67
7464: PUSH
7465: LD_INT 2
7467: EQUAL
7468: IFFALSE 7551
// begin if rnd > 0 and rnd < 61 then
7470: LD_VAR 0 1
7474: PUSH
7475: LD_INT 0
7477: GREATER
7478: PUSH
7479: LD_VAR 0 1
7483: PUSH
7484: LD_INT 61
7486: LESS
7487: AND
7488: IFFALSE 7497
// BuildRussianBase ( 2 ) ;
7490: LD_INT 2
7492: PPUSH
7493: CALL 11748 0 1
// if rnd > 60 and rnd < 81 then
7497: LD_VAR 0 1
7501: PUSH
7502: LD_INT 60
7504: GREATER
7505: PUSH
7506: LD_VAR 0 1
7510: PUSH
7511: LD_INT 81
7513: LESS
7514: AND
7515: IFFALSE 7524
// BuildRussianBase ( 1 ) ;
7517: LD_INT 1
7519: PPUSH
7520: CALL 11748 0 1
// if rnd > 80 and rnd < 101 then
7524: LD_VAR 0 1
7528: PUSH
7529: LD_INT 80
7531: GREATER
7532: PUSH
7533: LD_VAR 0 1
7537: PUSH
7538: LD_INT 101
7540: LESS
7541: AND
7542: IFFALSE 7551
// BuildRussianBase ( 3 ) ;
7544: LD_INT 3
7546: PPUSH
7547: CALL 11748 0 1
// end ; if difficulty = 3 then
7551: LD_OWVAR 67
7555: PUSH
7556: LD_INT 3
7558: EQUAL
7559: IFFALSE 7642
// begin if rnd > 0 and rnd < 71 then
7561: LD_VAR 0 1
7565: PUSH
7566: LD_INT 0
7568: GREATER
7569: PUSH
7570: LD_VAR 0 1
7574: PUSH
7575: LD_INT 71
7577: LESS
7578: AND
7579: IFFALSE 7588
// BuildRussianBase ( 3 ) ;
7581: LD_INT 3
7583: PPUSH
7584: CALL 11748 0 1
// if rnd > 70 and rnd < 81 then
7588: LD_VAR 0 1
7592: PUSH
7593: LD_INT 70
7595: GREATER
7596: PUSH
7597: LD_VAR 0 1
7601: PUSH
7602: LD_INT 81
7604: LESS
7605: AND
7606: IFFALSE 7615
// BuildRussianBase ( 2 ) ;
7608: LD_INT 2
7610: PPUSH
7611: CALL 11748 0 1
// if rnd > 80 and rnd < 101 then
7615: LD_VAR 0 1
7619: PUSH
7620: LD_INT 80
7622: GREATER
7623: PUSH
7624: LD_VAR 0 1
7628: PUSH
7629: LD_INT 101
7631: LESS
7632: AND
7633: IFFALSE 7642
// BuildRussianBase ( 1 ) ;
7635: LD_INT 1
7637: PPUSH
7638: CALL 11748 0 1
// end ; end ;
7642: PPOPN 1
7644: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7645: LD_INT 54
7647: PPUSH
7648: LD_INT 1
7650: PPUSH
7651: CALL_OW 321
7655: PUSH
7656: LD_INT 2
7658: EQUAL
7659: PUSH
7660: LD_INT 21
7662: PPUSH
7663: LD_INT 1
7665: PPUSH
7666: CALL_OW 321
7670: PUSH
7671: LD_INT 2
7673: EQUAL
7674: OR
7675: PUSH
7676: LD_INT 22
7678: PPUSH
7679: LD_INT 1
7681: PPUSH
7682: CALL_OW 321
7686: PUSH
7687: LD_INT 2
7689: EQUAL
7690: OR
7691: IFFALSE 7993
7693: GO 7695
7695: DISABLE
7696: LD_INT 0
7698: PPUSH
7699: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7700: LD_EXP 17
7704: PPUSH
7705: CALL_OW 302
7709: IFFALSE 7723
// tmp := DeltaDoctor else
7711: LD_ADDR_VAR 0 2
7715: PUSH
7716: LD_EXP 17
7720: ST_TO_ADDR
7721: GO 7733
// tmp := Denis ;
7723: LD_ADDR_VAR 0 2
7727: PUSH
7728: LD_EXP 12
7732: ST_TO_ADDR
// if tmp then
7733: LD_VAR 0 2
7737: IFFALSE 7831
// begin DialogueOn ;
7739: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7743: LD_EXP 1
7747: PPUSH
7748: LD_STRING D6-JMM-1
7750: PPUSH
7751: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7755: LD_VAR 0 2
7759: PPUSH
7760: LD_STRING D6-Sci1-1
7762: PPUSH
7763: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7767: LD_EXP 1
7771: PPUSH
7772: LD_STRING D6-JMM-2
7774: PPUSH
7775: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7779: LD_VAR 0 2
7783: PPUSH
7784: LD_STRING D6-Sci1-2
7786: PPUSH
7787: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7791: LD_EXP 1
7795: PPUSH
7796: LD_STRING D6-JMM-3
7798: PPUSH
7799: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7803: LD_VAR 0 2
7807: PPUSH
7808: LD_STRING D6-Sci1-3
7810: PPUSH
7811: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7815: LD_EXP 1
7819: PPUSH
7820: LD_STRING D6-JMM-4
7822: PPUSH
7823: CALL_OW 88
// DialogueOff ;
7827: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7831: LD_INT 1050
7833: PPUSH
7834: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7838: LD_EXP 49
7842: PUSH
7843: LD_INT 0
7845: EQUAL
7846: PUSH
7847: LD_EXP 14
7851: PPUSH
7852: CALL_OW 302
7856: AND
7857: IFFALSE 7915
// begin DialogueOn ;
7859: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7863: LD_EXP 27
7867: PPUSH
7868: LD_STRING D5-Ar1-1
7870: PPUSH
7871: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7875: LD_EXP 26
7879: PPUSH
7880: LD_STRING D5-Diet-1
7882: PPUSH
7883: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7887: LD_EXP 27
7891: PPUSH
7892: LD_STRING D5-Ar1-2
7894: PPUSH
7895: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7899: LD_EXP 26
7903: PPUSH
7904: LD_STRING D5-Diet-2
7906: PPUSH
7907: CALL_OW 88
// DialogueOff ;
7911: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7915: LD_INT 35
7917: PPUSH
7918: CALL_OW 67
// until tick > 10 10$00 ;
7922: LD_OWVAR 1
7926: PUSH
7927: LD_INT 21000
7929: GREATER
7930: IFFALSE 7915
// wait ( 1 1$30 ) ;
7932: LD_INT 3150
7934: PPUSH
7935: CALL_OW 67
// if arabianTrait = 0 then
7939: LD_EXP 49
7943: PUSH
7944: LD_INT 0
7946: EQUAL
7947: IFFALSE 7993
// begin arabianTrait = 1 ;
7949: LD_ADDR_EXP 49
7953: PUSH
7954: LD_INT 1
7956: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7957: LD_INT 2
7959: PPUSH
7960: LD_INT 3
7962: PPUSH
7963: LD_INT 1
7965: PPUSH
7966: LD_INT 1
7968: PPUSH
7969: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7973: LD_INT 2
7975: PPUSH
7976: LD_INT 6
7978: PPUSH
7979: LD_INT 1
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 80
// PrepareArabianTrait ;
7989: CALL 7996 0 0
// end ; end ;
7993: PPOPN 2
7995: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
7996: LD_INT 0
7998: PPUSH
7999: PPUSH
8000: PPUSH
8001: PPUSH
8002: PPUSH
8003: PPUSH
8004: PPUSH
8005: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8006: LD_ADDR_VAR 0 6
8010: PUSH
8011: LD_INT 22
8013: PUSH
8014: LD_INT 2
8016: PUSH
8017: EMPTY
8018: LIST
8019: LIST
8020: PUSH
8021: LD_INT 2
8023: PUSH
8024: LD_INT 25
8026: PUSH
8027: LD_INT 4
8029: PUSH
8030: EMPTY
8031: LIST
8032: LIST
8033: PUSH
8034: LD_INT 25
8036: PUSH
8037: LD_INT 2
8039: PUSH
8040: EMPTY
8041: LIST
8042: LIST
8043: PUSH
8044: LD_INT 25
8046: PUSH
8047: LD_INT 3
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PPUSH
8064: CALL_OW 69
8068: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8069: LD_ADDR_VAR 0 5
8073: PUSH
8074: LD_INT 22
8076: PUSH
8077: LD_INT 2
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PUSH
8084: LD_INT 21
8086: PUSH
8087: LD_INT 1
8089: PUSH
8090: EMPTY
8091: LIST
8092: LIST
8093: PUSH
8094: LD_INT 2
8096: PUSH
8097: LD_INT 25
8099: PUSH
8100: LD_INT 1
8102: PUSH
8103: EMPTY
8104: LIST
8105: LIST
8106: PUSH
8107: LD_INT 25
8109: PUSH
8110: LD_INT 8
8112: PUSH
8113: EMPTY
8114: LIST
8115: LIST
8116: PUSH
8117: LD_INT 25
8119: PUSH
8120: LD_INT 15
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: EMPTY
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: LIST
8137: PPUSH
8138: CALL_OW 69
8142: PUSH
8143: LD_EXP 26
8147: PUSH
8148: EMPTY
8149: LIST
8150: DIFF
8151: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8152: LD_ADDR_VAR 0 7
8156: PUSH
8157: LD_INT 22
8159: PUSH
8160: LD_INT 2
8162: PUSH
8163: EMPTY
8164: LIST
8165: LIST
8166: PUSH
8167: LD_INT 30
8169: PUSH
8170: LD_INT 5
8172: PUSH
8173: EMPTY
8174: LIST
8175: LIST
8176: PUSH
8177: EMPTY
8178: LIST
8179: LIST
8180: PPUSH
8181: CALL_OW 69
8185: PUSH
8186: LD_INT 1
8188: ARRAY
8189: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8190: LD_VAR 0 6
8194: PPUSH
8195: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8199: LD_VAR 0 5
8203: PPUSH
8204: CALL_OW 122
// wait ( 0 0$3 ) ;
8208: LD_INT 105
8210: PPUSH
8211: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8215: LD_VAR 0 6
8219: PPUSH
8220: LD_VAR 0 7
8224: PPUSH
8225: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8229: LD_VAR 0 6
8233: PPUSH
8234: LD_INT 1
8236: PUSH
8237: LD_INT 8
8239: PUSH
8240: EMPTY
8241: LIST
8242: LIST
8243: PUSH
8244: LD_INT 1
8246: PPUSH
8247: LD_INT 2
8249: PPUSH
8250: CALL_OW 12
8254: ARRAY
8255: PPUSH
8256: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8260: LD_VAR 0 6
8264: PPUSH
8265: CALL_OW 182
// wait ( 0 0$1 ) ;
8269: LD_INT 35
8271: PPUSH
8272: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8276: LD_INT 76
8278: PPUSH
8279: LD_INT 19
8281: PPUSH
8282: CALL_OW 84
// DialogueOn ;
8286: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8290: LD_INT 22
8292: PUSH
8293: LD_INT 1
8295: PUSH
8296: EMPTY
8297: LIST
8298: LIST
8299: PUSH
8300: LD_INT 26
8302: PUSH
8303: LD_INT 1
8305: PUSH
8306: EMPTY
8307: LIST
8308: LIST
8309: PUSH
8310: LD_INT 2
8312: PUSH
8313: LD_INT 25
8315: PUSH
8316: LD_INT 1
8318: PUSH
8319: EMPTY
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 25
8325: PUSH
8326: LD_INT 2
8328: PUSH
8329: EMPTY
8330: LIST
8331: LIST
8332: PUSH
8333: LD_INT 25
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 4
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 5
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: EMPTY
8364: LIST
8365: LIST
8366: LIST
8367: LIST
8368: LIST
8369: LIST
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: PPUSH
8376: CALL_OW 69
8380: PPUSH
8381: LD_STRING D8-Sol1-1
8383: PPUSH
8384: LD_STRING D8-Sol1-1
8386: PPUSH
8387: CALL 11090 0 3
// if IsOK ( DeltaDoctor ) then
8391: LD_EXP 17
8395: PPUSH
8396: CALL_OW 302
8400: IFFALSE 8416
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8402: LD_EXP 17
8406: PPUSH
8407: LD_STRING D8-Sci1-1
8409: PPUSH
8410: CALL_OW 88
8414: GO 8517
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8416: LD_INT 22
8418: PUSH
8419: LD_INT 1
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 26
8428: PUSH
8429: LD_INT 1
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 2
8438: PUSH
8439: LD_INT 25
8441: PUSH
8442: LD_INT 1
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 25
8451: PUSH
8452: LD_INT 2
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 25
8461: PUSH
8462: LD_INT 3
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 25
8471: PUSH
8472: LD_INT 4
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 25
8481: PUSH
8482: LD_INT 5
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: PUSH
8497: EMPTY
8498: LIST
8499: LIST
8500: LIST
8501: PPUSH
8502: CALL_OW 69
8506: PPUSH
8507: LD_STRING D8-Sol1-1
8509: PPUSH
8510: LD_STRING D8-Sol1-1
8512: PPUSH
8513: CALL 11090 0 3
// Say ( JMM , D8-JMM-1 ) ;
8517: LD_EXP 1
8521: PPUSH
8522: LD_STRING D8-JMM-1
8524: PPUSH
8525: CALL_OW 88
// DialogueOff ;
8529: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8533: LD_INT 2
8535: PPUSH
8536: LD_INT 2
8538: PPUSH
8539: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8543: LD_INT 1
8545: PPUSH
8546: LD_INT 2
8548: PPUSH
8549: LD_INT 2
8551: PPUSH
8552: LD_INT 1
8554: PPUSH
8555: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8559: LD_INT 3
8561: PPUSH
8562: LD_INT 2
8564: PPUSH
8565: LD_INT 1
8567: PPUSH
8568: LD_INT 1
8570: PPUSH
8571: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8575: LD_STRING M4
8577: PPUSH
8578: CALL_OW 337
// wait ( 0 0$1 ) ;
8582: LD_INT 35
8584: PPUSH
8585: CALL_OW 67
// if IsLive ( Khatam ) then
8589: LD_EXP 14
8593: PPUSH
8594: CALL_OW 300
8598: IFFALSE 8612
// DoNotAttack ( 2 , Khatam ) ;
8600: LD_INT 2
8602: PPUSH
8603: LD_EXP 14
8607: PPUSH
8608: CALL_OW 471
// wait ( 0 0$1 ) ;
8612: LD_INT 35
8614: PPUSH
8615: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8619: LD_ADDR_VAR 0 8
8623: PUSH
8624: LD_INT 22
8626: PUSH
8627: LD_INT 1
8629: PUSH
8630: EMPTY
8631: LIST
8632: LIST
8633: PUSH
8634: LD_INT 21
8636: PUSH
8637: LD_INT 3
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: EMPTY
8645: LIST
8646: LIST
8647: PPUSH
8648: CALL_OW 69
8652: PPUSH
8653: LD_VAR 0 5
8657: PUSH
8658: LD_INT 1
8660: ARRAY
8661: PPUSH
8662: CALL_OW 74
8666: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8667: LD_VAR 0 5
8671: PPUSH
8672: LD_INT 25
8674: PUSH
8675: LD_INT 1
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PPUSH
8682: CALL_OW 72
8686: PUSH
8687: LD_INT 1
8689: ARRAY
8690: PPUSH
8691: LD_VAR 0 8
8695: PPUSH
8696: CALL_OW 250
8700: PPUSH
8701: LD_VAR 0 8
8705: PPUSH
8706: CALL_OW 251
8710: PPUSH
8711: LD_VAR 0 8
8715: PPUSH
8716: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8720: LD_VAR 0 5
8724: PPUSH
8725: LD_INT 84
8727: PPUSH
8728: LD_INT 22
8730: PPUSH
8731: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8735: LD_VAR 0 5
8739: PPUSH
8740: LD_INT 82
8742: PPUSH
8743: LD_INT 5
8745: PPUSH
8746: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8750: LD_VAR 0 5
8754: PPUSH
8755: LD_INT 95
8757: PPUSH
8758: LD_INT 12
8760: PPUSH
8761: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8765: LD_VAR 0 5
8769: PPUSH
8770: LD_INT 102
8772: PPUSH
8773: LD_INT 11
8775: PPUSH
8776: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8780: LD_VAR 0 5
8784: PPUSH
8785: LD_INT 116
8787: PPUSH
8788: LD_INT 15
8790: PPUSH
8791: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8795: LD_VAR 0 5
8799: PPUSH
8800: LD_INT 140
8802: PPUSH
8803: LD_INT 25
8805: PPUSH
8806: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8810: LD_VAR 0 5
8814: PPUSH
8815: LD_INT 160
8817: PPUSH
8818: LD_INT 56
8820: PPUSH
8821: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8825: LD_ADDR_VAR 0 5
8829: PUSH
8830: LD_INT 22
8832: PUSH
8833: LD_INT 2
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: PUSH
8840: LD_INT 21
8842: PUSH
8843: LD_INT 1
8845: PUSH
8846: EMPTY
8847: LIST
8848: LIST
8849: PUSH
8850: LD_INT 2
8852: PUSH
8853: LD_INT 25
8855: PUSH
8856: LD_INT 1
8858: PUSH
8859: EMPTY
8860: LIST
8861: LIST
8862: PUSH
8863: LD_INT 25
8865: PUSH
8866: LD_INT 8
8868: PUSH
8869: EMPTY
8870: LIST
8871: LIST
8872: PUSH
8873: LD_INT 25
8875: PUSH
8876: LD_INT 15
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: EMPTY
8884: LIST
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: LIST
8893: PPUSH
8894: CALL_OW 69
8898: PUSH
8899: LD_EXP 26
8903: PUSH
8904: EMPTY
8905: LIST
8906: DIFF
8907: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8908: LD_ADDR_VAR 0 6
8912: PUSH
8913: LD_INT 22
8915: PUSH
8916: LD_INT 2
8918: PUSH
8919: EMPTY
8920: LIST
8921: LIST
8922: PUSH
8923: LD_INT 21
8925: PUSH
8926: LD_INT 1
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: PUSH
8933: LD_INT 2
8935: PUSH
8936: LD_INT 25
8938: PUSH
8939: LD_INT 2
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 25
8948: PUSH
8949: LD_INT 3
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 4
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 12
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 16
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: EMPTY
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: LIST
8998: PPUSH
8999: CALL_OW 69
9003: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9004: LD_ADDR_VAR 0 6
9008: PUSH
9009: LD_VAR 0 6
9013: PUSH
9014: LD_EXP 26
9018: ADD
9019: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9020: LD_VAR 0 5
9024: PPUSH
9025: LD_INT 189
9027: PPUSH
9028: LD_INT 79
9030: PPUSH
9031: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9035: LD_VAR 0 5
9039: PPUSH
9040: LD_INT 25
9042: PUSH
9043: LD_INT 15
9045: PUSH
9046: EMPTY
9047: LIST
9048: LIST
9049: PPUSH
9050: CALL_OW 72
9054: IFFALSE 9095
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9056: LD_VAR 0 5
9060: PPUSH
9061: LD_INT 25
9063: PUSH
9064: LD_INT 15
9066: PUSH
9067: EMPTY
9068: LIST
9069: LIST
9070: PPUSH
9071: CALL_OW 72
9075: PUSH
9076: LD_INT 1
9078: ARRAY
9079: PPUSH
9080: LD_INT 84
9082: PPUSH
9083: LD_INT 21
9085: PPUSH
9086: CALL_OW 428
9090: PPUSH
9091: CALL_OW 120
// wait ( 0 0$4 ) ;
9095: LD_INT 140
9097: PPUSH
9098: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9102: LD_VAR 0 6
9106: PPUSH
9107: LD_INT 88
9109: PPUSH
9110: LD_INT 8
9112: PPUSH
9113: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9117: LD_VAR 0 6
9121: PPUSH
9122: LD_INT 102
9124: PPUSH
9125: LD_INT 10
9127: PPUSH
9128: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9132: LD_VAR 0 6
9136: PPUSH
9137: LD_INT 116
9139: PPUSH
9140: LD_INT 15
9142: PPUSH
9143: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9147: LD_VAR 0 6
9151: PPUSH
9152: LD_INT 140
9154: PPUSH
9155: LD_INT 25
9157: PPUSH
9158: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9162: LD_VAR 0 6
9166: PPUSH
9167: LD_INT 160
9169: PPUSH
9170: LD_INT 56
9172: PPUSH
9173: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9177: LD_VAR 0 6
9181: PPUSH
9182: LD_INT 189
9184: PPUSH
9185: LD_INT 79
9187: PPUSH
9188: CALL_OW 171
// arabianAttackersAI = 1 ;
9192: LD_ADDR_EXP 46
9196: PUSH
9197: LD_INT 1
9199: ST_TO_ADDR
// if IsOk ( Gary ) then
9200: LD_EXP 10
9204: PPUSH
9205: CALL_OW 302
9209: IFFALSE 9223
// Say ( Gary , D8a-Gary-1 ) ;
9211: LD_EXP 10
9215: PPUSH
9216: LD_STRING D8a-Gary-1
9218: PPUSH
9219: CALL_OW 88
// wait ( 0 0$5 ) ;
9223: LD_INT 175
9225: PPUSH
9226: CALL_OW 67
// if IsOK ( Khatam ) then
9230: LD_EXP 14
9234: PPUSH
9235: CALL_OW 302
9239: IFFALSE 9775
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9241: LD_ADDR_VAR 0 3
9245: PUSH
9246: LD_INT 22
9248: PUSH
9249: LD_INT 1
9251: PUSH
9252: EMPTY
9253: LIST
9254: LIST
9255: PUSH
9256: LD_INT 2
9258: PUSH
9259: LD_INT 25
9261: PUSH
9262: LD_INT 1
9264: PUSH
9265: EMPTY
9266: LIST
9267: LIST
9268: PUSH
9269: LD_INT 25
9271: PUSH
9272: LD_INT 2
9274: PUSH
9275: EMPTY
9276: LIST
9277: LIST
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 3
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 25
9291: PUSH
9292: LD_INT 4
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 25
9301: PUSH
9302: LD_INT 5
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 25
9311: PUSH
9312: LD_INT 8
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: EMPTY
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: EMPTY
9329: LIST
9330: LIST
9331: PPUSH
9332: CALL_OW 69
9336: PUSH
9337: LD_EXP 1
9341: PUSH
9342: LD_EXP 2
9346: PUSH
9347: LD_EXP 3
9351: PUSH
9352: LD_EXP 4
9356: PUSH
9357: LD_EXP 5
9361: PUSH
9362: LD_EXP 6
9366: PUSH
9367: LD_EXP 7
9371: PUSH
9372: LD_EXP 8
9376: PUSH
9377: LD_EXP 9
9381: PUSH
9382: LD_EXP 10
9386: PUSH
9387: LD_EXP 11
9391: PUSH
9392: LD_EXP 12
9396: PUSH
9397: LD_EXP 13
9401: PUSH
9402: LD_EXP 14
9406: PUSH
9407: LD_EXP 15
9411: PUSH
9412: LD_EXP 16
9416: PUSH
9417: LD_EXP 17
9421: PUSH
9422: LD_EXP 19
9426: PUSH
9427: LD_EXP 24
9431: PUSH
9432: EMPTY
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: LIST
9439: LIST
9440: LIST
9441: LIST
9442: LIST
9443: LIST
9444: LIST
9445: LIST
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: LIST
9451: LIST
9452: DIFF
9453: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9454: LD_EXP 14
9458: PPUSH
9459: LD_INT 8
9461: PPUSH
9462: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9466: LD_EXP 14
9470: PPUSH
9471: CALL_OW 122
// wait ( 0 0$1 ) ;
9475: LD_INT 35
9477: PPUSH
9478: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9482: LD_EXP 14
9486: PPUSH
9487: CALL_OW 121
// wait ( 0 0$1 ) ;
9491: LD_INT 35
9493: PPUSH
9494: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9498: LD_EXP 14
9502: PPUSH
9503: LD_INT 7
9505: PPUSH
9506: CALL_OW 113
// if not tmp then
9510: LD_VAR 0 3
9514: NOT
9515: IFFALSE 9519
// exit ;
9517: GO 9775
// DialogueOn ;
9519: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9523: LD_VAR 0 3
9527: PUSH
9528: LD_INT 1
9530: ARRAY
9531: PPUSH
9532: CALL_OW 258
9536: PUSH
9537: LD_INT 1
9539: EQUAL
9540: IFFALSE 9560
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9542: LD_VAR 0 3
9546: PUSH
9547: LD_INT 1
9549: ARRAY
9550: PPUSH
9551: LD_STRING D8b-Sol1-1
9553: PPUSH
9554: CALL_OW 88
9558: GO 9576
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9560: LD_VAR 0 3
9564: PUSH
9565: LD_INT 1
9567: ARRAY
9568: PPUSH
9569: LD_STRING D8b-FSol1-1
9571: PPUSH
9572: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9576: LD_EXP 14
9580: PPUSH
9581: LD_STRING D8b-Khat-1
9583: PPUSH
9584: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9588: LD_VAR 0 3
9592: PUSH
9593: LD_INT 1
9595: ARRAY
9596: PPUSH
9597: CALL_OW 258
9601: PUSH
9602: LD_INT 1
9604: EQUAL
9605: IFFALSE 9625
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9607: LD_VAR 0 3
9611: PUSH
9612: LD_INT 1
9614: ARRAY
9615: PPUSH
9616: LD_STRING D8b-Sol1-2
9618: PPUSH
9619: CALL_OW 88
9623: GO 9641
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9625: LD_VAR 0 3
9629: PUSH
9630: LD_INT 1
9632: ARRAY
9633: PPUSH
9634: LD_STRING D8b-FSol1-2
9636: PPUSH
9637: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9641: LD_EXP 14
9645: PPUSH
9646: LD_STRING D8b-Khat-2
9648: PPUSH
9649: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9653: LD_VAR 0 3
9657: PUSH
9658: LD_INT 1
9660: ARRAY
9661: PPUSH
9662: CALL_OW 258
9666: PUSH
9667: LD_INT 1
9669: EQUAL
9670: IFFALSE 9690
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9672: LD_VAR 0 3
9676: PUSH
9677: LD_INT 1
9679: ARRAY
9680: PPUSH
9681: LD_STRING D8b-Sol1-3
9683: PPUSH
9684: CALL_OW 88
9688: GO 9706
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9690: LD_VAR 0 3
9694: PUSH
9695: LD_INT 1
9697: ARRAY
9698: PPUSH
9699: LD_STRING D8b-FSol1-3
9701: PPUSH
9702: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9706: LD_EXP 14
9710: PPUSH
9711: LD_STRING D8b-Khat-3
9713: PPUSH
9714: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9718: LD_VAR 0 3
9722: PUSH
9723: LD_INT 1
9725: ARRAY
9726: PPUSH
9727: CALL_OW 258
9731: PUSH
9732: LD_INT 1
9734: EQUAL
9735: IFFALSE 9755
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9737: LD_VAR 0 3
9741: PUSH
9742: LD_INT 1
9744: ARRAY
9745: PPUSH
9746: LD_STRING D8b-Sol1-4
9748: PPUSH
9749: CALL_OW 88
9753: GO 9771
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9755: LD_VAR 0 3
9759: PUSH
9760: LD_INT 1
9762: ARRAY
9763: PPUSH
9764: LD_STRING D8b-FSol1-4
9766: PPUSH
9767: CALL_OW 88
// DialogueOff ;
9771: CALL_OW 7
// end ; end ;
9775: LD_VAR 0 1
9779: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9780: LD_INT 7
9782: PPUSH
9783: LD_INT 22
9785: PUSH
9786: LD_INT 2
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PPUSH
9793: CALL_OW 70
9797: PUSH
9798: LD_INT 0
9800: GREATER
9801: PUSH
9802: LD_EXP 14
9806: PPUSH
9807: LD_INT 7
9809: PPUSH
9810: CALL_OW 308
9814: OR
9815: IFFALSE 10022
9817: GO 9819
9819: DISABLE
9820: LD_INT 0
9822: PPUSH
// begin enable ;
9823: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9824: LD_ADDR_VAR 0 1
9828: PUSH
9829: LD_INT 7
9831: PPUSH
9832: LD_INT 22
9834: PUSH
9835: LD_INT 2
9837: PUSH
9838: EMPTY
9839: LIST
9840: LIST
9841: PPUSH
9842: CALL_OW 70
9846: PUSH
9847: FOR_IN
9848: IFFALSE 9989
// begin if GetClass ( i ) = 4 then
9850: LD_VAR 0 1
9854: PPUSH
9855: CALL_OW 257
9859: PUSH
9860: LD_INT 4
9862: EQUAL
9863: IFFALSE 9875
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9865: LD_INT 1
9867: PPUSH
9868: LD_STRING 10_ScientistsEscape_1
9870: PPUSH
9871: CALL_OW 39
// if i = Dietrich then
9875: LD_VAR 0 1
9879: PUSH
9880: LD_EXP 26
9884: EQUAL
9885: IFFALSE 9895
// GensherStatus = 1 ;
9887: LD_ADDR_EXP 52
9891: PUSH
9892: LD_INT 1
9894: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9895: LD_VAR 0 1
9899: PPUSH
9900: CALL_OW 257
9904: PUSH
9905: LD_INT 1
9907: EQUAL
9908: PUSH
9909: LD_VAR 0 1
9913: PPUSH
9914: CALL_OW 257
9918: PUSH
9919: LD_INT 2
9921: EQUAL
9922: OR
9923: PUSH
9924: LD_VAR 0 1
9928: PPUSH
9929: CALL_OW 257
9933: PUSH
9934: LD_INT 3
9936: EQUAL
9937: OR
9938: PUSH
9939: LD_VAR 0 1
9943: PPUSH
9944: CALL_OW 257
9948: PUSH
9949: LD_INT 4
9951: EQUAL
9952: OR
9953: PUSH
9954: LD_VAR 0 1
9958: PPUSH
9959: CALL_OW 257
9963: PUSH
9964: LD_INT 8
9966: EQUAL
9967: OR
9968: IFFALSE 9978
// arabianEscape = 1 ;
9970: LD_ADDR_EXP 47
9974: PUSH
9975: LD_INT 1
9977: ST_TO_ADDR
// RemoveUnit ( i ) ;
9978: LD_VAR 0 1
9982: PPUSH
9983: CALL_OW 64
// end ;
9987: GO 9847
9989: POP
9990: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
9991: LD_EXP 14
9995: PPUSH
9996: LD_INT 7
9998: PPUSH
9999: CALL_OW 308
10003: IFFALSE 10022
// begin KhatamStatus = 1 ;
10005: LD_ADDR_EXP 53
10009: PUSH
10010: LD_INT 1
10012: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10013: LD_EXP 14
10017: PPUSH
10018: CALL_OW 64
// end ; end ;
10022: PPOPN 1
10024: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10025: LD_INT 22
10027: PUSH
10028: LD_INT 2
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: PUSH
10035: LD_INT 21
10037: PUSH
10038: LD_INT 1
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: PPUSH
10049: CALL_OW 69
10053: PUSH
10054: LD_INT 0
10056: EQUAL
10057: PUSH
10058: LD_INT 22
10060: PUSH
10061: LD_INT 4
10063: PUSH
10064: EMPTY
10065: LIST
10066: LIST
10067: PUSH
10068: LD_INT 21
10070: PUSH
10071: LD_INT 1
10073: PUSH
10074: EMPTY
10075: LIST
10076: LIST
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: PPUSH
10082: CALL_OW 69
10086: PUSH
10087: LD_INT 0
10089: EQUAL
10090: AND
10091: IFFALSE 10104
10093: GO 10095
10095: DISABLE
// arabianDefeated = 1 ;
10096: LD_ADDR_EXP 48
10100: PUSH
10101: LD_INT 1
10103: ST_TO_ADDR
10104: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10105: LD_INT 54
10107: PPUSH
10108: LD_INT 1
10110: PPUSH
10111: CALL_OW 321
10115: PUSH
10116: LD_INT 2
10118: EQUAL
10119: PUSH
10120: LD_INT 55
10122: PPUSH
10123: LD_INT 1
10125: PPUSH
10126: CALL_OW 321
10130: PUSH
10131: LD_INT 2
10133: EQUAL
10134: AND
10135: PUSH
10136: LD_INT 21
10138: PPUSH
10139: LD_INT 1
10141: PPUSH
10142: CALL_OW 321
10146: PUSH
10147: LD_INT 2
10149: EQUAL
10150: AND
10151: PUSH
10152: LD_INT 22
10154: PPUSH
10155: LD_INT 1
10157: PPUSH
10158: CALL_OW 321
10162: PUSH
10163: LD_INT 2
10165: EQUAL
10166: AND
10167: PUSH
10168: LD_INT 12
10170: PPUSH
10171: LD_INT 1
10173: PPUSH
10174: CALL_OW 321
10178: PUSH
10179: LD_INT 2
10181: EQUAL
10182: AND
10183: PUSH
10184: LD_INT 32
10186: PPUSH
10187: LD_INT 1
10189: PPUSH
10190: CALL_OW 321
10194: PUSH
10195: LD_INT 2
10197: EQUAL
10198: AND
10199: PUSH
10200: LD_EXP 63
10204: PUSH
10205: LD_INT 0
10207: EQUAL
10208: AND
10209: PUSH
10210: LD_EXP 49
10214: PUSH
10215: LD_INT 0
10217: EQUAL
10218: AND
10219: PUSH
10220: LD_OWVAR 1
10224: PUSH
10225: LD_INT 31500
10227: GREATEREQUAL
10228: AND
10229: IFFALSE 10246
10231: GO 10233
10233: DISABLE
// begin arabianTrait = 1 ;
10234: LD_ADDR_EXP 49
10238: PUSH
10239: LD_INT 1
10241: ST_TO_ADDR
// PrepareArabianTrait ;
10242: CALL 7996 0 0
// end ;
10246: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10247: LD_EXP 29
10251: PUSH
10252: LD_STRING 02_mikhailStatus_1
10254: PPUSH
10255: LD_INT 0
10257: PPUSH
10258: CALL_OW 30
10262: PUSH
10263: LD_INT 1
10265: EQUAL
10266: AND
10267: PUSH
10268: LD_INT 22
10270: PUSH
10271: LD_INT 5
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: PPUSH
10278: CALL_OW 69
10282: PUSH
10283: LD_INT 0
10285: EQUAL
10286: AND
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_INT 2
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PUSH
10298: LD_INT 21
10300: PUSH
10301: LD_INT 1
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: PPUSH
10312: CALL_OW 69
10316: PUSH
10317: LD_INT 0
10319: EQUAL
10320: PUSH
10321: LD_EXP 49
10325: PUSH
10326: LD_INT 0
10328: EQUAL
10329: OR
10330: AND
10331: IFFALSE 10340
10333: GO 10335
10335: DISABLE
// PrepareCornell ;
10336: CALL 3434 0 0
10340: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10341: LD_INT 22
10343: PUSH
10344: LD_INT 1
10346: PUSH
10347: EMPTY
10348: LIST
10349: LIST
10350: PPUSH
10351: CALL_OW 69
10355: PPUSH
10356: LD_EXP 19
10360: PPUSH
10361: CALL_OW 74
10365: PPUSH
10366: LD_EXP 19
10370: PPUSH
10371: CALL_OW 296
10375: PUSH
10376: LD_INT 9
10378: LESS
10379: IFFALSE 10600
10381: GO 10383
10383: DISABLE
// begin InGameOn ;
10384: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10388: LD_EXP 19
10392: PPUSH
10393: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10397: LD_EXP 19
10401: PPUSH
10402: LD_STRING D7-Corn-1
10404: PPUSH
10405: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10409: LD_INT 22
10411: PUSH
10412: LD_INT 1
10414: PUSH
10415: EMPTY
10416: LIST
10417: LIST
10418: PUSH
10419: LD_INT 2
10421: PUSH
10422: LD_INT 25
10424: PUSH
10425: LD_INT 1
10427: PUSH
10428: EMPTY
10429: LIST
10430: LIST
10431: PUSH
10432: LD_INT 25
10434: PUSH
10435: LD_INT 2
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: PUSH
10442: LD_INT 25
10444: PUSH
10445: LD_INT 3
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 25
10454: PUSH
10455: LD_INT 4
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: LD_INT 5
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: EMPTY
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: LIST
10478: LIST
10479: PUSH
10480: EMPTY
10481: LIST
10482: LIST
10483: PPUSH
10484: CALL_OW 69
10488: PPUSH
10489: LD_STRING D7-Sol1-1
10491: PPUSH
10492: LD_STRING D7-FSol1-1
10494: PPUSH
10495: CALL 11090 0 3
// CenterNowOnUnits ( Cornell ) ;
10499: LD_EXP 19
10503: PPUSH
10504: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10508: LD_EXP 19
10512: PPUSH
10513: LD_STRING D7-Corn-2
10515: PPUSH
10516: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10520: LD_EXP 1
10524: PPUSH
10525: LD_STRING D7-JMM-2
10527: PPUSH
10528: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10532: LD_EXP 19
10536: PPUSH
10537: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10541: LD_EXP 19
10545: PPUSH
10546: LD_STRING D7-Corn-3
10548: PPUSH
10549: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10553: LD_EXP 19
10557: PPUSH
10558: LD_INT 250
10560: PPUSH
10561: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10565: LD_EXP 19
10569: PPUSH
10570: LD_INT 1
10572: PPUSH
10573: CALL_OW 235
// wait ( 0 0$1 ) ;
10577: LD_INT 35
10579: PPUSH
10580: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10584: LD_EXP 1
10588: PPUSH
10589: LD_STRING D7-JMM-3
10591: PPUSH
10592: CALL_OW 88
// InGameOff ;
10596: CALL_OW 9
// end ;
10600: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10601: LD_EXP 19
10605: PPUSH
10606: CALL_OW 255
10610: PUSH
10611: LD_INT 1
10613: EQUAL
10614: PUSH
10615: LD_EXP 19
10619: PPUSH
10620: CALL_OW 256
10624: PUSH
10625: LD_INT 350
10627: GREATER
10628: AND
10629: IFFALSE 10822
10631: GO 10633
10633: DISABLE
// begin DialogueOn ;
10634: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10638: LD_EXP 1
10642: PPUSH
10643: LD_STRING D7a-JMM-1
10645: PPUSH
10646: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10650: LD_EXP 19
10654: PPUSH
10655: LD_STRING D7a-Corn-1
10657: PPUSH
10658: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10662: LD_EXP 1
10666: PPUSH
10667: LD_STRING D7a-JMM-2
10669: PPUSH
10670: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10674: LD_EXP 19
10678: PPUSH
10679: LD_STRING D7a-Corn-2
10681: PPUSH
10682: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10686: LD_EXP 1
10690: PPUSH
10691: LD_STRING D7a-JMM-3
10693: PPUSH
10694: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10698: LD_EXP 19
10702: PPUSH
10703: LD_STRING D7a-Corn-3
10705: PPUSH
10706: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10710: LD_EXP 1
10714: PPUSH
10715: LD_STRING D7a-JMM-4
10717: PPUSH
10718: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10722: LD_EXP 19
10726: PPUSH
10727: LD_STRING D7a-Corn-4
10729: PPUSH
10730: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10734: LD_EXP 1
10738: PPUSH
10739: LD_STRING D7a-JMM-5
10741: PPUSH
10742: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10746: LD_EXP 19
10750: PPUSH
10751: LD_STRING D7a-Corn-5
10753: PPUSH
10754: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10758: LD_EXP 1
10762: PPUSH
10763: LD_STRING D7a-JMM-6
10765: PPUSH
10766: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10770: LD_EXP 19
10774: PPUSH
10775: LD_STRING D7a-Corn-6
10777: PPUSH
10778: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10782: LD_EXP 1
10786: PPUSH
10787: LD_STRING D7a-JMM-7
10789: PPUSH
10790: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10794: LD_EXP 19
10798: PPUSH
10799: LD_STRING D7a-Corn-7
10801: PPUSH
10802: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10806: LD_EXP 1
10810: PPUSH
10811: LD_STRING D7a-JMM-8
10813: PPUSH
10814: CALL_OW 88
// DialogueOff ;
10818: CALL_OW 7
// end ;
10822: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10823: LD_EXP 61
10827: PUSH
10828: LD_EXP 1
10832: PPUSH
10833: CALL_OW 302
10837: PUSH
10838: LD_EXP 5
10842: PPUSH
10843: CALL_OW 302
10847: OR
10848: AND
10849: IFFALSE 10939
10851: GO 10853
10853: DISABLE
// begin Wait ( 0 0$2 ) ;
10854: LD_INT 70
10856: PPUSH
10857: CALL_OW 67
// DialogueOn ;
10861: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10865: LD_EXP 61
10869: PUSH
10870: LD_INT 1
10872: ARRAY
10873: PPUSH
10874: LD_EXP 61
10878: PUSH
10879: LD_INT 2
10881: ARRAY
10882: PPUSH
10883: CALL_OW 86
// if IsOk ( Cyrus ) then
10887: LD_EXP 5
10891: PPUSH
10892: CALL_OW 302
10896: IFFALSE 10912
// Say ( Cyrus , D10-Cyrus-1 ) else
10898: LD_EXP 5
10902: PPUSH
10903: LD_STRING D10-Cyrus-1
10905: PPUSH
10906: CALL_OW 88
10910: GO 10935
// if IsOk ( JMM ) then
10912: LD_EXP 1
10916: PPUSH
10917: CALL_OW 302
10921: IFFALSE 10935
// Say ( JMM , D10-JMM-1 ) ;
10923: LD_EXP 1
10927: PPUSH
10928: LD_STRING D10-JMM-1
10930: PPUSH
10931: CALL_OW 88
// DialogueOff ;
10935: CALL_OW 7
// end ;
10939: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10940: LD_INT 12
10942: PPUSH
10943: LD_INT 1
10945: PPUSH
10946: CALL_OW 321
10950: PUSH
10951: LD_INT 2
10953: EQUAL
10954: IFFALSE 10966
10956: GO 10958
10958: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10959: LD_STRING M2b
10961: PPUSH
10962: CALL_OW 337
10966: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10967: LD_INT 32
10969: PPUSH
10970: LD_INT 1
10972: PPUSH
10973: CALL_OW 321
10977: PUSH
10978: LD_INT 2
10980: EQUAL
10981: IFFALSE 10993
10983: GO 10985
10985: DISABLE
// ChangeMissionObjectives ( M2c ) ;
10986: LD_STRING M2c
10988: PPUSH
10989: CALL_OW 337
10993: END
// every 0 0$1 trigger arabianDefeated = 1 do
10994: LD_EXP 48
10998: PUSH
10999: LD_INT 1
11001: EQUAL
11002: IFFALSE 11014
11004: GO 11006
11006: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11007: LD_STRING M4a
11009: PPUSH
11010: CALL_OW 337
11014: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11015: LD_INT 54
11017: PPUSH
11018: LD_INT 1
11020: PPUSH
11021: CALL_OW 321
11025: PUSH
11026: LD_INT 2
11028: EQUAL
11029: PUSH
11030: LD_INT 55
11032: PPUSH
11033: LD_INT 1
11035: PPUSH
11036: CALL_OW 321
11040: PUSH
11041: LD_INT 2
11043: EQUAL
11044: AND
11045: PUSH
11046: LD_INT 21
11048: PPUSH
11049: LD_INT 1
11051: PPUSH
11052: CALL_OW 321
11056: PUSH
11057: LD_INT 2
11059: EQUAL
11060: AND
11061: PUSH
11062: LD_INT 22
11064: PPUSH
11065: LD_INT 1
11067: PPUSH
11068: CALL_OW 321
11072: PUSH
11073: LD_INT 2
11075: EQUAL
11076: AND
11077: IFFALSE 11089
11079: GO 11081
11081: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11082: LD_STRING M2a
11084: PPUSH
11085: CALL_OW 337
11089: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11090: LD_INT 0
11092: PPUSH
11093: PPUSH
11094: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11095: LD_ADDR_VAR 0 1
11099: PUSH
11100: LD_VAR 0 1
11104: PUSH
11105: LD_EXP 1
11109: PUSH
11110: LD_EXP 2
11114: PUSH
11115: LD_EXP 3
11119: PUSH
11120: LD_EXP 4
11124: PUSH
11125: LD_EXP 5
11129: PUSH
11130: LD_EXP 6
11134: PUSH
11135: LD_EXP 7
11139: PUSH
11140: LD_EXP 8
11144: PUSH
11145: LD_EXP 9
11149: PUSH
11150: LD_EXP 10
11154: PUSH
11155: LD_EXP 11
11159: PUSH
11160: LD_EXP 12
11164: PUSH
11165: LD_EXP 13
11169: PUSH
11170: LD_EXP 14
11174: PUSH
11175: LD_EXP 15
11179: PUSH
11180: LD_EXP 16
11184: PUSH
11185: LD_EXP 17
11189: PUSH
11190: LD_EXP 18
11194: PUSH
11195: LD_EXP 19
11199: PUSH
11200: LD_EXP 24
11204: PUSH
11205: EMPTY
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: DIFF
11227: ST_TO_ADDR
// if not characters then
11228: LD_VAR 0 1
11232: NOT
11233: IFFALSE 11237
// exit ;
11235: GO 11383
// rnd = rand ( 1 , characters ) ;
11237: LD_ADDR_VAR 0 6
11241: PUSH
11242: LD_INT 1
11244: PPUSH
11245: LD_VAR 0 1
11249: PPUSH
11250: CALL_OW 12
11254: ST_TO_ADDR
// for i = 1 to characters do
11255: LD_ADDR_VAR 0 5
11259: PUSH
11260: DOUBLE
11261: LD_INT 1
11263: DEC
11264: ST_TO_ADDR
11265: LD_VAR 0 1
11269: PUSH
11270: FOR_TO
11271: IFFALSE 11381
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11273: LD_VAR 0 5
11277: PUSH
11278: LD_VAR 0 6
11282: EQUAL
11283: PUSH
11284: LD_VAR 0 1
11288: PUSH
11289: LD_VAR 0 5
11293: ARRAY
11294: PPUSH
11295: CALL_OW 258
11299: PUSH
11300: LD_INT 1
11302: EQUAL
11303: AND
11304: IFFALSE 11326
// Say ( characters [ i ] , dialogMID ) ;
11306: LD_VAR 0 1
11310: PUSH
11311: LD_VAR 0 5
11315: ARRAY
11316: PPUSH
11317: LD_VAR 0 2
11321: PPUSH
11322: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11326: LD_VAR 0 5
11330: PUSH
11331: LD_VAR 0 6
11335: EQUAL
11336: PUSH
11337: LD_VAR 0 1
11341: PUSH
11342: LD_VAR 0 5
11346: ARRAY
11347: PPUSH
11348: CALL_OW 258
11352: PUSH
11353: LD_INT 2
11355: EQUAL
11356: AND
11357: IFFALSE 11379
// Say ( characters [ i ] , dialogFID ) ;
11359: LD_VAR 0 1
11363: PUSH
11364: LD_VAR 0 5
11368: ARRAY
11369: PPUSH
11370: LD_VAR 0 3
11374: PPUSH
11375: CALL_OW 88
// end ;
11379: GO 11270
11381: POP
11382: POP
// end ;
11383: LD_VAR 0 4
11387: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11388: LD_INT 0
11390: PPUSH
11391: PPUSH
// for i in charactersList do
11392: LD_ADDR_VAR 0 4
11396: PUSH
11397: LD_VAR 0 1
11401: PUSH
11402: FOR_IN
11403: IFFALSE 11421
// SaveCharacters ( i , ident ) ;
11405: LD_VAR 0 4
11409: PPUSH
11410: LD_VAR 0 2
11414: PPUSH
11415: CALL_OW 38
11419: GO 11402
11421: POP
11422: POP
// end ;
11423: LD_VAR 0 3
11427: RET
// export function PrepareDifficulty ; begin
11428: LD_INT 0
11430: PPUSH
// if difficulty = 1 then
11431: LD_OWVAR 67
11435: PUSH
11436: LD_INT 1
11438: EQUAL
11439: IFFALSE 11483
// begin RuSolMinLevel = 3 ;
11441: LD_ADDR_EXP 36
11445: PUSH
11446: LD_INT 3
11448: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11449: LD_ADDR_EXP 37
11453: PUSH
11454: LD_INT 5
11456: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11457: LD_INT 51
11459: PPUSH
11460: LD_INT 6
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11470: LD_INT 51
11472: PPUSH
11473: LD_INT 5
11475: PPUSH
11476: LD_INT 2
11478: PPUSH
11479: CALL_OW 322
// end ; if difficulty = 2 then
11483: LD_OWVAR 67
11487: PUSH
11488: LD_INT 2
11490: EQUAL
11491: IFFALSE 11587
// begin RuSolMinLevel = 5 ;
11493: LD_ADDR_EXP 36
11497: PUSH
11498: LD_INT 5
11500: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11501: LD_ADDR_EXP 37
11505: PUSH
11506: LD_INT 7
11508: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11509: LD_INT 51
11511: PPUSH
11512: LD_INT 6
11514: PPUSH
11515: LD_INT 2
11517: PPUSH
11518: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11522: LD_INT 57
11524: PPUSH
11525: LD_INT 6
11527: PPUSH
11528: LD_INT 2
11530: PPUSH
11531: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11535: LD_INT 63
11537: PPUSH
11538: LD_INT 6
11540: PPUSH
11541: LD_INT 2
11543: PPUSH
11544: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11548: LD_INT 51
11550: PPUSH
11551: LD_INT 5
11553: PPUSH
11554: LD_INT 2
11556: PPUSH
11557: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11561: LD_INT 5
11563: PPUSH
11564: LD_INT 2
11566: PPUSH
11567: LD_INT 2
11569: PPUSH
11570: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11574: LD_INT 5
11576: PPUSH
11577: LD_INT 5
11579: PPUSH
11580: LD_INT 2
11582: PPUSH
11583: CALL_OW 322
// end ; if difficulty = 3 then
11587: LD_OWVAR 67
11591: PUSH
11592: LD_INT 3
11594: EQUAL
11595: IFFALSE 11743
// begin RuSolMinLevel = 6 ;
11597: LD_ADDR_EXP 36
11601: PUSH
11602: LD_INT 6
11604: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11605: LD_ADDR_EXP 37
11609: PUSH
11610: LD_INT 8
11612: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11613: LD_INT 51
11615: PPUSH
11616: LD_INT 6
11618: PPUSH
11619: LD_INT 2
11621: PPUSH
11622: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11626: LD_INT 57
11628: PPUSH
11629: LD_INT 6
11631: PPUSH
11632: LD_INT 2
11634: PPUSH
11635: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11639: LD_INT 52
11641: PPUSH
11642: LD_INT 6
11644: PPUSH
11645: LD_INT 2
11647: PPUSH
11648: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11652: LD_INT 58
11654: PPUSH
11655: LD_INT 6
11657: PPUSH
11658: LD_INT 2
11660: PPUSH
11661: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11665: LD_INT 63
11667: PPUSH
11668: LD_INT 6
11670: PPUSH
11671: LD_INT 2
11673: PPUSH
11674: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11678: LD_INT 64
11680: PPUSH
11681: LD_INT 6
11683: PPUSH
11684: LD_INT 2
11686: PPUSH
11687: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11691: LD_INT 51
11693: PPUSH
11694: LD_INT 5
11696: PPUSH
11697: LD_INT 2
11699: PPUSH
11700: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11704: LD_INT 52
11706: PPUSH
11707: LD_INT 5
11709: PPUSH
11710: LD_INT 2
11712: PPUSH
11713: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11717: LD_INT 66
11719: PPUSH
11720: LD_INT 2
11722: PPUSH
11723: LD_INT 2
11725: PPUSH
11726: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11730: LD_INT 66
11732: PPUSH
11733: LD_INT 5
11735: PPUSH
11736: LD_INT 2
11738: PPUSH
11739: CALL_OW 322
// end ; end ;
11743: LD_VAR 0 1
11747: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11748: LD_INT 0
11750: PPUSH
11751: PPUSH
11752: PPUSH
11753: PPUSH
11754: PPUSH
11755: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11756: LD_ADDR_VAR 0 7
11760: PUSH
11761: LD_INT 43
11763: PUSH
11764: LD_INT 68
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: PUSH
11771: LD_INT 43
11773: PUSH
11774: LD_INT 79
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 99
11783: PUSH
11784: LD_INT 114
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 103
11793: PUSH
11794: LD_INT 114
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 156
11803: PUSH
11804: LD_INT 92
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 152
11813: PUSH
11814: LD_INT 85
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: EMPTY
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: ST_TO_ADDR
// for i in sources do
11829: LD_ADDR_VAR 0 3
11833: PUSH
11834: LD_VAR 0 7
11838: PUSH
11839: FOR_IN
11840: IFFALSE 11869
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11842: LD_VAR 0 3
11846: PUSH
11847: LD_INT 1
11849: ARRAY
11850: PPUSH
11851: LD_VAR 0 3
11855: PUSH
11856: LD_INT 2
11858: ARRAY
11859: PPUSH
11860: LD_INT 3
11862: PPUSH
11863: CALL_OW 441
11867: GO 11839
11869: POP
11870: POP
// case position of 1 :
11871: LD_VAR 0 1
11875: PUSH
11876: LD_INT 1
11878: DOUBLE
11879: EQUAL
11880: IFTRUE 11884
11882: GO 11895
11884: POP
// area := westConv ; 2 :
11885: LD_ADDR_VAR 0 6
11889: PUSH
11890: LD_INT 20
11892: ST_TO_ADDR
11893: GO 11934
11895: LD_INT 2
11897: DOUBLE
11898: EQUAL
11899: IFTRUE 11903
11901: GO 11914
11903: POP
// area := midConv ; 3 :
11904: LD_ADDR_VAR 0 6
11908: PUSH
11909: LD_INT 21
11911: ST_TO_ADDR
11912: GO 11934
11914: LD_INT 3
11916: DOUBLE
11917: EQUAL
11918: IFTRUE 11922
11920: GO 11933
11922: POP
// area := eastConv ; end ;
11923: LD_ADDR_VAR 0 6
11927: PUSH
11928: LD_INT 22
11930: ST_TO_ADDR
11931: GO 11934
11933: POP
// area := AreaToList ( area , 0 ) ;
11934: LD_ADDR_VAR 0 6
11938: PUSH
11939: LD_VAR 0 6
11943: PPUSH
11944: LD_INT 0
11946: PPUSH
11947: CALL_OW 517
11951: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11952: LD_ADDR_VAR 0 3
11956: PUSH
11957: DOUBLE
11958: LD_INT 1
11960: DEC
11961: ST_TO_ADDR
11962: LD_VAR 0 6
11966: PUSH
11967: LD_INT 1
11969: ARRAY
11970: PUSH
11971: FOR_TO
11972: IFFALSE 12053
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11974: LD_VAR 0 6
11978: PUSH
11979: LD_INT 1
11981: ARRAY
11982: PUSH
11983: LD_VAR 0 3
11987: ARRAY
11988: PPUSH
11989: LD_VAR 0 6
11993: PUSH
11994: LD_INT 2
11996: ARRAY
11997: PUSH
11998: LD_VAR 0 3
12002: ARRAY
12003: PPUSH
12004: LD_INT 1
12006: PPUSH
12007: LD_INT 1
12009: PPUSH
12010: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12014: LD_VAR 0 6
12018: PUSH
12019: LD_INT 1
12021: ARRAY
12022: PUSH
12023: LD_VAR 0 3
12027: ARRAY
12028: PPUSH
12029: LD_VAR 0 6
12033: PUSH
12034: LD_INT 2
12036: ARRAY
12037: PUSH
12038: LD_VAR 0 3
12042: ARRAY
12043: PPUSH
12044: LD_INT 1
12046: PPUSH
12047: CALL_OW 331
// end ;
12051: GO 11971
12053: POP
12054: POP
// ruPossition = position ;
12055: LD_ADDR_EXP 41
12059: PUSH
12060: LD_VAR 0 1
12064: ST_TO_ADDR
// if position = 1 then
12065: LD_VAR 0 1
12069: PUSH
12070: LD_INT 1
12072: EQUAL
12073: IFFALSE 12821
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12075: LD_ADDR_VAR 0 4
12079: PUSH
12080: LD_INT 22
12082: PUSH
12083: LD_INT 3
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 25
12092: PUSH
12093: LD_INT 2
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: PPUSH
12104: CALL_OW 69
12108: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12109: LD_ADDR_VAR 0 5
12113: PUSH
12114: LD_INT 0
12116: PUSH
12117: LD_INT 49
12119: PUSH
12120: LD_INT 74
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 4
12134: PUSH
12135: LD_INT 73
12137: PUSH
12138: LD_INT 88
12140: PUSH
12141: LD_INT 5
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 4
12152: PUSH
12153: LD_INT 56
12155: PUSH
12156: LD_INT 62
12158: PUSH
12159: LD_INT 3
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 29
12170: PUSH
12171: LD_INT 43
12173: PUSH
12174: LD_INT 68
12176: PUSH
12177: LD_INT 2
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 30
12188: PUSH
12189: LD_INT 43
12191: PUSH
12192: LD_INT 79
12194: PUSH
12195: LD_INT 5
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 28
12206: PUSH
12207: LD_INT 60
12209: PUSH
12210: LD_INT 75
12212: PUSH
12213: LD_INT 1
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 2
12224: PUSH
12225: LD_INT 50
12227: PUSH
12228: LD_INT 87
12230: PUSH
12231: LD_INT 1
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 28
12242: PUSH
12243: LD_INT 45
12245: PUSH
12246: LD_INT 67
12248: PUSH
12249: LD_INT 2
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 17
12260: PUSH
12261: LD_INT 47
12263: PUSH
12264: LD_INT 84
12266: PUSH
12267: LD_INT 2
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 18
12278: PUSH
12279: LD_INT 46
12281: PUSH
12282: LD_INT 87
12284: PUSH
12285: LD_INT 1
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 28
12296: PUSH
12297: LD_INT 41
12299: PUSH
12300: LD_INT 64
12302: PUSH
12303: LD_INT 5
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 32
12314: PUSH
12315: LD_INT 75
12317: PUSH
12318: LD_INT 76
12320: PUSH
12321: LD_INT 5
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 32
12332: PUSH
12333: LD_INT 77
12335: PUSH
12336: LD_INT 75
12338: PUSH
12339: LD_INT 5
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 32
12350: PUSH
12351: LD_INT 69
12353: PUSH
12354: LD_INT 68
12356: PUSH
12357: LD_INT 3
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 32
12368: PUSH
12369: LD_INT 59
12371: PUSH
12372: LD_INT 96
12374: PUSH
12375: LD_INT 5
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 32
12386: PUSH
12387: LD_INT 56
12389: PUSH
12390: LD_INT 96
12392: PUSH
12393: LD_INT 0
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: PUSH
12402: LD_INT 32
12404: PUSH
12405: LD_INT 51
12407: PUSH
12408: LD_INT 61
12410: PUSH
12411: LD_INT 3
12413: PUSH
12414: EMPTY
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: PUSH
12420: LD_INT 32
12422: PUSH
12423: LD_INT 42
12425: PUSH
12426: LD_INT 60
12428: PUSH
12429: LD_INT 3
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: PUSH
12438: LD_INT 32
12440: PUSH
12441: LD_INT 36
12443: PUSH
12444: LD_INT 58
12446: PUSH
12447: LD_INT 3
12449: PUSH
12450: EMPTY
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: PUSH
12456: LD_INT 32
12458: PUSH
12459: LD_INT 39
12461: PUSH
12462: LD_INT 59
12464: PUSH
12465: LD_INT 3
12467: PUSH
12468: EMPTY
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: PUSH
12474: LD_INT 32
12476: PUSH
12477: LD_INT 61
12479: PUSH
12480: LD_INT 64
12482: PUSH
12483: LD_INT 3
12485: PUSH
12486: EMPTY
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: PUSH
12492: LD_INT 33
12494: PUSH
12495: LD_INT 63
12497: PUSH
12498: LD_INT 90
12500: PUSH
12501: LD_INT 5
12503: PUSH
12504: EMPTY
12505: LIST
12506: LIST
12507: LIST
12508: LIST
12509: PUSH
12510: LD_INT 33
12512: PUSH
12513: LD_INT 64
12515: PUSH
12516: LD_INT 88
12518: PUSH
12519: LD_INT 5
12521: PUSH
12522: EMPTY
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: PUSH
12528: LD_INT 33
12530: PUSH
12531: LD_INT 72
12533: PUSH
12534: LD_INT 82
12536: PUSH
12537: LD_INT 5
12539: PUSH
12540: EMPTY
12541: LIST
12542: LIST
12543: LIST
12544: LIST
12545: PUSH
12546: LD_INT 6
12548: PUSH
12549: LD_INT 42
12551: PUSH
12552: LD_INT 74
12554: PUSH
12555: LD_INT 1
12557: PUSH
12558: EMPTY
12559: LIST
12560: LIST
12561: LIST
12562: LIST
12563: PUSH
12564: LD_INT 6
12566: PUSH
12567: LD_INT 56
12569: PUSH
12570: LD_INT 77
12572: PUSH
12573: LD_INT 2
12575: PUSH
12576: EMPTY
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: PUSH
12582: LD_INT 21
12584: PUSH
12585: LD_INT 54
12587: PUSH
12588: LD_INT 91
12590: PUSH
12591: LD_INT 5
12593: PUSH
12594: EMPTY
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 16
12602: PUSH
12603: LD_INT 50
12605: PUSH
12606: LD_INT 83
12608: PUSH
12609: LD_INT 3
12611: PUSH
12612: EMPTY
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: PUSH
12618: LD_INT 24
12620: PUSH
12621: LD_INT 50
12623: PUSH
12624: LD_INT 90
12626: PUSH
12627: LD_INT 0
12629: PUSH
12630: EMPTY
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12667: LD_ADDR_VAR 0 3
12671: PUSH
12672: LD_INT 22
12674: PUSH
12675: LD_INT 3
12677: PUSH
12678: EMPTY
12679: LIST
12680: LIST
12681: PUSH
12682: LD_INT 3
12684: PUSH
12685: LD_INT 25
12687: PUSH
12688: LD_INT 2
12690: PUSH
12691: EMPTY
12692: LIST
12693: LIST
12694: PUSH
12695: EMPTY
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: PPUSH
12703: CALL_OW 69
12707: PUSH
12708: FOR_IN
12709: IFFALSE 12728
// AddComAgressiveMove ( i , 53 , 82 ) ;
12711: LD_VAR 0 3
12715: PPUSH
12716: LD_INT 53
12718: PPUSH
12719: LD_INT 82
12721: PPUSH
12722: CALL_OW 174
12726: GO 12708
12728: POP
12729: POP
// for i := 1 to buildingsTab do
12730: LD_ADDR_VAR 0 3
12734: PUSH
12735: DOUBLE
12736: LD_INT 1
12738: DEC
12739: ST_TO_ADDR
12740: LD_VAR 0 5
12744: PUSH
12745: FOR_TO
12746: IFFALSE 12819
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12748: LD_VAR 0 4
12752: PPUSH
12753: LD_VAR 0 5
12757: PUSH
12758: LD_VAR 0 3
12762: ARRAY
12763: PUSH
12764: LD_INT 1
12766: ARRAY
12767: PPUSH
12768: LD_VAR 0 5
12772: PUSH
12773: LD_VAR 0 3
12777: ARRAY
12778: PUSH
12779: LD_INT 2
12781: ARRAY
12782: PPUSH
12783: LD_VAR 0 5
12787: PUSH
12788: LD_VAR 0 3
12792: ARRAY
12793: PUSH
12794: LD_INT 3
12796: ARRAY
12797: PPUSH
12798: LD_VAR 0 5
12802: PUSH
12803: LD_VAR 0 3
12807: ARRAY
12808: PUSH
12809: LD_INT 4
12811: ARRAY
12812: PPUSH
12813: CALL_OW 205
12817: GO 12745
12819: POP
12820: POP
// end ; if position = 2 then
12821: LD_VAR 0 1
12825: PUSH
12826: LD_INT 2
12828: EQUAL
12829: IFFALSE 13444
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12831: LD_ADDR_VAR 0 4
12835: PUSH
12836: LD_INT 22
12838: PUSH
12839: LD_INT 3
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 25
12848: PUSH
12849: LD_INT 2
12851: PUSH
12852: EMPTY
12853: LIST
12854: LIST
12855: PUSH
12856: EMPTY
12857: LIST
12858: LIST
12859: PPUSH
12860: CALL_OW 69
12864: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12865: LD_ADDR_VAR 0 5
12869: PUSH
12870: LD_INT 0
12872: PUSH
12873: LD_INT 104
12875: PUSH
12876: LD_INT 110
12878: PUSH
12879: LD_INT 5
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 4
12890: PUSH
12891: LD_INT 98
12893: PUSH
12894: LD_INT 90
12896: PUSH
12897: LD_INT 3
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 29
12908: PUSH
12909: LD_INT 103
12911: PUSH
12912: LD_INT 114
12914: PUSH
12915: LD_INT 2
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 30
12926: PUSH
12927: LD_INT 99
12929: PUSH
12930: LD_INT 114
12932: PUSH
12933: LD_INT 3
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 28
12944: PUSH
12945: LD_INT 100
12947: PUSH
12948: LD_INT 112
12950: PUSH
12951: LD_INT 1
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 2
12962: PUSH
12963: LD_INT 92
12965: PUSH
12966: LD_INT 101
12968: PUSH
12969: LD_INT 0
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: PUSH
12978: LD_INT 28
12980: PUSH
12981: LD_INT 97
12983: PUSH
12984: LD_INT 116
12986: PUSH
12987: LD_INT 5
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: PUSH
12996: LD_INT 17
12998: PUSH
12999: LD_INT 96
13001: PUSH
13002: LD_INT 101
13004: PUSH
13005: LD_INT 4
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 18
13016: PUSH
13017: LD_INT 88
13019: PUSH
13020: LD_INT 97
13022: PUSH
13023: LD_INT 2
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 28
13034: PUSH
13035: LD_INT 106
13037: PUSH
13038: LD_INT 92
13040: PUSH
13041: LD_INT 2
13043: PUSH
13044: EMPTY
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 32
13052: PUSH
13053: LD_INT 88
13055: PUSH
13056: LD_INT 89
13058: PUSH
13059: LD_INT 2
13061: PUSH
13062: EMPTY
13063: LIST
13064: LIST
13065: LIST
13066: LIST
13067: PUSH
13068: LD_INT 32
13070: PUSH
13071: LD_INT 86
13073: PUSH
13074: LD_INT 90
13076: PUSH
13077: LD_INT 2
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: LIST
13084: LIST
13085: PUSH
13086: LD_INT 32
13088: PUSH
13089: LD_INT 85
13091: PUSH
13092: LD_INT 99
13094: PUSH
13095: LD_INT 2
13097: PUSH
13098: EMPTY
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: PUSH
13104: LD_INT 32
13106: PUSH
13107: LD_INT 85
13109: PUSH
13110: LD_INT 107
13112: PUSH
13113: LD_INT 1
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: LIST
13120: LIST
13121: PUSH
13122: LD_INT 33
13124: PUSH
13125: LD_INT 105
13127: PUSH
13128: LD_INT 99
13130: PUSH
13131: LD_INT 1
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: LIST
13138: LIST
13139: PUSH
13140: LD_INT 33
13142: PUSH
13143: LD_INT 102
13145: PUSH
13146: LD_INT 92
13148: PUSH
13149: LD_INT 3
13151: PUSH
13152: EMPTY
13153: LIST
13154: LIST
13155: LIST
13156: LIST
13157: PUSH
13158: LD_INT 33
13160: PUSH
13161: LD_INT 105
13163: PUSH
13164: LD_INT 92
13166: PUSH
13167: LD_INT 2
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: LIST
13174: LIST
13175: PUSH
13176: LD_INT 6
13178: PUSH
13179: LD_INT 92
13181: PUSH
13182: LD_INT 110
13184: PUSH
13185: LD_INT 0
13187: PUSH
13188: EMPTY
13189: LIST
13190: LIST
13191: LIST
13192: LIST
13193: PUSH
13194: LD_INT 6
13196: PUSH
13197: LD_INT 103
13199: PUSH
13200: LD_INT 103
13202: PUSH
13203: LD_INT 5
13205: PUSH
13206: EMPTY
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: PUSH
13212: LD_INT 21
13214: PUSH
13215: LD_INT 89
13217: PUSH
13218: LD_INT 101
13220: PUSH
13221: LD_INT 1
13223: PUSH
13224: EMPTY
13225: LIST
13226: LIST
13227: LIST
13228: LIST
13229: PUSH
13230: LD_INT 16
13232: PUSH
13233: LD_INT 95
13235: PUSH
13236: LD_INT 104
13238: PUSH
13239: LD_INT 4
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: PUSH
13248: LD_INT 24
13250: PUSH
13251: LD_INT 92
13253: PUSH
13254: LD_INT 105
13256: PUSH
13257: LD_INT 0
13259: PUSH
13260: EMPTY
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: PUSH
13266: EMPTY
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: LIST
13280: LIST
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: LIST
13286: LIST
13287: LIST
13288: LIST
13289: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13290: LD_ADDR_VAR 0 3
13294: PUSH
13295: LD_INT 22
13297: PUSH
13298: LD_INT 3
13300: PUSH
13301: EMPTY
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 3
13307: PUSH
13308: LD_INT 25
13310: PUSH
13311: LD_INT 2
13313: PUSH
13314: EMPTY
13315: LIST
13316: LIST
13317: PUSH
13318: EMPTY
13319: LIST
13320: LIST
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PPUSH
13326: CALL_OW 69
13330: PUSH
13331: FOR_IN
13332: IFFALSE 13351
// AddComAgressiveMove ( i , 96 , 99 ) ;
13334: LD_VAR 0 3
13338: PPUSH
13339: LD_INT 96
13341: PPUSH
13342: LD_INT 99
13344: PPUSH
13345: CALL_OW 174
13349: GO 13331
13351: POP
13352: POP
// for i := 1 to buildingsTab do
13353: LD_ADDR_VAR 0 3
13357: PUSH
13358: DOUBLE
13359: LD_INT 1
13361: DEC
13362: ST_TO_ADDR
13363: LD_VAR 0 5
13367: PUSH
13368: FOR_TO
13369: IFFALSE 13442
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13371: LD_VAR 0 4
13375: PPUSH
13376: LD_VAR 0 5
13380: PUSH
13381: LD_VAR 0 3
13385: ARRAY
13386: PUSH
13387: LD_INT 1
13389: ARRAY
13390: PPUSH
13391: LD_VAR 0 5
13395: PUSH
13396: LD_VAR 0 3
13400: ARRAY
13401: PUSH
13402: LD_INT 2
13404: ARRAY
13405: PPUSH
13406: LD_VAR 0 5
13410: PUSH
13411: LD_VAR 0 3
13415: ARRAY
13416: PUSH
13417: LD_INT 3
13419: ARRAY
13420: PPUSH
13421: LD_VAR 0 5
13425: PUSH
13426: LD_VAR 0 3
13430: ARRAY
13431: PUSH
13432: LD_INT 4
13434: ARRAY
13435: PPUSH
13436: CALL_OW 205
13440: GO 13368
13442: POP
13443: POP
// end ; if position = 3 then
13444: LD_VAR 0 1
13448: PUSH
13449: LD_INT 3
13451: EQUAL
13452: IFFALSE 14238
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13454: LD_ADDR_VAR 0 4
13458: PUSH
13459: LD_INT 22
13461: PUSH
13462: LD_INT 3
13464: PUSH
13465: EMPTY
13466: LIST
13467: LIST
13468: PUSH
13469: LD_INT 25
13471: PUSH
13472: LD_INT 2
13474: PUSH
13475: EMPTY
13476: LIST
13477: LIST
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: PPUSH
13483: CALL_OW 69
13487: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13488: LD_ADDR_VAR 0 5
13492: PUSH
13493: LD_INT 0
13495: PUSH
13496: LD_INT 151
13498: PUSH
13499: LD_INT 71
13501: PUSH
13502: LD_INT 4
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 4
13513: PUSH
13514: LD_INT 145
13516: PUSH
13517: LD_INT 53
13519: PUSH
13520: LD_INT 3
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 4
13531: PUSH
13532: LD_INT 172
13534: PUSH
13535: LD_INT 102
13537: PUSH
13538: LD_INT 5
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 29
13549: PUSH
13550: LD_INT 152
13552: PUSH
13553: LD_INT 85
13555: PUSH
13556: LD_INT 3
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 30
13567: PUSH
13568: LD_INT 156
13570: PUSH
13571: LD_INT 92
13573: PUSH
13574: LD_INT 3
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 28
13585: PUSH
13586: LD_INT 151
13588: PUSH
13589: LD_INT 66
13591: PUSH
13592: LD_INT 4
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 2
13603: PUSH
13604: LD_INT 163
13606: PUSH
13607: LD_INT 95
13609: PUSH
13610: LD_INT 5
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 28
13621: PUSH
13622: LD_INT 149
13624: PUSH
13625: LD_INT 63
13627: PUSH
13628: LD_INT 4
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: PUSH
13637: LD_INT 17
13639: PUSH
13640: LD_INT 167
13642: PUSH
13643: LD_INT 99
13645: PUSH
13646: LD_INT 5
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 18
13657: PUSH
13658: LD_INT 163
13660: PUSH
13661: LD_INT 98
13663: PUSH
13664: LD_INT 0
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 28
13675: PUSH
13676: LD_INT 154
13678: PUSH
13679: LD_INT 70
13681: PUSH
13682: LD_INT 4
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 32
13693: PUSH
13694: LD_INT 155
13696: PUSH
13697: LD_INT 62
13699: PUSH
13700: LD_INT 4
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 32
13711: PUSH
13712: LD_INT 161
13714: PUSH
13715: LD_INT 69
13717: PUSH
13718: LD_INT 4
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: PUSH
13727: LD_INT 32
13729: PUSH
13730: LD_INT 168
13732: PUSH
13733: LD_INT 78
13735: PUSH
13736: LD_INT 4
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 32
13747: PUSH
13748: LD_INT 163
13750: PUSH
13751: LD_INT 80
13753: PUSH
13754: LD_INT 5
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 32
13765: PUSH
13766: LD_INT 136
13768: PUSH
13769: LD_INT 73
13771: PUSH
13772: LD_INT 0
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 32
13783: PUSH
13784: LD_INT 157
13786: PUSH
13787: LD_INT 98
13789: PUSH
13790: LD_INT 0
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 32
13801: PUSH
13802: LD_INT 150
13804: PUSH
13805: LD_INT 87
13807: PUSH
13808: LD_INT 1
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: PUSH
13817: LD_INT 33
13819: PUSH
13820: LD_INT 171
13822: PUSH
13823: LD_INT 97
13825: PUSH
13826: LD_INT 4
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: PUSH
13835: LD_INT 33
13837: PUSH
13838: LD_INT 168
13840: PUSH
13841: LD_INT 92
13843: PUSH
13844: LD_INT 4
13846: PUSH
13847: EMPTY
13848: LIST
13849: LIST
13850: LIST
13851: LIST
13852: PUSH
13853: LD_INT 33
13855: PUSH
13856: LD_INT 166
13858: PUSH
13859: LD_INT 80
13861: PUSH
13862: LD_INT 5
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: LIST
13869: LIST
13870: PUSH
13871: LD_INT 33
13873: PUSH
13874: LD_INT 141
13876: PUSH
13877: LD_INT 54
13879: PUSH
13880: LD_INT 2
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: LIST
13887: LIST
13888: PUSH
13889: LD_INT 33
13891: PUSH
13892: LD_INT 133
13894: PUSH
13895: LD_INT 57
13897: PUSH
13898: LD_INT 2
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 33
13909: PUSH
13910: LD_INT 132
13912: PUSH
13913: LD_INT 61
13915: PUSH
13916: LD_INT 2
13918: PUSH
13919: EMPTY
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: PUSH
13925: LD_INT 33
13927: PUSH
13928: LD_INT 150
13930: PUSH
13931: LD_INT 82
13933: PUSH
13934: LD_INT 0
13936: PUSH
13937: EMPTY
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: PUSH
13943: LD_INT 33
13945: PUSH
13946: LD_INT 132
13948: PUSH
13949: LD_INT 72
13951: PUSH
13952: LD_INT 0
13954: PUSH
13955: EMPTY
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: PUSH
13961: LD_INT 6
13963: PUSH
13964: LD_INT 146
13966: PUSH
13967: LD_INT 64
13969: PUSH
13970: LD_INT 4
13972: PUSH
13973: EMPTY
13974: LIST
13975: LIST
13976: LIST
13977: LIST
13978: PUSH
13979: LD_INT 6
13981: PUSH
13982: LD_INT 159
13984: PUSH
13985: LD_INT 85
13987: PUSH
13988: LD_INT 4
13990: PUSH
13991: EMPTY
13992: LIST
13993: LIST
13994: LIST
13995: LIST
13996: PUSH
13997: LD_INT 21
13999: PUSH
14000: LD_INT 163
14002: PUSH
14003: LD_INT 91
14005: PUSH
14006: LD_INT 3
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: LIST
14013: LIST
14014: PUSH
14015: LD_INT 16
14017: PUSH
14018: LD_INT 166
14020: PUSH
14021: LD_INT 95
14023: PUSH
14024: LD_INT 4
14026: PUSH
14027: EMPTY
14028: LIST
14029: LIST
14030: LIST
14031: LIST
14032: PUSH
14033: LD_INT 24
14035: PUSH
14036: LD_INT 159
14038: PUSH
14039: LD_INT 95
14041: PUSH
14042: LD_INT 1
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: LIST
14049: LIST
14050: PUSH
14051: EMPTY
14052: LIST
14053: LIST
14054: LIST
14055: LIST
14056: LIST
14057: LIST
14058: LIST
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: LIST
14064: LIST
14065: LIST
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14084: LD_ADDR_VAR 0 3
14088: PUSH
14089: LD_INT 22
14091: PUSH
14092: LD_INT 3
14094: PUSH
14095: EMPTY
14096: LIST
14097: LIST
14098: PUSH
14099: LD_INT 3
14101: PUSH
14102: LD_INT 25
14104: PUSH
14105: LD_INT 2
14107: PUSH
14108: EMPTY
14109: LIST
14110: LIST
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PUSH
14116: EMPTY
14117: LIST
14118: LIST
14119: PPUSH
14120: CALL_OW 69
14124: PUSH
14125: FOR_IN
14126: IFFALSE 14145
// AddComAgressiveMove ( i , 141 , 65 ) ;
14128: LD_VAR 0 3
14132: PPUSH
14133: LD_INT 141
14135: PPUSH
14136: LD_INT 65
14138: PPUSH
14139: CALL_OW 174
14143: GO 14125
14145: POP
14146: POP
// for i := 1 to buildingsTab do
14147: LD_ADDR_VAR 0 3
14151: PUSH
14152: DOUBLE
14153: LD_INT 1
14155: DEC
14156: ST_TO_ADDR
14157: LD_VAR 0 5
14161: PUSH
14162: FOR_TO
14163: IFFALSE 14236
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14165: LD_VAR 0 4
14169: PPUSH
14170: LD_VAR 0 5
14174: PUSH
14175: LD_VAR 0 3
14179: ARRAY
14180: PUSH
14181: LD_INT 1
14183: ARRAY
14184: PPUSH
14185: LD_VAR 0 5
14189: PUSH
14190: LD_VAR 0 3
14194: ARRAY
14195: PUSH
14196: LD_INT 2
14198: ARRAY
14199: PPUSH
14200: LD_VAR 0 5
14204: PUSH
14205: LD_VAR 0 3
14209: ARRAY
14210: PUSH
14211: LD_INT 3
14213: ARRAY
14214: PPUSH
14215: LD_VAR 0 5
14219: PUSH
14220: LD_VAR 0 3
14224: ARRAY
14225: PUSH
14226: LD_INT 4
14228: ARRAY
14229: PPUSH
14230: CALL_OW 205
14234: GO 14162
14236: POP
14237: POP
// end ; end ;
14238: LD_VAR 0 2
14242: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14243: LD_INT 0
14245: PPUSH
14246: PPUSH
14247: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14248: LD_ADDR_EXP 68
14252: PUSH
14253: LD_INT 0
14255: PUSH
14256: LD_INT 71
14258: PUSH
14259: LD_INT 15
14261: PUSH
14262: LD_INT 3
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: PUSH
14271: LD_INT 6
14273: PUSH
14274: LD_INT 77
14276: PUSH
14277: LD_INT 18
14279: PUSH
14280: LD_INT 3
14282: PUSH
14283: EMPTY
14284: LIST
14285: LIST
14286: LIST
14287: LIST
14288: PUSH
14289: LD_INT 4
14291: PUSH
14292: LD_INT 77
14294: PUSH
14295: LD_INT 26
14297: PUSH
14298: LD_INT 0
14300: PUSH
14301: EMPTY
14302: LIST
14303: LIST
14304: LIST
14305: LIST
14306: PUSH
14307: LD_INT 31
14309: PUSH
14310: LD_INT 72
14312: PUSH
14313: LD_INT 24
14315: PUSH
14316: LD_INT 0
14318: PUSH
14319: EMPTY
14320: LIST
14321: LIST
14322: LIST
14323: LIST
14324: PUSH
14325: LD_INT 31
14327: PUSH
14328: LD_INT 82
14330: PUSH
14331: LD_INT 28
14333: PUSH
14334: LD_INT 0
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: LIST
14342: PUSH
14343: LD_INT 31
14345: PUSH
14346: LD_INT 84
14348: PUSH
14349: LD_INT 21
14351: PUSH
14352: LD_INT 3
14354: PUSH
14355: EMPTY
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 31
14363: PUSH
14364: LD_INT 66
14366: PUSH
14367: LD_INT 14
14369: PUSH
14370: LD_INT 2
14372: PUSH
14373: EMPTY
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: PUSH
14379: LD_INT 27
14381: PUSH
14382: LD_INT 67
14384: PUSH
14385: LD_INT 18
14387: PUSH
14388: LD_INT 5
14390: PUSH
14391: EMPTY
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: PUSH
14397: LD_INT 27
14399: PUSH
14400: LD_INT 69
14402: PUSH
14403: LD_INT 23
14405: PUSH
14406: LD_INT 2
14408: PUSH
14409: EMPTY
14410: LIST
14411: LIST
14412: LIST
14413: LIST
14414: PUSH
14415: EMPTY
14416: LIST
14417: LIST
14418: LIST
14419: LIST
14420: LIST
14421: LIST
14422: LIST
14423: LIST
14424: LIST
14425: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14426: LD_ADDR_VAR 0 3
14430: PUSH
14431: LD_INT 22
14433: PUSH
14434: LD_INT 2
14436: PUSH
14437: EMPTY
14438: LIST
14439: LIST
14440: PUSH
14441: LD_INT 25
14443: PUSH
14444: LD_INT 2
14446: PUSH
14447: EMPTY
14448: LIST
14449: LIST
14450: PUSH
14451: EMPTY
14452: LIST
14453: LIST
14454: PPUSH
14455: CALL_OW 69
14459: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14460: LD_VAR 0 3
14464: PPUSH
14465: LD_EXP 68
14469: PUSH
14470: LD_INT 1
14472: ARRAY
14473: PUSH
14474: LD_INT 1
14476: ARRAY
14477: PPUSH
14478: LD_EXP 68
14482: PUSH
14483: LD_INT 1
14485: ARRAY
14486: PUSH
14487: LD_INT 2
14489: ARRAY
14490: PPUSH
14491: LD_EXP 68
14495: PUSH
14496: LD_INT 1
14498: ARRAY
14499: PUSH
14500: LD_INT 3
14502: ARRAY
14503: PPUSH
14504: LD_EXP 68
14508: PUSH
14509: LD_INT 1
14511: ARRAY
14512: PUSH
14513: LD_INT 4
14515: ARRAY
14516: PPUSH
14517: CALL_OW 205
// end ;
14521: LD_VAR 0 1
14525: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14526: LD_INT 0
14528: PPUSH
14529: PPUSH
14530: PPUSH
14531: PPUSH
14532: PPUSH
14533: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14534: LD_ADDR_VAR 0 7
14538: PUSH
14539: LD_INT 22
14541: PUSH
14542: LD_VAR 0 1
14546: PUSH
14547: EMPTY
14548: LIST
14549: LIST
14550: PUSH
14551: LD_INT 25
14553: PUSH
14554: LD_INT 9
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: EMPTY
14562: LIST
14563: LIST
14564: PPUSH
14565: CALL_OW 69
14569: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14570: LD_ADDR_VAR 0 8
14574: PUSH
14575: LD_INT 22
14577: PUSH
14578: LD_VAR 0 2
14582: PUSH
14583: EMPTY
14584: LIST
14585: LIST
14586: PUSH
14587: LD_INT 3
14589: PUSH
14590: LD_INT 21
14592: PUSH
14593: LD_INT 3
14595: PUSH
14596: EMPTY
14597: LIST
14598: LIST
14599: PUSH
14600: EMPTY
14601: LIST
14602: LIST
14603: PUSH
14604: EMPTY
14605: LIST
14606: LIST
14607: PPUSH
14608: CALL_OW 69
14612: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14613: LD_ADDR_VAR 0 5
14617: PUSH
14618: LD_INT 1
14620: PPUSH
14621: LD_INT 3
14623: PPUSH
14624: CALL_OW 12
14628: ST_TO_ADDR
// for i = 1 to list do
14629: LD_ADDR_VAR 0 6
14633: PUSH
14634: DOUBLE
14635: LD_INT 1
14637: DEC
14638: ST_TO_ADDR
14639: LD_VAR 0 7
14643: PUSH
14644: FOR_TO
14645: IFFALSE 15635
// for ta in filter do
14647: LD_ADDR_VAR 0 4
14651: PUSH
14652: LD_VAR 0 8
14656: PUSH
14657: FOR_IN
14658: IFFALSE 15631
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14660: LD_VAR 0 7
14664: PUSH
14665: LD_VAR 0 6
14669: ARRAY
14670: PPUSH
14671: LD_VAR 0 4
14675: PPUSH
14676: CALL_OW 296
14680: PUSH
14681: LD_INT 15
14683: LESSEQUAL
14684: IFFALSE 15629
// begin case c of 1 :
14686: LD_VAR 0 5
14690: PUSH
14691: LD_INT 1
14693: DOUBLE
14694: EQUAL
14695: IFTRUE 14699
14697: GO 15131
14699: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14700: LD_VAR 0 7
14704: PUSH
14705: LD_VAR 0 6
14709: ARRAY
14710: PPUSH
14711: LD_VAR 0 4
14715: PPUSH
14716: CALL_OW 250
14720: PPUSH
14721: LD_VAR 0 4
14725: PPUSH
14726: CALL_OW 251
14730: PPUSH
14731: CALL_OW 154
// if eventVar2 = 0 then
14735: LD_EXP 66
14739: PUSH
14740: LD_INT 0
14742: EQUAL
14743: IFFALSE 15129
// begin eventVar2 = 1 ;
14745: LD_ADDR_EXP 66
14749: PUSH
14750: LD_INT 1
14752: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14753: LD_INT 245
14755: PPUSH
14756: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14760: LD_VAR 0 4
14764: PPUSH
14765: CALL_OW 250
14769: PPUSH
14770: LD_VAR 0 4
14774: PPUSH
14775: CALL_OW 251
14779: PPUSH
14780: CALL_OW 84
// DialogueOn ;
14784: CALL_OW 6
// if IsOK ( Cyrus ) then
14788: LD_EXP 5
14792: PPUSH
14793: CALL_OW 302
14797: IFFALSE 14813
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14799: LD_EXP 5
14803: PPUSH
14804: LD_STRING D9a-Cyrus-1
14806: PPUSH
14807: CALL_OW 88
// end else
14811: GO 14935
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14813: LD_INT 22
14815: PUSH
14816: LD_INT 1
14818: PUSH
14819: EMPTY
14820: LIST
14821: LIST
14822: PUSH
14823: LD_INT 26
14825: PUSH
14826: LD_INT 1
14828: PUSH
14829: EMPTY
14830: LIST
14831: LIST
14832: PUSH
14833: LD_INT 2
14835: PUSH
14836: LD_INT 25
14838: PUSH
14839: LD_INT 1
14841: PUSH
14842: EMPTY
14843: LIST
14844: LIST
14845: PUSH
14846: LD_INT 25
14848: PUSH
14849: LD_INT 2
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 25
14858: PUSH
14859: LD_INT 3
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 25
14868: PUSH
14869: LD_INT 4
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 5
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: LIST
14890: LIST
14891: LIST
14892: LIST
14893: PUSH
14894: EMPTY
14895: LIST
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 69
14903: PUSH
14904: LD_EXP 1
14908: PUSH
14909: LD_EXP 14
14913: PUSH
14914: LD_EXP 5
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: LIST
14923: DIFF
14924: PPUSH
14925: LD_STRING D9a-Sol1-1
14927: PPUSH
14928: LD_STRING D9a-Sol1-1
14930: PPUSH
14931: CALL 11090 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14935: LD_INT 22
14937: PUSH
14938: LD_INT 1
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 26
14947: PUSH
14948: LD_INT 1
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 2
14957: PUSH
14958: LD_INT 25
14960: PUSH
14961: LD_INT 1
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: LD_INT 25
14970: PUSH
14971: LD_INT 2
14973: PUSH
14974: EMPTY
14975: LIST
14976: LIST
14977: PUSH
14978: LD_INT 25
14980: PUSH
14981: LD_INT 3
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 4
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 25
15000: PUSH
15001: LD_INT 5
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: LIST
15012: LIST
15013: LIST
15014: LIST
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: LIST
15020: PPUSH
15021: CALL_OW 69
15025: PUSH
15026: LD_EXP 1
15030: PUSH
15031: LD_EXP 14
15035: PUSH
15036: LD_EXP 5
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: LIST
15045: DIFF
15046: PPUSH
15047: LD_STRING D9b-Sol1-1
15049: PPUSH
15050: LD_STRING D9b-Sol1-1
15052: PPUSH
15053: CALL 11090 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15057: LD_STRING 09_arInfo
15059: PPUSH
15060: LD_INT 0
15062: PPUSH
15063: CALL_OW 30
15067: PUSH
15068: LD_INT 1
15070: EQUAL
15071: IFFALSE 15085
// Say ( JMM , D9a-JMM-1 ) ;
15073: LD_EXP 1
15077: PPUSH
15078: LD_STRING D9a-JMM-1
15080: PPUSH
15081: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15085: LD_EXP 1
15089: PPUSH
15090: LD_STRING D9c-JMM-1
15092: PPUSH
15093: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15097: LD_INT 12
15099: PPUSH
15100: LD_INT 1
15102: PPUSH
15103: CALL_OW 321
15107: PUSH
15108: LD_INT 2
15110: EQUAL
15111: IFFALSE 15125
// Say ( JMM , D9c-JMM-1a ) ;
15113: LD_EXP 1
15117: PPUSH
15118: LD_STRING D9c-JMM-1a
15120: PPUSH
15121: CALL_OW 88
// DialogueOff ;
15125: CALL_OW 7
// end ; end ; 2 :
15129: GO 15629
15131: LD_INT 2
15133: DOUBLE
15134: EQUAL
15135: IFTRUE 15139
15137: GO 15597
15139: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15140: LD_VAR 0 7
15144: PUSH
15145: LD_VAR 0 6
15149: ARRAY
15150: PPUSH
15151: LD_VAR 0 4
15155: PPUSH
15156: CALL_OW 250
15160: PUSH
15161: LD_INT 1
15163: NEG
15164: PPUSH
15165: LD_INT 1
15167: PPUSH
15168: CALL_OW 12
15172: PLUS
15173: PPUSH
15174: LD_VAR 0 4
15178: PPUSH
15179: CALL_OW 251
15183: PUSH
15184: LD_INT 1
15186: NEG
15187: PPUSH
15188: LD_INT 1
15190: PPUSH
15191: CALL_OW 12
15195: PLUS
15196: PPUSH
15197: CALL_OW 153
// if eventVar2 = 0 then
15201: LD_EXP 66
15205: PUSH
15206: LD_INT 0
15208: EQUAL
15209: IFFALSE 15595
// begin eventVar2 = 1 ;
15211: LD_ADDR_EXP 66
15215: PUSH
15216: LD_INT 1
15218: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15219: LD_INT 245
15221: PPUSH
15222: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15226: LD_VAR 0 4
15230: PPUSH
15231: CALL_OW 250
15235: PPUSH
15236: LD_VAR 0 4
15240: PPUSH
15241: CALL_OW 251
15245: PPUSH
15246: CALL_OW 84
// DialogueOn ;
15250: CALL_OW 6
// if IsOK ( Cyrus ) then
15254: LD_EXP 5
15258: PPUSH
15259: CALL_OW 302
15263: IFFALSE 15279
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15265: LD_EXP 5
15269: PPUSH
15270: LD_STRING D9a-Cyrus-1
15272: PPUSH
15273: CALL_OW 88
// end else
15277: GO 15401
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15279: LD_INT 22
15281: PUSH
15282: LD_INT 1
15284: PUSH
15285: EMPTY
15286: LIST
15287: LIST
15288: PUSH
15289: LD_INT 26
15291: PUSH
15292: LD_INT 1
15294: PUSH
15295: EMPTY
15296: LIST
15297: LIST
15298: PUSH
15299: LD_INT 2
15301: PUSH
15302: LD_INT 25
15304: PUSH
15305: LD_INT 1
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 25
15314: PUSH
15315: LD_INT 2
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: LD_INT 25
15324: PUSH
15325: LD_INT 3
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 25
15334: PUSH
15335: LD_INT 4
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 25
15344: PUSH
15345: LD_INT 5
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: LIST
15356: LIST
15357: LIST
15358: LIST
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: PPUSH
15365: CALL_OW 69
15369: PUSH
15370: LD_EXP 1
15374: PUSH
15375: LD_EXP 14
15379: PUSH
15380: LD_EXP 5
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: LIST
15389: DIFF
15390: PPUSH
15391: LD_STRING D9a-Sol1-1
15393: PPUSH
15394: LD_STRING D9a-Sol1-1
15396: PPUSH
15397: CALL 11090 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15401: LD_INT 22
15403: PUSH
15404: LD_INT 1
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 26
15413: PUSH
15414: LD_INT 1
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: LD_INT 2
15423: PUSH
15424: LD_INT 25
15426: PUSH
15427: LD_INT 1
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 25
15436: PUSH
15437: LD_INT 2
15439: PUSH
15440: EMPTY
15441: LIST
15442: LIST
15443: PUSH
15444: LD_INT 25
15446: PUSH
15447: LD_INT 3
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 25
15456: PUSH
15457: LD_INT 4
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 25
15466: PUSH
15467: LD_INT 5
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: EMPTY
15475: LIST
15476: LIST
15477: LIST
15478: LIST
15479: LIST
15480: LIST
15481: PUSH
15482: EMPTY
15483: LIST
15484: LIST
15485: LIST
15486: PPUSH
15487: CALL_OW 69
15491: PUSH
15492: LD_EXP 1
15496: PUSH
15497: LD_EXP 14
15501: PUSH
15502: LD_EXP 5
15506: PUSH
15507: EMPTY
15508: LIST
15509: LIST
15510: LIST
15511: DIFF
15512: PPUSH
15513: LD_STRING D9b-Sol1-1
15515: PPUSH
15516: LD_STRING D9b-Sol1-1
15518: PPUSH
15519: CALL 11090 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15523: LD_STRING 09_arInfo
15525: PPUSH
15526: LD_INT 0
15528: PPUSH
15529: CALL_OW 30
15533: PUSH
15534: LD_INT 1
15536: EQUAL
15537: IFFALSE 15551
// Say ( JMM , D9a-JMM-1 ) ;
15539: LD_EXP 1
15543: PPUSH
15544: LD_STRING D9a-JMM-1
15546: PPUSH
15547: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15551: LD_EXP 1
15555: PPUSH
15556: LD_STRING D9c-JMM-1
15558: PPUSH
15559: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15563: LD_INT 12
15565: PPUSH
15566: LD_INT 1
15568: PPUSH
15569: CALL_OW 321
15573: PUSH
15574: LD_INT 2
15576: EQUAL
15577: IFFALSE 15591
// Say ( JMM , D9c-JMM-1a ) ;
15579: LD_EXP 1
15583: PPUSH
15584: LD_STRING D9c-JMM-1a
15586: PPUSH
15587: CALL_OW 88
// DialogueOff ;
15591: CALL_OW 7
// end ; end ; 3 :
15595: GO 15629
15597: LD_INT 3
15599: DOUBLE
15600: EQUAL
15601: IFTRUE 15605
15603: GO 15628
15605: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15606: LD_VAR 0 7
15610: PUSH
15611: LD_VAR 0 6
15615: ARRAY
15616: PPUSH
15617: LD_VAR 0 4
15621: PPUSH
15622: CALL_OW 115
15626: GO 15629
15628: POP
// end ; end ;
15629: GO 14657
15631: POP
15632: POP
15633: GO 14644
15635: POP
15636: POP
// end ;
15637: LD_VAR 0 3
15641: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15642: LD_INT 0
15644: PPUSH
15645: PPUSH
15646: PPUSH
15647: PPUSH
// for i = 1 to 72 do
15648: LD_ADDR_VAR 0 5
15652: PUSH
15653: DOUBLE
15654: LD_INT 1
15656: DEC
15657: ST_TO_ADDR
15658: LD_INT 72
15660: PUSH
15661: FOR_TO
15662: IFFALSE 15720
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15664: LD_VAR 0 5
15668: PPUSH
15669: LD_VAR 0 1
15673: PPUSH
15674: CALL_OW 321
15678: PUSH
15679: LD_INT 1
15681: EQUAL
15682: PUSH
15683: LD_VAR 0 5
15687: PPUSH
15688: LD_VAR 0 3
15692: PPUSH
15693: CALL_OW 482
15697: PUSH
15698: LD_INT 1
15700: EQUAL
15701: AND
15702: IFFALSE 15718
// AddComResearch ( lab , i ) ;
15704: LD_VAR 0 2
15708: PPUSH
15709: LD_VAR 0 5
15713: PPUSH
15714: CALL_OW 184
15718: GO 15661
15720: POP
15721: POP
// end ;
15722: LD_VAR 0 4
15726: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15727: LD_INT 0
15729: PPUSH
15730: PPUSH
15731: PPUSH
15732: PPUSH
15733: PPUSH
15734: PPUSH
15735: PPUSH
15736: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15737: LD_ADDR_VAR 0 6
15741: PUSH
15742: LD_INT 22
15744: PUSH
15745: LD_VAR 0 1
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: LD_INT 56
15756: PUSH
15757: EMPTY
15758: LIST
15759: PUSH
15760: LD_INT 24
15762: PUSH
15763: LD_INT 700
15765: PUSH
15766: EMPTY
15767: LIST
15768: LIST
15769: PUSH
15770: LD_INT 3
15772: PUSH
15773: LD_INT 60
15775: PUSH
15776: EMPTY
15777: LIST
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 2
15785: PUSH
15786: LD_INT 25
15788: PUSH
15789: LD_INT 1
15791: PUSH
15792: EMPTY
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 25
15798: PUSH
15799: LD_INT 9
15801: PUSH
15802: EMPTY
15803: LIST
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: LIST
15810: PUSH
15811: EMPTY
15812: LIST
15813: LIST
15814: LIST
15815: LIST
15816: LIST
15817: PPUSH
15818: CALL_OW 69
15822: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15823: LD_ADDR_VAR 0 7
15827: PUSH
15828: LD_INT 22
15830: PUSH
15831: LD_VAR 0 1
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: LD_INT 30
15842: PUSH
15843: LD_INT 32
15845: PUSH
15846: EMPTY
15847: LIST
15848: LIST
15849: PUSH
15850: LD_INT 58
15852: PUSH
15853: EMPTY
15854: LIST
15855: PUSH
15856: LD_INT 24
15858: PUSH
15859: LD_INT 251
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: LIST
15870: LIST
15871: PPUSH
15872: CALL_OW 69
15876: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15877: LD_ADDR_VAR 0 9
15881: PUSH
15882: LD_INT 22
15884: PUSH
15885: LD_VAR 0 1
15889: PUSH
15890: EMPTY
15891: LIST
15892: LIST
15893: PUSH
15894: LD_INT 2
15896: PUSH
15897: LD_INT 30
15899: PUSH
15900: LD_INT 4
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 30
15909: PUSH
15910: LD_INT 5
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: EMPTY
15918: LIST
15919: LIST
15920: LIST
15921: PUSH
15922: LD_INT 24
15924: PUSH
15925: LD_INT 251
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: PUSH
15932: EMPTY
15933: LIST
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 69
15941: ST_TO_ADDR
// if barrackList > 0 then
15942: LD_VAR 0 9
15946: PUSH
15947: LD_INT 0
15949: GREATER
15950: IFFALSE 16085
// begin if turretList = 0 then
15952: LD_VAR 0 7
15956: PUSH
15957: LD_INT 0
15959: EQUAL
15960: IFFALSE 16009
// begin for i in soldiers_list do
15962: LD_ADDR_VAR 0 4
15966: PUSH
15967: LD_VAR 0 6
15971: PUSH
15972: FOR_IN
15973: IFFALSE 16005
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15975: LD_VAR 0 4
15979: PPUSH
15980: LD_VAR 0 9
15984: PUSH
15985: LD_INT 1
15987: PPUSH
15988: LD_VAR 0 9
15992: PPUSH
15993: CALL_OW 12
15997: ARRAY
15998: PPUSH
15999: CALL_OW 120
16003: GO 15972
16005: POP
16006: POP
// end else
16007: GO 16085
// begin for i in barrackList do
16009: LD_ADDR_VAR 0 4
16013: PUSH
16014: LD_VAR 0 9
16018: PUSH
16019: FOR_IN
16020: IFFALSE 16083
// begin insideUnits = UnitsInside ( i ) ;
16022: LD_ADDR_VAR 0 10
16026: PUSH
16027: LD_VAR 0 4
16031: PPUSH
16032: CALL_OW 313
16036: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16037: LD_VAR 0 10
16041: PUSH
16042: LD_INT 1
16044: ARRAY
16045: PPUSH
16046: LD_VAR 0 7
16050: PUSH
16051: LD_INT 1
16053: ARRAY
16054: PPUSH
16055: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16059: LD_VAR 0 6
16063: PUSH
16064: LD_INT 1
16066: ARRAY
16067: PPUSH
16068: LD_VAR 0 7
16072: PUSH
16073: LD_INT 1
16075: ARRAY
16076: PPUSH
16077: CALL_OW 120
// end ;
16081: GO 16019
16083: POP
16084: POP
// end ; end ; end ;
16085: LD_VAR 0 3
16089: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16090: LD_INT 0
16092: PPUSH
16093: PPUSH
16094: PPUSH
16095: PPUSH
16096: PPUSH
16097: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16098: LD_ADDR_VAR 0 6
16102: PUSH
16103: LD_VAR 0 2
16107: PPUSH
16108: CALL_OW 313
16112: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16113: LD_ADDR_VAR 0 7
16117: PUSH
16118: LD_INT 22
16120: PUSH
16121: LD_VAR 0 1
16125: PUSH
16126: EMPTY
16127: LIST
16128: LIST
16129: PUSH
16130: LD_INT 25
16132: PUSH
16133: LD_INT 2
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: PUSH
16140: LD_INT 24
16142: PUSH
16143: LD_INT 1000
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: LD_INT 54
16155: PUSH
16156: EMPTY
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: LIST
16167: LIST
16168: PPUSH
16169: CALL_OW 69
16173: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16174: LD_ADDR_VAR 0 4
16178: PUSH
16179: LD_INT 22
16181: PUSH
16182: LD_VAR 0 1
16186: PUSH
16187: EMPTY
16188: LIST
16189: LIST
16190: PUSH
16191: LD_INT 21
16193: PUSH
16194: LD_INT 3
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PUSH
16201: LD_INT 3
16203: PUSH
16204: LD_INT 24
16206: PUSH
16207: LD_INT 1000
16209: PUSH
16210: EMPTY
16211: LIST
16212: LIST
16213: PUSH
16214: EMPTY
16215: LIST
16216: LIST
16217: PUSH
16218: EMPTY
16219: LIST
16220: LIST
16221: LIST
16222: PUSH
16223: EMPTY
16224: LIST
16225: PPUSH
16226: CALL_OW 69
16230: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16231: LD_VAR 0 4
16235: NOT
16236: PUSH
16237: LD_VAR 0 7
16241: NOT
16242: AND
16243: PUSH
16244: LD_EXP 42
16248: NOT
16249: AND
16250: IFFALSE 16254
// exit ;
16252: GO 16445
// if buildings_list > 0 and engineerOkInside then
16254: LD_VAR 0 4
16258: PUSH
16259: LD_INT 0
16261: GREATER
16262: PUSH
16263: LD_VAR 0 6
16267: AND
16268: IFFALSE 16322
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16270: LD_ADDR_VAR 0 5
16274: PUSH
16275: LD_INT 22
16277: PUSH
16278: LD_VAR 0 1
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 25
16289: PUSH
16290: LD_INT 2
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: PPUSH
16301: CALL_OW 69
16305: PUSH
16306: FOR_IN
16307: IFFALSE 16320
// ComExitBuilding ( i ) ;
16309: LD_VAR 0 5
16313: PPUSH
16314: CALL_OW 122
16318: GO 16306
16320: POP
16321: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16322: LD_VAR 0 4
16326: PUSH
16327: LD_INT 0
16329: GREATER
16330: PUSH
16331: LD_VAR 0 7
16335: PUSH
16336: LD_INT 0
16338: GREATER
16339: AND
16340: IFFALSE 16394
// begin for i in engineerOkOutside do
16342: LD_ADDR_VAR 0 5
16346: PUSH
16347: LD_VAR 0 7
16351: PUSH
16352: FOR_IN
16353: IFFALSE 16392
// for j in buildings_list do
16355: LD_ADDR_VAR 0 8
16359: PUSH
16360: LD_VAR 0 4
16364: PUSH
16365: FOR_IN
16366: IFFALSE 16388
// ComRepairBuilding ( i , j [ 1 ] ) ;
16368: LD_VAR 0 5
16372: PPUSH
16373: LD_VAR 0 8
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: CALL_OW 130
16386: GO 16365
16388: POP
16389: POP
16390: GO 16352
16392: POP
16393: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16394: LD_VAR 0 4
16398: PUSH
16399: LD_INT 0
16401: EQUAL
16402: PUSH
16403: LD_VAR 0 7
16407: PUSH
16408: LD_INT 0
16410: GREATER
16411: AND
16412: IFFALSE 16445
// for i in engineerOkOutside do
16414: LD_ADDR_VAR 0 5
16418: PUSH
16419: LD_VAR 0 7
16423: PUSH
16424: FOR_IN
16425: IFFALSE 16443
// ComEnterUnit ( i , building ) ;
16427: LD_VAR 0 5
16431: PPUSH
16432: LD_VAR 0 2
16436: PPUSH
16437: CALL_OW 120
16441: GO 16424
16443: POP
16444: POP
// end ;
16445: LD_VAR 0 3
16449: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16450: LD_INT 0
16452: PPUSH
16453: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16454: LD_INT 22
16456: PUSH
16457: LD_VAR 0 1
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 25
16468: PUSH
16469: LD_INT 2
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: PPUSH
16480: CALL_OW 69
16484: PUSH
16485: LD_INT 0
16487: GREATER
16488: PUSH
16489: LD_INT 22
16491: PUSH
16492: LD_VAR 0 1
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 21
16503: PUSH
16504: LD_INT 3
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 3
16513: PUSH
16514: LD_INT 24
16516: PUSH
16517: LD_INT 1000
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: PUSH
16524: EMPTY
16525: LIST
16526: LIST
16527: PUSH
16528: EMPTY
16529: LIST
16530: LIST
16531: LIST
16532: PPUSH
16533: CALL_OW 69
16537: PUSH
16538: LD_INT 0
16540: EQUAL
16541: AND
16542: PUSH
16543: LD_VAR 0 2
16547: PUSH
16548: LD_INT 0
16550: GREATER
16551: AND
16552: IFFALSE 16651
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16554: LD_ADDR_VAR 0 4
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_VAR 0 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 25
16573: PUSH
16574: LD_INT 2
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PPUSH
16585: CALL_OW 69
16589: PUSH
16590: FOR_IN
16591: IFFALSE 16649
// begin AddComExitBuilding ( i ) ;
16593: LD_VAR 0 4
16597: PPUSH
16598: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16602: LD_VAR 0 4
16606: PPUSH
16607: LD_VAR 0 2
16611: PUSH
16612: LD_INT 1
16614: ARRAY
16615: PPUSH
16616: LD_VAR 0 2
16620: PUSH
16621: LD_INT 2
16623: ARRAY
16624: PPUSH
16625: LD_VAR 0 2
16629: PUSH
16630: LD_INT 3
16632: ARRAY
16633: PPUSH
16634: LD_VAR 0 2
16638: PUSH
16639: LD_INT 4
16641: ARRAY
16642: PPUSH
16643: CALL_OW 205
// end ;
16647: GO 16590
16649: POP
16650: POP
// end ; end ;
16651: LD_VAR 0 3
16655: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16656: LD_INT 0
16658: PPUSH
16659: PPUSH
16660: PPUSH
16661: PPUSH
16662: PPUSH
16663: PPUSH
16664: PPUSH
16665: PPUSH
16666: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16667: LD_ADDR_VAR 0 6
16671: PUSH
16672: LD_INT 22
16674: PUSH
16675: LD_VAR 0 1
16679: PUSH
16680: EMPTY
16681: LIST
16682: LIST
16683: PUSH
16684: LD_INT 25
16686: PUSH
16687: LD_INT 4
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 24
16696: PUSH
16697: LD_INT 251
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: EMPTY
16705: LIST
16706: LIST
16707: LIST
16708: PPUSH
16709: CALL_OW 69
16713: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16714: LD_ADDR_VAR 0 7
16718: PUSH
16719: LD_VAR 0 3
16723: PPUSH
16724: LD_INT 22
16726: PUSH
16727: LD_VAR 0 1
16731: PUSH
16732: EMPTY
16733: LIST
16734: LIST
16735: PUSH
16736: LD_INT 25
16738: PUSH
16739: LD_INT 4
16741: PUSH
16742: EMPTY
16743: LIST
16744: LIST
16745: PUSH
16746: LD_INT 50
16748: PUSH
16749: EMPTY
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: LIST
16756: PPUSH
16757: CALL_OW 70
16761: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16762: LD_ADDR_VAR 0 10
16766: PUSH
16767: LD_VAR 0 3
16771: PPUSH
16772: LD_INT 22
16774: PUSH
16775: LD_VAR 0 1
16779: PUSH
16780: EMPTY
16781: LIST
16782: LIST
16783: PUSH
16784: LD_INT 21
16786: PUSH
16787: LD_INT 1
16789: PUSH
16790: EMPTY
16791: LIST
16792: LIST
16793: PUSH
16794: LD_INT 3
16796: PUSH
16797: LD_INT 25
16799: PUSH
16800: LD_INT 3
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PUSH
16811: LD_INT 3
16813: PUSH
16814: LD_INT 24
16816: PUSH
16817: LD_INT 750
16819: PUSH
16820: EMPTY
16821: LIST
16822: LIST
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: LIST
16832: LIST
16833: PPUSH
16834: CALL_OW 70
16838: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16839: LD_ADDR_VAR 0 11
16843: PUSH
16844: LD_VAR 0 2
16848: PPUSH
16849: LD_INT 22
16851: PUSH
16852: LD_VAR 0 1
16856: PUSH
16857: EMPTY
16858: LIST
16859: LIST
16860: PUSH
16861: LD_INT 21
16863: PUSH
16864: LD_INT 1
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PUSH
16871: LD_INT 3
16873: PUSH
16874: LD_INT 25
16876: PUSH
16877: LD_INT 3
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: PUSH
16884: EMPTY
16885: LIST
16886: LIST
16887: PUSH
16888: LD_INT 3
16890: PUSH
16891: LD_INT 24
16893: PUSH
16894: LD_INT 1000
16896: PUSH
16897: EMPTY
16898: LIST
16899: LIST
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: PPUSH
16911: CALL_OW 70
16915: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16916: LD_VAR 0 10
16920: NOT
16921: PUSH
16922: LD_VAR 0 7
16926: NOT
16927: AND
16928: PUSH
16929: LD_VAR 0 11
16933: NOT
16934: AND
16935: IFFALSE 16939
// exit ;
16937: GO 17199
// if damageUnits > 0 and sci_list > 0 then
16939: LD_VAR 0 10
16943: PUSH
16944: LD_INT 0
16946: GREATER
16947: PUSH
16948: LD_VAR 0 6
16952: PUSH
16953: LD_INT 0
16955: GREATER
16956: AND
16957: IFFALSE 16990
// for i in damageUnits do
16959: LD_ADDR_VAR 0 8
16963: PUSH
16964: LD_VAR 0 10
16968: PUSH
16969: FOR_IN
16970: IFFALSE 16988
// ComMoveToArea ( i , healArea ) ;
16972: LD_VAR 0 8
16976: PPUSH
16977: LD_VAR 0 2
16981: PPUSH
16982: CALL_OW 113
16986: GO 16969
16988: POP
16989: POP
// if unitsToHeal > 0 and sci_list > 0 then
16990: LD_VAR 0 11
16994: PUSH
16995: LD_INT 0
16997: GREATER
16998: PUSH
16999: LD_VAR 0 6
17003: PUSH
17004: LD_INT 0
17006: GREATER
17007: AND
17008: IFFALSE 17067
// begin for i in sci_list do
17010: LD_ADDR_VAR 0 8
17014: PUSH
17015: LD_VAR 0 6
17019: PUSH
17020: FOR_IN
17021: IFFALSE 17065
// begin ComExitBuilding ( i ) ;
17023: LD_VAR 0 8
17027: PPUSH
17028: CALL_OW 122
// for j in unitsToHeal do
17032: LD_ADDR_VAR 0 9
17036: PUSH
17037: LD_VAR 0 11
17041: PUSH
17042: FOR_IN
17043: IFFALSE 17061
// AddComHeal ( i , j ) ;
17045: LD_VAR 0 8
17049: PPUSH
17050: LD_VAR 0 9
17054: PPUSH
17055: CALL_OW 188
17059: GO 17042
17061: POP
17062: POP
// end ;
17063: GO 17020
17065: POP
17066: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17067: LD_VAR 0 10
17071: PUSH
17072: LD_INT 0
17074: EQUAL
17075: PUSH
17076: LD_VAR 0 11
17080: PUSH
17081: LD_INT 0
17083: EQUAL
17084: AND
17085: PUSH
17086: LD_VAR 0 7
17090: PUSH
17091: LD_INT 0
17093: GREATER
17094: AND
17095: IFFALSE 17199
// for i in sci_listOutside do
17097: LD_ADDR_VAR 0 8
17101: PUSH
17102: LD_VAR 0 7
17106: PUSH
17107: FOR_IN
17108: IFFALSE 17197
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17110: LD_ADDR_VAR 0 12
17114: PUSH
17115: LD_INT 22
17117: PUSH
17118: LD_VAR 0 1
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PUSH
17127: LD_INT 21
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: EMPTY
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 30
17139: PUSH
17140: LD_INT 8
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: PPUSH
17152: CALL_OW 69
17156: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17157: LD_ADDR_VAR 0 13
17161: PUSH
17162: LD_INT 1
17164: PPUSH
17165: LD_VAR 0 12
17169: PPUSH
17170: CALL_OW 12
17174: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17175: LD_VAR 0 8
17179: PPUSH
17180: LD_VAR 0 12
17184: PUSH
17185: LD_VAR 0 13
17189: ARRAY
17190: PPUSH
17191: CALL_OW 120
// end ;
17195: GO 17107
17197: POP
17198: POP
// end ;
17199: LD_VAR 0 5
17203: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17204: LD_INT 0
17206: PPUSH
17207: PPUSH
17208: PPUSH
17209: PPUSH
17210: PPUSH
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
// amChassisTab = [ ] ;
17217: LD_ADDR_VAR 0 19
17221: PUSH
17222: EMPTY
17223: ST_TO_ADDR
// arChassisTab = [ ] ;
17224: LD_ADDR_VAR 0 18
17228: PUSH
17229: EMPTY
17230: ST_TO_ADDR
// ruChassisTab = [ ] ;
17231: LD_ADDR_VAR 0 17
17235: PUSH
17236: EMPTY
17237: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17238: LD_INT 35
17240: PPUSH
17241: CALL_OW 67
// if nation = 1 then
17245: LD_VAR 0 5
17249: PUSH
17250: LD_INT 1
17252: EQUAL
17253: IFFALSE 17758
// begin uc_side = side ;
17255: LD_ADDR_OWVAR 20
17259: PUSH
17260: LD_VAR 0 2
17264: ST_TO_ADDR
// uc_nation = nation ;
17265: LD_ADDR_OWVAR 21
17269: PUSH
17270: LD_VAR 0 5
17274: ST_TO_ADDR
// vc_engine = vehengine ;
17275: LD_ADDR_OWVAR 39
17279: PUSH
17280: LD_VAR 0 6
17284: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17285: LD_ADDR_OWVAR 38
17289: PUSH
17290: LD_VAR 0 7
17294: PUSH
17295: LD_INT 1
17297: PPUSH
17298: LD_VAR 0 7
17302: PPUSH
17303: CALL_OW 12
17307: ARRAY
17308: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17309: LD_ADDR_OWVAR 40
17313: PUSH
17314: LD_VAR 0 10
17318: PUSH
17319: LD_INT 1
17321: PPUSH
17322: LD_VAR 0 10
17326: PPUSH
17327: CALL_OW 12
17331: ARRAY
17332: ST_TO_ADDR
// for j = 1 to AMWeapon do
17333: LD_ADDR_VAR 0 14
17337: PUSH
17338: DOUBLE
17339: LD_INT 1
17341: DEC
17342: ST_TO_ADDR
17343: LD_VAR 0 10
17347: PUSH
17348: FOR_TO
17349: IFFALSE 17650
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17351: LD_VAR 0 10
17355: PUSH
17356: LD_VAR 0 14
17360: ARRAY
17361: PUSH
17362: LD_INT 2
17364: EQUAL
17365: PUSH
17366: LD_VAR 0 10
17370: PUSH
17371: LD_VAR 0 14
17375: ARRAY
17376: PUSH
17377: LD_INT 3
17379: EQUAL
17380: OR
17381: IFFALSE 17434
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17383: LD_ADDR_VAR 0 19
17387: PUSH
17388: LD_INT 1
17390: PUSH
17391: LD_INT 2
17393: PUSH
17394: LD_INT 3
17396: PUSH
17397: LD_INT 4
17399: PUSH
17400: LD_INT 5
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: LIST
17407: LIST
17408: LIST
17409: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17410: LD_ADDR_OWVAR 37
17414: PUSH
17415: LD_VAR 0 19
17419: PUSH
17420: LD_INT 1
17422: PPUSH
17423: LD_VAR 0 19
17427: PPUSH
17428: CALL_OW 12
17432: ARRAY
17433: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17434: LD_VAR 0 10
17438: PUSH
17439: LD_VAR 0 14
17443: ARRAY
17444: PUSH
17445: LD_INT 4
17447: EQUAL
17448: PUSH
17449: LD_VAR 0 10
17453: PUSH
17454: LD_VAR 0 14
17458: ARRAY
17459: PUSH
17460: LD_INT 5
17462: EQUAL
17463: OR
17464: PUSH
17465: LD_VAR 0 10
17469: PUSH
17470: LD_VAR 0 14
17474: ARRAY
17475: PUSH
17476: LD_INT 9
17478: EQUAL
17479: OR
17480: PUSH
17481: LD_VAR 0 10
17485: PUSH
17486: LD_VAR 0 14
17490: ARRAY
17491: PUSH
17492: LD_INT 11
17494: EQUAL
17495: OR
17496: PUSH
17497: LD_VAR 0 10
17501: PUSH
17502: LD_VAR 0 14
17506: ARRAY
17507: PUSH
17508: LD_INT 7
17510: EQUAL
17511: OR
17512: IFFALSE 17561
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17514: LD_ADDR_VAR 0 19
17518: PUSH
17519: LD_INT 2
17521: PUSH
17522: LD_INT 3
17524: PUSH
17525: LD_INT 4
17527: PUSH
17528: LD_INT 5
17530: PUSH
17531: EMPTY
17532: LIST
17533: LIST
17534: LIST
17535: LIST
17536: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17537: LD_ADDR_OWVAR 37
17541: PUSH
17542: LD_VAR 0 19
17546: PUSH
17547: LD_INT 1
17549: PPUSH
17550: LD_VAR 0 19
17554: PPUSH
17555: CALL_OW 12
17559: ARRAY
17560: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17561: LD_VAR 0 10
17565: PUSH
17566: LD_VAR 0 14
17570: ARRAY
17571: PUSH
17572: LD_INT 8
17574: EQUAL
17575: PUSH
17576: LD_VAR 0 10
17580: PUSH
17581: LD_VAR 0 14
17585: ARRAY
17586: PUSH
17587: LD_INT 6
17589: EQUAL
17590: OR
17591: PUSH
17592: LD_VAR 0 10
17596: PUSH
17597: LD_VAR 0 14
17601: ARRAY
17602: PUSH
17603: LD_INT 10
17605: EQUAL
17606: OR
17607: IFFALSE 17648
// begin amChassisTab = [ 4 , 5 ] ;
17609: LD_ADDR_VAR 0 19
17613: PUSH
17614: LD_INT 4
17616: PUSH
17617: LD_INT 5
17619: PUSH
17620: EMPTY
17621: LIST
17622: LIST
17623: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17624: LD_ADDR_OWVAR 37
17628: PUSH
17629: LD_VAR 0 19
17633: PUSH
17634: LD_INT 1
17636: PPUSH
17637: LD_VAR 0 19
17641: PPUSH
17642: CALL_OW 12
17646: ARRAY
17647: ST_TO_ADDR
// end ; end ;
17648: GO 17348
17650: POP
17651: POP
// veh = CreateVehicle ;
17652: LD_ADDR_VAR 0 16
17656: PUSH
17657: CALL_OW 45
17661: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17662: LD_VAR 0 16
17666: PPUSH
17667: LD_VAR 0 1
17671: PPUSH
17672: LD_INT 0
17674: PPUSH
17675: CALL_OW 49
// if vc_control = 1 then
17679: LD_OWVAR 38
17683: PUSH
17684: LD_INT 1
17686: EQUAL
17687: IFFALSE 17744
// begin hc_gallery =  ;
17689: LD_ADDR_OWVAR 33
17693: PUSH
17694: LD_STRING 
17696: ST_TO_ADDR
// hc_name =  ;
17697: LD_ADDR_OWVAR 26
17701: PUSH
17702: LD_STRING 
17704: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17705: LD_INT 0
17707: PPUSH
17708: LD_INT 3
17710: PPUSH
17711: LD_VAR 0 4
17715: PPUSH
17716: CALL_OW 380
// un = CreateHuman ;
17720: LD_ADDR_VAR 0 15
17724: PUSH
17725: CALL_OW 44
17729: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17730: LD_VAR 0 15
17734: PPUSH
17735: LD_VAR 0 16
17739: PPUSH
17740: CALL_OW 52
// end ; i = i + 1 ;
17744: LD_ADDR_VAR 0 13
17748: PUSH
17749: LD_VAR 0 13
17753: PUSH
17754: LD_INT 1
17756: PLUS
17757: ST_TO_ADDR
// end ; if nation = 2 then
17758: LD_VAR 0 5
17762: PUSH
17763: LD_INT 2
17765: EQUAL
17766: IFFALSE 18188
// begin uc_side = side ;
17768: LD_ADDR_OWVAR 20
17772: PUSH
17773: LD_VAR 0 2
17777: ST_TO_ADDR
// uc_nation = nation ;
17778: LD_ADDR_OWVAR 21
17782: PUSH
17783: LD_VAR 0 5
17787: ST_TO_ADDR
// vc_engine = vehengine ;
17788: LD_ADDR_OWVAR 39
17792: PUSH
17793: LD_VAR 0 6
17797: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17798: LD_ADDR_OWVAR 38
17802: PUSH
17803: LD_VAR 0 7
17807: PUSH
17808: LD_INT 1
17810: PPUSH
17811: LD_VAR 0 7
17815: PPUSH
17816: CALL_OW 12
17820: ARRAY
17821: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17822: LD_ADDR_OWVAR 40
17826: PUSH
17827: LD_VAR 0 9
17831: PUSH
17832: LD_INT 1
17834: PPUSH
17835: LD_VAR 0 9
17839: PPUSH
17840: CALL_OW 12
17844: ARRAY
17845: ST_TO_ADDR
// for j = 1 to ARWeapons do
17846: LD_ADDR_VAR 0 14
17850: PUSH
17851: DOUBLE
17852: LD_INT 1
17854: DEC
17855: ST_TO_ADDR
17856: LD_VAR 0 9
17860: PUSH
17861: FOR_TO
17862: IFFALSE 18080
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17864: LD_VAR 0 9
17868: PUSH
17869: LD_VAR 0 14
17873: ARRAY
17874: PUSH
17875: LD_INT 24
17877: EQUAL
17878: PUSH
17879: LD_VAR 0 9
17883: PUSH
17884: LD_VAR 0 14
17888: ARRAY
17889: PUSH
17890: LD_INT 22
17892: EQUAL
17893: OR
17894: PUSH
17895: LD_VAR 0 9
17899: PUSH
17900: LD_VAR 0 14
17904: ARRAY
17905: PUSH
17906: LD_INT 23
17908: EQUAL
17909: OR
17910: PUSH
17911: LD_VAR 0 9
17915: PUSH
17916: LD_VAR 0 14
17920: ARRAY
17921: PUSH
17922: LD_INT 30
17924: EQUAL
17925: OR
17926: IFFALSE 17963
// begin arChassisTab = [ 14 ] ;
17928: LD_ADDR_VAR 0 18
17932: PUSH
17933: LD_INT 14
17935: PUSH
17936: EMPTY
17937: LIST
17938: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17939: LD_ADDR_OWVAR 37
17943: PUSH
17944: LD_VAR 0 18
17948: PUSH
17949: LD_INT 1
17951: PPUSH
17952: LD_VAR 0 18
17956: PPUSH
17957: CALL_OW 12
17961: ARRAY
17962: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17963: LD_VAR 0 9
17967: PUSH
17968: LD_VAR 0 14
17972: ARRAY
17973: PUSH
17974: LD_INT 29
17976: EQUAL
17977: PUSH
17978: LD_VAR 0 9
17982: PUSH
17983: LD_VAR 0 14
17987: ARRAY
17988: PUSH
17989: LD_INT 28
17991: EQUAL
17992: OR
17993: PUSH
17994: LD_VAR 0 9
17998: PUSH
17999: LD_VAR 0 14
18003: ARRAY
18004: PUSH
18005: LD_INT 27
18007: EQUAL
18008: OR
18009: PUSH
18010: LD_VAR 0 9
18014: PUSH
18015: LD_VAR 0 14
18019: ARRAY
18020: PUSH
18021: LD_INT 26
18023: EQUAL
18024: OR
18025: PUSH
18026: LD_VAR 0 9
18030: PUSH
18031: LD_VAR 0 14
18035: ARRAY
18036: PUSH
18037: LD_INT 25
18039: EQUAL
18040: OR
18041: IFFALSE 18078
// begin arChassisTab = [ 14 ] ;
18043: LD_ADDR_VAR 0 18
18047: PUSH
18048: LD_INT 14
18050: PUSH
18051: EMPTY
18052: LIST
18053: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18054: LD_ADDR_OWVAR 37
18058: PUSH
18059: LD_VAR 0 18
18063: PUSH
18064: LD_INT 1
18066: PPUSH
18067: LD_VAR 0 18
18071: PPUSH
18072: CALL_OW 12
18076: ARRAY
18077: ST_TO_ADDR
// end ; end ;
18078: GO 17861
18080: POP
18081: POP
// veh = CreateVehicle ;
18082: LD_ADDR_VAR 0 16
18086: PUSH
18087: CALL_OW 45
18091: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18092: LD_VAR 0 16
18096: PPUSH
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_INT 0
18104: PPUSH
18105: CALL_OW 49
// if vc_control = 1 then
18109: LD_OWVAR 38
18113: PUSH
18114: LD_INT 1
18116: EQUAL
18117: IFFALSE 18174
// begin hc_gallery =  ;
18119: LD_ADDR_OWVAR 33
18123: PUSH
18124: LD_STRING 
18126: ST_TO_ADDR
// hc_name =  ;
18127: LD_ADDR_OWVAR 26
18131: PUSH
18132: LD_STRING 
18134: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18135: LD_INT 0
18137: PPUSH
18138: LD_INT 3
18140: PPUSH
18141: LD_VAR 0 4
18145: PPUSH
18146: CALL_OW 380
// un = CreateHuman ;
18150: LD_ADDR_VAR 0 15
18154: PUSH
18155: CALL_OW 44
18159: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18160: LD_VAR 0 15
18164: PPUSH
18165: LD_VAR 0 16
18169: PPUSH
18170: CALL_OW 52
// end ; i = i + 1 ;
18174: LD_ADDR_VAR 0 13
18178: PUSH
18179: LD_VAR 0 13
18183: PUSH
18184: LD_INT 1
18186: PLUS
18187: ST_TO_ADDR
// end ; if nation = 3 then
18188: LD_VAR 0 5
18192: PUSH
18193: LD_INT 3
18195: EQUAL
18196: IFFALSE 18602
// begin uc_side = side ;
18198: LD_ADDR_OWVAR 20
18202: PUSH
18203: LD_VAR 0 2
18207: ST_TO_ADDR
// uc_nation = nation ;
18208: LD_ADDR_OWVAR 21
18212: PUSH
18213: LD_VAR 0 5
18217: ST_TO_ADDR
// vc_engine = vehengine ;
18218: LD_ADDR_OWVAR 39
18222: PUSH
18223: LD_VAR 0 6
18227: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18228: LD_ADDR_OWVAR 38
18232: PUSH
18233: LD_VAR 0 7
18237: PUSH
18238: LD_INT 1
18240: PPUSH
18241: LD_VAR 0 7
18245: PPUSH
18246: CALL_OW 12
18250: ARRAY
18251: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18252: LD_ADDR_OWVAR 40
18256: PUSH
18257: LD_VAR 0 8
18261: PUSH
18262: LD_INT 1
18264: PPUSH
18265: LD_VAR 0 8
18269: PPUSH
18270: CALL_OW 12
18274: ARRAY
18275: ST_TO_ADDR
// for j = 1 to RuWeapons do
18276: LD_ADDR_VAR 0 14
18280: PUSH
18281: DOUBLE
18282: LD_INT 1
18284: DEC
18285: ST_TO_ADDR
18286: LD_VAR 0 8
18290: PUSH
18291: FOR_TO
18292: IFFALSE 18494
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18294: LD_VAR 0 8
18298: PUSH
18299: LD_VAR 0 14
18303: ARRAY
18304: PUSH
18305: LD_INT 42
18307: EQUAL
18308: PUSH
18309: LD_VAR 0 8
18313: PUSH
18314: LD_VAR 0 14
18318: ARRAY
18319: PUSH
18320: LD_INT 43
18322: EQUAL
18323: OR
18324: PUSH
18325: LD_VAR 0 8
18329: PUSH
18330: LD_VAR 0 14
18334: ARRAY
18335: PUSH
18336: LD_INT 44
18338: EQUAL
18339: OR
18340: PUSH
18341: LD_VAR 0 8
18345: PUSH
18346: LD_VAR 0 14
18350: ARRAY
18351: PUSH
18352: LD_INT 45
18354: EQUAL
18355: OR
18356: PUSH
18357: LD_VAR 0 8
18361: PUSH
18362: LD_VAR 0 14
18366: ARRAY
18367: PUSH
18368: LD_INT 49
18370: EQUAL
18371: OR
18372: IFFALSE 18421
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18374: LD_ADDR_VAR 0 17
18378: PUSH
18379: LD_INT 21
18381: PUSH
18382: LD_INT 22
18384: PUSH
18385: LD_INT 23
18387: PUSH
18388: LD_INT 24
18390: PUSH
18391: EMPTY
18392: LIST
18393: LIST
18394: LIST
18395: LIST
18396: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18397: LD_ADDR_OWVAR 37
18401: PUSH
18402: LD_VAR 0 17
18406: PUSH
18407: LD_INT 1
18409: PPUSH
18410: LD_VAR 0 17
18414: PPUSH
18415: CALL_OW 12
18419: ARRAY
18420: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18421: LD_VAR 0 8
18425: PUSH
18426: LD_VAR 0 14
18430: ARRAY
18431: PUSH
18432: LD_INT 46
18434: EQUAL
18435: PUSH
18436: LD_VAR 0 8
18440: PUSH
18441: LD_VAR 0 14
18445: ARRAY
18446: PUSH
18447: LD_INT 47
18449: EQUAL
18450: OR
18451: IFFALSE 18492
// begin ruChassisTab = [ 23 , 24 ] ;
18453: LD_ADDR_VAR 0 17
18457: PUSH
18458: LD_INT 23
18460: PUSH
18461: LD_INT 24
18463: PUSH
18464: EMPTY
18465: LIST
18466: LIST
18467: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18468: LD_ADDR_OWVAR 37
18472: PUSH
18473: LD_VAR 0 17
18477: PUSH
18478: LD_INT 1
18480: PPUSH
18481: LD_VAR 0 17
18485: PPUSH
18486: CALL_OW 12
18490: ARRAY
18491: ST_TO_ADDR
// end ; end ;
18492: GO 18291
18494: POP
18495: POP
// veh = CreateVehicle ;
18496: LD_ADDR_VAR 0 16
18500: PUSH
18501: CALL_OW 45
18505: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18506: LD_VAR 0 16
18510: PPUSH
18511: LD_VAR 0 1
18515: PPUSH
18516: LD_INT 0
18518: PPUSH
18519: CALL_OW 49
// if vc_control = 1 then
18523: LD_OWVAR 38
18527: PUSH
18528: LD_INT 1
18530: EQUAL
18531: IFFALSE 18588
// begin hc_gallery =  ;
18533: LD_ADDR_OWVAR 33
18537: PUSH
18538: LD_STRING 
18540: ST_TO_ADDR
// hc_name =  ;
18541: LD_ADDR_OWVAR 26
18545: PUSH
18546: LD_STRING 
18548: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18549: LD_INT 0
18551: PPUSH
18552: LD_INT 3
18554: PPUSH
18555: LD_VAR 0 4
18559: PPUSH
18560: CALL_OW 380
// un = CreateHuman ;
18564: LD_ADDR_VAR 0 15
18568: PUSH
18569: CALL_OW 44
18573: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18574: LD_VAR 0 15
18578: PPUSH
18579: LD_VAR 0 16
18583: PPUSH
18584: CALL_OW 52
// end ; i = i + 1 ;
18588: LD_ADDR_VAR 0 13
18592: PUSH
18593: LD_VAR 0 13
18597: PUSH
18598: LD_INT 1
18600: PLUS
18601: ST_TO_ADDR
// end ; until i = vehCount ;
18602: LD_VAR 0 13
18606: PUSH
18607: LD_VAR 0 3
18611: EQUAL
18612: IFFALSE 17238
// repeat wait ( 0 0$1 ) ;
18614: LD_INT 35
18616: PPUSH
18617: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18621: LD_ADDR_VAR 0 20
18625: PUSH
18626: LD_INT 22
18628: PUSH
18629: LD_VAR 0 2
18633: PUSH
18634: EMPTY
18635: LIST
18636: LIST
18637: PUSH
18638: LD_INT 21
18640: PUSH
18641: LD_INT 2
18643: PUSH
18644: EMPTY
18645: LIST
18646: LIST
18647: PUSH
18648: LD_INT 24
18650: PUSH
18651: LD_INT 650
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: LIST
18662: PPUSH
18663: CALL_OW 69
18667: ST_TO_ADDR
// if vehicleOK_list > 0 then
18668: LD_VAR 0 20
18672: PUSH
18673: LD_INT 0
18675: GREATER
18676: IFFALSE 18867
// begin for i in vehicleOK_list do
18678: LD_ADDR_VAR 0 13
18682: PUSH
18683: LD_VAR 0 20
18687: PUSH
18688: FOR_IN
18689: IFFALSE 18865
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18691: LD_ADDR_VAR 0 21
18695: PUSH
18696: LD_INT 22
18698: PUSH
18699: LD_VAR 0 11
18703: PUSH
18704: EMPTY
18705: LIST
18706: LIST
18707: PPUSH
18708: CALL_OW 69
18712: PPUSH
18713: LD_VAR 0 13
18717: PPUSH
18718: CALL_OW 74
18722: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18723: LD_ADDR_VAR 0 22
18727: PUSH
18728: LD_INT 22
18730: PUSH
18731: LD_VAR 0 11
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: LD_INT 2
18742: PUSH
18743: LD_INT 59
18745: PUSH
18746: EMPTY
18747: LIST
18748: PUSH
18749: LD_INT 21
18751: PUSH
18752: LD_INT 1
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 21
18761: PUSH
18762: LD_INT 2
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: EMPTY
18780: LIST
18781: PPUSH
18782: CALL_OW 69
18786: PPUSH
18787: LD_VAR 0 13
18791: PPUSH
18792: CALL_OW 74
18796: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18797: LD_VAR 0 13
18801: PPUSH
18802: LD_VAR 0 21
18806: PPUSH
18807: CALL_OW 296
18811: PUSH
18812: LD_INT 8
18814: PLUS
18815: PUSH
18816: LD_VAR 0 13
18820: PPUSH
18821: LD_VAR 0 22
18825: PPUSH
18826: CALL_OW 296
18830: LESS
18831: IFFALSE 18849
// begin ComAttackUnit ( i , target1 ) ;
18833: LD_VAR 0 13
18837: PPUSH
18838: LD_VAR 0 21
18842: PPUSH
18843: CALL_OW 115
// end else
18847: GO 18863
// begin ComAttackUnit ( i , target2 ) ;
18849: LD_VAR 0 13
18853: PPUSH
18854: LD_VAR 0 22
18858: PPUSH
18859: CALL_OW 115
// end ; end ;
18863: GO 18688
18865: POP
18866: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18867: LD_INT 22
18869: PUSH
18870: LD_VAR 0 2
18874: PUSH
18875: EMPTY
18876: LIST
18877: LIST
18878: PUSH
18879: LD_INT 21
18881: PUSH
18882: LD_INT 2
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: PPUSH
18893: CALL_OW 69
18897: PUSH
18898: LD_INT 0
18900: EQUAL
18901: IFFALSE 18614
// end ;
18903: LD_VAR 0 12
18907: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18908: LD_INT 0
18910: PPUSH
18911: PPUSH
18912: PPUSH
18913: PPUSH
18914: PPUSH
18915: PPUSH
18916: PPUSH
18917: PPUSH
18918: PPUSH
18919: PPUSH
18920: PPUSH
// for i = 1 to soldierCount do
18921: LD_ADDR_VAR 0 13
18925: PUSH
18926: DOUBLE
18927: LD_INT 1
18929: DEC
18930: ST_TO_ADDR
18931: LD_VAR 0 3
18935: PUSH
18936: FOR_TO
18937: IFFALSE 19019
// begin uc_side = side ;
18939: LD_ADDR_OWVAR 20
18943: PUSH
18944: LD_VAR 0 1
18948: ST_TO_ADDR
// uc_nation = nation ;
18949: LD_ADDR_OWVAR 21
18953: PUSH
18954: LD_VAR 0 2
18958: ST_TO_ADDR
// hc_name =  ;
18959: LD_ADDR_OWVAR 26
18963: PUSH
18964: LD_STRING 
18966: ST_TO_ADDR
// hc_gallery =  ;
18967: LD_ADDR_OWVAR 33
18971: PUSH
18972: LD_STRING 
18974: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18975: LD_INT 0
18977: PPUSH
18978: LD_INT 1
18980: PPUSH
18981: LD_VAR 0 8
18985: PPUSH
18986: CALL_OW 380
// un = CreateHuman ;
18990: LD_ADDR_VAR 0 15
18994: PUSH
18995: CALL_OW 44
18999: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19000: LD_VAR 0 15
19004: PPUSH
19005: LD_VAR 0 9
19009: PPUSH
19010: LD_INT 0
19012: PPUSH
19013: CALL_OW 49
// end ;
19017: GO 18936
19019: POP
19020: POP
// for i = 1 to sniperCount do
19021: LD_ADDR_VAR 0 13
19025: PUSH
19026: DOUBLE
19027: LD_INT 1
19029: DEC
19030: ST_TO_ADDR
19031: LD_VAR 0 4
19035: PUSH
19036: FOR_TO
19037: IFFALSE 19119
// begin uc_side = side ;
19039: LD_ADDR_OWVAR 20
19043: PUSH
19044: LD_VAR 0 1
19048: ST_TO_ADDR
// uc_nation = nation ;
19049: LD_ADDR_OWVAR 21
19053: PUSH
19054: LD_VAR 0 2
19058: ST_TO_ADDR
// hc_name =  ;
19059: LD_ADDR_OWVAR 26
19063: PUSH
19064: LD_STRING 
19066: ST_TO_ADDR
// hc_gallery =  ;
19067: LD_ADDR_OWVAR 33
19071: PUSH
19072: LD_STRING 
19074: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19075: LD_INT 0
19077: PPUSH
19078: LD_INT 5
19080: PPUSH
19081: LD_VAR 0 8
19085: PPUSH
19086: CALL_OW 380
// un = CreateHuman ;
19090: LD_ADDR_VAR 0 15
19094: PUSH
19095: CALL_OW 44
19099: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19100: LD_VAR 0 15
19104: PPUSH
19105: LD_VAR 0 9
19109: PPUSH
19110: LD_INT 0
19112: PPUSH
19113: CALL_OW 49
// end ;
19117: GO 19036
19119: POP
19120: POP
// for i = 1 to bazookCount do
19121: LD_ADDR_VAR 0 13
19125: PUSH
19126: DOUBLE
19127: LD_INT 1
19129: DEC
19130: ST_TO_ADDR
19131: LD_VAR 0 5
19135: PUSH
19136: FOR_TO
19137: IFFALSE 19219
// begin uc_side = side ;
19139: LD_ADDR_OWVAR 20
19143: PUSH
19144: LD_VAR 0 1
19148: ST_TO_ADDR
// uc_nation = nation ;
19149: LD_ADDR_OWVAR 21
19153: PUSH
19154: LD_VAR 0 2
19158: ST_TO_ADDR
// hc_name =  ;
19159: LD_ADDR_OWVAR 26
19163: PUSH
19164: LD_STRING 
19166: ST_TO_ADDR
// hc_gallery =  ;
19167: LD_ADDR_OWVAR 33
19171: PUSH
19172: LD_STRING 
19174: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19175: LD_INT 0
19177: PPUSH
19178: LD_INT 9
19180: PPUSH
19181: LD_VAR 0 8
19185: PPUSH
19186: CALL_OW 380
// un = CreateHuman ;
19190: LD_ADDR_VAR 0 15
19194: PUSH
19195: CALL_OW 44
19199: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19200: LD_VAR 0 15
19204: PPUSH
19205: LD_VAR 0 9
19209: PPUSH
19210: LD_INT 0
19212: PPUSH
19213: CALL_OW 49
// end ;
19217: GO 19136
19219: POP
19220: POP
// for i = 1 to mortalCount do
19221: LD_ADDR_VAR 0 13
19225: PUSH
19226: DOUBLE
19227: LD_INT 1
19229: DEC
19230: ST_TO_ADDR
19231: LD_VAR 0 6
19235: PUSH
19236: FOR_TO
19237: IFFALSE 19319
// begin uc_side = side ;
19239: LD_ADDR_OWVAR 20
19243: PUSH
19244: LD_VAR 0 1
19248: ST_TO_ADDR
// uc_nation = nation ;
19249: LD_ADDR_OWVAR 21
19253: PUSH
19254: LD_VAR 0 2
19258: ST_TO_ADDR
// hc_name =  ;
19259: LD_ADDR_OWVAR 26
19263: PUSH
19264: LD_STRING 
19266: ST_TO_ADDR
// hc_gallery =  ;
19267: LD_ADDR_OWVAR 33
19271: PUSH
19272: LD_STRING 
19274: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19275: LD_INT 0
19277: PPUSH
19278: LD_INT 8
19280: PPUSH
19281: LD_VAR 0 8
19285: PPUSH
19286: CALL_OW 380
// un = CreateHuman ;
19290: LD_ADDR_VAR 0 15
19294: PUSH
19295: CALL_OW 44
19299: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19300: LD_VAR 0 15
19304: PPUSH
19305: LD_VAR 0 9
19309: PPUSH
19310: LD_INT 0
19312: PPUSH
19313: CALL_OW 49
// end ;
19317: GO 19236
19319: POP
19320: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19321: LD_ADDR_VAR 0 18
19325: PUSH
19326: LD_INT 22
19328: PUSH
19329: LD_VAR 0 1
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 2
19340: PUSH
19341: LD_INT 25
19343: PUSH
19344: LD_INT 1
19346: PUSH
19347: EMPTY
19348: LIST
19349: LIST
19350: PUSH
19351: LD_INT 25
19353: PUSH
19354: LD_INT 5
19356: PUSH
19357: EMPTY
19358: LIST
19359: LIST
19360: PUSH
19361: LD_INT 25
19363: PUSH
19364: LD_INT 8
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 25
19373: PUSH
19374: LD_INT 9
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: EMPTY
19382: LIST
19383: LIST
19384: LIST
19385: LIST
19386: LIST
19387: PUSH
19388: EMPTY
19389: LIST
19390: LIST
19391: PPUSH
19392: CALL_OW 69
19396: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19397: LD_ADDR_VAR 0 17
19401: PUSH
19402: LD_INT 22
19404: PUSH
19405: LD_VAR 0 1
19409: PUSH
19410: EMPTY
19411: LIST
19412: LIST
19413: PUSH
19414: LD_INT 25
19416: PUSH
19417: LD_INT 4
19419: PUSH
19420: EMPTY
19421: LIST
19422: LIST
19423: PUSH
19424: EMPTY
19425: LIST
19426: LIST
19427: PPUSH
19428: CALL_OW 69
19432: ST_TO_ADDR
// for i in medic_list do
19433: LD_ADDR_VAR 0 13
19437: PUSH
19438: LD_VAR 0 17
19442: PUSH
19443: FOR_IN
19444: IFFALSE 19462
// ComMoveToArea ( i , healArea ) ;
19446: LD_VAR 0 13
19450: PPUSH
19451: LD_VAR 0 10
19455: PPUSH
19456: CALL_OW 113
19460: GO 19443
19462: POP
19463: POP
// repeat wait ( 0 0$1 ) ;
19464: LD_INT 35
19466: PPUSH
19467: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19471: LD_ADDR_VAR 0 16
19475: PUSH
19476: LD_INT 22
19478: PUSH
19479: LD_VAR 0 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: PUSH
19491: LD_INT 3
19493: PUSH
19494: LD_INT 24
19496: PUSH
19497: LD_INT 550
19499: PUSH
19500: EMPTY
19501: LIST
19502: LIST
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 24
19510: PUSH
19511: LD_INT 250
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: PUSH
19518: EMPTY
19519: LIST
19520: LIST
19521: LIST
19522: PUSH
19523: EMPTY
19524: LIST
19525: LIST
19526: PPUSH
19527: CALL_OW 69
19531: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19532: LD_ADDR_VAR 0 18
19536: PUSH
19537: LD_INT 22
19539: PUSH
19540: LD_VAR 0 1
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PUSH
19549: LD_INT 2
19551: PUSH
19552: LD_INT 25
19554: PUSH
19555: LD_INT 1
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: PUSH
19562: LD_INT 25
19564: PUSH
19565: LD_INT 5
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PUSH
19572: LD_INT 25
19574: PUSH
19575: LD_INT 8
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 25
19584: PUSH
19585: LD_INT 9
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: EMPTY
19593: LIST
19594: LIST
19595: LIST
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 24
19601: PUSH
19602: LD_INT 1000
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: LIST
19613: PPUSH
19614: CALL_OW 69
19618: ST_TO_ADDR
// if medicCount > 0 then
19619: LD_VAR 0 7
19623: PUSH
19624: LD_INT 0
19626: GREATER
19627: IFFALSE 19701
// begin if damageUnit_list > 0 then
19629: LD_VAR 0 16
19633: PUSH
19634: LD_INT 0
19636: GREATER
19637: IFFALSE 19701
// begin for i in damageUnit_list do
19639: LD_ADDR_VAR 0 13
19643: PUSH
19644: LD_VAR 0 16
19648: PUSH
19649: FOR_IN
19650: IFFALSE 19699
// begin ComMoveToArea ( i , healArea ) ;
19652: LD_VAR 0 13
19656: PPUSH
19657: LD_VAR 0 10
19661: PPUSH
19662: CALL_OW 113
// for j in medic_list do
19666: LD_ADDR_VAR 0 14
19670: PUSH
19671: LD_VAR 0 17
19675: PUSH
19676: FOR_IN
19677: IFFALSE 19695
// AddComHeal ( j , i ) ;
19679: LD_VAR 0 14
19683: PPUSH
19684: LD_VAR 0 13
19688: PPUSH
19689: CALL_OW 188
19693: GO 19676
19695: POP
19696: POP
// end ;
19697: GO 19649
19699: POP
19700: POP
// end ; end ; for i in soldiersOK_list do
19701: LD_ADDR_VAR 0 13
19705: PUSH
19706: LD_VAR 0 18
19710: PUSH
19711: FOR_IN
19712: IFFALSE 19888
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19714: LD_ADDR_VAR 0 21
19718: PUSH
19719: LD_INT 22
19721: PUSH
19722: LD_VAR 0 11
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PPUSH
19731: CALL_OW 69
19735: PPUSH
19736: LD_VAR 0 13
19740: PPUSH
19741: CALL_OW 74
19745: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19746: LD_ADDR_VAR 0 22
19750: PUSH
19751: LD_INT 22
19753: PUSH
19754: LD_VAR 0 11
19758: PUSH
19759: EMPTY
19760: LIST
19761: LIST
19762: PUSH
19763: LD_INT 2
19765: PUSH
19766: LD_INT 59
19768: PUSH
19769: EMPTY
19770: LIST
19771: PUSH
19772: LD_INT 21
19774: PUSH
19775: LD_INT 1
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: PUSH
19782: LD_INT 21
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: EMPTY
19789: LIST
19790: LIST
19791: PUSH
19792: EMPTY
19793: LIST
19794: LIST
19795: LIST
19796: LIST
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: EMPTY
19803: LIST
19804: PPUSH
19805: CALL_OW 69
19809: PPUSH
19810: LD_VAR 0 13
19814: PPUSH
19815: CALL_OW 74
19819: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19820: LD_VAR 0 13
19824: PPUSH
19825: LD_VAR 0 21
19829: PPUSH
19830: CALL_OW 296
19834: PUSH
19835: LD_INT 8
19837: PLUS
19838: PUSH
19839: LD_VAR 0 13
19843: PPUSH
19844: LD_VAR 0 22
19848: PPUSH
19849: CALL_OW 296
19853: LESS
19854: IFFALSE 19872
// begin ComAttackUnit ( i , target1 ) ;
19856: LD_VAR 0 13
19860: PPUSH
19861: LD_VAR 0 21
19865: PPUSH
19866: CALL_OW 115
// end else
19870: GO 19886
// begin ComAttackUnit ( i , target2 ) ;
19872: LD_VAR 0 13
19876: PPUSH
19877: LD_VAR 0 22
19881: PPUSH
19882: CALL_OW 115
// end ; end ;
19886: GO 19711
19888: POP
19889: POP
// for i in soldiersOK_list do
19890: LD_ADDR_VAR 0 13
19894: PUSH
19895: LD_VAR 0 18
19899: PUSH
19900: FOR_IN
19901: IFFALSE 20077
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19903: LD_ADDR_VAR 0 21
19907: PUSH
19908: LD_INT 22
19910: PUSH
19911: LD_VAR 0 11
19915: PUSH
19916: EMPTY
19917: LIST
19918: LIST
19919: PPUSH
19920: CALL_OW 69
19924: PPUSH
19925: LD_VAR 0 13
19929: PPUSH
19930: CALL_OW 74
19934: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19935: LD_ADDR_VAR 0 22
19939: PUSH
19940: LD_INT 22
19942: PUSH
19943: LD_VAR 0 11
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 2
19954: PUSH
19955: LD_INT 59
19957: PUSH
19958: EMPTY
19959: LIST
19960: PUSH
19961: LD_INT 21
19963: PUSH
19964: LD_INT 1
19966: PUSH
19967: EMPTY
19968: LIST
19969: LIST
19970: PUSH
19971: LD_INT 21
19973: PUSH
19974: LD_INT 2
19976: PUSH
19977: EMPTY
19978: LIST
19979: LIST
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: LIST
19985: LIST
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: EMPTY
19992: LIST
19993: PPUSH
19994: CALL_OW 69
19998: PPUSH
19999: LD_VAR 0 13
20003: PPUSH
20004: CALL_OW 74
20008: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20009: LD_VAR 0 13
20013: PPUSH
20014: LD_VAR 0 21
20018: PPUSH
20019: CALL_OW 296
20023: PUSH
20024: LD_INT 8
20026: PLUS
20027: PUSH
20028: LD_VAR 0 13
20032: PPUSH
20033: LD_VAR 0 22
20037: PPUSH
20038: CALL_OW 296
20042: LESS
20043: IFFALSE 20061
// begin ComAttackUnit ( i , target1 ) ;
20045: LD_VAR 0 13
20049: PPUSH
20050: LD_VAR 0 21
20054: PPUSH
20055: CALL_OW 115
// end else
20059: GO 20075
// begin ComAttackUnit ( i , target2 ) ;
20061: LD_VAR 0 13
20065: PPUSH
20066: LD_VAR 0 22
20070: PPUSH
20071: CALL_OW 115
// end ; end ;
20075: GO 19900
20077: POP
20078: POP
// until soldiersOK_list = [ ] ;
20079: LD_VAR 0 18
20083: PUSH
20084: EMPTY
20085: EQUAL
20086: IFFALSE 19464
// end ;
20088: LD_VAR 0 12
20092: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20093: LD_INT 0
20095: PPUSH
20096: PPUSH
20097: PPUSH
20098: PPUSH
20099: PPUSH
20100: PPUSH
20101: PPUSH
// repeat wait ( 0 0$1 ) ;
20102: LD_INT 35
20104: PPUSH
20105: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20109: LD_ADDR_VAR 0 7
20113: PUSH
20114: LD_INT 22
20116: PUSH
20117: LD_INT 2
20119: PUSH
20120: EMPTY
20121: LIST
20122: LIST
20123: PUSH
20124: LD_INT 25
20126: PUSH
20127: LD_INT 4
20129: PUSH
20130: EMPTY
20131: LIST
20132: LIST
20133: PUSH
20134: LD_INT 3
20136: PUSH
20137: LD_INT 60
20139: PUSH
20140: EMPTY
20141: LIST
20142: PUSH
20143: EMPTY
20144: LIST
20145: LIST
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: LIST
20151: PPUSH
20152: CALL_OW 69
20156: ST_TO_ADDR
// if not tmp then
20157: LD_VAR 0 7
20161: NOT
20162: IFFALSE 20166
// continue ;
20164: GO 20102
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20166: LD_ADDR_VAR 0 3
20170: PUSH
20171: LD_INT 5
20173: PPUSH
20174: LD_INT 22
20176: PUSH
20177: LD_INT 0
20179: PUSH
20180: EMPTY
20181: LIST
20182: LIST
20183: PUSH
20184: LD_INT 25
20186: PUSH
20187: LD_INT 12
20189: PUSH
20190: EMPTY
20191: LIST
20192: LIST
20193: PUSH
20194: EMPTY
20195: LIST
20196: LIST
20197: PPUSH
20198: CALL_OW 70
20202: PUSH
20203: FOR_IN
20204: IFFALSE 20237
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20206: LD_VAR 0 7
20210: PPUSH
20211: LD_VAR 0 3
20215: PPUSH
20216: CALL_OW 250
20220: PPUSH
20221: LD_VAR 0 3
20225: PPUSH
20226: CALL_OW 251
20230: PPUSH
20231: CALL_OW 131
20235: GO 20203
20237: POP
20238: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20239: LD_INT 22
20241: PUSH
20242: LD_INT 2
20244: PUSH
20245: EMPTY
20246: LIST
20247: LIST
20248: PUSH
20249: LD_INT 25
20251: PUSH
20252: LD_INT 4
20254: PUSH
20255: EMPTY
20256: LIST
20257: LIST
20258: PUSH
20259: EMPTY
20260: LIST
20261: LIST
20262: PPUSH
20263: CALL_OW 69
20267: PUSH
20268: LD_INT 0
20270: EQUAL
20271: PUSH
20272: LD_INT 5
20274: PPUSH
20275: LD_INT 22
20277: PUSH
20278: LD_INT 0
20280: PUSH
20281: EMPTY
20282: LIST
20283: LIST
20284: PUSH
20285: LD_INT 25
20287: PUSH
20288: LD_INT 12
20290: PUSH
20291: EMPTY
20292: LIST
20293: LIST
20294: PUSH
20295: EMPTY
20296: LIST
20297: LIST
20298: PPUSH
20299: CALL_OW 70
20303: PUSH
20304: LD_INT 2
20306: LESS
20307: OR
20308: PUSH
20309: LD_OWVAR 1
20313: PUSH
20314: LD_INT 7000
20316: GREATEREQUAL
20317: OR
20318: IFFALSE 20102
// repeat wait ( 0 0$1 ) ;
20320: LD_INT 35
20322: PPUSH
20323: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20327: LD_ADDR_VAR 0 5
20331: PUSH
20332: LD_INT 22
20334: PUSH
20335: LD_INT 2
20337: PUSH
20338: EMPTY
20339: LIST
20340: LIST
20341: PUSH
20342: LD_INT 30
20344: PUSH
20345: LD_INT 5
20347: PUSH
20348: EMPTY
20349: LIST
20350: LIST
20351: PUSH
20352: EMPTY
20353: LIST
20354: LIST
20355: PPUSH
20356: CALL_OW 69
20360: ST_TO_ADDR
// until arm ;
20361: LD_VAR 0 5
20365: IFFALSE 20320
// wait ( 0 0$25 ) ;
20367: LD_INT 875
20369: PPUSH
20370: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20374: LD_ADDR_VAR 0 6
20378: PUSH
20379: LD_INT 22
20381: PUSH
20382: LD_INT 2
20384: PUSH
20385: EMPTY
20386: LIST
20387: LIST
20388: PUSH
20389: LD_INT 2
20391: PUSH
20392: LD_INT 30
20394: PUSH
20395: LD_INT 0
20397: PUSH
20398: EMPTY
20399: LIST
20400: LIST
20401: PUSH
20402: LD_INT 30
20404: PUSH
20405: LD_INT 1
20407: PUSH
20408: EMPTY
20409: LIST
20410: LIST
20411: PUSH
20412: EMPTY
20413: LIST
20414: LIST
20415: LIST
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PPUSH
20421: CALL_OW 69
20425: ST_TO_ADDR
// j := 0 ;
20426: LD_ADDR_VAR 0 3
20430: PUSH
20431: LD_INT 0
20433: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20434: LD_ADDR_VAR 0 2
20438: PUSH
20439: LD_INT 22
20441: PUSH
20442: LD_INT 2
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PUSH
20449: LD_INT 25
20451: PUSH
20452: LD_INT 12
20454: PUSH
20455: EMPTY
20456: LIST
20457: LIST
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PPUSH
20463: CALL_OW 69
20467: PUSH
20468: FOR_IN
20469: IFFALSE 20556
// begin ComMoveXY ( i , 63 , 16 ) ;
20471: LD_VAR 0 2
20475: PPUSH
20476: LD_INT 63
20478: PPUSH
20479: LD_INT 16
20481: PPUSH
20482: CALL_OW 111
// j := j + 1 ;
20486: LD_ADDR_VAR 0 3
20490: PUSH
20491: LD_VAR 0 3
20495: PUSH
20496: LD_INT 1
20498: PLUS
20499: ST_TO_ADDR
// if j < 5 then
20500: LD_VAR 0 3
20504: PUSH
20505: LD_INT 5
20507: LESS
20508: IFFALSE 20526
// b := arm [ 1 ] else
20510: LD_ADDR_VAR 0 4
20514: PUSH
20515: LD_VAR 0 5
20519: PUSH
20520: LD_INT 1
20522: ARRAY
20523: ST_TO_ADDR
20524: GO 20540
// b := dep [ 1 ] ;
20526: LD_ADDR_VAR 0 4
20530: PUSH
20531: LD_VAR 0 6
20535: PUSH
20536: LD_INT 1
20538: ARRAY
20539: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20540: LD_VAR 0 2
20544: PPUSH
20545: LD_VAR 0 4
20549: PPUSH
20550: CALL_OW 180
// end ;
20554: GO 20468
20556: POP
20557: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20558: LD_ADDR_VAR 0 2
20562: PUSH
20563: LD_INT 22
20565: PUSH
20566: LD_INT 2
20568: PUSH
20569: EMPTY
20570: LIST
20571: LIST
20572: PUSH
20573: LD_INT 25
20575: PUSH
20576: LD_INT 4
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PPUSH
20587: CALL_OW 69
20591: PUSH
20592: FOR_IN
20593: IFFALSE 20639
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20595: LD_VAR 0 2
20599: PPUSH
20600: LD_INT 22
20602: PUSH
20603: LD_INT 2
20605: PUSH
20606: EMPTY
20607: LIST
20608: LIST
20609: PUSH
20610: LD_INT 30
20612: PUSH
20613: LD_INT 8
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: EMPTY
20621: LIST
20622: LIST
20623: PPUSH
20624: CALL_OW 69
20628: PUSH
20629: LD_INT 1
20631: ARRAY
20632: PPUSH
20633: CALL_OW 120
20637: GO 20592
20639: POP
20640: POP
// end ;
20641: LD_VAR 0 1
20645: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20646: LD_INT 0
20648: PPUSH
20649: PPUSH
20650: PPUSH
20651: PPUSH
20652: PPUSH
20653: PPUSH
20654: PPUSH
20655: PPUSH
20656: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20657: LD_INT 22
20659: PUSH
20660: LD_VAR 0 1
20664: PUSH
20665: EMPTY
20666: LIST
20667: LIST
20668: PUSH
20669: LD_INT 21
20671: PUSH
20672: LD_INT 2
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PUSH
20679: EMPTY
20680: LIST
20681: LIST
20682: PPUSH
20683: CALL_OW 69
20687: PUSH
20688: LD_VAR 0 3
20692: LESSEQUAL
20693: IFFALSE 20837
// for i = 1 to vehCount do
20695: LD_ADDR_VAR 0 10
20699: PUSH
20700: DOUBLE
20701: LD_INT 1
20703: DEC
20704: ST_TO_ADDR
20705: LD_VAR 0 3
20709: PUSH
20710: FOR_TO
20711: IFFALSE 20835
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20713: LD_ADDR_VAR 0 12
20717: PUSH
20718: LD_VAR 0 5
20722: PUSH
20723: LD_INT 1
20725: PPUSH
20726: LD_VAR 0 5
20730: PPUSH
20731: CALL_OW 12
20735: ARRAY
20736: ST_TO_ADDR
// if randWeapon = 46 then
20737: LD_VAR 0 12
20741: PUSH
20742: LD_INT 46
20744: EQUAL
20745: IFFALSE 20790
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20747: LD_VAR 0 2
20751: PPUSH
20752: LD_INT 24
20754: PPUSH
20755: LD_VAR 0 6
20759: PPUSH
20760: LD_VAR 0 7
20764: PUSH
20765: LD_INT 1
20767: PPUSH
20768: LD_VAR 0 7
20772: PPUSH
20773: CALL_OW 12
20777: ARRAY
20778: PPUSH
20779: LD_VAR 0 12
20783: PPUSH
20784: CALL_OW 185
20788: GO 20833
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20790: LD_VAR 0 2
20794: PPUSH
20795: LD_VAR 0 8
20799: PPUSH
20800: LD_VAR 0 6
20804: PPUSH
20805: LD_VAR 0 7
20809: PUSH
20810: LD_INT 1
20812: PPUSH
20813: LD_VAR 0 7
20817: PPUSH
20818: CALL_OW 12
20822: ARRAY
20823: PPUSH
20824: LD_VAR 0 12
20828: PPUSH
20829: CALL_OW 185
// end ;
20833: GO 20710
20835: POP
20836: POP
// repeat wait ( 0 0$1 ) ;
20837: LD_INT 35
20839: PPUSH
20840: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20844: LD_INT 22
20846: PUSH
20847: LD_VAR 0 1
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: PUSH
20856: LD_INT 21
20858: PUSH
20859: LD_INT 2
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 24
20868: PUSH
20869: LD_INT 250
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: LIST
20880: PPUSH
20881: CALL_OW 69
20885: PUSH
20886: LD_VAR 0 3
20890: GREATEREQUAL
20891: IFFALSE 20837
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20893: LD_INT 22
20895: PUSH
20896: LD_VAR 0 1
20900: PUSH
20901: EMPTY
20902: LIST
20903: LIST
20904: PUSH
20905: LD_INT 21
20907: PUSH
20908: LD_INT 2
20910: PUSH
20911: EMPTY
20912: LIST
20913: LIST
20914: PUSH
20915: LD_INT 24
20917: PUSH
20918: LD_INT 250
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: LIST
20929: PPUSH
20930: CALL_OW 69
20934: PUSH
20935: LD_VAR 0 3
20939: GREATEREQUAL
20940: IFFALSE 21283
// begin repeat begin wait ( 0 0$1 ) ;
20942: LD_INT 35
20944: PPUSH
20945: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20949: LD_INT 22
20951: PUSH
20952: LD_VAR 0 1
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: PUSH
20961: LD_INT 21
20963: PUSH
20964: LD_INT 2
20966: PUSH
20967: EMPTY
20968: LIST
20969: LIST
20970: PUSH
20971: LD_INT 24
20973: PUSH
20974: LD_INT 651
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: LIST
20985: PPUSH
20986: CALL_OW 69
20990: PUSH
20991: LD_INT 0
20993: GREATER
20994: IFFALSE 21222
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
20996: LD_ADDR_VAR 0 10
21000: PUSH
21001: LD_INT 22
21003: PUSH
21004: LD_VAR 0 1
21008: PUSH
21009: EMPTY
21010: LIST
21011: LIST
21012: PUSH
21013: LD_INT 21
21015: PUSH
21016: LD_INT 2
21018: PUSH
21019: EMPTY
21020: LIST
21021: LIST
21022: PUSH
21023: LD_INT 24
21025: PUSH
21026: LD_INT 651
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: EMPTY
21034: LIST
21035: LIST
21036: LIST
21037: PPUSH
21038: CALL_OW 69
21042: PUSH
21043: FOR_IN
21044: IFFALSE 21220
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21046: LD_ADDR_VAR 0 16
21050: PUSH
21051: LD_INT 22
21053: PUSH
21054: LD_VAR 0 4
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PPUSH
21063: CALL_OW 69
21067: PPUSH
21068: LD_VAR 0 10
21072: PPUSH
21073: CALL_OW 74
21077: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21078: LD_ADDR_VAR 0 17
21082: PUSH
21083: LD_INT 22
21085: PUSH
21086: LD_VAR 0 4
21090: PUSH
21091: EMPTY
21092: LIST
21093: LIST
21094: PUSH
21095: LD_INT 2
21097: PUSH
21098: LD_INT 59
21100: PUSH
21101: EMPTY
21102: LIST
21103: PUSH
21104: LD_INT 21
21106: PUSH
21107: LD_INT 1
21109: PUSH
21110: EMPTY
21111: LIST
21112: LIST
21113: PUSH
21114: LD_INT 21
21116: PUSH
21117: LD_INT 2
21119: PUSH
21120: EMPTY
21121: LIST
21122: LIST
21123: PUSH
21124: EMPTY
21125: LIST
21126: LIST
21127: LIST
21128: LIST
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: EMPTY
21135: LIST
21136: PPUSH
21137: CALL_OW 69
21141: PPUSH
21142: LD_VAR 0 10
21146: PPUSH
21147: CALL_OW 74
21151: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21152: LD_VAR 0 10
21156: PPUSH
21157: LD_VAR 0 16
21161: PPUSH
21162: CALL_OW 296
21166: PUSH
21167: LD_INT 8
21169: PLUS
21170: PUSH
21171: LD_VAR 0 10
21175: PPUSH
21176: LD_VAR 0 17
21180: PPUSH
21181: CALL_OW 296
21185: LESS
21186: IFFALSE 21204
// begin ComAttackUnit ( i , target1 ) ;
21188: LD_VAR 0 10
21192: PPUSH
21193: LD_VAR 0 16
21197: PPUSH
21198: CALL_OW 115
// end else
21202: GO 21218
// begin ComAttackUnit ( i , target2 ) ;
21204: LD_VAR 0 10
21208: PPUSH
21209: LD_VAR 0 17
21213: PPUSH
21214: CALL_OW 115
// end ; end ;
21218: GO 21043
21220: POP
21221: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21222: LD_INT 22
21224: PUSH
21225: LD_VAR 0 1
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 21
21236: PUSH
21237: LD_INT 2
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: PPUSH
21248: CALL_OW 69
21252: PUSH
21253: LD_INT 0
21255: EQUAL
21256: PUSH
21257: LD_INT 22
21259: PUSH
21260: LD_VAR 0 4
21264: PUSH
21265: EMPTY
21266: LIST
21267: LIST
21268: PUSH
21269: EMPTY
21270: LIST
21271: PPUSH
21272: CALL_OW 69
21276: PUSH
21277: LD_INT 0
21279: EQUAL
21280: OR
21281: IFFALSE 20942
// end ; end ;
21283: LD_VAR 0 9
21287: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21288: LD_INT 0
21290: PPUSH
21291: PPUSH
21292: PPUSH
21293: PPUSH
// r := 100 ;
21294: LD_ADDR_VAR 0 5
21298: PUSH
21299: LD_INT 100
21301: ST_TO_ADDR
// x := 0 ;
21302: LD_ADDR_VAR 0 6
21306: PUSH
21307: LD_INT 0
21309: ST_TO_ADDR
// while ( x < n ) do
21310: LD_VAR 0 6
21314: PUSH
21315: LD_VAR 0 2
21319: LESS
21320: IFFALSE 21607
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21322: LD_ADDR_VAR 0 4
21326: PUSH
21327: DOUBLE
21328: LD_INT 1
21330: DEC
21331: ST_TO_ADDR
21332: LD_VAR 0 1
21336: PPUSH
21337: LD_INT 0
21339: PPUSH
21340: CALL_OW 517
21344: PUSH
21345: LD_INT 1
21347: ARRAY
21348: PUSH
21349: FOR_TO
21350: IFFALSE 21603
// begin if r > 50 then
21352: LD_VAR 0 5
21356: PUSH
21357: LD_INT 50
21359: GREATER
21360: IFFALSE 21579
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21362: LD_VAR 0 1
21366: PPUSH
21367: LD_INT 0
21369: PPUSH
21370: CALL_OW 517
21374: PUSH
21375: LD_INT 1
21377: ARRAY
21378: PUSH
21379: LD_VAR 0 4
21383: ARRAY
21384: PPUSH
21385: LD_VAR 0 1
21389: PPUSH
21390: LD_INT 0
21392: PPUSH
21393: CALL_OW 517
21397: PUSH
21398: LD_INT 2
21400: ARRAY
21401: PUSH
21402: LD_VAR 0 4
21406: ARRAY
21407: PPUSH
21408: CALL_OW 458
21412: NOT
21413: IFFALSE 21563
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21415: LD_VAR 0 1
21419: PPUSH
21420: LD_INT 0
21422: PPUSH
21423: CALL_OW 517
21427: PUSH
21428: LD_INT 1
21430: ARRAY
21431: PUSH
21432: LD_VAR 0 4
21436: ARRAY
21437: PPUSH
21438: LD_VAR 0 1
21442: PPUSH
21443: LD_INT 0
21445: PPUSH
21446: CALL_OW 517
21450: PUSH
21451: LD_INT 2
21453: ARRAY
21454: PUSH
21455: LD_VAR 0 4
21459: ARRAY
21460: PPUSH
21461: LD_INT 5
21463: PPUSH
21464: LD_INT 0
21466: PPUSH
21467: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21471: LD_ADDR_EXP 50
21475: PUSH
21476: LD_EXP 50
21480: PPUSH
21481: LD_INT 1
21483: PPUSH
21484: LD_VAR 0 1
21488: PPUSH
21489: LD_INT 0
21491: PPUSH
21492: CALL_OW 517
21496: PUSH
21497: LD_INT 1
21499: ARRAY
21500: PUSH
21501: LD_VAR 0 4
21505: ARRAY
21506: PUSH
21507: LD_VAR 0 1
21511: PPUSH
21512: LD_INT 0
21514: PPUSH
21515: CALL_OW 517
21519: PUSH
21520: LD_INT 2
21522: ARRAY
21523: PUSH
21524: LD_VAR 0 4
21528: ARRAY
21529: PUSH
21530: EMPTY
21531: LIST
21532: LIST
21533: PPUSH
21534: CALL_OW 2
21538: ST_TO_ADDR
// r := 0 ;
21539: LD_ADDR_VAR 0 5
21543: PUSH
21544: LD_INT 0
21546: ST_TO_ADDR
// x := x + 1 ;
21547: LD_ADDR_VAR 0 6
21551: PUSH
21552: LD_VAR 0 6
21556: PUSH
21557: LD_INT 1
21559: PLUS
21560: ST_TO_ADDR
// end else
21561: GO 21577
// r := r + 35 ;
21563: LD_ADDR_VAR 0 5
21567: PUSH
21568: LD_VAR 0 5
21572: PUSH
21573: LD_INT 35
21575: PLUS
21576: ST_TO_ADDR
// end else
21577: GO 21601
// r := r + rand ( 10 , 25 ) ;
21579: LD_ADDR_VAR 0 5
21583: PUSH
21584: LD_VAR 0 5
21588: PUSH
21589: LD_INT 10
21591: PPUSH
21592: LD_INT 25
21594: PPUSH
21595: CALL_OW 12
21599: PLUS
21600: ST_TO_ADDR
// end ;
21601: GO 21349
21603: POP
21604: POP
21605: GO 21310
// end ; end_of_file
21607: LD_VAR 0 3
21611: RET
// every 0 0$1 trigger russianAI = 1 do
21612: LD_EXP 39
21616: PUSH
21617: LD_INT 1
21619: EQUAL
21620: IFFALSE 21839
21622: GO 21624
21624: DISABLE
// begin enable ;
21625: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21626: LD_INT 3
21628: PPUSH
21629: LD_EXP 30
21633: PPUSH
21634: CALL 16090 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21638: LD_INT 3
21640: PPUSH
21641: LD_EXP 42
21645: PPUSH
21646: CALL 16450 0 2
// if ruPossition = 1 then
21650: LD_EXP 41
21654: PUSH
21655: LD_INT 1
21657: EQUAL
21658: IFFALSE 21713
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21660: LD_INT 3
21662: PPUSH
21663: LD_INT 13
21665: PPUSH
21666: LD_INT 10
21668: PPUSH
21669: LD_INT 22
21671: PUSH
21672: LD_INT 3
21674: PUSH
21675: EMPTY
21676: LIST
21677: LIST
21678: PUSH
21679: LD_INT 21
21681: PUSH
21682: LD_INT 3
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: PUSH
21689: LD_INT 30
21691: PUSH
21692: LD_INT 8
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: LIST
21703: PPUSH
21704: CALL_OW 69
21708: PPUSH
21709: CALL 16656 0 4
// if ruPossition = 2 then
21713: LD_EXP 41
21717: PUSH
21718: LD_INT 2
21720: EQUAL
21721: IFFALSE 21776
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21723: LD_INT 3
21725: PPUSH
21726: LD_INT 14
21728: PPUSH
21729: LD_INT 11
21731: PPUSH
21732: LD_INT 22
21734: PUSH
21735: LD_INT 3
21737: PUSH
21738: EMPTY
21739: LIST
21740: LIST
21741: PUSH
21742: LD_INT 21
21744: PUSH
21745: LD_INT 3
21747: PUSH
21748: EMPTY
21749: LIST
21750: LIST
21751: PUSH
21752: LD_INT 30
21754: PUSH
21755: LD_INT 8
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: LIST
21766: PPUSH
21767: CALL_OW 69
21771: PPUSH
21772: CALL 16656 0 4
// if ruPossition = 3 then
21776: LD_EXP 41
21780: PUSH
21781: LD_INT 3
21783: EQUAL
21784: IFFALSE 21839
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21786: LD_INT 3
21788: PPUSH
21789: LD_INT 15
21791: PPUSH
21792: LD_INT 12
21794: PPUSH
21795: LD_INT 22
21797: PUSH
21798: LD_INT 3
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: LD_INT 21
21807: PUSH
21808: LD_INT 3
21810: PUSH
21811: EMPTY
21812: LIST
21813: LIST
21814: PUSH
21815: LD_INT 30
21817: PUSH
21818: LD_INT 8
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: EMPTY
21826: LIST
21827: LIST
21828: LIST
21829: PPUSH
21830: CALL_OW 69
21834: PPUSH
21835: CALL 16656 0 4
// end ;
21839: END
// every 0 0$1 do
21840: GO 21842
21842: DISABLE
// begin enable ;
21843: ENABLE
// if ruPossition = 1 then
21844: LD_EXP 41
21848: PUSH
21849: LD_INT 1
21851: EQUAL
21852: IFFALSE 21864
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21854: LD_INT 3
21856: PPUSH
21857: LD_INT 10
21859: PPUSH
21860: CALL 15727 0 2
// if ruPossition = 2 then
21864: LD_EXP 41
21868: PUSH
21869: LD_INT 2
21871: EQUAL
21872: IFFALSE 21884
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21874: LD_INT 3
21876: PPUSH
21877: LD_INT 11
21879: PPUSH
21880: CALL 15727 0 2
// if ruPossition = 3 then
21884: LD_EXP 41
21888: PUSH
21889: LD_INT 3
21891: EQUAL
21892: IFFALSE 21904
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21894: LD_INT 3
21896: PPUSH
21897: LD_INT 12
21899: PPUSH
21900: CALL 15727 0 2
// IntBazooka ( 3 , 1 ) ;
21904: LD_INT 3
21906: PPUSH
21907: LD_INT 1
21909: PPUSH
21910: CALL 14526 0 2
// IntBazooka ( 6 , 1 ) ;
21914: LD_INT 6
21916: PPUSH
21917: LD_INT 1
21919: PPUSH
21920: CALL 14526 0 2
// end ;
21924: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21925: LD_EXP 39
21929: PUSH
21930: LD_INT 1
21932: EQUAL
21933: PUSH
21934: LD_EXP 35
21938: PPUSH
21939: CALL_OW 302
21943: AND
21944: PUSH
21945: LD_EXP 35
21949: PPUSH
21950: CALL_OW 255
21954: PUSH
21955: LD_INT 3
21957: EQUAL
21958: AND
21959: PUSH
21960: LD_INT 22
21962: PUSH
21963: LD_INT 3
21965: PUSH
21966: EMPTY
21967: LIST
21968: LIST
21969: PUSH
21970: LD_INT 21
21972: PUSH
21973: LD_INT 2
21975: PUSH
21976: EMPTY
21977: LIST
21978: LIST
21979: PUSH
21980: LD_INT 33
21982: PUSH
21983: LD_INT 3
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: EMPTY
21991: LIST
21992: LIST
21993: LIST
21994: PPUSH
21995: CALL_OW 69
21999: PUSH
22000: LD_INT 0
22002: EQUAL
22003: AND
22004: IFFALSE 22212
22006: GO 22008
22008: DISABLE
// begin enable ;
22009: ENABLE
// if Difficulty = 1 then
22010: LD_OWVAR 67
22014: PUSH
22015: LD_INT 1
22017: EQUAL
22018: IFFALSE 22080
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22020: LD_INT 3
22022: PPUSH
22023: LD_EXP 35
22027: PPUSH
22028: LD_INT 5
22030: PPUSH
22031: LD_INT 8
22033: PPUSH
22034: CALL_OW 12
22038: PPUSH
22039: LD_INT 1
22041: PPUSH
22042: LD_INT 43
22044: PUSH
22045: LD_INT 44
22047: PUSH
22048: LD_INT 45
22050: PUSH
22051: LD_INT 46
22053: PUSH
22054: EMPTY
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: PPUSH
22060: LD_INT 1
22062: PPUSH
22063: LD_INT 3
22065: PUSH
22066: LD_INT 3
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PPUSH
22073: LD_INT 22
22075: PPUSH
22076: CALL 20646 0 8
// if Difficulty = 2 then
22080: LD_OWVAR 67
22084: PUSH
22085: LD_INT 2
22087: EQUAL
22088: IFFALSE 22146
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22090: LD_INT 3
22092: PPUSH
22093: LD_EXP 35
22097: PPUSH
22098: LD_INT 6
22100: PPUSH
22101: LD_INT 8
22103: PPUSH
22104: CALL_OW 12
22108: PPUSH
22109: LD_INT 1
22111: PPUSH
22112: LD_INT 44
22114: PUSH
22115: LD_INT 45
22117: PUSH
22118: LD_INT 46
22120: PUSH
22121: EMPTY
22122: LIST
22123: LIST
22124: LIST
22125: PPUSH
22126: LD_INT 1
22128: PPUSH
22129: LD_INT 3
22131: PUSH
22132: LD_INT 3
22134: PUSH
22135: EMPTY
22136: LIST
22137: LIST
22138: PPUSH
22139: LD_INT 22
22141: PPUSH
22142: CALL 20646 0 8
// if Difficulty = 3 then
22146: LD_OWVAR 67
22150: PUSH
22151: LD_INT 3
22153: EQUAL
22154: IFFALSE 22212
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22156: LD_INT 3
22158: PPUSH
22159: LD_EXP 35
22163: PPUSH
22164: LD_INT 7
22166: PPUSH
22167: LD_INT 8
22169: PPUSH
22170: CALL_OW 12
22174: PPUSH
22175: LD_INT 1
22177: PPUSH
22178: LD_INT 44
22180: PUSH
22181: LD_INT 45
22183: PUSH
22184: LD_INT 46
22186: PUSH
22187: EMPTY
22188: LIST
22189: LIST
22190: LIST
22191: PPUSH
22192: LD_INT 1
22194: PPUSH
22195: LD_INT 3
22197: PUSH
22198: LD_INT 3
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PPUSH
22205: LD_INT 22
22207: PPUSH
22208: CALL 20646 0 8
// end ;
22212: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22213: LD_EXP 50
22217: PUSH
22218: LD_EXP 49
22222: AND
22223: IFFALSE 22344
22225: GO 22227
22227: DISABLE
22228: LD_INT 0
22230: PPUSH
// begin enable ;
22231: ENABLE
// for i in arabianMines do
22232: LD_ADDR_VAR 0 1
22236: PUSH
22237: LD_EXP 50
22241: PUSH
22242: FOR_IN
22243: IFFALSE 22342
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22245: LD_INT 22
22247: PUSH
22248: LD_INT 1
22250: PUSH
22251: EMPTY
22252: LIST
22253: LIST
22254: PUSH
22255: LD_INT 92
22257: PUSH
22258: LD_VAR 0 1
22262: PUSH
22263: LD_INT 1
22265: ARRAY
22266: PUSH
22267: LD_VAR 0 1
22271: PUSH
22272: LD_INT 2
22274: ARRAY
22275: PUSH
22276: LD_INT 3
22278: PUSH
22279: EMPTY
22280: LIST
22281: LIST
22282: LIST
22283: LIST
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PPUSH
22289: CALL_OW 69
22293: IFFALSE 22340
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22295: LD_VAR 0 1
22299: PUSH
22300: LD_INT 1
22302: ARRAY
22303: PPUSH
22304: LD_VAR 0 1
22308: PUSH
22309: LD_INT 2
22311: ARRAY
22312: PPUSH
22313: LD_INT 5
22315: PPUSH
22316: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22320: LD_ADDR_EXP 50
22324: PUSH
22325: LD_EXP 50
22329: PPUSH
22330: LD_VAR 0 1
22334: PPUSH
22335: CALL_OW 3
22339: ST_TO_ADDR
// end ; end ;
22340: GO 22242
22342: POP
22343: POP
// end ; end_of_file
22344: PPOPN 1
22346: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22347: LD_VAR 0 1
22351: PPUSH
22352: CALL_OW 255
22356: PUSH
22357: LD_INT 4
22359: EQUAL
22360: IFFALSE 22374
// SetBName ( building , epsilon ) ;
22362: LD_VAR 0 1
22366: PPUSH
22367: LD_STRING epsilon
22369: PPUSH
22370: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22374: LD_VAR 0 1
22378: PPUSH
22379: CALL_OW 255
22383: PUSH
22384: LD_INT 1
22386: EQUAL
22387: PUSH
22388: LD_VAR 0 1
22392: PPUSH
22393: CALL_OW 266
22397: PUSH
22398: LD_INT 0
22400: EQUAL
22401: AND
22402: IFFALSE 22416
// SetBName ( building , epsilon ) ;
22404: LD_VAR 0 1
22408: PPUSH
22409: LD_STRING epsilon
22411: PPUSH
22412: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22416: LD_VAR 0 1
22420: PPUSH
22421: CALL_OW 255
22425: PUSH
22426: LD_INT 3
22428: EQUAL
22429: PUSH
22430: LD_VAR 0 1
22434: PPUSH
22435: CALL_OW 266
22439: PUSH
22440: LD_INT 0
22442: EQUAL
22443: AND
22444: IFFALSE 22458
// SetBName ( building , chuikov ) ;
22446: LD_VAR 0 1
22450: PPUSH
22451: LD_STRING chuikov
22453: PPUSH
22454: CALL_OW 500
// if GetSide ( building ) = 2 then
22458: LD_VAR 0 1
22462: PPUSH
22463: CALL_OW 255
22467: PUSH
22468: LD_INT 2
22470: EQUAL
22471: IFFALSE 22527
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22473: LD_VAR 0 1
22477: PPUSH
22478: CALL_OW 266
22482: PUSH
22483: LD_INT 6
22485: EQUAL
22486: PUSH
22487: LD_VAR 0 1
22491: PPUSH
22492: CALL_OW 266
22496: PUSH
22497: LD_INT 9
22499: EQUAL
22500: OR
22501: IFFALSE 22527
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22503: LD_VAR 0 1
22507: PPUSH
22508: LD_INT 10
22510: PPUSH
22511: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22515: LD_VAR 0 1
22519: PPUSH
22520: LD_INT 11
22522: PPUSH
22523: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22527: LD_VAR 0 1
22531: PPUSH
22532: CALL_OW 255
22536: PUSH
22537: LD_INT 3
22539: EQUAL
22540: IFFALSE 22574
// begin ruDepotConstructed := true ;
22542: LD_ADDR_EXP 57
22546: PUSH
22547: LD_INT 1
22549: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22550: LD_VAR 0 1
22554: PPUSH
22555: CALL_OW 266
22559: PUSH
22560: LD_INT 2
22562: EQUAL
22563: IFFALSE 22574
// AddComUpgrade ( building ) ;
22565: LD_VAR 0 1
22569: PPUSH
22570: CALL_OW 206
// end ; end ;
22574: PPOPN 2
22576: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22577: LD_INT 0
22579: PPUSH
22580: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22581: LD_VAR 0 1
22585: PUSH
22586: LD_INT 22
22588: PUSH
22589: LD_INT 3
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: PUSH
22596: LD_INT 23
22598: PUSH
22599: LD_INT 3
22601: PUSH
22602: EMPTY
22603: LIST
22604: LIST
22605: PUSH
22606: LD_INT 21
22608: PUSH
22609: LD_INT 2
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: EMPTY
22617: LIST
22618: LIST
22619: LIST
22620: PPUSH
22621: CALL_OW 69
22625: IN
22626: PUSH
22627: LD_EXP 61
22631: NOT
22632: AND
22633: IFFALSE 22664
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22635: LD_ADDR_EXP 61
22639: PUSH
22640: LD_VAR 0 1
22644: PPUSH
22645: CALL_OW 250
22649: PUSH
22650: LD_VAR 0 1
22654: PPUSH
22655: CALL_OW 251
22659: PUSH
22660: EMPTY
22661: LIST
22662: LIST
22663: ST_TO_ADDR
// end ;
22664: PPOPN 3
22666: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22667: LD_VAR 0 2
22671: PPUSH
22672: CALL_OW 255
22676: PUSH
22677: LD_INT 3
22679: EQUAL
22680: PUSH
22681: LD_EXP 35
22685: PPUSH
22686: CALL_OW 255
22690: PUSH
22691: LD_INT 3
22693: EQUAL
22694: AND
22695: PUSH
22696: LD_EXP 35
22700: PPUSH
22701: CALL_OW 302
22705: AND
22706: IFFALSE 22722
// ComEnterUnit ( human , ruFab ) ;
22708: LD_VAR 0 2
22712: PPUSH
22713: LD_EXP 35
22717: PPUSH
22718: CALL_OW 120
// end ;
22722: PPOPN 2
22724: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22725: LD_INT 0
22727: PPUSH
22728: PPUSH
22729: PPUSH
22730: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22731: LD_VAR 0 1
22735: PPUSH
22736: CALL_OW 255
22740: PUSH
22741: LD_INT 1
22743: EQUAL
22744: PUSH
22745: LD_EXP 65
22749: PUSH
22750: LD_INT 0
22752: EQUAL
22753: AND
22754: IFFALSE 22956
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22756: LD_VAR 0 1
22760: PPUSH
22761: CALL_OW 266
22765: PUSH
22766: LD_INT 26
22768: EQUAL
22769: PUSH
22770: LD_VAR 0 1
22774: PPUSH
22775: CALL_OW 266
22779: PUSH
22780: LD_INT 27
22782: EQUAL
22783: OR
22784: PUSH
22785: LD_VAR 0 1
22789: PPUSH
22790: CALL_OW 266
22794: PUSH
22795: LD_INT 28
22797: EQUAL
22798: OR
22799: IFFALSE 22956
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22801: LD_INT 22
22803: PUSH
22804: LD_INT 1
22806: PUSH
22807: EMPTY
22808: LIST
22809: LIST
22810: PUSH
22811: LD_INT 2
22813: PUSH
22814: LD_INT 30
22816: PUSH
22817: LD_INT 7
22819: PUSH
22820: EMPTY
22821: LIST
22822: LIST
22823: PUSH
22824: LD_INT 30
22826: PUSH
22827: LD_INT 8
22829: PUSH
22830: EMPTY
22831: LIST
22832: LIST
22833: PUSH
22834: EMPTY
22835: LIST
22836: LIST
22837: LIST
22838: PUSH
22839: EMPTY
22840: LIST
22841: LIST
22842: PPUSH
22843: CALL_OW 69
22847: PUSH
22848: LD_INT 0
22850: GREATER
22851: IFFALSE 22956
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22853: LD_ADDR_VAR 0 2
22857: PUSH
22858: LD_INT 22
22860: PUSH
22861: LD_INT 1
22863: PUSH
22864: EMPTY
22865: LIST
22866: LIST
22867: PUSH
22868: LD_INT 2
22870: PUSH
22871: LD_INT 30
22873: PUSH
22874: LD_INT 7
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: PUSH
22881: LD_INT 30
22883: PUSH
22884: LD_INT 8
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: EMPTY
22892: LIST
22893: LIST
22894: LIST
22895: PUSH
22896: EMPTY
22897: LIST
22898: LIST
22899: PPUSH
22900: CALL_OW 69
22904: PUSH
22905: FOR_IN
22906: IFFALSE 22954
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22908: LD_VAR 0 2
22912: PPUSH
22913: LD_INT 1
22915: PPUSH
22916: CALL_OW 268
22920: PUSH
22921: LD_INT 11
22923: EQUAL
22924: PUSH
22925: LD_VAR 0 2
22929: PPUSH
22930: LD_INT 2
22932: PPUSH
22933: CALL_OW 268
22937: PUSH
22938: LD_INT 11
22940: EQUAL
22941: OR
22942: IFFALSE 22952
// eventVar1 = 1 ;
22944: LD_ADDR_EXP 65
22948: PUSH
22949: LD_INT 1
22951: ST_TO_ADDR
22952: GO 22905
22954: POP
22955: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22956: LD_VAR 0 1
22960: PPUSH
22961: CALL_OW 255
22965: PUSH
22966: LD_INT 3
22968: EQUAL
22969: IFFALSE 23449
// begin if GetBType ( building ) = b_depot then
22971: LD_VAR 0 1
22975: PPUSH
22976: CALL_OW 266
22980: PUSH
22981: LD_INT 0
22983: EQUAL
22984: IFFALSE 23056
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
22986: LD_VAR 0 1
22990: PPUSH
22991: CALL_OW 274
22995: PPUSH
22996: LD_INT 1
22998: PPUSH
22999: LD_INT 5000
23001: PPUSH
23002: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23006: LD_VAR 0 1
23010: PPUSH
23011: CALL_OW 274
23015: PPUSH
23016: LD_INT 2
23018: PPUSH
23019: LD_INT 300
23021: PPUSH
23022: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 274
23035: PPUSH
23036: LD_INT 3
23038: PPUSH
23039: LD_INT 100
23041: PPUSH
23042: CALL_OW 277
// ruDepot = building ;
23046: LD_ADDR_EXP 30
23050: PUSH
23051: LD_VAR 0 1
23055: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23056: LD_VAR 0 1
23060: PPUSH
23061: CALL_OW 266
23065: PUSH
23066: LD_INT 0
23068: EQUAL
23069: PUSH
23070: LD_VAR 0 1
23074: PPUSH
23075: CALL_OW 266
23079: PUSH
23080: LD_INT 2
23082: EQUAL
23083: OR
23084: PUSH
23085: LD_VAR 0 1
23089: PPUSH
23090: CALL_OW 266
23094: PUSH
23095: LD_INT 4
23097: EQUAL
23098: OR
23099: IFFALSE 23110
// ComUpgrade ( building ) ;
23101: LD_VAR 0 1
23105: PPUSH
23106: CALL_OW 146
// if GetBType ( building ) = b_lab then
23110: LD_VAR 0 1
23114: PPUSH
23115: CALL_OW 266
23119: PUSH
23120: LD_INT 6
23122: EQUAL
23123: IFFALSE 23326
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23125: LD_INT 22
23127: PUSH
23128: LD_INT 3
23130: PUSH
23131: EMPTY
23132: LIST
23133: LIST
23134: PUSH
23135: LD_INT 30
23137: PUSH
23138: LD_INT 8
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PUSH
23145: EMPTY
23146: LIST
23147: LIST
23148: PPUSH
23149: CALL_OW 69
23153: PUSH
23154: LD_INT 0
23156: EQUAL
23157: IFFALSE 23195
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23159: LD_VAR 0 1
23163: PPUSH
23164: LD_INT 10
23166: PPUSH
23167: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23171: LD_VAR 0 1
23175: PPUSH
23176: LD_INT 12
23178: PPUSH
23179: CALL_OW 207
// ruLab1 = building ;
23183: LD_ADDR_EXP 31
23187: PUSH
23188: LD_VAR 0 1
23192: ST_TO_ADDR
// end else
23193: GO 23229
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23195: LD_VAR 0 1
23199: PPUSH
23200: LD_INT 11
23202: PPUSH
23203: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23207: LD_VAR 0 1
23211: PPUSH
23212: LD_INT 14
23214: PPUSH
23215: CALL_OW 207
// ruLab2 = building ;
23219: LD_ADDR_EXP 32
23223: PUSH
23224: LD_VAR 0 1
23228: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23229: LD_INT 3
23231: PPUSH
23232: LD_VAR 0 1
23236: PPUSH
23237: LD_INT 3
23239: PPUSH
23240: CALL 15642 0 3
// if ruDestroyedBuildings > 0 then
23244: LD_EXP 42
23248: PUSH
23249: LD_INT 0
23251: GREATER
23252: IFFALSE 23326
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23254: LD_ADDR_EXP 42
23258: PUSH
23259: LD_EXP 42
23263: PPUSH
23264: LD_INT 1
23266: PPUSH
23267: CALL_OW 3
23271: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23272: LD_ADDR_EXP 42
23276: PUSH
23277: LD_EXP 42
23281: PPUSH
23282: LD_INT 1
23284: PPUSH
23285: CALL_OW 3
23289: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23290: LD_ADDR_EXP 42
23294: PUSH
23295: LD_EXP 42
23299: PPUSH
23300: LD_INT 1
23302: PPUSH
23303: CALL_OW 3
23307: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23308: LD_ADDR_EXP 42
23312: PUSH
23313: LD_EXP 42
23317: PPUSH
23318: LD_INT 1
23320: PPUSH
23321: CALL_OW 3
23325: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23326: LD_VAR 0 1
23330: PPUSH
23331: CALL_OW 266
23335: PUSH
23336: LD_INT 32
23338: EQUAL
23339: IFFALSE 23376
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23341: LD_VAR 0 1
23345: PPUSH
23346: LD_INT 44
23348: PUSH
23349: LD_INT 45
23351: PUSH
23352: LD_INT 46
23354: PUSH
23355: EMPTY
23356: LIST
23357: LIST
23358: LIST
23359: PUSH
23360: LD_INT 1
23362: PPUSH
23363: LD_INT 3
23365: PPUSH
23366: CALL_OW 12
23370: ARRAY
23371: PPUSH
23372: CALL_OW 208
// if GetBType ( building ) = b_turret then
23376: LD_VAR 0 1
23380: PPUSH
23381: CALL_OW 266
23385: PUSH
23386: LD_INT 33
23388: EQUAL
23389: IFFALSE 23426
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23391: LD_VAR 0 1
23395: PPUSH
23396: LD_INT 44
23398: PUSH
23399: LD_INT 45
23401: PUSH
23402: LD_INT 46
23404: PUSH
23405: EMPTY
23406: LIST
23407: LIST
23408: LIST
23409: PUSH
23410: LD_INT 1
23412: PPUSH
23413: LD_INT 3
23415: PPUSH
23416: CALL_OW 12
23420: ARRAY
23421: PPUSH
23422: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23426: LD_VAR 0 1
23430: PPUSH
23431: CALL_OW 266
23435: PUSH
23436: LD_INT 24
23438: EQUAL
23439: IFFALSE 23449
// russianAI = 1 ;
23441: LD_ADDR_EXP 39
23445: PUSH
23446: LD_INT 1
23448: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL_OW 255
23458: PUSH
23459: LD_INT 2
23461: EQUAL
23462: IFFALSE 24341
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23464: LD_VAR 0 1
23468: PPUSH
23469: CALL_OW 266
23473: PUSH
23474: LD_EXP 68
23478: PUSH
23479: LD_INT 1
23481: ARRAY
23482: PUSH
23483: LD_INT 1
23485: ARRAY
23486: EQUAL
23487: IFFALSE 23614
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23489: LD_ADDR_EXP 68
23493: PUSH
23494: LD_EXP 68
23498: PPUSH
23499: LD_INT 1
23501: PPUSH
23502: CALL_OW 3
23506: ST_TO_ADDR
// if arBuildingsTab then
23507: LD_EXP 68
23511: IFFALSE 23614
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23513: LD_ADDR_VAR 0 3
23517: PUSH
23518: LD_INT 22
23520: PUSH
23521: LD_INT 2
23523: PUSH
23524: EMPTY
23525: LIST
23526: LIST
23527: PUSH
23528: LD_INT 25
23530: PUSH
23531: LD_INT 2
23533: PUSH
23534: EMPTY
23535: LIST
23536: LIST
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: PPUSH
23542: CALL_OW 69
23546: ST_TO_ADDR
// if engineers then
23547: LD_VAR 0 3
23551: IFFALSE 23614
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23553: LD_VAR 0 3
23557: PPUSH
23558: LD_EXP 68
23562: PUSH
23563: LD_INT 1
23565: ARRAY
23566: PUSH
23567: LD_INT 1
23569: ARRAY
23570: PPUSH
23571: LD_EXP 68
23575: PUSH
23576: LD_INT 1
23578: ARRAY
23579: PUSH
23580: LD_INT 2
23582: ARRAY
23583: PPUSH
23584: LD_EXP 68
23588: PUSH
23589: LD_INT 1
23591: ARRAY
23592: PUSH
23593: LD_INT 3
23595: ARRAY
23596: PPUSH
23597: LD_EXP 68
23601: PUSH
23602: LD_INT 1
23604: ARRAY
23605: PUSH
23606: LD_INT 4
23608: ARRAY
23609: PPUSH
23610: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23614: LD_VAR 0 1
23618: PPUSH
23619: CALL_OW 266
23623: PUSH
23624: LD_INT 31
23626: EQUAL
23627: IFFALSE 23773
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23629: LD_ADDR_VAR 0 4
23633: PUSH
23634: LD_INT 22
23636: PUSH
23637: LD_INT 2
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_INT 2
23646: PUSH
23647: LD_INT 25
23649: PUSH
23650: LD_INT 1
23652: PUSH
23653: EMPTY
23654: LIST
23655: LIST
23656: PUSH
23657: LD_INT 25
23659: PUSH
23660: LD_INT 8
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: EMPTY
23668: LIST
23669: LIST
23670: LIST
23671: PUSH
23672: EMPTY
23673: LIST
23674: LIST
23675: PPUSH
23676: CALL_OW 69
23680: PUSH
23681: LD_EXP 26
23685: DIFF
23686: ST_TO_ADDR
// if not sol then
23687: LD_VAR 0 4
23691: NOT
23692: IFFALSE 23696
// exit ;
23694: GO 24341
// for i in sol do
23696: LD_ADDR_VAR 0 2
23700: PUSH
23701: LD_VAR 0 4
23705: PUSH
23706: FOR_IN
23707: IFFALSE 23771
// if not GetTag ( i ) then
23709: LD_VAR 0 2
23713: PPUSH
23714: CALL_OW 110
23718: NOT
23719: IFFALSE 23769
// begin if IsInUnit ( i ) then
23721: LD_VAR 0 2
23725: PPUSH
23726: CALL_OW 310
23730: IFFALSE 23741
// ComExitBuilding ( i ) ;
23732: LD_VAR 0 2
23736: PPUSH
23737: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23741: LD_VAR 0 2
23745: PPUSH
23746: LD_VAR 0 1
23750: PPUSH
23751: CALL_OW 180
// SetTag ( i , 11 ) ;
23755: LD_VAR 0 2
23759: PPUSH
23760: LD_INT 11
23762: PPUSH
23763: CALL_OW 109
// break ;
23767: GO 23771
// end ;
23769: GO 23706
23771: POP
23772: POP
// end ; if GetBType ( building ) = b_depot then
23773: LD_VAR 0 1
23777: PPUSH
23778: CALL_OW 266
23782: PUSH
23783: LD_INT 0
23785: EQUAL
23786: IFFALSE 23872
// begin arDepot = building ;
23788: LD_ADDR_EXP 43
23792: PUSH
23793: LD_VAR 0 1
23797: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23798: LD_INT 38
23800: PUSH
23801: LD_INT 47
23803: PUSH
23804: EMPTY
23805: LIST
23806: LIST
23807: PPUSH
23808: LD_INT 71
23810: PPUSH
23811: LD_INT 19
23813: PPUSH
23814: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23818: LD_VAR 0 1
23822: PPUSH
23823: CALL_OW 274
23827: PPUSH
23828: LD_INT 1
23830: PPUSH
23831: LD_INT 500
23833: PPUSH
23834: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 274
23847: PPUSH
23848: LD_INT 3
23850: PPUSH
23851: LD_INT 30
23853: PPUSH
23854: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23858: LD_EXP 26
23862: PPUSH
23863: LD_VAR 0 1
23867: PPUSH
23868: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23872: LD_VAR 0 1
23876: PPUSH
23877: CALL_OW 266
23881: PUSH
23882: LD_INT 6
23884: EQUAL
23885: PUSH
23886: LD_VAR 0 1
23890: PPUSH
23891: CALL_OW 266
23895: PUSH
23896: LD_INT 9
23898: EQUAL
23899: OR
23900: IFFALSE 23951
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23902: LD_VAR 0 1
23906: PPUSH
23907: LD_INT 10
23909: PPUSH
23910: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23914: LD_VAR 0 1
23918: PPUSH
23919: LD_INT 11
23921: PPUSH
23922: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23926: LD_INT 2
23928: PPUSH
23929: LD_VAR 0 1
23933: PPUSH
23934: LD_INT 2
23936: PPUSH
23937: CALL 15642 0 3
// arLab = building ;
23941: LD_ADDR_EXP 44
23945: PUSH
23946: LD_VAR 0 1
23950: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23951: LD_VAR 0 1
23955: PPUSH
23956: CALL_OW 266
23960: PUSH
23961: LD_INT 2
23963: EQUAL
23964: PUSH
23965: LD_VAR 0 1
23969: PPUSH
23970: CALL_OW 266
23974: PUSH
23975: LD_INT 4
23977: EQUAL
23978: OR
23979: IFFALSE 24050
// begin ComUpgrade ( building ) ;
23981: LD_VAR 0 1
23985: PPUSH
23986: CALL_OW 146
// if GetBType ( building ) = b_armoury then
23990: LD_VAR 0 1
23994: PPUSH
23995: CALL_OW 266
23999: PUSH
24000: LD_INT 4
24002: EQUAL
24003: IFFALSE 24050
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24005: LD_INT 22
24007: PUSH
24008: LD_INT 2
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: PUSH
24015: LD_INT 25
24017: PUSH
24018: LD_INT 1
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: PPUSH
24029: CALL_OW 69
24033: PUSH
24034: LD_EXP 26
24038: DIFF
24039: PPUSH
24040: LD_INT 75
24042: PPUSH
24043: LD_INT 21
24045: PPUSH
24046: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24050: LD_VAR 0 1
24054: PPUSH
24055: CALL_OW 266
24059: PUSH
24060: LD_INT 27
24062: EQUAL
24063: IFFALSE 24341
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24065: LD_INT 22
24067: PUSH
24068: LD_INT 2
24070: PUSH
24071: EMPTY
24072: LIST
24073: LIST
24074: PUSH
24075: LD_INT 30
24077: PUSH
24078: LD_INT 27
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: PUSH
24085: EMPTY
24086: LIST
24087: LIST
24088: PPUSH
24089: CALL_OW 69
24093: PUSH
24094: LD_INT 2
24096: EQUAL
24097: IFFALSE 24341
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24099: LD_ADDR_VAR 0 2
24103: PUSH
24104: LD_INT 22
24106: PUSH
24107: LD_INT 2
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 21
24116: PUSH
24117: LD_INT 1
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: LD_INT 25
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: EMPTY
24135: LIST
24136: LIST
24137: LIST
24138: PPUSH
24139: CALL_OW 69
24143: PUSH
24144: LD_INT 1
24146: ARRAY
24147: ST_TO_ADDR
// if not i then
24148: LD_VAR 0 2
24152: NOT
24153: IFFALSE 24157
// exit ;
24155: GO 24341
// AddComMoveXY ( i , 92 , 34 ) ;
24157: LD_VAR 0 2
24161: PPUSH
24162: LD_INT 92
24164: PPUSH
24165: LD_INT 34
24167: PPUSH
24168: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24172: LD_VAR 0 2
24176: PPUSH
24177: LD_INT 35
24179: PPUSH
24180: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24184: LD_VAR 0 2
24188: PPUSH
24189: LD_INT 101
24191: PPUSH
24192: LD_INT 20
24194: PPUSH
24195: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24199: LD_VAR 0 2
24203: PPUSH
24204: LD_INT 35
24206: PPUSH
24207: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24211: LD_VAR 0 2
24215: PPUSH
24216: LD_INT 115
24218: PPUSH
24219: LD_INT 30
24221: PPUSH
24222: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24226: LD_VAR 0 2
24230: PPUSH
24231: LD_INT 35
24233: PPUSH
24234: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24238: LD_VAR 0 2
24242: PPUSH
24243: LD_INT 82
24245: PPUSH
24246: LD_INT 57
24248: PPUSH
24249: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24253: LD_VAR 0 2
24257: PPUSH
24258: LD_INT 35
24260: PPUSH
24261: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24265: LD_VAR 0 2
24269: PPUSH
24270: LD_INT 36
24272: PPUSH
24273: LD_INT 28
24275: PPUSH
24276: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24280: LD_VAR 0 2
24284: PPUSH
24285: LD_INT 70
24287: PPUSH
24288: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24292: LD_INT 22
24294: PUSH
24295: LD_INT 2
24297: PUSH
24298: EMPTY
24299: LIST
24300: LIST
24301: PUSH
24302: LD_INT 21
24304: PUSH
24305: LD_INT 1
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: LD_INT 25
24314: PUSH
24315: LD_INT 2
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: EMPTY
24323: LIST
24324: LIST
24325: LIST
24326: PPUSH
24327: CALL_OW 69
24331: PPUSH
24332: LD_EXP 43
24336: PPUSH
24337: CALL_OW 180
// end ; end ; end ;
24341: PPOPN 5
24343: END
// on UpgradeComplete ( building ) do var i ;
24344: LD_INT 0
24346: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24347: LD_VAR 0 1
24351: PPUSH
24352: CALL_OW 255
24356: PUSH
24357: LD_INT 1
24359: EQUAL
24360: PUSH
24361: LD_EXP 65
24365: PUSH
24366: LD_INT 0
24368: EQUAL
24369: AND
24370: IFFALSE 24568
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24372: LD_VAR 0 1
24376: PPUSH
24377: CALL_OW 266
24381: PUSH
24382: LD_INT 7
24384: EQUAL
24385: PUSH
24386: LD_VAR 0 1
24390: PPUSH
24391: CALL_OW 266
24395: PUSH
24396: LD_INT 8
24398: EQUAL
24399: OR
24400: IFFALSE 24568
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24402: LD_INT 22
24404: PUSH
24405: LD_INT 1
24407: PUSH
24408: EMPTY
24409: LIST
24410: LIST
24411: PUSH
24412: LD_INT 2
24414: PUSH
24415: LD_INT 30
24417: PUSH
24418: LD_INT 26
24420: PUSH
24421: EMPTY
24422: LIST
24423: LIST
24424: PUSH
24425: LD_INT 30
24427: PUSH
24428: LD_INT 27
24430: PUSH
24431: EMPTY
24432: LIST
24433: LIST
24434: PUSH
24435: LD_INT 30
24437: PUSH
24438: LD_INT 28
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: EMPTY
24446: LIST
24447: LIST
24448: LIST
24449: LIST
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PPUSH
24455: CALL_OW 69
24459: PUSH
24460: LD_INT 0
24462: GREATER
24463: IFFALSE 24568
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24465: LD_ADDR_VAR 0 2
24469: PUSH
24470: LD_INT 22
24472: PUSH
24473: LD_INT 1
24475: PUSH
24476: EMPTY
24477: LIST
24478: LIST
24479: PUSH
24480: LD_INT 2
24482: PUSH
24483: LD_INT 30
24485: PUSH
24486: LD_INT 7
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: PUSH
24493: LD_INT 30
24495: PUSH
24496: LD_INT 8
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PUSH
24503: EMPTY
24504: LIST
24505: LIST
24506: LIST
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: PPUSH
24512: CALL_OW 69
24516: PUSH
24517: FOR_IN
24518: IFFALSE 24566
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24520: LD_VAR 0 2
24524: PPUSH
24525: LD_INT 1
24527: PPUSH
24528: CALL_OW 268
24532: PUSH
24533: LD_INT 11
24535: EQUAL
24536: PUSH
24537: LD_VAR 0 2
24541: PPUSH
24542: LD_INT 2
24544: PPUSH
24545: CALL_OW 268
24549: PUSH
24550: LD_INT 11
24552: EQUAL
24553: OR
24554: IFFALSE 24564
// eventVar1 = 1 ;
24556: LD_ADDR_EXP 65
24560: PUSH
24561: LD_INT 1
24563: ST_TO_ADDR
24564: GO 24517
24566: POP
24567: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24568: LD_VAR 0 1
24572: PPUSH
24573: CALL_OW 255
24577: PUSH
24578: LD_INT 2
24580: EQUAL
24581: IFFALSE 24686
// begin if GetBType ( building ) = b_barracks then
24583: LD_VAR 0 1
24587: PPUSH
24588: CALL_OW 266
24592: PUSH
24593: LD_INT 5
24595: EQUAL
24596: IFFALSE 24686
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24598: LD_ADDR_VAR 0 2
24602: PUSH
24603: LD_INT 22
24605: PUSH
24606: LD_INT 2
24608: PUSH
24609: EMPTY
24610: LIST
24611: LIST
24612: PUSH
24613: LD_INT 25
24615: PUSH
24616: LD_INT 1
24618: PUSH
24619: EMPTY
24620: LIST
24621: LIST
24622: PUSH
24623: LD_INT 3
24625: PUSH
24626: LD_INT 54
24628: PUSH
24629: EMPTY
24630: LIST
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: LIST
24640: PPUSH
24641: CALL_OW 69
24645: PUSH
24646: LD_EXP 26
24650: PUSH
24651: EMPTY
24652: LIST
24653: DIFF
24654: PUSH
24655: FOR_IN
24656: IFFALSE 24674
// ComEnterUnit ( i , building ) ;
24658: LD_VAR 0 2
24662: PPUSH
24663: LD_VAR 0 1
24667: PPUSH
24668: CALL_OW 120
24672: GO 24655
24674: POP
24675: POP
// arArm = building ;
24676: LD_ADDR_EXP 45
24680: PUSH
24681: LD_VAR 0 1
24685: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 255
24695: PUSH
24696: LD_INT 3
24698: EQUAL
24699: IFFALSE 25172
// begin if GetBType ( building ) = b_factory then
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 266
24710: PUSH
24711: LD_INT 3
24713: EQUAL
24714: IFFALSE 24781
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24716: LD_ADDR_VAR 0 2
24720: PUSH
24721: LD_INT 22
24723: PUSH
24724: LD_INT 3
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 25
24733: PUSH
24734: LD_INT 3
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PPUSH
24745: CALL_OW 69
24749: PUSH
24750: FOR_IN
24751: IFFALSE 24769
// ComEnterUnit ( i , building ) ;
24753: LD_VAR 0 2
24757: PPUSH
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 120
24767: GO 24750
24769: POP
24770: POP
// ruFab = building ;
24771: LD_ADDR_EXP 35
24775: PUSH
24776: LD_VAR 0 1
24780: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24781: LD_INT 22
24783: PUSH
24784: LD_INT 3
24786: PUSH
24787: EMPTY
24788: LIST
24789: LIST
24790: PUSH
24791: LD_INT 21
24793: PUSH
24794: LD_INT 3
24796: PUSH
24797: EMPTY
24798: LIST
24799: LIST
24800: PUSH
24801: LD_INT 30
24803: PUSH
24804: LD_INT 8
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: LIST
24815: PPUSH
24816: CALL_OW 69
24820: PUSH
24821: LD_INT 2
24823: EQUAL
24824: IFFALSE 25032
// begin for i = 1 to 2 do
24826: LD_ADDR_VAR 0 2
24830: PUSH
24831: DOUBLE
24832: LD_INT 1
24834: DEC
24835: ST_TO_ADDR
24836: LD_INT 2
24838: PUSH
24839: FOR_TO
24840: IFFALSE 24927
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24842: LD_INT 22
24844: PUSH
24845: LD_INT 3
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 25
24854: PUSH
24855: LD_INT 4
24857: PUSH
24858: EMPTY
24859: LIST
24860: LIST
24861: PUSH
24862: EMPTY
24863: LIST
24864: LIST
24865: PPUSH
24866: CALL_OW 69
24870: PUSH
24871: LD_VAR 0 2
24875: ARRAY
24876: PPUSH
24877: LD_INT 22
24879: PUSH
24880: LD_INT 3
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: PUSH
24887: LD_INT 21
24889: PUSH
24890: LD_INT 3
24892: PUSH
24893: EMPTY
24894: LIST
24895: LIST
24896: PUSH
24897: LD_INT 30
24899: PUSH
24900: LD_INT 8
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: EMPTY
24908: LIST
24909: LIST
24910: LIST
24911: PPUSH
24912: CALL_OW 69
24916: PUSH
24917: LD_INT 1
24919: ARRAY
24920: PPUSH
24921: CALL_OW 120
24925: GO 24839
24927: POP
24928: POP
// for i = 3 to 4 do
24929: LD_ADDR_VAR 0 2
24933: PUSH
24934: DOUBLE
24935: LD_INT 3
24937: DEC
24938: ST_TO_ADDR
24939: LD_INT 4
24941: PUSH
24942: FOR_TO
24943: IFFALSE 25030
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24945: LD_INT 22
24947: PUSH
24948: LD_INT 3
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: LD_INT 25
24957: PUSH
24958: LD_INT 4
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: EMPTY
24966: LIST
24967: LIST
24968: PPUSH
24969: CALL_OW 69
24973: PUSH
24974: LD_VAR 0 2
24978: ARRAY
24979: PPUSH
24980: LD_INT 22
24982: PUSH
24983: LD_INT 3
24985: PUSH
24986: EMPTY
24987: LIST
24988: LIST
24989: PUSH
24990: LD_INT 21
24992: PUSH
24993: LD_INT 3
24995: PUSH
24996: EMPTY
24997: LIST
24998: LIST
24999: PUSH
25000: LD_INT 30
25002: PUSH
25003: LD_INT 8
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: LIST
25014: PPUSH
25015: CALL_OW 69
25019: PUSH
25020: LD_INT 2
25022: ARRAY
25023: PPUSH
25024: CALL_OW 120
25028: GO 24942
25030: POP
25031: POP
// end ; if GetBType ( building ) = b_barracks then
25032: LD_VAR 0 1
25036: PPUSH
25037: CALL_OW 266
25041: PUSH
25042: LD_INT 5
25044: EQUAL
25045: IFFALSE 25172
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25047: LD_ADDR_VAR 0 2
25051: PUSH
25052: LD_INT 22
25054: PUSH
25055: LD_INT 3
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: PUSH
25062: LD_INT 25
25064: PUSH
25065: LD_INT 1
25067: PUSH
25068: EMPTY
25069: LIST
25070: LIST
25071: PUSH
25072: LD_INT 3
25074: PUSH
25075: LD_INT 54
25077: PUSH
25078: EMPTY
25079: LIST
25080: PUSH
25081: EMPTY
25082: LIST
25083: LIST
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: LIST
25089: PPUSH
25090: CALL_OW 69
25094: PUSH
25095: FOR_IN
25096: IFFALSE 25114
// ComEnterUnit ( i , building ) ;
25098: LD_VAR 0 2
25102: PPUSH
25103: LD_VAR 0 1
25107: PPUSH
25108: CALL_OW 120
25112: GO 25095
25114: POP
25115: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25116: LD_INT 22
25118: PUSH
25119: LD_INT 3
25121: PUSH
25122: EMPTY
25123: LIST
25124: LIST
25125: PUSH
25126: LD_INT 30
25128: PUSH
25129: LD_INT 5
25131: PUSH
25132: EMPTY
25133: LIST
25134: LIST
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PPUSH
25140: CALL_OW 69
25144: PUSH
25145: LD_INT 0
25147: EQUAL
25148: IFFALSE 25162
// ruArm1 = building else
25150: LD_ADDR_EXP 33
25154: PUSH
25155: LD_VAR 0 1
25159: ST_TO_ADDR
25160: GO 25172
// ruArm2 = building ;
25162: LD_ADDR_EXP 34
25166: PUSH
25167: LD_VAR 0 1
25171: ST_TO_ADDR
// end ; end ; end ;
25172: PPOPN 2
25174: END
// on EnterBuilding ( building , human ) do var rnd ;
25175: LD_INT 0
25177: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25178: LD_VAR 0 2
25182: PPUSH
25183: CALL_OW 255
25187: PUSH
25188: LD_INT 2
25190: EQUAL
25191: PUSH
25192: LD_VAR 0 2
25196: PPUSH
25197: CALL_OW 257
25201: PUSH
25202: LD_INT 1
25204: EQUAL
25205: AND
25206: PUSH
25207: LD_VAR 0 1
25211: PUSH
25212: LD_EXP 45
25216: EQUAL
25217: AND
25218: IFFALSE 25265
// begin wait ( 0 0$1 ) ;
25220: LD_INT 35
25222: PPUSH
25223: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25227: LD_ADDR_VAR 0 3
25231: PUSH
25232: LD_INT 1
25234: PPUSH
25235: LD_INT 100
25237: PPUSH
25238: CALL_OW 12
25242: ST_TO_ADDR
// if rnd > 50 then
25243: LD_VAR 0 3
25247: PUSH
25248: LD_INT 50
25250: GREATER
25251: IFFALSE 25265
// SetClass ( human , class_mortar ) ;
25253: LD_VAR 0 2
25257: PPUSH
25258: LD_INT 8
25260: PPUSH
25261: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25265: LD_VAR 0 2
25269: PUSH
25270: LD_INT 22
25272: PUSH
25273: LD_INT 2
25275: PUSH
25276: EMPTY
25277: LIST
25278: LIST
25279: PUSH
25280: LD_INT 25
25282: PUSH
25283: LD_INT 12
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: PPUSH
25294: CALL_OW 69
25298: IN
25299: IFFALSE 25349
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25301: LD_VAR 0 1
25305: PPUSH
25306: CALL_OW 266
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 1
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: IN
25321: IFFALSE 25337
// SetClass ( human , class_apeman_engineer ) else
25323: LD_VAR 0 2
25327: PPUSH
25328: LD_INT 16
25330: PPUSH
25331: CALL_OW 336
25335: GO 25349
// SetClass ( human , class_apeman_soldier ) ;
25337: LD_VAR 0 2
25341: PPUSH
25342: LD_INT 15
25344: PPUSH
25345: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25349: LD_VAR 0 2
25353: PPUSH
25354: CALL_OW 255
25358: PUSH
25359: LD_INT 3
25361: EQUAL
25362: PUSH
25363: LD_VAR 0 2
25367: PPUSH
25368: CALL_OW 257
25372: PUSH
25373: LD_INT 1
25375: EQUAL
25376: AND
25377: PUSH
25378: LD_VAR 0 1
25382: PUSH
25383: LD_EXP 33
25387: EQUAL
25388: PUSH
25389: LD_VAR 0 1
25393: PUSH
25394: LD_EXP 34
25398: EQUAL
25399: OR
25400: PUSH
25401: EMPTY
25402: LIST
25403: AND
25404: IFFALSE 25425
// begin wait ( 0 0$1 ) ;
25406: LD_INT 35
25408: PPUSH
25409: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25413: LD_VAR 0 2
25417: PPUSH
25418: LD_INT 9
25420: PPUSH
25421: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25425: LD_VAR 0 2
25429: PPUSH
25430: CALL_OW 255
25434: PUSH
25435: LD_INT 3
25437: EQUAL
25438: PUSH
25439: LD_VAR 0 2
25443: PPUSH
25444: CALL_OW 257
25448: PUSH
25449: LD_INT 9
25451: EQUAL
25452: AND
25453: PUSH
25454: LD_VAR 0 1
25458: PPUSH
25459: CALL_OW 266
25463: PUSH
25464: LD_INT 32
25466: EQUAL
25467: AND
25468: IFFALSE 25489
// begin wait ( 0 0$1 ) ;
25470: LD_INT 35
25472: PPUSH
25473: CALL_OW 67
// SetClass ( human , 1 ) ;
25477: LD_VAR 0 2
25481: PPUSH
25482: LD_INT 1
25484: PPUSH
25485: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25489: LD_VAR 0 2
25493: PPUSH
25494: CALL_OW 255
25498: PUSH
25499: LD_INT 3
25501: EQUAL
25502: PUSH
25503: LD_VAR 0 2
25507: PPUSH
25508: CALL_OW 257
25512: PUSH
25513: LD_INT 3
25515: EQUAL
25516: AND
25517: PUSH
25518: LD_VAR 0 1
25522: PUSH
25523: LD_EXP 35
25527: EQUAL
25528: AND
25529: IFFALSE 25543
// SetLives ( human , 1000 ) ;
25531: LD_VAR 0 2
25535: PPUSH
25536: LD_INT 1000
25538: PPUSH
25539: CALL_OW 234
// end ;
25543: PPOPN 3
25545: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25546: LD_VAR 0 1
25550: PUSH
25551: LD_INT 1
25553: EQUAL
25554: PUSH
25555: LD_VAR 0 2
25559: PUSH
25560: LD_INT 2
25562: EQUAL
25563: AND
25564: PUSH
25565: LD_INT 1
25567: PPUSH
25568: LD_INT 2
25570: PPUSH
25571: CALL_OW 81
25575: PUSH
25576: LD_INT 1
25578: EQUAL
25579: AND
25580: IFFALSE 25601
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25582: LD_EXP 24
25586: PPUSH
25587: LD_STRING D6b-Pow-1
25589: PPUSH
25590: CALL_OW 94
// YouLost ( Powell ) ;
25594: LD_STRING Powell
25596: PPUSH
25597: CALL_OW 104
// end ; end ;
25601: PPOPN 2
25603: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25604: LD_INT 23
25606: PPUSH
25607: LD_INT 22
25609: PUSH
25610: LD_INT 1
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 21
25619: PUSH
25620: LD_INT 3
25622: PUSH
25623: EMPTY
25624: LIST
25625: LIST
25626: PUSH
25627: EMPTY
25628: LIST
25629: LIST
25630: PPUSH
25631: CALL_OW 70
25635: PUSH
25636: LD_INT 23
25638: PPUSH
25639: LD_INT 22
25641: PUSH
25642: LD_INT 1
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: PUSH
25649: LD_INT 21
25651: PUSH
25652: LD_INT 2
25654: PUSH
25655: EMPTY
25656: LIST
25657: LIST
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: PPUSH
25663: CALL_OW 70
25667: OR
25668: PUSH
25669: LD_INT 1
25671: PPUSH
25672: LD_INT 2
25674: PPUSH
25675: CALL_OW 81
25679: PUSH
25680: LD_INT 1
25682: EQUAL
25683: AND
25684: IFFALSE 25817
25686: GO 25688
25688: DISABLE
// begin enable ;
25689: ENABLE
// wait ( 0 0$10 ) ;
25690: LD_INT 350
25692: PPUSH
25693: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25697: LD_INT 23
25699: PPUSH
25700: LD_INT 22
25702: PUSH
25703: LD_INT 1
25705: PUSH
25706: EMPTY
25707: LIST
25708: LIST
25709: PUSH
25710: LD_INT 21
25712: PUSH
25713: LD_INT 3
25715: PUSH
25716: EMPTY
25717: LIST
25718: LIST
25719: PUSH
25720: EMPTY
25721: LIST
25722: LIST
25723: PPUSH
25724: CALL_OW 70
25728: PUSH
25729: LD_INT 23
25731: PPUSH
25732: LD_INT 22
25734: PUSH
25735: LD_INT 1
25737: PUSH
25738: EMPTY
25739: LIST
25740: LIST
25741: PUSH
25742: LD_INT 21
25744: PUSH
25745: LD_INT 2
25747: PUSH
25748: EMPTY
25749: LIST
25750: LIST
25751: PUSH
25752: EMPTY
25753: LIST
25754: LIST
25755: PPUSH
25756: CALL_OW 70
25760: OR
25761: PUSH
25762: LD_INT 1
25764: PPUSH
25765: LD_INT 2
25767: PPUSH
25768: CALL_OW 81
25772: PUSH
25773: LD_INT 1
25775: EQUAL
25776: AND
25777: IFFALSE 25817
// begin disable ;
25779: DISABLE
// InGameOn ;
25780: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25784: LD_INT 73
25786: PPUSH
25787: LD_INT 18
25789: PPUSH
25790: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25794: LD_EXP 24
25798: PPUSH
25799: LD_STRING D6b-Pow-1
25801: PPUSH
25802: CALL_OW 94
// YouLost ( Powell ) ;
25806: LD_STRING Powell
25808: PPUSH
25809: CALL_OW 104
// InGameOff ;
25813: CALL_OW 9
// end ; end ;
25817: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
25818: LD_VAR 0 1
25822: PUSH
25823: LD_EXP 1
25827: EQUAL
25828: IFFALSE 25837
// YouLost ( JMM ) ;
25830: LD_STRING JMM
25832: PPUSH
25833: CALL_OW 104
// if unit = Khatam then
25837: LD_VAR 0 1
25841: PUSH
25842: LD_EXP 14
25846: EQUAL
25847: IFFALSE 25857
// KhatamStatus = 0 ;
25849: LD_ADDR_EXP 53
25853: PUSH
25854: LD_INT 0
25856: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25857: LD_VAR 0 1
25861: PPUSH
25862: CALL_OW 255
25866: PUSH
25867: LD_INT 3
25869: EQUAL
25870: PUSH
25871: LD_VAR 0 1
25875: PPUSH
25876: CALL_OW 247
25880: PUSH
25881: LD_INT 3
25883: EQUAL
25884: AND
25885: IFFALSE 26577
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25887: LD_VAR 0 1
25891: PPUSH
25892: CALL_OW 266
25896: PUSH
25897: LD_INT 31
25899: EQUAL
25900: PUSH
25901: LD_VAR 0 1
25905: PPUSH
25906: CALL_OW 266
25910: PUSH
25911: LD_INT 32
25913: EQUAL
25914: OR
25915: PUSH
25916: LD_VAR 0 1
25920: PPUSH
25921: CALL_OW 266
25925: PUSH
25926: LD_INT 36
25928: EQUAL
25929: OR
25930: PUSH
25931: LD_VAR 0 1
25935: PPUSH
25936: CALL_OW 266
25940: PUSH
25941: LD_INT 0
25943: EQUAL
25944: OR
25945: PUSH
25946: LD_VAR 0 1
25950: PPUSH
25951: CALL_OW 266
25955: PUSH
25956: LD_INT 24
25958: EQUAL
25959: OR
25960: PUSH
25961: LD_VAR 0 1
25965: PPUSH
25966: CALL_OW 266
25970: PUSH
25971: LD_INT 17
25973: EQUAL
25974: OR
25975: PUSH
25976: LD_VAR 0 1
25980: PPUSH
25981: CALL_OW 266
25985: PUSH
25986: LD_INT 25
25988: EQUAL
25989: OR
25990: PUSH
25991: LD_VAR 0 1
25995: PPUSH
25996: CALL_OW 266
26000: PUSH
26001: LD_INT 19
26003: EQUAL
26004: OR
26005: PUSH
26006: LD_VAR 0 1
26010: PPUSH
26011: CALL_OW 266
26015: PUSH
26016: LD_INT 20
26018: EQUAL
26019: OR
26020: PUSH
26021: LD_VAR 0 1
26025: PPUSH
26026: CALL_OW 266
26030: PUSH
26031: LD_INT 18
26033: EQUAL
26034: OR
26035: PUSH
26036: LD_VAR 0 1
26040: PPUSH
26041: CALL_OW 266
26045: PUSH
26046: LD_INT 21
26048: EQUAL
26049: OR
26050: PUSH
26051: LD_VAR 0 1
26055: PPUSH
26056: CALL_OW 266
26060: PUSH
26061: LD_INT 23
26063: EQUAL
26064: OR
26065: PUSH
26066: LD_VAR 0 1
26070: PPUSH
26071: CALL_OW 266
26075: PUSH
26076: LD_INT 16
26078: EQUAL
26079: OR
26080: PUSH
26081: LD_VAR 0 1
26085: PPUSH
26086: CALL_OW 266
26090: PUSH
26091: LD_INT 6
26093: EQUAL
26094: OR
26095: PUSH
26096: LD_VAR 0 1
26100: PPUSH
26101: CALL_OW 266
26105: PUSH
26106: LD_INT 29
26108: EQUAL
26109: OR
26110: PUSH
26111: LD_VAR 0 1
26115: PPUSH
26116: CALL_OW 266
26120: PUSH
26121: LD_INT 26
26123: EQUAL
26124: OR
26125: PUSH
26126: LD_VAR 0 1
26130: PPUSH
26131: CALL_OW 266
26135: PUSH
26136: LD_INT 30
26138: EQUAL
26139: OR
26140: PUSH
26141: LD_VAR 0 1
26145: PPUSH
26146: CALL_OW 266
26150: PUSH
26151: LD_INT 28
26153: EQUAL
26154: OR
26155: PUSH
26156: LD_VAR 0 1
26160: PPUSH
26161: CALL_OW 266
26165: PUSH
26166: LD_INT 27
26168: EQUAL
26169: OR
26170: PUSH
26171: LD_VAR 0 1
26175: PPUSH
26176: CALL_OW 266
26180: PUSH
26181: LD_INT 33
26183: EQUAL
26184: OR
26185: PUSH
26186: LD_VAR 0 1
26190: PPUSH
26191: CALL_OW 266
26195: PUSH
26196: LD_INT 2
26198: EQUAL
26199: OR
26200: PUSH
26201: LD_VAR 0 1
26205: PPUSH
26206: CALL_OW 266
26210: PUSH
26211: LD_INT 4
26213: EQUAL
26214: OR
26215: IFFALSE 26301
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26217: LD_ADDR_EXP 42
26221: PUSH
26222: LD_EXP 42
26226: PUSH
26227: LD_VAR 0 1
26231: PPUSH
26232: CALL_OW 266
26236: ADD
26237: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26238: LD_ADDR_EXP 42
26242: PUSH
26243: LD_EXP 42
26247: PUSH
26248: LD_VAR 0 1
26252: PPUSH
26253: CALL_OW 250
26257: ADD
26258: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26259: LD_ADDR_EXP 42
26263: PUSH
26264: LD_EXP 42
26268: PUSH
26269: LD_VAR 0 1
26273: PPUSH
26274: CALL_OW 251
26278: ADD
26279: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26280: LD_ADDR_EXP 42
26284: PUSH
26285: LD_EXP 42
26289: PUSH
26290: LD_VAR 0 1
26294: PPUSH
26295: CALL_OW 254
26299: ADD
26300: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26301: LD_VAR 0 1
26305: PPUSH
26306: CALL_OW 266
26310: PUSH
26311: LD_INT 1
26313: EQUAL
26314: IFFALSE 26393
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26316: LD_ADDR_EXP 42
26320: PUSH
26321: LD_EXP 42
26325: PUSH
26326: LD_INT 0
26328: ADD
26329: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26330: LD_ADDR_EXP 42
26334: PUSH
26335: LD_EXP 42
26339: PUSH
26340: LD_VAR 0 1
26344: PPUSH
26345: CALL_OW 250
26349: ADD
26350: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26351: LD_ADDR_EXP 42
26355: PUSH
26356: LD_EXP 42
26360: PUSH
26361: LD_VAR 0 1
26365: PPUSH
26366: CALL_OW 251
26370: ADD
26371: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26372: LD_ADDR_EXP 42
26376: PUSH
26377: LD_EXP 42
26381: PUSH
26382: LD_VAR 0 1
26386: PPUSH
26387: CALL_OW 254
26391: ADD
26392: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26393: LD_VAR 0 1
26397: PPUSH
26398: CALL_OW 266
26402: PUSH
26403: LD_INT 3
26405: EQUAL
26406: IFFALSE 26485
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26408: LD_ADDR_EXP 42
26412: PUSH
26413: LD_EXP 42
26417: PUSH
26418: LD_INT 2
26420: ADD
26421: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26422: LD_ADDR_EXP 42
26426: PUSH
26427: LD_EXP 42
26431: PUSH
26432: LD_VAR 0 1
26436: PPUSH
26437: CALL_OW 250
26441: ADD
26442: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26443: LD_ADDR_EXP 42
26447: PUSH
26448: LD_EXP 42
26452: PUSH
26453: LD_VAR 0 1
26457: PPUSH
26458: CALL_OW 251
26462: ADD
26463: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26464: LD_ADDR_EXP 42
26468: PUSH
26469: LD_EXP 42
26473: PUSH
26474: LD_VAR 0 1
26478: PPUSH
26479: CALL_OW 254
26483: ADD
26484: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26485: LD_VAR 0 1
26489: PPUSH
26490: CALL_OW 266
26494: PUSH
26495: LD_INT 5
26497: EQUAL
26498: IFFALSE 26577
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26500: LD_ADDR_EXP 42
26504: PUSH
26505: LD_EXP 42
26509: PUSH
26510: LD_INT 4
26512: ADD
26513: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26514: LD_ADDR_EXP 42
26518: PUSH
26519: LD_EXP 42
26523: PUSH
26524: LD_VAR 0 1
26528: PPUSH
26529: CALL_OW 250
26533: ADD
26534: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26535: LD_ADDR_EXP 42
26539: PUSH
26540: LD_EXP 42
26544: PUSH
26545: LD_VAR 0 1
26549: PPUSH
26550: CALL_OW 251
26554: ADD
26555: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26556: LD_ADDR_EXP 42
26560: PUSH
26561: LD_EXP 42
26565: PUSH
26566: LD_VAR 0 1
26570: PPUSH
26571: CALL_OW 254
26575: ADD
26576: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26577: LD_EXP 51
26581: PUSH
26582: LD_VAR 0 1
26586: PPUSH
26587: CALL_OW 257
26591: PUSH
26592: LD_INT 3
26594: EQUAL
26595: AND
26596: PUSH
26597: LD_VAR 0 1
26601: PPUSH
26602: CALL_OW 255
26606: PUSH
26607: LD_INT 3
26609: EQUAL
26610: AND
26611: PUSH
26612: LD_EXP 35
26616: PPUSH
26617: CALL_OW 302
26621: AND
26622: PUSH
26623: LD_EXP 35
26627: PPUSH
26628: CALL_OW 255
26632: PUSH
26633: LD_INT 3
26635: EQUAL
26636: AND
26637: IFFALSE 26721
// begin ruMech := ruMech - 1 ;
26639: LD_ADDR_EXP 51
26643: PUSH
26644: LD_EXP 51
26648: PUSH
26649: LD_INT 1
26651: MINUS
26652: ST_TO_ADDR
// uc_side = 3 ;
26653: LD_ADDR_OWVAR 20
26657: PUSH
26658: LD_INT 3
26660: ST_TO_ADDR
// uc_nation = 3 ;
26661: LD_ADDR_OWVAR 21
26665: PUSH
26666: LD_INT 3
26668: ST_TO_ADDR
// hc_gallery :=  ;
26669: LD_ADDR_OWVAR 33
26673: PUSH
26674: LD_STRING 
26676: ST_TO_ADDR
// hc_name :=  ;
26677: LD_ADDR_OWVAR 26
26681: PUSH
26682: LD_STRING 
26684: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26685: LD_INT 0
26687: PPUSH
26688: LD_EXP 36
26692: PPUSH
26693: LD_EXP 37
26697: PPUSH
26698: CALL_OW 12
26702: PPUSH
26703: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26707: CALL_OW 44
26711: PPUSH
26712: LD_EXP 35
26716: PPUSH
26717: CALL_OW 52
// end ; end ;
26721: PPOPN 1
26723: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26724: LD_ADDR_OWVAR 57
26728: PUSH
26729: LD_INT 0
26731: ST_TO_ADDR
// fastEnd = 1 ;
26732: LD_ADDR_EXP 63
26736: PUSH
26737: LD_INT 1
26739: ST_TO_ADDR
// FinishMission ;
26740: CALL 27900 0 0
// end ;
26744: PPOPN 1
26746: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26747: LD_VAR 0 1
26751: PPUSH
26752: CALL 43040 0 1
// end ; end_of_file
26756: PPOPN 1
26758: END
// export function CreateNature ; var i , un ; begin
26759: LD_INT 0
26761: PPUSH
26762: PPUSH
26763: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26764: LD_ADDR_VAR 0 2
26768: PUSH
26769: DOUBLE
26770: LD_INT 1
26772: DEC
26773: ST_TO_ADDR
26774: LD_OWVAR 67
26778: PUSH
26779: LD_INT 1
26781: PPUSH
26782: LD_INT 5
26784: PPUSH
26785: CALL_OW 12
26789: PLUS
26790: PUSH
26791: FOR_TO
26792: IFFALSE 26937
// begin hc_sex = sex_male ;
26794: LD_ADDR_OWVAR 27
26798: PUSH
26799: LD_INT 1
26801: ST_TO_ADDR
// uc_side = 0 ;
26802: LD_ADDR_OWVAR 20
26806: PUSH
26807: LD_INT 0
26809: ST_TO_ADDR
// uc_nation = nation_nature ;
26810: LD_ADDR_OWVAR 21
26814: PUSH
26815: LD_INT 0
26817: ST_TO_ADDR
// hc_class = class_apeman ;
26818: LD_ADDR_OWVAR 28
26822: PUSH
26823: LD_INT 12
26825: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26826: LD_ADDR_OWVAR 31
26830: PUSH
26831: LD_INT 2
26833: PPUSH
26834: LD_INT 7
26836: PPUSH
26837: CALL_OW 12
26841: PUSH
26842: LD_OWVAR 67
26846: PLUS
26847: PUSH
26848: LD_INT 2
26850: PPUSH
26851: LD_INT 10
26853: PPUSH
26854: CALL_OW 12
26858: PUSH
26859: LD_INT 2
26861: PPUSH
26862: LD_INT 10
26864: PPUSH
26865: CALL_OW 12
26869: PUSH
26870: LD_INT 2
26872: PPUSH
26873: LD_INT 10
26875: PPUSH
26876: CALL_OW 12
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: LIST
26885: LIST
26886: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26887: LD_ADDR_OWVAR 35
26891: PUSH
26892: LD_INT 5
26894: NEG
26895: PPUSH
26896: LD_INT 5
26898: PPUSH
26899: CALL_OW 12
26903: PUSH
26904: LD_OWVAR 67
26908: MUL
26909: ST_TO_ADDR
// un = CreateHuman ;
26910: LD_ADDR_VAR 0 3
26914: PUSH
26915: CALL_OW 44
26919: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26920: LD_VAR 0 3
26924: PPUSH
26925: LD_INT 5
26927: PPUSH
26928: LD_INT 0
26930: PPUSH
26931: CALL_OW 49
// end ;
26935: GO 26791
26937: POP
26938: POP
// for i = 1 to Difficulty + 2 do
26939: LD_ADDR_VAR 0 2
26943: PUSH
26944: DOUBLE
26945: LD_INT 1
26947: DEC
26948: ST_TO_ADDR
26949: LD_OWVAR 67
26953: PUSH
26954: LD_INT 2
26956: PLUS
26957: PUSH
26958: FOR_TO
26959: IFFALSE 27068
// begin hc_sex = sex_male ;
26961: LD_ADDR_OWVAR 27
26965: PUSH
26966: LD_INT 1
26968: ST_TO_ADDR
// uc_side = 0 ;
26969: LD_ADDR_OWVAR 20
26973: PUSH
26974: LD_INT 0
26976: ST_TO_ADDR
// uc_nation = nation_nature ;
26977: LD_ADDR_OWVAR 21
26981: PUSH
26982: LD_INT 0
26984: ST_TO_ADDR
// hc_class = class_tiger ;
26985: LD_ADDR_OWVAR 28
26989: PUSH
26990: LD_INT 14
26992: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26993: LD_ADDR_OWVAR 31
26997: PUSH
26998: LD_EXP 37
27002: PUSH
27003: LD_INT 0
27005: PUSH
27006: LD_INT 0
27008: PUSH
27009: LD_INT 0
27011: PUSH
27012: EMPTY
27013: LIST
27014: LIST
27015: LIST
27016: LIST
27017: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27018: LD_ADDR_OWVAR 35
27022: PUSH
27023: LD_INT 5
27025: NEG
27026: PPUSH
27027: LD_INT 5
27029: PPUSH
27030: CALL_OW 12
27034: PUSH
27035: LD_OWVAR 67
27039: MUL
27040: ST_TO_ADDR
// un = CreateHuman ;
27041: LD_ADDR_VAR 0 3
27045: PUSH
27046: CALL_OW 44
27050: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27051: LD_VAR 0 3
27055: PPUSH
27056: LD_INT 6
27058: PPUSH
27059: LD_INT 0
27061: PPUSH
27062: CALL_OW 49
// end ;
27066: GO 26958
27068: POP
27069: POP
// for i = 1 to rand ( 3 , 4 ) do
27070: LD_ADDR_VAR 0 2
27074: PUSH
27075: DOUBLE
27076: LD_INT 1
27078: DEC
27079: ST_TO_ADDR
27080: LD_INT 3
27082: PPUSH
27083: LD_INT 4
27085: PPUSH
27086: CALL_OW 12
27090: PUSH
27091: FOR_TO
27092: IFFALSE 27186
// begin hc_sex = sex_male ;
27094: LD_ADDR_OWVAR 27
27098: PUSH
27099: LD_INT 1
27101: ST_TO_ADDR
// uc_side = 0 ;
27102: LD_ADDR_OWVAR 20
27106: PUSH
27107: LD_INT 0
27109: ST_TO_ADDR
// uc_nation = nation_nature ;
27110: LD_ADDR_OWVAR 21
27114: PUSH
27115: LD_INT 0
27117: ST_TO_ADDR
// hc_class = 18 ;
27118: LD_ADDR_OWVAR 28
27122: PUSH
27123: LD_INT 18
27125: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27126: LD_ADDR_OWVAR 31
27130: PUSH
27131: LD_EXP 37
27135: PUSH
27136: LD_INT 0
27138: PUSH
27139: LD_INT 0
27141: PUSH
27142: LD_INT 0
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: LIST
27149: LIST
27150: ST_TO_ADDR
// hc_agressivity = 0 ;
27151: LD_ADDR_OWVAR 35
27155: PUSH
27156: LD_INT 0
27158: ST_TO_ADDR
// un = CreateHuman ;
27159: LD_ADDR_VAR 0 3
27163: PUSH
27164: CALL_OW 44
27168: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27169: LD_VAR 0 3
27173: PPUSH
27174: LD_INT 6
27176: PPUSH
27177: LD_INT 0
27179: PPUSH
27180: CALL_OW 49
// end ;
27184: GO 27091
27186: POP
27187: POP
// end ; end_of_file
27188: LD_VAR 0 1
27192: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27193: LD_EXP 46
27197: PUSH
27198: LD_INT 1
27200: EQUAL
27201: IFFALSE 27285
27203: GO 27205
27205: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27206: LD_INT 7
27208: PPUSH
27209: LD_INT 5
27211: PPUSH
27212: LD_INT 4
27214: PUSH
27215: LD_INT 5
27217: PUSH
27218: LD_INT 6
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: PUSH
27226: LD_OWVAR 67
27230: ARRAY
27231: PPUSH
27232: LD_EXP 36
27236: PPUSH
27237: LD_EXP 37
27241: PPUSH
27242: CALL_OW 12
27246: PPUSH
27247: LD_INT 2
27249: PPUSH
27250: LD_INT 1
27252: PPUSH
27253: LD_INT 1
27255: PPUSH
27256: EMPTY
27257: PPUSH
27258: LD_INT 25
27260: PUSH
27261: LD_INT 26
27263: PUSH
27264: LD_INT 27
27266: PUSH
27267: LD_INT 28
27269: PUSH
27270: EMPTY
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: PPUSH
27276: EMPTY
27277: PPUSH
27278: LD_INT 1
27280: PPUSH
27281: CALL 17204 0 11
27285: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27286: LD_EXP 46
27290: PUSH
27291: LD_INT 1
27293: EQUAL
27294: IFFALSE 27382
27296: GO 27298
27298: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27299: LD_INT 5
27301: PPUSH
27302: LD_INT 2
27304: PPUSH
27305: LD_INT 5
27307: PUSH
27308: LD_INT 6
27310: PUSH
27311: LD_INT 8
27313: PUSH
27314: EMPTY
27315: LIST
27316: LIST
27317: LIST
27318: PUSH
27319: LD_OWVAR 67
27323: ARRAY
27324: PPUSH
27325: LD_INT 0
27327: PPUSH
27328: LD_INT 0
27330: PPUSH
27331: LD_INT 2
27333: PUSH
27334: LD_INT 4
27336: PUSH
27337: LD_INT 5
27339: PUSH
27340: EMPTY
27341: LIST
27342: LIST
27343: LIST
27344: PUSH
27345: LD_OWVAR 67
27349: ARRAY
27350: PPUSH
27351: LD_INT 0
27353: PPUSH
27354: LD_EXP 36
27358: PPUSH
27359: LD_EXP 37
27363: PPUSH
27364: CALL_OW 12
27368: PPUSH
27369: LD_INT 7
27371: PPUSH
27372: LD_INT 9
27374: PPUSH
27375: LD_INT 1
27377: PPUSH
27378: CALL 18908 0 11
27382: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27383: LD_EXP 46
27387: PUSH
27388: LD_INT 1
27390: EQUAL
27391: IFFALSE 27400
27393: GO 27395
27395: DISABLE
// PrepareArabianSheik ;
27396: CALL 4693 0 0
27400: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27401: LD_EXP 29
27405: PUSH
27406: LD_EXP 64
27410: PUSH
27411: LD_INT 1
27413: EQUAL
27414: AND
27415: IFFALSE 27484
27417: GO 27419
27419: DISABLE
// begin enable ;
27420: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27421: LD_INT 6
27423: PPUSH
27424: LD_INT 3
27426: PPUSH
27427: LD_EXP 60
27431: PPUSH
27432: LD_INT 0
27434: PPUSH
27435: LD_OWVAR 67
27439: PPUSH
27440: LD_INT 0
27442: PPUSH
27443: LD_EXP 60
27447: PUSH
27448: LD_INT 3
27450: DIV
27451: PUSH
27452: LD_INT 1
27454: PLUS
27455: PPUSH
27456: LD_EXP 36
27460: PPUSH
27461: LD_EXP 37
27465: PPUSH
27466: CALL_OW 12
27470: PPUSH
27471: LD_INT 17
27473: PPUSH
27474: LD_INT 18
27476: PPUSH
27477: LD_INT 1
27479: PPUSH
27480: CALL 18908 0 11
// end ;
27484: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27485: LD_EXP 29
27489: PUSH
27490: LD_EXP 64
27494: PUSH
27495: LD_INT 1
27497: EQUAL
27498: AND
27499: IFFALSE 27576
27501: GO 27503
27503: DISABLE
// begin enable ;
27504: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27505: LD_INT 17
27507: PPUSH
27508: LD_INT 6
27510: PPUSH
27511: LD_EXP 59
27515: PPUSH
27516: LD_EXP 36
27520: PPUSH
27521: LD_EXP 37
27525: PPUSH
27526: CALL_OW 12
27530: PPUSH
27531: LD_INT 3
27533: PPUSH
27534: LD_INT 1
27536: PPUSH
27537: LD_INT 3
27539: PUSH
27540: LD_INT 3
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: PPUSH
27547: LD_INT 43
27549: PUSH
27550: LD_INT 44
27552: PUSH
27553: LD_INT 45
27555: PUSH
27556: LD_INT 46
27558: PUSH
27559: EMPTY
27560: LIST
27561: LIST
27562: LIST
27563: LIST
27564: PPUSH
27565: EMPTY
27566: PPUSH
27567: EMPTY
27568: PPUSH
27569: LD_INT 1
27571: PPUSH
27572: CALL 17204 0 11
// end ;
27576: END
// every 10 10$00 trigger joinEpsilon do
27577: LD_EXP 29
27581: IFFALSE 27635
27583: GO 27585
27585: DISABLE
// begin enable ;
27586: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27587: LD_ADDR_EXP 59
27591: PUSH
27592: LD_EXP 59
27596: PUSH
27597: LD_INT 1
27599: PPUSH
27600: LD_OWVAR 67
27604: PPUSH
27605: CALL_OW 12
27609: PLUS
27610: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27611: LD_ADDR_EXP 60
27615: PUSH
27616: LD_EXP 60
27620: PUSH
27621: LD_INT 1
27623: PPUSH
27624: LD_OWVAR 67
27628: PPUSH
27629: CALL_OW 12
27633: PLUS
27634: ST_TO_ADDR
// end ;
27635: END
// every 21 21$0 trigger attackAvalaible = 1 do
27636: LD_EXP 64
27640: PUSH
27641: LD_INT 1
27643: EQUAL
27644: IFFALSE 27657
27646: GO 27648
27648: DISABLE
// attackAvalaible = 0 ; end_of_file
27649: LD_ADDR_EXP 64
27653: PUSH
27654: LD_INT 0
27656: ST_TO_ADDR
27657: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27658: LD_INT 54
27660: PPUSH
27661: LD_INT 1
27663: PPUSH
27664: CALL_OW 321
27668: PUSH
27669: LD_INT 2
27671: EQUAL
27672: PUSH
27673: LD_INT 55
27675: PPUSH
27676: LD_INT 1
27678: PPUSH
27679: CALL_OW 321
27683: PUSH
27684: LD_INT 2
27686: EQUAL
27687: AND
27688: PUSH
27689: LD_INT 21
27691: PPUSH
27692: LD_INT 1
27694: PPUSH
27695: CALL_OW 321
27699: PUSH
27700: LD_INT 2
27702: EQUAL
27703: AND
27704: PUSH
27705: LD_INT 22
27707: PPUSH
27708: LD_INT 1
27710: PPUSH
27711: CALL_OW 321
27715: PUSH
27716: LD_INT 2
27718: EQUAL
27719: AND
27720: PUSH
27721: LD_INT 12
27723: PPUSH
27724: LD_INT 1
27726: PPUSH
27727: CALL_OW 321
27731: PUSH
27732: LD_INT 1
27734: EQUAL
27735: PUSH
27736: LD_INT 32
27738: PPUSH
27739: LD_INT 1
27741: PPUSH
27742: CALL_OW 321
27746: PUSH
27747: LD_INT 1
27749: EQUAL
27750: OR
27751: PUSH
27752: EMPTY
27753: LIST
27754: AND
27755: PUSH
27756: LD_EXP 48
27760: PUSH
27761: LD_INT 1
27763: EQUAL
27764: AND
27765: PUSH
27766: LD_INT 22
27768: PUSH
27769: LD_INT 3
27771: PUSH
27772: EMPTY
27773: LIST
27774: LIST
27775: PUSH
27776: LD_INT 21
27778: PUSH
27779: LD_INT 1
27781: PUSH
27782: EMPTY
27783: LIST
27784: LIST
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: PPUSH
27790: CALL_OW 69
27794: PUSH
27795: LD_INT 0
27797: EQUAL
27798: AND
27799: IFFALSE 27855
27801: GO 27803
27803: DISABLE
// begin case query ( QEndMission ) of 1 :
27804: LD_STRING QEndMission
27806: PPUSH
27807: CALL_OW 97
27811: PUSH
27812: LD_INT 1
27814: DOUBLE
27815: EQUAL
27816: IFTRUE 27820
27818: GO 27831
27820: POP
// begin end_the_mission_allowed = true ;
27821: LD_ADDR_OWVAR 57
27825: PUSH
27826: LD_INT 1
27828: ST_TO_ADDR
// end ; 2 :
27829: GO 27855
27831: LD_INT 2
27833: DOUBLE
27834: EQUAL
27835: IFTRUE 27839
27837: GO 27854
27839: POP
// begin fastEnd = 1 ;
27840: LD_ADDR_EXP 63
27844: PUSH
27845: LD_INT 1
27847: ST_TO_ADDR
// FinishMission ;
27848: CALL 27900 0 0
// end ; end ;
27852: GO 27855
27854: POP
// end ;
27855: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
27856: LD_EXP 58
27860: PUSH
27861: LD_EXP 57
27865: NOT
27866: AND
27867: PUSH
27868: LD_INT 22
27870: PUSH
27871: LD_INT 3
27873: PUSH
27874: EMPTY
27875: LIST
27876: LIST
27877: PPUSH
27878: CALL_OW 69
27882: PUSH
27883: LD_INT 0
27885: EQUAL
27886: AND
27887: IFFALSE 27899
27889: GO 27891
27891: DISABLE
// SetAchievement ( ACH_TACT ) ;
27892: LD_STRING ACH_TACT
27894: PPUSH
27895: CALL_OW 543
27899: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27900: LD_INT 0
27902: PPUSH
27903: PPUSH
27904: PPUSH
27905: PPUSH
// if not snipersTrained then
27906: LD_EXP 62
27910: NOT
27911: IFFALSE 27920
// SetAchievement ( ACH_SNIPER ) ;
27913: LD_STRING ACH_SNIPER
27915: PPUSH
27916: CALL_OW 543
// m1 := false ;
27920: LD_ADDR_VAR 0 2
27924: PUSH
27925: LD_INT 0
27927: ST_TO_ADDR
// m2 := false ;
27928: LD_ADDR_VAR 0 3
27932: PUSH
27933: LD_INT 0
27935: ST_TO_ADDR
// m3 := false ;
27936: LD_ADDR_VAR 0 4
27940: PUSH
27941: LD_INT 0
27943: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27944: LD_EXP 53
27948: PPUSH
27949: LD_STRING 10_KhatamStatus_1
27951: PPUSH
27952: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27956: LD_EXP 52
27960: PPUSH
27961: LD_STRING 10_GensherEscape_1
27963: PPUSH
27964: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27968: LD_INT 12
27970: PPUSH
27971: LD_INT 1
27973: PPUSH
27974: CALL_OW 321
27978: PUSH
27979: LD_INT 2
27981: EQUAL
27982: IFFALSE 28004
// begin AddMedal ( sights , 1 ) ;
27984: LD_STRING sights
27986: PPUSH
27987: LD_INT 1
27989: PPUSH
27990: CALL_OW 101
// m1 := true ;
27994: LD_ADDR_VAR 0 2
27998: PUSH
27999: LD_INT 1
28001: ST_TO_ADDR
// end else
28002: GO 28015
// begin AddMedal ( sights , - 1 ) ;
28004: LD_STRING sights
28006: PPUSH
28007: LD_INT 1
28009: NEG
28010: PPUSH
28011: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28015: LD_INT 32
28017: PPUSH
28018: LD_INT 1
28020: PPUSH
28021: CALL_OW 321
28025: PUSH
28026: LD_INT 2
28028: EQUAL
28029: IFFALSE 28051
// begin AddMedal ( computers , 1 ) ;
28031: LD_STRING computers
28033: PPUSH
28034: LD_INT 1
28036: PPUSH
28037: CALL_OW 101
// m2 := true ;
28041: LD_ADDR_VAR 0 3
28045: PUSH
28046: LD_INT 1
28048: ST_TO_ADDR
// end else
28049: GO 28062
// begin AddMedal ( computers , - 1 ) ;
28051: LD_STRING computers
28053: PPUSH
28054: LD_INT 1
28056: NEG
28057: PPUSH
28058: CALL_OW 101
// end ; if arabianEscape = 0 then
28062: LD_EXP 47
28066: PUSH
28067: LD_INT 0
28069: EQUAL
28070: IFFALSE 28102
// begin AddMedal ( renegades , 2 ) ;
28072: LD_STRING renegades
28074: PPUSH
28075: LD_INT 2
28077: PPUSH
28078: CALL_OW 101
// m3 := true ;
28082: LD_ADDR_VAR 0 4
28086: PUSH
28087: LD_INT 1
28089: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28090: LD_INT 0
28092: PPUSH
28093: LD_STRING 10_ScientistsEscape_1
28095: PPUSH
28096: CALL_OW 39
// end else
28100: GO 28113
// begin AddMedal ( renegades , - 1 ) ;
28102: LD_STRING renegades
28104: PPUSH
28105: LD_INT 1
28107: NEG
28108: PPUSH
28109: CALL_OW 101
// end ; SaveEpsilonBase ;
28113: CALL 28899 0 0
// if m1 and m2 and m3 and Difficulty = 3 then
28117: LD_VAR 0 2
28121: PUSH
28122: LD_VAR 0 3
28126: AND
28127: PUSH
28128: LD_VAR 0 4
28132: AND
28133: PUSH
28134: LD_OWVAR 67
28138: PUSH
28139: LD_INT 3
28141: EQUAL
28142: AND
28143: IFFALSE 28155
// SetAchievementEX ( ACH_AMER , 10 ) ;
28145: LD_STRING ACH_AMER
28147: PPUSH
28148: LD_INT 10
28150: PPUSH
28151: CALL_OW 564
// if tick <= 40 40$00 then
28155: LD_OWVAR 1
28159: PUSH
28160: LD_INT 84000
28162: LESSEQUAL
28163: IFFALSE 28179
// begin wait ( 3 ) ;
28165: LD_INT 3
28167: PPUSH
28168: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28172: LD_STRING ACH_ASPEED_10
28174: PPUSH
28175: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28179: LD_STRING Main
28181: PPUSH
28182: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28186: LD_INT 22
28188: PUSH
28189: LD_INT 1
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 23
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 21
28208: PUSH
28209: LD_INT 1
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 2
28218: PUSH
28219: LD_INT 25
28221: PUSH
28222: LD_INT 1
28224: PUSH
28225: EMPTY
28226: LIST
28227: LIST
28228: PUSH
28229: LD_INT 25
28231: PUSH
28232: LD_INT 2
28234: PUSH
28235: EMPTY
28236: LIST
28237: LIST
28238: PUSH
28239: LD_INT 25
28241: PUSH
28242: LD_INT 3
28244: PUSH
28245: EMPTY
28246: LIST
28247: LIST
28248: PUSH
28249: LD_INT 25
28251: PUSH
28252: LD_INT 4
28254: PUSH
28255: EMPTY
28256: LIST
28257: LIST
28258: PUSH
28259: LD_INT 25
28261: PUSH
28262: LD_INT 5
28264: PUSH
28265: EMPTY
28266: LIST
28267: LIST
28268: PUSH
28269: LD_INT 25
28271: PUSH
28272: LD_INT 8
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: LIST
28283: LIST
28284: LIST
28285: LIST
28286: LIST
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: LIST
28292: LIST
28293: PPUSH
28294: CALL_OW 69
28298: PPUSH
28299: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28303: LD_EXP 1
28307: PPUSH
28308: LD_EXP 54
28312: PUSH
28313: LD_STRING JMM
28315: STR
28316: PPUSH
28317: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28321: LD_EXP 2
28325: PPUSH
28326: LD_EXP 54
28330: PUSH
28331: LD_STRING Brown
28333: STR
28334: PPUSH
28335: CALL 11388 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28339: LD_EXP 3
28343: PPUSH
28344: LD_EXP 54
28348: PUSH
28349: LD_STRING Donaldson
28351: STR
28352: PPUSH
28353: CALL 11388 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28357: LD_EXP 4
28361: PPUSH
28362: LD_EXP 54
28366: PUSH
28367: LD_STRING Bobby
28369: STR
28370: PPUSH
28371: CALL 11388 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28375: LD_EXP 5
28379: PPUSH
28380: LD_EXP 54
28384: PUSH
28385: LD_STRING Cyrus
28387: STR
28388: PPUSH
28389: CALL 11388 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28393: LD_EXP 6
28397: PPUSH
28398: LD_EXP 54
28402: PUSH
28403: LD_STRING Lisa
28405: STR
28406: PPUSH
28407: CALL 11388 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28411: LD_EXP 7
28415: PPUSH
28416: LD_EXP 54
28420: PUSH
28421: LD_STRING Frank
28423: STR
28424: PPUSH
28425: CALL 11388 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28429: LD_EXP 8
28433: PPUSH
28434: LD_EXP 54
28438: PUSH
28439: LD_STRING Kikuchi
28441: STR
28442: PPUSH
28443: CALL 11388 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28447: LD_EXP 9
28451: PPUSH
28452: LD_EXP 54
28456: PUSH
28457: LD_STRING Houten
28459: STR
28460: PPUSH
28461: CALL 11388 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28465: LD_EXP 10
28469: PPUSH
28470: LD_EXP 54
28474: PUSH
28475: LD_STRING Gary
28477: STR
28478: PPUSH
28479: CALL 11388 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28483: LD_EXP 19
28487: PPUSH
28488: LD_EXP 54
28492: PUSH
28493: LD_STRING Cornell
28495: STR
28496: PPUSH
28497: CALL 11388 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28501: LD_EXP 11
28505: PPUSH
28506: LD_EXP 54
28510: PUSH
28511: LD_STRING Simms
28513: STR
28514: PPUSH
28515: CALL 11388 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28519: LD_EXP 12
28523: PPUSH
28524: LD_EXP 54
28528: PUSH
28529: LD_STRING Denis
28531: STR
28532: PPUSH
28533: CALL 11388 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28537: LD_EXP 13
28541: PPUSH
28542: LD_EXP 54
28546: PUSH
28547: LD_STRING Joan
28549: STR
28550: PPUSH
28551: CALL 11388 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28555: LD_EXP 15
28559: PPUSH
28560: LD_EXP 54
28564: PUSH
28565: LD_STRING Gladstone
28567: STR
28568: PPUSH
28569: CALL 11388 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28573: LD_EXP 17
28577: PPUSH
28578: LD_EXP 54
28582: PUSH
28583: LD_STRING DeltaDoctor
28585: STR
28586: PPUSH
28587: CALL 11388 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28591: LD_EXP 22
28595: PPUSH
28596: LD_STRING 10c_lock
28598: PPUSH
28599: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28603: LD_INT 50
28605: PUSH
28606: EMPTY
28607: LIST
28608: PUSH
28609: LD_INT 22
28611: PUSH
28612: LD_INT 1
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 21
28621: PUSH
28622: LD_INT 1
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 2
28631: PUSH
28632: LD_INT 25
28634: PUSH
28635: LD_INT 1
28637: PUSH
28638: EMPTY
28639: LIST
28640: LIST
28641: PUSH
28642: LD_INT 25
28644: PUSH
28645: LD_INT 2
28647: PUSH
28648: EMPTY
28649: LIST
28650: LIST
28651: PUSH
28652: LD_INT 25
28654: PUSH
28655: LD_INT 3
28657: PUSH
28658: EMPTY
28659: LIST
28660: LIST
28661: PUSH
28662: LD_INT 25
28664: PUSH
28665: LD_INT 4
28667: PUSH
28668: EMPTY
28669: LIST
28670: LIST
28671: PUSH
28672: LD_INT 25
28674: PUSH
28675: LD_INT 5
28677: PUSH
28678: EMPTY
28679: LIST
28680: LIST
28681: PUSH
28682: LD_INT 25
28684: PUSH
28685: LD_INT 8
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: LIST
28696: LIST
28697: LIST
28698: LIST
28699: LIST
28700: PUSH
28701: EMPTY
28702: LIST
28703: LIST
28704: LIST
28705: LIST
28706: PPUSH
28707: CALL_OW 69
28711: PUSH
28712: LD_EXP 1
28716: PUSH
28717: LD_EXP 2
28721: PUSH
28722: LD_EXP 3
28726: PUSH
28727: LD_EXP 4
28731: PUSH
28732: LD_EXP 5
28736: PUSH
28737: LD_EXP 6
28741: PUSH
28742: LD_EXP 7
28746: PUSH
28747: LD_EXP 15
28751: PUSH
28752: LD_EXP 8
28756: PUSH
28757: LD_EXP 12
28761: PUSH
28762: LD_EXP 13
28766: PUSH
28767: LD_EXP 9
28771: PUSH
28772: LD_EXP 11
28776: PUSH
28777: LD_EXP 10
28781: PUSH
28782: LD_EXP 17
28786: PUSH
28787: LD_EXP 19
28791: PUSH
28792: EMPTY
28793: LIST
28794: LIST
28795: LIST
28796: LIST
28797: LIST
28798: LIST
28799: LIST
28800: LIST
28801: LIST
28802: LIST
28803: LIST
28804: LIST
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: DIFF
28810: PPUSH
28811: LD_STRING 10_other_survivors
28813: PPUSH
28814: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28818: LD_INT 50
28820: PUSH
28821: EMPTY
28822: LIST
28823: PUSH
28824: LD_INT 22
28826: PUSH
28827: LD_INT 1
28829: PUSH
28830: EMPTY
28831: LIST
28832: LIST
28833: PUSH
28834: LD_INT 21
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 2
28846: PUSH
28847: LD_INT 25
28849: PUSH
28850: LD_INT 16
28852: PUSH
28853: EMPTY
28854: LIST
28855: LIST
28856: PUSH
28857: LD_INT 25
28859: PUSH
28860: LD_INT 12
28862: PUSH
28863: EMPTY
28864: LIST
28865: LIST
28866: PUSH
28867: EMPTY
28868: LIST
28869: LIST
28870: LIST
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: LIST
28876: LIST
28877: PPUSH
28878: CALL_OW 69
28882: PPUSH
28883: LD_STRING 10_ape
28885: PPUSH
28886: CALL_OW 38
// YouWin ;
28890: CALL_OW 103
// end ;
28894: LD_VAR 0 1
28898: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28899: LD_INT 0
28901: PPUSH
28902: PPUSH
28903: PPUSH
28904: PPUSH
// epsilonBase = [ ] ;
28905: LD_ADDR_VAR 0 2
28909: PUSH
28910: EMPTY
28911: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28912: LD_ADDR_VAR 0 3
28916: PUSH
28917: LD_INT 22
28919: PUSH
28920: LD_INT 1
28922: PUSH
28923: EMPTY
28924: LIST
28925: LIST
28926: PUSH
28927: LD_INT 21
28929: PUSH
28930: LD_INT 3
28932: PUSH
28933: EMPTY
28934: LIST
28935: LIST
28936: PUSH
28937: LD_INT 50
28939: PUSH
28940: EMPTY
28941: LIST
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: LIST
28947: PPUSH
28948: CALL_OW 69
28952: ST_TO_ADDR
// for i in buildings do
28953: LD_ADDR_VAR 0 4
28957: PUSH
28958: LD_VAR 0 3
28962: PUSH
28963: FOR_IN
28964: IFFALSE 29416
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28966: LD_VAR 0 4
28970: PPUSH
28971: CALL_OW 266
28975: PUSH
28976: LD_INT 6
28978: PUSH
28979: LD_INT 7
28981: PUSH
28982: LD_INT 8
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: LIST
28989: IN
28990: IFFALSE 29104
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
28992: LD_ADDR_VAR 0 2
28996: PUSH
28997: LD_VAR 0 2
29001: PUSH
29002: LD_VAR 0 4
29006: PPUSH
29007: CALL_OW 266
29011: PUSH
29012: LD_VAR 0 4
29016: PPUSH
29017: CALL_OW 250
29021: PUSH
29022: LD_VAR 0 4
29026: PPUSH
29027: CALL_OW 251
29031: PUSH
29032: LD_VAR 0 4
29036: PPUSH
29037: CALL_OW 254
29041: PUSH
29042: LD_VAR 0 4
29046: PPUSH
29047: CALL_OW 267
29051: PUSH
29052: LD_VAR 0 4
29056: PPUSH
29057: CALL_OW 248
29061: PUSH
29062: LD_VAR 0 4
29066: PPUSH
29067: LD_INT 1
29069: PPUSH
29070: CALL_OW 268
29074: PUSH
29075: LD_VAR 0 4
29079: PPUSH
29080: LD_INT 2
29082: PPUSH
29083: CALL_OW 268
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: LIST
29093: LIST
29094: LIST
29095: LIST
29096: LIST
29097: PUSH
29098: EMPTY
29099: LIST
29100: ADD
29101: ST_TO_ADDR
29102: GO 29414
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29104: LD_VAR 0 4
29108: PPUSH
29109: CALL_OW 266
29113: PUSH
29114: LD_INT 32
29116: EQUAL
29117: PUSH
29118: LD_VAR 0 4
29122: PPUSH
29123: CALL_OW 266
29127: PUSH
29128: LD_INT 33
29130: EQUAL
29131: OR
29132: IFFALSE 29229
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29134: LD_ADDR_VAR 0 2
29138: PUSH
29139: LD_VAR 0 2
29143: PUSH
29144: LD_VAR 0 4
29148: PPUSH
29149: CALL_OW 266
29153: PUSH
29154: LD_VAR 0 4
29158: PPUSH
29159: CALL_OW 250
29163: PUSH
29164: LD_VAR 0 4
29168: PPUSH
29169: CALL_OW 251
29173: PUSH
29174: LD_VAR 0 4
29178: PPUSH
29179: CALL_OW 254
29183: PUSH
29184: LD_VAR 0 4
29188: PPUSH
29189: CALL_OW 267
29193: PUSH
29194: LD_VAR 0 4
29198: PPUSH
29199: CALL_OW 248
29203: PUSH
29204: LD_VAR 0 4
29208: PPUSH
29209: CALL_OW 269
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: LIST
29218: LIST
29219: LIST
29220: LIST
29221: LIST
29222: PUSH
29223: EMPTY
29224: LIST
29225: ADD
29226: ST_TO_ADDR
29227: GO 29414
// if GetBType ( i ) = b_factory then
29229: LD_VAR 0 4
29233: PPUSH
29234: CALL_OW 266
29238: PUSH
29239: LD_INT 3
29241: EQUAL
29242: IFFALSE 29332
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29244: LD_ADDR_VAR 0 2
29248: PUSH
29249: LD_VAR 0 2
29253: PPUSH
29254: LD_INT 1
29256: PPUSH
29257: LD_VAR 0 4
29261: PPUSH
29262: CALL_OW 266
29266: PUSH
29267: LD_VAR 0 4
29271: PPUSH
29272: CALL_OW 250
29276: PUSH
29277: LD_VAR 0 4
29281: PPUSH
29282: CALL_OW 251
29286: PUSH
29287: LD_VAR 0 4
29291: PPUSH
29292: CALL_OW 254
29296: PUSH
29297: LD_VAR 0 4
29301: PPUSH
29302: CALL_OW 267
29306: PUSH
29307: LD_VAR 0 4
29311: PPUSH
29312: CALL_OW 248
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: LIST
29321: LIST
29322: LIST
29323: LIST
29324: PPUSH
29325: CALL_OW 2
29329: ST_TO_ADDR
29330: GO 29414
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29332: LD_ADDR_VAR 0 2
29336: PUSH
29337: LD_VAR 0 2
29341: PUSH
29342: LD_VAR 0 4
29346: PPUSH
29347: CALL_OW 266
29351: PUSH
29352: LD_VAR 0 4
29356: PPUSH
29357: CALL_OW 250
29361: PUSH
29362: LD_VAR 0 4
29366: PPUSH
29367: CALL_OW 251
29371: PUSH
29372: LD_VAR 0 4
29376: PPUSH
29377: CALL_OW 254
29381: PUSH
29382: LD_VAR 0 4
29386: PPUSH
29387: CALL_OW 267
29391: PUSH
29392: LD_VAR 0 4
29396: PPUSH
29397: CALL_OW 248
29401: PUSH
29402: EMPTY
29403: LIST
29404: LIST
29405: LIST
29406: LIST
29407: LIST
29408: LIST
29409: PUSH
29410: EMPTY
29411: LIST
29412: ADD
29413: ST_TO_ADDR
// end ;
29414: GO 28963
29416: POP
29417: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29418: LD_VAR 0 2
29422: PPUSH
29423: LD_STRING 10_EpsilonBase
29425: PPUSH
29426: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29430: LD_INT 19
29432: PPUSH
29433: LD_STRING 10_EpsilonEnv
29435: PPUSH
29436: CALL 29445 0 2
// end ;
29440: LD_VAR 0 1
29444: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29445: LD_INT 0
29447: PPUSH
// result := ListEnvironmentArea ( area ) ;
29448: LD_ADDR_VAR 0 3
29452: PUSH
29453: LD_VAR 0 1
29457: PPUSH
29458: CALL_OW 353
29462: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29463: LD_VAR 0 3
29467: PPUSH
29468: LD_VAR 0 2
29472: PPUSH
29473: CALL_OW 39
// end ; end_of_file
29477: LD_VAR 0 3
29481: RET
// every 0 0$01 do var timer ;
29482: GO 29484
29484: DISABLE
29485: LD_INT 0
29487: PPUSH
// begin timer := 0 0$20 ;
29488: LD_ADDR_VAR 0 1
29492: PUSH
29493: LD_INT 700
29495: ST_TO_ADDR
// repeat wait ( timer ) ;
29496: LD_VAR 0 1
29500: PPUSH
29501: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29505: LD_EXP 56
29509: PUSH
29510: LD_INT 6
29512: GREATEREQUAL
29513: PUSH
29514: LD_EXP 56
29518: PUSH
29519: LD_INT 14
29521: LESS
29522: AND
29523: IFFALSE 29539
// timer := timer + 0 0$3 ;
29525: LD_ADDR_VAR 0 1
29529: PUSH
29530: LD_VAR 0 1
29534: PUSH
29535: LD_INT 105
29537: PLUS
29538: ST_TO_ADDR
// if cratesSpawned >= 14 then
29539: LD_EXP 56
29543: PUSH
29544: LD_INT 14
29546: GREATEREQUAL
29547: IFFALSE 29563
// timer := timer + 0 0$6 ;
29549: LD_ADDR_VAR 0 1
29553: PUSH
29554: LD_VAR 0 1
29558: PUSH
29559: LD_INT 210
29561: PLUS
29562: ST_TO_ADDR
// if timer > 2 2$00 then
29563: LD_VAR 0 1
29567: PUSH
29568: LD_INT 4200
29570: GREATER
29571: IFFALSE 29581
// timer := 0 0$45 ;
29573: LD_ADDR_VAR 0 1
29577: PUSH
29578: LD_INT 1575
29580: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29581: LD_INT 1
29583: PPUSH
29584: LD_INT 5
29586: PPUSH
29587: CALL_OW 12
29591: PPUSH
29592: LD_INT 16
29594: PPUSH
29595: LD_INT 1
29597: PPUSH
29598: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29602: LD_ADDR_EXP 56
29606: PUSH
29607: LD_EXP 56
29611: PUSH
29612: LD_INT 1
29614: PLUS
29615: ST_TO_ADDR
// until false ;
29616: LD_INT 0
29618: IFFALSE 29496
// end ; end_of_file
29620: PPOPN 1
29622: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
29623: LD_INT 0
29625: PPUSH
// ar_miner := 81 ;
29626: LD_ADDR_EXP 76
29630: PUSH
29631: LD_INT 81
29633: ST_TO_ADDR
// ar_crane := 88 ;
29634: LD_ADDR_EXP 75
29638: PUSH
29639: LD_INT 88
29641: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29642: LD_ADDR_EXP 70
29646: PUSH
29647: LD_INT 89
29649: ST_TO_ADDR
// us_hack := 99 ;
29650: LD_ADDR_EXP 71
29654: PUSH
29655: LD_INT 99
29657: ST_TO_ADDR
// us_artillery := 97 ;
29658: LD_ADDR_EXP 72
29662: PUSH
29663: LD_INT 97
29665: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29666: LD_ADDR_EXP 73
29670: PUSH
29671: LD_INT 91
29673: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
29674: LD_ADDR_EXP 74
29678: PUSH
29679: LD_INT 92
29681: ST_TO_ADDR
// ru_radar := 98 ;
29682: LD_ADDR_EXP 69
29686: PUSH
29687: LD_INT 98
29689: ST_TO_ADDR
// tech_Artillery := 80 ;
29690: LD_ADDR_EXP 77
29694: PUSH
29695: LD_INT 80
29697: ST_TO_ADDR
// tech_RadMat := 81 ;
29698: LD_ADDR_EXP 78
29702: PUSH
29703: LD_INT 81
29705: ST_TO_ADDR
// tech_BasicTools := 82 ;
29706: LD_ADDR_EXP 79
29710: PUSH
29711: LD_INT 82
29713: ST_TO_ADDR
// tech_Cargo := 83 ;
29714: LD_ADDR_EXP 80
29718: PUSH
29719: LD_INT 83
29721: ST_TO_ADDR
// tech_Track := 84 ;
29722: LD_ADDR_EXP 81
29726: PUSH
29727: LD_INT 84
29729: ST_TO_ADDR
// tech_Crane := 85 ;
29730: LD_ADDR_EXP 82
29734: PUSH
29735: LD_INT 85
29737: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29738: LD_ADDR_EXP 83
29742: PUSH
29743: LD_INT 86
29745: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29746: LD_ADDR_EXP 84
29750: PUSH
29751: LD_INT 87
29753: ST_TO_ADDR
// end ;
29754: LD_VAR 0 1
29758: RET
// every 1 do
29759: GO 29761
29761: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
29762: CALL 29623 0 0
29766: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
29767: LD_VAR 0 2
29771: PUSH
29772: LD_INT 100
29774: EQUAL
29775: IFFALSE 30724
// begin if not StreamModeActive then
29777: LD_EXP 85
29781: NOT
29782: IFFALSE 29792
// StreamModeActive := true ;
29784: LD_ADDR_EXP 85
29788: PUSH
29789: LD_INT 1
29791: ST_TO_ADDR
// if p3 = 0 then
29792: LD_VAR 0 3
29796: PUSH
29797: LD_INT 0
29799: EQUAL
29800: IFFALSE 29806
// InitStreamMode ;
29802: CALL 30882 0 0
// if p3 = 1 then
29806: LD_VAR 0 3
29810: PUSH
29811: LD_INT 1
29813: EQUAL
29814: IFFALSE 29824
// sRocket := true ;
29816: LD_ADDR_EXP 90
29820: PUSH
29821: LD_INT 1
29823: ST_TO_ADDR
// if p3 = 2 then
29824: LD_VAR 0 3
29828: PUSH
29829: LD_INT 2
29831: EQUAL
29832: IFFALSE 29842
// sSpeed := true ;
29834: LD_ADDR_EXP 89
29838: PUSH
29839: LD_INT 1
29841: ST_TO_ADDR
// if p3 = 3 then
29842: LD_VAR 0 3
29846: PUSH
29847: LD_INT 3
29849: EQUAL
29850: IFFALSE 29860
// sEngine := true ;
29852: LD_ADDR_EXP 91
29856: PUSH
29857: LD_INT 1
29859: ST_TO_ADDR
// if p3 = 4 then
29860: LD_VAR 0 3
29864: PUSH
29865: LD_INT 4
29867: EQUAL
29868: IFFALSE 29878
// sSpec := true ;
29870: LD_ADDR_EXP 88
29874: PUSH
29875: LD_INT 1
29877: ST_TO_ADDR
// if p3 = 5 then
29878: LD_VAR 0 3
29882: PUSH
29883: LD_INT 5
29885: EQUAL
29886: IFFALSE 29896
// sLevel := true ;
29888: LD_ADDR_EXP 92
29892: PUSH
29893: LD_INT 1
29895: ST_TO_ADDR
// if p3 = 6 then
29896: LD_VAR 0 3
29900: PUSH
29901: LD_INT 6
29903: EQUAL
29904: IFFALSE 29914
// sArmoury := true ;
29906: LD_ADDR_EXP 93
29910: PUSH
29911: LD_INT 1
29913: ST_TO_ADDR
// if p3 = 7 then
29914: LD_VAR 0 3
29918: PUSH
29919: LD_INT 7
29921: EQUAL
29922: IFFALSE 29932
// sRadar := true ;
29924: LD_ADDR_EXP 94
29928: PUSH
29929: LD_INT 1
29931: ST_TO_ADDR
// if p3 = 8 then
29932: LD_VAR 0 3
29936: PUSH
29937: LD_INT 8
29939: EQUAL
29940: IFFALSE 29950
// sBunker := true ;
29942: LD_ADDR_EXP 95
29946: PUSH
29947: LD_INT 1
29949: ST_TO_ADDR
// if p3 = 9 then
29950: LD_VAR 0 3
29954: PUSH
29955: LD_INT 9
29957: EQUAL
29958: IFFALSE 29968
// sHack := true ;
29960: LD_ADDR_EXP 96
29964: PUSH
29965: LD_INT 1
29967: ST_TO_ADDR
// if p3 = 10 then
29968: LD_VAR 0 3
29972: PUSH
29973: LD_INT 10
29975: EQUAL
29976: IFFALSE 29986
// sFire := true ;
29978: LD_ADDR_EXP 97
29982: PUSH
29983: LD_INT 1
29985: ST_TO_ADDR
// if p3 = 11 then
29986: LD_VAR 0 3
29990: PUSH
29991: LD_INT 11
29993: EQUAL
29994: IFFALSE 30004
// sRefresh := true ;
29996: LD_ADDR_EXP 98
30000: PUSH
30001: LD_INT 1
30003: ST_TO_ADDR
// if p3 = 12 then
30004: LD_VAR 0 3
30008: PUSH
30009: LD_INT 12
30011: EQUAL
30012: IFFALSE 30022
// sExp := true ;
30014: LD_ADDR_EXP 99
30018: PUSH
30019: LD_INT 1
30021: ST_TO_ADDR
// if p3 = 13 then
30022: LD_VAR 0 3
30026: PUSH
30027: LD_INT 13
30029: EQUAL
30030: IFFALSE 30040
// sDepot := true ;
30032: LD_ADDR_EXP 100
30036: PUSH
30037: LD_INT 1
30039: ST_TO_ADDR
// if p3 = 14 then
30040: LD_VAR 0 3
30044: PUSH
30045: LD_INT 14
30047: EQUAL
30048: IFFALSE 30058
// sFlag := true ;
30050: LD_ADDR_EXP 101
30054: PUSH
30055: LD_INT 1
30057: ST_TO_ADDR
// if p3 = 15 then
30058: LD_VAR 0 3
30062: PUSH
30063: LD_INT 15
30065: EQUAL
30066: IFFALSE 30076
// sKamikadze := true ;
30068: LD_ADDR_EXP 109
30072: PUSH
30073: LD_INT 1
30075: ST_TO_ADDR
// if p3 = 16 then
30076: LD_VAR 0 3
30080: PUSH
30081: LD_INT 16
30083: EQUAL
30084: IFFALSE 30094
// sTroll := true ;
30086: LD_ADDR_EXP 110
30090: PUSH
30091: LD_INT 1
30093: ST_TO_ADDR
// if p3 = 17 then
30094: LD_VAR 0 3
30098: PUSH
30099: LD_INT 17
30101: EQUAL
30102: IFFALSE 30112
// sSlow := true ;
30104: LD_ADDR_EXP 111
30108: PUSH
30109: LD_INT 1
30111: ST_TO_ADDR
// if p3 = 18 then
30112: LD_VAR 0 3
30116: PUSH
30117: LD_INT 18
30119: EQUAL
30120: IFFALSE 30130
// sLack := true ;
30122: LD_ADDR_EXP 112
30126: PUSH
30127: LD_INT 1
30129: ST_TO_ADDR
// if p3 = 19 then
30130: LD_VAR 0 3
30134: PUSH
30135: LD_INT 19
30137: EQUAL
30138: IFFALSE 30148
// sTank := true ;
30140: LD_ADDR_EXP 114
30144: PUSH
30145: LD_INT 1
30147: ST_TO_ADDR
// if p3 = 20 then
30148: LD_VAR 0 3
30152: PUSH
30153: LD_INT 20
30155: EQUAL
30156: IFFALSE 30166
// sRemote := true ;
30158: LD_ADDR_EXP 115
30162: PUSH
30163: LD_INT 1
30165: ST_TO_ADDR
// if p3 = 21 then
30166: LD_VAR 0 3
30170: PUSH
30171: LD_INT 21
30173: EQUAL
30174: IFFALSE 30184
// sPowell := true ;
30176: LD_ADDR_EXP 116
30180: PUSH
30181: LD_INT 1
30183: ST_TO_ADDR
// if p3 = 22 then
30184: LD_VAR 0 3
30188: PUSH
30189: LD_INT 22
30191: EQUAL
30192: IFFALSE 30202
// sTeleport := true ;
30194: LD_ADDR_EXP 119
30198: PUSH
30199: LD_INT 1
30201: ST_TO_ADDR
// if p3 = 23 then
30202: LD_VAR 0 3
30206: PUSH
30207: LD_INT 23
30209: EQUAL
30210: IFFALSE 30220
// sOilTower := true ;
30212: LD_ADDR_EXP 121
30216: PUSH
30217: LD_INT 1
30219: ST_TO_ADDR
// if p3 = 24 then
30220: LD_VAR 0 3
30224: PUSH
30225: LD_INT 24
30227: EQUAL
30228: IFFALSE 30238
// sShovel := true ;
30230: LD_ADDR_EXP 122
30234: PUSH
30235: LD_INT 1
30237: ST_TO_ADDR
// if p3 = 25 then
30238: LD_VAR 0 3
30242: PUSH
30243: LD_INT 25
30245: EQUAL
30246: IFFALSE 30256
// sSheik := true ;
30248: LD_ADDR_EXP 123
30252: PUSH
30253: LD_INT 1
30255: ST_TO_ADDR
// if p3 = 26 then
30256: LD_VAR 0 3
30260: PUSH
30261: LD_INT 26
30263: EQUAL
30264: IFFALSE 30274
// sEarthquake := true ;
30266: LD_ADDR_EXP 125
30270: PUSH
30271: LD_INT 1
30273: ST_TO_ADDR
// if p3 = 27 then
30274: LD_VAR 0 3
30278: PUSH
30279: LD_INT 27
30281: EQUAL
30282: IFFALSE 30292
// sAI := true ;
30284: LD_ADDR_EXP 126
30288: PUSH
30289: LD_INT 1
30291: ST_TO_ADDR
// if p3 = 28 then
30292: LD_VAR 0 3
30296: PUSH
30297: LD_INT 28
30299: EQUAL
30300: IFFALSE 30310
// sCargo := true ;
30302: LD_ADDR_EXP 129
30306: PUSH
30307: LD_INT 1
30309: ST_TO_ADDR
// if p3 = 29 then
30310: LD_VAR 0 3
30314: PUSH
30315: LD_INT 29
30317: EQUAL
30318: IFFALSE 30328
// sDLaser := true ;
30320: LD_ADDR_EXP 130
30324: PUSH
30325: LD_INT 1
30327: ST_TO_ADDR
// if p3 = 30 then
30328: LD_VAR 0 3
30332: PUSH
30333: LD_INT 30
30335: EQUAL
30336: IFFALSE 30346
// sExchange := true ;
30338: LD_ADDR_EXP 131
30342: PUSH
30343: LD_INT 1
30345: ST_TO_ADDR
// if p3 = 31 then
30346: LD_VAR 0 3
30350: PUSH
30351: LD_INT 31
30353: EQUAL
30354: IFFALSE 30364
// sFac := true ;
30356: LD_ADDR_EXP 132
30360: PUSH
30361: LD_INT 1
30363: ST_TO_ADDR
// if p3 = 32 then
30364: LD_VAR 0 3
30368: PUSH
30369: LD_INT 32
30371: EQUAL
30372: IFFALSE 30382
// sPower := true ;
30374: LD_ADDR_EXP 133
30378: PUSH
30379: LD_INT 1
30381: ST_TO_ADDR
// if p3 = 33 then
30382: LD_VAR 0 3
30386: PUSH
30387: LD_INT 33
30389: EQUAL
30390: IFFALSE 30400
// sRandom := true ;
30392: LD_ADDR_EXP 134
30396: PUSH
30397: LD_INT 1
30399: ST_TO_ADDR
// if p3 = 34 then
30400: LD_VAR 0 3
30404: PUSH
30405: LD_INT 34
30407: EQUAL
30408: IFFALSE 30418
// sShield := true ;
30410: LD_ADDR_EXP 135
30414: PUSH
30415: LD_INT 1
30417: ST_TO_ADDR
// if p3 = 35 then
30418: LD_VAR 0 3
30422: PUSH
30423: LD_INT 35
30425: EQUAL
30426: IFFALSE 30436
// sTime := true ;
30428: LD_ADDR_EXP 136
30432: PUSH
30433: LD_INT 1
30435: ST_TO_ADDR
// if p3 = 36 then
30436: LD_VAR 0 3
30440: PUSH
30441: LD_INT 36
30443: EQUAL
30444: IFFALSE 30454
// sTools := true ;
30446: LD_ADDR_EXP 137
30450: PUSH
30451: LD_INT 1
30453: ST_TO_ADDR
// if p3 = 101 then
30454: LD_VAR 0 3
30458: PUSH
30459: LD_INT 101
30461: EQUAL
30462: IFFALSE 30472
// sSold := true ;
30464: LD_ADDR_EXP 102
30468: PUSH
30469: LD_INT 1
30471: ST_TO_ADDR
// if p3 = 102 then
30472: LD_VAR 0 3
30476: PUSH
30477: LD_INT 102
30479: EQUAL
30480: IFFALSE 30490
// sDiff := true ;
30482: LD_ADDR_EXP 103
30486: PUSH
30487: LD_INT 1
30489: ST_TO_ADDR
// if p3 = 103 then
30490: LD_VAR 0 3
30494: PUSH
30495: LD_INT 103
30497: EQUAL
30498: IFFALSE 30508
// sFog := true ;
30500: LD_ADDR_EXP 106
30504: PUSH
30505: LD_INT 1
30507: ST_TO_ADDR
// if p3 = 104 then
30508: LD_VAR 0 3
30512: PUSH
30513: LD_INT 104
30515: EQUAL
30516: IFFALSE 30526
// sReset := true ;
30518: LD_ADDR_EXP 107
30522: PUSH
30523: LD_INT 1
30525: ST_TO_ADDR
// if p3 = 105 then
30526: LD_VAR 0 3
30530: PUSH
30531: LD_INT 105
30533: EQUAL
30534: IFFALSE 30544
// sSun := true ;
30536: LD_ADDR_EXP 108
30540: PUSH
30541: LD_INT 1
30543: ST_TO_ADDR
// if p3 = 106 then
30544: LD_VAR 0 3
30548: PUSH
30549: LD_INT 106
30551: EQUAL
30552: IFFALSE 30562
// sTiger := true ;
30554: LD_ADDR_EXP 104
30558: PUSH
30559: LD_INT 1
30561: ST_TO_ADDR
// if p3 = 107 then
30562: LD_VAR 0 3
30566: PUSH
30567: LD_INT 107
30569: EQUAL
30570: IFFALSE 30580
// sBomb := true ;
30572: LD_ADDR_EXP 105
30576: PUSH
30577: LD_INT 1
30579: ST_TO_ADDR
// if p3 = 108 then
30580: LD_VAR 0 3
30584: PUSH
30585: LD_INT 108
30587: EQUAL
30588: IFFALSE 30598
// sWound := true ;
30590: LD_ADDR_EXP 113
30594: PUSH
30595: LD_INT 1
30597: ST_TO_ADDR
// if p3 = 109 then
30598: LD_VAR 0 3
30602: PUSH
30603: LD_INT 109
30605: EQUAL
30606: IFFALSE 30616
// sBetray := true ;
30608: LD_ADDR_EXP 117
30612: PUSH
30613: LD_INT 1
30615: ST_TO_ADDR
// if p3 = 110 then
30616: LD_VAR 0 3
30620: PUSH
30621: LD_INT 110
30623: EQUAL
30624: IFFALSE 30634
// sContamin := true ;
30626: LD_ADDR_EXP 118
30630: PUSH
30631: LD_INT 1
30633: ST_TO_ADDR
// if p3 = 111 then
30634: LD_VAR 0 3
30638: PUSH
30639: LD_INT 111
30641: EQUAL
30642: IFFALSE 30652
// sOil := true ;
30644: LD_ADDR_EXP 120
30648: PUSH
30649: LD_INT 1
30651: ST_TO_ADDR
// if p3 = 112 then
30652: LD_VAR 0 3
30656: PUSH
30657: LD_INT 112
30659: EQUAL
30660: IFFALSE 30670
// sStu := true ;
30662: LD_ADDR_EXP 124
30666: PUSH
30667: LD_INT 1
30669: ST_TO_ADDR
// if p3 = 113 then
30670: LD_VAR 0 3
30674: PUSH
30675: LD_INT 113
30677: EQUAL
30678: IFFALSE 30688
// sBazooka := true ;
30680: LD_ADDR_EXP 127
30684: PUSH
30685: LD_INT 1
30687: ST_TO_ADDR
// if p3 = 114 then
30688: LD_VAR 0 3
30692: PUSH
30693: LD_INT 114
30695: EQUAL
30696: IFFALSE 30706
// sMortar := true ;
30698: LD_ADDR_EXP 128
30702: PUSH
30703: LD_INT 1
30705: ST_TO_ADDR
// if p3 = 115 then
30706: LD_VAR 0 3
30710: PUSH
30711: LD_INT 115
30713: EQUAL
30714: IFFALSE 30724
// sRanger := true ;
30716: LD_ADDR_EXP 138
30720: PUSH
30721: LD_INT 1
30723: ST_TO_ADDR
// end ; if p2 = 101 then
30724: LD_VAR 0 2
30728: PUSH
30729: LD_INT 101
30731: EQUAL
30732: IFFALSE 30860
// begin case p3 of 1 :
30734: LD_VAR 0 3
30738: PUSH
30739: LD_INT 1
30741: DOUBLE
30742: EQUAL
30743: IFTRUE 30747
30745: GO 30754
30747: POP
// hHackUnlimitedResources ; 2 :
30748: CALL 41895 0 0
30752: GO 30860
30754: LD_INT 2
30756: DOUBLE
30757: EQUAL
30758: IFTRUE 30762
30760: GO 30769
30762: POP
// hHackSetLevel10 ; 3 :
30763: CALL 42028 0 0
30767: GO 30860
30769: LD_INT 3
30771: DOUBLE
30772: EQUAL
30773: IFTRUE 30777
30775: GO 30784
30777: POP
// hHackSetLevel10YourUnits ; 4 :
30778: CALL 42113 0 0
30782: GO 30860
30784: LD_INT 4
30786: DOUBLE
30787: EQUAL
30788: IFTRUE 30792
30790: GO 30799
30792: POP
// hHackInvincible ; 5 :
30793: CALL 42561 0 0
30797: GO 30860
30799: LD_INT 5
30801: DOUBLE
30802: EQUAL
30803: IFTRUE 30807
30805: GO 30814
30807: POP
// hHackInvisible ; 6 :
30808: CALL 42672 0 0
30812: GO 30860
30814: LD_INT 6
30816: DOUBLE
30817: EQUAL
30818: IFTRUE 30822
30820: GO 30829
30822: POP
// hHackChangeYourSide ; 7 :
30823: CALL 42729 0 0
30827: GO 30860
30829: LD_INT 7
30831: DOUBLE
30832: EQUAL
30833: IFTRUE 30837
30835: GO 30844
30837: POP
// hHackChangeUnitSide ; 8 :
30838: CALL 42771 0 0
30842: GO 30860
30844: LD_INT 8
30846: DOUBLE
30847: EQUAL
30848: IFTRUE 30852
30850: GO 30859
30852: POP
// hHackFog ; end ;
30853: CALL 42872 0 0
30857: GO 30860
30859: POP
// end ; end ;
30860: PPOPN 6
30862: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
30863: GO 30865
30865: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
30866: LD_STRING initStreamRollete();
30868: PPUSH
30869: CALL_OW 559
// InitStreamMode ;
30873: CALL 30882 0 0
// DefineStreamItems ( ) ;
30877: CALL 31322 0 0
// end ;
30881: END
// function InitStreamMode ; begin
30882: LD_INT 0
30884: PPUSH
// streamModeActive := false ;
30885: LD_ADDR_EXP 85
30889: PUSH
30890: LD_INT 0
30892: ST_TO_ADDR
// normalCounter := 36 ;
30893: LD_ADDR_EXP 86
30897: PUSH
30898: LD_INT 36
30900: ST_TO_ADDR
// hardcoreCounter := 16 ;
30901: LD_ADDR_EXP 87
30905: PUSH
30906: LD_INT 16
30908: ST_TO_ADDR
// sRocket := false ;
30909: LD_ADDR_EXP 90
30913: PUSH
30914: LD_INT 0
30916: ST_TO_ADDR
// sSpeed := false ;
30917: LD_ADDR_EXP 89
30921: PUSH
30922: LD_INT 0
30924: ST_TO_ADDR
// sEngine := false ;
30925: LD_ADDR_EXP 91
30929: PUSH
30930: LD_INT 0
30932: ST_TO_ADDR
// sSpec := false ;
30933: LD_ADDR_EXP 88
30937: PUSH
30938: LD_INT 0
30940: ST_TO_ADDR
// sLevel := false ;
30941: LD_ADDR_EXP 92
30945: PUSH
30946: LD_INT 0
30948: ST_TO_ADDR
// sArmoury := false ;
30949: LD_ADDR_EXP 93
30953: PUSH
30954: LD_INT 0
30956: ST_TO_ADDR
// sRadar := false ;
30957: LD_ADDR_EXP 94
30961: PUSH
30962: LD_INT 0
30964: ST_TO_ADDR
// sBunker := false ;
30965: LD_ADDR_EXP 95
30969: PUSH
30970: LD_INT 0
30972: ST_TO_ADDR
// sHack := false ;
30973: LD_ADDR_EXP 96
30977: PUSH
30978: LD_INT 0
30980: ST_TO_ADDR
// sFire := false ;
30981: LD_ADDR_EXP 97
30985: PUSH
30986: LD_INT 0
30988: ST_TO_ADDR
// sRefresh := false ;
30989: LD_ADDR_EXP 98
30993: PUSH
30994: LD_INT 0
30996: ST_TO_ADDR
// sExp := false ;
30997: LD_ADDR_EXP 99
31001: PUSH
31002: LD_INT 0
31004: ST_TO_ADDR
// sDepot := false ;
31005: LD_ADDR_EXP 100
31009: PUSH
31010: LD_INT 0
31012: ST_TO_ADDR
// sFlag := false ;
31013: LD_ADDR_EXP 101
31017: PUSH
31018: LD_INT 0
31020: ST_TO_ADDR
// sKamikadze := false ;
31021: LD_ADDR_EXP 109
31025: PUSH
31026: LD_INT 0
31028: ST_TO_ADDR
// sTroll := false ;
31029: LD_ADDR_EXP 110
31033: PUSH
31034: LD_INT 0
31036: ST_TO_ADDR
// sSlow := false ;
31037: LD_ADDR_EXP 111
31041: PUSH
31042: LD_INT 0
31044: ST_TO_ADDR
// sLack := false ;
31045: LD_ADDR_EXP 112
31049: PUSH
31050: LD_INT 0
31052: ST_TO_ADDR
// sTank := false ;
31053: LD_ADDR_EXP 114
31057: PUSH
31058: LD_INT 0
31060: ST_TO_ADDR
// sRemote := false ;
31061: LD_ADDR_EXP 115
31065: PUSH
31066: LD_INT 0
31068: ST_TO_ADDR
// sPowell := false ;
31069: LD_ADDR_EXP 116
31073: PUSH
31074: LD_INT 0
31076: ST_TO_ADDR
// sTeleport := false ;
31077: LD_ADDR_EXP 119
31081: PUSH
31082: LD_INT 0
31084: ST_TO_ADDR
// sOilTower := false ;
31085: LD_ADDR_EXP 121
31089: PUSH
31090: LD_INT 0
31092: ST_TO_ADDR
// sShovel := false ;
31093: LD_ADDR_EXP 122
31097: PUSH
31098: LD_INT 0
31100: ST_TO_ADDR
// sSheik := false ;
31101: LD_ADDR_EXP 123
31105: PUSH
31106: LD_INT 0
31108: ST_TO_ADDR
// sEarthquake := false ;
31109: LD_ADDR_EXP 125
31113: PUSH
31114: LD_INT 0
31116: ST_TO_ADDR
// sAI := false ;
31117: LD_ADDR_EXP 126
31121: PUSH
31122: LD_INT 0
31124: ST_TO_ADDR
// sCargo := false ;
31125: LD_ADDR_EXP 129
31129: PUSH
31130: LD_INT 0
31132: ST_TO_ADDR
// sDLaser := false ;
31133: LD_ADDR_EXP 130
31137: PUSH
31138: LD_INT 0
31140: ST_TO_ADDR
// sExchange := false ;
31141: LD_ADDR_EXP 131
31145: PUSH
31146: LD_INT 0
31148: ST_TO_ADDR
// sFac := false ;
31149: LD_ADDR_EXP 132
31153: PUSH
31154: LD_INT 0
31156: ST_TO_ADDR
// sPower := false ;
31157: LD_ADDR_EXP 133
31161: PUSH
31162: LD_INT 0
31164: ST_TO_ADDR
// sRandom := false ;
31165: LD_ADDR_EXP 134
31169: PUSH
31170: LD_INT 0
31172: ST_TO_ADDR
// sShield := false ;
31173: LD_ADDR_EXP 135
31177: PUSH
31178: LD_INT 0
31180: ST_TO_ADDR
// sTime := false ;
31181: LD_ADDR_EXP 136
31185: PUSH
31186: LD_INT 0
31188: ST_TO_ADDR
// sTools := false ;
31189: LD_ADDR_EXP 137
31193: PUSH
31194: LD_INT 0
31196: ST_TO_ADDR
// sSold := false ;
31197: LD_ADDR_EXP 102
31201: PUSH
31202: LD_INT 0
31204: ST_TO_ADDR
// sDiff := false ;
31205: LD_ADDR_EXP 103
31209: PUSH
31210: LD_INT 0
31212: ST_TO_ADDR
// sFog := false ;
31213: LD_ADDR_EXP 106
31217: PUSH
31218: LD_INT 0
31220: ST_TO_ADDR
// sReset := false ;
31221: LD_ADDR_EXP 107
31225: PUSH
31226: LD_INT 0
31228: ST_TO_ADDR
// sSun := false ;
31229: LD_ADDR_EXP 108
31233: PUSH
31234: LD_INT 0
31236: ST_TO_ADDR
// sTiger := false ;
31237: LD_ADDR_EXP 104
31241: PUSH
31242: LD_INT 0
31244: ST_TO_ADDR
// sBomb := false ;
31245: LD_ADDR_EXP 105
31249: PUSH
31250: LD_INT 0
31252: ST_TO_ADDR
// sWound := false ;
31253: LD_ADDR_EXP 113
31257: PUSH
31258: LD_INT 0
31260: ST_TO_ADDR
// sBetray := false ;
31261: LD_ADDR_EXP 117
31265: PUSH
31266: LD_INT 0
31268: ST_TO_ADDR
// sContamin := false ;
31269: LD_ADDR_EXP 118
31273: PUSH
31274: LD_INT 0
31276: ST_TO_ADDR
// sOil := false ;
31277: LD_ADDR_EXP 120
31281: PUSH
31282: LD_INT 0
31284: ST_TO_ADDR
// sStu := false ;
31285: LD_ADDR_EXP 124
31289: PUSH
31290: LD_INT 0
31292: ST_TO_ADDR
// sBazooka := false ;
31293: LD_ADDR_EXP 127
31297: PUSH
31298: LD_INT 0
31300: ST_TO_ADDR
// sMortar := false ;
31301: LD_ADDR_EXP 128
31305: PUSH
31306: LD_INT 0
31308: ST_TO_ADDR
// sRanger := false ;
31309: LD_ADDR_EXP 138
31313: PUSH
31314: LD_INT 0
31316: ST_TO_ADDR
// end ;
31317: LD_VAR 0 1
31321: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
31322: LD_INT 0
31324: PPUSH
31325: PPUSH
31326: PPUSH
31327: PPUSH
31328: PPUSH
// result := [ ] ;
31329: LD_ADDR_VAR 0 1
31333: PUSH
31334: EMPTY
31335: ST_TO_ADDR
// if campaign_id = 1 then
31336: LD_OWVAR 69
31340: PUSH
31341: LD_INT 1
31343: EQUAL
31344: IFFALSE 34282
// begin case mission_number of 1 :
31346: LD_OWVAR 70
31350: PUSH
31351: LD_INT 1
31353: DOUBLE
31354: EQUAL
31355: IFTRUE 31359
31357: GO 31423
31359: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
31360: LD_ADDR_VAR 0 1
31364: PUSH
31365: LD_INT 2
31367: PUSH
31368: LD_INT 4
31370: PUSH
31371: LD_INT 11
31373: PUSH
31374: LD_INT 12
31376: PUSH
31377: LD_INT 15
31379: PUSH
31380: LD_INT 16
31382: PUSH
31383: LD_INT 22
31385: PUSH
31386: LD_INT 23
31388: PUSH
31389: LD_INT 26
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: LIST
31402: PUSH
31403: LD_INT 101
31405: PUSH
31406: LD_INT 102
31408: PUSH
31409: LD_INT 106
31411: PUSH
31412: EMPTY
31413: LIST
31414: LIST
31415: LIST
31416: PUSH
31417: EMPTY
31418: LIST
31419: LIST
31420: ST_TO_ADDR
31421: GO 34280
31423: LD_INT 2
31425: DOUBLE
31426: EQUAL
31427: IFTRUE 31431
31429: GO 31503
31431: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
31432: LD_ADDR_VAR 0 1
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: LD_INT 4
31442: PUSH
31443: LD_INT 11
31445: PUSH
31446: LD_INT 12
31448: PUSH
31449: LD_INT 15
31451: PUSH
31452: LD_INT 16
31454: PUSH
31455: LD_INT 22
31457: PUSH
31458: LD_INT 23
31460: PUSH
31461: LD_INT 26
31463: PUSH
31464: EMPTY
31465: LIST
31466: LIST
31467: LIST
31468: LIST
31469: LIST
31470: LIST
31471: LIST
31472: LIST
31473: LIST
31474: PUSH
31475: LD_INT 101
31477: PUSH
31478: LD_INT 102
31480: PUSH
31481: LD_INT 105
31483: PUSH
31484: LD_INT 106
31486: PUSH
31487: LD_INT 108
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: LIST
31494: LIST
31495: LIST
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: ST_TO_ADDR
31501: GO 34280
31503: LD_INT 3
31505: DOUBLE
31506: EQUAL
31507: IFTRUE 31511
31509: GO 31587
31511: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
31512: LD_ADDR_VAR 0 1
31516: PUSH
31517: LD_INT 2
31519: PUSH
31520: LD_INT 4
31522: PUSH
31523: LD_INT 5
31525: PUSH
31526: LD_INT 11
31528: PUSH
31529: LD_INT 12
31531: PUSH
31532: LD_INT 15
31534: PUSH
31535: LD_INT 16
31537: PUSH
31538: LD_INT 22
31540: PUSH
31541: LD_INT 26
31543: PUSH
31544: LD_INT 36
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: LIST
31558: PUSH
31559: LD_INT 101
31561: PUSH
31562: LD_INT 102
31564: PUSH
31565: LD_INT 105
31567: PUSH
31568: LD_INT 106
31570: PUSH
31571: LD_INT 108
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: LIST
31578: LIST
31579: LIST
31580: PUSH
31581: EMPTY
31582: LIST
31583: LIST
31584: ST_TO_ADDR
31585: GO 34280
31587: LD_INT 4
31589: DOUBLE
31590: EQUAL
31591: IFTRUE 31595
31593: GO 31679
31595: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
31596: LD_ADDR_VAR 0 1
31600: PUSH
31601: LD_INT 2
31603: PUSH
31604: LD_INT 4
31606: PUSH
31607: LD_INT 5
31609: PUSH
31610: LD_INT 8
31612: PUSH
31613: LD_INT 11
31615: PUSH
31616: LD_INT 12
31618: PUSH
31619: LD_INT 15
31621: PUSH
31622: LD_INT 16
31624: PUSH
31625: LD_INT 22
31627: PUSH
31628: LD_INT 23
31630: PUSH
31631: LD_INT 26
31633: PUSH
31634: LD_INT 36
31636: PUSH
31637: EMPTY
31638: LIST
31639: LIST
31640: LIST
31641: LIST
31642: LIST
31643: LIST
31644: LIST
31645: LIST
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 101
31653: PUSH
31654: LD_INT 102
31656: PUSH
31657: LD_INT 105
31659: PUSH
31660: LD_INT 106
31662: PUSH
31663: LD_INT 108
31665: PUSH
31666: EMPTY
31667: LIST
31668: LIST
31669: LIST
31670: LIST
31671: LIST
31672: PUSH
31673: EMPTY
31674: LIST
31675: LIST
31676: ST_TO_ADDR
31677: GO 34280
31679: LD_INT 5
31681: DOUBLE
31682: EQUAL
31683: IFTRUE 31687
31685: GO 31787
31687: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
31688: LD_ADDR_VAR 0 1
31692: PUSH
31693: LD_INT 2
31695: PUSH
31696: LD_INT 4
31698: PUSH
31699: LD_INT 5
31701: PUSH
31702: LD_INT 6
31704: PUSH
31705: LD_INT 8
31707: PUSH
31708: LD_INT 11
31710: PUSH
31711: LD_INT 12
31713: PUSH
31714: LD_INT 15
31716: PUSH
31717: LD_INT 16
31719: PUSH
31720: LD_INT 22
31722: PUSH
31723: LD_INT 23
31725: PUSH
31726: LD_INT 25
31728: PUSH
31729: LD_INT 26
31731: PUSH
31732: LD_INT 36
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: LIST
31747: LIST
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 101
31753: PUSH
31754: LD_INT 102
31756: PUSH
31757: LD_INT 105
31759: PUSH
31760: LD_INT 106
31762: PUSH
31763: LD_INT 108
31765: PUSH
31766: LD_INT 109
31768: PUSH
31769: LD_INT 112
31771: PUSH
31772: EMPTY
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: PUSH
31781: EMPTY
31782: LIST
31783: LIST
31784: ST_TO_ADDR
31785: GO 34280
31787: LD_INT 6
31789: DOUBLE
31790: EQUAL
31791: IFTRUE 31795
31793: GO 31915
31795: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
31796: LD_ADDR_VAR 0 1
31800: PUSH
31801: LD_INT 2
31803: PUSH
31804: LD_INT 4
31806: PUSH
31807: LD_INT 5
31809: PUSH
31810: LD_INT 6
31812: PUSH
31813: LD_INT 8
31815: PUSH
31816: LD_INT 11
31818: PUSH
31819: LD_INT 12
31821: PUSH
31822: LD_INT 15
31824: PUSH
31825: LD_INT 16
31827: PUSH
31828: LD_INT 20
31830: PUSH
31831: LD_INT 21
31833: PUSH
31834: LD_INT 22
31836: PUSH
31837: LD_INT 23
31839: PUSH
31840: LD_INT 25
31842: PUSH
31843: LD_INT 26
31845: PUSH
31846: LD_INT 30
31848: PUSH
31849: LD_INT 31
31851: PUSH
31852: LD_INT 32
31854: PUSH
31855: LD_INT 36
31857: PUSH
31858: EMPTY
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 101
31881: PUSH
31882: LD_INT 102
31884: PUSH
31885: LD_INT 105
31887: PUSH
31888: LD_INT 106
31890: PUSH
31891: LD_INT 108
31893: PUSH
31894: LD_INT 109
31896: PUSH
31897: LD_INT 112
31899: PUSH
31900: EMPTY
31901: LIST
31902: LIST
31903: LIST
31904: LIST
31905: LIST
31906: LIST
31907: LIST
31908: PUSH
31909: EMPTY
31910: LIST
31911: LIST
31912: ST_TO_ADDR
31913: GO 34280
31915: LD_INT 7
31917: DOUBLE
31918: EQUAL
31919: IFTRUE 31923
31921: GO 32023
31923: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
31924: LD_ADDR_VAR 0 1
31928: PUSH
31929: LD_INT 2
31931: PUSH
31932: LD_INT 4
31934: PUSH
31935: LD_INT 5
31937: PUSH
31938: LD_INT 7
31940: PUSH
31941: LD_INT 11
31943: PUSH
31944: LD_INT 12
31946: PUSH
31947: LD_INT 15
31949: PUSH
31950: LD_INT 16
31952: PUSH
31953: LD_INT 20
31955: PUSH
31956: LD_INT 21
31958: PUSH
31959: LD_INT 22
31961: PUSH
31962: LD_INT 23
31964: PUSH
31965: LD_INT 25
31967: PUSH
31968: LD_INT 26
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: LIST
31984: LIST
31985: LIST
31986: PUSH
31987: LD_INT 101
31989: PUSH
31990: LD_INT 102
31992: PUSH
31993: LD_INT 103
31995: PUSH
31996: LD_INT 105
31998: PUSH
31999: LD_INT 106
32001: PUSH
32002: LD_INT 108
32004: PUSH
32005: LD_INT 112
32007: PUSH
32008: EMPTY
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: ST_TO_ADDR
32021: GO 34280
32023: LD_INT 8
32025: DOUBLE
32026: EQUAL
32027: IFTRUE 32031
32029: GO 32159
32031: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
32032: LD_ADDR_VAR 0 1
32036: PUSH
32037: LD_INT 2
32039: PUSH
32040: LD_INT 4
32042: PUSH
32043: LD_INT 5
32045: PUSH
32046: LD_INT 6
32048: PUSH
32049: LD_INT 7
32051: PUSH
32052: LD_INT 8
32054: PUSH
32055: LD_INT 11
32057: PUSH
32058: LD_INT 12
32060: PUSH
32061: LD_INT 15
32063: PUSH
32064: LD_INT 16
32066: PUSH
32067: LD_INT 20
32069: PUSH
32070: LD_INT 21
32072: PUSH
32073: LD_INT 22
32075: PUSH
32076: LD_INT 23
32078: PUSH
32079: LD_INT 25
32081: PUSH
32082: LD_INT 26
32084: PUSH
32085: LD_INT 30
32087: PUSH
32088: LD_INT 31
32090: PUSH
32091: LD_INT 32
32093: PUSH
32094: LD_INT 36
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: LIST
32101: LIST
32102: LIST
32103: LIST
32104: LIST
32105: LIST
32106: LIST
32107: LIST
32108: LIST
32109: LIST
32110: LIST
32111: LIST
32112: LIST
32113: LIST
32114: LIST
32115: LIST
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 101
32121: PUSH
32122: LD_INT 102
32124: PUSH
32125: LD_INT 103
32127: PUSH
32128: LD_INT 105
32130: PUSH
32131: LD_INT 106
32133: PUSH
32134: LD_INT 108
32136: PUSH
32137: LD_INT 109
32139: PUSH
32140: LD_INT 112
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: LIST
32151: LIST
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: ST_TO_ADDR
32157: GO 34280
32159: LD_INT 9
32161: DOUBLE
32162: EQUAL
32163: IFTRUE 32167
32165: GO 32303
32167: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
32168: LD_ADDR_VAR 0 1
32172: PUSH
32173: LD_INT 2
32175: PUSH
32176: LD_INT 4
32178: PUSH
32179: LD_INT 5
32181: PUSH
32182: LD_INT 6
32184: PUSH
32185: LD_INT 7
32187: PUSH
32188: LD_INT 8
32190: PUSH
32191: LD_INT 11
32193: PUSH
32194: LD_INT 12
32196: PUSH
32197: LD_INT 15
32199: PUSH
32200: LD_INT 16
32202: PUSH
32203: LD_INT 20
32205: PUSH
32206: LD_INT 21
32208: PUSH
32209: LD_INT 22
32211: PUSH
32212: LD_INT 23
32214: PUSH
32215: LD_INT 25
32217: PUSH
32218: LD_INT 26
32220: PUSH
32221: LD_INT 28
32223: PUSH
32224: LD_INT 30
32226: PUSH
32227: LD_INT 31
32229: PUSH
32230: LD_INT 32
32232: PUSH
32233: LD_INT 36
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: LIST
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: LIST
32258: PUSH
32259: LD_INT 101
32261: PUSH
32262: LD_INT 102
32264: PUSH
32265: LD_INT 103
32267: PUSH
32268: LD_INT 105
32270: PUSH
32271: LD_INT 106
32273: PUSH
32274: LD_INT 108
32276: PUSH
32277: LD_INT 109
32279: PUSH
32280: LD_INT 112
32282: PUSH
32283: LD_INT 114
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: ST_TO_ADDR
32301: GO 34280
32303: LD_INT 10
32305: DOUBLE
32306: EQUAL
32307: IFTRUE 32311
32309: GO 32495
32311: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
32312: LD_ADDR_VAR 0 1
32316: PUSH
32317: LD_INT 2
32319: PUSH
32320: LD_INT 4
32322: PUSH
32323: LD_INT 5
32325: PUSH
32326: LD_INT 6
32328: PUSH
32329: LD_INT 7
32331: PUSH
32332: LD_INT 8
32334: PUSH
32335: LD_INT 9
32337: PUSH
32338: LD_INT 10
32340: PUSH
32341: LD_INT 11
32343: PUSH
32344: LD_INT 12
32346: PUSH
32347: LD_INT 13
32349: PUSH
32350: LD_INT 14
32352: PUSH
32353: LD_INT 15
32355: PUSH
32356: LD_INT 16
32358: PUSH
32359: LD_INT 17
32361: PUSH
32362: LD_INT 18
32364: PUSH
32365: LD_INT 19
32367: PUSH
32368: LD_INT 20
32370: PUSH
32371: LD_INT 21
32373: PUSH
32374: LD_INT 22
32376: PUSH
32377: LD_INT 23
32379: PUSH
32380: LD_INT 24
32382: PUSH
32383: LD_INT 25
32385: PUSH
32386: LD_INT 26
32388: PUSH
32389: LD_INT 28
32391: PUSH
32392: LD_INT 30
32394: PUSH
32395: LD_INT 31
32397: PUSH
32398: LD_INT 32
32400: PUSH
32401: LD_INT 36
32403: PUSH
32404: EMPTY
32405: LIST
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 101
32437: PUSH
32438: LD_INT 102
32440: PUSH
32441: LD_INT 103
32443: PUSH
32444: LD_INT 104
32446: PUSH
32447: LD_INT 105
32449: PUSH
32450: LD_INT 106
32452: PUSH
32453: LD_INT 107
32455: PUSH
32456: LD_INT 108
32458: PUSH
32459: LD_INT 109
32461: PUSH
32462: LD_INT 110
32464: PUSH
32465: LD_INT 111
32467: PUSH
32468: LD_INT 112
32470: PUSH
32471: LD_INT 114
32473: PUSH
32474: EMPTY
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: ST_TO_ADDR
32493: GO 34280
32495: LD_INT 11
32497: DOUBLE
32498: EQUAL
32499: IFTRUE 32503
32501: GO 32695
32503: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
32504: LD_ADDR_VAR 0 1
32508: PUSH
32509: LD_INT 2
32511: PUSH
32512: LD_INT 3
32514: PUSH
32515: LD_INT 4
32517: PUSH
32518: LD_INT 5
32520: PUSH
32521: LD_INT 6
32523: PUSH
32524: LD_INT 7
32526: PUSH
32527: LD_INT 8
32529: PUSH
32530: LD_INT 9
32532: PUSH
32533: LD_INT 10
32535: PUSH
32536: LD_INT 11
32538: PUSH
32539: LD_INT 12
32541: PUSH
32542: LD_INT 13
32544: PUSH
32545: LD_INT 14
32547: PUSH
32548: LD_INT 15
32550: PUSH
32551: LD_INT 16
32553: PUSH
32554: LD_INT 17
32556: PUSH
32557: LD_INT 18
32559: PUSH
32560: LD_INT 19
32562: PUSH
32563: LD_INT 20
32565: PUSH
32566: LD_INT 21
32568: PUSH
32569: LD_INT 22
32571: PUSH
32572: LD_INT 23
32574: PUSH
32575: LD_INT 24
32577: PUSH
32578: LD_INT 25
32580: PUSH
32581: LD_INT 26
32583: PUSH
32584: LD_INT 28
32586: PUSH
32587: LD_INT 30
32589: PUSH
32590: LD_INT 31
32592: PUSH
32593: LD_INT 32
32595: PUSH
32596: LD_INT 34
32598: PUSH
32599: LD_INT 36
32601: PUSH
32602: EMPTY
32603: LIST
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: LIST
32616: LIST
32617: LIST
32618: LIST
32619: LIST
32620: LIST
32621: LIST
32622: LIST
32623: LIST
32624: LIST
32625: LIST
32626: LIST
32627: LIST
32628: LIST
32629: LIST
32630: LIST
32631: LIST
32632: LIST
32633: LIST
32634: PUSH
32635: LD_INT 101
32637: PUSH
32638: LD_INT 102
32640: PUSH
32641: LD_INT 103
32643: PUSH
32644: LD_INT 104
32646: PUSH
32647: LD_INT 105
32649: PUSH
32650: LD_INT 106
32652: PUSH
32653: LD_INT 107
32655: PUSH
32656: LD_INT 108
32658: PUSH
32659: LD_INT 109
32661: PUSH
32662: LD_INT 110
32664: PUSH
32665: LD_INT 111
32667: PUSH
32668: LD_INT 112
32670: PUSH
32671: LD_INT 114
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: ST_TO_ADDR
32693: GO 34280
32695: LD_INT 12
32697: DOUBLE
32698: EQUAL
32699: IFTRUE 32703
32701: GO 32911
32703: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
32704: LD_ADDR_VAR 0 1
32708: PUSH
32709: LD_INT 1
32711: PUSH
32712: LD_INT 2
32714: PUSH
32715: LD_INT 3
32717: PUSH
32718: LD_INT 4
32720: PUSH
32721: LD_INT 5
32723: PUSH
32724: LD_INT 6
32726: PUSH
32727: LD_INT 7
32729: PUSH
32730: LD_INT 8
32732: PUSH
32733: LD_INT 9
32735: PUSH
32736: LD_INT 10
32738: PUSH
32739: LD_INT 11
32741: PUSH
32742: LD_INT 12
32744: PUSH
32745: LD_INT 13
32747: PUSH
32748: LD_INT 14
32750: PUSH
32751: LD_INT 15
32753: PUSH
32754: LD_INT 16
32756: PUSH
32757: LD_INT 17
32759: PUSH
32760: LD_INT 18
32762: PUSH
32763: LD_INT 19
32765: PUSH
32766: LD_INT 20
32768: PUSH
32769: LD_INT 21
32771: PUSH
32772: LD_INT 22
32774: PUSH
32775: LD_INT 23
32777: PUSH
32778: LD_INT 24
32780: PUSH
32781: LD_INT 25
32783: PUSH
32784: LD_INT 26
32786: PUSH
32787: LD_INT 27
32789: PUSH
32790: LD_INT 28
32792: PUSH
32793: LD_INT 30
32795: PUSH
32796: LD_INT 31
32798: PUSH
32799: LD_INT 32
32801: PUSH
32802: LD_INT 33
32804: PUSH
32805: LD_INT 34
32807: PUSH
32808: LD_INT 36
32810: PUSH
32811: EMPTY
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: LIST
32820: LIST
32821: LIST
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: LIST
32846: PUSH
32847: LD_INT 101
32849: PUSH
32850: LD_INT 102
32852: PUSH
32853: LD_INT 103
32855: PUSH
32856: LD_INT 104
32858: PUSH
32859: LD_INT 105
32861: PUSH
32862: LD_INT 106
32864: PUSH
32865: LD_INT 107
32867: PUSH
32868: LD_INT 108
32870: PUSH
32871: LD_INT 109
32873: PUSH
32874: LD_INT 110
32876: PUSH
32877: LD_INT 111
32879: PUSH
32880: LD_INT 112
32882: PUSH
32883: LD_INT 113
32885: PUSH
32886: LD_INT 114
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: ST_TO_ADDR
32909: GO 34280
32911: LD_INT 13
32913: DOUBLE
32914: EQUAL
32915: IFTRUE 32919
32917: GO 33115
32919: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
32920: LD_ADDR_VAR 0 1
32924: PUSH
32925: LD_INT 1
32927: PUSH
32928: LD_INT 2
32930: PUSH
32931: LD_INT 3
32933: PUSH
32934: LD_INT 4
32936: PUSH
32937: LD_INT 5
32939: PUSH
32940: LD_INT 8
32942: PUSH
32943: LD_INT 9
32945: PUSH
32946: LD_INT 10
32948: PUSH
32949: LD_INT 11
32951: PUSH
32952: LD_INT 12
32954: PUSH
32955: LD_INT 14
32957: PUSH
32958: LD_INT 15
32960: PUSH
32961: LD_INT 16
32963: PUSH
32964: LD_INT 17
32966: PUSH
32967: LD_INT 18
32969: PUSH
32970: LD_INT 19
32972: PUSH
32973: LD_INT 20
32975: PUSH
32976: LD_INT 21
32978: PUSH
32979: LD_INT 22
32981: PUSH
32982: LD_INT 23
32984: PUSH
32985: LD_INT 24
32987: PUSH
32988: LD_INT 25
32990: PUSH
32991: LD_INT 26
32993: PUSH
32994: LD_INT 27
32996: PUSH
32997: LD_INT 28
32999: PUSH
33000: LD_INT 30
33002: PUSH
33003: LD_INT 31
33005: PUSH
33006: LD_INT 32
33008: PUSH
33009: LD_INT 33
33011: PUSH
33012: LD_INT 34
33014: PUSH
33015: LD_INT 36
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: LIST
33022: LIST
33023: LIST
33024: LIST
33025: LIST
33026: LIST
33027: LIST
33028: LIST
33029: LIST
33030: LIST
33031: LIST
33032: LIST
33033: LIST
33034: LIST
33035: LIST
33036: LIST
33037: LIST
33038: LIST
33039: LIST
33040: LIST
33041: LIST
33042: LIST
33043: LIST
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: PUSH
33051: LD_INT 101
33053: PUSH
33054: LD_INT 102
33056: PUSH
33057: LD_INT 103
33059: PUSH
33060: LD_INT 104
33062: PUSH
33063: LD_INT 105
33065: PUSH
33066: LD_INT 106
33068: PUSH
33069: LD_INT 107
33071: PUSH
33072: LD_INT 108
33074: PUSH
33075: LD_INT 109
33077: PUSH
33078: LD_INT 110
33080: PUSH
33081: LD_INT 111
33083: PUSH
33084: LD_INT 112
33086: PUSH
33087: LD_INT 113
33089: PUSH
33090: LD_INT 114
33092: PUSH
33093: EMPTY
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: ST_TO_ADDR
33113: GO 34280
33115: LD_INT 14
33117: DOUBLE
33118: EQUAL
33119: IFTRUE 33123
33121: GO 33335
33123: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
33124: LD_ADDR_VAR 0 1
33128: PUSH
33129: LD_INT 1
33131: PUSH
33132: LD_INT 2
33134: PUSH
33135: LD_INT 3
33137: PUSH
33138: LD_INT 4
33140: PUSH
33141: LD_INT 5
33143: PUSH
33144: LD_INT 6
33146: PUSH
33147: LD_INT 7
33149: PUSH
33150: LD_INT 8
33152: PUSH
33153: LD_INT 9
33155: PUSH
33156: LD_INT 10
33158: PUSH
33159: LD_INT 11
33161: PUSH
33162: LD_INT 12
33164: PUSH
33165: LD_INT 13
33167: PUSH
33168: LD_INT 14
33170: PUSH
33171: LD_INT 15
33173: PUSH
33174: LD_INT 16
33176: PUSH
33177: LD_INT 17
33179: PUSH
33180: LD_INT 18
33182: PUSH
33183: LD_INT 19
33185: PUSH
33186: LD_INT 20
33188: PUSH
33189: LD_INT 21
33191: PUSH
33192: LD_INT 22
33194: PUSH
33195: LD_INT 23
33197: PUSH
33198: LD_INT 24
33200: PUSH
33201: LD_INT 25
33203: PUSH
33204: LD_INT 26
33206: PUSH
33207: LD_INT 27
33209: PUSH
33210: LD_INT 28
33212: PUSH
33213: LD_INT 29
33215: PUSH
33216: LD_INT 30
33218: PUSH
33219: LD_INT 31
33221: PUSH
33222: LD_INT 32
33224: PUSH
33225: LD_INT 33
33227: PUSH
33228: LD_INT 34
33230: PUSH
33231: LD_INT 36
33233: PUSH
33234: EMPTY
33235: LIST
33236: LIST
33237: LIST
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 101
33273: PUSH
33274: LD_INT 102
33276: PUSH
33277: LD_INT 103
33279: PUSH
33280: LD_INT 104
33282: PUSH
33283: LD_INT 105
33285: PUSH
33286: LD_INT 106
33288: PUSH
33289: LD_INT 107
33291: PUSH
33292: LD_INT 108
33294: PUSH
33295: LD_INT 109
33297: PUSH
33298: LD_INT 110
33300: PUSH
33301: LD_INT 111
33303: PUSH
33304: LD_INT 112
33306: PUSH
33307: LD_INT 113
33309: PUSH
33310: LD_INT 114
33312: PUSH
33313: EMPTY
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: ST_TO_ADDR
33333: GO 34280
33335: LD_INT 15
33337: DOUBLE
33338: EQUAL
33339: IFTRUE 33343
33341: GO 33555
33343: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
33344: LD_ADDR_VAR 0 1
33348: PUSH
33349: LD_INT 1
33351: PUSH
33352: LD_INT 2
33354: PUSH
33355: LD_INT 3
33357: PUSH
33358: LD_INT 4
33360: PUSH
33361: LD_INT 5
33363: PUSH
33364: LD_INT 6
33366: PUSH
33367: LD_INT 7
33369: PUSH
33370: LD_INT 8
33372: PUSH
33373: LD_INT 9
33375: PUSH
33376: LD_INT 10
33378: PUSH
33379: LD_INT 11
33381: PUSH
33382: LD_INT 12
33384: PUSH
33385: LD_INT 13
33387: PUSH
33388: LD_INT 14
33390: PUSH
33391: LD_INT 15
33393: PUSH
33394: LD_INT 16
33396: PUSH
33397: LD_INT 17
33399: PUSH
33400: LD_INT 18
33402: PUSH
33403: LD_INT 19
33405: PUSH
33406: LD_INT 20
33408: PUSH
33409: LD_INT 21
33411: PUSH
33412: LD_INT 22
33414: PUSH
33415: LD_INT 23
33417: PUSH
33418: LD_INT 24
33420: PUSH
33421: LD_INT 25
33423: PUSH
33424: LD_INT 26
33426: PUSH
33427: LD_INT 27
33429: PUSH
33430: LD_INT 28
33432: PUSH
33433: LD_INT 29
33435: PUSH
33436: LD_INT 30
33438: PUSH
33439: LD_INT 31
33441: PUSH
33442: LD_INT 32
33444: PUSH
33445: LD_INT 33
33447: PUSH
33448: LD_INT 34
33450: PUSH
33451: LD_INT 36
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: LIST
33487: LIST
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 101
33493: PUSH
33494: LD_INT 102
33496: PUSH
33497: LD_INT 103
33499: PUSH
33500: LD_INT 104
33502: PUSH
33503: LD_INT 105
33505: PUSH
33506: LD_INT 106
33508: PUSH
33509: LD_INT 107
33511: PUSH
33512: LD_INT 108
33514: PUSH
33515: LD_INT 109
33517: PUSH
33518: LD_INT 110
33520: PUSH
33521: LD_INT 111
33523: PUSH
33524: LD_INT 112
33526: PUSH
33527: LD_INT 113
33529: PUSH
33530: LD_INT 114
33532: PUSH
33533: EMPTY
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: ST_TO_ADDR
33553: GO 34280
33555: LD_INT 16
33557: DOUBLE
33558: EQUAL
33559: IFTRUE 33563
33561: GO 33687
33563: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
33564: LD_ADDR_VAR 0 1
33568: PUSH
33569: LD_INT 2
33571: PUSH
33572: LD_INT 4
33574: PUSH
33575: LD_INT 5
33577: PUSH
33578: LD_INT 7
33580: PUSH
33581: LD_INT 11
33583: PUSH
33584: LD_INT 12
33586: PUSH
33587: LD_INT 15
33589: PUSH
33590: LD_INT 16
33592: PUSH
33593: LD_INT 20
33595: PUSH
33596: LD_INT 21
33598: PUSH
33599: LD_INT 22
33601: PUSH
33602: LD_INT 23
33604: PUSH
33605: LD_INT 25
33607: PUSH
33608: LD_INT 26
33610: PUSH
33611: LD_INT 30
33613: PUSH
33614: LD_INT 31
33616: PUSH
33617: LD_INT 32
33619: PUSH
33620: LD_INT 33
33622: PUSH
33623: LD_INT 34
33625: PUSH
33626: EMPTY
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: LIST
33634: LIST
33635: LIST
33636: LIST
33637: LIST
33638: LIST
33639: LIST
33640: LIST
33641: LIST
33642: LIST
33643: LIST
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 101
33649: PUSH
33650: LD_INT 102
33652: PUSH
33653: LD_INT 103
33655: PUSH
33656: LD_INT 106
33658: PUSH
33659: LD_INT 108
33661: PUSH
33662: LD_INT 112
33664: PUSH
33665: LD_INT 113
33667: PUSH
33668: LD_INT 114
33670: PUSH
33671: EMPTY
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: PUSH
33681: EMPTY
33682: LIST
33683: LIST
33684: ST_TO_ADDR
33685: GO 34280
33687: LD_INT 17
33689: DOUBLE
33690: EQUAL
33691: IFTRUE 33695
33693: GO 33907
33695: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
33696: LD_ADDR_VAR 0 1
33700: PUSH
33701: LD_INT 1
33703: PUSH
33704: LD_INT 2
33706: PUSH
33707: LD_INT 3
33709: PUSH
33710: LD_INT 4
33712: PUSH
33713: LD_INT 5
33715: PUSH
33716: LD_INT 6
33718: PUSH
33719: LD_INT 7
33721: PUSH
33722: LD_INT 8
33724: PUSH
33725: LD_INT 9
33727: PUSH
33728: LD_INT 10
33730: PUSH
33731: LD_INT 11
33733: PUSH
33734: LD_INT 12
33736: PUSH
33737: LD_INT 13
33739: PUSH
33740: LD_INT 14
33742: PUSH
33743: LD_INT 15
33745: PUSH
33746: LD_INT 16
33748: PUSH
33749: LD_INT 17
33751: PUSH
33752: LD_INT 18
33754: PUSH
33755: LD_INT 19
33757: PUSH
33758: LD_INT 20
33760: PUSH
33761: LD_INT 21
33763: PUSH
33764: LD_INT 22
33766: PUSH
33767: LD_INT 23
33769: PUSH
33770: LD_INT 24
33772: PUSH
33773: LD_INT 25
33775: PUSH
33776: LD_INT 26
33778: PUSH
33779: LD_INT 27
33781: PUSH
33782: LD_INT 28
33784: PUSH
33785: LD_INT 29
33787: PUSH
33788: LD_INT 30
33790: PUSH
33791: LD_INT 31
33793: PUSH
33794: LD_INT 32
33796: PUSH
33797: LD_INT 33
33799: PUSH
33800: LD_INT 34
33802: PUSH
33803: LD_INT 36
33805: PUSH
33806: EMPTY
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: LIST
33820: LIST
33821: LIST
33822: LIST
33823: LIST
33824: LIST
33825: LIST
33826: LIST
33827: LIST
33828: LIST
33829: LIST
33830: LIST
33831: LIST
33832: LIST
33833: LIST
33834: LIST
33835: LIST
33836: LIST
33837: LIST
33838: LIST
33839: LIST
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 101
33845: PUSH
33846: LD_INT 102
33848: PUSH
33849: LD_INT 103
33851: PUSH
33852: LD_INT 104
33854: PUSH
33855: LD_INT 105
33857: PUSH
33858: LD_INT 106
33860: PUSH
33861: LD_INT 107
33863: PUSH
33864: LD_INT 108
33866: PUSH
33867: LD_INT 109
33869: PUSH
33870: LD_INT 110
33872: PUSH
33873: LD_INT 111
33875: PUSH
33876: LD_INT 112
33878: PUSH
33879: LD_INT 113
33881: PUSH
33882: LD_INT 114
33884: PUSH
33885: EMPTY
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: PUSH
33901: EMPTY
33902: LIST
33903: LIST
33904: ST_TO_ADDR
33905: GO 34280
33907: LD_INT 18
33909: DOUBLE
33910: EQUAL
33911: IFTRUE 33915
33913: GO 34051
33915: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
33916: LD_ADDR_VAR 0 1
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: LD_INT 4
33926: PUSH
33927: LD_INT 5
33929: PUSH
33930: LD_INT 7
33932: PUSH
33933: LD_INT 11
33935: PUSH
33936: LD_INT 12
33938: PUSH
33939: LD_INT 15
33941: PUSH
33942: LD_INT 16
33944: PUSH
33945: LD_INT 20
33947: PUSH
33948: LD_INT 21
33950: PUSH
33951: LD_INT 22
33953: PUSH
33954: LD_INT 23
33956: PUSH
33957: LD_INT 25
33959: PUSH
33960: LD_INT 26
33962: PUSH
33963: LD_INT 30
33965: PUSH
33966: LD_INT 31
33968: PUSH
33969: LD_INT 32
33971: PUSH
33972: LD_INT 33
33974: PUSH
33975: LD_INT 34
33977: PUSH
33978: LD_INT 35
33980: PUSH
33981: LD_INT 36
33983: PUSH
33984: EMPTY
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 101
34009: PUSH
34010: LD_INT 102
34012: PUSH
34013: LD_INT 103
34015: PUSH
34016: LD_INT 106
34018: PUSH
34019: LD_INT 108
34021: PUSH
34022: LD_INT 112
34024: PUSH
34025: LD_INT 113
34027: PUSH
34028: LD_INT 114
34030: PUSH
34031: LD_INT 115
34033: PUSH
34034: EMPTY
34035: LIST
34036: LIST
34037: LIST
34038: LIST
34039: LIST
34040: LIST
34041: LIST
34042: LIST
34043: LIST
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: ST_TO_ADDR
34049: GO 34280
34051: LD_INT 19
34053: DOUBLE
34054: EQUAL
34055: IFTRUE 34059
34057: GO 34279
34059: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
34060: LD_ADDR_VAR 0 1
34064: PUSH
34065: LD_INT 1
34067: PUSH
34068: LD_INT 2
34070: PUSH
34071: LD_INT 3
34073: PUSH
34074: LD_INT 4
34076: PUSH
34077: LD_INT 5
34079: PUSH
34080: LD_INT 6
34082: PUSH
34083: LD_INT 7
34085: PUSH
34086: LD_INT 8
34088: PUSH
34089: LD_INT 9
34091: PUSH
34092: LD_INT 10
34094: PUSH
34095: LD_INT 11
34097: PUSH
34098: LD_INT 12
34100: PUSH
34101: LD_INT 13
34103: PUSH
34104: LD_INT 14
34106: PUSH
34107: LD_INT 15
34109: PUSH
34110: LD_INT 16
34112: PUSH
34113: LD_INT 17
34115: PUSH
34116: LD_INT 18
34118: PUSH
34119: LD_INT 19
34121: PUSH
34122: LD_INT 20
34124: PUSH
34125: LD_INT 21
34127: PUSH
34128: LD_INT 22
34130: PUSH
34131: LD_INT 23
34133: PUSH
34134: LD_INT 24
34136: PUSH
34137: LD_INT 25
34139: PUSH
34140: LD_INT 26
34142: PUSH
34143: LD_INT 27
34145: PUSH
34146: LD_INT 28
34148: PUSH
34149: LD_INT 29
34151: PUSH
34152: LD_INT 30
34154: PUSH
34155: LD_INT 31
34157: PUSH
34158: LD_INT 32
34160: PUSH
34161: LD_INT 33
34163: PUSH
34164: LD_INT 34
34166: PUSH
34167: LD_INT 35
34169: PUSH
34170: LD_INT 36
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: LIST
34204: LIST
34205: LIST
34206: LIST
34207: LIST
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 101
34213: PUSH
34214: LD_INT 102
34216: PUSH
34217: LD_INT 103
34219: PUSH
34220: LD_INT 104
34222: PUSH
34223: LD_INT 105
34225: PUSH
34226: LD_INT 106
34228: PUSH
34229: LD_INT 107
34231: PUSH
34232: LD_INT 108
34234: PUSH
34235: LD_INT 109
34237: PUSH
34238: LD_INT 110
34240: PUSH
34241: LD_INT 111
34243: PUSH
34244: LD_INT 112
34246: PUSH
34247: LD_INT 113
34249: PUSH
34250: LD_INT 114
34252: PUSH
34253: LD_INT 115
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: LIST
34268: LIST
34269: LIST
34270: LIST
34271: LIST
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: ST_TO_ADDR
34277: GO 34280
34279: POP
// end else
34280: GO 34499
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
34282: LD_ADDR_VAR 0 1
34286: PUSH
34287: LD_INT 1
34289: PUSH
34290: LD_INT 2
34292: PUSH
34293: LD_INT 3
34295: PUSH
34296: LD_INT 4
34298: PUSH
34299: LD_INT 5
34301: PUSH
34302: LD_INT 6
34304: PUSH
34305: LD_INT 7
34307: PUSH
34308: LD_INT 8
34310: PUSH
34311: LD_INT 9
34313: PUSH
34314: LD_INT 10
34316: PUSH
34317: LD_INT 11
34319: PUSH
34320: LD_INT 12
34322: PUSH
34323: LD_INT 13
34325: PUSH
34326: LD_INT 14
34328: PUSH
34329: LD_INT 15
34331: PUSH
34332: LD_INT 16
34334: PUSH
34335: LD_INT 17
34337: PUSH
34338: LD_INT 18
34340: PUSH
34341: LD_INT 19
34343: PUSH
34344: LD_INT 20
34346: PUSH
34347: LD_INT 21
34349: PUSH
34350: LD_INT 22
34352: PUSH
34353: LD_INT 23
34355: PUSH
34356: LD_INT 24
34358: PUSH
34359: LD_INT 25
34361: PUSH
34362: LD_INT 26
34364: PUSH
34365: LD_INT 27
34367: PUSH
34368: LD_INT 28
34370: PUSH
34371: LD_INT 29
34373: PUSH
34374: LD_INT 30
34376: PUSH
34377: LD_INT 31
34379: PUSH
34380: LD_INT 32
34382: PUSH
34383: LD_INT 33
34385: PUSH
34386: LD_INT 34
34388: PUSH
34389: LD_INT 35
34391: PUSH
34392: LD_INT 36
34394: PUSH
34395: EMPTY
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: LIST
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: LIST
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: PUSH
34433: LD_INT 101
34435: PUSH
34436: LD_INT 102
34438: PUSH
34439: LD_INT 103
34441: PUSH
34442: LD_INT 104
34444: PUSH
34445: LD_INT 105
34447: PUSH
34448: LD_INT 106
34450: PUSH
34451: LD_INT 107
34453: PUSH
34454: LD_INT 108
34456: PUSH
34457: LD_INT 109
34459: PUSH
34460: LD_INT 110
34462: PUSH
34463: LD_INT 111
34465: PUSH
34466: LD_INT 112
34468: PUSH
34469: LD_INT 113
34471: PUSH
34472: LD_INT 114
34474: PUSH
34475: LD_INT 115
34477: PUSH
34478: EMPTY
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: ST_TO_ADDR
// if result then
34499: LD_VAR 0 1
34503: IFFALSE 34792
// begin normal :=  ;
34505: LD_ADDR_VAR 0 3
34509: PUSH
34510: LD_STRING 
34512: ST_TO_ADDR
// hardcore :=  ;
34513: LD_ADDR_VAR 0 4
34517: PUSH
34518: LD_STRING 
34520: ST_TO_ADDR
// for i = 1 to normalCounter do
34521: LD_ADDR_VAR 0 5
34525: PUSH
34526: DOUBLE
34527: LD_INT 1
34529: DEC
34530: ST_TO_ADDR
34531: LD_EXP 86
34535: PUSH
34536: FOR_TO
34537: IFFALSE 34638
// begin tmp := 0 ;
34539: LD_ADDR_VAR 0 2
34543: PUSH
34544: LD_STRING 0
34546: ST_TO_ADDR
// if result [ 1 ] then
34547: LD_VAR 0 1
34551: PUSH
34552: LD_INT 1
34554: ARRAY
34555: IFFALSE 34620
// if result [ 1 ] [ 1 ] = i then
34557: LD_VAR 0 1
34561: PUSH
34562: LD_INT 1
34564: ARRAY
34565: PUSH
34566: LD_INT 1
34568: ARRAY
34569: PUSH
34570: LD_VAR 0 5
34574: EQUAL
34575: IFFALSE 34620
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
34577: LD_ADDR_VAR 0 1
34581: PUSH
34582: LD_VAR 0 1
34586: PPUSH
34587: LD_INT 1
34589: PPUSH
34590: LD_VAR 0 1
34594: PUSH
34595: LD_INT 1
34597: ARRAY
34598: PPUSH
34599: LD_INT 1
34601: PPUSH
34602: CALL_OW 3
34606: PPUSH
34607: CALL_OW 1
34611: ST_TO_ADDR
// tmp := 1 ;
34612: LD_ADDR_VAR 0 2
34616: PUSH
34617: LD_STRING 1
34619: ST_TO_ADDR
// end ; normal := normal & tmp ;
34620: LD_ADDR_VAR 0 3
34624: PUSH
34625: LD_VAR 0 3
34629: PUSH
34630: LD_VAR 0 2
34634: STR
34635: ST_TO_ADDR
// end ;
34636: GO 34536
34638: POP
34639: POP
// for i = 1 to hardcoreCounter do
34640: LD_ADDR_VAR 0 5
34644: PUSH
34645: DOUBLE
34646: LD_INT 1
34648: DEC
34649: ST_TO_ADDR
34650: LD_EXP 87
34654: PUSH
34655: FOR_TO
34656: IFFALSE 34761
// begin tmp := 0 ;
34658: LD_ADDR_VAR 0 2
34662: PUSH
34663: LD_STRING 0
34665: ST_TO_ADDR
// if result [ 2 ] then
34666: LD_VAR 0 1
34670: PUSH
34671: LD_INT 2
34673: ARRAY
34674: IFFALSE 34743
// if result [ 2 ] [ 1 ] = 100 + i then
34676: LD_VAR 0 1
34680: PUSH
34681: LD_INT 2
34683: ARRAY
34684: PUSH
34685: LD_INT 1
34687: ARRAY
34688: PUSH
34689: LD_INT 100
34691: PUSH
34692: LD_VAR 0 5
34696: PLUS
34697: EQUAL
34698: IFFALSE 34743
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
34700: LD_ADDR_VAR 0 1
34704: PUSH
34705: LD_VAR 0 1
34709: PPUSH
34710: LD_INT 2
34712: PPUSH
34713: LD_VAR 0 1
34717: PUSH
34718: LD_INT 2
34720: ARRAY
34721: PPUSH
34722: LD_INT 1
34724: PPUSH
34725: CALL_OW 3
34729: PPUSH
34730: CALL_OW 1
34734: ST_TO_ADDR
// tmp := 1 ;
34735: LD_ADDR_VAR 0 2
34739: PUSH
34740: LD_STRING 1
34742: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
34743: LD_ADDR_VAR 0 4
34747: PUSH
34748: LD_VAR 0 4
34752: PUSH
34753: LD_VAR 0 2
34757: STR
34758: ST_TO_ADDR
// end ;
34759: GO 34655
34761: POP
34762: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
34763: LD_STRING getStreamItemsFromMission("
34765: PUSH
34766: LD_VAR 0 3
34770: STR
34771: PUSH
34772: LD_STRING ","
34774: STR
34775: PUSH
34776: LD_VAR 0 4
34780: STR
34781: PUSH
34782: LD_STRING ")
34784: STR
34785: PPUSH
34786: CALL_OW 559
// end else
34790: GO 34799
// ToLua ( getStreamItemsFromMission("","") ) ;
34792: LD_STRING getStreamItemsFromMission("","")
34794: PPUSH
34795: CALL_OW 559
// end ;
34799: LD_VAR 0 1
34803: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
34804: LD_EXP 85
34808: PUSH
34809: LD_EXP 90
34813: AND
34814: IFFALSE 34938
34816: GO 34818
34818: DISABLE
34819: LD_INT 0
34821: PPUSH
34822: PPUSH
// begin enable ;
34823: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
34824: LD_ADDR_VAR 0 2
34828: PUSH
34829: LD_INT 22
34831: PUSH
34832: LD_OWVAR 2
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: LD_INT 2
34843: PUSH
34844: LD_INT 34
34846: PUSH
34847: LD_INT 7
34849: PUSH
34850: EMPTY
34851: LIST
34852: LIST
34853: PUSH
34854: LD_INT 34
34856: PUSH
34857: LD_INT 45
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 34
34866: PUSH
34867: LD_INT 28
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 34
34876: PUSH
34877: LD_INT 47
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: LIST
34888: LIST
34889: LIST
34890: PUSH
34891: EMPTY
34892: LIST
34893: LIST
34894: PPUSH
34895: CALL_OW 69
34899: ST_TO_ADDR
// if not tmp then
34900: LD_VAR 0 2
34904: NOT
34905: IFFALSE 34909
// exit ;
34907: GO 34938
// for i in tmp do
34909: LD_ADDR_VAR 0 1
34913: PUSH
34914: LD_VAR 0 2
34918: PUSH
34919: FOR_IN
34920: IFFALSE 34936
// begin SetLives ( i , 0 ) ;
34922: LD_VAR 0 1
34926: PPUSH
34927: LD_INT 0
34929: PPUSH
34930: CALL_OW 234
// end ;
34934: GO 34919
34936: POP
34937: POP
// end ;
34938: PPOPN 2
34940: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
34941: LD_EXP 85
34945: PUSH
34946: LD_EXP 91
34950: AND
34951: IFFALSE 35035
34953: GO 34955
34955: DISABLE
34956: LD_INT 0
34958: PPUSH
34959: PPUSH
// begin enable ;
34960: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
34961: LD_ADDR_VAR 0 2
34965: PUSH
34966: LD_INT 22
34968: PUSH
34969: LD_OWVAR 2
34973: PUSH
34974: EMPTY
34975: LIST
34976: LIST
34977: PUSH
34978: LD_INT 32
34980: PUSH
34981: LD_INT 3
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PPUSH
34992: CALL_OW 69
34996: ST_TO_ADDR
// if not tmp then
34997: LD_VAR 0 2
35001: NOT
35002: IFFALSE 35006
// exit ;
35004: GO 35035
// for i in tmp do
35006: LD_ADDR_VAR 0 1
35010: PUSH
35011: LD_VAR 0 2
35015: PUSH
35016: FOR_IN
35017: IFFALSE 35033
// begin SetLives ( i , 0 ) ;
35019: LD_VAR 0 1
35023: PPUSH
35024: LD_INT 0
35026: PPUSH
35027: CALL_OW 234
// end ;
35031: GO 35016
35033: POP
35034: POP
// end ;
35035: PPOPN 2
35037: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
35038: LD_EXP 85
35042: PUSH
35043: LD_EXP 88
35047: AND
35048: IFFALSE 35141
35050: GO 35052
35052: DISABLE
35053: LD_INT 0
35055: PPUSH
// begin enable ;
35056: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
35057: LD_ADDR_VAR 0 1
35061: PUSH
35062: LD_INT 22
35064: PUSH
35065: LD_OWVAR 2
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 2
35076: PUSH
35077: LD_INT 25
35079: PUSH
35080: LD_INT 5
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 25
35089: PUSH
35090: LD_INT 9
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 25
35099: PUSH
35100: LD_INT 8
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: EMPTY
35108: LIST
35109: LIST
35110: LIST
35111: LIST
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PPUSH
35117: CALL_OW 69
35121: PUSH
35122: FOR_IN
35123: IFFALSE 35139
// begin SetClass ( i , 1 ) ;
35125: LD_VAR 0 1
35129: PPUSH
35130: LD_INT 1
35132: PPUSH
35133: CALL_OW 336
// end ;
35137: GO 35122
35139: POP
35140: POP
// end ;
35141: PPOPN 1
35143: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
35144: LD_EXP 85
35148: PUSH
35149: LD_EXP 89
35153: AND
35154: PUSH
35155: LD_OWVAR 65
35159: PUSH
35160: LD_INT 7
35162: LESS
35163: AND
35164: IFFALSE 35178
35166: GO 35168
35168: DISABLE
// begin enable ;
35169: ENABLE
// game_speed := 7 ;
35170: LD_ADDR_OWVAR 65
35174: PUSH
35175: LD_INT 7
35177: ST_TO_ADDR
// end ;
35178: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
35179: LD_EXP 85
35183: PUSH
35184: LD_EXP 92
35188: AND
35189: IFFALSE 35391
35191: GO 35193
35193: DISABLE
35194: LD_INT 0
35196: PPUSH
35197: PPUSH
35198: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
35199: LD_ADDR_VAR 0 3
35203: PUSH
35204: LD_INT 81
35206: PUSH
35207: LD_OWVAR 2
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 21
35218: PUSH
35219: LD_INT 1
35221: PUSH
35222: EMPTY
35223: LIST
35224: LIST
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PPUSH
35230: CALL_OW 69
35234: ST_TO_ADDR
// if not tmp then
35235: LD_VAR 0 3
35239: NOT
35240: IFFALSE 35244
// exit ;
35242: GO 35391
// if tmp > 5 then
35244: LD_VAR 0 3
35248: PUSH
35249: LD_INT 5
35251: GREATER
35252: IFFALSE 35264
// k := 5 else
35254: LD_ADDR_VAR 0 2
35258: PUSH
35259: LD_INT 5
35261: ST_TO_ADDR
35262: GO 35274
// k := tmp ;
35264: LD_ADDR_VAR 0 2
35268: PUSH
35269: LD_VAR 0 3
35273: ST_TO_ADDR
// for i := 1 to k do
35274: LD_ADDR_VAR 0 1
35278: PUSH
35279: DOUBLE
35280: LD_INT 1
35282: DEC
35283: ST_TO_ADDR
35284: LD_VAR 0 2
35288: PUSH
35289: FOR_TO
35290: IFFALSE 35389
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
35292: LD_VAR 0 3
35296: PUSH
35297: LD_VAR 0 1
35301: ARRAY
35302: PPUSH
35303: LD_VAR 0 1
35307: PUSH
35308: LD_INT 4
35310: MOD
35311: PUSH
35312: LD_INT 1
35314: PLUS
35315: PPUSH
35316: CALL_OW 259
35320: PUSH
35321: LD_INT 10
35323: LESS
35324: IFFALSE 35387
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
35326: LD_VAR 0 3
35330: PUSH
35331: LD_VAR 0 1
35335: ARRAY
35336: PPUSH
35337: LD_VAR 0 1
35341: PUSH
35342: LD_INT 4
35344: MOD
35345: PUSH
35346: LD_INT 1
35348: PLUS
35349: PPUSH
35350: LD_VAR 0 3
35354: PUSH
35355: LD_VAR 0 1
35359: ARRAY
35360: PPUSH
35361: LD_VAR 0 1
35365: PUSH
35366: LD_INT 4
35368: MOD
35369: PUSH
35370: LD_INT 1
35372: PLUS
35373: PPUSH
35374: CALL_OW 259
35378: PUSH
35379: LD_INT 1
35381: PLUS
35382: PPUSH
35383: CALL_OW 237
35387: GO 35289
35389: POP
35390: POP
// end ;
35391: PPOPN 3
35393: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
35394: LD_EXP 85
35398: PUSH
35399: LD_EXP 93
35403: AND
35404: IFFALSE 35424
35406: GO 35408
35408: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
35409: LD_INT 4
35411: PPUSH
35412: LD_OWVAR 2
35416: PPUSH
35417: LD_INT 0
35419: PPUSH
35420: CALL_OW 324
35424: END
// every 0 0$1 trigger StreamModeActive and sShovel do
35425: LD_EXP 85
35429: PUSH
35430: LD_EXP 122
35434: AND
35435: IFFALSE 35455
35437: GO 35439
35439: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
35440: LD_INT 19
35442: PPUSH
35443: LD_OWVAR 2
35447: PPUSH
35448: LD_INT 0
35450: PPUSH
35451: CALL_OW 324
35455: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
35456: LD_EXP 85
35460: PUSH
35461: LD_EXP 94
35465: AND
35466: IFFALSE 35568
35468: GO 35470
35470: DISABLE
35471: LD_INT 0
35473: PPUSH
35474: PPUSH
// begin enable ;
35475: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
35476: LD_ADDR_VAR 0 2
35480: PUSH
35481: LD_INT 22
35483: PUSH
35484: LD_OWVAR 2
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: PUSH
35493: LD_INT 2
35495: PUSH
35496: LD_INT 34
35498: PUSH
35499: LD_INT 11
35501: PUSH
35502: EMPTY
35503: LIST
35504: LIST
35505: PUSH
35506: LD_INT 34
35508: PUSH
35509: LD_INT 30
35511: PUSH
35512: EMPTY
35513: LIST
35514: LIST
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: LIST
35520: PUSH
35521: EMPTY
35522: LIST
35523: LIST
35524: PPUSH
35525: CALL_OW 69
35529: ST_TO_ADDR
// if not tmp then
35530: LD_VAR 0 2
35534: NOT
35535: IFFALSE 35539
// exit ;
35537: GO 35568
// for i in tmp do
35539: LD_ADDR_VAR 0 1
35543: PUSH
35544: LD_VAR 0 2
35548: PUSH
35549: FOR_IN
35550: IFFALSE 35566
// begin SetLives ( i , 0 ) ;
35552: LD_VAR 0 1
35556: PPUSH
35557: LD_INT 0
35559: PPUSH
35560: CALL_OW 234
// end ;
35564: GO 35549
35566: POP
35567: POP
// end ;
35568: PPOPN 2
35570: END
// every 0 0$1 trigger StreamModeActive and sBunker do
35571: LD_EXP 85
35575: PUSH
35576: LD_EXP 95
35580: AND
35581: IFFALSE 35601
35583: GO 35585
35585: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
35586: LD_INT 32
35588: PPUSH
35589: LD_OWVAR 2
35593: PPUSH
35594: LD_INT 0
35596: PPUSH
35597: CALL_OW 324
35601: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
35602: LD_EXP 85
35606: PUSH
35607: LD_EXP 96
35611: AND
35612: IFFALSE 35793
35614: GO 35616
35616: DISABLE
35617: LD_INT 0
35619: PPUSH
35620: PPUSH
35621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
35622: LD_ADDR_VAR 0 2
35626: PUSH
35627: LD_INT 22
35629: PUSH
35630: LD_OWVAR 2
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 33
35641: PUSH
35642: LD_INT 3
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: EMPTY
35650: LIST
35651: LIST
35652: PPUSH
35653: CALL_OW 69
35657: ST_TO_ADDR
// if not tmp then
35658: LD_VAR 0 2
35662: NOT
35663: IFFALSE 35667
// exit ;
35665: GO 35793
// side := 0 ;
35667: LD_ADDR_VAR 0 3
35671: PUSH
35672: LD_INT 0
35674: ST_TO_ADDR
// for i := 1 to 8 do
35675: LD_ADDR_VAR 0 1
35679: PUSH
35680: DOUBLE
35681: LD_INT 1
35683: DEC
35684: ST_TO_ADDR
35685: LD_INT 8
35687: PUSH
35688: FOR_TO
35689: IFFALSE 35737
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
35691: LD_OWVAR 2
35695: PUSH
35696: LD_VAR 0 1
35700: NONEQUAL
35701: PUSH
35702: LD_OWVAR 2
35706: PPUSH
35707: LD_VAR 0 1
35711: PPUSH
35712: CALL_OW 81
35716: PUSH
35717: LD_INT 2
35719: EQUAL
35720: AND
35721: IFFALSE 35735
// begin side := i ;
35723: LD_ADDR_VAR 0 3
35727: PUSH
35728: LD_VAR 0 1
35732: ST_TO_ADDR
// break ;
35733: GO 35737
// end ;
35735: GO 35688
35737: POP
35738: POP
// if not side then
35739: LD_VAR 0 3
35743: NOT
35744: IFFALSE 35748
// exit ;
35746: GO 35793
// for i := 1 to tmp do
35748: LD_ADDR_VAR 0 1
35752: PUSH
35753: DOUBLE
35754: LD_INT 1
35756: DEC
35757: ST_TO_ADDR
35758: LD_VAR 0 2
35762: PUSH
35763: FOR_TO
35764: IFFALSE 35791
// if Prob ( 60 ) then
35766: LD_INT 60
35768: PPUSH
35769: CALL_OW 13
35773: IFFALSE 35789
// SetSide ( i , side ) ;
35775: LD_VAR 0 1
35779: PPUSH
35780: LD_VAR 0 3
35784: PPUSH
35785: CALL_OW 235
35789: GO 35763
35791: POP
35792: POP
// end ;
35793: PPOPN 3
35795: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
35796: LD_EXP 85
35800: PUSH
35801: LD_EXP 98
35805: AND
35806: IFFALSE 35925
35808: GO 35810
35810: DISABLE
35811: LD_INT 0
35813: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
35814: LD_ADDR_VAR 0 1
35818: PUSH
35819: LD_INT 22
35821: PUSH
35822: LD_OWVAR 2
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 21
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 3
35843: PUSH
35844: LD_INT 23
35846: PUSH
35847: LD_INT 0
35849: PUSH
35850: EMPTY
35851: LIST
35852: LIST
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: LIST
35862: PPUSH
35863: CALL_OW 69
35867: PUSH
35868: FOR_IN
35869: IFFALSE 35923
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
35871: LD_VAR 0 1
35875: PPUSH
35876: CALL_OW 257
35880: PUSH
35881: LD_INT 1
35883: PUSH
35884: LD_INT 2
35886: PUSH
35887: LD_INT 3
35889: PUSH
35890: LD_INT 4
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: LIST
35897: LIST
35898: IN
35899: IFFALSE 35921
// SetClass ( un , rand ( 1 , 4 ) ) ;
35901: LD_VAR 0 1
35905: PPUSH
35906: LD_INT 1
35908: PPUSH
35909: LD_INT 4
35911: PPUSH
35912: CALL_OW 12
35916: PPUSH
35917: CALL_OW 336
35921: GO 35868
35923: POP
35924: POP
// end ;
35925: PPOPN 1
35927: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
35928: LD_EXP 85
35932: PUSH
35933: LD_EXP 97
35937: AND
35938: IFFALSE 36017
35940: GO 35942
35942: DISABLE
35943: LD_INT 0
35945: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
35946: LD_ADDR_VAR 0 1
35950: PUSH
35951: LD_INT 22
35953: PUSH
35954: LD_OWVAR 2
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 21
35965: PUSH
35966: LD_INT 3
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: EMPTY
35974: LIST
35975: LIST
35976: PPUSH
35977: CALL_OW 69
35981: ST_TO_ADDR
// if not tmp then
35982: LD_VAR 0 1
35986: NOT
35987: IFFALSE 35991
// exit ;
35989: GO 36017
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
35991: LD_VAR 0 1
35995: PUSH
35996: LD_INT 1
35998: PPUSH
35999: LD_VAR 0 1
36003: PPUSH
36004: CALL_OW 12
36008: ARRAY
36009: PPUSH
36010: LD_INT 100
36012: PPUSH
36013: CALL_OW 234
// end ;
36017: PPOPN 1
36019: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
36020: LD_EXP 85
36024: PUSH
36025: LD_EXP 99
36029: AND
36030: IFFALSE 36128
36032: GO 36034
36034: DISABLE
36035: LD_INT 0
36037: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36038: LD_ADDR_VAR 0 1
36042: PUSH
36043: LD_INT 22
36045: PUSH
36046: LD_OWVAR 2
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 21
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: EMPTY
36062: LIST
36063: LIST
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PPUSH
36069: CALL_OW 69
36073: ST_TO_ADDR
// if not tmp then
36074: LD_VAR 0 1
36078: NOT
36079: IFFALSE 36083
// exit ;
36081: GO 36128
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
36083: LD_VAR 0 1
36087: PUSH
36088: LD_INT 1
36090: PPUSH
36091: LD_VAR 0 1
36095: PPUSH
36096: CALL_OW 12
36100: ARRAY
36101: PPUSH
36102: LD_INT 1
36104: PPUSH
36105: LD_INT 4
36107: PPUSH
36108: CALL_OW 12
36112: PPUSH
36113: LD_INT 3000
36115: PPUSH
36116: LD_INT 9000
36118: PPUSH
36119: CALL_OW 12
36123: PPUSH
36124: CALL_OW 492
// end ;
36128: PPOPN 1
36130: END
// every 0 0$1 trigger StreamModeActive and sDepot do
36131: LD_EXP 85
36135: PUSH
36136: LD_EXP 100
36140: AND
36141: IFFALSE 36161
36143: GO 36145
36145: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
36146: LD_INT 1
36148: PPUSH
36149: LD_OWVAR 2
36153: PPUSH
36154: LD_INT 0
36156: PPUSH
36157: CALL_OW 324
36161: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
36162: LD_EXP 85
36166: PUSH
36167: LD_EXP 101
36171: AND
36172: IFFALSE 36255
36174: GO 36176
36176: DISABLE
36177: LD_INT 0
36179: PPUSH
36180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
36181: LD_ADDR_VAR 0 2
36185: PUSH
36186: LD_INT 22
36188: PUSH
36189: LD_OWVAR 2
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 21
36200: PUSH
36201: LD_INT 3
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: EMPTY
36209: LIST
36210: LIST
36211: PPUSH
36212: CALL_OW 69
36216: ST_TO_ADDR
// if not tmp then
36217: LD_VAR 0 2
36221: NOT
36222: IFFALSE 36226
// exit ;
36224: GO 36255
// for i in tmp do
36226: LD_ADDR_VAR 0 1
36230: PUSH
36231: LD_VAR 0 2
36235: PUSH
36236: FOR_IN
36237: IFFALSE 36253
// SetBLevel ( i , 10 ) ;
36239: LD_VAR 0 1
36243: PPUSH
36244: LD_INT 10
36246: PPUSH
36247: CALL_OW 241
36251: GO 36236
36253: POP
36254: POP
// end ;
36255: PPOPN 2
36257: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
36258: LD_EXP 85
36262: PUSH
36263: LD_EXP 102
36267: AND
36268: IFFALSE 36379
36270: GO 36272
36272: DISABLE
36273: LD_INT 0
36275: PPUSH
36276: PPUSH
36277: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36278: LD_ADDR_VAR 0 3
36282: PUSH
36283: LD_INT 22
36285: PUSH
36286: LD_OWVAR 2
36290: PUSH
36291: EMPTY
36292: LIST
36293: LIST
36294: PUSH
36295: LD_INT 25
36297: PUSH
36298: LD_INT 1
36300: PUSH
36301: EMPTY
36302: LIST
36303: LIST
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PPUSH
36309: CALL_OW 69
36313: ST_TO_ADDR
// if not tmp then
36314: LD_VAR 0 3
36318: NOT
36319: IFFALSE 36323
// exit ;
36321: GO 36379
// un := tmp [ rand ( 1 , tmp ) ] ;
36323: LD_ADDR_VAR 0 2
36327: PUSH
36328: LD_VAR 0 3
36332: PUSH
36333: LD_INT 1
36335: PPUSH
36336: LD_VAR 0 3
36340: PPUSH
36341: CALL_OW 12
36345: ARRAY
36346: ST_TO_ADDR
// if Crawls ( un ) then
36347: LD_VAR 0 2
36351: PPUSH
36352: CALL_OW 318
36356: IFFALSE 36367
// ComWalk ( un ) ;
36358: LD_VAR 0 2
36362: PPUSH
36363: CALL_OW 138
// SetClass ( un , class_sniper ) ;
36367: LD_VAR 0 2
36371: PPUSH
36372: LD_INT 5
36374: PPUSH
36375: CALL_OW 336
// end ;
36379: PPOPN 3
36381: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
36382: LD_EXP 85
36386: PUSH
36387: LD_EXP 103
36391: AND
36392: PUSH
36393: LD_OWVAR 67
36397: PUSH
36398: LD_INT 3
36400: LESS
36401: AND
36402: IFFALSE 36421
36404: GO 36406
36406: DISABLE
// Difficulty := Difficulty + 1 ;
36407: LD_ADDR_OWVAR 67
36411: PUSH
36412: LD_OWVAR 67
36416: PUSH
36417: LD_INT 1
36419: PLUS
36420: ST_TO_ADDR
36421: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
36422: LD_EXP 85
36426: PUSH
36427: LD_EXP 104
36431: AND
36432: IFFALSE 36535
36434: GO 36436
36436: DISABLE
36437: LD_INT 0
36439: PPUSH
// begin for i := 1 to 5 do
36440: LD_ADDR_VAR 0 1
36444: PUSH
36445: DOUBLE
36446: LD_INT 1
36448: DEC
36449: ST_TO_ADDR
36450: LD_INT 5
36452: PUSH
36453: FOR_TO
36454: IFFALSE 36533
// begin uc_nation := nation_nature ;
36456: LD_ADDR_OWVAR 21
36460: PUSH
36461: LD_INT 0
36463: ST_TO_ADDR
// uc_side := 0 ;
36464: LD_ADDR_OWVAR 20
36468: PUSH
36469: LD_INT 0
36471: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36472: LD_ADDR_OWVAR 29
36476: PUSH
36477: LD_INT 12
36479: PUSH
36480: LD_INT 12
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: ST_TO_ADDR
// hc_agressivity := 20 ;
36487: LD_ADDR_OWVAR 35
36491: PUSH
36492: LD_INT 20
36494: ST_TO_ADDR
// hc_class := class_tiger ;
36495: LD_ADDR_OWVAR 28
36499: PUSH
36500: LD_INT 14
36502: ST_TO_ADDR
// hc_gallery :=  ;
36503: LD_ADDR_OWVAR 33
36507: PUSH
36508: LD_STRING 
36510: ST_TO_ADDR
// hc_name :=  ;
36511: LD_ADDR_OWVAR 26
36515: PUSH
36516: LD_STRING 
36518: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
36519: CALL_OW 44
36523: PPUSH
36524: LD_INT 0
36526: PPUSH
36527: CALL_OW 51
// end ;
36531: GO 36453
36533: POP
36534: POP
// end ;
36535: PPOPN 1
36537: END
// every 0 0$1 trigger StreamModeActive and sBomb do
36538: LD_EXP 85
36542: PUSH
36543: LD_EXP 105
36547: AND
36548: IFFALSE 36557
36550: GO 36552
36552: DISABLE
// StreamSibBomb ;
36553: CALL 36558 0 0
36557: END
// export function StreamSibBomb ; var i , x , y ; begin
36558: LD_INT 0
36560: PPUSH
36561: PPUSH
36562: PPUSH
36563: PPUSH
// result := false ;
36564: LD_ADDR_VAR 0 1
36568: PUSH
36569: LD_INT 0
36571: ST_TO_ADDR
// for i := 1 to 16 do
36572: LD_ADDR_VAR 0 2
36576: PUSH
36577: DOUBLE
36578: LD_INT 1
36580: DEC
36581: ST_TO_ADDR
36582: LD_INT 16
36584: PUSH
36585: FOR_TO
36586: IFFALSE 36785
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36588: LD_ADDR_VAR 0 3
36592: PUSH
36593: LD_INT 10
36595: PUSH
36596: LD_INT 20
36598: PUSH
36599: LD_INT 30
36601: PUSH
36602: LD_INT 40
36604: PUSH
36605: LD_INT 50
36607: PUSH
36608: LD_INT 60
36610: PUSH
36611: LD_INT 70
36613: PUSH
36614: LD_INT 80
36616: PUSH
36617: LD_INT 90
36619: PUSH
36620: LD_INT 100
36622: PUSH
36623: LD_INT 110
36625: PUSH
36626: LD_INT 120
36628: PUSH
36629: LD_INT 130
36631: PUSH
36632: LD_INT 140
36634: PUSH
36635: LD_INT 150
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: PPUSH
36658: LD_INT 15
36660: PPUSH
36661: CALL_OW 12
36665: ARRAY
36666: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36667: LD_ADDR_VAR 0 4
36671: PUSH
36672: LD_INT 10
36674: PUSH
36675: LD_INT 20
36677: PUSH
36678: LD_INT 30
36680: PUSH
36681: LD_INT 40
36683: PUSH
36684: LD_INT 50
36686: PUSH
36687: LD_INT 60
36689: PUSH
36690: LD_INT 70
36692: PUSH
36693: LD_INT 80
36695: PUSH
36696: LD_INT 90
36698: PUSH
36699: LD_INT 100
36701: PUSH
36702: LD_INT 110
36704: PUSH
36705: LD_INT 120
36707: PUSH
36708: LD_INT 130
36710: PUSH
36711: LD_INT 140
36713: PUSH
36714: LD_INT 150
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: LIST
36726: LIST
36727: LIST
36728: LIST
36729: LIST
36730: LIST
36731: LIST
36732: LIST
36733: PUSH
36734: LD_INT 1
36736: PPUSH
36737: LD_INT 15
36739: PPUSH
36740: CALL_OW 12
36744: ARRAY
36745: ST_TO_ADDR
// if ValidHex ( x , y ) then
36746: LD_VAR 0 3
36750: PPUSH
36751: LD_VAR 0 4
36755: PPUSH
36756: CALL_OW 488
36760: IFFALSE 36783
// begin result := [ x , y ] ;
36762: LD_ADDR_VAR 0 1
36766: PUSH
36767: LD_VAR 0 3
36771: PUSH
36772: LD_VAR 0 4
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: ST_TO_ADDR
// break ;
36781: GO 36785
// end ; end ;
36783: GO 36585
36785: POP
36786: POP
// if result then
36787: LD_VAR 0 1
36791: IFFALSE 36851
// begin ToLua ( playSibBomb() ) ;
36793: LD_STRING playSibBomb()
36795: PPUSH
36796: CALL_OW 559
// wait ( 0 0$14 ) ;
36800: LD_INT 490
36802: PPUSH
36803: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
36807: LD_VAR 0 1
36811: PUSH
36812: LD_INT 1
36814: ARRAY
36815: PPUSH
36816: LD_VAR 0 1
36820: PUSH
36821: LD_INT 2
36823: ARRAY
36824: PPUSH
36825: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
36829: LD_VAR 0 1
36833: PUSH
36834: LD_INT 1
36836: ARRAY
36837: PPUSH
36838: LD_VAR 0 1
36842: PUSH
36843: LD_INT 2
36845: ARRAY
36846: PPUSH
36847: CALL_OW 429
// end ; end ;
36851: LD_VAR 0 1
36855: RET
// every 0 0$1 trigger StreamModeActive and sReset do
36856: LD_EXP 85
36860: PUSH
36861: LD_EXP 107
36865: AND
36866: IFFALSE 36878
36868: GO 36870
36870: DISABLE
// YouLost (  ) ;
36871: LD_STRING 
36873: PPUSH
36874: CALL_OW 104
36878: END
// every 0 0$1 trigger StreamModeActive and sFog do
36879: LD_EXP 85
36883: PUSH
36884: LD_EXP 106
36888: AND
36889: IFFALSE 36903
36891: GO 36893
36893: DISABLE
// FogOff ( your_side ) ;
36894: LD_OWVAR 2
36898: PPUSH
36899: CALL_OW 344
36903: END
// every 0 0$1 trigger StreamModeActive and sSun do
36904: LD_EXP 85
36908: PUSH
36909: LD_EXP 108
36913: AND
36914: IFFALSE 36942
36916: GO 36918
36918: DISABLE
// begin solar_recharge_percent := 0 ;
36919: LD_ADDR_OWVAR 79
36923: PUSH
36924: LD_INT 0
36926: ST_TO_ADDR
// wait ( 5 5$00 ) ;
36927: LD_INT 10500
36929: PPUSH
36930: CALL_OW 67
// solar_recharge_percent := 100 ;
36934: LD_ADDR_OWVAR 79
36938: PUSH
36939: LD_INT 100
36941: ST_TO_ADDR
// end ;
36942: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
36943: LD_EXP 85
36947: PUSH
36948: LD_EXP 109
36952: AND
36953: IFFALSE 37192
36955: GO 36957
36957: DISABLE
36958: LD_INT 0
36960: PPUSH
36961: PPUSH
36962: PPUSH
// begin tmp := [ ] ;
36963: LD_ADDR_VAR 0 3
36967: PUSH
36968: EMPTY
36969: ST_TO_ADDR
// for i := 1 to 6 do
36970: LD_ADDR_VAR 0 1
36974: PUSH
36975: DOUBLE
36976: LD_INT 1
36978: DEC
36979: ST_TO_ADDR
36980: LD_INT 6
36982: PUSH
36983: FOR_TO
36984: IFFALSE 37089
// begin uc_nation := nation_nature ;
36986: LD_ADDR_OWVAR 21
36990: PUSH
36991: LD_INT 0
36993: ST_TO_ADDR
// uc_side := 0 ;
36994: LD_ADDR_OWVAR 20
36998: PUSH
36999: LD_INT 0
37001: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37002: LD_ADDR_OWVAR 29
37006: PUSH
37007: LD_INT 12
37009: PUSH
37010: LD_INT 12
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: ST_TO_ADDR
// hc_agressivity := 20 ;
37017: LD_ADDR_OWVAR 35
37021: PUSH
37022: LD_INT 20
37024: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
37025: LD_ADDR_OWVAR 28
37029: PUSH
37030: LD_INT 17
37032: ST_TO_ADDR
// hc_gallery :=  ;
37033: LD_ADDR_OWVAR 33
37037: PUSH
37038: LD_STRING 
37040: ST_TO_ADDR
// hc_name :=  ;
37041: LD_ADDR_OWVAR 26
37045: PUSH
37046: LD_STRING 
37048: ST_TO_ADDR
// un := CreateHuman ;
37049: LD_ADDR_VAR 0 2
37053: PUSH
37054: CALL_OW 44
37058: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
37059: LD_VAR 0 2
37063: PPUSH
37064: LD_INT 1
37066: PPUSH
37067: CALL_OW 51
// tmp := tmp ^ un ;
37071: LD_ADDR_VAR 0 3
37075: PUSH
37076: LD_VAR 0 3
37080: PUSH
37081: LD_VAR 0 2
37085: ADD
37086: ST_TO_ADDR
// end ;
37087: GO 36983
37089: POP
37090: POP
// repeat wait ( 0 0$1 ) ;
37091: LD_INT 35
37093: PPUSH
37094: CALL_OW 67
// for un in tmp do
37098: LD_ADDR_VAR 0 2
37102: PUSH
37103: LD_VAR 0 3
37107: PUSH
37108: FOR_IN
37109: IFFALSE 37183
// begin if IsDead ( un ) then
37111: LD_VAR 0 2
37115: PPUSH
37116: CALL_OW 301
37120: IFFALSE 37140
// begin tmp := tmp diff un ;
37122: LD_ADDR_VAR 0 3
37126: PUSH
37127: LD_VAR 0 3
37131: PUSH
37132: LD_VAR 0 2
37136: DIFF
37137: ST_TO_ADDR
// continue ;
37138: GO 37108
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
37140: LD_VAR 0 2
37144: PPUSH
37145: LD_INT 3
37147: PUSH
37148: LD_INT 22
37150: PUSH
37151: LD_INT 0
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PPUSH
37162: CALL_OW 69
37166: PPUSH
37167: LD_VAR 0 2
37171: PPUSH
37172: CALL_OW 74
37176: PPUSH
37177: CALL_OW 115
// end ;
37181: GO 37108
37183: POP
37184: POP
// until not tmp ;
37185: LD_VAR 0 3
37189: NOT
37190: IFFALSE 37091
// end ;
37192: PPOPN 3
37194: END
// every 0 0$1 trigger StreamModeActive and sTroll do
37195: LD_EXP 85
37199: PUSH
37200: LD_EXP 110
37204: AND
37205: IFFALSE 37259
37207: GO 37209
37209: DISABLE
// begin ToLua ( displayTroll(); ) ;
37210: LD_STRING displayTroll();
37212: PPUSH
37213: CALL_OW 559
// wait ( 3 3$00 ) ;
37217: LD_INT 6300
37219: PPUSH
37220: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37224: LD_STRING hideTroll();
37226: PPUSH
37227: CALL_OW 559
// wait ( 1 1$00 ) ;
37231: LD_INT 2100
37233: PPUSH
37234: CALL_OW 67
// ToLua ( displayTroll(); ) ;
37238: LD_STRING displayTroll();
37240: PPUSH
37241: CALL_OW 559
// wait ( 1 1$00 ) ;
37245: LD_INT 2100
37247: PPUSH
37248: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37252: LD_STRING hideTroll();
37254: PPUSH
37255: CALL_OW 559
// end ;
37259: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
37260: LD_EXP 85
37264: PUSH
37265: LD_EXP 111
37269: AND
37270: IFFALSE 37333
37272: GO 37274
37274: DISABLE
37275: LD_INT 0
37277: PPUSH
// begin p := 0 ;
37278: LD_ADDR_VAR 0 1
37282: PUSH
37283: LD_INT 0
37285: ST_TO_ADDR
// repeat game_speed := 1 ;
37286: LD_ADDR_OWVAR 65
37290: PUSH
37291: LD_INT 1
37293: ST_TO_ADDR
// wait ( 0 0$1 ) ;
37294: LD_INT 35
37296: PPUSH
37297: CALL_OW 67
// p := p + 1 ;
37301: LD_ADDR_VAR 0 1
37305: PUSH
37306: LD_VAR 0 1
37310: PUSH
37311: LD_INT 1
37313: PLUS
37314: ST_TO_ADDR
// until p >= 60 ;
37315: LD_VAR 0 1
37319: PUSH
37320: LD_INT 60
37322: GREATEREQUAL
37323: IFFALSE 37286
// game_speed := 4 ;
37325: LD_ADDR_OWVAR 65
37329: PUSH
37330: LD_INT 4
37332: ST_TO_ADDR
// end ;
37333: PPOPN 1
37335: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
37336: LD_EXP 85
37340: PUSH
37341: LD_EXP 112
37345: AND
37346: IFFALSE 37492
37348: GO 37350
37350: DISABLE
37351: LD_INT 0
37353: PPUSH
37354: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37355: LD_ADDR_VAR 0 1
37359: PUSH
37360: LD_INT 22
37362: PUSH
37363: LD_OWVAR 2
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 2
37374: PUSH
37375: LD_INT 30
37377: PUSH
37378: LD_INT 0
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 30
37387: PUSH
37388: LD_INT 1
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: LIST
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PPUSH
37404: CALL_OW 69
37408: ST_TO_ADDR
// if not depot then
37409: LD_VAR 0 1
37413: NOT
37414: IFFALSE 37418
// exit ;
37416: GO 37492
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
37418: LD_ADDR_VAR 0 2
37422: PUSH
37423: LD_VAR 0 1
37427: PUSH
37428: LD_INT 1
37430: PPUSH
37431: LD_VAR 0 1
37435: PPUSH
37436: CALL_OW 12
37440: ARRAY
37441: PPUSH
37442: CALL_OW 274
37446: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
37447: LD_VAR 0 2
37451: PPUSH
37452: LD_INT 1
37454: PPUSH
37455: LD_INT 0
37457: PPUSH
37458: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
37462: LD_VAR 0 2
37466: PPUSH
37467: LD_INT 2
37469: PPUSH
37470: LD_INT 0
37472: PPUSH
37473: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
37477: LD_VAR 0 2
37481: PPUSH
37482: LD_INT 3
37484: PPUSH
37485: LD_INT 0
37487: PPUSH
37488: CALL_OW 277
// end ;
37492: PPOPN 2
37494: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
37495: LD_EXP 85
37499: PUSH
37500: LD_EXP 113
37504: AND
37505: IFFALSE 37602
37507: GO 37509
37509: DISABLE
37510: LD_INT 0
37512: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37513: LD_ADDR_VAR 0 1
37517: PUSH
37518: LD_INT 22
37520: PUSH
37521: LD_OWVAR 2
37525: PUSH
37526: EMPTY
37527: LIST
37528: LIST
37529: PUSH
37530: LD_INT 21
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: EMPTY
37537: LIST
37538: LIST
37539: PUSH
37540: LD_INT 3
37542: PUSH
37543: LD_INT 23
37545: PUSH
37546: LD_INT 0
37548: PUSH
37549: EMPTY
37550: LIST
37551: LIST
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: LIST
37561: PPUSH
37562: CALL_OW 69
37566: ST_TO_ADDR
// if not tmp then
37567: LD_VAR 0 1
37571: NOT
37572: IFFALSE 37576
// exit ;
37574: GO 37602
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
37576: LD_VAR 0 1
37580: PUSH
37581: LD_INT 1
37583: PPUSH
37584: LD_VAR 0 1
37588: PPUSH
37589: CALL_OW 12
37593: ARRAY
37594: PPUSH
37595: LD_INT 200
37597: PPUSH
37598: CALL_OW 234
// end ;
37602: PPOPN 1
37604: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
37605: LD_EXP 85
37609: PUSH
37610: LD_EXP 114
37614: AND
37615: IFFALSE 37694
37617: GO 37619
37619: DISABLE
37620: LD_INT 0
37622: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
37623: LD_ADDR_VAR 0 1
37627: PUSH
37628: LD_INT 22
37630: PUSH
37631: LD_OWVAR 2
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 21
37642: PUSH
37643: LD_INT 2
37645: PUSH
37646: EMPTY
37647: LIST
37648: LIST
37649: PUSH
37650: EMPTY
37651: LIST
37652: LIST
37653: PPUSH
37654: CALL_OW 69
37658: ST_TO_ADDR
// if not tmp then
37659: LD_VAR 0 1
37663: NOT
37664: IFFALSE 37668
// exit ;
37666: GO 37694
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
37668: LD_VAR 0 1
37672: PUSH
37673: LD_INT 1
37675: PPUSH
37676: LD_VAR 0 1
37680: PPUSH
37681: CALL_OW 12
37685: ARRAY
37686: PPUSH
37687: LD_INT 60
37689: PPUSH
37690: CALL_OW 234
// end ;
37694: PPOPN 1
37696: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
37697: LD_EXP 85
37701: PUSH
37702: LD_EXP 115
37706: AND
37707: IFFALSE 37806
37709: GO 37711
37711: DISABLE
37712: LD_INT 0
37714: PPUSH
37715: PPUSH
// begin enable ;
37716: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
37717: LD_ADDR_VAR 0 1
37721: PUSH
37722: LD_INT 22
37724: PUSH
37725: LD_OWVAR 2
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 61
37736: PUSH
37737: EMPTY
37738: LIST
37739: PUSH
37740: LD_INT 33
37742: PUSH
37743: LD_INT 2
37745: PUSH
37746: EMPTY
37747: LIST
37748: LIST
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: LIST
37754: PPUSH
37755: CALL_OW 69
37759: ST_TO_ADDR
// if not tmp then
37760: LD_VAR 0 1
37764: NOT
37765: IFFALSE 37769
// exit ;
37767: GO 37806
// for i in tmp do
37769: LD_ADDR_VAR 0 2
37773: PUSH
37774: LD_VAR 0 1
37778: PUSH
37779: FOR_IN
37780: IFFALSE 37804
// if IsControledBy ( i ) then
37782: LD_VAR 0 2
37786: PPUSH
37787: CALL_OW 312
37791: IFFALSE 37802
// ComUnlink ( i ) ;
37793: LD_VAR 0 2
37797: PPUSH
37798: CALL_OW 136
37802: GO 37779
37804: POP
37805: POP
// end ;
37806: PPOPN 2
37808: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
37809: LD_EXP 85
37813: PUSH
37814: LD_EXP 116
37818: AND
37819: IFFALSE 37959
37821: GO 37823
37823: DISABLE
37824: LD_INT 0
37826: PPUSH
37827: PPUSH
// begin ToLua ( displayPowell(); ) ;
37828: LD_STRING displayPowell();
37830: PPUSH
37831: CALL_OW 559
// uc_side := 0 ;
37835: LD_ADDR_OWVAR 20
37839: PUSH
37840: LD_INT 0
37842: ST_TO_ADDR
// uc_nation := 2 ;
37843: LD_ADDR_OWVAR 21
37847: PUSH
37848: LD_INT 2
37850: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
37851: LD_ADDR_OWVAR 37
37855: PUSH
37856: LD_INT 14
37858: ST_TO_ADDR
// vc_engine := engine_siberite ;
37859: LD_ADDR_OWVAR 39
37863: PUSH
37864: LD_INT 3
37866: ST_TO_ADDR
// vc_control := control_apeman ;
37867: LD_ADDR_OWVAR 38
37871: PUSH
37872: LD_INT 5
37874: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
37875: LD_ADDR_OWVAR 40
37879: PUSH
37880: LD_INT 29
37882: ST_TO_ADDR
// un := CreateVehicle ;
37883: LD_ADDR_VAR 0 2
37887: PUSH
37888: CALL_OW 45
37892: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37893: LD_VAR 0 2
37897: PPUSH
37898: LD_INT 1
37900: PPUSH
37901: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37905: LD_INT 35
37907: PPUSH
37908: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37912: LD_VAR 0 2
37916: PPUSH
37917: LD_INT 22
37919: PUSH
37920: LD_OWVAR 2
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PPUSH
37929: CALL_OW 69
37933: PPUSH
37934: LD_VAR 0 2
37938: PPUSH
37939: CALL_OW 74
37943: PPUSH
37944: CALL_OW 115
// until IsDead ( un ) ;
37948: LD_VAR 0 2
37952: PPUSH
37953: CALL_OW 301
37957: IFFALSE 37905
// end ;
37959: PPOPN 2
37961: END
// every 0 0$1 trigger StreamModeActive and sStu do
37962: LD_EXP 85
37966: PUSH
37967: LD_EXP 124
37971: AND
37972: IFFALSE 37988
37974: GO 37976
37976: DISABLE
// begin ToLua ( displayStucuk(); ) ;
37977: LD_STRING displayStucuk();
37979: PPUSH
37980: CALL_OW 559
// ResetFog ;
37984: CALL_OW 335
// end ;
37988: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
37989: LD_EXP 85
37993: PUSH
37994: LD_EXP 117
37998: AND
37999: IFFALSE 38140
38001: GO 38003
38003: DISABLE
38004: LD_INT 0
38006: PPUSH
38007: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38008: LD_ADDR_VAR 0 2
38012: PUSH
38013: LD_INT 22
38015: PUSH
38016: LD_OWVAR 2
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 21
38027: PUSH
38028: LD_INT 1
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PPUSH
38039: CALL_OW 69
38043: ST_TO_ADDR
// if not tmp then
38044: LD_VAR 0 2
38048: NOT
38049: IFFALSE 38053
// exit ;
38051: GO 38140
// un := tmp [ rand ( 1 , tmp ) ] ;
38053: LD_ADDR_VAR 0 1
38057: PUSH
38058: LD_VAR 0 2
38062: PUSH
38063: LD_INT 1
38065: PPUSH
38066: LD_VAR 0 2
38070: PPUSH
38071: CALL_OW 12
38075: ARRAY
38076: ST_TO_ADDR
// SetSide ( un , 0 ) ;
38077: LD_VAR 0 1
38081: PPUSH
38082: LD_INT 0
38084: PPUSH
38085: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
38089: LD_VAR 0 1
38093: PPUSH
38094: LD_OWVAR 3
38098: PUSH
38099: LD_VAR 0 1
38103: DIFF
38104: PPUSH
38105: LD_VAR 0 1
38109: PPUSH
38110: CALL_OW 74
38114: PPUSH
38115: CALL_OW 115
// wait ( 0 0$20 ) ;
38119: LD_INT 700
38121: PPUSH
38122: CALL_OW 67
// SetSide ( un , your_side ) ;
38126: LD_VAR 0 1
38130: PPUSH
38131: LD_OWVAR 2
38135: PPUSH
38136: CALL_OW 235
// end ;
38140: PPOPN 2
38142: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
38143: LD_EXP 85
38147: PUSH
38148: LD_EXP 118
38152: AND
38153: IFFALSE 38259
38155: GO 38157
38157: DISABLE
38158: LD_INT 0
38160: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38161: LD_ADDR_VAR 0 1
38165: PUSH
38166: LD_INT 22
38168: PUSH
38169: LD_OWVAR 2
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 2
38180: PUSH
38181: LD_INT 30
38183: PUSH
38184: LD_INT 0
38186: PUSH
38187: EMPTY
38188: LIST
38189: LIST
38190: PUSH
38191: LD_INT 30
38193: PUSH
38194: LD_INT 1
38196: PUSH
38197: EMPTY
38198: LIST
38199: LIST
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: LIST
38205: PUSH
38206: EMPTY
38207: LIST
38208: LIST
38209: PPUSH
38210: CALL_OW 69
38214: ST_TO_ADDR
// if not depot then
38215: LD_VAR 0 1
38219: NOT
38220: IFFALSE 38224
// exit ;
38222: GO 38259
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
38224: LD_VAR 0 1
38228: PUSH
38229: LD_INT 1
38231: ARRAY
38232: PPUSH
38233: CALL_OW 250
38237: PPUSH
38238: LD_VAR 0 1
38242: PUSH
38243: LD_INT 1
38245: ARRAY
38246: PPUSH
38247: CALL_OW 251
38251: PPUSH
38252: LD_INT 70
38254: PPUSH
38255: CALL_OW 495
// end ;
38259: PPOPN 1
38261: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
38262: LD_EXP 85
38266: PUSH
38267: LD_EXP 119
38271: AND
38272: IFFALSE 38483
38274: GO 38276
38276: DISABLE
38277: LD_INT 0
38279: PPUSH
38280: PPUSH
38281: PPUSH
38282: PPUSH
38283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38284: LD_ADDR_VAR 0 5
38288: PUSH
38289: LD_INT 22
38291: PUSH
38292: LD_OWVAR 2
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 21
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: EMPTY
38312: LIST
38313: LIST
38314: PPUSH
38315: CALL_OW 69
38319: ST_TO_ADDR
// if not tmp then
38320: LD_VAR 0 5
38324: NOT
38325: IFFALSE 38329
// exit ;
38327: GO 38483
// for i in tmp do
38329: LD_ADDR_VAR 0 1
38333: PUSH
38334: LD_VAR 0 5
38338: PUSH
38339: FOR_IN
38340: IFFALSE 38481
// begin d := rand ( 0 , 5 ) ;
38342: LD_ADDR_VAR 0 4
38346: PUSH
38347: LD_INT 0
38349: PPUSH
38350: LD_INT 5
38352: PPUSH
38353: CALL_OW 12
38357: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
38358: LD_ADDR_VAR 0 2
38362: PUSH
38363: LD_VAR 0 1
38367: PPUSH
38368: CALL_OW 250
38372: PPUSH
38373: LD_VAR 0 4
38377: PPUSH
38378: LD_INT 3
38380: PPUSH
38381: LD_INT 12
38383: PPUSH
38384: CALL_OW 12
38388: PPUSH
38389: CALL_OW 272
38393: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
38394: LD_ADDR_VAR 0 3
38398: PUSH
38399: LD_VAR 0 1
38403: PPUSH
38404: CALL_OW 251
38408: PPUSH
38409: LD_VAR 0 4
38413: PPUSH
38414: LD_INT 3
38416: PPUSH
38417: LD_INT 12
38419: PPUSH
38420: CALL_OW 12
38424: PPUSH
38425: CALL_OW 273
38429: ST_TO_ADDR
// if ValidHex ( x , y ) then
38430: LD_VAR 0 2
38434: PPUSH
38435: LD_VAR 0 3
38439: PPUSH
38440: CALL_OW 488
38444: IFFALSE 38479
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
38446: LD_VAR 0 1
38450: PPUSH
38451: LD_VAR 0 2
38455: PPUSH
38456: LD_VAR 0 3
38460: PPUSH
38461: LD_INT 3
38463: PPUSH
38464: LD_INT 6
38466: PPUSH
38467: CALL_OW 12
38471: PPUSH
38472: LD_INT 1
38474: PPUSH
38475: CALL_OW 483
// end ;
38479: GO 38339
38481: POP
38482: POP
// end ;
38483: PPOPN 5
38485: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
38486: LD_EXP 85
38490: PUSH
38491: LD_EXP 120
38495: AND
38496: IFFALSE 38590
38498: GO 38500
38500: DISABLE
38501: LD_INT 0
38503: PPUSH
38504: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
38505: LD_ADDR_VAR 0 2
38509: PUSH
38510: LD_INT 22
38512: PUSH
38513: LD_OWVAR 2
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 32
38524: PUSH
38525: LD_INT 1
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 21
38534: PUSH
38535: LD_INT 2
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: LIST
38546: PPUSH
38547: CALL_OW 69
38551: ST_TO_ADDR
// if not tmp then
38552: LD_VAR 0 2
38556: NOT
38557: IFFALSE 38561
// exit ;
38559: GO 38590
// for i in tmp do
38561: LD_ADDR_VAR 0 1
38565: PUSH
38566: LD_VAR 0 2
38570: PUSH
38571: FOR_IN
38572: IFFALSE 38588
// SetFuel ( i , 0 ) ;
38574: LD_VAR 0 1
38578: PPUSH
38579: LD_INT 0
38581: PPUSH
38582: CALL_OW 240
38586: GO 38571
38588: POP
38589: POP
// end ;
38590: PPOPN 2
38592: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
38593: LD_EXP 85
38597: PUSH
38598: LD_EXP 121
38602: AND
38603: IFFALSE 38669
38605: GO 38607
38607: DISABLE
38608: LD_INT 0
38610: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38611: LD_ADDR_VAR 0 1
38615: PUSH
38616: LD_INT 22
38618: PUSH
38619: LD_OWVAR 2
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 30
38630: PUSH
38631: LD_INT 29
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: EMPTY
38639: LIST
38640: LIST
38641: PPUSH
38642: CALL_OW 69
38646: ST_TO_ADDR
// if not tmp then
38647: LD_VAR 0 1
38651: NOT
38652: IFFALSE 38656
// exit ;
38654: GO 38669
// DestroyUnit ( tmp [ 1 ] ) ;
38656: LD_VAR 0 1
38660: PUSH
38661: LD_INT 1
38663: ARRAY
38664: PPUSH
38665: CALL_OW 65
// end ;
38669: PPOPN 1
38671: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
38672: LD_EXP 85
38676: PUSH
38677: LD_EXP 123
38681: AND
38682: IFFALSE 38811
38684: GO 38686
38686: DISABLE
38687: LD_INT 0
38689: PPUSH
// begin uc_side := 0 ;
38690: LD_ADDR_OWVAR 20
38694: PUSH
38695: LD_INT 0
38697: ST_TO_ADDR
// uc_nation := nation_arabian ;
38698: LD_ADDR_OWVAR 21
38702: PUSH
38703: LD_INT 2
38705: ST_TO_ADDR
// hc_gallery :=  ;
38706: LD_ADDR_OWVAR 33
38710: PUSH
38711: LD_STRING 
38713: ST_TO_ADDR
// hc_name :=  ;
38714: LD_ADDR_OWVAR 26
38718: PUSH
38719: LD_STRING 
38721: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
38722: LD_INT 1
38724: PPUSH
38725: LD_INT 11
38727: PPUSH
38728: LD_INT 10
38730: PPUSH
38731: CALL_OW 380
// un := CreateHuman ;
38735: LD_ADDR_VAR 0 1
38739: PUSH
38740: CALL_OW 44
38744: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38745: LD_VAR 0 1
38749: PPUSH
38750: LD_INT 1
38752: PPUSH
38753: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
38757: LD_INT 35
38759: PPUSH
38760: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
38764: LD_VAR 0 1
38768: PPUSH
38769: LD_INT 22
38771: PUSH
38772: LD_OWVAR 2
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PPUSH
38781: CALL_OW 69
38785: PPUSH
38786: LD_VAR 0 1
38790: PPUSH
38791: CALL_OW 74
38795: PPUSH
38796: CALL_OW 115
// until IsDead ( un ) ;
38800: LD_VAR 0 1
38804: PPUSH
38805: CALL_OW 301
38809: IFFALSE 38757
// end ;
38811: PPOPN 1
38813: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
38814: LD_EXP 85
38818: PUSH
38819: LD_EXP 125
38823: AND
38824: IFFALSE 38836
38826: GO 38828
38828: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
38829: LD_STRING earthquake(getX(game), 0, 32)
38831: PPUSH
38832: CALL_OW 559
38836: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
38837: LD_EXP 85
38841: PUSH
38842: LD_EXP 126
38846: AND
38847: IFFALSE 38938
38849: GO 38851
38851: DISABLE
38852: LD_INT 0
38854: PPUSH
// begin enable ;
38855: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
38856: LD_ADDR_VAR 0 1
38860: PUSH
38861: LD_INT 22
38863: PUSH
38864: LD_OWVAR 2
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 21
38875: PUSH
38876: LD_INT 2
38878: PUSH
38879: EMPTY
38880: LIST
38881: LIST
38882: PUSH
38883: LD_INT 33
38885: PUSH
38886: LD_INT 3
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: LIST
38897: PPUSH
38898: CALL_OW 69
38902: ST_TO_ADDR
// if not tmp then
38903: LD_VAR 0 1
38907: NOT
38908: IFFALSE 38912
// exit ;
38910: GO 38938
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38912: LD_VAR 0 1
38916: PUSH
38917: LD_INT 1
38919: PPUSH
38920: LD_VAR 0 1
38924: PPUSH
38925: CALL_OW 12
38929: ARRAY
38930: PPUSH
38931: LD_INT 1
38933: PPUSH
38934: CALL_OW 234
// end ;
38938: PPOPN 1
38940: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
38941: LD_EXP 85
38945: PUSH
38946: LD_EXP 127
38950: AND
38951: IFFALSE 39092
38953: GO 38955
38955: DISABLE
38956: LD_INT 0
38958: PPUSH
38959: PPUSH
38960: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38961: LD_ADDR_VAR 0 3
38965: PUSH
38966: LD_INT 22
38968: PUSH
38969: LD_OWVAR 2
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 25
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PPUSH
38992: CALL_OW 69
38996: ST_TO_ADDR
// if not tmp then
38997: LD_VAR 0 3
39001: NOT
39002: IFFALSE 39006
// exit ;
39004: GO 39092
// un := tmp [ rand ( 1 , tmp ) ] ;
39006: LD_ADDR_VAR 0 2
39010: PUSH
39011: LD_VAR 0 3
39015: PUSH
39016: LD_INT 1
39018: PPUSH
39019: LD_VAR 0 3
39023: PPUSH
39024: CALL_OW 12
39028: ARRAY
39029: ST_TO_ADDR
// if Crawls ( un ) then
39030: LD_VAR 0 2
39034: PPUSH
39035: CALL_OW 318
39039: IFFALSE 39050
// ComWalk ( un ) ;
39041: LD_VAR 0 2
39045: PPUSH
39046: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
39050: LD_VAR 0 2
39054: PPUSH
39055: LD_INT 9
39057: PPUSH
39058: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
39062: LD_INT 28
39064: PPUSH
39065: LD_OWVAR 2
39069: PPUSH
39070: LD_INT 2
39072: PPUSH
39073: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
39077: LD_INT 29
39079: PPUSH
39080: LD_OWVAR 2
39084: PPUSH
39085: LD_INT 2
39087: PPUSH
39088: CALL_OW 322
// end ;
39092: PPOPN 3
39094: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
39095: LD_EXP 85
39099: PUSH
39100: LD_EXP 128
39104: AND
39105: IFFALSE 39216
39107: GO 39109
39109: DISABLE
39110: LD_INT 0
39112: PPUSH
39113: PPUSH
39114: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39115: LD_ADDR_VAR 0 3
39119: PUSH
39120: LD_INT 22
39122: PUSH
39123: LD_OWVAR 2
39127: PUSH
39128: EMPTY
39129: LIST
39130: LIST
39131: PUSH
39132: LD_INT 25
39134: PUSH
39135: LD_INT 1
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PPUSH
39146: CALL_OW 69
39150: ST_TO_ADDR
// if not tmp then
39151: LD_VAR 0 3
39155: NOT
39156: IFFALSE 39160
// exit ;
39158: GO 39216
// un := tmp [ rand ( 1 , tmp ) ] ;
39160: LD_ADDR_VAR 0 2
39164: PUSH
39165: LD_VAR 0 3
39169: PUSH
39170: LD_INT 1
39172: PPUSH
39173: LD_VAR 0 3
39177: PPUSH
39178: CALL_OW 12
39182: ARRAY
39183: ST_TO_ADDR
// if Crawls ( un ) then
39184: LD_VAR 0 2
39188: PPUSH
39189: CALL_OW 318
39193: IFFALSE 39204
// ComWalk ( un ) ;
39195: LD_VAR 0 2
39199: PPUSH
39200: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39204: LD_VAR 0 2
39208: PPUSH
39209: LD_INT 8
39211: PPUSH
39212: CALL_OW 336
// end ;
39216: PPOPN 3
39218: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
39219: LD_EXP 85
39223: PUSH
39224: LD_EXP 129
39228: AND
39229: IFFALSE 39373
39231: GO 39233
39233: DISABLE
39234: LD_INT 0
39236: PPUSH
39237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
39238: LD_ADDR_VAR 0 2
39242: PUSH
39243: LD_INT 22
39245: PUSH
39246: LD_OWVAR 2
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 21
39257: PUSH
39258: LD_INT 2
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: LD_INT 2
39267: PUSH
39268: LD_INT 34
39270: PUSH
39271: LD_INT 12
39273: PUSH
39274: EMPTY
39275: LIST
39276: LIST
39277: PUSH
39278: LD_INT 34
39280: PUSH
39281: LD_INT 51
39283: PUSH
39284: EMPTY
39285: LIST
39286: LIST
39287: PUSH
39288: LD_INT 34
39290: PUSH
39291: LD_INT 32
39293: PUSH
39294: EMPTY
39295: LIST
39296: LIST
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: LIST
39302: LIST
39303: PUSH
39304: EMPTY
39305: LIST
39306: LIST
39307: LIST
39308: PPUSH
39309: CALL_OW 69
39313: ST_TO_ADDR
// if not tmp then
39314: LD_VAR 0 2
39318: NOT
39319: IFFALSE 39323
// exit ;
39321: GO 39373
// for i in tmp do
39323: LD_ADDR_VAR 0 1
39327: PUSH
39328: LD_VAR 0 2
39332: PUSH
39333: FOR_IN
39334: IFFALSE 39371
// if GetCargo ( i , mat_artifact ) = 0 then
39336: LD_VAR 0 1
39340: PPUSH
39341: LD_INT 4
39343: PPUSH
39344: CALL_OW 289
39348: PUSH
39349: LD_INT 0
39351: EQUAL
39352: IFFALSE 39369
// SetCargo ( i , mat_siberit , 100 ) ;
39354: LD_VAR 0 1
39358: PPUSH
39359: LD_INT 3
39361: PPUSH
39362: LD_INT 100
39364: PPUSH
39365: CALL_OW 290
39369: GO 39333
39371: POP
39372: POP
// end ;
39373: PPOPN 2
39375: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
39376: LD_EXP 85
39380: PUSH
39381: LD_EXP 130
39385: AND
39386: IFFALSE 39569
39388: GO 39390
39390: DISABLE
39391: LD_INT 0
39393: PPUSH
39394: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39395: LD_ADDR_VAR 0 2
39399: PUSH
39400: LD_INT 22
39402: PUSH
39403: LD_OWVAR 2
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PPUSH
39412: CALL_OW 69
39416: ST_TO_ADDR
// if not tmp then
39417: LD_VAR 0 2
39421: NOT
39422: IFFALSE 39426
// exit ;
39424: GO 39569
// for i := 1 to 2 do
39426: LD_ADDR_VAR 0 1
39430: PUSH
39431: DOUBLE
39432: LD_INT 1
39434: DEC
39435: ST_TO_ADDR
39436: LD_INT 2
39438: PUSH
39439: FOR_TO
39440: IFFALSE 39567
// begin uc_side := your_side ;
39442: LD_ADDR_OWVAR 20
39446: PUSH
39447: LD_OWVAR 2
39451: ST_TO_ADDR
// uc_nation := nation_american ;
39452: LD_ADDR_OWVAR 21
39456: PUSH
39457: LD_INT 1
39459: ST_TO_ADDR
// vc_chassis := us_morphling ;
39460: LD_ADDR_OWVAR 37
39464: PUSH
39465: LD_INT 5
39467: ST_TO_ADDR
// vc_engine := engine_siberite ;
39468: LD_ADDR_OWVAR 39
39472: PUSH
39473: LD_INT 3
39475: ST_TO_ADDR
// vc_control := control_computer ;
39476: LD_ADDR_OWVAR 38
39480: PUSH
39481: LD_INT 3
39483: ST_TO_ADDR
// vc_weapon := us_double_laser ;
39484: LD_ADDR_OWVAR 40
39488: PUSH
39489: LD_INT 10
39491: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
39492: LD_VAR 0 2
39496: PUSH
39497: LD_INT 1
39499: ARRAY
39500: PPUSH
39501: CALL_OW 310
39505: NOT
39506: IFFALSE 39553
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
39508: CALL_OW 45
39512: PPUSH
39513: LD_VAR 0 2
39517: PUSH
39518: LD_INT 1
39520: ARRAY
39521: PPUSH
39522: CALL_OW 250
39526: PPUSH
39527: LD_VAR 0 2
39531: PUSH
39532: LD_INT 1
39534: ARRAY
39535: PPUSH
39536: CALL_OW 251
39540: PPUSH
39541: LD_INT 12
39543: PPUSH
39544: LD_INT 1
39546: PPUSH
39547: CALL_OW 50
39551: GO 39565
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
39553: CALL_OW 45
39557: PPUSH
39558: LD_INT 1
39560: PPUSH
39561: CALL_OW 51
// end ;
39565: GO 39439
39567: POP
39568: POP
// end ;
39569: PPOPN 2
39571: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
39572: LD_EXP 85
39576: PUSH
39577: LD_EXP 131
39581: AND
39582: IFFALSE 39804
39584: GO 39586
39586: DISABLE
39587: LD_INT 0
39589: PPUSH
39590: PPUSH
39591: PPUSH
39592: PPUSH
39593: PPUSH
39594: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39595: LD_ADDR_VAR 0 6
39599: PUSH
39600: LD_INT 22
39602: PUSH
39603: LD_OWVAR 2
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 21
39614: PUSH
39615: LD_INT 1
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 3
39624: PUSH
39625: LD_INT 23
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: LIST
39643: PPUSH
39644: CALL_OW 69
39648: ST_TO_ADDR
// if not tmp then
39649: LD_VAR 0 6
39653: NOT
39654: IFFALSE 39658
// exit ;
39656: GO 39804
// s1 := rand ( 1 , 4 ) ;
39658: LD_ADDR_VAR 0 2
39662: PUSH
39663: LD_INT 1
39665: PPUSH
39666: LD_INT 4
39668: PPUSH
39669: CALL_OW 12
39673: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
39674: LD_ADDR_VAR 0 4
39678: PUSH
39679: LD_VAR 0 6
39683: PUSH
39684: LD_INT 1
39686: ARRAY
39687: PPUSH
39688: LD_VAR 0 2
39692: PPUSH
39693: CALL_OW 259
39697: ST_TO_ADDR
// if s1 = 1 then
39698: LD_VAR 0 2
39702: PUSH
39703: LD_INT 1
39705: EQUAL
39706: IFFALSE 39726
// s2 := rand ( 2 , 4 ) else
39708: LD_ADDR_VAR 0 3
39712: PUSH
39713: LD_INT 2
39715: PPUSH
39716: LD_INT 4
39718: PPUSH
39719: CALL_OW 12
39723: ST_TO_ADDR
39724: GO 39734
// s2 := 1 ;
39726: LD_ADDR_VAR 0 3
39730: PUSH
39731: LD_INT 1
39733: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
39734: LD_ADDR_VAR 0 5
39738: PUSH
39739: LD_VAR 0 6
39743: PUSH
39744: LD_INT 1
39746: ARRAY
39747: PPUSH
39748: LD_VAR 0 3
39752: PPUSH
39753: CALL_OW 259
39757: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
39758: LD_VAR 0 6
39762: PUSH
39763: LD_INT 1
39765: ARRAY
39766: PPUSH
39767: LD_VAR 0 2
39771: PPUSH
39772: LD_VAR 0 5
39776: PPUSH
39777: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
39781: LD_VAR 0 6
39785: PUSH
39786: LD_INT 1
39788: ARRAY
39789: PPUSH
39790: LD_VAR 0 3
39794: PPUSH
39795: LD_VAR 0 4
39799: PPUSH
39800: CALL_OW 237
// end ;
39804: PPOPN 6
39806: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
39807: LD_EXP 85
39811: PUSH
39812: LD_EXP 132
39816: AND
39817: IFFALSE 39896
39819: GO 39821
39821: DISABLE
39822: LD_INT 0
39824: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
39825: LD_ADDR_VAR 0 1
39829: PUSH
39830: LD_INT 22
39832: PUSH
39833: LD_OWVAR 2
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 30
39844: PUSH
39845: LD_INT 3
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: EMPTY
39853: LIST
39854: LIST
39855: PPUSH
39856: CALL_OW 69
39860: ST_TO_ADDR
// if not tmp then
39861: LD_VAR 0 1
39865: NOT
39866: IFFALSE 39870
// exit ;
39868: GO 39896
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39870: LD_VAR 0 1
39874: PUSH
39875: LD_INT 1
39877: PPUSH
39878: LD_VAR 0 1
39882: PPUSH
39883: CALL_OW 12
39887: ARRAY
39888: PPUSH
39889: LD_INT 1
39891: PPUSH
39892: CALL_OW 234
// end ;
39896: PPOPN 1
39898: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
39899: LD_EXP 85
39903: PUSH
39904: LD_EXP 133
39908: AND
39909: IFFALSE 40021
39911: GO 39913
39913: DISABLE
39914: LD_INT 0
39916: PPUSH
39917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
39918: LD_ADDR_VAR 0 2
39922: PUSH
39923: LD_INT 22
39925: PUSH
39926: LD_OWVAR 2
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 2
39937: PUSH
39938: LD_INT 30
39940: PUSH
39941: LD_INT 27
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 30
39950: PUSH
39951: LD_INT 26
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 30
39960: PUSH
39961: LD_INT 28
39963: PUSH
39964: EMPTY
39965: LIST
39966: LIST
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: PUSH
39974: EMPTY
39975: LIST
39976: LIST
39977: PPUSH
39978: CALL_OW 69
39982: ST_TO_ADDR
// if not tmp then
39983: LD_VAR 0 2
39987: NOT
39988: IFFALSE 39992
// exit ;
39990: GO 40021
// for i in tmp do
39992: LD_ADDR_VAR 0 1
39996: PUSH
39997: LD_VAR 0 2
40001: PUSH
40002: FOR_IN
40003: IFFALSE 40019
// SetLives ( i , 1 ) ;
40005: LD_VAR 0 1
40009: PPUSH
40010: LD_INT 1
40012: PPUSH
40013: CALL_OW 234
40017: GO 40002
40019: POP
40020: POP
// end ;
40021: PPOPN 2
40023: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
40024: LD_EXP 85
40028: PUSH
40029: LD_EXP 134
40033: AND
40034: IFFALSE 40308
40036: GO 40038
40038: DISABLE
40039: LD_INT 0
40041: PPUSH
40042: PPUSH
40043: PPUSH
// begin i := rand ( 1 , 7 ) ;
40044: LD_ADDR_VAR 0 1
40048: PUSH
40049: LD_INT 1
40051: PPUSH
40052: LD_INT 7
40054: PPUSH
40055: CALL_OW 12
40059: ST_TO_ADDR
// case i of 1 :
40060: LD_VAR 0 1
40064: PUSH
40065: LD_INT 1
40067: DOUBLE
40068: EQUAL
40069: IFTRUE 40073
40071: GO 40083
40073: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
40074: LD_STRING earthquake(getX(game), 0, 32)
40076: PPUSH
40077: CALL_OW 559
40081: GO 40308
40083: LD_INT 2
40085: DOUBLE
40086: EQUAL
40087: IFTRUE 40091
40089: GO 40105
40091: POP
// begin ToLua ( displayStucuk(); ) ;
40092: LD_STRING displayStucuk();
40094: PPUSH
40095: CALL_OW 559
// ResetFog ;
40099: CALL_OW 335
// end ; 3 :
40103: GO 40308
40105: LD_INT 3
40107: DOUBLE
40108: EQUAL
40109: IFTRUE 40113
40111: GO 40217
40113: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40114: LD_ADDR_VAR 0 2
40118: PUSH
40119: LD_INT 22
40121: PUSH
40122: LD_OWVAR 2
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 25
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PPUSH
40145: CALL_OW 69
40149: ST_TO_ADDR
// if not tmp then
40150: LD_VAR 0 2
40154: NOT
40155: IFFALSE 40159
// exit ;
40157: GO 40308
// un := tmp [ rand ( 1 , tmp ) ] ;
40159: LD_ADDR_VAR 0 3
40163: PUSH
40164: LD_VAR 0 2
40168: PUSH
40169: LD_INT 1
40171: PPUSH
40172: LD_VAR 0 2
40176: PPUSH
40177: CALL_OW 12
40181: ARRAY
40182: ST_TO_ADDR
// if Crawls ( un ) then
40183: LD_VAR 0 3
40187: PPUSH
40188: CALL_OW 318
40192: IFFALSE 40203
// ComWalk ( un ) ;
40194: LD_VAR 0 3
40198: PPUSH
40199: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40203: LD_VAR 0 3
40207: PPUSH
40208: LD_INT 8
40210: PPUSH
40211: CALL_OW 336
// end ; 4 :
40215: GO 40308
40217: LD_INT 4
40219: DOUBLE
40220: EQUAL
40221: IFTRUE 40225
40223: GO 40286
40225: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
40226: LD_ADDR_VAR 0 2
40230: PUSH
40231: LD_INT 22
40233: PUSH
40234: LD_OWVAR 2
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 30
40245: PUSH
40246: LD_INT 29
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PPUSH
40257: CALL_OW 69
40261: ST_TO_ADDR
// if not tmp then
40262: LD_VAR 0 2
40266: NOT
40267: IFFALSE 40271
// exit ;
40269: GO 40308
// DestroyUnit ( tmp [ 1 ] ) ;
40271: LD_VAR 0 2
40275: PUSH
40276: LD_INT 1
40278: ARRAY
40279: PPUSH
40280: CALL_OW 65
// end ; 5 .. 7 :
40284: GO 40308
40286: LD_INT 5
40288: DOUBLE
40289: GREATEREQUAL
40290: IFFALSE 40298
40292: LD_INT 7
40294: DOUBLE
40295: LESSEQUAL
40296: IFTRUE 40300
40298: GO 40307
40300: POP
// StreamSibBomb ; end ;
40301: CALL 36558 0 0
40305: GO 40308
40307: POP
// end ;
40308: PPOPN 3
40310: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
40311: LD_EXP 85
40315: PUSH
40316: LD_EXP 135
40320: AND
40321: IFFALSE 40477
40323: GO 40325
40325: DISABLE
40326: LD_INT 0
40328: PPUSH
40329: PPUSH
40330: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
40331: LD_ADDR_VAR 0 2
40335: PUSH
40336: LD_INT 81
40338: PUSH
40339: LD_OWVAR 2
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 2
40350: PUSH
40351: LD_INT 21
40353: PUSH
40354: LD_INT 1
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: LD_INT 21
40363: PUSH
40364: LD_INT 2
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: LIST
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PPUSH
40380: CALL_OW 69
40384: ST_TO_ADDR
// if not tmp then
40385: LD_VAR 0 2
40389: NOT
40390: IFFALSE 40394
// exit ;
40392: GO 40477
// p := 0 ;
40394: LD_ADDR_VAR 0 3
40398: PUSH
40399: LD_INT 0
40401: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40402: LD_INT 35
40404: PPUSH
40405: CALL_OW 67
// p := p + 1 ;
40409: LD_ADDR_VAR 0 3
40413: PUSH
40414: LD_VAR 0 3
40418: PUSH
40419: LD_INT 1
40421: PLUS
40422: ST_TO_ADDR
// for i in tmp do
40423: LD_ADDR_VAR 0 1
40427: PUSH
40428: LD_VAR 0 2
40432: PUSH
40433: FOR_IN
40434: IFFALSE 40465
// if GetLives ( i ) < 1000 then
40436: LD_VAR 0 1
40440: PPUSH
40441: CALL_OW 256
40445: PUSH
40446: LD_INT 1000
40448: LESS
40449: IFFALSE 40463
// SetLives ( i , 1000 ) ;
40451: LD_VAR 0 1
40455: PPUSH
40456: LD_INT 1000
40458: PPUSH
40459: CALL_OW 234
40463: GO 40433
40465: POP
40466: POP
// until p > 20 ;
40467: LD_VAR 0 3
40471: PUSH
40472: LD_INT 20
40474: GREATER
40475: IFFALSE 40402
// end ;
40477: PPOPN 3
40479: END
// every 0 0$1 trigger StreamModeActive and sTime do
40480: LD_EXP 85
40484: PUSH
40485: LD_EXP 136
40489: AND
40490: IFFALSE 40525
40492: GO 40494
40494: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
40495: LD_INT 28
40497: PPUSH
40498: LD_OWVAR 2
40502: PPUSH
40503: LD_INT 2
40505: PPUSH
40506: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
40510: LD_INT 30
40512: PPUSH
40513: LD_OWVAR 2
40517: PPUSH
40518: LD_INT 2
40520: PPUSH
40521: CALL_OW 322
// end ;
40525: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
40526: LD_EXP 85
40530: PUSH
40531: LD_EXP 137
40535: AND
40536: IFFALSE 40657
40538: GO 40540
40540: DISABLE
40541: LD_INT 0
40543: PPUSH
40544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40545: LD_ADDR_VAR 0 2
40549: PUSH
40550: LD_INT 22
40552: PUSH
40553: LD_OWVAR 2
40557: PUSH
40558: EMPTY
40559: LIST
40560: LIST
40561: PUSH
40562: LD_INT 21
40564: PUSH
40565: LD_INT 1
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 3
40574: PUSH
40575: LD_INT 23
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: LIST
40593: PPUSH
40594: CALL_OW 69
40598: ST_TO_ADDR
// if not tmp then
40599: LD_VAR 0 2
40603: NOT
40604: IFFALSE 40608
// exit ;
40606: GO 40657
// for i in tmp do
40608: LD_ADDR_VAR 0 1
40612: PUSH
40613: LD_VAR 0 2
40617: PUSH
40618: FOR_IN
40619: IFFALSE 40655
// begin if Crawls ( i ) then
40621: LD_VAR 0 1
40625: PPUSH
40626: CALL_OW 318
40630: IFFALSE 40641
// ComWalk ( i ) ;
40632: LD_VAR 0 1
40636: PPUSH
40637: CALL_OW 138
// SetClass ( i , 2 ) ;
40641: LD_VAR 0 1
40645: PPUSH
40646: LD_INT 2
40648: PPUSH
40649: CALL_OW 336
// end ;
40653: GO 40618
40655: POP
40656: POP
// end ;
40657: PPOPN 2
40659: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
40660: LD_EXP 85
40664: PUSH
40665: LD_EXP 138
40669: AND
40670: IFFALSE 40951
40672: GO 40674
40674: DISABLE
40675: LD_INT 0
40677: PPUSH
40678: PPUSH
40679: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
40680: LD_OWVAR 2
40684: PPUSH
40685: LD_INT 9
40687: PPUSH
40688: LD_INT 1
40690: PPUSH
40691: LD_INT 1
40693: PPUSH
40694: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
40698: LD_INT 9
40700: PPUSH
40701: LD_OWVAR 2
40705: PPUSH
40706: CALL_OW 343
// uc_side := 9 ;
40710: LD_ADDR_OWVAR 20
40714: PUSH
40715: LD_INT 9
40717: ST_TO_ADDR
// uc_nation := 2 ;
40718: LD_ADDR_OWVAR 21
40722: PUSH
40723: LD_INT 2
40725: ST_TO_ADDR
// hc_name := Dark Warrior ;
40726: LD_ADDR_OWVAR 26
40730: PUSH
40731: LD_STRING Dark Warrior
40733: ST_TO_ADDR
// hc_gallery :=  ;
40734: LD_ADDR_OWVAR 33
40738: PUSH
40739: LD_STRING 
40741: ST_TO_ADDR
// hc_noskilllimit := true ;
40742: LD_ADDR_OWVAR 76
40746: PUSH
40747: LD_INT 1
40749: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
40750: LD_ADDR_OWVAR 31
40754: PUSH
40755: LD_INT 30
40757: PUSH
40758: LD_INT 30
40760: PUSH
40761: LD_INT 30
40763: PUSH
40764: LD_INT 30
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: ST_TO_ADDR
// un := CreateHuman ;
40773: LD_ADDR_VAR 0 3
40777: PUSH
40778: CALL_OW 44
40782: ST_TO_ADDR
// hc_noskilllimit := false ;
40783: LD_ADDR_OWVAR 76
40787: PUSH
40788: LD_INT 0
40790: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40791: LD_VAR 0 3
40795: PPUSH
40796: LD_INT 1
40798: PPUSH
40799: CALL_OW 51
// p := 0 ;
40803: LD_ADDR_VAR 0 2
40807: PUSH
40808: LD_INT 0
40810: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40811: LD_INT 35
40813: PPUSH
40814: CALL_OW 67
// p := p + 1 ;
40818: LD_ADDR_VAR 0 2
40822: PUSH
40823: LD_VAR 0 2
40827: PUSH
40828: LD_INT 1
40830: PLUS
40831: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
40832: LD_VAR 0 3
40836: PPUSH
40837: CALL_OW 256
40841: PUSH
40842: LD_INT 1000
40844: LESS
40845: IFFALSE 40859
// SetLives ( un , 1000 ) ;
40847: LD_VAR 0 3
40851: PPUSH
40852: LD_INT 1000
40854: PPUSH
40855: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
40859: LD_VAR 0 3
40863: PPUSH
40864: LD_INT 81
40866: PUSH
40867: LD_OWVAR 2
40871: PUSH
40872: EMPTY
40873: LIST
40874: LIST
40875: PUSH
40876: LD_INT 91
40878: PUSH
40879: LD_VAR 0 3
40883: PUSH
40884: LD_INT 30
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: LIST
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PPUSH
40896: CALL_OW 69
40900: PPUSH
40901: LD_VAR 0 3
40905: PPUSH
40906: CALL_OW 74
40910: PPUSH
40911: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
40915: LD_VAR 0 2
40919: PUSH
40920: LD_INT 60
40922: GREATER
40923: PUSH
40924: LD_VAR 0 3
40928: PPUSH
40929: CALL_OW 301
40933: OR
40934: IFFALSE 40811
// if un then
40936: LD_VAR 0 3
40940: IFFALSE 40951
// RemoveUnit ( un ) ;
40942: LD_VAR 0 3
40946: PPUSH
40947: CALL_OW 64
// end ;
40951: PPOPN 3
40953: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
40954: LD_INT 0
40956: PPUSH
// case cmd of 301 :
40957: LD_VAR 0 1
40961: PUSH
40962: LD_INT 301
40964: DOUBLE
40965: EQUAL
40966: IFTRUE 40970
40968: GO 41002
40970: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
40971: LD_VAR 0 6
40975: PPUSH
40976: LD_VAR 0 7
40980: PPUSH
40981: LD_VAR 0 8
40985: PPUSH
40986: LD_VAR 0 4
40990: PPUSH
40991: LD_VAR 0 5
40995: PPUSH
40996: CALL 42203 0 5
41000: GO 41123
41002: LD_INT 302
41004: DOUBLE
41005: EQUAL
41006: IFTRUE 41010
41008: GO 41047
41010: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
41011: LD_VAR 0 6
41015: PPUSH
41016: LD_VAR 0 7
41020: PPUSH
41021: LD_VAR 0 8
41025: PPUSH
41026: LD_VAR 0 9
41030: PPUSH
41031: LD_VAR 0 4
41035: PPUSH
41036: LD_VAR 0 5
41040: PPUSH
41041: CALL 42294 0 6
41045: GO 41123
41047: LD_INT 303
41049: DOUBLE
41050: EQUAL
41051: IFTRUE 41055
41053: GO 41092
41055: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
41056: LD_VAR 0 6
41060: PPUSH
41061: LD_VAR 0 7
41065: PPUSH
41066: LD_VAR 0 8
41070: PPUSH
41071: LD_VAR 0 9
41075: PPUSH
41076: LD_VAR 0 4
41080: PPUSH
41081: LD_VAR 0 5
41085: PPUSH
41086: CALL 41128 0 6
41090: GO 41123
41092: LD_INT 304
41094: DOUBLE
41095: EQUAL
41096: IFTRUE 41100
41098: GO 41122
41100: POP
// hHackTeleport ( unit , x , y ) ; end ;
41101: LD_VAR 0 2
41105: PPUSH
41106: LD_VAR 0 4
41110: PPUSH
41111: LD_VAR 0 5
41115: PPUSH
41116: CALL 42887 0 3
41120: GO 41123
41122: POP
// end ;
41123: LD_VAR 0 12
41127: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
41128: LD_INT 0
41130: PPUSH
41131: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
41132: LD_VAR 0 1
41136: PUSH
41137: LD_INT 1
41139: LESS
41140: PUSH
41141: LD_VAR 0 1
41145: PUSH
41146: LD_INT 3
41148: GREATER
41149: OR
41150: PUSH
41151: LD_VAR 0 5
41155: PPUSH
41156: LD_VAR 0 6
41160: PPUSH
41161: CALL_OW 428
41165: OR
41166: IFFALSE 41170
// exit ;
41168: GO 41890
// uc_side := your_side ;
41170: LD_ADDR_OWVAR 20
41174: PUSH
41175: LD_OWVAR 2
41179: ST_TO_ADDR
// uc_nation := nation ;
41180: LD_ADDR_OWVAR 21
41184: PUSH
41185: LD_VAR 0 1
41189: ST_TO_ADDR
// bc_level = 1 ;
41190: LD_ADDR_OWVAR 43
41194: PUSH
41195: LD_INT 1
41197: ST_TO_ADDR
// case btype of 1 :
41198: LD_VAR 0 2
41202: PUSH
41203: LD_INT 1
41205: DOUBLE
41206: EQUAL
41207: IFTRUE 41211
41209: GO 41222
41211: POP
// bc_type := b_depot ; 2 :
41212: LD_ADDR_OWVAR 42
41216: PUSH
41217: LD_INT 0
41219: ST_TO_ADDR
41220: GO 41834
41222: LD_INT 2
41224: DOUBLE
41225: EQUAL
41226: IFTRUE 41230
41228: GO 41241
41230: POP
// bc_type := b_warehouse ; 3 :
41231: LD_ADDR_OWVAR 42
41235: PUSH
41236: LD_INT 1
41238: ST_TO_ADDR
41239: GO 41834
41241: LD_INT 3
41243: DOUBLE
41244: EQUAL
41245: IFTRUE 41249
41247: GO 41260
41249: POP
// bc_type := b_lab ; 4 .. 9 :
41250: LD_ADDR_OWVAR 42
41254: PUSH
41255: LD_INT 6
41257: ST_TO_ADDR
41258: GO 41834
41260: LD_INT 4
41262: DOUBLE
41263: GREATEREQUAL
41264: IFFALSE 41272
41266: LD_INT 9
41268: DOUBLE
41269: LESSEQUAL
41270: IFTRUE 41274
41272: GO 41326
41274: POP
// begin bc_type := b_lab_half ;
41275: LD_ADDR_OWVAR 42
41279: PUSH
41280: LD_INT 7
41282: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
41283: LD_ADDR_OWVAR 44
41287: PUSH
41288: LD_INT 10
41290: PUSH
41291: LD_INT 11
41293: PUSH
41294: LD_INT 12
41296: PUSH
41297: LD_INT 15
41299: PUSH
41300: LD_INT 14
41302: PUSH
41303: LD_INT 13
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: PUSH
41314: LD_VAR 0 2
41318: PUSH
41319: LD_INT 3
41321: MINUS
41322: ARRAY
41323: ST_TO_ADDR
// end ; 10 .. 13 :
41324: GO 41834
41326: LD_INT 10
41328: DOUBLE
41329: GREATEREQUAL
41330: IFFALSE 41338
41332: LD_INT 13
41334: DOUBLE
41335: LESSEQUAL
41336: IFTRUE 41340
41338: GO 41417
41340: POP
// begin bc_type := b_lab_full ;
41341: LD_ADDR_OWVAR 42
41345: PUSH
41346: LD_INT 8
41348: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
41349: LD_ADDR_OWVAR 44
41353: PUSH
41354: LD_INT 10
41356: PUSH
41357: LD_INT 12
41359: PUSH
41360: LD_INT 14
41362: PUSH
41363: LD_INT 13
41365: PUSH
41366: EMPTY
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: PUSH
41372: LD_VAR 0 2
41376: PUSH
41377: LD_INT 9
41379: MINUS
41380: ARRAY
41381: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
41382: LD_ADDR_OWVAR 45
41386: PUSH
41387: LD_INT 11
41389: PUSH
41390: LD_INT 15
41392: PUSH
41393: LD_INT 12
41395: PUSH
41396: LD_INT 15
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: PUSH
41405: LD_VAR 0 2
41409: PUSH
41410: LD_INT 9
41412: MINUS
41413: ARRAY
41414: ST_TO_ADDR
// end ; 14 :
41415: GO 41834
41417: LD_INT 14
41419: DOUBLE
41420: EQUAL
41421: IFTRUE 41425
41423: GO 41436
41425: POP
// bc_type := b_workshop ; 15 :
41426: LD_ADDR_OWVAR 42
41430: PUSH
41431: LD_INT 2
41433: ST_TO_ADDR
41434: GO 41834
41436: LD_INT 15
41438: DOUBLE
41439: EQUAL
41440: IFTRUE 41444
41442: GO 41455
41444: POP
// bc_type := b_factory ; 16 :
41445: LD_ADDR_OWVAR 42
41449: PUSH
41450: LD_INT 3
41452: ST_TO_ADDR
41453: GO 41834
41455: LD_INT 16
41457: DOUBLE
41458: EQUAL
41459: IFTRUE 41463
41461: GO 41474
41463: POP
// bc_type := b_ext_gun ; 17 :
41464: LD_ADDR_OWVAR 42
41468: PUSH
41469: LD_INT 17
41471: ST_TO_ADDR
41472: GO 41834
41474: LD_INT 17
41476: DOUBLE
41477: EQUAL
41478: IFTRUE 41482
41480: GO 41510
41482: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
41483: LD_ADDR_OWVAR 42
41487: PUSH
41488: LD_INT 19
41490: PUSH
41491: LD_INT 23
41493: PUSH
41494: LD_INT 19
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: LIST
41501: PUSH
41502: LD_VAR 0 1
41506: ARRAY
41507: ST_TO_ADDR
41508: GO 41834
41510: LD_INT 18
41512: DOUBLE
41513: EQUAL
41514: IFTRUE 41518
41516: GO 41529
41518: POP
// bc_type := b_ext_radar ; 19 :
41519: LD_ADDR_OWVAR 42
41523: PUSH
41524: LD_INT 20
41526: ST_TO_ADDR
41527: GO 41834
41529: LD_INT 19
41531: DOUBLE
41532: EQUAL
41533: IFTRUE 41537
41535: GO 41548
41537: POP
// bc_type := b_ext_radio ; 20 :
41538: LD_ADDR_OWVAR 42
41542: PUSH
41543: LD_INT 22
41545: ST_TO_ADDR
41546: GO 41834
41548: LD_INT 20
41550: DOUBLE
41551: EQUAL
41552: IFTRUE 41556
41554: GO 41567
41556: POP
// bc_type := b_ext_siberium ; 21 :
41557: LD_ADDR_OWVAR 42
41561: PUSH
41562: LD_INT 21
41564: ST_TO_ADDR
41565: GO 41834
41567: LD_INT 21
41569: DOUBLE
41570: EQUAL
41571: IFTRUE 41575
41573: GO 41586
41575: POP
// bc_type := b_ext_computer ; 22 :
41576: LD_ADDR_OWVAR 42
41580: PUSH
41581: LD_INT 24
41583: ST_TO_ADDR
41584: GO 41834
41586: LD_INT 22
41588: DOUBLE
41589: EQUAL
41590: IFTRUE 41594
41592: GO 41605
41594: POP
// bc_type := b_ext_track ; 23 :
41595: LD_ADDR_OWVAR 42
41599: PUSH
41600: LD_INT 16
41602: ST_TO_ADDR
41603: GO 41834
41605: LD_INT 23
41607: DOUBLE
41608: EQUAL
41609: IFTRUE 41613
41611: GO 41624
41613: POP
// bc_type := b_ext_laser ; 24 :
41614: LD_ADDR_OWVAR 42
41618: PUSH
41619: LD_INT 25
41621: ST_TO_ADDR
41622: GO 41834
41624: LD_INT 24
41626: DOUBLE
41627: EQUAL
41628: IFTRUE 41632
41630: GO 41643
41632: POP
// bc_type := b_control_tower ; 25 :
41633: LD_ADDR_OWVAR 42
41637: PUSH
41638: LD_INT 36
41640: ST_TO_ADDR
41641: GO 41834
41643: LD_INT 25
41645: DOUBLE
41646: EQUAL
41647: IFTRUE 41651
41649: GO 41662
41651: POP
// bc_type := b_breastwork ; 26 :
41652: LD_ADDR_OWVAR 42
41656: PUSH
41657: LD_INT 31
41659: ST_TO_ADDR
41660: GO 41834
41662: LD_INT 26
41664: DOUBLE
41665: EQUAL
41666: IFTRUE 41670
41668: GO 41681
41670: POP
// bc_type := b_bunker ; 27 :
41671: LD_ADDR_OWVAR 42
41675: PUSH
41676: LD_INT 32
41678: ST_TO_ADDR
41679: GO 41834
41681: LD_INT 27
41683: DOUBLE
41684: EQUAL
41685: IFTRUE 41689
41687: GO 41700
41689: POP
// bc_type := b_turret ; 28 :
41690: LD_ADDR_OWVAR 42
41694: PUSH
41695: LD_INT 33
41697: ST_TO_ADDR
41698: GO 41834
41700: LD_INT 28
41702: DOUBLE
41703: EQUAL
41704: IFTRUE 41708
41706: GO 41719
41708: POP
// bc_type := b_armoury ; 29 :
41709: LD_ADDR_OWVAR 42
41713: PUSH
41714: LD_INT 4
41716: ST_TO_ADDR
41717: GO 41834
41719: LD_INT 29
41721: DOUBLE
41722: EQUAL
41723: IFTRUE 41727
41725: GO 41738
41727: POP
// bc_type := b_barracks ; 30 :
41728: LD_ADDR_OWVAR 42
41732: PUSH
41733: LD_INT 5
41735: ST_TO_ADDR
41736: GO 41834
41738: LD_INT 30
41740: DOUBLE
41741: EQUAL
41742: IFTRUE 41746
41744: GO 41757
41746: POP
// bc_type := b_solar_power ; 31 :
41747: LD_ADDR_OWVAR 42
41751: PUSH
41752: LD_INT 27
41754: ST_TO_ADDR
41755: GO 41834
41757: LD_INT 31
41759: DOUBLE
41760: EQUAL
41761: IFTRUE 41765
41763: GO 41776
41765: POP
// bc_type := b_oil_power ; 32 :
41766: LD_ADDR_OWVAR 42
41770: PUSH
41771: LD_INT 26
41773: ST_TO_ADDR
41774: GO 41834
41776: LD_INT 32
41778: DOUBLE
41779: EQUAL
41780: IFTRUE 41784
41782: GO 41795
41784: POP
// bc_type := b_siberite_power ; 33 :
41785: LD_ADDR_OWVAR 42
41789: PUSH
41790: LD_INT 28
41792: ST_TO_ADDR
41793: GO 41834
41795: LD_INT 33
41797: DOUBLE
41798: EQUAL
41799: IFTRUE 41803
41801: GO 41814
41803: POP
// bc_type := b_oil_mine ; 34 :
41804: LD_ADDR_OWVAR 42
41808: PUSH
41809: LD_INT 29
41811: ST_TO_ADDR
41812: GO 41834
41814: LD_INT 34
41816: DOUBLE
41817: EQUAL
41818: IFTRUE 41822
41820: GO 41833
41822: POP
// bc_type := b_siberite_mine ; end ;
41823: LD_ADDR_OWVAR 42
41827: PUSH
41828: LD_INT 30
41830: ST_TO_ADDR
41831: GO 41834
41833: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
41834: LD_ADDR_VAR 0 8
41838: PUSH
41839: LD_VAR 0 5
41843: PPUSH
41844: LD_VAR 0 6
41848: PPUSH
41849: LD_VAR 0 3
41853: PPUSH
41854: CALL_OW 47
41858: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
41859: LD_OWVAR 42
41863: PUSH
41864: LD_INT 32
41866: PUSH
41867: LD_INT 33
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: IN
41874: IFFALSE 41890
// PlaceWeaponTurret ( b , weapon ) ;
41876: LD_VAR 0 8
41880: PPUSH
41881: LD_VAR 0 4
41885: PPUSH
41886: CALL_OW 431
// end ;
41890: LD_VAR 0 7
41894: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
41895: LD_INT 0
41897: PPUSH
41898: PPUSH
41899: PPUSH
41900: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41901: LD_ADDR_VAR 0 4
41905: PUSH
41906: LD_INT 22
41908: PUSH
41909: LD_OWVAR 2
41913: PUSH
41914: EMPTY
41915: LIST
41916: LIST
41917: PUSH
41918: LD_INT 2
41920: PUSH
41921: LD_INT 30
41923: PUSH
41924: LD_INT 0
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 30
41933: PUSH
41934: LD_INT 1
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: LIST
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PPUSH
41950: CALL_OW 69
41954: ST_TO_ADDR
// if not tmp then
41955: LD_VAR 0 4
41959: NOT
41960: IFFALSE 41964
// exit ;
41962: GO 42023
// for i in tmp do
41964: LD_ADDR_VAR 0 2
41968: PUSH
41969: LD_VAR 0 4
41973: PUSH
41974: FOR_IN
41975: IFFALSE 42021
// for j = 1 to 3 do
41977: LD_ADDR_VAR 0 3
41981: PUSH
41982: DOUBLE
41983: LD_INT 1
41985: DEC
41986: ST_TO_ADDR
41987: LD_INT 3
41989: PUSH
41990: FOR_TO
41991: IFFALSE 42017
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
41993: LD_VAR 0 2
41997: PPUSH
41998: CALL_OW 274
42002: PPUSH
42003: LD_VAR 0 3
42007: PPUSH
42008: LD_INT 99999
42010: PPUSH
42011: CALL_OW 277
42015: GO 41990
42017: POP
42018: POP
42019: GO 41974
42021: POP
42022: POP
// end ;
42023: LD_VAR 0 1
42027: RET
// export function hHackSetLevel10 ; var i , j ; begin
42028: LD_INT 0
42030: PPUSH
42031: PPUSH
42032: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42033: LD_ADDR_VAR 0 2
42037: PUSH
42038: LD_INT 21
42040: PUSH
42041: LD_INT 1
42043: PUSH
42044: EMPTY
42045: LIST
42046: LIST
42047: PPUSH
42048: CALL_OW 69
42052: PUSH
42053: FOR_IN
42054: IFFALSE 42106
// if IsSelected ( i ) then
42056: LD_VAR 0 2
42060: PPUSH
42061: CALL_OW 306
42065: IFFALSE 42104
// begin for j := 1 to 4 do
42067: LD_ADDR_VAR 0 3
42071: PUSH
42072: DOUBLE
42073: LD_INT 1
42075: DEC
42076: ST_TO_ADDR
42077: LD_INT 4
42079: PUSH
42080: FOR_TO
42081: IFFALSE 42102
// SetSkill ( i , j , 10 ) ;
42083: LD_VAR 0 2
42087: PPUSH
42088: LD_VAR 0 3
42092: PPUSH
42093: LD_INT 10
42095: PPUSH
42096: CALL_OW 237
42100: GO 42080
42102: POP
42103: POP
// end ;
42104: GO 42053
42106: POP
42107: POP
// end ;
42108: LD_VAR 0 1
42112: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
42113: LD_INT 0
42115: PPUSH
42116: PPUSH
42117: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
42118: LD_ADDR_VAR 0 2
42122: PUSH
42123: LD_INT 22
42125: PUSH
42126: LD_OWVAR 2
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 21
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PPUSH
42149: CALL_OW 69
42153: PUSH
42154: FOR_IN
42155: IFFALSE 42196
// begin for j := 1 to 4 do
42157: LD_ADDR_VAR 0 3
42161: PUSH
42162: DOUBLE
42163: LD_INT 1
42165: DEC
42166: ST_TO_ADDR
42167: LD_INT 4
42169: PUSH
42170: FOR_TO
42171: IFFALSE 42192
// SetSkill ( i , j , 10 ) ;
42173: LD_VAR 0 2
42177: PPUSH
42178: LD_VAR 0 3
42182: PPUSH
42183: LD_INT 10
42185: PPUSH
42186: CALL_OW 237
42190: GO 42170
42192: POP
42193: POP
// end ;
42194: GO 42154
42196: POP
42197: POP
// end ;
42198: LD_VAR 0 1
42202: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
42203: LD_INT 0
42205: PPUSH
// uc_side := your_side ;
42206: LD_ADDR_OWVAR 20
42210: PUSH
42211: LD_OWVAR 2
42215: ST_TO_ADDR
// uc_nation := nation ;
42216: LD_ADDR_OWVAR 21
42220: PUSH
42221: LD_VAR 0 1
42225: ST_TO_ADDR
// InitHc ;
42226: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
42230: LD_INT 0
42232: PPUSH
42233: LD_VAR 0 2
42237: PPUSH
42238: LD_VAR 0 3
42242: PPUSH
42243: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
42247: LD_VAR 0 4
42251: PPUSH
42252: LD_VAR 0 5
42256: PPUSH
42257: CALL_OW 428
42261: PUSH
42262: LD_INT 0
42264: EQUAL
42265: IFFALSE 42289
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
42267: CALL_OW 44
42271: PPUSH
42272: LD_VAR 0 4
42276: PPUSH
42277: LD_VAR 0 5
42281: PPUSH
42282: LD_INT 1
42284: PPUSH
42285: CALL_OW 48
// end ;
42289: LD_VAR 0 6
42293: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
42294: LD_INT 0
42296: PPUSH
42297: PPUSH
// uc_side := your_side ;
42298: LD_ADDR_OWVAR 20
42302: PUSH
42303: LD_OWVAR 2
42307: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
42308: LD_VAR 0 1
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: LD_INT 2
42318: PUSH
42319: LD_INT 3
42321: PUSH
42322: LD_INT 4
42324: PUSH
42325: LD_INT 5
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: LIST
42332: LIST
42333: LIST
42334: IN
42335: IFFALSE 42347
// uc_nation := nation_american else
42337: LD_ADDR_OWVAR 21
42341: PUSH
42342: LD_INT 1
42344: ST_TO_ADDR
42345: GO 42390
// if chassis in [ 11 , 12 , 13 , 14 ] then
42347: LD_VAR 0 1
42351: PUSH
42352: LD_INT 11
42354: PUSH
42355: LD_INT 12
42357: PUSH
42358: LD_INT 13
42360: PUSH
42361: LD_INT 14
42363: PUSH
42364: EMPTY
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: IN
42370: IFFALSE 42382
// uc_nation := nation_arabian else
42372: LD_ADDR_OWVAR 21
42376: PUSH
42377: LD_INT 2
42379: ST_TO_ADDR
42380: GO 42390
// uc_nation := nation_russian ;
42382: LD_ADDR_OWVAR 21
42386: PUSH
42387: LD_INT 3
42389: ST_TO_ADDR
// vc_chassis := chassis ;
42390: LD_ADDR_OWVAR 37
42394: PUSH
42395: LD_VAR 0 1
42399: ST_TO_ADDR
// vc_engine := engine ;
42400: LD_ADDR_OWVAR 39
42404: PUSH
42405: LD_VAR 0 2
42409: ST_TO_ADDR
// vc_control := control ;
42410: LD_ADDR_OWVAR 38
42414: PUSH
42415: LD_VAR 0 3
42419: ST_TO_ADDR
// vc_weapon := weapon ;
42420: LD_ADDR_OWVAR 40
42424: PUSH
42425: LD_VAR 0 4
42429: ST_TO_ADDR
// un := CreateVehicle ;
42430: LD_ADDR_VAR 0 8
42434: PUSH
42435: CALL_OW 45
42439: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
42440: LD_VAR 0 8
42444: PPUSH
42445: LD_INT 0
42447: PPUSH
42448: LD_INT 5
42450: PPUSH
42451: CALL_OW 12
42455: PPUSH
42456: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
42460: LD_VAR 0 8
42464: PPUSH
42465: LD_VAR 0 5
42469: PPUSH
42470: LD_VAR 0 6
42474: PPUSH
42475: LD_INT 1
42477: PPUSH
42478: CALL_OW 48
// end ;
42482: LD_VAR 0 7
42486: RET
// export hInvincible ; every 1 do
42487: GO 42489
42489: DISABLE
// hInvincible := [ ] ;
42490: LD_ADDR_EXP 139
42494: PUSH
42495: EMPTY
42496: ST_TO_ADDR
42497: END
// every 10 do var i ;
42498: GO 42500
42500: DISABLE
42501: LD_INT 0
42503: PPUSH
// begin enable ;
42504: ENABLE
// if not hInvincible then
42505: LD_EXP 139
42509: NOT
42510: IFFALSE 42514
// exit ;
42512: GO 42558
// for i in hInvincible do
42514: LD_ADDR_VAR 0 1
42518: PUSH
42519: LD_EXP 139
42523: PUSH
42524: FOR_IN
42525: IFFALSE 42556
// if GetLives ( i ) < 1000 then
42527: LD_VAR 0 1
42531: PPUSH
42532: CALL_OW 256
42536: PUSH
42537: LD_INT 1000
42539: LESS
42540: IFFALSE 42554
// SetLives ( i , 1000 ) ;
42542: LD_VAR 0 1
42546: PPUSH
42547: LD_INT 1000
42549: PPUSH
42550: CALL_OW 234
42554: GO 42524
42556: POP
42557: POP
// end ;
42558: PPOPN 1
42560: END
// export function hHackInvincible ; var i ; begin
42561: LD_INT 0
42563: PPUSH
42564: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
42565: LD_ADDR_VAR 0 2
42569: PUSH
42570: LD_INT 2
42572: PUSH
42573: LD_INT 21
42575: PUSH
42576: LD_INT 1
42578: PUSH
42579: EMPTY
42580: LIST
42581: LIST
42582: PUSH
42583: LD_INT 21
42585: PUSH
42586: LD_INT 2
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: LIST
42597: PPUSH
42598: CALL_OW 69
42602: PUSH
42603: FOR_IN
42604: IFFALSE 42665
// if IsSelected ( i ) then
42606: LD_VAR 0 2
42610: PPUSH
42611: CALL_OW 306
42615: IFFALSE 42663
// begin if i in hInvincible then
42617: LD_VAR 0 2
42621: PUSH
42622: LD_EXP 139
42626: IN
42627: IFFALSE 42647
// hInvincible := hInvincible diff i else
42629: LD_ADDR_EXP 139
42633: PUSH
42634: LD_EXP 139
42638: PUSH
42639: LD_VAR 0 2
42643: DIFF
42644: ST_TO_ADDR
42645: GO 42663
// hInvincible := hInvincible union i ;
42647: LD_ADDR_EXP 139
42651: PUSH
42652: LD_EXP 139
42656: PUSH
42657: LD_VAR 0 2
42661: UNION
42662: ST_TO_ADDR
// end ;
42663: GO 42603
42665: POP
42666: POP
// end ;
42667: LD_VAR 0 1
42671: RET
// export function hHackInvisible ; var i , j ; begin
42672: LD_INT 0
42674: PPUSH
42675: PPUSH
42676: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42677: LD_ADDR_VAR 0 2
42681: PUSH
42682: LD_INT 21
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PPUSH
42692: CALL_OW 69
42696: PUSH
42697: FOR_IN
42698: IFFALSE 42722
// if IsSelected ( i ) then
42700: LD_VAR 0 2
42704: PPUSH
42705: CALL_OW 306
42709: IFFALSE 42720
// ComForceInvisible ( i ) ;
42711: LD_VAR 0 2
42715: PPUSH
42716: CALL_OW 496
42720: GO 42697
42722: POP
42723: POP
// end ;
42724: LD_VAR 0 1
42728: RET
// export function hHackChangeYourSide ; begin
42729: LD_INT 0
42731: PPUSH
// if your_side = 8 then
42732: LD_OWVAR 2
42736: PUSH
42737: LD_INT 8
42739: EQUAL
42740: IFFALSE 42752
// your_side := 0 else
42742: LD_ADDR_OWVAR 2
42746: PUSH
42747: LD_INT 0
42749: ST_TO_ADDR
42750: GO 42766
// your_side := your_side + 1 ;
42752: LD_ADDR_OWVAR 2
42756: PUSH
42757: LD_OWVAR 2
42761: PUSH
42762: LD_INT 1
42764: PLUS
42765: ST_TO_ADDR
// end ;
42766: LD_VAR 0 1
42770: RET
// export function hHackChangeUnitSide ; var i , j ; begin
42771: LD_INT 0
42773: PPUSH
42774: PPUSH
42775: PPUSH
// for i in all_units do
42776: LD_ADDR_VAR 0 2
42780: PUSH
42781: LD_OWVAR 3
42785: PUSH
42786: FOR_IN
42787: IFFALSE 42865
// if IsSelected ( i ) then
42789: LD_VAR 0 2
42793: PPUSH
42794: CALL_OW 306
42798: IFFALSE 42863
// begin j := GetSide ( i ) ;
42800: LD_ADDR_VAR 0 3
42804: PUSH
42805: LD_VAR 0 2
42809: PPUSH
42810: CALL_OW 255
42814: ST_TO_ADDR
// if j = 8 then
42815: LD_VAR 0 3
42819: PUSH
42820: LD_INT 8
42822: EQUAL
42823: IFFALSE 42835
// j := 0 else
42825: LD_ADDR_VAR 0 3
42829: PUSH
42830: LD_INT 0
42832: ST_TO_ADDR
42833: GO 42849
// j := j + 1 ;
42835: LD_ADDR_VAR 0 3
42839: PUSH
42840: LD_VAR 0 3
42844: PUSH
42845: LD_INT 1
42847: PLUS
42848: ST_TO_ADDR
// SetSide ( i , j ) ;
42849: LD_VAR 0 2
42853: PPUSH
42854: LD_VAR 0 3
42858: PPUSH
42859: CALL_OW 235
// end ;
42863: GO 42786
42865: POP
42866: POP
// end ;
42867: LD_VAR 0 1
42871: RET
// export function hHackFog ; begin
42872: LD_INT 0
42874: PPUSH
// FogOff ( true ) ;
42875: LD_INT 1
42877: PPUSH
42878: CALL_OW 344
// end ;
42882: LD_VAR 0 1
42886: RET
// export function hHackTeleport ( unit , x , y ) ; begin
42887: LD_INT 0
42889: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
42890: LD_VAR 0 1
42894: PPUSH
42895: LD_VAR 0 2
42899: PPUSH
42900: LD_VAR 0 3
42904: PPUSH
42905: LD_INT 1
42907: PPUSH
42908: LD_INT 1
42910: PPUSH
42911: CALL_OW 483
// CenterOnXY ( x , y ) ;
42915: LD_VAR 0 2
42919: PPUSH
42920: LD_VAR 0 3
42924: PPUSH
42925: CALL_OW 84
// end ; end_of_file
42929: LD_VAR 0 4
42933: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
42934: LD_INT 0
42936: PPUSH
42937: PPUSH
42938: PPUSH
42939: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
42940: LD_VAR 0 1
42944: PPUSH
42945: CALL_OW 264
42949: PUSH
42950: LD_EXP 73
42954: EQUAL
42955: IFFALSE 43027
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
42957: LD_INT 68
42959: PPUSH
42960: LD_VAR 0 1
42964: PPUSH
42965: CALL_OW 255
42969: PPUSH
42970: CALL_OW 321
42974: PUSH
42975: LD_INT 2
42977: EQUAL
42978: IFFALSE 42990
// eff := 70 else
42980: LD_ADDR_VAR 0 4
42984: PUSH
42985: LD_INT 70
42987: ST_TO_ADDR
42988: GO 42998
// eff := 30 ;
42990: LD_ADDR_VAR 0 4
42994: PUSH
42995: LD_INT 30
42997: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
42998: LD_VAR 0 1
43002: PPUSH
43003: CALL_OW 250
43007: PPUSH
43008: LD_VAR 0 1
43012: PPUSH
43013: CALL_OW 251
43017: PPUSH
43018: LD_VAR 0 4
43022: PPUSH
43023: CALL_OW 495
// end ; end ;
43027: LD_VAR 0 2
43031: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
43032: LD_INT 0
43034: PPUSH
// end ;
43035: LD_VAR 0 4
43039: RET
// export function SOS_Command ( cmd ) ; begin
43040: LD_INT 0
43042: PPUSH
// end ;
43043: LD_VAR 0 2
43047: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
43048: LD_INT 0
43050: PPUSH
// if cmd = 121 then
43051: LD_VAR 0 1
43055: PUSH
43056: LD_INT 121
43058: EQUAL
43059: IFFALSE 43061
// end ;
43061: LD_VAR 0 6
43065: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
43066: LD_INT 0
43068: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
43069: LD_VAR 0 1
43073: PUSH
43074: LD_INT 250
43076: EQUAL
43077: PUSH
43078: LD_VAR 0 2
43082: PPUSH
43083: CALL_OW 264
43087: PUSH
43088: LD_EXP 76
43092: EQUAL
43093: AND
43094: IFFALSE 43115
// MinerPlaceMine ( unit , x , y ) ;
43096: LD_VAR 0 2
43100: PPUSH
43101: LD_VAR 0 4
43105: PPUSH
43106: LD_VAR 0 5
43110: PPUSH
43111: CALL 45490 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
43115: LD_VAR 0 1
43119: PUSH
43120: LD_INT 251
43122: EQUAL
43123: PUSH
43124: LD_VAR 0 2
43128: PPUSH
43129: CALL_OW 264
43133: PUSH
43134: LD_EXP 76
43138: EQUAL
43139: AND
43140: IFFALSE 43161
// MinerDetonateMine ( unit , x , y ) ;
43142: LD_VAR 0 2
43146: PPUSH
43147: LD_VAR 0 4
43151: PPUSH
43152: LD_VAR 0 5
43156: PPUSH
43157: CALL 45767 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
43161: LD_VAR 0 1
43165: PUSH
43166: LD_INT 252
43168: EQUAL
43169: PUSH
43170: LD_VAR 0 2
43174: PPUSH
43175: CALL_OW 264
43179: PUSH
43180: LD_EXP 76
43184: EQUAL
43185: AND
43186: IFFALSE 43207
// MinerCreateMinefield ( unit , x , y ) ;
43188: LD_VAR 0 2
43192: PPUSH
43193: LD_VAR 0 4
43197: PPUSH
43198: LD_VAR 0 5
43202: PPUSH
43203: CALL 46184 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
43207: LD_VAR 0 1
43211: PUSH
43212: LD_INT 253
43214: EQUAL
43215: PUSH
43216: LD_VAR 0 2
43220: PPUSH
43221: CALL_OW 257
43225: PUSH
43226: LD_INT 5
43228: EQUAL
43229: AND
43230: IFFALSE 43251
// ComBinocular ( unit , x , y ) ;
43232: LD_VAR 0 2
43236: PPUSH
43237: LD_VAR 0 4
43241: PPUSH
43242: LD_VAR 0 5
43246: PPUSH
43247: CALL 46555 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
43251: LD_VAR 0 1
43255: PUSH
43256: LD_INT 254
43258: EQUAL
43259: PUSH
43260: LD_VAR 0 2
43264: PPUSH
43265: CALL_OW 264
43269: PUSH
43270: LD_EXP 71
43274: EQUAL
43275: AND
43276: PUSH
43277: LD_VAR 0 3
43281: PPUSH
43282: CALL_OW 263
43286: PUSH
43287: LD_INT 3
43289: EQUAL
43290: AND
43291: IFFALSE 43307
// HackDestroyVehicle ( unit , selectedUnit ) ;
43293: LD_VAR 0 2
43297: PPUSH
43298: LD_VAR 0 3
43302: PPUSH
43303: CALL 44850 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
43307: LD_VAR 0 1
43311: PUSH
43312: LD_INT 255
43314: EQUAL
43315: PUSH
43316: LD_VAR 0 2
43320: PPUSH
43321: CALL_OW 264
43325: PUSH
43326: LD_INT 14
43328: PUSH
43329: LD_INT 53
43331: PUSH
43332: EMPTY
43333: LIST
43334: LIST
43335: IN
43336: AND
43337: PUSH
43338: LD_VAR 0 4
43342: PPUSH
43343: LD_VAR 0 5
43347: PPUSH
43348: CALL_OW 488
43352: AND
43353: IFFALSE 43377
// CutTreeXYR ( unit , x , y , 12 ) ;
43355: LD_VAR 0 2
43359: PPUSH
43360: LD_VAR 0 4
43364: PPUSH
43365: LD_VAR 0 5
43369: PPUSH
43370: LD_INT 12
43372: PPUSH
43373: CALL 43416 0 4
// end ;
43377: LD_VAR 0 6
43381: RET
// export initPlantMineScript , plantMineList ; every 1 trigger not initPlantMineScript do
43382: LD_EXP 140
43386: NOT
43387: IFFALSE 43407
43389: GO 43391
43391: DISABLE
// begin initPlantMineScript := true ;
43392: LD_ADDR_EXP 140
43396: PUSH
43397: LD_INT 1
43399: ST_TO_ADDR
// plantMineList := [ ] ;
43400: LD_ADDR_EXP 141
43404: PUSH
43405: EMPTY
43406: ST_TO_ADDR
// end ;
43407: END
// export function ComGroupPlantMineXY ( units , x , y ) ; begin
43408: LD_INT 0
43410: PPUSH
// end ;
43411: LD_VAR 0 4
43415: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
43416: LD_INT 0
43418: PPUSH
43419: PPUSH
43420: PPUSH
43421: PPUSH
43422: PPUSH
43423: PPUSH
43424: PPUSH
43425: PPUSH
43426: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
43427: LD_VAR 0 1
43431: NOT
43432: PUSH
43433: LD_VAR 0 2
43437: PPUSH
43438: LD_VAR 0 3
43442: PPUSH
43443: CALL_OW 488
43447: NOT
43448: OR
43449: PUSH
43450: LD_VAR 0 4
43454: NOT
43455: OR
43456: IFFALSE 43460
// exit ;
43458: GO 43800
// list := [ ] ;
43460: LD_ADDR_VAR 0 13
43464: PUSH
43465: EMPTY
43466: ST_TO_ADDR
// if x - r < 0 then
43467: LD_VAR 0 2
43471: PUSH
43472: LD_VAR 0 4
43476: MINUS
43477: PUSH
43478: LD_INT 0
43480: LESS
43481: IFFALSE 43493
// min_x := 0 else
43483: LD_ADDR_VAR 0 7
43487: PUSH
43488: LD_INT 0
43490: ST_TO_ADDR
43491: GO 43509
// min_x := x - r ;
43493: LD_ADDR_VAR 0 7
43497: PUSH
43498: LD_VAR 0 2
43502: PUSH
43503: LD_VAR 0 4
43507: MINUS
43508: ST_TO_ADDR
// if y - r < 0 then
43509: LD_VAR 0 3
43513: PUSH
43514: LD_VAR 0 4
43518: MINUS
43519: PUSH
43520: LD_INT 0
43522: LESS
43523: IFFALSE 43535
// min_y := 0 else
43525: LD_ADDR_VAR 0 8
43529: PUSH
43530: LD_INT 0
43532: ST_TO_ADDR
43533: GO 43551
// min_y := y - r ;
43535: LD_ADDR_VAR 0 8
43539: PUSH
43540: LD_VAR 0 3
43544: PUSH
43545: LD_VAR 0 4
43549: MINUS
43550: ST_TO_ADDR
// max_x := x + r ;
43551: LD_ADDR_VAR 0 9
43555: PUSH
43556: LD_VAR 0 2
43560: PUSH
43561: LD_VAR 0 4
43565: PLUS
43566: ST_TO_ADDR
// max_y := y + r ;
43567: LD_ADDR_VAR 0 10
43571: PUSH
43572: LD_VAR 0 3
43576: PUSH
43577: LD_VAR 0 4
43581: PLUS
43582: ST_TO_ADDR
// for _x = min_x to max_x do
43583: LD_ADDR_VAR 0 11
43587: PUSH
43588: DOUBLE
43589: LD_VAR 0 7
43593: DEC
43594: ST_TO_ADDR
43595: LD_VAR 0 9
43599: PUSH
43600: FOR_TO
43601: IFFALSE 43718
// for _y = min_y to max_y do
43603: LD_ADDR_VAR 0 12
43607: PUSH
43608: DOUBLE
43609: LD_VAR 0 8
43613: DEC
43614: ST_TO_ADDR
43615: LD_VAR 0 10
43619: PUSH
43620: FOR_TO
43621: IFFALSE 43714
// begin if not ValidHex ( _x , _y ) then
43623: LD_VAR 0 11
43627: PPUSH
43628: LD_VAR 0 12
43632: PPUSH
43633: CALL_OW 488
43637: NOT
43638: IFFALSE 43642
// continue ;
43640: GO 43620
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
43642: LD_VAR 0 11
43646: PPUSH
43647: LD_VAR 0 12
43651: PPUSH
43652: CALL_OW 351
43656: PUSH
43657: LD_VAR 0 11
43661: PPUSH
43662: LD_VAR 0 12
43666: PPUSH
43667: CALL_OW 554
43671: AND
43672: IFFALSE 43712
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
43674: LD_ADDR_VAR 0 13
43678: PUSH
43679: LD_VAR 0 13
43683: PPUSH
43684: LD_VAR 0 13
43688: PUSH
43689: LD_INT 1
43691: PLUS
43692: PPUSH
43693: LD_VAR 0 11
43697: PUSH
43698: LD_VAR 0 12
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PPUSH
43707: CALL_OW 2
43711: ST_TO_ADDR
// end ;
43712: GO 43620
43714: POP
43715: POP
43716: GO 43600
43718: POP
43719: POP
// if not list then
43720: LD_VAR 0 13
43724: NOT
43725: IFFALSE 43729
// exit ;
43727: GO 43800
// for i in list do
43729: LD_ADDR_VAR 0 6
43733: PUSH
43734: LD_VAR 0 13
43738: PUSH
43739: FOR_IN
43740: IFFALSE 43798
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
43742: LD_VAR 0 1
43746: PPUSH
43747: LD_STRING M
43749: PUSH
43750: LD_VAR 0 6
43754: PUSH
43755: LD_INT 1
43757: ARRAY
43758: PUSH
43759: LD_VAR 0 6
43763: PUSH
43764: LD_INT 2
43766: ARRAY
43767: PUSH
43768: LD_INT 0
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: LD_INT 0
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: LIST
43784: LIST
43785: LIST
43786: LIST
43787: LIST
43788: PUSH
43789: EMPTY
43790: LIST
43791: PPUSH
43792: CALL_OW 447
43796: GO 43739
43798: POP
43799: POP
// end ;
43800: LD_VAR 0 5
43804: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
43805: LD_EXP 142
43809: NOT
43810: IFFALSE 43860
43812: GO 43814
43814: DISABLE
// begin initHack := true ;
43815: LD_ADDR_EXP 142
43819: PUSH
43820: LD_INT 1
43822: ST_TO_ADDR
// hackTanks := [ ] ;
43823: LD_ADDR_EXP 143
43827: PUSH
43828: EMPTY
43829: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
43830: LD_ADDR_EXP 144
43834: PUSH
43835: EMPTY
43836: ST_TO_ADDR
// hackLimit := 3 ;
43837: LD_ADDR_EXP 145
43841: PUSH
43842: LD_INT 3
43844: ST_TO_ADDR
// hackDist := 12 ;
43845: LD_ADDR_EXP 146
43849: PUSH
43850: LD_INT 12
43852: ST_TO_ADDR
// hackCounter := [ ] ;
43853: LD_ADDR_EXP 147
43857: PUSH
43858: EMPTY
43859: ST_TO_ADDR
// end ;
43860: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
43861: LD_EXP 142
43865: PUSH
43866: LD_INT 34
43868: PUSH
43869: LD_EXP 71
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PPUSH
43878: CALL_OW 69
43882: AND
43883: IFFALSE 44138
43885: GO 43887
43887: DISABLE
43888: LD_INT 0
43890: PPUSH
43891: PPUSH
// begin enable ;
43892: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
43893: LD_ADDR_VAR 0 1
43897: PUSH
43898: LD_INT 34
43900: PUSH
43901: LD_EXP 71
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: PPUSH
43910: CALL_OW 69
43914: PUSH
43915: FOR_IN
43916: IFFALSE 44136
// begin if not i in hackTanks then
43918: LD_VAR 0 1
43922: PUSH
43923: LD_EXP 143
43927: IN
43928: NOT
43929: IFFALSE 44012
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
43931: LD_ADDR_EXP 143
43935: PUSH
43936: LD_EXP 143
43940: PPUSH
43941: LD_EXP 143
43945: PUSH
43946: LD_INT 1
43948: PLUS
43949: PPUSH
43950: LD_VAR 0 1
43954: PPUSH
43955: CALL_OW 1
43959: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
43960: LD_ADDR_EXP 144
43964: PUSH
43965: LD_EXP 144
43969: PPUSH
43970: LD_EXP 144
43974: PUSH
43975: LD_INT 1
43977: PLUS
43978: PPUSH
43979: EMPTY
43980: PPUSH
43981: CALL_OW 1
43985: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
43986: LD_ADDR_EXP 147
43990: PUSH
43991: LD_EXP 147
43995: PPUSH
43996: LD_EXP 147
44000: PUSH
44001: LD_INT 1
44003: PLUS
44004: PPUSH
44005: EMPTY
44006: PPUSH
44007: CALL_OW 1
44011: ST_TO_ADDR
// end ; if not IsOk ( i ) then
44012: LD_VAR 0 1
44016: PPUSH
44017: CALL_OW 302
44021: NOT
44022: IFFALSE 44035
// begin HackUnlinkAll ( i ) ;
44024: LD_VAR 0 1
44028: PPUSH
44029: CALL 44141 0 1
// continue ;
44033: GO 43915
// end ; HackCheckCapturedStatus ( i ) ;
44035: LD_VAR 0 1
44039: PPUSH
44040: CALL 44584 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
44044: LD_ADDR_VAR 0 2
44048: PUSH
44049: LD_INT 81
44051: PUSH
44052: LD_VAR 0 1
44056: PPUSH
44057: CALL_OW 255
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 33
44068: PUSH
44069: LD_INT 3
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 91
44078: PUSH
44079: LD_VAR 0 1
44083: PUSH
44084: LD_EXP 146
44088: PUSH
44089: EMPTY
44090: LIST
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 50
44096: PUSH
44097: EMPTY
44098: LIST
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: PPUSH
44106: CALL_OW 69
44110: ST_TO_ADDR
// if not tmp then
44111: LD_VAR 0 2
44115: NOT
44116: IFFALSE 44120
// continue ;
44118: GO 43915
// HackLink ( i , tmp ) ;
44120: LD_VAR 0 1
44124: PPUSH
44125: LD_VAR 0 2
44129: PPUSH
44130: CALL 44277 0 2
// end ;
44134: GO 43915
44136: POP
44137: POP
// end ;
44138: PPOPN 2
44140: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
44141: LD_INT 0
44143: PPUSH
44144: PPUSH
44145: PPUSH
// if not hack in hackTanks then
44146: LD_VAR 0 1
44150: PUSH
44151: LD_EXP 143
44155: IN
44156: NOT
44157: IFFALSE 44161
// exit ;
44159: GO 44272
// index := GetElementIndex ( hackTanks , hack ) ;
44161: LD_ADDR_VAR 0 4
44165: PUSH
44166: LD_EXP 143
44170: PPUSH
44171: LD_VAR 0 1
44175: PPUSH
44176: CALL 51706 0 2
44180: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
44181: LD_EXP 144
44185: PUSH
44186: LD_VAR 0 4
44190: ARRAY
44191: IFFALSE 44272
// begin for i in hackTanksCaptured [ index ] do
44193: LD_ADDR_VAR 0 3
44197: PUSH
44198: LD_EXP 144
44202: PUSH
44203: LD_VAR 0 4
44207: ARRAY
44208: PUSH
44209: FOR_IN
44210: IFFALSE 44236
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
44212: LD_VAR 0 3
44216: PUSH
44217: LD_INT 1
44219: ARRAY
44220: PPUSH
44221: LD_VAR 0 3
44225: PUSH
44226: LD_INT 2
44228: ARRAY
44229: PPUSH
44230: CALL_OW 235
44234: GO 44209
44236: POP
44237: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
44238: LD_ADDR_EXP 144
44242: PUSH
44243: LD_EXP 144
44247: PPUSH
44248: LD_VAR 0 4
44252: PPUSH
44253: EMPTY
44254: PPUSH
44255: CALL_OW 1
44259: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
44260: LD_VAR 0 1
44264: PPUSH
44265: LD_INT 0
44267: PPUSH
44268: CALL_OW 505
// end ; end ;
44272: LD_VAR 0 2
44276: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
44277: LD_INT 0
44279: PPUSH
44280: PPUSH
44281: PPUSH
// if not hack in hackTanks or not vehicles then
44282: LD_VAR 0 1
44286: PUSH
44287: LD_EXP 143
44291: IN
44292: NOT
44293: PUSH
44294: LD_VAR 0 2
44298: NOT
44299: OR
44300: IFFALSE 44304
// exit ;
44302: GO 44579
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
44304: LD_ADDR_VAR 0 2
44308: PUSH
44309: LD_VAR 0 1
44313: PPUSH
44314: LD_VAR 0 2
44318: PPUSH
44319: LD_INT 1
44321: PPUSH
44322: LD_INT 1
44324: PPUSH
44325: CALL 52356 0 4
44329: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
44330: LD_ADDR_VAR 0 5
44334: PUSH
44335: LD_EXP 143
44339: PPUSH
44340: LD_VAR 0 1
44344: PPUSH
44345: CALL 51706 0 2
44349: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
44350: LD_EXP 144
44354: PUSH
44355: LD_VAR 0 5
44359: ARRAY
44360: PUSH
44361: LD_EXP 145
44365: LESS
44366: IFFALSE 44555
// begin for i := 1 to vehicles do
44368: LD_ADDR_VAR 0 4
44372: PUSH
44373: DOUBLE
44374: LD_INT 1
44376: DEC
44377: ST_TO_ADDR
44378: LD_VAR 0 2
44382: PUSH
44383: FOR_TO
44384: IFFALSE 44553
// begin if hackTanksCaptured [ index ] = hackLimit then
44386: LD_EXP 144
44390: PUSH
44391: LD_VAR 0 5
44395: ARRAY
44396: PUSH
44397: LD_EXP 145
44401: EQUAL
44402: IFFALSE 44406
// break ;
44404: GO 44553
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
44406: LD_ADDR_EXP 147
44410: PUSH
44411: LD_EXP 147
44415: PPUSH
44416: LD_VAR 0 5
44420: PPUSH
44421: LD_EXP 147
44425: PUSH
44426: LD_VAR 0 5
44430: ARRAY
44431: PUSH
44432: LD_INT 1
44434: PLUS
44435: PPUSH
44436: CALL_OW 1
44440: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
44441: LD_ADDR_EXP 144
44445: PUSH
44446: LD_EXP 144
44450: PPUSH
44451: LD_VAR 0 5
44455: PUSH
44456: LD_EXP 144
44460: PUSH
44461: LD_VAR 0 5
44465: ARRAY
44466: PUSH
44467: LD_INT 1
44469: PLUS
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: PPUSH
44475: LD_VAR 0 2
44479: PUSH
44480: LD_VAR 0 4
44484: ARRAY
44485: PUSH
44486: LD_VAR 0 2
44490: PUSH
44491: LD_VAR 0 4
44495: ARRAY
44496: PPUSH
44497: CALL_OW 255
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PPUSH
44506: CALL 51921 0 3
44510: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
44511: LD_VAR 0 2
44515: PUSH
44516: LD_VAR 0 4
44520: ARRAY
44521: PPUSH
44522: LD_VAR 0 1
44526: PPUSH
44527: CALL_OW 255
44531: PPUSH
44532: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
44536: LD_VAR 0 2
44540: PUSH
44541: LD_VAR 0 4
44545: ARRAY
44546: PPUSH
44547: CALL_OW 141
// end ;
44551: GO 44383
44553: POP
44554: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44555: LD_VAR 0 1
44559: PPUSH
44560: LD_EXP 144
44564: PUSH
44565: LD_VAR 0 5
44569: ARRAY
44570: PUSH
44571: LD_INT 0
44573: PLUS
44574: PPUSH
44575: CALL_OW 505
// end ;
44579: LD_VAR 0 3
44583: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
44584: LD_INT 0
44586: PPUSH
44587: PPUSH
44588: PPUSH
44589: PPUSH
// if not hack in hackTanks then
44590: LD_VAR 0 1
44594: PUSH
44595: LD_EXP 143
44599: IN
44600: NOT
44601: IFFALSE 44605
// exit ;
44603: GO 44845
// index := GetElementIndex ( hackTanks , hack ) ;
44605: LD_ADDR_VAR 0 4
44609: PUSH
44610: LD_EXP 143
44614: PPUSH
44615: LD_VAR 0 1
44619: PPUSH
44620: CALL 51706 0 2
44624: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
44625: LD_ADDR_VAR 0 3
44629: PUSH
44630: DOUBLE
44631: LD_EXP 144
44635: PUSH
44636: LD_VAR 0 4
44640: ARRAY
44641: INC
44642: ST_TO_ADDR
44643: LD_INT 1
44645: PUSH
44646: FOR_DOWNTO
44647: IFFALSE 44819
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
44649: LD_ADDR_VAR 0 5
44653: PUSH
44654: LD_EXP 144
44658: PUSH
44659: LD_VAR 0 4
44663: ARRAY
44664: PUSH
44665: LD_VAR 0 3
44669: ARRAY
44670: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
44671: LD_VAR 0 5
44675: PUSH
44676: LD_INT 1
44678: ARRAY
44679: PPUSH
44680: CALL_OW 302
44684: NOT
44685: PUSH
44686: LD_VAR 0 5
44690: PUSH
44691: LD_INT 1
44693: ARRAY
44694: PPUSH
44695: CALL_OW 255
44699: PUSH
44700: LD_VAR 0 1
44704: PPUSH
44705: CALL_OW 255
44709: NONEQUAL
44710: OR
44711: IFFALSE 44817
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
44713: LD_VAR 0 5
44717: PUSH
44718: LD_INT 1
44720: ARRAY
44721: PPUSH
44722: CALL_OW 305
44726: PUSH
44727: LD_VAR 0 5
44731: PUSH
44732: LD_INT 1
44734: ARRAY
44735: PPUSH
44736: CALL_OW 255
44740: PUSH
44741: LD_VAR 0 1
44745: PPUSH
44746: CALL_OW 255
44750: EQUAL
44751: AND
44752: IFFALSE 44776
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
44754: LD_VAR 0 5
44758: PUSH
44759: LD_INT 1
44761: ARRAY
44762: PPUSH
44763: LD_VAR 0 5
44767: PUSH
44768: LD_INT 2
44770: ARRAY
44771: PPUSH
44772: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
44776: LD_ADDR_EXP 144
44780: PUSH
44781: LD_EXP 144
44785: PPUSH
44786: LD_VAR 0 4
44790: PPUSH
44791: LD_EXP 144
44795: PUSH
44796: LD_VAR 0 4
44800: ARRAY
44801: PPUSH
44802: LD_VAR 0 3
44806: PPUSH
44807: CALL_OW 3
44811: PPUSH
44812: CALL_OW 1
44816: ST_TO_ADDR
// end ; end ;
44817: GO 44646
44819: POP
44820: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44821: LD_VAR 0 1
44825: PPUSH
44826: LD_EXP 144
44830: PUSH
44831: LD_VAR 0 4
44835: ARRAY
44836: PUSH
44837: LD_INT 0
44839: PLUS
44840: PPUSH
44841: CALL_OW 505
// end ;
44845: LD_VAR 0 2
44849: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
44850: LD_INT 0
44852: PPUSH
44853: PPUSH
44854: PPUSH
44855: PPUSH
// if not hack in hackTanks then
44856: LD_VAR 0 1
44860: PUSH
44861: LD_EXP 143
44865: IN
44866: NOT
44867: IFFALSE 44871
// exit ;
44869: GO 44956
// index := GetElementIndex ( hackTanks , hack ) ;
44871: LD_ADDR_VAR 0 5
44875: PUSH
44876: LD_EXP 143
44880: PPUSH
44881: LD_VAR 0 1
44885: PPUSH
44886: CALL 51706 0 2
44890: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
44891: LD_ADDR_VAR 0 4
44895: PUSH
44896: DOUBLE
44897: LD_INT 1
44899: DEC
44900: ST_TO_ADDR
44901: LD_EXP 144
44905: PUSH
44906: LD_VAR 0 5
44910: ARRAY
44911: PUSH
44912: FOR_TO
44913: IFFALSE 44954
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
44915: LD_EXP 144
44919: PUSH
44920: LD_VAR 0 5
44924: ARRAY
44925: PUSH
44926: LD_VAR 0 4
44930: ARRAY
44931: PUSH
44932: LD_INT 1
44934: ARRAY
44935: PUSH
44936: LD_VAR 0 2
44940: EQUAL
44941: IFFALSE 44952
// KillUnit ( vehicle ) ;
44943: LD_VAR 0 2
44947: PPUSH
44948: CALL_OW 66
44952: GO 44912
44954: POP
44955: POP
// end ;
44956: LD_VAR 0 3
44960: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
44961: LD_EXP 148
44965: NOT
44966: IFFALSE 45001
44968: GO 44970
44970: DISABLE
// begin initMiner := true ;
44971: LD_ADDR_EXP 148
44975: PUSH
44976: LD_INT 1
44978: ST_TO_ADDR
// minersList := [ ] ;
44979: LD_ADDR_EXP 149
44983: PUSH
44984: EMPTY
44985: ST_TO_ADDR
// minerMinesList := [ ] ;
44986: LD_ADDR_EXP 150
44990: PUSH
44991: EMPTY
44992: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
44993: LD_ADDR_EXP 151
44997: PUSH
44998: LD_INT 5
45000: ST_TO_ADDR
// end ;
45001: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
45002: LD_EXP 148
45006: PUSH
45007: LD_INT 34
45009: PUSH
45010: LD_EXP 76
45014: PUSH
45015: EMPTY
45016: LIST
45017: LIST
45018: PPUSH
45019: CALL_OW 69
45023: AND
45024: IFFALSE 45487
45026: GO 45028
45028: DISABLE
45029: LD_INT 0
45031: PPUSH
45032: PPUSH
45033: PPUSH
45034: PPUSH
// begin enable ;
45035: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
45036: LD_ADDR_VAR 0 1
45040: PUSH
45041: LD_INT 34
45043: PUSH
45044: LD_EXP 76
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PPUSH
45053: CALL_OW 69
45057: PUSH
45058: FOR_IN
45059: IFFALSE 45131
// begin if not i in minersList then
45061: LD_VAR 0 1
45065: PUSH
45066: LD_EXP 149
45070: IN
45071: NOT
45072: IFFALSE 45129
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
45074: LD_ADDR_EXP 149
45078: PUSH
45079: LD_EXP 149
45083: PPUSH
45084: LD_EXP 149
45088: PUSH
45089: LD_INT 1
45091: PLUS
45092: PPUSH
45093: LD_VAR 0 1
45097: PPUSH
45098: CALL_OW 1
45102: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
45103: LD_ADDR_EXP 150
45107: PUSH
45108: LD_EXP 150
45112: PPUSH
45113: LD_EXP 150
45117: PUSH
45118: LD_INT 1
45120: PLUS
45121: PPUSH
45122: EMPTY
45123: PPUSH
45124: CALL_OW 1
45128: ST_TO_ADDR
// end end ;
45129: GO 45058
45131: POP
45132: POP
// for i := minerMinesList downto 1 do
45133: LD_ADDR_VAR 0 1
45137: PUSH
45138: DOUBLE
45139: LD_EXP 150
45143: INC
45144: ST_TO_ADDR
45145: LD_INT 1
45147: PUSH
45148: FOR_DOWNTO
45149: IFFALSE 45485
// begin if IsLive ( minersList [ i ] ) then
45151: LD_EXP 149
45155: PUSH
45156: LD_VAR 0 1
45160: ARRAY
45161: PPUSH
45162: CALL_OW 300
45166: IFFALSE 45194
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
45168: LD_EXP 149
45172: PUSH
45173: LD_VAR 0 1
45177: ARRAY
45178: PPUSH
45179: LD_EXP 150
45183: PUSH
45184: LD_VAR 0 1
45188: ARRAY
45189: PPUSH
45190: CALL_OW 505
// if not minerMinesList [ i ] then
45194: LD_EXP 150
45198: PUSH
45199: LD_VAR 0 1
45203: ARRAY
45204: NOT
45205: IFFALSE 45209
// continue ;
45207: GO 45148
// for j := minerMinesList [ i ] downto 1 do
45209: LD_ADDR_VAR 0 2
45213: PUSH
45214: DOUBLE
45215: LD_EXP 150
45219: PUSH
45220: LD_VAR 0 1
45224: ARRAY
45225: INC
45226: ST_TO_ADDR
45227: LD_INT 1
45229: PUSH
45230: FOR_DOWNTO
45231: IFFALSE 45481
// begin side := GetSide ( minersList [ i ] ) ;
45233: LD_ADDR_VAR 0 3
45237: PUSH
45238: LD_EXP 149
45242: PUSH
45243: LD_VAR 0 1
45247: ARRAY
45248: PPUSH
45249: CALL_OW 255
45253: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
45254: LD_ADDR_VAR 0 4
45258: PUSH
45259: LD_EXP 150
45263: PUSH
45264: LD_VAR 0 1
45268: ARRAY
45269: PUSH
45270: LD_VAR 0 2
45274: ARRAY
45275: PUSH
45276: LD_INT 1
45278: ARRAY
45279: PPUSH
45280: LD_EXP 150
45284: PUSH
45285: LD_VAR 0 1
45289: ARRAY
45290: PUSH
45291: LD_VAR 0 2
45295: ARRAY
45296: PUSH
45297: LD_INT 2
45299: ARRAY
45300: PPUSH
45301: CALL_OW 428
45305: ST_TO_ADDR
// if not tmp then
45306: LD_VAR 0 4
45310: NOT
45311: IFFALSE 45315
// continue ;
45313: GO 45230
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
45315: LD_VAR 0 4
45319: PUSH
45320: LD_INT 81
45322: PUSH
45323: LD_VAR 0 3
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PPUSH
45332: CALL_OW 69
45336: IN
45337: PUSH
45338: LD_EXP 150
45342: PUSH
45343: LD_VAR 0 1
45347: ARRAY
45348: PUSH
45349: LD_VAR 0 2
45353: ARRAY
45354: PUSH
45355: LD_INT 1
45357: ARRAY
45358: PPUSH
45359: LD_EXP 150
45363: PUSH
45364: LD_VAR 0 1
45368: ARRAY
45369: PUSH
45370: LD_VAR 0 2
45374: ARRAY
45375: PUSH
45376: LD_INT 2
45378: ARRAY
45379: PPUSH
45380: CALL_OW 458
45384: AND
45385: IFFALSE 45479
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
45387: LD_EXP 150
45391: PUSH
45392: LD_VAR 0 1
45396: ARRAY
45397: PUSH
45398: LD_VAR 0 2
45402: ARRAY
45403: PUSH
45404: LD_INT 1
45406: ARRAY
45407: PPUSH
45408: LD_EXP 150
45412: PUSH
45413: LD_VAR 0 1
45417: ARRAY
45418: PUSH
45419: LD_VAR 0 2
45423: ARRAY
45424: PUSH
45425: LD_INT 2
45427: ARRAY
45428: PPUSH
45429: LD_VAR 0 3
45433: PPUSH
45434: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
45438: LD_ADDR_EXP 150
45442: PUSH
45443: LD_EXP 150
45447: PPUSH
45448: LD_VAR 0 1
45452: PPUSH
45453: LD_EXP 150
45457: PUSH
45458: LD_VAR 0 1
45462: ARRAY
45463: PPUSH
45464: LD_VAR 0 2
45468: PPUSH
45469: CALL_OW 3
45473: PPUSH
45474: CALL_OW 1
45478: ST_TO_ADDR
// end ; end ;
45479: GO 45230
45481: POP
45482: POP
// end ;
45483: GO 45148
45485: POP
45486: POP
// end ;
45487: PPOPN 4
45489: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
45490: LD_INT 0
45492: PPUSH
45493: PPUSH
// result := false ;
45494: LD_ADDR_VAR 0 4
45498: PUSH
45499: LD_INT 0
45501: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
45502: LD_VAR 0 1
45506: PPUSH
45507: CALL_OW 264
45511: PUSH
45512: LD_EXP 76
45516: EQUAL
45517: NOT
45518: IFFALSE 45522
// exit ;
45520: GO 45762
// index := GetElementIndex ( minersList , unit ) ;
45522: LD_ADDR_VAR 0 5
45526: PUSH
45527: LD_EXP 149
45531: PPUSH
45532: LD_VAR 0 1
45536: PPUSH
45537: CALL 51706 0 2
45541: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
45542: LD_EXP 150
45546: PUSH
45547: LD_VAR 0 5
45551: ARRAY
45552: PUSH
45553: LD_EXP 151
45557: GREATEREQUAL
45558: IFFALSE 45562
// exit ;
45560: GO 45762
// ComMoveXY ( unit , x , y ) ;
45562: LD_VAR 0 1
45566: PPUSH
45567: LD_VAR 0 2
45571: PPUSH
45572: LD_VAR 0 3
45576: PPUSH
45577: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45581: LD_INT 35
45583: PPUSH
45584: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
45588: LD_VAR 0 1
45592: PPUSH
45593: LD_VAR 0 2
45597: PPUSH
45598: LD_VAR 0 3
45602: PPUSH
45603: CALL 81770 0 3
45607: NOT
45608: PUSH
45609: LD_VAR 0 1
45613: PPUSH
45614: CALL_OW 314
45618: AND
45619: IFFALSE 45623
// exit ;
45621: GO 45762
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
45623: LD_VAR 0 2
45627: PPUSH
45628: LD_VAR 0 3
45632: PPUSH
45633: CALL_OW 428
45637: PUSH
45638: LD_VAR 0 1
45642: EQUAL
45643: PUSH
45644: LD_VAR 0 1
45648: PPUSH
45649: CALL_OW 314
45653: NOT
45654: AND
45655: IFFALSE 45581
// PlaySoundXY ( x , y , PlantMine ) ;
45657: LD_VAR 0 2
45661: PPUSH
45662: LD_VAR 0 3
45666: PPUSH
45667: LD_STRING PlantMine
45669: PPUSH
45670: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
45674: LD_VAR 0 2
45678: PPUSH
45679: LD_VAR 0 3
45683: PPUSH
45684: LD_VAR 0 1
45688: PPUSH
45689: CALL_OW 255
45693: PPUSH
45694: LD_INT 0
45696: PPUSH
45697: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
45701: LD_ADDR_EXP 150
45705: PUSH
45706: LD_EXP 150
45710: PPUSH
45711: LD_VAR 0 5
45715: PUSH
45716: LD_EXP 150
45720: PUSH
45721: LD_VAR 0 5
45725: ARRAY
45726: PUSH
45727: LD_INT 1
45729: PLUS
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PPUSH
45735: LD_VAR 0 2
45739: PUSH
45740: LD_VAR 0 3
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PPUSH
45749: CALL 51921 0 3
45753: ST_TO_ADDR
// result := true ;
45754: LD_ADDR_VAR 0 4
45758: PUSH
45759: LD_INT 1
45761: ST_TO_ADDR
// end ;
45762: LD_VAR 0 4
45766: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
45767: LD_INT 0
45769: PPUSH
45770: PPUSH
45771: PPUSH
// if not unit in minersList then
45772: LD_VAR 0 1
45776: PUSH
45777: LD_EXP 149
45781: IN
45782: NOT
45783: IFFALSE 45787
// exit ;
45785: GO 46179
// index := GetElementIndex ( minersList , unit ) ;
45787: LD_ADDR_VAR 0 6
45791: PUSH
45792: LD_EXP 149
45796: PPUSH
45797: LD_VAR 0 1
45801: PPUSH
45802: CALL 51706 0 2
45806: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
45807: LD_ADDR_VAR 0 5
45811: PUSH
45812: DOUBLE
45813: LD_EXP 150
45817: PUSH
45818: LD_VAR 0 6
45822: ARRAY
45823: INC
45824: ST_TO_ADDR
45825: LD_INT 1
45827: PUSH
45828: FOR_DOWNTO
45829: IFFALSE 45990
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
45831: LD_EXP 150
45835: PUSH
45836: LD_VAR 0 6
45840: ARRAY
45841: PUSH
45842: LD_VAR 0 5
45846: ARRAY
45847: PUSH
45848: LD_INT 1
45850: ARRAY
45851: PUSH
45852: LD_VAR 0 2
45856: EQUAL
45857: PUSH
45858: LD_EXP 150
45862: PUSH
45863: LD_VAR 0 6
45867: ARRAY
45868: PUSH
45869: LD_VAR 0 5
45873: ARRAY
45874: PUSH
45875: LD_INT 2
45877: ARRAY
45878: PUSH
45879: LD_VAR 0 3
45883: EQUAL
45884: AND
45885: IFFALSE 45988
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45887: LD_EXP 150
45891: PUSH
45892: LD_VAR 0 6
45896: ARRAY
45897: PUSH
45898: LD_VAR 0 5
45902: ARRAY
45903: PUSH
45904: LD_INT 1
45906: ARRAY
45907: PPUSH
45908: LD_EXP 150
45912: PUSH
45913: LD_VAR 0 6
45917: ARRAY
45918: PUSH
45919: LD_VAR 0 5
45923: ARRAY
45924: PUSH
45925: LD_INT 2
45927: ARRAY
45928: PPUSH
45929: LD_VAR 0 1
45933: PPUSH
45934: CALL_OW 255
45938: PPUSH
45939: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45943: LD_ADDR_EXP 150
45947: PUSH
45948: LD_EXP 150
45952: PPUSH
45953: LD_VAR 0 6
45957: PPUSH
45958: LD_EXP 150
45962: PUSH
45963: LD_VAR 0 6
45967: ARRAY
45968: PPUSH
45969: LD_VAR 0 5
45973: PPUSH
45974: CALL_OW 3
45978: PPUSH
45979: CALL_OW 1
45983: ST_TO_ADDR
// exit ;
45984: POP
45985: POP
45986: GO 46179
// end ; end ;
45988: GO 45828
45990: POP
45991: POP
// for i := minerMinesList [ index ] downto 1 do
45992: LD_ADDR_VAR 0 5
45996: PUSH
45997: DOUBLE
45998: LD_EXP 150
46002: PUSH
46003: LD_VAR 0 6
46007: ARRAY
46008: INC
46009: ST_TO_ADDR
46010: LD_INT 1
46012: PUSH
46013: FOR_DOWNTO
46014: IFFALSE 46177
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
46016: LD_EXP 150
46020: PUSH
46021: LD_VAR 0 6
46025: ARRAY
46026: PUSH
46027: LD_VAR 0 5
46031: ARRAY
46032: PUSH
46033: LD_INT 1
46035: ARRAY
46036: PPUSH
46037: LD_EXP 150
46041: PUSH
46042: LD_VAR 0 6
46046: ARRAY
46047: PUSH
46048: LD_VAR 0 5
46052: ARRAY
46053: PUSH
46054: LD_INT 2
46056: ARRAY
46057: PPUSH
46058: LD_VAR 0 2
46062: PPUSH
46063: LD_VAR 0 3
46067: PPUSH
46068: CALL_OW 298
46072: PUSH
46073: LD_INT 6
46075: LESS
46076: IFFALSE 46175
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46078: LD_EXP 150
46082: PUSH
46083: LD_VAR 0 6
46087: ARRAY
46088: PUSH
46089: LD_VAR 0 5
46093: ARRAY
46094: PUSH
46095: LD_INT 1
46097: ARRAY
46098: PPUSH
46099: LD_EXP 150
46103: PUSH
46104: LD_VAR 0 6
46108: ARRAY
46109: PUSH
46110: LD_VAR 0 5
46114: ARRAY
46115: PUSH
46116: LD_INT 2
46118: ARRAY
46119: PPUSH
46120: LD_VAR 0 1
46124: PPUSH
46125: CALL_OW 255
46129: PPUSH
46130: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46134: LD_ADDR_EXP 150
46138: PUSH
46139: LD_EXP 150
46143: PPUSH
46144: LD_VAR 0 6
46148: PPUSH
46149: LD_EXP 150
46153: PUSH
46154: LD_VAR 0 6
46158: ARRAY
46159: PPUSH
46160: LD_VAR 0 5
46164: PPUSH
46165: CALL_OW 3
46169: PPUSH
46170: CALL_OW 1
46174: ST_TO_ADDR
// end ; end ;
46175: GO 46013
46177: POP
46178: POP
// end ;
46179: LD_VAR 0 4
46183: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
46184: LD_INT 0
46186: PPUSH
46187: PPUSH
46188: PPUSH
46189: PPUSH
46190: PPUSH
46191: PPUSH
46192: PPUSH
46193: PPUSH
46194: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
46195: LD_VAR 0 1
46199: PPUSH
46200: CALL_OW 264
46204: PUSH
46205: LD_EXP 76
46209: EQUAL
46210: NOT
46211: PUSH
46212: LD_VAR 0 1
46216: PUSH
46217: LD_EXP 149
46221: IN
46222: NOT
46223: OR
46224: IFFALSE 46228
// exit ;
46226: GO 46550
// index := GetElementIndex ( minersList , unit ) ;
46228: LD_ADDR_VAR 0 6
46232: PUSH
46233: LD_EXP 149
46237: PPUSH
46238: LD_VAR 0 1
46242: PPUSH
46243: CALL 51706 0 2
46247: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
46248: LD_ADDR_VAR 0 8
46252: PUSH
46253: LD_EXP 151
46257: PUSH
46258: LD_EXP 150
46262: PUSH
46263: LD_VAR 0 6
46267: ARRAY
46268: MINUS
46269: ST_TO_ADDR
// if not minesFreeAmount then
46270: LD_VAR 0 8
46274: NOT
46275: IFFALSE 46279
// exit ;
46277: GO 46550
// tmp := [ ] ;
46279: LD_ADDR_VAR 0 7
46283: PUSH
46284: EMPTY
46285: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
46286: LD_ADDR_VAR 0 5
46290: PUSH
46291: DOUBLE
46292: LD_INT 1
46294: DEC
46295: ST_TO_ADDR
46296: LD_VAR 0 8
46300: PUSH
46301: FOR_TO
46302: IFFALSE 46497
// begin _d := rand ( 0 , 5 ) ;
46304: LD_ADDR_VAR 0 11
46308: PUSH
46309: LD_INT 0
46311: PPUSH
46312: LD_INT 5
46314: PPUSH
46315: CALL_OW 12
46319: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
46320: LD_ADDR_VAR 0 12
46324: PUSH
46325: LD_INT 2
46327: PPUSH
46328: LD_INT 6
46330: PPUSH
46331: CALL_OW 12
46335: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
46336: LD_ADDR_VAR 0 9
46340: PUSH
46341: LD_VAR 0 2
46345: PPUSH
46346: LD_VAR 0 11
46350: PPUSH
46351: LD_VAR 0 12
46355: PPUSH
46356: CALL_OW 272
46360: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
46361: LD_ADDR_VAR 0 10
46365: PUSH
46366: LD_VAR 0 3
46370: PPUSH
46371: LD_VAR 0 11
46375: PPUSH
46376: LD_VAR 0 12
46380: PPUSH
46381: CALL_OW 273
46385: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
46386: LD_VAR 0 9
46390: PPUSH
46391: LD_VAR 0 10
46395: PPUSH
46396: CALL_OW 488
46400: PUSH
46401: LD_VAR 0 9
46405: PUSH
46406: LD_VAR 0 10
46410: PUSH
46411: EMPTY
46412: LIST
46413: LIST
46414: PUSH
46415: LD_VAR 0 7
46419: IN
46420: NOT
46421: AND
46422: PUSH
46423: LD_VAR 0 9
46427: PPUSH
46428: LD_VAR 0 10
46432: PPUSH
46433: CALL_OW 458
46437: NOT
46438: AND
46439: IFFALSE 46481
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
46441: LD_ADDR_VAR 0 7
46445: PUSH
46446: LD_VAR 0 7
46450: PPUSH
46451: LD_VAR 0 7
46455: PUSH
46456: LD_INT 1
46458: PLUS
46459: PPUSH
46460: LD_VAR 0 9
46464: PUSH
46465: LD_VAR 0 10
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PPUSH
46474: CALL_OW 1
46478: ST_TO_ADDR
46479: GO 46495
// i := i - 1 ;
46481: LD_ADDR_VAR 0 5
46485: PUSH
46486: LD_VAR 0 5
46490: PUSH
46491: LD_INT 1
46493: MINUS
46494: ST_TO_ADDR
// end ;
46495: GO 46301
46497: POP
46498: POP
// for i in tmp do
46499: LD_ADDR_VAR 0 5
46503: PUSH
46504: LD_VAR 0 7
46508: PUSH
46509: FOR_IN
46510: IFFALSE 46548
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
46512: LD_VAR 0 1
46516: PPUSH
46517: LD_VAR 0 5
46521: PUSH
46522: LD_INT 1
46524: ARRAY
46525: PPUSH
46526: LD_VAR 0 5
46530: PUSH
46531: LD_INT 2
46533: ARRAY
46534: PPUSH
46535: CALL 45490 0 3
46539: NOT
46540: IFFALSE 46546
// exit ;
46542: POP
46543: POP
46544: GO 46550
46546: GO 46509
46548: POP
46549: POP
// end ;
46550: LD_VAR 0 4
46554: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
46555: LD_INT 0
46557: PPUSH
46558: PPUSH
46559: PPUSH
46560: PPUSH
46561: PPUSH
46562: PPUSH
46563: PPUSH
// if not GetClass ( unit ) = class_sniper then
46564: LD_VAR 0 1
46568: PPUSH
46569: CALL_OW 257
46573: PUSH
46574: LD_INT 5
46576: EQUAL
46577: NOT
46578: IFFALSE 46582
// exit ;
46580: GO 46970
// dist := 8 ;
46582: LD_ADDR_VAR 0 5
46586: PUSH
46587: LD_INT 8
46589: ST_TO_ADDR
// viewRange := 12 ;
46590: LD_ADDR_VAR 0 7
46594: PUSH
46595: LD_INT 12
46597: ST_TO_ADDR
// side := GetSide ( unit ) ;
46598: LD_ADDR_VAR 0 6
46602: PUSH
46603: LD_VAR 0 1
46607: PPUSH
46608: CALL_OW 255
46612: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
46613: LD_INT 61
46615: PPUSH
46616: LD_VAR 0 6
46620: PPUSH
46621: CALL_OW 321
46625: PUSH
46626: LD_INT 2
46628: EQUAL
46629: IFFALSE 46639
// viewRange := 16 ;
46631: LD_ADDR_VAR 0 7
46635: PUSH
46636: LD_INT 16
46638: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
46639: LD_VAR 0 1
46643: PPUSH
46644: LD_VAR 0 2
46648: PPUSH
46649: LD_VAR 0 3
46653: PPUSH
46654: CALL_OW 297
46658: PUSH
46659: LD_VAR 0 5
46663: GREATER
46664: IFFALSE 46743
// begin ComMoveXY ( unit , x , y ) ;
46666: LD_VAR 0 1
46670: PPUSH
46671: LD_VAR 0 2
46675: PPUSH
46676: LD_VAR 0 3
46680: PPUSH
46681: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
46685: LD_INT 35
46687: PPUSH
46688: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
46692: LD_VAR 0 1
46696: PPUSH
46697: LD_VAR 0 2
46701: PPUSH
46702: LD_VAR 0 3
46706: PPUSH
46707: CALL 81770 0 3
46711: NOT
46712: IFFALSE 46716
// exit ;
46714: GO 46970
// until GetDistUnitXY ( unit , x , y ) < dist ;
46716: LD_VAR 0 1
46720: PPUSH
46721: LD_VAR 0 2
46725: PPUSH
46726: LD_VAR 0 3
46730: PPUSH
46731: CALL_OW 297
46735: PUSH
46736: LD_VAR 0 5
46740: LESS
46741: IFFALSE 46685
// end ; ComTurnXY ( unit , x , y ) ;
46743: LD_VAR 0 1
46747: PPUSH
46748: LD_VAR 0 2
46752: PPUSH
46753: LD_VAR 0 3
46757: PPUSH
46758: CALL_OW 118
// wait ( 5 ) ;
46762: LD_INT 5
46764: PPUSH
46765: CALL_OW 67
// _d := GetDir ( unit ) ;
46769: LD_ADDR_VAR 0 10
46773: PUSH
46774: LD_VAR 0 1
46778: PPUSH
46779: CALL_OW 254
46783: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
46784: LD_ADDR_VAR 0 8
46788: PUSH
46789: LD_VAR 0 1
46793: PPUSH
46794: CALL_OW 250
46798: PPUSH
46799: LD_VAR 0 10
46803: PPUSH
46804: LD_VAR 0 5
46808: PPUSH
46809: CALL_OW 272
46813: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
46814: LD_ADDR_VAR 0 9
46818: PUSH
46819: LD_VAR 0 1
46823: PPUSH
46824: CALL_OW 251
46828: PPUSH
46829: LD_VAR 0 10
46833: PPUSH
46834: LD_VAR 0 5
46838: PPUSH
46839: CALL_OW 273
46843: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46844: LD_VAR 0 8
46848: PPUSH
46849: LD_VAR 0 9
46853: PPUSH
46854: CALL_OW 488
46858: NOT
46859: IFFALSE 46863
// exit ;
46861: GO 46970
// ComAnimCustom ( unit , 1 ) ;
46863: LD_VAR 0 1
46867: PPUSH
46868: LD_INT 1
46870: PPUSH
46871: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
46875: LD_VAR 0 8
46879: PPUSH
46880: LD_VAR 0 9
46884: PPUSH
46885: LD_VAR 0 6
46889: PPUSH
46890: LD_VAR 0 7
46894: PPUSH
46895: CALL_OW 330
// repeat wait ( 1 ) ;
46899: LD_INT 1
46901: PPUSH
46902: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
46906: LD_VAR 0 1
46910: PPUSH
46911: CALL_OW 316
46915: PUSH
46916: LD_VAR 0 1
46920: PPUSH
46921: CALL_OW 314
46925: OR
46926: PUSH
46927: LD_VAR 0 1
46931: PPUSH
46932: CALL_OW 302
46936: NOT
46937: OR
46938: PUSH
46939: LD_VAR 0 1
46943: PPUSH
46944: CALL_OW 301
46948: OR
46949: IFFALSE 46899
// RemoveSeeing ( _x , _y , side ) ;
46951: LD_VAR 0 8
46955: PPUSH
46956: LD_VAR 0 9
46960: PPUSH
46961: LD_VAR 0 6
46965: PPUSH
46966: CALL_OW 331
// end ; end_of_file
46970: LD_VAR 0 4
46974: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
46975: LD_INT 0
46977: PPUSH
46978: PPUSH
// if exist_mode then
46979: LD_VAR 0 2
46983: IFFALSE 47008
// unit := CreateCharacter ( prefix & ident ) else
46985: LD_ADDR_VAR 0 5
46989: PUSH
46990: LD_VAR 0 3
46994: PUSH
46995: LD_VAR 0 1
46999: STR
47000: PPUSH
47001: CALL_OW 34
47005: ST_TO_ADDR
47006: GO 47023
// unit := NewCharacter ( ident ) ;
47008: LD_ADDR_VAR 0 5
47012: PUSH
47013: LD_VAR 0 1
47017: PPUSH
47018: CALL_OW 25
47022: ST_TO_ADDR
// result := unit ;
47023: LD_ADDR_VAR 0 4
47027: PUSH
47028: LD_VAR 0 5
47032: ST_TO_ADDR
// end ;
47033: LD_VAR 0 4
47037: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
47038: LD_INT 0
47040: PPUSH
47041: PPUSH
// if not side or not nation then
47042: LD_VAR 0 1
47046: NOT
47047: PUSH
47048: LD_VAR 0 2
47052: NOT
47053: OR
47054: IFFALSE 47058
// exit ;
47056: GO 47822
// case nation of nation_american :
47058: LD_VAR 0 2
47062: PUSH
47063: LD_INT 1
47065: DOUBLE
47066: EQUAL
47067: IFTRUE 47071
47069: GO 47285
47071: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
47072: LD_ADDR_VAR 0 4
47076: PUSH
47077: LD_INT 35
47079: PUSH
47080: LD_INT 45
47082: PUSH
47083: LD_INT 46
47085: PUSH
47086: LD_INT 47
47088: PUSH
47089: LD_INT 82
47091: PUSH
47092: LD_INT 83
47094: PUSH
47095: LD_INT 84
47097: PUSH
47098: LD_INT 85
47100: PUSH
47101: LD_INT 86
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: LD_INT 2
47109: PUSH
47110: LD_INT 6
47112: PUSH
47113: LD_INT 15
47115: PUSH
47116: LD_INT 16
47118: PUSH
47119: LD_INT 7
47121: PUSH
47122: LD_INT 12
47124: PUSH
47125: LD_INT 13
47127: PUSH
47128: LD_INT 10
47130: PUSH
47131: LD_INT 14
47133: PUSH
47134: LD_INT 20
47136: PUSH
47137: LD_INT 21
47139: PUSH
47140: LD_INT 22
47142: PUSH
47143: LD_INT 25
47145: PUSH
47146: LD_INT 32
47148: PUSH
47149: LD_INT 27
47151: PUSH
47152: LD_INT 36
47154: PUSH
47155: LD_INT 69
47157: PUSH
47158: LD_INT 39
47160: PUSH
47161: LD_INT 34
47163: PUSH
47164: LD_INT 40
47166: PUSH
47167: LD_INT 48
47169: PUSH
47170: LD_INT 49
47172: PUSH
47173: LD_INT 50
47175: PUSH
47176: LD_INT 51
47178: PUSH
47179: LD_INT 52
47181: PUSH
47182: LD_INT 53
47184: PUSH
47185: LD_INT 54
47187: PUSH
47188: LD_INT 55
47190: PUSH
47191: LD_INT 56
47193: PUSH
47194: LD_INT 57
47196: PUSH
47197: LD_INT 58
47199: PUSH
47200: LD_INT 59
47202: PUSH
47203: LD_INT 60
47205: PUSH
47206: LD_INT 61
47208: PUSH
47209: LD_INT 62
47211: PUSH
47212: LD_INT 80
47214: PUSH
47215: LD_INT 82
47217: PUSH
47218: LD_INT 83
47220: PUSH
47221: LD_INT 84
47223: PUSH
47224: LD_INT 85
47226: PUSH
47227: LD_INT 86
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: LIST
47252: LIST
47253: LIST
47254: LIST
47255: LIST
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: ST_TO_ADDR
47283: GO 47746
47285: LD_INT 2
47287: DOUBLE
47288: EQUAL
47289: IFTRUE 47293
47291: GO 47515
47293: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
47294: LD_ADDR_VAR 0 4
47298: PUSH
47299: LD_INT 35
47301: PUSH
47302: LD_INT 45
47304: PUSH
47305: LD_INT 46
47307: PUSH
47308: LD_INT 47
47310: PUSH
47311: LD_INT 82
47313: PUSH
47314: LD_INT 83
47316: PUSH
47317: LD_INT 84
47319: PUSH
47320: LD_INT 85
47322: PUSH
47323: LD_INT 87
47325: PUSH
47326: LD_INT 70
47328: PUSH
47329: LD_INT 1
47331: PUSH
47332: LD_INT 11
47334: PUSH
47335: LD_INT 3
47337: PUSH
47338: LD_INT 4
47340: PUSH
47341: LD_INT 5
47343: PUSH
47344: LD_INT 6
47346: PUSH
47347: LD_INT 15
47349: PUSH
47350: LD_INT 18
47352: PUSH
47353: LD_INT 7
47355: PUSH
47356: LD_INT 17
47358: PUSH
47359: LD_INT 8
47361: PUSH
47362: LD_INT 20
47364: PUSH
47365: LD_INT 21
47367: PUSH
47368: LD_INT 22
47370: PUSH
47371: LD_INT 72
47373: PUSH
47374: LD_INT 26
47376: PUSH
47377: LD_INT 69
47379: PUSH
47380: LD_INT 39
47382: PUSH
47383: LD_INT 40
47385: PUSH
47386: LD_INT 41
47388: PUSH
47389: LD_INT 42
47391: PUSH
47392: LD_INT 43
47394: PUSH
47395: LD_INT 48
47397: PUSH
47398: LD_INT 49
47400: PUSH
47401: LD_INT 50
47403: PUSH
47404: LD_INT 51
47406: PUSH
47407: LD_INT 52
47409: PUSH
47410: LD_INT 53
47412: PUSH
47413: LD_INT 54
47415: PUSH
47416: LD_INT 55
47418: PUSH
47419: LD_INT 56
47421: PUSH
47422: LD_INT 60
47424: PUSH
47425: LD_INT 61
47427: PUSH
47428: LD_INT 62
47430: PUSH
47431: LD_INT 66
47433: PUSH
47434: LD_INT 67
47436: PUSH
47437: LD_INT 68
47439: PUSH
47440: LD_INT 81
47442: PUSH
47443: LD_INT 82
47445: PUSH
47446: LD_INT 83
47448: PUSH
47449: LD_INT 84
47451: PUSH
47452: LD_INT 85
47454: PUSH
47455: LD_INT 87
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: LIST
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: LIST
47482: LIST
47483: LIST
47484: LIST
47485: LIST
47486: LIST
47487: LIST
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: ST_TO_ADDR
47513: GO 47746
47515: LD_INT 3
47517: DOUBLE
47518: EQUAL
47519: IFTRUE 47523
47521: GO 47745
47523: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
47524: LD_ADDR_VAR 0 4
47528: PUSH
47529: LD_INT 46
47531: PUSH
47532: LD_INT 47
47534: PUSH
47535: LD_INT 1
47537: PUSH
47538: LD_INT 2
47540: PUSH
47541: LD_INT 82
47543: PUSH
47544: LD_INT 83
47546: PUSH
47547: LD_INT 84
47549: PUSH
47550: LD_INT 85
47552: PUSH
47553: LD_INT 86
47555: PUSH
47556: LD_INT 11
47558: PUSH
47559: LD_INT 9
47561: PUSH
47562: LD_INT 20
47564: PUSH
47565: LD_INT 19
47567: PUSH
47568: LD_INT 21
47570: PUSH
47571: LD_INT 24
47573: PUSH
47574: LD_INT 22
47576: PUSH
47577: LD_INT 25
47579: PUSH
47580: LD_INT 28
47582: PUSH
47583: LD_INT 29
47585: PUSH
47586: LD_INT 30
47588: PUSH
47589: LD_INT 31
47591: PUSH
47592: LD_INT 37
47594: PUSH
47595: LD_INT 38
47597: PUSH
47598: LD_INT 32
47600: PUSH
47601: LD_INT 27
47603: PUSH
47604: LD_INT 33
47606: PUSH
47607: LD_INT 69
47609: PUSH
47610: LD_INT 39
47612: PUSH
47613: LD_INT 34
47615: PUSH
47616: LD_INT 40
47618: PUSH
47619: LD_INT 71
47621: PUSH
47622: LD_INT 23
47624: PUSH
47625: LD_INT 44
47627: PUSH
47628: LD_INT 48
47630: PUSH
47631: LD_INT 49
47633: PUSH
47634: LD_INT 50
47636: PUSH
47637: LD_INT 51
47639: PUSH
47640: LD_INT 52
47642: PUSH
47643: LD_INT 53
47645: PUSH
47646: LD_INT 54
47648: PUSH
47649: LD_INT 55
47651: PUSH
47652: LD_INT 56
47654: PUSH
47655: LD_INT 57
47657: PUSH
47658: LD_INT 58
47660: PUSH
47661: LD_INT 59
47663: PUSH
47664: LD_INT 63
47666: PUSH
47667: LD_INT 64
47669: PUSH
47670: LD_INT 65
47672: PUSH
47673: LD_INT 82
47675: PUSH
47676: LD_INT 83
47678: PUSH
47679: LD_INT 84
47681: PUSH
47682: LD_INT 85
47684: PUSH
47685: LD_INT 86
47687: PUSH
47688: EMPTY
47689: LIST
47690: LIST
47691: LIST
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: LIST
47712: LIST
47713: LIST
47714: LIST
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: ST_TO_ADDR
47743: GO 47746
47745: POP
// if state > - 1 and state < 3 then
47746: LD_VAR 0 3
47750: PUSH
47751: LD_INT 1
47753: NEG
47754: GREATER
47755: PUSH
47756: LD_VAR 0 3
47760: PUSH
47761: LD_INT 3
47763: LESS
47764: AND
47765: IFFALSE 47822
// for i in result do
47767: LD_ADDR_VAR 0 5
47771: PUSH
47772: LD_VAR 0 4
47776: PUSH
47777: FOR_IN
47778: IFFALSE 47820
// if GetTech ( i , side ) <> state then
47780: LD_VAR 0 5
47784: PPUSH
47785: LD_VAR 0 1
47789: PPUSH
47790: CALL_OW 321
47794: PUSH
47795: LD_VAR 0 3
47799: NONEQUAL
47800: IFFALSE 47818
// result := result diff i ;
47802: LD_ADDR_VAR 0 4
47806: PUSH
47807: LD_VAR 0 4
47811: PUSH
47812: LD_VAR 0 5
47816: DIFF
47817: ST_TO_ADDR
47818: GO 47777
47820: POP
47821: POP
// end ;
47822: LD_VAR 0 4
47826: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47827: LD_INT 0
47829: PPUSH
47830: PPUSH
47831: PPUSH
// result := true ;
47832: LD_ADDR_VAR 0 3
47836: PUSH
47837: LD_INT 1
47839: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47840: LD_ADDR_VAR 0 5
47844: PUSH
47845: LD_VAR 0 2
47849: PPUSH
47850: CALL_OW 480
47854: ST_TO_ADDR
// if not tmp then
47855: LD_VAR 0 5
47859: NOT
47860: IFFALSE 47864
// exit ;
47862: GO 47913
// for i in tmp do
47864: LD_ADDR_VAR 0 4
47868: PUSH
47869: LD_VAR 0 5
47873: PUSH
47874: FOR_IN
47875: IFFALSE 47911
// if GetTech ( i , side ) <> state_researched then
47877: LD_VAR 0 4
47881: PPUSH
47882: LD_VAR 0 1
47886: PPUSH
47887: CALL_OW 321
47891: PUSH
47892: LD_INT 2
47894: NONEQUAL
47895: IFFALSE 47909
// begin result := false ;
47897: LD_ADDR_VAR 0 3
47901: PUSH
47902: LD_INT 0
47904: ST_TO_ADDR
// exit ;
47905: POP
47906: POP
47907: GO 47913
// end ;
47909: GO 47874
47911: POP
47912: POP
// end ;
47913: LD_VAR 0 3
47917: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47918: LD_INT 0
47920: PPUSH
47921: PPUSH
47922: PPUSH
47923: PPUSH
47924: PPUSH
47925: PPUSH
47926: PPUSH
47927: PPUSH
47928: PPUSH
47929: PPUSH
47930: PPUSH
47931: PPUSH
47932: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47933: LD_VAR 0 1
47937: NOT
47938: PUSH
47939: LD_VAR 0 1
47943: PPUSH
47944: CALL_OW 257
47948: PUSH
47949: LD_INT 9
47951: NONEQUAL
47952: OR
47953: IFFALSE 47957
// exit ;
47955: GO 48530
// side := GetSide ( unit ) ;
47957: LD_ADDR_VAR 0 9
47961: PUSH
47962: LD_VAR 0 1
47966: PPUSH
47967: CALL_OW 255
47971: ST_TO_ADDR
// tech_space := tech_spacanom ;
47972: LD_ADDR_VAR 0 12
47976: PUSH
47977: LD_INT 29
47979: ST_TO_ADDR
// tech_time := tech_taurad ;
47980: LD_ADDR_VAR 0 13
47984: PUSH
47985: LD_INT 28
47987: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
47988: LD_ADDR_VAR 0 11
47992: PUSH
47993: LD_VAR 0 1
47997: PPUSH
47998: CALL_OW 310
48002: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
48003: LD_VAR 0 11
48007: PPUSH
48008: CALL_OW 247
48012: PUSH
48013: LD_INT 2
48015: EQUAL
48016: IFFALSE 48020
// exit ;
48018: GO 48530
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48020: LD_ADDR_VAR 0 8
48024: PUSH
48025: LD_INT 81
48027: PUSH
48028: LD_VAR 0 9
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 3
48039: PUSH
48040: LD_INT 21
48042: PUSH
48043: LD_INT 3
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PPUSH
48058: CALL_OW 69
48062: ST_TO_ADDR
// if not tmp then
48063: LD_VAR 0 8
48067: NOT
48068: IFFALSE 48072
// exit ;
48070: GO 48530
// if in_unit then
48072: LD_VAR 0 11
48076: IFFALSE 48100
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
48078: LD_ADDR_VAR 0 10
48082: PUSH
48083: LD_VAR 0 8
48087: PPUSH
48088: LD_VAR 0 11
48092: PPUSH
48093: CALL_OW 74
48097: ST_TO_ADDR
48098: GO 48120
// enemy := NearestUnitToUnit ( tmp , unit ) ;
48100: LD_ADDR_VAR 0 10
48104: PUSH
48105: LD_VAR 0 8
48109: PPUSH
48110: LD_VAR 0 1
48114: PPUSH
48115: CALL_OW 74
48119: ST_TO_ADDR
// if not enemy then
48120: LD_VAR 0 10
48124: NOT
48125: IFFALSE 48129
// exit ;
48127: GO 48530
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
48129: LD_VAR 0 11
48133: PUSH
48134: LD_VAR 0 11
48138: PPUSH
48139: LD_VAR 0 10
48143: PPUSH
48144: CALL_OW 296
48148: PUSH
48149: LD_INT 13
48151: GREATER
48152: AND
48153: PUSH
48154: LD_VAR 0 1
48158: PPUSH
48159: LD_VAR 0 10
48163: PPUSH
48164: CALL_OW 296
48168: PUSH
48169: LD_INT 12
48171: GREATER
48172: OR
48173: IFFALSE 48177
// exit ;
48175: GO 48530
// missile := [ 1 ] ;
48177: LD_ADDR_VAR 0 14
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: EMPTY
48186: LIST
48187: ST_TO_ADDR
// if Researched ( side , tech_space ) then
48188: LD_VAR 0 9
48192: PPUSH
48193: LD_VAR 0 12
48197: PPUSH
48198: CALL_OW 325
48202: IFFALSE 48231
// missile := Insert ( missile , missile + 1 , 2 ) ;
48204: LD_ADDR_VAR 0 14
48208: PUSH
48209: LD_VAR 0 14
48213: PPUSH
48214: LD_VAR 0 14
48218: PUSH
48219: LD_INT 1
48221: PLUS
48222: PPUSH
48223: LD_INT 2
48225: PPUSH
48226: CALL_OW 2
48230: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
48231: LD_VAR 0 9
48235: PPUSH
48236: LD_VAR 0 13
48240: PPUSH
48241: CALL_OW 325
48245: PUSH
48246: LD_VAR 0 10
48250: PPUSH
48251: CALL_OW 255
48255: PPUSH
48256: LD_VAR 0 13
48260: PPUSH
48261: CALL_OW 325
48265: NOT
48266: AND
48267: IFFALSE 48296
// missile := Insert ( missile , missile + 1 , 3 ) ;
48269: LD_ADDR_VAR 0 14
48273: PUSH
48274: LD_VAR 0 14
48278: PPUSH
48279: LD_VAR 0 14
48283: PUSH
48284: LD_INT 1
48286: PLUS
48287: PPUSH
48288: LD_INT 3
48290: PPUSH
48291: CALL_OW 2
48295: ST_TO_ADDR
// if missile < 2 then
48296: LD_VAR 0 14
48300: PUSH
48301: LD_INT 2
48303: LESS
48304: IFFALSE 48308
// exit ;
48306: GO 48530
// x := GetX ( enemy ) ;
48308: LD_ADDR_VAR 0 4
48312: PUSH
48313: LD_VAR 0 10
48317: PPUSH
48318: CALL_OW 250
48322: ST_TO_ADDR
// y := GetY ( enemy ) ;
48323: LD_ADDR_VAR 0 5
48327: PUSH
48328: LD_VAR 0 10
48332: PPUSH
48333: CALL_OW 251
48337: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
48338: LD_ADDR_VAR 0 6
48342: PUSH
48343: LD_VAR 0 4
48347: PUSH
48348: LD_INT 1
48350: NEG
48351: PPUSH
48352: LD_INT 1
48354: PPUSH
48355: CALL_OW 12
48359: PLUS
48360: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
48361: LD_ADDR_VAR 0 7
48365: PUSH
48366: LD_VAR 0 5
48370: PUSH
48371: LD_INT 1
48373: NEG
48374: PPUSH
48375: LD_INT 1
48377: PPUSH
48378: CALL_OW 12
48382: PLUS
48383: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48384: LD_VAR 0 6
48388: PPUSH
48389: LD_VAR 0 7
48393: PPUSH
48394: CALL_OW 488
48398: NOT
48399: IFFALSE 48421
// begin _x := x ;
48401: LD_ADDR_VAR 0 6
48405: PUSH
48406: LD_VAR 0 4
48410: ST_TO_ADDR
// _y := y ;
48411: LD_ADDR_VAR 0 7
48415: PUSH
48416: LD_VAR 0 5
48420: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
48421: LD_ADDR_VAR 0 3
48425: PUSH
48426: LD_INT 1
48428: PPUSH
48429: LD_VAR 0 14
48433: PPUSH
48434: CALL_OW 12
48438: ST_TO_ADDR
// case i of 1 :
48439: LD_VAR 0 3
48443: PUSH
48444: LD_INT 1
48446: DOUBLE
48447: EQUAL
48448: IFTRUE 48452
48450: GO 48469
48452: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
48453: LD_VAR 0 1
48457: PPUSH
48458: LD_VAR 0 10
48462: PPUSH
48463: CALL_OW 115
48467: GO 48530
48469: LD_INT 2
48471: DOUBLE
48472: EQUAL
48473: IFTRUE 48477
48475: GO 48499
48477: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
48478: LD_VAR 0 1
48482: PPUSH
48483: LD_VAR 0 6
48487: PPUSH
48488: LD_VAR 0 7
48492: PPUSH
48493: CALL_OW 153
48497: GO 48530
48499: LD_INT 3
48501: DOUBLE
48502: EQUAL
48503: IFTRUE 48507
48505: GO 48529
48507: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
48508: LD_VAR 0 1
48512: PPUSH
48513: LD_VAR 0 6
48517: PPUSH
48518: LD_VAR 0 7
48522: PPUSH
48523: CALL_OW 154
48527: GO 48530
48529: POP
// end ;
48530: LD_VAR 0 2
48534: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
48535: LD_INT 0
48537: PPUSH
48538: PPUSH
48539: PPUSH
48540: PPUSH
48541: PPUSH
48542: PPUSH
// if not unit or not building then
48543: LD_VAR 0 1
48547: NOT
48548: PUSH
48549: LD_VAR 0 2
48553: NOT
48554: OR
48555: IFFALSE 48559
// exit ;
48557: GO 48717
// x := GetX ( building ) ;
48559: LD_ADDR_VAR 0 5
48563: PUSH
48564: LD_VAR 0 2
48568: PPUSH
48569: CALL_OW 250
48573: ST_TO_ADDR
// y := GetY ( building ) ;
48574: LD_ADDR_VAR 0 6
48578: PUSH
48579: LD_VAR 0 2
48583: PPUSH
48584: CALL_OW 251
48588: ST_TO_ADDR
// for i = 0 to 5 do
48589: LD_ADDR_VAR 0 4
48593: PUSH
48594: DOUBLE
48595: LD_INT 0
48597: DEC
48598: ST_TO_ADDR
48599: LD_INT 5
48601: PUSH
48602: FOR_TO
48603: IFFALSE 48715
// begin _x := ShiftX ( x , i , 3 ) ;
48605: LD_ADDR_VAR 0 7
48609: PUSH
48610: LD_VAR 0 5
48614: PPUSH
48615: LD_VAR 0 4
48619: PPUSH
48620: LD_INT 3
48622: PPUSH
48623: CALL_OW 272
48627: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
48628: LD_ADDR_VAR 0 8
48632: PUSH
48633: LD_VAR 0 6
48637: PPUSH
48638: LD_VAR 0 4
48642: PPUSH
48643: LD_INT 3
48645: PPUSH
48646: CALL_OW 273
48650: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48651: LD_VAR 0 7
48655: PPUSH
48656: LD_VAR 0 8
48660: PPUSH
48661: CALL_OW 488
48665: NOT
48666: IFFALSE 48670
// continue ;
48668: GO 48602
// if HexInfo ( _x , _y ) = 0 then
48670: LD_VAR 0 7
48674: PPUSH
48675: LD_VAR 0 8
48679: PPUSH
48680: CALL_OW 428
48684: PUSH
48685: LD_INT 0
48687: EQUAL
48688: IFFALSE 48713
// begin ComMoveXY ( unit , _x , _y ) ;
48690: LD_VAR 0 1
48694: PPUSH
48695: LD_VAR 0 7
48699: PPUSH
48700: LD_VAR 0 8
48704: PPUSH
48705: CALL_OW 111
// exit ;
48709: POP
48710: POP
48711: GO 48717
// end ; end ;
48713: GO 48602
48715: POP
48716: POP
// end ;
48717: LD_VAR 0 3
48721: RET
// export function ScanBase ( side , base_area ) ; begin
48722: LD_INT 0
48724: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
48725: LD_ADDR_VAR 0 3
48729: PUSH
48730: LD_VAR 0 2
48734: PPUSH
48735: LD_INT 81
48737: PUSH
48738: LD_VAR 0 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PPUSH
48747: CALL_OW 70
48751: ST_TO_ADDR
// end ;
48752: LD_VAR 0 3
48756: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
48757: LD_INT 0
48759: PPUSH
48760: PPUSH
48761: PPUSH
48762: PPUSH
// result := false ;
48763: LD_ADDR_VAR 0 2
48767: PUSH
48768: LD_INT 0
48770: ST_TO_ADDR
// side := GetSide ( unit ) ;
48771: LD_ADDR_VAR 0 3
48775: PUSH
48776: LD_VAR 0 1
48780: PPUSH
48781: CALL_OW 255
48785: ST_TO_ADDR
// nat := GetNation ( unit ) ;
48786: LD_ADDR_VAR 0 4
48790: PUSH
48791: LD_VAR 0 1
48795: PPUSH
48796: CALL_OW 248
48800: ST_TO_ADDR
// case nat of 1 :
48801: LD_VAR 0 4
48805: PUSH
48806: LD_INT 1
48808: DOUBLE
48809: EQUAL
48810: IFTRUE 48814
48812: GO 48825
48814: POP
// tech := tech_lassight ; 2 :
48815: LD_ADDR_VAR 0 5
48819: PUSH
48820: LD_INT 12
48822: ST_TO_ADDR
48823: GO 48864
48825: LD_INT 2
48827: DOUBLE
48828: EQUAL
48829: IFTRUE 48833
48831: GO 48844
48833: POP
// tech := tech_mortar ; 3 :
48834: LD_ADDR_VAR 0 5
48838: PUSH
48839: LD_INT 41
48841: ST_TO_ADDR
48842: GO 48864
48844: LD_INT 3
48846: DOUBLE
48847: EQUAL
48848: IFTRUE 48852
48850: GO 48863
48852: POP
// tech := tech_bazooka ; end ;
48853: LD_ADDR_VAR 0 5
48857: PUSH
48858: LD_INT 44
48860: ST_TO_ADDR
48861: GO 48864
48863: POP
// if Researched ( side , tech ) then
48864: LD_VAR 0 3
48868: PPUSH
48869: LD_VAR 0 5
48873: PPUSH
48874: CALL_OW 325
48878: IFFALSE 48905
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
48880: LD_ADDR_VAR 0 2
48884: PUSH
48885: LD_INT 5
48887: PUSH
48888: LD_INT 8
48890: PUSH
48891: LD_INT 9
48893: PUSH
48894: EMPTY
48895: LIST
48896: LIST
48897: LIST
48898: PUSH
48899: LD_VAR 0 4
48903: ARRAY
48904: ST_TO_ADDR
// end ;
48905: LD_VAR 0 2
48909: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48910: LD_INT 0
48912: PPUSH
48913: PPUSH
48914: PPUSH
// if not mines then
48915: LD_VAR 0 2
48919: NOT
48920: IFFALSE 48924
// exit ;
48922: GO 49068
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48924: LD_ADDR_VAR 0 5
48928: PUSH
48929: LD_INT 81
48931: PUSH
48932: LD_VAR 0 1
48936: PUSH
48937: EMPTY
48938: LIST
48939: LIST
48940: PUSH
48941: LD_INT 3
48943: PUSH
48944: LD_INT 21
48946: PUSH
48947: LD_INT 3
48949: PUSH
48950: EMPTY
48951: LIST
48952: LIST
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PPUSH
48962: CALL_OW 69
48966: ST_TO_ADDR
// for i in mines do
48967: LD_ADDR_VAR 0 4
48971: PUSH
48972: LD_VAR 0 2
48976: PUSH
48977: FOR_IN
48978: IFFALSE 49066
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
48980: LD_VAR 0 4
48984: PUSH
48985: LD_INT 1
48987: ARRAY
48988: PPUSH
48989: LD_VAR 0 4
48993: PUSH
48994: LD_INT 2
48996: ARRAY
48997: PPUSH
48998: CALL_OW 458
49002: NOT
49003: IFFALSE 49007
// continue ;
49005: GO 48977
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
49007: LD_VAR 0 4
49011: PUSH
49012: LD_INT 1
49014: ARRAY
49015: PPUSH
49016: LD_VAR 0 4
49020: PUSH
49021: LD_INT 2
49023: ARRAY
49024: PPUSH
49025: CALL_OW 428
49029: PUSH
49030: LD_VAR 0 5
49034: IN
49035: IFFALSE 49064
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
49037: LD_VAR 0 4
49041: PUSH
49042: LD_INT 1
49044: ARRAY
49045: PPUSH
49046: LD_VAR 0 4
49050: PUSH
49051: LD_INT 2
49053: ARRAY
49054: PPUSH
49055: LD_VAR 0 1
49059: PPUSH
49060: CALL_OW 456
// end ;
49064: GO 48977
49066: POP
49067: POP
// end ;
49068: LD_VAR 0 3
49072: RET
// export function Count ( array ) ; var i ; begin
49073: LD_INT 0
49075: PPUSH
49076: PPUSH
// result := 0 ;
49077: LD_ADDR_VAR 0 2
49081: PUSH
49082: LD_INT 0
49084: ST_TO_ADDR
// for i in array do
49085: LD_ADDR_VAR 0 3
49089: PUSH
49090: LD_VAR 0 1
49094: PUSH
49095: FOR_IN
49096: IFFALSE 49120
// if i then
49098: LD_VAR 0 3
49102: IFFALSE 49118
// result := result + 1 ;
49104: LD_ADDR_VAR 0 2
49108: PUSH
49109: LD_VAR 0 2
49113: PUSH
49114: LD_INT 1
49116: PLUS
49117: ST_TO_ADDR
49118: GO 49095
49120: POP
49121: POP
// end ;
49122: LD_VAR 0 2
49126: RET
// export function IsEmpty ( building ) ; begin
49127: LD_INT 0
49129: PPUSH
// if not building then
49130: LD_VAR 0 1
49134: NOT
49135: IFFALSE 49139
// exit ;
49137: GO 49182
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
49139: LD_ADDR_VAR 0 2
49143: PUSH
49144: LD_VAR 0 1
49148: PUSH
49149: LD_INT 22
49151: PUSH
49152: LD_VAR 0 1
49156: PPUSH
49157: CALL_OW 255
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 58
49168: PUSH
49169: EMPTY
49170: LIST
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PPUSH
49176: CALL_OW 69
49180: IN
49181: ST_TO_ADDR
// end ;
49182: LD_VAR 0 2
49186: RET
// export function IsNotFull ( building ) ; begin
49187: LD_INT 0
49189: PPUSH
// if not building then
49190: LD_VAR 0 1
49194: NOT
49195: IFFALSE 49199
// exit ;
49197: GO 49218
// result := UnitsInside ( building ) < 6 ;
49199: LD_ADDR_VAR 0 2
49203: PUSH
49204: LD_VAR 0 1
49208: PPUSH
49209: CALL_OW 313
49213: PUSH
49214: LD_INT 6
49216: LESS
49217: ST_TO_ADDR
// end ;
49218: LD_VAR 0 2
49222: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
49223: LD_INT 0
49225: PPUSH
49226: PPUSH
49227: PPUSH
49228: PPUSH
// tmp := [ ] ;
49229: LD_ADDR_VAR 0 3
49233: PUSH
49234: EMPTY
49235: ST_TO_ADDR
// list := [ ] ;
49236: LD_ADDR_VAR 0 5
49240: PUSH
49241: EMPTY
49242: ST_TO_ADDR
// for i = 16 to 25 do
49243: LD_ADDR_VAR 0 4
49247: PUSH
49248: DOUBLE
49249: LD_INT 16
49251: DEC
49252: ST_TO_ADDR
49253: LD_INT 25
49255: PUSH
49256: FOR_TO
49257: IFFALSE 49330
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
49259: LD_ADDR_VAR 0 3
49263: PUSH
49264: LD_VAR 0 3
49268: PUSH
49269: LD_INT 22
49271: PUSH
49272: LD_VAR 0 1
49276: PPUSH
49277: CALL_OW 255
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: PUSH
49286: LD_INT 91
49288: PUSH
49289: LD_VAR 0 1
49293: PUSH
49294: LD_INT 6
49296: PUSH
49297: EMPTY
49298: LIST
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 30
49304: PUSH
49305: LD_VAR 0 4
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: LIST
49318: PUSH
49319: EMPTY
49320: LIST
49321: PPUSH
49322: CALL_OW 69
49326: ADD
49327: ST_TO_ADDR
49328: GO 49256
49330: POP
49331: POP
// for i = 1 to tmp do
49332: LD_ADDR_VAR 0 4
49336: PUSH
49337: DOUBLE
49338: LD_INT 1
49340: DEC
49341: ST_TO_ADDR
49342: LD_VAR 0 3
49346: PUSH
49347: FOR_TO
49348: IFFALSE 49436
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
49350: LD_ADDR_VAR 0 5
49354: PUSH
49355: LD_VAR 0 5
49359: PUSH
49360: LD_VAR 0 3
49364: PUSH
49365: LD_VAR 0 4
49369: ARRAY
49370: PPUSH
49371: CALL_OW 266
49375: PUSH
49376: LD_VAR 0 3
49380: PUSH
49381: LD_VAR 0 4
49385: ARRAY
49386: PPUSH
49387: CALL_OW 250
49391: PUSH
49392: LD_VAR 0 3
49396: PUSH
49397: LD_VAR 0 4
49401: ARRAY
49402: PPUSH
49403: CALL_OW 251
49407: PUSH
49408: LD_VAR 0 3
49412: PUSH
49413: LD_VAR 0 4
49417: ARRAY
49418: PPUSH
49419: CALL_OW 254
49423: PUSH
49424: EMPTY
49425: LIST
49426: LIST
49427: LIST
49428: LIST
49429: PUSH
49430: EMPTY
49431: LIST
49432: ADD
49433: ST_TO_ADDR
49434: GO 49347
49436: POP
49437: POP
// result := list ;
49438: LD_ADDR_VAR 0 2
49442: PUSH
49443: LD_VAR 0 5
49447: ST_TO_ADDR
// end ;
49448: LD_VAR 0 2
49452: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
49453: LD_INT 0
49455: PPUSH
49456: PPUSH
49457: PPUSH
49458: PPUSH
49459: PPUSH
49460: PPUSH
49461: PPUSH
// if not factory then
49462: LD_VAR 0 1
49466: NOT
49467: IFFALSE 49471
// exit ;
49469: GO 50064
// if control = control_apeman then
49471: LD_VAR 0 4
49475: PUSH
49476: LD_INT 5
49478: EQUAL
49479: IFFALSE 49588
// begin tmp := UnitsInside ( factory ) ;
49481: LD_ADDR_VAR 0 8
49485: PUSH
49486: LD_VAR 0 1
49490: PPUSH
49491: CALL_OW 313
49495: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
49496: LD_VAR 0 8
49500: PPUSH
49501: LD_INT 25
49503: PUSH
49504: LD_INT 12
49506: PUSH
49507: EMPTY
49508: LIST
49509: LIST
49510: PPUSH
49511: CALL_OW 72
49515: NOT
49516: IFFALSE 49526
// control := control_manual ;
49518: LD_ADDR_VAR 0 4
49522: PUSH
49523: LD_INT 1
49525: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
49526: LD_ADDR_VAR 0 8
49530: PUSH
49531: LD_VAR 0 1
49535: PPUSH
49536: CALL 49223 0 1
49540: ST_TO_ADDR
// if tmp then
49541: LD_VAR 0 8
49545: IFFALSE 49588
// begin for i in tmp do
49547: LD_ADDR_VAR 0 7
49551: PUSH
49552: LD_VAR 0 8
49556: PUSH
49557: FOR_IN
49558: IFFALSE 49586
// if i [ 1 ] = b_ext_radio then
49560: LD_VAR 0 7
49564: PUSH
49565: LD_INT 1
49567: ARRAY
49568: PUSH
49569: LD_INT 22
49571: EQUAL
49572: IFFALSE 49584
// begin control := control_remote ;
49574: LD_ADDR_VAR 0 4
49578: PUSH
49579: LD_INT 2
49581: ST_TO_ADDR
// break ;
49582: GO 49586
// end ;
49584: GO 49557
49586: POP
49587: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49588: LD_VAR 0 1
49592: PPUSH
49593: LD_VAR 0 2
49597: PPUSH
49598: LD_VAR 0 3
49602: PPUSH
49603: LD_VAR 0 4
49607: PPUSH
49608: LD_VAR 0 5
49612: PPUSH
49613: CALL_OW 448
49617: IFFALSE 49652
// begin result := [ chassis , engine , control , weapon ] ;
49619: LD_ADDR_VAR 0 6
49623: PUSH
49624: LD_VAR 0 2
49628: PUSH
49629: LD_VAR 0 3
49633: PUSH
49634: LD_VAR 0 4
49638: PUSH
49639: LD_VAR 0 5
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: LIST
49648: LIST
49649: ST_TO_ADDR
// exit ;
49650: GO 50064
// end ; _chassis := AvailableChassisList ( factory ) ;
49652: LD_ADDR_VAR 0 9
49656: PUSH
49657: LD_VAR 0 1
49661: PPUSH
49662: CALL_OW 475
49666: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
49667: LD_ADDR_VAR 0 11
49671: PUSH
49672: LD_VAR 0 1
49676: PPUSH
49677: CALL_OW 476
49681: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
49682: LD_ADDR_VAR 0 12
49686: PUSH
49687: LD_VAR 0 1
49691: PPUSH
49692: CALL_OW 477
49696: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
49697: LD_ADDR_VAR 0 10
49701: PUSH
49702: LD_VAR 0 1
49706: PPUSH
49707: CALL_OW 478
49711: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
49712: LD_VAR 0 9
49716: NOT
49717: PUSH
49718: LD_VAR 0 11
49722: NOT
49723: OR
49724: PUSH
49725: LD_VAR 0 12
49729: NOT
49730: OR
49731: PUSH
49732: LD_VAR 0 10
49736: NOT
49737: OR
49738: IFFALSE 49773
// begin result := [ chassis , engine , control , weapon ] ;
49740: LD_ADDR_VAR 0 6
49744: PUSH
49745: LD_VAR 0 2
49749: PUSH
49750: LD_VAR 0 3
49754: PUSH
49755: LD_VAR 0 4
49759: PUSH
49760: LD_VAR 0 5
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: LIST
49769: LIST
49770: ST_TO_ADDR
// exit ;
49771: GO 50064
// end ; if not chassis in _chassis then
49773: LD_VAR 0 2
49777: PUSH
49778: LD_VAR 0 9
49782: IN
49783: NOT
49784: IFFALSE 49810
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
49786: LD_ADDR_VAR 0 2
49790: PUSH
49791: LD_VAR 0 9
49795: PUSH
49796: LD_INT 1
49798: PPUSH
49799: LD_VAR 0 9
49803: PPUSH
49804: CALL_OW 12
49808: ARRAY
49809: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
49810: LD_VAR 0 2
49814: PPUSH
49815: LD_VAR 0 3
49819: PPUSH
49820: CALL 50069 0 2
49824: NOT
49825: IFFALSE 49884
// repeat engine := _engine [ 1 ] ;
49827: LD_ADDR_VAR 0 3
49831: PUSH
49832: LD_VAR 0 11
49836: PUSH
49837: LD_INT 1
49839: ARRAY
49840: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
49841: LD_ADDR_VAR 0 11
49845: PUSH
49846: LD_VAR 0 11
49850: PPUSH
49851: LD_INT 1
49853: PPUSH
49854: CALL_OW 3
49858: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
49859: LD_VAR 0 2
49863: PPUSH
49864: LD_VAR 0 3
49868: PPUSH
49869: CALL 50069 0 2
49873: PUSH
49874: LD_VAR 0 11
49878: PUSH
49879: EMPTY
49880: EQUAL
49881: OR
49882: IFFALSE 49827
// if not control in _control then
49884: LD_VAR 0 4
49888: PUSH
49889: LD_VAR 0 12
49893: IN
49894: NOT
49895: IFFALSE 49921
// control := _control [ rand ( 1 , _control ) ] ;
49897: LD_ADDR_VAR 0 4
49901: PUSH
49902: LD_VAR 0 12
49906: PUSH
49907: LD_INT 1
49909: PPUSH
49910: LD_VAR 0 12
49914: PPUSH
49915: CALL_OW 12
49919: ARRAY
49920: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
49921: LD_VAR 0 2
49925: PPUSH
49926: LD_VAR 0 5
49930: PPUSH
49931: CALL 50289 0 2
49935: NOT
49936: IFFALSE 49995
// repeat weapon := _weapon [ 1 ] ;
49938: LD_ADDR_VAR 0 5
49942: PUSH
49943: LD_VAR 0 10
49947: PUSH
49948: LD_INT 1
49950: ARRAY
49951: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49952: LD_ADDR_VAR 0 10
49956: PUSH
49957: LD_VAR 0 10
49961: PPUSH
49962: LD_INT 1
49964: PPUSH
49965: CALL_OW 3
49969: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
49970: LD_VAR 0 2
49974: PPUSH
49975: LD_VAR 0 5
49979: PPUSH
49980: CALL 50289 0 2
49984: PUSH
49985: LD_VAR 0 10
49989: PUSH
49990: EMPTY
49991: EQUAL
49992: OR
49993: IFFALSE 49938
// result := [ ] ;
49995: LD_ADDR_VAR 0 6
49999: PUSH
50000: EMPTY
50001: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50002: LD_VAR 0 1
50006: PPUSH
50007: LD_VAR 0 2
50011: PPUSH
50012: LD_VAR 0 3
50016: PPUSH
50017: LD_VAR 0 4
50021: PPUSH
50022: LD_VAR 0 5
50026: PPUSH
50027: CALL_OW 448
50031: IFFALSE 50064
// result := [ chassis , engine , control , weapon ] ;
50033: LD_ADDR_VAR 0 6
50037: PUSH
50038: LD_VAR 0 2
50042: PUSH
50043: LD_VAR 0 3
50047: PUSH
50048: LD_VAR 0 4
50052: PUSH
50053: LD_VAR 0 5
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: LIST
50063: ST_TO_ADDR
// end ;
50064: LD_VAR 0 6
50068: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
50069: LD_INT 0
50071: PPUSH
// if not chassis or not engine then
50072: LD_VAR 0 1
50076: NOT
50077: PUSH
50078: LD_VAR 0 2
50082: NOT
50083: OR
50084: IFFALSE 50088
// exit ;
50086: GO 50284
// case engine of engine_solar :
50088: LD_VAR 0 2
50092: PUSH
50093: LD_INT 2
50095: DOUBLE
50096: EQUAL
50097: IFTRUE 50101
50099: GO 50139
50101: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
50102: LD_ADDR_VAR 0 3
50106: PUSH
50107: LD_INT 11
50109: PUSH
50110: LD_INT 12
50112: PUSH
50113: LD_INT 13
50115: PUSH
50116: LD_INT 14
50118: PUSH
50119: LD_INT 1
50121: PUSH
50122: LD_INT 2
50124: PUSH
50125: LD_INT 3
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: LIST
50132: LIST
50133: LIST
50134: LIST
50135: LIST
50136: ST_TO_ADDR
50137: GO 50268
50139: LD_INT 1
50141: DOUBLE
50142: EQUAL
50143: IFTRUE 50147
50145: GO 50209
50147: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
50148: LD_ADDR_VAR 0 3
50152: PUSH
50153: LD_INT 11
50155: PUSH
50156: LD_INT 12
50158: PUSH
50159: LD_INT 13
50161: PUSH
50162: LD_INT 14
50164: PUSH
50165: LD_INT 1
50167: PUSH
50168: LD_INT 2
50170: PUSH
50171: LD_INT 3
50173: PUSH
50174: LD_INT 4
50176: PUSH
50177: LD_INT 5
50179: PUSH
50180: LD_INT 21
50182: PUSH
50183: LD_INT 23
50185: PUSH
50186: LD_INT 22
50188: PUSH
50189: LD_INT 24
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: ST_TO_ADDR
50207: GO 50268
50209: LD_INT 3
50211: DOUBLE
50212: EQUAL
50213: IFTRUE 50217
50215: GO 50267
50217: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50218: LD_ADDR_VAR 0 3
50222: PUSH
50223: LD_INT 13
50225: PUSH
50226: LD_INT 14
50228: PUSH
50229: LD_INT 2
50231: PUSH
50232: LD_INT 3
50234: PUSH
50235: LD_INT 4
50237: PUSH
50238: LD_INT 5
50240: PUSH
50241: LD_INT 21
50243: PUSH
50244: LD_INT 22
50246: PUSH
50247: LD_INT 23
50249: PUSH
50250: LD_INT 24
50252: PUSH
50253: EMPTY
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: ST_TO_ADDR
50265: GO 50268
50267: POP
// result := ( chassis in result ) ;
50268: LD_ADDR_VAR 0 3
50272: PUSH
50273: LD_VAR 0 1
50277: PUSH
50278: LD_VAR 0 3
50282: IN
50283: ST_TO_ADDR
// end ;
50284: LD_VAR 0 3
50288: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
50289: LD_INT 0
50291: PPUSH
// if not chassis or not weapon then
50292: LD_VAR 0 1
50296: NOT
50297: PUSH
50298: LD_VAR 0 2
50302: NOT
50303: OR
50304: IFFALSE 50308
// exit ;
50306: GO 51334
// case weapon of us_machine_gun :
50308: LD_VAR 0 2
50312: PUSH
50313: LD_INT 2
50315: DOUBLE
50316: EQUAL
50317: IFTRUE 50321
50319: GO 50351
50321: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
50322: LD_ADDR_VAR 0 3
50326: PUSH
50327: LD_INT 1
50329: PUSH
50330: LD_INT 2
50332: PUSH
50333: LD_INT 3
50335: PUSH
50336: LD_INT 4
50338: PUSH
50339: LD_INT 5
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: ST_TO_ADDR
50349: GO 51318
50351: LD_INT 3
50353: DOUBLE
50354: EQUAL
50355: IFTRUE 50359
50357: GO 50389
50359: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
50360: LD_ADDR_VAR 0 3
50364: PUSH
50365: LD_INT 1
50367: PUSH
50368: LD_INT 2
50370: PUSH
50371: LD_INT 3
50373: PUSH
50374: LD_INT 4
50376: PUSH
50377: LD_INT 5
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: LIST
50384: LIST
50385: LIST
50386: ST_TO_ADDR
50387: GO 51318
50389: LD_INT 11
50391: DOUBLE
50392: EQUAL
50393: IFTRUE 50397
50395: GO 50427
50397: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
50398: LD_ADDR_VAR 0 3
50402: PUSH
50403: LD_INT 1
50405: PUSH
50406: LD_INT 2
50408: PUSH
50409: LD_INT 3
50411: PUSH
50412: LD_INT 4
50414: PUSH
50415: LD_INT 5
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: ST_TO_ADDR
50425: GO 51318
50427: LD_INT 4
50429: DOUBLE
50430: EQUAL
50431: IFTRUE 50435
50433: GO 50461
50435: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
50436: LD_ADDR_VAR 0 3
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: LD_INT 3
50446: PUSH
50447: LD_INT 4
50449: PUSH
50450: LD_INT 5
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: ST_TO_ADDR
50459: GO 51318
50461: LD_INT 5
50463: DOUBLE
50464: EQUAL
50465: IFTRUE 50469
50467: GO 50495
50469: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
50470: LD_ADDR_VAR 0 3
50474: PUSH
50475: LD_INT 2
50477: PUSH
50478: LD_INT 3
50480: PUSH
50481: LD_INT 4
50483: PUSH
50484: LD_INT 5
50486: PUSH
50487: EMPTY
50488: LIST
50489: LIST
50490: LIST
50491: LIST
50492: ST_TO_ADDR
50493: GO 51318
50495: LD_INT 9
50497: DOUBLE
50498: EQUAL
50499: IFTRUE 50503
50501: GO 50529
50503: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
50504: LD_ADDR_VAR 0 3
50508: PUSH
50509: LD_INT 2
50511: PUSH
50512: LD_INT 3
50514: PUSH
50515: LD_INT 4
50517: PUSH
50518: LD_INT 5
50520: PUSH
50521: EMPTY
50522: LIST
50523: LIST
50524: LIST
50525: LIST
50526: ST_TO_ADDR
50527: GO 51318
50529: LD_INT 7
50531: DOUBLE
50532: EQUAL
50533: IFTRUE 50537
50535: GO 50563
50537: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
50538: LD_ADDR_VAR 0 3
50542: PUSH
50543: LD_INT 2
50545: PUSH
50546: LD_INT 3
50548: PUSH
50549: LD_INT 4
50551: PUSH
50552: LD_INT 5
50554: PUSH
50555: EMPTY
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: ST_TO_ADDR
50561: GO 51318
50563: LD_INT 12
50565: DOUBLE
50566: EQUAL
50567: IFTRUE 50571
50569: GO 50597
50571: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
50572: LD_ADDR_VAR 0 3
50576: PUSH
50577: LD_INT 2
50579: PUSH
50580: LD_INT 3
50582: PUSH
50583: LD_INT 4
50585: PUSH
50586: LD_INT 5
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: ST_TO_ADDR
50595: GO 51318
50597: LD_INT 13
50599: DOUBLE
50600: EQUAL
50601: IFTRUE 50605
50603: GO 50631
50605: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
50606: LD_ADDR_VAR 0 3
50610: PUSH
50611: LD_INT 2
50613: PUSH
50614: LD_INT 3
50616: PUSH
50617: LD_INT 4
50619: PUSH
50620: LD_INT 5
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: ST_TO_ADDR
50629: GO 51318
50631: LD_INT 14
50633: DOUBLE
50634: EQUAL
50635: IFTRUE 50639
50637: GO 50657
50639: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
50640: LD_ADDR_VAR 0 3
50644: PUSH
50645: LD_INT 4
50647: PUSH
50648: LD_INT 5
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: ST_TO_ADDR
50655: GO 51318
50657: LD_INT 6
50659: DOUBLE
50660: EQUAL
50661: IFTRUE 50665
50663: GO 50683
50665: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
50666: LD_ADDR_VAR 0 3
50670: PUSH
50671: LD_INT 4
50673: PUSH
50674: LD_INT 5
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: ST_TO_ADDR
50681: GO 51318
50683: LD_INT 10
50685: DOUBLE
50686: EQUAL
50687: IFTRUE 50691
50689: GO 50709
50691: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
50692: LD_ADDR_VAR 0 3
50696: PUSH
50697: LD_INT 4
50699: PUSH
50700: LD_INT 5
50702: PUSH
50703: EMPTY
50704: LIST
50705: LIST
50706: ST_TO_ADDR
50707: GO 51318
50709: LD_INT 22
50711: DOUBLE
50712: EQUAL
50713: IFTRUE 50717
50715: GO 50743
50717: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
50718: LD_ADDR_VAR 0 3
50722: PUSH
50723: LD_INT 11
50725: PUSH
50726: LD_INT 12
50728: PUSH
50729: LD_INT 13
50731: PUSH
50732: LD_INT 14
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: LIST
50740: ST_TO_ADDR
50741: GO 51318
50743: LD_INT 23
50745: DOUBLE
50746: EQUAL
50747: IFTRUE 50751
50749: GO 50777
50751: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
50752: LD_ADDR_VAR 0 3
50756: PUSH
50757: LD_INT 11
50759: PUSH
50760: LD_INT 12
50762: PUSH
50763: LD_INT 13
50765: PUSH
50766: LD_INT 14
50768: PUSH
50769: EMPTY
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: ST_TO_ADDR
50775: GO 51318
50777: LD_INT 24
50779: DOUBLE
50780: EQUAL
50781: IFTRUE 50785
50783: GO 50811
50785: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
50786: LD_ADDR_VAR 0 3
50790: PUSH
50791: LD_INT 11
50793: PUSH
50794: LD_INT 12
50796: PUSH
50797: LD_INT 13
50799: PUSH
50800: LD_INT 14
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: ST_TO_ADDR
50809: GO 51318
50811: LD_INT 30
50813: DOUBLE
50814: EQUAL
50815: IFTRUE 50819
50817: GO 50845
50819: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
50820: LD_ADDR_VAR 0 3
50824: PUSH
50825: LD_INT 11
50827: PUSH
50828: LD_INT 12
50830: PUSH
50831: LD_INT 13
50833: PUSH
50834: LD_INT 14
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: ST_TO_ADDR
50843: GO 51318
50845: LD_INT 25
50847: DOUBLE
50848: EQUAL
50849: IFTRUE 50853
50851: GO 50871
50853: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
50854: LD_ADDR_VAR 0 3
50858: PUSH
50859: LD_INT 13
50861: PUSH
50862: LD_INT 14
50864: PUSH
50865: EMPTY
50866: LIST
50867: LIST
50868: ST_TO_ADDR
50869: GO 51318
50871: LD_INT 27
50873: DOUBLE
50874: EQUAL
50875: IFTRUE 50879
50877: GO 50897
50879: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
50880: LD_ADDR_VAR 0 3
50884: PUSH
50885: LD_INT 13
50887: PUSH
50888: LD_INT 14
50890: PUSH
50891: EMPTY
50892: LIST
50893: LIST
50894: ST_TO_ADDR
50895: GO 51318
50897: LD_INT 28
50899: DOUBLE
50900: EQUAL
50901: IFTRUE 50905
50903: GO 50923
50905: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
50906: LD_ADDR_VAR 0 3
50910: PUSH
50911: LD_INT 13
50913: PUSH
50914: LD_INT 14
50916: PUSH
50917: EMPTY
50918: LIST
50919: LIST
50920: ST_TO_ADDR
50921: GO 51318
50923: LD_INT 29
50925: DOUBLE
50926: EQUAL
50927: IFTRUE 50931
50929: GO 50949
50931: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
50932: LD_ADDR_VAR 0 3
50936: PUSH
50937: LD_INT 13
50939: PUSH
50940: LD_INT 14
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: ST_TO_ADDR
50947: GO 51318
50949: LD_INT 31
50951: DOUBLE
50952: EQUAL
50953: IFTRUE 50957
50955: GO 50975
50957: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
50958: LD_ADDR_VAR 0 3
50962: PUSH
50963: LD_INT 13
50965: PUSH
50966: LD_INT 14
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: ST_TO_ADDR
50973: GO 51318
50975: LD_INT 26
50977: DOUBLE
50978: EQUAL
50979: IFTRUE 50983
50981: GO 51001
50983: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
50984: LD_ADDR_VAR 0 3
50988: PUSH
50989: LD_INT 13
50991: PUSH
50992: LD_INT 14
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: ST_TO_ADDR
50999: GO 51318
51001: LD_INT 42
51003: DOUBLE
51004: EQUAL
51005: IFTRUE 51009
51007: GO 51035
51009: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
51010: LD_ADDR_VAR 0 3
51014: PUSH
51015: LD_INT 21
51017: PUSH
51018: LD_INT 22
51020: PUSH
51021: LD_INT 23
51023: PUSH
51024: LD_INT 24
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: ST_TO_ADDR
51033: GO 51318
51035: LD_INT 43
51037: DOUBLE
51038: EQUAL
51039: IFTRUE 51043
51041: GO 51069
51043: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
51044: LD_ADDR_VAR 0 3
51048: PUSH
51049: LD_INT 21
51051: PUSH
51052: LD_INT 22
51054: PUSH
51055: LD_INT 23
51057: PUSH
51058: LD_INT 24
51060: PUSH
51061: EMPTY
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: ST_TO_ADDR
51067: GO 51318
51069: LD_INT 44
51071: DOUBLE
51072: EQUAL
51073: IFTRUE 51077
51075: GO 51103
51077: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
51078: LD_ADDR_VAR 0 3
51082: PUSH
51083: LD_INT 21
51085: PUSH
51086: LD_INT 22
51088: PUSH
51089: LD_INT 23
51091: PUSH
51092: LD_INT 24
51094: PUSH
51095: EMPTY
51096: LIST
51097: LIST
51098: LIST
51099: LIST
51100: ST_TO_ADDR
51101: GO 51318
51103: LD_INT 45
51105: DOUBLE
51106: EQUAL
51107: IFTRUE 51111
51109: GO 51137
51111: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
51112: LD_ADDR_VAR 0 3
51116: PUSH
51117: LD_INT 21
51119: PUSH
51120: LD_INT 22
51122: PUSH
51123: LD_INT 23
51125: PUSH
51126: LD_INT 24
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: LIST
51133: LIST
51134: ST_TO_ADDR
51135: GO 51318
51137: LD_INT 49
51139: DOUBLE
51140: EQUAL
51141: IFTRUE 51145
51143: GO 51171
51145: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
51146: LD_ADDR_VAR 0 3
51150: PUSH
51151: LD_INT 21
51153: PUSH
51154: LD_INT 22
51156: PUSH
51157: LD_INT 23
51159: PUSH
51160: LD_INT 24
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: LIST
51167: LIST
51168: ST_TO_ADDR
51169: GO 51318
51171: LD_INT 51
51173: DOUBLE
51174: EQUAL
51175: IFTRUE 51179
51177: GO 51205
51179: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
51180: LD_ADDR_VAR 0 3
51184: PUSH
51185: LD_INT 21
51187: PUSH
51188: LD_INT 22
51190: PUSH
51191: LD_INT 23
51193: PUSH
51194: LD_INT 24
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: LIST
51201: LIST
51202: ST_TO_ADDR
51203: GO 51318
51205: LD_INT 52
51207: DOUBLE
51208: EQUAL
51209: IFTRUE 51213
51211: GO 51239
51213: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
51214: LD_ADDR_VAR 0 3
51218: PUSH
51219: LD_INT 21
51221: PUSH
51222: LD_INT 22
51224: PUSH
51225: LD_INT 23
51227: PUSH
51228: LD_INT 24
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: LIST
51235: LIST
51236: ST_TO_ADDR
51237: GO 51318
51239: LD_INT 53
51241: DOUBLE
51242: EQUAL
51243: IFTRUE 51247
51245: GO 51265
51247: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
51248: LD_ADDR_VAR 0 3
51252: PUSH
51253: LD_INT 23
51255: PUSH
51256: LD_INT 24
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: ST_TO_ADDR
51263: GO 51318
51265: LD_INT 46
51267: DOUBLE
51268: EQUAL
51269: IFTRUE 51273
51271: GO 51291
51273: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
51274: LD_ADDR_VAR 0 3
51278: PUSH
51279: LD_INT 23
51281: PUSH
51282: LD_INT 24
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: ST_TO_ADDR
51289: GO 51318
51291: LD_INT 47
51293: DOUBLE
51294: EQUAL
51295: IFTRUE 51299
51297: GO 51317
51299: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51300: LD_ADDR_VAR 0 3
51304: PUSH
51305: LD_INT 23
51307: PUSH
51308: LD_INT 24
51310: PUSH
51311: EMPTY
51312: LIST
51313: LIST
51314: ST_TO_ADDR
51315: GO 51318
51317: POP
// result := ( chassis in result ) ;
51318: LD_ADDR_VAR 0 3
51322: PUSH
51323: LD_VAR 0 1
51327: PUSH
51328: LD_VAR 0 3
51332: IN
51333: ST_TO_ADDR
// end ;
51334: LD_VAR 0 3
51338: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
51339: LD_INT 0
51341: PPUSH
51342: PPUSH
51343: PPUSH
51344: PPUSH
51345: PPUSH
51346: PPUSH
51347: PPUSH
// result := array ;
51348: LD_ADDR_VAR 0 5
51352: PUSH
51353: LD_VAR 0 1
51357: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
51358: LD_VAR 0 1
51362: NOT
51363: PUSH
51364: LD_VAR 0 2
51368: NOT
51369: OR
51370: PUSH
51371: LD_VAR 0 3
51375: NOT
51376: OR
51377: PUSH
51378: LD_VAR 0 2
51382: PUSH
51383: LD_VAR 0 1
51387: GREATER
51388: OR
51389: PUSH
51390: LD_VAR 0 3
51394: PUSH
51395: LD_VAR 0 1
51399: GREATER
51400: OR
51401: IFFALSE 51405
// exit ;
51403: GO 51701
// if direction then
51405: LD_VAR 0 4
51409: IFFALSE 51473
// begin d := 1 ;
51411: LD_ADDR_VAR 0 9
51415: PUSH
51416: LD_INT 1
51418: ST_TO_ADDR
// if i_from > i_to then
51419: LD_VAR 0 2
51423: PUSH
51424: LD_VAR 0 3
51428: GREATER
51429: IFFALSE 51455
// length := ( array - i_from ) + i_to else
51431: LD_ADDR_VAR 0 11
51435: PUSH
51436: LD_VAR 0 1
51440: PUSH
51441: LD_VAR 0 2
51445: MINUS
51446: PUSH
51447: LD_VAR 0 3
51451: PLUS
51452: ST_TO_ADDR
51453: GO 51471
// length := i_to - i_from ;
51455: LD_ADDR_VAR 0 11
51459: PUSH
51460: LD_VAR 0 3
51464: PUSH
51465: LD_VAR 0 2
51469: MINUS
51470: ST_TO_ADDR
// end else
51471: GO 51534
// begin d := - 1 ;
51473: LD_ADDR_VAR 0 9
51477: PUSH
51478: LD_INT 1
51480: NEG
51481: ST_TO_ADDR
// if i_from > i_to then
51482: LD_VAR 0 2
51486: PUSH
51487: LD_VAR 0 3
51491: GREATER
51492: IFFALSE 51512
// length := i_from - i_to else
51494: LD_ADDR_VAR 0 11
51498: PUSH
51499: LD_VAR 0 2
51503: PUSH
51504: LD_VAR 0 3
51508: MINUS
51509: ST_TO_ADDR
51510: GO 51534
// length := ( array - i_to ) + i_from ;
51512: LD_ADDR_VAR 0 11
51516: PUSH
51517: LD_VAR 0 1
51521: PUSH
51522: LD_VAR 0 3
51526: MINUS
51527: PUSH
51528: LD_VAR 0 2
51532: PLUS
51533: ST_TO_ADDR
// end ; if not length then
51534: LD_VAR 0 11
51538: NOT
51539: IFFALSE 51543
// exit ;
51541: GO 51701
// tmp := array ;
51543: LD_ADDR_VAR 0 10
51547: PUSH
51548: LD_VAR 0 1
51552: ST_TO_ADDR
// for i = 1 to length do
51553: LD_ADDR_VAR 0 6
51557: PUSH
51558: DOUBLE
51559: LD_INT 1
51561: DEC
51562: ST_TO_ADDR
51563: LD_VAR 0 11
51567: PUSH
51568: FOR_TO
51569: IFFALSE 51689
// begin for j = 1 to array do
51571: LD_ADDR_VAR 0 7
51575: PUSH
51576: DOUBLE
51577: LD_INT 1
51579: DEC
51580: ST_TO_ADDR
51581: LD_VAR 0 1
51585: PUSH
51586: FOR_TO
51587: IFFALSE 51675
// begin k := j + d ;
51589: LD_ADDR_VAR 0 8
51593: PUSH
51594: LD_VAR 0 7
51598: PUSH
51599: LD_VAR 0 9
51603: PLUS
51604: ST_TO_ADDR
// if k > array then
51605: LD_VAR 0 8
51609: PUSH
51610: LD_VAR 0 1
51614: GREATER
51615: IFFALSE 51625
// k := 1 ;
51617: LD_ADDR_VAR 0 8
51621: PUSH
51622: LD_INT 1
51624: ST_TO_ADDR
// if not k then
51625: LD_VAR 0 8
51629: NOT
51630: IFFALSE 51642
// k := array ;
51632: LD_ADDR_VAR 0 8
51636: PUSH
51637: LD_VAR 0 1
51641: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
51642: LD_ADDR_VAR 0 10
51646: PUSH
51647: LD_VAR 0 10
51651: PPUSH
51652: LD_VAR 0 8
51656: PPUSH
51657: LD_VAR 0 1
51661: PUSH
51662: LD_VAR 0 7
51666: ARRAY
51667: PPUSH
51668: CALL_OW 1
51672: ST_TO_ADDR
// end ;
51673: GO 51586
51675: POP
51676: POP
// array := tmp ;
51677: LD_ADDR_VAR 0 1
51681: PUSH
51682: LD_VAR 0 10
51686: ST_TO_ADDR
// end ;
51687: GO 51568
51689: POP
51690: POP
// result := array ;
51691: LD_ADDR_VAR 0 5
51695: PUSH
51696: LD_VAR 0 1
51700: ST_TO_ADDR
// end ;
51701: LD_VAR 0 5
51705: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
51706: LD_INT 0
51708: PPUSH
51709: PPUSH
// result := 0 ;
51710: LD_ADDR_VAR 0 3
51714: PUSH
51715: LD_INT 0
51717: ST_TO_ADDR
// if not array or not value in array then
51718: LD_VAR 0 1
51722: NOT
51723: PUSH
51724: LD_VAR 0 2
51728: PUSH
51729: LD_VAR 0 1
51733: IN
51734: NOT
51735: OR
51736: IFFALSE 51740
// exit ;
51738: GO 51794
// for i = 1 to array do
51740: LD_ADDR_VAR 0 4
51744: PUSH
51745: DOUBLE
51746: LD_INT 1
51748: DEC
51749: ST_TO_ADDR
51750: LD_VAR 0 1
51754: PUSH
51755: FOR_TO
51756: IFFALSE 51792
// if value = array [ i ] then
51758: LD_VAR 0 2
51762: PUSH
51763: LD_VAR 0 1
51767: PUSH
51768: LD_VAR 0 4
51772: ARRAY
51773: EQUAL
51774: IFFALSE 51790
// begin result := i ;
51776: LD_ADDR_VAR 0 3
51780: PUSH
51781: LD_VAR 0 4
51785: ST_TO_ADDR
// exit ;
51786: POP
51787: POP
51788: GO 51794
// end ;
51790: GO 51755
51792: POP
51793: POP
// end ;
51794: LD_VAR 0 3
51798: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
51799: LD_INT 0
51801: PPUSH
// vc_chassis := chassis ;
51802: LD_ADDR_OWVAR 37
51806: PUSH
51807: LD_VAR 0 1
51811: ST_TO_ADDR
// vc_engine := engine ;
51812: LD_ADDR_OWVAR 39
51816: PUSH
51817: LD_VAR 0 2
51821: ST_TO_ADDR
// vc_control := control ;
51822: LD_ADDR_OWVAR 38
51826: PUSH
51827: LD_VAR 0 3
51831: ST_TO_ADDR
// vc_weapon := weapon ;
51832: LD_ADDR_OWVAR 40
51836: PUSH
51837: LD_VAR 0 4
51841: ST_TO_ADDR
// vc_fuel_battery := fuel ;
51842: LD_ADDR_OWVAR 41
51846: PUSH
51847: LD_VAR 0 5
51851: ST_TO_ADDR
// end ;
51852: LD_VAR 0 6
51856: RET
// export function WantPlant ( unit ) ; var task ; begin
51857: LD_INT 0
51859: PPUSH
51860: PPUSH
// result := false ;
51861: LD_ADDR_VAR 0 2
51865: PUSH
51866: LD_INT 0
51868: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
51869: LD_ADDR_VAR 0 3
51873: PUSH
51874: LD_VAR 0 1
51878: PPUSH
51879: CALL_OW 437
51883: ST_TO_ADDR
// if task then
51884: LD_VAR 0 3
51888: IFFALSE 51916
// if task [ 1 ] [ 1 ] = p then
51890: LD_VAR 0 3
51894: PUSH
51895: LD_INT 1
51897: ARRAY
51898: PUSH
51899: LD_INT 1
51901: ARRAY
51902: PUSH
51903: LD_STRING p
51905: EQUAL
51906: IFFALSE 51916
// result := true ;
51908: LD_ADDR_VAR 0 2
51912: PUSH
51913: LD_INT 1
51915: ST_TO_ADDR
// end ;
51916: LD_VAR 0 2
51920: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
51921: LD_INT 0
51923: PPUSH
51924: PPUSH
51925: PPUSH
51926: PPUSH
// if pos < 1 then
51927: LD_VAR 0 2
51931: PUSH
51932: LD_INT 1
51934: LESS
51935: IFFALSE 51939
// exit ;
51937: GO 52242
// if pos = 1 then
51939: LD_VAR 0 2
51943: PUSH
51944: LD_INT 1
51946: EQUAL
51947: IFFALSE 51980
// result := Replace ( arr , pos [ 1 ] , value ) else
51949: LD_ADDR_VAR 0 4
51953: PUSH
51954: LD_VAR 0 1
51958: PPUSH
51959: LD_VAR 0 2
51963: PUSH
51964: LD_INT 1
51966: ARRAY
51967: PPUSH
51968: LD_VAR 0 3
51972: PPUSH
51973: CALL_OW 1
51977: ST_TO_ADDR
51978: GO 52242
// begin tmp := arr ;
51980: LD_ADDR_VAR 0 6
51984: PUSH
51985: LD_VAR 0 1
51989: ST_TO_ADDR
// s_arr := [ tmp ] ;
51990: LD_ADDR_VAR 0 7
51994: PUSH
51995: LD_VAR 0 6
51999: PUSH
52000: EMPTY
52001: LIST
52002: ST_TO_ADDR
// for i = 1 to pos - 1 do
52003: LD_ADDR_VAR 0 5
52007: PUSH
52008: DOUBLE
52009: LD_INT 1
52011: DEC
52012: ST_TO_ADDR
52013: LD_VAR 0 2
52017: PUSH
52018: LD_INT 1
52020: MINUS
52021: PUSH
52022: FOR_TO
52023: IFFALSE 52068
// begin tmp := tmp [ pos [ i ] ] ;
52025: LD_ADDR_VAR 0 6
52029: PUSH
52030: LD_VAR 0 6
52034: PUSH
52035: LD_VAR 0 2
52039: PUSH
52040: LD_VAR 0 5
52044: ARRAY
52045: ARRAY
52046: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
52047: LD_ADDR_VAR 0 7
52051: PUSH
52052: LD_VAR 0 7
52056: PUSH
52057: LD_VAR 0 6
52061: PUSH
52062: EMPTY
52063: LIST
52064: ADD
52065: ST_TO_ADDR
// end ;
52066: GO 52022
52068: POP
52069: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
52070: LD_ADDR_VAR 0 6
52074: PUSH
52075: LD_VAR 0 6
52079: PPUSH
52080: LD_VAR 0 2
52084: PUSH
52085: LD_VAR 0 2
52089: ARRAY
52090: PPUSH
52091: LD_VAR 0 3
52095: PPUSH
52096: CALL_OW 1
52100: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
52101: LD_ADDR_VAR 0 7
52105: PUSH
52106: LD_VAR 0 7
52110: PPUSH
52111: LD_VAR 0 7
52115: PPUSH
52116: LD_VAR 0 6
52120: PPUSH
52121: CALL_OW 1
52125: ST_TO_ADDR
// for i = s_arr downto 2 do
52126: LD_ADDR_VAR 0 5
52130: PUSH
52131: DOUBLE
52132: LD_VAR 0 7
52136: INC
52137: ST_TO_ADDR
52138: LD_INT 2
52140: PUSH
52141: FOR_DOWNTO
52142: IFFALSE 52226
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
52144: LD_ADDR_VAR 0 6
52148: PUSH
52149: LD_VAR 0 7
52153: PUSH
52154: LD_VAR 0 5
52158: PUSH
52159: LD_INT 1
52161: MINUS
52162: ARRAY
52163: PPUSH
52164: LD_VAR 0 2
52168: PUSH
52169: LD_VAR 0 5
52173: PUSH
52174: LD_INT 1
52176: MINUS
52177: ARRAY
52178: PPUSH
52179: LD_VAR 0 7
52183: PUSH
52184: LD_VAR 0 5
52188: ARRAY
52189: PPUSH
52190: CALL_OW 1
52194: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
52195: LD_ADDR_VAR 0 7
52199: PUSH
52200: LD_VAR 0 7
52204: PPUSH
52205: LD_VAR 0 5
52209: PUSH
52210: LD_INT 1
52212: MINUS
52213: PPUSH
52214: LD_VAR 0 6
52218: PPUSH
52219: CALL_OW 1
52223: ST_TO_ADDR
// end ;
52224: GO 52141
52226: POP
52227: POP
// result := s_arr [ 1 ] ;
52228: LD_ADDR_VAR 0 4
52232: PUSH
52233: LD_VAR 0 7
52237: PUSH
52238: LD_INT 1
52240: ARRAY
52241: ST_TO_ADDR
// end ; end ;
52242: LD_VAR 0 4
52246: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
52247: LD_INT 0
52249: PPUSH
52250: PPUSH
// if not list then
52251: LD_VAR 0 1
52255: NOT
52256: IFFALSE 52260
// exit ;
52258: GO 52351
// i := list [ pos1 ] ;
52260: LD_ADDR_VAR 0 5
52264: PUSH
52265: LD_VAR 0 1
52269: PUSH
52270: LD_VAR 0 2
52274: ARRAY
52275: ST_TO_ADDR
// if not i then
52276: LD_VAR 0 5
52280: NOT
52281: IFFALSE 52285
// exit ;
52283: GO 52351
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
52285: LD_ADDR_VAR 0 1
52289: PUSH
52290: LD_VAR 0 1
52294: PPUSH
52295: LD_VAR 0 2
52299: PPUSH
52300: LD_VAR 0 1
52304: PUSH
52305: LD_VAR 0 3
52309: ARRAY
52310: PPUSH
52311: CALL_OW 1
52315: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
52316: LD_ADDR_VAR 0 1
52320: PUSH
52321: LD_VAR 0 1
52325: PPUSH
52326: LD_VAR 0 3
52330: PPUSH
52331: LD_VAR 0 5
52335: PPUSH
52336: CALL_OW 1
52340: ST_TO_ADDR
// result := list ;
52341: LD_ADDR_VAR 0 4
52345: PUSH
52346: LD_VAR 0 1
52350: ST_TO_ADDR
// end ;
52351: LD_VAR 0 4
52355: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
52356: LD_INT 0
52358: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
52359: LD_ADDR_VAR 0 5
52363: PUSH
52364: LD_VAR 0 1
52368: PPUSH
52369: CALL_OW 250
52373: PPUSH
52374: LD_VAR 0 1
52378: PPUSH
52379: CALL_OW 251
52383: PPUSH
52384: LD_VAR 0 2
52388: PPUSH
52389: LD_VAR 0 3
52393: PPUSH
52394: LD_VAR 0 4
52398: PPUSH
52399: CALL 52409 0 5
52403: ST_TO_ADDR
// end ;
52404: LD_VAR 0 5
52408: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
52409: LD_INT 0
52411: PPUSH
52412: PPUSH
52413: PPUSH
52414: PPUSH
// if not list then
52415: LD_VAR 0 3
52419: NOT
52420: IFFALSE 52424
// exit ;
52422: GO 52812
// result := [ ] ;
52424: LD_ADDR_VAR 0 6
52428: PUSH
52429: EMPTY
52430: ST_TO_ADDR
// for i in list do
52431: LD_ADDR_VAR 0 7
52435: PUSH
52436: LD_VAR 0 3
52440: PUSH
52441: FOR_IN
52442: IFFALSE 52644
// begin tmp := GetDistUnitXY ( i , x , y ) ;
52444: LD_ADDR_VAR 0 9
52448: PUSH
52449: LD_VAR 0 7
52453: PPUSH
52454: LD_VAR 0 1
52458: PPUSH
52459: LD_VAR 0 2
52463: PPUSH
52464: CALL_OW 297
52468: ST_TO_ADDR
// if not result then
52469: LD_VAR 0 6
52473: NOT
52474: IFFALSE 52500
// result := [ [ i , tmp ] ] else
52476: LD_ADDR_VAR 0 6
52480: PUSH
52481: LD_VAR 0 7
52485: PUSH
52486: LD_VAR 0 9
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: ST_TO_ADDR
52498: GO 52642
// begin if result [ result ] [ 2 ] < tmp then
52500: LD_VAR 0 6
52504: PUSH
52505: LD_VAR 0 6
52509: ARRAY
52510: PUSH
52511: LD_INT 2
52513: ARRAY
52514: PUSH
52515: LD_VAR 0 9
52519: LESS
52520: IFFALSE 52562
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
52522: LD_ADDR_VAR 0 6
52526: PUSH
52527: LD_VAR 0 6
52531: PPUSH
52532: LD_VAR 0 6
52536: PUSH
52537: LD_INT 1
52539: PLUS
52540: PPUSH
52541: LD_VAR 0 7
52545: PUSH
52546: LD_VAR 0 9
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PPUSH
52555: CALL_OW 2
52559: ST_TO_ADDR
52560: GO 52642
// for j = 1 to result do
52562: LD_ADDR_VAR 0 8
52566: PUSH
52567: DOUBLE
52568: LD_INT 1
52570: DEC
52571: ST_TO_ADDR
52572: LD_VAR 0 6
52576: PUSH
52577: FOR_TO
52578: IFFALSE 52640
// begin if tmp < result [ j ] [ 2 ] then
52580: LD_VAR 0 9
52584: PUSH
52585: LD_VAR 0 6
52589: PUSH
52590: LD_VAR 0 8
52594: ARRAY
52595: PUSH
52596: LD_INT 2
52598: ARRAY
52599: LESS
52600: IFFALSE 52638
// begin result := Insert ( result , j , [ i , tmp ] ) ;
52602: LD_ADDR_VAR 0 6
52606: PUSH
52607: LD_VAR 0 6
52611: PPUSH
52612: LD_VAR 0 8
52616: PPUSH
52617: LD_VAR 0 7
52621: PUSH
52622: LD_VAR 0 9
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PPUSH
52631: CALL_OW 2
52635: ST_TO_ADDR
// break ;
52636: GO 52640
// end ; end ;
52638: GO 52577
52640: POP
52641: POP
// end ; end ;
52642: GO 52441
52644: POP
52645: POP
// if result and not asc then
52646: LD_VAR 0 6
52650: PUSH
52651: LD_VAR 0 4
52655: NOT
52656: AND
52657: IFFALSE 52732
// begin tmp := result ;
52659: LD_ADDR_VAR 0 9
52663: PUSH
52664: LD_VAR 0 6
52668: ST_TO_ADDR
// for i = tmp downto 1 do
52669: LD_ADDR_VAR 0 7
52673: PUSH
52674: DOUBLE
52675: LD_VAR 0 9
52679: INC
52680: ST_TO_ADDR
52681: LD_INT 1
52683: PUSH
52684: FOR_DOWNTO
52685: IFFALSE 52730
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
52687: LD_ADDR_VAR 0 6
52691: PUSH
52692: LD_VAR 0 6
52696: PPUSH
52697: LD_VAR 0 9
52701: PUSH
52702: LD_VAR 0 7
52706: MINUS
52707: PUSH
52708: LD_INT 1
52710: PLUS
52711: PPUSH
52712: LD_VAR 0 9
52716: PUSH
52717: LD_VAR 0 7
52721: ARRAY
52722: PPUSH
52723: CALL_OW 1
52727: ST_TO_ADDR
52728: GO 52684
52730: POP
52731: POP
// end ; tmp := [ ] ;
52732: LD_ADDR_VAR 0 9
52736: PUSH
52737: EMPTY
52738: ST_TO_ADDR
// if mode then
52739: LD_VAR 0 5
52743: IFFALSE 52812
// begin for i = 1 to result do
52745: LD_ADDR_VAR 0 7
52749: PUSH
52750: DOUBLE
52751: LD_INT 1
52753: DEC
52754: ST_TO_ADDR
52755: LD_VAR 0 6
52759: PUSH
52760: FOR_TO
52761: IFFALSE 52800
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
52763: LD_ADDR_VAR 0 9
52767: PUSH
52768: LD_VAR 0 9
52772: PPUSH
52773: LD_VAR 0 7
52777: PPUSH
52778: LD_VAR 0 6
52782: PUSH
52783: LD_VAR 0 7
52787: ARRAY
52788: PUSH
52789: LD_INT 1
52791: ARRAY
52792: PPUSH
52793: CALL_OW 1
52797: ST_TO_ADDR
52798: GO 52760
52800: POP
52801: POP
// result := tmp ;
52802: LD_ADDR_VAR 0 6
52806: PUSH
52807: LD_VAR 0 9
52811: ST_TO_ADDR
// end ; end ;
52812: LD_VAR 0 6
52816: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
52817: LD_INT 0
52819: PPUSH
52820: PPUSH
52821: PPUSH
52822: PPUSH
52823: PPUSH
52824: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
52825: LD_ADDR_VAR 0 5
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: LD_INT 0
52838: PUSH
52839: EMPTY
52840: PUSH
52841: EMPTY
52842: LIST
52843: LIST
52844: LIST
52845: LIST
52846: ST_TO_ADDR
// if not x or not y then
52847: LD_VAR 0 2
52851: NOT
52852: PUSH
52853: LD_VAR 0 3
52857: NOT
52858: OR
52859: IFFALSE 52863
// exit ;
52861: GO 54509
// if not range then
52863: LD_VAR 0 4
52867: NOT
52868: IFFALSE 52878
// range := 10 ;
52870: LD_ADDR_VAR 0 4
52874: PUSH
52875: LD_INT 10
52877: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52878: LD_ADDR_VAR 0 8
52882: PUSH
52883: LD_INT 81
52885: PUSH
52886: LD_VAR 0 1
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 92
52897: PUSH
52898: LD_VAR 0 2
52902: PUSH
52903: LD_VAR 0 3
52907: PUSH
52908: LD_VAR 0 4
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 3
52921: PUSH
52922: LD_INT 21
52924: PUSH
52925: LD_INT 3
52927: PUSH
52928: EMPTY
52929: LIST
52930: LIST
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: PPUSH
52941: CALL_OW 69
52945: ST_TO_ADDR
// if not tmp then
52946: LD_VAR 0 8
52950: NOT
52951: IFFALSE 52955
// exit ;
52953: GO 54509
// for i in tmp do
52955: LD_ADDR_VAR 0 6
52959: PUSH
52960: LD_VAR 0 8
52964: PUSH
52965: FOR_IN
52966: IFFALSE 54484
// begin points := [ 0 , 0 , 0 ] ;
52968: LD_ADDR_VAR 0 9
52972: PUSH
52973: LD_INT 0
52975: PUSH
52976: LD_INT 0
52978: PUSH
52979: LD_INT 0
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: LIST
52986: ST_TO_ADDR
// bpoints := 1 ;
52987: LD_ADDR_VAR 0 10
52991: PUSH
52992: LD_INT 1
52994: ST_TO_ADDR
// case GetType ( i ) of unit_human :
52995: LD_VAR 0 6
52999: PPUSH
53000: CALL_OW 247
53004: PUSH
53005: LD_INT 1
53007: DOUBLE
53008: EQUAL
53009: IFTRUE 53013
53011: GO 53591
53013: POP
// begin if GetClass ( i ) = 1 then
53014: LD_VAR 0 6
53018: PPUSH
53019: CALL_OW 257
53023: PUSH
53024: LD_INT 1
53026: EQUAL
53027: IFFALSE 53048
// points := [ 10 , 5 , 3 ] ;
53029: LD_ADDR_VAR 0 9
53033: PUSH
53034: LD_INT 10
53036: PUSH
53037: LD_INT 5
53039: PUSH
53040: LD_INT 3
53042: PUSH
53043: EMPTY
53044: LIST
53045: LIST
53046: LIST
53047: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
53048: LD_VAR 0 6
53052: PPUSH
53053: CALL_OW 257
53057: PUSH
53058: LD_INT 2
53060: PUSH
53061: LD_INT 3
53063: PUSH
53064: LD_INT 4
53066: PUSH
53067: EMPTY
53068: LIST
53069: LIST
53070: LIST
53071: IN
53072: IFFALSE 53093
// points := [ 3 , 2 , 1 ] ;
53074: LD_ADDR_VAR 0 9
53078: PUSH
53079: LD_INT 3
53081: PUSH
53082: LD_INT 2
53084: PUSH
53085: LD_INT 1
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: LIST
53092: ST_TO_ADDR
// if GetClass ( i ) = 5 then
53093: LD_VAR 0 6
53097: PPUSH
53098: CALL_OW 257
53102: PUSH
53103: LD_INT 5
53105: EQUAL
53106: IFFALSE 53127
// points := [ 130 , 5 , 2 ] ;
53108: LD_ADDR_VAR 0 9
53112: PUSH
53113: LD_INT 130
53115: PUSH
53116: LD_INT 5
53118: PUSH
53119: LD_INT 2
53121: PUSH
53122: EMPTY
53123: LIST
53124: LIST
53125: LIST
53126: ST_TO_ADDR
// if GetClass ( i ) = 8 then
53127: LD_VAR 0 6
53131: PPUSH
53132: CALL_OW 257
53136: PUSH
53137: LD_INT 8
53139: EQUAL
53140: IFFALSE 53161
// points := [ 35 , 35 , 30 ] ;
53142: LD_ADDR_VAR 0 9
53146: PUSH
53147: LD_INT 35
53149: PUSH
53150: LD_INT 35
53152: PUSH
53153: LD_INT 30
53155: PUSH
53156: EMPTY
53157: LIST
53158: LIST
53159: LIST
53160: ST_TO_ADDR
// if GetClass ( i ) = 9 then
53161: LD_VAR 0 6
53165: PPUSH
53166: CALL_OW 257
53170: PUSH
53171: LD_INT 9
53173: EQUAL
53174: IFFALSE 53195
// points := [ 20 , 55 , 40 ] ;
53176: LD_ADDR_VAR 0 9
53180: PUSH
53181: LD_INT 20
53183: PUSH
53184: LD_INT 55
53186: PUSH
53187: LD_INT 40
53189: PUSH
53190: EMPTY
53191: LIST
53192: LIST
53193: LIST
53194: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
53195: LD_VAR 0 6
53199: PPUSH
53200: CALL_OW 257
53204: PUSH
53205: LD_INT 12
53207: PUSH
53208: LD_INT 16
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: IN
53215: IFFALSE 53236
// points := [ 5 , 3 , 2 ] ;
53217: LD_ADDR_VAR 0 9
53221: PUSH
53222: LD_INT 5
53224: PUSH
53225: LD_INT 3
53227: PUSH
53228: LD_INT 2
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: LIST
53235: ST_TO_ADDR
// if GetClass ( i ) = 17 then
53236: LD_VAR 0 6
53240: PPUSH
53241: CALL_OW 257
53245: PUSH
53246: LD_INT 17
53248: EQUAL
53249: IFFALSE 53270
// points := [ 100 , 50 , 75 ] ;
53251: LD_ADDR_VAR 0 9
53255: PUSH
53256: LD_INT 100
53258: PUSH
53259: LD_INT 50
53261: PUSH
53262: LD_INT 75
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: LIST
53269: ST_TO_ADDR
// if GetClass ( i ) = 15 then
53270: LD_VAR 0 6
53274: PPUSH
53275: CALL_OW 257
53279: PUSH
53280: LD_INT 15
53282: EQUAL
53283: IFFALSE 53304
// points := [ 10 , 5 , 3 ] ;
53285: LD_ADDR_VAR 0 9
53289: PUSH
53290: LD_INT 10
53292: PUSH
53293: LD_INT 5
53295: PUSH
53296: LD_INT 3
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: LIST
53303: ST_TO_ADDR
// if GetClass ( i ) = 14 then
53304: LD_VAR 0 6
53308: PPUSH
53309: CALL_OW 257
53313: PUSH
53314: LD_INT 14
53316: EQUAL
53317: IFFALSE 53338
// points := [ 10 , 0 , 0 ] ;
53319: LD_ADDR_VAR 0 9
53323: PUSH
53324: LD_INT 10
53326: PUSH
53327: LD_INT 0
53329: PUSH
53330: LD_INT 0
53332: PUSH
53333: EMPTY
53334: LIST
53335: LIST
53336: LIST
53337: ST_TO_ADDR
// if GetClass ( i ) = 11 then
53338: LD_VAR 0 6
53342: PPUSH
53343: CALL_OW 257
53347: PUSH
53348: LD_INT 11
53350: EQUAL
53351: IFFALSE 53372
// points := [ 30 , 10 , 5 ] ;
53353: LD_ADDR_VAR 0 9
53357: PUSH
53358: LD_INT 30
53360: PUSH
53361: LD_INT 10
53363: PUSH
53364: LD_INT 5
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: LIST
53371: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
53372: LD_VAR 0 1
53376: PPUSH
53377: LD_INT 5
53379: PPUSH
53380: CALL_OW 321
53384: PUSH
53385: LD_INT 2
53387: EQUAL
53388: IFFALSE 53405
// bpoints := bpoints * 1.8 ;
53390: LD_ADDR_VAR 0 10
53394: PUSH
53395: LD_VAR 0 10
53399: PUSH
53400: LD_REAL  1.80000000000000E+0000
53403: MUL
53404: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
53405: LD_VAR 0 6
53409: PPUSH
53410: CALL_OW 257
53414: PUSH
53415: LD_INT 1
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: LD_INT 3
53423: PUSH
53424: LD_INT 4
53426: PUSH
53427: EMPTY
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: IN
53433: PUSH
53434: LD_VAR 0 1
53438: PPUSH
53439: LD_INT 51
53441: PPUSH
53442: CALL_OW 321
53446: PUSH
53447: LD_INT 2
53449: EQUAL
53450: AND
53451: IFFALSE 53468
// bpoints := bpoints * 1.2 ;
53453: LD_ADDR_VAR 0 10
53457: PUSH
53458: LD_VAR 0 10
53462: PUSH
53463: LD_REAL  1.20000000000000E+0000
53466: MUL
53467: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
53468: LD_VAR 0 6
53472: PPUSH
53473: CALL_OW 257
53477: PUSH
53478: LD_INT 5
53480: PUSH
53481: LD_INT 7
53483: PUSH
53484: LD_INT 9
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: LIST
53491: IN
53492: PUSH
53493: LD_VAR 0 1
53497: PPUSH
53498: LD_INT 52
53500: PPUSH
53501: CALL_OW 321
53505: PUSH
53506: LD_INT 2
53508: EQUAL
53509: AND
53510: IFFALSE 53527
// bpoints := bpoints * 1.5 ;
53512: LD_ADDR_VAR 0 10
53516: PUSH
53517: LD_VAR 0 10
53521: PUSH
53522: LD_REAL  1.50000000000000E+0000
53525: MUL
53526: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
53527: LD_VAR 0 1
53531: PPUSH
53532: LD_INT 66
53534: PPUSH
53535: CALL_OW 321
53539: PUSH
53540: LD_INT 2
53542: EQUAL
53543: IFFALSE 53560
// bpoints := bpoints * 1.1 ;
53545: LD_ADDR_VAR 0 10
53549: PUSH
53550: LD_VAR 0 10
53554: PUSH
53555: LD_REAL  1.10000000000000E+0000
53558: MUL
53559: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
53560: LD_ADDR_VAR 0 10
53564: PUSH
53565: LD_VAR 0 10
53569: PUSH
53570: LD_VAR 0 6
53574: PPUSH
53575: LD_INT 1
53577: PPUSH
53578: CALL_OW 259
53582: PUSH
53583: LD_REAL  1.15000000000000E+0000
53586: MUL
53587: MUL
53588: ST_TO_ADDR
// end ; unit_vehicle :
53589: GO 54413
53591: LD_INT 2
53593: DOUBLE
53594: EQUAL
53595: IFTRUE 53599
53597: GO 54401
53599: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
53600: LD_VAR 0 6
53604: PPUSH
53605: CALL_OW 264
53609: PUSH
53610: LD_INT 2
53612: PUSH
53613: LD_INT 42
53615: PUSH
53616: LD_INT 24
53618: PUSH
53619: EMPTY
53620: LIST
53621: LIST
53622: LIST
53623: IN
53624: IFFALSE 53645
// points := [ 25 , 5 , 3 ] ;
53626: LD_ADDR_VAR 0 9
53630: PUSH
53631: LD_INT 25
53633: PUSH
53634: LD_INT 5
53636: PUSH
53637: LD_INT 3
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: LIST
53644: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
53645: LD_VAR 0 6
53649: PPUSH
53650: CALL_OW 264
53654: PUSH
53655: LD_INT 4
53657: PUSH
53658: LD_INT 43
53660: PUSH
53661: LD_INT 25
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: LIST
53668: IN
53669: IFFALSE 53690
// points := [ 40 , 15 , 5 ] ;
53671: LD_ADDR_VAR 0 9
53675: PUSH
53676: LD_INT 40
53678: PUSH
53679: LD_INT 15
53681: PUSH
53682: LD_INT 5
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: LIST
53689: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
53690: LD_VAR 0 6
53694: PPUSH
53695: CALL_OW 264
53699: PUSH
53700: LD_INT 3
53702: PUSH
53703: LD_INT 23
53705: PUSH
53706: EMPTY
53707: LIST
53708: LIST
53709: IN
53710: IFFALSE 53731
// points := [ 7 , 25 , 8 ] ;
53712: LD_ADDR_VAR 0 9
53716: PUSH
53717: LD_INT 7
53719: PUSH
53720: LD_INT 25
53722: PUSH
53723: LD_INT 8
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: LIST
53730: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
53731: LD_VAR 0 6
53735: PPUSH
53736: CALL_OW 264
53740: PUSH
53741: LD_INT 5
53743: PUSH
53744: LD_INT 27
53746: PUSH
53747: LD_INT 44
53749: PUSH
53750: EMPTY
53751: LIST
53752: LIST
53753: LIST
53754: IN
53755: IFFALSE 53776
// points := [ 14 , 50 , 16 ] ;
53757: LD_ADDR_VAR 0 9
53761: PUSH
53762: LD_INT 14
53764: PUSH
53765: LD_INT 50
53767: PUSH
53768: LD_INT 16
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: LIST
53775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
53776: LD_VAR 0 6
53780: PPUSH
53781: CALL_OW 264
53785: PUSH
53786: LD_INT 6
53788: PUSH
53789: LD_INT 46
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: IN
53796: IFFALSE 53817
// points := [ 32 , 120 , 70 ] ;
53798: LD_ADDR_VAR 0 9
53802: PUSH
53803: LD_INT 32
53805: PUSH
53806: LD_INT 120
53808: PUSH
53809: LD_INT 70
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: LIST
53816: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
53817: LD_VAR 0 6
53821: PPUSH
53822: CALL_OW 264
53826: PUSH
53827: LD_INT 7
53829: PUSH
53830: LD_INT 28
53832: PUSH
53833: LD_INT 45
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: LIST
53840: IN
53841: IFFALSE 53862
// points := [ 35 , 20 , 45 ] ;
53843: LD_ADDR_VAR 0 9
53847: PUSH
53848: LD_INT 35
53850: PUSH
53851: LD_INT 20
53853: PUSH
53854: LD_INT 45
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: LIST
53861: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
53862: LD_VAR 0 6
53866: PPUSH
53867: CALL_OW 264
53871: PUSH
53872: LD_INT 47
53874: PUSH
53875: EMPTY
53876: LIST
53877: IN
53878: IFFALSE 53899
// points := [ 67 , 45 , 75 ] ;
53880: LD_ADDR_VAR 0 9
53884: PUSH
53885: LD_INT 67
53887: PUSH
53888: LD_INT 45
53890: PUSH
53891: LD_INT 75
53893: PUSH
53894: EMPTY
53895: LIST
53896: LIST
53897: LIST
53898: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
53899: LD_VAR 0 6
53903: PPUSH
53904: CALL_OW 264
53908: PUSH
53909: LD_INT 26
53911: PUSH
53912: EMPTY
53913: LIST
53914: IN
53915: IFFALSE 53936
// points := [ 120 , 30 , 80 ] ;
53917: LD_ADDR_VAR 0 9
53921: PUSH
53922: LD_INT 120
53924: PUSH
53925: LD_INT 30
53927: PUSH
53928: LD_INT 80
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: LIST
53935: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
53936: LD_VAR 0 6
53940: PPUSH
53941: CALL_OW 264
53945: PUSH
53946: LD_INT 22
53948: PUSH
53949: EMPTY
53950: LIST
53951: IN
53952: IFFALSE 53973
// points := [ 40 , 1 , 1 ] ;
53954: LD_ADDR_VAR 0 9
53958: PUSH
53959: LD_INT 40
53961: PUSH
53962: LD_INT 1
53964: PUSH
53965: LD_INT 1
53967: PUSH
53968: EMPTY
53969: LIST
53970: LIST
53971: LIST
53972: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
53973: LD_VAR 0 6
53977: PPUSH
53978: CALL_OW 264
53982: PUSH
53983: LD_INT 29
53985: PUSH
53986: EMPTY
53987: LIST
53988: IN
53989: IFFALSE 54010
// points := [ 70 , 200 , 400 ] ;
53991: LD_ADDR_VAR 0 9
53995: PUSH
53996: LD_INT 70
53998: PUSH
53999: LD_INT 200
54001: PUSH
54002: LD_INT 400
54004: PUSH
54005: EMPTY
54006: LIST
54007: LIST
54008: LIST
54009: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
54010: LD_VAR 0 6
54014: PPUSH
54015: CALL_OW 264
54019: PUSH
54020: LD_INT 14
54022: PUSH
54023: LD_INT 53
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: IN
54030: IFFALSE 54051
// points := [ 40 , 10 , 20 ] ;
54032: LD_ADDR_VAR 0 9
54036: PUSH
54037: LD_INT 40
54039: PUSH
54040: LD_INT 10
54042: PUSH
54043: LD_INT 20
54045: PUSH
54046: EMPTY
54047: LIST
54048: LIST
54049: LIST
54050: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
54051: LD_VAR 0 6
54055: PPUSH
54056: CALL_OW 264
54060: PUSH
54061: LD_INT 9
54063: PUSH
54064: EMPTY
54065: LIST
54066: IN
54067: IFFALSE 54088
// points := [ 5 , 70 , 20 ] ;
54069: LD_ADDR_VAR 0 9
54073: PUSH
54074: LD_INT 5
54076: PUSH
54077: LD_INT 70
54079: PUSH
54080: LD_INT 20
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: LIST
54087: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
54088: LD_VAR 0 6
54092: PPUSH
54093: CALL_OW 264
54097: PUSH
54098: LD_INT 10
54100: PUSH
54101: EMPTY
54102: LIST
54103: IN
54104: IFFALSE 54125
// points := [ 35 , 110 , 70 ] ;
54106: LD_ADDR_VAR 0 9
54110: PUSH
54111: LD_INT 35
54113: PUSH
54114: LD_INT 110
54116: PUSH
54117: LD_INT 70
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: LIST
54124: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
54125: LD_VAR 0 6
54129: PPUSH
54130: CALL_OW 265
54134: PUSH
54135: LD_INT 25
54137: EQUAL
54138: IFFALSE 54159
// points := [ 80 , 65 , 100 ] ;
54140: LD_ADDR_VAR 0 9
54144: PUSH
54145: LD_INT 80
54147: PUSH
54148: LD_INT 65
54150: PUSH
54151: LD_INT 100
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: LIST
54158: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
54159: LD_VAR 0 6
54163: PPUSH
54164: CALL_OW 263
54168: PUSH
54169: LD_INT 1
54171: EQUAL
54172: IFFALSE 54207
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
54174: LD_ADDR_VAR 0 10
54178: PUSH
54179: LD_VAR 0 10
54183: PUSH
54184: LD_VAR 0 6
54188: PPUSH
54189: CALL_OW 311
54193: PPUSH
54194: LD_INT 3
54196: PPUSH
54197: CALL_OW 259
54201: PUSH
54202: LD_INT 4
54204: MUL
54205: MUL
54206: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
54207: LD_VAR 0 6
54211: PPUSH
54212: CALL_OW 263
54216: PUSH
54217: LD_INT 2
54219: EQUAL
54220: IFFALSE 54271
// begin j := IsControledBy ( i ) ;
54222: LD_ADDR_VAR 0 7
54226: PUSH
54227: LD_VAR 0 6
54231: PPUSH
54232: CALL_OW 312
54236: ST_TO_ADDR
// if j then
54237: LD_VAR 0 7
54241: IFFALSE 54271
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
54243: LD_ADDR_VAR 0 10
54247: PUSH
54248: LD_VAR 0 10
54252: PUSH
54253: LD_VAR 0 7
54257: PPUSH
54258: LD_INT 3
54260: PPUSH
54261: CALL_OW 259
54265: PUSH
54266: LD_INT 3
54268: MUL
54269: MUL
54270: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
54271: LD_VAR 0 6
54275: PPUSH
54276: CALL_OW 264
54280: PUSH
54281: LD_INT 5
54283: PUSH
54284: LD_INT 6
54286: PUSH
54287: LD_INT 46
54289: PUSH
54290: LD_INT 44
54292: PUSH
54293: LD_INT 47
54295: PUSH
54296: LD_INT 45
54298: PUSH
54299: LD_INT 28
54301: PUSH
54302: LD_INT 7
54304: PUSH
54305: LD_INT 27
54307: PUSH
54308: LD_INT 29
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: IN
54323: PUSH
54324: LD_VAR 0 1
54328: PPUSH
54329: LD_INT 52
54331: PPUSH
54332: CALL_OW 321
54336: PUSH
54337: LD_INT 2
54339: EQUAL
54340: AND
54341: IFFALSE 54358
// bpoints := bpoints * 1.2 ;
54343: LD_ADDR_VAR 0 10
54347: PUSH
54348: LD_VAR 0 10
54352: PUSH
54353: LD_REAL  1.20000000000000E+0000
54356: MUL
54357: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
54358: LD_VAR 0 6
54362: PPUSH
54363: CALL_OW 264
54367: PUSH
54368: LD_INT 6
54370: PUSH
54371: LD_INT 46
54373: PUSH
54374: LD_INT 47
54376: PUSH
54377: EMPTY
54378: LIST
54379: LIST
54380: LIST
54381: IN
54382: IFFALSE 54399
// bpoints := bpoints * 1.2 ;
54384: LD_ADDR_VAR 0 10
54388: PUSH
54389: LD_VAR 0 10
54393: PUSH
54394: LD_REAL  1.20000000000000E+0000
54397: MUL
54398: ST_TO_ADDR
// end ; unit_building :
54399: GO 54413
54401: LD_INT 3
54403: DOUBLE
54404: EQUAL
54405: IFTRUE 54409
54407: GO 54412
54409: POP
// ; end ;
54410: GO 54413
54412: POP
// for j = 1 to 3 do
54413: LD_ADDR_VAR 0 7
54417: PUSH
54418: DOUBLE
54419: LD_INT 1
54421: DEC
54422: ST_TO_ADDR
54423: LD_INT 3
54425: PUSH
54426: FOR_TO
54427: IFFALSE 54480
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
54429: LD_ADDR_VAR 0 5
54433: PUSH
54434: LD_VAR 0 5
54438: PPUSH
54439: LD_VAR 0 7
54443: PPUSH
54444: LD_VAR 0 5
54448: PUSH
54449: LD_VAR 0 7
54453: ARRAY
54454: PUSH
54455: LD_VAR 0 9
54459: PUSH
54460: LD_VAR 0 7
54464: ARRAY
54465: PUSH
54466: LD_VAR 0 10
54470: MUL
54471: PLUS
54472: PPUSH
54473: CALL_OW 1
54477: ST_TO_ADDR
54478: GO 54426
54480: POP
54481: POP
// end ;
54482: GO 52965
54484: POP
54485: POP
// result := Replace ( result , 4 , tmp ) ;
54486: LD_ADDR_VAR 0 5
54490: PUSH
54491: LD_VAR 0 5
54495: PPUSH
54496: LD_INT 4
54498: PPUSH
54499: LD_VAR 0 8
54503: PPUSH
54504: CALL_OW 1
54508: ST_TO_ADDR
// end ;
54509: LD_VAR 0 5
54513: RET
// export function DangerAtRange ( unit , range ) ; begin
54514: LD_INT 0
54516: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
54517: LD_ADDR_VAR 0 3
54521: PUSH
54522: LD_VAR 0 1
54526: PPUSH
54527: CALL_OW 255
54531: PPUSH
54532: LD_VAR 0 1
54536: PPUSH
54537: CALL_OW 250
54541: PPUSH
54542: LD_VAR 0 1
54546: PPUSH
54547: CALL_OW 251
54551: PPUSH
54552: LD_VAR 0 2
54556: PPUSH
54557: CALL 52817 0 4
54561: ST_TO_ADDR
// end ;
54562: LD_VAR 0 3
54566: RET
// export function DangerInArea ( side , area ) ; begin
54567: LD_INT 0
54569: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
54570: LD_ADDR_VAR 0 3
54574: PUSH
54575: LD_VAR 0 2
54579: PPUSH
54580: LD_INT 81
54582: PUSH
54583: LD_VAR 0 1
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PPUSH
54592: CALL_OW 70
54596: ST_TO_ADDR
// end ;
54597: LD_VAR 0 3
54601: RET
// export function IsExtension ( b ) ; begin
54602: LD_INT 0
54604: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
54605: LD_ADDR_VAR 0 2
54609: PUSH
54610: LD_VAR 0 1
54614: PUSH
54615: LD_INT 23
54617: PUSH
54618: LD_INT 20
54620: PUSH
54621: LD_INT 22
54623: PUSH
54624: LD_INT 17
54626: PUSH
54627: LD_INT 24
54629: PUSH
54630: LD_INT 21
54632: PUSH
54633: LD_INT 19
54635: PUSH
54636: LD_INT 16
54638: PUSH
54639: LD_INT 25
54641: PUSH
54642: LD_INT 18
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: IN
54657: ST_TO_ADDR
// end ;
54658: LD_VAR 0 2
54662: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
54663: LD_INT 0
54665: PPUSH
54666: PPUSH
54667: PPUSH
// result := [ ] ;
54668: LD_ADDR_VAR 0 3
54672: PUSH
54673: EMPTY
54674: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
54675: LD_ADDR_VAR 0 4
54679: PUSH
54680: LD_VAR 0 2
54684: PPUSH
54685: LD_INT 21
54687: PUSH
54688: LD_INT 3
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PPUSH
54695: CALL_OW 70
54699: ST_TO_ADDR
// if not tmp then
54700: LD_VAR 0 4
54704: NOT
54705: IFFALSE 54709
// exit ;
54707: GO 54767
// for i in tmp do
54709: LD_ADDR_VAR 0 5
54713: PUSH
54714: LD_VAR 0 4
54718: PUSH
54719: FOR_IN
54720: IFFALSE 54755
// if GetBase ( i ) <> base then
54722: LD_VAR 0 5
54726: PPUSH
54727: CALL_OW 274
54731: PUSH
54732: LD_VAR 0 1
54736: NONEQUAL
54737: IFFALSE 54753
// ComLinkToBase ( base , i ) ;
54739: LD_VAR 0 1
54743: PPUSH
54744: LD_VAR 0 5
54748: PPUSH
54749: CALL_OW 169
54753: GO 54719
54755: POP
54756: POP
// result := tmp ;
54757: LD_ADDR_VAR 0 3
54761: PUSH
54762: LD_VAR 0 4
54766: ST_TO_ADDR
// end ;
54767: LD_VAR 0 3
54771: RET
// export function ComComplete ( unit , b ) ; var i ; begin
54772: LD_INT 0
54774: PPUSH
54775: PPUSH
// if BuildingStatus ( b ) = bs_build then
54776: LD_VAR 0 2
54780: PPUSH
54781: CALL_OW 461
54785: PUSH
54786: LD_INT 1
54788: EQUAL
54789: IFFALSE 54849
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
54791: LD_VAR 0 1
54795: PPUSH
54796: LD_STRING h
54798: PUSH
54799: LD_VAR 0 2
54803: PPUSH
54804: CALL_OW 250
54808: PUSH
54809: LD_VAR 0 2
54813: PPUSH
54814: CALL_OW 251
54818: PUSH
54819: LD_VAR 0 2
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: LD_INT 0
54829: PUSH
54830: LD_INT 0
54832: PUSH
54833: EMPTY
54834: LIST
54835: LIST
54836: LIST
54837: LIST
54838: LIST
54839: LIST
54840: LIST
54841: PUSH
54842: EMPTY
54843: LIST
54844: PPUSH
54845: CALL_OW 446
// end ;
54849: LD_VAR 0 3
54853: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
54854: LD_INT 0
54856: PPUSH
54857: PPUSH
54858: PPUSH
54859: PPUSH
54860: PPUSH
54861: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
54862: LD_VAR 0 1
54866: NOT
54867: PUSH
54868: LD_VAR 0 1
54872: PPUSH
54873: CALL_OW 263
54877: PUSH
54878: LD_INT 2
54880: EQUAL
54881: NOT
54882: OR
54883: IFFALSE 54887
// exit ;
54885: GO 55203
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
54887: LD_ADDR_VAR 0 6
54891: PUSH
54892: LD_INT 22
54894: PUSH
54895: LD_VAR 0 1
54899: PPUSH
54900: CALL_OW 255
54904: PUSH
54905: EMPTY
54906: LIST
54907: LIST
54908: PUSH
54909: LD_INT 2
54911: PUSH
54912: LD_INT 30
54914: PUSH
54915: LD_INT 36
54917: PUSH
54918: EMPTY
54919: LIST
54920: LIST
54921: PUSH
54922: LD_INT 34
54924: PUSH
54925: LD_INT 31
54927: PUSH
54928: EMPTY
54929: LIST
54930: LIST
54931: PUSH
54932: EMPTY
54933: LIST
54934: LIST
54935: LIST
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PPUSH
54941: CALL_OW 69
54945: ST_TO_ADDR
// if not tmp then
54946: LD_VAR 0 6
54950: NOT
54951: IFFALSE 54955
// exit ;
54953: GO 55203
// result := [ ] ;
54955: LD_ADDR_VAR 0 2
54959: PUSH
54960: EMPTY
54961: ST_TO_ADDR
// for i in tmp do
54962: LD_ADDR_VAR 0 3
54966: PUSH
54967: LD_VAR 0 6
54971: PUSH
54972: FOR_IN
54973: IFFALSE 55044
// begin t := UnitsInside ( i ) ;
54975: LD_ADDR_VAR 0 4
54979: PUSH
54980: LD_VAR 0 3
54984: PPUSH
54985: CALL_OW 313
54989: ST_TO_ADDR
// if t then
54990: LD_VAR 0 4
54994: IFFALSE 55042
// for j in t do
54996: LD_ADDR_VAR 0 7
55000: PUSH
55001: LD_VAR 0 4
55005: PUSH
55006: FOR_IN
55007: IFFALSE 55040
// result := Insert ( result , result + 1 , j ) ;
55009: LD_ADDR_VAR 0 2
55013: PUSH
55014: LD_VAR 0 2
55018: PPUSH
55019: LD_VAR 0 2
55023: PUSH
55024: LD_INT 1
55026: PLUS
55027: PPUSH
55028: LD_VAR 0 7
55032: PPUSH
55033: CALL_OW 2
55037: ST_TO_ADDR
55038: GO 55006
55040: POP
55041: POP
// end ;
55042: GO 54972
55044: POP
55045: POP
// if not result then
55046: LD_VAR 0 2
55050: NOT
55051: IFFALSE 55055
// exit ;
55053: GO 55203
// mech := result [ 1 ] ;
55055: LD_ADDR_VAR 0 5
55059: PUSH
55060: LD_VAR 0 2
55064: PUSH
55065: LD_INT 1
55067: ARRAY
55068: ST_TO_ADDR
// if result > 1 then
55069: LD_VAR 0 2
55073: PUSH
55074: LD_INT 1
55076: GREATER
55077: IFFALSE 55189
// for i = 2 to result do
55079: LD_ADDR_VAR 0 3
55083: PUSH
55084: DOUBLE
55085: LD_INT 2
55087: DEC
55088: ST_TO_ADDR
55089: LD_VAR 0 2
55093: PUSH
55094: FOR_TO
55095: IFFALSE 55187
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
55097: LD_ADDR_VAR 0 4
55101: PUSH
55102: LD_VAR 0 2
55106: PUSH
55107: LD_VAR 0 3
55111: ARRAY
55112: PPUSH
55113: LD_INT 3
55115: PPUSH
55116: CALL_OW 259
55120: PUSH
55121: LD_VAR 0 2
55125: PUSH
55126: LD_VAR 0 3
55130: ARRAY
55131: PPUSH
55132: CALL_OW 432
55136: MINUS
55137: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
55138: LD_VAR 0 4
55142: PUSH
55143: LD_VAR 0 5
55147: PPUSH
55148: LD_INT 3
55150: PPUSH
55151: CALL_OW 259
55155: PUSH
55156: LD_VAR 0 5
55160: PPUSH
55161: CALL_OW 432
55165: MINUS
55166: GREATEREQUAL
55167: IFFALSE 55185
// mech := result [ i ] ;
55169: LD_ADDR_VAR 0 5
55173: PUSH
55174: LD_VAR 0 2
55178: PUSH
55179: LD_VAR 0 3
55183: ARRAY
55184: ST_TO_ADDR
// end ;
55185: GO 55094
55187: POP
55188: POP
// ComLinkTo ( vehicle , mech ) ;
55189: LD_VAR 0 1
55193: PPUSH
55194: LD_VAR 0 5
55198: PPUSH
55199: CALL_OW 135
// end ;
55203: LD_VAR 0 2
55207: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
55208: LD_INT 0
55210: PPUSH
55211: PPUSH
55212: PPUSH
55213: PPUSH
55214: PPUSH
55215: PPUSH
55216: PPUSH
55217: PPUSH
55218: PPUSH
55219: PPUSH
55220: PPUSH
55221: PPUSH
55222: PPUSH
// result := [ ] ;
55223: LD_ADDR_VAR 0 7
55227: PUSH
55228: EMPTY
55229: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
55230: LD_VAR 0 1
55234: PPUSH
55235: CALL_OW 266
55239: PUSH
55240: LD_INT 0
55242: PUSH
55243: LD_INT 1
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: IN
55250: NOT
55251: IFFALSE 55255
// exit ;
55253: GO 56886
// if name then
55255: LD_VAR 0 3
55259: IFFALSE 55275
// SetBName ( base_dep , name ) ;
55261: LD_VAR 0 1
55265: PPUSH
55266: LD_VAR 0 3
55270: PPUSH
55271: CALL_OW 500
// base := GetBase ( base_dep ) ;
55275: LD_ADDR_VAR 0 15
55279: PUSH
55280: LD_VAR 0 1
55284: PPUSH
55285: CALL_OW 274
55289: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
55290: LD_ADDR_VAR 0 16
55294: PUSH
55295: LD_VAR 0 1
55299: PPUSH
55300: CALL_OW 255
55304: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
55305: LD_ADDR_VAR 0 17
55309: PUSH
55310: LD_VAR 0 1
55314: PPUSH
55315: CALL_OW 248
55319: ST_TO_ADDR
// if sources then
55320: LD_VAR 0 5
55324: IFFALSE 55371
// for i = 1 to 3 do
55326: LD_ADDR_VAR 0 8
55330: PUSH
55331: DOUBLE
55332: LD_INT 1
55334: DEC
55335: ST_TO_ADDR
55336: LD_INT 3
55338: PUSH
55339: FOR_TO
55340: IFFALSE 55369
// AddResourceType ( base , i , sources [ i ] ) ;
55342: LD_VAR 0 15
55346: PPUSH
55347: LD_VAR 0 8
55351: PPUSH
55352: LD_VAR 0 5
55356: PUSH
55357: LD_VAR 0 8
55361: ARRAY
55362: PPUSH
55363: CALL_OW 276
55367: GO 55339
55369: POP
55370: POP
// buildings := GetBaseBuildings ( base , area ) ;
55371: LD_ADDR_VAR 0 18
55375: PUSH
55376: LD_VAR 0 15
55380: PPUSH
55381: LD_VAR 0 2
55385: PPUSH
55386: CALL 54663 0 2
55390: ST_TO_ADDR
// InitHc ;
55391: CALL_OW 19
// InitUc ;
55395: CALL_OW 18
// uc_side := side ;
55399: LD_ADDR_OWVAR 20
55403: PUSH
55404: LD_VAR 0 16
55408: ST_TO_ADDR
// uc_nation := nation ;
55409: LD_ADDR_OWVAR 21
55413: PUSH
55414: LD_VAR 0 17
55418: ST_TO_ADDR
// if buildings then
55419: LD_VAR 0 18
55423: IFFALSE 56745
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
55425: LD_ADDR_VAR 0 19
55429: PUSH
55430: LD_VAR 0 18
55434: PPUSH
55435: LD_INT 2
55437: PUSH
55438: LD_INT 30
55440: PUSH
55441: LD_INT 29
55443: PUSH
55444: EMPTY
55445: LIST
55446: LIST
55447: PUSH
55448: LD_INT 30
55450: PUSH
55451: LD_INT 30
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: PUSH
55458: EMPTY
55459: LIST
55460: LIST
55461: LIST
55462: PPUSH
55463: CALL_OW 72
55467: ST_TO_ADDR
// if tmp then
55468: LD_VAR 0 19
55472: IFFALSE 55520
// for i in tmp do
55474: LD_ADDR_VAR 0 8
55478: PUSH
55479: LD_VAR 0 19
55483: PUSH
55484: FOR_IN
55485: IFFALSE 55518
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
55487: LD_VAR 0 8
55491: PPUSH
55492: CALL_OW 250
55496: PPUSH
55497: LD_VAR 0 8
55501: PPUSH
55502: CALL_OW 251
55506: PPUSH
55507: LD_VAR 0 16
55511: PPUSH
55512: CALL_OW 441
55516: GO 55484
55518: POP
55519: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
55520: LD_VAR 0 18
55524: PPUSH
55525: LD_INT 2
55527: PUSH
55528: LD_INT 30
55530: PUSH
55531: LD_INT 32
55533: PUSH
55534: EMPTY
55535: LIST
55536: LIST
55537: PUSH
55538: LD_INT 30
55540: PUSH
55541: LD_INT 33
55543: PUSH
55544: EMPTY
55545: LIST
55546: LIST
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: LIST
55552: PPUSH
55553: CALL_OW 72
55557: IFFALSE 55645
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
55559: LD_ADDR_VAR 0 8
55563: PUSH
55564: LD_VAR 0 18
55568: PPUSH
55569: LD_INT 2
55571: PUSH
55572: LD_INT 30
55574: PUSH
55575: LD_INT 32
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 30
55584: PUSH
55585: LD_INT 33
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: EMPTY
55593: LIST
55594: LIST
55595: LIST
55596: PPUSH
55597: CALL_OW 72
55601: PUSH
55602: FOR_IN
55603: IFFALSE 55643
// begin if not GetBWeapon ( i ) then
55605: LD_VAR 0 8
55609: PPUSH
55610: CALL_OW 269
55614: NOT
55615: IFFALSE 55641
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
55617: LD_VAR 0 8
55621: PPUSH
55622: LD_VAR 0 8
55626: PPUSH
55627: LD_VAR 0 2
55631: PPUSH
55632: CALL 56891 0 2
55636: PPUSH
55637: CALL_OW 431
// end ;
55641: GO 55602
55643: POP
55644: POP
// end ; for i = 1 to personel do
55645: LD_ADDR_VAR 0 8
55649: PUSH
55650: DOUBLE
55651: LD_INT 1
55653: DEC
55654: ST_TO_ADDR
55655: LD_VAR 0 6
55659: PUSH
55660: FOR_TO
55661: IFFALSE 56725
// begin if i > 4 then
55663: LD_VAR 0 8
55667: PUSH
55668: LD_INT 4
55670: GREATER
55671: IFFALSE 55675
// break ;
55673: GO 56725
// case i of 1 :
55675: LD_VAR 0 8
55679: PUSH
55680: LD_INT 1
55682: DOUBLE
55683: EQUAL
55684: IFTRUE 55688
55686: GO 55768
55688: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
55689: LD_ADDR_VAR 0 12
55693: PUSH
55694: LD_VAR 0 18
55698: PPUSH
55699: LD_INT 22
55701: PUSH
55702: LD_VAR 0 16
55706: PUSH
55707: EMPTY
55708: LIST
55709: LIST
55710: PUSH
55711: LD_INT 58
55713: PUSH
55714: EMPTY
55715: LIST
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: LD_INT 30
55722: PUSH
55723: LD_INT 32
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 30
55732: PUSH
55733: LD_INT 4
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 30
55742: PUSH
55743: LD_INT 5
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: EMPTY
55751: LIST
55752: LIST
55753: LIST
55754: LIST
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: PPUSH
55761: CALL_OW 72
55765: ST_TO_ADDR
55766: GO 55990
55768: LD_INT 2
55770: DOUBLE
55771: EQUAL
55772: IFTRUE 55776
55774: GO 55838
55776: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
55777: LD_ADDR_VAR 0 12
55781: PUSH
55782: LD_VAR 0 18
55786: PPUSH
55787: LD_INT 22
55789: PUSH
55790: LD_VAR 0 16
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 30
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 30
55814: PUSH
55815: LD_INT 1
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: PUSH
55827: EMPTY
55828: LIST
55829: LIST
55830: PPUSH
55831: CALL_OW 72
55835: ST_TO_ADDR
55836: GO 55990
55838: LD_INT 3
55840: DOUBLE
55841: EQUAL
55842: IFTRUE 55846
55844: GO 55908
55846: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
55847: LD_ADDR_VAR 0 12
55851: PUSH
55852: LD_VAR 0 18
55856: PPUSH
55857: LD_INT 22
55859: PUSH
55860: LD_VAR 0 16
55864: PUSH
55865: EMPTY
55866: LIST
55867: LIST
55868: PUSH
55869: LD_INT 2
55871: PUSH
55872: LD_INT 30
55874: PUSH
55875: LD_INT 2
55877: PUSH
55878: EMPTY
55879: LIST
55880: LIST
55881: PUSH
55882: LD_INT 30
55884: PUSH
55885: LD_INT 3
55887: PUSH
55888: EMPTY
55889: LIST
55890: LIST
55891: PUSH
55892: EMPTY
55893: LIST
55894: LIST
55895: LIST
55896: PUSH
55897: EMPTY
55898: LIST
55899: LIST
55900: PPUSH
55901: CALL_OW 72
55905: ST_TO_ADDR
55906: GO 55990
55908: LD_INT 4
55910: DOUBLE
55911: EQUAL
55912: IFTRUE 55916
55914: GO 55989
55916: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
55917: LD_ADDR_VAR 0 12
55921: PUSH
55922: LD_VAR 0 18
55926: PPUSH
55927: LD_INT 22
55929: PUSH
55930: LD_VAR 0 16
55934: PUSH
55935: EMPTY
55936: LIST
55937: LIST
55938: PUSH
55939: LD_INT 2
55941: PUSH
55942: LD_INT 30
55944: PUSH
55945: LD_INT 6
55947: PUSH
55948: EMPTY
55949: LIST
55950: LIST
55951: PUSH
55952: LD_INT 30
55954: PUSH
55955: LD_INT 7
55957: PUSH
55958: EMPTY
55959: LIST
55960: LIST
55961: PUSH
55962: LD_INT 30
55964: PUSH
55965: LD_INT 8
55967: PUSH
55968: EMPTY
55969: LIST
55970: LIST
55971: PUSH
55972: EMPTY
55973: LIST
55974: LIST
55975: LIST
55976: LIST
55977: PUSH
55978: EMPTY
55979: LIST
55980: LIST
55981: PPUSH
55982: CALL_OW 72
55986: ST_TO_ADDR
55987: GO 55990
55989: POP
// if i = 1 then
55990: LD_VAR 0 8
55994: PUSH
55995: LD_INT 1
55997: EQUAL
55998: IFFALSE 56109
// begin tmp := [ ] ;
56000: LD_ADDR_VAR 0 19
56004: PUSH
56005: EMPTY
56006: ST_TO_ADDR
// for j in f do
56007: LD_ADDR_VAR 0 9
56011: PUSH
56012: LD_VAR 0 12
56016: PUSH
56017: FOR_IN
56018: IFFALSE 56091
// if GetBType ( j ) = b_bunker then
56020: LD_VAR 0 9
56024: PPUSH
56025: CALL_OW 266
56029: PUSH
56030: LD_INT 32
56032: EQUAL
56033: IFFALSE 56060
// tmp := Insert ( tmp , 1 , j ) else
56035: LD_ADDR_VAR 0 19
56039: PUSH
56040: LD_VAR 0 19
56044: PPUSH
56045: LD_INT 1
56047: PPUSH
56048: LD_VAR 0 9
56052: PPUSH
56053: CALL_OW 2
56057: ST_TO_ADDR
56058: GO 56089
// tmp := Insert ( tmp , tmp + 1 , j ) ;
56060: LD_ADDR_VAR 0 19
56064: PUSH
56065: LD_VAR 0 19
56069: PPUSH
56070: LD_VAR 0 19
56074: PUSH
56075: LD_INT 1
56077: PLUS
56078: PPUSH
56079: LD_VAR 0 9
56083: PPUSH
56084: CALL_OW 2
56088: ST_TO_ADDR
56089: GO 56017
56091: POP
56092: POP
// if tmp then
56093: LD_VAR 0 19
56097: IFFALSE 56109
// f := tmp ;
56099: LD_ADDR_VAR 0 12
56103: PUSH
56104: LD_VAR 0 19
56108: ST_TO_ADDR
// end ; x := personel [ i ] ;
56109: LD_ADDR_VAR 0 13
56113: PUSH
56114: LD_VAR 0 6
56118: PUSH
56119: LD_VAR 0 8
56123: ARRAY
56124: ST_TO_ADDR
// if x = - 1 then
56125: LD_VAR 0 13
56129: PUSH
56130: LD_INT 1
56132: NEG
56133: EQUAL
56134: IFFALSE 56343
// begin for j in f do
56136: LD_ADDR_VAR 0 9
56140: PUSH
56141: LD_VAR 0 12
56145: PUSH
56146: FOR_IN
56147: IFFALSE 56339
// repeat InitHc ;
56149: CALL_OW 19
// if GetBType ( j ) = b_barracks then
56153: LD_VAR 0 9
56157: PPUSH
56158: CALL_OW 266
56162: PUSH
56163: LD_INT 5
56165: EQUAL
56166: IFFALSE 56236
// begin if UnitsInside ( j ) < 3 then
56168: LD_VAR 0 9
56172: PPUSH
56173: CALL_OW 313
56177: PUSH
56178: LD_INT 3
56180: LESS
56181: IFFALSE 56217
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56183: LD_INT 0
56185: PPUSH
56186: LD_INT 5
56188: PUSH
56189: LD_INT 8
56191: PUSH
56192: LD_INT 9
56194: PUSH
56195: EMPTY
56196: LIST
56197: LIST
56198: LIST
56199: PUSH
56200: LD_VAR 0 17
56204: ARRAY
56205: PPUSH
56206: LD_VAR 0 4
56210: PPUSH
56211: CALL_OW 380
56215: GO 56234
// PrepareHuman ( false , i , skill ) ;
56217: LD_INT 0
56219: PPUSH
56220: LD_VAR 0 8
56224: PPUSH
56225: LD_VAR 0 4
56229: PPUSH
56230: CALL_OW 380
// end else
56234: GO 56253
// PrepareHuman ( false , i , skill ) ;
56236: LD_INT 0
56238: PPUSH
56239: LD_VAR 0 8
56243: PPUSH
56244: LD_VAR 0 4
56248: PPUSH
56249: CALL_OW 380
// un := CreateHuman ;
56253: LD_ADDR_VAR 0 14
56257: PUSH
56258: CALL_OW 44
56262: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56263: LD_ADDR_VAR 0 7
56267: PUSH
56268: LD_VAR 0 7
56272: PPUSH
56273: LD_INT 1
56275: PPUSH
56276: LD_VAR 0 14
56280: PPUSH
56281: CALL_OW 2
56285: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
56286: LD_VAR 0 14
56290: PPUSH
56291: LD_VAR 0 9
56295: PPUSH
56296: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
56300: LD_VAR 0 9
56304: PPUSH
56305: CALL_OW 313
56309: PUSH
56310: LD_INT 6
56312: EQUAL
56313: PUSH
56314: LD_VAR 0 9
56318: PPUSH
56319: CALL_OW 266
56323: PUSH
56324: LD_INT 32
56326: PUSH
56327: LD_INT 31
56329: PUSH
56330: EMPTY
56331: LIST
56332: LIST
56333: IN
56334: OR
56335: IFFALSE 56149
56337: GO 56146
56339: POP
56340: POP
// end else
56341: GO 56723
// for j = 1 to x do
56343: LD_ADDR_VAR 0 9
56347: PUSH
56348: DOUBLE
56349: LD_INT 1
56351: DEC
56352: ST_TO_ADDR
56353: LD_VAR 0 13
56357: PUSH
56358: FOR_TO
56359: IFFALSE 56721
// begin InitHc ;
56361: CALL_OW 19
// if not f then
56365: LD_VAR 0 12
56369: NOT
56370: IFFALSE 56459
// begin PrepareHuman ( false , i , skill ) ;
56372: LD_INT 0
56374: PPUSH
56375: LD_VAR 0 8
56379: PPUSH
56380: LD_VAR 0 4
56384: PPUSH
56385: CALL_OW 380
// un := CreateHuman ;
56389: LD_ADDR_VAR 0 14
56393: PUSH
56394: CALL_OW 44
56398: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56399: LD_ADDR_VAR 0 7
56403: PUSH
56404: LD_VAR 0 7
56408: PPUSH
56409: LD_INT 1
56411: PPUSH
56412: LD_VAR 0 14
56416: PPUSH
56417: CALL_OW 2
56421: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56422: LD_VAR 0 14
56426: PPUSH
56427: LD_VAR 0 1
56431: PPUSH
56432: CALL_OW 250
56436: PPUSH
56437: LD_VAR 0 1
56441: PPUSH
56442: CALL_OW 251
56446: PPUSH
56447: LD_INT 10
56449: PPUSH
56450: LD_INT 0
56452: PPUSH
56453: CALL_OW 50
// continue ;
56457: GO 56358
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
56459: LD_VAR 0 12
56463: PUSH
56464: LD_INT 1
56466: ARRAY
56467: PPUSH
56468: CALL_OW 313
56472: PUSH
56473: LD_VAR 0 12
56477: PUSH
56478: LD_INT 1
56480: ARRAY
56481: PPUSH
56482: CALL_OW 266
56486: PUSH
56487: LD_INT 32
56489: PUSH
56490: LD_INT 31
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: IN
56497: AND
56498: PUSH
56499: LD_VAR 0 12
56503: PUSH
56504: LD_INT 1
56506: ARRAY
56507: PPUSH
56508: CALL_OW 313
56512: PUSH
56513: LD_INT 6
56515: EQUAL
56516: OR
56517: IFFALSE 56537
// f := Delete ( f , 1 ) ;
56519: LD_ADDR_VAR 0 12
56523: PUSH
56524: LD_VAR 0 12
56528: PPUSH
56529: LD_INT 1
56531: PPUSH
56532: CALL_OW 3
56536: ST_TO_ADDR
// if not f then
56537: LD_VAR 0 12
56541: NOT
56542: IFFALSE 56560
// begin x := x + 2 ;
56544: LD_ADDR_VAR 0 13
56548: PUSH
56549: LD_VAR 0 13
56553: PUSH
56554: LD_INT 2
56556: PLUS
56557: ST_TO_ADDR
// continue ;
56558: GO 56358
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
56560: LD_VAR 0 12
56564: PUSH
56565: LD_INT 1
56567: ARRAY
56568: PPUSH
56569: CALL_OW 266
56573: PUSH
56574: LD_INT 5
56576: EQUAL
56577: IFFALSE 56651
// begin if UnitsInside ( f [ 1 ] ) < 3 then
56579: LD_VAR 0 12
56583: PUSH
56584: LD_INT 1
56586: ARRAY
56587: PPUSH
56588: CALL_OW 313
56592: PUSH
56593: LD_INT 3
56595: LESS
56596: IFFALSE 56632
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56598: LD_INT 0
56600: PPUSH
56601: LD_INT 5
56603: PUSH
56604: LD_INT 8
56606: PUSH
56607: LD_INT 9
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: LIST
56614: PUSH
56615: LD_VAR 0 17
56619: ARRAY
56620: PPUSH
56621: LD_VAR 0 4
56625: PPUSH
56626: CALL_OW 380
56630: GO 56649
// PrepareHuman ( false , i , skill ) ;
56632: LD_INT 0
56634: PPUSH
56635: LD_VAR 0 8
56639: PPUSH
56640: LD_VAR 0 4
56644: PPUSH
56645: CALL_OW 380
// end else
56649: GO 56668
// PrepareHuman ( false , i , skill ) ;
56651: LD_INT 0
56653: PPUSH
56654: LD_VAR 0 8
56658: PPUSH
56659: LD_VAR 0 4
56663: PPUSH
56664: CALL_OW 380
// un := CreateHuman ;
56668: LD_ADDR_VAR 0 14
56672: PUSH
56673: CALL_OW 44
56677: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56678: LD_ADDR_VAR 0 7
56682: PUSH
56683: LD_VAR 0 7
56687: PPUSH
56688: LD_INT 1
56690: PPUSH
56691: LD_VAR 0 14
56695: PPUSH
56696: CALL_OW 2
56700: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
56701: LD_VAR 0 14
56705: PPUSH
56706: LD_VAR 0 12
56710: PUSH
56711: LD_INT 1
56713: ARRAY
56714: PPUSH
56715: CALL_OW 52
// end ;
56719: GO 56358
56721: POP
56722: POP
// end ;
56723: GO 55660
56725: POP
56726: POP
// result := result ^ buildings ;
56727: LD_ADDR_VAR 0 7
56731: PUSH
56732: LD_VAR 0 7
56736: PUSH
56737: LD_VAR 0 18
56741: ADD
56742: ST_TO_ADDR
// end else
56743: GO 56886
// begin for i = 1 to personel do
56745: LD_ADDR_VAR 0 8
56749: PUSH
56750: DOUBLE
56751: LD_INT 1
56753: DEC
56754: ST_TO_ADDR
56755: LD_VAR 0 6
56759: PUSH
56760: FOR_TO
56761: IFFALSE 56884
// begin if i > 4 then
56763: LD_VAR 0 8
56767: PUSH
56768: LD_INT 4
56770: GREATER
56771: IFFALSE 56775
// break ;
56773: GO 56884
// x := personel [ i ] ;
56775: LD_ADDR_VAR 0 13
56779: PUSH
56780: LD_VAR 0 6
56784: PUSH
56785: LD_VAR 0 8
56789: ARRAY
56790: ST_TO_ADDR
// if x = - 1 then
56791: LD_VAR 0 13
56795: PUSH
56796: LD_INT 1
56798: NEG
56799: EQUAL
56800: IFFALSE 56804
// continue ;
56802: GO 56760
// PrepareHuman ( false , i , skill ) ;
56804: LD_INT 0
56806: PPUSH
56807: LD_VAR 0 8
56811: PPUSH
56812: LD_VAR 0 4
56816: PPUSH
56817: CALL_OW 380
// un := CreateHuman ;
56821: LD_ADDR_VAR 0 14
56825: PUSH
56826: CALL_OW 44
56830: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56831: LD_VAR 0 14
56835: PPUSH
56836: LD_VAR 0 1
56840: PPUSH
56841: CALL_OW 250
56845: PPUSH
56846: LD_VAR 0 1
56850: PPUSH
56851: CALL_OW 251
56855: PPUSH
56856: LD_INT 10
56858: PPUSH
56859: LD_INT 0
56861: PPUSH
56862: CALL_OW 50
// result := result ^ un ;
56866: LD_ADDR_VAR 0 7
56870: PUSH
56871: LD_VAR 0 7
56875: PUSH
56876: LD_VAR 0 14
56880: ADD
56881: ST_TO_ADDR
// end ;
56882: GO 56760
56884: POP
56885: POP
// end ; end ;
56886: LD_VAR 0 7
56890: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
56891: LD_INT 0
56893: PPUSH
56894: PPUSH
56895: PPUSH
56896: PPUSH
56897: PPUSH
56898: PPUSH
56899: PPUSH
56900: PPUSH
56901: PPUSH
56902: PPUSH
56903: PPUSH
56904: PPUSH
56905: PPUSH
56906: PPUSH
56907: PPUSH
56908: PPUSH
// result := false ;
56909: LD_ADDR_VAR 0 3
56913: PUSH
56914: LD_INT 0
56916: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
56917: LD_VAR 0 1
56921: NOT
56922: PUSH
56923: LD_VAR 0 1
56927: PPUSH
56928: CALL_OW 266
56932: PUSH
56933: LD_INT 32
56935: PUSH
56936: LD_INT 33
56938: PUSH
56939: EMPTY
56940: LIST
56941: LIST
56942: IN
56943: NOT
56944: OR
56945: IFFALSE 56949
// exit ;
56947: GO 58085
// nat := GetNation ( tower ) ;
56949: LD_ADDR_VAR 0 12
56953: PUSH
56954: LD_VAR 0 1
56958: PPUSH
56959: CALL_OW 248
56963: ST_TO_ADDR
// side := GetSide ( tower ) ;
56964: LD_ADDR_VAR 0 16
56968: PUSH
56969: LD_VAR 0 1
56973: PPUSH
56974: CALL_OW 255
56978: ST_TO_ADDR
// x := GetX ( tower ) ;
56979: LD_ADDR_VAR 0 10
56983: PUSH
56984: LD_VAR 0 1
56988: PPUSH
56989: CALL_OW 250
56993: ST_TO_ADDR
// y := GetY ( tower ) ;
56994: LD_ADDR_VAR 0 11
56998: PUSH
56999: LD_VAR 0 1
57003: PPUSH
57004: CALL_OW 251
57008: ST_TO_ADDR
// if not x or not y then
57009: LD_VAR 0 10
57013: NOT
57014: PUSH
57015: LD_VAR 0 11
57019: NOT
57020: OR
57021: IFFALSE 57025
// exit ;
57023: GO 58085
// weapon := 0 ;
57025: LD_ADDR_VAR 0 18
57029: PUSH
57030: LD_INT 0
57032: ST_TO_ADDR
// fac_list := [ ] ;
57033: LD_ADDR_VAR 0 17
57037: PUSH
57038: EMPTY
57039: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
57040: LD_ADDR_VAR 0 6
57044: PUSH
57045: LD_VAR 0 1
57049: PPUSH
57050: CALL_OW 274
57054: PPUSH
57055: LD_VAR 0 2
57059: PPUSH
57060: CALL 54663 0 2
57064: PPUSH
57065: LD_INT 30
57067: PUSH
57068: LD_INT 3
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PPUSH
57075: CALL_OW 72
57079: ST_TO_ADDR
// if not factories then
57080: LD_VAR 0 6
57084: NOT
57085: IFFALSE 57089
// exit ;
57087: GO 58085
// for i in factories do
57089: LD_ADDR_VAR 0 8
57093: PUSH
57094: LD_VAR 0 6
57098: PUSH
57099: FOR_IN
57100: IFFALSE 57125
// fac_list := fac_list union AvailableWeaponList ( i ) ;
57102: LD_ADDR_VAR 0 17
57106: PUSH
57107: LD_VAR 0 17
57111: PUSH
57112: LD_VAR 0 8
57116: PPUSH
57117: CALL_OW 478
57121: UNION
57122: ST_TO_ADDR
57123: GO 57099
57125: POP
57126: POP
// if not fac_list then
57127: LD_VAR 0 17
57131: NOT
57132: IFFALSE 57136
// exit ;
57134: GO 58085
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
57136: LD_ADDR_VAR 0 5
57140: PUSH
57141: LD_INT 4
57143: PUSH
57144: LD_INT 5
57146: PUSH
57147: LD_INT 9
57149: PUSH
57150: LD_INT 10
57152: PUSH
57153: LD_INT 6
57155: PUSH
57156: LD_INT 7
57158: PUSH
57159: LD_INT 11
57161: PUSH
57162: EMPTY
57163: LIST
57164: LIST
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: LIST
57170: PUSH
57171: LD_INT 27
57173: PUSH
57174: LD_INT 28
57176: PUSH
57177: LD_INT 26
57179: PUSH
57180: LD_INT 30
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: LIST
57187: LIST
57188: PUSH
57189: LD_INT 43
57191: PUSH
57192: LD_INT 44
57194: PUSH
57195: LD_INT 46
57197: PUSH
57198: LD_INT 45
57200: PUSH
57201: LD_INT 47
57203: PUSH
57204: LD_INT 49
57206: PUSH
57207: EMPTY
57208: LIST
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: PUSH
57215: EMPTY
57216: LIST
57217: LIST
57218: LIST
57219: PUSH
57220: LD_VAR 0 12
57224: ARRAY
57225: ST_TO_ADDR
// for i in list do
57226: LD_ADDR_VAR 0 8
57230: PUSH
57231: LD_VAR 0 5
57235: PUSH
57236: FOR_IN
57237: IFFALSE 57270
// if not i in fac_list then
57239: LD_VAR 0 8
57243: PUSH
57244: LD_VAR 0 17
57248: IN
57249: NOT
57250: IFFALSE 57268
// list := list diff i ;
57252: LD_ADDR_VAR 0 5
57256: PUSH
57257: LD_VAR 0 5
57261: PUSH
57262: LD_VAR 0 8
57266: DIFF
57267: ST_TO_ADDR
57268: GO 57236
57270: POP
57271: POP
// if not list then
57272: LD_VAR 0 5
57276: NOT
57277: IFFALSE 57281
// exit ;
57279: GO 58085
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
57281: LD_VAR 0 12
57285: PUSH
57286: LD_INT 3
57288: EQUAL
57289: PUSH
57290: LD_INT 49
57292: PUSH
57293: LD_VAR 0 5
57297: IN
57298: AND
57299: PUSH
57300: LD_INT 31
57302: PPUSH
57303: LD_VAR 0 16
57307: PPUSH
57308: CALL_OW 321
57312: PUSH
57313: LD_INT 2
57315: EQUAL
57316: AND
57317: IFFALSE 57377
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
57319: LD_INT 22
57321: PUSH
57322: LD_VAR 0 16
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: PUSH
57331: LD_INT 35
57333: PUSH
57334: LD_INT 49
57336: PUSH
57337: EMPTY
57338: LIST
57339: LIST
57340: PUSH
57341: LD_INT 91
57343: PUSH
57344: LD_VAR 0 1
57348: PUSH
57349: LD_INT 10
57351: PUSH
57352: EMPTY
57353: LIST
57354: LIST
57355: LIST
57356: PUSH
57357: EMPTY
57358: LIST
57359: LIST
57360: LIST
57361: PPUSH
57362: CALL_OW 69
57366: NOT
57367: IFFALSE 57377
// weapon := ru_time_lapser ;
57369: LD_ADDR_VAR 0 18
57373: PUSH
57374: LD_INT 49
57376: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
57377: LD_VAR 0 12
57381: PUSH
57382: LD_INT 1
57384: PUSH
57385: LD_INT 2
57387: PUSH
57388: EMPTY
57389: LIST
57390: LIST
57391: IN
57392: PUSH
57393: LD_INT 11
57395: PUSH
57396: LD_VAR 0 5
57400: IN
57401: PUSH
57402: LD_INT 30
57404: PUSH
57405: LD_VAR 0 5
57409: IN
57410: OR
57411: AND
57412: PUSH
57413: LD_INT 6
57415: PPUSH
57416: LD_VAR 0 16
57420: PPUSH
57421: CALL_OW 321
57425: PUSH
57426: LD_INT 2
57428: EQUAL
57429: AND
57430: IFFALSE 57595
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
57432: LD_INT 22
57434: PUSH
57435: LD_VAR 0 16
57439: PUSH
57440: EMPTY
57441: LIST
57442: LIST
57443: PUSH
57444: LD_INT 2
57446: PUSH
57447: LD_INT 35
57449: PUSH
57450: LD_INT 11
57452: PUSH
57453: EMPTY
57454: LIST
57455: LIST
57456: PUSH
57457: LD_INT 35
57459: PUSH
57460: LD_INT 30
57462: PUSH
57463: EMPTY
57464: LIST
57465: LIST
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: LIST
57471: PUSH
57472: LD_INT 91
57474: PUSH
57475: LD_VAR 0 1
57479: PUSH
57480: LD_INT 18
57482: PUSH
57483: EMPTY
57484: LIST
57485: LIST
57486: LIST
57487: PUSH
57488: EMPTY
57489: LIST
57490: LIST
57491: LIST
57492: PPUSH
57493: CALL_OW 69
57497: NOT
57498: PUSH
57499: LD_INT 22
57501: PUSH
57502: LD_VAR 0 16
57506: PUSH
57507: EMPTY
57508: LIST
57509: LIST
57510: PUSH
57511: LD_INT 2
57513: PUSH
57514: LD_INT 30
57516: PUSH
57517: LD_INT 32
57519: PUSH
57520: EMPTY
57521: LIST
57522: LIST
57523: PUSH
57524: LD_INT 30
57526: PUSH
57527: LD_INT 33
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: LIST
57538: PUSH
57539: LD_INT 91
57541: PUSH
57542: LD_VAR 0 1
57546: PUSH
57547: LD_INT 12
57549: PUSH
57550: EMPTY
57551: LIST
57552: LIST
57553: LIST
57554: PUSH
57555: EMPTY
57556: LIST
57557: LIST
57558: LIST
57559: PUSH
57560: EMPTY
57561: LIST
57562: PPUSH
57563: CALL_OW 69
57567: PUSH
57568: LD_INT 2
57570: GREATER
57571: AND
57572: IFFALSE 57595
// weapon := [ us_radar , ar_radar ] [ nat ] ;
57574: LD_ADDR_VAR 0 18
57578: PUSH
57579: LD_INT 11
57581: PUSH
57582: LD_INT 30
57584: PUSH
57585: EMPTY
57586: LIST
57587: LIST
57588: PUSH
57589: LD_VAR 0 12
57593: ARRAY
57594: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
57595: LD_VAR 0 18
57599: NOT
57600: PUSH
57601: LD_INT 40
57603: PPUSH
57604: LD_VAR 0 16
57608: PPUSH
57609: CALL_OW 321
57613: PUSH
57614: LD_INT 2
57616: EQUAL
57617: AND
57618: PUSH
57619: LD_INT 7
57621: PUSH
57622: LD_VAR 0 5
57626: IN
57627: PUSH
57628: LD_INT 28
57630: PUSH
57631: LD_VAR 0 5
57635: IN
57636: OR
57637: PUSH
57638: LD_INT 45
57640: PUSH
57641: LD_VAR 0 5
57645: IN
57646: OR
57647: AND
57648: IFFALSE 57902
// begin hex := GetHexInfo ( x , y ) ;
57650: LD_ADDR_VAR 0 4
57654: PUSH
57655: LD_VAR 0 10
57659: PPUSH
57660: LD_VAR 0 11
57664: PPUSH
57665: CALL_OW 546
57669: ST_TO_ADDR
// if hex [ 1 ] then
57670: LD_VAR 0 4
57674: PUSH
57675: LD_INT 1
57677: ARRAY
57678: IFFALSE 57682
// exit ;
57680: GO 58085
// height := hex [ 2 ] ;
57682: LD_ADDR_VAR 0 15
57686: PUSH
57687: LD_VAR 0 4
57691: PUSH
57692: LD_INT 2
57694: ARRAY
57695: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
57696: LD_ADDR_VAR 0 14
57700: PUSH
57701: LD_INT 0
57703: PUSH
57704: LD_INT 2
57706: PUSH
57707: LD_INT 3
57709: PUSH
57710: LD_INT 5
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: ST_TO_ADDR
// for i in tmp do
57719: LD_ADDR_VAR 0 8
57723: PUSH
57724: LD_VAR 0 14
57728: PUSH
57729: FOR_IN
57730: IFFALSE 57900
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
57732: LD_ADDR_VAR 0 9
57736: PUSH
57737: LD_VAR 0 10
57741: PPUSH
57742: LD_VAR 0 8
57746: PPUSH
57747: LD_INT 5
57749: PPUSH
57750: CALL_OW 272
57754: PUSH
57755: LD_VAR 0 11
57759: PPUSH
57760: LD_VAR 0 8
57764: PPUSH
57765: LD_INT 5
57767: PPUSH
57768: CALL_OW 273
57772: PUSH
57773: EMPTY
57774: LIST
57775: LIST
57776: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57777: LD_VAR 0 9
57781: PUSH
57782: LD_INT 1
57784: ARRAY
57785: PPUSH
57786: LD_VAR 0 9
57790: PUSH
57791: LD_INT 2
57793: ARRAY
57794: PPUSH
57795: CALL_OW 488
57799: IFFALSE 57898
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
57801: LD_ADDR_VAR 0 4
57805: PUSH
57806: LD_VAR 0 9
57810: PUSH
57811: LD_INT 1
57813: ARRAY
57814: PPUSH
57815: LD_VAR 0 9
57819: PUSH
57820: LD_INT 2
57822: ARRAY
57823: PPUSH
57824: CALL_OW 546
57828: ST_TO_ADDR
// if hex [ 1 ] then
57829: LD_VAR 0 4
57833: PUSH
57834: LD_INT 1
57836: ARRAY
57837: IFFALSE 57841
// continue ;
57839: GO 57729
// h := hex [ 2 ] ;
57841: LD_ADDR_VAR 0 13
57845: PUSH
57846: LD_VAR 0 4
57850: PUSH
57851: LD_INT 2
57853: ARRAY
57854: ST_TO_ADDR
// if h + 7 < height then
57855: LD_VAR 0 13
57859: PUSH
57860: LD_INT 7
57862: PLUS
57863: PUSH
57864: LD_VAR 0 15
57868: LESS
57869: IFFALSE 57898
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
57871: LD_ADDR_VAR 0 18
57875: PUSH
57876: LD_INT 7
57878: PUSH
57879: LD_INT 28
57881: PUSH
57882: LD_INT 45
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: LIST
57889: PUSH
57890: LD_VAR 0 12
57894: ARRAY
57895: ST_TO_ADDR
// break ;
57896: GO 57900
// end ; end ; end ;
57898: GO 57729
57900: POP
57901: POP
// end ; if not weapon then
57902: LD_VAR 0 18
57906: NOT
57907: IFFALSE 57967
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
57909: LD_ADDR_VAR 0 5
57913: PUSH
57914: LD_VAR 0 5
57918: PUSH
57919: LD_INT 11
57921: PUSH
57922: LD_INT 30
57924: PUSH
57925: LD_INT 49
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: LIST
57932: DIFF
57933: ST_TO_ADDR
// if not list then
57934: LD_VAR 0 5
57938: NOT
57939: IFFALSE 57943
// exit ;
57941: GO 58085
// weapon := list [ rand ( 1 , list ) ] ;
57943: LD_ADDR_VAR 0 18
57947: PUSH
57948: LD_VAR 0 5
57952: PUSH
57953: LD_INT 1
57955: PPUSH
57956: LD_VAR 0 5
57960: PPUSH
57961: CALL_OW 12
57965: ARRAY
57966: ST_TO_ADDR
// end ; if weapon then
57967: LD_VAR 0 18
57971: IFFALSE 58085
// begin tmp := CostOfWeapon ( weapon ) ;
57973: LD_ADDR_VAR 0 14
57977: PUSH
57978: LD_VAR 0 18
57982: PPUSH
57983: CALL_OW 451
57987: ST_TO_ADDR
// j := GetBase ( tower ) ;
57988: LD_ADDR_VAR 0 9
57992: PUSH
57993: LD_VAR 0 1
57997: PPUSH
57998: CALL_OW 274
58002: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
58003: LD_VAR 0 9
58007: PPUSH
58008: LD_INT 1
58010: PPUSH
58011: CALL_OW 275
58015: PUSH
58016: LD_VAR 0 14
58020: PUSH
58021: LD_INT 1
58023: ARRAY
58024: GREATEREQUAL
58025: PUSH
58026: LD_VAR 0 9
58030: PPUSH
58031: LD_INT 2
58033: PPUSH
58034: CALL_OW 275
58038: PUSH
58039: LD_VAR 0 14
58043: PUSH
58044: LD_INT 2
58046: ARRAY
58047: GREATEREQUAL
58048: AND
58049: PUSH
58050: LD_VAR 0 9
58054: PPUSH
58055: LD_INT 3
58057: PPUSH
58058: CALL_OW 275
58062: PUSH
58063: LD_VAR 0 14
58067: PUSH
58068: LD_INT 3
58070: ARRAY
58071: GREATEREQUAL
58072: AND
58073: IFFALSE 58085
// result := weapon ;
58075: LD_ADDR_VAR 0 3
58079: PUSH
58080: LD_VAR 0 18
58084: ST_TO_ADDR
// end ; end ;
58085: LD_VAR 0 3
58089: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
58090: LD_INT 0
58092: PPUSH
58093: PPUSH
// result := true ;
58094: LD_ADDR_VAR 0 3
58098: PUSH
58099: LD_INT 1
58101: ST_TO_ADDR
// if array1 = array2 then
58102: LD_VAR 0 1
58106: PUSH
58107: LD_VAR 0 2
58111: EQUAL
58112: IFFALSE 58172
// begin for i = 1 to array1 do
58114: LD_ADDR_VAR 0 4
58118: PUSH
58119: DOUBLE
58120: LD_INT 1
58122: DEC
58123: ST_TO_ADDR
58124: LD_VAR 0 1
58128: PUSH
58129: FOR_TO
58130: IFFALSE 58168
// if array1 [ i ] <> array2 [ i ] then
58132: LD_VAR 0 1
58136: PUSH
58137: LD_VAR 0 4
58141: ARRAY
58142: PUSH
58143: LD_VAR 0 2
58147: PUSH
58148: LD_VAR 0 4
58152: ARRAY
58153: NONEQUAL
58154: IFFALSE 58166
// begin result := false ;
58156: LD_ADDR_VAR 0 3
58160: PUSH
58161: LD_INT 0
58163: ST_TO_ADDR
// break ;
58164: GO 58168
// end ;
58166: GO 58129
58168: POP
58169: POP
// end else
58170: GO 58180
// result := false ;
58172: LD_ADDR_VAR 0 3
58176: PUSH
58177: LD_INT 0
58179: ST_TO_ADDR
// end ;
58180: LD_VAR 0 3
58184: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
58185: LD_INT 0
58187: PPUSH
58188: PPUSH
58189: PPUSH
// pom := GetBase ( fac ) ;
58190: LD_ADDR_VAR 0 5
58194: PUSH
58195: LD_VAR 0 1
58199: PPUSH
58200: CALL_OW 274
58204: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
58205: LD_ADDR_VAR 0 4
58209: PUSH
58210: LD_VAR 0 2
58214: PUSH
58215: LD_INT 1
58217: ARRAY
58218: PPUSH
58219: LD_VAR 0 2
58223: PUSH
58224: LD_INT 2
58226: ARRAY
58227: PPUSH
58228: LD_VAR 0 2
58232: PUSH
58233: LD_INT 3
58235: ARRAY
58236: PPUSH
58237: LD_VAR 0 2
58241: PUSH
58242: LD_INT 4
58244: ARRAY
58245: PPUSH
58246: CALL_OW 449
58250: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58251: LD_ADDR_VAR 0 3
58255: PUSH
58256: LD_VAR 0 5
58260: PPUSH
58261: LD_INT 1
58263: PPUSH
58264: CALL_OW 275
58268: PUSH
58269: LD_VAR 0 4
58273: PUSH
58274: LD_INT 1
58276: ARRAY
58277: GREATEREQUAL
58278: PUSH
58279: LD_VAR 0 5
58283: PPUSH
58284: LD_INT 2
58286: PPUSH
58287: CALL_OW 275
58291: PUSH
58292: LD_VAR 0 4
58296: PUSH
58297: LD_INT 2
58299: ARRAY
58300: GREATEREQUAL
58301: AND
58302: PUSH
58303: LD_VAR 0 5
58307: PPUSH
58308: LD_INT 3
58310: PPUSH
58311: CALL_OW 275
58315: PUSH
58316: LD_VAR 0 4
58320: PUSH
58321: LD_INT 3
58323: ARRAY
58324: GREATEREQUAL
58325: AND
58326: ST_TO_ADDR
// end ;
58327: LD_VAR 0 3
58331: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
58332: LD_INT 0
58334: PPUSH
58335: PPUSH
58336: PPUSH
58337: PPUSH
// pom := GetBase ( building ) ;
58338: LD_ADDR_VAR 0 3
58342: PUSH
58343: LD_VAR 0 1
58347: PPUSH
58348: CALL_OW 274
58352: ST_TO_ADDR
// if not pom then
58353: LD_VAR 0 3
58357: NOT
58358: IFFALSE 58362
// exit ;
58360: GO 58532
// btype := GetBType ( building ) ;
58362: LD_ADDR_VAR 0 5
58366: PUSH
58367: LD_VAR 0 1
58371: PPUSH
58372: CALL_OW 266
58376: ST_TO_ADDR
// if btype = b_armoury then
58377: LD_VAR 0 5
58381: PUSH
58382: LD_INT 4
58384: EQUAL
58385: IFFALSE 58395
// btype := b_barracks ;
58387: LD_ADDR_VAR 0 5
58391: PUSH
58392: LD_INT 5
58394: ST_TO_ADDR
// if btype = b_depot then
58395: LD_VAR 0 5
58399: PUSH
58400: LD_INT 0
58402: EQUAL
58403: IFFALSE 58413
// btype := b_warehouse ;
58405: LD_ADDR_VAR 0 5
58409: PUSH
58410: LD_INT 1
58412: ST_TO_ADDR
// if btype = b_workshop then
58413: LD_VAR 0 5
58417: PUSH
58418: LD_INT 2
58420: EQUAL
58421: IFFALSE 58431
// btype := b_factory ;
58423: LD_ADDR_VAR 0 5
58427: PUSH
58428: LD_INT 3
58430: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58431: LD_ADDR_VAR 0 4
58435: PUSH
58436: LD_VAR 0 5
58440: PPUSH
58441: LD_VAR 0 1
58445: PPUSH
58446: CALL_OW 248
58450: PPUSH
58451: CALL_OW 450
58455: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58456: LD_ADDR_VAR 0 2
58460: PUSH
58461: LD_VAR 0 3
58465: PPUSH
58466: LD_INT 1
58468: PPUSH
58469: CALL_OW 275
58473: PUSH
58474: LD_VAR 0 4
58478: PUSH
58479: LD_INT 1
58481: ARRAY
58482: GREATEREQUAL
58483: PUSH
58484: LD_VAR 0 3
58488: PPUSH
58489: LD_INT 2
58491: PPUSH
58492: CALL_OW 275
58496: PUSH
58497: LD_VAR 0 4
58501: PUSH
58502: LD_INT 2
58504: ARRAY
58505: GREATEREQUAL
58506: AND
58507: PUSH
58508: LD_VAR 0 3
58512: PPUSH
58513: LD_INT 3
58515: PPUSH
58516: CALL_OW 275
58520: PUSH
58521: LD_VAR 0 4
58525: PUSH
58526: LD_INT 3
58528: ARRAY
58529: GREATEREQUAL
58530: AND
58531: ST_TO_ADDR
// end ;
58532: LD_VAR 0 2
58536: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
58537: LD_INT 0
58539: PPUSH
58540: PPUSH
58541: PPUSH
// pom := GetBase ( building ) ;
58542: LD_ADDR_VAR 0 4
58546: PUSH
58547: LD_VAR 0 1
58551: PPUSH
58552: CALL_OW 274
58556: ST_TO_ADDR
// if not pom then
58557: LD_VAR 0 4
58561: NOT
58562: IFFALSE 58566
// exit ;
58564: GO 58667
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58566: LD_ADDR_VAR 0 5
58570: PUSH
58571: LD_VAR 0 2
58575: PPUSH
58576: LD_VAR 0 1
58580: PPUSH
58581: CALL_OW 248
58585: PPUSH
58586: CALL_OW 450
58590: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58591: LD_ADDR_VAR 0 3
58595: PUSH
58596: LD_VAR 0 4
58600: PPUSH
58601: LD_INT 1
58603: PPUSH
58604: CALL_OW 275
58608: PUSH
58609: LD_VAR 0 5
58613: PUSH
58614: LD_INT 1
58616: ARRAY
58617: GREATEREQUAL
58618: PUSH
58619: LD_VAR 0 4
58623: PPUSH
58624: LD_INT 2
58626: PPUSH
58627: CALL_OW 275
58631: PUSH
58632: LD_VAR 0 5
58636: PUSH
58637: LD_INT 2
58639: ARRAY
58640: GREATEREQUAL
58641: AND
58642: PUSH
58643: LD_VAR 0 4
58647: PPUSH
58648: LD_INT 3
58650: PPUSH
58651: CALL_OW 275
58655: PUSH
58656: LD_VAR 0 5
58660: PUSH
58661: LD_INT 3
58663: ARRAY
58664: GREATEREQUAL
58665: AND
58666: ST_TO_ADDR
// end ;
58667: LD_VAR 0 3
58671: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
58672: LD_INT 0
58674: PPUSH
58675: PPUSH
58676: PPUSH
58677: PPUSH
58678: PPUSH
58679: PPUSH
58680: PPUSH
58681: PPUSH
58682: PPUSH
58683: PPUSH
// result := false ;
58684: LD_ADDR_VAR 0 6
58688: PUSH
58689: LD_INT 0
58691: ST_TO_ADDR
// if not base or not btype or not x or not y then
58692: LD_VAR 0 1
58696: NOT
58697: PUSH
58698: LD_VAR 0 2
58702: NOT
58703: OR
58704: PUSH
58705: LD_VAR 0 3
58709: NOT
58710: OR
58711: PUSH
58712: LD_VAR 0 4
58716: NOT
58717: OR
58718: IFFALSE 58722
// exit ;
58720: GO 59331
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
58722: LD_ADDR_VAR 0 12
58726: PUSH
58727: LD_VAR 0 2
58731: PPUSH
58732: LD_VAR 0 3
58736: PPUSH
58737: LD_VAR 0 4
58741: PPUSH
58742: LD_VAR 0 5
58746: PPUSH
58747: LD_VAR 0 1
58751: PUSH
58752: LD_INT 1
58754: ARRAY
58755: PPUSH
58756: CALL_OW 248
58760: PPUSH
58761: LD_INT 0
58763: PPUSH
58764: CALL 60168 0 6
58768: ST_TO_ADDR
// if not hexes then
58769: LD_VAR 0 12
58773: NOT
58774: IFFALSE 58778
// exit ;
58776: GO 59331
// for i = 1 to hexes do
58778: LD_ADDR_VAR 0 7
58782: PUSH
58783: DOUBLE
58784: LD_INT 1
58786: DEC
58787: ST_TO_ADDR
58788: LD_VAR 0 12
58792: PUSH
58793: FOR_TO
58794: IFFALSE 59329
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
58796: LD_ADDR_VAR 0 11
58800: PUSH
58801: LD_VAR 0 12
58805: PUSH
58806: LD_VAR 0 7
58810: ARRAY
58811: PUSH
58812: LD_INT 1
58814: ARRAY
58815: PPUSH
58816: LD_VAR 0 12
58820: PUSH
58821: LD_VAR 0 7
58825: ARRAY
58826: PUSH
58827: LD_INT 2
58829: ARRAY
58830: PPUSH
58831: CALL_OW 428
58835: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
58836: LD_VAR 0 12
58840: PUSH
58841: LD_VAR 0 7
58845: ARRAY
58846: PUSH
58847: LD_INT 1
58849: ARRAY
58850: PPUSH
58851: LD_VAR 0 12
58855: PUSH
58856: LD_VAR 0 7
58860: ARRAY
58861: PUSH
58862: LD_INT 2
58864: ARRAY
58865: PPUSH
58866: CALL_OW 351
58870: PUSH
58871: LD_VAR 0 12
58875: PUSH
58876: LD_VAR 0 7
58880: ARRAY
58881: PUSH
58882: LD_INT 1
58884: ARRAY
58885: PPUSH
58886: LD_VAR 0 12
58890: PUSH
58891: LD_VAR 0 7
58895: ARRAY
58896: PUSH
58897: LD_INT 2
58899: ARRAY
58900: PPUSH
58901: CALL_OW 488
58905: NOT
58906: OR
58907: PUSH
58908: LD_VAR 0 11
58912: PPUSH
58913: CALL_OW 247
58917: PUSH
58918: LD_INT 3
58920: EQUAL
58921: OR
58922: IFFALSE 58928
// exit ;
58924: POP
58925: POP
58926: GO 59331
// if not tmp or not tmp in base then
58928: LD_VAR 0 11
58932: NOT
58933: PUSH
58934: LD_VAR 0 11
58938: PUSH
58939: LD_VAR 0 1
58943: IN
58944: NOT
58945: OR
58946: IFFALSE 58950
// continue ;
58948: GO 58793
// result := true ;
58950: LD_ADDR_VAR 0 6
58954: PUSH
58955: LD_INT 1
58957: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58958: LD_ADDR_VAR 0 15
58962: PUSH
58963: LD_VAR 0 1
58967: PPUSH
58968: LD_INT 22
58970: PUSH
58971: LD_VAR 0 11
58975: PPUSH
58976: CALL_OW 255
58980: PUSH
58981: EMPTY
58982: LIST
58983: LIST
58984: PUSH
58985: LD_INT 2
58987: PUSH
58988: LD_INT 30
58990: PUSH
58991: LD_INT 0
58993: PUSH
58994: EMPTY
58995: LIST
58996: LIST
58997: PUSH
58998: LD_INT 30
59000: PUSH
59001: LD_INT 1
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: PUSH
59008: EMPTY
59009: LIST
59010: LIST
59011: LIST
59012: PUSH
59013: EMPTY
59014: LIST
59015: LIST
59016: PPUSH
59017: CALL_OW 72
59021: ST_TO_ADDR
// if dep then
59022: LD_VAR 0 15
59026: IFFALSE 59162
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
59028: LD_ADDR_VAR 0 14
59032: PUSH
59033: LD_VAR 0 15
59037: PUSH
59038: LD_INT 1
59040: ARRAY
59041: PPUSH
59042: CALL_OW 250
59046: PPUSH
59047: LD_VAR 0 15
59051: PUSH
59052: LD_INT 1
59054: ARRAY
59055: PPUSH
59056: CALL_OW 254
59060: PPUSH
59061: LD_INT 5
59063: PPUSH
59064: CALL_OW 272
59068: PUSH
59069: LD_VAR 0 15
59073: PUSH
59074: LD_INT 1
59076: ARRAY
59077: PPUSH
59078: CALL_OW 251
59082: PPUSH
59083: LD_VAR 0 15
59087: PUSH
59088: LD_INT 1
59090: ARRAY
59091: PPUSH
59092: CALL_OW 254
59096: PPUSH
59097: LD_INT 5
59099: PPUSH
59100: CALL_OW 273
59104: PUSH
59105: EMPTY
59106: LIST
59107: LIST
59108: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
59109: LD_VAR 0 14
59113: PUSH
59114: LD_INT 1
59116: ARRAY
59117: PPUSH
59118: LD_VAR 0 14
59122: PUSH
59123: LD_INT 2
59125: ARRAY
59126: PPUSH
59127: CALL_OW 488
59131: IFFALSE 59162
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
59133: LD_VAR 0 11
59137: PPUSH
59138: LD_VAR 0 14
59142: PUSH
59143: LD_INT 1
59145: ARRAY
59146: PPUSH
59147: LD_VAR 0 14
59151: PUSH
59152: LD_INT 2
59154: ARRAY
59155: PPUSH
59156: CALL_OW 111
// continue ;
59160: GO 58793
// end ; end ; r := GetDir ( tmp ) ;
59162: LD_ADDR_VAR 0 13
59166: PUSH
59167: LD_VAR 0 11
59171: PPUSH
59172: CALL_OW 254
59176: ST_TO_ADDR
// if r = 5 then
59177: LD_VAR 0 13
59181: PUSH
59182: LD_INT 5
59184: EQUAL
59185: IFFALSE 59195
// r := 0 ;
59187: LD_ADDR_VAR 0 13
59191: PUSH
59192: LD_INT 0
59194: ST_TO_ADDR
// for j = r to 5 do
59195: LD_ADDR_VAR 0 8
59199: PUSH
59200: DOUBLE
59201: LD_VAR 0 13
59205: DEC
59206: ST_TO_ADDR
59207: LD_INT 5
59209: PUSH
59210: FOR_TO
59211: IFFALSE 59325
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
59213: LD_ADDR_VAR 0 9
59217: PUSH
59218: LD_VAR 0 11
59222: PPUSH
59223: CALL_OW 250
59227: PPUSH
59228: LD_VAR 0 8
59232: PPUSH
59233: LD_INT 2
59235: PPUSH
59236: CALL_OW 272
59240: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
59241: LD_ADDR_VAR 0 10
59245: PUSH
59246: LD_VAR 0 11
59250: PPUSH
59251: CALL_OW 251
59255: PPUSH
59256: LD_VAR 0 8
59260: PPUSH
59261: LD_INT 2
59263: PPUSH
59264: CALL_OW 273
59268: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
59269: LD_VAR 0 9
59273: PPUSH
59274: LD_VAR 0 10
59278: PPUSH
59279: CALL_OW 488
59283: PUSH
59284: LD_VAR 0 9
59288: PPUSH
59289: LD_VAR 0 10
59293: PPUSH
59294: CALL_OW 428
59298: NOT
59299: AND
59300: IFFALSE 59323
// begin ComMoveXY ( tmp , _x , _y ) ;
59302: LD_VAR 0 11
59306: PPUSH
59307: LD_VAR 0 9
59311: PPUSH
59312: LD_VAR 0 10
59316: PPUSH
59317: CALL_OW 111
// break ;
59321: GO 59325
// end ; end ;
59323: GO 59210
59325: POP
59326: POP
// end ;
59327: GO 58793
59329: POP
59330: POP
// end ;
59331: LD_VAR 0 6
59335: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
59336: LD_INT 0
59338: PPUSH
59339: PPUSH
59340: PPUSH
59341: PPUSH
59342: PPUSH
59343: PPUSH
59344: PPUSH
59345: PPUSH
59346: PPUSH
59347: PPUSH
// result := false ;
59348: LD_ADDR_VAR 0 6
59352: PUSH
59353: LD_INT 0
59355: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
59356: LD_VAR 0 1
59360: NOT
59361: PUSH
59362: LD_VAR 0 1
59366: PPUSH
59367: CALL_OW 266
59371: PUSH
59372: LD_INT 0
59374: PUSH
59375: LD_INT 1
59377: PUSH
59378: EMPTY
59379: LIST
59380: LIST
59381: IN
59382: NOT
59383: OR
59384: PUSH
59385: LD_VAR 0 2
59389: NOT
59390: OR
59391: PUSH
59392: LD_VAR 0 5
59396: PUSH
59397: LD_INT 0
59399: PUSH
59400: LD_INT 1
59402: PUSH
59403: LD_INT 2
59405: PUSH
59406: LD_INT 3
59408: PUSH
59409: LD_INT 4
59411: PUSH
59412: LD_INT 5
59414: PUSH
59415: EMPTY
59416: LIST
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: IN
59423: NOT
59424: OR
59425: PUSH
59426: LD_VAR 0 3
59430: PPUSH
59431: LD_VAR 0 4
59435: PPUSH
59436: CALL_OW 488
59440: NOT
59441: OR
59442: IFFALSE 59446
// exit ;
59444: GO 60163
// pom := GetBase ( depot ) ;
59446: LD_ADDR_VAR 0 10
59450: PUSH
59451: LD_VAR 0 1
59455: PPUSH
59456: CALL_OW 274
59460: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
59461: LD_ADDR_VAR 0 11
59465: PUSH
59466: LD_VAR 0 2
59470: PPUSH
59471: LD_VAR 0 1
59475: PPUSH
59476: CALL_OW 248
59480: PPUSH
59481: CALL_OW 450
59485: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
59486: LD_VAR 0 10
59490: PPUSH
59491: LD_INT 1
59493: PPUSH
59494: CALL_OW 275
59498: PUSH
59499: LD_VAR 0 11
59503: PUSH
59504: LD_INT 1
59506: ARRAY
59507: GREATEREQUAL
59508: PUSH
59509: LD_VAR 0 10
59513: PPUSH
59514: LD_INT 2
59516: PPUSH
59517: CALL_OW 275
59521: PUSH
59522: LD_VAR 0 11
59526: PUSH
59527: LD_INT 2
59529: ARRAY
59530: GREATEREQUAL
59531: AND
59532: PUSH
59533: LD_VAR 0 10
59537: PPUSH
59538: LD_INT 3
59540: PPUSH
59541: CALL_OW 275
59545: PUSH
59546: LD_VAR 0 11
59550: PUSH
59551: LD_INT 3
59553: ARRAY
59554: GREATEREQUAL
59555: AND
59556: NOT
59557: IFFALSE 59561
// exit ;
59559: GO 60163
// if GetBType ( depot ) = b_depot then
59561: LD_VAR 0 1
59565: PPUSH
59566: CALL_OW 266
59570: PUSH
59571: LD_INT 0
59573: EQUAL
59574: IFFALSE 59586
// dist := 28 else
59576: LD_ADDR_VAR 0 14
59580: PUSH
59581: LD_INT 28
59583: ST_TO_ADDR
59584: GO 59594
// dist := 36 ;
59586: LD_ADDR_VAR 0 14
59590: PUSH
59591: LD_INT 36
59593: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
59594: LD_VAR 0 1
59598: PPUSH
59599: LD_VAR 0 3
59603: PPUSH
59604: LD_VAR 0 4
59608: PPUSH
59609: CALL_OW 297
59613: PUSH
59614: LD_VAR 0 14
59618: GREATER
59619: IFFALSE 59623
// exit ;
59621: GO 60163
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
59623: LD_ADDR_VAR 0 12
59627: PUSH
59628: LD_VAR 0 2
59632: PPUSH
59633: LD_VAR 0 3
59637: PPUSH
59638: LD_VAR 0 4
59642: PPUSH
59643: LD_VAR 0 5
59647: PPUSH
59648: LD_VAR 0 1
59652: PPUSH
59653: CALL_OW 248
59657: PPUSH
59658: LD_INT 0
59660: PPUSH
59661: CALL 60168 0 6
59665: ST_TO_ADDR
// if not hexes then
59666: LD_VAR 0 12
59670: NOT
59671: IFFALSE 59675
// exit ;
59673: GO 60163
// hex := GetHexInfo ( x , y ) ;
59675: LD_ADDR_VAR 0 15
59679: PUSH
59680: LD_VAR 0 3
59684: PPUSH
59685: LD_VAR 0 4
59689: PPUSH
59690: CALL_OW 546
59694: ST_TO_ADDR
// if hex [ 1 ] then
59695: LD_VAR 0 15
59699: PUSH
59700: LD_INT 1
59702: ARRAY
59703: IFFALSE 59707
// exit ;
59705: GO 60163
// height := hex [ 2 ] ;
59707: LD_ADDR_VAR 0 13
59711: PUSH
59712: LD_VAR 0 15
59716: PUSH
59717: LD_INT 2
59719: ARRAY
59720: ST_TO_ADDR
// for i = 1 to hexes do
59721: LD_ADDR_VAR 0 7
59725: PUSH
59726: DOUBLE
59727: LD_INT 1
59729: DEC
59730: ST_TO_ADDR
59731: LD_VAR 0 12
59735: PUSH
59736: FOR_TO
59737: IFFALSE 60067
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
59739: LD_VAR 0 12
59743: PUSH
59744: LD_VAR 0 7
59748: ARRAY
59749: PUSH
59750: LD_INT 1
59752: ARRAY
59753: PPUSH
59754: LD_VAR 0 12
59758: PUSH
59759: LD_VAR 0 7
59763: ARRAY
59764: PUSH
59765: LD_INT 2
59767: ARRAY
59768: PPUSH
59769: CALL_OW 488
59773: NOT
59774: PUSH
59775: LD_VAR 0 12
59779: PUSH
59780: LD_VAR 0 7
59784: ARRAY
59785: PUSH
59786: LD_INT 1
59788: ARRAY
59789: PPUSH
59790: LD_VAR 0 12
59794: PUSH
59795: LD_VAR 0 7
59799: ARRAY
59800: PUSH
59801: LD_INT 2
59803: ARRAY
59804: PPUSH
59805: CALL_OW 428
59809: PUSH
59810: LD_INT 0
59812: GREATER
59813: OR
59814: PUSH
59815: LD_VAR 0 12
59819: PUSH
59820: LD_VAR 0 7
59824: ARRAY
59825: PUSH
59826: LD_INT 1
59828: ARRAY
59829: PPUSH
59830: LD_VAR 0 12
59834: PUSH
59835: LD_VAR 0 7
59839: ARRAY
59840: PUSH
59841: LD_INT 2
59843: ARRAY
59844: PPUSH
59845: CALL_OW 351
59849: OR
59850: IFFALSE 59856
// exit ;
59852: POP
59853: POP
59854: GO 60163
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59856: LD_ADDR_VAR 0 8
59860: PUSH
59861: LD_VAR 0 12
59865: PUSH
59866: LD_VAR 0 7
59870: ARRAY
59871: PUSH
59872: LD_INT 1
59874: ARRAY
59875: PPUSH
59876: LD_VAR 0 12
59880: PUSH
59881: LD_VAR 0 7
59885: ARRAY
59886: PUSH
59887: LD_INT 2
59889: ARRAY
59890: PPUSH
59891: CALL_OW 546
59895: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
59896: LD_VAR 0 8
59900: PUSH
59901: LD_INT 1
59903: ARRAY
59904: PUSH
59905: LD_VAR 0 8
59909: PUSH
59910: LD_INT 2
59912: ARRAY
59913: PUSH
59914: LD_VAR 0 13
59918: PUSH
59919: LD_INT 2
59921: PLUS
59922: GREATER
59923: OR
59924: PUSH
59925: LD_VAR 0 8
59929: PUSH
59930: LD_INT 2
59932: ARRAY
59933: PUSH
59934: LD_VAR 0 13
59938: PUSH
59939: LD_INT 2
59941: MINUS
59942: LESS
59943: OR
59944: PUSH
59945: LD_VAR 0 8
59949: PUSH
59950: LD_INT 3
59952: ARRAY
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: LD_INT 8
59959: PUSH
59960: LD_INT 9
59962: PUSH
59963: LD_INT 10
59965: PUSH
59966: LD_INT 11
59968: PUSH
59969: LD_INT 12
59971: PUSH
59972: LD_INT 13
59974: PUSH
59975: LD_INT 16
59977: PUSH
59978: LD_INT 17
59980: PUSH
59981: LD_INT 18
59983: PUSH
59984: LD_INT 19
59986: PUSH
59987: LD_INT 20
59989: PUSH
59990: LD_INT 21
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: LIST
59997: LIST
59998: LIST
59999: LIST
60000: LIST
60001: LIST
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: IN
60008: NOT
60009: OR
60010: PUSH
60011: LD_VAR 0 8
60015: PUSH
60016: LD_INT 5
60018: ARRAY
60019: NOT
60020: OR
60021: PUSH
60022: LD_VAR 0 8
60026: PUSH
60027: LD_INT 6
60029: ARRAY
60030: PUSH
60031: LD_INT 1
60033: PUSH
60034: LD_INT 2
60036: PUSH
60037: LD_INT 7
60039: PUSH
60040: LD_INT 9
60042: PUSH
60043: LD_INT 10
60045: PUSH
60046: LD_INT 11
60048: PUSH
60049: EMPTY
60050: LIST
60051: LIST
60052: LIST
60053: LIST
60054: LIST
60055: LIST
60056: IN
60057: NOT
60058: OR
60059: IFFALSE 60065
// exit ;
60061: POP
60062: POP
60063: GO 60163
// end ;
60065: GO 59736
60067: POP
60068: POP
// side := GetSide ( depot ) ;
60069: LD_ADDR_VAR 0 9
60073: PUSH
60074: LD_VAR 0 1
60078: PPUSH
60079: CALL_OW 255
60083: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
60084: LD_VAR 0 9
60088: PPUSH
60089: LD_VAR 0 3
60093: PPUSH
60094: LD_VAR 0 4
60098: PPUSH
60099: LD_INT 20
60101: PPUSH
60102: CALL 52817 0 4
60106: PUSH
60107: LD_INT 4
60109: ARRAY
60110: IFFALSE 60114
// exit ;
60112: GO 60163
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
60114: LD_VAR 0 2
60118: PUSH
60119: LD_INT 29
60121: PUSH
60122: LD_INT 30
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: IN
60129: PUSH
60130: LD_VAR 0 3
60134: PPUSH
60135: LD_VAR 0 4
60139: PPUSH
60140: LD_VAR 0 9
60144: PPUSH
60145: CALL_OW 440
60149: NOT
60150: AND
60151: IFFALSE 60155
// exit ;
60153: GO 60163
// result := true ;
60155: LD_ADDR_VAR 0 6
60159: PUSH
60160: LD_INT 1
60162: ST_TO_ADDR
// end ;
60163: LD_VAR 0 6
60167: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
60168: LD_INT 0
60170: PPUSH
60171: PPUSH
60172: PPUSH
60173: PPUSH
60174: PPUSH
60175: PPUSH
60176: PPUSH
60177: PPUSH
60178: PPUSH
60179: PPUSH
60180: PPUSH
60181: PPUSH
60182: PPUSH
60183: PPUSH
60184: PPUSH
60185: PPUSH
60186: PPUSH
60187: PPUSH
60188: PPUSH
60189: PPUSH
60190: PPUSH
60191: PPUSH
60192: PPUSH
60193: PPUSH
60194: PPUSH
60195: PPUSH
60196: PPUSH
60197: PPUSH
60198: PPUSH
60199: PPUSH
60200: PPUSH
60201: PPUSH
60202: PPUSH
60203: PPUSH
60204: PPUSH
60205: PPUSH
60206: PPUSH
60207: PPUSH
60208: PPUSH
60209: PPUSH
60210: PPUSH
60211: PPUSH
60212: PPUSH
60213: PPUSH
60214: PPUSH
60215: PPUSH
60216: PPUSH
60217: PPUSH
60218: PPUSH
60219: PPUSH
60220: PPUSH
60221: PPUSH
60222: PPUSH
60223: PPUSH
60224: PPUSH
60225: PPUSH
60226: PPUSH
60227: PPUSH
// result = [ ] ;
60228: LD_ADDR_VAR 0 7
60232: PUSH
60233: EMPTY
60234: ST_TO_ADDR
// temp_list = [ ] ;
60235: LD_ADDR_VAR 0 9
60239: PUSH
60240: EMPTY
60241: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
60242: LD_VAR 0 4
60246: PUSH
60247: LD_INT 0
60249: PUSH
60250: LD_INT 1
60252: PUSH
60253: LD_INT 2
60255: PUSH
60256: LD_INT 3
60258: PUSH
60259: LD_INT 4
60261: PUSH
60262: LD_INT 5
60264: PUSH
60265: EMPTY
60266: LIST
60267: LIST
60268: LIST
60269: LIST
60270: LIST
60271: LIST
60272: IN
60273: NOT
60274: PUSH
60275: LD_VAR 0 1
60279: PUSH
60280: LD_INT 0
60282: PUSH
60283: LD_INT 1
60285: PUSH
60286: EMPTY
60287: LIST
60288: LIST
60289: IN
60290: PUSH
60291: LD_VAR 0 5
60295: PUSH
60296: LD_INT 1
60298: PUSH
60299: LD_INT 2
60301: PUSH
60302: LD_INT 3
60304: PUSH
60305: EMPTY
60306: LIST
60307: LIST
60308: LIST
60309: IN
60310: NOT
60311: AND
60312: OR
60313: IFFALSE 60317
// exit ;
60315: GO 78708
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
60317: LD_VAR 0 1
60321: PUSH
60322: LD_INT 6
60324: PUSH
60325: LD_INT 7
60327: PUSH
60328: LD_INT 8
60330: PUSH
60331: LD_INT 13
60333: PUSH
60334: LD_INT 12
60336: PUSH
60337: LD_INT 15
60339: PUSH
60340: LD_INT 11
60342: PUSH
60343: LD_INT 14
60345: PUSH
60346: LD_INT 10
60348: PUSH
60349: EMPTY
60350: LIST
60351: LIST
60352: LIST
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: IN
60360: IFFALSE 60370
// btype = b_lab ;
60362: LD_ADDR_VAR 0 1
60366: PUSH
60367: LD_INT 6
60369: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
60370: LD_VAR 0 6
60374: PUSH
60375: LD_INT 0
60377: PUSH
60378: LD_INT 1
60380: PUSH
60381: LD_INT 2
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: LIST
60388: IN
60389: NOT
60390: PUSH
60391: LD_VAR 0 1
60395: PUSH
60396: LD_INT 0
60398: PUSH
60399: LD_INT 1
60401: PUSH
60402: LD_INT 2
60404: PUSH
60405: LD_INT 3
60407: PUSH
60408: LD_INT 6
60410: PUSH
60411: LD_INT 36
60413: PUSH
60414: LD_INT 4
60416: PUSH
60417: LD_INT 5
60419: PUSH
60420: LD_INT 31
60422: PUSH
60423: LD_INT 32
60425: PUSH
60426: LD_INT 33
60428: PUSH
60429: EMPTY
60430: LIST
60431: LIST
60432: LIST
60433: LIST
60434: LIST
60435: LIST
60436: LIST
60437: LIST
60438: LIST
60439: LIST
60440: LIST
60441: IN
60442: NOT
60443: PUSH
60444: LD_VAR 0 6
60448: PUSH
60449: LD_INT 1
60451: EQUAL
60452: AND
60453: OR
60454: PUSH
60455: LD_VAR 0 1
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: LD_INT 3
60465: PUSH
60466: EMPTY
60467: LIST
60468: LIST
60469: IN
60470: NOT
60471: PUSH
60472: LD_VAR 0 6
60476: PUSH
60477: LD_INT 2
60479: EQUAL
60480: AND
60481: OR
60482: IFFALSE 60492
// mode = 0 ;
60484: LD_ADDR_VAR 0 6
60488: PUSH
60489: LD_INT 0
60491: ST_TO_ADDR
// case mode of 0 :
60492: LD_VAR 0 6
60496: PUSH
60497: LD_INT 0
60499: DOUBLE
60500: EQUAL
60501: IFTRUE 60505
60503: GO 71958
60505: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
60506: LD_ADDR_VAR 0 11
60510: PUSH
60511: LD_INT 0
60513: PUSH
60514: LD_INT 0
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: PUSH
60521: LD_INT 0
60523: PUSH
60524: LD_INT 1
60526: NEG
60527: PUSH
60528: EMPTY
60529: LIST
60530: LIST
60531: PUSH
60532: LD_INT 1
60534: PUSH
60535: LD_INT 0
60537: PUSH
60538: EMPTY
60539: LIST
60540: LIST
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: LD_INT 1
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: PUSH
60552: LD_INT 0
60554: PUSH
60555: LD_INT 1
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 1
60564: NEG
60565: PUSH
60566: LD_INT 0
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 1
60575: NEG
60576: PUSH
60577: LD_INT 1
60579: NEG
60580: PUSH
60581: EMPTY
60582: LIST
60583: LIST
60584: PUSH
60585: LD_INT 1
60587: NEG
60588: PUSH
60589: LD_INT 2
60591: NEG
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: PUSH
60597: LD_INT 0
60599: PUSH
60600: LD_INT 2
60602: NEG
60603: PUSH
60604: EMPTY
60605: LIST
60606: LIST
60607: PUSH
60608: LD_INT 1
60610: PUSH
60611: LD_INT 1
60613: NEG
60614: PUSH
60615: EMPTY
60616: LIST
60617: LIST
60618: PUSH
60619: LD_INT 1
60621: PUSH
60622: LD_INT 2
60624: PUSH
60625: EMPTY
60626: LIST
60627: LIST
60628: PUSH
60629: LD_INT 0
60631: PUSH
60632: LD_INT 2
60634: PUSH
60635: EMPTY
60636: LIST
60637: LIST
60638: PUSH
60639: LD_INT 1
60641: NEG
60642: PUSH
60643: LD_INT 1
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: PUSH
60650: LD_INT 1
60652: PUSH
60653: LD_INT 3
60655: PUSH
60656: EMPTY
60657: LIST
60658: LIST
60659: PUSH
60660: LD_INT 0
60662: PUSH
60663: LD_INT 3
60665: PUSH
60666: EMPTY
60667: LIST
60668: LIST
60669: PUSH
60670: LD_INT 1
60672: NEG
60673: PUSH
60674: LD_INT 2
60676: PUSH
60677: EMPTY
60678: LIST
60679: LIST
60680: PUSH
60681: EMPTY
60682: LIST
60683: LIST
60684: LIST
60685: LIST
60686: LIST
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: LIST
60692: LIST
60693: LIST
60694: LIST
60695: LIST
60696: LIST
60697: LIST
60698: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
60699: LD_ADDR_VAR 0 12
60703: PUSH
60704: LD_INT 0
60706: PUSH
60707: LD_INT 0
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: PUSH
60714: LD_INT 0
60716: PUSH
60717: LD_INT 1
60719: NEG
60720: PUSH
60721: EMPTY
60722: LIST
60723: LIST
60724: PUSH
60725: LD_INT 1
60727: PUSH
60728: LD_INT 0
60730: PUSH
60731: EMPTY
60732: LIST
60733: LIST
60734: PUSH
60735: LD_INT 1
60737: PUSH
60738: LD_INT 1
60740: PUSH
60741: EMPTY
60742: LIST
60743: LIST
60744: PUSH
60745: LD_INT 0
60747: PUSH
60748: LD_INT 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 1
60757: NEG
60758: PUSH
60759: LD_INT 0
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: PUSH
60766: LD_INT 1
60768: NEG
60769: PUSH
60770: LD_INT 1
60772: NEG
60773: PUSH
60774: EMPTY
60775: LIST
60776: LIST
60777: PUSH
60778: LD_INT 1
60780: PUSH
60781: LD_INT 1
60783: NEG
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PUSH
60789: LD_INT 2
60791: PUSH
60792: LD_INT 0
60794: PUSH
60795: EMPTY
60796: LIST
60797: LIST
60798: PUSH
60799: LD_INT 2
60801: PUSH
60802: LD_INT 1
60804: PUSH
60805: EMPTY
60806: LIST
60807: LIST
60808: PUSH
60809: LD_INT 1
60811: NEG
60812: PUSH
60813: LD_INT 1
60815: PUSH
60816: EMPTY
60817: LIST
60818: LIST
60819: PUSH
60820: LD_INT 2
60822: NEG
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: LD_INT 2
60833: NEG
60834: PUSH
60835: LD_INT 1
60837: NEG
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PUSH
60843: LD_INT 2
60845: NEG
60846: PUSH
60847: LD_INT 1
60849: PUSH
60850: EMPTY
60851: LIST
60852: LIST
60853: PUSH
60854: LD_INT 3
60856: NEG
60857: PUSH
60858: LD_INT 0
60860: PUSH
60861: EMPTY
60862: LIST
60863: LIST
60864: PUSH
60865: LD_INT 3
60867: NEG
60868: PUSH
60869: LD_INT 1
60871: NEG
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: LIST
60881: LIST
60882: LIST
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: LIST
60888: LIST
60889: LIST
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
60895: LD_ADDR_VAR 0 13
60899: PUSH
60900: LD_INT 0
60902: PUSH
60903: LD_INT 0
60905: PUSH
60906: EMPTY
60907: LIST
60908: LIST
60909: PUSH
60910: LD_INT 0
60912: PUSH
60913: LD_INT 1
60915: NEG
60916: PUSH
60917: EMPTY
60918: LIST
60919: LIST
60920: PUSH
60921: LD_INT 1
60923: PUSH
60924: LD_INT 0
60926: PUSH
60927: EMPTY
60928: LIST
60929: LIST
60930: PUSH
60931: LD_INT 1
60933: PUSH
60934: LD_INT 1
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: PUSH
60941: LD_INT 0
60943: PUSH
60944: LD_INT 1
60946: PUSH
60947: EMPTY
60948: LIST
60949: LIST
60950: PUSH
60951: LD_INT 1
60953: NEG
60954: PUSH
60955: LD_INT 0
60957: PUSH
60958: EMPTY
60959: LIST
60960: LIST
60961: PUSH
60962: LD_INT 1
60964: NEG
60965: PUSH
60966: LD_INT 1
60968: NEG
60969: PUSH
60970: EMPTY
60971: LIST
60972: LIST
60973: PUSH
60974: LD_INT 1
60976: NEG
60977: PUSH
60978: LD_INT 2
60980: NEG
60981: PUSH
60982: EMPTY
60983: LIST
60984: LIST
60985: PUSH
60986: LD_INT 2
60988: PUSH
60989: LD_INT 1
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PUSH
60996: LD_INT 2
60998: PUSH
60999: LD_INT 2
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 1
61008: PUSH
61009: LD_INT 2
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: LD_INT 2
61018: NEG
61019: PUSH
61020: LD_INT 1
61022: NEG
61023: PUSH
61024: EMPTY
61025: LIST
61026: LIST
61027: PUSH
61028: LD_INT 2
61030: NEG
61031: PUSH
61032: LD_INT 2
61034: NEG
61035: PUSH
61036: EMPTY
61037: LIST
61038: LIST
61039: PUSH
61040: LD_INT 2
61042: NEG
61043: PUSH
61044: LD_INT 3
61046: NEG
61047: PUSH
61048: EMPTY
61049: LIST
61050: LIST
61051: PUSH
61052: LD_INT 3
61054: NEG
61055: PUSH
61056: LD_INT 2
61058: NEG
61059: PUSH
61060: EMPTY
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 3
61066: NEG
61067: PUSH
61068: LD_INT 3
61070: NEG
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: LIST
61081: LIST
61082: LIST
61083: LIST
61084: LIST
61085: LIST
61086: LIST
61087: LIST
61088: LIST
61089: LIST
61090: LIST
61091: LIST
61092: LIST
61093: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61094: LD_ADDR_VAR 0 14
61098: PUSH
61099: LD_INT 0
61101: PUSH
61102: LD_INT 0
61104: PUSH
61105: EMPTY
61106: LIST
61107: LIST
61108: PUSH
61109: LD_INT 0
61111: PUSH
61112: LD_INT 1
61114: NEG
61115: PUSH
61116: EMPTY
61117: LIST
61118: LIST
61119: PUSH
61120: LD_INT 1
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: PUSH
61130: LD_INT 1
61132: PUSH
61133: LD_INT 1
61135: PUSH
61136: EMPTY
61137: LIST
61138: LIST
61139: PUSH
61140: LD_INT 0
61142: PUSH
61143: LD_INT 1
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: PUSH
61150: LD_INT 1
61152: NEG
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: EMPTY
61158: LIST
61159: LIST
61160: PUSH
61161: LD_INT 1
61163: NEG
61164: PUSH
61165: LD_INT 1
61167: NEG
61168: PUSH
61169: EMPTY
61170: LIST
61171: LIST
61172: PUSH
61173: LD_INT 1
61175: NEG
61176: PUSH
61177: LD_INT 2
61179: NEG
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: PUSH
61185: LD_INT 0
61187: PUSH
61188: LD_INT 2
61190: NEG
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 1
61198: PUSH
61199: LD_INT 1
61201: NEG
61202: PUSH
61203: EMPTY
61204: LIST
61205: LIST
61206: PUSH
61207: LD_INT 1
61209: PUSH
61210: LD_INT 2
61212: PUSH
61213: EMPTY
61214: LIST
61215: LIST
61216: PUSH
61217: LD_INT 0
61219: PUSH
61220: LD_INT 2
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: PUSH
61227: LD_INT 1
61229: NEG
61230: PUSH
61231: LD_INT 1
61233: PUSH
61234: EMPTY
61235: LIST
61236: LIST
61237: PUSH
61238: LD_INT 1
61240: NEG
61241: PUSH
61242: LD_INT 3
61244: NEG
61245: PUSH
61246: EMPTY
61247: LIST
61248: LIST
61249: PUSH
61250: LD_INT 0
61252: PUSH
61253: LD_INT 3
61255: NEG
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 1
61263: PUSH
61264: LD_INT 2
61266: NEG
61267: PUSH
61268: EMPTY
61269: LIST
61270: LIST
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: LIST
61278: LIST
61279: LIST
61280: LIST
61281: LIST
61282: LIST
61283: LIST
61284: LIST
61285: LIST
61286: LIST
61287: LIST
61288: LIST
61289: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
61290: LD_ADDR_VAR 0 15
61294: PUSH
61295: LD_INT 0
61297: PUSH
61298: LD_INT 0
61300: PUSH
61301: EMPTY
61302: LIST
61303: LIST
61304: PUSH
61305: LD_INT 0
61307: PUSH
61308: LD_INT 1
61310: NEG
61311: PUSH
61312: EMPTY
61313: LIST
61314: LIST
61315: PUSH
61316: LD_INT 1
61318: PUSH
61319: LD_INT 0
61321: PUSH
61322: EMPTY
61323: LIST
61324: LIST
61325: PUSH
61326: LD_INT 1
61328: PUSH
61329: LD_INT 1
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: PUSH
61336: LD_INT 0
61338: PUSH
61339: LD_INT 1
61341: PUSH
61342: EMPTY
61343: LIST
61344: LIST
61345: PUSH
61346: LD_INT 1
61348: NEG
61349: PUSH
61350: LD_INT 0
61352: PUSH
61353: EMPTY
61354: LIST
61355: LIST
61356: PUSH
61357: LD_INT 1
61359: NEG
61360: PUSH
61361: LD_INT 1
61363: NEG
61364: PUSH
61365: EMPTY
61366: LIST
61367: LIST
61368: PUSH
61369: LD_INT 1
61371: PUSH
61372: LD_INT 1
61374: NEG
61375: PUSH
61376: EMPTY
61377: LIST
61378: LIST
61379: PUSH
61380: LD_INT 2
61382: PUSH
61383: LD_INT 0
61385: PUSH
61386: EMPTY
61387: LIST
61388: LIST
61389: PUSH
61390: LD_INT 2
61392: PUSH
61393: LD_INT 1
61395: PUSH
61396: EMPTY
61397: LIST
61398: LIST
61399: PUSH
61400: LD_INT 1
61402: NEG
61403: PUSH
61404: LD_INT 1
61406: PUSH
61407: EMPTY
61408: LIST
61409: LIST
61410: PUSH
61411: LD_INT 2
61413: NEG
61414: PUSH
61415: LD_INT 0
61417: PUSH
61418: EMPTY
61419: LIST
61420: LIST
61421: PUSH
61422: LD_INT 2
61424: NEG
61425: PUSH
61426: LD_INT 1
61428: NEG
61429: PUSH
61430: EMPTY
61431: LIST
61432: LIST
61433: PUSH
61434: LD_INT 2
61436: PUSH
61437: LD_INT 1
61439: NEG
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: LD_INT 0
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: PUSH
61455: LD_INT 3
61457: PUSH
61458: LD_INT 1
61460: PUSH
61461: EMPTY
61462: LIST
61463: LIST
61464: PUSH
61465: EMPTY
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: LIST
61478: LIST
61479: LIST
61480: LIST
61481: LIST
61482: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
61483: LD_ADDR_VAR 0 16
61487: PUSH
61488: LD_INT 0
61490: PUSH
61491: LD_INT 0
61493: PUSH
61494: EMPTY
61495: LIST
61496: LIST
61497: PUSH
61498: LD_INT 0
61500: PUSH
61501: LD_INT 1
61503: NEG
61504: PUSH
61505: EMPTY
61506: LIST
61507: LIST
61508: PUSH
61509: LD_INT 1
61511: PUSH
61512: LD_INT 0
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 1
61521: PUSH
61522: LD_INT 1
61524: PUSH
61525: EMPTY
61526: LIST
61527: LIST
61528: PUSH
61529: LD_INT 0
61531: PUSH
61532: LD_INT 1
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: PUSH
61539: LD_INT 1
61541: NEG
61542: PUSH
61543: LD_INT 0
61545: PUSH
61546: EMPTY
61547: LIST
61548: LIST
61549: PUSH
61550: LD_INT 1
61552: NEG
61553: PUSH
61554: LD_INT 1
61556: NEG
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PUSH
61562: LD_INT 1
61564: NEG
61565: PUSH
61566: LD_INT 2
61568: NEG
61569: PUSH
61570: EMPTY
61571: LIST
61572: LIST
61573: PUSH
61574: LD_INT 2
61576: PUSH
61577: LD_INT 1
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: PUSH
61584: LD_INT 2
61586: PUSH
61587: LD_INT 2
61589: PUSH
61590: EMPTY
61591: LIST
61592: LIST
61593: PUSH
61594: LD_INT 1
61596: PUSH
61597: LD_INT 2
61599: PUSH
61600: EMPTY
61601: LIST
61602: LIST
61603: PUSH
61604: LD_INT 2
61606: NEG
61607: PUSH
61608: LD_INT 1
61610: NEG
61611: PUSH
61612: EMPTY
61613: LIST
61614: LIST
61615: PUSH
61616: LD_INT 2
61618: NEG
61619: PUSH
61620: LD_INT 2
61622: NEG
61623: PUSH
61624: EMPTY
61625: LIST
61626: LIST
61627: PUSH
61628: LD_INT 3
61630: PUSH
61631: LD_INT 2
61633: PUSH
61634: EMPTY
61635: LIST
61636: LIST
61637: PUSH
61638: LD_INT 3
61640: PUSH
61641: LD_INT 3
61643: PUSH
61644: EMPTY
61645: LIST
61646: LIST
61647: PUSH
61648: LD_INT 2
61650: PUSH
61651: LD_INT 3
61653: PUSH
61654: EMPTY
61655: LIST
61656: LIST
61657: PUSH
61658: EMPTY
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: LIST
61674: LIST
61675: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61676: LD_ADDR_VAR 0 17
61680: PUSH
61681: LD_INT 0
61683: PUSH
61684: LD_INT 0
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: PUSH
61691: LD_INT 0
61693: PUSH
61694: LD_INT 1
61696: NEG
61697: PUSH
61698: EMPTY
61699: LIST
61700: LIST
61701: PUSH
61702: LD_INT 1
61704: PUSH
61705: LD_INT 0
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: PUSH
61712: LD_INT 1
61714: PUSH
61715: LD_INT 1
61717: PUSH
61718: EMPTY
61719: LIST
61720: LIST
61721: PUSH
61722: LD_INT 0
61724: PUSH
61725: LD_INT 1
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: PUSH
61732: LD_INT 1
61734: NEG
61735: PUSH
61736: LD_INT 0
61738: PUSH
61739: EMPTY
61740: LIST
61741: LIST
61742: PUSH
61743: LD_INT 1
61745: NEG
61746: PUSH
61747: LD_INT 1
61749: NEG
61750: PUSH
61751: EMPTY
61752: LIST
61753: LIST
61754: PUSH
61755: LD_INT 1
61757: NEG
61758: PUSH
61759: LD_INT 2
61761: NEG
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PUSH
61767: LD_INT 0
61769: PUSH
61770: LD_INT 2
61772: NEG
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 1
61783: NEG
61784: PUSH
61785: EMPTY
61786: LIST
61787: LIST
61788: PUSH
61789: LD_INT 2
61791: PUSH
61792: LD_INT 0
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: PUSH
61799: LD_INT 2
61801: PUSH
61802: LD_INT 1
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: PUSH
61809: LD_INT 2
61811: PUSH
61812: LD_INT 2
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 1
61821: PUSH
61822: LD_INT 2
61824: PUSH
61825: EMPTY
61826: LIST
61827: LIST
61828: PUSH
61829: LD_INT 0
61831: PUSH
61832: LD_INT 2
61834: PUSH
61835: EMPTY
61836: LIST
61837: LIST
61838: PUSH
61839: LD_INT 1
61841: NEG
61842: PUSH
61843: LD_INT 1
61845: PUSH
61846: EMPTY
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 2
61852: NEG
61853: PUSH
61854: LD_INT 0
61856: PUSH
61857: EMPTY
61858: LIST
61859: LIST
61860: PUSH
61861: LD_INT 2
61863: NEG
61864: PUSH
61865: LD_INT 1
61867: NEG
61868: PUSH
61869: EMPTY
61870: LIST
61871: LIST
61872: PUSH
61873: LD_INT 2
61875: NEG
61876: PUSH
61877: LD_INT 2
61879: NEG
61880: PUSH
61881: EMPTY
61882: LIST
61883: LIST
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: LIST
61889: LIST
61890: LIST
61891: LIST
61892: LIST
61893: LIST
61894: LIST
61895: LIST
61896: LIST
61897: LIST
61898: LIST
61899: LIST
61900: LIST
61901: LIST
61902: LIST
61903: LIST
61904: LIST
61905: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
61906: LD_ADDR_VAR 0 18
61910: PUSH
61911: LD_INT 0
61913: PUSH
61914: LD_INT 0
61916: PUSH
61917: EMPTY
61918: LIST
61919: LIST
61920: PUSH
61921: LD_INT 0
61923: PUSH
61924: LD_INT 1
61926: NEG
61927: PUSH
61928: EMPTY
61929: LIST
61930: LIST
61931: PUSH
61932: LD_INT 1
61934: PUSH
61935: LD_INT 0
61937: PUSH
61938: EMPTY
61939: LIST
61940: LIST
61941: PUSH
61942: LD_INT 1
61944: PUSH
61945: LD_INT 1
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 0
61954: PUSH
61955: LD_INT 1
61957: PUSH
61958: EMPTY
61959: LIST
61960: LIST
61961: PUSH
61962: LD_INT 1
61964: NEG
61965: PUSH
61966: LD_INT 0
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: PUSH
61973: LD_INT 1
61975: NEG
61976: PUSH
61977: LD_INT 1
61979: NEG
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_INT 1
61987: NEG
61988: PUSH
61989: LD_INT 2
61991: NEG
61992: PUSH
61993: EMPTY
61994: LIST
61995: LIST
61996: PUSH
61997: LD_INT 0
61999: PUSH
62000: LD_INT 2
62002: NEG
62003: PUSH
62004: EMPTY
62005: LIST
62006: LIST
62007: PUSH
62008: LD_INT 1
62010: PUSH
62011: LD_INT 1
62013: NEG
62014: PUSH
62015: EMPTY
62016: LIST
62017: LIST
62018: PUSH
62019: LD_INT 2
62021: PUSH
62022: LD_INT 0
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 2
62031: PUSH
62032: LD_INT 1
62034: PUSH
62035: EMPTY
62036: LIST
62037: LIST
62038: PUSH
62039: LD_INT 2
62041: PUSH
62042: LD_INT 2
62044: PUSH
62045: EMPTY
62046: LIST
62047: LIST
62048: PUSH
62049: LD_INT 1
62051: PUSH
62052: LD_INT 2
62054: PUSH
62055: EMPTY
62056: LIST
62057: LIST
62058: PUSH
62059: LD_INT 0
62061: PUSH
62062: LD_INT 2
62064: PUSH
62065: EMPTY
62066: LIST
62067: LIST
62068: PUSH
62069: LD_INT 1
62071: NEG
62072: PUSH
62073: LD_INT 1
62075: PUSH
62076: EMPTY
62077: LIST
62078: LIST
62079: PUSH
62080: LD_INT 2
62082: NEG
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 2
62093: NEG
62094: PUSH
62095: LD_INT 1
62097: NEG
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: PUSH
62103: LD_INT 2
62105: NEG
62106: PUSH
62107: LD_INT 2
62109: NEG
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: EMPTY
62116: LIST
62117: LIST
62118: LIST
62119: LIST
62120: LIST
62121: LIST
62122: LIST
62123: LIST
62124: LIST
62125: LIST
62126: LIST
62127: LIST
62128: LIST
62129: LIST
62130: LIST
62131: LIST
62132: LIST
62133: LIST
62134: LIST
62135: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62136: LD_ADDR_VAR 0 19
62140: PUSH
62141: LD_INT 0
62143: PUSH
62144: LD_INT 0
62146: PUSH
62147: EMPTY
62148: LIST
62149: LIST
62150: PUSH
62151: LD_INT 0
62153: PUSH
62154: LD_INT 1
62156: NEG
62157: PUSH
62158: EMPTY
62159: LIST
62160: LIST
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: LD_INT 0
62167: PUSH
62168: EMPTY
62169: LIST
62170: LIST
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: LD_INT 1
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: LD_INT 0
62184: PUSH
62185: LD_INT 1
62187: PUSH
62188: EMPTY
62189: LIST
62190: LIST
62191: PUSH
62192: LD_INT 1
62194: NEG
62195: PUSH
62196: LD_INT 0
62198: PUSH
62199: EMPTY
62200: LIST
62201: LIST
62202: PUSH
62203: LD_INT 1
62205: NEG
62206: PUSH
62207: LD_INT 1
62209: NEG
62210: PUSH
62211: EMPTY
62212: LIST
62213: LIST
62214: PUSH
62215: LD_INT 1
62217: NEG
62218: PUSH
62219: LD_INT 2
62221: NEG
62222: PUSH
62223: EMPTY
62224: LIST
62225: LIST
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: LD_INT 2
62232: NEG
62233: PUSH
62234: EMPTY
62235: LIST
62236: LIST
62237: PUSH
62238: LD_INT 1
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: PUSH
62245: EMPTY
62246: LIST
62247: LIST
62248: PUSH
62249: LD_INT 2
62251: PUSH
62252: LD_INT 0
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: PUSH
62259: LD_INT 2
62261: PUSH
62262: LD_INT 1
62264: PUSH
62265: EMPTY
62266: LIST
62267: LIST
62268: PUSH
62269: LD_INT 2
62271: PUSH
62272: LD_INT 2
62274: PUSH
62275: EMPTY
62276: LIST
62277: LIST
62278: PUSH
62279: LD_INT 1
62281: PUSH
62282: LD_INT 2
62284: PUSH
62285: EMPTY
62286: LIST
62287: LIST
62288: PUSH
62289: LD_INT 0
62291: PUSH
62292: LD_INT 2
62294: PUSH
62295: EMPTY
62296: LIST
62297: LIST
62298: PUSH
62299: LD_INT 1
62301: NEG
62302: PUSH
62303: LD_INT 1
62305: PUSH
62306: EMPTY
62307: LIST
62308: LIST
62309: PUSH
62310: LD_INT 2
62312: NEG
62313: PUSH
62314: LD_INT 0
62316: PUSH
62317: EMPTY
62318: LIST
62319: LIST
62320: PUSH
62321: LD_INT 2
62323: NEG
62324: PUSH
62325: LD_INT 1
62327: NEG
62328: PUSH
62329: EMPTY
62330: LIST
62331: LIST
62332: PUSH
62333: LD_INT 2
62335: NEG
62336: PUSH
62337: LD_INT 2
62339: NEG
62340: PUSH
62341: EMPTY
62342: LIST
62343: LIST
62344: PUSH
62345: EMPTY
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: LIST
62351: LIST
62352: LIST
62353: LIST
62354: LIST
62355: LIST
62356: LIST
62357: LIST
62358: LIST
62359: LIST
62360: LIST
62361: LIST
62362: LIST
62363: LIST
62364: LIST
62365: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62366: LD_ADDR_VAR 0 20
62370: PUSH
62371: LD_INT 0
62373: PUSH
62374: LD_INT 0
62376: PUSH
62377: EMPTY
62378: LIST
62379: LIST
62380: PUSH
62381: LD_INT 0
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: PUSH
62388: EMPTY
62389: LIST
62390: LIST
62391: PUSH
62392: LD_INT 1
62394: PUSH
62395: LD_INT 0
62397: PUSH
62398: EMPTY
62399: LIST
62400: LIST
62401: PUSH
62402: LD_INT 1
62404: PUSH
62405: LD_INT 1
62407: PUSH
62408: EMPTY
62409: LIST
62410: LIST
62411: PUSH
62412: LD_INT 0
62414: PUSH
62415: LD_INT 1
62417: PUSH
62418: EMPTY
62419: LIST
62420: LIST
62421: PUSH
62422: LD_INT 1
62424: NEG
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 1
62435: NEG
62436: PUSH
62437: LD_INT 1
62439: NEG
62440: PUSH
62441: EMPTY
62442: LIST
62443: LIST
62444: PUSH
62445: LD_INT 1
62447: NEG
62448: PUSH
62449: LD_INT 2
62451: NEG
62452: PUSH
62453: EMPTY
62454: LIST
62455: LIST
62456: PUSH
62457: LD_INT 0
62459: PUSH
62460: LD_INT 2
62462: NEG
62463: PUSH
62464: EMPTY
62465: LIST
62466: LIST
62467: PUSH
62468: LD_INT 1
62470: PUSH
62471: LD_INT 1
62473: NEG
62474: PUSH
62475: EMPTY
62476: LIST
62477: LIST
62478: PUSH
62479: LD_INT 2
62481: PUSH
62482: LD_INT 0
62484: PUSH
62485: EMPTY
62486: LIST
62487: LIST
62488: PUSH
62489: LD_INT 2
62491: PUSH
62492: LD_INT 1
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PUSH
62499: LD_INT 2
62501: PUSH
62502: LD_INT 2
62504: PUSH
62505: EMPTY
62506: LIST
62507: LIST
62508: PUSH
62509: LD_INT 1
62511: PUSH
62512: LD_INT 2
62514: PUSH
62515: EMPTY
62516: LIST
62517: LIST
62518: PUSH
62519: LD_INT 0
62521: PUSH
62522: LD_INT 2
62524: PUSH
62525: EMPTY
62526: LIST
62527: LIST
62528: PUSH
62529: LD_INT 1
62531: NEG
62532: PUSH
62533: LD_INT 1
62535: PUSH
62536: EMPTY
62537: LIST
62538: LIST
62539: PUSH
62540: LD_INT 2
62542: NEG
62543: PUSH
62544: LD_INT 0
62546: PUSH
62547: EMPTY
62548: LIST
62549: LIST
62550: PUSH
62551: LD_INT 2
62553: NEG
62554: PUSH
62555: LD_INT 1
62557: NEG
62558: PUSH
62559: EMPTY
62560: LIST
62561: LIST
62562: PUSH
62563: LD_INT 2
62565: NEG
62566: PUSH
62567: LD_INT 2
62569: NEG
62570: PUSH
62571: EMPTY
62572: LIST
62573: LIST
62574: PUSH
62575: EMPTY
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: LIST
62593: LIST
62594: LIST
62595: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62596: LD_ADDR_VAR 0 21
62600: PUSH
62601: LD_INT 0
62603: PUSH
62604: LD_INT 0
62606: PUSH
62607: EMPTY
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 0
62613: PUSH
62614: LD_INT 1
62616: NEG
62617: PUSH
62618: EMPTY
62619: LIST
62620: LIST
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: LD_INT 0
62627: PUSH
62628: EMPTY
62629: LIST
62630: LIST
62631: PUSH
62632: LD_INT 1
62634: PUSH
62635: LD_INT 1
62637: PUSH
62638: EMPTY
62639: LIST
62640: LIST
62641: PUSH
62642: LD_INT 0
62644: PUSH
62645: LD_INT 1
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 1
62654: NEG
62655: PUSH
62656: LD_INT 0
62658: PUSH
62659: EMPTY
62660: LIST
62661: LIST
62662: PUSH
62663: LD_INT 1
62665: NEG
62666: PUSH
62667: LD_INT 1
62669: NEG
62670: PUSH
62671: EMPTY
62672: LIST
62673: LIST
62674: PUSH
62675: LD_INT 1
62677: NEG
62678: PUSH
62679: LD_INT 2
62681: NEG
62682: PUSH
62683: EMPTY
62684: LIST
62685: LIST
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 2
62692: NEG
62693: PUSH
62694: EMPTY
62695: LIST
62696: LIST
62697: PUSH
62698: LD_INT 1
62700: PUSH
62701: LD_INT 1
62703: NEG
62704: PUSH
62705: EMPTY
62706: LIST
62707: LIST
62708: PUSH
62709: LD_INT 2
62711: PUSH
62712: LD_INT 0
62714: PUSH
62715: EMPTY
62716: LIST
62717: LIST
62718: PUSH
62719: LD_INT 2
62721: PUSH
62722: LD_INT 1
62724: PUSH
62725: EMPTY
62726: LIST
62727: LIST
62728: PUSH
62729: LD_INT 2
62731: PUSH
62732: LD_INT 2
62734: PUSH
62735: EMPTY
62736: LIST
62737: LIST
62738: PUSH
62739: LD_INT 1
62741: PUSH
62742: LD_INT 2
62744: PUSH
62745: EMPTY
62746: LIST
62747: LIST
62748: PUSH
62749: LD_INT 0
62751: PUSH
62752: LD_INT 2
62754: PUSH
62755: EMPTY
62756: LIST
62757: LIST
62758: PUSH
62759: LD_INT 1
62761: NEG
62762: PUSH
62763: LD_INT 1
62765: PUSH
62766: EMPTY
62767: LIST
62768: LIST
62769: PUSH
62770: LD_INT 2
62772: NEG
62773: PUSH
62774: LD_INT 0
62776: PUSH
62777: EMPTY
62778: LIST
62779: LIST
62780: PUSH
62781: LD_INT 2
62783: NEG
62784: PUSH
62785: LD_INT 1
62787: NEG
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: PUSH
62793: LD_INT 2
62795: NEG
62796: PUSH
62797: LD_INT 2
62799: NEG
62800: PUSH
62801: EMPTY
62802: LIST
62803: LIST
62804: PUSH
62805: EMPTY
62806: LIST
62807: LIST
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: LIST
62825: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62826: LD_ADDR_VAR 0 22
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: EMPTY
62838: LIST
62839: LIST
62840: PUSH
62841: LD_INT 0
62843: PUSH
62844: LD_INT 1
62846: NEG
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: LD_INT 0
62857: PUSH
62858: EMPTY
62859: LIST
62860: LIST
62861: PUSH
62862: LD_INT 1
62864: PUSH
62865: LD_INT 1
62867: PUSH
62868: EMPTY
62869: LIST
62870: LIST
62871: PUSH
62872: LD_INT 0
62874: PUSH
62875: LD_INT 1
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 1
62884: NEG
62885: PUSH
62886: LD_INT 0
62888: PUSH
62889: EMPTY
62890: LIST
62891: LIST
62892: PUSH
62893: LD_INT 1
62895: NEG
62896: PUSH
62897: LD_INT 1
62899: NEG
62900: PUSH
62901: EMPTY
62902: LIST
62903: LIST
62904: PUSH
62905: LD_INT 1
62907: NEG
62908: PUSH
62909: LD_INT 2
62911: NEG
62912: PUSH
62913: EMPTY
62914: LIST
62915: LIST
62916: PUSH
62917: LD_INT 0
62919: PUSH
62920: LD_INT 2
62922: NEG
62923: PUSH
62924: EMPTY
62925: LIST
62926: LIST
62927: PUSH
62928: LD_INT 1
62930: PUSH
62931: LD_INT 1
62933: NEG
62934: PUSH
62935: EMPTY
62936: LIST
62937: LIST
62938: PUSH
62939: LD_INT 2
62941: PUSH
62942: LD_INT 0
62944: PUSH
62945: EMPTY
62946: LIST
62947: LIST
62948: PUSH
62949: LD_INT 2
62951: PUSH
62952: LD_INT 1
62954: PUSH
62955: EMPTY
62956: LIST
62957: LIST
62958: PUSH
62959: LD_INT 2
62961: PUSH
62962: LD_INT 2
62964: PUSH
62965: EMPTY
62966: LIST
62967: LIST
62968: PUSH
62969: LD_INT 1
62971: PUSH
62972: LD_INT 2
62974: PUSH
62975: EMPTY
62976: LIST
62977: LIST
62978: PUSH
62979: LD_INT 0
62981: PUSH
62982: LD_INT 2
62984: PUSH
62985: EMPTY
62986: LIST
62987: LIST
62988: PUSH
62989: LD_INT 1
62991: NEG
62992: PUSH
62993: LD_INT 1
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: LD_INT 2
63002: NEG
63003: PUSH
63004: LD_INT 0
63006: PUSH
63007: EMPTY
63008: LIST
63009: LIST
63010: PUSH
63011: LD_INT 2
63013: NEG
63014: PUSH
63015: LD_INT 1
63017: NEG
63018: PUSH
63019: EMPTY
63020: LIST
63021: LIST
63022: PUSH
63023: LD_INT 2
63025: NEG
63026: PUSH
63027: LD_INT 2
63029: NEG
63030: PUSH
63031: EMPTY
63032: LIST
63033: LIST
63034: PUSH
63035: EMPTY
63036: LIST
63037: LIST
63038: LIST
63039: LIST
63040: LIST
63041: LIST
63042: LIST
63043: LIST
63044: LIST
63045: LIST
63046: LIST
63047: LIST
63048: LIST
63049: LIST
63050: LIST
63051: LIST
63052: LIST
63053: LIST
63054: LIST
63055: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63056: LD_ADDR_VAR 0 23
63060: PUSH
63061: LD_INT 0
63063: PUSH
63064: LD_INT 0
63066: PUSH
63067: EMPTY
63068: LIST
63069: LIST
63070: PUSH
63071: LD_INT 0
63073: PUSH
63074: LD_INT 1
63076: NEG
63077: PUSH
63078: EMPTY
63079: LIST
63080: LIST
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: LD_INT 0
63087: PUSH
63088: EMPTY
63089: LIST
63090: LIST
63091: PUSH
63092: LD_INT 1
63094: PUSH
63095: LD_INT 1
63097: PUSH
63098: EMPTY
63099: LIST
63100: LIST
63101: PUSH
63102: LD_INT 0
63104: PUSH
63105: LD_INT 1
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 1
63114: NEG
63115: PUSH
63116: LD_INT 0
63118: PUSH
63119: EMPTY
63120: LIST
63121: LIST
63122: PUSH
63123: LD_INT 1
63125: NEG
63126: PUSH
63127: LD_INT 1
63129: NEG
63130: PUSH
63131: EMPTY
63132: LIST
63133: LIST
63134: PUSH
63135: LD_INT 1
63137: NEG
63138: PUSH
63139: LD_INT 2
63141: NEG
63142: PUSH
63143: EMPTY
63144: LIST
63145: LIST
63146: PUSH
63147: LD_INT 0
63149: PUSH
63150: LD_INT 2
63152: NEG
63153: PUSH
63154: EMPTY
63155: LIST
63156: LIST
63157: PUSH
63158: LD_INT 1
63160: PUSH
63161: LD_INT 1
63163: NEG
63164: PUSH
63165: EMPTY
63166: LIST
63167: LIST
63168: PUSH
63169: LD_INT 2
63171: PUSH
63172: LD_INT 0
63174: PUSH
63175: EMPTY
63176: LIST
63177: LIST
63178: PUSH
63179: LD_INT 2
63181: PUSH
63182: LD_INT 1
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: PUSH
63189: LD_INT 2
63191: PUSH
63192: LD_INT 2
63194: PUSH
63195: EMPTY
63196: LIST
63197: LIST
63198: PUSH
63199: LD_INT 1
63201: PUSH
63202: LD_INT 2
63204: PUSH
63205: EMPTY
63206: LIST
63207: LIST
63208: PUSH
63209: LD_INT 0
63211: PUSH
63212: LD_INT 2
63214: PUSH
63215: EMPTY
63216: LIST
63217: LIST
63218: PUSH
63219: LD_INT 1
63221: NEG
63222: PUSH
63223: LD_INT 1
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: PUSH
63230: LD_INT 2
63232: NEG
63233: PUSH
63234: LD_INT 0
63236: PUSH
63237: EMPTY
63238: LIST
63239: LIST
63240: PUSH
63241: LD_INT 2
63243: NEG
63244: PUSH
63245: LD_INT 1
63247: NEG
63248: PUSH
63249: EMPTY
63250: LIST
63251: LIST
63252: PUSH
63253: LD_INT 2
63255: NEG
63256: PUSH
63257: LD_INT 2
63259: NEG
63260: PUSH
63261: EMPTY
63262: LIST
63263: LIST
63264: PUSH
63265: LD_INT 2
63267: NEG
63268: PUSH
63269: LD_INT 3
63271: NEG
63272: PUSH
63273: EMPTY
63274: LIST
63275: LIST
63276: PUSH
63277: LD_INT 1
63279: NEG
63280: PUSH
63281: LD_INT 3
63283: NEG
63284: PUSH
63285: EMPTY
63286: LIST
63287: LIST
63288: PUSH
63289: LD_INT 1
63291: PUSH
63292: LD_INT 2
63294: NEG
63295: PUSH
63296: EMPTY
63297: LIST
63298: LIST
63299: PUSH
63300: LD_INT 2
63302: PUSH
63303: LD_INT 1
63305: NEG
63306: PUSH
63307: EMPTY
63308: LIST
63309: LIST
63310: PUSH
63311: EMPTY
63312: LIST
63313: LIST
63314: LIST
63315: LIST
63316: LIST
63317: LIST
63318: LIST
63319: LIST
63320: LIST
63321: LIST
63322: LIST
63323: LIST
63324: LIST
63325: LIST
63326: LIST
63327: LIST
63328: LIST
63329: LIST
63330: LIST
63331: LIST
63332: LIST
63333: LIST
63334: LIST
63335: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
63336: LD_ADDR_VAR 0 24
63340: PUSH
63341: LD_INT 0
63343: PUSH
63344: LD_INT 0
63346: PUSH
63347: EMPTY
63348: LIST
63349: LIST
63350: PUSH
63351: LD_INT 0
63353: PUSH
63354: LD_INT 1
63356: NEG
63357: PUSH
63358: EMPTY
63359: LIST
63360: LIST
63361: PUSH
63362: LD_INT 1
63364: PUSH
63365: LD_INT 0
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PUSH
63372: LD_INT 1
63374: PUSH
63375: LD_INT 1
63377: PUSH
63378: EMPTY
63379: LIST
63380: LIST
63381: PUSH
63382: LD_INT 0
63384: PUSH
63385: LD_INT 1
63387: PUSH
63388: EMPTY
63389: LIST
63390: LIST
63391: PUSH
63392: LD_INT 1
63394: NEG
63395: PUSH
63396: LD_INT 0
63398: PUSH
63399: EMPTY
63400: LIST
63401: LIST
63402: PUSH
63403: LD_INT 1
63405: NEG
63406: PUSH
63407: LD_INT 1
63409: NEG
63410: PUSH
63411: EMPTY
63412: LIST
63413: LIST
63414: PUSH
63415: LD_INT 1
63417: NEG
63418: PUSH
63419: LD_INT 2
63421: NEG
63422: PUSH
63423: EMPTY
63424: LIST
63425: LIST
63426: PUSH
63427: LD_INT 0
63429: PUSH
63430: LD_INT 2
63432: NEG
63433: PUSH
63434: EMPTY
63435: LIST
63436: LIST
63437: PUSH
63438: LD_INT 1
63440: PUSH
63441: LD_INT 1
63443: NEG
63444: PUSH
63445: EMPTY
63446: LIST
63447: LIST
63448: PUSH
63449: LD_INT 2
63451: PUSH
63452: LD_INT 0
63454: PUSH
63455: EMPTY
63456: LIST
63457: LIST
63458: PUSH
63459: LD_INT 2
63461: PUSH
63462: LD_INT 1
63464: PUSH
63465: EMPTY
63466: LIST
63467: LIST
63468: PUSH
63469: LD_INT 2
63471: PUSH
63472: LD_INT 2
63474: PUSH
63475: EMPTY
63476: LIST
63477: LIST
63478: PUSH
63479: LD_INT 1
63481: PUSH
63482: LD_INT 2
63484: PUSH
63485: EMPTY
63486: LIST
63487: LIST
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: LD_INT 2
63494: PUSH
63495: EMPTY
63496: LIST
63497: LIST
63498: PUSH
63499: LD_INT 1
63501: NEG
63502: PUSH
63503: LD_INT 1
63505: PUSH
63506: EMPTY
63507: LIST
63508: LIST
63509: PUSH
63510: LD_INT 2
63512: NEG
63513: PUSH
63514: LD_INT 0
63516: PUSH
63517: EMPTY
63518: LIST
63519: LIST
63520: PUSH
63521: LD_INT 2
63523: NEG
63524: PUSH
63525: LD_INT 1
63527: NEG
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: PUSH
63533: LD_INT 2
63535: NEG
63536: PUSH
63537: LD_INT 2
63539: NEG
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 1
63547: PUSH
63548: LD_INT 2
63550: NEG
63551: PUSH
63552: EMPTY
63553: LIST
63554: LIST
63555: PUSH
63556: LD_INT 2
63558: PUSH
63559: LD_INT 1
63561: NEG
63562: PUSH
63563: EMPTY
63564: LIST
63565: LIST
63566: PUSH
63567: LD_INT 3
63569: PUSH
63570: LD_INT 1
63572: PUSH
63573: EMPTY
63574: LIST
63575: LIST
63576: PUSH
63577: LD_INT 3
63579: PUSH
63580: LD_INT 2
63582: PUSH
63583: EMPTY
63584: LIST
63585: LIST
63586: PUSH
63587: EMPTY
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: LIST
63605: LIST
63606: LIST
63607: LIST
63608: LIST
63609: LIST
63610: LIST
63611: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
63612: LD_ADDR_VAR 0 25
63616: PUSH
63617: LD_INT 0
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: EMPTY
63624: LIST
63625: LIST
63626: PUSH
63627: LD_INT 0
63629: PUSH
63630: LD_INT 1
63632: NEG
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PUSH
63638: LD_INT 1
63640: PUSH
63641: LD_INT 0
63643: PUSH
63644: EMPTY
63645: LIST
63646: LIST
63647: PUSH
63648: LD_INT 1
63650: PUSH
63651: LD_INT 1
63653: PUSH
63654: EMPTY
63655: LIST
63656: LIST
63657: PUSH
63658: LD_INT 0
63660: PUSH
63661: LD_INT 1
63663: PUSH
63664: EMPTY
63665: LIST
63666: LIST
63667: PUSH
63668: LD_INT 1
63670: NEG
63671: PUSH
63672: LD_INT 0
63674: PUSH
63675: EMPTY
63676: LIST
63677: LIST
63678: PUSH
63679: LD_INT 1
63681: NEG
63682: PUSH
63683: LD_INT 1
63685: NEG
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 1
63693: NEG
63694: PUSH
63695: LD_INT 2
63697: NEG
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 0
63705: PUSH
63706: LD_INT 2
63708: NEG
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: LD_INT 1
63716: PUSH
63717: LD_INT 1
63719: NEG
63720: PUSH
63721: EMPTY
63722: LIST
63723: LIST
63724: PUSH
63725: LD_INT 2
63727: PUSH
63728: LD_INT 0
63730: PUSH
63731: EMPTY
63732: LIST
63733: LIST
63734: PUSH
63735: LD_INT 2
63737: PUSH
63738: LD_INT 1
63740: PUSH
63741: EMPTY
63742: LIST
63743: LIST
63744: PUSH
63745: LD_INT 2
63747: PUSH
63748: LD_INT 2
63750: PUSH
63751: EMPTY
63752: LIST
63753: LIST
63754: PUSH
63755: LD_INT 1
63757: PUSH
63758: LD_INT 2
63760: PUSH
63761: EMPTY
63762: LIST
63763: LIST
63764: PUSH
63765: LD_INT 0
63767: PUSH
63768: LD_INT 2
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 1
63777: NEG
63778: PUSH
63779: LD_INT 1
63781: PUSH
63782: EMPTY
63783: LIST
63784: LIST
63785: PUSH
63786: LD_INT 2
63788: NEG
63789: PUSH
63790: LD_INT 0
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 2
63799: NEG
63800: PUSH
63801: LD_INT 1
63803: NEG
63804: PUSH
63805: EMPTY
63806: LIST
63807: LIST
63808: PUSH
63809: LD_INT 2
63811: NEG
63812: PUSH
63813: LD_INT 2
63815: NEG
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: LD_INT 3
63823: PUSH
63824: LD_INT 1
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 3
63833: PUSH
63834: LD_INT 2
63836: PUSH
63837: EMPTY
63838: LIST
63839: LIST
63840: PUSH
63841: LD_INT 2
63843: PUSH
63844: LD_INT 3
63846: PUSH
63847: EMPTY
63848: LIST
63849: LIST
63850: PUSH
63851: LD_INT 1
63853: PUSH
63854: LD_INT 3
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: EMPTY
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: LIST
63874: LIST
63875: LIST
63876: LIST
63877: LIST
63878: LIST
63879: LIST
63880: LIST
63881: LIST
63882: LIST
63883: LIST
63884: LIST
63885: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
63886: LD_ADDR_VAR 0 26
63890: PUSH
63891: LD_INT 0
63893: PUSH
63894: LD_INT 0
63896: PUSH
63897: EMPTY
63898: LIST
63899: LIST
63900: PUSH
63901: LD_INT 0
63903: PUSH
63904: LD_INT 1
63906: NEG
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 1
63914: PUSH
63915: LD_INT 0
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: LD_INT 1
63924: PUSH
63925: LD_INT 1
63927: PUSH
63928: EMPTY
63929: LIST
63930: LIST
63931: PUSH
63932: LD_INT 0
63934: PUSH
63935: LD_INT 1
63937: PUSH
63938: EMPTY
63939: LIST
63940: LIST
63941: PUSH
63942: LD_INT 1
63944: NEG
63945: PUSH
63946: LD_INT 0
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 1
63955: NEG
63956: PUSH
63957: LD_INT 1
63959: NEG
63960: PUSH
63961: EMPTY
63962: LIST
63963: LIST
63964: PUSH
63965: LD_INT 1
63967: NEG
63968: PUSH
63969: LD_INT 2
63971: NEG
63972: PUSH
63973: EMPTY
63974: LIST
63975: LIST
63976: PUSH
63977: LD_INT 0
63979: PUSH
63980: LD_INT 2
63982: NEG
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 1
63990: PUSH
63991: LD_INT 1
63993: NEG
63994: PUSH
63995: EMPTY
63996: LIST
63997: LIST
63998: PUSH
63999: LD_INT 2
64001: PUSH
64002: LD_INT 0
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: PUSH
64012: LD_INT 1
64014: PUSH
64015: EMPTY
64016: LIST
64017: LIST
64018: PUSH
64019: LD_INT 2
64021: PUSH
64022: LD_INT 2
64024: PUSH
64025: EMPTY
64026: LIST
64027: LIST
64028: PUSH
64029: LD_INT 1
64031: PUSH
64032: LD_INT 2
64034: PUSH
64035: EMPTY
64036: LIST
64037: LIST
64038: PUSH
64039: LD_INT 0
64041: PUSH
64042: LD_INT 2
64044: PUSH
64045: EMPTY
64046: LIST
64047: LIST
64048: PUSH
64049: LD_INT 1
64051: NEG
64052: PUSH
64053: LD_INT 1
64055: PUSH
64056: EMPTY
64057: LIST
64058: LIST
64059: PUSH
64060: LD_INT 2
64062: NEG
64063: PUSH
64064: LD_INT 0
64066: PUSH
64067: EMPTY
64068: LIST
64069: LIST
64070: PUSH
64071: LD_INT 2
64073: NEG
64074: PUSH
64075: LD_INT 1
64077: NEG
64078: PUSH
64079: EMPTY
64080: LIST
64081: LIST
64082: PUSH
64083: LD_INT 2
64085: NEG
64086: PUSH
64087: LD_INT 2
64089: NEG
64090: PUSH
64091: EMPTY
64092: LIST
64093: LIST
64094: PUSH
64095: LD_INT 2
64097: PUSH
64098: LD_INT 3
64100: PUSH
64101: EMPTY
64102: LIST
64103: LIST
64104: PUSH
64105: LD_INT 1
64107: PUSH
64108: LD_INT 3
64110: PUSH
64111: EMPTY
64112: LIST
64113: LIST
64114: PUSH
64115: LD_INT 1
64117: NEG
64118: PUSH
64119: LD_INT 2
64121: PUSH
64122: EMPTY
64123: LIST
64124: LIST
64125: PUSH
64126: LD_INT 2
64128: NEG
64129: PUSH
64130: LD_INT 1
64132: PUSH
64133: EMPTY
64134: LIST
64135: LIST
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: LIST
64141: LIST
64142: LIST
64143: LIST
64144: LIST
64145: LIST
64146: LIST
64147: LIST
64148: LIST
64149: LIST
64150: LIST
64151: LIST
64152: LIST
64153: LIST
64154: LIST
64155: LIST
64156: LIST
64157: LIST
64158: LIST
64159: LIST
64160: LIST
64161: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64162: LD_ADDR_VAR 0 27
64166: PUSH
64167: LD_INT 0
64169: PUSH
64170: LD_INT 0
64172: PUSH
64173: EMPTY
64174: LIST
64175: LIST
64176: PUSH
64177: LD_INT 0
64179: PUSH
64180: LD_INT 1
64182: NEG
64183: PUSH
64184: EMPTY
64185: LIST
64186: LIST
64187: PUSH
64188: LD_INT 1
64190: PUSH
64191: LD_INT 0
64193: PUSH
64194: EMPTY
64195: LIST
64196: LIST
64197: PUSH
64198: LD_INT 1
64200: PUSH
64201: LD_INT 1
64203: PUSH
64204: EMPTY
64205: LIST
64206: LIST
64207: PUSH
64208: LD_INT 0
64210: PUSH
64211: LD_INT 1
64213: PUSH
64214: EMPTY
64215: LIST
64216: LIST
64217: PUSH
64218: LD_INT 1
64220: NEG
64221: PUSH
64222: LD_INT 0
64224: PUSH
64225: EMPTY
64226: LIST
64227: LIST
64228: PUSH
64229: LD_INT 1
64231: NEG
64232: PUSH
64233: LD_INT 1
64235: NEG
64236: PUSH
64237: EMPTY
64238: LIST
64239: LIST
64240: PUSH
64241: LD_INT 1
64243: NEG
64244: PUSH
64245: LD_INT 2
64247: NEG
64248: PUSH
64249: EMPTY
64250: LIST
64251: LIST
64252: PUSH
64253: LD_INT 0
64255: PUSH
64256: LD_INT 2
64258: NEG
64259: PUSH
64260: EMPTY
64261: LIST
64262: LIST
64263: PUSH
64264: LD_INT 1
64266: PUSH
64267: LD_INT 1
64269: NEG
64270: PUSH
64271: EMPTY
64272: LIST
64273: LIST
64274: PUSH
64275: LD_INT 2
64277: PUSH
64278: LD_INT 0
64280: PUSH
64281: EMPTY
64282: LIST
64283: LIST
64284: PUSH
64285: LD_INT 2
64287: PUSH
64288: LD_INT 1
64290: PUSH
64291: EMPTY
64292: LIST
64293: LIST
64294: PUSH
64295: LD_INT 2
64297: PUSH
64298: LD_INT 2
64300: PUSH
64301: EMPTY
64302: LIST
64303: LIST
64304: PUSH
64305: LD_INT 1
64307: PUSH
64308: LD_INT 2
64310: PUSH
64311: EMPTY
64312: LIST
64313: LIST
64314: PUSH
64315: LD_INT 0
64317: PUSH
64318: LD_INT 2
64320: PUSH
64321: EMPTY
64322: LIST
64323: LIST
64324: PUSH
64325: LD_INT 1
64327: NEG
64328: PUSH
64329: LD_INT 1
64331: PUSH
64332: EMPTY
64333: LIST
64334: LIST
64335: PUSH
64336: LD_INT 2
64338: NEG
64339: PUSH
64340: LD_INT 0
64342: PUSH
64343: EMPTY
64344: LIST
64345: LIST
64346: PUSH
64347: LD_INT 2
64349: NEG
64350: PUSH
64351: LD_INT 1
64353: NEG
64354: PUSH
64355: EMPTY
64356: LIST
64357: LIST
64358: PUSH
64359: LD_INT 2
64361: NEG
64362: PUSH
64363: LD_INT 2
64365: NEG
64366: PUSH
64367: EMPTY
64368: LIST
64369: LIST
64370: PUSH
64371: LD_INT 1
64373: NEG
64374: PUSH
64375: LD_INT 2
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: PUSH
64382: LD_INT 2
64384: NEG
64385: PUSH
64386: LD_INT 1
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 3
64395: NEG
64396: PUSH
64397: LD_INT 1
64399: NEG
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: PUSH
64405: LD_INT 3
64407: NEG
64408: PUSH
64409: LD_INT 2
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: EMPTY
64418: LIST
64419: LIST
64420: LIST
64421: LIST
64422: LIST
64423: LIST
64424: LIST
64425: LIST
64426: LIST
64427: LIST
64428: LIST
64429: LIST
64430: LIST
64431: LIST
64432: LIST
64433: LIST
64434: LIST
64435: LIST
64436: LIST
64437: LIST
64438: LIST
64439: LIST
64440: LIST
64441: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64442: LD_ADDR_VAR 0 28
64446: PUSH
64447: LD_INT 0
64449: PUSH
64450: LD_INT 0
64452: PUSH
64453: EMPTY
64454: LIST
64455: LIST
64456: PUSH
64457: LD_INT 0
64459: PUSH
64460: LD_INT 1
64462: NEG
64463: PUSH
64464: EMPTY
64465: LIST
64466: LIST
64467: PUSH
64468: LD_INT 1
64470: PUSH
64471: LD_INT 0
64473: PUSH
64474: EMPTY
64475: LIST
64476: LIST
64477: PUSH
64478: LD_INT 1
64480: PUSH
64481: LD_INT 1
64483: PUSH
64484: EMPTY
64485: LIST
64486: LIST
64487: PUSH
64488: LD_INT 0
64490: PUSH
64491: LD_INT 1
64493: PUSH
64494: EMPTY
64495: LIST
64496: LIST
64497: PUSH
64498: LD_INT 1
64500: NEG
64501: PUSH
64502: LD_INT 0
64504: PUSH
64505: EMPTY
64506: LIST
64507: LIST
64508: PUSH
64509: LD_INT 1
64511: NEG
64512: PUSH
64513: LD_INT 1
64515: NEG
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 2
64527: NEG
64528: PUSH
64529: EMPTY
64530: LIST
64531: LIST
64532: PUSH
64533: LD_INT 0
64535: PUSH
64536: LD_INT 2
64538: NEG
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 1
64546: PUSH
64547: LD_INT 1
64549: NEG
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: PUSH
64555: LD_INT 2
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 2
64567: PUSH
64568: LD_INT 1
64570: PUSH
64571: EMPTY
64572: LIST
64573: LIST
64574: PUSH
64575: LD_INT 2
64577: PUSH
64578: LD_INT 2
64580: PUSH
64581: EMPTY
64582: LIST
64583: LIST
64584: PUSH
64585: LD_INT 1
64587: PUSH
64588: LD_INT 2
64590: PUSH
64591: EMPTY
64592: LIST
64593: LIST
64594: PUSH
64595: LD_INT 0
64597: PUSH
64598: LD_INT 2
64600: PUSH
64601: EMPTY
64602: LIST
64603: LIST
64604: PUSH
64605: LD_INT 1
64607: NEG
64608: PUSH
64609: LD_INT 1
64611: PUSH
64612: EMPTY
64613: LIST
64614: LIST
64615: PUSH
64616: LD_INT 2
64618: NEG
64619: PUSH
64620: LD_INT 0
64622: PUSH
64623: EMPTY
64624: LIST
64625: LIST
64626: PUSH
64627: LD_INT 2
64629: NEG
64630: PUSH
64631: LD_INT 1
64633: NEG
64634: PUSH
64635: EMPTY
64636: LIST
64637: LIST
64638: PUSH
64639: LD_INT 2
64641: NEG
64642: PUSH
64643: LD_INT 2
64645: NEG
64646: PUSH
64647: EMPTY
64648: LIST
64649: LIST
64650: PUSH
64651: LD_INT 2
64653: NEG
64654: PUSH
64655: LD_INT 3
64657: NEG
64658: PUSH
64659: EMPTY
64660: LIST
64661: LIST
64662: PUSH
64663: LD_INT 1
64665: NEG
64666: PUSH
64667: LD_INT 3
64669: NEG
64670: PUSH
64671: EMPTY
64672: LIST
64673: LIST
64674: PUSH
64675: LD_INT 3
64677: NEG
64678: PUSH
64679: LD_INT 1
64681: NEG
64682: PUSH
64683: EMPTY
64684: LIST
64685: LIST
64686: PUSH
64687: LD_INT 3
64689: NEG
64690: PUSH
64691: LD_INT 2
64693: NEG
64694: PUSH
64695: EMPTY
64696: LIST
64697: LIST
64698: PUSH
64699: EMPTY
64700: LIST
64701: LIST
64702: LIST
64703: LIST
64704: LIST
64705: LIST
64706: LIST
64707: LIST
64708: LIST
64709: LIST
64710: LIST
64711: LIST
64712: LIST
64713: LIST
64714: LIST
64715: LIST
64716: LIST
64717: LIST
64718: LIST
64719: LIST
64720: LIST
64721: LIST
64722: LIST
64723: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
64724: LD_ADDR_VAR 0 29
64728: PUSH
64729: LD_INT 0
64731: PUSH
64732: LD_INT 0
64734: PUSH
64735: EMPTY
64736: LIST
64737: LIST
64738: PUSH
64739: LD_INT 0
64741: PUSH
64742: LD_INT 1
64744: NEG
64745: PUSH
64746: EMPTY
64747: LIST
64748: LIST
64749: PUSH
64750: LD_INT 1
64752: PUSH
64753: LD_INT 0
64755: PUSH
64756: EMPTY
64757: LIST
64758: LIST
64759: PUSH
64760: LD_INT 1
64762: PUSH
64763: LD_INT 1
64765: PUSH
64766: EMPTY
64767: LIST
64768: LIST
64769: PUSH
64770: LD_INT 0
64772: PUSH
64773: LD_INT 1
64775: PUSH
64776: EMPTY
64777: LIST
64778: LIST
64779: PUSH
64780: LD_INT 1
64782: NEG
64783: PUSH
64784: LD_INT 0
64786: PUSH
64787: EMPTY
64788: LIST
64789: LIST
64790: PUSH
64791: LD_INT 1
64793: NEG
64794: PUSH
64795: LD_INT 1
64797: NEG
64798: PUSH
64799: EMPTY
64800: LIST
64801: LIST
64802: PUSH
64803: LD_INT 1
64805: NEG
64806: PUSH
64807: LD_INT 2
64809: NEG
64810: PUSH
64811: EMPTY
64812: LIST
64813: LIST
64814: PUSH
64815: LD_INT 0
64817: PUSH
64818: LD_INT 2
64820: NEG
64821: PUSH
64822: EMPTY
64823: LIST
64824: LIST
64825: PUSH
64826: LD_INT 1
64828: PUSH
64829: LD_INT 1
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 2
64839: PUSH
64840: LD_INT 0
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: LD_INT 1
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: LD_INT 2
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 0
64869: PUSH
64870: LD_INT 2
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 1
64879: NEG
64880: PUSH
64881: LD_INT 1
64883: PUSH
64884: EMPTY
64885: LIST
64886: LIST
64887: PUSH
64888: LD_INT 2
64890: NEG
64891: PUSH
64892: LD_INT 1
64894: NEG
64895: PUSH
64896: EMPTY
64897: LIST
64898: LIST
64899: PUSH
64900: LD_INT 2
64902: NEG
64903: PUSH
64904: LD_INT 2
64906: NEG
64907: PUSH
64908: EMPTY
64909: LIST
64910: LIST
64911: PUSH
64912: LD_INT 2
64914: NEG
64915: PUSH
64916: LD_INT 3
64918: NEG
64919: PUSH
64920: EMPTY
64921: LIST
64922: LIST
64923: PUSH
64924: LD_INT 2
64926: PUSH
64927: LD_INT 1
64929: NEG
64930: PUSH
64931: EMPTY
64932: LIST
64933: LIST
64934: PUSH
64935: LD_INT 3
64937: PUSH
64938: LD_INT 1
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: PUSH
64945: LD_INT 1
64947: PUSH
64948: LD_INT 3
64950: PUSH
64951: EMPTY
64952: LIST
64953: LIST
64954: PUSH
64955: LD_INT 1
64957: NEG
64958: PUSH
64959: LD_INT 2
64961: PUSH
64962: EMPTY
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 3
64968: NEG
64969: PUSH
64970: LD_INT 2
64972: NEG
64973: PUSH
64974: EMPTY
64975: LIST
64976: LIST
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: LIST
64982: LIST
64983: LIST
64984: LIST
64985: LIST
64986: LIST
64987: LIST
64988: LIST
64989: LIST
64990: LIST
64991: LIST
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: LIST
65001: LIST
65002: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65003: LD_ADDR_VAR 0 30
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: LD_INT 0
65013: PUSH
65014: EMPTY
65015: LIST
65016: LIST
65017: PUSH
65018: LD_INT 0
65020: PUSH
65021: LD_INT 1
65023: NEG
65024: PUSH
65025: EMPTY
65026: LIST
65027: LIST
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: EMPTY
65036: LIST
65037: LIST
65038: PUSH
65039: LD_INT 1
65041: PUSH
65042: LD_INT 1
65044: PUSH
65045: EMPTY
65046: LIST
65047: LIST
65048: PUSH
65049: LD_INT 0
65051: PUSH
65052: LD_INT 1
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 1
65061: NEG
65062: PUSH
65063: LD_INT 0
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 1
65072: NEG
65073: PUSH
65074: LD_INT 1
65076: NEG
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: PUSH
65082: LD_INT 1
65084: NEG
65085: PUSH
65086: LD_INT 2
65088: NEG
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: LD_INT 2
65099: NEG
65100: PUSH
65101: EMPTY
65102: LIST
65103: LIST
65104: PUSH
65105: LD_INT 1
65107: PUSH
65108: LD_INT 1
65110: NEG
65111: PUSH
65112: EMPTY
65113: LIST
65114: LIST
65115: PUSH
65116: LD_INT 2
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 2
65128: PUSH
65129: LD_INT 1
65131: PUSH
65132: EMPTY
65133: LIST
65134: LIST
65135: PUSH
65136: LD_INT 2
65138: PUSH
65139: LD_INT 2
65141: PUSH
65142: EMPTY
65143: LIST
65144: LIST
65145: PUSH
65146: LD_INT 1
65148: PUSH
65149: LD_INT 2
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 1
65158: NEG
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 2
65169: NEG
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 2
65180: NEG
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: LD_INT 3
65196: NEG
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 1
65204: PUSH
65205: LD_INT 2
65207: NEG
65208: PUSH
65209: EMPTY
65210: LIST
65211: LIST
65212: PUSH
65213: LD_INT 3
65215: PUSH
65216: LD_INT 2
65218: PUSH
65219: EMPTY
65220: LIST
65221: LIST
65222: PUSH
65223: LD_INT 2
65225: PUSH
65226: LD_INT 3
65228: PUSH
65229: EMPTY
65230: LIST
65231: LIST
65232: PUSH
65233: LD_INT 2
65235: NEG
65236: PUSH
65237: LD_INT 1
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 3
65246: NEG
65247: PUSH
65248: LD_INT 1
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: EMPTY
65257: LIST
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: LIST
65267: LIST
65268: LIST
65269: LIST
65270: LIST
65271: LIST
65272: LIST
65273: LIST
65274: LIST
65275: LIST
65276: LIST
65277: LIST
65278: LIST
65279: LIST
65280: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65281: LD_ADDR_VAR 0 31
65285: PUSH
65286: LD_INT 0
65288: PUSH
65289: LD_INT 0
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 0
65298: PUSH
65299: LD_INT 1
65301: NEG
65302: PUSH
65303: EMPTY
65304: LIST
65305: LIST
65306: PUSH
65307: LD_INT 1
65309: PUSH
65310: LD_INT 0
65312: PUSH
65313: EMPTY
65314: LIST
65315: LIST
65316: PUSH
65317: LD_INT 1
65319: PUSH
65320: LD_INT 1
65322: PUSH
65323: EMPTY
65324: LIST
65325: LIST
65326: PUSH
65327: LD_INT 0
65329: PUSH
65330: LD_INT 1
65332: PUSH
65333: EMPTY
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 1
65339: NEG
65340: PUSH
65341: LD_INT 0
65343: PUSH
65344: EMPTY
65345: LIST
65346: LIST
65347: PUSH
65348: LD_INT 1
65350: NEG
65351: PUSH
65352: LD_INT 1
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: NEG
65363: PUSH
65364: LD_INT 2
65366: NEG
65367: PUSH
65368: EMPTY
65369: LIST
65370: LIST
65371: PUSH
65372: LD_INT 1
65374: PUSH
65375: LD_INT 1
65377: NEG
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: PUSH
65383: LD_INT 2
65385: PUSH
65386: LD_INT 0
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 2
65395: PUSH
65396: LD_INT 1
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: LD_INT 2
65405: PUSH
65406: LD_INT 2
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: PUSH
65416: LD_INT 2
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 0
65425: PUSH
65426: LD_INT 2
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 1
65435: NEG
65436: PUSH
65437: LD_INT 1
65439: PUSH
65440: EMPTY
65441: LIST
65442: LIST
65443: PUSH
65444: LD_INT 2
65446: NEG
65447: PUSH
65448: LD_INT 1
65450: NEG
65451: PUSH
65452: EMPTY
65453: LIST
65454: LIST
65455: PUSH
65456: LD_INT 2
65458: NEG
65459: PUSH
65460: LD_INT 2
65462: NEG
65463: PUSH
65464: EMPTY
65465: LIST
65466: LIST
65467: PUSH
65468: LD_INT 2
65470: NEG
65471: PUSH
65472: LD_INT 3
65474: NEG
65475: PUSH
65476: EMPTY
65477: LIST
65478: LIST
65479: PUSH
65480: LD_INT 2
65482: PUSH
65483: LD_INT 1
65485: NEG
65486: PUSH
65487: EMPTY
65488: LIST
65489: LIST
65490: PUSH
65491: LD_INT 3
65493: PUSH
65494: LD_INT 1
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 1
65503: PUSH
65504: LD_INT 3
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: LD_INT 1
65513: NEG
65514: PUSH
65515: LD_INT 2
65517: PUSH
65518: EMPTY
65519: LIST
65520: LIST
65521: PUSH
65522: LD_INT 3
65524: NEG
65525: PUSH
65526: LD_INT 2
65528: NEG
65529: PUSH
65530: EMPTY
65531: LIST
65532: LIST
65533: PUSH
65534: EMPTY
65535: LIST
65536: LIST
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: LIST
65549: LIST
65550: LIST
65551: LIST
65552: LIST
65553: LIST
65554: LIST
65555: LIST
65556: LIST
65557: LIST
65558: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65559: LD_ADDR_VAR 0 32
65563: PUSH
65564: LD_INT 0
65566: PUSH
65567: LD_INT 0
65569: PUSH
65570: EMPTY
65571: LIST
65572: LIST
65573: PUSH
65574: LD_INT 0
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: LD_INT 0
65590: PUSH
65591: EMPTY
65592: LIST
65593: LIST
65594: PUSH
65595: LD_INT 1
65597: PUSH
65598: LD_INT 1
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 0
65607: PUSH
65608: LD_INT 1
65610: PUSH
65611: EMPTY
65612: LIST
65613: LIST
65614: PUSH
65615: LD_INT 1
65617: NEG
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 1
65628: NEG
65629: PUSH
65630: LD_INT 1
65632: NEG
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 1
65640: NEG
65641: PUSH
65642: LD_INT 2
65644: NEG
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 0
65652: PUSH
65653: LD_INT 2
65655: NEG
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 1
65663: PUSH
65664: LD_INT 1
65666: NEG
65667: PUSH
65668: EMPTY
65669: LIST
65670: LIST
65671: PUSH
65672: LD_INT 2
65674: PUSH
65675: LD_INT 1
65677: PUSH
65678: EMPTY
65679: LIST
65680: LIST
65681: PUSH
65682: LD_INT 2
65684: PUSH
65685: LD_INT 2
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: PUSH
65695: LD_INT 2
65697: PUSH
65698: EMPTY
65699: LIST
65700: LIST
65701: PUSH
65702: LD_INT 0
65704: PUSH
65705: LD_INT 2
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 1
65714: NEG
65715: PUSH
65716: LD_INT 1
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: PUSH
65723: LD_INT 2
65725: NEG
65726: PUSH
65727: LD_INT 0
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 2
65736: NEG
65737: PUSH
65738: LD_INT 1
65740: NEG
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: LD_INT 3
65752: NEG
65753: PUSH
65754: EMPTY
65755: LIST
65756: LIST
65757: PUSH
65758: LD_INT 1
65760: PUSH
65761: LD_INT 2
65763: NEG
65764: PUSH
65765: EMPTY
65766: LIST
65767: LIST
65768: PUSH
65769: LD_INT 3
65771: PUSH
65772: LD_INT 2
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: PUSH
65779: LD_INT 2
65781: PUSH
65782: LD_INT 3
65784: PUSH
65785: EMPTY
65786: LIST
65787: LIST
65788: PUSH
65789: LD_INT 2
65791: NEG
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 3
65802: NEG
65803: PUSH
65804: LD_INT 1
65806: NEG
65807: PUSH
65808: EMPTY
65809: LIST
65810: LIST
65811: PUSH
65812: EMPTY
65813: LIST
65814: LIST
65815: LIST
65816: LIST
65817: LIST
65818: LIST
65819: LIST
65820: LIST
65821: LIST
65822: LIST
65823: LIST
65824: LIST
65825: LIST
65826: LIST
65827: LIST
65828: LIST
65829: LIST
65830: LIST
65831: LIST
65832: LIST
65833: LIST
65834: LIST
65835: LIST
65836: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65837: LD_ADDR_VAR 0 33
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: LD_INT 0
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 1
65857: NEG
65858: PUSH
65859: EMPTY
65860: LIST
65861: LIST
65862: PUSH
65863: LD_INT 1
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 1
65875: PUSH
65876: LD_INT 1
65878: PUSH
65879: EMPTY
65880: LIST
65881: LIST
65882: PUSH
65883: LD_INT 0
65885: PUSH
65886: LD_INT 1
65888: PUSH
65889: EMPTY
65890: LIST
65891: LIST
65892: PUSH
65893: LD_INT 1
65895: NEG
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 1
65906: NEG
65907: PUSH
65908: LD_INT 1
65910: NEG
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: LD_INT 2
65922: NEG
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: LD_INT 1
65933: NEG
65934: PUSH
65935: EMPTY
65936: LIST
65937: LIST
65938: PUSH
65939: LD_INT 2
65941: PUSH
65942: LD_INT 0
65944: PUSH
65945: EMPTY
65946: LIST
65947: LIST
65948: PUSH
65949: LD_INT 2
65951: PUSH
65952: LD_INT 1
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 1
65961: PUSH
65962: LD_INT 2
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 0
65971: PUSH
65972: LD_INT 2
65974: PUSH
65975: EMPTY
65976: LIST
65977: LIST
65978: PUSH
65979: LD_INT 1
65981: NEG
65982: PUSH
65983: LD_INT 1
65985: PUSH
65986: EMPTY
65987: LIST
65988: LIST
65989: PUSH
65990: LD_INT 2
65992: NEG
65993: PUSH
65994: LD_INT 0
65996: PUSH
65997: EMPTY
65998: LIST
65999: LIST
66000: PUSH
66001: LD_INT 2
66003: NEG
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 2
66015: NEG
66016: PUSH
66017: LD_INT 2
66019: NEG
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 2
66027: NEG
66028: PUSH
66029: LD_INT 3
66031: NEG
66032: PUSH
66033: EMPTY
66034: LIST
66035: LIST
66036: PUSH
66037: LD_INT 2
66039: PUSH
66040: LD_INT 1
66042: NEG
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 3
66050: PUSH
66051: LD_INT 1
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 1
66060: PUSH
66061: LD_INT 3
66063: PUSH
66064: EMPTY
66065: LIST
66066: LIST
66067: PUSH
66068: LD_INT 1
66070: NEG
66071: PUSH
66072: LD_INT 2
66074: PUSH
66075: EMPTY
66076: LIST
66077: LIST
66078: PUSH
66079: LD_INT 3
66081: NEG
66082: PUSH
66083: LD_INT 2
66085: NEG
66086: PUSH
66087: EMPTY
66088: LIST
66089: LIST
66090: PUSH
66091: EMPTY
66092: LIST
66093: LIST
66094: LIST
66095: LIST
66096: LIST
66097: LIST
66098: LIST
66099: LIST
66100: LIST
66101: LIST
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66116: LD_ADDR_VAR 0 34
66120: PUSH
66121: LD_INT 0
66123: PUSH
66124: LD_INT 0
66126: PUSH
66127: EMPTY
66128: LIST
66129: LIST
66130: PUSH
66131: LD_INT 0
66133: PUSH
66134: LD_INT 1
66136: NEG
66137: PUSH
66138: EMPTY
66139: LIST
66140: LIST
66141: PUSH
66142: LD_INT 1
66144: PUSH
66145: LD_INT 0
66147: PUSH
66148: EMPTY
66149: LIST
66150: LIST
66151: PUSH
66152: LD_INT 1
66154: PUSH
66155: LD_INT 1
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 0
66164: PUSH
66165: LD_INT 1
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 1
66174: NEG
66175: PUSH
66176: LD_INT 0
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: LD_INT 1
66185: NEG
66186: PUSH
66187: LD_INT 1
66189: NEG
66190: PUSH
66191: EMPTY
66192: LIST
66193: LIST
66194: PUSH
66195: LD_INT 1
66197: NEG
66198: PUSH
66199: LD_INT 2
66201: NEG
66202: PUSH
66203: EMPTY
66204: LIST
66205: LIST
66206: PUSH
66207: LD_INT 0
66209: PUSH
66210: LD_INT 2
66212: NEG
66213: PUSH
66214: EMPTY
66215: LIST
66216: LIST
66217: PUSH
66218: LD_INT 1
66220: PUSH
66221: LD_INT 1
66223: NEG
66224: PUSH
66225: EMPTY
66226: LIST
66227: LIST
66228: PUSH
66229: LD_INT 2
66231: PUSH
66232: LD_INT 1
66234: PUSH
66235: EMPTY
66236: LIST
66237: LIST
66238: PUSH
66239: LD_INT 2
66241: PUSH
66242: LD_INT 2
66244: PUSH
66245: EMPTY
66246: LIST
66247: LIST
66248: PUSH
66249: LD_INT 1
66251: PUSH
66252: LD_INT 2
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 1
66261: NEG
66262: PUSH
66263: LD_INT 1
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 2
66272: NEG
66273: PUSH
66274: LD_INT 0
66276: PUSH
66277: EMPTY
66278: LIST
66279: LIST
66280: PUSH
66281: LD_INT 2
66283: NEG
66284: PUSH
66285: LD_INT 1
66287: NEG
66288: PUSH
66289: EMPTY
66290: LIST
66291: LIST
66292: PUSH
66293: LD_INT 2
66295: NEG
66296: PUSH
66297: LD_INT 2
66299: NEG
66300: PUSH
66301: EMPTY
66302: LIST
66303: LIST
66304: PUSH
66305: LD_INT 1
66307: NEG
66308: PUSH
66309: LD_INT 3
66311: NEG
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: PUSH
66317: LD_INT 1
66319: PUSH
66320: LD_INT 2
66322: NEG
66323: PUSH
66324: EMPTY
66325: LIST
66326: LIST
66327: PUSH
66328: LD_INT 3
66330: PUSH
66331: LD_INT 2
66333: PUSH
66334: EMPTY
66335: LIST
66336: LIST
66337: PUSH
66338: LD_INT 2
66340: PUSH
66341: LD_INT 3
66343: PUSH
66344: EMPTY
66345: LIST
66346: LIST
66347: PUSH
66348: LD_INT 2
66350: NEG
66351: PUSH
66352: LD_INT 1
66354: PUSH
66355: EMPTY
66356: LIST
66357: LIST
66358: PUSH
66359: LD_INT 3
66361: NEG
66362: PUSH
66363: LD_INT 1
66365: NEG
66366: PUSH
66367: EMPTY
66368: LIST
66369: LIST
66370: PUSH
66371: EMPTY
66372: LIST
66373: LIST
66374: LIST
66375: LIST
66376: LIST
66377: LIST
66378: LIST
66379: LIST
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66396: LD_ADDR_VAR 0 35
66400: PUSH
66401: LD_INT 0
66403: PUSH
66404: LD_INT 0
66406: PUSH
66407: EMPTY
66408: LIST
66409: LIST
66410: PUSH
66411: LD_INT 0
66413: PUSH
66414: LD_INT 1
66416: NEG
66417: PUSH
66418: EMPTY
66419: LIST
66420: LIST
66421: PUSH
66422: LD_INT 1
66424: PUSH
66425: LD_INT 0
66427: PUSH
66428: EMPTY
66429: LIST
66430: LIST
66431: PUSH
66432: LD_INT 1
66434: PUSH
66435: LD_INT 1
66437: PUSH
66438: EMPTY
66439: LIST
66440: LIST
66441: PUSH
66442: LD_INT 0
66444: PUSH
66445: LD_INT 1
66447: PUSH
66448: EMPTY
66449: LIST
66450: LIST
66451: PUSH
66452: LD_INT 1
66454: NEG
66455: PUSH
66456: LD_INT 0
66458: PUSH
66459: EMPTY
66460: LIST
66461: LIST
66462: PUSH
66463: LD_INT 1
66465: NEG
66466: PUSH
66467: LD_INT 1
66469: NEG
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 2
66477: PUSH
66478: LD_INT 1
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 2
66487: NEG
66488: PUSH
66489: LD_INT 1
66491: NEG
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: EMPTY
66498: LIST
66499: LIST
66500: LIST
66501: LIST
66502: LIST
66503: LIST
66504: LIST
66505: LIST
66506: LIST
66507: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66508: LD_ADDR_VAR 0 36
66512: PUSH
66513: LD_INT 0
66515: PUSH
66516: LD_INT 0
66518: PUSH
66519: EMPTY
66520: LIST
66521: LIST
66522: PUSH
66523: LD_INT 0
66525: PUSH
66526: LD_INT 1
66528: NEG
66529: PUSH
66530: EMPTY
66531: LIST
66532: LIST
66533: PUSH
66534: LD_INT 1
66536: PUSH
66537: LD_INT 0
66539: PUSH
66540: EMPTY
66541: LIST
66542: LIST
66543: PUSH
66544: LD_INT 1
66546: PUSH
66547: LD_INT 1
66549: PUSH
66550: EMPTY
66551: LIST
66552: LIST
66553: PUSH
66554: LD_INT 0
66556: PUSH
66557: LD_INT 1
66559: PUSH
66560: EMPTY
66561: LIST
66562: LIST
66563: PUSH
66564: LD_INT 1
66566: NEG
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: EMPTY
66572: LIST
66573: LIST
66574: PUSH
66575: LD_INT 1
66577: NEG
66578: PUSH
66579: LD_INT 1
66581: NEG
66582: PUSH
66583: EMPTY
66584: LIST
66585: LIST
66586: PUSH
66587: LD_INT 1
66589: NEG
66590: PUSH
66591: LD_INT 2
66593: NEG
66594: PUSH
66595: EMPTY
66596: LIST
66597: LIST
66598: PUSH
66599: LD_INT 1
66601: PUSH
66602: LD_INT 2
66604: PUSH
66605: EMPTY
66606: LIST
66607: LIST
66608: PUSH
66609: EMPTY
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: LIST
66616: LIST
66617: LIST
66618: LIST
66619: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66620: LD_ADDR_VAR 0 37
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: LD_INT 0
66630: PUSH
66631: EMPTY
66632: LIST
66633: LIST
66634: PUSH
66635: LD_INT 0
66637: PUSH
66638: LD_INT 1
66640: NEG
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: PUSH
66649: LD_INT 0
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: LD_INT 1
66658: PUSH
66659: LD_INT 1
66661: PUSH
66662: EMPTY
66663: LIST
66664: LIST
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: LD_INT 1
66671: PUSH
66672: EMPTY
66673: LIST
66674: LIST
66675: PUSH
66676: LD_INT 1
66678: NEG
66679: PUSH
66680: LD_INT 0
66682: PUSH
66683: EMPTY
66684: LIST
66685: LIST
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: LD_INT 1
66693: NEG
66694: PUSH
66695: EMPTY
66696: LIST
66697: LIST
66698: PUSH
66699: LD_INT 1
66701: PUSH
66702: LD_INT 1
66704: NEG
66705: PUSH
66706: EMPTY
66707: LIST
66708: LIST
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: LD_INT 1
66716: PUSH
66717: EMPTY
66718: LIST
66719: LIST
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: LIST
66725: LIST
66726: LIST
66727: LIST
66728: LIST
66729: LIST
66730: LIST
66731: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
66732: LD_ADDR_VAR 0 38
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: LD_INT 0
66742: PUSH
66743: EMPTY
66744: LIST
66745: LIST
66746: PUSH
66747: LD_INT 0
66749: PUSH
66750: LD_INT 1
66752: NEG
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 1
66760: PUSH
66761: LD_INT 0
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 1
66770: PUSH
66771: LD_INT 1
66773: PUSH
66774: EMPTY
66775: LIST
66776: LIST
66777: PUSH
66778: LD_INT 0
66780: PUSH
66781: LD_INT 1
66783: PUSH
66784: EMPTY
66785: LIST
66786: LIST
66787: PUSH
66788: LD_INT 1
66790: NEG
66791: PUSH
66792: LD_INT 0
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: PUSH
66799: LD_INT 1
66801: NEG
66802: PUSH
66803: LD_INT 1
66805: NEG
66806: PUSH
66807: EMPTY
66808: LIST
66809: LIST
66810: PUSH
66811: LD_INT 2
66813: PUSH
66814: LD_INT 1
66816: PUSH
66817: EMPTY
66818: LIST
66819: LIST
66820: PUSH
66821: LD_INT 2
66823: NEG
66824: PUSH
66825: LD_INT 1
66827: NEG
66828: PUSH
66829: EMPTY
66830: LIST
66831: LIST
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: LIST
66837: LIST
66838: LIST
66839: LIST
66840: LIST
66841: LIST
66842: LIST
66843: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
66844: LD_ADDR_VAR 0 39
66848: PUSH
66849: LD_INT 0
66851: PUSH
66852: LD_INT 0
66854: PUSH
66855: EMPTY
66856: LIST
66857: LIST
66858: PUSH
66859: LD_INT 0
66861: PUSH
66862: LD_INT 1
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: LD_INT 1
66872: PUSH
66873: LD_INT 0
66875: PUSH
66876: EMPTY
66877: LIST
66878: LIST
66879: PUSH
66880: LD_INT 1
66882: PUSH
66883: LD_INT 1
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: PUSH
66890: LD_INT 0
66892: PUSH
66893: LD_INT 1
66895: PUSH
66896: EMPTY
66897: LIST
66898: LIST
66899: PUSH
66900: LD_INT 1
66902: NEG
66903: PUSH
66904: LD_INT 0
66906: PUSH
66907: EMPTY
66908: LIST
66909: LIST
66910: PUSH
66911: LD_INT 1
66913: NEG
66914: PUSH
66915: LD_INT 1
66917: NEG
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: PUSH
66923: LD_INT 1
66925: NEG
66926: PUSH
66927: LD_INT 2
66929: NEG
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 1
66937: PUSH
66938: LD_INT 2
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: EMPTY
66946: LIST
66947: LIST
66948: LIST
66949: LIST
66950: LIST
66951: LIST
66952: LIST
66953: LIST
66954: LIST
66955: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
66956: LD_ADDR_VAR 0 40
66960: PUSH
66961: LD_INT 0
66963: PUSH
66964: LD_INT 0
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PUSH
66971: LD_INT 0
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: EMPTY
66979: LIST
66980: LIST
66981: PUSH
66982: LD_INT 1
66984: PUSH
66985: LD_INT 0
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: LD_INT 1
66994: PUSH
66995: LD_INT 1
66997: PUSH
66998: EMPTY
66999: LIST
67000: LIST
67001: PUSH
67002: LD_INT 0
67004: PUSH
67005: LD_INT 1
67007: PUSH
67008: EMPTY
67009: LIST
67010: LIST
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: LD_INT 0
67018: PUSH
67019: EMPTY
67020: LIST
67021: LIST
67022: PUSH
67023: LD_INT 1
67025: NEG
67026: PUSH
67027: LD_INT 1
67029: NEG
67030: PUSH
67031: EMPTY
67032: LIST
67033: LIST
67034: PUSH
67035: LD_INT 1
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: EMPTY
67043: LIST
67044: LIST
67045: PUSH
67046: LD_INT 1
67048: NEG
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: EMPTY
67058: LIST
67059: LIST
67060: LIST
67061: LIST
67062: LIST
67063: LIST
67064: LIST
67065: LIST
67066: LIST
67067: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67068: LD_ADDR_VAR 0 41
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: LD_INT 0
67078: PUSH
67079: EMPTY
67080: LIST
67081: LIST
67082: PUSH
67083: LD_INT 0
67085: PUSH
67086: LD_INT 1
67088: NEG
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PUSH
67094: LD_INT 1
67096: PUSH
67097: LD_INT 0
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 1
67106: PUSH
67107: LD_INT 1
67109: PUSH
67110: EMPTY
67111: LIST
67112: LIST
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: LD_INT 1
67119: PUSH
67120: EMPTY
67121: LIST
67122: LIST
67123: PUSH
67124: LD_INT 1
67126: NEG
67127: PUSH
67128: LD_INT 0
67130: PUSH
67131: EMPTY
67132: LIST
67133: LIST
67134: PUSH
67135: LD_INT 1
67137: NEG
67138: PUSH
67139: LD_INT 1
67141: NEG
67142: PUSH
67143: EMPTY
67144: LIST
67145: LIST
67146: PUSH
67147: LD_INT 1
67149: NEG
67150: PUSH
67151: LD_INT 2
67153: NEG
67154: PUSH
67155: EMPTY
67156: LIST
67157: LIST
67158: PUSH
67159: LD_INT 1
67161: PUSH
67162: LD_INT 1
67164: NEG
67165: PUSH
67166: EMPTY
67167: LIST
67168: LIST
67169: PUSH
67170: LD_INT 2
67172: PUSH
67173: LD_INT 0
67175: PUSH
67176: EMPTY
67177: LIST
67178: LIST
67179: PUSH
67180: LD_INT 2
67182: PUSH
67183: LD_INT 1
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 2
67192: PUSH
67193: LD_INT 2
67195: PUSH
67196: EMPTY
67197: LIST
67198: LIST
67199: PUSH
67200: LD_INT 1
67202: PUSH
67203: LD_INT 2
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 1
67212: NEG
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 2
67223: NEG
67224: PUSH
67225: LD_INT 0
67227: PUSH
67228: EMPTY
67229: LIST
67230: LIST
67231: PUSH
67232: LD_INT 2
67234: NEG
67235: PUSH
67236: LD_INT 1
67238: NEG
67239: PUSH
67240: EMPTY
67241: LIST
67242: LIST
67243: PUSH
67244: LD_INT 2
67246: NEG
67247: PUSH
67248: LD_INT 2
67250: NEG
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 2
67258: NEG
67259: PUSH
67260: LD_INT 3
67262: NEG
67263: PUSH
67264: EMPTY
67265: LIST
67266: LIST
67267: PUSH
67268: LD_INT 2
67270: PUSH
67271: LD_INT 1
67273: NEG
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 3
67281: PUSH
67282: LD_INT 0
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 3
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 3
67301: PUSH
67302: LD_INT 2
67304: PUSH
67305: EMPTY
67306: LIST
67307: LIST
67308: PUSH
67309: LD_INT 3
67311: PUSH
67312: LD_INT 3
67314: PUSH
67315: EMPTY
67316: LIST
67317: LIST
67318: PUSH
67319: LD_INT 2
67321: PUSH
67322: LD_INT 3
67324: PUSH
67325: EMPTY
67326: LIST
67327: LIST
67328: PUSH
67329: LD_INT 2
67331: NEG
67332: PUSH
67333: LD_INT 1
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 3
67342: NEG
67343: PUSH
67344: LD_INT 0
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 3
67353: NEG
67354: PUSH
67355: LD_INT 1
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 3
67365: NEG
67366: PUSH
67367: LD_INT 2
67369: NEG
67370: PUSH
67371: EMPTY
67372: LIST
67373: LIST
67374: PUSH
67375: LD_INT 3
67377: NEG
67378: PUSH
67379: LD_INT 3
67381: NEG
67382: PUSH
67383: EMPTY
67384: LIST
67385: LIST
67386: PUSH
67387: EMPTY
67388: LIST
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: LIST
67399: LIST
67400: LIST
67401: LIST
67402: LIST
67403: LIST
67404: LIST
67405: LIST
67406: LIST
67407: LIST
67408: LIST
67409: LIST
67410: LIST
67411: LIST
67412: LIST
67413: LIST
67414: LIST
67415: LIST
67416: LIST
67417: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67418: LD_ADDR_VAR 0 42
67422: PUSH
67423: LD_INT 0
67425: PUSH
67426: LD_INT 0
67428: PUSH
67429: EMPTY
67430: LIST
67431: LIST
67432: PUSH
67433: LD_INT 0
67435: PUSH
67436: LD_INT 1
67438: NEG
67439: PUSH
67440: EMPTY
67441: LIST
67442: LIST
67443: PUSH
67444: LD_INT 1
67446: PUSH
67447: LD_INT 0
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: PUSH
67454: LD_INT 1
67456: PUSH
67457: LD_INT 1
67459: PUSH
67460: EMPTY
67461: LIST
67462: LIST
67463: PUSH
67464: LD_INT 0
67466: PUSH
67467: LD_INT 1
67469: PUSH
67470: EMPTY
67471: LIST
67472: LIST
67473: PUSH
67474: LD_INT 1
67476: NEG
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: EMPTY
67482: LIST
67483: LIST
67484: PUSH
67485: LD_INT 1
67487: NEG
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: EMPTY
67494: LIST
67495: LIST
67496: PUSH
67497: LD_INT 1
67499: NEG
67500: PUSH
67501: LD_INT 2
67503: NEG
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: LD_INT 2
67514: NEG
67515: PUSH
67516: EMPTY
67517: LIST
67518: LIST
67519: PUSH
67520: LD_INT 1
67522: PUSH
67523: LD_INT 1
67525: NEG
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: PUSH
67531: LD_INT 2
67533: PUSH
67534: LD_INT 1
67536: PUSH
67537: EMPTY
67538: LIST
67539: LIST
67540: PUSH
67541: LD_INT 2
67543: PUSH
67544: LD_INT 2
67546: PUSH
67547: EMPTY
67548: LIST
67549: LIST
67550: PUSH
67551: LD_INT 1
67553: PUSH
67554: LD_INT 2
67556: PUSH
67557: EMPTY
67558: LIST
67559: LIST
67560: PUSH
67561: LD_INT 0
67563: PUSH
67564: LD_INT 2
67566: PUSH
67567: EMPTY
67568: LIST
67569: LIST
67570: PUSH
67571: LD_INT 1
67573: NEG
67574: PUSH
67575: LD_INT 1
67577: PUSH
67578: EMPTY
67579: LIST
67580: LIST
67581: PUSH
67582: LD_INT 2
67584: NEG
67585: PUSH
67586: LD_INT 1
67588: NEG
67589: PUSH
67590: EMPTY
67591: LIST
67592: LIST
67593: PUSH
67594: LD_INT 2
67596: NEG
67597: PUSH
67598: LD_INT 2
67600: NEG
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 2
67608: NEG
67609: PUSH
67610: LD_INT 3
67612: NEG
67613: PUSH
67614: EMPTY
67615: LIST
67616: LIST
67617: PUSH
67618: LD_INT 1
67620: NEG
67621: PUSH
67622: LD_INT 3
67624: NEG
67625: PUSH
67626: EMPTY
67627: LIST
67628: LIST
67629: PUSH
67630: LD_INT 0
67632: PUSH
67633: LD_INT 3
67635: NEG
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PUSH
67641: LD_INT 1
67643: PUSH
67644: LD_INT 2
67646: NEG
67647: PUSH
67648: EMPTY
67649: LIST
67650: LIST
67651: PUSH
67652: LD_INT 3
67654: PUSH
67655: LD_INT 2
67657: PUSH
67658: EMPTY
67659: LIST
67660: LIST
67661: PUSH
67662: LD_INT 3
67664: PUSH
67665: LD_INT 3
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 2
67674: PUSH
67675: LD_INT 3
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 1
67684: PUSH
67685: LD_INT 3
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 0
67694: PUSH
67695: LD_INT 3
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 1
67704: NEG
67705: PUSH
67706: LD_INT 2
67708: PUSH
67709: EMPTY
67710: LIST
67711: LIST
67712: PUSH
67713: LD_INT 3
67715: NEG
67716: PUSH
67717: LD_INT 2
67719: NEG
67720: PUSH
67721: EMPTY
67722: LIST
67723: LIST
67724: PUSH
67725: LD_INT 3
67727: NEG
67728: PUSH
67729: LD_INT 3
67731: NEG
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: EMPTY
67738: LIST
67739: LIST
67740: LIST
67741: LIST
67742: LIST
67743: LIST
67744: LIST
67745: LIST
67746: LIST
67747: LIST
67748: LIST
67749: LIST
67750: LIST
67751: LIST
67752: LIST
67753: LIST
67754: LIST
67755: LIST
67756: LIST
67757: LIST
67758: LIST
67759: LIST
67760: LIST
67761: LIST
67762: LIST
67763: LIST
67764: LIST
67765: LIST
67766: LIST
67767: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
67768: LD_ADDR_VAR 0 43
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 0
67785: PUSH
67786: LD_INT 1
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 1
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 1
67806: PUSH
67807: LD_INT 1
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 0
67816: PUSH
67817: LD_INT 1
67819: PUSH
67820: EMPTY
67821: LIST
67822: LIST
67823: PUSH
67824: LD_INT 1
67826: NEG
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: EMPTY
67832: LIST
67833: LIST
67834: PUSH
67835: LD_INT 1
67837: NEG
67838: PUSH
67839: LD_INT 1
67841: NEG
67842: PUSH
67843: EMPTY
67844: LIST
67845: LIST
67846: PUSH
67847: LD_INT 1
67849: NEG
67850: PUSH
67851: LD_INT 2
67853: NEG
67854: PUSH
67855: EMPTY
67856: LIST
67857: LIST
67858: PUSH
67859: LD_INT 0
67861: PUSH
67862: LD_INT 2
67864: NEG
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 1
67872: PUSH
67873: LD_INT 1
67875: NEG
67876: PUSH
67877: EMPTY
67878: LIST
67879: LIST
67880: PUSH
67881: LD_INT 2
67883: PUSH
67884: LD_INT 0
67886: PUSH
67887: EMPTY
67888: LIST
67889: LIST
67890: PUSH
67891: LD_INT 2
67893: PUSH
67894: LD_INT 1
67896: PUSH
67897: EMPTY
67898: LIST
67899: LIST
67900: PUSH
67901: LD_INT 1
67903: PUSH
67904: LD_INT 2
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 0
67913: PUSH
67914: LD_INT 2
67916: PUSH
67917: EMPTY
67918: LIST
67919: LIST
67920: PUSH
67921: LD_INT 1
67923: NEG
67924: PUSH
67925: LD_INT 1
67927: PUSH
67928: EMPTY
67929: LIST
67930: LIST
67931: PUSH
67932: LD_INT 2
67934: NEG
67935: PUSH
67936: LD_INT 0
67938: PUSH
67939: EMPTY
67940: LIST
67941: LIST
67942: PUSH
67943: LD_INT 2
67945: NEG
67946: PUSH
67947: LD_INT 1
67949: NEG
67950: PUSH
67951: EMPTY
67952: LIST
67953: LIST
67954: PUSH
67955: LD_INT 1
67957: NEG
67958: PUSH
67959: LD_INT 3
67961: NEG
67962: PUSH
67963: EMPTY
67964: LIST
67965: LIST
67966: PUSH
67967: LD_INT 0
67969: PUSH
67970: LD_INT 3
67972: NEG
67973: PUSH
67974: EMPTY
67975: LIST
67976: LIST
67977: PUSH
67978: LD_INT 1
67980: PUSH
67981: LD_INT 2
67983: NEG
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 2
67991: PUSH
67992: LD_INT 1
67994: NEG
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 3
68002: PUSH
68003: LD_INT 0
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: PUSH
68010: LD_INT 3
68012: PUSH
68013: LD_INT 1
68015: PUSH
68016: EMPTY
68017: LIST
68018: LIST
68019: PUSH
68020: LD_INT 1
68022: PUSH
68023: LD_INT 3
68025: PUSH
68026: EMPTY
68027: LIST
68028: LIST
68029: PUSH
68030: LD_INT 0
68032: PUSH
68033: LD_INT 3
68035: PUSH
68036: EMPTY
68037: LIST
68038: LIST
68039: PUSH
68040: LD_INT 1
68042: NEG
68043: PUSH
68044: LD_INT 2
68046: PUSH
68047: EMPTY
68048: LIST
68049: LIST
68050: PUSH
68051: LD_INT 2
68053: NEG
68054: PUSH
68055: LD_INT 1
68057: PUSH
68058: EMPTY
68059: LIST
68060: LIST
68061: PUSH
68062: LD_INT 3
68064: NEG
68065: PUSH
68066: LD_INT 0
68068: PUSH
68069: EMPTY
68070: LIST
68071: LIST
68072: PUSH
68073: LD_INT 3
68075: NEG
68076: PUSH
68077: LD_INT 1
68079: NEG
68080: PUSH
68081: EMPTY
68082: LIST
68083: LIST
68084: PUSH
68085: EMPTY
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: LIST
68102: LIST
68103: LIST
68104: LIST
68105: LIST
68106: LIST
68107: LIST
68108: LIST
68109: LIST
68110: LIST
68111: LIST
68112: LIST
68113: LIST
68114: LIST
68115: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68116: LD_ADDR_VAR 0 44
68120: PUSH
68121: LD_INT 0
68123: PUSH
68124: LD_INT 0
68126: PUSH
68127: EMPTY
68128: LIST
68129: LIST
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: LD_INT 1
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 1
68144: PUSH
68145: LD_INT 0
68147: PUSH
68148: EMPTY
68149: LIST
68150: LIST
68151: PUSH
68152: LD_INT 1
68154: PUSH
68155: LD_INT 1
68157: PUSH
68158: EMPTY
68159: LIST
68160: LIST
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: LD_INT 1
68167: PUSH
68168: EMPTY
68169: LIST
68170: LIST
68171: PUSH
68172: LD_INT 1
68174: NEG
68175: PUSH
68176: LD_INT 0
68178: PUSH
68179: EMPTY
68180: LIST
68181: LIST
68182: PUSH
68183: LD_INT 1
68185: NEG
68186: PUSH
68187: LD_INT 1
68189: NEG
68190: PUSH
68191: EMPTY
68192: LIST
68193: LIST
68194: PUSH
68195: LD_INT 1
68197: NEG
68198: PUSH
68199: LD_INT 2
68201: NEG
68202: PUSH
68203: EMPTY
68204: LIST
68205: LIST
68206: PUSH
68207: LD_INT 1
68209: PUSH
68210: LD_INT 1
68212: NEG
68213: PUSH
68214: EMPTY
68215: LIST
68216: LIST
68217: PUSH
68218: LD_INT 2
68220: PUSH
68221: LD_INT 0
68223: PUSH
68224: EMPTY
68225: LIST
68226: LIST
68227: PUSH
68228: LD_INT 2
68230: PUSH
68231: LD_INT 1
68233: PUSH
68234: EMPTY
68235: LIST
68236: LIST
68237: PUSH
68238: LD_INT 2
68240: PUSH
68241: LD_INT 2
68243: PUSH
68244: EMPTY
68245: LIST
68246: LIST
68247: PUSH
68248: LD_INT 1
68250: PUSH
68251: LD_INT 2
68253: PUSH
68254: EMPTY
68255: LIST
68256: LIST
68257: PUSH
68258: LD_INT 1
68260: NEG
68261: PUSH
68262: LD_INT 1
68264: PUSH
68265: EMPTY
68266: LIST
68267: LIST
68268: PUSH
68269: LD_INT 2
68271: NEG
68272: PUSH
68273: LD_INT 0
68275: PUSH
68276: EMPTY
68277: LIST
68278: LIST
68279: PUSH
68280: LD_INT 2
68282: NEG
68283: PUSH
68284: LD_INT 1
68286: NEG
68287: PUSH
68288: EMPTY
68289: LIST
68290: LIST
68291: PUSH
68292: LD_INT 2
68294: NEG
68295: PUSH
68296: LD_INT 2
68298: NEG
68299: PUSH
68300: EMPTY
68301: LIST
68302: LIST
68303: PUSH
68304: LD_INT 2
68306: NEG
68307: PUSH
68308: LD_INT 3
68310: NEG
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 2
68318: PUSH
68319: LD_INT 1
68321: NEG
68322: PUSH
68323: EMPTY
68324: LIST
68325: LIST
68326: PUSH
68327: LD_INT 3
68329: PUSH
68330: LD_INT 0
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 3
68339: PUSH
68340: LD_INT 1
68342: PUSH
68343: EMPTY
68344: LIST
68345: LIST
68346: PUSH
68347: LD_INT 3
68349: PUSH
68350: LD_INT 2
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: PUSH
68357: LD_INT 3
68359: PUSH
68360: LD_INT 3
68362: PUSH
68363: EMPTY
68364: LIST
68365: LIST
68366: PUSH
68367: LD_INT 2
68369: PUSH
68370: LD_INT 3
68372: PUSH
68373: EMPTY
68374: LIST
68375: LIST
68376: PUSH
68377: LD_INT 2
68379: NEG
68380: PUSH
68381: LD_INT 1
68383: PUSH
68384: EMPTY
68385: LIST
68386: LIST
68387: PUSH
68388: LD_INT 3
68390: NEG
68391: PUSH
68392: LD_INT 0
68394: PUSH
68395: EMPTY
68396: LIST
68397: LIST
68398: PUSH
68399: LD_INT 3
68401: NEG
68402: PUSH
68403: LD_INT 1
68405: NEG
68406: PUSH
68407: EMPTY
68408: LIST
68409: LIST
68410: PUSH
68411: LD_INT 3
68413: NEG
68414: PUSH
68415: LD_INT 2
68417: NEG
68418: PUSH
68419: EMPTY
68420: LIST
68421: LIST
68422: PUSH
68423: LD_INT 3
68425: NEG
68426: PUSH
68427: LD_INT 3
68429: NEG
68430: PUSH
68431: EMPTY
68432: LIST
68433: LIST
68434: PUSH
68435: EMPTY
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: LIST
68443: LIST
68444: LIST
68445: LIST
68446: LIST
68447: LIST
68448: LIST
68449: LIST
68450: LIST
68451: LIST
68452: LIST
68453: LIST
68454: LIST
68455: LIST
68456: LIST
68457: LIST
68458: LIST
68459: LIST
68460: LIST
68461: LIST
68462: LIST
68463: LIST
68464: LIST
68465: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68466: LD_ADDR_VAR 0 45
68470: PUSH
68471: LD_INT 0
68473: PUSH
68474: LD_INT 0
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 0
68483: PUSH
68484: LD_INT 1
68486: NEG
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 1
68494: PUSH
68495: LD_INT 0
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 1
68504: PUSH
68505: LD_INT 1
68507: PUSH
68508: EMPTY
68509: LIST
68510: LIST
68511: PUSH
68512: LD_INT 0
68514: PUSH
68515: LD_INT 1
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 1
68524: NEG
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: EMPTY
68530: LIST
68531: LIST
68532: PUSH
68533: LD_INT 1
68535: NEG
68536: PUSH
68537: LD_INT 1
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 1
68547: NEG
68548: PUSH
68549: LD_INT 2
68551: NEG
68552: PUSH
68553: EMPTY
68554: LIST
68555: LIST
68556: PUSH
68557: LD_INT 0
68559: PUSH
68560: LD_INT 2
68562: NEG
68563: PUSH
68564: EMPTY
68565: LIST
68566: LIST
68567: PUSH
68568: LD_INT 1
68570: PUSH
68571: LD_INT 1
68573: NEG
68574: PUSH
68575: EMPTY
68576: LIST
68577: LIST
68578: PUSH
68579: LD_INT 2
68581: PUSH
68582: LD_INT 1
68584: PUSH
68585: EMPTY
68586: LIST
68587: LIST
68588: PUSH
68589: LD_INT 2
68591: PUSH
68592: LD_INT 2
68594: PUSH
68595: EMPTY
68596: LIST
68597: LIST
68598: PUSH
68599: LD_INT 1
68601: PUSH
68602: LD_INT 2
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 0
68611: PUSH
68612: LD_INT 2
68614: PUSH
68615: EMPTY
68616: LIST
68617: LIST
68618: PUSH
68619: LD_INT 1
68621: NEG
68622: PUSH
68623: LD_INT 1
68625: PUSH
68626: EMPTY
68627: LIST
68628: LIST
68629: PUSH
68630: LD_INT 2
68632: NEG
68633: PUSH
68634: LD_INT 1
68636: NEG
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 2
68644: NEG
68645: PUSH
68646: LD_INT 2
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 2
68656: NEG
68657: PUSH
68658: LD_INT 3
68660: NEG
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 1
68668: NEG
68669: PUSH
68670: LD_INT 3
68672: NEG
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: LD_INT 0
68680: PUSH
68681: LD_INT 3
68683: NEG
68684: PUSH
68685: EMPTY
68686: LIST
68687: LIST
68688: PUSH
68689: LD_INT 1
68691: PUSH
68692: LD_INT 2
68694: NEG
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 3
68702: PUSH
68703: LD_INT 2
68705: PUSH
68706: EMPTY
68707: LIST
68708: LIST
68709: PUSH
68710: LD_INT 3
68712: PUSH
68713: LD_INT 3
68715: PUSH
68716: EMPTY
68717: LIST
68718: LIST
68719: PUSH
68720: LD_INT 2
68722: PUSH
68723: LD_INT 3
68725: PUSH
68726: EMPTY
68727: LIST
68728: LIST
68729: PUSH
68730: LD_INT 1
68732: PUSH
68733: LD_INT 3
68735: PUSH
68736: EMPTY
68737: LIST
68738: LIST
68739: PUSH
68740: LD_INT 0
68742: PUSH
68743: LD_INT 3
68745: PUSH
68746: EMPTY
68747: LIST
68748: LIST
68749: PUSH
68750: LD_INT 1
68752: NEG
68753: PUSH
68754: LD_INT 2
68756: PUSH
68757: EMPTY
68758: LIST
68759: LIST
68760: PUSH
68761: LD_INT 3
68763: NEG
68764: PUSH
68765: LD_INT 2
68767: NEG
68768: PUSH
68769: EMPTY
68770: LIST
68771: LIST
68772: PUSH
68773: LD_INT 3
68775: NEG
68776: PUSH
68777: LD_INT 3
68779: NEG
68780: PUSH
68781: EMPTY
68782: LIST
68783: LIST
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: LIST
68789: LIST
68790: LIST
68791: LIST
68792: LIST
68793: LIST
68794: LIST
68795: LIST
68796: LIST
68797: LIST
68798: LIST
68799: LIST
68800: LIST
68801: LIST
68802: LIST
68803: LIST
68804: LIST
68805: LIST
68806: LIST
68807: LIST
68808: LIST
68809: LIST
68810: LIST
68811: LIST
68812: LIST
68813: LIST
68814: LIST
68815: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68816: LD_ADDR_VAR 0 46
68820: PUSH
68821: LD_INT 0
68823: PUSH
68824: LD_INT 0
68826: PUSH
68827: EMPTY
68828: LIST
68829: LIST
68830: PUSH
68831: LD_INT 0
68833: PUSH
68834: LD_INT 1
68836: NEG
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 1
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 1
68854: PUSH
68855: LD_INT 1
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: LD_INT 1
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 1
68874: NEG
68875: PUSH
68876: LD_INT 0
68878: PUSH
68879: EMPTY
68880: LIST
68881: LIST
68882: PUSH
68883: LD_INT 1
68885: NEG
68886: PUSH
68887: LD_INT 1
68889: NEG
68890: PUSH
68891: EMPTY
68892: LIST
68893: LIST
68894: PUSH
68895: LD_INT 1
68897: NEG
68898: PUSH
68899: LD_INT 2
68901: NEG
68902: PUSH
68903: EMPTY
68904: LIST
68905: LIST
68906: PUSH
68907: LD_INT 0
68909: PUSH
68910: LD_INT 2
68912: NEG
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PUSH
68918: LD_INT 1
68920: PUSH
68921: LD_INT 1
68923: NEG
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: PUSH
68929: LD_INT 2
68931: PUSH
68932: LD_INT 0
68934: PUSH
68935: EMPTY
68936: LIST
68937: LIST
68938: PUSH
68939: LD_INT 2
68941: PUSH
68942: LD_INT 1
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PUSH
68949: LD_INT 1
68951: PUSH
68952: LD_INT 2
68954: PUSH
68955: EMPTY
68956: LIST
68957: LIST
68958: PUSH
68959: LD_INT 0
68961: PUSH
68962: LD_INT 2
68964: PUSH
68965: EMPTY
68966: LIST
68967: LIST
68968: PUSH
68969: LD_INT 1
68971: NEG
68972: PUSH
68973: LD_INT 1
68975: PUSH
68976: EMPTY
68977: LIST
68978: LIST
68979: PUSH
68980: LD_INT 2
68982: NEG
68983: PUSH
68984: LD_INT 0
68986: PUSH
68987: EMPTY
68988: LIST
68989: LIST
68990: PUSH
68991: LD_INT 2
68993: NEG
68994: PUSH
68995: LD_INT 1
68997: NEG
68998: PUSH
68999: EMPTY
69000: LIST
69001: LIST
69002: PUSH
69003: LD_INT 1
69005: NEG
69006: PUSH
69007: LD_INT 3
69009: NEG
69010: PUSH
69011: EMPTY
69012: LIST
69013: LIST
69014: PUSH
69015: LD_INT 0
69017: PUSH
69018: LD_INT 3
69020: NEG
69021: PUSH
69022: EMPTY
69023: LIST
69024: LIST
69025: PUSH
69026: LD_INT 1
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 2
69039: PUSH
69040: LD_INT 1
69042: NEG
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 3
69050: PUSH
69051: LD_INT 0
69053: PUSH
69054: EMPTY
69055: LIST
69056: LIST
69057: PUSH
69058: LD_INT 3
69060: PUSH
69061: LD_INT 1
69063: PUSH
69064: EMPTY
69065: LIST
69066: LIST
69067: PUSH
69068: LD_INT 1
69070: PUSH
69071: LD_INT 3
69073: PUSH
69074: EMPTY
69075: LIST
69076: LIST
69077: PUSH
69078: LD_INT 0
69080: PUSH
69081: LD_INT 3
69083: PUSH
69084: EMPTY
69085: LIST
69086: LIST
69087: PUSH
69088: LD_INT 1
69090: NEG
69091: PUSH
69092: LD_INT 2
69094: PUSH
69095: EMPTY
69096: LIST
69097: LIST
69098: PUSH
69099: LD_INT 2
69101: NEG
69102: PUSH
69103: LD_INT 1
69105: PUSH
69106: EMPTY
69107: LIST
69108: LIST
69109: PUSH
69110: LD_INT 3
69112: NEG
69113: PUSH
69114: LD_INT 0
69116: PUSH
69117: EMPTY
69118: LIST
69119: LIST
69120: PUSH
69121: LD_INT 3
69123: NEG
69124: PUSH
69125: LD_INT 1
69127: NEG
69128: PUSH
69129: EMPTY
69130: LIST
69131: LIST
69132: PUSH
69133: EMPTY
69134: LIST
69135: LIST
69136: LIST
69137: LIST
69138: LIST
69139: LIST
69140: LIST
69141: LIST
69142: LIST
69143: LIST
69144: LIST
69145: LIST
69146: LIST
69147: LIST
69148: LIST
69149: LIST
69150: LIST
69151: LIST
69152: LIST
69153: LIST
69154: LIST
69155: LIST
69156: LIST
69157: LIST
69158: LIST
69159: LIST
69160: LIST
69161: LIST
69162: LIST
69163: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69164: LD_ADDR_VAR 0 47
69168: PUSH
69169: LD_INT 0
69171: PUSH
69172: LD_INT 0
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 0
69181: PUSH
69182: LD_INT 1
69184: NEG
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 1
69192: PUSH
69193: LD_INT 0
69195: PUSH
69196: EMPTY
69197: LIST
69198: LIST
69199: PUSH
69200: LD_INT 1
69202: PUSH
69203: LD_INT 1
69205: PUSH
69206: EMPTY
69207: LIST
69208: LIST
69209: PUSH
69210: LD_INT 0
69212: PUSH
69213: LD_INT 1
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 1
69222: NEG
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: EMPTY
69228: LIST
69229: LIST
69230: PUSH
69231: LD_INT 1
69233: NEG
69234: PUSH
69235: LD_INT 1
69237: NEG
69238: PUSH
69239: EMPTY
69240: LIST
69241: LIST
69242: PUSH
69243: LD_INT 1
69245: NEG
69246: PUSH
69247: LD_INT 2
69249: NEG
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 0
69257: PUSH
69258: LD_INT 2
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 1
69268: PUSH
69269: LD_INT 1
69271: NEG
69272: PUSH
69273: EMPTY
69274: LIST
69275: LIST
69276: PUSH
69277: LD_INT 2
69279: NEG
69280: PUSH
69281: LD_INT 1
69283: NEG
69284: PUSH
69285: EMPTY
69286: LIST
69287: LIST
69288: PUSH
69289: LD_INT 2
69291: NEG
69292: PUSH
69293: LD_INT 2
69295: NEG
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: LIST
69305: LIST
69306: LIST
69307: LIST
69308: LIST
69309: LIST
69310: LIST
69311: LIST
69312: LIST
69313: LIST
69314: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
69315: LD_ADDR_VAR 0 48
69319: PUSH
69320: LD_INT 0
69322: PUSH
69323: LD_INT 0
69325: PUSH
69326: EMPTY
69327: LIST
69328: LIST
69329: PUSH
69330: LD_INT 0
69332: PUSH
69333: LD_INT 1
69335: NEG
69336: PUSH
69337: EMPTY
69338: LIST
69339: LIST
69340: PUSH
69341: LD_INT 1
69343: PUSH
69344: LD_INT 0
69346: PUSH
69347: EMPTY
69348: LIST
69349: LIST
69350: PUSH
69351: LD_INT 1
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 0
69363: PUSH
69364: LD_INT 1
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 1
69373: NEG
69374: PUSH
69375: LD_INT 0
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 1
69384: NEG
69385: PUSH
69386: LD_INT 1
69388: NEG
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 1
69396: NEG
69397: PUSH
69398: LD_INT 2
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: LD_INT 2
69411: NEG
69412: PUSH
69413: EMPTY
69414: LIST
69415: LIST
69416: PUSH
69417: LD_INT 1
69419: PUSH
69420: LD_INT 1
69422: NEG
69423: PUSH
69424: EMPTY
69425: LIST
69426: LIST
69427: PUSH
69428: LD_INT 2
69430: PUSH
69431: LD_INT 0
69433: PUSH
69434: EMPTY
69435: LIST
69436: LIST
69437: PUSH
69438: LD_INT 2
69440: PUSH
69441: LD_INT 1
69443: PUSH
69444: EMPTY
69445: LIST
69446: LIST
69447: PUSH
69448: EMPTY
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: LIST
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
69462: LD_ADDR_VAR 0 49
69466: PUSH
69467: LD_INT 0
69469: PUSH
69470: LD_INT 0
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 0
69479: PUSH
69480: LD_INT 1
69482: NEG
69483: PUSH
69484: EMPTY
69485: LIST
69486: LIST
69487: PUSH
69488: LD_INT 1
69490: PUSH
69491: LD_INT 0
69493: PUSH
69494: EMPTY
69495: LIST
69496: LIST
69497: PUSH
69498: LD_INT 1
69500: PUSH
69501: LD_INT 1
69503: PUSH
69504: EMPTY
69505: LIST
69506: LIST
69507: PUSH
69508: LD_INT 0
69510: PUSH
69511: LD_INT 1
69513: PUSH
69514: EMPTY
69515: LIST
69516: LIST
69517: PUSH
69518: LD_INT 1
69520: NEG
69521: PUSH
69522: LD_INT 0
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 1
69531: NEG
69532: PUSH
69533: LD_INT 1
69535: NEG
69536: PUSH
69537: EMPTY
69538: LIST
69539: LIST
69540: PUSH
69541: LD_INT 1
69543: PUSH
69544: LD_INT 1
69546: NEG
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 2
69554: PUSH
69555: LD_INT 0
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 2
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 2
69574: PUSH
69575: LD_INT 2
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 1
69584: PUSH
69585: LD_INT 2
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: EMPTY
69593: LIST
69594: LIST
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: LIST
69600: LIST
69601: LIST
69602: LIST
69603: LIST
69604: LIST
69605: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
69606: LD_ADDR_VAR 0 50
69610: PUSH
69611: LD_INT 0
69613: PUSH
69614: LD_INT 0
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 0
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: LD_INT 1
69634: PUSH
69635: LD_INT 0
69637: PUSH
69638: EMPTY
69639: LIST
69640: LIST
69641: PUSH
69642: LD_INT 1
69644: PUSH
69645: LD_INT 1
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: LD_INT 0
69654: PUSH
69655: LD_INT 1
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 1
69664: NEG
69665: PUSH
69666: LD_INT 0
69668: PUSH
69669: EMPTY
69670: LIST
69671: LIST
69672: PUSH
69673: LD_INT 1
69675: NEG
69676: PUSH
69677: LD_INT 1
69679: NEG
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 2
69687: PUSH
69688: LD_INT 1
69690: PUSH
69691: EMPTY
69692: LIST
69693: LIST
69694: PUSH
69695: LD_INT 2
69697: PUSH
69698: LD_INT 2
69700: PUSH
69701: EMPTY
69702: LIST
69703: LIST
69704: PUSH
69705: LD_INT 1
69707: PUSH
69708: LD_INT 2
69710: PUSH
69711: EMPTY
69712: LIST
69713: LIST
69714: PUSH
69715: LD_INT 0
69717: PUSH
69718: LD_INT 2
69720: PUSH
69721: EMPTY
69722: LIST
69723: LIST
69724: PUSH
69725: LD_INT 1
69727: NEG
69728: PUSH
69729: LD_INT 1
69731: PUSH
69732: EMPTY
69733: LIST
69734: LIST
69735: PUSH
69736: EMPTY
69737: LIST
69738: LIST
69739: LIST
69740: LIST
69741: LIST
69742: LIST
69743: LIST
69744: LIST
69745: LIST
69746: LIST
69747: LIST
69748: LIST
69749: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
69750: LD_ADDR_VAR 0 51
69754: PUSH
69755: LD_INT 0
69757: PUSH
69758: LD_INT 0
69760: PUSH
69761: EMPTY
69762: LIST
69763: LIST
69764: PUSH
69765: LD_INT 0
69767: PUSH
69768: LD_INT 1
69770: NEG
69771: PUSH
69772: EMPTY
69773: LIST
69774: LIST
69775: PUSH
69776: LD_INT 1
69778: PUSH
69779: LD_INT 0
69781: PUSH
69782: EMPTY
69783: LIST
69784: LIST
69785: PUSH
69786: LD_INT 1
69788: PUSH
69789: LD_INT 1
69791: PUSH
69792: EMPTY
69793: LIST
69794: LIST
69795: PUSH
69796: LD_INT 0
69798: PUSH
69799: LD_INT 1
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: LD_INT 1
69808: NEG
69809: PUSH
69810: LD_INT 0
69812: PUSH
69813: EMPTY
69814: LIST
69815: LIST
69816: PUSH
69817: LD_INT 1
69819: NEG
69820: PUSH
69821: LD_INT 1
69823: NEG
69824: PUSH
69825: EMPTY
69826: LIST
69827: LIST
69828: PUSH
69829: LD_INT 1
69831: PUSH
69832: LD_INT 2
69834: PUSH
69835: EMPTY
69836: LIST
69837: LIST
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: LD_INT 2
69844: PUSH
69845: EMPTY
69846: LIST
69847: LIST
69848: PUSH
69849: LD_INT 1
69851: NEG
69852: PUSH
69853: LD_INT 1
69855: PUSH
69856: EMPTY
69857: LIST
69858: LIST
69859: PUSH
69860: LD_INT 2
69862: NEG
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: EMPTY
69868: LIST
69869: LIST
69870: PUSH
69871: LD_INT 2
69873: NEG
69874: PUSH
69875: LD_INT 1
69877: NEG
69878: PUSH
69879: EMPTY
69880: LIST
69881: LIST
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: LIST
69887: LIST
69888: LIST
69889: LIST
69890: LIST
69891: LIST
69892: LIST
69893: LIST
69894: LIST
69895: LIST
69896: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69897: LD_ADDR_VAR 0 52
69901: PUSH
69902: LD_INT 0
69904: PUSH
69905: LD_INT 0
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 0
69914: PUSH
69915: LD_INT 1
69917: NEG
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: PUSH
69923: LD_INT 1
69925: PUSH
69926: LD_INT 0
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: LD_INT 1
69938: PUSH
69939: EMPTY
69940: LIST
69941: LIST
69942: PUSH
69943: LD_INT 0
69945: PUSH
69946: LD_INT 1
69948: PUSH
69949: EMPTY
69950: LIST
69951: LIST
69952: PUSH
69953: LD_INT 1
69955: NEG
69956: PUSH
69957: LD_INT 0
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 1
69966: NEG
69967: PUSH
69968: LD_INT 1
69970: NEG
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 1
69978: NEG
69979: PUSH
69980: LD_INT 2
69982: NEG
69983: PUSH
69984: EMPTY
69985: LIST
69986: LIST
69987: PUSH
69988: LD_INT 1
69990: NEG
69991: PUSH
69992: LD_INT 1
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 2
70001: NEG
70002: PUSH
70003: LD_INT 0
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 2
70012: NEG
70013: PUSH
70014: LD_INT 1
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 2
70024: NEG
70025: PUSH
70026: LD_INT 2
70028: NEG
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: EMPTY
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70048: LD_ADDR_VAR 0 53
70052: PUSH
70053: LD_INT 0
70055: PUSH
70056: LD_INT 0
70058: PUSH
70059: EMPTY
70060: LIST
70061: LIST
70062: PUSH
70063: LD_INT 0
70065: PUSH
70066: LD_INT 1
70068: NEG
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 1
70076: PUSH
70077: LD_INT 0
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: PUSH
70084: LD_INT 1
70086: PUSH
70087: LD_INT 1
70089: PUSH
70090: EMPTY
70091: LIST
70092: LIST
70093: PUSH
70094: LD_INT 0
70096: PUSH
70097: LD_INT 1
70099: PUSH
70100: EMPTY
70101: LIST
70102: LIST
70103: PUSH
70104: LD_INT 1
70106: NEG
70107: PUSH
70108: LD_INT 0
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 1
70117: NEG
70118: PUSH
70119: LD_INT 1
70121: NEG
70122: PUSH
70123: EMPTY
70124: LIST
70125: LIST
70126: PUSH
70127: LD_INT 1
70129: NEG
70130: PUSH
70131: LD_INT 2
70133: NEG
70134: PUSH
70135: EMPTY
70136: LIST
70137: LIST
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: LD_INT 2
70144: NEG
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 1
70152: PUSH
70153: LD_INT 1
70155: NEG
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 2
70163: PUSH
70164: LD_INT 0
70166: PUSH
70167: EMPTY
70168: LIST
70169: LIST
70170: PUSH
70171: LD_INT 2
70173: PUSH
70174: LD_INT 1
70176: PUSH
70177: EMPTY
70178: LIST
70179: LIST
70180: PUSH
70181: LD_INT 2
70183: PUSH
70184: LD_INT 2
70186: PUSH
70187: EMPTY
70188: LIST
70189: LIST
70190: PUSH
70191: LD_INT 1
70193: PUSH
70194: LD_INT 2
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: LD_INT 2
70206: PUSH
70207: EMPTY
70208: LIST
70209: LIST
70210: PUSH
70211: LD_INT 1
70213: NEG
70214: PUSH
70215: LD_INT 1
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: LD_INT 2
70224: NEG
70225: PUSH
70226: LD_INT 0
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 2
70235: NEG
70236: PUSH
70237: LD_INT 1
70239: NEG
70240: PUSH
70241: EMPTY
70242: LIST
70243: LIST
70244: PUSH
70245: LD_INT 2
70247: NEG
70248: PUSH
70249: LD_INT 2
70251: NEG
70252: PUSH
70253: EMPTY
70254: LIST
70255: LIST
70256: PUSH
70257: EMPTY
70258: LIST
70259: LIST
70260: LIST
70261: LIST
70262: LIST
70263: LIST
70264: LIST
70265: LIST
70266: LIST
70267: LIST
70268: LIST
70269: LIST
70270: LIST
70271: LIST
70272: LIST
70273: LIST
70274: LIST
70275: LIST
70276: LIST
70277: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70278: LD_ADDR_VAR 0 54
70282: PUSH
70283: LD_INT 0
70285: PUSH
70286: LD_INT 0
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: LD_INT 1
70298: NEG
70299: PUSH
70300: EMPTY
70301: LIST
70302: LIST
70303: PUSH
70304: LD_INT 1
70306: PUSH
70307: LD_INT 0
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 1
70316: PUSH
70317: LD_INT 1
70319: PUSH
70320: EMPTY
70321: LIST
70322: LIST
70323: PUSH
70324: LD_INT 0
70326: PUSH
70327: LD_INT 1
70329: PUSH
70330: EMPTY
70331: LIST
70332: LIST
70333: PUSH
70334: LD_INT 1
70336: NEG
70337: PUSH
70338: LD_INT 0
70340: PUSH
70341: EMPTY
70342: LIST
70343: LIST
70344: PUSH
70345: LD_INT 1
70347: NEG
70348: PUSH
70349: LD_INT 1
70351: NEG
70352: PUSH
70353: EMPTY
70354: LIST
70355: LIST
70356: PUSH
70357: LD_INT 1
70359: NEG
70360: PUSH
70361: LD_INT 2
70363: NEG
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 2
70374: NEG
70375: PUSH
70376: EMPTY
70377: LIST
70378: LIST
70379: PUSH
70380: LD_INT 1
70382: PUSH
70383: LD_INT 1
70385: NEG
70386: PUSH
70387: EMPTY
70388: LIST
70389: LIST
70390: PUSH
70391: LD_INT 2
70393: PUSH
70394: LD_INT 0
70396: PUSH
70397: EMPTY
70398: LIST
70399: LIST
70400: PUSH
70401: LD_INT 2
70403: PUSH
70404: LD_INT 1
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 2
70413: PUSH
70414: LD_INT 2
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 1
70423: PUSH
70424: LD_INT 2
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 0
70433: PUSH
70434: LD_INT 2
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 1
70443: NEG
70444: PUSH
70445: LD_INT 1
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 2
70454: NEG
70455: PUSH
70456: LD_INT 0
70458: PUSH
70459: EMPTY
70460: LIST
70461: LIST
70462: PUSH
70463: LD_INT 2
70465: NEG
70466: PUSH
70467: LD_INT 1
70469: NEG
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 2
70477: NEG
70478: PUSH
70479: LD_INT 2
70481: NEG
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: EMPTY
70488: LIST
70489: LIST
70490: LIST
70491: LIST
70492: LIST
70493: LIST
70494: LIST
70495: LIST
70496: LIST
70497: LIST
70498: LIST
70499: LIST
70500: LIST
70501: LIST
70502: LIST
70503: LIST
70504: LIST
70505: LIST
70506: LIST
70507: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70508: LD_ADDR_VAR 0 55
70512: PUSH
70513: LD_INT 0
70515: PUSH
70516: LD_INT 0
70518: PUSH
70519: EMPTY
70520: LIST
70521: LIST
70522: PUSH
70523: LD_INT 0
70525: PUSH
70526: LD_INT 1
70528: NEG
70529: PUSH
70530: EMPTY
70531: LIST
70532: LIST
70533: PUSH
70534: LD_INT 1
70536: PUSH
70537: LD_INT 0
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 1
70546: PUSH
70547: LD_INT 1
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 0
70556: PUSH
70557: LD_INT 1
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 1
70566: NEG
70567: PUSH
70568: LD_INT 0
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 1
70577: NEG
70578: PUSH
70579: LD_INT 1
70581: NEG
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 1
70589: NEG
70590: PUSH
70591: LD_INT 2
70593: NEG
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 0
70601: PUSH
70602: LD_INT 2
70604: NEG
70605: PUSH
70606: EMPTY
70607: LIST
70608: LIST
70609: PUSH
70610: LD_INT 1
70612: PUSH
70613: LD_INT 1
70615: NEG
70616: PUSH
70617: EMPTY
70618: LIST
70619: LIST
70620: PUSH
70621: LD_INT 2
70623: PUSH
70624: LD_INT 0
70626: PUSH
70627: EMPTY
70628: LIST
70629: LIST
70630: PUSH
70631: LD_INT 2
70633: PUSH
70634: LD_INT 1
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: LD_INT 2
70643: PUSH
70644: LD_INT 2
70646: PUSH
70647: EMPTY
70648: LIST
70649: LIST
70650: PUSH
70651: LD_INT 1
70653: PUSH
70654: LD_INT 2
70656: PUSH
70657: EMPTY
70658: LIST
70659: LIST
70660: PUSH
70661: LD_INT 0
70663: PUSH
70664: LD_INT 2
70666: PUSH
70667: EMPTY
70668: LIST
70669: LIST
70670: PUSH
70671: LD_INT 1
70673: NEG
70674: PUSH
70675: LD_INT 1
70677: PUSH
70678: EMPTY
70679: LIST
70680: LIST
70681: PUSH
70682: LD_INT 2
70684: NEG
70685: PUSH
70686: LD_INT 0
70688: PUSH
70689: EMPTY
70690: LIST
70691: LIST
70692: PUSH
70693: LD_INT 2
70695: NEG
70696: PUSH
70697: LD_INT 1
70699: NEG
70700: PUSH
70701: EMPTY
70702: LIST
70703: LIST
70704: PUSH
70705: LD_INT 2
70707: NEG
70708: PUSH
70709: LD_INT 2
70711: NEG
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: LIST
70724: LIST
70725: LIST
70726: LIST
70727: LIST
70728: LIST
70729: LIST
70730: LIST
70731: LIST
70732: LIST
70733: LIST
70734: LIST
70735: LIST
70736: LIST
70737: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70738: LD_ADDR_VAR 0 56
70742: PUSH
70743: LD_INT 0
70745: PUSH
70746: LD_INT 0
70748: PUSH
70749: EMPTY
70750: LIST
70751: LIST
70752: PUSH
70753: LD_INT 0
70755: PUSH
70756: LD_INT 1
70758: NEG
70759: PUSH
70760: EMPTY
70761: LIST
70762: LIST
70763: PUSH
70764: LD_INT 1
70766: PUSH
70767: LD_INT 0
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 1
70776: PUSH
70777: LD_INT 1
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: LD_INT 1
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 1
70796: NEG
70797: PUSH
70798: LD_INT 0
70800: PUSH
70801: EMPTY
70802: LIST
70803: LIST
70804: PUSH
70805: LD_INT 1
70807: NEG
70808: PUSH
70809: LD_INT 1
70811: NEG
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: PUSH
70817: LD_INT 1
70819: NEG
70820: PUSH
70821: LD_INT 2
70823: NEG
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 0
70831: PUSH
70832: LD_INT 2
70834: NEG
70835: PUSH
70836: EMPTY
70837: LIST
70838: LIST
70839: PUSH
70840: LD_INT 1
70842: PUSH
70843: LD_INT 1
70845: NEG
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 2
70853: PUSH
70854: LD_INT 0
70856: PUSH
70857: EMPTY
70858: LIST
70859: LIST
70860: PUSH
70861: LD_INT 2
70863: PUSH
70864: LD_INT 1
70866: PUSH
70867: EMPTY
70868: LIST
70869: LIST
70870: PUSH
70871: LD_INT 2
70873: PUSH
70874: LD_INT 2
70876: PUSH
70877: EMPTY
70878: LIST
70879: LIST
70880: PUSH
70881: LD_INT 1
70883: PUSH
70884: LD_INT 2
70886: PUSH
70887: EMPTY
70888: LIST
70889: LIST
70890: PUSH
70891: LD_INT 0
70893: PUSH
70894: LD_INT 2
70896: PUSH
70897: EMPTY
70898: LIST
70899: LIST
70900: PUSH
70901: LD_INT 1
70903: NEG
70904: PUSH
70905: LD_INT 1
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: PUSH
70912: LD_INT 2
70914: NEG
70915: PUSH
70916: LD_INT 0
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: PUSH
70923: LD_INT 2
70925: NEG
70926: PUSH
70927: LD_INT 1
70929: NEG
70930: PUSH
70931: EMPTY
70932: LIST
70933: LIST
70934: PUSH
70935: LD_INT 2
70937: NEG
70938: PUSH
70939: LD_INT 2
70941: NEG
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: EMPTY
70948: LIST
70949: LIST
70950: LIST
70951: LIST
70952: LIST
70953: LIST
70954: LIST
70955: LIST
70956: LIST
70957: LIST
70958: LIST
70959: LIST
70960: LIST
70961: LIST
70962: LIST
70963: LIST
70964: LIST
70965: LIST
70966: LIST
70967: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70968: LD_ADDR_VAR 0 57
70972: PUSH
70973: LD_INT 0
70975: PUSH
70976: LD_INT 0
70978: PUSH
70979: EMPTY
70980: LIST
70981: LIST
70982: PUSH
70983: LD_INT 0
70985: PUSH
70986: LD_INT 1
70988: NEG
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 1
70996: PUSH
70997: LD_INT 0
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 1
71006: PUSH
71007: LD_INT 1
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 0
71016: PUSH
71017: LD_INT 1
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 1
71026: NEG
71027: PUSH
71028: LD_INT 0
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 1
71037: NEG
71038: PUSH
71039: LD_INT 1
71041: NEG
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PUSH
71047: LD_INT 1
71049: NEG
71050: PUSH
71051: LD_INT 2
71053: NEG
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 0
71061: PUSH
71062: LD_INT 2
71064: NEG
71065: PUSH
71066: EMPTY
71067: LIST
71068: LIST
71069: PUSH
71070: LD_INT 1
71072: PUSH
71073: LD_INT 1
71075: NEG
71076: PUSH
71077: EMPTY
71078: LIST
71079: LIST
71080: PUSH
71081: LD_INT 2
71083: PUSH
71084: LD_INT 0
71086: PUSH
71087: EMPTY
71088: LIST
71089: LIST
71090: PUSH
71091: LD_INT 2
71093: PUSH
71094: LD_INT 1
71096: PUSH
71097: EMPTY
71098: LIST
71099: LIST
71100: PUSH
71101: LD_INT 2
71103: PUSH
71104: LD_INT 2
71106: PUSH
71107: EMPTY
71108: LIST
71109: LIST
71110: PUSH
71111: LD_INT 1
71113: PUSH
71114: LD_INT 2
71116: PUSH
71117: EMPTY
71118: LIST
71119: LIST
71120: PUSH
71121: LD_INT 0
71123: PUSH
71124: LD_INT 2
71126: PUSH
71127: EMPTY
71128: LIST
71129: LIST
71130: PUSH
71131: LD_INT 1
71133: NEG
71134: PUSH
71135: LD_INT 1
71137: PUSH
71138: EMPTY
71139: LIST
71140: LIST
71141: PUSH
71142: LD_INT 2
71144: NEG
71145: PUSH
71146: LD_INT 0
71148: PUSH
71149: EMPTY
71150: LIST
71151: LIST
71152: PUSH
71153: LD_INT 2
71155: NEG
71156: PUSH
71157: LD_INT 1
71159: NEG
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 2
71167: NEG
71168: PUSH
71169: LD_INT 2
71171: NEG
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: EMPTY
71178: LIST
71179: LIST
71180: LIST
71181: LIST
71182: LIST
71183: LIST
71184: LIST
71185: LIST
71186: LIST
71187: LIST
71188: LIST
71189: LIST
71190: LIST
71191: LIST
71192: LIST
71193: LIST
71194: LIST
71195: LIST
71196: LIST
71197: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71198: LD_ADDR_VAR 0 58
71202: PUSH
71203: LD_INT 0
71205: PUSH
71206: LD_INT 0
71208: PUSH
71209: EMPTY
71210: LIST
71211: LIST
71212: PUSH
71213: LD_INT 0
71215: PUSH
71216: LD_INT 1
71218: NEG
71219: PUSH
71220: EMPTY
71221: LIST
71222: LIST
71223: PUSH
71224: LD_INT 1
71226: PUSH
71227: LD_INT 0
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 1
71236: PUSH
71237: LD_INT 1
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 0
71246: PUSH
71247: LD_INT 1
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 1
71256: NEG
71257: PUSH
71258: LD_INT 0
71260: PUSH
71261: EMPTY
71262: LIST
71263: LIST
71264: PUSH
71265: LD_INT 1
71267: NEG
71268: PUSH
71269: LD_INT 1
71271: NEG
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: PUSH
71277: LD_INT 1
71279: NEG
71280: PUSH
71281: LD_INT 2
71283: NEG
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 0
71291: PUSH
71292: LD_INT 2
71294: NEG
71295: PUSH
71296: EMPTY
71297: LIST
71298: LIST
71299: PUSH
71300: LD_INT 1
71302: PUSH
71303: LD_INT 1
71305: NEG
71306: PUSH
71307: EMPTY
71308: LIST
71309: LIST
71310: PUSH
71311: LD_INT 2
71313: PUSH
71314: LD_INT 0
71316: PUSH
71317: EMPTY
71318: LIST
71319: LIST
71320: PUSH
71321: LD_INT 2
71323: PUSH
71324: LD_INT 1
71326: PUSH
71327: EMPTY
71328: LIST
71329: LIST
71330: PUSH
71331: LD_INT 2
71333: PUSH
71334: LD_INT 2
71336: PUSH
71337: EMPTY
71338: LIST
71339: LIST
71340: PUSH
71341: LD_INT 1
71343: PUSH
71344: LD_INT 2
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 0
71353: PUSH
71354: LD_INT 2
71356: PUSH
71357: EMPTY
71358: LIST
71359: LIST
71360: PUSH
71361: LD_INT 1
71363: NEG
71364: PUSH
71365: LD_INT 1
71367: PUSH
71368: EMPTY
71369: LIST
71370: LIST
71371: PUSH
71372: LD_INT 2
71374: NEG
71375: PUSH
71376: LD_INT 0
71378: PUSH
71379: EMPTY
71380: LIST
71381: LIST
71382: PUSH
71383: LD_INT 2
71385: NEG
71386: PUSH
71387: LD_INT 1
71389: NEG
71390: PUSH
71391: EMPTY
71392: LIST
71393: LIST
71394: PUSH
71395: LD_INT 2
71397: NEG
71398: PUSH
71399: LD_INT 2
71401: NEG
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: EMPTY
71408: LIST
71409: LIST
71410: LIST
71411: LIST
71412: LIST
71413: LIST
71414: LIST
71415: LIST
71416: LIST
71417: LIST
71418: LIST
71419: LIST
71420: LIST
71421: LIST
71422: LIST
71423: LIST
71424: LIST
71425: LIST
71426: LIST
71427: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71428: LD_ADDR_VAR 0 59
71432: PUSH
71433: LD_INT 0
71435: PUSH
71436: LD_INT 0
71438: PUSH
71439: EMPTY
71440: LIST
71441: LIST
71442: PUSH
71443: LD_INT 0
71445: PUSH
71446: LD_INT 1
71448: NEG
71449: PUSH
71450: EMPTY
71451: LIST
71452: LIST
71453: PUSH
71454: LD_INT 1
71456: PUSH
71457: LD_INT 0
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 1
71466: PUSH
71467: LD_INT 1
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 0
71476: PUSH
71477: LD_INT 1
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PUSH
71484: LD_INT 1
71486: NEG
71487: PUSH
71488: LD_INT 0
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 1
71497: NEG
71498: PUSH
71499: LD_INT 1
71501: NEG
71502: PUSH
71503: EMPTY
71504: LIST
71505: LIST
71506: PUSH
71507: EMPTY
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71516: LD_ADDR_VAR 0 60
71520: PUSH
71521: LD_INT 0
71523: PUSH
71524: LD_INT 0
71526: PUSH
71527: EMPTY
71528: LIST
71529: LIST
71530: PUSH
71531: LD_INT 0
71533: PUSH
71534: LD_INT 1
71536: NEG
71537: PUSH
71538: EMPTY
71539: LIST
71540: LIST
71541: PUSH
71542: LD_INT 1
71544: PUSH
71545: LD_INT 0
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 1
71554: PUSH
71555: LD_INT 1
71557: PUSH
71558: EMPTY
71559: LIST
71560: LIST
71561: PUSH
71562: LD_INT 0
71564: PUSH
71565: LD_INT 1
71567: PUSH
71568: EMPTY
71569: LIST
71570: LIST
71571: PUSH
71572: LD_INT 1
71574: NEG
71575: PUSH
71576: LD_INT 0
71578: PUSH
71579: EMPTY
71580: LIST
71581: LIST
71582: PUSH
71583: LD_INT 1
71585: NEG
71586: PUSH
71587: LD_INT 1
71589: NEG
71590: PUSH
71591: EMPTY
71592: LIST
71593: LIST
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71604: LD_ADDR_VAR 0 61
71608: PUSH
71609: LD_INT 0
71611: PUSH
71612: LD_INT 0
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 0
71621: PUSH
71622: LD_INT 1
71624: NEG
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 1
71632: PUSH
71633: LD_INT 0
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 1
71642: PUSH
71643: LD_INT 1
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 0
71652: PUSH
71653: LD_INT 1
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 1
71662: NEG
71663: PUSH
71664: LD_INT 0
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 1
71673: NEG
71674: PUSH
71675: LD_INT 1
71677: NEG
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: EMPTY
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71692: LD_ADDR_VAR 0 62
71696: PUSH
71697: LD_INT 0
71699: PUSH
71700: LD_INT 0
71702: PUSH
71703: EMPTY
71704: LIST
71705: LIST
71706: PUSH
71707: LD_INT 0
71709: PUSH
71710: LD_INT 1
71712: NEG
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 1
71720: PUSH
71721: LD_INT 0
71723: PUSH
71724: EMPTY
71725: LIST
71726: LIST
71727: PUSH
71728: LD_INT 1
71730: PUSH
71731: LD_INT 1
71733: PUSH
71734: EMPTY
71735: LIST
71736: LIST
71737: PUSH
71738: LD_INT 0
71740: PUSH
71741: LD_INT 1
71743: PUSH
71744: EMPTY
71745: LIST
71746: LIST
71747: PUSH
71748: LD_INT 1
71750: NEG
71751: PUSH
71752: LD_INT 0
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 1
71761: NEG
71762: PUSH
71763: LD_INT 1
71765: NEG
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: LIST
71775: LIST
71776: LIST
71777: LIST
71778: LIST
71779: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71780: LD_ADDR_VAR 0 63
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: LD_INT 0
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 0
71797: PUSH
71798: LD_INT 1
71800: NEG
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 1
71808: PUSH
71809: LD_INT 0
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 1
71818: PUSH
71819: LD_INT 1
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 0
71828: PUSH
71829: LD_INT 1
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 1
71838: NEG
71839: PUSH
71840: LD_INT 0
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 1
71849: NEG
71850: PUSH
71851: LD_INT 1
71853: NEG
71854: PUSH
71855: EMPTY
71856: LIST
71857: LIST
71858: PUSH
71859: EMPTY
71860: LIST
71861: LIST
71862: LIST
71863: LIST
71864: LIST
71865: LIST
71866: LIST
71867: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
71868: LD_ADDR_VAR 0 64
71872: PUSH
71873: LD_INT 0
71875: PUSH
71876: LD_INT 0
71878: PUSH
71879: EMPTY
71880: LIST
71881: LIST
71882: PUSH
71883: LD_INT 0
71885: PUSH
71886: LD_INT 1
71888: NEG
71889: PUSH
71890: EMPTY
71891: LIST
71892: LIST
71893: PUSH
71894: LD_INT 1
71896: PUSH
71897: LD_INT 0
71899: PUSH
71900: EMPTY
71901: LIST
71902: LIST
71903: PUSH
71904: LD_INT 1
71906: PUSH
71907: LD_INT 1
71909: PUSH
71910: EMPTY
71911: LIST
71912: LIST
71913: PUSH
71914: LD_INT 0
71916: PUSH
71917: LD_INT 1
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 1
71926: NEG
71927: PUSH
71928: LD_INT 0
71930: PUSH
71931: EMPTY
71932: LIST
71933: LIST
71934: PUSH
71935: LD_INT 1
71937: NEG
71938: PUSH
71939: LD_INT 1
71941: NEG
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: EMPTY
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: ST_TO_ADDR
// end ; 1 :
71956: GO 77853
71958: LD_INT 1
71960: DOUBLE
71961: EQUAL
71962: IFTRUE 71966
71964: GO 74589
71966: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
71967: LD_ADDR_VAR 0 11
71971: PUSH
71972: LD_INT 1
71974: NEG
71975: PUSH
71976: LD_INT 3
71978: NEG
71979: PUSH
71980: EMPTY
71981: LIST
71982: LIST
71983: PUSH
71984: LD_INT 0
71986: PUSH
71987: LD_INT 3
71989: NEG
71990: PUSH
71991: EMPTY
71992: LIST
71993: LIST
71994: PUSH
71995: LD_INT 1
71997: PUSH
71998: LD_INT 2
72000: NEG
72001: PUSH
72002: EMPTY
72003: LIST
72004: LIST
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: LIST
72010: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72011: LD_ADDR_VAR 0 12
72015: PUSH
72016: LD_INT 2
72018: PUSH
72019: LD_INT 1
72021: NEG
72022: PUSH
72023: EMPTY
72024: LIST
72025: LIST
72026: PUSH
72027: LD_INT 3
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: EMPTY
72034: LIST
72035: LIST
72036: PUSH
72037: LD_INT 3
72039: PUSH
72040: LD_INT 1
72042: PUSH
72043: EMPTY
72044: LIST
72045: LIST
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: LIST
72051: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72052: LD_ADDR_VAR 0 13
72056: PUSH
72057: LD_INT 3
72059: PUSH
72060: LD_INT 2
72062: PUSH
72063: EMPTY
72064: LIST
72065: LIST
72066: PUSH
72067: LD_INT 3
72069: PUSH
72070: LD_INT 3
72072: PUSH
72073: EMPTY
72074: LIST
72075: LIST
72076: PUSH
72077: LD_INT 2
72079: PUSH
72080: LD_INT 3
72082: PUSH
72083: EMPTY
72084: LIST
72085: LIST
72086: PUSH
72087: EMPTY
72088: LIST
72089: LIST
72090: LIST
72091: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72092: LD_ADDR_VAR 0 14
72096: PUSH
72097: LD_INT 1
72099: PUSH
72100: LD_INT 3
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 0
72109: PUSH
72110: LD_INT 3
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 1
72119: NEG
72120: PUSH
72121: LD_INT 2
72123: PUSH
72124: EMPTY
72125: LIST
72126: LIST
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: LIST
72132: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72133: LD_ADDR_VAR 0 15
72137: PUSH
72138: LD_INT 2
72140: NEG
72141: PUSH
72142: LD_INT 1
72144: PUSH
72145: EMPTY
72146: LIST
72147: LIST
72148: PUSH
72149: LD_INT 3
72151: NEG
72152: PUSH
72153: LD_INT 0
72155: PUSH
72156: EMPTY
72157: LIST
72158: LIST
72159: PUSH
72160: LD_INT 3
72162: NEG
72163: PUSH
72164: LD_INT 1
72166: NEG
72167: PUSH
72168: EMPTY
72169: LIST
72170: LIST
72171: PUSH
72172: EMPTY
72173: LIST
72174: LIST
72175: LIST
72176: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72177: LD_ADDR_VAR 0 16
72181: PUSH
72182: LD_INT 2
72184: NEG
72185: PUSH
72186: LD_INT 3
72188: NEG
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 3
72196: NEG
72197: PUSH
72198: LD_INT 2
72200: NEG
72201: PUSH
72202: EMPTY
72203: LIST
72204: LIST
72205: PUSH
72206: LD_INT 3
72208: NEG
72209: PUSH
72210: LD_INT 3
72212: NEG
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: LIST
72222: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72223: LD_ADDR_VAR 0 17
72227: PUSH
72228: LD_INT 1
72230: NEG
72231: PUSH
72232: LD_INT 3
72234: NEG
72235: PUSH
72236: EMPTY
72237: LIST
72238: LIST
72239: PUSH
72240: LD_INT 0
72242: PUSH
72243: LD_INT 3
72245: NEG
72246: PUSH
72247: EMPTY
72248: LIST
72249: LIST
72250: PUSH
72251: LD_INT 1
72253: PUSH
72254: LD_INT 2
72256: NEG
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: LIST
72266: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72267: LD_ADDR_VAR 0 18
72271: PUSH
72272: LD_INT 2
72274: PUSH
72275: LD_INT 1
72277: NEG
72278: PUSH
72279: EMPTY
72280: LIST
72281: LIST
72282: PUSH
72283: LD_INT 3
72285: PUSH
72286: LD_INT 0
72288: PUSH
72289: EMPTY
72290: LIST
72291: LIST
72292: PUSH
72293: LD_INT 3
72295: PUSH
72296: LD_INT 1
72298: PUSH
72299: EMPTY
72300: LIST
72301: LIST
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: LIST
72307: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72308: LD_ADDR_VAR 0 19
72312: PUSH
72313: LD_INT 3
72315: PUSH
72316: LD_INT 2
72318: PUSH
72319: EMPTY
72320: LIST
72321: LIST
72322: PUSH
72323: LD_INT 3
72325: PUSH
72326: LD_INT 3
72328: PUSH
72329: EMPTY
72330: LIST
72331: LIST
72332: PUSH
72333: LD_INT 2
72335: PUSH
72336: LD_INT 3
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: LIST
72347: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72348: LD_ADDR_VAR 0 20
72352: PUSH
72353: LD_INT 1
72355: PUSH
72356: LD_INT 3
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 0
72365: PUSH
72366: LD_INT 3
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 1
72375: NEG
72376: PUSH
72377: LD_INT 2
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: LIST
72388: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72389: LD_ADDR_VAR 0 21
72393: PUSH
72394: LD_INT 2
72396: NEG
72397: PUSH
72398: LD_INT 1
72400: PUSH
72401: EMPTY
72402: LIST
72403: LIST
72404: PUSH
72405: LD_INT 3
72407: NEG
72408: PUSH
72409: LD_INT 0
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 3
72418: NEG
72419: PUSH
72420: LD_INT 1
72422: NEG
72423: PUSH
72424: EMPTY
72425: LIST
72426: LIST
72427: PUSH
72428: EMPTY
72429: LIST
72430: LIST
72431: LIST
72432: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72433: LD_ADDR_VAR 0 22
72437: PUSH
72438: LD_INT 2
72440: NEG
72441: PUSH
72442: LD_INT 3
72444: NEG
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 3
72452: NEG
72453: PUSH
72454: LD_INT 2
72456: NEG
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: LD_INT 3
72464: NEG
72465: PUSH
72466: LD_INT 3
72468: NEG
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: LIST
72478: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
72479: LD_ADDR_VAR 0 23
72483: PUSH
72484: LD_INT 0
72486: PUSH
72487: LD_INT 3
72489: NEG
72490: PUSH
72491: EMPTY
72492: LIST
72493: LIST
72494: PUSH
72495: LD_INT 1
72497: NEG
72498: PUSH
72499: LD_INT 4
72501: NEG
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 1
72509: PUSH
72510: LD_INT 3
72512: NEG
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: EMPTY
72519: LIST
72520: LIST
72521: LIST
72522: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
72523: LD_ADDR_VAR 0 24
72527: PUSH
72528: LD_INT 3
72530: PUSH
72531: LD_INT 0
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 3
72540: PUSH
72541: LD_INT 1
72543: NEG
72544: PUSH
72545: EMPTY
72546: LIST
72547: LIST
72548: PUSH
72549: LD_INT 4
72551: PUSH
72552: LD_INT 1
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: LIST
72563: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
72564: LD_ADDR_VAR 0 25
72568: PUSH
72569: LD_INT 3
72571: PUSH
72572: LD_INT 3
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 4
72581: PUSH
72582: LD_INT 3
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 3
72591: PUSH
72592: LD_INT 4
72594: PUSH
72595: EMPTY
72596: LIST
72597: LIST
72598: PUSH
72599: EMPTY
72600: LIST
72601: LIST
72602: LIST
72603: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
72604: LD_ADDR_VAR 0 26
72608: PUSH
72609: LD_INT 0
72611: PUSH
72612: LD_INT 3
72614: PUSH
72615: EMPTY
72616: LIST
72617: LIST
72618: PUSH
72619: LD_INT 1
72621: PUSH
72622: LD_INT 4
72624: PUSH
72625: EMPTY
72626: LIST
72627: LIST
72628: PUSH
72629: LD_INT 1
72631: NEG
72632: PUSH
72633: LD_INT 3
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: PUSH
72640: EMPTY
72641: LIST
72642: LIST
72643: LIST
72644: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
72645: LD_ADDR_VAR 0 27
72649: PUSH
72650: LD_INT 3
72652: NEG
72653: PUSH
72654: LD_INT 0
72656: PUSH
72657: EMPTY
72658: LIST
72659: LIST
72660: PUSH
72661: LD_INT 3
72663: NEG
72664: PUSH
72665: LD_INT 1
72667: PUSH
72668: EMPTY
72669: LIST
72670: LIST
72671: PUSH
72672: LD_INT 4
72674: NEG
72675: PUSH
72676: LD_INT 1
72678: NEG
72679: PUSH
72680: EMPTY
72681: LIST
72682: LIST
72683: PUSH
72684: EMPTY
72685: LIST
72686: LIST
72687: LIST
72688: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
72689: LD_ADDR_VAR 0 28
72693: PUSH
72694: LD_INT 3
72696: NEG
72697: PUSH
72698: LD_INT 3
72700: NEG
72701: PUSH
72702: EMPTY
72703: LIST
72704: LIST
72705: PUSH
72706: LD_INT 3
72708: NEG
72709: PUSH
72710: LD_INT 4
72712: NEG
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 4
72720: NEG
72721: PUSH
72722: LD_INT 3
72724: NEG
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: LIST
72734: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
72735: LD_ADDR_VAR 0 29
72739: PUSH
72740: LD_INT 1
72742: NEG
72743: PUSH
72744: LD_INT 3
72746: NEG
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 0
72754: PUSH
72755: LD_INT 3
72757: NEG
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 1
72765: PUSH
72766: LD_INT 2
72768: NEG
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 1
72776: NEG
72777: PUSH
72778: LD_INT 4
72780: NEG
72781: PUSH
72782: EMPTY
72783: LIST
72784: LIST
72785: PUSH
72786: LD_INT 0
72788: PUSH
72789: LD_INT 4
72791: NEG
72792: PUSH
72793: EMPTY
72794: LIST
72795: LIST
72796: PUSH
72797: LD_INT 1
72799: PUSH
72800: LD_INT 3
72802: NEG
72803: PUSH
72804: EMPTY
72805: LIST
72806: LIST
72807: PUSH
72808: LD_INT 1
72810: NEG
72811: PUSH
72812: LD_INT 5
72814: NEG
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 0
72822: PUSH
72823: LD_INT 5
72825: NEG
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 1
72833: PUSH
72834: LD_INT 4
72836: NEG
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 1
72844: NEG
72845: PUSH
72846: LD_INT 6
72848: NEG
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 0
72856: PUSH
72857: LD_INT 6
72859: NEG
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 1
72867: PUSH
72868: LD_INT 5
72870: NEG
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: EMPTY
72877: LIST
72878: LIST
72879: LIST
72880: LIST
72881: LIST
72882: LIST
72883: LIST
72884: LIST
72885: LIST
72886: LIST
72887: LIST
72888: LIST
72889: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
72890: LD_ADDR_VAR 0 30
72894: PUSH
72895: LD_INT 2
72897: PUSH
72898: LD_INT 1
72900: NEG
72901: PUSH
72902: EMPTY
72903: LIST
72904: LIST
72905: PUSH
72906: LD_INT 3
72908: PUSH
72909: LD_INT 0
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PUSH
72916: LD_INT 3
72918: PUSH
72919: LD_INT 1
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 3
72928: PUSH
72929: LD_INT 1
72931: NEG
72932: PUSH
72933: EMPTY
72934: LIST
72935: LIST
72936: PUSH
72937: LD_INT 4
72939: PUSH
72940: LD_INT 0
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 4
72949: PUSH
72950: LD_INT 1
72952: PUSH
72953: EMPTY
72954: LIST
72955: LIST
72956: PUSH
72957: LD_INT 4
72959: PUSH
72960: LD_INT 1
72962: NEG
72963: PUSH
72964: EMPTY
72965: LIST
72966: LIST
72967: PUSH
72968: LD_INT 5
72970: PUSH
72971: LD_INT 0
72973: PUSH
72974: EMPTY
72975: LIST
72976: LIST
72977: PUSH
72978: LD_INT 5
72980: PUSH
72981: LD_INT 1
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 5
72990: PUSH
72991: LD_INT 1
72993: NEG
72994: PUSH
72995: EMPTY
72996: LIST
72997: LIST
72998: PUSH
72999: LD_INT 6
73001: PUSH
73002: LD_INT 0
73004: PUSH
73005: EMPTY
73006: LIST
73007: LIST
73008: PUSH
73009: LD_INT 6
73011: PUSH
73012: LD_INT 1
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: EMPTY
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: LIST
73032: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
73033: LD_ADDR_VAR 0 31
73037: PUSH
73038: LD_INT 3
73040: PUSH
73041: LD_INT 2
73043: PUSH
73044: EMPTY
73045: LIST
73046: LIST
73047: PUSH
73048: LD_INT 3
73050: PUSH
73051: LD_INT 3
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 2
73060: PUSH
73061: LD_INT 3
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: LD_INT 4
73070: PUSH
73071: LD_INT 3
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 4
73080: PUSH
73081: LD_INT 4
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 3
73090: PUSH
73091: LD_INT 4
73093: PUSH
73094: EMPTY
73095: LIST
73096: LIST
73097: PUSH
73098: LD_INT 5
73100: PUSH
73101: LD_INT 4
73103: PUSH
73104: EMPTY
73105: LIST
73106: LIST
73107: PUSH
73108: LD_INT 5
73110: PUSH
73111: LD_INT 5
73113: PUSH
73114: EMPTY
73115: LIST
73116: LIST
73117: PUSH
73118: LD_INT 4
73120: PUSH
73121: LD_INT 5
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 6
73130: PUSH
73131: LD_INT 5
73133: PUSH
73134: EMPTY
73135: LIST
73136: LIST
73137: PUSH
73138: LD_INT 6
73140: PUSH
73141: LD_INT 6
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 5
73150: PUSH
73151: LD_INT 6
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: EMPTY
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: LIST
73166: LIST
73167: LIST
73168: LIST
73169: LIST
73170: LIST
73171: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
73172: LD_ADDR_VAR 0 32
73176: PUSH
73177: LD_INT 1
73179: PUSH
73180: LD_INT 3
73182: PUSH
73183: EMPTY
73184: LIST
73185: LIST
73186: PUSH
73187: LD_INT 0
73189: PUSH
73190: LD_INT 3
73192: PUSH
73193: EMPTY
73194: LIST
73195: LIST
73196: PUSH
73197: LD_INT 1
73199: NEG
73200: PUSH
73201: LD_INT 2
73203: PUSH
73204: EMPTY
73205: LIST
73206: LIST
73207: PUSH
73208: LD_INT 1
73210: PUSH
73211: LD_INT 4
73213: PUSH
73214: EMPTY
73215: LIST
73216: LIST
73217: PUSH
73218: LD_INT 0
73220: PUSH
73221: LD_INT 4
73223: PUSH
73224: EMPTY
73225: LIST
73226: LIST
73227: PUSH
73228: LD_INT 1
73230: NEG
73231: PUSH
73232: LD_INT 3
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: LD_INT 1
73241: PUSH
73242: LD_INT 5
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PUSH
73249: LD_INT 0
73251: PUSH
73252: LD_INT 5
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PUSH
73259: LD_INT 1
73261: NEG
73262: PUSH
73263: LD_INT 4
73265: PUSH
73266: EMPTY
73267: LIST
73268: LIST
73269: PUSH
73270: LD_INT 1
73272: PUSH
73273: LD_INT 6
73275: PUSH
73276: EMPTY
73277: LIST
73278: LIST
73279: PUSH
73280: LD_INT 0
73282: PUSH
73283: LD_INT 6
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 1
73292: NEG
73293: PUSH
73294: LD_INT 5
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: PUSH
73301: EMPTY
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: LIST
73313: LIST
73314: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
73315: LD_ADDR_VAR 0 33
73319: PUSH
73320: LD_INT 2
73322: NEG
73323: PUSH
73324: LD_INT 1
73326: PUSH
73327: EMPTY
73328: LIST
73329: LIST
73330: PUSH
73331: LD_INT 3
73333: NEG
73334: PUSH
73335: LD_INT 0
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: PUSH
73342: LD_INT 3
73344: NEG
73345: PUSH
73346: LD_INT 1
73348: NEG
73349: PUSH
73350: EMPTY
73351: LIST
73352: LIST
73353: PUSH
73354: LD_INT 3
73356: NEG
73357: PUSH
73358: LD_INT 1
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 4
73367: NEG
73368: PUSH
73369: LD_INT 0
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 4
73378: NEG
73379: PUSH
73380: LD_INT 1
73382: NEG
73383: PUSH
73384: EMPTY
73385: LIST
73386: LIST
73387: PUSH
73388: LD_INT 4
73390: NEG
73391: PUSH
73392: LD_INT 1
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 5
73401: NEG
73402: PUSH
73403: LD_INT 0
73405: PUSH
73406: EMPTY
73407: LIST
73408: LIST
73409: PUSH
73410: LD_INT 5
73412: NEG
73413: PUSH
73414: LD_INT 1
73416: NEG
73417: PUSH
73418: EMPTY
73419: LIST
73420: LIST
73421: PUSH
73422: LD_INT 5
73424: NEG
73425: PUSH
73426: LD_INT 1
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 6
73435: NEG
73436: PUSH
73437: LD_INT 0
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: LD_INT 6
73446: NEG
73447: PUSH
73448: LD_INT 1
73450: NEG
73451: PUSH
73452: EMPTY
73453: LIST
73454: LIST
73455: PUSH
73456: EMPTY
73457: LIST
73458: LIST
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
73470: LD_ADDR_VAR 0 34
73474: PUSH
73475: LD_INT 2
73477: NEG
73478: PUSH
73479: LD_INT 3
73481: NEG
73482: PUSH
73483: EMPTY
73484: LIST
73485: LIST
73486: PUSH
73487: LD_INT 3
73489: NEG
73490: PUSH
73491: LD_INT 2
73493: NEG
73494: PUSH
73495: EMPTY
73496: LIST
73497: LIST
73498: PUSH
73499: LD_INT 3
73501: NEG
73502: PUSH
73503: LD_INT 3
73505: NEG
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 3
73513: NEG
73514: PUSH
73515: LD_INT 4
73517: NEG
73518: PUSH
73519: EMPTY
73520: LIST
73521: LIST
73522: PUSH
73523: LD_INT 4
73525: NEG
73526: PUSH
73527: LD_INT 3
73529: NEG
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 4
73537: NEG
73538: PUSH
73539: LD_INT 4
73541: NEG
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: LD_INT 4
73549: NEG
73550: PUSH
73551: LD_INT 5
73553: NEG
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: PUSH
73559: LD_INT 5
73561: NEG
73562: PUSH
73563: LD_INT 4
73565: NEG
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: PUSH
73571: LD_INT 5
73573: NEG
73574: PUSH
73575: LD_INT 5
73577: NEG
73578: PUSH
73579: EMPTY
73580: LIST
73581: LIST
73582: PUSH
73583: LD_INT 5
73585: NEG
73586: PUSH
73587: LD_INT 6
73589: NEG
73590: PUSH
73591: EMPTY
73592: LIST
73593: LIST
73594: PUSH
73595: LD_INT 6
73597: NEG
73598: PUSH
73599: LD_INT 5
73601: NEG
73602: PUSH
73603: EMPTY
73604: LIST
73605: LIST
73606: PUSH
73607: LD_INT 6
73609: NEG
73610: PUSH
73611: LD_INT 6
73613: NEG
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: EMPTY
73620: LIST
73621: LIST
73622: LIST
73623: LIST
73624: LIST
73625: LIST
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
73633: LD_ADDR_VAR 0 41
73637: PUSH
73638: LD_INT 0
73640: PUSH
73641: LD_INT 2
73643: NEG
73644: PUSH
73645: EMPTY
73646: LIST
73647: LIST
73648: PUSH
73649: LD_INT 1
73651: NEG
73652: PUSH
73653: LD_INT 3
73655: NEG
73656: PUSH
73657: EMPTY
73658: LIST
73659: LIST
73660: PUSH
73661: LD_INT 1
73663: PUSH
73664: LD_INT 2
73666: NEG
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: LIST
73676: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
73677: LD_ADDR_VAR 0 42
73681: PUSH
73682: LD_INT 2
73684: PUSH
73685: LD_INT 0
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PUSH
73692: LD_INT 2
73694: PUSH
73695: LD_INT 1
73697: NEG
73698: PUSH
73699: EMPTY
73700: LIST
73701: LIST
73702: PUSH
73703: LD_INT 3
73705: PUSH
73706: LD_INT 1
73708: PUSH
73709: EMPTY
73710: LIST
73711: LIST
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: LIST
73717: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
73718: LD_ADDR_VAR 0 43
73722: PUSH
73723: LD_INT 2
73725: PUSH
73726: LD_INT 2
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: PUSH
73733: LD_INT 3
73735: PUSH
73736: LD_INT 2
73738: PUSH
73739: EMPTY
73740: LIST
73741: LIST
73742: PUSH
73743: LD_INT 2
73745: PUSH
73746: LD_INT 3
73748: PUSH
73749: EMPTY
73750: LIST
73751: LIST
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: LIST
73757: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
73758: LD_ADDR_VAR 0 44
73762: PUSH
73763: LD_INT 0
73765: PUSH
73766: LD_INT 2
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 1
73775: PUSH
73776: LD_INT 3
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: LD_INT 1
73785: NEG
73786: PUSH
73787: LD_INT 2
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: LIST
73798: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73799: LD_ADDR_VAR 0 45
73803: PUSH
73804: LD_INT 2
73806: NEG
73807: PUSH
73808: LD_INT 0
73810: PUSH
73811: EMPTY
73812: LIST
73813: LIST
73814: PUSH
73815: LD_INT 2
73817: NEG
73818: PUSH
73819: LD_INT 1
73821: PUSH
73822: EMPTY
73823: LIST
73824: LIST
73825: PUSH
73826: LD_INT 3
73828: NEG
73829: PUSH
73830: LD_INT 1
73832: NEG
73833: PUSH
73834: EMPTY
73835: LIST
73836: LIST
73837: PUSH
73838: EMPTY
73839: LIST
73840: LIST
73841: LIST
73842: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
73843: LD_ADDR_VAR 0 46
73847: PUSH
73848: LD_INT 2
73850: NEG
73851: PUSH
73852: LD_INT 2
73854: NEG
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 2
73862: NEG
73863: PUSH
73864: LD_INT 3
73866: NEG
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 3
73874: NEG
73875: PUSH
73876: LD_INT 2
73878: NEG
73879: PUSH
73880: EMPTY
73881: LIST
73882: LIST
73883: PUSH
73884: EMPTY
73885: LIST
73886: LIST
73887: LIST
73888: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
73889: LD_ADDR_VAR 0 47
73893: PUSH
73894: LD_INT 2
73896: NEG
73897: PUSH
73898: LD_INT 3
73900: NEG
73901: PUSH
73902: EMPTY
73903: LIST
73904: LIST
73905: PUSH
73906: LD_INT 1
73908: NEG
73909: PUSH
73910: LD_INT 3
73912: NEG
73913: PUSH
73914: EMPTY
73915: LIST
73916: LIST
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
73922: LD_ADDR_VAR 0 48
73926: PUSH
73927: LD_INT 1
73929: PUSH
73930: LD_INT 2
73932: NEG
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: LD_INT 2
73940: PUSH
73941: LD_INT 1
73943: NEG
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: EMPTY
73950: LIST
73951: LIST
73952: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
73953: LD_ADDR_VAR 0 49
73957: PUSH
73958: LD_INT 3
73960: PUSH
73961: LD_INT 1
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 3
73970: PUSH
73971: LD_INT 2
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: EMPTY
73979: LIST
73980: LIST
73981: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
73982: LD_ADDR_VAR 0 50
73986: PUSH
73987: LD_INT 2
73989: PUSH
73990: LD_INT 3
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: LD_INT 1
73999: PUSH
74000: LD_INT 3
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
74011: LD_ADDR_VAR 0 51
74015: PUSH
74016: LD_INT 1
74018: NEG
74019: PUSH
74020: LD_INT 2
74022: PUSH
74023: EMPTY
74024: LIST
74025: LIST
74026: PUSH
74027: LD_INT 2
74029: NEG
74030: PUSH
74031: LD_INT 1
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74042: LD_ADDR_VAR 0 52
74046: PUSH
74047: LD_INT 3
74049: NEG
74050: PUSH
74051: LD_INT 1
74053: NEG
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 3
74061: NEG
74062: PUSH
74063: LD_INT 2
74065: NEG
74066: PUSH
74067: EMPTY
74068: LIST
74069: LIST
74070: PUSH
74071: EMPTY
74072: LIST
74073: LIST
74074: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74075: LD_ADDR_VAR 0 53
74079: PUSH
74080: LD_INT 1
74082: NEG
74083: PUSH
74084: LD_INT 3
74086: NEG
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PUSH
74092: LD_INT 0
74094: PUSH
74095: LD_INT 3
74097: NEG
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: LD_INT 1
74105: PUSH
74106: LD_INT 2
74108: NEG
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: PUSH
74114: EMPTY
74115: LIST
74116: LIST
74117: LIST
74118: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74119: LD_ADDR_VAR 0 54
74123: PUSH
74124: LD_INT 2
74126: PUSH
74127: LD_INT 1
74129: NEG
74130: PUSH
74131: EMPTY
74132: LIST
74133: LIST
74134: PUSH
74135: LD_INT 3
74137: PUSH
74138: LD_INT 0
74140: PUSH
74141: EMPTY
74142: LIST
74143: LIST
74144: PUSH
74145: LD_INT 3
74147: PUSH
74148: LD_INT 1
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: LIST
74159: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74160: LD_ADDR_VAR 0 55
74164: PUSH
74165: LD_INT 3
74167: PUSH
74168: LD_INT 2
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 3
74177: PUSH
74178: LD_INT 3
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PUSH
74185: LD_INT 2
74187: PUSH
74188: LD_INT 3
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: LIST
74199: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74200: LD_ADDR_VAR 0 56
74204: PUSH
74205: LD_INT 1
74207: PUSH
74208: LD_INT 3
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PUSH
74215: LD_INT 0
74217: PUSH
74218: LD_INT 3
74220: PUSH
74221: EMPTY
74222: LIST
74223: LIST
74224: PUSH
74225: LD_INT 1
74227: NEG
74228: PUSH
74229: LD_INT 2
74231: PUSH
74232: EMPTY
74233: LIST
74234: LIST
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: LIST
74240: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
74241: LD_ADDR_VAR 0 57
74245: PUSH
74246: LD_INT 2
74248: NEG
74249: PUSH
74250: LD_INT 1
74252: PUSH
74253: EMPTY
74254: LIST
74255: LIST
74256: PUSH
74257: LD_INT 3
74259: NEG
74260: PUSH
74261: LD_INT 0
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 3
74270: NEG
74271: PUSH
74272: LD_INT 1
74274: NEG
74275: PUSH
74276: EMPTY
74277: LIST
74278: LIST
74279: PUSH
74280: EMPTY
74281: LIST
74282: LIST
74283: LIST
74284: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
74285: LD_ADDR_VAR 0 58
74289: PUSH
74290: LD_INT 2
74292: NEG
74293: PUSH
74294: LD_INT 3
74296: NEG
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: PUSH
74302: LD_INT 3
74304: NEG
74305: PUSH
74306: LD_INT 2
74308: NEG
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 3
74316: NEG
74317: PUSH
74318: LD_INT 3
74320: NEG
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PUSH
74326: EMPTY
74327: LIST
74328: LIST
74329: LIST
74330: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
74331: LD_ADDR_VAR 0 59
74335: PUSH
74336: LD_INT 1
74338: NEG
74339: PUSH
74340: LD_INT 2
74342: NEG
74343: PUSH
74344: EMPTY
74345: LIST
74346: LIST
74347: PUSH
74348: LD_INT 0
74350: PUSH
74351: LD_INT 2
74353: NEG
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 1
74361: PUSH
74362: LD_INT 1
74364: NEG
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: LIST
74374: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
74375: LD_ADDR_VAR 0 60
74379: PUSH
74380: LD_INT 1
74382: PUSH
74383: LD_INT 1
74385: NEG
74386: PUSH
74387: EMPTY
74388: LIST
74389: LIST
74390: PUSH
74391: LD_INT 2
74393: PUSH
74394: LD_INT 0
74396: PUSH
74397: EMPTY
74398: LIST
74399: LIST
74400: PUSH
74401: LD_INT 2
74403: PUSH
74404: LD_INT 1
74406: PUSH
74407: EMPTY
74408: LIST
74409: LIST
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: LIST
74415: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
74416: LD_ADDR_VAR 0 61
74420: PUSH
74421: LD_INT 2
74423: PUSH
74424: LD_INT 1
74426: PUSH
74427: EMPTY
74428: LIST
74429: LIST
74430: PUSH
74431: LD_INT 2
74433: PUSH
74434: LD_INT 2
74436: PUSH
74437: EMPTY
74438: LIST
74439: LIST
74440: PUSH
74441: LD_INT 1
74443: PUSH
74444: LD_INT 2
74446: PUSH
74447: EMPTY
74448: LIST
74449: LIST
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: LIST
74455: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
74456: LD_ADDR_VAR 0 62
74460: PUSH
74461: LD_INT 1
74463: PUSH
74464: LD_INT 2
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: PUSH
74471: LD_INT 0
74473: PUSH
74474: LD_INT 2
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: PUSH
74481: LD_INT 1
74483: NEG
74484: PUSH
74485: LD_INT 1
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: LIST
74496: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
74497: LD_ADDR_VAR 0 63
74501: PUSH
74502: LD_INT 1
74504: NEG
74505: PUSH
74506: LD_INT 1
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: LD_INT 2
74515: NEG
74516: PUSH
74517: LD_INT 0
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PUSH
74524: LD_INT 2
74526: NEG
74527: PUSH
74528: LD_INT 1
74530: NEG
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: LIST
74540: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74541: LD_ADDR_VAR 0 64
74545: PUSH
74546: LD_INT 1
74548: NEG
74549: PUSH
74550: LD_INT 2
74552: NEG
74553: PUSH
74554: EMPTY
74555: LIST
74556: LIST
74557: PUSH
74558: LD_INT 2
74560: NEG
74561: PUSH
74562: LD_INT 1
74564: NEG
74565: PUSH
74566: EMPTY
74567: LIST
74568: LIST
74569: PUSH
74570: LD_INT 2
74572: NEG
74573: PUSH
74574: LD_INT 2
74576: NEG
74577: PUSH
74578: EMPTY
74579: LIST
74580: LIST
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: LIST
74586: ST_TO_ADDR
// end ; 2 :
74587: GO 77853
74589: LD_INT 2
74591: DOUBLE
74592: EQUAL
74593: IFTRUE 74597
74595: GO 77852
74597: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
74598: LD_ADDR_VAR 0 29
74602: PUSH
74603: LD_INT 4
74605: PUSH
74606: LD_INT 0
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: LD_INT 4
74615: PUSH
74616: LD_INT 1
74618: NEG
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: PUSH
74624: LD_INT 5
74626: PUSH
74627: LD_INT 0
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: PUSH
74634: LD_INT 5
74636: PUSH
74637: LD_INT 1
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: PUSH
74644: LD_INT 4
74646: PUSH
74647: LD_INT 1
74649: PUSH
74650: EMPTY
74651: LIST
74652: LIST
74653: PUSH
74654: LD_INT 3
74656: PUSH
74657: LD_INT 0
74659: PUSH
74660: EMPTY
74661: LIST
74662: LIST
74663: PUSH
74664: LD_INT 3
74666: PUSH
74667: LD_INT 1
74669: NEG
74670: PUSH
74671: EMPTY
74672: LIST
74673: LIST
74674: PUSH
74675: LD_INT 3
74677: PUSH
74678: LD_INT 2
74680: NEG
74681: PUSH
74682: EMPTY
74683: LIST
74684: LIST
74685: PUSH
74686: LD_INT 5
74688: PUSH
74689: LD_INT 2
74691: PUSH
74692: EMPTY
74693: LIST
74694: LIST
74695: PUSH
74696: LD_INT 3
74698: PUSH
74699: LD_INT 3
74701: PUSH
74702: EMPTY
74703: LIST
74704: LIST
74705: PUSH
74706: LD_INT 3
74708: PUSH
74709: LD_INT 2
74711: PUSH
74712: EMPTY
74713: LIST
74714: LIST
74715: PUSH
74716: LD_INT 4
74718: PUSH
74719: LD_INT 3
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: PUSH
74726: LD_INT 4
74728: PUSH
74729: LD_INT 4
74731: PUSH
74732: EMPTY
74733: LIST
74734: LIST
74735: PUSH
74736: LD_INT 3
74738: PUSH
74739: LD_INT 4
74741: PUSH
74742: EMPTY
74743: LIST
74744: LIST
74745: PUSH
74746: LD_INT 2
74748: PUSH
74749: LD_INT 3
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: PUSH
74756: LD_INT 2
74758: PUSH
74759: LD_INT 2
74761: PUSH
74762: EMPTY
74763: LIST
74764: LIST
74765: PUSH
74766: LD_INT 4
74768: PUSH
74769: LD_INT 2
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: PUSH
74776: LD_INT 2
74778: PUSH
74779: LD_INT 4
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: PUSH
74786: LD_INT 0
74788: PUSH
74789: LD_INT 4
74791: PUSH
74792: EMPTY
74793: LIST
74794: LIST
74795: PUSH
74796: LD_INT 0
74798: PUSH
74799: LD_INT 3
74801: PUSH
74802: EMPTY
74803: LIST
74804: LIST
74805: PUSH
74806: LD_INT 1
74808: PUSH
74809: LD_INT 4
74811: PUSH
74812: EMPTY
74813: LIST
74814: LIST
74815: PUSH
74816: LD_INT 1
74818: PUSH
74819: LD_INT 5
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PUSH
74826: LD_INT 0
74828: PUSH
74829: LD_INT 5
74831: PUSH
74832: EMPTY
74833: LIST
74834: LIST
74835: PUSH
74836: LD_INT 1
74838: NEG
74839: PUSH
74840: LD_INT 4
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: PUSH
74847: LD_INT 1
74849: NEG
74850: PUSH
74851: LD_INT 3
74853: PUSH
74854: EMPTY
74855: LIST
74856: LIST
74857: PUSH
74858: LD_INT 2
74860: PUSH
74861: LD_INT 5
74863: PUSH
74864: EMPTY
74865: LIST
74866: LIST
74867: PUSH
74868: LD_INT 2
74870: NEG
74871: PUSH
74872: LD_INT 3
74874: PUSH
74875: EMPTY
74876: LIST
74877: LIST
74878: PUSH
74879: LD_INT 3
74881: NEG
74882: PUSH
74883: LD_INT 0
74885: PUSH
74886: EMPTY
74887: LIST
74888: LIST
74889: PUSH
74890: LD_INT 3
74892: NEG
74893: PUSH
74894: LD_INT 1
74896: NEG
74897: PUSH
74898: EMPTY
74899: LIST
74900: LIST
74901: PUSH
74902: LD_INT 2
74904: NEG
74905: PUSH
74906: LD_INT 0
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: LD_INT 2
74915: NEG
74916: PUSH
74917: LD_INT 1
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 3
74926: NEG
74927: PUSH
74928: LD_INT 1
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PUSH
74935: LD_INT 4
74937: NEG
74938: PUSH
74939: LD_INT 0
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 4
74948: NEG
74949: PUSH
74950: LD_INT 1
74952: NEG
74953: PUSH
74954: EMPTY
74955: LIST
74956: LIST
74957: PUSH
74958: LD_INT 4
74960: NEG
74961: PUSH
74962: LD_INT 2
74964: NEG
74965: PUSH
74966: EMPTY
74967: LIST
74968: LIST
74969: PUSH
74970: LD_INT 2
74972: NEG
74973: PUSH
74974: LD_INT 2
74976: PUSH
74977: EMPTY
74978: LIST
74979: LIST
74980: PUSH
74981: LD_INT 4
74983: NEG
74984: PUSH
74985: LD_INT 4
74987: NEG
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: PUSH
74993: LD_INT 4
74995: NEG
74996: PUSH
74997: LD_INT 5
74999: NEG
75000: PUSH
75001: EMPTY
75002: LIST
75003: LIST
75004: PUSH
75005: LD_INT 3
75007: NEG
75008: PUSH
75009: LD_INT 4
75011: NEG
75012: PUSH
75013: EMPTY
75014: LIST
75015: LIST
75016: PUSH
75017: LD_INT 3
75019: NEG
75020: PUSH
75021: LD_INT 3
75023: NEG
75024: PUSH
75025: EMPTY
75026: LIST
75027: LIST
75028: PUSH
75029: LD_INT 4
75031: NEG
75032: PUSH
75033: LD_INT 3
75035: NEG
75036: PUSH
75037: EMPTY
75038: LIST
75039: LIST
75040: PUSH
75041: LD_INT 5
75043: NEG
75044: PUSH
75045: LD_INT 4
75047: NEG
75048: PUSH
75049: EMPTY
75050: LIST
75051: LIST
75052: PUSH
75053: LD_INT 5
75055: NEG
75056: PUSH
75057: LD_INT 5
75059: NEG
75060: PUSH
75061: EMPTY
75062: LIST
75063: LIST
75064: PUSH
75065: LD_INT 3
75067: NEG
75068: PUSH
75069: LD_INT 5
75071: NEG
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: LD_INT 5
75079: NEG
75080: PUSH
75081: LD_INT 3
75083: NEG
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: LIST
75093: LIST
75094: LIST
75095: LIST
75096: LIST
75097: LIST
75098: LIST
75099: LIST
75100: LIST
75101: LIST
75102: LIST
75103: LIST
75104: LIST
75105: LIST
75106: LIST
75107: LIST
75108: LIST
75109: LIST
75110: LIST
75111: LIST
75112: LIST
75113: LIST
75114: LIST
75115: LIST
75116: LIST
75117: LIST
75118: LIST
75119: LIST
75120: LIST
75121: LIST
75122: LIST
75123: LIST
75124: LIST
75125: LIST
75126: LIST
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
75136: LD_ADDR_VAR 0 30
75140: PUSH
75141: LD_INT 4
75143: PUSH
75144: LD_INT 4
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PUSH
75151: LD_INT 4
75153: PUSH
75154: LD_INT 3
75156: PUSH
75157: EMPTY
75158: LIST
75159: LIST
75160: PUSH
75161: LD_INT 5
75163: PUSH
75164: LD_INT 4
75166: PUSH
75167: EMPTY
75168: LIST
75169: LIST
75170: PUSH
75171: LD_INT 5
75173: PUSH
75174: LD_INT 5
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 4
75183: PUSH
75184: LD_INT 5
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 3
75193: PUSH
75194: LD_INT 4
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 3
75203: PUSH
75204: LD_INT 3
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 5
75213: PUSH
75214: LD_INT 3
75216: PUSH
75217: EMPTY
75218: LIST
75219: LIST
75220: PUSH
75221: LD_INT 3
75223: PUSH
75224: LD_INT 5
75226: PUSH
75227: EMPTY
75228: LIST
75229: LIST
75230: PUSH
75231: LD_INT 0
75233: PUSH
75234: LD_INT 3
75236: PUSH
75237: EMPTY
75238: LIST
75239: LIST
75240: PUSH
75241: LD_INT 0
75243: PUSH
75244: LD_INT 2
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: LD_INT 1
75253: PUSH
75254: LD_INT 3
75256: PUSH
75257: EMPTY
75258: LIST
75259: LIST
75260: PUSH
75261: LD_INT 1
75263: PUSH
75264: LD_INT 4
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: LD_INT 0
75273: PUSH
75274: LD_INT 4
75276: PUSH
75277: EMPTY
75278: LIST
75279: LIST
75280: PUSH
75281: LD_INT 1
75283: NEG
75284: PUSH
75285: LD_INT 3
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 1
75294: NEG
75295: PUSH
75296: LD_INT 2
75298: PUSH
75299: EMPTY
75300: LIST
75301: LIST
75302: PUSH
75303: LD_INT 2
75305: PUSH
75306: LD_INT 4
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PUSH
75313: LD_INT 2
75315: NEG
75316: PUSH
75317: LD_INT 2
75319: PUSH
75320: EMPTY
75321: LIST
75322: LIST
75323: PUSH
75324: LD_INT 4
75326: NEG
75327: PUSH
75328: LD_INT 0
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PUSH
75335: LD_INT 4
75337: NEG
75338: PUSH
75339: LD_INT 1
75341: NEG
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: PUSH
75347: LD_INT 3
75349: NEG
75350: PUSH
75351: LD_INT 0
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: LD_INT 3
75360: NEG
75361: PUSH
75362: LD_INT 1
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: PUSH
75369: LD_INT 4
75371: NEG
75372: PUSH
75373: LD_INT 1
75375: PUSH
75376: EMPTY
75377: LIST
75378: LIST
75379: PUSH
75380: LD_INT 5
75382: NEG
75383: PUSH
75384: LD_INT 0
75386: PUSH
75387: EMPTY
75388: LIST
75389: LIST
75390: PUSH
75391: LD_INT 5
75393: NEG
75394: PUSH
75395: LD_INT 1
75397: NEG
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: PUSH
75403: LD_INT 5
75405: NEG
75406: PUSH
75407: LD_INT 2
75409: NEG
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: PUSH
75415: LD_INT 3
75417: NEG
75418: PUSH
75419: LD_INT 2
75421: PUSH
75422: EMPTY
75423: LIST
75424: LIST
75425: PUSH
75426: LD_INT 3
75428: NEG
75429: PUSH
75430: LD_INT 3
75432: NEG
75433: PUSH
75434: EMPTY
75435: LIST
75436: LIST
75437: PUSH
75438: LD_INT 3
75440: NEG
75441: PUSH
75442: LD_INT 4
75444: NEG
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: LD_INT 2
75452: NEG
75453: PUSH
75454: LD_INT 3
75456: NEG
75457: PUSH
75458: EMPTY
75459: LIST
75460: LIST
75461: PUSH
75462: LD_INT 2
75464: NEG
75465: PUSH
75466: LD_INT 2
75468: NEG
75469: PUSH
75470: EMPTY
75471: LIST
75472: LIST
75473: PUSH
75474: LD_INT 3
75476: NEG
75477: PUSH
75478: LD_INT 2
75480: NEG
75481: PUSH
75482: EMPTY
75483: LIST
75484: LIST
75485: PUSH
75486: LD_INT 4
75488: NEG
75489: PUSH
75490: LD_INT 3
75492: NEG
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: PUSH
75498: LD_INT 4
75500: NEG
75501: PUSH
75502: LD_INT 4
75504: NEG
75505: PUSH
75506: EMPTY
75507: LIST
75508: LIST
75509: PUSH
75510: LD_INT 2
75512: NEG
75513: PUSH
75514: LD_INT 4
75516: NEG
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PUSH
75522: LD_INT 4
75524: NEG
75525: PUSH
75526: LD_INT 2
75528: NEG
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: PUSH
75534: LD_INT 0
75536: PUSH
75537: LD_INT 4
75539: NEG
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: PUSH
75545: LD_INT 0
75547: PUSH
75548: LD_INT 5
75550: NEG
75551: PUSH
75552: EMPTY
75553: LIST
75554: LIST
75555: PUSH
75556: LD_INT 1
75558: PUSH
75559: LD_INT 4
75561: NEG
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 1
75569: PUSH
75570: LD_INT 3
75572: NEG
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PUSH
75578: LD_INT 0
75580: PUSH
75581: LD_INT 3
75583: NEG
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: PUSH
75589: LD_INT 1
75591: NEG
75592: PUSH
75593: LD_INT 4
75595: NEG
75596: PUSH
75597: EMPTY
75598: LIST
75599: LIST
75600: PUSH
75601: LD_INT 1
75603: NEG
75604: PUSH
75605: LD_INT 5
75607: NEG
75608: PUSH
75609: EMPTY
75610: LIST
75611: LIST
75612: PUSH
75613: LD_INT 2
75615: PUSH
75616: LD_INT 3
75618: NEG
75619: PUSH
75620: EMPTY
75621: LIST
75622: LIST
75623: PUSH
75624: LD_INT 2
75626: NEG
75627: PUSH
75628: LD_INT 5
75630: NEG
75631: PUSH
75632: EMPTY
75633: LIST
75634: LIST
75635: PUSH
75636: EMPTY
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: LIST
75644: LIST
75645: LIST
75646: LIST
75647: LIST
75648: LIST
75649: LIST
75650: LIST
75651: LIST
75652: LIST
75653: LIST
75654: LIST
75655: LIST
75656: LIST
75657: LIST
75658: LIST
75659: LIST
75660: LIST
75661: LIST
75662: LIST
75663: LIST
75664: LIST
75665: LIST
75666: LIST
75667: LIST
75668: LIST
75669: LIST
75670: LIST
75671: LIST
75672: LIST
75673: LIST
75674: LIST
75675: LIST
75676: LIST
75677: LIST
75678: LIST
75679: LIST
75680: LIST
75681: LIST
75682: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
75683: LD_ADDR_VAR 0 31
75687: PUSH
75688: LD_INT 0
75690: PUSH
75691: LD_INT 4
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: LD_INT 0
75700: PUSH
75701: LD_INT 3
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: PUSH
75708: LD_INT 1
75710: PUSH
75711: LD_INT 4
75713: PUSH
75714: EMPTY
75715: LIST
75716: LIST
75717: PUSH
75718: LD_INT 1
75720: PUSH
75721: LD_INT 5
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PUSH
75728: LD_INT 0
75730: PUSH
75731: LD_INT 5
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: LD_INT 1
75740: NEG
75741: PUSH
75742: LD_INT 4
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: LD_INT 1
75751: NEG
75752: PUSH
75753: LD_INT 3
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: PUSH
75760: LD_INT 2
75762: PUSH
75763: LD_INT 5
75765: PUSH
75766: EMPTY
75767: LIST
75768: LIST
75769: PUSH
75770: LD_INT 2
75772: NEG
75773: PUSH
75774: LD_INT 3
75776: PUSH
75777: EMPTY
75778: LIST
75779: LIST
75780: PUSH
75781: LD_INT 3
75783: NEG
75784: PUSH
75785: LD_INT 0
75787: PUSH
75788: EMPTY
75789: LIST
75790: LIST
75791: PUSH
75792: LD_INT 3
75794: NEG
75795: PUSH
75796: LD_INT 1
75798: NEG
75799: PUSH
75800: EMPTY
75801: LIST
75802: LIST
75803: PUSH
75804: LD_INT 2
75806: NEG
75807: PUSH
75808: LD_INT 0
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: PUSH
75815: LD_INT 2
75817: NEG
75818: PUSH
75819: LD_INT 1
75821: PUSH
75822: EMPTY
75823: LIST
75824: LIST
75825: PUSH
75826: LD_INT 3
75828: NEG
75829: PUSH
75830: LD_INT 1
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: PUSH
75837: LD_INT 4
75839: NEG
75840: PUSH
75841: LD_INT 0
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: PUSH
75848: LD_INT 4
75850: NEG
75851: PUSH
75852: LD_INT 1
75854: NEG
75855: PUSH
75856: EMPTY
75857: LIST
75858: LIST
75859: PUSH
75860: LD_INT 4
75862: NEG
75863: PUSH
75864: LD_INT 2
75866: NEG
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: PUSH
75872: LD_INT 2
75874: NEG
75875: PUSH
75876: LD_INT 2
75878: PUSH
75879: EMPTY
75880: LIST
75881: LIST
75882: PUSH
75883: LD_INT 4
75885: NEG
75886: PUSH
75887: LD_INT 4
75889: NEG
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 4
75897: NEG
75898: PUSH
75899: LD_INT 5
75901: NEG
75902: PUSH
75903: EMPTY
75904: LIST
75905: LIST
75906: PUSH
75907: LD_INT 3
75909: NEG
75910: PUSH
75911: LD_INT 4
75913: NEG
75914: PUSH
75915: EMPTY
75916: LIST
75917: LIST
75918: PUSH
75919: LD_INT 3
75921: NEG
75922: PUSH
75923: LD_INT 3
75925: NEG
75926: PUSH
75927: EMPTY
75928: LIST
75929: LIST
75930: PUSH
75931: LD_INT 4
75933: NEG
75934: PUSH
75935: LD_INT 3
75937: NEG
75938: PUSH
75939: EMPTY
75940: LIST
75941: LIST
75942: PUSH
75943: LD_INT 5
75945: NEG
75946: PUSH
75947: LD_INT 4
75949: NEG
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: LD_INT 5
75957: NEG
75958: PUSH
75959: LD_INT 5
75961: NEG
75962: PUSH
75963: EMPTY
75964: LIST
75965: LIST
75966: PUSH
75967: LD_INT 3
75969: NEG
75970: PUSH
75971: LD_INT 5
75973: NEG
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: PUSH
75979: LD_INT 5
75981: NEG
75982: PUSH
75983: LD_INT 3
75985: NEG
75986: PUSH
75987: EMPTY
75988: LIST
75989: LIST
75990: PUSH
75991: LD_INT 0
75993: PUSH
75994: LD_INT 3
75996: NEG
75997: PUSH
75998: EMPTY
75999: LIST
76000: LIST
76001: PUSH
76002: LD_INT 0
76004: PUSH
76005: LD_INT 4
76007: NEG
76008: PUSH
76009: EMPTY
76010: LIST
76011: LIST
76012: PUSH
76013: LD_INT 1
76015: PUSH
76016: LD_INT 3
76018: NEG
76019: PUSH
76020: EMPTY
76021: LIST
76022: LIST
76023: PUSH
76024: LD_INT 1
76026: PUSH
76027: LD_INT 2
76029: NEG
76030: PUSH
76031: EMPTY
76032: LIST
76033: LIST
76034: PUSH
76035: LD_INT 0
76037: PUSH
76038: LD_INT 2
76040: NEG
76041: PUSH
76042: EMPTY
76043: LIST
76044: LIST
76045: PUSH
76046: LD_INT 1
76048: NEG
76049: PUSH
76050: LD_INT 3
76052: NEG
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: PUSH
76058: LD_INT 1
76060: NEG
76061: PUSH
76062: LD_INT 4
76064: NEG
76065: PUSH
76066: EMPTY
76067: LIST
76068: LIST
76069: PUSH
76070: LD_INT 2
76072: PUSH
76073: LD_INT 2
76075: NEG
76076: PUSH
76077: EMPTY
76078: LIST
76079: LIST
76080: PUSH
76081: LD_INT 2
76083: NEG
76084: PUSH
76085: LD_INT 4
76087: NEG
76088: PUSH
76089: EMPTY
76090: LIST
76091: LIST
76092: PUSH
76093: LD_INT 4
76095: PUSH
76096: LD_INT 0
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: PUSH
76103: LD_INT 4
76105: PUSH
76106: LD_INT 1
76108: NEG
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_INT 5
76116: PUSH
76117: LD_INT 0
76119: PUSH
76120: EMPTY
76121: LIST
76122: LIST
76123: PUSH
76124: LD_INT 5
76126: PUSH
76127: LD_INT 1
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: PUSH
76134: LD_INT 4
76136: PUSH
76137: LD_INT 1
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 3
76146: PUSH
76147: LD_INT 0
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PUSH
76154: LD_INT 3
76156: PUSH
76157: LD_INT 1
76159: NEG
76160: PUSH
76161: EMPTY
76162: LIST
76163: LIST
76164: PUSH
76165: LD_INT 3
76167: PUSH
76168: LD_INT 2
76170: NEG
76171: PUSH
76172: EMPTY
76173: LIST
76174: LIST
76175: PUSH
76176: LD_INT 5
76178: PUSH
76179: LD_INT 2
76181: PUSH
76182: EMPTY
76183: LIST
76184: LIST
76185: PUSH
76186: EMPTY
76187: LIST
76188: LIST
76189: LIST
76190: LIST
76191: LIST
76192: LIST
76193: LIST
76194: LIST
76195: LIST
76196: LIST
76197: LIST
76198: LIST
76199: LIST
76200: LIST
76201: LIST
76202: LIST
76203: LIST
76204: LIST
76205: LIST
76206: LIST
76207: LIST
76208: LIST
76209: LIST
76210: LIST
76211: LIST
76212: LIST
76213: LIST
76214: LIST
76215: LIST
76216: LIST
76217: LIST
76218: LIST
76219: LIST
76220: LIST
76221: LIST
76222: LIST
76223: LIST
76224: LIST
76225: LIST
76226: LIST
76227: LIST
76228: LIST
76229: LIST
76230: LIST
76231: LIST
76232: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
76233: LD_ADDR_VAR 0 32
76237: PUSH
76238: LD_INT 4
76240: NEG
76241: PUSH
76242: LD_INT 0
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: PUSH
76249: LD_INT 4
76251: NEG
76252: PUSH
76253: LD_INT 1
76255: NEG
76256: PUSH
76257: EMPTY
76258: LIST
76259: LIST
76260: PUSH
76261: LD_INT 3
76263: NEG
76264: PUSH
76265: LD_INT 0
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: LD_INT 3
76274: NEG
76275: PUSH
76276: LD_INT 1
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: PUSH
76283: LD_INT 4
76285: NEG
76286: PUSH
76287: LD_INT 1
76289: PUSH
76290: EMPTY
76291: LIST
76292: LIST
76293: PUSH
76294: LD_INT 5
76296: NEG
76297: PUSH
76298: LD_INT 0
76300: PUSH
76301: EMPTY
76302: LIST
76303: LIST
76304: PUSH
76305: LD_INT 5
76307: NEG
76308: PUSH
76309: LD_INT 1
76311: NEG
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: PUSH
76317: LD_INT 5
76319: NEG
76320: PUSH
76321: LD_INT 2
76323: NEG
76324: PUSH
76325: EMPTY
76326: LIST
76327: LIST
76328: PUSH
76329: LD_INT 3
76331: NEG
76332: PUSH
76333: LD_INT 2
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: PUSH
76340: LD_INT 3
76342: NEG
76343: PUSH
76344: LD_INT 3
76346: NEG
76347: PUSH
76348: EMPTY
76349: LIST
76350: LIST
76351: PUSH
76352: LD_INT 3
76354: NEG
76355: PUSH
76356: LD_INT 4
76358: NEG
76359: PUSH
76360: EMPTY
76361: LIST
76362: LIST
76363: PUSH
76364: LD_INT 2
76366: NEG
76367: PUSH
76368: LD_INT 3
76370: NEG
76371: PUSH
76372: EMPTY
76373: LIST
76374: LIST
76375: PUSH
76376: LD_INT 2
76378: NEG
76379: PUSH
76380: LD_INT 2
76382: NEG
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: PUSH
76388: LD_INT 3
76390: NEG
76391: PUSH
76392: LD_INT 2
76394: NEG
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: PUSH
76400: LD_INT 4
76402: NEG
76403: PUSH
76404: LD_INT 3
76406: NEG
76407: PUSH
76408: EMPTY
76409: LIST
76410: LIST
76411: PUSH
76412: LD_INT 4
76414: NEG
76415: PUSH
76416: LD_INT 4
76418: NEG
76419: PUSH
76420: EMPTY
76421: LIST
76422: LIST
76423: PUSH
76424: LD_INT 2
76426: NEG
76427: PUSH
76428: LD_INT 4
76430: NEG
76431: PUSH
76432: EMPTY
76433: LIST
76434: LIST
76435: PUSH
76436: LD_INT 4
76438: NEG
76439: PUSH
76440: LD_INT 2
76442: NEG
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: PUSH
76448: LD_INT 0
76450: PUSH
76451: LD_INT 4
76453: NEG
76454: PUSH
76455: EMPTY
76456: LIST
76457: LIST
76458: PUSH
76459: LD_INT 0
76461: PUSH
76462: LD_INT 5
76464: NEG
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: PUSH
76470: LD_INT 1
76472: PUSH
76473: LD_INT 4
76475: NEG
76476: PUSH
76477: EMPTY
76478: LIST
76479: LIST
76480: PUSH
76481: LD_INT 1
76483: PUSH
76484: LD_INT 3
76486: NEG
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PUSH
76492: LD_INT 0
76494: PUSH
76495: LD_INT 3
76497: NEG
76498: PUSH
76499: EMPTY
76500: LIST
76501: LIST
76502: PUSH
76503: LD_INT 1
76505: NEG
76506: PUSH
76507: LD_INT 4
76509: NEG
76510: PUSH
76511: EMPTY
76512: LIST
76513: LIST
76514: PUSH
76515: LD_INT 1
76517: NEG
76518: PUSH
76519: LD_INT 5
76521: NEG
76522: PUSH
76523: EMPTY
76524: LIST
76525: LIST
76526: PUSH
76527: LD_INT 2
76529: PUSH
76530: LD_INT 3
76532: NEG
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PUSH
76538: LD_INT 2
76540: NEG
76541: PUSH
76542: LD_INT 5
76544: NEG
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: PUSH
76550: LD_INT 3
76552: PUSH
76553: LD_INT 0
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: PUSH
76560: LD_INT 3
76562: PUSH
76563: LD_INT 1
76565: NEG
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: PUSH
76571: LD_INT 4
76573: PUSH
76574: LD_INT 0
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: LD_INT 4
76583: PUSH
76584: LD_INT 1
76586: PUSH
76587: EMPTY
76588: LIST
76589: LIST
76590: PUSH
76591: LD_INT 3
76593: PUSH
76594: LD_INT 1
76596: PUSH
76597: EMPTY
76598: LIST
76599: LIST
76600: PUSH
76601: LD_INT 2
76603: PUSH
76604: LD_INT 0
76606: PUSH
76607: EMPTY
76608: LIST
76609: LIST
76610: PUSH
76611: LD_INT 2
76613: PUSH
76614: LD_INT 1
76616: NEG
76617: PUSH
76618: EMPTY
76619: LIST
76620: LIST
76621: PUSH
76622: LD_INT 2
76624: PUSH
76625: LD_INT 2
76627: NEG
76628: PUSH
76629: EMPTY
76630: LIST
76631: LIST
76632: PUSH
76633: LD_INT 4
76635: PUSH
76636: LD_INT 2
76638: PUSH
76639: EMPTY
76640: LIST
76641: LIST
76642: PUSH
76643: LD_INT 4
76645: PUSH
76646: LD_INT 4
76648: PUSH
76649: EMPTY
76650: LIST
76651: LIST
76652: PUSH
76653: LD_INT 4
76655: PUSH
76656: LD_INT 3
76658: PUSH
76659: EMPTY
76660: LIST
76661: LIST
76662: PUSH
76663: LD_INT 5
76665: PUSH
76666: LD_INT 4
76668: PUSH
76669: EMPTY
76670: LIST
76671: LIST
76672: PUSH
76673: LD_INT 5
76675: PUSH
76676: LD_INT 5
76678: PUSH
76679: EMPTY
76680: LIST
76681: LIST
76682: PUSH
76683: LD_INT 4
76685: PUSH
76686: LD_INT 5
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: PUSH
76693: LD_INT 3
76695: PUSH
76696: LD_INT 4
76698: PUSH
76699: EMPTY
76700: LIST
76701: LIST
76702: PUSH
76703: LD_INT 3
76705: PUSH
76706: LD_INT 3
76708: PUSH
76709: EMPTY
76710: LIST
76711: LIST
76712: PUSH
76713: LD_INT 5
76715: PUSH
76716: LD_INT 3
76718: PUSH
76719: EMPTY
76720: LIST
76721: LIST
76722: PUSH
76723: LD_INT 3
76725: PUSH
76726: LD_INT 5
76728: PUSH
76729: EMPTY
76730: LIST
76731: LIST
76732: PUSH
76733: EMPTY
76734: LIST
76735: LIST
76736: LIST
76737: LIST
76738: LIST
76739: LIST
76740: LIST
76741: LIST
76742: LIST
76743: LIST
76744: LIST
76745: LIST
76746: LIST
76747: LIST
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: LIST
76763: LIST
76764: LIST
76765: LIST
76766: LIST
76767: LIST
76768: LIST
76769: LIST
76770: LIST
76771: LIST
76772: LIST
76773: LIST
76774: LIST
76775: LIST
76776: LIST
76777: LIST
76778: LIST
76779: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
76780: LD_ADDR_VAR 0 33
76784: PUSH
76785: LD_INT 4
76787: NEG
76788: PUSH
76789: LD_INT 4
76791: NEG
76792: PUSH
76793: EMPTY
76794: LIST
76795: LIST
76796: PUSH
76797: LD_INT 4
76799: NEG
76800: PUSH
76801: LD_INT 5
76803: NEG
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: PUSH
76809: LD_INT 3
76811: NEG
76812: PUSH
76813: LD_INT 4
76815: NEG
76816: PUSH
76817: EMPTY
76818: LIST
76819: LIST
76820: PUSH
76821: LD_INT 3
76823: NEG
76824: PUSH
76825: LD_INT 3
76827: NEG
76828: PUSH
76829: EMPTY
76830: LIST
76831: LIST
76832: PUSH
76833: LD_INT 4
76835: NEG
76836: PUSH
76837: LD_INT 3
76839: NEG
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: PUSH
76845: LD_INT 5
76847: NEG
76848: PUSH
76849: LD_INT 4
76851: NEG
76852: PUSH
76853: EMPTY
76854: LIST
76855: LIST
76856: PUSH
76857: LD_INT 5
76859: NEG
76860: PUSH
76861: LD_INT 5
76863: NEG
76864: PUSH
76865: EMPTY
76866: LIST
76867: LIST
76868: PUSH
76869: LD_INT 3
76871: NEG
76872: PUSH
76873: LD_INT 5
76875: NEG
76876: PUSH
76877: EMPTY
76878: LIST
76879: LIST
76880: PUSH
76881: LD_INT 5
76883: NEG
76884: PUSH
76885: LD_INT 3
76887: NEG
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: PUSH
76893: LD_INT 0
76895: PUSH
76896: LD_INT 3
76898: NEG
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: PUSH
76904: LD_INT 0
76906: PUSH
76907: LD_INT 4
76909: NEG
76910: PUSH
76911: EMPTY
76912: LIST
76913: LIST
76914: PUSH
76915: LD_INT 1
76917: PUSH
76918: LD_INT 3
76920: NEG
76921: PUSH
76922: EMPTY
76923: LIST
76924: LIST
76925: PUSH
76926: LD_INT 1
76928: PUSH
76929: LD_INT 2
76931: NEG
76932: PUSH
76933: EMPTY
76934: LIST
76935: LIST
76936: PUSH
76937: LD_INT 0
76939: PUSH
76940: LD_INT 2
76942: NEG
76943: PUSH
76944: EMPTY
76945: LIST
76946: LIST
76947: PUSH
76948: LD_INT 1
76950: NEG
76951: PUSH
76952: LD_INT 3
76954: NEG
76955: PUSH
76956: EMPTY
76957: LIST
76958: LIST
76959: PUSH
76960: LD_INT 1
76962: NEG
76963: PUSH
76964: LD_INT 4
76966: NEG
76967: PUSH
76968: EMPTY
76969: LIST
76970: LIST
76971: PUSH
76972: LD_INT 2
76974: PUSH
76975: LD_INT 2
76977: NEG
76978: PUSH
76979: EMPTY
76980: LIST
76981: LIST
76982: PUSH
76983: LD_INT 2
76985: NEG
76986: PUSH
76987: LD_INT 4
76989: NEG
76990: PUSH
76991: EMPTY
76992: LIST
76993: LIST
76994: PUSH
76995: LD_INT 4
76997: PUSH
76998: LD_INT 0
77000: PUSH
77001: EMPTY
77002: LIST
77003: LIST
77004: PUSH
77005: LD_INT 4
77007: PUSH
77008: LD_INT 1
77010: NEG
77011: PUSH
77012: EMPTY
77013: LIST
77014: LIST
77015: PUSH
77016: LD_INT 5
77018: PUSH
77019: LD_INT 0
77021: PUSH
77022: EMPTY
77023: LIST
77024: LIST
77025: PUSH
77026: LD_INT 5
77028: PUSH
77029: LD_INT 1
77031: PUSH
77032: EMPTY
77033: LIST
77034: LIST
77035: PUSH
77036: LD_INT 4
77038: PUSH
77039: LD_INT 1
77041: PUSH
77042: EMPTY
77043: LIST
77044: LIST
77045: PUSH
77046: LD_INT 3
77048: PUSH
77049: LD_INT 0
77051: PUSH
77052: EMPTY
77053: LIST
77054: LIST
77055: PUSH
77056: LD_INT 3
77058: PUSH
77059: LD_INT 1
77061: NEG
77062: PUSH
77063: EMPTY
77064: LIST
77065: LIST
77066: PUSH
77067: LD_INT 3
77069: PUSH
77070: LD_INT 2
77072: NEG
77073: PUSH
77074: EMPTY
77075: LIST
77076: LIST
77077: PUSH
77078: LD_INT 5
77080: PUSH
77081: LD_INT 2
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PUSH
77088: LD_INT 3
77090: PUSH
77091: LD_INT 3
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PUSH
77098: LD_INT 3
77100: PUSH
77101: LD_INT 2
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: PUSH
77108: LD_INT 4
77110: PUSH
77111: LD_INT 3
77113: PUSH
77114: EMPTY
77115: LIST
77116: LIST
77117: PUSH
77118: LD_INT 4
77120: PUSH
77121: LD_INT 4
77123: PUSH
77124: EMPTY
77125: LIST
77126: LIST
77127: PUSH
77128: LD_INT 3
77130: PUSH
77131: LD_INT 4
77133: PUSH
77134: EMPTY
77135: LIST
77136: LIST
77137: PUSH
77138: LD_INT 2
77140: PUSH
77141: LD_INT 3
77143: PUSH
77144: EMPTY
77145: LIST
77146: LIST
77147: PUSH
77148: LD_INT 2
77150: PUSH
77151: LD_INT 2
77153: PUSH
77154: EMPTY
77155: LIST
77156: LIST
77157: PUSH
77158: LD_INT 4
77160: PUSH
77161: LD_INT 2
77163: PUSH
77164: EMPTY
77165: LIST
77166: LIST
77167: PUSH
77168: LD_INT 2
77170: PUSH
77171: LD_INT 4
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PUSH
77178: LD_INT 0
77180: PUSH
77181: LD_INT 4
77183: PUSH
77184: EMPTY
77185: LIST
77186: LIST
77187: PUSH
77188: LD_INT 0
77190: PUSH
77191: LD_INT 3
77193: PUSH
77194: EMPTY
77195: LIST
77196: LIST
77197: PUSH
77198: LD_INT 1
77200: PUSH
77201: LD_INT 4
77203: PUSH
77204: EMPTY
77205: LIST
77206: LIST
77207: PUSH
77208: LD_INT 1
77210: PUSH
77211: LD_INT 5
77213: PUSH
77214: EMPTY
77215: LIST
77216: LIST
77217: PUSH
77218: LD_INT 0
77220: PUSH
77221: LD_INT 5
77223: PUSH
77224: EMPTY
77225: LIST
77226: LIST
77227: PUSH
77228: LD_INT 1
77230: NEG
77231: PUSH
77232: LD_INT 4
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: PUSH
77239: LD_INT 1
77241: NEG
77242: PUSH
77243: LD_INT 3
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: PUSH
77250: LD_INT 2
77252: PUSH
77253: LD_INT 5
77255: PUSH
77256: EMPTY
77257: LIST
77258: LIST
77259: PUSH
77260: LD_INT 2
77262: NEG
77263: PUSH
77264: LD_INT 3
77266: PUSH
77267: EMPTY
77268: LIST
77269: LIST
77270: PUSH
77271: EMPTY
77272: LIST
77273: LIST
77274: LIST
77275: LIST
77276: LIST
77277: LIST
77278: LIST
77279: LIST
77280: LIST
77281: LIST
77282: LIST
77283: LIST
77284: LIST
77285: LIST
77286: LIST
77287: LIST
77288: LIST
77289: LIST
77290: LIST
77291: LIST
77292: LIST
77293: LIST
77294: LIST
77295: LIST
77296: LIST
77297: LIST
77298: LIST
77299: LIST
77300: LIST
77301: LIST
77302: LIST
77303: LIST
77304: LIST
77305: LIST
77306: LIST
77307: LIST
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
77318: LD_ADDR_VAR 0 34
77322: PUSH
77323: LD_INT 0
77325: PUSH
77326: LD_INT 4
77328: NEG
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: PUSH
77334: LD_INT 0
77336: PUSH
77337: LD_INT 5
77339: NEG
77340: PUSH
77341: EMPTY
77342: LIST
77343: LIST
77344: PUSH
77345: LD_INT 1
77347: PUSH
77348: LD_INT 4
77350: NEG
77351: PUSH
77352: EMPTY
77353: LIST
77354: LIST
77355: PUSH
77356: LD_INT 1
77358: PUSH
77359: LD_INT 3
77361: NEG
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 0
77369: PUSH
77370: LD_INT 3
77372: NEG
77373: PUSH
77374: EMPTY
77375: LIST
77376: LIST
77377: PUSH
77378: LD_INT 1
77380: NEG
77381: PUSH
77382: LD_INT 4
77384: NEG
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_INT 1
77392: NEG
77393: PUSH
77394: LD_INT 5
77396: NEG
77397: PUSH
77398: EMPTY
77399: LIST
77400: LIST
77401: PUSH
77402: LD_INT 2
77404: PUSH
77405: LD_INT 3
77407: NEG
77408: PUSH
77409: EMPTY
77410: LIST
77411: LIST
77412: PUSH
77413: LD_INT 2
77415: NEG
77416: PUSH
77417: LD_INT 5
77419: NEG
77420: PUSH
77421: EMPTY
77422: LIST
77423: LIST
77424: PUSH
77425: LD_INT 3
77427: PUSH
77428: LD_INT 0
77430: PUSH
77431: EMPTY
77432: LIST
77433: LIST
77434: PUSH
77435: LD_INT 3
77437: PUSH
77438: LD_INT 1
77440: NEG
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: PUSH
77446: LD_INT 4
77448: PUSH
77449: LD_INT 0
77451: PUSH
77452: EMPTY
77453: LIST
77454: LIST
77455: PUSH
77456: LD_INT 4
77458: PUSH
77459: LD_INT 1
77461: PUSH
77462: EMPTY
77463: LIST
77464: LIST
77465: PUSH
77466: LD_INT 3
77468: PUSH
77469: LD_INT 1
77471: PUSH
77472: EMPTY
77473: LIST
77474: LIST
77475: PUSH
77476: LD_INT 2
77478: PUSH
77479: LD_INT 0
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: PUSH
77486: LD_INT 2
77488: PUSH
77489: LD_INT 1
77491: NEG
77492: PUSH
77493: EMPTY
77494: LIST
77495: LIST
77496: PUSH
77497: LD_INT 2
77499: PUSH
77500: LD_INT 2
77502: NEG
77503: PUSH
77504: EMPTY
77505: LIST
77506: LIST
77507: PUSH
77508: LD_INT 4
77510: PUSH
77511: LD_INT 2
77513: PUSH
77514: EMPTY
77515: LIST
77516: LIST
77517: PUSH
77518: LD_INT 4
77520: PUSH
77521: LD_INT 4
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: PUSH
77528: LD_INT 4
77530: PUSH
77531: LD_INT 3
77533: PUSH
77534: EMPTY
77535: LIST
77536: LIST
77537: PUSH
77538: LD_INT 5
77540: PUSH
77541: LD_INT 4
77543: PUSH
77544: EMPTY
77545: LIST
77546: LIST
77547: PUSH
77548: LD_INT 5
77550: PUSH
77551: LD_INT 5
77553: PUSH
77554: EMPTY
77555: LIST
77556: LIST
77557: PUSH
77558: LD_INT 4
77560: PUSH
77561: LD_INT 5
77563: PUSH
77564: EMPTY
77565: LIST
77566: LIST
77567: PUSH
77568: LD_INT 3
77570: PUSH
77571: LD_INT 4
77573: PUSH
77574: EMPTY
77575: LIST
77576: LIST
77577: PUSH
77578: LD_INT 3
77580: PUSH
77581: LD_INT 3
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: PUSH
77588: LD_INT 5
77590: PUSH
77591: LD_INT 3
77593: PUSH
77594: EMPTY
77595: LIST
77596: LIST
77597: PUSH
77598: LD_INT 3
77600: PUSH
77601: LD_INT 5
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: PUSH
77608: LD_INT 0
77610: PUSH
77611: LD_INT 3
77613: PUSH
77614: EMPTY
77615: LIST
77616: LIST
77617: PUSH
77618: LD_INT 0
77620: PUSH
77621: LD_INT 2
77623: PUSH
77624: EMPTY
77625: LIST
77626: LIST
77627: PUSH
77628: LD_INT 1
77630: PUSH
77631: LD_INT 3
77633: PUSH
77634: EMPTY
77635: LIST
77636: LIST
77637: PUSH
77638: LD_INT 1
77640: PUSH
77641: LD_INT 4
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: PUSH
77648: LD_INT 0
77650: PUSH
77651: LD_INT 4
77653: PUSH
77654: EMPTY
77655: LIST
77656: LIST
77657: PUSH
77658: LD_INT 1
77660: NEG
77661: PUSH
77662: LD_INT 3
77664: PUSH
77665: EMPTY
77666: LIST
77667: LIST
77668: PUSH
77669: LD_INT 1
77671: NEG
77672: PUSH
77673: LD_INT 2
77675: PUSH
77676: EMPTY
77677: LIST
77678: LIST
77679: PUSH
77680: LD_INT 2
77682: PUSH
77683: LD_INT 4
77685: PUSH
77686: EMPTY
77687: LIST
77688: LIST
77689: PUSH
77690: LD_INT 2
77692: NEG
77693: PUSH
77694: LD_INT 2
77696: PUSH
77697: EMPTY
77698: LIST
77699: LIST
77700: PUSH
77701: LD_INT 4
77703: NEG
77704: PUSH
77705: LD_INT 0
77707: PUSH
77708: EMPTY
77709: LIST
77710: LIST
77711: PUSH
77712: LD_INT 4
77714: NEG
77715: PUSH
77716: LD_INT 1
77718: NEG
77719: PUSH
77720: EMPTY
77721: LIST
77722: LIST
77723: PUSH
77724: LD_INT 3
77726: NEG
77727: PUSH
77728: LD_INT 0
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: PUSH
77735: LD_INT 3
77737: NEG
77738: PUSH
77739: LD_INT 1
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: LD_INT 4
77748: NEG
77749: PUSH
77750: LD_INT 1
77752: PUSH
77753: EMPTY
77754: LIST
77755: LIST
77756: PUSH
77757: LD_INT 5
77759: NEG
77760: PUSH
77761: LD_INT 0
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: PUSH
77768: LD_INT 5
77770: NEG
77771: PUSH
77772: LD_INT 1
77774: NEG
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: PUSH
77780: LD_INT 5
77782: NEG
77783: PUSH
77784: LD_INT 2
77786: NEG
77787: PUSH
77788: EMPTY
77789: LIST
77790: LIST
77791: PUSH
77792: LD_INT 3
77794: NEG
77795: PUSH
77796: LD_INT 2
77798: PUSH
77799: EMPTY
77800: LIST
77801: LIST
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: LIST
77807: LIST
77808: LIST
77809: LIST
77810: LIST
77811: LIST
77812: LIST
77813: LIST
77814: LIST
77815: LIST
77816: LIST
77817: LIST
77818: LIST
77819: LIST
77820: LIST
77821: LIST
77822: LIST
77823: LIST
77824: LIST
77825: LIST
77826: LIST
77827: LIST
77828: LIST
77829: LIST
77830: LIST
77831: LIST
77832: LIST
77833: LIST
77834: LIST
77835: LIST
77836: LIST
77837: LIST
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: LIST
77849: ST_TO_ADDR
// end ; end ;
77850: GO 77853
77852: POP
// case btype of b_depot , b_warehouse :
77853: LD_VAR 0 1
77857: PUSH
77858: LD_INT 0
77860: DOUBLE
77861: EQUAL
77862: IFTRUE 77872
77864: LD_INT 1
77866: DOUBLE
77867: EQUAL
77868: IFTRUE 77872
77870: GO 78073
77872: POP
// case nation of nation_american :
77873: LD_VAR 0 5
77877: PUSH
77878: LD_INT 1
77880: DOUBLE
77881: EQUAL
77882: IFTRUE 77886
77884: GO 77942
77886: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
77887: LD_ADDR_VAR 0 9
77891: PUSH
77892: LD_VAR 0 11
77896: PUSH
77897: LD_VAR 0 12
77901: PUSH
77902: LD_VAR 0 13
77906: PUSH
77907: LD_VAR 0 14
77911: PUSH
77912: LD_VAR 0 15
77916: PUSH
77917: LD_VAR 0 16
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: LIST
77926: LIST
77927: LIST
77928: LIST
77929: PUSH
77930: LD_VAR 0 4
77934: PUSH
77935: LD_INT 1
77937: PLUS
77938: ARRAY
77939: ST_TO_ADDR
77940: GO 78071
77942: LD_INT 2
77944: DOUBLE
77945: EQUAL
77946: IFTRUE 77950
77948: GO 78006
77950: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
77951: LD_ADDR_VAR 0 9
77955: PUSH
77956: LD_VAR 0 17
77960: PUSH
77961: LD_VAR 0 18
77965: PUSH
77966: LD_VAR 0 19
77970: PUSH
77971: LD_VAR 0 20
77975: PUSH
77976: LD_VAR 0 21
77980: PUSH
77981: LD_VAR 0 22
77985: PUSH
77986: EMPTY
77987: LIST
77988: LIST
77989: LIST
77990: LIST
77991: LIST
77992: LIST
77993: PUSH
77994: LD_VAR 0 4
77998: PUSH
77999: LD_INT 1
78001: PLUS
78002: ARRAY
78003: ST_TO_ADDR
78004: GO 78071
78006: LD_INT 3
78008: DOUBLE
78009: EQUAL
78010: IFTRUE 78014
78012: GO 78070
78014: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
78015: LD_ADDR_VAR 0 9
78019: PUSH
78020: LD_VAR 0 23
78024: PUSH
78025: LD_VAR 0 24
78029: PUSH
78030: LD_VAR 0 25
78034: PUSH
78035: LD_VAR 0 26
78039: PUSH
78040: LD_VAR 0 27
78044: PUSH
78045: LD_VAR 0 28
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: LIST
78054: LIST
78055: LIST
78056: LIST
78057: PUSH
78058: LD_VAR 0 4
78062: PUSH
78063: LD_INT 1
78065: PLUS
78066: ARRAY
78067: ST_TO_ADDR
78068: GO 78071
78070: POP
78071: GO 78626
78073: LD_INT 2
78075: DOUBLE
78076: EQUAL
78077: IFTRUE 78087
78079: LD_INT 3
78081: DOUBLE
78082: EQUAL
78083: IFTRUE 78087
78085: GO 78143
78087: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
78088: LD_ADDR_VAR 0 9
78092: PUSH
78093: LD_VAR 0 29
78097: PUSH
78098: LD_VAR 0 30
78102: PUSH
78103: LD_VAR 0 31
78107: PUSH
78108: LD_VAR 0 32
78112: PUSH
78113: LD_VAR 0 33
78117: PUSH
78118: LD_VAR 0 34
78122: PUSH
78123: EMPTY
78124: LIST
78125: LIST
78126: LIST
78127: LIST
78128: LIST
78129: LIST
78130: PUSH
78131: LD_VAR 0 4
78135: PUSH
78136: LD_INT 1
78138: PLUS
78139: ARRAY
78140: ST_TO_ADDR
78141: GO 78626
78143: LD_INT 16
78145: DOUBLE
78146: EQUAL
78147: IFTRUE 78205
78149: LD_INT 17
78151: DOUBLE
78152: EQUAL
78153: IFTRUE 78205
78155: LD_INT 18
78157: DOUBLE
78158: EQUAL
78159: IFTRUE 78205
78161: LD_INT 19
78163: DOUBLE
78164: EQUAL
78165: IFTRUE 78205
78167: LD_INT 22
78169: DOUBLE
78170: EQUAL
78171: IFTRUE 78205
78173: LD_INT 20
78175: DOUBLE
78176: EQUAL
78177: IFTRUE 78205
78179: LD_INT 21
78181: DOUBLE
78182: EQUAL
78183: IFTRUE 78205
78185: LD_INT 23
78187: DOUBLE
78188: EQUAL
78189: IFTRUE 78205
78191: LD_INT 24
78193: DOUBLE
78194: EQUAL
78195: IFTRUE 78205
78197: LD_INT 25
78199: DOUBLE
78200: EQUAL
78201: IFTRUE 78205
78203: GO 78261
78205: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
78206: LD_ADDR_VAR 0 9
78210: PUSH
78211: LD_VAR 0 35
78215: PUSH
78216: LD_VAR 0 36
78220: PUSH
78221: LD_VAR 0 37
78225: PUSH
78226: LD_VAR 0 38
78230: PUSH
78231: LD_VAR 0 39
78235: PUSH
78236: LD_VAR 0 40
78240: PUSH
78241: EMPTY
78242: LIST
78243: LIST
78244: LIST
78245: LIST
78246: LIST
78247: LIST
78248: PUSH
78249: LD_VAR 0 4
78253: PUSH
78254: LD_INT 1
78256: PLUS
78257: ARRAY
78258: ST_TO_ADDR
78259: GO 78626
78261: LD_INT 6
78263: DOUBLE
78264: EQUAL
78265: IFTRUE 78317
78267: LD_INT 7
78269: DOUBLE
78270: EQUAL
78271: IFTRUE 78317
78273: LD_INT 8
78275: DOUBLE
78276: EQUAL
78277: IFTRUE 78317
78279: LD_INT 13
78281: DOUBLE
78282: EQUAL
78283: IFTRUE 78317
78285: LD_INT 12
78287: DOUBLE
78288: EQUAL
78289: IFTRUE 78317
78291: LD_INT 15
78293: DOUBLE
78294: EQUAL
78295: IFTRUE 78317
78297: LD_INT 11
78299: DOUBLE
78300: EQUAL
78301: IFTRUE 78317
78303: LD_INT 14
78305: DOUBLE
78306: EQUAL
78307: IFTRUE 78317
78309: LD_INT 10
78311: DOUBLE
78312: EQUAL
78313: IFTRUE 78317
78315: GO 78373
78317: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
78318: LD_ADDR_VAR 0 9
78322: PUSH
78323: LD_VAR 0 41
78327: PUSH
78328: LD_VAR 0 42
78332: PUSH
78333: LD_VAR 0 43
78337: PUSH
78338: LD_VAR 0 44
78342: PUSH
78343: LD_VAR 0 45
78347: PUSH
78348: LD_VAR 0 46
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: LIST
78357: LIST
78358: LIST
78359: LIST
78360: PUSH
78361: LD_VAR 0 4
78365: PUSH
78366: LD_INT 1
78368: PLUS
78369: ARRAY
78370: ST_TO_ADDR
78371: GO 78626
78373: LD_INT 36
78375: DOUBLE
78376: EQUAL
78377: IFTRUE 78381
78379: GO 78437
78381: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
78382: LD_ADDR_VAR 0 9
78386: PUSH
78387: LD_VAR 0 47
78391: PUSH
78392: LD_VAR 0 48
78396: PUSH
78397: LD_VAR 0 49
78401: PUSH
78402: LD_VAR 0 50
78406: PUSH
78407: LD_VAR 0 51
78411: PUSH
78412: LD_VAR 0 52
78416: PUSH
78417: EMPTY
78418: LIST
78419: LIST
78420: LIST
78421: LIST
78422: LIST
78423: LIST
78424: PUSH
78425: LD_VAR 0 4
78429: PUSH
78430: LD_INT 1
78432: PLUS
78433: ARRAY
78434: ST_TO_ADDR
78435: GO 78626
78437: LD_INT 4
78439: DOUBLE
78440: EQUAL
78441: IFTRUE 78463
78443: LD_INT 5
78445: DOUBLE
78446: EQUAL
78447: IFTRUE 78463
78449: LD_INT 34
78451: DOUBLE
78452: EQUAL
78453: IFTRUE 78463
78455: LD_INT 37
78457: DOUBLE
78458: EQUAL
78459: IFTRUE 78463
78461: GO 78519
78463: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
78464: LD_ADDR_VAR 0 9
78468: PUSH
78469: LD_VAR 0 53
78473: PUSH
78474: LD_VAR 0 54
78478: PUSH
78479: LD_VAR 0 55
78483: PUSH
78484: LD_VAR 0 56
78488: PUSH
78489: LD_VAR 0 57
78493: PUSH
78494: LD_VAR 0 58
78498: PUSH
78499: EMPTY
78500: LIST
78501: LIST
78502: LIST
78503: LIST
78504: LIST
78505: LIST
78506: PUSH
78507: LD_VAR 0 4
78511: PUSH
78512: LD_INT 1
78514: PLUS
78515: ARRAY
78516: ST_TO_ADDR
78517: GO 78626
78519: LD_INT 31
78521: DOUBLE
78522: EQUAL
78523: IFTRUE 78569
78525: LD_INT 32
78527: DOUBLE
78528: EQUAL
78529: IFTRUE 78569
78531: LD_INT 33
78533: DOUBLE
78534: EQUAL
78535: IFTRUE 78569
78537: LD_INT 27
78539: DOUBLE
78540: EQUAL
78541: IFTRUE 78569
78543: LD_INT 26
78545: DOUBLE
78546: EQUAL
78547: IFTRUE 78569
78549: LD_INT 28
78551: DOUBLE
78552: EQUAL
78553: IFTRUE 78569
78555: LD_INT 29
78557: DOUBLE
78558: EQUAL
78559: IFTRUE 78569
78561: LD_INT 30
78563: DOUBLE
78564: EQUAL
78565: IFTRUE 78569
78567: GO 78625
78569: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
78570: LD_ADDR_VAR 0 9
78574: PUSH
78575: LD_VAR 0 59
78579: PUSH
78580: LD_VAR 0 60
78584: PUSH
78585: LD_VAR 0 61
78589: PUSH
78590: LD_VAR 0 62
78594: PUSH
78595: LD_VAR 0 63
78599: PUSH
78600: LD_VAR 0 64
78604: PUSH
78605: EMPTY
78606: LIST
78607: LIST
78608: LIST
78609: LIST
78610: LIST
78611: LIST
78612: PUSH
78613: LD_VAR 0 4
78617: PUSH
78618: LD_INT 1
78620: PLUS
78621: ARRAY
78622: ST_TO_ADDR
78623: GO 78626
78625: POP
// temp_list2 = [ ] ;
78626: LD_ADDR_VAR 0 10
78630: PUSH
78631: EMPTY
78632: ST_TO_ADDR
// for i in temp_list do
78633: LD_ADDR_VAR 0 8
78637: PUSH
78638: LD_VAR 0 9
78642: PUSH
78643: FOR_IN
78644: IFFALSE 78696
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
78646: LD_ADDR_VAR 0 10
78650: PUSH
78651: LD_VAR 0 10
78655: PUSH
78656: LD_VAR 0 8
78660: PUSH
78661: LD_INT 1
78663: ARRAY
78664: PUSH
78665: LD_VAR 0 2
78669: PLUS
78670: PUSH
78671: LD_VAR 0 8
78675: PUSH
78676: LD_INT 2
78678: ARRAY
78679: PUSH
78680: LD_VAR 0 3
78684: PLUS
78685: PUSH
78686: EMPTY
78687: LIST
78688: LIST
78689: PUSH
78690: EMPTY
78691: LIST
78692: ADD
78693: ST_TO_ADDR
78694: GO 78643
78696: POP
78697: POP
// result = temp_list2 ;
78698: LD_ADDR_VAR 0 7
78702: PUSH
78703: LD_VAR 0 10
78707: ST_TO_ADDR
// end ;
78708: LD_VAR 0 7
78712: RET
// export function EnemyInRange ( unit , dist ) ; begin
78713: LD_INT 0
78715: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
78716: LD_ADDR_VAR 0 3
78720: PUSH
78721: LD_VAR 0 1
78725: PPUSH
78726: CALL_OW 255
78730: PPUSH
78731: LD_VAR 0 1
78735: PPUSH
78736: CALL_OW 250
78740: PPUSH
78741: LD_VAR 0 1
78745: PPUSH
78746: CALL_OW 251
78750: PPUSH
78751: LD_VAR 0 2
78755: PPUSH
78756: CALL 52817 0 4
78760: PUSH
78761: LD_INT 4
78763: ARRAY
78764: ST_TO_ADDR
// end ;
78765: LD_VAR 0 3
78769: RET
// export function PlayerSeeMe ( unit ) ; begin
78770: LD_INT 0
78772: PPUSH
// result := See ( your_side , unit ) ;
78773: LD_ADDR_VAR 0 2
78777: PUSH
78778: LD_OWVAR 2
78782: PPUSH
78783: LD_VAR 0 1
78787: PPUSH
78788: CALL_OW 292
78792: ST_TO_ADDR
// end ;
78793: LD_VAR 0 2
78797: RET
// export function ReverseDir ( unit ) ; begin
78798: LD_INT 0
78800: PPUSH
// if not unit then
78801: LD_VAR 0 1
78805: NOT
78806: IFFALSE 78810
// exit ;
78808: GO 78833
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
78810: LD_ADDR_VAR 0 2
78814: PUSH
78815: LD_VAR 0 1
78819: PPUSH
78820: CALL_OW 254
78824: PUSH
78825: LD_INT 3
78827: PLUS
78828: PUSH
78829: LD_INT 6
78831: MOD
78832: ST_TO_ADDR
// end ;
78833: LD_VAR 0 2
78837: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
78838: LD_INT 0
78840: PPUSH
78841: PPUSH
78842: PPUSH
78843: PPUSH
78844: PPUSH
// if not hexes then
78845: LD_VAR 0 2
78849: NOT
78850: IFFALSE 78854
// exit ;
78852: GO 79002
// dist := 9999 ;
78854: LD_ADDR_VAR 0 5
78858: PUSH
78859: LD_INT 9999
78861: ST_TO_ADDR
// for i = 1 to hexes do
78862: LD_ADDR_VAR 0 4
78866: PUSH
78867: DOUBLE
78868: LD_INT 1
78870: DEC
78871: ST_TO_ADDR
78872: LD_VAR 0 2
78876: PUSH
78877: FOR_TO
78878: IFFALSE 78990
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
78880: LD_VAR 0 1
78884: PPUSH
78885: LD_VAR 0 2
78889: PUSH
78890: LD_VAR 0 4
78894: ARRAY
78895: PUSH
78896: LD_INT 1
78898: ARRAY
78899: PPUSH
78900: LD_VAR 0 2
78904: PUSH
78905: LD_VAR 0 4
78909: ARRAY
78910: PUSH
78911: LD_INT 2
78913: ARRAY
78914: PPUSH
78915: CALL_OW 297
78919: PUSH
78920: LD_VAR 0 5
78924: LESS
78925: IFFALSE 78988
// begin hex := hexes [ i ] ;
78927: LD_ADDR_VAR 0 7
78931: PUSH
78932: LD_VAR 0 2
78936: PUSH
78937: LD_VAR 0 4
78941: ARRAY
78942: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
78943: LD_ADDR_VAR 0 5
78947: PUSH
78948: LD_VAR 0 1
78952: PPUSH
78953: LD_VAR 0 2
78957: PUSH
78958: LD_VAR 0 4
78962: ARRAY
78963: PUSH
78964: LD_INT 1
78966: ARRAY
78967: PPUSH
78968: LD_VAR 0 2
78972: PUSH
78973: LD_VAR 0 4
78977: ARRAY
78978: PUSH
78979: LD_INT 2
78981: ARRAY
78982: PPUSH
78983: CALL_OW 297
78987: ST_TO_ADDR
// end ; end ;
78988: GO 78877
78990: POP
78991: POP
// result := hex ;
78992: LD_ADDR_VAR 0 3
78996: PUSH
78997: LD_VAR 0 7
79001: ST_TO_ADDR
// end ;
79002: LD_VAR 0 3
79006: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
79007: LD_INT 0
79009: PPUSH
79010: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
79011: LD_VAR 0 1
79015: NOT
79016: PUSH
79017: LD_VAR 0 1
79021: PUSH
79022: LD_INT 21
79024: PUSH
79025: LD_INT 2
79027: PUSH
79028: EMPTY
79029: LIST
79030: LIST
79031: PUSH
79032: LD_INT 23
79034: PUSH
79035: LD_INT 2
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PUSH
79042: EMPTY
79043: LIST
79044: LIST
79045: PPUSH
79046: CALL_OW 69
79050: IN
79051: NOT
79052: OR
79053: IFFALSE 79057
// exit ;
79055: GO 79104
// for i = 1 to 3 do
79057: LD_ADDR_VAR 0 3
79061: PUSH
79062: DOUBLE
79063: LD_INT 1
79065: DEC
79066: ST_TO_ADDR
79067: LD_INT 3
79069: PUSH
79070: FOR_TO
79071: IFFALSE 79102
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
79073: LD_VAR 0 1
79077: PPUSH
79078: CALL_OW 250
79082: PPUSH
79083: LD_VAR 0 1
79087: PPUSH
79088: CALL_OW 251
79092: PPUSH
79093: LD_INT 1
79095: PPUSH
79096: CALL_OW 453
79100: GO 79070
79102: POP
79103: POP
// end ;
79104: LD_VAR 0 2
79108: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
79109: LD_INT 0
79111: PPUSH
79112: PPUSH
79113: PPUSH
79114: PPUSH
79115: PPUSH
79116: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
79117: LD_VAR 0 1
79121: NOT
79122: PUSH
79123: LD_VAR 0 2
79127: NOT
79128: OR
79129: PUSH
79130: LD_VAR 0 1
79134: PPUSH
79135: CALL_OW 314
79139: OR
79140: IFFALSE 79144
// exit ;
79142: GO 79585
// x := GetX ( enemy_unit ) ;
79144: LD_ADDR_VAR 0 7
79148: PUSH
79149: LD_VAR 0 2
79153: PPUSH
79154: CALL_OW 250
79158: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
79159: LD_ADDR_VAR 0 8
79163: PUSH
79164: LD_VAR 0 2
79168: PPUSH
79169: CALL_OW 251
79173: ST_TO_ADDR
// if not x or not y then
79174: LD_VAR 0 7
79178: NOT
79179: PUSH
79180: LD_VAR 0 8
79184: NOT
79185: OR
79186: IFFALSE 79190
// exit ;
79188: GO 79585
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
79190: LD_ADDR_VAR 0 6
79194: PUSH
79195: LD_VAR 0 7
79199: PPUSH
79200: LD_INT 0
79202: PPUSH
79203: LD_INT 4
79205: PPUSH
79206: CALL_OW 272
79210: PUSH
79211: LD_VAR 0 8
79215: PPUSH
79216: LD_INT 0
79218: PPUSH
79219: LD_INT 4
79221: PPUSH
79222: CALL_OW 273
79226: PUSH
79227: EMPTY
79228: LIST
79229: LIST
79230: PUSH
79231: LD_VAR 0 7
79235: PPUSH
79236: LD_INT 1
79238: PPUSH
79239: LD_INT 4
79241: PPUSH
79242: CALL_OW 272
79246: PUSH
79247: LD_VAR 0 8
79251: PPUSH
79252: LD_INT 1
79254: PPUSH
79255: LD_INT 4
79257: PPUSH
79258: CALL_OW 273
79262: PUSH
79263: EMPTY
79264: LIST
79265: LIST
79266: PUSH
79267: LD_VAR 0 7
79271: PPUSH
79272: LD_INT 2
79274: PPUSH
79275: LD_INT 4
79277: PPUSH
79278: CALL_OW 272
79282: PUSH
79283: LD_VAR 0 8
79287: PPUSH
79288: LD_INT 2
79290: PPUSH
79291: LD_INT 4
79293: PPUSH
79294: CALL_OW 273
79298: PUSH
79299: EMPTY
79300: LIST
79301: LIST
79302: PUSH
79303: LD_VAR 0 7
79307: PPUSH
79308: LD_INT 3
79310: PPUSH
79311: LD_INT 4
79313: PPUSH
79314: CALL_OW 272
79318: PUSH
79319: LD_VAR 0 8
79323: PPUSH
79324: LD_INT 3
79326: PPUSH
79327: LD_INT 4
79329: PPUSH
79330: CALL_OW 273
79334: PUSH
79335: EMPTY
79336: LIST
79337: LIST
79338: PUSH
79339: LD_VAR 0 7
79343: PPUSH
79344: LD_INT 4
79346: PPUSH
79347: LD_INT 4
79349: PPUSH
79350: CALL_OW 272
79354: PUSH
79355: LD_VAR 0 8
79359: PPUSH
79360: LD_INT 4
79362: PPUSH
79363: LD_INT 4
79365: PPUSH
79366: CALL_OW 273
79370: PUSH
79371: EMPTY
79372: LIST
79373: LIST
79374: PUSH
79375: LD_VAR 0 7
79379: PPUSH
79380: LD_INT 5
79382: PPUSH
79383: LD_INT 4
79385: PPUSH
79386: CALL_OW 272
79390: PUSH
79391: LD_VAR 0 8
79395: PPUSH
79396: LD_INT 5
79398: PPUSH
79399: LD_INT 4
79401: PPUSH
79402: CALL_OW 273
79406: PUSH
79407: EMPTY
79408: LIST
79409: LIST
79410: PUSH
79411: EMPTY
79412: LIST
79413: LIST
79414: LIST
79415: LIST
79416: LIST
79417: LIST
79418: ST_TO_ADDR
// for i = tmp downto 1 do
79419: LD_ADDR_VAR 0 4
79423: PUSH
79424: DOUBLE
79425: LD_VAR 0 6
79429: INC
79430: ST_TO_ADDR
79431: LD_INT 1
79433: PUSH
79434: FOR_DOWNTO
79435: IFFALSE 79536
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
79437: LD_VAR 0 6
79441: PUSH
79442: LD_VAR 0 4
79446: ARRAY
79447: PUSH
79448: LD_INT 1
79450: ARRAY
79451: PPUSH
79452: LD_VAR 0 6
79456: PUSH
79457: LD_VAR 0 4
79461: ARRAY
79462: PUSH
79463: LD_INT 2
79465: ARRAY
79466: PPUSH
79467: CALL_OW 488
79471: NOT
79472: PUSH
79473: LD_VAR 0 6
79477: PUSH
79478: LD_VAR 0 4
79482: ARRAY
79483: PUSH
79484: LD_INT 1
79486: ARRAY
79487: PPUSH
79488: LD_VAR 0 6
79492: PUSH
79493: LD_VAR 0 4
79497: ARRAY
79498: PUSH
79499: LD_INT 2
79501: ARRAY
79502: PPUSH
79503: CALL_OW 428
79507: PUSH
79508: LD_INT 0
79510: NONEQUAL
79511: OR
79512: IFFALSE 79534
// tmp := Delete ( tmp , i ) ;
79514: LD_ADDR_VAR 0 6
79518: PUSH
79519: LD_VAR 0 6
79523: PPUSH
79524: LD_VAR 0 4
79528: PPUSH
79529: CALL_OW 3
79533: ST_TO_ADDR
79534: GO 79434
79536: POP
79537: POP
// j := GetClosestHex ( unit , tmp ) ;
79538: LD_ADDR_VAR 0 5
79542: PUSH
79543: LD_VAR 0 1
79547: PPUSH
79548: LD_VAR 0 6
79552: PPUSH
79553: CALL 78838 0 2
79557: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
79558: LD_VAR 0 1
79562: PPUSH
79563: LD_VAR 0 5
79567: PUSH
79568: LD_INT 1
79570: ARRAY
79571: PPUSH
79572: LD_VAR 0 5
79576: PUSH
79577: LD_INT 2
79579: ARRAY
79580: PPUSH
79581: CALL_OW 111
// end ;
79585: LD_VAR 0 3
79589: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
79590: LD_INT 0
79592: PPUSH
79593: PPUSH
79594: PPUSH
// uc_side = 0 ;
79595: LD_ADDR_OWVAR 20
79599: PUSH
79600: LD_INT 0
79602: ST_TO_ADDR
// uc_nation = 0 ;
79603: LD_ADDR_OWVAR 21
79607: PUSH
79608: LD_INT 0
79610: ST_TO_ADDR
// InitHc_All ( ) ;
79611: CALL_OW 584
// InitVc ;
79615: CALL_OW 20
// if mastodonts then
79619: LD_VAR 0 6
79623: IFFALSE 79690
// for i = 1 to mastodonts do
79625: LD_ADDR_VAR 0 11
79629: PUSH
79630: DOUBLE
79631: LD_INT 1
79633: DEC
79634: ST_TO_ADDR
79635: LD_VAR 0 6
79639: PUSH
79640: FOR_TO
79641: IFFALSE 79688
// begin vc_chassis := 31 ;
79643: LD_ADDR_OWVAR 37
79647: PUSH
79648: LD_INT 31
79650: ST_TO_ADDR
// vc_control := control_rider ;
79651: LD_ADDR_OWVAR 38
79655: PUSH
79656: LD_INT 4
79658: ST_TO_ADDR
// animal := CreateVehicle ;
79659: LD_ADDR_VAR 0 12
79663: PUSH
79664: CALL_OW 45
79668: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79669: LD_VAR 0 12
79673: PPUSH
79674: LD_VAR 0 8
79678: PPUSH
79679: LD_INT 0
79681: PPUSH
79682: CALL 81878 0 3
// end ;
79686: GO 79640
79688: POP
79689: POP
// if horses then
79690: LD_VAR 0 5
79694: IFFALSE 79761
// for i = 1 to horses do
79696: LD_ADDR_VAR 0 11
79700: PUSH
79701: DOUBLE
79702: LD_INT 1
79704: DEC
79705: ST_TO_ADDR
79706: LD_VAR 0 5
79710: PUSH
79711: FOR_TO
79712: IFFALSE 79759
// begin hc_class := 21 ;
79714: LD_ADDR_OWVAR 28
79718: PUSH
79719: LD_INT 21
79721: ST_TO_ADDR
// hc_gallery :=  ;
79722: LD_ADDR_OWVAR 33
79726: PUSH
79727: LD_STRING 
79729: ST_TO_ADDR
// animal := CreateHuman ;
79730: LD_ADDR_VAR 0 12
79734: PUSH
79735: CALL_OW 44
79739: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79740: LD_VAR 0 12
79744: PPUSH
79745: LD_VAR 0 8
79749: PPUSH
79750: LD_INT 0
79752: PPUSH
79753: CALL 81878 0 3
// end ;
79757: GO 79711
79759: POP
79760: POP
// if birds then
79761: LD_VAR 0 1
79765: IFFALSE 79832
// for i = 1 to birds do
79767: LD_ADDR_VAR 0 11
79771: PUSH
79772: DOUBLE
79773: LD_INT 1
79775: DEC
79776: ST_TO_ADDR
79777: LD_VAR 0 1
79781: PUSH
79782: FOR_TO
79783: IFFALSE 79830
// begin hc_class = 18 ;
79785: LD_ADDR_OWVAR 28
79789: PUSH
79790: LD_INT 18
79792: ST_TO_ADDR
// hc_gallery =  ;
79793: LD_ADDR_OWVAR 33
79797: PUSH
79798: LD_STRING 
79800: ST_TO_ADDR
// animal := CreateHuman ;
79801: LD_ADDR_VAR 0 12
79805: PUSH
79806: CALL_OW 44
79810: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79811: LD_VAR 0 12
79815: PPUSH
79816: LD_VAR 0 8
79820: PPUSH
79821: LD_INT 0
79823: PPUSH
79824: CALL 81878 0 3
// end ;
79828: GO 79782
79830: POP
79831: POP
// if tigers then
79832: LD_VAR 0 2
79836: IFFALSE 79920
// for i = 1 to tigers do
79838: LD_ADDR_VAR 0 11
79842: PUSH
79843: DOUBLE
79844: LD_INT 1
79846: DEC
79847: ST_TO_ADDR
79848: LD_VAR 0 2
79852: PUSH
79853: FOR_TO
79854: IFFALSE 79918
// begin hc_class = class_tiger ;
79856: LD_ADDR_OWVAR 28
79860: PUSH
79861: LD_INT 14
79863: ST_TO_ADDR
// hc_gallery =  ;
79864: LD_ADDR_OWVAR 33
79868: PUSH
79869: LD_STRING 
79871: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
79872: LD_ADDR_OWVAR 35
79876: PUSH
79877: LD_INT 7
79879: NEG
79880: PPUSH
79881: LD_INT 7
79883: PPUSH
79884: CALL_OW 12
79888: ST_TO_ADDR
// animal := CreateHuman ;
79889: LD_ADDR_VAR 0 12
79893: PUSH
79894: CALL_OW 44
79898: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
79899: LD_VAR 0 12
79903: PPUSH
79904: LD_VAR 0 8
79908: PPUSH
79909: LD_INT 0
79911: PPUSH
79912: CALL 81878 0 3
// end ;
79916: GO 79853
79918: POP
79919: POP
// if apemans then
79920: LD_VAR 0 3
79924: IFFALSE 80047
// for i = 1 to apemans do
79926: LD_ADDR_VAR 0 11
79930: PUSH
79931: DOUBLE
79932: LD_INT 1
79934: DEC
79935: ST_TO_ADDR
79936: LD_VAR 0 3
79940: PUSH
79941: FOR_TO
79942: IFFALSE 80045
// begin hc_class = class_apeman ;
79944: LD_ADDR_OWVAR 28
79948: PUSH
79949: LD_INT 12
79951: ST_TO_ADDR
// hc_gallery =  ;
79952: LD_ADDR_OWVAR 33
79956: PUSH
79957: LD_STRING 
79959: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
79960: LD_ADDR_OWVAR 35
79964: PUSH
79965: LD_INT 5
79967: NEG
79968: PPUSH
79969: LD_INT 5
79971: PPUSH
79972: CALL_OW 12
79976: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
79977: LD_ADDR_OWVAR 31
79981: PUSH
79982: LD_INT 1
79984: PPUSH
79985: LD_INT 3
79987: PPUSH
79988: CALL_OW 12
79992: PUSH
79993: LD_INT 1
79995: PPUSH
79996: LD_INT 3
79998: PPUSH
79999: CALL_OW 12
80003: PUSH
80004: LD_INT 0
80006: PUSH
80007: LD_INT 0
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: LIST
80014: LIST
80015: ST_TO_ADDR
// animal := CreateHuman ;
80016: LD_ADDR_VAR 0 12
80020: PUSH
80021: CALL_OW 44
80025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80026: LD_VAR 0 12
80030: PPUSH
80031: LD_VAR 0 8
80035: PPUSH
80036: LD_INT 0
80038: PPUSH
80039: CALL 81878 0 3
// end ;
80043: GO 79941
80045: POP
80046: POP
// if enchidnas then
80047: LD_VAR 0 4
80051: IFFALSE 80118
// for i = 1 to enchidnas do
80053: LD_ADDR_VAR 0 11
80057: PUSH
80058: DOUBLE
80059: LD_INT 1
80061: DEC
80062: ST_TO_ADDR
80063: LD_VAR 0 4
80067: PUSH
80068: FOR_TO
80069: IFFALSE 80116
// begin hc_class = 13 ;
80071: LD_ADDR_OWVAR 28
80075: PUSH
80076: LD_INT 13
80078: ST_TO_ADDR
// hc_gallery =  ;
80079: LD_ADDR_OWVAR 33
80083: PUSH
80084: LD_STRING 
80086: ST_TO_ADDR
// animal := CreateHuman ;
80087: LD_ADDR_VAR 0 12
80091: PUSH
80092: CALL_OW 44
80096: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80097: LD_VAR 0 12
80101: PPUSH
80102: LD_VAR 0 8
80106: PPUSH
80107: LD_INT 0
80109: PPUSH
80110: CALL 81878 0 3
// end ;
80114: GO 80068
80116: POP
80117: POP
// if fishes then
80118: LD_VAR 0 7
80122: IFFALSE 80189
// for i = 1 to fishes do
80124: LD_ADDR_VAR 0 11
80128: PUSH
80129: DOUBLE
80130: LD_INT 1
80132: DEC
80133: ST_TO_ADDR
80134: LD_VAR 0 7
80138: PUSH
80139: FOR_TO
80140: IFFALSE 80187
// begin hc_class = 20 ;
80142: LD_ADDR_OWVAR 28
80146: PUSH
80147: LD_INT 20
80149: ST_TO_ADDR
// hc_gallery =  ;
80150: LD_ADDR_OWVAR 33
80154: PUSH
80155: LD_STRING 
80157: ST_TO_ADDR
// animal := CreateHuman ;
80158: LD_ADDR_VAR 0 12
80162: PUSH
80163: CALL_OW 44
80167: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80168: LD_VAR 0 12
80172: PPUSH
80173: LD_VAR 0 9
80177: PPUSH
80178: LD_INT 0
80180: PPUSH
80181: CALL 81878 0 3
// end ;
80185: GO 80139
80187: POP
80188: POP
// end ;
80189: LD_VAR 0 10
80193: RET
// export function WantHeal ( sci , unit ) ; begin
80194: LD_INT 0
80196: PPUSH
// if GetTaskList ( sci ) > 0 then
80197: LD_VAR 0 1
80201: PPUSH
80202: CALL_OW 437
80206: PUSH
80207: LD_INT 0
80209: GREATER
80210: IFFALSE 80280
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80212: LD_VAR 0 1
80216: PPUSH
80217: CALL_OW 437
80221: PUSH
80222: LD_INT 1
80224: ARRAY
80225: PUSH
80226: LD_INT 1
80228: ARRAY
80229: PUSH
80230: LD_STRING l
80232: EQUAL
80233: PUSH
80234: LD_VAR 0 1
80238: PPUSH
80239: CALL_OW 437
80243: PUSH
80244: LD_INT 1
80246: ARRAY
80247: PUSH
80248: LD_INT 4
80250: ARRAY
80251: PUSH
80252: LD_VAR 0 2
80256: EQUAL
80257: AND
80258: IFFALSE 80270
// result := true else
80260: LD_ADDR_VAR 0 3
80264: PUSH
80265: LD_INT 1
80267: ST_TO_ADDR
80268: GO 80278
// result := false ;
80270: LD_ADDR_VAR 0 3
80274: PUSH
80275: LD_INT 0
80277: ST_TO_ADDR
// end else
80278: GO 80288
// result := false ;
80280: LD_ADDR_VAR 0 3
80284: PUSH
80285: LD_INT 0
80287: ST_TO_ADDR
// end ;
80288: LD_VAR 0 3
80292: RET
// export function HealTarget ( sci ) ; begin
80293: LD_INT 0
80295: PPUSH
// if not sci then
80296: LD_VAR 0 1
80300: NOT
80301: IFFALSE 80305
// exit ;
80303: GO 80370
// result := 0 ;
80305: LD_ADDR_VAR 0 2
80309: PUSH
80310: LD_INT 0
80312: ST_TO_ADDR
// if GetTaskList ( sci ) then
80313: LD_VAR 0 1
80317: PPUSH
80318: CALL_OW 437
80322: IFFALSE 80370
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
80324: LD_VAR 0 1
80328: PPUSH
80329: CALL_OW 437
80333: PUSH
80334: LD_INT 1
80336: ARRAY
80337: PUSH
80338: LD_INT 1
80340: ARRAY
80341: PUSH
80342: LD_STRING l
80344: EQUAL
80345: IFFALSE 80370
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
80347: LD_ADDR_VAR 0 2
80351: PUSH
80352: LD_VAR 0 1
80356: PPUSH
80357: CALL_OW 437
80361: PUSH
80362: LD_INT 1
80364: ARRAY
80365: PUSH
80366: LD_INT 4
80368: ARRAY
80369: ST_TO_ADDR
// end ;
80370: LD_VAR 0 2
80374: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
80375: LD_INT 0
80377: PPUSH
80378: PPUSH
80379: PPUSH
80380: PPUSH
// if not base_units then
80381: LD_VAR 0 1
80385: NOT
80386: IFFALSE 80390
// exit ;
80388: GO 80477
// result := false ;
80390: LD_ADDR_VAR 0 2
80394: PUSH
80395: LD_INT 0
80397: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
80398: LD_ADDR_VAR 0 5
80402: PUSH
80403: LD_VAR 0 1
80407: PPUSH
80408: LD_INT 21
80410: PUSH
80411: LD_INT 3
80413: PUSH
80414: EMPTY
80415: LIST
80416: LIST
80417: PPUSH
80418: CALL_OW 72
80422: ST_TO_ADDR
// if not tmp then
80423: LD_VAR 0 5
80427: NOT
80428: IFFALSE 80432
// exit ;
80430: GO 80477
// for i in tmp do
80432: LD_ADDR_VAR 0 3
80436: PUSH
80437: LD_VAR 0 5
80441: PUSH
80442: FOR_IN
80443: IFFALSE 80475
// begin result := EnemyInRange ( i , 22 ) ;
80445: LD_ADDR_VAR 0 2
80449: PUSH
80450: LD_VAR 0 3
80454: PPUSH
80455: LD_INT 22
80457: PPUSH
80458: CALL 78713 0 2
80462: ST_TO_ADDR
// if result then
80463: LD_VAR 0 2
80467: IFFALSE 80473
// exit ;
80469: POP
80470: POP
80471: GO 80477
// end ;
80473: GO 80442
80475: POP
80476: POP
// end ;
80477: LD_VAR 0 2
80481: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
80482: LD_INT 0
80484: PPUSH
80485: PPUSH
// if not units then
80486: LD_VAR 0 1
80490: NOT
80491: IFFALSE 80495
// exit ;
80493: GO 80565
// result := [ ] ;
80495: LD_ADDR_VAR 0 3
80499: PUSH
80500: EMPTY
80501: ST_TO_ADDR
// for i in units do
80502: LD_ADDR_VAR 0 4
80506: PUSH
80507: LD_VAR 0 1
80511: PUSH
80512: FOR_IN
80513: IFFALSE 80563
// if GetTag ( i ) = tag then
80515: LD_VAR 0 4
80519: PPUSH
80520: CALL_OW 110
80524: PUSH
80525: LD_VAR 0 2
80529: EQUAL
80530: IFFALSE 80561
// result := Insert ( result , result + 1 , i ) ;
80532: LD_ADDR_VAR 0 3
80536: PUSH
80537: LD_VAR 0 3
80541: PPUSH
80542: LD_VAR 0 3
80546: PUSH
80547: LD_INT 1
80549: PLUS
80550: PPUSH
80551: LD_VAR 0 4
80555: PPUSH
80556: CALL_OW 2
80560: ST_TO_ADDR
80561: GO 80512
80563: POP
80564: POP
// end ;
80565: LD_VAR 0 3
80569: RET
// export function IsDriver ( un ) ; begin
80570: LD_INT 0
80572: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
80573: LD_ADDR_VAR 0 2
80577: PUSH
80578: LD_VAR 0 1
80582: PUSH
80583: LD_INT 55
80585: PUSH
80586: EMPTY
80587: LIST
80588: PPUSH
80589: CALL_OW 69
80593: IN
80594: ST_TO_ADDR
// end ;
80595: LD_VAR 0 2
80599: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
80600: LD_INT 0
80602: PPUSH
80603: PPUSH
// list := [ ] ;
80604: LD_ADDR_VAR 0 5
80608: PUSH
80609: EMPTY
80610: ST_TO_ADDR
// case d of 0 :
80611: LD_VAR 0 3
80615: PUSH
80616: LD_INT 0
80618: DOUBLE
80619: EQUAL
80620: IFTRUE 80624
80622: GO 80757
80624: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
80625: LD_ADDR_VAR 0 5
80629: PUSH
80630: LD_VAR 0 1
80634: PUSH
80635: LD_INT 4
80637: MINUS
80638: PUSH
80639: LD_VAR 0 2
80643: PUSH
80644: LD_INT 4
80646: MINUS
80647: PUSH
80648: LD_INT 2
80650: PUSH
80651: EMPTY
80652: LIST
80653: LIST
80654: LIST
80655: PUSH
80656: LD_VAR 0 1
80660: PUSH
80661: LD_INT 3
80663: MINUS
80664: PUSH
80665: LD_VAR 0 2
80669: PUSH
80670: LD_INT 1
80672: PUSH
80673: EMPTY
80674: LIST
80675: LIST
80676: LIST
80677: PUSH
80678: LD_VAR 0 1
80682: PUSH
80683: LD_INT 4
80685: PLUS
80686: PUSH
80687: LD_VAR 0 2
80691: PUSH
80692: LD_INT 4
80694: PUSH
80695: EMPTY
80696: LIST
80697: LIST
80698: LIST
80699: PUSH
80700: LD_VAR 0 1
80704: PUSH
80705: LD_INT 3
80707: PLUS
80708: PUSH
80709: LD_VAR 0 2
80713: PUSH
80714: LD_INT 3
80716: PLUS
80717: PUSH
80718: LD_INT 5
80720: PUSH
80721: EMPTY
80722: LIST
80723: LIST
80724: LIST
80725: PUSH
80726: LD_VAR 0 1
80730: PUSH
80731: LD_VAR 0 2
80735: PUSH
80736: LD_INT 4
80738: PLUS
80739: PUSH
80740: LD_INT 0
80742: PUSH
80743: EMPTY
80744: LIST
80745: LIST
80746: LIST
80747: PUSH
80748: EMPTY
80749: LIST
80750: LIST
80751: LIST
80752: LIST
80753: LIST
80754: ST_TO_ADDR
// end ; 1 :
80755: GO 81455
80757: LD_INT 1
80759: DOUBLE
80760: EQUAL
80761: IFTRUE 80765
80763: GO 80898
80765: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
80766: LD_ADDR_VAR 0 5
80770: PUSH
80771: LD_VAR 0 1
80775: PUSH
80776: LD_VAR 0 2
80780: PUSH
80781: LD_INT 4
80783: MINUS
80784: PUSH
80785: LD_INT 3
80787: PUSH
80788: EMPTY
80789: LIST
80790: LIST
80791: LIST
80792: PUSH
80793: LD_VAR 0 1
80797: PUSH
80798: LD_INT 3
80800: MINUS
80801: PUSH
80802: LD_VAR 0 2
80806: PUSH
80807: LD_INT 3
80809: MINUS
80810: PUSH
80811: LD_INT 2
80813: PUSH
80814: EMPTY
80815: LIST
80816: LIST
80817: LIST
80818: PUSH
80819: LD_VAR 0 1
80823: PUSH
80824: LD_INT 4
80826: MINUS
80827: PUSH
80828: LD_VAR 0 2
80832: PUSH
80833: LD_INT 1
80835: PUSH
80836: EMPTY
80837: LIST
80838: LIST
80839: LIST
80840: PUSH
80841: LD_VAR 0 1
80845: PUSH
80846: LD_VAR 0 2
80850: PUSH
80851: LD_INT 3
80853: PLUS
80854: PUSH
80855: LD_INT 0
80857: PUSH
80858: EMPTY
80859: LIST
80860: LIST
80861: LIST
80862: PUSH
80863: LD_VAR 0 1
80867: PUSH
80868: LD_INT 4
80870: PLUS
80871: PUSH
80872: LD_VAR 0 2
80876: PUSH
80877: LD_INT 4
80879: PLUS
80880: PUSH
80881: LD_INT 5
80883: PUSH
80884: EMPTY
80885: LIST
80886: LIST
80887: LIST
80888: PUSH
80889: EMPTY
80890: LIST
80891: LIST
80892: LIST
80893: LIST
80894: LIST
80895: ST_TO_ADDR
// end ; 2 :
80896: GO 81455
80898: LD_INT 2
80900: DOUBLE
80901: EQUAL
80902: IFTRUE 80906
80904: GO 81035
80906: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
80907: LD_ADDR_VAR 0 5
80911: PUSH
80912: LD_VAR 0 1
80916: PUSH
80917: LD_VAR 0 2
80921: PUSH
80922: LD_INT 3
80924: MINUS
80925: PUSH
80926: LD_INT 3
80928: PUSH
80929: EMPTY
80930: LIST
80931: LIST
80932: LIST
80933: PUSH
80934: LD_VAR 0 1
80938: PUSH
80939: LD_INT 4
80941: PLUS
80942: PUSH
80943: LD_VAR 0 2
80947: PUSH
80948: LD_INT 4
80950: PUSH
80951: EMPTY
80952: LIST
80953: LIST
80954: LIST
80955: PUSH
80956: LD_VAR 0 1
80960: PUSH
80961: LD_VAR 0 2
80965: PUSH
80966: LD_INT 4
80968: PLUS
80969: PUSH
80970: LD_INT 0
80972: PUSH
80973: EMPTY
80974: LIST
80975: LIST
80976: LIST
80977: PUSH
80978: LD_VAR 0 1
80982: PUSH
80983: LD_INT 3
80985: MINUS
80986: PUSH
80987: LD_VAR 0 2
80991: PUSH
80992: LD_INT 1
80994: PUSH
80995: EMPTY
80996: LIST
80997: LIST
80998: LIST
80999: PUSH
81000: LD_VAR 0 1
81004: PUSH
81005: LD_INT 4
81007: MINUS
81008: PUSH
81009: LD_VAR 0 2
81013: PUSH
81014: LD_INT 4
81016: MINUS
81017: PUSH
81018: LD_INT 2
81020: PUSH
81021: EMPTY
81022: LIST
81023: LIST
81024: LIST
81025: PUSH
81026: EMPTY
81027: LIST
81028: LIST
81029: LIST
81030: LIST
81031: LIST
81032: ST_TO_ADDR
// end ; 3 :
81033: GO 81455
81035: LD_INT 3
81037: DOUBLE
81038: EQUAL
81039: IFTRUE 81043
81041: GO 81176
81043: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
81044: LD_ADDR_VAR 0 5
81048: PUSH
81049: LD_VAR 0 1
81053: PUSH
81054: LD_INT 3
81056: PLUS
81057: PUSH
81058: LD_VAR 0 2
81062: PUSH
81063: LD_INT 4
81065: PUSH
81066: EMPTY
81067: LIST
81068: LIST
81069: LIST
81070: PUSH
81071: LD_VAR 0 1
81075: PUSH
81076: LD_INT 4
81078: PLUS
81079: PUSH
81080: LD_VAR 0 2
81084: PUSH
81085: LD_INT 4
81087: PLUS
81088: PUSH
81089: LD_INT 5
81091: PUSH
81092: EMPTY
81093: LIST
81094: LIST
81095: LIST
81096: PUSH
81097: LD_VAR 0 1
81101: PUSH
81102: LD_INT 4
81104: MINUS
81105: PUSH
81106: LD_VAR 0 2
81110: PUSH
81111: LD_INT 1
81113: PUSH
81114: EMPTY
81115: LIST
81116: LIST
81117: LIST
81118: PUSH
81119: LD_VAR 0 1
81123: PUSH
81124: LD_VAR 0 2
81128: PUSH
81129: LD_INT 4
81131: MINUS
81132: PUSH
81133: LD_INT 3
81135: PUSH
81136: EMPTY
81137: LIST
81138: LIST
81139: LIST
81140: PUSH
81141: LD_VAR 0 1
81145: PUSH
81146: LD_INT 3
81148: MINUS
81149: PUSH
81150: LD_VAR 0 2
81154: PUSH
81155: LD_INT 3
81157: MINUS
81158: PUSH
81159: LD_INT 2
81161: PUSH
81162: EMPTY
81163: LIST
81164: LIST
81165: LIST
81166: PUSH
81167: EMPTY
81168: LIST
81169: LIST
81170: LIST
81171: LIST
81172: LIST
81173: ST_TO_ADDR
// end ; 4 :
81174: GO 81455
81176: LD_INT 4
81178: DOUBLE
81179: EQUAL
81180: IFTRUE 81184
81182: GO 81317
81184: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
81185: LD_ADDR_VAR 0 5
81189: PUSH
81190: LD_VAR 0 1
81194: PUSH
81195: LD_VAR 0 2
81199: PUSH
81200: LD_INT 4
81202: PLUS
81203: PUSH
81204: LD_INT 0
81206: PUSH
81207: EMPTY
81208: LIST
81209: LIST
81210: LIST
81211: PUSH
81212: LD_VAR 0 1
81216: PUSH
81217: LD_INT 3
81219: PLUS
81220: PUSH
81221: LD_VAR 0 2
81225: PUSH
81226: LD_INT 3
81228: PLUS
81229: PUSH
81230: LD_INT 5
81232: PUSH
81233: EMPTY
81234: LIST
81235: LIST
81236: LIST
81237: PUSH
81238: LD_VAR 0 1
81242: PUSH
81243: LD_INT 4
81245: PLUS
81246: PUSH
81247: LD_VAR 0 2
81251: PUSH
81252: LD_INT 4
81254: PUSH
81255: EMPTY
81256: LIST
81257: LIST
81258: LIST
81259: PUSH
81260: LD_VAR 0 1
81264: PUSH
81265: LD_VAR 0 2
81269: PUSH
81270: LD_INT 3
81272: MINUS
81273: PUSH
81274: LD_INT 3
81276: PUSH
81277: EMPTY
81278: LIST
81279: LIST
81280: LIST
81281: PUSH
81282: LD_VAR 0 1
81286: PUSH
81287: LD_INT 4
81289: MINUS
81290: PUSH
81291: LD_VAR 0 2
81295: PUSH
81296: LD_INT 4
81298: MINUS
81299: PUSH
81300: LD_INT 2
81302: PUSH
81303: EMPTY
81304: LIST
81305: LIST
81306: LIST
81307: PUSH
81308: EMPTY
81309: LIST
81310: LIST
81311: LIST
81312: LIST
81313: LIST
81314: ST_TO_ADDR
// end ; 5 :
81315: GO 81455
81317: LD_INT 5
81319: DOUBLE
81320: EQUAL
81321: IFTRUE 81325
81323: GO 81454
81325: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
81326: LD_ADDR_VAR 0 5
81330: PUSH
81331: LD_VAR 0 1
81335: PUSH
81336: LD_INT 4
81338: MINUS
81339: PUSH
81340: LD_VAR 0 2
81344: PUSH
81345: LD_INT 1
81347: PUSH
81348: EMPTY
81349: LIST
81350: LIST
81351: LIST
81352: PUSH
81353: LD_VAR 0 1
81357: PUSH
81358: LD_VAR 0 2
81362: PUSH
81363: LD_INT 4
81365: MINUS
81366: PUSH
81367: LD_INT 3
81369: PUSH
81370: EMPTY
81371: LIST
81372: LIST
81373: LIST
81374: PUSH
81375: LD_VAR 0 1
81379: PUSH
81380: LD_INT 4
81382: PLUS
81383: PUSH
81384: LD_VAR 0 2
81388: PUSH
81389: LD_INT 4
81391: PLUS
81392: PUSH
81393: LD_INT 5
81395: PUSH
81396: EMPTY
81397: LIST
81398: LIST
81399: LIST
81400: PUSH
81401: LD_VAR 0 1
81405: PUSH
81406: LD_INT 3
81408: PLUS
81409: PUSH
81410: LD_VAR 0 2
81414: PUSH
81415: LD_INT 4
81417: PUSH
81418: EMPTY
81419: LIST
81420: LIST
81421: LIST
81422: PUSH
81423: LD_VAR 0 1
81427: PUSH
81428: LD_VAR 0 2
81432: PUSH
81433: LD_INT 3
81435: PLUS
81436: PUSH
81437: LD_INT 0
81439: PUSH
81440: EMPTY
81441: LIST
81442: LIST
81443: LIST
81444: PUSH
81445: EMPTY
81446: LIST
81447: LIST
81448: LIST
81449: LIST
81450: LIST
81451: ST_TO_ADDR
// end ; end ;
81452: GO 81455
81454: POP
// result := list ;
81455: LD_ADDR_VAR 0 4
81459: PUSH
81460: LD_VAR 0 5
81464: ST_TO_ADDR
// end ;
81465: LD_VAR 0 4
81469: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
81470: LD_INT 0
81472: PPUSH
81473: PPUSH
81474: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
81475: LD_VAR 0 1
81479: NOT
81480: PUSH
81481: LD_VAR 0 2
81485: PUSH
81486: LD_INT 1
81488: PUSH
81489: LD_INT 2
81491: PUSH
81492: LD_INT 3
81494: PUSH
81495: LD_INT 4
81497: PUSH
81498: EMPTY
81499: LIST
81500: LIST
81501: LIST
81502: LIST
81503: IN
81504: NOT
81505: OR
81506: IFFALSE 81510
// exit ;
81508: GO 81602
// tmp := [ ] ;
81510: LD_ADDR_VAR 0 5
81514: PUSH
81515: EMPTY
81516: ST_TO_ADDR
// for i in units do
81517: LD_ADDR_VAR 0 4
81521: PUSH
81522: LD_VAR 0 1
81526: PUSH
81527: FOR_IN
81528: IFFALSE 81571
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
81530: LD_ADDR_VAR 0 5
81534: PUSH
81535: LD_VAR 0 5
81539: PPUSH
81540: LD_VAR 0 5
81544: PUSH
81545: LD_INT 1
81547: PLUS
81548: PPUSH
81549: LD_VAR 0 4
81553: PPUSH
81554: LD_VAR 0 2
81558: PPUSH
81559: CALL_OW 259
81563: PPUSH
81564: CALL_OW 2
81568: ST_TO_ADDR
81569: GO 81527
81571: POP
81572: POP
// if not tmp then
81573: LD_VAR 0 5
81577: NOT
81578: IFFALSE 81582
// exit ;
81580: GO 81602
// result := SortListByListDesc ( units , tmp ) ;
81582: LD_ADDR_VAR 0 3
81586: PUSH
81587: LD_VAR 0 1
81591: PPUSH
81592: LD_VAR 0 5
81596: PPUSH
81597: CALL_OW 77
81601: ST_TO_ADDR
// end ;
81602: LD_VAR 0 3
81606: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
81607: LD_INT 0
81609: PPUSH
81610: PPUSH
81611: PPUSH
// result := false ;
81612: LD_ADDR_VAR 0 3
81616: PUSH
81617: LD_INT 0
81619: ST_TO_ADDR
// x := GetX ( building ) ;
81620: LD_ADDR_VAR 0 4
81624: PUSH
81625: LD_VAR 0 2
81629: PPUSH
81630: CALL_OW 250
81634: ST_TO_ADDR
// y := GetY ( building ) ;
81635: LD_ADDR_VAR 0 5
81639: PUSH
81640: LD_VAR 0 2
81644: PPUSH
81645: CALL_OW 251
81649: ST_TO_ADDR
// if not building or not x or not y then
81650: LD_VAR 0 2
81654: NOT
81655: PUSH
81656: LD_VAR 0 4
81660: NOT
81661: OR
81662: PUSH
81663: LD_VAR 0 5
81667: NOT
81668: OR
81669: IFFALSE 81673
// exit ;
81671: GO 81765
// if GetTaskList ( unit ) then
81673: LD_VAR 0 1
81677: PPUSH
81678: CALL_OW 437
81682: IFFALSE 81765
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81684: LD_STRING e
81686: PUSH
81687: LD_VAR 0 1
81691: PPUSH
81692: CALL_OW 437
81696: PUSH
81697: LD_INT 1
81699: ARRAY
81700: PUSH
81701: LD_INT 1
81703: ARRAY
81704: EQUAL
81705: PUSH
81706: LD_VAR 0 4
81710: PUSH
81711: LD_VAR 0 1
81715: PPUSH
81716: CALL_OW 437
81720: PUSH
81721: LD_INT 1
81723: ARRAY
81724: PUSH
81725: LD_INT 2
81727: ARRAY
81728: EQUAL
81729: AND
81730: PUSH
81731: LD_VAR 0 5
81735: PUSH
81736: LD_VAR 0 1
81740: PPUSH
81741: CALL_OW 437
81745: PUSH
81746: LD_INT 1
81748: ARRAY
81749: PUSH
81750: LD_INT 3
81752: ARRAY
81753: EQUAL
81754: AND
81755: IFFALSE 81765
// result := true end ;
81757: LD_ADDR_VAR 0 3
81761: PUSH
81762: LD_INT 1
81764: ST_TO_ADDR
// end ;
81765: LD_VAR 0 3
81769: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
81770: LD_INT 0
81772: PPUSH
// result := false ;
81773: LD_ADDR_VAR 0 4
81777: PUSH
81778: LD_INT 0
81780: ST_TO_ADDR
// if GetTaskList ( unit ) then
81781: LD_VAR 0 1
81785: PPUSH
81786: CALL_OW 437
81790: IFFALSE 81873
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
81792: LD_STRING M
81794: PUSH
81795: LD_VAR 0 1
81799: PPUSH
81800: CALL_OW 437
81804: PUSH
81805: LD_INT 1
81807: ARRAY
81808: PUSH
81809: LD_INT 1
81811: ARRAY
81812: EQUAL
81813: PUSH
81814: LD_VAR 0 2
81818: PUSH
81819: LD_VAR 0 1
81823: PPUSH
81824: CALL_OW 437
81828: PUSH
81829: LD_INT 1
81831: ARRAY
81832: PUSH
81833: LD_INT 2
81835: ARRAY
81836: EQUAL
81837: AND
81838: PUSH
81839: LD_VAR 0 3
81843: PUSH
81844: LD_VAR 0 1
81848: PPUSH
81849: CALL_OW 437
81853: PUSH
81854: LD_INT 1
81856: ARRAY
81857: PUSH
81858: LD_INT 3
81860: ARRAY
81861: EQUAL
81862: AND
81863: IFFALSE 81873
// result := true ;
81865: LD_ADDR_VAR 0 4
81869: PUSH
81870: LD_INT 1
81872: ST_TO_ADDR
// end ; end ;
81873: LD_VAR 0 4
81877: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
81878: LD_INT 0
81880: PPUSH
81881: PPUSH
81882: PPUSH
81883: PPUSH
// if not unit or not area then
81884: LD_VAR 0 1
81888: NOT
81889: PUSH
81890: LD_VAR 0 2
81894: NOT
81895: OR
81896: IFFALSE 81900
// exit ;
81898: GO 82064
// tmp := AreaToList ( area , i ) ;
81900: LD_ADDR_VAR 0 6
81904: PUSH
81905: LD_VAR 0 2
81909: PPUSH
81910: LD_VAR 0 5
81914: PPUSH
81915: CALL_OW 517
81919: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
81920: LD_ADDR_VAR 0 5
81924: PUSH
81925: DOUBLE
81926: LD_INT 1
81928: DEC
81929: ST_TO_ADDR
81930: LD_VAR 0 6
81934: PUSH
81935: LD_INT 1
81937: ARRAY
81938: PUSH
81939: FOR_TO
81940: IFFALSE 82062
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
81942: LD_ADDR_VAR 0 7
81946: PUSH
81947: LD_VAR 0 6
81951: PUSH
81952: LD_INT 1
81954: ARRAY
81955: PUSH
81956: LD_VAR 0 5
81960: ARRAY
81961: PUSH
81962: LD_VAR 0 6
81966: PUSH
81967: LD_INT 2
81969: ARRAY
81970: PUSH
81971: LD_VAR 0 5
81975: ARRAY
81976: PUSH
81977: EMPTY
81978: LIST
81979: LIST
81980: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
81981: LD_VAR 0 7
81985: PUSH
81986: LD_INT 1
81988: ARRAY
81989: PPUSH
81990: LD_VAR 0 7
81994: PUSH
81995: LD_INT 2
81997: ARRAY
81998: PPUSH
81999: CALL_OW 428
82003: PUSH
82004: LD_INT 0
82006: EQUAL
82007: IFFALSE 82060
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
82009: LD_VAR 0 1
82013: PPUSH
82014: LD_VAR 0 7
82018: PUSH
82019: LD_INT 1
82021: ARRAY
82022: PPUSH
82023: LD_VAR 0 7
82027: PUSH
82028: LD_INT 2
82030: ARRAY
82031: PPUSH
82032: LD_VAR 0 3
82036: PPUSH
82037: CALL_OW 48
// result := IsPlaced ( unit ) ;
82041: LD_ADDR_VAR 0 4
82045: PUSH
82046: LD_VAR 0 1
82050: PPUSH
82051: CALL_OW 305
82055: ST_TO_ADDR
// exit ;
82056: POP
82057: POP
82058: GO 82064
// end ; end ;
82060: GO 81939
82062: POP
82063: POP
// end ;
82064: LD_VAR 0 4
82068: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
82069: LD_INT 0
82071: PPUSH
82072: PPUSH
82073: PPUSH
// if not side or side > 8 then
82074: LD_VAR 0 1
82078: NOT
82079: PUSH
82080: LD_VAR 0 1
82084: PUSH
82085: LD_INT 8
82087: GREATER
82088: OR
82089: IFFALSE 82093
// exit ;
82091: GO 82280
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
82093: LD_ADDR_VAR 0 4
82097: PUSH
82098: LD_INT 22
82100: PUSH
82101: LD_VAR 0 1
82105: PUSH
82106: EMPTY
82107: LIST
82108: LIST
82109: PUSH
82110: LD_INT 21
82112: PUSH
82113: LD_INT 3
82115: PUSH
82116: EMPTY
82117: LIST
82118: LIST
82119: PUSH
82120: EMPTY
82121: LIST
82122: LIST
82123: PPUSH
82124: CALL_OW 69
82128: ST_TO_ADDR
// if not tmp then
82129: LD_VAR 0 4
82133: NOT
82134: IFFALSE 82138
// exit ;
82136: GO 82280
// enable_addtolog := true ;
82138: LD_ADDR_OWVAR 81
82142: PUSH
82143: LD_INT 1
82145: ST_TO_ADDR
// AddToLog ( [ ) ;
82146: LD_STRING [
82148: PPUSH
82149: CALL_OW 561
// for i in tmp do
82153: LD_ADDR_VAR 0 3
82157: PUSH
82158: LD_VAR 0 4
82162: PUSH
82163: FOR_IN
82164: IFFALSE 82271
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
82166: LD_STRING [
82168: PUSH
82169: LD_VAR 0 3
82173: PPUSH
82174: CALL_OW 266
82178: STR
82179: PUSH
82180: LD_STRING , 
82182: STR
82183: PUSH
82184: LD_VAR 0 3
82188: PPUSH
82189: CALL_OW 250
82193: STR
82194: PUSH
82195: LD_STRING , 
82197: STR
82198: PUSH
82199: LD_VAR 0 3
82203: PPUSH
82204: CALL_OW 251
82208: STR
82209: PUSH
82210: LD_STRING , 
82212: STR
82213: PUSH
82214: LD_VAR 0 3
82218: PPUSH
82219: CALL_OW 254
82223: STR
82224: PUSH
82225: LD_STRING , 
82227: STR
82228: PUSH
82229: LD_VAR 0 3
82233: PPUSH
82234: LD_INT 1
82236: PPUSH
82237: CALL_OW 268
82241: STR
82242: PUSH
82243: LD_STRING , 
82245: STR
82246: PUSH
82247: LD_VAR 0 3
82251: PPUSH
82252: LD_INT 2
82254: PPUSH
82255: CALL_OW 268
82259: STR
82260: PUSH
82261: LD_STRING ],
82263: STR
82264: PPUSH
82265: CALL_OW 561
// end ;
82269: GO 82163
82271: POP
82272: POP
// AddToLog ( ]; ) ;
82273: LD_STRING ];
82275: PPUSH
82276: CALL_OW 561
// end ;
82280: LD_VAR 0 2
82284: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
82285: LD_INT 0
82287: PPUSH
82288: PPUSH
82289: PPUSH
82290: PPUSH
82291: PPUSH
// if not area or not rate or not max then
82292: LD_VAR 0 1
82296: NOT
82297: PUSH
82298: LD_VAR 0 2
82302: NOT
82303: OR
82304: PUSH
82305: LD_VAR 0 4
82309: NOT
82310: OR
82311: IFFALSE 82315
// exit ;
82313: GO 82507
// while 1 do
82315: LD_INT 1
82317: IFFALSE 82507
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
82319: LD_ADDR_VAR 0 9
82323: PUSH
82324: LD_VAR 0 1
82328: PPUSH
82329: LD_INT 1
82331: PPUSH
82332: CALL_OW 287
82336: PUSH
82337: LD_INT 10
82339: MUL
82340: ST_TO_ADDR
// r := rate / 10 ;
82341: LD_ADDR_VAR 0 7
82345: PUSH
82346: LD_VAR 0 2
82350: PUSH
82351: LD_INT 10
82353: DIVREAL
82354: ST_TO_ADDR
// time := 1 1$00 ;
82355: LD_ADDR_VAR 0 8
82359: PUSH
82360: LD_INT 2100
82362: ST_TO_ADDR
// if amount < min then
82363: LD_VAR 0 9
82367: PUSH
82368: LD_VAR 0 3
82372: LESS
82373: IFFALSE 82391
// r := r * 2 else
82375: LD_ADDR_VAR 0 7
82379: PUSH
82380: LD_VAR 0 7
82384: PUSH
82385: LD_INT 2
82387: MUL
82388: ST_TO_ADDR
82389: GO 82417
// if amount > max then
82391: LD_VAR 0 9
82395: PUSH
82396: LD_VAR 0 4
82400: GREATER
82401: IFFALSE 82417
// r := r / 2 ;
82403: LD_ADDR_VAR 0 7
82407: PUSH
82408: LD_VAR 0 7
82412: PUSH
82413: LD_INT 2
82415: DIVREAL
82416: ST_TO_ADDR
// time := time / r ;
82417: LD_ADDR_VAR 0 8
82421: PUSH
82422: LD_VAR 0 8
82426: PUSH
82427: LD_VAR 0 7
82431: DIVREAL
82432: ST_TO_ADDR
// if time < 0 then
82433: LD_VAR 0 8
82437: PUSH
82438: LD_INT 0
82440: LESS
82441: IFFALSE 82458
// time := time * - 1 ;
82443: LD_ADDR_VAR 0 8
82447: PUSH
82448: LD_VAR 0 8
82452: PUSH
82453: LD_INT 1
82455: NEG
82456: MUL
82457: ST_TO_ADDR
// wait ( time ) ;
82458: LD_VAR 0 8
82462: PPUSH
82463: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
82467: LD_INT 35
82469: PPUSH
82470: LD_INT 875
82472: PPUSH
82473: CALL_OW 12
82477: PPUSH
82478: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
82482: LD_INT 1
82484: PPUSH
82485: LD_INT 5
82487: PPUSH
82488: CALL_OW 12
82492: PPUSH
82493: LD_VAR 0 1
82497: PPUSH
82498: LD_INT 1
82500: PPUSH
82501: CALL_OW 55
// end ;
82505: GO 82315
// end ;
82507: LD_VAR 0 5
82511: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
82512: LD_INT 0
82514: PPUSH
82515: PPUSH
82516: PPUSH
82517: PPUSH
82518: PPUSH
82519: PPUSH
82520: PPUSH
82521: PPUSH
// if not turrets or not factories then
82522: LD_VAR 0 1
82526: NOT
82527: PUSH
82528: LD_VAR 0 2
82532: NOT
82533: OR
82534: IFFALSE 82538
// exit ;
82536: GO 82845
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
82538: LD_ADDR_VAR 0 10
82542: PUSH
82543: LD_INT 5
82545: PUSH
82546: LD_INT 6
82548: PUSH
82549: EMPTY
82550: LIST
82551: LIST
82552: PUSH
82553: LD_INT 2
82555: PUSH
82556: LD_INT 4
82558: PUSH
82559: EMPTY
82560: LIST
82561: LIST
82562: PUSH
82563: LD_INT 3
82565: PUSH
82566: LD_INT 5
82568: PUSH
82569: EMPTY
82570: LIST
82571: LIST
82572: PUSH
82573: EMPTY
82574: LIST
82575: LIST
82576: LIST
82577: PUSH
82578: LD_INT 24
82580: PUSH
82581: LD_INT 25
82583: PUSH
82584: EMPTY
82585: LIST
82586: LIST
82587: PUSH
82588: LD_INT 23
82590: PUSH
82591: LD_INT 27
82593: PUSH
82594: EMPTY
82595: LIST
82596: LIST
82597: PUSH
82598: EMPTY
82599: LIST
82600: LIST
82601: PUSH
82602: LD_INT 42
82604: PUSH
82605: LD_INT 43
82607: PUSH
82608: EMPTY
82609: LIST
82610: LIST
82611: PUSH
82612: LD_INT 44
82614: PUSH
82615: LD_INT 46
82617: PUSH
82618: EMPTY
82619: LIST
82620: LIST
82621: PUSH
82622: LD_INT 45
82624: PUSH
82625: LD_INT 47
82627: PUSH
82628: EMPTY
82629: LIST
82630: LIST
82631: PUSH
82632: EMPTY
82633: LIST
82634: LIST
82635: LIST
82636: PUSH
82637: EMPTY
82638: LIST
82639: LIST
82640: LIST
82641: ST_TO_ADDR
// result := [ ] ;
82642: LD_ADDR_VAR 0 3
82646: PUSH
82647: EMPTY
82648: ST_TO_ADDR
// for i in turrets do
82649: LD_ADDR_VAR 0 4
82653: PUSH
82654: LD_VAR 0 1
82658: PUSH
82659: FOR_IN
82660: IFFALSE 82843
// begin nat := GetNation ( i ) ;
82662: LD_ADDR_VAR 0 7
82666: PUSH
82667: LD_VAR 0 4
82671: PPUSH
82672: CALL_OW 248
82676: ST_TO_ADDR
// weapon := 0 ;
82677: LD_ADDR_VAR 0 8
82681: PUSH
82682: LD_INT 0
82684: ST_TO_ADDR
// if not nat then
82685: LD_VAR 0 7
82689: NOT
82690: IFFALSE 82694
// continue ;
82692: GO 82659
// for j in list [ nat ] do
82694: LD_ADDR_VAR 0 5
82698: PUSH
82699: LD_VAR 0 10
82703: PUSH
82704: LD_VAR 0 7
82708: ARRAY
82709: PUSH
82710: FOR_IN
82711: IFFALSE 82752
// if GetBWeapon ( i ) = j [ 1 ] then
82713: LD_VAR 0 4
82717: PPUSH
82718: CALL_OW 269
82722: PUSH
82723: LD_VAR 0 5
82727: PUSH
82728: LD_INT 1
82730: ARRAY
82731: EQUAL
82732: IFFALSE 82750
// begin weapon := j [ 2 ] ;
82734: LD_ADDR_VAR 0 8
82738: PUSH
82739: LD_VAR 0 5
82743: PUSH
82744: LD_INT 2
82746: ARRAY
82747: ST_TO_ADDR
// break ;
82748: GO 82752
// end ;
82750: GO 82710
82752: POP
82753: POP
// if not weapon then
82754: LD_VAR 0 8
82758: NOT
82759: IFFALSE 82763
// continue ;
82761: GO 82659
// for k in factories do
82763: LD_ADDR_VAR 0 6
82767: PUSH
82768: LD_VAR 0 2
82772: PUSH
82773: FOR_IN
82774: IFFALSE 82839
// begin weapons := AvailableWeaponList ( k ) ;
82776: LD_ADDR_VAR 0 9
82780: PUSH
82781: LD_VAR 0 6
82785: PPUSH
82786: CALL_OW 478
82790: ST_TO_ADDR
// if not weapons then
82791: LD_VAR 0 9
82795: NOT
82796: IFFALSE 82800
// continue ;
82798: GO 82773
// if weapon in weapons then
82800: LD_VAR 0 8
82804: PUSH
82805: LD_VAR 0 9
82809: IN
82810: IFFALSE 82837
// begin result := [ i , weapon ] ;
82812: LD_ADDR_VAR 0 3
82816: PUSH
82817: LD_VAR 0 4
82821: PUSH
82822: LD_VAR 0 8
82826: PUSH
82827: EMPTY
82828: LIST
82829: LIST
82830: ST_TO_ADDR
// exit ;
82831: POP
82832: POP
82833: POP
82834: POP
82835: GO 82845
// end ; end ;
82837: GO 82773
82839: POP
82840: POP
// end ;
82841: GO 82659
82843: POP
82844: POP
// end ;
82845: LD_VAR 0 3
82849: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
82850: LD_INT 0
82852: PPUSH
// if not side or side > 8 then
82853: LD_VAR 0 3
82857: NOT
82858: PUSH
82859: LD_VAR 0 3
82863: PUSH
82864: LD_INT 8
82866: GREATER
82867: OR
82868: IFFALSE 82872
// exit ;
82870: GO 82931
// if not range then
82872: LD_VAR 0 4
82876: NOT
82877: IFFALSE 82888
// range := - 12 ;
82879: LD_ADDR_VAR 0 4
82883: PUSH
82884: LD_INT 12
82886: NEG
82887: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
82888: LD_VAR 0 1
82892: PPUSH
82893: LD_VAR 0 2
82897: PPUSH
82898: LD_VAR 0 3
82902: PPUSH
82903: LD_VAR 0 4
82907: PPUSH
82908: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
82912: LD_VAR 0 1
82916: PPUSH
82917: LD_VAR 0 2
82921: PPUSH
82922: LD_VAR 0 3
82926: PPUSH
82927: CALL_OW 331
// end ;
82931: LD_VAR 0 5
82935: RET
// export function Video ( mode ) ; begin
82936: LD_INT 0
82938: PPUSH
// ingame_video = mode ;
82939: LD_ADDR_OWVAR 52
82943: PUSH
82944: LD_VAR 0 1
82948: ST_TO_ADDR
// interface_hidden = mode ;
82949: LD_ADDR_OWVAR 54
82953: PUSH
82954: LD_VAR 0 1
82958: ST_TO_ADDR
// end ;
82959: LD_VAR 0 2
82963: RET
// export function Join ( array , element ) ; begin
82964: LD_INT 0
82966: PPUSH
// result := Replace ( array , array + 1 , element ) ;
82967: LD_ADDR_VAR 0 3
82971: PUSH
82972: LD_VAR 0 1
82976: PPUSH
82977: LD_VAR 0 1
82981: PUSH
82982: LD_INT 1
82984: PLUS
82985: PPUSH
82986: LD_VAR 0 2
82990: PPUSH
82991: CALL_OW 1
82995: ST_TO_ADDR
// end ;
82996: LD_VAR 0 3
83000: RET
// export function JoinUnion ( array , element ) ; begin
83001: LD_INT 0
83003: PPUSH
// result := array union element ;
83004: LD_ADDR_VAR 0 3
83008: PUSH
83009: LD_VAR 0 1
83013: PUSH
83014: LD_VAR 0 2
83018: UNION
83019: ST_TO_ADDR
// end ;
83020: LD_VAR 0 3
83024: RET
// export function GetBehemoths ( side ) ; begin
83025: LD_INT 0
83027: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
83028: LD_ADDR_VAR 0 2
83032: PUSH
83033: LD_INT 22
83035: PUSH
83036: LD_VAR 0 1
83040: PUSH
83041: EMPTY
83042: LIST
83043: LIST
83044: PUSH
83045: LD_INT 31
83047: PUSH
83048: LD_INT 25
83050: PUSH
83051: EMPTY
83052: LIST
83053: LIST
83054: PUSH
83055: EMPTY
83056: LIST
83057: LIST
83058: PPUSH
83059: CALL_OW 69
83063: ST_TO_ADDR
// end ;
83064: LD_VAR 0 2
83068: RET
// export function Shuffle ( array ) ; var i , index ; begin
83069: LD_INT 0
83071: PPUSH
83072: PPUSH
83073: PPUSH
// result := [ ] ;
83074: LD_ADDR_VAR 0 2
83078: PUSH
83079: EMPTY
83080: ST_TO_ADDR
// if not array then
83081: LD_VAR 0 1
83085: NOT
83086: IFFALSE 83090
// exit ;
83088: GO 83189
// Randomize ;
83090: CALL_OW 10
// for i = array downto 1 do
83094: LD_ADDR_VAR 0 3
83098: PUSH
83099: DOUBLE
83100: LD_VAR 0 1
83104: INC
83105: ST_TO_ADDR
83106: LD_INT 1
83108: PUSH
83109: FOR_DOWNTO
83110: IFFALSE 83187
// begin index := rand ( 1 , array ) ;
83112: LD_ADDR_VAR 0 4
83116: PUSH
83117: LD_INT 1
83119: PPUSH
83120: LD_VAR 0 1
83124: PPUSH
83125: CALL_OW 12
83129: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
83130: LD_ADDR_VAR 0 2
83134: PUSH
83135: LD_VAR 0 2
83139: PPUSH
83140: LD_VAR 0 2
83144: PUSH
83145: LD_INT 1
83147: PLUS
83148: PPUSH
83149: LD_VAR 0 1
83153: PUSH
83154: LD_VAR 0 4
83158: ARRAY
83159: PPUSH
83160: CALL_OW 2
83164: ST_TO_ADDR
// array := Delete ( array , index ) ;
83165: LD_ADDR_VAR 0 1
83169: PUSH
83170: LD_VAR 0 1
83174: PPUSH
83175: LD_VAR 0 4
83179: PPUSH
83180: CALL_OW 3
83184: ST_TO_ADDR
// end ;
83185: GO 83109
83187: POP
83188: POP
// end ;
83189: LD_VAR 0 2
83193: RET
// export function GetBaseMaterials ( base ) ; begin
83194: LD_INT 0
83196: PPUSH
// result := [ 0 , 0 , 0 ] ;
83197: LD_ADDR_VAR 0 2
83201: PUSH
83202: LD_INT 0
83204: PUSH
83205: LD_INT 0
83207: PUSH
83208: LD_INT 0
83210: PUSH
83211: EMPTY
83212: LIST
83213: LIST
83214: LIST
83215: ST_TO_ADDR
// if not base then
83216: LD_VAR 0 1
83220: NOT
83221: IFFALSE 83225
// exit ;
83223: GO 83274
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
83225: LD_ADDR_VAR 0 2
83229: PUSH
83230: LD_VAR 0 1
83234: PPUSH
83235: LD_INT 1
83237: PPUSH
83238: CALL_OW 275
83242: PUSH
83243: LD_VAR 0 1
83247: PPUSH
83248: LD_INT 2
83250: PPUSH
83251: CALL_OW 275
83255: PUSH
83256: LD_VAR 0 1
83260: PPUSH
83261: LD_INT 3
83263: PPUSH
83264: CALL_OW 275
83268: PUSH
83269: EMPTY
83270: LIST
83271: LIST
83272: LIST
83273: ST_TO_ADDR
// end ;
83274: LD_VAR 0 2
83278: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
83279: LD_INT 0
83281: PPUSH
83282: PPUSH
// result := array ;
83283: LD_ADDR_VAR 0 3
83287: PUSH
83288: LD_VAR 0 1
83292: ST_TO_ADDR
// if size > 0 then
83293: LD_VAR 0 2
83297: PUSH
83298: LD_INT 0
83300: GREATER
83301: IFFALSE 83347
// for i := array downto size do
83303: LD_ADDR_VAR 0 4
83307: PUSH
83308: DOUBLE
83309: LD_VAR 0 1
83313: INC
83314: ST_TO_ADDR
83315: LD_VAR 0 2
83319: PUSH
83320: FOR_DOWNTO
83321: IFFALSE 83345
// result := Delete ( result , result ) ;
83323: LD_ADDR_VAR 0 3
83327: PUSH
83328: LD_VAR 0 3
83332: PPUSH
83333: LD_VAR 0 3
83337: PPUSH
83338: CALL_OW 3
83342: ST_TO_ADDR
83343: GO 83320
83345: POP
83346: POP
// end ;
83347: LD_VAR 0 3
83351: RET
// export function ComExit ( unit ) ; var tmp ; begin
83352: LD_INT 0
83354: PPUSH
83355: PPUSH
// if not IsInUnit ( unit ) then
83356: LD_VAR 0 1
83360: PPUSH
83361: CALL_OW 310
83365: NOT
83366: IFFALSE 83370
// exit ;
83368: GO 83430
// tmp := IsInUnit ( unit ) ;
83370: LD_ADDR_VAR 0 3
83374: PUSH
83375: LD_VAR 0 1
83379: PPUSH
83380: CALL_OW 310
83384: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
83385: LD_VAR 0 3
83389: PPUSH
83390: CALL_OW 247
83394: PUSH
83395: LD_INT 2
83397: EQUAL
83398: IFFALSE 83411
// ComExitVehicle ( unit ) else
83400: LD_VAR 0 1
83404: PPUSH
83405: CALL_OW 121
83409: GO 83420
// ComExitBuilding ( unit ) ;
83411: LD_VAR 0 1
83415: PPUSH
83416: CALL_OW 122
// result := tmp ;
83420: LD_ADDR_VAR 0 2
83424: PUSH
83425: LD_VAR 0 3
83429: ST_TO_ADDR
// end ;
83430: LD_VAR 0 2
83434: RET
// export function ResetHc ; begin
83435: LD_INT 0
83437: PPUSH
// InitHc ;
83438: CALL_OW 19
// hc_importance := 0 ;
83442: LD_ADDR_OWVAR 32
83446: PUSH
83447: LD_INT 0
83449: ST_TO_ADDR
// end ;
83450: LD_VAR 0 1
83454: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
83455: LD_INT 0
83457: PPUSH
83458: PPUSH
83459: PPUSH
// _x := ( x1 + x2 ) div 2 ;
83460: LD_ADDR_VAR 0 6
83464: PUSH
83465: LD_VAR 0 1
83469: PUSH
83470: LD_VAR 0 3
83474: PLUS
83475: PUSH
83476: LD_INT 2
83478: DIV
83479: ST_TO_ADDR
// if _x < 0 then
83480: LD_VAR 0 6
83484: PUSH
83485: LD_INT 0
83487: LESS
83488: IFFALSE 83505
// _x := _x * - 1 ;
83490: LD_ADDR_VAR 0 6
83494: PUSH
83495: LD_VAR 0 6
83499: PUSH
83500: LD_INT 1
83502: NEG
83503: MUL
83504: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
83505: LD_ADDR_VAR 0 7
83509: PUSH
83510: LD_VAR 0 2
83514: PUSH
83515: LD_VAR 0 4
83519: PLUS
83520: PUSH
83521: LD_INT 2
83523: DIV
83524: ST_TO_ADDR
// if _y < 0 then
83525: LD_VAR 0 7
83529: PUSH
83530: LD_INT 0
83532: LESS
83533: IFFALSE 83550
// _y := _y * - 1 ;
83535: LD_ADDR_VAR 0 7
83539: PUSH
83540: LD_VAR 0 7
83544: PUSH
83545: LD_INT 1
83547: NEG
83548: MUL
83549: ST_TO_ADDR
// result := [ _x , _y ] ;
83550: LD_ADDR_VAR 0 5
83554: PUSH
83555: LD_VAR 0 6
83559: PUSH
83560: LD_VAR 0 7
83564: PUSH
83565: EMPTY
83566: LIST
83567: LIST
83568: ST_TO_ADDR
// end ;
83569: LD_VAR 0 5
83573: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
83574: LD_INT 0
83576: PPUSH
83577: PPUSH
83578: PPUSH
83579: PPUSH
// task := GetTaskList ( unit ) ;
83580: LD_ADDR_VAR 0 7
83584: PUSH
83585: LD_VAR 0 1
83589: PPUSH
83590: CALL_OW 437
83594: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
83595: LD_VAR 0 7
83599: NOT
83600: PUSH
83601: LD_VAR 0 1
83605: PPUSH
83606: LD_VAR 0 2
83610: PPUSH
83611: CALL_OW 308
83615: NOT
83616: AND
83617: IFFALSE 83621
// exit ;
83619: GO 83739
// if IsInArea ( unit , area ) then
83621: LD_VAR 0 1
83625: PPUSH
83626: LD_VAR 0 2
83630: PPUSH
83631: CALL_OW 308
83635: IFFALSE 83653
// begin ComMoveToArea ( unit , goAway ) ;
83637: LD_VAR 0 1
83641: PPUSH
83642: LD_VAR 0 3
83646: PPUSH
83647: CALL_OW 113
// exit ;
83651: GO 83739
// end ; if task [ 1 ] [ 1 ] <> M then
83653: LD_VAR 0 7
83657: PUSH
83658: LD_INT 1
83660: ARRAY
83661: PUSH
83662: LD_INT 1
83664: ARRAY
83665: PUSH
83666: LD_STRING M
83668: NONEQUAL
83669: IFFALSE 83673
// exit ;
83671: GO 83739
// x := task [ 1 ] [ 2 ] ;
83673: LD_ADDR_VAR 0 5
83677: PUSH
83678: LD_VAR 0 7
83682: PUSH
83683: LD_INT 1
83685: ARRAY
83686: PUSH
83687: LD_INT 2
83689: ARRAY
83690: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
83691: LD_ADDR_VAR 0 6
83695: PUSH
83696: LD_VAR 0 7
83700: PUSH
83701: LD_INT 1
83703: ARRAY
83704: PUSH
83705: LD_INT 3
83707: ARRAY
83708: ST_TO_ADDR
// if InArea ( x , y , area ) then
83709: LD_VAR 0 5
83713: PPUSH
83714: LD_VAR 0 6
83718: PPUSH
83719: LD_VAR 0 2
83723: PPUSH
83724: CALL_OW 309
83728: IFFALSE 83739
// ComStop ( unit ) ;
83730: LD_VAR 0 1
83734: PPUSH
83735: CALL_OW 141
// end ;
83739: LD_VAR 0 4
83743: RET
// export function Abs ( value ) ; begin
83744: LD_INT 0
83746: PPUSH
// result := value ;
83747: LD_ADDR_VAR 0 2
83751: PUSH
83752: LD_VAR 0 1
83756: ST_TO_ADDR
// if value < 0 then
83757: LD_VAR 0 1
83761: PUSH
83762: LD_INT 0
83764: LESS
83765: IFFALSE 83782
// result := value * - 1 ;
83767: LD_ADDR_VAR 0 2
83771: PUSH
83772: LD_VAR 0 1
83776: PUSH
83777: LD_INT 1
83779: NEG
83780: MUL
83781: ST_TO_ADDR
// end ;
83782: LD_VAR 0 2
83786: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
83787: LD_INT 0
83789: PPUSH
83790: PPUSH
83791: PPUSH
83792: PPUSH
83793: PPUSH
83794: PPUSH
83795: PPUSH
83796: PPUSH
// if not unit or not building then
83797: LD_VAR 0 1
83801: NOT
83802: PUSH
83803: LD_VAR 0 2
83807: NOT
83808: OR
83809: IFFALSE 83813
// exit ;
83811: GO 84039
// x := GetX ( building ) ;
83813: LD_ADDR_VAR 0 4
83817: PUSH
83818: LD_VAR 0 2
83822: PPUSH
83823: CALL_OW 250
83827: ST_TO_ADDR
// y := GetY ( building ) ;
83828: LD_ADDR_VAR 0 6
83832: PUSH
83833: LD_VAR 0 2
83837: PPUSH
83838: CALL_OW 251
83842: ST_TO_ADDR
// d := GetDir ( building ) ;
83843: LD_ADDR_VAR 0 8
83847: PUSH
83848: LD_VAR 0 2
83852: PPUSH
83853: CALL_OW 254
83857: ST_TO_ADDR
// r := 4 ;
83858: LD_ADDR_VAR 0 9
83862: PUSH
83863: LD_INT 4
83865: ST_TO_ADDR
// for i := 1 to 5 do
83866: LD_ADDR_VAR 0 10
83870: PUSH
83871: DOUBLE
83872: LD_INT 1
83874: DEC
83875: ST_TO_ADDR
83876: LD_INT 5
83878: PUSH
83879: FOR_TO
83880: IFFALSE 84037
// begin _x := ShiftX ( x , d , r + i ) ;
83882: LD_ADDR_VAR 0 5
83886: PUSH
83887: LD_VAR 0 4
83891: PPUSH
83892: LD_VAR 0 8
83896: PPUSH
83897: LD_VAR 0 9
83901: PUSH
83902: LD_VAR 0 10
83906: PLUS
83907: PPUSH
83908: CALL_OW 272
83912: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
83913: LD_ADDR_VAR 0 7
83917: PUSH
83918: LD_VAR 0 6
83922: PPUSH
83923: LD_VAR 0 8
83927: PPUSH
83928: LD_VAR 0 9
83932: PUSH
83933: LD_VAR 0 10
83937: PLUS
83938: PPUSH
83939: CALL_OW 273
83943: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
83944: LD_VAR 0 5
83948: PPUSH
83949: LD_VAR 0 7
83953: PPUSH
83954: CALL_OW 488
83958: PUSH
83959: LD_VAR 0 5
83963: PPUSH
83964: LD_VAR 0 7
83968: PPUSH
83969: CALL_OW 428
83973: PPUSH
83974: CALL_OW 247
83978: PUSH
83979: LD_INT 3
83981: PUSH
83982: LD_INT 2
83984: PUSH
83985: EMPTY
83986: LIST
83987: LIST
83988: IN
83989: NOT
83990: AND
83991: IFFALSE 84035
// begin ComMoveXY ( unit , _x , _y ) ;
83993: LD_VAR 0 1
83997: PPUSH
83998: LD_VAR 0 5
84002: PPUSH
84003: LD_VAR 0 7
84007: PPUSH
84008: CALL_OW 111
// result := [ _x , _y ] ;
84012: LD_ADDR_VAR 0 3
84016: PUSH
84017: LD_VAR 0 5
84021: PUSH
84022: LD_VAR 0 7
84026: PUSH
84027: EMPTY
84028: LIST
84029: LIST
84030: ST_TO_ADDR
// exit ;
84031: POP
84032: POP
84033: GO 84039
// end ; end ;
84035: GO 83879
84037: POP
84038: POP
// end ;
84039: LD_VAR 0 3
84043: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
84044: LD_INT 0
84046: PPUSH
84047: PPUSH
84048: PPUSH
// result := 0 ;
84049: LD_ADDR_VAR 0 3
84053: PUSH
84054: LD_INT 0
84056: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
84057: LD_VAR 0 1
84061: PUSH
84062: LD_INT 0
84064: LESS
84065: PUSH
84066: LD_VAR 0 1
84070: PUSH
84071: LD_INT 8
84073: GREATER
84074: OR
84075: PUSH
84076: LD_VAR 0 2
84080: PUSH
84081: LD_INT 0
84083: LESS
84084: OR
84085: PUSH
84086: LD_VAR 0 2
84090: PUSH
84091: LD_INT 8
84093: GREATER
84094: OR
84095: IFFALSE 84099
// exit ;
84097: GO 84174
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
84099: LD_ADDR_VAR 0 4
84103: PUSH
84104: LD_INT 22
84106: PUSH
84107: LD_VAR 0 2
84111: PUSH
84112: EMPTY
84113: LIST
84114: LIST
84115: PPUSH
84116: CALL_OW 69
84120: PUSH
84121: FOR_IN
84122: IFFALSE 84172
// begin un := UnitShoot ( i ) ;
84124: LD_ADDR_VAR 0 5
84128: PUSH
84129: LD_VAR 0 4
84133: PPUSH
84134: CALL_OW 504
84138: ST_TO_ADDR
// if GetSide ( un ) = side1 then
84139: LD_VAR 0 5
84143: PPUSH
84144: CALL_OW 255
84148: PUSH
84149: LD_VAR 0 1
84153: EQUAL
84154: IFFALSE 84170
// begin result := un ;
84156: LD_ADDR_VAR 0 3
84160: PUSH
84161: LD_VAR 0 5
84165: ST_TO_ADDR
// exit ;
84166: POP
84167: POP
84168: GO 84174
// end ; end ;
84170: GO 84121
84172: POP
84173: POP
// end ; end_of_file
84174: LD_VAR 0 3
84178: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
84179: LD_VAR 0 1
84183: PUSH
84184: LD_INT 200
84186: DOUBLE
84187: GREATEREQUAL
84188: IFFALSE 84196
84190: LD_INT 299
84192: DOUBLE
84193: LESSEQUAL
84194: IFTRUE 84198
84196: GO 84230
84198: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
84199: LD_VAR 0 1
84203: PPUSH
84204: LD_VAR 0 2
84208: PPUSH
84209: LD_VAR 0 3
84213: PPUSH
84214: LD_VAR 0 4
84218: PPUSH
84219: LD_VAR 0 5
84223: PPUSH
84224: CALL 43066 0 5
84228: GO 84307
84230: LD_INT 300
84232: DOUBLE
84233: GREATEREQUAL
84234: IFFALSE 84242
84236: LD_INT 399
84238: DOUBLE
84239: LESSEQUAL
84240: IFTRUE 84244
84242: GO 84306
84244: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
84245: LD_VAR 0 1
84249: PPUSH
84250: LD_VAR 0 2
84254: PPUSH
84255: LD_VAR 0 3
84259: PPUSH
84260: LD_VAR 0 4
84264: PPUSH
84265: LD_VAR 0 5
84269: PPUSH
84270: LD_VAR 0 6
84274: PPUSH
84275: LD_VAR 0 7
84279: PPUSH
84280: LD_VAR 0 8
84284: PPUSH
84285: LD_VAR 0 9
84289: PPUSH
84290: LD_VAR 0 10
84294: PPUSH
84295: LD_VAR 0 11
84299: PPUSH
84300: CALL 40954 0 11
84304: GO 84307
84306: POP
// end ;
84307: PPOPN 11
84309: END
