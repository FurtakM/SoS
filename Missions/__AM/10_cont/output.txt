// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 59
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: EMPTY
 138: LIST
 139: LIST
 140: LIST
 141: PUSH
 142: LD_OWVAR 67
 146: ARRAY
 147: ST_TO_ADDR
// eventVar1 = 0 ;
 148: LD_ADDR_EXP 63
 152: PUSH
 153: LD_INT 0
 155: ST_TO_ADDR
// eventVar2 = 0 ;
 156: LD_ADDR_EXP 64
 160: PUSH
 161: LD_INT 0
 163: ST_TO_ADDR
// fastEnd = 0 ;
 164: LD_ADDR_EXP 61
 168: PUSH
 169: LD_INT 0
 171: ST_TO_ADDR
// KhatamStatus = 0 ;
 172: LD_ADDR_EXP 53
 176: PUSH
 177: LD_INT 0
 179: ST_TO_ADDR
// GensherStatus = 0 ;
 180: LD_ADDR_EXP 52
 184: PUSH
 185: LD_INT 0
 187: ST_TO_ADDR
// cratesSpawned = 0 ;
 188: LD_ADDR_EXP 56
 192: PUSH
 193: LD_INT 0
 195: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 57
 200: PUSH
 201: LD_INT 1
 203: PUSH
 204: LD_INT 2
 206: PUSH
 207: LD_INT 2
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 ] [ Difficulty ] ;
 221: LD_ADDR_EXP 58
 225: PUSH
 226: LD_INT 2
 228: PUSH
 229: LD_INT 4
 231: PUSH
 232: LD_INT 4
 234: PUSH
 235: EMPTY
 236: LIST
 237: LIST
 238: LIST
 239: PUSH
 240: LD_OWVAR 67
 244: ARRAY
 245: ST_TO_ADDR
// snipersTrained := false ;
 246: LD_ADDR_EXP 60
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// attackAvalaible = 1 ;
 254: LD_ADDR_EXP 62
 258: PUSH
 259: LD_INT 1
 261: ST_TO_ADDR
// mission_prefix := 10c_ ;
 262: LD_ADDR_EXP 54
 266: PUSH
 267: LD_STRING 10c_
 269: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 270: LD_ADDR_EXP 55
 274: PUSH
 275: LD_STRING 10_
 277: ST_TO_ADDR
// debugMode = 0 ;
 278: LD_ADDR_EXP 65
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// PrepareNature ;
 286: CALL 26517 0 0
// PrepareDifficulty ;
 290: CALL 11194 0 0
// PrepareJMMTeam ;
 294: CALL 1342 0 0
// PrepareCathyTeam ;
 298: CALL 2459 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 302: LD_INT 24
 304: PPUSH
 305: LD_INT 1
 307: PUSH
 308: LD_OWVAR 67
 312: PLUS
 313: PPUSH
 314: CALL 21054 0 2
// if Difficulty > 1 then
 318: LD_OWVAR 67
 322: PUSH
 323: LD_INT 1
 325: GREATER
 326: IFFALSE 340
// PlaceMines ( MineField2 , Difficulty ) ;
 328: LD_INT 25
 330: PPUSH
 331: LD_OWVAR 67
 335: PPUSH
 336: CALL 21054 0 2
// if Difficulty > 2 then
 340: LD_OWVAR 67
 344: PUSH
 345: LD_INT 2
 347: GREATER
 348: IFFALSE 362
// PlaceMines ( MineField3 , Difficulty ) ;
 350: LD_INT 26
 352: PPUSH
 353: LD_OWVAR 67
 357: PPUSH
 358: CALL 21054 0 2
// PrepareArabianCommander ;
 362: CALL 3905 0 0
// PrepareArabian ;
 366: CALL 3957 0 0
// BuildArabianBase ;
 370: CALL 14009 0 0
// TameApemans ;
 374: CALL 19859 0 0
// end ;
 378: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 379: LD_EXP 65
 383: PUSH
 384: LD_INT 1
 386: EQUAL
 387: IFFALSE 693
 389: GO 391
 391: DISABLE
 392: LD_INT 0
 394: PPUSH
// begin enable ;
 395: ENABLE
// fogoff ( true ) ;
 396: LD_INT 1
 398: PPUSH
 399: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 403: LD_ADDR_VAR 0 1
 407: PUSH
 408: LD_INT 22
 410: PUSH
 411: LD_INT 1
 413: PUSH
 414: EMPTY
 415: LIST
 416: LIST
 417: PUSH
 418: LD_INT 21
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: EMPTY
 429: LIST
 430: LIST
 431: PPUSH
 432: CALL_OW 69
 436: PUSH
 437: FOR_IN
 438: IFFALSE 454
// SetLives ( i , 1000 ) ;
 440: LD_VAR 0 1
 444: PPUSH
 445: LD_INT 1000
 447: PPUSH
 448: CALL_OW 234
 452: GO 437
 454: POP
 455: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 456: LD_ADDR_VAR 0 1
 460: PUSH
 461: LD_INT 22
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: LD_INT 2
 473: PUSH
 474: LD_INT 30
 476: PUSH
 477: LD_INT 0
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PUSH
 484: LD_INT 30
 486: PUSH
 487: LD_INT 1
 489: PUSH
 490: EMPTY
 491: LIST
 492: LIST
 493: PUSH
 494: EMPTY
 495: LIST
 496: LIST
 497: LIST
 498: PUSH
 499: EMPTY
 500: LIST
 501: LIST
 502: PPUSH
 503: CALL_OW 69
 507: PUSH
 508: FOR_IN
 509: IFFALSE 533
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 511: LD_VAR 0 1
 515: PPUSH
 516: CALL_OW 274
 520: PPUSH
 521: LD_INT 1
 523: PPUSH
 524: LD_INT 9999
 526: PPUSH
 527: CALL_OW 277
 531: GO 508
 533: POP
 534: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 535: LD_ADDR_VAR 0 1
 539: PUSH
 540: LD_INT 22
 542: PUSH
 543: LD_INT 1
 545: PUSH
 546: EMPTY
 547: LIST
 548: LIST
 549: PUSH
 550: LD_INT 2
 552: PUSH
 553: LD_INT 30
 555: PUSH
 556: LD_INT 0
 558: PUSH
 559: EMPTY
 560: LIST
 561: LIST
 562: PUSH
 563: LD_INT 30
 565: PUSH
 566: LD_INT 1
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: LIST
 577: PUSH
 578: EMPTY
 579: LIST
 580: LIST
 581: PPUSH
 582: CALL_OW 69
 586: PUSH
 587: FOR_IN
 588: IFFALSE 612
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 590: LD_VAR 0 1
 594: PPUSH
 595: CALL_OW 274
 599: PPUSH
 600: LD_INT 2
 602: PPUSH
 603: LD_INT 9999
 605: PPUSH
 606: CALL_OW 277
 610: GO 587
 612: POP
 613: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 614: LD_ADDR_VAR 0 1
 618: PUSH
 619: LD_INT 22
 621: PUSH
 622: LD_INT 1
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: LD_INT 2
 631: PUSH
 632: LD_INT 30
 634: PUSH
 635: LD_INT 0
 637: PUSH
 638: EMPTY
 639: LIST
 640: LIST
 641: PUSH
 642: LD_INT 30
 644: PUSH
 645: LD_INT 1
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: PUSH
 652: EMPTY
 653: LIST
 654: LIST
 655: LIST
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PPUSH
 661: CALL_OW 69
 665: PUSH
 666: FOR_IN
 667: IFFALSE 691
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 669: LD_VAR 0 1
 673: PPUSH
 674: CALL_OW 274
 678: PPUSH
 679: LD_INT 3
 681: PPUSH
 682: LD_INT 9999
 684: PPUSH
 685: CALL_OW 277
 689: GO 666
 691: POP
 692: POP
// end ;
 693: PPOPN 1
 695: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 696: LD_INT 25
 698: PUSH
 699: LD_INT 5
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 69
 710: IFFALSE 723
 712: GO 714
 714: DISABLE
// snipersTrained := true ;
 715: LD_ADDR_EXP 60
 719: PUSH
 720: LD_INT 1
 722: ST_TO_ADDR
 723: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 724: LD_INT 1
 726: PPUSH
 727: LD_INT 2
 729: PPUSH
 730: CALL_OW 81
 734: PUSH
 735: LD_INT 1
 737: EQUAL
 738: PUSH
 739: LD_EXP 42
 743: AND
 744: PUSH
 745: LD_INT 22
 747: PUSH
 748: LD_INT 3
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: LD_INT 3
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PPUSH
 769: CALL_OW 69
 773: PUSH
 774: LD_INT 0
 776: EQUAL
 777: AND
 778: IFFALSE 790
 780: GO 782
 782: DISABLE
// SetAchievement ( ACH_POWER ) ;
 783: LD_STRING ACH_POWER
 785: PPUSH
 786: CALL_OW 543
 790: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 791: LD_INT 22
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 30
 803: PUSH
 804: LD_INT 1
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PPUSH
 815: CALL_OW 69
 819: PUSH
 820: LD_INT 22
 822: PUSH
 823: LD_INT 1
 825: PUSH
 826: EMPTY
 827: LIST
 828: LIST
 829: PUSH
 830: LD_INT 30
 832: PUSH
 833: LD_INT 32
 835: PUSH
 836: EMPTY
 837: LIST
 838: LIST
 839: PUSH
 840: EMPTY
 841: LIST
 842: LIST
 843: PPUSH
 844: CALL_OW 69
 848: AND
 849: PUSH
 850: LD_INT 22
 852: PUSH
 853: LD_INT 1
 855: PUSH
 856: EMPTY
 857: LIST
 858: LIST
 859: PUSH
 860: LD_INT 30
 862: PUSH
 863: LD_INT 33
 865: PUSH
 866: EMPTY
 867: LIST
 868: LIST
 869: PUSH
 870: EMPTY
 871: LIST
 872: LIST
 873: PPUSH
 874: CALL_OW 69
 878: AND
 879: PUSH
 880: LD_INT 22
 882: PUSH
 883: LD_INT 1
 885: PUSH
 886: EMPTY
 887: LIST
 888: LIST
 889: PUSH
 890: LD_INT 30
 892: PUSH
 893: LD_INT 5
 895: PUSH
 896: EMPTY
 897: LIST
 898: LIST
 899: PUSH
 900: EMPTY
 901: LIST
 902: LIST
 903: PPUSH
 904: CALL_OW 69
 908: AND
 909: PUSH
 910: LD_INT 22
 912: PUSH
 913: LD_INT 1
 915: PUSH
 916: EMPTY
 917: LIST
 918: LIST
 919: PUSH
 920: LD_INT 30
 922: PUSH
 923: LD_INT 3
 925: PUSH
 926: EMPTY
 927: LIST
 928: LIST
 929: PUSH
 930: EMPTY
 931: LIST
 932: LIST
 933: PPUSH
 934: CALL_OW 69
 938: AND
 939: PUSH
 940: LD_INT 22
 942: PUSH
 943: LD_INT 1
 945: PUSH
 946: EMPTY
 947: LIST
 948: LIST
 949: PUSH
 950: LD_INT 30
 952: PUSH
 953: LD_INT 36
 955: PUSH
 956: EMPTY
 957: LIST
 958: LIST
 959: PUSH
 960: EMPTY
 961: LIST
 962: LIST
 963: PPUSH
 964: CALL_OW 69
 968: AND
 969: PUSH
 970: LD_INT 22
 972: PUSH
 973: LD_INT 1
 975: PUSH
 976: EMPTY
 977: LIST
 978: LIST
 979: PUSH
 980: LD_INT 30
 982: PUSH
 983: LD_INT 31
 985: PUSH
 986: EMPTY
 987: LIST
 988: LIST
 989: PUSH
 990: EMPTY
 991: LIST
 992: LIST
 993: PPUSH
 994: CALL_OW 69
 998: AND
 999: PUSH
1000: LD_INT 22
1002: PUSH
1003: LD_INT 1
1005: PUSH
1006: EMPTY
1007: LIST
1008: LIST
1009: PUSH
1010: LD_INT 30
1012: PUSH
1013: LD_INT 22
1015: PUSH
1016: EMPTY
1017: LIST
1018: LIST
1019: PUSH
1020: EMPTY
1021: LIST
1022: LIST
1023: PPUSH
1024: CALL_OW 69
1028: AND
1029: PUSH
1030: LD_INT 22
1032: PUSH
1033: LD_INT 1
1035: PUSH
1036: EMPTY
1037: LIST
1038: LIST
1039: PUSH
1040: LD_INT 30
1042: PUSH
1043: LD_INT 20
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: PUSH
1050: EMPTY
1051: LIST
1052: LIST
1053: PPUSH
1054: CALL_OW 69
1058: AND
1059: PUSH
1060: LD_INT 22
1062: PUSH
1063: LD_INT 1
1065: PUSH
1066: EMPTY
1067: LIST
1068: LIST
1069: PUSH
1070: LD_INT 30
1072: PUSH
1073: LD_INT 19
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: PUSH
1080: EMPTY
1081: LIST
1082: LIST
1083: PPUSH
1084: CALL_OW 69
1088: AND
1089: PUSH
1090: LD_INT 22
1092: PUSH
1093: LD_INT 1
1095: PUSH
1096: EMPTY
1097: LIST
1098: LIST
1099: PUSH
1100: LD_INT 30
1102: PUSH
1103: LD_INT 16
1105: PUSH
1106: EMPTY
1107: LIST
1108: LIST
1109: PUSH
1110: EMPTY
1111: LIST
1112: LIST
1113: PPUSH
1114: CALL_OW 69
1118: AND
1119: PUSH
1120: LD_INT 22
1122: PUSH
1123: LD_INT 1
1125: PUSH
1126: EMPTY
1127: LIST
1128: LIST
1129: PUSH
1130: LD_INT 30
1132: PUSH
1133: LD_INT 17
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: PUSH
1140: EMPTY
1141: LIST
1142: LIST
1143: PPUSH
1144: CALL_OW 69
1148: AND
1149: PUSH
1150: LD_INT 22
1152: PUSH
1153: LD_INT 1
1155: PUSH
1156: EMPTY
1157: LIST
1158: LIST
1159: PUSH
1160: LD_INT 30
1162: PUSH
1163: LD_INT 21
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: PUSH
1170: EMPTY
1171: LIST
1172: LIST
1173: PPUSH
1174: CALL_OW 69
1178: AND
1179: PUSH
1180: LD_INT 22
1182: PUSH
1183: LD_INT 1
1185: PUSH
1186: EMPTY
1187: LIST
1188: LIST
1189: PUSH
1190: LD_INT 30
1192: PUSH
1193: LD_INT 29
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PUSH
1200: EMPTY
1201: LIST
1202: LIST
1203: PPUSH
1204: CALL_OW 69
1208: AND
1209: PUSH
1210: LD_INT 22
1212: PUSH
1213: LD_INT 1
1215: PUSH
1216: EMPTY
1217: LIST
1218: LIST
1219: PUSH
1220: LD_INT 30
1222: PUSH
1223: LD_INT 30
1225: PUSH
1226: EMPTY
1227: LIST
1228: LIST
1229: PUSH
1230: EMPTY
1231: LIST
1232: LIST
1233: PPUSH
1234: CALL_OW 69
1238: AND
1239: PUSH
1240: LD_INT 22
1242: PUSH
1243: LD_INT 1
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: PUSH
1250: LD_INT 30
1252: PUSH
1253: LD_INT 27
1255: PUSH
1256: EMPTY
1257: LIST
1258: LIST
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: PPUSH
1264: CALL_OW 69
1268: AND
1269: PUSH
1270: LD_INT 22
1272: PUSH
1273: LD_INT 1
1275: PUSH
1276: EMPTY
1277: LIST
1278: LIST
1279: PUSH
1280: LD_INT 30
1282: PUSH
1283: LD_INT 26
1285: PUSH
1286: EMPTY
1287: LIST
1288: LIST
1289: PUSH
1290: EMPTY
1291: LIST
1292: LIST
1293: PPUSH
1294: CALL_OW 69
1298: AND
1299: PUSH
1300: LD_INT 22
1302: PUSH
1303: LD_INT 1
1305: PUSH
1306: EMPTY
1307: LIST
1308: LIST
1309: PUSH
1310: LD_INT 30
1312: PUSH
1313: LD_INT 28
1315: PUSH
1316: EMPTY
1317: LIST
1318: LIST
1319: PUSH
1320: EMPTY
1321: LIST
1322: LIST
1323: PPUSH
1324: CALL_OW 69
1328: AND
1329: IFFALSE 1341
1331: GO 1333
1333: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1334: LD_STRING ACH_ARCH
1336: PPUSH
1337: CALL_OW 543
1341: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1342: LD_INT 0
1344: PPUSH
1345: PPUSH
1346: PPUSH
1347: PPUSH
1348: PPUSH
1349: PPUSH
// uc_side = 1 ;
1350: LD_ADDR_OWVAR 20
1354: PUSH
1355: LD_INT 1
1357: ST_TO_ADDR
// uc_nation = 1 ;
1358: LD_ADDR_OWVAR 21
1362: PUSH
1363: LD_INT 1
1365: ST_TO_ADDR
// count = 0 ;
1366: LD_ADDR_VAR 0 6
1370: PUSH
1371: LD_INT 0
1373: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
1374: LD_ADDR_EXP 1
1378: PUSH
1379: LD_STRING 10_JMM
1381: PPUSH
1382: LD_INT 1
1384: PPUSH
1385: CALL 10799 0 2
1389: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1390: LD_ADDR_EXP 20
1394: PUSH
1395: LD_EXP 20
1399: PUSH
1400: LD_EXP 1
1404: ADD
1405: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
1406: LD_ADDR_EXP 10
1410: PUSH
1411: LD_STRING 10_Gary
1413: PPUSH
1414: LD_INT 1
1416: PPUSH
1417: CALL 10799 0 2
1421: ST_TO_ADDR
// if Gary then
1422: LD_EXP 10
1426: IFFALSE 1444
// JMMSquad = JMMSquad ^ Gary ;
1428: LD_ADDR_EXP 20
1432: PUSH
1433: LD_EXP 20
1437: PUSH
1438: LD_EXP 10
1442: ADD
1443: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
1444: LD_ADDR_EXP 5
1448: PUSH
1449: LD_STRING 10_Cyrus
1451: PPUSH
1452: LD_INT 1
1454: PPUSH
1455: CALL 10799 0 2
1459: ST_TO_ADDR
// if Cyrus then
1460: LD_EXP 5
1464: IFFALSE 1482
// JMMSquad = JMMSquad ^ Cyrus ;
1466: LD_ADDR_EXP 20
1470: PUSH
1471: LD_EXP 20
1475: PUSH
1476: LD_EXP 5
1480: ADD
1481: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
1482: LD_ADDR_EXP 4
1486: PUSH
1487: LD_STRING 10_Bobby
1489: PPUSH
1490: LD_INT 1
1492: PPUSH
1493: CALL 10799 0 2
1497: ST_TO_ADDR
// if Bobby then
1498: LD_EXP 4
1502: IFFALSE 1520
// JMMSquad = JMMSquad ^ Bobby ;
1504: LD_ADDR_EXP 20
1508: PUSH
1509: LD_EXP 20
1513: PUSH
1514: LD_EXP 4
1518: ADD
1519: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
1520: LD_ADDR_EXP 6
1524: PUSH
1525: LD_STRING 10_Lisa
1527: PPUSH
1528: LD_INT 1
1530: PPUSH
1531: CALL 10799 0 2
1535: ST_TO_ADDR
// if Lisa then
1536: LD_EXP 6
1540: IFFALSE 1558
// JMMSquad = JMMSquad ^ Lisa ;
1542: LD_ADDR_EXP 20
1546: PUSH
1547: LD_EXP 20
1551: PUSH
1552: LD_EXP 6
1556: ADD
1557: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
1558: LD_ADDR_EXP 2
1562: PUSH
1563: LD_STRING 10_Brown
1565: PPUSH
1566: LD_INT 1
1568: PPUSH
1569: CALL 10799 0 2
1573: ST_TO_ADDR
// if Brown then
1574: LD_EXP 2
1578: IFFALSE 1596
// JMMSquad = JMMSquad ^ Brown ;
1580: LD_ADDR_EXP 20
1584: PUSH
1585: LD_EXP 20
1589: PUSH
1590: LD_EXP 2
1594: ADD
1595: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
1596: LD_ADDR_EXP 3
1600: PUSH
1601: LD_STRING 10_Donaldson
1603: PPUSH
1604: LD_INT 1
1606: PPUSH
1607: CALL 10799 0 2
1611: ST_TO_ADDR
// if Donaldson then
1612: LD_EXP 3
1616: IFFALSE 1634
// JMMSquad = JMMSquad ^ Donaldson ;
1618: LD_ADDR_EXP 20
1622: PUSH
1623: LD_EXP 20
1627: PUSH
1628: LD_EXP 3
1632: ADD
1633: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
1634: LD_ADDR_EXP 7
1638: PUSH
1639: LD_STRING 10_Frank
1641: PPUSH
1642: LD_INT 1
1644: PPUSH
1645: CALL 10799 0 2
1649: ST_TO_ADDR
// if Frank then
1650: LD_EXP 7
1654: IFFALSE 1672
// JMMSquad = JMMSquad ^ Frank ;
1656: LD_ADDR_EXP 20
1660: PUSH
1661: LD_EXP 20
1665: PUSH
1666: LD_EXP 7
1670: ADD
1671: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1672: LD_ADDR_EXP 9
1676: PUSH
1677: LD_STRING 10_Houten
1679: PPUSH
1680: LD_INT 1
1682: PPUSH
1683: CALL 10799 0 2
1687: ST_TO_ADDR
// if Houten then
1688: LD_EXP 9
1692: IFFALSE 1710
// JMMSquad = JMMSquad ^ Houten ;
1694: LD_ADDR_EXP 20
1698: PUSH
1699: LD_EXP 20
1703: PUSH
1704: LD_EXP 9
1708: ADD
1709: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1710: LD_ADDR_EXP 21
1714: PUSH
1715: LD_STRING OthersIn10
1717: PPUSH
1718: CALL_OW 31
1722: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1723: LD_ADDR_EXP 24
1727: PUSH
1728: LD_STRING Powell
1730: PPUSH
1731: LD_INT 0
1733: PPUSH
1734: CALL 10799 0 2
1738: ST_TO_ADDR
// for i in JMMSquad do
1739: LD_ADDR_VAR 0 2
1743: PUSH
1744: LD_EXP 20
1748: PUSH
1749: FOR_IN
1750: IFFALSE 2030
// begin if count < 3 then
1752: LD_VAR 0 6
1756: PUSH
1757: LD_INT 3
1759: LESS
1760: IFFALSE 1877
// begin vc_engine = 1 ;
1762: LD_ADDR_OWVAR 39
1766: PUSH
1767: LD_INT 1
1769: ST_TO_ADDR
// vc_control = 1 ;
1770: LD_ADDR_OWVAR 38
1774: PUSH
1775: LD_INT 1
1777: ST_TO_ADDR
// vc_weapon = 12 ;
1778: LD_ADDR_OWVAR 40
1782: PUSH
1783: LD_INT 12
1785: ST_TO_ADDR
// vc_chassis = 3 ;
1786: LD_ADDR_OWVAR 37
1790: PUSH
1791: LD_INT 3
1793: ST_TO_ADDR
// veh = CreateVehicle ;
1794: LD_ADDR_VAR 0 4
1798: PUSH
1799: CALL_OW 45
1803: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1804: LD_VAR 0 4
1808: PPUSH
1809: LD_INT 1
1811: PPUSH
1812: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1816: LD_VAR 0 4
1820: PPUSH
1821: LD_INT 2
1823: PPUSH
1824: LD_INT 0
1826: PPUSH
1827: CALL_OW 49
// if count mod 2 = 0 then
1831: LD_VAR 0 6
1835: PUSH
1836: LD_INT 2
1838: MOD
1839: PUSH
1840: LD_INT 0
1842: EQUAL
1843: IFFALSE 1862
// AddCargo ( veh , 1 , 100 ) else
1845: LD_VAR 0 4
1849: PPUSH
1850: LD_INT 1
1852: PPUSH
1853: LD_INT 100
1855: PPUSH
1856: CALL_OW 291
1860: GO 1877
// AddCargo ( veh , 3 , 100 ) end ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_INT 3
1869: PPUSH
1870: LD_INT 100
1872: PPUSH
1873: CALL_OW 291
// if count >= 3 then
1877: LD_VAR 0 6
1881: PUSH
1882: LD_INT 3
1884: GREATEREQUAL
1885: IFFALSE 2000
// begin vc_engine = 1 ;
1887: LD_ADDR_OWVAR 39
1891: PUSH
1892: LD_INT 1
1894: ST_TO_ADDR
// vc_control = 1 ;
1895: LD_ADDR_OWVAR 38
1899: PUSH
1900: LD_INT 1
1902: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1903: LD_ADDR_OWVAR 40
1907: PUSH
1908: LD_INT 3
1910: PUSH
1911: LD_INT 4
1913: PUSH
1914: LD_INT 5
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: PUSH
1922: LD_INT 1
1924: PPUSH
1925: LD_INT 3
1927: PPUSH
1928: CALL_OW 12
1932: ARRAY
1933: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1934: LD_ADDR_OWVAR 37
1938: PUSH
1939: LD_INT 2
1941: PUSH
1942: LD_INT 3
1944: PUSH
1945: EMPTY
1946: LIST
1947: LIST
1948: PUSH
1949: LD_VAR 0 2
1953: PUSH
1954: LD_INT 2
1956: MOD
1957: PUSH
1958: LD_INT 1
1960: PLUS
1961: ARRAY
1962: ST_TO_ADDR
// veh = CreateVehicle ;
1963: LD_ADDR_VAR 0 4
1967: PUSH
1968: CALL_OW 45
1972: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1973: LD_VAR 0 4
1977: PPUSH
1978: LD_INT 1
1980: PPUSH
1981: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1985: LD_VAR 0 4
1989: PPUSH
1990: LD_INT 2
1992: PPUSH
1993: LD_INT 0
1995: PPUSH
1996: CALL_OW 49
// end ; count = count + 1 ;
2000: LD_ADDR_VAR 0 6
2004: PUSH
2005: LD_VAR 0 6
2009: PUSH
2010: LD_INT 1
2012: PLUS
2013: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2014: LD_VAR 0 2
2018: PPUSH
2019: LD_VAR 0 4
2023: PPUSH
2024: CALL_OW 52
// end ;
2028: GO 1749
2030: POP
2031: POP
// for i in others10 do
2032: LD_ADDR_VAR 0 2
2036: PUSH
2037: LD_EXP 21
2041: PUSH
2042: FOR_IN
2043: IFFALSE 2190
// begin vc_engine = 1 ;
2045: LD_ADDR_OWVAR 39
2049: PUSH
2050: LD_INT 1
2052: ST_TO_ADDR
// vc_control = 1 ;
2053: LD_ADDR_OWVAR 38
2057: PUSH
2058: LD_INT 1
2060: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2061: LD_ADDR_OWVAR 40
2065: PUSH
2066: LD_INT 3
2068: PUSH
2069: LD_INT 4
2071: PUSH
2072: LD_INT 5
2074: PUSH
2075: EMPTY
2076: LIST
2077: LIST
2078: LIST
2079: PUSH
2080: LD_INT 1
2082: PPUSH
2083: LD_INT 3
2085: PPUSH
2086: CALL_OW 12
2090: ARRAY
2091: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2092: LD_ADDR_OWVAR 37
2096: PUSH
2097: LD_INT 2
2099: PUSH
2100: LD_INT 3
2102: PUSH
2103: EMPTY
2104: LIST
2105: LIST
2106: PUSH
2107: LD_VAR 0 2
2111: PUSH
2112: LD_INT 2
2114: MOD
2115: PUSH
2116: LD_INT 1
2118: PLUS
2119: ARRAY
2120: ST_TO_ADDR
// veh = CreateVehicle ;
2121: LD_ADDR_VAR 0 4
2125: PUSH
2126: CALL_OW 45
2130: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2131: LD_VAR 0 4
2135: PPUSH
2136: LD_INT 1
2138: PPUSH
2139: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2143: LD_VAR 0 4
2147: PPUSH
2148: LD_INT 2
2150: PPUSH
2151: LD_INT 0
2153: PPUSH
2154: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2158: LD_ADDR_EXP 28
2162: PUSH
2163: LD_EXP 28
2167: PUSH
2168: LD_VAR 0 4
2172: ADD
2173: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2174: LD_VAR 0 2
2178: PPUSH
2179: LD_VAR 0 4
2183: PPUSH
2184: CALL_OW 52
// end ;
2188: GO 2042
2190: POP
2191: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2192: LD_INT 22
2194: PUSH
2195: LD_INT 1
2197: PUSH
2198: EMPTY
2199: LIST
2200: LIST
2201: PUSH
2202: LD_INT 21
2204: PUSH
2205: LD_INT 1
2207: PUSH
2208: EMPTY
2209: LIST
2210: LIST
2211: PUSH
2212: EMPTY
2213: LIST
2214: LIST
2215: PPUSH
2216: CALL_OW 69
2220: PPUSH
2221: LD_INT 1
2223: PPUSH
2224: CALL_OW 336
// end ;
2228: LD_VAR 0 1
2232: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2233: LD_INT 0
2235: PPUSH
2236: PPUSH
2237: PPUSH
2238: PPUSH
2239: PPUSH
// uc_side = 1 ;
2240: LD_ADDR_OWVAR 20
2244: PUSH
2245: LD_INT 1
2247: ST_TO_ADDR
// uc_nation = 1 ;
2248: LD_ADDR_OWVAR 21
2252: PUSH
2253: LD_INT 1
2255: ST_TO_ADDR
// for i := 1 to 10 do
2256: LD_ADDR_VAR 0 2
2260: PUSH
2261: DOUBLE
2262: LD_INT 1
2264: DEC
2265: ST_TO_ADDR
2266: LD_INT 10
2268: PUSH
2269: FOR_TO
2270: IFFALSE 2452
// begin vc_engine = 1 ;
2272: LD_ADDR_OWVAR 39
2276: PUSH
2277: LD_INT 1
2279: ST_TO_ADDR
// vc_control = 1 ;
2280: LD_ADDR_OWVAR 38
2284: PUSH
2285: LD_INT 1
2287: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2288: LD_ADDR_OWVAR 40
2292: PUSH
2293: LD_INT 3
2295: PUSH
2296: LD_INT 4
2298: PUSH
2299: LD_INT 5
2301: PUSH
2302: LD_INT 12
2304: PUSH
2305: EMPTY
2306: LIST
2307: LIST
2308: LIST
2309: LIST
2310: PUSH
2311: LD_INT 1
2313: PPUSH
2314: LD_INT 4
2316: PPUSH
2317: CALL_OW 12
2321: ARRAY
2322: ST_TO_ADDR
// vc_chassis = 3 ;
2323: LD_ADDR_OWVAR 37
2327: PUSH
2328: LD_INT 3
2330: ST_TO_ADDR
// veh = CreateVehicle ;
2331: LD_ADDR_VAR 0 3
2335: PUSH
2336: CALL_OW 45
2340: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2341: LD_VAR 0 3
2345: PPUSH
2346: LD_INT 1
2348: PPUSH
2349: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2353: LD_VAR 0 3
2357: PPUSH
2358: LD_INT 2
2360: PPUSH
2361: LD_INT 0
2363: PPUSH
2364: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2368: LD_ADDR_EXP 28
2372: PUSH
2373: LD_EXP 28
2377: PUSH
2378: LD_VAR 0 3
2382: ADD
2383: ST_TO_ADDR
// if vc_weapon = 12 then
2384: LD_OWVAR 40
2388: PUSH
2389: LD_INT 12
2391: EQUAL
2392: IFFALSE 2450
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2394: LD_ADDR_VAR 0 4
2398: PUSH
2399: LD_INT 5
2401: PPUSH
2402: LD_INT 10
2404: PPUSH
2405: CALL_OW 12
2409: PUSH
2410: LD_INT 10
2412: MUL
2413: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2414: LD_VAR 0 3
2418: PPUSH
2419: LD_INT 1
2421: PUSH
2422: LD_INT 3
2424: PUSH
2425: EMPTY
2426: LIST
2427: LIST
2428: PUSH
2429: LD_INT 1
2431: PPUSH
2432: LD_INT 2
2434: PPUSH
2435: CALL_OW 12
2439: ARRAY
2440: PPUSH
2441: LD_VAR 0 4
2445: PPUSH
2446: CALL_OW 291
// end ; end ;
2450: GO 2269
2452: POP
2453: POP
// end ;
2454: LD_VAR 0 1
2458: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2459: LD_INT 0
2461: PPUSH
2462: PPUSH
2463: PPUSH
// uc_side = 4 ;
2464: LD_ADDR_OWVAR 20
2468: PUSH
2469: LD_INT 4
2471: ST_TO_ADDR
// uc_nation = 1 ;
2472: LD_ADDR_OWVAR 21
2476: PUSH
2477: LD_INT 1
2479: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
2480: LD_ADDR_EXP 11
2484: PUSH
2485: LD_STRING Simms
2487: PPUSH
2488: LD_INT 0
2490: PPUSH
2491: CALL 10799 0 2
2495: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
2496: LD_ADDR_EXP 12
2500: PUSH
2501: LD_STRING 08_Denis
2503: PPUSH
2504: LD_INT 1
2506: PPUSH
2507: CALL 10799 0 2
2511: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
2512: LD_ADDR_EXP 13
2516: PUSH
2517: LD_STRING 08_Joan
2519: PPUSH
2520: LD_INT 1
2522: PPUSH
2523: CALL 10799 0 2
2527: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2528: LD_STRING 08_Khatam
2530: PPUSH
2531: CALL_OW 28
2535: IFFALSE 2555
// Khatam = PrepareUnit ( 08_Khatam , true ) else
2537: LD_ADDR_EXP 14
2541: PUSH
2542: LD_STRING 08_Khatam
2544: PPUSH
2545: LD_INT 1
2547: PPUSH
2548: CALL 10799 0 2
2552: ST_TO_ADDR
2553: GO 2580
// if TestCharacters ( 03_Khatam ) then
2555: LD_STRING 03_Khatam
2557: PPUSH
2558: CALL_OW 28
2562: IFFALSE 2580
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
2564: LD_ADDR_EXP 14
2568: PUSH
2569: LD_STRING 03_Khatam
2571: PPUSH
2572: LD_INT 1
2574: PPUSH
2575: CALL 10799 0 2
2579: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
2580: LD_ADDR_EXP 15
2584: PUSH
2585: LD_STRING 08_Gladstone
2587: PPUSH
2588: LD_INT 1
2590: PPUSH
2591: CALL 10799 0 2
2595: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
2596: LD_ADDR_EXP 17
2600: PUSH
2601: LD_STRING DeltaDoctor
2603: PPUSH
2604: LD_INT 1
2606: PPUSH
2607: CALL 10799 0 2
2611: ST_TO_ADDR
// Frank := PrepareUnit ( 08_Frank , true ) ;
2612: LD_ADDR_EXP 7
2616: PUSH
2617: LD_STRING 08_Frank
2619: PPUSH
2620: LD_INT 1
2622: PPUSH
2623: CALL 10799 0 2
2627: ST_TO_ADDR
// if Frank then
2628: LD_EXP 7
2632: IFFALSE 2652
// Kikuchi = PrepareUnit ( Yamoko , true ) else
2634: LD_ADDR_EXP 8
2638: PUSH
2639: LD_STRING Yamoko
2641: PPUSH
2642: LD_INT 1
2644: PPUSH
2645: CALL 10799 0 2
2649: ST_TO_ADDR
2650: GO 2668
// Kikuchi = PrepareUnit ( 08_Kikuchi , true ) ;
2652: LD_ADDR_EXP 8
2656: PUSH
2657: LD_STRING 08_Kikuchi
2659: PPUSH
2660: LD_INT 1
2662: PPUSH
2663: CALL 10799 0 2
2667: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2668: LD_ADDR_EXP 22
2672: PUSH
2673: LD_STRING 09_others
2675: PPUSH
2676: CALL_OW 31
2680: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2681: LD_ADDR_EXP 23
2685: PUSH
2686: LD_STRING 09_apes
2688: PPUSH
2689: CALL_OW 31
2693: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2694: LD_EXP 11
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2709: LD_EXP 12
2713: PPUSH
2714: LD_INT 1
2716: PPUSH
2717: LD_INT 0
2719: PPUSH
2720: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2724: LD_EXP 13
2728: PPUSH
2729: LD_INT 1
2731: PPUSH
2732: LD_INT 0
2734: PPUSH
2735: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2739: LD_EXP 14
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_INT 0
2749: PPUSH
2750: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2754: LD_EXP 15
2758: PPUSH
2759: LD_INT 1
2761: PPUSH
2762: LD_INT 0
2764: PPUSH
2765: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2769: LD_EXP 17
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: LD_INT 0
2779: PPUSH
2780: CALL_OW 49
// if Kikuchi then
2784: LD_EXP 8
2788: IFFALSE 2805
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2790: LD_EXP 8
2794: PPUSH
2795: LD_INT 1
2797: PPUSH
2798: LD_INT 0
2800: PPUSH
2801: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2805: LD_EXP 11
2809: PUSH
2810: LD_EXP 14
2814: PUSH
2815: LD_EXP 12
2819: PUSH
2820: LD_EXP 15
2824: PUSH
2825: LD_EXP 17
2829: PUSH
2830: LD_EXP 13
2834: PUSH
2835: EMPTY
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: PPUSH
2843: LD_INT 4
2845: PPUSH
2846: CALL_OW 336
// if others09 > 2 then
2850: LD_EXP 22
2854: PUSH
2855: LD_INT 2
2857: GREATER
2858: IFFALSE 2939
// begin for i := 1 to 3 do
2860: LD_ADDR_VAR 0 2
2864: PUSH
2865: DOUBLE
2866: LD_INT 1
2868: DEC
2869: ST_TO_ADDR
2870: LD_INT 3
2872: PUSH
2873: FOR_TO
2874: IFFALSE 2935
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2876: LD_EXP 22
2880: PUSH
2881: LD_VAR 0 2
2885: ARRAY
2886: PPUSH
2887: LD_INT 1
2889: PPUSH
2890: LD_INT 0
2892: PPUSH
2893: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2897: LD_ADDR_EXP 22
2901: PUSH
2902: LD_EXP 22
2906: PPUSH
2907: LD_INT 1
2909: PPUSH
2910: CALL_OW 3
2914: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2915: LD_EXP 22
2919: PUSH
2920: LD_VAR 0 2
2924: ARRAY
2925: PPUSH
2926: LD_INT 2
2928: PPUSH
2929: CALL_OW 336
// end ;
2933: GO 2873
2935: POP
2936: POP
// end else
2937: GO 2999
// begin for i in others09 do
2939: LD_ADDR_VAR 0 2
2943: PUSH
2944: LD_EXP 22
2948: PUSH
2949: FOR_IN
2950: IFFALSE 2997
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2952: LD_VAR 0 2
2956: PPUSH
2957: LD_INT 1
2959: PPUSH
2960: LD_INT 0
2962: PPUSH
2963: CALL_OW 49
// others09 = others09 diff i ;
2967: LD_ADDR_EXP 22
2971: PUSH
2972: LD_EXP 22
2976: PUSH
2977: LD_VAR 0 2
2981: DIFF
2982: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2983: LD_VAR 0 2
2987: PPUSH
2988: LD_INT 2
2990: PPUSH
2991: CALL_OW 336
// end ;
2995: GO 2949
2997: POP
2998: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2999: LD_INT 22
3001: PUSH
3002: LD_INT 4
3004: PUSH
3005: EMPTY
3006: LIST
3007: LIST
3008: PUSH
3009: LD_INT 25
3011: PUSH
3012: LD_INT 2
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: EMPTY
3020: LIST
3021: LIST
3022: PPUSH
3023: CALL_OW 69
3027: PUSH
3028: LD_INT 0
3030: EQUAL
3031: IFFALSE 3163
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3033: LD_ADDR_VAR 0 3
3037: PUSH
3038: LD_INT 22
3040: PUSH
3041: LD_INT 4
3043: PUSH
3044: EMPTY
3045: LIST
3046: LIST
3047: PUSH
3048: LD_INT 25
3050: PUSH
3051: LD_INT 2
3053: PUSH
3054: EMPTY
3055: LIST
3056: LIST
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: PPUSH
3062: CALL_OW 69
3066: PUSH
3067: LD_EXP 11
3071: PUSH
3072: LD_EXP 14
3076: PUSH
3077: LD_EXP 12
3081: PUSH
3082: LD_EXP 15
3086: PUSH
3087: LD_EXP 17
3091: PUSH
3092: LD_EXP 13
3096: PUSH
3097: EMPTY
3098: LIST
3099: LIST
3100: LIST
3101: LIST
3102: LIST
3103: LIST
3104: DIFF
3105: ST_TO_ADDR
// if not tmp then
3106: LD_VAR 0 3
3110: NOT
3111: IFFALSE 3147
// begin if Denis then
3113: LD_EXP 12
3117: IFFALSE 3133
// SetClass ( Denis , 2 ) else
3119: LD_EXP 12
3123: PPUSH
3124: LD_INT 2
3126: PPUSH
3127: CALL_OW 336
3131: GO 3145
// SetClass ( DeltaDoctor , 2 ) ;
3133: LD_EXP 17
3137: PPUSH
3138: LD_INT 2
3140: PPUSH
3141: CALL_OW 336
// end else
3145: GO 3163
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3147: LD_VAR 0 3
3151: PUSH
3152: LD_INT 1
3154: ARRAY
3155: PPUSH
3156: LD_INT 2
3158: PPUSH
3159: CALL_OW 336
// end ; end ; for i in ape09 do
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 23
3172: PUSH
3173: FOR_IN
3174: IFFALSE 3193
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3176: LD_VAR 0 2
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: LD_INT 0
3186: PPUSH
3187: CALL_OW 49
3191: GO 3173
3193: POP
3194: POP
// uc_side = 4 ;
3195: LD_ADDR_OWVAR 20
3199: PUSH
3200: LD_INT 4
3202: ST_TO_ADDR
// hc_class := 1 ;
3203: LD_ADDR_OWVAR 28
3207: PUSH
3208: LD_INT 1
3210: ST_TO_ADDR
// hc_sex := sex_female ;
3211: LD_ADDR_OWVAR 27
3215: PUSH
3216: LD_INT 2
3218: ST_TO_ADDR
// hc_gallery :=  ;
3219: LD_ADDR_OWVAR 33
3223: PUSH
3224: LD_STRING 
3226: ST_TO_ADDR
// hc_name :=  ;
3227: LD_ADDR_OWVAR 26
3231: PUSH
3232: LD_STRING 
3234: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3235: LD_ADDR_OWVAR 31
3239: PUSH
3240: LD_INT 1
3242: PUSH
3243: LD_INT 7
3245: PUSH
3246: LD_INT 1
3248: PUSH
3249: LD_INT 0
3251: PUSH
3252: EMPTY
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: ST_TO_ADDR
// AmScout = CreateHuman ;
3258: LD_ADDR_EXP 18
3262: PUSH
3263: CALL_OW 44
3267: ST_TO_ADDR
// end ;
3268: LD_VAR 0 1
3272: RET
// export function PrepareCornell ; begin
3273: LD_INT 0
3275: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3276: LD_INT 4
3278: PPUSH
3279: LD_INT 4
3281: PPUSH
3282: CALL_OW 343
// uc_side = 4 ;
3286: LD_ADDR_OWVAR 20
3290: PUSH
3291: LD_INT 4
3293: ST_TO_ADDR
// uc_nation = 1 ;
3294: LD_ADDR_OWVAR 21
3298: PUSH
3299: LD_INT 1
3301: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
3302: LD_ADDR_EXP 19
3306: PUSH
3307: LD_STRING 03_Cornel
3309: PPUSH
3310: LD_INT 1
3312: PPUSH
3313: CALL 10799 0 2
3317: ST_TO_ADDR
// if not Cornell then
3318: LD_EXP 19
3322: NOT
3323: IFFALSE 3327
// exit ;
3325: GO 3435
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3327: LD_EXP 19
3331: PPUSH
3332: LD_INT 8
3334: PPUSH
3335: LD_INT 0
3337: PPUSH
3338: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3342: LD_EXP 19
3346: PPUSH
3347: LD_INT 350
3349: PPUSH
3350: CALL_OW 234
// if IsInUnit ( JMM ) then
3354: LD_EXP 1
3358: PPUSH
3359: CALL_OW 310
3363: IFFALSE 3406
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3365: LD_EXP 19
3369: PPUSH
3370: LD_EXP 1
3374: PPUSH
3375: CALL_OW 310
3379: PPUSH
3380: CALL_OW 250
3384: PPUSH
3385: LD_EXP 1
3389: PPUSH
3390: CALL_OW 310
3394: PPUSH
3395: CALL_OW 251
3399: PPUSH
3400: CALL_OW 111
3404: GO 3435
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3406: LD_EXP 19
3410: PPUSH
3411: LD_EXP 1
3415: PPUSH
3416: CALL_OW 250
3420: PPUSH
3421: LD_EXP 1
3425: PPUSH
3426: CALL_OW 251
3430: PPUSH
3431: CALL_OW 111
// end ; end_of_file
3435: LD_VAR 0 1
3439: RET
// export function PrepareRussians ; var i , un ; begin
3440: LD_INT 0
3442: PPUSH
3443: PPUSH
3444: PPUSH
// uc_side = 3 ;
3445: LD_ADDR_OWVAR 20
3449: PUSH
3450: LD_INT 3
3452: ST_TO_ADDR
// uc_nation = 3 ;
3453: LD_ADDR_OWVAR 21
3457: PUSH
3458: LD_INT 3
3460: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
3461: LD_ADDR_EXP 25
3465: PUSH
3466: LD_STRING Tsaritsyn
3468: PPUSH
3469: LD_INT 0
3471: PPUSH
3472: CALL 10799 0 2
3476: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3477: LD_EXP 25
3481: PPUSH
3482: LD_INT 3
3484: PPUSH
3485: LD_INT 0
3487: PPUSH
3488: CALL_OW 49
// for i = 1 to 14 do
3492: LD_ADDR_VAR 0 2
3496: PUSH
3497: DOUBLE
3498: LD_INT 1
3500: DEC
3501: ST_TO_ADDR
3502: LD_INT 14
3504: PUSH
3505: FOR_TO
3506: IFFALSE 3592
// begin uc_side = 3 ;
3508: LD_ADDR_OWVAR 20
3512: PUSH
3513: LD_INT 3
3515: ST_TO_ADDR
// uc_nation = 3 ;
3516: LD_ADDR_OWVAR 21
3520: PUSH
3521: LD_INT 3
3523: ST_TO_ADDR
// hc_gallery =  ;
3524: LD_ADDR_OWVAR 33
3528: PUSH
3529: LD_STRING 
3531: ST_TO_ADDR
// hc_name =  ;
3532: LD_ADDR_OWVAR 26
3536: PUSH
3537: LD_STRING 
3539: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3540: LD_INT 0
3542: PPUSH
3543: LD_INT 1
3545: PPUSH
3546: LD_EXP 36
3550: PPUSH
3551: LD_EXP 37
3555: PPUSH
3556: CALL_OW 12
3560: PPUSH
3561: CALL_OW 380
// un = CreateHuman ;
3565: LD_ADDR_VAR 0 3
3569: PUSH
3570: CALL_OW 44
3574: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3575: LD_VAR 0 3
3579: PPUSH
3580: LD_INT 3
3582: PPUSH
3583: LD_INT 0
3585: PPUSH
3586: CALL_OW 49
// end ;
3590: GO 3505
3592: POP
3593: POP
// for i = 1 to 6 do
3594: LD_ADDR_VAR 0 2
3598: PUSH
3599: DOUBLE
3600: LD_INT 1
3602: DEC
3603: ST_TO_ADDR
3604: LD_INT 6
3606: PUSH
3607: FOR_TO
3608: IFFALSE 3694
// begin uc_side = 3 ;
3610: LD_ADDR_OWVAR 20
3614: PUSH
3615: LD_INT 3
3617: ST_TO_ADDR
// uc_nation = 3 ;
3618: LD_ADDR_OWVAR 21
3622: PUSH
3623: LD_INT 3
3625: ST_TO_ADDR
// hc_gallery =  ;
3626: LD_ADDR_OWVAR 33
3630: PUSH
3631: LD_STRING 
3633: ST_TO_ADDR
// hc_name =  ;
3634: LD_ADDR_OWVAR 26
3638: PUSH
3639: LD_STRING 
3641: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3642: LD_INT 0
3644: PPUSH
3645: LD_INT 2
3647: PPUSH
3648: LD_EXP 36
3652: PPUSH
3653: LD_EXP 37
3657: PPUSH
3658: CALL_OW 12
3662: PPUSH
3663: CALL_OW 380
// un = CreateHuman ;
3667: LD_ADDR_VAR 0 3
3671: PUSH
3672: CALL_OW 44
3676: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3677: LD_VAR 0 3
3681: PPUSH
3682: LD_INT 3
3684: PPUSH
3685: LD_INT 0
3687: PPUSH
3688: CALL_OW 49
// end ;
3692: GO 3607
3694: POP
3695: POP
// for i = 1 to 6 do
3696: LD_ADDR_VAR 0 2
3700: PUSH
3701: DOUBLE
3702: LD_INT 1
3704: DEC
3705: ST_TO_ADDR
3706: LD_INT 6
3708: PUSH
3709: FOR_TO
3710: IFFALSE 3796
// begin uc_side = 3 ;
3712: LD_ADDR_OWVAR 20
3716: PUSH
3717: LD_INT 3
3719: ST_TO_ADDR
// uc_nation = 3 ;
3720: LD_ADDR_OWVAR 21
3724: PUSH
3725: LD_INT 3
3727: ST_TO_ADDR
// hc_gallery =  ;
3728: LD_ADDR_OWVAR 33
3732: PUSH
3733: LD_STRING 
3735: ST_TO_ADDR
// hc_name =  ;
3736: LD_ADDR_OWVAR 26
3740: PUSH
3741: LD_STRING 
3743: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3744: LD_INT 0
3746: PPUSH
3747: LD_INT 3
3749: PPUSH
3750: LD_EXP 36
3754: PPUSH
3755: LD_EXP 37
3759: PPUSH
3760: CALL_OW 12
3764: PPUSH
3765: CALL_OW 380
// un = CreateHuman ;
3769: LD_ADDR_VAR 0 3
3773: PUSH
3774: CALL_OW 44
3778: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3779: LD_VAR 0 3
3783: PPUSH
3784: LD_INT 3
3786: PPUSH
3787: LD_INT 0
3789: PPUSH
3790: CALL_OW 49
// end ;
3794: GO 3709
3796: POP
3797: POP
// for i = 1 to 4 do
3798: LD_ADDR_VAR 0 2
3802: PUSH
3803: DOUBLE
3804: LD_INT 1
3806: DEC
3807: ST_TO_ADDR
3808: LD_INT 4
3810: PUSH
3811: FOR_TO
3812: IFFALSE 3898
// begin uc_side = 3 ;
3814: LD_ADDR_OWVAR 20
3818: PUSH
3819: LD_INT 3
3821: ST_TO_ADDR
// uc_nation = 3 ;
3822: LD_ADDR_OWVAR 21
3826: PUSH
3827: LD_INT 3
3829: ST_TO_ADDR
// hc_gallery =  ;
3830: LD_ADDR_OWVAR 33
3834: PUSH
3835: LD_STRING 
3837: ST_TO_ADDR
// hc_name =  ;
3838: LD_ADDR_OWVAR 26
3842: PUSH
3843: LD_STRING 
3845: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3846: LD_INT 0
3848: PPUSH
3849: LD_INT 4
3851: PPUSH
3852: LD_EXP 36
3856: PPUSH
3857: LD_EXP 37
3861: PPUSH
3862: CALL_OW 12
3866: PPUSH
3867: CALL_OW 380
// un = CreateHuman ;
3871: LD_ADDR_VAR 0 3
3875: PUSH
3876: CALL_OW 44
3880: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3881: LD_VAR 0 3
3885: PPUSH
3886: LD_INT 3
3888: PPUSH
3889: LD_INT 0
3891: PPUSH
3892: CALL_OW 49
// end ;
3896: GO 3811
3898: POP
3899: POP
// end ; end_of_file
3900: LD_VAR 0 1
3904: RET
// export function PrepareArabianCommander ; begin
3905: LD_INT 0
3907: PPUSH
// uc_side = 2 ;
3908: LD_ADDR_OWVAR 20
3912: PUSH
3913: LD_INT 2
3915: ST_TO_ADDR
// uc_nation = 2 ;
3916: LD_ADDR_OWVAR 21
3920: PUSH
3921: LD_INT 2
3923: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3924: LD_ADDR_EXP 26
3928: PUSH
3929: LD_STRING Dietrich
3931: PPUSH
3932: CALL_OW 25
3936: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3937: LD_EXP 26
3941: PPUSH
3942: LD_INT 4
3944: PPUSH
3945: LD_INT 0
3947: PPUSH
3948: CALL_OW 49
// end ;
3952: LD_VAR 0 1
3956: RET
// export function PrepareArabian ; var i , un , veh ; begin
3957: LD_INT 0
3959: PPUSH
3960: PPUSH
3961: PPUSH
3962: PPUSH
// uc_side := 2 ;
3963: LD_ADDR_OWVAR 20
3967: PUSH
3968: LD_INT 2
3970: ST_TO_ADDR
// uc_nation := 2 ;
3971: LD_ADDR_OWVAR 21
3975: PUSH
3976: LD_INT 2
3978: ST_TO_ADDR
// if not Ahmed then
3979: LD_EXP 27
3983: NOT
3984: IFFALSE 4052
// begin InitHc ;
3986: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3990: LD_INT 1
3992: PPUSH
3993: LD_INT 1
3995: PPUSH
3996: LD_EXP 36
4000: PPUSH
4001: LD_EXP 37
4005: PUSH
4006: LD_INT 1
4008: PLUS
4009: PPUSH
4010: CALL_OW 12
4014: PPUSH
4015: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4019: LD_ADDR_OWVAR 26
4023: PUSH
4024: LD_STRING Ahmed Abbasid
4026: ST_TO_ADDR
// Ahmed := CreateHuman ;
4027: LD_ADDR_EXP 27
4031: PUSH
4032: CALL_OW 44
4036: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4037: LD_EXP 27
4041: PPUSH
4042: LD_INT 4
4044: PPUSH
4045: LD_INT 0
4047: PPUSH
4048: CALL_OW 49
// end ; for i = 1 to 4 do
4052: LD_ADDR_VAR 0 2
4056: PUSH
4057: DOUBLE
4058: LD_INT 1
4060: DEC
4061: ST_TO_ADDR
4062: LD_INT 4
4064: PUSH
4065: FOR_TO
4066: IFFALSE 4152
// begin uc_side = 2 ;
4068: LD_ADDR_OWVAR 20
4072: PUSH
4073: LD_INT 2
4075: ST_TO_ADDR
// uc_nation = 2 ;
4076: LD_ADDR_OWVAR 21
4080: PUSH
4081: LD_INT 2
4083: ST_TO_ADDR
// hc_gallery =  ;
4084: LD_ADDR_OWVAR 33
4088: PUSH
4089: LD_STRING 
4091: ST_TO_ADDR
// hc_name =  ;
4092: LD_ADDR_OWVAR 26
4096: PUSH
4097: LD_STRING 
4099: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4100: LD_INT 0
4102: PPUSH
4103: LD_INT 2
4105: PPUSH
4106: LD_EXP 36
4110: PPUSH
4111: LD_EXP 37
4115: PPUSH
4116: CALL_OW 12
4120: PPUSH
4121: CALL_OW 380
// un = CreateHuman ;
4125: LD_ADDR_VAR 0 3
4129: PUSH
4130: CALL_OW 44
4134: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4135: LD_VAR 0 3
4139: PPUSH
4140: LD_INT 4
4142: PPUSH
4143: LD_INT 0
4145: PPUSH
4146: CALL_OW 49
// end ;
4150: GO 4065
4152: POP
4153: POP
// for i = 1 to 5 do
4154: LD_ADDR_VAR 0 2
4158: PUSH
4159: DOUBLE
4160: LD_INT 1
4162: DEC
4163: ST_TO_ADDR
4164: LD_INT 5
4166: PUSH
4167: FOR_TO
4168: IFFALSE 4254
// begin uc_side = 2 ;
4170: LD_ADDR_OWVAR 20
4174: PUSH
4175: LD_INT 2
4177: ST_TO_ADDR
// uc_nation = 2 ;
4178: LD_ADDR_OWVAR 21
4182: PUSH
4183: LD_INT 2
4185: ST_TO_ADDR
// hc_gallery =  ;
4186: LD_ADDR_OWVAR 33
4190: PUSH
4191: LD_STRING 
4193: ST_TO_ADDR
// hc_name =  ;
4194: LD_ADDR_OWVAR 26
4198: PUSH
4199: LD_STRING 
4201: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4202: LD_INT 0
4204: PPUSH
4205: LD_INT 1
4207: PPUSH
4208: LD_EXP 36
4212: PPUSH
4213: LD_EXP 37
4217: PPUSH
4218: CALL_OW 12
4222: PPUSH
4223: CALL_OW 380
// un = CreateHuman ;
4227: LD_ADDR_VAR 0 3
4231: PUSH
4232: CALL_OW 44
4236: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4237: LD_VAR 0 3
4241: PPUSH
4242: LD_INT 4
4244: PPUSH
4245: LD_INT 0
4247: PPUSH
4248: CALL_OW 49
// end ;
4252: GO 4167
4254: POP
4255: POP
// for i = 1 to [ 3 , 4 , 4 ] [ Difficulty ] do
4256: LD_ADDR_VAR 0 2
4260: PUSH
4261: DOUBLE
4262: LD_INT 1
4264: DEC
4265: ST_TO_ADDR
4266: LD_INT 3
4268: PUSH
4269: LD_INT 4
4271: PUSH
4272: LD_INT 4
4274: PUSH
4275: EMPTY
4276: LIST
4277: LIST
4278: LIST
4279: PUSH
4280: LD_OWVAR 67
4284: ARRAY
4285: PUSH
4286: FOR_TO
4287: IFFALSE 4373
// begin uc_side = 2 ;
4289: LD_ADDR_OWVAR 20
4293: PUSH
4294: LD_INT 2
4296: ST_TO_ADDR
// uc_nation = 2 ;
4297: LD_ADDR_OWVAR 21
4301: PUSH
4302: LD_INT 2
4304: ST_TO_ADDR
// hc_gallery =  ;
4305: LD_ADDR_OWVAR 33
4309: PUSH
4310: LD_STRING 
4312: ST_TO_ADDR
// hc_name =  ;
4313: LD_ADDR_OWVAR 26
4317: PUSH
4318: LD_STRING 
4320: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4321: LD_INT 0
4323: PPUSH
4324: LD_INT 4
4326: PPUSH
4327: LD_EXP 36
4331: PPUSH
4332: LD_EXP 37
4336: PPUSH
4337: CALL_OW 12
4341: PPUSH
4342: CALL_OW 380
// un = CreateHuman ;
4346: LD_ADDR_VAR 0 3
4350: PUSH
4351: CALL_OW 44
4355: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4356: LD_VAR 0 3
4360: PPUSH
4361: LD_INT 4
4363: PPUSH
4364: LD_INT 0
4366: PPUSH
4367: CALL_OW 49
// end ;
4371: GO 4286
4373: POP
4374: POP
// for i = 1 to 2 do
4375: LD_ADDR_VAR 0 2
4379: PUSH
4380: DOUBLE
4381: LD_INT 1
4383: DEC
4384: ST_TO_ADDR
4385: LD_INT 2
4387: PUSH
4388: FOR_TO
4389: IFFALSE 4519
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4391: LD_ADDR_VAR 0 4
4395: PUSH
4396: LD_INT 22
4398: PUSH
4399: LD_INT 2
4401: PUSH
4402: EMPTY
4403: LIST
4404: LIST
4405: PUSH
4406: LD_INT 21
4408: PUSH
4409: LD_INT 2
4411: PUSH
4412: EMPTY
4413: LIST
4414: LIST
4415: PUSH
4416: LD_INT 58
4418: PUSH
4419: EMPTY
4420: LIST
4421: PUSH
4422: EMPTY
4423: LIST
4424: LIST
4425: LIST
4426: PPUSH
4427: CALL_OW 69
4431: ST_TO_ADDR
// uc_side = 2 ;
4432: LD_ADDR_OWVAR 20
4436: PUSH
4437: LD_INT 2
4439: ST_TO_ADDR
// uc_nation = 2 ;
4440: LD_ADDR_OWVAR 21
4444: PUSH
4445: LD_INT 2
4447: ST_TO_ADDR
// hc_gallery =  ;
4448: LD_ADDR_OWVAR 33
4452: PUSH
4453: LD_STRING 
4455: ST_TO_ADDR
// hc_name =  ;
4456: LD_ADDR_OWVAR 26
4460: PUSH
4461: LD_STRING 
4463: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4464: LD_INT 0
4466: PPUSH
4467: LD_INT 3
4469: PPUSH
4470: LD_EXP 36
4474: PPUSH
4475: LD_EXP 37
4479: PPUSH
4480: CALL_OW 12
4484: PPUSH
4485: CALL_OW 380
// un = CreateHuman ;
4489: LD_ADDR_VAR 0 3
4493: PUSH
4494: CALL_OW 44
4498: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4499: LD_VAR 0 3
4503: PPUSH
4504: LD_VAR 0 4
4508: PUSH
4509: LD_INT 1
4511: ARRAY
4512: PPUSH
4513: CALL_OW 52
// end ;
4517: GO 4388
4519: POP
4520: POP
// end ;
4521: LD_VAR 0 1
4525: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4526: LD_INT 0
4528: PPUSH
4529: PPUSH
4530: PPUSH
4531: PPUSH
4532: PPUSH
4533: PPUSH
// for i := 1 to 2 do
4534: LD_ADDR_VAR 0 2
4538: PUSH
4539: DOUBLE
4540: LD_INT 1
4542: DEC
4543: ST_TO_ADDR
4544: LD_INT 2
4546: PUSH
4547: FOR_TO
4548: IFFALSE 4674
// begin uc_side = 5 ;
4550: LD_ADDR_OWVAR 20
4554: PUSH
4555: LD_INT 5
4557: ST_TO_ADDR
// uc_nation = 2 ;
4558: LD_ADDR_OWVAR 21
4562: PUSH
4563: LD_INT 2
4565: ST_TO_ADDR
// vc_chassis := 31 ;
4566: LD_ADDR_OWVAR 37
4570: PUSH
4571: LD_INT 31
4573: ST_TO_ADDR
// vc_control := control_rider ;
4574: LD_ADDR_OWVAR 38
4578: PUSH
4579: LD_INT 4
4581: ST_TO_ADDR
// animal := CreateVehicle ;
4582: LD_ADDR_VAR 0 3
4586: PUSH
4587: CALL_OW 45
4591: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4592: LD_VAR 0 3
4596: PPUSH
4597: LD_INT 7
4599: PPUSH
4600: LD_INT 0
4602: PPUSH
4603: CALL_OW 49
// hc_gallery =  ;
4607: LD_ADDR_OWVAR 33
4611: PUSH
4612: LD_STRING 
4614: ST_TO_ADDR
// hc_name =  ;
4615: LD_ADDR_OWVAR 26
4619: PUSH
4620: LD_STRING 
4622: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4623: LD_INT 0
4625: PPUSH
4626: LD_INT 11
4628: PPUSH
4629: LD_EXP 36
4633: PPUSH
4634: LD_EXP 37
4638: PPUSH
4639: CALL_OW 12
4643: PPUSH
4644: CALL_OW 380
// un = CreateHuman ;
4648: LD_ADDR_VAR 0 4
4652: PUSH
4653: CALL_OW 44
4657: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4658: LD_VAR 0 4
4662: PPUSH
4663: LD_VAR 0 3
4667: PPUSH
4668: CALL_OW 52
// end ;
4672: GO 4547
4674: POP
4675: POP
// repeat wait ( 0 0$1 ) ;
4676: LD_INT 35
4678: PPUSH
4679: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4683: LD_ADDR_VAR 0 5
4687: PUSH
4688: LD_INT 22
4690: PUSH
4691: LD_INT 1
4693: PUSH
4694: EMPTY
4695: LIST
4696: LIST
4697: PPUSH
4698: CALL_OW 69
4702: PPUSH
4703: LD_VAR 0 2
4707: PPUSH
4708: CALL_OW 74
4712: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4713: LD_ADDR_VAR 0 6
4717: PUSH
4718: LD_INT 22
4720: PUSH
4721: LD_INT 1
4723: PUSH
4724: EMPTY
4725: LIST
4726: LIST
4727: PUSH
4728: LD_INT 2
4730: PUSH
4731: LD_INT 59
4733: PUSH
4734: EMPTY
4735: LIST
4736: PUSH
4737: LD_INT 21
4739: PUSH
4740: LD_INT 1
4742: PUSH
4743: EMPTY
4744: LIST
4745: LIST
4746: PUSH
4747: LD_INT 21
4749: PUSH
4750: LD_INT 2
4752: PUSH
4753: EMPTY
4754: LIST
4755: LIST
4756: PUSH
4757: EMPTY
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PUSH
4763: EMPTY
4764: LIST
4765: LIST
4766: PUSH
4767: EMPTY
4768: LIST
4769: PPUSH
4770: CALL_OW 69
4774: PPUSH
4775: LD_VAR 0 2
4779: PPUSH
4780: CALL_OW 74
4784: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4785: LD_ADDR_VAR 0 2
4789: PUSH
4790: LD_INT 22
4792: PUSH
4793: LD_INT 5
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: PUSH
4800: LD_INT 25
4802: PUSH
4803: LD_INT 11
4805: PUSH
4806: EMPTY
4807: LIST
4808: LIST
4809: PUSH
4810: EMPTY
4811: LIST
4812: LIST
4813: PPUSH
4814: CALL_OW 69
4818: PUSH
4819: FOR_IN
4820: IFFALSE 4890
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4822: LD_VAR 0 2
4826: PPUSH
4827: LD_VAR 0 5
4831: PPUSH
4832: CALL_OW 296
4836: PUSH
4837: LD_INT 8
4839: PLUS
4840: PUSH
4841: LD_VAR 0 2
4845: PPUSH
4846: LD_VAR 0 6
4850: PPUSH
4851: CALL_OW 296
4855: LESS
4856: IFFALSE 4874
// ComAttackUnit ( i , target1 ) else
4858: LD_VAR 0 2
4862: PPUSH
4863: LD_VAR 0 5
4867: PPUSH
4868: CALL_OW 115
4872: GO 4888
// ComAttackUnit ( i , target2 ) ;
4874: LD_VAR 0 2
4878: PPUSH
4879: LD_VAR 0 6
4883: PPUSH
4884: CALL_OW 115
// end ;
4888: GO 4819
4890: POP
4891: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4892: LD_INT 22
4894: PUSH
4895: LD_INT 5
4897: PUSH
4898: EMPTY
4899: LIST
4900: LIST
4901: PUSH
4902: LD_INT 25
4904: PUSH
4905: LD_INT 11
4907: PUSH
4908: EMPTY
4909: LIST
4910: LIST
4911: PUSH
4912: EMPTY
4913: LIST
4914: LIST
4915: PPUSH
4916: CALL_OW 69
4920: PUSH
4921: LD_INT 0
4923: EQUAL
4924: PUSH
4925: LD_INT 22
4927: PUSH
4928: LD_INT 1
4930: PUSH
4931: EMPTY
4932: LIST
4933: LIST
4934: PPUSH
4935: CALL_OW 69
4939: PUSH
4940: LD_INT 0
4942: EQUAL
4943: OR
4944: IFFALSE 4676
// end ; end_of_file
4946: LD_VAR 0 1
4950: RET
// every 1 do
4951: GO 4953
4953: DISABLE
// begin InGameOn ;
4954: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4958: LD_INT 1
4960: PPUSH
4961: LD_INT 19
4963: PPUSH
4964: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4968: LD_EXP 11
4972: PPUSH
4973: CALL_OW 87
// wait ( 0 0$3 ) ;
4977: LD_INT 105
4979: PPUSH
4980: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4984: LD_EXP 1
4988: PPUSH
4989: CALL_OW 310
4993: PPUSH
4994: CALL_OW 85
// Wait ( 0 0$1 ) ;
4998: LD_INT 35
5000: PPUSH
5001: CALL_OW 67
// if IsOk ( Gary ) then
5005: LD_EXP 10
5009: PPUSH
5010: CALL_OW 302
5014: IFFALSE 5052
// begin Say ( Gary , D2-Gary-1 ) ;
5016: LD_EXP 10
5020: PPUSH
5021: LD_STRING D2-Gary-1
5023: PPUSH
5024: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5028: LD_EXP 1
5032: PPUSH
5033: LD_STRING D2-JMM-1
5035: PPUSH
5036: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5040: LD_EXP 10
5044: PPUSH
5045: LD_STRING D2-Gary-2
5047: PPUSH
5048: CALL_OW 88
// end ; InGameOff ;
5052: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
5056: LD_STRING M1
5058: PPUSH
5059: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5063: LD_INT 38
5065: PPUSH
5066: LD_INT 1
5068: PPUSH
5069: LD_INT 100
5071: PPUSH
5072: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5076: LD_INT 47
5078: PPUSH
5079: LD_INT 1
5081: PPUSH
5082: LD_INT 50
5084: PPUSH
5085: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5089: LD_INT 47
5091: PPUSH
5092: LD_INT 3
5094: PPUSH
5095: LD_INT 50
5097: PPUSH
5098: CALL_OW 291
// SaveForQuickRestart ;
5102: CALL_OW 22
// end ;
5106: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5107: LD_EXP 1
5111: PPUSH
5112: LD_EXP 11
5116: PPUSH
5117: CALL_OW 296
5121: PUSH
5122: LD_INT 15
5124: LESS
5125: IFFALSE 5703
5127: GO 5129
5129: DISABLE
5130: LD_INT 0
5132: PPUSH
// begin wait ( 0 0$3 ) ;
5133: LD_INT 105
5135: PPUSH
5136: CALL_OW 67
// InGameOn ;
5140: CALL_OW 8
// ComExitVehicle ( JMM ) ;
5144: LD_EXP 1
5148: PPUSH
5149: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5153: LD_EXP 1
5157: PPUSH
5158: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5162: LD_EXP 1
5166: PPUSH
5167: LD_EXP 11
5171: PPUSH
5172: CALL_OW 179
// p := 15 ;
5176: LD_ADDR_VAR 0 1
5180: PUSH
5181: LD_INT 15
5183: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5184: LD_INT 35
5186: PPUSH
5187: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5191: LD_EXP 11
5195: PUSH
5196: LD_EXP 13
5200: PUSH
5201: LD_EXP 12
5205: PUSH
5206: LD_EXP 14
5210: PUSH
5211: LD_EXP 8
5215: PUSH
5216: EMPTY
5217: LIST
5218: LIST
5219: LIST
5220: LIST
5221: LIST
5222: PPUSH
5223: LD_EXP 1
5227: PPUSH
5228: CALL_OW 112
// p := p - 1 ;
5232: LD_ADDR_VAR 0 1
5236: PUSH
5237: LD_VAR 0 1
5241: PUSH
5242: LD_INT 1
5244: MINUS
5245: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5246: LD_EXP 1
5250: PPUSH
5251: LD_EXP 11
5255: PPUSH
5256: CALL_OW 296
5260: PUSH
5261: LD_INT 5
5263: LESS
5264: PUSH
5265: LD_VAR 0 1
5269: PUSH
5270: LD_INT 0
5272: LESSEQUAL
5273: OR
5274: IFFALSE 5184
// if not IsInUnit ( JMM ) then
5276: LD_EXP 1
5280: PPUSH
5281: CALL_OW 310
5285: NOT
5286: IFFALSE 5302
// ComTurnUnit ( JMM , Simms ) ;
5288: LD_EXP 1
5292: PPUSH
5293: LD_EXP 11
5297: PPUSH
5298: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5302: LD_EXP 11
5306: PUSH
5307: LD_EXP 13
5311: PUSH
5312: LD_EXP 12
5316: PUSH
5317: LD_EXP 14
5321: PUSH
5322: EMPTY
5323: LIST
5324: LIST
5325: LIST
5326: LIST
5327: PPUSH
5328: LD_EXP 1
5332: PPUSH
5333: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5337: LD_EXP 1
5341: PUSH
5342: LD_EXP 11
5346: PUSH
5347: EMPTY
5348: LIST
5349: LIST
5350: PPUSH
5351: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5355: LD_EXP 11
5359: PPUSH
5360: LD_STRING D2a-Sim-1
5362: PPUSH
5363: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5367: LD_EXP 1
5371: PPUSH
5372: LD_STRING D2a-JMM-1
5374: PPUSH
5375: CALL_OW 88
// if IsOk ( Joan ) then
5379: LD_EXP 13
5383: PPUSH
5384: CALL_OW 302
5388: IFFALSE 5452
// begin if not IsInUnit ( JMM ) then
5390: LD_EXP 1
5394: PPUSH
5395: CALL_OW 310
5399: NOT
5400: IFFALSE 5416
// ComTurnUnit ( JMM , Joan ) ;
5402: LD_EXP 1
5406: PPUSH
5407: LD_EXP 13
5411: PPUSH
5412: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5416: LD_EXP 13
5420: PPUSH
5421: LD_STRING D2b-Joan-1
5423: PPUSH
5424: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5428: LD_EXP 1
5432: PPUSH
5433: LD_STRING D2b-JMM-1
5435: PPUSH
5436: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5440: LD_EXP 13
5444: PPUSH
5445: LD_STRING D2b-Joan-2
5447: PPUSH
5448: CALL_OW 88
// end ; if IsOk ( Denis ) then
5452: LD_EXP 12
5456: PPUSH
5457: CALL_OW 302
5461: IFFALSE 5501
// begin if not IsInUnit ( JMM ) then
5463: LD_EXP 1
5467: PPUSH
5468: CALL_OW 310
5472: NOT
5473: IFFALSE 5489
// ComTurnUnit ( JMM , Denis ) ;
5475: LD_EXP 1
5479: PPUSH
5480: LD_EXP 12
5484: PPUSH
5485: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5489: LD_EXP 12
5493: PPUSH
5494: LD_STRING D2c-Den-1
5496: PPUSH
5497: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5501: LD_EXP 8
5505: PPUSH
5506: CALL_OW 302
5510: PUSH
5511: LD_STRING 08_Kikuchi
5513: PPUSH
5514: CALL_OW 28
5518: NOT
5519: AND
5520: IFFALSE 5601
// begin repeat wait ( 0 0$1 ) ;
5522: LD_INT 35
5524: PPUSH
5525: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5529: LD_EXP 8
5533: PPUSH
5534: LD_EXP 1
5538: PPUSH
5539: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5543: LD_EXP 1
5547: PPUSH
5548: LD_EXP 8
5552: PPUSH
5553: CALL_OW 296
5557: PUSH
5558: LD_INT 5
5560: LESS
5561: IFFALSE 5522
// if not IsInUnit ( JMM ) then
5563: LD_EXP 1
5567: PPUSH
5568: CALL_OW 310
5572: NOT
5573: IFFALSE 5589
// ComTurnUnit ( JMM , Kikuchi ) ;
5575: LD_EXP 1
5579: PPUSH
5580: LD_EXP 8
5584: PPUSH
5585: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5589: LD_EXP 8
5593: PPUSH
5594: LD_STRING D3b-Yam-1
5596: PPUSH
5597: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5601: LD_EXP 14
5605: PPUSH
5606: CALL_OW 302
5610: IFFALSE 5662
// begin if not IsInUnit ( JMM ) then
5612: LD_EXP 1
5616: PPUSH
5617: CALL_OW 310
5621: NOT
5622: IFFALSE 5638
// ComTurnUnit ( JMM , Khatam ) ;
5624: LD_EXP 1
5628: PPUSH
5629: LD_EXP 14
5633: PPUSH
5634: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5638: LD_EXP 1
5642: PPUSH
5643: LD_STRING D2c-JMM-1
5645: PPUSH
5646: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5650: LD_EXP 14
5654: PPUSH
5655: LD_STRING D2c-Khat-1
5657: PPUSH
5658: CALL_OW 88
// end ; InGameOff ;
5662: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5666: LD_INT 22
5668: PUSH
5669: LD_INT 4
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: PPUSH
5676: CALL_OW 69
5680: PPUSH
5681: LD_INT 1
5683: PPUSH
5684: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5688: LD_STRING M1a
5690: PPUSH
5691: CALL_OW 337
// joinEpsilon = 1 ;
5695: LD_ADDR_EXP 29
5699: PUSH
5700: LD_INT 1
5702: ST_TO_ADDR
// end ;
5703: PPOPN 1
5705: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
5706: LD_INT 38
5708: PPUSH
5709: LD_INT 1
5711: PPUSH
5712: CALL_OW 289
5716: PUSH
5717: LD_INT 0
5719: EQUAL
5720: PUSH
5721: LD_INT 47
5723: PPUSH
5724: LD_INT 1
5726: PPUSH
5727: CALL_OW 289
5731: PUSH
5732: LD_INT 0
5734: EQUAL
5735: AND
5736: PUSH
5737: LD_INT 47
5739: PPUSH
5740: LD_INT 2
5742: PPUSH
5743: CALL_OW 289
5747: PUSH
5748: LD_INT 0
5750: EQUAL
5751: AND
5752: IFFALSE 5877
5754: GO 5756
5756: DISABLE
5757: LD_INT 0
5759: PPUSH
// begin p := 0 ;
5760: LD_ADDR_VAR 0 1
5764: PUSH
5765: LD_INT 0
5767: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
5768: LD_INT 38
5770: PUSH
5771: LD_INT 47
5773: PUSH
5774: EMPTY
5775: LIST
5776: LIST
5777: PPUSH
5778: LD_INT 56
5780: PPUSH
5781: LD_INT 0
5783: PPUSH
5784: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5788: LD_INT 35
5790: PPUSH
5791: CALL_OW 67
// p := p + 1 ;
5795: LD_ADDR_VAR 0 1
5799: PUSH
5800: LD_VAR 0 1
5804: PUSH
5805: LD_INT 1
5807: PLUS
5808: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
5809: LD_INT 38
5811: PUSH
5812: LD_INT 47
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: PPUSH
5819: LD_INT 56
5821: PPUSH
5822: LD_INT 0
5824: PPUSH
5825: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
5829: LD_INT 38
5831: PPUSH
5832: LD_INT 27
5834: PPUSH
5835: CALL_OW 308
5839: IFFALSE 5848
// RemoveUnit ( cargo1 ) ;
5841: LD_INT 38
5843: PPUSH
5844: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
5848: LD_INT 47
5850: PPUSH
5851: LD_INT 27
5853: PPUSH
5854: CALL_OW 308
5858: IFFALSE 5867
// RemoveUnit ( cargo2 ) ;
5860: LD_INT 47
5862: PPUSH
5863: CALL_OW 64
// until p > 30 ;
5867: LD_VAR 0 1
5871: PUSH
5872: LD_INT 30
5874: GREATER
5875: IFFALSE 5788
// end ;
5877: PPOPN 1
5879: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
5880: LD_EXP 63
5884: PUSH
5885: LD_INT 1
5887: EQUAL
5888: IFFALSE 7020
5890: GO 5892
5892: DISABLE
5893: LD_INT 0
5895: PPUSH
5896: PPUSH
5897: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5898: LD_ADDR_VAR 0 1
5902: PUSH
5903: LD_INT 22
5905: PUSH
5906: LD_INT 1
5908: PUSH
5909: EMPTY
5910: LIST
5911: LIST
5912: PUSH
5913: LD_INT 25
5915: PUSH
5916: LD_INT 4
5918: PUSH
5919: EMPTY
5920: LIST
5921: LIST
5922: PUSH
5923: LD_INT 26
5925: PUSH
5926: LD_INT 1
5928: PUSH
5929: EMPTY
5930: LIST
5931: LIST
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: LIST
5937: PPUSH
5938: CALL_OW 69
5942: PUSH
5943: LD_EXP 1
5947: PUSH
5948: LD_EXP 2
5952: PUSH
5953: LD_EXP 3
5957: PUSH
5958: LD_EXP 4
5962: PUSH
5963: LD_EXP 5
5967: PUSH
5968: LD_EXP 6
5972: PUSH
5973: LD_EXP 7
5977: PUSH
5978: LD_EXP 8
5982: PUSH
5983: LD_EXP 9
5987: PUSH
5988: LD_EXP 10
5992: PUSH
5993: LD_EXP 11
5997: PUSH
5998: LD_EXP 12
6002: PUSH
6003: LD_EXP 13
6007: PUSH
6008: LD_EXP 14
6012: PUSH
6013: LD_EXP 15
6017: PUSH
6018: LD_EXP 16
6022: PUSH
6023: LD_EXP 17
6027: PUSH
6028: LD_EXP 18
6032: PUSH
6033: LD_EXP 19
6037: PUSH
6038: LD_EXP 24
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: LIST
6047: LIST
6048: LIST
6049: LIST
6050: LIST
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: DIFF
6065: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6066: LD_ADDR_VAR 0 2
6070: PUSH
6071: LD_INT 22
6073: PUSH
6074: LD_INT 1
6076: PUSH
6077: EMPTY
6078: LIST
6079: LIST
6080: PUSH
6081: LD_INT 26
6083: PUSH
6084: LD_INT 1
6086: PUSH
6087: EMPTY
6088: LIST
6089: LIST
6090: PUSH
6091: LD_INT 2
6093: PUSH
6094: LD_INT 25
6096: PUSH
6097: LD_INT 1
6099: PUSH
6100: EMPTY
6101: LIST
6102: LIST
6103: PUSH
6104: LD_INT 25
6106: PUSH
6107: LD_INT 2
6109: PUSH
6110: EMPTY
6111: LIST
6112: LIST
6113: PUSH
6114: LD_INT 25
6116: PUSH
6117: LD_INT 3
6119: PUSH
6120: EMPTY
6121: LIST
6122: LIST
6123: PUSH
6124: EMPTY
6125: LIST
6126: LIST
6127: LIST
6128: LIST
6129: PUSH
6130: EMPTY
6131: LIST
6132: LIST
6133: LIST
6134: PPUSH
6135: CALL_OW 69
6139: PUSH
6140: LD_EXP 1
6144: PUSH
6145: LD_EXP 2
6149: PUSH
6150: LD_EXP 3
6154: PUSH
6155: LD_EXP 4
6159: PUSH
6160: LD_EXP 5
6164: PUSH
6165: LD_EXP 6
6169: PUSH
6170: LD_EXP 7
6174: PUSH
6175: LD_EXP 8
6179: PUSH
6180: LD_EXP 9
6184: PUSH
6185: LD_EXP 10
6189: PUSH
6190: LD_EXP 11
6194: PUSH
6195: LD_EXP 12
6199: PUSH
6200: LD_EXP 13
6204: PUSH
6205: LD_EXP 14
6209: PUSH
6210: LD_EXP 15
6214: PUSH
6215: LD_EXP 16
6219: PUSH
6220: LD_EXP 17
6224: PUSH
6225: LD_EXP 18
6229: PUSH
6230: LD_EXP 19
6234: PUSH
6235: LD_EXP 24
6239: PUSH
6240: EMPTY
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: DIFF
6262: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6263: LD_EXP 10
6267: PUSH
6268: LD_VAR 0 2
6272: OR
6273: PUSH
6274: LD_EXP 17
6278: PUSH
6279: LD_VAR 0 1
6283: OR
6284: AND
6285: IFFALSE 6504
// begin DialogueOn ;
6287: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6291: LD_EXP 17
6295: PPUSH
6296: CALL_OW 302
6300: IFFALSE 6316
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6302: LD_EXP 17
6306: PPUSH
6307: LD_STRING D3-Sci1-1
6309: PPUSH
6310: CALL_OW 88
6314: GO 6328
// Say ( tmp1 , D3-Sci1-1 ) ;
6316: LD_VAR 0 1
6320: PPUSH
6321: LD_STRING D3-Sci1-1
6323: PPUSH
6324: CALL_OW 88
// if IsOk ( Gary ) then
6328: LD_EXP 10
6332: PPUSH
6333: CALL_OW 302
6337: IFFALSE 6353
// Say ( Gary , D3-Gary-1 ) else
6339: LD_EXP 10
6343: PPUSH
6344: LD_STRING D3-Gary-1
6346: PPUSH
6347: CALL_OW 88
6351: GO 6365
// Say ( tmp2 , D3-Gary-1 ) ;
6353: LD_VAR 0 2
6357: PPUSH
6358: LD_STRING D3-Gary-1
6360: PPUSH
6361: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6365: LD_EXP 17
6369: PPUSH
6370: CALL_OW 302
6374: IFFALSE 6390
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6376: LD_EXP 17
6380: PPUSH
6381: LD_STRING D3-Sci1-2
6383: PPUSH
6384: CALL_OW 88
6388: GO 6402
// Say ( tmp1 , D3-Sci1-2 ) ;
6390: LD_VAR 0 1
6394: PPUSH
6395: LD_STRING D3-Sci1-2
6397: PPUSH
6398: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6402: LD_EXP 1
6406: PPUSH
6407: LD_STRING D3-JMM-2
6409: PPUSH
6410: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6414: LD_EXP 17
6418: PPUSH
6419: CALL_OW 302
6423: IFFALSE 6439
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6425: LD_EXP 17
6429: PPUSH
6430: LD_STRING D3-Sci1-3
6432: PPUSH
6433: CALL_OW 88
6437: GO 6451
// Say ( tmp1 , D3-Sci1-3 ) ;
6439: LD_VAR 0 1
6443: PPUSH
6444: LD_STRING D3-Sci1-3
6446: PPUSH
6447: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6451: LD_EXP 1
6455: PPUSH
6456: LD_STRING D3-JMM-3
6458: PPUSH
6459: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6463: LD_EXP 17
6467: PPUSH
6468: CALL_OW 302
6472: IFFALSE 6488
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6474: LD_EXP 17
6478: PPUSH
6479: LD_STRING D3-Sci1-4
6481: PPUSH
6482: CALL_OW 88
6486: GO 6500
// Say ( tmp1 , D3-Sci1-4 ) ;
6488: LD_VAR 0 1
6492: PPUSH
6493: LD_STRING D3-Sci1-4
6495: PPUSH
6496: CALL_OW 88
// DialogueOff ;
6500: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6504: LD_INT 12
6506: PPUSH
6507: LD_INT 1
6509: PPUSH
6510: LD_INT 1
6512: PPUSH
6513: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6517: LD_INT 32
6519: PPUSH
6520: LD_INT 1
6522: PPUSH
6523: LD_INT 1
6525: PPUSH
6526: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6530: LD_INT 12
6532: PPUSH
6533: LD_INT 1
6535: PPUSH
6536: LD_INT 1
6538: PPUSH
6539: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6543: LD_INT 33
6545: PPUSH
6546: LD_INT 1
6548: PPUSH
6549: LD_INT 1
6551: PPUSH
6552: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6556: LD_STRING M2
6558: PPUSH
6559: CALL_OW 337
// wait ( 3 3$0 ) ;
6563: LD_INT 6300
6565: PPUSH
6566: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6570: LD_INT 35
6572: PPUSH
6573: CALL_OW 67
// until not InBattle ( 1 ) ;
6577: LD_INT 1
6579: PPUSH
6580: CALL_OW 463
6584: NOT
6585: IFFALSE 6570
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6587: LD_EXP 11
6591: PPUSH
6592: CALL_OW 302
6596: PUSH
6597: LD_EXP 17
6601: PPUSH
6602: CALL_OW 302
6606: AND
6607: IFFALSE 6776
// begin DialogueOn ;
6609: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6613: LD_EXP 11
6617: PPUSH
6618: LD_STRING D3a-Sim-1
6620: PPUSH
6621: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6625: LD_EXP 17
6629: PPUSH
6630: LD_STRING D3a-Sci1-1
6632: PPUSH
6633: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6637: LD_EXP 11
6641: PPUSH
6642: LD_STRING D3a-Sim-2
6644: PPUSH
6645: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6649: LD_EXP 17
6653: PPUSH
6654: LD_STRING D3a-Sci1-2
6656: PPUSH
6657: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6661: LD_EXP 11
6665: PPUSH
6666: LD_STRING D3a-Sim-3
6668: PPUSH
6669: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6673: LD_EXP 17
6677: PPUSH
6678: LD_STRING D3a-Sci1-3
6680: PPUSH
6681: CALL_OW 88
// if IsOK ( Joan ) then
6685: LD_EXP 13
6689: PPUSH
6690: CALL_OW 302
6694: IFFALSE 6710
// Say ( Simms , D3a-Sim-4 ) else
6696: LD_EXP 11
6700: PPUSH
6701: LD_STRING D3a-Sim-4
6703: PPUSH
6704: CALL_OW 88
6708: GO 6722
// Say ( Simms , D3a-Sim-4a ) ;
6710: LD_EXP 11
6714: PPUSH
6715: LD_STRING D3a-Sim-4a
6717: PPUSH
6718: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
6722: LD_EXP 17
6726: PPUSH
6727: LD_STRING D3a-Sci1-4
6729: PPUSH
6730: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6734: LD_EXP 11
6738: PPUSH
6739: LD_STRING D3a-Sim-5
6741: PPUSH
6742: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
6746: LD_EXP 17
6750: PPUSH
6751: LD_STRING D3a-Sci1-5
6753: PPUSH
6754: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6758: LD_EXP 11
6762: PPUSH
6763: LD_STRING D3a-Sim-6
6765: PPUSH
6766: CALL_OW 88
// DialogueOff ;
6770: CALL_OW 7
// end else
6774: GO 7020
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
6776: LD_ADDR_VAR 0 3
6780: PUSH
6781: LD_INT 22
6783: PUSH
6784: LD_INT 1
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: PUSH
6791: LD_INT 25
6793: PUSH
6794: LD_INT 4
6796: PUSH
6797: EMPTY
6798: LIST
6799: LIST
6800: PUSH
6801: EMPTY
6802: LIST
6803: LIST
6804: PPUSH
6805: CALL_OW 69
6809: PUSH
6810: LD_EXP 11
6814: PUSH
6815: LD_EXP 14
6819: PUSH
6820: EMPTY
6821: LIST
6822: LIST
6823: DIFF
6824: ST_TO_ADDR
// if tmp3 > 0 then
6825: LD_VAR 0 3
6829: PUSH
6830: LD_INT 0
6832: GREATER
6833: IFFALSE 7020
// begin DialogueOn ;
6835: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6839: LD_EXP 11
6843: PPUSH
6844: LD_STRING D3a-Sim-1
6846: PPUSH
6847: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
6851: LD_VAR 0 3
6855: PUSH
6856: LD_INT 1
6858: ARRAY
6859: PPUSH
6860: LD_STRING D3a-Sci1-1
6862: PPUSH
6863: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6867: LD_EXP 11
6871: PPUSH
6872: LD_STRING D3a-Sim-2
6874: PPUSH
6875: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
6879: LD_VAR 0 3
6883: PUSH
6884: LD_INT 1
6886: ARRAY
6887: PPUSH
6888: LD_STRING D3a-Sci1-2
6890: PPUSH
6891: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6895: LD_EXP 11
6899: PPUSH
6900: LD_STRING D3a-Sim-3
6902: PPUSH
6903: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
6907: LD_VAR 0 3
6911: PUSH
6912: LD_INT 1
6914: ARRAY
6915: PPUSH
6916: LD_STRING D3a-Sci1-3
6918: PPUSH
6919: CALL_OW 88
// if IsOK ( Joan ) then
6923: LD_EXP 13
6927: PPUSH
6928: CALL_OW 302
6932: IFFALSE 6948
// Say ( Simms , D3a-Sim-4 ) else
6934: LD_EXP 11
6938: PPUSH
6939: LD_STRING D3a-Sim-4
6941: PPUSH
6942: CALL_OW 88
6946: GO 6960
// Say ( Simms , D3a-Sim-4a ) ;
6948: LD_EXP 11
6952: PPUSH
6953: LD_STRING D3a-Sim-4a
6955: PPUSH
6956: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6960: LD_VAR 0 3
6964: PUSH
6965: LD_INT 1
6967: ARRAY
6968: PPUSH
6969: LD_STRING D3a-Sci1-4
6971: PPUSH
6972: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6976: LD_EXP 11
6980: PPUSH
6981: LD_STRING D3a-Sim-5
6983: PPUSH
6984: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6988: LD_VAR 0 3
6992: PUSH
6993: LD_INT 1
6995: ARRAY
6996: PPUSH
6997: LD_STRING D3a-Sci1-5
6999: PPUSH
7000: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7004: LD_EXP 11
7008: PPUSH
7009: LD_STRING D3a-Sim-6
7011: PPUSH
7012: CALL_OW 88
// DialogueOff ;
7016: CALL_OW 7
// end ; end ; end ;
7020: PPOPN 3
7022: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
7023: LD_EXP 29
7027: PUSH
7028: LD_INT 1
7030: EQUAL
7031: IFFALSE 7351
7033: GO 7035
7035: DISABLE
7036: LD_INT 0
7038: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
7039: LD_EXP 18
7043: PPUSH
7044: LD_STRING D4-FSol1-1
7046: PPUSH
7047: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7051: LD_STRING M3
7053: PPUSH
7054: CALL_OW 337
// PrepareRussians ;
7058: CALL 3440 0 0
// rnd = Rand ( 1 , 100 ) ;
7062: LD_ADDR_VAR 0 1
7066: PUSH
7067: LD_INT 1
7069: PPUSH
7070: LD_INT 100
7072: PPUSH
7073: CALL_OW 12
7077: ST_TO_ADDR
// if difficulty = 1 then
7078: LD_OWVAR 67
7082: PUSH
7083: LD_INT 1
7085: EQUAL
7086: IFFALSE 7169
// begin if rnd > 0 and rnd < 51 then
7088: LD_VAR 0 1
7092: PUSH
7093: LD_INT 0
7095: GREATER
7096: PUSH
7097: LD_VAR 0 1
7101: PUSH
7102: LD_INT 51
7104: LESS
7105: AND
7106: IFFALSE 7115
// BuildRussianBase ( 2 ) ;
7108: LD_INT 2
7110: PPUSH
7111: CALL 11514 0 1
// if rnd > 50 and rnd < 81 then
7115: LD_VAR 0 1
7119: PUSH
7120: LD_INT 50
7122: GREATER
7123: PUSH
7124: LD_VAR 0 1
7128: PUSH
7129: LD_INT 81
7131: LESS
7132: AND
7133: IFFALSE 7142
// BuildRussianBase ( 1 ) ;
7135: LD_INT 1
7137: PPUSH
7138: CALL 11514 0 1
// if rnd > 80 and rnd < 101 then
7142: LD_VAR 0 1
7146: PUSH
7147: LD_INT 80
7149: GREATER
7150: PUSH
7151: LD_VAR 0 1
7155: PUSH
7156: LD_INT 101
7158: LESS
7159: AND
7160: IFFALSE 7169
// BuildRussianBase ( 3 ) ;
7162: LD_INT 3
7164: PPUSH
7165: CALL 11514 0 1
// end ; if difficulty = 2 then
7169: LD_OWVAR 67
7173: PUSH
7174: LD_INT 2
7176: EQUAL
7177: IFFALSE 7260
// begin if rnd > 0 and rnd < 61 then
7179: LD_VAR 0 1
7183: PUSH
7184: LD_INT 0
7186: GREATER
7187: PUSH
7188: LD_VAR 0 1
7192: PUSH
7193: LD_INT 61
7195: LESS
7196: AND
7197: IFFALSE 7206
// BuildRussianBase ( 2 ) ;
7199: LD_INT 2
7201: PPUSH
7202: CALL 11514 0 1
// if rnd > 60 and rnd < 81 then
7206: LD_VAR 0 1
7210: PUSH
7211: LD_INT 60
7213: GREATER
7214: PUSH
7215: LD_VAR 0 1
7219: PUSH
7220: LD_INT 81
7222: LESS
7223: AND
7224: IFFALSE 7233
// BuildRussianBase ( 1 ) ;
7226: LD_INT 1
7228: PPUSH
7229: CALL 11514 0 1
// if rnd > 80 and rnd < 101 then
7233: LD_VAR 0 1
7237: PUSH
7238: LD_INT 80
7240: GREATER
7241: PUSH
7242: LD_VAR 0 1
7246: PUSH
7247: LD_INT 101
7249: LESS
7250: AND
7251: IFFALSE 7260
// BuildRussianBase ( 3 ) ;
7253: LD_INT 3
7255: PPUSH
7256: CALL 11514 0 1
// end ; if difficulty = 3 then
7260: LD_OWVAR 67
7264: PUSH
7265: LD_INT 3
7267: EQUAL
7268: IFFALSE 7351
// begin if rnd > 0 and rnd < 71 then
7270: LD_VAR 0 1
7274: PUSH
7275: LD_INT 0
7277: GREATER
7278: PUSH
7279: LD_VAR 0 1
7283: PUSH
7284: LD_INT 71
7286: LESS
7287: AND
7288: IFFALSE 7297
// BuildRussianBase ( 3 ) ;
7290: LD_INT 3
7292: PPUSH
7293: CALL 11514 0 1
// if rnd > 70 and rnd < 81 then
7297: LD_VAR 0 1
7301: PUSH
7302: LD_INT 70
7304: GREATER
7305: PUSH
7306: LD_VAR 0 1
7310: PUSH
7311: LD_INT 81
7313: LESS
7314: AND
7315: IFFALSE 7324
// BuildRussianBase ( 2 ) ;
7317: LD_INT 2
7319: PPUSH
7320: CALL 11514 0 1
// if rnd > 80 and rnd < 101 then
7324: LD_VAR 0 1
7328: PUSH
7329: LD_INT 80
7331: GREATER
7332: PUSH
7333: LD_VAR 0 1
7337: PUSH
7338: LD_INT 101
7340: LESS
7341: AND
7342: IFFALSE 7351
// BuildRussianBase ( 1 ) ;
7344: LD_INT 1
7346: PPUSH
7347: CALL 11514 0 1
// end ; end ;
7351: PPOPN 1
7353: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7354: LD_INT 54
7356: PPUSH
7357: LD_INT 1
7359: PPUSH
7360: CALL_OW 321
7364: PUSH
7365: LD_INT 2
7367: EQUAL
7368: PUSH
7369: LD_INT 21
7371: PPUSH
7372: LD_INT 1
7374: PPUSH
7375: CALL_OW 321
7379: PUSH
7380: LD_INT 2
7382: EQUAL
7383: OR
7384: PUSH
7385: LD_INT 22
7387: PPUSH
7388: LD_INT 1
7390: PPUSH
7391: CALL_OW 321
7395: PUSH
7396: LD_INT 2
7398: EQUAL
7399: OR
7400: IFFALSE 7702
7402: GO 7404
7404: DISABLE
7405: LD_INT 0
7407: PPUSH
7408: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7409: LD_EXP 17
7413: PPUSH
7414: CALL_OW 302
7418: IFFALSE 7432
// tmp := DeltaDoctor else
7420: LD_ADDR_VAR 0 2
7424: PUSH
7425: LD_EXP 17
7429: ST_TO_ADDR
7430: GO 7442
// tmp := Denis ;
7432: LD_ADDR_VAR 0 2
7436: PUSH
7437: LD_EXP 12
7441: ST_TO_ADDR
// if tmp then
7442: LD_VAR 0 2
7446: IFFALSE 7540
// begin DialogueOn ;
7448: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7452: LD_EXP 1
7456: PPUSH
7457: LD_STRING D6-JMM-1
7459: PPUSH
7460: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7464: LD_VAR 0 2
7468: PPUSH
7469: LD_STRING D6-Sci1-1
7471: PPUSH
7472: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7476: LD_EXP 1
7480: PPUSH
7481: LD_STRING D6-JMM-2
7483: PPUSH
7484: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7488: LD_VAR 0 2
7492: PPUSH
7493: LD_STRING D6-Sci1-2
7495: PPUSH
7496: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7500: LD_EXP 1
7504: PPUSH
7505: LD_STRING D6-JMM-3
7507: PPUSH
7508: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7512: LD_VAR 0 2
7516: PPUSH
7517: LD_STRING D6-Sci1-3
7519: PPUSH
7520: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7524: LD_EXP 1
7528: PPUSH
7529: LD_STRING D6-JMM-4
7531: PPUSH
7532: CALL_OW 88
// DialogueOff ;
7536: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7540: LD_INT 1050
7542: PPUSH
7543: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7547: LD_EXP 49
7551: PUSH
7552: LD_INT 0
7554: EQUAL
7555: PUSH
7556: LD_EXP 14
7560: PPUSH
7561: CALL_OW 302
7565: AND
7566: IFFALSE 7624
// begin DialogueOn ;
7568: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7572: LD_EXP 27
7576: PPUSH
7577: LD_STRING D5-Ar1-1
7579: PPUSH
7580: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7584: LD_EXP 26
7588: PPUSH
7589: LD_STRING D5-Diet-1
7591: PPUSH
7592: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7596: LD_EXP 27
7600: PPUSH
7601: LD_STRING D5-Ar1-2
7603: PPUSH
7604: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7608: LD_EXP 26
7612: PPUSH
7613: LD_STRING D5-Diet-2
7615: PPUSH
7616: CALL_OW 88
// DialogueOff ;
7620: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7624: LD_INT 35
7626: PPUSH
7627: CALL_OW 67
// until tick > 10 10$00 ;
7631: LD_OWVAR 1
7635: PUSH
7636: LD_INT 21000
7638: GREATER
7639: IFFALSE 7624
// wait ( 1 1$30 ) ;
7641: LD_INT 3150
7643: PPUSH
7644: CALL_OW 67
// if arabianTrait = 0 then
7648: LD_EXP 49
7652: PUSH
7653: LD_INT 0
7655: EQUAL
7656: IFFALSE 7702
// begin arabianTrait = 1 ;
7658: LD_ADDR_EXP 49
7662: PUSH
7663: LD_INT 1
7665: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7666: LD_INT 2
7668: PPUSH
7669: LD_INT 3
7671: PPUSH
7672: LD_INT 1
7674: PPUSH
7675: LD_INT 1
7677: PPUSH
7678: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7682: LD_INT 2
7684: PPUSH
7685: LD_INT 6
7687: PPUSH
7688: LD_INT 1
7690: PPUSH
7691: LD_INT 1
7693: PPUSH
7694: CALL_OW 80
// PrepareArabianTrait ;
7698: CALL 7705 0 0
// end ; end ;
7702: PPOPN 2
7704: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
7705: LD_INT 0
7707: PPUSH
7708: PPUSH
7709: PPUSH
7710: PPUSH
7711: PPUSH
7712: PPUSH
7713: PPUSH
7714: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
7715: LD_ADDR_VAR 0 6
7719: PUSH
7720: LD_INT 22
7722: PUSH
7723: LD_INT 2
7725: PUSH
7726: EMPTY
7727: LIST
7728: LIST
7729: PUSH
7730: LD_INT 2
7732: PUSH
7733: LD_INT 25
7735: PUSH
7736: LD_INT 4
7738: PUSH
7739: EMPTY
7740: LIST
7741: LIST
7742: PUSH
7743: LD_INT 25
7745: PUSH
7746: LD_INT 2
7748: PUSH
7749: EMPTY
7750: LIST
7751: LIST
7752: PUSH
7753: LD_INT 25
7755: PUSH
7756: LD_INT 3
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PPUSH
7773: CALL_OW 69
7777: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7778: LD_ADDR_VAR 0 5
7782: PUSH
7783: LD_INT 22
7785: PUSH
7786: LD_INT 2
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 21
7795: PUSH
7796: LD_INT 1
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 2
7805: PUSH
7806: LD_INT 25
7808: PUSH
7809: LD_INT 1
7811: PUSH
7812: EMPTY
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 25
7818: PUSH
7819: LD_INT 8
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PUSH
7826: LD_INT 25
7828: PUSH
7829: LD_INT 15
7831: PUSH
7832: EMPTY
7833: LIST
7834: LIST
7835: PUSH
7836: EMPTY
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: PUSH
7842: EMPTY
7843: LIST
7844: LIST
7845: LIST
7846: PPUSH
7847: CALL_OW 69
7851: PUSH
7852: LD_EXP 26
7856: PUSH
7857: EMPTY
7858: LIST
7859: DIFF
7860: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
7861: LD_ADDR_VAR 0 7
7865: PUSH
7866: LD_INT 22
7868: PUSH
7869: LD_INT 2
7871: PUSH
7872: EMPTY
7873: LIST
7874: LIST
7875: PUSH
7876: LD_INT 30
7878: PUSH
7879: LD_INT 5
7881: PUSH
7882: EMPTY
7883: LIST
7884: LIST
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: PPUSH
7890: CALL_OW 69
7894: PUSH
7895: LD_INT 1
7897: ARRAY
7898: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
7899: LD_VAR 0 6
7903: PPUSH
7904: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
7908: LD_VAR 0 5
7912: PPUSH
7913: CALL_OW 122
// wait ( 0 0$3 ) ;
7917: LD_INT 105
7919: PPUSH
7920: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
7924: LD_VAR 0 6
7928: PPUSH
7929: LD_VAR 0 7
7933: PPUSH
7934: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
7938: LD_VAR 0 6
7942: PPUSH
7943: LD_INT 1
7945: PUSH
7946: LD_INT 8
7948: PUSH
7949: EMPTY
7950: LIST
7951: LIST
7952: PUSH
7953: LD_INT 1
7955: PPUSH
7956: LD_INT 2
7958: PPUSH
7959: CALL_OW 12
7963: ARRAY
7964: PPUSH
7965: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
7969: LD_VAR 0 6
7973: PPUSH
7974: CALL_OW 182
// wait ( 0 0$1 ) ;
7978: LD_INT 35
7980: PPUSH
7981: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
7985: LD_INT 76
7987: PPUSH
7988: LD_INT 19
7990: PPUSH
7991: CALL_OW 84
// DialogueOn ;
7995: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7999: LD_INT 22
8001: PUSH
8002: LD_INT 1
8004: PUSH
8005: EMPTY
8006: LIST
8007: LIST
8008: PUSH
8009: LD_INT 26
8011: PUSH
8012: LD_INT 1
8014: PUSH
8015: EMPTY
8016: LIST
8017: LIST
8018: PUSH
8019: LD_INT 2
8021: PUSH
8022: LD_INT 25
8024: PUSH
8025: LD_INT 1
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: PUSH
8032: LD_INT 25
8034: PUSH
8035: LD_INT 2
8037: PUSH
8038: EMPTY
8039: LIST
8040: LIST
8041: PUSH
8042: LD_INT 25
8044: PUSH
8045: LD_INT 3
8047: PUSH
8048: EMPTY
8049: LIST
8050: LIST
8051: PUSH
8052: LD_INT 25
8054: PUSH
8055: LD_INT 4
8057: PUSH
8058: EMPTY
8059: LIST
8060: LIST
8061: PUSH
8062: LD_INT 25
8064: PUSH
8065: LD_INT 5
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: LIST
8084: PPUSH
8085: CALL_OW 69
8089: PPUSH
8090: LD_STRING D8-Sol1-1
8092: PPUSH
8093: LD_STRING D8-Sol1-1
8095: PPUSH
8096: CALL 10856 0 3
// if IsOK ( DeltaDoctor ) then
8100: LD_EXP 17
8104: PPUSH
8105: CALL_OW 302
8109: IFFALSE 8125
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8111: LD_EXP 17
8115: PPUSH
8116: LD_STRING D8-Sci1-1
8118: PPUSH
8119: CALL_OW 88
8123: GO 8226
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8125: LD_INT 22
8127: PUSH
8128: LD_INT 1
8130: PUSH
8131: EMPTY
8132: LIST
8133: LIST
8134: PUSH
8135: LD_INT 26
8137: PUSH
8138: LD_INT 1
8140: PUSH
8141: EMPTY
8142: LIST
8143: LIST
8144: PUSH
8145: LD_INT 2
8147: PUSH
8148: LD_INT 25
8150: PUSH
8151: LD_INT 1
8153: PUSH
8154: EMPTY
8155: LIST
8156: LIST
8157: PUSH
8158: LD_INT 25
8160: PUSH
8161: LD_INT 2
8163: PUSH
8164: EMPTY
8165: LIST
8166: LIST
8167: PUSH
8168: LD_INT 25
8170: PUSH
8171: LD_INT 3
8173: PUSH
8174: EMPTY
8175: LIST
8176: LIST
8177: PUSH
8178: LD_INT 25
8180: PUSH
8181: LD_INT 4
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: PUSH
8188: LD_INT 25
8190: PUSH
8191: LD_INT 5
8193: PUSH
8194: EMPTY
8195: LIST
8196: LIST
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: PUSH
8206: EMPTY
8207: LIST
8208: LIST
8209: LIST
8210: PPUSH
8211: CALL_OW 69
8215: PPUSH
8216: LD_STRING D8-Sol1-1
8218: PPUSH
8219: LD_STRING D8-Sol1-1
8221: PPUSH
8222: CALL 10856 0 3
// Say ( JMM , D8-JMM-1 ) ;
8226: LD_EXP 1
8230: PPUSH
8231: LD_STRING D8-JMM-1
8233: PPUSH
8234: CALL_OW 88
// DialogueOff ;
8238: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8242: LD_INT 2
8244: PPUSH
8245: LD_INT 2
8247: PPUSH
8248: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8252: LD_INT 1
8254: PPUSH
8255: LD_INT 2
8257: PPUSH
8258: LD_INT 2
8260: PPUSH
8261: LD_INT 1
8263: PPUSH
8264: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8268: LD_INT 3
8270: PPUSH
8271: LD_INT 2
8273: PPUSH
8274: LD_INT 1
8276: PPUSH
8277: LD_INT 1
8279: PPUSH
8280: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8284: LD_STRING M4
8286: PPUSH
8287: CALL_OW 337
// wait ( 0 0$1 ) ;
8291: LD_INT 35
8293: PPUSH
8294: CALL_OW 67
// if IsLive ( Khatam ) then
8298: LD_EXP 14
8302: PPUSH
8303: CALL_OW 300
8307: IFFALSE 8321
// DoNotAttack ( 2 , Khatam ) ;
8309: LD_INT 2
8311: PPUSH
8312: LD_EXP 14
8316: PPUSH
8317: CALL_OW 471
// wait ( 0 0$1 ) ;
8321: LD_INT 35
8323: PPUSH
8324: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8328: LD_ADDR_VAR 0 8
8332: PUSH
8333: LD_INT 22
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 21
8345: PUSH
8346: LD_INT 3
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: EMPTY
8354: LIST
8355: LIST
8356: PPUSH
8357: CALL_OW 69
8361: PPUSH
8362: LD_VAR 0 5
8366: PUSH
8367: LD_INT 1
8369: ARRAY
8370: PPUSH
8371: CALL_OW 74
8375: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8376: LD_VAR 0 5
8380: PPUSH
8381: LD_INT 25
8383: PUSH
8384: LD_INT 1
8386: PUSH
8387: EMPTY
8388: LIST
8389: LIST
8390: PPUSH
8391: CALL_OW 72
8395: PUSH
8396: LD_INT 1
8398: ARRAY
8399: PPUSH
8400: LD_VAR 0 8
8404: PPUSH
8405: CALL_OW 250
8409: PPUSH
8410: LD_VAR 0 8
8414: PPUSH
8415: CALL_OW 251
8419: PPUSH
8420: LD_VAR 0 8
8424: PPUSH
8425: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8429: LD_VAR 0 5
8433: PPUSH
8434: LD_INT 84
8436: PPUSH
8437: LD_INT 22
8439: PPUSH
8440: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8444: LD_VAR 0 5
8448: PPUSH
8449: LD_INT 82
8451: PPUSH
8452: LD_INT 5
8454: PPUSH
8455: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8459: LD_VAR 0 5
8463: PPUSH
8464: LD_INT 95
8466: PPUSH
8467: LD_INT 12
8469: PPUSH
8470: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8474: LD_VAR 0 5
8478: PPUSH
8479: LD_INT 102
8481: PPUSH
8482: LD_INT 11
8484: PPUSH
8485: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8489: LD_VAR 0 5
8493: PPUSH
8494: LD_INT 116
8496: PPUSH
8497: LD_INT 15
8499: PPUSH
8500: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8504: LD_VAR 0 5
8508: PPUSH
8509: LD_INT 140
8511: PPUSH
8512: LD_INT 25
8514: PPUSH
8515: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8519: LD_VAR 0 5
8523: PPUSH
8524: LD_INT 160
8526: PPUSH
8527: LD_INT 56
8529: PPUSH
8530: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8534: LD_ADDR_VAR 0 5
8538: PUSH
8539: LD_INT 22
8541: PUSH
8542: LD_INT 2
8544: PUSH
8545: EMPTY
8546: LIST
8547: LIST
8548: PUSH
8549: LD_INT 21
8551: PUSH
8552: LD_INT 1
8554: PUSH
8555: EMPTY
8556: LIST
8557: LIST
8558: PUSH
8559: LD_INT 2
8561: PUSH
8562: LD_INT 25
8564: PUSH
8565: LD_INT 1
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: LD_INT 25
8574: PUSH
8575: LD_INT 8
8577: PUSH
8578: EMPTY
8579: LIST
8580: LIST
8581: PUSH
8582: LD_INT 25
8584: PUSH
8585: LD_INT 15
8587: PUSH
8588: EMPTY
8589: LIST
8590: LIST
8591: PUSH
8592: EMPTY
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: PUSH
8598: EMPTY
8599: LIST
8600: LIST
8601: LIST
8602: PPUSH
8603: CALL_OW 69
8607: PUSH
8608: LD_EXP 26
8612: PUSH
8613: EMPTY
8614: LIST
8615: DIFF
8616: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8617: LD_ADDR_VAR 0 6
8621: PUSH
8622: LD_INT 22
8624: PUSH
8625: LD_INT 2
8627: PUSH
8628: EMPTY
8629: LIST
8630: LIST
8631: PUSH
8632: LD_INT 21
8634: PUSH
8635: LD_INT 1
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 2
8644: PUSH
8645: LD_INT 25
8647: PUSH
8648: LD_INT 2
8650: PUSH
8651: EMPTY
8652: LIST
8653: LIST
8654: PUSH
8655: LD_INT 25
8657: PUSH
8658: LD_INT 3
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: PUSH
8665: LD_INT 25
8667: PUSH
8668: LD_INT 4
8670: PUSH
8671: EMPTY
8672: LIST
8673: LIST
8674: PUSH
8675: LD_INT 25
8677: PUSH
8678: LD_INT 12
8680: PUSH
8681: EMPTY
8682: LIST
8683: LIST
8684: PUSH
8685: LD_INT 25
8687: PUSH
8688: LD_INT 16
8690: PUSH
8691: EMPTY
8692: LIST
8693: LIST
8694: PUSH
8695: EMPTY
8696: LIST
8697: LIST
8698: LIST
8699: LIST
8700: LIST
8701: LIST
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: LIST
8707: PPUSH
8708: CALL_OW 69
8712: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
8713: LD_ADDR_VAR 0 6
8717: PUSH
8718: LD_VAR 0 6
8722: PUSH
8723: LD_EXP 26
8727: ADD
8728: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
8729: LD_VAR 0 5
8733: PPUSH
8734: LD_INT 189
8736: PPUSH
8737: LD_INT 79
8739: PPUSH
8740: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
8744: LD_VAR 0 5
8748: PPUSH
8749: LD_INT 25
8751: PUSH
8752: LD_INT 15
8754: PUSH
8755: EMPTY
8756: LIST
8757: LIST
8758: PPUSH
8759: CALL_OW 72
8763: IFFALSE 8804
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
8765: LD_VAR 0 5
8769: PPUSH
8770: LD_INT 25
8772: PUSH
8773: LD_INT 15
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PPUSH
8780: CALL_OW 72
8784: PUSH
8785: LD_INT 1
8787: ARRAY
8788: PPUSH
8789: LD_INT 84
8791: PPUSH
8792: LD_INT 21
8794: PPUSH
8795: CALL_OW 428
8799: PPUSH
8800: CALL_OW 120
// wait ( 0 0$4 ) ;
8804: LD_INT 140
8806: PPUSH
8807: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
8811: LD_VAR 0 6
8815: PPUSH
8816: LD_INT 88
8818: PPUSH
8819: LD_INT 8
8821: PPUSH
8822: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
8826: LD_VAR 0 6
8830: PPUSH
8831: LD_INT 102
8833: PPUSH
8834: LD_INT 10
8836: PPUSH
8837: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
8841: LD_VAR 0 6
8845: PPUSH
8846: LD_INT 116
8848: PPUSH
8849: LD_INT 15
8851: PPUSH
8852: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
8856: LD_VAR 0 6
8860: PPUSH
8861: LD_INT 140
8863: PPUSH
8864: LD_INT 25
8866: PPUSH
8867: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
8871: LD_VAR 0 6
8875: PPUSH
8876: LD_INT 160
8878: PPUSH
8879: LD_INT 56
8881: PPUSH
8882: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
8886: LD_VAR 0 6
8890: PPUSH
8891: LD_INT 189
8893: PPUSH
8894: LD_INT 79
8896: PPUSH
8897: CALL_OW 171
// arabianAttackersAI = 1 ;
8901: LD_ADDR_EXP 46
8905: PUSH
8906: LD_INT 1
8908: ST_TO_ADDR
// if IsOk ( Gary ) then
8909: LD_EXP 10
8913: PPUSH
8914: CALL_OW 302
8918: IFFALSE 8932
// Say ( Gary , D8a-Gary-1 ) ;
8920: LD_EXP 10
8924: PPUSH
8925: LD_STRING D8a-Gary-1
8927: PPUSH
8928: CALL_OW 88
// wait ( 0 0$5 ) ;
8932: LD_INT 175
8934: PPUSH
8935: CALL_OW 67
// if IsOK ( Khatam ) then
8939: LD_EXP 14
8943: PPUSH
8944: CALL_OW 302
8948: IFFALSE 9484
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
8950: LD_ADDR_VAR 0 3
8954: PUSH
8955: LD_INT 22
8957: PUSH
8958: LD_INT 1
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: PUSH
8965: LD_INT 2
8967: PUSH
8968: LD_INT 25
8970: PUSH
8971: LD_INT 1
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 25
8980: PUSH
8981: LD_INT 2
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: LD_INT 25
8990: PUSH
8991: LD_INT 3
8993: PUSH
8994: EMPTY
8995: LIST
8996: LIST
8997: PUSH
8998: LD_INT 25
9000: PUSH
9001: LD_INT 4
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: PUSH
9008: LD_INT 25
9010: PUSH
9011: LD_INT 5
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: PUSH
9018: LD_INT 25
9020: PUSH
9021: LD_INT 8
9023: PUSH
9024: EMPTY
9025: LIST
9026: LIST
9027: PUSH
9028: EMPTY
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: PUSH
9037: EMPTY
9038: LIST
9039: LIST
9040: PPUSH
9041: CALL_OW 69
9045: PUSH
9046: LD_EXP 1
9050: PUSH
9051: LD_EXP 2
9055: PUSH
9056: LD_EXP 3
9060: PUSH
9061: LD_EXP 4
9065: PUSH
9066: LD_EXP 5
9070: PUSH
9071: LD_EXP 6
9075: PUSH
9076: LD_EXP 7
9080: PUSH
9081: LD_EXP 8
9085: PUSH
9086: LD_EXP 9
9090: PUSH
9091: LD_EXP 10
9095: PUSH
9096: LD_EXP 11
9100: PUSH
9101: LD_EXP 12
9105: PUSH
9106: LD_EXP 13
9110: PUSH
9111: LD_EXP 14
9115: PUSH
9116: LD_EXP 15
9120: PUSH
9121: LD_EXP 16
9125: PUSH
9126: LD_EXP 17
9130: PUSH
9131: LD_EXP 19
9135: PUSH
9136: LD_EXP 24
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: DIFF
9162: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9163: LD_EXP 14
9167: PPUSH
9168: LD_INT 8
9170: PPUSH
9171: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9175: LD_EXP 14
9179: PPUSH
9180: CALL_OW 122
// wait ( 0 0$1 ) ;
9184: LD_INT 35
9186: PPUSH
9187: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9191: LD_EXP 14
9195: PPUSH
9196: CALL_OW 121
// wait ( 0 0$1 ) ;
9200: LD_INT 35
9202: PPUSH
9203: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9207: LD_EXP 14
9211: PPUSH
9212: LD_INT 7
9214: PPUSH
9215: CALL_OW 113
// if not tmp then
9219: LD_VAR 0 3
9223: NOT
9224: IFFALSE 9228
// exit ;
9226: GO 9484
// DialogueOn ;
9228: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9232: LD_VAR 0 3
9236: PUSH
9237: LD_INT 1
9239: ARRAY
9240: PPUSH
9241: CALL_OW 258
9245: PUSH
9246: LD_INT 1
9248: EQUAL
9249: IFFALSE 9269
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9251: LD_VAR 0 3
9255: PUSH
9256: LD_INT 1
9258: ARRAY
9259: PPUSH
9260: LD_STRING D8b-Sol1-1
9262: PPUSH
9263: CALL_OW 88
9267: GO 9285
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9269: LD_VAR 0 3
9273: PUSH
9274: LD_INT 1
9276: ARRAY
9277: PPUSH
9278: LD_STRING D8b-FSol1-1
9280: PPUSH
9281: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9285: LD_EXP 14
9289: PPUSH
9290: LD_STRING D8b-Khat-1
9292: PPUSH
9293: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9297: LD_VAR 0 3
9301: PUSH
9302: LD_INT 1
9304: ARRAY
9305: PPUSH
9306: CALL_OW 258
9310: PUSH
9311: LD_INT 1
9313: EQUAL
9314: IFFALSE 9334
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9316: LD_VAR 0 3
9320: PUSH
9321: LD_INT 1
9323: ARRAY
9324: PPUSH
9325: LD_STRING D8b-Sol1-2
9327: PPUSH
9328: CALL_OW 88
9332: GO 9350
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9334: LD_VAR 0 3
9338: PUSH
9339: LD_INT 1
9341: ARRAY
9342: PPUSH
9343: LD_STRING D8b-FSol1-2
9345: PPUSH
9346: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9350: LD_EXP 14
9354: PPUSH
9355: LD_STRING D8b-Khat-2
9357: PPUSH
9358: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9362: LD_VAR 0 3
9366: PUSH
9367: LD_INT 1
9369: ARRAY
9370: PPUSH
9371: CALL_OW 258
9375: PUSH
9376: LD_INT 1
9378: EQUAL
9379: IFFALSE 9399
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9381: LD_VAR 0 3
9385: PUSH
9386: LD_INT 1
9388: ARRAY
9389: PPUSH
9390: LD_STRING D8b-Sol1-3
9392: PPUSH
9393: CALL_OW 88
9397: GO 9415
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9399: LD_VAR 0 3
9403: PUSH
9404: LD_INT 1
9406: ARRAY
9407: PPUSH
9408: LD_STRING D8b-FSol1-3
9410: PPUSH
9411: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9415: LD_EXP 14
9419: PPUSH
9420: LD_STRING D8b-Khat-3
9422: PPUSH
9423: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9427: LD_VAR 0 3
9431: PUSH
9432: LD_INT 1
9434: ARRAY
9435: PPUSH
9436: CALL_OW 258
9440: PUSH
9441: LD_INT 1
9443: EQUAL
9444: IFFALSE 9464
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9446: LD_VAR 0 3
9450: PUSH
9451: LD_INT 1
9453: ARRAY
9454: PPUSH
9455: LD_STRING D8b-Sol1-4
9457: PPUSH
9458: CALL_OW 88
9462: GO 9480
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9464: LD_VAR 0 3
9468: PUSH
9469: LD_INT 1
9471: ARRAY
9472: PPUSH
9473: LD_STRING D8b-FSol1-4
9475: PPUSH
9476: CALL_OW 88
// DialogueOff ;
9480: CALL_OW 7
// end ; end ;
9484: LD_VAR 0 1
9488: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9489: LD_INT 7
9491: PPUSH
9492: LD_INT 22
9494: PUSH
9495: LD_INT 2
9497: PUSH
9498: EMPTY
9499: LIST
9500: LIST
9501: PPUSH
9502: CALL_OW 70
9506: PUSH
9507: LD_INT 0
9509: GREATER
9510: PUSH
9511: LD_EXP 14
9515: PPUSH
9516: LD_INT 7
9518: PPUSH
9519: CALL_OW 308
9523: OR
9524: IFFALSE 9731
9526: GO 9528
9528: DISABLE
9529: LD_INT 0
9531: PPUSH
// begin enable ;
9532: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9533: LD_ADDR_VAR 0 1
9537: PUSH
9538: LD_INT 7
9540: PPUSH
9541: LD_INT 22
9543: PUSH
9544: LD_INT 2
9546: PUSH
9547: EMPTY
9548: LIST
9549: LIST
9550: PPUSH
9551: CALL_OW 70
9555: PUSH
9556: FOR_IN
9557: IFFALSE 9698
// begin if GetClass ( i ) = 4 then
9559: LD_VAR 0 1
9563: PPUSH
9564: CALL_OW 257
9568: PUSH
9569: LD_INT 4
9571: EQUAL
9572: IFFALSE 9584
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9574: LD_INT 1
9576: PPUSH
9577: LD_STRING 10_ScientistsEscape_1
9579: PPUSH
9580: CALL_OW 39
// if i = Dietrich then
9584: LD_VAR 0 1
9588: PUSH
9589: LD_EXP 26
9593: EQUAL
9594: IFFALSE 9604
// GensherStatus = 1 ;
9596: LD_ADDR_EXP 52
9600: PUSH
9601: LD_INT 1
9603: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9604: LD_VAR 0 1
9608: PPUSH
9609: CALL_OW 257
9613: PUSH
9614: LD_INT 1
9616: EQUAL
9617: PUSH
9618: LD_VAR 0 1
9622: PPUSH
9623: CALL_OW 257
9627: PUSH
9628: LD_INT 2
9630: EQUAL
9631: OR
9632: PUSH
9633: LD_VAR 0 1
9637: PPUSH
9638: CALL_OW 257
9642: PUSH
9643: LD_INT 3
9645: EQUAL
9646: OR
9647: PUSH
9648: LD_VAR 0 1
9652: PPUSH
9653: CALL_OW 257
9657: PUSH
9658: LD_INT 4
9660: EQUAL
9661: OR
9662: PUSH
9663: LD_VAR 0 1
9667: PPUSH
9668: CALL_OW 257
9672: PUSH
9673: LD_INT 8
9675: EQUAL
9676: OR
9677: IFFALSE 9687
// arabianEscape = 1 ;
9679: LD_ADDR_EXP 47
9683: PUSH
9684: LD_INT 1
9686: ST_TO_ADDR
// RemoveUnit ( i ) ;
9687: LD_VAR 0 1
9691: PPUSH
9692: CALL_OW 64
// end ;
9696: GO 9556
9698: POP
9699: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
9700: LD_EXP 14
9704: PPUSH
9705: LD_INT 7
9707: PPUSH
9708: CALL_OW 308
9712: IFFALSE 9731
// begin KhatamStatus = 1 ;
9714: LD_ADDR_EXP 53
9718: PUSH
9719: LD_INT 1
9721: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
9722: LD_EXP 14
9726: PPUSH
9727: CALL_OW 64
// end ; end ;
9731: PPOPN 1
9733: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
9734: LD_INT 22
9736: PUSH
9737: LD_INT 2
9739: PUSH
9740: EMPTY
9741: LIST
9742: LIST
9743: PUSH
9744: LD_INT 21
9746: PUSH
9747: LD_INT 1
9749: PUSH
9750: EMPTY
9751: LIST
9752: LIST
9753: PUSH
9754: EMPTY
9755: LIST
9756: LIST
9757: PPUSH
9758: CALL_OW 69
9762: PUSH
9763: LD_INT 0
9765: EQUAL
9766: PUSH
9767: LD_INT 22
9769: PUSH
9770: LD_INT 4
9772: PUSH
9773: EMPTY
9774: LIST
9775: LIST
9776: PUSH
9777: LD_INT 21
9779: PUSH
9780: LD_INT 1
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: PPUSH
9791: CALL_OW 69
9795: PUSH
9796: LD_INT 0
9798: EQUAL
9799: AND
9800: IFFALSE 9813
9802: GO 9804
9804: DISABLE
// arabianDefeated = 1 ;
9805: LD_ADDR_EXP 48
9809: PUSH
9810: LD_INT 1
9812: ST_TO_ADDR
9813: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
9814: LD_INT 54
9816: PPUSH
9817: LD_INT 1
9819: PPUSH
9820: CALL_OW 321
9824: PUSH
9825: LD_INT 2
9827: EQUAL
9828: PUSH
9829: LD_INT 55
9831: PPUSH
9832: LD_INT 1
9834: PPUSH
9835: CALL_OW 321
9839: PUSH
9840: LD_INT 2
9842: EQUAL
9843: AND
9844: PUSH
9845: LD_INT 21
9847: PPUSH
9848: LD_INT 1
9850: PPUSH
9851: CALL_OW 321
9855: PUSH
9856: LD_INT 2
9858: EQUAL
9859: AND
9860: PUSH
9861: LD_INT 22
9863: PPUSH
9864: LD_INT 1
9866: PPUSH
9867: CALL_OW 321
9871: PUSH
9872: LD_INT 2
9874: EQUAL
9875: AND
9876: PUSH
9877: LD_INT 12
9879: PPUSH
9880: LD_INT 1
9882: PPUSH
9883: CALL_OW 321
9887: PUSH
9888: LD_INT 2
9890: EQUAL
9891: AND
9892: PUSH
9893: LD_INT 32
9895: PPUSH
9896: LD_INT 1
9898: PPUSH
9899: CALL_OW 321
9903: PUSH
9904: LD_INT 2
9906: EQUAL
9907: AND
9908: PUSH
9909: LD_EXP 61
9913: PUSH
9914: LD_INT 0
9916: EQUAL
9917: AND
9918: PUSH
9919: LD_EXP 49
9923: PUSH
9924: LD_INT 0
9926: EQUAL
9927: AND
9928: PUSH
9929: LD_OWVAR 1
9933: PUSH
9934: LD_INT 31500
9936: GREATEREQUAL
9937: AND
9938: IFFALSE 9955
9940: GO 9942
9942: DISABLE
// begin arabianTrait = 1 ;
9943: LD_ADDR_EXP 49
9947: PUSH
9948: LD_INT 1
9950: ST_TO_ADDR
// PrepareArabianTrait ;
9951: CALL 7705 0 0
// end ;
9955: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
9956: LD_EXP 29
9960: PUSH
9961: LD_STRING 02_mikhailStatus_1
9963: PPUSH
9964: LD_INT 0
9966: PPUSH
9967: CALL_OW 30
9971: PUSH
9972: LD_INT 1
9974: EQUAL
9975: AND
9976: PUSH
9977: LD_INT 22
9979: PUSH
9980: LD_INT 5
9982: PUSH
9983: EMPTY
9984: LIST
9985: LIST
9986: PPUSH
9987: CALL_OW 69
9991: PUSH
9992: LD_INT 0
9994: EQUAL
9995: AND
9996: PUSH
9997: LD_INT 22
9999: PUSH
10000: LD_INT 2
10002: PUSH
10003: EMPTY
10004: LIST
10005: LIST
10006: PUSH
10007: LD_INT 21
10009: PUSH
10010: LD_INT 1
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: PUSH
10017: EMPTY
10018: LIST
10019: LIST
10020: PPUSH
10021: CALL_OW 69
10025: PUSH
10026: LD_INT 0
10028: EQUAL
10029: PUSH
10030: LD_EXP 49
10034: PUSH
10035: LD_INT 0
10037: EQUAL
10038: OR
10039: AND
10040: IFFALSE 10049
10042: GO 10044
10044: DISABLE
// PrepareCornell ;
10045: CALL 3273 0 0
10049: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10050: LD_INT 22
10052: PUSH
10053: LD_INT 1
10055: PUSH
10056: EMPTY
10057: LIST
10058: LIST
10059: PPUSH
10060: CALL_OW 69
10064: PPUSH
10065: LD_EXP 19
10069: PPUSH
10070: CALL_OW 74
10074: PPUSH
10075: LD_EXP 19
10079: PPUSH
10080: CALL_OW 296
10084: PUSH
10085: LD_INT 9
10087: LESS
10088: IFFALSE 10309
10090: GO 10092
10092: DISABLE
// begin InGameOn ;
10093: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10097: LD_EXP 19
10101: PPUSH
10102: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10106: LD_EXP 19
10110: PPUSH
10111: LD_STRING D7-Corn-1
10113: PPUSH
10114: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10118: LD_INT 22
10120: PUSH
10121: LD_INT 1
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: PUSH
10128: LD_INT 2
10130: PUSH
10131: LD_INT 25
10133: PUSH
10134: LD_INT 1
10136: PUSH
10137: EMPTY
10138: LIST
10139: LIST
10140: PUSH
10141: LD_INT 25
10143: PUSH
10144: LD_INT 2
10146: PUSH
10147: EMPTY
10148: LIST
10149: LIST
10150: PUSH
10151: LD_INT 25
10153: PUSH
10154: LD_INT 3
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PUSH
10161: LD_INT 25
10163: PUSH
10164: LD_INT 4
10166: PUSH
10167: EMPTY
10168: LIST
10169: LIST
10170: PUSH
10171: LD_INT 25
10173: PUSH
10174: LD_INT 5
10176: PUSH
10177: EMPTY
10178: LIST
10179: LIST
10180: PUSH
10181: EMPTY
10182: LIST
10183: LIST
10184: LIST
10185: LIST
10186: LIST
10187: LIST
10188: PUSH
10189: EMPTY
10190: LIST
10191: LIST
10192: PPUSH
10193: CALL_OW 69
10197: PPUSH
10198: LD_STRING D7-Sol1-1
10200: PPUSH
10201: LD_STRING D7-FSol1-1
10203: PPUSH
10204: CALL 10856 0 3
// CenterNowOnUnits ( Cornell ) ;
10208: LD_EXP 19
10212: PPUSH
10213: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10217: LD_EXP 19
10221: PPUSH
10222: LD_STRING D7-Corn-2
10224: PPUSH
10225: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10229: LD_EXP 1
10233: PPUSH
10234: LD_STRING D7-JMM-2
10236: PPUSH
10237: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10241: LD_EXP 19
10245: PPUSH
10246: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10250: LD_EXP 19
10254: PPUSH
10255: LD_STRING D7-Corn-3
10257: PPUSH
10258: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10262: LD_EXP 19
10266: PPUSH
10267: LD_INT 250
10269: PPUSH
10270: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10274: LD_EXP 19
10278: PPUSH
10279: LD_INT 1
10281: PPUSH
10282: CALL_OW 235
// wait ( 0 0$1 ) ;
10286: LD_INT 35
10288: PPUSH
10289: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10293: LD_EXP 1
10297: PPUSH
10298: LD_STRING D7-JMM-3
10300: PPUSH
10301: CALL_OW 88
// InGameOff ;
10305: CALL_OW 9
// end ;
10309: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10310: LD_EXP 19
10314: PPUSH
10315: CALL_OW 255
10319: PUSH
10320: LD_INT 1
10322: EQUAL
10323: PUSH
10324: LD_EXP 19
10328: PPUSH
10329: CALL_OW 256
10333: PUSH
10334: LD_INT 350
10336: GREATER
10337: AND
10338: IFFALSE 10531
10340: GO 10342
10342: DISABLE
// begin DialogueOn ;
10343: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10347: LD_EXP 1
10351: PPUSH
10352: LD_STRING D7a-JMM-1
10354: PPUSH
10355: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10359: LD_EXP 19
10363: PPUSH
10364: LD_STRING D7a-Corn-1
10366: PPUSH
10367: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10371: LD_EXP 1
10375: PPUSH
10376: LD_STRING D7a-JMM-2
10378: PPUSH
10379: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10383: LD_EXP 19
10387: PPUSH
10388: LD_STRING D7a-Corn-2
10390: PPUSH
10391: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10395: LD_EXP 1
10399: PPUSH
10400: LD_STRING D7a-JMM-3
10402: PPUSH
10403: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10407: LD_EXP 19
10411: PPUSH
10412: LD_STRING D7a-Corn-3
10414: PPUSH
10415: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10419: LD_EXP 1
10423: PPUSH
10424: LD_STRING D7a-JMM-4
10426: PPUSH
10427: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10431: LD_EXP 19
10435: PPUSH
10436: LD_STRING D7a-Corn-4
10438: PPUSH
10439: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10443: LD_EXP 1
10447: PPUSH
10448: LD_STRING D7a-JMM-5
10450: PPUSH
10451: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10455: LD_EXP 19
10459: PPUSH
10460: LD_STRING D7a-Corn-5
10462: PPUSH
10463: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10467: LD_EXP 1
10471: PPUSH
10472: LD_STRING D7a-JMM-6
10474: PPUSH
10475: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10479: LD_EXP 19
10483: PPUSH
10484: LD_STRING D7a-Corn-6
10486: PPUSH
10487: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10491: LD_EXP 1
10495: PPUSH
10496: LD_STRING D7a-JMM-7
10498: PPUSH
10499: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10503: LD_EXP 19
10507: PPUSH
10508: LD_STRING D7a-Corn-7
10510: PPUSH
10511: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10515: LD_EXP 1
10519: PPUSH
10520: LD_STRING D7a-JMM-8
10522: PPUSH
10523: CALL_OW 88
// DialogueOff ;
10527: CALL_OW 7
// end ;
10531: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10532: LD_EXP 59
10536: PUSH
10537: LD_EXP 1
10541: PPUSH
10542: CALL_OW 302
10546: PUSH
10547: LD_EXP 5
10551: PPUSH
10552: CALL_OW 302
10556: OR
10557: AND
10558: IFFALSE 10648
10560: GO 10562
10562: DISABLE
// begin Wait ( 0 0$2 ) ;
10563: LD_INT 70
10565: PPUSH
10566: CALL_OW 67
// DialogueOn ;
10570: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10574: LD_EXP 59
10578: PUSH
10579: LD_INT 1
10581: ARRAY
10582: PPUSH
10583: LD_EXP 59
10587: PUSH
10588: LD_INT 2
10590: ARRAY
10591: PPUSH
10592: CALL_OW 86
// if IsOk ( Cyrus ) then
10596: LD_EXP 5
10600: PPUSH
10601: CALL_OW 302
10605: IFFALSE 10621
// Say ( Cyrus , D10-Cyrus-1 ) else
10607: LD_EXP 5
10611: PPUSH
10612: LD_STRING D10-Cyrus-1
10614: PPUSH
10615: CALL_OW 88
10619: GO 10644
// if IsOk ( JMM ) then
10621: LD_EXP 1
10625: PPUSH
10626: CALL_OW 302
10630: IFFALSE 10644
// Say ( JMM , D10-JMM-1 ) ;
10632: LD_EXP 1
10636: PPUSH
10637: LD_STRING D10-JMM-1
10639: PPUSH
10640: CALL_OW 88
// DialogueOff ;
10644: CALL_OW 7
// end ;
10648: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10649: LD_INT 12
10651: PPUSH
10652: LD_INT 1
10654: PPUSH
10655: CALL_OW 321
10659: PUSH
10660: LD_INT 2
10662: EQUAL
10663: IFFALSE 10675
10665: GO 10667
10667: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10668: LD_STRING M2b
10670: PPUSH
10671: CALL_OW 337
10675: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10676: LD_INT 32
10678: PPUSH
10679: LD_INT 1
10681: PPUSH
10682: CALL_OW 321
10686: PUSH
10687: LD_INT 2
10689: EQUAL
10690: IFFALSE 10702
10692: GO 10694
10694: DISABLE
// ChangeMissionObjectives ( M2c ) ;
10695: LD_STRING M2c
10697: PPUSH
10698: CALL_OW 337
10702: END
// every 0 0$1 trigger arabianDefeated = 1 do
10703: LD_EXP 48
10707: PUSH
10708: LD_INT 1
10710: EQUAL
10711: IFFALSE 10723
10713: GO 10715
10715: DISABLE
// ChangeMissionObjectives ( M4a ) ;
10716: LD_STRING M4a
10718: PPUSH
10719: CALL_OW 337
10723: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
10724: LD_INT 54
10726: PPUSH
10727: LD_INT 1
10729: PPUSH
10730: CALL_OW 321
10734: PUSH
10735: LD_INT 2
10737: EQUAL
10738: PUSH
10739: LD_INT 55
10741: PPUSH
10742: LD_INT 1
10744: PPUSH
10745: CALL_OW 321
10749: PUSH
10750: LD_INT 2
10752: EQUAL
10753: AND
10754: PUSH
10755: LD_INT 21
10757: PPUSH
10758: LD_INT 1
10760: PPUSH
10761: CALL_OW 321
10765: PUSH
10766: LD_INT 2
10768: EQUAL
10769: AND
10770: PUSH
10771: LD_INT 22
10773: PPUSH
10774: LD_INT 1
10776: PPUSH
10777: CALL_OW 321
10781: PUSH
10782: LD_INT 2
10784: EQUAL
10785: AND
10786: IFFALSE 10798
10788: GO 10790
10790: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
10791: LD_STRING M2a
10793: PPUSH
10794: CALL_OW 337
10798: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
10799: LD_INT 0
10801: PPUSH
10802: PPUSH
// if exist_mode then
10803: LD_VAR 0 2
10807: IFFALSE 10826
// unit := CreateCharacter ( ident ) else
10809: LD_ADDR_VAR 0 4
10813: PUSH
10814: LD_VAR 0 1
10818: PPUSH
10819: CALL_OW 34
10823: ST_TO_ADDR
10824: GO 10841
// unit := NewCharacter ( ident ) ;
10826: LD_ADDR_VAR 0 4
10830: PUSH
10831: LD_VAR 0 1
10835: PPUSH
10836: CALL_OW 25
10840: ST_TO_ADDR
// result := unit ;
10841: LD_ADDR_VAR 0 3
10845: PUSH
10846: LD_VAR 0 4
10850: ST_TO_ADDR
// end ;
10851: LD_VAR 0 3
10855: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
10856: LD_INT 0
10858: PPUSH
10859: PPUSH
10860: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
10861: LD_ADDR_VAR 0 1
10865: PUSH
10866: LD_VAR 0 1
10870: PUSH
10871: LD_EXP 1
10875: PUSH
10876: LD_EXP 2
10880: PUSH
10881: LD_EXP 3
10885: PUSH
10886: LD_EXP 4
10890: PUSH
10891: LD_EXP 5
10895: PUSH
10896: LD_EXP 6
10900: PUSH
10901: LD_EXP 7
10905: PUSH
10906: LD_EXP 8
10910: PUSH
10911: LD_EXP 9
10915: PUSH
10916: LD_EXP 10
10920: PUSH
10921: LD_EXP 11
10925: PUSH
10926: LD_EXP 12
10930: PUSH
10931: LD_EXP 13
10935: PUSH
10936: LD_EXP 14
10940: PUSH
10941: LD_EXP 15
10945: PUSH
10946: LD_EXP 16
10950: PUSH
10951: LD_EXP 17
10955: PUSH
10956: LD_EXP 18
10960: PUSH
10961: LD_EXP 19
10965: PUSH
10966: LD_EXP 24
10970: PUSH
10971: EMPTY
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: DIFF
10993: ST_TO_ADDR
// if not characters then
10994: LD_VAR 0 1
10998: NOT
10999: IFFALSE 11003
// exit ;
11001: GO 11149
// rnd = rand ( 1 , characters ) ;
11003: LD_ADDR_VAR 0 6
11007: PUSH
11008: LD_INT 1
11010: PPUSH
11011: LD_VAR 0 1
11015: PPUSH
11016: CALL_OW 12
11020: ST_TO_ADDR
// for i = 1 to characters do
11021: LD_ADDR_VAR 0 5
11025: PUSH
11026: DOUBLE
11027: LD_INT 1
11029: DEC
11030: ST_TO_ADDR
11031: LD_VAR 0 1
11035: PUSH
11036: FOR_TO
11037: IFFALSE 11147
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11039: LD_VAR 0 5
11043: PUSH
11044: LD_VAR 0 6
11048: EQUAL
11049: PUSH
11050: LD_VAR 0 1
11054: PUSH
11055: LD_VAR 0 5
11059: ARRAY
11060: PPUSH
11061: CALL_OW 258
11065: PUSH
11066: LD_INT 1
11068: EQUAL
11069: AND
11070: IFFALSE 11092
// Say ( characters [ i ] , dialogMID ) ;
11072: LD_VAR 0 1
11076: PUSH
11077: LD_VAR 0 5
11081: ARRAY
11082: PPUSH
11083: LD_VAR 0 2
11087: PPUSH
11088: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11092: LD_VAR 0 5
11096: PUSH
11097: LD_VAR 0 6
11101: EQUAL
11102: PUSH
11103: LD_VAR 0 1
11107: PUSH
11108: LD_VAR 0 5
11112: ARRAY
11113: PPUSH
11114: CALL_OW 258
11118: PUSH
11119: LD_INT 2
11121: EQUAL
11122: AND
11123: IFFALSE 11145
// Say ( characters [ i ] , dialogFID ) ;
11125: LD_VAR 0 1
11129: PUSH
11130: LD_VAR 0 5
11134: ARRAY
11135: PPUSH
11136: LD_VAR 0 3
11140: PPUSH
11141: CALL_OW 88
// end ;
11145: GO 11036
11147: POP
11148: POP
// end ;
11149: LD_VAR 0 4
11153: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11154: LD_INT 0
11156: PPUSH
11157: PPUSH
// for i in charactersList do
11158: LD_ADDR_VAR 0 4
11162: PUSH
11163: LD_VAR 0 1
11167: PUSH
11168: FOR_IN
11169: IFFALSE 11187
// SaveCharacters ( i , ident ) ;
11171: LD_VAR 0 4
11175: PPUSH
11176: LD_VAR 0 2
11180: PPUSH
11181: CALL_OW 38
11185: GO 11168
11187: POP
11188: POP
// end ;
11189: LD_VAR 0 3
11193: RET
// export function PrepareDifficulty ; begin
11194: LD_INT 0
11196: PPUSH
// if difficulty = 1 then
11197: LD_OWVAR 67
11201: PUSH
11202: LD_INT 1
11204: EQUAL
11205: IFFALSE 11249
// begin RuSolMinLevel = 3 ;
11207: LD_ADDR_EXP 36
11211: PUSH
11212: LD_INT 3
11214: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11215: LD_ADDR_EXP 37
11219: PUSH
11220: LD_INT 5
11222: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11223: LD_INT 51
11225: PPUSH
11226: LD_INT 6
11228: PPUSH
11229: LD_INT 2
11231: PPUSH
11232: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11236: LD_INT 51
11238: PPUSH
11239: LD_INT 5
11241: PPUSH
11242: LD_INT 2
11244: PPUSH
11245: CALL_OW 322
// end ; if difficulty = 2 then
11249: LD_OWVAR 67
11253: PUSH
11254: LD_INT 2
11256: EQUAL
11257: IFFALSE 11353
// begin RuSolMinLevel = 5 ;
11259: LD_ADDR_EXP 36
11263: PUSH
11264: LD_INT 5
11266: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11267: LD_ADDR_EXP 37
11271: PUSH
11272: LD_INT 7
11274: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11275: LD_INT 51
11277: PPUSH
11278: LD_INT 6
11280: PPUSH
11281: LD_INT 2
11283: PPUSH
11284: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11288: LD_INT 57
11290: PPUSH
11291: LD_INT 6
11293: PPUSH
11294: LD_INT 2
11296: PPUSH
11297: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11301: LD_INT 63
11303: PPUSH
11304: LD_INT 6
11306: PPUSH
11307: LD_INT 2
11309: PPUSH
11310: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11314: LD_INT 51
11316: PPUSH
11317: LD_INT 5
11319: PPUSH
11320: LD_INT 2
11322: PPUSH
11323: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11327: LD_INT 5
11329: PPUSH
11330: LD_INT 2
11332: PPUSH
11333: LD_INT 2
11335: PPUSH
11336: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11340: LD_INT 5
11342: PPUSH
11343: LD_INT 5
11345: PPUSH
11346: LD_INT 2
11348: PPUSH
11349: CALL_OW 322
// end ; if difficulty = 3 then
11353: LD_OWVAR 67
11357: PUSH
11358: LD_INT 3
11360: EQUAL
11361: IFFALSE 11509
// begin RuSolMinLevel = 6 ;
11363: LD_ADDR_EXP 36
11367: PUSH
11368: LD_INT 6
11370: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11371: LD_ADDR_EXP 37
11375: PUSH
11376: LD_INT 8
11378: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11379: LD_INT 51
11381: PPUSH
11382: LD_INT 6
11384: PPUSH
11385: LD_INT 2
11387: PPUSH
11388: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11392: LD_INT 57
11394: PPUSH
11395: LD_INT 6
11397: PPUSH
11398: LD_INT 2
11400: PPUSH
11401: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11405: LD_INT 52
11407: PPUSH
11408: LD_INT 6
11410: PPUSH
11411: LD_INT 2
11413: PPUSH
11414: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11418: LD_INT 58
11420: PPUSH
11421: LD_INT 6
11423: PPUSH
11424: LD_INT 2
11426: PPUSH
11427: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11431: LD_INT 63
11433: PPUSH
11434: LD_INT 6
11436: PPUSH
11437: LD_INT 2
11439: PPUSH
11440: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11444: LD_INT 64
11446: PPUSH
11447: LD_INT 6
11449: PPUSH
11450: LD_INT 2
11452: PPUSH
11453: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11457: LD_INT 51
11459: PPUSH
11460: LD_INT 5
11462: PPUSH
11463: LD_INT 2
11465: PPUSH
11466: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11470: LD_INT 52
11472: PPUSH
11473: LD_INT 5
11475: PPUSH
11476: LD_INT 2
11478: PPUSH
11479: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11483: LD_INT 66
11485: PPUSH
11486: LD_INT 2
11488: PPUSH
11489: LD_INT 2
11491: PPUSH
11492: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11496: LD_INT 66
11498: PPUSH
11499: LD_INT 5
11501: PPUSH
11502: LD_INT 2
11504: PPUSH
11505: CALL_OW 322
// end ; end ;
11509: LD_VAR 0 1
11513: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11514: LD_INT 0
11516: PPUSH
11517: PPUSH
11518: PPUSH
11519: PPUSH
11520: PPUSH
11521: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11522: LD_ADDR_VAR 0 7
11526: PUSH
11527: LD_INT 43
11529: PUSH
11530: LD_INT 68
11532: PUSH
11533: EMPTY
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 43
11539: PUSH
11540: LD_INT 79
11542: PUSH
11543: EMPTY
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 99
11549: PUSH
11550: LD_INT 114
11552: PUSH
11553: EMPTY
11554: LIST
11555: LIST
11556: PUSH
11557: LD_INT 103
11559: PUSH
11560: LD_INT 114
11562: PUSH
11563: EMPTY
11564: LIST
11565: LIST
11566: PUSH
11567: LD_INT 156
11569: PUSH
11570: LD_INT 92
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: PUSH
11577: LD_INT 152
11579: PUSH
11580: LD_INT 85
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PUSH
11587: EMPTY
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: ST_TO_ADDR
// for i in sources do
11595: LD_ADDR_VAR 0 3
11599: PUSH
11600: LD_VAR 0 7
11604: PUSH
11605: FOR_IN
11606: IFFALSE 11635
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11608: LD_VAR 0 3
11612: PUSH
11613: LD_INT 1
11615: ARRAY
11616: PPUSH
11617: LD_VAR 0 3
11621: PUSH
11622: LD_INT 2
11624: ARRAY
11625: PPUSH
11626: LD_INT 3
11628: PPUSH
11629: CALL_OW 441
11633: GO 11605
11635: POP
11636: POP
// case position of 1 :
11637: LD_VAR 0 1
11641: PUSH
11642: LD_INT 1
11644: DOUBLE
11645: EQUAL
11646: IFTRUE 11650
11648: GO 11661
11650: POP
// area := westConv ; 2 :
11651: LD_ADDR_VAR 0 6
11655: PUSH
11656: LD_INT 20
11658: ST_TO_ADDR
11659: GO 11700
11661: LD_INT 2
11663: DOUBLE
11664: EQUAL
11665: IFTRUE 11669
11667: GO 11680
11669: POP
// area := midConv ; 3 :
11670: LD_ADDR_VAR 0 6
11674: PUSH
11675: LD_INT 21
11677: ST_TO_ADDR
11678: GO 11700
11680: LD_INT 3
11682: DOUBLE
11683: EQUAL
11684: IFTRUE 11688
11686: GO 11699
11688: POP
// area := eastConv ; end ;
11689: LD_ADDR_VAR 0 6
11693: PUSH
11694: LD_INT 22
11696: ST_TO_ADDR
11697: GO 11700
11699: POP
// area := AreaToList ( area , 0 ) ;
11700: LD_ADDR_VAR 0 6
11704: PUSH
11705: LD_VAR 0 6
11709: PPUSH
11710: LD_INT 0
11712: PPUSH
11713: CALL_OW 517
11717: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11718: LD_ADDR_VAR 0 3
11722: PUSH
11723: DOUBLE
11724: LD_INT 1
11726: DEC
11727: ST_TO_ADDR
11728: LD_VAR 0 6
11732: PUSH
11733: LD_INT 1
11735: ARRAY
11736: PUSH
11737: FOR_TO
11738: IFFALSE 11819
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11740: LD_VAR 0 6
11744: PUSH
11745: LD_INT 1
11747: ARRAY
11748: PUSH
11749: LD_VAR 0 3
11753: ARRAY
11754: PPUSH
11755: LD_VAR 0 6
11759: PUSH
11760: LD_INT 2
11762: ARRAY
11763: PUSH
11764: LD_VAR 0 3
11768: ARRAY
11769: PPUSH
11770: LD_INT 1
11772: PPUSH
11773: LD_INT 1
11775: PPUSH
11776: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
11780: LD_VAR 0 6
11784: PUSH
11785: LD_INT 1
11787: ARRAY
11788: PUSH
11789: LD_VAR 0 3
11793: ARRAY
11794: PPUSH
11795: LD_VAR 0 6
11799: PUSH
11800: LD_INT 2
11802: ARRAY
11803: PUSH
11804: LD_VAR 0 3
11808: ARRAY
11809: PPUSH
11810: LD_INT 1
11812: PPUSH
11813: CALL_OW 331
// end ;
11817: GO 11737
11819: POP
11820: POP
// ruPossition = position ;
11821: LD_ADDR_EXP 41
11825: PUSH
11826: LD_VAR 0 1
11830: ST_TO_ADDR
// if position = 1 then
11831: LD_VAR 0 1
11835: PUSH
11836: LD_INT 1
11838: EQUAL
11839: IFFALSE 12587
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11841: LD_ADDR_VAR 0 4
11845: PUSH
11846: LD_INT 22
11848: PUSH
11849: LD_INT 3
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 25
11858: PUSH
11859: LD_INT 2
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: PUSH
11866: EMPTY
11867: LIST
11868: LIST
11869: PPUSH
11870: CALL_OW 69
11874: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
11875: LD_ADDR_VAR 0 5
11879: PUSH
11880: LD_INT 0
11882: PUSH
11883: LD_INT 49
11885: PUSH
11886: LD_INT 74
11888: PUSH
11889: LD_INT 3
11891: PUSH
11892: EMPTY
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: PUSH
11898: LD_INT 4
11900: PUSH
11901: LD_INT 73
11903: PUSH
11904: LD_INT 88
11906: PUSH
11907: LD_INT 5
11909: PUSH
11910: EMPTY
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: PUSH
11916: LD_INT 4
11918: PUSH
11919: LD_INT 56
11921: PUSH
11922: LD_INT 62
11924: PUSH
11925: LD_INT 3
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: LIST
11933: PUSH
11934: LD_INT 29
11936: PUSH
11937: LD_INT 43
11939: PUSH
11940: LD_INT 68
11942: PUSH
11943: LD_INT 2
11945: PUSH
11946: EMPTY
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: PUSH
11952: LD_INT 30
11954: PUSH
11955: LD_INT 43
11957: PUSH
11958: LD_INT 79
11960: PUSH
11961: LD_INT 5
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: PUSH
11970: LD_INT 28
11972: PUSH
11973: LD_INT 60
11975: PUSH
11976: LD_INT 75
11978: PUSH
11979: LD_INT 1
11981: PUSH
11982: EMPTY
11983: LIST
11984: LIST
11985: LIST
11986: LIST
11987: PUSH
11988: LD_INT 2
11990: PUSH
11991: LD_INT 50
11993: PUSH
11994: LD_INT 87
11996: PUSH
11997: LD_INT 1
11999: PUSH
12000: EMPTY
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: PUSH
12006: LD_INT 28
12008: PUSH
12009: LD_INT 45
12011: PUSH
12012: LD_INT 67
12014: PUSH
12015: LD_INT 2
12017: PUSH
12018: EMPTY
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: PUSH
12024: LD_INT 17
12026: PUSH
12027: LD_INT 47
12029: PUSH
12030: LD_INT 84
12032: PUSH
12033: LD_INT 2
12035: PUSH
12036: EMPTY
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_INT 18
12044: PUSH
12045: LD_INT 46
12047: PUSH
12048: LD_INT 87
12050: PUSH
12051: LD_INT 1
12053: PUSH
12054: EMPTY
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 28
12062: PUSH
12063: LD_INT 41
12065: PUSH
12066: LD_INT 64
12068: PUSH
12069: LD_INT 5
12071: PUSH
12072: EMPTY
12073: LIST
12074: LIST
12075: LIST
12076: LIST
12077: PUSH
12078: LD_INT 32
12080: PUSH
12081: LD_INT 75
12083: PUSH
12084: LD_INT 76
12086: PUSH
12087: LD_INT 5
12089: PUSH
12090: EMPTY
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: PUSH
12096: LD_INT 32
12098: PUSH
12099: LD_INT 77
12101: PUSH
12102: LD_INT 75
12104: PUSH
12105: LD_INT 5
12107: PUSH
12108: EMPTY
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: PUSH
12114: LD_INT 32
12116: PUSH
12117: LD_INT 69
12119: PUSH
12120: LD_INT 68
12122: PUSH
12123: LD_INT 3
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 32
12134: PUSH
12135: LD_INT 59
12137: PUSH
12138: LD_INT 96
12140: PUSH
12141: LD_INT 5
12143: PUSH
12144: EMPTY
12145: LIST
12146: LIST
12147: LIST
12148: LIST
12149: PUSH
12150: LD_INT 32
12152: PUSH
12153: LD_INT 56
12155: PUSH
12156: LD_INT 96
12158: PUSH
12159: LD_INT 0
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: PUSH
12168: LD_INT 32
12170: PUSH
12171: LD_INT 51
12173: PUSH
12174: LD_INT 61
12176: PUSH
12177: LD_INT 3
12179: PUSH
12180: EMPTY
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: PUSH
12186: LD_INT 32
12188: PUSH
12189: LD_INT 42
12191: PUSH
12192: LD_INT 60
12194: PUSH
12195: LD_INT 3
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 32
12206: PUSH
12207: LD_INT 36
12209: PUSH
12210: LD_INT 58
12212: PUSH
12213: LD_INT 3
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: PUSH
12222: LD_INT 32
12224: PUSH
12225: LD_INT 39
12227: PUSH
12228: LD_INT 59
12230: PUSH
12231: LD_INT 3
12233: PUSH
12234: EMPTY
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: PUSH
12240: LD_INT 32
12242: PUSH
12243: LD_INT 61
12245: PUSH
12246: LD_INT 64
12248: PUSH
12249: LD_INT 3
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: PUSH
12258: LD_INT 33
12260: PUSH
12261: LD_INT 63
12263: PUSH
12264: LD_INT 90
12266: PUSH
12267: LD_INT 5
12269: PUSH
12270: EMPTY
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: PUSH
12276: LD_INT 33
12278: PUSH
12279: LD_INT 64
12281: PUSH
12282: LD_INT 88
12284: PUSH
12285: LD_INT 5
12287: PUSH
12288: EMPTY
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: PUSH
12294: LD_INT 33
12296: PUSH
12297: LD_INT 72
12299: PUSH
12300: LD_INT 82
12302: PUSH
12303: LD_INT 5
12305: PUSH
12306: EMPTY
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: PUSH
12312: LD_INT 6
12314: PUSH
12315: LD_INT 42
12317: PUSH
12318: LD_INT 74
12320: PUSH
12321: LD_INT 1
12323: PUSH
12324: EMPTY
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: PUSH
12330: LD_INT 6
12332: PUSH
12333: LD_INT 56
12335: PUSH
12336: LD_INT 77
12338: PUSH
12339: LD_INT 2
12341: PUSH
12342: EMPTY
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PUSH
12348: LD_INT 21
12350: PUSH
12351: LD_INT 54
12353: PUSH
12354: LD_INT 91
12356: PUSH
12357: LD_INT 5
12359: PUSH
12360: EMPTY
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: PUSH
12366: LD_INT 16
12368: PUSH
12369: LD_INT 50
12371: PUSH
12372: LD_INT 83
12374: PUSH
12375: LD_INT 3
12377: PUSH
12378: EMPTY
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: PUSH
12384: LD_INT 24
12386: PUSH
12387: LD_INT 50
12389: PUSH
12390: LD_INT 90
12392: PUSH
12393: LD_INT 0
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: PUSH
12402: EMPTY
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12433: LD_ADDR_VAR 0 3
12437: PUSH
12438: LD_INT 22
12440: PUSH
12441: LD_INT 3
12443: PUSH
12444: EMPTY
12445: LIST
12446: LIST
12447: PUSH
12448: LD_INT 3
12450: PUSH
12451: LD_INT 25
12453: PUSH
12454: LD_INT 2
12456: PUSH
12457: EMPTY
12458: LIST
12459: LIST
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PPUSH
12469: CALL_OW 69
12473: PUSH
12474: FOR_IN
12475: IFFALSE 12494
// AddComAgressiveMove ( i , 53 , 82 ) ;
12477: LD_VAR 0 3
12481: PPUSH
12482: LD_INT 53
12484: PPUSH
12485: LD_INT 82
12487: PPUSH
12488: CALL_OW 174
12492: GO 12474
12494: POP
12495: POP
// for i := 1 to buildingsTab do
12496: LD_ADDR_VAR 0 3
12500: PUSH
12501: DOUBLE
12502: LD_INT 1
12504: DEC
12505: ST_TO_ADDR
12506: LD_VAR 0 5
12510: PUSH
12511: FOR_TO
12512: IFFALSE 12585
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12514: LD_VAR 0 4
12518: PPUSH
12519: LD_VAR 0 5
12523: PUSH
12524: LD_VAR 0 3
12528: ARRAY
12529: PUSH
12530: LD_INT 1
12532: ARRAY
12533: PPUSH
12534: LD_VAR 0 5
12538: PUSH
12539: LD_VAR 0 3
12543: ARRAY
12544: PUSH
12545: LD_INT 2
12547: ARRAY
12548: PPUSH
12549: LD_VAR 0 5
12553: PUSH
12554: LD_VAR 0 3
12558: ARRAY
12559: PUSH
12560: LD_INT 3
12562: ARRAY
12563: PPUSH
12564: LD_VAR 0 5
12568: PUSH
12569: LD_VAR 0 3
12573: ARRAY
12574: PUSH
12575: LD_INT 4
12577: ARRAY
12578: PPUSH
12579: CALL_OW 205
12583: GO 12511
12585: POP
12586: POP
// end ; if position = 2 then
12587: LD_VAR 0 1
12591: PUSH
12592: LD_INT 2
12594: EQUAL
12595: IFFALSE 13210
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12597: LD_ADDR_VAR 0 4
12601: PUSH
12602: LD_INT 22
12604: PUSH
12605: LD_INT 3
12607: PUSH
12608: EMPTY
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 25
12614: PUSH
12615: LD_INT 2
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PPUSH
12626: CALL_OW 69
12630: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12631: LD_ADDR_VAR 0 5
12635: PUSH
12636: LD_INT 0
12638: PUSH
12639: LD_INT 104
12641: PUSH
12642: LD_INT 110
12644: PUSH
12645: LD_INT 5
12647: PUSH
12648: EMPTY
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: PUSH
12654: LD_INT 4
12656: PUSH
12657: LD_INT 98
12659: PUSH
12660: LD_INT 90
12662: PUSH
12663: LD_INT 3
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: PUSH
12672: LD_INT 29
12674: PUSH
12675: LD_INT 103
12677: PUSH
12678: LD_INT 114
12680: PUSH
12681: LD_INT 2
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: PUSH
12690: LD_INT 30
12692: PUSH
12693: LD_INT 99
12695: PUSH
12696: LD_INT 114
12698: PUSH
12699: LD_INT 3
12701: PUSH
12702: EMPTY
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: PUSH
12708: LD_INT 28
12710: PUSH
12711: LD_INT 100
12713: PUSH
12714: LD_INT 112
12716: PUSH
12717: LD_INT 1
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: LIST
12724: LIST
12725: PUSH
12726: LD_INT 2
12728: PUSH
12729: LD_INT 92
12731: PUSH
12732: LD_INT 101
12734: PUSH
12735: LD_INT 0
12737: PUSH
12738: EMPTY
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: PUSH
12744: LD_INT 28
12746: PUSH
12747: LD_INT 97
12749: PUSH
12750: LD_INT 116
12752: PUSH
12753: LD_INT 5
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: PUSH
12762: LD_INT 17
12764: PUSH
12765: LD_INT 96
12767: PUSH
12768: LD_INT 101
12770: PUSH
12771: LD_INT 4
12773: PUSH
12774: EMPTY
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: PUSH
12780: LD_INT 18
12782: PUSH
12783: LD_INT 88
12785: PUSH
12786: LD_INT 97
12788: PUSH
12789: LD_INT 2
12791: PUSH
12792: EMPTY
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 28
12800: PUSH
12801: LD_INT 106
12803: PUSH
12804: LD_INT 92
12806: PUSH
12807: LD_INT 2
12809: PUSH
12810: EMPTY
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: PUSH
12816: LD_INT 32
12818: PUSH
12819: LD_INT 88
12821: PUSH
12822: LD_INT 89
12824: PUSH
12825: LD_INT 2
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: PUSH
12834: LD_INT 32
12836: PUSH
12837: LD_INT 86
12839: PUSH
12840: LD_INT 90
12842: PUSH
12843: LD_INT 2
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: LIST
12850: LIST
12851: PUSH
12852: LD_INT 32
12854: PUSH
12855: LD_INT 85
12857: PUSH
12858: LD_INT 99
12860: PUSH
12861: LD_INT 2
12863: PUSH
12864: EMPTY
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: PUSH
12870: LD_INT 32
12872: PUSH
12873: LD_INT 85
12875: PUSH
12876: LD_INT 107
12878: PUSH
12879: LD_INT 1
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: PUSH
12888: LD_INT 33
12890: PUSH
12891: LD_INT 105
12893: PUSH
12894: LD_INT 99
12896: PUSH
12897: LD_INT 1
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: PUSH
12906: LD_INT 33
12908: PUSH
12909: LD_INT 102
12911: PUSH
12912: LD_INT 92
12914: PUSH
12915: LD_INT 3
12917: PUSH
12918: EMPTY
12919: LIST
12920: LIST
12921: LIST
12922: LIST
12923: PUSH
12924: LD_INT 33
12926: PUSH
12927: LD_INT 105
12929: PUSH
12930: LD_INT 92
12932: PUSH
12933: LD_INT 2
12935: PUSH
12936: EMPTY
12937: LIST
12938: LIST
12939: LIST
12940: LIST
12941: PUSH
12942: LD_INT 6
12944: PUSH
12945: LD_INT 92
12947: PUSH
12948: LD_INT 110
12950: PUSH
12951: LD_INT 0
12953: PUSH
12954: EMPTY
12955: LIST
12956: LIST
12957: LIST
12958: LIST
12959: PUSH
12960: LD_INT 6
12962: PUSH
12963: LD_INT 103
12965: PUSH
12966: LD_INT 103
12968: PUSH
12969: LD_INT 5
12971: PUSH
12972: EMPTY
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: PUSH
12978: LD_INT 21
12980: PUSH
12981: LD_INT 89
12983: PUSH
12984: LD_INT 101
12986: PUSH
12987: LD_INT 1
12989: PUSH
12990: EMPTY
12991: LIST
12992: LIST
12993: LIST
12994: LIST
12995: PUSH
12996: LD_INT 16
12998: PUSH
12999: LD_INT 95
13001: PUSH
13002: LD_INT 104
13004: PUSH
13005: LD_INT 4
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: PUSH
13014: LD_INT 24
13016: PUSH
13017: LD_INT 92
13019: PUSH
13020: LD_INT 105
13022: PUSH
13023: LD_INT 0
13025: PUSH
13026: EMPTY
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: PUSH
13032: EMPTY
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: LIST
13055: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13056: LD_ADDR_VAR 0 3
13060: PUSH
13061: LD_INT 22
13063: PUSH
13064: LD_INT 3
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PUSH
13071: LD_INT 3
13073: PUSH
13074: LD_INT 25
13076: PUSH
13077: LD_INT 2
13079: PUSH
13080: EMPTY
13081: LIST
13082: LIST
13083: PUSH
13084: EMPTY
13085: LIST
13086: LIST
13087: PUSH
13088: EMPTY
13089: LIST
13090: LIST
13091: PPUSH
13092: CALL_OW 69
13096: PUSH
13097: FOR_IN
13098: IFFALSE 13117
// AddComAgressiveMove ( i , 96 , 99 ) ;
13100: LD_VAR 0 3
13104: PPUSH
13105: LD_INT 96
13107: PPUSH
13108: LD_INT 99
13110: PPUSH
13111: CALL_OW 174
13115: GO 13097
13117: POP
13118: POP
// for i := 1 to buildingsTab do
13119: LD_ADDR_VAR 0 3
13123: PUSH
13124: DOUBLE
13125: LD_INT 1
13127: DEC
13128: ST_TO_ADDR
13129: LD_VAR 0 5
13133: PUSH
13134: FOR_TO
13135: IFFALSE 13208
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13137: LD_VAR 0 4
13141: PPUSH
13142: LD_VAR 0 5
13146: PUSH
13147: LD_VAR 0 3
13151: ARRAY
13152: PUSH
13153: LD_INT 1
13155: ARRAY
13156: PPUSH
13157: LD_VAR 0 5
13161: PUSH
13162: LD_VAR 0 3
13166: ARRAY
13167: PUSH
13168: LD_INT 2
13170: ARRAY
13171: PPUSH
13172: LD_VAR 0 5
13176: PUSH
13177: LD_VAR 0 3
13181: ARRAY
13182: PUSH
13183: LD_INT 3
13185: ARRAY
13186: PPUSH
13187: LD_VAR 0 5
13191: PUSH
13192: LD_VAR 0 3
13196: ARRAY
13197: PUSH
13198: LD_INT 4
13200: ARRAY
13201: PPUSH
13202: CALL_OW 205
13206: GO 13134
13208: POP
13209: POP
// end ; if position = 3 then
13210: LD_VAR 0 1
13214: PUSH
13215: LD_INT 3
13217: EQUAL
13218: IFFALSE 14004
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13220: LD_ADDR_VAR 0 4
13224: PUSH
13225: LD_INT 22
13227: PUSH
13228: LD_INT 3
13230: PUSH
13231: EMPTY
13232: LIST
13233: LIST
13234: PUSH
13235: LD_INT 25
13237: PUSH
13238: LD_INT 2
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: PUSH
13245: EMPTY
13246: LIST
13247: LIST
13248: PPUSH
13249: CALL_OW 69
13253: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13254: LD_ADDR_VAR 0 5
13258: PUSH
13259: LD_INT 0
13261: PUSH
13262: LD_INT 151
13264: PUSH
13265: LD_INT 71
13267: PUSH
13268: LD_INT 4
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: PUSH
13277: LD_INT 4
13279: PUSH
13280: LD_INT 145
13282: PUSH
13283: LD_INT 53
13285: PUSH
13286: LD_INT 3
13288: PUSH
13289: EMPTY
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: PUSH
13295: LD_INT 4
13297: PUSH
13298: LD_INT 172
13300: PUSH
13301: LD_INT 102
13303: PUSH
13304: LD_INT 5
13306: PUSH
13307: EMPTY
13308: LIST
13309: LIST
13310: LIST
13311: LIST
13312: PUSH
13313: LD_INT 29
13315: PUSH
13316: LD_INT 152
13318: PUSH
13319: LD_INT 85
13321: PUSH
13322: LD_INT 3
13324: PUSH
13325: EMPTY
13326: LIST
13327: LIST
13328: LIST
13329: LIST
13330: PUSH
13331: LD_INT 30
13333: PUSH
13334: LD_INT 156
13336: PUSH
13337: LD_INT 92
13339: PUSH
13340: LD_INT 3
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: PUSH
13349: LD_INT 28
13351: PUSH
13352: LD_INT 151
13354: PUSH
13355: LD_INT 66
13357: PUSH
13358: LD_INT 4
13360: PUSH
13361: EMPTY
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: PUSH
13367: LD_INT 2
13369: PUSH
13370: LD_INT 163
13372: PUSH
13373: LD_INT 95
13375: PUSH
13376: LD_INT 5
13378: PUSH
13379: EMPTY
13380: LIST
13381: LIST
13382: LIST
13383: LIST
13384: PUSH
13385: LD_INT 28
13387: PUSH
13388: LD_INT 149
13390: PUSH
13391: LD_INT 63
13393: PUSH
13394: LD_INT 4
13396: PUSH
13397: EMPTY
13398: LIST
13399: LIST
13400: LIST
13401: LIST
13402: PUSH
13403: LD_INT 17
13405: PUSH
13406: LD_INT 167
13408: PUSH
13409: LD_INT 99
13411: PUSH
13412: LD_INT 5
13414: PUSH
13415: EMPTY
13416: LIST
13417: LIST
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 18
13423: PUSH
13424: LD_INT 163
13426: PUSH
13427: LD_INT 98
13429: PUSH
13430: LD_INT 0
13432: PUSH
13433: EMPTY
13434: LIST
13435: LIST
13436: LIST
13437: LIST
13438: PUSH
13439: LD_INT 28
13441: PUSH
13442: LD_INT 154
13444: PUSH
13445: LD_INT 70
13447: PUSH
13448: LD_INT 4
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: PUSH
13457: LD_INT 32
13459: PUSH
13460: LD_INT 155
13462: PUSH
13463: LD_INT 62
13465: PUSH
13466: LD_INT 4
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: LIST
13473: LIST
13474: PUSH
13475: LD_INT 32
13477: PUSH
13478: LD_INT 161
13480: PUSH
13481: LD_INT 69
13483: PUSH
13484: LD_INT 4
13486: PUSH
13487: EMPTY
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: PUSH
13493: LD_INT 32
13495: PUSH
13496: LD_INT 168
13498: PUSH
13499: LD_INT 78
13501: PUSH
13502: LD_INT 4
13504: PUSH
13505: EMPTY
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: PUSH
13511: LD_INT 32
13513: PUSH
13514: LD_INT 163
13516: PUSH
13517: LD_INT 80
13519: PUSH
13520: LD_INT 5
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: PUSH
13529: LD_INT 32
13531: PUSH
13532: LD_INT 136
13534: PUSH
13535: LD_INT 73
13537: PUSH
13538: LD_INT 0
13540: PUSH
13541: EMPTY
13542: LIST
13543: LIST
13544: LIST
13545: LIST
13546: PUSH
13547: LD_INT 32
13549: PUSH
13550: LD_INT 157
13552: PUSH
13553: LD_INT 98
13555: PUSH
13556: LD_INT 0
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: PUSH
13565: LD_INT 32
13567: PUSH
13568: LD_INT 150
13570: PUSH
13571: LD_INT 87
13573: PUSH
13574: LD_INT 1
13576: PUSH
13577: EMPTY
13578: LIST
13579: LIST
13580: LIST
13581: LIST
13582: PUSH
13583: LD_INT 33
13585: PUSH
13586: LD_INT 171
13588: PUSH
13589: LD_INT 97
13591: PUSH
13592: LD_INT 4
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: PUSH
13601: LD_INT 33
13603: PUSH
13604: LD_INT 168
13606: PUSH
13607: LD_INT 92
13609: PUSH
13610: LD_INT 4
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: LIST
13617: LIST
13618: PUSH
13619: LD_INT 33
13621: PUSH
13622: LD_INT 166
13624: PUSH
13625: LD_INT 80
13627: PUSH
13628: LD_INT 5
13630: PUSH
13631: EMPTY
13632: LIST
13633: LIST
13634: LIST
13635: LIST
13636: PUSH
13637: LD_INT 33
13639: PUSH
13640: LD_INT 141
13642: PUSH
13643: LD_INT 54
13645: PUSH
13646: LD_INT 2
13648: PUSH
13649: EMPTY
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: PUSH
13655: LD_INT 33
13657: PUSH
13658: LD_INT 133
13660: PUSH
13661: LD_INT 57
13663: PUSH
13664: LD_INT 2
13666: PUSH
13667: EMPTY
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: PUSH
13673: LD_INT 33
13675: PUSH
13676: LD_INT 132
13678: PUSH
13679: LD_INT 61
13681: PUSH
13682: LD_INT 2
13684: PUSH
13685: EMPTY
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: PUSH
13691: LD_INT 33
13693: PUSH
13694: LD_INT 150
13696: PUSH
13697: LD_INT 82
13699: PUSH
13700: LD_INT 0
13702: PUSH
13703: EMPTY
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: PUSH
13709: LD_INT 33
13711: PUSH
13712: LD_INT 132
13714: PUSH
13715: LD_INT 72
13717: PUSH
13718: LD_INT 0
13720: PUSH
13721: EMPTY
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: PUSH
13727: LD_INT 6
13729: PUSH
13730: LD_INT 146
13732: PUSH
13733: LD_INT 64
13735: PUSH
13736: LD_INT 4
13738: PUSH
13739: EMPTY
13740: LIST
13741: LIST
13742: LIST
13743: LIST
13744: PUSH
13745: LD_INT 6
13747: PUSH
13748: LD_INT 159
13750: PUSH
13751: LD_INT 85
13753: PUSH
13754: LD_INT 4
13756: PUSH
13757: EMPTY
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 21
13765: PUSH
13766: LD_INT 163
13768: PUSH
13769: LD_INT 91
13771: PUSH
13772: LD_INT 3
13774: PUSH
13775: EMPTY
13776: LIST
13777: LIST
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 16
13783: PUSH
13784: LD_INT 166
13786: PUSH
13787: LD_INT 95
13789: PUSH
13790: LD_INT 4
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: LIST
13798: PUSH
13799: LD_INT 24
13801: PUSH
13802: LD_INT 159
13804: PUSH
13805: LD_INT 95
13807: PUSH
13808: LD_INT 1
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: LIST
13815: LIST
13816: PUSH
13817: EMPTY
13818: LIST
13819: LIST
13820: LIST
13821: LIST
13822: LIST
13823: LIST
13824: LIST
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: LIST
13840: LIST
13841: LIST
13842: LIST
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: LIST
13848: LIST
13849: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13850: LD_ADDR_VAR 0 3
13854: PUSH
13855: LD_INT 22
13857: PUSH
13858: LD_INT 3
13860: PUSH
13861: EMPTY
13862: LIST
13863: LIST
13864: PUSH
13865: LD_INT 3
13867: PUSH
13868: LD_INT 25
13870: PUSH
13871: LD_INT 2
13873: PUSH
13874: EMPTY
13875: LIST
13876: LIST
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: PPUSH
13886: CALL_OW 69
13890: PUSH
13891: FOR_IN
13892: IFFALSE 13911
// AddComAgressiveMove ( i , 141 , 65 ) ;
13894: LD_VAR 0 3
13898: PPUSH
13899: LD_INT 141
13901: PPUSH
13902: LD_INT 65
13904: PPUSH
13905: CALL_OW 174
13909: GO 13891
13911: POP
13912: POP
// for i := 1 to buildingsTab do
13913: LD_ADDR_VAR 0 3
13917: PUSH
13918: DOUBLE
13919: LD_INT 1
13921: DEC
13922: ST_TO_ADDR
13923: LD_VAR 0 5
13927: PUSH
13928: FOR_TO
13929: IFFALSE 14002
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13931: LD_VAR 0 4
13935: PPUSH
13936: LD_VAR 0 5
13940: PUSH
13941: LD_VAR 0 3
13945: ARRAY
13946: PUSH
13947: LD_INT 1
13949: ARRAY
13950: PPUSH
13951: LD_VAR 0 5
13955: PUSH
13956: LD_VAR 0 3
13960: ARRAY
13961: PUSH
13962: LD_INT 2
13964: ARRAY
13965: PPUSH
13966: LD_VAR 0 5
13970: PUSH
13971: LD_VAR 0 3
13975: ARRAY
13976: PUSH
13977: LD_INT 3
13979: ARRAY
13980: PPUSH
13981: LD_VAR 0 5
13985: PUSH
13986: LD_VAR 0 3
13990: ARRAY
13991: PUSH
13992: LD_INT 4
13994: ARRAY
13995: PPUSH
13996: CALL_OW 205
14000: GO 13928
14002: POP
14003: POP
// end ; end ;
14004: LD_VAR 0 2
14008: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14009: LD_INT 0
14011: PPUSH
14012: PPUSH
14013: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14014: LD_ADDR_EXP 66
14018: PUSH
14019: LD_INT 0
14021: PUSH
14022: LD_INT 71
14024: PUSH
14025: LD_INT 15
14027: PUSH
14028: LD_INT 3
14030: PUSH
14031: EMPTY
14032: LIST
14033: LIST
14034: LIST
14035: LIST
14036: PUSH
14037: LD_INT 6
14039: PUSH
14040: LD_INT 77
14042: PUSH
14043: LD_INT 18
14045: PUSH
14046: LD_INT 3
14048: PUSH
14049: EMPTY
14050: LIST
14051: LIST
14052: LIST
14053: LIST
14054: PUSH
14055: LD_INT 4
14057: PUSH
14058: LD_INT 77
14060: PUSH
14061: LD_INT 26
14063: PUSH
14064: LD_INT 0
14066: PUSH
14067: EMPTY
14068: LIST
14069: LIST
14070: LIST
14071: LIST
14072: PUSH
14073: LD_INT 31
14075: PUSH
14076: LD_INT 72
14078: PUSH
14079: LD_INT 24
14081: PUSH
14082: LD_INT 0
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: PUSH
14091: LD_INT 31
14093: PUSH
14094: LD_INT 82
14096: PUSH
14097: LD_INT 28
14099: PUSH
14100: LD_INT 0
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: LIST
14107: LIST
14108: PUSH
14109: LD_INT 31
14111: PUSH
14112: LD_INT 84
14114: PUSH
14115: LD_INT 21
14117: PUSH
14118: LD_INT 3
14120: PUSH
14121: EMPTY
14122: LIST
14123: LIST
14124: LIST
14125: LIST
14126: PUSH
14127: LD_INT 31
14129: PUSH
14130: LD_INT 66
14132: PUSH
14133: LD_INT 14
14135: PUSH
14136: LD_INT 2
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: LIST
14143: LIST
14144: PUSH
14145: LD_INT 27
14147: PUSH
14148: LD_INT 67
14150: PUSH
14151: LD_INT 18
14153: PUSH
14154: LD_INT 5
14156: PUSH
14157: EMPTY
14158: LIST
14159: LIST
14160: LIST
14161: LIST
14162: PUSH
14163: LD_INT 27
14165: PUSH
14166: LD_INT 69
14168: PUSH
14169: LD_INT 23
14171: PUSH
14172: LD_INT 2
14174: PUSH
14175: EMPTY
14176: LIST
14177: LIST
14178: LIST
14179: LIST
14180: PUSH
14181: EMPTY
14182: LIST
14183: LIST
14184: LIST
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: LIST
14190: LIST
14191: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14192: LD_ADDR_VAR 0 3
14196: PUSH
14197: LD_INT 22
14199: PUSH
14200: LD_INT 2
14202: PUSH
14203: EMPTY
14204: LIST
14205: LIST
14206: PUSH
14207: LD_INT 25
14209: PUSH
14210: LD_INT 2
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PPUSH
14221: CALL_OW 69
14225: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14226: LD_VAR 0 3
14230: PPUSH
14231: LD_EXP 66
14235: PUSH
14236: LD_INT 1
14238: ARRAY
14239: PUSH
14240: LD_INT 1
14242: ARRAY
14243: PPUSH
14244: LD_EXP 66
14248: PUSH
14249: LD_INT 1
14251: ARRAY
14252: PUSH
14253: LD_INT 2
14255: ARRAY
14256: PPUSH
14257: LD_EXP 66
14261: PUSH
14262: LD_INT 1
14264: ARRAY
14265: PUSH
14266: LD_INT 3
14268: ARRAY
14269: PPUSH
14270: LD_EXP 66
14274: PUSH
14275: LD_INT 1
14277: ARRAY
14278: PUSH
14279: LD_INT 4
14281: ARRAY
14282: PPUSH
14283: CALL_OW 205
// end ;
14287: LD_VAR 0 1
14291: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14292: LD_INT 0
14294: PPUSH
14295: PPUSH
14296: PPUSH
14297: PPUSH
14298: PPUSH
14299: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14300: LD_ADDR_VAR 0 7
14304: PUSH
14305: LD_INT 22
14307: PUSH
14308: LD_VAR 0 1
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT 25
14319: PUSH
14320: LD_INT 9
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14336: LD_ADDR_VAR 0 8
14340: PUSH
14341: LD_INT 22
14343: PUSH
14344: LD_VAR 0 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 3
14355: PUSH
14356: LD_INT 21
14358: PUSH
14359: LD_INT 3
14361: PUSH
14362: EMPTY
14363: LIST
14364: LIST
14365: PUSH
14366: EMPTY
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: PPUSH
14374: CALL_OW 69
14378: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14379: LD_ADDR_VAR 0 5
14383: PUSH
14384: LD_INT 1
14386: PPUSH
14387: LD_INT 3
14389: PPUSH
14390: CALL_OW 12
14394: ST_TO_ADDR
// for i = 1 to list do
14395: LD_ADDR_VAR 0 6
14399: PUSH
14400: DOUBLE
14401: LD_INT 1
14403: DEC
14404: ST_TO_ADDR
14405: LD_VAR 0 7
14409: PUSH
14410: FOR_TO
14411: IFFALSE 15401
// for ta in filter do
14413: LD_ADDR_VAR 0 4
14417: PUSH
14418: LD_VAR 0 8
14422: PUSH
14423: FOR_IN
14424: IFFALSE 15397
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14426: LD_VAR 0 7
14430: PUSH
14431: LD_VAR 0 6
14435: ARRAY
14436: PPUSH
14437: LD_VAR 0 4
14441: PPUSH
14442: CALL_OW 296
14446: PUSH
14447: LD_INT 15
14449: LESSEQUAL
14450: IFFALSE 15395
// begin case c of 1 :
14452: LD_VAR 0 5
14456: PUSH
14457: LD_INT 1
14459: DOUBLE
14460: EQUAL
14461: IFTRUE 14465
14463: GO 14897
14465: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14466: LD_VAR 0 7
14470: PUSH
14471: LD_VAR 0 6
14475: ARRAY
14476: PPUSH
14477: LD_VAR 0 4
14481: PPUSH
14482: CALL_OW 250
14486: PPUSH
14487: LD_VAR 0 4
14491: PPUSH
14492: CALL_OW 251
14496: PPUSH
14497: CALL_OW 154
// if eventVar2 = 0 then
14501: LD_EXP 64
14505: PUSH
14506: LD_INT 0
14508: EQUAL
14509: IFFALSE 14895
// begin eventVar2 = 1 ;
14511: LD_ADDR_EXP 64
14515: PUSH
14516: LD_INT 1
14518: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14519: LD_INT 245
14521: PPUSH
14522: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14526: LD_VAR 0 4
14530: PPUSH
14531: CALL_OW 250
14535: PPUSH
14536: LD_VAR 0 4
14540: PPUSH
14541: CALL_OW 251
14545: PPUSH
14546: CALL_OW 84
// DialogueOn ;
14550: CALL_OW 6
// if IsOK ( Cyrus ) then
14554: LD_EXP 5
14558: PPUSH
14559: CALL_OW 302
14563: IFFALSE 14579
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14565: LD_EXP 5
14569: PPUSH
14570: LD_STRING D9a-Cyrus-1
14572: PPUSH
14573: CALL_OW 88
// end else
14577: GO 14701
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14579: LD_INT 22
14581: PUSH
14582: LD_INT 1
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 26
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 2
14601: PUSH
14602: LD_INT 25
14604: PUSH
14605: LD_INT 1
14607: PUSH
14608: EMPTY
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 25
14614: PUSH
14615: LD_INT 2
14617: PUSH
14618: EMPTY
14619: LIST
14620: LIST
14621: PUSH
14622: LD_INT 25
14624: PUSH
14625: LD_INT 3
14627: PUSH
14628: EMPTY
14629: LIST
14630: LIST
14631: PUSH
14632: LD_INT 25
14634: PUSH
14635: LD_INT 4
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: PUSH
14642: LD_INT 25
14644: PUSH
14645: LD_INT 5
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: PUSH
14660: EMPTY
14661: LIST
14662: LIST
14663: LIST
14664: PPUSH
14665: CALL_OW 69
14669: PUSH
14670: LD_EXP 1
14674: PUSH
14675: LD_EXP 14
14679: PUSH
14680: LD_EXP 5
14684: PUSH
14685: EMPTY
14686: LIST
14687: LIST
14688: LIST
14689: DIFF
14690: PPUSH
14691: LD_STRING D9a-Sol1-1
14693: PPUSH
14694: LD_STRING D9a-Sol1-1
14696: PPUSH
14697: CALL 10856 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14701: LD_INT 22
14703: PUSH
14704: LD_INT 1
14706: PUSH
14707: EMPTY
14708: LIST
14709: LIST
14710: PUSH
14711: LD_INT 26
14713: PUSH
14714: LD_INT 1
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: PUSH
14721: LD_INT 2
14723: PUSH
14724: LD_INT 25
14726: PUSH
14727: LD_INT 1
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: PUSH
14734: LD_INT 25
14736: PUSH
14737: LD_INT 2
14739: PUSH
14740: EMPTY
14741: LIST
14742: LIST
14743: PUSH
14744: LD_INT 25
14746: PUSH
14747: LD_INT 3
14749: PUSH
14750: EMPTY
14751: LIST
14752: LIST
14753: PUSH
14754: LD_INT 25
14756: PUSH
14757: LD_INT 4
14759: PUSH
14760: EMPTY
14761: LIST
14762: LIST
14763: PUSH
14764: LD_INT 25
14766: PUSH
14767: LD_INT 5
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PUSH
14774: EMPTY
14775: LIST
14776: LIST
14777: LIST
14778: LIST
14779: LIST
14780: LIST
14781: PUSH
14782: EMPTY
14783: LIST
14784: LIST
14785: LIST
14786: PPUSH
14787: CALL_OW 69
14791: PUSH
14792: LD_EXP 1
14796: PUSH
14797: LD_EXP 14
14801: PUSH
14802: LD_EXP 5
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: LIST
14811: DIFF
14812: PPUSH
14813: LD_STRING D9b-Sol1-1
14815: PPUSH
14816: LD_STRING D9b-Sol1-1
14818: PPUSH
14819: CALL 10856 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14823: LD_STRING 09_arInfo
14825: PPUSH
14826: LD_INT 0
14828: PPUSH
14829: CALL_OW 30
14833: PUSH
14834: LD_INT 1
14836: EQUAL
14837: IFFALSE 14851
// Say ( JMM , D9a-JMM-1 ) ;
14839: LD_EXP 1
14843: PPUSH
14844: LD_STRING D9a-JMM-1
14846: PPUSH
14847: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14851: LD_EXP 1
14855: PPUSH
14856: LD_STRING D9c-JMM-1
14858: PPUSH
14859: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14863: LD_INT 12
14865: PPUSH
14866: LD_INT 1
14868: PPUSH
14869: CALL_OW 321
14873: PUSH
14874: LD_INT 2
14876: EQUAL
14877: IFFALSE 14891
// Say ( JMM , D9c-JMM-1a ) ;
14879: LD_EXP 1
14883: PPUSH
14884: LD_STRING D9c-JMM-1a
14886: PPUSH
14887: CALL_OW 88
// DialogueOff ;
14891: CALL_OW 7
// end ; end ; 2 :
14895: GO 15395
14897: LD_INT 2
14899: DOUBLE
14900: EQUAL
14901: IFTRUE 14905
14903: GO 15363
14905: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
14906: LD_VAR 0 7
14910: PUSH
14911: LD_VAR 0 6
14915: ARRAY
14916: PPUSH
14917: LD_VAR 0 4
14921: PPUSH
14922: CALL_OW 250
14926: PUSH
14927: LD_INT 1
14929: NEG
14930: PPUSH
14931: LD_INT 1
14933: PPUSH
14934: CALL_OW 12
14938: PLUS
14939: PPUSH
14940: LD_VAR 0 4
14944: PPUSH
14945: CALL_OW 251
14949: PUSH
14950: LD_INT 1
14952: NEG
14953: PPUSH
14954: LD_INT 1
14956: PPUSH
14957: CALL_OW 12
14961: PLUS
14962: PPUSH
14963: CALL_OW 153
// if eventVar2 = 0 then
14967: LD_EXP 64
14971: PUSH
14972: LD_INT 0
14974: EQUAL
14975: IFFALSE 15361
// begin eventVar2 = 1 ;
14977: LD_ADDR_EXP 64
14981: PUSH
14982: LD_INT 1
14984: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14985: LD_INT 245
14987: PPUSH
14988: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14992: LD_VAR 0 4
14996: PPUSH
14997: CALL_OW 250
15001: PPUSH
15002: LD_VAR 0 4
15006: PPUSH
15007: CALL_OW 251
15011: PPUSH
15012: CALL_OW 84
// DialogueOn ;
15016: CALL_OW 6
// if IsOK ( Cyrus ) then
15020: LD_EXP 5
15024: PPUSH
15025: CALL_OW 302
15029: IFFALSE 15045
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15031: LD_EXP 5
15035: PPUSH
15036: LD_STRING D9a-Cyrus-1
15038: PPUSH
15039: CALL_OW 88
// end else
15043: GO 15167
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15045: LD_INT 22
15047: PUSH
15048: LD_INT 1
15050: PUSH
15051: EMPTY
15052: LIST
15053: LIST
15054: PUSH
15055: LD_INT 26
15057: PUSH
15058: LD_INT 1
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: PUSH
15065: LD_INT 2
15067: PUSH
15068: LD_INT 25
15070: PUSH
15071: LD_INT 1
15073: PUSH
15074: EMPTY
15075: LIST
15076: LIST
15077: PUSH
15078: LD_INT 25
15080: PUSH
15081: LD_INT 2
15083: PUSH
15084: EMPTY
15085: LIST
15086: LIST
15087: PUSH
15088: LD_INT 25
15090: PUSH
15091: LD_INT 3
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 25
15100: PUSH
15101: LD_INT 4
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 25
15110: PUSH
15111: LD_INT 5
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: EMPTY
15119: LIST
15120: LIST
15121: LIST
15122: LIST
15123: LIST
15124: LIST
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: LIST
15130: PPUSH
15131: CALL_OW 69
15135: PUSH
15136: LD_EXP 1
15140: PUSH
15141: LD_EXP 14
15145: PUSH
15146: LD_EXP 5
15150: PUSH
15151: EMPTY
15152: LIST
15153: LIST
15154: LIST
15155: DIFF
15156: PPUSH
15157: LD_STRING D9a-Sol1-1
15159: PPUSH
15160: LD_STRING D9a-Sol1-1
15162: PPUSH
15163: CALL 10856 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15167: LD_INT 22
15169: PUSH
15170: LD_INT 1
15172: PUSH
15173: EMPTY
15174: LIST
15175: LIST
15176: PUSH
15177: LD_INT 26
15179: PUSH
15180: LD_INT 1
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 2
15189: PUSH
15190: LD_INT 25
15192: PUSH
15193: LD_INT 1
15195: PUSH
15196: EMPTY
15197: LIST
15198: LIST
15199: PUSH
15200: LD_INT 25
15202: PUSH
15203: LD_INT 2
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: LD_INT 25
15212: PUSH
15213: LD_INT 3
15215: PUSH
15216: EMPTY
15217: LIST
15218: LIST
15219: PUSH
15220: LD_INT 25
15222: PUSH
15223: LD_INT 4
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PUSH
15230: LD_INT 25
15232: PUSH
15233: LD_INT 5
15235: PUSH
15236: EMPTY
15237: LIST
15238: LIST
15239: PUSH
15240: EMPTY
15241: LIST
15242: LIST
15243: LIST
15244: LIST
15245: LIST
15246: LIST
15247: PUSH
15248: EMPTY
15249: LIST
15250: LIST
15251: LIST
15252: PPUSH
15253: CALL_OW 69
15257: PUSH
15258: LD_EXP 1
15262: PUSH
15263: LD_EXP 14
15267: PUSH
15268: LD_EXP 5
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: LIST
15277: DIFF
15278: PPUSH
15279: LD_STRING D9b-Sol1-1
15281: PPUSH
15282: LD_STRING D9b-Sol1-1
15284: PPUSH
15285: CALL 10856 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15289: LD_STRING 09_arInfo
15291: PPUSH
15292: LD_INT 0
15294: PPUSH
15295: CALL_OW 30
15299: PUSH
15300: LD_INT 1
15302: EQUAL
15303: IFFALSE 15317
// Say ( JMM , D9a-JMM-1 ) ;
15305: LD_EXP 1
15309: PPUSH
15310: LD_STRING D9a-JMM-1
15312: PPUSH
15313: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15317: LD_EXP 1
15321: PPUSH
15322: LD_STRING D9c-JMM-1
15324: PPUSH
15325: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15329: LD_INT 12
15331: PPUSH
15332: LD_INT 1
15334: PPUSH
15335: CALL_OW 321
15339: PUSH
15340: LD_INT 2
15342: EQUAL
15343: IFFALSE 15357
// Say ( JMM , D9c-JMM-1a ) ;
15345: LD_EXP 1
15349: PPUSH
15350: LD_STRING D9c-JMM-1a
15352: PPUSH
15353: CALL_OW 88
// DialogueOff ;
15357: CALL_OW 7
// end ; end ; 3 :
15361: GO 15395
15363: LD_INT 3
15365: DOUBLE
15366: EQUAL
15367: IFTRUE 15371
15369: GO 15394
15371: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15372: LD_VAR 0 7
15376: PUSH
15377: LD_VAR 0 6
15381: ARRAY
15382: PPUSH
15383: LD_VAR 0 4
15387: PPUSH
15388: CALL_OW 115
15392: GO 15395
15394: POP
// end ; end ;
15395: GO 14423
15397: POP
15398: POP
15399: GO 14410
15401: POP
15402: POP
// end ;
15403: LD_VAR 0 3
15407: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15408: LD_INT 0
15410: PPUSH
15411: PPUSH
15412: PPUSH
15413: PPUSH
// for i = 1 to 72 do
15414: LD_ADDR_VAR 0 5
15418: PUSH
15419: DOUBLE
15420: LD_INT 1
15422: DEC
15423: ST_TO_ADDR
15424: LD_INT 72
15426: PUSH
15427: FOR_TO
15428: IFFALSE 15486
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15430: LD_VAR 0 5
15434: PPUSH
15435: LD_VAR 0 1
15439: PPUSH
15440: CALL_OW 321
15444: PUSH
15445: LD_INT 1
15447: EQUAL
15448: PUSH
15449: LD_VAR 0 5
15453: PPUSH
15454: LD_VAR 0 3
15458: PPUSH
15459: CALL_OW 482
15463: PUSH
15464: LD_INT 1
15466: EQUAL
15467: AND
15468: IFFALSE 15484
// AddComResearch ( lab , i ) ;
15470: LD_VAR 0 2
15474: PPUSH
15475: LD_VAR 0 5
15479: PPUSH
15480: CALL_OW 184
15484: GO 15427
15486: POP
15487: POP
// end ;
15488: LD_VAR 0 4
15492: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15493: LD_INT 0
15495: PPUSH
15496: PPUSH
15497: PPUSH
15498: PPUSH
15499: PPUSH
15500: PPUSH
15501: PPUSH
15502: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15503: LD_ADDR_VAR 0 6
15507: PUSH
15508: LD_INT 22
15510: PUSH
15511: LD_VAR 0 1
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PUSH
15520: LD_INT 56
15522: PUSH
15523: EMPTY
15524: LIST
15525: PUSH
15526: LD_INT 24
15528: PUSH
15529: LD_INT 700
15531: PUSH
15532: EMPTY
15533: LIST
15534: LIST
15535: PUSH
15536: LD_INT 3
15538: PUSH
15539: LD_INT 60
15541: PUSH
15542: EMPTY
15543: LIST
15544: PUSH
15545: EMPTY
15546: LIST
15547: LIST
15548: PUSH
15549: LD_INT 2
15551: PUSH
15552: LD_INT 25
15554: PUSH
15555: LD_INT 1
15557: PUSH
15558: EMPTY
15559: LIST
15560: LIST
15561: PUSH
15562: LD_INT 25
15564: PUSH
15565: LD_INT 9
15567: PUSH
15568: EMPTY
15569: LIST
15570: LIST
15571: PUSH
15572: EMPTY
15573: LIST
15574: LIST
15575: LIST
15576: PUSH
15577: EMPTY
15578: LIST
15579: LIST
15580: LIST
15581: LIST
15582: LIST
15583: PPUSH
15584: CALL_OW 69
15588: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15589: LD_ADDR_VAR 0 7
15593: PUSH
15594: LD_INT 22
15596: PUSH
15597: LD_VAR 0 1
15601: PUSH
15602: EMPTY
15603: LIST
15604: LIST
15605: PUSH
15606: LD_INT 30
15608: PUSH
15609: LD_INT 32
15611: PUSH
15612: EMPTY
15613: LIST
15614: LIST
15615: PUSH
15616: LD_INT 58
15618: PUSH
15619: EMPTY
15620: LIST
15621: PUSH
15622: LD_INT 24
15624: PUSH
15625: LD_INT 251
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: EMPTY
15633: LIST
15634: LIST
15635: LIST
15636: LIST
15637: PPUSH
15638: CALL_OW 69
15642: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15643: LD_ADDR_VAR 0 9
15647: PUSH
15648: LD_INT 22
15650: PUSH
15651: LD_VAR 0 1
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: PUSH
15660: LD_INT 2
15662: PUSH
15663: LD_INT 30
15665: PUSH
15666: LD_INT 4
15668: PUSH
15669: EMPTY
15670: LIST
15671: LIST
15672: PUSH
15673: LD_INT 30
15675: PUSH
15676: LD_INT 5
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: PUSH
15683: EMPTY
15684: LIST
15685: LIST
15686: LIST
15687: PUSH
15688: LD_INT 24
15690: PUSH
15691: LD_INT 251
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: LIST
15702: PPUSH
15703: CALL_OW 69
15707: ST_TO_ADDR
// if barrackList > 0 then
15708: LD_VAR 0 9
15712: PUSH
15713: LD_INT 0
15715: GREATER
15716: IFFALSE 15851
// begin if turretList = 0 then
15718: LD_VAR 0 7
15722: PUSH
15723: LD_INT 0
15725: EQUAL
15726: IFFALSE 15775
// begin for i in soldiers_list do
15728: LD_ADDR_VAR 0 4
15732: PUSH
15733: LD_VAR 0 6
15737: PUSH
15738: FOR_IN
15739: IFFALSE 15771
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15741: LD_VAR 0 4
15745: PPUSH
15746: LD_VAR 0 9
15750: PUSH
15751: LD_INT 1
15753: PPUSH
15754: LD_VAR 0 9
15758: PPUSH
15759: CALL_OW 12
15763: ARRAY
15764: PPUSH
15765: CALL_OW 120
15769: GO 15738
15771: POP
15772: POP
// end else
15773: GO 15851
// begin for i in barrackList do
15775: LD_ADDR_VAR 0 4
15779: PUSH
15780: LD_VAR 0 9
15784: PUSH
15785: FOR_IN
15786: IFFALSE 15849
// begin insideUnits = UnitsInside ( i ) ;
15788: LD_ADDR_VAR 0 10
15792: PUSH
15793: LD_VAR 0 4
15797: PPUSH
15798: CALL_OW 313
15802: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
15803: LD_VAR 0 10
15807: PUSH
15808: LD_INT 1
15810: ARRAY
15811: PPUSH
15812: LD_VAR 0 7
15816: PUSH
15817: LD_INT 1
15819: ARRAY
15820: PPUSH
15821: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
15825: LD_VAR 0 6
15829: PUSH
15830: LD_INT 1
15832: ARRAY
15833: PPUSH
15834: LD_VAR 0 7
15838: PUSH
15839: LD_INT 1
15841: ARRAY
15842: PPUSH
15843: CALL_OW 120
// end ;
15847: GO 15785
15849: POP
15850: POP
// end ; end ; end ;
15851: LD_VAR 0 3
15855: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
15856: LD_INT 0
15858: PPUSH
15859: PPUSH
15860: PPUSH
15861: PPUSH
15862: PPUSH
15863: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
15864: LD_ADDR_VAR 0 6
15868: PUSH
15869: LD_VAR 0 2
15873: PPUSH
15874: CALL_OW 313
15878: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
15879: LD_ADDR_VAR 0 7
15883: PUSH
15884: LD_INT 22
15886: PUSH
15887: LD_VAR 0 1
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PUSH
15896: LD_INT 25
15898: PUSH
15899: LD_INT 2
15901: PUSH
15902: EMPTY
15903: LIST
15904: LIST
15905: PUSH
15906: LD_INT 24
15908: PUSH
15909: LD_INT 1000
15911: PUSH
15912: EMPTY
15913: LIST
15914: LIST
15915: PUSH
15916: LD_INT 3
15918: PUSH
15919: LD_INT 54
15921: PUSH
15922: EMPTY
15923: LIST
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: PPUSH
15935: CALL_OW 69
15939: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
15940: LD_ADDR_VAR 0 4
15944: PUSH
15945: LD_INT 22
15947: PUSH
15948: LD_VAR 0 1
15952: PUSH
15953: EMPTY
15954: LIST
15955: LIST
15956: PUSH
15957: LD_INT 21
15959: PUSH
15960: LD_INT 3
15962: PUSH
15963: EMPTY
15964: LIST
15965: LIST
15966: PUSH
15967: LD_INT 3
15969: PUSH
15970: LD_INT 24
15972: PUSH
15973: LD_INT 1000
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: EMPTY
15981: LIST
15982: LIST
15983: PUSH
15984: EMPTY
15985: LIST
15986: LIST
15987: LIST
15988: PUSH
15989: EMPTY
15990: LIST
15991: PPUSH
15992: CALL_OW 69
15996: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
15997: LD_VAR 0 4
16001: NOT
16002: PUSH
16003: LD_VAR 0 7
16007: NOT
16008: AND
16009: PUSH
16010: LD_EXP 42
16014: NOT
16015: AND
16016: IFFALSE 16020
// exit ;
16018: GO 16211
// if buildings_list > 0 and engineerOkInside then
16020: LD_VAR 0 4
16024: PUSH
16025: LD_INT 0
16027: GREATER
16028: PUSH
16029: LD_VAR 0 6
16033: AND
16034: IFFALSE 16088
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16036: LD_ADDR_VAR 0 5
16040: PUSH
16041: LD_INT 22
16043: PUSH
16044: LD_VAR 0 1
16048: PUSH
16049: EMPTY
16050: LIST
16051: LIST
16052: PUSH
16053: LD_INT 25
16055: PUSH
16056: LD_INT 2
16058: PUSH
16059: EMPTY
16060: LIST
16061: LIST
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PPUSH
16067: CALL_OW 69
16071: PUSH
16072: FOR_IN
16073: IFFALSE 16086
// ComExitBuilding ( i ) ;
16075: LD_VAR 0 5
16079: PPUSH
16080: CALL_OW 122
16084: GO 16072
16086: POP
16087: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16088: LD_VAR 0 4
16092: PUSH
16093: LD_INT 0
16095: GREATER
16096: PUSH
16097: LD_VAR 0 7
16101: PUSH
16102: LD_INT 0
16104: GREATER
16105: AND
16106: IFFALSE 16160
// begin for i in engineerOkOutside do
16108: LD_ADDR_VAR 0 5
16112: PUSH
16113: LD_VAR 0 7
16117: PUSH
16118: FOR_IN
16119: IFFALSE 16158
// for j in buildings_list do
16121: LD_ADDR_VAR 0 8
16125: PUSH
16126: LD_VAR 0 4
16130: PUSH
16131: FOR_IN
16132: IFFALSE 16154
// ComRepairBuilding ( i , j [ 1 ] ) ;
16134: LD_VAR 0 5
16138: PPUSH
16139: LD_VAR 0 8
16143: PUSH
16144: LD_INT 1
16146: ARRAY
16147: PPUSH
16148: CALL_OW 130
16152: GO 16131
16154: POP
16155: POP
16156: GO 16118
16158: POP
16159: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16160: LD_VAR 0 4
16164: PUSH
16165: LD_INT 0
16167: EQUAL
16168: PUSH
16169: LD_VAR 0 7
16173: PUSH
16174: LD_INT 0
16176: GREATER
16177: AND
16178: IFFALSE 16211
// for i in engineerOkOutside do
16180: LD_ADDR_VAR 0 5
16184: PUSH
16185: LD_VAR 0 7
16189: PUSH
16190: FOR_IN
16191: IFFALSE 16209
// ComEnterUnit ( i , building ) ;
16193: LD_VAR 0 5
16197: PPUSH
16198: LD_VAR 0 2
16202: PPUSH
16203: CALL_OW 120
16207: GO 16190
16209: POP
16210: POP
// end ;
16211: LD_VAR 0 3
16215: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16216: LD_INT 0
16218: PPUSH
16219: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16220: LD_INT 22
16222: PUSH
16223: LD_VAR 0 1
16227: PUSH
16228: EMPTY
16229: LIST
16230: LIST
16231: PUSH
16232: LD_INT 25
16234: PUSH
16235: LD_INT 2
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PPUSH
16246: CALL_OW 69
16250: PUSH
16251: LD_INT 0
16253: GREATER
16254: PUSH
16255: LD_INT 22
16257: PUSH
16258: LD_VAR 0 1
16262: PUSH
16263: EMPTY
16264: LIST
16265: LIST
16266: PUSH
16267: LD_INT 21
16269: PUSH
16270: LD_INT 3
16272: PUSH
16273: EMPTY
16274: LIST
16275: LIST
16276: PUSH
16277: LD_INT 3
16279: PUSH
16280: LD_INT 24
16282: PUSH
16283: LD_INT 1000
16285: PUSH
16286: EMPTY
16287: LIST
16288: LIST
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: EMPTY
16295: LIST
16296: LIST
16297: LIST
16298: PPUSH
16299: CALL_OW 69
16303: PUSH
16304: LD_INT 0
16306: EQUAL
16307: AND
16308: PUSH
16309: LD_VAR 0 2
16313: PUSH
16314: LD_INT 0
16316: GREATER
16317: AND
16318: IFFALSE 16417
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16320: LD_ADDR_VAR 0 4
16324: PUSH
16325: LD_INT 22
16327: PUSH
16328: LD_VAR 0 1
16332: PUSH
16333: EMPTY
16334: LIST
16335: LIST
16336: PUSH
16337: LD_INT 25
16339: PUSH
16340: LD_INT 2
16342: PUSH
16343: EMPTY
16344: LIST
16345: LIST
16346: PUSH
16347: EMPTY
16348: LIST
16349: LIST
16350: PPUSH
16351: CALL_OW 69
16355: PUSH
16356: FOR_IN
16357: IFFALSE 16415
// begin AddComExitBuilding ( i ) ;
16359: LD_VAR 0 4
16363: PPUSH
16364: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16368: LD_VAR 0 4
16372: PPUSH
16373: LD_VAR 0 2
16377: PUSH
16378: LD_INT 1
16380: ARRAY
16381: PPUSH
16382: LD_VAR 0 2
16386: PUSH
16387: LD_INT 2
16389: ARRAY
16390: PPUSH
16391: LD_VAR 0 2
16395: PUSH
16396: LD_INT 3
16398: ARRAY
16399: PPUSH
16400: LD_VAR 0 2
16404: PUSH
16405: LD_INT 4
16407: ARRAY
16408: PPUSH
16409: CALL_OW 205
// end ;
16413: GO 16356
16415: POP
16416: POP
// end ; end ;
16417: LD_VAR 0 3
16421: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16422: LD_INT 0
16424: PPUSH
16425: PPUSH
16426: PPUSH
16427: PPUSH
16428: PPUSH
16429: PPUSH
16430: PPUSH
16431: PPUSH
16432: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16433: LD_ADDR_VAR 0 6
16437: PUSH
16438: LD_INT 22
16440: PUSH
16441: LD_VAR 0 1
16445: PUSH
16446: EMPTY
16447: LIST
16448: LIST
16449: PUSH
16450: LD_INT 25
16452: PUSH
16453: LD_INT 4
16455: PUSH
16456: EMPTY
16457: LIST
16458: LIST
16459: PUSH
16460: LD_INT 24
16462: PUSH
16463: LD_INT 251
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: LIST
16474: PPUSH
16475: CALL_OW 69
16479: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16480: LD_ADDR_VAR 0 7
16484: PUSH
16485: LD_VAR 0 3
16489: PPUSH
16490: LD_INT 22
16492: PUSH
16493: LD_VAR 0 1
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PUSH
16502: LD_INT 25
16504: PUSH
16505: LD_INT 4
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PUSH
16512: LD_INT 50
16514: PUSH
16515: EMPTY
16516: LIST
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: LIST
16522: PPUSH
16523: CALL_OW 70
16527: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16528: LD_ADDR_VAR 0 10
16532: PUSH
16533: LD_VAR 0 3
16537: PPUSH
16538: LD_INT 22
16540: PUSH
16541: LD_VAR 0 1
16545: PUSH
16546: EMPTY
16547: LIST
16548: LIST
16549: PUSH
16550: LD_INT 21
16552: PUSH
16553: LD_INT 1
16555: PUSH
16556: EMPTY
16557: LIST
16558: LIST
16559: PUSH
16560: LD_INT 3
16562: PUSH
16563: LD_INT 25
16565: PUSH
16566: LD_INT 3
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PUSH
16577: LD_INT 3
16579: PUSH
16580: LD_INT 24
16582: PUSH
16583: LD_INT 750
16585: PUSH
16586: EMPTY
16587: LIST
16588: LIST
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: LIST
16598: LIST
16599: PPUSH
16600: CALL_OW 70
16604: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16605: LD_ADDR_VAR 0 11
16609: PUSH
16610: LD_VAR 0 2
16614: PPUSH
16615: LD_INT 22
16617: PUSH
16618: LD_VAR 0 1
16622: PUSH
16623: EMPTY
16624: LIST
16625: LIST
16626: PUSH
16627: LD_INT 21
16629: PUSH
16630: LD_INT 1
16632: PUSH
16633: EMPTY
16634: LIST
16635: LIST
16636: PUSH
16637: LD_INT 3
16639: PUSH
16640: LD_INT 25
16642: PUSH
16643: LD_INT 3
16645: PUSH
16646: EMPTY
16647: LIST
16648: LIST
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 3
16656: PUSH
16657: LD_INT 24
16659: PUSH
16660: LD_INT 1000
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: PPUSH
16677: CALL_OW 70
16681: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16682: LD_VAR 0 10
16686: NOT
16687: PUSH
16688: LD_VAR 0 7
16692: NOT
16693: AND
16694: PUSH
16695: LD_VAR 0 11
16699: NOT
16700: AND
16701: IFFALSE 16705
// exit ;
16703: GO 16965
// if damageUnits > 0 and sci_list > 0 then
16705: LD_VAR 0 10
16709: PUSH
16710: LD_INT 0
16712: GREATER
16713: PUSH
16714: LD_VAR 0 6
16718: PUSH
16719: LD_INT 0
16721: GREATER
16722: AND
16723: IFFALSE 16756
// for i in damageUnits do
16725: LD_ADDR_VAR 0 8
16729: PUSH
16730: LD_VAR 0 10
16734: PUSH
16735: FOR_IN
16736: IFFALSE 16754
// ComMoveToArea ( i , healArea ) ;
16738: LD_VAR 0 8
16742: PPUSH
16743: LD_VAR 0 2
16747: PPUSH
16748: CALL_OW 113
16752: GO 16735
16754: POP
16755: POP
// if unitsToHeal > 0 and sci_list > 0 then
16756: LD_VAR 0 11
16760: PUSH
16761: LD_INT 0
16763: GREATER
16764: PUSH
16765: LD_VAR 0 6
16769: PUSH
16770: LD_INT 0
16772: GREATER
16773: AND
16774: IFFALSE 16833
// begin for i in sci_list do
16776: LD_ADDR_VAR 0 8
16780: PUSH
16781: LD_VAR 0 6
16785: PUSH
16786: FOR_IN
16787: IFFALSE 16831
// begin ComExitBuilding ( i ) ;
16789: LD_VAR 0 8
16793: PPUSH
16794: CALL_OW 122
// for j in unitsToHeal do
16798: LD_ADDR_VAR 0 9
16802: PUSH
16803: LD_VAR 0 11
16807: PUSH
16808: FOR_IN
16809: IFFALSE 16827
// AddComHeal ( i , j ) ;
16811: LD_VAR 0 8
16815: PPUSH
16816: LD_VAR 0 9
16820: PPUSH
16821: CALL_OW 188
16825: GO 16808
16827: POP
16828: POP
// end ;
16829: GO 16786
16831: POP
16832: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
16833: LD_VAR 0 10
16837: PUSH
16838: LD_INT 0
16840: EQUAL
16841: PUSH
16842: LD_VAR 0 11
16846: PUSH
16847: LD_INT 0
16849: EQUAL
16850: AND
16851: PUSH
16852: LD_VAR 0 7
16856: PUSH
16857: LD_INT 0
16859: GREATER
16860: AND
16861: IFFALSE 16965
// for i in sci_listOutside do
16863: LD_ADDR_VAR 0 8
16867: PUSH
16868: LD_VAR 0 7
16872: PUSH
16873: FOR_IN
16874: IFFALSE 16963
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
16876: LD_ADDR_VAR 0 12
16880: PUSH
16881: LD_INT 22
16883: PUSH
16884: LD_VAR 0 1
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 21
16895: PUSH
16896: LD_INT 3
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: PUSH
16903: LD_INT 30
16905: PUSH
16906: LD_INT 8
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: PPUSH
16918: CALL_OW 69
16922: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
16923: LD_ADDR_VAR 0 13
16927: PUSH
16928: LD_INT 1
16930: PPUSH
16931: LD_VAR 0 12
16935: PPUSH
16936: CALL_OW 12
16940: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
16941: LD_VAR 0 8
16945: PPUSH
16946: LD_VAR 0 12
16950: PUSH
16951: LD_VAR 0 13
16955: ARRAY
16956: PPUSH
16957: CALL_OW 120
// end ;
16961: GO 16873
16963: POP
16964: POP
// end ;
16965: LD_VAR 0 5
16969: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
16970: LD_INT 0
16972: PPUSH
16973: PPUSH
16974: PPUSH
16975: PPUSH
16976: PPUSH
16977: PPUSH
16978: PPUSH
16979: PPUSH
16980: PPUSH
16981: PPUSH
16982: PPUSH
// amChassisTab = [ ] ;
16983: LD_ADDR_VAR 0 19
16987: PUSH
16988: EMPTY
16989: ST_TO_ADDR
// arChassisTab = [ ] ;
16990: LD_ADDR_VAR 0 18
16994: PUSH
16995: EMPTY
16996: ST_TO_ADDR
// ruChassisTab = [ ] ;
16997: LD_ADDR_VAR 0 17
17001: PUSH
17002: EMPTY
17003: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17004: LD_INT 35
17006: PPUSH
17007: CALL_OW 67
// if nation = 1 then
17011: LD_VAR 0 5
17015: PUSH
17016: LD_INT 1
17018: EQUAL
17019: IFFALSE 17524
// begin uc_side = side ;
17021: LD_ADDR_OWVAR 20
17025: PUSH
17026: LD_VAR 0 2
17030: ST_TO_ADDR
// uc_nation = nation ;
17031: LD_ADDR_OWVAR 21
17035: PUSH
17036: LD_VAR 0 5
17040: ST_TO_ADDR
// vc_engine = vehengine ;
17041: LD_ADDR_OWVAR 39
17045: PUSH
17046: LD_VAR 0 6
17050: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17051: LD_ADDR_OWVAR 38
17055: PUSH
17056: LD_VAR 0 7
17060: PUSH
17061: LD_INT 1
17063: PPUSH
17064: LD_VAR 0 7
17068: PPUSH
17069: CALL_OW 12
17073: ARRAY
17074: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17075: LD_ADDR_OWVAR 40
17079: PUSH
17080: LD_VAR 0 10
17084: PUSH
17085: LD_INT 1
17087: PPUSH
17088: LD_VAR 0 10
17092: PPUSH
17093: CALL_OW 12
17097: ARRAY
17098: ST_TO_ADDR
// for j = 1 to AMWeapon do
17099: LD_ADDR_VAR 0 14
17103: PUSH
17104: DOUBLE
17105: LD_INT 1
17107: DEC
17108: ST_TO_ADDR
17109: LD_VAR 0 10
17113: PUSH
17114: FOR_TO
17115: IFFALSE 17416
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17117: LD_VAR 0 10
17121: PUSH
17122: LD_VAR 0 14
17126: ARRAY
17127: PUSH
17128: LD_INT 2
17130: EQUAL
17131: PUSH
17132: LD_VAR 0 10
17136: PUSH
17137: LD_VAR 0 14
17141: ARRAY
17142: PUSH
17143: LD_INT 3
17145: EQUAL
17146: OR
17147: IFFALSE 17200
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17149: LD_ADDR_VAR 0 19
17153: PUSH
17154: LD_INT 1
17156: PUSH
17157: LD_INT 2
17159: PUSH
17160: LD_INT 3
17162: PUSH
17163: LD_INT 4
17165: PUSH
17166: LD_INT 5
17168: PUSH
17169: EMPTY
17170: LIST
17171: LIST
17172: LIST
17173: LIST
17174: LIST
17175: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17176: LD_ADDR_OWVAR 37
17180: PUSH
17181: LD_VAR 0 19
17185: PUSH
17186: LD_INT 1
17188: PPUSH
17189: LD_VAR 0 19
17193: PPUSH
17194: CALL_OW 12
17198: ARRAY
17199: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17200: LD_VAR 0 10
17204: PUSH
17205: LD_VAR 0 14
17209: ARRAY
17210: PUSH
17211: LD_INT 4
17213: EQUAL
17214: PUSH
17215: LD_VAR 0 10
17219: PUSH
17220: LD_VAR 0 14
17224: ARRAY
17225: PUSH
17226: LD_INT 5
17228: EQUAL
17229: OR
17230: PUSH
17231: LD_VAR 0 10
17235: PUSH
17236: LD_VAR 0 14
17240: ARRAY
17241: PUSH
17242: LD_INT 9
17244: EQUAL
17245: OR
17246: PUSH
17247: LD_VAR 0 10
17251: PUSH
17252: LD_VAR 0 14
17256: ARRAY
17257: PUSH
17258: LD_INT 11
17260: EQUAL
17261: OR
17262: PUSH
17263: LD_VAR 0 10
17267: PUSH
17268: LD_VAR 0 14
17272: ARRAY
17273: PUSH
17274: LD_INT 7
17276: EQUAL
17277: OR
17278: IFFALSE 17327
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17280: LD_ADDR_VAR 0 19
17284: PUSH
17285: LD_INT 2
17287: PUSH
17288: LD_INT 3
17290: PUSH
17291: LD_INT 4
17293: PUSH
17294: LD_INT 5
17296: PUSH
17297: EMPTY
17298: LIST
17299: LIST
17300: LIST
17301: LIST
17302: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17303: LD_ADDR_OWVAR 37
17307: PUSH
17308: LD_VAR 0 19
17312: PUSH
17313: LD_INT 1
17315: PPUSH
17316: LD_VAR 0 19
17320: PPUSH
17321: CALL_OW 12
17325: ARRAY
17326: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17327: LD_VAR 0 10
17331: PUSH
17332: LD_VAR 0 14
17336: ARRAY
17337: PUSH
17338: LD_INT 8
17340: EQUAL
17341: PUSH
17342: LD_VAR 0 10
17346: PUSH
17347: LD_VAR 0 14
17351: ARRAY
17352: PUSH
17353: LD_INT 6
17355: EQUAL
17356: OR
17357: PUSH
17358: LD_VAR 0 10
17362: PUSH
17363: LD_VAR 0 14
17367: ARRAY
17368: PUSH
17369: LD_INT 10
17371: EQUAL
17372: OR
17373: IFFALSE 17414
// begin amChassisTab = [ 4 , 5 ] ;
17375: LD_ADDR_VAR 0 19
17379: PUSH
17380: LD_INT 4
17382: PUSH
17383: LD_INT 5
17385: PUSH
17386: EMPTY
17387: LIST
17388: LIST
17389: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17390: LD_ADDR_OWVAR 37
17394: PUSH
17395: LD_VAR 0 19
17399: PUSH
17400: LD_INT 1
17402: PPUSH
17403: LD_VAR 0 19
17407: PPUSH
17408: CALL_OW 12
17412: ARRAY
17413: ST_TO_ADDR
// end ; end ;
17414: GO 17114
17416: POP
17417: POP
// veh = CreateVehicle ;
17418: LD_ADDR_VAR 0 16
17422: PUSH
17423: CALL_OW 45
17427: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17428: LD_VAR 0 16
17432: PPUSH
17433: LD_VAR 0 1
17437: PPUSH
17438: LD_INT 0
17440: PPUSH
17441: CALL_OW 49
// if vc_control = 1 then
17445: LD_OWVAR 38
17449: PUSH
17450: LD_INT 1
17452: EQUAL
17453: IFFALSE 17510
// begin hc_gallery =  ;
17455: LD_ADDR_OWVAR 33
17459: PUSH
17460: LD_STRING 
17462: ST_TO_ADDR
// hc_name =  ;
17463: LD_ADDR_OWVAR 26
17467: PUSH
17468: LD_STRING 
17470: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17471: LD_INT 0
17473: PPUSH
17474: LD_INT 3
17476: PPUSH
17477: LD_VAR 0 4
17481: PPUSH
17482: CALL_OW 380
// un = CreateHuman ;
17486: LD_ADDR_VAR 0 15
17490: PUSH
17491: CALL_OW 44
17495: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17496: LD_VAR 0 15
17500: PPUSH
17501: LD_VAR 0 16
17505: PPUSH
17506: CALL_OW 52
// end ; i = i + 1 ;
17510: LD_ADDR_VAR 0 13
17514: PUSH
17515: LD_VAR 0 13
17519: PUSH
17520: LD_INT 1
17522: PLUS
17523: ST_TO_ADDR
// end ; if nation = 2 then
17524: LD_VAR 0 5
17528: PUSH
17529: LD_INT 2
17531: EQUAL
17532: IFFALSE 17954
// begin uc_side = side ;
17534: LD_ADDR_OWVAR 20
17538: PUSH
17539: LD_VAR 0 2
17543: ST_TO_ADDR
// uc_nation = nation ;
17544: LD_ADDR_OWVAR 21
17548: PUSH
17549: LD_VAR 0 5
17553: ST_TO_ADDR
// vc_engine = vehengine ;
17554: LD_ADDR_OWVAR 39
17558: PUSH
17559: LD_VAR 0 6
17563: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17564: LD_ADDR_OWVAR 38
17568: PUSH
17569: LD_VAR 0 7
17573: PUSH
17574: LD_INT 1
17576: PPUSH
17577: LD_VAR 0 7
17581: PPUSH
17582: CALL_OW 12
17586: ARRAY
17587: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17588: LD_ADDR_OWVAR 40
17592: PUSH
17593: LD_VAR 0 9
17597: PUSH
17598: LD_INT 1
17600: PPUSH
17601: LD_VAR 0 9
17605: PPUSH
17606: CALL_OW 12
17610: ARRAY
17611: ST_TO_ADDR
// for j = 1 to ARWeapons do
17612: LD_ADDR_VAR 0 14
17616: PUSH
17617: DOUBLE
17618: LD_INT 1
17620: DEC
17621: ST_TO_ADDR
17622: LD_VAR 0 9
17626: PUSH
17627: FOR_TO
17628: IFFALSE 17846
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17630: LD_VAR 0 9
17634: PUSH
17635: LD_VAR 0 14
17639: ARRAY
17640: PUSH
17641: LD_INT 24
17643: EQUAL
17644: PUSH
17645: LD_VAR 0 9
17649: PUSH
17650: LD_VAR 0 14
17654: ARRAY
17655: PUSH
17656: LD_INT 22
17658: EQUAL
17659: OR
17660: PUSH
17661: LD_VAR 0 9
17665: PUSH
17666: LD_VAR 0 14
17670: ARRAY
17671: PUSH
17672: LD_INT 23
17674: EQUAL
17675: OR
17676: PUSH
17677: LD_VAR 0 9
17681: PUSH
17682: LD_VAR 0 14
17686: ARRAY
17687: PUSH
17688: LD_INT 30
17690: EQUAL
17691: OR
17692: IFFALSE 17729
// begin arChassisTab = [ 14 ] ;
17694: LD_ADDR_VAR 0 18
17698: PUSH
17699: LD_INT 14
17701: PUSH
17702: EMPTY
17703: LIST
17704: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17705: LD_ADDR_OWVAR 37
17709: PUSH
17710: LD_VAR 0 18
17714: PUSH
17715: LD_INT 1
17717: PPUSH
17718: LD_VAR 0 18
17722: PPUSH
17723: CALL_OW 12
17727: ARRAY
17728: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17729: LD_VAR 0 9
17733: PUSH
17734: LD_VAR 0 14
17738: ARRAY
17739: PUSH
17740: LD_INT 29
17742: EQUAL
17743: PUSH
17744: LD_VAR 0 9
17748: PUSH
17749: LD_VAR 0 14
17753: ARRAY
17754: PUSH
17755: LD_INT 28
17757: EQUAL
17758: OR
17759: PUSH
17760: LD_VAR 0 9
17764: PUSH
17765: LD_VAR 0 14
17769: ARRAY
17770: PUSH
17771: LD_INT 27
17773: EQUAL
17774: OR
17775: PUSH
17776: LD_VAR 0 9
17780: PUSH
17781: LD_VAR 0 14
17785: ARRAY
17786: PUSH
17787: LD_INT 26
17789: EQUAL
17790: OR
17791: PUSH
17792: LD_VAR 0 9
17796: PUSH
17797: LD_VAR 0 14
17801: ARRAY
17802: PUSH
17803: LD_INT 25
17805: EQUAL
17806: OR
17807: IFFALSE 17844
// begin arChassisTab = [ 14 ] ;
17809: LD_ADDR_VAR 0 18
17813: PUSH
17814: LD_INT 14
17816: PUSH
17817: EMPTY
17818: LIST
17819: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17820: LD_ADDR_OWVAR 37
17824: PUSH
17825: LD_VAR 0 18
17829: PUSH
17830: LD_INT 1
17832: PPUSH
17833: LD_VAR 0 18
17837: PPUSH
17838: CALL_OW 12
17842: ARRAY
17843: ST_TO_ADDR
// end ; end ;
17844: GO 17627
17846: POP
17847: POP
// veh = CreateVehicle ;
17848: LD_ADDR_VAR 0 16
17852: PUSH
17853: CALL_OW 45
17857: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17858: LD_VAR 0 16
17862: PPUSH
17863: LD_VAR 0 1
17867: PPUSH
17868: LD_INT 0
17870: PPUSH
17871: CALL_OW 49
// if vc_control = 1 then
17875: LD_OWVAR 38
17879: PUSH
17880: LD_INT 1
17882: EQUAL
17883: IFFALSE 17940
// begin hc_gallery =  ;
17885: LD_ADDR_OWVAR 33
17889: PUSH
17890: LD_STRING 
17892: ST_TO_ADDR
// hc_name =  ;
17893: LD_ADDR_OWVAR 26
17897: PUSH
17898: LD_STRING 
17900: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17901: LD_INT 0
17903: PPUSH
17904: LD_INT 3
17906: PPUSH
17907: LD_VAR 0 4
17911: PPUSH
17912: CALL_OW 380
// un = CreateHuman ;
17916: LD_ADDR_VAR 0 15
17920: PUSH
17921: CALL_OW 44
17925: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17926: LD_VAR 0 15
17930: PPUSH
17931: LD_VAR 0 16
17935: PPUSH
17936: CALL_OW 52
// end ; i = i + 1 ;
17940: LD_ADDR_VAR 0 13
17944: PUSH
17945: LD_VAR 0 13
17949: PUSH
17950: LD_INT 1
17952: PLUS
17953: ST_TO_ADDR
// end ; if nation = 3 then
17954: LD_VAR 0 5
17958: PUSH
17959: LD_INT 3
17961: EQUAL
17962: IFFALSE 18368
// begin uc_side = side ;
17964: LD_ADDR_OWVAR 20
17968: PUSH
17969: LD_VAR 0 2
17973: ST_TO_ADDR
// uc_nation = nation ;
17974: LD_ADDR_OWVAR 21
17978: PUSH
17979: LD_VAR 0 5
17983: ST_TO_ADDR
// vc_engine = vehengine ;
17984: LD_ADDR_OWVAR 39
17988: PUSH
17989: LD_VAR 0 6
17993: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17994: LD_ADDR_OWVAR 38
17998: PUSH
17999: LD_VAR 0 7
18003: PUSH
18004: LD_INT 1
18006: PPUSH
18007: LD_VAR 0 7
18011: PPUSH
18012: CALL_OW 12
18016: ARRAY
18017: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18018: LD_ADDR_OWVAR 40
18022: PUSH
18023: LD_VAR 0 8
18027: PUSH
18028: LD_INT 1
18030: PPUSH
18031: LD_VAR 0 8
18035: PPUSH
18036: CALL_OW 12
18040: ARRAY
18041: ST_TO_ADDR
// for j = 1 to RuWeapons do
18042: LD_ADDR_VAR 0 14
18046: PUSH
18047: DOUBLE
18048: LD_INT 1
18050: DEC
18051: ST_TO_ADDR
18052: LD_VAR 0 8
18056: PUSH
18057: FOR_TO
18058: IFFALSE 18260
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18060: LD_VAR 0 8
18064: PUSH
18065: LD_VAR 0 14
18069: ARRAY
18070: PUSH
18071: LD_INT 42
18073: EQUAL
18074: PUSH
18075: LD_VAR 0 8
18079: PUSH
18080: LD_VAR 0 14
18084: ARRAY
18085: PUSH
18086: LD_INT 43
18088: EQUAL
18089: OR
18090: PUSH
18091: LD_VAR 0 8
18095: PUSH
18096: LD_VAR 0 14
18100: ARRAY
18101: PUSH
18102: LD_INT 44
18104: EQUAL
18105: OR
18106: PUSH
18107: LD_VAR 0 8
18111: PUSH
18112: LD_VAR 0 14
18116: ARRAY
18117: PUSH
18118: LD_INT 45
18120: EQUAL
18121: OR
18122: PUSH
18123: LD_VAR 0 8
18127: PUSH
18128: LD_VAR 0 14
18132: ARRAY
18133: PUSH
18134: LD_INT 49
18136: EQUAL
18137: OR
18138: IFFALSE 18187
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18140: LD_ADDR_VAR 0 17
18144: PUSH
18145: LD_INT 21
18147: PUSH
18148: LD_INT 22
18150: PUSH
18151: LD_INT 23
18153: PUSH
18154: LD_INT 24
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18163: LD_ADDR_OWVAR 37
18167: PUSH
18168: LD_VAR 0 17
18172: PUSH
18173: LD_INT 1
18175: PPUSH
18176: LD_VAR 0 17
18180: PPUSH
18181: CALL_OW 12
18185: ARRAY
18186: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18187: LD_VAR 0 8
18191: PUSH
18192: LD_VAR 0 14
18196: ARRAY
18197: PUSH
18198: LD_INT 46
18200: EQUAL
18201: PUSH
18202: LD_VAR 0 8
18206: PUSH
18207: LD_VAR 0 14
18211: ARRAY
18212: PUSH
18213: LD_INT 47
18215: EQUAL
18216: OR
18217: IFFALSE 18258
// begin ruChassisTab = [ 23 , 24 ] ;
18219: LD_ADDR_VAR 0 17
18223: PUSH
18224: LD_INT 23
18226: PUSH
18227: LD_INT 24
18229: PUSH
18230: EMPTY
18231: LIST
18232: LIST
18233: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18234: LD_ADDR_OWVAR 37
18238: PUSH
18239: LD_VAR 0 17
18243: PUSH
18244: LD_INT 1
18246: PPUSH
18247: LD_VAR 0 17
18251: PPUSH
18252: CALL_OW 12
18256: ARRAY
18257: ST_TO_ADDR
// end ; end ;
18258: GO 18057
18260: POP
18261: POP
// veh = CreateVehicle ;
18262: LD_ADDR_VAR 0 16
18266: PUSH
18267: CALL_OW 45
18271: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18272: LD_VAR 0 16
18276: PPUSH
18277: LD_VAR 0 1
18281: PPUSH
18282: LD_INT 0
18284: PPUSH
18285: CALL_OW 49
// if vc_control = 1 then
18289: LD_OWVAR 38
18293: PUSH
18294: LD_INT 1
18296: EQUAL
18297: IFFALSE 18354
// begin hc_gallery =  ;
18299: LD_ADDR_OWVAR 33
18303: PUSH
18304: LD_STRING 
18306: ST_TO_ADDR
// hc_name =  ;
18307: LD_ADDR_OWVAR 26
18311: PUSH
18312: LD_STRING 
18314: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18315: LD_INT 0
18317: PPUSH
18318: LD_INT 3
18320: PPUSH
18321: LD_VAR 0 4
18325: PPUSH
18326: CALL_OW 380
// un = CreateHuman ;
18330: LD_ADDR_VAR 0 15
18334: PUSH
18335: CALL_OW 44
18339: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18340: LD_VAR 0 15
18344: PPUSH
18345: LD_VAR 0 16
18349: PPUSH
18350: CALL_OW 52
// end ; i = i + 1 ;
18354: LD_ADDR_VAR 0 13
18358: PUSH
18359: LD_VAR 0 13
18363: PUSH
18364: LD_INT 1
18366: PLUS
18367: ST_TO_ADDR
// end ; until i = vehCount ;
18368: LD_VAR 0 13
18372: PUSH
18373: LD_VAR 0 3
18377: EQUAL
18378: IFFALSE 17004
// repeat wait ( 0 0$1 ) ;
18380: LD_INT 35
18382: PPUSH
18383: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18387: LD_ADDR_VAR 0 20
18391: PUSH
18392: LD_INT 22
18394: PUSH
18395: LD_VAR 0 2
18399: PUSH
18400: EMPTY
18401: LIST
18402: LIST
18403: PUSH
18404: LD_INT 21
18406: PUSH
18407: LD_INT 2
18409: PUSH
18410: EMPTY
18411: LIST
18412: LIST
18413: PUSH
18414: LD_INT 24
18416: PUSH
18417: LD_INT 650
18419: PUSH
18420: EMPTY
18421: LIST
18422: LIST
18423: PUSH
18424: EMPTY
18425: LIST
18426: LIST
18427: LIST
18428: PPUSH
18429: CALL_OW 69
18433: ST_TO_ADDR
// if vehicleOK_list > 0 then
18434: LD_VAR 0 20
18438: PUSH
18439: LD_INT 0
18441: GREATER
18442: IFFALSE 18633
// begin for i in vehicleOK_list do
18444: LD_ADDR_VAR 0 13
18448: PUSH
18449: LD_VAR 0 20
18453: PUSH
18454: FOR_IN
18455: IFFALSE 18631
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18457: LD_ADDR_VAR 0 21
18461: PUSH
18462: LD_INT 22
18464: PUSH
18465: LD_VAR 0 11
18469: PUSH
18470: EMPTY
18471: LIST
18472: LIST
18473: PPUSH
18474: CALL_OW 69
18478: PPUSH
18479: LD_VAR 0 13
18483: PPUSH
18484: CALL_OW 74
18488: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18489: LD_ADDR_VAR 0 22
18493: PUSH
18494: LD_INT 22
18496: PUSH
18497: LD_VAR 0 11
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: LD_INT 2
18508: PUSH
18509: LD_INT 59
18511: PUSH
18512: EMPTY
18513: LIST
18514: PUSH
18515: LD_INT 21
18517: PUSH
18518: LD_INT 1
18520: PUSH
18521: EMPTY
18522: LIST
18523: LIST
18524: PUSH
18525: LD_INT 21
18527: PUSH
18528: LD_INT 2
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: LIST
18539: LIST
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: EMPTY
18546: LIST
18547: PPUSH
18548: CALL_OW 69
18552: PPUSH
18553: LD_VAR 0 13
18557: PPUSH
18558: CALL_OW 74
18562: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18563: LD_VAR 0 13
18567: PPUSH
18568: LD_VAR 0 21
18572: PPUSH
18573: CALL_OW 296
18577: PUSH
18578: LD_INT 8
18580: PLUS
18581: PUSH
18582: LD_VAR 0 13
18586: PPUSH
18587: LD_VAR 0 22
18591: PPUSH
18592: CALL_OW 296
18596: LESS
18597: IFFALSE 18615
// begin ComAttackUnit ( i , target1 ) ;
18599: LD_VAR 0 13
18603: PPUSH
18604: LD_VAR 0 21
18608: PPUSH
18609: CALL_OW 115
// end else
18613: GO 18629
// begin ComAttackUnit ( i , target2 ) ;
18615: LD_VAR 0 13
18619: PPUSH
18620: LD_VAR 0 22
18624: PPUSH
18625: CALL_OW 115
// end ; end ;
18629: GO 18454
18631: POP
18632: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18633: LD_INT 22
18635: PUSH
18636: LD_VAR 0 2
18640: PUSH
18641: EMPTY
18642: LIST
18643: LIST
18644: PUSH
18645: LD_INT 21
18647: PUSH
18648: LD_INT 2
18650: PUSH
18651: EMPTY
18652: LIST
18653: LIST
18654: PUSH
18655: EMPTY
18656: LIST
18657: LIST
18658: PPUSH
18659: CALL_OW 69
18663: PUSH
18664: LD_INT 0
18666: EQUAL
18667: IFFALSE 18380
// end ;
18669: LD_VAR 0 12
18673: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18674: LD_INT 0
18676: PPUSH
18677: PPUSH
18678: PPUSH
18679: PPUSH
18680: PPUSH
18681: PPUSH
18682: PPUSH
18683: PPUSH
18684: PPUSH
18685: PPUSH
18686: PPUSH
// for i = 1 to soldierCount do
18687: LD_ADDR_VAR 0 13
18691: PUSH
18692: DOUBLE
18693: LD_INT 1
18695: DEC
18696: ST_TO_ADDR
18697: LD_VAR 0 3
18701: PUSH
18702: FOR_TO
18703: IFFALSE 18785
// begin uc_side = side ;
18705: LD_ADDR_OWVAR 20
18709: PUSH
18710: LD_VAR 0 1
18714: ST_TO_ADDR
// uc_nation = nation ;
18715: LD_ADDR_OWVAR 21
18719: PUSH
18720: LD_VAR 0 2
18724: ST_TO_ADDR
// hc_name =  ;
18725: LD_ADDR_OWVAR 26
18729: PUSH
18730: LD_STRING 
18732: ST_TO_ADDR
// hc_gallery =  ;
18733: LD_ADDR_OWVAR 33
18737: PUSH
18738: LD_STRING 
18740: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18741: LD_INT 0
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: LD_VAR 0 8
18751: PPUSH
18752: CALL_OW 380
// un = CreateHuman ;
18756: LD_ADDR_VAR 0 15
18760: PUSH
18761: CALL_OW 44
18765: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18766: LD_VAR 0 15
18770: PPUSH
18771: LD_VAR 0 9
18775: PPUSH
18776: LD_INT 0
18778: PPUSH
18779: CALL_OW 49
// end ;
18783: GO 18702
18785: POP
18786: POP
// for i = 1 to sniperCount do
18787: LD_ADDR_VAR 0 13
18791: PUSH
18792: DOUBLE
18793: LD_INT 1
18795: DEC
18796: ST_TO_ADDR
18797: LD_VAR 0 4
18801: PUSH
18802: FOR_TO
18803: IFFALSE 18885
// begin uc_side = side ;
18805: LD_ADDR_OWVAR 20
18809: PUSH
18810: LD_VAR 0 1
18814: ST_TO_ADDR
// uc_nation = nation ;
18815: LD_ADDR_OWVAR 21
18819: PUSH
18820: LD_VAR 0 2
18824: ST_TO_ADDR
// hc_name =  ;
18825: LD_ADDR_OWVAR 26
18829: PUSH
18830: LD_STRING 
18832: ST_TO_ADDR
// hc_gallery =  ;
18833: LD_ADDR_OWVAR 33
18837: PUSH
18838: LD_STRING 
18840: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
18841: LD_INT 0
18843: PPUSH
18844: LD_INT 5
18846: PPUSH
18847: LD_VAR 0 8
18851: PPUSH
18852: CALL_OW 380
// un = CreateHuman ;
18856: LD_ADDR_VAR 0 15
18860: PUSH
18861: CALL_OW 44
18865: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18866: LD_VAR 0 15
18870: PPUSH
18871: LD_VAR 0 9
18875: PPUSH
18876: LD_INT 0
18878: PPUSH
18879: CALL_OW 49
// end ;
18883: GO 18802
18885: POP
18886: POP
// for i = 1 to bazookCount do
18887: LD_ADDR_VAR 0 13
18891: PUSH
18892: DOUBLE
18893: LD_INT 1
18895: DEC
18896: ST_TO_ADDR
18897: LD_VAR 0 5
18901: PUSH
18902: FOR_TO
18903: IFFALSE 18985
// begin uc_side = side ;
18905: LD_ADDR_OWVAR 20
18909: PUSH
18910: LD_VAR 0 1
18914: ST_TO_ADDR
// uc_nation = nation ;
18915: LD_ADDR_OWVAR 21
18919: PUSH
18920: LD_VAR 0 2
18924: ST_TO_ADDR
// hc_name =  ;
18925: LD_ADDR_OWVAR 26
18929: PUSH
18930: LD_STRING 
18932: ST_TO_ADDR
// hc_gallery =  ;
18933: LD_ADDR_OWVAR 33
18937: PUSH
18938: LD_STRING 
18940: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
18941: LD_INT 0
18943: PPUSH
18944: LD_INT 9
18946: PPUSH
18947: LD_VAR 0 8
18951: PPUSH
18952: CALL_OW 380
// un = CreateHuman ;
18956: LD_ADDR_VAR 0 15
18960: PUSH
18961: CALL_OW 44
18965: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
18966: LD_VAR 0 15
18970: PPUSH
18971: LD_VAR 0 9
18975: PPUSH
18976: LD_INT 0
18978: PPUSH
18979: CALL_OW 49
// end ;
18983: GO 18902
18985: POP
18986: POP
// for i = 1 to mortalCount do
18987: LD_ADDR_VAR 0 13
18991: PUSH
18992: DOUBLE
18993: LD_INT 1
18995: DEC
18996: ST_TO_ADDR
18997: LD_VAR 0 6
19001: PUSH
19002: FOR_TO
19003: IFFALSE 19085
// begin uc_side = side ;
19005: LD_ADDR_OWVAR 20
19009: PUSH
19010: LD_VAR 0 1
19014: ST_TO_ADDR
// uc_nation = nation ;
19015: LD_ADDR_OWVAR 21
19019: PUSH
19020: LD_VAR 0 2
19024: ST_TO_ADDR
// hc_name =  ;
19025: LD_ADDR_OWVAR 26
19029: PUSH
19030: LD_STRING 
19032: ST_TO_ADDR
// hc_gallery =  ;
19033: LD_ADDR_OWVAR 33
19037: PUSH
19038: LD_STRING 
19040: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19041: LD_INT 0
19043: PPUSH
19044: LD_INT 8
19046: PPUSH
19047: LD_VAR 0 8
19051: PPUSH
19052: CALL_OW 380
// un = CreateHuman ;
19056: LD_ADDR_VAR 0 15
19060: PUSH
19061: CALL_OW 44
19065: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19066: LD_VAR 0 15
19070: PPUSH
19071: LD_VAR 0 9
19075: PPUSH
19076: LD_INT 0
19078: PPUSH
19079: CALL_OW 49
// end ;
19083: GO 19002
19085: POP
19086: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19087: LD_ADDR_VAR 0 18
19091: PUSH
19092: LD_INT 22
19094: PUSH
19095: LD_VAR 0 1
19099: PUSH
19100: EMPTY
19101: LIST
19102: LIST
19103: PUSH
19104: LD_INT 2
19106: PUSH
19107: LD_INT 25
19109: PUSH
19110: LD_INT 1
19112: PUSH
19113: EMPTY
19114: LIST
19115: LIST
19116: PUSH
19117: LD_INT 25
19119: PUSH
19120: LD_INT 5
19122: PUSH
19123: EMPTY
19124: LIST
19125: LIST
19126: PUSH
19127: LD_INT 25
19129: PUSH
19130: LD_INT 8
19132: PUSH
19133: EMPTY
19134: LIST
19135: LIST
19136: PUSH
19137: LD_INT 25
19139: PUSH
19140: LD_INT 9
19142: PUSH
19143: EMPTY
19144: LIST
19145: LIST
19146: PUSH
19147: EMPTY
19148: LIST
19149: LIST
19150: LIST
19151: LIST
19152: LIST
19153: PUSH
19154: EMPTY
19155: LIST
19156: LIST
19157: PPUSH
19158: CALL_OW 69
19162: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19163: LD_ADDR_VAR 0 17
19167: PUSH
19168: LD_INT 22
19170: PUSH
19171: LD_VAR 0 1
19175: PUSH
19176: EMPTY
19177: LIST
19178: LIST
19179: PUSH
19180: LD_INT 25
19182: PUSH
19183: LD_INT 4
19185: PUSH
19186: EMPTY
19187: LIST
19188: LIST
19189: PUSH
19190: EMPTY
19191: LIST
19192: LIST
19193: PPUSH
19194: CALL_OW 69
19198: ST_TO_ADDR
// for i in medic_list do
19199: LD_ADDR_VAR 0 13
19203: PUSH
19204: LD_VAR 0 17
19208: PUSH
19209: FOR_IN
19210: IFFALSE 19228
// ComMoveToArea ( i , healArea ) ;
19212: LD_VAR 0 13
19216: PPUSH
19217: LD_VAR 0 10
19221: PPUSH
19222: CALL_OW 113
19226: GO 19209
19228: POP
19229: POP
// repeat wait ( 0 0$1 ) ;
19230: LD_INT 35
19232: PPUSH
19233: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19237: LD_ADDR_VAR 0 16
19241: PUSH
19242: LD_INT 22
19244: PUSH
19245: LD_VAR 0 1
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: PUSH
19254: LD_INT 1
19256: PUSH
19257: LD_INT 3
19259: PUSH
19260: LD_INT 24
19262: PUSH
19263: LD_INT 550
19265: PUSH
19266: EMPTY
19267: LIST
19268: LIST
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PUSH
19274: LD_INT 24
19276: PUSH
19277: LD_INT 250
19279: PUSH
19280: EMPTY
19281: LIST
19282: LIST
19283: PUSH
19284: EMPTY
19285: LIST
19286: LIST
19287: LIST
19288: PUSH
19289: EMPTY
19290: LIST
19291: LIST
19292: PPUSH
19293: CALL_OW 69
19297: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19298: LD_ADDR_VAR 0 18
19302: PUSH
19303: LD_INT 22
19305: PUSH
19306: LD_VAR 0 1
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PUSH
19315: LD_INT 2
19317: PUSH
19318: LD_INT 25
19320: PUSH
19321: LD_INT 1
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: PUSH
19328: LD_INT 25
19330: PUSH
19331: LD_INT 5
19333: PUSH
19334: EMPTY
19335: LIST
19336: LIST
19337: PUSH
19338: LD_INT 25
19340: PUSH
19341: LD_INT 8
19343: PUSH
19344: EMPTY
19345: LIST
19346: LIST
19347: PUSH
19348: LD_INT 25
19350: PUSH
19351: LD_INT 9
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: EMPTY
19359: LIST
19360: LIST
19361: LIST
19362: LIST
19363: LIST
19364: PUSH
19365: LD_INT 24
19367: PUSH
19368: LD_INT 1000
19370: PUSH
19371: EMPTY
19372: LIST
19373: LIST
19374: PUSH
19375: EMPTY
19376: LIST
19377: LIST
19378: LIST
19379: PPUSH
19380: CALL_OW 69
19384: ST_TO_ADDR
// if medicCount > 0 then
19385: LD_VAR 0 7
19389: PUSH
19390: LD_INT 0
19392: GREATER
19393: IFFALSE 19467
// begin if damageUnit_list > 0 then
19395: LD_VAR 0 16
19399: PUSH
19400: LD_INT 0
19402: GREATER
19403: IFFALSE 19467
// begin for i in damageUnit_list do
19405: LD_ADDR_VAR 0 13
19409: PUSH
19410: LD_VAR 0 16
19414: PUSH
19415: FOR_IN
19416: IFFALSE 19465
// begin ComMoveToArea ( i , healArea ) ;
19418: LD_VAR 0 13
19422: PPUSH
19423: LD_VAR 0 10
19427: PPUSH
19428: CALL_OW 113
// for j in medic_list do
19432: LD_ADDR_VAR 0 14
19436: PUSH
19437: LD_VAR 0 17
19441: PUSH
19442: FOR_IN
19443: IFFALSE 19461
// AddComHeal ( j , i ) ;
19445: LD_VAR 0 14
19449: PPUSH
19450: LD_VAR 0 13
19454: PPUSH
19455: CALL_OW 188
19459: GO 19442
19461: POP
19462: POP
// end ;
19463: GO 19415
19465: POP
19466: POP
// end ; end ; for i in soldiersOK_list do
19467: LD_ADDR_VAR 0 13
19471: PUSH
19472: LD_VAR 0 18
19476: PUSH
19477: FOR_IN
19478: IFFALSE 19654
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19480: LD_ADDR_VAR 0 21
19484: PUSH
19485: LD_INT 22
19487: PUSH
19488: LD_VAR 0 11
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PPUSH
19497: CALL_OW 69
19501: PPUSH
19502: LD_VAR 0 13
19506: PPUSH
19507: CALL_OW 74
19511: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19512: LD_ADDR_VAR 0 22
19516: PUSH
19517: LD_INT 22
19519: PUSH
19520: LD_VAR 0 11
19524: PUSH
19525: EMPTY
19526: LIST
19527: LIST
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: LD_INT 59
19534: PUSH
19535: EMPTY
19536: LIST
19537: PUSH
19538: LD_INT 21
19540: PUSH
19541: LD_INT 1
19543: PUSH
19544: EMPTY
19545: LIST
19546: LIST
19547: PUSH
19548: LD_INT 21
19550: PUSH
19551: LD_INT 2
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: EMPTY
19569: LIST
19570: PPUSH
19571: CALL_OW 69
19575: PPUSH
19576: LD_VAR 0 13
19580: PPUSH
19581: CALL_OW 74
19585: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19586: LD_VAR 0 13
19590: PPUSH
19591: LD_VAR 0 21
19595: PPUSH
19596: CALL_OW 296
19600: PUSH
19601: LD_INT 8
19603: PLUS
19604: PUSH
19605: LD_VAR 0 13
19609: PPUSH
19610: LD_VAR 0 22
19614: PPUSH
19615: CALL_OW 296
19619: LESS
19620: IFFALSE 19638
// begin ComAttackUnit ( i , target1 ) ;
19622: LD_VAR 0 13
19626: PPUSH
19627: LD_VAR 0 21
19631: PPUSH
19632: CALL_OW 115
// end else
19636: GO 19652
// begin ComAttackUnit ( i , target2 ) ;
19638: LD_VAR 0 13
19642: PPUSH
19643: LD_VAR 0 22
19647: PPUSH
19648: CALL_OW 115
// end ; end ;
19652: GO 19477
19654: POP
19655: POP
// for i in soldiersOK_list do
19656: LD_ADDR_VAR 0 13
19660: PUSH
19661: LD_VAR 0 18
19665: PUSH
19666: FOR_IN
19667: IFFALSE 19843
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19669: LD_ADDR_VAR 0 21
19673: PUSH
19674: LD_INT 22
19676: PUSH
19677: LD_VAR 0 11
19681: PUSH
19682: EMPTY
19683: LIST
19684: LIST
19685: PPUSH
19686: CALL_OW 69
19690: PPUSH
19691: LD_VAR 0 13
19695: PPUSH
19696: CALL_OW 74
19700: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19701: LD_ADDR_VAR 0 22
19705: PUSH
19706: LD_INT 22
19708: PUSH
19709: LD_VAR 0 11
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: PUSH
19721: LD_INT 59
19723: PUSH
19724: EMPTY
19725: LIST
19726: PUSH
19727: LD_INT 21
19729: PUSH
19730: LD_INT 1
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: PUSH
19737: LD_INT 21
19739: PUSH
19740: LD_INT 2
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: EMPTY
19758: LIST
19759: PPUSH
19760: CALL_OW 69
19764: PPUSH
19765: LD_VAR 0 13
19769: PPUSH
19770: CALL_OW 74
19774: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19775: LD_VAR 0 13
19779: PPUSH
19780: LD_VAR 0 21
19784: PPUSH
19785: CALL_OW 296
19789: PUSH
19790: LD_INT 8
19792: PLUS
19793: PUSH
19794: LD_VAR 0 13
19798: PPUSH
19799: LD_VAR 0 22
19803: PPUSH
19804: CALL_OW 296
19808: LESS
19809: IFFALSE 19827
// begin ComAttackUnit ( i , target1 ) ;
19811: LD_VAR 0 13
19815: PPUSH
19816: LD_VAR 0 21
19820: PPUSH
19821: CALL_OW 115
// end else
19825: GO 19841
// begin ComAttackUnit ( i , target2 ) ;
19827: LD_VAR 0 13
19831: PPUSH
19832: LD_VAR 0 22
19836: PPUSH
19837: CALL_OW 115
// end ; end ;
19841: GO 19666
19843: POP
19844: POP
// until soldiersOK_list = [ ] ;
19845: LD_VAR 0 18
19849: PUSH
19850: EMPTY
19851: EQUAL
19852: IFFALSE 19230
// end ;
19854: LD_VAR 0 12
19858: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
19859: LD_INT 0
19861: PPUSH
19862: PPUSH
19863: PPUSH
19864: PPUSH
19865: PPUSH
19866: PPUSH
19867: PPUSH
// repeat wait ( 0 0$1 ) ;
19868: LD_INT 35
19870: PPUSH
19871: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
19875: LD_ADDR_VAR 0 7
19879: PUSH
19880: LD_INT 22
19882: PUSH
19883: LD_INT 2
19885: PUSH
19886: EMPTY
19887: LIST
19888: LIST
19889: PUSH
19890: LD_INT 25
19892: PUSH
19893: LD_INT 4
19895: PUSH
19896: EMPTY
19897: LIST
19898: LIST
19899: PUSH
19900: LD_INT 3
19902: PUSH
19903: LD_INT 60
19905: PUSH
19906: EMPTY
19907: LIST
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: PUSH
19913: EMPTY
19914: LIST
19915: LIST
19916: LIST
19917: PPUSH
19918: CALL_OW 69
19922: ST_TO_ADDR
// if not tmp then
19923: LD_VAR 0 7
19927: NOT
19928: IFFALSE 19932
// continue ;
19930: GO 19868
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
19932: LD_ADDR_VAR 0 3
19936: PUSH
19937: LD_INT 5
19939: PPUSH
19940: LD_INT 22
19942: PUSH
19943: LD_INT 0
19945: PUSH
19946: EMPTY
19947: LIST
19948: LIST
19949: PUSH
19950: LD_INT 25
19952: PUSH
19953: LD_INT 12
19955: PUSH
19956: EMPTY
19957: LIST
19958: LIST
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PPUSH
19964: CALL_OW 70
19968: PUSH
19969: FOR_IN
19970: IFFALSE 20003
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
19972: LD_VAR 0 7
19976: PPUSH
19977: LD_VAR 0 3
19981: PPUSH
19982: CALL_OW 250
19986: PPUSH
19987: LD_VAR 0 3
19991: PPUSH
19992: CALL_OW 251
19996: PPUSH
19997: CALL_OW 131
20001: GO 19969
20003: POP
20004: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20005: LD_INT 22
20007: PUSH
20008: LD_INT 2
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 25
20017: PUSH
20018: LD_INT 4
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: EMPTY
20026: LIST
20027: LIST
20028: PPUSH
20029: CALL_OW 69
20033: PUSH
20034: LD_INT 0
20036: EQUAL
20037: PUSH
20038: LD_INT 5
20040: PPUSH
20041: LD_INT 22
20043: PUSH
20044: LD_INT 0
20046: PUSH
20047: EMPTY
20048: LIST
20049: LIST
20050: PUSH
20051: LD_INT 25
20053: PUSH
20054: LD_INT 12
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PPUSH
20065: CALL_OW 70
20069: PUSH
20070: LD_INT 2
20072: LESS
20073: OR
20074: PUSH
20075: LD_OWVAR 1
20079: PUSH
20080: LD_INT 7000
20082: GREATEREQUAL
20083: OR
20084: IFFALSE 19868
// repeat wait ( 0 0$1 ) ;
20086: LD_INT 35
20088: PPUSH
20089: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20093: LD_ADDR_VAR 0 5
20097: PUSH
20098: LD_INT 22
20100: PUSH
20101: LD_INT 2
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: PUSH
20108: LD_INT 30
20110: PUSH
20111: LD_INT 5
20113: PUSH
20114: EMPTY
20115: LIST
20116: LIST
20117: PUSH
20118: EMPTY
20119: LIST
20120: LIST
20121: PPUSH
20122: CALL_OW 69
20126: ST_TO_ADDR
// until arm ;
20127: LD_VAR 0 5
20131: IFFALSE 20086
// wait ( 0 0$25 ) ;
20133: LD_INT 875
20135: PPUSH
20136: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20140: LD_ADDR_VAR 0 6
20144: PUSH
20145: LD_INT 22
20147: PUSH
20148: LD_INT 2
20150: PUSH
20151: EMPTY
20152: LIST
20153: LIST
20154: PUSH
20155: LD_INT 2
20157: PUSH
20158: LD_INT 30
20160: PUSH
20161: LD_INT 0
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: LD_INT 30
20170: PUSH
20171: LD_INT 1
20173: PUSH
20174: EMPTY
20175: LIST
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: LIST
20182: PUSH
20183: EMPTY
20184: LIST
20185: LIST
20186: PPUSH
20187: CALL_OW 69
20191: ST_TO_ADDR
// j := 0 ;
20192: LD_ADDR_VAR 0 3
20196: PUSH
20197: LD_INT 0
20199: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20200: LD_ADDR_VAR 0 2
20204: PUSH
20205: LD_INT 22
20207: PUSH
20208: LD_INT 2
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: LD_INT 25
20217: PUSH
20218: LD_INT 12
20220: PUSH
20221: EMPTY
20222: LIST
20223: LIST
20224: PUSH
20225: EMPTY
20226: LIST
20227: LIST
20228: PPUSH
20229: CALL_OW 69
20233: PUSH
20234: FOR_IN
20235: IFFALSE 20322
// begin ComMoveXY ( i , 63 , 16 ) ;
20237: LD_VAR 0 2
20241: PPUSH
20242: LD_INT 63
20244: PPUSH
20245: LD_INT 16
20247: PPUSH
20248: CALL_OW 111
// j := j + 1 ;
20252: LD_ADDR_VAR 0 3
20256: PUSH
20257: LD_VAR 0 3
20261: PUSH
20262: LD_INT 1
20264: PLUS
20265: ST_TO_ADDR
// if j < 5 then
20266: LD_VAR 0 3
20270: PUSH
20271: LD_INT 5
20273: LESS
20274: IFFALSE 20292
// b := arm [ 1 ] else
20276: LD_ADDR_VAR 0 4
20280: PUSH
20281: LD_VAR 0 5
20285: PUSH
20286: LD_INT 1
20288: ARRAY
20289: ST_TO_ADDR
20290: GO 20306
// b := dep [ 1 ] ;
20292: LD_ADDR_VAR 0 4
20296: PUSH
20297: LD_VAR 0 6
20301: PUSH
20302: LD_INT 1
20304: ARRAY
20305: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20306: LD_VAR 0 2
20310: PPUSH
20311: LD_VAR 0 4
20315: PPUSH
20316: CALL_OW 180
// end ;
20320: GO 20234
20322: POP
20323: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20324: LD_ADDR_VAR 0 2
20328: PUSH
20329: LD_INT 22
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: EMPTY
20336: LIST
20337: LIST
20338: PUSH
20339: LD_INT 25
20341: PUSH
20342: LD_INT 4
20344: PUSH
20345: EMPTY
20346: LIST
20347: LIST
20348: PUSH
20349: EMPTY
20350: LIST
20351: LIST
20352: PPUSH
20353: CALL_OW 69
20357: PUSH
20358: FOR_IN
20359: IFFALSE 20405
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20361: LD_VAR 0 2
20365: PPUSH
20366: LD_INT 22
20368: PUSH
20369: LD_INT 2
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PUSH
20376: LD_INT 30
20378: PUSH
20379: LD_INT 8
20381: PUSH
20382: EMPTY
20383: LIST
20384: LIST
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PPUSH
20390: CALL_OW 69
20394: PUSH
20395: LD_INT 1
20397: ARRAY
20398: PPUSH
20399: CALL_OW 120
20403: GO 20358
20405: POP
20406: POP
// end ;
20407: LD_VAR 0 1
20411: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20412: LD_INT 0
20414: PPUSH
20415: PPUSH
20416: PPUSH
20417: PPUSH
20418: PPUSH
20419: PPUSH
20420: PPUSH
20421: PPUSH
20422: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20423: LD_INT 22
20425: PUSH
20426: LD_VAR 0 1
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: PUSH
20435: LD_INT 21
20437: PUSH
20438: LD_INT 2
20440: PUSH
20441: EMPTY
20442: LIST
20443: LIST
20444: PUSH
20445: EMPTY
20446: LIST
20447: LIST
20448: PPUSH
20449: CALL_OW 69
20453: PUSH
20454: LD_VAR 0 3
20458: LESSEQUAL
20459: IFFALSE 20603
// for i = 1 to vehCount do
20461: LD_ADDR_VAR 0 10
20465: PUSH
20466: DOUBLE
20467: LD_INT 1
20469: DEC
20470: ST_TO_ADDR
20471: LD_VAR 0 3
20475: PUSH
20476: FOR_TO
20477: IFFALSE 20601
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20479: LD_ADDR_VAR 0 12
20483: PUSH
20484: LD_VAR 0 5
20488: PUSH
20489: LD_INT 1
20491: PPUSH
20492: LD_VAR 0 5
20496: PPUSH
20497: CALL_OW 12
20501: ARRAY
20502: ST_TO_ADDR
// if randWeapon = 46 then
20503: LD_VAR 0 12
20507: PUSH
20508: LD_INT 46
20510: EQUAL
20511: IFFALSE 20556
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20513: LD_VAR 0 2
20517: PPUSH
20518: LD_INT 24
20520: PPUSH
20521: LD_VAR 0 6
20525: PPUSH
20526: LD_VAR 0 7
20530: PUSH
20531: LD_INT 1
20533: PPUSH
20534: LD_VAR 0 7
20538: PPUSH
20539: CALL_OW 12
20543: ARRAY
20544: PPUSH
20545: LD_VAR 0 12
20549: PPUSH
20550: CALL_OW 185
20554: GO 20599
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20556: LD_VAR 0 2
20560: PPUSH
20561: LD_VAR 0 8
20565: PPUSH
20566: LD_VAR 0 6
20570: PPUSH
20571: LD_VAR 0 7
20575: PUSH
20576: LD_INT 1
20578: PPUSH
20579: LD_VAR 0 7
20583: PPUSH
20584: CALL_OW 12
20588: ARRAY
20589: PPUSH
20590: LD_VAR 0 12
20594: PPUSH
20595: CALL_OW 185
// end ;
20599: GO 20476
20601: POP
20602: POP
// repeat wait ( 0 0$1 ) ;
20603: LD_INT 35
20605: PPUSH
20606: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20610: LD_INT 22
20612: PUSH
20613: LD_VAR 0 1
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: LD_INT 21
20624: PUSH
20625: LD_INT 2
20627: PUSH
20628: EMPTY
20629: LIST
20630: LIST
20631: PUSH
20632: LD_INT 24
20634: PUSH
20635: LD_INT 250
20637: PUSH
20638: EMPTY
20639: LIST
20640: LIST
20641: PUSH
20642: EMPTY
20643: LIST
20644: LIST
20645: LIST
20646: PPUSH
20647: CALL_OW 69
20651: PUSH
20652: LD_VAR 0 3
20656: GREATEREQUAL
20657: IFFALSE 20603
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20659: LD_INT 22
20661: PUSH
20662: LD_VAR 0 1
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: LD_INT 21
20673: PUSH
20674: LD_INT 2
20676: PUSH
20677: EMPTY
20678: LIST
20679: LIST
20680: PUSH
20681: LD_INT 24
20683: PUSH
20684: LD_INT 250
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PUSH
20691: EMPTY
20692: LIST
20693: LIST
20694: LIST
20695: PPUSH
20696: CALL_OW 69
20700: PUSH
20701: LD_VAR 0 3
20705: GREATEREQUAL
20706: IFFALSE 21049
// begin repeat begin wait ( 0 0$1 ) ;
20708: LD_INT 35
20710: PPUSH
20711: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20715: LD_INT 22
20717: PUSH
20718: LD_VAR 0 1
20722: PUSH
20723: EMPTY
20724: LIST
20725: LIST
20726: PUSH
20727: LD_INT 21
20729: PUSH
20730: LD_INT 2
20732: PUSH
20733: EMPTY
20734: LIST
20735: LIST
20736: PUSH
20737: LD_INT 24
20739: PUSH
20740: LD_INT 651
20742: PUSH
20743: EMPTY
20744: LIST
20745: LIST
20746: PUSH
20747: EMPTY
20748: LIST
20749: LIST
20750: LIST
20751: PPUSH
20752: CALL_OW 69
20756: PUSH
20757: LD_INT 0
20759: GREATER
20760: IFFALSE 20988
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
20762: LD_ADDR_VAR 0 10
20766: PUSH
20767: LD_INT 22
20769: PUSH
20770: LD_VAR 0 1
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: PUSH
20779: LD_INT 21
20781: PUSH
20782: LD_INT 2
20784: PUSH
20785: EMPTY
20786: LIST
20787: LIST
20788: PUSH
20789: LD_INT 24
20791: PUSH
20792: LD_INT 651
20794: PUSH
20795: EMPTY
20796: LIST
20797: LIST
20798: PUSH
20799: EMPTY
20800: LIST
20801: LIST
20802: LIST
20803: PPUSH
20804: CALL_OW 69
20808: PUSH
20809: FOR_IN
20810: IFFALSE 20986
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20812: LD_ADDR_VAR 0 16
20816: PUSH
20817: LD_INT 22
20819: PUSH
20820: LD_VAR 0 4
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PPUSH
20829: CALL_OW 69
20833: PPUSH
20834: LD_VAR 0 10
20838: PPUSH
20839: CALL_OW 74
20843: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20844: LD_ADDR_VAR 0 17
20848: PUSH
20849: LD_INT 22
20851: PUSH
20852: LD_VAR 0 4
20856: PUSH
20857: EMPTY
20858: LIST
20859: LIST
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 59
20866: PUSH
20867: EMPTY
20868: LIST
20869: PUSH
20870: LD_INT 21
20872: PUSH
20873: LD_INT 1
20875: PUSH
20876: EMPTY
20877: LIST
20878: LIST
20879: PUSH
20880: LD_INT 21
20882: PUSH
20883: LD_INT 2
20885: PUSH
20886: EMPTY
20887: LIST
20888: LIST
20889: PUSH
20890: EMPTY
20891: LIST
20892: LIST
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: PUSH
20900: EMPTY
20901: LIST
20902: PPUSH
20903: CALL_OW 69
20907: PPUSH
20908: LD_VAR 0 10
20912: PPUSH
20913: CALL_OW 74
20917: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20918: LD_VAR 0 10
20922: PPUSH
20923: LD_VAR 0 16
20927: PPUSH
20928: CALL_OW 296
20932: PUSH
20933: LD_INT 8
20935: PLUS
20936: PUSH
20937: LD_VAR 0 10
20941: PPUSH
20942: LD_VAR 0 17
20946: PPUSH
20947: CALL_OW 296
20951: LESS
20952: IFFALSE 20970
// begin ComAttackUnit ( i , target1 ) ;
20954: LD_VAR 0 10
20958: PPUSH
20959: LD_VAR 0 16
20963: PPUSH
20964: CALL_OW 115
// end else
20968: GO 20984
// begin ComAttackUnit ( i , target2 ) ;
20970: LD_VAR 0 10
20974: PPUSH
20975: LD_VAR 0 17
20979: PPUSH
20980: CALL_OW 115
// end ; end ;
20984: GO 20809
20986: POP
20987: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
20988: LD_INT 22
20990: PUSH
20991: LD_VAR 0 1
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: LD_INT 21
21002: PUSH
21003: LD_INT 2
21005: PUSH
21006: EMPTY
21007: LIST
21008: LIST
21009: PUSH
21010: EMPTY
21011: LIST
21012: LIST
21013: PPUSH
21014: CALL_OW 69
21018: PUSH
21019: LD_INT 0
21021: EQUAL
21022: PUSH
21023: LD_INT 22
21025: PUSH
21026: LD_VAR 0 4
21030: PUSH
21031: EMPTY
21032: LIST
21033: LIST
21034: PUSH
21035: EMPTY
21036: LIST
21037: PPUSH
21038: CALL_OW 69
21042: PUSH
21043: LD_INT 0
21045: EQUAL
21046: OR
21047: IFFALSE 20708
// end ; end ;
21049: LD_VAR 0 9
21053: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21054: LD_INT 0
21056: PPUSH
21057: PPUSH
21058: PPUSH
21059: PPUSH
// r := 100 ;
21060: LD_ADDR_VAR 0 5
21064: PUSH
21065: LD_INT 100
21067: ST_TO_ADDR
// x := 0 ;
21068: LD_ADDR_VAR 0 6
21072: PUSH
21073: LD_INT 0
21075: ST_TO_ADDR
// while ( x < n ) do
21076: LD_VAR 0 6
21080: PUSH
21081: LD_VAR 0 2
21085: LESS
21086: IFFALSE 21373
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21088: LD_ADDR_VAR 0 4
21092: PUSH
21093: DOUBLE
21094: LD_INT 1
21096: DEC
21097: ST_TO_ADDR
21098: LD_VAR 0 1
21102: PPUSH
21103: LD_INT 0
21105: PPUSH
21106: CALL_OW 517
21110: PUSH
21111: LD_INT 1
21113: ARRAY
21114: PUSH
21115: FOR_TO
21116: IFFALSE 21369
// begin if r > 50 then
21118: LD_VAR 0 5
21122: PUSH
21123: LD_INT 50
21125: GREATER
21126: IFFALSE 21345
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21128: LD_VAR 0 1
21132: PPUSH
21133: LD_INT 0
21135: PPUSH
21136: CALL_OW 517
21140: PUSH
21141: LD_INT 1
21143: ARRAY
21144: PUSH
21145: LD_VAR 0 4
21149: ARRAY
21150: PPUSH
21151: LD_VAR 0 1
21155: PPUSH
21156: LD_INT 0
21158: PPUSH
21159: CALL_OW 517
21163: PUSH
21164: LD_INT 2
21166: ARRAY
21167: PUSH
21168: LD_VAR 0 4
21172: ARRAY
21173: PPUSH
21174: CALL_OW 458
21178: NOT
21179: IFFALSE 21329
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21181: LD_VAR 0 1
21185: PPUSH
21186: LD_INT 0
21188: PPUSH
21189: CALL_OW 517
21193: PUSH
21194: LD_INT 1
21196: ARRAY
21197: PUSH
21198: LD_VAR 0 4
21202: ARRAY
21203: PPUSH
21204: LD_VAR 0 1
21208: PPUSH
21209: LD_INT 0
21211: PPUSH
21212: CALL_OW 517
21216: PUSH
21217: LD_INT 2
21219: ARRAY
21220: PUSH
21221: LD_VAR 0 4
21225: ARRAY
21226: PPUSH
21227: LD_INT 5
21229: PPUSH
21230: LD_INT 0
21232: PPUSH
21233: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21237: LD_ADDR_EXP 50
21241: PUSH
21242: LD_EXP 50
21246: PPUSH
21247: LD_INT 1
21249: PPUSH
21250: LD_VAR 0 1
21254: PPUSH
21255: LD_INT 0
21257: PPUSH
21258: CALL_OW 517
21262: PUSH
21263: LD_INT 1
21265: ARRAY
21266: PUSH
21267: LD_VAR 0 4
21271: ARRAY
21272: PUSH
21273: LD_VAR 0 1
21277: PPUSH
21278: LD_INT 0
21280: PPUSH
21281: CALL_OW 517
21285: PUSH
21286: LD_INT 2
21288: ARRAY
21289: PUSH
21290: LD_VAR 0 4
21294: ARRAY
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PPUSH
21300: CALL_OW 2
21304: ST_TO_ADDR
// r := 0 ;
21305: LD_ADDR_VAR 0 5
21309: PUSH
21310: LD_INT 0
21312: ST_TO_ADDR
// x := x + 1 ;
21313: LD_ADDR_VAR 0 6
21317: PUSH
21318: LD_VAR 0 6
21322: PUSH
21323: LD_INT 1
21325: PLUS
21326: ST_TO_ADDR
// end else
21327: GO 21343
// r := r + 35 ;
21329: LD_ADDR_VAR 0 5
21333: PUSH
21334: LD_VAR 0 5
21338: PUSH
21339: LD_INT 35
21341: PLUS
21342: ST_TO_ADDR
// end else
21343: GO 21367
// r := r + rand ( 10 , 25 ) ;
21345: LD_ADDR_VAR 0 5
21349: PUSH
21350: LD_VAR 0 5
21354: PUSH
21355: LD_INT 10
21357: PPUSH
21358: LD_INT 25
21360: PPUSH
21361: CALL_OW 12
21365: PLUS
21366: ST_TO_ADDR
// end ;
21367: GO 21115
21369: POP
21370: POP
21371: GO 21076
// end ; end_of_file
21373: LD_VAR 0 3
21377: RET
// every 0 0$1 trigger russianAI = 1 do
21378: LD_EXP 39
21382: PUSH
21383: LD_INT 1
21385: EQUAL
21386: IFFALSE 21605
21388: GO 21390
21390: DISABLE
// begin enable ;
21391: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21392: LD_INT 3
21394: PPUSH
21395: LD_EXP 30
21399: PPUSH
21400: CALL 15856 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21404: LD_INT 3
21406: PPUSH
21407: LD_EXP 42
21411: PPUSH
21412: CALL 16216 0 2
// if ruPossition = 1 then
21416: LD_EXP 41
21420: PUSH
21421: LD_INT 1
21423: EQUAL
21424: IFFALSE 21479
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21426: LD_INT 3
21428: PPUSH
21429: LD_INT 13
21431: PPUSH
21432: LD_INT 10
21434: PPUSH
21435: LD_INT 22
21437: PUSH
21438: LD_INT 3
21440: PUSH
21441: EMPTY
21442: LIST
21443: LIST
21444: PUSH
21445: LD_INT 21
21447: PUSH
21448: LD_INT 3
21450: PUSH
21451: EMPTY
21452: LIST
21453: LIST
21454: PUSH
21455: LD_INT 30
21457: PUSH
21458: LD_INT 8
21460: PUSH
21461: EMPTY
21462: LIST
21463: LIST
21464: PUSH
21465: EMPTY
21466: LIST
21467: LIST
21468: LIST
21469: PPUSH
21470: CALL_OW 69
21474: PPUSH
21475: CALL 16422 0 4
// if ruPossition = 2 then
21479: LD_EXP 41
21483: PUSH
21484: LD_INT 2
21486: EQUAL
21487: IFFALSE 21542
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21489: LD_INT 3
21491: PPUSH
21492: LD_INT 14
21494: PPUSH
21495: LD_INT 11
21497: PPUSH
21498: LD_INT 22
21500: PUSH
21501: LD_INT 3
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: PUSH
21508: LD_INT 21
21510: PUSH
21511: LD_INT 3
21513: PUSH
21514: EMPTY
21515: LIST
21516: LIST
21517: PUSH
21518: LD_INT 30
21520: PUSH
21521: LD_INT 8
21523: PUSH
21524: EMPTY
21525: LIST
21526: LIST
21527: PUSH
21528: EMPTY
21529: LIST
21530: LIST
21531: LIST
21532: PPUSH
21533: CALL_OW 69
21537: PPUSH
21538: CALL 16422 0 4
// if ruPossition = 3 then
21542: LD_EXP 41
21546: PUSH
21547: LD_INT 3
21549: EQUAL
21550: IFFALSE 21605
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21552: LD_INT 3
21554: PPUSH
21555: LD_INT 15
21557: PPUSH
21558: LD_INT 12
21560: PPUSH
21561: LD_INT 22
21563: PUSH
21564: LD_INT 3
21566: PUSH
21567: EMPTY
21568: LIST
21569: LIST
21570: PUSH
21571: LD_INT 21
21573: PUSH
21574: LD_INT 3
21576: PUSH
21577: EMPTY
21578: LIST
21579: LIST
21580: PUSH
21581: LD_INT 30
21583: PUSH
21584: LD_INT 8
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: PUSH
21591: EMPTY
21592: LIST
21593: LIST
21594: LIST
21595: PPUSH
21596: CALL_OW 69
21600: PPUSH
21601: CALL 16422 0 4
// end ;
21605: END
// every 0 0$1 do
21606: GO 21608
21608: DISABLE
// begin enable ;
21609: ENABLE
// if ruPossition = 1 then
21610: LD_EXP 41
21614: PUSH
21615: LD_INT 1
21617: EQUAL
21618: IFFALSE 21630
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21620: LD_INT 3
21622: PPUSH
21623: LD_INT 10
21625: PPUSH
21626: CALL 15493 0 2
// if ruPossition = 2 then
21630: LD_EXP 41
21634: PUSH
21635: LD_INT 2
21637: EQUAL
21638: IFFALSE 21650
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21640: LD_INT 3
21642: PPUSH
21643: LD_INT 11
21645: PPUSH
21646: CALL 15493 0 2
// if ruPossition = 3 then
21650: LD_EXP 41
21654: PUSH
21655: LD_INT 3
21657: EQUAL
21658: IFFALSE 21670
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21660: LD_INT 3
21662: PPUSH
21663: LD_INT 12
21665: PPUSH
21666: CALL 15493 0 2
// IntBazooka ( 3 , 1 ) ;
21670: LD_INT 3
21672: PPUSH
21673: LD_INT 1
21675: PPUSH
21676: CALL 14292 0 2
// IntBazooka ( 6 , 1 ) ;
21680: LD_INT 6
21682: PPUSH
21683: LD_INT 1
21685: PPUSH
21686: CALL 14292 0 2
// end ;
21690: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21691: LD_EXP 39
21695: PUSH
21696: LD_INT 1
21698: EQUAL
21699: PUSH
21700: LD_EXP 35
21704: PPUSH
21705: CALL_OW 302
21709: AND
21710: PUSH
21711: LD_EXP 35
21715: PPUSH
21716: CALL_OW 255
21720: PUSH
21721: LD_INT 3
21723: EQUAL
21724: AND
21725: PUSH
21726: LD_INT 22
21728: PUSH
21729: LD_INT 3
21731: PUSH
21732: EMPTY
21733: LIST
21734: LIST
21735: PUSH
21736: LD_INT 21
21738: PUSH
21739: LD_INT 2
21741: PUSH
21742: EMPTY
21743: LIST
21744: LIST
21745: PUSH
21746: LD_INT 33
21748: PUSH
21749: LD_INT 3
21751: PUSH
21752: EMPTY
21753: LIST
21754: LIST
21755: PUSH
21756: EMPTY
21757: LIST
21758: LIST
21759: LIST
21760: PPUSH
21761: CALL_OW 69
21765: PUSH
21766: LD_INT 0
21768: EQUAL
21769: AND
21770: IFFALSE 21978
21772: GO 21774
21774: DISABLE
// begin enable ;
21775: ENABLE
// if Difficulty = 1 then
21776: LD_OWVAR 67
21780: PUSH
21781: LD_INT 1
21783: EQUAL
21784: IFFALSE 21846
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21786: LD_INT 3
21788: PPUSH
21789: LD_EXP 35
21793: PPUSH
21794: LD_INT 5
21796: PPUSH
21797: LD_INT 8
21799: PPUSH
21800: CALL_OW 12
21804: PPUSH
21805: LD_INT 1
21807: PPUSH
21808: LD_INT 43
21810: PUSH
21811: LD_INT 44
21813: PUSH
21814: LD_INT 45
21816: PUSH
21817: LD_INT 46
21819: PUSH
21820: EMPTY
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: PPUSH
21826: LD_INT 1
21828: PPUSH
21829: LD_INT 3
21831: PUSH
21832: LD_INT 3
21834: PUSH
21835: EMPTY
21836: LIST
21837: LIST
21838: PPUSH
21839: LD_INT 22
21841: PPUSH
21842: CALL 20412 0 8
// if Difficulty = 2 then
21846: LD_OWVAR 67
21850: PUSH
21851: LD_INT 2
21853: EQUAL
21854: IFFALSE 21912
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21856: LD_INT 3
21858: PPUSH
21859: LD_EXP 35
21863: PPUSH
21864: LD_INT 6
21866: PPUSH
21867: LD_INT 8
21869: PPUSH
21870: CALL_OW 12
21874: PPUSH
21875: LD_INT 1
21877: PPUSH
21878: LD_INT 44
21880: PUSH
21881: LD_INT 45
21883: PUSH
21884: LD_INT 46
21886: PUSH
21887: EMPTY
21888: LIST
21889: LIST
21890: LIST
21891: PPUSH
21892: LD_INT 1
21894: PPUSH
21895: LD_INT 3
21897: PUSH
21898: LD_INT 3
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PPUSH
21905: LD_INT 22
21907: PPUSH
21908: CALL 20412 0 8
// if Difficulty = 3 then
21912: LD_OWVAR 67
21916: PUSH
21917: LD_INT 3
21919: EQUAL
21920: IFFALSE 21978
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
21922: LD_INT 3
21924: PPUSH
21925: LD_EXP 35
21929: PPUSH
21930: LD_INT 7
21932: PPUSH
21933: LD_INT 8
21935: PPUSH
21936: CALL_OW 12
21940: PPUSH
21941: LD_INT 1
21943: PPUSH
21944: LD_INT 44
21946: PUSH
21947: LD_INT 45
21949: PUSH
21950: LD_INT 46
21952: PUSH
21953: EMPTY
21954: LIST
21955: LIST
21956: LIST
21957: PPUSH
21958: LD_INT 1
21960: PPUSH
21961: LD_INT 3
21963: PUSH
21964: LD_INT 3
21966: PUSH
21967: EMPTY
21968: LIST
21969: LIST
21970: PPUSH
21971: LD_INT 22
21973: PPUSH
21974: CALL 20412 0 8
// end ;
21978: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
21979: LD_EXP 50
21983: PUSH
21984: LD_EXP 49
21988: AND
21989: IFFALSE 22110
21991: GO 21993
21993: DISABLE
21994: LD_INT 0
21996: PPUSH
// begin enable ;
21997: ENABLE
// for i in arabianMines do
21998: LD_ADDR_VAR 0 1
22002: PUSH
22003: LD_EXP 50
22007: PUSH
22008: FOR_IN
22009: IFFALSE 22108
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22011: LD_INT 22
22013: PUSH
22014: LD_INT 1
22016: PUSH
22017: EMPTY
22018: LIST
22019: LIST
22020: PUSH
22021: LD_INT 92
22023: PUSH
22024: LD_VAR 0 1
22028: PUSH
22029: LD_INT 1
22031: ARRAY
22032: PUSH
22033: LD_VAR 0 1
22037: PUSH
22038: LD_INT 2
22040: ARRAY
22041: PUSH
22042: LD_INT 3
22044: PUSH
22045: EMPTY
22046: LIST
22047: LIST
22048: LIST
22049: LIST
22050: PUSH
22051: EMPTY
22052: LIST
22053: LIST
22054: PPUSH
22055: CALL_OW 69
22059: IFFALSE 22106
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22061: LD_VAR 0 1
22065: PUSH
22066: LD_INT 1
22068: ARRAY
22069: PPUSH
22070: LD_VAR 0 1
22074: PUSH
22075: LD_INT 2
22077: ARRAY
22078: PPUSH
22079: LD_INT 5
22081: PPUSH
22082: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22086: LD_ADDR_EXP 50
22090: PUSH
22091: LD_EXP 50
22095: PPUSH
22096: LD_VAR 0 1
22100: PPUSH
22101: CALL_OW 3
22105: ST_TO_ADDR
// end ; end ;
22106: GO 22008
22108: POP
22109: POP
// end ; end_of_file
22110: PPOPN 1
22112: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22113: LD_VAR 0 1
22117: PPUSH
22118: CALL_OW 255
22122: PUSH
22123: LD_INT 4
22125: EQUAL
22126: IFFALSE 22140
// SetBName ( building , epsilon ) ;
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_STRING epsilon
22135: PPUSH
22136: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22140: LD_VAR 0 1
22144: PPUSH
22145: CALL_OW 255
22149: PUSH
22150: LD_INT 1
22152: EQUAL
22153: PUSH
22154: LD_VAR 0 1
22158: PPUSH
22159: CALL_OW 266
22163: PUSH
22164: LD_INT 0
22166: EQUAL
22167: AND
22168: IFFALSE 22182
// SetBName ( building , epsilon ) ;
22170: LD_VAR 0 1
22174: PPUSH
22175: LD_STRING epsilon
22177: PPUSH
22178: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22182: LD_VAR 0 1
22186: PPUSH
22187: CALL_OW 255
22191: PUSH
22192: LD_INT 3
22194: EQUAL
22195: PUSH
22196: LD_VAR 0 1
22200: PPUSH
22201: CALL_OW 266
22205: PUSH
22206: LD_INT 0
22208: EQUAL
22209: AND
22210: IFFALSE 22224
// SetBName ( building , chuikov ) ;
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_STRING chuikov
22219: PPUSH
22220: CALL_OW 500
// if GetSide ( building ) = 2 then
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL_OW 255
22233: PUSH
22234: LD_INT 2
22236: EQUAL
22237: IFFALSE 22293
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22239: LD_VAR 0 1
22243: PPUSH
22244: CALL_OW 266
22248: PUSH
22249: LD_INT 6
22251: EQUAL
22252: PUSH
22253: LD_VAR 0 1
22257: PPUSH
22258: CALL_OW 266
22262: PUSH
22263: LD_INT 9
22265: EQUAL
22266: OR
22267: IFFALSE 22293
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22269: LD_VAR 0 1
22273: PPUSH
22274: LD_INT 10
22276: PPUSH
22277: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22281: LD_VAR 0 1
22285: PPUSH
22286: LD_INT 11
22288: PPUSH
22289: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22293: LD_VAR 0 1
22297: PPUSH
22298: CALL_OW 255
22302: PUSH
22303: LD_INT 3
22305: EQUAL
22306: IFFALSE 22332
// begin if GetBType ( building ) = 2 then
22308: LD_VAR 0 1
22312: PPUSH
22313: CALL_OW 266
22317: PUSH
22318: LD_INT 2
22320: EQUAL
22321: IFFALSE 22332
// AddComUpgrade ( building ) ;
22323: LD_VAR 0 1
22327: PPUSH
22328: CALL_OW 206
// end ; end ;
22332: PPOPN 2
22334: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22335: LD_INT 0
22337: PPUSH
22338: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22339: LD_VAR 0 1
22343: PUSH
22344: LD_INT 22
22346: PUSH
22347: LD_INT 3
22349: PUSH
22350: EMPTY
22351: LIST
22352: LIST
22353: PUSH
22354: LD_INT 23
22356: PUSH
22357: LD_INT 3
22359: PUSH
22360: EMPTY
22361: LIST
22362: LIST
22363: PUSH
22364: LD_INT 21
22366: PUSH
22367: LD_INT 2
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: PUSH
22374: EMPTY
22375: LIST
22376: LIST
22377: LIST
22378: PPUSH
22379: CALL_OW 69
22383: IN
22384: PUSH
22385: LD_EXP 59
22389: NOT
22390: AND
22391: IFFALSE 22422
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22393: LD_ADDR_EXP 59
22397: PUSH
22398: LD_VAR 0 1
22402: PPUSH
22403: CALL_OW 250
22407: PUSH
22408: LD_VAR 0 1
22412: PPUSH
22413: CALL_OW 251
22417: PUSH
22418: EMPTY
22419: LIST
22420: LIST
22421: ST_TO_ADDR
// end ;
22422: PPOPN 3
22424: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22425: LD_VAR 0 2
22429: PPUSH
22430: CALL_OW 255
22434: PUSH
22435: LD_INT 3
22437: EQUAL
22438: PUSH
22439: LD_EXP 35
22443: PPUSH
22444: CALL_OW 255
22448: PUSH
22449: LD_INT 3
22451: EQUAL
22452: AND
22453: PUSH
22454: LD_EXP 35
22458: PPUSH
22459: CALL_OW 302
22463: AND
22464: IFFALSE 22480
// ComEnterUnit ( human , ruFab ) ;
22466: LD_VAR 0 2
22470: PPUSH
22471: LD_EXP 35
22475: PPUSH
22476: CALL_OW 120
// end ;
22480: PPOPN 2
22482: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22483: LD_INT 0
22485: PPUSH
22486: PPUSH
22487: PPUSH
22488: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22489: LD_VAR 0 1
22493: PPUSH
22494: CALL_OW 255
22498: PUSH
22499: LD_INT 1
22501: EQUAL
22502: PUSH
22503: LD_EXP 63
22507: PUSH
22508: LD_INT 0
22510: EQUAL
22511: AND
22512: IFFALSE 22714
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22514: LD_VAR 0 1
22518: PPUSH
22519: CALL_OW 266
22523: PUSH
22524: LD_INT 26
22526: EQUAL
22527: PUSH
22528: LD_VAR 0 1
22532: PPUSH
22533: CALL_OW 266
22537: PUSH
22538: LD_INT 27
22540: EQUAL
22541: OR
22542: PUSH
22543: LD_VAR 0 1
22547: PPUSH
22548: CALL_OW 266
22552: PUSH
22553: LD_INT 28
22555: EQUAL
22556: OR
22557: IFFALSE 22714
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22559: LD_INT 22
22561: PUSH
22562: LD_INT 1
22564: PUSH
22565: EMPTY
22566: LIST
22567: LIST
22568: PUSH
22569: LD_INT 2
22571: PUSH
22572: LD_INT 30
22574: PUSH
22575: LD_INT 7
22577: PUSH
22578: EMPTY
22579: LIST
22580: LIST
22581: PUSH
22582: LD_INT 30
22584: PUSH
22585: LD_INT 8
22587: PUSH
22588: EMPTY
22589: LIST
22590: LIST
22591: PUSH
22592: EMPTY
22593: LIST
22594: LIST
22595: LIST
22596: PUSH
22597: EMPTY
22598: LIST
22599: LIST
22600: PPUSH
22601: CALL_OW 69
22605: PUSH
22606: LD_INT 0
22608: GREATER
22609: IFFALSE 22714
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22611: LD_ADDR_VAR 0 2
22615: PUSH
22616: LD_INT 22
22618: PUSH
22619: LD_INT 1
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 2
22628: PUSH
22629: LD_INT 30
22631: PUSH
22632: LD_INT 7
22634: PUSH
22635: EMPTY
22636: LIST
22637: LIST
22638: PUSH
22639: LD_INT 30
22641: PUSH
22642: LD_INT 8
22644: PUSH
22645: EMPTY
22646: LIST
22647: LIST
22648: PUSH
22649: EMPTY
22650: LIST
22651: LIST
22652: LIST
22653: PUSH
22654: EMPTY
22655: LIST
22656: LIST
22657: PPUSH
22658: CALL_OW 69
22662: PUSH
22663: FOR_IN
22664: IFFALSE 22712
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22666: LD_VAR 0 2
22670: PPUSH
22671: LD_INT 1
22673: PPUSH
22674: CALL_OW 268
22678: PUSH
22679: LD_INT 11
22681: EQUAL
22682: PUSH
22683: LD_VAR 0 2
22687: PPUSH
22688: LD_INT 2
22690: PPUSH
22691: CALL_OW 268
22695: PUSH
22696: LD_INT 11
22698: EQUAL
22699: OR
22700: IFFALSE 22710
// eventVar1 = 1 ;
22702: LD_ADDR_EXP 63
22706: PUSH
22707: LD_INT 1
22709: ST_TO_ADDR
22710: GO 22663
22712: POP
22713: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22714: LD_VAR 0 1
22718: PPUSH
22719: CALL_OW 255
22723: PUSH
22724: LD_INT 3
22726: EQUAL
22727: IFFALSE 23207
// begin if GetBType ( building ) = b_depot then
22729: LD_VAR 0 1
22733: PPUSH
22734: CALL_OW 266
22738: PUSH
22739: LD_INT 0
22741: EQUAL
22742: IFFALSE 22814
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
22744: LD_VAR 0 1
22748: PPUSH
22749: CALL_OW 274
22753: PPUSH
22754: LD_INT 1
22756: PPUSH
22757: LD_INT 5000
22759: PPUSH
22760: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
22764: LD_VAR 0 1
22768: PPUSH
22769: CALL_OW 274
22773: PPUSH
22774: LD_INT 2
22776: PPUSH
22777: LD_INT 300
22779: PPUSH
22780: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
22784: LD_VAR 0 1
22788: PPUSH
22789: CALL_OW 274
22793: PPUSH
22794: LD_INT 3
22796: PPUSH
22797: LD_INT 100
22799: PPUSH
22800: CALL_OW 277
// ruDepot = building ;
22804: LD_ADDR_EXP 30
22808: PUSH
22809: LD_VAR 0 1
22813: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22814: LD_VAR 0 1
22818: PPUSH
22819: CALL_OW 266
22823: PUSH
22824: LD_INT 0
22826: EQUAL
22827: PUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 266
22837: PUSH
22838: LD_INT 2
22840: EQUAL
22841: OR
22842: PUSH
22843: LD_VAR 0 1
22847: PPUSH
22848: CALL_OW 266
22852: PUSH
22853: LD_INT 4
22855: EQUAL
22856: OR
22857: IFFALSE 22868
// ComUpgrade ( building ) ;
22859: LD_VAR 0 1
22863: PPUSH
22864: CALL_OW 146
// if GetBType ( building ) = b_lab then
22868: LD_VAR 0 1
22872: PPUSH
22873: CALL_OW 266
22877: PUSH
22878: LD_INT 6
22880: EQUAL
22881: IFFALSE 23084
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
22883: LD_INT 22
22885: PUSH
22886: LD_INT 3
22888: PUSH
22889: EMPTY
22890: LIST
22891: LIST
22892: PUSH
22893: LD_INT 30
22895: PUSH
22896: LD_INT 8
22898: PUSH
22899: EMPTY
22900: LIST
22901: LIST
22902: PUSH
22903: EMPTY
22904: LIST
22905: LIST
22906: PPUSH
22907: CALL_OW 69
22911: PUSH
22912: LD_INT 0
22914: EQUAL
22915: IFFALSE 22953
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22917: LD_VAR 0 1
22921: PPUSH
22922: LD_INT 10
22924: PPUSH
22925: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
22929: LD_VAR 0 1
22933: PPUSH
22934: LD_INT 12
22936: PPUSH
22937: CALL_OW 207
// ruLab1 = building ;
22941: LD_ADDR_EXP 31
22945: PUSH
22946: LD_VAR 0 1
22950: ST_TO_ADDR
// end else
22951: GO 22987
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
22953: LD_VAR 0 1
22957: PPUSH
22958: LD_INT 11
22960: PPUSH
22961: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
22965: LD_VAR 0 1
22969: PPUSH
22970: LD_INT 14
22972: PPUSH
22973: CALL_OW 207
// ruLab2 = building ;
22977: LD_ADDR_EXP 32
22981: PUSH
22982: LD_VAR 0 1
22986: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
22987: LD_INT 3
22989: PPUSH
22990: LD_VAR 0 1
22994: PPUSH
22995: LD_INT 3
22997: PPUSH
22998: CALL 15408 0 3
// if ruDestroyedBuildings > 0 then
23002: LD_EXP 42
23006: PUSH
23007: LD_INT 0
23009: GREATER
23010: IFFALSE 23084
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23012: LD_ADDR_EXP 42
23016: PUSH
23017: LD_EXP 42
23021: PPUSH
23022: LD_INT 1
23024: PPUSH
23025: CALL_OW 3
23029: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23030: LD_ADDR_EXP 42
23034: PUSH
23035: LD_EXP 42
23039: PPUSH
23040: LD_INT 1
23042: PPUSH
23043: CALL_OW 3
23047: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23048: LD_ADDR_EXP 42
23052: PUSH
23053: LD_EXP 42
23057: PPUSH
23058: LD_INT 1
23060: PPUSH
23061: CALL_OW 3
23065: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23066: LD_ADDR_EXP 42
23070: PUSH
23071: LD_EXP 42
23075: PPUSH
23076: LD_INT 1
23078: PPUSH
23079: CALL_OW 3
23083: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23084: LD_VAR 0 1
23088: PPUSH
23089: CALL_OW 266
23093: PUSH
23094: LD_INT 32
23096: EQUAL
23097: IFFALSE 23134
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23099: LD_VAR 0 1
23103: PPUSH
23104: LD_INT 44
23106: PUSH
23107: LD_INT 45
23109: PUSH
23110: LD_INT 46
23112: PUSH
23113: EMPTY
23114: LIST
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 1
23120: PPUSH
23121: LD_INT 3
23123: PPUSH
23124: CALL_OW 12
23128: ARRAY
23129: PPUSH
23130: CALL_OW 208
// if GetBType ( building ) = b_turret then
23134: LD_VAR 0 1
23138: PPUSH
23139: CALL_OW 266
23143: PUSH
23144: LD_INT 33
23146: EQUAL
23147: IFFALSE 23184
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23149: LD_VAR 0 1
23153: PPUSH
23154: LD_INT 44
23156: PUSH
23157: LD_INT 45
23159: PUSH
23160: LD_INT 46
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: LIST
23167: PUSH
23168: LD_INT 1
23170: PPUSH
23171: LD_INT 3
23173: PPUSH
23174: CALL_OW 12
23178: ARRAY
23179: PPUSH
23180: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23184: LD_VAR 0 1
23188: PPUSH
23189: CALL_OW 266
23193: PUSH
23194: LD_INT 24
23196: EQUAL
23197: IFFALSE 23207
// russianAI = 1 ;
23199: LD_ADDR_EXP 39
23203: PUSH
23204: LD_INT 1
23206: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23207: LD_VAR 0 1
23211: PPUSH
23212: CALL_OW 255
23216: PUSH
23217: LD_INT 2
23219: EQUAL
23220: IFFALSE 24099
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23222: LD_VAR 0 1
23226: PPUSH
23227: CALL_OW 266
23231: PUSH
23232: LD_EXP 66
23236: PUSH
23237: LD_INT 1
23239: ARRAY
23240: PUSH
23241: LD_INT 1
23243: ARRAY
23244: EQUAL
23245: IFFALSE 23372
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23247: LD_ADDR_EXP 66
23251: PUSH
23252: LD_EXP 66
23256: PPUSH
23257: LD_INT 1
23259: PPUSH
23260: CALL_OW 3
23264: ST_TO_ADDR
// if arBuildingsTab then
23265: LD_EXP 66
23269: IFFALSE 23372
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23271: LD_ADDR_VAR 0 3
23275: PUSH
23276: LD_INT 22
23278: PUSH
23279: LD_INT 2
23281: PUSH
23282: EMPTY
23283: LIST
23284: LIST
23285: PUSH
23286: LD_INT 25
23288: PUSH
23289: LD_INT 2
23291: PUSH
23292: EMPTY
23293: LIST
23294: LIST
23295: PUSH
23296: EMPTY
23297: LIST
23298: LIST
23299: PPUSH
23300: CALL_OW 69
23304: ST_TO_ADDR
// if engineers then
23305: LD_VAR 0 3
23309: IFFALSE 23372
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23311: LD_VAR 0 3
23315: PPUSH
23316: LD_EXP 66
23320: PUSH
23321: LD_INT 1
23323: ARRAY
23324: PUSH
23325: LD_INT 1
23327: ARRAY
23328: PPUSH
23329: LD_EXP 66
23333: PUSH
23334: LD_INT 1
23336: ARRAY
23337: PUSH
23338: LD_INT 2
23340: ARRAY
23341: PPUSH
23342: LD_EXP 66
23346: PUSH
23347: LD_INT 1
23349: ARRAY
23350: PUSH
23351: LD_INT 3
23353: ARRAY
23354: PPUSH
23355: LD_EXP 66
23359: PUSH
23360: LD_INT 1
23362: ARRAY
23363: PUSH
23364: LD_INT 4
23366: ARRAY
23367: PPUSH
23368: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23372: LD_VAR 0 1
23376: PPUSH
23377: CALL_OW 266
23381: PUSH
23382: LD_INT 31
23384: EQUAL
23385: IFFALSE 23531
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23387: LD_ADDR_VAR 0 4
23391: PUSH
23392: LD_INT 22
23394: PUSH
23395: LD_INT 2
23397: PUSH
23398: EMPTY
23399: LIST
23400: LIST
23401: PUSH
23402: LD_INT 2
23404: PUSH
23405: LD_INT 25
23407: PUSH
23408: LD_INT 1
23410: PUSH
23411: EMPTY
23412: LIST
23413: LIST
23414: PUSH
23415: LD_INT 25
23417: PUSH
23418: LD_INT 8
23420: PUSH
23421: EMPTY
23422: LIST
23423: LIST
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: PUSH
23430: EMPTY
23431: LIST
23432: LIST
23433: PPUSH
23434: CALL_OW 69
23438: PUSH
23439: LD_EXP 26
23443: DIFF
23444: ST_TO_ADDR
// if not sol then
23445: LD_VAR 0 4
23449: NOT
23450: IFFALSE 23454
// exit ;
23452: GO 24099
// for i in sol do
23454: LD_ADDR_VAR 0 2
23458: PUSH
23459: LD_VAR 0 4
23463: PUSH
23464: FOR_IN
23465: IFFALSE 23529
// if not GetTag ( i ) then
23467: LD_VAR 0 2
23471: PPUSH
23472: CALL_OW 110
23476: NOT
23477: IFFALSE 23527
// begin if IsInUnit ( i ) then
23479: LD_VAR 0 2
23483: PPUSH
23484: CALL_OW 310
23488: IFFALSE 23499
// ComExitBuilding ( i ) ;
23490: LD_VAR 0 2
23494: PPUSH
23495: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23499: LD_VAR 0 2
23503: PPUSH
23504: LD_VAR 0 1
23508: PPUSH
23509: CALL_OW 180
// SetTag ( i , 11 ) ;
23513: LD_VAR 0 2
23517: PPUSH
23518: LD_INT 11
23520: PPUSH
23521: CALL_OW 109
// break ;
23525: GO 23529
// end ;
23527: GO 23464
23529: POP
23530: POP
// end ; if GetBType ( building ) = b_depot then
23531: LD_VAR 0 1
23535: PPUSH
23536: CALL_OW 266
23540: PUSH
23541: LD_INT 0
23543: EQUAL
23544: IFFALSE 23630
// begin arDepot = building ;
23546: LD_ADDR_EXP 43
23550: PUSH
23551: LD_VAR 0 1
23555: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23556: LD_INT 38
23558: PUSH
23559: LD_INT 47
23561: PUSH
23562: EMPTY
23563: LIST
23564: LIST
23565: PPUSH
23566: LD_INT 71
23568: PPUSH
23569: LD_INT 19
23571: PPUSH
23572: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23576: LD_VAR 0 1
23580: PPUSH
23581: CALL_OW 274
23585: PPUSH
23586: LD_INT 1
23588: PPUSH
23589: LD_INT 500
23591: PPUSH
23592: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23596: LD_VAR 0 1
23600: PPUSH
23601: CALL_OW 274
23605: PPUSH
23606: LD_INT 3
23608: PPUSH
23609: LD_INT 30
23611: PPUSH
23612: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23616: LD_EXP 26
23620: PPUSH
23621: LD_VAR 0 1
23625: PPUSH
23626: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23630: LD_VAR 0 1
23634: PPUSH
23635: CALL_OW 266
23639: PUSH
23640: LD_INT 6
23642: EQUAL
23643: PUSH
23644: LD_VAR 0 1
23648: PPUSH
23649: CALL_OW 266
23653: PUSH
23654: LD_INT 9
23656: EQUAL
23657: OR
23658: IFFALSE 23709
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23660: LD_VAR 0 1
23664: PPUSH
23665: LD_INT 10
23667: PPUSH
23668: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23672: LD_VAR 0 1
23676: PPUSH
23677: LD_INT 11
23679: PPUSH
23680: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23684: LD_INT 2
23686: PPUSH
23687: LD_VAR 0 1
23691: PPUSH
23692: LD_INT 2
23694: PPUSH
23695: CALL 15408 0 3
// arLab = building ;
23699: LD_ADDR_EXP 44
23703: PUSH
23704: LD_VAR 0 1
23708: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23709: LD_VAR 0 1
23713: PPUSH
23714: CALL_OW 266
23718: PUSH
23719: LD_INT 2
23721: EQUAL
23722: PUSH
23723: LD_VAR 0 1
23727: PPUSH
23728: CALL_OW 266
23732: PUSH
23733: LD_INT 4
23735: EQUAL
23736: OR
23737: IFFALSE 23808
// begin ComUpgrade ( building ) ;
23739: LD_VAR 0 1
23743: PPUSH
23744: CALL_OW 146
// if GetBType ( building ) = b_armoury then
23748: LD_VAR 0 1
23752: PPUSH
23753: CALL_OW 266
23757: PUSH
23758: LD_INT 4
23760: EQUAL
23761: IFFALSE 23808
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
23763: LD_INT 22
23765: PUSH
23766: LD_INT 2
23768: PUSH
23769: EMPTY
23770: LIST
23771: LIST
23772: PUSH
23773: LD_INT 25
23775: PUSH
23776: LD_INT 1
23778: PUSH
23779: EMPTY
23780: LIST
23781: LIST
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: PPUSH
23787: CALL_OW 69
23791: PUSH
23792: LD_EXP 26
23796: DIFF
23797: PPUSH
23798: LD_INT 75
23800: PPUSH
23801: LD_INT 21
23803: PPUSH
23804: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
23808: LD_VAR 0 1
23812: PPUSH
23813: CALL_OW 266
23817: PUSH
23818: LD_INT 27
23820: EQUAL
23821: IFFALSE 24099
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
23823: LD_INT 22
23825: PUSH
23826: LD_INT 2
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 30
23835: PUSH
23836: LD_INT 27
23838: PUSH
23839: EMPTY
23840: LIST
23841: LIST
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PPUSH
23847: CALL_OW 69
23851: PUSH
23852: LD_INT 2
23854: EQUAL
23855: IFFALSE 24099
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
23857: LD_ADDR_VAR 0 2
23861: PUSH
23862: LD_INT 22
23864: PUSH
23865: LD_INT 2
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PUSH
23872: LD_INT 21
23874: PUSH
23875: LD_INT 1
23877: PUSH
23878: EMPTY
23879: LIST
23880: LIST
23881: PUSH
23882: LD_INT 25
23884: PUSH
23885: LD_INT 2
23887: PUSH
23888: EMPTY
23889: LIST
23890: LIST
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: LIST
23896: PPUSH
23897: CALL_OW 69
23901: PUSH
23902: LD_INT 1
23904: ARRAY
23905: ST_TO_ADDR
// if not i then
23906: LD_VAR 0 2
23910: NOT
23911: IFFALSE 23915
// exit ;
23913: GO 24099
// AddComMoveXY ( i , 92 , 34 ) ;
23915: LD_VAR 0 2
23919: PPUSH
23920: LD_INT 92
23922: PPUSH
23923: LD_INT 34
23925: PPUSH
23926: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23930: LD_VAR 0 2
23934: PPUSH
23935: LD_INT 35
23937: PPUSH
23938: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
23942: LD_VAR 0 2
23946: PPUSH
23947: LD_INT 101
23949: PPUSH
23950: LD_INT 20
23952: PPUSH
23953: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23957: LD_VAR 0 2
23961: PPUSH
23962: LD_INT 35
23964: PPUSH
23965: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
23969: LD_VAR 0 2
23973: PPUSH
23974: LD_INT 115
23976: PPUSH
23977: LD_INT 30
23979: PPUSH
23980: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
23984: LD_VAR 0 2
23988: PPUSH
23989: LD_INT 35
23991: PPUSH
23992: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
23996: LD_VAR 0 2
24000: PPUSH
24001: LD_INT 82
24003: PPUSH
24004: LD_INT 57
24006: PPUSH
24007: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24011: LD_VAR 0 2
24015: PPUSH
24016: LD_INT 35
24018: PPUSH
24019: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24023: LD_VAR 0 2
24027: PPUSH
24028: LD_INT 36
24030: PPUSH
24031: LD_INT 28
24033: PPUSH
24034: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24038: LD_VAR 0 2
24042: PPUSH
24043: LD_INT 70
24045: PPUSH
24046: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24050: LD_INT 22
24052: PUSH
24053: LD_INT 2
24055: PUSH
24056: EMPTY
24057: LIST
24058: LIST
24059: PUSH
24060: LD_INT 21
24062: PUSH
24063: LD_INT 1
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 25
24072: PUSH
24073: LD_INT 2
24075: PUSH
24076: EMPTY
24077: LIST
24078: LIST
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: PPUSH
24085: CALL_OW 69
24089: PPUSH
24090: LD_EXP 43
24094: PPUSH
24095: CALL_OW 180
// end ; end ; end ;
24099: PPOPN 5
24101: END
// on UpgradeComplete ( building ) do var i ;
24102: LD_INT 0
24104: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24105: LD_VAR 0 1
24109: PPUSH
24110: CALL_OW 255
24114: PUSH
24115: LD_INT 1
24117: EQUAL
24118: PUSH
24119: LD_EXP 63
24123: PUSH
24124: LD_INT 0
24126: EQUAL
24127: AND
24128: IFFALSE 24326
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24130: LD_VAR 0 1
24134: PPUSH
24135: CALL_OW 266
24139: PUSH
24140: LD_INT 7
24142: EQUAL
24143: PUSH
24144: LD_VAR 0 1
24148: PPUSH
24149: CALL_OW 266
24153: PUSH
24154: LD_INT 8
24156: EQUAL
24157: OR
24158: IFFALSE 24326
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24160: LD_INT 22
24162: PUSH
24163: LD_INT 1
24165: PUSH
24166: EMPTY
24167: LIST
24168: LIST
24169: PUSH
24170: LD_INT 2
24172: PUSH
24173: LD_INT 30
24175: PUSH
24176: LD_INT 26
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 30
24185: PUSH
24186: LD_INT 27
24188: PUSH
24189: EMPTY
24190: LIST
24191: LIST
24192: PUSH
24193: LD_INT 30
24195: PUSH
24196: LD_INT 28
24198: PUSH
24199: EMPTY
24200: LIST
24201: LIST
24202: PUSH
24203: EMPTY
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: PUSH
24209: EMPTY
24210: LIST
24211: LIST
24212: PPUSH
24213: CALL_OW 69
24217: PUSH
24218: LD_INT 0
24220: GREATER
24221: IFFALSE 24326
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24223: LD_ADDR_VAR 0 2
24227: PUSH
24228: LD_INT 22
24230: PUSH
24231: LD_INT 1
24233: PUSH
24234: EMPTY
24235: LIST
24236: LIST
24237: PUSH
24238: LD_INT 2
24240: PUSH
24241: LD_INT 30
24243: PUSH
24244: LD_INT 7
24246: PUSH
24247: EMPTY
24248: LIST
24249: LIST
24250: PUSH
24251: LD_INT 30
24253: PUSH
24254: LD_INT 8
24256: PUSH
24257: EMPTY
24258: LIST
24259: LIST
24260: PUSH
24261: EMPTY
24262: LIST
24263: LIST
24264: LIST
24265: PUSH
24266: EMPTY
24267: LIST
24268: LIST
24269: PPUSH
24270: CALL_OW 69
24274: PUSH
24275: FOR_IN
24276: IFFALSE 24324
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24278: LD_VAR 0 2
24282: PPUSH
24283: LD_INT 1
24285: PPUSH
24286: CALL_OW 268
24290: PUSH
24291: LD_INT 11
24293: EQUAL
24294: PUSH
24295: LD_VAR 0 2
24299: PPUSH
24300: LD_INT 2
24302: PPUSH
24303: CALL_OW 268
24307: PUSH
24308: LD_INT 11
24310: EQUAL
24311: OR
24312: IFFALSE 24322
// eventVar1 = 1 ;
24314: LD_ADDR_EXP 63
24318: PUSH
24319: LD_INT 1
24321: ST_TO_ADDR
24322: GO 24275
24324: POP
24325: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24326: LD_VAR 0 1
24330: PPUSH
24331: CALL_OW 255
24335: PUSH
24336: LD_INT 2
24338: EQUAL
24339: IFFALSE 24444
// begin if GetBType ( building ) = b_barracks then
24341: LD_VAR 0 1
24345: PPUSH
24346: CALL_OW 266
24350: PUSH
24351: LD_INT 5
24353: EQUAL
24354: IFFALSE 24444
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24356: LD_ADDR_VAR 0 2
24360: PUSH
24361: LD_INT 22
24363: PUSH
24364: LD_INT 2
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PUSH
24371: LD_INT 25
24373: PUSH
24374: LD_INT 1
24376: PUSH
24377: EMPTY
24378: LIST
24379: LIST
24380: PUSH
24381: LD_INT 3
24383: PUSH
24384: LD_INT 54
24386: PUSH
24387: EMPTY
24388: LIST
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: EMPTY
24395: LIST
24396: LIST
24397: LIST
24398: PPUSH
24399: CALL_OW 69
24403: PUSH
24404: LD_EXP 26
24408: PUSH
24409: EMPTY
24410: LIST
24411: DIFF
24412: PUSH
24413: FOR_IN
24414: IFFALSE 24432
// ComEnterUnit ( i , building ) ;
24416: LD_VAR 0 2
24420: PPUSH
24421: LD_VAR 0 1
24425: PPUSH
24426: CALL_OW 120
24430: GO 24413
24432: POP
24433: POP
// arArm = building ;
24434: LD_ADDR_EXP 45
24438: PUSH
24439: LD_VAR 0 1
24443: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24444: LD_VAR 0 1
24448: PPUSH
24449: CALL_OW 255
24453: PUSH
24454: LD_INT 3
24456: EQUAL
24457: IFFALSE 24930
// begin if GetBType ( building ) = b_factory then
24459: LD_VAR 0 1
24463: PPUSH
24464: CALL_OW 266
24468: PUSH
24469: LD_INT 3
24471: EQUAL
24472: IFFALSE 24539
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24474: LD_ADDR_VAR 0 2
24478: PUSH
24479: LD_INT 22
24481: PUSH
24482: LD_INT 3
24484: PUSH
24485: EMPTY
24486: LIST
24487: LIST
24488: PUSH
24489: LD_INT 25
24491: PUSH
24492: LD_INT 3
24494: PUSH
24495: EMPTY
24496: LIST
24497: LIST
24498: PUSH
24499: EMPTY
24500: LIST
24501: LIST
24502: PPUSH
24503: CALL_OW 69
24507: PUSH
24508: FOR_IN
24509: IFFALSE 24527
// ComEnterUnit ( i , building ) ;
24511: LD_VAR 0 2
24515: PPUSH
24516: LD_VAR 0 1
24520: PPUSH
24521: CALL_OW 120
24525: GO 24508
24527: POP
24528: POP
// ruFab = building ;
24529: LD_ADDR_EXP 35
24533: PUSH
24534: LD_VAR 0 1
24538: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24539: LD_INT 22
24541: PUSH
24542: LD_INT 3
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PUSH
24549: LD_INT 21
24551: PUSH
24552: LD_INT 3
24554: PUSH
24555: EMPTY
24556: LIST
24557: LIST
24558: PUSH
24559: LD_INT 30
24561: PUSH
24562: LD_INT 8
24564: PUSH
24565: EMPTY
24566: LIST
24567: LIST
24568: PUSH
24569: EMPTY
24570: LIST
24571: LIST
24572: LIST
24573: PPUSH
24574: CALL_OW 69
24578: PUSH
24579: LD_INT 2
24581: EQUAL
24582: IFFALSE 24790
// begin for i = 1 to 2 do
24584: LD_ADDR_VAR 0 2
24588: PUSH
24589: DOUBLE
24590: LD_INT 1
24592: DEC
24593: ST_TO_ADDR
24594: LD_INT 2
24596: PUSH
24597: FOR_TO
24598: IFFALSE 24685
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24600: LD_INT 22
24602: PUSH
24603: LD_INT 3
24605: PUSH
24606: EMPTY
24607: LIST
24608: LIST
24609: PUSH
24610: LD_INT 25
24612: PUSH
24613: LD_INT 4
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: EMPTY
24621: LIST
24622: LIST
24623: PPUSH
24624: CALL_OW 69
24628: PUSH
24629: LD_VAR 0 2
24633: ARRAY
24634: PPUSH
24635: LD_INT 22
24637: PUSH
24638: LD_INT 3
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: PUSH
24645: LD_INT 21
24647: PUSH
24648: LD_INT 3
24650: PUSH
24651: EMPTY
24652: LIST
24653: LIST
24654: PUSH
24655: LD_INT 30
24657: PUSH
24658: LD_INT 8
24660: PUSH
24661: EMPTY
24662: LIST
24663: LIST
24664: PUSH
24665: EMPTY
24666: LIST
24667: LIST
24668: LIST
24669: PPUSH
24670: CALL_OW 69
24674: PUSH
24675: LD_INT 1
24677: ARRAY
24678: PPUSH
24679: CALL_OW 120
24683: GO 24597
24685: POP
24686: POP
// for i = 3 to 4 do
24687: LD_ADDR_VAR 0 2
24691: PUSH
24692: DOUBLE
24693: LD_INT 3
24695: DEC
24696: ST_TO_ADDR
24697: LD_INT 4
24699: PUSH
24700: FOR_TO
24701: IFFALSE 24788
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24703: LD_INT 22
24705: PUSH
24706: LD_INT 3
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: LD_INT 25
24715: PUSH
24716: LD_INT 4
24718: PUSH
24719: EMPTY
24720: LIST
24721: LIST
24722: PUSH
24723: EMPTY
24724: LIST
24725: LIST
24726: PPUSH
24727: CALL_OW 69
24731: PUSH
24732: LD_VAR 0 2
24736: ARRAY
24737: PPUSH
24738: LD_INT 22
24740: PUSH
24741: LD_INT 3
24743: PUSH
24744: EMPTY
24745: LIST
24746: LIST
24747: PUSH
24748: LD_INT 21
24750: PUSH
24751: LD_INT 3
24753: PUSH
24754: EMPTY
24755: LIST
24756: LIST
24757: PUSH
24758: LD_INT 30
24760: PUSH
24761: LD_INT 8
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: LIST
24772: PPUSH
24773: CALL_OW 69
24777: PUSH
24778: LD_INT 2
24780: ARRAY
24781: PPUSH
24782: CALL_OW 120
24786: GO 24700
24788: POP
24789: POP
// end ; if GetBType ( building ) = b_barracks then
24790: LD_VAR 0 1
24794: PPUSH
24795: CALL_OW 266
24799: PUSH
24800: LD_INT 5
24802: EQUAL
24803: IFFALSE 24930
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
24805: LD_ADDR_VAR 0 2
24809: PUSH
24810: LD_INT 22
24812: PUSH
24813: LD_INT 3
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 25
24822: PUSH
24823: LD_INT 1
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 3
24832: PUSH
24833: LD_INT 54
24835: PUSH
24836: EMPTY
24837: LIST
24838: PUSH
24839: EMPTY
24840: LIST
24841: LIST
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: PPUSH
24848: CALL_OW 69
24852: PUSH
24853: FOR_IN
24854: IFFALSE 24872
// ComEnterUnit ( i , building ) ;
24856: LD_VAR 0 2
24860: PPUSH
24861: LD_VAR 0 1
24865: PPUSH
24866: CALL_OW 120
24870: GO 24853
24872: POP
24873: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
24874: LD_INT 22
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 30
24886: PUSH
24887: LD_INT 5
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: PPUSH
24898: CALL_OW 69
24902: PUSH
24903: LD_INT 0
24905: EQUAL
24906: IFFALSE 24920
// ruArm1 = building else
24908: LD_ADDR_EXP 33
24912: PUSH
24913: LD_VAR 0 1
24917: ST_TO_ADDR
24918: GO 24930
// ruArm2 = building ;
24920: LD_ADDR_EXP 34
24924: PUSH
24925: LD_VAR 0 1
24929: ST_TO_ADDR
// end ; end ; end ;
24930: PPOPN 2
24932: END
// on EnterBuilding ( building , human ) do var rnd ;
24933: LD_INT 0
24935: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
24936: LD_VAR 0 2
24940: PPUSH
24941: CALL_OW 255
24945: PUSH
24946: LD_INT 2
24948: EQUAL
24949: PUSH
24950: LD_VAR 0 2
24954: PPUSH
24955: CALL_OW 257
24959: PUSH
24960: LD_INT 1
24962: EQUAL
24963: AND
24964: PUSH
24965: LD_VAR 0 1
24969: PUSH
24970: LD_EXP 45
24974: EQUAL
24975: AND
24976: IFFALSE 25023
// begin wait ( 0 0$1 ) ;
24978: LD_INT 35
24980: PPUSH
24981: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
24985: LD_ADDR_VAR 0 3
24989: PUSH
24990: LD_INT 1
24992: PPUSH
24993: LD_INT 100
24995: PPUSH
24996: CALL_OW 12
25000: ST_TO_ADDR
// if rnd > 50 then
25001: LD_VAR 0 3
25005: PUSH
25006: LD_INT 50
25008: GREATER
25009: IFFALSE 25023
// SetClass ( human , class_mortar ) ;
25011: LD_VAR 0 2
25015: PPUSH
25016: LD_INT 8
25018: PPUSH
25019: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25023: LD_VAR 0 2
25027: PUSH
25028: LD_INT 22
25030: PUSH
25031: LD_INT 2
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: PUSH
25038: LD_INT 25
25040: PUSH
25041: LD_INT 12
25043: PUSH
25044: EMPTY
25045: LIST
25046: LIST
25047: PUSH
25048: EMPTY
25049: LIST
25050: LIST
25051: PPUSH
25052: CALL_OW 69
25056: IN
25057: IFFALSE 25107
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25059: LD_VAR 0 1
25063: PPUSH
25064: CALL_OW 266
25068: PUSH
25069: LD_INT 0
25071: PUSH
25072: LD_INT 1
25074: PUSH
25075: EMPTY
25076: LIST
25077: LIST
25078: IN
25079: IFFALSE 25095
// SetClass ( human , class_apeman_engineer ) else
25081: LD_VAR 0 2
25085: PPUSH
25086: LD_INT 16
25088: PPUSH
25089: CALL_OW 336
25093: GO 25107
// SetClass ( human , class_apeman_soldier ) ;
25095: LD_VAR 0 2
25099: PPUSH
25100: LD_INT 15
25102: PPUSH
25103: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25107: LD_VAR 0 2
25111: PPUSH
25112: CALL_OW 255
25116: PUSH
25117: LD_INT 3
25119: EQUAL
25120: PUSH
25121: LD_VAR 0 2
25125: PPUSH
25126: CALL_OW 257
25130: PUSH
25131: LD_INT 1
25133: EQUAL
25134: AND
25135: PUSH
25136: LD_VAR 0 1
25140: PUSH
25141: LD_EXP 33
25145: EQUAL
25146: PUSH
25147: LD_VAR 0 1
25151: PUSH
25152: LD_EXP 34
25156: EQUAL
25157: OR
25158: PUSH
25159: EMPTY
25160: LIST
25161: AND
25162: IFFALSE 25183
// begin wait ( 0 0$1 ) ;
25164: LD_INT 35
25166: PPUSH
25167: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25171: LD_VAR 0 2
25175: PPUSH
25176: LD_INT 9
25178: PPUSH
25179: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25183: LD_VAR 0 2
25187: PPUSH
25188: CALL_OW 255
25192: PUSH
25193: LD_INT 3
25195: EQUAL
25196: PUSH
25197: LD_VAR 0 2
25201: PPUSH
25202: CALL_OW 257
25206: PUSH
25207: LD_INT 9
25209: EQUAL
25210: AND
25211: PUSH
25212: LD_VAR 0 1
25216: PPUSH
25217: CALL_OW 266
25221: PUSH
25222: LD_INT 32
25224: EQUAL
25225: AND
25226: IFFALSE 25247
// begin wait ( 0 0$1 ) ;
25228: LD_INT 35
25230: PPUSH
25231: CALL_OW 67
// SetClass ( human , 1 ) ;
25235: LD_VAR 0 2
25239: PPUSH
25240: LD_INT 1
25242: PPUSH
25243: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25247: LD_VAR 0 2
25251: PPUSH
25252: CALL_OW 255
25256: PUSH
25257: LD_INT 3
25259: EQUAL
25260: PUSH
25261: LD_VAR 0 2
25265: PPUSH
25266: CALL_OW 257
25270: PUSH
25271: LD_INT 3
25273: EQUAL
25274: AND
25275: PUSH
25276: LD_VAR 0 1
25280: PUSH
25281: LD_EXP 35
25285: EQUAL
25286: AND
25287: IFFALSE 25301
// SetLives ( human , 1000 ) ;
25289: LD_VAR 0 2
25293: PPUSH
25294: LD_INT 1000
25296: PPUSH
25297: CALL_OW 234
// end ;
25301: PPOPN 3
25303: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25304: LD_VAR 0 1
25308: PUSH
25309: LD_INT 1
25311: EQUAL
25312: PUSH
25313: LD_VAR 0 2
25317: PUSH
25318: LD_INT 2
25320: EQUAL
25321: AND
25322: PUSH
25323: LD_INT 1
25325: PPUSH
25326: LD_INT 2
25328: PPUSH
25329: CALL_OW 81
25333: PUSH
25334: LD_INT 1
25336: EQUAL
25337: AND
25338: IFFALSE 25359
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25340: LD_EXP 24
25344: PPUSH
25345: LD_STRING D6b-Pow-1
25347: PPUSH
25348: CALL_OW 94
// YouLost ( Powell ) ;
25352: LD_STRING Powell
25354: PPUSH
25355: CALL_OW 104
// end ; end ;
25359: PPOPN 2
25361: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25362: LD_INT 23
25364: PPUSH
25365: LD_INT 22
25367: PUSH
25368: LD_INT 1
25370: PUSH
25371: EMPTY
25372: LIST
25373: LIST
25374: PUSH
25375: LD_INT 21
25377: PUSH
25378: LD_INT 3
25380: PUSH
25381: EMPTY
25382: LIST
25383: LIST
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: PPUSH
25389: CALL_OW 70
25393: PUSH
25394: LD_INT 23
25396: PPUSH
25397: LD_INT 22
25399: PUSH
25400: LD_INT 1
25402: PUSH
25403: EMPTY
25404: LIST
25405: LIST
25406: PUSH
25407: LD_INT 21
25409: PUSH
25410: LD_INT 2
25412: PUSH
25413: EMPTY
25414: LIST
25415: LIST
25416: PUSH
25417: EMPTY
25418: LIST
25419: LIST
25420: PPUSH
25421: CALL_OW 70
25425: OR
25426: PUSH
25427: LD_INT 1
25429: PPUSH
25430: LD_INT 2
25432: PPUSH
25433: CALL_OW 81
25437: PUSH
25438: LD_INT 1
25440: EQUAL
25441: AND
25442: IFFALSE 25575
25444: GO 25446
25446: DISABLE
// begin enable ;
25447: ENABLE
// wait ( 0 0$10 ) ;
25448: LD_INT 350
25450: PPUSH
25451: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25455: LD_INT 23
25457: PPUSH
25458: LD_INT 22
25460: PUSH
25461: LD_INT 1
25463: PUSH
25464: EMPTY
25465: LIST
25466: LIST
25467: PUSH
25468: LD_INT 21
25470: PUSH
25471: LD_INT 3
25473: PUSH
25474: EMPTY
25475: LIST
25476: LIST
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PPUSH
25482: CALL_OW 70
25486: PUSH
25487: LD_INT 23
25489: PPUSH
25490: LD_INT 22
25492: PUSH
25493: LD_INT 1
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: PUSH
25500: LD_INT 21
25502: PUSH
25503: LD_INT 2
25505: PUSH
25506: EMPTY
25507: LIST
25508: LIST
25509: PUSH
25510: EMPTY
25511: LIST
25512: LIST
25513: PPUSH
25514: CALL_OW 70
25518: OR
25519: PUSH
25520: LD_INT 1
25522: PPUSH
25523: LD_INT 2
25525: PPUSH
25526: CALL_OW 81
25530: PUSH
25531: LD_INT 1
25533: EQUAL
25534: AND
25535: IFFALSE 25575
// begin disable ;
25537: DISABLE
// InGameOn ;
25538: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25542: LD_INT 73
25544: PPUSH
25545: LD_INT 18
25547: PPUSH
25548: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25552: LD_EXP 24
25556: PPUSH
25557: LD_STRING D6b-Pow-1
25559: PPUSH
25560: CALL_OW 94
// YouLost ( Powell ) ;
25564: LD_STRING Powell
25566: PPUSH
25567: CALL_OW 104
// InGameOff ;
25571: CALL_OW 9
// end ; end ;
25575: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
25576: LD_VAR 0 1
25580: PUSH
25581: LD_EXP 1
25585: EQUAL
25586: IFFALSE 25595
// YouLost ( JMM ) ;
25588: LD_STRING JMM
25590: PPUSH
25591: CALL_OW 104
// if unit = Khatam then
25595: LD_VAR 0 1
25599: PUSH
25600: LD_EXP 14
25604: EQUAL
25605: IFFALSE 25615
// KhatamStatus = 0 ;
25607: LD_ADDR_EXP 53
25611: PUSH
25612: LD_INT 0
25614: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25615: LD_VAR 0 1
25619: PPUSH
25620: CALL_OW 255
25624: PUSH
25625: LD_INT 3
25627: EQUAL
25628: PUSH
25629: LD_VAR 0 1
25633: PPUSH
25634: CALL_OW 247
25638: PUSH
25639: LD_INT 3
25641: EQUAL
25642: AND
25643: IFFALSE 26335
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25645: LD_VAR 0 1
25649: PPUSH
25650: CALL_OW 266
25654: PUSH
25655: LD_INT 31
25657: EQUAL
25658: PUSH
25659: LD_VAR 0 1
25663: PPUSH
25664: CALL_OW 266
25668: PUSH
25669: LD_INT 32
25671: EQUAL
25672: OR
25673: PUSH
25674: LD_VAR 0 1
25678: PPUSH
25679: CALL_OW 266
25683: PUSH
25684: LD_INT 36
25686: EQUAL
25687: OR
25688: PUSH
25689: LD_VAR 0 1
25693: PPUSH
25694: CALL_OW 266
25698: PUSH
25699: LD_INT 0
25701: EQUAL
25702: OR
25703: PUSH
25704: LD_VAR 0 1
25708: PPUSH
25709: CALL_OW 266
25713: PUSH
25714: LD_INT 24
25716: EQUAL
25717: OR
25718: PUSH
25719: LD_VAR 0 1
25723: PPUSH
25724: CALL_OW 266
25728: PUSH
25729: LD_INT 17
25731: EQUAL
25732: OR
25733: PUSH
25734: LD_VAR 0 1
25738: PPUSH
25739: CALL_OW 266
25743: PUSH
25744: LD_INT 25
25746: EQUAL
25747: OR
25748: PUSH
25749: LD_VAR 0 1
25753: PPUSH
25754: CALL_OW 266
25758: PUSH
25759: LD_INT 19
25761: EQUAL
25762: OR
25763: PUSH
25764: LD_VAR 0 1
25768: PPUSH
25769: CALL_OW 266
25773: PUSH
25774: LD_INT 20
25776: EQUAL
25777: OR
25778: PUSH
25779: LD_VAR 0 1
25783: PPUSH
25784: CALL_OW 266
25788: PUSH
25789: LD_INT 18
25791: EQUAL
25792: OR
25793: PUSH
25794: LD_VAR 0 1
25798: PPUSH
25799: CALL_OW 266
25803: PUSH
25804: LD_INT 21
25806: EQUAL
25807: OR
25808: PUSH
25809: LD_VAR 0 1
25813: PPUSH
25814: CALL_OW 266
25818: PUSH
25819: LD_INT 23
25821: EQUAL
25822: OR
25823: PUSH
25824: LD_VAR 0 1
25828: PPUSH
25829: CALL_OW 266
25833: PUSH
25834: LD_INT 16
25836: EQUAL
25837: OR
25838: PUSH
25839: LD_VAR 0 1
25843: PPUSH
25844: CALL_OW 266
25848: PUSH
25849: LD_INT 6
25851: EQUAL
25852: OR
25853: PUSH
25854: LD_VAR 0 1
25858: PPUSH
25859: CALL_OW 266
25863: PUSH
25864: LD_INT 29
25866: EQUAL
25867: OR
25868: PUSH
25869: LD_VAR 0 1
25873: PPUSH
25874: CALL_OW 266
25878: PUSH
25879: LD_INT 26
25881: EQUAL
25882: OR
25883: PUSH
25884: LD_VAR 0 1
25888: PPUSH
25889: CALL_OW 266
25893: PUSH
25894: LD_INT 30
25896: EQUAL
25897: OR
25898: PUSH
25899: LD_VAR 0 1
25903: PPUSH
25904: CALL_OW 266
25908: PUSH
25909: LD_INT 28
25911: EQUAL
25912: OR
25913: PUSH
25914: LD_VAR 0 1
25918: PPUSH
25919: CALL_OW 266
25923: PUSH
25924: LD_INT 27
25926: EQUAL
25927: OR
25928: PUSH
25929: LD_VAR 0 1
25933: PPUSH
25934: CALL_OW 266
25938: PUSH
25939: LD_INT 33
25941: EQUAL
25942: OR
25943: PUSH
25944: LD_VAR 0 1
25948: PPUSH
25949: CALL_OW 266
25953: PUSH
25954: LD_INT 2
25956: EQUAL
25957: OR
25958: PUSH
25959: LD_VAR 0 1
25963: PPUSH
25964: CALL_OW 266
25968: PUSH
25969: LD_INT 4
25971: EQUAL
25972: OR
25973: IFFALSE 26059
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
25975: LD_ADDR_EXP 42
25979: PUSH
25980: LD_EXP 42
25984: PUSH
25985: LD_VAR 0 1
25989: PPUSH
25990: CALL_OW 266
25994: ADD
25995: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
25996: LD_ADDR_EXP 42
26000: PUSH
26001: LD_EXP 42
26005: PUSH
26006: LD_VAR 0 1
26010: PPUSH
26011: CALL_OW 250
26015: ADD
26016: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26017: LD_ADDR_EXP 42
26021: PUSH
26022: LD_EXP 42
26026: PUSH
26027: LD_VAR 0 1
26031: PPUSH
26032: CALL_OW 251
26036: ADD
26037: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26038: LD_ADDR_EXP 42
26042: PUSH
26043: LD_EXP 42
26047: PUSH
26048: LD_VAR 0 1
26052: PPUSH
26053: CALL_OW 254
26057: ADD
26058: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26059: LD_VAR 0 1
26063: PPUSH
26064: CALL_OW 266
26068: PUSH
26069: LD_INT 1
26071: EQUAL
26072: IFFALSE 26151
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26074: LD_ADDR_EXP 42
26078: PUSH
26079: LD_EXP 42
26083: PUSH
26084: LD_INT 0
26086: ADD
26087: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26088: LD_ADDR_EXP 42
26092: PUSH
26093: LD_EXP 42
26097: PUSH
26098: LD_VAR 0 1
26102: PPUSH
26103: CALL_OW 250
26107: ADD
26108: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26109: LD_ADDR_EXP 42
26113: PUSH
26114: LD_EXP 42
26118: PUSH
26119: LD_VAR 0 1
26123: PPUSH
26124: CALL_OW 251
26128: ADD
26129: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26130: LD_ADDR_EXP 42
26134: PUSH
26135: LD_EXP 42
26139: PUSH
26140: LD_VAR 0 1
26144: PPUSH
26145: CALL_OW 254
26149: ADD
26150: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26151: LD_VAR 0 1
26155: PPUSH
26156: CALL_OW 266
26160: PUSH
26161: LD_INT 3
26163: EQUAL
26164: IFFALSE 26243
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26166: LD_ADDR_EXP 42
26170: PUSH
26171: LD_EXP 42
26175: PUSH
26176: LD_INT 2
26178: ADD
26179: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26180: LD_ADDR_EXP 42
26184: PUSH
26185: LD_EXP 42
26189: PUSH
26190: LD_VAR 0 1
26194: PPUSH
26195: CALL_OW 250
26199: ADD
26200: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26201: LD_ADDR_EXP 42
26205: PUSH
26206: LD_EXP 42
26210: PUSH
26211: LD_VAR 0 1
26215: PPUSH
26216: CALL_OW 251
26220: ADD
26221: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26222: LD_ADDR_EXP 42
26226: PUSH
26227: LD_EXP 42
26231: PUSH
26232: LD_VAR 0 1
26236: PPUSH
26237: CALL_OW 254
26241: ADD
26242: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26243: LD_VAR 0 1
26247: PPUSH
26248: CALL_OW 266
26252: PUSH
26253: LD_INT 5
26255: EQUAL
26256: IFFALSE 26335
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26258: LD_ADDR_EXP 42
26262: PUSH
26263: LD_EXP 42
26267: PUSH
26268: LD_INT 4
26270: ADD
26271: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26272: LD_ADDR_EXP 42
26276: PUSH
26277: LD_EXP 42
26281: PUSH
26282: LD_VAR 0 1
26286: PPUSH
26287: CALL_OW 250
26291: ADD
26292: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26293: LD_ADDR_EXP 42
26297: PUSH
26298: LD_EXP 42
26302: PUSH
26303: LD_VAR 0 1
26307: PPUSH
26308: CALL_OW 251
26312: ADD
26313: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26314: LD_ADDR_EXP 42
26318: PUSH
26319: LD_EXP 42
26323: PUSH
26324: LD_VAR 0 1
26328: PPUSH
26329: CALL_OW 254
26333: ADD
26334: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26335: LD_EXP 51
26339: PUSH
26340: LD_VAR 0 1
26344: PPUSH
26345: CALL_OW 257
26349: PUSH
26350: LD_INT 3
26352: EQUAL
26353: AND
26354: PUSH
26355: LD_VAR 0 1
26359: PPUSH
26360: CALL_OW 255
26364: PUSH
26365: LD_INT 3
26367: EQUAL
26368: AND
26369: PUSH
26370: LD_EXP 35
26374: PPUSH
26375: CALL_OW 302
26379: AND
26380: PUSH
26381: LD_EXP 35
26385: PPUSH
26386: CALL_OW 255
26390: PUSH
26391: LD_INT 3
26393: EQUAL
26394: AND
26395: IFFALSE 26479
// begin ruMech := ruMech - 1 ;
26397: LD_ADDR_EXP 51
26401: PUSH
26402: LD_EXP 51
26406: PUSH
26407: LD_INT 1
26409: MINUS
26410: ST_TO_ADDR
// uc_side = 3 ;
26411: LD_ADDR_OWVAR 20
26415: PUSH
26416: LD_INT 3
26418: ST_TO_ADDR
// uc_nation = 3 ;
26419: LD_ADDR_OWVAR 21
26423: PUSH
26424: LD_INT 3
26426: ST_TO_ADDR
// hc_gallery :=  ;
26427: LD_ADDR_OWVAR 33
26431: PUSH
26432: LD_STRING 
26434: ST_TO_ADDR
// hc_name :=  ;
26435: LD_ADDR_OWVAR 26
26439: PUSH
26440: LD_STRING 
26442: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26443: LD_INT 0
26445: PPUSH
26446: LD_EXP 36
26450: PPUSH
26451: LD_EXP 37
26455: PPUSH
26456: CALL_OW 12
26460: PPUSH
26461: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26465: CALL_OW 44
26469: PPUSH
26470: LD_EXP 35
26474: PPUSH
26475: CALL_OW 52
// end ; end ;
26479: PPOPN 1
26481: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26482: LD_ADDR_OWVAR 57
26486: PUSH
26487: LD_INT 0
26489: ST_TO_ADDR
// fastEnd = 1 ;
26490: LD_ADDR_EXP 61
26494: PUSH
26495: LD_INT 1
26497: ST_TO_ADDR
// FinishMission ;
26498: CALL 27614 0 0
// end ;
26502: PPOPN 1
26504: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL 34248 0 1
// end ; end_of_file
26514: PPOPN 1
26516: END
// export function PrepareNature ; var i , un ; begin
26517: LD_INT 0
26519: PPUSH
26520: PPUSH
26521: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26522: LD_ADDR_VAR 0 2
26526: PUSH
26527: DOUBLE
26528: LD_INT 1
26530: DEC
26531: ST_TO_ADDR
26532: LD_OWVAR 67
26536: PUSH
26537: LD_INT 1
26539: PPUSH
26540: LD_INT 5
26542: PPUSH
26543: CALL_OW 12
26547: PLUS
26548: PUSH
26549: FOR_TO
26550: IFFALSE 26695
// begin hc_sex = sex_male ;
26552: LD_ADDR_OWVAR 27
26556: PUSH
26557: LD_INT 1
26559: ST_TO_ADDR
// uc_side = 0 ;
26560: LD_ADDR_OWVAR 20
26564: PUSH
26565: LD_INT 0
26567: ST_TO_ADDR
// uc_nation = nation_nature ;
26568: LD_ADDR_OWVAR 21
26572: PUSH
26573: LD_INT 0
26575: ST_TO_ADDR
// hc_class = class_apeman ;
26576: LD_ADDR_OWVAR 28
26580: PUSH
26581: LD_INT 12
26583: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26584: LD_ADDR_OWVAR 31
26588: PUSH
26589: LD_INT 2
26591: PPUSH
26592: LD_INT 7
26594: PPUSH
26595: CALL_OW 12
26599: PUSH
26600: LD_OWVAR 67
26604: PLUS
26605: PUSH
26606: LD_INT 2
26608: PPUSH
26609: LD_INT 10
26611: PPUSH
26612: CALL_OW 12
26616: PUSH
26617: LD_INT 2
26619: PPUSH
26620: LD_INT 10
26622: PPUSH
26623: CALL_OW 12
26627: PUSH
26628: LD_INT 2
26630: PPUSH
26631: LD_INT 10
26633: PPUSH
26634: CALL_OW 12
26638: PUSH
26639: EMPTY
26640: LIST
26641: LIST
26642: LIST
26643: LIST
26644: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26645: LD_ADDR_OWVAR 35
26649: PUSH
26650: LD_INT 5
26652: NEG
26653: PPUSH
26654: LD_INT 5
26656: PPUSH
26657: CALL_OW 12
26661: PUSH
26662: LD_OWVAR 67
26666: MUL
26667: ST_TO_ADDR
// un = CreateHuman ;
26668: LD_ADDR_VAR 0 3
26672: PUSH
26673: CALL_OW 44
26677: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26678: LD_VAR 0 3
26682: PPUSH
26683: LD_INT 5
26685: PPUSH
26686: LD_INT 0
26688: PPUSH
26689: CALL_OW 49
// end ;
26693: GO 26549
26695: POP
26696: POP
// for i = 1 to Difficulty + 2 do
26697: LD_ADDR_VAR 0 2
26701: PUSH
26702: DOUBLE
26703: LD_INT 1
26705: DEC
26706: ST_TO_ADDR
26707: LD_OWVAR 67
26711: PUSH
26712: LD_INT 2
26714: PLUS
26715: PUSH
26716: FOR_TO
26717: IFFALSE 26826
// begin hc_sex = sex_male ;
26719: LD_ADDR_OWVAR 27
26723: PUSH
26724: LD_INT 1
26726: ST_TO_ADDR
// uc_side = 0 ;
26727: LD_ADDR_OWVAR 20
26731: PUSH
26732: LD_INT 0
26734: ST_TO_ADDR
// uc_nation = nation_nature ;
26735: LD_ADDR_OWVAR 21
26739: PUSH
26740: LD_INT 0
26742: ST_TO_ADDR
// hc_class = class_tiger ;
26743: LD_ADDR_OWVAR 28
26747: PUSH
26748: LD_INT 14
26750: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26751: LD_ADDR_OWVAR 31
26755: PUSH
26756: LD_EXP 37
26760: PUSH
26761: LD_INT 0
26763: PUSH
26764: LD_INT 0
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: EMPTY
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26776: LD_ADDR_OWVAR 35
26780: PUSH
26781: LD_INT 5
26783: NEG
26784: PPUSH
26785: LD_INT 5
26787: PPUSH
26788: CALL_OW 12
26792: PUSH
26793: LD_OWVAR 67
26797: MUL
26798: ST_TO_ADDR
// un = CreateHuman ;
26799: LD_ADDR_VAR 0 3
26803: PUSH
26804: CALL_OW 44
26808: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26809: LD_VAR 0 3
26813: PPUSH
26814: LD_INT 6
26816: PPUSH
26817: LD_INT 0
26819: PPUSH
26820: CALL_OW 49
// end ;
26824: GO 26716
26826: POP
26827: POP
// for i = 1 to rand ( 3 , 4 ) do
26828: LD_ADDR_VAR 0 2
26832: PUSH
26833: DOUBLE
26834: LD_INT 1
26836: DEC
26837: ST_TO_ADDR
26838: LD_INT 3
26840: PPUSH
26841: LD_INT 4
26843: PPUSH
26844: CALL_OW 12
26848: PUSH
26849: FOR_TO
26850: IFFALSE 26944
// begin hc_sex = sex_male ;
26852: LD_ADDR_OWVAR 27
26856: PUSH
26857: LD_INT 1
26859: ST_TO_ADDR
// uc_side = 0 ;
26860: LD_ADDR_OWVAR 20
26864: PUSH
26865: LD_INT 0
26867: ST_TO_ADDR
// uc_nation = nation_nature ;
26868: LD_ADDR_OWVAR 21
26872: PUSH
26873: LD_INT 0
26875: ST_TO_ADDR
// hc_class = 18 ;
26876: LD_ADDR_OWVAR 28
26880: PUSH
26881: LD_INT 18
26883: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
26884: LD_ADDR_OWVAR 31
26888: PUSH
26889: LD_EXP 37
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 0
26899: PUSH
26900: LD_INT 0
26902: PUSH
26903: EMPTY
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: ST_TO_ADDR
// hc_agressivity = 0 ;
26909: LD_ADDR_OWVAR 35
26913: PUSH
26914: LD_INT 0
26916: ST_TO_ADDR
// un = CreateHuman ;
26917: LD_ADDR_VAR 0 3
26921: PUSH
26922: CALL_OW 44
26926: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
26927: LD_VAR 0 3
26931: PPUSH
26932: LD_INT 6
26934: PPUSH
26935: LD_INT 0
26937: PPUSH
26938: CALL_OW 49
// end ;
26942: GO 26849
26944: POP
26945: POP
// end ; end_of_file
26946: LD_VAR 0 1
26950: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
26951: LD_EXP 46
26955: PUSH
26956: LD_INT 1
26958: EQUAL
26959: IFFALSE 27043
26961: GO 26963
26963: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
26964: LD_INT 7
26966: PPUSH
26967: LD_INT 5
26969: PPUSH
26970: LD_INT 4
26972: PUSH
26973: LD_INT 5
26975: PUSH
26976: LD_INT 6
26978: PUSH
26979: EMPTY
26980: LIST
26981: LIST
26982: LIST
26983: PUSH
26984: LD_OWVAR 67
26988: ARRAY
26989: PPUSH
26990: LD_EXP 36
26994: PPUSH
26995: LD_EXP 37
26999: PPUSH
27000: CALL_OW 12
27004: PPUSH
27005: LD_INT 2
27007: PPUSH
27008: LD_INT 1
27010: PPUSH
27011: LD_INT 1
27013: PPUSH
27014: EMPTY
27015: PPUSH
27016: LD_INT 25
27018: PUSH
27019: LD_INT 26
27021: PUSH
27022: LD_INT 27
27024: PUSH
27025: LD_INT 28
27027: PUSH
27028: EMPTY
27029: LIST
27030: LIST
27031: LIST
27032: LIST
27033: PPUSH
27034: EMPTY
27035: PPUSH
27036: LD_INT 1
27038: PPUSH
27039: CALL 16970 0 11
27043: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27044: LD_EXP 46
27048: PUSH
27049: LD_INT 1
27051: EQUAL
27052: IFFALSE 27140
27054: GO 27056
27056: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27057: LD_INT 5
27059: PPUSH
27060: LD_INT 2
27062: PPUSH
27063: LD_INT 5
27065: PUSH
27066: LD_INT 6
27068: PUSH
27069: LD_INT 8
27071: PUSH
27072: EMPTY
27073: LIST
27074: LIST
27075: LIST
27076: PUSH
27077: LD_OWVAR 67
27081: ARRAY
27082: PPUSH
27083: LD_INT 0
27085: PPUSH
27086: LD_INT 0
27088: PPUSH
27089: LD_INT 2
27091: PUSH
27092: LD_INT 4
27094: PUSH
27095: LD_INT 5
27097: PUSH
27098: EMPTY
27099: LIST
27100: LIST
27101: LIST
27102: PUSH
27103: LD_OWVAR 67
27107: ARRAY
27108: PPUSH
27109: LD_INT 0
27111: PPUSH
27112: LD_EXP 36
27116: PPUSH
27117: LD_EXP 37
27121: PPUSH
27122: CALL_OW 12
27126: PPUSH
27127: LD_INT 7
27129: PPUSH
27130: LD_INT 9
27132: PPUSH
27133: LD_INT 1
27135: PPUSH
27136: CALL 18674 0 11
27140: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27141: LD_EXP 46
27145: PUSH
27146: LD_INT 1
27148: EQUAL
27149: IFFALSE 27158
27151: GO 27153
27153: DISABLE
// PrepareArabianSheik ;
27154: CALL 4526 0 0
27158: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27159: LD_EXP 29
27163: PUSH
27164: LD_EXP 62
27168: PUSH
27169: LD_INT 1
27171: EQUAL
27172: AND
27173: IFFALSE 27242
27175: GO 27177
27177: DISABLE
// begin enable ;
27178: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27179: LD_INT 6
27181: PPUSH
27182: LD_INT 3
27184: PPUSH
27185: LD_EXP 58
27189: PPUSH
27190: LD_INT 0
27192: PPUSH
27193: LD_OWVAR 67
27197: PPUSH
27198: LD_INT 0
27200: PPUSH
27201: LD_EXP 58
27205: PUSH
27206: LD_INT 3
27208: DIV
27209: PUSH
27210: LD_INT 1
27212: PLUS
27213: PPUSH
27214: LD_EXP 36
27218: PPUSH
27219: LD_EXP 37
27223: PPUSH
27224: CALL_OW 12
27228: PPUSH
27229: LD_INT 17
27231: PPUSH
27232: LD_INT 18
27234: PPUSH
27235: LD_INT 1
27237: PPUSH
27238: CALL 18674 0 11
// end ;
27242: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27243: LD_EXP 29
27247: PUSH
27248: LD_EXP 62
27252: PUSH
27253: LD_INT 1
27255: EQUAL
27256: AND
27257: IFFALSE 27334
27259: GO 27261
27261: DISABLE
// begin enable ;
27262: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27263: LD_INT 17
27265: PPUSH
27266: LD_INT 6
27268: PPUSH
27269: LD_EXP 57
27273: PPUSH
27274: LD_EXP 36
27278: PPUSH
27279: LD_EXP 37
27283: PPUSH
27284: CALL_OW 12
27288: PPUSH
27289: LD_INT 3
27291: PPUSH
27292: LD_INT 1
27294: PPUSH
27295: LD_INT 3
27297: PUSH
27298: LD_INT 3
27300: PUSH
27301: EMPTY
27302: LIST
27303: LIST
27304: PPUSH
27305: LD_INT 43
27307: PUSH
27308: LD_INT 44
27310: PUSH
27311: LD_INT 45
27313: PUSH
27314: LD_INT 46
27316: PUSH
27317: EMPTY
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: PPUSH
27323: EMPTY
27324: PPUSH
27325: EMPTY
27326: PPUSH
27327: LD_INT 1
27329: PPUSH
27330: CALL 16970 0 11
// end ;
27334: END
// every 10 10$00 trigger joinEpsilon do
27335: LD_EXP 29
27339: IFFALSE 27393
27341: GO 27343
27343: DISABLE
// begin enable ;
27344: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27345: LD_ADDR_EXP 57
27349: PUSH
27350: LD_EXP 57
27354: PUSH
27355: LD_INT 1
27357: PPUSH
27358: LD_OWVAR 67
27362: PPUSH
27363: CALL_OW 12
27367: PLUS
27368: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27369: LD_ADDR_EXP 58
27373: PUSH
27374: LD_EXP 58
27378: PUSH
27379: LD_INT 1
27381: PPUSH
27382: LD_OWVAR 67
27386: PPUSH
27387: CALL_OW 12
27391: PLUS
27392: ST_TO_ADDR
// end ;
27393: END
// every 21 21$0 trigger attackAvalaible = 1 do
27394: LD_EXP 62
27398: PUSH
27399: LD_INT 1
27401: EQUAL
27402: IFFALSE 27415
27404: GO 27406
27406: DISABLE
// attackAvalaible = 0 ; end_of_file
27407: LD_ADDR_EXP 62
27411: PUSH
27412: LD_INT 0
27414: ST_TO_ADDR
27415: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27416: LD_INT 54
27418: PPUSH
27419: LD_INT 1
27421: PPUSH
27422: CALL_OW 321
27426: PUSH
27427: LD_INT 2
27429: EQUAL
27430: PUSH
27431: LD_INT 55
27433: PPUSH
27434: LD_INT 1
27436: PPUSH
27437: CALL_OW 321
27441: PUSH
27442: LD_INT 2
27444: EQUAL
27445: AND
27446: PUSH
27447: LD_INT 21
27449: PPUSH
27450: LD_INT 1
27452: PPUSH
27453: CALL_OW 321
27457: PUSH
27458: LD_INT 2
27460: EQUAL
27461: AND
27462: PUSH
27463: LD_INT 22
27465: PPUSH
27466: LD_INT 1
27468: PPUSH
27469: CALL_OW 321
27473: PUSH
27474: LD_INT 2
27476: EQUAL
27477: AND
27478: PUSH
27479: LD_INT 12
27481: PPUSH
27482: LD_INT 1
27484: PPUSH
27485: CALL_OW 321
27489: PUSH
27490: LD_INT 1
27492: EQUAL
27493: PUSH
27494: LD_INT 32
27496: PPUSH
27497: LD_INT 1
27499: PPUSH
27500: CALL_OW 321
27504: PUSH
27505: LD_INT 1
27507: EQUAL
27508: OR
27509: PUSH
27510: EMPTY
27511: LIST
27512: AND
27513: PUSH
27514: LD_EXP 48
27518: PUSH
27519: LD_INT 1
27521: EQUAL
27522: AND
27523: PUSH
27524: LD_INT 22
27526: PUSH
27527: LD_INT 3
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 21
27536: PUSH
27537: LD_INT 1
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PPUSH
27548: CALL_OW 69
27552: PUSH
27553: LD_INT 0
27555: EQUAL
27556: AND
27557: IFFALSE 27613
27559: GO 27561
27561: DISABLE
// begin case query ( QEndMission ) of 1 :
27562: LD_STRING QEndMission
27564: PPUSH
27565: CALL_OW 97
27569: PUSH
27570: LD_INT 1
27572: DOUBLE
27573: EQUAL
27574: IFTRUE 27578
27576: GO 27589
27578: POP
// begin end_the_mission_allowed = true ;
27579: LD_ADDR_OWVAR 57
27583: PUSH
27584: LD_INT 1
27586: ST_TO_ADDR
// end ; 2 :
27587: GO 27613
27589: LD_INT 2
27591: DOUBLE
27592: EQUAL
27593: IFTRUE 27597
27595: GO 27612
27597: POP
// begin fastEnd = 1 ;
27598: LD_ADDR_EXP 61
27602: PUSH
27603: LD_INT 1
27605: ST_TO_ADDR
// FinishMission ;
27606: CALL 27614 0 0
// end ; end ;
27610: GO 27613
27612: POP
// end ;
27613: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27614: LD_INT 0
27616: PPUSH
27617: PPUSH
27618: PPUSH
27619: PPUSH
// if not snipersTrained then
27620: LD_EXP 60
27624: NOT
27625: IFFALSE 27634
// SetAchievement ( ACH_SNIPER ) ;
27627: LD_STRING ACH_SNIPER
27629: PPUSH
27630: CALL_OW 543
// m1 := false ;
27634: LD_ADDR_VAR 0 2
27638: PUSH
27639: LD_INT 0
27641: ST_TO_ADDR
// m2 := false ;
27642: LD_ADDR_VAR 0 3
27646: PUSH
27647: LD_INT 0
27649: ST_TO_ADDR
// m3 := false ;
27650: LD_ADDR_VAR 0 4
27654: PUSH
27655: LD_INT 0
27657: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27658: LD_EXP 53
27662: PPUSH
27663: LD_STRING 10_KhatamStatus_1
27665: PPUSH
27666: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27670: LD_EXP 52
27674: PPUSH
27675: LD_STRING 10_GensherEscape_1
27677: PPUSH
27678: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27682: LD_INT 12
27684: PPUSH
27685: LD_INT 1
27687: PPUSH
27688: CALL_OW 321
27692: PUSH
27693: LD_INT 2
27695: EQUAL
27696: IFFALSE 27718
// begin AddMedal ( sights , 1 ) ;
27698: LD_STRING sights
27700: PPUSH
27701: LD_INT 1
27703: PPUSH
27704: CALL_OW 101
// m1 := true ;
27708: LD_ADDR_VAR 0 2
27712: PUSH
27713: LD_INT 1
27715: ST_TO_ADDR
// end else
27716: GO 27729
// begin AddMedal ( sights , - 1 ) ;
27718: LD_STRING sights
27720: PPUSH
27721: LD_INT 1
27723: NEG
27724: PPUSH
27725: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
27729: LD_INT 32
27731: PPUSH
27732: LD_INT 1
27734: PPUSH
27735: CALL_OW 321
27739: PUSH
27740: LD_INT 2
27742: EQUAL
27743: IFFALSE 27765
// begin AddMedal ( computers , 1 ) ;
27745: LD_STRING computers
27747: PPUSH
27748: LD_INT 1
27750: PPUSH
27751: CALL_OW 101
// m2 := true ;
27755: LD_ADDR_VAR 0 3
27759: PUSH
27760: LD_INT 1
27762: ST_TO_ADDR
// end else
27763: GO 27776
// begin AddMedal ( computers , - 1 ) ;
27765: LD_STRING computers
27767: PPUSH
27768: LD_INT 1
27770: NEG
27771: PPUSH
27772: CALL_OW 101
// end ; if arabianEscape = 0 then
27776: LD_EXP 47
27780: PUSH
27781: LD_INT 0
27783: EQUAL
27784: IFFALSE 27816
// begin AddMedal ( renegades , 2 ) ;
27786: LD_STRING renegades
27788: PPUSH
27789: LD_INT 2
27791: PPUSH
27792: CALL_OW 101
// m3 := true ;
27796: LD_ADDR_VAR 0 4
27800: PUSH
27801: LD_INT 1
27803: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
27804: LD_INT 0
27806: PPUSH
27807: LD_STRING 10_ScientistsEscape_1
27809: PPUSH
27810: CALL_OW 39
// end else
27814: GO 27827
// begin AddMedal ( renegades , - 1 ) ;
27816: LD_STRING renegades
27818: PPUSH
27819: LD_INT 1
27821: NEG
27822: PPUSH
27823: CALL_OW 101
// end ; SaveEpsilonBase ;
27827: CALL 28613 0 0
// if m1 and m2 and m3 and Difficulty = 3 then
27831: LD_VAR 0 2
27835: PUSH
27836: LD_VAR 0 3
27840: AND
27841: PUSH
27842: LD_VAR 0 4
27846: AND
27847: PUSH
27848: LD_OWVAR 67
27852: PUSH
27853: LD_INT 3
27855: EQUAL
27856: AND
27857: IFFALSE 27869
// SetAchievementEX ( ACH_AMER , 10 ) ;
27859: LD_STRING ACH_AMER
27861: PPUSH
27862: LD_INT 10
27864: PPUSH
27865: CALL_OW 564
// if tick <= 40 40$00 then
27869: LD_OWVAR 1
27873: PUSH
27874: LD_INT 84000
27876: LESSEQUAL
27877: IFFALSE 27893
// begin wait ( 3 ) ;
27879: LD_INT 3
27881: PPUSH
27882: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
27886: LD_STRING ACH_ASPEED_10
27888: PPUSH
27889: CALL_OW 543
// end ; GiveMedals ( Main ) ;
27893: LD_STRING Main
27895: PPUSH
27896: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
27900: LD_INT 22
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 23
27912: PUSH
27913: LD_INT 1
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: LD_INT 21
27922: PUSH
27923: LD_INT 1
27925: PUSH
27926: EMPTY
27927: LIST
27928: LIST
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: LD_INT 25
27935: PUSH
27936: LD_INT 1
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: LD_INT 25
27945: PUSH
27946: LD_INT 2
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: PUSH
27953: LD_INT 25
27955: PUSH
27956: LD_INT 3
27958: PUSH
27959: EMPTY
27960: LIST
27961: LIST
27962: PUSH
27963: LD_INT 25
27965: PUSH
27966: LD_INT 4
27968: PUSH
27969: EMPTY
27970: LIST
27971: LIST
27972: PUSH
27973: LD_INT 25
27975: PUSH
27976: LD_INT 5
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 25
27985: PUSH
27986: LD_INT 8
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: EMPTY
27994: LIST
27995: LIST
27996: LIST
27997: LIST
27998: LIST
27999: LIST
28000: LIST
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: LIST
28006: LIST
28007: PPUSH
28008: CALL_OW 69
28012: PPUSH
28013: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28017: LD_EXP 1
28021: PPUSH
28022: LD_EXP 54
28026: PUSH
28027: LD_STRING JMM
28029: STR
28030: PPUSH
28031: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28035: LD_EXP 2
28039: PPUSH
28040: LD_EXP 54
28044: PUSH
28045: LD_STRING Brown
28047: STR
28048: PPUSH
28049: CALL 11154 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28053: LD_EXP 3
28057: PPUSH
28058: LD_EXP 54
28062: PUSH
28063: LD_STRING Donaldson
28065: STR
28066: PPUSH
28067: CALL 11154 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28071: LD_EXP 4
28075: PPUSH
28076: LD_EXP 54
28080: PUSH
28081: LD_STRING Bobby
28083: STR
28084: PPUSH
28085: CALL 11154 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28089: LD_EXP 5
28093: PPUSH
28094: LD_EXP 54
28098: PUSH
28099: LD_STRING Cyrus
28101: STR
28102: PPUSH
28103: CALL 11154 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28107: LD_EXP 6
28111: PPUSH
28112: LD_EXP 54
28116: PUSH
28117: LD_STRING Lisa
28119: STR
28120: PPUSH
28121: CALL 11154 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28125: LD_EXP 7
28129: PPUSH
28130: LD_EXP 54
28134: PUSH
28135: LD_STRING Frank
28137: STR
28138: PPUSH
28139: CALL 11154 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28143: LD_EXP 8
28147: PPUSH
28148: LD_EXP 54
28152: PUSH
28153: LD_STRING Kikuchi
28155: STR
28156: PPUSH
28157: CALL 11154 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28161: LD_EXP 9
28165: PPUSH
28166: LD_EXP 54
28170: PUSH
28171: LD_STRING Houten
28173: STR
28174: PPUSH
28175: CALL 11154 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28179: LD_EXP 10
28183: PPUSH
28184: LD_EXP 54
28188: PUSH
28189: LD_STRING Gary
28191: STR
28192: PPUSH
28193: CALL 11154 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28197: LD_EXP 19
28201: PPUSH
28202: LD_EXP 54
28206: PUSH
28207: LD_STRING Cornell
28209: STR
28210: PPUSH
28211: CALL 11154 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28215: LD_EXP 11
28219: PPUSH
28220: LD_EXP 54
28224: PUSH
28225: LD_STRING Simms
28227: STR
28228: PPUSH
28229: CALL 11154 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28233: LD_EXP 12
28237: PPUSH
28238: LD_EXP 54
28242: PUSH
28243: LD_STRING Denis
28245: STR
28246: PPUSH
28247: CALL 11154 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28251: LD_EXP 13
28255: PPUSH
28256: LD_EXP 54
28260: PUSH
28261: LD_STRING Joan
28263: STR
28264: PPUSH
28265: CALL 11154 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28269: LD_EXP 15
28273: PPUSH
28274: LD_EXP 54
28278: PUSH
28279: LD_STRING Gladstone
28281: STR
28282: PPUSH
28283: CALL 11154 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28287: LD_EXP 17
28291: PPUSH
28292: LD_EXP 54
28296: PUSH
28297: LD_STRING DeltaDoctor
28299: STR
28300: PPUSH
28301: CALL 11154 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28305: LD_EXP 22
28309: PPUSH
28310: LD_STRING 10c_lock
28312: PPUSH
28313: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28317: LD_INT 50
28319: PUSH
28320: EMPTY
28321: LIST
28322: PUSH
28323: LD_INT 22
28325: PUSH
28326: LD_INT 1
28328: PUSH
28329: EMPTY
28330: LIST
28331: LIST
28332: PUSH
28333: LD_INT 21
28335: PUSH
28336: LD_INT 1
28338: PUSH
28339: EMPTY
28340: LIST
28341: LIST
28342: PUSH
28343: LD_INT 2
28345: PUSH
28346: LD_INT 25
28348: PUSH
28349: LD_INT 1
28351: PUSH
28352: EMPTY
28353: LIST
28354: LIST
28355: PUSH
28356: LD_INT 25
28358: PUSH
28359: LD_INT 2
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 25
28368: PUSH
28369: LD_INT 3
28371: PUSH
28372: EMPTY
28373: LIST
28374: LIST
28375: PUSH
28376: LD_INT 25
28378: PUSH
28379: LD_INT 4
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 25
28388: PUSH
28389: LD_INT 5
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 25
28398: PUSH
28399: LD_INT 8
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: LIST
28410: LIST
28411: LIST
28412: LIST
28413: LIST
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: LIST
28419: LIST
28420: PPUSH
28421: CALL_OW 69
28425: PUSH
28426: LD_EXP 1
28430: PUSH
28431: LD_EXP 2
28435: PUSH
28436: LD_EXP 3
28440: PUSH
28441: LD_EXP 4
28445: PUSH
28446: LD_EXP 5
28450: PUSH
28451: LD_EXP 6
28455: PUSH
28456: LD_EXP 7
28460: PUSH
28461: LD_EXP 15
28465: PUSH
28466: LD_EXP 8
28470: PUSH
28471: LD_EXP 12
28475: PUSH
28476: LD_EXP 13
28480: PUSH
28481: LD_EXP 9
28485: PUSH
28486: LD_EXP 11
28490: PUSH
28491: LD_EXP 10
28495: PUSH
28496: LD_EXP 17
28500: PUSH
28501: LD_EXP 19
28505: PUSH
28506: EMPTY
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: LIST
28521: LIST
28522: LIST
28523: DIFF
28524: PPUSH
28525: LD_STRING 10_other_survivors
28527: PPUSH
28528: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28532: LD_INT 50
28534: PUSH
28535: EMPTY
28536: LIST
28537: PUSH
28538: LD_INT 22
28540: PUSH
28541: LD_INT 1
28543: PUSH
28544: EMPTY
28545: LIST
28546: LIST
28547: PUSH
28548: LD_INT 21
28550: PUSH
28551: LD_INT 1
28553: PUSH
28554: EMPTY
28555: LIST
28556: LIST
28557: PUSH
28558: LD_INT 2
28560: PUSH
28561: LD_INT 25
28563: PUSH
28564: LD_INT 16
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 25
28573: PUSH
28574: LD_INT 12
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: EMPTY
28582: LIST
28583: LIST
28584: LIST
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: PPUSH
28592: CALL_OW 69
28596: PPUSH
28597: LD_STRING 10_ape
28599: PPUSH
28600: CALL_OW 38
// YouWin ;
28604: CALL_OW 103
// end ;
28608: LD_VAR 0 1
28612: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28613: LD_INT 0
28615: PPUSH
28616: PPUSH
28617: PPUSH
28618: PPUSH
// epsilonBase = [ ] ;
28619: LD_ADDR_VAR 0 2
28623: PUSH
28624: EMPTY
28625: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28626: LD_ADDR_VAR 0 3
28630: PUSH
28631: LD_INT 22
28633: PUSH
28634: LD_INT 1
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 23
28643: PUSH
28644: LD_INT 1
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: LD_INT 21
28653: PUSH
28654: LD_INT 3
28656: PUSH
28657: EMPTY
28658: LIST
28659: LIST
28660: PUSH
28661: LD_INT 50
28663: PUSH
28664: EMPTY
28665: LIST
28666: PUSH
28667: EMPTY
28668: LIST
28669: LIST
28670: LIST
28671: LIST
28672: PPUSH
28673: CALL_OW 69
28677: ST_TO_ADDR
// for i in buildings do
28678: LD_ADDR_VAR 0 4
28682: PUSH
28683: LD_VAR 0 3
28687: PUSH
28688: FOR_IN
28689: IFFALSE 29141
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28691: LD_VAR 0 4
28695: PPUSH
28696: CALL_OW 266
28700: PUSH
28701: LD_INT 6
28703: PUSH
28704: LD_INT 7
28706: PUSH
28707: LD_INT 8
28709: PUSH
28710: EMPTY
28711: LIST
28712: LIST
28713: LIST
28714: IN
28715: IFFALSE 28829
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
28717: LD_ADDR_VAR 0 2
28721: PUSH
28722: LD_VAR 0 2
28726: PUSH
28727: LD_VAR 0 4
28731: PPUSH
28732: CALL_OW 266
28736: PUSH
28737: LD_VAR 0 4
28741: PPUSH
28742: CALL_OW 250
28746: PUSH
28747: LD_VAR 0 4
28751: PPUSH
28752: CALL_OW 251
28756: PUSH
28757: LD_VAR 0 4
28761: PPUSH
28762: CALL_OW 254
28766: PUSH
28767: LD_VAR 0 4
28771: PPUSH
28772: CALL_OW 267
28776: PUSH
28777: LD_VAR 0 4
28781: PPUSH
28782: CALL_OW 248
28786: PUSH
28787: LD_VAR 0 4
28791: PPUSH
28792: LD_INT 1
28794: PPUSH
28795: CALL_OW 268
28799: PUSH
28800: LD_VAR 0 4
28804: PPUSH
28805: LD_INT 2
28807: PPUSH
28808: CALL_OW 268
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: LIST
28818: LIST
28819: LIST
28820: LIST
28821: LIST
28822: PUSH
28823: EMPTY
28824: LIST
28825: ADD
28826: ST_TO_ADDR
28827: GO 29139
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
28829: LD_VAR 0 4
28833: PPUSH
28834: CALL_OW 266
28838: PUSH
28839: LD_INT 32
28841: EQUAL
28842: PUSH
28843: LD_VAR 0 4
28847: PPUSH
28848: CALL_OW 266
28852: PUSH
28853: LD_INT 33
28855: EQUAL
28856: OR
28857: IFFALSE 28954
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
28859: LD_ADDR_VAR 0 2
28863: PUSH
28864: LD_VAR 0 2
28868: PUSH
28869: LD_VAR 0 4
28873: PPUSH
28874: CALL_OW 266
28878: PUSH
28879: LD_VAR 0 4
28883: PPUSH
28884: CALL_OW 250
28888: PUSH
28889: LD_VAR 0 4
28893: PPUSH
28894: CALL_OW 251
28898: PUSH
28899: LD_VAR 0 4
28903: PPUSH
28904: CALL_OW 254
28908: PUSH
28909: LD_VAR 0 4
28913: PPUSH
28914: CALL_OW 267
28918: PUSH
28919: LD_VAR 0 4
28923: PPUSH
28924: CALL_OW 248
28928: PUSH
28929: LD_VAR 0 4
28933: PPUSH
28934: CALL_OW 269
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: LIST
28943: LIST
28944: LIST
28945: LIST
28946: LIST
28947: PUSH
28948: EMPTY
28949: LIST
28950: ADD
28951: ST_TO_ADDR
28952: GO 29139
// if GetBType ( i ) = b_factory then
28954: LD_VAR 0 4
28958: PPUSH
28959: CALL_OW 266
28963: PUSH
28964: LD_INT 3
28966: EQUAL
28967: IFFALSE 29057
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
28969: LD_ADDR_VAR 0 2
28973: PUSH
28974: LD_VAR 0 2
28978: PPUSH
28979: LD_INT 1
28981: PPUSH
28982: LD_VAR 0 4
28986: PPUSH
28987: CALL_OW 266
28991: PUSH
28992: LD_VAR 0 4
28996: PPUSH
28997: CALL_OW 250
29001: PUSH
29002: LD_VAR 0 4
29006: PPUSH
29007: CALL_OW 251
29011: PUSH
29012: LD_VAR 0 4
29016: PPUSH
29017: CALL_OW 254
29021: PUSH
29022: LD_VAR 0 4
29026: PPUSH
29027: CALL_OW 267
29031: PUSH
29032: LD_VAR 0 4
29036: PPUSH
29037: CALL_OW 248
29041: PUSH
29042: EMPTY
29043: LIST
29044: LIST
29045: LIST
29046: LIST
29047: LIST
29048: LIST
29049: PPUSH
29050: CALL_OW 2
29054: ST_TO_ADDR
29055: GO 29139
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29057: LD_ADDR_VAR 0 2
29061: PUSH
29062: LD_VAR 0 2
29066: PUSH
29067: LD_VAR 0 4
29071: PPUSH
29072: CALL_OW 266
29076: PUSH
29077: LD_VAR 0 4
29081: PPUSH
29082: CALL_OW 250
29086: PUSH
29087: LD_VAR 0 4
29091: PPUSH
29092: CALL_OW 251
29096: PUSH
29097: LD_VAR 0 4
29101: PPUSH
29102: CALL_OW 254
29106: PUSH
29107: LD_VAR 0 4
29111: PPUSH
29112: CALL_OW 267
29116: PUSH
29117: LD_VAR 0 4
29121: PPUSH
29122: CALL_OW 248
29126: PUSH
29127: EMPTY
29128: LIST
29129: LIST
29130: LIST
29131: LIST
29132: LIST
29133: LIST
29134: PUSH
29135: EMPTY
29136: LIST
29137: ADD
29138: ST_TO_ADDR
// end ;
29139: GO 28688
29141: POP
29142: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29143: LD_VAR 0 2
29147: PPUSH
29148: LD_STRING 10_EpsilonBase
29150: PPUSH
29151: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29155: LD_INT 19
29157: PPUSH
29158: LD_STRING 10_EpsilonEnv
29160: PPUSH
29161: CALL 29170 0 2
// end ;
29165: LD_VAR 0 1
29169: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29170: LD_INT 0
29172: PPUSH
// result := ListEnvironmentArea ( area ) ;
29173: LD_ADDR_VAR 0 3
29177: PUSH
29178: LD_VAR 0 1
29182: PPUSH
29183: CALL_OW 353
29187: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29188: LD_VAR 0 3
29192: PPUSH
29193: LD_VAR 0 2
29197: PPUSH
29198: CALL_OW 39
// end ; end_of_file
29202: LD_VAR 0 3
29206: RET
// every 0 0$01 do var timer ;
29207: GO 29209
29209: DISABLE
29210: LD_INT 0
29212: PPUSH
// begin timer := 0 0$30 ;
29213: LD_ADDR_VAR 0 1
29217: PUSH
29218: LD_INT 1050
29220: ST_TO_ADDR
// repeat wait ( timer ) ;
29221: LD_VAR 0 1
29225: PPUSH
29226: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
29230: LD_EXP 56
29234: PUSH
29235: LD_INT 6
29237: GREATEREQUAL
29238: PUSH
29239: LD_EXP 56
29243: PUSH
29244: LD_INT 12
29246: LESS
29247: AND
29248: IFFALSE 29264
// timer := timer + 0 0$3 ;
29250: LD_ADDR_VAR 0 1
29254: PUSH
29255: LD_VAR 0 1
29259: PUSH
29260: LD_INT 105
29262: PLUS
29263: ST_TO_ADDR
// if cratesSpawned >= 12 then
29264: LD_EXP 56
29268: PUSH
29269: LD_INT 12
29271: GREATEREQUAL
29272: IFFALSE 29288
// timer := timer + 0 0$9 ;
29274: LD_ADDR_VAR 0 1
29278: PUSH
29279: LD_VAR 0 1
29283: PUSH
29284: LD_INT 315
29286: PLUS
29287: ST_TO_ADDR
// if timer > 3 3$00 then
29288: LD_VAR 0 1
29292: PUSH
29293: LD_INT 6300
29295: GREATER
29296: IFFALSE 29306
// timer := 0 0$50 ;
29298: LD_ADDR_VAR 0 1
29302: PUSH
29303: LD_INT 1750
29305: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29306: LD_INT 1
29308: PPUSH
29309: LD_INT 5
29311: PPUSH
29312: CALL_OW 12
29316: PPUSH
29317: LD_INT 16
29319: PPUSH
29320: LD_INT 1
29322: PPUSH
29323: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29327: LD_ADDR_EXP 56
29331: PUSH
29332: LD_EXP 56
29336: PUSH
29337: LD_INT 1
29339: PLUS
29340: ST_TO_ADDR
// until false ;
29341: LD_INT 0
29343: IFFALSE 29221
// end ; end_of_file
29345: PPOPN 1
29347: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
29348: GO 29350
29350: DISABLE
// begin ru_radar := 98 ;
29351: LD_ADDR_EXP 67
29355: PUSH
29356: LD_INT 98
29358: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29359: LD_ADDR_EXP 68
29363: PUSH
29364: LD_INT 89
29366: ST_TO_ADDR
// us_hack := 99 ;
29367: LD_ADDR_EXP 69
29371: PUSH
29372: LD_INT 99
29374: ST_TO_ADDR
// us_artillery := 97 ;
29375: LD_ADDR_EXP 70
29379: PUSH
29380: LD_INT 97
29382: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29383: LD_ADDR_EXP 71
29387: PUSH
29388: LD_INT 91
29390: ST_TO_ADDR
// end ; end_of_file end_of_file
29391: END
// export StreamModeActive , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu ; every 0 0$1 do
29392: GO 29394
29394: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
29395: LD_STRING initStreamRollete();
29397: PPUSH
29398: CALL_OW 559
// InitStreamMode ;
29402: CALL 29407 0 0
// end ;
29406: END
// function InitStreamMode ; begin
29407: LD_INT 0
29409: PPUSH
// streamModeActive := false ;
29410: LD_ADDR_EXP 72
29414: PUSH
29415: LD_INT 0
29417: ST_TO_ADDR
// sRocket := false ;
29418: LD_ADDR_EXP 75
29422: PUSH
29423: LD_INT 0
29425: ST_TO_ADDR
// sSpeed := false ;
29426: LD_ADDR_EXP 74
29430: PUSH
29431: LD_INT 0
29433: ST_TO_ADDR
// sEngine := false ;
29434: LD_ADDR_EXP 76
29438: PUSH
29439: LD_INT 0
29441: ST_TO_ADDR
// sSpec := false ;
29442: LD_ADDR_EXP 73
29446: PUSH
29447: LD_INT 0
29449: ST_TO_ADDR
// sLevel := false ;
29450: LD_ADDR_EXP 77
29454: PUSH
29455: LD_INT 0
29457: ST_TO_ADDR
// sArmoury := false ;
29458: LD_ADDR_EXP 78
29462: PUSH
29463: LD_INT 0
29465: ST_TO_ADDR
// sRadar := false ;
29466: LD_ADDR_EXP 79
29470: PUSH
29471: LD_INT 0
29473: ST_TO_ADDR
// sBunker := false ;
29474: LD_ADDR_EXP 80
29478: PUSH
29479: LD_INT 0
29481: ST_TO_ADDR
// sHack := false ;
29482: LD_ADDR_EXP 81
29486: PUSH
29487: LD_INT 0
29489: ST_TO_ADDR
// sFire := false ;
29490: LD_ADDR_EXP 82
29494: PUSH
29495: LD_INT 0
29497: ST_TO_ADDR
// sRefresh := false ;
29498: LD_ADDR_EXP 83
29502: PUSH
29503: LD_INT 0
29505: ST_TO_ADDR
// sExp := false ;
29506: LD_ADDR_EXP 84
29510: PUSH
29511: LD_INT 0
29513: ST_TO_ADDR
// sDepot := false ;
29514: LD_ADDR_EXP 85
29518: PUSH
29519: LD_INT 0
29521: ST_TO_ADDR
// sFlag := false ;
29522: LD_ADDR_EXP 86
29526: PUSH
29527: LD_INT 0
29529: ST_TO_ADDR
// sKamikadze := false ;
29530: LD_ADDR_EXP 94
29534: PUSH
29535: LD_INT 0
29537: ST_TO_ADDR
// sTroll := false ;
29538: LD_ADDR_EXP 95
29542: PUSH
29543: LD_INT 0
29545: ST_TO_ADDR
// sSlow := false ;
29546: LD_ADDR_EXP 96
29550: PUSH
29551: LD_INT 0
29553: ST_TO_ADDR
// sLack := false ;
29554: LD_ADDR_EXP 97
29558: PUSH
29559: LD_INT 0
29561: ST_TO_ADDR
// sTank := false ;
29562: LD_ADDR_EXP 99
29566: PUSH
29567: LD_INT 0
29569: ST_TO_ADDR
// sRemote := false ;
29570: LD_ADDR_EXP 100
29574: PUSH
29575: LD_INT 0
29577: ST_TO_ADDR
// sPowell := false ;
29578: LD_ADDR_EXP 101
29582: PUSH
29583: LD_INT 0
29585: ST_TO_ADDR
// sTeleport := false ;
29586: LD_ADDR_EXP 104
29590: PUSH
29591: LD_INT 0
29593: ST_TO_ADDR
// sOilTower := false ;
29594: LD_ADDR_EXP 106
29598: PUSH
29599: LD_INT 0
29601: ST_TO_ADDR
// sShovel := false ;
29602: LD_ADDR_EXP 107
29606: PUSH
29607: LD_INT 0
29609: ST_TO_ADDR
// sSheik := false ;
29610: LD_ADDR_EXP 108
29614: PUSH
29615: LD_INT 0
29617: ST_TO_ADDR
// sSold := false ;
29618: LD_ADDR_EXP 87
29622: PUSH
29623: LD_INT 0
29625: ST_TO_ADDR
// sDiff := false ;
29626: LD_ADDR_EXP 88
29630: PUSH
29631: LD_INT 0
29633: ST_TO_ADDR
// sFog := false ;
29634: LD_ADDR_EXP 91
29638: PUSH
29639: LD_INT 0
29641: ST_TO_ADDR
// sReset := false ;
29642: LD_ADDR_EXP 92
29646: PUSH
29647: LD_INT 0
29649: ST_TO_ADDR
// sSun := false ;
29650: LD_ADDR_EXP 93
29654: PUSH
29655: LD_INT 0
29657: ST_TO_ADDR
// sTiger := false ;
29658: LD_ADDR_EXP 89
29662: PUSH
29663: LD_INT 0
29665: ST_TO_ADDR
// sBomb := false ;
29666: LD_ADDR_EXP 90
29670: PUSH
29671: LD_INT 0
29673: ST_TO_ADDR
// sWound := false ;
29674: LD_ADDR_EXP 98
29678: PUSH
29679: LD_INT 0
29681: ST_TO_ADDR
// sBetray := false ;
29682: LD_ADDR_EXP 102
29686: PUSH
29687: LD_INT 0
29689: ST_TO_ADDR
// sContamin := false ;
29690: LD_ADDR_EXP 103
29694: PUSH
29695: LD_INT 0
29697: ST_TO_ADDR
// sOil := false ;
29698: LD_ADDR_EXP 105
29702: PUSH
29703: LD_INT 0
29705: ST_TO_ADDR
// sStu := false ;
29706: LD_ADDR_EXP 109
29710: PUSH
29711: LD_INT 0
29713: ST_TO_ADDR
// end ;
29714: LD_VAR 0 1
29718: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
29719: LD_VAR 0 2
29723: PUSH
29724: LD_INT 100
29726: EQUAL
29727: IFFALSE 30424
// begin if not StreamModeActive then
29729: LD_EXP 72
29733: NOT
29734: IFFALSE 29744
// StreamModeActive := true ;
29736: LD_ADDR_EXP 72
29740: PUSH
29741: LD_INT 1
29743: ST_TO_ADDR
// if p3 = 0 then
29744: LD_VAR 0 3
29748: PUSH
29749: LD_INT 0
29751: EQUAL
29752: IFFALSE 29758
// InitStreamMode ;
29754: CALL 29407 0 0
// if p3 = 1 then
29758: LD_VAR 0 3
29762: PUSH
29763: LD_INT 1
29765: EQUAL
29766: IFFALSE 29776
// sRocket := true ;
29768: LD_ADDR_EXP 75
29772: PUSH
29773: LD_INT 1
29775: ST_TO_ADDR
// if p3 = 2 then
29776: LD_VAR 0 3
29780: PUSH
29781: LD_INT 2
29783: EQUAL
29784: IFFALSE 29794
// sSpeed := true ;
29786: LD_ADDR_EXP 74
29790: PUSH
29791: LD_INT 1
29793: ST_TO_ADDR
// if p3 = 3 then
29794: LD_VAR 0 3
29798: PUSH
29799: LD_INT 3
29801: EQUAL
29802: IFFALSE 29812
// sEngine := true ;
29804: LD_ADDR_EXP 76
29808: PUSH
29809: LD_INT 1
29811: ST_TO_ADDR
// if p3 = 4 then
29812: LD_VAR 0 3
29816: PUSH
29817: LD_INT 4
29819: EQUAL
29820: IFFALSE 29830
// sSpec := true ;
29822: LD_ADDR_EXP 73
29826: PUSH
29827: LD_INT 1
29829: ST_TO_ADDR
// if p3 = 5 then
29830: LD_VAR 0 3
29834: PUSH
29835: LD_INT 5
29837: EQUAL
29838: IFFALSE 29848
// sLevel := true ;
29840: LD_ADDR_EXP 77
29844: PUSH
29845: LD_INT 1
29847: ST_TO_ADDR
// if p3 = 6 then
29848: LD_VAR 0 3
29852: PUSH
29853: LD_INT 6
29855: EQUAL
29856: IFFALSE 29866
// sArmoury := true ;
29858: LD_ADDR_EXP 78
29862: PUSH
29863: LD_INT 1
29865: ST_TO_ADDR
// if p3 = 7 then
29866: LD_VAR 0 3
29870: PUSH
29871: LD_INT 7
29873: EQUAL
29874: IFFALSE 29884
// sRadar := true ;
29876: LD_ADDR_EXP 79
29880: PUSH
29881: LD_INT 1
29883: ST_TO_ADDR
// if p3 = 8 then
29884: LD_VAR 0 3
29888: PUSH
29889: LD_INT 8
29891: EQUAL
29892: IFFALSE 29902
// sBunker := true ;
29894: LD_ADDR_EXP 80
29898: PUSH
29899: LD_INT 1
29901: ST_TO_ADDR
// if p3 = 9 then
29902: LD_VAR 0 3
29906: PUSH
29907: LD_INT 9
29909: EQUAL
29910: IFFALSE 29920
// sHack := true ;
29912: LD_ADDR_EXP 81
29916: PUSH
29917: LD_INT 1
29919: ST_TO_ADDR
// if p3 = 10 then
29920: LD_VAR 0 3
29924: PUSH
29925: LD_INT 10
29927: EQUAL
29928: IFFALSE 29938
// sFire := true ;
29930: LD_ADDR_EXP 82
29934: PUSH
29935: LD_INT 1
29937: ST_TO_ADDR
// if p3 = 11 then
29938: LD_VAR 0 3
29942: PUSH
29943: LD_INT 11
29945: EQUAL
29946: IFFALSE 29956
// sRefresh := true ;
29948: LD_ADDR_EXP 83
29952: PUSH
29953: LD_INT 1
29955: ST_TO_ADDR
// if p3 = 12 then
29956: LD_VAR 0 3
29960: PUSH
29961: LD_INT 12
29963: EQUAL
29964: IFFALSE 29974
// sExp := true ;
29966: LD_ADDR_EXP 84
29970: PUSH
29971: LD_INT 1
29973: ST_TO_ADDR
// if p3 = 13 then
29974: LD_VAR 0 3
29978: PUSH
29979: LD_INT 13
29981: EQUAL
29982: IFFALSE 29992
// sDepot := true ;
29984: LD_ADDR_EXP 85
29988: PUSH
29989: LD_INT 1
29991: ST_TO_ADDR
// if p3 = 14 then
29992: LD_VAR 0 3
29996: PUSH
29997: LD_INT 14
29999: EQUAL
30000: IFFALSE 30010
// sFlag := true ;
30002: LD_ADDR_EXP 86
30006: PUSH
30007: LD_INT 1
30009: ST_TO_ADDR
// if p3 = 15 then
30010: LD_VAR 0 3
30014: PUSH
30015: LD_INT 15
30017: EQUAL
30018: IFFALSE 30028
// sKamikadze := true ;
30020: LD_ADDR_EXP 94
30024: PUSH
30025: LD_INT 1
30027: ST_TO_ADDR
// if p3 = 16 then
30028: LD_VAR 0 3
30032: PUSH
30033: LD_INT 16
30035: EQUAL
30036: IFFALSE 30046
// sTroll := true ;
30038: LD_ADDR_EXP 95
30042: PUSH
30043: LD_INT 1
30045: ST_TO_ADDR
// if p3 = 17 then
30046: LD_VAR 0 3
30050: PUSH
30051: LD_INT 17
30053: EQUAL
30054: IFFALSE 30064
// sSlow := true ;
30056: LD_ADDR_EXP 96
30060: PUSH
30061: LD_INT 1
30063: ST_TO_ADDR
// if p3 = 18 then
30064: LD_VAR 0 3
30068: PUSH
30069: LD_INT 18
30071: EQUAL
30072: IFFALSE 30082
// sLack := true ;
30074: LD_ADDR_EXP 97
30078: PUSH
30079: LD_INT 1
30081: ST_TO_ADDR
// if p3 = 19 then
30082: LD_VAR 0 3
30086: PUSH
30087: LD_INT 19
30089: EQUAL
30090: IFFALSE 30100
// sTank := true ;
30092: LD_ADDR_EXP 99
30096: PUSH
30097: LD_INT 1
30099: ST_TO_ADDR
// if p3 = 20 then
30100: LD_VAR 0 3
30104: PUSH
30105: LD_INT 20
30107: EQUAL
30108: IFFALSE 30118
// sRemote := true ;
30110: LD_ADDR_EXP 100
30114: PUSH
30115: LD_INT 1
30117: ST_TO_ADDR
// if p3 = 21 then
30118: LD_VAR 0 3
30122: PUSH
30123: LD_INT 21
30125: EQUAL
30126: IFFALSE 30136
// sPowell := true ;
30128: LD_ADDR_EXP 101
30132: PUSH
30133: LD_INT 1
30135: ST_TO_ADDR
// if p3 = 22 then
30136: LD_VAR 0 3
30140: PUSH
30141: LD_INT 22
30143: EQUAL
30144: IFFALSE 30154
// sTeleport := true ;
30146: LD_ADDR_EXP 104
30150: PUSH
30151: LD_INT 1
30153: ST_TO_ADDR
// if p3 = 23 then
30154: LD_VAR 0 3
30158: PUSH
30159: LD_INT 23
30161: EQUAL
30162: IFFALSE 30172
// sOilTower := true ;
30164: LD_ADDR_EXP 106
30168: PUSH
30169: LD_INT 1
30171: ST_TO_ADDR
// if p3 = 24 then
30172: LD_VAR 0 3
30176: PUSH
30177: LD_INT 24
30179: EQUAL
30180: IFFALSE 30190
// sShovel := true ;
30182: LD_ADDR_EXP 107
30186: PUSH
30187: LD_INT 1
30189: ST_TO_ADDR
// if p3 = 25 then
30190: LD_VAR 0 3
30194: PUSH
30195: LD_INT 25
30197: EQUAL
30198: IFFALSE 30208
// sSheik := true ;
30200: LD_ADDR_EXP 108
30204: PUSH
30205: LD_INT 1
30207: ST_TO_ADDR
// if p3 = 101 then
30208: LD_VAR 0 3
30212: PUSH
30213: LD_INT 101
30215: EQUAL
30216: IFFALSE 30226
// sSold := true ;
30218: LD_ADDR_EXP 87
30222: PUSH
30223: LD_INT 1
30225: ST_TO_ADDR
// if p3 = 102 then
30226: LD_VAR 0 3
30230: PUSH
30231: LD_INT 102
30233: EQUAL
30234: IFFALSE 30244
// sDiff := true ;
30236: LD_ADDR_EXP 88
30240: PUSH
30241: LD_INT 1
30243: ST_TO_ADDR
// if p3 = 103 then
30244: LD_VAR 0 3
30248: PUSH
30249: LD_INT 103
30251: EQUAL
30252: IFFALSE 30262
// sFog := true ;
30254: LD_ADDR_EXP 91
30258: PUSH
30259: LD_INT 1
30261: ST_TO_ADDR
// if p3 = 104 then
30262: LD_VAR 0 3
30266: PUSH
30267: LD_INT 104
30269: EQUAL
30270: IFFALSE 30280
// sReset := true ;
30272: LD_ADDR_EXP 92
30276: PUSH
30277: LD_INT 1
30279: ST_TO_ADDR
// if p3 = 105 then
30280: LD_VAR 0 3
30284: PUSH
30285: LD_INT 105
30287: EQUAL
30288: IFFALSE 30298
// sSun := true ;
30290: LD_ADDR_EXP 93
30294: PUSH
30295: LD_INT 1
30297: ST_TO_ADDR
// if p3 = 106 then
30298: LD_VAR 0 3
30302: PUSH
30303: LD_INT 106
30305: EQUAL
30306: IFFALSE 30316
// sTiger := true ;
30308: LD_ADDR_EXP 89
30312: PUSH
30313: LD_INT 1
30315: ST_TO_ADDR
// if p3 = 107 then
30316: LD_VAR 0 3
30320: PUSH
30321: LD_INT 107
30323: EQUAL
30324: IFFALSE 30334
// sBomb := true ;
30326: LD_ADDR_EXP 90
30330: PUSH
30331: LD_INT 1
30333: ST_TO_ADDR
// if p3 = 108 then
30334: LD_VAR 0 3
30338: PUSH
30339: LD_INT 108
30341: EQUAL
30342: IFFALSE 30352
// sWound := true ;
30344: LD_ADDR_EXP 98
30348: PUSH
30349: LD_INT 1
30351: ST_TO_ADDR
// if p3 = 109 then
30352: LD_VAR 0 3
30356: PUSH
30357: LD_INT 109
30359: EQUAL
30360: IFFALSE 30370
// sBetray := true ;
30362: LD_ADDR_EXP 102
30366: PUSH
30367: LD_INT 1
30369: ST_TO_ADDR
// if p3 = 110 then
30370: LD_VAR 0 3
30374: PUSH
30375: LD_INT 110
30377: EQUAL
30378: IFFALSE 30388
// sContamin := true ;
30380: LD_ADDR_EXP 103
30384: PUSH
30385: LD_INT 1
30387: ST_TO_ADDR
// if p3 = 111 then
30388: LD_VAR 0 3
30392: PUSH
30393: LD_INT 111
30395: EQUAL
30396: IFFALSE 30406
// sOil := true ;
30398: LD_ADDR_EXP 105
30402: PUSH
30403: LD_INT 1
30405: ST_TO_ADDR
// if p3 = 112 then
30406: LD_VAR 0 3
30410: PUSH
30411: LD_INT 112
30413: EQUAL
30414: IFFALSE 30424
// sStu := true ;
30416: LD_ADDR_EXP 109
30420: PUSH
30421: LD_INT 1
30423: ST_TO_ADDR
// end ; end ;
30424: PPOPN 6
30426: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
30427: LD_EXP 72
30431: PUSH
30432: LD_EXP 75
30436: AND
30437: IFFALSE 30561
30439: GO 30441
30441: DISABLE
30442: LD_INT 0
30444: PPUSH
30445: PPUSH
// begin enable ;
30446: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
30447: LD_ADDR_VAR 0 2
30451: PUSH
30452: LD_INT 22
30454: PUSH
30455: LD_OWVAR 2
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: LD_INT 2
30466: PUSH
30467: LD_INT 34
30469: PUSH
30470: LD_INT 7
30472: PUSH
30473: EMPTY
30474: LIST
30475: LIST
30476: PUSH
30477: LD_INT 34
30479: PUSH
30480: LD_INT 45
30482: PUSH
30483: EMPTY
30484: LIST
30485: LIST
30486: PUSH
30487: LD_INT 34
30489: PUSH
30490: LD_INT 28
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 34
30499: PUSH
30500: LD_INT 47
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: PUSH
30507: EMPTY
30508: LIST
30509: LIST
30510: LIST
30511: LIST
30512: LIST
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PPUSH
30518: CALL_OW 69
30522: ST_TO_ADDR
// if not tmp then
30523: LD_VAR 0 2
30527: NOT
30528: IFFALSE 30532
// exit ;
30530: GO 30561
// for i in tmp do
30532: LD_ADDR_VAR 0 1
30536: PUSH
30537: LD_VAR 0 2
30541: PUSH
30542: FOR_IN
30543: IFFALSE 30559
// begin SetLives ( i , 0 ) ;
30545: LD_VAR 0 1
30549: PPUSH
30550: LD_INT 0
30552: PPUSH
30553: CALL_OW 234
// end ;
30557: GO 30542
30559: POP
30560: POP
// end ;
30561: PPOPN 2
30563: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
30564: LD_EXP 72
30568: PUSH
30569: LD_EXP 76
30573: AND
30574: IFFALSE 30655
30576: GO 30578
30578: DISABLE
30579: LD_INT 0
30581: PPUSH
30582: PPUSH
// begin enable ;
30583: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
30584: LD_ADDR_VAR 0 2
30588: PUSH
30589: LD_INT 22
30591: PUSH
30592: LD_OWVAR 2
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 32
30603: PUSH
30604: LD_INT 3
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: EMPTY
30612: LIST
30613: LIST
30614: PPUSH
30615: CALL_OW 69
30619: ST_TO_ADDR
// if not tmp then
30620: LD_VAR 0 2
30624: NOT
30625: IFFALSE 30629
// exit ;
30627: GO 30655
// for i in tmp do
30629: LD_ADDR_VAR 0 1
30633: PUSH
30634: LD_VAR 0 2
30638: PUSH
30639: FOR_IN
30640: IFFALSE 30653
// begin DestroyUnit ( i ) ;
30642: LD_VAR 0 1
30646: PPUSH
30647: CALL_OW 65
// end ;
30651: GO 30639
30653: POP
30654: POP
// end ;
30655: PPOPN 2
30657: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
30658: LD_EXP 72
30662: PUSH
30663: LD_EXP 73
30667: AND
30668: IFFALSE 30761
30670: GO 30672
30672: DISABLE
30673: LD_INT 0
30675: PPUSH
// begin enable ;
30676: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
30677: LD_ADDR_VAR 0 1
30681: PUSH
30682: LD_INT 22
30684: PUSH
30685: LD_OWVAR 2
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 2
30696: PUSH
30697: LD_INT 25
30699: PUSH
30700: LD_INT 5
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: PUSH
30707: LD_INT 25
30709: PUSH
30710: LD_INT 9
30712: PUSH
30713: EMPTY
30714: LIST
30715: LIST
30716: PUSH
30717: LD_INT 25
30719: PUSH
30720: LD_INT 8
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: LIST
30731: LIST
30732: PUSH
30733: EMPTY
30734: LIST
30735: LIST
30736: PPUSH
30737: CALL_OW 69
30741: PUSH
30742: FOR_IN
30743: IFFALSE 30759
// begin SetClass ( i , 1 ) ;
30745: LD_VAR 0 1
30749: PPUSH
30750: LD_INT 1
30752: PPUSH
30753: CALL_OW 336
// end ;
30757: GO 30742
30759: POP
30760: POP
// end ;
30761: PPOPN 1
30763: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
30764: LD_EXP 72
30768: PUSH
30769: LD_EXP 74
30773: AND
30774: PUSH
30775: LD_OWVAR 65
30779: PUSH
30780: LD_INT 7
30782: LESS
30783: AND
30784: IFFALSE 30798
30786: GO 30788
30788: DISABLE
// begin enable ;
30789: ENABLE
// game_speed := 7 ;
30790: LD_ADDR_OWVAR 65
30794: PUSH
30795: LD_INT 7
30797: ST_TO_ADDR
// end ;
30798: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
30799: LD_EXP 72
30803: PUSH
30804: LD_EXP 77
30808: AND
30809: IFFALSE 31011
30811: GO 30813
30813: DISABLE
30814: LD_INT 0
30816: PPUSH
30817: PPUSH
30818: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
30819: LD_ADDR_VAR 0 3
30823: PUSH
30824: LD_INT 81
30826: PUSH
30827: LD_OWVAR 2
30831: PUSH
30832: EMPTY
30833: LIST
30834: LIST
30835: PUSH
30836: LD_INT 21
30838: PUSH
30839: LD_INT 1
30841: PUSH
30842: EMPTY
30843: LIST
30844: LIST
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PPUSH
30850: CALL_OW 69
30854: ST_TO_ADDR
// if not tmp then
30855: LD_VAR 0 3
30859: NOT
30860: IFFALSE 30864
// exit ;
30862: GO 31011
// if tmp > 5 then
30864: LD_VAR 0 3
30868: PUSH
30869: LD_INT 5
30871: GREATER
30872: IFFALSE 30884
// k := 5 else
30874: LD_ADDR_VAR 0 2
30878: PUSH
30879: LD_INT 5
30881: ST_TO_ADDR
30882: GO 30894
// k := tmp ;
30884: LD_ADDR_VAR 0 2
30888: PUSH
30889: LD_VAR 0 3
30893: ST_TO_ADDR
// for i := 1 to k do
30894: LD_ADDR_VAR 0 1
30898: PUSH
30899: DOUBLE
30900: LD_INT 1
30902: DEC
30903: ST_TO_ADDR
30904: LD_VAR 0 2
30908: PUSH
30909: FOR_TO
30910: IFFALSE 31009
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
30912: LD_VAR 0 3
30916: PUSH
30917: LD_VAR 0 1
30921: ARRAY
30922: PPUSH
30923: LD_VAR 0 1
30927: PUSH
30928: LD_INT 4
30930: MOD
30931: PUSH
30932: LD_INT 1
30934: PLUS
30935: PPUSH
30936: CALL_OW 259
30940: PUSH
30941: LD_INT 10
30943: LESS
30944: IFFALSE 31007
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
30946: LD_VAR 0 3
30950: PUSH
30951: LD_VAR 0 1
30955: ARRAY
30956: PPUSH
30957: LD_VAR 0 1
30961: PUSH
30962: LD_INT 4
30964: MOD
30965: PUSH
30966: LD_INT 1
30968: PLUS
30969: PPUSH
30970: LD_VAR 0 3
30974: PUSH
30975: LD_VAR 0 1
30979: ARRAY
30980: PPUSH
30981: LD_VAR 0 1
30985: PUSH
30986: LD_INT 4
30988: MOD
30989: PUSH
30990: LD_INT 1
30992: PLUS
30993: PPUSH
30994: CALL_OW 259
30998: PUSH
30999: LD_INT 1
31001: PLUS
31002: PPUSH
31003: CALL_OW 237
31007: GO 30909
31009: POP
31010: POP
// end ;
31011: PPOPN 3
31013: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
31014: LD_EXP 72
31018: PUSH
31019: LD_EXP 78
31023: AND
31024: IFFALSE 31044
31026: GO 31028
31028: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
31029: LD_INT 4
31031: PPUSH
31032: LD_OWVAR 2
31036: PPUSH
31037: LD_INT 0
31039: PPUSH
31040: CALL_OW 324
31044: END
// every 0 0$1 trigger StreamModeActive and sShovel do
31045: LD_EXP 72
31049: PUSH
31050: LD_EXP 107
31054: AND
31055: IFFALSE 31075
31057: GO 31059
31059: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
31060: LD_INT 19
31062: PPUSH
31063: LD_OWVAR 2
31067: PPUSH
31068: LD_INT 0
31070: PPUSH
31071: CALL_OW 324
31075: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
31076: LD_EXP 72
31080: PUSH
31081: LD_EXP 79
31085: AND
31086: IFFALSE 31185
31088: GO 31090
31090: DISABLE
31091: LD_INT 0
31093: PPUSH
31094: PPUSH
// begin enable ;
31095: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
31096: LD_ADDR_VAR 0 2
31100: PUSH
31101: LD_INT 22
31103: PUSH
31104: LD_OWVAR 2
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 2
31115: PUSH
31116: LD_INT 34
31118: PUSH
31119: LD_INT 11
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: LD_INT 34
31128: PUSH
31129: LD_INT 30
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PUSH
31136: EMPTY
31137: LIST
31138: LIST
31139: LIST
31140: PUSH
31141: EMPTY
31142: LIST
31143: LIST
31144: PPUSH
31145: CALL_OW 69
31149: ST_TO_ADDR
// if not tmp then
31150: LD_VAR 0 2
31154: NOT
31155: IFFALSE 31159
// exit ;
31157: GO 31185
// for i in tmp do
31159: LD_ADDR_VAR 0 1
31163: PUSH
31164: LD_VAR 0 2
31168: PUSH
31169: FOR_IN
31170: IFFALSE 31183
// begin DestroyUnit ( i ) ;
31172: LD_VAR 0 1
31176: PPUSH
31177: CALL_OW 65
// end ;
31181: GO 31169
31183: POP
31184: POP
// end ;
31185: PPOPN 2
31187: END
// every 0 0$1 trigger StreamModeActive and sBunker do
31188: LD_EXP 72
31192: PUSH
31193: LD_EXP 80
31197: AND
31198: IFFALSE 31218
31200: GO 31202
31202: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
31203: LD_INT 32
31205: PPUSH
31206: LD_OWVAR 2
31210: PPUSH
31211: LD_INT 0
31213: PPUSH
31214: CALL_OW 324
31218: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
31219: LD_EXP 72
31223: PUSH
31224: LD_EXP 81
31228: AND
31229: IFFALSE 31410
31231: GO 31233
31233: DISABLE
31234: LD_INT 0
31236: PPUSH
31237: PPUSH
31238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
31239: LD_ADDR_VAR 0 2
31243: PUSH
31244: LD_INT 22
31246: PUSH
31247: LD_OWVAR 2
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 33
31258: PUSH
31259: LD_INT 3
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: EMPTY
31267: LIST
31268: LIST
31269: PPUSH
31270: CALL_OW 69
31274: ST_TO_ADDR
// if not tmp then
31275: LD_VAR 0 2
31279: NOT
31280: IFFALSE 31284
// exit ;
31282: GO 31410
// side := 0 ;
31284: LD_ADDR_VAR 0 3
31288: PUSH
31289: LD_INT 0
31291: ST_TO_ADDR
// for i := 1 to 8 do
31292: LD_ADDR_VAR 0 1
31296: PUSH
31297: DOUBLE
31298: LD_INT 1
31300: DEC
31301: ST_TO_ADDR
31302: LD_INT 8
31304: PUSH
31305: FOR_TO
31306: IFFALSE 31354
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
31308: LD_OWVAR 2
31312: PUSH
31313: LD_VAR 0 1
31317: NONEQUAL
31318: PUSH
31319: LD_OWVAR 2
31323: PPUSH
31324: LD_VAR 0 1
31328: PPUSH
31329: CALL_OW 81
31333: PUSH
31334: LD_INT 2
31336: EQUAL
31337: AND
31338: IFFALSE 31352
// begin side := i ;
31340: LD_ADDR_VAR 0 3
31344: PUSH
31345: LD_VAR 0 1
31349: ST_TO_ADDR
// break ;
31350: GO 31354
// end ;
31352: GO 31305
31354: POP
31355: POP
// if not side then
31356: LD_VAR 0 3
31360: NOT
31361: IFFALSE 31365
// exit ;
31363: GO 31410
// for i := 1 to tmp do
31365: LD_ADDR_VAR 0 1
31369: PUSH
31370: DOUBLE
31371: LD_INT 1
31373: DEC
31374: ST_TO_ADDR
31375: LD_VAR 0 2
31379: PUSH
31380: FOR_TO
31381: IFFALSE 31408
// if Prob ( 30 ) then
31383: LD_INT 30
31385: PPUSH
31386: CALL_OW 13
31390: IFFALSE 31406
// SetSide ( i , side ) ;
31392: LD_VAR 0 1
31396: PPUSH
31397: LD_VAR 0 3
31401: PPUSH
31402: CALL_OW 235
31406: GO 31380
31408: POP
31409: POP
// end ;
31410: PPOPN 3
31412: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
31413: LD_EXP 72
31417: PUSH
31418: LD_EXP 83
31422: AND
31423: IFFALSE 31542
31425: GO 31427
31427: DISABLE
31428: LD_INT 0
31430: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
31431: LD_ADDR_VAR 0 1
31435: PUSH
31436: LD_INT 22
31438: PUSH
31439: LD_OWVAR 2
31443: PUSH
31444: EMPTY
31445: LIST
31446: LIST
31447: PUSH
31448: LD_INT 21
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 3
31460: PUSH
31461: LD_INT 23
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: PUSH
31475: EMPTY
31476: LIST
31477: LIST
31478: LIST
31479: PPUSH
31480: CALL_OW 69
31484: PUSH
31485: FOR_IN
31486: IFFALSE 31540
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
31488: LD_VAR 0 1
31492: PPUSH
31493: CALL_OW 257
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: LD_INT 2
31503: PUSH
31504: LD_INT 3
31506: PUSH
31507: LD_INT 4
31509: PUSH
31510: EMPTY
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: IN
31516: IFFALSE 31538
// SetClass ( un , rand ( 1 , 4 ) ) ;
31518: LD_VAR 0 1
31522: PPUSH
31523: LD_INT 1
31525: PPUSH
31526: LD_INT 4
31528: PPUSH
31529: CALL_OW 12
31533: PPUSH
31534: CALL_OW 336
31538: GO 31485
31540: POP
31541: POP
// end ;
31542: PPOPN 1
31544: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
31545: LD_EXP 72
31549: PUSH
31550: LD_EXP 82
31554: AND
31555: IFFALSE 31634
31557: GO 31559
31559: DISABLE
31560: LD_INT 0
31562: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31563: LD_ADDR_VAR 0 1
31567: PUSH
31568: LD_INT 22
31570: PUSH
31571: LD_OWVAR 2
31575: PUSH
31576: EMPTY
31577: LIST
31578: LIST
31579: PUSH
31580: LD_INT 21
31582: PUSH
31583: LD_INT 3
31585: PUSH
31586: EMPTY
31587: LIST
31588: LIST
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PPUSH
31594: CALL_OW 69
31598: ST_TO_ADDR
// if not tmp then
31599: LD_VAR 0 1
31603: NOT
31604: IFFALSE 31608
// exit ;
31606: GO 31634
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
31608: LD_VAR 0 1
31612: PUSH
31613: LD_INT 1
31615: PPUSH
31616: LD_VAR 0 1
31620: PPUSH
31621: CALL_OW 12
31625: ARRAY
31626: PPUSH
31627: LD_INT 100
31629: PPUSH
31630: CALL_OW 234
// end ;
31634: PPOPN 1
31636: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
31637: LD_EXP 72
31641: PUSH
31642: LD_EXP 84
31646: AND
31647: IFFALSE 31745
31649: GO 31651
31651: DISABLE
31652: LD_INT 0
31654: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
31655: LD_ADDR_VAR 0 1
31659: PUSH
31660: LD_INT 22
31662: PUSH
31663: LD_OWVAR 2
31667: PUSH
31668: EMPTY
31669: LIST
31670: LIST
31671: PUSH
31672: LD_INT 21
31674: PUSH
31675: LD_INT 1
31677: PUSH
31678: EMPTY
31679: LIST
31680: LIST
31681: PUSH
31682: EMPTY
31683: LIST
31684: LIST
31685: PPUSH
31686: CALL_OW 69
31690: ST_TO_ADDR
// if not tmp then
31691: LD_VAR 0 1
31695: NOT
31696: IFFALSE 31700
// exit ;
31698: GO 31745
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
31700: LD_VAR 0 1
31704: PUSH
31705: LD_INT 1
31707: PPUSH
31708: LD_VAR 0 1
31712: PPUSH
31713: CALL_OW 12
31717: ARRAY
31718: PPUSH
31719: LD_INT 1
31721: PPUSH
31722: LD_INT 4
31724: PPUSH
31725: CALL_OW 12
31729: PPUSH
31730: LD_INT 3000
31732: PPUSH
31733: LD_INT 9000
31735: PPUSH
31736: CALL_OW 12
31740: PPUSH
31741: CALL_OW 492
// end ;
31745: PPOPN 1
31747: END
// every 0 0$1 trigger StreamModeActive and sDepot do
31748: LD_EXP 72
31752: PUSH
31753: LD_EXP 85
31757: AND
31758: IFFALSE 31778
31760: GO 31762
31762: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
31763: LD_INT 1
31765: PPUSH
31766: LD_OWVAR 2
31770: PPUSH
31771: LD_INT 0
31773: PPUSH
31774: CALL_OW 324
31778: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
31779: LD_EXP 72
31783: PUSH
31784: LD_EXP 86
31788: AND
31789: IFFALSE 31872
31791: GO 31793
31793: DISABLE
31794: LD_INT 0
31796: PPUSH
31797: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
31798: LD_ADDR_VAR 0 2
31802: PUSH
31803: LD_INT 22
31805: PUSH
31806: LD_OWVAR 2
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 21
31817: PUSH
31818: LD_INT 3
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: EMPTY
31826: LIST
31827: LIST
31828: PPUSH
31829: CALL_OW 69
31833: ST_TO_ADDR
// if not tmp then
31834: LD_VAR 0 2
31838: NOT
31839: IFFALSE 31843
// exit ;
31841: GO 31872
// for i in tmp do
31843: LD_ADDR_VAR 0 1
31847: PUSH
31848: LD_VAR 0 2
31852: PUSH
31853: FOR_IN
31854: IFFALSE 31870
// SetBLevel ( i , 10 ) ;
31856: LD_VAR 0 1
31860: PPUSH
31861: LD_INT 10
31863: PPUSH
31864: CALL_OW 241
31868: GO 31853
31870: POP
31871: POP
// end ;
31872: PPOPN 2
31874: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
31875: LD_EXP 72
31879: PUSH
31880: LD_EXP 87
31884: AND
31885: IFFALSE 31996
31887: GO 31889
31889: DISABLE
31890: LD_INT 0
31892: PPUSH
31893: PPUSH
31894: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
31895: LD_ADDR_VAR 0 3
31899: PUSH
31900: LD_INT 22
31902: PUSH
31903: LD_OWVAR 2
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 25
31914: PUSH
31915: LD_INT 1
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: EMPTY
31923: LIST
31924: LIST
31925: PPUSH
31926: CALL_OW 69
31930: ST_TO_ADDR
// if not tmp then
31931: LD_VAR 0 3
31935: NOT
31936: IFFALSE 31940
// exit ;
31938: GO 31996
// un := tmp [ rand ( 1 , tmp ) ] ;
31940: LD_ADDR_VAR 0 2
31944: PUSH
31945: LD_VAR 0 3
31949: PUSH
31950: LD_INT 1
31952: PPUSH
31953: LD_VAR 0 3
31957: PPUSH
31958: CALL_OW 12
31962: ARRAY
31963: ST_TO_ADDR
// if Crawls ( un ) then
31964: LD_VAR 0 2
31968: PPUSH
31969: CALL_OW 318
31973: IFFALSE 31984
// ComWalk ( un ) ;
31975: LD_VAR 0 2
31979: PPUSH
31980: CALL_OW 138
// SetClass ( un , class_sniper ) ;
31984: LD_VAR 0 2
31988: PPUSH
31989: LD_INT 5
31991: PPUSH
31992: CALL_OW 336
// end ;
31996: PPOPN 3
31998: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
31999: LD_EXP 72
32003: PUSH
32004: LD_EXP 88
32008: AND
32009: PUSH
32010: LD_OWVAR 67
32014: PUSH
32015: LD_INT 3
32017: LESS
32018: AND
32019: IFFALSE 32038
32021: GO 32023
32023: DISABLE
// Difficulty := Difficulty + 1 ;
32024: LD_ADDR_OWVAR 67
32028: PUSH
32029: LD_OWVAR 67
32033: PUSH
32034: LD_INT 1
32036: PLUS
32037: ST_TO_ADDR
32038: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
32039: LD_EXP 72
32043: PUSH
32044: LD_EXP 89
32048: AND
32049: IFFALSE 32152
32051: GO 32053
32053: DISABLE
32054: LD_INT 0
32056: PPUSH
// begin for i := 1 to 5 do
32057: LD_ADDR_VAR 0 1
32061: PUSH
32062: DOUBLE
32063: LD_INT 1
32065: DEC
32066: ST_TO_ADDR
32067: LD_INT 5
32069: PUSH
32070: FOR_TO
32071: IFFALSE 32150
// begin uc_nation := nation_nature ;
32073: LD_ADDR_OWVAR 21
32077: PUSH
32078: LD_INT 0
32080: ST_TO_ADDR
// uc_side := 0 ;
32081: LD_ADDR_OWVAR 20
32085: PUSH
32086: LD_INT 0
32088: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
32089: LD_ADDR_OWVAR 29
32093: PUSH
32094: LD_INT 12
32096: PUSH
32097: LD_INT 12
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: ST_TO_ADDR
// hc_agressivity := 20 ;
32104: LD_ADDR_OWVAR 35
32108: PUSH
32109: LD_INT 20
32111: ST_TO_ADDR
// hc_class := class_tiger ;
32112: LD_ADDR_OWVAR 28
32116: PUSH
32117: LD_INT 14
32119: ST_TO_ADDR
// hc_gallery :=  ;
32120: LD_ADDR_OWVAR 33
32124: PUSH
32125: LD_STRING 
32127: ST_TO_ADDR
// hc_name :=  ;
32128: LD_ADDR_OWVAR 26
32132: PUSH
32133: LD_STRING 
32135: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
32136: CALL_OW 44
32140: PPUSH
32141: LD_INT 0
32143: PPUSH
32144: CALL_OW 51
// end ;
32148: GO 32070
32150: POP
32151: POP
// end ;
32152: PPOPN 1
32154: END
// every 0 0$1 trigger StreamModeActive and sBomb do var i , x , y , result ;
32155: LD_EXP 72
32159: PUSH
32160: LD_EXP 90
32164: AND
32165: IFFALSE 32339
32167: GO 32169
32169: DISABLE
32170: LD_INT 0
32172: PPUSH
32173: PPUSH
32174: PPUSH
32175: PPUSH
// begin result := false ;
32176: LD_ADDR_VAR 0 4
32180: PUSH
32181: LD_INT 0
32183: ST_TO_ADDR
// for i := 1 to 8 do
32184: LD_ADDR_VAR 0 1
32188: PUSH
32189: DOUBLE
32190: LD_INT 1
32192: DEC
32193: ST_TO_ADDR
32194: LD_INT 8
32196: PUSH
32197: FOR_TO
32198: IFFALSE 32309
// begin x := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
32200: LD_ADDR_VAR 0 2
32204: PUSH
32205: LD_INT 10
32207: PUSH
32208: LD_INT 50
32210: PUSH
32211: LD_INT 90
32213: PUSH
32214: LD_INT 140
32216: PUSH
32217: EMPTY
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: PUSH
32223: LD_INT 1
32225: PPUSH
32226: LD_INT 4
32228: PPUSH
32229: CALL_OW 12
32233: ARRAY
32234: ST_TO_ADDR
// y := [ 10 , 50 , 90 , 140 ] [ rand ( 1 , 4 ) ] ;
32235: LD_ADDR_VAR 0 3
32239: PUSH
32240: LD_INT 10
32242: PUSH
32243: LD_INT 50
32245: PUSH
32246: LD_INT 90
32248: PUSH
32249: LD_INT 140
32251: PUSH
32252: EMPTY
32253: LIST
32254: LIST
32255: LIST
32256: LIST
32257: PUSH
32258: LD_INT 1
32260: PPUSH
32261: LD_INT 4
32263: PPUSH
32264: CALL_OW 12
32268: ARRAY
32269: ST_TO_ADDR
// if ValidHex ( x , y ) then
32270: LD_VAR 0 2
32274: PPUSH
32275: LD_VAR 0 3
32279: PPUSH
32280: CALL_OW 488
32284: IFFALSE 32307
// begin result := [ x , y ] ;
32286: LD_ADDR_VAR 0 4
32290: PUSH
32291: LD_VAR 0 2
32295: PUSH
32296: LD_VAR 0 3
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: ST_TO_ADDR
// break ;
32305: GO 32309
// end ; end ;
32307: GO 32197
32309: POP
32310: POP
// if result then
32311: LD_VAR 0 4
32315: IFFALSE 32339
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
32317: LD_VAR 0 4
32321: PUSH
32322: LD_INT 1
32324: ARRAY
32325: PPUSH
32326: LD_VAR 0 4
32330: PUSH
32331: LD_INT 2
32333: ARRAY
32334: PPUSH
32335: CALL_OW 429
// end ;
32339: PPOPN 4
32341: END
// every 0 0$1 trigger StreamModeActive and sReset do
32342: LD_EXP 72
32346: PUSH
32347: LD_EXP 92
32351: AND
32352: IFFALSE 32364
32354: GO 32356
32356: DISABLE
// YouLost (  ) ;
32357: LD_STRING 
32359: PPUSH
32360: CALL_OW 104
32364: END
// every 0 0$1 trigger StreamModeActive and sFog do
32365: LD_EXP 72
32369: PUSH
32370: LD_EXP 91
32374: AND
32375: IFFALSE 32389
32377: GO 32379
32379: DISABLE
// FogOff ( your_side ) ;
32380: LD_OWVAR 2
32384: PPUSH
32385: CALL_OW 344
32389: END
// every 0 0$1 trigger StreamModeActive and sSun do
32390: LD_EXP 72
32394: PUSH
32395: LD_EXP 93
32399: AND
32400: IFFALSE 32428
32402: GO 32404
32404: DISABLE
// begin solar_recharge_percent := 0 ;
32405: LD_ADDR_OWVAR 79
32409: PUSH
32410: LD_INT 0
32412: ST_TO_ADDR
// wait ( 5 5$00 ) ;
32413: LD_INT 10500
32415: PPUSH
32416: CALL_OW 67
// solar_recharge_percent := 100 ;
32420: LD_ADDR_OWVAR 79
32424: PUSH
32425: LD_INT 100
32427: ST_TO_ADDR
// end ;
32428: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
32429: LD_EXP 72
32433: PUSH
32434: LD_EXP 94
32438: AND
32439: IFFALSE 32678
32441: GO 32443
32443: DISABLE
32444: LD_INT 0
32446: PPUSH
32447: PPUSH
32448: PPUSH
// begin tmp := [ ] ;
32449: LD_ADDR_VAR 0 3
32453: PUSH
32454: EMPTY
32455: ST_TO_ADDR
// for i := 1 to 6 do
32456: LD_ADDR_VAR 0 1
32460: PUSH
32461: DOUBLE
32462: LD_INT 1
32464: DEC
32465: ST_TO_ADDR
32466: LD_INT 6
32468: PUSH
32469: FOR_TO
32470: IFFALSE 32575
// begin uc_nation := nation_nature ;
32472: LD_ADDR_OWVAR 21
32476: PUSH
32477: LD_INT 0
32479: ST_TO_ADDR
// uc_side := 0 ;
32480: LD_ADDR_OWVAR 20
32484: PUSH
32485: LD_INT 0
32487: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
32488: LD_ADDR_OWVAR 29
32492: PUSH
32493: LD_INT 12
32495: PUSH
32496: LD_INT 12
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: ST_TO_ADDR
// hc_agressivity := 20 ;
32503: LD_ADDR_OWVAR 35
32507: PUSH
32508: LD_INT 20
32510: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
32511: LD_ADDR_OWVAR 28
32515: PUSH
32516: LD_INT 17
32518: ST_TO_ADDR
// hc_gallery :=  ;
32519: LD_ADDR_OWVAR 33
32523: PUSH
32524: LD_STRING 
32526: ST_TO_ADDR
// hc_name :=  ;
32527: LD_ADDR_OWVAR 26
32531: PUSH
32532: LD_STRING 
32534: ST_TO_ADDR
// un := CreateHuman ;
32535: LD_ADDR_VAR 0 2
32539: PUSH
32540: CALL_OW 44
32544: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
32545: LD_VAR 0 2
32549: PPUSH
32550: LD_INT 1
32552: PPUSH
32553: CALL_OW 51
// tmp := tmp * un ;
32557: LD_ADDR_VAR 0 3
32561: PUSH
32562: LD_VAR 0 3
32566: PUSH
32567: LD_VAR 0 2
32571: MUL
32572: ST_TO_ADDR
// end ;
32573: GO 32469
32575: POP
32576: POP
// repeat wait ( 0 0$1 ) ;
32577: LD_INT 35
32579: PPUSH
32580: CALL_OW 67
// for un in tmp do
32584: LD_ADDR_VAR 0 2
32588: PUSH
32589: LD_VAR 0 3
32593: PUSH
32594: FOR_IN
32595: IFFALSE 32669
// begin if IsDead ( un ) then
32597: LD_VAR 0 2
32601: PPUSH
32602: CALL_OW 301
32606: IFFALSE 32626
// begin tmp := tmp diff un ;
32608: LD_ADDR_VAR 0 3
32612: PUSH
32613: LD_VAR 0 3
32617: PUSH
32618: LD_VAR 0 2
32622: DIFF
32623: ST_TO_ADDR
// continue ;
32624: GO 32594
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
32626: LD_VAR 0 2
32630: PPUSH
32631: LD_INT 3
32633: PUSH
32634: LD_INT 22
32636: PUSH
32637: LD_INT 0
32639: PUSH
32640: EMPTY
32641: LIST
32642: LIST
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: PPUSH
32648: CALL_OW 69
32652: PPUSH
32653: LD_VAR 0 2
32657: PPUSH
32658: CALL_OW 74
32662: PPUSH
32663: CALL_OW 115
// end ;
32667: GO 32594
32669: POP
32670: POP
// until not tmp ;
32671: LD_VAR 0 3
32675: NOT
32676: IFFALSE 32577
// end ;
32678: PPOPN 3
32680: END
// every 0 0$1 trigger StreamModeActive and sTroll do
32681: LD_EXP 72
32685: PUSH
32686: LD_EXP 95
32690: AND
32691: IFFALSE 32717
32693: GO 32695
32695: DISABLE
// begin ToLua ( displayTroll(); ) ;
32696: LD_STRING displayTroll();
32698: PPUSH
32699: CALL_OW 559
// wait ( 3 3$00 ) ;
32703: LD_INT 6300
32705: PPUSH
32706: CALL_OW 67
// ToLua ( hideTroll(); ) ;
32710: LD_STRING hideTroll();
32712: PPUSH
32713: CALL_OW 559
// end ;
32717: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
32718: LD_EXP 72
32722: PUSH
32723: LD_EXP 96
32727: AND
32728: IFFALSE 32791
32730: GO 32732
32732: DISABLE
32733: LD_INT 0
32735: PPUSH
// begin p := 0 ;
32736: LD_ADDR_VAR 0 1
32740: PUSH
32741: LD_INT 0
32743: ST_TO_ADDR
// repeat game_speed := 1 ;
32744: LD_ADDR_OWVAR 65
32748: PUSH
32749: LD_INT 1
32751: ST_TO_ADDR
// wait ( 0 0$1 ) ;
32752: LD_INT 35
32754: PPUSH
32755: CALL_OW 67
// p := p + 1 ;
32759: LD_ADDR_VAR 0 1
32763: PUSH
32764: LD_VAR 0 1
32768: PUSH
32769: LD_INT 1
32771: PLUS
32772: ST_TO_ADDR
// until p >= 60 ;
32773: LD_VAR 0 1
32777: PUSH
32778: LD_INT 60
32780: GREATEREQUAL
32781: IFFALSE 32744
// game_speed := 4 ;
32783: LD_ADDR_OWVAR 65
32787: PUSH
32788: LD_INT 4
32790: ST_TO_ADDR
// end ;
32791: PPOPN 1
32793: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
32794: LD_EXP 72
32798: PUSH
32799: LD_EXP 97
32803: AND
32804: IFFALSE 32950
32806: GO 32808
32808: DISABLE
32809: LD_INT 0
32811: PPUSH
32812: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32813: LD_ADDR_VAR 0 1
32817: PUSH
32818: LD_INT 22
32820: PUSH
32821: LD_OWVAR 2
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 2
32832: PUSH
32833: LD_INT 30
32835: PUSH
32836: LD_INT 0
32838: PUSH
32839: EMPTY
32840: LIST
32841: LIST
32842: PUSH
32843: LD_INT 30
32845: PUSH
32846: LD_INT 1
32848: PUSH
32849: EMPTY
32850: LIST
32851: LIST
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: LIST
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PPUSH
32862: CALL_OW 69
32866: ST_TO_ADDR
// if not depot then
32867: LD_VAR 0 1
32871: NOT
32872: IFFALSE 32876
// exit ;
32874: GO 32950
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
32876: LD_ADDR_VAR 0 2
32880: PUSH
32881: LD_VAR 0 1
32885: PUSH
32886: LD_INT 1
32888: PPUSH
32889: LD_VAR 0 1
32893: PPUSH
32894: CALL_OW 12
32898: ARRAY
32899: PPUSH
32900: CALL_OW 274
32904: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
32905: LD_VAR 0 2
32909: PPUSH
32910: LD_INT 1
32912: PPUSH
32913: LD_INT 0
32915: PPUSH
32916: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
32920: LD_VAR 0 2
32924: PPUSH
32925: LD_INT 2
32927: PPUSH
32928: LD_INT 0
32930: PPUSH
32931: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
32935: LD_VAR 0 2
32939: PPUSH
32940: LD_INT 3
32942: PPUSH
32943: LD_INT 0
32945: PPUSH
32946: CALL_OW 277
// end ;
32950: PPOPN 2
32952: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
32953: LD_EXP 72
32957: PUSH
32958: LD_EXP 98
32962: AND
32963: IFFALSE 33060
32965: GO 32967
32967: DISABLE
32968: LD_INT 0
32970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
32971: LD_ADDR_VAR 0 1
32975: PUSH
32976: LD_INT 22
32978: PUSH
32979: LD_OWVAR 2
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: LD_INT 21
32990: PUSH
32991: LD_INT 1
32993: PUSH
32994: EMPTY
32995: LIST
32996: LIST
32997: PUSH
32998: LD_INT 3
33000: PUSH
33001: LD_INT 23
33003: PUSH
33004: LD_INT 0
33006: PUSH
33007: EMPTY
33008: LIST
33009: LIST
33010: PUSH
33011: EMPTY
33012: LIST
33013: LIST
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: LIST
33019: PPUSH
33020: CALL_OW 69
33024: ST_TO_ADDR
// if not tmp then
33025: LD_VAR 0 1
33029: NOT
33030: IFFALSE 33034
// exit ;
33032: GO 33060
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
33034: LD_VAR 0 1
33038: PUSH
33039: LD_INT 1
33041: PPUSH
33042: LD_VAR 0 1
33046: PPUSH
33047: CALL_OW 12
33051: ARRAY
33052: PPUSH
33053: LD_INT 200
33055: PPUSH
33056: CALL_OW 234
// end ;
33060: PPOPN 1
33062: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
33063: LD_EXP 72
33067: PUSH
33068: LD_EXP 99
33072: AND
33073: IFFALSE 33152
33075: GO 33077
33077: DISABLE
33078: LD_INT 0
33080: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
33081: LD_ADDR_VAR 0 1
33085: PUSH
33086: LD_INT 22
33088: PUSH
33089: LD_OWVAR 2
33093: PUSH
33094: EMPTY
33095: LIST
33096: LIST
33097: PUSH
33098: LD_INT 21
33100: PUSH
33101: LD_INT 2
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: EMPTY
33109: LIST
33110: LIST
33111: PPUSH
33112: CALL_OW 69
33116: ST_TO_ADDR
// if not tmp then
33117: LD_VAR 0 1
33121: NOT
33122: IFFALSE 33126
// exit ;
33124: GO 33152
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
33126: LD_VAR 0 1
33130: PUSH
33131: LD_INT 1
33133: PPUSH
33134: LD_VAR 0 1
33138: PPUSH
33139: CALL_OW 12
33143: ARRAY
33144: PPUSH
33145: LD_INT 60
33147: PPUSH
33148: CALL_OW 234
// end ;
33152: PPOPN 1
33154: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
33155: LD_EXP 72
33159: PUSH
33160: LD_EXP 100
33164: AND
33165: IFFALSE 33264
33167: GO 33169
33169: DISABLE
33170: LD_INT 0
33172: PPUSH
33173: PPUSH
// begin enable ;
33174: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
33175: LD_ADDR_VAR 0 1
33179: PUSH
33180: LD_INT 22
33182: PUSH
33183: LD_OWVAR 2
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: PUSH
33192: LD_INT 61
33194: PUSH
33195: EMPTY
33196: LIST
33197: PUSH
33198: LD_INT 33
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: PPUSH
33213: CALL_OW 69
33217: ST_TO_ADDR
// if not tmp then
33218: LD_VAR 0 1
33222: NOT
33223: IFFALSE 33227
// exit ;
33225: GO 33264
// for i in tmp do
33227: LD_ADDR_VAR 0 2
33231: PUSH
33232: LD_VAR 0 1
33236: PUSH
33237: FOR_IN
33238: IFFALSE 33262
// if IsControledBy ( i ) then
33240: LD_VAR 0 2
33244: PPUSH
33245: CALL_OW 312
33249: IFFALSE 33260
// ComUnlink ( i ) ;
33251: LD_VAR 0 2
33255: PPUSH
33256: CALL_OW 136
33260: GO 33237
33262: POP
33263: POP
// end ;
33264: PPOPN 2
33266: END
// every 0 0$1 trigger StreamModeActive and sPowell do
33267: LD_EXP 72
33271: PUSH
33272: LD_EXP 101
33276: AND
33277: IFFALSE 33317
33279: GO 33281
33281: DISABLE
// begin ToLua ( displayPowell(); ) ;
33282: LD_STRING displayPowell();
33284: PPUSH
33285: CALL_OW 559
// wait ( 0 0$20 ) ;
33289: LD_INT 700
33291: PPUSH
33292: CALL_OW 67
// ToLua ( displayPowell(); ) ;
33296: LD_STRING displayPowell();
33298: PPUSH
33299: CALL_OW 559
// wait ( 0 0$40 ) ;
33303: LD_INT 1400
33305: PPUSH
33306: CALL_OW 67
// ToLua ( displayPowell(); ) ;
33310: LD_STRING displayPowell();
33312: PPUSH
33313: CALL_OW 559
// end ;
33317: END
// every 0 0$1 trigger StreamModeActive and sStu do
33318: LD_EXP 72
33322: PUSH
33323: LD_EXP 109
33327: AND
33328: IFFALSE 33340
33330: GO 33332
33332: DISABLE
// begin ToLua ( displayStucuk(); ) ;
33333: LD_STRING displayStucuk();
33335: PPUSH
33336: CALL_OW 559
// end ;
33340: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
33341: LD_EXP 72
33345: PUSH
33346: LD_EXP 102
33350: AND
33351: IFFALSE 33492
33353: GO 33355
33355: DISABLE
33356: LD_INT 0
33358: PPUSH
33359: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33360: LD_ADDR_VAR 0 2
33364: PUSH
33365: LD_INT 22
33367: PUSH
33368: LD_OWVAR 2
33372: PUSH
33373: EMPTY
33374: LIST
33375: LIST
33376: PUSH
33377: LD_INT 21
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: EMPTY
33384: LIST
33385: LIST
33386: PUSH
33387: EMPTY
33388: LIST
33389: LIST
33390: PPUSH
33391: CALL_OW 69
33395: ST_TO_ADDR
// if not tmp then
33396: LD_VAR 0 2
33400: NOT
33401: IFFALSE 33405
// exit ;
33403: GO 33492
// un := tmp [ rand ( 1 , tmp ) ] ;
33405: LD_ADDR_VAR 0 1
33409: PUSH
33410: LD_VAR 0 2
33414: PUSH
33415: LD_INT 1
33417: PPUSH
33418: LD_VAR 0 2
33422: PPUSH
33423: CALL_OW 12
33427: ARRAY
33428: ST_TO_ADDR
// SetSide ( un , 0 ) ;
33429: LD_VAR 0 1
33433: PPUSH
33434: LD_INT 0
33436: PPUSH
33437: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
33441: LD_VAR 0 1
33445: PPUSH
33446: LD_OWVAR 3
33450: PUSH
33451: LD_VAR 0 1
33455: DIFF
33456: PPUSH
33457: LD_VAR 0 1
33461: PPUSH
33462: CALL_OW 74
33466: PPUSH
33467: CALL_OW 115
// wait ( 0 0$20 ) ;
33471: LD_INT 700
33473: PPUSH
33474: CALL_OW 67
// SetSide ( un , your_side ) ;
33478: LD_VAR 0 1
33482: PPUSH
33483: LD_OWVAR 2
33487: PPUSH
33488: CALL_OW 235
// end ;
33492: PPOPN 2
33494: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
33495: LD_EXP 72
33499: PUSH
33500: LD_EXP 103
33504: AND
33505: IFFALSE 33611
33507: GO 33509
33509: DISABLE
33510: LD_INT 0
33512: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33513: LD_ADDR_VAR 0 1
33517: PUSH
33518: LD_INT 22
33520: PUSH
33521: LD_OWVAR 2
33525: PUSH
33526: EMPTY
33527: LIST
33528: LIST
33529: PUSH
33530: LD_INT 2
33532: PUSH
33533: LD_INT 30
33535: PUSH
33536: LD_INT 0
33538: PUSH
33539: EMPTY
33540: LIST
33541: LIST
33542: PUSH
33543: LD_INT 30
33545: PUSH
33546: LD_INT 1
33548: PUSH
33549: EMPTY
33550: LIST
33551: LIST
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: LIST
33557: PUSH
33558: EMPTY
33559: LIST
33560: LIST
33561: PPUSH
33562: CALL_OW 69
33566: ST_TO_ADDR
// if not depot then
33567: LD_VAR 0 1
33571: NOT
33572: IFFALSE 33576
// exit ;
33574: GO 33611
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
33576: LD_VAR 0 1
33580: PUSH
33581: LD_INT 1
33583: ARRAY
33584: PPUSH
33585: CALL_OW 250
33589: PPUSH
33590: LD_VAR 0 1
33594: PUSH
33595: LD_INT 1
33597: ARRAY
33598: PPUSH
33599: CALL_OW 251
33603: PPUSH
33604: LD_INT 70
33606: PPUSH
33607: CALL_OW 495
// end ;
33611: PPOPN 1
33613: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
33614: LD_EXP 72
33618: PUSH
33619: LD_EXP 104
33623: AND
33624: IFFALSE 33835
33626: GO 33628
33628: DISABLE
33629: LD_INT 0
33631: PPUSH
33632: PPUSH
33633: PPUSH
33634: PPUSH
33635: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
33636: LD_ADDR_VAR 0 5
33640: PUSH
33641: LD_INT 22
33643: PUSH
33644: LD_OWVAR 2
33648: PUSH
33649: EMPTY
33650: LIST
33651: LIST
33652: PUSH
33653: LD_INT 21
33655: PUSH
33656: LD_INT 1
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PPUSH
33667: CALL_OW 69
33671: ST_TO_ADDR
// if not tmp then
33672: LD_VAR 0 5
33676: NOT
33677: IFFALSE 33681
// exit ;
33679: GO 33835
// for i in tmp do
33681: LD_ADDR_VAR 0 1
33685: PUSH
33686: LD_VAR 0 5
33690: PUSH
33691: FOR_IN
33692: IFFALSE 33833
// begin d := rand ( 0 , 5 ) ;
33694: LD_ADDR_VAR 0 4
33698: PUSH
33699: LD_INT 0
33701: PPUSH
33702: LD_INT 5
33704: PPUSH
33705: CALL_OW 12
33709: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
33710: LD_ADDR_VAR 0 2
33714: PUSH
33715: LD_VAR 0 1
33719: PPUSH
33720: CALL_OW 250
33724: PPUSH
33725: LD_VAR 0 4
33729: PPUSH
33730: LD_INT 3
33732: PPUSH
33733: LD_INT 12
33735: PPUSH
33736: CALL_OW 12
33740: PPUSH
33741: CALL_OW 272
33745: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
33746: LD_ADDR_VAR 0 3
33750: PUSH
33751: LD_VAR 0 1
33755: PPUSH
33756: CALL_OW 251
33760: PPUSH
33761: LD_VAR 0 4
33765: PPUSH
33766: LD_INT 3
33768: PPUSH
33769: LD_INT 12
33771: PPUSH
33772: CALL_OW 12
33776: PPUSH
33777: CALL_OW 273
33781: ST_TO_ADDR
// if ValidHex ( x , y ) then
33782: LD_VAR 0 2
33786: PPUSH
33787: LD_VAR 0 3
33791: PPUSH
33792: CALL_OW 488
33796: IFFALSE 33831
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
33798: LD_VAR 0 1
33802: PPUSH
33803: LD_VAR 0 2
33807: PPUSH
33808: LD_VAR 0 3
33812: PPUSH
33813: LD_INT 3
33815: PPUSH
33816: LD_INT 6
33818: PPUSH
33819: CALL_OW 12
33823: PPUSH
33824: LD_INT 1
33826: PPUSH
33827: CALL_OW 483
// end ;
33831: GO 33691
33833: POP
33834: POP
// end ;
33835: PPOPN 5
33837: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
33838: LD_EXP 72
33842: PUSH
33843: LD_EXP 105
33847: AND
33848: IFFALSE 33942
33850: GO 33852
33852: DISABLE
33853: LD_INT 0
33855: PPUSH
33856: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
33857: LD_ADDR_VAR 0 2
33861: PUSH
33862: LD_INT 22
33864: PUSH
33865: LD_OWVAR 2
33869: PUSH
33870: EMPTY
33871: LIST
33872: LIST
33873: PUSH
33874: LD_INT 32
33876: PUSH
33877: LD_INT 1
33879: PUSH
33880: EMPTY
33881: LIST
33882: LIST
33883: PUSH
33884: LD_INT 21
33886: PUSH
33887: LD_INT 2
33889: PUSH
33890: EMPTY
33891: LIST
33892: LIST
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: LIST
33898: PPUSH
33899: CALL_OW 69
33903: ST_TO_ADDR
// if not tmp then
33904: LD_VAR 0 2
33908: NOT
33909: IFFALSE 33913
// exit ;
33911: GO 33942
// for i in tmp do
33913: LD_ADDR_VAR 0 1
33917: PUSH
33918: LD_VAR 0 2
33922: PUSH
33923: FOR_IN
33924: IFFALSE 33940
// SetFuel ( i , 0 ) ;
33926: LD_VAR 0 1
33930: PPUSH
33931: LD_INT 0
33933: PPUSH
33934: CALL_OW 240
33938: GO 33923
33940: POP
33941: POP
// end ;
33942: PPOPN 2
33944: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
33945: LD_EXP 72
33949: PUSH
33950: LD_EXP 106
33954: AND
33955: IFFALSE 34021
33957: GO 33959
33959: DISABLE
33960: LD_INT 0
33962: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
33963: LD_ADDR_VAR 0 1
33967: PUSH
33968: LD_INT 22
33970: PUSH
33971: LD_OWVAR 2
33975: PUSH
33976: EMPTY
33977: LIST
33978: LIST
33979: PUSH
33980: LD_INT 30
33982: PUSH
33983: LD_INT 29
33985: PUSH
33986: EMPTY
33987: LIST
33988: LIST
33989: PUSH
33990: EMPTY
33991: LIST
33992: LIST
33993: PPUSH
33994: CALL_OW 69
33998: ST_TO_ADDR
// if not tmp then
33999: LD_VAR 0 1
34003: NOT
34004: IFFALSE 34008
// exit ;
34006: GO 34021
// DestroyUnit ( tmp [ 1 ] ) ;
34008: LD_VAR 0 1
34012: PUSH
34013: LD_INT 1
34015: ARRAY
34016: PPUSH
34017: CALL_OW 65
// end ;
34021: PPOPN 1
34023: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
34024: LD_EXP 72
34028: PUSH
34029: LD_EXP 108
34033: AND
34034: IFFALSE 34147
34036: GO 34038
34038: DISABLE
34039: LD_INT 0
34041: PPUSH
// begin uc_side := 0 ;
34042: LD_ADDR_OWVAR 20
34046: PUSH
34047: LD_INT 0
34049: ST_TO_ADDR
// uc_nation := nation_arabian ;
34050: LD_ADDR_OWVAR 21
34054: PUSH
34055: LD_INT 2
34057: ST_TO_ADDR
// PrepareHuman ( sex_male , 10 , class_desert_warior ) ;
34058: LD_INT 1
34060: PPUSH
34061: LD_INT 10
34063: PPUSH
34064: LD_INT 11
34066: PPUSH
34067: CALL_OW 380
// un := CreateHuman ;
34071: LD_ADDR_VAR 0 1
34075: PUSH
34076: CALL_OW 44
34080: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
34081: LD_VAR 0 1
34085: PPUSH
34086: LD_INT 1
34088: PPUSH
34089: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
34093: LD_INT 35
34095: PPUSH
34096: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
34100: LD_VAR 0 1
34104: PPUSH
34105: LD_INT 22
34107: PUSH
34108: LD_OWVAR 2
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PPUSH
34117: CALL_OW 69
34121: PPUSH
34122: LD_VAR 0 1
34126: PPUSH
34127: CALL_OW 74
34131: PPUSH
34132: CALL_OW 115
// until IsDead ( un ) ;
34136: LD_VAR 0 1
34140: PPUSH
34141: CALL_OW 301
34145: IFFALSE 34093
// end ; end_of_file
34147: PPOPN 1
34149: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
34150: LD_INT 0
34152: PPUSH
34153: PPUSH
34154: PPUSH
34155: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
34156: LD_VAR 0 1
34160: PPUSH
34161: CALL_OW 264
34165: PUSH
34166: LD_EXP 71
34170: EQUAL
34171: IFFALSE 34243
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
34173: LD_INT 68
34175: PPUSH
34176: LD_VAR 0 1
34180: PPUSH
34181: CALL_OW 255
34185: PPUSH
34186: CALL_OW 321
34190: PUSH
34191: LD_INT 2
34193: EQUAL
34194: IFFALSE 34206
// eff := 70 else
34196: LD_ADDR_VAR 0 6
34200: PUSH
34201: LD_INT 70
34203: ST_TO_ADDR
34204: GO 34214
// eff := 30 ;
34206: LD_ADDR_VAR 0 6
34210: PUSH
34211: LD_INT 30
34213: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
34214: LD_VAR 0 1
34218: PPUSH
34219: CALL_OW 250
34223: PPUSH
34224: LD_VAR 0 1
34228: PPUSH
34229: CALL_OW 251
34233: PPUSH
34234: LD_VAR 0 6
34238: PPUSH
34239: CALL_OW 495
// end ; end ;
34243: LD_VAR 0 4
34247: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
34248: LD_INT 0
34250: PPUSH
34251: PPUSH
34252: PPUSH
34253: PPUSH
34254: PPUSH
34255: PPUSH
// if cmd = 124 then
34256: LD_VAR 0 1
34260: PUSH
34261: LD_INT 124
34263: EQUAL
34264: IFFALSE 34470
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
34266: LD_ADDR_VAR 0 5
34270: PUSH
34271: LD_INT 2
34273: PUSH
34274: LD_INT 34
34276: PUSH
34277: LD_INT 53
34279: PUSH
34280: EMPTY
34281: LIST
34282: LIST
34283: PUSH
34284: LD_INT 34
34286: PUSH
34287: LD_INT 14
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: LIST
34298: PPUSH
34299: CALL_OW 69
34303: ST_TO_ADDR
// if not tmp then
34304: LD_VAR 0 5
34308: NOT
34309: IFFALSE 34313
// exit ;
34311: GO 34470
// for i in tmp do
34313: LD_ADDR_VAR 0 3
34317: PUSH
34318: LD_VAR 0 5
34322: PUSH
34323: FOR_IN
34324: IFFALSE 34468
// begin taskList := GetTaskList ( i ) ;
34326: LD_ADDR_VAR 0 6
34330: PUSH
34331: LD_VAR 0 3
34335: PPUSH
34336: CALL_OW 437
34340: ST_TO_ADDR
// if not taskList then
34341: LD_VAR 0 6
34345: NOT
34346: IFFALSE 34350
// continue ;
34348: GO 34323
// for j = 1 to taskList do
34350: LD_ADDR_VAR 0 4
34354: PUSH
34355: DOUBLE
34356: LD_INT 1
34358: DEC
34359: ST_TO_ADDR
34360: LD_VAR 0 6
34364: PUSH
34365: FOR_TO
34366: IFFALSE 34464
// if taskList [ j ] [ 1 ] = | then
34368: LD_VAR 0 6
34372: PUSH
34373: LD_VAR 0 4
34377: ARRAY
34378: PUSH
34379: LD_INT 1
34381: ARRAY
34382: PUSH
34383: LD_STRING |
34385: EQUAL
34386: IFFALSE 34462
// begin _taskList := Delete ( taskList , 1 ) ;
34388: LD_ADDR_VAR 0 7
34392: PUSH
34393: LD_VAR 0 6
34397: PPUSH
34398: LD_INT 1
34400: PPUSH
34401: CALL_OW 3
34405: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
34406: LD_VAR 0 3
34410: PPUSH
34411: LD_VAR 0 7
34415: PPUSH
34416: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
34420: LD_VAR 0 3
34424: PPUSH
34425: LD_VAR 0 6
34429: PUSH
34430: LD_VAR 0 4
34434: ARRAY
34435: PUSH
34436: LD_INT 2
34438: ARRAY
34439: PPUSH
34440: LD_VAR 0 6
34444: PUSH
34445: LD_VAR 0 4
34449: ARRAY
34450: PUSH
34451: LD_INT 3
34453: ARRAY
34454: PPUSH
34455: LD_INT 8
34457: PPUSH
34458: CALL 34475 0 4
// end ;
34462: GO 34365
34464: POP
34465: POP
// end ;
34466: GO 34323
34468: POP
34469: POP
// end ; end ;
34470: LD_VAR 0 2
34474: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
34475: LD_INT 0
34477: PPUSH
34478: PPUSH
34479: PPUSH
34480: PPUSH
34481: PPUSH
34482: PPUSH
34483: PPUSH
34484: PPUSH
34485: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
34486: LD_VAR 0 1
34490: NOT
34491: PUSH
34492: LD_VAR 0 2
34496: PPUSH
34497: LD_VAR 0 3
34501: PPUSH
34502: CALL_OW 488
34506: NOT
34507: OR
34508: PUSH
34509: LD_VAR 0 4
34513: NOT
34514: OR
34515: IFFALSE 34519
// exit ;
34517: GO 34859
// list := [ ] ;
34519: LD_ADDR_VAR 0 13
34523: PUSH
34524: EMPTY
34525: ST_TO_ADDR
// if x - r < 0 then
34526: LD_VAR 0 2
34530: PUSH
34531: LD_VAR 0 4
34535: MINUS
34536: PUSH
34537: LD_INT 0
34539: LESS
34540: IFFALSE 34552
// min_x := 0 else
34542: LD_ADDR_VAR 0 7
34546: PUSH
34547: LD_INT 0
34549: ST_TO_ADDR
34550: GO 34568
// min_x := x - r ;
34552: LD_ADDR_VAR 0 7
34556: PUSH
34557: LD_VAR 0 2
34561: PUSH
34562: LD_VAR 0 4
34566: MINUS
34567: ST_TO_ADDR
// if y - r < 0 then
34568: LD_VAR 0 3
34572: PUSH
34573: LD_VAR 0 4
34577: MINUS
34578: PUSH
34579: LD_INT 0
34581: LESS
34582: IFFALSE 34594
// min_y := 0 else
34584: LD_ADDR_VAR 0 8
34588: PUSH
34589: LD_INT 0
34591: ST_TO_ADDR
34592: GO 34610
// min_y := y - r ;
34594: LD_ADDR_VAR 0 8
34598: PUSH
34599: LD_VAR 0 3
34603: PUSH
34604: LD_VAR 0 4
34608: MINUS
34609: ST_TO_ADDR
// max_x := x + r ;
34610: LD_ADDR_VAR 0 9
34614: PUSH
34615: LD_VAR 0 2
34619: PUSH
34620: LD_VAR 0 4
34624: PLUS
34625: ST_TO_ADDR
// max_y := y + r ;
34626: LD_ADDR_VAR 0 10
34630: PUSH
34631: LD_VAR 0 3
34635: PUSH
34636: LD_VAR 0 4
34640: PLUS
34641: ST_TO_ADDR
// for _x = min_x to max_x do
34642: LD_ADDR_VAR 0 11
34646: PUSH
34647: DOUBLE
34648: LD_VAR 0 7
34652: DEC
34653: ST_TO_ADDR
34654: LD_VAR 0 9
34658: PUSH
34659: FOR_TO
34660: IFFALSE 34777
// for _y = min_y to max_y do
34662: LD_ADDR_VAR 0 12
34666: PUSH
34667: DOUBLE
34668: LD_VAR 0 8
34672: DEC
34673: ST_TO_ADDR
34674: LD_VAR 0 10
34678: PUSH
34679: FOR_TO
34680: IFFALSE 34773
// begin if not ValidHex ( _x , _y ) then
34682: LD_VAR 0 11
34686: PPUSH
34687: LD_VAR 0 12
34691: PPUSH
34692: CALL_OW 488
34696: NOT
34697: IFFALSE 34701
// continue ;
34699: GO 34679
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
34701: LD_VAR 0 11
34705: PPUSH
34706: LD_VAR 0 12
34710: PPUSH
34711: CALL_OW 351
34715: PUSH
34716: LD_VAR 0 11
34720: PPUSH
34721: LD_VAR 0 12
34725: PPUSH
34726: CALL_OW 554
34730: AND
34731: IFFALSE 34771
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
34733: LD_ADDR_VAR 0 13
34737: PUSH
34738: LD_VAR 0 13
34742: PPUSH
34743: LD_VAR 0 13
34747: PUSH
34748: LD_INT 1
34750: PLUS
34751: PPUSH
34752: LD_VAR 0 11
34756: PUSH
34757: LD_VAR 0 12
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PPUSH
34766: CALL_OW 2
34770: ST_TO_ADDR
// end ;
34771: GO 34679
34773: POP
34774: POP
34775: GO 34659
34777: POP
34778: POP
// if not list then
34779: LD_VAR 0 13
34783: NOT
34784: IFFALSE 34788
// exit ;
34786: GO 34859
// for i in list do
34788: LD_ADDR_VAR 0 6
34792: PUSH
34793: LD_VAR 0 13
34797: PUSH
34798: FOR_IN
34799: IFFALSE 34857
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
34801: LD_VAR 0 1
34805: PPUSH
34806: LD_STRING M
34808: PUSH
34809: LD_VAR 0 6
34813: PUSH
34814: LD_INT 1
34816: ARRAY
34817: PUSH
34818: LD_VAR 0 6
34822: PUSH
34823: LD_INT 2
34825: ARRAY
34826: PUSH
34827: LD_INT 0
34829: PUSH
34830: LD_INT 0
34832: PUSH
34833: LD_INT 0
34835: PUSH
34836: LD_INT 0
34838: PUSH
34839: EMPTY
34840: LIST
34841: LIST
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: PUSH
34848: EMPTY
34849: LIST
34850: PPUSH
34851: CALL_OW 447
34855: GO 34798
34857: POP
34858: POP
// end ;
34859: LD_VAR 0 5
34863: RET
